
BATTERY_INFO_SAMB11_XPLAINED_PRO1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009904  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000006c  10011904  10011904  00011904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002d18  10011970  10011970  00011970  2**2
                  ALLOC
  3 .stack        00000800  10014688  10014688  00011970  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00011970  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00011998  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001c6d5  00000000  00000000  00011a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000027b7  00000000  00000000  0002e121  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000056b7  00000000  00000000  000308d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006a8  00000000  00000000  00035f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000006f8  00000000  00000000  00036637  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00006c07  00000000  00000000  00036d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ab10  00000000  00000000  0003d936  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0013cdd7  00000000  00000000  00048446  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001b08  00000000  00000000  00185220  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10011904 	.word	0x10011904
10008068:	10011904 	.word	0x10011904
1000806c:	10011970 	.word	0x10011970
10008070:	10014688 	.word	0x10014688
10008074:	10011970 	.word	0x10011970
10008078:	10011908 	.word	0x10011908
1000807c:	10011974 	.word	0x10011974
10008080:	1000f9b1 	.word	0x1000f9b1
10008084:	1000b3a1 	.word	0x1000b3a1

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10011970 	.word	0x10011970
100080a8:	00000000 	.word	0x00000000
100080ac:	10011904 	.word	0x10011904

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10011974 	.word	0x10011974
100080dc:	10011904 	.word	0x10011904
100080e0:	10011904 	.word	0x10011904
100080e4:	00000000 	.word	0x00000000

100080e8 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
100080e8:	2301      	movs	r3, #1
100080ea:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
100080ec:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
100080ee:	23fa      	movs	r3, #250	; 0xfa
100080f0:	01db      	lsls	r3, r3, #7
100080f2:	6043      	str	r3, [r0, #4]
}
100080f4:	4770      	bx	lr
100080f6:	46c0      	nop			; (mov r8, r8)

100080f8 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
100080f8:	4b06      	ldr	r3, [pc, #24]	; (10008114 <aon_sleep_timer_disable+0x1c>)
100080fa:	2200      	movs	r2, #0
100080fc:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
100080fe:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008100:	2103      	movs	r1, #3
10008102:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
10008104:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
10008106:	0019      	movs	r1, r3
10008108:	2280      	movs	r2, #128	; 0x80
1000810a:	01d2      	lsls	r2, r2, #7
1000810c:	680b      	ldr	r3, [r1, #0]
1000810e:	4213      	tst	r3, r2
10008110:	d1fc      	bne.n	1000810c <aon_sleep_timer_disable+0x14>
	}
}
10008112:	4770      	bx	lr
10008114:	4000d000 	.word	0x4000d000

10008118 <aon_sleep_timer_sleep_timer_active>:
 *
 * \return Active status of the AON Sleep Timer.
 */
bool aon_sleep_timer_sleep_timer_active(void)
{
	return AON_SLEEP_TIMER0->CONTROL.bit.SLEEP_TIMER_ACTIVE;
10008118:	4b02      	ldr	r3, [pc, #8]	; (10008124 <aon_sleep_timer_sleep_timer_active+0xc>)
1000811a:	6818      	ldr	r0, [r3, #0]
1000811c:	0040      	lsls	r0, r0, #1
1000811e:	0fc0      	lsrs	r0, r0, #31
}
10008120:	4770      	bx	lr
10008122:	46c0      	nop			; (mov r8, r8)
10008124:	4000d000 	.word	0x4000d000

10008128 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
10008128:	4a02      	ldr	r2, [pc, #8]	; (10008134 <aon_sleep_timer_clear_interrup+0xc>)
1000812a:	6811      	ldr	r1, [r2, #0]
1000812c:	2310      	movs	r3, #16
1000812e:	430b      	orrs	r3, r1
10008130:	6013      	str	r3, [r2, #0]
}
10008132:	4770      	bx	lr
10008134:	4000d000 	.word	0x4000d000

10008138 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
10008138:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
1000813a:	4b04      	ldr	r3, [pc, #16]	; (1000814c <aon_sleep_timer_isr_handler+0x14>)
1000813c:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
1000813e:	4b04      	ldr	r3, [pc, #16]	; (10008150 <aon_sleep_timer_isr_handler+0x18>)
10008140:	681b      	ldr	r3, [r3, #0]
10008142:	2b00      	cmp	r3, #0
10008144:	d000      	beq.n	10008148 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
10008146:	4798      	blx	r3
	}
}
10008148:	bd10      	pop	{r4, pc}
1000814a:	46c0      	nop			; (mov r8, r8)
1000814c:	10008129 	.word	0x10008129
10008150:	1001198c 	.word	0x1001198c

10008154 <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
10008154:	4b01      	ldr	r3, [pc, #4]	; (1000815c <aon_sleep_timer_register_callback+0x8>)
10008156:	6018      	str	r0, [r3, #0]
}
10008158:	4770      	bx	lr
1000815a:	46c0      	nop			; (mov r8, r8)
1000815c:	1001198c 	.word	0x1001198c

10008160 <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
10008160:	2200      	movs	r2, #0
10008162:	4b01      	ldr	r3, [pc, #4]	; (10008168 <aon_sleep_timer_unregister_callback+0x8>)
10008164:	601a      	str	r2, [r3, #0]
}
10008166:	4770      	bx	lr
10008168:	1001198c 	.word	0x1001198c

1000816c <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
1000816c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000816e:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
10008170:	2200      	movs	r2, #0
10008172:	4b2b      	ldr	r3, [pc, #172]	; (10008220 <aon_sleep_timer_init+0xb4>)
10008174:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
10008176:	7803      	ldrb	r3, [r0, #0]
10008178:	2b02      	cmp	r3, #2
1000817a:	d105      	bne.n	10008188 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000817c:	4a28      	ldr	r2, [pc, #160]	; (10008220 <aon_sleep_timer_init+0xb4>)
1000817e:	7b11      	ldrb	r1, [r2, #12]
10008180:	3301      	adds	r3, #1
10008182:	430b      	orrs	r3, r1
10008184:	7313      	strb	r3, [r2, #12]
10008186:	e005      	b.n	10008194 <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
10008188:	2b01      	cmp	r3, #1
1000818a:	d103      	bne.n	10008194 <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000818c:	4a24      	ldr	r2, [pc, #144]	; (10008220 <aon_sleep_timer_init+0xb4>)
1000818e:	7b11      	ldrb	r1, [r2, #12]
10008190:	430b      	orrs	r3, r1
10008192:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008194:	4b23      	ldr	r3, [pc, #140]	; (10008224 <aon_sleep_timer_init+0xb8>)
10008196:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008198:	0053      	lsls	r3, r2, #1
1000819a:	d01f      	beq.n	100081dc <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
1000819c:	4d21      	ldr	r5, [pc, #132]	; (10008224 <aon_sleep_timer_init+0xb8>)
1000819e:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
100081a0:	262c      	movs	r6, #44	; 0x2c
100081a2:	36ff      	adds	r6, #255	; 0xff
100081a4:	2180      	movs	r1, #128	; 0x80
100081a6:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
100081a8:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
100081aa:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
100081ac:	9701      	str	r7, [sp, #4]
100081ae:	9b01      	ldr	r3, [sp, #4]
100081b0:	42b3      	cmp	r3, r6
100081b2:	d806      	bhi.n	100081c2 <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
100081b4:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
100081b6:	9b01      	ldr	r3, [sp, #4]
100081b8:	3301      	adds	r3, #1
100081ba:	9301      	str	r3, [sp, #4]
100081bc:	9b01      	ldr	r3, [sp, #4]
100081be:	42b3      	cmp	r3, r6
100081c0:	d9f8      	bls.n	100081b4 <aon_sleep_timer_init+0x48>
100081c2:	7844      	ldrb	r4, [r0, #1]
100081c4:	000b      	movs	r3, r1
100081c6:	2c00      	cmp	r4, #0
100081c8:	d103      	bne.n	100081d2 <aon_sleep_timer_init+0x66>
100081ca:	2380      	movs	r3, #128	; 0x80
100081cc:	009b      	lsls	r3, r3, #2
100081ce:	e000      	b.n	100081d2 <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081d0:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
100081d2:	4213      	tst	r3, r2
100081d4:	d1fc      	bne.n	100081d0 <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081d6:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
100081d8:	0053      	lsls	r3, r2, #1
100081da:	d1e5      	bne.n	100081a8 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
100081dc:	7843      	ldrb	r3, [r0, #1]
100081de:	2b00      	cmp	r3, #0
100081e0:	d105      	bne.n	100081ee <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081e2:	4b10      	ldr	r3, [pc, #64]	; (10008224 <aon_sleep_timer_init+0xb8>)
100081e4:	6842      	ldr	r2, [r0, #4]
100081e6:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
100081e8:	2201      	movs	r2, #1
100081ea:	601a      	str	r2, [r3, #0]
100081ec:	e004      	b.n	100081f8 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081ee:	4b0d      	ldr	r3, [pc, #52]	; (10008224 <aon_sleep_timer_init+0xb8>)
100081f0:	6842      	ldr	r2, [r0, #4]
100081f2:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
100081f4:	2202      	movs	r2, #2
100081f6:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
100081f8:	7843      	ldrb	r3, [r0, #1]
100081fa:	2b01      	cmp	r3, #1
100081fc:	d109      	bne.n	10008212 <aon_sleep_timer_init+0xa6>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
100081fe:	4909      	ldr	r1, [pc, #36]	; (10008224 <aon_sleep_timer_init+0xb8>)
10008200:	22e0      	movs	r2, #224	; 0xe0
10008202:	01d2      	lsls	r2, r2, #7
10008204:	680b      	ldr	r3, [r1, #0]
10008206:	4013      	ands	r3, r2
10008208:	4293      	cmp	r3, r2
1000820a:	d1fb      	bne.n	10008204 <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
1000820c:	2200      	movs	r2, #0
1000820e:	4b05      	ldr	r3, [pc, #20]	; (10008224 <aon_sleep_timer_init+0xb8>)
10008210:	601a      	str	r2, [r3, #0]
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
10008212:	4905      	ldr	r1, [pc, #20]	; (10008228 <aon_sleep_timer_init+0xbc>)
10008214:	202b      	movs	r0, #43	; 0x2b
10008216:	4b05      	ldr	r3, [pc, #20]	; (1000822c <aon_sleep_timer_init+0xc0>)
10008218:	4798      	blx	r3
}
1000821a:	b003      	add	sp, #12
1000821c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000821e:	46c0      	nop			; (mov r8, r8)
10008220:	4000e000 	.word	0x4000e000
10008224:	4000d000 	.word	0x4000d000
10008228:	10008139 	.word	0x10008139
1000822c:	10008d8d 	.word	0x10008d8d

10008230 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
10008230:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
10008232:	4b16      	ldr	r3, [pc, #88]	; (1000828c <gpio_port0_isr_handler+0x5c>)
10008234:	681d      	ldr	r5, [r3, #0]
10008236:	8f29      	ldrh	r1, [r5, #56]	; 0x38
10008238:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000823a:	07cb      	lsls	r3, r1, #31
1000823c:	d407      	bmi.n	1000824e <gpio_port0_isr_handler+0x1e>
1000823e:	2301      	movs	r3, #1
10008240:	2401      	movs	r4, #1
10008242:	0018      	movs	r0, r3
10008244:	0022      	movs	r2, r4
10008246:	409a      	lsls	r2, r3
10008248:	4211      	tst	r1, r2
1000824a:	d014      	beq.n	10008276 <gpio_port0_isr_handler+0x46>
1000824c:	e001      	b.n	10008252 <gpio_port0_isr_handler+0x22>
1000824e:	2201      	movs	r2, #1
10008250:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
10008252:	b292      	uxth	r2, r2
10008254:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
10008256:	2346      	movs	r3, #70	; 0x46
10008258:	4a0c      	ldr	r2, [pc, #48]	; (1000828c <gpio_port0_isr_handler+0x5c>)
1000825a:	5ad3      	ldrh	r3, [r2, r3]
1000825c:	4103      	asrs	r3, r0
1000825e:	07db      	lsls	r3, r3, #31
10008260:	d50c      	bpl.n	1000827c <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
10008262:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
10008264:	5ad3      	ldrh	r3, [r2, r3]
10008266:	4103      	asrs	r3, r0
10008268:	07db      	lsls	r3, r3, #31
1000826a:	d507      	bpl.n	1000827c <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000826c:	0080      	lsls	r0, r0, #2
1000826e:	1810      	adds	r0, r2, r0
10008270:	6843      	ldr	r3, [r0, #4]
10008272:	4798      	blx	r3
10008274:	e002      	b.n	1000827c <gpio_port0_isr_handler+0x4c>
10008276:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
10008278:	2b10      	cmp	r3, #16
1000827a:	d1e2      	bne.n	10008242 <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000827c:	2180      	movs	r1, #128	; 0x80
1000827e:	0409      	lsls	r1, r1, #16
10008280:	23c0      	movs	r3, #192	; 0xc0
10008282:	005b      	lsls	r3, r3, #1
10008284:	4a02      	ldr	r2, [pc, #8]	; (10008290 <gpio_port0_isr_handler+0x60>)
10008286:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
10008288:	bd70      	pop	{r4, r5, r6, pc}
1000828a:	46c0      	nop			; (mov r8, r8)
1000828c:	10013438 	.word	0x10013438
10008290:	e000e100 	.word	0xe000e100

10008294 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
10008294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
10008296:	4b18      	ldr	r3, [pc, #96]	; (100082f8 <gpio_port1_isr_handler+0x64>)
10008298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000829a:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000829c:	b2b6      	uxth	r6, r6
1000829e:	0037      	movs	r7, r6
100082a0:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
100082a2:	0b76      	lsrs	r6, r6, #13
100082a4:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
100082a6:	4d14      	ldr	r5, [pc, #80]	; (100082f8 <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
100082a8:	2e00      	cmp	r6, #0
100082aa:	d001      	beq.n	100082b0 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
100082ac:	4b13      	ldr	r3, [pc, #76]	; (100082fc <gpio_port1_isr_handler+0x68>)
100082ae:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
100082b0:	0022      	movs	r2, r4
100082b2:	2301      	movs	r3, #1
100082b4:	40a3      	lsls	r3, r4
100082b6:	421f      	tst	r7, r3
100082b8:	d013      	beq.n	100082e2 <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
100082ba:	b29b      	uxth	r3, r3
100082bc:	6ca9      	ldr	r1, [r5, #72]	; 0x48
100082be:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
100082c0:	238e      	movs	r3, #142	; 0x8e
100082c2:	5aeb      	ldrh	r3, [r5, r3]
100082c4:	4123      	asrs	r3, r4
100082c6:	07db      	lsls	r3, r3, #31
100082c8:	d50b      	bpl.n	100082e2 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
100082ca:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
100082cc:	490a      	ldr	r1, [pc, #40]	; (100082f8 <gpio_port1_isr_handler+0x64>)
100082ce:	5acb      	ldrh	r3, [r1, r3]
100082d0:	4123      	asrs	r3, r4
100082d2:	07db      	lsls	r3, r3, #31
100082d4:	d505      	bpl.n	100082e2 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
100082d6:	3212      	adds	r2, #18
100082d8:	0092      	lsls	r2, r2, #2
100082da:	188a      	adds	r2, r1, r2
100082dc:	6853      	ldr	r3, [r2, #4]
100082de:	4798      	blx	r3
				break;
100082e0:	e002      	b.n	100082e8 <gpio_port1_isr_handler+0x54>
100082e2:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
100082e4:	2c10      	cmp	r4, #16
100082e6:	d1df      	bne.n	100082a8 <gpio_port1_isr_handler+0x14>
100082e8:	2180      	movs	r1, #128	; 0x80
100082ea:	0449      	lsls	r1, r1, #17
100082ec:	23c0      	movs	r3, #192	; 0xc0
100082ee:	005b      	lsls	r3, r3, #1
100082f0:	4a03      	ldr	r2, [pc, #12]	; (10008300 <gpio_port1_isr_handler+0x6c>)
100082f2:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
100082f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100082f6:	46c0      	nop			; (mov r8, r8)
100082f8:	10013438 	.word	0x10013438
100082fc:	0001bc51 	.word	0x0001bc51
10008300:	e000e100 	.word	0xe000e100

10008304 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
10008304:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
10008306:	2390      	movs	r3, #144	; 0x90
10008308:	4a1b      	ldr	r2, [pc, #108]	; (10008378 <gpio_port2_isr_handler+0x74>)
1000830a:	58d2      	ldr	r2, [r2, r3]
1000830c:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000830e:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
10008310:	04d9      	lsls	r1, r3, #19
10008312:	d414      	bmi.n	1000833e <gpio_port2_isr_handler+0x3a>
10008314:	0499      	lsls	r1, r3, #18
10008316:	d40a      	bmi.n	1000832e <gpio_port2_isr_handler+0x2a>
10008318:	0459      	lsls	r1, r3, #17
1000831a:	d40c      	bmi.n	10008336 <gpio_port2_isr_handler+0x32>
1000831c:	0bdb      	lsrs	r3, r3, #15
1000831e:	03db      	lsls	r3, r3, #15
10008320:	b29b      	uxth	r3, r3
10008322:	2b00      	cmp	r3, #0
10008324:	d020      	beq.n	10008368 <gpio_port2_isr_handler+0x64>
10008326:	2380      	movs	r3, #128	; 0x80
10008328:	021b      	lsls	r3, r3, #8
1000832a:	210f      	movs	r1, #15
1000832c:	e00a      	b.n	10008344 <gpio_port2_isr_handler+0x40>
1000832e:	2380      	movs	r3, #128	; 0x80
10008330:	019b      	lsls	r3, r3, #6
10008332:	210d      	movs	r1, #13
10008334:	e006      	b.n	10008344 <gpio_port2_isr_handler+0x40>
10008336:	2380      	movs	r3, #128	; 0x80
10008338:	01db      	lsls	r3, r3, #7
1000833a:	210e      	movs	r1, #14
1000833c:	e002      	b.n	10008344 <gpio_port2_isr_handler+0x40>
1000833e:	2380      	movs	r3, #128	; 0x80
10008340:	015b      	lsls	r3, r3, #5
10008342:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
10008344:	b29b      	uxth	r3, r3
10008346:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
10008348:	23d6      	movs	r3, #214	; 0xd6
1000834a:	4a0b      	ldr	r2, [pc, #44]	; (10008378 <gpio_port2_isr_handler+0x74>)
1000834c:	5ad3      	ldrh	r3, [r2, r3]
1000834e:	410b      	asrs	r3, r1
10008350:	07db      	lsls	r3, r3, #31
10008352:	d509      	bpl.n	10008368 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
10008354:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
10008356:	5ad3      	ldrh	r3, [r2, r3]
10008358:	410b      	asrs	r3, r1
1000835a:	07db      	lsls	r3, r3, #31
1000835c:	d504      	bpl.n	10008368 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000835e:	3124      	adds	r1, #36	; 0x24
10008360:	0089      	lsls	r1, r1, #2
10008362:	1851      	adds	r1, r2, r1
10008364:	684b      	ldr	r3, [r1, #4]
10008366:	4798      	blx	r3
10008368:	2180      	movs	r1, #128	; 0x80
1000836a:	0489      	lsls	r1, r1, #18
1000836c:	23c0      	movs	r3, #192	; 0xc0
1000836e:	005b      	lsls	r3, r3, #1
10008370:	4a02      	ldr	r2, [pc, #8]	; (1000837c <gpio_port2_isr_handler+0x78>)
10008372:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
10008374:	bd10      	pop	{r4, pc}
10008376:	46c0      	nop			; (mov r8, r8)
10008378:	10013438 	.word	0x10013438
1000837c:	e000e100 	.word	0xe000e100

10008380 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
10008380:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
10008382:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
10008384:	23ff      	movs	r3, #255	; 0xff
10008386:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
10008388:	2807      	cmp	r0, #7
1000838a:	d833      	bhi.n	100083f4 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000838c:	4a4e      	ldr	r2, [pc, #312]	; (100084c8 <gpio_pinmux_cofiguration+0x148>)
1000838e:	6c54      	ldr	r4, [r2, #68]	; 0x44
10008390:	3bf8      	subs	r3, #248	; 0xf8
10008392:	4003      	ands	r3, r0
10008394:	009b      	lsls	r3, r3, #2
10008396:	2607      	movs	r6, #7
10008398:	409e      	lsls	r6, r3
1000839a:	43b4      	bics	r4, r6
1000839c:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000839e:	6c54      	ldr	r4, [r2, #68]	; 0x44
100083a0:	000e      	movs	r6, r1
100083a2:	409e      	lsls	r6, r3
100083a4:	0033      	movs	r3, r6
100083a6:	4323      	orrs	r3, r4
100083a8:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
100083aa:	2901      	cmp	r1, #1
100083ac:	d000      	beq.n	100083b0 <gpio_pinmux_cofiguration+0x30>
100083ae:	e08a      	b.n	100084c6 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
100083b0:	2803      	cmp	r0, #3
100083b2:	d80f      	bhi.n	100083d4 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100083b4:	0011      	movs	r1, r2
100083b6:	22d0      	movs	r2, #208	; 0xd0
100083b8:	0052      	lsls	r2, r2, #1
100083ba:	588c      	ldr	r4, [r1, r2]
100083bc:	2303      	movs	r3, #3
100083be:	4018      	ands	r0, r3
100083c0:	00c0      	lsls	r0, r0, #3
100083c2:	333c      	adds	r3, #60	; 0x3c
100083c4:	4083      	lsls	r3, r0
100083c6:	439c      	bics	r4, r3
100083c8:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100083ca:	588b      	ldr	r3, [r1, r2]
100083cc:	4085      	lsls	r5, r0
100083ce:	431d      	orrs	r5, r3
100083d0:	508d      	str	r5, [r1, r2]
100083d2:	e078      	b.n	100084c6 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100083d4:	493c      	ldr	r1, [pc, #240]	; (100084c8 <gpio_pinmux_cofiguration+0x148>)
100083d6:	22d2      	movs	r2, #210	; 0xd2
100083d8:	0052      	lsls	r2, r2, #1
100083da:	588c      	ldr	r4, [r1, r2]
100083dc:	2303      	movs	r3, #3
100083de:	4018      	ands	r0, r3
100083e0:	00c0      	lsls	r0, r0, #3
100083e2:	333c      	adds	r3, #60	; 0x3c
100083e4:	4083      	lsls	r3, r0
100083e6:	439c      	bics	r4, r3
100083e8:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100083ea:	588b      	ldr	r3, [r1, r2]
100083ec:	4085      	lsls	r5, r0
100083ee:	431d      	orrs	r5, r3
100083f0:	508d      	str	r5, [r1, r2]
100083f2:	e068      	b.n	100084c6 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
100083f4:	280f      	cmp	r0, #15
100083f6:	d832      	bhi.n	1000845e <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
100083f8:	4a33      	ldr	r2, [pc, #204]	; (100084c8 <gpio_pinmux_cofiguration+0x148>)
100083fa:	6c94      	ldr	r4, [r2, #72]	; 0x48
100083fc:	2307      	movs	r3, #7
100083fe:	4003      	ands	r3, r0
10008400:	009b      	lsls	r3, r3, #2
10008402:	2607      	movs	r6, #7
10008404:	409e      	lsls	r6, r3
10008406:	43b4      	bics	r4, r6
10008408:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000840a:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000840c:	000e      	movs	r6, r1
1000840e:	409e      	lsls	r6, r3
10008410:	0033      	movs	r3, r6
10008412:	4323      	orrs	r3, r4
10008414:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
10008416:	2901      	cmp	r1, #1
10008418:	d155      	bne.n	100084c6 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000841a:	280b      	cmp	r0, #11
1000841c:	d80f      	bhi.n	1000843e <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000841e:	0011      	movs	r1, r2
10008420:	22d4      	movs	r2, #212	; 0xd4
10008422:	0052      	lsls	r2, r2, #1
10008424:	588c      	ldr	r4, [r1, r2]
10008426:	2303      	movs	r3, #3
10008428:	4018      	ands	r0, r3
1000842a:	00c0      	lsls	r0, r0, #3
1000842c:	333c      	adds	r3, #60	; 0x3c
1000842e:	4083      	lsls	r3, r0
10008430:	439c      	bics	r4, r3
10008432:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008434:	588b      	ldr	r3, [r1, r2]
10008436:	4085      	lsls	r5, r0
10008438:	431d      	orrs	r5, r3
1000843a:	508d      	str	r5, [r1, r2]
1000843c:	e043      	b.n	100084c6 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000843e:	4922      	ldr	r1, [pc, #136]	; (100084c8 <gpio_pinmux_cofiguration+0x148>)
10008440:	22d6      	movs	r2, #214	; 0xd6
10008442:	0052      	lsls	r2, r2, #1
10008444:	588c      	ldr	r4, [r1, r2]
10008446:	2303      	movs	r3, #3
10008448:	4018      	ands	r0, r3
1000844a:	00c0      	lsls	r0, r0, #3
1000844c:	333c      	adds	r3, #60	; 0x3c
1000844e:	4083      	lsls	r3, r0
10008450:	439c      	bics	r4, r3
10008452:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008454:	588b      	ldr	r3, [r1, r2]
10008456:	4085      	lsls	r5, r0
10008458:	431d      	orrs	r5, r3
1000845a:	508d      	str	r5, [r1, r2]
1000845c:	e033      	b.n	100084c6 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000845e:	2817      	cmp	r0, #23
10008460:	d831      	bhi.n	100084c6 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008462:	4a19      	ldr	r2, [pc, #100]	; (100084c8 <gpio_pinmux_cofiguration+0x148>)
10008464:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008466:	2307      	movs	r3, #7
10008468:	4003      	ands	r3, r0
1000846a:	009b      	lsls	r3, r3, #2
1000846c:	2607      	movs	r6, #7
1000846e:	409e      	lsls	r6, r3
10008470:	43b4      	bics	r4, r6
10008472:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008474:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008476:	000e      	movs	r6, r1
10008478:	409e      	lsls	r6, r3
1000847a:	0033      	movs	r3, r6
1000847c:	4323      	orrs	r3, r4
1000847e:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
10008480:	2901      	cmp	r1, #1
10008482:	d120      	bne.n	100084c6 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
10008484:	2813      	cmp	r0, #19
10008486:	d80f      	bhi.n	100084a8 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008488:	0011      	movs	r1, r2
1000848a:	22d8      	movs	r2, #216	; 0xd8
1000848c:	0052      	lsls	r2, r2, #1
1000848e:	588c      	ldr	r4, [r1, r2]
10008490:	2303      	movs	r3, #3
10008492:	4018      	ands	r0, r3
10008494:	00c0      	lsls	r0, r0, #3
10008496:	333c      	adds	r3, #60	; 0x3c
10008498:	4083      	lsls	r3, r0
1000849a:	439c      	bics	r4, r3
1000849c:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000849e:	588b      	ldr	r3, [r1, r2]
100084a0:	4085      	lsls	r5, r0
100084a2:	431d      	orrs	r5, r3
100084a4:	508d      	str	r5, [r1, r2]
100084a6:	e00e      	b.n	100084c6 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100084a8:	4a07      	ldr	r2, [pc, #28]	; (100084c8 <gpio_pinmux_cofiguration+0x148>)
100084aa:	23da      	movs	r3, #218	; 0xda
100084ac:	005b      	lsls	r3, r3, #1
100084ae:	58d1      	ldr	r1, [r2, r3]
100084b0:	2403      	movs	r4, #3
100084b2:	4020      	ands	r0, r4
100084b4:	00c0      	lsls	r0, r0, #3
100084b6:	343c      	adds	r4, #60	; 0x3c
100084b8:	4084      	lsls	r4, r0
100084ba:	43a1      	bics	r1, r4
100084bc:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100084be:	58d1      	ldr	r1, [r2, r3]
100084c0:	4085      	lsls	r5, r0
100084c2:	430d      	orrs	r5, r1
100084c4:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
100084c6:	bd70      	pop	{r4, r5, r6, pc}
100084c8:	4000b000 	.word	0x4000b000

100084cc <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
100084cc:	b510      	push	{r4, lr}
100084ce:	4a11      	ldr	r2, [pc, #68]	; (10008514 <gpio_init+0x48>)
100084d0:	0010      	movs	r0, r2
100084d2:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
100084d4:	2100      	movs	r1, #0
100084d6:	e007      	b.n	100084e8 <gpio_init+0x1c>
100084d8:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
100084da:	4293      	cmp	r3, r2
100084dc:	d1fc      	bne.n	100084d8 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
100084de:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
100084e0:	8011      	strh	r1, [r2, #0]
100084e2:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
100084e4:	4282      	cmp	r2, r0
100084e6:	d002      	beq.n	100084ee <gpio_init+0x22>
100084e8:	0013      	movs	r3, r2
100084ea:	3b40      	subs	r3, #64	; 0x40
100084ec:	e7f4      	b.n	100084d8 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
100084ee:	4b0a      	ldr	r3, [pc, #40]	; (10008518 <gpio_init+0x4c>)
100084f0:	4a0a      	ldr	r2, [pc, #40]	; (1000851c <gpio_init+0x50>)
100084f2:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
100084f4:	4a0a      	ldr	r2, [pc, #40]	; (10008520 <gpio_init+0x54>)
100084f6:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
100084f8:	490a      	ldr	r1, [pc, #40]	; (10008524 <gpio_init+0x58>)
100084fa:	2290      	movs	r2, #144	; 0x90
100084fc:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
100084fe:	490a      	ldr	r1, [pc, #40]	; (10008528 <gpio_init+0x5c>)
10008500:	2027      	movs	r0, #39	; 0x27
10008502:	4c0a      	ldr	r4, [pc, #40]	; (1000852c <gpio_init+0x60>)
10008504:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
10008506:	490a      	ldr	r1, [pc, #40]	; (10008530 <gpio_init+0x64>)
10008508:	2028      	movs	r0, #40	; 0x28
1000850a:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000850c:	4909      	ldr	r1, [pc, #36]	; (10008534 <gpio_init+0x68>)
1000850e:	2029      	movs	r0, #41	; 0x29
10008510:	47a0      	blx	r4
}
10008512:	bd10      	pop	{r4, pc}
10008514:	1001347c 	.word	0x1001347c
10008518:	10013438 	.word	0x10013438
1000851c:	40010000 	.word	0x40010000
10008520:	40011000 	.word	0x40011000
10008524:	40013000 	.word	0x40013000
10008528:	10008231 	.word	0x10008231
1000852c:	10008d8d 	.word	0x10008d8d
10008530:	10008295 	.word	0x10008295
10008534:	10008305 	.word	0x10008305

10008538 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
10008538:	2801      	cmp	r0, #1
1000853a:	d00d      	beq.n	10008558 <system_clock_config+0x20>
1000853c:	2800      	cmp	r0, #0
1000853e:	d002      	beq.n	10008546 <system_clock_config+0xe>
10008540:	2802      	cmp	r0, #2
10008542:	d01c      	beq.n	1000857e <system_clock_config+0x46>
10008544:	e02e      	b.n	100085a4 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
10008546:	4a18      	ldr	r2, [pc, #96]	; (100085a8 <system_clock_config+0x70>)
10008548:	6990      	ldr	r0, [r2, #24]
1000854a:	230c      	movs	r3, #12
1000854c:	4303      	orrs	r3, r0
1000854e:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
10008550:	4a16      	ldr	r2, [pc, #88]	; (100085ac <system_clock_config+0x74>)
10008552:	4b17      	ldr	r3, [pc, #92]	; (100085b0 <system_clock_config+0x78>)
10008554:	601a      	str	r2, [r3, #0]
			break;
10008556:	e01a      	b.n	1000858e <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
10008558:	4b13      	ldr	r3, [pc, #76]	; (100085a8 <system_clock_config+0x70>)
1000855a:	6998      	ldr	r0, [r3, #24]
1000855c:	2208      	movs	r2, #8
1000855e:	4302      	orrs	r2, r0
10008560:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
10008562:	699a      	ldr	r2, [r3, #24]
10008564:	2004      	movs	r0, #4
10008566:	4382      	bics	r2, r0
10008568:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000856a:	4a12      	ldr	r2, [pc, #72]	; (100085b4 <system_clock_config+0x7c>)
1000856c:	6853      	ldr	r3, [r2, #4]
1000856e:	2080      	movs	r0, #128	; 0x80
10008570:	0300      	lsls	r0, r0, #12
10008572:	4303      	orrs	r3, r0
10008574:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
10008576:	4a10      	ldr	r2, [pc, #64]	; (100085b8 <system_clock_config+0x80>)
10008578:	4b0d      	ldr	r3, [pc, #52]	; (100085b0 <system_clock_config+0x78>)
1000857a:	601a      	str	r2, [r3, #0]
			break;
1000857c:	e007      	b.n	1000858e <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000857e:	4a0a      	ldr	r2, [pc, #40]	; (100085a8 <system_clock_config+0x70>)
10008580:	6993      	ldr	r3, [r2, #24]
10008582:	200c      	movs	r0, #12
10008584:	4383      	bics	r3, r0
10008586:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
10008588:	4a08      	ldr	r2, [pc, #32]	; (100085ac <system_clock_config+0x74>)
1000858a:	4b09      	ldr	r3, [pc, #36]	; (100085b0 <system_clock_config+0x78>)
1000858c:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000858e:	4b06      	ldr	r3, [pc, #24]	; (100085a8 <system_clock_config+0x70>)
10008590:	699a      	ldr	r2, [r3, #24]
10008592:	2003      	movs	r0, #3
10008594:	4382      	bics	r2, r0
10008596:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
10008598:	699a      	ldr	r2, [r3, #24]
1000859a:	4001      	ands	r1, r0
1000859c:	4311      	orrs	r1, r2
1000859e:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
100085a0:	2000      	movs	r0, #0
100085a2:	e000      	b.n	100085a6 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
100085a4:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
100085a6:	4770      	bx	lr
100085a8:	4000b000 	.word	0x4000b000
100085ac:	018cba80 	.word	0x018cba80
100085b0:	10013510 	.word	0x10013510
100085b4:	4000f000 	.word	0x4000f000
100085b8:	001e8480 	.word	0x001e8480

100085bc <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
100085bc:	4b01      	ldr	r3, [pc, #4]	; (100085c4 <system_clock_get_value+0x8>)
100085be:	6818      	ldr	r0, [r3, #0]
}
100085c0:	4770      	bx	lr
100085c2:	46c0      	nop			; (mov r8, r8)
100085c4:	10013510 	.word	0x10013510

100085c8 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
100085c8:	b500      	push	{lr}
	switch (peripheral) {
100085ca:	2835      	cmp	r0, #53	; 0x35
100085cc:	d900      	bls.n	100085d0 <system_clock_peripheral_enable+0x8>
100085ce:	e1a2      	b.n	10008916 <system_clock_peripheral_enable+0x34e>
100085d0:	0080      	lsls	r0, r0, #2
100085d2:	4bd2      	ldr	r3, [pc, #840]	; (1000891c <system_clock_peripheral_enable+0x354>)
100085d4:	581b      	ldr	r3, [r3, r0]
100085d6:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100085d8:	4ad1      	ldr	r2, [pc, #836]	; (10008920 <system_clock_peripheral_enable+0x358>)
100085da:	68d1      	ldr	r1, [r2, #12]
100085dc:	2302      	movs	r3, #2
100085de:	430b      	orrs	r3, r1
100085e0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100085e2:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
100085e4:	e198      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100085e6:	4ace      	ldr	r2, [pc, #824]	; (10008920 <system_clock_peripheral_enable+0x358>)
100085e8:	68d1      	ldr	r1, [r2, #12]
100085ea:	2304      	movs	r3, #4
100085ec:	430b      	orrs	r3, r1
100085ee:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100085f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
100085f2:	e191      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100085f4:	4aca      	ldr	r2, [pc, #808]	; (10008920 <system_clock_peripheral_enable+0x358>)
100085f6:	68d1      	ldr	r1, [r2, #12]
100085f8:	2308      	movs	r3, #8
100085fa:	430b      	orrs	r3, r1
100085fc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100085fe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
10008600:	e18a      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008602:	4ac7      	ldr	r2, [pc, #796]	; (10008920 <system_clock_peripheral_enable+0x358>)
10008604:	68d1      	ldr	r1, [r2, #12]
10008606:	2310      	movs	r3, #16
10008608:	430b      	orrs	r3, r1
1000860a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000860c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000860e:	e183      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008610:	4ac3      	ldr	r2, [pc, #780]	; (10008920 <system_clock_peripheral_enable+0x358>)
10008612:	68d1      	ldr	r1, [r2, #12]
10008614:	2320      	movs	r3, #32
10008616:	430b      	orrs	r3, r1
10008618:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000861a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000861c:	e17c      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000861e:	4ac0      	ldr	r2, [pc, #768]	; (10008920 <system_clock_peripheral_enable+0x358>)
10008620:	68d1      	ldr	r1, [r2, #12]
10008622:	2380      	movs	r3, #128	; 0x80
10008624:	430b      	orrs	r3, r1
10008626:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008628:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000862a:	e175      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000862c:	4abc      	ldr	r2, [pc, #752]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000862e:	68d3      	ldr	r3, [r2, #12]
10008630:	2180      	movs	r1, #128	; 0x80
10008632:	0049      	lsls	r1, r1, #1
10008634:	430b      	orrs	r3, r1
10008636:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008638:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000863a:	e16d      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000863c:	4ab8      	ldr	r2, [pc, #736]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000863e:	68d3      	ldr	r3, [r2, #12]
10008640:	2180      	movs	r1, #128	; 0x80
10008642:	0109      	lsls	r1, r1, #4
10008644:	430b      	orrs	r3, r1
10008646:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008648:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000864a:	e165      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000864c:	4ab4      	ldr	r2, [pc, #720]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000864e:	68d3      	ldr	r3, [r2, #12]
10008650:	2180      	movs	r1, #128	; 0x80
10008652:	0149      	lsls	r1, r1, #5
10008654:	430b      	orrs	r3, r1
10008656:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008658:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000865a:	e15d      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000865c:	4ab0      	ldr	r2, [pc, #704]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000865e:	68d3      	ldr	r3, [r2, #12]
10008660:	2180      	movs	r1, #128	; 0x80
10008662:	0189      	lsls	r1, r1, #6
10008664:	430b      	orrs	r3, r1
10008666:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008668:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000866a:	e155      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000866c:	4aac      	ldr	r2, [pc, #688]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000866e:	68d3      	ldr	r3, [r2, #12]
10008670:	2180      	movs	r1, #128	; 0x80
10008672:	01c9      	lsls	r1, r1, #7
10008674:	430b      	orrs	r3, r1
10008676:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008678:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000867a:	e14d      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000867c:	4aa8      	ldr	r2, [pc, #672]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000867e:	68d3      	ldr	r3, [r2, #12]
10008680:	2180      	movs	r1, #128	; 0x80
10008682:	0209      	lsls	r1, r1, #8
10008684:	430b      	orrs	r3, r1
10008686:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008688:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000868a:	e145      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000868c:	4aa4      	ldr	r2, [pc, #656]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000868e:	68d3      	ldr	r3, [r2, #12]
10008690:	2180      	movs	r1, #128	; 0x80
10008692:	0249      	lsls	r1, r1, #9
10008694:	430b      	orrs	r3, r1
10008696:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008698:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000869a:	e13d      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000869c:	4aa0      	ldr	r2, [pc, #640]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000869e:	68d3      	ldr	r3, [r2, #12]
100086a0:	2180      	movs	r1, #128	; 0x80
100086a2:	0289      	lsls	r1, r1, #10
100086a4:	430b      	orrs	r3, r1
100086a6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100086a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
100086aa:	e135      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100086ac:	4a9c      	ldr	r2, [pc, #624]	; (10008920 <system_clock_peripheral_enable+0x358>)
100086ae:	68d3      	ldr	r3, [r2, #12]
100086b0:	2180      	movs	r1, #128	; 0x80
100086b2:	02c9      	lsls	r1, r1, #11
100086b4:	430b      	orrs	r3, r1
100086b6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100086b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
100086ba:	e12d      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100086bc:	4a98      	ldr	r2, [pc, #608]	; (10008920 <system_clock_peripheral_enable+0x358>)
100086be:	68d3      	ldr	r3, [r2, #12]
100086c0:	2180      	movs	r1, #128	; 0x80
100086c2:	0309      	lsls	r1, r1, #12
100086c4:	430b      	orrs	r3, r1
100086c6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100086c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
100086ca:	e125      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100086cc:	4a94      	ldr	r2, [pc, #592]	; (10008920 <system_clock_peripheral_enable+0x358>)
100086ce:	68d3      	ldr	r3, [r2, #12]
100086d0:	2180      	movs	r1, #128	; 0x80
100086d2:	0349      	lsls	r1, r1, #13
100086d4:	430b      	orrs	r3, r1
100086d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100086d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
100086da:	e11d      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100086dc:	4a90      	ldr	r2, [pc, #576]	; (10008920 <system_clock_peripheral_enable+0x358>)
100086de:	68d3      	ldr	r3, [r2, #12]
100086e0:	2180      	movs	r1, #128	; 0x80
100086e2:	0389      	lsls	r1, r1, #14
100086e4:	430b      	orrs	r3, r1
100086e6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100086e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
100086ea:	e115      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100086ec:	4a8c      	ldr	r2, [pc, #560]	; (10008920 <system_clock_peripheral_enable+0x358>)
100086ee:	68d3      	ldr	r3, [r2, #12]
100086f0:	2180      	movs	r1, #128	; 0x80
100086f2:	03c9      	lsls	r1, r1, #15
100086f4:	430b      	orrs	r3, r1
100086f6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100086f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
100086fa:	e10d      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100086fc:	4a88      	ldr	r2, [pc, #544]	; (10008920 <system_clock_peripheral_enable+0x358>)
100086fe:	68d3      	ldr	r3, [r2, #12]
10008700:	2180      	movs	r1, #128	; 0x80
10008702:	0409      	lsls	r1, r1, #16
10008704:	430b      	orrs	r3, r1
10008706:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008708:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000870a:	e105      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000870c:	4a84      	ldr	r2, [pc, #528]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000870e:	68d3      	ldr	r3, [r2, #12]
10008710:	2180      	movs	r1, #128	; 0x80
10008712:	0449      	lsls	r1, r1, #17
10008714:	430b      	orrs	r3, r1
10008716:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008718:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000871a:	e0fd      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000871c:	4a80      	ldr	r2, [pc, #512]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000871e:	68d3      	ldr	r3, [r2, #12]
10008720:	2180      	movs	r1, #128	; 0x80
10008722:	0489      	lsls	r1, r1, #18
10008724:	430b      	orrs	r3, r1
10008726:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008728:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000872a:	e0f5      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000872c:	4a7c      	ldr	r2, [pc, #496]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000872e:	68d3      	ldr	r3, [r2, #12]
10008730:	2180      	movs	r1, #128	; 0x80
10008732:	04c9      	lsls	r1, r1, #19
10008734:	430b      	orrs	r3, r1
10008736:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008738:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000873a:	e0ed      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000873c:	4a78      	ldr	r2, [pc, #480]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000873e:	68d3      	ldr	r3, [r2, #12]
10008740:	2180      	movs	r1, #128	; 0x80
10008742:	0509      	lsls	r1, r1, #20
10008744:	430b      	orrs	r3, r1
10008746:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008748:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000874a:	e0e5      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000874c:	4a74      	ldr	r2, [pc, #464]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000874e:	68d3      	ldr	r3, [r2, #12]
10008750:	2180      	movs	r1, #128	; 0x80
10008752:	0549      	lsls	r1, r1, #21
10008754:	430b      	orrs	r3, r1
10008756:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008758:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000875a:	e0dd      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000875c:	4a70      	ldr	r2, [pc, #448]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000875e:	68d3      	ldr	r3, [r2, #12]
10008760:	2180      	movs	r1, #128	; 0x80
10008762:	0589      	lsls	r1, r1, #22
10008764:	430b      	orrs	r3, r1
10008766:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008768:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000876a:	e0d5      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000876c:	4a6c      	ldr	r2, [pc, #432]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000876e:	68d3      	ldr	r3, [r2, #12]
10008770:	2180      	movs	r1, #128	; 0x80
10008772:	05c9      	lsls	r1, r1, #23
10008774:	430b      	orrs	r3, r1
10008776:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008778:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000877a:	e0cd      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000877c:	4a68      	ldr	r2, [pc, #416]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000877e:	6911      	ldr	r1, [r2, #16]
10008780:	2301      	movs	r3, #1
10008782:	430b      	orrs	r3, r1
10008784:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008786:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
10008788:	e0c6      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000878a:	4a65      	ldr	r2, [pc, #404]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000878c:	6911      	ldr	r1, [r2, #16]
1000878e:	2302      	movs	r3, #2
10008790:	430b      	orrs	r3, r1
10008792:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008794:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
10008796:	e0bf      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008798:	4a61      	ldr	r2, [pc, #388]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000879a:	6911      	ldr	r1, [r2, #16]
1000879c:	2304      	movs	r3, #4
1000879e:	430b      	orrs	r3, r1
100087a0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100087a2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
100087a4:	e0b8      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100087a6:	4a5e      	ldr	r2, [pc, #376]	; (10008920 <system_clock_peripheral_enable+0x358>)
100087a8:	6911      	ldr	r1, [r2, #16]
100087aa:	2308      	movs	r3, #8
100087ac:	430b      	orrs	r3, r1
100087ae:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100087b0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
100087b2:	e0b1      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100087b4:	4a5a      	ldr	r2, [pc, #360]	; (10008920 <system_clock_peripheral_enable+0x358>)
100087b6:	6911      	ldr	r1, [r2, #16]
100087b8:	2310      	movs	r3, #16
100087ba:	430b      	orrs	r3, r1
100087bc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100087be:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
100087c0:	e0aa      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100087c2:	4a57      	ldr	r2, [pc, #348]	; (10008920 <system_clock_peripheral_enable+0x358>)
100087c4:	6911      	ldr	r1, [r2, #16]
100087c6:	2320      	movs	r3, #32
100087c8:	430b      	orrs	r3, r1
100087ca:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100087cc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
100087ce:	e0a3      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100087d0:	4a53      	ldr	r2, [pc, #332]	; (10008920 <system_clock_peripheral_enable+0x358>)
100087d2:	6911      	ldr	r1, [r2, #16]
100087d4:	2340      	movs	r3, #64	; 0x40
100087d6:	430b      	orrs	r3, r1
100087d8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100087da:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
100087dc:	e09c      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100087de:	4a50      	ldr	r2, [pc, #320]	; (10008920 <system_clock_peripheral_enable+0x358>)
100087e0:	6911      	ldr	r1, [r2, #16]
100087e2:	2380      	movs	r3, #128	; 0x80
100087e4:	430b      	orrs	r3, r1
100087e6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100087e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
100087ea:	e095      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100087ec:	4a4c      	ldr	r2, [pc, #304]	; (10008920 <system_clock_peripheral_enable+0x358>)
100087ee:	6913      	ldr	r3, [r2, #16]
100087f0:	2180      	movs	r1, #128	; 0x80
100087f2:	0049      	lsls	r1, r1, #1
100087f4:	430b      	orrs	r3, r1
100087f6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100087f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
100087fa:	e08d      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100087fc:	4a48      	ldr	r2, [pc, #288]	; (10008920 <system_clock_peripheral_enable+0x358>)
100087fe:	6913      	ldr	r3, [r2, #16]
10008800:	2180      	movs	r1, #128	; 0x80
10008802:	0089      	lsls	r1, r1, #2
10008804:	430b      	orrs	r3, r1
10008806:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008808:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000880a:	e085      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000880c:	4a44      	ldr	r2, [pc, #272]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000880e:	6913      	ldr	r3, [r2, #16]
10008810:	2180      	movs	r1, #128	; 0x80
10008812:	00c9      	lsls	r1, r1, #3
10008814:	430b      	orrs	r3, r1
10008816:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008818:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000881a:	e07d      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000881c:	4a40      	ldr	r2, [pc, #256]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000881e:	6913      	ldr	r3, [r2, #16]
10008820:	2180      	movs	r1, #128	; 0x80
10008822:	0109      	lsls	r1, r1, #4
10008824:	430b      	orrs	r3, r1
10008826:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008828:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000882a:	e075      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000882c:	4a3c      	ldr	r2, [pc, #240]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000882e:	6913      	ldr	r3, [r2, #16]
10008830:	2180      	movs	r1, #128	; 0x80
10008832:	0149      	lsls	r1, r1, #5
10008834:	430b      	orrs	r3, r1
10008836:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008838:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000883a:	e06d      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000883c:	4a38      	ldr	r2, [pc, #224]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000883e:	6913      	ldr	r3, [r2, #16]
10008840:	2180      	movs	r1, #128	; 0x80
10008842:	0189      	lsls	r1, r1, #6
10008844:	430b      	orrs	r3, r1
10008846:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008848:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000884a:	e065      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000884c:	4a34      	ldr	r2, [pc, #208]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000884e:	6913      	ldr	r3, [r2, #16]
10008850:	2180      	movs	r1, #128	; 0x80
10008852:	01c9      	lsls	r1, r1, #7
10008854:	430b      	orrs	r3, r1
10008856:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008858:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000885a:	e05d      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000885c:	4a30      	ldr	r2, [pc, #192]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000885e:	6913      	ldr	r3, [r2, #16]
10008860:	2180      	movs	r1, #128	; 0x80
10008862:	0209      	lsls	r1, r1, #8
10008864:	430b      	orrs	r3, r1
10008866:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008868:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000886a:	e055      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000886c:	4a2c      	ldr	r2, [pc, #176]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000886e:	6913      	ldr	r3, [r2, #16]
10008870:	2180      	movs	r1, #128	; 0x80
10008872:	0249      	lsls	r1, r1, #9
10008874:	430b      	orrs	r3, r1
10008876:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008878:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000887a:	e04d      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000887c:	4a28      	ldr	r2, [pc, #160]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000887e:	6913      	ldr	r3, [r2, #16]
10008880:	2180      	movs	r1, #128	; 0x80
10008882:	0289      	lsls	r1, r1, #10
10008884:	430b      	orrs	r3, r1
10008886:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008888:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000888a:	e045      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000888c:	4a24      	ldr	r2, [pc, #144]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000888e:	6913      	ldr	r3, [r2, #16]
10008890:	2180      	movs	r1, #128	; 0x80
10008892:	02c9      	lsls	r1, r1, #11
10008894:	430b      	orrs	r3, r1
10008896:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008898:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000889a:	e03d      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000889c:	4a20      	ldr	r2, [pc, #128]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000889e:	6913      	ldr	r3, [r2, #16]
100088a0:	2180      	movs	r1, #128	; 0x80
100088a2:	0309      	lsls	r1, r1, #12
100088a4:	430b      	orrs	r3, r1
100088a6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
100088aa:	e035      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100088ac:	4a1c      	ldr	r2, [pc, #112]	; (10008920 <system_clock_peripheral_enable+0x358>)
100088ae:	6913      	ldr	r3, [r2, #16]
100088b0:	2180      	movs	r1, #128	; 0x80
100088b2:	0349      	lsls	r1, r1, #13
100088b4:	430b      	orrs	r3, r1
100088b6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
100088ba:	e02d      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100088bc:	4a18      	ldr	r2, [pc, #96]	; (10008920 <system_clock_peripheral_enable+0x358>)
100088be:	6913      	ldr	r3, [r2, #16]
100088c0:	2180      	movs	r1, #128	; 0x80
100088c2:	0389      	lsls	r1, r1, #14
100088c4:	430b      	orrs	r3, r1
100088c6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
100088ca:	e025      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100088cc:	4a14      	ldr	r2, [pc, #80]	; (10008920 <system_clock_peripheral_enable+0x358>)
100088ce:	6913      	ldr	r3, [r2, #16]
100088d0:	2180      	movs	r1, #128	; 0x80
100088d2:	03c9      	lsls	r1, r1, #15
100088d4:	430b      	orrs	r3, r1
100088d6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
100088da:	e01d      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100088dc:	4a10      	ldr	r2, [pc, #64]	; (10008920 <system_clock_peripheral_enable+0x358>)
100088de:	6913      	ldr	r3, [r2, #16]
100088e0:	2180      	movs	r1, #128	; 0x80
100088e2:	0409      	lsls	r1, r1, #16
100088e4:	430b      	orrs	r3, r1
100088e6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
100088ea:	e015      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
100088ec:	4a0c      	ldr	r2, [pc, #48]	; (10008920 <system_clock_peripheral_enable+0x358>)
100088ee:	7d11      	ldrb	r1, [r2, #20]
100088f0:	2301      	movs	r3, #1
100088f2:	430b      	orrs	r3, r1
100088f4:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088f6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
100088f8:	e00e      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
100088fa:	4a09      	ldr	r2, [pc, #36]	; (10008920 <system_clock_peripheral_enable+0x358>)
100088fc:	7d11      	ldrb	r1, [r2, #20]
100088fe:	2302      	movs	r3, #2
10008900:	430b      	orrs	r3, r1
10008902:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008904:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
10008906:	e007      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
10008908:	4a05      	ldr	r2, [pc, #20]	; (10008920 <system_clock_peripheral_enable+0x358>)
1000890a:	7d11      	ldrb	r1, [r2, #20]
1000890c:	2304      	movs	r3, #4
1000890e:	430b      	orrs	r3, r1
10008910:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008912:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
10008914:	e000      	b.n	10008918 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
10008916:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10008918:	bd00      	pop	{pc}
1000891a:	46c0      	nop			; (mov r8, r8)
1000891c:	10010c40 	.word	0x10010c40
10008920:	4000b000 	.word	0x4000b000

10008924 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
10008924:	b500      	push	{lr}
	switch (peripheral) {
10008926:	2843      	cmp	r0, #67	; 0x43
10008928:	d900      	bls.n	1000892c <system_peripheral_reset+0x8>
1000892a:	e223      	b.n	10008d74 <system_peripheral_reset+0x450>
1000892c:	0080      	lsls	r0, r0, #2
1000892e:	4be0      	ldr	r3, [pc, #896]	; (10008cb0 <system_peripheral_reset+0x38c>)
10008930:	581b      	ldr	r3, [r3, r0]
10008932:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008934:	4bdf      	ldr	r3, [pc, #892]	; (10008cb4 <system_peripheral_reset+0x390>)
10008936:	6859      	ldr	r1, [r3, #4]
10008938:	2202      	movs	r2, #2
1000893a:	4391      	bics	r1, r2
1000893c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000893e:	6859      	ldr	r1, [r3, #4]
10008940:	430a      	orrs	r2, r1
10008942:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008944:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
10008946:	e216      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008948:	4bda      	ldr	r3, [pc, #872]	; (10008cb4 <system_peripheral_reset+0x390>)
1000894a:	6859      	ldr	r1, [r3, #4]
1000894c:	2204      	movs	r2, #4
1000894e:	4391      	bics	r1, r2
10008950:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008952:	6859      	ldr	r1, [r3, #4]
10008954:	430a      	orrs	r2, r1
10008956:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008958:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000895a:	e20c      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000895c:	4bd5      	ldr	r3, [pc, #852]	; (10008cb4 <system_peripheral_reset+0x390>)
1000895e:	6859      	ldr	r1, [r3, #4]
10008960:	2208      	movs	r2, #8
10008962:	4391      	bics	r1, r2
10008964:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008966:	6859      	ldr	r1, [r3, #4]
10008968:	430a      	orrs	r2, r1
1000896a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000896c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000896e:	e202      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008970:	4bd0      	ldr	r3, [pc, #832]	; (10008cb4 <system_peripheral_reset+0x390>)
10008972:	6859      	ldr	r1, [r3, #4]
10008974:	2210      	movs	r2, #16
10008976:	4391      	bics	r1, r2
10008978:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000897a:	6859      	ldr	r1, [r3, #4]
1000897c:	430a      	orrs	r2, r1
1000897e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008980:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
10008982:	e1f8      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008984:	4bcb      	ldr	r3, [pc, #812]	; (10008cb4 <system_peripheral_reset+0x390>)
10008986:	6859      	ldr	r1, [r3, #4]
10008988:	2220      	movs	r2, #32
1000898a:	4391      	bics	r1, r2
1000898c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000898e:	6859      	ldr	r1, [r3, #4]
10008990:	430a      	orrs	r2, r1
10008992:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008994:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
10008996:	e1ee      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008998:	4bc6      	ldr	r3, [pc, #792]	; (10008cb4 <system_peripheral_reset+0x390>)
1000899a:	6859      	ldr	r1, [r3, #4]
1000899c:	2240      	movs	r2, #64	; 0x40
1000899e:	4391      	bics	r1, r2
100089a0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100089a2:	6859      	ldr	r1, [r3, #4]
100089a4:	430a      	orrs	r2, r1
100089a6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089a8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
100089aa:	e1e4      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100089ac:	4bc1      	ldr	r3, [pc, #772]	; (10008cb4 <system_peripheral_reset+0x390>)
100089ae:	6859      	ldr	r1, [r3, #4]
100089b0:	2280      	movs	r2, #128	; 0x80
100089b2:	4391      	bics	r1, r2
100089b4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100089b6:	6859      	ldr	r1, [r3, #4]
100089b8:	430a      	orrs	r2, r1
100089ba:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089bc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
100089be:	e1da      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100089c0:	4bbc      	ldr	r3, [pc, #752]	; (10008cb4 <system_peripheral_reset+0x390>)
100089c2:	6859      	ldr	r1, [r3, #4]
100089c4:	4abc      	ldr	r2, [pc, #752]	; (10008cb8 <system_peripheral_reset+0x394>)
100089c6:	400a      	ands	r2, r1
100089c8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100089ca:	685a      	ldr	r2, [r3, #4]
100089cc:	2180      	movs	r1, #128	; 0x80
100089ce:	0049      	lsls	r1, r1, #1
100089d0:	430a      	orrs	r2, r1
100089d2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089d4:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
100089d6:	e1ce      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100089d8:	4bb6      	ldr	r3, [pc, #728]	; (10008cb4 <system_peripheral_reset+0x390>)
100089da:	6859      	ldr	r1, [r3, #4]
100089dc:	4ab7      	ldr	r2, [pc, #732]	; (10008cbc <system_peripheral_reset+0x398>)
100089de:	400a      	ands	r2, r1
100089e0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100089e2:	685a      	ldr	r2, [r3, #4]
100089e4:	2180      	movs	r1, #128	; 0x80
100089e6:	0089      	lsls	r1, r1, #2
100089e8:	430a      	orrs	r2, r1
100089ea:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089ec:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
100089ee:	e1c2      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100089f0:	4bb0      	ldr	r3, [pc, #704]	; (10008cb4 <system_peripheral_reset+0x390>)
100089f2:	6859      	ldr	r1, [r3, #4]
100089f4:	4ab2      	ldr	r2, [pc, #712]	; (10008cc0 <system_peripheral_reset+0x39c>)
100089f6:	400a      	ands	r2, r1
100089f8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100089fa:	685a      	ldr	r2, [r3, #4]
100089fc:	2180      	movs	r1, #128	; 0x80
100089fe:	00c9      	lsls	r1, r1, #3
10008a00:	430a      	orrs	r2, r1
10008a02:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a04:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
10008a06:	e1b6      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008a08:	4baa      	ldr	r3, [pc, #680]	; (10008cb4 <system_peripheral_reset+0x390>)
10008a0a:	6859      	ldr	r1, [r3, #4]
10008a0c:	4aad      	ldr	r2, [pc, #692]	; (10008cc4 <system_peripheral_reset+0x3a0>)
10008a0e:	400a      	ands	r2, r1
10008a10:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008a12:	685a      	ldr	r2, [r3, #4]
10008a14:	2180      	movs	r1, #128	; 0x80
10008a16:	0109      	lsls	r1, r1, #4
10008a18:	430a      	orrs	r2, r1
10008a1a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a1c:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
10008a1e:	e1aa      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008a20:	4ba4      	ldr	r3, [pc, #656]	; (10008cb4 <system_peripheral_reset+0x390>)
10008a22:	6859      	ldr	r1, [r3, #4]
10008a24:	4aa8      	ldr	r2, [pc, #672]	; (10008cc8 <system_peripheral_reset+0x3a4>)
10008a26:	400a      	ands	r2, r1
10008a28:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008a2a:	685a      	ldr	r2, [r3, #4]
10008a2c:	2180      	movs	r1, #128	; 0x80
10008a2e:	0149      	lsls	r1, r1, #5
10008a30:	430a      	orrs	r2, r1
10008a32:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a34:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
10008a36:	e19e      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008a38:	4b9e      	ldr	r3, [pc, #632]	; (10008cb4 <system_peripheral_reset+0x390>)
10008a3a:	6859      	ldr	r1, [r3, #4]
10008a3c:	4aa3      	ldr	r2, [pc, #652]	; (10008ccc <system_peripheral_reset+0x3a8>)
10008a3e:	400a      	ands	r2, r1
10008a40:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008a42:	685a      	ldr	r2, [r3, #4]
10008a44:	2180      	movs	r1, #128	; 0x80
10008a46:	0189      	lsls	r1, r1, #6
10008a48:	430a      	orrs	r2, r1
10008a4a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a4c:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
10008a4e:	e192      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008a50:	4b98      	ldr	r3, [pc, #608]	; (10008cb4 <system_peripheral_reset+0x390>)
10008a52:	6859      	ldr	r1, [r3, #4]
10008a54:	4a9e      	ldr	r2, [pc, #632]	; (10008cd0 <system_peripheral_reset+0x3ac>)
10008a56:	400a      	ands	r2, r1
10008a58:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008a5a:	685a      	ldr	r2, [r3, #4]
10008a5c:	2180      	movs	r1, #128	; 0x80
10008a5e:	01c9      	lsls	r1, r1, #7
10008a60:	430a      	orrs	r2, r1
10008a62:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a64:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
10008a66:	e186      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008a68:	4b92      	ldr	r3, [pc, #584]	; (10008cb4 <system_peripheral_reset+0x390>)
10008a6a:	6859      	ldr	r1, [r3, #4]
10008a6c:	4a99      	ldr	r2, [pc, #612]	; (10008cd4 <system_peripheral_reset+0x3b0>)
10008a6e:	400a      	ands	r2, r1
10008a70:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008a72:	685a      	ldr	r2, [r3, #4]
10008a74:	2180      	movs	r1, #128	; 0x80
10008a76:	0209      	lsls	r1, r1, #8
10008a78:	430a      	orrs	r2, r1
10008a7a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a7c:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
10008a7e:	e17a      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008a80:	4b8c      	ldr	r3, [pc, #560]	; (10008cb4 <system_peripheral_reset+0x390>)
10008a82:	6859      	ldr	r1, [r3, #4]
10008a84:	4a94      	ldr	r2, [pc, #592]	; (10008cd8 <system_peripheral_reset+0x3b4>)
10008a86:	400a      	ands	r2, r1
10008a88:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008a8a:	685a      	ldr	r2, [r3, #4]
10008a8c:	2180      	movs	r1, #128	; 0x80
10008a8e:	0249      	lsls	r1, r1, #9
10008a90:	430a      	orrs	r2, r1
10008a92:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a94:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
10008a96:	e16e      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008a98:	4b86      	ldr	r3, [pc, #536]	; (10008cb4 <system_peripheral_reset+0x390>)
10008a9a:	6859      	ldr	r1, [r3, #4]
10008a9c:	4a8f      	ldr	r2, [pc, #572]	; (10008cdc <system_peripheral_reset+0x3b8>)
10008a9e:	400a      	ands	r2, r1
10008aa0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008aa2:	685a      	ldr	r2, [r3, #4]
10008aa4:	2180      	movs	r1, #128	; 0x80
10008aa6:	0289      	lsls	r1, r1, #10
10008aa8:	430a      	orrs	r2, r1
10008aaa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008aac:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
10008aae:	e162      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008ab0:	4b80      	ldr	r3, [pc, #512]	; (10008cb4 <system_peripheral_reset+0x390>)
10008ab2:	6859      	ldr	r1, [r3, #4]
10008ab4:	4a8a      	ldr	r2, [pc, #552]	; (10008ce0 <system_peripheral_reset+0x3bc>)
10008ab6:	400a      	ands	r2, r1
10008ab8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008aba:	685a      	ldr	r2, [r3, #4]
10008abc:	2180      	movs	r1, #128	; 0x80
10008abe:	02c9      	lsls	r1, r1, #11
10008ac0:	430a      	orrs	r2, r1
10008ac2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ac4:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
10008ac6:	e156      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008ac8:	4b7a      	ldr	r3, [pc, #488]	; (10008cb4 <system_peripheral_reset+0x390>)
10008aca:	6859      	ldr	r1, [r3, #4]
10008acc:	4a85      	ldr	r2, [pc, #532]	; (10008ce4 <system_peripheral_reset+0x3c0>)
10008ace:	400a      	ands	r2, r1
10008ad0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008ad2:	685a      	ldr	r2, [r3, #4]
10008ad4:	2180      	movs	r1, #128	; 0x80
10008ad6:	0309      	lsls	r1, r1, #12
10008ad8:	430a      	orrs	r2, r1
10008ada:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008adc:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
10008ade:	e14a      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008ae0:	4b74      	ldr	r3, [pc, #464]	; (10008cb4 <system_peripheral_reset+0x390>)
10008ae2:	6859      	ldr	r1, [r3, #4]
10008ae4:	4a80      	ldr	r2, [pc, #512]	; (10008ce8 <system_peripheral_reset+0x3c4>)
10008ae6:	400a      	ands	r2, r1
10008ae8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008aea:	685a      	ldr	r2, [r3, #4]
10008aec:	2180      	movs	r1, #128	; 0x80
10008aee:	0349      	lsls	r1, r1, #13
10008af0:	430a      	orrs	r2, r1
10008af2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008af4:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
10008af6:	e13e      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008af8:	4b6e      	ldr	r3, [pc, #440]	; (10008cb4 <system_peripheral_reset+0x390>)
10008afa:	6859      	ldr	r1, [r3, #4]
10008afc:	4a7b      	ldr	r2, [pc, #492]	; (10008cec <system_peripheral_reset+0x3c8>)
10008afe:	400a      	ands	r2, r1
10008b00:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008b02:	685a      	ldr	r2, [r3, #4]
10008b04:	2180      	movs	r1, #128	; 0x80
10008b06:	0389      	lsls	r1, r1, #14
10008b08:	430a      	orrs	r2, r1
10008b0a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b0c:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
10008b0e:	e132      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008b10:	4b68      	ldr	r3, [pc, #416]	; (10008cb4 <system_peripheral_reset+0x390>)
10008b12:	6859      	ldr	r1, [r3, #4]
10008b14:	4a76      	ldr	r2, [pc, #472]	; (10008cf0 <system_peripheral_reset+0x3cc>)
10008b16:	400a      	ands	r2, r1
10008b18:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008b1a:	685a      	ldr	r2, [r3, #4]
10008b1c:	2180      	movs	r1, #128	; 0x80
10008b1e:	03c9      	lsls	r1, r1, #15
10008b20:	430a      	orrs	r2, r1
10008b22:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b24:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
10008b26:	e126      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008b28:	4b62      	ldr	r3, [pc, #392]	; (10008cb4 <system_peripheral_reset+0x390>)
10008b2a:	6859      	ldr	r1, [r3, #4]
10008b2c:	4a71      	ldr	r2, [pc, #452]	; (10008cf4 <system_peripheral_reset+0x3d0>)
10008b2e:	400a      	ands	r2, r1
10008b30:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008b32:	685a      	ldr	r2, [r3, #4]
10008b34:	2180      	movs	r1, #128	; 0x80
10008b36:	0409      	lsls	r1, r1, #16
10008b38:	430a      	orrs	r2, r1
10008b3a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b3c:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
10008b3e:	e11a      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008b40:	4b5c      	ldr	r3, [pc, #368]	; (10008cb4 <system_peripheral_reset+0x390>)
10008b42:	6859      	ldr	r1, [r3, #4]
10008b44:	4a6c      	ldr	r2, [pc, #432]	; (10008cf8 <system_peripheral_reset+0x3d4>)
10008b46:	400a      	ands	r2, r1
10008b48:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008b4a:	685a      	ldr	r2, [r3, #4]
10008b4c:	2180      	movs	r1, #128	; 0x80
10008b4e:	0449      	lsls	r1, r1, #17
10008b50:	430a      	orrs	r2, r1
10008b52:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b54:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
10008b56:	e10e      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008b58:	4b56      	ldr	r3, [pc, #344]	; (10008cb4 <system_peripheral_reset+0x390>)
10008b5a:	6859      	ldr	r1, [r3, #4]
10008b5c:	4a67      	ldr	r2, [pc, #412]	; (10008cfc <system_peripheral_reset+0x3d8>)
10008b5e:	400a      	ands	r2, r1
10008b60:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008b62:	685a      	ldr	r2, [r3, #4]
10008b64:	2180      	movs	r1, #128	; 0x80
10008b66:	0489      	lsls	r1, r1, #18
10008b68:	430a      	orrs	r2, r1
10008b6a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b6c:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
10008b6e:	e102      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008b70:	4b50      	ldr	r3, [pc, #320]	; (10008cb4 <system_peripheral_reset+0x390>)
10008b72:	6859      	ldr	r1, [r3, #4]
10008b74:	4a62      	ldr	r2, [pc, #392]	; (10008d00 <system_peripheral_reset+0x3dc>)
10008b76:	400a      	ands	r2, r1
10008b78:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008b7a:	685a      	ldr	r2, [r3, #4]
10008b7c:	2180      	movs	r1, #128	; 0x80
10008b7e:	04c9      	lsls	r1, r1, #19
10008b80:	430a      	orrs	r2, r1
10008b82:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b84:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
10008b86:	e0f6      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008b88:	4b4a      	ldr	r3, [pc, #296]	; (10008cb4 <system_peripheral_reset+0x390>)
10008b8a:	6859      	ldr	r1, [r3, #4]
10008b8c:	4a5d      	ldr	r2, [pc, #372]	; (10008d04 <system_peripheral_reset+0x3e0>)
10008b8e:	400a      	ands	r2, r1
10008b90:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008b92:	685a      	ldr	r2, [r3, #4]
10008b94:	2180      	movs	r1, #128	; 0x80
10008b96:	0509      	lsls	r1, r1, #20
10008b98:	430a      	orrs	r2, r1
10008b9a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b9c:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
10008b9e:	e0ea      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008ba0:	4b44      	ldr	r3, [pc, #272]	; (10008cb4 <system_peripheral_reset+0x390>)
10008ba2:	6859      	ldr	r1, [r3, #4]
10008ba4:	4a58      	ldr	r2, [pc, #352]	; (10008d08 <system_peripheral_reset+0x3e4>)
10008ba6:	400a      	ands	r2, r1
10008ba8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008baa:	685a      	ldr	r2, [r3, #4]
10008bac:	2180      	movs	r1, #128	; 0x80
10008bae:	0549      	lsls	r1, r1, #21
10008bb0:	430a      	orrs	r2, r1
10008bb2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bb4:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
10008bb6:	e0de      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008bb8:	4b3e      	ldr	r3, [pc, #248]	; (10008cb4 <system_peripheral_reset+0x390>)
10008bba:	6859      	ldr	r1, [r3, #4]
10008bbc:	4a53      	ldr	r2, [pc, #332]	; (10008d0c <system_peripheral_reset+0x3e8>)
10008bbe:	400a      	ands	r2, r1
10008bc0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008bc2:	685a      	ldr	r2, [r3, #4]
10008bc4:	2180      	movs	r1, #128	; 0x80
10008bc6:	0589      	lsls	r1, r1, #22
10008bc8:	430a      	orrs	r2, r1
10008bca:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bcc:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
10008bce:	e0d2      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008bd0:	4b38      	ldr	r3, [pc, #224]	; (10008cb4 <system_peripheral_reset+0x390>)
10008bd2:	6859      	ldr	r1, [r3, #4]
10008bd4:	4a4e      	ldr	r2, [pc, #312]	; (10008d10 <system_peripheral_reset+0x3ec>)
10008bd6:	400a      	ands	r2, r1
10008bd8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008bda:	685a      	ldr	r2, [r3, #4]
10008bdc:	2180      	movs	r1, #128	; 0x80
10008bde:	05c9      	lsls	r1, r1, #23
10008be0:	430a      	orrs	r2, r1
10008be2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008be4:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
10008be6:	e0c6      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008be8:	4a32      	ldr	r2, [pc, #200]	; (10008cb4 <system_peripheral_reset+0x390>)
10008bea:	6853      	ldr	r3, [r2, #4]
10008bec:	005b      	lsls	r3, r3, #1
10008bee:	085b      	lsrs	r3, r3, #1
10008bf0:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008bf2:	6853      	ldr	r3, [r2, #4]
10008bf4:	2180      	movs	r1, #128	; 0x80
10008bf6:	0609      	lsls	r1, r1, #24
10008bf8:	430b      	orrs	r3, r1
10008bfa:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bfc:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
10008bfe:	e0ba      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008c00:	4b2c      	ldr	r3, [pc, #176]	; (10008cb4 <system_peripheral_reset+0x390>)
10008c02:	891a      	ldrh	r2, [r3, #8]
10008c04:	2101      	movs	r1, #1
10008c06:	438a      	bics	r2, r1
10008c08:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008c0a:	8919      	ldrh	r1, [r3, #8]
10008c0c:	2201      	movs	r2, #1
10008c0e:	430a      	orrs	r2, r1
10008c10:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c12:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
10008c14:	e0af      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008c16:	4b27      	ldr	r3, [pc, #156]	; (10008cb4 <system_peripheral_reset+0x390>)
10008c18:	891a      	ldrh	r2, [r3, #8]
10008c1a:	2102      	movs	r1, #2
10008c1c:	438a      	bics	r2, r1
10008c1e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008c20:	8919      	ldrh	r1, [r3, #8]
10008c22:	2202      	movs	r2, #2
10008c24:	430a      	orrs	r2, r1
10008c26:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c28:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
10008c2a:	e0a4      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008c2c:	4b21      	ldr	r3, [pc, #132]	; (10008cb4 <system_peripheral_reset+0x390>)
10008c2e:	891a      	ldrh	r2, [r3, #8]
10008c30:	2104      	movs	r1, #4
10008c32:	438a      	bics	r2, r1
10008c34:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008c36:	8919      	ldrh	r1, [r3, #8]
10008c38:	2204      	movs	r2, #4
10008c3a:	430a      	orrs	r2, r1
10008c3c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c3e:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
10008c40:	e099      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008c42:	4b1c      	ldr	r3, [pc, #112]	; (10008cb4 <system_peripheral_reset+0x390>)
10008c44:	891a      	ldrh	r2, [r3, #8]
10008c46:	2108      	movs	r1, #8
10008c48:	438a      	bics	r2, r1
10008c4a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008c4c:	8919      	ldrh	r1, [r3, #8]
10008c4e:	2208      	movs	r2, #8
10008c50:	430a      	orrs	r2, r1
10008c52:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c54:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
10008c56:	e08e      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008c58:	4b16      	ldr	r3, [pc, #88]	; (10008cb4 <system_peripheral_reset+0x390>)
10008c5a:	891a      	ldrh	r2, [r3, #8]
10008c5c:	2110      	movs	r1, #16
10008c5e:	438a      	bics	r2, r1
10008c60:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008c62:	8919      	ldrh	r1, [r3, #8]
10008c64:	2210      	movs	r2, #16
10008c66:	430a      	orrs	r2, r1
10008c68:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c6a:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
10008c6c:	e083      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008c6e:	4b11      	ldr	r3, [pc, #68]	; (10008cb4 <system_peripheral_reset+0x390>)
10008c70:	891a      	ldrh	r2, [r3, #8]
10008c72:	2120      	movs	r1, #32
10008c74:	438a      	bics	r2, r1
10008c76:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008c78:	8919      	ldrh	r1, [r3, #8]
10008c7a:	2220      	movs	r2, #32
10008c7c:	430a      	orrs	r2, r1
10008c7e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c80:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
10008c82:	e078      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008c84:	4b0b      	ldr	r3, [pc, #44]	; (10008cb4 <system_peripheral_reset+0x390>)
10008c86:	891a      	ldrh	r2, [r3, #8]
10008c88:	2140      	movs	r1, #64	; 0x40
10008c8a:	438a      	bics	r2, r1
10008c8c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008c8e:	8919      	ldrh	r1, [r3, #8]
10008c90:	2240      	movs	r2, #64	; 0x40
10008c92:	430a      	orrs	r2, r1
10008c94:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c96:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
10008c98:	e06d      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008c9a:	4b06      	ldr	r3, [pc, #24]	; (10008cb4 <system_peripheral_reset+0x390>)
10008c9c:	891a      	ldrh	r2, [r3, #8]
10008c9e:	2180      	movs	r1, #128	; 0x80
10008ca0:	438a      	bics	r2, r1
10008ca2:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008ca4:	8919      	ldrh	r1, [r3, #8]
10008ca6:	2280      	movs	r2, #128	; 0x80
10008ca8:	430a      	orrs	r2, r1
10008caa:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cac:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
10008cae:	e062      	b.n	10008d76 <system_peripheral_reset+0x452>
10008cb0:	10010d18 	.word	0x10010d18
10008cb4:	4000b000 	.word	0x4000b000
10008cb8:	fffffeff 	.word	0xfffffeff
10008cbc:	fffffdff 	.word	0xfffffdff
10008cc0:	fffffbff 	.word	0xfffffbff
10008cc4:	fffff7ff 	.word	0xfffff7ff
10008cc8:	ffffefff 	.word	0xffffefff
10008ccc:	ffffdfff 	.word	0xffffdfff
10008cd0:	ffffbfff 	.word	0xffffbfff
10008cd4:	ffff7fff 	.word	0xffff7fff
10008cd8:	fffeffff 	.word	0xfffeffff
10008cdc:	fffdffff 	.word	0xfffdffff
10008ce0:	fffbffff 	.word	0xfffbffff
10008ce4:	fff7ffff 	.word	0xfff7ffff
10008ce8:	ffefffff 	.word	0xffefffff
10008cec:	ffdfffff 	.word	0xffdfffff
10008cf0:	ffbfffff 	.word	0xffbfffff
10008cf4:	ff7fffff 	.word	0xff7fffff
10008cf8:	feffffff 	.word	0xfeffffff
10008cfc:	fdffffff 	.word	0xfdffffff
10008d00:	fbffffff 	.word	0xfbffffff
10008d04:	f7ffffff 	.word	0xf7ffffff
10008d08:	efffffff 	.word	0xefffffff
10008d0c:	dfffffff 	.word	0xdfffffff
10008d10:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008d14:	4b18      	ldr	r3, [pc, #96]	; (10008d78 <system_peripheral_reset+0x454>)
10008d16:	8919      	ldrh	r1, [r3, #8]
10008d18:	4a18      	ldr	r2, [pc, #96]	; (10008d7c <system_peripheral_reset+0x458>)
10008d1a:	400a      	ands	r2, r1
10008d1c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008d1e:	8919      	ldrh	r1, [r3, #8]
10008d20:	2280      	movs	r2, #128	; 0x80
10008d22:	0052      	lsls	r2, r2, #1
10008d24:	430a      	orrs	r2, r1
10008d26:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d28:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
10008d2a:	e024      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008d2c:	4b12      	ldr	r3, [pc, #72]	; (10008d78 <system_peripheral_reset+0x454>)
10008d2e:	8919      	ldrh	r1, [r3, #8]
10008d30:	4a13      	ldr	r2, [pc, #76]	; (10008d80 <system_peripheral_reset+0x45c>)
10008d32:	400a      	ands	r2, r1
10008d34:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008d36:	8919      	ldrh	r1, [r3, #8]
10008d38:	2280      	movs	r2, #128	; 0x80
10008d3a:	0092      	lsls	r2, r2, #2
10008d3c:	430a      	orrs	r2, r1
10008d3e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d40:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
10008d42:	e018      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008d44:	4b0c      	ldr	r3, [pc, #48]	; (10008d78 <system_peripheral_reset+0x454>)
10008d46:	8919      	ldrh	r1, [r3, #8]
10008d48:	4a0e      	ldr	r2, [pc, #56]	; (10008d84 <system_peripheral_reset+0x460>)
10008d4a:	400a      	ands	r2, r1
10008d4c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008d4e:	8919      	ldrh	r1, [r3, #8]
10008d50:	2280      	movs	r2, #128	; 0x80
10008d52:	00d2      	lsls	r2, r2, #3
10008d54:	430a      	orrs	r2, r1
10008d56:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d58:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
10008d5a:	e00c      	b.n	10008d76 <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008d5c:	4b06      	ldr	r3, [pc, #24]	; (10008d78 <system_peripheral_reset+0x454>)
10008d5e:	8919      	ldrh	r1, [r3, #8]
10008d60:	4a09      	ldr	r2, [pc, #36]	; (10008d88 <system_peripheral_reset+0x464>)
10008d62:	400a      	ands	r2, r1
10008d64:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008d66:	8919      	ldrh	r1, [r3, #8]
10008d68:	2280      	movs	r2, #128	; 0x80
10008d6a:	0112      	lsls	r2, r2, #4
10008d6c:	430a      	orrs	r2, r1
10008d6e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d70:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
10008d72:	e000      	b.n	10008d76 <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
10008d74:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10008d76:	bd00      	pop	{pc}
10008d78:	4000b000 	.word	0x4000b000
10008d7c:	fffffeff 	.word	0xfffffeff
10008d80:	fffffdff 	.word	0xfffffdff
10008d84:	fffffbff 	.word	0xfffffbff
10008d88:	fffff7ff 	.word	0xfffff7ff

10008d8c <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
10008d8c:	2380      	movs	r3, #128	; 0x80
10008d8e:	04db      	lsls	r3, r3, #19
10008d90:	469c      	mov	ip, r3
10008d92:	4460      	add	r0, ip
10008d94:	0080      	lsls	r0, r0, #2
10008d96:	6001      	str	r1, [r0, #0]
}
10008d98:	4770      	bx	lr
10008d9a:	46c0      	nop			; (mov r8, r8)

10008d9c <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
10008d9c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
10008d9e:	4b20      	ldr	r3, [pc, #128]	; (10008e20 <uart_rx0_isr_handler+0x84>)
10008da0:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10008da2:	6823      	ldr	r3, [r4, #0]
10008da4:	7d1d      	ldrb	r5, [r3, #20]
10008da6:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
10008da8:	066a      	lsls	r2, r5, #25
10008daa:	d513      	bpl.n	10008dd4 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
10008dac:	211e      	movs	r1, #30
10008dae:	2222      	movs	r2, #34	; 0x22
10008db0:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
10008db2:	7e1a      	ldrb	r2, [r3, #24]
10008db4:	3123      	adds	r1, #35	; 0x23
10008db6:	438a      	bics	r2, r1
10008db8:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10008dba:	2321      	movs	r3, #33	; 0x21
10008dbc:	5ce3      	ldrb	r3, [r4, r3]
10008dbe:	071b      	lsls	r3, r3, #28
10008dc0:	d506      	bpl.n	10008dd0 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
10008dc2:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10008dc4:	5ce3      	ldrb	r3, [r4, r3]
10008dc6:	071b      	lsls	r3, r3, #28
10008dc8:	d502      	bpl.n	10008dd0 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
10008dca:	0020      	movs	r0, r4
10008dcc:	6923      	ldr	r3, [r4, #16]
10008dce:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
10008dd0:	6823      	ldr	r3, [r4, #0]
10008dd2:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10008dd4:	07eb      	lsls	r3, r5, #31
10008dd6:	d522      	bpl.n	10008e1e <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
10008dd8:	6823      	ldr	r3, [r4, #0]
10008dda:	7c1b      	ldrb	r3, [r3, #16]
10008ddc:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
10008dde:	6962      	ldr	r2, [r4, #20]
10008de0:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
10008de2:	6963      	ldr	r3, [r4, #20]
10008de4:	3301      	adds	r3, #1
10008de6:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
10008de8:	8ba3      	ldrh	r3, [r4, #28]
10008dea:	3b01      	subs	r3, #1
10008dec:	b29b      	uxth	r3, r3
10008dee:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
10008df0:	8ba3      	ldrh	r3, [r4, #28]
10008df2:	b29b      	uxth	r3, r3
10008df4:	2b00      	cmp	r3, #0
10008df6:	d112      	bne.n	10008e1e <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10008df8:	3321      	adds	r3, #33	; 0x21
10008dfa:	5ce3      	ldrb	r3, [r4, r3]
10008dfc:	075b      	lsls	r3, r3, #29
10008dfe:	d50e      	bpl.n	10008e1e <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
10008e00:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10008e02:	5ce3      	ldrb	r3, [r4, r3]
10008e04:	075b      	lsls	r3, r3, #29
10008e06:	d50a      	bpl.n	10008e1e <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
10008e08:	2200      	movs	r2, #0
10008e0a:	2322      	movs	r3, #34	; 0x22
10008e0c:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
10008e0e:	6822      	ldr	r2, [r4, #0]
10008e10:	7e13      	ldrb	r3, [r2, #24]
10008e12:	2101      	movs	r1, #1
10008e14:	438b      	bics	r3, r1
10008e16:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
10008e18:	68e3      	ldr	r3, [r4, #12]
10008e1a:	0020      	movs	r0, r4
10008e1c:	4798      	blx	r3
			}
		}
	}
}
10008e1e:	bd70      	pop	{r4, r5, r6, pc}
10008e20:	10013514 	.word	0x10013514

10008e24 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
10008e24:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
10008e26:	4b21      	ldr	r3, [pc, #132]	; (10008eac <uart_tx0_isr_handler+0x88>)
10008e28:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
10008e2a:	6823      	ldr	r3, [r4, #0]
10008e2c:	791d      	ldrb	r5, [r3, #4]
10008e2e:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
10008e30:	07ea      	lsls	r2, r5, #31
10008e32:	d517      	bpl.n	10008e64 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
10008e34:	69a2      	ldr	r2, [r4, #24]
10008e36:	7811      	ldrb	r1, [r2, #0]
10008e38:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
10008e3a:	3201      	adds	r2, #1
10008e3c:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
10008e3e:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10008e40:	8be3      	ldrh	r3, [r4, #30]
10008e42:	3b01      	subs	r3, #1
10008e44:	b29b      	uxth	r3, r3
10008e46:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
10008e48:	8be3      	ldrh	r3, [r4, #30]
10008e4a:	b29b      	uxth	r3, r3
10008e4c:	2b00      	cmp	r3, #0
10008e4e:	d109      	bne.n	10008e64 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
10008e50:	6822      	ldr	r2, [r4, #0]
10008e52:	7a13      	ldrb	r3, [r2, #8]
10008e54:	2101      	movs	r1, #1
10008e56:	438b      	bics	r3, r1
10008e58:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
10008e5a:	6822      	ldr	r2, [r4, #0]
10008e5c:	7a11      	ldrb	r1, [r2, #8]
10008e5e:	2310      	movs	r3, #16
10008e60:	430b      	orrs	r3, r1
10008e62:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
10008e64:	06eb      	lsls	r3, r5, #27
10008e66:	d512      	bpl.n	10008e8e <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10008e68:	2321      	movs	r3, #33	; 0x21
10008e6a:	5ce3      	ldrb	r3, [r4, r3]
10008e6c:	07db      	lsls	r3, r3, #31
10008e6e:	d50e      	bpl.n	10008e8e <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
10008e70:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10008e72:	5ce3      	ldrb	r3, [r4, r3]
10008e74:	07db      	lsls	r3, r3, #31
10008e76:	d50a      	bpl.n	10008e8e <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
10008e78:	2200      	movs	r2, #0
10008e7a:	2322      	movs	r3, #34	; 0x22
10008e7c:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
10008e7e:	6822      	ldr	r2, [r4, #0]
10008e80:	7a13      	ldrb	r3, [r2, #8]
10008e82:	2110      	movs	r1, #16
10008e84:	438b      	bics	r3, r1
10008e86:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
10008e88:	0020      	movs	r0, r4
10008e8a:	6863      	ldr	r3, [r4, #4]
10008e8c:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
10008e8e:	06ab      	lsls	r3, r5, #26
10008e90:	d50a      	bpl.n	10008ea8 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10008e92:	2321      	movs	r3, #33	; 0x21
10008e94:	5ce3      	ldrb	r3, [r4, r3]
10008e96:	079b      	lsls	r3, r3, #30
10008e98:	d506      	bpl.n	10008ea8 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
10008e9a:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10008e9c:	5ce3      	ldrb	r3, [r4, r3]
10008e9e:	079b      	lsls	r3, r3, #30
10008ea0:	d502      	bpl.n	10008ea8 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
10008ea2:	68a3      	ldr	r3, [r4, #8]
10008ea4:	0020      	movs	r0, r4
10008ea6:	4798      	blx	r3
		}

	}
}
10008ea8:	bd70      	pop	{r4, r5, r6, pc}
10008eaa:	46c0      	nop			; (mov r8, r8)
10008eac:	10013514 	.word	0x10013514

10008eb0 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
10008eb0:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
10008eb2:	4b20      	ldr	r3, [pc, #128]	; (10008f34 <uart_rx1_isr_handler+0x84>)
10008eb4:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10008eb6:	6823      	ldr	r3, [r4, #0]
10008eb8:	7d1d      	ldrb	r5, [r3, #20]
10008eba:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
10008ebc:	066a      	lsls	r2, r5, #25
10008ebe:	d513      	bpl.n	10008ee8 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
10008ec0:	211e      	movs	r1, #30
10008ec2:	2222      	movs	r2, #34	; 0x22
10008ec4:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
10008ec6:	7e1a      	ldrb	r2, [r3, #24]
10008ec8:	3123      	adds	r1, #35	; 0x23
10008eca:	438a      	bics	r2, r1
10008ecc:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10008ece:	2321      	movs	r3, #33	; 0x21
10008ed0:	5ce3      	ldrb	r3, [r4, r3]
10008ed2:	071b      	lsls	r3, r3, #28
10008ed4:	d506      	bpl.n	10008ee4 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
10008ed6:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10008ed8:	5ce3      	ldrb	r3, [r4, r3]
10008eda:	071b      	lsls	r3, r3, #28
10008edc:	d502      	bpl.n	10008ee4 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
10008ede:	0020      	movs	r0, r4
10008ee0:	6923      	ldr	r3, [r4, #16]
10008ee2:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
10008ee4:	6823      	ldr	r3, [r4, #0]
10008ee6:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10008ee8:	07eb      	lsls	r3, r5, #31
10008eea:	d522      	bpl.n	10008f32 <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
10008eec:	6823      	ldr	r3, [r4, #0]
10008eee:	7c1b      	ldrb	r3, [r3, #16]
10008ef0:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
10008ef2:	6962      	ldr	r2, [r4, #20]
10008ef4:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
10008ef6:	6963      	ldr	r3, [r4, #20]
10008ef8:	3301      	adds	r3, #1
10008efa:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
10008efc:	8ba3      	ldrh	r3, [r4, #28]
10008efe:	3b01      	subs	r3, #1
10008f00:	b29b      	uxth	r3, r3
10008f02:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
10008f04:	8ba3      	ldrh	r3, [r4, #28]
10008f06:	b29b      	uxth	r3, r3
10008f08:	2b00      	cmp	r3, #0
10008f0a:	d112      	bne.n	10008f32 <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10008f0c:	3321      	adds	r3, #33	; 0x21
10008f0e:	5ce3      	ldrb	r3, [r4, r3]
10008f10:	075b      	lsls	r3, r3, #29
10008f12:	d50e      	bpl.n	10008f32 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
10008f14:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10008f16:	5ce3      	ldrb	r3, [r4, r3]
10008f18:	075b      	lsls	r3, r3, #29
10008f1a:	d50a      	bpl.n	10008f32 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
10008f1c:	2200      	movs	r2, #0
10008f1e:	2322      	movs	r3, #34	; 0x22
10008f20:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
10008f22:	6822      	ldr	r2, [r4, #0]
10008f24:	7e13      	ldrb	r3, [r2, #24]
10008f26:	2101      	movs	r1, #1
10008f28:	438b      	bics	r3, r1
10008f2a:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
10008f2c:	68e3      	ldr	r3, [r4, #12]
10008f2e:	0020      	movs	r0, r4
10008f30:	4798      	blx	r3
			}
		}
	}
}
10008f32:	bd70      	pop	{r4, r5, r6, pc}
10008f34:	10013514 	.word	0x10013514

10008f38 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
10008f38:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
10008f3a:	4b21      	ldr	r3, [pc, #132]	; (10008fc0 <uart_tx1_isr_handler+0x88>)
10008f3c:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
10008f3e:	6823      	ldr	r3, [r4, #0]
10008f40:	791d      	ldrb	r5, [r3, #4]
10008f42:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
10008f44:	07ea      	lsls	r2, r5, #31
10008f46:	d517      	bpl.n	10008f78 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
10008f48:	69a2      	ldr	r2, [r4, #24]
10008f4a:	7811      	ldrb	r1, [r2, #0]
10008f4c:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
10008f4e:	3201      	adds	r2, #1
10008f50:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
10008f52:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10008f54:	8be3      	ldrh	r3, [r4, #30]
10008f56:	3b01      	subs	r3, #1
10008f58:	b29b      	uxth	r3, r3
10008f5a:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
10008f5c:	8be3      	ldrh	r3, [r4, #30]
10008f5e:	b29b      	uxth	r3, r3
10008f60:	2b00      	cmp	r3, #0
10008f62:	d109      	bne.n	10008f78 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
10008f64:	6822      	ldr	r2, [r4, #0]
10008f66:	7a13      	ldrb	r3, [r2, #8]
10008f68:	2101      	movs	r1, #1
10008f6a:	438b      	bics	r3, r1
10008f6c:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
10008f6e:	6822      	ldr	r2, [r4, #0]
10008f70:	7a11      	ldrb	r1, [r2, #8]
10008f72:	2310      	movs	r3, #16
10008f74:	430b      	orrs	r3, r1
10008f76:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
10008f78:	06eb      	lsls	r3, r5, #27
10008f7a:	d512      	bpl.n	10008fa2 <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10008f7c:	2321      	movs	r3, #33	; 0x21
10008f7e:	5ce3      	ldrb	r3, [r4, r3]
10008f80:	07db      	lsls	r3, r3, #31
10008f82:	d50e      	bpl.n	10008fa2 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
10008f84:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10008f86:	5ce3      	ldrb	r3, [r4, r3]
10008f88:	07db      	lsls	r3, r3, #31
10008f8a:	d50a      	bpl.n	10008fa2 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
10008f8c:	2200      	movs	r2, #0
10008f8e:	2322      	movs	r3, #34	; 0x22
10008f90:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
10008f92:	6822      	ldr	r2, [r4, #0]
10008f94:	7a13      	ldrb	r3, [r2, #8]
10008f96:	2110      	movs	r1, #16
10008f98:	438b      	bics	r3, r1
10008f9a:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
10008f9c:	0020      	movs	r0, r4
10008f9e:	6863      	ldr	r3, [r4, #4]
10008fa0:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
10008fa2:	06ab      	lsls	r3, r5, #26
10008fa4:	d50a      	bpl.n	10008fbc <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10008fa6:	2321      	movs	r3, #33	; 0x21
10008fa8:	5ce3      	ldrb	r3, [r4, r3]
10008faa:	079b      	lsls	r3, r3, #30
10008fac:	d506      	bpl.n	10008fbc <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
10008fae:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10008fb0:	5ce3      	ldrb	r3, [r4, r3]
10008fb2:	079b      	lsls	r3, r3, #30
10008fb4:	d502      	bpl.n	10008fbc <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
10008fb6:	68a3      	ldr	r3, [r4, #8]
10008fb8:	0020      	movs	r0, r4
10008fba:	4798      	blx	r3
		}

	}
}
10008fbc:	bd70      	pop	{r4, r5, r6, pc}
10008fbe:	46c0      	nop			; (mov r8, r8)
10008fc0:	10013514 	.word	0x10013514

10008fc4 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
10008fc4:	23e1      	movs	r3, #225	; 0xe1
10008fc6:	025b      	lsls	r3, r3, #9
10008fc8:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
10008fca:	2300      	movs	r3, #0
10008fcc:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
10008fce:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
10008fd0:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
10008fd2:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
10008fd4:	3302      	adds	r3, #2
10008fd6:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
10008fd8:	2203      	movs	r2, #3
10008fda:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
10008fdc:	3201      	adds	r2, #1
10008fde:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
10008fe0:	3201      	adds	r2, #1
10008fe2:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
10008fe4:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
10008fe6:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
10008fe8:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
10008fea:	6243      	str	r3, [r0, #36]	; 0x24
}
10008fec:	4770      	bx	lr
10008fee:	46c0      	nop			; (mov r8, r8)

10008ff0 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
10008ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10008ff2:	464f      	mov	r7, r9
10008ff4:	4646      	mov	r6, r8
10008ff6:	b4c0      	push	{r6, r7}
10008ff8:	0005      	movs	r5, r0
10008ffa:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
10008ffc:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
10008ffe:	2300      	movs	r3, #0
10009000:	6043      	str	r3, [r0, #4]
10009002:	6083      	str	r3, [r0, #8]
10009004:	60c3      	str	r3, [r0, #12]
10009006:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
10009008:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000900a:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000900c:	2200      	movs	r2, #0
1000900e:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
10009010:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
10009012:	3320      	adds	r3, #32
10009014:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
10009016:	3301      	adds	r3, #1
10009018:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000901a:	3301      	adds	r3, #1
1000901c:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000901e:	4b55      	ldr	r3, [pc, #340]	; (10009174 <uart_init+0x184>)
10009020:	4299      	cmp	r1, r3
10009022:	d118      	bne.n	10009056 <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
10009024:	2009      	movs	r0, #9
10009026:	4c54      	ldr	r4, [pc, #336]	; (10009178 <uart_init+0x188>)
10009028:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000902a:	200a      	movs	r0, #10
1000902c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000902e:	2009      	movs	r0, #9
10009030:	4c52      	ldr	r4, [pc, #328]	; (1000917c <uart_init+0x18c>)
10009032:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
10009034:	200a      	movs	r0, #10
10009036:	47a0      	blx	r4
		_uart_instances[0] = module;
10009038:	4b51      	ldr	r3, [pc, #324]	; (10009180 <uart_init+0x190>)
1000903a:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000903c:	4951      	ldr	r1, [pc, #324]	; (10009184 <uart_init+0x194>)
1000903e:	2010      	movs	r0, #16
10009040:	4c51      	ldr	r4, [pc, #324]	; (10009188 <uart_init+0x198>)
10009042:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
10009044:	4951      	ldr	r1, [pc, #324]	; (1000918c <uart_init+0x19c>)
10009046:	2011      	movs	r0, #17
10009048:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000904a:	4b51      	ldr	r3, [pc, #324]	; (10009190 <uart_init+0x1a0>)
1000904c:	2201      	movs	r2, #1
1000904e:	601a      	str	r2, [r3, #0]
10009050:	3201      	adds	r2, #1
10009052:	601a      	str	r2, [r3, #0]
10009054:	e01a      	b.n	1000908c <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
10009056:	4b4f      	ldr	r3, [pc, #316]	; (10009194 <uart_init+0x1a4>)
10009058:	4299      	cmp	r1, r3
1000905a:	d117      	bne.n	1000908c <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000905c:	200b      	movs	r0, #11
1000905e:	4c46      	ldr	r4, [pc, #280]	; (10009178 <uart_init+0x188>)
10009060:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
10009062:	200c      	movs	r0, #12
10009064:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
10009066:	200b      	movs	r0, #11
10009068:	4c44      	ldr	r4, [pc, #272]	; (1000917c <uart_init+0x18c>)
1000906a:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000906c:	200c      	movs	r0, #12
1000906e:	47a0      	blx	r4
		_uart_instances[1] = module;
10009070:	4b43      	ldr	r3, [pc, #268]	; (10009180 <uart_init+0x190>)
10009072:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
10009074:	4948      	ldr	r1, [pc, #288]	; (10009198 <uart_init+0x1a8>)
10009076:	2012      	movs	r0, #18
10009078:	4c43      	ldr	r4, [pc, #268]	; (10009188 <uart_init+0x198>)
1000907a:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000907c:	4947      	ldr	r1, [pc, #284]	; (1000919c <uart_init+0x1ac>)
1000907e:	2013      	movs	r0, #19
10009080:	47a0      	blx	r4
10009082:	4b43      	ldr	r3, [pc, #268]	; (10009190 <uart_init+0x1a0>)
10009084:	2204      	movs	r2, #4
10009086:	601a      	str	r2, [r3, #0]
10009088:	3204      	adds	r2, #4
1000908a:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000908c:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000908e:	2204      	movs	r2, #4
10009090:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
10009092:	2b00      	cmp	r3, #0
10009094:	d152      	bne.n	1000913c <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
10009096:	3302      	adds	r3, #2
10009098:	4698      	mov	r8, r3
1000909a:	e04f      	b.n	1000913c <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000909c:	8a31      	ldrh	r1, [r6, #16]
1000909e:	ce01      	ldmia	r6!, {r0}
100090a0:	b2c0      	uxtb	r0, r0
100090a2:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
100090a4:	3401      	adds	r4, #1
100090a6:	b2e4      	uxtb	r4, r4
100090a8:	4544      	cmp	r4, r8
100090aa:	d3f7      	bcc.n	1000909c <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
100090ac:	682b      	ldr	r3, [r5, #0]
100090ae:	7d1a      	ldrb	r2, [r3, #20]
100090b0:	07d2      	lsls	r2, r2, #31
100090b2:	d504      	bpl.n	100090be <uart_init+0xce>
100090b4:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
100090b6:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
100090b8:	7d1a      	ldrb	r2, [r3, #20]
100090ba:	420a      	tst	r2, r1
100090bc:	d1fb      	bne.n	100090b6 <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
100090be:	2100      	movs	r1, #0
100090c0:	2220      	movs	r2, #32
100090c2:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
100090c4:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
100090c6:	1e59      	subs	r1, r3, #1
100090c8:	418b      	sbcs	r3, r1
100090ca:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
100090cc:	793b      	ldrb	r3, [r7, #4]
100090ce:	797a      	ldrb	r2, [r7, #5]
100090d0:	4313      	orrs	r3, r2
100090d2:	430b      	orrs	r3, r1
	switch(config->parity) {
100090d4:	79ba      	ldrb	r2, [r7, #6]
100090d6:	2a02      	cmp	r2, #2
100090d8:	d00d      	beq.n	100090f6 <uart_init+0x106>
100090da:	b2d1      	uxtb	r1, r2
100090dc:	2902      	cmp	r1, #2
100090de:	d802      	bhi.n	100090e6 <uart_init+0xf6>
100090e0:	2a01      	cmp	r2, #1
100090e2:	d005      	beq.n	100090f0 <uart_init+0x100>
100090e4:	e00f      	b.n	10009106 <uart_init+0x116>
100090e6:	2a03      	cmp	r2, #3
100090e8:	d008      	beq.n	100090fc <uart_init+0x10c>
100090ea:	2a04      	cmp	r2, #4
100090ec:	d009      	beq.n	10009102 <uart_init+0x112>
100090ee:	e00a      	b.n	10009106 <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
100090f0:	2202      	movs	r2, #2
100090f2:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
100090f4:	e007      	b.n	10009106 <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
100090f6:	2206      	movs	r2, #6
100090f8:	4313      	orrs	r3, r2
			break;
100090fa:	e004      	b.n	10009106 <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
100090fc:	220a      	movs	r2, #10
100090fe:	4313      	orrs	r3, r2
			break;
10009100:	e001      	b.n	10009106 <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
10009102:	220e      	movs	r2, #14
10009104:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
10009106:	2220      	movs	r2, #32
10009108:	6829      	ldr	r1, [r5, #0]
1000910a:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000910c:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000910e:	4b24      	ldr	r3, [pc, #144]	; (100091a0 <uart_init+0x1b0>)
10009110:	4798      	blx	r3
10009112:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
10009114:	0031      	movs	r1, r6
10009116:	4b23      	ldr	r3, [pc, #140]	; (100091a4 <uart_init+0x1b4>)
10009118:	4798      	blx	r3
1000911a:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000911c:	0400      	lsls	r0, r0, #16
1000911e:	0c00      	lsrs	r0, r0, #16
10009120:	4370      	muls	r0, r6
10009122:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
10009124:	0931      	lsrs	r1, r6, #4
10009126:	4288      	cmp	r0, r1
10009128:	d906      	bls.n	10009138 <uart_init+0x148>
1000912a:	2300      	movs	r3, #0
		i++;
1000912c:	3301      	adds	r3, #1
1000912e:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
10009130:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
10009132:	4288      	cmp	r0, r1
10009134:	d8fa      	bhi.n	1000912c <uart_init+0x13c>
10009136:	e007      	b.n	10009148 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
10009138:	2300      	movs	r3, #0
1000913a:	e005      	b.n	10009148 <uart_init+0x158>
1000913c:	003e      	movs	r6, r7
1000913e:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
10009140:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
10009142:	4b19      	ldr	r3, [pc, #100]	; (100091a8 <uart_init+0x1b8>)
10009144:	4699      	mov	r9, r3
10009146:	e7a9      	b.n	1000909c <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
10009148:	2100      	movs	r1, #0
1000914a:	2028      	movs	r0, #40	; 0x28
1000914c:	682c      	ldr	r4, [r5, #0]
1000914e:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
10009150:	3301      	adds	r3, #1
10009152:	071b      	lsls	r3, r3, #28
10009154:	0f5b      	lsrs	r3, r3, #29
10009156:	00d2      	lsls	r2, r2, #3
10009158:	4313      	orrs	r3, r2
1000915a:	b29b      	uxth	r3, r3
1000915c:	682a      	ldr	r2, [r5, #0]
1000915e:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
10009160:	682b      	ldr	r3, [r5, #0]
10009162:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
10009164:	682b      	ldr	r3, [r5, #0]
10009166:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
10009168:	2000      	movs	r0, #0
1000916a:	bc0c      	pop	{r2, r3}
1000916c:	4690      	mov	r8, r2
1000916e:	4699      	mov	r9, r3
10009170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009172:	46c0      	nop			; (mov r8, r8)
10009174:	40004000 	.word	0x40004000
10009178:	10008925 	.word	0x10008925
1000917c:	100085c9 	.word	0x100085c9
10009180:	10013514 	.word	0x10013514
10009184:	10008d9d 	.word	0x10008d9d
10009188:	10008d8d 	.word	0x10008d8d
1000918c:	10008e25 	.word	0x10008e25
10009190:	e000e100 	.word	0xe000e100
10009194:	40005000 	.word	0x40005000
10009198:	10008eb1 	.word	0x10008eb1
1000919c:	10008f39 	.word	0x10008f39
100091a0:	100085bd 	.word	0x100085bd
100091a4:	1000e911 	.word	0x1000e911
100091a8:	10008381 	.word	0x10008381

100091ac <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
100091ac:	6802      	ldr	r2, [r0, #0]
100091ae:	2001      	movs	r0, #1
100091b0:	7913      	ldrb	r3, [r2, #4]
100091b2:	4203      	tst	r3, r0
100091b4:	d0fc      	beq.n	100091b0 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
100091b6:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
100091b8:	2000      	movs	r0, #0
100091ba:	4770      	bx	lr

100091bc <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
100091bc:	6802      	ldr	r2, [r0, #0]
100091be:	2001      	movs	r0, #1
100091c0:	7d13      	ldrb	r3, [r2, #20]
100091c2:	4203      	tst	r3, r0
100091c4:	d0fc      	beq.n	100091c0 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
100091c6:	7c13      	ldrb	r3, [r2, #16]
100091c8:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
100091ca:	2000      	movs	r0, #0
100091cc:	4770      	bx	lr
100091ce:	46c0      	nop			; (mov r8, r8)

100091d0 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
100091d0:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
100091d2:	2a00      	cmp	r2, #0
100091d4:	d00d      	beq.n	100091f2 <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
100091d6:	330b      	adds	r3, #11
100091d8:	5cc3      	ldrb	r3, [r0, r3]
100091da:	b2db      	uxtb	r3, r3
100091dc:	2b05      	cmp	r3, #5
100091de:	d008      	beq.n	100091f2 <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
100091e0:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
100091e2:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
100091e4:	2205      	movs	r2, #5
100091e6:	2322      	movs	r3, #34	; 0x22
100091e8:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
100091ea:	6803      	ldr	r3, [r0, #0]
100091ec:	3a04      	subs	r2, #4
100091ee:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
100091f0:	2300      	movs	r3, #0
}
100091f2:	0018      	movs	r0, r3
100091f4:	4770      	bx	lr
100091f6:	46c0      	nop			; (mov r8, r8)

100091f8 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
100091f8:	0093      	lsls	r3, r2, #2
100091fa:	18c3      	adds	r3, r0, r3
100091fc:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
100091fe:	2120      	movs	r1, #32
10009200:	2301      	movs	r3, #1
10009202:	4093      	lsls	r3, r2
10009204:	5c42      	ldrb	r2, [r0, r1]
10009206:	4313      	orrs	r3, r2
10009208:	5443      	strb	r3, [r0, r1]
}
1000920a:	4770      	bx	lr

1000920c <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000920c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000920e:	2221      	movs	r2, #33	; 0x21
10009210:	2301      	movs	r3, #1
10009212:	408b      	lsls	r3, r1
10009214:	5c84      	ldrb	r4, [r0, r2]
10009216:	4323      	orrs	r3, r4
10009218:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000921a:	2901      	cmp	r1, #1
1000921c:	d104      	bne.n	10009228 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000921e:	6802      	ldr	r2, [r0, #0]
10009220:	7a11      	ldrb	r1, [r2, #8]
10009222:	2320      	movs	r3, #32
10009224:	430b      	orrs	r3, r1
10009226:	7213      	strb	r3, [r2, #8]
	}
}
10009228:	bd10      	pop	{r4, pc}
1000922a:	46c0      	nop			; (mov r8, r8)

1000922c <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000922c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000922e:	2201      	movs	r2, #1
10009230:	408a      	lsls	r2, r1
10009232:	2421      	movs	r4, #33	; 0x21
10009234:	5d03      	ldrb	r3, [r0, r4]
10009236:	4393      	bics	r3, r2
10009238:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000923a:	2901      	cmp	r1, #1
1000923c:	d104      	bne.n	10009248 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000923e:	6802      	ldr	r2, [r0, #0]
10009240:	7a13      	ldrb	r3, [r2, #8]
10009242:	311f      	adds	r1, #31
10009244:	438b      	bics	r3, r1
10009246:	7213      	strb	r3, [r2, #8]
	}

}
10009248:	bd10      	pop	{r4, pc}
1000924a:	46c0      	nop			; (mov r8, r8)

1000924c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000924c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000924e:	4647      	mov	r7, r8
10009250:	b480      	push	{r7}
10009252:	000c      	movs	r4, r1
10009254:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
10009256:	2800      	cmp	r0, #0
10009258:	d10d      	bne.n	10009276 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000925a:	2a00      	cmp	r2, #0
1000925c:	dd0e      	ble.n	1000927c <_read+0x30>
1000925e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
10009260:	4e08      	ldr	r6, [pc, #32]	; (10009284 <_read+0x38>)
10009262:	4d09      	ldr	r5, [pc, #36]	; (10009288 <_read+0x3c>)
10009264:	6830      	ldr	r0, [r6, #0]
10009266:	0021      	movs	r1, r4
10009268:	682b      	ldr	r3, [r5, #0]
1000926a:	4798      	blx	r3
		ptr++;
1000926c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000926e:	42a7      	cmp	r7, r4
10009270:	d1f8      	bne.n	10009264 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
10009272:	4640      	mov	r0, r8
10009274:	e003      	b.n	1000927e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
10009276:	2001      	movs	r0, #1
10009278:	4240      	negs	r0, r0
1000927a:	e000      	b.n	1000927e <_read+0x32>
	}

	for (; len > 0; --len) {
1000927c:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000927e:	bc04      	pop	{r2}
10009280:	4690      	mov	r8, r2
10009282:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009284:	10013524 	.word	0x10013524
10009288:	1001351c 	.word	0x1001351c

1000928c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000928c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000928e:	4647      	mov	r7, r8
10009290:	b480      	push	{r7}
10009292:	000e      	movs	r6, r1
10009294:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
10009296:	3801      	subs	r0, #1
10009298:	2802      	cmp	r0, #2
1000929a:	d811      	bhi.n	100092c0 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000929c:	2a00      	cmp	r2, #0
1000929e:	d012      	beq.n	100092c6 <_write+0x3a>
100092a0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
100092a2:	4b0c      	ldr	r3, [pc, #48]	; (100092d4 <_write+0x48>)
100092a4:	4698      	mov	r8, r3
100092a6:	4f0c      	ldr	r7, [pc, #48]	; (100092d8 <_write+0x4c>)
100092a8:	4643      	mov	r3, r8
100092aa:	6818      	ldr	r0, [r3, #0]
100092ac:	5d31      	ldrb	r1, [r6, r4]
100092ae:	683b      	ldr	r3, [r7, #0]
100092b0:	4798      	blx	r3
100092b2:	2800      	cmp	r0, #0
100092b4:	db09      	blt.n	100092ca <_write+0x3e>
			return -1;
		}
		++nChars;
100092b6:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
100092b8:	42a5      	cmp	r5, r4
100092ba:	d1f5      	bne.n	100092a8 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
100092bc:	0020      	movs	r0, r4
100092be:	e006      	b.n	100092ce <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
100092c0:	2001      	movs	r0, #1
100092c2:	4240      	negs	r0, r0
100092c4:	e003      	b.n	100092ce <_write+0x42>
	}

	for (; len != 0; --len) {
100092c6:	2000      	movs	r0, #0
100092c8:	e001      	b.n	100092ce <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
100092ca:	2001      	movs	r0, #1
100092cc:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
100092ce:	bc04      	pop	{r2}
100092d0:	4690      	mov	r8, r2
100092d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100092d4:	10013524 	.word	0x10013524
100092d8:	10013520 	.word	0x10013520

100092dc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
100092dc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
100092de:	4a06      	ldr	r2, [pc, #24]	; (100092f8 <_sbrk+0x1c>)
100092e0:	6812      	ldr	r2, [r2, #0]
100092e2:	2a00      	cmp	r2, #0
100092e4:	d102      	bne.n	100092ec <_sbrk+0x10>
		heap = (unsigned char *)&_end;
100092e6:	4905      	ldr	r1, [pc, #20]	; (100092fc <_sbrk+0x20>)
100092e8:	4a03      	ldr	r2, [pc, #12]	; (100092f8 <_sbrk+0x1c>)
100092ea:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
100092ec:	4a02      	ldr	r2, [pc, #8]	; (100092f8 <_sbrk+0x1c>)
100092ee:	6810      	ldr	r0, [r2, #0]

	heap += incr;
100092f0:	18c3      	adds	r3, r0, r3
100092f2:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
100092f4:	4770      	bx	lr
100092f6:	46c0      	nop			; (mov r8, r8)
100092f8:	10011990 	.word	0x10011990
100092fc:	10014e88 	.word	0x10014e88

10009300 <_close>:
}

extern int _close(int file)
{
	return -1;
}
10009300:	2001      	movs	r0, #1
10009302:	4240      	negs	r0, r0
10009304:	4770      	bx	lr
10009306:	46c0      	nop			; (mov r8, r8)

10009308 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
10009308:	2380      	movs	r3, #128	; 0x80
1000930a:	019b      	lsls	r3, r3, #6
1000930c:	604b      	str	r3, [r1, #4]

	return 0;
}
1000930e:	2000      	movs	r0, #0
10009310:	4770      	bx	lr
10009312:	46c0      	nop			; (mov r8, r8)

10009314 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
10009314:	2001      	movs	r0, #1
10009316:	4770      	bx	lr

10009318 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
10009318:	2000      	movs	r0, #0
1000931a:	4770      	bx	lr

1000931c <bat_init_service>:
extern ble_connected_dev_info_t ble_dev_info[BLE_MAX_DEVICE_CONNECTED];

/**@brief Initialize the service with its included service, characteristics, and descriptors
 */
void bat_init_service(bat_gatt_service_handler_t *battery_serv, uint8_t *battery_value)
{
1000931c:	b530      	push	{r4, r5, lr}
	battery_serv->serv_handle = 0;
1000931e:	2300      	movs	r3, #0
10009320:	2200      	movs	r2, #0
10009322:	8243      	strh	r3, [r0, #18]
	battery_serv->serv_uuid.type = AT_BLE_UUID_16;
10009324:	7002      	strb	r2, [r0, #0]
	battery_serv->serv_uuid.uuid[0] = (uint8_t) BAT_SERVICE_UUID;
10009326:	210f      	movs	r1, #15
10009328:	7041      	strb	r1, [r0, #1]
	battery_serv->serv_uuid.uuid[1] = (uint8_t) (BAT_SERVICE_UUID >> 8);
1000932a:	3109      	adds	r1, #9
1000932c:	7081      	strb	r1, [r0, #2]
	
	//Battery service characteristic
	battery_serv->serv_chars.char_val_handle = 0;          /* handle stored here */
1000932e:	8283      	strh	r3, [r0, #20]
	battery_serv->serv_chars.uuid.type = AT_BLE_UUID_16;
10009330:	7582      	strb	r2, [r0, #22]
	battery_serv->serv_chars.uuid.uuid[0] = (uint8_t) BAT_CHAR_BAT_LEVEL_UUID;          /* UUID : Manufacturer Name String */
10009332:	2419      	movs	r4, #25
10009334:	75c4      	strb	r4, [r0, #23]
	battery_serv->serv_chars.uuid.uuid[1] = (uint8_t) (BAT_CHAR_BAT_LEVEL_UUID >> 8);          /* UUID : Manufacturer Name String */
10009336:	3411      	adds	r4, #17
10009338:	7604      	strb	r4, [r0, #24]
	battery_serv->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); /* Properties */ //AT_BLE_CHAR_NOTIFY
1000933a:	3c08      	subs	r4, #8
1000933c:	8504      	strh	r4, [r0, #40]	; 0x28
	battery_serv->serv_chars.init_value = &battery_init_value;             /* value */
1000933e:	4c11      	ldr	r4, [pc, #68]	; (10009384 <bat_init_service+0x68>)
10009340:	62c4      	str	r4, [r0, #44]	; 0x2c
	battery_serv->serv_chars.value_init_len = sizeof(uint8_t);
10009342:	2401      	movs	r4, #1
10009344:	8604      	strh	r4, [r0, #48]	; 0x30
	battery_serv->serv_chars.value_max_len = sizeof(uint8_t);
10009346:	8644      	strh	r4, [r0, #50]	; 0x32
#if BLE_PAIR_ENABLE
	battery_serv->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_REQ_AUTHN_NO_AUTHR |
10009348:	3433      	adds	r4, #51	; 0x33
1000934a:	2522      	movs	r5, #34	; 0x22
1000934c:	5505      	strb	r5, [r0, r4]
												 AT_BLE_ATTR_WRITABLE_REQ_AUTHN_NO_AUTHR);   /* permissions */
#else
	battery_serv->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR |
												 AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR);   /* permissions */
#endif
	battery_serv->serv_chars.user_desc = NULL;           /* user defined name */
1000934e:	6383      	str	r3, [r0, #56]	; 0x38
	battery_serv->serv_chars.user_desc_len = 0;
10009350:	8783      	strh	r3, [r0, #60]	; 0x3c
	battery_serv->serv_chars.user_desc_max_len = 0;
10009352:	87c3      	strh	r3, [r0, #62]	; 0x3e
	battery_serv->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS;             /*user description permissions*/
10009354:	3410      	adds	r4, #16
10009356:	5502      	strb	r2, [r0, r4]
	battery_serv->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*client config permissions*/
10009358:	3401      	adds	r4, #1
1000935a:	5502      	strb	r2, [r0, r4]
	battery_serv->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*server config permissions*/
1000935c:	3401      	adds	r4, #1
1000935e:	5502      	strb	r2, [r0, r4]
	battery_serv->serv_chars.user_desc_handle = 0;             /*user desc handles*/
10009360:	3402      	adds	r4, #2
10009362:	5303      	strh	r3, [r0, r4]
	battery_serv->serv_chars.client_config_handle = 0;         /*client config handles*/
10009364:	3402      	adds	r4, #2
10009366:	5303      	strh	r3, [r0, r4]
	battery_serv->serv_chars.server_config_handle = 0;         /*server config handles*/
10009368:	3402      	adds	r4, #2
1000936a:	5303      	strh	r3, [r0, r4]
	
	presentation_format.format = AT_BLE_PRES_FORMAT_UINT8;
1000936c:	4b06      	ldr	r3, [pc, #24]	; (10009388 <bat_init_service+0x6c>)
1000936e:	3c48      	subs	r4, #72	; 0x48
10009370:	701c      	strb	r4, [r3, #0]
	presentation_format.exponent = BAT_CHAR_PRESENTATION_FORMAT_EXPONENT;
10009372:	705a      	strb	r2, [r3, #1]
	presentation_format.unit = (uint8_t) BAT_CHAR_PRESENTATION_FORMAT_UNIT;
	presentation_format.unit = (uint8_t) (BAT_CHAR_PRESENTATION_FORMAT_UNIT >> 8);
10009374:	8059      	strh	r1, [r3, #2]
	presentation_format.name_space = BAT_CHAR_PRESENTATION_FORMAT_NAMESPACE;
10009376:	2201      	movs	r2, #1
10009378:	711a      	strb	r2, [r3, #4]
	presentation_format.description = (uint8_t) BAT_CHAR_PRESENTATION_FORMAT_DESCRIPTOR;
	presentation_format.description = (uint8_t) (BAT_CHAR_PRESENTATION_FORMAT_DESCRIPTOR >> 8);
1000937a:	2210      	movs	r2, #16
1000937c:	80da      	strh	r2, [r3, #6]
	
	battery_serv->serv_chars.presentation_format = &presentation_format;       /* presentation format */
1000937e:	6403      	str	r3, [r0, #64]	; 0x40
	ALL_UNUSED(battery_value);
}
10009380:	bd30      	pop	{r4, r5, pc}
10009382:	46c0      	nop			; (mov r8, r8)
10009384:	10011904 	.word	0x10011904
10009388:	10013528 	.word	0x10013528

1000938c <bat_primary_service_define>:

/**@brief defining a initialized service 
 */
at_ble_status_t bat_primary_service_define(bat_gatt_service_handler_t *battery_service)
{
1000938c:	b510      	push	{r4, lr}
1000938e:	b082      	sub	sp, #8
	return(at_ble_primary_service_define(&battery_service->serv_uuid,
10009390:	0001      	movs	r1, r0
10009392:	3112      	adds	r1, #18
10009394:	2301      	movs	r3, #1
10009396:	9301      	str	r3, [sp, #4]
10009398:	0003      	movs	r3, r0
1000939a:	3314      	adds	r3, #20
1000939c:	9300      	str	r3, [sp, #0]
1000939e:	2300      	movs	r3, #0
100093a0:	2200      	movs	r2, #0
100093a2:	4c02      	ldr	r4, [pc, #8]	; (100093ac <bat_primary_service_define+0x20>)
100093a4:	47a0      	blx	r4
	&battery_service->serv_handle,
	NULL, 0,
	&battery_service->serv_chars, 1));
}
100093a6:	b002      	add	sp, #8
100093a8:	bd10      	pop	{r4, pc}
100093aa:	46c0      	nop			; (mov r8, r8)
100093ac:	1000c9a1 	.word	0x1000c9a1

100093b0 <bat_update_char_value>:

/**@brief Function used to update characteristic value
 */
at_ble_status_t bat_update_char_value (at_ble_handle_t conn_handle, bat_gatt_service_handler_t *battery_serv , uint8_t char_data,bool volatile *flag)
{
100093b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100093b2:	b083      	sub	sp, #12
100093b4:	0006      	movs	r6, r0
100093b6:	000f      	movs	r7, r1
100093b8:	001d      	movs	r5, r3
100093ba:	466b      	mov	r3, sp
100093bc:	1dd9      	adds	r1, r3, #7
100093be:	700a      	strb	r2, [r1, #0]
	at_ble_status_t status = AT_BLE_SUCCESS;
	/* Updating the att data base */
	if ((status = at_ble_characteristic_value_set(battery_serv->serv_chars.char_val_handle, &char_data, sizeof(uint8_t))) != AT_BLE_SUCCESS){
100093c0:	8ab8      	ldrh	r0, [r7, #20]
100093c2:	2201      	movs	r2, #1
100093c4:	4b12      	ldr	r3, [pc, #72]	; (10009410 <bat_update_char_value+0x60>)
100093c6:	4798      	blx	r3
100093c8:	1e04      	subs	r4, r0, #0
100093ca:	d008      	beq.n	100093de <bat_update_char_value+0x2e>
		DBG_LOG("updating the characteristic failed%d",status);
100093cc:	4811      	ldr	r0, [pc, #68]	; (10009414 <bat_update_char_value+0x64>)
100093ce:	4b12      	ldr	r3, [pc, #72]	; (10009418 <bat_update_char_value+0x68>)
100093d0:	4798      	blx	r3
100093d2:	0021      	movs	r1, r4
100093d4:	4811      	ldr	r0, [pc, #68]	; (1000941c <bat_update_char_value+0x6c>)
100093d6:	4b12      	ldr	r3, [pc, #72]	; (10009420 <bat_update_char_value+0x70>)
100093d8:	4798      	blx	r3
		return status;
100093da:	0020      	movs	r0, r4
100093dc:	e016      	b.n	1000940c <bat_update_char_value+0x5c>
	} else {
		DBG_LOG_DEV("updating the characteristic value is successful");
	}

	if(bat_notification_flag){
100093de:	4b11      	ldr	r3, [pc, #68]	; (10009424 <bat_update_char_value+0x74>)
100093e0:	781b      	ldrb	r3, [r3, #0]
			DBG_LOG_DEV("sending notification successful");
			*flag = false;
			return status;
		}
	}
	return status;
100093e2:	2000      	movs	r0, #0
		return status;
	} else {
		DBG_LOG_DEV("updating the characteristic value is successful");
	}

	if(bat_notification_flag){
100093e4:	2b00      	cmp	r3, #0
100093e6:	d011      	beq.n	1000940c <bat_update_char_value+0x5c>
		/* sending indiaction to the peer about change in the battery level */ //at_ble_notification_send //at_ble_indication_send
		if((status = at_ble_indication_send(conn_handle, battery_serv->serv_chars.char_val_handle)) != AT_BLE_SUCCESS) 
100093e8:	8ab9      	ldrh	r1, [r7, #20]
100093ea:	0030      	movs	r0, r6
100093ec:	4b0e      	ldr	r3, [pc, #56]	; (10009428 <bat_update_char_value+0x78>)
100093ee:	4798      	blx	r3
100093f0:	1e04      	subs	r4, r0, #0
100093f2:	d008      	beq.n	10009406 <bat_update_char_value+0x56>
		
		{
			DBG_LOG("sending notification failed%d",status);
100093f4:	4807      	ldr	r0, [pc, #28]	; (10009414 <bat_update_char_value+0x64>)
100093f6:	4b08      	ldr	r3, [pc, #32]	; (10009418 <bat_update_char_value+0x68>)
100093f8:	4798      	blx	r3
100093fa:	0021      	movs	r1, r4
100093fc:	480b      	ldr	r0, [pc, #44]	; (1000942c <bat_update_char_value+0x7c>)
100093fe:	4b08      	ldr	r3, [pc, #32]	; (10009420 <bat_update_char_value+0x70>)
10009400:	4798      	blx	r3
			return status;
10009402:	0020      	movs	r0, r4
10009404:	e002      	b.n	1000940c <bat_update_char_value+0x5c>
		}
		else {
			DBG_LOG_DEV("sending notification successful");
			*flag = false;
10009406:	2300      	movs	r3, #0
10009408:	702b      	strb	r3, [r5, #0]
			return status;
1000940a:	2000      	movs	r0, #0
		}
	}
	return status;
}
1000940c:	b003      	add	sp, #12
1000940e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009410:	1000c9c1 	.word	0x1000c9c1
10009414:	10010e28 	.word	0x10010e28
10009418:	1000fb5d 	.word	0x1000fb5d
1000941c:	10010e2c 	.word	0x10010e2c
10009420:	1000fa3d 	.word	0x1000fa3d
10009424:	10011994 	.word	0x10011994
10009428:	1000cb61 	.word	0x1000cb61
1000942c:	10010e54 	.word	0x10010e54

10009430 <bat_char_changed_event>:
/**@brief function to check the client characteristic configuration value. 
 */
at_ble_status_t bat_char_changed_event(at_ble_handle_t conn_handle, bat_gatt_service_handler_t *battery_service, at_ble_characteristic_changed_t *char_handle, bool volatile *flag)
{
10009430:	b570      	push	{r4, r5, r6, lr}
10009432:	4c1c      	ldr	r4, [pc, #112]	; (100094a4 <bat_char_changed_event+0x74>)
10009434:	44a5      	add	sp, r4
10009436:	0006      	movs	r6, r0
10009438:	000c      	movs	r4, r1
1000943a:	0011      	movs	r1, r2
1000943c:	001d      	movs	r5, r3
	at_ble_status_t status = AT_BLE_SUCCESS;
	at_ble_characteristic_changed_t change_params;
	memcpy((uint8_t *)&change_params, char_handle, sizeof(at_ble_characteristic_changed_t));
1000943e:	4a1a      	ldr	r2, [pc, #104]	; (100094a8 <bat_char_changed_event+0x78>)
10009440:	a801      	add	r0, sp, #4
10009442:	4b1a      	ldr	r3, [pc, #104]	; (100094ac <bat_char_changed_event+0x7c>)
10009444:	4798      	blx	r3
	
	if(battery_service->serv_chars.client_config_handle == change_params.char_handle)
10009446:	234a      	movs	r3, #74	; 0x4a
10009448:	5ae2      	ldrh	r2, [r4, r3]
1000944a:	ab01      	add	r3, sp, #4
1000944c:	885b      	ldrh	r3, [r3, #2]
		else
		{
			bat_notification_flag = false;			
		}
	}
	return status;
1000944e:	2000      	movs	r0, #0
{
	at_ble_status_t status = AT_BLE_SUCCESS;
	at_ble_characteristic_changed_t change_params;
	memcpy((uint8_t *)&change_params, char_handle, sizeof(at_ble_characteristic_changed_t));
	
	if(battery_service->serv_chars.client_config_handle == change_params.char_handle)
10009450:	429a      	cmp	r2, r3
10009452:	d123      	bne.n	1000949c <bat_char_changed_event+0x6c>
	{
		if(change_params.char_new_value[0])
10009454:	ab01      	add	r3, sp, #4
10009456:	7a1b      	ldrb	r3, [r3, #8]
10009458:	2b00      	cmp	r3, #0
1000945a:	d01b      	beq.n	10009494 <bat_char_changed_event+0x64>
		{
			bat_notification_flag = true;
1000945c:	2201      	movs	r2, #1
1000945e:	4b14      	ldr	r3, [pc, #80]	; (100094b0 <bat_char_changed_event+0x80>)
10009460:	701a      	strb	r2, [r3, #0]
			/* sending notification to the peer about change in the battery level */
			if((status = at_ble_indication_send(conn_handle, battery_service->serv_chars.char_val_handle)) != AT_BLE_SUCCESS) {
10009462:	8aa1      	ldrh	r1, [r4, #20]
10009464:	0030      	movs	r0, r6
10009466:	4b13      	ldr	r3, [pc, #76]	; (100094b4 <bat_char_changed_event+0x84>)
10009468:	4798      	blx	r3
1000946a:	1e04      	subs	r4, r0, #0
1000946c:	d008      	beq.n	10009480 <bat_char_changed_event+0x50>
				DBG_LOG("sending indication failed%d",status);
1000946e:	4812      	ldr	r0, [pc, #72]	; (100094b8 <bat_char_changed_event+0x88>)
10009470:	4b12      	ldr	r3, [pc, #72]	; (100094bc <bat_char_changed_event+0x8c>)
10009472:	4798      	blx	r3
10009474:	0021      	movs	r1, r4
10009476:	4812      	ldr	r0, [pc, #72]	; (100094c0 <bat_char_changed_event+0x90>)
10009478:	4b12      	ldr	r3, [pc, #72]	; (100094c4 <bat_char_changed_event+0x94>)
1000947a:	4798      	blx	r3
				return status;
1000947c:	0020      	movs	r0, r4
1000947e:	e00d      	b.n	1000949c <bat_char_changed_event+0x6c>
			}
			else {
				DBG_LOG("sending indication successful");
10009480:	480d      	ldr	r0, [pc, #52]	; (100094b8 <bat_char_changed_event+0x88>)
10009482:	4b0e      	ldr	r3, [pc, #56]	; (100094bc <bat_char_changed_event+0x8c>)
10009484:	4798      	blx	r3
10009486:	4810      	ldr	r0, [pc, #64]	; (100094c8 <bat_char_changed_event+0x98>)
10009488:	4b0e      	ldr	r3, [pc, #56]	; (100094c4 <bat_char_changed_event+0x94>)
1000948a:	4798      	blx	r3
				*flag = false;
1000948c:	2300      	movs	r3, #0
1000948e:	702b      	strb	r3, [r5, #0]
				return status;
10009490:	2000      	movs	r0, #0
10009492:	e003      	b.n	1000949c <bat_char_changed_event+0x6c>
			}			
		}
		else
		{
			bat_notification_flag = false;			
10009494:	2200      	movs	r2, #0
10009496:	4b06      	ldr	r3, [pc, #24]	; (100094b0 <bat_char_changed_event+0x80>)
10009498:	701a      	strb	r2, [r3, #0]
		}
	}
	return status;
1000949a:	2000      	movs	r0, #0
}
1000949c:	2384      	movs	r3, #132	; 0x84
1000949e:	009b      	lsls	r3, r3, #2
100094a0:	449d      	add	sp, r3
100094a2:	bd70      	pop	{r4, r5, r6, pc}
100094a4:	fffffdf0 	.word	0xfffffdf0
100094a8:	0000020a 	.word	0x0000020a
100094ac:	1000fa1b 	.word	0x1000fa1b
100094b0:	10011994 	.word	0x10011994
100094b4:	1000cb61 	.word	0x1000cb61
100094b8:	10010e28 	.word	0x10010e28
100094bc:	1000fb5d 	.word	0x1000fb5d
100094c0:	10010e74 	.word	0x10010e74
100094c4:	1000fa3d 	.word	0x1000fa3d
100094c8:	10010e90 	.word	0x10010e90

100094cc <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
100094cc:	2000      	movs	r0, #0
100094ce:	4770      	bx	lr

100094d0 <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
100094d0:	2000      	movs	r0, #0
100094d2:	4770      	bx	lr

100094d4 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
100094d4:	78c0      	ldrb	r0, [r0, #3]
100094d6:	2800      	cmp	r0, #0
100094d8:	d000      	beq.n	100094dc <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
100094da:	20e2      	movs	r0, #226	; 0xe2
}
100094dc:	4770      	bx	lr
100094de:	46c0      	nop			; (mov r8, r8)

100094e0 <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
100094e0:	2000      	movs	r0, #0
100094e2:	4770      	bx	lr

100094e4 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
100094e4:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
100094e6:	7800      	ldrb	r0, [r0, #0]
100094e8:	2800      	cmp	r0, #0
100094ea:	d006      	beq.n	100094fa <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
100094ec:	4803      	ldr	r0, [pc, #12]	; (100094fc <ble_scan_report_handler+0x18>)
100094ee:	4b04      	ldr	r3, [pc, #16]	; (10009500 <ble_scan_report_handler+0x1c>)
100094f0:	4798      	blx	r3
100094f2:	4804      	ldr	r0, [pc, #16]	; (10009504 <ble_scan_report_handler+0x20>)
100094f4:	4b04      	ldr	r3, [pc, #16]	; (10009508 <ble_scan_report_handler+0x24>)
100094f6:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
100094f8:	20e2      	movs	r0, #226	; 0xe2
}
100094fa:	bd10      	pop	{r4, pc}
100094fc:	10010e28 	.word	0x10010e28
10009500:	1000fb5d 	.word	0x1000fb5d
10009504:	10011020 	.word	0x10011020
10009508:	1000fa3d 	.word	0x1000fa3d

1000950c <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000950c:	b510      	push	{r4, lr}
1000950e:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10009510:	78c0      	ldrb	r0, [r0, #3]
10009512:	2800      	cmp	r0, #0
10009514:	d008      	beq.n	10009528 <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
10009516:	4805      	ldr	r0, [pc, #20]	; (1000952c <ble_mtu_changed_cmd_complete_handler+0x20>)
10009518:	4b05      	ldr	r3, [pc, #20]	; (10009530 <ble_mtu_changed_cmd_complete_handler+0x24>)
1000951a:	4798      	blx	r3
1000951c:	78a2      	ldrb	r2, [r4, #2]
1000951e:	8821      	ldrh	r1, [r4, #0]
10009520:	4804      	ldr	r0, [pc, #16]	; (10009534 <ble_mtu_changed_cmd_complete_handler+0x28>)
10009522:	4b05      	ldr	r3, [pc, #20]	; (10009538 <ble_mtu_changed_cmd_complete_handler+0x2c>)
10009524:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
10009526:	20e2      	movs	r0, #226	; 0xe2
}
10009528:	bd10      	pop	{r4, pc}
1000952a:	46c0      	nop			; (mov r8, r8)
1000952c:	10010e28 	.word	0x10010e28
10009530:	1000fb5d 	.word	0x1000fb5d
10009534:	10011034 	.word	0x10011034
10009538:	1000fa3d 	.word	0x1000fa3d

1000953c <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000953c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000953e:	0004      	movs	r4, r0
10009540:	4b19      	ldr	r3, [pc, #100]	; (100095a8 <ble_disconnected_state_handler+0x6c>)
10009542:	229b      	movs	r2, #155	; 0x9b
10009544:	0092      	lsls	r2, r2, #2
10009546:	189d      	adds	r5, r3, r2
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
10009548:	2701      	movs	r7, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000954a:	2600      	movs	r6, #0
1000954c:	0018      	movs	r0, r3
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000954e:	001a      	movs	r2, r3
10009550:	3a56      	subs	r2, #86	; 0x56
10009552:	8811      	ldrh	r1, [r2, #0]
10009554:	8822      	ldrh	r2, [r4, #0]
10009556:	4291      	cmp	r1, r2
10009558:	d119      	bne.n	1000958e <ble_disconnected_state_handler+0x52>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000955a:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000955c:	2a05      	cmp	r2, #5
1000955e:	d001      	beq.n	10009564 <ble_disconnected_state_handler+0x28>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
10009560:	2a08      	cmp	r2, #8
10009562:	d101      	bne.n	10009568 <ble_disconnected_state_handler+0x2c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
10009564:	7007      	strb	r7, [r0, #0]
10009566:	e012      	b.n	1000958e <ble_disconnected_state_handler+0x52>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
10009568:	2a07      	cmp	r2, #7
1000956a:	d80f      	bhi.n	1000958c <ble_disconnected_state_handler+0x50>
1000956c:	0092      	lsls	r2, r2, #2
1000956e:	490f      	ldr	r1, [pc, #60]	; (100095ac <ble_disconnected_state_handler+0x70>)
10009570:	588a      	ldr	r2, [r1, r2]
10009572:	4697      	mov	pc, r2
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009574:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
10009576:	4a0e      	ldr	r2, [pc, #56]	; (100095b0 <ble_disconnected_state_handler+0x74>)
10009578:	7812      	ldrb	r2, [r2, #0]
1000957a:	2a00      	cmp	r2, #0
1000957c:	d007      	beq.n	1000958e <ble_disconnected_state_handler+0x52>
					{
						ble_device_count--;
1000957e:	4a0c      	ldr	r2, [pc, #48]	; (100095b0 <ble_disconnected_state_handler+0x74>)
10009580:	7812      	ldrb	r2, [r2, #0]
10009582:	3a01      	subs	r2, #1
10009584:	b2d2      	uxtb	r2, r2
10009586:	490a      	ldr	r1, [pc, #40]	; (100095b0 <ble_disconnected_state_handler+0x74>)
10009588:	700a      	strb	r2, [r1, #0]
1000958a:	e000      	b.n	1000958e <ble_disconnected_state_handler+0x52>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000958c:	7006      	strb	r6, [r0, #0]
1000958e:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009590:	42ab      	cmp	r3, r5
10009592:	d1db      	bne.n	1000954c <ble_disconnected_state_handler+0x10>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
10009594:	4807      	ldr	r0, [pc, #28]	; (100095b4 <ble_disconnected_state_handler+0x78>)
10009596:	4b08      	ldr	r3, [pc, #32]	; (100095b8 <ble_disconnected_state_handler+0x7c>)
10009598:	4798      	blx	r3
1000959a:	8822      	ldrh	r2, [r4, #0]
1000959c:	78a1      	ldrb	r1, [r4, #2]
1000959e:	4807      	ldr	r0, [pc, #28]	; (100095bc <ble_disconnected_state_handler+0x80>)
100095a0:	4b07      	ldr	r3, [pc, #28]	; (100095c0 <ble_disconnected_state_handler+0x84>)
100095a2:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
100095a4:	2000      	movs	r0, #0
100095a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100095a8:	100135a6 	.word	0x100135a6
100095ac:	10010eb0 	.word	0x10010eb0
100095b0:	100137b4 	.word	0x100137b4
100095b4:	10010e28 	.word	0x10010e28
100095b8:	1000fb5d 	.word	0x1000fb5d
100095bc:	1001106c 	.word	0x1001106c
100095c0:	1000fa3d 	.word	0x1000fa3d

100095c4 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
100095c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100095c6:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
100095c8:	8801      	ldrh	r1, [r0, #0]
100095ca:	4b28      	ldr	r3, [pc, #160]	; (1000966c <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100095cc:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
100095ce:	891a      	ldrh	r2, [r3, #8]
100095d0:	428a      	cmp	r2, r1
100095d2:	d104      	bne.n	100095de <ble_encryption_status_change_handler+0x1a>
100095d4:	001a      	movs	r2, r3
100095d6:	325e      	adds	r2, #94	; 0x5e
100095d8:	7812      	ldrb	r2, [r2, #0]
100095da:	2a06      	cmp	r2, #6
100095dc:	d02e      	beq.n	1000963c <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100095de:	3401      	adds	r4, #1
100095e0:	b2e4      	uxtb	r4, r4
100095e2:	337c      	adds	r3, #124	; 0x7c
100095e4:	2c05      	cmp	r4, #5
100095e6:	d1f2      	bne.n	100095ce <ble_encryption_status_change_handler+0xa>
100095e8:	e039      	b.n	1000965e <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
100095ea:	4920      	ldr	r1, [pc, #128]	; (1000966c <ble_encryption_status_change_handler+0xa8>)
100095ec:	0163      	lsls	r3, r4, #5
100095ee:	1b1a      	subs	r2, r3, r4
100095f0:	0092      	lsls	r2, r2, #2
100095f2:	188a      	adds	r2, r1, r2
100095f4:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
100095f6:	0014      	movs	r4, r2
100095f8:	345e      	adds	r4, #94	; 0x5e
100095fa:	2307      	movs	r3, #7
100095fc:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
100095fe:	481c      	ldr	r0, [pc, #112]	; (10009670 <ble_encryption_status_change_handler+0xac>)
10009600:	4b1c      	ldr	r3, [pc, #112]	; (10009674 <ble_encryption_status_change_handler+0xb0>)
10009602:	4798      	blx	r3
10009604:	481c      	ldr	r0, [pc, #112]	; (10009678 <ble_encryption_status_change_handler+0xb4>)
10009606:	4b1d      	ldr	r3, [pc, #116]	; (1000967c <ble_encryption_status_change_handler+0xb8>)
10009608:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000960a:	25e2      	movs	r5, #226	; 0xe2
1000960c:	e02b      	b.n	10009666 <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000960e:	4818      	ldr	r0, [pc, #96]	; (10009670 <ble_encryption_status_change_handler+0xac>)
10009610:	4b18      	ldr	r3, [pc, #96]	; (10009674 <ble_encryption_status_change_handler+0xb0>)
10009612:	4798      	blx	r3
10009614:	481a      	ldr	r0, [pc, #104]	; (10009680 <ble_encryption_status_change_handler+0xbc>)
10009616:	4b19      	ldr	r3, [pc, #100]	; (1000967c <ble_encryption_status_change_handler+0xb8>)
10009618:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000961a:	4914      	ldr	r1, [pc, #80]	; (1000966c <ble_encryption_status_change_handler+0xa8>)
1000961c:	0163      	lsls	r3, r4, #5
1000961e:	1b1a      	subs	r2, r3, r4
10009620:	0092      	lsls	r2, r2, #2
10009622:	188a      	adds	r2, r1, r2
10009624:	0010      	movs	r0, r2
10009626:	305e      	adds	r0, #94	; 0x5e
10009628:	2708      	movs	r7, #8
1000962a:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000962c:	78f0      	ldrb	r0, [r6, #3]
1000962e:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
10009630:	78b2      	ldrb	r2, [r6, #2]
10009632:	1b1c      	subs	r4, r3, r4
10009634:	00a4      	lsls	r4, r4, #2
10009636:	190c      	adds	r4, r1, r4
10009638:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000963a:	e014      	b.n	10009666 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000963c:	78b5      	ldrb	r5, [r6, #2]
1000963e:	2d00      	cmp	r5, #0
10009640:	d0e5      	beq.n	1000960e <ble_encryption_status_change_handler+0x4a>
10009642:	e7d2      	b.n	100095ea <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
10009644:	4e0a      	ldr	r6, [pc, #40]	; (10009670 <ble_encryption_status_change_handler+0xac>)
10009646:	0030      	movs	r0, r6
10009648:	4d0a      	ldr	r5, [pc, #40]	; (10009674 <ble_encryption_status_change_handler+0xb0>)
1000964a:	47a8      	blx	r5
1000964c:	480c      	ldr	r0, [pc, #48]	; (10009680 <ble_encryption_status_change_handler+0xbc>)
1000964e:	4c0b      	ldr	r4, [pc, #44]	; (1000967c <ble_encryption_status_change_handler+0xb8>)
10009650:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
10009652:	0030      	movs	r0, r6
10009654:	47a8      	blx	r5
10009656:	480b      	ldr	r0, [pc, #44]	; (10009684 <ble_encryption_status_change_handler+0xc0>)
10009658:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000965a:	25e2      	movs	r5, #226	; 0xe2
1000965c:	e003      	b.n	10009666 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000965e:	78b5      	ldrb	r5, [r6, #2]
10009660:	2d00      	cmp	r5, #0
10009662:	d1c2      	bne.n	100095ea <ble_encryption_status_change_handler+0x26>
10009664:	e7ee      	b.n	10009644 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
10009666:	0028      	movs	r0, r5
10009668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000966a:	46c0      	nop			; (mov r8, r8)
1000966c:	10013548 	.word	0x10013548
10009670:	10010e28 	.word	0x10010e28
10009674:	1000fb5d 	.word	0x1000fb5d
10009678:	1001109c 	.word	0x1001109c
1000967c:	1000fa3d 	.word	0x1000fa3d
10009680:	100110b0 	.word	0x100110b0
10009684:	100110d4 	.word	0x100110d4

10009688 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
10009688:	b510      	push	{r4, lr}
1000968a:	0001      	movs	r1, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000968c:	4b15      	ldr	r3, [pc, #84]	; (100096e4 <ble_scan_info_handler+0x5c>)
1000968e:	781b      	ldrb	r3, [r3, #0]
10009690:	b2db      	uxtb	r3, r3
10009692:	2b13      	cmp	r3, #19
10009694:	d812      	bhi.n	100096bc <ble_scan_info_handler+0x34>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
10009696:	4c13      	ldr	r4, [pc, #76]	; (100096e4 <ble_scan_info_handler+0x5c>)
10009698:	7823      	ldrb	r3, [r4, #0]
1000969a:	b2db      	uxtb	r3, r3
1000969c:	0098      	lsls	r0, r3, #2
1000969e:	18c0      	adds	r0, r0, r3
100096a0:	00c0      	lsls	r0, r0, #3
100096a2:	18c3      	adds	r3, r0, r3
100096a4:	4810      	ldr	r0, [pc, #64]	; (100096e8 <ble_scan_info_handler+0x60>)
100096a6:	1818      	adds	r0, r3, r0
100096a8:	2229      	movs	r2, #41	; 0x29
100096aa:	4b10      	ldr	r3, [pc, #64]	; (100096ec <ble_scan_info_handler+0x64>)
100096ac:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
100096ae:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
100096b0:	7823      	ldrb	r3, [r4, #0]
100096b2:	3301      	adds	r3, #1
100096b4:	b2db      	uxtb	r3, r3
100096b6:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
100096b8:	2300      	movs	r3, #0
100096ba:	e011      	b.n	100096e0 <ble_scan_info_handler+0x58>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
100096bc:	480c      	ldr	r0, [pc, #48]	; (100096f0 <ble_scan_info_handler+0x68>)
100096be:	4b0d      	ldr	r3, [pc, #52]	; (100096f4 <ble_scan_info_handler+0x6c>)
100096c0:	4798      	blx	r3
100096c2:	480d      	ldr	r0, [pc, #52]	; (100096f8 <ble_scan_info_handler+0x70>)
100096c4:	4b0d      	ldr	r3, [pc, #52]	; (100096fc <ble_scan_info_handler+0x74>)
100096c6:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
100096c8:	4b0d      	ldr	r3, [pc, #52]	; (10009700 <ble_scan_info_handler+0x78>)
100096ca:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
100096cc:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
100096ce:	2800      	cmp	r0, #0
100096d0:	d006      	beq.n	100096e0 <ble_scan_info_handler+0x58>
		{
			DBG_LOG("Failed to stop scanning");
100096d2:	4807      	ldr	r0, [pc, #28]	; (100096f0 <ble_scan_info_handler+0x68>)
100096d4:	4b07      	ldr	r3, [pc, #28]	; (100096f4 <ble_scan_info_handler+0x6c>)
100096d6:	4798      	blx	r3
100096d8:	480a      	ldr	r0, [pc, #40]	; (10009704 <ble_scan_info_handler+0x7c>)
100096da:	4b08      	ldr	r3, [pc, #32]	; (100096fc <ble_scan_info_handler+0x74>)
100096dc:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
100096de:	23e2      	movs	r3, #226	; 0xe2
	}
}
100096e0:	0018      	movs	r0, r3
100096e2:	bd10      	pop	{r4, pc}
100096e4:	1001227c 	.word	0x1001227c
100096e8:	1001382c 	.word	0x1001382c
100096ec:	1000fa1b 	.word	0x1000fa1b
100096f0:	10010e28 	.word	0x10010e28
100096f4:	1000fb5d 	.word	0x1000fb5d
100096f8:	100110fc 	.word	0x100110fc
100096fc:	1000fa3d 	.word	0x1000fa3d
10009700:	1000c225 	.word	0x1000c225
10009704:	10011134 	.word	0x10011134

10009708 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
10009708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000970a:	464f      	mov	r7, r9
1000970c:	4646      	mov	r6, r8
1000970e:	b4c0      	push	{r6, r7}
10009710:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
10009712:	8841      	ldrh	r1, [r0, #2]
10009714:	4b3a      	ldr	r3, [pc, #232]	; (10009800 <ble_pair_done_handler+0xf8>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009716:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
10009718:	891a      	ldrh	r2, [r3, #8]
1000971a:	428a      	cmp	r2, r1
1000971c:	d104      	bne.n	10009728 <ble_pair_done_handler+0x20>
1000971e:	001a      	movs	r2, r3
10009720:	325e      	adds	r2, #94	; 0x5e
10009722:	7812      	ldrb	r2, [r2, #0]
10009724:	2a03      	cmp	r2, #3
10009726:	d062      	beq.n	100097ee <ble_pair_done_handler+0xe6>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009728:	3401      	adds	r4, #1
1000972a:	b2e4      	uxtb	r4, r4
1000972c:	337c      	adds	r3, #124	; 0x7c
1000972e:	2c05      	cmp	r4, #5
10009730:	d1f2      	bne.n	10009718 <ble_pair_done_handler+0x10>
10009732:	e02b      	b.n	1000978c <ble_pair_done_handler+0x84>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
10009734:	0163      	lsls	r3, r4, #5
10009736:	1b1c      	subs	r4, r3, r4
10009738:	00a4      	lsls	r4, r4, #2
1000973a:	4b31      	ldr	r3, [pc, #196]	; (10009800 <ble_pair_done_handler+0xf8>)
1000973c:	191c      	adds	r4, r3, r4
1000973e:	345e      	adds	r4, #94	; 0x5e
10009740:	7823      	ldrb	r3, [r4, #0]
10009742:	2b01      	cmp	r3, #1
10009744:	d913      	bls.n	1000976e <ble_pair_done_handler+0x66>
			DBG_LOG("Pairing failed...Disconnecting");
10009746:	482f      	ldr	r0, [pc, #188]	; (10009804 <ble_pair_done_handler+0xfc>)
10009748:	4b2f      	ldr	r3, [pc, #188]	; (10009808 <ble_pair_done_handler+0x100>)
1000974a:	4798      	blx	r3
1000974c:	482f      	ldr	r0, [pc, #188]	; (1000980c <ble_pair_done_handler+0x104>)
1000974e:	4b30      	ldr	r3, [pc, #192]	; (10009810 <ble_pair_done_handler+0x108>)
10009750:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
10009752:	8868      	ldrh	r0, [r5, #2]
10009754:	2113      	movs	r1, #19
10009756:	4b2f      	ldr	r3, [pc, #188]	; (10009814 <ble_pair_done_handler+0x10c>)
10009758:	4798      	blx	r3
1000975a:	1e06      	subs	r6, r0, #0
1000975c:	d04b      	beq.n	100097f6 <ble_pair_done_handler+0xee>
			{
				DBG_LOG("Disconnect Request Failed");
1000975e:	4829      	ldr	r0, [pc, #164]	; (10009804 <ble_pair_done_handler+0xfc>)
10009760:	4b29      	ldr	r3, [pc, #164]	; (10009808 <ble_pair_done_handler+0x100>)
10009762:	4798      	blx	r3
10009764:	482c      	ldr	r0, [pc, #176]	; (10009818 <ble_pair_done_handler+0x110>)
10009766:	4b2a      	ldr	r3, [pc, #168]	; (10009810 <ble_pair_done_handler+0x108>)
10009768:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000976a:	26e2      	movs	r6, #226	; 0xe2
1000976c:	e043      	b.n	100097f6 <ble_pair_done_handler+0xee>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000976e:	2600      	movs	r6, #0
10009770:	e041      	b.n	100097f6 <ble_pair_done_handler+0xee>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
10009772:	4e24      	ldr	r6, [pc, #144]	; (10009804 <ble_pair_done_handler+0xfc>)
10009774:	0030      	movs	r0, r6
10009776:	4d24      	ldr	r5, [pc, #144]	; (10009808 <ble_pair_done_handler+0x100>)
10009778:	47a8      	blx	r5
1000977a:	4828      	ldr	r0, [pc, #160]	; (1000981c <ble_pair_done_handler+0x114>)
1000977c:	4c24      	ldr	r4, [pc, #144]	; (10009810 <ble_pair_done_handler+0x108>)
1000977e:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
10009780:	0030      	movs	r0, r6
10009782:	47a8      	blx	r5
10009784:	4826      	ldr	r0, [pc, #152]	; (10009820 <ble_pair_done_handler+0x118>)
10009786:	47a0      	blx	r4
			return AT_BLE_FAILURE;
10009788:	26e2      	movs	r6, #226	; 0xe2
1000978a:	e034      	b.n	100097f6 <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000978c:	792b      	ldrb	r3, [r5, #4]
1000978e:	2b00      	cmp	r3, #0
10009790:	d1d0      	bne.n	10009734 <ble_pair_done_handler+0x2c>
10009792:	e7ee      	b.n	10009772 <ble_pair_done_handler+0x6a>
	{
		DBG_LOG("Pairing procedure completed successfully");
10009794:	481b      	ldr	r0, [pc, #108]	; (10009804 <ble_pair_done_handler+0xfc>)
10009796:	4b1c      	ldr	r3, [pc, #112]	; (10009808 <ble_pair_done_handler+0x100>)
10009798:	4798      	blx	r3
1000979a:	4820      	ldr	r0, [pc, #128]	; (1000981c <ble_pair_done_handler+0x114>)
1000979c:	4b1c      	ldr	r3, [pc, #112]	; (10009810 <ble_pair_done_handler+0x108>)
1000979e:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
100097a0:	782a      	ldrb	r2, [r5, #0]
100097a2:	4b17      	ldr	r3, [pc, #92]	; (10009800 <ble_pair_done_handler+0xf8>)
100097a4:	4699      	mov	r9, r3
100097a6:	0167      	lsls	r7, r4, #5
100097a8:	1b3b      	subs	r3, r7, r4
100097aa:	009b      	lsls	r3, r3, #2
100097ac:	444b      	add	r3, r9
100097ae:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
100097b0:	792a      	ldrb	r2, [r5, #4]
100097b2:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
100097b4:	335e      	adds	r3, #94	; 0x5e
100097b6:	2205      	movs	r2, #5
100097b8:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
100097ba:	1b38      	subs	r0, r7, r4
100097bc:	0080      	lsls	r0, r0, #2
100097be:	4448      	add	r0, r9
100097c0:	3036      	adds	r0, #54	; 0x36
100097c2:	0029      	movs	r1, r5
100097c4:	3122      	adds	r1, #34	; 0x22
100097c6:	320b      	adds	r2, #11
100097c8:	4b16      	ldr	r3, [pc, #88]	; (10009824 <ble_pair_done_handler+0x11c>)
100097ca:	4698      	mov	r8, r3
100097cc:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
100097ce:	1b38      	subs	r0, r7, r4
100097d0:	0080      	lsls	r0, r0, #2
100097d2:	4448      	add	r0, r9
100097d4:	3046      	adds	r0, #70	; 0x46
100097d6:	0029      	movs	r1, r5
100097d8:	3132      	adds	r1, #50	; 0x32
100097da:	2217      	movs	r2, #23
100097dc:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
100097de:	1b38      	subs	r0, r7, r4
100097e0:	0080      	lsls	r0, r0, #2
100097e2:	4448      	add	r0, r9
100097e4:	301a      	adds	r0, #26
100097e6:	1da9      	adds	r1, r5, #6
100097e8:	221c      	movs	r2, #28
100097ea:	47c0      	blx	r8
100097ec:	e003      	b.n	100097f6 <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
100097ee:	792e      	ldrb	r6, [r5, #4]
100097f0:	2e00      	cmp	r6, #0
100097f2:	d0cf      	beq.n	10009794 <ble_pair_done_handler+0x8c>
100097f4:	e79e      	b.n	10009734 <ble_pair_done_handler+0x2c>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
100097f6:	0030      	movs	r0, r6
100097f8:	bc0c      	pop	{r2, r3}
100097fa:	4690      	mov	r8, r2
100097fc:	4699      	mov	r9, r3
100097fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009800:	10013548 	.word	0x10013548
10009804:	10010e28 	.word	0x10010e28
10009808:	1000fb5d 	.word	0x1000fb5d
1000980c:	1001114c 	.word	0x1001114c
10009810:	1000fa3d 	.word	0x1000fa3d
10009814:	1000c245 	.word	0x1000c245
10009818:	1001116c 	.word	0x1001116c
1000981c:	10011188 	.word	0x10011188
10009820:	100111b4 	.word	0x100111b4
10009824:	1000fa1b 	.word	0x1000fa1b

10009828 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
10009828:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000982a:	8800      	ldrh	r0, [r0, #0]
1000982c:	2378      	movs	r3, #120	; 0x78
1000982e:	2201      	movs	r2, #1
10009830:	2101      	movs	r1, #1
10009832:	4c02      	ldr	r4, [pc, #8]	; (1000983c <ble_conn_param_update_req+0x14>)
10009834:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
10009836:	2000      	movs	r0, #0
10009838:	bd10      	pop	{r4, pc}
1000983a:	46c0      	nop			; (mov r8, r8)
1000983c:	1000c265 	.word	0x1000c265

10009840 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
10009840:	b5f0      	push	{r4, r5, r6, r7, lr}
10009842:	4657      	mov	r7, sl
10009844:	464e      	mov	r6, r9
10009846:	4645      	mov	r5, r8
10009848:	b4e0      	push	{r5, r6, r7}
1000984a:	b084      	sub	sp, #16
1000984c:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000984e:	2209      	movs	r2, #9
10009850:	2100      	movs	r1, #0
10009852:	a801      	add	r0, sp, #4
10009854:	4b6b      	ldr	r3, [pc, #428]	; (10009a04 <ble_slave_security_request_handler+0x1c4>)
10009856:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009858:	8825      	ldrh	r5, [r4, #0]
1000985a:	496b      	ldr	r1, [pc, #428]	; (10009a08 <ble_slave_security_request_handler+0x1c8>)
1000985c:	000a      	movs	r2, r1
1000985e:	2300      	movs	r3, #0
10009860:	8910      	ldrh	r0, [r2, #8]
10009862:	42a8      	cmp	r0, r5
10009864:	d116      	bne.n	10009894 <ble_slave_security_request_handler+0x54>
10009866:	0010      	movs	r0, r2
10009868:	305e      	adds	r0, #94	; 0x5e
1000986a:	7800      	ldrb	r0, [r0, #0]
1000986c:	2802      	cmp	r0, #2
1000986e:	d111      	bne.n	10009894 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
10009870:	4865      	ldr	r0, [pc, #404]	; (10009a08 <ble_slave_security_request_handler+0x1c8>)
10009872:	015a      	lsls	r2, r3, #5
10009874:	1ad6      	subs	r6, r2, r3
10009876:	00b6      	lsls	r6, r6, #2
10009878:	1986      	adds	r6, r0, r6
1000987a:	365e      	adds	r6, #94	; 0x5e
1000987c:	2206      	movs	r2, #6
1000987e:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
10009880:	32f9      	adds	r2, #249	; 0xf9
10009882:	4013      	ands	r3, r2
10009884:	015a      	lsls	r2, r3, #5
10009886:	1ad2      	subs	r2, r2, r3
10009888:	0092      	lsls	r2, r2, #2
1000988a:	1882      	adds	r2, r0, r2
1000988c:	7d12      	ldrb	r2, [r2, #20]
1000988e:	07d0      	lsls	r0, r2, #31
10009890:	d405      	bmi.n	1000989e <ble_slave_security_request_handler+0x5e>
10009892:	e01b      	b.n	100098cc <ble_slave_security_request_handler+0x8c>
10009894:	3301      	adds	r3, #1
10009896:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009898:	2b05      	cmp	r3, #5
1000989a:	d1e1      	bne.n	10009860 <ble_slave_security_request_handler+0x20>
1000989c:	e01e      	b.n	100098dc <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000989e:	78e0      	ldrb	r0, [r4, #3]
100098a0:	2800      	cmp	r0, #0
100098a2:	d013      	beq.n	100098cc <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
100098a4:	0159      	lsls	r1, r3, #5
100098a6:	1ac9      	subs	r1, r1, r3
100098a8:	008b      	lsls	r3, r1, #2
100098aa:	4957      	ldr	r1, [pc, #348]	; (10009a08 <ble_slave_security_request_handler+0x1c8>)
100098ac:	18c9      	adds	r1, r1, r3
100098ae:	311a      	adds	r1, #26
100098b0:	8820      	ldrh	r0, [r4, #0]
100098b2:	4b56      	ldr	r3, [pc, #344]	; (10009a0c <ble_slave_security_request_handler+0x1cc>)
100098b4:	4798      	blx	r3
100098b6:	2800      	cmp	r0, #0
100098b8:	d100      	bne.n	100098bc <ble_slave_security_request_handler+0x7c>
100098ba:	e09d      	b.n	100099f8 <ble_slave_security_request_handler+0x1b8>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
100098bc:	4854      	ldr	r0, [pc, #336]	; (10009a10 <ble_slave_security_request_handler+0x1d0>)
100098be:	4b55      	ldr	r3, [pc, #340]	; (10009a14 <ble_slave_security_request_handler+0x1d4>)
100098c0:	4798      	blx	r3
100098c2:	4855      	ldr	r0, [pc, #340]	; (10009a18 <ble_slave_security_request_handler+0x1d8>)
100098c4:	4b55      	ldr	r3, [pc, #340]	; (10009a1c <ble_slave_security_request_handler+0x1dc>)
100098c6:	4798      	blx	r3
				return AT_BLE_FAILURE;
100098c8:	20e2      	movs	r0, #226	; 0xe2
100098ca:	e095      	b.n	100099f8 <ble_slave_security_request_handler+0x1b8>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
100098cc:	015a      	lsls	r2, r3, #5
100098ce:	1ad3      	subs	r3, r2, r3
100098d0:	009b      	lsls	r3, r3, #2
100098d2:	4a4d      	ldr	r2, [pc, #308]	; (10009a08 <ble_slave_security_request_handler+0x1c8>)
100098d4:	18d3      	adds	r3, r2, r3
100098d6:	335e      	adds	r3, #94	; 0x5e
100098d8:	2202      	movs	r2, #2
100098da:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
100098dc:	8825      	ldrh	r5, [r4, #0]
100098de:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100098e0:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
100098e2:	0016      	movs	r6, r2
100098e4:	8908      	ldrh	r0, [r1, #8]
100098e6:	42a8      	cmp	r0, r5
100098e8:	d10d      	bne.n	10009906 <ble_slave_security_request_handler+0xc6>
100098ea:	0008      	movs	r0, r1
100098ec:	305e      	adds	r0, #94	; 0x5e
100098ee:	7800      	ldrb	r0, [r0, #0]
100098f0:	2802      	cmp	r0, #2
100098f2:	d108      	bne.n	10009906 <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
100098f4:	0152      	lsls	r2, r2, #5
100098f6:	1b92      	subs	r2, r2, r6
100098f8:	0096      	lsls	r6, r2, #2
100098fa:	4a43      	ldr	r2, [pc, #268]	; (10009a08 <ble_slave_security_request_handler+0x1c8>)
100098fc:	1992      	adds	r2, r2, r6
100098fe:	325e      	adds	r2, #94	; 0x5e
10009900:	2103      	movs	r1, #3
10009902:	7011      	strb	r1, [r2, #0]
			break;
10009904:	e005      	b.n	10009912 <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009906:	3301      	adds	r3, #1
10009908:	b2db      	uxtb	r3, r3
1000990a:	3201      	adds	r2, #1
1000990c:	317c      	adds	r1, #124	; 0x7c
1000990e:	2b05      	cmp	r3, #5
10009910:	d1e7      	bne.n	100098e2 <ble_slave_security_request_handler+0xa2>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
10009912:	aa01      	add	r2, sp, #4
10009914:	2102      	movs	r1, #2
10009916:	7211      	strb	r1, [r2, #8]
	features.bond = slave_sec_req->bond;
10009918:	78e1      	ldrb	r1, [r4, #3]
1000991a:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000991c:	2101      	movs	r1, #1
1000991e:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
10009920:	3103      	adds	r1, #3
10009922:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
10009924:	001f      	movs	r7, r3
10009926:	015a      	lsls	r2, r3, #5
10009928:	1ad2      	subs	r2, r2, r3
1000992a:	0092      	lsls	r2, r2, #2
1000992c:	4936      	ldr	r1, [pc, #216]	; (10009a08 <ble_slave_security_request_handler+0x1c8>)
1000992e:	5c52      	ldrb	r2, [r2, r1]
10009930:	2a02      	cmp	r2, #2
10009932:	d104      	bne.n	1000993e <ble_slave_security_request_handler+0xfe>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009934:	aa01      	add	r2, sp, #4
10009936:	2103      	movs	r1, #3
10009938:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000993a:	71d1      	strb	r1, [r2, #7]
1000993c:	e003      	b.n	10009946 <ble_slave_security_request_handler+0x106>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000993e:	aa01      	add	r2, sp, #4
10009940:	2101      	movs	r1, #1
10009942:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
10009944:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
10009946:	aa01      	add	r2, sp, #4
10009948:	2110      	movs	r1, #16
1000994a:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000994c:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000994e:	017a      	lsls	r2, r7, #5
10009950:	1bd2      	subs	r2, r2, r7
10009952:	0092      	lsls	r2, r2, #2
10009954:	492c      	ldr	r1, [pc, #176]	; (10009a08 <ble_slave_security_request_handler+0x1c8>)
10009956:	188a      	adds	r2, r1, r2
10009958:	7e12      	ldrb	r2, [r2, #24]
1000995a:	2a40      	cmp	r2, #64	; 0x40
1000995c:	d134      	bne.n	100099c8 <ble_slave_security_request_handler+0x188>
1000995e:	015a      	lsls	r2, r3, #5
10009960:	1ad3      	subs	r3, r2, r3
10009962:	009b      	lsls	r3, r3, #2
10009964:	469a      	mov	sl, r3
10009966:	001e      	movs	r6, r3
10009968:	3660      	adds	r6, #96	; 0x60
1000996a:	1876      	adds	r6, r6, r1
1000996c:	4655      	mov	r5, sl
1000996e:	3568      	adds	r5, #104	; 0x68
10009970:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009972:	4b2b      	ldr	r3, [pc, #172]	; (10009a20 <ble_slave_security_request_handler+0x1e0>)
10009974:	4699      	mov	r9, r3
10009976:	230f      	movs	r3, #15
10009978:	4698      	mov	r8, r3
1000997a:	47c8      	blx	r9
1000997c:	4643      	mov	r3, r8
1000997e:	4018      	ands	r0, r3
10009980:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
10009982:	47c8      	blx	r9
10009984:	4643      	mov	r3, r8
10009986:	4018      	ands	r0, r3
10009988:	74b0      	strb	r0, [r6, #18]
1000998a:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000998c:	42ae      	cmp	r6, r5
1000998e:	d1f4      	bne.n	1000997a <ble_slave_security_request_handler+0x13a>
10009990:	4656      	mov	r6, sl
10009992:	3670      	adds	r6, #112	; 0x70
10009994:	4a1c      	ldr	r2, [pc, #112]	; (10009a08 <ble_slave_security_request_handler+0x1c8>)
10009996:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009998:	4b21      	ldr	r3, [pc, #132]	; (10009a20 <ble_slave_security_request_handler+0x1e0>)
1000999a:	4699      	mov	r9, r3
1000999c:	230f      	movs	r3, #15
1000999e:	4698      	mov	r8, r3
100099a0:	47c8      	blx	r9
100099a2:	4643      	mov	r3, r8
100099a4:	4018      	ands	r0, r3
100099a6:	7028      	strb	r0, [r5, #0]
100099a8:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
100099aa:	42b5      	cmp	r5, r6
100099ac:	d1f8      	bne.n	100099a0 <ble_slave_security_request_handler+0x160>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
100099ae:	4b1c      	ldr	r3, [pc, #112]	; (10009a20 <ble_slave_security_request_handler+0x1e0>)
100099b0:	4798      	blx	r3
100099b2:	017b      	lsls	r3, r7, #5
100099b4:	1bdb      	subs	r3, r3, r7
100099b6:	009b      	lsls	r3, r3, #2
100099b8:	4a13      	ldr	r2, [pc, #76]	; (10009a08 <ble_slave_security_request_handler+0x1c8>)
100099ba:	18d3      	adds	r3, r2, r3
100099bc:	001a      	movs	r2, r3
100099be:	3270      	adds	r2, #112	; 0x70
100099c0:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
100099c2:	337a      	adds	r3, #122	; 0x7a
100099c4:	2210      	movs	r2, #16
100099c6:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
100099c8:	017a      	lsls	r2, r7, #5
100099ca:	1bd7      	subs	r7, r2, r7
100099cc:	00bf      	lsls	r7, r7, #2
100099ce:	3760      	adds	r7, #96	; 0x60
100099d0:	4a0d      	ldr	r2, [pc, #52]	; (10009a08 <ble_slave_security_request_handler+0x1c8>)
100099d2:	18ba      	adds	r2, r7, r2
100099d4:	8820      	ldrh	r0, [r4, #0]
100099d6:	2300      	movs	r3, #0
100099d8:	a901      	add	r1, sp, #4
100099da:	4c12      	ldr	r4, [pc, #72]	; (10009a24 <ble_slave_security_request_handler+0x1e4>)
100099dc:	47a0      	blx	r4
100099de:	2800      	cmp	r0, #0
100099e0:	d00a      	beq.n	100099f8 <ble_slave_security_request_handler+0x1b8>
	{
		features.bond = false;
100099e2:	ab01      	add	r3, sp, #4
100099e4:	2200      	movs	r2, #0
100099e6:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
100099e8:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
100099ea:	4809      	ldr	r0, [pc, #36]	; (10009a10 <ble_slave_security_request_handler+0x1d0>)
100099ec:	4b09      	ldr	r3, [pc, #36]	; (10009a14 <ble_slave_security_request_handler+0x1d4>)
100099ee:	4798      	blx	r3
100099f0:	480d      	ldr	r0, [pc, #52]	; (10009a28 <ble_slave_security_request_handler+0x1e8>)
100099f2:	4b0a      	ldr	r3, [pc, #40]	; (10009a1c <ble_slave_security_request_handler+0x1dc>)
100099f4:	4798      	blx	r3
		return AT_BLE_FAILURE;
100099f6:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
100099f8:	b004      	add	sp, #16
100099fa:	bc1c      	pop	{r2, r3, r4}
100099fc:	4690      	mov	r8, r2
100099fe:	4699      	mov	r9, r3
10009a00:	46a2      	mov	sl, r4
10009a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009a04:	1000fa2d 	.word	0x1000fa2d
10009a08:	10013548 	.word	0x10013548
10009a0c:	1000ce29 	.word	0x1000ce29
10009a10:	10010e28 	.word	0x10010e28
10009a14:	1000fb5d 	.word	0x1000fb5d
10009a18:	100111e4 	.word	0x100111e4
10009a1c:	1000fa3d 	.word	0x1000fa3d
10009a20:	1000fb71 	.word	0x1000fb71
10009a24:	1000cc3d 	.word	0x1000cc3d
10009a28:	100111fc 	.word	0x100111fc

10009a2c <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
10009a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
10009a2e:	465f      	mov	r7, fp
10009a30:	4656      	mov	r6, sl
10009a32:	464d      	mov	r5, r9
10009a34:	4644      	mov	r4, r8
10009a36:	b4f0      	push	{r4, r5, r6, r7}
10009a38:	b085      	sub	sp, #20
10009a3a:	4683      	mov	fp, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009a3c:	8804      	ldrh	r4, [r0, #0]
10009a3e:	4a49      	ldr	r2, [pc, #292]	; (10009b64 <ble_pair_request_handler+0x138>)
10009a40:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009a42:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009a44:	8910      	ldrh	r0, [r2, #8]
10009a46:	42a0      	cmp	r0, r4
10009a48:	d10d      	bne.n	10009a66 <ble_pair_request_handler+0x3a>
10009a4a:	0010      	movs	r0, r2
10009a4c:	305e      	adds	r0, #94	; 0x5e
10009a4e:	7800      	ldrb	r0, [r0, #0]
10009a50:	2802      	cmp	r0, #2
10009a52:	d108      	bne.n	10009a66 <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
10009a54:	014a      	lsls	r2, r1, #5
10009a56:	1a52      	subs	r2, r2, r1
10009a58:	0095      	lsls	r5, r2, #2
10009a5a:	4a42      	ldr	r2, [pc, #264]	; (10009b64 <ble_pair_request_handler+0x138>)
10009a5c:	1952      	adds	r2, r2, r5
10009a5e:	325e      	adds	r2, #94	; 0x5e
10009a60:	2103      	movs	r1, #3
10009a62:	7011      	strb	r1, [r2, #0]
			break;
10009a64:	e005      	b.n	10009a72 <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009a66:	3301      	adds	r3, #1
10009a68:	b2db      	uxtb	r3, r3
10009a6a:	3101      	adds	r1, #1
10009a6c:	327c      	adds	r2, #124	; 0x7c
10009a6e:	2b05      	cmp	r3, #5
10009a70:	d1e8      	bne.n	10009a44 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
10009a72:	aa01      	add	r2, sp, #4
10009a74:	2102      	movs	r1, #2
10009a76:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
10009a78:	3901      	subs	r1, #1
10009a7a:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
10009a7c:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
10009a7e:	2100      	movs	r1, #0
10009a80:	7011      	strb	r1, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
10009a82:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
10009a84:	001f      	movs	r7, r3
10009a86:	015a      	lsls	r2, r3, #5
10009a88:	1ad2      	subs	r2, r2, r3
10009a8a:	0092      	lsls	r2, r2, #2
10009a8c:	4935      	ldr	r1, [pc, #212]	; (10009b64 <ble_pair_request_handler+0x138>)
10009a8e:	5c52      	ldrb	r2, [r2, r1]
10009a90:	2a02      	cmp	r2, #2
10009a92:	d104      	bne.n	10009a9e <ble_pair_request_handler+0x72>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009a94:	aa01      	add	r2, sp, #4
10009a96:	2103      	movs	r1, #3
10009a98:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009a9a:	71d1      	strb	r1, [r2, #7]
10009a9c:	e003      	b.n	10009aa6 <ble_pair_request_handler+0x7a>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
10009a9e:	aa01      	add	r2, sp, #4
10009aa0:	2101      	movs	r1, #1
10009aa2:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
10009aa4:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
10009aa6:	aa01      	add	r2, sp, #4
10009aa8:	2110      	movs	r1, #16
10009aaa:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
10009aac:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
10009aae:	017a      	lsls	r2, r7, #5
10009ab0:	1bd2      	subs	r2, r2, r7
10009ab2:	0092      	lsls	r2, r2, #2
10009ab4:	492b      	ldr	r1, [pc, #172]	; (10009b64 <ble_pair_request_handler+0x138>)
10009ab6:	188a      	adds	r2, r1, r2
10009ab8:	7e12      	ldrb	r2, [r2, #24]
10009aba:	2a40      	cmp	r2, #64	; 0x40
10009abc:	d131      	bne.n	10009b22 <ble_pair_request_handler+0xf6>
10009abe:	015a      	lsls	r2, r3, #5
10009ac0:	1ad3      	subs	r3, r2, r3
10009ac2:	009b      	lsls	r3, r3, #2
10009ac4:	469a      	mov	sl, r3
10009ac6:	001d      	movs	r5, r3
10009ac8:	3560      	adds	r5, #96	; 0x60
10009aca:	186d      	adds	r5, r5, r1
10009acc:	4654      	mov	r4, sl
10009ace:	3468      	adds	r4, #104	; 0x68
10009ad0:	1864      	adds	r4, r4, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009ad2:	4b25      	ldr	r3, [pc, #148]	; (10009b68 <ble_pair_request_handler+0x13c>)
10009ad4:	4699      	mov	r9, r3
10009ad6:	260f      	movs	r6, #15
10009ad8:	47c8      	blx	r9
10009ada:	4030      	ands	r0, r6
10009adc:	7028      	strb	r0, [r5, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
10009ade:	47c8      	blx	r9
10009ae0:	4030      	ands	r0, r6
10009ae2:	74a8      	strb	r0, [r5, #18]
10009ae4:	3501      	adds	r5, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
10009ae6:	42a5      	cmp	r5, r4
10009ae8:	d1f6      	bne.n	10009ad8 <ble_pair_request_handler+0xac>
10009aea:	4655      	mov	r5, sl
10009aec:	3570      	adds	r5, #112	; 0x70
10009aee:	4a1d      	ldr	r2, [pc, #116]	; (10009b64 <ble_pair_request_handler+0x138>)
10009af0:	18ad      	adds	r5, r5, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009af2:	4b1d      	ldr	r3, [pc, #116]	; (10009b68 <ble_pair_request_handler+0x13c>)
10009af4:	4699      	mov	r9, r3
10009af6:	230f      	movs	r3, #15
10009af8:	4698      	mov	r8, r3
10009afa:	47c8      	blx	r9
10009afc:	4643      	mov	r3, r8
10009afe:	4018      	ands	r0, r3
10009b00:	7020      	strb	r0, [r4, #0]
10009b02:	3401      	adds	r4, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
10009b04:	42ac      	cmp	r4, r5
10009b06:	d1f8      	bne.n	10009afa <ble_pair_request_handler+0xce>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
10009b08:	4b17      	ldr	r3, [pc, #92]	; (10009b68 <ble_pair_request_handler+0x13c>)
10009b0a:	4798      	blx	r3
10009b0c:	017b      	lsls	r3, r7, #5
10009b0e:	1bdb      	subs	r3, r3, r7
10009b10:	009b      	lsls	r3, r3, #2
10009b12:	4a14      	ldr	r2, [pc, #80]	; (10009b64 <ble_pair_request_handler+0x138>)
10009b14:	18d3      	adds	r3, r2, r3
10009b16:	001a      	movs	r2, r3
10009b18:	3270      	adds	r2, #112	; 0x70
10009b1a:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
10009b1c:	337a      	adds	r3, #122	; 0x7a
10009b1e:	2210      	movs	r2, #16
10009b20:	701a      	strb	r2, [r3, #0]
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
10009b22:	017a      	lsls	r2, r7, #5
10009b24:	1bd7      	subs	r7, r2, r7
10009b26:	00bf      	lsls	r7, r7, #2
10009b28:	3760      	adds	r7, #96	; 0x60
10009b2a:	4a0e      	ldr	r2, [pc, #56]	; (10009b64 <ble_pair_request_handler+0x138>)
10009b2c:	18ba      	adds	r2, r7, r2
10009b2e:	465b      	mov	r3, fp
10009b30:	8818      	ldrh	r0, [r3, #0]
10009b32:	2300      	movs	r3, #0
10009b34:	a901      	add	r1, sp, #4
10009b36:	4c0d      	ldr	r4, [pc, #52]	; (10009b6c <ble_pair_request_handler+0x140>)
10009b38:	47a0      	blx	r4
10009b3a:	2800      	cmp	r0, #0
10009b3c:	d00a      	beq.n	10009b54 <ble_pair_request_handler+0x128>
	{
		features.bond = false;
10009b3e:	ab01      	add	r3, sp, #4
10009b40:	2200      	movs	r2, #0
10009b42:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
10009b44:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
10009b46:	480a      	ldr	r0, [pc, #40]	; (10009b70 <ble_pair_request_handler+0x144>)
10009b48:	4b0a      	ldr	r3, [pc, #40]	; (10009b74 <ble_pair_request_handler+0x148>)
10009b4a:	4798      	blx	r3
10009b4c:	480a      	ldr	r0, [pc, #40]	; (10009b78 <ble_pair_request_handler+0x14c>)
10009b4e:	4b0b      	ldr	r3, [pc, #44]	; (10009b7c <ble_pair_request_handler+0x150>)
10009b50:	4798      	blx	r3
		return AT_BLE_FAILURE;
10009b52:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
10009b54:	b005      	add	sp, #20
10009b56:	bc3c      	pop	{r2, r3, r4, r5}
10009b58:	4690      	mov	r8, r2
10009b5a:	4699      	mov	r9, r3
10009b5c:	46a2      	mov	sl, r4
10009b5e:	46ab      	mov	fp, r5
10009b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009b62:	46c0      	nop			; (mov r8, r8)
10009b64:	10013548 	.word	0x10013548
10009b68:	1000fb71 	.word	0x1000fb71
10009b6c:	1000cc3d 	.word	0x1000cc3d
10009b70:	10010e28 	.word	0x10010e28
10009b74:	1000fb5d 	.word	0x1000fb5d
10009b78:	10011228 	.word	0x10011228
10009b7c:	1000fa3d 	.word	0x1000fa3d

10009b80 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
10009b80:	b5f0      	push	{r4, r5, r6, r7, lr}
10009b82:	b085      	sub	sp, #20
10009b84:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
10009b86:	2206      	movs	r2, #6
10009b88:	493d      	ldr	r1, [pc, #244]	; (10009c80 <ble_pair_key_request_handler+0x100>)
10009b8a:	a802      	add	r0, sp, #8
10009b8c:	4e3d      	ldr	r6, [pc, #244]	; (10009c84 <ble_pair_key_request_handler+0x104>)
10009b8e:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
10009b90:	ac01      	add	r4, sp, #4
10009b92:	2204      	movs	r2, #4
10009b94:	0029      	movs	r1, r5
10009b96:	0020      	movs	r0, r4
10009b98:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
10009b9a:	78e3      	ldrb	r3, [r4, #3]
10009b9c:	2b00      	cmp	r3, #0
10009b9e:	d162      	bne.n	10009c66 <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
10009ba0:	4839      	ldr	r0, [pc, #228]	; (10009c88 <ble_pair_key_request_handler+0x108>)
10009ba2:	4b3a      	ldr	r3, [pc, #232]	; (10009c8c <ble_pair_key_request_handler+0x10c>)
10009ba4:	4798      	blx	r3
10009ba6:	483a      	ldr	r0, [pc, #232]	; (10009c90 <ble_pair_key_request_handler+0x110>)
10009ba8:	4b3a      	ldr	r3, [pc, #232]	; (10009c94 <ble_pair_key_request_handler+0x114>)
10009baa:	4798      	blx	r3
10009bac:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
10009bae:	4c3a      	ldr	r4, [pc, #232]	; (10009c98 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
10009bb0:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
10009bb2:	201e      	movs	r0, #30
10009bb4:	47a0      	blx	r4
10009bb6:	b2c3      	uxtb	r3, r0

			if (!pin) {
10009bb8:	2b00      	cmp	r3, #0
10009bba:	d11a      	bne.n	10009bf2 <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
10009bbc:	4f32      	ldr	r7, [pc, #200]	; (10009c88 <ble_pair_key_request_handler+0x108>)
10009bbe:	0038      	movs	r0, r7
10009bc0:	4e32      	ldr	r6, [pc, #200]	; (10009c8c <ble_pair_key_request_handler+0x10c>)
10009bc2:	47b0      	blx	r6
10009bc4:	4835      	ldr	r0, [pc, #212]	; (10009c9c <ble_pair_key_request_handler+0x11c>)
10009bc6:	4c33      	ldr	r4, [pc, #204]	; (10009c94 <ble_pair_key_request_handler+0x114>)
10009bc8:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
10009bca:	0038      	movs	r0, r7
10009bcc:	47b0      	blx	r6
10009bce:	4834      	ldr	r0, [pc, #208]	; (10009ca0 <ble_pair_key_request_handler+0x120>)
10009bd0:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
10009bd2:	8828      	ldrh	r0, [r5, #0]
10009bd4:	2113      	movs	r1, #19
10009bd6:	4b33      	ldr	r3, [pc, #204]	; (10009ca4 <ble_pair_key_request_handler+0x124>)
10009bd8:	4798      	blx	r3
10009bda:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
10009bdc:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
10009bde:	2b00      	cmp	r3, #0
10009be0:	d04c      	beq.n	10009c7c <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
10009be2:	4829      	ldr	r0, [pc, #164]	; (10009c88 <ble_pair_key_request_handler+0x108>)
10009be4:	4b29      	ldr	r3, [pc, #164]	; (10009c8c <ble_pair_key_request_handler+0x10c>)
10009be6:	4798      	blx	r3
10009be8:	482f      	ldr	r0, [pc, #188]	; (10009ca8 <ble_pair_key_request_handler+0x128>)
10009bea:	4b2a      	ldr	r3, [pc, #168]	; (10009c94 <ble_pair_key_request_handler+0x114>)
10009bec:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
10009bee:	20e2      	movs	r0, #226	; 0xe2
10009bf0:	e044      	b.n	10009c7c <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
10009bf2:	001a      	movs	r2, r3
10009bf4:	3a30      	subs	r2, #48	; 0x30
10009bf6:	2a09      	cmp	r2, #9
10009bf8:	d8db      	bhi.n	10009bb2 <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
10009bfa:	aa02      	add	r2, sp, #8
10009bfc:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
10009bfe:	4038      	ands	r0, r7
10009c00:	4b2a      	ldr	r3, [pc, #168]	; (10009cac <ble_pair_key_request_handler+0x12c>)
10009c02:	4798      	blx	r3
10009c04:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
10009c06:	2e06      	cmp	r6, #6
10009c08:	d026      	beq.n	10009c58 <ble_pair_key_request_handler+0xd8>
10009c0a:	e7d2      	b.n	10009bb2 <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
10009c0c:	481e      	ldr	r0, [pc, #120]	; (10009c88 <ble_pair_key_request_handler+0x108>)
10009c0e:	4b1f      	ldr	r3, [pc, #124]	; (10009c8c <ble_pair_key_request_handler+0x10c>)
10009c10:	4798      	blx	r3
10009c12:	4827      	ldr	r0, [pc, #156]	; (10009cb0 <ble_pair_key_request_handler+0x130>)
10009c14:	4b1f      	ldr	r3, [pc, #124]	; (10009c94 <ble_pair_key_request_handler+0x114>)
10009c16:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
10009c18:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
10009c1a:	4e24      	ldr	r6, [pc, #144]	; (10009cac <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
10009c1c:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
10009c1e:	5ce0      	ldrb	r0, [r4, r3]
10009c20:	47b0      	blx	r6
10009c22:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
10009c24:	2c06      	cmp	r4, #6
10009c26:	d1f9      	bne.n	10009c1c <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
10009c28:	ab01      	add	r3, sp, #4
10009c2a:	7899      	ldrb	r1, [r3, #2]
10009c2c:	8828      	ldrh	r0, [r5, #0]
10009c2e:	aa02      	add	r2, sp, #8
10009c30:	4b20      	ldr	r3, [pc, #128]	; (10009cb4 <ble_pair_key_request_handler+0x134>)
10009c32:	4798      	blx	r3
10009c34:	2800      	cmp	r0, #0
10009c36:	d021      	beq.n	10009c7c <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
10009c38:	4813      	ldr	r0, [pc, #76]	; (10009c88 <ble_pair_key_request_handler+0x108>)
10009c3a:	4b14      	ldr	r3, [pc, #80]	; (10009c8c <ble_pair_key_request_handler+0x10c>)
10009c3c:	4798      	blx	r3
10009c3e:	481e      	ldr	r0, [pc, #120]	; (10009cb8 <ble_pair_key_request_handler+0x138>)
10009c40:	4b14      	ldr	r3, [pc, #80]	; (10009c94 <ble_pair_key_request_handler+0x114>)
10009c42:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
10009c44:	2000      	movs	r0, #0
10009c46:	e019      	b.n	10009c7c <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
10009c48:	480f      	ldr	r0, [pc, #60]	; (10009c88 <ble_pair_key_request_handler+0x108>)
10009c4a:	4b10      	ldr	r3, [pc, #64]	; (10009c8c <ble_pair_key_request_handler+0x10c>)
10009c4c:	4798      	blx	r3
10009c4e:	481b      	ldr	r0, [pc, #108]	; (10009cbc <ble_pair_key_request_handler+0x13c>)
10009c50:	4b10      	ldr	r3, [pc, #64]	; (10009c94 <ble_pair_key_request_handler+0x114>)
10009c52:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
10009c54:	2000      	movs	r0, #0
10009c56:	e011      	b.n	10009c7c <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
10009c58:	480b      	ldr	r0, [pc, #44]	; (10009c88 <ble_pair_key_request_handler+0x108>)
10009c5a:	4b0c      	ldr	r3, [pc, #48]	; (10009c8c <ble_pair_key_request_handler+0x10c>)
10009c5c:	4798      	blx	r3
10009c5e:	4818      	ldr	r0, [pc, #96]	; (10009cc0 <ble_pair_key_request_handler+0x140>)
10009c60:	4b0c      	ldr	r3, [pc, #48]	; (10009c94 <ble_pair_key_request_handler+0x114>)
10009c62:	4798      	blx	r3
10009c64:	e7d8      	b.n	10009c18 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
10009c66:	ab01      	add	r3, sp, #4
10009c68:	885a      	ldrh	r2, [r3, #2]
10009c6a:	2380      	movs	r3, #128	; 0x80
10009c6c:	005b      	lsls	r3, r3, #1
10009c6e:	429a      	cmp	r2, r3
10009c70:	d0cc      	beq.n	10009c0c <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
10009c72:	ab01      	add	r3, sp, #4
10009c74:	789b      	ldrb	r3, [r3, #2]
10009c76:	2b01      	cmp	r3, #1
10009c78:	d0e6      	beq.n	10009c48 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
10009c7a:	2000      	movs	r0, #0
}
10009c7c:	b005      	add	sp, #20
10009c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009c80:	10010fdc 	.word	0x10010fdc
10009c84:	1000fa1b 	.word	0x1000fa1b
10009c88:	10010e28 	.word	0x10010e28
10009c8c:	1000fb5d 	.word	0x1000fb5d
10009c90:	10011250 	.word	0x10011250
10009c94:	1000fa3d 	.word	0x1000fa3d
10009c98:	1000a8d5 	.word	0x1000a8d5
10009c9c:	10011278 	.word	0x10011278
10009ca0:	10011284 	.word	0x10011284
10009ca4:	1000c245 	.word	0x1000c245
10009ca8:	1001116c 	.word	0x1001116c
10009cac:	1000fa71 	.word	0x1000fa71
10009cb0:	10011298 	.word	0x10011298
10009cb4:	1000cd6d 	.word	0x1000cd6d
10009cb8:	100112d0 	.word	0x100112d0
10009cbc:	100112e8 	.word	0x100112e8
10009cc0:	10011304 	.word	0x10011304

10009cc4 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
10009cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009cc6:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
10009cc8:	8805      	ldrh	r5, [r0, #0]
10009cca:	4b2f      	ldr	r3, [pc, #188]	; (10009d88 <ble_encryption_request_handler+0xc4>)
10009ccc:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009cce:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
10009cd0:	0010      	movs	r0, r2
10009cd2:	8919      	ldrh	r1, [r3, #8]
10009cd4:	42a9      	cmp	r1, r5
10009cd6:	d116      	bne.n	10009d06 <ble_encryption_request_handler+0x42>
10009cd8:	0019      	movs	r1, r3
10009cda:	315e      	adds	r1, #94	; 0x5e
10009cdc:	7809      	ldrb	r1, [r1, #0]
10009cde:	2901      	cmp	r1, #1
10009ce0:	d911      	bls.n	10009d06 <ble_encryption_request_handler+0x42>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
10009ce2:	4929      	ldr	r1, [pc, #164]	; (10009d88 <ble_encryption_request_handler+0xc4>)
10009ce4:	0152      	lsls	r2, r2, #5
10009ce6:	1a10      	subs	r0, r2, r0
10009ce8:	0080      	lsls	r0, r0, #2
10009cea:	1808      	adds	r0, r1, r0
10009cec:	305e      	adds	r0, #94	; 0x5e
10009cee:	2306      	movs	r3, #6
10009cf0:	7003      	strb	r3, [r0, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
10009cf2:	0162      	lsls	r2, r4, #5
10009cf4:	1b13      	subs	r3, r2, r4
10009cf6:	009b      	lsls	r3, r3, #2
10009cf8:	18cb      	adds	r3, r1, r3
10009cfa:	3370      	adds	r3, #112	; 0x70
10009cfc:	881a      	ldrh	r2, [r3, #0]
10009cfe:	8873      	ldrh	r3, [r6, #2]
10009d00:	429a      	cmp	r2, r3
10009d02:	d113      	bne.n	10009d2c <ble_encryption_request_handler+0x68>
10009d04:	e006      	b.n	10009d14 <ble_encryption_request_handler+0x50>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009d06:	3401      	adds	r4, #1
10009d08:	b2e4      	uxtb	r4, r4
10009d0a:	3201      	adds	r2, #1
10009d0c:	337c      	adds	r3, #124	; 0x7c
10009d0e:	2c05      	cmp	r4, #5
10009d10:	d1de      	bne.n	10009cd0 <ble_encryption_request_handler+0xc>
10009d12:	e00b      	b.n	10009d2c <ble_encryption_request_handler+0x68>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
10009d14:	0161      	lsls	r1, r4, #5
10009d16:	1b09      	subs	r1, r1, r4
10009d18:	0089      	lsls	r1, r1, #2
10009d1a:	4b1b      	ldr	r3, [pc, #108]	; (10009d88 <ble_encryption_request_handler+0xc4>)
10009d1c:	1859      	adds	r1, r3, r1
10009d1e:	3172      	adds	r1, #114	; 0x72
10009d20:	1d30      	adds	r0, r6, #4
10009d22:	2208      	movs	r2, #8
10009d24:	4b19      	ldr	r3, [pc, #100]	; (10009d8c <ble_encryption_request_handler+0xc8>)
10009d26:	4798      	blx	r3
			DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
10009d28:	2800      	cmp	r0, #0
10009d2a:	d015      	beq.n	10009d58 <ble_encryption_request_handler+0x94>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
10009d2c:	4f18      	ldr	r7, [pc, #96]	; (10009d90 <ble_encryption_request_handler+0xcc>)
10009d2e:	0038      	movs	r0, r7
10009d30:	4e18      	ldr	r6, [pc, #96]	; (10009d94 <ble_encryption_request_handler+0xd0>)
10009d32:	47b0      	blx	r6
10009d34:	4818      	ldr	r0, [pc, #96]	; (10009d98 <ble_encryption_request_handler+0xd4>)
10009d36:	4d19      	ldr	r5, [pc, #100]	; (10009d9c <ble_encryption_request_handler+0xd8>)
10009d38:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
10009d3a:	0038      	movs	r0, r7
10009d3c:	47b0      	blx	r6
10009d3e:	4818      	ldr	r0, [pc, #96]	; (10009da0 <ble_encryption_request_handler+0xdc>)
10009d40:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
10009d42:	0163      	lsls	r3, r4, #5
10009d44:	1b1c      	subs	r4, r3, r4
10009d46:	00a4      	lsls	r4, r4, #2
10009d48:	4b0f      	ldr	r3, [pc, #60]	; (10009d88 <ble_encryption_request_handler+0xc4>)
10009d4a:	191c      	adds	r4, r3, r4
10009d4c:	8920      	ldrh	r0, [r4, #8]
10009d4e:	2105      	movs	r1, #5
10009d50:	4b14      	ldr	r3, [pc, #80]	; (10009da4 <ble_encryption_request_handler+0xe0>)
10009d52:	4798      	blx	r3
		return AT_BLE_FAILURE;
10009d54:	20e2      	movs	r0, #226	; 0xe2
10009d56:	e016      	b.n	10009d86 <ble_encryption_request_handler+0xc2>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
10009d58:	0162      	lsls	r2, r4, #5
10009d5a:	1b13      	subs	r3, r2, r4
10009d5c:	009b      	lsls	r3, r3, #2
10009d5e:	3360      	adds	r3, #96	; 0x60
10009d60:	4909      	ldr	r1, [pc, #36]	; (10009d88 <ble_encryption_request_handler+0xc4>)
10009d62:	185b      	adds	r3, r3, r1
10009d64:	1b14      	subs	r4, r2, r4
10009d66:	00a4      	lsls	r4, r4, #2
10009d68:	190c      	adds	r4, r1, r4
10009d6a:	7d21      	ldrb	r1, [r4, #20]
10009d6c:	8830      	ldrh	r0, [r6, #0]
10009d6e:	2201      	movs	r2, #1
10009d70:	4c0d      	ldr	r4, [pc, #52]	; (10009da8 <ble_encryption_request_handler+0xe4>)
10009d72:	47a0      	blx	r4
10009d74:	2800      	cmp	r0, #0
10009d76:	d006      	beq.n	10009d86 <ble_encryption_request_handler+0xc2>
	{
		DBG_LOG("Encryption Request Reply Failed");
10009d78:	4805      	ldr	r0, [pc, #20]	; (10009d90 <ble_encryption_request_handler+0xcc>)
10009d7a:	4b06      	ldr	r3, [pc, #24]	; (10009d94 <ble_encryption_request_handler+0xd0>)
10009d7c:	4798      	blx	r3
10009d7e:	480b      	ldr	r0, [pc, #44]	; (10009dac <ble_encryption_request_handler+0xe8>)
10009d80:	4b06      	ldr	r3, [pc, #24]	; (10009d9c <ble_encryption_request_handler+0xd8>)
10009d82:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
10009d84:	2000      	movs	r0, #0
}
10009d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009d88:	10013548 	.word	0x10013548
10009d8c:	1000f9fd 	.word	0x1000f9fd
10009d90:	10010e28 	.word	0x10010e28
10009d94:	1000fb5d 	.word	0x1000fb5d
10009d98:	10011318 	.word	0x10011318
10009d9c:	1000fa3d 	.word	0x1000fa3d
10009da0:	10011350 	.word	0x10011350
10009da4:	1000c245 	.word	0x1000c245
10009da8:	1000cea1 	.word	0x1000cea1
10009dac:	100113a8 	.word	0x100113a8

10009db0 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
10009db0:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
10009db2:	2a00      	cmp	r2, #0
10009db4:	d047      	beq.n	10009e46 <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
10009db6:	2906      	cmp	r1, #6
10009db8:	d847      	bhi.n	10009e4a <ble_mgr_events_callback_handler+0x9a>
10009dba:	0089      	lsls	r1, r1, #2
10009dbc:	4b28      	ldr	r3, [pc, #160]	; (10009e60 <ble_mgr_events_callback_handler+0xb0>)
10009dbe:	585b      	ldr	r3, [r3, r1]
10009dc0:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
10009dc2:	4b28      	ldr	r3, [pc, #160]	; (10009e64 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
10009dc4:	2405      	movs	r4, #5
10009dc6:	e00a      	b.n	10009dde <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
10009dc8:	4b27      	ldr	r3, [pc, #156]	; (10009e68 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
10009dca:	2401      	movs	r4, #1
			}
			break;
10009dcc:	e007      	b.n	10009dde <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
10009dce:	4b27      	ldr	r3, [pc, #156]	; (10009e6c <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
10009dd0:	2405      	movs	r4, #5
			}
			break;
10009dd2:	e004      	b.n	10009dde <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
10009dd4:	4b26      	ldr	r3, [pc, #152]	; (10009e70 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
10009dd6:	2401      	movs	r4, #1
			}
			break;
10009dd8:	e001      	b.n	10009dde <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
10009dda:	4b26      	ldr	r3, [pc, #152]	; (10009e74 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
10009ddc:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
10009dde:	2800      	cmp	r0, #0
10009de0:	d116      	bne.n	10009e10 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
10009de2:	6819      	ldr	r1, [r3, #0]
10009de4:	2900      	cmp	r1, #0
10009de6:	d10b      	bne.n	10009e00 <ble_mgr_events_callback_handler+0x50>
10009de8:	e006      	b.n	10009df8 <ble_mgr_events_callback_handler+0x48>
10009dea:	001d      	movs	r5, r3
10009dec:	3304      	adds	r3, #4
10009dee:	1f18      	subs	r0, r3, #4
10009df0:	6800      	ldr	r0, [r0, #0]
10009df2:	2800      	cmp	r0, #0
10009df4:	d106      	bne.n	10009e04 <ble_mgr_events_callback_handler+0x54>
10009df6:	e000      	b.n	10009dfa <ble_mgr_events_callback_handler+0x4a>
10009df8:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
10009dfa:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
10009dfc:	2101      	movs	r1, #1
						break;
10009dfe:	e02c      	b.n	10009e5a <ble_mgr_events_callback_handler+0xaa>
10009e00:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
10009e02:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
10009e04:	3101      	adds	r1, #1
10009e06:	b2c9      	uxtb	r1, r1
10009e08:	42a1      	cmp	r1, r4
10009e0a:	d3ee      	bcc.n	10009dea <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
10009e0c:	2100      	movs	r1, #0
10009e0e:	e024      	b.n	10009e5a <ble_mgr_events_callback_handler+0xaa>
10009e10:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
10009e12:	2801      	cmp	r0, #1
10009e14:	d121      	bne.n	10009e5a <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
10009e16:	6819      	ldr	r1, [r3, #0]
10009e18:	428a      	cmp	r2, r1
10009e1a:	d10c      	bne.n	10009e36 <ble_mgr_events_callback_handler+0x86>
10009e1c:	e006      	b.n	10009e2c <ble_mgr_events_callback_handler+0x7c>
10009e1e:	001d      	movs	r5, r3
10009e20:	3304      	adds	r3, #4
10009e22:	1f18      	subs	r0, r3, #4
10009e24:	6800      	ldr	r0, [r0, #0]
10009e26:	4282      	cmp	r2, r0
10009e28:	d107      	bne.n	10009e3a <ble_mgr_events_callback_handler+0x8a>
10009e2a:	e000      	b.n	10009e2e <ble_mgr_events_callback_handler+0x7e>
10009e2c:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
10009e2e:	2300      	movs	r3, #0
10009e30:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
10009e32:	2101      	movs	r1, #1
						break;
10009e34:	e011      	b.n	10009e5a <ble_mgr_events_callback_handler+0xaa>
10009e36:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
10009e38:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
10009e3a:	3101      	adds	r1, #1
10009e3c:	b2c9      	uxtb	r1, r1
10009e3e:	42a1      	cmp	r1, r4
10009e40:	d3ed      	bcc.n	10009e1e <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
10009e42:	2100      	movs	r1, #0
10009e44:	e009      	b.n	10009e5a <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
10009e46:	2100      	movs	r1, #0
10009e48:	e007      	b.n	10009e5a <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
10009e4a:	2100      	movs	r1, #0
10009e4c:	e005      	b.n	10009e5a <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
10009e4e:	4b0a      	ldr	r3, [pc, #40]	; (10009e78 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
10009e50:	2405      	movs	r4, #5
10009e52:	e7c4      	b.n	10009dde <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
10009e54:	4b09      	ldr	r3, [pc, #36]	; (10009e7c <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
10009e56:	2401      	movs	r4, #1
10009e58:	e7c1      	b.n	10009dde <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
10009e5a:	0008      	movs	r0, r1
10009e5c:	bd30      	pop	{r4, r5, pc}
10009e5e:	46c0      	nop			; (mov r8, r8)
10009e60:	10010ed0 	.word	0x10010ed0
10009e64:	10013534 	.word	0x10013534
10009e68:	10013530 	.word	0x10013530
10009e6c:	100137b8 	.word	0x100137b8
10009e70:	10013d6c 	.word	0x10013d6c
10009e74:	100137cc 	.word	0x100137cc
10009e78:	100137e0 	.word	0x100137e0
10009e7c:	10013828 	.word	0x10013828

10009e80 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
10009e80:	b5f0      	push	{r4, r5, r6, r7, lr}
10009e82:	465f      	mov	r7, fp
10009e84:	4656      	mov	r6, sl
10009e86:	464d      	mov	r5, r9
10009e88:	4644      	mov	r4, r8
10009e8a:	b4f0      	push	{r4, r5, r6, r7}
10009e8c:	b091      	sub	sp, #68	; 0x44
10009e8e:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
10009e90:	2400      	movs	r4, #0
10009e92:	4b7e      	ldr	r3, [pc, #504]	; (1000a08c <ble_device_init+0x20c>)
10009e94:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
10009e96:	2207      	movs	r2, #7
10009e98:	2100      	movs	r1, #0
10009e9a:	487d      	ldr	r0, [pc, #500]	; (1000a090 <ble_device_init+0x210>)
10009e9c:	4e7d      	ldr	r6, [pc, #500]	; (1000a094 <ble_device_init+0x214>)
10009e9e:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
10009ea0:	2212      	movs	r2, #18
10009ea2:	2100      	movs	r1, #0
10009ea4:	487c      	ldr	r0, [pc, #496]	; (1000a098 <ble_device_init+0x218>)
10009ea6:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
10009ea8:	4a7c      	ldr	r2, [pc, #496]	; (1000a09c <ble_device_init+0x21c>)
10009eaa:	2100      	movs	r1, #0
10009eac:	487c      	ldr	r0, [pc, #496]	; (1000a0a0 <ble_device_init+0x220>)
10009eae:	47b0      	blx	r6
#endif

	scan_response_count = 0;
10009eb0:	4b7c      	ldr	r3, [pc, #496]	; (1000a0a4 <ble_device_init+0x224>)
10009eb2:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
10009eb4:	22cd      	movs	r2, #205	; 0xcd
10009eb6:	0092      	lsls	r2, r2, #2
10009eb8:	2100      	movs	r1, #0
10009eba:	487b      	ldr	r0, [pc, #492]	; (1000a0a8 <ble_device_init+0x228>)
10009ebc:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
10009ebe:	4b7b      	ldr	r3, [pc, #492]	; (1000a0ac <ble_device_init+0x22c>)
10009ec0:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
10009ec2:	2283      	movs	r2, #131	; 0x83
10009ec4:	0092      	lsls	r2, r2, #2
10009ec6:	2100      	movs	r1, #0
10009ec8:	4879      	ldr	r0, [pc, #484]	; (1000a0b0 <ble_device_init+0x230>)
10009eca:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
10009ecc:	4b79      	ldr	r3, [pc, #484]	; (1000a0b4 <ble_device_init+0x234>)
10009ece:	469b      	mov	fp, r3
10009ed0:	2380      	movs	r3, #128	; 0x80
10009ed2:	00db      	lsls	r3, r3, #3
10009ed4:	469a      	mov	sl, r3
10009ed6:	001a      	movs	r2, r3
10009ed8:	2100      	movs	r1, #0
10009eda:	4658      	mov	r0, fp
10009edc:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
10009ede:	4b76      	ldr	r3, [pc, #472]	; (1000a0b8 <ble_device_init+0x238>)
10009ee0:	4699      	mov	r9, r3
10009ee2:	2380      	movs	r3, #128	; 0x80
10009ee4:	015b      	lsls	r3, r3, #5
10009ee6:	4698      	mov	r8, r3
10009ee8:	001a      	movs	r2, r3
10009eea:	2100      	movs	r1, #0
10009eec:	4648      	mov	r0, r9
10009eee:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
10009ef0:	4f72      	ldr	r7, [pc, #456]	; (1000a0bc <ble_device_init+0x23c>)
10009ef2:	221c      	movs	r2, #28
10009ef4:	2100      	movs	r1, #0
10009ef6:	0038      	movs	r0, r7
10009ef8:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
10009efa:	465b      	mov	r3, fp
10009efc:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
10009efe:	4653      	mov	r3, sl
10009f00:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
10009f02:	464b      	mov	r3, r9
10009f04:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
10009f06:	4643      	mov	r3, r8
10009f08:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
10009f0a:	4b6d      	ldr	r3, [pc, #436]	; (1000a0c0 <ble_device_init+0x240>)
10009f0c:	601c      	str	r4, [r3, #0]
10009f0e:	605c      	str	r4, [r3, #4]
10009f10:	609c      	str	r4, [r3, #8]
10009f12:	60dc      	str	r4, [r3, #12]
10009f14:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
10009f16:	4b6b      	ldr	r3, [pc, #428]	; (1000a0c4 <ble_device_init+0x244>)
10009f18:	601c      	str	r4, [r3, #0]
10009f1a:	605c      	str	r4, [r3, #4]
10009f1c:	609c      	str	r4, [r3, #8]
10009f1e:	60dc      	str	r4, [r3, #12]
10009f20:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
10009f22:	4b69      	ldr	r3, [pc, #420]	; (1000a0c8 <ble_device_init+0x248>)
10009f24:	601c      	str	r4, [r3, #0]
10009f26:	605c      	str	r4, [r3, #4]
10009f28:	609c      	str	r4, [r3, #8]
10009f2a:	60dc      	str	r4, [r3, #12]
10009f2c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
10009f2e:	4b67      	ldr	r3, [pc, #412]	; (1000a0cc <ble_device_init+0x24c>)
10009f30:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
10009f32:	4b67      	ldr	r3, [pc, #412]	; (1000a0d0 <ble_device_init+0x250>)
10009f34:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
10009f36:	4b67      	ldr	r3, [pc, #412]	; (1000a0d4 <ble_device_init+0x254>)
10009f38:	601c      	str	r4, [r3, #0]
10009f3a:	605c      	str	r4, [r3, #4]
10009f3c:	609c      	str	r4, [r3, #8]
10009f3e:	60dc      	str	r4, [r3, #12]
10009f40:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
10009f42:	4b65      	ldr	r3, [pc, #404]	; (1000a0d8 <ble_device_init+0x258>)
10009f44:	601c      	str	r4, [r3, #0]
10009f46:	4c65      	ldr	r4, [pc, #404]	; (1000a0dc <ble_device_init+0x25c>)
10009f48:	239b      	movs	r3, #155	; 0x9b
10009f4a:	009b      	lsls	r3, r3, #2
10009f4c:	4698      	mov	r8, r3
10009f4e:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
10009f50:	4f50      	ldr	r7, [pc, #320]	; (1000a094 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
10009f52:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
10009f54:	227c      	movs	r2, #124	; 0x7c
10009f56:	2100      	movs	r1, #0
10009f58:	0020      	movs	r0, r4
10009f5a:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009f5c:	0023      	movs	r3, r4
10009f5e:	335e      	adds	r3, #94	; 0x5e
10009f60:	2200      	movs	r2, #0
10009f62:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
10009f64:	7626      	strb	r6, [r4, #24]
10009f66:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009f68:	45a0      	cmp	r8, r4
10009f6a:	d1f3      	bne.n	10009f54 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
10009f6c:	4b5c      	ldr	r3, [pc, #368]	; (1000a0e0 <ble_device_init+0x260>)
10009f6e:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
10009f70:	4c52      	ldr	r4, [pc, #328]	; (1000a0bc <ble_device_init+0x23c>)
10009f72:	4b4a      	ldr	r3, [pc, #296]	; (1000a09c <ble_device_init+0x21c>)
10009f74:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
10009f76:	4b4a      	ldr	r3, [pc, #296]	; (1000a0a0 <ble_device_init+0x220>)
10009f78:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing SAMB11");
10009f7a:	485a      	ldr	r0, [pc, #360]	; (1000a0e4 <ble_device_init+0x264>)
10009f7c:	4b5a      	ldr	r3, [pc, #360]	; (1000a0e8 <ble_device_init+0x268>)
10009f7e:	4798      	blx	r3
10009f80:	485a      	ldr	r0, [pc, #360]	; (1000a0ec <ble_device_init+0x26c>)
10009f82:	4b5b      	ldr	r3, [pc, #364]	; (1000a0f0 <ble_device_init+0x270>)
10009f84:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
10009f86:	0020      	movs	r0, r4
10009f88:	4b5a      	ldr	r3, [pc, #360]	; (1000a0f4 <ble_device_init+0x274>)
10009f8a:	4798      	blx	r3
10009f8c:	2800      	cmp	r0, #0
10009f8e:	d00b      	beq.n	10009fa8 <ble_device_init+0x128>
	{
		DBG_LOG("SAMB11 Initialization failed");
10009f90:	4e54      	ldr	r6, [pc, #336]	; (1000a0e4 <ble_device_init+0x264>)
10009f92:	0030      	movs	r0, r6
10009f94:	4d54      	ldr	r5, [pc, #336]	; (1000a0e8 <ble_device_init+0x268>)
10009f96:	47a8      	blx	r5
10009f98:	4857      	ldr	r0, [pc, #348]	; (1000a0f8 <ble_device_init+0x278>)
10009f9a:	4c55      	ldr	r4, [pc, #340]	; (1000a0f0 <ble_device_init+0x270>)
10009f9c:	47a0      	blx	r4
		DBG_LOG("Please check the power and connection / hardware connector");	
10009f9e:	0030      	movs	r0, r6
10009fa0:	47a8      	blx	r5
10009fa2:	4856      	ldr	r0, [pc, #344]	; (1000a0fc <ble_device_init+0x27c>)
10009fa4:	47a0      	blx	r4
10009fa6:	e7fe      	b.n	10009fa6 <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
10009fa8:	4a55      	ldr	r2, [pc, #340]	; (1000a100 <ble_device_init+0x280>)
10009faa:	2100      	movs	r1, #0
10009fac:	2000      	movs	r0, #0
10009fae:	4c55      	ldr	r4, [pc, #340]	; (1000a104 <ble_device_init+0x284>)
10009fb0:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
10009fb2:	4a55      	ldr	r2, [pc, #340]	; (1000a108 <ble_device_init+0x288>)
10009fb4:	2102      	movs	r1, #2
10009fb6:	2000      	movs	r0, #0
10009fb8:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
10009fba:	2109      	movs	r1, #9
10009fbc:	4853      	ldr	r0, [pc, #332]	; (1000a10c <ble_device_init+0x28c>)
10009fbe:	4b54      	ldr	r3, [pc, #336]	; (1000a110 <ble_device_init+0x290>)
10009fc0:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
10009fc2:	2800      	cmp	r0, #0
10009fc4:	d005      	beq.n	10009fd2 <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
10009fc6:	4847      	ldr	r0, [pc, #284]	; (1000a0e4 <ble_device_init+0x264>)
10009fc8:	4b47      	ldr	r3, [pc, #284]	; (1000a0e8 <ble_device_init+0x268>)
10009fca:	4798      	blx	r3
10009fcc:	4851      	ldr	r0, [pc, #324]	; (1000a114 <ble_device_init+0x294>)
10009fce:	4b48      	ldr	r3, [pc, #288]	; (1000a0f0 <ble_device_init+0x270>)
10009fd0:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
10009fd2:	2207      	movs	r2, #7
10009fd4:	4950      	ldr	r1, [pc, #320]	; (1000a118 <ble_device_init+0x298>)
10009fd6:	3108      	adds	r1, #8
10009fd8:	a804      	add	r0, sp, #16
10009fda:	4b50      	ldr	r3, [pc, #320]	; (1000a11c <ble_device_init+0x29c>)
10009fdc:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
10009fde:	2226      	movs	r2, #38	; 0x26
10009fe0:	2100      	movs	r1, #0
10009fe2:	a806      	add	r0, sp, #24
10009fe4:	4b2b      	ldr	r3, [pc, #172]	; (1000a094 <ble_device_init+0x214>)
10009fe6:	4798      	blx	r3
	
	if (addr == NULL)
10009fe8:	2d00      	cmp	r5, #0
10009fea:	d10c      	bne.n	1000a006 <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
10009fec:	a804      	add	r0, sp, #16
10009fee:	4b4c      	ldr	r3, [pc, #304]	; (1000a120 <ble_device_init+0x2a0>)
10009ff0:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
10009ff2:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
10009ff4:	2800      	cmp	r0, #0
10009ff6:	d006      	beq.n	1000a006 <ble_device_init+0x186>
		{
			DBG_LOG("BD address get failed");
10009ff8:	483a      	ldr	r0, [pc, #232]	; (1000a0e4 <ble_device_init+0x264>)
10009ffa:	4b3b      	ldr	r3, [pc, #236]	; (1000a0e8 <ble_device_init+0x268>)
10009ffc:	4798      	blx	r3
10009ffe:	4849      	ldr	r0, [pc, #292]	; (1000a124 <ble_device_init+0x2a4>)
1000a000:	4b3b      	ldr	r3, [pc, #236]	; (1000a0f0 <ble_device_init+0x270>)
1000a002:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000a004:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000a006:	4837      	ldr	r0, [pc, #220]	; (1000a0e4 <ble_device_init+0x264>)
1000a008:	4b37      	ldr	r3, [pc, #220]	; (1000a0e8 <ble_device_init+0x268>)
1000a00a:	4798      	blx	r3
1000a00c:	792b      	ldrb	r3, [r5, #4]
1000a00e:	796a      	ldrb	r2, [r5, #5]
1000a010:	79a9      	ldrb	r1, [r5, #6]
1000a012:	7828      	ldrb	r0, [r5, #0]
1000a014:	9003      	str	r0, [sp, #12]
1000a016:	7868      	ldrb	r0, [r5, #1]
1000a018:	9002      	str	r0, [sp, #8]
1000a01a:	78a8      	ldrb	r0, [r5, #2]
1000a01c:	9001      	str	r0, [sp, #4]
1000a01e:	78e8      	ldrb	r0, [r5, #3]
1000a020:	9000      	str	r0, [sp, #0]
1000a022:	4841      	ldr	r0, [pc, #260]	; (1000a128 <ble_device_init+0x2a8>)
1000a024:	4c32      	ldr	r4, [pc, #200]	; (1000a0f0 <ble_device_init+0x270>)
1000a026:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000a028:	ac06      	add	r4, sp, #24
1000a02a:	230a      	movs	r3, #10
1000a02c:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000a02e:	4b3f      	ldr	r3, [pc, #252]	; (1000a12c <ble_device_init+0x2ac>)
1000a030:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000a032:	2207      	movs	r2, #7
1000a034:	0029      	movs	r1, r5
1000a036:	a807      	add	r0, sp, #28
1000a038:	4b38      	ldr	r3, [pc, #224]	; (1000a11c <ble_device_init+0x29c>)
1000a03a:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000a03c:	2300      	movs	r3, #0
1000a03e:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000a040:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000a042:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000a044:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000a046:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000a048:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000a04a:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000a04c:	2380      	movs	r3, #128	; 0x80
1000a04e:	009b      	lsls	r3, r3, #2
1000a050:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000a052:	0020      	movs	r0, r4
1000a054:	4b36      	ldr	r3, [pc, #216]	; (1000a130 <ble_device_init+0x2b0>)
1000a056:	4798      	blx	r3
1000a058:	2800      	cmp	r0, #0
1000a05a:	d005      	beq.n	1000a068 <ble_device_init+0x1e8>
	{
		DBG_LOG("Set BLE Device configuration failed");
1000a05c:	4821      	ldr	r0, [pc, #132]	; (1000a0e4 <ble_device_init+0x264>)
1000a05e:	4b22      	ldr	r3, [pc, #136]	; (1000a0e8 <ble_device_init+0x268>)
1000a060:	4798      	blx	r3
1000a062:	4834      	ldr	r0, [pc, #208]	; (1000a134 <ble_device_init+0x2b4>)
1000a064:	4b22      	ldr	r3, [pc, #136]	; (1000a0f0 <ble_device_init+0x270>)
1000a066:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000a068:	0028      	movs	r0, r5
1000a06a:	4b33      	ldr	r3, [pc, #204]	; (1000a138 <ble_device_init+0x2b8>)
1000a06c:	4798      	blx	r3
1000a06e:	2800      	cmp	r0, #0
1000a070:	d005      	beq.n	1000a07e <ble_device_init+0x1fe>
	{
		DBG_LOG("Set BLE Device Address failed");
1000a072:	481c      	ldr	r0, [pc, #112]	; (1000a0e4 <ble_device_init+0x264>)
1000a074:	4b1c      	ldr	r3, [pc, #112]	; (1000a0e8 <ble_device_init+0x268>)
1000a076:	4798      	blx	r3
1000a078:	4830      	ldr	r0, [pc, #192]	; (1000a13c <ble_device_init+0x2bc>)
1000a07a:	4b1d      	ldr	r3, [pc, #116]	; (1000a0f0 <ble_device_init+0x270>)
1000a07c:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000a07e:	b011      	add	sp, #68	; 0x44
1000a080:	bc3c      	pop	{r2, r3, r4, r5}
1000a082:	4690      	mov	r8, r2
1000a084:	4699      	mov	r9, r3
1000a086:	46a2      	mov	sl, r4
1000a088:	46ab      	mov	fp, r5
1000a08a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a08c:	10012278 	.word	0x10012278
1000a090:	10012280 	.word	0x10012280
1000a094:	1000fa2d 	.word	0x1000fa2d
1000a098:	100137f4 	.word	0x100137f4
1000a09c:	000004e2 	.word	0x000004e2
1000a0a0:	10011d98 	.word	0x10011d98
1000a0a4:	1001227c 	.word	0x1001227c
1000a0a8:	1001382c 	.word	0x1001382c
1000a0ac:	10013824 	.word	0x10013824
1000a0b0:	10013b60 	.word	0x10013b60
1000a0b4:	10011998 	.word	0x10011998
1000a0b8:	10012288 	.word	0x10012288
1000a0bc:	10013808 	.word	0x10013808
1000a0c0:	100137cc 	.word	0x100137cc
1000a0c4:	100137e0 	.word	0x100137e0
1000a0c8:	10013534 	.word	0x10013534
1000a0cc:	10013828 	.word	0x10013828
1000a0d0:	10013530 	.word	0x10013530
1000a0d4:	100137b8 	.word	0x100137b8
1000a0d8:	10013d6c 	.word	0x10013d6c
1000a0dc:	10013548 	.word	0x10013548
1000a0e0:	100137b4 	.word	0x100137b4
1000a0e4:	10010e28 	.word	0x10010e28
1000a0e8:	1000fb5d 	.word	0x1000fb5d
1000a0ec:	100113c8 	.word	0x100113c8
1000a0f0:	1000fa3d 	.word	0x1000fa3d
1000a0f4:	1000be5d 	.word	0x1000be5d
1000a0f8:	100113dc 	.word	0x100113dc
1000a0fc:	100113fc 	.word	0x100113fc
1000a100:	10011634 	.word	0x10011634
1000a104:	10009db1 	.word	0x10009db1
1000a108:	10010ff8 	.word	0x10010ff8
1000a10c:	10011438 	.word	0x10011438
1000a110:	1000bd75 	.word	0x1000bd75
1000a114:	10011444 	.word	0x10011444
1000a118:	10010fdc 	.word	0x10010fdc
1000a11c:	1000fa1b 	.word	0x1000fa1b
1000a120:	1000bda9 	.word	0x1000bda9
1000a124:	1001145c 	.word	0x1001145c
1000a128:	10011474 	.word	0x10011474
1000a12c:	00003a98 	.word	0x00003a98
1000a130:	1000bdcd 	.word	0x1000bdcd
1000a134:	100114ac 	.word	0x100114ac
1000a138:	1000c011 	.word	0x1000c011
1000a13c:	100114d0 	.word	0x100114d0

1000a140 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000a140:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000a142:	2201      	movs	r2, #1
1000a144:	2101      	movs	r1, #1
1000a146:	4b06      	ldr	r3, [pc, #24]	; (1000a160 <ble_send_slave_sec_request+0x20>)
1000a148:	4798      	blx	r3
1000a14a:	2800      	cmp	r0, #0
1000a14c:	d006      	beq.n	1000a15c <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000a14e:	4805      	ldr	r0, [pc, #20]	; (1000a164 <ble_send_slave_sec_request+0x24>)
1000a150:	4b05      	ldr	r3, [pc, #20]	; (1000a168 <ble_send_slave_sec_request+0x28>)
1000a152:	4798      	blx	r3
1000a154:	4805      	ldr	r0, [pc, #20]	; (1000a16c <ble_send_slave_sec_request+0x2c>)
1000a156:	4b06      	ldr	r3, [pc, #24]	; (1000a170 <ble_send_slave_sec_request+0x30>)
1000a158:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000a15a:	20e2      	movs	r0, #226	; 0xe2
}
1000a15c:	bd10      	pop	{r4, pc}
1000a15e:	46c0      	nop			; (mov r8, r8)
1000a160:	1000cde9 	.word	0x1000cde9
1000a164:	10010e28 	.word	0x10010e28
1000a168:	1000fb5d 	.word	0x1000fb5d
1000a16c:	1001150c 	.word	0x1001150c
1000a170:	1000fa3d 	.word	0x1000fa3d

1000a174 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000a174:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a176:	465f      	mov	r7, fp
1000a178:	464e      	mov	r6, r9
1000a17a:	4645      	mov	r5, r8
1000a17c:	b4e0      	push	{r5, r6, r7}
1000a17e:	b09a      	sub	sp, #104	; 0x68
1000a180:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000a182:	7a86      	ldrb	r6, [r0, #10]
1000a184:	2e00      	cmp	r6, #0
1000a186:	d000      	beq.n	1000a18a <ble_connected_state_handler+0x16>
1000a188:	e0c6      	b.n	1000a318 <ble_connected_state_handler+0x1a4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000a18a:	4875      	ldr	r0, [pc, #468]	; (1000a360 <ble_connected_state_handler+0x1ec>)
1000a18c:	4f75      	ldr	r7, [pc, #468]	; (1000a364 <ble_connected_state_handler+0x1f0>)
1000a18e:	47b8      	blx	r7
1000a190:	792b      	ldrb	r3, [r5, #4]
1000a192:	796a      	ldrb	r2, [r5, #5]
1000a194:	79a9      	ldrb	r1, [r5, #6]
1000a196:	7868      	ldrb	r0, [r5, #1]
1000a198:	9002      	str	r0, [sp, #8]
1000a19a:	78a8      	ldrb	r0, [r5, #2]
1000a19c:	9001      	str	r0, [sp, #4]
1000a19e:	78e8      	ldrb	r0, [r5, #3]
1000a1a0:	9000      	str	r0, [sp, #0]
1000a1a2:	4871      	ldr	r0, [pc, #452]	; (1000a368 <ble_connected_state_handler+0x1f4>)
1000a1a4:	4c71      	ldr	r4, [pc, #452]	; (1000a36c <ble_connected_state_handler+0x1f8>)
1000a1a6:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000a1a8:	486d      	ldr	r0, [pc, #436]	; (1000a360 <ble_connected_state_handler+0x1ec>)
1000a1aa:	47b8      	blx	r7
1000a1ac:	8929      	ldrh	r1, [r5, #8]
1000a1ae:	4870      	ldr	r0, [pc, #448]	; (1000a370 <ble_connected_state_handler+0x1fc>)
1000a1b0:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000a1b2:	2212      	movs	r2, #18
1000a1b4:	0029      	movs	r1, r5
1000a1b6:	486f      	ldr	r0, [pc, #444]	; (1000a374 <ble_connected_state_handler+0x200>)
1000a1b8:	4b6f      	ldr	r3, [pc, #444]	; (1000a378 <ble_connected_state_handler+0x204>)
1000a1ba:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a1bc:	9504      	str	r5, [sp, #16]
1000a1be:	2207      	movs	r2, #7
1000a1c0:	0029      	movs	r1, r5
1000a1c2:	486e      	ldr	r0, [pc, #440]	; (1000a37c <ble_connected_state_handler+0x208>)
1000a1c4:	4b6e      	ldr	r3, [pc, #440]	; (1000a380 <ble_connected_state_handler+0x20c>)
1000a1c6:	4798      	blx	r3
1000a1c8:	2800      	cmp	r0, #0
1000a1ca:	d100      	bne.n	1000a1ce <ble_connected_state_handler+0x5a>
1000a1cc:	e0ad      	b.n	1000a32a <ble_connected_state_handler+0x1b6>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000a1ce:	782b      	ldrb	r3, [r5, #0]
1000a1d0:	2b02      	cmp	r3, #2
1000a1d2:	d000      	beq.n	1000a1d6 <ble_connected_state_handler+0x62>
1000a1d4:	e0a9      	b.n	1000a32a <ble_connected_state_handler+0x1b6>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000a1d6:	2250      	movs	r2, #80	; 0x50
1000a1d8:	2100      	movs	r1, #0
1000a1da:	a806      	add	r0, sp, #24
1000a1dc:	4b69      	ldr	r3, [pc, #420]	; (1000a384 <ble_connected_state_handler+0x210>)
1000a1de:	4798      	blx	r3
1000a1e0:	4f69      	ldr	r7, [pc, #420]	; (1000a388 <ble_connected_state_handler+0x214>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000a1e2:	2300      	movs	r3, #0
1000a1e4:	e00b      	b.n	1000a1fe <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000a1e6:	1c59      	adds	r1, r3, #1
1000a1e8:	7814      	ldrb	r4, [r2, #0]
1000a1ea:	a806      	add	r0, sp, #24
1000a1ec:	54c4      	strb	r4, [r0, r3]
1000a1ee:	3201      	adds	r2, #1
1000a1f0:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000a1f2:	42b3      	cmp	r3, r6
1000a1f4:	d1f7      	bne.n	1000a1e6 <ble_connected_state_handler+0x72>
1000a1f6:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000a1f8:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000a1fa:	2b50      	cmp	r3, #80	; 0x50
1000a1fc:	d004      	beq.n	1000a208 <ble_connected_state_handler+0x94>
1000a1fe:	001e      	movs	r6, r3
1000a200:	3610      	adds	r6, #16
1000a202:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000a204:	003a      	movs	r2, r7
1000a206:	e7ee      	b.n	1000a1e6 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000a208:	aa06      	add	r2, sp, #24
1000a20a:	0029      	movs	r1, r5
1000a20c:	2005      	movs	r0, #5
1000a20e:	4b5f      	ldr	r3, [pc, #380]	; (1000a38c <ble_connected_state_handler+0x218>)
1000a210:	4798      	blx	r3
1000a212:	1e06      	subs	r6, r0, #0
1000a214:	d100      	bne.n	1000a218 <ble_connected_state_handler+0xa4>
1000a216:	e09c      	b.n	1000a352 <ble_connected_state_handler+0x1de>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000a218:	4851      	ldr	r0, [pc, #324]	; (1000a360 <ble_connected_state_handler+0x1ec>)
1000a21a:	4b52      	ldr	r3, [pc, #328]	; (1000a364 <ble_connected_state_handler+0x1f0>)
1000a21c:	4798      	blx	r3
1000a21e:	485c      	ldr	r0, [pc, #368]	; (1000a390 <ble_connected_state_handler+0x21c>)
1000a220:	4b52      	ldr	r3, [pc, #328]	; (1000a36c <ble_connected_state_handler+0x1f8>)
1000a222:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000a224:	26e2      	movs	r6, #226	; 0xe2
1000a226:	e094      	b.n	1000a352 <ble_connected_state_handler+0x1de>
1000a228:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a22a:	9405      	str	r4, [sp, #20]
1000a22c:	2207      	movs	r2, #7
1000a22e:	9904      	ldr	r1, [sp, #16]
1000a230:	4648      	mov	r0, r9
1000a232:	47d8      	blx	fp
1000a234:	2800      	cmp	r0, #0
1000a236:	d109      	bne.n	1000a24c <ble_connected_state_handler+0xd8>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a238:	9a05      	ldr	r2, [sp, #20]
1000a23a:	0153      	lsls	r3, r2, #5
1000a23c:	1a9b      	subs	r3, r3, r2
1000a23e:	009a      	lsls	r2, r3, #2
1000a240:	4b54      	ldr	r3, [pc, #336]	; (1000a394 <ble_connected_state_handler+0x220>)
1000a242:	189b      	adds	r3, r3, r2
1000a244:	335e      	adds	r3, #94	; 0x5e
1000a246:	2202      	movs	r2, #2
1000a248:	701a      	strb	r2, [r3, #0]
1000a24a:	e02b      	b.n	1000a2a4 <ble_connected_state_handler+0x130>
1000a24c:	3401      	adds	r4, #1
1000a24e:	237c      	movs	r3, #124	; 0x7c
1000a250:	469c      	mov	ip, r3
1000a252:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a254:	2c05      	cmp	r4, #5
1000a256:	d1e7      	bne.n	1000a228 <ble_connected_state_handler+0xb4>
1000a258:	e072      	b.n	1000a340 <ble_connected_state_handler+0x1cc>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a25a:	001c      	movs	r4, r3
1000a25c:	7811      	ldrb	r1, [r2, #0]
1000a25e:	2900      	cmp	r1, #0
1000a260:	d11a      	bne.n	1000a298 <ble_connected_state_handler+0x124>
1000a262:	e001      	b.n	1000a268 <ble_connected_state_handler+0xf4>
1000a264:	2400      	movs	r4, #0
1000a266:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000a268:	0163      	lsls	r3, r4, #5
1000a26a:	4699      	mov	r9, r3
1000a26c:	1b18      	subs	r0, r3, r4
1000a26e:	0080      	lsls	r0, r0, #2
1000a270:	4b48      	ldr	r3, [pc, #288]	; (1000a394 <ble_connected_state_handler+0x220>)
1000a272:	4698      	mov	r8, r3
1000a274:	4440      	add	r0, r8
1000a276:	2212      	movs	r2, #18
1000a278:	0029      	movs	r1, r5
1000a27a:	4b3f      	ldr	r3, [pc, #252]	; (1000a378 <ble_connected_state_handler+0x204>)
1000a27c:	4798      	blx	r3
						ble_device_count++;
1000a27e:	4a46      	ldr	r2, [pc, #280]	; (1000a398 <ble_connected_state_handler+0x224>)
1000a280:	7813      	ldrb	r3, [r2, #0]
1000a282:	3301      	adds	r3, #1
1000a284:	b2db      	uxtb	r3, r3
1000a286:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a288:	464b      	mov	r3, r9
1000a28a:	1b1b      	subs	r3, r3, r4
1000a28c:	009b      	lsls	r3, r3, #2
1000a28e:	4443      	add	r3, r8
1000a290:	335e      	adds	r3, #94	; 0x5e
1000a292:	2202      	movs	r2, #2
1000a294:	701a      	strb	r2, [r3, #0]
						break;
1000a296:	e005      	b.n	1000a2a4 <ble_connected_state_handler+0x130>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a298:	1c79      	adds	r1, r7, #1
1000a29a:	b2cf      	uxtb	r7, r1
1000a29c:	3301      	adds	r3, #1
1000a29e:	327c      	adds	r2, #124	; 0x7c
1000a2a0:	2f05      	cmp	r7, #5
1000a2a2:	d1da      	bne.n	1000a25a <ble_connected_state_handler+0xe6>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a2a4:	2207      	movs	r2, #7
1000a2a6:	0029      	movs	r1, r5
1000a2a8:	4834      	ldr	r0, [pc, #208]	; (1000a37c <ble_connected_state_handler+0x208>)
1000a2aa:	4b35      	ldr	r3, [pc, #212]	; (1000a380 <ble_connected_state_handler+0x20c>)
1000a2ac:	4798      	blx	r3
1000a2ae:	2800      	cmp	r0, #0
1000a2b0:	d10c      	bne.n	1000a2cc <ble_connected_state_handler+0x158>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000a2b2:	017b      	lsls	r3, r7, #5
1000a2b4:	1bdb      	subs	r3, r3, r7
1000a2b6:	009b      	lsls	r3, r3, #2
1000a2b8:	4a36      	ldr	r2, [pc, #216]	; (1000a394 <ble_connected_state_handler+0x220>)
1000a2ba:	18d3      	adds	r3, r2, r3
1000a2bc:	2205      	movs	r2, #5
1000a2be:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a2c0:	3202      	adds	r2, #2
1000a2c2:	2100      	movs	r1, #0
1000a2c4:	482d      	ldr	r0, [pc, #180]	; (1000a37c <ble_connected_state_handler+0x208>)
1000a2c6:	4b2f      	ldr	r3, [pc, #188]	; (1000a384 <ble_connected_state_handler+0x210>)
1000a2c8:	4798      	blx	r3
1000a2ca:	e042      	b.n	1000a352 <ble_connected_state_handler+0x1de>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a2cc:	4b31      	ldr	r3, [pc, #196]	; (1000a394 <ble_connected_state_handler+0x220>)
1000a2ce:	4698      	mov	r8, r3
1000a2d0:	017c      	lsls	r4, r7, #5
1000a2d2:	1be3      	subs	r3, r4, r7
1000a2d4:	009b      	lsls	r3, r3, #2
1000a2d6:	4443      	add	r3, r8
1000a2d8:	220a      	movs	r2, #10
1000a2da:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a2dc:	3a03      	subs	r2, #3
1000a2de:	2100      	movs	r1, #0
1000a2e0:	4826      	ldr	r0, [pc, #152]	; (1000a37c <ble_connected_state_handler+0x208>)
1000a2e2:	4b28      	ldr	r3, [pc, #160]	; (1000a384 <ble_connected_state_handler+0x210>)
1000a2e4:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000a2e6:	1be4      	subs	r4, r4, r7
1000a2e8:	00a4      	lsls	r4, r4, #2
1000a2ea:	4444      	add	r4, r8
1000a2ec:	7ca3      	ldrb	r3, [r4, #18]
1000a2ee:	2b0a      	cmp	r3, #10
1000a2f0:	d12f      	bne.n	1000a352 <ble_connected_state_handler+0x1de>
1000a2f2:	e00d      	b.n	1000a310 <ble_connected_state_handler+0x19c>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000a2f4:	481a      	ldr	r0, [pc, #104]	; (1000a360 <ble_connected_state_handler+0x1ec>)
1000a2f6:	4b1b      	ldr	r3, [pc, #108]	; (1000a364 <ble_connected_state_handler+0x1f0>)
1000a2f8:	4798      	blx	r3
1000a2fa:	4b27      	ldr	r3, [pc, #156]	; (1000a398 <ble_connected_state_handler+0x224>)
1000a2fc:	7819      	ldrb	r1, [r3, #0]
1000a2fe:	b2c9      	uxtb	r1, r1
1000a300:	4826      	ldr	r0, [pc, #152]	; (1000a39c <ble_connected_state_handler+0x228>)
1000a302:	4b1a      	ldr	r3, [pc, #104]	; (1000a36c <ble_connected_state_handler+0x1f8>)
1000a304:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000a306:	8928      	ldrh	r0, [r5, #8]
1000a308:	2113      	movs	r1, #19
1000a30a:	4b25      	ldr	r3, [pc, #148]	; (1000a3a0 <ble_connected_state_handler+0x22c>)
1000a30c:	4798      	blx	r3
1000a30e:	e020      	b.n	1000a352 <ble_connected_state_handler+0x1de>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000a310:	8928      	ldrh	r0, [r5, #8]
1000a312:	4b24      	ldr	r3, [pc, #144]	; (1000a3a4 <ble_connected_state_handler+0x230>)
1000a314:	4798      	blx	r3
1000a316:	e01c      	b.n	1000a352 <ble_connected_state_handler+0x1de>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000a318:	4811      	ldr	r0, [pc, #68]	; (1000a360 <ble_connected_state_handler+0x1ec>)
1000a31a:	4b12      	ldr	r3, [pc, #72]	; (1000a364 <ble_connected_state_handler+0x1f0>)
1000a31c:	4798      	blx	r3
1000a31e:	7aa9      	ldrb	r1, [r5, #10]
1000a320:	4821      	ldr	r0, [pc, #132]	; (1000a3a8 <ble_connected_state_handler+0x234>)
1000a322:	4b12      	ldr	r3, [pc, #72]	; (1000a36c <ble_connected_state_handler+0x1f8>)
1000a324:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000a326:	2600      	movs	r6, #0
1000a328:	e013      	b.n	1000a352 <ble_connected_state_handler+0x1de>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000a32a:	4b1b      	ldr	r3, [pc, #108]	; (1000a398 <ble_connected_state_handler+0x224>)
1000a32c:	781b      	ldrb	r3, [r3, #0]
1000a32e:	b2db      	uxtb	r3, r3
1000a330:	2b04      	cmp	r3, #4
1000a332:	d8df      	bhi.n	1000a2f4 <ble_connected_state_handler+0x180>
1000a334:	4b17      	ldr	r3, [pc, #92]	; (1000a394 <ble_connected_state_handler+0x220>)
1000a336:	4699      	mov	r9, r3
1000a338:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a33a:	4b11      	ldr	r3, [pc, #68]	; (1000a380 <ble_connected_state_handler+0x20c>)
1000a33c:	469b      	mov	fp, r3
1000a33e:	e773      	b.n	1000a228 <ble_connected_state_handler+0xb4>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a340:	235e      	movs	r3, #94	; 0x5e
1000a342:	4a14      	ldr	r2, [pc, #80]	; (1000a394 <ble_connected_state_handler+0x220>)
1000a344:	5cd3      	ldrb	r3, [r2, r3]
1000a346:	2b00      	cmp	r3, #0
1000a348:	d08c      	beq.n	1000a264 <ble_connected_state_handler+0xf0>
1000a34a:	4a18      	ldr	r2, [pc, #96]	; (1000a3ac <ble_connected_state_handler+0x238>)
1000a34c:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a34e:	2701      	movs	r7, #1
1000a350:	e783      	b.n	1000a25a <ble_connected_state_handler+0xe6>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000a352:	0030      	movs	r0, r6
1000a354:	b01a      	add	sp, #104	; 0x68
1000a356:	bc1c      	pop	{r2, r3, r4}
1000a358:	4690      	mov	r8, r2
1000a35a:	4699      	mov	r9, r3
1000a35c:	46a3      	mov	fp, r4
1000a35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a360:	10010e28 	.word	0x10010e28
1000a364:	1000fb5d 	.word	0x1000fb5d
1000a368:	1001152c 	.word	0x1001152c
1000a36c:	1000fa3d 	.word	0x1000fa3d
1000a370:	10011570 	.word	0x10011570
1000a374:	100137f4 	.word	0x100137f4
1000a378:	1000fa1b 	.word	0x1000fa1b
1000a37c:	10012280 	.word	0x10012280
1000a380:	1000f9fd 	.word	0x1000f9fd
1000a384:	1000fa2d 	.word	0x1000fa2d
1000a388:	1001358e 	.word	0x1001358e
1000a38c:	1000c271 	.word	0x1000c271
1000a390:	10011588 	.word	0x10011588
1000a394:	10013548 	.word	0x10013548
1000a398:	100137b4 	.word	0x100137b4
1000a39c:	100115ac 	.word	0x100115ac
1000a3a0:	1000c245 	.word	0x1000c245
1000a3a4:	1000a141 	.word	0x1000a141
1000a3a8:	100115e8 	.word	0x100115e8
1000a3ac:	10013622 	.word	0x10013622

1000a3b0 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000a3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a3b2:	4647      	mov	r7, r8
1000a3b4:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000a3b6:	7803      	ldrb	r3, [r0, #0]
1000a3b8:	2b00      	cmp	r3, #0
1000a3ba:	d141      	bne.n	1000a440 <ble_resolv_rand_addr_handler+0x90>
1000a3bc:	4d2f      	ldr	r5, [pc, #188]	; (1000a47c <ble_resolv_rand_addr_handler+0xcc>)
1000a3be:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000a3c0:	1c46      	adds	r6, r0, #1
1000a3c2:	4f2f      	ldr	r7, [pc, #188]	; (1000a480 <ble_resolv_rand_addr_handler+0xd0>)
1000a3c4:	2210      	movs	r2, #16
1000a3c6:	0029      	movs	r1, r5
1000a3c8:	0030      	movs	r0, r6
1000a3ca:	47b8      	blx	r7
1000a3cc:	2800      	cmp	r0, #0
1000a3ce:	d03f      	beq.n	1000a450 <ble_resolv_rand_addr_handler+0xa0>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a3d0:	3401      	adds	r4, #1
1000a3d2:	b2e4      	uxtb	r4, r4
1000a3d4:	357c      	adds	r5, #124	; 0x7c
1000a3d6:	2c05      	cmp	r4, #5
1000a3d8:	d1f4      	bne.n	1000a3c4 <ble_resolv_rand_addr_handler+0x14>
1000a3da:	e031      	b.n	1000a440 <ble_resolv_rand_addr_handler+0x90>
1000a3dc:	b2dd      	uxtb	r5, r3
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a3de:	001c      	movs	r4, r3
1000a3e0:	7811      	ldrb	r1, [r2, #0]
1000a3e2:	2900      	cmp	r1, #0
1000a3e4:	d122      	bne.n	1000a42c <ble_resolv_rand_addr_handler+0x7c>
1000a3e6:	e001      	b.n	1000a3ec <ble_resolv_rand_addr_handler+0x3c>
1000a3e8:	2400      	movs	r4, #0
1000a3ea:	2500      	movs	r5, #0
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000a3ec:	4b25      	ldr	r3, [pc, #148]	; (1000a484 <ble_resolv_rand_addr_handler+0xd4>)
1000a3ee:	4698      	mov	r8, r3
1000a3f0:	0166      	lsls	r6, r4, #5
1000a3f2:	1b37      	subs	r7, r6, r4
1000a3f4:	00bf      	lsls	r7, r7, #2
1000a3f6:	4447      	add	r7, r8
1000a3f8:	2212      	movs	r2, #18
1000a3fa:	4923      	ldr	r1, [pc, #140]	; (1000a488 <ble_resolv_rand_addr_handler+0xd8>)
1000a3fc:	0038      	movs	r0, r7
1000a3fe:	4b23      	ldr	r3, [pc, #140]	; (1000a48c <ble_resolv_rand_addr_handler+0xdc>)
1000a400:	4798      	blx	r3
				ble_device_count++;
1000a402:	4a23      	ldr	r2, [pc, #140]	; (1000a490 <ble_resolv_rand_addr_handler+0xe0>)
1000a404:	7813      	ldrb	r3, [r2, #0]
1000a406:	3301      	adds	r3, #1
1000a408:	b2db      	uxtb	r3, r3
1000a40a:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a40c:	375e      	adds	r7, #94	; 0x5e
1000a40e:	2302      	movs	r3, #2
1000a410:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a412:	1b34      	subs	r4, r6, r4
1000a414:	00a4      	lsls	r4, r4, #2
1000a416:	4444      	add	r4, r8
1000a418:	3308      	adds	r3, #8
1000a41a:	74a3      	strb	r3, [r4, #18]
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000a41c:	016b      	lsls	r3, r5, #5
1000a41e:	1b5d      	subs	r5, r3, r5
1000a420:	00ad      	lsls	r5, r5, #2
1000a422:	4445      	add	r5, r8
1000a424:	7cab      	ldrb	r3, [r5, #18]
1000a426:	2b0a      	cmp	r3, #10
1000a428:	d123      	bne.n	1000a472 <ble_resolv_rand_addr_handler+0xc2>
1000a42a:	e004      	b.n	1000a436 <ble_resolv_rand_addr_handler+0x86>
1000a42c:	3301      	adds	r3, #1
1000a42e:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a430:	2b05      	cmp	r3, #5
1000a432:	d1d3      	bne.n	1000a3dc <ble_resolv_rand_addr_handler+0x2c>
1000a434:	e01d      	b.n	1000a472 <ble_resolv_rand_addr_handler+0xc2>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000a436:	4b14      	ldr	r3, [pc, #80]	; (1000a488 <ble_resolv_rand_addr_handler+0xd8>)
1000a438:	8918      	ldrh	r0, [r3, #8]
1000a43a:	4b16      	ldr	r3, [pc, #88]	; (1000a494 <ble_resolv_rand_addr_handler+0xe4>)
1000a43c:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000a43e:	e018      	b.n	1000a472 <ble_resolv_rand_addr_handler+0xc2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a440:	235e      	movs	r3, #94	; 0x5e
1000a442:	4a10      	ldr	r2, [pc, #64]	; (1000a484 <ble_resolv_rand_addr_handler+0xd4>)
1000a444:	5cd3      	ldrb	r3, [r2, r3]
1000a446:	2b00      	cmp	r3, #0
1000a448:	d0ce      	beq.n	1000a3e8 <ble_resolv_rand_addr_handler+0x38>
1000a44a:	4a13      	ldr	r2, [pc, #76]	; (1000a498 <ble_resolv_rand_addr_handler+0xe8>)
1000a44c:	2301      	movs	r3, #1
1000a44e:	e7c5      	b.n	1000a3dc <ble_resolv_rand_addr_handler+0x2c>
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a450:	480c      	ldr	r0, [pc, #48]	; (1000a484 <ble_resolv_rand_addr_handler+0xd4>)
1000a452:	0163      	lsls	r3, r4, #5
1000a454:	1b1a      	subs	r2, r3, r4
1000a456:	0092      	lsls	r2, r2, #2
1000a458:	1882      	adds	r2, r0, r2
1000a45a:	0011      	movs	r1, r2
1000a45c:	315e      	adds	r1, #94	; 0x5e
1000a45e:	2502      	movs	r5, #2
1000a460:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a462:	210a      	movs	r1, #10
1000a464:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000a466:	0010      	movs	r0, r2
1000a468:	2212      	movs	r2, #18
1000a46a:	4907      	ldr	r1, [pc, #28]	; (1000a488 <ble_resolv_rand_addr_handler+0xd8>)
1000a46c:	4b07      	ldr	r3, [pc, #28]	; (1000a48c <ble_resolv_rand_addr_handler+0xdc>)
1000a46e:	4798      	blx	r3
1000a470:	e7e1      	b.n	1000a436 <ble_resolv_rand_addr_handler+0x86>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000a472:	2000      	movs	r0, #0
1000a474:	bc04      	pop	{r2}
1000a476:	4690      	mov	r8, r2
1000a478:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a47a:	46c0      	nop			; (mov r8, r8)
1000a47c:	1001358e 	.word	0x1001358e
1000a480:	1000f9fd 	.word	0x1000f9fd
1000a484:	10013548 	.word	0x10013548
1000a488:	100137f4 	.word	0x100137f4
1000a48c:	1000fa1b 	.word	0x1000fa1b
1000a490:	100137b4 	.word	0x100137b4
1000a494:	1000a141 	.word	0x1000a141
1000a498:	10013622 	.word	0x10013622

1000a49c <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000a49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a49e:	000d      	movs	r5, r1
	DBG_LOG_DEV("BLE-Event:%d", events);
	switch(events)
1000a4a0:	283b      	cmp	r0, #59	; 0x3b
1000a4a2:	d872      	bhi.n	1000a58a <ble_event_manager+0xee>
1000a4a4:	0083      	lsls	r3, r0, #2
1000a4a6:	4a3c      	ldr	r2, [pc, #240]	; (1000a598 <ble_event_manager+0xfc>)
1000a4a8:	58d3      	ldr	r3, [r2, r3]
1000a4aa:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a4ac:	0084      	lsls	r4, r0, #2
1000a4ae:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000a4b0:	4f3a      	ldr	r7, [pc, #232]	; (1000a59c <ble_event_manager+0x100>)
1000a4b2:	59bb      	ldr	r3, [r7, r6]
1000a4b4:	2b00      	cmp	r3, #0
1000a4b6:	d004      	beq.n	1000a4c2 <ble_event_manager+0x26>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a4b8:	591b      	ldr	r3, [r3, r4]
1000a4ba:	2b00      	cmp	r3, #0
1000a4bc:	d001      	beq.n	1000a4c2 <ble_event_manager+0x26>
				{
					event_cb_fn[events](event_params);		
1000a4be:	0028      	movs	r0, r5
1000a4c0:	4798      	blx	r3
1000a4c2:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000a4c4:	2e14      	cmp	r6, #20
1000a4c6:	d1f4      	bne.n	1000a4b2 <ble_event_manager+0x16>
1000a4c8:	e065      	b.n	1000a596 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a4ca:	3813      	subs	r0, #19
1000a4cc:	b2c4      	uxtb	r4, r0
1000a4ce:	00a4      	lsls	r4, r4, #2
1000a4d0:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000a4d2:	4f33      	ldr	r7, [pc, #204]	; (1000a5a0 <ble_event_manager+0x104>)
1000a4d4:	59bb      	ldr	r3, [r7, r6]
1000a4d6:	2b00      	cmp	r3, #0
1000a4d8:	d004      	beq.n	1000a4e4 <ble_event_manager+0x48>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a4da:	591b      	ldr	r3, [r3, r4]
1000a4dc:	2b00      	cmp	r3, #0
1000a4de:	d001      	beq.n	1000a4e4 <ble_event_manager+0x48>
				{
					event_cb_fn[events](event_params);
1000a4e0:	0028      	movs	r0, r5
1000a4e2:	4798      	blx	r3
1000a4e4:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000a4e6:	2e14      	cmp	r6, #20
1000a4e8:	d1f4      	bne.n	1000a4d4 <ble_event_manager+0x38>
1000a4ea:	e054      	b.n	1000a596 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a4ec:	381d      	subs	r0, #29
1000a4ee:	b2c4      	uxtb	r4, r0
1000a4f0:	00a4      	lsls	r4, r4, #2
1000a4f2:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000a4f4:	4f2b      	ldr	r7, [pc, #172]	; (1000a5a4 <ble_event_manager+0x108>)
1000a4f6:	59bb      	ldr	r3, [r7, r6]
1000a4f8:	2b00      	cmp	r3, #0
1000a4fa:	d004      	beq.n	1000a506 <ble_event_manager+0x6a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a4fc:	591b      	ldr	r3, [r3, r4]
1000a4fe:	2b00      	cmp	r3, #0
1000a500:	d001      	beq.n	1000a506 <ble_event_manager+0x6a>
				{
					event_cb_fn[events](event_params);
1000a502:	0028      	movs	r0, r5
1000a504:	4798      	blx	r3
1000a506:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000a508:	2e14      	cmp	r6, #20
1000a50a:	d1f4      	bne.n	1000a4f6 <ble_event_manager+0x5a>
1000a50c:	e043      	b.n	1000a596 <ble_event_manager+0xfa>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000a50e:	3827      	subs	r0, #39	; 0x27
1000a510:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000a512:	4b25      	ldr	r3, [pc, #148]	; (1000a5a8 <ble_event_manager+0x10c>)
1000a514:	681b      	ldr	r3, [r3, #0]
1000a516:	2b00      	cmp	r3, #0
1000a518:	d03d      	beq.n	1000a596 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a51a:	0080      	lsls	r0, r0, #2
1000a51c:	58c3      	ldr	r3, [r0, r3]
1000a51e:	2b00      	cmp	r3, #0
1000a520:	d039      	beq.n	1000a596 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000a522:	0008      	movs	r0, r1
1000a524:	4798      	blx	r3
1000a526:	e036      	b.n	1000a596 <ble_event_manager+0xfa>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000a528:	382d      	subs	r0, #45	; 0x2d
1000a52a:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000a52c:	4b1f      	ldr	r3, [pc, #124]	; (1000a5ac <ble_event_manager+0x110>)
1000a52e:	681b      	ldr	r3, [r3, #0]
1000a530:	2b00      	cmp	r3, #0
1000a532:	d030      	beq.n	1000a596 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a534:	0080      	lsls	r0, r0, #2
1000a536:	58c3      	ldr	r3, [r0, r3]
1000a538:	2b00      	cmp	r3, #0
1000a53a:	d02c      	beq.n	1000a596 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000a53c:	0008      	movs	r0, r1
1000a53e:	4798      	blx	r3
1000a540:	e029      	b.n	1000a596 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a542:	3836      	subs	r0, #54	; 0x36
1000a544:	b2c4      	uxtb	r4, r0
1000a546:	00a4      	lsls	r4, r4, #2
1000a548:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000a54a:	4f19      	ldr	r7, [pc, #100]	; (1000a5b0 <ble_event_manager+0x114>)
1000a54c:	59bb      	ldr	r3, [r7, r6]
1000a54e:	2b00      	cmp	r3, #0
1000a550:	d004      	beq.n	1000a55c <ble_event_manager+0xc0>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a552:	591b      	ldr	r3, [r3, r4]
1000a554:	2b00      	cmp	r3, #0
1000a556:	d001      	beq.n	1000a55c <ble_event_manager+0xc0>
				{
					event_cb_fn[events](event_params);
1000a558:	0028      	movs	r0, r5
1000a55a:	4798      	blx	r3
1000a55c:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000a55e:	2e14      	cmp	r6, #20
1000a560:	d1f4      	bne.n	1000a54c <ble_event_manager+0xb0>
1000a562:	e018      	b.n	1000a596 <ble_event_manager+0xfa>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000a564:	3838      	subs	r0, #56	; 0x38
1000a566:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000a568:	4b12      	ldr	r3, [pc, #72]	; (1000a5b4 <ble_event_manager+0x118>)
1000a56a:	681b      	ldr	r3, [r3, #0]
1000a56c:	2b00      	cmp	r3, #0
1000a56e:	d012      	beq.n	1000a596 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a570:	0080      	lsls	r0, r0, #2
1000a572:	58c3      	ldr	r3, [r0, r3]
1000a574:	2b00      	cmp	r3, #0
1000a576:	d00e      	beq.n	1000a596 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000a578:	0008      	movs	r0, r1
1000a57a:	4798      	blx	r3
1000a57c:	e00b      	b.n	1000a596 <ble_event_manager+0xfa>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000a57e:	4b0e      	ldr	r3, [pc, #56]	; (1000a5b8 <ble_event_manager+0x11c>)
1000a580:	681b      	ldr	r3, [r3, #0]
1000a582:	2b00      	cmp	r3, #0
1000a584:	d007      	beq.n	1000a596 <ble_event_manager+0xfa>
			ble_user_event_cb();
1000a586:	4798      	blx	r3
1000a588:	e005      	b.n	1000a596 <ble_event_manager+0xfa>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000a58a:	4d0c      	ldr	r5, [pc, #48]	; (1000a5bc <ble_event_manager+0x120>)
1000a58c:	0028      	movs	r0, r5
1000a58e:	4c0c      	ldr	r4, [pc, #48]	; (1000a5c0 <ble_event_manager+0x124>)
1000a590:	47a0      	blx	r4
1000a592:	0028      	movs	r0, r5
1000a594:	47a0      	blx	r4
	}
	break;		
	}
}
1000a596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a598:	10010eec 	.word	0x10010eec
1000a59c:	100137cc 	.word	0x100137cc
1000a5a0:	100137e0 	.word	0x100137e0
1000a5a4:	10013534 	.word	0x10013534
1000a5a8:	10013828 	.word	0x10013828
1000a5ac:	10013530 	.word	0x10013530
1000a5b0:	100137b8 	.word	0x100137b8
1000a5b4:	10013d6c 	.word	0x10013d6c
1000a5b8:	10012278 	.word	0x10012278
1000a5bc:	10010e28 	.word	0x10010e28
1000a5c0:	1000fb5d 	.word	0x1000fb5d

1000a5c4 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000a5c4:	b570      	push	{r4, r5, r6, lr}
1000a5c6:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000a5c8:	4b0d      	ldr	r3, [pc, #52]	; (1000a600 <ble_event_task+0x3c>)
1000a5ca:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000a5cc:	2b01      	cmp	r3, #1
1000a5ce:	d101      	bne.n	1000a5d4 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000a5d0:	4b0c      	ldr	r3, [pc, #48]	; (1000a604 <ble_event_task+0x40>)
1000a5d2:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000a5d4:	0022      	movs	r2, r4
1000a5d6:	490c      	ldr	r1, [pc, #48]	; (1000a608 <ble_event_task+0x44>)
1000a5d8:	480c      	ldr	r0, [pc, #48]	; (1000a60c <ble_event_task+0x48>)
1000a5da:	4b0d      	ldr	r3, [pc, #52]	; (1000a610 <ble_event_task+0x4c>)
1000a5dc:	4798      	blx	r3
1000a5de:	0004      	movs	r4, r0
1000a5e0:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000a5e2:	4b07      	ldr	r3, [pc, #28]	; (1000a600 <ble_event_task+0x3c>)
1000a5e4:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000a5e6:	2b01      	cmp	r3, #1
1000a5e8:	d101      	bne.n	1000a5ee <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000a5ea:	4b0a      	ldr	r3, [pc, #40]	; (1000a614 <ble_event_task+0x50>)
1000a5ec:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000a5ee:	2d00      	cmp	r5, #0
1000a5f0:	d104      	bne.n	1000a5fc <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000a5f2:	4b06      	ldr	r3, [pc, #24]	; (1000a60c <ble_event_task+0x48>)
1000a5f4:	7818      	ldrb	r0, [r3, #0]
1000a5f6:	4904      	ldr	r1, [pc, #16]	; (1000a608 <ble_event_task+0x44>)
1000a5f8:	4b07      	ldr	r3, [pc, #28]	; (1000a618 <ble_event_task+0x54>)
1000a5fa:	4798      	blx	r3
    }
    
    return status;
}
1000a5fc:	0020      	movs	r0, r4
1000a5fe:	bd70      	pop	{r4, r5, r6, pc}
1000a600:	10012287 	.word	0x10012287
1000a604:	1000b04d 	.word	0x1000b04d
1000a608:	10013b60 	.word	0x10013b60
1000a60c:	10013824 	.word	0x10013824
1000a610:	1000b605 	.word	0x1000b605
1000a614:	1000b025 	.word	0x1000b025
1000a618:	1000a49d 	.word	0x1000a49d

1000a61c <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000a61c:	b570      	push	{r4, r5, r6, lr}
1000a61e:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000a620:	ac08      	add	r4, sp, #32
1000a622:	2303      	movs	r3, #3
1000a624:	7063      	strb	r3, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000a626:	220f      	movs	r2, #15
1000a628:	70a2      	strb	r2, [r4, #2]
1000a62a:	3209      	adds	r2, #9
1000a62c:	70e2      	strb	r2, [r4, #3]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000a62e:	7023      	strb	r3, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000a630:	3307      	adds	r3, #7
1000a632:	7123      	strb	r3, [r4, #4]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000a634:	2609      	movs	r6, #9
1000a636:	7166      	strb	r6, [r4, #5]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000a638:	3a0f      	subs	r2, #15
1000a63a:	4912      	ldr	r1, [pc, #72]	; (1000a684 <ble_advertisement_data_set+0x68>)
1000a63c:	2026      	movs	r0, #38	; 0x26
1000a63e:	4468      	add	r0, sp
1000a640:	4d11      	ldr	r5, [pc, #68]	; (1000a688 <ble_advertisement_data_set+0x6c>)
1000a642:	47a8      	blx	r5
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000a644:	2300      	movs	r3, #0
1000a646:	466a      	mov	r2, sp
1000a648:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000a64a:	3315      	adds	r3, #21
1000a64c:	7053      	strb	r3, [r2, #1]
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
	#if (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000a64e:	73e6      	strb	r6, [r4, #15]
		adv_buf[adv_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000a650:	33ea      	adds	r3, #234	; 0xea
1000a652:	7423      	strb	r3, [r4, #16]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000a654:	2208      	movs	r2, #8
1000a656:	490d      	ldr	r1, [pc, #52]	; (1000a68c <ble_advertisement_data_set+0x70>)
1000a658:	3110      	adds	r1, #16
1000a65a:	2031      	movs	r0, #49	; 0x31
1000a65c:	4468      	add	r0, sp
1000a65e:	47a8      	blx	r5
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000a660:	2300      	movs	r3, #0
1000a662:	466a      	mov	r2, sp
1000a664:	2119      	movs	r1, #25
1000a666:	0020      	movs	r0, r4
1000a668:	4c09      	ldr	r4, [pc, #36]	; (1000a690 <ble_advertisement_data_set+0x74>)
1000a66a:	47a0      	blx	r4
1000a66c:	2800      	cmp	r0, #0
1000a66e:	d005      	beq.n	1000a67c <ble_advertisement_data_set+0x60>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000a670:	4808      	ldr	r0, [pc, #32]	; (1000a694 <ble_advertisement_data_set+0x78>)
1000a672:	4b09      	ldr	r3, [pc, #36]	; (1000a698 <ble_advertisement_data_set+0x7c>)
1000a674:	4798      	blx	r3
1000a676:	4809      	ldr	r0, [pc, #36]	; (1000a69c <ble_advertisement_data_set+0x80>)
1000a678:	4b09      	ldr	r3, [pc, #36]	; (1000a6a0 <ble_advertisement_data_set+0x84>)
1000a67a:	4798      	blx	r3
		return status;
		} else {
		DBG_LOG_DEV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
	}
}
1000a67c:	2000      	movs	r0, #0
1000a67e:	b010      	add	sp, #64	; 0x40
1000a680:	bd70      	pop	{r4, r5, r6, pc}
1000a682:	46c0      	nop			; (mov r8, r8)
1000a684:	10011438 	.word	0x10011438
1000a688:	1000fa1b 	.word	0x1000fa1b
1000a68c:	10010fdc 	.word	0x10010fdc
1000a690:	1000c065 	.word	0x1000c065
1000a694:	10010e28 	.word	0x10010e28
1000a698:	1000fb5d 	.word	0x1000fb5d
1000a69c:	10011610 	.word	0x10011610
1000a6a0:	1000fa3d 	.word	0x1000fa3d

1000a6a4 <aon_sleep_timer_service_init>:
 */

aon_timer_status aon_status = AON_TIMER_IDLE;

bool aon_sleep_timer_service_init(uint32_t _sec)
{
1000a6a4:	b510      	push	{r4, lr}
1000a6a6:	b082      	sub	sp, #8
1000a6a8:	1e04      	subs	r4, r0, #0
	#define CONF_AON_SLEEP_COUNTER      32768    /* About 1s */
	struct aon_sleep_timer_config config;
	
	if(_sec <= 0)
1000a6aa:	d100      	bne.n	1000a6ae <aon_sleep_timer_service_init+0xa>
		_sec = 1;
1000a6ac:	3401      	adds	r4, #1

	aon_sleep_timer_get_config_defaults(&config);
1000a6ae:	4668      	mov	r0, sp
1000a6b0:	4b07      	ldr	r3, [pc, #28]	; (1000a6d0 <aon_sleep_timer_service_init+0x2c>)
1000a6b2:	4798      	blx	r3
	config.wakeup = AON_SLEEP_TIMER_WAKEUP_ARM_BLE;
1000a6b4:	2302      	movs	r3, #2
1000a6b6:	466a      	mov	r2, sp
1000a6b8:	7013      	strb	r3, [r2, #0]
	config.mode = AON_SLEEP_TIMER_RELOAD_MODE;//AON_SLEEP_TIMER_SINGLE_MODE
1000a6ba:	2300      	movs	r3, #0
1000a6bc:	7053      	strb	r3, [r2, #1]
	config.counter = _sec * CONF_AON_SLEEP_COUNTER;
1000a6be:	03e4      	lsls	r4, r4, #15
1000a6c0:	9401      	str	r4, [sp, #4]
	aon_sleep_timer_init(&config);
1000a6c2:	4668      	mov	r0, sp
1000a6c4:	4b03      	ldr	r3, [pc, #12]	; (1000a6d4 <aon_sleep_timer_service_init+0x30>)
1000a6c6:	4798      	blx	r3
	
	return true;
}
1000a6c8:	2001      	movs	r0, #1
1000a6ca:	b002      	add	sp, #8
1000a6cc:	bd10      	pop	{r4, pc}
1000a6ce:	46c0      	nop			; (mov r8, r8)
1000a6d0:	100080e9 	.word	0x100080e9
1000a6d4:	1000816d 	.word	0x1000816d

1000a6d8 <aon_sleep_timer_service_start>:

bool aon_sleep_timer_service_start(aon_sleep_timer_callback_t callback)
{
1000a6d8:	b570      	push	{r4, r5, r6, lr}
	aon_sleep_timer_register_callback(callback);
1000a6da:	4b08      	ldr	r3, [pc, #32]	; (1000a6fc <aon_sleep_timer_service_start+0x24>)
1000a6dc:	4798      	blx	r3
1000a6de:	2280      	movs	r2, #128	; 0x80
1000a6e0:	0512      	lsls	r2, r2, #20
1000a6e2:	4b07      	ldr	r3, [pc, #28]	; (1000a700 <aon_sleep_timer_service_start+0x28>)
1000a6e4:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
		
	while(!aon_sleep_timer_sleep_timer_active())
1000a6e6:	4c07      	ldr	r4, [pc, #28]	; (1000a704 <aon_sleep_timer_service_start+0x2c>)
	
	aon_status = AON_TIMER_ACTIVE;
1000a6e8:	4e07      	ldr	r6, [pc, #28]	; (1000a708 <aon_sleep_timer_service_start+0x30>)
1000a6ea:	2501      	movs	r5, #1
1000a6ec:	e000      	b.n	1000a6f0 <aon_sleep_timer_service_start+0x18>
1000a6ee:	7035      	strb	r5, [r6, #0]
bool aon_sleep_timer_service_start(aon_sleep_timer_callback_t callback)
{
	aon_sleep_timer_register_callback(callback);
	NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
		
	while(!aon_sleep_timer_sleep_timer_active())
1000a6f0:	47a0      	blx	r4
1000a6f2:	2800      	cmp	r0, #0
1000a6f4:	d0fb      	beq.n	1000a6ee <aon_sleep_timer_service_start+0x16>
	
	aon_status = AON_TIMER_ACTIVE;
	return true;
}
1000a6f6:	2001      	movs	r0, #1
1000a6f8:	bd70      	pop	{r4, r5, r6, pc}
1000a6fa:	46c0      	nop			; (mov r8, r8)
1000a6fc:	10008155 	.word	0x10008155
1000a700:	e000e100 	.word	0xe000e100
1000a704:	10008119 	.word	0x10008119
1000a708:	10013288 	.word	0x10013288

1000a70c <aon_sleep_timer_service_stop>:

/**
 * \aon timemr stop
 */
void aon_sleep_timer_service_stop()
{	
1000a70c:	b510      	push	{r4, lr}
	if( aon_status != AON_TIMER_ACTIVE )
1000a70e:	4b08      	ldr	r3, [pc, #32]	; (1000a730 <aon_sleep_timer_service_stop+0x24>)
1000a710:	781b      	ldrb	r3, [r3, #0]
1000a712:	2b01      	cmp	r3, #1
1000a714:	d10b      	bne.n	1000a72e <aon_sleep_timer_service_stop+0x22>
		return ;
	
	aon_status = AON_TIMER_IDLE;
1000a716:	2200      	movs	r2, #0
1000a718:	4b05      	ldr	r3, [pc, #20]	; (1000a730 <aon_sleep_timer_service_stop+0x24>)
1000a71a:	701a      	strb	r2, [r3, #0]
	
	aon_sleep_timer_disable();
1000a71c:	4b05      	ldr	r3, [pc, #20]	; (1000a734 <aon_sleep_timer_service_stop+0x28>)
1000a71e:	4798      	blx	r3
	aon_sleep_timer_unregister_callback();
1000a720:	4b05      	ldr	r3, [pc, #20]	; (1000a738 <aon_sleep_timer_service_stop+0x2c>)
1000a722:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a724:	2180      	movs	r1, #128	; 0x80
1000a726:	0509      	lsls	r1, r1, #20
1000a728:	2380      	movs	r3, #128	; 0x80
1000a72a:	4a04      	ldr	r2, [pc, #16]	; (1000a73c <aon_sleep_timer_service_stop+0x30>)
1000a72c:	50d1      	str	r1, [r2, r3]
	NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000a72e:	bd10      	pop	{r4, pc}
1000a730:	10013288 	.word	0x10013288
1000a734:	100080f9 	.word	0x100080f9
1000a738:	10008161 	.word	0x10008161
1000a73c:	e000e100 	.word	0xe000e100

1000a740 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000a740:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000a742:	4b0e      	ldr	r3, [pc, #56]	; (1000a77c <uart_read_complete_callback+0x3c>)
1000a744:	781b      	ldrb	r3, [r3, #0]
1000a746:	2b01      	cmp	r3, #1
1000a748:	d10b      	bne.n	1000a762 <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000a74a:	2202      	movs	r2, #2
1000a74c:	4b0b      	ldr	r3, [pc, #44]	; (1000a77c <uart_read_complete_callback+0x3c>)
1000a74e:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000a750:	4b0b      	ldr	r3, [pc, #44]	; (1000a780 <uart_read_complete_callback+0x40>)
1000a752:	681b      	ldr	r3, [r3, #0]
1000a754:	2b00      	cmp	r3, #0
1000a756:	d110      	bne.n	1000a77a <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000a758:	2102      	movs	r1, #2
1000a75a:	480a      	ldr	r0, [pc, #40]	; (1000a784 <uart_read_complete_callback+0x44>)
1000a75c:	4b0a      	ldr	r3, [pc, #40]	; (1000a788 <uart_read_complete_callback+0x48>)
1000a75e:	4798      	blx	r3
1000a760:	e00b      	b.n	1000a77a <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000a762:	4b07      	ldr	r3, [pc, #28]	; (1000a780 <uart_read_complete_callback+0x40>)
1000a764:	681b      	ldr	r3, [r3, #0]
1000a766:	2b00      	cmp	r3, #0
1000a768:	d007      	beq.n	1000a77a <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000a76a:	4c08      	ldr	r4, [pc, #32]	; (1000a78c <uart_read_complete_callback+0x4c>)
1000a76c:	7820      	ldrb	r0, [r4, #0]
1000a76e:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000a770:	2201      	movs	r2, #1
1000a772:	0021      	movs	r1, r4
1000a774:	4803      	ldr	r0, [pc, #12]	; (1000a784 <uart_read_complete_callback+0x44>)
1000a776:	4b06      	ldr	r3, [pc, #24]	; (1000a790 <uart_read_complete_callback+0x50>)
1000a778:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000a77a:	bd10      	pop	{r4, pc}
1000a77c:	10013290 	.word	0x10013290
1000a780:	10013298 	.word	0x10013298
1000a784:	10013d70 	.word	0x10013d70
1000a788:	1000922d 	.word	0x1000922d
1000a78c:	10013294 	.word	0x10013294
1000a790:	100091d1 	.word	0x100091d1

1000a794 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000a794:	b570      	push	{r4, r5, r6, lr}
1000a796:	0006      	movs	r6, r0
1000a798:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000a79a:	4c03      	ldr	r4, [pc, #12]	; (1000a7a8 <usart_serial_getchar+0x14>)
1000a79c:	0029      	movs	r1, r5
1000a79e:	0030      	movs	r0, r6
1000a7a0:	47a0      	blx	r4
1000a7a2:	2800      	cmp	r0, #0
1000a7a4:	d1fa      	bne.n	1000a79c <usart_serial_getchar+0x8>
}
1000a7a6:	bd70      	pop	{r4, r5, r6, pc}
1000a7a8:	100091bd 	.word	0x100091bd

1000a7ac <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000a7ac:	b570      	push	{r4, r5, r6, lr}
1000a7ae:	0006      	movs	r6, r0
1000a7b0:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000a7b2:	4c03      	ldr	r4, [pc, #12]	; (1000a7c0 <usart_serial_putchar+0x14>)
1000a7b4:	0029      	movs	r1, r5
1000a7b6:	0030      	movs	r0, r6
1000a7b8:	47a0      	blx	r4
1000a7ba:	2800      	cmp	r0, #0
1000a7bc:	d1fa      	bne.n	1000a7b4 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000a7be:	bd70      	pop	{r4, r5, r6, pc}
1000a7c0:	100091ad 	.word	0x100091ad

1000a7c4 <serial_console_init>:

void serial_console_init(void)
{
1000a7c4:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000a7c6:	2100      	movs	r1, #0
1000a7c8:	2000      	movs	r0, #0
1000a7ca:	4b19      	ldr	r3, [pc, #100]	; (1000a830 <serial_console_init+0x6c>)
1000a7cc:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000a7ce:	4c19      	ldr	r4, [pc, #100]	; (1000a834 <serial_console_init+0x70>)
1000a7d0:	0020      	movs	r0, r4
1000a7d2:	4b19      	ldr	r3, [pc, #100]	; (1000a838 <serial_console_init+0x74>)
1000a7d4:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000a7d6:	23e1      	movs	r3, #225	; 0xe1
1000a7d8:	025b      	lsls	r3, r3, #9
1000a7da:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000a7dc:	2302      	movs	r3, #2
1000a7de:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000a7e0:	2203      	movs	r2, #3
1000a7e2:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000a7e4:	3201      	adds	r2, #1
1000a7e6:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000a7e8:	3201      	adds	r2, #1
1000a7ea:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000a7ec:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000a7ee:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000a7f0:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000a7f2:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000a7f4:	4d11      	ldr	r5, [pc, #68]	; (1000a83c <serial_console_init+0x78>)
1000a7f6:	4b12      	ldr	r3, [pc, #72]	; (1000a840 <serial_console_init+0x7c>)
1000a7f8:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000a7fa:	4a12      	ldr	r2, [pc, #72]	; (1000a844 <serial_console_init+0x80>)
1000a7fc:	4b12      	ldr	r3, [pc, #72]	; (1000a848 <serial_console_init+0x84>)
1000a7fe:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000a800:	4a12      	ldr	r2, [pc, #72]	; (1000a84c <serial_console_init+0x88>)
1000a802:	4b13      	ldr	r3, [pc, #76]	; (1000a850 <serial_console_init+0x8c>)
1000a804:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000a806:	0022      	movs	r2, r4
1000a808:	4912      	ldr	r1, [pc, #72]	; (1000a854 <serial_console_init+0x90>)
1000a80a:	0028      	movs	r0, r5
1000a80c:	4b12      	ldr	r3, [pc, #72]	; (1000a858 <serial_console_init+0x94>)
1000a80e:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000a810:	4e12      	ldr	r6, [pc, #72]	; (1000a85c <serial_console_init+0x98>)
1000a812:	6833      	ldr	r3, [r6, #0]
1000a814:	6898      	ldr	r0, [r3, #8]
1000a816:	2100      	movs	r1, #0
1000a818:	4c11      	ldr	r4, [pc, #68]	; (1000a860 <serial_console_init+0x9c>)
1000a81a:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000a81c:	6833      	ldr	r3, [r6, #0]
1000a81e:	6858      	ldr	r0, [r3, #4]
1000a820:	2100      	movs	r1, #0
1000a822:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000a824:	2202      	movs	r2, #2
1000a826:	490f      	ldr	r1, [pc, #60]	; (1000a864 <serial_console_init+0xa0>)
1000a828:	0028      	movs	r0, r5
1000a82a:	4b0f      	ldr	r3, [pc, #60]	; (1000a868 <serial_console_init+0xa4>)
1000a82c:	4798      	blx	r3
}
1000a82e:	bd70      	pop	{r4, r5, r6, pc}
1000a830:	10008539 	.word	0x10008539
1000a834:	10013d94 	.word	0x10013d94
1000a838:	10008fc5 	.word	0x10008fc5
1000a83c:	10013d70 	.word	0x10013d70
1000a840:	10013524 	.word	0x10013524
1000a844:	1000a7ad 	.word	0x1000a7ad
1000a848:	10013520 	.word	0x10013520
1000a84c:	1000a795 	.word	0x1000a795
1000a850:	1001351c 	.word	0x1001351c
1000a854:	40004000 	.word	0x40004000
1000a858:	10008ff1 	.word	0x10008ff1
1000a85c:	1001196c 	.word	0x1001196c
1000a860:	1000fbe9 	.word	0x1000fbe9
1000a864:	1000a741 	.word	0x1000a741
1000a868:	100091f9 	.word	0x100091f9

1000a86c <_time_start>:

void _time_start(unsigned int sec)
{
1000a86c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a86e:	b083      	sub	sp, #12
1000a870:	0005      	movs	r5, r0
	system_clock_get_value();
1000a872:	4c0d      	ldr	r4, [pc, #52]	; (1000a8a8 <_time_start+0x3c>)
1000a874:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000a876:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000a878:	4f0c      	ldr	r7, [pc, #48]	; (1000a8ac <_time_start+0x40>)
1000a87a:	47b8      	blx	r7
1000a87c:	4e0c      	ldr	r6, [pc, #48]	; (1000a8b0 <_time_start+0x44>)
1000a87e:	4a0d      	ldr	r2, [pc, #52]	; (1000a8b4 <_time_start+0x48>)
1000a880:	4b0d      	ldr	r3, [pc, #52]	; (1000a8b8 <_time_start+0x4c>)
1000a882:	47b0      	blx	r6
1000a884:	9000      	str	r0, [sp, #0]
1000a886:	9101      	str	r1, [sp, #4]
1000a888:	20fa      	movs	r0, #250	; 0xfa
1000a88a:	0080      	lsls	r0, r0, #2
1000a88c:	4368      	muls	r0, r5
1000a88e:	47b8      	blx	r7
1000a890:	0002      	movs	r2, r0
1000a892:	000b      	movs	r3, r1
1000a894:	9800      	ldr	r0, [sp, #0]
1000a896:	9901      	ldr	r1, [sp, #4]
1000a898:	47b0      	blx	r6
1000a89a:	4b08      	ldr	r3, [pc, #32]	; (1000a8bc <_time_start+0x50>)
1000a89c:	4798      	blx	r3
1000a89e:	4b08      	ldr	r3, [pc, #32]	; (1000a8c0 <_time_start+0x54>)
1000a8a0:	6018      	str	r0, [r3, #0]
}
1000a8a2:	b003      	add	sp, #12
1000a8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a8a6:	46c0      	nop			; (mov r8, r8)
1000a8a8:	100085bd 	.word	0x100085bd
1000a8ac:	1000f66d 	.word	0x1000f66d
1000a8b0:	1000ea65 	.word	0x1000ea65
1000a8b4:	19feaec7 	.word	0x19feaec7
1000a8b8:	3f09d8ef 	.word	0x3f09d8ef
1000a8bc:	1000ea29 	.word	0x1000ea29
1000a8c0:	1001328c 	.word	0x1001328c

1000a8c4 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000a8c4:	4b02      	ldr	r3, [pc, #8]	; (1000a8d0 <_time_done+0xc>)
1000a8c6:	681a      	ldr	r2, [r3, #0]
1000a8c8:	1e50      	subs	r0, r2, #1
1000a8ca:	6018      	str	r0, [r3, #0]
}
1000a8cc:	4770      	bx	lr
1000a8ce:	46c0      	nop			; (mov r8, r8)
1000a8d0:	1001328c 	.word	0x1001328c

1000a8d4 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000a8d4:	b570      	push	{r4, r5, r6, lr}
1000a8d6:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000a8d8:	2201      	movs	r2, #1
1000a8da:	4b11      	ldr	r3, [pc, #68]	; (1000a920 <getchar_b11_timeout+0x4c>)
1000a8dc:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000a8de:	4b11      	ldr	r3, [pc, #68]	; (1000a924 <getchar_b11_timeout+0x50>)
1000a8e0:	681b      	ldr	r3, [r3, #0]
1000a8e2:	2b00      	cmp	r3, #0
1000a8e4:	d103      	bne.n	1000a8ee <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000a8e6:	2102      	movs	r1, #2
1000a8e8:	480f      	ldr	r0, [pc, #60]	; (1000a928 <getchar_b11_timeout+0x54>)
1000a8ea:	4b10      	ldr	r3, [pc, #64]	; (1000a92c <getchar_b11_timeout+0x58>)
1000a8ec:	4798      	blx	r3

	_time_start(sec);
1000a8ee:	0020      	movs	r0, r4
1000a8f0:	4b0f      	ldr	r3, [pc, #60]	; (1000a930 <getchar_b11_timeout+0x5c>)
1000a8f2:	4798      	blx	r3
	
	string_input[0] = 0;
1000a8f4:	490f      	ldr	r1, [pc, #60]	; (1000a934 <getchar_b11_timeout+0x60>)
1000a8f6:	2300      	movs	r3, #0
1000a8f8:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000a8fa:	2201      	movs	r2, #1
1000a8fc:	480a      	ldr	r0, [pc, #40]	; (1000a928 <getchar_b11_timeout+0x54>)
1000a8fe:	4b0e      	ldr	r3, [pc, #56]	; (1000a938 <getchar_b11_timeout+0x64>)
1000a900:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000a902:	4c07      	ldr	r4, [pc, #28]	; (1000a920 <getchar_b11_timeout+0x4c>)
1000a904:	4d0d      	ldr	r5, [pc, #52]	; (1000a93c <getchar_b11_timeout+0x68>)
1000a906:	7823      	ldrb	r3, [r4, #0]
1000a908:	2b02      	cmp	r3, #2
1000a90a:	d002      	beq.n	1000a912 <getchar_b11_timeout+0x3e>
1000a90c:	47a8      	blx	r5
1000a90e:	2800      	cmp	r0, #0
1000a910:	d1f9      	bne.n	1000a906 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000a912:	2200      	movs	r2, #0
1000a914:	4b02      	ldr	r3, [pc, #8]	; (1000a920 <getchar_b11_timeout+0x4c>)
1000a916:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000a918:	4b06      	ldr	r3, [pc, #24]	; (1000a934 <getchar_b11_timeout+0x60>)
1000a91a:	7818      	ldrb	r0, [r3, #0]
}
1000a91c:	bd70      	pop	{r4, r5, r6, pc}
1000a91e:	46c0      	nop			; (mov r8, r8)
1000a920:	10013290 	.word	0x10013290
1000a924:	10013298 	.word	0x10013298
1000a928:	10013d70 	.word	0x10013d70
1000a92c:	1000920d 	.word	0x1000920d
1000a930:	1000a86d 	.word	0x1000a86d
1000a934:	10013294 	.word	0x10013294
1000a938:	100091d1 	.word	0x100091d1
1000a93c:	1000a8c5 	.word	0x1000a8c5

1000a940 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000a940:	4b02      	ldr	r3, [pc, #8]	; (1000a94c <platform_event_free+0xc>)
1000a942:	681a      	ldr	r2, [r3, #0]
1000a944:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000a946:	6018      	str	r0, [r3, #0]
}
1000a948:	4770      	bx	lr
1000a94a:	46c0      	nop			; (mov r8, r8)
1000a94c:	100132a0 	.word	0x100132a0

1000a950 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000a950:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000a952:	4b0b      	ldr	r3, [pc, #44]	; (1000a980 <platform_event_post+0x30>)
1000a954:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000a956:	2c00      	cmp	r4, #0
1000a958:	d011      	beq.n	1000a97e <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000a95a:	6825      	ldr	r5, [r4, #0]
1000a95c:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000a95e:	2300      	movs	r3, #0
1000a960:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000a962:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000a964:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000a966:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000a968:	4b06      	ldr	r3, [pc, #24]	; (1000a984 <platform_event_post+0x34>)
1000a96a:	681a      	ldr	r2, [r3, #0]
1000a96c:	2a00      	cmp	r2, #0
1000a96e:	d102      	bne.n	1000a976 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000a970:	601c      	str	r4, [r3, #0]
1000a972:	e004      	b.n	1000a97e <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000a974:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000a976:	6813      	ldr	r3, [r2, #0]
1000a978:	2b00      	cmp	r3, #0
1000a97a:	d1fb      	bne.n	1000a974 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000a97c:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000a97e:	bd30      	pop	{r4, r5, pc}
1000a980:	100132a0 	.word	0x100132a0
1000a984:	1001329c 	.word	0x1001329c

1000a988 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000a988:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000a98a:	2300      	movs	r3, #0
1000a98c:	4a06      	ldr	r2, [pc, #24]	; (1000a9a8 <platform_event_init+0x20>)
1000a98e:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000a990:	4a06      	ldr	r2, [pc, #24]	; (1000a9ac <platform_event_init+0x24>)
1000a992:	6013      	str	r3, [r2, #0]
1000a994:	4c06      	ldr	r4, [pc, #24]	; (1000a9b0 <platform_event_init+0x28>)
1000a996:	0026      	movs	r6, r4
1000a998:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000a99a:	4d06      	ldr	r5, [pc, #24]	; (1000a9b4 <platform_event_init+0x2c>)
1000a99c:	0020      	movs	r0, r4
1000a99e:	47a8      	blx	r5
1000a9a0:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000a9a2:	42b4      	cmp	r4, r6
1000a9a4:	d1fa      	bne.n	1000a99c <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000a9a6:	bd70      	pop	{r4, r5, r6, pc}
1000a9a8:	100132a0 	.word	0x100132a0
1000a9ac:	1001329c 	.word	0x1001329c
1000a9b0:	100132a4 	.word	0x100132a4
1000a9b4:	1000a941 	.word	0x1000a941

1000a9b8 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000a9b8:	b570      	push	{r4, r5, r6, lr}
1000a9ba:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000a9bc:	4b13      	ldr	r3, [pc, #76]	; (1000aa0c <at_ke_msg_send+0x54>)
1000a9be:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000a9c0:	4b13      	ldr	r3, [pc, #76]	; (1000aa10 <at_ke_msg_send+0x58>)
1000a9c2:	681b      	ldr	r3, [r3, #0]
1000a9c4:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000a9c6:	2c0c      	cmp	r4, #12
1000a9c8:	d01f      	beq.n	1000aa0a <at_ke_msg_send+0x52>
1000a9ca:	3c0c      	subs	r4, #12
1000a9cc:	88e3      	ldrh	r3, [r4, #6]
1000a9ce:	2b05      	cmp	r3, #5
1000a9d0:	d01b      	beq.n	1000aa0a <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000a9d2:	07eb      	lsls	r3, r5, #31
1000a9d4:	d414      	bmi.n	1000aa00 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000a9d6:	4b0f      	ldr	r3, [pc, #60]	; (1000aa14 <at_ke_msg_send+0x5c>)
1000a9d8:	681b      	ldr	r3, [r3, #0]
1000a9da:	2002      	movs	r0, #2
1000a9dc:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000a9de:	4b0e      	ldr	r3, [pc, #56]	; (1000aa18 <at_ke_msg_send+0x60>)
1000a9e0:	681b      	ldr	r3, [r3, #0]
1000a9e2:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000a9e4:	4c0d      	ldr	r4, [pc, #52]	; (1000aa1c <at_ke_msg_send+0x64>)
1000a9e6:	2003      	movs	r0, #3
1000a9e8:	6823      	ldr	r3, [r4, #0]
1000a9ea:	4798      	blx	r3
1000a9ec:	2800      	cmp	r0, #0
1000a9ee:	d1fa      	bne.n	1000a9e6 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000a9f0:	4b0b      	ldr	r3, [pc, #44]	; (1000aa20 <at_ke_msg_send+0x68>)
1000a9f2:	681b      	ldr	r3, [r3, #0]
1000a9f4:	3002      	adds	r0, #2
1000a9f6:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000a9f8:	2201      	movs	r2, #1
1000a9fa:	4b0a      	ldr	r3, [pc, #40]	; (1000aa24 <at_ke_msg_send+0x6c>)
1000a9fc:	601a      	str	r2, [r3, #0]
1000a9fe:	e004      	b.n	1000aa0a <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000aa00:	4b09      	ldr	r3, [pc, #36]	; (1000aa28 <at_ke_msg_send+0x70>)
1000aa02:	6818      	ldr	r0, [r3, #0]
1000aa04:	4b09      	ldr	r3, [pc, #36]	; (1000aa2c <at_ke_msg_send+0x74>)
1000aa06:	681b      	ldr	r3, [r3, #0]
1000aa08:	4798      	blx	r3
		}
	}
}
1000aa0a:	bd70      	pop	{r4, r5, r6, pc}
1000aa0c:	4000b1ec 	.word	0x4000b1ec
1000aa10:	1001334c 	.word	0x1001334c
1000aa14:	10013344 	.word	0x10013344
1000aa18:	10013354 	.word	0x10013354
1000aa1c:	10013330 	.word	0x10013330
1000aa20:	10013338 	.word	0x10013338
1000aa24:	4000b020 	.word	0x4000b020
1000aa28:	1001333c 	.word	0x1001333c
1000aa2c:	1001332c 	.word	0x1001332c

1000aa30 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000aa30:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000aa32:	4b06      	ldr	r3, [pc, #24]	; (1000aa4c <samb11_plf_resume_callback+0x1c>)
1000aa34:	4a06      	ldr	r2, [pc, #24]	; (1000aa50 <samb11_plf_resume_callback+0x20>)
1000aa36:	6819      	ldr	r1, [r3, #0]
1000aa38:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000aa3a:	685a      	ldr	r2, [r3, #4]
1000aa3c:	4b05      	ldr	r3, [pc, #20]	; (1000aa54 <samb11_plf_resume_callback+0x24>)
1000aa3e:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000aa40:	4b05      	ldr	r3, [pc, #20]	; (1000aa58 <samb11_plf_resume_callback+0x28>)
1000aa42:	681b      	ldr	r3, [r3, #0]
1000aa44:	2b00      	cmp	r3, #0
1000aa46:	d000      	beq.n	1000aa4a <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000aa48:	4798      	blx	r3
	}
}
1000aa4a:	bd10      	pop	{r4, pc}
1000aa4c:	10013dbc 	.word	0x10013dbc
1000aa50:	4000b00c 	.word	0x4000b00c
1000aa54:	4000b010 	.word	0x4000b010
1000aa58:	10014098 	.word	0x10014098

1000aa5c <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000aa5c:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000aa5e:	2232      	movs	r2, #50	; 0x32
1000aa60:	2100      	movs	r1, #0
1000aa62:	480d      	ldr	r0, [pc, #52]	; (1000aa98 <init_port_list+0x3c>)
1000aa64:	4b0d      	ldr	r3, [pc, #52]	; (1000aa9c <init_port_list+0x40>)
1000aa66:	4798      	blx	r3
1000aa68:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000aa6a:	480b      	ldr	r0, [pc, #44]	; (1000aa98 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000aa6c:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000aa6e:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000aa70:	004a      	lsls	r2, r1, #1
1000aa72:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000aa74:	1882      	adds	r2, r0, r2
1000aa76:	7853      	ldrb	r3, [r2, #1]
1000aa78:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000aa7a:	b2db      	uxtb	r3, r3
1000aa7c:	43a3      	bics	r3, r4
1000aa7e:	7053      	strb	r3, [r2, #1]
1000aa80:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000aa82:	2919      	cmp	r1, #25
1000aa84:	d1f4      	bne.n	1000aa70 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000aa86:	4b04      	ldr	r3, [pc, #16]	; (1000aa98 <init_port_list+0x3c>)
1000aa88:	785a      	ldrb	r2, [r3, #1]
1000aa8a:	3918      	subs	r1, #24
1000aa8c:	438a      	bics	r2, r1
1000aa8e:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000aa90:	78da      	ldrb	r2, [r3, #3]
1000aa92:	438a      	bics	r2, r1
1000aa94:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000aa96:	bd70      	pop	{r4, r5, r6, pc}
1000aa98:	10013dd8 	.word	0x10013dd8
1000aa9c:	1000fa2d 	.word	0x1000fa2d

1000aaa0 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000aaa0:	4a06      	ldr	r2, [pc, #24]	; (1000aabc <init_clock+0x1c>)
1000aaa2:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000aaa4:	4b06      	ldr	r3, [pc, #24]	; (1000aac0 <init_clock+0x20>)
1000aaa6:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000aaa8:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000aaaa:	4a06      	ldr	r2, [pc, #24]	; (1000aac4 <init_clock+0x24>)
1000aaac:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000aaae:	4906      	ldr	r1, [pc, #24]	; (1000aac8 <init_clock+0x28>)
1000aab0:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000aab2:	4b06      	ldr	r3, [pc, #24]	; (1000aacc <init_clock+0x2c>)
1000aab4:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000aab6:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000aab8:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000aaba:	4770      	bx	lr
1000aabc:	4000b00c 	.word	0x4000b00c
1000aac0:	fffe0fd3 	.word	0xfffe0fd3
1000aac4:	10013dbc 	.word	0x10013dbc
1000aac8:	4000b010 	.word	0x4000b010
1000aacc:	ffffe7c0 	.word	0xffffe7c0

1000aad0 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000aad0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000aad2:	4657      	mov	r7, sl
1000aad4:	464e      	mov	r6, r9
1000aad6:	4645      	mov	r5, r8
1000aad8:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000aada:	4b4f      	ldr	r3, [pc, #316]	; (1000ac18 <platform_driver_init+0x148>)
1000aadc:	781b      	ldrb	r3, [r3, #0]
1000aade:	2b00      	cmp	r3, #0
1000aae0:	d004      	beq.n	1000aaec <platform_driver_init+0x1c>
1000aae2:	4b4d      	ldr	r3, [pc, #308]	; (1000ac18 <platform_driver_init+0x148>)
1000aae4:	781b      	ldrb	r3, [r3, #0]
1000aae6:	2b01      	cmp	r3, #1
1000aae8:	d100      	bne.n	1000aaec <platform_driver_init+0x1c>
1000aaea:	e08c      	b.n	1000ac06 <platform_driver_init+0x136>
		init_port_list();
1000aaec:	4b4b      	ldr	r3, [pc, #300]	; (1000ac1c <platform_driver_init+0x14c>)
1000aaee:	4798      	blx	r3
		init_clock();
1000aaf0:	4b4b      	ldr	r3, [pc, #300]	; (1000ac20 <platform_driver_init+0x150>)
1000aaf2:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000aaf4:	2300      	movs	r3, #0
1000aaf6:	4698      	mov	r8, r3
1000aaf8:	4b4a      	ldr	r3, [pc, #296]	; (1000ac24 <platform_driver_init+0x154>)
1000aafa:	4642      	mov	r2, r8
1000aafc:	601a      	str	r2, [r3, #0]
1000aafe:	4c4a      	ldr	r4, [pc, #296]	; (1000ac28 <platform_driver_init+0x158>)
1000ab00:	2380      	movs	r3, #128	; 0x80
1000ab02:	2280      	movs	r2, #128	; 0x80
1000ab04:	0412      	lsls	r2, r2, #16
1000ab06:	4692      	mov	sl, r2
1000ab08:	50e2      	str	r2, [r4, r3]
1000ab0a:	2280      	movs	r2, #128	; 0x80
1000ab0c:	0452      	lsls	r2, r2, #17
1000ab0e:	4691      	mov	r9, r2
1000ab10:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000ab12:	4d46      	ldr	r5, [pc, #280]	; (1000ac2c <platform_driver_init+0x15c>)
1000ab14:	4b46      	ldr	r3, [pc, #280]	; (1000ac30 <platform_driver_init+0x160>)
1000ab16:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000ab18:	4b46      	ldr	r3, [pc, #280]	; (1000ac34 <platform_driver_init+0x164>)
1000ab1a:	4a47      	ldr	r2, [pc, #284]	; (1000ac38 <platform_driver_init+0x168>)
1000ab1c:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000ab1e:	4947      	ldr	r1, [pc, #284]	; (1000ac3c <platform_driver_init+0x16c>)
1000ab20:	4a47      	ldr	r2, [pc, #284]	; (1000ac40 <platform_driver_init+0x170>)
1000ab22:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000ab24:	4a47      	ldr	r2, [pc, #284]	; (1000ac44 <platform_driver_init+0x174>)
1000ab26:	6811      	ldr	r1, [r2, #0]
1000ab28:	4a47      	ldr	r2, [pc, #284]	; (1000ac48 <platform_driver_init+0x178>)
1000ab2a:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000ab2c:	4a47      	ldr	r2, [pc, #284]	; (1000ac4c <platform_driver_init+0x17c>)
1000ab2e:	6811      	ldr	r1, [r2, #0]
1000ab30:	4a47      	ldr	r2, [pc, #284]	; (1000ac50 <platform_driver_init+0x180>)
1000ab32:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000ab34:	4947      	ldr	r1, [pc, #284]	; (1000ac54 <platform_driver_init+0x184>)
1000ab36:	4a48      	ldr	r2, [pc, #288]	; (1000ac58 <platform_driver_init+0x188>)
1000ab38:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000ab3a:	4948      	ldr	r1, [pc, #288]	; (1000ac5c <platform_driver_init+0x18c>)
1000ab3c:	4a48      	ldr	r2, [pc, #288]	; (1000ac60 <platform_driver_init+0x190>)
1000ab3e:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000ab40:	4f48      	ldr	r7, [pc, #288]	; (1000ac64 <platform_driver_init+0x194>)
1000ab42:	4a49      	ldr	r2, [pc, #292]	; (1000ac68 <platform_driver_init+0x198>)
1000ab44:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000ab46:	4949      	ldr	r1, [pc, #292]	; (1000ac6c <platform_driver_init+0x19c>)
1000ab48:	4a49      	ldr	r2, [pc, #292]	; (1000ac70 <platform_driver_init+0x1a0>)
1000ab4a:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000ab4c:	4949      	ldr	r1, [pc, #292]	; (1000ac74 <platform_driver_init+0x1a4>)
1000ab4e:	4a4a      	ldr	r2, [pc, #296]	; (1000ac78 <platform_driver_init+0x1a8>)
1000ab50:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000ab52:	4e4a      	ldr	r6, [pc, #296]	; (1000ac7c <platform_driver_init+0x1ac>)
1000ab54:	4a4a      	ldr	r2, [pc, #296]	; (1000ac80 <platform_driver_init+0x1b0>)
1000ab56:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000ab58:	494a      	ldr	r1, [pc, #296]	; (1000ac84 <platform_driver_init+0x1b4>)
1000ab5a:	4a4b      	ldr	r2, [pc, #300]	; (1000ac88 <platform_driver_init+0x1b8>)
1000ab5c:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000ab5e:	494b      	ldr	r1, [pc, #300]	; (1000ac8c <platform_driver_init+0x1bc>)
1000ab60:	4a4b      	ldr	r2, [pc, #300]	; (1000ac90 <platform_driver_init+0x1c0>)
1000ab62:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000ab64:	494b      	ldr	r1, [pc, #300]	; (1000ac94 <platform_driver_init+0x1c4>)
1000ab66:	4a4c      	ldr	r2, [pc, #304]	; (1000ac98 <platform_driver_init+0x1c8>)
1000ab68:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000ab6a:	494c      	ldr	r1, [pc, #304]	; (1000ac9c <platform_driver_init+0x1cc>)
1000ab6c:	4a4c      	ldr	r2, [pc, #304]	; (1000aca0 <platform_driver_init+0x1d0>)
1000ab6e:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000ab70:	494c      	ldr	r1, [pc, #304]	; (1000aca4 <platform_driver_init+0x1d4>)
1000ab72:	4a4d      	ldr	r2, [pc, #308]	; (1000aca8 <platform_driver_init+0x1d8>)
1000ab74:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000ab76:	2028      	movs	r0, #40	; 0x28
1000ab78:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000ab7a:	494c      	ldr	r1, [pc, #304]	; (1000acac <platform_driver_init+0x1dc>)
1000ab7c:	2028      	movs	r0, #40	; 0x28
1000ab7e:	682b      	ldr	r3, [r5, #0]
1000ab80:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000ab82:	682b      	ldr	r3, [r5, #0]
1000ab84:	494a      	ldr	r1, [pc, #296]	; (1000acb0 <platform_driver_init+0x1e0>)
1000ab86:	2027      	movs	r0, #39	; 0x27
1000ab88:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000ab8a:	4b4a      	ldr	r3, [pc, #296]	; (1000acb4 <platform_driver_init+0x1e4>)
1000ab8c:	681a      	ldr	r2, [r3, #0]
1000ab8e:	4b4a      	ldr	r3, [pc, #296]	; (1000acb8 <platform_driver_init+0x1e8>)
1000ab90:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000ab92:	4a4a      	ldr	r2, [pc, #296]	; (1000acbc <platform_driver_init+0x1ec>)
1000ab94:	4b4a      	ldr	r3, [pc, #296]	; (1000acc0 <platform_driver_init+0x1f0>)
1000ab96:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000ab98:	4a4a      	ldr	r2, [pc, #296]	; (1000acc4 <platform_driver_init+0x1f4>)
1000ab9a:	4b4b      	ldr	r3, [pc, #300]	; (1000acc8 <platform_driver_init+0x1f8>)
1000ab9c:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000ab9e:	4a4b      	ldr	r2, [pc, #300]	; (1000accc <platform_driver_init+0x1fc>)
1000aba0:	4b4b      	ldr	r3, [pc, #300]	; (1000acd0 <platform_driver_init+0x200>)
1000aba2:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000aba4:	4a4b      	ldr	r2, [pc, #300]	; (1000acd4 <platform_driver_init+0x204>)
1000aba6:	4b4c      	ldr	r3, [pc, #304]	; (1000acd8 <platform_driver_init+0x208>)
1000aba8:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000abaa:	4a4c      	ldr	r2, [pc, #304]	; (1000acdc <platform_driver_init+0x20c>)
1000abac:	4b4c      	ldr	r3, [pc, #304]	; (1000ace0 <platform_driver_init+0x210>)
1000abae:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000abb0:	4a4c      	ldr	r2, [pc, #304]	; (1000ace4 <platform_driver_init+0x214>)
1000abb2:	4b4d      	ldr	r3, [pc, #308]	; (1000ace8 <platform_driver_init+0x218>)
1000abb4:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000abb6:	4a4d      	ldr	r2, [pc, #308]	; (1000acec <platform_driver_init+0x21c>)
1000abb8:	4b4d      	ldr	r3, [pc, #308]	; (1000acf0 <platform_driver_init+0x220>)
1000abba:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000abbc:	22a0      	movs	r2, #160	; 0xa0
1000abbe:	0092      	lsls	r2, r2, #2
1000abc0:	2100      	movs	r1, #0
1000abc2:	484c      	ldr	r0, [pc, #304]	; (1000acf4 <platform_driver_init+0x224>)
1000abc4:	4b4c      	ldr	r3, [pc, #304]	; (1000acf8 <platform_driver_init+0x228>)
1000abc6:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000abc8:	2280      	movs	r2, #128	; 0x80
1000abca:	0092      	lsls	r2, r2, #2
1000abcc:	4b4b      	ldr	r3, [pc, #300]	; (1000acfc <platform_driver_init+0x22c>)
1000abce:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000abd0:	4b4b      	ldr	r3, [pc, #300]	; (1000ad00 <platform_driver_init+0x230>)
1000abd2:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000abd4:	4653      	mov	r3, sl
1000abd6:	6023      	str	r3, [r4, #0]
1000abd8:	464b      	mov	r3, r9
1000abda:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000abdc:	4b49      	ldr	r3, [pc, #292]	; (1000ad04 <platform_driver_init+0x234>)
1000abde:	4642      	mov	r2, r8
1000abe0:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000abe2:	683b      	ldr	r3, [r7, #0]
1000abe4:	4a48      	ldr	r2, [pc, #288]	; (1000ad08 <platform_driver_init+0x238>)
1000abe6:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000abe8:	6833      	ldr	r3, [r6, #0]
1000abea:	4a48      	ldr	r2, [pc, #288]	; (1000ad0c <platform_driver_init+0x23c>)
1000abec:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000abee:	2000      	movs	r0, #0
1000abf0:	4c47      	ldr	r4, [pc, #284]	; (1000ad10 <platform_driver_init+0x240>)
1000abf2:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000abf4:	2001      	movs	r0, #1
1000abf6:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000abf8:	2002      	movs	r0, #2
1000abfa:	47a0      	blx	r4
		platform_initialized = 1;
1000abfc:	2201      	movs	r2, #1
1000abfe:	4b06      	ldr	r3, [pc, #24]	; (1000ac18 <platform_driver_init+0x148>)
1000ac00:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000ac02:	2000      	movs	r0, #0
1000ac04:	e003      	b.n	1000ac0e <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000ac06:	2201      	movs	r2, #1
1000ac08:	4b03      	ldr	r3, [pc, #12]	; (1000ac18 <platform_driver_init+0x148>)
1000ac0a:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000ac0c:	2001      	movs	r0, #1
	}
	return status;
}
1000ac0e:	bc1c      	pop	{r2, r3, r4}
1000ac10:	4690      	mov	r8, r2
1000ac12:	4699      	mov	r9, r3
1000ac14:	46a2      	mov	sl, r4
1000ac16:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ac18:	10013334 	.word	0x10013334
1000ac1c:	1000aa5d 	.word	0x1000aa5d
1000ac20:	1000aaa1 	.word	0x1000aaa1
1000ac24:	10013350 	.word	0x10013350
1000ac28:	e000e100 	.word	0xe000e100
1000ac2c:	1001408c 	.word	0x1001408c
1000ac30:	000007d7 	.word	0x000007d7
1000ac34:	000007bd 	.word	0x000007bd
1000ac38:	10013dc8 	.word	0x10013dc8
1000ac3c:	0001bc51 	.word	0x0001bc51
1000ac40:	10014090 	.word	0x10014090
1000ac44:	100400bc 	.word	0x100400bc
1000ac48:	10013328 	.word	0x10013328
1000ac4c:	100400b8 	.word	0x100400b8
1000ac50:	10013324 	.word	0x10013324
1000ac54:	0001b99f 	.word	0x0001b99f
1000ac58:	10013dc4 	.word	0x10013dc4
1000ac5c:	0001b9db 	.word	0x0001b9db
1000ac60:	10013dd0 	.word	0x10013dd0
1000ac64:	100140a0 	.word	0x100140a0
1000ac68:	1004003c 	.word	0x1004003c
1000ac6c:	10041fc0 	.word	0x10041fc0
1000ac70:	10013dd4 	.word	0x10013dd4
1000ac74:	10041fc4 	.word	0x10041fc4
1000ac78:	1001409c 	.word	0x1001409c
1000ac7c:	10014094 	.word	0x10014094
1000ac80:	10041fd4 	.word	0x10041fd4
1000ac84:	10041fd8 	.word	0x10041fd8
1000ac88:	10013dcc 	.word	0x10013dcc
1000ac8c:	0001cbe9 	.word	0x0001cbe9
1000ac90:	10013344 	.word	0x10013344
1000ac94:	0001cd8f 	.word	0x0001cd8f
1000ac98:	10013338 	.word	0x10013338
1000ac9c:	0001cea3 	.word	0x0001cea3
1000aca0:	10013354 	.word	0x10013354
1000aca4:	0001cbcf 	.word	0x0001cbcf
1000aca8:	10013330 	.word	0x10013330
1000acac:	1000b159 	.word	0x1000b159
1000acb0:	1000b0ed 	.word	0x1000b0ed
1000acb4:	100400e4 	.word	0x100400e4
1000acb8:	1001334c 	.word	0x1001334c
1000acbc:	00019fe9 	.word	0x00019fe9
1000acc0:	1001335c 	.word	0x1001335c
1000acc4:	0001dbdd 	.word	0x0001dbdd
1000acc8:	1001332c 	.word	0x1001332c
1000accc:	0001dc5b 	.word	0x0001dc5b
1000acd0:	10013340 	.word	0x10013340
1000acd4:	100405ec 	.word	0x100405ec
1000acd8:	1001333c 	.word	0x1001333c
1000acdc:	0001d5e3 	.word	0x0001d5e3
1000ace0:	10013348 	.word	0x10013348
1000ace4:	10040c20 	.word	0x10040c20
1000ace8:	10013360 	.word	0x10013360
1000acec:	00019f09 	.word	0x00019f09
1000acf0:	10013320 	.word	0x10013320
1000acf4:	10013e0c 	.word	0x10013e0c
1000acf8:	1000fa2d 	.word	0x1000fa2d
1000acfc:	100140a4 	.word	0x100140a4
1000ad00:	1000a989 	.word	0x1000a989
1000ad04:	10014098 	.word	0x10014098
1000ad08:	1000aa31 	.word	0x1000aa31
1000ad0c:	1000b1b5 	.word	0x1000b1b5
1000ad10:	1000b19d 	.word	0x1000b19d

1000ad14 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000ad14:	4b04      	ldr	r3, [pc, #16]	; (1000ad28 <platform_register_ble_msg_handler+0x14>)
1000ad16:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000ad18:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000ad1a:	2a01      	cmp	r2, #1
1000ad1c:	d102      	bne.n	1000ad24 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000ad1e:	4b03      	ldr	r3, [pc, #12]	; (1000ad2c <platform_register_ble_msg_handler+0x18>)
1000ad20:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000ad22:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000ad24:	0018      	movs	r0, r3
1000ad26:	4770      	bx	lr
1000ad28:	10013334 	.word	0x10013334
1000ad2c:	10013350 	.word	0x10013350

1000ad30 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000ad30:	b570      	push	{r4, r5, r6, lr}
1000ad32:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000ad34:	4b0e      	ldr	r3, [pc, #56]	; (1000ad70 <platform_interface_send+0x40>)
1000ad36:	681b      	ldr	r3, [r3, #0]
1000ad38:	2b00      	cmp	r3, #0
1000ad3a:	d002      	beq.n	1000ad42 <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000ad3c:	8840      	ldrh	r0, [r0, #2]
1000ad3e:	4798      	blx	r3
1000ad40:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000ad42:	88e3      	ldrh	r3, [r4, #6]
1000ad44:	88a2      	ldrh	r2, [r4, #4]
1000ad46:	8861      	ldrh	r1, [r4, #2]
1000ad48:	8820      	ldrh	r0, [r4, #0]
1000ad4a:	4d0a      	ldr	r5, [pc, #40]	; (1000ad74 <platform_interface_send+0x44>)
1000ad4c:	682d      	ldr	r5, [r5, #0]
1000ad4e:	47a8      	blx	r5
1000ad50:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000ad52:	88e2      	ldrh	r2, [r4, #6]
1000ad54:	2a00      	cmp	r2, #0
1000ad56:	d102      	bne.n	1000ad5e <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000ad58:	4b07      	ldr	r3, [pc, #28]	; (1000ad78 <platform_interface_send+0x48>)
1000ad5a:	4798      	blx	r3
1000ad5c:	e006      	b.n	1000ad6c <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000ad5e:	0021      	movs	r1, r4
1000ad60:	3108      	adds	r1, #8
1000ad62:	4b06      	ldr	r3, [pc, #24]	; (1000ad7c <platform_interface_send+0x4c>)
1000ad64:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000ad66:	0028      	movs	r0, r5
1000ad68:	4b03      	ldr	r3, [pc, #12]	; (1000ad78 <platform_interface_send+0x48>)
1000ad6a:	4798      	blx	r3
	}
}
1000ad6c:	bd70      	pop	{r4, r5, r6, pc}
1000ad6e:	46c0      	nop			; (mov r8, r8)
1000ad70:	10013328 	.word	0x10013328
1000ad74:	1001335c 	.word	0x1001335c
1000ad78:	1000a9b9 	.word	0x1000a9b9
1000ad7c:	1000fa1b 	.word	0x1000fa1b

1000ad80 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000ad80:	b570      	push	{r4, r5, r6, lr}
1000ad82:	0015      	movs	r5, r2
1000ad84:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000ad86:	020a      	lsls	r2, r1, #8
1000ad88:	4302      	orrs	r2, r0
1000ad8a:	4b0a      	ldr	r3, [pc, #40]	; (1000adb4 <send_plf_int_msg_ind+0x34>)
1000ad8c:	681e      	ldr	r6, [r3, #0]
1000ad8e:	0023      	movs	r3, r4
1000ad90:	2105      	movs	r1, #5
1000ad92:	20a0      	movs	r0, #160	; 0xa0
1000ad94:	00c0      	lsls	r0, r0, #3
1000ad96:	47b0      	blx	r6
1000ad98:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000ad9a:	d00a      	beq.n	1000adb2 <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000ad9c:	2c00      	cmp	r4, #0
1000ad9e:	d005      	beq.n	1000adac <send_plf_int_msg_ind+0x2c>
1000ada0:	2d00      	cmp	r5, #0
1000ada2:	d003      	beq.n	1000adac <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000ada4:	0022      	movs	r2, r4
1000ada6:	0029      	movs	r1, r5
1000ada8:	4b03      	ldr	r3, [pc, #12]	; (1000adb8 <send_plf_int_msg_ind+0x38>)
1000adaa:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000adac:	0030      	movs	r0, r6
1000adae:	4b03      	ldr	r3, [pc, #12]	; (1000adbc <send_plf_int_msg_ind+0x3c>)
1000adb0:	4798      	blx	r3
	}
}
1000adb2:	bd70      	pop	{r4, r5, r6, pc}
1000adb4:	1001335c 	.word	0x1001335c
1000adb8:	1000fa1b 	.word	0x1000fa1b
1000adbc:	1000a9b9 	.word	0x1000a9b9

1000adc0 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000adc0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000adc2:	465f      	mov	r7, fp
1000adc4:	4656      	mov	r6, sl
1000adc6:	464d      	mov	r5, r9
1000adc8:	4644      	mov	r4, r8
1000adca:	b4f0      	push	{r4, r5, r6, r7}
1000adcc:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000adce:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000add0:	2300      	movs	r3, #0
1000add2:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000add4:	1ce3      	adds	r3, r4, #3
1000add6:	d81c      	bhi.n	1000ae12 <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000add8:	220d      	movs	r2, #13
1000adda:	2100      	movs	r1, #0
1000addc:	a802      	add	r0, sp, #8
1000adde:	4b82      	ldr	r3, [pc, #520]	; (1000afe8 <platform_event_wait+0x228>)
1000ade0:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000ade2:	2333      	movs	r3, #51	; 0x33
1000ade4:	aa02      	add	r2, sp, #8
1000ade6:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000ade8:	3b30      	subs	r3, #48	; 0x30
1000adea:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000adec:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000adee:	3302      	adds	r3, #2
1000adf0:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000adf2:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000adf4:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000adf6:	0a23      	lsrs	r3, r4, #8
1000adf8:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000adfa:	0c23      	lsrs	r3, r4, #16
1000adfc:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000adfe:	0e24      	lsrs	r4, r4, #24
1000ae00:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000ae02:	2301      	movs	r3, #1
1000ae04:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000ae06:	210d      	movs	r1, #13
1000ae08:	0010      	movs	r0, r2
1000ae0a:	4b78      	ldr	r3, [pc, #480]	; (1000afec <platform_event_wait+0x22c>)
1000ae0c:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000ae0e:	2301      	movs	r3, #1
1000ae10:	4699      	mov	r9, r3
1000ae12:	2400      	movs	r4, #0
1000ae14:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000ae16:	4f76      	ldr	r7, [pc, #472]	; (1000aff0 <platform_event_wait+0x230>)
1000ae18:	4e76      	ldr	r6, [pc, #472]	; (1000aff4 <platform_event_wait+0x234>)
1000ae1a:	4977      	ldr	r1, [pc, #476]	; (1000aff8 <platform_event_wait+0x238>)
1000ae1c:	6838      	ldr	r0, [r7, #0]
1000ae1e:	6833      	ldr	r3, [r6, #0]
1000ae20:	4798      	blx	r3
1000ae22:	2800      	cmp	r0, #0
1000ae24:	d000      	beq.n	1000ae28 <platform_event_wait+0x68>
1000ae26:	e088      	b.n	1000af3a <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000ae28:	4b73      	ldr	r3, [pc, #460]	; (1000aff8 <platform_event_wait+0x238>)
1000ae2a:	681c      	ldr	r4, [r3, #0]
1000ae2c:	88a3      	ldrh	r3, [r4, #4]
1000ae2e:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000ae30:	23cd      	movs	r3, #205	; 0xcd
1000ae32:	009b      	lsls	r3, r3, #2
1000ae34:	459a      	cmp	sl, r3
1000ae36:	d100      	bne.n	1000ae3a <platform_event_wait+0x7a>
1000ae38:	e0c7      	b.n	1000afca <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000ae3a:	8923      	ldrh	r3, [r4, #8]
1000ae3c:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000ae3e:	8963      	ldrh	r3, [r4, #10]
1000ae40:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000ae42:	464b      	mov	r3, r9
1000ae44:	2b00      	cmp	r3, #0
1000ae46:	d011      	beq.n	1000ae6c <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000ae48:	220d      	movs	r2, #13
1000ae4a:	2100      	movs	r1, #0
1000ae4c:	a802      	add	r0, sp, #8
1000ae4e:	4b66      	ldr	r3, [pc, #408]	; (1000afe8 <platform_event_wait+0x228>)
1000ae50:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000ae52:	2333      	movs	r3, #51	; 0x33
1000ae54:	aa02      	add	r2, sp, #8
1000ae56:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000ae58:	3b30      	subs	r3, #48	; 0x30
1000ae5a:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000ae5c:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000ae5e:	3302      	adds	r3, #2
1000ae60:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000ae62:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000ae64:	210d      	movs	r1, #13
1000ae66:	0010      	movs	r0, r2
1000ae68:	4b60      	ldr	r3, [pc, #384]	; (1000afec <platform_event_wait+0x22c>)
1000ae6a:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000ae6c:	23a0      	movs	r3, #160	; 0xa0
1000ae6e:	00db      	lsls	r3, r3, #3
1000ae70:	459a      	cmp	sl, r3
1000ae72:	d121      	bne.n	1000aeb8 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000ae74:	4b61      	ldr	r3, [pc, #388]	; (1000affc <platform_event_wait+0x23c>)
1000ae76:	881b      	ldrh	r3, [r3, #0]
1000ae78:	4443      	add	r3, r8
1000ae7a:	22a0      	movs	r2, #160	; 0xa0
1000ae7c:	0092      	lsls	r2, r2, #2
1000ae7e:	4293      	cmp	r3, r2
1000ae80:	dd02      	ble.n	1000ae88 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000ae82:	3a80      	subs	r2, #128	; 0x80
1000ae84:	4b5d      	ldr	r3, [pc, #372]	; (1000affc <platform_event_wait+0x23c>)
1000ae86:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000ae88:	4b5c      	ldr	r3, [pc, #368]	; (1000affc <platform_event_wait+0x23c>)
1000ae8a:	469a      	mov	sl, r3
1000ae8c:	881d      	ldrh	r5, [r3, #0]
1000ae8e:	4b5c      	ldr	r3, [pc, #368]	; (1000b000 <platform_event_wait+0x240>)
1000ae90:	18ed      	adds	r5, r5, r3
1000ae92:	0021      	movs	r1, r4
1000ae94:	310c      	adds	r1, #12
1000ae96:	4642      	mov	r2, r8
1000ae98:	0028      	movs	r0, r5
1000ae9a:	4b5a      	ldr	r3, [pc, #360]	; (1000b004 <platform_event_wait+0x244>)
1000ae9c:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000ae9e:	4642      	mov	r2, r8
1000aea0:	0029      	movs	r1, r5
1000aea2:	4658      	mov	r0, fp
1000aea4:	4b58      	ldr	r3, [pc, #352]	; (1000b008 <platform_event_wait+0x248>)
1000aea6:	4798      	blx	r3
				plf_event_buff_index += len;
1000aea8:	4653      	mov	r3, sl
1000aeaa:	881b      	ldrh	r3, [r3, #0]
1000aeac:	4443      	add	r3, r8
1000aeae:	4652      	mov	r2, sl
1000aeb0:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000aeb2:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000aeb4:	2502      	movs	r5, #2
1000aeb6:	e03a      	b.n	1000af2e <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000aeb8:	4b54      	ldr	r3, [pc, #336]	; (1000b00c <platform_event_wait+0x24c>)
1000aeba:	681b      	ldr	r3, [r3, #0]
1000aebc:	2b00      	cmp	r3, #0
1000aebe:	d032      	beq.n	1000af26 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000aec0:	4b4d      	ldr	r3, [pc, #308]	; (1000aff8 <platform_event_wait+0x238>)
1000aec2:	681a      	ldr	r2, [r3, #0]
1000aec4:	8893      	ldrh	r3, [r2, #4]
1000aec6:	21cd      	movs	r1, #205	; 0xcd
1000aec8:	0089      	lsls	r1, r1, #2
1000aeca:	428b      	cmp	r3, r1
1000aecc:	d104      	bne.n	1000aed8 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000aece:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000aed0:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000aed2:	2b00      	cmp	r3, #0
1000aed4:	d02b      	beq.n	1000af2e <platform_event_wait+0x16e>
1000aed6:	e028      	b.n	1000af2a <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000aed8:	4c4d      	ldr	r4, [pc, #308]	; (1000b010 <platform_event_wait+0x250>)
1000aeda:	4d49      	ldr	r5, [pc, #292]	; (1000b000 <platform_event_wait+0x240>)
1000aedc:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000aede:	702b      	strb	r3, [r5, #0]
1000aee0:	0a1b      	lsrs	r3, r3, #8
1000aee2:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000aee4:	8910      	ldrh	r0, [r2, #8]
1000aee6:	4b4b      	ldr	r3, [pc, #300]	; (1000b014 <platform_event_wait+0x254>)
1000aee8:	681b      	ldr	r3, [r3, #0]
1000aeea:	4798      	blx	r3
1000aeec:	7128      	strb	r0, [r5, #4]
1000aeee:	0a00      	lsrs	r0, r0, #8
1000aef0:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000aef2:	6820      	ldr	r0, [r4, #0]
1000aef4:	4b40      	ldr	r3, [pc, #256]	; (1000aff8 <platform_event_wait+0x238>)
1000aef6:	681a      	ldr	r2, [r3, #0]
1000aef8:	88d2      	ldrh	r2, [r2, #6]
1000aefa:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000aefc:	681d      	ldr	r5, [r3, #0]
1000aefe:	896b      	ldrh	r3, [r5, #10]
1000af00:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000af02:	3008      	adds	r0, #8
1000af04:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000af06:	896a      	ldrh	r2, [r5, #10]
1000af08:	2a00      	cmp	r2, #0
1000af0a:	d003      	beq.n	1000af14 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000af0c:	0029      	movs	r1, r5
1000af0e:	310c      	adds	r1, #12
1000af10:	4b3c      	ldr	r3, [pc, #240]	; (1000b004 <platform_event_wait+0x244>)
1000af12:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000af14:	8969      	ldrh	r1, [r5, #10]
1000af16:	3108      	adds	r1, #8
1000af18:	4b3c      	ldr	r3, [pc, #240]	; (1000b00c <platform_event_wait+0x24c>)
1000af1a:	681b      	ldr	r3, [r3, #0]
1000af1c:	4838      	ldr	r0, [pc, #224]	; (1000b000 <platform_event_wait+0x240>)
1000af1e:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000af20:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000af22:	2503      	movs	r5, #3
1000af24:	e003      	b.n	1000af2e <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000af26:	2400      	movs	r4, #0
1000af28:	e001      	b.n	1000af2e <platform_event_wait+0x16e>
1000af2a:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000af2c:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000af2e:	4b32      	ldr	r3, [pc, #200]	; (1000aff8 <platform_event_wait+0x238>)
1000af30:	6818      	ldr	r0, [r3, #0]
1000af32:	4b39      	ldr	r3, [pc, #228]	; (1000b018 <platform_event_wait+0x258>)
1000af34:	681b      	ldr	r3, [r3, #0]
1000af36:	4798      	blx	r3
1000af38:	e000      	b.n	1000af3c <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000af3a:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000af3c:	2c00      	cmp	r4, #0
1000af3e:	d000      	beq.n	1000af42 <platform_event_wait+0x182>
1000af40:	e76b      	b.n	1000ae1a <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000af42:	464b      	mov	r3, r9
1000af44:	2b00      	cmp	r3, #0
1000af46:	d046      	beq.n	1000afd6 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000af48:	4b29      	ldr	r3, [pc, #164]	; (1000aff0 <platform_event_wait+0x230>)
1000af4a:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000af4c:	2e00      	cmp	r6, #0
1000af4e:	d104      	bne.n	1000af5a <platform_event_wait+0x19a>
1000af50:	2300      	movs	r3, #0
1000af52:	6a1c      	ldr	r4, [r3, #32]
1000af54:	2c00      	cmp	r4, #0
1000af56:	d131      	bne.n	1000afbc <platform_event_wait+0x1fc>
1000af58:	e03d      	b.n	1000afd6 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000af5a:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000af5c:	2314      	movs	r3, #20
1000af5e:	469c      	mov	ip, r3
1000af60:	44b4      	add	ip, r6
1000af62:	4663      	mov	r3, ip
1000af64:	4660      	mov	r0, ip
1000af66:	9300      	str	r3, [sp, #0]
1000af68:	4b2c      	ldr	r3, [pc, #176]	; (1000b01c <platform_event_wait+0x25c>)
1000af6a:	681b      	ldr	r3, [r3, #0]
1000af6c:	4798      	blx	r3
	while(NULL != current)
1000af6e:	2c00      	cmp	r4, #0
1000af70:	d01f      	beq.n	1000afb2 <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000af72:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000af74:	23cd      	movs	r3, #205	; 0xcd
1000af76:	009b      	lsls	r3, r3, #2
1000af78:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000af7a:	4b27      	ldr	r3, [pc, #156]	; (1000b018 <platform_event_wait+0x258>)
1000af7c:	469a      	mov	sl, r3
1000af7e:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000af80:	6803      	ldr	r3, [r0, #0]
1000af82:	889b      	ldrh	r3, [r3, #4]
1000af84:	4543      	cmp	r3, r8
1000af86:	d110      	bne.n	1000afaa <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000af88:	2f00      	cmp	r7, #0
1000af8a:	d006      	beq.n	1000af9a <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000af8c:	6883      	ldr	r3, [r0, #8]
1000af8e:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000af90:	4653      	mov	r3, sl
1000af92:	681b      	ldr	r3, [r3, #0]
1000af94:	4798      	blx	r3
				current = prev->pstrNext;
1000af96:	68b8      	ldr	r0, [r7, #8]
1000af98:	e009      	b.n	1000afae <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000af9a:	6883      	ldr	r3, [r0, #8]
1000af9c:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000af9e:	4b1e      	ldr	r3, [pc, #120]	; (1000b018 <platform_event_wait+0x258>)
1000afa0:	681b      	ldr	r3, [r3, #0]
1000afa2:	9301      	str	r3, [sp, #4]
1000afa4:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000afa6:	6a30      	ldr	r0, [r6, #32]
1000afa8:	e001      	b.n	1000afae <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000afaa:	0007      	movs	r7, r0
1000afac:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000afae:	2800      	cmp	r0, #0
1000afb0:	d1e6      	bne.n	1000af80 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000afb2:	4b1b      	ldr	r3, [pc, #108]	; (1000b020 <platform_event_wait+0x260>)
1000afb4:	681b      	ldr	r3, [r3, #0]
1000afb6:	9800      	ldr	r0, [sp, #0]
1000afb8:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000afba:	e00c      	b.n	1000afd6 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000afbc:	2314      	movs	r3, #20
1000afbe:	9300      	str	r3, [sp, #0]
1000afc0:	4b16      	ldr	r3, [pc, #88]	; (1000b01c <platform_event_wait+0x25c>)
1000afc2:	681b      	ldr	r3, [r3, #0]
1000afc4:	2014      	movs	r0, #20
1000afc6:	4798      	blx	r3
1000afc8:	e7d3      	b.n	1000af72 <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000afca:	4b10      	ldr	r3, [pc, #64]	; (1000b00c <platform_event_wait+0x24c>)
1000afcc:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000afce:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000afd0:	2b00      	cmp	r3, #0
1000afd2:	d0ac      	beq.n	1000af2e <platform_event_wait+0x16e>
1000afd4:	e77b      	b.n	1000aece <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000afd6:	0028      	movs	r0, r5
1000afd8:	b007      	add	sp, #28
1000afda:	bc3c      	pop	{r2, r3, r4, r5}
1000afdc:	4690      	mov	r8, r2
1000afde:	4699      	mov	r9, r3
1000afe0:	46a2      	mov	sl, r4
1000afe2:	46ab      	mov	fp, r5
1000afe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000afe6:	46c0      	nop			; (mov r8, r8)
1000afe8:	1000fa2d 	.word	0x1000fa2d
1000afec:	1000ad31 	.word	0x1000ad31
1000aff0:	10013360 	.word	0x10013360
1000aff4:	10013348 	.word	0x10013348
1000aff8:	1001331c 	.word	0x1001331c
1000affc:	100140a4 	.word	0x100140a4
1000b000:	10013e0c 	.word	0x10013e0c
1000b004:	1000fa1b 	.word	0x1000fa1b
1000b008:	1000a951 	.word	0x1000a951
1000b00c:	10013350 	.word	0x10013350
1000b010:	10013358 	.word	0x10013358
1000b014:	10013324 	.word	0x10013324
1000b018:	10013320 	.word	0x10013320
1000b01c:	10013340 	.word	0x10013340
1000b020:	1001332c 	.word	0x1001332c

1000b024 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000b024:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000b026:	4b03      	ldr	r3, [pc, #12]	; (1000b034 <acquire_sleep_lock+0x10>)
1000b028:	681b      	ldr	r3, [r3, #0]
1000b02a:	2080      	movs	r0, #128	; 0x80
1000b02c:	0200      	lsls	r0, r0, #8
1000b02e:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000b030:	2008      	movs	r0, #8
1000b032:	bd10      	pop	{r4, pc}
1000b034:	10013dc4 	.word	0x10013dc4

1000b038 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000b038:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000b03a:	4b03      	ldr	r3, [pc, #12]	; (1000b048 <release_message_lock+0x10>)
1000b03c:	681b      	ldr	r3, [r3, #0]
1000b03e:	2080      	movs	r0, #128	; 0x80
1000b040:	01c0      	lsls	r0, r0, #7
1000b042:	4798      	blx	r3
	return status;
}
1000b044:	2000      	movs	r0, #0
1000b046:	bd10      	pop	{r4, pc}
1000b048:	10013dd0 	.word	0x10013dd0

1000b04c <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000b04c:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000b04e:	4c05      	ldr	r4, [pc, #20]	; (1000b064 <release_sleep_lock+0x18>)
1000b050:	2080      	movs	r0, #128	; 0x80
1000b052:	01c0      	lsls	r0, r0, #7
1000b054:	6823      	ldr	r3, [r4, #0]
1000b056:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000b058:	6823      	ldr	r3, [r4, #0]
1000b05a:	2080      	movs	r0, #128	; 0x80
1000b05c:	0200      	lsls	r0, r0, #8
1000b05e:	4798      	blx	r3
	return status;
}
1000b060:	2000      	movs	r0, #0
1000b062:	bd10      	pop	{r4, pc}
1000b064:	10013dd0 	.word	0x10013dd0

1000b068 <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000b068:	2800      	cmp	r0, #0
1000b06a:	d003      	beq.n	1000b074 <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000b06c:	4b02      	ldr	r3, [pc, #8]	; (1000b078 <register_resume_callback+0x10>)
1000b06e:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000b070:	2000      	movs	r0, #0
1000b072:	e000      	b.n	1000b076 <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000b074:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000b076:	4770      	bx	lr
1000b078:	10014098 	.word	0x10014098

1000b07c <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000b07c:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000b07e:	4a18      	ldr	r2, [pc, #96]	; (1000b0e0 <gpio1_combined_isr_handler+0x64>)
1000b080:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b082:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b084:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000b086:	2180      	movs	r1, #128	; 0x80
1000b088:	0209      	lsls	r1, r1, #8
1000b08a:	4301      	orrs	r1, r0
1000b08c:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b08e:	0010      	movs	r0, r2
1000b090:	4d14      	ldr	r5, [pc, #80]	; (1000b0e4 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b092:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b094:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b096:	05db      	lsls	r3, r3, #23
1000b098:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000b09a:	d011      	beq.n	1000b0c0 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000b09c:	b2db      	uxtb	r3, r3
1000b09e:	4259      	negs	r1, r3
1000b0a0:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000b0a2:	2b01      	cmp	r3, #1
1000b0a4:	d006      	beq.n	1000b0b4 <gpio1_combined_isr_handler+0x38>
1000b0a6:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000b0a8:	085b      	lsrs	r3, r3, #1
				index++;
1000b0aa:	3101      	adds	r1, #1
1000b0ac:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000b0ae:	2b01      	cmp	r3, #1
1000b0b0:	d1fa      	bne.n	1000b0a8 <gpio1_combined_isr_handler+0x2c>
1000b0b2:	e000      	b.n	1000b0b6 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b0b4:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b0b6:	0023      	movs	r3, r4
1000b0b8:	408b      	lsls	r3, r1
1000b0ba:	b29b      	uxth	r3, r3
1000b0bc:	8703      	strh	r3, [r0, #56]	; 0x38
1000b0be:	e003      	b.n	1000b0c8 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b0c0:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000b0c2:	432b      	orrs	r3, r5
1000b0c4:	b29b      	uxth	r3, r3
1000b0c6:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000b0c8:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b0ca:	05db      	lsls	r3, r3, #23
1000b0cc:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000b0ce:	d1e2      	bne.n	1000b096 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000b0d0:	2180      	movs	r1, #128	; 0x80
1000b0d2:	0049      	lsls	r1, r1, #1
1000b0d4:	3381      	adds	r3, #129	; 0x81
1000b0d6:	33ff      	adds	r3, #255	; 0xff
1000b0d8:	4a03      	ldr	r2, [pc, #12]	; (1000b0e8 <gpio1_combined_isr_handler+0x6c>)
1000b0da:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000b0dc:	bd30      	pop	{r4, r5, pc}
1000b0de:	46c0      	nop			; (mov r8, r8)
1000b0e0:	40011000 	.word	0x40011000
1000b0e4:	ffff8000 	.word	0xffff8000
1000b0e8:	e000e100 	.word	0xe000e100

1000b0ec <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000b0ec:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000b0ee:	4a17      	ldr	r2, [pc, #92]	; (1000b14c <gpio0_combined_isr_handler+0x60>)
1000b0f0:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b0f2:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b0f4:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000b0f6:	2180      	movs	r1, #128	; 0x80
1000b0f8:	0209      	lsls	r1, r1, #8
1000b0fa:	4301      	orrs	r1, r0
1000b0fc:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b0fe:	0010      	movs	r0, r2
1000b100:	4d13      	ldr	r5, [pc, #76]	; (1000b150 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b102:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b104:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b106:	05db      	lsls	r3, r3, #23
1000b108:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000b10a:	d011      	beq.n	1000b130 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000b10c:	b2db      	uxtb	r3, r3
1000b10e:	4259      	negs	r1, r3
1000b110:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000b112:	2b01      	cmp	r3, #1
1000b114:	d006      	beq.n	1000b124 <gpio0_combined_isr_handler+0x38>
1000b116:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000b118:	085b      	lsrs	r3, r3, #1
				index++;
1000b11a:	3101      	adds	r1, #1
1000b11c:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000b11e:	2b01      	cmp	r3, #1
1000b120:	d1fa      	bne.n	1000b118 <gpio0_combined_isr_handler+0x2c>
1000b122:	e000      	b.n	1000b126 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b124:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b126:	0023      	movs	r3, r4
1000b128:	408b      	lsls	r3, r1
1000b12a:	b29b      	uxth	r3, r3
1000b12c:	8703      	strh	r3, [r0, #56]	; 0x38
1000b12e:	e003      	b.n	1000b138 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b130:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000b132:	432b      	orrs	r3, r5
1000b134:	b29b      	uxth	r3, r3
1000b136:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000b138:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b13a:	05db      	lsls	r3, r3, #23
1000b13c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000b13e:	d1e2      	bne.n	1000b106 <gpio0_combined_isr_handler+0x1a>
1000b140:	2180      	movs	r1, #128	; 0x80
1000b142:	3381      	adds	r3, #129	; 0x81
1000b144:	33ff      	adds	r3, #255	; 0xff
1000b146:	4a03      	ldr	r2, [pc, #12]	; (1000b154 <gpio0_combined_isr_handler+0x68>)
1000b148:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000b14a:	bd30      	pop	{r4, r5, pc}
1000b14c:	40010000 	.word	0x40010000
1000b150:	ffff8000 	.word	0xffff8000
1000b154:	e000e100 	.word	0xe000e100

1000b158 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000b158:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000b15a:	4b0c      	ldr	r3, [pc, #48]	; (1000b18c <PORT1_COMB_Handler+0x34>)
1000b15c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000b15e:	0b5b      	lsrs	r3, r3, #13
1000b160:	d010      	beq.n	1000b184 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000b162:	4b0b      	ldr	r3, [pc, #44]	; (1000b190 <PORT1_COMB_Handler+0x38>)
1000b164:	681b      	ldr	r3, [r3, #0]
1000b166:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000b168:	4a08      	ldr	r2, [pc, #32]	; (1000b18c <PORT1_COMB_Handler+0x34>)
1000b16a:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b16c:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000b16e:	0b5b      	lsrs	r3, r3, #13
1000b170:	035b      	lsls	r3, r3, #13
1000b172:	430b      	orrs	r3, r1
1000b174:	8713      	strh	r3, [r2, #56]	; 0x38
1000b176:	2180      	movs	r1, #128	; 0x80
1000b178:	0049      	lsls	r1, r1, #1
1000b17a:	23c0      	movs	r3, #192	; 0xc0
1000b17c:	005b      	lsls	r3, r3, #1
1000b17e:	4a05      	ldr	r2, [pc, #20]	; (1000b194 <PORT1_COMB_Handler+0x3c>)
1000b180:	50d1      	str	r1, [r2, r3]
1000b182:	e001      	b.n	1000b188 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000b184:	4b04      	ldr	r3, [pc, #16]	; (1000b198 <PORT1_COMB_Handler+0x40>)
1000b186:	4798      	blx	r3
	}
}
1000b188:	bd10      	pop	{r4, pc}
1000b18a:	46c0      	nop			; (mov r8, r8)
1000b18c:	40011000 	.word	0x40011000
1000b190:	10014090 	.word	0x10014090
1000b194:	e000e100 	.word	0xe000e100
1000b198:	1000b07d 	.word	0x1000b07d

1000b19c <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000b19c:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000b19e:	2802      	cmp	r0, #2
1000b1a0:	d804      	bhi.n	1000b1ac <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000b1a2:	0080      	lsls	r0, r0, #2
1000b1a4:	2200      	movs	r2, #0
1000b1a6:	4b02      	ldr	r3, [pc, #8]	; (1000b1b0 <wakeup_int_unregister_callback+0x14>)
1000b1a8:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000b1aa:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000b1ac:	0018      	movs	r0, r3
1000b1ae:	4770      	bx	lr
1000b1b0:	100140a8 	.word	0x100140a8

1000b1b4 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000b1b4:	b510      	push	{r4, lr}
1000b1b6:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000b1b8:	7803      	ldrb	r3, [r0, #0]
1000b1ba:	2b01      	cmp	r3, #1
1000b1bc:	d108      	bne.n	1000b1d0 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000b1be:	4b11      	ldr	r3, [pc, #68]	; (1000b204 <wakeup_active_event_callback+0x50>)
1000b1c0:	681b      	ldr	r3, [r3, #0]
1000b1c2:	2b00      	cmp	r3, #0
1000b1c4:	d000      	beq.n	1000b1c8 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000b1c6:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000b1c8:	23ff      	movs	r3, #255	; 0xff
1000b1ca:	6822      	ldr	r2, [r4, #0]
1000b1cc:	439a      	bics	r2, r3
1000b1ce:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000b1d0:	7863      	ldrb	r3, [r4, #1]
1000b1d2:	2b01      	cmp	r3, #1
1000b1d4:	d108      	bne.n	1000b1e8 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000b1d6:	4b0b      	ldr	r3, [pc, #44]	; (1000b204 <wakeup_active_event_callback+0x50>)
1000b1d8:	685b      	ldr	r3, [r3, #4]
1000b1da:	2b00      	cmp	r3, #0
1000b1dc:	d000      	beq.n	1000b1e0 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000b1de:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000b1e0:	4b09      	ldr	r3, [pc, #36]	; (1000b208 <wakeup_active_event_callback+0x54>)
1000b1e2:	6822      	ldr	r2, [r4, #0]
1000b1e4:	4013      	ands	r3, r2
1000b1e6:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000b1e8:	78a3      	ldrb	r3, [r4, #2]
1000b1ea:	2b01      	cmp	r3, #1
1000b1ec:	d108      	bne.n	1000b200 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000b1ee:	4b05      	ldr	r3, [pc, #20]	; (1000b204 <wakeup_active_event_callback+0x50>)
1000b1f0:	689b      	ldr	r3, [r3, #8]
1000b1f2:	2b00      	cmp	r3, #0
1000b1f4:	d000      	beq.n	1000b1f8 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000b1f6:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000b1f8:	4b04      	ldr	r3, [pc, #16]	; (1000b20c <wakeup_active_event_callback+0x58>)
1000b1fa:	6822      	ldr	r2, [r4, #0]
1000b1fc:	4013      	ands	r3, r2
1000b1fe:	6023      	str	r3, [r4, #0]
	}
}
1000b200:	bd10      	pop	{r4, pc}
1000b202:	46c0      	nop			; (mov r8, r8)
1000b204:	100140a8 	.word	0x100140a8
1000b208:	ffff00ff 	.word	0xffff00ff
1000b20c:	ff00ffff 	.word	0xff00ffff

1000b210 <ble_paired_app_event>:
}

/* Callback registered for AT_BLE_PAIR_DONE event from stack */
static at_ble_status_t ble_paired_app_event(void *param)
{
	timer_cb_done = false;
1000b210:	2200      	movs	r2, #0
1000b212:	4b02      	ldr	r3, [pc, #8]	; (1000b21c <ble_paired_app_event+0xc>)
1000b214:	701a      	strb	r2, [r3, #0]
	ALL_UNUSED(param);
	return AT_BLE_SUCCESS;
}
1000b216:	2000      	movs	r0, #0
1000b218:	4770      	bx	lr
1000b21a:	46c0      	nop			; (mov r8, r8)
1000b21c:	10013364 	.word	0x10013364

1000b220 <ble_connected_app_event>:
}

static at_ble_status_t ble_connected_app_event(void *param)
{
	at_ble_connected_t *connected = (at_ble_connected_t *)param;
	bat_connection_handle = connected->handle;
1000b220:	8902      	ldrh	r2, [r0, #8]
1000b222:	4b02      	ldr	r3, [pc, #8]	; (1000b22c <ble_connected_app_event+0xc>)
1000b224:	801a      	strh	r2, [r3, #0]
		ble_paired_app_event(param);
	#else
		ALL_UNUSED(param);
	#endif
	return AT_BLE_SUCCESS;
}
1000b226:	2000      	movs	r0, #0
1000b228:	4770      	bx	lr
1000b22a:	46c0      	nop			; (mov r8, r8)
1000b22c:	100140b4 	.word	0x100140b4

1000b230 <resume_cb>:
	NULL,
	NULL
};

void resume_cb(void)
{
1000b230:	b510      	push	{r4, lr}
	init_port_list();
1000b232:	4b02      	ldr	r3, [pc, #8]	; (1000b23c <resume_cb+0xc>)
1000b234:	4798      	blx	r3
	serial_console_init();
1000b236:	4b02      	ldr	r3, [pc, #8]	; (1000b240 <resume_cb+0x10>)
1000b238:	4798      	blx	r3
}
1000b23a:	bd10      	pop	{r4, pc}
1000b23c:	1000aa5d 	.word	0x1000aa5d
1000b240:	1000a7c5 	.word	0x1000a7c5

1000b244 <ble_indication_confirmed_app_event>:
	return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_INDICATION_CONFIRMED event from stack */
static at_ble_status_t ble_indication_confirmed_app_event(void *param)
{
1000b244:	b510      	push	{r4, lr}
	at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)param;
	if(!notification_status->status)
1000b246:	78c3      	ldrb	r3, [r0, #3]
1000b248:	2b00      	cmp	r3, #0
1000b24a:	d108      	bne.n	1000b25e <ble_indication_confirmed_app_event+0x1a>
	{
		flag = true;
1000b24c:	2201      	movs	r2, #1
1000b24e:	4b05      	ldr	r3, [pc, #20]	; (1000b264 <ble_indication_confirmed_app_event+0x20>)
1000b250:	701a      	strb	r2, [r3, #0]
		DBG_LOG("sending indication to the peer success");				
1000b252:	4805      	ldr	r0, [pc, #20]	; (1000b268 <ble_indication_confirmed_app_event+0x24>)
1000b254:	4b05      	ldr	r3, [pc, #20]	; (1000b26c <ble_indication_confirmed_app_event+0x28>)
1000b256:	4798      	blx	r3
1000b258:	4805      	ldr	r0, [pc, #20]	; (1000b270 <ble_indication_confirmed_app_event+0x2c>)
1000b25a:	4b06      	ldr	r3, [pc, #24]	; (1000b274 <ble_indication_confirmed_app_event+0x30>)
1000b25c:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000b25e:	2000      	movs	r0, #0
1000b260:	bd10      	pop	{r4, pc}
1000b262:	46c0      	nop			; (mov r8, r8)
1000b264:	10011905 	.word	0x10011905
1000b268:	10010e28 	.word	0x10010e28
1000b26c:	1000fb5d 	.word	0x1000fb5d
1000b270:	100116cc 	.word	0x100116cc
1000b274:	1000fa3d 	.word	0x1000fa3d

1000b278 <ble_char_changed_app_event>:

/* Callback registered for AT_BLE_CHARACTERISTIC_CHANGED event from stack */
static at_ble_status_t ble_char_changed_app_event(void *param)
{
1000b278:	b510      	push	{r4, lr}
1000b27a:	0004      	movs	r4, r0
	uint16_t device_listening;
	at_ble_characteristic_changed_t *char_handle = (at_ble_characteristic_changed_t *)param;

	if(bas_service_handler.serv_chars.client_config_handle == char_handle->char_handle)
1000b27c:	234a      	movs	r3, #74	; 0x4a
1000b27e:	4a0d      	ldr	r2, [pc, #52]	; (1000b2b4 <ble_char_changed_app_event+0x3c>)
1000b280:	5ad2      	ldrh	r2, [r2, r3]
1000b282:	8843      	ldrh	r3, [r0, #2]
1000b284:	429a      	cmp	r2, r3
1000b286:	d10d      	bne.n	1000b2a4 <ble_char_changed_app_event+0x2c>
	{
		device_listening = char_handle->char_new_value[1]<<8| char_handle->char_new_value[0];
		if(!device_listening)
1000b288:	7a43      	ldrb	r3, [r0, #9]
1000b28a:	021b      	lsls	r3, r3, #8
1000b28c:	7a02      	ldrb	r2, [r0, #8]
1000b28e:	4313      	orrs	r3, r2
1000b290:	d102      	bne.n	1000b298 <ble_char_changed_app_event+0x20>
		{		
			aon_sleep_timer_service_stop();			
1000b292:	4b09      	ldr	r3, [pc, #36]	; (1000b2b8 <ble_char_changed_app_event+0x40>)
1000b294:	4798      	blx	r3
1000b296:	e005      	b.n	1000b2a4 <ble_char_changed_app_event+0x2c>
		}
		else
		{
			aon_sleep_timer_service_init(1);
1000b298:	2001      	movs	r0, #1
1000b29a:	4b08      	ldr	r3, [pc, #32]	; (1000b2bc <ble_char_changed_app_event+0x44>)
1000b29c:	4798      	blx	r3
			aon_sleep_timer_service_start(aon_sleep_timer_callback);
1000b29e:	4808      	ldr	r0, [pc, #32]	; (1000b2c0 <ble_char_changed_app_event+0x48>)
1000b2a0:	4b08      	ldr	r3, [pc, #32]	; (1000b2c4 <ble_char_changed_app_event+0x4c>)
1000b2a2:	4798      	blx	r3
		}			
	}	
	return bat_char_changed_event(char_handle->conn_handle,&bas_service_handler, char_handle, &flag);	
1000b2a4:	7820      	ldrb	r0, [r4, #0]
1000b2a6:	4b08      	ldr	r3, [pc, #32]	; (1000b2c8 <ble_char_changed_app_event+0x50>)
1000b2a8:	0022      	movs	r2, r4
1000b2aa:	4902      	ldr	r1, [pc, #8]	; (1000b2b4 <ble_char_changed_app_event+0x3c>)
1000b2ac:	4c07      	ldr	r4, [pc, #28]	; (1000b2cc <ble_char_changed_app_event+0x54>)
1000b2ae:	47a0      	blx	r4
}
1000b2b0:	bd10      	pop	{r4, pc}
1000b2b2:	46c0      	nop			; (mov r8, r8)
1000b2b4:	100140b8 	.word	0x100140b8
1000b2b8:	1000a70d 	.word	0x1000a70d
1000b2bc:	1000a6a5 	.word	0x1000a6a5
1000b2c0:	1000b2d1 	.word	0x1000b2d1
1000b2c4:	1000a6d9 	.word	0x1000a6d9
1000b2c8:	10011905 	.word	0x10011905
1000b2cc:	10009431 	.word	0x10009431

1000b2d0 <aon_sleep_timer_callback>:

/**
 * \Timer callback handler called on timer expiry
 */
static void aon_sleep_timer_callback(void)
{
1000b2d0:	b510      	push	{r4, lr}
	timer_cb_done = true;
1000b2d2:	2201      	movs	r2, #1
1000b2d4:	4b04      	ldr	r3, [pc, #16]	; (1000b2e8 <aon_sleep_timer_callback+0x18>)
1000b2d6:	701a      	strb	r2, [r3, #0]
	send_plf_int_msg_ind(USER_TIMER_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000b2d8:	2300      	movs	r3, #0
1000b2da:	2200      	movs	r2, #0
1000b2dc:	2101      	movs	r1, #1
1000b2de:	2041      	movs	r0, #65	; 0x41
1000b2e0:	4c02      	ldr	r4, [pc, #8]	; (1000b2ec <aon_sleep_timer_callback+0x1c>)
1000b2e2:	47a0      	blx	r4
}
1000b2e4:	bd10      	pop	{r4, pc}
1000b2e6:	46c0      	nop			; (mov r8, r8)
1000b2e8:	10013364 	.word	0x10013364
1000b2ec:	1000ad81 	.word	0x1000ad81

1000b2f0 <battery_service_advertise>:

/* Advertisement data set and Advertisement start */
static at_ble_status_t battery_service_advertise(void)
{
1000b2f0:	b510      	push	{r4, lr}
1000b2f2:	b084      	sub	sp, #16
	at_ble_status_t status = AT_BLE_FAILURE;
	
	if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS)
1000b2f4:	4b16      	ldr	r3, [pc, #88]	; (1000b350 <battery_service_advertise+0x60>)
1000b2f6:	4798      	blx	r3
1000b2f8:	1e04      	subs	r4, r0, #0
1000b2fa:	d008      	beq.n	1000b30e <battery_service_advertise+0x1e>
	{
		DBG_LOG("advertisement data set failed reason :%d",status);
1000b2fc:	4815      	ldr	r0, [pc, #84]	; (1000b354 <battery_service_advertise+0x64>)
1000b2fe:	4b16      	ldr	r3, [pc, #88]	; (1000b358 <battery_service_advertise+0x68>)
1000b300:	4798      	blx	r3
1000b302:	0021      	movs	r1, r4
1000b304:	4815      	ldr	r0, [pc, #84]	; (1000b35c <battery_service_advertise+0x6c>)
1000b306:	4b16      	ldr	r3, [pc, #88]	; (1000b360 <battery_service_advertise+0x70>)
1000b308:	4798      	blx	r3
		return status;
1000b30a:	0020      	movs	r0, r4
1000b30c:	e01e      	b.n	1000b34c <battery_service_advertise+0x5c>
	}
	
	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_BAS_FAST_ADV, APP_BAS_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
1000b30e:	2300      	movs	r3, #0
1000b310:	9302      	str	r3, [sp, #8]
1000b312:	4b14      	ldr	r3, [pc, #80]	; (1000b364 <battery_service_advertise+0x74>)
1000b314:	9301      	str	r3, [sp, #4]
1000b316:	23c8      	movs	r3, #200	; 0xc8
1000b318:	00db      	lsls	r3, r3, #3
1000b31a:	9300      	str	r3, [sp, #0]
1000b31c:	2300      	movs	r3, #0
1000b31e:	2200      	movs	r2, #0
1000b320:	2101      	movs	r1, #1
1000b322:	2000      	movs	r0, #0
1000b324:	4c10      	ldr	r4, [pc, #64]	; (1000b368 <battery_service_advertise+0x78>)
1000b326:	47a0      	blx	r4
1000b328:	1e04      	subs	r4, r0, #0
1000b32a:	d107      	bne.n	1000b33c <battery_service_advertise+0x4c>
	{
		DBG_LOG("BLE Started Adv");
1000b32c:	4809      	ldr	r0, [pc, #36]	; (1000b354 <battery_service_advertise+0x64>)
1000b32e:	4b0a      	ldr	r3, [pc, #40]	; (1000b358 <battery_service_advertise+0x68>)
1000b330:	4798      	blx	r3
1000b332:	480e      	ldr	r0, [pc, #56]	; (1000b36c <battery_service_advertise+0x7c>)
1000b334:	4b0a      	ldr	r3, [pc, #40]	; (1000b360 <battery_service_advertise+0x70>)
1000b336:	4798      	blx	r3
		return AT_BLE_SUCCESS;
1000b338:	2000      	movs	r0, #0
1000b33a:	e007      	b.n	1000b34c <battery_service_advertise+0x5c>
	}
	else
	{
		DBG_LOG("BLE Adv start Failed reason :%d",status);
1000b33c:	4805      	ldr	r0, [pc, #20]	; (1000b354 <battery_service_advertise+0x64>)
1000b33e:	4b06      	ldr	r3, [pc, #24]	; (1000b358 <battery_service_advertise+0x68>)
1000b340:	4798      	blx	r3
1000b342:	0021      	movs	r1, r4
1000b344:	480a      	ldr	r0, [pc, #40]	; (1000b370 <battery_service_advertise+0x80>)
1000b346:	4b06      	ldr	r3, [pc, #24]	; (1000b360 <battery_service_advertise+0x70>)
1000b348:	4798      	blx	r3
	}
	return status;
1000b34a:	0020      	movs	r0, r4
}
1000b34c:	b004      	add	sp, #16
1000b34e:	bd10      	pop	{r4, pc}
1000b350:	1000a61d 	.word	0x1000a61d
1000b354:	10010e28 	.word	0x10010e28
1000b358:	1000fb5d 	.word	0x1000fb5d
1000b35c:	100116f4 	.word	0x100116f4
1000b360:	1000fa3d 	.word	0x1000fa3d
1000b364:	0000028f 	.word	0x0000028f
1000b368:	1000c0e9 	.word	0x1000c0e9
1000b36c:	10011720 	.word	0x10011720
1000b370:	10011730 	.word	0x10011730

1000b374 <ble_disconnected_app_event>:
	return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_DISCONNECTED event from stack */
static at_ble_status_t ble_disconnected_app_event(void *param)
{
1000b374:	b510      	push	{r4, lr}
	timer_cb_done = false;
1000b376:	2200      	movs	r2, #0
1000b378:	4b05      	ldr	r3, [pc, #20]	; (1000b390 <ble_disconnected_app_event+0x1c>)
1000b37a:	701a      	strb	r2, [r3, #0]
	flag = true;
1000b37c:	3201      	adds	r2, #1
1000b37e:	4b05      	ldr	r3, [pc, #20]	; (1000b394 <ble_disconnected_app_event+0x20>)
1000b380:	701a      	strb	r2, [r3, #0]
	
	aon_sleep_timer_service_stop();
1000b382:	4b05      	ldr	r3, [pc, #20]	; (1000b398 <ble_disconnected_app_event+0x24>)
1000b384:	4798      	blx	r3
	battery_service_advertise();
1000b386:	4b05      	ldr	r3, [pc, #20]	; (1000b39c <ble_disconnected_app_event+0x28>)
1000b388:	4798      	blx	r3
	ALL_UNUSED(param);
	return AT_BLE_SUCCESS;
}
1000b38a:	2000      	movs	r0, #0
1000b38c:	bd10      	pop	{r4, pc}
1000b38e:	46c0      	nop			; (mov r8, r8)
1000b390:	10013364 	.word	0x10013364
1000b394:	10011905 	.word	0x10011905
1000b398:	1000a70d 	.word	0x1000a70d
1000b39c:	1000b2f1 	.word	0x1000b2f1

1000b3a0 <main>:

/**
* \Battery Service Application main function
*/
int main(void)
{
1000b3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b3a2:	b083      	sub	sp, #12
	at_ble_status_t status;
	uint8_t battery_level = BATTERY_MIN_LEVEL;	
1000b3a4:	466b      	mov	r3, sp
1000b3a6:	1ddd      	adds	r5, r3, #7
1000b3a8:	2300      	movs	r3, #0
1000b3aa:	702b      	strb	r3, [r5, #0]
	
	platform_driver_init();
1000b3ac:	4b35      	ldr	r3, [pc, #212]	; (1000b484 <main+0xe4>)
1000b3ae:	4798      	blx	r3
    gpio_init();
1000b3b0:	4b35      	ldr	r3, [pc, #212]	; (1000b488 <main+0xe8>)
1000b3b2:	4798      	blx	r3
	/* Initialize serial console */
	serial_console_init();
1000b3b4:	4b35      	ldr	r3, [pc, #212]	; (1000b48c <main+0xec>)
1000b3b6:	4798      	blx	r3

	acquire_sleep_lock();
1000b3b8:	4b35      	ldr	r3, [pc, #212]	; (1000b490 <main+0xf0>)
1000b3ba:	4798      	blx	r3


	DBG_LOG("Initializing Battery Service Application");
1000b3bc:	4835      	ldr	r0, [pc, #212]	; (1000b494 <main+0xf4>)
1000b3be:	4b36      	ldr	r3, [pc, #216]	; (1000b498 <main+0xf8>)
1000b3c0:	4798      	blx	r3
1000b3c2:	4836      	ldr	r0, [pc, #216]	; (1000b49c <main+0xfc>)
1000b3c4:	4b36      	ldr	r3, [pc, #216]	; (1000b4a0 <main+0x100>)
1000b3c6:	4798      	blx	r3
	
	/* initialize the ble chip  and Set the device mac address */
	ble_device_init(NULL);
1000b3c8:	2000      	movs	r0, #0
1000b3ca:	4b36      	ldr	r3, [pc, #216]	; (1000b4a4 <main+0x104>)
1000b3cc:	4798      	blx	r3
	
	/* Initialize the battery service */
	bat_init_service(&bas_service_handler, &battery_level);
1000b3ce:	4c36      	ldr	r4, [pc, #216]	; (1000b4a8 <main+0x108>)
1000b3d0:	0029      	movs	r1, r5
1000b3d2:	0020      	movs	r0, r4
1000b3d4:	4b35      	ldr	r3, [pc, #212]	; (1000b4ac <main+0x10c>)
1000b3d6:	4798      	blx	r3
	
	/* Define the primary service in the GATT server database */
	if((status = bat_primary_service_define(&bas_service_handler))!= AT_BLE_SUCCESS)
1000b3d8:	0020      	movs	r0, r4
1000b3da:	4b35      	ldr	r3, [pc, #212]	; (1000b4b0 <main+0x110>)
1000b3dc:	4798      	blx	r3
1000b3de:	1e04      	subs	r4, r0, #0
1000b3e0:	d006      	beq.n	1000b3f0 <main+0x50>
	{
		DBG_LOG("defining battery service failed %d", status);
1000b3e2:	482c      	ldr	r0, [pc, #176]	; (1000b494 <main+0xf4>)
1000b3e4:	4b2c      	ldr	r3, [pc, #176]	; (1000b498 <main+0xf8>)
1000b3e6:	4798      	blx	r3
1000b3e8:	0021      	movs	r1, r4
1000b3ea:	4832      	ldr	r0, [pc, #200]	; (1000b4b4 <main+0x114>)
1000b3ec:	4b2c      	ldr	r3, [pc, #176]	; (1000b4a0 <main+0x100>)
1000b3ee:	4798      	blx	r3
	}
	
	battery_service_advertise();
1000b3f0:	4b31      	ldr	r3, [pc, #196]	; (1000b4b8 <main+0x118>)
1000b3f2:	4798      	blx	r3
	
	/* Register callbacks for gap related events */ 
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000b3f4:	4a31      	ldr	r2, [pc, #196]	; (1000b4bc <main+0x11c>)
1000b3f6:	2100      	movs	r1, #0
1000b3f8:	2000      	movs	r0, #0
1000b3fa:	4c31      	ldr	r4, [pc, #196]	; (1000b4c0 <main+0x120>)
1000b3fc:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE,
									battery_app_gap_cb);
									
	/* Register callbacks for gatt server related events */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000b3fe:	4a31      	ldr	r2, [pc, #196]	; (1000b4c4 <main+0x124>)
1000b400:	2102      	movs	r1, #2
1000b402:	2000      	movs	r0, #0
1000b404:	47a0      	blx	r4
									BLE_GATT_SERVER_EVENT_TYPE,
									battery_app_gatt_server_cb);
									
	register_resume_callback(resume_cb);
1000b406:	4830      	ldr	r0, [pc, #192]	; (1000b4c8 <main+0x128>)
1000b408:	4b30      	ldr	r3, [pc, #192]	; (1000b4cc <main+0x12c>)
1000b40a:	4798      	blx	r3
	//ble_set_ulp_mode(BLE_ULP_MODE_SET);

	/* Capturing the events  */ 
	while (1) {
		/* BLE Event Task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000b40c:	4e30      	ldr	r6, [pc, #192]	; (1000b4d0 <main+0x130>)
		if (timer_cb_done)
1000b40e:	4d31      	ldr	r5, [pc, #196]	; (1000b4d4 <main+0x134>)
		{
			timer_cb_done = false;			
1000b410:	002f      	movs	r7, r5
	//ble_set_ulp_mode(BLE_ULP_MODE_SET);

	/* Capturing the events  */ 
	while (1) {
		/* BLE Event Task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000b412:	2401      	movs	r4, #1
1000b414:	4264      	negs	r4, r4
1000b416:	0020      	movs	r0, r4
1000b418:	47b0      	blx	r6
		if (timer_cb_done)
1000b41a:	782b      	ldrb	r3, [r5, #0]
1000b41c:	2b00      	cmp	r3, #0
1000b41e:	d0fa      	beq.n	1000b416 <main+0x76>
		{
			timer_cb_done = false;			
1000b420:	2300      	movs	r3, #0
1000b422:	703b      	strb	r3, [r7, #0]
			/* send the notification and Update the battery level  */			
			if(flag){
1000b424:	4b2c      	ldr	r3, [pc, #176]	; (1000b4d8 <main+0x138>)
1000b426:	781b      	ldrb	r3, [r3, #0]
1000b428:	2b00      	cmp	r3, #0
1000b42a:	d0f2      	beq.n	1000b412 <main+0x72>
				if(bat_update_char_value(bat_connection_handle,&bas_service_handler, battery_level, &flag) == AT_BLE_SUCCESS)
1000b42c:	466b      	mov	r3, sp
1000b42e:	79da      	ldrb	r2, [r3, #7]
1000b430:	4b2a      	ldr	r3, [pc, #168]	; (1000b4dc <main+0x13c>)
1000b432:	8818      	ldrh	r0, [r3, #0]
1000b434:	4b28      	ldr	r3, [pc, #160]	; (1000b4d8 <main+0x138>)
1000b436:	491c      	ldr	r1, [pc, #112]	; (1000b4a8 <main+0x108>)
1000b438:	4c29      	ldr	r4, [pc, #164]	; (1000b4e0 <main+0x140>)
1000b43a:	47a0      	blx	r4
1000b43c:	2800      	cmp	r0, #0
1000b43e:	d107      	bne.n	1000b450 <main+0xb0>
				{
					DBG_LOG("Battery Level:%d%%", battery_level);
1000b440:	4814      	ldr	r0, [pc, #80]	; (1000b494 <main+0xf4>)
1000b442:	4b15      	ldr	r3, [pc, #84]	; (1000b498 <main+0xf8>)
1000b444:	4798      	blx	r3
1000b446:	466b      	mov	r3, sp
1000b448:	79d9      	ldrb	r1, [r3, #7]
1000b44a:	4826      	ldr	r0, [pc, #152]	; (1000b4e4 <main+0x144>)
1000b44c:	4b14      	ldr	r3, [pc, #80]	; (1000b4a0 <main+0x100>)
1000b44e:	4798      	blx	r3
				}
				if(battery_level == BATTERY_MAX_LEVEL)
1000b450:	466b      	mov	r3, sp
1000b452:	3307      	adds	r3, #7
1000b454:	781b      	ldrb	r3, [r3, #0]
1000b456:	2b64      	cmp	r3, #100	; 0x64
1000b458:	d103      	bne.n	1000b462 <main+0xc2>
				{
					battery_flag = false;
1000b45a:	2100      	movs	r1, #0
1000b45c:	4a22      	ldr	r2, [pc, #136]	; (1000b4e8 <main+0x148>)
1000b45e:	7011      	strb	r1, [r2, #0]
1000b460:	e004      	b.n	1000b46c <main+0xcc>
				}
				else if(battery_level == BATTERY_MIN_LEVEL)
1000b462:	2b00      	cmp	r3, #0
1000b464:	d102      	bne.n	1000b46c <main+0xcc>
				{
					battery_flag = true;
1000b466:	2101      	movs	r1, #1
1000b468:	4a1f      	ldr	r2, [pc, #124]	; (1000b4e8 <main+0x148>)
1000b46a:	7011      	strb	r1, [r2, #0]
				}
				if(battery_flag)
1000b46c:	4a1e      	ldr	r2, [pc, #120]	; (1000b4e8 <main+0x148>)
1000b46e:	7812      	ldrb	r2, [r2, #0]
1000b470:	2a00      	cmp	r2, #0
1000b472:	d003      	beq.n	1000b47c <main+0xdc>
				{
					battery_level++;
1000b474:	3301      	adds	r3, #1
1000b476:	466a      	mov	r2, sp
1000b478:	71d3      	strb	r3, [r2, #7]
1000b47a:	e7ca      	b.n	1000b412 <main+0x72>
				}
				else
				{
					battery_level--;
1000b47c:	3b01      	subs	r3, #1
1000b47e:	466a      	mov	r2, sp
1000b480:	71d3      	strb	r3, [r2, #7]
1000b482:	e7c6      	b.n	1000b412 <main+0x72>
1000b484:	1000aad1 	.word	0x1000aad1
1000b488:	100084cd 	.word	0x100084cd
1000b48c:	1000a7c5 	.word	0x1000a7c5
1000b490:	1000b025 	.word	0x1000b025
1000b494:	10010e28 	.word	0x10010e28
1000b498:	1000fb5d 	.word	0x1000fb5d
1000b49c:	10011750 	.word	0x10011750
1000b4a0:	1000fa3d 	.word	0x1000fa3d
1000b4a4:	10009e81 	.word	0x10009e81
1000b4a8:	100140b8 	.word	0x100140b8
1000b4ac:	1000931d 	.word	0x1000931d
1000b4b0:	1000938d 	.word	0x1000938d
1000b4b4:	1001177c 	.word	0x1001177c
1000b4b8:	1000b2f1 	.word	0x1000b2f1
1000b4bc:	10011680 	.word	0x10011680
1000b4c0:	10009db1 	.word	0x10009db1
1000b4c4:	100117b4 	.word	0x100117b4
1000b4c8:	1000b231 	.word	0x1000b231
1000b4cc:	1000b069 	.word	0x1000b069
1000b4d0:	1000a5c5 	.word	0x1000a5c5
1000b4d4:	10013364 	.word	0x10013364
1000b4d8:	10011905 	.word	0x10011905
1000b4dc:	100140b4 	.word	0x100140b4
1000b4e0:	100093b1 	.word	0x100093b1
1000b4e4:	100117a0 	.word	0x100117a0
1000b4e8:	10011906 	.word	0x10011906

1000b4ec <internal_event_post>:
1000b4ec:	b570      	push	{r4, r5, r6, lr}
1000b4ee:	4d12      	ldr	r5, [pc, #72]	; (1000b538 <internal_event_post+0x4c>)
1000b4f0:	682c      	ldr	r4, [r5, #0]
1000b4f2:	2c00      	cmp	r4, #0
1000b4f4:	d014      	beq.n	1000b520 <internal_event_post+0x34>
1000b4f6:	6826      	ldr	r6, [r4, #0]
1000b4f8:	60e2      	str	r2, [r4, #12]
1000b4fa:	602e      	str	r6, [r5, #0]
1000b4fc:	2500      	movs	r5, #0
1000b4fe:	4a0f      	ldr	r2, [pc, #60]	; (1000b53c <internal_event_post+0x50>)
1000b500:	8123      	strh	r3, [r4, #8]
1000b502:	6813      	ldr	r3, [r2, #0]
1000b504:	6025      	str	r5, [r4, #0]
1000b506:	80a0      	strh	r0, [r4, #4]
1000b508:	80e1      	strh	r1, [r4, #6]
1000b50a:	42ab      	cmp	r3, r5
1000b50c:	d101      	bne.n	1000b512 <internal_event_post+0x26>
1000b50e:	6014      	str	r4, [r2, #0]
1000b510:	e011      	b.n	1000b536 <internal_event_post+0x4a>
1000b512:	681a      	ldr	r2, [r3, #0]
1000b514:	2a00      	cmp	r2, #0
1000b516:	d001      	beq.n	1000b51c <internal_event_post+0x30>
1000b518:	1c13      	adds	r3, r2, #0
1000b51a:	e7fa      	b.n	1000b512 <internal_event_post+0x26>
1000b51c:	601c      	str	r4, [r3, #0]
1000b51e:	e00a      	b.n	1000b536 <internal_event_post+0x4a>
1000b520:	b2c4      	uxtb	r4, r0
1000b522:	2c00      	cmp	r4, #0
1000b524:	d107      	bne.n	1000b536 <internal_event_post+0x4a>
1000b526:	4c06      	ldr	r4, [pc, #24]	; (1000b540 <internal_event_post+0x54>)
1000b528:	60e2      	str	r2, [r4, #12]
1000b52a:	2201      	movs	r2, #1
1000b52c:	8123      	strh	r3, [r4, #8]
1000b52e:	4b05      	ldr	r3, [pc, #20]	; (1000b544 <internal_event_post+0x58>)
1000b530:	80a0      	strh	r0, [r4, #4]
1000b532:	80e1      	strh	r1, [r4, #6]
1000b534:	701a      	strb	r2, [r3, #0]
1000b536:	bd70      	pop	{r4, r5, r6, pc}
1000b538:	10013380 	.word	0x10013380
1000b53c:	1001337c 	.word	0x1001337c
1000b540:	10013368 	.word	0x10013368
1000b544:	10013378 	.word	0x10013378

1000b548 <internal_event_init>:
1000b548:	b510      	push	{r4, lr}
1000b54a:	4b08      	ldr	r3, [pc, #32]	; (1000b56c <internal_event_init+0x24>)
1000b54c:	0900      	lsrs	r0, r0, #4
1000b54e:	0100      	lsls	r0, r0, #4
1000b550:	681a      	ldr	r2, [r3, #0]
1000b552:	1808      	adds	r0, r1, r0
1000b554:	4281      	cmp	r1, r0
1000b556:	d003      	beq.n	1000b560 <internal_event_init+0x18>
1000b558:	600a      	str	r2, [r1, #0]
1000b55a:	1c0a      	adds	r2, r1, #0
1000b55c:	3110      	adds	r1, #16
1000b55e:	e7f9      	b.n	1000b554 <internal_event_init+0xc>
1000b560:	601a      	str	r2, [r3, #0]
1000b562:	2200      	movs	r2, #0
1000b564:	4b02      	ldr	r3, [pc, #8]	; (1000b570 <internal_event_init+0x28>)
1000b566:	601a      	str	r2, [r3, #0]
1000b568:	bd10      	pop	{r4, pc}
1000b56a:	46c0      	nop			; (mov r8, r8)
1000b56c:	10013380 	.word	0x10013380
1000b570:	1001337c 	.word	0x1001337c

1000b574 <special_events_handler>:
1000b574:	b538      	push	{r3, r4, r5, lr}
1000b576:	4c1b      	ldr	r4, [pc, #108]	; (1000b5e4 <special_events_handler+0x70>)
1000b578:	1c03      	adds	r3, r0, #0
1000b57a:	8825      	ldrh	r5, [r4, #0]
1000b57c:	1c08      	adds	r0, r1, #0
1000b57e:	1c21      	adds	r1, r4, #0
1000b580:	429d      	cmp	r5, r3
1000b582:	d107      	bne.n	1000b594 <special_events_handler+0x20>
1000b584:	88a5      	ldrh	r5, [r4, #4]
1000b586:	4285      	cmp	r5, r0
1000b588:	d104      	bne.n	1000b594 <special_events_handler+0x20>
1000b58a:	2301      	movs	r3, #1
1000b58c:	425b      	negs	r3, r3
1000b58e:	8023      	strh	r3, [r4, #0]
1000b590:	60a2      	str	r2, [r4, #8]
1000b592:	e009      	b.n	1000b5a8 <special_events_handler+0x34>
1000b594:	884c      	ldrh	r4, [r1, #2]
1000b596:	429c      	cmp	r4, r3
1000b598:	d10a      	bne.n	1000b5b0 <special_events_handler+0x3c>
1000b59a:	888c      	ldrh	r4, [r1, #4]
1000b59c:	4284      	cmp	r4, r0
1000b59e:	d107      	bne.n	1000b5b0 <special_events_handler+0x3c>
1000b5a0:	2301      	movs	r3, #1
1000b5a2:	425b      	negs	r3, r3
1000b5a4:	804b      	strh	r3, [r1, #2]
1000b5a6:	608a      	str	r2, [r1, #8]
1000b5a8:	4b0f      	ldr	r3, [pc, #60]	; (1000b5e8 <special_events_handler+0x74>)
1000b5aa:	4798      	blx	r3
1000b5ac:	2001      	movs	r0, #1
1000b5ae:	e017      	b.n	1000b5e0 <special_events_handler+0x6c>
1000b5b0:	490e      	ldr	r1, [pc, #56]	; (1000b5ec <special_events_handler+0x78>)
1000b5b2:	428b      	cmp	r3, r1
1000b5b4:	d00e      	beq.n	1000b5d4 <special_events_handler+0x60>
1000b5b6:	490e      	ldr	r1, [pc, #56]	; (1000b5f0 <special_events_handler+0x7c>)
1000b5b8:	428b      	cmp	r3, r1
1000b5ba:	d007      	beq.n	1000b5cc <special_events_handler+0x58>
1000b5bc:	490d      	ldr	r1, [pc, #52]	; (1000b5f4 <special_events_handler+0x80>)
1000b5be:	2000      	movs	r0, #0
1000b5c0:	428b      	cmp	r3, r1
1000b5c2:	d10d      	bne.n	1000b5e0 <special_events_handler+0x6c>
1000b5c4:	1c10      	adds	r0, r2, #0
1000b5c6:	4b0c      	ldr	r3, [pc, #48]	; (1000b5f8 <special_events_handler+0x84>)
1000b5c8:	4798      	blx	r3
1000b5ca:	e7ef      	b.n	1000b5ac <special_events_handler+0x38>
1000b5cc:	1c11      	adds	r1, r2, #0
1000b5ce:	4b0b      	ldr	r3, [pc, #44]	; (1000b5fc <special_events_handler+0x88>)
1000b5d0:	2200      	movs	r2, #0
1000b5d2:	e002      	b.n	1000b5da <special_events_handler+0x66>
1000b5d4:	1c11      	adds	r1, r2, #0
1000b5d6:	2200      	movs	r2, #0
1000b5d8:	4b09      	ldr	r3, [pc, #36]	; (1000b600 <special_events_handler+0x8c>)
1000b5da:	4798      	blx	r3
1000b5dc:	4243      	negs	r3, r0
1000b5de:	4158      	adcs	r0, r3
1000b5e0:	bd38      	pop	{r3, r4, r5, pc}
1000b5e2:	46c0      	nop			; (mov r8, r8)
1000b5e4:	10014108 	.word	0x10014108
1000b5e8:	1000cfc5 	.word	0x1000cfc5
1000b5ec:	00000e13 	.word	0x00000e13
1000b5f0:	00000e15 	.word	0x00000e15
1000b5f4:	00000e01 	.word	0x00000e01
1000b5f8:	1000d335 	.word	0x1000d335
1000b5fc:	1000d4f5 	.word	0x1000d4f5
1000b600:	1000d5cd 	.word	0x1000d5cd

1000b604 <at_ble_event_get>:
1000b604:	2300      	movs	r3, #0
1000b606:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b608:	b087      	sub	sp, #28
1000b60a:	9204      	str	r2, [sp, #16]
1000b60c:	7003      	strb	r3, [r0, #0]
1000b60e:	9b04      	ldr	r3, [sp, #16]
1000b610:	9003      	str	r0, [sp, #12]
1000b612:	3b01      	subs	r3, #1
1000b614:	1c0d      	adds	r5, r1, #0
1000b616:	9305      	str	r3, [sp, #20]
1000b618:	3303      	adds	r3, #3
1000b61a:	d802      	bhi.n	1000b622 <at_ble_event_get+0x1e>
1000b61c:	9804      	ldr	r0, [sp, #16]
1000b61e:	4bae      	ldr	r3, [pc, #696]	; (1000b8d8 <at_ble_event_get+0x2d4>)
1000b620:	4798      	blx	r3
1000b622:	9b05      	ldr	r3, [sp, #20]
1000b624:	4cad      	ldr	r4, [pc, #692]	; (1000b8dc <at_ble_event_get+0x2d8>)
1000b626:	3303      	adds	r3, #3
1000b628:	d902      	bls.n	1000b630 <at_ble_event_get+0x2c>
1000b62a:	2300      	movs	r3, #0
1000b62c:	9302      	str	r3, [sp, #8]
1000b62e:	e015      	b.n	1000b65c <at_ble_event_get+0x58>
1000b630:	2300      	movs	r3, #0
1000b632:	9302      	str	r3, [sp, #8]
1000b634:	6823      	ldr	r3, [r4, #0]
1000b636:	2b00      	cmp	r3, #0
1000b638:	d113      	bne.n	1000b662 <at_ble_event_get+0x5e>
1000b63a:	9b02      	ldr	r3, [sp, #8]
1000b63c:	2bd0      	cmp	r3, #208	; 0xd0
1000b63e:	d100      	bne.n	1000b642 <at_ble_event_get+0x3e>
1000b640:	e2da      	b.n	1000bbf8 <at_ble_event_get+0x5f4>
1000b642:	9804      	ldr	r0, [sp, #16]
1000b644:	4ba6      	ldr	r3, [pc, #664]	; (1000b8e0 <at_ble_event_get+0x2dc>)
1000b646:	4798      	blx	r3
1000b648:	9002      	str	r0, [sp, #8]
1000b64a:	2802      	cmp	r0, #2
1000b64c:	d1f2      	bne.n	1000b634 <at_ble_event_get+0x30>
1000b64e:	e03f      	b.n	1000b6d0 <at_ble_event_get+0xcc>
1000b650:	9804      	ldr	r0, [sp, #16]
1000b652:	4ba3      	ldr	r3, [pc, #652]	; (1000b8e0 <at_ble_event_get+0x2dc>)
1000b654:	4798      	blx	r3
1000b656:	9002      	str	r0, [sp, #8]
1000b658:	2802      	cmp	r0, #2
1000b65a:	d039      	beq.n	1000b6d0 <at_ble_event_get+0xcc>
1000b65c:	6823      	ldr	r3, [r4, #0]
1000b65e:	2b00      	cmp	r3, #0
1000b660:	d0f6      	beq.n	1000b650 <at_ble_event_get+0x4c>
1000b662:	9b02      	ldr	r3, [sp, #8]
1000b664:	2bd0      	cmp	r3, #208	; 0xd0
1000b666:	d100      	bne.n	1000b66a <at_ble_event_get+0x66>
1000b668:	e2c6      	b.n	1000bbf8 <at_ble_event_get+0x5f4>
1000b66a:	9b02      	ldr	r3, [sp, #8]
1000b66c:	3b03      	subs	r3, #3
1000b66e:	1e5a      	subs	r2, r3, #1
1000b670:	4193      	sbcs	r3, r2
1000b672:	9a02      	ldr	r2, [sp, #8]
1000b674:	425b      	negs	r3, r3
1000b676:	401a      	ands	r2, r3
1000b678:	6823      	ldr	r3, [r4, #0]
1000b67a:	9202      	str	r2, [sp, #8]
1000b67c:	2b00      	cmp	r3, #0
1000b67e:	d100      	bne.n	1000b682 <at_ble_event_get+0x7e>
1000b680:	e2c2      	b.n	1000bc08 <at_ble_event_get+0x604>
1000b682:	681a      	ldr	r2, [r3, #0]
1000b684:	68de      	ldr	r6, [r3, #12]
1000b686:	6022      	str	r2, [r4, #0]
1000b688:	88da      	ldrh	r2, [r3, #6]
1000b68a:	9201      	str	r2, [sp, #4]
1000b68c:	4a95      	ldr	r2, [pc, #596]	; (1000b8e4 <at_ble_event_get+0x2e0>)
1000b68e:	889c      	ldrh	r4, [r3, #4]
1000b690:	6811      	ldr	r1, [r2, #0]
1000b692:	6013      	str	r3, [r2, #0]
1000b694:	6019      	str	r1, [r3, #0]
1000b696:	4b94      	ldr	r3, [pc, #592]	; (1000b8e8 <at_ble_event_get+0x2e4>)
1000b698:	781b      	ldrb	r3, [r3, #0]
1000b69a:	2b01      	cmp	r3, #1
1000b69c:	d10f      	bne.n	1000b6be <at_ble_event_get+0xba>
1000b69e:	4b93      	ldr	r3, [pc, #588]	; (1000b8ec <at_ble_event_get+0x2e8>)
1000b6a0:	4a92      	ldr	r2, [pc, #584]	; (1000b8ec <at_ble_event_get+0x2e8>)
1000b6a2:	8898      	ldrh	r0, [r3, #4]
1000b6a4:	88d9      	ldrh	r1, [r3, #6]
1000b6a6:	68d2      	ldr	r2, [r2, #12]
1000b6a8:	891b      	ldrh	r3, [r3, #8]
1000b6aa:	4f91      	ldr	r7, [pc, #580]	; (1000b8f0 <at_ble_event_get+0x2ec>)
1000b6ac:	47b8      	blx	r7
1000b6ae:	2210      	movs	r2, #16
1000b6b0:	4b90      	ldr	r3, [pc, #576]	; (1000b8f4 <at_ble_event_get+0x2f0>)
1000b6b2:	488e      	ldr	r0, [pc, #568]	; (1000b8ec <at_ble_event_get+0x2e8>)
1000b6b4:	2100      	movs	r1, #0
1000b6b6:	4798      	blx	r3
1000b6b8:	2300      	movs	r3, #0
1000b6ba:	4a8b      	ldr	r2, [pc, #556]	; (1000b8e8 <at_ble_event_get+0x2e4>)
1000b6bc:	7013      	strb	r3, [r2, #0]
1000b6be:	9b02      	ldr	r3, [sp, #8]
1000b6c0:	2b00      	cmp	r3, #0
1000b6c2:	d114      	bne.n	1000b6ee <at_ble_event_get+0xea>
1000b6c4:	4b8c      	ldr	r3, [pc, #560]	; (1000b8f8 <at_ble_event_get+0x2f4>)
1000b6c6:	429c      	cmp	r4, r3
1000b6c8:	d009      	beq.n	1000b6de <at_ble_event_get+0xda>
1000b6ca:	4b8c      	ldr	r3, [pc, #560]	; (1000b8fc <at_ble_event_get+0x2f8>)
1000b6cc:	429c      	cmp	r4, r3
1000b6ce:	d127      	bne.n	1000b720 <at_ble_event_get+0x11c>
1000b6d0:	233a      	movs	r3, #58	; 0x3a
1000b6d2:	9a03      	ldr	r2, [sp, #12]
1000b6d4:	7013      	strb	r3, [r2, #0]
1000b6d6:	2300      	movs	r3, #0
1000b6d8:	9302      	str	r3, [sp, #8]
1000b6da:	1c1d      	adds	r5, r3, #0
1000b6dc:	e007      	b.n	1000b6ee <at_ble_event_get+0xea>
1000b6de:	9b01      	ldr	r3, [sp, #4]
1000b6e0:	42a3      	cmp	r3, r4
1000b6e2:	d000      	beq.n	1000b6e6 <at_ble_event_get+0xe2>
1000b6e4:	e28a      	b.n	1000bbfc <at_ble_event_get+0x5f8>
1000b6e6:	2338      	movs	r3, #56	; 0x38
1000b6e8:	9a03      	ldr	r2, [sp, #12]
1000b6ea:	7013      	strb	r3, [r2, #0]
1000b6ec:	602e      	str	r6, [r5, #0]
1000b6ee:	9b03      	ldr	r3, [sp, #12]
1000b6f0:	781b      	ldrb	r3, [r3, #0]
1000b6f2:	2b3b      	cmp	r3, #59	; 0x3b
1000b6f4:	d101      	bne.n	1000b6fa <at_ble_event_get+0xf6>
1000b6f6:	4b82      	ldr	r3, [pc, #520]	; (1000b900 <at_ble_event_get+0x2fc>)
1000b6f8:	4798      	blx	r3
1000b6fa:	9b03      	ldr	r3, [sp, #12]
1000b6fc:	781b      	ldrb	r3, [r3, #0]
1000b6fe:	2b3b      	cmp	r3, #59	; 0x3b
1000b700:	d003      	beq.n	1000b70a <at_ble_event_get+0x106>
1000b702:	9b05      	ldr	r3, [sp, #20]
1000b704:	3303      	adds	r3, #3
1000b706:	d904      	bls.n	1000b712 <at_ble_event_get+0x10e>
1000b708:	e283      	b.n	1000bc12 <at_ble_event_get+0x60e>
1000b70a:	9b02      	ldr	r3, [sp, #8]
1000b70c:	2b00      	cmp	r3, #0
1000b70e:	d088      	beq.n	1000b622 <at_ble_event_get+0x1e>
1000b710:	e7f7      	b.n	1000b702 <at_ble_event_get+0xfe>
1000b712:	9b02      	ldr	r3, [sp, #8]
1000b714:	2bd0      	cmp	r3, #208	; 0xd0
1000b716:	d100      	bne.n	1000b71a <at_ble_event_get+0x116>
1000b718:	e27b      	b.n	1000bc12 <at_ble_event_get+0x60e>
1000b71a:	4b7a      	ldr	r3, [pc, #488]	; (1000b904 <at_ble_event_get+0x300>)
1000b71c:	4798      	blx	r3
1000b71e:	e278      	b.n	1000bc12 <at_ble_event_get+0x60e>
1000b720:	9b01      	ldr	r3, [sp, #4]
1000b722:	2bbb      	cmp	r3, #187	; 0xbb
1000b724:	d125      	bne.n	1000b772 <at_ble_event_get+0x16e>
1000b726:	2cbb      	cmp	r4, #187	; 0xbb
1000b728:	d123      	bne.n	1000b772 <at_ble_event_get+0x16e>
1000b72a:	466b      	mov	r3, sp
1000b72c:	891b      	ldrh	r3, [r3, #8]
1000b72e:	80ab      	strh	r3, [r5, #4]
1000b730:	78b3      	ldrb	r3, [r6, #2]
1000b732:	7872      	ldrb	r2, [r6, #1]
1000b734:	78f0      	ldrb	r0, [r6, #3]
1000b736:	021b      	lsls	r3, r3, #8
1000b738:	4313      	orrs	r3, r2
1000b73a:	7971      	ldrb	r1, [r6, #5]
1000b73c:	7932      	ldrb	r2, [r6, #4]
1000b73e:	70a8      	strb	r0, [r5, #2]
1000b740:	4871      	ldr	r0, [pc, #452]	; (1000b908 <at_ble_event_get+0x304>)
1000b742:	802b      	strh	r3, [r5, #0]
1000b744:	4283      	cmp	r3, r0
1000b746:	d806      	bhi.n	1000b756 <at_ble_event_get+0x152>
1000b748:	4a70      	ldr	r2, [pc, #448]	; (1000b90c <at_ble_event_get+0x308>)
1000b74a:	4293      	cmp	r3, r2
1000b74c:	d20b      	bcs.n	1000b766 <at_ble_event_get+0x162>
1000b74e:	4a70      	ldr	r2, [pc, #448]	; (1000b910 <at_ble_event_get+0x30c>)
1000b750:	4293      	cmp	r3, r2
1000b752:	d008      	beq.n	1000b766 <at_ble_event_get+0x162>
1000b754:	e009      	b.n	1000b76a <at_ble_event_get+0x166>
1000b756:	486f      	ldr	r0, [pc, #444]	; (1000b914 <at_ble_event_get+0x310>)
1000b758:	4283      	cmp	r3, r0
1000b75a:	d106      	bne.n	1000b76a <at_ble_event_get+0x166>
1000b75c:	020b      	lsls	r3, r1, #8
1000b75e:	4313      	orrs	r3, r2
1000b760:	80ab      	strh	r3, [r5, #4]
1000b762:	2337      	movs	r3, #55	; 0x37
1000b764:	e002      	b.n	1000b76c <at_ble_event_get+0x168>
1000b766:	2336      	movs	r3, #54	; 0x36
1000b768:	e000      	b.n	1000b76c <at_ble_event_get+0x168>
1000b76a:	2300      	movs	r3, #0
1000b76c:	9a03      	ldr	r2, [sp, #12]
1000b76e:	7013      	strb	r3, [r2, #0]
1000b770:	e7bd      	b.n	1000b6ee <at_ble_event_get+0xea>
1000b772:	4b69      	ldr	r3, [pc, #420]	; (1000b918 <at_ble_event_get+0x314>)
1000b774:	429c      	cmp	r4, r3
1000b776:	d100      	bne.n	1000b77a <at_ble_event_get+0x176>
1000b778:	e144      	b.n	1000ba04 <at_ble_event_get+0x400>
1000b77a:	d865      	bhi.n	1000b848 <at_ble_event_get+0x244>
1000b77c:	4b67      	ldr	r3, [pc, #412]	; (1000b91c <at_ble_event_get+0x318>)
1000b77e:	429c      	cmp	r4, r3
1000b780:	d100      	bne.n	1000b784 <at_ble_event_get+0x180>
1000b782:	e1d5      	b.n	1000bb30 <at_ble_event_get+0x52c>
1000b784:	d82f      	bhi.n	1000b7e6 <at_ble_event_get+0x1e2>
1000b786:	4b66      	ldr	r3, [pc, #408]	; (1000b920 <at_ble_event_get+0x31c>)
1000b788:	429c      	cmp	r4, r3
1000b78a:	d100      	bne.n	1000b78e <at_ble_event_get+0x18a>
1000b78c:	e1e0      	b.n	1000bb50 <at_ble_event_get+0x54c>
1000b78e:	d813      	bhi.n	1000b7b8 <at_ble_event_get+0x1b4>
1000b790:	4b64      	ldr	r3, [pc, #400]	; (1000b924 <at_ble_event_get+0x320>)
1000b792:	429c      	cmp	r4, r3
1000b794:	d100      	bne.n	1000b798 <at_ble_event_get+0x194>
1000b796:	e1a3      	b.n	1000bae0 <at_ble_event_get+0x4dc>
1000b798:	d804      	bhi.n	1000b7a4 <at_ble_event_get+0x1a0>
1000b79a:	2638      	movs	r6, #56	; 0x38
1000b79c:	42b4      	cmp	r4, r6
1000b79e:	d100      	bne.n	1000b7a2 <at_ble_event_get+0x19e>
1000b7a0:	e225      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000b7a2:	e117      	b.n	1000b9d4 <at_ble_event_get+0x3d0>
1000b7a4:	4b60      	ldr	r3, [pc, #384]	; (1000b928 <at_ble_event_get+0x324>)
1000b7a6:	429c      	cmp	r4, r3
1000b7a8:	d100      	bne.n	1000b7ac <at_ble_event_get+0x1a8>
1000b7aa:	e19f      	b.n	1000baec <at_ble_event_get+0x4e8>
1000b7ac:	33fe      	adds	r3, #254	; 0xfe
1000b7ae:	33ff      	adds	r3, #255	; 0xff
1000b7b0:	429c      	cmp	r4, r3
1000b7b2:	d100      	bne.n	1000b7b6 <at_ble_event_get+0x1b2>
1000b7b4:	e1d3      	b.n	1000bb5e <at_ble_event_get+0x55a>
1000b7b6:	e10d      	b.n	1000b9d4 <at_ble_event_get+0x3d0>
1000b7b8:	4b5c      	ldr	r3, [pc, #368]	; (1000b92c <at_ble_event_get+0x328>)
1000b7ba:	429c      	cmp	r4, r3
1000b7bc:	d100      	bne.n	1000b7c0 <at_ble_event_get+0x1bc>
1000b7be:	e1a9      	b.n	1000bb14 <at_ble_event_get+0x510>
1000b7c0:	d808      	bhi.n	1000b7d4 <at_ble_event_get+0x1d0>
1000b7c2:	4b5b      	ldr	r3, [pc, #364]	; (1000b930 <at_ble_event_get+0x32c>)
1000b7c4:	429c      	cmp	r4, r3
1000b7c6:	d100      	bne.n	1000b7ca <at_ble_event_get+0x1c6>
1000b7c8:	e196      	b.n	1000baf8 <at_ble_event_get+0x4f4>
1000b7ca:	4b5a      	ldr	r3, [pc, #360]	; (1000b934 <at_ble_event_get+0x330>)
1000b7cc:	429c      	cmp	r4, r3
1000b7ce:	d100      	bne.n	1000b7d2 <at_ble_event_get+0x1ce>
1000b7d0:	e199      	b.n	1000bb06 <at_ble_event_get+0x502>
1000b7d2:	e0ff      	b.n	1000b9d4 <at_ble_event_get+0x3d0>
1000b7d4:	4b58      	ldr	r3, [pc, #352]	; (1000b938 <at_ble_event_get+0x334>)
1000b7d6:	429c      	cmp	r4, r3
1000b7d8:	d100      	bne.n	1000b7dc <at_ble_event_get+0x1d8>
1000b7da:	e1a2      	b.n	1000bb22 <at_ble_event_get+0x51e>
1000b7dc:	4b57      	ldr	r3, [pc, #348]	; (1000b93c <at_ble_event_get+0x338>)
1000b7de:	429c      	cmp	r4, r3
1000b7e0:	d100      	bne.n	1000b7e4 <at_ble_event_get+0x1e0>
1000b7e2:	e1d4      	b.n	1000bb8e <at_ble_event_get+0x58a>
1000b7e4:	e0f6      	b.n	1000b9d4 <at_ble_event_get+0x3d0>
1000b7e6:	4b56      	ldr	r3, [pc, #344]	; (1000b940 <at_ble_event_get+0x33c>)
1000b7e8:	429c      	cmp	r4, r3
1000b7ea:	d100      	bne.n	1000b7ee <at_ble_event_get+0x1ea>
1000b7ec:	e1c8      	b.n	1000bb80 <at_ble_event_get+0x57c>
1000b7ee:	d812      	bhi.n	1000b816 <at_ble_event_get+0x212>
1000b7f0:	4b54      	ldr	r3, [pc, #336]	; (1000b944 <at_ble_event_get+0x340>)
1000b7f2:	429c      	cmp	r4, r3
1000b7f4:	d100      	bne.n	1000b7f8 <at_ble_event_get+0x1f4>
1000b7f6:	e1d1      	b.n	1000bb9c <at_ble_event_get+0x598>
1000b7f8:	d804      	bhi.n	1000b804 <at_ble_event_get+0x200>
1000b7fa:	4b53      	ldr	r3, [pc, #332]	; (1000b948 <at_ble_event_get+0x344>)
1000b7fc:	429c      	cmp	r4, r3
1000b7fe:	d100      	bne.n	1000b802 <at_ble_event_get+0x1fe>
1000b800:	e19b      	b.n	1000bb3a <at_ble_event_get+0x536>
1000b802:	e0e7      	b.n	1000b9d4 <at_ble_event_get+0x3d0>
1000b804:	4b51      	ldr	r3, [pc, #324]	; (1000b94c <at_ble_event_get+0x348>)
1000b806:	429c      	cmp	r4, r3
1000b808:	d100      	bne.n	1000b80c <at_ble_event_get+0x208>
1000b80a:	e1ad      	b.n	1000bb68 <at_ble_event_get+0x564>
1000b80c:	4b50      	ldr	r3, [pc, #320]	; (1000b950 <at_ble_event_get+0x34c>)
1000b80e:	429c      	cmp	r4, r3
1000b810:	d100      	bne.n	1000b814 <at_ble_event_get+0x210>
1000b812:	e1b0      	b.n	1000bb76 <at_ble_event_get+0x572>
1000b814:	e0de      	b.n	1000b9d4 <at_ble_event_get+0x3d0>
1000b816:	4b4f      	ldr	r3, [pc, #316]	; (1000b954 <at_ble_event_get+0x350>)
1000b818:	429c      	cmp	r4, r3
1000b81a:	d100      	bne.n	1000b81e <at_ble_event_get+0x21a>
1000b81c:	e0e0      	b.n	1000b9e0 <at_ble_event_get+0x3dc>
1000b81e:	d809      	bhi.n	1000b834 <at_ble_event_get+0x230>
1000b820:	3b08      	subs	r3, #8
1000b822:	429c      	cmp	r4, r3
1000b824:	d100      	bne.n	1000b828 <at_ble_event_get+0x224>
1000b826:	e0d7      	b.n	1000b9d8 <at_ble_event_get+0x3d4>
1000b828:	4b4b      	ldr	r3, [pc, #300]	; (1000b958 <at_ble_event_get+0x354>)
1000b82a:	2639      	movs	r6, #57	; 0x39
1000b82c:	429c      	cmp	r4, r3
1000b82e:	d100      	bne.n	1000b832 <at_ble_event_get+0x22e>
1000b830:	e1dd      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000b832:	e0cf      	b.n	1000b9d4 <at_ble_event_get+0x3d0>
1000b834:	23d1      	movs	r3, #209	; 0xd1
1000b836:	011b      	lsls	r3, r3, #4
1000b838:	429c      	cmp	r4, r3
1000b83a:	d100      	bne.n	1000b83e <at_ble_event_get+0x23a>
1000b83c:	e0d6      	b.n	1000b9ec <at_ble_event_get+0x3e8>
1000b83e:	4b47      	ldr	r3, [pc, #284]	; (1000b95c <at_ble_event_get+0x358>)
1000b840:	429c      	cmp	r4, r3
1000b842:	d100      	bne.n	1000b846 <at_ble_event_get+0x242>
1000b844:	e0d8      	b.n	1000b9f8 <at_ble_event_get+0x3f4>
1000b846:	e0c5      	b.n	1000b9d4 <at_ble_event_get+0x3d0>
1000b848:	4b45      	ldr	r3, [pc, #276]	; (1000b960 <at_ble_event_get+0x35c>)
1000b84a:	429c      	cmp	r4, r3
1000b84c:	d100      	bne.n	1000b850 <at_ble_event_get+0x24c>
1000b84e:	e117      	b.n	1000ba80 <at_ble_event_get+0x47c>
1000b850:	d82e      	bhi.n	1000b8b0 <at_ble_event_get+0x2ac>
1000b852:	4b44      	ldr	r3, [pc, #272]	; (1000b964 <at_ble_event_get+0x360>)
1000b854:	429c      	cmp	r4, r3
1000b856:	d100      	bne.n	1000b85a <at_ble_event_get+0x256>
1000b858:	e13d      	b.n	1000bad6 <at_ble_event_get+0x4d2>
1000b85a:	d812      	bhi.n	1000b882 <at_ble_event_get+0x27e>
1000b85c:	4b42      	ldr	r3, [pc, #264]	; (1000b968 <at_ble_event_get+0x364>)
1000b85e:	429c      	cmp	r4, r3
1000b860:	d100      	bne.n	1000b864 <at_ble_event_get+0x260>
1000b862:	e0e8      	b.n	1000ba36 <at_ble_event_get+0x432>
1000b864:	d804      	bhi.n	1000b870 <at_ble_event_get+0x26c>
1000b866:	3b03      	subs	r3, #3
1000b868:	429c      	cmp	r4, r3
1000b86a:	d100      	bne.n	1000b86e <at_ble_event_get+0x26a>
1000b86c:	e0d0      	b.n	1000ba10 <at_ble_event_get+0x40c>
1000b86e:	e0b1      	b.n	1000b9d4 <at_ble_event_get+0x3d0>
1000b870:	4b3e      	ldr	r3, [pc, #248]	; (1000b96c <at_ble_event_get+0x368>)
1000b872:	429c      	cmp	r4, r3
1000b874:	d100      	bne.n	1000b878 <at_ble_event_get+0x274>
1000b876:	e0d0      	b.n	1000ba1a <at_ble_event_get+0x416>
1000b878:	4b3d      	ldr	r3, [pc, #244]	; (1000b970 <at_ble_event_get+0x36c>)
1000b87a:	429c      	cmp	r4, r3
1000b87c:	d100      	bne.n	1000b880 <at_ble_event_get+0x27c>
1000b87e:	e0f9      	b.n	1000ba74 <at_ble_event_get+0x470>
1000b880:	e0a8      	b.n	1000b9d4 <at_ble_event_get+0x3d0>
1000b882:	4b3c      	ldr	r3, [pc, #240]	; (1000b974 <at_ble_event_get+0x370>)
1000b884:	429c      	cmp	r4, r3
1000b886:	d100      	bne.n	1000b88a <at_ble_event_get+0x286>
1000b888:	e0db      	b.n	1000ba42 <at_ble_event_get+0x43e>
1000b88a:	d808      	bhi.n	1000b89e <at_ble_event_get+0x29a>
1000b88c:	4b3a      	ldr	r3, [pc, #232]	; (1000b978 <at_ble_event_get+0x374>)
1000b88e:	429c      	cmp	r4, r3
1000b890:	d100      	bne.n	1000b894 <at_ble_event_get+0x290>
1000b892:	e11b      	b.n	1000bacc <at_ble_event_get+0x4c8>
1000b894:	4b39      	ldr	r3, [pc, #228]	; (1000b97c <at_ble_event_get+0x378>)
1000b896:	429c      	cmp	r4, r3
1000b898:	d100      	bne.n	1000b89c <at_ble_event_get+0x298>
1000b89a:	e0d8      	b.n	1000ba4e <at_ble_event_get+0x44a>
1000b89c:	e09a      	b.n	1000b9d4 <at_ble_event_get+0x3d0>
1000b89e:	4b38      	ldr	r3, [pc, #224]	; (1000b980 <at_ble_event_get+0x37c>)
1000b8a0:	429c      	cmp	r4, r3
1000b8a2:	d100      	bne.n	1000b8a6 <at_ble_event_get+0x2a2>
1000b8a4:	e0d8      	b.n	1000ba58 <at_ble_event_get+0x454>
1000b8a6:	4b37      	ldr	r3, [pc, #220]	; (1000b984 <at_ble_event_get+0x380>)
1000b8a8:	429c      	cmp	r4, r3
1000b8aa:	d100      	bne.n	1000b8ae <at_ble_event_get+0x2aa>
1000b8ac:	e0db      	b.n	1000ba66 <at_ble_event_get+0x462>
1000b8ae:	e091      	b.n	1000b9d4 <at_ble_event_get+0x3d0>
1000b8b0:	4b35      	ldr	r3, [pc, #212]	; (1000b988 <at_ble_event_get+0x384>)
1000b8b2:	429c      	cmp	r4, r3
1000b8b4:	d100      	bne.n	1000b8b8 <at_ble_event_get+0x2b4>
1000b8b6:	e0f7      	b.n	1000baa8 <at_ble_event_get+0x4a4>
1000b8b8:	d876      	bhi.n	1000b9a8 <at_ble_event_get+0x3a4>
1000b8ba:	4b34      	ldr	r3, [pc, #208]	; (1000b98c <at_ble_event_get+0x388>)
1000b8bc:	429c      	cmp	r4, r3
1000b8be:	d100      	bne.n	1000b8c2 <at_ble_event_get+0x2be>
1000b8c0:	e0f8      	b.n	1000bab4 <at_ble_event_get+0x4b0>
1000b8c2:	d869      	bhi.n	1000b998 <at_ble_event_get+0x394>
1000b8c4:	4b32      	ldr	r3, [pc, #200]	; (1000b990 <at_ble_event_get+0x38c>)
1000b8c6:	429c      	cmp	r4, r3
1000b8c8:	d100      	bne.n	1000b8cc <at_ble_event_get+0x2c8>
1000b8ca:	e0e0      	b.n	1000ba8e <at_ble_event_get+0x48a>
1000b8cc:	4b31      	ldr	r3, [pc, #196]	; (1000b994 <at_ble_event_get+0x390>)
1000b8ce:	429c      	cmp	r4, r3
1000b8d0:	d100      	bne.n	1000b8d4 <at_ble_event_get+0x2d0>
1000b8d2:	e0a9      	b.n	1000ba28 <at_ble_event_get+0x424>
1000b8d4:	e07e      	b.n	1000b9d4 <at_ble_event_get+0x3d0>
1000b8d6:	46c0      	nop			; (mov r8, r8)
1000b8d8:	1000cffd 	.word	0x1000cffd
1000b8dc:	1001337c 	.word	0x1001337c
1000b8e0:	1000adc1 	.word	0x1000adc1
1000b8e4:	10013380 	.word	0x10013380
1000b8e8:	10013378 	.word	0x10013378
1000b8ec:	10013368 	.word	0x10013368
1000b8f0:	1000b4ed 	.word	0x1000b4ed
1000b8f4:	1000fa2d 	.word	0x1000fa2d
1000b8f8:	0000ffff 	.word	0x0000ffff
1000b8fc:	0000fffe 	.word	0x0000fffe
1000b900:	1000b039 	.word	0x1000b039
1000b904:	1000cfff 	.word	0x1000cfff
1000b908:	0000201e 	.word	0x0000201e
1000b90c:	0000201d 	.word	0x0000201d
1000b910:	00000c03 	.word	0x00000c03
1000b914:	0000201f 	.word	0x0000201f
1000b918:	00000d1c 	.word	0x00000d1c
1000b91c:	00000c0c 	.word	0x00000c0c
1000b920:	00000c02 	.word	0x00000c02
1000b924:	00000a02 	.word	0x00000a02
1000b928:	00000a03 	.word	0x00000a03
1000b92c:	00000c06 	.word	0x00000c06
1000b930:	00000c04 	.word	0x00000c04
1000b934:	00000c05 	.word	0x00000c05
1000b938:	00000c07 	.word	0x00000c07
1000b93c:	00000c09 	.word	0x00000c09
1000b940:	00000c17 	.word	0x00000c17
1000b944:	00000c12 	.word	0x00000c12
1000b948:	00000c0d 	.word	0x00000c0d
1000b94c:	00000c13 	.word	0x00000c13
1000b950:	00000c15 	.word	0x00000c15
1000b954:	00000d08 	.word	0x00000d08
1000b958:	00000d01 	.word	0x00000d01
1000b95c:	00000d15 	.word	0x00000d15
1000b960:	00000e1b 	.word	0x00000e1b
1000b964:	00000e0f 	.word	0x00000e0f
1000b968:	00000e03 	.word	0x00000e03
1000b96c:	00000e06 	.word	0x00000e06
1000b970:	00000e0a 	.word	0x00000e0a
1000b974:	00000e15 	.word	0x00000e15
1000b978:	00000e11 	.word	0x00000e11
1000b97c:	00000e13 	.word	0x00000e13
1000b980:	00000e17 	.word	0x00000e17
1000b984:	00000e19 	.word	0x00000e19
1000b988:	00000e27 	.word	0x00000e27
1000b98c:	00000e21 	.word	0x00000e21
1000b990:	00000e1c 	.word	0x00000e1c
1000b994:	00000e1d 	.word	0x00000e1d
1000b998:	4b9f      	ldr	r3, [pc, #636]	; (1000bc18 <at_ble_event_get+0x614>)
1000b99a:	429c      	cmp	r4, r3
1000b99c:	d07e      	beq.n	1000ba9c <at_ble_event_get+0x498>
1000b99e:	4b9f      	ldr	r3, [pc, #636]	; (1000bc1c <at_ble_event_get+0x618>)
1000b9a0:	429c      	cmp	r4, r3
1000b9a2:	d100      	bne.n	1000b9a6 <at_ble_event_get+0x3a2>
1000b9a4:	e08c      	b.n	1000bac0 <at_ble_event_get+0x4bc>
1000b9a6:	e015      	b.n	1000b9d4 <at_ble_event_get+0x3d0>
1000b9a8:	4b9d      	ldr	r3, [pc, #628]	; (1000bc20 <at_ble_event_get+0x61c>)
1000b9aa:	429c      	cmp	r4, r3
1000b9ac:	d100      	bne.n	1000b9b0 <at_ble_event_get+0x3ac>
1000b9ae:	e10a      	b.n	1000bbc6 <at_ble_event_get+0x5c2>
1000b9b0:	d808      	bhi.n	1000b9c4 <at_ble_event_get+0x3c0>
1000b9b2:	4b9c      	ldr	r3, [pc, #624]	; (1000bc24 <at_ble_event_get+0x620>)
1000b9b4:	429c      	cmp	r4, r3
1000b9b6:	d100      	bne.n	1000b9ba <at_ble_event_get+0x3b6>
1000b9b8:	e0f7      	b.n	1000bbaa <at_ble_event_get+0x5a6>
1000b9ba:	4b9b      	ldr	r3, [pc, #620]	; (1000bc28 <at_ble_event_get+0x624>)
1000b9bc:	429c      	cmp	r4, r3
1000b9be:	d100      	bne.n	1000b9c2 <at_ble_event_get+0x3be>
1000b9c0:	e0fa      	b.n	1000bbb8 <at_ble_event_get+0x5b4>
1000b9c2:	e007      	b.n	1000b9d4 <at_ble_event_get+0x3d0>
1000b9c4:	4b99      	ldr	r3, [pc, #612]	; (1000bc2c <at_ble_event_get+0x628>)
1000b9c6:	429c      	cmp	r4, r3
1000b9c8:	d100      	bne.n	1000b9cc <at_ble_event_get+0x3c8>
1000b9ca:	e103      	b.n	1000bbd4 <at_ble_event_get+0x5d0>
1000b9cc:	4b98      	ldr	r3, [pc, #608]	; (1000bc30 <at_ble_event_get+0x62c>)
1000b9ce:	429c      	cmp	r4, r3
1000b9d0:	d100      	bne.n	1000b9d4 <at_ble_event_get+0x3d0>
1000b9d2:	e106      	b.n	1000bbe2 <at_ble_event_get+0x5de>
1000b9d4:	2600      	movs	r6, #0
1000b9d6:	e10a      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000b9d8:	1c30      	adds	r0, r6, #0
1000b9da:	1c29      	adds	r1, r5, #0
1000b9dc:	4b95      	ldr	r3, [pc, #596]	; (1000bc34 <at_ble_event_get+0x630>)
1000b9de:	e014      	b.n	1000ba0a <at_ble_event_get+0x406>
1000b9e0:	1c30      	adds	r0, r6, #0
1000b9e2:	1c29      	adds	r1, r5, #0
1000b9e4:	4b94      	ldr	r3, [pc, #592]	; (1000bc38 <at_ble_event_get+0x634>)
1000b9e6:	4798      	blx	r3
1000b9e8:	2604      	movs	r6, #4
1000b9ea:	e100      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000b9ec:	1c30      	adds	r0, r6, #0
1000b9ee:	1c29      	adds	r1, r5, #0
1000b9f0:	4b92      	ldr	r3, [pc, #584]	; (1000bc3c <at_ble_event_get+0x638>)
1000b9f2:	4798      	blx	r3
1000b9f4:	2601      	movs	r6, #1
1000b9f6:	e0fa      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000b9f8:	1c30      	adds	r0, r6, #0
1000b9fa:	1c29      	adds	r1, r5, #0
1000b9fc:	4b90      	ldr	r3, [pc, #576]	; (1000bc40 <at_ble_event_get+0x63c>)
1000b9fe:	4798      	blx	r3
1000ba00:	260f      	movs	r6, #15
1000ba02:	e0f4      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000ba04:	1c30      	adds	r0, r6, #0
1000ba06:	1c29      	adds	r1, r5, #0
1000ba08:	4b8e      	ldr	r3, [pc, #568]	; (1000bc44 <at_ble_event_get+0x640>)
1000ba0a:	4798      	blx	r3
1000ba0c:	1c06      	adds	r6, r0, #0
1000ba0e:	e0ee      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000ba10:	9801      	ldr	r0, [sp, #4]
1000ba12:	1c31      	adds	r1, r6, #0
1000ba14:	1c2a      	adds	r2, r5, #0
1000ba16:	4b8c      	ldr	r3, [pc, #560]	; (1000bc48 <at_ble_event_get+0x644>)
1000ba18:	e017      	b.n	1000ba4a <at_ble_event_get+0x446>
1000ba1a:	1c31      	adds	r1, r6, #0
1000ba1c:	9801      	ldr	r0, [sp, #4]
1000ba1e:	1c2a      	adds	r2, r5, #0
1000ba20:	4b8a      	ldr	r3, [pc, #552]	; (1000bc4c <at_ble_event_get+0x648>)
1000ba22:	4798      	blx	r3
1000ba24:	2611      	movs	r6, #17
1000ba26:	e0e2      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000ba28:	1c31      	adds	r1, r6, #0
1000ba2a:	9801      	ldr	r0, [sp, #4]
1000ba2c:	1c2a      	adds	r2, r5, #0
1000ba2e:	4b88      	ldr	r3, [pc, #544]	; (1000bc50 <at_ble_event_get+0x64c>)
1000ba30:	4798      	blx	r3
1000ba32:	2612      	movs	r6, #18
1000ba34:	e0db      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000ba36:	1c30      	adds	r0, r6, #0
1000ba38:	1c29      	adds	r1, r5, #0
1000ba3a:	4b86      	ldr	r3, [pc, #536]	; (1000bc54 <at_ble_event_get+0x650>)
1000ba3c:	4798      	blx	r3
1000ba3e:	2606      	movs	r6, #6
1000ba40:	e0d5      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000ba42:	1c31      	adds	r1, r6, #0
1000ba44:	1c2a      	adds	r2, r5, #0
1000ba46:	9801      	ldr	r0, [sp, #4]
1000ba48:	4b83      	ldr	r3, [pc, #524]	; (1000bc58 <at_ble_event_get+0x654>)
1000ba4a:	4798      	blx	r3
1000ba4c:	e7de      	b.n	1000ba0c <at_ble_event_get+0x408>
1000ba4e:	9801      	ldr	r0, [sp, #4]
1000ba50:	1c31      	adds	r1, r6, #0
1000ba52:	1c2a      	adds	r2, r5, #0
1000ba54:	4b81      	ldr	r3, [pc, #516]	; (1000bc5c <at_ble_event_get+0x658>)
1000ba56:	e7f8      	b.n	1000ba4a <at_ble_event_get+0x446>
1000ba58:	1c31      	adds	r1, r6, #0
1000ba5a:	9801      	ldr	r0, [sp, #4]
1000ba5c:	1c2a      	adds	r2, r5, #0
1000ba5e:	4b80      	ldr	r3, [pc, #512]	; (1000bc60 <at_ble_event_get+0x65c>)
1000ba60:	4798      	blx	r3
1000ba62:	260d      	movs	r6, #13
1000ba64:	e0c3      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000ba66:	1c31      	adds	r1, r6, #0
1000ba68:	9801      	ldr	r0, [sp, #4]
1000ba6a:	1c2a      	adds	r2, r5, #0
1000ba6c:	4b7d      	ldr	r3, [pc, #500]	; (1000bc64 <at_ble_event_get+0x660>)
1000ba6e:	4798      	blx	r3
1000ba70:	260e      	movs	r6, #14
1000ba72:	e0bc      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000ba74:	9801      	ldr	r0, [sp, #4]
1000ba76:	1c31      	adds	r1, r6, #0
1000ba78:	1c2a      	adds	r2, r5, #0
1000ba7a:	4b7b      	ldr	r3, [pc, #492]	; (1000bc68 <at_ble_event_get+0x664>)
1000ba7c:	4798      	blx	r3
1000ba7e:	e084      	b.n	1000bb8a <at_ble_event_get+0x586>
1000ba80:	1c31      	adds	r1, r6, #0
1000ba82:	9801      	ldr	r0, [sp, #4]
1000ba84:	1c2a      	adds	r2, r5, #0
1000ba86:	4b79      	ldr	r3, [pc, #484]	; (1000bc6c <at_ble_event_get+0x668>)
1000ba88:	4798      	blx	r3
1000ba8a:	260b      	movs	r6, #11
1000ba8c:	e0af      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000ba8e:	1c31      	adds	r1, r6, #0
1000ba90:	9801      	ldr	r0, [sp, #4]
1000ba92:	1c2a      	adds	r2, r5, #0
1000ba94:	4b76      	ldr	r3, [pc, #472]	; (1000bc70 <at_ble_event_get+0x66c>)
1000ba96:	4798      	blx	r3
1000ba98:	2610      	movs	r6, #16
1000ba9a:	e0a8      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000ba9c:	1c30      	adds	r0, r6, #0
1000ba9e:	1c29      	adds	r1, r5, #0
1000baa0:	4b74      	ldr	r3, [pc, #464]	; (1000bc74 <at_ble_event_get+0x670>)
1000baa2:	4798      	blx	r3
1000baa4:	2628      	movs	r6, #40	; 0x28
1000baa6:	e0a2      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000baa8:	1c30      	adds	r0, r6, #0
1000baaa:	1c29      	adds	r1, r5, #0
1000baac:	4b72      	ldr	r3, [pc, #456]	; (1000bc78 <at_ble_event_get+0x674>)
1000baae:	4798      	blx	r3
1000bab0:	2629      	movs	r6, #41	; 0x29
1000bab2:	e09c      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000bab4:	1c30      	adds	r0, r6, #0
1000bab6:	1c29      	adds	r1, r5, #0
1000bab8:	4b70      	ldr	r3, [pc, #448]	; (1000bc7c <at_ble_event_get+0x678>)
1000baba:	4798      	blx	r3
1000babc:	2627      	movs	r6, #39	; 0x27
1000babe:	e096      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000bac0:	1c30      	adds	r0, r6, #0
1000bac2:	1c29      	adds	r1, r5, #0
1000bac4:	4b6e      	ldr	r3, [pc, #440]	; (1000bc80 <at_ble_event_get+0x67c>)
1000bac6:	4798      	blx	r3
1000bac8:	262a      	movs	r6, #42	; 0x2a
1000baca:	e090      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000bacc:	9801      	ldr	r0, [sp, #4]
1000bace:	1c31      	adds	r1, r6, #0
1000bad0:	1c2a      	adds	r2, r5, #0
1000bad2:	4b6c      	ldr	r3, [pc, #432]	; (1000bc84 <at_ble_event_get+0x680>)
1000bad4:	e7b9      	b.n	1000ba4a <at_ble_event_get+0x446>
1000bad6:	9801      	ldr	r0, [sp, #4]
1000bad8:	1c31      	adds	r1, r6, #0
1000bada:	1c2a      	adds	r2, r5, #0
1000badc:	4b6a      	ldr	r3, [pc, #424]	; (1000bc88 <at_ble_event_get+0x684>)
1000bade:	e7b4      	b.n	1000ba4a <at_ble_event_get+0x446>
1000bae0:	1c30      	adds	r0, r6, #0
1000bae2:	1c29      	adds	r1, r5, #0
1000bae4:	4b69      	ldr	r3, [pc, #420]	; (1000bc8c <at_ble_event_get+0x688>)
1000bae6:	4798      	blx	r3
1000bae8:	262b      	movs	r6, #43	; 0x2b
1000baea:	e080      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000baec:	1c30      	adds	r0, r6, #0
1000baee:	1c29      	adds	r1, r5, #0
1000baf0:	4b67      	ldr	r3, [pc, #412]	; (1000bc90 <at_ble_event_get+0x68c>)
1000baf2:	4798      	blx	r3
1000baf4:	262c      	movs	r6, #44	; 0x2c
1000baf6:	e07a      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000baf8:	1c31      	adds	r1, r6, #0
1000bafa:	9801      	ldr	r0, [sp, #4]
1000bafc:	1c2a      	adds	r2, r5, #0
1000bafe:	4b65      	ldr	r3, [pc, #404]	; (1000bc94 <at_ble_event_get+0x690>)
1000bb00:	4798      	blx	r3
1000bb02:	2613      	movs	r6, #19
1000bb04:	e073      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000bb06:	1c31      	adds	r1, r6, #0
1000bb08:	9801      	ldr	r0, [sp, #4]
1000bb0a:	1c2a      	adds	r2, r5, #0
1000bb0c:	4b62      	ldr	r3, [pc, #392]	; (1000bc98 <at_ble_event_get+0x694>)
1000bb0e:	4798      	blx	r3
1000bb10:	2614      	movs	r6, #20
1000bb12:	e06c      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000bb14:	1c31      	adds	r1, r6, #0
1000bb16:	9801      	ldr	r0, [sp, #4]
1000bb18:	1c2a      	adds	r2, r5, #0
1000bb1a:	4b60      	ldr	r3, [pc, #384]	; (1000bc9c <at_ble_event_get+0x698>)
1000bb1c:	4798      	blx	r3
1000bb1e:	2615      	movs	r6, #21
1000bb20:	e065      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000bb22:	1c31      	adds	r1, r6, #0
1000bb24:	9801      	ldr	r0, [sp, #4]
1000bb26:	1c2a      	adds	r2, r5, #0
1000bb28:	4b5d      	ldr	r3, [pc, #372]	; (1000bca0 <at_ble_event_get+0x69c>)
1000bb2a:	4798      	blx	r3
1000bb2c:	2616      	movs	r6, #22
1000bb2e:	e05e      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000bb30:	9801      	ldr	r0, [sp, #4]
1000bb32:	1c31      	adds	r1, r6, #0
1000bb34:	1c2a      	adds	r2, r5, #0
1000bb36:	4b5b      	ldr	r3, [pc, #364]	; (1000bca4 <at_ble_event_get+0x6a0>)
1000bb38:	e787      	b.n	1000ba4a <at_ble_event_get+0x446>
1000bb3a:	1c31      	adds	r1, r6, #0
1000bb3c:	9801      	ldr	r0, [sp, #4]
1000bb3e:	1c2a      	adds	r2, r5, #0
1000bb40:	4b58      	ldr	r3, [pc, #352]	; (1000bca4 <at_ble_event_get+0x6a0>)
1000bb42:	4798      	blx	r3
1000bb44:	88a9      	ldrh	r1, [r5, #4]
1000bb46:	1c06      	adds	r6, r0, #0
1000bb48:	4b57      	ldr	r3, [pc, #348]	; (1000bca8 <at_ble_event_get+0x6a4>)
1000bb4a:	8828      	ldrh	r0, [r5, #0]
1000bb4c:	4798      	blx	r3
1000bb4e:	e04e      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000bb50:	1c31      	adds	r1, r6, #0
1000bb52:	9801      	ldr	r0, [sp, #4]
1000bb54:	1c2a      	adds	r2, r5, #0
1000bb56:	4b55      	ldr	r3, [pc, #340]	; (1000bcac <at_ble_event_get+0x6a8>)
1000bb58:	4798      	blx	r3
1000bb5a:	2623      	movs	r6, #35	; 0x23
1000bb5c:	e047      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000bb5e:	9801      	ldr	r0, [sp, #4]
1000bb60:	1c31      	adds	r1, r6, #0
1000bb62:	1c2a      	adds	r2, r5, #0
1000bb64:	4b52      	ldr	r3, [pc, #328]	; (1000bcb0 <at_ble_event_get+0x6ac>)
1000bb66:	e770      	b.n	1000ba4a <at_ble_event_get+0x446>
1000bb68:	9b01      	ldr	r3, [sp, #4]
1000bb6a:	1c30      	adds	r0, r6, #0
1000bb6c:	0a1f      	lsrs	r7, r3, #8
1000bb6e:	802f      	strh	r7, [r5, #0]
1000bb70:	1c29      	adds	r1, r5, #0
1000bb72:	4b50      	ldr	r3, [pc, #320]	; (1000bcb4 <at_ble_event_get+0x6b0>)
1000bb74:	e749      	b.n	1000ba0a <at_ble_event_get+0x406>
1000bb76:	9801      	ldr	r0, [sp, #4]
1000bb78:	1c31      	adds	r1, r6, #0
1000bb7a:	1c2a      	adds	r2, r5, #0
1000bb7c:	4b4e      	ldr	r3, [pc, #312]	; (1000bcb8 <at_ble_event_get+0x6b4>)
1000bb7e:	e764      	b.n	1000ba4a <at_ble_event_get+0x446>
1000bb80:	1c30      	adds	r0, r6, #0
1000bb82:	1c29      	adds	r1, r5, #0
1000bb84:	9a01      	ldr	r2, [sp, #4]
1000bb86:	4b4d      	ldr	r3, [pc, #308]	; (1000bcbc <at_ble_event_get+0x6b8>)
1000bb88:	4798      	blx	r3
1000bb8a:	263b      	movs	r6, #59	; 0x3b
1000bb8c:	e02f      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000bb8e:	1c31      	adds	r1, r6, #0
1000bb90:	9801      	ldr	r0, [sp, #4]
1000bb92:	1c2a      	adds	r2, r5, #0
1000bb94:	4b4a      	ldr	r3, [pc, #296]	; (1000bcc0 <at_ble_event_get+0x6bc>)
1000bb96:	4798      	blx	r3
1000bb98:	2618      	movs	r6, #24
1000bb9a:	e028      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000bb9c:	1c31      	adds	r1, r6, #0
1000bb9e:	9801      	ldr	r0, [sp, #4]
1000bba0:	1c2a      	adds	r2, r5, #0
1000bba2:	4b48      	ldr	r3, [pc, #288]	; (1000bcc4 <at_ble_event_get+0x6c0>)
1000bba4:	4798      	blx	r3
1000bba6:	2620      	movs	r6, #32
1000bba8:	e021      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000bbaa:	1c31      	adds	r1, r6, #0
1000bbac:	9801      	ldr	r0, [sp, #4]
1000bbae:	1c2a      	adds	r2, r5, #0
1000bbb0:	4b45      	ldr	r3, [pc, #276]	; (1000bcc8 <at_ble_event_get+0x6c4>)
1000bbb2:	4798      	blx	r3
1000bbb4:	2633      	movs	r6, #51	; 0x33
1000bbb6:	e01a      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000bbb8:	1c31      	adds	r1, r6, #0
1000bbba:	9801      	ldr	r0, [sp, #4]
1000bbbc:	1c2a      	adds	r2, r5, #0
1000bbbe:	4b43      	ldr	r3, [pc, #268]	; (1000bccc <at_ble_event_get+0x6c8>)
1000bbc0:	4798      	blx	r3
1000bbc2:	2630      	movs	r6, #48	; 0x30
1000bbc4:	e013      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000bbc6:	1c31      	adds	r1, r6, #0
1000bbc8:	9801      	ldr	r0, [sp, #4]
1000bbca:	1c2a      	adds	r2, r5, #0
1000bbcc:	4b40      	ldr	r3, [pc, #256]	; (1000bcd0 <at_ble_event_get+0x6cc>)
1000bbce:	4798      	blx	r3
1000bbd0:	2634      	movs	r6, #52	; 0x34
1000bbd2:	e00c      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000bbd4:	1c31      	adds	r1, r6, #0
1000bbd6:	9801      	ldr	r0, [sp, #4]
1000bbd8:	1c2a      	adds	r2, r5, #0
1000bbda:	4b3e      	ldr	r3, [pc, #248]	; (1000bcd4 <at_ble_event_get+0x6d0>)
1000bbdc:	4798      	blx	r3
1000bbde:	2635      	movs	r6, #53	; 0x35
1000bbe0:	e005      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000bbe2:	1c31      	adds	r1, r6, #0
1000bbe4:	9801      	ldr	r0, [sp, #4]
1000bbe6:	1c2a      	adds	r2, r5, #0
1000bbe8:	4b3b      	ldr	r3, [pc, #236]	; (1000bcd8 <at_ble_event_get+0x6d4>)
1000bbea:	4798      	blx	r3
1000bbec:	2632      	movs	r6, #50	; 0x32
1000bbee:	9b03      	ldr	r3, [sp, #12]
1000bbf0:	701e      	strb	r6, [r3, #0]
1000bbf2:	2300      	movs	r3, #0
1000bbf4:	9302      	str	r3, [sp, #8]
1000bbf6:	e57a      	b.n	1000b6ee <at_ble_event_get+0xea>
1000bbf8:	23d0      	movs	r3, #208	; 0xd0
1000bbfa:	e7fb      	b.n	1000bbf4 <at_ble_event_get+0x5f0>
1000bbfc:	9b01      	ldr	r3, [sp, #4]
1000bbfe:	9e02      	ldr	r6, [sp, #8]
1000bc00:	2bbb      	cmp	r3, #187	; 0xbb
1000bc02:	d000      	beq.n	1000bc06 <at_ble_event_get+0x602>
1000bc04:	e6e6      	b.n	1000b9d4 <at_ble_event_get+0x3d0>
1000bc06:	e7f2      	b.n	1000bbee <at_ble_event_get+0x5ea>
1000bc08:	9b02      	ldr	r3, [sp, #8]
1000bc0a:	2b00      	cmp	r3, #0
1000bc0c:	d000      	beq.n	1000bc10 <at_ble_event_get+0x60c>
1000bc0e:	e56e      	b.n	1000b6ee <at_ble_event_get+0xea>
1000bc10:	e6e0      	b.n	1000b9d4 <at_ble_event_get+0x3d0>
1000bc12:	9802      	ldr	r0, [sp, #8]
1000bc14:	b007      	add	sp, #28
1000bc16:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bc18:	00000e22 	.word	0x00000e22
1000bc1c:	00000e25 	.word	0x00000e25
1000bc20:	00001b05 	.word	0x00001b05
1000bc24:	00001b01 	.word	0x00001b01
1000bc28:	00001b03 	.word	0x00001b03
1000bc2c:	00001b06 	.word	0x00001b06
1000bc30:	00001b08 	.word	0x00001b08
1000bc34:	1000de29 	.word	0x1000de29
1000bc38:	1000de0d 	.word	0x1000de0d
1000bc3c:	1000e0a9 	.word	0x1000e0a9
1000bc40:	1000e199 	.word	0x1000e199
1000bc44:	1000e1bd 	.word	0x1000e1bd
1000bc48:	1000d1a1 	.word	0x1000d1a1
1000bc4c:	1000da21 	.word	0x1000da21
1000bc50:	1000da9d 	.word	0x1000da9d
1000bc54:	1000d459 	.word	0x1000d459
1000bc58:	1000d4f5 	.word	0x1000d4f5
1000bc5c:	1000d5cd 	.word	0x1000d5cd
1000bc60:	1000d855 	.word	0x1000d855
1000bc64:	1000d8f5 	.word	0x1000d8f5
1000bc68:	1000d9ad 	.word	0x1000d9ad
1000bc6c:	1000d9d5 	.word	0x1000d9d5
1000bc70:	1000d9eb 	.word	0x1000d9eb
1000bc74:	1000dab5 	.word	0x1000dab5
1000bc78:	1000dae3 	.word	0x1000dae3
1000bc7c:	1000daf9 	.word	0x1000daf9
1000bc80:	1000db23 	.word	0x1000db23
1000bc84:	1000d951 	.word	0x1000d951
1000bc88:	1000d97b 	.word	0x1000d97b
1000bc8c:	1000cbe1 	.word	0x1000cbe1
1000bc90:	1000cc0d 	.word	0x1000cc0d
1000bc94:	1000e3dd 	.word	0x1000e3dd
1000bc98:	1000e419 	.word	0x1000e419
1000bc9c:	1000e461 	.word	0x1000e461
1000bca0:	1000e4a5 	.word	0x1000e4a5
1000bca4:	1000e4d9 	.word	0x1000e4d9
1000bca8:	1000e39d 	.word	0x1000e39d
1000bcac:	1000e5a5 	.word	0x1000e5a5
1000bcb0:	1000e52d 	.word	0x1000e52d
1000bcb4:	1000cac5 	.word	0x1000cac5
1000bcb8:	1000cb31 	.word	0x1000cb31
1000bcbc:	1000caf5 	.word	0x1000caf5
1000bcc0:	1000e5b5 	.word	0x1000e5b5
1000bcc4:	1000e5f5 	.word	0x1000e5f5
1000bcc8:	1000e8bd 	.word	0x1000e8bd
1000bccc:	1000e8c7 	.word	0x1000e8c7
1000bcd0:	1000e8cd 	.word	0x1000e8cd
1000bcd4:	1000e8d3 	.word	0x1000e8d3
1000bcd8:	1000e8df 	.word	0x1000e8df

1000bcdc <internal_event_flush>:
1000bcdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000bcde:	490e      	ldr	r1, [pc, #56]	; (1000bd18 <internal_event_flush+0x3c>)
1000bce0:	2400      	movs	r4, #0
1000bce2:	680b      	ldr	r3, [r1, #0]
1000bce4:	1c0f      	adds	r7, r1, #0
1000bce6:	1c1e      	adds	r6, r3, #0
1000bce8:	4a0c      	ldr	r2, [pc, #48]	; (1000bd1c <internal_event_flush+0x40>)
1000bcea:	6815      	ldr	r5, [r2, #0]
1000bcec:	9201      	str	r2, [sp, #4]
1000bcee:	2b00      	cmp	r3, #0
1000bcf0:	d00e      	beq.n	1000bd10 <internal_event_flush+0x34>
1000bcf2:	889a      	ldrh	r2, [r3, #4]
1000bcf4:	6819      	ldr	r1, [r3, #0]
1000bcf6:	4282      	cmp	r2, r0
1000bcf8:	d107      	bne.n	1000bd0a <internal_event_flush+0x2e>
1000bcfa:	2c00      	cmp	r4, #0
1000bcfc:	d001      	beq.n	1000bd02 <internal_event_flush+0x26>
1000bcfe:	6021      	str	r1, [r4, #0]
1000bd00:	e000      	b.n	1000bd04 <internal_event_flush+0x28>
1000bd02:	1c0e      	adds	r6, r1, #0
1000bd04:	601d      	str	r5, [r3, #0]
1000bd06:	1c1d      	adds	r5, r3, #0
1000bd08:	1c23      	adds	r3, r4, #0
1000bd0a:	1c1c      	adds	r4, r3, #0
1000bd0c:	1c0b      	adds	r3, r1, #0
1000bd0e:	e7ee      	b.n	1000bcee <internal_event_flush+0x12>
1000bd10:	9b01      	ldr	r3, [sp, #4]
1000bd12:	603e      	str	r6, [r7, #0]
1000bd14:	601d      	str	r5, [r3, #0]
1000bd16:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000bd18:	1001337c 	.word	0x1001337c
1000bd1c:	10013380 	.word	0x10013380

1000bd20 <internal_conn_flush>:
1000bd20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000bd22:	4a12      	ldr	r2, [pc, #72]	; (1000bd6c <internal_conn_flush+0x4c>)
1000bd24:	9000      	str	r0, [sp, #0]
1000bd26:	6813      	ldr	r3, [r2, #0]
1000bd28:	4811      	ldr	r0, [pc, #68]	; (1000bd70 <internal_conn_flush+0x50>)
1000bd2a:	1c1f      	adds	r7, r3, #0
1000bd2c:	2100      	movs	r1, #0
1000bd2e:	4684      	mov	ip, r0
1000bd30:	6804      	ldr	r4, [r0, #0]
1000bd32:	9201      	str	r2, [sp, #4]
1000bd34:	2b00      	cmp	r3, #0
1000bd36:	d014      	beq.n	1000bd62 <internal_conn_flush+0x42>
1000bd38:	88d8      	ldrh	r0, [r3, #6]
1000bd3a:	9a00      	ldr	r2, [sp, #0]
1000bd3c:	681d      	ldr	r5, [r3, #0]
1000bd3e:	0a06      	lsrs	r6, r0, #8
1000bd40:	4296      	cmp	r6, r2
1000bd42:	d10b      	bne.n	1000bd5c <internal_conn_flush+0x3c>
1000bd44:	26fd      	movs	r6, #253	; 0xfd
1000bd46:	4006      	ands	r6, r0
1000bd48:	2e0c      	cmp	r6, #12
1000bd4a:	d107      	bne.n	1000bd5c <internal_conn_flush+0x3c>
1000bd4c:	2900      	cmp	r1, #0
1000bd4e:	d001      	beq.n	1000bd54 <internal_conn_flush+0x34>
1000bd50:	600d      	str	r5, [r1, #0]
1000bd52:	e000      	b.n	1000bd56 <internal_conn_flush+0x36>
1000bd54:	1c2f      	adds	r7, r5, #0
1000bd56:	601c      	str	r4, [r3, #0]
1000bd58:	1c1c      	adds	r4, r3, #0
1000bd5a:	1c0b      	adds	r3, r1, #0
1000bd5c:	1c19      	adds	r1, r3, #0
1000bd5e:	1c2b      	adds	r3, r5, #0
1000bd60:	e7e8      	b.n	1000bd34 <internal_conn_flush+0x14>
1000bd62:	9b01      	ldr	r3, [sp, #4]
1000bd64:	601f      	str	r7, [r3, #0]
1000bd66:	4663      	mov	r3, ip
1000bd68:	601c      	str	r4, [r3, #0]
1000bd6a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000bd6c:	1001337c 	.word	0x1001337c
1000bd70:	10013380 	.word	0x10013380

1000bd74 <at_ble_device_name_set>:
1000bd74:	b530      	push	{r4, r5, lr}
1000bd76:	23cf      	movs	r3, #207	; 0xcf
1000bd78:	2800      	cmp	r0, #0
1000bd7a:	d010      	beq.n	1000bd9e <at_ble_device_name_set+0x2a>
1000bd7c:	1e4a      	subs	r2, r1, #1
1000bd7e:	2a1f      	cmp	r2, #31
1000bd80:	d80d      	bhi.n	1000bd9e <at_ble_device_name_set+0x2a>
1000bd82:	4a08      	ldr	r2, [pc, #32]	; (1000bda4 <at_ble_device_name_set+0x30>)
1000bd84:	1c13      	adds	r3, r2, #0
1000bd86:	33aa      	adds	r3, #170	; 0xaa
1000bd88:	8019      	strh	r1, [r3, #0]
1000bd8a:	2300      	movs	r3, #0
1000bd8c:	1c1c      	adds	r4, r3, #0
1000bd8e:	5cc5      	ldrb	r5, [r0, r3]
1000bd90:	34ac      	adds	r4, #172	; 0xac
1000bd92:	3301      	adds	r3, #1
1000bd94:	5515      	strb	r5, [r2, r4]
1000bd96:	b2dc      	uxtb	r4, r3
1000bd98:	428c      	cmp	r4, r1
1000bd9a:	d3f7      	bcc.n	1000bd8c <at_ble_device_name_set+0x18>
1000bd9c:	2300      	movs	r3, #0
1000bd9e:	1c18      	adds	r0, r3, #0
1000bda0:	bd30      	pop	{r4, r5, pc}
1000bda2:	46c0      	nop			; (mov r8, r8)
1000bda4:	100141a6 	.word	0x100141a6

1000bda8 <at_ble_addr_get>:
1000bda8:	b510      	push	{r4, lr}
1000bdaa:	1c04      	adds	r4, r0, #0
1000bdac:	20cf      	movs	r0, #207	; 0xcf
1000bdae:	2c00      	cmp	r4, #0
1000bdb0:	d006      	beq.n	1000bdc0 <at_ble_addr_get+0x18>
1000bdb2:	4b04      	ldr	r3, [pc, #16]	; (1000bdc4 <at_ble_addr_get+0x1c>)
1000bdb4:	38ce      	subs	r0, #206	; 0xce
1000bdb6:	1c21      	adds	r1, r4, #0
1000bdb8:	4798      	blx	r3
1000bdba:	4b03      	ldr	r3, [pc, #12]	; (1000bdc8 <at_ble_addr_get+0x20>)
1000bdbc:	791b      	ldrb	r3, [r3, #4]
1000bdbe:	7023      	strb	r3, [r4, #0]
1000bdc0:	bd10      	pop	{r4, pc}
1000bdc2:	46c0      	nop			; (mov r8, r8)
1000bdc4:	1000dcbd 	.word	0x1000dcbd
1000bdc8:	100141a6 	.word	0x100141a6

1000bdcc <at_ble_set_dev_config>:
1000bdcc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bdce:	7906      	ldrb	r6, [r0, #4]
1000bdd0:	b089      	sub	sp, #36	; 0x24
1000bdd2:	25cf      	movs	r5, #207	; 0xcf
1000bdd4:	2e03      	cmp	r6, #3
1000bdd6:	d838      	bhi.n	1000be4a <at_ble_set_dev_config+0x7e>
1000bdd8:	7803      	ldrb	r3, [r0, #0]
1000bdda:	3511      	adds	r5, #17
1000bddc:	2b0f      	cmp	r3, #15
1000bdde:	d834      	bhi.n	1000be4a <at_ble_set_dev_config+0x7e>
1000bde0:	2380      	movs	r3, #128	; 0x80
1000bde2:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000bde4:	3d11      	subs	r5, #17
1000bde6:	009b      	lsls	r3, r3, #2
1000bde8:	429f      	cmp	r7, r3
1000bdea:	d82e      	bhi.n	1000be4a <at_ble_set_dev_config+0x7e>
1000bdec:	7fc5      	ldrb	r5, [r0, #31]
1000bdee:	7f83      	ldrb	r3, [r0, #30]
1000bdf0:	01ad      	lsls	r5, r5, #6
1000bdf2:	015b      	lsls	r3, r3, #5
1000bdf4:	431d      	orrs	r5, r3
1000bdf6:	7ec3      	ldrb	r3, [r0, #27]
1000bdf8:	431d      	orrs	r5, r3
1000bdfa:	7f43      	ldrb	r3, [r0, #29]
1000bdfc:	011b      	lsls	r3, r3, #4
1000bdfe:	431d      	orrs	r5, r3
1000be00:	7f03      	ldrb	r3, [r0, #28]
1000be02:	009b      	lsls	r3, r3, #2
1000be04:	431d      	orrs	r5, r3
1000be06:	4b12      	ldr	r3, [pc, #72]	; (1000be50 <at_ble_set_dev_config+0x84>)
1000be08:	b2ed      	uxtb	r5, r5
1000be0a:	711e      	strb	r6, [r3, #4]
1000be0c:	7903      	ldrb	r3, [r0, #4]
1000be0e:	3b02      	subs	r3, #2
1000be10:	2b01      	cmp	r3, #1
1000be12:	d801      	bhi.n	1000be18 <at_ble_set_dev_config+0x4c>
1000be14:	2302      	movs	r3, #2
1000be16:	7103      	strb	r3, [r0, #4]
1000be18:	1c04      	adds	r4, r0, #0
1000be1a:	1c23      	adds	r3, r4, #0
1000be1c:	330b      	adds	r3, #11
1000be1e:	8861      	ldrh	r1, [r4, #2]
1000be20:	9307      	str	r3, [sp, #28]
1000be22:	7923      	ldrb	r3, [r4, #4]
1000be24:	7800      	ldrb	r0, [r0, #0]
1000be26:	9300      	str	r3, [sp, #0]
1000be28:	9501      	str	r5, [sp, #4]
1000be2a:	8c25      	ldrh	r5, [r4, #32]
1000be2c:	1d62      	adds	r2, r4, #5
1000be2e:	9502      	str	r5, [sp, #8]
1000be30:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000be32:	9b07      	ldr	r3, [sp, #28]
1000be34:	9503      	str	r5, [sp, #12]
1000be36:	9704      	str	r7, [sp, #16]
1000be38:	4d06      	ldr	r5, [pc, #24]	; (1000be54 <at_ble_set_dev_config+0x88>)
1000be3a:	47a8      	blx	r5
1000be3c:	7126      	strb	r6, [r4, #4]
1000be3e:	1c05      	adds	r5, r0, #0
1000be40:	1c21      	adds	r1, r4, #0
1000be42:	4803      	ldr	r0, [pc, #12]	; (1000be50 <at_ble_set_dev_config+0x84>)
1000be44:	2226      	movs	r2, #38	; 0x26
1000be46:	4b04      	ldr	r3, [pc, #16]	; (1000be58 <at_ble_set_dev_config+0x8c>)
1000be48:	4798      	blx	r3
1000be4a:	1c28      	adds	r0, r5, #0
1000be4c:	b009      	add	sp, #36	; 0x24
1000be4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000be50:	100141a6 	.word	0x100141a6
1000be54:	1000dbb5 	.word	0x1000dbb5
1000be58:	1000fa1b 	.word	0x1000fa1b

1000be5c <at_ble_init>:
1000be5c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000be5e:	b087      	sub	sp, #28
1000be60:	af03      	add	r7, sp, #12
1000be62:	4954      	ldr	r1, [pc, #336]	; (1000bfb4 <at_ble_init+0x158>)
1000be64:	220b      	movs	r2, #11
1000be66:	4b54      	ldr	r3, [pc, #336]	; (1000bfb8 <at_ble_init+0x15c>)
1000be68:	1c04      	adds	r4, r0, #0
1000be6a:	1c38      	adds	r0, r7, #0
1000be6c:	4798      	blx	r3
1000be6e:	2205      	movs	r2, #5
1000be70:	4b52      	ldr	r3, [pc, #328]	; (1000bfbc <at_ble_init+0x160>)
1000be72:	2640      	movs	r6, #64	; 0x40
1000be74:	801a      	strh	r2, [r3, #0]
1000be76:	2300      	movs	r3, #0
1000be78:	4a51      	ldr	r2, [pc, #324]	; (1000bfc0 <at_ble_init+0x164>)
1000be7a:	6013      	str	r3, [r2, #0]
1000be7c:	4a51      	ldr	r2, [pc, #324]	; (1000bfc4 <at_ble_init+0x168>)
1000be7e:	7013      	strb	r3, [r2, #0]
1000be80:	4a51      	ldr	r2, [pc, #324]	; (1000bfc8 <at_ble_init+0x16c>)
1000be82:	7013      	strb	r3, [r2, #0]
1000be84:	4b51      	ldr	r3, [pc, #324]	; (1000bfcc <at_ble_init+0x170>)
1000be86:	4798      	blx	r3
1000be88:	4b51      	ldr	r3, [pc, #324]	; (1000bfd0 <at_ble_init+0x174>)
1000be8a:	4798      	blx	r3
1000be8c:	4b51      	ldr	r3, [pc, #324]	; (1000bfd4 <at_ble_init+0x178>)
1000be8e:	4798      	blx	r3
1000be90:	4b51      	ldr	r3, [pc, #324]	; (1000bfd8 <at_ble_init+0x17c>)
1000be92:	4798      	blx	r3
1000be94:	2c00      	cmp	r4, #0
1000be96:	d100      	bne.n	1000be9a <at_ble_init+0x3e>
1000be98:	e089      	b.n	1000bfae <at_ble_init+0x152>
1000be9a:	68a3      	ldr	r3, [r4, #8]
1000be9c:	2b00      	cmp	r3, #0
1000be9e:	d100      	bne.n	1000bea2 <at_ble_init+0x46>
1000bea0:	e085      	b.n	1000bfae <at_ble_init+0x152>
1000bea2:	6923      	ldr	r3, [r4, #16]
1000bea4:	2b00      	cmp	r3, #0
1000bea6:	d100      	bne.n	1000beaa <at_ble_init+0x4e>
1000bea8:	e081      	b.n	1000bfae <at_ble_init+0x152>
1000beaa:	6820      	ldr	r0, [r4, #0]
1000beac:	2800      	cmp	r0, #0
1000beae:	d102      	bne.n	1000beb6 <at_ble_init+0x5a>
1000beb0:	6863      	ldr	r3, [r4, #4]
1000beb2:	2b00      	cmp	r3, #0
1000beb4:	d17b      	bne.n	1000bfae <at_ble_init+0x152>
1000beb6:	4b49      	ldr	r3, [pc, #292]	; (1000bfdc <at_ble_init+0x180>)
1000beb8:	6861      	ldr	r1, [r4, #4]
1000beba:	4798      	blx	r3
1000bebc:	4b48      	ldr	r3, [pc, #288]	; (1000bfe0 <at_ble_init+0x184>)
1000bebe:	4798      	blx	r3
1000bec0:	2801      	cmp	r0, #1
1000bec2:	d901      	bls.n	1000bec8 <at_ble_init+0x6c>
1000bec4:	26e2      	movs	r6, #226	; 0xe2
1000bec6:	e072      	b.n	1000bfae <at_ble_init+0x152>
1000bec8:	4846      	ldr	r0, [pc, #280]	; (1000bfe4 <at_ble_init+0x188>)
1000beca:	4b47      	ldr	r3, [pc, #284]	; (1000bfe8 <at_ble_init+0x18c>)
1000becc:	4798      	blx	r3
1000bece:	2800      	cmp	r0, #0
1000bed0:	d1f8      	bne.n	1000bec4 <at_ble_init+0x68>
1000bed2:	1c20      	adds	r0, r4, #0
1000bed4:	4b45      	ldr	r3, [pc, #276]	; (1000bfec <at_ble_init+0x190>)
1000bed6:	4798      	blx	r3
1000bed8:	68e0      	ldr	r0, [r4, #12]
1000beda:	68a1      	ldr	r1, [r4, #8]
1000bedc:	4b44      	ldr	r3, [pc, #272]	; (1000bff0 <at_ble_init+0x194>)
1000bede:	4798      	blx	r3
1000bee0:	466b      	mov	r3, sp
1000bee2:	2201      	movs	r2, #1
1000bee4:	1cdc      	adds	r4, r3, #3
1000bee6:	1c20      	adds	r0, r4, #0
1000bee8:	a901      	add	r1, sp, #4
1000beea:	4252      	negs	r2, r2
1000beec:	4b41      	ldr	r3, [pc, #260]	; (1000bff4 <at_ble_init+0x198>)
1000beee:	4798      	blx	r3
1000bef0:	2800      	cmp	r0, #0
1000bef2:	d102      	bne.n	1000befa <at_ble_init+0x9e>
1000bef4:	7823      	ldrb	r3, [r4, #0]
1000bef6:	2b39      	cmp	r3, #57	; 0x39
1000bef8:	d1f2      	bne.n	1000bee0 <at_ble_init+0x84>
1000befa:	4b3f      	ldr	r3, [pc, #252]	; (1000bff8 <at_ble_init+0x19c>)
1000befc:	4798      	blx	r3
1000befe:	1e06      	subs	r6, r0, #0
1000bf00:	d155      	bne.n	1000bfae <at_ble_init+0x152>
1000bf02:	1c03      	adds	r3, r0, #0
1000bf04:	2101      	movs	r1, #1
1000bf06:	4a3d      	ldr	r2, [pc, #244]	; (1000bffc <at_ble_init+0x1a0>)
1000bf08:	4249      	negs	r1, r1
1000bf0a:	189a      	adds	r2, r3, r2
1000bf0c:	3312      	adds	r3, #18
1000bf0e:	8151      	strh	r1, [r2, #10]
1000bf10:	2b90      	cmp	r3, #144	; 0x90
1000bf12:	d1f7      	bne.n	1000bf04 <at_ble_init+0xa8>
1000bf14:	4c3a      	ldr	r4, [pc, #232]	; (1000c000 <at_ble_init+0x1a4>)
1000bf16:	3b81      	subs	r3, #129	; 0x81
1000bf18:	7023      	strb	r3, [r4, #0]
1000bf1a:	4b3a      	ldr	r3, [pc, #232]	; (1000c004 <at_ble_init+0x1a8>)
1000bf1c:	4a3a      	ldr	r2, [pc, #232]	; (1000c008 <at_ble_init+0x1ac>)
1000bf1e:	8063      	strh	r3, [r4, #2]
1000bf20:	2300      	movs	r3, #0
1000bf22:	7123      	strb	r3, [r4, #4]
1000bf24:	3301      	adds	r3, #1
1000bf26:	1e58      	subs	r0, r3, #1
1000bf28:	0119      	lsls	r1, r3, #4
1000bf2a:	4301      	orrs	r1, r0
1000bf2c:	3302      	adds	r3, #2
1000bf2e:	7011      	strb	r1, [r2, #0]
1000bf30:	3201      	adds	r2, #1
1000bf32:	2b21      	cmp	r3, #33	; 0x21
1000bf34:	d1f7      	bne.n	1000bf26 <at_ble_init+0xca>
1000bf36:	33e0      	adds	r3, #224	; 0xe0
1000bf38:	33ff      	adds	r3, #255	; 0xff
1000bf3a:	84a3      	strh	r3, [r4, #36]	; 0x24
1000bf3c:	1c23      	adds	r3, r4, #0
1000bf3e:	2500      	movs	r5, #0
1000bf40:	3373      	adds	r3, #115	; 0x73
1000bf42:	701d      	strb	r5, [r3, #0]
1000bf44:	1c23      	adds	r3, r4, #0
1000bf46:	3372      	adds	r3, #114	; 0x72
1000bf48:	701d      	strb	r5, [r3, #0]
1000bf4a:	1c23      	adds	r3, r4, #0
1000bf4c:	3376      	adds	r3, #118	; 0x76
1000bf4e:	701d      	strb	r5, [r3, #0]
1000bf50:	1c23      	adds	r3, r4, #0
1000bf52:	33cc      	adds	r3, #204	; 0xcc
1000bf54:	801d      	strh	r5, [r3, #0]
1000bf56:	1c22      	adds	r2, r4, #0
1000bf58:	23a0      	movs	r3, #160	; 0xa0
1000bf5a:	32d0      	adds	r2, #208	; 0xd0
1000bf5c:	005b      	lsls	r3, r3, #1
1000bf5e:	8013      	strh	r3, [r2, #0]
1000bf60:	1c22      	adds	r2, r4, #0
1000bf62:	32ce      	adds	r2, #206	; 0xce
1000bf64:	8013      	strh	r3, [r2, #0]
1000bf66:	1c23      	adds	r3, r4, #0
1000bf68:	33d2      	adds	r3, #210	; 0xd2
1000bf6a:	801d      	strh	r5, [r3, #0]
1000bf6c:	22fa      	movs	r2, #250	; 0xfa
1000bf6e:	1c23      	adds	r3, r4, #0
1000bf70:	0052      	lsls	r2, r2, #1
1000bf72:	33d4      	adds	r3, #212	; 0xd4
1000bf74:	801a      	strh	r2, [r3, #0]
1000bf76:	1c23      	adds	r3, r4, #0
1000bf78:	33d6      	adds	r3, #214	; 0xd6
1000bf7a:	701d      	strb	r5, [r3, #0]
1000bf7c:	1c20      	adds	r0, r4, #0
1000bf7e:	4b23      	ldr	r3, [pc, #140]	; (1000c00c <at_ble_init+0x1b0>)
1000bf80:	76e5      	strb	r5, [r4, #27]
1000bf82:	7725      	strb	r5, [r4, #28]
1000bf84:	7765      	strb	r5, [r4, #29]
1000bf86:	77a5      	strb	r5, [r4, #30]
1000bf88:	77e5      	strb	r5, [r4, #31]
1000bf8a:	8425      	strh	r5, [r4, #32]
1000bf8c:	8465      	strh	r5, [r4, #34]	; 0x22
1000bf8e:	4798      	blx	r3
1000bf90:	1c23      	adds	r3, r4, #0
1000bf92:	2207      	movs	r2, #7
1000bf94:	3374      	adds	r3, #116	; 0x74
1000bf96:	701a      	strb	r2, [r3, #0]
1000bf98:	1c23      	adds	r3, r4, #0
1000bf9a:	3204      	adds	r2, #4
1000bf9c:	33aa      	adds	r3, #170	; 0xaa
1000bf9e:	801a      	strh	r2, [r3, #0]
1000bfa0:	1c2b      	adds	r3, r5, #0
1000bfa2:	5d7a      	ldrb	r2, [r7, r5]
1000bfa4:	33ac      	adds	r3, #172	; 0xac
1000bfa6:	3501      	adds	r5, #1
1000bfa8:	54e2      	strb	r2, [r4, r3]
1000bfaa:	2d0b      	cmp	r5, #11
1000bfac:	d1f8      	bne.n	1000bfa0 <at_ble_init+0x144>
1000bfae:	1c30      	adds	r0, r6, #0
1000bfb0:	b007      	add	sp, #28
1000bfb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bfb4:	100117dc 	.word	0x100117dc
1000bfb8:	1000fa1b 	.word	0x1000fa1b
1000bfbc:	10014114 	.word	0x10014114
1000bfc0:	1001342c 	.word	0x1001342c
1000bfc4:	1001338c 	.word	0x1001338c
1000bfc8:	10011907 	.word	0x10011907
1000bfcc:	1000e605 	.word	0x1000e605
1000bfd0:	1000c2c1 	.word	0x1000c2c1
1000bfd4:	1000c921 	.word	0x1000c921
1000bfd8:	1000cbd5 	.word	0x1000cbd5
1000bfdc:	1000c95d 	.word	0x1000c95d
1000bfe0:	1000aad1 	.word	0x1000aad1
1000bfe4:	1000ced5 	.word	0x1000ced5
1000bfe8:	1000ad15 	.word	0x1000ad15
1000bfec:	1000cf7d 	.word	0x1000cf7d
1000bff0:	1000b549 	.word	0x1000b549
1000bff4:	1000b605 	.word	0x1000b605
1000bff8:	1000db45 	.word	0x1000db45
1000bffc:	10014116 	.word	0x10014116
1000c000:	100141a6 	.word	0x100141a6
1000c004:	00003a98 	.word	0x00003a98
1000c008:	100141b1 	.word	0x100141b1
1000c00c:	1000bdcd 	.word	0x1000bdcd

1000c010 <at_ble_addr_set>:
1000c010:	b538      	push	{r3, r4, r5, lr}
1000c012:	1c45      	adds	r5, r0, #1
1000c014:	1c03      	adds	r3, r0, #0
1000c016:	20cf      	movs	r0, #207	; 0xcf
1000c018:	2d00      	cmp	r5, #0
1000c01a:	d018      	beq.n	1000c04e <at_ble_addr_set+0x3e>
1000c01c:	781a      	ldrb	r2, [r3, #0]
1000c01e:	2a03      	cmp	r2, #3
1000c020:	d815      	bhi.n	1000c04e <at_ble_addr_set+0x3e>
1000c022:	2a01      	cmp	r2, #1
1000c024:	d102      	bne.n	1000c02c <at_ble_addr_set+0x1c>
1000c026:	785a      	ldrb	r2, [r3, #1]
1000c028:	2a00      	cmp	r2, #0
1000c02a:	d010      	beq.n	1000c04e <at_ble_addr_set+0x3e>
1000c02c:	1c1c      	adds	r4, r3, #0
1000c02e:	1c29      	adds	r1, r5, #0
1000c030:	2206      	movs	r2, #6
1000c032:	4b07      	ldr	r3, [pc, #28]	; (1000c050 <at_ble_addr_set+0x40>)
1000c034:	4807      	ldr	r0, [pc, #28]	; (1000c054 <at_ble_addr_set+0x44>)
1000c036:	4798      	blx	r3
1000c038:	7823      	ldrb	r3, [r4, #0]
1000c03a:	4807      	ldr	r0, [pc, #28]	; (1000c058 <at_ble_addr_set+0x48>)
1000c03c:	7103      	strb	r3, [r0, #4]
1000c03e:	4b07      	ldr	r3, [pc, #28]	; (1000c05c <at_ble_addr_set+0x4c>)
1000c040:	4798      	blx	r3
1000c042:	7823      	ldrb	r3, [r4, #0]
1000c044:	2b00      	cmp	r3, #0
1000c046:	d102      	bne.n	1000c04e <at_ble_addr_set+0x3e>
1000c048:	1c28      	adds	r0, r5, #0
1000c04a:	4b05      	ldr	r3, [pc, #20]	; (1000c060 <at_ble_addr_set+0x50>)
1000c04c:	4798      	blx	r3
1000c04e:	bd38      	pop	{r3, r4, r5, pc}
1000c050:	1000fa1b 	.word	0x1000fa1b
1000c054:	100141ab 	.word	0x100141ab
1000c058:	100141a6 	.word	0x100141a6
1000c05c:	1000bdcd 	.word	0x1000bdcd
1000c060:	1000d001 	.word	0x1000d001

1000c064 <at_ble_adv_data_set>:
1000c064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c066:	4684      	mov	ip, r0
1000c068:	1c0f      	adds	r7, r1, #0
1000c06a:	1c16      	adds	r6, r2, #0
1000c06c:	1c1c      	adds	r4, r3, #0
1000c06e:	2800      	cmp	r0, #0
1000c070:	d102      	bne.n	1000c078 <at_ble_adv_data_set+0x14>
1000c072:	20e2      	movs	r0, #226	; 0xe2
1000c074:	2a00      	cmp	r2, #0
1000c076:	d02b      	beq.n	1000c0d0 <at_ble_adv_data_set+0x6c>
1000c078:	20cf      	movs	r0, #207	; 0xcf
1000c07a:	2f1f      	cmp	r7, #31
1000c07c:	d828      	bhi.n	1000c0d0 <at_ble_adv_data_set+0x6c>
1000c07e:	2c1f      	cmp	r4, #31
1000c080:	d826      	bhi.n	1000c0d0 <at_ble_adv_data_set+0x6c>
1000c082:	4663      	mov	r3, ip
1000c084:	2b00      	cmp	r3, #0
1000c086:	d00e      	beq.n	1000c0a6 <at_ble_adv_data_set+0x42>
1000c088:	4812      	ldr	r0, [pc, #72]	; (1000c0d4 <at_ble_adv_data_set+0x70>)
1000c08a:	4d13      	ldr	r5, [pc, #76]	; (1000c0d8 <at_ble_adv_data_set+0x74>)
1000c08c:	2f00      	cmp	r7, #0
1000c08e:	d104      	bne.n	1000c09a <at_ble_adv_data_set+0x36>
1000c090:	1c39      	adds	r1, r7, #0
1000c092:	221f      	movs	r2, #31
1000c094:	4b11      	ldr	r3, [pc, #68]	; (1000c0dc <at_ble_adv_data_set+0x78>)
1000c096:	4798      	blx	r3
1000c098:	e003      	b.n	1000c0a2 <at_ble_adv_data_set+0x3e>
1000c09a:	4661      	mov	r1, ip
1000c09c:	1c3a      	adds	r2, r7, #0
1000c09e:	4b10      	ldr	r3, [pc, #64]	; (1000c0e0 <at_ble_adv_data_set+0x7c>)
1000c0a0:	4798      	blx	r3
1000c0a2:	3572      	adds	r5, #114	; 0x72
1000c0a4:	702f      	strb	r7, [r5, #0]
1000c0a6:	1e30      	subs	r0, r6, #0
1000c0a8:	d012      	beq.n	1000c0d0 <at_ble_adv_data_set+0x6c>
1000c0aa:	4d0b      	ldr	r5, [pc, #44]	; (1000c0d8 <at_ble_adv_data_set+0x74>)
1000c0ac:	480d      	ldr	r0, [pc, #52]	; (1000c0e4 <at_ble_adv_data_set+0x80>)
1000c0ae:	2c00      	cmp	r4, #0
1000c0b0:	d107      	bne.n	1000c0c2 <at_ble_adv_data_set+0x5e>
1000c0b2:	1c21      	adds	r1, r4, #0
1000c0b4:	221f      	movs	r2, #31
1000c0b6:	4b09      	ldr	r3, [pc, #36]	; (1000c0dc <at_ble_adv_data_set+0x78>)
1000c0b8:	3573      	adds	r5, #115	; 0x73
1000c0ba:	4798      	blx	r3
1000c0bc:	702c      	strb	r4, [r5, #0]
1000c0be:	1c20      	adds	r0, r4, #0
1000c0c0:	e006      	b.n	1000c0d0 <at_ble_adv_data_set+0x6c>
1000c0c2:	1c31      	adds	r1, r6, #0
1000c0c4:	1c22      	adds	r2, r4, #0
1000c0c6:	4b06      	ldr	r3, [pc, #24]	; (1000c0e0 <at_ble_adv_data_set+0x7c>)
1000c0c8:	4798      	blx	r3
1000c0ca:	2000      	movs	r0, #0
1000c0cc:	3573      	adds	r5, #115	; 0x73
1000c0ce:	702c      	strb	r4, [r5, #0]
1000c0d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c0d2:	46c0      	nop			; (mov r8, r8)
1000c0d4:	100141da 	.word	0x100141da
1000c0d8:	100141a6 	.word	0x100141a6
1000c0dc:	1000fa2d 	.word	0x1000fa2d
1000c0e0:	1000fa1b 	.word	0x1000fa1b
1000c0e4:	100141f9 	.word	0x100141f9

1000c0e8 <at_ble_adv_start>:
1000c0e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c0ea:	b091      	sub	sp, #68	; 0x44
1000c0ec:	1c1f      	adds	r7, r3, #0
1000c0ee:	ab16      	add	r3, sp, #88	; 0x58
1000c0f0:	881d      	ldrh	r5, [r3, #0]
1000c0f2:	ab17      	add	r3, sp, #92	; 0x5c
1000c0f4:	881b      	ldrh	r3, [r3, #0]
1000c0f6:	910d      	str	r1, [sp, #52]	; 0x34
1000c0f8:	930e      	str	r3, [sp, #56]	; 0x38
1000c0fa:	ab18      	add	r3, sp, #96	; 0x60
1000c0fc:	781b      	ldrb	r3, [r3, #0]
1000c0fe:	1c04      	adds	r4, r0, #0
1000c100:	930f      	str	r3, [sp, #60]	; 0x3c
1000c102:	4b42      	ldr	r3, [pc, #264]	; (1000c20c <at_ble_adv_start+0x124>)
1000c104:	1c16      	adds	r6, r2, #0
1000c106:	3373      	adds	r3, #115	; 0x73
1000c108:	781b      	ldrb	r3, [r3, #0]
1000c10a:	20cf      	movs	r0, #207	; 0xcf
1000c10c:	930c      	str	r3, [sp, #48]	; 0x30
1000c10e:	2c01      	cmp	r4, #1
1000c110:	d103      	bne.n	1000c11a <at_ble_adv_start+0x32>
1000c112:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000c114:	2b00      	cmp	r3, #0
1000c116:	d176      	bne.n	1000c206 <at_ble_adv_start+0x11e>
1000c118:	e024      	b.n	1000c164 <at_ble_adv_start+0x7c>
1000c11a:	2c04      	cmp	r4, #4
1000c11c:	d873      	bhi.n	1000c206 <at_ble_adv_start+0x11e>
1000c11e:	2380      	movs	r3, #128	; 0x80
1000c120:	01db      	lsls	r3, r3, #7
1000c122:	429d      	cmp	r5, r3
1000c124:	d86f      	bhi.n	1000c206 <at_ble_adv_start+0x11e>
1000c126:	2c00      	cmp	r4, #0
1000c128:	d102      	bne.n	1000c130 <at_ble_adv_start+0x48>
1000c12a:	2d1f      	cmp	r5, #31
1000c12c:	d96b      	bls.n	1000c206 <at_ble_adv_start+0x11e>
1000c12e:	e003      	b.n	1000c138 <at_ble_adv_start+0x50>
1000c130:	2d9f      	cmp	r5, #159	; 0x9f
1000c132:	d801      	bhi.n	1000c138 <at_ble_adv_start+0x50>
1000c134:	2c01      	cmp	r4, #1
1000c136:	d166      	bne.n	1000c206 <at_ble_adv_start+0x11e>
1000c138:	2f00      	cmp	r7, #0
1000c13a:	d009      	beq.n	1000c150 <at_ble_adv_start+0x68>
1000c13c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000c13e:	20cf      	movs	r0, #207	; 0xcf
1000c140:	3b01      	subs	r3, #1
1000c142:	2b01      	cmp	r3, #1
1000c144:	d95f      	bls.n	1000c206 <at_ble_adv_start+0x11e>
1000c146:	2c01      	cmp	r4, #1
1000c148:	d102      	bne.n	1000c150 <at_ble_adv_start+0x68>
1000c14a:	2d00      	cmp	r5, #0
1000c14c:	d100      	bne.n	1000c150 <at_ble_adv_start+0x68>
1000c14e:	3520      	adds	r5, #32
1000c150:	4b2f      	ldr	r3, [pc, #188]	; (1000c210 <at_ble_adv_start+0x128>)
1000c152:	4798      	blx	r3
1000c154:	1c01      	adds	r1, r0, #0
1000c156:	2e00      	cmp	r6, #0
1000c158:	d043      	beq.n	1000c1e2 <at_ble_adv_start+0xfa>
1000c15a:	7833      	ldrb	r3, [r6, #0]
1000c15c:	1e60      	subs	r0, r4, #1
1000c15e:	2b00      	cmp	r3, #0
1000c160:	d109      	bne.n	1000c176 <at_ble_adv_start+0x8e>
1000c162:	e03b      	b.n	1000c1dc <at_ble_adv_start+0xf4>
1000c164:	2380      	movs	r3, #128	; 0x80
1000c166:	01db      	lsls	r3, r3, #7
1000c168:	429d      	cmp	r5, r3
1000c16a:	d84c      	bhi.n	1000c206 <at_ble_adv_start+0x11e>
1000c16c:	2e00      	cmp	r6, #0
1000c16e:	d04a      	beq.n	1000c206 <at_ble_adv_start+0x11e>
1000c170:	2f00      	cmp	r7, #0
1000c172:	d1e3      	bne.n	1000c13c <at_ble_adv_start+0x54>
1000c174:	e02b      	b.n	1000c1ce <at_ble_adv_start+0xe6>
1000c176:	2301      	movs	r3, #1
1000c178:	2803      	cmp	r0, #3
1000c17a:	d93a      	bls.n	1000c1f2 <at_ble_adv_start+0x10a>
1000c17c:	200d      	movs	r0, #13
1000c17e:	1c72      	adds	r2, r6, #1
1000c180:	e002      	b.n	1000c188 <at_ble_adv_start+0xa0>
1000c182:	200e      	movs	r0, #14
1000c184:	1e32      	subs	r2, r6, #0
1000c186:	d1fa      	bne.n	1000c17e <at_ble_adv_start+0x96>
1000c188:	4c20      	ldr	r4, [pc, #128]	; (1000c20c <at_ble_adv_start+0x124>)
1000c18a:	3474      	adds	r4, #116	; 0x74
1000c18c:	7826      	ldrb	r6, [r4, #0]
1000c18e:	2407      	movs	r4, #7
1000c190:	2e00      	cmp	r6, #0
1000c192:	d000      	beq.n	1000c196 <at_ble_adv_start+0xae>
1000c194:	1c34      	adds	r4, r6, #0
1000c196:	9200      	str	r2, [sp, #0]
1000c198:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000c19a:	9403      	str	r4, [sp, #12]
1000c19c:	9204      	str	r2, [sp, #16]
1000c19e:	4a1b      	ldr	r2, [pc, #108]	; (1000c20c <at_ble_adv_start+0x124>)
1000c1a0:	9501      	str	r5, [sp, #4]
1000c1a2:	9502      	str	r5, [sp, #8]
1000c1a4:	9705      	str	r7, [sp, #20]
1000c1a6:	3272      	adds	r2, #114	; 0x72
1000c1a8:	7812      	ldrb	r2, [r2, #0]
1000c1aa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000c1ac:	9206      	str	r2, [sp, #24]
1000c1ae:	4a19      	ldr	r2, [pc, #100]	; (1000c214 <at_ble_adv_start+0x12c>)
1000c1b0:	9207      	str	r2, [sp, #28]
1000c1b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000c1b4:	9208      	str	r2, [sp, #32]
1000c1b6:	4a18      	ldr	r2, [pc, #96]	; (1000c218 <at_ble_adv_start+0x130>)
1000c1b8:	9209      	str	r2, [sp, #36]	; 0x24
1000c1ba:	2264      	movs	r2, #100	; 0x64
1000c1bc:	4362      	muls	r2, r4
1000c1be:	b292      	uxth	r2, r2
1000c1c0:	920a      	str	r2, [sp, #40]	; 0x28
1000c1c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000c1c4:	4c15      	ldr	r4, [pc, #84]	; (1000c21c <at_ble_adv_start+0x134>)
1000c1c6:	920b      	str	r2, [sp, #44]	; 0x2c
1000c1c8:	4a15      	ldr	r2, [pc, #84]	; (1000c220 <at_ble_adv_start+0x138>)
1000c1ca:	47a0      	blx	r4
1000c1cc:	e01b      	b.n	1000c206 <at_ble_adv_start+0x11e>
1000c1ce:	2d00      	cmp	r5, #0
1000c1d0:	d1be      	bne.n	1000c150 <at_ble_adv_start+0x68>
1000c1d2:	4b0f      	ldr	r3, [pc, #60]	; (1000c210 <at_ble_adv_start+0x128>)
1000c1d4:	4798      	blx	r3
1000c1d6:	2520      	movs	r5, #32
1000c1d8:	1c01      	adds	r1, r0, #0
1000c1da:	e7be      	b.n	1000c15a <at_ble_adv_start+0x72>
1000c1dc:	2803      	cmp	r0, #3
1000c1de:	d8cd      	bhi.n	1000c17c <at_ble_adv_start+0x94>
1000c1e0:	e006      	b.n	1000c1f0 <at_ble_adv_start+0x108>
1000c1e2:	1e60      	subs	r0, r4, #1
1000c1e4:	2803      	cmp	r0, #3
1000c1e6:	d903      	bls.n	1000c1f0 <at_ble_adv_start+0x108>
1000c1e8:	1c33      	adds	r3, r6, #0
1000c1ea:	200d      	movs	r0, #13
1000c1ec:	1c32      	adds	r2, r6, #0
1000c1ee:	e7cb      	b.n	1000c188 <at_ble_adv_start+0xa0>
1000c1f0:	2300      	movs	r3, #0
1000c1f2:	f002 fb79 	bl	1000e8e8 <__gnu_thumb1_case_sqi>
1000c1f6:	06c6      	.short	0x06c6
1000c1f8:	0204      	.short	0x0204
1000c1fa:	200f      	movs	r0, #15
1000c1fc:	e7c2      	b.n	1000c184 <at_ble_adv_start+0x9c>
1000c1fe:	2200      	movs	r2, #0
1000c200:	920c      	str	r2, [sp, #48]	; 0x30
1000c202:	200c      	movs	r0, #12
1000c204:	e7be      	b.n	1000c184 <at_ble_adv_start+0x9c>
1000c206:	b011      	add	sp, #68	; 0x44
1000c208:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c20a:	46c0      	nop			; (mov r8, r8)
1000c20c:	100141a6 	.word	0x100141a6
1000c210:	1000e091 	.word	0x1000e091
1000c214:	100141da 	.word	0x100141da
1000c218:	100141f9 	.word	0x100141f9
1000c21c:	1000df71 	.word	0x1000df71
1000c220:	00003a98 	.word	0x00003a98

1000c224 <at_ble_scan_stop>:
1000c224:	b510      	push	{r4, lr}
1000c226:	4b05      	ldr	r3, [pc, #20]	; (1000c23c <at_ble_scan_stop+0x18>)
1000c228:	4798      	blx	r3
1000c22a:	1e04      	subs	r4, r0, #0
1000c22c:	d103      	bne.n	1000c236 <at_ble_scan_stop+0x12>
1000c22e:	20d1      	movs	r0, #209	; 0xd1
1000c230:	4b03      	ldr	r3, [pc, #12]	; (1000c240 <at_ble_scan_stop+0x1c>)
1000c232:	0100      	lsls	r0, r0, #4
1000c234:	4798      	blx	r3
1000c236:	1c20      	adds	r0, r4, #0
1000c238:	bd10      	pop	{r4, pc}
1000c23a:	46c0      	nop			; (mov r8, r8)
1000c23c:	1000dd9d 	.word	0x1000dd9d
1000c240:	1000bcdd 	.word	0x1000bcdd

1000c244 <at_ble_disconnect>:
1000c244:	b538      	push	{r3, r4, r5, lr}
1000c246:	1c04      	adds	r4, r0, #0
1000c248:	4b04      	ldr	r3, [pc, #16]	; (1000c25c <at_ble_disconnect+0x18>)
1000c24a:	1c08      	adds	r0, r1, #0
1000c24c:	1c21      	adds	r1, r4, #0
1000c24e:	4798      	blx	r3
1000c250:	1c05      	adds	r5, r0, #0
1000c252:	4b03      	ldr	r3, [pc, #12]	; (1000c260 <at_ble_disconnect+0x1c>)
1000c254:	1c20      	adds	r0, r4, #0
1000c256:	4798      	blx	r3
1000c258:	1c28      	adds	r0, r5, #0
1000c25a:	bd38      	pop	{r3, r4, r5, pc}
1000c25c:	1000d415 	.word	0x1000d415
1000c260:	1000bd21 	.word	0x1000bd21

1000c264 <at_ble_conn_update_reply>:
1000c264:	b510      	push	{r4, lr}
1000c266:	4c01      	ldr	r4, [pc, #4]	; (1000c26c <at_ble_conn_update_reply+0x8>)
1000c268:	47a0      	blx	r4
1000c26a:	bd10      	pop	{r4, pc}
1000c26c:	1000d905 	.word	0x1000d905

1000c270 <at_ble_random_address_resolve>:
1000c270:	b510      	push	{r4, lr}
1000c272:	23cf      	movs	r3, #207	; 0xcf
1000c274:	2800      	cmp	r0, #0
1000c276:	d00a      	beq.n	1000c28e <at_ble_random_address_resolve+0x1e>
1000c278:	2900      	cmp	r1, #0
1000c27a:	d008      	beq.n	1000c28e <at_ble_random_address_resolve+0x1e>
1000c27c:	2a00      	cmp	r2, #0
1000c27e:	d006      	beq.n	1000c28e <at_ble_random_address_resolve+0x1e>
1000c280:	780c      	ldrb	r4, [r1, #0]
1000c282:	2c02      	cmp	r4, #2
1000c284:	d103      	bne.n	1000c28e <at_ble_random_address_resolve+0x1e>
1000c286:	4b03      	ldr	r3, [pc, #12]	; (1000c294 <at_ble_random_address_resolve+0x24>)
1000c288:	3101      	adds	r1, #1
1000c28a:	4798      	blx	r3
1000c28c:	2300      	movs	r3, #0
1000c28e:	1c18      	adds	r0, r3, #0
1000c290:	bd10      	pop	{r4, pc}
1000c292:	46c0      	nop			; (mov r8, r8)
1000c294:	1000e131 	.word	0x1000e131

1000c298 <at_ble_uuid_type2len>:
1000c298:	23cf      	movs	r3, #207	; 0xcf
1000c29a:	2802      	cmp	r0, #2
1000c29c:	d801      	bhi.n	1000c2a2 <at_ble_uuid_type2len+0xa>
1000c29e:	4b02      	ldr	r3, [pc, #8]	; (1000c2a8 <at_ble_uuid_type2len+0x10>)
1000c2a0:	5c1b      	ldrb	r3, [r3, r0]
1000c2a2:	1c18      	adds	r0, r3, #0
1000c2a4:	4770      	bx	lr
1000c2a6:	46c0      	nop			; (mov r8, r8)
1000c2a8:	100117e7 	.word	0x100117e7

1000c2ac <at_ble_uuid_len2type>:
1000c2ac:	1e83      	subs	r3, r0, #2
1000c2ae:	b2db      	uxtb	r3, r3
1000c2b0:	2003      	movs	r0, #3
1000c2b2:	2b0e      	cmp	r3, #14
1000c2b4:	d801      	bhi.n	1000c2ba <at_ble_uuid_len2type+0xe>
1000c2b6:	4a01      	ldr	r2, [pc, #4]	; (1000c2bc <at_ble_uuid_len2type+0x10>)
1000c2b8:	5cd0      	ldrb	r0, [r2, r3]
1000c2ba:	4770      	bx	lr
1000c2bc:	100117ea 	.word	0x100117ea

1000c2c0 <init_gatt_client_module>:
1000c2c0:	2200      	movs	r2, #0
1000c2c2:	4b01      	ldr	r3, [pc, #4]	; (1000c2c8 <init_gatt_client_module+0x8>)
1000c2c4:	801a      	strh	r2, [r3, #0]
1000c2c6:	4770      	bx	lr
1000c2c8:	10013384 	.word	0x10013384

1000c2cc <db_searchATT>:
1000c2cc:	b570      	push	{r4, r5, r6, lr}
1000c2ce:	1c05      	adds	r5, r0, #0
1000c2d0:	2400      	movs	r4, #0
1000c2d2:	4b0c      	ldr	r3, [pc, #48]	; (1000c304 <db_searchATT+0x38>)
1000c2d4:	6819      	ldr	r1, [r3, #0]
1000c2d6:	4b0c      	ldr	r3, [pc, #48]	; (1000c308 <db_searchATT+0x3c>)
1000c2d8:	681e      	ldr	r6, [r3, #0]
1000c2da:	428c      	cmp	r4, r1
1000c2dc:	dc10      	bgt.n	1000c300 <db_searchATT+0x34>
1000c2de:	200c      	movs	r0, #12
1000c2e0:	1863      	adds	r3, r4, r1
1000c2e2:	0fda      	lsrs	r2, r3, #31
1000c2e4:	18d3      	adds	r3, r2, r3
1000c2e6:	1c02      	adds	r2, r0, #0
1000c2e8:	105b      	asrs	r3, r3, #1
1000c2ea:	435a      	muls	r2, r3
1000c2ec:	18b0      	adds	r0, r6, r2
1000c2ee:	8802      	ldrh	r2, [r0, #0]
1000c2f0:	42aa      	cmp	r2, r5
1000c2f2:	d201      	bcs.n	1000c2f8 <db_searchATT+0x2c>
1000c2f4:	1e59      	subs	r1, r3, #1
1000c2f6:	e7f0      	b.n	1000c2da <db_searchATT+0xe>
1000c2f8:	42aa      	cmp	r2, r5
1000c2fa:	d902      	bls.n	1000c302 <db_searchATT+0x36>
1000c2fc:	1c5c      	adds	r4, r3, #1
1000c2fe:	e7ec      	b.n	1000c2da <db_searchATT+0xe>
1000c300:	2000      	movs	r0, #0
1000c302:	bd70      	pop	{r4, r5, r6, pc}
1000c304:	10013398 	.word	0x10013398
1000c308:	10013390 	.word	0x10013390

1000c30c <att_permissions>:
1000c30c:	b530      	push	{r4, r5, lr}
1000c30e:	2403      	movs	r4, #3
1000c310:	1c05      	adds	r5, r0, #0
1000c312:	2301      	movs	r3, #1
1000c314:	4025      	ands	r5, r4
1000c316:	42a5      	cmp	r5, r4
1000c318:	d009      	beq.n	1000c32e <att_permissions+0x22>
1000c31a:	1c23      	adds	r3, r4, #0
1000c31c:	1924      	adds	r4, r4, r4
1000c31e:	4220      	tst	r0, r4
1000c320:	d105      	bne.n	1000c32e <att_permissions+0x22>
1000c322:	3b02      	subs	r3, #2
1000c324:	4218      	tst	r0, r3
1000c326:	d102      	bne.n	1000c32e <att_permissions+0x22>
1000c328:	1e4b      	subs	r3, r1, #1
1000c32a:	4199      	sbcs	r1, r3
1000c32c:	b28b      	uxth	r3, r1
1000c32e:	2130      	movs	r1, #48	; 0x30
1000c330:	4001      	ands	r1, r0
1000c332:	2930      	cmp	r1, #48	; 0x30
1000c334:	d007      	beq.n	1000c346 <att_permissions+0x3a>
1000c336:	0641      	lsls	r1, r0, #25
1000c338:	d401      	bmi.n	1000c33e <att_permissions+0x32>
1000c33a:	0681      	lsls	r1, r0, #26
1000c33c:	d501      	bpl.n	1000c342 <att_permissions+0x36>
1000c33e:	4807      	ldr	r0, [pc, #28]	; (1000c35c <att_permissions+0x50>)
1000c340:	e009      	b.n	1000c356 <att_permissions+0x4a>
1000c342:	06c1      	lsls	r1, r0, #27
1000c344:	d501      	bpl.n	1000c34a <att_permissions+0x3e>
1000c346:	4806      	ldr	r0, [pc, #24]	; (1000c360 <att_permissions+0x54>)
1000c348:	e005      	b.n	1000c356 <att_permissions+0x4a>
1000c34a:	2a00      	cmp	r2, #0
1000c34c:	d001      	beq.n	1000c352 <att_permissions+0x46>
1000c34e:	2204      	movs	r2, #4
1000c350:	4313      	orrs	r3, r2
1000c352:	2080      	movs	r0, #128	; 0x80
1000c354:	0180      	lsls	r0, r0, #6
1000c356:	4318      	orrs	r0, r3
1000c358:	bd30      	pop	{r4, r5, pc}
1000c35a:	46c0      	nop			; (mov r8, r8)
1000c35c:	0000200c 	.word	0x0000200c
1000c360:	00002004 	.word	0x00002004

1000c364 <char_permissions>:
1000c364:	b530      	push	{r4, r5, lr}
1000c366:	2300      	movs	r3, #0
1000c368:	0784      	lsls	r4, r0, #30
1000c36a:	d503      	bpl.n	1000c374 <char_permissions+0x10>
1000c36c:	3301      	adds	r3, #1
1000c36e:	4219      	tst	r1, r3
1000c370:	d100      	bne.n	1000c374 <char_permissions+0x10>
1000c372:	3302      	adds	r3, #2
1000c374:	0704      	lsls	r4, r0, #28
1000c376:	d508      	bpl.n	1000c38a <char_permissions+0x26>
1000c378:	06cc      	lsls	r4, r1, #27
1000c37a:	d501      	bpl.n	1000c380 <char_permissions+0x1c>
1000c37c:	2404      	movs	r4, #4
1000c37e:	e000      	b.n	1000c382 <char_permissions+0x1e>
1000c380:	240c      	movs	r4, #12
1000c382:	4323      	orrs	r3, r4
1000c384:	2480      	movs	r4, #128	; 0x80
1000c386:	01a4      	lsls	r4, r4, #6
1000c388:	4323      	orrs	r3, r4
1000c38a:	0684      	lsls	r4, r0, #26
1000c38c:	d506      	bpl.n	1000c39c <char_permissions+0x38>
1000c38e:	2406      	movs	r4, #6
1000c390:	4221      	tst	r1, r4
1000c392:	d101      	bne.n	1000c398 <char_permissions+0x34>
1000c394:	340a      	adds	r4, #10
1000c396:	e000      	b.n	1000c39a <char_permissions+0x36>
1000c398:	2430      	movs	r4, #48	; 0x30
1000c39a:	4323      	orrs	r3, r4
1000c39c:	06c4      	lsls	r4, r0, #27
1000c39e:	d506      	bpl.n	1000c3ae <char_permissions+0x4a>
1000c3a0:	2406      	movs	r4, #6
1000c3a2:	4221      	tst	r1, r4
1000c3a4:	d101      	bne.n	1000c3aa <char_permissions+0x46>
1000c3a6:	343a      	adds	r4, #58	; 0x3a
1000c3a8:	e000      	b.n	1000c3ac <char_permissions+0x48>
1000c3aa:	24c0      	movs	r4, #192	; 0xc0
1000c3ac:	4323      	orrs	r3, r4
1000c3ae:	2480      	movs	r4, #128	; 0x80
1000c3b0:	0064      	lsls	r4, r4, #1
1000c3b2:	4220      	tst	r0, r4
1000c3b4:	d000      	beq.n	1000c3b8 <char_permissions+0x54>
1000c3b6:	4323      	orrs	r3, r4
1000c3b8:	07c4      	lsls	r4, r0, #31
1000c3ba:	d502      	bpl.n	1000c3c2 <char_permissions+0x5e>
1000c3bc:	2480      	movs	r4, #128	; 0x80
1000c3be:	00a4      	lsls	r4, r4, #2
1000c3c0:	4323      	orrs	r3, r4
1000c3c2:	2404      	movs	r4, #4
1000c3c4:	4220      	tst	r0, r4
1000c3c6:	d006      	beq.n	1000c3d6 <char_permissions+0x72>
1000c3c8:	06cd      	lsls	r5, r1, #27
1000c3ca:	d400      	bmi.n	1000c3ce <char_permissions+0x6a>
1000c3cc:	240c      	movs	r4, #12
1000c3ce:	4323      	orrs	r3, r4
1000c3d0:	2480      	movs	r4, #128	; 0x80
1000c3d2:	0124      	lsls	r4, r4, #4
1000c3d4:	4323      	orrs	r3, r4
1000c3d6:	0644      	lsls	r4, r0, #25
1000c3d8:	d501      	bpl.n	1000c3de <char_permissions+0x7a>
1000c3da:	4c08      	ldr	r4, [pc, #32]	; (1000c3fc <char_permissions+0x98>)
1000c3dc:	4323      	orrs	r3, r4
1000c3de:	0600      	lsls	r0, r0, #24
1000c3e0:	d507      	bpl.n	1000c3f2 <char_permissions+0x8e>
1000c3e2:	2004      	movs	r0, #4
1000c3e4:	06c9      	lsls	r1, r1, #27
1000c3e6:	d400      	bmi.n	1000c3ea <char_permissions+0x86>
1000c3e8:	200c      	movs	r0, #12
1000c3ea:	4303      	orrs	r3, r0
1000c3ec:	2084      	movs	r0, #132	; 0x84
1000c3ee:	0180      	lsls	r0, r0, #6
1000c3f0:	4303      	orrs	r3, r0
1000c3f2:	0390      	lsls	r0, r2, #14
1000c3f4:	4303      	orrs	r3, r0
1000c3f6:	b298      	uxth	r0, r3
1000c3f8:	bd30      	pop	{r4, r5, pc}
1000c3fa:	46c0      	nop			; (mov r8, r8)
1000c3fc:	00001004 	.word	0x00001004

1000c400 <presentation_format_define>:
1000c400:	b507      	push	{r0, r1, r2, lr}
1000c402:	466a      	mov	r2, sp
1000c404:	780b      	ldrb	r3, [r1, #0]
1000c406:	7013      	strb	r3, [r2, #0]
1000c408:	784b      	ldrb	r3, [r1, #1]
1000c40a:	7053      	strb	r3, [r2, #1]
1000c40c:	884b      	ldrh	r3, [r1, #2]
1000c40e:	7093      	strb	r3, [r2, #2]
1000c410:	0a1b      	lsrs	r3, r3, #8
1000c412:	70d3      	strb	r3, [r2, #3]
1000c414:	790b      	ldrb	r3, [r1, #4]
1000c416:	7113      	strb	r3, [r2, #4]
1000c418:	88cb      	ldrh	r3, [r1, #6]
1000c41a:	2107      	movs	r1, #7
1000c41c:	7153      	strb	r3, [r2, #5]
1000c41e:	0a1b      	lsrs	r3, r3, #8
1000c420:	7193      	strb	r3, [r2, #6]
1000c422:	4b01      	ldr	r3, [pc, #4]	; (1000c428 <presentation_format_define+0x28>)
1000c424:	4798      	blx	r3
1000c426:	bd0e      	pop	{r1, r2, r3, pc}
1000c428:	1000e795 	.word	0x1000e795

1000c42c <db_addATT>:
1000c42c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000c42e:	4c29      	ldr	r4, [pc, #164]	; (1000c4d4 <db_addATT+0xa8>)
1000c430:	1c1d      	adds	r5, r3, #0
1000c432:	6823      	ldr	r3, [r4, #0]
1000c434:	9001      	str	r0, [sp, #4]
1000c436:	26d3      	movs	r6, #211	; 0xd3
1000c438:	2b00      	cmp	r3, #0
1000c43a:	d048      	beq.n	1000c4ce <db_addATT+0xa2>
1000c43c:	1c1e      	adds	r6, r3, #0
1000c43e:	3e0c      	subs	r6, #12
1000c440:	6026      	str	r6, [r4, #0]
1000c442:	2900      	cmp	r1, #0
1000c444:	d005      	beq.n	1000c452 <db_addATT+0x26>
1000c446:	4f24      	ldr	r7, [pc, #144]	; (1000c4d8 <db_addATT+0xac>)
1000c448:	46bc      	mov	ip, r7
1000c44a:	4660      	mov	r0, ip
1000c44c:	683f      	ldr	r7, [r7, #0]
1000c44e:	18bf      	adds	r7, r7, r2
1000c450:	6007      	str	r7, [r0, #0]
1000c452:	4821      	ldr	r0, [pc, #132]	; (1000c4d8 <db_addATT+0xac>)
1000c454:	6807      	ldr	r7, [r0, #0]
1000c456:	4684      	mov	ip, r0
1000c458:	42be      	cmp	r6, r7
1000c45a:	d932      	bls.n	1000c4c2 <db_addATT+0x96>
1000c45c:	4668      	mov	r0, sp
1000c45e:	8880      	ldrh	r0, [r0, #4]
1000c460:	3b0c      	subs	r3, #12
1000c462:	8018      	strh	r0, [r3, #0]
1000c464:	6823      	ldr	r3, [r4, #0]
1000c466:	2900      	cmp	r1, #0
1000c468:	d009      	beq.n	1000c47e <db_addATT+0x52>
1000c46a:	2a00      	cmp	r2, #0
1000c46c:	d007      	beq.n	1000c47e <db_addATT+0x52>
1000c46e:	4660      	mov	r0, ip
1000c470:	6800      	ldr	r0, [r0, #0]
1000c472:	809a      	strh	r2, [r3, #4]
1000c474:	1a80      	subs	r0, r0, r2
1000c476:	6098      	str	r0, [r3, #8]
1000c478:	4b18      	ldr	r3, [pc, #96]	; (1000c4dc <db_addATT+0xb0>)
1000c47a:	4798      	blx	r3
1000c47c:	e002      	b.n	1000c484 <db_addATT+0x58>
1000c47e:	2100      	movs	r1, #0
1000c480:	809a      	strh	r2, [r3, #4]
1000c482:	6099      	str	r1, [r3, #8]
1000c484:	2300      	movs	r3, #0
1000c486:	6822      	ldr	r2, [r4, #0]
1000c488:	7093      	strb	r3, [r2, #2]
1000c48a:	3303      	adds	r3, #3
1000c48c:	402b      	ands	r3, r5
1000c48e:	2b03      	cmp	r3, #3
1000c490:	d001      	beq.n	1000c496 <db_addATT+0x6a>
1000c492:	076b      	lsls	r3, r5, #29
1000c494:	d504      	bpl.n	1000c4a0 <db_addATT+0x74>
1000c496:	2101      	movs	r1, #1
1000c498:	6822      	ldr	r2, [r4, #0]
1000c49a:	7893      	ldrb	r3, [r2, #2]
1000c49c:	430b      	orrs	r3, r1
1000c49e:	7093      	strb	r3, [r2, #2]
1000c4a0:	2330      	movs	r3, #48	; 0x30
1000c4a2:	402b      	ands	r3, r5
1000c4a4:	2b30      	cmp	r3, #48	; 0x30
1000c4a6:	d001      	beq.n	1000c4ac <db_addATT+0x80>
1000c4a8:	066b      	lsls	r3, r5, #25
1000c4aa:	d504      	bpl.n	1000c4b6 <db_addATT+0x8a>
1000c4ac:	2102      	movs	r1, #2
1000c4ae:	6822      	ldr	r2, [r4, #0]
1000c4b0:	7893      	ldrb	r3, [r2, #2]
1000c4b2:	430b      	orrs	r3, r1
1000c4b4:	7093      	strb	r3, [r2, #2]
1000c4b6:	4a0a      	ldr	r2, [pc, #40]	; (1000c4e0 <db_addATT+0xb4>)
1000c4b8:	2600      	movs	r6, #0
1000c4ba:	6813      	ldr	r3, [r2, #0]
1000c4bc:	3301      	adds	r3, #1
1000c4be:	6013      	str	r3, [r2, #0]
1000c4c0:	e005      	b.n	1000c4ce <db_addATT+0xa2>
1000c4c2:	6023      	str	r3, [r4, #0]
1000c4c4:	2611      	movs	r6, #17
1000c4c6:	2900      	cmp	r1, #0
1000c4c8:	d001      	beq.n	1000c4ce <db_addATT+0xa2>
1000c4ca:	1aba      	subs	r2, r7, r2
1000c4cc:	6002      	str	r2, [r0, #0]
1000c4ce:	1c30      	adds	r0, r6, #0
1000c4d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000c4d2:	46c0      	nop			; (mov r8, r8)
1000c4d4:	10013390 	.word	0x10013390
1000c4d8:	10013394 	.word	0x10013394
1000c4dc:	1000fa1b 	.word	0x1000fa1b
1000c4e0:	10013398 	.word	0x10013398

1000c4e4 <user_description_define>:
1000c4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c4e6:	1c05      	adds	r5, r0, #0
1000c4e8:	20cf      	movs	r0, #207	; 0xcf
1000c4ea:	2a00      	cmp	r2, #0
1000c4ec:	d01c      	beq.n	1000c528 <user_description_define+0x44>
1000c4ee:	1c14      	adds	r4, r2, #0
1000c4f0:	2203      	movs	r2, #3
1000c4f2:	1c1e      	adds	r6, r3, #0
1000c4f4:	400a      	ands	r2, r1
1000c4f6:	1c0b      	adds	r3, r1, #0
1000c4f8:	3a03      	subs	r2, #3
1000c4fa:	4251      	negs	r1, r2
1000c4fc:	4151      	adcs	r1, r2
1000c4fe:	075a      	lsls	r2, r3, #29
1000c500:	0fd2      	lsrs	r2, r2, #31
1000c502:	430a      	orrs	r2, r1
1000c504:	03d2      	lsls	r2, r2, #15
1000c506:	4f09      	ldr	r7, [pc, #36]	; (1000c52c <user_description_define+0x48>)
1000c508:	1c28      	adds	r0, r5, #0
1000c50a:	2a00      	cmp	r2, #0
1000c50c:	d003      	beq.n	1000c516 <user_description_define+0x32>
1000c50e:	1c21      	adds	r1, r4, #0
1000c510:	1c32      	adds	r2, r6, #0
1000c512:	47b8      	blx	r7
1000c514:	e008      	b.n	1000c528 <user_description_define+0x44>
1000c516:	1c11      	adds	r1, r2, #0
1000c518:	47b8      	blx	r7
1000c51a:	2800      	cmp	r0, #0
1000c51c:	d104      	bne.n	1000c528 <user_description_define+0x44>
1000c51e:	1c28      	adds	r0, r5, #0
1000c520:	1c31      	adds	r1, r6, #0
1000c522:	1c22      	adds	r2, r4, #0
1000c524:	4b02      	ldr	r3, [pc, #8]	; (1000c530 <user_description_define+0x4c>)
1000c526:	4798      	blx	r3
1000c528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c52a:	46c0      	nop			; (mov r8, r8)
1000c52c:	1000c42d 	.word	0x1000c42d
1000c530:	1000e795 	.word	0x1000e795

1000c534 <at_ble_read_authorize_reply.part.1>:
1000c534:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000c536:	4b09      	ldr	r3, [pc, #36]	; (1000c55c <at_ble_read_authorize_reply.part.1+0x28>)
1000c538:	1c05      	adds	r5, r0, #0
1000c53a:	1c08      	adds	r0, r1, #0
1000c53c:	1c0c      	adds	r4, r1, #0
1000c53e:	4798      	blx	r3
1000c540:	2800      	cmp	r0, #0
1000c542:	d009      	beq.n	1000c558 <at_ble_read_authorize_reply.part.1+0x24>
1000c544:	6882      	ldr	r2, [r0, #8]
1000c546:	2a00      	cmp	r2, #0
1000c548:	d006      	beq.n	1000c558 <at_ble_read_authorize_reply.part.1+0x24>
1000c54a:	8883      	ldrh	r3, [r0, #4]
1000c54c:	1c29      	adds	r1, r5, #0
1000c54e:	9200      	str	r2, [sp, #0]
1000c550:	1c20      	adds	r0, r4, #0
1000c552:	2200      	movs	r2, #0
1000c554:	4c02      	ldr	r4, [pc, #8]	; (1000c560 <at_ble_read_authorize_reply.part.1+0x2c>)
1000c556:	47a0      	blx	r4
1000c558:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000c55a:	46c0      	nop			; (mov r8, r8)
1000c55c:	1000c2cd 	.word	0x1000c2cd
1000c560:	1000e22d 	.word	0x1000e22d

1000c564 <internal_at_ble_service_define>:
1000c564:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c566:	b08b      	sub	sp, #44	; 0x2c
1000c568:	9306      	str	r3, [sp, #24]
1000c56a:	ab10      	add	r3, sp, #64	; 0x40
1000c56c:	9202      	str	r2, [sp, #8]
1000c56e:	cb04      	ldmia	r3!, {r2}
1000c570:	1c05      	adds	r5, r0, #0
1000c572:	881b      	ldrh	r3, [r3, #0]
1000c574:	9105      	str	r1, [sp, #20]
1000c576:	9303      	str	r3, [sp, #12]
1000c578:	ab12      	add	r3, sp, #72	; 0x48
1000c57a:	781b      	ldrb	r3, [r3, #0]
1000c57c:	20cf      	movs	r0, #207	; 0xcf
1000c57e:	9304      	str	r3, [sp, #16]
1000c580:	2d00      	cmp	r5, #0
1000c582:	d100      	bne.n	1000c586 <internal_at_ble_service_define+0x22>
1000c584:	e1ca      	b.n	1000c91c <internal_at_ble_service_define+0x3b8>
1000c586:	2900      	cmp	r1, #0
1000c588:	d100      	bne.n	1000c58c <internal_at_ble_service_define+0x28>
1000c58a:	e1c7      	b.n	1000c91c <internal_at_ble_service_define+0x3b8>
1000c58c:	2a00      	cmp	r2, #0
1000c58e:	d100      	bne.n	1000c592 <internal_at_ble_service_define+0x2e>
1000c590:	e1c4      	b.n	1000c91c <internal_at_ble_service_define+0x3b8>
1000c592:	9b03      	ldr	r3, [sp, #12]
1000c594:	2b00      	cmp	r3, #0
1000c596:	d100      	bne.n	1000c59a <internal_at_ble_service_define+0x36>
1000c598:	e1c0      	b.n	1000c91c <internal_at_ble_service_define+0x3b8>
1000c59a:	4bc9      	ldr	r3, [pc, #804]	; (1000c8c0 <internal_at_ble_service_define+0x35c>)
1000c59c:	3004      	adds	r0, #4
1000c59e:	681e      	ldr	r6, [r3, #0]
1000c5a0:	2e00      	cmp	r6, #0
1000c5a2:	d100      	bne.n	1000c5a6 <internal_at_ble_service_define+0x42>
1000c5a4:	e1ba      	b.n	1000c91c <internal_at_ble_service_define+0x3b8>
1000c5a6:	2400      	movs	r4, #0
1000c5a8:	4bc6      	ldr	r3, [pc, #792]	; (1000c8c4 <internal_at_ble_service_define+0x360>)
1000c5aa:	8034      	strh	r4, [r6, #0]
1000c5ac:	881b      	ldrh	r3, [r3, #0]
1000c5ae:	1db7      	adds	r7, r6, #6
1000c5b0:	1c21      	adds	r1, r4, #0
1000c5b2:	2210      	movs	r2, #16
1000c5b4:	8073      	strh	r3, [r6, #2]
1000c5b6:	1c38      	adds	r0, r7, #0
1000c5b8:	4bc3      	ldr	r3, [pc, #780]	; (1000c8c8 <internal_at_ble_service_define+0x364>)
1000c5ba:	4798      	blx	r3
1000c5bc:	7828      	ldrb	r0, [r5, #0]
1000c5be:	4bc3      	ldr	r3, [pc, #780]	; (1000c8cc <internal_at_ble_service_define+0x368>)
1000c5c0:	4798      	blx	r3
1000c5c2:	1c69      	adds	r1, r5, #1
1000c5c4:	1c02      	adds	r2, r0, #0
1000c5c6:	4bc2      	ldr	r3, [pc, #776]	; (1000c8d0 <internal_at_ble_service_define+0x36c>)
1000c5c8:	1c38      	adds	r0, r7, #0
1000c5ca:	4798      	blx	r3
1000c5cc:	2204      	movs	r2, #4
1000c5ce:	782b      	ldrb	r3, [r5, #0]
1000c5d0:	9d02      	ldr	r5, [sp, #8]
1000c5d2:	011b      	lsls	r3, r3, #4
1000c5d4:	4313      	orrs	r3, r2
1000c5d6:	9a04      	ldr	r2, [sp, #16]
1000c5d8:	7174      	strb	r4, [r6, #5]
1000c5da:	0192      	lsls	r2, r2, #6
1000c5dc:	4313      	orrs	r3, r2
1000c5de:	7133      	strb	r3, [r6, #4]
1000c5e0:	2316      	movs	r3, #22
1000c5e2:	9a06      	ldr	r2, [sp, #24]
1000c5e4:	3512      	adds	r5, #18
1000c5e6:	4353      	muls	r3, r2
1000c5e8:	9a02      	ldr	r2, [sp, #8]
1000c5ea:	3312      	adds	r3, #18
1000c5ec:	18d7      	adds	r7, r2, r3
1000c5ee:	42bd      	cmp	r5, r7
1000c5f0:	d00f      	beq.n	1000c612 <internal_at_ble_service_define+0xae>
1000c5f2:	4bb8      	ldr	r3, [pc, #736]	; (1000c8d4 <internal_at_ble_service_define+0x370>)
1000c5f4:	8829      	ldrh	r1, [r5, #0]
1000c5f6:	9300      	str	r3, [sp, #0]
1000c5f8:	230e      	movs	r3, #14
1000c5fa:	aa06      	add	r2, sp, #24
1000c5fc:	189b      	adds	r3, r3, r2
1000c5fe:	9301      	str	r3, [sp, #4]
1000c600:	4cb5      	ldr	r4, [pc, #724]	; (1000c8d8 <internal_at_ble_service_define+0x374>)
1000c602:	1c30      	adds	r0, r6, #0
1000c604:	2201      	movs	r2, #1
1000c606:	2302      	movs	r3, #2
1000c608:	47a0      	blx	r4
1000c60a:	3516      	adds	r5, #22
1000c60c:	1e04      	subs	r4, r0, #0
1000c60e:	d0ee      	beq.n	1000c5ee <internal_at_ble_service_define+0x8a>
1000c610:	e183      	b.n	1000c91a <internal_at_ble_service_define+0x3b6>
1000c612:	9f10      	ldr	r7, [sp, #64]	; 0x40
1000c614:	2300      	movs	r3, #0
1000c616:	3714      	adds	r7, #20
1000c618:	1c3d      	adds	r5, r7, #0
1000c61a:	9302      	str	r3, [sp, #8]
1000c61c:	9b02      	ldr	r3, [sp, #8]
1000c61e:	9a03      	ldr	r2, [sp, #12]
1000c620:	4293      	cmp	r3, r2
1000c622:	db00      	blt.n	1000c626 <internal_at_ble_service_define+0xc2>
1000c624:	e0bf      	b.n	1000c7a6 <internal_at_ble_service_define+0x242>
1000c626:	4bad      	ldr	r3, [pc, #692]	; (1000c8dc <internal_at_ble_service_define+0x378>)
1000c628:	aa06      	add	r2, sp, #24
1000c62a:	9300      	str	r3, [sp, #0]
1000c62c:	230e      	movs	r3, #14
1000c62e:	189b      	adds	r3, r3, r2
1000c630:	9301      	str	r3, [sp, #4]
1000c632:	4ca9      	ldr	r4, [pc, #676]	; (1000c8d8 <internal_at_ble_service_define+0x374>)
1000c634:	1c30      	adds	r0, r6, #0
1000c636:	2104      	movs	r1, #4
1000c638:	2201      	movs	r2, #1
1000c63a:	2302      	movs	r3, #2
1000c63c:	47a0      	blx	r4
1000c63e:	1e04      	subs	r4, r0, #0
1000c640:	d000      	beq.n	1000c644 <internal_at_ble_service_define+0xe0>
1000c642:	e16a      	b.n	1000c91a <internal_at_ble_service_define+0x3b6>
1000c644:	1c2b      	adds	r3, r5, #0
1000c646:	3b12      	subs	r3, #18
1000c648:	7b2c      	ldrb	r4, [r5, #12]
1000c64a:	781b      	ldrb	r3, [r3, #0]
1000c64c:	1c21      	adds	r1, r4, #0
1000c64e:	1c1a      	adds	r2, r3, #0
1000c650:	9304      	str	r3, [sp, #16]
1000c652:	8828      	ldrh	r0, [r5, #0]
1000c654:	4ba2      	ldr	r3, [pc, #648]	; (1000c8e0 <internal_at_ble_service_define+0x37c>)
1000c656:	4798      	blx	r3
1000c658:	2303      	movs	r3, #3
1000c65a:	4023      	ands	r3, r4
1000c65c:	3b03      	subs	r3, #3
1000c65e:	4259      	negs	r1, r3
1000c660:	4159      	adcs	r1, r3
1000c662:	2301      	movs	r3, #1
1000c664:	08a4      	lsrs	r4, r4, #2
1000c666:	401c      	ands	r4, r3
1000c668:	430c      	orrs	r4, r1
1000c66a:	896b      	ldrh	r3, [r5, #10]
1000c66c:	03e4      	lsls	r4, r4, #15
1000c66e:	431c      	orrs	r4, r3
1000c670:	9007      	str	r0, [sp, #28]
1000c672:	4b96      	ldr	r3, [pc, #600]	; (1000c8cc <internal_at_ble_service_define+0x368>)
1000c674:	9804      	ldr	r0, [sp, #16]
1000c676:	4798      	blx	r3
1000c678:	1c2a      	adds	r2, r5, #0
1000c67a:	3a11      	subs	r2, #17
1000c67c:	9200      	str	r2, [sp, #0]
1000c67e:	3a03      	subs	r2, #3
1000c680:	1c03      	adds	r3, r0, #0
1000c682:	9201      	str	r2, [sp, #4]
1000c684:	1c21      	adds	r1, r4, #0
1000c686:	1c30      	adds	r0, r6, #0
1000c688:	4c93      	ldr	r4, [pc, #588]	; (1000c8d8 <internal_at_ble_service_define+0x374>)
1000c68a:	9a07      	ldr	r2, [sp, #28]
1000c68c:	47a0      	blx	r4
1000c68e:	1e04      	subs	r4, r0, #0
1000c690:	d000      	beq.n	1000c694 <internal_at_ble_service_define+0x130>
1000c692:	e142      	b.n	1000c91a <internal_at_ble_service_define+0x3b6>
1000c694:	22c0      	movs	r2, #192	; 0xc0
1000c696:	882b      	ldrh	r3, [r5, #0]
1000c698:	0052      	lsls	r2, r2, #1
1000c69a:	4213      	tst	r3, r2
1000c69c:	d104      	bne.n	1000c6a8 <internal_at_ble_service_define+0x144>
1000c69e:	8aab      	ldrh	r3, [r5, #20]
1000c6a0:	9304      	str	r3, [sp, #16]
1000c6a2:	2b00      	cmp	r3, #0
1000c6a4:	d116      	bne.n	1000c6d4 <internal_at_ble_service_define+0x170>
1000c6a6:	e03a      	b.n	1000c71e <internal_at_ble_service_define+0x1ba>
1000c6a8:	2201      	movs	r2, #1
1000c6aa:	09d9      	lsrs	r1, r3, #7
1000c6ac:	4011      	ands	r1, r2
1000c6ae:	05db      	lsls	r3, r3, #23
1000c6b0:	d501      	bpl.n	1000c6b6 <internal_at_ble_service_define+0x152>
1000c6b2:	2302      	movs	r3, #2
1000c6b4:	4319      	orrs	r1, r3
1000c6b6:	4b8b      	ldr	r3, [pc, #556]	; (1000c8e4 <internal_at_ble_service_define+0x380>)
1000c6b8:	aa06      	add	r2, sp, #24
1000c6ba:	9300      	str	r3, [sp, #0]
1000c6bc:	230e      	movs	r3, #14
1000c6be:	189b      	adds	r3, r3, r2
1000c6c0:	9301      	str	r3, [sp, #4]
1000c6c2:	4c85      	ldr	r4, [pc, #532]	; (1000c8d8 <internal_at_ble_service_define+0x374>)
1000c6c4:	0209      	lsls	r1, r1, #8
1000c6c6:	1c30      	adds	r0, r6, #0
1000c6c8:	2201      	movs	r2, #1
1000c6ca:	2302      	movs	r3, #2
1000c6cc:	47a0      	blx	r4
1000c6ce:	1e04      	subs	r4, r0, #0
1000c6d0:	d0e5      	beq.n	1000c69e <internal_at_ble_service_define+0x13a>
1000c6d2:	e122      	b.n	1000c91a <internal_at_ble_service_define+0x3b6>
1000c6d4:	2380      	movs	r3, #128	; 0x80
1000c6d6:	882a      	ldrh	r2, [r5, #0]
1000c6d8:	7f2c      	ldrb	r4, [r5, #28]
1000c6da:	005b      	lsls	r3, r3, #1
1000c6dc:	401a      	ands	r2, r3
1000c6de:	1c20      	adds	r0, r4, #0
1000c6e0:	2101      	movs	r1, #1
1000c6e2:	2a00      	cmp	r2, #0
1000c6e4:	d000      	beq.n	1000c6e8 <internal_at_ble_service_define+0x184>
1000c6e6:	1c0a      	adds	r2, r1, #0
1000c6e8:	4b7f      	ldr	r3, [pc, #508]	; (1000c8e8 <internal_at_ble_service_define+0x384>)
1000c6ea:	4798      	blx	r3
1000c6ec:	2203      	movs	r2, #3
1000c6ee:	4022      	ands	r2, r4
1000c6f0:	3a03      	subs	r2, #3
1000c6f2:	4251      	negs	r1, r2
1000c6f4:	4151      	adcs	r1, r2
1000c6f6:	4b7d      	ldr	r3, [pc, #500]	; (1000c8ec <internal_at_ble_service_define+0x388>)
1000c6f8:	1c0a      	adds	r2, r1, #0
1000c6fa:	9300      	str	r3, [sp, #0]
1000c6fc:	1c2b      	adds	r3, r5, #0
1000c6fe:	0764      	lsls	r4, r4, #29
1000c700:	0fe4      	lsrs	r4, r4, #31
1000c702:	4322      	orrs	r2, r4
1000c704:	03d2      	lsls	r2, r2, #15
1000c706:	4310      	orrs	r0, r2
1000c708:	3320      	adds	r3, #32
1000c70a:	b282      	uxth	r2, r0
1000c70c:	9301      	str	r3, [sp, #4]
1000c70e:	4c72      	ldr	r4, [pc, #456]	; (1000c8d8 <internal_at_ble_service_define+0x374>)
1000c710:	1c30      	adds	r0, r6, #0
1000c712:	9904      	ldr	r1, [sp, #16]
1000c714:	2302      	movs	r3, #2
1000c716:	47a0      	blx	r4
1000c718:	1e04      	subs	r4, r0, #0
1000c71a:	d000      	beq.n	1000c71e <internal_at_ble_service_define+0x1ba>
1000c71c:	e0fd      	b.n	1000c91a <internal_at_ble_service_define+0x3b6>
1000c71e:	2101      	movs	r1, #1
1000c720:	882b      	ldrh	r3, [r5, #0]
1000c722:	420b      	tst	r3, r1
1000c724:	d011      	beq.n	1000c74a <internal_at_ble_service_define+0x1e6>
1000c726:	7fa8      	ldrb	r0, [r5, #30]
1000c728:	4b6f      	ldr	r3, [pc, #444]	; (1000c8e8 <internal_at_ble_service_define+0x384>)
1000c72a:	2200      	movs	r2, #0
1000c72c:	4798      	blx	r3
1000c72e:	4b70      	ldr	r3, [pc, #448]	; (1000c8f0 <internal_at_ble_service_define+0x38c>)
1000c730:	1c02      	adds	r2, r0, #0
1000c732:	9300      	str	r3, [sp, #0]
1000c734:	1c2b      	adds	r3, r5, #0
1000c736:	3324      	adds	r3, #36	; 0x24
1000c738:	9301      	str	r3, [sp, #4]
1000c73a:	4c67      	ldr	r4, [pc, #412]	; (1000c8d8 <internal_at_ble_service_define+0x374>)
1000c73c:	1c30      	adds	r0, r6, #0
1000c73e:	496d      	ldr	r1, [pc, #436]	; (1000c8f4 <internal_at_ble_service_define+0x390>)
1000c740:	2302      	movs	r3, #2
1000c742:	47a0      	blx	r4
1000c744:	1e04      	subs	r4, r0, #0
1000c746:	d000      	beq.n	1000c74a <internal_at_ble_service_define+0x1e6>
1000c748:	e0e7      	b.n	1000c91a <internal_at_ble_service_define+0x3b6>
1000c74a:	2330      	movs	r3, #48	; 0x30
1000c74c:	882a      	ldrh	r2, [r5, #0]
1000c74e:	421a      	tst	r2, r3
1000c750:	d012      	beq.n	1000c778 <internal_at_ble_service_define+0x214>
1000c752:	2101      	movs	r1, #1
1000c754:	7f68      	ldrb	r0, [r5, #29]
1000c756:	1c0a      	adds	r2, r1, #0
1000c758:	4b63      	ldr	r3, [pc, #396]	; (1000c8e8 <internal_at_ble_service_define+0x384>)
1000c75a:	4798      	blx	r3
1000c75c:	4b66      	ldr	r3, [pc, #408]	; (1000c8f8 <internal_at_ble_service_define+0x394>)
1000c75e:	1c02      	adds	r2, r0, #0
1000c760:	9300      	str	r3, [sp, #0]
1000c762:	1c2b      	adds	r3, r5, #0
1000c764:	3322      	adds	r3, #34	; 0x22
1000c766:	9301      	str	r3, [sp, #4]
1000c768:	4c5b      	ldr	r4, [pc, #364]	; (1000c8d8 <internal_at_ble_service_define+0x374>)
1000c76a:	1c30      	adds	r0, r6, #0
1000c76c:	4961      	ldr	r1, [pc, #388]	; (1000c8f4 <internal_at_ble_service_define+0x390>)
1000c76e:	2302      	movs	r3, #2
1000c770:	47a0      	blx	r4
1000c772:	1e04      	subs	r4, r0, #0
1000c774:	d000      	beq.n	1000c778 <internal_at_ble_service_define+0x214>
1000c776:	e0d0      	b.n	1000c91a <internal_at_ble_service_define+0x3b6>
1000c778:	69ab      	ldr	r3, [r5, #24]
1000c77a:	2b00      	cmp	r3, #0
1000c77c:	d00e      	beq.n	1000c79c <internal_at_ble_service_define+0x238>
1000c77e:	4b5f      	ldr	r3, [pc, #380]	; (1000c8fc <internal_at_ble_service_define+0x398>)
1000c780:	aa06      	add	r2, sp, #24
1000c782:	9300      	str	r3, [sp, #0]
1000c784:	230e      	movs	r3, #14
1000c786:	189b      	adds	r3, r3, r2
1000c788:	9301      	str	r3, [sp, #4]
1000c78a:	4c53      	ldr	r4, [pc, #332]	; (1000c8d8 <internal_at_ble_service_define+0x374>)
1000c78c:	1c30      	adds	r0, r6, #0
1000c78e:	2107      	movs	r1, #7
1000c790:	2201      	movs	r2, #1
1000c792:	2302      	movs	r3, #2
1000c794:	47a0      	blx	r4
1000c796:	1e04      	subs	r4, r0, #0
1000c798:	d000      	beq.n	1000c79c <internal_at_ble_service_define+0x238>
1000c79a:	e0be      	b.n	1000c91a <internal_at_ble_service_define+0x3b6>
1000c79c:	9b02      	ldr	r3, [sp, #8]
1000c79e:	353c      	adds	r5, #60	; 0x3c
1000c7a0:	3301      	adds	r3, #1
1000c7a2:	9302      	str	r3, [sp, #8]
1000c7a4:	e73a      	b.n	1000c61c <internal_at_ble_service_define+0xb8>
1000c7a6:	1c30      	adds	r0, r6, #0
1000c7a8:	4b55      	ldr	r3, [pc, #340]	; (1000c900 <internal_at_ble_service_define+0x39c>)
1000c7aa:	4798      	blx	r3
1000c7ac:	1e04      	subs	r4, r0, #0
1000c7ae:	d000      	beq.n	1000c7b2 <internal_at_ble_service_define+0x24e>
1000c7b0:	e0b3      	b.n	1000c91a <internal_at_ble_service_define+0x3b6>
1000c7b2:	8833      	ldrh	r3, [r6, #0]
1000c7b4:	9a05      	ldr	r2, [sp, #20]
1000c7b6:	8013      	strh	r3, [r2, #0]
1000c7b8:	8836      	ldrh	r6, [r6, #0]
1000c7ba:	9b06      	ldr	r3, [sp, #24]
1000c7bc:	9a03      	ldr	r2, [sp, #12]
1000c7be:	18f6      	adds	r6, r6, r3
1000c7c0:	b2b3      	uxth	r3, r6
1000c7c2:	9302      	str	r3, [sp, #8]
1000c7c4:	233c      	movs	r3, #60	; 0x3c
1000c7c6:	4353      	muls	r3, r2
1000c7c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000c7ca:	3314      	adds	r3, #20
1000c7cc:	18d3      	adds	r3, r2, r3
1000c7ce:	9304      	str	r3, [sp, #16]
1000c7d0:	9b04      	ldr	r3, [sp, #16]
1000c7d2:	429f      	cmp	r7, r3
1000c7d4:	d100      	bne.n	1000c7d8 <internal_at_ble_service_define+0x274>
1000c7d6:	e0a0      	b.n	1000c91a <internal_at_ble_service_define+0x3b6>
1000c7d8:	9b02      	ldr	r3, [sp, #8]
1000c7da:	1c9d      	adds	r5, r3, #2
1000c7dc:	1c3b      	adds	r3, r7, #0
1000c7de:	b2ad      	uxth	r5, r5
1000c7e0:	3b14      	subs	r3, #20
1000c7e2:	801d      	strh	r5, [r3, #0]
1000c7e4:	9303      	str	r3, [sp, #12]
1000c7e6:	893b      	ldrh	r3, [r7, #8]
1000c7e8:	2b00      	cmp	r3, #0
1000c7ea:	d108      	bne.n	1000c7fe <internal_at_ble_service_define+0x29a>
1000c7ec:	23c0      	movs	r3, #192	; 0xc0
1000c7ee:	883a      	ldrh	r2, [r7, #0]
1000c7f0:	005b      	lsls	r3, r3, #1
1000c7f2:	421a      	tst	r2, r3
1000c7f4:	d026      	beq.n	1000c844 <internal_at_ble_service_define+0x2e0>
1000c7f6:	9e02      	ldr	r6, [sp, #8]
1000c7f8:	3603      	adds	r6, #3
1000c7fa:	b2b5      	uxth	r5, r6
1000c7fc:	e022      	b.n	1000c844 <internal_at_ble_service_define+0x2e0>
1000c7fe:	2103      	movs	r1, #3
1000c800:	7b3b      	ldrb	r3, [r7, #12]
1000c802:	4019      	ands	r1, r3
1000c804:	3903      	subs	r1, #3
1000c806:	424a      	negs	r2, r1
1000c808:	414a      	adcs	r2, r1
1000c80a:	0759      	lsls	r1, r3, #29
1000c80c:	0fc9      	lsrs	r1, r1, #31
1000c80e:	4311      	orrs	r1, r2
1000c810:	03c9      	lsls	r1, r1, #15
1000c812:	897a      	ldrh	r2, [r7, #10]
1000c814:	2900      	cmp	r1, #0
1000c816:	d007      	beq.n	1000c828 <internal_at_ble_service_define+0x2c4>
1000c818:	6879      	ldr	r1, [r7, #4]
1000c81a:	2900      	cmp	r1, #0
1000c81c:	d100      	bne.n	1000c820 <internal_at_ble_service_define+0x2bc>
1000c81e:	4939      	ldr	r1, [pc, #228]	; (1000c904 <internal_at_ble_service_define+0x3a0>)
1000c820:	1c28      	adds	r0, r5, #0
1000c822:	4e39      	ldr	r6, [pc, #228]	; (1000c908 <internal_at_ble_service_define+0x3a4>)
1000c824:	47b0      	blx	r6
1000c826:	e00a      	b.n	1000c83e <internal_at_ble_service_define+0x2da>
1000c828:	1c28      	adds	r0, r5, #0
1000c82a:	4e37      	ldr	r6, [pc, #220]	; (1000c908 <internal_at_ble_service_define+0x3a4>)
1000c82c:	47b0      	blx	r6
1000c82e:	2800      	cmp	r0, #0
1000c830:	d172      	bne.n	1000c918 <internal_at_ble_service_define+0x3b4>
1000c832:	9b03      	ldr	r3, [sp, #12]
1000c834:	8939      	ldrh	r1, [r7, #8]
1000c836:	8818      	ldrh	r0, [r3, #0]
1000c838:	687a      	ldr	r2, [r7, #4]
1000c83a:	4b34      	ldr	r3, [pc, #208]	; (1000c90c <internal_at_ble_service_define+0x3a8>)
1000c83c:	4798      	blx	r3
1000c83e:	2800      	cmp	r0, #0
1000c840:	d0d4      	beq.n	1000c7ec <internal_at_ble_service_define+0x288>
1000c842:	e069      	b.n	1000c918 <internal_at_ble_service_define+0x3b4>
1000c844:	8abb      	ldrh	r3, [r7, #20]
1000c846:	2b00      	cmp	r3, #0
1000c848:	d00a      	beq.n	1000c860 <internal_at_ble_service_define+0x2fc>
1000c84a:	3501      	adds	r5, #1
1000c84c:	b2ad      	uxth	r5, r5
1000c84e:	843d      	strh	r5, [r7, #32]
1000c850:	7f39      	ldrb	r1, [r7, #28]
1000c852:	8afb      	ldrh	r3, [r7, #22]
1000c854:	1c28      	adds	r0, r5, #0
1000c856:	693a      	ldr	r2, [r7, #16]
1000c858:	4e2d      	ldr	r6, [pc, #180]	; (1000c910 <internal_at_ble_service_define+0x3ac>)
1000c85a:	47b0      	blx	r6
1000c85c:	2800      	cmp	r0, #0
1000c85e:	d15b      	bne.n	1000c918 <internal_at_ble_service_define+0x3b4>
1000c860:	883b      	ldrh	r3, [r7, #0]
1000c862:	07db      	lsls	r3, r3, #31
1000c864:	d50d      	bpl.n	1000c882 <internal_at_ble_service_define+0x31e>
1000c866:	2200      	movs	r2, #0
1000c868:	3501      	adds	r5, #1
1000c86a:	b2ad      	uxth	r5, r5
1000c86c:	a909      	add	r1, sp, #36	; 0x24
1000c86e:	84bd      	strh	r5, [r7, #36]	; 0x24
1000c870:	7fbb      	ldrb	r3, [r7, #30]
1000c872:	1c28      	adds	r0, r5, #0
1000c874:	700a      	strb	r2, [r1, #0]
1000c876:	704a      	strb	r2, [r1, #1]
1000c878:	4e23      	ldr	r6, [pc, #140]	; (1000c908 <internal_at_ble_service_define+0x3a4>)
1000c87a:	3202      	adds	r2, #2
1000c87c:	47b0      	blx	r6
1000c87e:	2800      	cmp	r0, #0
1000c880:	d14a      	bne.n	1000c918 <internal_at_ble_service_define+0x3b4>
1000c882:	2330      	movs	r3, #48	; 0x30
1000c884:	883a      	ldrh	r2, [r7, #0]
1000c886:	421a      	tst	r2, r3
1000c888:	d00d      	beq.n	1000c8a6 <internal_at_ble_service_define+0x342>
1000c88a:	2200      	movs	r2, #0
1000c88c:	3501      	adds	r5, #1
1000c88e:	b2ad      	uxth	r5, r5
1000c890:	a909      	add	r1, sp, #36	; 0x24
1000c892:	847d      	strh	r5, [r7, #34]	; 0x22
1000c894:	7f7b      	ldrb	r3, [r7, #29]
1000c896:	1c28      	adds	r0, r5, #0
1000c898:	700a      	strb	r2, [r1, #0]
1000c89a:	704a      	strb	r2, [r1, #1]
1000c89c:	4e1a      	ldr	r6, [pc, #104]	; (1000c908 <internal_at_ble_service_define+0x3a4>)
1000c89e:	3202      	adds	r2, #2
1000c8a0:	47b0      	blx	r6
1000c8a2:	2800      	cmp	r0, #0
1000c8a4:	d138      	bne.n	1000c918 <internal_at_ble_service_define+0x3b4>
1000c8a6:	69b9      	ldr	r1, [r7, #24]
1000c8a8:	2900      	cmp	r1, #0
1000c8aa:	d006      	beq.n	1000c8ba <internal_at_ble_service_define+0x356>
1000c8ac:	3501      	adds	r5, #1
1000c8ae:	b2ad      	uxth	r5, r5
1000c8b0:	1c28      	adds	r0, r5, #0
1000c8b2:	4b18      	ldr	r3, [pc, #96]	; (1000c914 <internal_at_ble_service_define+0x3b0>)
1000c8b4:	4798      	blx	r3
1000c8b6:	2800      	cmp	r0, #0
1000c8b8:	d12e      	bne.n	1000c918 <internal_at_ble_service_define+0x3b4>
1000c8ba:	373c      	adds	r7, #60	; 0x3c
1000c8bc:	9502      	str	r5, [sp, #8]
1000c8be:	e787      	b.n	1000c7d0 <internal_at_ble_service_define+0x26c>
1000c8c0:	100133a0 	.word	0x100133a0
1000c8c4:	10014114 	.word	0x10014114
1000c8c8:	1000fa2d 	.word	0x1000fa2d
1000c8cc:	1000c299 	.word	0x1000c299
1000c8d0:	1000fa1b 	.word	0x1000fa1b
1000c8d4:	10011803 	.word	0x10011803
1000c8d8:	1000e725 	.word	0x1000e725
1000c8dc:	10011805 	.word	0x10011805
1000c8e0:	1000c365 	.word	0x1000c365
1000c8e4:	10011801 	.word	0x10011801
1000c8e8:	1000c30d 	.word	0x1000c30d
1000c8ec:	100117fd 	.word	0x100117fd
1000c8f0:	100117ff 	.word	0x100117ff
1000c8f4:	00008002 	.word	0x00008002
1000c8f8:	100117f9 	.word	0x100117f9
1000c8fc:	100117fb 	.word	0x100117fb
1000c900:	1000e619 	.word	0x1000e619
1000c904:	1001338c 	.word	0x1001338c
1000c908:	1000c42d 	.word	0x1000c42d
1000c90c:	1000e795 	.word	0x1000e795
1000c910:	1000c4e5 	.word	0x1000c4e5
1000c914:	1000c401 	.word	0x1000c401
1000c918:	1c04      	adds	r4, r0, #0
1000c91a:	1c20      	adds	r0, r4, #0
1000c91c:	b00b      	add	sp, #44	; 0x2c
1000c91e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000c920 <initi_gatt_server_module>:
1000c920:	2300      	movs	r3, #0
1000c922:	4a07      	ldr	r2, [pc, #28]	; (1000c940 <initi_gatt_server_module+0x20>)
1000c924:	7013      	strb	r3, [r2, #0]
1000c926:	4a07      	ldr	r2, [pc, #28]	; (1000c944 <initi_gatt_server_module+0x24>)
1000c928:	6013      	str	r3, [r2, #0]
1000c92a:	4a07      	ldr	r2, [pc, #28]	; (1000c948 <initi_gatt_server_module+0x28>)
1000c92c:	6013      	str	r3, [r2, #0]
1000c92e:	4a07      	ldr	r2, [pc, #28]	; (1000c94c <initi_gatt_server_module+0x2c>)
1000c930:	6013      	str	r3, [r2, #0]
1000c932:	4a07      	ldr	r2, [pc, #28]	; (1000c950 <initi_gatt_server_module+0x30>)
1000c934:	6013      	str	r3, [r2, #0]
1000c936:	4a07      	ldr	r2, [pc, #28]	; (1000c954 <initi_gatt_server_module+0x34>)
1000c938:	6013      	str	r3, [r2, #0]
1000c93a:	4a07      	ldr	r2, [pc, #28]	; (1000c958 <initi_gatt_server_module+0x38>)
1000c93c:	6013      	str	r3, [r2, #0]
1000c93e:	4770      	bx	lr
1000c940:	1001338c 	.word	0x1001338c
1000c944:	1001339c 	.word	0x1001339c
1000c948:	10013398 	.word	0x10013398
1000c94c:	10013388 	.word	0x10013388
1000c950:	10013394 	.word	0x10013394
1000c954:	10013390 	.word	0x10013390
1000c958:	100133a0 	.word	0x100133a0

1000c95c <db_init>:
1000c95c:	4b0a      	ldr	r3, [pc, #40]	; (1000c988 <db_init+0x2c>)
1000c95e:	4a0b      	ldr	r2, [pc, #44]	; (1000c98c <db_init+0x30>)
1000c960:	6018      	str	r0, [r3, #0]
1000c962:	084b      	lsrs	r3, r1, #1
1000c964:	6013      	str	r3, [r2, #0]
1000c966:	4a0a      	ldr	r2, [pc, #40]	; (1000c990 <db_init+0x34>)
1000c968:	18c3      	adds	r3, r0, r3
1000c96a:	6013      	str	r3, [r2, #0]
1000c96c:	4a09      	ldr	r2, [pc, #36]	; (1000c994 <db_init+0x38>)
1000c96e:	1841      	adds	r1, r0, r1
1000c970:	6013      	str	r3, [r2, #0]
1000c972:	2303      	movs	r3, #3
1000c974:	2200      	movs	r2, #0
1000c976:	3103      	adds	r1, #3
1000c978:	4399      	bics	r1, r3
1000c97a:	4b07      	ldr	r3, [pc, #28]	; (1000c998 <db_init+0x3c>)
1000c97c:	3904      	subs	r1, #4
1000c97e:	6019      	str	r1, [r3, #0]
1000c980:	4b06      	ldr	r3, [pc, #24]	; (1000c99c <db_init+0x40>)
1000c982:	601a      	str	r2, [r3, #0]
1000c984:	4770      	bx	lr
1000c986:	46c0      	nop			; (mov r8, r8)
1000c988:	100133a0 	.word	0x100133a0
1000c98c:	1001339c 	.word	0x1001339c
1000c990:	10013388 	.word	0x10013388
1000c994:	10013394 	.word	0x10013394
1000c998:	10013390 	.word	0x10013390
1000c99c:	10013398 	.word	0x10013398

1000c9a0 <at_ble_primary_service_define>:
1000c9a0:	b530      	push	{r4, r5, lr}
1000c9a2:	b085      	sub	sp, #20
1000c9a4:	ac08      	add	r4, sp, #32
1000c9a6:	cc20      	ldmia	r4!, {r5}
1000c9a8:	8824      	ldrh	r4, [r4, #0]
1000c9aa:	9500      	str	r5, [sp, #0]
1000c9ac:	9401      	str	r4, [sp, #4]
1000c9ae:	2401      	movs	r4, #1
1000c9b0:	9402      	str	r4, [sp, #8]
1000c9b2:	4c02      	ldr	r4, [pc, #8]	; (1000c9bc <at_ble_primary_service_define+0x1c>)
1000c9b4:	47a0      	blx	r4
1000c9b6:	b005      	add	sp, #20
1000c9b8:	bd30      	pop	{r4, r5, pc}
1000c9ba:	46c0      	nop			; (mov r8, r8)
1000c9bc:	1000c565 	.word	0x1000c565

1000c9c0 <at_ble_characteristic_value_set>:
1000c9c0:	b570      	push	{r4, r5, r6, lr}
1000c9c2:	4b0b      	ldr	r3, [pc, #44]	; (1000c9f0 <at_ble_characteristic_value_set+0x30>)
1000c9c4:	1c06      	adds	r6, r0, #0
1000c9c6:	1c0c      	adds	r4, r1, #0
1000c9c8:	1c15      	adds	r5, r2, #0
1000c9ca:	4798      	blx	r3
1000c9cc:	2800      	cmp	r0, #0
1000c9ce:	d008      	beq.n	1000c9e2 <at_ble_characteristic_value_set+0x22>
1000c9d0:	6880      	ldr	r0, [r0, #8]
1000c9d2:	2800      	cmp	r0, #0
1000c9d4:	d005      	beq.n	1000c9e2 <at_ble_characteristic_value_set+0x22>
1000c9d6:	1c21      	adds	r1, r4, #0
1000c9d8:	1c2a      	adds	r2, r5, #0
1000c9da:	4b06      	ldr	r3, [pc, #24]	; (1000c9f4 <at_ble_characteristic_value_set+0x34>)
1000c9dc:	4798      	blx	r3
1000c9de:	2000      	movs	r0, #0
1000c9e0:	e004      	b.n	1000c9ec <at_ble_characteristic_value_set+0x2c>
1000c9e2:	1c30      	adds	r0, r6, #0
1000c9e4:	1c29      	adds	r1, r5, #0
1000c9e6:	1c22      	adds	r2, r4, #0
1000c9e8:	4b03      	ldr	r3, [pc, #12]	; (1000c9f8 <at_ble_characteristic_value_set+0x38>)
1000c9ea:	4798      	blx	r3
1000c9ec:	bd70      	pop	{r4, r5, r6, pc}
1000c9ee:	46c0      	nop			; (mov r8, r8)
1000c9f0:	1000c2cd 	.word	0x1000c2cd
1000c9f4:	1000fa1b 	.word	0x1000fa1b
1000c9f8:	1000e795 	.word	0x1000e795

1000c9fc <at_ble_characteristic_value_get>:
1000c9fc:	b570      	push	{r4, r5, r6, lr}
1000c9fe:	4b0c      	ldr	r3, [pc, #48]	; (1000ca30 <at_ble_characteristic_value_get+0x34>)
1000ca00:	1c06      	adds	r6, r0, #0
1000ca02:	1c0c      	adds	r4, r1, #0
1000ca04:	1c15      	adds	r5, r2, #0
1000ca06:	4798      	blx	r3
1000ca08:	2800      	cmp	r0, #0
1000ca0a:	d00b      	beq.n	1000ca24 <at_ble_characteristic_value_get+0x28>
1000ca0c:	6883      	ldr	r3, [r0, #8]
1000ca0e:	2b00      	cmp	r3, #0
1000ca10:	d008      	beq.n	1000ca24 <at_ble_characteristic_value_get+0x28>
1000ca12:	8883      	ldrh	r3, [r0, #4]
1000ca14:	802b      	strh	r3, [r5, #0]
1000ca16:	8882      	ldrh	r2, [r0, #4]
1000ca18:	6881      	ldr	r1, [r0, #8]
1000ca1a:	4b06      	ldr	r3, [pc, #24]	; (1000ca34 <at_ble_characteristic_value_get+0x38>)
1000ca1c:	1c20      	adds	r0, r4, #0
1000ca1e:	4798      	blx	r3
1000ca20:	2000      	movs	r0, #0
1000ca22:	e004      	b.n	1000ca2e <at_ble_characteristic_value_get+0x32>
1000ca24:	1c30      	adds	r0, r6, #0
1000ca26:	1c29      	adds	r1, r5, #0
1000ca28:	1c22      	adds	r2, r4, #0
1000ca2a:	4b03      	ldr	r3, [pc, #12]	; (1000ca38 <at_ble_characteristic_value_get+0x3c>)
1000ca2c:	4798      	blx	r3
1000ca2e:	bd70      	pop	{r4, r5, r6, pc}
1000ca30:	1000c2cd 	.word	0x1000c2cd
1000ca34:	1000fa1b 	.word	0x1000fa1b
1000ca38:	1000e821 	.word	0x1000e821

1000ca3c <at_ble_write_authorize_reply>:
1000ca3c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ca3e:	b085      	sub	sp, #20
1000ca40:	1c04      	adds	r4, r0, #0
1000ca42:	9101      	str	r1, [sp, #4]
1000ca44:	2900      	cmp	r1, #0
1000ca46:	d128      	bne.n	1000ca9a <at_ble_write_authorize_reply+0x5e>
1000ca48:	8843      	ldrh	r3, [r0, #2]
1000ca4a:	1c27      	adds	r7, r4, #0
1000ca4c:	9300      	str	r3, [sp, #0]
1000ca4e:	1c18      	adds	r0, r3, #0
1000ca50:	4b16      	ldr	r3, [pc, #88]	; (1000caac <at_ble_write_authorize_reply+0x70>)
1000ca52:	4798      	blx	r3
1000ca54:	3708      	adds	r7, #8
1000ca56:	2800      	cmp	r0, #0
1000ca58:	d009      	beq.n	1000ca6e <at_ble_write_authorize_reply+0x32>
1000ca5a:	6880      	ldr	r0, [r0, #8]
1000ca5c:	2800      	cmp	r0, #0
1000ca5e:	d006      	beq.n	1000ca6e <at_ble_write_authorize_reply+0x32>
1000ca60:	88a3      	ldrh	r3, [r4, #4]
1000ca62:	88e2      	ldrh	r2, [r4, #6]
1000ca64:	18c0      	adds	r0, r0, r3
1000ca66:	1c39      	adds	r1, r7, #0
1000ca68:	4b11      	ldr	r3, [pc, #68]	; (1000cab0 <at_ble_write_authorize_reply+0x74>)
1000ca6a:	4798      	blx	r3
1000ca6c:	e015      	b.n	1000ca9a <at_ble_write_authorize_reply+0x5e>
1000ca6e:	ab02      	add	r3, sp, #8
1000ca70:	1d9e      	adds	r6, r3, #6
1000ca72:	2300      	movs	r3, #0
1000ca74:	4d0f      	ldr	r5, [pc, #60]	; (1000cab4 <at_ble_write_authorize_reply+0x78>)
1000ca76:	8033      	strh	r3, [r6, #0]
1000ca78:	6829      	ldr	r1, [r5, #0]
1000ca7a:	1c32      	adds	r2, r6, #0
1000ca7c:	4b0e      	ldr	r3, [pc, #56]	; (1000cab8 <at_ble_write_authorize_reply+0x7c>)
1000ca7e:	9800      	ldr	r0, [sp, #0]
1000ca80:	4798      	blx	r3
1000ca82:	682b      	ldr	r3, [r5, #0]
1000ca84:	88a0      	ldrh	r0, [r4, #4]
1000ca86:	88e2      	ldrh	r2, [r4, #6]
1000ca88:	1818      	adds	r0, r3, r0
1000ca8a:	1c39      	adds	r1, r7, #0
1000ca8c:	4b08      	ldr	r3, [pc, #32]	; (1000cab0 <at_ble_write_authorize_reply+0x74>)
1000ca8e:	4798      	blx	r3
1000ca90:	8860      	ldrh	r0, [r4, #2]
1000ca92:	8832      	ldrh	r2, [r6, #0]
1000ca94:	6829      	ldr	r1, [r5, #0]
1000ca96:	4b09      	ldr	r3, [pc, #36]	; (1000cabc <at_ble_write_authorize_reply+0x80>)
1000ca98:	4798      	blx	r3
1000ca9a:	8860      	ldrh	r0, [r4, #2]
1000ca9c:	8821      	ldrh	r1, [r4, #0]
1000ca9e:	9a01      	ldr	r2, [sp, #4]
1000caa0:	4b07      	ldr	r3, [pc, #28]	; (1000cac0 <at_ble_write_authorize_reply+0x84>)
1000caa2:	4798      	blx	r3
1000caa4:	2000      	movs	r0, #0
1000caa6:	b005      	add	sp, #20
1000caa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000caaa:	46c0      	nop			; (mov r8, r8)
1000caac:	1000c2cd 	.word	0x1000c2cd
1000cab0:	1000fa1b 	.word	0x1000fa1b
1000cab4:	10011908 	.word	0x10011908
1000cab8:	1000c9fd 	.word	0x1000c9fd
1000cabc:	1000c9c1 	.word	0x1000c9c1
1000cac0:	1000e299 	.word	0x1000e299

1000cac4 <gatts_handle_read_req>:
1000cac4:	b538      	push	{r3, r4, r5, lr}
1000cac6:	1c0c      	adds	r4, r1, #0
1000cac8:	4b07      	ldr	r3, [pc, #28]	; (1000cae8 <gatts_handle_read_req+0x24>)
1000caca:	4798      	blx	r3
1000cacc:	8865      	ldrh	r5, [r4, #2]
1000cace:	4b07      	ldr	r3, [pc, #28]	; (1000caec <gatts_handle_read_req+0x28>)
1000cad0:	1c28      	adds	r0, r5, #0
1000cad2:	4798      	blx	r3
1000cad4:	7883      	ldrb	r3, [r0, #2]
1000cad6:	2026      	movs	r0, #38	; 0x26
1000cad8:	07db      	lsls	r3, r3, #31
1000cada:	d404      	bmi.n	1000cae6 <gatts_handle_read_req+0x22>
1000cadc:	8820      	ldrh	r0, [r4, #0]
1000cade:	1c29      	adds	r1, r5, #0
1000cae0:	4b03      	ldr	r3, [pc, #12]	; (1000caf0 <gatts_handle_read_req+0x2c>)
1000cae2:	4798      	blx	r3
1000cae4:	203b      	movs	r0, #59	; 0x3b
1000cae6:	bd38      	pop	{r3, r4, r5, pc}
1000cae8:	1000e1dd 	.word	0x1000e1dd
1000caec:	1000c2cd 	.word	0x1000c2cd
1000caf0:	1000c535 	.word	0x1000c535

1000caf4 <gatts_handle_att_info_req>:
1000caf4:	b538      	push	{r3, r4, r5, lr}
1000caf6:	1c0d      	adds	r5, r1, #0
1000caf8:	4b0a      	ldr	r3, [pc, #40]	; (1000cb24 <gatts_handle_att_info_req+0x30>)
1000cafa:	1c14      	adds	r4, r2, #0
1000cafc:	4798      	blx	r3
1000cafe:	882d      	ldrh	r5, [r5, #0]
1000cb00:	4b09      	ldr	r3, [pc, #36]	; (1000cb28 <gatts_handle_att_info_req+0x34>)
1000cb02:	1c28      	adds	r0, r5, #0
1000cb04:	4798      	blx	r3
1000cb06:	0a22      	lsrs	r2, r4, #8
1000cb08:	1c03      	adds	r3, r0, #0
1000cb0a:	4c08      	ldr	r4, [pc, #32]	; (1000cb2c <gatts_handle_att_info_req+0x38>)
1000cb0c:	b291      	uxth	r1, r2
1000cb0e:	2800      	cmp	r0, #0
1000cb10:	d003      	beq.n	1000cb1a <gatts_handle_att_info_req+0x26>
1000cb12:	8882      	ldrh	r2, [r0, #4]
1000cb14:	2300      	movs	r3, #0
1000cb16:	1c28      	adds	r0, r5, #0
1000cb18:	e001      	b.n	1000cb1e <gatts_handle_att_info_req+0x2a>
1000cb1a:	1c28      	adds	r0, r5, #0
1000cb1c:	2201      	movs	r2, #1
1000cb1e:	47a0      	blx	r4
1000cb20:	203b      	movs	r0, #59	; 0x3b
1000cb22:	bd38      	pop	{r3, r4, r5, pc}
1000cb24:	1000e221 	.word	0x1000e221
1000cb28:	1000c2cd 	.word	0x1000c2cd
1000cb2c:	1000e2dd 	.word	0x1000e2dd

1000cb30 <gatts_handle_write_req>:
1000cb30:	b510      	push	{r4, lr}
1000cb32:	1c14      	adds	r4, r2, #0
1000cb34:	4b07      	ldr	r3, [pc, #28]	; (1000cb54 <gatts_handle_write_req+0x24>)
1000cb36:	4798      	blx	r3
1000cb38:	4b07      	ldr	r3, [pc, #28]	; (1000cb58 <gatts_handle_write_req+0x28>)
1000cb3a:	8860      	ldrh	r0, [r4, #2]
1000cb3c:	4798      	blx	r3
1000cb3e:	2302      	movs	r3, #2
1000cb40:	7881      	ldrb	r1, [r0, #2]
1000cb42:	2022      	movs	r0, #34	; 0x22
1000cb44:	4019      	ands	r1, r3
1000cb46:	d103      	bne.n	1000cb50 <gatts_handle_write_req+0x20>
1000cb48:	1c20      	adds	r0, r4, #0
1000cb4a:	4b04      	ldr	r3, [pc, #16]	; (1000cb5c <gatts_handle_write_req+0x2c>)
1000cb4c:	4798      	blx	r3
1000cb4e:	201f      	movs	r0, #31
1000cb50:	bd10      	pop	{r4, pc}
1000cb52:	46c0      	nop			; (mov r8, r8)
1000cb54:	1000e1e9 	.word	0x1000e1e9
1000cb58:	1000c2cd 	.word	0x1000c2cd
1000cb5c:	1000ca3d 	.word	0x1000ca3d

1000cb60 <at_ble_indication_send>:
1000cb60:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cb62:	4d17      	ldr	r5, [pc, #92]	; (1000cbc0 <at_ble_indication_send+0x60>)
1000cb64:	4c17      	ldr	r4, [pc, #92]	; (1000cbc4 <at_ble_indication_send+0x64>)
1000cb66:	682a      	ldr	r2, [r5, #0]
1000cb68:	44a5      	add	sp, r4
1000cb6a:	23d2      	movs	r3, #210	; 0xd2
1000cb6c:	2a04      	cmp	r2, #4
1000cb6e:	d822      	bhi.n	1000cbb6 <at_ble_indication_send+0x56>
1000cb70:	1c06      	adds	r6, r0, #0
1000cb72:	4b15      	ldr	r3, [pc, #84]	; (1000cbc8 <at_ble_indication_send+0x68>)
1000cb74:	1c08      	adds	r0, r1, #0
1000cb76:	1c0c      	adds	r4, r1, #0
1000cb78:	4798      	blx	r3
1000cb7a:	2800      	cmp	r0, #0
1000cb7c:	d008      	beq.n	1000cb90 <at_ble_indication_send+0x30>
1000cb7e:	6883      	ldr	r3, [r0, #8]
1000cb80:	2b00      	cmp	r3, #0
1000cb82:	d005      	beq.n	1000cb90 <at_ble_indication_send+0x30>
1000cb84:	8882      	ldrh	r2, [r0, #4]
1000cb86:	1c21      	adds	r1, r4, #0
1000cb88:	9200      	str	r2, [sp, #0]
1000cb8a:	2013      	movs	r0, #19
1000cb8c:	1c32      	adds	r2, r6, #0
1000cb8e:	e00c      	b.n	1000cbaa <at_ble_indication_send+0x4a>
1000cb90:	270e      	movs	r7, #14
1000cb92:	446f      	add	r7, sp
1000cb94:	1c39      	adds	r1, r7, #0
1000cb96:	aa04      	add	r2, sp, #16
1000cb98:	4b0c      	ldr	r3, [pc, #48]	; (1000cbcc <at_ble_indication_send+0x6c>)
1000cb9a:	1c20      	adds	r0, r4, #0
1000cb9c:	4798      	blx	r3
1000cb9e:	2013      	movs	r0, #19
1000cba0:	1c21      	adds	r1, r4, #0
1000cba2:	1c32      	adds	r2, r6, #0
1000cba4:	883b      	ldrh	r3, [r7, #0]
1000cba6:	9300      	str	r3, [sp, #0]
1000cba8:	ab04      	add	r3, sp, #16
1000cbaa:	4c09      	ldr	r4, [pc, #36]	; (1000cbd0 <at_ble_indication_send+0x70>)
1000cbac:	47a0      	blx	r4
1000cbae:	682b      	ldr	r3, [r5, #0]
1000cbb0:	3301      	adds	r3, #1
1000cbb2:	602b      	str	r3, [r5, #0]
1000cbb4:	2300      	movs	r3, #0
1000cbb6:	1c18      	adds	r0, r3, #0
1000cbb8:	2385      	movs	r3, #133	; 0x85
1000cbba:	009b      	lsls	r3, r3, #2
1000cbbc:	449d      	add	sp, r3
1000cbbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cbc0:	1001342c 	.word	0x1001342c
1000cbc4:	fffffdec 	.word	0xfffffdec
1000cbc8:	1000c2cd 	.word	0x1000c2cd
1000cbcc:	1000e821 	.word	0x1000e821
1000cbd0:	1000e325 	.word	0x1000e325

1000cbd4 <init_l2cc_task_module>:
1000cbd4:	220a      	movs	r2, #10
1000cbd6:	4b01      	ldr	r3, [pc, #4]	; (1000cbdc <init_l2cc_task_module+0x8>)
1000cbd8:	701a      	strb	r2, [r3, #0]
1000cbda:	4770      	bx	lr
1000cbdc:	10011907 	.word	0x10011907

1000cbe0 <l2cc_data_send_rsp_handler>:
1000cbe0:	b510      	push	{r4, lr}
1000cbe2:	7802      	ldrb	r2, [r0, #0]
1000cbe4:	700a      	strb	r2, [r1, #0]
1000cbe6:	7883      	ldrb	r3, [r0, #2]
1000cbe8:	7844      	ldrb	r4, [r0, #1]
1000cbea:	021b      	lsls	r3, r3, #8
1000cbec:	4323      	orrs	r3, r4
1000cbee:	804b      	strh	r3, [r1, #2]
1000cbf0:	7903      	ldrb	r3, [r0, #4]
1000cbf2:	78c0      	ldrb	r0, [r0, #3]
1000cbf4:	021b      	lsls	r3, r3, #8
1000cbf6:	4303      	orrs	r3, r0
1000cbf8:	808b      	strh	r3, [r1, #4]
1000cbfa:	2a00      	cmp	r2, #0
1000cbfc:	d103      	bne.n	1000cc06 <l2cc_data_send_rsp_handler+0x26>
1000cbfe:	4a02      	ldr	r2, [pc, #8]	; (1000cc08 <l2cc_data_send_rsp_handler+0x28>)
1000cc00:	7813      	ldrb	r3, [r2, #0]
1000cc02:	3301      	adds	r3, #1
1000cc04:	7013      	strb	r3, [r2, #0]
1000cc06:	bd10      	pop	{r4, pc}
1000cc08:	10011907 	.word	0x10011907

1000cc0c <l2cc_data_received_handler>:
1000cc0c:	b508      	push	{r3, lr}
1000cc0e:	1c03      	adds	r3, r0, #0
1000cc10:	7842      	ldrb	r2, [r0, #1]
1000cc12:	7800      	ldrb	r0, [r0, #0]
1000cc14:	0212      	lsls	r2, r2, #8
1000cc16:	4302      	orrs	r2, r0
1000cc18:	800a      	strh	r2, [r1, #0]
1000cc1a:	78da      	ldrb	r2, [r3, #3]
1000cc1c:	7898      	ldrb	r0, [r3, #2]
1000cc1e:	0212      	lsls	r2, r2, #8
1000cc20:	4302      	orrs	r2, r0
1000cc22:	804a      	strh	r2, [r1, #2]
1000cc24:	795a      	ldrb	r2, [r3, #5]
1000cc26:	7918      	ldrb	r0, [r3, #4]
1000cc28:	0212      	lsls	r2, r2, #8
1000cc2a:	4302      	orrs	r2, r0
1000cc2c:	808a      	strh	r2, [r1, #4]
1000cc2e:	1d88      	adds	r0, r1, #6
1000cc30:	1d99      	adds	r1, r3, #6
1000cc32:	4b01      	ldr	r3, [pc, #4]	; (1000cc38 <l2cc_data_received_handler+0x2c>)
1000cc34:	4798      	blx	r3
1000cc36:	bd08      	pop	{r3, pc}
1000cc38:	1000fa1b 	.word	0x1000fa1b

1000cc3c <at_ble_authenticate>:
1000cc3c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cc3e:	1c0c      	adds	r4, r1, #0
1000cc40:	211f      	movs	r1, #31
1000cc42:	b08b      	sub	sp, #44	; 0x2c
1000cc44:	9307      	str	r3, [sp, #28]
1000cc46:	ab02      	add	r3, sp, #8
1000cc48:	18c9      	adds	r1, r1, r3
1000cc4a:	230f      	movs	r3, #15
1000cc4c:	700b      	strb	r3, [r1, #0]
1000cc4e:	4b40      	ldr	r3, [pc, #256]	; (1000cd50 <at_ble_authenticate+0x114>)
1000cc50:	1c05      	adds	r5, r0, #0
1000cc52:	1c16      	adds	r6, r2, #0
1000cc54:	4798      	blx	r3
1000cc56:	1c07      	adds	r7, r0, #0
1000cc58:	2001      	movs	r0, #1
1000cc5a:	2f07      	cmp	r7, #7
1000cc5c:	d875      	bhi.n	1000cd4a <at_ble_authenticate+0x10e>
1000cc5e:	2c00      	cmp	r4, #0
1000cc60:	d113      	bne.n	1000cc8a <at_ble_authenticate+0x4e>
1000cc62:	2312      	movs	r3, #18
1000cc64:	435f      	muls	r7, r3
1000cc66:	4b3b      	ldr	r3, [pc, #236]	; (1000cd54 <at_ble_authenticate+0x118>)
1000cc68:	5cfb      	ldrb	r3, [r7, r3]
1000cc6a:	4283      	cmp	r3, r0
1000cc6c:	d001      	beq.n	1000cc72 <at_ble_authenticate+0x36>
1000cc6e:	20cf      	movs	r0, #207	; 0xcf
1000cc70:	e06b      	b.n	1000cd4a <at_ble_authenticate+0x10e>
1000cc72:	9504      	str	r5, [sp, #16]
1000cc74:	9400      	str	r4, [sp, #0]
1000cc76:	9401      	str	r4, [sp, #4]
1000cc78:	9402      	str	r4, [sp, #8]
1000cc7a:	9403      	str	r4, [sp, #12]
1000cc7c:	1c20      	adds	r0, r4, #0
1000cc7e:	1c21      	adds	r1, r4, #0
1000cc80:	1c22      	adds	r2, r4, #0
1000cc82:	1c23      	adds	r3, r4, #0
1000cc84:	4d34      	ldr	r5, [pc, #208]	; (1000cd58 <at_ble_authenticate+0x11c>)
1000cc86:	47a8      	blx	r5
1000cc88:	e05e      	b.n	1000cd48 <at_ble_authenticate+0x10c>
1000cc8a:	7922      	ldrb	r2, [r4, #4]
1000cc8c:	2a06      	cmp	r2, #6
1000cc8e:	d9ee      	bls.n	1000cc6e <at_ble_authenticate+0x32>
1000cc90:	7963      	ldrb	r3, [r4, #5]
1000cc92:	2b10      	cmp	r3, #16
1000cc94:	d8eb      	bhi.n	1000cc6e <at_ble_authenticate+0x32>
1000cc96:	429a      	cmp	r2, r3
1000cc98:	d8e9      	bhi.n	1000cc6e <at_ble_authenticate+0x32>
1000cc9a:	7a23      	ldrb	r3, [r4, #8]
1000cc9c:	2b04      	cmp	r3, #4
1000cc9e:	d8e6      	bhi.n	1000cc6e <at_ble_authenticate+0x32>
1000cca0:	79a3      	ldrb	r3, [r4, #6]
1000cca2:	2b07      	cmp	r3, #7
1000cca4:	d8e3      	bhi.n	1000cc6e <at_ble_authenticate+0x32>
1000cca6:	79e3      	ldrb	r3, [r4, #7]
1000cca8:	2b07      	cmp	r3, #7
1000ccaa:	d8e0      	bhi.n	1000cc6e <at_ble_authenticate+0x32>
1000ccac:	78a3      	ldrb	r3, [r4, #2]
1000ccae:	2b00      	cmp	r3, #0
1000ccb0:	d006      	beq.n	1000ccc0 <at_ble_authenticate+0x84>
1000ccb2:	2e00      	cmp	r6, #0
1000ccb4:	d0db      	beq.n	1000cc6e <at_ble_authenticate+0x32>
1000ccb6:	4829      	ldr	r0, [pc, #164]	; (1000cd5c <at_ble_authenticate+0x120>)
1000ccb8:	1c31      	adds	r1, r6, #0
1000ccba:	221c      	movs	r2, #28
1000ccbc:	4b28      	ldr	r3, [pc, #160]	; (1000cd60 <at_ble_authenticate+0x124>)
1000ccbe:	4798      	blx	r3
1000ccc0:	9b07      	ldr	r3, [sp, #28]
1000ccc2:	2b00      	cmp	r3, #0
1000ccc4:	d005      	beq.n	1000ccd2 <at_ble_authenticate+0x96>
1000ccc6:	4827      	ldr	r0, [pc, #156]	; (1000cd64 <at_ble_authenticate+0x128>)
1000ccc8:	1c19      	adds	r1, r3, #0
1000ccca:	309a      	adds	r0, #154	; 0x9a
1000cccc:	2210      	movs	r2, #16
1000ccce:	4b24      	ldr	r3, [pc, #144]	; (1000cd60 <at_ble_authenticate+0x124>)
1000ccd0:	4798      	blx	r3
1000ccd2:	7863      	ldrb	r3, [r4, #1]
1000ccd4:	78a2      	ldrb	r2, [r4, #2]
1000ccd6:	009b      	lsls	r3, r3, #2
1000ccd8:	4313      	orrs	r3, r2
1000ccda:	2212      	movs	r2, #18
1000ccdc:	4357      	muls	r7, r2
1000ccde:	4a1d      	ldr	r2, [pc, #116]	; (1000cd54 <at_ble_authenticate+0x118>)
1000cce0:	b2db      	uxtb	r3, r3
1000cce2:	5cba      	ldrb	r2, [r7, r2]
1000cce4:	2a00      	cmp	r2, #0
1000cce6:	d116      	bne.n	1000cd16 <at_ble_authenticate+0xda>
1000cce8:	79a0      	ldrb	r0, [r4, #6]
1000ccea:	0742      	lsls	r2, r0, #29
1000ccec:	d502      	bpl.n	1000ccf4 <at_ble_authenticate+0xb8>
1000ccee:	9a07      	ldr	r2, [sp, #28]
1000ccf0:	2a00      	cmp	r2, #0
1000ccf2:	d0bc      	beq.n	1000cc6e <at_ble_authenticate+0x32>
1000ccf4:	07c2      	lsls	r2, r0, #31
1000ccf6:	d501      	bpl.n	1000ccfc <at_ble_authenticate+0xc0>
1000ccf8:	2e00      	cmp	r6, #0
1000ccfa:	d0b8      	beq.n	1000cc6e <at_ble_authenticate+0x32>
1000ccfc:	7966      	ldrb	r6, [r4, #5]
1000ccfe:	7821      	ldrb	r1, [r4, #0]
1000cd00:	78e2      	ldrb	r2, [r4, #3]
1000cd02:	9600      	str	r6, [sp, #0]
1000cd04:	9001      	str	r0, [sp, #4]
1000cd06:	79e0      	ldrb	r0, [r4, #7]
1000cd08:	9002      	str	r0, [sp, #8]
1000cd0a:	7a20      	ldrb	r0, [r4, #8]
1000cd0c:	4c16      	ldr	r4, [pc, #88]	; (1000cd68 <at_ble_authenticate+0x12c>)
1000cd0e:	9003      	str	r0, [sp, #12]
1000cd10:	1c28      	adds	r0, r5, #0
1000cd12:	47a0      	blx	r4
1000cd14:	e018      	b.n	1000cd48 <at_ble_authenticate+0x10c>
1000cd16:	2a01      	cmp	r2, #1
1000cd18:	d1a9      	bne.n	1000cc6e <at_ble_authenticate+0x32>
1000cd1a:	79e0      	ldrb	r0, [r4, #7]
1000cd1c:	0742      	lsls	r2, r0, #29
1000cd1e:	d502      	bpl.n	1000cd26 <at_ble_authenticate+0xea>
1000cd20:	9a07      	ldr	r2, [sp, #28]
1000cd22:	2a00      	cmp	r2, #0
1000cd24:	d0a3      	beq.n	1000cc6e <at_ble_authenticate+0x32>
1000cd26:	07c2      	lsls	r2, r0, #31
1000cd28:	d501      	bpl.n	1000cd2e <at_ble_authenticate+0xf2>
1000cd2a:	2e00      	cmp	r6, #0
1000cd2c:	d09f      	beq.n	1000cc6e <at_ble_authenticate+0x32>
1000cd2e:	7966      	ldrb	r6, [r4, #5]
1000cd30:	7821      	ldrb	r1, [r4, #0]
1000cd32:	78e2      	ldrb	r2, [r4, #3]
1000cd34:	9600      	str	r6, [sp, #0]
1000cd36:	79a6      	ldrb	r6, [r4, #6]
1000cd38:	9002      	str	r0, [sp, #8]
1000cd3a:	9601      	str	r6, [sp, #4]
1000cd3c:	7a20      	ldrb	r0, [r4, #8]
1000cd3e:	9504      	str	r5, [sp, #16]
1000cd40:	9003      	str	r0, [sp, #12]
1000cd42:	4c05      	ldr	r4, [pc, #20]	; (1000cd58 <at_ble_authenticate+0x11c>)
1000cd44:	2001      	movs	r0, #1
1000cd46:	47a0      	blx	r4
1000cd48:	2000      	movs	r0, #0
1000cd4a:	b00b      	add	sp, #44	; 0x2c
1000cd4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cd4e:	46c0      	nop			; (mov r8, r8)
1000cd50:	1000d13d 	.word	0x1000d13d
1000cd54:	10014116 	.word	0x10014116
1000cd58:	1000d6ad 	.word	0x1000d6ad
1000cd5c:	10014224 	.word	0x10014224
1000cd60:	1000fa1b 	.word	0x1000fa1b
1000cd64:	100141a6 	.word	0x100141a6
1000cd68:	1000d48d 	.word	0x1000d48d

1000cd6c <at_ble_pair_key_reply>:
1000cd6c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cd6e:	b085      	sub	sp, #20
1000cd70:	1c05      	adds	r5, r0, #0
1000cd72:	1c0c      	adds	r4, r1, #0
1000cd74:	1c16      	adds	r6, r2, #0
1000cd76:	2100      	movs	r1, #0
1000cd78:	4668      	mov	r0, sp
1000cd7a:	2210      	movs	r2, #16
1000cd7c:	4b18      	ldr	r3, [pc, #96]	; (1000cde0 <at_ble_pair_key_reply+0x74>)
1000cd7e:	4798      	blx	r3
1000cd80:	2101      	movs	r1, #1
1000cd82:	2e00      	cmp	r6, #0
1000cd84:	d101      	bne.n	1000cd8a <at_ble_pair_key_reply+0x1e>
1000cd86:	1c31      	adds	r1, r6, #0
1000cd88:	466e      	mov	r6, sp
1000cd8a:	2c00      	cmp	r4, #0
1000cd8c:	d116      	bne.n	1000cdbc <at_ble_pair_key_reply+0x50>
1000cd8e:	2701      	movs	r7, #1
1000cd90:	1c23      	adds	r3, r4, #0
1000cd92:	1d70      	adds	r0, r6, #5
1000cd94:	3e01      	subs	r6, #1
1000cd96:	7802      	ldrb	r2, [r0, #0]
1000cd98:	3801      	subs	r0, #1
1000cd9a:	3a30      	subs	r2, #48	; 0x30
1000cd9c:	437a      	muls	r2, r7
1000cd9e:	189b      	adds	r3, r3, r2
1000cda0:	220a      	movs	r2, #10
1000cda2:	4357      	muls	r7, r2
1000cda4:	42b0      	cmp	r0, r6
1000cda6:	d1f6      	bne.n	1000cd96 <at_ble_pair_key_reply+0x2a>
1000cda8:	466a      	mov	r2, sp
1000cdaa:	4668      	mov	r0, sp
1000cdac:	7013      	strb	r3, [r2, #0]
1000cdae:	0a1a      	lsrs	r2, r3, #8
1000cdb0:	7042      	strb	r2, [r0, #1]
1000cdb2:	0c1a      	lsrs	r2, r3, #16
1000cdb4:	0e1b      	lsrs	r3, r3, #24
1000cdb6:	7082      	strb	r2, [r0, #2]
1000cdb8:	70c3      	strb	r3, [r0, #3]
1000cdba:	e009      	b.n	1000cdd0 <at_ble_pair_key_reply+0x64>
1000cdbc:	20cf      	movs	r0, #207	; 0xcf
1000cdbe:	2c01      	cmp	r4, #1
1000cdc0:	d10c      	bne.n	1000cddc <at_ble_pair_key_reply+0x70>
1000cdc2:	2300      	movs	r3, #0
1000cdc4:	4668      	mov	r0, sp
1000cdc6:	5cf2      	ldrb	r2, [r6, r3]
1000cdc8:	54c2      	strb	r2, [r0, r3]
1000cdca:	3301      	adds	r3, #1
1000cdcc:	2b10      	cmp	r3, #16
1000cdce:	d1f9      	bne.n	1000cdc4 <at_ble_pair_key_reply+0x58>
1000cdd0:	2004      	movs	r0, #4
1000cdd2:	466a      	mov	r2, sp
1000cdd4:	1c2b      	adds	r3, r5, #0
1000cdd6:	4c03      	ldr	r4, [pc, #12]	; (1000cde4 <at_ble_pair_key_reply+0x78>)
1000cdd8:	47a0      	blx	r4
1000cdda:	2000      	movs	r0, #0
1000cddc:	b005      	add	sp, #20
1000cdde:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cde0:	1000fa2d 	.word	0x1000fa2d
1000cde4:	1000d729 	.word	0x1000d729

1000cde8 <at_ble_send_slave_sec_request>:
1000cde8:	b570      	push	{r4, r5, r6, lr}
1000cdea:	4b0c      	ldr	r3, [pc, #48]	; (1000ce1c <at_ble_send_slave_sec_request+0x34>)
1000cdec:	1c0e      	adds	r6, r1, #0
1000cdee:	2100      	movs	r1, #0
1000cdf0:	1c05      	adds	r5, r0, #0
1000cdf2:	1c14      	adds	r4, r2, #0
1000cdf4:	4798      	blx	r3
1000cdf6:	2301      	movs	r3, #1
1000cdf8:	2807      	cmp	r0, #7
1000cdfa:	d80d      	bhi.n	1000ce18 <at_ble_send_slave_sec_request+0x30>
1000cdfc:	3311      	adds	r3, #17
1000cdfe:	4358      	muls	r0, r3
1000ce00:	4b07      	ldr	r3, [pc, #28]	; (1000ce20 <at_ble_send_slave_sec_request+0x38>)
1000ce02:	5cc2      	ldrb	r2, [r0, r3]
1000ce04:	23e0      	movs	r3, #224	; 0xe0
1000ce06:	2a01      	cmp	r2, #1
1000ce08:	d106      	bne.n	1000ce18 <at_ble_send_slave_sec_request+0x30>
1000ce0a:	00b1      	lsls	r1, r6, #2
1000ce0c:	430c      	orrs	r4, r1
1000ce0e:	4b05      	ldr	r3, [pc, #20]	; (1000ce24 <at_ble_send_slave_sec_request+0x3c>)
1000ce10:	b2e1      	uxtb	r1, r4
1000ce12:	1c28      	adds	r0, r5, #0
1000ce14:	4798      	blx	r3
1000ce16:	2300      	movs	r3, #0
1000ce18:	1c18      	adds	r0, r3, #0
1000ce1a:	bd70      	pop	{r4, r5, r6, pc}
1000ce1c:	1000d13d 	.word	0x1000d13d
1000ce20:	10014116 	.word	0x10014116
1000ce24:	1000d779 	.word	0x1000d779

1000ce28 <at_ble_encryption_start>:
1000ce28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ce2a:	23cf      	movs	r3, #207	; 0xcf
1000ce2c:	2900      	cmp	r1, #0
1000ce2e:	d02b      	beq.n	1000ce88 <at_ble_encryption_start+0x60>
1000ce30:	2a05      	cmp	r2, #5
1000ce32:	d829      	bhi.n	1000ce88 <at_ble_encryption_start+0x60>
1000ce34:	2701      	movs	r7, #1
1000ce36:	1c3d      	adds	r5, r7, #0
1000ce38:	2433      	movs	r4, #51	; 0x33
1000ce3a:	4095      	lsls	r5, r2
1000ce3c:	4225      	tst	r5, r4
1000ce3e:	d023      	beq.n	1000ce88 <at_ble_encryption_start+0x60>
1000ce40:	7e8c      	ldrb	r4, [r1, #26]
1000ce42:	3c07      	subs	r4, #7
1000ce44:	2c09      	cmp	r4, #9
1000ce46:	d81f      	bhi.n	1000ce88 <at_ble_encryption_start+0x60>
1000ce48:	4b10      	ldr	r3, [pc, #64]	; (1000ce8c <at_ble_encryption_start+0x64>)
1000ce4a:	1c0c      	adds	r4, r1, #0
1000ce4c:	2100      	movs	r1, #0
1000ce4e:	1c15      	adds	r5, r2, #0
1000ce50:	1c06      	adds	r6, r0, #0
1000ce52:	4798      	blx	r3
1000ce54:	1c3b      	adds	r3, r7, #0
1000ce56:	2807      	cmp	r0, #7
1000ce58:	d816      	bhi.n	1000ce88 <at_ble_encryption_start+0x60>
1000ce5a:	2312      	movs	r3, #18
1000ce5c:	4358      	muls	r0, r3
1000ce5e:	4b0c      	ldr	r3, [pc, #48]	; (1000ce90 <at_ble_encryption_start+0x68>)
1000ce60:	5cc7      	ldrb	r7, [r0, r3]
1000ce62:	23e0      	movs	r3, #224	; 0xe0
1000ce64:	2f00      	cmp	r7, #0
1000ce66:	d10f      	bne.n	1000ce88 <at_ble_encryption_start+0x60>
1000ce68:	1c21      	adds	r1, r4, #0
1000ce6a:	221c      	movs	r2, #28
1000ce6c:	4b09      	ldr	r3, [pc, #36]	; (1000ce94 <at_ble_encryption_start+0x6c>)
1000ce6e:	480a      	ldr	r0, [pc, #40]	; (1000ce98 <at_ble_encryption_start+0x70>)
1000ce70:	4798      	blx	r3
1000ce72:	1c23      	adds	r3, r4, #0
1000ce74:	7ea1      	ldrb	r1, [r4, #26]
1000ce76:	8a22      	ldrh	r2, [r4, #16]
1000ce78:	3312      	adds	r3, #18
1000ce7a:	9100      	str	r1, [sp, #0]
1000ce7c:	9501      	str	r5, [sp, #4]
1000ce7e:	1c21      	adds	r1, r4, #0
1000ce80:	1c30      	adds	r0, r6, #0
1000ce82:	4c06      	ldr	r4, [pc, #24]	; (1000ce9c <at_ble_encryption_start+0x74>)
1000ce84:	47a0      	blx	r4
1000ce86:	1c3b      	adds	r3, r7, #0
1000ce88:	1c18      	adds	r0, r3, #0
1000ce8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000ce8c:	1000d13d 	.word	0x1000d13d
1000ce90:	10014116 	.word	0x10014116
1000ce94:	1000fa1b 	.word	0x1000fa1b
1000ce98:	10014224 	.word	0x10014224
1000ce9c:	1000d7b9 	.word	0x1000d7b9

1000cea0 <at_ble_encryption_request_reply>:
1000cea0:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000cea2:	24cf      	movs	r4, #207	; 0xcf
1000cea4:	2b00      	cmp	r3, #0
1000cea6:	d011      	beq.n	1000cecc <at_ble_encryption_request_reply+0x2c>
1000cea8:	2a00      	cmp	r2, #0
1000ceaa:	d00a      	beq.n	1000cec2 <at_ble_encryption_request_reply+0x22>
1000ceac:	2905      	cmp	r1, #5
1000ceae:	d80d      	bhi.n	1000cecc <at_ble_encryption_request_reply+0x2c>
1000ceb0:	2501      	movs	r5, #1
1000ceb2:	2633      	movs	r6, #51	; 0x33
1000ceb4:	408d      	lsls	r5, r1
1000ceb6:	4235      	tst	r5, r6
1000ceb8:	d008      	beq.n	1000cecc <at_ble_encryption_request_reply+0x2c>
1000ceba:	7e9d      	ldrb	r5, [r3, #26]
1000cebc:	3d07      	subs	r5, #7
1000cebe:	2d09      	cmp	r5, #9
1000cec0:	d804      	bhi.n	1000cecc <at_ble_encryption_request_reply+0x2c>
1000cec2:	7e9c      	ldrb	r4, [r3, #26]
1000cec4:	9400      	str	r4, [sp, #0]
1000cec6:	4c02      	ldr	r4, [pc, #8]	; (1000ced0 <at_ble_encryption_request_reply+0x30>)
1000cec8:	47a0      	blx	r4
1000ceca:	2400      	movs	r4, #0
1000cecc:	1c20      	adds	r0, r4, #0
1000cece:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000ced0:	1000d875 	.word	0x1000d875

1000ced4 <rx_callback>:
1000ced4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ced6:	8883      	ldrh	r3, [r0, #4]
1000ced8:	1c01      	adds	r1, r0, #0
1000ceda:	9301      	str	r3, [sp, #4]
1000cedc:	88c5      	ldrh	r5, [r0, #6]
1000cede:	8806      	ldrh	r6, [r0, #0]
1000cee0:	2d00      	cmp	r5, #0
1000cee2:	d10f      	bne.n	1000cf04 <rx_callback+0x30>
1000cee4:	1c19      	adds	r1, r3, #0
1000cee6:	1c30      	adds	r0, r6, #0
1000cee8:	4b19      	ldr	r3, [pc, #100]	; (1000cf50 <rx_callback+0x7c>)
1000ceea:	1c2a      	adds	r2, r5, #0
1000ceec:	4798      	blx	r3
1000ceee:	1e03      	subs	r3, r0, #0
1000cef0:	d105      	bne.n	1000cefe <rx_callback+0x2a>
1000cef2:	1c30      	adds	r0, r6, #0
1000cef4:	9901      	ldr	r1, [sp, #4]
1000cef6:	1c1a      	adds	r2, r3, #0
1000cef8:	4c16      	ldr	r4, [pc, #88]	; (1000cf54 <rx_callback+0x80>)
1000cefa:	47a0      	blx	r4
1000cefc:	e027      	b.n	1000cf4e <rx_callback+0x7a>
1000cefe:	4b16      	ldr	r3, [pc, #88]	; (1000cf58 <rx_callback+0x84>)
1000cf00:	4798      	blx	r3
1000cf02:	e024      	b.n	1000cf4e <rx_callback+0x7a>
1000cf04:	4c15      	ldr	r4, [pc, #84]	; (1000cf5c <rx_callback+0x88>)
1000cf06:	4a16      	ldr	r2, [pc, #88]	; (1000cf60 <rx_callback+0x8c>)
1000cf08:	6823      	ldr	r3, [r4, #0]
1000cf0a:	6812      	ldr	r2, [r2, #0]
1000cf0c:	18eb      	adds	r3, r5, r3
1000cf0e:	4293      	cmp	r3, r2
1000cf10:	d901      	bls.n	1000cf16 <rx_callback+0x42>
1000cf12:	2300      	movs	r3, #0
1000cf14:	6023      	str	r3, [r4, #0]
1000cf16:	4f13      	ldr	r7, [pc, #76]	; (1000cf64 <rx_callback+0x90>)
1000cf18:	6822      	ldr	r2, [r4, #0]
1000cf1a:	683b      	ldr	r3, [r7, #0]
1000cf1c:	3108      	adds	r1, #8
1000cf1e:	1898      	adds	r0, r3, r2
1000cf20:	1c2a      	adds	r2, r5, #0
1000cf22:	4b11      	ldr	r3, [pc, #68]	; (1000cf68 <rx_callback+0x94>)
1000cf24:	4798      	blx	r3
1000cf26:	683b      	ldr	r3, [r7, #0]
1000cf28:	6822      	ldr	r2, [r4, #0]
1000cf2a:	1c30      	adds	r0, r6, #0
1000cf2c:	189a      	adds	r2, r3, r2
1000cf2e:	9901      	ldr	r1, [sp, #4]
1000cf30:	4b07      	ldr	r3, [pc, #28]	; (1000cf50 <rx_callback+0x7c>)
1000cf32:	4798      	blx	r3
1000cf34:	2800      	cmp	r0, #0
1000cf36:	d1e2      	bne.n	1000cefe <rx_callback+0x2a>
1000cf38:	6823      	ldr	r3, [r4, #0]
1000cf3a:	683a      	ldr	r2, [r7, #0]
1000cf3c:	1c30      	adds	r0, r6, #0
1000cf3e:	18d2      	adds	r2, r2, r3
1000cf40:	9901      	ldr	r1, [sp, #4]
1000cf42:	1c2b      	adds	r3, r5, #0
1000cf44:	4e03      	ldr	r6, [pc, #12]	; (1000cf54 <rx_callback+0x80>)
1000cf46:	47b0      	blx	r6
1000cf48:	6823      	ldr	r3, [r4, #0]
1000cf4a:	18ed      	adds	r5, r5, r3
1000cf4c:	6025      	str	r5, [r4, #0]
1000cf4e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000cf50:	1000b575 	.word	0x1000b575
1000cf54:	1000b4ed 	.word	0x1000b4ed
1000cf58:	1000b039 	.word	0x1000b039
1000cf5c:	10014280 	.word	0x10014280
1000cf60:	100133a8 	.word	0x100133a8
1000cf64:	100133a4 	.word	0x100133a4
1000cf68:	1000fa1b 	.word	0x1000fa1b

1000cf6c <interface_send>:
1000cf6c:	b508      	push	{r3, lr}
1000cf6e:	4b02      	ldr	r3, [pc, #8]	; (1000cf78 <interface_send+0xc>)
1000cf70:	4798      	blx	r3
1000cf72:	2000      	movs	r0, #0
1000cf74:	bd08      	pop	{r3, pc}
1000cf76:	46c0      	nop			; (mov r8, r8)
1000cf78:	1000ad31 	.word	0x1000ad31

1000cf7c <interface_init>:
1000cf7c:	2280      	movs	r2, #128	; 0x80
1000cf7e:	b510      	push	{r4, lr}
1000cf80:	2100      	movs	r1, #0
1000cf82:	1c04      	adds	r4, r0, #0
1000cf84:	0092      	lsls	r2, r2, #2
1000cf86:	4b08      	ldr	r3, [pc, #32]	; (1000cfa8 <interface_init+0x2c>)
1000cf88:	4808      	ldr	r0, [pc, #32]	; (1000cfac <interface_init+0x30>)
1000cf8a:	4798      	blx	r3
1000cf8c:	2200      	movs	r2, #0
1000cf8e:	4b08      	ldr	r3, [pc, #32]	; (1000cfb0 <interface_init+0x34>)
1000cf90:	601a      	str	r2, [r3, #0]
1000cf92:	4a08      	ldr	r2, [pc, #32]	; (1000cfb4 <interface_init+0x38>)
1000cf94:	4b08      	ldr	r3, [pc, #32]	; (1000cfb8 <interface_init+0x3c>)
1000cf96:	601a      	str	r2, [r3, #0]
1000cf98:	4b08      	ldr	r3, [pc, #32]	; (1000cfbc <interface_init+0x40>)
1000cf9a:	6922      	ldr	r2, [r4, #16]
1000cf9c:	601a      	str	r2, [r3, #0]
1000cf9e:	6962      	ldr	r2, [r4, #20]
1000cfa0:	4b07      	ldr	r3, [pc, #28]	; (1000cfc0 <interface_init+0x44>)
1000cfa2:	601a      	str	r2, [r3, #0]
1000cfa4:	bd10      	pop	{r4, pc}
1000cfa6:	46c0      	nop			; (mov r8, r8)
1000cfa8:	1000fa2d 	.word	0x1000fa2d
1000cfac:	10014484 	.word	0x10014484
1000cfb0:	10014280 	.word	0x10014280
1000cfb4:	10014284 	.word	0x10014284
1000cfb8:	10011908 	.word	0x10011908
1000cfbc:	100133a4 	.word	0x100133a4
1000cfc0:	100133a8 	.word	0x100133a8

1000cfc4 <platform_cmd_cmpl_signal>:
1000cfc4:	2201      	movs	r2, #1
1000cfc6:	4b01      	ldr	r3, [pc, #4]	; (1000cfcc <platform_cmd_cmpl_signal+0x8>)
1000cfc8:	601a      	str	r2, [r3, #0]
1000cfca:	4770      	bx	lr
1000cfcc:	100133ac 	.word	0x100133ac

1000cfd0 <platform_cmd_cmpl_wait>:
1000cfd0:	b510      	push	{r4, lr}
1000cfd2:	1c04      	adds	r4, r0, #0
1000cfd4:	4b07      	ldr	r3, [pc, #28]	; (1000cff4 <platform_cmd_cmpl_wait+0x24>)
1000cfd6:	681a      	ldr	r2, [r3, #0]
1000cfd8:	2a01      	cmp	r2, #1
1000cfda:	d003      	beq.n	1000cfe4 <platform_cmd_cmpl_wait+0x14>
1000cfdc:	4b06      	ldr	r3, [pc, #24]	; (1000cff8 <platform_cmd_cmpl_wait+0x28>)
1000cfde:	2000      	movs	r0, #0
1000cfe0:	4798      	blx	r3
1000cfe2:	e7f7      	b.n	1000cfd4 <platform_cmd_cmpl_wait+0x4>
1000cfe4:	6819      	ldr	r1, [r3, #0]
1000cfe6:	2901      	cmp	r1, #1
1000cfe8:	d102      	bne.n	1000cff0 <platform_cmd_cmpl_wait+0x20>
1000cfea:	2200      	movs	r2, #0
1000cfec:	601a      	str	r2, [r3, #0]
1000cfee:	e000      	b.n	1000cff2 <platform_cmd_cmpl_wait+0x22>
1000cff0:	7022      	strb	r2, [r4, #0]
1000cff2:	bd10      	pop	{r4, pc}
1000cff4:	100133ac 	.word	0x100133ac
1000cff8:	1000adc1 	.word	0x1000adc1

1000cffc <start_timer>:
1000cffc:	4770      	bx	lr

1000cffe <stop_timer>:
1000cffe:	4770      	bx	lr

1000d000 <dbg_le_set_bd_addr_req_handler>:
1000d000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d002:	466b      	mov	r3, sp
1000d004:	1dde      	adds	r6, r3, #7
1000d006:	2300      	movs	r3, #0
1000d008:	7033      	strb	r3, [r6, #0]
1000d00a:	230f      	movs	r3, #15
1000d00c:	4c13      	ldr	r4, [pc, #76]	; (1000d05c <dbg_le_set_bd_addr_req_handler+0x5c>)
1000d00e:	2703      	movs	r7, #3
1000d010:	7023      	strb	r3, [r4, #0]
1000d012:	2300      	movs	r3, #0
1000d014:	70e3      	strb	r3, [r4, #3]
1000d016:	4b12      	ldr	r3, [pc, #72]	; (1000d060 <dbg_le_set_bd_addr_req_handler+0x60>)
1000d018:	1c01      	adds	r1, r0, #0
1000d01a:	881a      	ldrh	r2, [r3, #0]
1000d01c:	881b      	ldrh	r3, [r3, #0]
1000d01e:	7122      	strb	r2, [r4, #4]
1000d020:	0a1b      	lsrs	r3, r3, #8
1000d022:	2206      	movs	r2, #6
1000d024:	7163      	strb	r3, [r4, #5]
1000d026:	480f      	ldr	r0, [pc, #60]	; (1000d064 <dbg_le_set_bd_addr_req_handler+0x64>)
1000d028:	4b0f      	ldr	r3, [pc, #60]	; (1000d068 <dbg_le_set_bd_addr_req_handler+0x68>)
1000d02a:	7067      	strb	r7, [r4, #1]
1000d02c:	70a7      	strb	r7, [r4, #2]
1000d02e:	4798      	blx	r3
1000d030:	4d0e      	ldr	r5, [pc, #56]	; (1000d06c <dbg_le_set_bd_addr_req_handler+0x6c>)
1000d032:	4b0f      	ldr	r3, [pc, #60]	; (1000d070 <dbg_le_set_bd_addr_req_handler+0x70>)
1000d034:	210e      	movs	r1, #14
1000d036:	802b      	strh	r3, [r5, #0]
1000d038:	2306      	movs	r3, #6
1000d03a:	71a3      	strb	r3, [r4, #6]
1000d03c:	2300      	movs	r3, #0
1000d03e:	1c20      	adds	r0, r4, #0
1000d040:	71e3      	strb	r3, [r4, #7]
1000d042:	4b0c      	ldr	r3, [pc, #48]	; (1000d074 <dbg_le_set_bd_addr_req_handler+0x74>)
1000d044:	80af      	strh	r7, [r5, #4]
1000d046:	4798      	blx	r3
1000d048:	1c30      	adds	r0, r6, #0
1000d04a:	4b0b      	ldr	r3, [pc, #44]	; (1000d078 <dbg_le_set_bd_addr_req_handler+0x78>)
1000d04c:	4798      	blx	r3
1000d04e:	7833      	ldrb	r3, [r6, #0]
1000d050:	20e2      	movs	r0, #226	; 0xe2
1000d052:	2b00      	cmp	r3, #0
1000d054:	d101      	bne.n	1000d05a <dbg_le_set_bd_addr_req_handler+0x5a>
1000d056:	68ab      	ldr	r3, [r5, #8]
1000d058:	7818      	ldrb	r0, [r3, #0]
1000d05a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d05c:	10014484 	.word	0x10014484
1000d060:	10014114 	.word	0x10014114
1000d064:	1001448c 	.word	0x1001448c
1000d068:	1000fa1b 	.word	0x1000fa1b
1000d06c:	10014108 	.word	0x10014108
1000d070:	00000329 	.word	0x00000329
1000d074:	1000cf6d 	.word	0x1000cf6d
1000d078:	1000cfd1 	.word	0x1000cfd1

1000d07c <gapc_get_dev_info_cfm.constprop.1>:
1000d07c:	b538      	push	{r3, r4, r5, lr}
1000d07e:	230b      	movs	r3, #11
1000d080:	4c27      	ldr	r4, [pc, #156]	; (1000d120 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000d082:	7023      	strb	r3, [r4, #0]
1000d084:	3303      	adds	r3, #3
1000d086:	7063      	strb	r3, [r4, #1]
1000d088:	3329      	adds	r3, #41	; 0x29
1000d08a:	70a3      	strb	r3, [r4, #2]
1000d08c:	4b25      	ldr	r3, [pc, #148]	; (1000d124 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000d08e:	70e1      	strb	r1, [r4, #3]
1000d090:	881a      	ldrh	r2, [r3, #0]
1000d092:	881b      	ldrh	r3, [r3, #0]
1000d094:	7122      	strb	r2, [r4, #4]
1000d096:	0a1b      	lsrs	r3, r3, #8
1000d098:	7163      	strb	r3, [r4, #5]
1000d09a:	2300      	movs	r3, #0
1000d09c:	7220      	strb	r0, [r4, #8]
1000d09e:	7263      	strb	r3, [r4, #9]
1000d0a0:	2801      	cmp	r0, #1
1000d0a2:	d02b      	beq.n	1000d0fc <gapc_get_dev_info_cfm.constprop.1+0x80>
1000d0a4:	4298      	cmp	r0, r3
1000d0a6:	d01b      	beq.n	1000d0e0 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000d0a8:	2802      	cmp	r0, #2
1000d0aa:	d12f      	bne.n	1000d10c <gapc_get_dev_info_cfm.constprop.1+0x90>
1000d0ac:	4b1e      	ldr	r3, [pc, #120]	; (1000d128 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000d0ae:	2112      	movs	r1, #18
1000d0b0:	1c1a      	adds	r2, r3, #0
1000d0b2:	32ce      	adds	r2, #206	; 0xce
1000d0b4:	8812      	ldrh	r2, [r2, #0]
1000d0b6:	72a2      	strb	r2, [r4, #10]
1000d0b8:	0a12      	lsrs	r2, r2, #8
1000d0ba:	72e2      	strb	r2, [r4, #11]
1000d0bc:	1c1a      	adds	r2, r3, #0
1000d0be:	32d0      	adds	r2, #208	; 0xd0
1000d0c0:	8812      	ldrh	r2, [r2, #0]
1000d0c2:	7322      	strb	r2, [r4, #12]
1000d0c4:	0a12      	lsrs	r2, r2, #8
1000d0c6:	7362      	strb	r2, [r4, #13]
1000d0c8:	1c1a      	adds	r2, r3, #0
1000d0ca:	32d2      	adds	r2, #210	; 0xd2
1000d0cc:	8812      	ldrh	r2, [r2, #0]
1000d0ce:	33d4      	adds	r3, #212	; 0xd4
1000d0d0:	73a2      	strb	r2, [r4, #14]
1000d0d2:	0a12      	lsrs	r2, r2, #8
1000d0d4:	73e2      	strb	r2, [r4, #15]
1000d0d6:	881b      	ldrh	r3, [r3, #0]
1000d0d8:	7423      	strb	r3, [r4, #16]
1000d0da:	0a1b      	lsrs	r3, r3, #8
1000d0dc:	7463      	strb	r3, [r4, #17]
1000d0de:	e016      	b.n	1000d10e <gapc_get_dev_info_cfm.constprop.1+0x92>
1000d0e0:	4b11      	ldr	r3, [pc, #68]	; (1000d128 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000d0e2:	4912      	ldr	r1, [pc, #72]	; (1000d12c <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000d0e4:	33aa      	adds	r3, #170	; 0xaa
1000d0e6:	881d      	ldrh	r5, [r3, #0]
1000d0e8:	4811      	ldr	r0, [pc, #68]	; (1000d130 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000d0ea:	0a2b      	lsrs	r3, r5, #8
1000d0ec:	72a5      	strb	r5, [r4, #10]
1000d0ee:	72e3      	strb	r3, [r4, #11]
1000d0f0:	1c2a      	adds	r2, r5, #0
1000d0f2:	4b10      	ldr	r3, [pc, #64]	; (1000d134 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000d0f4:	350c      	adds	r5, #12
1000d0f6:	4798      	blx	r3
1000d0f8:	b2a9      	uxth	r1, r5
1000d0fa:	e008      	b.n	1000d10e <gapc_get_dev_info_cfm.constprop.1+0x92>
1000d0fc:	4b0a      	ldr	r3, [pc, #40]	; (1000d128 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000d0fe:	210c      	movs	r1, #12
1000d100:	33cc      	adds	r3, #204	; 0xcc
1000d102:	881b      	ldrh	r3, [r3, #0]
1000d104:	72a3      	strb	r3, [r4, #10]
1000d106:	0a1b      	lsrs	r3, r3, #8
1000d108:	72e3      	strb	r3, [r4, #11]
1000d10a:	e000      	b.n	1000d10e <gapc_get_dev_info_cfm.constprop.1+0x92>
1000d10c:	210a      	movs	r1, #10
1000d10e:	1c0b      	adds	r3, r1, #0
1000d110:	3b08      	subs	r3, #8
1000d112:	71a3      	strb	r3, [r4, #6]
1000d114:	121b      	asrs	r3, r3, #8
1000d116:	71e3      	strb	r3, [r4, #7]
1000d118:	1c20      	adds	r0, r4, #0
1000d11a:	4b07      	ldr	r3, [pc, #28]	; (1000d138 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000d11c:	4798      	blx	r3
1000d11e:	bd38      	pop	{r3, r4, r5, pc}
1000d120:	10014484 	.word	0x10014484
1000d124:	10014114 	.word	0x10014114
1000d128:	100141a6 	.word	0x100141a6
1000d12c:	10014252 	.word	0x10014252
1000d130:	10014490 	.word	0x10014490
1000d134:	1000fa1b 	.word	0x1000fa1b
1000d138:	1000cf6d 	.word	0x1000cf6d

1000d13c <check_ConnData_idx_role>:
1000d13c:	4b0c      	ldr	r3, [pc, #48]	; (1000d170 <check_ConnData_idx_role+0x34>)
1000d13e:	b570      	push	{r4, r5, r6, lr}
1000d140:	1c04      	adds	r4, r0, #0
1000d142:	2008      	movs	r0, #8
1000d144:	429c      	cmp	r4, r3
1000d146:	d011      	beq.n	1000d16c <check_ConnData_idx_role+0x30>
1000d148:	2300      	movs	r3, #0
1000d14a:	2212      	movs	r2, #18
1000d14c:	435a      	muls	r2, r3
1000d14e:	4d09      	ldr	r5, [pc, #36]	; (1000d174 <check_ConnData_idx_role+0x38>)
1000d150:	b2d8      	uxtb	r0, r3
1000d152:	1956      	adds	r6, r2, r5
1000d154:	8976      	ldrh	r6, [r6, #10]
1000d156:	42a6      	cmp	r6, r4
1000d158:	d104      	bne.n	1000d164 <check_ConnData_idx_role+0x28>
1000d15a:	2900      	cmp	r1, #0
1000d15c:	d006      	beq.n	1000d16c <check_ConnData_idx_role+0x30>
1000d15e:	5d53      	ldrb	r3, [r2, r5]
1000d160:	700b      	strb	r3, [r1, #0]
1000d162:	e003      	b.n	1000d16c <check_ConnData_idx_role+0x30>
1000d164:	3301      	adds	r3, #1
1000d166:	2b08      	cmp	r3, #8
1000d168:	d1ef      	bne.n	1000d14a <check_ConnData_idx_role+0xe>
1000d16a:	1c18      	adds	r0, r3, #0
1000d16c:	bd70      	pop	{r4, r5, r6, pc}
1000d16e:	46c0      	nop			; (mov r8, r8)
1000d170:	0000ffff 	.word	0x0000ffff
1000d174:	10014116 	.word	0x10014116

1000d178 <check_ConnData_emptyEntry>:
1000d178:	2300      	movs	r3, #0
1000d17a:	2212      	movs	r2, #18
1000d17c:	435a      	muls	r2, r3
1000d17e:	4906      	ldr	r1, [pc, #24]	; (1000d198 <check_ConnData_emptyEntry+0x20>)
1000d180:	b2d8      	uxtb	r0, r3
1000d182:	1852      	adds	r2, r2, r1
1000d184:	8951      	ldrh	r1, [r2, #10]
1000d186:	4a05      	ldr	r2, [pc, #20]	; (1000d19c <check_ConnData_emptyEntry+0x24>)
1000d188:	4291      	cmp	r1, r2
1000d18a:	d003      	beq.n	1000d194 <check_ConnData_emptyEntry+0x1c>
1000d18c:	3301      	adds	r3, #1
1000d18e:	2b08      	cmp	r3, #8
1000d190:	d1f3      	bne.n	1000d17a <check_ConnData_emptyEntry+0x2>
1000d192:	1c18      	adds	r0, r3, #0
1000d194:	4770      	bx	lr
1000d196:	46c0      	nop			; (mov r8, r8)
1000d198:	10014116 	.word	0x10014116
1000d19c:	0000ffff 	.word	0x0000ffff

1000d1a0 <gapc_cmp_evt>:
1000d1a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d1a2:	780b      	ldrb	r3, [r1, #0]
1000d1a4:	1c05      	adds	r5, r0, #0
1000d1a6:	1e58      	subs	r0, r3, #1
1000d1a8:	784e      	ldrb	r6, [r1, #1]
1000d1aa:	280f      	cmp	r0, #15
1000d1ac:	d85a      	bhi.n	1000d264 <gapc_cmp_evt+0xc4>
1000d1ae:	1c14      	adds	r4, r2, #0
1000d1b0:	f001 fba4 	bl	1000e8fc <__gnu_thumb1_case_uqi>
1000d1b4:	5858440a 	.word	0x5858440a
1000d1b8:	4b584444 	.word	0x4b584444
1000d1bc:	0825122d 	.word	0x0825122d
1000d1c0:	3e395858 	.word	0x3e395858
1000d1c4:	203b      	movs	r0, #59	; 0x3b
1000d1c6:	e04e      	b.n	1000d266 <gapc_cmp_evt+0xc6>
1000d1c8:	203b      	movs	r0, #59	; 0x3b
1000d1ca:	2e00      	cmp	r6, #0
1000d1cc:	d04b      	beq.n	1000d266 <gapc_cmp_evt+0xc6>
1000d1ce:	0a2d      	lsrs	r5, r5, #8
1000d1d0:	8015      	strh	r5, [r2, #0]
1000d1d2:	7096      	strb	r6, [r2, #2]
1000d1d4:	3835      	subs	r0, #53	; 0x35
1000d1d6:	e046      	b.n	1000d266 <gapc_cmp_evt+0xc6>
1000d1d8:	466b      	mov	r3, sp
1000d1da:	1ddf      	adds	r7, r3, #7
1000d1dc:	2301      	movs	r3, #1
1000d1de:	0a2d      	lsrs	r5, r5, #8
1000d1e0:	703b      	strb	r3, [r7, #0]
1000d1e2:	1c28      	adds	r0, r5, #0
1000d1e4:	1c39      	adds	r1, r7, #0
1000d1e6:	4b20      	ldr	r3, [pc, #128]	; (1000d268 <gapc_cmp_evt+0xc8>)
1000d1e8:	4798      	blx	r3
1000d1ea:	2807      	cmp	r0, #7
1000d1ec:	d803      	bhi.n	1000d1f6 <gapc_cmp_evt+0x56>
1000d1ee:	783b      	ldrb	r3, [r7, #0]
1000d1f0:	203b      	movs	r0, #59	; 0x3b
1000d1f2:	2b00      	cmp	r3, #0
1000d1f4:	d037      	beq.n	1000d266 <gapc_cmp_evt+0xc6>
1000d1f6:	8065      	strh	r5, [r4, #2]
1000d1f8:	7126      	strb	r6, [r4, #4]
1000d1fa:	2009      	movs	r0, #9
1000d1fc:	e033      	b.n	1000d266 <gapc_cmp_evt+0xc6>
1000d1fe:	203b      	movs	r0, #59	; 0x3b
1000d200:	2e00      	cmp	r6, #0
1000d202:	d030      	beq.n	1000d266 <gapc_cmp_evt+0xc6>
1000d204:	0a2d      	lsrs	r5, r5, #8
1000d206:	8015      	strh	r5, [r2, #0]
1000d208:	7096      	strb	r6, [r2, #2]
1000d20a:	382d      	subs	r0, #45	; 0x2d
1000d20c:	e02b      	b.n	1000d266 <gapc_cmp_evt+0xc6>
1000d20e:	203b      	movs	r0, #59	; 0x3b
1000d210:	2e00      	cmp	r6, #0
1000d212:	d028      	beq.n	1000d266 <gapc_cmp_evt+0xc6>
1000d214:	2300      	movs	r3, #0
1000d216:	0a2d      	lsrs	r5, r5, #8
1000d218:	8015      	strh	r5, [r2, #0]
1000d21a:	7096      	strb	r6, [r2, #2]
1000d21c:	8093      	strh	r3, [r2, #4]
1000d21e:	80d3      	strh	r3, [r2, #6]
1000d220:	8113      	strh	r3, [r2, #8]
1000d222:	3834      	subs	r0, #52	; 0x34
1000d224:	e01f      	b.n	1000d266 <gapc_cmp_evt+0xc6>
1000d226:	203b      	movs	r0, #59	; 0x3b
1000d228:	2e00      	cmp	r6, #0
1000d22a:	d01c      	beq.n	1000d266 <gapc_cmp_evt+0xc6>
1000d22c:	7216      	strb	r6, [r2, #8]
1000d22e:	e003      	b.n	1000d238 <gapc_cmp_evt+0x98>
1000d230:	203b      	movs	r0, #59	; 0x3b
1000d232:	2e00      	cmp	r6, #0
1000d234:	d017      	beq.n	1000d266 <gapc_cmp_evt+0xc6>
1000d236:	7116      	strb	r6, [r2, #4]
1000d238:	3812      	subs	r0, #18
1000d23a:	e014      	b.n	1000d266 <gapc_cmp_evt+0xc6>
1000d23c:	203b      	movs	r0, #59	; 0x3b
1000d23e:	2e00      	cmp	r6, #0
1000d240:	d011      	beq.n	1000d266 <gapc_cmp_evt+0xc6>
1000d242:	7093      	strb	r3, [r2, #2]
1000d244:	70d6      	strb	r6, [r2, #3]
1000d246:	382a      	subs	r0, #42	; 0x2a
1000d248:	e00d      	b.n	1000d266 <gapc_cmp_evt+0xc6>
1000d24a:	203b      	movs	r0, #59	; 0x3b
1000d24c:	2e00      	cmp	r6, #0
1000d24e:	d00a      	beq.n	1000d266 <gapc_cmp_evt+0xc6>
1000d250:	0a2d      	lsrs	r5, r5, #8
1000d252:	7016      	strb	r6, [r2, #0]
1000d254:	8055      	strh	r5, [r2, #2]
1000d256:	1d10      	adds	r0, r2, #4
1000d258:	2100      	movs	r1, #0
1000d25a:	2205      	movs	r2, #5
1000d25c:	4b03      	ldr	r3, [pc, #12]	; (1000d26c <gapc_cmp_evt+0xcc>)
1000d25e:	4798      	blx	r3
1000d260:	2012      	movs	r0, #18
1000d262:	e000      	b.n	1000d266 <gapc_cmp_evt+0xc6>
1000d264:	2000      	movs	r0, #0
1000d266:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d268:	1000d13d 	.word	0x1000d13d
1000d26c:	1000fa2d 	.word	0x1000fa2d

1000d270 <gapc_connection_cfm_handler>:
1000d270:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d272:	b085      	sub	sp, #20
1000d274:	1c1d      	adds	r5, r3, #0
1000d276:	ab0a      	add	r3, sp, #40	; 0x28
1000d278:	781b      	ldrb	r3, [r3, #0]
1000d27a:	9201      	str	r2, [sp, #4]
1000d27c:	9302      	str	r3, [sp, #8]
1000d27e:	ab0b      	add	r3, sp, #44	; 0x2c
1000d280:	781b      	ldrb	r3, [r3, #0]
1000d282:	1c07      	adds	r7, r0, #0
1000d284:	9303      	str	r3, [sp, #12]
1000d286:	ab0c      	add	r3, sp, #48	; 0x30
1000d288:	881a      	ldrh	r2, [r3, #0]
1000d28a:	2302      	movs	r3, #2
1000d28c:	1c0e      	adds	r6, r1, #0
1000d28e:	4c23      	ldr	r4, [pc, #140]	; (1000d31c <gapc_connection_cfm_handler+0xac>)
1000d290:	1c39      	adds	r1, r7, #0
1000d292:	7023      	strb	r3, [r4, #0]
1000d294:	330c      	adds	r3, #12
1000d296:	7063      	strb	r3, [r4, #1]
1000d298:	70a3      	strb	r3, [r4, #2]
1000d29a:	4b21      	ldr	r3, [pc, #132]	; (1000d320 <gapc_connection_cfm_handler+0xb0>)
1000d29c:	70e2      	strb	r2, [r4, #3]
1000d29e:	881a      	ldrh	r2, [r3, #0]
1000d2a0:	881b      	ldrh	r3, [r3, #0]
1000d2a2:	7122      	strb	r2, [r4, #4]
1000d2a4:	0a1b      	lsrs	r3, r3, #8
1000d2a6:	4f1f      	ldr	r7, [pc, #124]	; (1000d324 <gapc_connection_cfm_handler+0xb4>)
1000d2a8:	2210      	movs	r2, #16
1000d2aa:	481f      	ldr	r0, [pc, #124]	; (1000d328 <gapc_connection_cfm_handler+0xb8>)
1000d2ac:	7163      	strb	r3, [r4, #5]
1000d2ae:	47b8      	blx	r7
1000d2b0:	0a33      	lsrs	r3, r6, #8
1000d2b2:	7626      	strb	r6, [r4, #24]
1000d2b4:	7663      	strb	r3, [r4, #25]
1000d2b6:	9901      	ldr	r1, [sp, #4]
1000d2b8:	0c33      	lsrs	r3, r6, #16
1000d2ba:	2210      	movs	r2, #16
1000d2bc:	0e36      	lsrs	r6, r6, #24
1000d2be:	481b      	ldr	r0, [pc, #108]	; (1000d32c <gapc_connection_cfm_handler+0xbc>)
1000d2c0:	76a3      	strb	r3, [r4, #26]
1000d2c2:	76e6      	strb	r6, [r4, #27]
1000d2c4:	47b8      	blx	r7
1000d2c6:	1c23      	adds	r3, r4, #0
1000d2c8:	332c      	adds	r3, #44	; 0x2c
1000d2ca:	701d      	strb	r5, [r3, #0]
1000d2cc:	1c23      	adds	r3, r4, #0
1000d2ce:	0a2a      	lsrs	r2, r5, #8
1000d2d0:	332d      	adds	r3, #45	; 0x2d
1000d2d2:	701a      	strb	r2, [r3, #0]
1000d2d4:	1c23      	adds	r3, r4, #0
1000d2d6:	0c2a      	lsrs	r2, r5, #16
1000d2d8:	332e      	adds	r3, #46	; 0x2e
1000d2da:	701a      	strb	r2, [r3, #0]
1000d2dc:	1c23      	adds	r3, r4, #0
1000d2de:	0e2d      	lsrs	r5, r5, #24
1000d2e0:	332f      	adds	r3, #47	; 0x2f
1000d2e2:	466a      	mov	r2, sp
1000d2e4:	701d      	strb	r5, [r3, #0]
1000d2e6:	1c23      	adds	r3, r4, #0
1000d2e8:	7a12      	ldrb	r2, [r2, #8]
1000d2ea:	3330      	adds	r3, #48	; 0x30
1000d2ec:	701a      	strb	r2, [r3, #0]
1000d2ee:	1c23      	adds	r3, r4, #0
1000d2f0:	2500      	movs	r5, #0
1000d2f2:	3331      	adds	r3, #49	; 0x31
1000d2f4:	466a      	mov	r2, sp
1000d2f6:	701d      	strb	r5, [r3, #0]
1000d2f8:	1c23      	adds	r3, r4, #0
1000d2fa:	7b12      	ldrb	r2, [r2, #12]
1000d2fc:	3332      	adds	r3, #50	; 0x32
1000d2fe:	701a      	strb	r2, [r3, #0]
1000d300:	1c23      	adds	r3, r4, #0
1000d302:	3333      	adds	r3, #51	; 0x33
1000d304:	701d      	strb	r5, [r3, #0]
1000d306:	232c      	movs	r3, #44	; 0x2c
1000d308:	1c20      	adds	r0, r4, #0
1000d30a:	71a3      	strb	r3, [r4, #6]
1000d30c:	2134      	movs	r1, #52	; 0x34
1000d30e:	4b08      	ldr	r3, [pc, #32]	; (1000d330 <gapc_connection_cfm_handler+0xc0>)
1000d310:	71e5      	strb	r5, [r4, #7]
1000d312:	4798      	blx	r3
1000d314:	1c28      	adds	r0, r5, #0
1000d316:	b005      	add	sp, #20
1000d318:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d31a:	46c0      	nop			; (mov r8, r8)
1000d31c:	10014484 	.word	0x10014484
1000d320:	10014114 	.word	0x10014114
1000d324:	1000fa1b 	.word	0x1000fa1b
1000d328:	1001448c 	.word	0x1001448c
1000d32c:	100144a0 	.word	0x100144a0
1000d330:	1000cf6d 	.word	0x1000cf6d

1000d334 <gapc_con_req_ind>:
1000d334:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d336:	7845      	ldrb	r5, [r0, #1]
1000d338:	7803      	ldrb	r3, [r0, #0]
1000d33a:	4c30      	ldr	r4, [pc, #192]	; (1000d3fc <gapc_con_req_ind+0xc8>)
1000d33c:	022d      	lsls	r5, r5, #8
1000d33e:	431d      	orrs	r5, r3
1000d340:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000d342:	78c3      	ldrb	r3, [r0, #3]
1000d344:	7882      	ldrb	r2, [r0, #2]
1000d346:	b08b      	sub	sp, #44	; 0x2c
1000d348:	021b      	lsls	r3, r3, #8
1000d34a:	431a      	orrs	r2, r3
1000d34c:	466b      	mov	r3, sp
1000d34e:	9205      	str	r2, [sp, #20]
1000d350:	8a9b      	ldrh	r3, [r3, #20]
1000d352:	2120      	movs	r1, #32
1000d354:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000d356:	7943      	ldrb	r3, [r0, #5]
1000d358:	7902      	ldrb	r2, [r0, #4]
1000d35a:	021b      	lsls	r3, r3, #8
1000d35c:	431a      	orrs	r2, r3
1000d35e:	466b      	mov	r3, sp
1000d360:	9206      	str	r2, [sp, #24]
1000d362:	8b1b      	ldrh	r3, [r3, #24]
1000d364:	1c06      	adds	r6, r0, #0
1000d366:	8623      	strh	r3, [r4, #48]	; 0x30
1000d368:	79c3      	ldrb	r3, [r0, #7]
1000d36a:	7982      	ldrb	r2, [r0, #6]
1000d36c:	021b      	lsls	r3, r3, #8
1000d36e:	431a      	orrs	r2, r3
1000d370:	466b      	mov	r3, sp
1000d372:	9207      	str	r2, [sp, #28]
1000d374:	466a      	mov	r2, sp
1000d376:	8b9b      	ldrh	r3, [r3, #28]
1000d378:	1852      	adds	r2, r2, r1
1000d37a:	8663      	strh	r3, [r4, #50]	; 0x32
1000d37c:	7a43      	ldrb	r3, [r0, #9]
1000d37e:	1c01      	adds	r1, r0, #0
1000d380:	9308      	str	r3, [sp, #32]
1000d382:	1c23      	adds	r3, r4, #0
1000d384:	7812      	ldrb	r2, [r2, #0]
1000d386:	3377      	adds	r3, #119	; 0x77
1000d388:	3478      	adds	r4, #120	; 0x78
1000d38a:	701a      	strb	r2, [r3, #0]
1000d38c:	310a      	adds	r1, #10
1000d38e:	2206      	movs	r2, #6
1000d390:	4b1b      	ldr	r3, [pc, #108]	; (1000d400 <gapc_con_req_ind+0xcc>)
1000d392:	1c20      	adds	r0, r4, #0
1000d394:	4798      	blx	r3
1000d396:	7c33      	ldrb	r3, [r6, #16]
1000d398:	9309      	str	r3, [sp, #36]	; 0x24
1000d39a:	4b1a      	ldr	r3, [pc, #104]	; (1000d404 <gapc_con_req_ind+0xd0>)
1000d39c:	4798      	blx	r3
1000d39e:	4e1a      	ldr	r6, [pc, #104]	; (1000d408 <gapc_con_req_ind+0xd4>)
1000d3a0:	1e07      	subs	r7, r0, #0
1000d3a2:	2f07      	cmp	r7, #7
1000d3a4:	d81b      	bhi.n	1000d3de <gapc_con_req_ind+0xaa>
1000d3a6:	2312      	movs	r3, #18
1000d3a8:	4343      	muls	r3, r0
1000d3aa:	18f0      	adds	r0, r6, r3
1000d3ac:	8145      	strh	r5, [r0, #10]
1000d3ae:	4669      	mov	r1, sp
1000d3b0:	2524      	movs	r5, #36	; 0x24
1000d3b2:	1949      	adds	r1, r1, r5
1000d3b4:	7809      	ldrb	r1, [r1, #0]
1000d3b6:	2206      	movs	r2, #6
1000d3b8:	54f1      	strb	r1, [r6, r3]
1000d3ba:	2120      	movs	r1, #32
1000d3bc:	466b      	mov	r3, sp
1000d3be:	185b      	adds	r3, r3, r1
1000d3c0:	781b      	ldrb	r3, [r3, #0]
1000d3c2:	1c21      	adds	r1, r4, #0
1000d3c4:	7043      	strb	r3, [r0, #1]
1000d3c6:	466b      	mov	r3, sp
1000d3c8:	8a9b      	ldrh	r3, [r3, #20]
1000d3ca:	3002      	adds	r0, #2
1000d3cc:	8143      	strh	r3, [r0, #10]
1000d3ce:	466b      	mov	r3, sp
1000d3d0:	8b1b      	ldrh	r3, [r3, #24]
1000d3d2:	8183      	strh	r3, [r0, #12]
1000d3d4:	466b      	mov	r3, sp
1000d3d6:	8b9b      	ldrh	r3, [r3, #28]
1000d3d8:	81c3      	strh	r3, [r0, #14]
1000d3da:	4b09      	ldr	r3, [pc, #36]	; (1000d400 <gapc_con_req_ind+0xcc>)
1000d3dc:	4798      	blx	r3
1000d3de:	2112      	movs	r1, #18
1000d3e0:	2300      	movs	r3, #0
1000d3e2:	434f      	muls	r7, r1
1000d3e4:	9300      	str	r3, [sp, #0]
1000d3e6:	9301      	str	r3, [sp, #4]
1000d3e8:	19f6      	adds	r6, r6, r7
1000d3ea:	8971      	ldrh	r1, [r6, #10]
1000d3ec:	4a07      	ldr	r2, [pc, #28]	; (1000d40c <gapc_con_req_ind+0xd8>)
1000d3ee:	9102      	str	r1, [sp, #8]
1000d3f0:	1c10      	adds	r0, r2, #0
1000d3f2:	1c19      	adds	r1, r3, #0
1000d3f4:	4c06      	ldr	r4, [pc, #24]	; (1000d410 <gapc_con_req_ind+0xdc>)
1000d3f6:	47a0      	blx	r4
1000d3f8:	b00b      	add	sp, #44	; 0x2c
1000d3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d3fc:	100141a6 	.word	0x100141a6
1000d400:	1000fa1b 	.word	0x1000fa1b
1000d404:	1000d179 	.word	0x1000d179
1000d408:	10014116 	.word	0x10014116
1000d40c:	100133b0 	.word	0x100133b0
1000d410:	1000d271 	.word	0x1000d271

1000d414 <gapc_disconnect_cmd_handler>:
1000d414:	2204      	movs	r2, #4
1000d416:	b510      	push	{r4, lr}
1000d418:	4b0c      	ldr	r3, [pc, #48]	; (1000d44c <gapc_disconnect_cmd_handler+0x38>)
1000d41a:	2400      	movs	r4, #0
1000d41c:	701a      	strb	r2, [r3, #0]
1000d41e:	320a      	adds	r2, #10
1000d420:	705a      	strb	r2, [r3, #1]
1000d422:	709a      	strb	r2, [r3, #2]
1000d424:	4a0a      	ldr	r2, [pc, #40]	; (1000d450 <gapc_disconnect_cmd_handler+0x3c>)
1000d426:	70d9      	strb	r1, [r3, #3]
1000d428:	8811      	ldrh	r1, [r2, #0]
1000d42a:	8812      	ldrh	r2, [r2, #0]
1000d42c:	7119      	strb	r1, [r3, #4]
1000d42e:	0a12      	lsrs	r2, r2, #8
1000d430:	715a      	strb	r2, [r3, #5]
1000d432:	2201      	movs	r2, #1
1000d434:	721a      	strb	r2, [r3, #8]
1000d436:	1892      	adds	r2, r2, r2
1000d438:	7258      	strb	r0, [r3, #9]
1000d43a:	719a      	strb	r2, [r3, #6]
1000d43c:	71dc      	strb	r4, [r3, #7]
1000d43e:	1c18      	adds	r0, r3, #0
1000d440:	210a      	movs	r1, #10
1000d442:	4b04      	ldr	r3, [pc, #16]	; (1000d454 <gapc_disconnect_cmd_handler+0x40>)
1000d444:	4798      	blx	r3
1000d446:	1c20      	adds	r0, r4, #0
1000d448:	bd10      	pop	{r4, pc}
1000d44a:	46c0      	nop			; (mov r8, r8)
1000d44c:	10014484 	.word	0x10014484
1000d450:	10014114 	.word	0x10014114
1000d454:	1000cf6d 	.word	0x1000cf6d

1000d458 <gapc_disconnect_ind>:
1000d458:	1c02      	adds	r2, r0, #0
1000d45a:	b508      	push	{r3, lr}
1000d45c:	7843      	ldrb	r3, [r0, #1]
1000d45e:	7800      	ldrb	r0, [r0, #0]
1000d460:	021b      	lsls	r3, r3, #8
1000d462:	4318      	orrs	r0, r3
1000d464:	8008      	strh	r0, [r1, #0]
1000d466:	7893      	ldrb	r3, [r2, #2]
1000d468:	708b      	strb	r3, [r1, #2]
1000d46a:	2100      	movs	r1, #0
1000d46c:	4b05      	ldr	r3, [pc, #20]	; (1000d484 <gapc_disconnect_ind+0x2c>)
1000d46e:	4798      	blx	r3
1000d470:	2807      	cmp	r0, #7
1000d472:	d806      	bhi.n	1000d482 <gapc_disconnect_ind+0x2a>
1000d474:	2312      	movs	r3, #18
1000d476:	4358      	muls	r0, r3
1000d478:	4b03      	ldr	r3, [pc, #12]	; (1000d488 <gapc_disconnect_ind+0x30>)
1000d47a:	1818      	adds	r0, r3, r0
1000d47c:	2301      	movs	r3, #1
1000d47e:	425b      	negs	r3, r3
1000d480:	8143      	strh	r3, [r0, #10]
1000d482:	bd08      	pop	{r3, pc}
1000d484:	1000d13d 	.word	0x1000d13d
1000d488:	10014116 	.word	0x10014116

1000d48c <gapc_bond_cmd_handler>:
1000d48c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d48e:	9300      	str	r3, [sp, #0]
1000d490:	2312      	movs	r3, #18
1000d492:	1c04      	adds	r4, r0, #0
1000d494:	a808      	add	r0, sp, #32
1000d496:	7807      	ldrb	r7, [r0, #0]
1000d498:	a809      	add	r0, sp, #36	; 0x24
1000d49a:	7806      	ldrb	r6, [r0, #0]
1000d49c:	a80a      	add	r0, sp, #40	; 0x28
1000d49e:	7805      	ldrb	r5, [r0, #0]
1000d4a0:	a80b      	add	r0, sp, #44	; 0x2c
1000d4a2:	7800      	ldrb	r0, [r0, #0]
1000d4a4:	9001      	str	r0, [sp, #4]
1000d4a6:	4810      	ldr	r0, [pc, #64]	; (1000d4e8 <gapc_bond_cmd_handler+0x5c>)
1000d4a8:	7003      	strb	r3, [r0, #0]
1000d4aa:	230e      	movs	r3, #14
1000d4ac:	70c4      	strb	r4, [r0, #3]
1000d4ae:	4c0f      	ldr	r4, [pc, #60]	; (1000d4ec <gapc_bond_cmd_handler+0x60>)
1000d4b0:	7043      	strb	r3, [r0, #1]
1000d4b2:	7083      	strb	r3, [r0, #2]
1000d4b4:	8823      	ldrh	r3, [r4, #0]
1000d4b6:	8824      	ldrh	r4, [r4, #0]
1000d4b8:	7103      	strb	r3, [r0, #4]
1000d4ba:	466b      	mov	r3, sp
1000d4bc:	781b      	ldrb	r3, [r3, #0]
1000d4be:	0a24      	lsrs	r4, r4, #8
1000d4c0:	72c3      	strb	r3, [r0, #11]
1000d4c2:	466b      	mov	r3, sp
1000d4c4:	791b      	ldrb	r3, [r3, #4]
1000d4c6:	7144      	strb	r4, [r0, #5]
1000d4c8:	73c3      	strb	r3, [r0, #15]
1000d4ca:	2308      	movs	r3, #8
1000d4cc:	7183      	strb	r3, [r0, #6]
1000d4ce:	2300      	movs	r3, #0
1000d4d0:	240a      	movs	r4, #10
1000d4d2:	7241      	strb	r1, [r0, #9]
1000d4d4:	71c3      	strb	r3, [r0, #7]
1000d4d6:	2110      	movs	r1, #16
1000d4d8:	4b05      	ldr	r3, [pc, #20]	; (1000d4f0 <gapc_bond_cmd_handler+0x64>)
1000d4da:	7307      	strb	r7, [r0, #12]
1000d4dc:	7346      	strb	r6, [r0, #13]
1000d4de:	7385      	strb	r5, [r0, #14]
1000d4e0:	7204      	strb	r4, [r0, #8]
1000d4e2:	7282      	strb	r2, [r0, #10]
1000d4e4:	4798      	blx	r3
1000d4e6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d4e8:	10014484 	.word	0x10014484
1000d4ec:	10014114 	.word	0x10014114
1000d4f0:	1000cf6d 	.word	0x1000cf6d

1000d4f4 <gapc_bond_ind>:
1000d4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d4f6:	780e      	ldrb	r6, [r1, #0]
1000d4f8:	1c03      	adds	r3, r0, #0
1000d4fa:	1eb0      	subs	r0, r6, #2
1000d4fc:	2805      	cmp	r0, #5
1000d4fe:	d85d      	bhi.n	1000d5bc <gapc_bond_ind+0xc8>
1000d500:	1c15      	adds	r5, r2, #0
1000d502:	1c0c      	adds	r4, r1, #0
1000d504:	f001 f9fa 	bl	1000e8fc <__gnu_thumb1_case_uqi>
1000d508:	2f5a030d 	.word	0x2f5a030d
1000d50c:	4740      	.short	0x4740
1000d50e:	2009      	movs	r0, #9
1000d510:	2a00      	cmp	r2, #0
1000d512:	d054      	beq.n	1000d5be <gapc_bond_ind+0xca>
1000d514:	0a1b      	lsrs	r3, r3, #8
1000d516:	8053      	strh	r3, [r2, #2]
1000d518:	788b      	ldrb	r3, [r1, #2]
1000d51a:	4829      	ldr	r0, [pc, #164]	; (1000d5c0 <gapc_bond_ind+0xcc>)
1000d51c:	7113      	strb	r3, [r2, #4]
1000d51e:	2100      	movs	r1, #0
1000d520:	e01c      	b.n	1000d55c <gapc_bond_ind+0x68>
1000d522:	2009      	movs	r0, #9
1000d524:	2a00      	cmp	r2, #0
1000d526:	d04a      	beq.n	1000d5be <gapc_bond_ind+0xca>
1000d528:	4c25      	ldr	r4, [pc, #148]	; (1000d5c0 <gapc_bond_ind+0xcc>)
1000d52a:	0a1b      	lsrs	r3, r3, #8
1000d52c:	8053      	strh	r3, [r2, #2]
1000d52e:	788b      	ldrb	r3, [r1, #2]
1000d530:	2700      	movs	r7, #0
1000d532:	1c10      	adds	r0, r2, #0
1000d534:	1c21      	adds	r1, r4, #0
1000d536:	7013      	strb	r3, [r2, #0]
1000d538:	4e22      	ldr	r6, [pc, #136]	; (1000d5c4 <gapc_bond_ind+0xd0>)
1000d53a:	7117      	strb	r7, [r2, #4]
1000d53c:	312e      	adds	r1, #46	; 0x2e
1000d53e:	2217      	movs	r2, #23
1000d540:	3032      	adds	r0, #50	; 0x32
1000d542:	47b0      	blx	r6
1000d544:	1c28      	adds	r0, r5, #0
1000d546:	1c21      	adds	r1, r4, #0
1000d548:	2210      	movs	r2, #16
1000d54a:	311e      	adds	r1, #30
1000d54c:	3022      	adds	r0, #34	; 0x22
1000d54e:	47b0      	blx	r6
1000d550:	1ca1      	adds	r1, r4, #2
1000d552:	1da8      	adds	r0, r5, #6
1000d554:	221c      	movs	r2, #28
1000d556:	47b0      	blx	r6
1000d558:	1c20      	adds	r0, r4, #0
1000d55a:	1c39      	adds	r1, r7, #0
1000d55c:	2246      	movs	r2, #70	; 0x46
1000d55e:	4b1a      	ldr	r3, [pc, #104]	; (1000d5c8 <gapc_bond_ind+0xd4>)
1000d560:	4798      	blx	r3
1000d562:	2009      	movs	r0, #9
1000d564:	e02b      	b.n	1000d5be <gapc_bond_ind+0xca>
1000d566:	4d16      	ldr	r5, [pc, #88]	; (1000d5c0 <gapc_bond_ind+0xcc>)
1000d568:	3102      	adds	r1, #2
1000d56a:	1c28      	adds	r0, r5, #0
1000d56c:	2210      	movs	r2, #16
1000d56e:	4e15      	ldr	r6, [pc, #84]	; (1000d5c4 <gapc_bond_ind+0xd0>)
1000d570:	302e      	adds	r0, #46	; 0x2e
1000d572:	47b0      	blx	r6
1000d574:	1c28      	adds	r0, r5, #0
1000d576:	1c21      	adds	r1, r4, #0
1000d578:	303f      	adds	r0, #63	; 0x3f
1000d57a:	3112      	adds	r1, #18
1000d57c:	2206      	movs	r2, #6
1000d57e:	47b0      	blx	r6
1000d580:	7e23      	ldrb	r3, [r4, #24]
1000d582:	353e      	adds	r5, #62	; 0x3e
1000d584:	702b      	strb	r3, [r5, #0]
1000d586:	e019      	b.n	1000d5bc <gapc_bond_ind+0xc8>
1000d588:	480d      	ldr	r0, [pc, #52]	; (1000d5c0 <gapc_bond_ind+0xcc>)
1000d58a:	3102      	adds	r1, #2
1000d58c:	2210      	movs	r2, #16
1000d58e:	4b0d      	ldr	r3, [pc, #52]	; (1000d5c4 <gapc_bond_ind+0xd0>)
1000d590:	301e      	adds	r0, #30
1000d592:	4798      	blx	r3
1000d594:	e012      	b.n	1000d5bc <gapc_bond_ind+0xc8>
1000d596:	4d0a      	ldr	r5, [pc, #40]	; (1000d5c0 <gapc_bond_ind+0xcc>)
1000d598:	3102      	adds	r1, #2
1000d59a:	2210      	movs	r2, #16
1000d59c:	4e09      	ldr	r6, [pc, #36]	; (1000d5c4 <gapc_bond_ind+0xd0>)
1000d59e:	1ca8      	adds	r0, r5, #2
1000d5a0:	47b0      	blx	r6
1000d5a2:	1c28      	adds	r0, r5, #0
1000d5a4:	1c21      	adds	r1, r4, #0
1000d5a6:	7ce3      	ldrb	r3, [r4, #19]
1000d5a8:	7ca2      	ldrb	r2, [r4, #18]
1000d5aa:	021b      	lsls	r3, r3, #8
1000d5ac:	4313      	orrs	r3, r2
1000d5ae:	3014      	adds	r0, #20
1000d5b0:	3114      	adds	r1, #20
1000d5b2:	2208      	movs	r2, #8
1000d5b4:	826b      	strh	r3, [r5, #18]
1000d5b6:	47b0      	blx	r6
1000d5b8:	7f23      	ldrb	r3, [r4, #28]
1000d5ba:	772b      	strb	r3, [r5, #28]
1000d5bc:	2000      	movs	r0, #0
1000d5be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d5c0:	100133e0 	.word	0x100133e0
1000d5c4:	1000fa1b 	.word	0x1000fa1b
1000d5c8:	1000fa2d 	.word	0x1000fa2d

1000d5cc <gapc_bond_req_ind>:
1000d5cc:	b570      	push	{r4, r5, r6, lr}
1000d5ce:	780c      	ldrb	r4, [r1, #0]
1000d5d0:	1c03      	adds	r3, r0, #0
1000d5d2:	7849      	ldrb	r1, [r1, #1]
1000d5d4:	2c07      	cmp	r4, #7
1000d5d6:	d85c      	bhi.n	1000d692 <gapc_bond_req_ind+0xc6>
1000d5d8:	1c20      	adds	r0, r4, #0
1000d5da:	f001 f98f 	bl	1000e8fc <__gnu_thumb1_case_uqi>
1000d5de:	5a04      	.short	0x5a04
1000d5e0:	5a0b5a5a 	.word	0x5a0b5a5a
1000d5e4:	1f1f      	.short	0x1f1f
1000d5e6:	200a      	movs	r0, #10
1000d5e8:	2a00      	cmp	r2, #0
1000d5ea:	d053      	beq.n	1000d694 <gapc_bond_req_ind+0xc8>
1000d5ec:	0a1b      	lsrs	r3, r3, #8
1000d5ee:	8013      	strh	r3, [r2, #0]
1000d5f0:	7091      	strb	r1, [r2, #2]
1000d5f2:	e04f      	b.n	1000d694 <gapc_bond_req_ind+0xc8>
1000d5f4:	2a00      	cmp	r2, #0
1000d5f6:	d00b      	beq.n	1000d610 <gapc_bond_req_ind+0x44>
1000d5f8:	0a1b      	lsrs	r3, r3, #8
1000d5fa:	8013      	strh	r3, [r2, #0]
1000d5fc:	2900      	cmp	r1, #0
1000d5fe:	d102      	bne.n	1000d606 <gapc_bond_req_ind+0x3a>
1000d600:	2301      	movs	r3, #1
1000d602:	7093      	strb	r3, [r2, #2]
1000d604:	e004      	b.n	1000d610 <gapc_bond_req_ind+0x44>
1000d606:	2300      	movs	r3, #0
1000d608:	7093      	strb	r3, [r2, #2]
1000d60a:	2902      	cmp	r1, #2
1000d60c:	d102      	bne.n	1000d614 <gapc_bond_req_ind+0x48>
1000d60e:	70d3      	strb	r3, [r2, #3]
1000d610:	200c      	movs	r0, #12
1000d612:	e03f      	b.n	1000d694 <gapc_bond_req_ind+0xc8>
1000d614:	2901      	cmp	r1, #1
1000d616:	d1fb      	bne.n	1000d610 <gapc_bond_req_ind+0x44>
1000d618:	70d1      	strb	r1, [r2, #3]
1000d61a:	e7f9      	b.n	1000d610 <gapc_bond_req_ind+0x44>
1000d61c:	2214      	movs	r2, #20
1000d61e:	481e      	ldr	r0, [pc, #120]	; (1000d698 <gapc_bond_req_ind+0xcc>)
1000d620:	0a1b      	lsrs	r3, r3, #8
1000d622:	70c3      	strb	r3, [r0, #3]
1000d624:	4b1d      	ldr	r3, [pc, #116]	; (1000d69c <gapc_bond_req_ind+0xd0>)
1000d626:	7002      	strb	r2, [r0, #0]
1000d628:	3a06      	subs	r2, #6
1000d62a:	7042      	strb	r2, [r0, #1]
1000d62c:	7082      	strb	r2, [r0, #2]
1000d62e:	881a      	ldrh	r2, [r3, #0]
1000d630:	881b      	ldrh	r3, [r3, #0]
1000d632:	4e1b      	ldr	r6, [pc, #108]	; (1000d6a0 <gapc_bond_req_ind+0xd4>)
1000d634:	0a1b      	lsrs	r3, r3, #8
1000d636:	7143      	strb	r3, [r0, #5]
1000d638:	2301      	movs	r3, #1
1000d63a:	7102      	strb	r2, [r0, #4]
1000d63c:	7204      	strb	r4, [r0, #8]
1000d63e:	7243      	strb	r3, [r0, #9]
1000d640:	1c05      	adds	r5, r0, #0
1000d642:	1c31      	adds	r1, r6, #0
1000d644:	300a      	adds	r0, #10
1000d646:	2c07      	cmp	r4, #7
1000d648:	d116      	bne.n	1000d678 <gapc_bond_req_ind+0xac>
1000d64a:	317e      	adds	r1, #126	; 0x7e
1000d64c:	2210      	movs	r2, #16
1000d64e:	4c15      	ldr	r4, [pc, #84]	; (1000d6a4 <gapc_bond_req_ind+0xd8>)
1000d650:	47a0      	blx	r4
1000d652:	1c33      	adds	r3, r6, #0
1000d654:	1c31      	adds	r1, r6, #0
1000d656:	1c28      	adds	r0, r5, #0
1000d658:	338e      	adds	r3, #142	; 0x8e
1000d65a:	881b      	ldrh	r3, [r3, #0]
1000d65c:	3190      	adds	r1, #144	; 0x90
1000d65e:	76ab      	strb	r3, [r5, #26]
1000d660:	2208      	movs	r2, #8
1000d662:	0a1b      	lsrs	r3, r3, #8
1000d664:	301c      	adds	r0, #28
1000d666:	76eb      	strb	r3, [r5, #27]
1000d668:	47a0      	blx	r4
1000d66a:	1c31      	adds	r1, r6, #0
1000d66c:	3198      	adds	r1, #152	; 0x98
1000d66e:	780a      	ldrb	r2, [r1, #0]
1000d670:	1d6b      	adds	r3, r5, #5
1000d672:	77da      	strb	r2, [r3, #31]
1000d674:	2125      	movs	r1, #37	; 0x25
1000d676:	e004      	b.n	1000d682 <gapc_bond_req_ind+0xb6>
1000d678:	319a      	adds	r1, #154	; 0x9a
1000d67a:	2210      	movs	r2, #16
1000d67c:	4b09      	ldr	r3, [pc, #36]	; (1000d6a4 <gapc_bond_req_ind+0xd8>)
1000d67e:	4798      	blx	r3
1000d680:	211a      	movs	r1, #26
1000d682:	1c0b      	adds	r3, r1, #0
1000d684:	2400      	movs	r4, #0
1000d686:	3b08      	subs	r3, #8
1000d688:	71ab      	strb	r3, [r5, #6]
1000d68a:	1c28      	adds	r0, r5, #0
1000d68c:	4b06      	ldr	r3, [pc, #24]	; (1000d6a8 <gapc_bond_req_ind+0xdc>)
1000d68e:	71ec      	strb	r4, [r5, #7]
1000d690:	4798      	blx	r3
1000d692:	2000      	movs	r0, #0
1000d694:	bd70      	pop	{r4, r5, r6, pc}
1000d696:	46c0      	nop			; (mov r8, r8)
1000d698:	10014484 	.word	0x10014484
1000d69c:	10014114 	.word	0x10014114
1000d6a0:	100141a6 	.word	0x100141a6
1000d6a4:	1000fa1b 	.word	0x1000fa1b
1000d6a8:	1000cf6d 	.word	0x1000cf6d

1000d6ac <gapc_bond_cfm_handler_pair_resp>:
1000d6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d6ae:	b085      	sub	sp, #20
1000d6b0:	1c07      	adds	r7, r0, #0
1000d6b2:	a80a      	add	r0, sp, #40	; 0x28
1000d6b4:	7806      	ldrb	r6, [r0, #0]
1000d6b6:	a80b      	add	r0, sp, #44	; 0x2c
1000d6b8:	7805      	ldrb	r5, [r0, #0]
1000d6ba:	a80c      	add	r0, sp, #48	; 0x30
1000d6bc:	7800      	ldrb	r0, [r0, #0]
1000d6be:	2414      	movs	r4, #20
1000d6c0:	9002      	str	r0, [sp, #8]
1000d6c2:	a80d      	add	r0, sp, #52	; 0x34
1000d6c4:	7800      	ldrb	r0, [r0, #0]
1000d6c6:	9301      	str	r3, [sp, #4]
1000d6c8:	9003      	str	r0, [sp, #12]
1000d6ca:	a80e      	add	r0, sp, #56	; 0x38
1000d6cc:	8800      	ldrh	r0, [r0, #0]
1000d6ce:	4684      	mov	ip, r0
1000d6d0:	4812      	ldr	r0, [pc, #72]	; (1000d71c <gapc_bond_cfm_handler_pair_resp+0x70>)
1000d6d2:	7004      	strb	r4, [r0, #0]
1000d6d4:	3c06      	subs	r4, #6
1000d6d6:	7044      	strb	r4, [r0, #1]
1000d6d8:	7084      	strb	r4, [r0, #2]
1000d6da:	4664      	mov	r4, ip
1000d6dc:	70c4      	strb	r4, [r0, #3]
1000d6de:	4c10      	ldr	r4, [pc, #64]	; (1000d720 <gapc_bond_cfm_handler_pair_resp+0x74>)
1000d6e0:	7247      	strb	r7, [r0, #9]
1000d6e2:	8823      	ldrh	r3, [r4, #0]
1000d6e4:	8824      	ldrh	r4, [r4, #0]
1000d6e6:	7103      	strb	r3, [r0, #4]
1000d6e8:	466b      	mov	r3, sp
1000d6ea:	791b      	ldrb	r3, [r3, #4]
1000d6ec:	0a24      	lsrs	r4, r4, #8
1000d6ee:	7303      	strb	r3, [r0, #12]
1000d6f0:	466b      	mov	r3, sp
1000d6f2:	7a1b      	ldrb	r3, [r3, #8]
1000d6f4:	7144      	strb	r4, [r0, #5]
1000d6f6:	73c3      	strb	r3, [r0, #15]
1000d6f8:	466b      	mov	r3, sp
1000d6fa:	7b1b      	ldrb	r3, [r3, #12]
1000d6fc:	2401      	movs	r4, #1
1000d6fe:	7403      	strb	r3, [r0, #16]
1000d700:	2309      	movs	r3, #9
1000d702:	7183      	strb	r3, [r0, #6]
1000d704:	2300      	movs	r3, #0
1000d706:	7204      	strb	r4, [r0, #8]
1000d708:	7281      	strb	r1, [r0, #10]
1000d70a:	72c2      	strb	r2, [r0, #11]
1000d70c:	7346      	strb	r6, [r0, #13]
1000d70e:	7385      	strb	r5, [r0, #14]
1000d710:	71c3      	strb	r3, [r0, #7]
1000d712:	2111      	movs	r1, #17
1000d714:	4b03      	ldr	r3, [pc, #12]	; (1000d724 <gapc_bond_cfm_handler_pair_resp+0x78>)
1000d716:	4798      	blx	r3
1000d718:	b005      	add	sp, #20
1000d71a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d71c:	10014484 	.word	0x10014484
1000d720:	10014114 	.word	0x10014114
1000d724:	1000cf6d 	.word	0x1000cf6d

1000d728 <gapc_bond_cfm_handler_key_exch>:
1000d728:	b538      	push	{r3, r4, r5, lr}
1000d72a:	2514      	movs	r5, #20
1000d72c:	4c0d      	ldr	r4, [pc, #52]	; (1000d764 <gapc_bond_cfm_handler_key_exch+0x3c>)
1000d72e:	70e3      	strb	r3, [r4, #3]
1000d730:	4b0d      	ldr	r3, [pc, #52]	; (1000d768 <gapc_bond_cfm_handler_key_exch+0x40>)
1000d732:	7025      	strb	r5, [r4, #0]
1000d734:	3d06      	subs	r5, #6
1000d736:	7065      	strb	r5, [r4, #1]
1000d738:	70a5      	strb	r5, [r4, #2]
1000d73a:	881d      	ldrh	r5, [r3, #0]
1000d73c:	881b      	ldrh	r3, [r3, #0]
1000d73e:	7220      	strb	r0, [r4, #8]
1000d740:	0a1b      	lsrs	r3, r3, #8
1000d742:	7163      	strb	r3, [r4, #5]
1000d744:	7261      	strb	r1, [r4, #9]
1000d746:	4b09      	ldr	r3, [pc, #36]	; (1000d76c <gapc_bond_cfm_handler_key_exch+0x44>)
1000d748:	1c11      	adds	r1, r2, #0
1000d74a:	4809      	ldr	r0, [pc, #36]	; (1000d770 <gapc_bond_cfm_handler_key_exch+0x48>)
1000d74c:	2210      	movs	r2, #16
1000d74e:	7125      	strb	r5, [r4, #4]
1000d750:	4798      	blx	r3
1000d752:	2312      	movs	r3, #18
1000d754:	71a3      	strb	r3, [r4, #6]
1000d756:	2300      	movs	r3, #0
1000d758:	1c20      	adds	r0, r4, #0
1000d75a:	71e3      	strb	r3, [r4, #7]
1000d75c:	211a      	movs	r1, #26
1000d75e:	4b05      	ldr	r3, [pc, #20]	; (1000d774 <gapc_bond_cfm_handler_key_exch+0x4c>)
1000d760:	4798      	blx	r3
1000d762:	bd38      	pop	{r3, r4, r5, pc}
1000d764:	10014484 	.word	0x10014484
1000d768:	10014114 	.word	0x10014114
1000d76c:	1000fa1b 	.word	0x1000fa1b
1000d770:	1001448e 	.word	0x1001448e
1000d774:	1000cf6d 	.word	0x1000cf6d

1000d778 <gapc_security_cmd_handler>:
1000d778:	221a      	movs	r2, #26
1000d77a:	b508      	push	{r3, lr}
1000d77c:	4b0b      	ldr	r3, [pc, #44]	; (1000d7ac <gapc_security_cmd_handler+0x34>)
1000d77e:	701a      	strb	r2, [r3, #0]
1000d780:	3a0c      	subs	r2, #12
1000d782:	705a      	strb	r2, [r3, #1]
1000d784:	709a      	strb	r2, [r3, #2]
1000d786:	4a0a      	ldr	r2, [pc, #40]	; (1000d7b0 <gapc_security_cmd_handler+0x38>)
1000d788:	70d8      	strb	r0, [r3, #3]
1000d78a:	8810      	ldrh	r0, [r2, #0]
1000d78c:	8812      	ldrh	r2, [r2, #0]
1000d78e:	7118      	strb	r0, [r3, #4]
1000d790:	0a12      	lsrs	r2, r2, #8
1000d792:	715a      	strb	r2, [r3, #5]
1000d794:	220c      	movs	r2, #12
1000d796:	721a      	strb	r2, [r3, #8]
1000d798:	3a0a      	subs	r2, #10
1000d79a:	719a      	strb	r2, [r3, #6]
1000d79c:	2200      	movs	r2, #0
1000d79e:	7259      	strb	r1, [r3, #9]
1000d7a0:	71da      	strb	r2, [r3, #7]
1000d7a2:	1c18      	adds	r0, r3, #0
1000d7a4:	210a      	movs	r1, #10
1000d7a6:	4b03      	ldr	r3, [pc, #12]	; (1000d7b4 <gapc_security_cmd_handler+0x3c>)
1000d7a8:	4798      	blx	r3
1000d7aa:	bd08      	pop	{r3, pc}
1000d7ac:	10014484 	.word	0x10014484
1000d7b0:	10014114 	.word	0x10014114
1000d7b4:	1000cf6d 	.word	0x1000cf6d

1000d7b8 <gapc_encrypt_cmd_handler>:
1000d7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d7ba:	2500      	movs	r5, #0
1000d7bc:	b089      	sub	sp, #36	; 0x24
1000d7be:	9306      	str	r3, [sp, #24]
1000d7c0:	ab0e      	add	r3, sp, #56	; 0x38
1000d7c2:	781b      	ldrb	r3, [r3, #0]
1000d7c4:	1c17      	adds	r7, r2, #0
1000d7c6:	9307      	str	r3, [sp, #28]
1000d7c8:	ab0f      	add	r3, sp, #60	; 0x3c
1000d7ca:	781b      	ldrb	r3, [r3, #0]
1000d7cc:	4a19      	ldr	r2, [pc, #100]	; (1000d834 <gapc_encrypt_cmd_handler+0x7c>)
1000d7ce:	1c06      	adds	r6, r0, #0
1000d7d0:	9105      	str	r1, [sp, #20]
1000d7d2:	9300      	str	r3, [sp, #0]
1000d7d4:	9002      	str	r0, [sp, #8]
1000d7d6:	1c29      	adds	r1, r5, #0
1000d7d8:	1c2b      	adds	r3, r5, #0
1000d7da:	9501      	str	r5, [sp, #4]
1000d7dc:	1c10      	adds	r0, r2, #0
1000d7de:	4c16      	ldr	r4, [pc, #88]	; (1000d838 <gapc_encrypt_cmd_handler+0x80>)
1000d7e0:	47a0      	blx	r4
1000d7e2:	2316      	movs	r3, #22
1000d7e4:	4c15      	ldr	r4, [pc, #84]	; (1000d83c <gapc_encrypt_cmd_handler+0x84>)
1000d7e6:	9905      	ldr	r1, [sp, #20]
1000d7e8:	7023      	strb	r3, [r4, #0]
1000d7ea:	3b08      	subs	r3, #8
1000d7ec:	7063      	strb	r3, [r4, #1]
1000d7ee:	70a3      	strb	r3, [r4, #2]
1000d7f0:	4b13      	ldr	r3, [pc, #76]	; (1000d840 <gapc_encrypt_cmd_handler+0x88>)
1000d7f2:	70e6      	strb	r6, [r4, #3]
1000d7f4:	881a      	ldrh	r2, [r3, #0]
1000d7f6:	881b      	ldrh	r3, [r3, #0]
1000d7f8:	7122      	strb	r2, [r4, #4]
1000d7fa:	0a1b      	lsrs	r3, r3, #8
1000d7fc:	7163      	strb	r3, [r4, #5]
1000d7fe:	230b      	movs	r3, #11
1000d800:	4e10      	ldr	r6, [pc, #64]	; (1000d844 <gapc_encrypt_cmd_handler+0x8c>)
1000d802:	2210      	movs	r2, #16
1000d804:	4810      	ldr	r0, [pc, #64]	; (1000d848 <gapc_encrypt_cmd_handler+0x90>)
1000d806:	7223      	strb	r3, [r4, #8]
1000d808:	7265      	strb	r5, [r4, #9]
1000d80a:	47b0      	blx	r6
1000d80c:	0a3b      	lsrs	r3, r7, #8
1000d80e:	9906      	ldr	r1, [sp, #24]
1000d810:	2208      	movs	r2, #8
1000d812:	480e      	ldr	r0, [pc, #56]	; (1000d84c <gapc_encrypt_cmd_handler+0x94>)
1000d814:	76e3      	strb	r3, [r4, #27]
1000d816:	76a7      	strb	r7, [r4, #26]
1000d818:	47b0      	blx	r6
1000d81a:	466a      	mov	r2, sp
1000d81c:	7f12      	ldrb	r2, [r2, #28]
1000d81e:	1d63      	adds	r3, r4, #5
1000d820:	77da      	strb	r2, [r3, #31]
1000d822:	231d      	movs	r3, #29
1000d824:	1c20      	adds	r0, r4, #0
1000d826:	71a3      	strb	r3, [r4, #6]
1000d828:	2125      	movs	r1, #37	; 0x25
1000d82a:	4b09      	ldr	r3, [pc, #36]	; (1000d850 <gapc_encrypt_cmd_handler+0x98>)
1000d82c:	71e5      	strb	r5, [r4, #7]
1000d82e:	4798      	blx	r3
1000d830:	b009      	add	sp, #36	; 0x24
1000d832:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d834:	100133c0 	.word	0x100133c0
1000d838:	1000d271 	.word	0x1000d271
1000d83c:	10014484 	.word	0x10014484
1000d840:	10014114 	.word	0x10014114
1000d844:	1000fa1b 	.word	0x1000fa1b
1000d848:	1001448e 	.word	0x1001448e
1000d84c:	100144a0 	.word	0x100144a0
1000d850:	1000cf6d 	.word	0x1000cf6d

1000d854 <gapc_encrypt_req_ind>:
1000d854:	b508      	push	{r3, lr}
1000d856:	0a00      	lsrs	r0, r0, #8
1000d858:	8010      	strh	r0, [r2, #0]
1000d85a:	784b      	ldrb	r3, [r1, #1]
1000d85c:	7808      	ldrb	r0, [r1, #0]
1000d85e:	021b      	lsls	r3, r3, #8
1000d860:	4303      	orrs	r3, r0
1000d862:	8053      	strh	r3, [r2, #2]
1000d864:	1d10      	adds	r0, r2, #4
1000d866:	3102      	adds	r1, #2
1000d868:	2208      	movs	r2, #8
1000d86a:	4b01      	ldr	r3, [pc, #4]	; (1000d870 <gapc_encrypt_req_ind+0x1c>)
1000d86c:	4798      	blx	r3
1000d86e:	bd08      	pop	{r3, pc}
1000d870:	1000fa1b 	.word	0x1000fa1b

1000d874 <gapc_encrypt_cfm_handler>:
1000d874:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d876:	2500      	movs	r5, #0
1000d878:	b087      	sub	sp, #28
1000d87a:	9304      	str	r3, [sp, #16]
1000d87c:	ab0c      	add	r3, sp, #48	; 0x30
1000d87e:	781b      	ldrb	r3, [r3, #0]
1000d880:	1c17      	adds	r7, r2, #0
1000d882:	4a15      	ldr	r2, [pc, #84]	; (1000d8d8 <gapc_encrypt_cfm_handler+0x64>)
1000d884:	1c06      	adds	r6, r0, #0
1000d886:	9305      	str	r3, [sp, #20]
1000d888:	9100      	str	r1, [sp, #0]
1000d88a:	9002      	str	r0, [sp, #8]
1000d88c:	1c29      	adds	r1, r5, #0
1000d88e:	1c2b      	adds	r3, r5, #0
1000d890:	9501      	str	r5, [sp, #4]
1000d892:	1c10      	adds	r0, r2, #0
1000d894:	4c11      	ldr	r4, [pc, #68]	; (1000d8dc <gapc_encrypt_cfm_handler+0x68>)
1000d896:	47a0      	blx	r4
1000d898:	2318      	movs	r3, #24
1000d89a:	4c11      	ldr	r4, [pc, #68]	; (1000d8e0 <gapc_encrypt_cfm_handler+0x6c>)
1000d89c:	9904      	ldr	r1, [sp, #16]
1000d89e:	7023      	strb	r3, [r4, #0]
1000d8a0:	3b0a      	subs	r3, #10
1000d8a2:	7063      	strb	r3, [r4, #1]
1000d8a4:	70a3      	strb	r3, [r4, #2]
1000d8a6:	4b0f      	ldr	r3, [pc, #60]	; (1000d8e4 <gapc_encrypt_cfm_handler+0x70>)
1000d8a8:	480f      	ldr	r0, [pc, #60]	; (1000d8e8 <gapc_encrypt_cfm_handler+0x74>)
1000d8aa:	881a      	ldrh	r2, [r3, #0]
1000d8ac:	881b      	ldrh	r3, [r3, #0]
1000d8ae:	7122      	strb	r2, [r4, #4]
1000d8b0:	0a1b      	lsrs	r3, r3, #8
1000d8b2:	7163      	strb	r3, [r4, #5]
1000d8b4:	2210      	movs	r2, #16
1000d8b6:	4b0d      	ldr	r3, [pc, #52]	; (1000d8ec <gapc_encrypt_cfm_handler+0x78>)
1000d8b8:	70e6      	strb	r6, [r4, #3]
1000d8ba:	7227      	strb	r7, [r4, #8]
1000d8bc:	4798      	blx	r3
1000d8be:	466b      	mov	r3, sp
1000d8c0:	7d1b      	ldrb	r3, [r3, #20]
1000d8c2:	1c20      	adds	r0, r4, #0
1000d8c4:	7663      	strb	r3, [r4, #25]
1000d8c6:	2312      	movs	r3, #18
1000d8c8:	211a      	movs	r1, #26
1000d8ca:	71a3      	strb	r3, [r4, #6]
1000d8cc:	4b08      	ldr	r3, [pc, #32]	; (1000d8f0 <gapc_encrypt_cfm_handler+0x7c>)
1000d8ce:	71e5      	strb	r5, [r4, #7]
1000d8d0:	4798      	blx	r3
1000d8d2:	b007      	add	sp, #28
1000d8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d8d6:	46c0      	nop			; (mov r8, r8)
1000d8d8:	100133d0 	.word	0x100133d0
1000d8dc:	1000d271 	.word	0x1000d271
1000d8e0:	10014484 	.word	0x10014484
1000d8e4:	10014114 	.word	0x10014114
1000d8e8:	1001448d 	.word	0x1001448d
1000d8ec:	1000fa1b 	.word	0x1000fa1b
1000d8f0:	1000cf6d 	.word	0x1000cf6d

1000d8f4 <gapc_encrypt_ind>:
1000d8f4:	780b      	ldrb	r3, [r1, #0]
1000d8f6:	0a00      	lsrs	r0, r0, #8
1000d8f8:	70d3      	strb	r3, [r2, #3]
1000d8fa:	2300      	movs	r3, #0
1000d8fc:	8010      	strh	r0, [r2, #0]
1000d8fe:	7093      	strb	r3, [r2, #2]
1000d900:	4770      	bx	lr
	...

1000d904 <gapc_param_update_cfm_handler>:
1000d904:	b538      	push	{r3, r4, r5, lr}
1000d906:	2410      	movs	r4, #16
1000d908:	1c05      	adds	r5, r0, #0
1000d90a:	480e      	ldr	r0, [pc, #56]	; (1000d944 <gapc_param_update_cfm_handler+0x40>)
1000d90c:	7004      	strb	r4, [r0, #0]
1000d90e:	3c02      	subs	r4, #2
1000d910:	7044      	strb	r4, [r0, #1]
1000d912:	7084      	strb	r4, [r0, #2]
1000d914:	4c0c      	ldr	r4, [pc, #48]	; (1000d948 <gapc_param_update_cfm_handler+0x44>)
1000d916:	70c5      	strb	r5, [r0, #3]
1000d918:	8825      	ldrh	r5, [r4, #0]
1000d91a:	8824      	ldrh	r4, [r4, #0]
1000d91c:	72c3      	strb	r3, [r0, #11]
1000d91e:	0a1b      	lsrs	r3, r3, #8
1000d920:	0a24      	lsrs	r4, r4, #8
1000d922:	7303      	strb	r3, [r0, #12]
1000d924:	2305      	movs	r3, #5
1000d926:	7144      	strb	r4, [r0, #5]
1000d928:	2400      	movs	r4, #0
1000d92a:	7201      	strb	r1, [r0, #8]
1000d92c:	7242      	strb	r2, [r0, #9]
1000d92e:	7183      	strb	r3, [r0, #6]
1000d930:	0a12      	lsrs	r2, r2, #8
1000d932:	210d      	movs	r1, #13
1000d934:	4b05      	ldr	r3, [pc, #20]	; (1000d94c <gapc_param_update_cfm_handler+0x48>)
1000d936:	7105      	strb	r5, [r0, #4]
1000d938:	7282      	strb	r2, [r0, #10]
1000d93a:	71c4      	strb	r4, [r0, #7]
1000d93c:	4798      	blx	r3
1000d93e:	1c20      	adds	r0, r4, #0
1000d940:	bd38      	pop	{r3, r4, r5, pc}
1000d942:	46c0      	nop			; (mov r8, r8)
1000d944:	10014484 	.word	0x10014484
1000d948:	10014114 	.word	0x10014114
1000d94c:	1000cf6d 	.word	0x1000cf6d

1000d950 <gapc_param_updated_ind>:
1000d950:	2300      	movs	r3, #0
1000d952:	0a00      	lsrs	r0, r0, #8
1000d954:	8010      	strh	r0, [r2, #0]
1000d956:	7093      	strb	r3, [r2, #2]
1000d958:	784b      	ldrb	r3, [r1, #1]
1000d95a:	7808      	ldrb	r0, [r1, #0]
1000d95c:	021b      	lsls	r3, r3, #8
1000d95e:	4303      	orrs	r3, r0
1000d960:	8093      	strh	r3, [r2, #4]
1000d962:	78cb      	ldrb	r3, [r1, #3]
1000d964:	7888      	ldrb	r0, [r1, #2]
1000d966:	021b      	lsls	r3, r3, #8
1000d968:	4303      	orrs	r3, r0
1000d96a:	80d3      	strh	r3, [r2, #6]
1000d96c:	794b      	ldrb	r3, [r1, #5]
1000d96e:	7909      	ldrb	r1, [r1, #4]
1000d970:	021b      	lsls	r3, r3, #8
1000d972:	430b      	orrs	r3, r1
1000d974:	2007      	movs	r0, #7
1000d976:	8113      	strh	r3, [r2, #8]
1000d978:	4770      	bx	lr

1000d97a <gapc_param_updated_req_ind>:
1000d97a:	0a00      	lsrs	r0, r0, #8
1000d97c:	8010      	strh	r0, [r2, #0]
1000d97e:	784b      	ldrb	r3, [r1, #1]
1000d980:	7808      	ldrb	r0, [r1, #0]
1000d982:	021b      	lsls	r3, r3, #8
1000d984:	4303      	orrs	r3, r0
1000d986:	8053      	strh	r3, [r2, #2]
1000d988:	78cb      	ldrb	r3, [r1, #3]
1000d98a:	7888      	ldrb	r0, [r1, #2]
1000d98c:	021b      	lsls	r3, r3, #8
1000d98e:	4303      	orrs	r3, r0
1000d990:	8093      	strh	r3, [r2, #4]
1000d992:	794b      	ldrb	r3, [r1, #5]
1000d994:	7908      	ldrb	r0, [r1, #4]
1000d996:	021b      	lsls	r3, r3, #8
1000d998:	4303      	orrs	r3, r0
1000d99a:	80d3      	strh	r3, [r2, #6]
1000d99c:	79cb      	ldrb	r3, [r1, #7]
1000d99e:	7989      	ldrb	r1, [r1, #6]
1000d9a0:	021b      	lsls	r3, r3, #8
1000d9a2:	430b      	orrs	r3, r1
1000d9a4:	2008      	movs	r0, #8
1000d9a6:	8113      	strh	r3, [r2, #8]
1000d9a8:	4770      	bx	lr
	...

1000d9ac <gapc_dev_info_req_ind_handler>:
1000d9ac:	b508      	push	{r3, lr}
1000d9ae:	1c0b      	adds	r3, r1, #0
1000d9b0:	0a01      	lsrs	r1, r0, #8
1000d9b2:	8011      	strh	r1, [r2, #0]
1000d9b4:	7818      	ldrb	r0, [r3, #0]
1000d9b6:	7090      	strb	r0, [r2, #2]
1000d9b8:	2800      	cmp	r0, #0
1000d9ba:	d104      	bne.n	1000d9c6 <gapc_dev_info_req_ind_handler+0x1a>
1000d9bc:	4b03      	ldr	r3, [pc, #12]	; (1000d9cc <gapc_dev_info_req_ind_handler+0x20>)
1000d9be:	33aa      	adds	r3, #170	; 0xaa
1000d9c0:	881b      	ldrh	r3, [r3, #0]
1000d9c2:	2b00      	cmp	r3, #0
1000d9c4:	d001      	beq.n	1000d9ca <gapc_dev_info_req_ind_handler+0x1e>
1000d9c6:	4b02      	ldr	r3, [pc, #8]	; (1000d9d0 <gapc_dev_info_req_ind_handler+0x24>)
1000d9c8:	4798      	blx	r3
1000d9ca:	bd08      	pop	{r3, pc}
1000d9cc:	100141a6 	.word	0x100141a6
1000d9d0:	1000d07d 	.word	0x1000d07d

1000d9d4 <gapc_sec_req_ind>:
1000d9d4:	0a00      	lsrs	r0, r0, #8
1000d9d6:	8010      	strh	r0, [r2, #0]
1000d9d8:	7809      	ldrb	r1, [r1, #0]
1000d9da:	2301      	movs	r3, #1
1000d9dc:	1c08      	adds	r0, r1, #0
1000d9de:	0889      	lsrs	r1, r1, #2
1000d9e0:	4018      	ands	r0, r3
1000d9e2:	400b      	ands	r3, r1
1000d9e4:	70d0      	strb	r0, [r2, #3]
1000d9e6:	7113      	strb	r3, [r2, #4]
1000d9e8:	4770      	bx	lr

1000d9ea <gapc_sign_counter_ind_handler>:
1000d9ea:	0a00      	lsrs	r0, r0, #8
1000d9ec:	8010      	strh	r0, [r2, #0]
1000d9ee:	784b      	ldrb	r3, [r1, #1]
1000d9f0:	0218      	lsls	r0, r3, #8
1000d9f2:	788b      	ldrb	r3, [r1, #2]
1000d9f4:	041b      	lsls	r3, r3, #16
1000d9f6:	4303      	orrs	r3, r0
1000d9f8:	7808      	ldrb	r0, [r1, #0]
1000d9fa:	4303      	orrs	r3, r0
1000d9fc:	78c8      	ldrb	r0, [r1, #3]
1000d9fe:	0600      	lsls	r0, r0, #24
1000da00:	4303      	orrs	r3, r0
1000da02:	6053      	str	r3, [r2, #4]
1000da04:	794b      	ldrb	r3, [r1, #5]
1000da06:	0218      	lsls	r0, r3, #8
1000da08:	798b      	ldrb	r3, [r1, #6]
1000da0a:	041b      	lsls	r3, r3, #16
1000da0c:	4303      	orrs	r3, r0
1000da0e:	7908      	ldrb	r0, [r1, #4]
1000da10:	79c9      	ldrb	r1, [r1, #7]
1000da12:	4303      	orrs	r3, r0
1000da14:	0609      	lsls	r1, r1, #24
1000da16:	430b      	orrs	r3, r1
1000da18:	2000      	movs	r0, #0
1000da1a:	6093      	str	r3, [r2, #8]
1000da1c:	4770      	bx	lr
	...

1000da20 <gapc_peer_att_info_ind_handler>:
1000da20:	b510      	push	{r4, lr}
1000da22:	0a00      	lsrs	r0, r0, #8
1000da24:	8010      	strh	r0, [r2, #0]
1000da26:	7808      	ldrb	r0, [r1, #0]
1000da28:	7090      	strb	r0, [r2, #2]
1000da2a:	788b      	ldrb	r3, [r1, #2]
1000da2c:	784c      	ldrb	r4, [r1, #1]
1000da2e:	021b      	lsls	r3, r3, #8
1000da30:	4323      	orrs	r3, r4
1000da32:	8093      	strh	r3, [r2, #4]
1000da34:	2801      	cmp	r0, #1
1000da36:	d027      	beq.n	1000da88 <gapc_peer_att_info_ind_handler+0x68>
1000da38:	2800      	cmp	r0, #0
1000da3a:	d017      	beq.n	1000da6c <gapc_peer_att_info_ind_handler+0x4c>
1000da3c:	2802      	cmp	r0, #2
1000da3e:	d12a      	bne.n	1000da96 <gapc_peer_att_info_ind_handler+0x76>
1000da40:	790b      	ldrb	r3, [r1, #4]
1000da42:	78c8      	ldrb	r0, [r1, #3]
1000da44:	021b      	lsls	r3, r3, #8
1000da46:	4303      	orrs	r3, r0
1000da48:	8113      	strh	r3, [r2, #8]
1000da4a:	798b      	ldrb	r3, [r1, #6]
1000da4c:	7948      	ldrb	r0, [r1, #5]
1000da4e:	021b      	lsls	r3, r3, #8
1000da50:	4303      	orrs	r3, r0
1000da52:	80d3      	strh	r3, [r2, #6]
1000da54:	7a0b      	ldrb	r3, [r1, #8]
1000da56:	79c8      	ldrb	r0, [r1, #7]
1000da58:	021b      	lsls	r3, r3, #8
1000da5a:	4303      	orrs	r3, r0
1000da5c:	8193      	strh	r3, [r2, #12]
1000da5e:	7a8b      	ldrb	r3, [r1, #10]
1000da60:	7a49      	ldrb	r1, [r1, #9]
1000da62:	021b      	lsls	r3, r3, #8
1000da64:	430b      	orrs	r3, r1
1000da66:	8153      	strh	r3, [r2, #10]
1000da68:	2306      	movs	r3, #6
1000da6a:	e013      	b.n	1000da94 <gapc_peer_att_info_ind_handler+0x74>
1000da6c:	1c14      	adds	r4, r2, #0
1000da6e:	1c20      	adds	r0, r4, #0
1000da70:	790a      	ldrb	r2, [r1, #4]
1000da72:	78cb      	ldrb	r3, [r1, #3]
1000da74:	0212      	lsls	r2, r2, #8
1000da76:	431a      	orrs	r2, r3
1000da78:	80e2      	strh	r2, [r4, #6]
1000da7a:	4b07      	ldr	r3, [pc, #28]	; (1000da98 <gapc_peer_att_info_ind_handler+0x78>)
1000da7c:	3008      	adds	r0, #8
1000da7e:	3105      	adds	r1, #5
1000da80:	4798      	blx	r3
1000da82:	2302      	movs	r3, #2
1000da84:	70a3      	strb	r3, [r4, #2]
1000da86:	e006      	b.n	1000da96 <gapc_peer_att_info_ind_handler+0x76>
1000da88:	790b      	ldrb	r3, [r1, #4]
1000da8a:	78c9      	ldrb	r1, [r1, #3]
1000da8c:	021b      	lsls	r3, r3, #8
1000da8e:	430b      	orrs	r3, r1
1000da90:	80d3      	strh	r3, [r2, #6]
1000da92:	2305      	movs	r3, #5
1000da94:	7093      	strb	r3, [r2, #2]
1000da96:	bd10      	pop	{r4, pc}
1000da98:	1000fa1b 	.word	0x1000fa1b

1000da9c <gapc_con_channel_map_ind_handler>:
1000da9c:	b508      	push	{r3, lr}
1000da9e:	2300      	movs	r3, #0
1000daa0:	0a00      	lsrs	r0, r0, #8
1000daa2:	7013      	strb	r3, [r2, #0]
1000daa4:	8050      	strh	r0, [r2, #2]
1000daa6:	4b02      	ldr	r3, [pc, #8]	; (1000dab0 <gapc_con_channel_map_ind_handler+0x14>)
1000daa8:	1d10      	adds	r0, r2, #4
1000daaa:	2205      	movs	r2, #5
1000daac:	4798      	blx	r3
1000daae:	bd08      	pop	{r3, pc}
1000dab0:	1000fa1b 	.word	0x1000fa1b

1000dab4 <gapc_lecb_connected>:
1000dab4:	7843      	ldrb	r3, [r0, #1]
1000dab6:	7802      	ldrb	r2, [r0, #0]
1000dab8:	021b      	lsls	r3, r3, #8
1000daba:	4313      	orrs	r3, r2
1000dabc:	800b      	strh	r3, [r1, #0]
1000dabe:	78c3      	ldrb	r3, [r0, #3]
1000dac0:	7882      	ldrb	r2, [r0, #2]
1000dac2:	021b      	lsls	r3, r3, #8
1000dac4:	4313      	orrs	r3, r2
1000dac6:	804b      	strh	r3, [r1, #2]
1000dac8:	7943      	ldrb	r3, [r0, #5]
1000daca:	7902      	ldrb	r2, [r0, #4]
1000dacc:	021b      	lsls	r3, r3, #8
1000dace:	4313      	orrs	r3, r2
1000dad0:	808b      	strh	r3, [r1, #4]
1000dad2:	79c3      	ldrb	r3, [r0, #7]
1000dad4:	7982      	ldrb	r2, [r0, #6]
1000dad6:	021b      	lsls	r3, r3, #8
1000dad8:	4313      	orrs	r3, r2
1000dada:	80cb      	strh	r3, [r1, #6]
1000dadc:	2300      	movs	r3, #0
1000dade:	720b      	strb	r3, [r1, #8]
1000dae0:	4770      	bx	lr

1000dae2 <gapc_lecb_disconnected>:
1000dae2:	7843      	ldrb	r3, [r0, #1]
1000dae4:	7802      	ldrb	r2, [r0, #0]
1000dae6:	021b      	lsls	r3, r3, #8
1000dae8:	4313      	orrs	r3, r2
1000daea:	800b      	strh	r3, [r1, #0]
1000daec:	78c3      	ldrb	r3, [r0, #3]
1000daee:	7882      	ldrb	r2, [r0, #2]
1000daf0:	021b      	lsls	r3, r3, #8
1000daf2:	4313      	orrs	r3, r2
1000daf4:	804b      	strh	r3, [r1, #2]
1000daf6:	4770      	bx	lr

1000daf8 <gapc_lecb_connect_req_ind>:
1000daf8:	7843      	ldrb	r3, [r0, #1]
1000dafa:	7802      	ldrb	r2, [r0, #0]
1000dafc:	021b      	lsls	r3, r3, #8
1000dafe:	4313      	orrs	r3, r2
1000db00:	800b      	strh	r3, [r1, #0]
1000db02:	78c3      	ldrb	r3, [r0, #3]
1000db04:	7882      	ldrb	r2, [r0, #2]
1000db06:	021b      	lsls	r3, r3, #8
1000db08:	4313      	orrs	r3, r2
1000db0a:	804b      	strh	r3, [r1, #2]
1000db0c:	7943      	ldrb	r3, [r0, #5]
1000db0e:	7902      	ldrb	r2, [r0, #4]
1000db10:	021b      	lsls	r3, r3, #8
1000db12:	4313      	orrs	r3, r2
1000db14:	808b      	strh	r3, [r1, #4]
1000db16:	79c3      	ldrb	r3, [r0, #7]
1000db18:	7982      	ldrb	r2, [r0, #6]
1000db1a:	021b      	lsls	r3, r3, #8
1000db1c:	4313      	orrs	r3, r2
1000db1e:	80cb      	strh	r3, [r1, #6]
1000db20:	4770      	bx	lr

1000db22 <gapc_lecb_add_credit_resp_handler>:
1000db22:	7843      	ldrb	r3, [r0, #1]
1000db24:	7802      	ldrb	r2, [r0, #0]
1000db26:	021b      	lsls	r3, r3, #8
1000db28:	4313      	orrs	r3, r2
1000db2a:	800b      	strh	r3, [r1, #0]
1000db2c:	78c3      	ldrb	r3, [r0, #3]
1000db2e:	7882      	ldrb	r2, [r0, #2]
1000db30:	021b      	lsls	r3, r3, #8
1000db32:	4313      	orrs	r3, r2
1000db34:	804b      	strh	r3, [r1, #2]
1000db36:	7943      	ldrb	r3, [r0, #5]
1000db38:	7902      	ldrb	r2, [r0, #4]
1000db3a:	021b      	lsls	r3, r3, #8
1000db3c:	4313      	orrs	r3, r2
1000db3e:	808b      	strh	r3, [r1, #4]
1000db40:	4770      	bx	lr
	...

1000db44 <gapm_reset_req_handler>:
1000db44:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000db46:	466b      	mov	r3, sp
1000db48:	4915      	ldr	r1, [pc, #84]	; (1000dba0 <gapm_reset_req_handler+0x5c>)
1000db4a:	4816      	ldr	r0, [pc, #88]	; (1000dba4 <gapm_reset_req_handler+0x60>)
1000db4c:	880c      	ldrh	r4, [r1, #0]
1000db4e:	8809      	ldrh	r1, [r1, #0]
1000db50:	1ddd      	adds	r5, r3, #7
1000db52:	0a09      	lsrs	r1, r1, #8
1000db54:	2300      	movs	r3, #0
1000db56:	2202      	movs	r2, #2
1000db58:	7141      	strb	r1, [r0, #5]
1000db5a:	26d0      	movs	r6, #208	; 0xd0
1000db5c:	2101      	movs	r1, #1
1000db5e:	7104      	strb	r4, [r0, #4]
1000db60:	4c11      	ldr	r4, [pc, #68]	; (1000dba8 <gapm_reset_req_handler+0x64>)
1000db62:	702b      	strb	r3, [r5, #0]
1000db64:	7002      	strb	r2, [r0, #0]
1000db66:	70c3      	strb	r3, [r0, #3]
1000db68:	320b      	adds	r2, #11
1000db6a:	7201      	strb	r1, [r0, #8]
1000db6c:	7181      	strb	r1, [r0, #6]
1000db6e:	71c3      	strb	r3, [r0, #7]
1000db70:	3108      	adds	r1, #8
1000db72:	4b0e      	ldr	r3, [pc, #56]	; (1000dbac <gapm_reset_req_handler+0x68>)
1000db74:	0136      	lsls	r6, r6, #4
1000db76:	7042      	strb	r2, [r0, #1]
1000db78:	7082      	strb	r2, [r0, #2]
1000db7a:	80a2      	strh	r2, [r4, #4]
1000db7c:	8026      	strh	r6, [r4, #0]
1000db7e:	4798      	blx	r3
1000db80:	1c28      	adds	r0, r5, #0
1000db82:	4b0b      	ldr	r3, [pc, #44]	; (1000dbb0 <gapm_reset_req_handler+0x6c>)
1000db84:	4798      	blx	r3
1000db86:	782b      	ldrb	r3, [r5, #0]
1000db88:	20e2      	movs	r0, #226	; 0xe2
1000db8a:	2b00      	cmp	r3, #0
1000db8c:	d106      	bne.n	1000db9c <gapm_reset_req_handler+0x58>
1000db8e:	68a3      	ldr	r3, [r4, #8]
1000db90:	20e2      	movs	r0, #226	; 0xe2
1000db92:	781a      	ldrb	r2, [r3, #0]
1000db94:	785b      	ldrb	r3, [r3, #1]
1000db96:	2a01      	cmp	r2, #1
1000db98:	d100      	bne.n	1000db9c <gapm_reset_req_handler+0x58>
1000db9a:	1c18      	adds	r0, r3, #0
1000db9c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000db9e:	46c0      	nop			; (mov r8, r8)
1000dba0:	10014114 	.word	0x10014114
1000dba4:	10014484 	.word	0x10014484
1000dba8:	10014108 	.word	0x10014108
1000dbac:	1000cf6d 	.word	0x1000cf6d
1000dbb0:	1000cfd1 	.word	0x1000cfd1

1000dbb4 <gapm_set_dev_config_cmd_handler>:
1000dbb4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dbb6:	b089      	sub	sp, #36	; 0x24
1000dbb8:	9303      	str	r3, [sp, #12]
1000dbba:	ab0e      	add	r3, sp, #56	; 0x38
1000dbbc:	781b      	ldrb	r3, [r3, #0]
1000dbbe:	4c37      	ldr	r4, [pc, #220]	; (1000dc9c <gapm_set_dev_config_cmd_handler+0xe8>)
1000dbc0:	9304      	str	r3, [sp, #16]
1000dbc2:	ab0f      	add	r3, sp, #60	; 0x3c
1000dbc4:	781b      	ldrb	r3, [r3, #0]
1000dbc6:	270d      	movs	r7, #13
1000dbc8:	9305      	str	r3, [sp, #20]
1000dbca:	ab10      	add	r3, sp, #64	; 0x40
1000dbcc:	881b      	ldrh	r3, [r3, #0]
1000dbce:	72a1      	strb	r1, [r4, #10]
1000dbd0:	9300      	str	r3, [sp, #0]
1000dbd2:	ab11      	add	r3, sp, #68	; 0x44
1000dbd4:	881b      	ldrh	r3, [r3, #0]
1000dbd6:	0a09      	lsrs	r1, r1, #8
1000dbd8:	9301      	str	r3, [sp, #4]
1000dbda:	ab12      	add	r3, sp, #72	; 0x48
1000dbdc:	881b      	ldrh	r3, [r3, #0]
1000dbde:	7260      	strb	r0, [r4, #9]
1000dbe0:	9302      	str	r3, [sp, #8]
1000dbe2:	ab06      	add	r3, sp, #24
1000dbe4:	1dde      	adds	r6, r3, #7
1000dbe6:	2300      	movs	r3, #0
1000dbe8:	7033      	strb	r3, [r6, #0]
1000dbea:	2304      	movs	r3, #4
1000dbec:	7023      	strb	r3, [r4, #0]
1000dbee:	2300      	movs	r3, #0
1000dbf0:	70e3      	strb	r3, [r4, #3]
1000dbf2:	4b2b      	ldr	r3, [pc, #172]	; (1000dca0 <gapm_set_dev_config_cmd_handler+0xec>)
1000dbf4:	72e1      	strb	r1, [r4, #11]
1000dbf6:	881d      	ldrh	r5, [r3, #0]
1000dbf8:	881b      	ldrh	r3, [r3, #0]
1000dbfa:	1c11      	adds	r1, r2, #0
1000dbfc:	0a1b      	lsrs	r3, r3, #8
1000dbfe:	7163      	strb	r3, [r4, #5]
1000dc00:	2303      	movs	r3, #3
1000dc02:	7125      	strb	r5, [r4, #4]
1000dc04:	2206      	movs	r2, #6
1000dc06:	4d27      	ldr	r5, [pc, #156]	; (1000dca4 <gapm_set_dev_config_cmd_handler+0xf0>)
1000dc08:	4827      	ldr	r0, [pc, #156]	; (1000dca8 <gapm_set_dev_config_cmd_handler+0xf4>)
1000dc0a:	7223      	strb	r3, [r4, #8]
1000dc0c:	7067      	strb	r7, [r4, #1]
1000dc0e:	70a7      	strb	r7, [r4, #2]
1000dc10:	47a8      	blx	r5
1000dc12:	9903      	ldr	r1, [sp, #12]
1000dc14:	2210      	movs	r2, #16
1000dc16:	4825      	ldr	r0, [pc, #148]	; (1000dcac <gapm_set_dev_config_cmd_handler+0xf8>)
1000dc18:	47a8      	blx	r5
1000dc1a:	466a      	mov	r2, sp
1000dc1c:	7c12      	ldrb	r2, [r2, #16]
1000dc1e:	1ce3      	adds	r3, r4, #3
1000dc20:	77da      	strb	r2, [r3, #31]
1000dc22:	466a      	mov	r2, sp
1000dc24:	7d12      	ldrb	r2, [r2, #20]
1000dc26:	1d23      	adds	r3, r4, #4
1000dc28:	77da      	strb	r2, [r3, #31]
1000dc2a:	466a      	mov	r2, sp
1000dc2c:	7812      	ldrb	r2, [r2, #0]
1000dc2e:	1d63      	adds	r3, r4, #5
1000dc30:	77da      	strb	r2, [r3, #31]
1000dc32:	9b00      	ldr	r3, [sp, #0]
1000dc34:	1da2      	adds	r2, r4, #6
1000dc36:	0a1b      	lsrs	r3, r3, #8
1000dc38:	77d3      	strb	r3, [r2, #31]
1000dc3a:	466a      	mov	r2, sp
1000dc3c:	7912      	ldrb	r2, [r2, #4]
1000dc3e:	1de3      	adds	r3, r4, #7
1000dc40:	77da      	strb	r2, [r3, #31]
1000dc42:	1c22      	adds	r2, r4, #0
1000dc44:	9b01      	ldr	r3, [sp, #4]
1000dc46:	3208      	adds	r2, #8
1000dc48:	0a1b      	lsrs	r3, r3, #8
1000dc4a:	77d3      	strb	r3, [r2, #31]
1000dc4c:	466a      	mov	r2, sp
1000dc4e:	1c23      	adds	r3, r4, #0
1000dc50:	7a12      	ldrb	r2, [r2, #8]
1000dc52:	3328      	adds	r3, #40	; 0x28
1000dc54:	701a      	strb	r2, [r3, #0]
1000dc56:	1c22      	adds	r2, r4, #0
1000dc58:	9b02      	ldr	r3, [sp, #8]
1000dc5a:	3229      	adds	r2, #41	; 0x29
1000dc5c:	0a1b      	lsrs	r3, r3, #8
1000dc5e:	7013      	strb	r3, [r2, #0]
1000dc60:	23d0      	movs	r3, #208	; 0xd0
1000dc62:	4d13      	ldr	r5, [pc, #76]	; (1000dcb0 <gapm_set_dev_config_cmd_handler+0xfc>)
1000dc64:	011b      	lsls	r3, r3, #4
1000dc66:	802b      	strh	r3, [r5, #0]
1000dc68:	2322      	movs	r3, #34	; 0x22
1000dc6a:	71a3      	strb	r3, [r4, #6]
1000dc6c:	2300      	movs	r3, #0
1000dc6e:	212a      	movs	r1, #42	; 0x2a
1000dc70:	71e3      	strb	r3, [r4, #7]
1000dc72:	1c20      	adds	r0, r4, #0
1000dc74:	4b0f      	ldr	r3, [pc, #60]	; (1000dcb4 <gapm_set_dev_config_cmd_handler+0x100>)
1000dc76:	80af      	strh	r7, [r5, #4]
1000dc78:	4798      	blx	r3
1000dc7a:	1c30      	adds	r0, r6, #0
1000dc7c:	4b0e      	ldr	r3, [pc, #56]	; (1000dcb8 <gapm_set_dev_config_cmd_handler+0x104>)
1000dc7e:	4798      	blx	r3
1000dc80:	7833      	ldrb	r3, [r6, #0]
1000dc82:	20e2      	movs	r0, #226	; 0xe2
1000dc84:	2b00      	cmp	r3, #0
1000dc86:	d106      	bne.n	1000dc96 <gapm_set_dev_config_cmd_handler+0xe2>
1000dc88:	68ab      	ldr	r3, [r5, #8]
1000dc8a:	20e2      	movs	r0, #226	; 0xe2
1000dc8c:	781a      	ldrb	r2, [r3, #0]
1000dc8e:	785b      	ldrb	r3, [r3, #1]
1000dc90:	2a03      	cmp	r2, #3
1000dc92:	d100      	bne.n	1000dc96 <gapm_set_dev_config_cmd_handler+0xe2>
1000dc94:	1c18      	adds	r0, r3, #0
1000dc96:	b009      	add	sp, #36	; 0x24
1000dc98:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dc9a:	46c0      	nop			; (mov r8, r8)
1000dc9c:	10014484 	.word	0x10014484
1000dca0:	10014114 	.word	0x10014114
1000dca4:	1000fa1b 	.word	0x1000fa1b
1000dca8:	10014490 	.word	0x10014490
1000dcac:	10014496 	.word	0x10014496
1000dcb0:	10014108 	.word	0x10014108
1000dcb4:	1000cf6d 	.word	0x1000cf6d
1000dcb8:	1000cfd1 	.word	0x1000cfd1

1000dcbc <gapm_get_dev_config_cmd_handler>:
1000dcbc:	4684      	mov	ip, r0
1000dcbe:	4663      	mov	r3, ip
1000dcc0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dcc2:	b085      	sub	sp, #20
1000dcc4:	9100      	str	r1, [sp, #0]
1000dcc6:	20cf      	movs	r0, #207	; 0xcf
1000dcc8:	2b01      	cmp	r3, #1
1000dcca:	d854      	bhi.n	1000dd76 <gapm_get_dev_config_cmd_handler+0xba>
1000dccc:	2900      	cmp	r1, #0
1000dcce:	d052      	beq.n	1000dd76 <gapm_get_dev_config_cmd_handler+0xba>
1000dcd0:	2200      	movs	r2, #0
1000dcd2:	492a      	ldr	r1, [pc, #168]	; (1000dd7c <gapm_get_dev_config_cmd_handler+0xc0>)
1000dcd4:	ab02      	add	r3, sp, #8
1000dcd6:	880c      	ldrh	r4, [r1, #0]
1000dcd8:	8809      	ldrh	r1, [r1, #0]
1000dcda:	1d9f      	adds	r7, r3, #6
1000dcdc:	719a      	strb	r2, [r3, #6]
1000dcde:	4b28      	ldr	r3, [pc, #160]	; (1000dd80 <gapm_get_dev_config_cmd_handler+0xc4>)
1000dce0:	0a09      	lsrs	r1, r1, #8
1000dce2:	250d      	movs	r5, #13
1000dce4:	2606      	movs	r6, #6
1000dce6:	7159      	strb	r1, [r3, #5]
1000dce8:	4661      	mov	r1, ip
1000dcea:	701e      	strb	r6, [r3, #0]
1000dcec:	705d      	strb	r5, [r3, #1]
1000dcee:	709d      	strb	r5, [r3, #2]
1000dcf0:	70da      	strb	r2, [r3, #3]
1000dcf2:	711c      	strb	r4, [r3, #4]
1000dcf4:	2901      	cmp	r1, #1
1000dcf6:	d13e      	bne.n	1000dd76 <gapm_get_dev_config_cmd_handler+0xba>
1000dcf8:	21d0      	movs	r1, #208	; 0xd0
1000dcfa:	4c22      	ldr	r4, [pc, #136]	; (1000dd84 <gapm_get_dev_config_cmd_handler+0xc8>)
1000dcfc:	0109      	lsls	r1, r1, #4
1000dcfe:	8061      	strh	r1, [r4, #2]
1000dd00:	4921      	ldr	r1, [pc, #132]	; (1000dd88 <gapm_get_dev_config_cmd_handler+0xcc>)
1000dd02:	71da      	strb	r2, [r3, #7]
1000dd04:	8021      	strh	r1, [r4, #0]
1000dd06:	4661      	mov	r1, ip
1000dd08:	721e      	strb	r6, [r3, #8]
1000dd0a:	7199      	strb	r1, [r3, #6]
1000dd0c:	1c18      	adds	r0, r3, #0
1000dd0e:	2109      	movs	r1, #9
1000dd10:	4b1e      	ldr	r3, [pc, #120]	; (1000dd8c <gapm_get_dev_config_cmd_handler+0xd0>)
1000dd12:	80a5      	strh	r5, [r4, #4]
1000dd14:	4798      	blx	r3
1000dd16:	1c38      	adds	r0, r7, #0
1000dd18:	4b1d      	ldr	r3, [pc, #116]	; (1000dd90 <gapm_get_dev_config_cmd_handler+0xd4>)
1000dd1a:	4798      	blx	r3
1000dd1c:	783b      	ldrb	r3, [r7, #0]
1000dd1e:	20e2      	movs	r0, #226	; 0xe2
1000dd20:	9301      	str	r3, [sp, #4]
1000dd22:	2b00      	cmp	r3, #0
1000dd24:	d127      	bne.n	1000dd76 <gapm_get_dev_config_cmd_handler+0xba>
1000dd26:	8821      	ldrh	r1, [r4, #0]
1000dd28:	4a1a      	ldr	r2, [pc, #104]	; (1000dd94 <gapm_get_dev_config_cmd_handler+0xd8>)
1000dd2a:	68a7      	ldr	r7, [r4, #8]
1000dd2c:	3b01      	subs	r3, #1
1000dd2e:	4291      	cmp	r1, r2
1000dd30:	d001      	beq.n	1000dd36 <gapm_get_dev_config_cmd_handler+0x7a>
1000dd32:	8023      	strh	r3, [r4, #0]
1000dd34:	e01a      	b.n	1000dd6c <gapm_get_dev_config_cmd_handler+0xb0>
1000dd36:	8063      	strh	r3, [r4, #2]
1000dd38:	9b00      	ldr	r3, [sp, #0]
1000dd3a:	1c39      	adds	r1, r7, #0
1000dd3c:	1c58      	adds	r0, r3, #1
1000dd3e:	1c32      	adds	r2, r6, #0
1000dd40:	4b15      	ldr	r3, [pc, #84]	; (1000dd98 <gapm_get_dev_config_cmd_handler+0xdc>)
1000dd42:	4798      	blx	r3
1000dd44:	79bb      	ldrb	r3, [r7, #6]
1000dd46:	9a00      	ldr	r2, [sp, #0]
1000dd48:	7013      	strb	r3, [r2, #0]
1000dd4a:	23d0      	movs	r3, #208	; 0xd0
1000dd4c:	011b      	lsls	r3, r3, #4
1000dd4e:	8023      	strh	r3, [r4, #0]
1000dd50:	ab02      	add	r3, sp, #8
1000dd52:	80a5      	strh	r5, [r4, #4]
1000dd54:	1ddd      	adds	r5, r3, #7
1000dd56:	466b      	mov	r3, sp
1000dd58:	791b      	ldrb	r3, [r3, #4]
1000dd5a:	1c28      	adds	r0, r5, #0
1000dd5c:	702b      	strb	r3, [r5, #0]
1000dd5e:	4b0c      	ldr	r3, [pc, #48]	; (1000dd90 <gapm_get_dev_config_cmd_handler+0xd4>)
1000dd60:	4798      	blx	r3
1000dd62:	782b      	ldrb	r3, [r5, #0]
1000dd64:	20d0      	movs	r0, #208	; 0xd0
1000dd66:	2b00      	cmp	r3, #0
1000dd68:	d105      	bne.n	1000dd76 <gapm_get_dev_config_cmd_handler+0xba>
1000dd6a:	68a7      	ldr	r7, [r4, #8]
1000dd6c:	783b      	ldrb	r3, [r7, #0]
1000dd6e:	7878      	ldrb	r0, [r7, #1]
1000dd70:	2b06      	cmp	r3, #6
1000dd72:	d000      	beq.n	1000dd76 <gapm_get_dev_config_cmd_handler+0xba>
1000dd74:	20e2      	movs	r0, #226	; 0xe2
1000dd76:	b005      	add	sp, #20
1000dd78:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dd7a:	46c0      	nop			; (mov r8, r8)
1000dd7c:	10014114 	.word	0x10014114
1000dd80:	10014484 	.word	0x10014484
1000dd84:	10014108 	.word	0x10014108
1000dd88:	00000d08 	.word	0x00000d08
1000dd8c:	1000cf6d 	.word	0x1000cf6d
1000dd90:	1000cfd1 	.word	0x1000cfd1
1000dd94:	0000ffff 	.word	0x0000ffff
1000dd98:	1000fa1b 	.word	0x1000fa1b

1000dd9c <gapm_cancel_cmd_handler>:
1000dd9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000dd9e:	4916      	ldr	r1, [pc, #88]	; (1000ddf8 <gapm_cancel_cmd_handler+0x5c>)
1000dda0:	4816      	ldr	r0, [pc, #88]	; (1000ddfc <gapm_cancel_cmd_handler+0x60>)
1000dda2:	880c      	ldrh	r4, [r1, #0]
1000dda4:	8809      	ldrh	r1, [r1, #0]
1000dda6:	466b      	mov	r3, sp
1000dda8:	0a09      	lsrs	r1, r1, #8
1000ddaa:	7141      	strb	r1, [r0, #5]
1000ddac:	2102      	movs	r1, #2
1000ddae:	2203      	movs	r2, #3
1000ddb0:	7201      	strb	r1, [r0, #8]
1000ddb2:	21d0      	movs	r1, #208	; 0xd0
1000ddb4:	1ddd      	adds	r5, r3, #7
1000ddb6:	2300      	movs	r3, #0
1000ddb8:	7104      	strb	r4, [r0, #4]
1000ddba:	4c11      	ldr	r4, [pc, #68]	; (1000de00 <gapm_cancel_cmd_handler+0x64>)
1000ddbc:	7002      	strb	r2, [r0, #0]
1000ddbe:	0109      	lsls	r1, r1, #4
1000ddc0:	320a      	adds	r2, #10
1000ddc2:	702b      	strb	r3, [r5, #0]
1000ddc4:	7042      	strb	r2, [r0, #1]
1000ddc6:	7082      	strb	r2, [r0, #2]
1000ddc8:	70c3      	strb	r3, [r0, #3]
1000ddca:	8021      	strh	r1, [r4, #0]
1000ddcc:	80a2      	strh	r2, [r4, #4]
1000ddce:	71c3      	strb	r3, [r0, #7]
1000ddd0:	3a0c      	subs	r2, #12
1000ddd2:	2109      	movs	r1, #9
1000ddd4:	4b0b      	ldr	r3, [pc, #44]	; (1000de04 <gapm_cancel_cmd_handler+0x68>)
1000ddd6:	7182      	strb	r2, [r0, #6]
1000ddd8:	4798      	blx	r3
1000ddda:	1c28      	adds	r0, r5, #0
1000dddc:	4b0a      	ldr	r3, [pc, #40]	; (1000de08 <gapm_cancel_cmd_handler+0x6c>)
1000ddde:	4798      	blx	r3
1000dde0:	7828      	ldrb	r0, [r5, #0]
1000dde2:	2800      	cmp	r0, #0
1000dde4:	d001      	beq.n	1000ddea <gapm_cancel_cmd_handler+0x4e>
1000dde6:	20e2      	movs	r0, #226	; 0xe2
1000dde8:	e004      	b.n	1000ddf4 <gapm_cancel_cmd_handler+0x58>
1000ddea:	68a3      	ldr	r3, [r4, #8]
1000ddec:	785b      	ldrb	r3, [r3, #1]
1000ddee:	2b44      	cmp	r3, #68	; 0x44
1000ddf0:	d000      	beq.n	1000ddf4 <gapm_cancel_cmd_handler+0x58>
1000ddf2:	1c18      	adds	r0, r3, #0
1000ddf4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000ddf6:	46c0      	nop			; (mov r8, r8)
1000ddf8:	10014114 	.word	0x10014114
1000ddfc:	10014484 	.word	0x10014484
1000de00:	10014108 	.word	0x10014108
1000de04:	1000cf6d 	.word	0x1000cf6d
1000de08:	1000cfd1 	.word	0x1000cfd1

1000de0c <gapm_dev_bdaddr_ind_handler>:
1000de0c:	b538      	push	{r3, r4, r5, lr}
1000de0e:	1c05      	adds	r5, r0, #0
1000de10:	1c0c      	adds	r4, r1, #0
1000de12:	1c48      	adds	r0, r1, #1
1000de14:	2206      	movs	r2, #6
1000de16:	1c29      	adds	r1, r5, #0
1000de18:	4b02      	ldr	r3, [pc, #8]	; (1000de24 <gapm_dev_bdaddr_ind_handler+0x18>)
1000de1a:	4798      	blx	r3
1000de1c:	79ab      	ldrb	r3, [r5, #6]
1000de1e:	2000      	movs	r0, #0
1000de20:	7023      	strb	r3, [r4, #0]
1000de22:	bd38      	pop	{r3, r4, r5, pc}
1000de24:	1000fa1b 	.word	0x1000fa1b

1000de28 <gapm_cmp_evt>:
1000de28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000de2a:	7803      	ldrb	r3, [r0, #0]
1000de2c:	7845      	ldrb	r5, [r0, #1]
1000de2e:	3b0c      	subs	r3, #12
1000de30:	1e18      	subs	r0, r3, #0
1000de32:	280b      	cmp	r0, #11
1000de34:	d900      	bls.n	1000de38 <gapm_cmp_evt+0x10>
1000de36:	e08d      	b.n	1000df54 <gapm_cmp_evt+0x12c>
1000de38:	1c0c      	adds	r4, r1, #0
1000de3a:	f000 fd5f 	bl	1000e8fc <__gnu_thumb1_case_uqi>
1000de3e:	1952      	.short	0x1952
1000de40:	068b1919 	.word	0x068b1919
1000de44:	8b595906 	.word	0x8b595906
1000de48:	0d8b      	.short	0x0d8b
1000de4a:	2300      	movs	r3, #0
1000de4c:	2d45      	cmp	r5, #69	; 0x45
1000de4e:	d000      	beq.n	1000de52 <gapm_cmp_evt+0x2a>
1000de50:	1c2b      	adds	r3, r5, #0
1000de52:	7023      	strb	r3, [r4, #0]
1000de54:	2002      	movs	r0, #2
1000de56:	e07e      	b.n	1000df56 <gapm_cmp_evt+0x12e>
1000de58:	203b      	movs	r0, #59	; 0x3b
1000de5a:	2d00      	cmp	r5, #0
1000de5c:	d100      	bne.n	1000de60 <gapm_cmp_evt+0x38>
1000de5e:	e07a      	b.n	1000df56 <gapm_cmp_evt+0x12e>
1000de60:	700d      	strb	r5, [r1, #0]
1000de62:	1c48      	adds	r0, r1, #1
1000de64:	2210      	movs	r2, #16
1000de66:	2100      	movs	r1, #0
1000de68:	4b3b      	ldr	r3, [pc, #236]	; (1000df58 <gapm_cmp_evt+0x130>)
1000de6a:	4798      	blx	r3
1000de6c:	200f      	movs	r0, #15
1000de6e:	e072      	b.n	1000df56 <gapm_cmp_evt+0x12e>
1000de70:	2d00      	cmp	r5, #0
1000de72:	d134      	bne.n	1000dede <gapm_cmp_evt+0xb6>
1000de74:	4b39      	ldr	r3, [pc, #228]	; (1000df5c <gapm_cmp_evt+0x134>)
1000de76:	4798      	blx	r3
1000de78:	1e43      	subs	r3, r0, #1
1000de7a:	b2db      	uxtb	r3, r3
1000de7c:	1c28      	adds	r0, r5, #0
1000de7e:	2b06      	cmp	r3, #6
1000de80:	d869      	bhi.n	1000df56 <gapm_cmp_evt+0x12e>
1000de82:	466b      	mov	r3, sp
1000de84:	4e36      	ldr	r6, [pc, #216]	; (1000df60 <gapm_cmp_evt+0x138>)
1000de86:	1dd9      	adds	r1, r3, #7
1000de88:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000de8a:	4b36      	ldr	r3, [pc, #216]	; (1000df64 <gapm_cmp_evt+0x13c>)
1000de8c:	4798      	blx	r3
1000de8e:	2312      	movs	r3, #18
1000de90:	4358      	muls	r0, r3
1000de92:	4935      	ldr	r1, [pc, #212]	; (1000df68 <gapm_cmp_evt+0x140>)
1000de94:	1809      	adds	r1, r1, r0
1000de96:	1c0b      	adds	r3, r1, #0
1000de98:	894a      	ldrh	r2, [r1, #10]
1000de9a:	3308      	adds	r3, #8
1000de9c:	8122      	strh	r2, [r4, #8]
1000de9e:	784f      	ldrb	r7, [r1, #1]
1000dea0:	72a5      	strb	r5, [r4, #10]
1000dea2:	7027      	strb	r7, [r4, #0]
1000dea4:	898a      	ldrh	r2, [r1, #12]
1000dea6:	1c60      	adds	r0, r4, #1
1000dea8:	81a2      	strh	r2, [r4, #12]
1000deaa:	88db      	ldrh	r3, [r3, #6]
1000deac:	3102      	adds	r1, #2
1000deae:	81e3      	strh	r3, [r4, #14]
1000deb0:	89cb      	ldrh	r3, [r1, #14]
1000deb2:	2206      	movs	r2, #6
1000deb4:	8223      	strh	r3, [r4, #16]
1000deb6:	4b2d      	ldr	r3, [pc, #180]	; (1000df6c <gapm_cmp_evt+0x144>)
1000deb8:	4798      	blx	r3
1000deba:	2f00      	cmp	r7, #0
1000debc:	d00a      	beq.n	1000ded4 <gapm_cmp_evt+0xac>
1000debe:	79a3      	ldrb	r3, [r4, #6]
1000dec0:	223f      	movs	r2, #63	; 0x3f
1000dec2:	1c19      	adds	r1, r3, #0
1000dec4:	3501      	adds	r5, #1
1000dec6:	4391      	bics	r1, r2
1000dec8:	29c0      	cmp	r1, #192	; 0xc0
1000deca:	d003      	beq.n	1000ded4 <gapm_cmp_evt+0xac>
1000decc:	065b      	lsls	r3, r3, #25
1000dece:	0fdb      	lsrs	r3, r3, #31
1000ded0:	3502      	adds	r5, #2
1000ded2:	1aed      	subs	r5, r5, r3
1000ded4:	2301      	movs	r3, #1
1000ded6:	425b      	negs	r3, r3
1000ded8:	7025      	strb	r5, [r4, #0]
1000deda:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000dedc:	e038      	b.n	1000df50 <gapm_cmp_evt+0x128>
1000dede:	700d      	strb	r5, [r1, #0]
1000dee0:	e004      	b.n	1000deec <gapm_cmp_evt+0xc4>
1000dee2:	2300      	movs	r3, #0
1000dee4:	2d45      	cmp	r5, #69	; 0x45
1000dee6:	d000      	beq.n	1000deea <gapm_cmp_evt+0xc2>
1000dee8:	1c2b      	adds	r3, r5, #0
1000deea:	7023      	strb	r3, [r4, #0]
1000deec:	2003      	movs	r0, #3
1000deee:	e032      	b.n	1000df56 <gapm_cmp_evt+0x12e>
1000def0:	4e1b      	ldr	r6, [pc, #108]	; (1000df60 <gapm_cmp_evt+0x138>)
1000def2:	2100      	movs	r1, #0
1000def4:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000def6:	4b1b      	ldr	r3, [pc, #108]	; (1000df64 <gapm_cmp_evt+0x13c>)
1000def8:	4798      	blx	r3
1000defa:	2807      	cmp	r0, #7
1000defc:	d818      	bhi.n	1000df30 <gapm_cmp_evt+0x108>
1000defe:	2301      	movs	r3, #1
1000df00:	425b      	negs	r3, r3
1000df02:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000df04:	3313      	adds	r3, #19
1000df06:	4358      	muls	r0, r3
1000df08:	4917      	ldr	r1, [pc, #92]	; (1000df68 <gapm_cmp_evt+0x140>)
1000df0a:	1809      	adds	r1, r1, r0
1000df0c:	1c0b      	adds	r3, r1, #0
1000df0e:	894a      	ldrh	r2, [r1, #10]
1000df10:	3308      	adds	r3, #8
1000df12:	8122      	strh	r2, [r4, #8]
1000df14:	784a      	ldrb	r2, [r1, #1]
1000df16:	72a5      	strb	r5, [r4, #10]
1000df18:	7022      	strb	r2, [r4, #0]
1000df1a:	898a      	ldrh	r2, [r1, #12]
1000df1c:	1c60      	adds	r0, r4, #1
1000df1e:	81a2      	strh	r2, [r4, #12]
1000df20:	88db      	ldrh	r3, [r3, #6]
1000df22:	3102      	adds	r1, #2
1000df24:	81e3      	strh	r3, [r4, #14]
1000df26:	89cb      	ldrh	r3, [r1, #14]
1000df28:	2206      	movs	r2, #6
1000df2a:	8223      	strh	r3, [r4, #16]
1000df2c:	4b0f      	ldr	r3, [pc, #60]	; (1000df6c <gapm_cmp_evt+0x144>)
1000df2e:	4798      	blx	r3
1000df30:	2200      	movs	r2, #0
1000df32:	7823      	ldrb	r3, [r4, #0]
1000df34:	4293      	cmp	r3, r2
1000df36:	d00a      	beq.n	1000df4e <gapm_cmp_evt+0x126>
1000df38:	79a3      	ldrb	r3, [r4, #6]
1000df3a:	323f      	adds	r2, #63	; 0x3f
1000df3c:	1c19      	adds	r1, r3, #0
1000df3e:	4391      	bics	r1, r2
1000df40:	3a3e      	subs	r2, #62	; 0x3e
1000df42:	29c0      	cmp	r1, #192	; 0xc0
1000df44:	d003      	beq.n	1000df4e <gapm_cmp_evt+0x126>
1000df46:	065b      	lsls	r3, r3, #25
1000df48:	0fdb      	lsrs	r3, r3, #31
1000df4a:	3202      	adds	r2, #2
1000df4c:	1ad2      	subs	r2, r2, r3
1000df4e:	7022      	strb	r2, [r4, #0]
1000df50:	2005      	movs	r0, #5
1000df52:	e000      	b.n	1000df56 <gapm_cmp_evt+0x12e>
1000df54:	2000      	movs	r0, #0
1000df56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000df58:	1000fa2d 	.word	0x1000fa2d
1000df5c:	1000d179 	.word	0x1000d179
1000df60:	100141a6 	.word	0x100141a6
1000df64:	1000d13d 	.word	0x1000d13d
1000df68:	10014116 	.word	0x10014116
1000df6c:	1000fa1b 	.word	0x1000fa1b

1000df70 <gapm_start_adv_cmd_handler>:
1000df70:	b5f0      	push	{r4, r5, r6, r7, lr}
1000df72:	b089      	sub	sp, #36	; 0x24
1000df74:	9303      	str	r3, [sp, #12]
1000df76:	ab0e      	add	r3, sp, #56	; 0x38
1000df78:	9102      	str	r1, [sp, #8]
1000df7a:	cb02      	ldmia	r3!, {r1}
1000df7c:	aa08      	add	r2, sp, #32
1000df7e:	881b      	ldrh	r3, [r3, #0]
1000df80:	4e3c      	ldr	r6, [pc, #240]	; (1000e074 <gapm_start_adv_cmd_handler+0x104>)
1000df82:	9300      	str	r3, [sp, #0]
1000df84:	ab10      	add	r3, sp, #64	; 0x40
1000df86:	881b      	ldrh	r3, [r3, #0]
1000df88:	240d      	movs	r4, #13
1000df8a:	469c      	mov	ip, r3
1000df8c:	ab11      	add	r3, sp, #68	; 0x44
1000df8e:	781b      	ldrb	r3, [r3, #0]
1000df90:	9304      	str	r3, [sp, #16]
1000df92:	ab12      	add	r3, sp, #72	; 0x48
1000df94:	781b      	ldrb	r3, [r3, #0]
1000df96:	9305      	str	r3, [sp, #20]
1000df98:	ab13      	add	r3, sp, #76	; 0x4c
1000df9a:	781b      	ldrb	r3, [r3, #0]
1000df9c:	9306      	str	r3, [sp, #24]
1000df9e:	ab14      	add	r3, sp, #80	; 0x50
1000dfa0:	781b      	ldrb	r3, [r3, #0]
1000dfa2:	9301      	str	r3, [sp, #4]
1000dfa4:	2319      	movs	r3, #25
1000dfa6:	189b      	adds	r3, r3, r2
1000dfa8:	7fdd      	ldrb	r5, [r3, #31]
1000dfaa:	ab18      	add	r3, sp, #96	; 0x60
1000dfac:	881f      	ldrh	r7, [r3, #0]
1000dfae:	ab19      	add	r3, sp, #100	; 0x64
1000dfb0:	781b      	ldrb	r3, [r3, #0]
1000dfb2:	8832      	ldrh	r2, [r6, #0]
1000dfb4:	9307      	str	r3, [sp, #28]
1000dfb6:	4b30      	ldr	r3, [pc, #192]	; (1000e078 <gapm_start_adv_cmd_handler+0x108>)
1000dfb8:	8836      	ldrh	r6, [r6, #0]
1000dfba:	711a      	strb	r2, [r3, #4]
1000dfbc:	466a      	mov	r2, sp
1000dfbe:	7a12      	ldrb	r2, [r2, #8]
1000dfc0:	701c      	strb	r4, [r3, #0]
1000dfc2:	705c      	strb	r4, [r3, #1]
1000dfc4:	709c      	strb	r4, [r3, #2]
1000dfc6:	725a      	strb	r2, [r3, #9]
1000dfc8:	2400      	movs	r4, #0
1000dfca:	466a      	mov	r2, sp
1000dfcc:	0a36      	lsrs	r6, r6, #8
1000dfce:	70dc      	strb	r4, [r3, #3]
1000dfd0:	7218      	strb	r0, [r3, #8]
1000dfd2:	729c      	strb	r4, [r3, #10]
1000dfd4:	715e      	strb	r6, [r3, #5]
1000dfd6:	72dc      	strb	r4, [r3, #11]
1000dfd8:	7812      	ldrb	r2, [r2, #0]
1000dfda:	380e      	subs	r0, #14
1000dfdc:	731a      	strb	r2, [r3, #12]
1000dfde:	9a00      	ldr	r2, [sp, #0]
1000dfe0:	0a14      	lsrs	r4, r2, #8
1000dfe2:	4662      	mov	r2, ip
1000dfe4:	739a      	strb	r2, [r3, #14]
1000dfe6:	4662      	mov	r2, ip
1000dfe8:	735c      	strb	r4, [r3, #13]
1000dfea:	0a14      	lsrs	r4, r2, #8
1000dfec:	466a      	mov	r2, sp
1000dfee:	7c12      	ldrb	r2, [r2, #16]
1000dff0:	73dc      	strb	r4, [r3, #15]
1000dff2:	741a      	strb	r2, [r3, #16]
1000dff4:	1c1c      	adds	r4, r3, #0
1000dff6:	2801      	cmp	r0, #1
1000dff8:	d809      	bhi.n	1000e00e <gapm_start_adv_cmd_handler+0x9e>
1000dffa:	2900      	cmp	r1, #0
1000dffc:	d003      	beq.n	1000e006 <gapm_start_adv_cmd_handler+0x96>
1000dffe:	481f      	ldr	r0, [pc, #124]	; (1000e07c <gapm_start_adv_cmd_handler+0x10c>)
1000e000:	2206      	movs	r2, #6
1000e002:	4b1f      	ldr	r3, [pc, #124]	; (1000e080 <gapm_start_adv_cmd_handler+0x110>)
1000e004:	4798      	blx	r3
1000e006:	466b      	mov	r3, sp
1000e008:	7b1b      	ldrb	r3, [r3, #12]
1000e00a:	75e3      	strb	r3, [r4, #23]
1000e00c:	e014      	b.n	1000e038 <gapm_start_adv_cmd_handler+0xc8>
1000e00e:	466b      	mov	r3, sp
1000e010:	7d1b      	ldrb	r3, [r3, #20]
1000e012:	9915      	ldr	r1, [sp, #84]	; 0x54
1000e014:	7463      	strb	r3, [r4, #17]
1000e016:	466b      	mov	r3, sp
1000e018:	7e1b      	ldrb	r3, [r3, #24]
1000e01a:	9a01      	ldr	r2, [sp, #4]
1000e01c:	74a3      	strb	r3, [r4, #18]
1000e01e:	466b      	mov	r3, sp
1000e020:	791b      	ldrb	r3, [r3, #4]
1000e022:	4818      	ldr	r0, [pc, #96]	; (1000e084 <gapm_start_adv_cmd_handler+0x114>)
1000e024:	4e16      	ldr	r6, [pc, #88]	; (1000e080 <gapm_start_adv_cmd_handler+0x110>)
1000e026:	74e3      	strb	r3, [r4, #19]
1000e028:	47b0      	blx	r6
1000e02a:	1c23      	adds	r3, r4, #0
1000e02c:	4816      	ldr	r0, [pc, #88]	; (1000e088 <gapm_start_adv_cmd_handler+0x118>)
1000e02e:	3330      	adds	r3, #48	; 0x30
1000e030:	9917      	ldr	r1, [sp, #92]	; 0x5c
1000e032:	1c2a      	adds	r2, r5, #0
1000e034:	701d      	strb	r5, [r3, #0]
1000e036:	47b0      	blx	r6
1000e038:	1c22      	adds	r2, r4, #0
1000e03a:	23a5      	movs	r3, #165	; 0xa5
1000e03c:	3250      	adds	r2, #80	; 0x50
1000e03e:	7013      	strb	r3, [r2, #0]
1000e040:	1c22      	adds	r2, r4, #0
1000e042:	3251      	adds	r2, #81	; 0x51
1000e044:	7013      	strb	r3, [r2, #0]
1000e046:	1c23      	adds	r3, r4, #0
1000e048:	1c22      	adds	r2, r4, #0
1000e04a:	3352      	adds	r3, #82	; 0x52
1000e04c:	701f      	strb	r7, [r3, #0]
1000e04e:	3253      	adds	r2, #83	; 0x53
1000e050:	0a3b      	lsrs	r3, r7, #8
1000e052:	7013      	strb	r3, [r2, #0]
1000e054:	466a      	mov	r2, sp
1000e056:	1c23      	adds	r3, r4, #0
1000e058:	7f12      	ldrb	r2, [r2, #28]
1000e05a:	3354      	adds	r3, #84	; 0x54
1000e05c:	701a      	strb	r2, [r3, #0]
1000e05e:	234d      	movs	r3, #77	; 0x4d
1000e060:	2500      	movs	r5, #0
1000e062:	71a3      	strb	r3, [r4, #6]
1000e064:	1c20      	adds	r0, r4, #0
1000e066:	2155      	movs	r1, #85	; 0x55
1000e068:	4b08      	ldr	r3, [pc, #32]	; (1000e08c <gapm_start_adv_cmd_handler+0x11c>)
1000e06a:	71e5      	strb	r5, [r4, #7]
1000e06c:	4798      	blx	r3
1000e06e:	1c28      	adds	r0, r5, #0
1000e070:	b009      	add	sp, #36	; 0x24
1000e072:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e074:	10014114 	.word	0x10014114
1000e078:	10014484 	.word	0x10014484
1000e07c:	10014495 	.word	0x10014495
1000e080:	1000fa1b 	.word	0x1000fa1b
1000e084:	10014498 	.word	0x10014498
1000e088:	100144b5 	.word	0x100144b5
1000e08c:	1000cf6d 	.word	0x1000cf6d

1000e090 <get_gap_local_addr_type>:
1000e090:	4b04      	ldr	r3, [pc, #16]	; (1000e0a4 <get_gap_local_addr_type+0x14>)
1000e092:	2001      	movs	r0, #1
1000e094:	791b      	ldrb	r3, [r3, #4]
1000e096:	2b02      	cmp	r3, #2
1000e098:	d003      	beq.n	1000e0a2 <get_gap_local_addr_type+0x12>
1000e09a:	3b03      	subs	r3, #3
1000e09c:	4258      	negs	r0, r3
1000e09e:	4158      	adcs	r0, r3
1000e0a0:	0040      	lsls	r0, r0, #1
1000e0a2:	4770      	bx	lr
1000e0a4:	100141a6 	.word	0x100141a6

1000e0a8 <gapm_adv_report_evt_handler>:
1000e0a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e0aa:	7843      	ldrb	r3, [r0, #1]
1000e0ac:	1c05      	adds	r5, r0, #0
1000e0ae:	9301      	str	r3, [sp, #4]
1000e0b0:	466b      	mov	r3, sp
1000e0b2:	1c0c      	adds	r4, r1, #0
1000e0b4:	791b      	ldrb	r3, [r3, #4]
1000e0b6:	7806      	ldrb	r6, [r0, #0]
1000e0b8:	2206      	movs	r2, #6
1000e0ba:	704b      	strb	r3, [r1, #1]
1000e0bc:	1c88      	adds	r0, r1, #2
1000e0be:	4f1b      	ldr	r7, [pc, #108]	; (1000e12c <gapm_adv_report_evt_handler+0x84>)
1000e0c0:	1ca9      	adds	r1, r5, #2
1000e0c2:	47b8      	blx	r7
1000e0c4:	1c20      	adds	r0, r4, #0
1000e0c6:	1c29      	adds	r1, r5, #0
1000e0c8:	7a2a      	ldrb	r2, [r5, #8]
1000e0ca:	3008      	adds	r0, #8
1000e0cc:	77c2      	strb	r2, [r0, #31]
1000e0ce:	3109      	adds	r1, #9
1000e0d0:	3528      	adds	r5, #40	; 0x28
1000e0d2:	47b8      	blx	r7
1000e0d4:	782b      	ldrb	r3, [r5, #0]
1000e0d6:	b25a      	sxtb	r2, r3
1000e0d8:	2a00      	cmp	r2, #0
1000e0da:	da01      	bge.n	1000e0e0 <gapm_adv_report_evt_handler+0x38>
1000e0dc:	3301      	adds	r3, #1
1000e0de:	b2db      	uxtb	r3, r3
1000e0e0:	1c22      	adds	r2, r4, #0
1000e0e2:	3228      	adds	r2, #40	; 0x28
1000e0e4:	7013      	strb	r3, [r2, #0]
1000e0e6:	2200      	movs	r2, #0
1000e0e8:	9b01      	ldr	r3, [sp, #4]
1000e0ea:	4293      	cmp	r3, r2
1000e0ec:	d00a      	beq.n	1000e104 <gapm_adv_report_evt_handler+0x5c>
1000e0ee:	79e3      	ldrb	r3, [r4, #7]
1000e0f0:	323f      	adds	r2, #63	; 0x3f
1000e0f2:	1c19      	adds	r1, r3, #0
1000e0f4:	4391      	bics	r1, r2
1000e0f6:	3a3e      	subs	r2, #62	; 0x3e
1000e0f8:	29c0      	cmp	r1, #192	; 0xc0
1000e0fa:	d003      	beq.n	1000e104 <gapm_adv_report_evt_handler+0x5c>
1000e0fc:	065b      	lsls	r3, r3, #25
1000e0fe:	0fdb      	lsrs	r3, r3, #31
1000e100:	3202      	adds	r2, #2
1000e102:	1ad2      	subs	r2, r2, r3
1000e104:	7062      	strb	r2, [r4, #1]
1000e106:	2e04      	cmp	r6, #4
1000e108:	d80f      	bhi.n	1000e12a <gapm_adv_report_evt_handler+0x82>
1000e10a:	1c30      	adds	r0, r6, #0
1000e10c:	f000 fbf6 	bl	1000e8fc <__gnu_thumb1_case_uqi>
1000e110:	09070503 	.word	0x09070503
1000e114:	0b          	.byte	0x0b
1000e115:	00          	.byte	0x00
1000e116:	2300      	movs	r3, #0
1000e118:	e006      	b.n	1000e128 <gapm_adv_report_evt_handler+0x80>
1000e11a:	2301      	movs	r3, #1
1000e11c:	e004      	b.n	1000e128 <gapm_adv_report_evt_handler+0x80>
1000e11e:	2302      	movs	r3, #2
1000e120:	e002      	b.n	1000e128 <gapm_adv_report_evt_handler+0x80>
1000e122:	2303      	movs	r3, #3
1000e124:	e000      	b.n	1000e128 <gapm_adv_report_evt_handler+0x80>
1000e126:	2305      	movs	r3, #5
1000e128:	7023      	strb	r3, [r4, #0]
1000e12a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e12c:	1000fa1b 	.word	0x1000fa1b

1000e130 <gapm_resolv_addr_cmd_handler>:
1000e130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e132:	2314      	movs	r3, #20
1000e134:	4c12      	ldr	r4, [pc, #72]	; (1000e180 <gapm_resolv_addr_cmd_handler+0x50>)
1000e136:	1c17      	adds	r7, r2, #0
1000e138:	7023      	strb	r3, [r4, #0]
1000e13a:	3b07      	subs	r3, #7
1000e13c:	7063      	strb	r3, [r4, #1]
1000e13e:	70a3      	strb	r3, [r4, #2]
1000e140:	2300      	movs	r3, #0
1000e142:	70e3      	strb	r3, [r4, #3]
1000e144:	4b0f      	ldr	r3, [pc, #60]	; (1000e184 <gapm_resolv_addr_cmd_handler+0x54>)
1000e146:	1c05      	adds	r5, r0, #0
1000e148:	881a      	ldrh	r2, [r3, #0]
1000e14a:	881b      	ldrh	r3, [r3, #0]
1000e14c:	4e0e      	ldr	r6, [pc, #56]	; (1000e188 <gapm_resolv_addr_cmd_handler+0x58>)
1000e14e:	0a1b      	lsrs	r3, r3, #8
1000e150:	7163      	strb	r3, [r4, #5]
1000e152:	2317      	movs	r3, #23
1000e154:	012d      	lsls	r5, r5, #4
1000e156:	7122      	strb	r2, [r4, #4]
1000e158:	7260      	strb	r0, [r4, #9]
1000e15a:	2206      	movs	r2, #6
1000e15c:	480b      	ldr	r0, [pc, #44]	; (1000e18c <gapm_resolv_addr_cmd_handler+0x5c>)
1000e15e:	7223      	strb	r3, [r4, #8]
1000e160:	47b0      	blx	r6
1000e162:	1c39      	adds	r1, r7, #0
1000e164:	1c2a      	adds	r2, r5, #0
1000e166:	480a      	ldr	r0, [pc, #40]	; (1000e190 <gapm_resolv_addr_cmd_handler+0x60>)
1000e168:	47b0      	blx	r6
1000e16a:	1c29      	adds	r1, r5, #0
1000e16c:	3110      	adds	r1, #16
1000e16e:	1c0b      	adds	r3, r1, #0
1000e170:	3b08      	subs	r3, #8
1000e172:	71a3      	strb	r3, [r4, #6]
1000e174:	121b      	asrs	r3, r3, #8
1000e176:	71e3      	strb	r3, [r4, #7]
1000e178:	1c20      	adds	r0, r4, #0
1000e17a:	4b06      	ldr	r3, [pc, #24]	; (1000e194 <gapm_resolv_addr_cmd_handler+0x64>)
1000e17c:	4798      	blx	r3
1000e17e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e180:	10014484 	.word	0x10014484
1000e184:	10014114 	.word	0x10014114
1000e188:	1000fa1b 	.word	0x1000fa1b
1000e18c:	1001448e 	.word	0x1001448e
1000e190:	10014494 	.word	0x10014494
1000e194:	1000cf6d 	.word	0x1000cf6d

1000e198 <gapm_addr_solved_ind_handler>:
1000e198:	b570      	push	{r4, r5, r6, lr}
1000e19a:	1c04      	adds	r4, r0, #0
1000e19c:	1c08      	adds	r0, r1, #0
1000e19e:	1c0d      	adds	r5, r1, #0
1000e1a0:	4e05      	ldr	r6, [pc, #20]	; (1000e1b8 <gapm_addr_solved_ind_handler+0x20>)
1000e1a2:	1c21      	adds	r1, r4, #0
1000e1a4:	2206      	movs	r2, #6
1000e1a6:	3011      	adds	r0, #17
1000e1a8:	47b0      	blx	r6
1000e1aa:	1c68      	adds	r0, r5, #1
1000e1ac:	1da1      	adds	r1, r4, #6
1000e1ae:	2210      	movs	r2, #16
1000e1b0:	47b0      	blx	r6
1000e1b2:	2300      	movs	r3, #0
1000e1b4:	702b      	strb	r3, [r5, #0]
1000e1b6:	bd70      	pop	{r4, r5, r6, pc}
1000e1b8:	1000fa1b 	.word	0x1000fa1b

1000e1bc <gapm_profile_added_ind_handler>:
1000e1bc:	b510      	push	{r4, lr}
1000e1be:	7843      	ldrb	r3, [r0, #1]
1000e1c0:	7902      	ldrb	r2, [r0, #4]
1000e1c2:	7944      	ldrb	r4, [r0, #5]
1000e1c4:	7800      	ldrb	r0, [r0, #0]
1000e1c6:	021b      	lsls	r3, r3, #8
1000e1c8:	4303      	orrs	r3, r0
1000e1ca:	2b1b      	cmp	r3, #27
1000e1cc:	d104      	bne.n	1000e1d8 <gapm_profile_added_ind_handler+0x1c>
1000e1ce:	2300      	movs	r3, #0
1000e1d0:	700b      	strb	r3, [r1, #0]
1000e1d2:	0223      	lsls	r3, r4, #8
1000e1d4:	4313      	orrs	r3, r2
1000e1d6:	804b      	strh	r3, [r1, #2]
1000e1d8:	203b      	movs	r0, #59	; 0x3b
1000e1da:	bd10      	pop	{r4, pc}

1000e1dc <gattc_read_req_ind_parser>:
1000e1dc:	7843      	ldrb	r3, [r0, #1]
1000e1de:	7802      	ldrb	r2, [r0, #0]
1000e1e0:	021b      	lsls	r3, r3, #8
1000e1e2:	4313      	orrs	r3, r2
1000e1e4:	804b      	strh	r3, [r1, #2]
1000e1e6:	4770      	bx	lr

1000e1e8 <gattc_write_req_ind_parser>:
1000e1e8:	b508      	push	{r3, lr}
1000e1ea:	1c13      	adds	r3, r2, #0
1000e1ec:	0a00      	lsrs	r0, r0, #8
1000e1ee:	8010      	strh	r0, [r2, #0]
1000e1f0:	784a      	ldrb	r2, [r1, #1]
1000e1f2:	7808      	ldrb	r0, [r1, #0]
1000e1f4:	0212      	lsls	r2, r2, #8
1000e1f6:	4302      	orrs	r2, r0
1000e1f8:	805a      	strh	r2, [r3, #2]
1000e1fa:	78ca      	ldrb	r2, [r1, #3]
1000e1fc:	7888      	ldrb	r0, [r1, #2]
1000e1fe:	0212      	lsls	r2, r2, #8
1000e200:	4302      	orrs	r2, r0
1000e202:	809a      	strh	r2, [r3, #4]
1000e204:	794a      	ldrb	r2, [r1, #5]
1000e206:	7908      	ldrb	r0, [r1, #4]
1000e208:	0212      	lsls	r2, r2, #8
1000e20a:	4302      	orrs	r2, r0
1000e20c:	80da      	strh	r2, [r3, #6]
1000e20e:	3308      	adds	r3, #8
1000e210:	1c18      	adds	r0, r3, #0
1000e212:	3106      	adds	r1, #6
1000e214:	4b01      	ldr	r3, [pc, #4]	; (1000e21c <gattc_write_req_ind_parser+0x34>)
1000e216:	4798      	blx	r3
1000e218:	bd08      	pop	{r3, pc}
1000e21a:	46c0      	nop			; (mov r8, r8)
1000e21c:	1000fa1b 	.word	0x1000fa1b

1000e220 <gattc_att_info_req_parser>:
1000e220:	7843      	ldrb	r3, [r0, #1]
1000e222:	7802      	ldrb	r2, [r0, #0]
1000e224:	021b      	lsls	r3, r3, #8
1000e226:	4313      	orrs	r3, r2
1000e228:	800b      	strh	r3, [r1, #0]
1000e22a:	4770      	bx	lr

1000e22c <gattc_read_cfm>:
1000e22c:	b538      	push	{r3, r4, r5, lr}
1000e22e:	2514      	movs	r5, #20
1000e230:	1c1c      	adds	r4, r3, #0
1000e232:	4b14      	ldr	r3, [pc, #80]	; (1000e284 <gattc_read_cfm+0x58>)
1000e234:	70d9      	strb	r1, [r3, #3]
1000e236:	4914      	ldr	r1, [pc, #80]	; (1000e288 <gattc_read_cfm+0x5c>)
1000e238:	701d      	strb	r5, [r3, #0]
1000e23a:	3d08      	subs	r5, #8
1000e23c:	705d      	strb	r5, [r3, #1]
1000e23e:	709d      	strb	r5, [r3, #2]
1000e240:	880d      	ldrh	r5, [r1, #0]
1000e242:	8809      	ldrh	r1, [r1, #0]
1000e244:	7218      	strb	r0, [r3, #8]
1000e246:	0a09      	lsrs	r1, r1, #8
1000e248:	7159      	strb	r1, [r3, #5]
1000e24a:	0a00      	lsrs	r0, r0, #8
1000e24c:	0a21      	lsrs	r1, r4, #8
1000e24e:	711d      	strb	r5, [r3, #4]
1000e250:	7258      	strb	r0, [r3, #9]
1000e252:	729c      	strb	r4, [r3, #10]
1000e254:	72d9      	strb	r1, [r3, #11]
1000e256:	731a      	strb	r2, [r3, #12]
1000e258:	1c1d      	adds	r5, r3, #0
1000e25a:	2c00      	cmp	r4, #0
1000e25c:	d007      	beq.n	1000e26e <gattc_read_cfm+0x42>
1000e25e:	9904      	ldr	r1, [sp, #16]
1000e260:	1c22      	adds	r2, r4, #0
1000e262:	480a      	ldr	r0, [pc, #40]	; (1000e28c <gattc_read_cfm+0x60>)
1000e264:	4b0a      	ldr	r3, [pc, #40]	; (1000e290 <gattc_read_cfm+0x64>)
1000e266:	340d      	adds	r4, #13
1000e268:	4798      	blx	r3
1000e26a:	b2a1      	uxth	r1, r4
1000e26c:	e001      	b.n	1000e272 <gattc_read_cfm+0x46>
1000e26e:	210e      	movs	r1, #14
1000e270:	735c      	strb	r4, [r3, #13]
1000e272:	1c0b      	adds	r3, r1, #0
1000e274:	3b08      	subs	r3, #8
1000e276:	71ab      	strb	r3, [r5, #6]
1000e278:	121b      	asrs	r3, r3, #8
1000e27a:	71eb      	strb	r3, [r5, #7]
1000e27c:	1c28      	adds	r0, r5, #0
1000e27e:	4b05      	ldr	r3, [pc, #20]	; (1000e294 <gattc_read_cfm+0x68>)
1000e280:	4798      	blx	r3
1000e282:	bd38      	pop	{r3, r4, r5, pc}
1000e284:	10014484 	.word	0x10014484
1000e288:	10014114 	.word	0x10014114
1000e28c:	10014491 	.word	0x10014491
1000e290:	1000fa1b 	.word	0x1000fa1b
1000e294:	1000cf6d 	.word	0x1000cf6d

1000e298 <gattc_write_cfm>:
1000e298:	4b0d      	ldr	r3, [pc, #52]	; (1000e2d0 <gattc_write_cfm+0x38>)
1000e29a:	b510      	push	{r4, lr}
1000e29c:	729a      	strb	r2, [r3, #10]
1000e29e:	2203      	movs	r2, #3
1000e2a0:	2416      	movs	r4, #22
1000e2a2:	719a      	strb	r2, [r3, #6]
1000e2a4:	2200      	movs	r2, #0
1000e2a6:	70d9      	strb	r1, [r3, #3]
1000e2a8:	490a      	ldr	r1, [pc, #40]	; (1000e2d4 <gattc_write_cfm+0x3c>)
1000e2aa:	701c      	strb	r4, [r3, #0]
1000e2ac:	3c0a      	subs	r4, #10
1000e2ae:	705c      	strb	r4, [r3, #1]
1000e2b0:	709c      	strb	r4, [r3, #2]
1000e2b2:	880c      	ldrh	r4, [r1, #0]
1000e2b4:	8809      	ldrh	r1, [r1, #0]
1000e2b6:	7218      	strb	r0, [r3, #8]
1000e2b8:	0a09      	lsrs	r1, r1, #8
1000e2ba:	0a00      	lsrs	r0, r0, #8
1000e2bc:	711c      	strb	r4, [r3, #4]
1000e2be:	7159      	strb	r1, [r3, #5]
1000e2c0:	7258      	strb	r0, [r3, #9]
1000e2c2:	71da      	strb	r2, [r3, #7]
1000e2c4:	1c18      	adds	r0, r3, #0
1000e2c6:	210b      	movs	r1, #11
1000e2c8:	4b03      	ldr	r3, [pc, #12]	; (1000e2d8 <gattc_write_cfm+0x40>)
1000e2ca:	4798      	blx	r3
1000e2cc:	bd10      	pop	{r4, pc}
1000e2ce:	46c0      	nop			; (mov r8, r8)
1000e2d0:	10014484 	.word	0x10014484
1000e2d4:	10014114 	.word	0x10014114
1000e2d8:	1000cf6d 	.word	0x1000cf6d

1000e2dc <gattc_att_info_cfm>:
1000e2dc:	b538      	push	{r3, r4, r5, lr}
1000e2de:	4c0e      	ldr	r4, [pc, #56]	; (1000e318 <gattc_att_info_cfm+0x3c>)
1000e2e0:	2518      	movs	r5, #24
1000e2e2:	7323      	strb	r3, [r4, #12]
1000e2e4:	2305      	movs	r3, #5
1000e2e6:	71a3      	strb	r3, [r4, #6]
1000e2e8:	2300      	movs	r3, #0
1000e2ea:	70e1      	strb	r1, [r4, #3]
1000e2ec:	490b      	ldr	r1, [pc, #44]	; (1000e31c <gattc_att_info_cfm+0x40>)
1000e2ee:	7025      	strb	r5, [r4, #0]
1000e2f0:	3d0c      	subs	r5, #12
1000e2f2:	7065      	strb	r5, [r4, #1]
1000e2f4:	70a5      	strb	r5, [r4, #2]
1000e2f6:	880d      	ldrh	r5, [r1, #0]
1000e2f8:	8809      	ldrh	r1, [r1, #0]
1000e2fa:	7220      	strb	r0, [r4, #8]
1000e2fc:	0a09      	lsrs	r1, r1, #8
1000e2fe:	0a00      	lsrs	r0, r0, #8
1000e300:	7161      	strb	r1, [r4, #5]
1000e302:	7260      	strb	r0, [r4, #9]
1000e304:	72a2      	strb	r2, [r4, #10]
1000e306:	71e3      	strb	r3, [r4, #7]
1000e308:	0a12      	lsrs	r2, r2, #8
1000e30a:	1c20      	adds	r0, r4, #0
1000e30c:	210d      	movs	r1, #13
1000e30e:	4b04      	ldr	r3, [pc, #16]	; (1000e320 <gattc_att_info_cfm+0x44>)
1000e310:	7125      	strb	r5, [r4, #4]
1000e312:	72e2      	strb	r2, [r4, #11]
1000e314:	4798      	blx	r3
1000e316:	bd38      	pop	{r3, r4, r5, pc}
1000e318:	10014484 	.word	0x10014484
1000e31c:	10014114 	.word	0x10014114
1000e320:	1000cf6d 	.word	0x1000cf6d

1000e324 <gattc_send_evt_cmd_handler>:
1000e324:	b570      	push	{r4, r5, r6, lr}
1000e326:	2610      	movs	r6, #16
1000e328:	ac04      	add	r4, sp, #16
1000e32a:	8825      	ldrh	r5, [r4, #0]
1000e32c:	4c15      	ldr	r4, [pc, #84]	; (1000e384 <gattc_send_evt_cmd_handler+0x60>)
1000e32e:	70e2      	strb	r2, [r4, #3]
1000e330:	4a15      	ldr	r2, [pc, #84]	; (1000e388 <gattc_send_evt_cmd_handler+0x64>)
1000e332:	7026      	strb	r6, [r4, #0]
1000e334:	3e04      	subs	r6, #4
1000e336:	7066      	strb	r6, [r4, #1]
1000e338:	70a6      	strb	r6, [r4, #2]
1000e33a:	8816      	ldrh	r6, [r2, #0]
1000e33c:	8812      	ldrh	r2, [r2, #0]
1000e33e:	7220      	strb	r0, [r4, #8]
1000e340:	0a12      	lsrs	r2, r2, #8
1000e342:	7162      	strb	r2, [r4, #5]
1000e344:	4a11      	ldr	r2, [pc, #68]	; (1000e38c <gattc_send_evt_cmd_handler+0x68>)
1000e346:	7321      	strb	r1, [r4, #12]
1000e348:	8812      	ldrh	r2, [r2, #0]
1000e34a:	73a5      	strb	r5, [r4, #14]
1000e34c:	3201      	adds	r2, #1
1000e34e:	7262      	strb	r2, [r4, #9]
1000e350:	1212      	asrs	r2, r2, #8
1000e352:	72a2      	strb	r2, [r4, #10]
1000e354:	2200      	movs	r2, #0
1000e356:	72e2      	strb	r2, [r4, #11]
1000e358:	0a0a      	lsrs	r2, r1, #8
1000e35a:	7362      	strb	r2, [r4, #13]
1000e35c:	0a2a      	lsrs	r2, r5, #8
1000e35e:	73e2      	strb	r2, [r4, #15]
1000e360:	1c19      	adds	r1, r3, #0
1000e362:	1c2a      	adds	r2, r5, #0
1000e364:	4b0a      	ldr	r3, [pc, #40]	; (1000e390 <gattc_send_evt_cmd_handler+0x6c>)
1000e366:	3510      	adds	r5, #16
1000e368:	480a      	ldr	r0, [pc, #40]	; (1000e394 <gattc_send_evt_cmd_handler+0x70>)
1000e36a:	7126      	strb	r6, [r4, #4]
1000e36c:	4798      	blx	r3
1000e36e:	b2a9      	uxth	r1, r5
1000e370:	1c0b      	adds	r3, r1, #0
1000e372:	3b08      	subs	r3, #8
1000e374:	71a3      	strb	r3, [r4, #6]
1000e376:	121b      	asrs	r3, r3, #8
1000e378:	71e3      	strb	r3, [r4, #7]
1000e37a:	1c20      	adds	r0, r4, #0
1000e37c:	4b06      	ldr	r3, [pc, #24]	; (1000e398 <gattc_send_evt_cmd_handler+0x74>)
1000e37e:	4798      	blx	r3
1000e380:	bd70      	pop	{r4, r5, r6, pc}
1000e382:	46c0      	nop			; (mov r8, r8)
1000e384:	10014484 	.word	0x10014484
1000e388:	10014114 	.word	0x10014114
1000e38c:	10013428 	.word	0x10013428
1000e390:	1000fa1b 	.word	0x1000fa1b
1000e394:	10014494 	.word	0x10014494
1000e398:	1000cf6d 	.word	0x1000cf6d

1000e39c <gattc_event_cfm_handler>:
1000e39c:	220e      	movs	r2, #14
1000e39e:	b508      	push	{r3, lr}
1000e3a0:	4b0b      	ldr	r3, [pc, #44]	; (1000e3d0 <gattc_event_cfm_handler+0x34>)
1000e3a2:	701a      	strb	r2, [r3, #0]
1000e3a4:	3a02      	subs	r2, #2
1000e3a6:	705a      	strb	r2, [r3, #1]
1000e3a8:	709a      	strb	r2, [r3, #2]
1000e3aa:	4a0a      	ldr	r2, [pc, #40]	; (1000e3d4 <gattc_event_cfm_handler+0x38>)
1000e3ac:	70d8      	strb	r0, [r3, #3]
1000e3ae:	8810      	ldrh	r0, [r2, #0]
1000e3b0:	8812      	ldrh	r2, [r2, #0]
1000e3b2:	7219      	strb	r1, [r3, #8]
1000e3b4:	0a12      	lsrs	r2, r2, #8
1000e3b6:	715a      	strb	r2, [r3, #5]
1000e3b8:	2202      	movs	r2, #2
1000e3ba:	719a      	strb	r2, [r3, #6]
1000e3bc:	2200      	movs	r2, #0
1000e3be:	0a09      	lsrs	r1, r1, #8
1000e3c0:	7118      	strb	r0, [r3, #4]
1000e3c2:	7259      	strb	r1, [r3, #9]
1000e3c4:	71da      	strb	r2, [r3, #7]
1000e3c6:	1c18      	adds	r0, r3, #0
1000e3c8:	210a      	movs	r1, #10
1000e3ca:	4b03      	ldr	r3, [pc, #12]	; (1000e3d8 <gattc_event_cfm_handler+0x3c>)
1000e3cc:	4798      	blx	r3
1000e3ce:	bd08      	pop	{r3, pc}
1000e3d0:	10014484 	.word	0x10014484
1000e3d4:	10014114 	.word	0x10014114
1000e3d8:	1000cf6d 	.word	0x1000cf6d

1000e3dc <gattc_disc_svc_ind_parser>:
1000e3dc:	b570      	push	{r4, r5, r6, lr}
1000e3de:	1c15      	adds	r5, r2, #0
1000e3e0:	0a00      	lsrs	r0, r0, #8
1000e3e2:	8010      	strh	r0, [r2, #0]
1000e3e4:	784b      	ldrb	r3, [r1, #1]
1000e3e6:	780a      	ldrb	r2, [r1, #0]
1000e3e8:	021b      	lsls	r3, r3, #8
1000e3ea:	4313      	orrs	r3, r2
1000e3ec:	806b      	strh	r3, [r5, #2]
1000e3ee:	78cb      	ldrb	r3, [r1, #3]
1000e3f0:	788a      	ldrb	r2, [r1, #2]
1000e3f2:	021b      	lsls	r3, r3, #8
1000e3f4:	4313      	orrs	r3, r2
1000e3f6:	80ab      	strh	r3, [r5, #4]
1000e3f8:	790e      	ldrb	r6, [r1, #4]
1000e3fa:	4b05      	ldr	r3, [pc, #20]	; (1000e410 <gattc_disc_svc_ind_parser+0x34>)
1000e3fc:	1c30      	adds	r0, r6, #0
1000e3fe:	1c0c      	adds	r4, r1, #0
1000e400:	4798      	blx	r3
1000e402:	1c32      	adds	r2, r6, #0
1000e404:	71a8      	strb	r0, [r5, #6]
1000e406:	1d61      	adds	r1, r4, #5
1000e408:	1de8      	adds	r0, r5, #7
1000e40a:	4b02      	ldr	r3, [pc, #8]	; (1000e414 <gattc_disc_svc_ind_parser+0x38>)
1000e40c:	4798      	blx	r3
1000e40e:	bd70      	pop	{r4, r5, r6, pc}
1000e410:	1000c2ad 	.word	0x1000c2ad
1000e414:	1000fa1b 	.word	0x1000fa1b

1000e418 <gattc_disc_svc_incl_ind_parser>:
1000e418:	b570      	push	{r4, r5, r6, lr}
1000e41a:	1c15      	adds	r5, r2, #0
1000e41c:	0a00      	lsrs	r0, r0, #8
1000e41e:	8010      	strh	r0, [r2, #0]
1000e420:	784b      	ldrb	r3, [r1, #1]
1000e422:	780a      	ldrb	r2, [r1, #0]
1000e424:	021b      	lsls	r3, r3, #8
1000e426:	4313      	orrs	r3, r2
1000e428:	806b      	strh	r3, [r5, #2]
1000e42a:	78cb      	ldrb	r3, [r1, #3]
1000e42c:	788a      	ldrb	r2, [r1, #2]
1000e42e:	021b      	lsls	r3, r3, #8
1000e430:	4313      	orrs	r3, r2
1000e432:	80ab      	strh	r3, [r5, #4]
1000e434:	794b      	ldrb	r3, [r1, #5]
1000e436:	790a      	ldrb	r2, [r1, #4]
1000e438:	021b      	lsls	r3, r3, #8
1000e43a:	4313      	orrs	r3, r2
1000e43c:	80eb      	strh	r3, [r5, #6]
1000e43e:	798e      	ldrb	r6, [r1, #6]
1000e440:	4b05      	ldr	r3, [pc, #20]	; (1000e458 <gattc_disc_svc_incl_ind_parser+0x40>)
1000e442:	1c30      	adds	r0, r6, #0
1000e444:	1c0c      	adds	r4, r1, #0
1000e446:	4798      	blx	r3
1000e448:	7228      	strb	r0, [r5, #8]
1000e44a:	1c28      	adds	r0, r5, #0
1000e44c:	1c32      	adds	r2, r6, #0
1000e44e:	1de1      	adds	r1, r4, #7
1000e450:	4b02      	ldr	r3, [pc, #8]	; (1000e45c <gattc_disc_svc_incl_ind_parser+0x44>)
1000e452:	3009      	adds	r0, #9
1000e454:	4798      	blx	r3
1000e456:	bd70      	pop	{r4, r5, r6, pc}
1000e458:	1000c2ad 	.word	0x1000c2ad
1000e45c:	1000fa1b 	.word	0x1000fa1b

1000e460 <gattc_disc_char_ind_parser>:
1000e460:	b570      	push	{r4, r5, r6, lr}
1000e462:	1c15      	adds	r5, r2, #0
1000e464:	0a00      	lsrs	r0, r0, #8
1000e466:	8010      	strh	r0, [r2, #0]
1000e468:	784b      	ldrb	r3, [r1, #1]
1000e46a:	780a      	ldrb	r2, [r1, #0]
1000e46c:	021b      	lsls	r3, r3, #8
1000e46e:	4313      	orrs	r3, r2
1000e470:	806b      	strh	r3, [r5, #2]
1000e472:	78cb      	ldrb	r3, [r1, #3]
1000e474:	788a      	ldrb	r2, [r1, #2]
1000e476:	021b      	lsls	r3, r3, #8
1000e478:	4313      	orrs	r3, r2
1000e47a:	80ab      	strh	r3, [r5, #4]
1000e47c:	790b      	ldrb	r3, [r1, #4]
1000e47e:	1c0c      	adds	r4, r1, #0
1000e480:	71ab      	strb	r3, [r5, #6]
1000e482:	794e      	ldrb	r6, [r1, #5]
1000e484:	4b05      	ldr	r3, [pc, #20]	; (1000e49c <gattc_disc_char_ind_parser+0x3c>)
1000e486:	1c30      	adds	r0, r6, #0
1000e488:	4798      	blx	r3
1000e48a:	71e8      	strb	r0, [r5, #7]
1000e48c:	1c28      	adds	r0, r5, #0
1000e48e:	1c32      	adds	r2, r6, #0
1000e490:	1da1      	adds	r1, r4, #6
1000e492:	4b03      	ldr	r3, [pc, #12]	; (1000e4a0 <gattc_disc_char_ind_parser+0x40>)
1000e494:	3008      	adds	r0, #8
1000e496:	4798      	blx	r3
1000e498:	bd70      	pop	{r4, r5, r6, pc}
1000e49a:	46c0      	nop			; (mov r8, r8)
1000e49c:	1000c2ad 	.word	0x1000c2ad
1000e4a0:	1000fa1b 	.word	0x1000fa1b

1000e4a4 <gattc_disc_char_desc_ind_parser>:
1000e4a4:	b570      	push	{r4, r5, r6, lr}
1000e4a6:	1c15      	adds	r5, r2, #0
1000e4a8:	0a00      	lsrs	r0, r0, #8
1000e4aa:	8010      	strh	r0, [r2, #0]
1000e4ac:	784b      	ldrb	r3, [r1, #1]
1000e4ae:	780a      	ldrb	r2, [r1, #0]
1000e4b0:	021b      	lsls	r3, r3, #8
1000e4b2:	4313      	orrs	r3, r2
1000e4b4:	806b      	strh	r3, [r5, #2]
1000e4b6:	788e      	ldrb	r6, [r1, #2]
1000e4b8:	4b05      	ldr	r3, [pc, #20]	; (1000e4d0 <gattc_disc_char_desc_ind_parser+0x2c>)
1000e4ba:	1c30      	adds	r0, r6, #0
1000e4bc:	1c0c      	adds	r4, r1, #0
1000e4be:	4798      	blx	r3
1000e4c0:	1c32      	adds	r2, r6, #0
1000e4c2:	7128      	strb	r0, [r5, #4]
1000e4c4:	1ce1      	adds	r1, r4, #3
1000e4c6:	1d68      	adds	r0, r5, #5
1000e4c8:	4b02      	ldr	r3, [pc, #8]	; (1000e4d4 <gattc_disc_char_desc_ind_parser+0x30>)
1000e4ca:	4798      	blx	r3
1000e4cc:	bd70      	pop	{r4, r5, r6, pc}
1000e4ce:	46c0      	nop			; (mov r8, r8)
1000e4d0:	1000c2ad 	.word	0x1000c2ad
1000e4d4:	1000fa1b 	.word	0x1000fa1b

1000e4d8 <gattc_event_ind_and_notification_parser>:
1000e4d8:	b510      	push	{r4, lr}
1000e4da:	780c      	ldrb	r4, [r1, #0]
1000e4dc:	1c13      	adds	r3, r2, #0
1000e4de:	2c12      	cmp	r4, #18
1000e4e0:	d10e      	bne.n	1000e500 <gattc_event_ind_and_notification_parser+0x28>
1000e4e2:	0a00      	lsrs	r0, r0, #8
1000e4e4:	8010      	strh	r0, [r2, #0]
1000e4e6:	788a      	ldrb	r2, [r1, #2]
1000e4e8:	709a      	strb	r2, [r3, #2]
1000e4ea:	7948      	ldrb	r0, [r1, #5]
1000e4ec:	790c      	ldrb	r4, [r1, #4]
1000e4ee:	0200      	lsls	r0, r0, #8
1000e4f0:	4320      	orrs	r0, r4
1000e4f2:	8098      	strh	r0, [r3, #4]
1000e4f4:	3106      	adds	r1, #6
1000e4f6:	1d98      	adds	r0, r3, #6
1000e4f8:	4b0b      	ldr	r3, [pc, #44]	; (1000e528 <gattc_event_ind_and_notification_parser+0x50>)
1000e4fa:	4798      	blx	r3
1000e4fc:	221b      	movs	r2, #27
1000e4fe:	e010      	b.n	1000e522 <gattc_event_ind_and_notification_parser+0x4a>
1000e500:	2200      	movs	r2, #0
1000e502:	2c13      	cmp	r4, #19
1000e504:	d10d      	bne.n	1000e522 <gattc_event_ind_and_notification_parser+0x4a>
1000e506:	0a00      	lsrs	r0, r0, #8
1000e508:	8018      	strh	r0, [r3, #0]
1000e50a:	788a      	ldrb	r2, [r1, #2]
1000e50c:	709a      	strb	r2, [r3, #2]
1000e50e:	7908      	ldrb	r0, [r1, #4]
1000e510:	78cc      	ldrb	r4, [r1, #3]
1000e512:	0200      	lsls	r0, r0, #8
1000e514:	4320      	orrs	r0, r4
1000e516:	8098      	strh	r0, [r3, #4]
1000e518:	3106      	adds	r1, #6
1000e51a:	1d98      	adds	r0, r3, #6
1000e51c:	4b02      	ldr	r3, [pc, #8]	; (1000e528 <gattc_event_ind_and_notification_parser+0x50>)
1000e51e:	4798      	blx	r3
1000e520:	221c      	movs	r2, #28
1000e522:	1c10      	adds	r0, r2, #0
1000e524:	bd10      	pop	{r4, pc}
1000e526:	46c0      	nop			; (mov r8, r8)
1000e528:	1000fa1b 	.word	0x1000fa1b

1000e52c <gattc_complete_evt_handler>:
1000e52c:	b500      	push	{lr}
1000e52e:	0a00      	lsrs	r0, r0, #8
1000e530:	8010      	strh	r0, [r2, #0]
1000e532:	7808      	ldrb	r0, [r1, #0]
1000e534:	7090      	strb	r0, [r2, #2]
1000e536:	784b      	ldrb	r3, [r1, #1]
1000e538:	3801      	subs	r0, #1
1000e53a:	70d3      	strb	r3, [r2, #3]
1000e53c:	2813      	cmp	r0, #19
1000e53e:	d82c      	bhi.n	1000e59a <gattc_complete_evt_handler+0x6e>
1000e540:	f000 f9dc 	bl	1000e8fc <__gnu_thumb1_case_uqi>
1000e544:	0a0a0a0c 	.word	0x0a0a0a0c
1000e548:	210a0a0a 	.word	0x210a0a0a
1000e54c:	111f2121 	.word	0x111f2121
1000e550:	2b111111 	.word	0x2b111111
1000e554:	2919132b 	.word	0x2919132b
1000e558:	2017      	movs	r0, #23
1000e55a:	e01f      	b.n	1000e59c <gattc_complete_evt_handler+0x70>
1000e55c:	2024      	movs	r0, #36	; 0x24
1000e55e:	2b00      	cmp	r3, #0
1000e560:	d11c      	bne.n	1000e59c <gattc_complete_evt_handler+0x70>
1000e562:	3017      	adds	r0, #23
1000e564:	e01a      	b.n	1000e59c <gattc_complete_evt_handler+0x70>
1000e566:	2025      	movs	r0, #37	; 0x25
1000e568:	e018      	b.n	1000e59c <gattc_complete_evt_handler+0x70>
1000e56a:	4a0d      	ldr	r2, [pc, #52]	; (1000e5a0 <gattc_complete_evt_handler+0x74>)
1000e56c:	201d      	movs	r0, #29
1000e56e:	6813      	ldr	r3, [r2, #0]
1000e570:	3b01      	subs	r3, #1
1000e572:	6013      	str	r3, [r2, #0]
1000e574:	e012      	b.n	1000e59c <gattc_complete_evt_handler+0x70>
1000e576:	4a0a      	ldr	r2, [pc, #40]	; (1000e5a0 <gattc_complete_evt_handler+0x74>)
1000e578:	201e      	movs	r0, #30
1000e57a:	6813      	ldr	r3, [r2, #0]
1000e57c:	3b01      	subs	r3, #1
1000e57e:	6013      	str	r3, [r2, #0]
1000e580:	e00c      	b.n	1000e59c <gattc_complete_evt_handler+0x70>
1000e582:	2019      	movs	r0, #25
1000e584:	e00a      	b.n	1000e59c <gattc_complete_evt_handler+0x70>
1000e586:	203b      	movs	r0, #59	; 0x3b
1000e588:	2b00      	cmp	r3, #0
1000e58a:	d007      	beq.n	1000e59c <gattc_complete_evt_handler+0x70>
1000e58c:	2182      	movs	r1, #130	; 0x82
1000e58e:	0089      	lsls	r1, r1, #2
1000e590:	5453      	strb	r3, [r2, r1]
1000e592:	3823      	subs	r0, #35	; 0x23
1000e594:	e002      	b.n	1000e59c <gattc_complete_evt_handler+0x70>
1000e596:	2021      	movs	r0, #33	; 0x21
1000e598:	e000      	b.n	1000e59c <gattc_complete_evt_handler+0x70>
1000e59a:	2000      	movs	r0, #0
1000e59c:	bd00      	pop	{pc}
1000e59e:	46c0      	nop			; (mov r8, r8)
1000e5a0:	1001342c 	.word	0x1001342c

1000e5a4 <gattc_event_mtu_changed_ind_parser>:
1000e5a4:	0a00      	lsrs	r0, r0, #8
1000e5a6:	8010      	strh	r0, [r2, #0]
1000e5a8:	784b      	ldrb	r3, [r1, #1]
1000e5aa:	7809      	ldrb	r1, [r1, #0]
1000e5ac:	021b      	lsls	r3, r3, #8
1000e5ae:	430b      	orrs	r3, r1
1000e5b0:	8053      	strh	r3, [r2, #2]
1000e5b2:	4770      	bx	lr

1000e5b4 <gattc_read_ind_parser>:
1000e5b4:	0a00      	lsrs	r0, r0, #8
1000e5b6:	b508      	push	{r3, lr}
1000e5b8:	8010      	strh	r0, [r2, #0]
1000e5ba:	1c13      	adds	r3, r2, #0
1000e5bc:	2282      	movs	r2, #130	; 0x82
1000e5be:	2000      	movs	r0, #0
1000e5c0:	0092      	lsls	r2, r2, #2
1000e5c2:	5498      	strb	r0, [r3, r2]
1000e5c4:	784a      	ldrb	r2, [r1, #1]
1000e5c6:	7808      	ldrb	r0, [r1, #0]
1000e5c8:	0212      	lsls	r2, r2, #8
1000e5ca:	4302      	orrs	r2, r0
1000e5cc:	805a      	strh	r2, [r3, #2]
1000e5ce:	78ca      	ldrb	r2, [r1, #3]
1000e5d0:	7888      	ldrb	r0, [r1, #2]
1000e5d2:	0212      	lsls	r2, r2, #8
1000e5d4:	4302      	orrs	r2, r0
1000e5d6:	80da      	strh	r2, [r3, #6]
1000e5d8:	794a      	ldrb	r2, [r1, #5]
1000e5da:	7908      	ldrb	r0, [r1, #4]
1000e5dc:	0212      	lsls	r2, r2, #8
1000e5de:	4302      	orrs	r2, r0
1000e5e0:	809a      	strh	r2, [r3, #4]
1000e5e2:	3308      	adds	r3, #8
1000e5e4:	1c18      	adds	r0, r3, #0
1000e5e6:	3106      	adds	r1, #6
1000e5e8:	4b01      	ldr	r3, [pc, #4]	; (1000e5f0 <gattc_read_ind_parser+0x3c>)
1000e5ea:	4798      	blx	r3
1000e5ec:	bd08      	pop	{r3, pc}
1000e5ee:	46c0      	nop			; (mov r8, r8)
1000e5f0:	1000fa1b 	.word	0x1000fa1b

1000e5f4 <gattc_svc_changed_cfg_ind_parser>:
1000e5f4:	0a00      	lsrs	r0, r0, #8
1000e5f6:	8010      	strh	r0, [r2, #0]
1000e5f8:	784b      	ldrb	r3, [r1, #1]
1000e5fa:	7809      	ldrb	r1, [r1, #0]
1000e5fc:	021b      	lsls	r3, r3, #8
1000e5fe:	430b      	orrs	r3, r1
1000e600:	8053      	strh	r3, [r2, #2]
1000e602:	4770      	bx	lr

1000e604 <init_gattc_task_module>:
1000e604:	2300      	movs	r3, #0
1000e606:	4a02      	ldr	r2, [pc, #8]	; (1000e610 <init_gattc_task_module+0xc>)
1000e608:	8013      	strh	r3, [r2, #0]
1000e60a:	4a02      	ldr	r2, [pc, #8]	; (1000e614 <init_gattc_task_module+0x10>)
1000e60c:	8013      	strh	r3, [r2, #0]
1000e60e:	4770      	bx	lr
1000e610:	10013426 	.word	0x10013426
1000e614:	10013428 	.word	0x10013428

1000e618 <gattm_add_svc_req_handler>:
1000e618:	2200      	movs	r2, #0
1000e61a:	210b      	movs	r1, #11
1000e61c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e61e:	1c04      	adds	r4, r0, #0
1000e620:	7943      	ldrb	r3, [r0, #5]
1000e622:	b085      	sub	sp, #20
1000e624:	9301      	str	r3, [sp, #4]
1000e626:	ab02      	add	r3, sp, #8
1000e628:	71da      	strb	r2, [r3, #7]
1000e62a:	4b37      	ldr	r3, [pc, #220]	; (1000e708 <gattm_add_svc_req_handler+0xf0>)
1000e62c:	7059      	strb	r1, [r3, #1]
1000e62e:	7099      	strb	r1, [r3, #2]
1000e630:	4936      	ldr	r1, [pc, #216]	; (1000e70c <gattm_add_svc_req_handler+0xf4>)
1000e632:	701a      	strb	r2, [r3, #0]
1000e634:	8808      	ldrh	r0, [r1, #0]
1000e636:	8809      	ldrh	r1, [r1, #0]
1000e638:	70da      	strb	r2, [r3, #3]
1000e63a:	0a09      	lsrs	r1, r1, #8
1000e63c:	7118      	strb	r0, [r3, #4]
1000e63e:	7159      	strb	r1, [r3, #5]
1000e640:	8821      	ldrh	r1, [r4, #0]
1000e642:	7219      	strb	r1, [r3, #8]
1000e644:	8821      	ldrh	r1, [r4, #0]
1000e646:	0a09      	lsrs	r1, r1, #8
1000e648:	7259      	strb	r1, [r3, #9]
1000e64a:	8861      	ldrh	r1, [r4, #2]
1000e64c:	7299      	strb	r1, [r3, #10]
1000e64e:	8861      	ldrh	r1, [r4, #2]
1000e650:	0a09      	lsrs	r1, r1, #8
1000e652:	72d9      	strb	r1, [r3, #11]
1000e654:	7921      	ldrb	r1, [r4, #4]
1000e656:	7319      	strb	r1, [r3, #12]
1000e658:	4669      	mov	r1, sp
1000e65a:	7909      	ldrb	r1, [r1, #4]
1000e65c:	7359      	strb	r1, [r3, #13]
1000e65e:	18a1      	adds	r1, r4, r2
1000e660:	7988      	ldrb	r0, [r1, #6]
1000e662:	1899      	adds	r1, r3, r2
1000e664:	3201      	adds	r2, #1
1000e666:	7388      	strb	r0, [r1, #14]
1000e668:	2a10      	cmp	r2, #16
1000e66a:	d1f8      	bne.n	1000e65e <gattm_add_svc_req_handler+0x46>
1000e66c:	1c27      	adds	r7, r4, #0
1000e66e:	2300      	movs	r3, #0
1000e670:	251e      	movs	r5, #30
1000e672:	3716      	adds	r7, #22
1000e674:	9300      	str	r3, [sp, #0]
1000e676:	9b00      	ldr	r3, [sp, #0]
1000e678:	9a01      	ldr	r2, [sp, #4]
1000e67a:	4e23      	ldr	r6, [pc, #140]	; (1000e708 <gattm_add_svc_req_handler+0xf0>)
1000e67c:	4293      	cmp	r3, r2
1000e67e:	da21      	bge.n	1000e6c4 <gattm_add_svc_req_handler+0xac>
1000e680:	1c39      	adds	r1, r7, #0
1000e682:	1970      	adds	r0, r6, r5
1000e684:	2210      	movs	r2, #16
1000e686:	4b22      	ldr	r3, [pc, #136]	; (1000e710 <gattm_add_svc_req_handler+0xf8>)
1000e688:	4798      	blx	r3
1000e68a:	1c2b      	adds	r3, r5, #0
1000e68c:	8a3a      	ldrh	r2, [r7, #16]
1000e68e:	3310      	adds	r3, #16
1000e690:	b29b      	uxth	r3, r3
1000e692:	54f2      	strb	r2, [r6, r3]
1000e694:	1c2b      	adds	r3, r5, #0
1000e696:	8a3a      	ldrh	r2, [r7, #16]
1000e698:	3311      	adds	r3, #17
1000e69a:	b29b      	uxth	r3, r3
1000e69c:	0a12      	lsrs	r2, r2, #8
1000e69e:	54f2      	strb	r2, [r6, r3]
1000e6a0:	1c2a      	adds	r2, r5, #0
1000e6a2:	1c2b      	adds	r3, r5, #0
1000e6a4:	8a79      	ldrh	r1, [r7, #18]
1000e6a6:	3212      	adds	r2, #18
1000e6a8:	b292      	uxth	r2, r2
1000e6aa:	54b1      	strb	r1, [r6, r2]
1000e6ac:	8a7a      	ldrh	r2, [r7, #18]
1000e6ae:	3313      	adds	r3, #19
1000e6b0:	b29b      	uxth	r3, r3
1000e6b2:	0a12      	lsrs	r2, r2, #8
1000e6b4:	54f2      	strb	r2, [r6, r3]
1000e6b6:	9b00      	ldr	r3, [sp, #0]
1000e6b8:	3514      	adds	r5, #20
1000e6ba:	3301      	adds	r3, #1
1000e6bc:	b2ad      	uxth	r5, r5
1000e6be:	9300      	str	r3, [sp, #0]
1000e6c0:	3714      	adds	r7, #20
1000e6c2:	e7d8      	b.n	1000e676 <gattm_add_svc_req_handler+0x5e>
1000e6c4:	2114      	movs	r1, #20
1000e6c6:	4d13      	ldr	r5, [pc, #76]	; (1000e714 <gattm_add_svc_req_handler+0xfc>)
1000e6c8:	4b13      	ldr	r3, [pc, #76]	; (1000e718 <gattm_add_svc_req_handler+0x100>)
1000e6ca:	4351      	muls	r1, r2
1000e6cc:	802b      	strh	r3, [r5, #0]
1000e6ce:	230b      	movs	r3, #11
1000e6d0:	311e      	adds	r1, #30
1000e6d2:	80ab      	strh	r3, [r5, #4]
1000e6d4:	1c0b      	adds	r3, r1, #0
1000e6d6:	3b08      	subs	r3, #8
1000e6d8:	71b3      	strb	r3, [r6, #6]
1000e6da:	121b      	asrs	r3, r3, #8
1000e6dc:	71f3      	strb	r3, [r6, #7]
1000e6de:	1c30      	adds	r0, r6, #0
1000e6e0:	4b0e      	ldr	r3, [pc, #56]	; (1000e71c <gattm_add_svc_req_handler+0x104>)
1000e6e2:	4798      	blx	r3
1000e6e4:	ab02      	add	r3, sp, #8
1000e6e6:	1dde      	adds	r6, r3, #7
1000e6e8:	1c30      	adds	r0, r6, #0
1000e6ea:	4b0d      	ldr	r3, [pc, #52]	; (1000e720 <gattm_add_svc_req_handler+0x108>)
1000e6ec:	4798      	blx	r3
1000e6ee:	7833      	ldrb	r3, [r6, #0]
1000e6f0:	20e2      	movs	r0, #226	; 0xe2
1000e6f2:	2b00      	cmp	r3, #0
1000e6f4:	d106      	bne.n	1000e704 <gattm_add_svc_req_handler+0xec>
1000e6f6:	68aa      	ldr	r2, [r5, #8]
1000e6f8:	7853      	ldrb	r3, [r2, #1]
1000e6fa:	7811      	ldrb	r1, [r2, #0]
1000e6fc:	021b      	lsls	r3, r3, #8
1000e6fe:	430b      	orrs	r3, r1
1000e700:	8023      	strh	r3, [r4, #0]
1000e702:	7890      	ldrb	r0, [r2, #2]
1000e704:	b005      	add	sp, #20
1000e706:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e708:	10014484 	.word	0x10014484
1000e70c:	10014114 	.word	0x10014114
1000e710:	1000fa1b 	.word	0x1000fa1b
1000e714:	10014108 	.word	0x10014108
1000e718:	00000b01 	.word	0x00000b01
1000e71c:	1000cf6d 	.word	0x1000cf6d
1000e720:	1000cfd1 	.word	0x1000cfd1

1000e724 <gattm_add_attribute_req_handler>:
1000e724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e726:	1c1f      	adds	r7, r3, #0
1000e728:	4b16      	ldr	r3, [pc, #88]	; (1000e784 <gattm_add_attribute_req_handler+0x60>)
1000e72a:	9100      	str	r1, [sp, #0]
1000e72c:	9201      	str	r2, [sp, #4]
1000e72e:	1c05      	adds	r5, r0, #0
1000e730:	7946      	ldrb	r6, [r0, #5]
1000e732:	6818      	ldr	r0, [r3, #0]
1000e734:	2114      	movs	r1, #20
1000e736:	4b14      	ldr	r3, [pc, #80]	; (1000e788 <gattm_add_attribute_req_handler+0x64>)
1000e738:	382a      	subs	r0, #42	; 0x2a
1000e73a:	4798      	blx	r3
1000e73c:	2311      	movs	r3, #17
1000e73e:	4286      	cmp	r6, r0
1000e740:	d21e      	bcs.n	1000e780 <gattm_add_attribute_req_handler+0x5c>
1000e742:	2414      	movs	r4, #20
1000e744:	4366      	muls	r6, r4
1000e746:	19a8      	adds	r0, r5, r6
1000e748:	2100      	movs	r1, #0
1000e74a:	2210      	movs	r2, #16
1000e74c:	4b0f      	ldr	r3, [pc, #60]	; (1000e78c <gattm_add_attribute_req_handler+0x68>)
1000e74e:	3016      	adds	r0, #22
1000e750:	4798      	blx	r3
1000e752:	7968      	ldrb	r0, [r5, #5]
1000e754:	1c3a      	adds	r2, r7, #0
1000e756:	4360      	muls	r0, r4
1000e758:	1828      	adds	r0, r5, r0
1000e75a:	4b0d      	ldr	r3, [pc, #52]	; (1000e790 <gattm_add_attribute_req_handler+0x6c>)
1000e75c:	3016      	adds	r0, #22
1000e75e:	9908      	ldr	r1, [sp, #32]
1000e760:	4798      	blx	r3
1000e762:	466a      	mov	r2, sp
1000e764:	796b      	ldrb	r3, [r5, #5]
1000e766:	8812      	ldrh	r2, [r2, #0]
1000e768:	435c      	muls	r4, r3
1000e76a:	192c      	adds	r4, r5, r4
1000e76c:	8522      	strh	r2, [r4, #40]	; 0x28
1000e76e:	466a      	mov	r2, sp
1000e770:	8892      	ldrh	r2, [r2, #4]
1000e772:	84e2      	strh	r2, [r4, #38]	; 0x26
1000e774:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000e776:	8013      	strh	r3, [r2, #0]
1000e778:	796b      	ldrb	r3, [r5, #5]
1000e77a:	3301      	adds	r3, #1
1000e77c:	716b      	strb	r3, [r5, #5]
1000e77e:	2300      	movs	r3, #0
1000e780:	1c18      	adds	r0, r3, #0
1000e782:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e784:	1001339c 	.word	0x1001339c
1000e788:	1000e911 	.word	0x1000e911
1000e78c:	1000fa2d 	.word	0x1000fa2d
1000e790:	1000fa1b 	.word	0x1000fa1b

1000e794 <gattm_att_set_value_req_handler>:
1000e794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e796:	466b      	mov	r3, sp
1000e798:	1dde      	adds	r6, r3, #7
1000e79a:	2300      	movs	r3, #0
1000e79c:	1c0d      	adds	r5, r1, #0
1000e79e:	210c      	movs	r1, #12
1000e7a0:	270b      	movs	r7, #11
1000e7a2:	4c17      	ldr	r4, [pc, #92]	; (1000e800 <gattm_att_set_value_req_handler+0x6c>)
1000e7a4:	7033      	strb	r3, [r6, #0]
1000e7a6:	70e3      	strb	r3, [r4, #3]
1000e7a8:	4b16      	ldr	r3, [pc, #88]	; (1000e804 <gattm_att_set_value_req_handler+0x70>)
1000e7aa:	7021      	strb	r1, [r4, #0]
1000e7ac:	8819      	ldrh	r1, [r3, #0]
1000e7ae:	881b      	ldrh	r3, [r3, #0]
1000e7b0:	7220      	strb	r0, [r4, #8]
1000e7b2:	0a1b      	lsrs	r3, r3, #8
1000e7b4:	7163      	strb	r3, [r4, #5]
1000e7b6:	0a00      	lsrs	r0, r0, #8
1000e7b8:	0a2b      	lsrs	r3, r5, #8
1000e7ba:	7121      	strb	r1, [r4, #4]
1000e7bc:	7260      	strb	r0, [r4, #9]
1000e7be:	1c11      	adds	r1, r2, #0
1000e7c0:	72a5      	strb	r5, [r4, #10]
1000e7c2:	1c2a      	adds	r2, r5, #0
1000e7c4:	72e3      	strb	r3, [r4, #11]
1000e7c6:	350c      	adds	r5, #12
1000e7c8:	4b0f      	ldr	r3, [pc, #60]	; (1000e808 <gattm_att_set_value_req_handler+0x74>)
1000e7ca:	4810      	ldr	r0, [pc, #64]	; (1000e80c <gattm_att_set_value_req_handler+0x78>)
1000e7cc:	7067      	strb	r7, [r4, #1]
1000e7ce:	70a7      	strb	r7, [r4, #2]
1000e7d0:	4798      	blx	r3
1000e7d2:	b2a9      	uxth	r1, r5
1000e7d4:	4b0e      	ldr	r3, [pc, #56]	; (1000e810 <gattm_att_set_value_req_handler+0x7c>)
1000e7d6:	4d0f      	ldr	r5, [pc, #60]	; (1000e814 <gattm_att_set_value_req_handler+0x80>)
1000e7d8:	1c20      	adds	r0, r4, #0
1000e7da:	802b      	strh	r3, [r5, #0]
1000e7dc:	1c0b      	adds	r3, r1, #0
1000e7de:	3b08      	subs	r3, #8
1000e7e0:	71a3      	strb	r3, [r4, #6]
1000e7e2:	121b      	asrs	r3, r3, #8
1000e7e4:	71e3      	strb	r3, [r4, #7]
1000e7e6:	4b0c      	ldr	r3, [pc, #48]	; (1000e818 <gattm_att_set_value_req_handler+0x84>)
1000e7e8:	80af      	strh	r7, [r5, #4]
1000e7ea:	4798      	blx	r3
1000e7ec:	1c30      	adds	r0, r6, #0
1000e7ee:	4b0b      	ldr	r3, [pc, #44]	; (1000e81c <gattm_att_set_value_req_handler+0x88>)
1000e7f0:	4798      	blx	r3
1000e7f2:	7833      	ldrb	r3, [r6, #0]
1000e7f4:	20e2      	movs	r0, #226	; 0xe2
1000e7f6:	2b00      	cmp	r3, #0
1000e7f8:	d101      	bne.n	1000e7fe <gattm_att_set_value_req_handler+0x6a>
1000e7fa:	68ab      	ldr	r3, [r5, #8]
1000e7fc:	7898      	ldrb	r0, [r3, #2]
1000e7fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e800:	10014484 	.word	0x10014484
1000e804:	10014114 	.word	0x10014114
1000e808:	1000fa1b 	.word	0x1000fa1b
1000e80c:	10014490 	.word	0x10014490
1000e810:	00000b0d 	.word	0x00000b0d
1000e814:	10014108 	.word	0x10014108
1000e818:	1000cf6d 	.word	0x1000cf6d
1000e81c:	1000cfd1 	.word	0x1000cfd1

1000e820 <gattm_att_get_value_req_handler>:
1000e820:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e822:	b085      	sub	sp, #20
1000e824:	9201      	str	r2, [sp, #4]
1000e826:	220a      	movs	r2, #10
1000e828:	1c04      	adds	r4, r0, #0
1000e82a:	481d      	ldr	r0, [pc, #116]	; (1000e8a0 <gattm_att_get_value_req_handler+0x80>)
1000e82c:	ab02      	add	r3, sp, #8
1000e82e:	1dde      	adds	r6, r3, #7
1000e830:	7002      	strb	r2, [r0, #0]
1000e832:	2300      	movs	r3, #0
1000e834:	220b      	movs	r2, #11
1000e836:	4d1b      	ldr	r5, [pc, #108]	; (1000e8a4 <gattm_att_get_value_req_handler+0x84>)
1000e838:	1c0f      	adds	r7, r1, #0
1000e83a:	8829      	ldrh	r1, [r5, #0]
1000e83c:	882d      	ldrh	r5, [r5, #0]
1000e83e:	7101      	strb	r1, [r0, #4]
1000e840:	0a2d      	lsrs	r5, r5, #8
1000e842:	7145      	strb	r5, [r0, #5]
1000e844:	0a25      	lsrs	r5, r4, #8
1000e846:	7245      	strb	r5, [r0, #9]
1000e848:	4917      	ldr	r1, [pc, #92]	; (1000e8a8 <gattm_att_get_value_req_handler+0x88>)
1000e84a:	4d18      	ldr	r5, [pc, #96]	; (1000e8ac <gattm_att_get_value_req_handler+0x8c>)
1000e84c:	7033      	strb	r3, [r6, #0]
1000e84e:	7042      	strb	r2, [r0, #1]
1000e850:	7082      	strb	r2, [r0, #2]
1000e852:	70c3      	strb	r3, [r0, #3]
1000e854:	8029      	strh	r1, [r5, #0]
1000e856:	80aa      	strh	r2, [r5, #4]
1000e858:	71c3      	strb	r3, [r0, #7]
1000e85a:	3a09      	subs	r2, #9
1000e85c:	210a      	movs	r1, #10
1000e85e:	4b14      	ldr	r3, [pc, #80]	; (1000e8b0 <gattm_att_get_value_req_handler+0x90>)
1000e860:	7182      	strb	r2, [r0, #6]
1000e862:	7204      	strb	r4, [r0, #8]
1000e864:	4798      	blx	r3
1000e866:	1c30      	adds	r0, r6, #0
1000e868:	4b12      	ldr	r3, [pc, #72]	; (1000e8b4 <gattm_att_get_value_req_handler+0x94>)
1000e86a:	4798      	blx	r3
1000e86c:	7833      	ldrb	r3, [r6, #0]
1000e86e:	20e2      	movs	r0, #226	; 0xe2
1000e870:	2b00      	cmp	r3, #0
1000e872:	d112      	bne.n	1000e89a <gattm_att_get_value_req_handler+0x7a>
1000e874:	68a9      	ldr	r1, [r5, #8]
1000e876:	9801      	ldr	r0, [sp, #4]
1000e878:	784d      	ldrb	r5, [r1, #1]
1000e87a:	780b      	ldrb	r3, [r1, #0]
1000e87c:	78ca      	ldrb	r2, [r1, #3]
1000e87e:	022d      	lsls	r5, r5, #8
1000e880:	431d      	orrs	r5, r3
1000e882:	788b      	ldrb	r3, [r1, #2]
1000e884:	0212      	lsls	r2, r2, #8
1000e886:	431a      	orrs	r2, r3
1000e888:	803a      	strh	r2, [r7, #0]
1000e88a:	790e      	ldrb	r6, [r1, #4]
1000e88c:	4b0a      	ldr	r3, [pc, #40]	; (1000e8b8 <gattm_att_get_value_req_handler+0x98>)
1000e88e:	3105      	adds	r1, #5
1000e890:	4798      	blx	r3
1000e892:	20e2      	movs	r0, #226	; 0xe2
1000e894:	42ac      	cmp	r4, r5
1000e896:	d100      	bne.n	1000e89a <gattm_att_get_value_req_handler+0x7a>
1000e898:	1c30      	adds	r0, r6, #0
1000e89a:	b005      	add	sp, #20
1000e89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e89e:	46c0      	nop			; (mov r8, r8)
1000e8a0:	10014484 	.word	0x10014484
1000e8a4:	10014114 	.word	0x10014114
1000e8a8:	00000b0b 	.word	0x00000b0b
1000e8ac:	10014108 	.word	0x10014108
1000e8b0:	1000cf6d 	.word	0x1000cf6d
1000e8b4:	1000cfd1 	.word	0x1000cfd1
1000e8b8:	1000fa1b 	.word	0x1000fa1b

1000e8bc <htpt_enable_rsp_handler>:
1000e8bc:	780b      	ldrb	r3, [r1, #0]
1000e8be:	7013      	strb	r3, [r2, #0]
1000e8c0:	784b      	ldrb	r3, [r1, #1]
1000e8c2:	7053      	strb	r3, [r2, #1]
1000e8c4:	4770      	bx	lr

1000e8c6 <htpt_temp_send_rsp_handler>:
1000e8c6:	780b      	ldrb	r3, [r1, #0]
1000e8c8:	7013      	strb	r3, [r2, #0]
1000e8ca:	4770      	bx	lr

1000e8cc <htpt_meas_intv_upd_rsp_handler>:
1000e8cc:	780b      	ldrb	r3, [r1, #0]
1000e8ce:	7013      	strb	r3, [r2, #0]
1000e8d0:	4770      	bx	lr

1000e8d2 <htpt_meas_intv_chg_req_ind_handler>:
1000e8d2:	78cb      	ldrb	r3, [r1, #3]
1000e8d4:	7889      	ldrb	r1, [r1, #2]
1000e8d6:	021b      	lsls	r3, r3, #8
1000e8d8:	430b      	orrs	r3, r1
1000e8da:	8013      	strh	r3, [r2, #0]
1000e8dc:	4770      	bx	lr

1000e8de <htpt_cfg_indntf_ind_handler>:
1000e8de:	780b      	ldrb	r3, [r1, #0]
1000e8e0:	7013      	strb	r3, [r2, #0]
1000e8e2:	784b      	ldrb	r3, [r1, #1]
1000e8e4:	7053      	strb	r3, [r2, #1]
1000e8e6:	4770      	bx	lr

1000e8e8 <__gnu_thumb1_case_sqi>:
1000e8e8:	b402      	push	{r1}
1000e8ea:	4671      	mov	r1, lr
1000e8ec:	0849      	lsrs	r1, r1, #1
1000e8ee:	0049      	lsls	r1, r1, #1
1000e8f0:	5609      	ldrsb	r1, [r1, r0]
1000e8f2:	0049      	lsls	r1, r1, #1
1000e8f4:	448e      	add	lr, r1
1000e8f6:	bc02      	pop	{r1}
1000e8f8:	4770      	bx	lr
1000e8fa:	46c0      	nop			; (mov r8, r8)

1000e8fc <__gnu_thumb1_case_uqi>:
1000e8fc:	b402      	push	{r1}
1000e8fe:	4671      	mov	r1, lr
1000e900:	0849      	lsrs	r1, r1, #1
1000e902:	0049      	lsls	r1, r1, #1
1000e904:	5c09      	ldrb	r1, [r1, r0]
1000e906:	0049      	lsls	r1, r1, #1
1000e908:	448e      	add	lr, r1
1000e90a:	bc02      	pop	{r1}
1000e90c:	4770      	bx	lr
1000e90e:	46c0      	nop			; (mov r8, r8)

1000e910 <__aeabi_uidiv>:
1000e910:	2200      	movs	r2, #0
1000e912:	0843      	lsrs	r3, r0, #1
1000e914:	428b      	cmp	r3, r1
1000e916:	d374      	bcc.n	1000ea02 <__aeabi_uidiv+0xf2>
1000e918:	0903      	lsrs	r3, r0, #4
1000e91a:	428b      	cmp	r3, r1
1000e91c:	d35f      	bcc.n	1000e9de <__aeabi_uidiv+0xce>
1000e91e:	0a03      	lsrs	r3, r0, #8
1000e920:	428b      	cmp	r3, r1
1000e922:	d344      	bcc.n	1000e9ae <__aeabi_uidiv+0x9e>
1000e924:	0b03      	lsrs	r3, r0, #12
1000e926:	428b      	cmp	r3, r1
1000e928:	d328      	bcc.n	1000e97c <__aeabi_uidiv+0x6c>
1000e92a:	0c03      	lsrs	r3, r0, #16
1000e92c:	428b      	cmp	r3, r1
1000e92e:	d30d      	bcc.n	1000e94c <__aeabi_uidiv+0x3c>
1000e930:	22ff      	movs	r2, #255	; 0xff
1000e932:	0209      	lsls	r1, r1, #8
1000e934:	ba12      	rev	r2, r2
1000e936:	0c03      	lsrs	r3, r0, #16
1000e938:	428b      	cmp	r3, r1
1000e93a:	d302      	bcc.n	1000e942 <__aeabi_uidiv+0x32>
1000e93c:	1212      	asrs	r2, r2, #8
1000e93e:	0209      	lsls	r1, r1, #8
1000e940:	d065      	beq.n	1000ea0e <__aeabi_uidiv+0xfe>
1000e942:	0b03      	lsrs	r3, r0, #12
1000e944:	428b      	cmp	r3, r1
1000e946:	d319      	bcc.n	1000e97c <__aeabi_uidiv+0x6c>
1000e948:	e000      	b.n	1000e94c <__aeabi_uidiv+0x3c>
1000e94a:	0a09      	lsrs	r1, r1, #8
1000e94c:	0bc3      	lsrs	r3, r0, #15
1000e94e:	428b      	cmp	r3, r1
1000e950:	d301      	bcc.n	1000e956 <__aeabi_uidiv+0x46>
1000e952:	03cb      	lsls	r3, r1, #15
1000e954:	1ac0      	subs	r0, r0, r3
1000e956:	4152      	adcs	r2, r2
1000e958:	0b83      	lsrs	r3, r0, #14
1000e95a:	428b      	cmp	r3, r1
1000e95c:	d301      	bcc.n	1000e962 <__aeabi_uidiv+0x52>
1000e95e:	038b      	lsls	r3, r1, #14
1000e960:	1ac0      	subs	r0, r0, r3
1000e962:	4152      	adcs	r2, r2
1000e964:	0b43      	lsrs	r3, r0, #13
1000e966:	428b      	cmp	r3, r1
1000e968:	d301      	bcc.n	1000e96e <__aeabi_uidiv+0x5e>
1000e96a:	034b      	lsls	r3, r1, #13
1000e96c:	1ac0      	subs	r0, r0, r3
1000e96e:	4152      	adcs	r2, r2
1000e970:	0b03      	lsrs	r3, r0, #12
1000e972:	428b      	cmp	r3, r1
1000e974:	d301      	bcc.n	1000e97a <__aeabi_uidiv+0x6a>
1000e976:	030b      	lsls	r3, r1, #12
1000e978:	1ac0      	subs	r0, r0, r3
1000e97a:	4152      	adcs	r2, r2
1000e97c:	0ac3      	lsrs	r3, r0, #11
1000e97e:	428b      	cmp	r3, r1
1000e980:	d301      	bcc.n	1000e986 <__aeabi_uidiv+0x76>
1000e982:	02cb      	lsls	r3, r1, #11
1000e984:	1ac0      	subs	r0, r0, r3
1000e986:	4152      	adcs	r2, r2
1000e988:	0a83      	lsrs	r3, r0, #10
1000e98a:	428b      	cmp	r3, r1
1000e98c:	d301      	bcc.n	1000e992 <__aeabi_uidiv+0x82>
1000e98e:	028b      	lsls	r3, r1, #10
1000e990:	1ac0      	subs	r0, r0, r3
1000e992:	4152      	adcs	r2, r2
1000e994:	0a43      	lsrs	r3, r0, #9
1000e996:	428b      	cmp	r3, r1
1000e998:	d301      	bcc.n	1000e99e <__aeabi_uidiv+0x8e>
1000e99a:	024b      	lsls	r3, r1, #9
1000e99c:	1ac0      	subs	r0, r0, r3
1000e99e:	4152      	adcs	r2, r2
1000e9a0:	0a03      	lsrs	r3, r0, #8
1000e9a2:	428b      	cmp	r3, r1
1000e9a4:	d301      	bcc.n	1000e9aa <__aeabi_uidiv+0x9a>
1000e9a6:	020b      	lsls	r3, r1, #8
1000e9a8:	1ac0      	subs	r0, r0, r3
1000e9aa:	4152      	adcs	r2, r2
1000e9ac:	d2cd      	bcs.n	1000e94a <__aeabi_uidiv+0x3a>
1000e9ae:	09c3      	lsrs	r3, r0, #7
1000e9b0:	428b      	cmp	r3, r1
1000e9b2:	d301      	bcc.n	1000e9b8 <__aeabi_uidiv+0xa8>
1000e9b4:	01cb      	lsls	r3, r1, #7
1000e9b6:	1ac0      	subs	r0, r0, r3
1000e9b8:	4152      	adcs	r2, r2
1000e9ba:	0983      	lsrs	r3, r0, #6
1000e9bc:	428b      	cmp	r3, r1
1000e9be:	d301      	bcc.n	1000e9c4 <__aeabi_uidiv+0xb4>
1000e9c0:	018b      	lsls	r3, r1, #6
1000e9c2:	1ac0      	subs	r0, r0, r3
1000e9c4:	4152      	adcs	r2, r2
1000e9c6:	0943      	lsrs	r3, r0, #5
1000e9c8:	428b      	cmp	r3, r1
1000e9ca:	d301      	bcc.n	1000e9d0 <__aeabi_uidiv+0xc0>
1000e9cc:	014b      	lsls	r3, r1, #5
1000e9ce:	1ac0      	subs	r0, r0, r3
1000e9d0:	4152      	adcs	r2, r2
1000e9d2:	0903      	lsrs	r3, r0, #4
1000e9d4:	428b      	cmp	r3, r1
1000e9d6:	d301      	bcc.n	1000e9dc <__aeabi_uidiv+0xcc>
1000e9d8:	010b      	lsls	r3, r1, #4
1000e9da:	1ac0      	subs	r0, r0, r3
1000e9dc:	4152      	adcs	r2, r2
1000e9de:	08c3      	lsrs	r3, r0, #3
1000e9e0:	428b      	cmp	r3, r1
1000e9e2:	d301      	bcc.n	1000e9e8 <__aeabi_uidiv+0xd8>
1000e9e4:	00cb      	lsls	r3, r1, #3
1000e9e6:	1ac0      	subs	r0, r0, r3
1000e9e8:	4152      	adcs	r2, r2
1000e9ea:	0883      	lsrs	r3, r0, #2
1000e9ec:	428b      	cmp	r3, r1
1000e9ee:	d301      	bcc.n	1000e9f4 <__aeabi_uidiv+0xe4>
1000e9f0:	008b      	lsls	r3, r1, #2
1000e9f2:	1ac0      	subs	r0, r0, r3
1000e9f4:	4152      	adcs	r2, r2
1000e9f6:	0843      	lsrs	r3, r0, #1
1000e9f8:	428b      	cmp	r3, r1
1000e9fa:	d301      	bcc.n	1000ea00 <__aeabi_uidiv+0xf0>
1000e9fc:	004b      	lsls	r3, r1, #1
1000e9fe:	1ac0      	subs	r0, r0, r3
1000ea00:	4152      	adcs	r2, r2
1000ea02:	1a41      	subs	r1, r0, r1
1000ea04:	d200      	bcs.n	1000ea08 <__aeabi_uidiv+0xf8>
1000ea06:	4601      	mov	r1, r0
1000ea08:	4152      	adcs	r2, r2
1000ea0a:	4610      	mov	r0, r2
1000ea0c:	4770      	bx	lr
1000ea0e:	e7ff      	b.n	1000ea10 <__aeabi_uidiv+0x100>
1000ea10:	b501      	push	{r0, lr}
1000ea12:	2000      	movs	r0, #0
1000ea14:	f000 f806 	bl	1000ea24 <__aeabi_idiv0>
1000ea18:	bd02      	pop	{r1, pc}
1000ea1a:	46c0      	nop			; (mov r8, r8)

1000ea1c <__aeabi_uidivmod>:
1000ea1c:	2900      	cmp	r1, #0
1000ea1e:	d0f7      	beq.n	1000ea10 <__aeabi_uidiv+0x100>
1000ea20:	e776      	b.n	1000e910 <__aeabi_uidiv>
1000ea22:	4770      	bx	lr

1000ea24 <__aeabi_idiv0>:
1000ea24:	4770      	bx	lr
1000ea26:	46c0      	nop			; (mov r8, r8)

1000ea28 <__aeabi_d2uiz>:
1000ea28:	b570      	push	{r4, r5, r6, lr}
1000ea2a:	2200      	movs	r2, #0
1000ea2c:	4b0c      	ldr	r3, [pc, #48]	; (1000ea60 <__aeabi_d2uiz+0x38>)
1000ea2e:	0004      	movs	r4, r0
1000ea30:	000d      	movs	r5, r1
1000ea32:	f000 fe87 	bl	1000f744 <__aeabi_dcmpge>
1000ea36:	2800      	cmp	r0, #0
1000ea38:	d104      	bne.n	1000ea44 <__aeabi_d2uiz+0x1c>
1000ea3a:	0020      	movs	r0, r4
1000ea3c:	0029      	movs	r1, r5
1000ea3e:	f000 fddf 	bl	1000f600 <__aeabi_d2iz>
1000ea42:	bd70      	pop	{r4, r5, r6, pc}
1000ea44:	4b06      	ldr	r3, [pc, #24]	; (1000ea60 <__aeabi_d2uiz+0x38>)
1000ea46:	2200      	movs	r2, #0
1000ea48:	0020      	movs	r0, r4
1000ea4a:	0029      	movs	r1, r5
1000ea4c:	f000 fa84 	bl	1000ef58 <__aeabi_dsub>
1000ea50:	f000 fdd6 	bl	1000f600 <__aeabi_d2iz>
1000ea54:	2380      	movs	r3, #128	; 0x80
1000ea56:	061b      	lsls	r3, r3, #24
1000ea58:	469c      	mov	ip, r3
1000ea5a:	4460      	add	r0, ip
1000ea5c:	e7f1      	b.n	1000ea42 <__aeabi_d2uiz+0x1a>
1000ea5e:	46c0      	nop			; (mov r8, r8)
1000ea60:	41e00000 	.word	0x41e00000

1000ea64 <__aeabi_dmul>:
1000ea64:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ea66:	465f      	mov	r7, fp
1000ea68:	4656      	mov	r6, sl
1000ea6a:	464d      	mov	r5, r9
1000ea6c:	4644      	mov	r4, r8
1000ea6e:	b4f0      	push	{r4, r5, r6, r7}
1000ea70:	030d      	lsls	r5, r1, #12
1000ea72:	4699      	mov	r9, r3
1000ea74:	004e      	lsls	r6, r1, #1
1000ea76:	0b2b      	lsrs	r3, r5, #12
1000ea78:	b087      	sub	sp, #28
1000ea7a:	0007      	movs	r7, r0
1000ea7c:	4692      	mov	sl, r2
1000ea7e:	4680      	mov	r8, r0
1000ea80:	469b      	mov	fp, r3
1000ea82:	0d76      	lsrs	r6, r6, #21
1000ea84:	0fcc      	lsrs	r4, r1, #31
1000ea86:	2e00      	cmp	r6, #0
1000ea88:	d069      	beq.n	1000eb5e <__aeabi_dmul+0xfa>
1000ea8a:	4b6d      	ldr	r3, [pc, #436]	; (1000ec40 <__aeabi_dmul+0x1dc>)
1000ea8c:	429e      	cmp	r6, r3
1000ea8e:	d035      	beq.n	1000eafc <__aeabi_dmul+0x98>
1000ea90:	465b      	mov	r3, fp
1000ea92:	2280      	movs	r2, #128	; 0x80
1000ea94:	00dd      	lsls	r5, r3, #3
1000ea96:	0412      	lsls	r2, r2, #16
1000ea98:	0f43      	lsrs	r3, r0, #29
1000ea9a:	4313      	orrs	r3, r2
1000ea9c:	432b      	orrs	r3, r5
1000ea9e:	469b      	mov	fp, r3
1000eaa0:	00c3      	lsls	r3, r0, #3
1000eaa2:	4698      	mov	r8, r3
1000eaa4:	4b67      	ldr	r3, [pc, #412]	; (1000ec44 <__aeabi_dmul+0x1e0>)
1000eaa6:	2700      	movs	r7, #0
1000eaa8:	469c      	mov	ip, r3
1000eaaa:	2300      	movs	r3, #0
1000eaac:	4466      	add	r6, ip
1000eaae:	9301      	str	r3, [sp, #4]
1000eab0:	464a      	mov	r2, r9
1000eab2:	0315      	lsls	r5, r2, #12
1000eab4:	0050      	lsls	r0, r2, #1
1000eab6:	0fd2      	lsrs	r2, r2, #31
1000eab8:	4653      	mov	r3, sl
1000eaba:	0b2d      	lsrs	r5, r5, #12
1000eabc:	0d40      	lsrs	r0, r0, #21
1000eabe:	4691      	mov	r9, r2
1000eac0:	d100      	bne.n	1000eac4 <__aeabi_dmul+0x60>
1000eac2:	e076      	b.n	1000ebb2 <__aeabi_dmul+0x14e>
1000eac4:	4a5e      	ldr	r2, [pc, #376]	; (1000ec40 <__aeabi_dmul+0x1dc>)
1000eac6:	4290      	cmp	r0, r2
1000eac8:	d06c      	beq.n	1000eba4 <__aeabi_dmul+0x140>
1000eaca:	2280      	movs	r2, #128	; 0x80
1000eacc:	0f5b      	lsrs	r3, r3, #29
1000eace:	0412      	lsls	r2, r2, #16
1000ead0:	4313      	orrs	r3, r2
1000ead2:	4a5c      	ldr	r2, [pc, #368]	; (1000ec44 <__aeabi_dmul+0x1e0>)
1000ead4:	00ed      	lsls	r5, r5, #3
1000ead6:	4694      	mov	ip, r2
1000ead8:	431d      	orrs	r5, r3
1000eada:	4653      	mov	r3, sl
1000eadc:	2200      	movs	r2, #0
1000eade:	00db      	lsls	r3, r3, #3
1000eae0:	4460      	add	r0, ip
1000eae2:	4649      	mov	r1, r9
1000eae4:	1836      	adds	r6, r6, r0
1000eae6:	1c70      	adds	r0, r6, #1
1000eae8:	4061      	eors	r1, r4
1000eaea:	9002      	str	r0, [sp, #8]
1000eaec:	4317      	orrs	r7, r2
1000eaee:	2f0f      	cmp	r7, #15
1000eaf0:	d900      	bls.n	1000eaf4 <__aeabi_dmul+0x90>
1000eaf2:	e0af      	b.n	1000ec54 <__aeabi_dmul+0x1f0>
1000eaf4:	4854      	ldr	r0, [pc, #336]	; (1000ec48 <__aeabi_dmul+0x1e4>)
1000eaf6:	00bf      	lsls	r7, r7, #2
1000eaf8:	59c7      	ldr	r7, [r0, r7]
1000eafa:	46bf      	mov	pc, r7
1000eafc:	465b      	mov	r3, fp
1000eafe:	431f      	orrs	r7, r3
1000eb00:	d000      	beq.n	1000eb04 <__aeabi_dmul+0xa0>
1000eb02:	e088      	b.n	1000ec16 <__aeabi_dmul+0x1b2>
1000eb04:	2300      	movs	r3, #0
1000eb06:	469b      	mov	fp, r3
1000eb08:	4698      	mov	r8, r3
1000eb0a:	3302      	adds	r3, #2
1000eb0c:	2708      	movs	r7, #8
1000eb0e:	9301      	str	r3, [sp, #4]
1000eb10:	e7ce      	b.n	1000eab0 <__aeabi_dmul+0x4c>
1000eb12:	4649      	mov	r1, r9
1000eb14:	2a02      	cmp	r2, #2
1000eb16:	d06a      	beq.n	1000ebee <__aeabi_dmul+0x18a>
1000eb18:	2a03      	cmp	r2, #3
1000eb1a:	d100      	bne.n	1000eb1e <__aeabi_dmul+0xba>
1000eb1c:	e209      	b.n	1000ef32 <__aeabi_dmul+0x4ce>
1000eb1e:	2a01      	cmp	r2, #1
1000eb20:	d000      	beq.n	1000eb24 <__aeabi_dmul+0xc0>
1000eb22:	e1bb      	b.n	1000ee9c <__aeabi_dmul+0x438>
1000eb24:	4011      	ands	r1, r2
1000eb26:	2200      	movs	r2, #0
1000eb28:	2300      	movs	r3, #0
1000eb2a:	2500      	movs	r5, #0
1000eb2c:	4690      	mov	r8, r2
1000eb2e:	b2cc      	uxtb	r4, r1
1000eb30:	2100      	movs	r1, #0
1000eb32:	032d      	lsls	r5, r5, #12
1000eb34:	0d0a      	lsrs	r2, r1, #20
1000eb36:	0512      	lsls	r2, r2, #20
1000eb38:	0b2d      	lsrs	r5, r5, #12
1000eb3a:	4315      	orrs	r5, r2
1000eb3c:	4a43      	ldr	r2, [pc, #268]	; (1000ec4c <__aeabi_dmul+0x1e8>)
1000eb3e:	051b      	lsls	r3, r3, #20
1000eb40:	4015      	ands	r5, r2
1000eb42:	431d      	orrs	r5, r3
1000eb44:	006d      	lsls	r5, r5, #1
1000eb46:	07e4      	lsls	r4, r4, #31
1000eb48:	086d      	lsrs	r5, r5, #1
1000eb4a:	4325      	orrs	r5, r4
1000eb4c:	4640      	mov	r0, r8
1000eb4e:	0029      	movs	r1, r5
1000eb50:	b007      	add	sp, #28
1000eb52:	bc3c      	pop	{r2, r3, r4, r5}
1000eb54:	4690      	mov	r8, r2
1000eb56:	4699      	mov	r9, r3
1000eb58:	46a2      	mov	sl, r4
1000eb5a:	46ab      	mov	fp, r5
1000eb5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eb5e:	4303      	orrs	r3, r0
1000eb60:	d052      	beq.n	1000ec08 <__aeabi_dmul+0x1a4>
1000eb62:	465b      	mov	r3, fp
1000eb64:	2b00      	cmp	r3, #0
1000eb66:	d100      	bne.n	1000eb6a <__aeabi_dmul+0x106>
1000eb68:	e18a      	b.n	1000ee80 <__aeabi_dmul+0x41c>
1000eb6a:	4658      	mov	r0, fp
1000eb6c:	f000 fdf4 	bl	1000f758 <__clzsi2>
1000eb70:	0003      	movs	r3, r0
1000eb72:	3b0b      	subs	r3, #11
1000eb74:	2b1c      	cmp	r3, #28
1000eb76:	dd00      	ble.n	1000eb7a <__aeabi_dmul+0x116>
1000eb78:	e17b      	b.n	1000ee72 <__aeabi_dmul+0x40e>
1000eb7a:	221d      	movs	r2, #29
1000eb7c:	1ad3      	subs	r3, r2, r3
1000eb7e:	003a      	movs	r2, r7
1000eb80:	0001      	movs	r1, r0
1000eb82:	465d      	mov	r5, fp
1000eb84:	40da      	lsrs	r2, r3
1000eb86:	3908      	subs	r1, #8
1000eb88:	408d      	lsls	r5, r1
1000eb8a:	0013      	movs	r3, r2
1000eb8c:	408f      	lsls	r7, r1
1000eb8e:	432b      	orrs	r3, r5
1000eb90:	469b      	mov	fp, r3
1000eb92:	46b8      	mov	r8, r7
1000eb94:	4b2e      	ldr	r3, [pc, #184]	; (1000ec50 <__aeabi_dmul+0x1ec>)
1000eb96:	2700      	movs	r7, #0
1000eb98:	469c      	mov	ip, r3
1000eb9a:	2300      	movs	r3, #0
1000eb9c:	4460      	add	r0, ip
1000eb9e:	4246      	negs	r6, r0
1000eba0:	9301      	str	r3, [sp, #4]
1000eba2:	e785      	b.n	1000eab0 <__aeabi_dmul+0x4c>
1000eba4:	4652      	mov	r2, sl
1000eba6:	432a      	orrs	r2, r5
1000eba8:	d12c      	bne.n	1000ec04 <__aeabi_dmul+0x1a0>
1000ebaa:	2500      	movs	r5, #0
1000ebac:	2300      	movs	r3, #0
1000ebae:	2202      	movs	r2, #2
1000ebb0:	e797      	b.n	1000eae2 <__aeabi_dmul+0x7e>
1000ebb2:	4652      	mov	r2, sl
1000ebb4:	432a      	orrs	r2, r5
1000ebb6:	d021      	beq.n	1000ebfc <__aeabi_dmul+0x198>
1000ebb8:	2d00      	cmp	r5, #0
1000ebba:	d100      	bne.n	1000ebbe <__aeabi_dmul+0x15a>
1000ebbc:	e154      	b.n	1000ee68 <__aeabi_dmul+0x404>
1000ebbe:	0028      	movs	r0, r5
1000ebc0:	f000 fdca 	bl	1000f758 <__clzsi2>
1000ebc4:	0003      	movs	r3, r0
1000ebc6:	3b0b      	subs	r3, #11
1000ebc8:	2b1c      	cmp	r3, #28
1000ebca:	dd00      	ble.n	1000ebce <__aeabi_dmul+0x16a>
1000ebcc:	e146      	b.n	1000ee5c <__aeabi_dmul+0x3f8>
1000ebce:	211d      	movs	r1, #29
1000ebd0:	1acb      	subs	r3, r1, r3
1000ebd2:	4651      	mov	r1, sl
1000ebd4:	0002      	movs	r2, r0
1000ebd6:	40d9      	lsrs	r1, r3
1000ebd8:	4653      	mov	r3, sl
1000ebda:	3a08      	subs	r2, #8
1000ebdc:	4095      	lsls	r5, r2
1000ebde:	4093      	lsls	r3, r2
1000ebe0:	430d      	orrs	r5, r1
1000ebe2:	4a1b      	ldr	r2, [pc, #108]	; (1000ec50 <__aeabi_dmul+0x1ec>)
1000ebe4:	4694      	mov	ip, r2
1000ebe6:	4460      	add	r0, ip
1000ebe8:	4240      	negs	r0, r0
1000ebea:	2200      	movs	r2, #0
1000ebec:	e779      	b.n	1000eae2 <__aeabi_dmul+0x7e>
1000ebee:	2401      	movs	r4, #1
1000ebf0:	2200      	movs	r2, #0
1000ebf2:	400c      	ands	r4, r1
1000ebf4:	4b12      	ldr	r3, [pc, #72]	; (1000ec40 <__aeabi_dmul+0x1dc>)
1000ebf6:	2500      	movs	r5, #0
1000ebf8:	4690      	mov	r8, r2
1000ebfa:	e799      	b.n	1000eb30 <__aeabi_dmul+0xcc>
1000ebfc:	2500      	movs	r5, #0
1000ebfe:	2300      	movs	r3, #0
1000ec00:	2201      	movs	r2, #1
1000ec02:	e76e      	b.n	1000eae2 <__aeabi_dmul+0x7e>
1000ec04:	2203      	movs	r2, #3
1000ec06:	e76c      	b.n	1000eae2 <__aeabi_dmul+0x7e>
1000ec08:	2300      	movs	r3, #0
1000ec0a:	469b      	mov	fp, r3
1000ec0c:	4698      	mov	r8, r3
1000ec0e:	3301      	adds	r3, #1
1000ec10:	2704      	movs	r7, #4
1000ec12:	9301      	str	r3, [sp, #4]
1000ec14:	e74c      	b.n	1000eab0 <__aeabi_dmul+0x4c>
1000ec16:	2303      	movs	r3, #3
1000ec18:	270c      	movs	r7, #12
1000ec1a:	9301      	str	r3, [sp, #4]
1000ec1c:	e748      	b.n	1000eab0 <__aeabi_dmul+0x4c>
1000ec1e:	2300      	movs	r3, #0
1000ec20:	2580      	movs	r5, #128	; 0x80
1000ec22:	4698      	mov	r8, r3
1000ec24:	2400      	movs	r4, #0
1000ec26:	032d      	lsls	r5, r5, #12
1000ec28:	4b05      	ldr	r3, [pc, #20]	; (1000ec40 <__aeabi_dmul+0x1dc>)
1000ec2a:	e781      	b.n	1000eb30 <__aeabi_dmul+0xcc>
1000ec2c:	465d      	mov	r5, fp
1000ec2e:	4643      	mov	r3, r8
1000ec30:	9a01      	ldr	r2, [sp, #4]
1000ec32:	e76f      	b.n	1000eb14 <__aeabi_dmul+0xb0>
1000ec34:	465d      	mov	r5, fp
1000ec36:	4643      	mov	r3, r8
1000ec38:	0021      	movs	r1, r4
1000ec3a:	9a01      	ldr	r2, [sp, #4]
1000ec3c:	e76a      	b.n	1000eb14 <__aeabi_dmul+0xb0>
1000ec3e:	46c0      	nop			; (mov r8, r8)
1000ec40:	000007ff 	.word	0x000007ff
1000ec44:	fffffc01 	.word	0xfffffc01
1000ec48:	10011808 	.word	0x10011808
1000ec4c:	800fffff 	.word	0x800fffff
1000ec50:	000003f3 	.word	0x000003f3
1000ec54:	4642      	mov	r2, r8
1000ec56:	0c12      	lsrs	r2, r2, #16
1000ec58:	4691      	mov	r9, r2
1000ec5a:	0c1a      	lsrs	r2, r3, #16
1000ec5c:	4694      	mov	ip, r2
1000ec5e:	4642      	mov	r2, r8
1000ec60:	0417      	lsls	r7, r2, #16
1000ec62:	464a      	mov	r2, r9
1000ec64:	041b      	lsls	r3, r3, #16
1000ec66:	0c1b      	lsrs	r3, r3, #16
1000ec68:	435a      	muls	r2, r3
1000ec6a:	4660      	mov	r0, ip
1000ec6c:	4690      	mov	r8, r2
1000ec6e:	464a      	mov	r2, r9
1000ec70:	4342      	muls	r2, r0
1000ec72:	0010      	movs	r0, r2
1000ec74:	9203      	str	r2, [sp, #12]
1000ec76:	4662      	mov	r2, ip
1000ec78:	001c      	movs	r4, r3
1000ec7a:	0c3f      	lsrs	r7, r7, #16
1000ec7c:	437a      	muls	r2, r7
1000ec7e:	437c      	muls	r4, r7
1000ec80:	4442      	add	r2, r8
1000ec82:	9201      	str	r2, [sp, #4]
1000ec84:	0c22      	lsrs	r2, r4, #16
1000ec86:	4692      	mov	sl, r2
1000ec88:	9a01      	ldr	r2, [sp, #4]
1000ec8a:	4452      	add	r2, sl
1000ec8c:	4590      	cmp	r8, r2
1000ec8e:	d906      	bls.n	1000ec9e <__aeabi_dmul+0x23a>
1000ec90:	4682      	mov	sl, r0
1000ec92:	2080      	movs	r0, #128	; 0x80
1000ec94:	0240      	lsls	r0, r0, #9
1000ec96:	4680      	mov	r8, r0
1000ec98:	44c2      	add	sl, r8
1000ec9a:	4650      	mov	r0, sl
1000ec9c:	9003      	str	r0, [sp, #12]
1000ec9e:	0c10      	lsrs	r0, r2, #16
1000eca0:	9004      	str	r0, [sp, #16]
1000eca2:	4648      	mov	r0, r9
1000eca4:	0424      	lsls	r4, r4, #16
1000eca6:	0c24      	lsrs	r4, r4, #16
1000eca8:	0412      	lsls	r2, r2, #16
1000ecaa:	1912      	adds	r2, r2, r4
1000ecac:	9205      	str	r2, [sp, #20]
1000ecae:	0c2a      	lsrs	r2, r5, #16
1000ecb0:	042d      	lsls	r5, r5, #16
1000ecb2:	0c2d      	lsrs	r5, r5, #16
1000ecb4:	4368      	muls	r0, r5
1000ecb6:	002c      	movs	r4, r5
1000ecb8:	4682      	mov	sl, r0
1000ecba:	4648      	mov	r0, r9
1000ecbc:	437c      	muls	r4, r7
1000ecbe:	4350      	muls	r0, r2
1000ecc0:	4681      	mov	r9, r0
1000ecc2:	0c20      	lsrs	r0, r4, #16
1000ecc4:	4680      	mov	r8, r0
1000ecc6:	4357      	muls	r7, r2
1000ecc8:	4457      	add	r7, sl
1000ecca:	4447      	add	r7, r8
1000eccc:	45ba      	cmp	sl, r7
1000ecce:	d903      	bls.n	1000ecd8 <__aeabi_dmul+0x274>
1000ecd0:	2080      	movs	r0, #128	; 0x80
1000ecd2:	0240      	lsls	r0, r0, #9
1000ecd4:	4680      	mov	r8, r0
1000ecd6:	44c1      	add	r9, r8
1000ecd8:	0c38      	lsrs	r0, r7, #16
1000ecda:	043f      	lsls	r7, r7, #16
1000ecdc:	46b8      	mov	r8, r7
1000ecde:	4448      	add	r0, r9
1000ece0:	0424      	lsls	r4, r4, #16
1000ece2:	0c24      	lsrs	r4, r4, #16
1000ece4:	9001      	str	r0, [sp, #4]
1000ece6:	9804      	ldr	r0, [sp, #16]
1000ece8:	44a0      	add	r8, r4
1000ecea:	4440      	add	r0, r8
1000ecec:	9004      	str	r0, [sp, #16]
1000ecee:	4658      	mov	r0, fp
1000ecf0:	0c00      	lsrs	r0, r0, #16
1000ecf2:	4681      	mov	r9, r0
1000ecf4:	4658      	mov	r0, fp
1000ecf6:	0404      	lsls	r4, r0, #16
1000ecf8:	0c20      	lsrs	r0, r4, #16
1000ecfa:	4682      	mov	sl, r0
1000ecfc:	0007      	movs	r7, r0
1000ecfe:	4648      	mov	r0, r9
1000ed00:	435f      	muls	r7, r3
1000ed02:	464c      	mov	r4, r9
1000ed04:	4343      	muls	r3, r0
1000ed06:	4660      	mov	r0, ip
1000ed08:	4360      	muls	r0, r4
1000ed0a:	4664      	mov	r4, ip
1000ed0c:	4683      	mov	fp, r0
1000ed0e:	4650      	mov	r0, sl
1000ed10:	4344      	muls	r4, r0
1000ed12:	0c38      	lsrs	r0, r7, #16
1000ed14:	4684      	mov	ip, r0
1000ed16:	18e4      	adds	r4, r4, r3
1000ed18:	4464      	add	r4, ip
1000ed1a:	42a3      	cmp	r3, r4
1000ed1c:	d903      	bls.n	1000ed26 <__aeabi_dmul+0x2c2>
1000ed1e:	2380      	movs	r3, #128	; 0x80
1000ed20:	025b      	lsls	r3, r3, #9
1000ed22:	469c      	mov	ip, r3
1000ed24:	44e3      	add	fp, ip
1000ed26:	4648      	mov	r0, r9
1000ed28:	043f      	lsls	r7, r7, #16
1000ed2a:	0c23      	lsrs	r3, r4, #16
1000ed2c:	0c3f      	lsrs	r7, r7, #16
1000ed2e:	0424      	lsls	r4, r4, #16
1000ed30:	19e4      	adds	r4, r4, r7
1000ed32:	4657      	mov	r7, sl
1000ed34:	4368      	muls	r0, r5
1000ed36:	436f      	muls	r7, r5
1000ed38:	4684      	mov	ip, r0
1000ed3a:	464d      	mov	r5, r9
1000ed3c:	4650      	mov	r0, sl
1000ed3e:	4355      	muls	r5, r2
1000ed40:	4342      	muls	r2, r0
1000ed42:	0c38      	lsrs	r0, r7, #16
1000ed44:	4681      	mov	r9, r0
1000ed46:	4462      	add	r2, ip
1000ed48:	444a      	add	r2, r9
1000ed4a:	445b      	add	r3, fp
1000ed4c:	4594      	cmp	ip, r2
1000ed4e:	d903      	bls.n	1000ed58 <__aeabi_dmul+0x2f4>
1000ed50:	2080      	movs	r0, #128	; 0x80
1000ed52:	0240      	lsls	r0, r0, #9
1000ed54:	4684      	mov	ip, r0
1000ed56:	4465      	add	r5, ip
1000ed58:	9803      	ldr	r0, [sp, #12]
1000ed5a:	043f      	lsls	r7, r7, #16
1000ed5c:	4683      	mov	fp, r0
1000ed5e:	9804      	ldr	r0, [sp, #16]
1000ed60:	0c3f      	lsrs	r7, r7, #16
1000ed62:	4684      	mov	ip, r0
1000ed64:	44e3      	add	fp, ip
1000ed66:	45c3      	cmp	fp, r8
1000ed68:	4180      	sbcs	r0, r0
1000ed6a:	4240      	negs	r0, r0
1000ed6c:	4682      	mov	sl, r0
1000ed6e:	0410      	lsls	r0, r2, #16
1000ed70:	4684      	mov	ip, r0
1000ed72:	9801      	ldr	r0, [sp, #4]
1000ed74:	4467      	add	r7, ip
1000ed76:	4684      	mov	ip, r0
1000ed78:	4467      	add	r7, ip
1000ed7a:	44a3      	add	fp, r4
1000ed7c:	46bc      	mov	ip, r7
1000ed7e:	45a3      	cmp	fp, r4
1000ed80:	41a4      	sbcs	r4, r4
1000ed82:	4699      	mov	r9, r3
1000ed84:	44d4      	add	ip, sl
1000ed86:	4264      	negs	r4, r4
1000ed88:	4287      	cmp	r7, r0
1000ed8a:	41bf      	sbcs	r7, r7
1000ed8c:	45d4      	cmp	ip, sl
1000ed8e:	4180      	sbcs	r0, r0
1000ed90:	44e1      	add	r9, ip
1000ed92:	46a0      	mov	r8, r4
1000ed94:	4599      	cmp	r9, r3
1000ed96:	419b      	sbcs	r3, r3
1000ed98:	427f      	negs	r7, r7
1000ed9a:	4240      	negs	r0, r0
1000ed9c:	44c8      	add	r8, r9
1000ed9e:	4307      	orrs	r7, r0
1000eda0:	0c12      	lsrs	r2, r2, #16
1000eda2:	18ba      	adds	r2, r7, r2
1000eda4:	45a0      	cmp	r8, r4
1000eda6:	41a4      	sbcs	r4, r4
1000eda8:	425f      	negs	r7, r3
1000edaa:	003b      	movs	r3, r7
1000edac:	4264      	negs	r4, r4
1000edae:	4323      	orrs	r3, r4
1000edb0:	18d7      	adds	r7, r2, r3
1000edb2:	4643      	mov	r3, r8
1000edb4:	197d      	adds	r5, r7, r5
1000edb6:	0ddb      	lsrs	r3, r3, #23
1000edb8:	026d      	lsls	r5, r5, #9
1000edba:	431d      	orrs	r5, r3
1000edbc:	465b      	mov	r3, fp
1000edbe:	025a      	lsls	r2, r3, #9
1000edc0:	9b05      	ldr	r3, [sp, #20]
1000edc2:	431a      	orrs	r2, r3
1000edc4:	1e53      	subs	r3, r2, #1
1000edc6:	419a      	sbcs	r2, r3
1000edc8:	465b      	mov	r3, fp
1000edca:	0ddb      	lsrs	r3, r3, #23
1000edcc:	431a      	orrs	r2, r3
1000edce:	4643      	mov	r3, r8
1000edd0:	025b      	lsls	r3, r3, #9
1000edd2:	4313      	orrs	r3, r2
1000edd4:	01ea      	lsls	r2, r5, #7
1000edd6:	d507      	bpl.n	1000ede8 <__aeabi_dmul+0x384>
1000edd8:	2201      	movs	r2, #1
1000edda:	085c      	lsrs	r4, r3, #1
1000eddc:	4013      	ands	r3, r2
1000edde:	4323      	orrs	r3, r4
1000ede0:	07ea      	lsls	r2, r5, #31
1000ede2:	9e02      	ldr	r6, [sp, #8]
1000ede4:	4313      	orrs	r3, r2
1000ede6:	086d      	lsrs	r5, r5, #1
1000ede8:	4a57      	ldr	r2, [pc, #348]	; (1000ef48 <__aeabi_dmul+0x4e4>)
1000edea:	18b2      	adds	r2, r6, r2
1000edec:	2a00      	cmp	r2, #0
1000edee:	dd4b      	ble.n	1000ee88 <__aeabi_dmul+0x424>
1000edf0:	0758      	lsls	r0, r3, #29
1000edf2:	d009      	beq.n	1000ee08 <__aeabi_dmul+0x3a4>
1000edf4:	200f      	movs	r0, #15
1000edf6:	4018      	ands	r0, r3
1000edf8:	2804      	cmp	r0, #4
1000edfa:	d005      	beq.n	1000ee08 <__aeabi_dmul+0x3a4>
1000edfc:	1d18      	adds	r0, r3, #4
1000edfe:	4298      	cmp	r0, r3
1000ee00:	419b      	sbcs	r3, r3
1000ee02:	425b      	negs	r3, r3
1000ee04:	18ed      	adds	r5, r5, r3
1000ee06:	0003      	movs	r3, r0
1000ee08:	01e8      	lsls	r0, r5, #7
1000ee0a:	d504      	bpl.n	1000ee16 <__aeabi_dmul+0x3b2>
1000ee0c:	4a4f      	ldr	r2, [pc, #316]	; (1000ef4c <__aeabi_dmul+0x4e8>)
1000ee0e:	4015      	ands	r5, r2
1000ee10:	2280      	movs	r2, #128	; 0x80
1000ee12:	00d2      	lsls	r2, r2, #3
1000ee14:	18b2      	adds	r2, r6, r2
1000ee16:	484e      	ldr	r0, [pc, #312]	; (1000ef50 <__aeabi_dmul+0x4ec>)
1000ee18:	4282      	cmp	r2, r0
1000ee1a:	dd00      	ble.n	1000ee1e <__aeabi_dmul+0x3ba>
1000ee1c:	e6e7      	b.n	1000ebee <__aeabi_dmul+0x18a>
1000ee1e:	2401      	movs	r4, #1
1000ee20:	08db      	lsrs	r3, r3, #3
1000ee22:	0768      	lsls	r0, r5, #29
1000ee24:	4318      	orrs	r0, r3
1000ee26:	026d      	lsls	r5, r5, #9
1000ee28:	0553      	lsls	r3, r2, #21
1000ee2a:	4680      	mov	r8, r0
1000ee2c:	0b2d      	lsrs	r5, r5, #12
1000ee2e:	0d5b      	lsrs	r3, r3, #21
1000ee30:	400c      	ands	r4, r1
1000ee32:	e67d      	b.n	1000eb30 <__aeabi_dmul+0xcc>
1000ee34:	2280      	movs	r2, #128	; 0x80
1000ee36:	4659      	mov	r1, fp
1000ee38:	0312      	lsls	r2, r2, #12
1000ee3a:	4211      	tst	r1, r2
1000ee3c:	d008      	beq.n	1000ee50 <__aeabi_dmul+0x3ec>
1000ee3e:	4215      	tst	r5, r2
1000ee40:	d106      	bne.n	1000ee50 <__aeabi_dmul+0x3ec>
1000ee42:	4315      	orrs	r5, r2
1000ee44:	032d      	lsls	r5, r5, #12
1000ee46:	4698      	mov	r8, r3
1000ee48:	0b2d      	lsrs	r5, r5, #12
1000ee4a:	464c      	mov	r4, r9
1000ee4c:	4b41      	ldr	r3, [pc, #260]	; (1000ef54 <__aeabi_dmul+0x4f0>)
1000ee4e:	e66f      	b.n	1000eb30 <__aeabi_dmul+0xcc>
1000ee50:	465d      	mov	r5, fp
1000ee52:	4315      	orrs	r5, r2
1000ee54:	032d      	lsls	r5, r5, #12
1000ee56:	0b2d      	lsrs	r5, r5, #12
1000ee58:	4b3e      	ldr	r3, [pc, #248]	; (1000ef54 <__aeabi_dmul+0x4f0>)
1000ee5a:	e669      	b.n	1000eb30 <__aeabi_dmul+0xcc>
1000ee5c:	0003      	movs	r3, r0
1000ee5e:	4655      	mov	r5, sl
1000ee60:	3b28      	subs	r3, #40	; 0x28
1000ee62:	409d      	lsls	r5, r3
1000ee64:	2300      	movs	r3, #0
1000ee66:	e6bc      	b.n	1000ebe2 <__aeabi_dmul+0x17e>
1000ee68:	4650      	mov	r0, sl
1000ee6a:	f000 fc75 	bl	1000f758 <__clzsi2>
1000ee6e:	3020      	adds	r0, #32
1000ee70:	e6a8      	b.n	1000ebc4 <__aeabi_dmul+0x160>
1000ee72:	0003      	movs	r3, r0
1000ee74:	3b28      	subs	r3, #40	; 0x28
1000ee76:	409f      	lsls	r7, r3
1000ee78:	2300      	movs	r3, #0
1000ee7a:	46bb      	mov	fp, r7
1000ee7c:	4698      	mov	r8, r3
1000ee7e:	e689      	b.n	1000eb94 <__aeabi_dmul+0x130>
1000ee80:	f000 fc6a 	bl	1000f758 <__clzsi2>
1000ee84:	3020      	adds	r0, #32
1000ee86:	e673      	b.n	1000eb70 <__aeabi_dmul+0x10c>
1000ee88:	2401      	movs	r4, #1
1000ee8a:	1aa6      	subs	r6, r4, r2
1000ee8c:	2e38      	cmp	r6, #56	; 0x38
1000ee8e:	dd07      	ble.n	1000eea0 <__aeabi_dmul+0x43c>
1000ee90:	2200      	movs	r2, #0
1000ee92:	400c      	ands	r4, r1
1000ee94:	2300      	movs	r3, #0
1000ee96:	2500      	movs	r5, #0
1000ee98:	4690      	mov	r8, r2
1000ee9a:	e649      	b.n	1000eb30 <__aeabi_dmul+0xcc>
1000ee9c:	9e02      	ldr	r6, [sp, #8]
1000ee9e:	e7a3      	b.n	1000ede8 <__aeabi_dmul+0x384>
1000eea0:	2e1f      	cmp	r6, #31
1000eea2:	dc20      	bgt.n	1000eee6 <__aeabi_dmul+0x482>
1000eea4:	2220      	movs	r2, #32
1000eea6:	002c      	movs	r4, r5
1000eea8:	0018      	movs	r0, r3
1000eeaa:	1b92      	subs	r2, r2, r6
1000eeac:	40f0      	lsrs	r0, r6
1000eeae:	4094      	lsls	r4, r2
1000eeb0:	4093      	lsls	r3, r2
1000eeb2:	4304      	orrs	r4, r0
1000eeb4:	1e58      	subs	r0, r3, #1
1000eeb6:	4183      	sbcs	r3, r0
1000eeb8:	431c      	orrs	r4, r3
1000eeba:	40f5      	lsrs	r5, r6
1000eebc:	0763      	lsls	r3, r4, #29
1000eebe:	d009      	beq.n	1000eed4 <__aeabi_dmul+0x470>
1000eec0:	230f      	movs	r3, #15
1000eec2:	4023      	ands	r3, r4
1000eec4:	2b04      	cmp	r3, #4
1000eec6:	d005      	beq.n	1000eed4 <__aeabi_dmul+0x470>
1000eec8:	0023      	movs	r3, r4
1000eeca:	1d1c      	adds	r4, r3, #4
1000eecc:	429c      	cmp	r4, r3
1000eece:	4192      	sbcs	r2, r2
1000eed0:	4252      	negs	r2, r2
1000eed2:	18ad      	adds	r5, r5, r2
1000eed4:	022b      	lsls	r3, r5, #8
1000eed6:	d51f      	bpl.n	1000ef18 <__aeabi_dmul+0x4b4>
1000eed8:	2401      	movs	r4, #1
1000eeda:	2200      	movs	r2, #0
1000eedc:	400c      	ands	r4, r1
1000eede:	2301      	movs	r3, #1
1000eee0:	2500      	movs	r5, #0
1000eee2:	4690      	mov	r8, r2
1000eee4:	e624      	b.n	1000eb30 <__aeabi_dmul+0xcc>
1000eee6:	201f      	movs	r0, #31
1000eee8:	002c      	movs	r4, r5
1000eeea:	4240      	negs	r0, r0
1000eeec:	1a82      	subs	r2, r0, r2
1000eeee:	40d4      	lsrs	r4, r2
1000eef0:	2e20      	cmp	r6, #32
1000eef2:	d01c      	beq.n	1000ef2e <__aeabi_dmul+0x4ca>
1000eef4:	2240      	movs	r2, #64	; 0x40
1000eef6:	1b96      	subs	r6, r2, r6
1000eef8:	40b5      	lsls	r5, r6
1000eefa:	432b      	orrs	r3, r5
1000eefc:	1e58      	subs	r0, r3, #1
1000eefe:	4183      	sbcs	r3, r0
1000ef00:	2007      	movs	r0, #7
1000ef02:	4323      	orrs	r3, r4
1000ef04:	4018      	ands	r0, r3
1000ef06:	2500      	movs	r5, #0
1000ef08:	2800      	cmp	r0, #0
1000ef0a:	d009      	beq.n	1000ef20 <__aeabi_dmul+0x4bc>
1000ef0c:	220f      	movs	r2, #15
1000ef0e:	2500      	movs	r5, #0
1000ef10:	401a      	ands	r2, r3
1000ef12:	001c      	movs	r4, r3
1000ef14:	2a04      	cmp	r2, #4
1000ef16:	d1d8      	bne.n	1000eeca <__aeabi_dmul+0x466>
1000ef18:	0023      	movs	r3, r4
1000ef1a:	0768      	lsls	r0, r5, #29
1000ef1c:	026d      	lsls	r5, r5, #9
1000ef1e:	0b2d      	lsrs	r5, r5, #12
1000ef20:	2401      	movs	r4, #1
1000ef22:	08db      	lsrs	r3, r3, #3
1000ef24:	4303      	orrs	r3, r0
1000ef26:	4698      	mov	r8, r3
1000ef28:	400c      	ands	r4, r1
1000ef2a:	2300      	movs	r3, #0
1000ef2c:	e600      	b.n	1000eb30 <__aeabi_dmul+0xcc>
1000ef2e:	2500      	movs	r5, #0
1000ef30:	e7e3      	b.n	1000eefa <__aeabi_dmul+0x496>
1000ef32:	2280      	movs	r2, #128	; 0x80
1000ef34:	2401      	movs	r4, #1
1000ef36:	0312      	lsls	r2, r2, #12
1000ef38:	4315      	orrs	r5, r2
1000ef3a:	032d      	lsls	r5, r5, #12
1000ef3c:	4698      	mov	r8, r3
1000ef3e:	0b2d      	lsrs	r5, r5, #12
1000ef40:	400c      	ands	r4, r1
1000ef42:	4b04      	ldr	r3, [pc, #16]	; (1000ef54 <__aeabi_dmul+0x4f0>)
1000ef44:	e5f4      	b.n	1000eb30 <__aeabi_dmul+0xcc>
1000ef46:	46c0      	nop			; (mov r8, r8)
1000ef48:	000003ff 	.word	0x000003ff
1000ef4c:	feffffff 	.word	0xfeffffff
1000ef50:	000007fe 	.word	0x000007fe
1000ef54:	000007ff 	.word	0x000007ff

1000ef58 <__aeabi_dsub>:
1000ef58:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ef5a:	4657      	mov	r7, sl
1000ef5c:	464e      	mov	r6, r9
1000ef5e:	4645      	mov	r5, r8
1000ef60:	b4e0      	push	{r5, r6, r7}
1000ef62:	000e      	movs	r6, r1
1000ef64:	0011      	movs	r1, r2
1000ef66:	0ff2      	lsrs	r2, r6, #31
1000ef68:	4692      	mov	sl, r2
1000ef6a:	00c5      	lsls	r5, r0, #3
1000ef6c:	0f42      	lsrs	r2, r0, #29
1000ef6e:	0318      	lsls	r0, r3, #12
1000ef70:	0337      	lsls	r7, r6, #12
1000ef72:	0074      	lsls	r4, r6, #1
1000ef74:	0a40      	lsrs	r0, r0, #9
1000ef76:	0f4e      	lsrs	r6, r1, #29
1000ef78:	0a7f      	lsrs	r7, r7, #9
1000ef7a:	4330      	orrs	r0, r6
1000ef7c:	4ecf      	ldr	r6, [pc, #828]	; (1000f2bc <__aeabi_dsub+0x364>)
1000ef7e:	4317      	orrs	r7, r2
1000ef80:	005a      	lsls	r2, r3, #1
1000ef82:	0d64      	lsrs	r4, r4, #21
1000ef84:	0d52      	lsrs	r2, r2, #21
1000ef86:	0fdb      	lsrs	r3, r3, #31
1000ef88:	00c9      	lsls	r1, r1, #3
1000ef8a:	42b2      	cmp	r2, r6
1000ef8c:	d100      	bne.n	1000ef90 <__aeabi_dsub+0x38>
1000ef8e:	e0e5      	b.n	1000f15c <__aeabi_dsub+0x204>
1000ef90:	2601      	movs	r6, #1
1000ef92:	4073      	eors	r3, r6
1000ef94:	1aa6      	subs	r6, r4, r2
1000ef96:	46b4      	mov	ip, r6
1000ef98:	4553      	cmp	r3, sl
1000ef9a:	d100      	bne.n	1000ef9e <__aeabi_dsub+0x46>
1000ef9c:	e0af      	b.n	1000f0fe <__aeabi_dsub+0x1a6>
1000ef9e:	2e00      	cmp	r6, #0
1000efa0:	dc00      	bgt.n	1000efa4 <__aeabi_dsub+0x4c>
1000efa2:	e10d      	b.n	1000f1c0 <__aeabi_dsub+0x268>
1000efa4:	2a00      	cmp	r2, #0
1000efa6:	d13a      	bne.n	1000f01e <__aeabi_dsub+0xc6>
1000efa8:	0003      	movs	r3, r0
1000efaa:	430b      	orrs	r3, r1
1000efac:	d000      	beq.n	1000efb0 <__aeabi_dsub+0x58>
1000efae:	e0e4      	b.n	1000f17a <__aeabi_dsub+0x222>
1000efb0:	076b      	lsls	r3, r5, #29
1000efb2:	d009      	beq.n	1000efc8 <__aeabi_dsub+0x70>
1000efb4:	230f      	movs	r3, #15
1000efb6:	402b      	ands	r3, r5
1000efb8:	2b04      	cmp	r3, #4
1000efba:	d005      	beq.n	1000efc8 <__aeabi_dsub+0x70>
1000efbc:	1d2b      	adds	r3, r5, #4
1000efbe:	42ab      	cmp	r3, r5
1000efc0:	41ad      	sbcs	r5, r5
1000efc2:	426d      	negs	r5, r5
1000efc4:	197f      	adds	r7, r7, r5
1000efc6:	001d      	movs	r5, r3
1000efc8:	023b      	lsls	r3, r7, #8
1000efca:	d400      	bmi.n	1000efce <__aeabi_dsub+0x76>
1000efcc:	e088      	b.n	1000f0e0 <__aeabi_dsub+0x188>
1000efce:	4bbb      	ldr	r3, [pc, #748]	; (1000f2bc <__aeabi_dsub+0x364>)
1000efd0:	3401      	adds	r4, #1
1000efd2:	429c      	cmp	r4, r3
1000efd4:	d100      	bne.n	1000efd8 <__aeabi_dsub+0x80>
1000efd6:	e110      	b.n	1000f1fa <__aeabi_dsub+0x2a2>
1000efd8:	003a      	movs	r2, r7
1000efda:	4bb9      	ldr	r3, [pc, #740]	; (1000f2c0 <__aeabi_dsub+0x368>)
1000efdc:	4651      	mov	r1, sl
1000efde:	401a      	ands	r2, r3
1000efe0:	2301      	movs	r3, #1
1000efe2:	0750      	lsls	r0, r2, #29
1000efe4:	08ed      	lsrs	r5, r5, #3
1000efe6:	0252      	lsls	r2, r2, #9
1000efe8:	0564      	lsls	r4, r4, #21
1000efea:	4305      	orrs	r5, r0
1000efec:	0b12      	lsrs	r2, r2, #12
1000efee:	0d64      	lsrs	r4, r4, #21
1000eff0:	400b      	ands	r3, r1
1000eff2:	2100      	movs	r1, #0
1000eff4:	0028      	movs	r0, r5
1000eff6:	0312      	lsls	r2, r2, #12
1000eff8:	0d0d      	lsrs	r5, r1, #20
1000effa:	0b12      	lsrs	r2, r2, #12
1000effc:	0564      	lsls	r4, r4, #21
1000effe:	052d      	lsls	r5, r5, #20
1000f000:	4315      	orrs	r5, r2
1000f002:	0862      	lsrs	r2, r4, #1
1000f004:	4caf      	ldr	r4, [pc, #700]	; (1000f2c4 <__aeabi_dsub+0x36c>)
1000f006:	07db      	lsls	r3, r3, #31
1000f008:	402c      	ands	r4, r5
1000f00a:	4314      	orrs	r4, r2
1000f00c:	0064      	lsls	r4, r4, #1
1000f00e:	0864      	lsrs	r4, r4, #1
1000f010:	431c      	orrs	r4, r3
1000f012:	0021      	movs	r1, r4
1000f014:	bc1c      	pop	{r2, r3, r4}
1000f016:	4690      	mov	r8, r2
1000f018:	4699      	mov	r9, r3
1000f01a:	46a2      	mov	sl, r4
1000f01c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f01e:	4ba7      	ldr	r3, [pc, #668]	; (1000f2bc <__aeabi_dsub+0x364>)
1000f020:	429c      	cmp	r4, r3
1000f022:	d0c5      	beq.n	1000efb0 <__aeabi_dsub+0x58>
1000f024:	2380      	movs	r3, #128	; 0x80
1000f026:	041b      	lsls	r3, r3, #16
1000f028:	4318      	orrs	r0, r3
1000f02a:	4663      	mov	r3, ip
1000f02c:	2b38      	cmp	r3, #56	; 0x38
1000f02e:	dd00      	ble.n	1000f032 <__aeabi_dsub+0xda>
1000f030:	e0fd      	b.n	1000f22e <__aeabi_dsub+0x2d6>
1000f032:	2b1f      	cmp	r3, #31
1000f034:	dd00      	ble.n	1000f038 <__aeabi_dsub+0xe0>
1000f036:	e130      	b.n	1000f29a <__aeabi_dsub+0x342>
1000f038:	4662      	mov	r2, ip
1000f03a:	2320      	movs	r3, #32
1000f03c:	1a9b      	subs	r3, r3, r2
1000f03e:	0002      	movs	r2, r0
1000f040:	409a      	lsls	r2, r3
1000f042:	4666      	mov	r6, ip
1000f044:	4690      	mov	r8, r2
1000f046:	000a      	movs	r2, r1
1000f048:	4099      	lsls	r1, r3
1000f04a:	40f2      	lsrs	r2, r6
1000f04c:	4646      	mov	r6, r8
1000f04e:	1e4b      	subs	r3, r1, #1
1000f050:	4199      	sbcs	r1, r3
1000f052:	4332      	orrs	r2, r6
1000f054:	4311      	orrs	r1, r2
1000f056:	4663      	mov	r3, ip
1000f058:	0002      	movs	r2, r0
1000f05a:	40da      	lsrs	r2, r3
1000f05c:	1a69      	subs	r1, r5, r1
1000f05e:	428d      	cmp	r5, r1
1000f060:	419b      	sbcs	r3, r3
1000f062:	000d      	movs	r5, r1
1000f064:	1aba      	subs	r2, r7, r2
1000f066:	425b      	negs	r3, r3
1000f068:	1ad7      	subs	r7, r2, r3
1000f06a:	023b      	lsls	r3, r7, #8
1000f06c:	d535      	bpl.n	1000f0da <__aeabi_dsub+0x182>
1000f06e:	027a      	lsls	r2, r7, #9
1000f070:	0a53      	lsrs	r3, r2, #9
1000f072:	4698      	mov	r8, r3
1000f074:	4643      	mov	r3, r8
1000f076:	2b00      	cmp	r3, #0
1000f078:	d100      	bne.n	1000f07c <__aeabi_dsub+0x124>
1000f07a:	e0c4      	b.n	1000f206 <__aeabi_dsub+0x2ae>
1000f07c:	4640      	mov	r0, r8
1000f07e:	f000 fb6b 	bl	1000f758 <__clzsi2>
1000f082:	0003      	movs	r3, r0
1000f084:	3b08      	subs	r3, #8
1000f086:	2b1f      	cmp	r3, #31
1000f088:	dd00      	ble.n	1000f08c <__aeabi_dsub+0x134>
1000f08a:	e0c5      	b.n	1000f218 <__aeabi_dsub+0x2c0>
1000f08c:	2220      	movs	r2, #32
1000f08e:	0029      	movs	r1, r5
1000f090:	1ad2      	subs	r2, r2, r3
1000f092:	4647      	mov	r7, r8
1000f094:	40d1      	lsrs	r1, r2
1000f096:	409f      	lsls	r7, r3
1000f098:	000a      	movs	r2, r1
1000f09a:	409d      	lsls	r5, r3
1000f09c:	433a      	orrs	r2, r7
1000f09e:	429c      	cmp	r4, r3
1000f0a0:	dd00      	ble.n	1000f0a4 <__aeabi_dsub+0x14c>
1000f0a2:	e0c0      	b.n	1000f226 <__aeabi_dsub+0x2ce>
1000f0a4:	1b1c      	subs	r4, r3, r4
1000f0a6:	1c63      	adds	r3, r4, #1
1000f0a8:	2b1f      	cmp	r3, #31
1000f0aa:	dd00      	ble.n	1000f0ae <__aeabi_dsub+0x156>
1000f0ac:	e0e4      	b.n	1000f278 <__aeabi_dsub+0x320>
1000f0ae:	2120      	movs	r1, #32
1000f0b0:	0014      	movs	r4, r2
1000f0b2:	0028      	movs	r0, r5
1000f0b4:	1ac9      	subs	r1, r1, r3
1000f0b6:	40d8      	lsrs	r0, r3
1000f0b8:	408c      	lsls	r4, r1
1000f0ba:	408d      	lsls	r5, r1
1000f0bc:	4304      	orrs	r4, r0
1000f0be:	40da      	lsrs	r2, r3
1000f0c0:	1e68      	subs	r0, r5, #1
1000f0c2:	4185      	sbcs	r5, r0
1000f0c4:	0017      	movs	r7, r2
1000f0c6:	4325      	orrs	r5, r4
1000f0c8:	2400      	movs	r4, #0
1000f0ca:	e771      	b.n	1000efb0 <__aeabi_dsub+0x58>
1000f0cc:	4642      	mov	r2, r8
1000f0ce:	4663      	mov	r3, ip
1000f0d0:	431a      	orrs	r2, r3
1000f0d2:	d100      	bne.n	1000f0d6 <__aeabi_dsub+0x17e>
1000f0d4:	e24c      	b.n	1000f570 <__aeabi_dsub+0x618>
1000f0d6:	4667      	mov	r7, ip
1000f0d8:	4645      	mov	r5, r8
1000f0da:	076b      	lsls	r3, r5, #29
1000f0dc:	d000      	beq.n	1000f0e0 <__aeabi_dsub+0x188>
1000f0de:	e769      	b.n	1000efb4 <__aeabi_dsub+0x5c>
1000f0e0:	2301      	movs	r3, #1
1000f0e2:	4651      	mov	r1, sl
1000f0e4:	0778      	lsls	r0, r7, #29
1000f0e6:	08ed      	lsrs	r5, r5, #3
1000f0e8:	08fa      	lsrs	r2, r7, #3
1000f0ea:	400b      	ands	r3, r1
1000f0ec:	4305      	orrs	r5, r0
1000f0ee:	4973      	ldr	r1, [pc, #460]	; (1000f2bc <__aeabi_dsub+0x364>)
1000f0f0:	428c      	cmp	r4, r1
1000f0f2:	d038      	beq.n	1000f166 <__aeabi_dsub+0x20e>
1000f0f4:	0312      	lsls	r2, r2, #12
1000f0f6:	0564      	lsls	r4, r4, #21
1000f0f8:	0b12      	lsrs	r2, r2, #12
1000f0fa:	0d64      	lsrs	r4, r4, #21
1000f0fc:	e779      	b.n	1000eff2 <__aeabi_dsub+0x9a>
1000f0fe:	2e00      	cmp	r6, #0
1000f100:	dc00      	bgt.n	1000f104 <__aeabi_dsub+0x1ac>
1000f102:	e09a      	b.n	1000f23a <__aeabi_dsub+0x2e2>
1000f104:	2a00      	cmp	r2, #0
1000f106:	d047      	beq.n	1000f198 <__aeabi_dsub+0x240>
1000f108:	4a6c      	ldr	r2, [pc, #432]	; (1000f2bc <__aeabi_dsub+0x364>)
1000f10a:	4294      	cmp	r4, r2
1000f10c:	d100      	bne.n	1000f110 <__aeabi_dsub+0x1b8>
1000f10e:	e74f      	b.n	1000efb0 <__aeabi_dsub+0x58>
1000f110:	2280      	movs	r2, #128	; 0x80
1000f112:	0412      	lsls	r2, r2, #16
1000f114:	4310      	orrs	r0, r2
1000f116:	4662      	mov	r2, ip
1000f118:	2a38      	cmp	r2, #56	; 0x38
1000f11a:	dc00      	bgt.n	1000f11e <__aeabi_dsub+0x1c6>
1000f11c:	e108      	b.n	1000f330 <__aeabi_dsub+0x3d8>
1000f11e:	4301      	orrs	r1, r0
1000f120:	1e48      	subs	r0, r1, #1
1000f122:	4181      	sbcs	r1, r0
1000f124:	2200      	movs	r2, #0
1000f126:	b2c9      	uxtb	r1, r1
1000f128:	1949      	adds	r1, r1, r5
1000f12a:	19d2      	adds	r2, r2, r7
1000f12c:	42a9      	cmp	r1, r5
1000f12e:	41bf      	sbcs	r7, r7
1000f130:	000d      	movs	r5, r1
1000f132:	427f      	negs	r7, r7
1000f134:	18bf      	adds	r7, r7, r2
1000f136:	023a      	lsls	r2, r7, #8
1000f138:	d400      	bmi.n	1000f13c <__aeabi_dsub+0x1e4>
1000f13a:	e142      	b.n	1000f3c2 <__aeabi_dsub+0x46a>
1000f13c:	4a5f      	ldr	r2, [pc, #380]	; (1000f2bc <__aeabi_dsub+0x364>)
1000f13e:	3401      	adds	r4, #1
1000f140:	4294      	cmp	r4, r2
1000f142:	d100      	bne.n	1000f146 <__aeabi_dsub+0x1ee>
1000f144:	e14e      	b.n	1000f3e4 <__aeabi_dsub+0x48c>
1000f146:	2001      	movs	r0, #1
1000f148:	4a5d      	ldr	r2, [pc, #372]	; (1000f2c0 <__aeabi_dsub+0x368>)
1000f14a:	0869      	lsrs	r1, r5, #1
1000f14c:	403a      	ands	r2, r7
1000f14e:	4028      	ands	r0, r5
1000f150:	4308      	orrs	r0, r1
1000f152:	07d5      	lsls	r5, r2, #31
1000f154:	4305      	orrs	r5, r0
1000f156:	0857      	lsrs	r7, r2, #1
1000f158:	469a      	mov	sl, r3
1000f15a:	e729      	b.n	1000efb0 <__aeabi_dsub+0x58>
1000f15c:	0006      	movs	r6, r0
1000f15e:	430e      	orrs	r6, r1
1000f160:	d000      	beq.n	1000f164 <__aeabi_dsub+0x20c>
1000f162:	e717      	b.n	1000ef94 <__aeabi_dsub+0x3c>
1000f164:	e714      	b.n	1000ef90 <__aeabi_dsub+0x38>
1000f166:	0029      	movs	r1, r5
1000f168:	4311      	orrs	r1, r2
1000f16a:	d100      	bne.n	1000f16e <__aeabi_dsub+0x216>
1000f16c:	e1f9      	b.n	1000f562 <__aeabi_dsub+0x60a>
1000f16e:	2180      	movs	r1, #128	; 0x80
1000f170:	0309      	lsls	r1, r1, #12
1000f172:	430a      	orrs	r2, r1
1000f174:	0312      	lsls	r2, r2, #12
1000f176:	0b12      	lsrs	r2, r2, #12
1000f178:	e73b      	b.n	1000eff2 <__aeabi_dsub+0x9a>
1000f17a:	2301      	movs	r3, #1
1000f17c:	425b      	negs	r3, r3
1000f17e:	4698      	mov	r8, r3
1000f180:	44c4      	add	ip, r8
1000f182:	4663      	mov	r3, ip
1000f184:	2b00      	cmp	r3, #0
1000f186:	d172      	bne.n	1000f26e <__aeabi_dsub+0x316>
1000f188:	1a69      	subs	r1, r5, r1
1000f18a:	428d      	cmp	r5, r1
1000f18c:	419b      	sbcs	r3, r3
1000f18e:	1a3f      	subs	r7, r7, r0
1000f190:	425b      	negs	r3, r3
1000f192:	1aff      	subs	r7, r7, r3
1000f194:	000d      	movs	r5, r1
1000f196:	e768      	b.n	1000f06a <__aeabi_dsub+0x112>
1000f198:	0002      	movs	r2, r0
1000f19a:	430a      	orrs	r2, r1
1000f19c:	d100      	bne.n	1000f1a0 <__aeabi_dsub+0x248>
1000f19e:	e707      	b.n	1000efb0 <__aeabi_dsub+0x58>
1000f1a0:	2201      	movs	r2, #1
1000f1a2:	4252      	negs	r2, r2
1000f1a4:	4690      	mov	r8, r2
1000f1a6:	44c4      	add	ip, r8
1000f1a8:	4662      	mov	r2, ip
1000f1aa:	2a00      	cmp	r2, #0
1000f1ac:	d000      	beq.n	1000f1b0 <__aeabi_dsub+0x258>
1000f1ae:	e0e6      	b.n	1000f37e <__aeabi_dsub+0x426>
1000f1b0:	1869      	adds	r1, r5, r1
1000f1b2:	42a9      	cmp	r1, r5
1000f1b4:	41b6      	sbcs	r6, r6
1000f1b6:	183f      	adds	r7, r7, r0
1000f1b8:	4276      	negs	r6, r6
1000f1ba:	19f7      	adds	r7, r6, r7
1000f1bc:	000d      	movs	r5, r1
1000f1be:	e7ba      	b.n	1000f136 <__aeabi_dsub+0x1de>
1000f1c0:	2e00      	cmp	r6, #0
1000f1c2:	d000      	beq.n	1000f1c6 <__aeabi_dsub+0x26e>
1000f1c4:	e080      	b.n	1000f2c8 <__aeabi_dsub+0x370>
1000f1c6:	1c62      	adds	r2, r4, #1
1000f1c8:	0552      	lsls	r2, r2, #21
1000f1ca:	0d52      	lsrs	r2, r2, #21
1000f1cc:	2a01      	cmp	r2, #1
1000f1ce:	dc00      	bgt.n	1000f1d2 <__aeabi_dsub+0x27a>
1000f1d0:	e0f9      	b.n	1000f3c6 <__aeabi_dsub+0x46e>
1000f1d2:	1a6a      	subs	r2, r5, r1
1000f1d4:	4691      	mov	r9, r2
1000f1d6:	454d      	cmp	r5, r9
1000f1d8:	41b6      	sbcs	r6, r6
1000f1da:	1a3a      	subs	r2, r7, r0
1000f1dc:	4276      	negs	r6, r6
1000f1de:	1b92      	subs	r2, r2, r6
1000f1e0:	4690      	mov	r8, r2
1000f1e2:	0212      	lsls	r2, r2, #8
1000f1e4:	d400      	bmi.n	1000f1e8 <__aeabi_dsub+0x290>
1000f1e6:	e099      	b.n	1000f31c <__aeabi_dsub+0x3c4>
1000f1e8:	1b4d      	subs	r5, r1, r5
1000f1ea:	42a9      	cmp	r1, r5
1000f1ec:	4189      	sbcs	r1, r1
1000f1ee:	1bc7      	subs	r7, r0, r7
1000f1f0:	4249      	negs	r1, r1
1000f1f2:	1a7a      	subs	r2, r7, r1
1000f1f4:	4690      	mov	r8, r2
1000f1f6:	469a      	mov	sl, r3
1000f1f8:	e73c      	b.n	1000f074 <__aeabi_dsub+0x11c>
1000f1fa:	4652      	mov	r2, sl
1000f1fc:	2301      	movs	r3, #1
1000f1fe:	2500      	movs	r5, #0
1000f200:	4013      	ands	r3, r2
1000f202:	2200      	movs	r2, #0
1000f204:	e6f5      	b.n	1000eff2 <__aeabi_dsub+0x9a>
1000f206:	0028      	movs	r0, r5
1000f208:	f000 faa6 	bl	1000f758 <__clzsi2>
1000f20c:	3020      	adds	r0, #32
1000f20e:	0003      	movs	r3, r0
1000f210:	3b08      	subs	r3, #8
1000f212:	2b1f      	cmp	r3, #31
1000f214:	dc00      	bgt.n	1000f218 <__aeabi_dsub+0x2c0>
1000f216:	e739      	b.n	1000f08c <__aeabi_dsub+0x134>
1000f218:	002a      	movs	r2, r5
1000f21a:	3828      	subs	r0, #40	; 0x28
1000f21c:	4082      	lsls	r2, r0
1000f21e:	2500      	movs	r5, #0
1000f220:	429c      	cmp	r4, r3
1000f222:	dc00      	bgt.n	1000f226 <__aeabi_dsub+0x2ce>
1000f224:	e73e      	b.n	1000f0a4 <__aeabi_dsub+0x14c>
1000f226:	4f26      	ldr	r7, [pc, #152]	; (1000f2c0 <__aeabi_dsub+0x368>)
1000f228:	1ae4      	subs	r4, r4, r3
1000f22a:	4017      	ands	r7, r2
1000f22c:	e6c0      	b.n	1000efb0 <__aeabi_dsub+0x58>
1000f22e:	4301      	orrs	r1, r0
1000f230:	1e48      	subs	r0, r1, #1
1000f232:	4181      	sbcs	r1, r0
1000f234:	2200      	movs	r2, #0
1000f236:	b2c9      	uxtb	r1, r1
1000f238:	e710      	b.n	1000f05c <__aeabi_dsub+0x104>
1000f23a:	2e00      	cmp	r6, #0
1000f23c:	d000      	beq.n	1000f240 <__aeabi_dsub+0x2e8>
1000f23e:	e0f1      	b.n	1000f424 <__aeabi_dsub+0x4cc>
1000f240:	1c62      	adds	r2, r4, #1
1000f242:	4694      	mov	ip, r2
1000f244:	0552      	lsls	r2, r2, #21
1000f246:	0d52      	lsrs	r2, r2, #21
1000f248:	2a01      	cmp	r2, #1
1000f24a:	dc00      	bgt.n	1000f24e <__aeabi_dsub+0x2f6>
1000f24c:	e0a0      	b.n	1000f390 <__aeabi_dsub+0x438>
1000f24e:	4a1b      	ldr	r2, [pc, #108]	; (1000f2bc <__aeabi_dsub+0x364>)
1000f250:	4594      	cmp	ip, r2
1000f252:	d100      	bne.n	1000f256 <__aeabi_dsub+0x2fe>
1000f254:	e0c5      	b.n	1000f3e2 <__aeabi_dsub+0x48a>
1000f256:	1869      	adds	r1, r5, r1
1000f258:	42a9      	cmp	r1, r5
1000f25a:	4192      	sbcs	r2, r2
1000f25c:	183f      	adds	r7, r7, r0
1000f25e:	4252      	negs	r2, r2
1000f260:	19d2      	adds	r2, r2, r7
1000f262:	0849      	lsrs	r1, r1, #1
1000f264:	07d5      	lsls	r5, r2, #31
1000f266:	430d      	orrs	r5, r1
1000f268:	0857      	lsrs	r7, r2, #1
1000f26a:	4664      	mov	r4, ip
1000f26c:	e6a0      	b.n	1000efb0 <__aeabi_dsub+0x58>
1000f26e:	4b13      	ldr	r3, [pc, #76]	; (1000f2bc <__aeabi_dsub+0x364>)
1000f270:	429c      	cmp	r4, r3
1000f272:	d000      	beq.n	1000f276 <__aeabi_dsub+0x31e>
1000f274:	e6d9      	b.n	1000f02a <__aeabi_dsub+0xd2>
1000f276:	e69b      	b.n	1000efb0 <__aeabi_dsub+0x58>
1000f278:	0011      	movs	r1, r2
1000f27a:	3c1f      	subs	r4, #31
1000f27c:	40e1      	lsrs	r1, r4
1000f27e:	000c      	movs	r4, r1
1000f280:	2b20      	cmp	r3, #32
1000f282:	d100      	bne.n	1000f286 <__aeabi_dsub+0x32e>
1000f284:	e080      	b.n	1000f388 <__aeabi_dsub+0x430>
1000f286:	2140      	movs	r1, #64	; 0x40
1000f288:	1acb      	subs	r3, r1, r3
1000f28a:	409a      	lsls	r2, r3
1000f28c:	4315      	orrs	r5, r2
1000f28e:	1e6a      	subs	r2, r5, #1
1000f290:	4195      	sbcs	r5, r2
1000f292:	2700      	movs	r7, #0
1000f294:	4325      	orrs	r5, r4
1000f296:	2400      	movs	r4, #0
1000f298:	e71f      	b.n	1000f0da <__aeabi_dsub+0x182>
1000f29a:	4663      	mov	r3, ip
1000f29c:	0002      	movs	r2, r0
1000f29e:	3b20      	subs	r3, #32
1000f2a0:	40da      	lsrs	r2, r3
1000f2a2:	4663      	mov	r3, ip
1000f2a4:	2b20      	cmp	r3, #32
1000f2a6:	d071      	beq.n	1000f38c <__aeabi_dsub+0x434>
1000f2a8:	2340      	movs	r3, #64	; 0x40
1000f2aa:	4666      	mov	r6, ip
1000f2ac:	1b9b      	subs	r3, r3, r6
1000f2ae:	4098      	lsls	r0, r3
1000f2b0:	4301      	orrs	r1, r0
1000f2b2:	1e48      	subs	r0, r1, #1
1000f2b4:	4181      	sbcs	r1, r0
1000f2b6:	4311      	orrs	r1, r2
1000f2b8:	2200      	movs	r2, #0
1000f2ba:	e6cf      	b.n	1000f05c <__aeabi_dsub+0x104>
1000f2bc:	000007ff 	.word	0x000007ff
1000f2c0:	ff7fffff 	.word	0xff7fffff
1000f2c4:	800fffff 	.word	0x800fffff
1000f2c8:	2c00      	cmp	r4, #0
1000f2ca:	d048      	beq.n	1000f35e <__aeabi_dsub+0x406>
1000f2cc:	4cca      	ldr	r4, [pc, #808]	; (1000f5f8 <__aeabi_dsub+0x6a0>)
1000f2ce:	42a2      	cmp	r2, r4
1000f2d0:	d100      	bne.n	1000f2d4 <__aeabi_dsub+0x37c>
1000f2d2:	e0a2      	b.n	1000f41a <__aeabi_dsub+0x4c2>
1000f2d4:	4274      	negs	r4, r6
1000f2d6:	46a1      	mov	r9, r4
1000f2d8:	2480      	movs	r4, #128	; 0x80
1000f2da:	0424      	lsls	r4, r4, #16
1000f2dc:	4327      	orrs	r7, r4
1000f2de:	464c      	mov	r4, r9
1000f2e0:	2c38      	cmp	r4, #56	; 0x38
1000f2e2:	dd00      	ble.n	1000f2e6 <__aeabi_dsub+0x38e>
1000f2e4:	e0db      	b.n	1000f49e <__aeabi_dsub+0x546>
1000f2e6:	2c1f      	cmp	r4, #31
1000f2e8:	dd00      	ble.n	1000f2ec <__aeabi_dsub+0x394>
1000f2ea:	e144      	b.n	1000f576 <__aeabi_dsub+0x61e>
1000f2ec:	464e      	mov	r6, r9
1000f2ee:	2420      	movs	r4, #32
1000f2f0:	1ba4      	subs	r4, r4, r6
1000f2f2:	003e      	movs	r6, r7
1000f2f4:	40a6      	lsls	r6, r4
1000f2f6:	46a2      	mov	sl, r4
1000f2f8:	46b0      	mov	r8, r6
1000f2fa:	464c      	mov	r4, r9
1000f2fc:	002e      	movs	r6, r5
1000f2fe:	40e6      	lsrs	r6, r4
1000f300:	46b4      	mov	ip, r6
1000f302:	4646      	mov	r6, r8
1000f304:	4664      	mov	r4, ip
1000f306:	4326      	orrs	r6, r4
1000f308:	4654      	mov	r4, sl
1000f30a:	40a5      	lsls	r5, r4
1000f30c:	1e6c      	subs	r4, r5, #1
1000f30e:	41a5      	sbcs	r5, r4
1000f310:	0034      	movs	r4, r6
1000f312:	432c      	orrs	r4, r5
1000f314:	464d      	mov	r5, r9
1000f316:	40ef      	lsrs	r7, r5
1000f318:	1b0d      	subs	r5, r1, r4
1000f31a:	e028      	b.n	1000f36e <__aeabi_dsub+0x416>
1000f31c:	464a      	mov	r2, r9
1000f31e:	4643      	mov	r3, r8
1000f320:	464d      	mov	r5, r9
1000f322:	431a      	orrs	r2, r3
1000f324:	d000      	beq.n	1000f328 <__aeabi_dsub+0x3d0>
1000f326:	e6a5      	b.n	1000f074 <__aeabi_dsub+0x11c>
1000f328:	2300      	movs	r3, #0
1000f32a:	2400      	movs	r4, #0
1000f32c:	2500      	movs	r5, #0
1000f32e:	e6de      	b.n	1000f0ee <__aeabi_dsub+0x196>
1000f330:	2a1f      	cmp	r2, #31
1000f332:	dc5a      	bgt.n	1000f3ea <__aeabi_dsub+0x492>
1000f334:	4666      	mov	r6, ip
1000f336:	2220      	movs	r2, #32
1000f338:	1b92      	subs	r2, r2, r6
1000f33a:	0006      	movs	r6, r0
1000f33c:	4096      	lsls	r6, r2
1000f33e:	4691      	mov	r9, r2
1000f340:	46b0      	mov	r8, r6
1000f342:	4662      	mov	r2, ip
1000f344:	000e      	movs	r6, r1
1000f346:	40d6      	lsrs	r6, r2
1000f348:	4642      	mov	r2, r8
1000f34a:	4316      	orrs	r6, r2
1000f34c:	464a      	mov	r2, r9
1000f34e:	4091      	lsls	r1, r2
1000f350:	1e4a      	subs	r2, r1, #1
1000f352:	4191      	sbcs	r1, r2
1000f354:	0002      	movs	r2, r0
1000f356:	4660      	mov	r0, ip
1000f358:	4331      	orrs	r1, r6
1000f35a:	40c2      	lsrs	r2, r0
1000f35c:	e6e4      	b.n	1000f128 <__aeabi_dsub+0x1d0>
1000f35e:	003c      	movs	r4, r7
1000f360:	432c      	orrs	r4, r5
1000f362:	d05a      	beq.n	1000f41a <__aeabi_dsub+0x4c2>
1000f364:	43f4      	mvns	r4, r6
1000f366:	46a1      	mov	r9, r4
1000f368:	2c00      	cmp	r4, #0
1000f36a:	d152      	bne.n	1000f412 <__aeabi_dsub+0x4ba>
1000f36c:	1b4d      	subs	r5, r1, r5
1000f36e:	42a9      	cmp	r1, r5
1000f370:	4189      	sbcs	r1, r1
1000f372:	1bc7      	subs	r7, r0, r7
1000f374:	4249      	negs	r1, r1
1000f376:	1a7f      	subs	r7, r7, r1
1000f378:	0014      	movs	r4, r2
1000f37a:	469a      	mov	sl, r3
1000f37c:	e675      	b.n	1000f06a <__aeabi_dsub+0x112>
1000f37e:	4a9e      	ldr	r2, [pc, #632]	; (1000f5f8 <__aeabi_dsub+0x6a0>)
1000f380:	4294      	cmp	r4, r2
1000f382:	d000      	beq.n	1000f386 <__aeabi_dsub+0x42e>
1000f384:	e6c7      	b.n	1000f116 <__aeabi_dsub+0x1be>
1000f386:	e613      	b.n	1000efb0 <__aeabi_dsub+0x58>
1000f388:	2200      	movs	r2, #0
1000f38a:	e77f      	b.n	1000f28c <__aeabi_dsub+0x334>
1000f38c:	2000      	movs	r0, #0
1000f38e:	e78f      	b.n	1000f2b0 <__aeabi_dsub+0x358>
1000f390:	2c00      	cmp	r4, #0
1000f392:	d000      	beq.n	1000f396 <__aeabi_dsub+0x43e>
1000f394:	e0c8      	b.n	1000f528 <__aeabi_dsub+0x5d0>
1000f396:	003b      	movs	r3, r7
1000f398:	432b      	orrs	r3, r5
1000f39a:	d100      	bne.n	1000f39e <__aeabi_dsub+0x446>
1000f39c:	e10f      	b.n	1000f5be <__aeabi_dsub+0x666>
1000f39e:	0003      	movs	r3, r0
1000f3a0:	430b      	orrs	r3, r1
1000f3a2:	d100      	bne.n	1000f3a6 <__aeabi_dsub+0x44e>
1000f3a4:	e604      	b.n	1000efb0 <__aeabi_dsub+0x58>
1000f3a6:	1869      	adds	r1, r5, r1
1000f3a8:	42a9      	cmp	r1, r5
1000f3aa:	419b      	sbcs	r3, r3
1000f3ac:	183f      	adds	r7, r7, r0
1000f3ae:	425b      	negs	r3, r3
1000f3b0:	19df      	adds	r7, r3, r7
1000f3b2:	023b      	lsls	r3, r7, #8
1000f3b4:	d400      	bmi.n	1000f3b8 <__aeabi_dsub+0x460>
1000f3b6:	e11a      	b.n	1000f5ee <__aeabi_dsub+0x696>
1000f3b8:	4b90      	ldr	r3, [pc, #576]	; (1000f5fc <__aeabi_dsub+0x6a4>)
1000f3ba:	000d      	movs	r5, r1
1000f3bc:	401f      	ands	r7, r3
1000f3be:	4664      	mov	r4, ip
1000f3c0:	e5f6      	b.n	1000efb0 <__aeabi_dsub+0x58>
1000f3c2:	469a      	mov	sl, r3
1000f3c4:	e689      	b.n	1000f0da <__aeabi_dsub+0x182>
1000f3c6:	003a      	movs	r2, r7
1000f3c8:	432a      	orrs	r2, r5
1000f3ca:	2c00      	cmp	r4, #0
1000f3cc:	d15c      	bne.n	1000f488 <__aeabi_dsub+0x530>
1000f3ce:	2a00      	cmp	r2, #0
1000f3d0:	d175      	bne.n	1000f4be <__aeabi_dsub+0x566>
1000f3d2:	0002      	movs	r2, r0
1000f3d4:	430a      	orrs	r2, r1
1000f3d6:	d100      	bne.n	1000f3da <__aeabi_dsub+0x482>
1000f3d8:	e0ca      	b.n	1000f570 <__aeabi_dsub+0x618>
1000f3da:	0007      	movs	r7, r0
1000f3dc:	000d      	movs	r5, r1
1000f3de:	469a      	mov	sl, r3
1000f3e0:	e5e6      	b.n	1000efb0 <__aeabi_dsub+0x58>
1000f3e2:	4664      	mov	r4, ip
1000f3e4:	2200      	movs	r2, #0
1000f3e6:	2500      	movs	r5, #0
1000f3e8:	e681      	b.n	1000f0ee <__aeabi_dsub+0x196>
1000f3ea:	4662      	mov	r2, ip
1000f3ec:	0006      	movs	r6, r0
1000f3ee:	3a20      	subs	r2, #32
1000f3f0:	40d6      	lsrs	r6, r2
1000f3f2:	4662      	mov	r2, ip
1000f3f4:	46b0      	mov	r8, r6
1000f3f6:	2a20      	cmp	r2, #32
1000f3f8:	d100      	bne.n	1000f3fc <__aeabi_dsub+0x4a4>
1000f3fa:	e0b7      	b.n	1000f56c <__aeabi_dsub+0x614>
1000f3fc:	2240      	movs	r2, #64	; 0x40
1000f3fe:	4666      	mov	r6, ip
1000f400:	1b92      	subs	r2, r2, r6
1000f402:	4090      	lsls	r0, r2
1000f404:	4301      	orrs	r1, r0
1000f406:	4642      	mov	r2, r8
1000f408:	1e48      	subs	r0, r1, #1
1000f40a:	4181      	sbcs	r1, r0
1000f40c:	4311      	orrs	r1, r2
1000f40e:	2200      	movs	r2, #0
1000f410:	e68a      	b.n	1000f128 <__aeabi_dsub+0x1d0>
1000f412:	4c79      	ldr	r4, [pc, #484]	; (1000f5f8 <__aeabi_dsub+0x6a0>)
1000f414:	42a2      	cmp	r2, r4
1000f416:	d000      	beq.n	1000f41a <__aeabi_dsub+0x4c2>
1000f418:	e761      	b.n	1000f2de <__aeabi_dsub+0x386>
1000f41a:	0007      	movs	r7, r0
1000f41c:	000d      	movs	r5, r1
1000f41e:	0014      	movs	r4, r2
1000f420:	469a      	mov	sl, r3
1000f422:	e5c5      	b.n	1000efb0 <__aeabi_dsub+0x58>
1000f424:	2c00      	cmp	r4, #0
1000f426:	d141      	bne.n	1000f4ac <__aeabi_dsub+0x554>
1000f428:	003c      	movs	r4, r7
1000f42a:	432c      	orrs	r4, r5
1000f42c:	d078      	beq.n	1000f520 <__aeabi_dsub+0x5c8>
1000f42e:	43f4      	mvns	r4, r6
1000f430:	46a1      	mov	r9, r4
1000f432:	2c00      	cmp	r4, #0
1000f434:	d020      	beq.n	1000f478 <__aeabi_dsub+0x520>
1000f436:	4c70      	ldr	r4, [pc, #448]	; (1000f5f8 <__aeabi_dsub+0x6a0>)
1000f438:	42a2      	cmp	r2, r4
1000f43a:	d071      	beq.n	1000f520 <__aeabi_dsub+0x5c8>
1000f43c:	464c      	mov	r4, r9
1000f43e:	2c38      	cmp	r4, #56	; 0x38
1000f440:	dd00      	ble.n	1000f444 <__aeabi_dsub+0x4ec>
1000f442:	e0b2      	b.n	1000f5aa <__aeabi_dsub+0x652>
1000f444:	2c1f      	cmp	r4, #31
1000f446:	dd00      	ble.n	1000f44a <__aeabi_dsub+0x4f2>
1000f448:	e0bc      	b.n	1000f5c4 <__aeabi_dsub+0x66c>
1000f44a:	2620      	movs	r6, #32
1000f44c:	1b34      	subs	r4, r6, r4
1000f44e:	46a2      	mov	sl, r4
1000f450:	003c      	movs	r4, r7
1000f452:	4656      	mov	r6, sl
1000f454:	40b4      	lsls	r4, r6
1000f456:	464e      	mov	r6, r9
1000f458:	46a0      	mov	r8, r4
1000f45a:	002c      	movs	r4, r5
1000f45c:	40f4      	lsrs	r4, r6
1000f45e:	46a4      	mov	ip, r4
1000f460:	4644      	mov	r4, r8
1000f462:	4666      	mov	r6, ip
1000f464:	4334      	orrs	r4, r6
1000f466:	46a4      	mov	ip, r4
1000f468:	4654      	mov	r4, sl
1000f46a:	40a5      	lsls	r5, r4
1000f46c:	4664      	mov	r4, ip
1000f46e:	1e6e      	subs	r6, r5, #1
1000f470:	41b5      	sbcs	r5, r6
1000f472:	4325      	orrs	r5, r4
1000f474:	464c      	mov	r4, r9
1000f476:	40e7      	lsrs	r7, r4
1000f478:	186d      	adds	r5, r5, r1
1000f47a:	428d      	cmp	r5, r1
1000f47c:	4189      	sbcs	r1, r1
1000f47e:	183f      	adds	r7, r7, r0
1000f480:	4249      	negs	r1, r1
1000f482:	19cf      	adds	r7, r1, r7
1000f484:	0014      	movs	r4, r2
1000f486:	e656      	b.n	1000f136 <__aeabi_dsub+0x1de>
1000f488:	2a00      	cmp	r2, #0
1000f48a:	d12f      	bne.n	1000f4ec <__aeabi_dsub+0x594>
1000f48c:	0002      	movs	r2, r0
1000f48e:	430a      	orrs	r2, r1
1000f490:	d100      	bne.n	1000f494 <__aeabi_dsub+0x53c>
1000f492:	e084      	b.n	1000f59e <__aeabi_dsub+0x646>
1000f494:	0007      	movs	r7, r0
1000f496:	000d      	movs	r5, r1
1000f498:	469a      	mov	sl, r3
1000f49a:	4c57      	ldr	r4, [pc, #348]	; (1000f5f8 <__aeabi_dsub+0x6a0>)
1000f49c:	e588      	b.n	1000efb0 <__aeabi_dsub+0x58>
1000f49e:	433d      	orrs	r5, r7
1000f4a0:	1e6f      	subs	r7, r5, #1
1000f4a2:	41bd      	sbcs	r5, r7
1000f4a4:	b2ec      	uxtb	r4, r5
1000f4a6:	2700      	movs	r7, #0
1000f4a8:	1b0d      	subs	r5, r1, r4
1000f4aa:	e760      	b.n	1000f36e <__aeabi_dsub+0x416>
1000f4ac:	4c52      	ldr	r4, [pc, #328]	; (1000f5f8 <__aeabi_dsub+0x6a0>)
1000f4ae:	42a2      	cmp	r2, r4
1000f4b0:	d036      	beq.n	1000f520 <__aeabi_dsub+0x5c8>
1000f4b2:	4274      	negs	r4, r6
1000f4b4:	2680      	movs	r6, #128	; 0x80
1000f4b6:	0436      	lsls	r6, r6, #16
1000f4b8:	46a1      	mov	r9, r4
1000f4ba:	4337      	orrs	r7, r6
1000f4bc:	e7be      	b.n	1000f43c <__aeabi_dsub+0x4e4>
1000f4be:	0002      	movs	r2, r0
1000f4c0:	430a      	orrs	r2, r1
1000f4c2:	d100      	bne.n	1000f4c6 <__aeabi_dsub+0x56e>
1000f4c4:	e574      	b.n	1000efb0 <__aeabi_dsub+0x58>
1000f4c6:	1a6a      	subs	r2, r5, r1
1000f4c8:	4690      	mov	r8, r2
1000f4ca:	4545      	cmp	r5, r8
1000f4cc:	41b6      	sbcs	r6, r6
1000f4ce:	1a3a      	subs	r2, r7, r0
1000f4d0:	4276      	negs	r6, r6
1000f4d2:	1b92      	subs	r2, r2, r6
1000f4d4:	4694      	mov	ip, r2
1000f4d6:	0212      	lsls	r2, r2, #8
1000f4d8:	d400      	bmi.n	1000f4dc <__aeabi_dsub+0x584>
1000f4da:	e5f7      	b.n	1000f0cc <__aeabi_dsub+0x174>
1000f4dc:	1b4d      	subs	r5, r1, r5
1000f4de:	42a9      	cmp	r1, r5
1000f4e0:	4189      	sbcs	r1, r1
1000f4e2:	1bc7      	subs	r7, r0, r7
1000f4e4:	4249      	negs	r1, r1
1000f4e6:	1a7f      	subs	r7, r7, r1
1000f4e8:	469a      	mov	sl, r3
1000f4ea:	e561      	b.n	1000efb0 <__aeabi_dsub+0x58>
1000f4ec:	0002      	movs	r2, r0
1000f4ee:	430a      	orrs	r2, r1
1000f4f0:	d03a      	beq.n	1000f568 <__aeabi_dsub+0x610>
1000f4f2:	08ed      	lsrs	r5, r5, #3
1000f4f4:	077c      	lsls	r4, r7, #29
1000f4f6:	432c      	orrs	r4, r5
1000f4f8:	2580      	movs	r5, #128	; 0x80
1000f4fa:	08fa      	lsrs	r2, r7, #3
1000f4fc:	032d      	lsls	r5, r5, #12
1000f4fe:	422a      	tst	r2, r5
1000f500:	d008      	beq.n	1000f514 <__aeabi_dsub+0x5bc>
1000f502:	08c7      	lsrs	r7, r0, #3
1000f504:	422f      	tst	r7, r5
1000f506:	d105      	bne.n	1000f514 <__aeabi_dsub+0x5bc>
1000f508:	0745      	lsls	r5, r0, #29
1000f50a:	002c      	movs	r4, r5
1000f50c:	003a      	movs	r2, r7
1000f50e:	469a      	mov	sl, r3
1000f510:	08c9      	lsrs	r1, r1, #3
1000f512:	430c      	orrs	r4, r1
1000f514:	0f67      	lsrs	r7, r4, #29
1000f516:	00d2      	lsls	r2, r2, #3
1000f518:	00e5      	lsls	r5, r4, #3
1000f51a:	4317      	orrs	r7, r2
1000f51c:	4c36      	ldr	r4, [pc, #216]	; (1000f5f8 <__aeabi_dsub+0x6a0>)
1000f51e:	e547      	b.n	1000efb0 <__aeabi_dsub+0x58>
1000f520:	0007      	movs	r7, r0
1000f522:	000d      	movs	r5, r1
1000f524:	0014      	movs	r4, r2
1000f526:	e543      	b.n	1000efb0 <__aeabi_dsub+0x58>
1000f528:	003a      	movs	r2, r7
1000f52a:	432a      	orrs	r2, r5
1000f52c:	d043      	beq.n	1000f5b6 <__aeabi_dsub+0x65e>
1000f52e:	0002      	movs	r2, r0
1000f530:	430a      	orrs	r2, r1
1000f532:	d019      	beq.n	1000f568 <__aeabi_dsub+0x610>
1000f534:	08ed      	lsrs	r5, r5, #3
1000f536:	077c      	lsls	r4, r7, #29
1000f538:	432c      	orrs	r4, r5
1000f53a:	2580      	movs	r5, #128	; 0x80
1000f53c:	08fa      	lsrs	r2, r7, #3
1000f53e:	032d      	lsls	r5, r5, #12
1000f540:	422a      	tst	r2, r5
1000f542:	d007      	beq.n	1000f554 <__aeabi_dsub+0x5fc>
1000f544:	08c6      	lsrs	r6, r0, #3
1000f546:	422e      	tst	r6, r5
1000f548:	d104      	bne.n	1000f554 <__aeabi_dsub+0x5fc>
1000f54a:	0747      	lsls	r7, r0, #29
1000f54c:	003c      	movs	r4, r7
1000f54e:	0032      	movs	r2, r6
1000f550:	08c9      	lsrs	r1, r1, #3
1000f552:	430c      	orrs	r4, r1
1000f554:	00d7      	lsls	r7, r2, #3
1000f556:	0f62      	lsrs	r2, r4, #29
1000f558:	00e5      	lsls	r5, r4, #3
1000f55a:	4317      	orrs	r7, r2
1000f55c:	469a      	mov	sl, r3
1000f55e:	4c26      	ldr	r4, [pc, #152]	; (1000f5f8 <__aeabi_dsub+0x6a0>)
1000f560:	e526      	b.n	1000efb0 <__aeabi_dsub+0x58>
1000f562:	2200      	movs	r2, #0
1000f564:	2500      	movs	r5, #0
1000f566:	e544      	b.n	1000eff2 <__aeabi_dsub+0x9a>
1000f568:	4c23      	ldr	r4, [pc, #140]	; (1000f5f8 <__aeabi_dsub+0x6a0>)
1000f56a:	e521      	b.n	1000efb0 <__aeabi_dsub+0x58>
1000f56c:	2000      	movs	r0, #0
1000f56e:	e749      	b.n	1000f404 <__aeabi_dsub+0x4ac>
1000f570:	2300      	movs	r3, #0
1000f572:	2500      	movs	r5, #0
1000f574:	e5bb      	b.n	1000f0ee <__aeabi_dsub+0x196>
1000f576:	464c      	mov	r4, r9
1000f578:	003e      	movs	r6, r7
1000f57a:	3c20      	subs	r4, #32
1000f57c:	40e6      	lsrs	r6, r4
1000f57e:	464c      	mov	r4, r9
1000f580:	46b4      	mov	ip, r6
1000f582:	2c20      	cmp	r4, #32
1000f584:	d031      	beq.n	1000f5ea <__aeabi_dsub+0x692>
1000f586:	2440      	movs	r4, #64	; 0x40
1000f588:	464e      	mov	r6, r9
1000f58a:	1ba6      	subs	r6, r4, r6
1000f58c:	40b7      	lsls	r7, r6
1000f58e:	433d      	orrs	r5, r7
1000f590:	1e6c      	subs	r4, r5, #1
1000f592:	41a5      	sbcs	r5, r4
1000f594:	4664      	mov	r4, ip
1000f596:	432c      	orrs	r4, r5
1000f598:	2700      	movs	r7, #0
1000f59a:	1b0d      	subs	r5, r1, r4
1000f59c:	e6e7      	b.n	1000f36e <__aeabi_dsub+0x416>
1000f59e:	2280      	movs	r2, #128	; 0x80
1000f5a0:	2300      	movs	r3, #0
1000f5a2:	0312      	lsls	r2, r2, #12
1000f5a4:	4c14      	ldr	r4, [pc, #80]	; (1000f5f8 <__aeabi_dsub+0x6a0>)
1000f5a6:	2500      	movs	r5, #0
1000f5a8:	e5a1      	b.n	1000f0ee <__aeabi_dsub+0x196>
1000f5aa:	433d      	orrs	r5, r7
1000f5ac:	1e6f      	subs	r7, r5, #1
1000f5ae:	41bd      	sbcs	r5, r7
1000f5b0:	2700      	movs	r7, #0
1000f5b2:	b2ed      	uxtb	r5, r5
1000f5b4:	e760      	b.n	1000f478 <__aeabi_dsub+0x520>
1000f5b6:	0007      	movs	r7, r0
1000f5b8:	000d      	movs	r5, r1
1000f5ba:	4c0f      	ldr	r4, [pc, #60]	; (1000f5f8 <__aeabi_dsub+0x6a0>)
1000f5bc:	e4f8      	b.n	1000efb0 <__aeabi_dsub+0x58>
1000f5be:	0007      	movs	r7, r0
1000f5c0:	000d      	movs	r5, r1
1000f5c2:	e4f5      	b.n	1000efb0 <__aeabi_dsub+0x58>
1000f5c4:	464e      	mov	r6, r9
1000f5c6:	003c      	movs	r4, r7
1000f5c8:	3e20      	subs	r6, #32
1000f5ca:	40f4      	lsrs	r4, r6
1000f5cc:	46a0      	mov	r8, r4
1000f5ce:	464c      	mov	r4, r9
1000f5d0:	2c20      	cmp	r4, #32
1000f5d2:	d00e      	beq.n	1000f5f2 <__aeabi_dsub+0x69a>
1000f5d4:	2440      	movs	r4, #64	; 0x40
1000f5d6:	464e      	mov	r6, r9
1000f5d8:	1ba4      	subs	r4, r4, r6
1000f5da:	40a7      	lsls	r7, r4
1000f5dc:	433d      	orrs	r5, r7
1000f5de:	1e6f      	subs	r7, r5, #1
1000f5e0:	41bd      	sbcs	r5, r7
1000f5e2:	4644      	mov	r4, r8
1000f5e4:	2700      	movs	r7, #0
1000f5e6:	4325      	orrs	r5, r4
1000f5e8:	e746      	b.n	1000f478 <__aeabi_dsub+0x520>
1000f5ea:	2700      	movs	r7, #0
1000f5ec:	e7cf      	b.n	1000f58e <__aeabi_dsub+0x636>
1000f5ee:	000d      	movs	r5, r1
1000f5f0:	e573      	b.n	1000f0da <__aeabi_dsub+0x182>
1000f5f2:	2700      	movs	r7, #0
1000f5f4:	e7f2      	b.n	1000f5dc <__aeabi_dsub+0x684>
1000f5f6:	46c0      	nop			; (mov r8, r8)
1000f5f8:	000007ff 	.word	0x000007ff
1000f5fc:	ff7fffff 	.word	0xff7fffff

1000f600 <__aeabi_d2iz>:
1000f600:	030b      	lsls	r3, r1, #12
1000f602:	b530      	push	{r4, r5, lr}
1000f604:	4d13      	ldr	r5, [pc, #76]	; (1000f654 <__aeabi_d2iz+0x54>)
1000f606:	0b1a      	lsrs	r2, r3, #12
1000f608:	004b      	lsls	r3, r1, #1
1000f60a:	0d5b      	lsrs	r3, r3, #21
1000f60c:	0fc9      	lsrs	r1, r1, #31
1000f60e:	2400      	movs	r4, #0
1000f610:	42ab      	cmp	r3, r5
1000f612:	dd11      	ble.n	1000f638 <__aeabi_d2iz+0x38>
1000f614:	4c10      	ldr	r4, [pc, #64]	; (1000f658 <__aeabi_d2iz+0x58>)
1000f616:	42a3      	cmp	r3, r4
1000f618:	dc10      	bgt.n	1000f63c <__aeabi_d2iz+0x3c>
1000f61a:	2480      	movs	r4, #128	; 0x80
1000f61c:	0364      	lsls	r4, r4, #13
1000f61e:	4322      	orrs	r2, r4
1000f620:	4c0e      	ldr	r4, [pc, #56]	; (1000f65c <__aeabi_d2iz+0x5c>)
1000f622:	1ae4      	subs	r4, r4, r3
1000f624:	2c1f      	cmp	r4, #31
1000f626:	dd0c      	ble.n	1000f642 <__aeabi_d2iz+0x42>
1000f628:	480d      	ldr	r0, [pc, #52]	; (1000f660 <__aeabi_d2iz+0x60>)
1000f62a:	1ac3      	subs	r3, r0, r3
1000f62c:	40da      	lsrs	r2, r3
1000f62e:	0013      	movs	r3, r2
1000f630:	425c      	negs	r4, r3
1000f632:	2900      	cmp	r1, #0
1000f634:	d100      	bne.n	1000f638 <__aeabi_d2iz+0x38>
1000f636:	001c      	movs	r4, r3
1000f638:	0020      	movs	r0, r4
1000f63a:	bd30      	pop	{r4, r5, pc}
1000f63c:	4b09      	ldr	r3, [pc, #36]	; (1000f664 <__aeabi_d2iz+0x64>)
1000f63e:	18cc      	adds	r4, r1, r3
1000f640:	e7fa      	b.n	1000f638 <__aeabi_d2iz+0x38>
1000f642:	40e0      	lsrs	r0, r4
1000f644:	4c08      	ldr	r4, [pc, #32]	; (1000f668 <__aeabi_d2iz+0x68>)
1000f646:	46a4      	mov	ip, r4
1000f648:	4463      	add	r3, ip
1000f64a:	409a      	lsls	r2, r3
1000f64c:	0013      	movs	r3, r2
1000f64e:	4303      	orrs	r3, r0
1000f650:	e7ee      	b.n	1000f630 <__aeabi_d2iz+0x30>
1000f652:	46c0      	nop			; (mov r8, r8)
1000f654:	000003fe 	.word	0x000003fe
1000f658:	0000041d 	.word	0x0000041d
1000f65c:	00000433 	.word	0x00000433
1000f660:	00000413 	.word	0x00000413
1000f664:	7fffffff 	.word	0x7fffffff
1000f668:	fffffbed 	.word	0xfffffbed

1000f66c <__aeabi_ui2d>:
1000f66c:	b570      	push	{r4, r5, r6, lr}
1000f66e:	1e05      	subs	r5, r0, #0
1000f670:	d028      	beq.n	1000f6c4 <__aeabi_ui2d+0x58>
1000f672:	f000 f871 	bl	1000f758 <__clzsi2>
1000f676:	4b15      	ldr	r3, [pc, #84]	; (1000f6cc <__aeabi_ui2d+0x60>)
1000f678:	4a15      	ldr	r2, [pc, #84]	; (1000f6d0 <__aeabi_ui2d+0x64>)
1000f67a:	1a1b      	subs	r3, r3, r0
1000f67c:	1ad2      	subs	r2, r2, r3
1000f67e:	2a1f      	cmp	r2, #31
1000f680:	dd16      	ble.n	1000f6b0 <__aeabi_ui2d+0x44>
1000f682:	002c      	movs	r4, r5
1000f684:	4a13      	ldr	r2, [pc, #76]	; (1000f6d4 <__aeabi_ui2d+0x68>)
1000f686:	2500      	movs	r5, #0
1000f688:	1ad2      	subs	r2, r2, r3
1000f68a:	4094      	lsls	r4, r2
1000f68c:	055a      	lsls	r2, r3, #21
1000f68e:	0324      	lsls	r4, r4, #12
1000f690:	0b24      	lsrs	r4, r4, #12
1000f692:	0d52      	lsrs	r2, r2, #21
1000f694:	2100      	movs	r1, #0
1000f696:	0324      	lsls	r4, r4, #12
1000f698:	0d0b      	lsrs	r3, r1, #20
1000f69a:	0b24      	lsrs	r4, r4, #12
1000f69c:	051b      	lsls	r3, r3, #20
1000f69e:	4323      	orrs	r3, r4
1000f6a0:	4c0d      	ldr	r4, [pc, #52]	; (1000f6d8 <__aeabi_ui2d+0x6c>)
1000f6a2:	0512      	lsls	r2, r2, #20
1000f6a4:	4023      	ands	r3, r4
1000f6a6:	4313      	orrs	r3, r2
1000f6a8:	005b      	lsls	r3, r3, #1
1000f6aa:	0028      	movs	r0, r5
1000f6ac:	0859      	lsrs	r1, r3, #1
1000f6ae:	bd70      	pop	{r4, r5, r6, pc}
1000f6b0:	210b      	movs	r1, #11
1000f6b2:	002c      	movs	r4, r5
1000f6b4:	1a08      	subs	r0, r1, r0
1000f6b6:	40c4      	lsrs	r4, r0
1000f6b8:	4095      	lsls	r5, r2
1000f6ba:	0324      	lsls	r4, r4, #12
1000f6bc:	055a      	lsls	r2, r3, #21
1000f6be:	0b24      	lsrs	r4, r4, #12
1000f6c0:	0d52      	lsrs	r2, r2, #21
1000f6c2:	e7e7      	b.n	1000f694 <__aeabi_ui2d+0x28>
1000f6c4:	2200      	movs	r2, #0
1000f6c6:	2400      	movs	r4, #0
1000f6c8:	e7e4      	b.n	1000f694 <__aeabi_ui2d+0x28>
1000f6ca:	46c0      	nop			; (mov r8, r8)
1000f6cc:	0000041e 	.word	0x0000041e
1000f6d0:	00000433 	.word	0x00000433
1000f6d4:	00000413 	.word	0x00000413
1000f6d8:	800fffff 	.word	0x800fffff

1000f6dc <__aeabi_cdrcmple>:
1000f6dc:	4684      	mov	ip, r0
1000f6de:	1c10      	adds	r0, r2, #0
1000f6e0:	4662      	mov	r2, ip
1000f6e2:	468c      	mov	ip, r1
1000f6e4:	1c19      	adds	r1, r3, #0
1000f6e6:	4663      	mov	r3, ip
1000f6e8:	e000      	b.n	1000f6ec <__aeabi_cdcmpeq>
1000f6ea:	46c0      	nop			; (mov r8, r8)

1000f6ec <__aeabi_cdcmpeq>:
1000f6ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000f6ee:	f000 f8f5 	bl	1000f8dc <__ledf2>
1000f6f2:	2800      	cmp	r0, #0
1000f6f4:	d401      	bmi.n	1000f6fa <__aeabi_cdcmpeq+0xe>
1000f6f6:	2100      	movs	r1, #0
1000f6f8:	42c8      	cmn	r0, r1
1000f6fa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1000f6fc <__aeabi_dcmpeq>:
1000f6fc:	b510      	push	{r4, lr}
1000f6fe:	f000 f849 	bl	1000f794 <__eqdf2>
1000f702:	4240      	negs	r0, r0
1000f704:	3001      	adds	r0, #1
1000f706:	bd10      	pop	{r4, pc}

1000f708 <__aeabi_dcmplt>:
1000f708:	b510      	push	{r4, lr}
1000f70a:	f000 f8e7 	bl	1000f8dc <__ledf2>
1000f70e:	2800      	cmp	r0, #0
1000f710:	db01      	blt.n	1000f716 <__aeabi_dcmplt+0xe>
1000f712:	2000      	movs	r0, #0
1000f714:	bd10      	pop	{r4, pc}
1000f716:	2001      	movs	r0, #1
1000f718:	bd10      	pop	{r4, pc}
1000f71a:	46c0      	nop			; (mov r8, r8)

1000f71c <__aeabi_dcmple>:
1000f71c:	b510      	push	{r4, lr}
1000f71e:	f000 f8dd 	bl	1000f8dc <__ledf2>
1000f722:	2800      	cmp	r0, #0
1000f724:	dd01      	ble.n	1000f72a <__aeabi_dcmple+0xe>
1000f726:	2000      	movs	r0, #0
1000f728:	bd10      	pop	{r4, pc}
1000f72a:	2001      	movs	r0, #1
1000f72c:	bd10      	pop	{r4, pc}
1000f72e:	46c0      	nop			; (mov r8, r8)

1000f730 <__aeabi_dcmpgt>:
1000f730:	b510      	push	{r4, lr}
1000f732:	f000 f86f 	bl	1000f814 <__gedf2>
1000f736:	2800      	cmp	r0, #0
1000f738:	dc01      	bgt.n	1000f73e <__aeabi_dcmpgt+0xe>
1000f73a:	2000      	movs	r0, #0
1000f73c:	bd10      	pop	{r4, pc}
1000f73e:	2001      	movs	r0, #1
1000f740:	bd10      	pop	{r4, pc}
1000f742:	46c0      	nop			; (mov r8, r8)

1000f744 <__aeabi_dcmpge>:
1000f744:	b510      	push	{r4, lr}
1000f746:	f000 f865 	bl	1000f814 <__gedf2>
1000f74a:	2800      	cmp	r0, #0
1000f74c:	da01      	bge.n	1000f752 <__aeabi_dcmpge+0xe>
1000f74e:	2000      	movs	r0, #0
1000f750:	bd10      	pop	{r4, pc}
1000f752:	2001      	movs	r0, #1
1000f754:	bd10      	pop	{r4, pc}
1000f756:	46c0      	nop			; (mov r8, r8)

1000f758 <__clzsi2>:
1000f758:	211c      	movs	r1, #28
1000f75a:	2301      	movs	r3, #1
1000f75c:	041b      	lsls	r3, r3, #16
1000f75e:	4298      	cmp	r0, r3
1000f760:	d301      	bcc.n	1000f766 <__clzsi2+0xe>
1000f762:	0c00      	lsrs	r0, r0, #16
1000f764:	3910      	subs	r1, #16
1000f766:	0a1b      	lsrs	r3, r3, #8
1000f768:	4298      	cmp	r0, r3
1000f76a:	d301      	bcc.n	1000f770 <__clzsi2+0x18>
1000f76c:	0a00      	lsrs	r0, r0, #8
1000f76e:	3908      	subs	r1, #8
1000f770:	091b      	lsrs	r3, r3, #4
1000f772:	4298      	cmp	r0, r3
1000f774:	d301      	bcc.n	1000f77a <__clzsi2+0x22>
1000f776:	0900      	lsrs	r0, r0, #4
1000f778:	3904      	subs	r1, #4
1000f77a:	a202      	add	r2, pc, #8	; (adr r2, 1000f784 <__clzsi2+0x2c>)
1000f77c:	5c10      	ldrb	r0, [r2, r0]
1000f77e:	1840      	adds	r0, r0, r1
1000f780:	4770      	bx	lr
1000f782:	46c0      	nop			; (mov r8, r8)
1000f784:	02020304 	.word	0x02020304
1000f788:	01010101 	.word	0x01010101
	...

1000f794 <__eqdf2>:
1000f794:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f796:	465f      	mov	r7, fp
1000f798:	4656      	mov	r6, sl
1000f79a:	464d      	mov	r5, r9
1000f79c:	4644      	mov	r4, r8
1000f79e:	b4f0      	push	{r4, r5, r6, r7}
1000f7a0:	031f      	lsls	r7, r3, #12
1000f7a2:	005c      	lsls	r4, r3, #1
1000f7a4:	0fdb      	lsrs	r3, r3, #31
1000f7a6:	469a      	mov	sl, r3
1000f7a8:	4b19      	ldr	r3, [pc, #100]	; (1000f810 <__eqdf2+0x7c>)
1000f7aa:	030e      	lsls	r6, r1, #12
1000f7ac:	004d      	lsls	r5, r1, #1
1000f7ae:	0fc9      	lsrs	r1, r1, #31
1000f7b0:	4680      	mov	r8, r0
1000f7b2:	0b36      	lsrs	r6, r6, #12
1000f7b4:	0d6d      	lsrs	r5, r5, #21
1000f7b6:	468b      	mov	fp, r1
1000f7b8:	4691      	mov	r9, r2
1000f7ba:	0b3f      	lsrs	r7, r7, #12
1000f7bc:	0d64      	lsrs	r4, r4, #21
1000f7be:	429d      	cmp	r5, r3
1000f7c0:	d019      	beq.n	1000f7f6 <__eqdf2+0x62>
1000f7c2:	4b13      	ldr	r3, [pc, #76]	; (1000f810 <__eqdf2+0x7c>)
1000f7c4:	429c      	cmp	r4, r3
1000f7c6:	d01b      	beq.n	1000f800 <__eqdf2+0x6c>
1000f7c8:	2301      	movs	r3, #1
1000f7ca:	42a5      	cmp	r5, r4
1000f7cc:	d006      	beq.n	1000f7dc <__eqdf2+0x48>
1000f7ce:	0018      	movs	r0, r3
1000f7d0:	bc3c      	pop	{r2, r3, r4, r5}
1000f7d2:	4690      	mov	r8, r2
1000f7d4:	4699      	mov	r9, r3
1000f7d6:	46a2      	mov	sl, r4
1000f7d8:	46ab      	mov	fp, r5
1000f7da:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f7dc:	42be      	cmp	r6, r7
1000f7de:	d1f6      	bne.n	1000f7ce <__eqdf2+0x3a>
1000f7e0:	45c8      	cmp	r8, r9
1000f7e2:	d1f4      	bne.n	1000f7ce <__eqdf2+0x3a>
1000f7e4:	45d3      	cmp	fp, sl
1000f7e6:	d010      	beq.n	1000f80a <__eqdf2+0x76>
1000f7e8:	2d00      	cmp	r5, #0
1000f7ea:	d1f0      	bne.n	1000f7ce <__eqdf2+0x3a>
1000f7ec:	4330      	orrs	r0, r6
1000f7ee:	0003      	movs	r3, r0
1000f7f0:	1e5a      	subs	r2, r3, #1
1000f7f2:	4193      	sbcs	r3, r2
1000f7f4:	e7eb      	b.n	1000f7ce <__eqdf2+0x3a>
1000f7f6:	0031      	movs	r1, r6
1000f7f8:	2301      	movs	r3, #1
1000f7fa:	4301      	orrs	r1, r0
1000f7fc:	d1e7      	bne.n	1000f7ce <__eqdf2+0x3a>
1000f7fe:	e7e0      	b.n	1000f7c2 <__eqdf2+0x2e>
1000f800:	433a      	orrs	r2, r7
1000f802:	2301      	movs	r3, #1
1000f804:	2a00      	cmp	r2, #0
1000f806:	d1e2      	bne.n	1000f7ce <__eqdf2+0x3a>
1000f808:	e7de      	b.n	1000f7c8 <__eqdf2+0x34>
1000f80a:	2300      	movs	r3, #0
1000f80c:	e7df      	b.n	1000f7ce <__eqdf2+0x3a>
1000f80e:	46c0      	nop			; (mov r8, r8)
1000f810:	000007ff 	.word	0x000007ff

1000f814 <__gedf2>:
1000f814:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f816:	465f      	mov	r7, fp
1000f818:	4644      	mov	r4, r8
1000f81a:	4656      	mov	r6, sl
1000f81c:	464d      	mov	r5, r9
1000f81e:	b4f0      	push	{r4, r5, r6, r7}
1000f820:	031f      	lsls	r7, r3, #12
1000f822:	0b3c      	lsrs	r4, r7, #12
1000f824:	4f2c      	ldr	r7, [pc, #176]	; (1000f8d8 <__gedf2+0xc4>)
1000f826:	030e      	lsls	r6, r1, #12
1000f828:	004d      	lsls	r5, r1, #1
1000f82a:	46a3      	mov	fp, r4
1000f82c:	005c      	lsls	r4, r3, #1
1000f82e:	4684      	mov	ip, r0
1000f830:	0b36      	lsrs	r6, r6, #12
1000f832:	0d6d      	lsrs	r5, r5, #21
1000f834:	0fc9      	lsrs	r1, r1, #31
1000f836:	4690      	mov	r8, r2
1000f838:	0d64      	lsrs	r4, r4, #21
1000f83a:	0fdb      	lsrs	r3, r3, #31
1000f83c:	42bd      	cmp	r5, r7
1000f83e:	d02b      	beq.n	1000f898 <__gedf2+0x84>
1000f840:	4f25      	ldr	r7, [pc, #148]	; (1000f8d8 <__gedf2+0xc4>)
1000f842:	42bc      	cmp	r4, r7
1000f844:	d02e      	beq.n	1000f8a4 <__gedf2+0x90>
1000f846:	2d00      	cmp	r5, #0
1000f848:	d10e      	bne.n	1000f868 <__gedf2+0x54>
1000f84a:	4330      	orrs	r0, r6
1000f84c:	0007      	movs	r7, r0
1000f84e:	4681      	mov	r9, r0
1000f850:	4278      	negs	r0, r7
1000f852:	4178      	adcs	r0, r7
1000f854:	2c00      	cmp	r4, #0
1000f856:	d117      	bne.n	1000f888 <__gedf2+0x74>
1000f858:	465f      	mov	r7, fp
1000f85a:	433a      	orrs	r2, r7
1000f85c:	d114      	bne.n	1000f888 <__gedf2+0x74>
1000f85e:	464b      	mov	r3, r9
1000f860:	2000      	movs	r0, #0
1000f862:	2b00      	cmp	r3, #0
1000f864:	d00a      	beq.n	1000f87c <__gedf2+0x68>
1000f866:	e006      	b.n	1000f876 <__gedf2+0x62>
1000f868:	2c00      	cmp	r4, #0
1000f86a:	d102      	bne.n	1000f872 <__gedf2+0x5e>
1000f86c:	4658      	mov	r0, fp
1000f86e:	4302      	orrs	r2, r0
1000f870:	d001      	beq.n	1000f876 <__gedf2+0x62>
1000f872:	4299      	cmp	r1, r3
1000f874:	d01a      	beq.n	1000f8ac <__gedf2+0x98>
1000f876:	2301      	movs	r3, #1
1000f878:	4248      	negs	r0, r1
1000f87a:	4318      	orrs	r0, r3
1000f87c:	bc3c      	pop	{r2, r3, r4, r5}
1000f87e:	4690      	mov	r8, r2
1000f880:	4699      	mov	r9, r3
1000f882:	46a2      	mov	sl, r4
1000f884:	46ab      	mov	fp, r5
1000f886:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f888:	2800      	cmp	r0, #0
1000f88a:	d0f2      	beq.n	1000f872 <__gedf2+0x5e>
1000f88c:	4258      	negs	r0, r3
1000f88e:	4158      	adcs	r0, r3
1000f890:	2201      	movs	r2, #1
1000f892:	4240      	negs	r0, r0
1000f894:	4310      	orrs	r0, r2
1000f896:	e7f1      	b.n	1000f87c <__gedf2+0x68>
1000f898:	0037      	movs	r7, r6
1000f89a:	4307      	orrs	r7, r0
1000f89c:	d0d0      	beq.n	1000f840 <__gedf2+0x2c>
1000f89e:	2002      	movs	r0, #2
1000f8a0:	4240      	negs	r0, r0
1000f8a2:	e7eb      	b.n	1000f87c <__gedf2+0x68>
1000f8a4:	465f      	mov	r7, fp
1000f8a6:	4317      	orrs	r7, r2
1000f8a8:	d0cd      	beq.n	1000f846 <__gedf2+0x32>
1000f8aa:	e7f8      	b.n	1000f89e <__gedf2+0x8a>
1000f8ac:	42a5      	cmp	r5, r4
1000f8ae:	dce2      	bgt.n	1000f876 <__gedf2+0x62>
1000f8b0:	db05      	blt.n	1000f8be <__gedf2+0xaa>
1000f8b2:	455e      	cmp	r6, fp
1000f8b4:	d8df      	bhi.n	1000f876 <__gedf2+0x62>
1000f8b6:	d008      	beq.n	1000f8ca <__gedf2+0xb6>
1000f8b8:	2000      	movs	r0, #0
1000f8ba:	455e      	cmp	r6, fp
1000f8bc:	d2de      	bcs.n	1000f87c <__gedf2+0x68>
1000f8be:	4248      	negs	r0, r1
1000f8c0:	4148      	adcs	r0, r1
1000f8c2:	2301      	movs	r3, #1
1000f8c4:	4240      	negs	r0, r0
1000f8c6:	4318      	orrs	r0, r3
1000f8c8:	e7d8      	b.n	1000f87c <__gedf2+0x68>
1000f8ca:	45c4      	cmp	ip, r8
1000f8cc:	d8d3      	bhi.n	1000f876 <__gedf2+0x62>
1000f8ce:	2000      	movs	r0, #0
1000f8d0:	45c4      	cmp	ip, r8
1000f8d2:	d3f4      	bcc.n	1000f8be <__gedf2+0xaa>
1000f8d4:	e7d2      	b.n	1000f87c <__gedf2+0x68>
1000f8d6:	46c0      	nop			; (mov r8, r8)
1000f8d8:	000007ff 	.word	0x000007ff

1000f8dc <__ledf2>:
1000f8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f8de:	465f      	mov	r7, fp
1000f8e0:	464d      	mov	r5, r9
1000f8e2:	4644      	mov	r4, r8
1000f8e4:	4656      	mov	r6, sl
1000f8e6:	b4f0      	push	{r4, r5, r6, r7}
1000f8e8:	031c      	lsls	r4, r3, #12
1000f8ea:	0b24      	lsrs	r4, r4, #12
1000f8ec:	46a4      	mov	ip, r4
1000f8ee:	4c2f      	ldr	r4, [pc, #188]	; (1000f9ac <__ledf2+0xd0>)
1000f8f0:	030f      	lsls	r7, r1, #12
1000f8f2:	004d      	lsls	r5, r1, #1
1000f8f4:	005e      	lsls	r6, r3, #1
1000f8f6:	0fc9      	lsrs	r1, r1, #31
1000f8f8:	4680      	mov	r8, r0
1000f8fa:	0b3f      	lsrs	r7, r7, #12
1000f8fc:	0d6d      	lsrs	r5, r5, #21
1000f8fe:	468b      	mov	fp, r1
1000f900:	4691      	mov	r9, r2
1000f902:	0d76      	lsrs	r6, r6, #21
1000f904:	0fdb      	lsrs	r3, r3, #31
1000f906:	42a5      	cmp	r5, r4
1000f908:	d020      	beq.n	1000f94c <__ledf2+0x70>
1000f90a:	4c28      	ldr	r4, [pc, #160]	; (1000f9ac <__ledf2+0xd0>)
1000f90c:	42a6      	cmp	r6, r4
1000f90e:	d022      	beq.n	1000f956 <__ledf2+0x7a>
1000f910:	2d00      	cmp	r5, #0
1000f912:	d112      	bne.n	1000f93a <__ledf2+0x5e>
1000f914:	4338      	orrs	r0, r7
1000f916:	4244      	negs	r4, r0
1000f918:	4144      	adcs	r4, r0
1000f91a:	2e00      	cmp	r6, #0
1000f91c:	d020      	beq.n	1000f960 <__ledf2+0x84>
1000f91e:	2c00      	cmp	r4, #0
1000f920:	d00d      	beq.n	1000f93e <__ledf2+0x62>
1000f922:	425c      	negs	r4, r3
1000f924:	4163      	adcs	r3, r4
1000f926:	2401      	movs	r4, #1
1000f928:	425b      	negs	r3, r3
1000f92a:	431c      	orrs	r4, r3
1000f92c:	0020      	movs	r0, r4
1000f92e:	bc3c      	pop	{r2, r3, r4, r5}
1000f930:	4690      	mov	r8, r2
1000f932:	4699      	mov	r9, r3
1000f934:	46a2      	mov	sl, r4
1000f936:	46ab      	mov	fp, r5
1000f938:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f93a:	2e00      	cmp	r6, #0
1000f93c:	d017      	beq.n	1000f96e <__ledf2+0x92>
1000f93e:	455b      	cmp	r3, fp
1000f940:	d019      	beq.n	1000f976 <__ledf2+0x9a>
1000f942:	465b      	mov	r3, fp
1000f944:	425c      	negs	r4, r3
1000f946:	2301      	movs	r3, #1
1000f948:	431c      	orrs	r4, r3
1000f94a:	e7ef      	b.n	1000f92c <__ledf2+0x50>
1000f94c:	0039      	movs	r1, r7
1000f94e:	2402      	movs	r4, #2
1000f950:	4301      	orrs	r1, r0
1000f952:	d1eb      	bne.n	1000f92c <__ledf2+0x50>
1000f954:	e7d9      	b.n	1000f90a <__ledf2+0x2e>
1000f956:	4661      	mov	r1, ip
1000f958:	2402      	movs	r4, #2
1000f95a:	4311      	orrs	r1, r2
1000f95c:	d1e6      	bne.n	1000f92c <__ledf2+0x50>
1000f95e:	e7d7      	b.n	1000f910 <__ledf2+0x34>
1000f960:	4661      	mov	r1, ip
1000f962:	430a      	orrs	r2, r1
1000f964:	d1db      	bne.n	1000f91e <__ledf2+0x42>
1000f966:	2400      	movs	r4, #0
1000f968:	2800      	cmp	r0, #0
1000f96a:	d0df      	beq.n	1000f92c <__ledf2+0x50>
1000f96c:	e7e9      	b.n	1000f942 <__ledf2+0x66>
1000f96e:	4661      	mov	r1, ip
1000f970:	430a      	orrs	r2, r1
1000f972:	d1e4      	bne.n	1000f93e <__ledf2+0x62>
1000f974:	e7e5      	b.n	1000f942 <__ledf2+0x66>
1000f976:	42b5      	cmp	r5, r6
1000f978:	dd03      	ble.n	1000f982 <__ledf2+0xa6>
1000f97a:	2201      	movs	r2, #1
1000f97c:	425c      	negs	r4, r3
1000f97e:	4314      	orrs	r4, r2
1000f980:	e7d4      	b.n	1000f92c <__ledf2+0x50>
1000f982:	42b5      	cmp	r5, r6
1000f984:	dbcd      	blt.n	1000f922 <__ledf2+0x46>
1000f986:	4567      	cmp	r7, ip
1000f988:	d8db      	bhi.n	1000f942 <__ledf2+0x66>
1000f98a:	d009      	beq.n	1000f9a0 <__ledf2+0xc4>
1000f98c:	2400      	movs	r4, #0
1000f98e:	4567      	cmp	r7, ip
1000f990:	d2cc      	bcs.n	1000f92c <__ledf2+0x50>
1000f992:	4659      	mov	r1, fp
1000f994:	424c      	negs	r4, r1
1000f996:	4161      	adcs	r1, r4
1000f998:	2401      	movs	r4, #1
1000f99a:	4249      	negs	r1, r1
1000f99c:	430c      	orrs	r4, r1
1000f99e:	e7c5      	b.n	1000f92c <__ledf2+0x50>
1000f9a0:	45c8      	cmp	r8, r9
1000f9a2:	d8ce      	bhi.n	1000f942 <__ledf2+0x66>
1000f9a4:	2400      	movs	r4, #0
1000f9a6:	45c8      	cmp	r8, r9
1000f9a8:	d3f3      	bcc.n	1000f992 <__ledf2+0xb6>
1000f9aa:	e7bf      	b.n	1000f92c <__ledf2+0x50>
1000f9ac:	000007ff 	.word	0x000007ff

1000f9b0 <__libc_init_array>:
1000f9b0:	4b0e      	ldr	r3, [pc, #56]	; (1000f9ec <__libc_init_array+0x3c>)
1000f9b2:	b570      	push	{r4, r5, r6, lr}
1000f9b4:	2500      	movs	r5, #0
1000f9b6:	001e      	movs	r6, r3
1000f9b8:	4c0d      	ldr	r4, [pc, #52]	; (1000f9f0 <__libc_init_array+0x40>)
1000f9ba:	1ae4      	subs	r4, r4, r3
1000f9bc:	10a4      	asrs	r4, r4, #2
1000f9be:	42a5      	cmp	r5, r4
1000f9c0:	d004      	beq.n	1000f9cc <__libc_init_array+0x1c>
1000f9c2:	00ab      	lsls	r3, r5, #2
1000f9c4:	58f3      	ldr	r3, [r6, r3]
1000f9c6:	4798      	blx	r3
1000f9c8:	3501      	adds	r5, #1
1000f9ca:	e7f8      	b.n	1000f9be <__libc_init_array+0xe>
1000f9cc:	f001 ff8a 	bl	100118e4 <_init>
1000f9d0:	4b08      	ldr	r3, [pc, #32]	; (1000f9f4 <__libc_init_array+0x44>)
1000f9d2:	2500      	movs	r5, #0
1000f9d4:	001e      	movs	r6, r3
1000f9d6:	4c08      	ldr	r4, [pc, #32]	; (1000f9f8 <__libc_init_array+0x48>)
1000f9d8:	1ae4      	subs	r4, r4, r3
1000f9da:	10a4      	asrs	r4, r4, #2
1000f9dc:	42a5      	cmp	r5, r4
1000f9de:	d004      	beq.n	1000f9ea <__libc_init_array+0x3a>
1000f9e0:	00ab      	lsls	r3, r5, #2
1000f9e2:	58f3      	ldr	r3, [r6, r3]
1000f9e4:	4798      	blx	r3
1000f9e6:	3501      	adds	r5, #1
1000f9e8:	e7f8      	b.n	1000f9dc <__libc_init_array+0x2c>
1000f9ea:	bd70      	pop	{r4, r5, r6, pc}
1000f9ec:	100118f0 	.word	0x100118f0
1000f9f0:	100118f0 	.word	0x100118f0
1000f9f4:	100118f0 	.word	0x100118f0
1000f9f8:	100118f4 	.word	0x100118f4

1000f9fc <memcmp>:
1000f9fc:	b530      	push	{r4, r5, lr}
1000f9fe:	2400      	movs	r4, #0
1000fa00:	42a2      	cmp	r2, r4
1000fa02:	d008      	beq.n	1000fa16 <memcmp+0x1a>
1000fa04:	5d03      	ldrb	r3, [r0, r4]
1000fa06:	1c65      	adds	r5, r4, #1
1000fa08:	5d0c      	ldrb	r4, [r1, r4]
1000fa0a:	42a3      	cmp	r3, r4
1000fa0c:	d001      	beq.n	1000fa12 <memcmp+0x16>
1000fa0e:	1b18      	subs	r0, r3, r4
1000fa10:	e002      	b.n	1000fa18 <memcmp+0x1c>
1000fa12:	002c      	movs	r4, r5
1000fa14:	e7f4      	b.n	1000fa00 <memcmp+0x4>
1000fa16:	2000      	movs	r0, #0
1000fa18:	bd30      	pop	{r4, r5, pc}

1000fa1a <memcpy>:
1000fa1a:	2300      	movs	r3, #0
1000fa1c:	b510      	push	{r4, lr}
1000fa1e:	429a      	cmp	r2, r3
1000fa20:	d003      	beq.n	1000fa2a <memcpy+0x10>
1000fa22:	5ccc      	ldrb	r4, [r1, r3]
1000fa24:	54c4      	strb	r4, [r0, r3]
1000fa26:	3301      	adds	r3, #1
1000fa28:	e7f9      	b.n	1000fa1e <memcpy+0x4>
1000fa2a:	bd10      	pop	{r4, pc}

1000fa2c <memset>:
1000fa2c:	0003      	movs	r3, r0
1000fa2e:	1882      	adds	r2, r0, r2
1000fa30:	4293      	cmp	r3, r2
1000fa32:	d002      	beq.n	1000fa3a <memset+0xe>
1000fa34:	7019      	strb	r1, [r3, #0]
1000fa36:	3301      	adds	r3, #1
1000fa38:	e7fa      	b.n	1000fa30 <memset+0x4>
1000fa3a:	4770      	bx	lr

1000fa3c <iprintf>:
1000fa3c:	b40f      	push	{r0, r1, r2, r3}
1000fa3e:	4b0b      	ldr	r3, [pc, #44]	; (1000fa6c <iprintf+0x30>)
1000fa40:	b513      	push	{r0, r1, r4, lr}
1000fa42:	681c      	ldr	r4, [r3, #0]
1000fa44:	2c00      	cmp	r4, #0
1000fa46:	d005      	beq.n	1000fa54 <iprintf+0x18>
1000fa48:	69a3      	ldr	r3, [r4, #24]
1000fa4a:	2b00      	cmp	r3, #0
1000fa4c:	d102      	bne.n	1000fa54 <iprintf+0x18>
1000fa4e:	0020      	movs	r0, r4
1000fa50:	f000 fb46 	bl	100100e0 <__sinit>
1000fa54:	ab05      	add	r3, sp, #20
1000fa56:	9a04      	ldr	r2, [sp, #16]
1000fa58:	68a1      	ldr	r1, [r4, #8]
1000fa5a:	0020      	movs	r0, r4
1000fa5c:	9301      	str	r3, [sp, #4]
1000fa5e:	f000 fd05 	bl	1001046c <_vfiprintf_r>
1000fa62:	bc16      	pop	{r1, r2, r4}
1000fa64:	bc08      	pop	{r3}
1000fa66:	b004      	add	sp, #16
1000fa68:	4718      	bx	r3
1000fa6a:	46c0      	nop			; (mov r8, r8)
1000fa6c:	1001196c 	.word	0x1001196c

1000fa70 <putchar>:
1000fa70:	4b08      	ldr	r3, [pc, #32]	; (1000fa94 <putchar+0x24>)
1000fa72:	b570      	push	{r4, r5, r6, lr}
1000fa74:	681c      	ldr	r4, [r3, #0]
1000fa76:	0005      	movs	r5, r0
1000fa78:	2c00      	cmp	r4, #0
1000fa7a:	d005      	beq.n	1000fa88 <putchar+0x18>
1000fa7c:	69a3      	ldr	r3, [r4, #24]
1000fa7e:	2b00      	cmp	r3, #0
1000fa80:	d102      	bne.n	1000fa88 <putchar+0x18>
1000fa82:	0020      	movs	r0, r4
1000fa84:	f000 fb2c 	bl	100100e0 <__sinit>
1000fa88:	0029      	movs	r1, r5
1000fa8a:	68a2      	ldr	r2, [r4, #8]
1000fa8c:	0020      	movs	r0, r4
1000fa8e:	f000 ff99 	bl	100109c4 <_putc_r>
1000fa92:	bd70      	pop	{r4, r5, r6, pc}
1000fa94:	1001196c 	.word	0x1001196c

1000fa98 <_puts_r>:
1000fa98:	b570      	push	{r4, r5, r6, lr}
1000fa9a:	0005      	movs	r5, r0
1000fa9c:	000e      	movs	r6, r1
1000fa9e:	2800      	cmp	r0, #0
1000faa0:	d004      	beq.n	1000faac <_puts_r+0x14>
1000faa2:	6983      	ldr	r3, [r0, #24]
1000faa4:	2b00      	cmp	r3, #0
1000faa6:	d101      	bne.n	1000faac <_puts_r+0x14>
1000faa8:	f000 fb1a 	bl	100100e0 <__sinit>
1000faac:	69ab      	ldr	r3, [r5, #24]
1000faae:	68ac      	ldr	r4, [r5, #8]
1000fab0:	2b00      	cmp	r3, #0
1000fab2:	d102      	bne.n	1000faba <_puts_r+0x22>
1000fab4:	0028      	movs	r0, r5
1000fab6:	f000 fb13 	bl	100100e0 <__sinit>
1000faba:	4b25      	ldr	r3, [pc, #148]	; (1000fb50 <_puts_r+0xb8>)
1000fabc:	429c      	cmp	r4, r3
1000fabe:	d101      	bne.n	1000fac4 <_puts_r+0x2c>
1000fac0:	686c      	ldr	r4, [r5, #4]
1000fac2:	e008      	b.n	1000fad6 <_puts_r+0x3e>
1000fac4:	4b23      	ldr	r3, [pc, #140]	; (1000fb54 <_puts_r+0xbc>)
1000fac6:	429c      	cmp	r4, r3
1000fac8:	d101      	bne.n	1000face <_puts_r+0x36>
1000faca:	68ac      	ldr	r4, [r5, #8]
1000facc:	e003      	b.n	1000fad6 <_puts_r+0x3e>
1000face:	4b22      	ldr	r3, [pc, #136]	; (1000fb58 <_puts_r+0xc0>)
1000fad0:	429c      	cmp	r4, r3
1000fad2:	d100      	bne.n	1000fad6 <_puts_r+0x3e>
1000fad4:	68ec      	ldr	r4, [r5, #12]
1000fad6:	89a3      	ldrh	r3, [r4, #12]
1000fad8:	071b      	lsls	r3, r3, #28
1000fada:	d502      	bpl.n	1000fae2 <_puts_r+0x4a>
1000fadc:	6923      	ldr	r3, [r4, #16]
1000fade:	2b00      	cmp	r3, #0
1000fae0:	d111      	bne.n	1000fb06 <_puts_r+0x6e>
1000fae2:	0021      	movs	r1, r4
1000fae4:	0028      	movs	r0, r5
1000fae6:	f000 f991 	bl	1000fe0c <__swsetup_r>
1000faea:	2800      	cmp	r0, #0
1000faec:	d00b      	beq.n	1000fb06 <_puts_r+0x6e>
1000faee:	2001      	movs	r0, #1
1000faf0:	4240      	negs	r0, r0
1000faf2:	e02b      	b.n	1000fb4c <_puts_r+0xb4>
1000faf4:	3b01      	subs	r3, #1
1000faf6:	3601      	adds	r6, #1
1000faf8:	60a3      	str	r3, [r4, #8]
1000fafa:	2b00      	cmp	r3, #0
1000fafc:	db08      	blt.n	1000fb10 <_puts_r+0x78>
1000fafe:	6823      	ldr	r3, [r4, #0]
1000fb00:	1c5a      	adds	r2, r3, #1
1000fb02:	6022      	str	r2, [r4, #0]
1000fb04:	7019      	strb	r1, [r3, #0]
1000fb06:	7831      	ldrb	r1, [r6, #0]
1000fb08:	68a3      	ldr	r3, [r4, #8]
1000fb0a:	2900      	cmp	r1, #0
1000fb0c:	d1f2      	bne.n	1000faf4 <_puts_r+0x5c>
1000fb0e:	e00b      	b.n	1000fb28 <_puts_r+0x90>
1000fb10:	69a2      	ldr	r2, [r4, #24]
1000fb12:	4293      	cmp	r3, r2
1000fb14:	db01      	blt.n	1000fb1a <_puts_r+0x82>
1000fb16:	290a      	cmp	r1, #10
1000fb18:	d1f1      	bne.n	1000fafe <_puts_r+0x66>
1000fb1a:	0022      	movs	r2, r4
1000fb1c:	0028      	movs	r0, r5
1000fb1e:	f000 f91d 	bl	1000fd5c <__swbuf_r>
1000fb22:	1c43      	adds	r3, r0, #1
1000fb24:	d1ef      	bne.n	1000fb06 <_puts_r+0x6e>
1000fb26:	e7e2      	b.n	1000faee <_puts_r+0x56>
1000fb28:	3b01      	subs	r3, #1
1000fb2a:	60a3      	str	r3, [r4, #8]
1000fb2c:	2b00      	cmp	r3, #0
1000fb2e:	da08      	bge.n	1000fb42 <_puts_r+0xaa>
1000fb30:	0022      	movs	r2, r4
1000fb32:	310a      	adds	r1, #10
1000fb34:	0028      	movs	r0, r5
1000fb36:	f000 f911 	bl	1000fd5c <__swbuf_r>
1000fb3a:	1c43      	adds	r3, r0, #1
1000fb3c:	d0d7      	beq.n	1000faee <_puts_r+0x56>
1000fb3e:	200a      	movs	r0, #10
1000fb40:	e004      	b.n	1000fb4c <_puts_r+0xb4>
1000fb42:	200a      	movs	r0, #10
1000fb44:	6823      	ldr	r3, [r4, #0]
1000fb46:	1c5a      	adds	r2, r3, #1
1000fb48:	6022      	str	r2, [r4, #0]
1000fb4a:	7018      	strb	r0, [r3, #0]
1000fb4c:	bd70      	pop	{r4, r5, r6, pc}
1000fb4e:	46c0      	nop			; (mov r8, r8)
1000fb50:	10011850 	.word	0x10011850
1000fb54:	10011870 	.word	0x10011870
1000fb58:	10011890 	.word	0x10011890

1000fb5c <puts>:
1000fb5c:	b510      	push	{r4, lr}
1000fb5e:	4b03      	ldr	r3, [pc, #12]	; (1000fb6c <puts+0x10>)
1000fb60:	0001      	movs	r1, r0
1000fb62:	6818      	ldr	r0, [r3, #0]
1000fb64:	f7ff ff98 	bl	1000fa98 <_puts_r>
1000fb68:	bd10      	pop	{r4, pc}
1000fb6a:	46c0      	nop			; (mov r8, r8)
1000fb6c:	1001196c 	.word	0x1001196c

1000fb70 <rand>:
1000fb70:	4b15      	ldr	r3, [pc, #84]	; (1000fbc8 <rand+0x58>)
1000fb72:	b510      	push	{r4, lr}
1000fb74:	681c      	ldr	r4, [r3, #0]
1000fb76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1000fb78:	2b00      	cmp	r3, #0
1000fb7a:	d115      	bne.n	1000fba8 <rand+0x38>
1000fb7c:	2018      	movs	r0, #24
1000fb7e:	f000 fba7 	bl	100102d0 <malloc>
1000fb82:	4b12      	ldr	r3, [pc, #72]	; (1000fbcc <rand+0x5c>)
1000fb84:	63a0      	str	r0, [r4, #56]	; 0x38
1000fb86:	8003      	strh	r3, [r0, #0]
1000fb88:	4b11      	ldr	r3, [pc, #68]	; (1000fbd0 <rand+0x60>)
1000fb8a:	2201      	movs	r2, #1
1000fb8c:	8043      	strh	r3, [r0, #2]
1000fb8e:	4b11      	ldr	r3, [pc, #68]	; (1000fbd4 <rand+0x64>)
1000fb90:	8083      	strh	r3, [r0, #4]
1000fb92:	4b11      	ldr	r3, [pc, #68]	; (1000fbd8 <rand+0x68>)
1000fb94:	80c3      	strh	r3, [r0, #6]
1000fb96:	4b11      	ldr	r3, [pc, #68]	; (1000fbdc <rand+0x6c>)
1000fb98:	8103      	strh	r3, [r0, #8]
1000fb9a:	2305      	movs	r3, #5
1000fb9c:	8143      	strh	r3, [r0, #10]
1000fb9e:	3306      	adds	r3, #6
1000fba0:	8183      	strh	r3, [r0, #12]
1000fba2:	2300      	movs	r3, #0
1000fba4:	6102      	str	r2, [r0, #16]
1000fba6:	6143      	str	r3, [r0, #20]
1000fba8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
1000fbaa:	4a0d      	ldr	r2, [pc, #52]	; (1000fbe0 <rand+0x70>)
1000fbac:	6920      	ldr	r0, [r4, #16]
1000fbae:	6961      	ldr	r1, [r4, #20]
1000fbb0:	4b0c      	ldr	r3, [pc, #48]	; (1000fbe4 <rand+0x74>)
1000fbb2:	f001 f819 	bl	10010be8 <__aeabi_lmul>
1000fbb6:	2201      	movs	r2, #1
1000fbb8:	2300      	movs	r3, #0
1000fbba:	1880      	adds	r0, r0, r2
1000fbbc:	4159      	adcs	r1, r3
1000fbbe:	6120      	str	r0, [r4, #16]
1000fbc0:	6161      	str	r1, [r4, #20]
1000fbc2:	0048      	lsls	r0, r1, #1
1000fbc4:	0840      	lsrs	r0, r0, #1
1000fbc6:	bd10      	pop	{r4, pc}
1000fbc8:	1001196c 	.word	0x1001196c
1000fbcc:	0000330e 	.word	0x0000330e
1000fbd0:	ffffabcd 	.word	0xffffabcd
1000fbd4:	00001234 	.word	0x00001234
1000fbd8:	ffffe66d 	.word	0xffffe66d
1000fbdc:	ffffdeec 	.word	0xffffdeec
1000fbe0:	4c957f2d 	.word	0x4c957f2d
1000fbe4:	5851f42d 	.word	0x5851f42d

1000fbe8 <setbuf>:
1000fbe8:	424a      	negs	r2, r1
1000fbea:	414a      	adcs	r2, r1
1000fbec:	2380      	movs	r3, #128	; 0x80
1000fbee:	b510      	push	{r4, lr}
1000fbf0:	0052      	lsls	r2, r2, #1
1000fbf2:	00db      	lsls	r3, r3, #3
1000fbf4:	f000 f802 	bl	1000fbfc <setvbuf>
1000fbf8:	bd10      	pop	{r4, pc}
	...

1000fbfc <setvbuf>:
1000fbfc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fbfe:	001d      	movs	r5, r3
1000fc00:	4b51      	ldr	r3, [pc, #324]	; (1000fd48 <setvbuf+0x14c>)
1000fc02:	b085      	sub	sp, #20
1000fc04:	681e      	ldr	r6, [r3, #0]
1000fc06:	0004      	movs	r4, r0
1000fc08:	000f      	movs	r7, r1
1000fc0a:	9200      	str	r2, [sp, #0]
1000fc0c:	2e00      	cmp	r6, #0
1000fc0e:	d005      	beq.n	1000fc1c <setvbuf+0x20>
1000fc10:	69b3      	ldr	r3, [r6, #24]
1000fc12:	2b00      	cmp	r3, #0
1000fc14:	d102      	bne.n	1000fc1c <setvbuf+0x20>
1000fc16:	0030      	movs	r0, r6
1000fc18:	f000 fa62 	bl	100100e0 <__sinit>
1000fc1c:	4b4b      	ldr	r3, [pc, #300]	; (1000fd4c <setvbuf+0x150>)
1000fc1e:	429c      	cmp	r4, r3
1000fc20:	d101      	bne.n	1000fc26 <setvbuf+0x2a>
1000fc22:	6874      	ldr	r4, [r6, #4]
1000fc24:	e008      	b.n	1000fc38 <setvbuf+0x3c>
1000fc26:	4b4a      	ldr	r3, [pc, #296]	; (1000fd50 <setvbuf+0x154>)
1000fc28:	429c      	cmp	r4, r3
1000fc2a:	d101      	bne.n	1000fc30 <setvbuf+0x34>
1000fc2c:	68b4      	ldr	r4, [r6, #8]
1000fc2e:	e003      	b.n	1000fc38 <setvbuf+0x3c>
1000fc30:	4b48      	ldr	r3, [pc, #288]	; (1000fd54 <setvbuf+0x158>)
1000fc32:	429c      	cmp	r4, r3
1000fc34:	d100      	bne.n	1000fc38 <setvbuf+0x3c>
1000fc36:	68f4      	ldr	r4, [r6, #12]
1000fc38:	9b00      	ldr	r3, [sp, #0]
1000fc3a:	2b02      	cmp	r3, #2
1000fc3c:	d005      	beq.n	1000fc4a <setvbuf+0x4e>
1000fc3e:	2b01      	cmp	r3, #1
1000fc40:	d900      	bls.n	1000fc44 <setvbuf+0x48>
1000fc42:	e07c      	b.n	1000fd3e <setvbuf+0x142>
1000fc44:	2d00      	cmp	r5, #0
1000fc46:	da00      	bge.n	1000fc4a <setvbuf+0x4e>
1000fc48:	e079      	b.n	1000fd3e <setvbuf+0x142>
1000fc4a:	0021      	movs	r1, r4
1000fc4c:	0030      	movs	r0, r6
1000fc4e:	f000 f9d9 	bl	10010004 <_fflush_r>
1000fc52:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000fc54:	2900      	cmp	r1, #0
1000fc56:	d008      	beq.n	1000fc6a <setvbuf+0x6e>
1000fc58:	0023      	movs	r3, r4
1000fc5a:	3344      	adds	r3, #68	; 0x44
1000fc5c:	4299      	cmp	r1, r3
1000fc5e:	d002      	beq.n	1000fc66 <setvbuf+0x6a>
1000fc60:	0030      	movs	r0, r6
1000fc62:	f000 fb3f 	bl	100102e4 <_free_r>
1000fc66:	2300      	movs	r3, #0
1000fc68:	6363      	str	r3, [r4, #52]	; 0x34
1000fc6a:	2300      	movs	r3, #0
1000fc6c:	61a3      	str	r3, [r4, #24]
1000fc6e:	6063      	str	r3, [r4, #4]
1000fc70:	89a3      	ldrh	r3, [r4, #12]
1000fc72:	061b      	lsls	r3, r3, #24
1000fc74:	d503      	bpl.n	1000fc7e <setvbuf+0x82>
1000fc76:	6921      	ldr	r1, [r4, #16]
1000fc78:	0030      	movs	r0, r6
1000fc7a:	f000 fb33 	bl	100102e4 <_free_r>
1000fc7e:	89a2      	ldrh	r2, [r4, #12]
1000fc80:	4b35      	ldr	r3, [pc, #212]	; (1000fd58 <setvbuf+0x15c>)
1000fc82:	4013      	ands	r3, r2
1000fc84:	81a3      	strh	r3, [r4, #12]
1000fc86:	9b00      	ldr	r3, [sp, #0]
1000fc88:	2b02      	cmp	r3, #2
1000fc8a:	d021      	beq.n	1000fcd0 <setvbuf+0xd4>
1000fc8c:	ab03      	add	r3, sp, #12
1000fc8e:	aa02      	add	r2, sp, #8
1000fc90:	0021      	movs	r1, r4
1000fc92:	0030      	movs	r0, r6
1000fc94:	f000 fab8 	bl	10010208 <__swhatbuf_r>
1000fc98:	89a3      	ldrh	r3, [r4, #12]
1000fc9a:	4318      	orrs	r0, r3
1000fc9c:	81a0      	strh	r0, [r4, #12]
1000fc9e:	2d00      	cmp	r5, #0
1000fca0:	d101      	bne.n	1000fca6 <setvbuf+0xaa>
1000fca2:	9d02      	ldr	r5, [sp, #8]
1000fca4:	e001      	b.n	1000fcaa <setvbuf+0xae>
1000fca6:	2f00      	cmp	r7, #0
1000fca8:	d125      	bne.n	1000fcf6 <setvbuf+0xfa>
1000fcaa:	0028      	movs	r0, r5
1000fcac:	f000 fb10 	bl	100102d0 <malloc>
1000fcb0:	9501      	str	r5, [sp, #4]
1000fcb2:	1e07      	subs	r7, r0, #0
1000fcb4:	d11a      	bne.n	1000fcec <setvbuf+0xf0>
1000fcb6:	9b02      	ldr	r3, [sp, #8]
1000fcb8:	9301      	str	r3, [sp, #4]
1000fcba:	42ab      	cmp	r3, r5
1000fcbc:	d102      	bne.n	1000fcc4 <setvbuf+0xc8>
1000fcbe:	2001      	movs	r0, #1
1000fcc0:	4240      	negs	r0, r0
1000fcc2:	e006      	b.n	1000fcd2 <setvbuf+0xd6>
1000fcc4:	9801      	ldr	r0, [sp, #4]
1000fcc6:	f000 fb03 	bl	100102d0 <malloc>
1000fcca:	1e07      	subs	r7, r0, #0
1000fccc:	d10e      	bne.n	1000fcec <setvbuf+0xf0>
1000fcce:	e7f6      	b.n	1000fcbe <setvbuf+0xc2>
1000fcd0:	2000      	movs	r0, #0
1000fcd2:	2202      	movs	r2, #2
1000fcd4:	89a3      	ldrh	r3, [r4, #12]
1000fcd6:	4313      	orrs	r3, r2
1000fcd8:	81a3      	strh	r3, [r4, #12]
1000fcda:	2300      	movs	r3, #0
1000fcdc:	60a3      	str	r3, [r4, #8]
1000fcde:	0023      	movs	r3, r4
1000fce0:	3347      	adds	r3, #71	; 0x47
1000fce2:	6023      	str	r3, [r4, #0]
1000fce4:	6123      	str	r3, [r4, #16]
1000fce6:	2301      	movs	r3, #1
1000fce8:	6163      	str	r3, [r4, #20]
1000fcea:	e02a      	b.n	1000fd42 <setvbuf+0x146>
1000fcec:	2280      	movs	r2, #128	; 0x80
1000fcee:	89a3      	ldrh	r3, [r4, #12]
1000fcf0:	9d01      	ldr	r5, [sp, #4]
1000fcf2:	4313      	orrs	r3, r2
1000fcf4:	81a3      	strh	r3, [r4, #12]
1000fcf6:	69b3      	ldr	r3, [r6, #24]
1000fcf8:	2b00      	cmp	r3, #0
1000fcfa:	d102      	bne.n	1000fd02 <setvbuf+0x106>
1000fcfc:	0030      	movs	r0, r6
1000fcfe:	f000 f9ef 	bl	100100e0 <__sinit>
1000fd02:	9b00      	ldr	r3, [sp, #0]
1000fd04:	2b01      	cmp	r3, #1
1000fd06:	d103      	bne.n	1000fd10 <setvbuf+0x114>
1000fd08:	89a3      	ldrh	r3, [r4, #12]
1000fd0a:	9a00      	ldr	r2, [sp, #0]
1000fd0c:	431a      	orrs	r2, r3
1000fd0e:	81a2      	strh	r2, [r4, #12]
1000fd10:	2308      	movs	r3, #8
1000fd12:	89a2      	ldrh	r2, [r4, #12]
1000fd14:	6027      	str	r7, [r4, #0]
1000fd16:	4013      	ands	r3, r2
1000fd18:	6127      	str	r7, [r4, #16]
1000fd1a:	6165      	str	r5, [r4, #20]
1000fd1c:	1e18      	subs	r0, r3, #0
1000fd1e:	d00c      	beq.n	1000fd3a <setvbuf+0x13e>
1000fd20:	2301      	movs	r3, #1
1000fd22:	401a      	ands	r2, r3
1000fd24:	2300      	movs	r3, #0
1000fd26:	1e10      	subs	r0, r2, #0
1000fd28:	4298      	cmp	r0, r3
1000fd2a:	d004      	beq.n	1000fd36 <setvbuf+0x13a>
1000fd2c:	426d      	negs	r5, r5
1000fd2e:	60a3      	str	r3, [r4, #8]
1000fd30:	61a5      	str	r5, [r4, #24]
1000fd32:	0018      	movs	r0, r3
1000fd34:	e005      	b.n	1000fd42 <setvbuf+0x146>
1000fd36:	60a5      	str	r5, [r4, #8]
1000fd38:	e003      	b.n	1000fd42 <setvbuf+0x146>
1000fd3a:	60a3      	str	r3, [r4, #8]
1000fd3c:	e001      	b.n	1000fd42 <setvbuf+0x146>
1000fd3e:	2001      	movs	r0, #1
1000fd40:	4240      	negs	r0, r0
1000fd42:	b005      	add	sp, #20
1000fd44:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fd46:	46c0      	nop			; (mov r8, r8)
1000fd48:	1001196c 	.word	0x1001196c
1000fd4c:	10011850 	.word	0x10011850
1000fd50:	10011870 	.word	0x10011870
1000fd54:	10011890 	.word	0x10011890
1000fd58:	fffff35c 	.word	0xfffff35c

1000fd5c <__swbuf_r>:
1000fd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000fd5e:	0005      	movs	r5, r0
1000fd60:	000f      	movs	r7, r1
1000fd62:	0014      	movs	r4, r2
1000fd64:	2800      	cmp	r0, #0
1000fd66:	d004      	beq.n	1000fd72 <__swbuf_r+0x16>
1000fd68:	6983      	ldr	r3, [r0, #24]
1000fd6a:	2b00      	cmp	r3, #0
1000fd6c:	d101      	bne.n	1000fd72 <__swbuf_r+0x16>
1000fd6e:	f000 f9b7 	bl	100100e0 <__sinit>
1000fd72:	4b23      	ldr	r3, [pc, #140]	; (1000fe00 <__swbuf_r+0xa4>)
1000fd74:	429c      	cmp	r4, r3
1000fd76:	d101      	bne.n	1000fd7c <__swbuf_r+0x20>
1000fd78:	686c      	ldr	r4, [r5, #4]
1000fd7a:	e008      	b.n	1000fd8e <__swbuf_r+0x32>
1000fd7c:	4b21      	ldr	r3, [pc, #132]	; (1000fe04 <__swbuf_r+0xa8>)
1000fd7e:	429c      	cmp	r4, r3
1000fd80:	d101      	bne.n	1000fd86 <__swbuf_r+0x2a>
1000fd82:	68ac      	ldr	r4, [r5, #8]
1000fd84:	e003      	b.n	1000fd8e <__swbuf_r+0x32>
1000fd86:	4b20      	ldr	r3, [pc, #128]	; (1000fe08 <__swbuf_r+0xac>)
1000fd88:	429c      	cmp	r4, r3
1000fd8a:	d100      	bne.n	1000fd8e <__swbuf_r+0x32>
1000fd8c:	68ec      	ldr	r4, [r5, #12]
1000fd8e:	69a3      	ldr	r3, [r4, #24]
1000fd90:	60a3      	str	r3, [r4, #8]
1000fd92:	89a3      	ldrh	r3, [r4, #12]
1000fd94:	071b      	lsls	r3, r3, #28
1000fd96:	d50a      	bpl.n	1000fdae <__swbuf_r+0x52>
1000fd98:	6923      	ldr	r3, [r4, #16]
1000fd9a:	2b00      	cmp	r3, #0
1000fd9c:	d007      	beq.n	1000fdae <__swbuf_r+0x52>
1000fd9e:	6823      	ldr	r3, [r4, #0]
1000fda0:	6922      	ldr	r2, [r4, #16]
1000fda2:	b2fe      	uxtb	r6, r7
1000fda4:	1a98      	subs	r0, r3, r2
1000fda6:	6963      	ldr	r3, [r4, #20]
1000fda8:	4298      	cmp	r0, r3
1000fdaa:	db0f      	blt.n	1000fdcc <__swbuf_r+0x70>
1000fdac:	e008      	b.n	1000fdc0 <__swbuf_r+0x64>
1000fdae:	0021      	movs	r1, r4
1000fdb0:	0028      	movs	r0, r5
1000fdb2:	f000 f82b 	bl	1000fe0c <__swsetup_r>
1000fdb6:	2800      	cmp	r0, #0
1000fdb8:	d0f1      	beq.n	1000fd9e <__swbuf_r+0x42>
1000fdba:	2001      	movs	r0, #1
1000fdbc:	4240      	negs	r0, r0
1000fdbe:	e01d      	b.n	1000fdfc <__swbuf_r+0xa0>
1000fdc0:	0021      	movs	r1, r4
1000fdc2:	0028      	movs	r0, r5
1000fdc4:	f000 f91e 	bl	10010004 <_fflush_r>
1000fdc8:	2800      	cmp	r0, #0
1000fdca:	d1f6      	bne.n	1000fdba <__swbuf_r+0x5e>
1000fdcc:	68a3      	ldr	r3, [r4, #8]
1000fdce:	3001      	adds	r0, #1
1000fdd0:	3b01      	subs	r3, #1
1000fdd2:	60a3      	str	r3, [r4, #8]
1000fdd4:	6823      	ldr	r3, [r4, #0]
1000fdd6:	1c5a      	adds	r2, r3, #1
1000fdd8:	6022      	str	r2, [r4, #0]
1000fdda:	701f      	strb	r7, [r3, #0]
1000fddc:	6963      	ldr	r3, [r4, #20]
1000fdde:	4298      	cmp	r0, r3
1000fde0:	d005      	beq.n	1000fdee <__swbuf_r+0x92>
1000fde2:	89a3      	ldrh	r3, [r4, #12]
1000fde4:	0030      	movs	r0, r6
1000fde6:	07db      	lsls	r3, r3, #31
1000fde8:	d508      	bpl.n	1000fdfc <__swbuf_r+0xa0>
1000fdea:	2e0a      	cmp	r6, #10
1000fdec:	d106      	bne.n	1000fdfc <__swbuf_r+0xa0>
1000fdee:	0021      	movs	r1, r4
1000fdf0:	0028      	movs	r0, r5
1000fdf2:	f000 f907 	bl	10010004 <_fflush_r>
1000fdf6:	2800      	cmp	r0, #0
1000fdf8:	d1df      	bne.n	1000fdba <__swbuf_r+0x5e>
1000fdfa:	0030      	movs	r0, r6
1000fdfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000fdfe:	46c0      	nop			; (mov r8, r8)
1000fe00:	10011850 	.word	0x10011850
1000fe04:	10011870 	.word	0x10011870
1000fe08:	10011890 	.word	0x10011890

1000fe0c <__swsetup_r>:
1000fe0c:	4b36      	ldr	r3, [pc, #216]	; (1000fee8 <__swsetup_r+0xdc>)
1000fe0e:	b570      	push	{r4, r5, r6, lr}
1000fe10:	681d      	ldr	r5, [r3, #0]
1000fe12:	0006      	movs	r6, r0
1000fe14:	000c      	movs	r4, r1
1000fe16:	2d00      	cmp	r5, #0
1000fe18:	d005      	beq.n	1000fe26 <__swsetup_r+0x1a>
1000fe1a:	69ab      	ldr	r3, [r5, #24]
1000fe1c:	2b00      	cmp	r3, #0
1000fe1e:	d102      	bne.n	1000fe26 <__swsetup_r+0x1a>
1000fe20:	0028      	movs	r0, r5
1000fe22:	f000 f95d 	bl	100100e0 <__sinit>
1000fe26:	4b31      	ldr	r3, [pc, #196]	; (1000feec <__swsetup_r+0xe0>)
1000fe28:	429c      	cmp	r4, r3
1000fe2a:	d101      	bne.n	1000fe30 <__swsetup_r+0x24>
1000fe2c:	686c      	ldr	r4, [r5, #4]
1000fe2e:	e008      	b.n	1000fe42 <__swsetup_r+0x36>
1000fe30:	4b2f      	ldr	r3, [pc, #188]	; (1000fef0 <__swsetup_r+0xe4>)
1000fe32:	429c      	cmp	r4, r3
1000fe34:	d101      	bne.n	1000fe3a <__swsetup_r+0x2e>
1000fe36:	68ac      	ldr	r4, [r5, #8]
1000fe38:	e003      	b.n	1000fe42 <__swsetup_r+0x36>
1000fe3a:	4b2e      	ldr	r3, [pc, #184]	; (1000fef4 <__swsetup_r+0xe8>)
1000fe3c:	429c      	cmp	r4, r3
1000fe3e:	d100      	bne.n	1000fe42 <__swsetup_r+0x36>
1000fe40:	68ec      	ldr	r4, [r5, #12]
1000fe42:	220c      	movs	r2, #12
1000fe44:	5ea3      	ldrsh	r3, [r4, r2]
1000fe46:	b29a      	uxth	r2, r3
1000fe48:	0711      	lsls	r1, r2, #28
1000fe4a:	d423      	bmi.n	1000fe94 <__swsetup_r+0x88>
1000fe4c:	06d1      	lsls	r1, r2, #27
1000fe4e:	d407      	bmi.n	1000fe60 <__swsetup_r+0x54>
1000fe50:	2209      	movs	r2, #9
1000fe52:	2001      	movs	r0, #1
1000fe54:	6032      	str	r2, [r6, #0]
1000fe56:	3237      	adds	r2, #55	; 0x37
1000fe58:	4313      	orrs	r3, r2
1000fe5a:	81a3      	strh	r3, [r4, #12]
1000fe5c:	4240      	negs	r0, r0
1000fe5e:	e042      	b.n	1000fee6 <__swsetup_r+0xda>
1000fe60:	0753      	lsls	r3, r2, #29
1000fe62:	d513      	bpl.n	1000fe8c <__swsetup_r+0x80>
1000fe64:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000fe66:	2900      	cmp	r1, #0
1000fe68:	d008      	beq.n	1000fe7c <__swsetup_r+0x70>
1000fe6a:	0023      	movs	r3, r4
1000fe6c:	3344      	adds	r3, #68	; 0x44
1000fe6e:	4299      	cmp	r1, r3
1000fe70:	d002      	beq.n	1000fe78 <__swsetup_r+0x6c>
1000fe72:	0030      	movs	r0, r6
1000fe74:	f000 fa36 	bl	100102e4 <_free_r>
1000fe78:	2300      	movs	r3, #0
1000fe7a:	6363      	str	r3, [r4, #52]	; 0x34
1000fe7c:	2224      	movs	r2, #36	; 0x24
1000fe7e:	89a3      	ldrh	r3, [r4, #12]
1000fe80:	4393      	bics	r3, r2
1000fe82:	81a3      	strh	r3, [r4, #12]
1000fe84:	2300      	movs	r3, #0
1000fe86:	6063      	str	r3, [r4, #4]
1000fe88:	6923      	ldr	r3, [r4, #16]
1000fe8a:	6023      	str	r3, [r4, #0]
1000fe8c:	2208      	movs	r2, #8
1000fe8e:	89a3      	ldrh	r3, [r4, #12]
1000fe90:	4313      	orrs	r3, r2
1000fe92:	81a3      	strh	r3, [r4, #12]
1000fe94:	6923      	ldr	r3, [r4, #16]
1000fe96:	2b00      	cmp	r3, #0
1000fe98:	d10b      	bne.n	1000feb2 <__swsetup_r+0xa6>
1000fe9a:	23a0      	movs	r3, #160	; 0xa0
1000fe9c:	89a2      	ldrh	r2, [r4, #12]
1000fe9e:	009b      	lsls	r3, r3, #2
1000fea0:	4013      	ands	r3, r2
1000fea2:	2280      	movs	r2, #128	; 0x80
1000fea4:	0092      	lsls	r2, r2, #2
1000fea6:	4293      	cmp	r3, r2
1000fea8:	d003      	beq.n	1000feb2 <__swsetup_r+0xa6>
1000feaa:	0021      	movs	r1, r4
1000feac:	0030      	movs	r0, r6
1000feae:	f000 f9d1 	bl	10010254 <__smakebuf_r>
1000feb2:	2301      	movs	r3, #1
1000feb4:	89a2      	ldrh	r2, [r4, #12]
1000feb6:	4013      	ands	r3, r2
1000feb8:	d005      	beq.n	1000fec6 <__swsetup_r+0xba>
1000feba:	2300      	movs	r3, #0
1000febc:	60a3      	str	r3, [r4, #8]
1000febe:	6963      	ldr	r3, [r4, #20]
1000fec0:	425b      	negs	r3, r3
1000fec2:	61a3      	str	r3, [r4, #24]
1000fec4:	e003      	b.n	1000fece <__swsetup_r+0xc2>
1000fec6:	0792      	lsls	r2, r2, #30
1000fec8:	d400      	bmi.n	1000fecc <__swsetup_r+0xc0>
1000feca:	6963      	ldr	r3, [r4, #20]
1000fecc:	60a3      	str	r3, [r4, #8]
1000fece:	2000      	movs	r0, #0
1000fed0:	6923      	ldr	r3, [r4, #16]
1000fed2:	4283      	cmp	r3, r0
1000fed4:	d107      	bne.n	1000fee6 <__swsetup_r+0xda>
1000fed6:	220c      	movs	r2, #12
1000fed8:	5ea3      	ldrsh	r3, [r4, r2]
1000feda:	061a      	lsls	r2, r3, #24
1000fedc:	d503      	bpl.n	1000fee6 <__swsetup_r+0xda>
1000fede:	2240      	movs	r2, #64	; 0x40
1000fee0:	4313      	orrs	r3, r2
1000fee2:	81a3      	strh	r3, [r4, #12]
1000fee4:	3801      	subs	r0, #1
1000fee6:	bd70      	pop	{r4, r5, r6, pc}
1000fee8:	1001196c 	.word	0x1001196c
1000feec:	10011850 	.word	0x10011850
1000fef0:	10011870 	.word	0x10011870
1000fef4:	10011890 	.word	0x10011890

1000fef8 <__sflush_r>:
1000fef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fefa:	898a      	ldrh	r2, [r1, #12]
1000fefc:	0005      	movs	r5, r0
1000fefe:	000c      	movs	r4, r1
1000ff00:	0713      	lsls	r3, r2, #28
1000ff02:	d45a      	bmi.n	1000ffba <__sflush_r+0xc2>
1000ff04:	684b      	ldr	r3, [r1, #4]
1000ff06:	2b00      	cmp	r3, #0
1000ff08:	dc02      	bgt.n	1000ff10 <__sflush_r+0x18>
1000ff0a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1000ff0c:	2b00      	cmp	r3, #0
1000ff0e:	dd19      	ble.n	1000ff44 <__sflush_r+0x4c>
1000ff10:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1000ff12:	2f00      	cmp	r7, #0
1000ff14:	d016      	beq.n	1000ff44 <__sflush_r+0x4c>
1000ff16:	2300      	movs	r3, #0
1000ff18:	682e      	ldr	r6, [r5, #0]
1000ff1a:	602b      	str	r3, [r5, #0]
1000ff1c:	2380      	movs	r3, #128	; 0x80
1000ff1e:	015b      	lsls	r3, r3, #5
1000ff20:	401a      	ands	r2, r3
1000ff22:	d001      	beq.n	1000ff28 <__sflush_r+0x30>
1000ff24:	6d60      	ldr	r0, [r4, #84]	; 0x54
1000ff26:	e014      	b.n	1000ff52 <__sflush_r+0x5a>
1000ff28:	2301      	movs	r3, #1
1000ff2a:	6a21      	ldr	r1, [r4, #32]
1000ff2c:	0028      	movs	r0, r5
1000ff2e:	47b8      	blx	r7
1000ff30:	1c43      	adds	r3, r0, #1
1000ff32:	d10e      	bne.n	1000ff52 <__sflush_r+0x5a>
1000ff34:	682b      	ldr	r3, [r5, #0]
1000ff36:	2b00      	cmp	r3, #0
1000ff38:	d00b      	beq.n	1000ff52 <__sflush_r+0x5a>
1000ff3a:	2b1d      	cmp	r3, #29
1000ff3c:	d001      	beq.n	1000ff42 <__sflush_r+0x4a>
1000ff3e:	2b16      	cmp	r3, #22
1000ff40:	d102      	bne.n	1000ff48 <__sflush_r+0x50>
1000ff42:	602e      	str	r6, [r5, #0]
1000ff44:	2000      	movs	r0, #0
1000ff46:	e05a      	b.n	1000fffe <__sflush_r+0x106>
1000ff48:	2240      	movs	r2, #64	; 0x40
1000ff4a:	89a3      	ldrh	r3, [r4, #12]
1000ff4c:	4313      	orrs	r3, r2
1000ff4e:	81a3      	strh	r3, [r4, #12]
1000ff50:	e055      	b.n	1000fffe <__sflush_r+0x106>
1000ff52:	89a3      	ldrh	r3, [r4, #12]
1000ff54:	075b      	lsls	r3, r3, #29
1000ff56:	d506      	bpl.n	1000ff66 <__sflush_r+0x6e>
1000ff58:	6863      	ldr	r3, [r4, #4]
1000ff5a:	1ac0      	subs	r0, r0, r3
1000ff5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
1000ff5e:	2b00      	cmp	r3, #0
1000ff60:	d001      	beq.n	1000ff66 <__sflush_r+0x6e>
1000ff62:	6c23      	ldr	r3, [r4, #64]	; 0x40
1000ff64:	1ac0      	subs	r0, r0, r3
1000ff66:	2300      	movs	r3, #0
1000ff68:	0002      	movs	r2, r0
1000ff6a:	6a21      	ldr	r1, [r4, #32]
1000ff6c:	0028      	movs	r0, r5
1000ff6e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1000ff70:	47b8      	blx	r7
1000ff72:	89a3      	ldrh	r3, [r4, #12]
1000ff74:	1c42      	adds	r2, r0, #1
1000ff76:	d106      	bne.n	1000ff86 <__sflush_r+0x8e>
1000ff78:	6829      	ldr	r1, [r5, #0]
1000ff7a:	291d      	cmp	r1, #29
1000ff7c:	d83a      	bhi.n	1000fff4 <__sflush_r+0xfc>
1000ff7e:	4a20      	ldr	r2, [pc, #128]	; (10010000 <__sflush_r+0x108>)
1000ff80:	40ca      	lsrs	r2, r1
1000ff82:	07d2      	lsls	r2, r2, #31
1000ff84:	d536      	bpl.n	1000fff4 <__sflush_r+0xfc>
1000ff86:	2200      	movs	r2, #0
1000ff88:	6062      	str	r2, [r4, #4]
1000ff8a:	6922      	ldr	r2, [r4, #16]
1000ff8c:	6022      	str	r2, [r4, #0]
1000ff8e:	04db      	lsls	r3, r3, #19
1000ff90:	d505      	bpl.n	1000ff9e <__sflush_r+0xa6>
1000ff92:	1c43      	adds	r3, r0, #1
1000ff94:	d102      	bne.n	1000ff9c <__sflush_r+0xa4>
1000ff96:	682b      	ldr	r3, [r5, #0]
1000ff98:	2b00      	cmp	r3, #0
1000ff9a:	d100      	bne.n	1000ff9e <__sflush_r+0xa6>
1000ff9c:	6560      	str	r0, [r4, #84]	; 0x54
1000ff9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000ffa0:	602e      	str	r6, [r5, #0]
1000ffa2:	2900      	cmp	r1, #0
1000ffa4:	d0ce      	beq.n	1000ff44 <__sflush_r+0x4c>
1000ffa6:	0023      	movs	r3, r4
1000ffa8:	3344      	adds	r3, #68	; 0x44
1000ffaa:	4299      	cmp	r1, r3
1000ffac:	d002      	beq.n	1000ffb4 <__sflush_r+0xbc>
1000ffae:	0028      	movs	r0, r5
1000ffb0:	f000 f998 	bl	100102e4 <_free_r>
1000ffb4:	2000      	movs	r0, #0
1000ffb6:	6360      	str	r0, [r4, #52]	; 0x34
1000ffb8:	e021      	b.n	1000fffe <__sflush_r+0x106>
1000ffba:	690f      	ldr	r7, [r1, #16]
1000ffbc:	2f00      	cmp	r7, #0
1000ffbe:	d0c1      	beq.n	1000ff44 <__sflush_r+0x4c>
1000ffc0:	680b      	ldr	r3, [r1, #0]
1000ffc2:	600f      	str	r7, [r1, #0]
1000ffc4:	1bdb      	subs	r3, r3, r7
1000ffc6:	9301      	str	r3, [sp, #4]
1000ffc8:	2300      	movs	r3, #0
1000ffca:	0792      	lsls	r2, r2, #30
1000ffcc:	d100      	bne.n	1000ffd0 <__sflush_r+0xd8>
1000ffce:	694b      	ldr	r3, [r1, #20]
1000ffd0:	60a3      	str	r3, [r4, #8]
1000ffd2:	e003      	b.n	1000ffdc <__sflush_r+0xe4>
1000ffd4:	9b01      	ldr	r3, [sp, #4]
1000ffd6:	183f      	adds	r7, r7, r0
1000ffd8:	1a1b      	subs	r3, r3, r0
1000ffda:	9301      	str	r3, [sp, #4]
1000ffdc:	9b01      	ldr	r3, [sp, #4]
1000ffde:	2b00      	cmp	r3, #0
1000ffe0:	ddb0      	ble.n	1000ff44 <__sflush_r+0x4c>
1000ffe2:	9b01      	ldr	r3, [sp, #4]
1000ffe4:	003a      	movs	r2, r7
1000ffe6:	6a21      	ldr	r1, [r4, #32]
1000ffe8:	0028      	movs	r0, r5
1000ffea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1000ffec:	47b0      	blx	r6
1000ffee:	2800      	cmp	r0, #0
1000fff0:	dcf0      	bgt.n	1000ffd4 <__sflush_r+0xdc>
1000fff2:	89a3      	ldrh	r3, [r4, #12]
1000fff4:	2240      	movs	r2, #64	; 0x40
1000fff6:	2001      	movs	r0, #1
1000fff8:	4313      	orrs	r3, r2
1000fffa:	81a3      	strh	r3, [r4, #12]
1000fffc:	4240      	negs	r0, r0
1000fffe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010000:	20400001 	.word	0x20400001

10010004 <_fflush_r>:
10010004:	690b      	ldr	r3, [r1, #16]
10010006:	b570      	push	{r4, r5, r6, lr}
10010008:	0005      	movs	r5, r0
1001000a:	000c      	movs	r4, r1
1001000c:	2b00      	cmp	r3, #0
1001000e:	d101      	bne.n	10010014 <_fflush_r+0x10>
10010010:	2000      	movs	r0, #0
10010012:	e01c      	b.n	1001004e <_fflush_r+0x4a>
10010014:	2800      	cmp	r0, #0
10010016:	d004      	beq.n	10010022 <_fflush_r+0x1e>
10010018:	6983      	ldr	r3, [r0, #24]
1001001a:	2b00      	cmp	r3, #0
1001001c:	d101      	bne.n	10010022 <_fflush_r+0x1e>
1001001e:	f000 f85f 	bl	100100e0 <__sinit>
10010022:	4b0b      	ldr	r3, [pc, #44]	; (10010050 <_fflush_r+0x4c>)
10010024:	429c      	cmp	r4, r3
10010026:	d101      	bne.n	1001002c <_fflush_r+0x28>
10010028:	686c      	ldr	r4, [r5, #4]
1001002a:	e008      	b.n	1001003e <_fflush_r+0x3a>
1001002c:	4b09      	ldr	r3, [pc, #36]	; (10010054 <_fflush_r+0x50>)
1001002e:	429c      	cmp	r4, r3
10010030:	d101      	bne.n	10010036 <_fflush_r+0x32>
10010032:	68ac      	ldr	r4, [r5, #8]
10010034:	e003      	b.n	1001003e <_fflush_r+0x3a>
10010036:	4b08      	ldr	r3, [pc, #32]	; (10010058 <_fflush_r+0x54>)
10010038:	429c      	cmp	r4, r3
1001003a:	d100      	bne.n	1001003e <_fflush_r+0x3a>
1001003c:	68ec      	ldr	r4, [r5, #12]
1001003e:	220c      	movs	r2, #12
10010040:	5ea3      	ldrsh	r3, [r4, r2]
10010042:	2b00      	cmp	r3, #0
10010044:	d0e4      	beq.n	10010010 <_fflush_r+0xc>
10010046:	0021      	movs	r1, r4
10010048:	0028      	movs	r0, r5
1001004a:	f7ff ff55 	bl	1000fef8 <__sflush_r>
1001004e:	bd70      	pop	{r4, r5, r6, pc}
10010050:	10011850 	.word	0x10011850
10010054:	10011870 	.word	0x10011870
10010058:	10011890 	.word	0x10011890

1001005c <_cleanup_r>:
1001005c:	b510      	push	{r4, lr}
1001005e:	4902      	ldr	r1, [pc, #8]	; (10010068 <_cleanup_r+0xc>)
10010060:	f000 f8b0 	bl	100101c4 <_fwalk_reent>
10010064:	bd10      	pop	{r4, pc}
10010066:	46c0      	nop			; (mov r8, r8)
10010068:	10010005 	.word	0x10010005

1001006c <std.isra.0>:
1001006c:	2300      	movs	r3, #0
1001006e:	b510      	push	{r4, lr}
10010070:	0004      	movs	r4, r0
10010072:	6003      	str	r3, [r0, #0]
10010074:	6043      	str	r3, [r0, #4]
10010076:	6083      	str	r3, [r0, #8]
10010078:	8181      	strh	r1, [r0, #12]
1001007a:	6643      	str	r3, [r0, #100]	; 0x64
1001007c:	81c2      	strh	r2, [r0, #14]
1001007e:	6103      	str	r3, [r0, #16]
10010080:	6143      	str	r3, [r0, #20]
10010082:	6183      	str	r3, [r0, #24]
10010084:	0019      	movs	r1, r3
10010086:	2208      	movs	r2, #8
10010088:	305c      	adds	r0, #92	; 0x5c
1001008a:	f7ff fccf 	bl	1000fa2c <memset>
1001008e:	4b05      	ldr	r3, [pc, #20]	; (100100a4 <std.isra.0+0x38>)
10010090:	6224      	str	r4, [r4, #32]
10010092:	6263      	str	r3, [r4, #36]	; 0x24
10010094:	4b04      	ldr	r3, [pc, #16]	; (100100a8 <std.isra.0+0x3c>)
10010096:	62a3      	str	r3, [r4, #40]	; 0x28
10010098:	4b04      	ldr	r3, [pc, #16]	; (100100ac <std.isra.0+0x40>)
1001009a:	62e3      	str	r3, [r4, #44]	; 0x2c
1001009c:	4b04      	ldr	r3, [pc, #16]	; (100100b0 <std.isra.0+0x44>)
1001009e:	6323      	str	r3, [r4, #48]	; 0x30
100100a0:	bd10      	pop	{r4, pc}
100100a2:	46c0      	nop			; (mov r8, r8)
100100a4:	10010a55 	.word	0x10010a55
100100a8:	10010a7d 	.word	0x10010a7d
100100ac:	10010ab5 	.word	0x10010ab5
100100b0:	10010ae1 	.word	0x10010ae1

100100b4 <__sfmoreglue>:
100100b4:	b570      	push	{r4, r5, r6, lr}
100100b6:	2568      	movs	r5, #104	; 0x68
100100b8:	1e4b      	subs	r3, r1, #1
100100ba:	435d      	muls	r5, r3
100100bc:	000e      	movs	r6, r1
100100be:	0029      	movs	r1, r5
100100c0:	3174      	adds	r1, #116	; 0x74
100100c2:	f000 f955 	bl	10010370 <_malloc_r>
100100c6:	1e04      	subs	r4, r0, #0
100100c8:	d008      	beq.n	100100dc <__sfmoreglue+0x28>
100100ca:	2100      	movs	r1, #0
100100cc:	002a      	movs	r2, r5
100100ce:	6001      	str	r1, [r0, #0]
100100d0:	6046      	str	r6, [r0, #4]
100100d2:	300c      	adds	r0, #12
100100d4:	60a0      	str	r0, [r4, #8]
100100d6:	3268      	adds	r2, #104	; 0x68
100100d8:	f7ff fca8 	bl	1000fa2c <memset>
100100dc:	0020      	movs	r0, r4
100100de:	bd70      	pop	{r4, r5, r6, pc}

100100e0 <__sinit>:
100100e0:	6983      	ldr	r3, [r0, #24]
100100e2:	b513      	push	{r0, r1, r4, lr}
100100e4:	0004      	movs	r4, r0
100100e6:	2b00      	cmp	r3, #0
100100e8:	d128      	bne.n	1001013c <__sinit+0x5c>
100100ea:	6483      	str	r3, [r0, #72]	; 0x48
100100ec:	64c3      	str	r3, [r0, #76]	; 0x4c
100100ee:	6503      	str	r3, [r0, #80]	; 0x50
100100f0:	4b13      	ldr	r3, [pc, #76]	; (10010140 <__sinit+0x60>)
100100f2:	4a14      	ldr	r2, [pc, #80]	; (10010144 <__sinit+0x64>)
100100f4:	681b      	ldr	r3, [r3, #0]
100100f6:	6282      	str	r2, [r0, #40]	; 0x28
100100f8:	9301      	str	r3, [sp, #4]
100100fa:	4298      	cmp	r0, r3
100100fc:	d101      	bne.n	10010102 <__sinit+0x22>
100100fe:	2301      	movs	r3, #1
10010100:	6183      	str	r3, [r0, #24]
10010102:	0020      	movs	r0, r4
10010104:	f000 f820 	bl	10010148 <__sfp>
10010108:	6060      	str	r0, [r4, #4]
1001010a:	0020      	movs	r0, r4
1001010c:	f000 f81c 	bl	10010148 <__sfp>
10010110:	60a0      	str	r0, [r4, #8]
10010112:	0020      	movs	r0, r4
10010114:	f000 f818 	bl	10010148 <__sfp>
10010118:	2200      	movs	r2, #0
1001011a:	60e0      	str	r0, [r4, #12]
1001011c:	2104      	movs	r1, #4
1001011e:	6860      	ldr	r0, [r4, #4]
10010120:	f7ff ffa4 	bl	1001006c <std.isra.0>
10010124:	2201      	movs	r2, #1
10010126:	2109      	movs	r1, #9
10010128:	68a0      	ldr	r0, [r4, #8]
1001012a:	f7ff ff9f 	bl	1001006c <std.isra.0>
1001012e:	2202      	movs	r2, #2
10010130:	2112      	movs	r1, #18
10010132:	68e0      	ldr	r0, [r4, #12]
10010134:	f7ff ff9a 	bl	1001006c <std.isra.0>
10010138:	2301      	movs	r3, #1
1001013a:	61a3      	str	r3, [r4, #24]
1001013c:	bd13      	pop	{r0, r1, r4, pc}
1001013e:	46c0      	nop			; (mov r8, r8)
10010140:	1001184c 	.word	0x1001184c
10010144:	1001005d 	.word	0x1001005d

10010148 <__sfp>:
10010148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001014a:	4b1d      	ldr	r3, [pc, #116]	; (100101c0 <__sfp+0x78>)
1001014c:	0006      	movs	r6, r0
1001014e:	681d      	ldr	r5, [r3, #0]
10010150:	69ab      	ldr	r3, [r5, #24]
10010152:	2b00      	cmp	r3, #0
10010154:	d102      	bne.n	1001015c <__sfp+0x14>
10010156:	0028      	movs	r0, r5
10010158:	f7ff ffc2 	bl	100100e0 <__sinit>
1001015c:	3548      	adds	r5, #72	; 0x48
1001015e:	68ac      	ldr	r4, [r5, #8]
10010160:	686b      	ldr	r3, [r5, #4]
10010162:	3b01      	subs	r3, #1
10010164:	d405      	bmi.n	10010172 <__sfp+0x2a>
10010166:	220c      	movs	r2, #12
10010168:	5ea7      	ldrsh	r7, [r4, r2]
1001016a:	2f00      	cmp	r7, #0
1001016c:	d010      	beq.n	10010190 <__sfp+0x48>
1001016e:	3468      	adds	r4, #104	; 0x68
10010170:	e7f7      	b.n	10010162 <__sfp+0x1a>
10010172:	682b      	ldr	r3, [r5, #0]
10010174:	2b00      	cmp	r3, #0
10010176:	d001      	beq.n	1001017c <__sfp+0x34>
10010178:	682d      	ldr	r5, [r5, #0]
1001017a:	e7f0      	b.n	1001015e <__sfp+0x16>
1001017c:	2104      	movs	r1, #4
1001017e:	0030      	movs	r0, r6
10010180:	f7ff ff98 	bl	100100b4 <__sfmoreglue>
10010184:	6028      	str	r0, [r5, #0]
10010186:	2800      	cmp	r0, #0
10010188:	d1f6      	bne.n	10010178 <__sfp+0x30>
1001018a:	230c      	movs	r3, #12
1001018c:	6033      	str	r3, [r6, #0]
1001018e:	e016      	b.n	100101be <__sfp+0x76>
10010190:	2301      	movs	r3, #1
10010192:	0020      	movs	r0, r4
10010194:	425b      	negs	r3, r3
10010196:	81e3      	strh	r3, [r4, #14]
10010198:	3302      	adds	r3, #2
1001019a:	81a3      	strh	r3, [r4, #12]
1001019c:	6667      	str	r7, [r4, #100]	; 0x64
1001019e:	6027      	str	r7, [r4, #0]
100101a0:	60a7      	str	r7, [r4, #8]
100101a2:	6067      	str	r7, [r4, #4]
100101a4:	6127      	str	r7, [r4, #16]
100101a6:	6167      	str	r7, [r4, #20]
100101a8:	61a7      	str	r7, [r4, #24]
100101aa:	305c      	adds	r0, #92	; 0x5c
100101ac:	2208      	movs	r2, #8
100101ae:	0039      	movs	r1, r7
100101b0:	f7ff fc3c 	bl	1000fa2c <memset>
100101b4:	0020      	movs	r0, r4
100101b6:	6367      	str	r7, [r4, #52]	; 0x34
100101b8:	63a7      	str	r7, [r4, #56]	; 0x38
100101ba:	64a7      	str	r7, [r4, #72]	; 0x48
100101bc:	64e7      	str	r7, [r4, #76]	; 0x4c
100101be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100101c0:	1001184c 	.word	0x1001184c

100101c4 <_fwalk_reent>:
100101c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100101c6:	0004      	movs	r4, r0
100101c8:	0007      	movs	r7, r0
100101ca:	2600      	movs	r6, #0
100101cc:	9101      	str	r1, [sp, #4]
100101ce:	3448      	adds	r4, #72	; 0x48
100101d0:	2c00      	cmp	r4, #0
100101d2:	d016      	beq.n	10010202 <_fwalk_reent+0x3e>
100101d4:	6863      	ldr	r3, [r4, #4]
100101d6:	68a5      	ldr	r5, [r4, #8]
100101d8:	9300      	str	r3, [sp, #0]
100101da:	9b00      	ldr	r3, [sp, #0]
100101dc:	3b01      	subs	r3, #1
100101de:	9300      	str	r3, [sp, #0]
100101e0:	d40d      	bmi.n	100101fe <_fwalk_reent+0x3a>
100101e2:	89ab      	ldrh	r3, [r5, #12]
100101e4:	2b01      	cmp	r3, #1
100101e6:	d908      	bls.n	100101fa <_fwalk_reent+0x36>
100101e8:	220e      	movs	r2, #14
100101ea:	5eab      	ldrsh	r3, [r5, r2]
100101ec:	3301      	adds	r3, #1
100101ee:	d004      	beq.n	100101fa <_fwalk_reent+0x36>
100101f0:	0029      	movs	r1, r5
100101f2:	0038      	movs	r0, r7
100101f4:	9b01      	ldr	r3, [sp, #4]
100101f6:	4798      	blx	r3
100101f8:	4306      	orrs	r6, r0
100101fa:	3568      	adds	r5, #104	; 0x68
100101fc:	e7ed      	b.n	100101da <_fwalk_reent+0x16>
100101fe:	6824      	ldr	r4, [r4, #0]
10010200:	e7e6      	b.n	100101d0 <_fwalk_reent+0xc>
10010202:	0030      	movs	r0, r6
10010204:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10010208 <__swhatbuf_r>:
10010208:	b570      	push	{r4, r5, r6, lr}
1001020a:	000e      	movs	r6, r1
1001020c:	001d      	movs	r5, r3
1001020e:	230e      	movs	r3, #14
10010210:	5ec9      	ldrsh	r1, [r1, r3]
10010212:	b090      	sub	sp, #64	; 0x40
10010214:	0014      	movs	r4, r2
10010216:	2900      	cmp	r1, #0
10010218:	da06      	bge.n	10010228 <__swhatbuf_r+0x20>
1001021a:	2300      	movs	r3, #0
1001021c:	602b      	str	r3, [r5, #0]
1001021e:	89b3      	ldrh	r3, [r6, #12]
10010220:	061b      	lsls	r3, r3, #24
10010222:	d50f      	bpl.n	10010244 <__swhatbuf_r+0x3c>
10010224:	2340      	movs	r3, #64	; 0x40
10010226:	e00f      	b.n	10010248 <__swhatbuf_r+0x40>
10010228:	aa01      	add	r2, sp, #4
1001022a:	f000 fc85 	bl	10010b38 <_fstat_r>
1001022e:	2800      	cmp	r0, #0
10010230:	dbf3      	blt.n	1001021a <__swhatbuf_r+0x12>
10010232:	23f0      	movs	r3, #240	; 0xf0
10010234:	9a02      	ldr	r2, [sp, #8]
10010236:	021b      	lsls	r3, r3, #8
10010238:	4013      	ands	r3, r2
1001023a:	4a05      	ldr	r2, [pc, #20]	; (10010250 <__swhatbuf_r+0x48>)
1001023c:	189b      	adds	r3, r3, r2
1001023e:	425a      	negs	r2, r3
10010240:	4153      	adcs	r3, r2
10010242:	602b      	str	r3, [r5, #0]
10010244:	2380      	movs	r3, #128	; 0x80
10010246:	00db      	lsls	r3, r3, #3
10010248:	2000      	movs	r0, #0
1001024a:	6023      	str	r3, [r4, #0]
1001024c:	b010      	add	sp, #64	; 0x40
1001024e:	bd70      	pop	{r4, r5, r6, pc}
10010250:	ffffe000 	.word	0xffffe000

10010254 <__smakebuf_r>:
10010254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010256:	2602      	movs	r6, #2
10010258:	898b      	ldrh	r3, [r1, #12]
1001025a:	0005      	movs	r5, r0
1001025c:	000c      	movs	r4, r1
1001025e:	4233      	tst	r3, r6
10010260:	d110      	bne.n	10010284 <__smakebuf_r+0x30>
10010262:	ab01      	add	r3, sp, #4
10010264:	466a      	mov	r2, sp
10010266:	f7ff ffcf 	bl	10010208 <__swhatbuf_r>
1001026a:	9900      	ldr	r1, [sp, #0]
1001026c:	0007      	movs	r7, r0
1001026e:	0028      	movs	r0, r5
10010270:	f000 f87e 	bl	10010370 <_malloc_r>
10010274:	2800      	cmp	r0, #0
10010276:	d10c      	bne.n	10010292 <__smakebuf_r+0x3e>
10010278:	220c      	movs	r2, #12
1001027a:	5ea3      	ldrsh	r3, [r4, r2]
1001027c:	059a      	lsls	r2, r3, #22
1001027e:	d423      	bmi.n	100102c8 <__smakebuf_r+0x74>
10010280:	4333      	orrs	r3, r6
10010282:	81a3      	strh	r3, [r4, #12]
10010284:	0023      	movs	r3, r4
10010286:	3347      	adds	r3, #71	; 0x47
10010288:	6023      	str	r3, [r4, #0]
1001028a:	6123      	str	r3, [r4, #16]
1001028c:	2301      	movs	r3, #1
1001028e:	6163      	str	r3, [r4, #20]
10010290:	e01a      	b.n	100102c8 <__smakebuf_r+0x74>
10010292:	2280      	movs	r2, #128	; 0x80
10010294:	4b0d      	ldr	r3, [pc, #52]	; (100102cc <__smakebuf_r+0x78>)
10010296:	62ab      	str	r3, [r5, #40]	; 0x28
10010298:	89a3      	ldrh	r3, [r4, #12]
1001029a:	6020      	str	r0, [r4, #0]
1001029c:	4313      	orrs	r3, r2
1001029e:	81a3      	strh	r3, [r4, #12]
100102a0:	9b00      	ldr	r3, [sp, #0]
100102a2:	6120      	str	r0, [r4, #16]
100102a4:	6163      	str	r3, [r4, #20]
100102a6:	9b01      	ldr	r3, [sp, #4]
100102a8:	2b00      	cmp	r3, #0
100102aa:	d00a      	beq.n	100102c2 <__smakebuf_r+0x6e>
100102ac:	230e      	movs	r3, #14
100102ae:	5ee1      	ldrsh	r1, [r4, r3]
100102b0:	0028      	movs	r0, r5
100102b2:	f000 fc53 	bl	10010b5c <_isatty_r>
100102b6:	2800      	cmp	r0, #0
100102b8:	d003      	beq.n	100102c2 <__smakebuf_r+0x6e>
100102ba:	2201      	movs	r2, #1
100102bc:	89a3      	ldrh	r3, [r4, #12]
100102be:	4313      	orrs	r3, r2
100102c0:	81a3      	strh	r3, [r4, #12]
100102c2:	89a3      	ldrh	r3, [r4, #12]
100102c4:	431f      	orrs	r7, r3
100102c6:	81a7      	strh	r7, [r4, #12]
100102c8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100102ca:	46c0      	nop			; (mov r8, r8)
100102cc:	1001005d 	.word	0x1001005d

100102d0 <malloc>:
100102d0:	b510      	push	{r4, lr}
100102d2:	4b03      	ldr	r3, [pc, #12]	; (100102e0 <malloc+0x10>)
100102d4:	0001      	movs	r1, r0
100102d6:	6818      	ldr	r0, [r3, #0]
100102d8:	f000 f84a 	bl	10010370 <_malloc_r>
100102dc:	bd10      	pop	{r4, pc}
100102de:	46c0      	nop			; (mov r8, r8)
100102e0:	1001196c 	.word	0x1001196c

100102e4 <_free_r>:
100102e4:	b530      	push	{r4, r5, lr}
100102e6:	2900      	cmp	r1, #0
100102e8:	d03e      	beq.n	10010368 <_free_r+0x84>
100102ea:	3904      	subs	r1, #4
100102ec:	680b      	ldr	r3, [r1, #0]
100102ee:	2b00      	cmp	r3, #0
100102f0:	da00      	bge.n	100102f4 <_free_r+0x10>
100102f2:	18c9      	adds	r1, r1, r3
100102f4:	4a1d      	ldr	r2, [pc, #116]	; (1001036c <_free_r+0x88>)
100102f6:	6813      	ldr	r3, [r2, #0]
100102f8:	0014      	movs	r4, r2
100102fa:	2b00      	cmp	r3, #0
100102fc:	d102      	bne.n	10010304 <_free_r+0x20>
100102fe:	604b      	str	r3, [r1, #4]
10010300:	6011      	str	r1, [r2, #0]
10010302:	e031      	b.n	10010368 <_free_r+0x84>
10010304:	428b      	cmp	r3, r1
10010306:	d90d      	bls.n	10010324 <_free_r+0x40>
10010308:	680a      	ldr	r2, [r1, #0]
1001030a:	1888      	adds	r0, r1, r2
1001030c:	4283      	cmp	r3, r0
1001030e:	d103      	bne.n	10010318 <_free_r+0x34>
10010310:	6818      	ldr	r0, [r3, #0]
10010312:	685b      	ldr	r3, [r3, #4]
10010314:	1882      	adds	r2, r0, r2
10010316:	600a      	str	r2, [r1, #0]
10010318:	604b      	str	r3, [r1, #4]
1001031a:	6021      	str	r1, [r4, #0]
1001031c:	e024      	b.n	10010368 <_free_r+0x84>
1001031e:	428a      	cmp	r2, r1
10010320:	d803      	bhi.n	1001032a <_free_r+0x46>
10010322:	0013      	movs	r3, r2
10010324:	685a      	ldr	r2, [r3, #4]
10010326:	2a00      	cmp	r2, #0
10010328:	d1f9      	bne.n	1001031e <_free_r+0x3a>
1001032a:	681d      	ldr	r5, [r3, #0]
1001032c:	195c      	adds	r4, r3, r5
1001032e:	428c      	cmp	r4, r1
10010330:	d10b      	bne.n	1001034a <_free_r+0x66>
10010332:	6809      	ldr	r1, [r1, #0]
10010334:	1869      	adds	r1, r5, r1
10010336:	1858      	adds	r0, r3, r1
10010338:	6019      	str	r1, [r3, #0]
1001033a:	4282      	cmp	r2, r0
1001033c:	d114      	bne.n	10010368 <_free_r+0x84>
1001033e:	6810      	ldr	r0, [r2, #0]
10010340:	6852      	ldr	r2, [r2, #4]
10010342:	1841      	adds	r1, r0, r1
10010344:	6019      	str	r1, [r3, #0]
10010346:	605a      	str	r2, [r3, #4]
10010348:	e00e      	b.n	10010368 <_free_r+0x84>
1001034a:	428c      	cmp	r4, r1
1001034c:	d902      	bls.n	10010354 <_free_r+0x70>
1001034e:	230c      	movs	r3, #12
10010350:	6003      	str	r3, [r0, #0]
10010352:	e009      	b.n	10010368 <_free_r+0x84>
10010354:	6808      	ldr	r0, [r1, #0]
10010356:	180c      	adds	r4, r1, r0
10010358:	42a2      	cmp	r2, r4
1001035a:	d103      	bne.n	10010364 <_free_r+0x80>
1001035c:	6814      	ldr	r4, [r2, #0]
1001035e:	6852      	ldr	r2, [r2, #4]
10010360:	1820      	adds	r0, r4, r0
10010362:	6008      	str	r0, [r1, #0]
10010364:	604a      	str	r2, [r1, #4]
10010366:	6059      	str	r1, [r3, #4]
10010368:	bd30      	pop	{r4, r5, pc}
1001036a:	46c0      	nop			; (mov r8, r8)
1001036c:	10013434 	.word	0x10013434

10010370 <_malloc_r>:
10010370:	2303      	movs	r3, #3
10010372:	b570      	push	{r4, r5, r6, lr}
10010374:	1ccd      	adds	r5, r1, #3
10010376:	439d      	bics	r5, r3
10010378:	3508      	adds	r5, #8
1001037a:	0006      	movs	r6, r0
1001037c:	2d0c      	cmp	r5, #12
1001037e:	d201      	bcs.n	10010384 <_malloc_r+0x14>
10010380:	250c      	movs	r5, #12
10010382:	e005      	b.n	10010390 <_malloc_r+0x20>
10010384:	2d00      	cmp	r5, #0
10010386:	da03      	bge.n	10010390 <_malloc_r+0x20>
10010388:	230c      	movs	r3, #12
1001038a:	2000      	movs	r0, #0
1001038c:	6033      	str	r3, [r6, #0]
1001038e:	e040      	b.n	10010412 <_malloc_r+0xa2>
10010390:	42a9      	cmp	r1, r5
10010392:	d8f9      	bhi.n	10010388 <_malloc_r+0x18>
10010394:	4b1f      	ldr	r3, [pc, #124]	; (10010414 <_malloc_r+0xa4>)
10010396:	681c      	ldr	r4, [r3, #0]
10010398:	001a      	movs	r2, r3
1001039a:	0021      	movs	r1, r4
1001039c:	2900      	cmp	r1, #0
1001039e:	d013      	beq.n	100103c8 <_malloc_r+0x58>
100103a0:	680b      	ldr	r3, [r1, #0]
100103a2:	1b5b      	subs	r3, r3, r5
100103a4:	d40d      	bmi.n	100103c2 <_malloc_r+0x52>
100103a6:	2b0b      	cmp	r3, #11
100103a8:	d902      	bls.n	100103b0 <_malloc_r+0x40>
100103aa:	600b      	str	r3, [r1, #0]
100103ac:	18cc      	adds	r4, r1, r3
100103ae:	e01e      	b.n	100103ee <_malloc_r+0x7e>
100103b0:	428c      	cmp	r4, r1
100103b2:	d102      	bne.n	100103ba <_malloc_r+0x4a>
100103b4:	6863      	ldr	r3, [r4, #4]
100103b6:	6013      	str	r3, [r2, #0]
100103b8:	e01a      	b.n	100103f0 <_malloc_r+0x80>
100103ba:	684b      	ldr	r3, [r1, #4]
100103bc:	6063      	str	r3, [r4, #4]
100103be:	000c      	movs	r4, r1
100103c0:	e016      	b.n	100103f0 <_malloc_r+0x80>
100103c2:	000c      	movs	r4, r1
100103c4:	6849      	ldr	r1, [r1, #4]
100103c6:	e7e9      	b.n	1001039c <_malloc_r+0x2c>
100103c8:	4c13      	ldr	r4, [pc, #76]	; (10010418 <_malloc_r+0xa8>)
100103ca:	6823      	ldr	r3, [r4, #0]
100103cc:	2b00      	cmp	r3, #0
100103ce:	d103      	bne.n	100103d8 <_malloc_r+0x68>
100103d0:	0030      	movs	r0, r6
100103d2:	f000 fb2d 	bl	10010a30 <_sbrk_r>
100103d6:	6020      	str	r0, [r4, #0]
100103d8:	0029      	movs	r1, r5
100103da:	0030      	movs	r0, r6
100103dc:	f000 fb28 	bl	10010a30 <_sbrk_r>
100103e0:	1c43      	adds	r3, r0, #1
100103e2:	d0d1      	beq.n	10010388 <_malloc_r+0x18>
100103e4:	2303      	movs	r3, #3
100103e6:	1cc4      	adds	r4, r0, #3
100103e8:	439c      	bics	r4, r3
100103ea:	42a0      	cmp	r0, r4
100103ec:	d10a      	bne.n	10010404 <_malloc_r+0x94>
100103ee:	6025      	str	r5, [r4, #0]
100103f0:	0020      	movs	r0, r4
100103f2:	2207      	movs	r2, #7
100103f4:	300b      	adds	r0, #11
100103f6:	1d23      	adds	r3, r4, #4
100103f8:	4390      	bics	r0, r2
100103fa:	1ac3      	subs	r3, r0, r3
100103fc:	d009      	beq.n	10010412 <_malloc_r+0xa2>
100103fe:	425a      	negs	r2, r3
10010400:	50e2      	str	r2, [r4, r3]
10010402:	e006      	b.n	10010412 <_malloc_r+0xa2>
10010404:	1a21      	subs	r1, r4, r0
10010406:	0030      	movs	r0, r6
10010408:	f000 fb12 	bl	10010a30 <_sbrk_r>
1001040c:	1c43      	adds	r3, r0, #1
1001040e:	d1ee      	bne.n	100103ee <_malloc_r+0x7e>
10010410:	e7ba      	b.n	10010388 <_malloc_r+0x18>
10010412:	bd70      	pop	{r4, r5, r6, pc}
10010414:	10013434 	.word	0x10013434
10010418:	10013430 	.word	0x10013430

1001041c <__sfputc_r>:
1001041c:	6893      	ldr	r3, [r2, #8]
1001041e:	b510      	push	{r4, lr}
10010420:	3b01      	subs	r3, #1
10010422:	6093      	str	r3, [r2, #8]
10010424:	2b00      	cmp	r3, #0
10010426:	da05      	bge.n	10010434 <__sfputc_r+0x18>
10010428:	6994      	ldr	r4, [r2, #24]
1001042a:	42a3      	cmp	r3, r4
1001042c:	db08      	blt.n	10010440 <__sfputc_r+0x24>
1001042e:	b2cb      	uxtb	r3, r1
10010430:	2b0a      	cmp	r3, #10
10010432:	d005      	beq.n	10010440 <__sfputc_r+0x24>
10010434:	6813      	ldr	r3, [r2, #0]
10010436:	1c58      	adds	r0, r3, #1
10010438:	6010      	str	r0, [r2, #0]
1001043a:	7019      	strb	r1, [r3, #0]
1001043c:	b2c8      	uxtb	r0, r1
1001043e:	e001      	b.n	10010444 <__sfputc_r+0x28>
10010440:	f7ff fc8c 	bl	1000fd5c <__swbuf_r>
10010444:	bd10      	pop	{r4, pc}

10010446 <__sfputs_r>:
10010446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010448:	0006      	movs	r6, r0
1001044a:	000f      	movs	r7, r1
1001044c:	0014      	movs	r4, r2
1001044e:	18d5      	adds	r5, r2, r3
10010450:	42ac      	cmp	r4, r5
10010452:	d008      	beq.n	10010466 <__sfputs_r+0x20>
10010454:	7821      	ldrb	r1, [r4, #0]
10010456:	003a      	movs	r2, r7
10010458:	0030      	movs	r0, r6
1001045a:	f7ff ffdf 	bl	1001041c <__sfputc_r>
1001045e:	3401      	adds	r4, #1
10010460:	1c43      	adds	r3, r0, #1
10010462:	d1f5      	bne.n	10010450 <__sfputs_r+0xa>
10010464:	e000      	b.n	10010468 <__sfputs_r+0x22>
10010466:	2000      	movs	r0, #0
10010468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1001046c <_vfiprintf_r>:
1001046c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001046e:	b09f      	sub	sp, #124	; 0x7c
10010470:	0006      	movs	r6, r0
10010472:	000f      	movs	r7, r1
10010474:	9202      	str	r2, [sp, #8]
10010476:	9305      	str	r3, [sp, #20]
10010478:	2800      	cmp	r0, #0
1001047a:	d004      	beq.n	10010486 <_vfiprintf_r+0x1a>
1001047c:	6983      	ldr	r3, [r0, #24]
1001047e:	2b00      	cmp	r3, #0
10010480:	d101      	bne.n	10010486 <_vfiprintf_r+0x1a>
10010482:	f7ff fe2d 	bl	100100e0 <__sinit>
10010486:	4b7f      	ldr	r3, [pc, #508]	; (10010684 <_vfiprintf_r+0x218>)
10010488:	429f      	cmp	r7, r3
1001048a:	d101      	bne.n	10010490 <_vfiprintf_r+0x24>
1001048c:	6877      	ldr	r7, [r6, #4]
1001048e:	e008      	b.n	100104a2 <_vfiprintf_r+0x36>
10010490:	4b7d      	ldr	r3, [pc, #500]	; (10010688 <_vfiprintf_r+0x21c>)
10010492:	429f      	cmp	r7, r3
10010494:	d101      	bne.n	1001049a <_vfiprintf_r+0x2e>
10010496:	68b7      	ldr	r7, [r6, #8]
10010498:	e003      	b.n	100104a2 <_vfiprintf_r+0x36>
1001049a:	4b7c      	ldr	r3, [pc, #496]	; (1001068c <_vfiprintf_r+0x220>)
1001049c:	429f      	cmp	r7, r3
1001049e:	d100      	bne.n	100104a2 <_vfiprintf_r+0x36>
100104a0:	68f7      	ldr	r7, [r6, #12]
100104a2:	89bb      	ldrh	r3, [r7, #12]
100104a4:	071b      	lsls	r3, r3, #28
100104a6:	d50a      	bpl.n	100104be <_vfiprintf_r+0x52>
100104a8:	693b      	ldr	r3, [r7, #16]
100104aa:	2b00      	cmp	r3, #0
100104ac:	d007      	beq.n	100104be <_vfiprintf_r+0x52>
100104ae:	2300      	movs	r3, #0
100104b0:	ad06      	add	r5, sp, #24
100104b2:	616b      	str	r3, [r5, #20]
100104b4:	3320      	adds	r3, #32
100104b6:	766b      	strb	r3, [r5, #25]
100104b8:	3310      	adds	r3, #16
100104ba:	76ab      	strb	r3, [r5, #26]
100104bc:	e03d      	b.n	1001053a <_vfiprintf_r+0xce>
100104be:	0039      	movs	r1, r7
100104c0:	0030      	movs	r0, r6
100104c2:	f7ff fca3 	bl	1000fe0c <__swsetup_r>
100104c6:	2800      	cmp	r0, #0
100104c8:	d0f1      	beq.n	100104ae <_vfiprintf_r+0x42>
100104ca:	2001      	movs	r0, #1
100104cc:	4240      	negs	r0, r0
100104ce:	e0d6      	b.n	1001067e <_vfiprintf_r+0x212>
100104d0:	9a05      	ldr	r2, [sp, #20]
100104d2:	1d11      	adds	r1, r2, #4
100104d4:	6812      	ldr	r2, [r2, #0]
100104d6:	9105      	str	r1, [sp, #20]
100104d8:	2a00      	cmp	r2, #0
100104da:	da00      	bge.n	100104de <_vfiprintf_r+0x72>
100104dc:	e07f      	b.n	100105de <_vfiprintf_r+0x172>
100104de:	9209      	str	r2, [sp, #36]	; 0x24
100104e0:	3401      	adds	r4, #1
100104e2:	7823      	ldrb	r3, [r4, #0]
100104e4:	2b2e      	cmp	r3, #46	; 0x2e
100104e6:	d100      	bne.n	100104ea <_vfiprintf_r+0x7e>
100104e8:	e08d      	b.n	10010606 <_vfiprintf_r+0x19a>
100104ea:	7821      	ldrb	r1, [r4, #0]
100104ec:	2203      	movs	r2, #3
100104ee:	4868      	ldr	r0, [pc, #416]	; (10010690 <_vfiprintf_r+0x224>)
100104f0:	f000 fb5a 	bl	10010ba8 <memchr>
100104f4:	2800      	cmp	r0, #0
100104f6:	d007      	beq.n	10010508 <_vfiprintf_r+0x9c>
100104f8:	4b65      	ldr	r3, [pc, #404]	; (10010690 <_vfiprintf_r+0x224>)
100104fa:	682a      	ldr	r2, [r5, #0]
100104fc:	1ac0      	subs	r0, r0, r3
100104fe:	2340      	movs	r3, #64	; 0x40
10010500:	4083      	lsls	r3, r0
10010502:	4313      	orrs	r3, r2
10010504:	602b      	str	r3, [r5, #0]
10010506:	3401      	adds	r4, #1
10010508:	7821      	ldrb	r1, [r4, #0]
1001050a:	1c63      	adds	r3, r4, #1
1001050c:	2206      	movs	r2, #6
1001050e:	4861      	ldr	r0, [pc, #388]	; (10010694 <_vfiprintf_r+0x228>)
10010510:	9302      	str	r3, [sp, #8]
10010512:	7629      	strb	r1, [r5, #24]
10010514:	f000 fb48 	bl	10010ba8 <memchr>
10010518:	2800      	cmp	r0, #0
1001051a:	d100      	bne.n	1001051e <_vfiprintf_r+0xb2>
1001051c:	e09d      	b.n	1001065a <_vfiprintf_r+0x1ee>
1001051e:	4b5e      	ldr	r3, [pc, #376]	; (10010698 <_vfiprintf_r+0x22c>)
10010520:	2b00      	cmp	r3, #0
10010522:	d000      	beq.n	10010526 <_vfiprintf_r+0xba>
10010524:	e090      	b.n	10010648 <_vfiprintf_r+0x1dc>
10010526:	2207      	movs	r2, #7
10010528:	9b05      	ldr	r3, [sp, #20]
1001052a:	3307      	adds	r3, #7
1001052c:	4393      	bics	r3, r2
1001052e:	3308      	adds	r3, #8
10010530:	9305      	str	r3, [sp, #20]
10010532:	696b      	ldr	r3, [r5, #20]
10010534:	9a03      	ldr	r2, [sp, #12]
10010536:	189b      	adds	r3, r3, r2
10010538:	616b      	str	r3, [r5, #20]
1001053a:	9c02      	ldr	r4, [sp, #8]
1001053c:	7823      	ldrb	r3, [r4, #0]
1001053e:	2b00      	cmp	r3, #0
10010540:	d104      	bne.n	1001054c <_vfiprintf_r+0xe0>
10010542:	9b02      	ldr	r3, [sp, #8]
10010544:	1ae3      	subs	r3, r4, r3
10010546:	9304      	str	r3, [sp, #16]
10010548:	d012      	beq.n	10010570 <_vfiprintf_r+0x104>
1001054a:	e003      	b.n	10010554 <_vfiprintf_r+0xe8>
1001054c:	2b25      	cmp	r3, #37	; 0x25
1001054e:	d0f8      	beq.n	10010542 <_vfiprintf_r+0xd6>
10010550:	3401      	adds	r4, #1
10010552:	e7f3      	b.n	1001053c <_vfiprintf_r+0xd0>
10010554:	9b04      	ldr	r3, [sp, #16]
10010556:	9a02      	ldr	r2, [sp, #8]
10010558:	0039      	movs	r1, r7
1001055a:	0030      	movs	r0, r6
1001055c:	f7ff ff73 	bl	10010446 <__sfputs_r>
10010560:	1c43      	adds	r3, r0, #1
10010562:	d100      	bne.n	10010566 <_vfiprintf_r+0xfa>
10010564:	e086      	b.n	10010674 <_vfiprintf_r+0x208>
10010566:	696a      	ldr	r2, [r5, #20]
10010568:	9b04      	ldr	r3, [sp, #16]
1001056a:	4694      	mov	ip, r2
1001056c:	4463      	add	r3, ip
1001056e:	616b      	str	r3, [r5, #20]
10010570:	7823      	ldrb	r3, [r4, #0]
10010572:	2b00      	cmp	r3, #0
10010574:	d07e      	beq.n	10010674 <_vfiprintf_r+0x208>
10010576:	2201      	movs	r2, #1
10010578:	2300      	movs	r3, #0
1001057a:	4252      	negs	r2, r2
1001057c:	606a      	str	r2, [r5, #4]
1001057e:	a902      	add	r1, sp, #8
10010580:	3254      	adds	r2, #84	; 0x54
10010582:	1852      	adds	r2, r2, r1
10010584:	3401      	adds	r4, #1
10010586:	602b      	str	r3, [r5, #0]
10010588:	60eb      	str	r3, [r5, #12]
1001058a:	60ab      	str	r3, [r5, #8]
1001058c:	7013      	strb	r3, [r2, #0]
1001058e:	65ab      	str	r3, [r5, #88]	; 0x58
10010590:	7821      	ldrb	r1, [r4, #0]
10010592:	2205      	movs	r2, #5
10010594:	4841      	ldr	r0, [pc, #260]	; (1001069c <_vfiprintf_r+0x230>)
10010596:	f000 fb07 	bl	10010ba8 <memchr>
1001059a:	2800      	cmp	r0, #0
1001059c:	d008      	beq.n	100105b0 <_vfiprintf_r+0x144>
1001059e:	4b3f      	ldr	r3, [pc, #252]	; (1001069c <_vfiprintf_r+0x230>)
100105a0:	682a      	ldr	r2, [r5, #0]
100105a2:	1ac0      	subs	r0, r0, r3
100105a4:	2301      	movs	r3, #1
100105a6:	4083      	lsls	r3, r0
100105a8:	4313      	orrs	r3, r2
100105aa:	602b      	str	r3, [r5, #0]
100105ac:	3401      	adds	r4, #1
100105ae:	e7ef      	b.n	10010590 <_vfiprintf_r+0x124>
100105b0:	682b      	ldr	r3, [r5, #0]
100105b2:	06da      	lsls	r2, r3, #27
100105b4:	d504      	bpl.n	100105c0 <_vfiprintf_r+0x154>
100105b6:	2253      	movs	r2, #83	; 0x53
100105b8:	2120      	movs	r1, #32
100105ba:	a802      	add	r0, sp, #8
100105bc:	1812      	adds	r2, r2, r0
100105be:	7011      	strb	r1, [r2, #0]
100105c0:	071a      	lsls	r2, r3, #28
100105c2:	d504      	bpl.n	100105ce <_vfiprintf_r+0x162>
100105c4:	2253      	movs	r2, #83	; 0x53
100105c6:	212b      	movs	r1, #43	; 0x2b
100105c8:	a802      	add	r0, sp, #8
100105ca:	1812      	adds	r2, r2, r0
100105cc:	7011      	strb	r1, [r2, #0]
100105ce:	7822      	ldrb	r2, [r4, #0]
100105d0:	2a2a      	cmp	r2, #42	; 0x2a
100105d2:	d100      	bne.n	100105d6 <_vfiprintf_r+0x16a>
100105d4:	e77c      	b.n	100104d0 <_vfiprintf_r+0x64>
100105d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
100105d8:	2000      	movs	r0, #0
100105da:	210a      	movs	r1, #10
100105dc:	e005      	b.n	100105ea <_vfiprintf_r+0x17e>
100105de:	4252      	negs	r2, r2
100105e0:	60ea      	str	r2, [r5, #12]
100105e2:	2202      	movs	r2, #2
100105e4:	4313      	orrs	r3, r2
100105e6:	602b      	str	r3, [r5, #0]
100105e8:	e77a      	b.n	100104e0 <_vfiprintf_r+0x74>
100105ea:	7822      	ldrb	r2, [r4, #0]
100105ec:	3a30      	subs	r2, #48	; 0x30
100105ee:	2a09      	cmp	r2, #9
100105f0:	d804      	bhi.n	100105fc <_vfiprintf_r+0x190>
100105f2:	434b      	muls	r3, r1
100105f4:	3401      	adds	r4, #1
100105f6:	189b      	adds	r3, r3, r2
100105f8:	2001      	movs	r0, #1
100105fa:	e7f6      	b.n	100105ea <_vfiprintf_r+0x17e>
100105fc:	2800      	cmp	r0, #0
100105fe:	d100      	bne.n	10010602 <_vfiprintf_r+0x196>
10010600:	e76f      	b.n	100104e2 <_vfiprintf_r+0x76>
10010602:	9309      	str	r3, [sp, #36]	; 0x24
10010604:	e76d      	b.n	100104e2 <_vfiprintf_r+0x76>
10010606:	7863      	ldrb	r3, [r4, #1]
10010608:	2b2a      	cmp	r3, #42	; 0x2a
1001060a:	d10a      	bne.n	10010622 <_vfiprintf_r+0x1b6>
1001060c:	9b05      	ldr	r3, [sp, #20]
1001060e:	3402      	adds	r4, #2
10010610:	1d1a      	adds	r2, r3, #4
10010612:	681b      	ldr	r3, [r3, #0]
10010614:	9205      	str	r2, [sp, #20]
10010616:	2b00      	cmp	r3, #0
10010618:	da01      	bge.n	1001061e <_vfiprintf_r+0x1b2>
1001061a:	2301      	movs	r3, #1
1001061c:	425b      	negs	r3, r3
1001061e:	9307      	str	r3, [sp, #28]
10010620:	e763      	b.n	100104ea <_vfiprintf_r+0x7e>
10010622:	2300      	movs	r3, #0
10010624:	200a      	movs	r0, #10
10010626:	001a      	movs	r2, r3
10010628:	3401      	adds	r4, #1
1001062a:	606b      	str	r3, [r5, #4]
1001062c:	7821      	ldrb	r1, [r4, #0]
1001062e:	3930      	subs	r1, #48	; 0x30
10010630:	2909      	cmp	r1, #9
10010632:	d804      	bhi.n	1001063e <_vfiprintf_r+0x1d2>
10010634:	4342      	muls	r2, r0
10010636:	3401      	adds	r4, #1
10010638:	1852      	adds	r2, r2, r1
1001063a:	2301      	movs	r3, #1
1001063c:	e7f6      	b.n	1001062c <_vfiprintf_r+0x1c0>
1001063e:	2b00      	cmp	r3, #0
10010640:	d100      	bne.n	10010644 <_vfiprintf_r+0x1d8>
10010642:	e752      	b.n	100104ea <_vfiprintf_r+0x7e>
10010644:	9207      	str	r2, [sp, #28]
10010646:	e750      	b.n	100104ea <_vfiprintf_r+0x7e>
10010648:	ab05      	add	r3, sp, #20
1001064a:	9300      	str	r3, [sp, #0]
1001064c:	003a      	movs	r2, r7
1001064e:	4b14      	ldr	r3, [pc, #80]	; (100106a0 <_vfiprintf_r+0x234>)
10010650:	0029      	movs	r1, r5
10010652:	0030      	movs	r0, r6
10010654:	e000      	b.n	10010658 <_vfiprintf_r+0x1ec>
10010656:	bf00      	nop
10010658:	e007      	b.n	1001066a <_vfiprintf_r+0x1fe>
1001065a:	ab05      	add	r3, sp, #20
1001065c:	9300      	str	r3, [sp, #0]
1001065e:	003a      	movs	r2, r7
10010660:	4b0f      	ldr	r3, [pc, #60]	; (100106a0 <_vfiprintf_r+0x234>)
10010662:	0029      	movs	r1, r5
10010664:	0030      	movs	r0, r6
10010666:	f000 f88b 	bl	10010780 <_printf_i>
1001066a:	9003      	str	r0, [sp, #12]
1001066c:	9b03      	ldr	r3, [sp, #12]
1001066e:	3301      	adds	r3, #1
10010670:	d000      	beq.n	10010674 <_vfiprintf_r+0x208>
10010672:	e75e      	b.n	10010532 <_vfiprintf_r+0xc6>
10010674:	89bb      	ldrh	r3, [r7, #12]
10010676:	065b      	lsls	r3, r3, #25
10010678:	d500      	bpl.n	1001067c <_vfiprintf_r+0x210>
1001067a:	e726      	b.n	100104ca <_vfiprintf_r+0x5e>
1001067c:	980b      	ldr	r0, [sp, #44]	; 0x2c
1001067e:	b01f      	add	sp, #124	; 0x7c
10010680:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010682:	46c0      	nop			; (mov r8, r8)
10010684:	10011850 	.word	0x10011850
10010688:	10011870 	.word	0x10011870
1001068c:	10011890 	.word	0x10011890
10010690:	100118b6 	.word	0x100118b6
10010694:	100118ba 	.word	0x100118ba
10010698:	00000000 	.word	0x00000000
1001069c:	100118b0 	.word	0x100118b0
100106a0:	10010447 	.word	0x10010447

100106a4 <_printf_common>:
100106a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100106a6:	0017      	movs	r7, r2
100106a8:	9301      	str	r3, [sp, #4]
100106aa:	688a      	ldr	r2, [r1, #8]
100106ac:	690b      	ldr	r3, [r1, #16]
100106ae:	9000      	str	r0, [sp, #0]
100106b0:	000c      	movs	r4, r1
100106b2:	4293      	cmp	r3, r2
100106b4:	da00      	bge.n	100106b8 <_printf_common+0x14>
100106b6:	0013      	movs	r3, r2
100106b8:	0022      	movs	r2, r4
100106ba:	603b      	str	r3, [r7, #0]
100106bc:	3243      	adds	r2, #67	; 0x43
100106be:	7812      	ldrb	r2, [r2, #0]
100106c0:	2a00      	cmp	r2, #0
100106c2:	d001      	beq.n	100106c8 <_printf_common+0x24>
100106c4:	3301      	adds	r3, #1
100106c6:	603b      	str	r3, [r7, #0]
100106c8:	6823      	ldr	r3, [r4, #0]
100106ca:	069b      	lsls	r3, r3, #26
100106cc:	d502      	bpl.n	100106d4 <_printf_common+0x30>
100106ce:	683b      	ldr	r3, [r7, #0]
100106d0:	3302      	adds	r3, #2
100106d2:	603b      	str	r3, [r7, #0]
100106d4:	2506      	movs	r5, #6
100106d6:	6823      	ldr	r3, [r4, #0]
100106d8:	401d      	ands	r5, r3
100106da:	d01e      	beq.n	1001071a <_printf_common+0x76>
100106dc:	0023      	movs	r3, r4
100106de:	3343      	adds	r3, #67	; 0x43
100106e0:	781b      	ldrb	r3, [r3, #0]
100106e2:	1e5a      	subs	r2, r3, #1
100106e4:	4193      	sbcs	r3, r2
100106e6:	6822      	ldr	r2, [r4, #0]
100106e8:	0692      	lsls	r2, r2, #26
100106ea:	d51c      	bpl.n	10010726 <_printf_common+0x82>
100106ec:	2030      	movs	r0, #48	; 0x30
100106ee:	18e1      	adds	r1, r4, r3
100106f0:	3143      	adds	r1, #67	; 0x43
100106f2:	7008      	strb	r0, [r1, #0]
100106f4:	0021      	movs	r1, r4
100106f6:	1c5a      	adds	r2, r3, #1
100106f8:	3145      	adds	r1, #69	; 0x45
100106fa:	7809      	ldrb	r1, [r1, #0]
100106fc:	18a2      	adds	r2, r4, r2
100106fe:	3243      	adds	r2, #67	; 0x43
10010700:	3302      	adds	r3, #2
10010702:	7011      	strb	r1, [r2, #0]
10010704:	e00f      	b.n	10010726 <_printf_common+0x82>
10010706:	0022      	movs	r2, r4
10010708:	2301      	movs	r3, #1
1001070a:	3219      	adds	r2, #25
1001070c:	9901      	ldr	r1, [sp, #4]
1001070e:	9800      	ldr	r0, [sp, #0]
10010710:	9e08      	ldr	r6, [sp, #32]
10010712:	47b0      	blx	r6
10010714:	1c43      	adds	r3, r0, #1
10010716:	d00e      	beq.n	10010736 <_printf_common+0x92>
10010718:	3501      	adds	r5, #1
1001071a:	68e3      	ldr	r3, [r4, #12]
1001071c:	683a      	ldr	r2, [r7, #0]
1001071e:	1a9b      	subs	r3, r3, r2
10010720:	429d      	cmp	r5, r3
10010722:	dbf0      	blt.n	10010706 <_printf_common+0x62>
10010724:	e7da      	b.n	100106dc <_printf_common+0x38>
10010726:	0022      	movs	r2, r4
10010728:	9901      	ldr	r1, [sp, #4]
1001072a:	3243      	adds	r2, #67	; 0x43
1001072c:	9800      	ldr	r0, [sp, #0]
1001072e:	9d08      	ldr	r5, [sp, #32]
10010730:	47a8      	blx	r5
10010732:	1c43      	adds	r3, r0, #1
10010734:	d102      	bne.n	1001073c <_printf_common+0x98>
10010736:	2001      	movs	r0, #1
10010738:	4240      	negs	r0, r0
1001073a:	e020      	b.n	1001077e <_printf_common+0xda>
1001073c:	2306      	movs	r3, #6
1001073e:	6820      	ldr	r0, [r4, #0]
10010740:	68e1      	ldr	r1, [r4, #12]
10010742:	683a      	ldr	r2, [r7, #0]
10010744:	4003      	ands	r3, r0
10010746:	2500      	movs	r5, #0
10010748:	2b04      	cmp	r3, #4
1001074a:	d103      	bne.n	10010754 <_printf_common+0xb0>
1001074c:	1a8d      	subs	r5, r1, r2
1001074e:	43eb      	mvns	r3, r5
10010750:	17db      	asrs	r3, r3, #31
10010752:	401d      	ands	r5, r3
10010754:	68a3      	ldr	r3, [r4, #8]
10010756:	6922      	ldr	r2, [r4, #16]
10010758:	4293      	cmp	r3, r2
1001075a:	dd01      	ble.n	10010760 <_printf_common+0xbc>
1001075c:	1a9b      	subs	r3, r3, r2
1001075e:	18ed      	adds	r5, r5, r3
10010760:	2700      	movs	r7, #0
10010762:	42bd      	cmp	r5, r7
10010764:	d00a      	beq.n	1001077c <_printf_common+0xd8>
10010766:	0022      	movs	r2, r4
10010768:	2301      	movs	r3, #1
1001076a:	321a      	adds	r2, #26
1001076c:	9901      	ldr	r1, [sp, #4]
1001076e:	9800      	ldr	r0, [sp, #0]
10010770:	9e08      	ldr	r6, [sp, #32]
10010772:	47b0      	blx	r6
10010774:	1c43      	adds	r3, r0, #1
10010776:	d0de      	beq.n	10010736 <_printf_common+0x92>
10010778:	3701      	adds	r7, #1
1001077a:	e7f2      	b.n	10010762 <_printf_common+0xbe>
1001077c:	2000      	movs	r0, #0
1001077e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10010780 <_printf_i>:
10010780:	b5f0      	push	{r4, r5, r6, r7, lr}
10010782:	b08b      	sub	sp, #44	; 0x2c
10010784:	9206      	str	r2, [sp, #24]
10010786:	000a      	movs	r2, r1
10010788:	3243      	adds	r2, #67	; 0x43
1001078a:	9307      	str	r3, [sp, #28]
1001078c:	9005      	str	r0, [sp, #20]
1001078e:	9204      	str	r2, [sp, #16]
10010790:	7e0a      	ldrb	r2, [r1, #24]
10010792:	000c      	movs	r4, r1
10010794:	9b10      	ldr	r3, [sp, #64]	; 0x40
10010796:	2a6e      	cmp	r2, #110	; 0x6e
10010798:	d100      	bne.n	1001079c <_printf_i+0x1c>
1001079a:	e0ab      	b.n	100108f4 <_printf_i+0x174>
1001079c:	d811      	bhi.n	100107c2 <_printf_i+0x42>
1001079e:	2a63      	cmp	r2, #99	; 0x63
100107a0:	d022      	beq.n	100107e8 <_printf_i+0x68>
100107a2:	d809      	bhi.n	100107b8 <_printf_i+0x38>
100107a4:	2a00      	cmp	r2, #0
100107a6:	d100      	bne.n	100107aa <_printf_i+0x2a>
100107a8:	e0b5      	b.n	10010916 <_printf_i+0x196>
100107aa:	2a58      	cmp	r2, #88	; 0x58
100107ac:	d000      	beq.n	100107b0 <_printf_i+0x30>
100107ae:	e0c5      	b.n	1001093c <_printf_i+0x1bc>
100107b0:	3145      	adds	r1, #69	; 0x45
100107b2:	700a      	strb	r2, [r1, #0]
100107b4:	4a81      	ldr	r2, [pc, #516]	; (100109bc <_printf_i+0x23c>)
100107b6:	e04f      	b.n	10010858 <_printf_i+0xd8>
100107b8:	2a64      	cmp	r2, #100	; 0x64
100107ba:	d01d      	beq.n	100107f8 <_printf_i+0x78>
100107bc:	2a69      	cmp	r2, #105	; 0x69
100107be:	d01b      	beq.n	100107f8 <_printf_i+0x78>
100107c0:	e0bc      	b.n	1001093c <_printf_i+0x1bc>
100107c2:	2a73      	cmp	r2, #115	; 0x73
100107c4:	d100      	bne.n	100107c8 <_printf_i+0x48>
100107c6:	e0aa      	b.n	1001091e <_printf_i+0x19e>
100107c8:	d809      	bhi.n	100107de <_printf_i+0x5e>
100107ca:	2a6f      	cmp	r2, #111	; 0x6f
100107cc:	d029      	beq.n	10010822 <_printf_i+0xa2>
100107ce:	2a70      	cmp	r2, #112	; 0x70
100107d0:	d000      	beq.n	100107d4 <_printf_i+0x54>
100107d2:	e0b3      	b.n	1001093c <_printf_i+0x1bc>
100107d4:	2220      	movs	r2, #32
100107d6:	6809      	ldr	r1, [r1, #0]
100107d8:	430a      	orrs	r2, r1
100107da:	6022      	str	r2, [r4, #0]
100107dc:	e037      	b.n	1001084e <_printf_i+0xce>
100107de:	2a75      	cmp	r2, #117	; 0x75
100107e0:	d01f      	beq.n	10010822 <_printf_i+0xa2>
100107e2:	2a78      	cmp	r2, #120	; 0x78
100107e4:	d033      	beq.n	1001084e <_printf_i+0xce>
100107e6:	e0a9      	b.n	1001093c <_printf_i+0x1bc>
100107e8:	000e      	movs	r6, r1
100107ea:	681a      	ldr	r2, [r3, #0]
100107ec:	3642      	adds	r6, #66	; 0x42
100107ee:	1d11      	adds	r1, r2, #4
100107f0:	6019      	str	r1, [r3, #0]
100107f2:	6813      	ldr	r3, [r2, #0]
100107f4:	7033      	strb	r3, [r6, #0]
100107f6:	e0a4      	b.n	10010942 <_printf_i+0x1c2>
100107f8:	6821      	ldr	r1, [r4, #0]
100107fa:	681a      	ldr	r2, [r3, #0]
100107fc:	0608      	lsls	r0, r1, #24
100107fe:	d406      	bmi.n	1001080e <_printf_i+0x8e>
10010800:	0649      	lsls	r1, r1, #25
10010802:	d504      	bpl.n	1001080e <_printf_i+0x8e>
10010804:	1d11      	adds	r1, r2, #4
10010806:	6019      	str	r1, [r3, #0]
10010808:	2300      	movs	r3, #0
1001080a:	5ed5      	ldrsh	r5, [r2, r3]
1001080c:	e002      	b.n	10010814 <_printf_i+0x94>
1001080e:	1d11      	adds	r1, r2, #4
10010810:	6019      	str	r1, [r3, #0]
10010812:	6815      	ldr	r5, [r2, #0]
10010814:	2d00      	cmp	r5, #0
10010816:	da3b      	bge.n	10010890 <_printf_i+0x110>
10010818:	232d      	movs	r3, #45	; 0x2d
1001081a:	9a04      	ldr	r2, [sp, #16]
1001081c:	426d      	negs	r5, r5
1001081e:	7013      	strb	r3, [r2, #0]
10010820:	e036      	b.n	10010890 <_printf_i+0x110>
10010822:	6821      	ldr	r1, [r4, #0]
10010824:	681a      	ldr	r2, [r3, #0]
10010826:	0608      	lsls	r0, r1, #24
10010828:	d406      	bmi.n	10010838 <_printf_i+0xb8>
1001082a:	0649      	lsls	r1, r1, #25
1001082c:	d504      	bpl.n	10010838 <_printf_i+0xb8>
1001082e:	6815      	ldr	r5, [r2, #0]
10010830:	1d11      	adds	r1, r2, #4
10010832:	6019      	str	r1, [r3, #0]
10010834:	b2ad      	uxth	r5, r5
10010836:	e002      	b.n	1001083e <_printf_i+0xbe>
10010838:	1d11      	adds	r1, r2, #4
1001083a:	6019      	str	r1, [r3, #0]
1001083c:	6815      	ldr	r5, [r2, #0]
1001083e:	4b5f      	ldr	r3, [pc, #380]	; (100109bc <_printf_i+0x23c>)
10010840:	7e22      	ldrb	r2, [r4, #24]
10010842:	9303      	str	r3, [sp, #12]
10010844:	2708      	movs	r7, #8
10010846:	2a6f      	cmp	r2, #111	; 0x6f
10010848:	d01d      	beq.n	10010886 <_printf_i+0x106>
1001084a:	270a      	movs	r7, #10
1001084c:	e01b      	b.n	10010886 <_printf_i+0x106>
1001084e:	0022      	movs	r2, r4
10010850:	2178      	movs	r1, #120	; 0x78
10010852:	3245      	adds	r2, #69	; 0x45
10010854:	7011      	strb	r1, [r2, #0]
10010856:	4a5a      	ldr	r2, [pc, #360]	; (100109c0 <_printf_i+0x240>)
10010858:	6819      	ldr	r1, [r3, #0]
1001085a:	9203      	str	r2, [sp, #12]
1001085c:	1d08      	adds	r0, r1, #4
1001085e:	6822      	ldr	r2, [r4, #0]
10010860:	6018      	str	r0, [r3, #0]
10010862:	680d      	ldr	r5, [r1, #0]
10010864:	0610      	lsls	r0, r2, #24
10010866:	d402      	bmi.n	1001086e <_printf_i+0xee>
10010868:	0650      	lsls	r0, r2, #25
1001086a:	d500      	bpl.n	1001086e <_printf_i+0xee>
1001086c:	b2ad      	uxth	r5, r5
1001086e:	07d3      	lsls	r3, r2, #31
10010870:	d502      	bpl.n	10010878 <_printf_i+0xf8>
10010872:	2320      	movs	r3, #32
10010874:	431a      	orrs	r2, r3
10010876:	6022      	str	r2, [r4, #0]
10010878:	2710      	movs	r7, #16
1001087a:	2d00      	cmp	r5, #0
1001087c:	d103      	bne.n	10010886 <_printf_i+0x106>
1001087e:	2320      	movs	r3, #32
10010880:	6822      	ldr	r2, [r4, #0]
10010882:	439a      	bics	r2, r3
10010884:	6022      	str	r2, [r4, #0]
10010886:	0023      	movs	r3, r4
10010888:	2200      	movs	r2, #0
1001088a:	3343      	adds	r3, #67	; 0x43
1001088c:	701a      	strb	r2, [r3, #0]
1001088e:	e002      	b.n	10010896 <_printf_i+0x116>
10010890:	270a      	movs	r7, #10
10010892:	4b4a      	ldr	r3, [pc, #296]	; (100109bc <_printf_i+0x23c>)
10010894:	9303      	str	r3, [sp, #12]
10010896:	6863      	ldr	r3, [r4, #4]
10010898:	60a3      	str	r3, [r4, #8]
1001089a:	2b00      	cmp	r3, #0
1001089c:	db09      	blt.n	100108b2 <_printf_i+0x132>
1001089e:	2204      	movs	r2, #4
100108a0:	6821      	ldr	r1, [r4, #0]
100108a2:	4391      	bics	r1, r2
100108a4:	6021      	str	r1, [r4, #0]
100108a6:	2d00      	cmp	r5, #0
100108a8:	d105      	bne.n	100108b6 <_printf_i+0x136>
100108aa:	9e04      	ldr	r6, [sp, #16]
100108ac:	2b00      	cmp	r3, #0
100108ae:	d011      	beq.n	100108d4 <_printf_i+0x154>
100108b0:	e07b      	b.n	100109aa <_printf_i+0x22a>
100108b2:	2d00      	cmp	r5, #0
100108b4:	d079      	beq.n	100109aa <_printf_i+0x22a>
100108b6:	9e04      	ldr	r6, [sp, #16]
100108b8:	0028      	movs	r0, r5
100108ba:	0039      	movs	r1, r7
100108bc:	f7fe f8ae 	bl	1000ea1c <__aeabi_uidivmod>
100108c0:	9b03      	ldr	r3, [sp, #12]
100108c2:	3e01      	subs	r6, #1
100108c4:	5c5b      	ldrb	r3, [r3, r1]
100108c6:	0028      	movs	r0, r5
100108c8:	7033      	strb	r3, [r6, #0]
100108ca:	0039      	movs	r1, r7
100108cc:	f7fe f820 	bl	1000e910 <__aeabi_uidiv>
100108d0:	1e05      	subs	r5, r0, #0
100108d2:	d1f1      	bne.n	100108b8 <_printf_i+0x138>
100108d4:	2f08      	cmp	r7, #8
100108d6:	d109      	bne.n	100108ec <_printf_i+0x16c>
100108d8:	6823      	ldr	r3, [r4, #0]
100108da:	07db      	lsls	r3, r3, #31
100108dc:	d506      	bpl.n	100108ec <_printf_i+0x16c>
100108de:	6863      	ldr	r3, [r4, #4]
100108e0:	6922      	ldr	r2, [r4, #16]
100108e2:	4293      	cmp	r3, r2
100108e4:	dc02      	bgt.n	100108ec <_printf_i+0x16c>
100108e6:	2330      	movs	r3, #48	; 0x30
100108e8:	3e01      	subs	r6, #1
100108ea:	7033      	strb	r3, [r6, #0]
100108ec:	9b04      	ldr	r3, [sp, #16]
100108ee:	1b9b      	subs	r3, r3, r6
100108f0:	6123      	str	r3, [r4, #16]
100108f2:	e02b      	b.n	1001094c <_printf_i+0x1cc>
100108f4:	6809      	ldr	r1, [r1, #0]
100108f6:	681a      	ldr	r2, [r3, #0]
100108f8:	0608      	lsls	r0, r1, #24
100108fa:	d407      	bmi.n	1001090c <_printf_i+0x18c>
100108fc:	0649      	lsls	r1, r1, #25
100108fe:	d505      	bpl.n	1001090c <_printf_i+0x18c>
10010900:	1d11      	adds	r1, r2, #4
10010902:	6019      	str	r1, [r3, #0]
10010904:	6813      	ldr	r3, [r2, #0]
10010906:	8aa2      	ldrh	r2, [r4, #20]
10010908:	801a      	strh	r2, [r3, #0]
1001090a:	e004      	b.n	10010916 <_printf_i+0x196>
1001090c:	1d11      	adds	r1, r2, #4
1001090e:	6019      	str	r1, [r3, #0]
10010910:	6813      	ldr	r3, [r2, #0]
10010912:	6962      	ldr	r2, [r4, #20]
10010914:	601a      	str	r2, [r3, #0]
10010916:	2300      	movs	r3, #0
10010918:	9e04      	ldr	r6, [sp, #16]
1001091a:	6123      	str	r3, [r4, #16]
1001091c:	e016      	b.n	1001094c <_printf_i+0x1cc>
1001091e:	681a      	ldr	r2, [r3, #0]
10010920:	1d11      	adds	r1, r2, #4
10010922:	6019      	str	r1, [r3, #0]
10010924:	6816      	ldr	r6, [r2, #0]
10010926:	2100      	movs	r1, #0
10010928:	6862      	ldr	r2, [r4, #4]
1001092a:	0030      	movs	r0, r6
1001092c:	f000 f93c 	bl	10010ba8 <memchr>
10010930:	2800      	cmp	r0, #0
10010932:	d001      	beq.n	10010938 <_printf_i+0x1b8>
10010934:	1b80      	subs	r0, r0, r6
10010936:	6060      	str	r0, [r4, #4]
10010938:	6863      	ldr	r3, [r4, #4]
1001093a:	e003      	b.n	10010944 <_printf_i+0x1c4>
1001093c:	0026      	movs	r6, r4
1001093e:	3642      	adds	r6, #66	; 0x42
10010940:	7032      	strb	r2, [r6, #0]
10010942:	2301      	movs	r3, #1
10010944:	6123      	str	r3, [r4, #16]
10010946:	2300      	movs	r3, #0
10010948:	9a04      	ldr	r2, [sp, #16]
1001094a:	7013      	strb	r3, [r2, #0]
1001094c:	9b07      	ldr	r3, [sp, #28]
1001094e:	aa09      	add	r2, sp, #36	; 0x24
10010950:	9300      	str	r3, [sp, #0]
10010952:	0021      	movs	r1, r4
10010954:	9b06      	ldr	r3, [sp, #24]
10010956:	9805      	ldr	r0, [sp, #20]
10010958:	f7ff fea4 	bl	100106a4 <_printf_common>
1001095c:	1c43      	adds	r3, r0, #1
1001095e:	d102      	bne.n	10010966 <_printf_i+0x1e6>
10010960:	2001      	movs	r0, #1
10010962:	4240      	negs	r0, r0
10010964:	e027      	b.n	100109b6 <_printf_i+0x236>
10010966:	6923      	ldr	r3, [r4, #16]
10010968:	0032      	movs	r2, r6
1001096a:	9906      	ldr	r1, [sp, #24]
1001096c:	9805      	ldr	r0, [sp, #20]
1001096e:	9d07      	ldr	r5, [sp, #28]
10010970:	47a8      	blx	r5
10010972:	1c43      	adds	r3, r0, #1
10010974:	d0f4      	beq.n	10010960 <_printf_i+0x1e0>
10010976:	6823      	ldr	r3, [r4, #0]
10010978:	2500      	movs	r5, #0
1001097a:	079b      	lsls	r3, r3, #30
1001097c:	d40f      	bmi.n	1001099e <_printf_i+0x21e>
1001097e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10010980:	68e0      	ldr	r0, [r4, #12]
10010982:	4298      	cmp	r0, r3
10010984:	da17      	bge.n	100109b6 <_printf_i+0x236>
10010986:	0018      	movs	r0, r3
10010988:	e015      	b.n	100109b6 <_printf_i+0x236>
1001098a:	0022      	movs	r2, r4
1001098c:	2301      	movs	r3, #1
1001098e:	3219      	adds	r2, #25
10010990:	9906      	ldr	r1, [sp, #24]
10010992:	9805      	ldr	r0, [sp, #20]
10010994:	9e07      	ldr	r6, [sp, #28]
10010996:	47b0      	blx	r6
10010998:	1c43      	adds	r3, r0, #1
1001099a:	d0e1      	beq.n	10010960 <_printf_i+0x1e0>
1001099c:	3501      	adds	r5, #1
1001099e:	68e3      	ldr	r3, [r4, #12]
100109a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
100109a2:	1a9b      	subs	r3, r3, r2
100109a4:	429d      	cmp	r5, r3
100109a6:	dbf0      	blt.n	1001098a <_printf_i+0x20a>
100109a8:	e7e9      	b.n	1001097e <_printf_i+0x1fe>
100109aa:	0026      	movs	r6, r4
100109ac:	9b03      	ldr	r3, [sp, #12]
100109ae:	3642      	adds	r6, #66	; 0x42
100109b0:	781b      	ldrb	r3, [r3, #0]
100109b2:	7033      	strb	r3, [r6, #0]
100109b4:	e78e      	b.n	100108d4 <_printf_i+0x154>
100109b6:	b00b      	add	sp, #44	; 0x2c
100109b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100109ba:	46c0      	nop			; (mov r8, r8)
100109bc:	100118c1 	.word	0x100118c1
100109c0:	100118d2 	.word	0x100118d2

100109c4 <_putc_r>:
100109c4:	b570      	push	{r4, r5, r6, lr}
100109c6:	0006      	movs	r6, r0
100109c8:	000d      	movs	r5, r1
100109ca:	0014      	movs	r4, r2
100109cc:	2800      	cmp	r0, #0
100109ce:	d004      	beq.n	100109da <_putc_r+0x16>
100109d0:	6983      	ldr	r3, [r0, #24]
100109d2:	2b00      	cmp	r3, #0
100109d4:	d101      	bne.n	100109da <_putc_r+0x16>
100109d6:	f7ff fb83 	bl	100100e0 <__sinit>
100109da:	4b12      	ldr	r3, [pc, #72]	; (10010a24 <_putc_r+0x60>)
100109dc:	429c      	cmp	r4, r3
100109de:	d101      	bne.n	100109e4 <_putc_r+0x20>
100109e0:	6874      	ldr	r4, [r6, #4]
100109e2:	e008      	b.n	100109f6 <_putc_r+0x32>
100109e4:	4b10      	ldr	r3, [pc, #64]	; (10010a28 <_putc_r+0x64>)
100109e6:	429c      	cmp	r4, r3
100109e8:	d101      	bne.n	100109ee <_putc_r+0x2a>
100109ea:	68b4      	ldr	r4, [r6, #8]
100109ec:	e003      	b.n	100109f6 <_putc_r+0x32>
100109ee:	4b0f      	ldr	r3, [pc, #60]	; (10010a2c <_putc_r+0x68>)
100109f0:	429c      	cmp	r4, r3
100109f2:	d100      	bne.n	100109f6 <_putc_r+0x32>
100109f4:	68f4      	ldr	r4, [r6, #12]
100109f6:	68a3      	ldr	r3, [r4, #8]
100109f8:	3b01      	subs	r3, #1
100109fa:	60a3      	str	r3, [r4, #8]
100109fc:	2b00      	cmp	r3, #0
100109fe:	da05      	bge.n	10010a0c <_putc_r+0x48>
10010a00:	69a2      	ldr	r2, [r4, #24]
10010a02:	4293      	cmp	r3, r2
10010a04:	db08      	blt.n	10010a18 <_putc_r+0x54>
10010a06:	b2eb      	uxtb	r3, r5
10010a08:	2b0a      	cmp	r3, #10
10010a0a:	d005      	beq.n	10010a18 <_putc_r+0x54>
10010a0c:	6823      	ldr	r3, [r4, #0]
10010a0e:	b2e8      	uxtb	r0, r5
10010a10:	1c5a      	adds	r2, r3, #1
10010a12:	6022      	str	r2, [r4, #0]
10010a14:	701d      	strb	r5, [r3, #0]
10010a16:	e004      	b.n	10010a22 <_putc_r+0x5e>
10010a18:	0022      	movs	r2, r4
10010a1a:	0029      	movs	r1, r5
10010a1c:	0030      	movs	r0, r6
10010a1e:	f7ff f99d 	bl	1000fd5c <__swbuf_r>
10010a22:	bd70      	pop	{r4, r5, r6, pc}
10010a24:	10011850 	.word	0x10011850
10010a28:	10011870 	.word	0x10011870
10010a2c:	10011890 	.word	0x10011890

10010a30 <_sbrk_r>:
10010a30:	2300      	movs	r3, #0
10010a32:	b570      	push	{r4, r5, r6, lr}
10010a34:	4c06      	ldr	r4, [pc, #24]	; (10010a50 <_sbrk_r+0x20>)
10010a36:	0005      	movs	r5, r0
10010a38:	0008      	movs	r0, r1
10010a3a:	6023      	str	r3, [r4, #0]
10010a3c:	f7f8 fc4e 	bl	100092dc <_sbrk>
10010a40:	1c43      	adds	r3, r0, #1
10010a42:	d103      	bne.n	10010a4c <_sbrk_r+0x1c>
10010a44:	6823      	ldr	r3, [r4, #0]
10010a46:	2b00      	cmp	r3, #0
10010a48:	d000      	beq.n	10010a4c <_sbrk_r+0x1c>
10010a4a:	602b      	str	r3, [r5, #0]
10010a4c:	bd70      	pop	{r4, r5, r6, pc}
10010a4e:	46c0      	nop			; (mov r8, r8)
10010a50:	10014684 	.word	0x10014684

10010a54 <__sread>:
10010a54:	b570      	push	{r4, r5, r6, lr}
10010a56:	000c      	movs	r4, r1
10010a58:	250e      	movs	r5, #14
10010a5a:	5f49      	ldrsh	r1, [r1, r5]
10010a5c:	f000 f8b0 	bl	10010bc0 <_read_r>
10010a60:	2800      	cmp	r0, #0
10010a62:	db03      	blt.n	10010a6c <__sread+0x18>
10010a64:	6d63      	ldr	r3, [r4, #84]	; 0x54
10010a66:	181b      	adds	r3, r3, r0
10010a68:	6563      	str	r3, [r4, #84]	; 0x54
10010a6a:	e003      	b.n	10010a74 <__sread+0x20>
10010a6c:	89a2      	ldrh	r2, [r4, #12]
10010a6e:	4b02      	ldr	r3, [pc, #8]	; (10010a78 <__sread+0x24>)
10010a70:	4013      	ands	r3, r2
10010a72:	81a3      	strh	r3, [r4, #12]
10010a74:	bd70      	pop	{r4, r5, r6, pc}
10010a76:	46c0      	nop			; (mov r8, r8)
10010a78:	ffffefff 	.word	0xffffefff

10010a7c <__swrite>:
10010a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010a7e:	001f      	movs	r7, r3
10010a80:	898b      	ldrh	r3, [r1, #12]
10010a82:	0005      	movs	r5, r0
10010a84:	000c      	movs	r4, r1
10010a86:	0016      	movs	r6, r2
10010a88:	05db      	lsls	r3, r3, #23
10010a8a:	d505      	bpl.n	10010a98 <__swrite+0x1c>
10010a8c:	230e      	movs	r3, #14
10010a8e:	5ec9      	ldrsh	r1, [r1, r3]
10010a90:	2200      	movs	r2, #0
10010a92:	2302      	movs	r3, #2
10010a94:	f000 f874 	bl	10010b80 <_lseek_r>
10010a98:	89a2      	ldrh	r2, [r4, #12]
10010a9a:	4b05      	ldr	r3, [pc, #20]	; (10010ab0 <__swrite+0x34>)
10010a9c:	0028      	movs	r0, r5
10010a9e:	4013      	ands	r3, r2
10010aa0:	81a3      	strh	r3, [r4, #12]
10010aa2:	0032      	movs	r2, r6
10010aa4:	230e      	movs	r3, #14
10010aa6:	5ee1      	ldrsh	r1, [r4, r3]
10010aa8:	003b      	movs	r3, r7
10010aaa:	f000 f81f 	bl	10010aec <_write_r>
10010aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010ab0:	ffffefff 	.word	0xffffefff

10010ab4 <__sseek>:
10010ab4:	b570      	push	{r4, r5, r6, lr}
10010ab6:	000c      	movs	r4, r1
10010ab8:	250e      	movs	r5, #14
10010aba:	5f49      	ldrsh	r1, [r1, r5]
10010abc:	f000 f860 	bl	10010b80 <_lseek_r>
10010ac0:	89a3      	ldrh	r3, [r4, #12]
10010ac2:	1c42      	adds	r2, r0, #1
10010ac4:	d103      	bne.n	10010ace <__sseek+0x1a>
10010ac6:	4a05      	ldr	r2, [pc, #20]	; (10010adc <__sseek+0x28>)
10010ac8:	4013      	ands	r3, r2
10010aca:	81a3      	strh	r3, [r4, #12]
10010acc:	e004      	b.n	10010ad8 <__sseek+0x24>
10010ace:	2280      	movs	r2, #128	; 0x80
10010ad0:	0152      	lsls	r2, r2, #5
10010ad2:	4313      	orrs	r3, r2
10010ad4:	81a3      	strh	r3, [r4, #12]
10010ad6:	6560      	str	r0, [r4, #84]	; 0x54
10010ad8:	bd70      	pop	{r4, r5, r6, pc}
10010ada:	46c0      	nop			; (mov r8, r8)
10010adc:	ffffefff 	.word	0xffffefff

10010ae0 <__sclose>:
10010ae0:	b510      	push	{r4, lr}
10010ae2:	230e      	movs	r3, #14
10010ae4:	5ec9      	ldrsh	r1, [r1, r3]
10010ae6:	f000 f815 	bl	10010b14 <_close_r>
10010aea:	bd10      	pop	{r4, pc}

10010aec <_write_r>:
10010aec:	b570      	push	{r4, r5, r6, lr}
10010aee:	0005      	movs	r5, r0
10010af0:	0008      	movs	r0, r1
10010af2:	0011      	movs	r1, r2
10010af4:	2200      	movs	r2, #0
10010af6:	4c06      	ldr	r4, [pc, #24]	; (10010b10 <_write_r+0x24>)
10010af8:	6022      	str	r2, [r4, #0]
10010afa:	001a      	movs	r2, r3
10010afc:	f7f8 fbc6 	bl	1000928c <_write>
10010b00:	1c43      	adds	r3, r0, #1
10010b02:	d103      	bne.n	10010b0c <_write_r+0x20>
10010b04:	6823      	ldr	r3, [r4, #0]
10010b06:	2b00      	cmp	r3, #0
10010b08:	d000      	beq.n	10010b0c <_write_r+0x20>
10010b0a:	602b      	str	r3, [r5, #0]
10010b0c:	bd70      	pop	{r4, r5, r6, pc}
10010b0e:	46c0      	nop			; (mov r8, r8)
10010b10:	10014684 	.word	0x10014684

10010b14 <_close_r>:
10010b14:	2300      	movs	r3, #0
10010b16:	b570      	push	{r4, r5, r6, lr}
10010b18:	4c06      	ldr	r4, [pc, #24]	; (10010b34 <_close_r+0x20>)
10010b1a:	0005      	movs	r5, r0
10010b1c:	0008      	movs	r0, r1
10010b1e:	6023      	str	r3, [r4, #0]
10010b20:	f7f8 fbee 	bl	10009300 <_close>
10010b24:	1c43      	adds	r3, r0, #1
10010b26:	d103      	bne.n	10010b30 <_close_r+0x1c>
10010b28:	6823      	ldr	r3, [r4, #0]
10010b2a:	2b00      	cmp	r3, #0
10010b2c:	d000      	beq.n	10010b30 <_close_r+0x1c>
10010b2e:	602b      	str	r3, [r5, #0]
10010b30:	bd70      	pop	{r4, r5, r6, pc}
10010b32:	46c0      	nop			; (mov r8, r8)
10010b34:	10014684 	.word	0x10014684

10010b38 <_fstat_r>:
10010b38:	2300      	movs	r3, #0
10010b3a:	b570      	push	{r4, r5, r6, lr}
10010b3c:	4c06      	ldr	r4, [pc, #24]	; (10010b58 <_fstat_r+0x20>)
10010b3e:	0005      	movs	r5, r0
10010b40:	0008      	movs	r0, r1
10010b42:	0011      	movs	r1, r2
10010b44:	6023      	str	r3, [r4, #0]
10010b46:	f7f8 fbdf 	bl	10009308 <_fstat>
10010b4a:	1c43      	adds	r3, r0, #1
10010b4c:	d103      	bne.n	10010b56 <_fstat_r+0x1e>
10010b4e:	6823      	ldr	r3, [r4, #0]
10010b50:	2b00      	cmp	r3, #0
10010b52:	d000      	beq.n	10010b56 <_fstat_r+0x1e>
10010b54:	602b      	str	r3, [r5, #0]
10010b56:	bd70      	pop	{r4, r5, r6, pc}
10010b58:	10014684 	.word	0x10014684

10010b5c <_isatty_r>:
10010b5c:	2300      	movs	r3, #0
10010b5e:	b570      	push	{r4, r5, r6, lr}
10010b60:	4c06      	ldr	r4, [pc, #24]	; (10010b7c <_isatty_r+0x20>)
10010b62:	0005      	movs	r5, r0
10010b64:	0008      	movs	r0, r1
10010b66:	6023      	str	r3, [r4, #0]
10010b68:	f7f8 fbd4 	bl	10009314 <_isatty>
10010b6c:	1c43      	adds	r3, r0, #1
10010b6e:	d103      	bne.n	10010b78 <_isatty_r+0x1c>
10010b70:	6823      	ldr	r3, [r4, #0]
10010b72:	2b00      	cmp	r3, #0
10010b74:	d000      	beq.n	10010b78 <_isatty_r+0x1c>
10010b76:	602b      	str	r3, [r5, #0]
10010b78:	bd70      	pop	{r4, r5, r6, pc}
10010b7a:	46c0      	nop			; (mov r8, r8)
10010b7c:	10014684 	.word	0x10014684

10010b80 <_lseek_r>:
10010b80:	b570      	push	{r4, r5, r6, lr}
10010b82:	0005      	movs	r5, r0
10010b84:	0008      	movs	r0, r1
10010b86:	0011      	movs	r1, r2
10010b88:	2200      	movs	r2, #0
10010b8a:	4c06      	ldr	r4, [pc, #24]	; (10010ba4 <_lseek_r+0x24>)
10010b8c:	6022      	str	r2, [r4, #0]
10010b8e:	001a      	movs	r2, r3
10010b90:	f7f8 fbc2 	bl	10009318 <_lseek>
10010b94:	1c43      	adds	r3, r0, #1
10010b96:	d103      	bne.n	10010ba0 <_lseek_r+0x20>
10010b98:	6823      	ldr	r3, [r4, #0]
10010b9a:	2b00      	cmp	r3, #0
10010b9c:	d000      	beq.n	10010ba0 <_lseek_r+0x20>
10010b9e:	602b      	str	r3, [r5, #0]
10010ba0:	bd70      	pop	{r4, r5, r6, pc}
10010ba2:	46c0      	nop			; (mov r8, r8)
10010ba4:	10014684 	.word	0x10014684

10010ba8 <memchr>:
10010ba8:	b2c9      	uxtb	r1, r1
10010baa:	1882      	adds	r2, r0, r2
10010bac:	4290      	cmp	r0, r2
10010bae:	d004      	beq.n	10010bba <memchr+0x12>
10010bb0:	7803      	ldrb	r3, [r0, #0]
10010bb2:	428b      	cmp	r3, r1
10010bb4:	d002      	beq.n	10010bbc <memchr+0x14>
10010bb6:	3001      	adds	r0, #1
10010bb8:	e7f8      	b.n	10010bac <memchr+0x4>
10010bba:	2000      	movs	r0, #0
10010bbc:	4770      	bx	lr
	...

10010bc0 <_read_r>:
10010bc0:	b570      	push	{r4, r5, r6, lr}
10010bc2:	0005      	movs	r5, r0
10010bc4:	0008      	movs	r0, r1
10010bc6:	0011      	movs	r1, r2
10010bc8:	2200      	movs	r2, #0
10010bca:	4c06      	ldr	r4, [pc, #24]	; (10010be4 <_read_r+0x24>)
10010bcc:	6022      	str	r2, [r4, #0]
10010bce:	001a      	movs	r2, r3
10010bd0:	f7f8 fb3c 	bl	1000924c <_read>
10010bd4:	1c43      	adds	r3, r0, #1
10010bd6:	d103      	bne.n	10010be0 <_read_r+0x20>
10010bd8:	6823      	ldr	r3, [r4, #0]
10010bda:	2b00      	cmp	r3, #0
10010bdc:	d000      	beq.n	10010be0 <_read_r+0x20>
10010bde:	602b      	str	r3, [r5, #0]
10010be0:	bd70      	pop	{r4, r5, r6, pc}
10010be2:	46c0      	nop			; (mov r8, r8)
10010be4:	10014684 	.word	0x10014684

10010be8 <__aeabi_lmul>:
10010be8:	b5f0      	push	{r4, r5, r6, r7, lr}
10010bea:	464f      	mov	r7, r9
10010bec:	4646      	mov	r6, r8
10010bee:	b4c0      	push	{r6, r7}
10010bf0:	0416      	lsls	r6, r2, #16
10010bf2:	0c36      	lsrs	r6, r6, #16
10010bf4:	4699      	mov	r9, r3
10010bf6:	0033      	movs	r3, r6
10010bf8:	0405      	lsls	r5, r0, #16
10010bfa:	0c2c      	lsrs	r4, r5, #16
10010bfc:	0c07      	lsrs	r7, r0, #16
10010bfe:	0c15      	lsrs	r5, r2, #16
10010c00:	4363      	muls	r3, r4
10010c02:	437e      	muls	r6, r7
10010c04:	436f      	muls	r7, r5
10010c06:	4365      	muls	r5, r4
10010c08:	0c1c      	lsrs	r4, r3, #16
10010c0a:	19ad      	adds	r5, r5, r6
10010c0c:	1964      	adds	r4, r4, r5
10010c0e:	469c      	mov	ip, r3
10010c10:	42a6      	cmp	r6, r4
10010c12:	d903      	bls.n	10010c1c <__aeabi_lmul+0x34>
10010c14:	2380      	movs	r3, #128	; 0x80
10010c16:	025b      	lsls	r3, r3, #9
10010c18:	4698      	mov	r8, r3
10010c1a:	4447      	add	r7, r8
10010c1c:	4663      	mov	r3, ip
10010c1e:	0c25      	lsrs	r5, r4, #16
10010c20:	19ef      	adds	r7, r5, r7
10010c22:	041d      	lsls	r5, r3, #16
10010c24:	464b      	mov	r3, r9
10010c26:	434a      	muls	r2, r1
10010c28:	4343      	muls	r3, r0
10010c2a:	0c2d      	lsrs	r5, r5, #16
10010c2c:	0424      	lsls	r4, r4, #16
10010c2e:	1964      	adds	r4, r4, r5
10010c30:	1899      	adds	r1, r3, r2
10010c32:	19c9      	adds	r1, r1, r7
10010c34:	0020      	movs	r0, r4
10010c36:	bc0c      	pop	{r2, r3}
10010c38:	4690      	mov	r8, r2
10010c3a:	4699      	mov	r9, r3
10010c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010c3e:	46c0      	nop			; (mov r8, r8)
10010c40:	100085d8 	.word	0x100085d8
10010c44:	100085e6 	.word	0x100085e6
10010c48:	100085f4 	.word	0x100085f4
10010c4c:	10008602 	.word	0x10008602
10010c50:	10008610 	.word	0x10008610
10010c54:	1000861e 	.word	0x1000861e
10010c58:	1000862c 	.word	0x1000862c
10010c5c:	1000863c 	.word	0x1000863c
10010c60:	1000864c 	.word	0x1000864c
10010c64:	1000865c 	.word	0x1000865c
10010c68:	1000866c 	.word	0x1000866c
10010c6c:	1000867c 	.word	0x1000867c
10010c70:	1000868c 	.word	0x1000868c
10010c74:	1000869c 	.word	0x1000869c
10010c78:	100086ac 	.word	0x100086ac
10010c7c:	100086bc 	.word	0x100086bc
10010c80:	100086cc 	.word	0x100086cc
10010c84:	100086dc 	.word	0x100086dc
10010c88:	100086ec 	.word	0x100086ec
10010c8c:	100086fc 	.word	0x100086fc
10010c90:	1000870c 	.word	0x1000870c
10010c94:	1000871c 	.word	0x1000871c
10010c98:	1000872c 	.word	0x1000872c
10010c9c:	1000873c 	.word	0x1000873c
10010ca0:	1000874c 	.word	0x1000874c
10010ca4:	1000875c 	.word	0x1000875c
10010ca8:	1000876c 	.word	0x1000876c
10010cac:	1000877c 	.word	0x1000877c
10010cb0:	1000878a 	.word	0x1000878a
10010cb4:	10008798 	.word	0x10008798
10010cb8:	100087a6 	.word	0x100087a6
10010cbc:	100087b4 	.word	0x100087b4
10010cc0:	100087c2 	.word	0x100087c2
10010cc4:	100087d0 	.word	0x100087d0
10010cc8:	100087de 	.word	0x100087de
10010ccc:	100087ec 	.word	0x100087ec
10010cd0:	100087fc 	.word	0x100087fc
10010cd4:	1000880c 	.word	0x1000880c
10010cd8:	1000881c 	.word	0x1000881c
10010cdc:	1000882c 	.word	0x1000882c
10010ce0:	1000883c 	.word	0x1000883c
10010ce4:	1000884c 	.word	0x1000884c
10010ce8:	1000885c 	.word	0x1000885c
10010cec:	1000886c 	.word	0x1000886c
10010cf0:	1000887c 	.word	0x1000887c
10010cf4:	1000888c 	.word	0x1000888c
10010cf8:	1000889c 	.word	0x1000889c
10010cfc:	100088ac 	.word	0x100088ac
10010d00:	100088bc 	.word	0x100088bc
10010d04:	100088cc 	.word	0x100088cc
10010d08:	100088dc 	.word	0x100088dc
10010d0c:	100088ec 	.word	0x100088ec
10010d10:	100088fa 	.word	0x100088fa
10010d14:	10008908 	.word	0x10008908
10010d18:	10008948 	.word	0x10008948
10010d1c:	10008970 	.word	0x10008970
10010d20:	10008998 	.word	0x10008998
10010d24:	100089c0 	.word	0x100089c0
10010d28:	10008c00 	.word	0x10008c00
10010d2c:	100089f0 	.word	0x100089f0
10010d30:	10008a08 	.word	0x10008a08
10010d34:	10008a80 	.word	0x10008a80
10010d38:	10008a98 	.word	0x10008a98
10010d3c:	10008a20 	.word	0x10008a20
10010d40:	10008a38 	.word	0x10008a38
10010d44:	10008a50 	.word	0x10008a50
10010d48:	10008a68 	.word	0x10008a68
10010d4c:	10008ab0 	.word	0x10008ab0
10010d50:	10008d74 	.word	0x10008d74
10010d54:	10008d74 	.word	0x10008d74
10010d58:	10008d74 	.word	0x10008d74
10010d5c:	10008d74 	.word	0x10008d74
10010d60:	10008d74 	.word	0x10008d74
10010d64:	10008d74 	.word	0x10008d74
10010d68:	10008d74 	.word	0x10008d74
10010d6c:	10008d74 	.word	0x10008d74
10010d70:	10008b58 	.word	0x10008b58
10010d74:	10008b70 	.word	0x10008b70
10010d78:	10008b88 	.word	0x10008b88
10010d7c:	10008c16 	.word	0x10008c16
10010d80:	10008ae0 	.word	0x10008ae0
10010d84:	10008d74 	.word	0x10008d74
10010d88:	10008d74 	.word	0x10008d74
10010d8c:	10008d74 	.word	0x10008d74
10010d90:	10008d74 	.word	0x10008d74
10010d94:	10008d74 	.word	0x10008d74
10010d98:	10008d74 	.word	0x10008d74
10010d9c:	10008ba0 	.word	0x10008ba0
10010da0:	10008bb8 	.word	0x10008bb8
10010da4:	10008bd0 	.word	0x10008bd0
10010da8:	10008be8 	.word	0x10008be8
10010dac:	10008d74 	.word	0x10008d74
10010db0:	10008d2c 	.word	0x10008d2c
10010db4:	10008d44 	.word	0x10008d44
10010db8:	10008d74 	.word	0x10008d74
10010dbc:	10008d74 	.word	0x10008d74
10010dc0:	10008c42 	.word	0x10008c42
10010dc4:	10008c58 	.word	0x10008c58
10010dc8:	10008c6e 	.word	0x10008c6e
10010dcc:	10008c84 	.word	0x10008c84
10010dd0:	10008d74 	.word	0x10008d74
10010dd4:	10008d74 	.word	0x10008d74
10010dd8:	10008d74 	.word	0x10008d74
10010ddc:	10008d74 	.word	0x10008d74
10010de0:	10008d74 	.word	0x10008d74
10010de4:	10008d74 	.word	0x10008d74
10010de8:	10008d74 	.word	0x10008d74
10010dec:	10008d74 	.word	0x10008d74
10010df0:	10008934 	.word	0x10008934
10010df4:	1000895c 	.word	0x1000895c
10010df8:	10008984 	.word	0x10008984
10010dfc:	100089ac 	.word	0x100089ac
10010e00:	100089d8 	.word	0x100089d8
10010e04:	10008ac8 	.word	0x10008ac8
10010e08:	10008af8 	.word	0x10008af8
10010e0c:	10008b10 	.word	0x10008b10
10010e10:	10008b28 	.word	0x10008b28
10010e14:	10008b40 	.word	0x10008b40
10010e18:	10008c2c 	.word	0x10008c2c
10010e1c:	10008c9a 	.word	0x10008c9a
10010e20:	10008d14 	.word	0x10008d14
10010e24:	10008d5c 	.word	0x10008d5c
10010e28:	0000000d 	.word	0x0000000d
10010e2c:	61647075 	.word	0x61647075
10010e30:	676e6974 	.word	0x676e6974
10010e34:	65687420 	.word	0x65687420
10010e38:	61686320 	.word	0x61686320
10010e3c:	74636172 	.word	0x74636172
10010e40:	73697265 	.word	0x73697265
10010e44:	20636974 	.word	0x20636974
10010e48:	6c696166 	.word	0x6c696166
10010e4c:	64256465 	.word	0x64256465
10010e50:	00000000 	.word	0x00000000
10010e54:	646e6573 	.word	0x646e6573
10010e58:	20676e69 	.word	0x20676e69
10010e5c:	69746f6e 	.word	0x69746f6e
10010e60:	61636966 	.word	0x61636966
10010e64:	6e6f6974 	.word	0x6e6f6974
10010e68:	69616620 	.word	0x69616620
10010e6c:	2564656c 	.word	0x2564656c
10010e70:	00000064 	.word	0x00000064
10010e74:	646e6573 	.word	0x646e6573
10010e78:	20676e69 	.word	0x20676e69
10010e7c:	69646e69 	.word	0x69646e69
10010e80:	69746163 	.word	0x69746163
10010e84:	66206e6f 	.word	0x66206e6f
10010e88:	656c6961 	.word	0x656c6961
10010e8c:	00642564 	.word	0x00642564
10010e90:	646e6573 	.word	0x646e6573
10010e94:	20676e69 	.word	0x20676e69
10010e98:	69646e69 	.word	0x69646e69
10010e9c:	69746163 	.word	0x69746163
10010ea0:	73206e6f 	.word	0x73206e6f
10010ea4:	65636375 	.word	0x65636375
10010ea8:	75667373 	.word	0x75667373
10010eac:	0000006c 	.word	0x0000006c
10010eb0:	1000958c 	.word	0x1000958c
10010eb4:	1000958e 	.word	0x1000958e
10010eb8:	10009574 	.word	0x10009574
10010ebc:	10009574 	.word	0x10009574
10010ec0:	10009574 	.word	0x10009574
10010ec4:	1000958c 	.word	0x1000958c
10010ec8:	10009574 	.word	0x10009574
10010ecc:	10009574 	.word	0x10009574
10010ed0:	10009dda 	.word	0x10009dda
10010ed4:	10009e4e 	.word	0x10009e4e
10010ed8:	10009dc2 	.word	0x10009dc2
10010edc:	10009e54 	.word	0x10009e54
10010ee0:	10009dc8 	.word	0x10009dc8
10010ee4:	10009dce 	.word	0x10009dce
10010ee8:	10009dd4 	.word	0x10009dd4
10010eec:	1000a4ac 	.word	0x1000a4ac
10010ef0:	1000a4ac 	.word	0x1000a4ac
10010ef4:	1000a4ac 	.word	0x1000a4ac
10010ef8:	1000a4ac 	.word	0x1000a4ac
10010efc:	1000a4ac 	.word	0x1000a4ac
10010f00:	1000a4ac 	.word	0x1000a4ac
10010f04:	1000a4ac 	.word	0x1000a4ac
10010f08:	1000a4ac 	.word	0x1000a4ac
10010f0c:	1000a4ac 	.word	0x1000a4ac
10010f10:	1000a4ac 	.word	0x1000a4ac
10010f14:	1000a4ac 	.word	0x1000a4ac
10010f18:	1000a4ac 	.word	0x1000a4ac
10010f1c:	1000a4ac 	.word	0x1000a4ac
10010f20:	1000a4ac 	.word	0x1000a4ac
10010f24:	1000a4ac 	.word	0x1000a4ac
10010f28:	1000a4ac 	.word	0x1000a4ac
10010f2c:	1000a4ac 	.word	0x1000a4ac
10010f30:	1000a4ac 	.word	0x1000a4ac
10010f34:	1000a4ac 	.word	0x1000a4ac
10010f38:	1000a4ca 	.word	0x1000a4ca
10010f3c:	1000a4ca 	.word	0x1000a4ca
10010f40:	1000a4ca 	.word	0x1000a4ca
10010f44:	1000a4ca 	.word	0x1000a4ca
10010f48:	1000a4ca 	.word	0x1000a4ca
10010f4c:	1000a4ca 	.word	0x1000a4ca
10010f50:	1000a4ca 	.word	0x1000a4ca
10010f54:	1000a4ca 	.word	0x1000a4ca
10010f58:	1000a4ca 	.word	0x1000a4ca
10010f5c:	1000a4ca 	.word	0x1000a4ca
10010f60:	1000a4ec 	.word	0x1000a4ec
10010f64:	1000a4ec 	.word	0x1000a4ec
10010f68:	1000a4ec 	.word	0x1000a4ec
10010f6c:	1000a4ec 	.word	0x1000a4ec
10010f70:	1000a4ec 	.word	0x1000a4ec
10010f74:	1000a4ec 	.word	0x1000a4ec
10010f78:	1000a4ec 	.word	0x1000a4ec
10010f7c:	1000a4ec 	.word	0x1000a4ec
10010f80:	1000a4ec 	.word	0x1000a4ec
10010f84:	1000a4ec 	.word	0x1000a4ec
10010f88:	1000a50e 	.word	0x1000a50e
10010f8c:	1000a50e 	.word	0x1000a50e
10010f90:	1000a50e 	.word	0x1000a50e
10010f94:	1000a50e 	.word	0x1000a50e
10010f98:	1000a50e 	.word	0x1000a50e
10010f9c:	1000a50e 	.word	0x1000a50e
10010fa0:	1000a528 	.word	0x1000a528
10010fa4:	1000a528 	.word	0x1000a528
10010fa8:	1000a528 	.word	0x1000a528
10010fac:	1000a528 	.word	0x1000a528
10010fb0:	1000a528 	.word	0x1000a528
10010fb4:	1000a528 	.word	0x1000a528
10010fb8:	1000a528 	.word	0x1000a528
10010fbc:	1000a528 	.word	0x1000a528
10010fc0:	1000a528 	.word	0x1000a528
10010fc4:	1000a542 	.word	0x1000a542
10010fc8:	1000a542 	.word	0x1000a542
10010fcc:	1000a564 	.word	0x1000a564
10010fd0:	1000a564 	.word	0x1000a564
10010fd4:	1000a57e 	.word	0x1000a57e
10010fd8:	1000a564 	.word	0x1000a564
10010fdc:	34333231 	.word	0x34333231
10010fe0:	00003635 	.word	0x00003635
10010fe4:	efcdab00 	.word	0xefcdab00
10010fe8:	00efcdab 	.word	0x00efcdab
10010fec:	b2d60600 	.word	0xb2d60600
10010ff0:	f8f005f0 	.word	0xf8f005f0
10010ff4:	00000000 	.word	0x00000000

10010ff8 <ble_mgr_gatt_server_handle>:
	...
10011010:	100094d1 1000950d 100094d5 00000000     ................
10011020:	6e616353 676e696e 61662020 64656c69     Scanning  failed
10011030:	00000000 2055544d 6e616843 46206567     ....MTU Change F
10011040:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
10011050:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
10011060:	69746172 253a6e6f 00000064 69766544     ration:%d...Devi
10011070:	64206563 6f637369 63656e6e 20646574     ce disconnected 
10011080:	73616552 303a6e6f 32302578 61482078     Reason:0x%02x Ha
10011090:	656c646e 2578303d 00000078 72636e45     ndle=0x%x...Encr
100110a0:	69747079 66206e6f 656c6961 00000064     yption failed...
100110b0:	72636e45 69747079 63206e6f 6c706d6f     Encryption compl
100110c0:	64657465 63757320 73736563 6c6c7566     eted successfull
100110d0:	00000079 20454c42 69766544 6e206563     y...BLE Device n
100110e0:	6620746f 646e756f 636e6520 74707972     ot found encrypt
100110f0:	206e6f69 6f666e69 00000000 6f666e49     ion info....Info
10011100:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
10011110:	206e6163 69766564 72206563 68636165     can device reach
10011120:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
10011130:	00006e61 6c696146 74206465 7473206f     an..Failed to st
10011140:	7320706f 6e6e6163 00676e69 72696150     op scanning.Pair
10011150:	20676e69 6c696166 2e2e6465 7369442e     ing failed...Dis
10011160:	6e6e6f63 69746365 0000676e 63736944     connecting..Disc
10011170:	656e6e6f 52207463 65757165 46207473     onnect Request F
10011180:	656c6961 00000064 72696150 20676e69     ailed...Pairing 
10011190:	636f7270 72756465 6f632065 656c706d     procedure comple
100111a0:	20646574 63637573 66737365 796c6c75     ted successfully
100111b0:	00000000 20454c42 69766544 6e206563     ....BLE Device n
100111c0:	6620746f 646e756f 206f7420 726f7473     ot found to stor
100111d0:	68742065 61702065 6e697269 6e692067     e the pairing in
100111e0:	00006f66 72636e45 69747079 4e206e6f     fo..Encryption N
100111f0:	7320746f 74726174 00006465 76616c53     ot started..Slav
10011200:	65532065 69727563 52207974 2d207165     e Security Req -
10011210:	74754120 746e6568 74616369 206e6f69      Authentication 
10011220:	6c696146 00006465 72696150 71655220     Failed..Pair Req
10011230:	74736575 41202d20 65687475 6369746e     uest - Authentic
10011240:	6f697461 6146206e 64656c69 00000000     ation Failed....
10011250:	65746e45 68742072 61502065 656b7373     Enter the Passke
10011260:	2d362879 69676944 69202974 6554206e     y(6-Digit) in Te
10011270:	6e696d72 003a6c61 206e6950 656d6954     rminal:.Pin Time
10011280:	0074756f 63736944 656e6e6f 6e697463     out.Disconnectin
10011290:	2e2e2067 0000002e 61656c50 45206573     g ......Please E
100112a0:	7265746e 65687420 6c6f6620 69776f6c     nter the followi
100112b0:	5020676e 2d737361 65646f63 206e6f28     ng Pass-code(on 
100112c0:	6568746f 65442072 65636976 00003a29     other Device):..
100112d0:	72696150 79656b2d 70657220 6620796c     Pair-key reply f
100112e0:	656c6961 00000064 20424f4f 74616546     ailed...OOB Feat
100112f0:	20657275 20746f4e 70707573 6574726f     ure Not supporte
10011300:	00000064 65746e45 20646572 73736150     d...Entered Pass
10011310:	646f632d 00003a65 72696150 20676e69     -code:..Pairing 
10011320:	6f666e69 74616d72 206e6f69 7020666f     information of p
10011330:	20726565 69766564 69206563 6f6e2073     eer device is no
10011340:	76612074 616c6961 2e656c62 00000000     t available.....
10011350:	61656c50 75206573 6961706e 68742072     Please unpair th
10011360:	65642065 65636976 6f726620 6570206d     e device from pe
10011370:	64207265 63697665 6f6d2865 656c6962     er device(mobile
10011380:	65732029 6e697474 6d207367 20756e65     ) settings menu 
10011390:	20646e61 72617473 61702074 6e697269     and start pairin
100113a0:	67612067 006e6961 72636e45 69747079     g again.Encrypti
100113b0:	52206e6f 65757165 52207473 796c7065     on Request Reply
100113c0:	69614620 0064656c 74696e49 696c6169      Failed.Initiali
100113d0:	676e697a 4d415320 00313142 424d4153     zing SAMB11.SAMB
100113e0:	49203131 6974696e 7a696c61 6f697461     11 Initializatio
100113f0:	6166206e 64656c69 00000000 61656c50     n failed....Plea
10011400:	63206573 6b636568 65687420 776f7020     se check the pow
10011410:	61207265 6320646e 656e6e6f 6f697463     er and connectio
10011420:	202f206e 64726168 65726177 6e6f6320     n / hardware con
10011430:	7463656e 0000726f 454d5441 41422d4c     nector..ATMEL-BA
10011440:	00000053 69766544 6e206563 20656d61     S...Device name 
10011450:	20746573 6c696166 00006465 61204442     set failed..BD a
10011460:	65726464 67207373 66207465 656c6961     ddress get faile
10011470:	00000064 41204442 65726464 303a7373     d...BD Address:0
10011480:	32302578 32302558 32302558 32302558     x%02X%02X%02X%02
10011490:	32302558 32302558 41202c58 65726464     X%02X%02X, Addre
100114a0:	54207373 3a657079 00006425 20746553     ss Type:%d..Set 
100114b0:	20454c42 69766544 63206563 69666e6f     BLE Device confi
100114c0:	61727567 6e6f6974 69616620 0064656c     guration failed.
100114d0:	20746553 20454c42 69766544 41206563     Set BLE Device A
100114e0:	65726464 66207373 656c6961 00000064     ddress failed...
100114f0:	6e616353 676e696e 502e2e2e 7361656c     Scanning...Pleas
10011500:	61772065 2e2e7469 0000002e 76616c53     e wait......Slav
10011510:	65732065 69727563 72207974 65757165     e security reque
10011520:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10011530:	65746365 6f742064 65657020 65642072     ected to peer de
10011540:	65636976 74697720 64612068 73657264     vice with addres
10011550:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
10011560:	78323025 78323025 78323025 00000000     %02x%02x%02x....
10011570:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
10011580:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
10011590:	61522067 6d6f646e 64646120 73736572     g Random address
100115a0:	69616620 2a64656c 0000002a 2078614d      failed**...Max 
100115b0:	626d756e 6f207265 6f632066 63656e6e     number of connec
100115c0:	6e6f6974 61657220 64656863 6425203a     tion reached: %d
100115d0:	3d3d3d20 7369443e 6e6e6f63 69746365      ===>Disconnecti
100115e0:	2e2e676e 0000002e 69766544 43206563     ng......Device C
100115f0:	656e6e6f 6f697463 6146206e 64656c69     onnection Failed
10011600:	53202d20 75746174 25203a73 00000064      - Status: %d...
10011610:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
10011620:	61642074 73206174 66207465 656c6961     t data set faile
10011630:	00000064                                d...

10011634 <ble_mgr_gap_handle>:
10011634:	100094cd 10009689 100094e5 00000000     ................
10011644:	00000000 1000a175 1000953d 100094e1     ....u...=.......
10011654:	10009829 10009709 10009a2d 10009841     ).......-...A...
10011664:	10009b81 10009cc5 100095c5 1000a3b1     ................
	...

10011680 <battery_app_gap_cb>:
	...
10011694:	1000b221 1000b375 00000000 00000000     !...u...........
100116a4:	1000b211 00000000 00000000 00000000     ................
100116b4:	00000000 1000b211 00000000 00000000     ................
	...
100116cc:	646e6573 20676e69 69646e69 69746163     sending indicati
100116dc:	74206e6f 6874206f 65702065 73207265     on to the peer s
100116ec:	65636375 00007373 65766461 73697472     uccess..advertis
100116fc:	6e656d65 61642074 73206174 66207465     ement data set f
1001170c:	656c6961 65722064 6e6f7361 64253a20     ailed reason :%d
1001171c:	00000000 20454c42 72617453 20646574     ....BLE Started 
1001172c:	00766441 20454c42 20766441 72617473     Adv.BLE Adv star
1001173c:	61462074 64656c69 61657220 206e6f73     t Failed reason 
1001174c:	0064253a 74696e49 696c6169 676e697a     :%d.Initializing
1001175c:	74614220 79726574 72655320 65636976      Battery Service
1001176c:	70704120 6163696c 6e6f6974 00000000      Application....
1001177c:	69666564 676e696e 74616220 79726574     defining battery
1001178c:	72657320 65636976 69616620 2064656c      service failed 
1001179c:	00006425 74746142 20797265 6576654c     %d..Battery Leve
100117ac:	64253a6c 00002525                       l:%d%%..

100117b4 <battery_app_gatt_server_cb>:
100117b4:	00000000 1000b245 1000b279 00000000     ....E...y.......
	...
100117dc:	656d7441 6f43206c 022e7072                       Atmel Corp.

100117e7 <CSWTCH.45>:
100117e7:	00100402                                         ...

100117ea <CSWTCH.47>:
100117ea:	03010300 03030303 03030303 02020303              ...............

100117f9 <client_conf_uuid>:
100117f9:	29042902                                         .)

100117fb <presentation_format_uuid>:
100117fb:	29012904                                         .)

100117fd <user_desc_uuid>:
100117fd:	29032901                                         .)

100117ff <server_conf_uuid>:
100117ff:	29002903                                         .)

10011801 <extended_props_uuid>:
10011801:	28022900                                         .)

10011803 <include_uuid>:
10011803:	28032802                                         .(

10011805 <char_uuid>:
10011805:	54002803 141000ec 141000eb 121000eb     .(.T............
10011815:	2c1000eb 2c1000ec 1e1000ec 121000ec     ...,...,........
10011825:	2c1000eb 1e1000ec 2c1000ec 121000ec     ...,.......,....
10011835:	341000eb 341000ec 341000ec 341000ec     ...4...4...4...4
10011845:	431000ee 0c000000                                ...C...

1001184c <_global_impure_ptr>:
1001184c:	1001190c                                ....

10011850 <__sf_fake_stdin>:
	...

10011870 <__sf_fake_stdout>:
	...

10011890 <__sf_fake_stderr>:
	...
100118b0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
100118c0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
100118d0:	31300046 35343332 39383736 64636261     F.0123456789abcd
100118e0:	00006665                                ef..

100118e4 <_init>:
100118e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100118e6:	46c0      	nop			; (mov r8, r8)
100118e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
100118ea:	bc08      	pop	{r3}
100118ec:	469e      	mov	lr, r3
100118ee:	4770      	bx	lr

100118f0 <__init_array_start>:
100118f0:	100080b1 	.word	0x100080b1

100118f4 <_fini>:
100118f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100118f6:	46c0      	nop			; (mov r8, r8)
100118f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
100118fa:	bc08      	pop	{r3}
100118fc:	469e      	mov	lr, r3
100118fe:	4770      	bx	lr

10011900 <__fini_array_start>:
10011900:	10008089 	.word	0x10008089
