
SMS_remote1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b894  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  10013894  10013894  00013894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002d40  10013908  10013908  00013908  2**2
                  ALLOC
  3 .stack        00000800  10016648  10016648  00013908  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00013908  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00013930  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002a660  00000000  00000000  000139e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003373  00000000  00000000  0003e044  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000064c8  00000000  00000000  000413b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000838  00000000  00000000  0004787f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000860  00000000  00000000  000480b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00022e59  00000000  00000000  00048917  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e9ff  00000000  00000000  0006b770  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0013e363  00000000  00000000  0007a16f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001f30  00000000  00000000  001b84d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10013894 	.word	0x10013894
10008068:	10013894 	.word	0x10013894
1000806c:	10013908 	.word	0x10013908
10008070:	10016648 	.word	0x10016648
10008074:	10013908 	.word	0x10013908
10008078:	10013898 	.word	0x10013898
1000807c:	1001390c 	.word	0x1001390c
10008080:	10010f3d 	.word	0x10010f3d
10008084:	1000c851 	.word	0x1000c851

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10013908 	.word	0x10013908
100080a8:	00000000 	.word	0x00000000
100080ac:	10013894 	.word	0x10013894

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	1001390c 	.word	0x1001390c
100080dc:	10013894 	.word	0x10013894
100080e0:	10013894 	.word	0x10013894
100080e4:	00000000 	.word	0x00000000

100080e8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
100080e8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_clock_get_value();
100080ea:	4b09      	ldr	r3, [pc, #36]	; (10008110 <delay_init+0x28>)
100080ec:	4798      	blx	r3
100080ee:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
100080f0:	4c08      	ldr	r4, [pc, #32]	; (10008114 <delay_init+0x2c>)
100080f2:	21fa      	movs	r1, #250	; 0xfa
100080f4:	0089      	lsls	r1, r1, #2
100080f6:	47a0      	blx	r4
100080f8:	4b07      	ldr	r3, [pc, #28]	; (10008118 <delay_init+0x30>)
100080fa:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
100080fc:	4907      	ldr	r1, [pc, #28]	; (1000811c <delay_init+0x34>)
100080fe:	0028      	movs	r0, r5
10008100:	47a0      	blx	r4
10008102:	4b07      	ldr	r3, [pc, #28]	; (10008120 <delay_init+0x38>)
10008104:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
10008106:	2205      	movs	r2, #5
10008108:	4b06      	ldr	r3, [pc, #24]	; (10008124 <delay_init+0x3c>)
1000810a:	601a      	str	r2, [r3, #0]
}
1000810c:	bd70      	pop	{r4, r5, r6, pc}
1000810e:	46c0      	nop			; (mov r8, r8)
10008110:	10008911 	.word	0x10008911
10008114:	1000fe9d 	.word	0x1000fe9d
10008118:	10013898 	.word	0x10013898
1000811c:	000f4240 	.word	0x000f4240
10008120:	10013894 	.word	0x10013894
10008124:	e000e010 	.word	0xe000e010

10008128 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
10008128:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000812a:	4b16      	ldr	r3, [pc, #88]	; (10008184 <gpio_port0_isr_handler+0x5c>)
1000812c:	681d      	ldr	r5, [r3, #0]
1000812e:	8f29      	ldrh	r1, [r5, #56]	; 0x38
10008130:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
10008132:	07cb      	lsls	r3, r1, #31
10008134:	d407      	bmi.n	10008146 <gpio_port0_isr_handler+0x1e>
10008136:	2301      	movs	r3, #1
10008138:	2401      	movs	r4, #1
1000813a:	0018      	movs	r0, r3
1000813c:	0022      	movs	r2, r4
1000813e:	409a      	lsls	r2, r3
10008140:	4211      	tst	r1, r2
10008142:	d014      	beq.n	1000816e <gpio_port0_isr_handler+0x46>
10008144:	e001      	b.n	1000814a <gpio_port0_isr_handler+0x22>
10008146:	2201      	movs	r2, #1
10008148:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000814a:	b292      	uxth	r2, r2
1000814c:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000814e:	2346      	movs	r3, #70	; 0x46
10008150:	4a0c      	ldr	r2, [pc, #48]	; (10008184 <gpio_port0_isr_handler+0x5c>)
10008152:	5ad3      	ldrh	r3, [r2, r3]
10008154:	4103      	asrs	r3, r0
10008156:	07db      	lsls	r3, r3, #31
10008158:	d50c      	bpl.n	10008174 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000815a:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000815c:	5ad3      	ldrh	r3, [r2, r3]
1000815e:	4103      	asrs	r3, r0
10008160:	07db      	lsls	r3, r3, #31
10008162:	d507      	bpl.n	10008174 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
10008164:	0080      	lsls	r0, r0, #2
10008166:	1810      	adds	r0, r2, r0
10008168:	6843      	ldr	r3, [r0, #4]
1000816a:	4798      	blx	r3
1000816c:	e002      	b.n	10008174 <gpio_port0_isr_handler+0x4c>
1000816e:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
10008170:	2b10      	cmp	r3, #16
10008172:	d1e2      	bne.n	1000813a <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10008174:	2180      	movs	r1, #128	; 0x80
10008176:	0409      	lsls	r1, r1, #16
10008178:	23c0      	movs	r3, #192	; 0xc0
1000817a:	005b      	lsls	r3, r3, #1
1000817c:	4a02      	ldr	r2, [pc, #8]	; (10008188 <gpio_port0_isr_handler+0x60>)
1000817e:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
10008180:	bd70      	pop	{r4, r5, r6, pc}
10008182:	46c0      	nop			; (mov r8, r8)
10008184:	100153c8 	.word	0x100153c8
10008188:	e000e100 	.word	0xe000e100

1000818c <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000818c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000818e:	4b18      	ldr	r3, [pc, #96]	; (100081f0 <gpio_port1_isr_handler+0x64>)
10008190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10008192:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
10008194:	b2b6      	uxth	r6, r6
10008196:	0037      	movs	r7, r6
10008198:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000819a:	0b76      	lsrs	r6, r6, #13
1000819c:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000819e:	4d14      	ldr	r5, [pc, #80]	; (100081f0 <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
100081a0:	2e00      	cmp	r6, #0
100081a2:	d001      	beq.n	100081a8 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
100081a4:	4b13      	ldr	r3, [pc, #76]	; (100081f4 <gpio_port1_isr_handler+0x68>)
100081a6:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
100081a8:	0022      	movs	r2, r4
100081aa:	2301      	movs	r3, #1
100081ac:	40a3      	lsls	r3, r4
100081ae:	421f      	tst	r7, r3
100081b0:	d013      	beq.n	100081da <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
100081b2:	b29b      	uxth	r3, r3
100081b4:	6ca9      	ldr	r1, [r5, #72]	; 0x48
100081b6:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
100081b8:	238e      	movs	r3, #142	; 0x8e
100081ba:	5aeb      	ldrh	r3, [r5, r3]
100081bc:	4123      	asrs	r3, r4
100081be:	07db      	lsls	r3, r3, #31
100081c0:	d50b      	bpl.n	100081da <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
100081c2:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
100081c4:	490a      	ldr	r1, [pc, #40]	; (100081f0 <gpio_port1_isr_handler+0x64>)
100081c6:	5acb      	ldrh	r3, [r1, r3]
100081c8:	4123      	asrs	r3, r4
100081ca:	07db      	lsls	r3, r3, #31
100081cc:	d505      	bpl.n	100081da <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
100081ce:	3212      	adds	r2, #18
100081d0:	0092      	lsls	r2, r2, #2
100081d2:	188a      	adds	r2, r1, r2
100081d4:	6853      	ldr	r3, [r2, #4]
100081d6:	4798      	blx	r3
				break;
100081d8:	e002      	b.n	100081e0 <gpio_port1_isr_handler+0x54>
100081da:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
100081dc:	2c10      	cmp	r4, #16
100081de:	d1df      	bne.n	100081a0 <gpio_port1_isr_handler+0x14>
100081e0:	2180      	movs	r1, #128	; 0x80
100081e2:	0449      	lsls	r1, r1, #17
100081e4:	23c0      	movs	r3, #192	; 0xc0
100081e6:	005b      	lsls	r3, r3, #1
100081e8:	4a03      	ldr	r2, [pc, #12]	; (100081f8 <gpio_port1_isr_handler+0x6c>)
100081ea:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
100081ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100081ee:	46c0      	nop			; (mov r8, r8)
100081f0:	100153c8 	.word	0x100153c8
100081f4:	0001bc51 	.word	0x0001bc51
100081f8:	e000e100 	.word	0xe000e100

100081fc <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
100081fc:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
100081fe:	2390      	movs	r3, #144	; 0x90
10008200:	4a1b      	ldr	r2, [pc, #108]	; (10008270 <gpio_port2_isr_handler+0x74>)
10008202:	58d2      	ldr	r2, [r2, r3]
10008204:	8f13      	ldrh	r3, [r2, #56]	; 0x38
10008206:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
10008208:	04d9      	lsls	r1, r3, #19
1000820a:	d414      	bmi.n	10008236 <gpio_port2_isr_handler+0x3a>
1000820c:	0499      	lsls	r1, r3, #18
1000820e:	d40a      	bmi.n	10008226 <gpio_port2_isr_handler+0x2a>
10008210:	0459      	lsls	r1, r3, #17
10008212:	d40c      	bmi.n	1000822e <gpio_port2_isr_handler+0x32>
10008214:	0bdb      	lsrs	r3, r3, #15
10008216:	03db      	lsls	r3, r3, #15
10008218:	b29b      	uxth	r3, r3
1000821a:	2b00      	cmp	r3, #0
1000821c:	d020      	beq.n	10008260 <gpio_port2_isr_handler+0x64>
1000821e:	2380      	movs	r3, #128	; 0x80
10008220:	021b      	lsls	r3, r3, #8
10008222:	210f      	movs	r1, #15
10008224:	e00a      	b.n	1000823c <gpio_port2_isr_handler+0x40>
10008226:	2380      	movs	r3, #128	; 0x80
10008228:	019b      	lsls	r3, r3, #6
1000822a:	210d      	movs	r1, #13
1000822c:	e006      	b.n	1000823c <gpio_port2_isr_handler+0x40>
1000822e:	2380      	movs	r3, #128	; 0x80
10008230:	01db      	lsls	r3, r3, #7
10008232:	210e      	movs	r1, #14
10008234:	e002      	b.n	1000823c <gpio_port2_isr_handler+0x40>
10008236:	2380      	movs	r3, #128	; 0x80
10008238:	015b      	lsls	r3, r3, #5
1000823a:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000823c:	b29b      	uxth	r3, r3
1000823e:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
10008240:	23d6      	movs	r3, #214	; 0xd6
10008242:	4a0b      	ldr	r2, [pc, #44]	; (10008270 <gpio_port2_isr_handler+0x74>)
10008244:	5ad3      	ldrh	r3, [r2, r3]
10008246:	410b      	asrs	r3, r1
10008248:	07db      	lsls	r3, r3, #31
1000824a:	d509      	bpl.n	10008260 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000824c:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000824e:	5ad3      	ldrh	r3, [r2, r3]
10008250:	410b      	asrs	r3, r1
10008252:	07db      	lsls	r3, r3, #31
10008254:	d504      	bpl.n	10008260 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
10008256:	3124      	adds	r1, #36	; 0x24
10008258:	0089      	lsls	r1, r1, #2
1000825a:	1851      	adds	r1, r2, r1
1000825c:	684b      	ldr	r3, [r1, #4]
1000825e:	4798      	blx	r3
10008260:	2180      	movs	r1, #128	; 0x80
10008262:	0489      	lsls	r1, r1, #18
10008264:	23c0      	movs	r3, #192	; 0xc0
10008266:	005b      	lsls	r3, r3, #1
10008268:	4a02      	ldr	r2, [pc, #8]	; (10008274 <gpio_port2_isr_handler+0x78>)
1000826a:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000826c:	bd10      	pop	{r4, pc}
1000826e:	46c0      	nop			; (mov r8, r8)
10008270:	100153c8 	.word	0x100153c8
10008274:	e000e100 	.word	0xe000e100

10008278 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
10008278:	2300      	movs	r3, #0
1000827a:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000827c:	2201      	movs	r2, #1
1000827e:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
10008280:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
10008282:	70c3      	strb	r3, [r0, #3]
}
10008284:	4770      	bx	lr
10008286:	46c0      	nop			; (mov r8, r8)

10008288 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
10008288:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000828a:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000828c:	2801      	cmp	r0, #1
1000828e:	d800      	bhi.n	10008292 <gpio_pin_set_config+0xa>
10008290:	e0c8      	b.n	10008424 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
10008292:	2807      	cmp	r0, #7
10008294:	d809      	bhi.n	100082aa <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008296:	4d64      	ldr	r5, [pc, #400]	; (10008428 <gpio_pin_set_config+0x1a0>)
10008298:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000829a:	3b10      	subs	r3, #16
1000829c:	4003      	ands	r3, r0
1000829e:	009b      	lsls	r3, r3, #2
100082a0:	2407      	movs	r4, #7
100082a2:	409c      	lsls	r4, r3
100082a4:	43a2      	bics	r2, r4
100082a6:	646a      	str	r2, [r5, #68]	; 0x44
100082a8:	e029      	b.n	100082fe <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
100082aa:	280f      	cmp	r0, #15
100082ac:	d809      	bhi.n	100082c2 <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
100082ae:	4d5e      	ldr	r5, [pc, #376]	; (10008428 <gpio_pin_set_config+0x1a0>)
100082b0:	6caa      	ldr	r2, [r5, #72]	; 0x48
100082b2:	2307      	movs	r3, #7
100082b4:	4003      	ands	r3, r0
100082b6:	009b      	lsls	r3, r3, #2
100082b8:	2407      	movs	r4, #7
100082ba:	409c      	lsls	r4, r3
100082bc:	43a2      	bics	r2, r4
100082be:	64aa      	str	r2, [r5, #72]	; 0x48
100082c0:	e01d      	b.n	100082fe <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
100082c2:	2817      	cmp	r0, #23
100082c4:	d809      	bhi.n	100082da <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
100082c6:	4d58      	ldr	r5, [pc, #352]	; (10008428 <gpio_pin_set_config+0x1a0>)
100082c8:	6cea      	ldr	r2, [r5, #76]	; 0x4c
100082ca:	2307      	movs	r3, #7
100082cc:	4003      	ands	r3, r0
100082ce:	009b      	lsls	r3, r3, #2
100082d0:	2407      	movs	r4, #7
100082d2:	409c      	lsls	r4, r3
100082d4:	43a2      	bics	r2, r4
100082d6:	64ea      	str	r2, [r5, #76]	; 0x4c
100082d8:	e011      	b.n	100082fe <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
100082da:	0003      	movs	r3, r0
100082dc:	3b2c      	subs	r3, #44	; 0x2c
100082de:	2b03      	cmp	r3, #3
100082e0:	d80d      	bhi.n	100082fe <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
100082e2:	4d52      	ldr	r5, [pc, #328]	; (1000842c <gpio_pin_set_config+0x1a4>)
100082e4:	2482      	movs	r4, #130	; 0x82
100082e6:	00e4      	lsls	r4, r4, #3
100082e8:	5d2a      	ldrb	r2, [r5, r4]
100082ea:	0712      	lsls	r2, r2, #28
100082ec:	2601      	movs	r6, #1
100082ee:	409e      	lsls	r6, r3
100082f0:	0f12      	lsrs	r2, r2, #28
100082f2:	5d2b      	ldrb	r3, [r5, r4]
100082f4:	43b2      	bics	r2, r6
100082f6:	260f      	movs	r6, #15
100082f8:	43b3      	bics	r3, r6
100082fa:	4313      	orrs	r3, r2
100082fc:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
100082fe:	0003      	movs	r3, r0
10008300:	3b1d      	subs	r3, #29
10008302:	2b02      	cmp	r3, #2
10008304:	d829      	bhi.n	1000835a <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
10008306:	784b      	ldrb	r3, [r1, #1]
10008308:	2b01      	cmp	r3, #1
1000830a:	d108      	bne.n	1000831e <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000830c:	4d47      	ldr	r5, [pc, #284]	; (1000842c <gpio_pin_set_config+0x1a4>)
1000830e:	7d2b      	ldrb	r3, [r5, #20]
10008310:	241f      	movs	r4, #31
10008312:	1a24      	subs	r4, r4, r0
10008314:	2201      	movs	r2, #1
10008316:	40a2      	lsls	r2, r4
10008318:	4393      	bics	r3, r2
1000831a:	752b      	strb	r3, [r5, #20]
1000831c:	e008      	b.n	10008330 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000831e:	4c43      	ldr	r4, [pc, #268]	; (1000842c <gpio_pin_set_config+0x1a4>)
10008320:	7d25      	ldrb	r5, [r4, #20]
10008322:	221f      	movs	r2, #31
10008324:	1a12      	subs	r2, r2, r0
10008326:	2301      	movs	r3, #1
10008328:	4093      	lsls	r3, r2
1000832a:	432b      	orrs	r3, r5
1000832c:	b2db      	uxtb	r3, r3
1000832e:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
10008330:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008332:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
10008334:	2a00      	cmp	r2, #0
10008336:	d075      	beq.n	10008424 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
10008338:	493c      	ldr	r1, [pc, #240]	; (1000842c <gpio_pin_set_config+0x1a4>)
1000833a:	880c      	ldrh	r4, [r1, #0]
1000833c:	221f      	movs	r2, #31
1000833e:	1a10      	subs	r0, r2, r0
10008340:	0080      	lsls	r0, r0, #2
10008342:	3301      	adds	r3, #1
10008344:	4083      	lsls	r3, r0
10008346:	4323      	orrs	r3, r4
10008348:	b29b      	uxth	r3, r3
1000834a:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000834c:	4a38      	ldr	r2, [pc, #224]	; (10008430 <gpio_pin_set_config+0x1a8>)
1000834e:	7811      	ldrb	r1, [r2, #0]
10008350:	2302      	movs	r3, #2
10008352:	430b      	orrs	r3, r1
10008354:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008356:	2300      	movs	r3, #0
10008358:	e064      	b.n	10008424 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000835a:	780a      	ldrb	r2, [r1, #0]
1000835c:	2a00      	cmp	r2, #0
1000835e:	d140      	bne.n	100083e2 <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
10008360:	280f      	cmp	r0, #15
10008362:	d808      	bhi.n	10008376 <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
10008364:	2301      	movs	r3, #1
10008366:	4083      	lsls	r3, r0
10008368:	b29b      	uxth	r3, r3
1000836a:	4a32      	ldr	r2, [pc, #200]	; (10008434 <gpio_pin_set_config+0x1ac>)
1000836c:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000836e:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
10008370:	281f      	cmp	r0, #31
10008372:	d857      	bhi.n	10008424 <gpio_pin_set_config+0x19c>
10008374:	e012      	b.n	1000839c <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
10008376:	281f      	cmp	r0, #31
10008378:	d807      	bhi.n	1000838a <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000837a:	220f      	movs	r2, #15
1000837c:	4002      	ands	r2, r0
1000837e:	2301      	movs	r3, #1
10008380:	4093      	lsls	r3, r2
10008382:	b29b      	uxth	r3, r3
10008384:	4a2c      	ldr	r2, [pc, #176]	; (10008438 <gpio_pin_set_config+0x1b0>)
10008386:	8293      	strh	r3, [r2, #20]
10008388:	e008      	b.n	1000839c <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000838a:	230f      	movs	r3, #15
1000838c:	4018      	ands	r0, r3
1000838e:	3b0e      	subs	r3, #14
10008390:	4083      	lsls	r3, r0
10008392:	b29b      	uxth	r3, r3
10008394:	4a29      	ldr	r2, [pc, #164]	; (1000843c <gpio_pin_set_config+0x1b4>)
10008396:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008398:	2300      	movs	r3, #0
1000839a:	e043      	b.n	10008424 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000839c:	784b      	ldrb	r3, [r1, #1]
1000839e:	2b01      	cmp	r3, #1
100083a0:	d00c      	beq.n	100083bc <gpio_pin_set_config+0x134>
100083a2:	2b00      	cmp	r3, #0
100083a4:	d002      	beq.n	100083ac <gpio_pin_set_config+0x124>
100083a6:	2b02      	cmp	r3, #2
100083a8:	d010      	beq.n	100083cc <gpio_pin_set_config+0x144>
100083aa:	e03a      	b.n	10008422 <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
100083ac:	491e      	ldr	r1, [pc, #120]	; (10008428 <gpio_pin_set_config+0x1a0>)
100083ae:	6d0a      	ldr	r2, [r1, #80]	; 0x50
100083b0:	2301      	movs	r3, #1
100083b2:	4083      	lsls	r3, r0
100083b4:	4313      	orrs	r3, r2
100083b6:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100083b8:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
100083ba:	e033      	b.n	10008424 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
100083bc:	491a      	ldr	r1, [pc, #104]	; (10008428 <gpio_pin_set_config+0x1a0>)
100083be:	6d0b      	ldr	r3, [r1, #80]	; 0x50
100083c0:	2201      	movs	r2, #1
100083c2:	4082      	lsls	r2, r0
100083c4:	4393      	bics	r3, r2
100083c6:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100083c8:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
100083ca:	e02b      	b.n	10008424 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
100083cc:	4b16      	ldr	r3, [pc, #88]	; (10008428 <gpio_pin_set_config+0x1a0>)
100083ce:	6d59      	ldr	r1, [r3, #84]	; 0x54
100083d0:	2201      	movs	r2, #1
100083d2:	4082      	lsls	r2, r0
100083d4:	4311      	orrs	r1, r2
100083d6:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
100083d8:	6d19      	ldr	r1, [r3, #80]	; 0x50
100083da:	4391      	bics	r1, r2
100083dc:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100083de:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
100083e0:	e020      	b.n	10008424 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100083e2:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
100083e4:	2a01      	cmp	r2, #1
100083e6:	d11d      	bne.n	10008424 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
100083e8:	280f      	cmp	r0, #15
100083ea:	d806      	bhi.n	100083fa <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
100083ec:	3301      	adds	r3, #1
100083ee:	4083      	lsls	r3, r0
100083f0:	b29b      	uxth	r3, r3
100083f2:	4a10      	ldr	r2, [pc, #64]	; (10008434 <gpio_pin_set_config+0x1ac>)
100083f4:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100083f6:	2300      	movs	r3, #0
100083f8:	e014      	b.n	10008424 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
100083fa:	281f      	cmp	r0, #31
100083fc:	d808      	bhi.n	10008410 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
100083fe:	230f      	movs	r3, #15
10008400:	4018      	ands	r0, r3
10008402:	3b0e      	subs	r3, #14
10008404:	4083      	lsls	r3, r0
10008406:	b29b      	uxth	r3, r3
10008408:	4a0b      	ldr	r2, [pc, #44]	; (10008438 <gpio_pin_set_config+0x1b0>)
1000840a:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000840c:	2300      	movs	r3, #0
1000840e:	e009      	b.n	10008424 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
10008410:	230f      	movs	r3, #15
10008412:	4018      	ands	r0, r3
10008414:	3b0e      	subs	r3, #14
10008416:	4083      	lsls	r3, r0
10008418:	b29b      	uxth	r3, r3
1000841a:	4a08      	ldr	r2, [pc, #32]	; (1000843c <gpio_pin_set_config+0x1b4>)
1000841c:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000841e:	2300      	movs	r3, #0
10008420:	e000      	b.n	10008424 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
10008422:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
10008424:	0018      	movs	r0, r3
10008426:	bd70      	pop	{r4, r5, r6, pc}
10008428:	4000b000 	.word	0x4000b000
1000842c:	4000f000 	.word	0x4000f000
10008430:	4000e000 	.word	0x4000e000
10008434:	40010000 	.word	0x40010000
10008438:	40011000 	.word	0x40011000
1000843c:	40013000 	.word	0x40013000

10008440 <gpio_pin_get_input_level>:
 */
bool gpio_pin_get_input_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
10008440:	280f      	cmp	r0, #15
10008442:	d806      	bhi.n	10008452 <gpio_pin_get_input_level+0x12>
		regval = GPIO0->DATA.reg;
10008444:	4b0f      	ldr	r3, [pc, #60]	; (10008484 <gpio_pin_get_input_level+0x44>)
10008446:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << gpio_pin);
10008448:	2301      	movs	r3, #1
1000844a:	4083      	lsls	r3, r0
1000844c:	0018      	movs	r0, r3
1000844e:	4008      	ands	r0, r1
10008450:	e014      	b.n	1000847c <gpio_pin_get_input_level+0x3c>
	} else if (gpio_pin < 32) {
10008452:	281f      	cmp	r0, #31
10008454:	d809      	bhi.n	1000846a <gpio_pin_get_input_level+0x2a>
		regval = GPIO1->DATA.reg;
10008456:	4b0c      	ldr	r3, [pc, #48]	; (10008488 <gpio_pin_get_input_level+0x48>)
10008458:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000845a:	230f      	movs	r3, #15
1000845c:	4003      	ands	r3, r0
1000845e:	001a      	movs	r2, r3
10008460:	2301      	movs	r3, #1
10008462:	4093      	lsls	r3, r2
10008464:	0018      	movs	r0, r3
10008466:	4008      	ands	r0, r1
10008468:	e008      	b.n	1000847c <gpio_pin_get_input_level+0x3c>
	} else {
		regval = GPIO2->DATA.reg;
1000846a:	4b08      	ldr	r3, [pc, #32]	; (1000848c <gpio_pin_get_input_level+0x4c>)
1000846c:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000846e:	230f      	movs	r3, #15
10008470:	4003      	ands	r3, r0
10008472:	001a      	movs	r2, r3
10008474:	2301      	movs	r3, #1
10008476:	4093      	lsls	r3, r2
10008478:	0018      	movs	r0, r3
1000847a:	4008      	ands	r0, r1
	}

	return regval;
1000847c:	1e43      	subs	r3, r0, #1
1000847e:	4198      	sbcs	r0, r3
10008480:	b2c0      	uxtb	r0, r0
}
10008482:	4770      	bx	lr
10008484:	40010000 	.word	0x40010000
10008488:	40011000 	.word	0x40011000
1000848c:	40013000 	.word	0x40013000

10008490 <gpio_pin_get_output_level>:
 */
bool gpio_pin_get_output_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
10008490:	280f      	cmp	r0, #15
10008492:	d806      	bhi.n	100084a2 <gpio_pin_get_output_level+0x12>
		regval = GPIO0->DATAOUT.reg;
10008494:	4b0f      	ldr	r3, [pc, #60]	; (100084d4 <gpio_pin_get_output_level+0x44>)
10008496:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << gpio_pin);
10008498:	2301      	movs	r3, #1
1000849a:	4083      	lsls	r3, r0
1000849c:	0018      	movs	r0, r3
1000849e:	4008      	ands	r0, r1
100084a0:	e014      	b.n	100084cc <gpio_pin_get_output_level+0x3c>
	} else if (gpio_pin < 32) {
100084a2:	281f      	cmp	r0, #31
100084a4:	d809      	bhi.n	100084ba <gpio_pin_get_output_level+0x2a>
		regval = GPIO1->DATAOUT.reg;
100084a6:	4b0c      	ldr	r3, [pc, #48]	; (100084d8 <gpio_pin_get_output_level+0x48>)
100084a8:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
100084aa:	230f      	movs	r3, #15
100084ac:	4003      	ands	r3, r0
100084ae:	001a      	movs	r2, r3
100084b0:	2301      	movs	r3, #1
100084b2:	4093      	lsls	r3, r2
100084b4:	0018      	movs	r0, r3
100084b6:	4008      	ands	r0, r1
100084b8:	e008      	b.n	100084cc <gpio_pin_get_output_level+0x3c>
	} else {
		regval = GPIO2->DATAOUT.reg;
100084ba:	4b08      	ldr	r3, [pc, #32]	; (100084dc <gpio_pin_get_output_level+0x4c>)
100084bc:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
100084be:	230f      	movs	r3, #15
100084c0:	4003      	ands	r3, r0
100084c2:	001a      	movs	r2, r3
100084c4:	2301      	movs	r3, #1
100084c6:	4093      	lsls	r3, r2
100084c8:	0018      	movs	r0, r3
100084ca:	4008      	ands	r0, r1
	}

	return regval;
100084cc:	1e43      	subs	r3, r0, #1
100084ce:	4198      	sbcs	r0, r3
100084d0:	b2c0      	uxtb	r0, r0
}
100084d2:	4770      	bx	lr
100084d4:	40010000 	.word	0x40010000
100084d8:	40011000 	.word	0x40011000
100084dc:	40013000 	.word	0x40013000

100084e0 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
100084e0:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
100084e2:	280f      	cmp	r0, #15
100084e4:	d810      	bhi.n	10008508 <gpio_pin_set_output_level+0x28>
		if(level) {
100084e6:	2900      	cmp	r1, #0
100084e8:	d007      	beq.n	100084fa <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
100084ea:	4a1d      	ldr	r2, [pc, #116]	; (10008560 <gpio_pin_set_output_level+0x80>)
100084ec:	8891      	ldrh	r1, [r2, #4]
100084ee:	2301      	movs	r3, #1
100084f0:	4083      	lsls	r3, r0
100084f2:	430b      	orrs	r3, r1
100084f4:	b29b      	uxth	r3, r3
100084f6:	8093      	strh	r3, [r2, #4]
100084f8:	e031      	b.n	1000855e <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
100084fa:	4919      	ldr	r1, [pc, #100]	; (10008560 <gpio_pin_set_output_level+0x80>)
100084fc:	888b      	ldrh	r3, [r1, #4]
100084fe:	2201      	movs	r2, #1
10008500:	4082      	lsls	r2, r0
10008502:	4393      	bics	r3, r2
10008504:	808b      	strh	r3, [r1, #4]
10008506:	e02a      	b.n	1000855e <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
10008508:	281f      	cmp	r0, #31
1000850a:	d814      	bhi.n	10008536 <gpio_pin_set_output_level+0x56>
		if(level) {
1000850c:	2900      	cmp	r1, #0
1000850e:	d009      	beq.n	10008524 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
10008510:	4914      	ldr	r1, [pc, #80]	; (10008564 <gpio_pin_set_output_level+0x84>)
10008512:	888c      	ldrh	r4, [r1, #4]
10008514:	220f      	movs	r2, #15
10008516:	4010      	ands	r0, r2
10008518:	2301      	movs	r3, #1
1000851a:	4083      	lsls	r3, r0
1000851c:	4323      	orrs	r3, r4
1000851e:	b29b      	uxth	r3, r3
10008520:	808b      	strh	r3, [r1, #4]
10008522:	e01c      	b.n	1000855e <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
10008524:	490f      	ldr	r1, [pc, #60]	; (10008564 <gpio_pin_set_output_level+0x84>)
10008526:	888b      	ldrh	r3, [r1, #4]
10008528:	220f      	movs	r2, #15
1000852a:	4010      	ands	r0, r2
1000852c:	3a0e      	subs	r2, #14
1000852e:	4082      	lsls	r2, r0
10008530:	4393      	bics	r3, r2
10008532:	808b      	strh	r3, [r1, #4]
10008534:	e013      	b.n	1000855e <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
10008536:	2900      	cmp	r1, #0
10008538:	d009      	beq.n	1000854e <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000853a:	490b      	ldr	r1, [pc, #44]	; (10008568 <gpio_pin_set_output_level+0x88>)
1000853c:	888c      	ldrh	r4, [r1, #4]
1000853e:	220f      	movs	r2, #15
10008540:	4010      	ands	r0, r2
10008542:	2301      	movs	r3, #1
10008544:	4083      	lsls	r3, r0
10008546:	4323      	orrs	r3, r4
10008548:	b29b      	uxth	r3, r3
1000854a:	808b      	strh	r3, [r1, #4]
1000854c:	e007      	b.n	1000855e <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000854e:	4906      	ldr	r1, [pc, #24]	; (10008568 <gpio_pin_set_output_level+0x88>)
10008550:	888b      	ldrh	r3, [r1, #4]
10008552:	220f      	movs	r2, #15
10008554:	4010      	ands	r0, r2
10008556:	3a0e      	subs	r2, #14
10008558:	4082      	lsls	r2, r0
1000855a:	4393      	bics	r3, r2
1000855c:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000855e:	bd10      	pop	{r4, pc}
10008560:	40010000 	.word	0x40010000
10008564:	40011000 	.word	0x40011000
10008568:	40013000 	.word	0x40013000

1000856c <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000856c:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000856e:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
10008570:	23ff      	movs	r3, #255	; 0xff
10008572:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
10008574:	2807      	cmp	r0, #7
10008576:	d833      	bhi.n	100085e0 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008578:	4a4e      	ldr	r2, [pc, #312]	; (100086b4 <gpio_pinmux_cofiguration+0x148>)
1000857a:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000857c:	3bf8      	subs	r3, #248	; 0xf8
1000857e:	4003      	ands	r3, r0
10008580:	009b      	lsls	r3, r3, #2
10008582:	2607      	movs	r6, #7
10008584:	409e      	lsls	r6, r3
10008586:	43b4      	bics	r4, r6
10008588:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000858a:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000858c:	000e      	movs	r6, r1
1000858e:	409e      	lsls	r6, r3
10008590:	0033      	movs	r3, r6
10008592:	4323      	orrs	r3, r4
10008594:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
10008596:	2901      	cmp	r1, #1
10008598:	d000      	beq.n	1000859c <gpio_pinmux_cofiguration+0x30>
1000859a:	e08a      	b.n	100086b2 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000859c:	2803      	cmp	r0, #3
1000859e:	d80f      	bhi.n	100085c0 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100085a0:	0011      	movs	r1, r2
100085a2:	22d0      	movs	r2, #208	; 0xd0
100085a4:	0052      	lsls	r2, r2, #1
100085a6:	588c      	ldr	r4, [r1, r2]
100085a8:	2303      	movs	r3, #3
100085aa:	4018      	ands	r0, r3
100085ac:	00c0      	lsls	r0, r0, #3
100085ae:	333c      	adds	r3, #60	; 0x3c
100085b0:	4083      	lsls	r3, r0
100085b2:	439c      	bics	r4, r3
100085b4:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100085b6:	588b      	ldr	r3, [r1, r2]
100085b8:	4085      	lsls	r5, r0
100085ba:	431d      	orrs	r5, r3
100085bc:	508d      	str	r5, [r1, r2]
100085be:	e078      	b.n	100086b2 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100085c0:	493c      	ldr	r1, [pc, #240]	; (100086b4 <gpio_pinmux_cofiguration+0x148>)
100085c2:	22d2      	movs	r2, #210	; 0xd2
100085c4:	0052      	lsls	r2, r2, #1
100085c6:	588c      	ldr	r4, [r1, r2]
100085c8:	2303      	movs	r3, #3
100085ca:	4018      	ands	r0, r3
100085cc:	00c0      	lsls	r0, r0, #3
100085ce:	333c      	adds	r3, #60	; 0x3c
100085d0:	4083      	lsls	r3, r0
100085d2:	439c      	bics	r4, r3
100085d4:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100085d6:	588b      	ldr	r3, [r1, r2]
100085d8:	4085      	lsls	r5, r0
100085da:	431d      	orrs	r5, r3
100085dc:	508d      	str	r5, [r1, r2]
100085de:	e068      	b.n	100086b2 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
100085e0:	280f      	cmp	r0, #15
100085e2:	d832      	bhi.n	1000864a <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
100085e4:	4a33      	ldr	r2, [pc, #204]	; (100086b4 <gpio_pinmux_cofiguration+0x148>)
100085e6:	6c94      	ldr	r4, [r2, #72]	; 0x48
100085e8:	2307      	movs	r3, #7
100085ea:	4003      	ands	r3, r0
100085ec:	009b      	lsls	r3, r3, #2
100085ee:	2607      	movs	r6, #7
100085f0:	409e      	lsls	r6, r3
100085f2:	43b4      	bics	r4, r6
100085f4:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
100085f6:	6c94      	ldr	r4, [r2, #72]	; 0x48
100085f8:	000e      	movs	r6, r1
100085fa:	409e      	lsls	r6, r3
100085fc:	0033      	movs	r3, r6
100085fe:	4323      	orrs	r3, r4
10008600:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
10008602:	2901      	cmp	r1, #1
10008604:	d155      	bne.n	100086b2 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
10008606:	280b      	cmp	r0, #11
10008608:	d80f      	bhi.n	1000862a <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000860a:	0011      	movs	r1, r2
1000860c:	22d4      	movs	r2, #212	; 0xd4
1000860e:	0052      	lsls	r2, r2, #1
10008610:	588c      	ldr	r4, [r1, r2]
10008612:	2303      	movs	r3, #3
10008614:	4018      	ands	r0, r3
10008616:	00c0      	lsls	r0, r0, #3
10008618:	333c      	adds	r3, #60	; 0x3c
1000861a:	4083      	lsls	r3, r0
1000861c:	439c      	bics	r4, r3
1000861e:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008620:	588b      	ldr	r3, [r1, r2]
10008622:	4085      	lsls	r5, r0
10008624:	431d      	orrs	r5, r3
10008626:	508d      	str	r5, [r1, r2]
10008628:	e043      	b.n	100086b2 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000862a:	4922      	ldr	r1, [pc, #136]	; (100086b4 <gpio_pinmux_cofiguration+0x148>)
1000862c:	22d6      	movs	r2, #214	; 0xd6
1000862e:	0052      	lsls	r2, r2, #1
10008630:	588c      	ldr	r4, [r1, r2]
10008632:	2303      	movs	r3, #3
10008634:	4018      	ands	r0, r3
10008636:	00c0      	lsls	r0, r0, #3
10008638:	333c      	adds	r3, #60	; 0x3c
1000863a:	4083      	lsls	r3, r0
1000863c:	439c      	bics	r4, r3
1000863e:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008640:	588b      	ldr	r3, [r1, r2]
10008642:	4085      	lsls	r5, r0
10008644:	431d      	orrs	r5, r3
10008646:	508d      	str	r5, [r1, r2]
10008648:	e033      	b.n	100086b2 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000864a:	2817      	cmp	r0, #23
1000864c:	d831      	bhi.n	100086b2 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000864e:	4a19      	ldr	r2, [pc, #100]	; (100086b4 <gpio_pinmux_cofiguration+0x148>)
10008650:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008652:	2307      	movs	r3, #7
10008654:	4003      	ands	r3, r0
10008656:	009b      	lsls	r3, r3, #2
10008658:	2607      	movs	r6, #7
1000865a:	409e      	lsls	r6, r3
1000865c:	43b4      	bics	r4, r6
1000865e:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008660:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008662:	000e      	movs	r6, r1
10008664:	409e      	lsls	r6, r3
10008666:	0033      	movs	r3, r6
10008668:	4323      	orrs	r3, r4
1000866a:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000866c:	2901      	cmp	r1, #1
1000866e:	d120      	bne.n	100086b2 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
10008670:	2813      	cmp	r0, #19
10008672:	d80f      	bhi.n	10008694 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008674:	0011      	movs	r1, r2
10008676:	22d8      	movs	r2, #216	; 0xd8
10008678:	0052      	lsls	r2, r2, #1
1000867a:	588c      	ldr	r4, [r1, r2]
1000867c:	2303      	movs	r3, #3
1000867e:	4018      	ands	r0, r3
10008680:	00c0      	lsls	r0, r0, #3
10008682:	333c      	adds	r3, #60	; 0x3c
10008684:	4083      	lsls	r3, r0
10008686:	439c      	bics	r4, r3
10008688:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000868a:	588b      	ldr	r3, [r1, r2]
1000868c:	4085      	lsls	r5, r0
1000868e:	431d      	orrs	r5, r3
10008690:	508d      	str	r5, [r1, r2]
10008692:	e00e      	b.n	100086b2 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008694:	4a07      	ldr	r2, [pc, #28]	; (100086b4 <gpio_pinmux_cofiguration+0x148>)
10008696:	23da      	movs	r3, #218	; 0xda
10008698:	005b      	lsls	r3, r3, #1
1000869a:	58d1      	ldr	r1, [r2, r3]
1000869c:	2403      	movs	r4, #3
1000869e:	4020      	ands	r0, r4
100086a0:	00c0      	lsls	r0, r0, #3
100086a2:	343c      	adds	r4, #60	; 0x3c
100086a4:	4084      	lsls	r4, r0
100086a6:	43a1      	bics	r1, r4
100086a8:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100086aa:	58d1      	ldr	r1, [r2, r3]
100086ac:	4085      	lsls	r5, r0
100086ae:	430d      	orrs	r5, r1
100086b0:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
100086b2:	bd70      	pop	{r4, r5, r6, pc}
100086b4:	4000b000 	.word	0x4000b000

100086b8 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
100086b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
100086ba:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
100086bc:	280f      	cmp	r0, #15
100086be:	d904      	bls.n	100086ca <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
100086c0:	241f      	movs	r4, #31
100086c2:	4284      	cmp	r4, r0
100086c4:	415b      	adcs	r3, r3
100086c6:	3c1d      	subs	r4, #29
100086c8:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
100086ca:	2a01      	cmp	r2, #1
100086cc:	d016      	beq.n	100086fc <gpio_register_callback+0x44>
100086ce:	2a00      	cmp	r2, #0
100086d0:	d004      	beq.n	100086dc <gpio_register_callback+0x24>
100086d2:	2a02      	cmp	r2, #2
100086d4:	d022      	beq.n	1000871c <gpio_register_callback+0x64>
100086d6:	2a03      	cmp	r2, #3
100086d8:	d030      	beq.n	1000873c <gpio_register_callback+0x84>
100086da:	e03e      	b.n	1000875a <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
100086dc:	4e29      	ldr	r6, [pc, #164]	; (10008784 <gpio_register_callback+0xcc>)
100086de:	00dc      	lsls	r4, r3, #3
100086e0:	18e2      	adds	r2, r4, r3
100086e2:	00d2      	lsls	r2, r2, #3
100086e4:	5997      	ldr	r7, [r2, r6]
100086e6:	250f      	movs	r5, #15
100086e8:	4005      	ands	r5, r0
100086ea:	2201      	movs	r2, #1
100086ec:	40aa      	lsls	r2, r5
100086ee:	b292      	uxth	r2, r2
100086f0:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
100086f2:	18e4      	adds	r4, r4, r3
100086f4:	00e4      	lsls	r4, r4, #3
100086f6:	59a4      	ldr	r4, [r4, r6]
100086f8:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
100086fa:	e02e      	b.n	1000875a <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
100086fc:	4e21      	ldr	r6, [pc, #132]	; (10008784 <gpio_register_callback+0xcc>)
100086fe:	00dc      	lsls	r4, r3, #3
10008700:	18e2      	adds	r2, r4, r3
10008702:	00d2      	lsls	r2, r2, #3
10008704:	5997      	ldr	r7, [r2, r6]
10008706:	250f      	movs	r5, #15
10008708:	4005      	ands	r5, r0
1000870a:	2201      	movs	r2, #1
1000870c:	40aa      	lsls	r2, r5
1000870e:	b292      	uxth	r2, r2
10008710:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
10008712:	18e4      	adds	r4, r4, r3
10008714:	00e4      	lsls	r4, r4, #3
10008716:	59a4      	ldr	r4, [r4, r6]
10008718:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000871a:	e01e      	b.n	1000875a <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000871c:	4e19      	ldr	r6, [pc, #100]	; (10008784 <gpio_register_callback+0xcc>)
1000871e:	00dc      	lsls	r4, r3, #3
10008720:	18e2      	adds	r2, r4, r3
10008722:	00d2      	lsls	r2, r2, #3
10008724:	5997      	ldr	r7, [r2, r6]
10008726:	250f      	movs	r5, #15
10008728:	4005      	ands	r5, r0
1000872a:	2201      	movs	r2, #1
1000872c:	40aa      	lsls	r2, r5
1000872e:	b292      	uxth	r2, r2
10008730:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
10008732:	18e4      	adds	r4, r4, r3
10008734:	00e4      	lsls	r4, r4, #3
10008736:	59a4      	ldr	r4, [r4, r6]
10008738:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000873a:	e00e      	b.n	1000875a <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000873c:	4e11      	ldr	r6, [pc, #68]	; (10008784 <gpio_register_callback+0xcc>)
1000873e:	00dc      	lsls	r4, r3, #3
10008740:	18e2      	adds	r2, r4, r3
10008742:	00d2      	lsls	r2, r2, #3
10008744:	5997      	ldr	r7, [r2, r6]
10008746:	250f      	movs	r5, #15
10008748:	4005      	ands	r5, r0
1000874a:	2201      	movs	r2, #1
1000874c:	40aa      	lsls	r2, r5
1000874e:	b292      	uxth	r2, r2
10008750:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
10008752:	18e4      	adds	r4, r4, r3
10008754:	00e4      	lsls	r4, r4, #3
10008756:	59a4      	ldr	r4, [r4, r6]
10008758:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000875a:	220f      	movs	r2, #15
1000875c:	4010      	ands	r0, r2
1000875e:	4c09      	ldr	r4, [pc, #36]	; (10008784 <gpio_register_callback+0xcc>)
10008760:	00dd      	lsls	r5, r3, #3
10008762:	18ea      	adds	r2, r5, r3
10008764:	0052      	lsls	r2, r2, #1
10008766:	1812      	adds	r2, r2, r0
10008768:	0092      	lsls	r2, r2, #2
1000876a:	18a2      	adds	r2, r4, r2
1000876c:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000876e:	18ea      	adds	r2, r5, r3
10008770:	00d2      	lsls	r2, r2, #3
10008772:	18a2      	adds	r2, r4, r2
10008774:	3244      	adds	r2, #68	; 0x44
10008776:	2101      	movs	r1, #1
10008778:	4081      	lsls	r1, r0
1000877a:	8813      	ldrh	r3, [r2, #0]
1000877c:	430b      	orrs	r3, r1
1000877e:	8013      	strh	r3, [r2, #0]
}
10008780:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008782:	46c0      	nop			; (mov r8, r8)
10008784:	100153c8 	.word	0x100153c8

10008788 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
10008788:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000878a:	280f      	cmp	r0, #15
1000878c:	d805      	bhi.n	1000879a <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000878e:	2280      	movs	r2, #128	; 0x80
10008790:	0412      	lsls	r2, r2, #16
10008792:	4b12      	ldr	r3, [pc, #72]	; (100087dc <gpio_enable_callback+0x54>)
10008794:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
10008796:	2200      	movs	r2, #0
10008798:	e00c      	b.n	100087b4 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000879a:	281f      	cmp	r0, #31
1000879c:	d805      	bhi.n	100087aa <gpio_enable_callback+0x22>
1000879e:	2280      	movs	r2, #128	; 0x80
100087a0:	0452      	lsls	r2, r2, #17
100087a2:	4b0e      	ldr	r3, [pc, #56]	; (100087dc <gpio_enable_callback+0x54>)
100087a4:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
100087a6:	2201      	movs	r2, #1
100087a8:	e004      	b.n	100087b4 <gpio_enable_callback+0x2c>
100087aa:	2280      	movs	r2, #128	; 0x80
100087ac:	0492      	lsls	r2, r2, #18
100087ae:	4b0b      	ldr	r3, [pc, #44]	; (100087dc <gpio_enable_callback+0x54>)
100087b0:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
100087b2:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
100087b4:	230f      	movs	r3, #15
100087b6:	4018      	ands	r0, r3
100087b8:	2101      	movs	r1, #1
100087ba:	4081      	lsls	r1, r0
100087bc:	4c08      	ldr	r4, [pc, #32]	; (100087e0 <gpio_enable_callback+0x58>)
100087be:	00d5      	lsls	r5, r2, #3
100087c0:	18ab      	adds	r3, r5, r2
100087c2:	00db      	lsls	r3, r3, #3
100087c4:	18e3      	adds	r3, r4, r3
100087c6:	3346      	adds	r3, #70	; 0x46
100087c8:	8818      	ldrh	r0, [r3, #0]
100087ca:	4308      	orrs	r0, r1
100087cc:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
100087ce:	18aa      	adds	r2, r5, r2
100087d0:	00d2      	lsls	r2, r2, #3
100087d2:	5913      	ldr	r3, [r2, r4]
100087d4:	b289      	uxth	r1, r1
100087d6:	8419      	strh	r1, [r3, #32]
}
100087d8:	bd30      	pop	{r4, r5, pc}
100087da:	46c0      	nop			; (mov r8, r8)
100087dc:	e000e100 	.word	0xe000e100
100087e0:	100153c8 	.word	0x100153c8

100087e4 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
100087e4:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
100087e6:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
100087e8:	280f      	cmp	r0, #15
100087ea:	d904      	bls.n	100087f6 <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
100087ec:	221f      	movs	r2, #31
100087ee:	4282      	cmp	r2, r0
100087f0:	415b      	adcs	r3, r3
100087f2:	3a1d      	subs	r2, #29
100087f4:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
100087f6:	220f      	movs	r2, #15
100087f8:	4010      	ands	r0, r2
100087fa:	2101      	movs	r1, #1
100087fc:	4081      	lsls	r1, r0
100087fe:	4c07      	ldr	r4, [pc, #28]	; (1000881c <gpio_disable_callback+0x38>)
10008800:	00dd      	lsls	r5, r3, #3
10008802:	18ea      	adds	r2, r5, r3
10008804:	00d2      	lsls	r2, r2, #3
10008806:	18a2      	adds	r2, r4, r2
10008808:	3246      	adds	r2, #70	; 0x46
1000880a:	8810      	ldrh	r0, [r2, #0]
1000880c:	4388      	bics	r0, r1
1000880e:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
10008810:	18eb      	adds	r3, r5, r3
10008812:	00db      	lsls	r3, r3, #3
10008814:	591b      	ldr	r3, [r3, r4]
10008816:	b289      	uxth	r1, r1
10008818:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000881a:	bd30      	pop	{r4, r5, pc}
1000881c:	100153c8 	.word	0x100153c8

10008820 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
10008820:	b510      	push	{r4, lr}
10008822:	4a11      	ldr	r2, [pc, #68]	; (10008868 <gpio_init+0x48>)
10008824:	0010      	movs	r0, r2
10008826:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
10008828:	2100      	movs	r1, #0
1000882a:	e007      	b.n	1000883c <gpio_init+0x1c>
1000882c:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000882e:	4293      	cmp	r3, r2
10008830:	d1fc      	bne.n	1000882c <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
10008832:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
10008834:	8011      	strh	r1, [r2, #0]
10008836:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
10008838:	4282      	cmp	r2, r0
1000883a:	d002      	beq.n	10008842 <gpio_init+0x22>
1000883c:	0013      	movs	r3, r2
1000883e:	3b40      	subs	r3, #64	; 0x40
10008840:	e7f4      	b.n	1000882c <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
10008842:	4b0a      	ldr	r3, [pc, #40]	; (1000886c <gpio_init+0x4c>)
10008844:	4a0a      	ldr	r2, [pc, #40]	; (10008870 <gpio_init+0x50>)
10008846:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
10008848:	4a0a      	ldr	r2, [pc, #40]	; (10008874 <gpio_init+0x54>)
1000884a:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000884c:	490a      	ldr	r1, [pc, #40]	; (10008878 <gpio_init+0x58>)
1000884e:	2290      	movs	r2, #144	; 0x90
10008850:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
10008852:	490a      	ldr	r1, [pc, #40]	; (1000887c <gpio_init+0x5c>)
10008854:	2027      	movs	r0, #39	; 0x27
10008856:	4c0a      	ldr	r4, [pc, #40]	; (10008880 <gpio_init+0x60>)
10008858:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000885a:	490a      	ldr	r1, [pc, #40]	; (10008884 <gpio_init+0x64>)
1000885c:	2028      	movs	r0, #40	; 0x28
1000885e:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
10008860:	4909      	ldr	r1, [pc, #36]	; (10008888 <gpio_init+0x68>)
10008862:	2029      	movs	r0, #41	; 0x29
10008864:	47a0      	blx	r4
}
10008866:	bd10      	pop	{r4, pc}
10008868:	1001540c 	.word	0x1001540c
1000886c:	100153c8 	.word	0x100153c8
10008870:	40010000 	.word	0x40010000
10008874:	40011000 	.word	0x40011000
10008878:	40013000 	.word	0x40013000
1000887c:	10008129 	.word	0x10008129
10008880:	100090e1 	.word	0x100090e1
10008884:	1000818d 	.word	0x1000818d
10008888:	100081fd 	.word	0x100081fd

1000888c <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000888c:	2801      	cmp	r0, #1
1000888e:	d00d      	beq.n	100088ac <system_clock_config+0x20>
10008890:	2800      	cmp	r0, #0
10008892:	d002      	beq.n	1000889a <system_clock_config+0xe>
10008894:	2802      	cmp	r0, #2
10008896:	d01c      	beq.n	100088d2 <system_clock_config+0x46>
10008898:	e02e      	b.n	100088f8 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000889a:	4a18      	ldr	r2, [pc, #96]	; (100088fc <system_clock_config+0x70>)
1000889c:	6990      	ldr	r0, [r2, #24]
1000889e:	230c      	movs	r3, #12
100088a0:	4303      	orrs	r3, r0
100088a2:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
100088a4:	4a16      	ldr	r2, [pc, #88]	; (10008900 <system_clock_config+0x74>)
100088a6:	4b17      	ldr	r3, [pc, #92]	; (10008904 <system_clock_config+0x78>)
100088a8:	601a      	str	r2, [r3, #0]
			break;
100088aa:	e01a      	b.n	100088e2 <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
100088ac:	4b13      	ldr	r3, [pc, #76]	; (100088fc <system_clock_config+0x70>)
100088ae:	6998      	ldr	r0, [r3, #24]
100088b0:	2208      	movs	r2, #8
100088b2:	4302      	orrs	r2, r0
100088b4:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
100088b6:	699a      	ldr	r2, [r3, #24]
100088b8:	2004      	movs	r0, #4
100088ba:	4382      	bics	r2, r0
100088bc:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
100088be:	4a12      	ldr	r2, [pc, #72]	; (10008908 <system_clock_config+0x7c>)
100088c0:	6853      	ldr	r3, [r2, #4]
100088c2:	2080      	movs	r0, #128	; 0x80
100088c4:	0300      	lsls	r0, r0, #12
100088c6:	4303      	orrs	r3, r0
100088c8:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
100088ca:	4a10      	ldr	r2, [pc, #64]	; (1000890c <system_clock_config+0x80>)
100088cc:	4b0d      	ldr	r3, [pc, #52]	; (10008904 <system_clock_config+0x78>)
100088ce:	601a      	str	r2, [r3, #0]
			break;
100088d0:	e007      	b.n	100088e2 <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
100088d2:	4a0a      	ldr	r2, [pc, #40]	; (100088fc <system_clock_config+0x70>)
100088d4:	6993      	ldr	r3, [r2, #24]
100088d6:	200c      	movs	r0, #12
100088d8:	4383      	bics	r3, r0
100088da:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
100088dc:	4a08      	ldr	r2, [pc, #32]	; (10008900 <system_clock_config+0x74>)
100088de:	4b09      	ldr	r3, [pc, #36]	; (10008904 <system_clock_config+0x78>)
100088e0:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
100088e2:	4b06      	ldr	r3, [pc, #24]	; (100088fc <system_clock_config+0x70>)
100088e4:	699a      	ldr	r2, [r3, #24]
100088e6:	2003      	movs	r0, #3
100088e8:	4382      	bics	r2, r0
100088ea:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
100088ec:	699a      	ldr	r2, [r3, #24]
100088ee:	4001      	ands	r1, r0
100088f0:	4311      	orrs	r1, r2
100088f2:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
100088f4:	2000      	movs	r0, #0
100088f6:	e000      	b.n	100088fa <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
100088f8:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
100088fa:	4770      	bx	lr
100088fc:	4000b000 	.word	0x4000b000
10008900:	018cba80 	.word	0x018cba80
10008904:	100154a0 	.word	0x100154a0
10008908:	4000f000 	.word	0x4000f000
1000890c:	001e8480 	.word	0x001e8480

10008910 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
10008910:	4b01      	ldr	r3, [pc, #4]	; (10008918 <system_clock_get_value+0x8>)
10008912:	6818      	ldr	r0, [r3, #0]
}
10008914:	4770      	bx	lr
10008916:	46c0      	nop			; (mov r8, r8)
10008918:	100154a0 	.word	0x100154a0

1000891c <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000891c:	b500      	push	{lr}
	switch (peripheral) {
1000891e:	2835      	cmp	r0, #53	; 0x35
10008920:	d900      	bls.n	10008924 <system_clock_peripheral_enable+0x8>
10008922:	e1a2      	b.n	10008c6a <system_clock_peripheral_enable+0x34e>
10008924:	0080      	lsls	r0, r0, #2
10008926:	4bd2      	ldr	r3, [pc, #840]	; (10008c70 <system_clock_peripheral_enable+0x354>)
10008928:	581b      	ldr	r3, [r3, r0]
1000892a:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000892c:	4ad1      	ldr	r2, [pc, #836]	; (10008c74 <system_clock_peripheral_enable+0x358>)
1000892e:	68d1      	ldr	r1, [r2, #12]
10008930:	2302      	movs	r3, #2
10008932:	430b      	orrs	r3, r1
10008934:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008936:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
10008938:	e198      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000893a:	4ace      	ldr	r2, [pc, #824]	; (10008c74 <system_clock_peripheral_enable+0x358>)
1000893c:	68d1      	ldr	r1, [r2, #12]
1000893e:	2304      	movs	r3, #4
10008940:	430b      	orrs	r3, r1
10008942:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008944:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
10008946:	e191      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008948:	4aca      	ldr	r2, [pc, #808]	; (10008c74 <system_clock_peripheral_enable+0x358>)
1000894a:	68d1      	ldr	r1, [r2, #12]
1000894c:	2308      	movs	r3, #8
1000894e:	430b      	orrs	r3, r1
10008950:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008952:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
10008954:	e18a      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008956:	4ac7      	ldr	r2, [pc, #796]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008958:	68d1      	ldr	r1, [r2, #12]
1000895a:	2310      	movs	r3, #16
1000895c:	430b      	orrs	r3, r1
1000895e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008960:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
10008962:	e183      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008964:	4ac3      	ldr	r2, [pc, #780]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008966:	68d1      	ldr	r1, [r2, #12]
10008968:	2320      	movs	r3, #32
1000896a:	430b      	orrs	r3, r1
1000896c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000896e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
10008970:	e17c      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008972:	4ac0      	ldr	r2, [pc, #768]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008974:	68d1      	ldr	r1, [r2, #12]
10008976:	2380      	movs	r3, #128	; 0x80
10008978:	430b      	orrs	r3, r1
1000897a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000897c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000897e:	e175      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008980:	4abc      	ldr	r2, [pc, #752]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008982:	68d3      	ldr	r3, [r2, #12]
10008984:	2180      	movs	r1, #128	; 0x80
10008986:	0049      	lsls	r1, r1, #1
10008988:	430b      	orrs	r3, r1
1000898a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000898c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000898e:	e16d      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008990:	4ab8      	ldr	r2, [pc, #736]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008992:	68d3      	ldr	r3, [r2, #12]
10008994:	2180      	movs	r1, #128	; 0x80
10008996:	0109      	lsls	r1, r1, #4
10008998:	430b      	orrs	r3, r1
1000899a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000899c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000899e:	e165      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089a0:	4ab4      	ldr	r2, [pc, #720]	; (10008c74 <system_clock_peripheral_enable+0x358>)
100089a2:	68d3      	ldr	r3, [r2, #12]
100089a4:	2180      	movs	r1, #128	; 0x80
100089a6:	0149      	lsls	r1, r1, #5
100089a8:	430b      	orrs	r3, r1
100089aa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089ac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
100089ae:	e15d      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089b0:	4ab0      	ldr	r2, [pc, #704]	; (10008c74 <system_clock_peripheral_enable+0x358>)
100089b2:	68d3      	ldr	r3, [r2, #12]
100089b4:	2180      	movs	r1, #128	; 0x80
100089b6:	0189      	lsls	r1, r1, #6
100089b8:	430b      	orrs	r3, r1
100089ba:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089bc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
100089be:	e155      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089c0:	4aac      	ldr	r2, [pc, #688]	; (10008c74 <system_clock_peripheral_enable+0x358>)
100089c2:	68d3      	ldr	r3, [r2, #12]
100089c4:	2180      	movs	r1, #128	; 0x80
100089c6:	01c9      	lsls	r1, r1, #7
100089c8:	430b      	orrs	r3, r1
100089ca:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089cc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
100089ce:	e14d      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089d0:	4aa8      	ldr	r2, [pc, #672]	; (10008c74 <system_clock_peripheral_enable+0x358>)
100089d2:	68d3      	ldr	r3, [r2, #12]
100089d4:	2180      	movs	r1, #128	; 0x80
100089d6:	0209      	lsls	r1, r1, #8
100089d8:	430b      	orrs	r3, r1
100089da:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089dc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
100089de:	e145      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089e0:	4aa4      	ldr	r2, [pc, #656]	; (10008c74 <system_clock_peripheral_enable+0x358>)
100089e2:	68d3      	ldr	r3, [r2, #12]
100089e4:	2180      	movs	r1, #128	; 0x80
100089e6:	0249      	lsls	r1, r1, #9
100089e8:	430b      	orrs	r3, r1
100089ea:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089ec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
100089ee:	e13d      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089f0:	4aa0      	ldr	r2, [pc, #640]	; (10008c74 <system_clock_peripheral_enable+0x358>)
100089f2:	68d3      	ldr	r3, [r2, #12]
100089f4:	2180      	movs	r1, #128	; 0x80
100089f6:	0289      	lsls	r1, r1, #10
100089f8:	430b      	orrs	r3, r1
100089fa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089fc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
100089fe:	e135      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a00:	4a9c      	ldr	r2, [pc, #624]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008a02:	68d3      	ldr	r3, [r2, #12]
10008a04:	2180      	movs	r1, #128	; 0x80
10008a06:	02c9      	lsls	r1, r1, #11
10008a08:	430b      	orrs	r3, r1
10008a0a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a0c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
10008a0e:	e12d      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a10:	4a98      	ldr	r2, [pc, #608]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008a12:	68d3      	ldr	r3, [r2, #12]
10008a14:	2180      	movs	r1, #128	; 0x80
10008a16:	0309      	lsls	r1, r1, #12
10008a18:	430b      	orrs	r3, r1
10008a1a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a1c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
10008a1e:	e125      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a20:	4a94      	ldr	r2, [pc, #592]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008a22:	68d3      	ldr	r3, [r2, #12]
10008a24:	2180      	movs	r1, #128	; 0x80
10008a26:	0349      	lsls	r1, r1, #13
10008a28:	430b      	orrs	r3, r1
10008a2a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a2c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
10008a2e:	e11d      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a30:	4a90      	ldr	r2, [pc, #576]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008a32:	68d3      	ldr	r3, [r2, #12]
10008a34:	2180      	movs	r1, #128	; 0x80
10008a36:	0389      	lsls	r1, r1, #14
10008a38:	430b      	orrs	r3, r1
10008a3a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a3c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
10008a3e:	e115      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a40:	4a8c      	ldr	r2, [pc, #560]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008a42:	68d3      	ldr	r3, [r2, #12]
10008a44:	2180      	movs	r1, #128	; 0x80
10008a46:	03c9      	lsls	r1, r1, #15
10008a48:	430b      	orrs	r3, r1
10008a4a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a4c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
10008a4e:	e10d      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a50:	4a88      	ldr	r2, [pc, #544]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008a52:	68d3      	ldr	r3, [r2, #12]
10008a54:	2180      	movs	r1, #128	; 0x80
10008a56:	0409      	lsls	r1, r1, #16
10008a58:	430b      	orrs	r3, r1
10008a5a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a5c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
10008a5e:	e105      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a60:	4a84      	ldr	r2, [pc, #528]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008a62:	68d3      	ldr	r3, [r2, #12]
10008a64:	2180      	movs	r1, #128	; 0x80
10008a66:	0449      	lsls	r1, r1, #17
10008a68:	430b      	orrs	r3, r1
10008a6a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a6c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
10008a6e:	e0fd      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a70:	4a80      	ldr	r2, [pc, #512]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008a72:	68d3      	ldr	r3, [r2, #12]
10008a74:	2180      	movs	r1, #128	; 0x80
10008a76:	0489      	lsls	r1, r1, #18
10008a78:	430b      	orrs	r3, r1
10008a7a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a7c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
10008a7e:	e0f5      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a80:	4a7c      	ldr	r2, [pc, #496]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008a82:	68d3      	ldr	r3, [r2, #12]
10008a84:	2180      	movs	r1, #128	; 0x80
10008a86:	04c9      	lsls	r1, r1, #19
10008a88:	430b      	orrs	r3, r1
10008a8a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a8c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
10008a8e:	e0ed      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a90:	4a78      	ldr	r2, [pc, #480]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008a92:	68d3      	ldr	r3, [r2, #12]
10008a94:	2180      	movs	r1, #128	; 0x80
10008a96:	0509      	lsls	r1, r1, #20
10008a98:	430b      	orrs	r3, r1
10008a9a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a9c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
10008a9e:	e0e5      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008aa0:	4a74      	ldr	r2, [pc, #464]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008aa2:	68d3      	ldr	r3, [r2, #12]
10008aa4:	2180      	movs	r1, #128	; 0x80
10008aa6:	0549      	lsls	r1, r1, #21
10008aa8:	430b      	orrs	r3, r1
10008aaa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008aac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
10008aae:	e0dd      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ab0:	4a70      	ldr	r2, [pc, #448]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008ab2:	68d3      	ldr	r3, [r2, #12]
10008ab4:	2180      	movs	r1, #128	; 0x80
10008ab6:	0589      	lsls	r1, r1, #22
10008ab8:	430b      	orrs	r3, r1
10008aba:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008abc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
10008abe:	e0d5      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ac0:	4a6c      	ldr	r2, [pc, #432]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008ac2:	68d3      	ldr	r3, [r2, #12]
10008ac4:	2180      	movs	r1, #128	; 0x80
10008ac6:	05c9      	lsls	r1, r1, #23
10008ac8:	430b      	orrs	r3, r1
10008aca:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008acc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
10008ace:	e0cd      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008ad0:	4a68      	ldr	r2, [pc, #416]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008ad2:	6911      	ldr	r1, [r2, #16]
10008ad4:	2301      	movs	r3, #1
10008ad6:	430b      	orrs	r3, r1
10008ad8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ada:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
10008adc:	e0c6      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008ade:	4a65      	ldr	r2, [pc, #404]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008ae0:	6911      	ldr	r1, [r2, #16]
10008ae2:	2302      	movs	r3, #2
10008ae4:	430b      	orrs	r3, r1
10008ae6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ae8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
10008aea:	e0bf      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008aec:	4a61      	ldr	r2, [pc, #388]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008aee:	6911      	ldr	r1, [r2, #16]
10008af0:	2304      	movs	r3, #4
10008af2:	430b      	orrs	r3, r1
10008af4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008af6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
10008af8:	e0b8      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008afa:	4a5e      	ldr	r2, [pc, #376]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008afc:	6911      	ldr	r1, [r2, #16]
10008afe:	2308      	movs	r3, #8
10008b00:	430b      	orrs	r3, r1
10008b02:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b04:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
10008b06:	e0b1      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b08:	4a5a      	ldr	r2, [pc, #360]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008b0a:	6911      	ldr	r1, [r2, #16]
10008b0c:	2310      	movs	r3, #16
10008b0e:	430b      	orrs	r3, r1
10008b10:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b12:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
10008b14:	e0aa      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b16:	4a57      	ldr	r2, [pc, #348]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008b18:	6911      	ldr	r1, [r2, #16]
10008b1a:	2320      	movs	r3, #32
10008b1c:	430b      	orrs	r3, r1
10008b1e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b20:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
10008b22:	e0a3      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b24:	4a53      	ldr	r2, [pc, #332]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008b26:	6911      	ldr	r1, [r2, #16]
10008b28:	2340      	movs	r3, #64	; 0x40
10008b2a:	430b      	orrs	r3, r1
10008b2c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b2e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
10008b30:	e09c      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b32:	4a50      	ldr	r2, [pc, #320]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008b34:	6911      	ldr	r1, [r2, #16]
10008b36:	2380      	movs	r3, #128	; 0x80
10008b38:	430b      	orrs	r3, r1
10008b3a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b3c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
10008b3e:	e095      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b40:	4a4c      	ldr	r2, [pc, #304]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008b42:	6913      	ldr	r3, [r2, #16]
10008b44:	2180      	movs	r1, #128	; 0x80
10008b46:	0049      	lsls	r1, r1, #1
10008b48:	430b      	orrs	r3, r1
10008b4a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b4c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
10008b4e:	e08d      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b50:	4a48      	ldr	r2, [pc, #288]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008b52:	6913      	ldr	r3, [r2, #16]
10008b54:	2180      	movs	r1, #128	; 0x80
10008b56:	0089      	lsls	r1, r1, #2
10008b58:	430b      	orrs	r3, r1
10008b5a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b5c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
10008b5e:	e085      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b60:	4a44      	ldr	r2, [pc, #272]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008b62:	6913      	ldr	r3, [r2, #16]
10008b64:	2180      	movs	r1, #128	; 0x80
10008b66:	00c9      	lsls	r1, r1, #3
10008b68:	430b      	orrs	r3, r1
10008b6a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b6c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
10008b6e:	e07d      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b70:	4a40      	ldr	r2, [pc, #256]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008b72:	6913      	ldr	r3, [r2, #16]
10008b74:	2180      	movs	r1, #128	; 0x80
10008b76:	0109      	lsls	r1, r1, #4
10008b78:	430b      	orrs	r3, r1
10008b7a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b7c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
10008b7e:	e075      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b80:	4a3c      	ldr	r2, [pc, #240]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008b82:	6913      	ldr	r3, [r2, #16]
10008b84:	2180      	movs	r1, #128	; 0x80
10008b86:	0149      	lsls	r1, r1, #5
10008b88:	430b      	orrs	r3, r1
10008b8a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b8c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
10008b8e:	e06d      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b90:	4a38      	ldr	r2, [pc, #224]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008b92:	6913      	ldr	r3, [r2, #16]
10008b94:	2180      	movs	r1, #128	; 0x80
10008b96:	0189      	lsls	r1, r1, #6
10008b98:	430b      	orrs	r3, r1
10008b9a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b9c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
10008b9e:	e065      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008ba0:	4a34      	ldr	r2, [pc, #208]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008ba2:	6913      	ldr	r3, [r2, #16]
10008ba4:	2180      	movs	r1, #128	; 0x80
10008ba6:	01c9      	lsls	r1, r1, #7
10008ba8:	430b      	orrs	r3, r1
10008baa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
10008bae:	e05d      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008bb0:	4a30      	ldr	r2, [pc, #192]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008bb2:	6913      	ldr	r3, [r2, #16]
10008bb4:	2180      	movs	r1, #128	; 0x80
10008bb6:	0209      	lsls	r1, r1, #8
10008bb8:	430b      	orrs	r3, r1
10008bba:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bbc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
10008bbe:	e055      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008bc0:	4a2c      	ldr	r2, [pc, #176]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008bc2:	6913      	ldr	r3, [r2, #16]
10008bc4:	2180      	movs	r1, #128	; 0x80
10008bc6:	0249      	lsls	r1, r1, #9
10008bc8:	430b      	orrs	r3, r1
10008bca:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bcc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
10008bce:	e04d      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008bd0:	4a28      	ldr	r2, [pc, #160]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008bd2:	6913      	ldr	r3, [r2, #16]
10008bd4:	2180      	movs	r1, #128	; 0x80
10008bd6:	0289      	lsls	r1, r1, #10
10008bd8:	430b      	orrs	r3, r1
10008bda:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bdc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
10008bde:	e045      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008be0:	4a24      	ldr	r2, [pc, #144]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008be2:	6913      	ldr	r3, [r2, #16]
10008be4:	2180      	movs	r1, #128	; 0x80
10008be6:	02c9      	lsls	r1, r1, #11
10008be8:	430b      	orrs	r3, r1
10008bea:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
10008bee:	e03d      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008bf0:	4a20      	ldr	r2, [pc, #128]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008bf2:	6913      	ldr	r3, [r2, #16]
10008bf4:	2180      	movs	r1, #128	; 0x80
10008bf6:	0309      	lsls	r1, r1, #12
10008bf8:	430b      	orrs	r3, r1
10008bfa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bfc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
10008bfe:	e035      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008c00:	4a1c      	ldr	r2, [pc, #112]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008c02:	6913      	ldr	r3, [r2, #16]
10008c04:	2180      	movs	r1, #128	; 0x80
10008c06:	0349      	lsls	r1, r1, #13
10008c08:	430b      	orrs	r3, r1
10008c0a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c0c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
10008c0e:	e02d      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008c10:	4a18      	ldr	r2, [pc, #96]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008c12:	6913      	ldr	r3, [r2, #16]
10008c14:	2180      	movs	r1, #128	; 0x80
10008c16:	0389      	lsls	r1, r1, #14
10008c18:	430b      	orrs	r3, r1
10008c1a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c1c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
10008c1e:	e025      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008c20:	4a14      	ldr	r2, [pc, #80]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008c22:	6913      	ldr	r3, [r2, #16]
10008c24:	2180      	movs	r1, #128	; 0x80
10008c26:	03c9      	lsls	r1, r1, #15
10008c28:	430b      	orrs	r3, r1
10008c2a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c2c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
10008c2e:	e01d      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008c30:	4a10      	ldr	r2, [pc, #64]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008c32:	6913      	ldr	r3, [r2, #16]
10008c34:	2180      	movs	r1, #128	; 0x80
10008c36:	0409      	lsls	r1, r1, #16
10008c38:	430b      	orrs	r3, r1
10008c3a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c3c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
10008c3e:	e015      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
10008c40:	4a0c      	ldr	r2, [pc, #48]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008c42:	7d11      	ldrb	r1, [r2, #20]
10008c44:	2301      	movs	r3, #1
10008c46:	430b      	orrs	r3, r1
10008c48:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c4a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
10008c4c:	e00e      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
10008c4e:	4a09      	ldr	r2, [pc, #36]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008c50:	7d11      	ldrb	r1, [r2, #20]
10008c52:	2302      	movs	r3, #2
10008c54:	430b      	orrs	r3, r1
10008c56:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c58:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
10008c5a:	e007      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
10008c5c:	4a05      	ldr	r2, [pc, #20]	; (10008c74 <system_clock_peripheral_enable+0x358>)
10008c5e:	7d11      	ldrb	r1, [r2, #20]
10008c60:	2304      	movs	r3, #4
10008c62:	430b      	orrs	r3, r1
10008c64:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c66:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
10008c68:	e000      	b.n	10008c6c <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
10008c6a:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10008c6c:	bd00      	pop	{pc}
10008c6e:	46c0      	nop			; (mov r8, r8)
10008c70:	100121cc 	.word	0x100121cc
10008c74:	4000b000 	.word	0x4000b000

10008c78 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
10008c78:	b500      	push	{lr}
	switch (peripheral) {
10008c7a:	2843      	cmp	r0, #67	; 0x43
10008c7c:	d900      	bls.n	10008c80 <system_peripheral_reset+0x8>
10008c7e:	e223      	b.n	100090c8 <system_peripheral_reset+0x450>
10008c80:	0080      	lsls	r0, r0, #2
10008c82:	4be0      	ldr	r3, [pc, #896]	; (10009004 <system_peripheral_reset+0x38c>)
10008c84:	581b      	ldr	r3, [r3, r0]
10008c86:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008c88:	4bdf      	ldr	r3, [pc, #892]	; (10009008 <system_peripheral_reset+0x390>)
10008c8a:	6859      	ldr	r1, [r3, #4]
10008c8c:	2202      	movs	r2, #2
10008c8e:	4391      	bics	r1, r2
10008c90:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008c92:	6859      	ldr	r1, [r3, #4]
10008c94:	430a      	orrs	r2, r1
10008c96:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c98:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
10008c9a:	e216      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008c9c:	4bda      	ldr	r3, [pc, #872]	; (10009008 <system_peripheral_reset+0x390>)
10008c9e:	6859      	ldr	r1, [r3, #4]
10008ca0:	2204      	movs	r2, #4
10008ca2:	4391      	bics	r1, r2
10008ca4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008ca6:	6859      	ldr	r1, [r3, #4]
10008ca8:	430a      	orrs	r2, r1
10008caa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cac:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
10008cae:	e20c      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008cb0:	4bd5      	ldr	r3, [pc, #852]	; (10009008 <system_peripheral_reset+0x390>)
10008cb2:	6859      	ldr	r1, [r3, #4]
10008cb4:	2208      	movs	r2, #8
10008cb6:	4391      	bics	r1, r2
10008cb8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008cba:	6859      	ldr	r1, [r3, #4]
10008cbc:	430a      	orrs	r2, r1
10008cbe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cc0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
10008cc2:	e202      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008cc4:	4bd0      	ldr	r3, [pc, #832]	; (10009008 <system_peripheral_reset+0x390>)
10008cc6:	6859      	ldr	r1, [r3, #4]
10008cc8:	2210      	movs	r2, #16
10008cca:	4391      	bics	r1, r2
10008ccc:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008cce:	6859      	ldr	r1, [r3, #4]
10008cd0:	430a      	orrs	r2, r1
10008cd2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cd4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
10008cd6:	e1f8      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008cd8:	4bcb      	ldr	r3, [pc, #812]	; (10009008 <system_peripheral_reset+0x390>)
10008cda:	6859      	ldr	r1, [r3, #4]
10008cdc:	2220      	movs	r2, #32
10008cde:	4391      	bics	r1, r2
10008ce0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008ce2:	6859      	ldr	r1, [r3, #4]
10008ce4:	430a      	orrs	r2, r1
10008ce6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ce8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
10008cea:	e1ee      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008cec:	4bc6      	ldr	r3, [pc, #792]	; (10009008 <system_peripheral_reset+0x390>)
10008cee:	6859      	ldr	r1, [r3, #4]
10008cf0:	2240      	movs	r2, #64	; 0x40
10008cf2:	4391      	bics	r1, r2
10008cf4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008cf6:	6859      	ldr	r1, [r3, #4]
10008cf8:	430a      	orrs	r2, r1
10008cfa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cfc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
10008cfe:	e1e4      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d00:	4bc1      	ldr	r3, [pc, #772]	; (10009008 <system_peripheral_reset+0x390>)
10008d02:	6859      	ldr	r1, [r3, #4]
10008d04:	2280      	movs	r2, #128	; 0x80
10008d06:	4391      	bics	r1, r2
10008d08:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d0a:	6859      	ldr	r1, [r3, #4]
10008d0c:	430a      	orrs	r2, r1
10008d0e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d10:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
10008d12:	e1da      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d14:	4bbc      	ldr	r3, [pc, #752]	; (10009008 <system_peripheral_reset+0x390>)
10008d16:	6859      	ldr	r1, [r3, #4]
10008d18:	4abc      	ldr	r2, [pc, #752]	; (1000900c <system_peripheral_reset+0x394>)
10008d1a:	400a      	ands	r2, r1
10008d1c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d1e:	685a      	ldr	r2, [r3, #4]
10008d20:	2180      	movs	r1, #128	; 0x80
10008d22:	0049      	lsls	r1, r1, #1
10008d24:	430a      	orrs	r2, r1
10008d26:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d28:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
10008d2a:	e1ce      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d2c:	4bb6      	ldr	r3, [pc, #728]	; (10009008 <system_peripheral_reset+0x390>)
10008d2e:	6859      	ldr	r1, [r3, #4]
10008d30:	4ab7      	ldr	r2, [pc, #732]	; (10009010 <system_peripheral_reset+0x398>)
10008d32:	400a      	ands	r2, r1
10008d34:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d36:	685a      	ldr	r2, [r3, #4]
10008d38:	2180      	movs	r1, #128	; 0x80
10008d3a:	0089      	lsls	r1, r1, #2
10008d3c:	430a      	orrs	r2, r1
10008d3e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d40:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
10008d42:	e1c2      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d44:	4bb0      	ldr	r3, [pc, #704]	; (10009008 <system_peripheral_reset+0x390>)
10008d46:	6859      	ldr	r1, [r3, #4]
10008d48:	4ab2      	ldr	r2, [pc, #712]	; (10009014 <system_peripheral_reset+0x39c>)
10008d4a:	400a      	ands	r2, r1
10008d4c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d4e:	685a      	ldr	r2, [r3, #4]
10008d50:	2180      	movs	r1, #128	; 0x80
10008d52:	00c9      	lsls	r1, r1, #3
10008d54:	430a      	orrs	r2, r1
10008d56:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d58:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
10008d5a:	e1b6      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d5c:	4baa      	ldr	r3, [pc, #680]	; (10009008 <system_peripheral_reset+0x390>)
10008d5e:	6859      	ldr	r1, [r3, #4]
10008d60:	4aad      	ldr	r2, [pc, #692]	; (10009018 <system_peripheral_reset+0x3a0>)
10008d62:	400a      	ands	r2, r1
10008d64:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d66:	685a      	ldr	r2, [r3, #4]
10008d68:	2180      	movs	r1, #128	; 0x80
10008d6a:	0109      	lsls	r1, r1, #4
10008d6c:	430a      	orrs	r2, r1
10008d6e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d70:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
10008d72:	e1aa      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d74:	4ba4      	ldr	r3, [pc, #656]	; (10009008 <system_peripheral_reset+0x390>)
10008d76:	6859      	ldr	r1, [r3, #4]
10008d78:	4aa8      	ldr	r2, [pc, #672]	; (1000901c <system_peripheral_reset+0x3a4>)
10008d7a:	400a      	ands	r2, r1
10008d7c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d7e:	685a      	ldr	r2, [r3, #4]
10008d80:	2180      	movs	r1, #128	; 0x80
10008d82:	0149      	lsls	r1, r1, #5
10008d84:	430a      	orrs	r2, r1
10008d86:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d88:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
10008d8a:	e19e      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d8c:	4b9e      	ldr	r3, [pc, #632]	; (10009008 <system_peripheral_reset+0x390>)
10008d8e:	6859      	ldr	r1, [r3, #4]
10008d90:	4aa3      	ldr	r2, [pc, #652]	; (10009020 <system_peripheral_reset+0x3a8>)
10008d92:	400a      	ands	r2, r1
10008d94:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d96:	685a      	ldr	r2, [r3, #4]
10008d98:	2180      	movs	r1, #128	; 0x80
10008d9a:	0189      	lsls	r1, r1, #6
10008d9c:	430a      	orrs	r2, r1
10008d9e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008da0:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
10008da2:	e192      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008da4:	4b98      	ldr	r3, [pc, #608]	; (10009008 <system_peripheral_reset+0x390>)
10008da6:	6859      	ldr	r1, [r3, #4]
10008da8:	4a9e      	ldr	r2, [pc, #632]	; (10009024 <system_peripheral_reset+0x3ac>)
10008daa:	400a      	ands	r2, r1
10008dac:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008dae:	685a      	ldr	r2, [r3, #4]
10008db0:	2180      	movs	r1, #128	; 0x80
10008db2:	01c9      	lsls	r1, r1, #7
10008db4:	430a      	orrs	r2, r1
10008db6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008db8:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
10008dba:	e186      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008dbc:	4b92      	ldr	r3, [pc, #584]	; (10009008 <system_peripheral_reset+0x390>)
10008dbe:	6859      	ldr	r1, [r3, #4]
10008dc0:	4a99      	ldr	r2, [pc, #612]	; (10009028 <system_peripheral_reset+0x3b0>)
10008dc2:	400a      	ands	r2, r1
10008dc4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008dc6:	685a      	ldr	r2, [r3, #4]
10008dc8:	2180      	movs	r1, #128	; 0x80
10008dca:	0209      	lsls	r1, r1, #8
10008dcc:	430a      	orrs	r2, r1
10008dce:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008dd0:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
10008dd2:	e17a      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008dd4:	4b8c      	ldr	r3, [pc, #560]	; (10009008 <system_peripheral_reset+0x390>)
10008dd6:	6859      	ldr	r1, [r3, #4]
10008dd8:	4a94      	ldr	r2, [pc, #592]	; (1000902c <system_peripheral_reset+0x3b4>)
10008dda:	400a      	ands	r2, r1
10008ddc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008dde:	685a      	ldr	r2, [r3, #4]
10008de0:	2180      	movs	r1, #128	; 0x80
10008de2:	0249      	lsls	r1, r1, #9
10008de4:	430a      	orrs	r2, r1
10008de6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008de8:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
10008dea:	e16e      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008dec:	4b86      	ldr	r3, [pc, #536]	; (10009008 <system_peripheral_reset+0x390>)
10008dee:	6859      	ldr	r1, [r3, #4]
10008df0:	4a8f      	ldr	r2, [pc, #572]	; (10009030 <system_peripheral_reset+0x3b8>)
10008df2:	400a      	ands	r2, r1
10008df4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008df6:	685a      	ldr	r2, [r3, #4]
10008df8:	2180      	movs	r1, #128	; 0x80
10008dfa:	0289      	lsls	r1, r1, #10
10008dfc:	430a      	orrs	r2, r1
10008dfe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e00:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
10008e02:	e162      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008e04:	4b80      	ldr	r3, [pc, #512]	; (10009008 <system_peripheral_reset+0x390>)
10008e06:	6859      	ldr	r1, [r3, #4]
10008e08:	4a8a      	ldr	r2, [pc, #552]	; (10009034 <system_peripheral_reset+0x3bc>)
10008e0a:	400a      	ands	r2, r1
10008e0c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008e0e:	685a      	ldr	r2, [r3, #4]
10008e10:	2180      	movs	r1, #128	; 0x80
10008e12:	02c9      	lsls	r1, r1, #11
10008e14:	430a      	orrs	r2, r1
10008e16:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e18:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
10008e1a:	e156      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008e1c:	4b7a      	ldr	r3, [pc, #488]	; (10009008 <system_peripheral_reset+0x390>)
10008e1e:	6859      	ldr	r1, [r3, #4]
10008e20:	4a85      	ldr	r2, [pc, #532]	; (10009038 <system_peripheral_reset+0x3c0>)
10008e22:	400a      	ands	r2, r1
10008e24:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008e26:	685a      	ldr	r2, [r3, #4]
10008e28:	2180      	movs	r1, #128	; 0x80
10008e2a:	0309      	lsls	r1, r1, #12
10008e2c:	430a      	orrs	r2, r1
10008e2e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e30:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
10008e32:	e14a      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008e34:	4b74      	ldr	r3, [pc, #464]	; (10009008 <system_peripheral_reset+0x390>)
10008e36:	6859      	ldr	r1, [r3, #4]
10008e38:	4a80      	ldr	r2, [pc, #512]	; (1000903c <system_peripheral_reset+0x3c4>)
10008e3a:	400a      	ands	r2, r1
10008e3c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008e3e:	685a      	ldr	r2, [r3, #4]
10008e40:	2180      	movs	r1, #128	; 0x80
10008e42:	0349      	lsls	r1, r1, #13
10008e44:	430a      	orrs	r2, r1
10008e46:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e48:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
10008e4a:	e13e      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008e4c:	4b6e      	ldr	r3, [pc, #440]	; (10009008 <system_peripheral_reset+0x390>)
10008e4e:	6859      	ldr	r1, [r3, #4]
10008e50:	4a7b      	ldr	r2, [pc, #492]	; (10009040 <system_peripheral_reset+0x3c8>)
10008e52:	400a      	ands	r2, r1
10008e54:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008e56:	685a      	ldr	r2, [r3, #4]
10008e58:	2180      	movs	r1, #128	; 0x80
10008e5a:	0389      	lsls	r1, r1, #14
10008e5c:	430a      	orrs	r2, r1
10008e5e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e60:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
10008e62:	e132      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008e64:	4b68      	ldr	r3, [pc, #416]	; (10009008 <system_peripheral_reset+0x390>)
10008e66:	6859      	ldr	r1, [r3, #4]
10008e68:	4a76      	ldr	r2, [pc, #472]	; (10009044 <system_peripheral_reset+0x3cc>)
10008e6a:	400a      	ands	r2, r1
10008e6c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008e6e:	685a      	ldr	r2, [r3, #4]
10008e70:	2180      	movs	r1, #128	; 0x80
10008e72:	03c9      	lsls	r1, r1, #15
10008e74:	430a      	orrs	r2, r1
10008e76:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e78:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
10008e7a:	e126      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008e7c:	4b62      	ldr	r3, [pc, #392]	; (10009008 <system_peripheral_reset+0x390>)
10008e7e:	6859      	ldr	r1, [r3, #4]
10008e80:	4a71      	ldr	r2, [pc, #452]	; (10009048 <system_peripheral_reset+0x3d0>)
10008e82:	400a      	ands	r2, r1
10008e84:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008e86:	685a      	ldr	r2, [r3, #4]
10008e88:	2180      	movs	r1, #128	; 0x80
10008e8a:	0409      	lsls	r1, r1, #16
10008e8c:	430a      	orrs	r2, r1
10008e8e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e90:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
10008e92:	e11a      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008e94:	4b5c      	ldr	r3, [pc, #368]	; (10009008 <system_peripheral_reset+0x390>)
10008e96:	6859      	ldr	r1, [r3, #4]
10008e98:	4a6c      	ldr	r2, [pc, #432]	; (1000904c <system_peripheral_reset+0x3d4>)
10008e9a:	400a      	ands	r2, r1
10008e9c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008e9e:	685a      	ldr	r2, [r3, #4]
10008ea0:	2180      	movs	r1, #128	; 0x80
10008ea2:	0449      	lsls	r1, r1, #17
10008ea4:	430a      	orrs	r2, r1
10008ea6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ea8:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
10008eaa:	e10e      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008eac:	4b56      	ldr	r3, [pc, #344]	; (10009008 <system_peripheral_reset+0x390>)
10008eae:	6859      	ldr	r1, [r3, #4]
10008eb0:	4a67      	ldr	r2, [pc, #412]	; (10009050 <system_peripheral_reset+0x3d8>)
10008eb2:	400a      	ands	r2, r1
10008eb4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008eb6:	685a      	ldr	r2, [r3, #4]
10008eb8:	2180      	movs	r1, #128	; 0x80
10008eba:	0489      	lsls	r1, r1, #18
10008ebc:	430a      	orrs	r2, r1
10008ebe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ec0:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
10008ec2:	e102      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008ec4:	4b50      	ldr	r3, [pc, #320]	; (10009008 <system_peripheral_reset+0x390>)
10008ec6:	6859      	ldr	r1, [r3, #4]
10008ec8:	4a62      	ldr	r2, [pc, #392]	; (10009054 <system_peripheral_reset+0x3dc>)
10008eca:	400a      	ands	r2, r1
10008ecc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008ece:	685a      	ldr	r2, [r3, #4]
10008ed0:	2180      	movs	r1, #128	; 0x80
10008ed2:	04c9      	lsls	r1, r1, #19
10008ed4:	430a      	orrs	r2, r1
10008ed6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ed8:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
10008eda:	e0f6      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008edc:	4b4a      	ldr	r3, [pc, #296]	; (10009008 <system_peripheral_reset+0x390>)
10008ede:	6859      	ldr	r1, [r3, #4]
10008ee0:	4a5d      	ldr	r2, [pc, #372]	; (10009058 <system_peripheral_reset+0x3e0>)
10008ee2:	400a      	ands	r2, r1
10008ee4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008ee6:	685a      	ldr	r2, [r3, #4]
10008ee8:	2180      	movs	r1, #128	; 0x80
10008eea:	0509      	lsls	r1, r1, #20
10008eec:	430a      	orrs	r2, r1
10008eee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ef0:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
10008ef2:	e0ea      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008ef4:	4b44      	ldr	r3, [pc, #272]	; (10009008 <system_peripheral_reset+0x390>)
10008ef6:	6859      	ldr	r1, [r3, #4]
10008ef8:	4a58      	ldr	r2, [pc, #352]	; (1000905c <system_peripheral_reset+0x3e4>)
10008efa:	400a      	ands	r2, r1
10008efc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008efe:	685a      	ldr	r2, [r3, #4]
10008f00:	2180      	movs	r1, #128	; 0x80
10008f02:	0549      	lsls	r1, r1, #21
10008f04:	430a      	orrs	r2, r1
10008f06:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f08:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
10008f0a:	e0de      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008f0c:	4b3e      	ldr	r3, [pc, #248]	; (10009008 <system_peripheral_reset+0x390>)
10008f0e:	6859      	ldr	r1, [r3, #4]
10008f10:	4a53      	ldr	r2, [pc, #332]	; (10009060 <system_peripheral_reset+0x3e8>)
10008f12:	400a      	ands	r2, r1
10008f14:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008f16:	685a      	ldr	r2, [r3, #4]
10008f18:	2180      	movs	r1, #128	; 0x80
10008f1a:	0589      	lsls	r1, r1, #22
10008f1c:	430a      	orrs	r2, r1
10008f1e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f20:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
10008f22:	e0d2      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008f24:	4b38      	ldr	r3, [pc, #224]	; (10009008 <system_peripheral_reset+0x390>)
10008f26:	6859      	ldr	r1, [r3, #4]
10008f28:	4a4e      	ldr	r2, [pc, #312]	; (10009064 <system_peripheral_reset+0x3ec>)
10008f2a:	400a      	ands	r2, r1
10008f2c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008f2e:	685a      	ldr	r2, [r3, #4]
10008f30:	2180      	movs	r1, #128	; 0x80
10008f32:	05c9      	lsls	r1, r1, #23
10008f34:	430a      	orrs	r2, r1
10008f36:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f38:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
10008f3a:	e0c6      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008f3c:	4a32      	ldr	r2, [pc, #200]	; (10009008 <system_peripheral_reset+0x390>)
10008f3e:	6853      	ldr	r3, [r2, #4]
10008f40:	005b      	lsls	r3, r3, #1
10008f42:	085b      	lsrs	r3, r3, #1
10008f44:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008f46:	6853      	ldr	r3, [r2, #4]
10008f48:	2180      	movs	r1, #128	; 0x80
10008f4a:	0609      	lsls	r1, r1, #24
10008f4c:	430b      	orrs	r3, r1
10008f4e:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f50:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
10008f52:	e0ba      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008f54:	4b2c      	ldr	r3, [pc, #176]	; (10009008 <system_peripheral_reset+0x390>)
10008f56:	891a      	ldrh	r2, [r3, #8]
10008f58:	2101      	movs	r1, #1
10008f5a:	438a      	bics	r2, r1
10008f5c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008f5e:	8919      	ldrh	r1, [r3, #8]
10008f60:	2201      	movs	r2, #1
10008f62:	430a      	orrs	r2, r1
10008f64:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f66:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
10008f68:	e0af      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008f6a:	4b27      	ldr	r3, [pc, #156]	; (10009008 <system_peripheral_reset+0x390>)
10008f6c:	891a      	ldrh	r2, [r3, #8]
10008f6e:	2102      	movs	r1, #2
10008f70:	438a      	bics	r2, r1
10008f72:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008f74:	8919      	ldrh	r1, [r3, #8]
10008f76:	2202      	movs	r2, #2
10008f78:	430a      	orrs	r2, r1
10008f7a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f7c:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
10008f7e:	e0a4      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008f80:	4b21      	ldr	r3, [pc, #132]	; (10009008 <system_peripheral_reset+0x390>)
10008f82:	891a      	ldrh	r2, [r3, #8]
10008f84:	2104      	movs	r1, #4
10008f86:	438a      	bics	r2, r1
10008f88:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008f8a:	8919      	ldrh	r1, [r3, #8]
10008f8c:	2204      	movs	r2, #4
10008f8e:	430a      	orrs	r2, r1
10008f90:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f92:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
10008f94:	e099      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008f96:	4b1c      	ldr	r3, [pc, #112]	; (10009008 <system_peripheral_reset+0x390>)
10008f98:	891a      	ldrh	r2, [r3, #8]
10008f9a:	2108      	movs	r1, #8
10008f9c:	438a      	bics	r2, r1
10008f9e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008fa0:	8919      	ldrh	r1, [r3, #8]
10008fa2:	2208      	movs	r2, #8
10008fa4:	430a      	orrs	r2, r1
10008fa6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fa8:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
10008faa:	e08e      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008fac:	4b16      	ldr	r3, [pc, #88]	; (10009008 <system_peripheral_reset+0x390>)
10008fae:	891a      	ldrh	r2, [r3, #8]
10008fb0:	2110      	movs	r1, #16
10008fb2:	438a      	bics	r2, r1
10008fb4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008fb6:	8919      	ldrh	r1, [r3, #8]
10008fb8:	2210      	movs	r2, #16
10008fba:	430a      	orrs	r2, r1
10008fbc:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fbe:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
10008fc0:	e083      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008fc2:	4b11      	ldr	r3, [pc, #68]	; (10009008 <system_peripheral_reset+0x390>)
10008fc4:	891a      	ldrh	r2, [r3, #8]
10008fc6:	2120      	movs	r1, #32
10008fc8:	438a      	bics	r2, r1
10008fca:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008fcc:	8919      	ldrh	r1, [r3, #8]
10008fce:	2220      	movs	r2, #32
10008fd0:	430a      	orrs	r2, r1
10008fd2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fd4:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
10008fd6:	e078      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008fd8:	4b0b      	ldr	r3, [pc, #44]	; (10009008 <system_peripheral_reset+0x390>)
10008fda:	891a      	ldrh	r2, [r3, #8]
10008fdc:	2140      	movs	r1, #64	; 0x40
10008fde:	438a      	bics	r2, r1
10008fe0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008fe2:	8919      	ldrh	r1, [r3, #8]
10008fe4:	2240      	movs	r2, #64	; 0x40
10008fe6:	430a      	orrs	r2, r1
10008fe8:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fea:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
10008fec:	e06d      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008fee:	4b06      	ldr	r3, [pc, #24]	; (10009008 <system_peripheral_reset+0x390>)
10008ff0:	891a      	ldrh	r2, [r3, #8]
10008ff2:	2180      	movs	r1, #128	; 0x80
10008ff4:	438a      	bics	r2, r1
10008ff6:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008ff8:	8919      	ldrh	r1, [r3, #8]
10008ffa:	2280      	movs	r2, #128	; 0x80
10008ffc:	430a      	orrs	r2, r1
10008ffe:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009000:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
10009002:	e062      	b.n	100090ca <system_peripheral_reset+0x452>
10009004:	100122a4 	.word	0x100122a4
10009008:	4000b000 	.word	0x4000b000
1000900c:	fffffeff 	.word	0xfffffeff
10009010:	fffffdff 	.word	0xfffffdff
10009014:	fffffbff 	.word	0xfffffbff
10009018:	fffff7ff 	.word	0xfffff7ff
1000901c:	ffffefff 	.word	0xffffefff
10009020:	ffffdfff 	.word	0xffffdfff
10009024:	ffffbfff 	.word	0xffffbfff
10009028:	ffff7fff 	.word	0xffff7fff
1000902c:	fffeffff 	.word	0xfffeffff
10009030:	fffdffff 	.word	0xfffdffff
10009034:	fffbffff 	.word	0xfffbffff
10009038:	fff7ffff 	.word	0xfff7ffff
1000903c:	ffefffff 	.word	0xffefffff
10009040:	ffdfffff 	.word	0xffdfffff
10009044:	ffbfffff 	.word	0xffbfffff
10009048:	ff7fffff 	.word	0xff7fffff
1000904c:	feffffff 	.word	0xfeffffff
10009050:	fdffffff 	.word	0xfdffffff
10009054:	fbffffff 	.word	0xfbffffff
10009058:	f7ffffff 	.word	0xf7ffffff
1000905c:	efffffff 	.word	0xefffffff
10009060:	dfffffff 	.word	0xdfffffff
10009064:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009068:	4b18      	ldr	r3, [pc, #96]	; (100090cc <system_peripheral_reset+0x454>)
1000906a:	8919      	ldrh	r1, [r3, #8]
1000906c:	4a18      	ldr	r2, [pc, #96]	; (100090d0 <system_peripheral_reset+0x458>)
1000906e:	400a      	ands	r2, r1
10009070:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009072:	8919      	ldrh	r1, [r3, #8]
10009074:	2280      	movs	r2, #128	; 0x80
10009076:	0052      	lsls	r2, r2, #1
10009078:	430a      	orrs	r2, r1
1000907a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000907c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000907e:	e024      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009080:	4b12      	ldr	r3, [pc, #72]	; (100090cc <system_peripheral_reset+0x454>)
10009082:	8919      	ldrh	r1, [r3, #8]
10009084:	4a13      	ldr	r2, [pc, #76]	; (100090d4 <system_peripheral_reset+0x45c>)
10009086:	400a      	ands	r2, r1
10009088:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000908a:	8919      	ldrh	r1, [r3, #8]
1000908c:	2280      	movs	r2, #128	; 0x80
1000908e:	0092      	lsls	r2, r2, #2
10009090:	430a      	orrs	r2, r1
10009092:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009094:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
10009096:	e018      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009098:	4b0c      	ldr	r3, [pc, #48]	; (100090cc <system_peripheral_reset+0x454>)
1000909a:	8919      	ldrh	r1, [r3, #8]
1000909c:	4a0e      	ldr	r2, [pc, #56]	; (100090d8 <system_peripheral_reset+0x460>)
1000909e:	400a      	ands	r2, r1
100090a0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100090a2:	8919      	ldrh	r1, [r3, #8]
100090a4:	2280      	movs	r2, #128	; 0x80
100090a6:	00d2      	lsls	r2, r2, #3
100090a8:	430a      	orrs	r2, r1
100090aa:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090ac:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
100090ae:	e00c      	b.n	100090ca <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100090b0:	4b06      	ldr	r3, [pc, #24]	; (100090cc <system_peripheral_reset+0x454>)
100090b2:	8919      	ldrh	r1, [r3, #8]
100090b4:	4a09      	ldr	r2, [pc, #36]	; (100090dc <system_peripheral_reset+0x464>)
100090b6:	400a      	ands	r2, r1
100090b8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100090ba:	8919      	ldrh	r1, [r3, #8]
100090bc:	2280      	movs	r2, #128	; 0x80
100090be:	0112      	lsls	r2, r2, #4
100090c0:	430a      	orrs	r2, r1
100090c2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090c4:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
100090c6:	e000      	b.n	100090ca <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
100090c8:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
100090ca:	bd00      	pop	{pc}
100090cc:	4000b000 	.word	0x4000b000
100090d0:	fffffeff 	.word	0xfffffeff
100090d4:	fffffdff 	.word	0xfffffdff
100090d8:	fffffbff 	.word	0xfffffbff
100090dc:	fffff7ff 	.word	0xfffff7ff

100090e0 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
100090e0:	2380      	movs	r3, #128	; 0x80
100090e2:	04db      	lsls	r3, r3, #19
100090e4:	469c      	mov	ip, r3
100090e6:	4460      	add	r0, ip
100090e8:	0080      	lsls	r0, r0, #2
100090ea:	6001      	str	r1, [r0, #0]
}
100090ec:	4770      	bx	lr
100090ee:	46c0      	nop			; (mov r8, r8)

100090f0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
100090f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100090f2:	4647      	mov	r7, r8
100090f4:	b480      	push	{r7}
100090f6:	000c      	movs	r4, r1
100090f8:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
100090fa:	2800      	cmp	r0, #0
100090fc:	d10d      	bne.n	1000911a <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
100090fe:	2a00      	cmp	r2, #0
10009100:	dd0e      	ble.n	10009120 <_read+0x30>
10009102:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
10009104:	4e08      	ldr	r6, [pc, #32]	; (10009128 <_read+0x38>)
10009106:	4d09      	ldr	r5, [pc, #36]	; (1000912c <_read+0x3c>)
10009108:	6830      	ldr	r0, [r6, #0]
1000910a:	0021      	movs	r1, r4
1000910c:	682b      	ldr	r3, [r5, #0]
1000910e:	4798      	blx	r3
		ptr++;
10009110:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
10009112:	42a7      	cmp	r7, r4
10009114:	d1f8      	bne.n	10009108 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
10009116:	4640      	mov	r0, r8
10009118:	e003      	b.n	10009122 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000911a:	2001      	movs	r0, #1
1000911c:	4240      	negs	r0, r0
1000911e:	e000      	b.n	10009122 <_read+0x32>
	}

	for (; len > 0; --len) {
10009120:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
10009122:	bc04      	pop	{r2}
10009124:	4690      	mov	r8, r2
10009126:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009128:	100154ac 	.word	0x100154ac
1000912c:	100154a4 	.word	0x100154a4

10009130 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
10009130:	b5f0      	push	{r4, r5, r6, r7, lr}
10009132:	4647      	mov	r7, r8
10009134:	b480      	push	{r7}
10009136:	000e      	movs	r6, r1
10009138:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000913a:	3801      	subs	r0, #1
1000913c:	2802      	cmp	r0, #2
1000913e:	d811      	bhi.n	10009164 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
10009140:	2a00      	cmp	r2, #0
10009142:	d012      	beq.n	1000916a <_write+0x3a>
10009144:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
10009146:	4b0c      	ldr	r3, [pc, #48]	; (10009178 <_write+0x48>)
10009148:	4698      	mov	r8, r3
1000914a:	4f0c      	ldr	r7, [pc, #48]	; (1000917c <_write+0x4c>)
1000914c:	4643      	mov	r3, r8
1000914e:	6818      	ldr	r0, [r3, #0]
10009150:	5d31      	ldrb	r1, [r6, r4]
10009152:	683b      	ldr	r3, [r7, #0]
10009154:	4798      	blx	r3
10009156:	2800      	cmp	r0, #0
10009158:	db09      	blt.n	1000916e <_write+0x3e>
			return -1;
		}
		++nChars;
1000915a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000915c:	42a5      	cmp	r5, r4
1000915e:	d1f5      	bne.n	1000914c <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
10009160:	0020      	movs	r0, r4
10009162:	e006      	b.n	10009172 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
10009164:	2001      	movs	r0, #1
10009166:	4240      	negs	r0, r0
10009168:	e003      	b.n	10009172 <_write+0x42>
	}

	for (; len != 0; --len) {
1000916a:	2000      	movs	r0, #0
1000916c:	e001      	b.n	10009172 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000916e:	2001      	movs	r0, #1
10009170:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
10009172:	bc04      	pop	{r2}
10009174:	4690      	mov	r8, r2
10009176:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009178:	100154ac 	.word	0x100154ac
1000917c:	100154a8 	.word	0x100154a8

10009180 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
10009180:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
10009182:	4b0e      	ldr	r3, [pc, #56]	; (100091bc <uart_read_complete_callback+0x3c>)
10009184:	781b      	ldrb	r3, [r3, #0]
10009186:	2b01      	cmp	r3, #1
10009188:	d10b      	bne.n	100091a2 <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000918a:	2202      	movs	r2, #2
1000918c:	4b0b      	ldr	r3, [pc, #44]	; (100091bc <uart_read_complete_callback+0x3c>)
1000918e:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
10009190:	4b0b      	ldr	r3, [pc, #44]	; (100091c0 <uart_read_complete_callback+0x40>)
10009192:	681b      	ldr	r3, [r3, #0]
10009194:	2b00      	cmp	r3, #0
10009196:	d110      	bne.n	100091ba <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
10009198:	2102      	movs	r1, #2
1000919a:	480a      	ldr	r0, [pc, #40]	; (100091c4 <uart_read_complete_callback+0x44>)
1000919c:	4b0a      	ldr	r3, [pc, #40]	; (100091c8 <uart_read_complete_callback+0x48>)
1000919e:	4798      	blx	r3
100091a0:	e00b      	b.n	100091ba <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
100091a2:	4b07      	ldr	r3, [pc, #28]	; (100091c0 <uart_read_complete_callback+0x40>)
100091a4:	681b      	ldr	r3, [r3, #0]
100091a6:	2b00      	cmp	r3, #0
100091a8:	d007      	beq.n	100091ba <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
100091aa:	4c08      	ldr	r4, [pc, #32]	; (100091cc <uart_read_complete_callback+0x4c>)
100091ac:	7820      	ldrb	r0, [r4, #0]
100091ae:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
100091b0:	2201      	movs	r2, #1
100091b2:	0021      	movs	r1, r4
100091b4:	4803      	ldr	r0, [pc, #12]	; (100091c4 <uart_read_complete_callback+0x44>)
100091b6:	4b06      	ldr	r3, [pc, #24]	; (100091d0 <uart_read_complete_callback+0x50>)
100091b8:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
100091ba:	bd10      	pop	{r4, pc}
100091bc:	10013928 	.word	0x10013928
100091c0:	10013930 	.word	0x10013930
100091c4:	100154b0 	.word	0x100154b0
100091c8:	1000c759 	.word	0x1000c759
100091cc:	1001392c 	.word	0x1001392c
100091d0:	1000c6fd 	.word	0x1000c6fd

100091d4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
100091d4:	b570      	push	{r4, r5, r6, lr}
100091d6:	0006      	movs	r6, r0
100091d8:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
100091da:	4c03      	ldr	r4, [pc, #12]	; (100091e8 <usart_serial_getchar+0x14>)
100091dc:	0029      	movs	r1, r5
100091de:	0030      	movs	r0, r6
100091e0:	47a0      	blx	r4
100091e2:	2800      	cmp	r0, #0
100091e4:	d1fa      	bne.n	100091dc <usart_serial_getchar+0x8>
}
100091e6:	bd70      	pop	{r4, r5, r6, pc}
100091e8:	1000c6e9 	.word	0x1000c6e9

100091ec <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
100091ec:	b570      	push	{r4, r5, r6, lr}
100091ee:	0006      	movs	r6, r0
100091f0:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
100091f2:	4c03      	ldr	r4, [pc, #12]	; (10009200 <usart_serial_putchar+0x14>)
100091f4:	0029      	movs	r1, r5
100091f6:	0030      	movs	r0, r6
100091f8:	47a0      	blx	r4
100091fa:	2800      	cmp	r0, #0
100091fc:	d1fa      	bne.n	100091f4 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
100091fe:	bd70      	pop	{r4, r5, r6, pc}
10009200:	1000c6d9 	.word	0x1000c6d9

10009204 <serial_console_init>:

void serial_console_init(void)
{
10009204:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
10009206:	2100      	movs	r1, #0
10009208:	2000      	movs	r0, #0
1000920a:	4b19      	ldr	r3, [pc, #100]	; (10009270 <serial_console_init+0x6c>)
1000920c:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000920e:	4c19      	ldr	r4, [pc, #100]	; (10009274 <serial_console_init+0x70>)
10009210:	0020      	movs	r0, r4
10009212:	4b19      	ldr	r3, [pc, #100]	; (10009278 <serial_console_init+0x74>)
10009214:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
10009216:	23e1      	movs	r3, #225	; 0xe1
10009218:	025b      	lsls	r3, r3, #9
1000921a:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000921c:	2302      	movs	r3, #2
1000921e:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
10009220:	2203      	movs	r2, #3
10009222:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
10009224:	3201      	adds	r2, #1
10009226:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
10009228:	3201      	adds	r2, #1
1000922a:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000922c:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000922e:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
10009230:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
10009232:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
10009234:	4d11      	ldr	r5, [pc, #68]	; (1000927c <serial_console_init+0x78>)
10009236:	4b12      	ldr	r3, [pc, #72]	; (10009280 <serial_console_init+0x7c>)
10009238:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000923a:	4a12      	ldr	r2, [pc, #72]	; (10009284 <serial_console_init+0x80>)
1000923c:	4b12      	ldr	r3, [pc, #72]	; (10009288 <serial_console_init+0x84>)
1000923e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
10009240:	4a12      	ldr	r2, [pc, #72]	; (1000928c <serial_console_init+0x88>)
10009242:	4b13      	ldr	r3, [pc, #76]	; (10009290 <serial_console_init+0x8c>)
10009244:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
10009246:	0022      	movs	r2, r4
10009248:	4912      	ldr	r1, [pc, #72]	; (10009294 <serial_console_init+0x90>)
1000924a:	0028      	movs	r0, r5
1000924c:	4b12      	ldr	r3, [pc, #72]	; (10009298 <serial_console_init+0x94>)
1000924e:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
10009250:	4e12      	ldr	r6, [pc, #72]	; (1000929c <serial_console_init+0x98>)
10009252:	6833      	ldr	r3, [r6, #0]
10009254:	6898      	ldr	r0, [r3, #8]
10009256:	2100      	movs	r1, #0
10009258:	4c11      	ldr	r4, [pc, #68]	; (100092a0 <serial_console_init+0x9c>)
1000925a:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000925c:	6833      	ldr	r3, [r6, #0]
1000925e:	6858      	ldr	r0, [r3, #4]
10009260:	2100      	movs	r1, #0
10009262:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
10009264:	2202      	movs	r2, #2
10009266:	490f      	ldr	r1, [pc, #60]	; (100092a4 <serial_console_init+0xa0>)
10009268:	0028      	movs	r0, r5
1000926a:	4b0f      	ldr	r3, [pc, #60]	; (100092a8 <serial_console_init+0xa4>)
1000926c:	4798      	blx	r3
}
1000926e:	bd70      	pop	{r4, r5, r6, pc}
10009270:	1000888d 	.word	0x1000888d
10009274:	100154d4 	.word	0x100154d4
10009278:	1000c4f1 	.word	0x1000c4f1
1000927c:	100154b0 	.word	0x100154b0
10009280:	100154ac 	.word	0x100154ac
10009284:	100091ed 	.word	0x100091ed
10009288:	100154a8 	.word	0x100154a8
1000928c:	100091d5 	.word	0x100091d5
10009290:	100154a4 	.word	0x100154a4
10009294:	40004000 	.word	0x40004000
10009298:	1000c51d 	.word	0x1000c51d
1000929c:	10013904 	.word	0x10013904
100092a0:	10011175 	.word	0x10011175
100092a4:	10009181 	.word	0x10009181
100092a8:	1000c725 	.word	0x1000c725

100092ac <_time_start>:

void _time_start(unsigned int sec)
{
100092ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100092ae:	b083      	sub	sp, #12
100092b0:	0005      	movs	r5, r0
	system_clock_get_value();
100092b2:	4c0d      	ldr	r4, [pc, #52]	; (100092e8 <_time_start+0x3c>)
100092b4:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
100092b6:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
100092b8:	4f0c      	ldr	r7, [pc, #48]	; (100092ec <_time_start+0x40>)
100092ba:	47b8      	blx	r7
100092bc:	4e0c      	ldr	r6, [pc, #48]	; (100092f0 <_time_start+0x44>)
100092be:	4a0d      	ldr	r2, [pc, #52]	; (100092f4 <_time_start+0x48>)
100092c0:	4b0d      	ldr	r3, [pc, #52]	; (100092f8 <_time_start+0x4c>)
100092c2:	47b0      	blx	r6
100092c4:	9000      	str	r0, [sp, #0]
100092c6:	9101      	str	r1, [sp, #4]
100092c8:	20fa      	movs	r0, #250	; 0xfa
100092ca:	0080      	lsls	r0, r0, #2
100092cc:	4368      	muls	r0, r5
100092ce:	47b8      	blx	r7
100092d0:	0002      	movs	r2, r0
100092d2:	000b      	movs	r3, r1
100092d4:	9800      	ldr	r0, [sp, #0]
100092d6:	9901      	ldr	r1, [sp, #4]
100092d8:	47b0      	blx	r6
100092da:	4b08      	ldr	r3, [pc, #32]	; (100092fc <_time_start+0x50>)
100092dc:	4798      	blx	r3
100092de:	4b08      	ldr	r3, [pc, #32]	; (10009300 <_time_start+0x54>)
100092e0:	6018      	str	r0, [r3, #0]
}
100092e2:	b003      	add	sp, #12
100092e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100092e6:	46c0      	nop			; (mov r8, r8)
100092e8:	10008911 	.word	0x10008911
100092ec:	10010bf9 	.word	0x10010bf9
100092f0:	1000fff1 	.word	0x1000fff1
100092f4:	19feaec7 	.word	0x19feaec7
100092f8:	3f09d8ef 	.word	0x3f09d8ef
100092fc:	1000ffb5 	.word	0x1000ffb5
10009300:	10013924 	.word	0x10013924

10009304 <_time_done>:

unsigned int _time_done()
{
	return --tick;
10009304:	4b02      	ldr	r3, [pc, #8]	; (10009310 <_time_done+0xc>)
10009306:	681a      	ldr	r2, [r3, #0]
10009308:	1e50      	subs	r0, r2, #1
1000930a:	6018      	str	r0, [r3, #0]
}
1000930c:	4770      	bx	lr
1000930e:	46c0      	nop			; (mov r8, r8)
10009310:	10013924 	.word	0x10013924

10009314 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
10009314:	b570      	push	{r4, r5, r6, lr}
10009316:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
10009318:	2201      	movs	r2, #1
1000931a:	4b11      	ldr	r3, [pc, #68]	; (10009360 <getchar_b11_timeout+0x4c>)
1000931c:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000931e:	4b11      	ldr	r3, [pc, #68]	; (10009364 <getchar_b11_timeout+0x50>)
10009320:	681b      	ldr	r3, [r3, #0]
10009322:	2b00      	cmp	r3, #0
10009324:	d103      	bne.n	1000932e <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
10009326:	2102      	movs	r1, #2
10009328:	480f      	ldr	r0, [pc, #60]	; (10009368 <getchar_b11_timeout+0x54>)
1000932a:	4b10      	ldr	r3, [pc, #64]	; (1000936c <getchar_b11_timeout+0x58>)
1000932c:	4798      	blx	r3

	_time_start(sec);
1000932e:	0020      	movs	r0, r4
10009330:	4b0f      	ldr	r3, [pc, #60]	; (10009370 <getchar_b11_timeout+0x5c>)
10009332:	4798      	blx	r3
	
	string_input[0] = 0;
10009334:	490f      	ldr	r1, [pc, #60]	; (10009374 <getchar_b11_timeout+0x60>)
10009336:	2300      	movs	r3, #0
10009338:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000933a:	2201      	movs	r2, #1
1000933c:	480a      	ldr	r0, [pc, #40]	; (10009368 <getchar_b11_timeout+0x54>)
1000933e:	4b0e      	ldr	r3, [pc, #56]	; (10009378 <getchar_b11_timeout+0x64>)
10009340:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
10009342:	4c07      	ldr	r4, [pc, #28]	; (10009360 <getchar_b11_timeout+0x4c>)
10009344:	4d0d      	ldr	r5, [pc, #52]	; (1000937c <getchar_b11_timeout+0x68>)
10009346:	7823      	ldrb	r3, [r4, #0]
10009348:	2b02      	cmp	r3, #2
1000934a:	d002      	beq.n	10009352 <getchar_b11_timeout+0x3e>
1000934c:	47a8      	blx	r5
1000934e:	2800      	cmp	r0, #0
10009350:	d1f9      	bne.n	10009346 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
10009352:	2200      	movs	r2, #0
10009354:	4b02      	ldr	r3, [pc, #8]	; (10009360 <getchar_b11_timeout+0x4c>)
10009356:	701a      	strb	r2, [r3, #0]

	return string_input[0];
10009358:	4b06      	ldr	r3, [pc, #24]	; (10009374 <getchar_b11_timeout+0x60>)
1000935a:	7818      	ldrb	r0, [r3, #0]
}
1000935c:	bd70      	pop	{r4, r5, r6, pc}
1000935e:	46c0      	nop			; (mov r8, r8)
10009360:	10013928 	.word	0x10013928
10009364:	10013930 	.word	0x10013930
10009368:	100154b0 	.word	0x100154b0
1000936c:	1000c739 	.word	0x1000c739
10009370:	100092ad 	.word	0x100092ad
10009374:	1001392c 	.word	0x1001392c
10009378:	1000c6fd 	.word	0x1000c6fd
1000937c:	10009305 	.word	0x10009305

10009380 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
10009380:	4b02      	ldr	r3, [pc, #8]	; (1000938c <platform_event_free+0xc>)
10009382:	681a      	ldr	r2, [r3, #0]
10009384:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
10009386:	6018      	str	r0, [r3, #0]
}
10009388:	4770      	bx	lr
1000938a:	46c0      	nop			; (mov r8, r8)
1000938c:	10013938 	.word	0x10013938

10009390 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
10009390:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
10009392:	4b0b      	ldr	r3, [pc, #44]	; (100093c0 <platform_event_post+0x30>)
10009394:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
10009396:	2c00      	cmp	r4, #0
10009398:	d011      	beq.n	100093be <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000939a:	6825      	ldr	r5, [r4, #0]
1000939c:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000939e:	2300      	movs	r3, #0
100093a0:	6023      	str	r3, [r4, #0]
		evt->data = data;
100093a2:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
100093a4:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
100093a6:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
100093a8:	4b06      	ldr	r3, [pc, #24]	; (100093c4 <platform_event_post+0x34>)
100093aa:	681a      	ldr	r2, [r3, #0]
100093ac:	2a00      	cmp	r2, #0
100093ae:	d102      	bne.n	100093b6 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
100093b0:	601c      	str	r4, [r3, #0]
100093b2:	e004      	b.n	100093be <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
100093b4:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
100093b6:	6813      	ldr	r3, [r2, #0]
100093b8:	2b00      	cmp	r3, #0
100093ba:	d1fb      	bne.n	100093b4 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
100093bc:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
100093be:	bd30      	pop	{r4, r5, pc}
100093c0:	10013938 	.word	0x10013938
100093c4:	10013934 	.word	0x10013934

100093c8 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
100093c8:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
100093ca:	2300      	movs	r3, #0
100093cc:	4a06      	ldr	r2, [pc, #24]	; (100093e8 <platform_event_init+0x20>)
100093ce:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
100093d0:	4a06      	ldr	r2, [pc, #24]	; (100093ec <platform_event_init+0x24>)
100093d2:	6013      	str	r3, [r2, #0]
100093d4:	4c06      	ldr	r4, [pc, #24]	; (100093f0 <platform_event_init+0x28>)
100093d6:	0026      	movs	r6, r4
100093d8:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
100093da:	4d06      	ldr	r5, [pc, #24]	; (100093f4 <platform_event_init+0x2c>)
100093dc:	0020      	movs	r0, r4
100093de:	47a8      	blx	r5
100093e0:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
100093e2:	42b4      	cmp	r4, r6
100093e4:	d1fa      	bne.n	100093dc <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
100093e6:	bd70      	pop	{r4, r5, r6, pc}
100093e8:	10013938 	.word	0x10013938
100093ec:	10013934 	.word	0x10013934
100093f0:	1001393c 	.word	0x1001393c
100093f4:	10009381 	.word	0x10009381

100093f8 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
100093f8:	b570      	push	{r4, r5, r6, lr}
100093fa:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
100093fc:	4b13      	ldr	r3, [pc, #76]	; (1000944c <at_ke_msg_send+0x54>)
100093fe:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
10009400:	4b13      	ldr	r3, [pc, #76]	; (10009450 <at_ke_msg_send+0x58>)
10009402:	681b      	ldr	r3, [r3, #0]
10009404:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
10009406:	2c0c      	cmp	r4, #12
10009408:	d01f      	beq.n	1000944a <at_ke_msg_send+0x52>
1000940a:	3c0c      	subs	r4, #12
1000940c:	88e3      	ldrh	r3, [r4, #6]
1000940e:	2b05      	cmp	r3, #5
10009410:	d01b      	beq.n	1000944a <at_ke_msg_send+0x52>
		if(osc_en == 0)
10009412:	07eb      	lsls	r3, r5, #31
10009414:	d414      	bmi.n	10009440 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
10009416:	4b0f      	ldr	r3, [pc, #60]	; (10009454 <at_ke_msg_send+0x5c>)
10009418:	681b      	ldr	r3, [r3, #0]
1000941a:	2002      	movs	r0, #2
1000941c:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000941e:	4b0e      	ldr	r3, [pc, #56]	; (10009458 <at_ke_msg_send+0x60>)
10009420:	681b      	ldr	r3, [r3, #0]
10009422:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
10009424:	4c0d      	ldr	r4, [pc, #52]	; (1000945c <at_ke_msg_send+0x64>)
10009426:	2003      	movs	r0, #3
10009428:	6823      	ldr	r3, [r4, #0]
1000942a:	4798      	blx	r3
1000942c:	2800      	cmp	r0, #0
1000942e:	d1fa      	bne.n	10009426 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
10009430:	4b0b      	ldr	r3, [pc, #44]	; (10009460 <at_ke_msg_send+0x68>)
10009432:	681b      	ldr	r3, [r3, #0]
10009434:	3002      	adds	r0, #2
10009436:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
10009438:	2201      	movs	r2, #1
1000943a:	4b0a      	ldr	r3, [pc, #40]	; (10009464 <at_ke_msg_send+0x6c>)
1000943c:	601a      	str	r2, [r3, #0]
1000943e:	e004      	b.n	1000944a <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
10009440:	4b09      	ldr	r3, [pc, #36]	; (10009468 <at_ke_msg_send+0x70>)
10009442:	6818      	ldr	r0, [r3, #0]
10009444:	4b09      	ldr	r3, [pc, #36]	; (1000946c <at_ke_msg_send+0x74>)
10009446:	681b      	ldr	r3, [r3, #0]
10009448:	4798      	blx	r3
		}
	}
}
1000944a:	bd70      	pop	{r4, r5, r6, pc}
1000944c:	4000b1ec 	.word	0x4000b1ec
10009450:	100139e4 	.word	0x100139e4
10009454:	100139dc 	.word	0x100139dc
10009458:	100139ec 	.word	0x100139ec
1000945c:	100139c8 	.word	0x100139c8
10009460:	100139d0 	.word	0x100139d0
10009464:	4000b020 	.word	0x4000b020
10009468:	100139d4 	.word	0x100139d4
1000946c:	100139c4 	.word	0x100139c4

10009470 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
10009470:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
10009472:	4b06      	ldr	r3, [pc, #24]	; (1000948c <samb11_plf_resume_callback+0x1c>)
10009474:	4a06      	ldr	r2, [pc, #24]	; (10009490 <samb11_plf_resume_callback+0x20>)
10009476:	6819      	ldr	r1, [r3, #0]
10009478:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000947a:	685a      	ldr	r2, [r3, #4]
1000947c:	4b05      	ldr	r3, [pc, #20]	; (10009494 <samb11_plf_resume_callback+0x24>)
1000947e:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
10009480:	4b05      	ldr	r3, [pc, #20]	; (10009498 <samb11_plf_resume_callback+0x28>)
10009482:	681b      	ldr	r3, [r3, #0]
10009484:	2b00      	cmp	r3, #0
10009486:	d000      	beq.n	1000948a <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
10009488:	4798      	blx	r3
	}
}
1000948a:	bd10      	pop	{r4, pc}
1000948c:	100154fc 	.word	0x100154fc
10009490:	4000b00c 	.word	0x4000b00c
10009494:	4000b010 	.word	0x4000b010
10009498:	100157d8 	.word	0x100157d8

1000949c <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000949c:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000949e:	2232      	movs	r2, #50	; 0x32
100094a0:	2100      	movs	r1, #0
100094a2:	480d      	ldr	r0, [pc, #52]	; (100094d8 <init_port_list+0x3c>)
100094a4:	4b0d      	ldr	r3, [pc, #52]	; (100094dc <init_port_list+0x40>)
100094a6:	4798      	blx	r3
100094a8:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
100094aa:	480b      	ldr	r0, [pc, #44]	; (100094d8 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
100094ac:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
100094ae:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
100094b0:	004a      	lsls	r2, r1, #1
100094b2:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
100094b4:	1882      	adds	r2, r0, r2
100094b6:	7853      	ldrb	r3, [r2, #1]
100094b8:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
100094ba:	b2db      	uxtb	r3, r3
100094bc:	43a3      	bics	r3, r4
100094be:	7053      	strb	r3, [r2, #1]
100094c0:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
100094c2:	2919      	cmp	r1, #25
100094c4:	d1f4      	bne.n	100094b0 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
100094c6:	4b04      	ldr	r3, [pc, #16]	; (100094d8 <init_port_list+0x3c>)
100094c8:	785a      	ldrb	r2, [r3, #1]
100094ca:	3918      	subs	r1, #24
100094cc:	438a      	bics	r2, r1
100094ce:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
100094d0:	78da      	ldrb	r2, [r3, #3]
100094d2:	438a      	bics	r2, r1
100094d4:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
100094d6:	bd70      	pop	{r4, r5, r6, pc}
100094d8:	10015518 	.word	0x10015518
100094dc:	10010fb9 	.word	0x10010fb9

100094e0 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
100094e0:	4a06      	ldr	r2, [pc, #24]	; (100094fc <init_clock+0x1c>)
100094e2:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
100094e4:	4b06      	ldr	r3, [pc, #24]	; (10009500 <init_clock+0x20>)
100094e6:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
100094e8:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
100094ea:	4a06      	ldr	r2, [pc, #24]	; (10009504 <init_clock+0x24>)
100094ec:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
100094ee:	4906      	ldr	r1, [pc, #24]	; (10009508 <init_clock+0x28>)
100094f0:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
100094f2:	4b06      	ldr	r3, [pc, #24]	; (1000950c <init_clock+0x2c>)
100094f4:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
100094f6:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
100094f8:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
100094fa:	4770      	bx	lr
100094fc:	4000b00c 	.word	0x4000b00c
10009500:	fffe0fd3 	.word	0xfffe0fd3
10009504:	100154fc 	.word	0x100154fc
10009508:	4000b010 	.word	0x4000b010
1000950c:	ffffe7c0 	.word	0xffffe7c0

10009510 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
10009510:	b5f0      	push	{r4, r5, r6, r7, lr}
10009512:	4657      	mov	r7, sl
10009514:	464e      	mov	r6, r9
10009516:	4645      	mov	r5, r8
10009518:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000951a:	4b4f      	ldr	r3, [pc, #316]	; (10009658 <platform_driver_init+0x148>)
1000951c:	781b      	ldrb	r3, [r3, #0]
1000951e:	2b00      	cmp	r3, #0
10009520:	d004      	beq.n	1000952c <platform_driver_init+0x1c>
10009522:	4b4d      	ldr	r3, [pc, #308]	; (10009658 <platform_driver_init+0x148>)
10009524:	781b      	ldrb	r3, [r3, #0]
10009526:	2b01      	cmp	r3, #1
10009528:	d100      	bne.n	1000952c <platform_driver_init+0x1c>
1000952a:	e08c      	b.n	10009646 <platform_driver_init+0x136>
		init_port_list();
1000952c:	4b4b      	ldr	r3, [pc, #300]	; (1000965c <platform_driver_init+0x14c>)
1000952e:	4798      	blx	r3
		init_clock();
10009530:	4b4b      	ldr	r3, [pc, #300]	; (10009660 <platform_driver_init+0x150>)
10009532:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
10009534:	2300      	movs	r3, #0
10009536:	4698      	mov	r8, r3
10009538:	4b4a      	ldr	r3, [pc, #296]	; (10009664 <platform_driver_init+0x154>)
1000953a:	4642      	mov	r2, r8
1000953c:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000953e:	4c4a      	ldr	r4, [pc, #296]	; (10009668 <platform_driver_init+0x158>)
10009540:	2380      	movs	r3, #128	; 0x80
10009542:	2280      	movs	r2, #128	; 0x80
10009544:	0412      	lsls	r2, r2, #16
10009546:	4692      	mov	sl, r2
10009548:	50e2      	str	r2, [r4, r3]
1000954a:	2280      	movs	r2, #128	; 0x80
1000954c:	0452      	lsls	r2, r2, #17
1000954e:	4691      	mov	r9, r2
10009550:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
10009552:	4d46      	ldr	r5, [pc, #280]	; (1000966c <platform_driver_init+0x15c>)
10009554:	4b46      	ldr	r3, [pc, #280]	; (10009670 <platform_driver_init+0x160>)
10009556:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
10009558:	4b46      	ldr	r3, [pc, #280]	; (10009674 <platform_driver_init+0x164>)
1000955a:	4a47      	ldr	r2, [pc, #284]	; (10009678 <platform_driver_init+0x168>)
1000955c:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000955e:	4947      	ldr	r1, [pc, #284]	; (1000967c <platform_driver_init+0x16c>)
10009560:	4a47      	ldr	r2, [pc, #284]	; (10009680 <platform_driver_init+0x170>)
10009562:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
10009564:	4a47      	ldr	r2, [pc, #284]	; (10009684 <platform_driver_init+0x174>)
10009566:	6811      	ldr	r1, [r2, #0]
10009568:	4a47      	ldr	r2, [pc, #284]	; (10009688 <platform_driver_init+0x178>)
1000956a:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000956c:	4a47      	ldr	r2, [pc, #284]	; (1000968c <platform_driver_init+0x17c>)
1000956e:	6811      	ldr	r1, [r2, #0]
10009570:	4a47      	ldr	r2, [pc, #284]	; (10009690 <platform_driver_init+0x180>)
10009572:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
10009574:	4947      	ldr	r1, [pc, #284]	; (10009694 <platform_driver_init+0x184>)
10009576:	4a48      	ldr	r2, [pc, #288]	; (10009698 <platform_driver_init+0x188>)
10009578:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000957a:	4948      	ldr	r1, [pc, #288]	; (1000969c <platform_driver_init+0x18c>)
1000957c:	4a48      	ldr	r2, [pc, #288]	; (100096a0 <platform_driver_init+0x190>)
1000957e:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
10009580:	4f48      	ldr	r7, [pc, #288]	; (100096a4 <platform_driver_init+0x194>)
10009582:	4a49      	ldr	r2, [pc, #292]	; (100096a8 <platform_driver_init+0x198>)
10009584:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
10009586:	4949      	ldr	r1, [pc, #292]	; (100096ac <platform_driver_init+0x19c>)
10009588:	4a49      	ldr	r2, [pc, #292]	; (100096b0 <platform_driver_init+0x1a0>)
1000958a:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000958c:	4949      	ldr	r1, [pc, #292]	; (100096b4 <platform_driver_init+0x1a4>)
1000958e:	4a4a      	ldr	r2, [pc, #296]	; (100096b8 <platform_driver_init+0x1a8>)
10009590:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
10009592:	4e4a      	ldr	r6, [pc, #296]	; (100096bc <platform_driver_init+0x1ac>)
10009594:	4a4a      	ldr	r2, [pc, #296]	; (100096c0 <platform_driver_init+0x1b0>)
10009596:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
10009598:	494a      	ldr	r1, [pc, #296]	; (100096c4 <platform_driver_init+0x1b4>)
1000959a:	4a4b      	ldr	r2, [pc, #300]	; (100096c8 <platform_driver_init+0x1b8>)
1000959c:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000959e:	494b      	ldr	r1, [pc, #300]	; (100096cc <platform_driver_init+0x1bc>)
100095a0:	4a4b      	ldr	r2, [pc, #300]	; (100096d0 <platform_driver_init+0x1c0>)
100095a2:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
100095a4:	494b      	ldr	r1, [pc, #300]	; (100096d4 <platform_driver_init+0x1c4>)
100095a6:	4a4c      	ldr	r2, [pc, #304]	; (100096d8 <platform_driver_init+0x1c8>)
100095a8:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
100095aa:	494c      	ldr	r1, [pc, #304]	; (100096dc <platform_driver_init+0x1cc>)
100095ac:	4a4c      	ldr	r2, [pc, #304]	; (100096e0 <platform_driver_init+0x1d0>)
100095ae:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
100095b0:	494c      	ldr	r1, [pc, #304]	; (100096e4 <platform_driver_init+0x1d4>)
100095b2:	4a4d      	ldr	r2, [pc, #308]	; (100096e8 <platform_driver_init+0x1d8>)
100095b4:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
100095b6:	2028      	movs	r0, #40	; 0x28
100095b8:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
100095ba:	494c      	ldr	r1, [pc, #304]	; (100096ec <platform_driver_init+0x1dc>)
100095bc:	2028      	movs	r0, #40	; 0x28
100095be:	682b      	ldr	r3, [r5, #0]
100095c0:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
100095c2:	682b      	ldr	r3, [r5, #0]
100095c4:	494a      	ldr	r1, [pc, #296]	; (100096f0 <platform_driver_init+0x1e0>)
100095c6:	2027      	movs	r0, #39	; 0x27
100095c8:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
100095ca:	4b4a      	ldr	r3, [pc, #296]	; (100096f4 <platform_driver_init+0x1e4>)
100095cc:	681a      	ldr	r2, [r3, #0]
100095ce:	4b4a      	ldr	r3, [pc, #296]	; (100096f8 <platform_driver_init+0x1e8>)
100095d0:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
100095d2:	4a4a      	ldr	r2, [pc, #296]	; (100096fc <platform_driver_init+0x1ec>)
100095d4:	4b4a      	ldr	r3, [pc, #296]	; (10009700 <platform_driver_init+0x1f0>)
100095d6:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
100095d8:	4a4a      	ldr	r2, [pc, #296]	; (10009704 <platform_driver_init+0x1f4>)
100095da:	4b4b      	ldr	r3, [pc, #300]	; (10009708 <platform_driver_init+0x1f8>)
100095dc:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
100095de:	4a4b      	ldr	r2, [pc, #300]	; (1000970c <platform_driver_init+0x1fc>)
100095e0:	4b4b      	ldr	r3, [pc, #300]	; (10009710 <platform_driver_init+0x200>)
100095e2:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
100095e4:	4a4b      	ldr	r2, [pc, #300]	; (10009714 <platform_driver_init+0x204>)
100095e6:	4b4c      	ldr	r3, [pc, #304]	; (10009718 <platform_driver_init+0x208>)
100095e8:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
100095ea:	4a4c      	ldr	r2, [pc, #304]	; (1000971c <platform_driver_init+0x20c>)
100095ec:	4b4c      	ldr	r3, [pc, #304]	; (10009720 <platform_driver_init+0x210>)
100095ee:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
100095f0:	4a4c      	ldr	r2, [pc, #304]	; (10009724 <platform_driver_init+0x214>)
100095f2:	4b4d      	ldr	r3, [pc, #308]	; (10009728 <platform_driver_init+0x218>)
100095f4:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
100095f6:	4a4d      	ldr	r2, [pc, #308]	; (1000972c <platform_driver_init+0x21c>)
100095f8:	4b4d      	ldr	r3, [pc, #308]	; (10009730 <platform_driver_init+0x220>)
100095fa:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
100095fc:	22a0      	movs	r2, #160	; 0xa0
100095fe:	0092      	lsls	r2, r2, #2
10009600:	2100      	movs	r1, #0
10009602:	484c      	ldr	r0, [pc, #304]	; (10009734 <platform_driver_init+0x224>)
10009604:	4b4c      	ldr	r3, [pc, #304]	; (10009738 <platform_driver_init+0x228>)
10009606:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
10009608:	2280      	movs	r2, #128	; 0x80
1000960a:	0092      	lsls	r2, r2, #2
1000960c:	4b4b      	ldr	r3, [pc, #300]	; (1000973c <platform_driver_init+0x22c>)
1000960e:	801a      	strh	r2, [r3, #0]
		platform_event_init();
10009610:	4b4b      	ldr	r3, [pc, #300]	; (10009740 <platform_driver_init+0x230>)
10009612:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009614:	4653      	mov	r3, sl
10009616:	6023      	str	r3, [r4, #0]
10009618:	464b      	mov	r3, r9
1000961a:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000961c:	4b49      	ldr	r3, [pc, #292]	; (10009744 <platform_driver_init+0x234>)
1000961e:	4642      	mov	r2, r8
10009620:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
10009622:	683b      	ldr	r3, [r7, #0]
10009624:	4a48      	ldr	r2, [pc, #288]	; (10009748 <platform_driver_init+0x238>)
10009626:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
10009628:	6833      	ldr	r3, [r6, #0]
1000962a:	4a48      	ldr	r2, [pc, #288]	; (1000974c <platform_driver_init+0x23c>)
1000962c:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000962e:	2000      	movs	r0, #0
10009630:	4c47      	ldr	r4, [pc, #284]	; (10009750 <platform_driver_init+0x240>)
10009632:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
10009634:	2001      	movs	r0, #1
10009636:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
10009638:	2002      	movs	r0, #2
1000963a:	47a0      	blx	r4
		platform_initialized = 1;
1000963c:	2201      	movs	r2, #1
1000963e:	4b06      	ldr	r3, [pc, #24]	; (10009658 <platform_driver_init+0x148>)
10009640:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
10009642:	2000      	movs	r0, #0
10009644:	e003      	b.n	1000964e <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
10009646:	2201      	movs	r2, #1
10009648:	4b03      	ldr	r3, [pc, #12]	; (10009658 <platform_driver_init+0x148>)
1000964a:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000964c:	2001      	movs	r0, #1
	}
	return status;
}
1000964e:	bc1c      	pop	{r2, r3, r4}
10009650:	4690      	mov	r8, r2
10009652:	4699      	mov	r9, r3
10009654:	46a2      	mov	sl, r4
10009656:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009658:	100139cc 	.word	0x100139cc
1000965c:	1000949d 	.word	0x1000949d
10009660:	100094e1 	.word	0x100094e1
10009664:	100139e8 	.word	0x100139e8
10009668:	e000e100 	.word	0xe000e100
1000966c:	100157cc 	.word	0x100157cc
10009670:	000007d7 	.word	0x000007d7
10009674:	000007bd 	.word	0x000007bd
10009678:	10015508 	.word	0x10015508
1000967c:	0001bc51 	.word	0x0001bc51
10009680:	100157d0 	.word	0x100157d0
10009684:	100400bc 	.word	0x100400bc
10009688:	100139c0 	.word	0x100139c0
1000968c:	100400b8 	.word	0x100400b8
10009690:	100139bc 	.word	0x100139bc
10009694:	0001b99f 	.word	0x0001b99f
10009698:	10015504 	.word	0x10015504
1000969c:	0001b9db 	.word	0x0001b9db
100096a0:	10015510 	.word	0x10015510
100096a4:	100157e0 	.word	0x100157e0
100096a8:	1004003c 	.word	0x1004003c
100096ac:	10041fc0 	.word	0x10041fc0
100096b0:	10015514 	.word	0x10015514
100096b4:	10041fc4 	.word	0x10041fc4
100096b8:	100157dc 	.word	0x100157dc
100096bc:	100157d4 	.word	0x100157d4
100096c0:	10041fd4 	.word	0x10041fd4
100096c4:	10041fd8 	.word	0x10041fd8
100096c8:	1001550c 	.word	0x1001550c
100096cc:	0001cbe9 	.word	0x0001cbe9
100096d0:	100139dc 	.word	0x100139dc
100096d4:	0001cd8f 	.word	0x0001cd8f
100096d8:	100139d0 	.word	0x100139d0
100096dc:	0001cea3 	.word	0x0001cea3
100096e0:	100139ec 	.word	0x100139ec
100096e4:	0001cbcf 	.word	0x0001cbcf
100096e8:	100139c8 	.word	0x100139c8
100096ec:	10009b99 	.word	0x10009b99
100096f0:	10009b2d 	.word	0x10009b2d
100096f4:	100400e4 	.word	0x100400e4
100096f8:	100139e4 	.word	0x100139e4
100096fc:	00019fe9 	.word	0x00019fe9
10009700:	100139f4 	.word	0x100139f4
10009704:	0001dbdd 	.word	0x0001dbdd
10009708:	100139c4 	.word	0x100139c4
1000970c:	0001dc5b 	.word	0x0001dc5b
10009710:	100139d8 	.word	0x100139d8
10009714:	100405ec 	.word	0x100405ec
10009718:	100139d4 	.word	0x100139d4
1000971c:	0001d5e3 	.word	0x0001d5e3
10009720:	100139e0 	.word	0x100139e0
10009724:	10040c20 	.word	0x10040c20
10009728:	100139f8 	.word	0x100139f8
1000972c:	00019f09 	.word	0x00019f09
10009730:	100139b8 	.word	0x100139b8
10009734:	1001554c 	.word	0x1001554c
10009738:	10010fb9 	.word	0x10010fb9
1000973c:	100157e4 	.word	0x100157e4
10009740:	100093c9 	.word	0x100093c9
10009744:	100157d8 	.word	0x100157d8
10009748:	10009471 	.word	0x10009471
1000974c:	10009bf5 	.word	0x10009bf5
10009750:	10009bdd 	.word	0x10009bdd

10009754 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
10009754:	4b04      	ldr	r3, [pc, #16]	; (10009768 <platform_register_ble_msg_handler+0x14>)
10009756:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
10009758:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000975a:	2a01      	cmp	r2, #1
1000975c:	d102      	bne.n	10009764 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000975e:	4b03      	ldr	r3, [pc, #12]	; (1000976c <platform_register_ble_msg_handler+0x18>)
10009760:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
10009762:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
10009764:	0018      	movs	r0, r3
10009766:	4770      	bx	lr
10009768:	100139cc 	.word	0x100139cc
1000976c:	100139e8 	.word	0x100139e8

10009770 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
10009770:	b570      	push	{r4, r5, r6, lr}
10009772:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
10009774:	4b0e      	ldr	r3, [pc, #56]	; (100097b0 <platform_interface_send+0x40>)
10009776:	681b      	ldr	r3, [r3, #0]
10009778:	2b00      	cmp	r3, #0
1000977a:	d002      	beq.n	10009782 <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000977c:	8840      	ldrh	r0, [r0, #2]
1000977e:	4798      	blx	r3
10009780:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
10009782:	88e3      	ldrh	r3, [r4, #6]
10009784:	88a2      	ldrh	r2, [r4, #4]
10009786:	8861      	ldrh	r1, [r4, #2]
10009788:	8820      	ldrh	r0, [r4, #0]
1000978a:	4d0a      	ldr	r5, [pc, #40]	; (100097b4 <platform_interface_send+0x44>)
1000978c:	682d      	ldr	r5, [r5, #0]
1000978e:	47a8      	blx	r5
10009790:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
10009792:	88e2      	ldrh	r2, [r4, #6]
10009794:	2a00      	cmp	r2, #0
10009796:	d102      	bne.n	1000979e <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
10009798:	4b07      	ldr	r3, [pc, #28]	; (100097b8 <platform_interface_send+0x48>)
1000979a:	4798      	blx	r3
1000979c:	e006      	b.n	100097ac <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000979e:	0021      	movs	r1, r4
100097a0:	3108      	adds	r1, #8
100097a2:	4b06      	ldr	r3, [pc, #24]	; (100097bc <platform_interface_send+0x4c>)
100097a4:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
100097a6:	0028      	movs	r0, r5
100097a8:	4b03      	ldr	r3, [pc, #12]	; (100097b8 <platform_interface_send+0x48>)
100097aa:	4798      	blx	r3
	}
}
100097ac:	bd70      	pop	{r4, r5, r6, pc}
100097ae:	46c0      	nop			; (mov r8, r8)
100097b0:	100139c0 	.word	0x100139c0
100097b4:	100139f4 	.word	0x100139f4
100097b8:	100093f9 	.word	0x100093f9
100097bc:	10010fa7 	.word	0x10010fa7

100097c0 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
100097c0:	b570      	push	{r4, r5, r6, lr}
100097c2:	0015      	movs	r5, r2
100097c4:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
100097c6:	020a      	lsls	r2, r1, #8
100097c8:	4302      	orrs	r2, r0
100097ca:	4b0a      	ldr	r3, [pc, #40]	; (100097f4 <send_plf_int_msg_ind+0x34>)
100097cc:	681e      	ldr	r6, [r3, #0]
100097ce:	0023      	movs	r3, r4
100097d0:	2105      	movs	r1, #5
100097d2:	20a0      	movs	r0, #160	; 0xa0
100097d4:	00c0      	lsls	r0, r0, #3
100097d6:	47b0      	blx	r6
100097d8:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
100097da:	d00a      	beq.n	100097f2 <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
100097dc:	2c00      	cmp	r4, #0
100097de:	d005      	beq.n	100097ec <send_plf_int_msg_ind+0x2c>
100097e0:	2d00      	cmp	r5, #0
100097e2:	d003      	beq.n	100097ec <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
100097e4:	0022      	movs	r2, r4
100097e6:	0029      	movs	r1, r5
100097e8:	4b03      	ldr	r3, [pc, #12]	; (100097f8 <send_plf_int_msg_ind+0x38>)
100097ea:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
100097ec:	0030      	movs	r0, r6
100097ee:	4b03      	ldr	r3, [pc, #12]	; (100097fc <send_plf_int_msg_ind+0x3c>)
100097f0:	4798      	blx	r3
	}
}
100097f2:	bd70      	pop	{r4, r5, r6, pc}
100097f4:	100139f4 	.word	0x100139f4
100097f8:	10010fa7 	.word	0x10010fa7
100097fc:	100093f9 	.word	0x100093f9

10009800 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
10009800:	b5f0      	push	{r4, r5, r6, r7, lr}
10009802:	465f      	mov	r7, fp
10009804:	4656      	mov	r6, sl
10009806:	464d      	mov	r5, r9
10009808:	4644      	mov	r4, r8
1000980a:	b4f0      	push	{r4, r5, r6, r7}
1000980c:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000980e:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
10009810:	2300      	movs	r3, #0
10009812:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
10009814:	1ce3      	adds	r3, r4, #3
10009816:	d81c      	bhi.n	10009852 <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
10009818:	220d      	movs	r2, #13
1000981a:	2100      	movs	r1, #0
1000981c:	a802      	add	r0, sp, #8
1000981e:	4b82      	ldr	r3, [pc, #520]	; (10009a28 <platform_event_wait+0x228>)
10009820:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
10009822:	2333      	movs	r3, #51	; 0x33
10009824:	aa02      	add	r2, sp, #8
10009826:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
10009828:	3b30      	subs	r3, #48	; 0x30
1000982a:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000982c:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000982e:	3302      	adds	r3, #2
10009830:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
10009832:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
10009834:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
10009836:	0a23      	lsrs	r3, r4, #8
10009838:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000983a:	0c23      	lsrs	r3, r4, #16
1000983c:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000983e:	0e24      	lsrs	r4, r4, #24
10009840:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
10009842:	2301      	movs	r3, #1
10009844:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
10009846:	210d      	movs	r1, #13
10009848:	0010      	movs	r0, r2
1000984a:	4b78      	ldr	r3, [pc, #480]	; (10009a2c <platform_event_wait+0x22c>)
1000984c:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000984e:	2301      	movs	r3, #1
10009850:	4699      	mov	r9, r3
10009852:	2400      	movs	r4, #0
10009854:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
10009856:	4f76      	ldr	r7, [pc, #472]	; (10009a30 <platform_event_wait+0x230>)
10009858:	4e76      	ldr	r6, [pc, #472]	; (10009a34 <platform_event_wait+0x234>)
1000985a:	4977      	ldr	r1, [pc, #476]	; (10009a38 <platform_event_wait+0x238>)
1000985c:	6838      	ldr	r0, [r7, #0]
1000985e:	6833      	ldr	r3, [r6, #0]
10009860:	4798      	blx	r3
10009862:	2800      	cmp	r0, #0
10009864:	d000      	beq.n	10009868 <platform_event_wait+0x68>
10009866:	e088      	b.n	1000997a <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
10009868:	4b73      	ldr	r3, [pc, #460]	; (10009a38 <platform_event_wait+0x238>)
1000986a:	681c      	ldr	r4, [r3, #0]
1000986c:	88a3      	ldrh	r3, [r4, #4]
1000986e:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
10009870:	23cd      	movs	r3, #205	; 0xcd
10009872:	009b      	lsls	r3, r3, #2
10009874:	459a      	cmp	sl, r3
10009876:	d100      	bne.n	1000987a <platform_event_wait+0x7a>
10009878:	e0c7      	b.n	10009a0a <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000987a:	8923      	ldrh	r3, [r4, #8]
1000987c:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000987e:	8963      	ldrh	r3, [r4, #10]
10009880:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
10009882:	464b      	mov	r3, r9
10009884:	2b00      	cmp	r3, #0
10009886:	d011      	beq.n	100098ac <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
10009888:	220d      	movs	r2, #13
1000988a:	2100      	movs	r1, #0
1000988c:	a802      	add	r0, sp, #8
1000988e:	4b66      	ldr	r3, [pc, #408]	; (10009a28 <platform_event_wait+0x228>)
10009890:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
10009892:	2333      	movs	r3, #51	; 0x33
10009894:	aa02      	add	r2, sp, #8
10009896:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
10009898:	3b30      	subs	r3, #48	; 0x30
1000989a:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000989c:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000989e:	3302      	adds	r3, #2
100098a0:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
100098a2:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
100098a4:	210d      	movs	r1, #13
100098a6:	0010      	movs	r0, r2
100098a8:	4b60      	ldr	r3, [pc, #384]	; (10009a2c <platform_event_wait+0x22c>)
100098aa:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
100098ac:	23a0      	movs	r3, #160	; 0xa0
100098ae:	00db      	lsls	r3, r3, #3
100098b0:	459a      	cmp	sl, r3
100098b2:	d121      	bne.n	100098f8 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
100098b4:	4b61      	ldr	r3, [pc, #388]	; (10009a3c <platform_event_wait+0x23c>)
100098b6:	881b      	ldrh	r3, [r3, #0]
100098b8:	4443      	add	r3, r8
100098ba:	22a0      	movs	r2, #160	; 0xa0
100098bc:	0092      	lsls	r2, r2, #2
100098be:	4293      	cmp	r3, r2
100098c0:	dd02      	ble.n	100098c8 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
100098c2:	3a80      	subs	r2, #128	; 0x80
100098c4:	4b5d      	ldr	r3, [pc, #372]	; (10009a3c <platform_event_wait+0x23c>)
100098c6:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
100098c8:	4b5c      	ldr	r3, [pc, #368]	; (10009a3c <platform_event_wait+0x23c>)
100098ca:	469a      	mov	sl, r3
100098cc:	881d      	ldrh	r5, [r3, #0]
100098ce:	4b5c      	ldr	r3, [pc, #368]	; (10009a40 <platform_event_wait+0x240>)
100098d0:	18ed      	adds	r5, r5, r3
100098d2:	0021      	movs	r1, r4
100098d4:	310c      	adds	r1, #12
100098d6:	4642      	mov	r2, r8
100098d8:	0028      	movs	r0, r5
100098da:	4b5a      	ldr	r3, [pc, #360]	; (10009a44 <platform_event_wait+0x244>)
100098dc:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
100098de:	4642      	mov	r2, r8
100098e0:	0029      	movs	r1, r5
100098e2:	4658      	mov	r0, fp
100098e4:	4b58      	ldr	r3, [pc, #352]	; (10009a48 <platform_event_wait+0x248>)
100098e6:	4798      	blx	r3
				plf_event_buff_index += len;
100098e8:	4653      	mov	r3, sl
100098ea:	881b      	ldrh	r3, [r3, #0]
100098ec:	4443      	add	r3, r8
100098ee:	4652      	mov	r2, sl
100098f0:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
100098f2:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
100098f4:	2502      	movs	r5, #2
100098f6:	e03a      	b.n	1000996e <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
100098f8:	4b54      	ldr	r3, [pc, #336]	; (10009a4c <platform_event_wait+0x24c>)
100098fa:	681b      	ldr	r3, [r3, #0]
100098fc:	2b00      	cmp	r3, #0
100098fe:	d032      	beq.n	10009966 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
10009900:	4b4d      	ldr	r3, [pc, #308]	; (10009a38 <platform_event_wait+0x238>)
10009902:	681a      	ldr	r2, [r3, #0]
10009904:	8893      	ldrh	r3, [r2, #4]
10009906:	21cd      	movs	r1, #205	; 0xcd
10009908:	0089      	lsls	r1, r1, #2
1000990a:	428b      	cmp	r3, r1
1000990c:	d104      	bne.n	10009918 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000990e:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
10009910:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
10009912:	2b00      	cmp	r3, #0
10009914:	d02b      	beq.n	1000996e <platform_event_wait+0x16e>
10009916:	e028      	b.n	1000996a <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
10009918:	4c4d      	ldr	r4, [pc, #308]	; (10009a50 <platform_event_wait+0x250>)
1000991a:	4d49      	ldr	r5, [pc, #292]	; (10009a40 <platform_event_wait+0x240>)
1000991c:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000991e:	702b      	strb	r3, [r5, #0]
10009920:	0a1b      	lsrs	r3, r3, #8
10009922:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
10009924:	8910      	ldrh	r0, [r2, #8]
10009926:	4b4b      	ldr	r3, [pc, #300]	; (10009a54 <platform_event_wait+0x254>)
10009928:	681b      	ldr	r3, [r3, #0]
1000992a:	4798      	blx	r3
1000992c:	7128      	strb	r0, [r5, #4]
1000992e:	0a00      	lsrs	r0, r0, #8
10009930:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
10009932:	6820      	ldr	r0, [r4, #0]
10009934:	4b40      	ldr	r3, [pc, #256]	; (10009a38 <platform_event_wait+0x238>)
10009936:	681a      	ldr	r2, [r3, #0]
10009938:	88d2      	ldrh	r2, [r2, #6]
1000993a:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000993c:	681d      	ldr	r5, [r3, #0]
1000993e:	896b      	ldrh	r3, [r5, #10]
10009940:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
10009942:	3008      	adds	r0, #8
10009944:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
10009946:	896a      	ldrh	r2, [r5, #10]
10009948:	2a00      	cmp	r2, #0
1000994a:	d003      	beq.n	10009954 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000994c:	0029      	movs	r1, r5
1000994e:	310c      	adds	r1, #12
10009950:	4b3c      	ldr	r3, [pc, #240]	; (10009a44 <platform_event_wait+0x244>)
10009952:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
10009954:	8969      	ldrh	r1, [r5, #10]
10009956:	3108      	adds	r1, #8
10009958:	4b3c      	ldr	r3, [pc, #240]	; (10009a4c <platform_event_wait+0x24c>)
1000995a:	681b      	ldr	r3, [r3, #0]
1000995c:	4838      	ldr	r0, [pc, #224]	; (10009a40 <platform_event_wait+0x240>)
1000995e:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
10009960:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
10009962:	2503      	movs	r5, #3
10009964:	e003      	b.n	1000996e <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
10009966:	2400      	movs	r4, #0
10009968:	e001      	b.n	1000996e <platform_event_wait+0x16e>
1000996a:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000996c:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000996e:	4b32      	ldr	r3, [pc, #200]	; (10009a38 <platform_event_wait+0x238>)
10009970:	6818      	ldr	r0, [r3, #0]
10009972:	4b39      	ldr	r3, [pc, #228]	; (10009a58 <platform_event_wait+0x258>)
10009974:	681b      	ldr	r3, [r3, #0]
10009976:	4798      	blx	r3
10009978:	e000      	b.n	1000997c <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000997a:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000997c:	2c00      	cmp	r4, #0
1000997e:	d000      	beq.n	10009982 <platform_event_wait+0x182>
10009980:	e76b      	b.n	1000985a <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
10009982:	464b      	mov	r3, r9
10009984:	2b00      	cmp	r3, #0
10009986:	d046      	beq.n	10009a16 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
10009988:	4b29      	ldr	r3, [pc, #164]	; (10009a30 <platform_event_wait+0x230>)
1000998a:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000998c:	2e00      	cmp	r6, #0
1000998e:	d104      	bne.n	1000999a <platform_event_wait+0x19a>
10009990:	2300      	movs	r3, #0
10009992:	6a1c      	ldr	r4, [r3, #32]
10009994:	2c00      	cmp	r4, #0
10009996:	d131      	bne.n	100099fc <platform_event_wait+0x1fc>
10009998:	e03d      	b.n	10009a16 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000999a:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000999c:	2314      	movs	r3, #20
1000999e:	469c      	mov	ip, r3
100099a0:	44b4      	add	ip, r6
100099a2:	4663      	mov	r3, ip
100099a4:	4660      	mov	r0, ip
100099a6:	9300      	str	r3, [sp, #0]
100099a8:	4b2c      	ldr	r3, [pc, #176]	; (10009a5c <platform_event_wait+0x25c>)
100099aa:	681b      	ldr	r3, [r3, #0]
100099ac:	4798      	blx	r3
	while(NULL != current)
100099ae:	2c00      	cmp	r4, #0
100099b0:	d01f      	beq.n	100099f2 <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
100099b2:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
100099b4:	23cd      	movs	r3, #205	; 0xcd
100099b6:	009b      	lsls	r3, r3, #2
100099b8:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
100099ba:	4b27      	ldr	r3, [pc, #156]	; (10009a58 <platform_event_wait+0x258>)
100099bc:	469a      	mov	sl, r3
100099be:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
100099c0:	6803      	ldr	r3, [r0, #0]
100099c2:	889b      	ldrh	r3, [r3, #4]
100099c4:	4543      	cmp	r3, r8
100099c6:	d110      	bne.n	100099ea <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
100099c8:	2f00      	cmp	r7, #0
100099ca:	d006      	beq.n	100099da <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
100099cc:	6883      	ldr	r3, [r0, #8]
100099ce:	60bb      	str	r3, [r7, #8]
				ke_free(current);
100099d0:	4653      	mov	r3, sl
100099d2:	681b      	ldr	r3, [r3, #0]
100099d4:	4798      	blx	r3
				current = prev->pstrNext;
100099d6:	68b8      	ldr	r0, [r7, #8]
100099d8:	e009      	b.n	100099ee <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
100099da:	6883      	ldr	r3, [r0, #8]
100099dc:	6233      	str	r3, [r6, #32]
				ke_free(current);
100099de:	4b1e      	ldr	r3, [pc, #120]	; (10009a58 <platform_event_wait+0x258>)
100099e0:	681b      	ldr	r3, [r3, #0]
100099e2:	9301      	str	r3, [sp, #4]
100099e4:	4798      	blx	r3
				current = pHandle->pstrMessageList;
100099e6:	6a30      	ldr	r0, [r6, #32]
100099e8:	e001      	b.n	100099ee <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
100099ea:	0007      	movs	r7, r0
100099ec:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
100099ee:	2800      	cmp	r0, #0
100099f0:	d1e6      	bne.n	100099c0 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
100099f2:	4b1b      	ldr	r3, [pc, #108]	; (10009a60 <platform_event_wait+0x260>)
100099f4:	681b      	ldr	r3, [r3, #0]
100099f6:	9800      	ldr	r0, [sp, #0]
100099f8:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
100099fa:	e00c      	b.n	10009a16 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
100099fc:	2314      	movs	r3, #20
100099fe:	9300      	str	r3, [sp, #0]
10009a00:	4b16      	ldr	r3, [pc, #88]	; (10009a5c <platform_event_wait+0x25c>)
10009a02:	681b      	ldr	r3, [r3, #0]
10009a04:	2014      	movs	r0, #20
10009a06:	4798      	blx	r3
10009a08:	e7d3      	b.n	100099b2 <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
10009a0a:	4b10      	ldr	r3, [pc, #64]	; (10009a4c <platform_event_wait+0x24c>)
10009a0c:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
10009a0e:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
10009a10:	2b00      	cmp	r3, #0
10009a12:	d0ac      	beq.n	1000996e <platform_event_wait+0x16e>
10009a14:	e77b      	b.n	1000990e <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
10009a16:	0028      	movs	r0, r5
10009a18:	b007      	add	sp, #28
10009a1a:	bc3c      	pop	{r2, r3, r4, r5}
10009a1c:	4690      	mov	r8, r2
10009a1e:	4699      	mov	r9, r3
10009a20:	46a2      	mov	sl, r4
10009a22:	46ab      	mov	fp, r5
10009a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009a26:	46c0      	nop			; (mov r8, r8)
10009a28:	10010fb9 	.word	0x10010fb9
10009a2c:	10009771 	.word	0x10009771
10009a30:	100139f8 	.word	0x100139f8
10009a34:	100139e0 	.word	0x100139e0
10009a38:	100139b4 	.word	0x100139b4
10009a3c:	100157e4 	.word	0x100157e4
10009a40:	1001554c 	.word	0x1001554c
10009a44:	10010fa7 	.word	0x10010fa7
10009a48:	10009391 	.word	0x10009391
10009a4c:	100139e8 	.word	0x100139e8
10009a50:	100139f0 	.word	0x100139f0
10009a54:	100139bc 	.word	0x100139bc
10009a58:	100139b8 	.word	0x100139b8
10009a5c:	100139d8 	.word	0x100139d8
10009a60:	100139c4 	.word	0x100139c4

10009a64 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
10009a64:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
10009a66:	4b03      	ldr	r3, [pc, #12]	; (10009a74 <acquire_sleep_lock+0x10>)
10009a68:	681b      	ldr	r3, [r3, #0]
10009a6a:	2080      	movs	r0, #128	; 0x80
10009a6c:	0200      	lsls	r0, r0, #8
10009a6e:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
10009a70:	2008      	movs	r0, #8
10009a72:	bd10      	pop	{r4, pc}
10009a74:	10015504 	.word	0x10015504

10009a78 <release_message_lock>:

plf_drv_status release_message_lock()
{
10009a78:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
10009a7a:	4b03      	ldr	r3, [pc, #12]	; (10009a88 <release_message_lock+0x10>)
10009a7c:	681b      	ldr	r3, [r3, #0]
10009a7e:	2080      	movs	r0, #128	; 0x80
10009a80:	01c0      	lsls	r0, r0, #7
10009a82:	4798      	blx	r3
	return status;
}
10009a84:	2000      	movs	r0, #0
10009a86:	bd10      	pop	{r4, pc}
10009a88:	10015510 	.word	0x10015510

10009a8c <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
10009a8c:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
10009a8e:	4c05      	ldr	r4, [pc, #20]	; (10009aa4 <release_sleep_lock+0x18>)
10009a90:	2080      	movs	r0, #128	; 0x80
10009a92:	01c0      	lsls	r0, r0, #7
10009a94:	6823      	ldr	r3, [r4, #0]
10009a96:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
10009a98:	6823      	ldr	r3, [r4, #0]
10009a9a:	2080      	movs	r0, #128	; 0x80
10009a9c:	0200      	lsls	r0, r0, #8
10009a9e:	4798      	blx	r3
	return status;
}
10009aa0:	2000      	movs	r0, #0
10009aa2:	bd10      	pop	{r4, pc}
10009aa4:	10015510 	.word	0x10015510

10009aa8 <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
10009aa8:	2800      	cmp	r0, #0
10009aaa:	d003      	beq.n	10009ab4 <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
10009aac:	4b02      	ldr	r3, [pc, #8]	; (10009ab8 <register_resume_callback+0x10>)
10009aae:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
10009ab0:	2000      	movs	r0, #0
10009ab2:	e000      	b.n	10009ab6 <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
10009ab4:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
10009ab6:	4770      	bx	lr
10009ab8:	100157d8 	.word	0x100157d8

10009abc <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
10009abc:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
10009abe:	4a18      	ldr	r2, [pc, #96]	; (10009b20 <gpio1_combined_isr_handler+0x64>)
10009ac0:	8f13      	ldrh	r3, [r2, #56]	; 0x38
10009ac2:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
10009ac4:	8d10      	ldrh	r0, [r2, #40]	; 0x28
10009ac6:	2180      	movs	r1, #128	; 0x80
10009ac8:	0209      	lsls	r1, r1, #8
10009aca:	4301      	orrs	r1, r0
10009acc:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
10009ace:	0010      	movs	r0, r2
10009ad0:	4d14      	ldr	r5, [pc, #80]	; (10009b24 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
10009ad2:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
10009ad4:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
10009ad6:	05db      	lsls	r3, r3, #23
10009ad8:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
10009ada:	d011      	beq.n	10009b00 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
10009adc:	b2db      	uxtb	r3, r3
10009ade:	4259      	negs	r1, r3
10009ae0:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
10009ae2:	2b01      	cmp	r3, #1
10009ae4:	d006      	beq.n	10009af4 <gpio1_combined_isr_handler+0x38>
10009ae6:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
10009ae8:	085b      	lsrs	r3, r3, #1
				index++;
10009aea:	3101      	adds	r1, #1
10009aec:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
10009aee:	2b01      	cmp	r3, #1
10009af0:	d1fa      	bne.n	10009ae8 <gpio1_combined_isr_handler+0x2c>
10009af2:	e000      	b.n	10009af6 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
10009af4:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
10009af6:	0023      	movs	r3, r4
10009af8:	408b      	lsls	r3, r1
10009afa:	b29b      	uxth	r3, r3
10009afc:	8703      	strh	r3, [r0, #56]	; 0x38
10009afe:	e003      	b.n	10009b08 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
10009b00:	8f03      	ldrh	r3, [r0, #56]	; 0x38
10009b02:	432b      	orrs	r3, r5
10009b04:	b29b      	uxth	r3, r3
10009b06:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
10009b08:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
10009b0a:	05db      	lsls	r3, r3, #23
10009b0c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
10009b0e:	d1e2      	bne.n	10009ad6 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10009b10:	2180      	movs	r1, #128	; 0x80
10009b12:	0049      	lsls	r1, r1, #1
10009b14:	3381      	adds	r3, #129	; 0x81
10009b16:	33ff      	adds	r3, #255	; 0xff
10009b18:	4a03      	ldr	r2, [pc, #12]	; (10009b28 <gpio1_combined_isr_handler+0x6c>)
10009b1a:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
10009b1c:	bd30      	pop	{r4, r5, pc}
10009b1e:	46c0      	nop			; (mov r8, r8)
10009b20:	40011000 	.word	0x40011000
10009b24:	ffff8000 	.word	0xffff8000
10009b28:	e000e100 	.word	0xe000e100

10009b2c <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
10009b2c:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
10009b2e:	4a17      	ldr	r2, [pc, #92]	; (10009b8c <gpio0_combined_isr_handler+0x60>)
10009b30:	8f13      	ldrh	r3, [r2, #56]	; 0x38
10009b32:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
10009b34:	8d10      	ldrh	r0, [r2, #40]	; 0x28
10009b36:	2180      	movs	r1, #128	; 0x80
10009b38:	0209      	lsls	r1, r1, #8
10009b3a:	4301      	orrs	r1, r0
10009b3c:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
10009b3e:	0010      	movs	r0, r2
10009b40:	4d13      	ldr	r5, [pc, #76]	; (10009b90 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
10009b42:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
10009b44:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
10009b46:	05db      	lsls	r3, r3, #23
10009b48:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
10009b4a:	d011      	beq.n	10009b70 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
10009b4c:	b2db      	uxtb	r3, r3
10009b4e:	4259      	negs	r1, r3
10009b50:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
10009b52:	2b01      	cmp	r3, #1
10009b54:	d006      	beq.n	10009b64 <gpio0_combined_isr_handler+0x38>
10009b56:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
10009b58:	085b      	lsrs	r3, r3, #1
				index++;
10009b5a:	3101      	adds	r1, #1
10009b5c:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
10009b5e:	2b01      	cmp	r3, #1
10009b60:	d1fa      	bne.n	10009b58 <gpio0_combined_isr_handler+0x2c>
10009b62:	e000      	b.n	10009b66 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
10009b64:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
10009b66:	0023      	movs	r3, r4
10009b68:	408b      	lsls	r3, r1
10009b6a:	b29b      	uxth	r3, r3
10009b6c:	8703      	strh	r3, [r0, #56]	; 0x38
10009b6e:	e003      	b.n	10009b78 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
10009b70:	8f03      	ldrh	r3, [r0, #56]	; 0x38
10009b72:	432b      	orrs	r3, r5
10009b74:	b29b      	uxth	r3, r3
10009b76:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
10009b78:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
10009b7a:	05db      	lsls	r3, r3, #23
10009b7c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
10009b7e:	d1e2      	bne.n	10009b46 <gpio0_combined_isr_handler+0x1a>
10009b80:	2180      	movs	r1, #128	; 0x80
10009b82:	3381      	adds	r3, #129	; 0x81
10009b84:	33ff      	adds	r3, #255	; 0xff
10009b86:	4a03      	ldr	r2, [pc, #12]	; (10009b94 <gpio0_combined_isr_handler+0x68>)
10009b88:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
10009b8a:	bd30      	pop	{r4, r5, pc}
10009b8c:	40010000 	.word	0x40010000
10009b90:	ffff8000 	.word	0xffff8000
10009b94:	e000e100 	.word	0xe000e100

10009b98 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
10009b98:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
10009b9a:	4b0c      	ldr	r3, [pc, #48]	; (10009bcc <PORT1_COMB_Handler+0x34>)
10009b9c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
10009b9e:	0b5b      	lsrs	r3, r3, #13
10009ba0:	d010      	beq.n	10009bc4 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
10009ba2:	4b0b      	ldr	r3, [pc, #44]	; (10009bd0 <PORT1_COMB_Handler+0x38>)
10009ba4:	681b      	ldr	r3, [r3, #0]
10009ba6:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
10009ba8:	4a08      	ldr	r2, [pc, #32]	; (10009bcc <PORT1_COMB_Handler+0x34>)
10009baa:	8f13      	ldrh	r3, [r2, #56]	; 0x38
10009bac:	8f11      	ldrh	r1, [r2, #56]	; 0x38
10009bae:	0b5b      	lsrs	r3, r3, #13
10009bb0:	035b      	lsls	r3, r3, #13
10009bb2:	430b      	orrs	r3, r1
10009bb4:	8713      	strh	r3, [r2, #56]	; 0x38
10009bb6:	2180      	movs	r1, #128	; 0x80
10009bb8:	0049      	lsls	r1, r1, #1
10009bba:	23c0      	movs	r3, #192	; 0xc0
10009bbc:	005b      	lsls	r3, r3, #1
10009bbe:	4a05      	ldr	r2, [pc, #20]	; (10009bd4 <PORT1_COMB_Handler+0x3c>)
10009bc0:	50d1      	str	r1, [r2, r3]
10009bc2:	e001      	b.n	10009bc8 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
10009bc4:	4b04      	ldr	r3, [pc, #16]	; (10009bd8 <PORT1_COMB_Handler+0x40>)
10009bc6:	4798      	blx	r3
	}
}
10009bc8:	bd10      	pop	{r4, pc}
10009bca:	46c0      	nop			; (mov r8, r8)
10009bcc:	40011000 	.word	0x40011000
10009bd0:	100157d0 	.word	0x100157d0
10009bd4:	e000e100 	.word	0xe000e100
10009bd8:	10009abd 	.word	0x10009abd

10009bdc <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
10009bdc:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
10009bde:	2802      	cmp	r0, #2
10009be0:	d804      	bhi.n	10009bec <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
10009be2:	0080      	lsls	r0, r0, #2
10009be4:	2200      	movs	r2, #0
10009be6:	4b02      	ldr	r3, [pc, #8]	; (10009bf0 <wakeup_int_unregister_callback+0x14>)
10009be8:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
10009bea:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
10009bec:	0018      	movs	r0, r3
10009bee:	4770      	bx	lr
10009bf0:	100157e8 	.word	0x100157e8

10009bf4 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
10009bf4:	b510      	push	{r4, lr}
10009bf6:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
10009bf8:	7803      	ldrb	r3, [r0, #0]
10009bfa:	2b01      	cmp	r3, #1
10009bfc:	d108      	bne.n	10009c10 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
10009bfe:	4b11      	ldr	r3, [pc, #68]	; (10009c44 <wakeup_active_event_callback+0x50>)
10009c00:	681b      	ldr	r3, [r3, #0]
10009c02:	2b00      	cmp	r3, #0
10009c04:	d000      	beq.n	10009c08 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
10009c06:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
10009c08:	23ff      	movs	r3, #255	; 0xff
10009c0a:	6822      	ldr	r2, [r4, #0]
10009c0c:	439a      	bics	r2, r3
10009c0e:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
10009c10:	7863      	ldrb	r3, [r4, #1]
10009c12:	2b01      	cmp	r3, #1
10009c14:	d108      	bne.n	10009c28 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
10009c16:	4b0b      	ldr	r3, [pc, #44]	; (10009c44 <wakeup_active_event_callback+0x50>)
10009c18:	685b      	ldr	r3, [r3, #4]
10009c1a:	2b00      	cmp	r3, #0
10009c1c:	d000      	beq.n	10009c20 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
10009c1e:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
10009c20:	4b09      	ldr	r3, [pc, #36]	; (10009c48 <wakeup_active_event_callback+0x54>)
10009c22:	6822      	ldr	r2, [r4, #0]
10009c24:	4013      	ands	r3, r2
10009c26:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
10009c28:	78a3      	ldrb	r3, [r4, #2]
10009c2a:	2b01      	cmp	r3, #1
10009c2c:	d108      	bne.n	10009c40 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
10009c2e:	4b05      	ldr	r3, [pc, #20]	; (10009c44 <wakeup_active_event_callback+0x50>)
10009c30:	689b      	ldr	r3, [r3, #8]
10009c32:	2b00      	cmp	r3, #0
10009c34:	d000      	beq.n	10009c38 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
10009c36:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
10009c38:	4b04      	ldr	r3, [pc, #16]	; (10009c4c <wakeup_active_event_callback+0x58>)
10009c3a:	6822      	ldr	r2, [r4, #0]
10009c3c:	4013      	ands	r3, r2
10009c3e:	6023      	str	r3, [r4, #0]
	}
}
10009c40:	bd10      	pop	{r4, pc}
10009c42:	46c0      	nop			; (mov r8, r8)
10009c44:	100157e8 	.word	0x100157e8
10009c48:	ffff00ff 	.word	0xffff00ff
10009c4c:	ff00ffff 	.word	0xff00ffff

10009c50 <sms_ble_pair_request_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
10009c50:	b510      	push	{r4, lr}
10009c52:	b082      	sub	sp, #8
    at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
    DBG_LOG_DEV("[sms_ble_pair_request_fn]\tPairing request... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
10009c54:	4809      	ldr	r0, [pc, #36]	; (10009c7c <sms_ble_pair_request_fn+0x2c>)
10009c56:	4b0a      	ldr	r3, [pc, #40]	; (10009c80 <sms_ble_pair_request_fn+0x30>)
10009c58:	4798      	blx	r3
10009c5a:	4b0a      	ldr	r3, [pc, #40]	; (10009c84 <sms_ble_pair_request_fn+0x34>)
10009c5c:	781a      	ldrb	r2, [r3, #0]
10009c5e:	b2d2      	uxtb	r2, r2
10009c60:	4b09      	ldr	r3, [pc, #36]	; (10009c88 <sms_ble_pair_request_fn+0x38>)
10009c62:	781b      	ldrb	r3, [r3, #0]
10009c64:	b2db      	uxtb	r3, r3
10009c66:	4909      	ldr	r1, [pc, #36]	; (10009c8c <sms_ble_pair_request_fn+0x3c>)
10009c68:	7808      	ldrb	r0, [r1, #0]
10009c6a:	4909      	ldr	r1, [pc, #36]	; (10009c90 <sms_ble_pair_request_fn+0x40>)
10009c6c:	7b49      	ldrb	r1, [r1, #13]
10009c6e:	9000      	str	r0, [sp, #0]
10009c70:	4808      	ldr	r0, [pc, #32]	; (10009c94 <sms_ble_pair_request_fn+0x44>)
10009c72:	4c09      	ldr	r4, [pc, #36]	; (10009c98 <sms_ble_pair_request_fn+0x48>)
10009c74:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
    return AT_BLE_SUCCESS;
}
10009c76:	2000      	movs	r0, #0
10009c78:	b002      	add	sp, #8
10009c7a:	bd10      	pop	{r4, pc}
10009c7c:	100123b4 	.word	0x100123b4
10009c80:	100110e9 	.word	0x100110e9
10009c84:	10015864 	.word	0x10015864
10009c88:	100157f4 	.word	0x100157f4
10009c8c:	1001586b 	.word	0x1001586b
10009c90:	100157fc 	.word	0x100157fc
10009c94:	100123b8 	.word	0x100123b8
10009c98:	10010fc9 	.word	0x10010fc9

10009c9c <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10009c9c:	b510      	push	{r4, lr}
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_HIGH);
    
    at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
	sms_ble_sending = false;
10009c9e:	2400      	movs	r4, #0
10009ca0:	4b09      	ldr	r3, [pc, #36]	; (10009cc8 <sms_ble_notification_confirmed_fn+0x2c>)
10009ca2:	701c      	strb	r4, [r3, #0]
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009ca4:	2001      	movs	r0, #1
10009ca6:	4b09      	ldr	r3, [pc, #36]	; (10009ccc <sms_ble_notification_confirmed_fn+0x30>)
10009ca8:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10009caa:	4b09      	ldr	r3, [pc, #36]	; (10009cd0 <sms_ble_notification_confirmed_fn+0x34>)
10009cac:	701c      	strb	r4, [r3, #0]
    ble_current_state = BLE_STATE_PAIRED;
10009cae:	2222      	movs	r2, #34	; 0x22
10009cb0:	4b08      	ldr	r3, [pc, #32]	; (10009cd4 <sms_ble_notification_confirmed_fn+0x38>)
10009cb2:	701a      	strb	r2, [r3, #0]
    //DBG_LOG_CONT_DEV(" done!");

    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    //DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10009cb4:	4b08      	ldr	r3, [pc, #32]	; (10009cd8 <sms_ble_notification_confirmed_fn+0x3c>)
10009cb6:	781b      	ldrb	r3, [r3, #0]
10009cb8:	2b00      	cmp	r3, #0
10009cba:	d102      	bne.n	10009cc2 <sms_ble_notification_confirmed_fn+0x26>
        ulp_ready = true;
10009cbc:	3a21      	subs	r2, #33	; 0x21
10009cbe:	4b07      	ldr	r3, [pc, #28]	; (10009cdc <sms_ble_notification_confirmed_fn+0x40>)
10009cc0:	701a      	strb	r2, [r3, #0]
    }
    return AT_BLE_SUCCESS;
}
10009cc2:	2000      	movs	r0, #0
10009cc4:	bd10      	pop	{r4, pc}
10009cc6:	46c0      	nop			; (mov r8, r8)
10009cc8:	100157f5 	.word	0x100157f5
10009ccc:	1000a7ed 	.word	0x1000a7ed
10009cd0:	1001586b 	.word	0x1001586b
10009cd4:	10015864 	.word	0x10015864
10009cd8:	100157f4 	.word	0x100157f4
10009cdc:	100157f7 	.word	0x100157f7

10009ce0 <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
10009ce0:	b510      	push	{r4, lr}
    
    at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009ce2:	2001      	movs	r0, #1
10009ce4:	4b08      	ldr	r3, [pc, #32]	; (10009d08 <sms_ble_indication_confirmed_fn+0x28>)
10009ce6:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10009ce8:	2200      	movs	r2, #0
10009cea:	4b08      	ldr	r3, [pc, #32]	; (10009d0c <sms_ble_indication_confirmed_fn+0x2c>)
10009cec:	701a      	strb	r2, [r3, #0]
    ble_current_state = BLE_STATE_PAIRED;
10009cee:	3222      	adds	r2, #34	; 0x22
10009cf0:	4b07      	ldr	r3, [pc, #28]	; (10009d10 <sms_ble_indication_confirmed_fn+0x30>)
10009cf2:	701a      	strb	r2, [r3, #0]
    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
    
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10009cf4:	4b07      	ldr	r3, [pc, #28]	; (10009d14 <sms_ble_indication_confirmed_fn+0x34>)
10009cf6:	781b      	ldrb	r3, [r3, #0]
10009cf8:	2b00      	cmp	r3, #0
10009cfa:	d102      	bne.n	10009d02 <sms_ble_indication_confirmed_fn+0x22>
        ulp_ready = true;
10009cfc:	3a21      	subs	r2, #33	; 0x21
10009cfe:	4b06      	ldr	r3, [pc, #24]	; (10009d18 <sms_ble_indication_confirmed_fn+0x38>)
10009d00:	701a      	strb	r2, [r3, #0]
    }        
    return AT_BLE_SUCCESS;
}
10009d02:	2000      	movs	r0, #0
10009d04:	bd10      	pop	{r4, pc}
10009d06:	46c0      	nop			; (mov r8, r8)
10009d08:	1000a7ed 	.word	0x1000a7ed
10009d0c:	1001586b 	.word	0x1001586b
10009d10:	10015864 	.word	0x10015864
10009d14:	100157f4 	.word	0x100157f4
10009d18:	100157f7 	.word	0x100157f7

10009d1c <sms_ble_startup>:
#include <stdio.h>
//#include <stdlib.h>
#include "sms_remote1.h"

void sms_ble_startup(void)
{
10009d1c:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    timer2_current_mode = TIMER2_MODE_LED_STARTUP;
10009d1e:	2202      	movs	r2, #2
10009d20:	4b02      	ldr	r3, [pc, #8]	; (10009d2c <sms_ble_startup+0x10>)
10009d22:	701a      	strb	r2, [r3, #0]
    sms_led_blink_start(SMS_LED_0_PIN);
10009d24:	2016      	movs	r0, #22
10009d26:	4b02      	ldr	r3, [pc, #8]	; (10009d30 <sms_ble_startup+0x14>)
10009d28:	4798      	blx	r3
}
10009d2a:	bd10      	pop	{r4, pc}
10009d2c:	1001586b 	.word	0x1001586b
10009d30:	1000a6f5 	.word	0x1000a6f5

10009d34 <sms_ble_power_down>:

void sms_ble_power_down(void)
{
10009d34:	b510      	push	{r4, lr}
    sms_monitor_get_states("[sms_ble_power_down]");
10009d36:	4827      	ldr	r0, [pc, #156]	; (10009dd4 <sms_ble_power_down+0xa0>)
10009d38:	4b27      	ldr	r3, [pc, #156]	; (10009dd8 <sms_ble_power_down+0xa4>)
10009d3a:	4798      	blx	r3
    if(ble_current_state == BLE_STATE_POWEROFF) {
10009d3c:	4b27      	ldr	r3, [pc, #156]	; (10009ddc <sms_ble_power_down+0xa8>)
10009d3e:	781b      	ldrb	r3, [r3, #0]
10009d40:	2b00      	cmp	r3, #0
10009d42:	d103      	bne.n	10009d4c <sms_ble_power_down+0x18>
        /* If already power off state, then go back sleeping */
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        ulp_ready = true;
10009d44:	2201      	movs	r2, #1
10009d46:	4b26      	ldr	r3, [pc, #152]	; (10009de0 <sms_ble_power_down+0xac>)
10009d48:	701a      	strb	r2, [r3, #0]
10009d4a:	e042      	b.n	10009dd2 <sms_ble_power_down+0x9e>
    }
    else {
        /* Disable button interrupts */
        //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);        
        /* Disconnect if necessary from BLE network */
        switch(ble_current_state) {
10009d4c:	4b23      	ldr	r3, [pc, #140]	; (10009ddc <sms_ble_power_down+0xa8>)
10009d4e:	781b      	ldrb	r3, [r3, #0]
10009d50:	b2db      	uxtb	r3, r3
10009d52:	2b21      	cmp	r3, #33	; 0x21
10009d54:	d029      	beq.n	10009daa <sms_ble_power_down+0x76>
10009d56:	d802      	bhi.n	10009d5e <sms_ble_power_down+0x2a>
10009d58:	2b20      	cmp	r3, #32
10009d5a:	d005      	beq.n	10009d68 <sms_ble_power_down+0x34>
10009d5c:	e030      	b.n	10009dc0 <sms_ble_power_down+0x8c>
10009d5e:	2b22      	cmp	r3, #34	; 0x22
10009d60:	d017      	beq.n	10009d92 <sms_ble_power_down+0x5e>
10009d62:	2b23      	cmp	r3, #35	; 0x23
10009d64:	d01b      	beq.n	10009d9e <sms_ble_power_down+0x6a>
10009d66:	e02b      	b.n	10009dc0 <sms_ble_power_down+0x8c>
            case BLE_STATE_ADVERTISING:
            DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
10009d68:	481e      	ldr	r0, [pc, #120]	; (10009de4 <sms_ble_power_down+0xb0>)
10009d6a:	4b1f      	ldr	r3, [pc, #124]	; (10009de8 <sms_ble_power_down+0xb4>)
10009d6c:	4798      	blx	r3
10009d6e:	481f      	ldr	r0, [pc, #124]	; (10009dec <sms_ble_power_down+0xb8>)
10009d70:	4b1f      	ldr	r3, [pc, #124]	; (10009df0 <sms_ble_power_down+0xbc>)
10009d72:	4798      	blx	r3
            if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10009d74:	4b1f      	ldr	r3, [pc, #124]	; (10009df4 <sms_ble_power_down+0xc0>)
10009d76:	4798      	blx	r3
10009d78:	2800      	cmp	r0, #0
10009d7a:	d003      	beq.n	10009d84 <sms_ble_power_down+0x50>
                DBG_LOG_CONT_DEV("failed!!!");
10009d7c:	481e      	ldr	r0, [pc, #120]	; (10009df8 <sms_ble_power_down+0xc4>)
10009d7e:	4b1c      	ldr	r3, [pc, #112]	; (10009df0 <sms_ble_power_down+0xbc>)
10009d80:	4798      	blx	r3
10009d82:	e01d      	b.n	10009dc0 <sms_ble_power_down+0x8c>
                //#pragma TBD: manage adv_stop failure
            }
            else {
                DBG_LOG_CONT_DEV("done!");
10009d84:	481d      	ldr	r0, [pc, #116]	; (10009dfc <sms_ble_power_down+0xc8>)
10009d86:	4b1a      	ldr	r3, [pc, #104]	; (10009df0 <sms_ble_power_down+0xbc>)
10009d88:	4798      	blx	r3
                ble_current_state = BLE_STATE_DISCONNECTED;
10009d8a:	2211      	movs	r2, #17
10009d8c:	4b13      	ldr	r3, [pc, #76]	; (10009ddc <sms_ble_power_down+0xa8>)
10009d8e:	701a      	strb	r2, [r3, #0]
10009d90:	e016      	b.n	10009dc0 <sms_ble_power_down+0x8c>
            }
            break;
            
            case BLE_STATE_PAIRED:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
10009d92:	4814      	ldr	r0, [pc, #80]	; (10009de4 <sms_ble_power_down+0xb0>)
10009d94:	4b14      	ldr	r3, [pc, #80]	; (10009de8 <sms_ble_power_down+0xb4>)
10009d96:	4798      	blx	r3
10009d98:	4819      	ldr	r0, [pc, #100]	; (10009e00 <sms_ble_power_down+0xcc>)
10009d9a:	4b15      	ldr	r3, [pc, #84]	; (10009df0 <sms_ble_power_down+0xbc>)
10009d9c:	4798      	blx	r3
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
10009d9e:	4811      	ldr	r0, [pc, #68]	; (10009de4 <sms_ble_power_down+0xb0>)
10009da0:	4b11      	ldr	r3, [pc, #68]	; (10009de8 <sms_ble_power_down+0xb4>)
10009da2:	4798      	blx	r3
10009da4:	4817      	ldr	r0, [pc, #92]	; (10009e04 <sms_ble_power_down+0xd0>)
10009da6:	4b12      	ldr	r3, [pc, #72]	; (10009df0 <sms_ble_power_down+0xbc>)
10009da8:	4798      	blx	r3
            //#pragma TBD: switch-off sensors to save current
            //sms_sensors_switch(false);
            
            case BLE_STATE_CONNECTED:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
10009daa:	480e      	ldr	r0, [pc, #56]	; (10009de4 <sms_ble_power_down+0xb0>)
10009dac:	4b0e      	ldr	r3, [pc, #56]	; (10009de8 <sms_ble_power_down+0xb4>)
10009dae:	4798      	blx	r3
10009db0:	4815      	ldr	r0, [pc, #84]	; (10009e08 <sms_ble_power_down+0xd4>)
10009db2:	4b0f      	ldr	r3, [pc, #60]	; (10009df0 <sms_ble_power_down+0xbc>)
10009db4:	4798      	blx	r3
            at_ble_disconnect(sms_connection_handle, AT_BLE_TERMINATED_BY_USER);
10009db6:	4b15      	ldr	r3, [pc, #84]	; (10009e0c <sms_ble_power_down+0xd8>)
10009db8:	8818      	ldrh	r0, [r3, #0]
10009dba:	2113      	movs	r1, #19
10009dbc:	4b14      	ldr	r3, [pc, #80]	; (10009e10 <sms_ble_power_down+0xdc>)
10009dbe:	4798      	blx	r3
            
            default:
            break;
        }
        
        ble_current_state = BLE_STATE_DISCONNECTED;
10009dc0:	2211      	movs	r2, #17
10009dc2:	4b06      	ldr	r3, [pc, #24]	; (10009ddc <sms_ble_power_down+0xa8>)
10009dc4:	701a      	strb	r2, [r3, #0]
        timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
10009dc6:	3a0e      	subs	r2, #14
10009dc8:	4b12      	ldr	r3, [pc, #72]	; (10009e14 <sms_ble_power_down+0xe0>)
10009dca:	701a      	strb	r2, [r3, #0]
        sms_led_blink_start(SMS_LED_0_PIN);
10009dcc:	2016      	movs	r0, #22
10009dce:	4b12      	ldr	r3, [pc, #72]	; (10009e18 <sms_ble_power_down+0xe4>)
10009dd0:	4798      	blx	r3
    }
}
10009dd2:	bd10      	pop	{r4, pc}
10009dd4:	10012408 	.word	0x10012408
10009dd8:	1000a601 	.word	0x1000a601
10009ddc:	10015864 	.word	0x10015864
10009de0:	100157f7 	.word	0x100157f7
10009de4:	100123b4 	.word	0x100123b4
10009de8:	100110e9 	.word	0x100110e9
10009dec:	10012420 	.word	0x10012420
10009df0:	10010fc9 	.word	0x10010fc9
10009df4:	1000d7a5 	.word	0x1000d7a5
10009df8:	10012474 	.word	0x10012474
10009dfc:	10012480 	.word	0x10012480
10009e00:	10012488 	.word	0x10012488
10009e04:	100124e0 	.word	0x100124e0
10009e08:	1001250c 	.word	0x1001250c
10009e0c:	100157f8 	.word	0x100157f8
10009e10:	1000d7d1 	.word	0x1000d7d1
10009e14:	1001586b 	.word	0x1001586b
10009e18:	1000a6f5 	.word	0x1000a6f5

10009e1c <sms_ble_adv_report_fn>:
    return AT_BLE_FAILURE;
}

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
10009e1c:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
    ble_current_state = BLE_STATE_DISCONNECTED;
10009e1e:	2211      	movs	r2, #17
10009e20:	4b05      	ldr	r3, [pc, #20]	; (10009e38 <sms_ble_adv_report_fn+0x1c>)
10009e22:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_adv_report_fn]\tAdvertisement timeout...");
10009e24:	4805      	ldr	r0, [pc, #20]	; (10009e3c <sms_ble_adv_report_fn+0x20>)
10009e26:	4b06      	ldr	r3, [pc, #24]	; (10009e40 <sms_ble_adv_report_fn+0x24>)
10009e28:	4798      	blx	r3
10009e2a:	4806      	ldr	r0, [pc, #24]	; (10009e44 <sms_ble_adv_report_fn+0x28>)
10009e2c:	4b06      	ldr	r3, [pc, #24]	; (10009e48 <sms_ble_adv_report_fn+0x2c>)
10009e2e:	4798      	blx	r3
    //DBG_LOG_DEV("- status: 0x%02x", adv_report->status);
    sms_ble_power_down();
10009e30:	4b06      	ldr	r3, [pc, #24]	; (10009e4c <sms_ble_adv_report_fn+0x30>)
10009e32:	4798      	blx	r3
    return AT_BLE_SUCCESS;
}
10009e34:	2000      	movs	r0, #0
10009e36:	bd10      	pop	{r4, pc}
10009e38:	10015864 	.word	0x10015864
10009e3c:	100123b4 	.word	0x100123b4
10009e40:	100110e9 	.word	0x100110e9
10009e44:	10012544 	.word	0x10012544
10009e48:	10010fc9 	.word	0x10010fc9
10009e4c:	10009d35 	.word	0x10009d35

10009e50 <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
10009e50:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_ADVERTISING) {
10009e52:	4b0a      	ldr	r3, [pc, #40]	; (10009e7c <sms_ble_connected_fn+0x2c>)
10009e54:	781b      	ldrb	r3, [r3, #0]
10009e56:	2b20      	cmp	r3, #32
10009e58:	d10c      	bne.n	10009e74 <sms_ble_connected_fn+0x24>
        at_ble_connected_t *connected = (at_ble_connected_t *)params;
        sms_ble_conn_handle = connected->handle;
10009e5a:	8902      	ldrh	r2, [r0, #8]
10009e5c:	4b08      	ldr	r3, [pc, #32]	; (10009e80 <sms_ble_connected_fn+0x30>)
10009e5e:	801a      	strh	r2, [r3, #0]
        ble_current_state = BLE_STATE_CONNECTED;
10009e60:	2221      	movs	r2, #33	; 0x21
10009e62:	4b06      	ldr	r3, [pc, #24]	; (10009e7c <sms_ble_connected_fn+0x2c>)
10009e64:	701a      	strb	r2, [r3, #0]
        DBG_LOG_DEV("[sms_ble_connected_fn]\t\tDevices connected...");
10009e66:	4807      	ldr	r0, [pc, #28]	; (10009e84 <sms_ble_connected_fn+0x34>)
10009e68:	4b07      	ldr	r3, [pc, #28]	; (10009e88 <sms_ble_connected_fn+0x38>)
10009e6a:	4798      	blx	r3
10009e6c:	4807      	ldr	r0, [pc, #28]	; (10009e8c <sms_ble_connected_fn+0x3c>)
10009e6e:	4b08      	ldr	r3, [pc, #32]	; (10009e90 <sms_ble_connected_fn+0x40>)
10009e70:	4798      	blx	r3
10009e72:	e001      	b.n	10009e78 <sms_ble_connected_fn+0x28>
        //for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
            //DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
        //}            
    }
    else {
        sms_ble_power_down();
10009e74:	4b07      	ldr	r3, [pc, #28]	; (10009e94 <sms_ble_connected_fn+0x44>)
10009e76:	4798      	blx	r3
    }    
    return AT_BLE_SUCCESS;
}
10009e78:	2000      	movs	r0, #0
10009e7a:	bd10      	pop	{r4, pc}
10009e7c:	10015864 	.word	0x10015864
10009e80:	10015862 	.word	0x10015862
10009e84:	100123b4 	.word	0x100123b4
10009e88:	100110e9 	.word	0x100110e9
10009e8c:	10012578 	.word	0x10012578
10009e90:	10010fc9 	.word	0x10010fc9
10009e94:	10009d35 	.word	0x10009d35

10009e98 <sms_ble_paired_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
10009e98:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_CONNECTED) {
10009e9a:	4b07      	ldr	r3, [pc, #28]	; (10009eb8 <sms_ble_paired_fn+0x20>)
10009e9c:	781b      	ldrb	r3, [r3, #0]
10009e9e:	2b21      	cmp	r3, #33	; 0x21
10009ea0:	d106      	bne.n	10009eb0 <sms_ble_paired_fn+0x18>
        ble_current_state = BLE_STATE_PAIRED;
10009ea2:	2222      	movs	r2, #34	; 0x22
10009ea4:	4b04      	ldr	r3, [pc, #16]	; (10009eb8 <sms_ble_paired_fn+0x20>)
10009ea6:	701a      	strb	r2, [r3, #0]
        at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
        sms_monitor_get_states("[sms_ble_paired_fn]");
10009ea8:	4804      	ldr	r0, [pc, #16]	; (10009ebc <sms_ble_paired_fn+0x24>)
10009eaa:	4b05      	ldr	r3, [pc, #20]	; (10009ec0 <sms_ble_paired_fn+0x28>)
10009eac:	4798      	blx	r3
10009eae:	e001      	b.n	10009eb4 <sms_ble_paired_fn+0x1c>
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    }
    else {
        sms_ble_power_down();
10009eb0:	4b04      	ldr	r3, [pc, #16]	; (10009ec4 <sms_ble_paired_fn+0x2c>)
10009eb2:	4798      	blx	r3
    }        
    return AT_BLE_SUCCESS;
}
10009eb4:	2000      	movs	r0, #0
10009eb6:	bd10      	pop	{r4, pc}
10009eb8:	10015864 	.word	0x10015864
10009ebc:	100125a8 	.word	0x100125a8
10009ec0:	1000a601 	.word	0x1000a601
10009ec4:	10009d35 	.word	0x10009d35

10009ec8 <sms_ble_advertise>:
        sms_led_blink_start(SMS_LED_0_PIN);
    }
}

at_ble_status_t sms_ble_advertise(void)
{
10009ec8:	b510      	push	{r4, lr}
10009eca:	b084      	sub	sp, #16
    at_ble_status_t status = AT_BLE_FAILURE;
    ble_current_state = BLE_STATE_ADVERTISING;
10009ecc:	2220      	movs	r2, #32
10009ece:	4b17      	ldr	r3, [pc, #92]	; (10009f2c <sms_ble_advertise+0x64>)
10009ed0:	701a      	strb	r2, [r3, #0]

    /* Set the advertisement data */
    if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
10009ed2:	4b17      	ldr	r3, [pc, #92]	; (10009f30 <sms_ble_advertise+0x68>)
10009ed4:	4798      	blx	r3
10009ed6:	1e04      	subs	r4, r0, #0
10009ed8:	d007      	beq.n	10009eea <sms_ble_advertise+0x22>
        DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
10009eda:	4816      	ldr	r0, [pc, #88]	; (10009f34 <sms_ble_advertise+0x6c>)
10009edc:	4b16      	ldr	r3, [pc, #88]	; (10009f38 <sms_ble_advertise+0x70>)
10009ede:	4798      	blx	r3
10009ee0:	4816      	ldr	r0, [pc, #88]	; (10009f3c <sms_ble_advertise+0x74>)
10009ee2:	4b17      	ldr	r3, [pc, #92]	; (10009f40 <sms_ble_advertise+0x78>)
10009ee4:	4798      	blx	r3
        return status;
10009ee6:	0020      	movs	r0, r4
10009ee8:	e01e      	b.n	10009f28 <sms_ble_advertise+0x60>
    }

    /* Start of advertisement */
    if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
10009eea:	2300      	movs	r3, #0
10009eec:	9302      	str	r3, [sp, #8]
10009eee:	4b15      	ldr	r3, [pc, #84]	; (10009f44 <sms_ble_advertise+0x7c>)
10009ef0:	9301      	str	r3, [sp, #4]
10009ef2:	23c8      	movs	r3, #200	; 0xc8
10009ef4:	00db      	lsls	r3, r3, #3
10009ef6:	9300      	str	r3, [sp, #0]
10009ef8:	2300      	movs	r3, #0
10009efa:	2200      	movs	r2, #0
10009efc:	2101      	movs	r1, #1
10009efe:	2000      	movs	r0, #0
10009f00:	4c11      	ldr	r4, [pc, #68]	; (10009f48 <sms_ble_advertise+0x80>)
10009f02:	47a0      	blx	r4
10009f04:	1e04      	subs	r4, r0, #0
10009f06:	d107      	bne.n	10009f18 <sms_ble_advertise+0x50>
    {
        DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
10009f08:	480a      	ldr	r0, [pc, #40]	; (10009f34 <sms_ble_advertise+0x6c>)
10009f0a:	4b0b      	ldr	r3, [pc, #44]	; (10009f38 <sms_ble_advertise+0x70>)
10009f0c:	4798      	blx	r3
10009f0e:	480f      	ldr	r0, [pc, #60]	; (10009f4c <sms_ble_advertise+0x84>)
10009f10:	4b0b      	ldr	r3, [pc, #44]	; (10009f40 <sms_ble_advertise+0x78>)
10009f12:	4798      	blx	r3
        return AT_BLE_SUCCESS;
10009f14:	2000      	movs	r0, #0
10009f16:	e007      	b.n	10009f28 <sms_ble_advertise+0x60>
    } 
    else {
        DBG_LOG("[sms_service_advertise]\tBLE Advertisement start failed: reason 0x%x", status);
10009f18:	4806      	ldr	r0, [pc, #24]	; (10009f34 <sms_ble_advertise+0x6c>)
10009f1a:	4b07      	ldr	r3, [pc, #28]	; (10009f38 <sms_ble_advertise+0x70>)
10009f1c:	4798      	blx	r3
10009f1e:	0021      	movs	r1, r4
10009f20:	480b      	ldr	r0, [pc, #44]	; (10009f50 <sms_ble_advertise+0x88>)
10009f22:	4b07      	ldr	r3, [pc, #28]	; (10009f40 <sms_ble_advertise+0x78>)
10009f24:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
10009f26:	20e2      	movs	r0, #226	; 0xe2
}
10009f28:	b004      	add	sp, #16
10009f2a:	bd10      	pop	{r4, pc}
10009f2c:	10015864 	.word	0x10015864
10009f30:	1000c21d 	.word	0x1000c21d
10009f34:	100123b4 	.word	0x100123b4
10009f38:	100110e9 	.word	0x100110e9
10009f3c:	100125bc 	.word	0x100125bc
10009f40:	10010fc9 	.word	0x10010fc9
10009f44:	0000028f 	.word	0x0000028f
10009f48:	1000d669 	.word	0x1000d669
10009f4c:	100125f0 	.word	0x100125f0
10009f50:	10012620 	.word	0x10012620

10009f54 <sms_ble_disconnected_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
10009f54:	b530      	push	{r4, r5, lr}
10009f56:	b083      	sub	sp, #12
10009f58:	0005      	movs	r5, r0
    at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
    if(ble_current_state == BLE_STATE_PAIRED) {
10009f5a:	4c15      	ldr	r4, [pc, #84]	; (10009fb0 <sms_ble_disconnected_fn+0x5c>)
10009f5c:	7823      	ldrb	r3, [r4, #0]
    }
    ble_current_state = BLE_STATE_DISCONNECTED;
10009f5e:	2311      	movs	r3, #17
10009f60:	7023      	strb	r3, [r4, #0]
    DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
10009f62:	4814      	ldr	r0, [pc, #80]	; (10009fb4 <sms_ble_disconnected_fn+0x60>)
10009f64:	4b14      	ldr	r3, [pc, #80]	; (10009fb8 <sms_ble_disconnected_fn+0x64>)
10009f66:	4798      	blx	r3
10009f68:	7822      	ldrb	r2, [r4, #0]
10009f6a:	b2d2      	uxtb	r2, r2
10009f6c:	4b13      	ldr	r3, [pc, #76]	; (10009fbc <sms_ble_disconnected_fn+0x68>)
10009f6e:	781b      	ldrb	r3, [r3, #0]
10009f70:	b2db      	uxtb	r3, r3
10009f72:	4913      	ldr	r1, [pc, #76]	; (10009fc0 <sms_ble_disconnected_fn+0x6c>)
10009f74:	7808      	ldrb	r0, [r1, #0]
10009f76:	4913      	ldr	r1, [pc, #76]	; (10009fc4 <sms_ble_disconnected_fn+0x70>)
10009f78:	7b49      	ldrb	r1, [r1, #13]
10009f7a:	9000      	str	r0, [sp, #0]
10009f7c:	4812      	ldr	r0, [pc, #72]	; (10009fc8 <sms_ble_disconnected_fn+0x74>)
10009f7e:	4c13      	ldr	r4, [pc, #76]	; (10009fcc <sms_ble_disconnected_fn+0x78>)
10009f80:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
    switch(disconnect->reason) {
10009f82:	78ab      	ldrb	r3, [r5, #2]
10009f84:	2b1a      	cmp	r3, #26
10009f86:	d00b      	beq.n	10009fa0 <sms_ble_disconnected_fn+0x4c>
10009f88:	b2da      	uxtb	r2, r3
10009f8a:	2a1a      	cmp	r2, #26
10009f8c:	d804      	bhi.n	10009f98 <sms_ble_disconnected_fn+0x44>
10009f8e:	2b05      	cmp	r3, #5
10009f90:	d006      	beq.n	10009fa0 <sms_ble_disconnected_fn+0x4c>
10009f92:	2b08      	cmp	r3, #8
10009f94:	d107      	bne.n	10009fa6 <sms_ble_disconnected_fn+0x52>
10009f96:	e003      	b.n	10009fa0 <sms_ble_disconnected_fn+0x4c>
10009f98:	2b29      	cmp	r3, #41	; 0x29
10009f9a:	d001      	beq.n	10009fa0 <sms_ble_disconnected_fn+0x4c>
10009f9c:	2b3b      	cmp	r3, #59	; 0x3b
10009f9e:	d102      	bne.n	10009fa6 <sms_ble_disconnected_fn+0x52>
        case AT_BLE_AUTH_FAILURE: //0x05
        case AT_BLE_SUPERVISION_TIMEOUT: //0x08
        case AT_BLE_UNSUPPORTED_REMOTE_FEATURE: // 0x1A
        case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
        case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
        sms_ble_advertise();
10009fa0:	4b0b      	ldr	r3, [pc, #44]	; (10009fd0 <sms_ble_disconnected_fn+0x7c>)
10009fa2:	4798      	blx	r3
        break;
10009fa4:	e001      	b.n	10009faa <sms_ble_disconnected_fn+0x56>
        case AT_BLE_TERMINATED_BY_USER: // 0x13
        case AT_BLE_REMOTE_DEV_TERM_LOW_RESOURCES: //0x14
        case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
        case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
        default:
        sms_ble_power_down();
10009fa6:	4b0b      	ldr	r3, [pc, #44]	; (10009fd4 <sms_ble_disconnected_fn+0x80>)
10009fa8:	4798      	blx	r3
        break;
    }
    
    return AT_BLE_SUCCESS;
}
10009faa:	2000      	movs	r0, #0
10009fac:	b003      	add	sp, #12
10009fae:	bd30      	pop	{r4, r5, pc}
10009fb0:	10015864 	.word	0x10015864
10009fb4:	100123b4 	.word	0x100123b4
10009fb8:	100110e9 	.word	0x100110e9
10009fbc:	100157f4 	.word	0x100157f4
10009fc0:	1001586b 	.word	0x1001586b
10009fc4:	100157fc 	.word	0x100157fc
10009fc8:	10012664 	.word	0x10012664
10009fcc:	10010fc9 	.word	0x10010fc9
10009fd0:	10009ec9 	.word	0x10009ec9
10009fd4:	10009d35 	.word	0x10009d35

10009fd8 <sms_ble_send_characteristic>:
    NULL, //ble_characteristic_write_cmd_cmp
    NULL //ble_read_authorize_request_handler
};

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
10009fd8:	b570      	push	{r4, r5, r6, lr}
10009fda:	b082      	sub	sp, #8
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
    uint8_t char_size = 0;
    uint8_t send_val[BLE_CHAR_SIZE_MAX];
    ble_current_state = BLE_STATE_INDICATING;
10009fdc:	2223      	movs	r2, #35	; 0x23
10009fde:	4b36      	ldr	r3, [pc, #216]	; (1000a0b8 <sms_ble_send_characteristic+0xe0>)
10009fe0:	701a      	strb	r2, [r3, #0]

    
	sms_ble_sending = true;
10009fe2:	3a22      	subs	r2, #34	; 0x22
10009fe4:	4b35      	ldr	r3, [pc, #212]	; (1000a0bc <sms_ble_send_characteristic+0xe4>)
10009fe6:	701a      	strb	r2, [r3, #0]
    sms_ble_send_cnt++;
10009fe8:	4a35      	ldr	r2, [pc, #212]	; (1000a0c0 <sms_ble_send_characteristic+0xe8>)
10009fea:	8813      	ldrh	r3, [r2, #0]
10009fec:	3301      	adds	r3, #1
10009fee:	8013      	strh	r3, [r2, #0]
    
    switch(ch) {
10009ff0:	2801      	cmp	r0, #1
10009ff2:	d02d      	beq.n	1000a050 <sms_ble_send_characteristic+0x78>
10009ff4:	2800      	cmp	r0, #0
10009ff6:	d002      	beq.n	10009ffe <sms_ble_send_characteristic+0x26>
10009ff8:	2802      	cmp	r0, #2
10009ffa:	d032      	beq.n	1000a062 <sms_ble_send_characteristic+0x8a>
10009ffc:	e03a      	b.n	1000a074 <sms_ble_send_characteristic+0x9c>
        case BLE_CHAR_BTN:
		send_val[0] = 0x00;
10009ffe:	2200      	movs	r2, #0
1000a000:	ab01      	add	r3, sp, #4
1000a002:	701a      	strb	r2, [r3, #0]
		if(button_instance.btn0.new_char) {
1000a004:	4b2f      	ldr	r3, [pc, #188]	; (1000a0c4 <sms_ble_send_characteristic+0xec>)
1000a006:	791b      	ldrb	r3, [r3, #4]
1000a008:	2b00      	cmp	r3, #0
1000a00a:	d00a      	beq.n	1000a022 <sms_ble_send_characteristic+0x4a>
			button_instance.btn0.char_value = ((button_instance.btn0.char_value >= 0x7f) ? 0 : (button_instance.btn0.char_value + 1));
1000a00c:	4b2d      	ldr	r3, [pc, #180]	; (1000a0c4 <sms_ble_send_characteristic+0xec>)
1000a00e:	795a      	ldrb	r2, [r3, #5]
1000a010:	2300      	movs	r3, #0
1000a012:	2a7e      	cmp	r2, #126	; 0x7e
1000a014:	d801      	bhi.n	1000a01a <sms_ble_send_characteristic+0x42>
1000a016:	3201      	adds	r2, #1
1000a018:	b2d3      	uxtb	r3, r2
1000a01a:	4a2a      	ldr	r2, [pc, #168]	; (1000a0c4 <sms_ble_send_characteristic+0xec>)
1000a01c:	7153      	strb	r3, [r2, #5]
			send_val[0] |= button_instance.btn0.char_value;
1000a01e:	aa01      	add	r2, sp, #4
1000a020:	7013      	strb	r3, [r2, #0]
		}
		if(button_instance.btn1.new_char) {
1000a022:	4b28      	ldr	r3, [pc, #160]	; (1000a0c4 <sms_ble_send_characteristic+0xec>)
1000a024:	7a9b      	ldrb	r3, [r3, #10]
1000a026:	2b00      	cmp	r3, #0
1000a028:	d00e      	beq.n	1000a048 <sms_ble_send_characteristic+0x70>
	        button_instance.btn1.char_value = ((button_instance.btn1.char_value >= 0xff) ? 0 : (button_instance.btn1.char_value + 1));
1000a02a:	4b26      	ldr	r3, [pc, #152]	; (1000a0c4 <sms_ble_send_characteristic+0xec>)
1000a02c:	7adb      	ldrb	r3, [r3, #11]
1000a02e:	2bff      	cmp	r3, #255	; 0xff
1000a030:	d002      	beq.n	1000a038 <sms_ble_send_characteristic+0x60>
1000a032:	3301      	adds	r3, #1
1000a034:	b2db      	uxtb	r3, r3
1000a036:	e000      	b.n	1000a03a <sms_ble_send_characteristic+0x62>
1000a038:	2300      	movs	r3, #0
1000a03a:	4a22      	ldr	r2, [pc, #136]	; (1000a0c4 <sms_ble_send_characteristic+0xec>)
1000a03c:	72d3      	strb	r3, [r2, #11]
			send_val[0] |= button_instance.btn1.char_value + 0x80;
1000a03e:	aa01      	add	r2, sp, #4
1000a040:	3b80      	subs	r3, #128	; 0x80
1000a042:	7811      	ldrb	r1, [r2, #0]
1000a044:	430b      	orrs	r3, r1
1000a046:	7013      	strb	r3, [r2, #0]
		}
        val_handle = button_instance.service_handler.serv_chars.char_val_handle;
1000a048:	4b1e      	ldr	r3, [pc, #120]	; (1000a0c4 <sms_ble_send_characteristic+0xec>)
1000a04a:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
        length = BLE_CHAR_SIZE_BUTTON;
1000a04c:	2201      	movs	r2, #1
        break;
1000a04e:	e013      	b.n	1000a078 <sms_ble_send_characteristic+0xa0>
                
        case BLE_CHAR_PRESS:
		DBG_LOG_DEV("[sms_ble_send_characteristic]\tPressure characteristic?");
1000a050:	481d      	ldr	r0, [pc, #116]	; (1000a0c8 <sms_ble_send_characteristic+0xf0>)
1000a052:	4b1e      	ldr	r3, [pc, #120]	; (1000a0cc <sms_ble_send_characteristic+0xf4>)
1000a054:	4798      	blx	r3
1000a056:	481e      	ldr	r0, [pc, #120]	; (1000a0d0 <sms_ble_send_characteristic+0xf8>)
1000a058:	4b1e      	ldr	r3, [pc, #120]	; (1000a0d4 <sms_ble_send_characteristic+0xfc>)
1000a05a:	4798      	blx	r3

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
1000a05c:	2200      	movs	r2, #0
};

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
1000a05e:	2500      	movs	r5, #0
        length = BLE_CHAR_SIZE_BUTTON;
        break;
                
        case BLE_CHAR_PRESS:
		DBG_LOG_DEV("[sms_ble_send_characteristic]\tPressure characteristic?");
        break;
1000a060:	e00a      	b.n	1000a078 <sms_ble_send_characteristic+0xa0>
        
        case BLE_CHAR_MPU:
		DBG_LOG_DEV("[sms_ble_send_characteristic]\tMPU characteristic?");
1000a062:	4819      	ldr	r0, [pc, #100]	; (1000a0c8 <sms_ble_send_characteristic+0xf0>)
1000a064:	4b19      	ldr	r3, [pc, #100]	; (1000a0cc <sms_ble_send_characteristic+0xf4>)
1000a066:	4798      	blx	r3
1000a068:	481b      	ldr	r0, [pc, #108]	; (1000a0d8 <sms_ble_send_characteristic+0x100>)
1000a06a:	4b1a      	ldr	r3, [pc, #104]	; (1000a0d4 <sms_ble_send_characteristic+0xfc>)
1000a06c:	4798      	blx	r3

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
1000a06e:	2200      	movs	r2, #0
};

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
1000a070:	2500      	movs	r5, #0
		DBG_LOG_DEV("[sms_ble_send_characteristic]\tPressure characteristic?");
        break;
        
        case BLE_CHAR_MPU:
		DBG_LOG_DEV("[sms_ble_send_characteristic]\tMPU characteristic?");
        break;
1000a072:	e001      	b.n	1000a078 <sms_ble_send_characteristic+0xa0>

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
1000a074:	2200      	movs	r2, #0
};

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
1000a076:	2500      	movs	r5, #0
    
    //DBG_LOG_DEV("Sending: ");
    //for(int i = 0; i < 20; i += 2) {
        //DBG_LOG_CONT_DEV("0x%02x%02x ", send_val[i], send_val[i+1]);
    //}
    status = at_ble_characteristic_value_set(val_handle, send_val, (length * sizeof(uint8_t)));
1000a078:	b292      	uxth	r2, r2
1000a07a:	a901      	add	r1, sp, #4
1000a07c:	0028      	movs	r0, r5
1000a07e:	4b17      	ldr	r3, [pc, #92]	; (1000a0dc <sms_ble_send_characteristic+0x104>)
1000a080:	4798      	blx	r3
1000a082:	1e04      	subs	r4, r0, #0
    if(status == AT_BLE_SUCCESS) {
1000a084:	d10e      	bne.n	1000a0a4 <sms_ble_send_characteristic+0xcc>
		DBG_LOG_CONT_DEV(" SET! ");
1000a086:	4816      	ldr	r0, [pc, #88]	; (1000a0e0 <sms_ble_send_characteristic+0x108>)
1000a088:	4e12      	ldr	r6, [pc, #72]	; (1000a0d4 <sms_ble_send_characteristic+0xfc>)
1000a08a:	47b0      	blx	r6
//#   if SMS_SENDING_WITH_ACK == true
        //sms_ble_ind_retry = 0;
        //status = at_ble_indication_send(sms_connection_handle, val_handle);
//#   else
        status = at_ble_notification_send(sms_connection_handle, val_handle);
1000a08c:	4b15      	ldr	r3, [pc, #84]	; (1000a0e4 <sms_ble_send_characteristic+0x10c>)
1000a08e:	8818      	ldrh	r0, [r3, #0]
1000a090:	0029      	movs	r1, r5
1000a092:	4b15      	ldr	r3, [pc, #84]	; (1000a0e8 <sms_ble_send_characteristic+0x110>)
1000a094:	4798      	blx	r3
1000a096:	0002      	movs	r2, r0
1000a098:	0004      	movs	r4, r0
		DBG_LOG_CONT_DEV(" %d GONE? %d ", sms_ble_send_cnt, status);
1000a09a:	4b09      	ldr	r3, [pc, #36]	; (1000a0c0 <sms_ble_send_characteristic+0xe8>)
1000a09c:	8819      	ldrh	r1, [r3, #0]
1000a09e:	4813      	ldr	r0, [pc, #76]	; (1000a0ec <sms_ble_send_characteristic+0x114>)
1000a0a0:	47b0      	blx	r6
1000a0a2:	e005      	b.n	1000a0b0 <sms_ble_send_characteristic+0xd8>
			//DBG_LOG_DEV(" NOT gone? ");
            //#pragma TBD: handle sending error...
        //}
    }
	else {
		DBG_LOG_DEV(" NOT set? ");
1000a0a4:	4808      	ldr	r0, [pc, #32]	; (1000a0c8 <sms_ble_send_characteristic+0xf0>)
1000a0a6:	4b09      	ldr	r3, [pc, #36]	; (1000a0cc <sms_ble_send_characteristic+0xf4>)
1000a0a8:	4798      	blx	r3
1000a0aa:	4811      	ldr	r0, [pc, #68]	; (1000a0f0 <sms_ble_send_characteristic+0x118>)
1000a0ac:	4b09      	ldr	r3, [pc, #36]	; (1000a0d4 <sms_ble_send_characteristic+0xfc>)
1000a0ae:	4798      	blx	r3
	}
    return status;
}
1000a0b0:	0020      	movs	r0, r4
1000a0b2:	b002      	add	sp, #8
1000a0b4:	bd70      	pop	{r4, r5, r6, pc}
1000a0b6:	46c0      	nop			; (mov r8, r8)
1000a0b8:	10015864 	.word	0x10015864
1000a0bc:	100157f5 	.word	0x100157f5
1000a0c0:	10015874 	.word	0x10015874
1000a0c4:	100157fc 	.word	0x100157fc
1000a0c8:	100123b4 	.word	0x100123b4
1000a0cc:	100110e9 	.word	0x100110e9
1000a0d0:	100126b8 	.word	0x100126b8
1000a0d4:	10010fc9 	.word	0x10010fc9
1000a0d8:	100126f0 	.word	0x100126f0
1000a0dc:	1000df4d 	.word	0x1000df4d
1000a0e0:	10012724 	.word	0x10012724
1000a0e4:	100157f8 	.word	0x100157f8
1000a0e8:	1000e0ed 	.word	0x1000e0ed
1000a0ec:	1001272c 	.word	0x1001272c
1000a0f0:	1001273c 	.word	0x1001273c

1000a0f4 <sms_ble_primary_service_define>:


at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
1000a0f4:	b510      	push	{r4, lr}
1000a0f6:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
1000a0f8:	0001      	movs	r1, r0
1000a0fa:	3112      	adds	r1, #18
1000a0fc:	2301      	movs	r3, #1
1000a0fe:	9301      	str	r3, [sp, #4]
1000a100:	0003      	movs	r3, r0
1000a102:	3314      	adds	r3, #20
1000a104:	9300      	str	r3, [sp, #0]
1000a106:	2300      	movs	r3, #0
1000a108:	2200      	movs	r2, #0
1000a10a:	4c02      	ldr	r4, [pc, #8]	; (1000a114 <sms_ble_primary_service_define+0x20>)
1000a10c:	47a0      	blx	r4
}
1000a10e:	b002      	add	sp, #8
1000a110:	bd10      	pop	{r4, pc}
1000a112:	46c0      	nop			; (mov r8, r8)
1000a114:	1000df2d 	.word	0x1000df2d

1000a118 <sms_ble_service_init>:


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
1000a118:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a11a:	464f      	mov	r7, r9
1000a11c:	4646      	mov	r6, r8
1000a11e:	b4c0      	push	{r6, r7}
1000a120:	b083      	sub	sp, #12
1000a122:	4694      	mov	ip, r2
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
1000a124:	2800      	cmp	r0, #0
1000a126:	d10b      	bne.n	1000a140 <sms_ble_service_init+0x28>
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
1000a128:	23bb      	movs	r3, #187	; 0xbb
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
1000a12a:	2450      	movs	r4, #80	; 0x50
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
1000a12c:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
1000a12e:	26be      	movs	r6, #190	; 0xbe
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
1000a130:	275a      	movs	r7, #90	; 0x5a
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
1000a132:	3057      	adds	r0, #87	; 0x57
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
1000a134:	221c      	movs	r2, #28
1000a136:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
1000a138:	3a1b      	subs	r2, #27
1000a13a:	9201      	str	r2, [sp, #4]
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
1000a13c:	4691      	mov	r9, r2
1000a13e:	e009      	b.n	1000a154 <sms_ble_service_init+0x3c>


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
1000a140:	2300      	movs	r3, #0
1000a142:	2400      	movs	r4, #0
1000a144:	2500      	movs	r5, #0
1000a146:	2600      	movs	r6, #0
1000a148:	2700      	movs	r7, #0
1000a14a:	2000      	movs	r0, #0
1000a14c:	2200      	movs	r2, #0
1000a14e:	4690      	mov	r8, r2
    uint8_t char_size = 0;
1000a150:	9201      	str	r2, [sp, #4]
}


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
1000a152:	4691      	mov	r9, r2
        
        default:
        break;
    }
    //SMS button service characteristic
    service->serv_handle = handle;
1000a154:	464a      	mov	r2, r9
1000a156:	824a      	strh	r2, [r1, #18]
    service->serv_uuid.type = AT_BLE_UUID_128;
1000a158:	2202      	movs	r2, #2
1000a15a:	700a      	strb	r2, [r1, #0]
    service->serv_uuid.uuid[0] = uuid[0];
1000a15c:	4642      	mov	r2, r8
1000a15e:	704a      	strb	r2, [r1, #1]
    service->serv_uuid.uuid[1] = uuid[1];
1000a160:	7088      	strb	r0, [r1, #2]
    service->serv_uuid.uuid[2] = uuid[2];
1000a162:	70cf      	strb	r7, [r1, #3]
    service->serv_uuid.uuid[3] = uuid[3];
1000a164:	710e      	strb	r6, [r1, #4]
    service->serv_uuid.uuid[4] = uuid[4];
1000a166:	714d      	strb	r5, [r1, #5]
    service->serv_uuid.uuid[5] = uuid[5];
1000a168:	718c      	strb	r4, [r1, #6]
    service->serv_uuid.uuid[6] = uuid[6];
1000a16a:	71cb      	strb	r3, [r1, #7]
    service->serv_uuid.uuid[7] = uuid[7];
1000a16c:	720b      	strb	r3, [r1, #8]
    service->serv_uuid.uuid[8] = uuid[8];
1000a16e:	2300      	movs	r3, #0
1000a170:	724b      	strb	r3, [r1, #9]
    service->serv_uuid.uuid[9] = uuid[9];
1000a172:	728b      	strb	r3, [r1, #10]
    service->serv_uuid.uuid[10] = uuid[10];
1000a174:	72cb      	strb	r3, [r1, #11]
    service->serv_uuid.uuid[11] = uuid[11];
1000a176:	730b      	strb	r3, [r1, #12]
    service->serv_uuid.uuid[12] = uuid[12];
1000a178:	734b      	strb	r3, [r1, #13]
    service->serv_uuid.uuid[13] = uuid[13];
1000a17a:	738b      	strb	r3, [r1, #14]
    service->serv_uuid.uuid[14] = uuid[14];
1000a17c:	73cb      	strb	r3, [r1, #15]
    service->serv_uuid.uuid[15] = uuid[15];
1000a17e:	740b      	strb	r3, [r1, #16]
    
    #   if SMS_SENDING_WITH_ACK == true
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
    #   else
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
1000a180:	2412      	movs	r4, #18
1000a182:	850c      	strh	r4, [r1, #40]	; 0x28
    #   endif
    service->serv_chars.init_value = value; // value
1000a184:	4662      	mov	r2, ip
1000a186:	62ca      	str	r2, [r1, #44]	; 0x2c
    service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
1000a188:	466a      	mov	r2, sp
1000a18a:	8892      	ldrh	r2, [r2, #4]
1000a18c:	860a      	strh	r2, [r1, #48]	; 0x30
    service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
1000a18e:	864a      	strh	r2, [r1, #50]	; 0x32
    service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
1000a190:	2011      	movs	r0, #17
1000a192:	2234      	movs	r2, #52	; 0x34
1000a194:	5488      	strb	r0, [r1, r2]
    service->serv_chars.user_desc = NULL; //user defined name
1000a196:	638b      	str	r3, [r1, #56]	; 0x38
    service->serv_chars.user_desc_len = 0;
1000a198:	2200      	movs	r2, #0
1000a19a:	878b      	strh	r3, [r1, #60]	; 0x3c
    service->serv_chars.user_desc_max_len = 0;
1000a19c:	87cb      	strh	r3, [r1, #62]	; 0x3e
    service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
1000a19e:	3033      	adds	r0, #51	; 0x33
1000a1a0:	540a      	strb	r2, [r1, r0]
    service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
1000a1a2:	3001      	adds	r0, #1
1000a1a4:	540a      	strb	r2, [r1, r0]
    service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
1000a1a6:	3001      	adds	r0, #1
1000a1a8:	540a      	strb	r2, [r1, r0]
    service->serv_chars.user_desc_handle = 0; // user description handles
1000a1aa:	2248      	movs	r2, #72	; 0x48
1000a1ac:	528b      	strh	r3, [r1, r2]
    service->serv_chars.client_config_handle = 0; // client config handles
1000a1ae:	3202      	adds	r2, #2
1000a1b0:	528b      	strh	r3, [r1, r2]
    service->serv_chars.server_config_handle = 0; // server config handles
1000a1b2:	3202      	adds	r2, #2
1000a1b4:	528b      	strh	r3, [r1, r2]
    
    service->serv_chars.presentation_format = NULL; //presentation format
1000a1b6:	640b      	str	r3, [r1, #64]	; 0x40
1000a1b8:	b003      	add	sp, #12
1000a1ba:	bc0c      	pop	{r2, r3}
1000a1bc:	4690      	mov	r8, r2
1000a1be:	4699      	mov	r9, r3
1000a1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a1c2:	46c0      	nop			; (mov r8, r8)

1000a1c4 <sms_button_bt0_callback>:
        gpio_disable_callback(button_instance.btn1.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
1000a1c4:	b510      	push	{r4, lr}
    button_instance.btn0.new_int = true;
1000a1c6:	4b05      	ldr	r3, [pc, #20]	; (1000a1dc <sms_button_bt0_callback+0x18>)
1000a1c8:	2201      	movs	r2, #1
1000a1ca:	70da      	strb	r2, [r3, #3]
    send_plf_int_msg_ind(button_instance.btn0.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000a1cc:	7858      	ldrb	r0, [r3, #1]
1000a1ce:	2300      	movs	r3, #0
1000a1d0:	2200      	movs	r2, #0
1000a1d2:	2102      	movs	r1, #2
1000a1d4:	4c02      	ldr	r4, [pc, #8]	; (1000a1e0 <sms_button_bt0_callback+0x1c>)
1000a1d6:	47a0      	blx	r4
}
1000a1d8:	bd10      	pop	{r4, pc}
1000a1da:	46c0      	nop			; (mov r8, r8)
1000a1dc:	100157fc 	.word	0x100157fc
1000a1e0:	100097c1 	.word	0x100097c1

1000a1e4 <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
1000a1e4:	b510      	push	{r4, lr}
	button_instance.btn1.new_int = true;
1000a1e6:	4b05      	ldr	r3, [pc, #20]	; (1000a1fc <sms_button_bt1_callback+0x18>)
1000a1e8:	2201      	movs	r2, #1
1000a1ea:	725a      	strb	r2, [r3, #9]
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000a1ec:	79d8      	ldrb	r0, [r3, #7]
1000a1ee:	2300      	movs	r3, #0
1000a1f0:	2200      	movs	r2, #0
1000a1f2:	2102      	movs	r1, #2
1000a1f4:	4c02      	ldr	r4, [pc, #8]	; (1000a200 <sms_button_bt1_callback+0x1c>)
1000a1f6:	47a0      	blx	r4
}
1000a1f8:	bd10      	pop	{r4, pc}
1000a1fa:	46c0      	nop			; (mov r8, r8)
1000a1fc:	100157fc 	.word	0x100157fc
1000a200:	100097c1 	.word	0x100097c1

1000a204 <sms_button_configure_gpio>:
/* Callback functions --> doing things                                  */
/************************************************************************/

/* Initialize gpio for button inputs */
void sms_button_configure_gpio(void)
{
1000a204:	b510      	push	{r4, lr}
1000a206:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a208:	ac01      	add	r4, sp, #4
1000a20a:	0020      	movs	r0, r4
1000a20c:	4b20      	ldr	r3, [pc, #128]	; (1000a290 <sms_button_configure_gpio+0x8c>)
1000a20e:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a210:	2300      	movs	r3, #0
1000a212:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a214:	3302      	adds	r3, #2
1000a216:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a218:	3b01      	subs	r3, #1
1000a21a:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn0.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000a21c:	4b1d      	ldr	r3, [pc, #116]	; (1000a294 <sms_button_configure_gpio+0x90>)
1000a21e:	7858      	ldrb	r0, [r3, #1]
1000a220:	0021      	movs	r1, r4
1000a222:	4b1d      	ldr	r3, [pc, #116]	; (1000a298 <sms_button_configure_gpio+0x94>)
1000a224:	4798      	blx	r3
1000a226:	2800      	cmp	r0, #0
1000a228:	d005      	beq.n	1000a236 <sms_button_configure_gpio+0x32>
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
1000a22a:	481c      	ldr	r0, [pc, #112]	; (1000a29c <sms_button_configure_gpio+0x98>)
1000a22c:	4b1c      	ldr	r3, [pc, #112]	; (1000a2a0 <sms_button_configure_gpio+0x9c>)
1000a22e:	4798      	blx	r3
1000a230:	481c      	ldr	r0, [pc, #112]	; (1000a2a4 <sms_button_configure_gpio+0xa0>)
1000a232:	4b1d      	ldr	r3, [pc, #116]	; (1000a2a8 <sms_button_configure_gpio+0xa4>)
1000a234:	4798      	blx	r3
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a236:	ac01      	add	r4, sp, #4
1000a238:	0020      	movs	r0, r4
1000a23a:	4b15      	ldr	r3, [pc, #84]	; (1000a290 <sms_button_configure_gpio+0x8c>)
1000a23c:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a23e:	2300      	movs	r3, #0
1000a240:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a242:	3302      	adds	r3, #2
1000a244:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a246:	3b01      	subs	r3, #1
1000a248:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn1.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000a24a:	4b12      	ldr	r3, [pc, #72]	; (1000a294 <sms_button_configure_gpio+0x90>)
1000a24c:	79d8      	ldrb	r0, [r3, #7]
1000a24e:	0021      	movs	r1, r4
1000a250:	4b11      	ldr	r3, [pc, #68]	; (1000a298 <sms_button_configure_gpio+0x94>)
1000a252:	4798      	blx	r3
1000a254:	2800      	cmp	r0, #0
1000a256:	d005      	beq.n	1000a264 <sms_button_configure_gpio+0x60>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
1000a258:	4810      	ldr	r0, [pc, #64]	; (1000a29c <sms_button_configure_gpio+0x98>)
1000a25a:	4b11      	ldr	r3, [pc, #68]	; (1000a2a0 <sms_button_configure_gpio+0x9c>)
1000a25c:	4798      	blx	r3
1000a25e:	4813      	ldr	r0, [pc, #76]	; (1000a2ac <sms_button_configure_gpio+0xa8>)
1000a260:	4b11      	ldr	r3, [pc, #68]	; (1000a2a8 <sms_button_configure_gpio+0xa4>)
1000a262:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
1000a264:	ac01      	add	r4, sp, #4
1000a266:	0020      	movs	r0, r4
1000a268:	4b09      	ldr	r3, [pc, #36]	; (1000a290 <sms_button_configure_gpio+0x8c>)
1000a26a:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a26c:	2300      	movs	r3, #0
1000a26e:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
1000a270:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000a272:	0021      	movs	r1, r4
1000a274:	2017      	movs	r0, #23
1000a276:	4b08      	ldr	r3, [pc, #32]	; (1000a298 <sms_button_configure_gpio+0x94>)
1000a278:	4798      	blx	r3
1000a27a:	2800      	cmp	r0, #0
1000a27c:	d005      	beq.n	1000a28a <sms_button_configure_gpio+0x86>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
1000a27e:	4807      	ldr	r0, [pc, #28]	; (1000a29c <sms_button_configure_gpio+0x98>)
1000a280:	4b07      	ldr	r3, [pc, #28]	; (1000a2a0 <sms_button_configure_gpio+0x9c>)
1000a282:	4798      	blx	r3
1000a284:	480a      	ldr	r0, [pc, #40]	; (1000a2b0 <sms_button_configure_gpio+0xac>)
1000a286:	4b08      	ldr	r3, [pc, #32]	; (1000a2a8 <sms_button_configure_gpio+0xa4>)
1000a288:	4798      	blx	r3
    }
}
1000a28a:	b002      	add	sp, #8
1000a28c:	bd10      	pop	{r4, pc}
1000a28e:	46c0      	nop			; (mov r8, r8)
1000a290:	10008279 	.word	0x10008279
1000a294:	100157fc 	.word	0x100157fc
1000a298:	10008289 	.word	0x10008289
1000a29c:	100123b4 	.word	0x100123b4
1000a2a0:	100110e9 	.word	0x100110e9
1000a2a4:	100127bc 	.word	0x100127bc
1000a2a8:	10010fc9 	.word	0x10010fc9
1000a2ac:	100127f4 	.word	0x100127f4
1000a2b0:	1001282c 	.word	0x1001282c

1000a2b4 <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
1000a2b4:	b570      	push	{r4, r5, r6, lr}
    /* Button0 callback */
    gpio_register_callback(button_instance.btn0.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
1000a2b6:	4d05      	ldr	r5, [pc, #20]	; (1000a2cc <sms_button_register_callbacks+0x18>)
1000a2b8:	7868      	ldrb	r0, [r5, #1]
1000a2ba:	2202      	movs	r2, #2
1000a2bc:	4904      	ldr	r1, [pc, #16]	; (1000a2d0 <sms_button_register_callbacks+0x1c>)
1000a2be:	4c05      	ldr	r4, [pc, #20]	; (1000a2d4 <sms_button_register_callbacks+0x20>)
1000a2c0:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(button_instance.btn1.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
1000a2c2:	79e8      	ldrb	r0, [r5, #7]
1000a2c4:	2202      	movs	r2, #2
1000a2c6:	4904      	ldr	r1, [pc, #16]	; (1000a2d8 <sms_button_register_callbacks+0x24>)
1000a2c8:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
1000a2ca:	bd70      	pop	{r4, r5, r6, pc}
1000a2cc:	100157fc 	.word	0x100157fc
1000a2d0:	1000a1c5 	.word	0x1000a1c5
1000a2d4:	100086b9 	.word	0x100086b9
1000a2d8:	1000a1e5 	.word	0x1000a1e5

1000a2dc <sms_button_get_state>:
    gpio_disable_callback(SMS_BTN_1_PIN);
}

/* Get current buttons state */
enum sms_button_state sms_button_get_state(void)
{
1000a2dc:	b570      	push	{r4, r5, r6, lr}
    bool b0 = gpio_pin_get_input_level(SMS_BTN_0_PIN);
1000a2de:	201f      	movs	r0, #31
1000a2e0:	4d0c      	ldr	r5, [pc, #48]	; (1000a314 <sms_button_get_state+0x38>)
1000a2e2:	47a8      	blx	r5
1000a2e4:	0004      	movs	r4, r0
    bool b1 = gpio_pin_get_input_level(SMS_BTN_1_PIN);
1000a2e6:	201d      	movs	r0, #29
1000a2e8:	47a8      	blx	r5
1000a2ea:	0005      	movs	r5, r0
1000a2ec:	0006      	movs	r6, r0
    DBG_LOG("[sms_button_get_state]\t\tButton state: %d %d", b1, b0);
1000a2ee:	480a      	ldr	r0, [pc, #40]	; (1000a318 <sms_button_get_state+0x3c>)
1000a2f0:	4b0a      	ldr	r3, [pc, #40]	; (1000a31c <sms_button_get_state+0x40>)
1000a2f2:	4798      	blx	r3
1000a2f4:	0022      	movs	r2, r4
1000a2f6:	0029      	movs	r1, r5
1000a2f8:	4809      	ldr	r0, [pc, #36]	; (1000a320 <sms_button_get_state+0x44>)
1000a2fa:	4b0a      	ldr	r3, [pc, #40]	; (1000a324 <sms_button_get_state+0x48>)
1000a2fc:	4798      	blx	r3
    if(b0 && b1) return BUTTON_STATE_BOTH;
1000a2fe:	2c00      	cmp	r4, #0
1000a300:	d004      	beq.n	1000a30c <sms_button_get_state+0x30>
1000a302:	2003      	movs	r0, #3
1000a304:	2d00      	cmp	r5, #0
1000a306:	d104      	bne.n	1000a312 <sms_button_get_state+0x36>
    else if(b0 && !b1) return BUTTON_STATE_B0;
1000a308:	3802      	subs	r0, #2
1000a30a:	e002      	b.n	1000a312 <sms_button_get_state+0x36>
    else if(!b0 && b1) return BUTTON_STATE_B1;
    else return BUTTON_STATE_NONE;
1000a30c:	1e70      	subs	r0, r6, #1
1000a30e:	4186      	sbcs	r6, r0
1000a310:	0070      	lsls	r0, r6, #1
}
1000a312:	bd70      	pop	{r4, r5, r6, pc}
1000a314:	10008441 	.word	0x10008441
1000a318:	100123b4 	.word	0x100123b4
1000a31c:	100110e9 	.word	0x100110e9
1000a320:	10012874 	.word	0x10012874
1000a324:	10010fc9 	.word	0x10010fc9

1000a328 <sms_button_fn>:
/************************************************************************/
/* Callback functions --> doing things                                  */
/************************************************************************/
/* BUTTON_0 */
int sms_button_fn(enum sms_btn_ids btn)
{
1000a328:	b570      	push	{r4, r5, r6, lr}
1000a32a:	0005      	movs	r5, r0
    button_instance.previous_state = button_instance.current_state;
1000a32c:	4c58      	ldr	r4, [pc, #352]	; (1000a490 <sms_button_fn+0x168>)
1000a32e:	7b63      	ldrb	r3, [r4, #13]
1000a330:	7323      	strb	r3, [r4, #12]
    button_instance.current_state = sms_button_get_state();
1000a332:	4b58      	ldr	r3, [pc, #352]	; (1000a494 <sms_button_fn+0x16c>)
1000a334:	4798      	blx	r3
1000a336:	7360      	strb	r0, [r4, #13]
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
1000a338:	2d00      	cmp	r5, #0
1000a33a:	d103      	bne.n	1000a344 <sms_button_fn+0x1c>
1000a33c:	4856      	ldr	r0, [pc, #344]	; (1000a498 <sms_button_fn+0x170>)
1000a33e:	4b57      	ldr	r3, [pc, #348]	; (1000a49c <sms_button_fn+0x174>)
1000a340:	4798      	blx	r3
1000a342:	e005      	b.n	1000a350 <sms_button_fn+0x28>
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
1000a344:	2d01      	cmp	r5, #1
1000a346:	d000      	beq.n	1000a34a <sms_button_fn+0x22>
1000a348:	e09d      	b.n	1000a486 <sms_button_fn+0x15e>
1000a34a:	4855      	ldr	r0, [pc, #340]	; (1000a4a0 <sms_button_fn+0x178>)
1000a34c:	4b53      	ldr	r3, [pc, #332]	; (1000a49c <sms_button_fn+0x174>)
1000a34e:	4798      	blx	r3
    else return -1;
    
    switch(button_instance.current_state) {
1000a350:	4b4f      	ldr	r3, [pc, #316]	; (1000a490 <sms_button_fn+0x168>)
1000a352:	7b5b      	ldrb	r3, [r3, #13]
1000a354:	2b01      	cmp	r3, #1
1000a356:	d007      	beq.n	1000a368 <sms_button_fn+0x40>
1000a358:	2b00      	cmp	r3, #0
1000a35a:	d100      	bne.n	1000a35e <sms_button_fn+0x36>
1000a35c:	e08e      	b.n	1000a47c <sms_button_fn+0x154>
1000a35e:	2b02      	cmp	r3, #2
1000a360:	d035      	beq.n	1000a3ce <sms_button_fn+0xa6>
1000a362:	2b03      	cmp	r3, #3
1000a364:	d06c      	beq.n	1000a440 <sms_button_fn+0x118>
1000a366:	e091      	b.n	1000a48c <sms_button_fn+0x164>
        // --- current state ---
        case BUTTON_STATE_B0:
        switch(ble_current_state) {
1000a368:	4b4e      	ldr	r3, [pc, #312]	; (1000a4a4 <sms_button_fn+0x17c>)
1000a36a:	781b      	ldrb	r3, [r3, #0]
1000a36c:	b2db      	uxtb	r3, r3
1000a36e:	2b00      	cmp	r3, #0
1000a370:	d003      	beq.n	1000a37a <sms_button_fn+0x52>
1000a372:	3b22      	subs	r3, #34	; 0x22
1000a374:	2b01      	cmp	r3, #1
1000a376:	d81e      	bhi.n	1000a3b6 <sms_button_fn+0x8e>
1000a378:	e010      	b.n	1000a39c <sms_button_fn+0x74>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a37a:	2201      	movs	r2, #1
1000a37c:	4b4a      	ldr	r3, [pc, #296]	; (1000a4a8 <sms_button_fn+0x180>)
1000a37e:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a380:	2400      	movs	r4, #0
1000a382:	4b4a      	ldr	r3, [pc, #296]	; (1000a4ac <sms_button_fn+0x184>)
1000a384:	701c      	strb	r4, [r3, #0]
            sms_btn_cnt = 0;
1000a386:	4b4a      	ldr	r3, [pc, #296]	; (1000a4b0 <sms_button_fn+0x188>)
1000a388:	701c      	strb	r4, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a38a:	2200      	movs	r2, #0
1000a38c:	21fa      	movs	r1, #250	; 0xfa
1000a38e:	2001      	movs	r0, #1
1000a390:	4b48      	ldr	r3, [pc, #288]	; (1000a4b4 <sms_button_fn+0x18c>)
1000a392:	4798      	blx	r3
			ulp_ready = false;
1000a394:	4b48      	ldr	r3, [pc, #288]	; (1000a4b8 <sms_button_fn+0x190>)
1000a396:	701c      	strb	r4, [r3, #0]
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a398:	2000      	movs	r0, #0
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
			ulp_ready = false;
            break;
1000a39a:	e078      	b.n	1000a48e <sms_button_fn+0x166>
            case BLE_STATE_INDICATING:
            //if(pressure_device.state == PRESSURE_STATE_STDBY) {
                //DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B0)");
                //sms_sensors_interrupt_toggle(false, true);
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
1000a39c:	2300      	movs	r3, #0
1000a39e:	4a42      	ldr	r2, [pc, #264]	; (1000a4a8 <sms_button_fn+0x180>)
1000a3a0:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a3a2:	4a42      	ldr	r2, [pc, #264]	; (1000a4ac <sms_button_fn+0x184>)
1000a3a4:	7013      	strb	r3, [r2, #0]
			sms_ble_send_characteristic(BLE_CHAR_BTN);
1000a3a6:	2000      	movs	r0, #0
1000a3a8:	4b44      	ldr	r3, [pc, #272]	; (1000a4bc <sms_button_fn+0x194>)
1000a3aa:	4798      	blx	r3
			ulp_ready = true;
1000a3ac:	2201      	movs	r2, #1
1000a3ae:	4b42      	ldr	r3, [pc, #264]	; (1000a4b8 <sms_button_fn+0x190>)
1000a3b0:	701a      	strb	r2, [r3, #0]
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a3b2:	2000      	movs	r0, #0
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
			sms_ble_send_characteristic(BLE_CHAR_BTN);
			ulp_ready = true;
            break;
1000a3b4:	e06b      	b.n	1000a48e <sms_button_fn+0x166>
            
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used states...");
1000a3b6:	4842      	ldr	r0, [pc, #264]	; (1000a4c0 <sms_button_fn+0x198>)
1000a3b8:	4b42      	ldr	r3, [pc, #264]	; (1000a4c4 <sms_button_fn+0x19c>)
1000a3ba:	4798      	blx	r3
1000a3bc:	4842      	ldr	r0, [pc, #264]	; (1000a4c8 <sms_button_fn+0x1a0>)
1000a3be:	4b43      	ldr	r3, [pc, #268]	; (1000a4cc <sms_button_fn+0x1a4>)
1000a3c0:	4798      	blx	r3
			ulp_ready = true;
1000a3c2:	2201      	movs	r2, #1
1000a3c4:	4b3c      	ldr	r3, [pc, #240]	; (1000a4b8 <sms_button_fn+0x190>)
1000a3c6:	701a      	strb	r2, [r3, #0]
            return -1;
1000a3c8:	2001      	movs	r0, #1
1000a3ca:	4240      	negs	r0, r0
1000a3cc:	e05f      	b.n	1000a48e <sms_button_fn+0x166>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_B1:
        switch(ble_current_state) {
1000a3ce:	4b35      	ldr	r3, [pc, #212]	; (1000a4a4 <sms_button_fn+0x17c>)
1000a3d0:	781b      	ldrb	r3, [r3, #0]
1000a3d2:	b2db      	uxtb	r3, r3
1000a3d4:	2b22      	cmp	r3, #34	; 0x22
1000a3d6:	d014      	beq.n	1000a402 <sms_button_fn+0xda>
1000a3d8:	2b23      	cmp	r3, #35	; 0x23
1000a3da:	d01f      	beq.n	1000a41c <sms_button_fn+0xf4>
1000a3dc:	2b00      	cmp	r3, #0
1000a3de:	d129      	bne.n	1000a434 <sms_button_fn+0x10c>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a3e0:	2201      	movs	r2, #1
1000a3e2:	4b31      	ldr	r3, [pc, #196]	; (1000a4a8 <sms_button_fn+0x180>)
1000a3e4:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a3e6:	2400      	movs	r4, #0
1000a3e8:	4b30      	ldr	r3, [pc, #192]	; (1000a4ac <sms_button_fn+0x184>)
1000a3ea:	701c      	strb	r4, [r3, #0]
            sms_btn_cnt = 0;
1000a3ec:	4b30      	ldr	r3, [pc, #192]	; (1000a4b0 <sms_button_fn+0x188>)
1000a3ee:	701c      	strb	r4, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a3f0:	2200      	movs	r2, #0
1000a3f2:	21fa      	movs	r1, #250	; 0xfa
1000a3f4:	2001      	movs	r0, #1
1000a3f6:	4b2f      	ldr	r3, [pc, #188]	; (1000a4b4 <sms_button_fn+0x18c>)
1000a3f8:	4798      	blx	r3
			ulp_ready = false;
1000a3fa:	4b2f      	ldr	r3, [pc, #188]	; (1000a4b8 <sms_button_fn+0x190>)
1000a3fc:	701c      	strb	r4, [r3, #0]
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a3fe:	2000      	movs	r0, #0
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
			ulp_ready = false;
            break;
1000a400:	e045      	b.n	1000a48e <sms_button_fn+0x166>
            case BLE_STATE_PAIRED:
            //if(pressure_device.state == PRESSURE_STATE_STDBY) {
                //DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B1)");
                //sms_sensors_interrupt_toggle(false, true);
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
1000a402:	2300      	movs	r3, #0
1000a404:	4a28      	ldr	r2, [pc, #160]	; (1000a4a8 <sms_button_fn+0x180>)
1000a406:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a408:	4a28      	ldr	r2, [pc, #160]	; (1000a4ac <sms_button_fn+0x184>)
1000a40a:	7013      	strb	r3, [r2, #0]
            //sms_ble_ind_retry = 0;
            sms_ble_send_characteristic(BLE_CHAR_BTN);
1000a40c:	2000      	movs	r0, #0
1000a40e:	4b2b      	ldr	r3, [pc, #172]	; (1000a4bc <sms_button_fn+0x194>)
1000a410:	4798      	blx	r3
			ulp_ready = true;
1000a412:	2201      	movs	r2, #1
1000a414:	4b28      	ldr	r3, [pc, #160]	; (1000a4b8 <sms_button_fn+0x190>)
1000a416:	701a      	strb	r2, [r3, #0]
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a418:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            sms_ble_send_characteristic(BLE_CHAR_BTN);
			ulp_ready = true;
            break;
1000a41a:	e038      	b.n	1000a48e <sms_button_fn+0x166>
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_button_fn]\tStill indicating...");
1000a41c:	4828      	ldr	r0, [pc, #160]	; (1000a4c0 <sms_button_fn+0x198>)
1000a41e:	4b29      	ldr	r3, [pc, #164]	; (1000a4c4 <sms_button_fn+0x19c>)
1000a420:	4798      	blx	r3
1000a422:	482b      	ldr	r0, [pc, #172]	; (1000a4d0 <sms_button_fn+0x1a8>)
1000a424:	4b29      	ldr	r3, [pc, #164]	; (1000a4cc <sms_button_fn+0x1a4>)
1000a426:	4798      	blx	r3
			ulp_ready = true;
1000a428:	2201      	movs	r2, #1
1000a42a:	4b23      	ldr	r3, [pc, #140]	; (1000a4b8 <sms_button_fn+0x190>)
1000a42c:	701a      	strb	r2, [r3, #0]
            return -1;
1000a42e:	2001      	movs	r0, #1
1000a430:	4240      	negs	r0, r0
1000a432:	e02c      	b.n	1000a48e <sms_button_fn+0x166>
            
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
			ulp_ready = true;
1000a434:	2201      	movs	r2, #1
1000a436:	4b20      	ldr	r3, [pc, #128]	; (1000a4b8 <sms_button_fn+0x190>)
1000a438:	701a      	strb	r2, [r3, #0]
            return -1;
1000a43a:	2001      	movs	r0, #1
1000a43c:	4240      	negs	r0, r0
1000a43e:	e026      	b.n	1000a48e <sms_button_fn+0x166>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_BOTH:
        if(ble_current_state == BLE_STATE_POWEROFF) {
1000a440:	4b18      	ldr	r3, [pc, #96]	; (1000a4a4 <sms_button_fn+0x17c>)
1000a442:	781b      	ldrb	r3, [r3, #0]
1000a444:	2b00      	cmp	r3, #0
1000a446:	d108      	bne.n	1000a45a <sms_button_fn+0x132>
            timer1_current_mode = TIMER1_MODE_NONE;
1000a448:	4a17      	ldr	r2, [pc, #92]	; (1000a4a8 <sms_button_fn+0x180>)
1000a44a:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a44c:	4a17      	ldr	r2, [pc, #92]	; (1000a4ac <sms_button_fn+0x184>)
1000a44e:	7013      	strb	r3, [r2, #0]
            ulp_ready = true;
1000a450:	2201      	movs	r2, #1
1000a452:	4b19      	ldr	r3, [pc, #100]	; (1000a4b8 <sms_button_fn+0x190>)
1000a454:	701a      	strb	r2, [r3, #0]
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a456:	2000      	movs	r0, #0
1000a458:	e019      	b.n	1000a48e <sms_button_fn+0x166>
                //pressure_device.state = PRESSURE_STATE_STDBY;
            //}
            //else {
                //pressure_device.state = PRESSURE_STATE_OFF;
            //}
            timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000a45a:	2202      	movs	r2, #2
1000a45c:	4b12      	ldr	r3, [pc, #72]	; (1000a4a8 <sms_button_fn+0x180>)
1000a45e:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a460:	2400      	movs	r4, #0
1000a462:	4b12      	ldr	r3, [pc, #72]	; (1000a4ac <sms_button_fn+0x184>)
1000a464:	701c      	strb	r4, [r3, #0]
            sms_btn_cnt = 0;
1000a466:	4b12      	ldr	r3, [pc, #72]	; (1000a4b0 <sms_button_fn+0x188>)
1000a468:	701c      	strb	r4, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000a46a:	2200      	movs	r2, #0
1000a46c:	21fa      	movs	r1, #250	; 0xfa
1000a46e:	2001      	movs	r0, #1
1000a470:	4b10      	ldr	r3, [pc, #64]	; (1000a4b4 <sms_button_fn+0x18c>)
1000a472:	4798      	blx	r3
			ulp_ready = false;
1000a474:	4b10      	ldr	r3, [pc, #64]	; (1000a4b8 <sms_button_fn+0x190>)
1000a476:	701c      	strb	r4, [r3, #0]
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a478:	2000      	movs	r0, #0
1000a47a:	e008      	b.n	1000a48e <sms_button_fn+0x166>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
1000a47c:	2201      	movs	r2, #1
1000a47e:	4b0e      	ldr	r3, [pc, #56]	; (1000a4b8 <sms_button_fn+0x190>)
1000a480:	701a      	strb	r2, [r3, #0]
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a482:	2000      	movs	r0, #0
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
1000a484:	e003      	b.n	1000a48e <sms_button_fn+0x166>
    button_instance.previous_state = button_instance.current_state;
    button_instance.current_state = sms_button_get_state();
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
    else return -1;
1000a486:	2001      	movs	r0, #1
1000a488:	4240      	negs	r0, r0
1000a48a:	e000      	b.n	1000a48e <sms_button_fn+0x166>
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a48c:	2000      	movs	r0, #0
}
1000a48e:	bd70      	pop	{r4, r5, r6, pc}
1000a490:	100157fc 	.word	0x100157fc
1000a494:	1000a2dd 	.word	0x1000a2dd
1000a498:	100128a0 	.word	0x100128a0
1000a49c:	1000a601 	.word	0x1000a601
1000a4a0:	100128b4 	.word	0x100128b4
1000a4a4:	10015864 	.word	0x10015864
1000a4a8:	100157f4 	.word	0x100157f4
1000a4ac:	1001586b 	.word	0x1001586b
1000a4b0:	10015876 	.word	0x10015876
1000a4b4:	1000a78d 	.word	0x1000a78d
1000a4b8:	100157f7 	.word	0x100157f7
1000a4bc:	10009fd9 	.word	0x10009fd9
1000a4c0:	100123b4 	.word	0x100123b4
1000a4c4:	100110e9 	.word	0x100110e9
1000a4c8:	100128c8 	.word	0x100128c8
1000a4cc:	10010fc9 	.word	0x10010fc9
1000a4d0:	100128f0 	.word	0x100128f0

1000a4d4 <sms_button_toggle_interrupt>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_interrupt(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
1000a4d4:	b510      	push	{r4, lr}
1000a4d6:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
1000a4d8:	2800      	cmp	r0, #0
1000a4da:	d104      	bne.n	1000a4e6 <sms_button_toggle_interrupt+0x12>
        gpio_enable_callback(button_instance.btn0.gpio_pin);
1000a4dc:	4b0c      	ldr	r3, [pc, #48]	; (1000a510 <sms_button_toggle_interrupt+0x3c>)
1000a4de:	7858      	ldrb	r0, [r3, #1]
1000a4e0:	4b0c      	ldr	r3, [pc, #48]	; (1000a514 <sms_button_toggle_interrupt+0x40>)
1000a4e2:	4798      	blx	r3
1000a4e4:	e005      	b.n	1000a4f2 <sms_button_toggle_interrupt+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
1000a4e6:	2801      	cmp	r0, #1
1000a4e8:	d103      	bne.n	1000a4f2 <sms_button_toggle_interrupt+0x1e>
        gpio_disable_callback(button_instance.btn0.gpio_pin);
1000a4ea:	4b09      	ldr	r3, [pc, #36]	; (1000a510 <sms_button_toggle_interrupt+0x3c>)
1000a4ec:	7858      	ldrb	r0, [r3, #1]
1000a4ee:	4b0a      	ldr	r3, [pc, #40]	; (1000a518 <sms_button_toggle_interrupt+0x44>)
1000a4f0:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
1000a4f2:	2c00      	cmp	r4, #0
1000a4f4:	d104      	bne.n	1000a500 <sms_button_toggle_interrupt+0x2c>
        gpio_enable_callback(button_instance.btn1.gpio_pin);
1000a4f6:	4b06      	ldr	r3, [pc, #24]	; (1000a510 <sms_button_toggle_interrupt+0x3c>)
1000a4f8:	79d8      	ldrb	r0, [r3, #7]
1000a4fa:	4b06      	ldr	r3, [pc, #24]	; (1000a514 <sms_button_toggle_interrupt+0x40>)
1000a4fc:	4798      	blx	r3
1000a4fe:	e005      	b.n	1000a50c <sms_button_toggle_interrupt+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
1000a500:	2c01      	cmp	r4, #1
1000a502:	d103      	bne.n	1000a50c <sms_button_toggle_interrupt+0x38>
        gpio_disable_callback(button_instance.btn1.gpio_pin);
1000a504:	4b02      	ldr	r3, [pc, #8]	; (1000a510 <sms_button_toggle_interrupt+0x3c>)
1000a506:	79d8      	ldrb	r0, [r3, #7]
1000a508:	4b03      	ldr	r3, [pc, #12]	; (1000a518 <sms_button_toggle_interrupt+0x44>)
1000a50a:	4798      	blx	r3
    }
}
1000a50c:	bd10      	pop	{r4, pc}
1000a50e:	46c0      	nop			; (mov r8, r8)
1000a510:	100157fc 	.word	0x100157fc
1000a514:	10008789 	.word	0x10008789
1000a518:	100087e5 	.word	0x100087e5

1000a51c <sms_button_define_services>:
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
1000a51c:	b510      	push	{r4, lr}
1000a51e:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000a520:	466b      	mov	r3, sp
1000a522:	1dda      	adds	r2, r3, #7
1000a524:	2300      	movs	r3, #0
1000a526:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
1000a528:	4c0d      	ldr	r4, [pc, #52]	; (1000a560 <sms_button_define_services+0x44>)
1000a52a:	0021      	movs	r1, r4
1000a52c:	2000      	movs	r0, #0
1000a52e:	4b0d      	ldr	r3, [pc, #52]	; (1000a564 <sms_button_define_services+0x48>)
1000a530:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
1000a532:	0020      	movs	r0, r4
1000a534:	4b0c      	ldr	r3, [pc, #48]	; (1000a568 <sms_button_define_services+0x4c>)
1000a536:	4798      	blx	r3
1000a538:	1e04      	subs	r4, r0, #0
1000a53a:	d007      	beq.n	1000a54c <sms_button_define_services+0x30>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
1000a53c:	480b      	ldr	r0, [pc, #44]	; (1000a56c <sms_button_define_services+0x50>)
1000a53e:	4b0c      	ldr	r3, [pc, #48]	; (1000a570 <sms_button_define_services+0x54>)
1000a540:	4798      	blx	r3
1000a542:	0021      	movs	r1, r4
1000a544:	480b      	ldr	r0, [pc, #44]	; (1000a574 <sms_button_define_services+0x58>)
1000a546:	4b0c      	ldr	r3, [pc, #48]	; (1000a578 <sms_button_define_services+0x5c>)
1000a548:	4798      	blx	r3
1000a54a:	e007      	b.n	1000a55c <sms_button_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
1000a54c:	4807      	ldr	r0, [pc, #28]	; (1000a56c <sms_button_define_services+0x50>)
1000a54e:	4b08      	ldr	r3, [pc, #32]	; (1000a570 <sms_button_define_services+0x54>)
1000a550:	4798      	blx	r3
1000a552:	4b0a      	ldr	r3, [pc, #40]	; (1000a57c <sms_button_define_services+0x60>)
1000a554:	8c59      	ldrh	r1, [r3, #34]	; 0x22
1000a556:	480a      	ldr	r0, [pc, #40]	; (1000a580 <sms_button_define_services+0x64>)
1000a558:	4b07      	ldr	r3, [pc, #28]	; (1000a578 <sms_button_define_services+0x5c>)
1000a55a:	4798      	blx	r3
    }
1000a55c:	b002      	add	sp, #8
1000a55e:	bd10      	pop	{r4, pc}
1000a560:	1001580c 	.word	0x1001580c
1000a564:	1000a119 	.word	0x1000a119
1000a568:	1000a0f5 	.word	0x1000a0f5
1000a56c:	100123b4 	.word	0x100123b4
1000a570:	100110e9 	.word	0x100110e9
1000a574:	10012914 	.word	0x10012914
1000a578:	10010fc9 	.word	0x10010fc9
1000a57c:	100157fc 	.word	0x100157fc
1000a580:	10012958 	.word	0x10012958

1000a584 <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
1000a584:	b510      	push	{r4, lr}
1000a586:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000a588:	ac01      	add	r4, sp, #4
1000a58a:	0020      	movs	r0, r4
1000a58c:	4b15      	ldr	r3, [pc, #84]	; (1000a5e4 <sms_monitor_configure_gpio+0x60>)
1000a58e:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
1000a590:	2301      	movs	r3, #1
1000a592:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
1000a594:	0021      	movs	r1, r4
1000a596:	200e      	movs	r0, #14
1000a598:	4b13      	ldr	r3, [pc, #76]	; (1000a5e8 <sms_monitor_configure_gpio+0x64>)
1000a59a:	4798      	blx	r3
1000a59c:	2800      	cmp	r0, #0
1000a59e:	d005      	beq.n	1000a5ac <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
1000a5a0:	4812      	ldr	r0, [pc, #72]	; (1000a5ec <sms_monitor_configure_gpio+0x68>)
1000a5a2:	4b13      	ldr	r3, [pc, #76]	; (1000a5f0 <sms_monitor_configure_gpio+0x6c>)
1000a5a4:	4798      	blx	r3
1000a5a6:	4813      	ldr	r0, [pc, #76]	; (1000a5f4 <sms_monitor_configure_gpio+0x70>)
1000a5a8:	4b13      	ldr	r3, [pc, #76]	; (1000a5f8 <sms_monitor_configure_gpio+0x74>)
1000a5aa:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000a5ac:	2100      	movs	r1, #0
1000a5ae:	200e      	movs	r0, #14
1000a5b0:	4b12      	ldr	r3, [pc, #72]	; (1000a5fc <sms_monitor_configure_gpio+0x78>)
1000a5b2:	4798      	blx	r3
	
	gpio_get_config_defaults(&config_gpio_pin);
1000a5b4:	ac01      	add	r4, sp, #4
1000a5b6:	0020      	movs	r0, r4
1000a5b8:	4b0a      	ldr	r3, [pc, #40]	; (1000a5e4 <sms_monitor_configure_gpio+0x60>)
1000a5ba:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000a5bc:	2301      	movs	r3, #1
1000a5be:	7023      	strb	r3, [r4, #0]
	if(gpio_pin_set_config(DBG_PIN_2, &config_gpio_pin) != STATUS_OK) {
1000a5c0:	0021      	movs	r1, r4
1000a5c2:	200f      	movs	r0, #15
1000a5c4:	4b08      	ldr	r3, [pc, #32]	; (1000a5e8 <sms_monitor_configure_gpio+0x64>)
1000a5c6:	4798      	blx	r3
1000a5c8:	2800      	cmp	r0, #0
1000a5ca:	d005      	beq.n	1000a5d8 <sms_monitor_configure_gpio+0x54>
		DBG_LOG("Problem while setting gpio pin");
1000a5cc:	4807      	ldr	r0, [pc, #28]	; (1000a5ec <sms_monitor_configure_gpio+0x68>)
1000a5ce:	4b08      	ldr	r3, [pc, #32]	; (1000a5f0 <sms_monitor_configure_gpio+0x6c>)
1000a5d0:	4798      	blx	r3
1000a5d2:	4808      	ldr	r0, [pc, #32]	; (1000a5f4 <sms_monitor_configure_gpio+0x70>)
1000a5d4:	4b08      	ldr	r3, [pc, #32]	; (1000a5f8 <sms_monitor_configure_gpio+0x74>)
1000a5d6:	4798      	blx	r3
	}
	gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000a5d8:	2100      	movs	r1, #0
1000a5da:	200f      	movs	r0, #15
1000a5dc:	4b07      	ldr	r3, [pc, #28]	; (1000a5fc <sms_monitor_configure_gpio+0x78>)
1000a5de:	4798      	blx	r3
}
1000a5e0:	b002      	add	sp, #8
1000a5e2:	bd10      	pop	{r4, pc}
1000a5e4:	10008279 	.word	0x10008279
1000a5e8:	10008289 	.word	0x10008289
1000a5ec:	100123b4 	.word	0x100123b4
1000a5f0:	100110e9 	.word	0x100110e9
1000a5f4:	100129a0 	.word	0x100129a0
1000a5f8:	10010fc9 	.word	0x10010fc9
1000a5fc:	100084e1 	.word	0x100084e1

1000a600 <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
1000a600:	b570      	push	{r4, r5, r6, lr}
1000a602:	b084      	sub	sp, #16
1000a604:	0004      	movs	r4, r0
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
1000a606:	480c      	ldr	r0, [pc, #48]	; (1000a638 <sms_monitor_get_states+0x38>)
1000a608:	4b0c      	ldr	r3, [pc, #48]	; (1000a63c <sms_monitor_get_states+0x3c>)
1000a60a:	4798      	blx	r3
1000a60c:	4b0c      	ldr	r3, [pc, #48]	; (1000a640 <sms_monitor_get_states+0x40>)
1000a60e:	7819      	ldrb	r1, [r3, #0]
1000a610:	4b0c      	ldr	r3, [pc, #48]	; (1000a644 <sms_monitor_get_states+0x44>)
1000a612:	7818      	ldrb	r0, [r3, #0]
1000a614:	4b0c      	ldr	r3, [pc, #48]	; (1000a648 <sms_monitor_get_states+0x48>)
1000a616:	781d      	ldrb	r5, [r3, #0]
1000a618:	4b0c      	ldr	r3, [pc, #48]	; (1000a64c <sms_monitor_get_states+0x4c>)
1000a61a:	781e      	ldrb	r6, [r3, #0]
1000a61c:	4a0c      	ldr	r2, [pc, #48]	; (1000a650 <sms_monitor_get_states+0x50>)
1000a61e:	7b53      	ldrb	r3, [r2, #13]
1000a620:	7b12      	ldrb	r2, [r2, #12]
1000a622:	9603      	str	r6, [sp, #12]
1000a624:	9502      	str	r5, [sp, #8]
1000a626:	9001      	str	r0, [sp, #4]
1000a628:	9100      	str	r1, [sp, #0]
1000a62a:	0021      	movs	r1, r4
1000a62c:	4809      	ldr	r0, [pc, #36]	; (1000a654 <sms_monitor_get_states+0x54>)
1000a62e:	4c0a      	ldr	r4, [pc, #40]	; (1000a658 <sms_monitor_get_states+0x58>)
1000a630:	47a0      	blx	r4
}
1000a632:	b004      	add	sp, #16
1000a634:	bd70      	pop	{r4, r5, r6, pc}
1000a636:	46c0      	nop			; (mov r8, r8)
1000a638:	100123b4 	.word	0x100123b4
1000a63c:	100110e9 	.word	0x100110e9
1000a640:	10015864 	.word	0x10015864
1000a644:	100157f4 	.word	0x100157f4
1000a648:	1001586b 	.word	0x1001586b
1000a64c:	100157f6 	.word	0x100157f6
1000a650:	100157fc 	.word	0x100157fc
1000a654:	100129c0 	.word	0x100129c0
1000a658:	10010fc9 	.word	0x10010fc9

1000a65c <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0_PIN);
}


void sms_led_switch_on(enum sms_leds led)
{
1000a65c:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
1000a65e:	2100      	movs	r1, #0
1000a660:	4b01      	ldr	r3, [pc, #4]	; (1000a668 <sms_led_switch_on+0xc>)
1000a662:	4798      	blx	r3
}
1000a664:	bd10      	pop	{r4, pc}
1000a666:	46c0      	nop			; (mov r8, r8)
1000a668:	100084e1 	.word	0x100084e1

1000a66c <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
1000a66c:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
1000a66e:	2101      	movs	r1, #1
1000a670:	4b01      	ldr	r3, [pc, #4]	; (1000a678 <sms_led_switch_off+0xc>)
1000a672:	4798      	blx	r3
}
1000a674:	bd10      	pop	{r4, pc}
1000a676:	46c0      	nop			; (mov r8, r8)
1000a678:	100084e1 	.word	0x100084e1

1000a67c <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
1000a67c:	b510      	push	{r4, lr}
1000a67e:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a680:	ac01      	add	r4, sp, #4
1000a682:	0020      	movs	r0, r4
1000a684:	4b0a      	ldr	r3, [pc, #40]	; (1000a6b0 <sms_led_gpio_init+0x34>)
1000a686:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000a688:	2301      	movs	r3, #1
1000a68a:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000a68c:	0021      	movs	r1, r4
1000a68e:	2016      	movs	r0, #22
1000a690:	4b08      	ldr	r3, [pc, #32]	; (1000a6b4 <sms_led_gpio_init+0x38>)
1000a692:	4798      	blx	r3
1000a694:	2800      	cmp	r0, #0
1000a696:	d005      	beq.n	1000a6a4 <sms_led_gpio_init+0x28>
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
1000a698:	4807      	ldr	r0, [pc, #28]	; (1000a6b8 <sms_led_gpio_init+0x3c>)
1000a69a:	4b08      	ldr	r3, [pc, #32]	; (1000a6bc <sms_led_gpio_init+0x40>)
1000a69c:	4798      	blx	r3
1000a69e:	4808      	ldr	r0, [pc, #32]	; (1000a6c0 <sms_led_gpio_init+0x44>)
1000a6a0:	4b08      	ldr	r3, [pc, #32]	; (1000a6c4 <sms_led_gpio_init+0x48>)
1000a6a2:	4798      	blx	r3
    }
    sms_led_switch_off(SMS_LED_0_PIN);
1000a6a4:	2016      	movs	r0, #22
1000a6a6:	4b08      	ldr	r3, [pc, #32]	; (1000a6c8 <sms_led_gpio_init+0x4c>)
1000a6a8:	4798      	blx	r3
}
1000a6aa:	b002      	add	sp, #8
1000a6ac:	bd10      	pop	{r4, pc}
1000a6ae:	46c0      	nop			; (mov r8, r8)
1000a6b0:	10008279 	.word	0x10008279
1000a6b4:	10008289 	.word	0x10008289
1000a6b8:	100123b4 	.word	0x100123b4
1000a6bc:	100110e9 	.word	0x100110e9
1000a6c0:	10012a00 	.word	0x10012a00
1000a6c4:	10010fc9 	.word	0x10010fc9
1000a6c8:	1000a66d 	.word	0x1000a66d

1000a6cc <sms_led_toggle>:
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
}


void sms_led_toggle(enum sms_leds led)
{
1000a6cc:	b510      	push	{r4, lr}
1000a6ce:	0004      	movs	r4, r0
}


bool sms_led_get_state(enum sms_leds led)
{
    return gpio_pin_get_output_level(led);
1000a6d0:	4b05      	ldr	r3, [pc, #20]	; (1000a6e8 <sms_led_toggle+0x1c>)
1000a6d2:	4798      	blx	r3


void sms_led_toggle(enum sms_leds led)
{
    bool state = sms_led_get_state(led);
    if(state == SMS_LED_ACTIVE) sms_led_switch_off(led);
1000a6d4:	2800      	cmp	r0, #0
1000a6d6:	d103      	bne.n	1000a6e0 <sms_led_toggle+0x14>
1000a6d8:	0020      	movs	r0, r4
1000a6da:	4b04      	ldr	r3, [pc, #16]	; (1000a6ec <sms_led_toggle+0x20>)
1000a6dc:	4798      	blx	r3
1000a6de:	e002      	b.n	1000a6e6 <sms_led_toggle+0x1a>
    else sms_led_switch_on(led);
1000a6e0:	0020      	movs	r0, r4
1000a6e2:	4b03      	ldr	r3, [pc, #12]	; (1000a6f0 <sms_led_toggle+0x24>)
1000a6e4:	4798      	blx	r3
}
1000a6e6:	bd10      	pop	{r4, pc}
1000a6e8:	10008491 	.word	0x10008491
1000a6ec:	1000a66d 	.word	0x1000a66d
1000a6f0:	1000a65d 	.word	0x1000a65d

1000a6f4 <sms_led_blink_start>:
    return gpio_pin_get_output_level(led);
}


void sms_led_blink_start(enum sms_leds led)
{
1000a6f4:	b510      	push	{r4, lr}
    sms_led_switch_on(led);
1000a6f6:	4b0c      	ldr	r3, [pc, #48]	; (1000a728 <sms_led_blink_start+0x34>)
1000a6f8:	4798      	blx	r3
    sms_led_blink_cnt = 0;
1000a6fa:	2200      	movs	r2, #0
1000a6fc:	4b0b      	ldr	r3, [pc, #44]	; (1000a72c <sms_led_blink_start+0x38>)
1000a6fe:	701a      	strb	r2, [r3, #0]
    uint32_t delay = 0;
    switch(timer2_current_mode) {
1000a700:	4b0b      	ldr	r3, [pc, #44]	; (1000a730 <sms_led_blink_start+0x3c>)
1000a702:	781b      	ldrb	r3, [r3, #0]
1000a704:	b2db      	uxtb	r3, r3
1000a706:	2b02      	cmp	r3, #2
1000a708:	d002      	beq.n	1000a710 <sms_led_blink_start+0x1c>
1000a70a:	2b03      	cmp	r3, #3
1000a70c:	d002      	beq.n	1000a714 <sms_led_blink_start+0x20>
1000a70e:	e004      	b.n	1000a71a <sms_led_blink_start+0x26>
        case TIMER2_MODE_LED_STARTUP:
        delay = SMS_BLINK_STARTUP_MS;
1000a710:	2164      	movs	r1, #100	; 0x64
1000a712:	e003      	b.n	1000a71c <sms_led_blink_start+0x28>
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        delay = SMS_BLINK_SHTDWN_MS;
1000a714:	21c8      	movs	r1, #200	; 0xc8
1000a716:	0049      	lsls	r1, r1, #1
        break;
1000a718:	e000      	b.n	1000a71c <sms_led_blink_start+0x28>

void sms_led_blink_start(enum sms_leds led)
{
    sms_led_switch_on(led);
    sms_led_blink_cnt = 0;
    uint32_t delay = 0;
1000a71a:	2100      	movs	r1, #0
        
        default:
        break;
    }

    sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
1000a71c:	2201      	movs	r2, #1
1000a71e:	2001      	movs	r0, #1
1000a720:	4b04      	ldr	r3, [pc, #16]	; (1000a734 <sms_led_blink_start+0x40>)
1000a722:	4798      	blx	r3
}
1000a724:	bd10      	pop	{r4, pc}
1000a726:	46c0      	nop			; (mov r8, r8)
1000a728:	1000a65d 	.word	0x1000a65d
1000a72c:	1001587c 	.word	0x1001587c
1000a730:	1001586b 	.word	0x1001586b
1000a734:	1000a78d 	.word	0x1000a78d

1000a738 <sms_dualtimer_init>:
    count = (uint32_t *)0;
}

/* DUALTIMER */
void sms_dualtimer_init(void)
{
1000a738:	b510      	push	{r4, lr}
1000a73a:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000a73c:	ac01      	add	r4, sp, #4
1000a73e:	0020      	movs	r0, r4
1000a740:	4b08      	ldr	r3, [pc, #32]	; (1000a764 <sms_dualtimer_init+0x2c>)
1000a742:	4798      	blx	r3

    config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_S;
1000a744:	4a08      	ldr	r2, [pc, #32]	; (1000a768 <sms_dualtimer_init+0x30>)
1000a746:	60a2      	str	r2, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000a748:	2300      	movs	r3, #0
1000a74a:	7063      	strb	r3, [r4, #1]
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_S;
1000a74c:	6162      	str	r2, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000a74e:	7363      	strb	r3, [r4, #13]

    dualtimer_init(&config_dualtimer);
1000a750:	0020      	movs	r0, r4
1000a752:	4b06      	ldr	r3, [pc, #24]	; (1000a76c <sms_dualtimer_init+0x34>)
1000a754:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000a756:	2000      	movs	r0, #0
1000a758:	4c05      	ldr	r4, [pc, #20]	; (1000a770 <sms_dualtimer_init+0x38>)
1000a75a:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
1000a75c:	2001      	movs	r0, #1
1000a75e:	47a0      	blx	r4
}
1000a760:	b008      	add	sp, #32
1000a762:	bd10      	pop	{r4, pc}
1000a764:	1000abf9 	.word	0x1000abf9
1000a768:	018cba80 	.word	0x018cba80
1000a76c:	1000ac8d 	.word	0x1000ac8d
1000a770:	1000ac69 	.word	0x1000ac69

1000a774 <sms_dualtimer_register_callback>:

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
1000a774:	b510      	push	{r4, lr}
1000a776:	0004      	movs	r4, r0
    dualtimer_register_callback(tmr, cb_handler);
1000a778:	4b02      	ldr	r3, [pc, #8]	; (1000a784 <sms_dualtimer_register_callback+0x10>)
1000a77a:	4798      	blx	r3
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000a77c:	0020      	movs	r0, r4
1000a77e:	4b02      	ldr	r3, [pc, #8]	; (1000a788 <sms_dualtimer_register_callback+0x14>)
1000a780:	4798      	blx	r3

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}
1000a782:	bd10      	pop	{r4, pc}
1000a784:	1000ad91 	.word	0x1000ad91
1000a788:	1000ac69 	.word	0x1000ac69

1000a78c <sms_dualtimer_start>:

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
1000a78c:	b510      	push	{r4, lr}
1000a78e:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
1000a790:	2801      	cmp	r0, #1
1000a792:	d006      	beq.n	1000a7a2 <sms_dualtimer_start+0x16>
1000a794:	2800      	cmp	r0, #0
1000a796:	d002      	beq.n	1000a79e <sms_dualtimer_start+0x12>
1000a798:	2802      	cmp	r0, #2
1000a79a:	d004      	beq.n	1000a7a6 <sms_dualtimer_start+0x1a>
1000a79c:	e005      	b.n	1000a7aa <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
1000a79e:	221a      	movs	r2, #26
1000a7a0:	e004      	b.n	1000a7ac <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
1000a7a2:	4a0c      	ldr	r2, [pc, #48]	; (1000a7d4 <sms_dualtimer_start+0x48>)
        break;
1000a7a4:	e002      	b.n	1000a7ac <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
1000a7a6:	4a0c      	ldr	r2, [pc, #48]	; (1000a7d8 <sms_dualtimer_start+0x4c>)
        break;
1000a7a8:	e000      	b.n	1000a7ac <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
1000a7aa:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
1000a7ac:	2900      	cmp	r1, #0
1000a7ae:	d101      	bne.n	1000a7b4 <sms_dualtimer_start+0x28>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1000");
        delay = 1000;
1000a7b0:	21fa      	movs	r1, #250	; 0xfa
1000a7b2:	0089      	lsls	r1, r1, #2
    }
    
    ulp_ready = false;
1000a7b4:	2000      	movs	r0, #0
1000a7b6:	4b09      	ldr	r3, [pc, #36]	; (1000a7dc <sms_dualtimer_start+0x50>)
1000a7b8:	7018      	strb	r0, [r3, #0]
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
1000a7ba:	434a      	muls	r2, r1
1000a7bc:	2100      	movs	r1, #0
1000a7be:	0020      	movs	r0, r4
1000a7c0:	4b07      	ldr	r3, [pc, #28]	; (1000a7e0 <sms_dualtimer_start+0x54>)
1000a7c2:	4798      	blx	r3
    dualtimer_enable(tmr);
1000a7c4:	0020      	movs	r0, r4
1000a7c6:	4b07      	ldr	r3, [pc, #28]	; (1000a7e4 <sms_dualtimer_start+0x58>)
1000a7c8:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a7ca:	2280      	movs	r2, #128	; 0x80
1000a7cc:	01d2      	lsls	r2, r2, #7
1000a7ce:	4b06      	ldr	r3, [pc, #24]	; (1000a7e8 <sms_dualtimer_start+0x5c>)
1000a7d0:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000a7d2:	bd10      	pop	{r4, pc}
1000a7d4:	00006590 	.word	0x00006590
1000a7d8:	018cba80 	.word	0x018cba80
1000a7dc:	100157f7 	.word	0x100157f7
1000a7e0:	1000ac1d 	.word	0x1000ac1d
1000a7e4:	1000ac45 	.word	0x1000ac45
1000a7e8:	e000e100 	.word	0xe000e100

1000a7ec <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
1000a7ec:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
1000a7ee:	4b01      	ldr	r3, [pc, #4]	; (1000a7f4 <sms_dualtimer_stop+0x8>)
1000a7f0:	4798      	blx	r3
}
1000a7f2:	bd10      	pop	{r4, pc}
1000a7f4:	1000ac69 	.word	0x1000ac69

1000a7f8 <sms_dualtimer1_cb>:

void sms_dualtimer1_cb(void)
{
1000a7f8:	b510      	push	{r4, lr}
    timer1_instance.new_int = true;
1000a7fa:	2201      	movs	r2, #1
1000a7fc:	4b04      	ldr	r3, [pc, #16]	; (1000a810 <sms_dualtimer1_cb+0x18>)
1000a7fe:	709a      	strb	r2, [r3, #2]
    send_plf_int_msg_ind(DUALTIMER_TIMER1_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000a800:	2300      	movs	r3, #0
1000a802:	2200      	movs	r2, #0
1000a804:	2101      	movs	r1, #1
1000a806:	2040      	movs	r0, #64	; 0x40
1000a808:	4c02      	ldr	r4, [pc, #8]	; (1000a814 <sms_dualtimer1_cb+0x1c>)
1000a80a:	47a0      	blx	r4
}
1000a80c:	bd10      	pop	{r4, pc}
1000a80e:	46c0      	nop			; (mov r8, r8)
1000a810:	1001585c 	.word	0x1001585c
1000a814:	100097c1 	.word	0x100097c1

1000a818 <sms_dualtimer2_cb>:

void sms_dualtimer2_cb(void)
{
1000a818:	b510      	push	{r4, lr}
    timer2_instance.new_int = true;
1000a81a:	2201      	movs	r2, #1
1000a81c:	4b04      	ldr	r3, [pc, #16]	; (1000a830 <sms_dualtimer2_cb+0x18>)
1000a81e:	709a      	strb	r2, [r3, #2]
    send_plf_int_msg_ind(DUALTIMER_TIMER2_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000a820:	2300      	movs	r3, #0
1000a822:	2200      	movs	r2, #0
1000a824:	2101      	movs	r1, #1
1000a826:	2041      	movs	r0, #65	; 0x41
1000a828:	4c02      	ldr	r4, [pc, #8]	; (1000a834 <sms_dualtimer2_cb+0x1c>)
1000a82a:	47a0      	blx	r4
}
1000a82c:	bd10      	pop	{r4, pc}
1000a82e:	46c0      	nop			; (mov r8, r8)
1000a830:	10015868 	.word	0x10015868
1000a834:	100097c1 	.word	0x100097c1

1000a838 <sms_dualtimer1_fn>:


void sms_dualtimer1_fn(void)
{
1000a838:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    switch(timer1_current_mode) {
1000a83a:	4b75      	ldr	r3, [pc, #468]	; (1000aa10 <sms_dualtimer1_fn+0x1d8>)
1000a83c:	781b      	ldrb	r3, [r3, #0]
1000a83e:	b2db      	uxtb	r3, r3
1000a840:	2b01      	cmp	r3, #1
1000a842:	d003      	beq.n	1000a84c <sms_dualtimer1_fn+0x14>
1000a844:	2b02      	cmp	r3, #2
1000a846:	d100      	bne.n	1000a84a <sms_dualtimer1_fn+0x12>
1000a848:	e0ae      	b.n	1000a9a8 <sms_dualtimer1_fn+0x170>
1000a84a:	e0d8      	b.n	1000a9fe <sms_dualtimer1_fn+0x1c6>
        /* Timer1 mode = STARTUP */
        case TIMER1_MODE_STARTUP:
        {
            timer1_current_mode = TIMER1_MODE_NONE;
1000a84c:	2200      	movs	r2, #0
1000a84e:	4b70      	ldr	r3, [pc, #448]	; (1000aa10 <sms_dualtimer1_fn+0x1d8>)
1000a850:	701a      	strb	r2, [r3, #0]
            button_instance.previous_state = button_instance.current_state;
1000a852:	4c70      	ldr	r4, [pc, #448]	; (1000aa14 <sms_dualtimer1_fn+0x1dc>)
1000a854:	7b63      	ldrb	r3, [r4, #13]
1000a856:	7323      	strb	r3, [r4, #12]
            button_instance.current_state = sms_button_get_state();
1000a858:	4b6f      	ldr	r3, [pc, #444]	; (1000aa18 <sms_dualtimer1_fn+0x1e0>)
1000a85a:	4798      	blx	r3
1000a85c:	7360      	strb	r0, [r4, #13]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000a85e:	486f      	ldr	r0, [pc, #444]	; (1000aa1c <sms_dualtimer1_fn+0x1e4>)
1000a860:	4b6f      	ldr	r3, [pc, #444]	; (1000aa20 <sms_dualtimer1_fn+0x1e8>)
1000a862:	4798      	blx	r3
            
            switch(button_instance.previous_state) {
1000a864:	7b23      	ldrb	r3, [r4, #12]
1000a866:	2b01      	cmp	r3, #1
1000a868:	d002      	beq.n	1000a870 <sms_dualtimer1_fn+0x38>
1000a86a:	2b02      	cmp	r3, #2
1000a86c:	d04c      	beq.n	1000a908 <sms_dualtimer1_fn+0xd0>
1000a86e:	e093      	b.n	1000a998 <sms_dualtimer1_fn+0x160>
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B0:
                switch(button_instance.current_state) {
1000a870:	4b68      	ldr	r3, [pc, #416]	; (1000aa14 <sms_dualtimer1_fn+0x1dc>)
1000a872:	7b5b      	ldrb	r3, [r3, #13]
1000a874:	2b01      	cmp	r3, #1
1000a876:	d002      	beq.n	1000a87e <sms_dualtimer1_fn+0x46>
1000a878:	2b02      	cmp	r3, #2
1000a87a:	d023      	beq.n	1000a8c4 <sms_dualtimer1_fn+0x8c>
1000a87c:	e03b      	b.n	1000a8f6 <sms_dualtimer1_fn+0xbe>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000a87e:	4b69      	ldr	r3, [pc, #420]	; (1000aa24 <sms_dualtimer1_fn+0x1ec>)
1000a880:	781b      	ldrb	r3, [r3, #0]
1000a882:	2b00      	cmp	r3, #0
1000a884:	d115      	bne.n	1000a8b2 <sms_dualtimer1_fn+0x7a>
                        sms_btn_cnt++;
1000a886:	4a68      	ldr	r2, [pc, #416]	; (1000aa28 <sms_dualtimer1_fn+0x1f0>)
1000a888:	7813      	ldrb	r3, [r2, #0]
1000a88a:	3301      	adds	r3, #1
1000a88c:	b2db      	uxtb	r3, r3
1000a88e:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000a890:	2b0f      	cmp	r3, #15
1000a892:	d905      	bls.n	1000a8a0 <sms_dualtimer1_fn+0x68>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000a894:	2200      	movs	r2, #0
1000a896:	4b5e      	ldr	r3, [pc, #376]	; (1000aa10 <sms_dualtimer1_fn+0x1d8>)
1000a898:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000a89a:	4b64      	ldr	r3, [pc, #400]	; (1000aa2c <sms_dualtimer1_fn+0x1f4>)
1000a89c:	4798      	blx	r3
1000a89e:	e0b5      	b.n	1000aa0c <sms_dualtimer1_fn+0x1d4>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a8a0:	2201      	movs	r2, #1
1000a8a2:	4b5b      	ldr	r3, [pc, #364]	; (1000aa10 <sms_dualtimer1_fn+0x1d8>)
1000a8a4:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a8a6:	2200      	movs	r2, #0
1000a8a8:	21fa      	movs	r1, #250	; 0xfa
1000a8aa:	2001      	movs	r0, #1
1000a8ac:	4b60      	ldr	r3, [pc, #384]	; (1000aa30 <sms_dualtimer1_fn+0x1f8>)
1000a8ae:	4798      	blx	r3
1000a8b0:	e0ac      	b.n	1000aa0c <sms_dualtimer1_fn+0x1d4>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a8b2:	4b60      	ldr	r3, [pc, #384]	; (1000aa34 <sms_dualtimer1_fn+0x1fc>)
1000a8b4:	781b      	ldrb	r3, [r3, #0]
1000a8b6:	2b00      	cmp	r3, #0
1000a8b8:	d000      	beq.n	1000a8bc <sms_dualtimer1_fn+0x84>
1000a8ba:	e0a7      	b.n	1000aa0c <sms_dualtimer1_fn+0x1d4>
                            //release_sleep_lock();
                            ulp_ready = true;
1000a8bc:	2201      	movs	r2, #1
1000a8be:	4b5e      	ldr	r3, [pc, #376]	; (1000aa38 <sms_dualtimer1_fn+0x200>)
1000a8c0:	701a      	strb	r2, [r3, #0]
1000a8c2:	e0a3      	b.n	1000aa0c <sms_dualtimer1_fn+0x1d4>
                    }
                    break;
                    
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000a8c4:	4b57      	ldr	r3, [pc, #348]	; (1000aa24 <sms_dualtimer1_fn+0x1ec>)
1000a8c6:	781b      	ldrb	r3, [r3, #0]
1000a8c8:	2b00      	cmp	r3, #0
1000a8ca:	d10b      	bne.n	1000a8e4 <sms_dualtimer1_fn+0xac>
                        sms_btn_cnt = 0;
1000a8cc:	2200      	movs	r2, #0
1000a8ce:	4b56      	ldr	r3, [pc, #344]	; (1000aa28 <sms_dualtimer1_fn+0x1f0>)
1000a8d0:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000a8d2:	3201      	adds	r2, #1
1000a8d4:	4b4e      	ldr	r3, [pc, #312]	; (1000aa10 <sms_dualtimer1_fn+0x1d8>)
1000a8d6:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000a8d8:	2200      	movs	r2, #0
1000a8da:	2164      	movs	r1, #100	; 0x64
1000a8dc:	2001      	movs	r0, #1
1000a8de:	4b54      	ldr	r3, [pc, #336]	; (1000aa30 <sms_dualtimer1_fn+0x1f8>)
1000a8e0:	4798      	blx	r3
1000a8e2:	e093      	b.n	1000aa0c <sms_dualtimer1_fn+0x1d4>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a8e4:	4b53      	ldr	r3, [pc, #332]	; (1000aa34 <sms_dualtimer1_fn+0x1fc>)
1000a8e6:	781b      	ldrb	r3, [r3, #0]
1000a8e8:	2b00      	cmp	r3, #0
1000a8ea:	d000      	beq.n	1000a8ee <sms_dualtimer1_fn+0xb6>
1000a8ec:	e08e      	b.n	1000aa0c <sms_dualtimer1_fn+0x1d4>
                            //release_sleep_lock();
                            ulp_ready = true;
1000a8ee:	2201      	movs	r2, #1
1000a8f0:	4b51      	ldr	r3, [pc, #324]	; (1000aa38 <sms_dualtimer1_fn+0x200>)
1000a8f2:	701a      	strb	r2, [r3, #0]
1000a8f4:	e08a      	b.n	1000aa0c <sms_dualtimer1_fn+0x1d4>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_BOTH:
                    case BUTTON_STATE_NONE:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a8f6:	4b4f      	ldr	r3, [pc, #316]	; (1000aa34 <sms_dualtimer1_fn+0x1fc>)
1000a8f8:	781b      	ldrb	r3, [r3, #0]
1000a8fa:	2b00      	cmp	r3, #0
1000a8fc:	d000      	beq.n	1000a900 <sms_dualtimer1_fn+0xc8>
1000a8fe:	e085      	b.n	1000aa0c <sms_dualtimer1_fn+0x1d4>
                        //release_sleep_lock();
                        ulp_ready = true;
1000a900:	2201      	movs	r2, #1
1000a902:	4b4d      	ldr	r3, [pc, #308]	; (1000aa38 <sms_dualtimer1_fn+0x200>)
1000a904:	701a      	strb	r2, [r3, #0]
1000a906:	e081      	b.n	1000aa0c <sms_dualtimer1_fn+0x1d4>
                }
                break;
                
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B1:
                switch(button_instance.current_state) {
1000a908:	4b42      	ldr	r3, [pc, #264]	; (1000aa14 <sms_dualtimer1_fn+0x1dc>)
1000a90a:	7b5b      	ldrb	r3, [r3, #13]
1000a90c:	2b01      	cmp	r3, #1
1000a90e:	d023      	beq.n	1000a958 <sms_dualtimer1_fn+0x120>
1000a910:	2b02      	cmp	r3, #2
1000a912:	d139      	bne.n	1000a988 <sms_dualtimer1_fn+0x150>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000a914:	4b43      	ldr	r3, [pc, #268]	; (1000aa24 <sms_dualtimer1_fn+0x1ec>)
1000a916:	781b      	ldrb	r3, [r3, #0]
1000a918:	2b00      	cmp	r3, #0
1000a91a:	d115      	bne.n	1000a948 <sms_dualtimer1_fn+0x110>
                        sms_btn_cnt++;
1000a91c:	4a42      	ldr	r2, [pc, #264]	; (1000aa28 <sms_dualtimer1_fn+0x1f0>)
1000a91e:	7813      	ldrb	r3, [r2, #0]
1000a920:	3301      	adds	r3, #1
1000a922:	b2db      	uxtb	r3, r3
1000a924:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000a926:	2b0f      	cmp	r3, #15
1000a928:	d905      	bls.n	1000a936 <sms_dualtimer1_fn+0xfe>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000a92a:	2200      	movs	r2, #0
1000a92c:	4b38      	ldr	r3, [pc, #224]	; (1000aa10 <sms_dualtimer1_fn+0x1d8>)
1000a92e:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000a930:	4b3e      	ldr	r3, [pc, #248]	; (1000aa2c <sms_dualtimer1_fn+0x1f4>)
1000a932:	4798      	blx	r3
1000a934:	e06a      	b.n	1000aa0c <sms_dualtimer1_fn+0x1d4>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a936:	2201      	movs	r2, #1
1000a938:	4b35      	ldr	r3, [pc, #212]	; (1000aa10 <sms_dualtimer1_fn+0x1d8>)
1000a93a:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a93c:	2200      	movs	r2, #0
1000a93e:	21fa      	movs	r1, #250	; 0xfa
1000a940:	2001      	movs	r0, #1
1000a942:	4b3b      	ldr	r3, [pc, #236]	; (1000aa30 <sms_dualtimer1_fn+0x1f8>)
1000a944:	4798      	blx	r3
1000a946:	e061      	b.n	1000aa0c <sms_dualtimer1_fn+0x1d4>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a948:	4b3a      	ldr	r3, [pc, #232]	; (1000aa34 <sms_dualtimer1_fn+0x1fc>)
1000a94a:	781b      	ldrb	r3, [r3, #0]
1000a94c:	2b00      	cmp	r3, #0
1000a94e:	d15d      	bne.n	1000aa0c <sms_dualtimer1_fn+0x1d4>
                            //release_sleep_lock();
                            ulp_ready = true;
1000a950:	2201      	movs	r2, #1
1000a952:	4b39      	ldr	r3, [pc, #228]	; (1000aa38 <sms_dualtimer1_fn+0x200>)
1000a954:	701a      	strb	r2, [r3, #0]
1000a956:	e059      	b.n	1000aa0c <sms_dualtimer1_fn+0x1d4>
                    }
                    break;
                    
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000a958:	4b32      	ldr	r3, [pc, #200]	; (1000aa24 <sms_dualtimer1_fn+0x1ec>)
1000a95a:	781b      	ldrb	r3, [r3, #0]
1000a95c:	2b00      	cmp	r3, #0
1000a95e:	d10b      	bne.n	1000a978 <sms_dualtimer1_fn+0x140>
                        sms_btn_cnt = 0;
1000a960:	2200      	movs	r2, #0
1000a962:	4b31      	ldr	r3, [pc, #196]	; (1000aa28 <sms_dualtimer1_fn+0x1f0>)
1000a964:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000a966:	3201      	adds	r2, #1
1000a968:	4b29      	ldr	r3, [pc, #164]	; (1000aa10 <sms_dualtimer1_fn+0x1d8>)
1000a96a:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000a96c:	2200      	movs	r2, #0
1000a96e:	2164      	movs	r1, #100	; 0x64
1000a970:	2001      	movs	r0, #1
1000a972:	4b2f      	ldr	r3, [pc, #188]	; (1000aa30 <sms_dualtimer1_fn+0x1f8>)
1000a974:	4798      	blx	r3
1000a976:	e049      	b.n	1000aa0c <sms_dualtimer1_fn+0x1d4>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a978:	4b2e      	ldr	r3, [pc, #184]	; (1000aa34 <sms_dualtimer1_fn+0x1fc>)
1000a97a:	781b      	ldrb	r3, [r3, #0]
1000a97c:	2b00      	cmp	r3, #0
1000a97e:	d145      	bne.n	1000aa0c <sms_dualtimer1_fn+0x1d4>
                            //release_sleep_lock();
                            ulp_ready = true;
1000a980:	2201      	movs	r2, #1
1000a982:	4b2d      	ldr	r3, [pc, #180]	; (1000aa38 <sms_dualtimer1_fn+0x200>)
1000a984:	701a      	strb	r2, [r3, #0]
1000a986:	e041      	b.n	1000aa0c <sms_dualtimer1_fn+0x1d4>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_NONE:
                    case BUTTON_STATE_BOTH:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a988:	4b2a      	ldr	r3, [pc, #168]	; (1000aa34 <sms_dualtimer1_fn+0x1fc>)
1000a98a:	781b      	ldrb	r3, [r3, #0]
1000a98c:	2b00      	cmp	r3, #0
1000a98e:	d13d      	bne.n	1000aa0c <sms_dualtimer1_fn+0x1d4>
                        //release_sleep_lock();
                        ulp_ready = true;
1000a990:	2201      	movs	r2, #1
1000a992:	4b29      	ldr	r3, [pc, #164]	; (1000aa38 <sms_dualtimer1_fn+0x200>)
1000a994:	701a      	strb	r2, [r3, #0]
1000a996:	e039      	b.n	1000aa0c <sms_dualtimer1_fn+0x1d4>
                case BUTTON_STATE_NONE:
                case BUTTON_STATE_BOTH:
                default:
                {
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a998:	4b26      	ldr	r3, [pc, #152]	; (1000aa34 <sms_dualtimer1_fn+0x1fc>)
1000a99a:	781b      	ldrb	r3, [r3, #0]
1000a99c:	2b00      	cmp	r3, #0
1000a99e:	d135      	bne.n	1000aa0c <sms_dualtimer1_fn+0x1d4>
                        //release_sleep_lock();
                        ulp_ready = true;
1000a9a0:	2201      	movs	r2, #1
1000a9a2:	4b25      	ldr	r3, [pc, #148]	; (1000aa38 <sms_dualtimer1_fn+0x200>)
1000a9a4:	701a      	strb	r2, [r3, #0]
1000a9a6:	e031      	b.n	1000aa0c <sms_dualtimer1_fn+0x1d4>
        
        /* Timer1 mode = SHUTDOWN */
        case TIMER1_MODE_SHUTDOWN:
        {
            //timer1_current_mode = TIMER1_MODE_NONE;
            button_instance.previous_state = button_instance.current_state;
1000a9a8:	4c1a      	ldr	r4, [pc, #104]	; (1000aa14 <sms_dualtimer1_fn+0x1dc>)
1000a9aa:	7b63      	ldrb	r3, [r4, #13]
1000a9ac:	7323      	strb	r3, [r4, #12]
            button_instance.current_state = sms_button_get_state();
1000a9ae:	4b1a      	ldr	r3, [pc, #104]	; (1000aa18 <sms_dualtimer1_fn+0x1e0>)
1000a9b0:	4798      	blx	r3
1000a9b2:	7360      	strb	r0, [r4, #13]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000a9b4:	4819      	ldr	r0, [pc, #100]	; (1000aa1c <sms_dualtimer1_fn+0x1e4>)
1000a9b6:	4b1a      	ldr	r3, [pc, #104]	; (1000aa20 <sms_dualtimer1_fn+0x1e8>)
1000a9b8:	4798      	blx	r3
            
            if((button_instance.previous_state == BUTTON_STATE_BOTH) && (button_instance.current_state == BUTTON_STATE_BOTH)) {
1000a9ba:	89a2      	ldrh	r2, [r4, #12]
1000a9bc:	4b1f      	ldr	r3, [pc, #124]	; (1000aa3c <sms_dualtimer1_fn+0x204>)
1000a9be:	429a      	cmp	r2, r3
1000a9c0:	d112      	bne.n	1000a9e8 <sms_dualtimer1_fn+0x1b0>
                sms_btn_cnt++;
1000a9c2:	4a19      	ldr	r2, [pc, #100]	; (1000aa28 <sms_dualtimer1_fn+0x1f0>)
1000a9c4:	7813      	ldrb	r3, [r2, #0]
1000a9c6:	3301      	adds	r3, #1
1000a9c8:	b2db      	uxtb	r3, r3
1000a9ca:	7013      	strb	r3, [r2, #0]
                if(sms_btn_cnt >= SMS_BTN_SHTDWN_CNT) {
1000a9cc:	2b09      	cmp	r3, #9
1000a9ce:	d902      	bls.n	1000a9d6 <sms_dualtimer1_fn+0x19e>
                    sms_ble_power_down();
1000a9d0:	4b1b      	ldr	r3, [pc, #108]	; (1000aa40 <sms_dualtimer1_fn+0x208>)
1000a9d2:	4798      	blx	r3
1000a9d4:	e01a      	b.n	1000aa0c <sms_dualtimer1_fn+0x1d4>
                }
                else {
                    //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                    timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000a9d6:	2202      	movs	r2, #2
1000a9d8:	4b0d      	ldr	r3, [pc, #52]	; (1000aa10 <sms_dualtimer1_fn+0x1d8>)
1000a9da:	701a      	strb	r2, [r3, #0]
                    sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000a9dc:	2200      	movs	r2, #0
1000a9de:	21fa      	movs	r1, #250	; 0xfa
1000a9e0:	2001      	movs	r0, #1
1000a9e2:	4b13      	ldr	r3, [pc, #76]	; (1000aa30 <sms_dualtimer1_fn+0x1f8>)
1000a9e4:	4798      	blx	r3
1000a9e6:	e011      	b.n	1000aa0c <sms_dualtimer1_fn+0x1d4>
                }
            }
            else {
                timer1_current_mode = TIMER1_MODE_NONE;
1000a9e8:	2200      	movs	r2, #0
1000a9ea:	4b09      	ldr	r3, [pc, #36]	; (1000aa10 <sms_dualtimer1_fn+0x1d8>)
1000a9ec:	701a      	strb	r2, [r3, #0]
                if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a9ee:	4b11      	ldr	r3, [pc, #68]	; (1000aa34 <sms_dualtimer1_fn+0x1fc>)
1000a9f0:	781b      	ldrb	r3, [r3, #0]
1000a9f2:	2b00      	cmp	r3, #0
1000a9f4:	d10a      	bne.n	1000aa0c <sms_dualtimer1_fn+0x1d4>
                    ulp_ready = true;
1000a9f6:	3201      	adds	r2, #1
1000a9f8:	4b0f      	ldr	r3, [pc, #60]	; (1000aa38 <sms_dualtimer1_fn+0x200>)
1000a9fa:	701a      	strb	r2, [r3, #0]
1000a9fc:	e006      	b.n	1000aa0c <sms_dualtimer1_fn+0x1d4>
        }
        
        case TIMER1_MODE_NONE:
        default:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a9fe:	4b0d      	ldr	r3, [pc, #52]	; (1000aa34 <sms_dualtimer1_fn+0x1fc>)
1000aa00:	781b      	ldrb	r3, [r3, #0]
1000aa02:	2b00      	cmp	r3, #0
1000aa04:	d102      	bne.n	1000aa0c <sms_dualtimer1_fn+0x1d4>
            //release_sleep_lock();
            ulp_ready = true;
1000aa06:	2201      	movs	r2, #1
1000aa08:	4b0b      	ldr	r3, [pc, #44]	; (1000aa38 <sms_dualtimer1_fn+0x200>)
1000aa0a:	701a      	strb	r2, [r3, #0]
        }            
        break;
    } // switch(timer1_current_mode)
}
1000aa0c:	bd10      	pop	{r4, pc}
1000aa0e:	46c0      	nop			; (mov r8, r8)
1000aa10:	100157f4 	.word	0x100157f4
1000aa14:	100157fc 	.word	0x100157fc
1000aa18:	1000a2dd 	.word	0x1000a2dd
1000aa1c:	10012a34 	.word	0x10012a34
1000aa20:	1000a601 	.word	0x1000a601
1000aa24:	10015864 	.word	0x10015864
1000aa28:	10015876 	.word	0x10015876
1000aa2c:	10009d1d 	.word	0x10009d1d
1000aa30:	1000a78d 	.word	0x1000a78d
1000aa34:	1001586b 	.word	0x1001586b
1000aa38:	100157f7 	.word	0x100157f7
1000aa3c:	00000303 	.word	0x00000303
1000aa40:	10009d35 	.word	0x10009d35

1000aa44 <sms_dualtimer2_fn>:

void sms_dualtimer2_fn(void)
{
1000aa44:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    sms_monitor_get_states("[sms_dualtimer2_fn]");
1000aa46:	4846      	ldr	r0, [pc, #280]	; (1000ab60 <sms_dualtimer2_fn+0x11c>)
1000aa48:	4b46      	ldr	r3, [pc, #280]	; (1000ab64 <sms_dualtimer2_fn+0x120>)
1000aa4a:	4798      	blx	r3
    switch(timer2_current_mode) {
1000aa4c:	4b46      	ldr	r3, [pc, #280]	; (1000ab68 <sms_dualtimer2_fn+0x124>)
1000aa4e:	781b      	ldrb	r3, [r3, #0]
1000aa50:	b2db      	uxtb	r3, r3
1000aa52:	2b02      	cmp	r3, #2
1000aa54:	d02f      	beq.n	1000aab6 <sms_dualtimer2_fn+0x72>
1000aa56:	2b03      	cmp	r3, #3
1000aa58:	d054      	beq.n	1000ab04 <sms_dualtimer2_fn+0xc0>
1000aa5a:	2b01      	cmp	r3, #1
1000aa5c:	d17f      	bne.n	1000ab5e <sms_dualtimer2_fn+0x11a>
        case TIMER2_MODE_INDICATION_TOUT:
        timer2_current_mode = TIMER2_MODE_NONE;
1000aa5e:	2200      	movs	r2, #0
1000aa60:	4b41      	ldr	r3, [pc, #260]	; (1000ab68 <sms_dualtimer2_fn+0x124>)
1000aa62:	701a      	strb	r2, [r3, #0]
        if(ble_current_state == BLE_STATE_PAIRED) {
1000aa64:	4b41      	ldr	r3, [pc, #260]	; (1000ab6c <sms_dualtimer2_fn+0x128>)
1000aa66:	781b      	ldrb	r3, [r3, #0]
1000aa68:	2b22      	cmp	r3, #34	; 0x22
1000aa6a:	d107      	bne.n	1000aa7c <sms_dualtimer2_fn+0x38>
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            if(timer1_current_mode == TIMER1_MODE_NONE) {
1000aa6c:	4b40      	ldr	r3, [pc, #256]	; (1000ab70 <sms_dualtimer2_fn+0x12c>)
1000aa6e:	781b      	ldrb	r3, [r3, #0]
1000aa70:	2b00      	cmp	r3, #0
1000aa72:	d174      	bne.n	1000ab5e <sms_dualtimer2_fn+0x11a>
                //release_sleep_lock();
                ulp_ready = true;
1000aa74:	3201      	adds	r2, #1
1000aa76:	4b3f      	ldr	r3, [pc, #252]	; (1000ab74 <sms_dualtimer2_fn+0x130>)
1000aa78:	701a      	strb	r2, [r3, #0]
1000aa7a:	e070      	b.n	1000ab5e <sms_dualtimer2_fn+0x11a>
            }                
        }
        else {
            sms_ble_ind_retry++;
1000aa7c:	4a3e      	ldr	r2, [pc, #248]	; (1000ab78 <sms_dualtimer2_fn+0x134>)
1000aa7e:	7813      	ldrb	r3, [r2, #0]
1000aa80:	3301      	adds	r3, #1
1000aa82:	b2db      	uxtb	r3, r3
1000aa84:	7013      	strb	r3, [r2, #0]
            if(sms_ble_ind_retry >= BLE_INDICATION_RETRY_MAX) {
1000aa86:	2b00      	cmp	r3, #0
1000aa88:	d009      	beq.n	1000aa9e <sms_dualtimer2_fn+0x5a>
                DBG_LOG_CONT_DEV(" ...giving up!");
1000aa8a:	483c      	ldr	r0, [pc, #240]	; (1000ab7c <sms_dualtimer2_fn+0x138>)
1000aa8c:	4b3c      	ldr	r3, [pc, #240]	; (1000ab80 <sms_dualtimer2_fn+0x13c>)
1000aa8e:	4798      	blx	r3
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\tTimer1 mode: %d", timer1_current_mode);
                timer2_current_mode = TIMER2_MODE_NONE;
1000aa90:	2200      	movs	r2, #0
1000aa92:	4b35      	ldr	r3, [pc, #212]	; (1000ab68 <sms_dualtimer2_fn+0x124>)
1000aa94:	701a      	strb	r2, [r3, #0]
                ble_current_state = BLE_STATE_PAIRED;
1000aa96:	3222      	adds	r2, #34	; 0x22
1000aa98:	4b34      	ldr	r3, [pc, #208]	; (1000ab6c <sms_dualtimer2_fn+0x128>)
1000aa9a:	701a      	strb	r2, [r3, #0]
1000aa9c:	e05f      	b.n	1000ab5e <sms_dualtimer2_fn+0x11a>
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tStarting sensors...");
                //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
                //if(timer1_current_mode == TIMER1_MODE_NONE) release_sleep_lock();
            }
            else {
                DBG_LOG_CONT_DEV(" ...waiting... counter: %d", sms_ble_ind_retry);
1000aa9e:	2100      	movs	r1, #0
1000aaa0:	4838      	ldr	r0, [pc, #224]	; (1000ab84 <sms_dualtimer2_fn+0x140>)
1000aaa2:	4b37      	ldr	r3, [pc, #220]	; (1000ab80 <sms_dualtimer2_fn+0x13c>)
1000aaa4:	4798      	blx	r3
                //sms_ble_send_characteristic(BLE_CHAR_PRESSURE);
                timer2_current_mode = TIMER2_MODE_INDICATION_TOUT;
1000aaa6:	2201      	movs	r2, #1
1000aaa8:	4b2f      	ldr	r3, [pc, #188]	; (1000ab68 <sms_dualtimer2_fn+0x124>)
1000aaaa:	701a      	strb	r2, [r3, #0]
                //ulp_ready = false;
                sms_dualtimer_start(TIMER_UNIT_MS, BLE_INDICATION_TOUT_MS, DUALTIMER_TIMER2);
1000aaac:	2164      	movs	r1, #100	; 0x64
1000aaae:	2001      	movs	r0, #1
1000aab0:	4b35      	ldr	r3, [pc, #212]	; (1000ab88 <sms_dualtimer2_fn+0x144>)
1000aab2:	4798      	blx	r3
1000aab4:	e053      	b.n	1000ab5e <sms_dualtimer2_fn+0x11a>
            }
        }
        break;
        
        case TIMER2_MODE_LED_STARTUP:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking startup...");
1000aab6:	4835      	ldr	r0, [pc, #212]	; (1000ab8c <sms_dualtimer2_fn+0x148>)
1000aab8:	4b35      	ldr	r3, [pc, #212]	; (1000ab90 <sms_dualtimer2_fn+0x14c>)
1000aaba:	4798      	blx	r3
1000aabc:	4835      	ldr	r0, [pc, #212]	; (1000ab94 <sms_dualtimer2_fn+0x150>)
1000aabe:	4b30      	ldr	r3, [pc, #192]	; (1000ab80 <sms_dualtimer2_fn+0x13c>)
1000aac0:	4798      	blx	r3
        timer2_current_mode = TIMER2_MODE_NONE;
1000aac2:	2200      	movs	r2, #0
1000aac4:	4b28      	ldr	r3, [pc, #160]	; (1000ab68 <sms_dualtimer2_fn+0x124>)
1000aac6:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000aac8:	4a33      	ldr	r2, [pc, #204]	; (1000ab98 <sms_dualtimer2_fn+0x154>)
1000aaca:	7813      	ldrb	r3, [r2, #0]
1000aacc:	3301      	adds	r3, #1
1000aace:	b2db      	uxtb	r3, r3
1000aad0:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_STARTUP_CNT) {
1000aad2:	7813      	ldrb	r3, [r2, #0]
1000aad4:	b2db      	uxtb	r3, r3
1000aad6:	2b07      	cmp	r3, #7
1000aad8:	d908      	bls.n	1000aaec <sms_dualtimer2_fn+0xa8>
            sms_led_switch_off(SMS_LED_0_PIN);
1000aada:	2016      	movs	r0, #22
1000aadc:	4b2f      	ldr	r3, [pc, #188]	; (1000ab9c <sms_dualtimer2_fn+0x158>)
1000aade:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            /* Blinking done... starting ble advertisement */
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tSMS awake... starting advertisement");
            sms_ble_advertise();
1000aae0:	4b2f      	ldr	r3, [pc, #188]	; (1000aba0 <sms_dualtimer2_fn+0x15c>)
1000aae2:	4798      	blx	r3
            ulp_ready = true;
1000aae4:	2201      	movs	r2, #1
1000aae6:	4b23      	ldr	r3, [pc, #140]	; (1000ab74 <sms_dualtimer2_fn+0x130>)
1000aae8:	701a      	strb	r2, [r3, #0]
1000aaea:	e038      	b.n	1000ab5e <sms_dualtimer2_fn+0x11a>
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBlinking up... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000aaec:	2016      	movs	r0, #22
1000aaee:	4b2d      	ldr	r3, [pc, #180]	; (1000aba4 <sms_dualtimer2_fn+0x160>)
1000aaf0:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_STARTUP;
1000aaf2:	2202      	movs	r2, #2
1000aaf4:	4b1c      	ldr	r3, [pc, #112]	; (1000ab68 <sms_dualtimer2_fn+0x124>)
1000aaf6:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER2);
1000aaf8:	3a01      	subs	r2, #1
1000aafa:	2164      	movs	r1, #100	; 0x64
1000aafc:	2001      	movs	r0, #1
1000aafe:	4b22      	ldr	r3, [pc, #136]	; (1000ab88 <sms_dualtimer2_fn+0x144>)
1000ab00:	4798      	blx	r3
1000ab02:	e02c      	b.n	1000ab5e <sms_dualtimer2_fn+0x11a>
        }
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking shutdown...");
1000ab04:	4821      	ldr	r0, [pc, #132]	; (1000ab8c <sms_dualtimer2_fn+0x148>)
1000ab06:	4b22      	ldr	r3, [pc, #136]	; (1000ab90 <sms_dualtimer2_fn+0x14c>)
1000ab08:	4798      	blx	r3
1000ab0a:	4827      	ldr	r0, [pc, #156]	; (1000aba8 <sms_dualtimer2_fn+0x164>)
1000ab0c:	4b1c      	ldr	r3, [pc, #112]	; (1000ab80 <sms_dualtimer2_fn+0x13c>)
1000ab0e:	4798      	blx	r3
        timer2_current_mode = TIMER2_MODE_NONE;
1000ab10:	2200      	movs	r2, #0
1000ab12:	4b15      	ldr	r3, [pc, #84]	; (1000ab68 <sms_dualtimer2_fn+0x124>)
1000ab14:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000ab16:	4a20      	ldr	r2, [pc, #128]	; (1000ab98 <sms_dualtimer2_fn+0x154>)
1000ab18:	7813      	ldrb	r3, [r2, #0]
1000ab1a:	3301      	adds	r3, #1
1000ab1c:	b2db      	uxtb	r3, r3
1000ab1e:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_SHTDWN_CNT) {
1000ab20:	7813      	ldrb	r3, [r2, #0]
1000ab22:	b2db      	uxtb	r3, r3
1000ab24:	2b03      	cmp	r3, #3
1000ab26:	d90e      	bls.n	1000ab46 <sms_dualtimer2_fn+0x102>
            sms_led_switch_off(SMS_LED_0_PIN);
1000ab28:	2016      	movs	r0, #22
1000ab2a:	4b1c      	ldr	r3, [pc, #112]	; (1000ab9c <sms_dualtimer2_fn+0x158>)
1000ab2c:	4798      	blx	r3
            DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tPowering off...");
1000ab2e:	4817      	ldr	r0, [pc, #92]	; (1000ab8c <sms_dualtimer2_fn+0x148>)
1000ab30:	4b17      	ldr	r3, [pc, #92]	; (1000ab90 <sms_dualtimer2_fn+0x14c>)
1000ab32:	4798      	blx	r3
1000ab34:	481d      	ldr	r0, [pc, #116]	; (1000abac <sms_dualtimer2_fn+0x168>)
1000ab36:	4b12      	ldr	r3, [pc, #72]	; (1000ab80 <sms_dualtimer2_fn+0x13c>)
1000ab38:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            sms_init_variables();
1000ab3a:	4b1d      	ldr	r3, [pc, #116]	; (1000abb0 <sms_dualtimer2_fn+0x16c>)
1000ab3c:	4798      	blx	r3
            ulp_ready = true;
1000ab3e:	2201      	movs	r2, #1
1000ab40:	4b0c      	ldr	r3, [pc, #48]	; (1000ab74 <sms_dualtimer2_fn+0x130>)
1000ab42:	701a      	strb	r2, [r3, #0]
1000ab44:	e00b      	b.n	1000ab5e <sms_dualtimer2_fn+0x11a>
            //release_sleep_lock();
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBLinking off... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000ab46:	2016      	movs	r0, #22
1000ab48:	4b16      	ldr	r3, [pc, #88]	; (1000aba4 <sms_dualtimer2_fn+0x160>)
1000ab4a:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
1000ab4c:	2203      	movs	r2, #3
1000ab4e:	4b06      	ldr	r3, [pc, #24]	; (1000ab68 <sms_dualtimer2_fn+0x124>)
1000ab50:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_SHTDWN_MS, DUALTIMER_TIMER2);
1000ab52:	3a02      	subs	r2, #2
1000ab54:	21c8      	movs	r1, #200	; 0xc8
1000ab56:	0049      	lsls	r1, r1, #1
1000ab58:	2001      	movs	r0, #1
1000ab5a:	4b0b      	ldr	r3, [pc, #44]	; (1000ab88 <sms_dualtimer2_fn+0x144>)
1000ab5c:	4798      	blx	r3
        case TIMER2_MODE_LED_CONNECTION_LOST:
        case TIMER2_MODE_NONE:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        break;
    }
1000ab5e:	bd10      	pop	{r4, pc}
1000ab60:	10012a48 	.word	0x10012a48
1000ab64:	1000a601 	.word	0x1000a601
1000ab68:	1001586b 	.word	0x1001586b
1000ab6c:	10015864 	.word	0x10015864
1000ab70:	100157f4 	.word	0x100157f4
1000ab74:	100157f7 	.word	0x100157f7
1000ab78:	10015860 	.word	0x10015860
1000ab7c:	10012a5c 	.word	0x10012a5c
1000ab80:	10010fc9 	.word	0x10010fc9
1000ab84:	10012a6c 	.word	0x10012a6c
1000ab88:	1000a78d 	.word	0x1000a78d
1000ab8c:	100123b4 	.word	0x100123b4
1000ab90:	100110e9 	.word	0x100110e9
1000ab94:	10012a88 	.word	0x10012a88
1000ab98:	1001587c 	.word	0x1001587c
1000ab9c:	1000a66d 	.word	0x1000a66d
1000aba0:	10009ec9 	.word	0x10009ec9
1000aba4:	1000a6cd 	.word	0x1000a6cd
1000aba8:	10012ab4 	.word	0x10012ab4
1000abac:	10012ae0 	.word	0x10012ae0
1000abb0:	1000c7f5 	.word	0x1000c7f5

1000abb4 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000abb4:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000abb6:	4b0d      	ldr	r3, [pc, #52]	; (1000abec <dualtimer_isr_handler+0x38>)
1000abb8:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000abba:	2b00      	cmp	r3, #0
1000abbc:	d007      	beq.n	1000abce <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000abbe:	2201      	movs	r2, #1
1000abc0:	4b0a      	ldr	r3, [pc, #40]	; (1000abec <dualtimer_isr_handler+0x38>)
1000abc2:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000abc4:	4b0a      	ldr	r3, [pc, #40]	; (1000abf0 <dualtimer_isr_handler+0x3c>)
1000abc6:	681b      	ldr	r3, [r3, #0]
1000abc8:	2b00      	cmp	r3, #0
1000abca:	d000      	beq.n	1000abce <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000abcc:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000abce:	2334      	movs	r3, #52	; 0x34
1000abd0:	4a06      	ldr	r2, [pc, #24]	; (1000abec <dualtimer_isr_handler+0x38>)
1000abd2:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000abd4:	2b00      	cmp	r3, #0
1000abd6:	d007      	beq.n	1000abe8 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000abd8:	2101      	movs	r1, #1
1000abda:	232c      	movs	r3, #44	; 0x2c
1000abdc:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000abde:	4b05      	ldr	r3, [pc, #20]	; (1000abf4 <dualtimer_isr_handler+0x40>)
1000abe0:	681b      	ldr	r3, [r3, #0]
1000abe2:	2b00      	cmp	r3, #0
1000abe4:	d000      	beq.n	1000abe8 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000abe6:	4798      	blx	r3
	}
}
1000abe8:	bd10      	pop	{r4, pc}
1000abea:	46c0      	nop			; (mov r8, r8)
1000abec:	40001000 	.word	0x40001000
1000abf0:	100139fc 	.word	0x100139fc
1000abf4:	10013a00 	.word	0x10013a00

1000abf8 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000abf8:	2301      	movs	r3, #1
1000abfa:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000abfc:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000abfe:	2202      	movs	r2, #2
1000ac00:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000ac02:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000ac04:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000ac06:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000ac08:	2200      	movs	r2, #0
1000ac0a:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000ac0c:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000ac0e:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000ac10:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000ac12:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000ac14:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000ac16:	7602      	strb	r2, [r0, #24]
}
1000ac18:	4770      	bx	lr
1000ac1a:	46c0      	nop			; (mov r8, r8)

1000ac1c <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000ac1c:	2800      	cmp	r0, #0
1000ac1e:	d107      	bne.n	1000ac30 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000ac20:	2900      	cmp	r1, #0
1000ac22:	d102      	bne.n	1000ac2a <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000ac24:	4b06      	ldr	r3, [pc, #24]	; (1000ac40 <dualtimer_set_counter+0x24>)
1000ac26:	601a      	str	r2, [r3, #0]
1000ac28:	e009      	b.n	1000ac3e <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000ac2a:	4b05      	ldr	r3, [pc, #20]	; (1000ac40 <dualtimer_set_counter+0x24>)
1000ac2c:	619a      	str	r2, [r3, #24]
1000ac2e:	e006      	b.n	1000ac3e <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000ac30:	2900      	cmp	r1, #0
1000ac32:	d102      	bne.n	1000ac3a <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000ac34:	4b02      	ldr	r3, [pc, #8]	; (1000ac40 <dualtimer_set_counter+0x24>)
1000ac36:	621a      	str	r2, [r3, #32]
1000ac38:	e001      	b.n	1000ac3e <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000ac3a:	4b01      	ldr	r3, [pc, #4]	; (1000ac40 <dualtimer_set_counter+0x24>)
1000ac3c:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000ac3e:	4770      	bx	lr
1000ac40:	40001000 	.word	0x40001000

1000ac44 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000ac44:	2800      	cmp	r0, #0
1000ac46:	d105      	bne.n	1000ac54 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000ac48:	4a06      	ldr	r2, [pc, #24]	; (1000ac64 <dualtimer_enable+0x20>)
1000ac4a:	7a11      	ldrb	r1, [r2, #8]
1000ac4c:	2380      	movs	r3, #128	; 0x80
1000ac4e:	430b      	orrs	r3, r1
1000ac50:	7213      	strb	r3, [r2, #8]
1000ac52:	e005      	b.n	1000ac60 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000ac54:	4903      	ldr	r1, [pc, #12]	; (1000ac64 <dualtimer_enable+0x20>)
1000ac56:	2228      	movs	r2, #40	; 0x28
1000ac58:	5c88      	ldrb	r0, [r1, r2]
1000ac5a:	2380      	movs	r3, #128	; 0x80
1000ac5c:	4303      	orrs	r3, r0
1000ac5e:	548b      	strb	r3, [r1, r2]
	}
}
1000ac60:	4770      	bx	lr
1000ac62:	46c0      	nop			; (mov r8, r8)
1000ac64:	40001000 	.word	0x40001000

1000ac68 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000ac68:	2800      	cmp	r0, #0
1000ac6a:	d105      	bne.n	1000ac78 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000ac6c:	4a06      	ldr	r2, [pc, #24]	; (1000ac88 <dualtimer_disable+0x20>)
1000ac6e:	7a11      	ldrb	r1, [r2, #8]
1000ac70:	237f      	movs	r3, #127	; 0x7f
1000ac72:	400b      	ands	r3, r1
1000ac74:	7213      	strb	r3, [r2, #8]
1000ac76:	e005      	b.n	1000ac84 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000ac78:	4903      	ldr	r1, [pc, #12]	; (1000ac88 <dualtimer_disable+0x20>)
1000ac7a:	2228      	movs	r2, #40	; 0x28
1000ac7c:	5c88      	ldrb	r0, [r1, r2]
1000ac7e:	237f      	movs	r3, #127	; 0x7f
1000ac80:	4003      	ands	r3, r0
1000ac82:	548b      	strb	r3, [r1, r2]
	}
}
1000ac84:	4770      	bx	lr
1000ac86:	46c0      	nop			; (mov r8, r8)
1000ac88:	40001000 	.word	0x40001000

1000ac8c <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000ac8c:	b570      	push	{r4, r5, r6, lr}
1000ac8e:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000ac90:	2004      	movs	r0, #4
1000ac92:	4b39      	ldr	r3, [pc, #228]	; (1000ad78 <dualtimer_init+0xec>)
1000ac94:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000ac96:	7823      	ldrb	r3, [r4, #0]
1000ac98:	2b00      	cmp	r3, #0
1000ac9a:	d102      	bne.n	1000aca2 <dualtimer_init+0x16>
1000ac9c:	7b23      	ldrb	r3, [r4, #12]
1000ac9e:	2b00      	cmp	r3, #0
1000aca0:	d065      	beq.n	1000ad6e <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000aca2:	4936      	ldr	r1, [pc, #216]	; (1000ad7c <dualtimer_init+0xf0>)
1000aca4:	68ca      	ldr	r2, [r1, #12]
1000aca6:	2320      	movs	r3, #32
1000aca8:	4313      	orrs	r3, r2
1000acaa:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000acac:	7e22      	ldrb	r2, [r4, #24]
1000acae:	698b      	ldr	r3, [r1, #24]
1000acb0:	2003      	movs	r0, #3
1000acb2:	4002      	ands	r2, r0
1000acb4:	0112      	lsls	r2, r2, #4
1000acb6:	302d      	adds	r0, #45	; 0x2d
1000acb8:	4383      	bics	r3, r0
1000acba:	4313      	orrs	r3, r2
1000acbc:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000acbe:	7823      	ldrb	r3, [r4, #0]
1000acc0:	2b00      	cmp	r3, #0
1000acc2:	d026      	beq.n	1000ad12 <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000acc4:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000acc6:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000acc8:	2b00      	cmp	r3, #0
1000acca:	d003      	beq.n	1000acd4 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000accc:	3b02      	subs	r3, #2
1000acce:	425d      	negs	r5, r3
1000acd0:	415d      	adcs	r5, r3
1000acd2:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000acd4:	78a2      	ldrb	r2, [r4, #2]
1000acd6:	0052      	lsls	r2, r2, #1
1000acd8:	2502      	movs	r5, #2
1000acda:	402a      	ands	r2, r5
1000acdc:	78e3      	ldrb	r3, [r4, #3]
1000acde:	009b      	lsls	r3, r3, #2
1000ace0:	350a      	adds	r5, #10
1000ace2:	402b      	ands	r3, r5
1000ace4:	431a      	orrs	r2, r3
1000ace6:	0015      	movs	r5, r2
1000ace8:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000acea:	7923      	ldrb	r3, [r4, #4]
1000acec:	2b00      	cmp	r3, #0
1000acee:	d001      	beq.n	1000acf4 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000acf0:	2320      	movs	r3, #32
1000acf2:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000acf4:	4b22      	ldr	r3, [pc, #136]	; (1000ad80 <dualtimer_init+0xf4>)
1000acf6:	68a2      	ldr	r2, [r4, #8]
1000acf8:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000acfa:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000acfc:	491f      	ldr	r1, [pc, #124]	; (1000ad7c <dualtimer_init+0xf0>)
1000acfe:	22c4      	movs	r2, #196	; 0xc4
1000ad00:	0052      	lsls	r2, r2, #1
1000ad02:	5c88      	ldrb	r0, [r1, r2]
1000ad04:	2301      	movs	r3, #1
1000ad06:	4303      	orrs	r3, r0
1000ad08:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000ad0a:	2000      	movs	r0, #0
1000ad0c:	4b1d      	ldr	r3, [pc, #116]	; (1000ad84 <dualtimer_init+0xf8>)
1000ad0e:	4798      	blx	r3
1000ad10:	e000      	b.n	1000ad14 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000ad12:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000ad14:	7b23      	ldrb	r3, [r4, #12]
1000ad16:	2b00      	cmp	r3, #0
1000ad18:	d029      	beq.n	1000ad6e <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000ad1a:	7b63      	ldrb	r3, [r4, #13]
1000ad1c:	2b00      	cmp	r3, #0
1000ad1e:	d005      	beq.n	1000ad2c <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000ad20:	2b01      	cmp	r3, #1
1000ad22:	d005      	beq.n	1000ad30 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000ad24:	2b02      	cmp	r3, #2
1000ad26:	d104      	bne.n	1000ad32 <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000ad28:	2540      	movs	r5, #64	; 0x40
1000ad2a:	e002      	b.n	1000ad32 <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000ad2c:	2501      	movs	r5, #1
1000ad2e:	e000      	b.n	1000ad32 <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000ad30:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000ad32:	7ba3      	ldrb	r3, [r4, #14]
1000ad34:	005b      	lsls	r3, r3, #1
1000ad36:	2102      	movs	r1, #2
1000ad38:	4019      	ands	r1, r3
1000ad3a:	7be2      	ldrb	r2, [r4, #15]
1000ad3c:	0092      	lsls	r2, r2, #2
1000ad3e:	230c      	movs	r3, #12
1000ad40:	4013      	ands	r3, r2
1000ad42:	430b      	orrs	r3, r1
1000ad44:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000ad46:	7c23      	ldrb	r3, [r4, #16]
1000ad48:	2b00      	cmp	r3, #0
1000ad4a:	d001      	beq.n	1000ad50 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000ad4c:	2320      	movs	r3, #32
1000ad4e:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000ad50:	6962      	ldr	r2, [r4, #20]
1000ad52:	4b0b      	ldr	r3, [pc, #44]	; (1000ad80 <dualtimer_init+0xf4>)
1000ad54:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000ad56:	2228      	movs	r2, #40	; 0x28
1000ad58:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000ad5a:	4908      	ldr	r1, [pc, #32]	; (1000ad7c <dualtimer_init+0xf0>)
1000ad5c:	3261      	adds	r2, #97	; 0x61
1000ad5e:	32ff      	adds	r2, #255	; 0xff
1000ad60:	5c88      	ldrb	r0, [r1, r2]
1000ad62:	2302      	movs	r3, #2
1000ad64:	4303      	orrs	r3, r0
1000ad66:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000ad68:	2001      	movs	r0, #1
1000ad6a:	4b06      	ldr	r3, [pc, #24]	; (1000ad84 <dualtimer_init+0xf8>)
1000ad6c:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000ad6e:	4906      	ldr	r1, [pc, #24]	; (1000ad88 <dualtimer_init+0xfc>)
1000ad70:	201e      	movs	r0, #30
1000ad72:	4b06      	ldr	r3, [pc, #24]	; (1000ad8c <dualtimer_init+0x100>)
1000ad74:	4798      	blx	r3
}
1000ad76:	bd70      	pop	{r4, r5, r6, pc}
1000ad78:	10008c79 	.word	0x10008c79
1000ad7c:	4000b000 	.word	0x4000b000
1000ad80:	40001000 	.word	0x40001000
1000ad84:	1000ac45 	.word	0x1000ac45
1000ad88:	1000abb5 	.word	0x1000abb5
1000ad8c:	100090e1 	.word	0x100090e1

1000ad90 <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
1000ad90:	2800      	cmp	r0, #0
1000ad92:	d102      	bne.n	1000ad9a <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
1000ad94:	4b02      	ldr	r3, [pc, #8]	; (1000ada0 <dualtimer_register_callback+0x10>)
1000ad96:	6019      	str	r1, [r3, #0]
1000ad98:	e001      	b.n	1000ad9e <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
1000ad9a:	4b02      	ldr	r3, [pc, #8]	; (1000ada4 <dualtimer_register_callback+0x14>)
1000ad9c:	6019      	str	r1, [r3, #0]
	}
}
1000ad9e:	4770      	bx	lr
1000ada0:	100139fc 	.word	0x100139fc
1000ada4:	10013a00 	.word	0x10013a00

1000ada8 <ble_undefined_event_handler>:
	}
	return status;
}

at_ble_status_t ble_undefined_event_handler(void *params)
{
1000ada8:	b510      	push	{r4, lr}
	DBG_LOG_DEV("Undefined Event Received");
1000adaa:	4804      	ldr	r0, [pc, #16]	; (1000adbc <ble_undefined_event_handler+0x14>)
1000adac:	4b04      	ldr	r3, [pc, #16]	; (1000adc0 <ble_undefined_event_handler+0x18>)
1000adae:	4798      	blx	r3
1000adb0:	4804      	ldr	r0, [pc, #16]	; (1000adc4 <ble_undefined_event_handler+0x1c>)
1000adb2:	4b05      	ldr	r3, [pc, #20]	; (1000adc8 <ble_undefined_event_handler+0x20>)
1000adb4:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000adb6:	2000      	movs	r0, #0
1000adb8:	bd10      	pop	{r4, pc}
1000adba:	46c0      	nop			; (mov r8, r8)
1000adbc:	100123b4 	.word	0x100123b4
1000adc0:	100110e9 	.word	0x100110e9
1000adc4:	10012c6c 	.word	0x10012c6c
1000adc8:	10010fc9 	.word	0x10010fc9

1000adcc <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000adcc:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000adce:	7800      	ldrb	r0, [r0, #0]
1000add0:	2800      	cmp	r0, #0
1000add2:	d006      	beq.n	1000ade2 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000add4:	4803      	ldr	r0, [pc, #12]	; (1000ade4 <ble_scan_report_handler+0x18>)
1000add6:	4b04      	ldr	r3, [pc, #16]	; (1000ade8 <ble_scan_report_handler+0x1c>)
1000add8:	4798      	blx	r3
1000adda:	4804      	ldr	r0, [pc, #16]	; (1000adec <ble_scan_report_handler+0x20>)
1000addc:	4b04      	ldr	r3, [pc, #16]	; (1000adf0 <ble_scan_report_handler+0x24>)
1000adde:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000ade0:	20e2      	movs	r0, #226	; 0xe2
}
1000ade2:	bd10      	pop	{r4, pc}
1000ade4:	100123b4 	.word	0x100123b4
1000ade8:	100110e9 	.word	0x100110e9
1000adec:	10012c88 	.word	0x10012c88
1000adf0:	10010fc9 	.word	0x10010fc9

1000adf4 <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000adf4:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000adf6:	7800      	ldrb	r0, [r0, #0]
1000adf8:	2800      	cmp	r0, #0
1000adfa:	d006      	beq.n	1000ae0a <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000adfc:	4803      	ldr	r0, [pc, #12]	; (1000ae0c <ble_adv_report_handler+0x18>)
1000adfe:	4b04      	ldr	r3, [pc, #16]	; (1000ae10 <ble_adv_report_handler+0x1c>)
1000ae00:	4798      	blx	r3
1000ae02:	4804      	ldr	r0, [pc, #16]	; (1000ae14 <ble_adv_report_handler+0x20>)
1000ae04:	4b04      	ldr	r3, [pc, #16]	; (1000ae18 <ble_adv_report_handler+0x24>)
1000ae06:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000ae08:	20e2      	movs	r0, #226	; 0xe2
}
1000ae0a:	bd10      	pop	{r4, pc}
1000ae0c:	100123b4 	.word	0x100123b4
1000ae10:	100110e9 	.word	0x100110e9
1000ae14:	10012c9c 	.word	0x10012c9c
1000ae18:	10010fc9 	.word	0x10010fc9

1000ae1c <ble_mtu_changed_indication_handler>:
	return AT_BLE_SUCCESS;
	
}

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
1000ae1c:	b510      	push	{r4, lr}
1000ae1e:	0004      	movs	r4, r0
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
1000ae20:	4804      	ldr	r0, [pc, #16]	; (1000ae34 <ble_mtu_changed_indication_handler+0x18>)
1000ae22:	4b05      	ldr	r3, [pc, #20]	; (1000ae38 <ble_mtu_changed_indication_handler+0x1c>)
1000ae24:	4798      	blx	r3
1000ae26:	8862      	ldrh	r2, [r4, #2]
1000ae28:	8821      	ldrh	r1, [r4, #0]
1000ae2a:	4804      	ldr	r0, [pc, #16]	; (1000ae3c <ble_mtu_changed_indication_handler+0x20>)
1000ae2c:	4b04      	ldr	r3, [pc, #16]	; (1000ae40 <ble_mtu_changed_indication_handler+0x24>)
1000ae2e:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000ae30:	2000      	movs	r0, #0
1000ae32:	bd10      	pop	{r4, pc}
1000ae34:	100123b4 	.word	0x100123b4
1000ae38:	100110e9 	.word	0x100110e9
1000ae3c:	10012cb0 	.word	0x10012cb0
1000ae40:	10010fc9 	.word	0x10010fc9

1000ae44 <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000ae44:	b570      	push	{r4, r5, r6, lr}
1000ae46:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000ae48:	78c5      	ldrb	r5, [r0, #3]
1000ae4a:	2d00      	cmp	r5, #0
1000ae4c:	d108      	bne.n	1000ae60 <ble_mtu_changed_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
1000ae4e:	480a      	ldr	r0, [pc, #40]	; (1000ae78 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000ae50:	4b0a      	ldr	r3, [pc, #40]	; (1000ae7c <ble_mtu_changed_cmd_complete_handler+0x38>)
1000ae52:	4798      	blx	r3
1000ae54:	78a2      	ldrb	r2, [r4, #2]
1000ae56:	8821      	ldrh	r1, [r4, #0]
1000ae58:	4809      	ldr	r0, [pc, #36]	; (1000ae80 <ble_mtu_changed_cmd_complete_handler+0x3c>)
1000ae5a:	4b0a      	ldr	r3, [pc, #40]	; (1000ae84 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000ae5c:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000ae5e:	e008      	b.n	1000ae72 <ble_mtu_changed_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000ae60:	4805      	ldr	r0, [pc, #20]	; (1000ae78 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000ae62:	4b06      	ldr	r3, [pc, #24]	; (1000ae7c <ble_mtu_changed_cmd_complete_handler+0x38>)
1000ae64:	4798      	blx	r3
1000ae66:	78a2      	ldrb	r2, [r4, #2]
1000ae68:	8821      	ldrh	r1, [r4, #0]
1000ae6a:	4807      	ldr	r0, [pc, #28]	; (1000ae88 <ble_mtu_changed_cmd_complete_handler+0x44>)
1000ae6c:	4b05      	ldr	r3, [pc, #20]	; (1000ae84 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000ae6e:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000ae70:	25e2      	movs	r5, #226	; 0xe2
}
1000ae72:	0028      	movs	r0, r5
1000ae74:	bd70      	pop	{r4, r5, r6, pc}
1000ae76:	46c0      	nop			; (mov r8, r8)
1000ae78:	100123b4 	.word	0x100123b4
1000ae7c:	100110e9 	.word	0x100110e9
1000ae80:	10012ce8 	.word	0x10012ce8
1000ae84:	10010fc9 	.word	0x10010fc9
1000ae88:	10012d18 	.word	0x10012d18

1000ae8c <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
1000ae8c:	b570      	push	{r4, r5, r6, lr}
1000ae8e:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000ae90:	78c5      	ldrb	r5, [r0, #3]
1000ae92:	2d00      	cmp	r5, #0
1000ae94:	d108      	bne.n	1000aea8 <ble_characteristic_write_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
1000ae96:	480a      	ldr	r0, [pc, #40]	; (1000aec0 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000ae98:	4b0a      	ldr	r3, [pc, #40]	; (1000aec4 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000ae9a:	4798      	blx	r3
1000ae9c:	78a2      	ldrb	r2, [r4, #2]
1000ae9e:	8821      	ldrh	r1, [r4, #0]
1000aea0:	4809      	ldr	r0, [pc, #36]	; (1000aec8 <ble_characteristic_write_cmd_complete_handler+0x3c>)
1000aea2:	4b0a      	ldr	r3, [pc, #40]	; (1000aecc <ble_characteristic_write_cmd_complete_handler+0x40>)
1000aea4:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000aea6:	e008      	b.n	1000aeba <ble_characteristic_write_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
1000aea8:	4805      	ldr	r0, [pc, #20]	; (1000aec0 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000aeaa:	4b06      	ldr	r3, [pc, #24]	; (1000aec4 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000aeac:	4798      	blx	r3
1000aeae:	78a2      	ldrb	r2, [r4, #2]
1000aeb0:	8821      	ldrh	r1, [r4, #0]
1000aeb2:	4807      	ldr	r0, [pc, #28]	; (1000aed0 <ble_characteristic_write_cmd_complete_handler+0x44>)
1000aeb4:	4b05      	ldr	r3, [pc, #20]	; (1000aecc <ble_characteristic_write_cmd_complete_handler+0x40>)
1000aeb6:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000aeb8:	25e2      	movs	r5, #226	; 0xe2
}
1000aeba:	0028      	movs	r0, r5
1000aebc:	bd70      	pop	{r4, r5, r6, pc}
1000aebe:	46c0      	nop			; (mov r8, r8)
1000aec0:	100123b4 	.word	0x100123b4
1000aec4:	100110e9 	.word	0x100110e9
1000aec8:	10012d50 	.word	0x10012d50
1000aecc:	10010fc9 	.word	0x10010fc9
1000aed0:	10012d8c 	.word	0x10012d8c

1000aed4 <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000aed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000aed6:	0006      	movs	r6, r0
1000aed8:	4c1d      	ldr	r4, [pc, #116]	; (1000af50 <ble_disconnected_state_handler+0x7c>)
1000aeda:	239b      	movs	r3, #155	; 0x9b
1000aedc:	009b      	lsls	r3, r3, #2
1000aede:	18e7      	adds	r7, r4, r3
1000aee0:	0025      	movs	r5, r4
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000aee2:	0023      	movs	r3, r4
1000aee4:	3b56      	subs	r3, #86	; 0x56
1000aee6:	881a      	ldrh	r2, [r3, #0]
1000aee8:	8833      	ldrh	r3, [r6, #0]
1000aeea:	429a      	cmp	r2, r3
1000aeec:	d122      	bne.n	1000af34 <ble_disconnected_state_handler+0x60>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000aeee:	7823      	ldrb	r3, [r4, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000aef0:	2b05      	cmp	r3, #5
1000aef2:	d001      	beq.n	1000aef8 <ble_disconnected_state_handler+0x24>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000aef4:	2b08      	cmp	r3, #8
1000aef6:	d102      	bne.n	1000aefe <ble_disconnected_state_handler+0x2a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000aef8:	2301      	movs	r3, #1
1000aefa:	702b      	strb	r3, [r5, #0]
1000aefc:	e01a      	b.n	1000af34 <ble_disconnected_state_handler+0x60>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000aefe:	2b07      	cmp	r3, #7
1000af00:	d80f      	bhi.n	1000af22 <ble_disconnected_state_handler+0x4e>
1000af02:	009b      	lsls	r3, r3, #2
1000af04:	4a13      	ldr	r2, [pc, #76]	; (1000af54 <ble_disconnected_state_handler+0x80>)
1000af06:	58d3      	ldr	r3, [r2, r3]
1000af08:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000af0a:	2300      	movs	r3, #0
1000af0c:	7023      	strb	r3, [r4, #0]
					if (ble_device_count > 0)
1000af0e:	4b12      	ldr	r3, [pc, #72]	; (1000af58 <ble_disconnected_state_handler+0x84>)
1000af10:	781b      	ldrb	r3, [r3, #0]
1000af12:	2b00      	cmp	r3, #0
1000af14:	d00e      	beq.n	1000af34 <ble_disconnected_state_handler+0x60>
					{
						ble_device_count--;
1000af16:	4a10      	ldr	r2, [pc, #64]	; (1000af58 <ble_disconnected_state_handler+0x84>)
1000af18:	7813      	ldrb	r3, [r2, #0]
1000af1a:	3b01      	subs	r3, #1
1000af1c:	b2db      	uxtb	r3, r3
1000af1e:	7013      	strb	r3, [r2, #0]
1000af20:	e008      	b.n	1000af34 <ble_disconnected_state_handler+0x60>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
1000af22:	480e      	ldr	r0, [pc, #56]	; (1000af5c <ble_disconnected_state_handler+0x88>)
1000af24:	4b0e      	ldr	r3, [pc, #56]	; (1000af60 <ble_disconnected_state_handler+0x8c>)
1000af26:	4798      	blx	r3
1000af28:	7829      	ldrb	r1, [r5, #0]
1000af2a:	480e      	ldr	r0, [pc, #56]	; (1000af64 <ble_disconnected_state_handler+0x90>)
1000af2c:	4b0e      	ldr	r3, [pc, #56]	; (1000af68 <ble_disconnected_state_handler+0x94>)
1000af2e:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000af30:	2300      	movs	r3, #0
1000af32:	702b      	strb	r3, [r5, #0]
1000af34:	347c      	adds	r4, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000af36:	42bc      	cmp	r4, r7
1000af38:	d1d2      	bne.n	1000aee0 <ble_disconnected_state_handler+0xc>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000af3a:	4808      	ldr	r0, [pc, #32]	; (1000af5c <ble_disconnected_state_handler+0x88>)
1000af3c:	4b08      	ldr	r3, [pc, #32]	; (1000af60 <ble_disconnected_state_handler+0x8c>)
1000af3e:	4798      	blx	r3
1000af40:	8832      	ldrh	r2, [r6, #0]
1000af42:	78b1      	ldrb	r1, [r6, #2]
1000af44:	4809      	ldr	r0, [pc, #36]	; (1000af6c <ble_disconnected_state_handler+0x98>)
1000af46:	4b08      	ldr	r3, [pc, #32]	; (1000af68 <ble_disconnected_state_handler+0x94>)
1000af48:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000af4a:	2000      	movs	r0, #0
1000af4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000af4e:	46c0      	nop			; (mov r8, r8)
1000af50:	100158f6 	.word	0x100158f6
1000af54:	10012b08 	.word	0x10012b08
1000af58:	10015b04 	.word	0x10015b04
1000af5c:	100123b4 	.word	0x100123b4
1000af60:	100110e9 	.word	0x100110e9
1000af64:	10012dc8 	.word	0x10012dc8
1000af68:	10010fc9 	.word	0x10010fc9
1000af6c:	10012de0 	.word	0x10012de0

1000af70 <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
1000af70:	b510      	push	{r4, lr}
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
1000af72:	4804      	ldr	r0, [pc, #16]	; (1000af84 <ble_conn_param_update+0x14>)
1000af74:	4b04      	ldr	r3, [pc, #16]	; (1000af88 <ble_conn_param_update+0x18>)
1000af76:	4798      	blx	r3
1000af78:	4804      	ldr	r0, [pc, #16]	; (1000af8c <ble_conn_param_update+0x1c>)
1000af7a:	4b05      	ldr	r3, [pc, #20]	; (1000af90 <ble_conn_param_update+0x20>)
1000af7c:	4798      	blx	r3
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000af7e:	2000      	movs	r0, #0
1000af80:	bd10      	pop	{r4, pc}
1000af82:	46c0      	nop			; (mov r8, r8)
1000af84:	100123b4 	.word	0x100123b4
1000af88:	100110e9 	.word	0x100110e9
1000af8c:	10012e10 	.word	0x10012e10
1000af90:	10010fc9 	.word	0x10010fc9

1000af94 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000af94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000af96:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000af98:	8801      	ldrh	r1, [r0, #0]
1000af9a:	4b28      	ldr	r3, [pc, #160]	; (1000b03c <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000af9c:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000af9e:	891a      	ldrh	r2, [r3, #8]
1000afa0:	428a      	cmp	r2, r1
1000afa2:	d104      	bne.n	1000afae <ble_encryption_status_change_handler+0x1a>
1000afa4:	001a      	movs	r2, r3
1000afa6:	325e      	adds	r2, #94	; 0x5e
1000afa8:	7812      	ldrb	r2, [r2, #0]
1000afaa:	2a06      	cmp	r2, #6
1000afac:	d02e      	beq.n	1000b00c <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000afae:	3401      	adds	r4, #1
1000afb0:	b2e4      	uxtb	r4, r4
1000afb2:	337c      	adds	r3, #124	; 0x7c
1000afb4:	2c05      	cmp	r4, #5
1000afb6:	d1f2      	bne.n	1000af9e <ble_encryption_status_change_handler+0xa>
1000afb8:	e039      	b.n	1000b02e <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000afba:	4920      	ldr	r1, [pc, #128]	; (1000b03c <ble_encryption_status_change_handler+0xa8>)
1000afbc:	0163      	lsls	r3, r4, #5
1000afbe:	1b1a      	subs	r2, r3, r4
1000afc0:	0092      	lsls	r2, r2, #2
1000afc2:	188a      	adds	r2, r1, r2
1000afc4:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000afc6:	0014      	movs	r4, r2
1000afc8:	345e      	adds	r4, #94	; 0x5e
1000afca:	2307      	movs	r3, #7
1000afcc:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000afce:	481c      	ldr	r0, [pc, #112]	; (1000b040 <ble_encryption_status_change_handler+0xac>)
1000afd0:	4b1c      	ldr	r3, [pc, #112]	; (1000b044 <ble_encryption_status_change_handler+0xb0>)
1000afd2:	4798      	blx	r3
1000afd4:	481c      	ldr	r0, [pc, #112]	; (1000b048 <ble_encryption_status_change_handler+0xb4>)
1000afd6:	4b1d      	ldr	r3, [pc, #116]	; (1000b04c <ble_encryption_status_change_handler+0xb8>)
1000afd8:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000afda:	25e2      	movs	r5, #226	; 0xe2
1000afdc:	e02b      	b.n	1000b036 <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000afde:	4818      	ldr	r0, [pc, #96]	; (1000b040 <ble_encryption_status_change_handler+0xac>)
1000afe0:	4b18      	ldr	r3, [pc, #96]	; (1000b044 <ble_encryption_status_change_handler+0xb0>)
1000afe2:	4798      	blx	r3
1000afe4:	481a      	ldr	r0, [pc, #104]	; (1000b050 <ble_encryption_status_change_handler+0xbc>)
1000afe6:	4b19      	ldr	r3, [pc, #100]	; (1000b04c <ble_encryption_status_change_handler+0xb8>)
1000afe8:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000afea:	4914      	ldr	r1, [pc, #80]	; (1000b03c <ble_encryption_status_change_handler+0xa8>)
1000afec:	0163      	lsls	r3, r4, #5
1000afee:	1b1a      	subs	r2, r3, r4
1000aff0:	0092      	lsls	r2, r2, #2
1000aff2:	188a      	adds	r2, r1, r2
1000aff4:	0010      	movs	r0, r2
1000aff6:	305e      	adds	r0, #94	; 0x5e
1000aff8:	2708      	movs	r7, #8
1000affa:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000affc:	78f0      	ldrb	r0, [r6, #3]
1000affe:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000b000:	78b2      	ldrb	r2, [r6, #2]
1000b002:	1b1c      	subs	r4, r3, r4
1000b004:	00a4      	lsls	r4, r4, #2
1000b006:	190c      	adds	r4, r1, r4
1000b008:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000b00a:	e014      	b.n	1000b036 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000b00c:	78b5      	ldrb	r5, [r6, #2]
1000b00e:	2d00      	cmp	r5, #0
1000b010:	d0e5      	beq.n	1000afde <ble_encryption_status_change_handler+0x4a>
1000b012:	e7d2      	b.n	1000afba <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000b014:	4e0a      	ldr	r6, [pc, #40]	; (1000b040 <ble_encryption_status_change_handler+0xac>)
1000b016:	0030      	movs	r0, r6
1000b018:	4d0a      	ldr	r5, [pc, #40]	; (1000b044 <ble_encryption_status_change_handler+0xb0>)
1000b01a:	47a8      	blx	r5
1000b01c:	480c      	ldr	r0, [pc, #48]	; (1000b050 <ble_encryption_status_change_handler+0xbc>)
1000b01e:	4c0b      	ldr	r4, [pc, #44]	; (1000b04c <ble_encryption_status_change_handler+0xb8>)
1000b020:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000b022:	0030      	movs	r0, r6
1000b024:	47a8      	blx	r5
1000b026:	480b      	ldr	r0, [pc, #44]	; (1000b054 <ble_encryption_status_change_handler+0xc0>)
1000b028:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000b02a:	25e2      	movs	r5, #226	; 0xe2
1000b02c:	e003      	b.n	1000b036 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000b02e:	78b5      	ldrb	r5, [r6, #2]
1000b030:	2d00      	cmp	r5, #0
1000b032:	d1c2      	bne.n	1000afba <ble_encryption_status_change_handler+0x26>
1000b034:	e7ee      	b.n	1000b014 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000b036:	0028      	movs	r0, r5
1000b038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b03a:	46c0      	nop			; (mov r8, r8)
1000b03c:	10015898 	.word	0x10015898
1000b040:	100123b4 	.word	0x100123b4
1000b044:	100110e9 	.word	0x100110e9
1000b048:	10012e2c 	.word	0x10012e2c
1000b04c:	10010fc9 	.word	0x10010fc9
1000b050:	10012e40 	.word	0x10012e40
1000b054:	10012e64 	.word	0x10012e64

1000b058 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000b058:	b530      	push	{r4, r5, lr}
1000b05a:	b085      	sub	sp, #20
1000b05c:	0004      	movs	r4, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000b05e:	4b1f      	ldr	r3, [pc, #124]	; (1000b0dc <ble_scan_info_handler+0x84>)
1000b060:	781b      	ldrb	r3, [r3, #0]
1000b062:	b2db      	uxtb	r3, r3
1000b064:	2b13      	cmp	r3, #19
1000b066:	d824      	bhi.n	1000b0b2 <ble_scan_info_handler+0x5a>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000b068:	4d1c      	ldr	r5, [pc, #112]	; (1000b0dc <ble_scan_info_handler+0x84>)
1000b06a:	782b      	ldrb	r3, [r5, #0]
1000b06c:	b2db      	uxtb	r3, r3
1000b06e:	0098      	lsls	r0, r3, #2
1000b070:	18c0      	adds	r0, r0, r3
1000b072:	00c0      	lsls	r0, r0, #3
1000b074:	18c3      	adds	r3, r0, r3
1000b076:	481a      	ldr	r0, [pc, #104]	; (1000b0e0 <ble_scan_info_handler+0x88>)
1000b078:	1818      	adds	r0, r3, r0
1000b07a:	2229      	movs	r2, #41	; 0x29
1000b07c:	0021      	movs	r1, r4
1000b07e:	4b19      	ldr	r3, [pc, #100]	; (1000b0e4 <ble_scan_info_handler+0x8c>)
1000b080:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000b082:	4819      	ldr	r0, [pc, #100]	; (1000b0e8 <ble_scan_info_handler+0x90>)
1000b084:	4b19      	ldr	r3, [pc, #100]	; (1000b0ec <ble_scan_info_handler+0x94>)
1000b086:	4798      	blx	r3
1000b088:	7829      	ldrb	r1, [r5, #0]
1000b08a:	b2c9      	uxtb	r1, r1
1000b08c:	79a3      	ldrb	r3, [r4, #6]
1000b08e:	79e2      	ldrb	r2, [r4, #7]
1000b090:	78a0      	ldrb	r0, [r4, #2]
1000b092:	9003      	str	r0, [sp, #12]
1000b094:	78e0      	ldrb	r0, [r4, #3]
1000b096:	9002      	str	r0, [sp, #8]
1000b098:	7920      	ldrb	r0, [r4, #4]
1000b09a:	9001      	str	r0, [sp, #4]
1000b09c:	7960      	ldrb	r0, [r4, #5]
1000b09e:	9000      	str	r0, [sp, #0]
1000b0a0:	4813      	ldr	r0, [pc, #76]	; (1000b0f0 <ble_scan_info_handler+0x98>)
1000b0a2:	4c14      	ldr	r4, [pc, #80]	; (1000b0f4 <ble_scan_info_handler+0x9c>)
1000b0a4:	47a0      	blx	r4
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000b0a6:	782b      	ldrb	r3, [r5, #0]
1000b0a8:	3301      	adds	r3, #1
1000b0aa:	b2db      	uxtb	r3, r3
1000b0ac:	702b      	strb	r3, [r5, #0]
		return AT_BLE_SUCCESS;
1000b0ae:	2300      	movs	r3, #0
1000b0b0:	e011      	b.n	1000b0d6 <ble_scan_info_handler+0x7e>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000b0b2:	480d      	ldr	r0, [pc, #52]	; (1000b0e8 <ble_scan_info_handler+0x90>)
1000b0b4:	4b0d      	ldr	r3, [pc, #52]	; (1000b0ec <ble_scan_info_handler+0x94>)
1000b0b6:	4798      	blx	r3
1000b0b8:	480f      	ldr	r0, [pc, #60]	; (1000b0f8 <ble_scan_info_handler+0xa0>)
1000b0ba:	4b0e      	ldr	r3, [pc, #56]	; (1000b0f4 <ble_scan_info_handler+0x9c>)
1000b0bc:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000b0be:	4b0f      	ldr	r3, [pc, #60]	; (1000b0fc <ble_scan_info_handler+0xa4>)
1000b0c0:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000b0c2:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000b0c4:	2800      	cmp	r0, #0
1000b0c6:	d006      	beq.n	1000b0d6 <ble_scan_info_handler+0x7e>
		{
			DBG_LOG("Failed to stop scanning");
1000b0c8:	4807      	ldr	r0, [pc, #28]	; (1000b0e8 <ble_scan_info_handler+0x90>)
1000b0ca:	4b08      	ldr	r3, [pc, #32]	; (1000b0ec <ble_scan_info_handler+0x94>)
1000b0cc:	4798      	blx	r3
1000b0ce:	480c      	ldr	r0, [pc, #48]	; (1000b100 <ble_scan_info_handler+0xa8>)
1000b0d0:	4b08      	ldr	r3, [pc, #32]	; (1000b0f4 <ble_scan_info_handler+0x9c>)
1000b0d2:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000b0d4:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000b0d6:	0018      	movs	r0, r3
1000b0d8:	b005      	add	sp, #20
1000b0da:	bd30      	pop	{r4, r5, pc}
1000b0dc:	100142e8 	.word	0x100142e8
1000b0e0:	10015b7c 	.word	0x10015b7c
1000b0e4:	10010fa7 	.word	0x10010fa7
1000b0e8:	100123b4 	.word	0x100123b4
1000b0ec:	100110e9 	.word	0x100110e9
1000b0f0:	10012e8c 	.word	0x10012e8c
1000b0f4:	10010fc9 	.word	0x10010fc9
1000b0f8:	10012ec8 	.word	0x10012ec8
1000b0fc:	1000d7b1 	.word	0x1000d7b1
1000b100:	10012f00 	.word	0x10012f00

1000b104 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000b104:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b106:	465f      	mov	r7, fp
1000b108:	4656      	mov	r6, sl
1000b10a:	464d      	mov	r5, r9
1000b10c:	4644      	mov	r4, r8
1000b10e:	b4f0      	push	{r4, r5, r6, r7}
1000b110:	b083      	sub	sp, #12
1000b112:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000b114:	8841      	ldrh	r1, [r0, #2]
1000b116:	4b59      	ldr	r3, [pc, #356]	; (1000b27c <ble_pair_done_handler+0x178>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b118:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000b11a:	891a      	ldrh	r2, [r3, #8]
1000b11c:	428a      	cmp	r2, r1
1000b11e:	d105      	bne.n	1000b12c <ble_pair_done_handler+0x28>
1000b120:	001a      	movs	r2, r3
1000b122:	325e      	adds	r2, #94	; 0x5e
1000b124:	7812      	ldrb	r2, [r2, #0]
1000b126:	2a03      	cmp	r2, #3
1000b128:	d100      	bne.n	1000b12c <ble_pair_done_handler+0x28>
1000b12a:	e09a      	b.n	1000b262 <ble_pair_done_handler+0x15e>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b12c:	3401      	adds	r4, #1
1000b12e:	b2e4      	uxtb	r4, r4
1000b130:	337c      	adds	r3, #124	; 0x7c
1000b132:	2c05      	cmp	r4, #5
1000b134:	d1f1      	bne.n	1000b11a <ble_pair_done_handler+0x16>
1000b136:	e057      	b.n	1000b1e8 <ble_pair_done_handler+0xe4>
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000b138:	7821      	ldrb	r1, [r4, #0]
1000b13a:	0030      	movs	r0, r6
1000b13c:	47b8      	blx	r7
1000b13e:	3401      	adds	r4, #1
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
1000b140:	454c      	cmp	r4, r9
1000b142:	d1f9      	bne.n	1000b138 <ble_pair_done_handler+0x34>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
1000b144:	484e      	ldr	r0, [pc, #312]	; (1000b280 <ble_pair_done_handler+0x17c>)
1000b146:	4b4f      	ldr	r3, [pc, #316]	; (1000b284 <ble_pair_done_handler+0x180>)
1000b148:	4798      	blx	r3
1000b14a:	484f      	ldr	r0, [pc, #316]	; (1000b288 <ble_pair_done_handler+0x184>)
1000b14c:	4b4f      	ldr	r3, [pc, #316]	; (1000b28c <ble_pair_done_handler+0x188>)
1000b14e:	4798      	blx	r3
1000b150:	002e      	movs	r6, r5
1000b152:	3622      	adds	r6, #34	; 0x22
1000b154:	002c      	movs	r4, r5
1000b156:	3432      	adds	r4, #50	; 0x32
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
1000b158:	4f4c      	ldr	r7, [pc, #304]	; (1000b28c <ble_pair_done_handler+0x188>)
1000b15a:	7831      	ldrb	r1, [r6, #0]
1000b15c:	484c      	ldr	r0, [pc, #304]	; (1000b290 <ble_pair_done_handler+0x18c>)
1000b15e:	47b8      	blx	r7
1000b160:	3601      	adds	r6, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
			for (idx = 0; idx < 16; idx++)
1000b162:	42a6      	cmp	r6, r4
1000b164:	d1f9      	bne.n	1000b15a <ble_pair_done_handler+0x56>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
1000b166:	4846      	ldr	r0, [pc, #280]	; (1000b280 <ble_pair_done_handler+0x17c>)
1000b168:	4b46      	ldr	r3, [pc, #280]	; (1000b284 <ble_pair_done_handler+0x180>)
1000b16a:	4798      	blx	r3
1000b16c:	4849      	ldr	r0, [pc, #292]	; (1000b294 <ble_pair_done_handler+0x190>)
1000b16e:	4b47      	ldr	r3, [pc, #284]	; (1000b28c <ble_pair_done_handler+0x188>)
1000b170:	4798      	blx	r3
1000b172:	3542      	adds	r5, #66	; 0x42
1000b174:	002f      	movs	r7, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
1000b176:	4e46      	ldr	r6, [pc, #280]	; (1000b290 <ble_pair_done_handler+0x18c>)
1000b178:	4d44      	ldr	r5, [pc, #272]	; (1000b28c <ble_pair_done_handler+0x188>)
1000b17a:	7821      	ldrb	r1, [r4, #0]
1000b17c:	0030      	movs	r0, r6
1000b17e:	47a8      	blx	r5
1000b180:	3401      	adds	r4, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
			for (idx = 0; idx < 16; idx++)
1000b182:	42bc      	cmp	r4, r7
1000b184:	d1f9      	bne.n	1000b17a <ble_pair_done_handler+0x76>
1000b186:	e071      	b.n	1000b26c <ble_pair_done_handler+0x168>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000b188:	0163      	lsls	r3, r4, #5
1000b18a:	1b1c      	subs	r4, r3, r4
1000b18c:	00a4      	lsls	r4, r4, #2
1000b18e:	4b3b      	ldr	r3, [pc, #236]	; (1000b27c <ble_pair_done_handler+0x178>)
1000b190:	191c      	adds	r4, r3, r4
1000b192:	345e      	adds	r4, #94	; 0x5e
1000b194:	7823      	ldrb	r3, [r4, #0]
1000b196:	2b01      	cmp	r3, #1
1000b198:	d915      	bls.n	1000b1c6 <ble_pair_done_handler+0xc2>
			DBG_LOG("Pairing failed...Disconnecting");
1000b19a:	4839      	ldr	r0, [pc, #228]	; (1000b280 <ble_pair_done_handler+0x17c>)
1000b19c:	4b39      	ldr	r3, [pc, #228]	; (1000b284 <ble_pair_done_handler+0x180>)
1000b19e:	4798      	blx	r3
1000b1a0:	483d      	ldr	r0, [pc, #244]	; (1000b298 <ble_pair_done_handler+0x194>)
1000b1a2:	4b3a      	ldr	r3, [pc, #232]	; (1000b28c <ble_pair_done_handler+0x188>)
1000b1a4:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000b1a6:	8868      	ldrh	r0, [r5, #2]
1000b1a8:	2113      	movs	r1, #19
1000b1aa:	4b3c      	ldr	r3, [pc, #240]	; (1000b29c <ble_pair_done_handler+0x198>)
1000b1ac:	4798      	blx	r3
1000b1ae:	9001      	str	r0, [sp, #4]
1000b1b0:	2800      	cmp	r0, #0
1000b1b2:	d05b      	beq.n	1000b26c <ble_pair_done_handler+0x168>
			{
				DBG_LOG("Disconnect Request Failed");
1000b1b4:	4832      	ldr	r0, [pc, #200]	; (1000b280 <ble_pair_done_handler+0x17c>)
1000b1b6:	4b33      	ldr	r3, [pc, #204]	; (1000b284 <ble_pair_done_handler+0x180>)
1000b1b8:	4798      	blx	r3
1000b1ba:	4839      	ldr	r0, [pc, #228]	; (1000b2a0 <ble_pair_done_handler+0x19c>)
1000b1bc:	4b33      	ldr	r3, [pc, #204]	; (1000b28c <ble_pair_done_handler+0x188>)
1000b1be:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000b1c0:	23e2      	movs	r3, #226	; 0xe2
1000b1c2:	9301      	str	r3, [sp, #4]
1000b1c4:	e052      	b.n	1000b26c <ble_pair_done_handler+0x168>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000b1c6:	2300      	movs	r3, #0
1000b1c8:	9301      	str	r3, [sp, #4]
1000b1ca:	e04f      	b.n	1000b26c <ble_pair_done_handler+0x168>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000b1cc:	4e2c      	ldr	r6, [pc, #176]	; (1000b280 <ble_pair_done_handler+0x17c>)
1000b1ce:	0030      	movs	r0, r6
1000b1d0:	4d2c      	ldr	r5, [pc, #176]	; (1000b284 <ble_pair_done_handler+0x180>)
1000b1d2:	47a8      	blx	r5
1000b1d4:	4833      	ldr	r0, [pc, #204]	; (1000b2a4 <ble_pair_done_handler+0x1a0>)
1000b1d6:	4c2d      	ldr	r4, [pc, #180]	; (1000b28c <ble_pair_done_handler+0x188>)
1000b1d8:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000b1da:	0030      	movs	r0, r6
1000b1dc:	47a8      	blx	r5
1000b1de:	4832      	ldr	r0, [pc, #200]	; (1000b2a8 <ble_pair_done_handler+0x1a4>)
1000b1e0:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000b1e2:	23e2      	movs	r3, #226	; 0xe2
1000b1e4:	9301      	str	r3, [sp, #4]
1000b1e6:	e041      	b.n	1000b26c <ble_pair_done_handler+0x168>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000b1e8:	792b      	ldrb	r3, [r5, #4]
1000b1ea:	2b00      	cmp	r3, #0
1000b1ec:	d1cc      	bne.n	1000b188 <ble_pair_done_handler+0x84>
1000b1ee:	e7ed      	b.n	1000b1cc <ble_pair_done_handler+0xc8>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000b1f0:	4823      	ldr	r0, [pc, #140]	; (1000b280 <ble_pair_done_handler+0x17c>)
1000b1f2:	4b24      	ldr	r3, [pc, #144]	; (1000b284 <ble_pair_done_handler+0x180>)
1000b1f4:	469b      	mov	fp, r3
1000b1f6:	4798      	blx	r3
1000b1f8:	482a      	ldr	r0, [pc, #168]	; (1000b2a4 <ble_pair_done_handler+0x1a0>)
1000b1fa:	4b24      	ldr	r3, [pc, #144]	; (1000b28c <ble_pair_done_handler+0x188>)
1000b1fc:	469a      	mov	sl, r3
1000b1fe:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000b200:	782a      	ldrb	r2, [r5, #0]
1000b202:	4b1e      	ldr	r3, [pc, #120]	; (1000b27c <ble_pair_done_handler+0x178>)
1000b204:	4698      	mov	r8, r3
1000b206:	0167      	lsls	r7, r4, #5
1000b208:	1b3b      	subs	r3, r7, r4
1000b20a:	009b      	lsls	r3, r3, #2
1000b20c:	4443      	add	r3, r8
1000b20e:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000b210:	792a      	ldrb	r2, [r5, #4]
1000b212:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000b214:	335e      	adds	r3, #94	; 0x5e
1000b216:	2205      	movs	r2, #5
1000b218:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000b21a:	1b38      	subs	r0, r7, r4
1000b21c:	0080      	lsls	r0, r0, #2
1000b21e:	4440      	add	r0, r8
1000b220:	3036      	adds	r0, #54	; 0x36
1000b222:	320b      	adds	r2, #11
1000b224:	0029      	movs	r1, r5
1000b226:	3122      	adds	r1, #34	; 0x22
1000b228:	4b20      	ldr	r3, [pc, #128]	; (1000b2ac <ble_pair_done_handler+0x1a8>)
1000b22a:	4699      	mov	r9, r3
1000b22c:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000b22e:	1b38      	subs	r0, r7, r4
1000b230:	0080      	lsls	r0, r0, #2
1000b232:	4440      	add	r0, r8
1000b234:	3046      	adds	r0, #70	; 0x46
1000b236:	2217      	movs	r2, #23
1000b238:	0029      	movs	r1, r5
1000b23a:	3132      	adds	r1, #50	; 0x32
1000b23c:	47c8      	blx	r9
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000b23e:	1b38      	subs	r0, r7, r4
1000b240:	0080      	lsls	r0, r0, #2
1000b242:	4440      	add	r0, r8
1000b244:	301a      	adds	r0, #26
1000b246:	1dac      	adds	r4, r5, #6
1000b248:	221c      	movs	r2, #28
1000b24a:	0021      	movs	r1, r4
1000b24c:	47c8      	blx	r9
			
			DBG_LOG_DEV("LTK: ");
1000b24e:	480c      	ldr	r0, [pc, #48]	; (1000b280 <ble_pair_done_handler+0x17c>)
1000b250:	47d8      	blx	fp
1000b252:	4817      	ldr	r0, [pc, #92]	; (1000b2b0 <ble_pair_done_handler+0x1ac>)
1000b254:	47d0      	blx	sl
1000b256:	2316      	movs	r3, #22
1000b258:	4699      	mov	r9, r3
1000b25a:	44a9      	add	r9, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000b25c:	4e0c      	ldr	r6, [pc, #48]	; (1000b290 <ble_pair_done_handler+0x18c>)
1000b25e:	4f0b      	ldr	r7, [pc, #44]	; (1000b28c <ble_pair_done_handler+0x188>)
1000b260:	e76a      	b.n	1000b138 <ble_pair_done_handler+0x34>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000b262:	792b      	ldrb	r3, [r5, #4]
1000b264:	9301      	str	r3, [sp, #4]
1000b266:	2b00      	cmp	r3, #0
1000b268:	d0c2      	beq.n	1000b1f0 <ble_pair_done_handler+0xec>
1000b26a:	e78d      	b.n	1000b188 <ble_pair_done_handler+0x84>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000b26c:	9801      	ldr	r0, [sp, #4]
1000b26e:	b003      	add	sp, #12
1000b270:	bc3c      	pop	{r2, r3, r4, r5}
1000b272:	4690      	mov	r8, r2
1000b274:	4699      	mov	r9, r3
1000b276:	46a2      	mov	sl, r4
1000b278:	46ab      	mov	fp, r5
1000b27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b27c:	10015898 	.word	0x10015898
1000b280:	100123b4 	.word	0x100123b4
1000b284:	100110e9 	.word	0x100110e9
1000b288:	10012f24 	.word	0x10012f24
1000b28c:	10010fc9 	.word	0x10010fc9
1000b290:	10012f18 	.word	0x10012f18
1000b294:	10012f2c 	.word	0x10012f2c
1000b298:	10012f34 	.word	0x10012f34
1000b29c:	1000d7d1 	.word	0x1000d7d1
1000b2a0:	10012f54 	.word	0x10012f54
1000b2a4:	10012f70 	.word	0x10012f70
1000b2a8:	10012f9c 	.word	0x10012f9c
1000b2ac:	10010fa7 	.word	0x10010fa7
1000b2b0:	10012fcc 	.word	0x10012fcc

1000b2b4 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000b2b4:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000b2b6:	8800      	ldrh	r0, [r0, #0]
1000b2b8:	2378      	movs	r3, #120	; 0x78
1000b2ba:	2201      	movs	r2, #1
1000b2bc:	2101      	movs	r1, #1
1000b2be:	4c02      	ldr	r4, [pc, #8]	; (1000b2c8 <ble_conn_param_update_req+0x14>)
1000b2c0:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000b2c2:	2000      	movs	r0, #0
1000b2c4:	bd10      	pop	{r4, pc}
1000b2c6:	46c0      	nop			; (mov r8, r8)
1000b2c8:	1000d7f1 	.word	0x1000d7f1

1000b2cc <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000b2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b2ce:	4657      	mov	r7, sl
1000b2d0:	464e      	mov	r6, r9
1000b2d2:	4645      	mov	r5, r8
1000b2d4:	b4e0      	push	{r5, r6, r7}
1000b2d6:	b084      	sub	sp, #16
1000b2d8:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000b2da:	2209      	movs	r2, #9
1000b2dc:	2100      	movs	r1, #0
1000b2de:	a801      	add	r0, sp, #4
1000b2e0:	4b6a      	ldr	r3, [pc, #424]	; (1000b48c <ble_slave_security_request_handler+0x1c0>)
1000b2e2:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b2e4:	8825      	ldrh	r5, [r4, #0]
1000b2e6:	496a      	ldr	r1, [pc, #424]	; (1000b490 <ble_slave_security_request_handler+0x1c4>)
1000b2e8:	000a      	movs	r2, r1
1000b2ea:	2300      	movs	r3, #0
1000b2ec:	8910      	ldrh	r0, [r2, #8]
1000b2ee:	42a8      	cmp	r0, r5
1000b2f0:	d116      	bne.n	1000b320 <ble_slave_security_request_handler+0x54>
1000b2f2:	0010      	movs	r0, r2
1000b2f4:	305e      	adds	r0, #94	; 0x5e
1000b2f6:	7800      	ldrb	r0, [r0, #0]
1000b2f8:	2802      	cmp	r0, #2
1000b2fa:	d111      	bne.n	1000b320 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000b2fc:	4864      	ldr	r0, [pc, #400]	; (1000b490 <ble_slave_security_request_handler+0x1c4>)
1000b2fe:	015a      	lsls	r2, r3, #5
1000b300:	1ad6      	subs	r6, r2, r3
1000b302:	00b6      	lsls	r6, r6, #2
1000b304:	1986      	adds	r6, r0, r6
1000b306:	365e      	adds	r6, #94	; 0x5e
1000b308:	2206      	movs	r2, #6
1000b30a:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000b30c:	32f9      	adds	r2, #249	; 0xf9
1000b30e:	4013      	ands	r3, r2
1000b310:	015a      	lsls	r2, r3, #5
1000b312:	1ad2      	subs	r2, r2, r3
1000b314:	0092      	lsls	r2, r2, #2
1000b316:	1882      	adds	r2, r0, r2
1000b318:	7d12      	ldrb	r2, [r2, #20]
1000b31a:	07d0      	lsls	r0, r2, #31
1000b31c:	d405      	bmi.n	1000b32a <ble_slave_security_request_handler+0x5e>
1000b31e:	e01b      	b.n	1000b358 <ble_slave_security_request_handler+0x8c>
1000b320:	3301      	adds	r3, #1
1000b322:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b324:	2b05      	cmp	r3, #5
1000b326:	d1e1      	bne.n	1000b2ec <ble_slave_security_request_handler+0x20>
1000b328:	e01e      	b.n	1000b368 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000b32a:	78e0      	ldrb	r0, [r4, #3]
1000b32c:	2800      	cmp	r0, #0
1000b32e:	d013      	beq.n	1000b358 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000b330:	0159      	lsls	r1, r3, #5
1000b332:	1ac9      	subs	r1, r1, r3
1000b334:	008b      	lsls	r3, r1, #2
1000b336:	4956      	ldr	r1, [pc, #344]	; (1000b490 <ble_slave_security_request_handler+0x1c4>)
1000b338:	18c9      	adds	r1, r1, r3
1000b33a:	311a      	adds	r1, #26
1000b33c:	8820      	ldrh	r0, [r4, #0]
1000b33e:	4b55      	ldr	r3, [pc, #340]	; (1000b494 <ble_slave_security_request_handler+0x1c8>)
1000b340:	4798      	blx	r3
1000b342:	2800      	cmp	r0, #0
1000b344:	d100      	bne.n	1000b348 <ble_slave_security_request_handler+0x7c>
1000b346:	e09b      	b.n	1000b480 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000b348:	4853      	ldr	r0, [pc, #332]	; (1000b498 <ble_slave_security_request_handler+0x1cc>)
1000b34a:	4b54      	ldr	r3, [pc, #336]	; (1000b49c <ble_slave_security_request_handler+0x1d0>)
1000b34c:	4798      	blx	r3
1000b34e:	4854      	ldr	r0, [pc, #336]	; (1000b4a0 <ble_slave_security_request_handler+0x1d4>)
1000b350:	4b54      	ldr	r3, [pc, #336]	; (1000b4a4 <ble_slave_security_request_handler+0x1d8>)
1000b352:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000b354:	20e2      	movs	r0, #226	; 0xe2
1000b356:	e093      	b.n	1000b480 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000b358:	015a      	lsls	r2, r3, #5
1000b35a:	1ad3      	subs	r3, r2, r3
1000b35c:	009b      	lsls	r3, r3, #2
1000b35e:	4a4c      	ldr	r2, [pc, #304]	; (1000b490 <ble_slave_security_request_handler+0x1c4>)
1000b360:	18d3      	adds	r3, r2, r3
1000b362:	335e      	adds	r3, #94	; 0x5e
1000b364:	2202      	movs	r2, #2
1000b366:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b368:	8825      	ldrh	r5, [r4, #0]
1000b36a:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b36c:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b36e:	0016      	movs	r6, r2
1000b370:	8908      	ldrh	r0, [r1, #8]
1000b372:	42a8      	cmp	r0, r5
1000b374:	d10d      	bne.n	1000b392 <ble_slave_security_request_handler+0xc6>
1000b376:	0008      	movs	r0, r1
1000b378:	305e      	adds	r0, #94	; 0x5e
1000b37a:	7800      	ldrb	r0, [r0, #0]
1000b37c:	2802      	cmp	r0, #2
1000b37e:	d108      	bne.n	1000b392 <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000b380:	0152      	lsls	r2, r2, #5
1000b382:	1b92      	subs	r2, r2, r6
1000b384:	0096      	lsls	r6, r2, #2
1000b386:	4a42      	ldr	r2, [pc, #264]	; (1000b490 <ble_slave_security_request_handler+0x1c4>)
1000b388:	1992      	adds	r2, r2, r6
1000b38a:	325e      	adds	r2, #94	; 0x5e
1000b38c:	2103      	movs	r1, #3
1000b38e:	7011      	strb	r1, [r2, #0]
			break;
1000b390:	e005      	b.n	1000b39e <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b392:	3301      	adds	r3, #1
1000b394:	b2db      	uxtb	r3, r3
1000b396:	3201      	adds	r2, #1
1000b398:	317c      	adds	r1, #124	; 0x7c
1000b39a:	2b05      	cmp	r3, #5
1000b39c:	d1e7      	bne.n	1000b36e <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000b39e:	aa01      	add	r2, sp, #4
1000b3a0:	78e1      	ldrb	r1, [r4, #3]
1000b3a2:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000b3a4:	2101      	movs	r1, #1
1000b3a6:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000b3a8:	3103      	adds	r1, #3
1000b3aa:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000b3ac:	001f      	movs	r7, r3
1000b3ae:	015a      	lsls	r2, r3, #5
1000b3b0:	1ad2      	subs	r2, r2, r3
1000b3b2:	0092      	lsls	r2, r2, #2
1000b3b4:	4936      	ldr	r1, [pc, #216]	; (1000b490 <ble_slave_security_request_handler+0x1c4>)
1000b3b6:	5c52      	ldrb	r2, [r2, r1]
1000b3b8:	2a02      	cmp	r2, #2
1000b3ba:	d104      	bne.n	1000b3c6 <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000b3bc:	aa01      	add	r2, sp, #4
1000b3be:	2103      	movs	r1, #3
1000b3c0:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000b3c2:	71d1      	strb	r1, [r2, #7]
1000b3c4:	e003      	b.n	1000b3ce <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000b3c6:	aa01      	add	r2, sp, #4
1000b3c8:	2101      	movs	r1, #1
1000b3ca:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000b3cc:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000b3ce:	aa01      	add	r2, sp, #4
1000b3d0:	2110      	movs	r1, #16
1000b3d2:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000b3d4:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000b3d6:	017a      	lsls	r2, r7, #5
1000b3d8:	1bd2      	subs	r2, r2, r7
1000b3da:	0092      	lsls	r2, r2, #2
1000b3dc:	492c      	ldr	r1, [pc, #176]	; (1000b490 <ble_slave_security_request_handler+0x1c4>)
1000b3de:	188a      	adds	r2, r1, r2
1000b3e0:	7e12      	ldrb	r2, [r2, #24]
1000b3e2:	2a40      	cmp	r2, #64	; 0x40
1000b3e4:	d134      	bne.n	1000b450 <ble_slave_security_request_handler+0x184>
1000b3e6:	015a      	lsls	r2, r3, #5
1000b3e8:	1ad3      	subs	r3, r2, r3
1000b3ea:	009b      	lsls	r3, r3, #2
1000b3ec:	469a      	mov	sl, r3
1000b3ee:	001e      	movs	r6, r3
1000b3f0:	3660      	adds	r6, #96	; 0x60
1000b3f2:	1876      	adds	r6, r6, r1
1000b3f4:	4655      	mov	r5, sl
1000b3f6:	3568      	adds	r5, #104	; 0x68
1000b3f8:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000b3fa:	4b2b      	ldr	r3, [pc, #172]	; (1000b4a8 <ble_slave_security_request_handler+0x1dc>)
1000b3fc:	4699      	mov	r9, r3
1000b3fe:	230f      	movs	r3, #15
1000b400:	4698      	mov	r8, r3
1000b402:	47c8      	blx	r9
1000b404:	4643      	mov	r3, r8
1000b406:	4018      	ands	r0, r3
1000b408:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000b40a:	47c8      	blx	r9
1000b40c:	4643      	mov	r3, r8
1000b40e:	4018      	ands	r0, r3
1000b410:	74b0      	strb	r0, [r6, #18]
1000b412:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000b414:	42ae      	cmp	r6, r5
1000b416:	d1f4      	bne.n	1000b402 <ble_slave_security_request_handler+0x136>
1000b418:	4656      	mov	r6, sl
1000b41a:	3670      	adds	r6, #112	; 0x70
1000b41c:	4a1c      	ldr	r2, [pc, #112]	; (1000b490 <ble_slave_security_request_handler+0x1c4>)
1000b41e:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000b420:	4b21      	ldr	r3, [pc, #132]	; (1000b4a8 <ble_slave_security_request_handler+0x1dc>)
1000b422:	4699      	mov	r9, r3
1000b424:	230f      	movs	r3, #15
1000b426:	4698      	mov	r8, r3
1000b428:	47c8      	blx	r9
1000b42a:	4643      	mov	r3, r8
1000b42c:	4018      	ands	r0, r3
1000b42e:	7028      	strb	r0, [r5, #0]
1000b430:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000b432:	42b5      	cmp	r5, r6
1000b434:	d1f8      	bne.n	1000b428 <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000b436:	4b1c      	ldr	r3, [pc, #112]	; (1000b4a8 <ble_slave_security_request_handler+0x1dc>)
1000b438:	4798      	blx	r3
1000b43a:	017b      	lsls	r3, r7, #5
1000b43c:	1bdb      	subs	r3, r3, r7
1000b43e:	009b      	lsls	r3, r3, #2
1000b440:	4a13      	ldr	r2, [pc, #76]	; (1000b490 <ble_slave_security_request_handler+0x1c4>)
1000b442:	18d3      	adds	r3, r2, r3
1000b444:	001a      	movs	r2, r3
1000b446:	3270      	adds	r2, #112	; 0x70
1000b448:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000b44a:	337a      	adds	r3, #122	; 0x7a
1000b44c:	2210      	movs	r2, #16
1000b44e:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000b450:	017a      	lsls	r2, r7, #5
1000b452:	1bd7      	subs	r7, r2, r7
1000b454:	00bf      	lsls	r7, r7, #2
1000b456:	3760      	adds	r7, #96	; 0x60
1000b458:	4a0d      	ldr	r2, [pc, #52]	; (1000b490 <ble_slave_security_request_handler+0x1c4>)
1000b45a:	18ba      	adds	r2, r7, r2
1000b45c:	8820      	ldrh	r0, [r4, #0]
1000b45e:	2300      	movs	r3, #0
1000b460:	a901      	add	r1, sp, #4
1000b462:	4c12      	ldr	r4, [pc, #72]	; (1000b4ac <ble_slave_security_request_handler+0x1e0>)
1000b464:	47a0      	blx	r4
1000b466:	2800      	cmp	r0, #0
1000b468:	d00a      	beq.n	1000b480 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000b46a:	ab01      	add	r3, sp, #4
1000b46c:	2200      	movs	r2, #0
1000b46e:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000b470:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000b472:	4809      	ldr	r0, [pc, #36]	; (1000b498 <ble_slave_security_request_handler+0x1cc>)
1000b474:	4b09      	ldr	r3, [pc, #36]	; (1000b49c <ble_slave_security_request_handler+0x1d0>)
1000b476:	4798      	blx	r3
1000b478:	480d      	ldr	r0, [pc, #52]	; (1000b4b0 <ble_slave_security_request_handler+0x1e4>)
1000b47a:	4b0a      	ldr	r3, [pc, #40]	; (1000b4a4 <ble_slave_security_request_handler+0x1d8>)
1000b47c:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000b47e:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000b480:	b004      	add	sp, #16
1000b482:	bc1c      	pop	{r2, r3, r4}
1000b484:	4690      	mov	r8, r2
1000b486:	4699      	mov	r9, r3
1000b488:	46a2      	mov	sl, r4
1000b48a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b48c:	10010fb9 	.word	0x10010fb9
1000b490:	10015898 	.word	0x10015898
1000b494:	1000e3b5 	.word	0x1000e3b5
1000b498:	100123b4 	.word	0x100123b4
1000b49c:	100110e9 	.word	0x100110e9
1000b4a0:	10012fd4 	.word	0x10012fd4
1000b4a4:	10010fc9 	.word	0x10010fc9
1000b4a8:	100110fd 	.word	0x100110fd
1000b4ac:	1000e1c9 	.word	0x1000e1c9
1000b4b0:	10012fec 	.word	0x10012fec

1000b4b4 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000b4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b4b6:	465f      	mov	r7, fp
1000b4b8:	4656      	mov	r6, sl
1000b4ba:	464d      	mov	r5, r9
1000b4bc:	4644      	mov	r4, r8
1000b4be:	b4f0      	push	{r4, r5, r6, r7}
1000b4c0:	b085      	sub	sp, #20
1000b4c2:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b4c4:	8804      	ldrh	r4, [r0, #0]
1000b4c6:	4a54      	ldr	r2, [pc, #336]	; (1000b618 <ble_pair_request_handler+0x164>)
1000b4c8:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b4ca:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b4cc:	8910      	ldrh	r0, [r2, #8]
1000b4ce:	42a0      	cmp	r0, r4
1000b4d0:	d10d      	bne.n	1000b4ee <ble_pair_request_handler+0x3a>
1000b4d2:	0010      	movs	r0, r2
1000b4d4:	305e      	adds	r0, #94	; 0x5e
1000b4d6:	7800      	ldrb	r0, [r0, #0]
1000b4d8:	2802      	cmp	r0, #2
1000b4da:	d108      	bne.n	1000b4ee <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000b4dc:	014a      	lsls	r2, r1, #5
1000b4de:	1a52      	subs	r2, r2, r1
1000b4e0:	0095      	lsls	r5, r2, #2
1000b4e2:	4a4d      	ldr	r2, [pc, #308]	; (1000b618 <ble_pair_request_handler+0x164>)
1000b4e4:	1952      	adds	r2, r2, r5
1000b4e6:	325e      	adds	r2, #94	; 0x5e
1000b4e8:	2103      	movs	r1, #3
1000b4ea:	7011      	strb	r1, [r2, #0]
			break;
1000b4ec:	e005      	b.n	1000b4fa <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b4ee:	3301      	adds	r3, #1
1000b4f0:	b2db      	uxtb	r3, r3
1000b4f2:	3101      	adds	r1, #1
1000b4f4:	327c      	adds	r2, #124	; 0x7c
1000b4f6:	2b05      	cmp	r3, #5
1000b4f8:	d1e8      	bne.n	1000b4cc <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000b4fa:	aa01      	add	r2, sp, #4
1000b4fc:	2100      	movs	r1, #0
1000b4fe:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000b500:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000b502:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000b504:	2003      	movs	r0, #3
1000b506:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000b508:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000b50a:	001e      	movs	r6, r3
1000b50c:	015a      	lsls	r2, r3, #5
1000b50e:	1ad2      	subs	r2, r2, r3
1000b510:	0092      	lsls	r2, r2, #2
1000b512:	4941      	ldr	r1, [pc, #260]	; (1000b618 <ble_pair_request_handler+0x164>)
1000b514:	5c52      	ldrb	r2, [r2, r1]
1000b516:	2a02      	cmp	r2, #2
1000b518:	d104      	bne.n	1000b524 <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000b51a:	aa01      	add	r2, sp, #4
1000b51c:	2103      	movs	r1, #3
1000b51e:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000b520:	71d1      	strb	r1, [r2, #7]
1000b522:	e003      	b.n	1000b52c <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000b524:	aa01      	add	r2, sp, #4
1000b526:	2101      	movs	r1, #1
1000b528:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000b52a:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000b52c:	aa01      	add	r2, sp, #4
1000b52e:	2110      	movs	r1, #16
1000b530:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000b532:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000b534:	0172      	lsls	r2, r6, #5
1000b536:	1b92      	subs	r2, r2, r6
1000b538:	0092      	lsls	r2, r2, #2
1000b53a:	4937      	ldr	r1, [pc, #220]	; (1000b618 <ble_pair_request_handler+0x164>)
1000b53c:	188a      	adds	r2, r1, r2
1000b53e:	7e12      	ldrb	r2, [r2, #24]
1000b540:	2a40      	cmp	r2, #64	; 0x40
1000b542:	d142      	bne.n	1000b5ca <ble_pair_request_handler+0x116>
1000b544:	015f      	lsls	r7, r3, #5
1000b546:	1afb      	subs	r3, r7, r3
1000b548:	009b      	lsls	r3, r3, #2
1000b54a:	469b      	mov	fp, r3
1000b54c:	001c      	movs	r4, r3
1000b54e:	3460      	adds	r4, #96	; 0x60
1000b550:	1864      	adds	r4, r4, r1
1000b552:	465d      	mov	r5, fp
1000b554:	3568      	adds	r5, #104	; 0x68
1000b556:	186d      	adds	r5, r5, r1
1000b558:	0027      	movs	r7, r4
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000b55a:	4b30      	ldr	r3, [pc, #192]	; (1000b61c <ble_pair_request_handler+0x168>)
1000b55c:	469a      	mov	sl, r3
1000b55e:	230f      	movs	r3, #15
1000b560:	4699      	mov	r9, r3
1000b562:	47d0      	blx	sl
1000b564:	464b      	mov	r3, r9
1000b566:	4018      	ands	r0, r3
1000b568:	7038      	strb	r0, [r7, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000b56a:	47d0      	blx	sl
1000b56c:	464b      	mov	r3, r9
1000b56e:	4018      	ands	r0, r3
1000b570:	74b8      	strb	r0, [r7, #18]
1000b572:	3701      	adds	r7, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000b574:	42af      	cmp	r7, r5
1000b576:	d1f4      	bne.n	1000b562 <ble_pair_request_handler+0xae>
1000b578:	465b      	mov	r3, fp
1000b57a:	3370      	adds	r3, #112	; 0x70
1000b57c:	4f26      	ldr	r7, [pc, #152]	; (1000b618 <ble_pair_request_handler+0x164>)
1000b57e:	19df      	adds	r7, r3, r7
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000b580:	4b26      	ldr	r3, [pc, #152]	; (1000b61c <ble_pair_request_handler+0x168>)
1000b582:	469a      	mov	sl, r3
1000b584:	230f      	movs	r3, #15
1000b586:	4699      	mov	r9, r3
1000b588:	47d0      	blx	sl
1000b58a:	464b      	mov	r3, r9
1000b58c:	4018      	ands	r0, r3
1000b58e:	7028      	strb	r0, [r5, #0]
1000b590:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000b592:	42bd      	cmp	r5, r7
1000b594:	d1f8      	bne.n	1000b588 <ble_pair_request_handler+0xd4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
1000b596:	4822      	ldr	r0, [pc, #136]	; (1000b620 <ble_pair_request_handler+0x16c>)
1000b598:	4b22      	ldr	r3, [pc, #136]	; (1000b624 <ble_pair_request_handler+0x170>)
1000b59a:	4798      	blx	r3
1000b59c:	4822      	ldr	r0, [pc, #136]	; (1000b628 <ble_pair_request_handler+0x174>)
1000b59e:	4b23      	ldr	r3, [pc, #140]	; (1000b62c <ble_pair_request_handler+0x178>)
1000b5a0:	4798      	blx	r3
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
1000b5a2:	4d22      	ldr	r5, [pc, #136]	; (1000b62c <ble_pair_request_handler+0x178>)
1000b5a4:	7821      	ldrb	r1, [r4, #0]
1000b5a6:	4822      	ldr	r0, [pc, #136]	; (1000b630 <ble_pair_request_handler+0x17c>)
1000b5a8:	47a8      	blx	r5
1000b5aa:	3401      	adds	r4, #1
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
1000b5ac:	42bc      	cmp	r4, r7
1000b5ae:	d1f9      	bne.n	1000b5a4 <ble_pair_request_handler+0xf0>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000b5b0:	4b1a      	ldr	r3, [pc, #104]	; (1000b61c <ble_pair_request_handler+0x168>)
1000b5b2:	4798      	blx	r3
1000b5b4:	0173      	lsls	r3, r6, #5
1000b5b6:	1b9b      	subs	r3, r3, r6
1000b5b8:	009b      	lsls	r3, r3, #2
1000b5ba:	4a17      	ldr	r2, [pc, #92]	; (1000b618 <ble_pair_request_handler+0x164>)
1000b5bc:	18d3      	adds	r3, r2, r3
1000b5be:	001a      	movs	r2, r3
1000b5c0:	3270      	adds	r2, #112	; 0x70
1000b5c2:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000b5c4:	337a      	adds	r3, #122	; 0x7a
1000b5c6:	2210      	movs	r2, #16
1000b5c8:	701a      	strb	r2, [r3, #0]
		/* Bonding information already exists */
		
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");
1000b5ca:	4815      	ldr	r0, [pc, #84]	; (1000b620 <ble_pair_request_handler+0x16c>)
1000b5cc:	4b15      	ldr	r3, [pc, #84]	; (1000b624 <ble_pair_request_handler+0x170>)
1000b5ce:	4798      	blx	r3
1000b5d0:	4818      	ldr	r0, [pc, #96]	; (1000b634 <ble_pair_request_handler+0x180>)
1000b5d2:	4b16      	ldr	r3, [pc, #88]	; (1000b62c <ble_pair_request_handler+0x178>)
1000b5d4:	4798      	blx	r3

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000b5d6:	0173      	lsls	r3, r6, #5
1000b5d8:	1b9b      	subs	r3, r3, r6
1000b5da:	009b      	lsls	r3, r3, #2
1000b5dc:	3360      	adds	r3, #96	; 0x60
1000b5de:	4a0e      	ldr	r2, [pc, #56]	; (1000b618 <ble_pair_request_handler+0x164>)
1000b5e0:	189a      	adds	r2, r3, r2
1000b5e2:	4643      	mov	r3, r8
1000b5e4:	8818      	ldrh	r0, [r3, #0]
1000b5e6:	2300      	movs	r3, #0
1000b5e8:	a901      	add	r1, sp, #4
1000b5ea:	4c13      	ldr	r4, [pc, #76]	; (1000b638 <ble_pair_request_handler+0x184>)
1000b5ec:	47a0      	blx	r4
1000b5ee:	2800      	cmp	r0, #0
1000b5f0:	d00a      	beq.n	1000b608 <ble_pair_request_handler+0x154>
	{
		features.bond = false;
1000b5f2:	ab01      	add	r3, sp, #4
1000b5f4:	2200      	movs	r2, #0
1000b5f6:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000b5f8:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000b5fa:	4809      	ldr	r0, [pc, #36]	; (1000b620 <ble_pair_request_handler+0x16c>)
1000b5fc:	4b09      	ldr	r3, [pc, #36]	; (1000b624 <ble_pair_request_handler+0x170>)
1000b5fe:	4798      	blx	r3
1000b600:	480e      	ldr	r0, [pc, #56]	; (1000b63c <ble_pair_request_handler+0x188>)
1000b602:	4b0a      	ldr	r3, [pc, #40]	; (1000b62c <ble_pair_request_handler+0x178>)
1000b604:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000b606:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000b608:	b005      	add	sp, #20
1000b60a:	bc3c      	pop	{r2, r3, r4, r5}
1000b60c:	4690      	mov	r8, r2
1000b60e:	4699      	mov	r9, r3
1000b610:	46a2      	mov	sl, r4
1000b612:	46ab      	mov	fp, r5
1000b614:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b616:	46c0      	nop			; (mov r8, r8)
1000b618:	10015898 	.word	0x10015898
1000b61c:	100110fd 	.word	0x100110fd
1000b620:	100123b4 	.word	0x100123b4
1000b624:	100110e9 	.word	0x100110e9
1000b628:	10013018 	.word	0x10013018
1000b62c:	10010fc9 	.word	0x10010fc9
1000b630:	10013028 	.word	0x10013028
1000b634:	10013030 	.word	0x10013030
1000b638:	1000e1c9 	.word	0x1000e1c9
1000b63c:	1001304c 	.word	0x1001304c

1000b640 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000b640:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b642:	b085      	sub	sp, #20
1000b644:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000b646:	2206      	movs	r2, #6
1000b648:	493d      	ldr	r1, [pc, #244]	; (1000b740 <ble_pair_key_request_handler+0x100>)
1000b64a:	a802      	add	r0, sp, #8
1000b64c:	4e3d      	ldr	r6, [pc, #244]	; (1000b744 <ble_pair_key_request_handler+0x104>)
1000b64e:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000b650:	ac01      	add	r4, sp, #4
1000b652:	2204      	movs	r2, #4
1000b654:	0029      	movs	r1, r5
1000b656:	0020      	movs	r0, r4
1000b658:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000b65a:	78e3      	ldrb	r3, [r4, #3]
1000b65c:	2b00      	cmp	r3, #0
1000b65e:	d162      	bne.n	1000b726 <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000b660:	4839      	ldr	r0, [pc, #228]	; (1000b748 <ble_pair_key_request_handler+0x108>)
1000b662:	4b3a      	ldr	r3, [pc, #232]	; (1000b74c <ble_pair_key_request_handler+0x10c>)
1000b664:	4798      	blx	r3
1000b666:	483a      	ldr	r0, [pc, #232]	; (1000b750 <ble_pair_key_request_handler+0x110>)
1000b668:	4b3a      	ldr	r3, [pc, #232]	; (1000b754 <ble_pair_key_request_handler+0x114>)
1000b66a:	4798      	blx	r3
1000b66c:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000b66e:	4c3a      	ldr	r4, [pc, #232]	; (1000b758 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000b670:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000b672:	201e      	movs	r0, #30
1000b674:	47a0      	blx	r4
1000b676:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000b678:	2b00      	cmp	r3, #0
1000b67a:	d11a      	bne.n	1000b6b2 <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000b67c:	4f32      	ldr	r7, [pc, #200]	; (1000b748 <ble_pair_key_request_handler+0x108>)
1000b67e:	0038      	movs	r0, r7
1000b680:	4e32      	ldr	r6, [pc, #200]	; (1000b74c <ble_pair_key_request_handler+0x10c>)
1000b682:	47b0      	blx	r6
1000b684:	4835      	ldr	r0, [pc, #212]	; (1000b75c <ble_pair_key_request_handler+0x11c>)
1000b686:	4c33      	ldr	r4, [pc, #204]	; (1000b754 <ble_pair_key_request_handler+0x114>)
1000b688:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000b68a:	0038      	movs	r0, r7
1000b68c:	47b0      	blx	r6
1000b68e:	4834      	ldr	r0, [pc, #208]	; (1000b760 <ble_pair_key_request_handler+0x120>)
1000b690:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000b692:	8828      	ldrh	r0, [r5, #0]
1000b694:	2113      	movs	r1, #19
1000b696:	4b33      	ldr	r3, [pc, #204]	; (1000b764 <ble_pair_key_request_handler+0x124>)
1000b698:	4798      	blx	r3
1000b69a:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000b69c:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000b69e:	2b00      	cmp	r3, #0
1000b6a0:	d04c      	beq.n	1000b73c <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000b6a2:	4829      	ldr	r0, [pc, #164]	; (1000b748 <ble_pair_key_request_handler+0x108>)
1000b6a4:	4b29      	ldr	r3, [pc, #164]	; (1000b74c <ble_pair_key_request_handler+0x10c>)
1000b6a6:	4798      	blx	r3
1000b6a8:	482f      	ldr	r0, [pc, #188]	; (1000b768 <ble_pair_key_request_handler+0x128>)
1000b6aa:	4b2a      	ldr	r3, [pc, #168]	; (1000b754 <ble_pair_key_request_handler+0x114>)
1000b6ac:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000b6ae:	20e2      	movs	r0, #226	; 0xe2
1000b6b0:	e044      	b.n	1000b73c <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000b6b2:	001a      	movs	r2, r3
1000b6b4:	3a30      	subs	r2, #48	; 0x30
1000b6b6:	2a09      	cmp	r2, #9
1000b6b8:	d8db      	bhi.n	1000b672 <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000b6ba:	aa02      	add	r2, sp, #8
1000b6bc:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000b6be:	4038      	ands	r0, r7
1000b6c0:	4b2a      	ldr	r3, [pc, #168]	; (1000b76c <ble_pair_key_request_handler+0x12c>)
1000b6c2:	4798      	blx	r3
1000b6c4:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000b6c6:	2e06      	cmp	r6, #6
1000b6c8:	d026      	beq.n	1000b718 <ble_pair_key_request_handler+0xd8>
1000b6ca:	e7d2      	b.n	1000b672 <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000b6cc:	481e      	ldr	r0, [pc, #120]	; (1000b748 <ble_pair_key_request_handler+0x108>)
1000b6ce:	4b1f      	ldr	r3, [pc, #124]	; (1000b74c <ble_pair_key_request_handler+0x10c>)
1000b6d0:	4798      	blx	r3
1000b6d2:	4827      	ldr	r0, [pc, #156]	; (1000b770 <ble_pair_key_request_handler+0x130>)
1000b6d4:	4b1f      	ldr	r3, [pc, #124]	; (1000b754 <ble_pair_key_request_handler+0x114>)
1000b6d6:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000b6d8:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000b6da:	4e24      	ldr	r6, [pc, #144]	; (1000b76c <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000b6dc:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000b6de:	5ce0      	ldrb	r0, [r4, r3]
1000b6e0:	47b0      	blx	r6
1000b6e2:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000b6e4:	2c06      	cmp	r4, #6
1000b6e6:	d1f9      	bne.n	1000b6dc <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000b6e8:	ab01      	add	r3, sp, #4
1000b6ea:	7899      	ldrb	r1, [r3, #2]
1000b6ec:	8828      	ldrh	r0, [r5, #0]
1000b6ee:	aa02      	add	r2, sp, #8
1000b6f0:	4b20      	ldr	r3, [pc, #128]	; (1000b774 <ble_pair_key_request_handler+0x134>)
1000b6f2:	4798      	blx	r3
1000b6f4:	2800      	cmp	r0, #0
1000b6f6:	d021      	beq.n	1000b73c <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000b6f8:	4813      	ldr	r0, [pc, #76]	; (1000b748 <ble_pair_key_request_handler+0x108>)
1000b6fa:	4b14      	ldr	r3, [pc, #80]	; (1000b74c <ble_pair_key_request_handler+0x10c>)
1000b6fc:	4798      	blx	r3
1000b6fe:	481e      	ldr	r0, [pc, #120]	; (1000b778 <ble_pair_key_request_handler+0x138>)
1000b700:	4b14      	ldr	r3, [pc, #80]	; (1000b754 <ble_pair_key_request_handler+0x114>)
1000b702:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000b704:	2000      	movs	r0, #0
1000b706:	e019      	b.n	1000b73c <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000b708:	480f      	ldr	r0, [pc, #60]	; (1000b748 <ble_pair_key_request_handler+0x108>)
1000b70a:	4b10      	ldr	r3, [pc, #64]	; (1000b74c <ble_pair_key_request_handler+0x10c>)
1000b70c:	4798      	blx	r3
1000b70e:	481b      	ldr	r0, [pc, #108]	; (1000b77c <ble_pair_key_request_handler+0x13c>)
1000b710:	4b10      	ldr	r3, [pc, #64]	; (1000b754 <ble_pair_key_request_handler+0x114>)
1000b712:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000b714:	2000      	movs	r0, #0
1000b716:	e011      	b.n	1000b73c <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000b718:	480b      	ldr	r0, [pc, #44]	; (1000b748 <ble_pair_key_request_handler+0x108>)
1000b71a:	4b0c      	ldr	r3, [pc, #48]	; (1000b74c <ble_pair_key_request_handler+0x10c>)
1000b71c:	4798      	blx	r3
1000b71e:	4818      	ldr	r0, [pc, #96]	; (1000b780 <ble_pair_key_request_handler+0x140>)
1000b720:	4b0c      	ldr	r3, [pc, #48]	; (1000b754 <ble_pair_key_request_handler+0x114>)
1000b722:	4798      	blx	r3
1000b724:	e7d8      	b.n	1000b6d8 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000b726:	ab01      	add	r3, sp, #4
1000b728:	885a      	ldrh	r2, [r3, #2]
1000b72a:	2380      	movs	r3, #128	; 0x80
1000b72c:	005b      	lsls	r3, r3, #1
1000b72e:	429a      	cmp	r2, r3
1000b730:	d0cc      	beq.n	1000b6cc <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000b732:	ab01      	add	r3, sp, #4
1000b734:	789b      	ldrb	r3, [r3, #2]
1000b736:	2b01      	cmp	r3, #1
1000b738:	d0e6      	beq.n	1000b708 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000b73a:	2000      	movs	r0, #0
}
1000b73c:	b005      	add	sp, #20
1000b73e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b740:	10012c34 	.word	0x10012c34
1000b744:	10010fa7 	.word	0x10010fa7
1000b748:	100123b4 	.word	0x100123b4
1000b74c:	100110e9 	.word	0x100110e9
1000b750:	10013074 	.word	0x10013074
1000b754:	10010fc9 	.word	0x10010fc9
1000b758:	10009315 	.word	0x10009315
1000b75c:	1001309c 	.word	0x1001309c
1000b760:	100130a8 	.word	0x100130a8
1000b764:	1000d7d1 	.word	0x1000d7d1
1000b768:	10012f54 	.word	0x10012f54
1000b76c:	10010ffd 	.word	0x10010ffd
1000b770:	100130bc 	.word	0x100130bc
1000b774:	1000e2f9 	.word	0x1000e2f9
1000b778:	100130f4 	.word	0x100130f4
1000b77c:	1001310c 	.word	0x1001310c
1000b780:	10013128 	.word	0x10013128

1000b784 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000b784:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b786:	465f      	mov	r7, fp
1000b788:	4656      	mov	r6, sl
1000b78a:	464d      	mov	r5, r9
1000b78c:	b4e0      	push	{r5, r6, r7}
1000b78e:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000b790:	8800      	ldrh	r0, [r0, #0]
1000b792:	4b49      	ldr	r3, [pc, #292]	; (1000b8b8 <ble_encryption_request_handler+0x134>)
1000b794:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b796:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000b798:	8919      	ldrh	r1, [r3, #8]
1000b79a:	4281      	cmp	r1, r0
1000b79c:	d137      	bne.n	1000b80e <ble_encryption_request_handler+0x8a>
1000b79e:	0019      	movs	r1, r3
1000b7a0:	315e      	adds	r1, #94	; 0x5e
1000b7a2:	7809      	ldrb	r1, [r1, #0]
1000b7a4:	2901      	cmp	r1, #1
1000b7a6:	d932      	bls.n	1000b80e <ble_encryption_request_handler+0x8a>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000b7a8:	4f43      	ldr	r7, [pc, #268]	; (1000b8b8 <ble_encryption_request_handler+0x134>)
1000b7aa:	0153      	lsls	r3, r2, #5
1000b7ac:	1a9d      	subs	r5, r3, r2
1000b7ae:	00ad      	lsls	r5, r5, #2
1000b7b0:	197d      	adds	r5, r7, r5
1000b7b2:	355e      	adds	r5, #94	; 0x5e
1000b7b4:	2306      	movs	r3, #6
1000b7b6:	702b      	strb	r3, [r5, #0]
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
1000b7b8:	4840      	ldr	r0, [pc, #256]	; (1000b8bc <ble_encryption_request_handler+0x138>)
1000b7ba:	4b41      	ldr	r3, [pc, #260]	; (1000b8c0 <ble_encryption_request_handler+0x13c>)
1000b7bc:	469a      	mov	sl, r3
1000b7be:	4798      	blx	r3
1000b7c0:	8831      	ldrh	r1, [r6, #0]
1000b7c2:	4840      	ldr	r0, [pc, #256]	; (1000b8c4 <ble_encryption_request_handler+0x140>)
1000b7c4:	4b40      	ldr	r3, [pc, #256]	; (1000b8c8 <ble_encryption_request_handler+0x144>)
1000b7c6:	4699      	mov	r9, r3
1000b7c8:	4798      	blx	r3
		}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
1000b7ca:	483c      	ldr	r0, [pc, #240]	; (1000b8bc <ble_encryption_request_handler+0x138>)
1000b7cc:	47d0      	blx	sl
1000b7ce:	0163      	lsls	r3, r4, #5
1000b7d0:	1b1b      	subs	r3, r3, r4
1000b7d2:	009b      	lsls	r3, r3, #2
1000b7d4:	18ff      	adds	r7, r7, r3
1000b7d6:	2370      	movs	r3, #112	; 0x70
1000b7d8:	469b      	mov	fp, r3
1000b7da:	44bb      	add	fp, r7
1000b7dc:	465b      	mov	r3, fp
1000b7de:	8819      	ldrh	r1, [r3, #0]
1000b7e0:	483a      	ldr	r0, [pc, #232]	; (1000b8cc <ble_encryption_request_handler+0x148>)
1000b7e2:	47c8      	blx	r9
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
1000b7e4:	4835      	ldr	r0, [pc, #212]	; (1000b8bc <ble_encryption_request_handler+0x138>)
1000b7e6:	47d0      	blx	sl
1000b7e8:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
1000b7ea:	4839      	ldr	r0, [pc, #228]	; (1000b8d0 <ble_encryption_request_handler+0x14c>)
1000b7ec:	47c8      	blx	r9
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
1000b7ee:	4833      	ldr	r0, [pc, #204]	; (1000b8bc <ble_encryption_request_handler+0x138>)
1000b7f0:	47d0      	blx	sl
1000b7f2:	8871      	ldrh	r1, [r6, #2]
1000b7f4:	4837      	ldr	r0, [pc, #220]	; (1000b8d4 <ble_encryption_request_handler+0x150>)
1000b7f6:	47c8      	blx	r9
		DBG_LOG_DEV("The index is %d",idx);
1000b7f8:	4830      	ldr	r0, [pc, #192]	; (1000b8bc <ble_encryption_request_handler+0x138>)
1000b7fa:	47d0      	blx	sl
1000b7fc:	0021      	movs	r1, r4
1000b7fe:	4836      	ldr	r0, [pc, #216]	; (1000b8d8 <ble_encryption_request_handler+0x154>)
1000b800:	47c8      	blx	r9
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000b802:	465b      	mov	r3, fp
1000b804:	881a      	ldrh	r2, [r3, #0]
1000b806:	8873      	ldrh	r3, [r6, #2]
1000b808:	429a      	cmp	r2, r3
1000b80a:	d12a      	bne.n	1000b862 <ble_encryption_request_handler+0xde>
1000b80c:	e006      	b.n	1000b81c <ble_encryption_request_handler+0x98>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b80e:	3401      	adds	r4, #1
1000b810:	b2e4      	uxtb	r4, r4
1000b812:	3201      	adds	r2, #1
1000b814:	337c      	adds	r3, #124	; 0x7c
1000b816:	2c05      	cmp	r4, #5
1000b818:	d1be      	bne.n	1000b798 <ble_encryption_request_handler+0x14>
1000b81a:	e022      	b.n	1000b862 <ble_encryption_request_handler+0xde>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000b81c:	0161      	lsls	r1, r4, #5
1000b81e:	1b09      	subs	r1, r1, r4
1000b820:	0089      	lsls	r1, r1, #2
1000b822:	4b25      	ldr	r3, [pc, #148]	; (1000b8b8 <ble_encryption_request_handler+0x134>)
1000b824:	1859      	adds	r1, r3, r1
1000b826:	3172      	adds	r1, #114	; 0x72
1000b828:	1d30      	adds	r0, r6, #4
1000b82a:	2208      	movs	r2, #8
1000b82c:	4b2b      	ldr	r3, [pc, #172]	; (1000b8dc <ble_encryption_request_handler+0x158>)
1000b82e:	4798      	blx	r3
1000b830:	2800      	cmp	r0, #0
1000b832:	d116      	bne.n	1000b862 <ble_encryption_request_handler+0xde>
		{
			key_found = true;
			DBG_LOG_DEV("ENC-Req: Key Found");
1000b834:	4821      	ldr	r0, [pc, #132]	; (1000b8bc <ble_encryption_request_handler+0x138>)
1000b836:	4b22      	ldr	r3, [pc, #136]	; (1000b8c0 <ble_encryption_request_handler+0x13c>)
1000b838:	4798      	blx	r3
1000b83a:	4829      	ldr	r0, [pc, #164]	; (1000b8e0 <ble_encryption_request_handler+0x15c>)
1000b83c:	4b22      	ldr	r3, [pc, #136]	; (1000b8c8 <ble_encryption_request_handler+0x144>)
1000b83e:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000b840:	0162      	lsls	r2, r4, #5
1000b842:	1b13      	subs	r3, r2, r4
1000b844:	009b      	lsls	r3, r3, #2
1000b846:	3360      	adds	r3, #96	; 0x60
1000b848:	491b      	ldr	r1, [pc, #108]	; (1000b8b8 <ble_encryption_request_handler+0x134>)
1000b84a:	185b      	adds	r3, r3, r1
1000b84c:	1b12      	subs	r2, r2, r4
1000b84e:	0092      	lsls	r2, r2, #2
1000b850:	188a      	adds	r2, r1, r2
1000b852:	7d11      	ldrb	r1, [r2, #20]
1000b854:	8830      	ldrh	r0, [r6, #0]
1000b856:	2201      	movs	r2, #1
1000b858:	4c22      	ldr	r4, [pc, #136]	; (1000b8e4 <ble_encryption_request_handler+0x160>)
1000b85a:	47a0      	blx	r4
1000b85c:	1e04      	subs	r4, r0, #0
1000b85e:	d01e      	beq.n	1000b89e <ble_encryption_request_handler+0x11a>
1000b860:	e015      	b.n	1000b88e <ble_encryption_request_handler+0x10a>
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000b862:	4f16      	ldr	r7, [pc, #88]	; (1000b8bc <ble_encryption_request_handler+0x138>)
1000b864:	0038      	movs	r0, r7
1000b866:	4e16      	ldr	r6, [pc, #88]	; (1000b8c0 <ble_encryption_request_handler+0x13c>)
1000b868:	47b0      	blx	r6
1000b86a:	481f      	ldr	r0, [pc, #124]	; (1000b8e8 <ble_encryption_request_handler+0x164>)
1000b86c:	4d16      	ldr	r5, [pc, #88]	; (1000b8c8 <ble_encryption_request_handler+0x144>)
1000b86e:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000b870:	0038      	movs	r0, r7
1000b872:	47b0      	blx	r6
1000b874:	481d      	ldr	r0, [pc, #116]	; (1000b8ec <ble_encryption_request_handler+0x168>)
1000b876:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000b878:	0163      	lsls	r3, r4, #5
1000b87a:	1b1c      	subs	r4, r3, r4
1000b87c:	00a4      	lsls	r4, r4, #2
1000b87e:	4b0e      	ldr	r3, [pc, #56]	; (1000b8b8 <ble_encryption_request_handler+0x134>)
1000b880:	191c      	adds	r4, r3, r4
1000b882:	8920      	ldrh	r0, [r4, #8]
1000b884:	2105      	movs	r1, #5
1000b886:	4b1a      	ldr	r3, [pc, #104]	; (1000b8f0 <ble_encryption_request_handler+0x16c>)
1000b888:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000b88a:	24e2      	movs	r4, #226	; 0xe2
1000b88c:	e00d      	b.n	1000b8aa <ble_encryption_request_handler+0x126>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
	{
		DBG_LOG("Encryption Request Reply Failed");
1000b88e:	480b      	ldr	r0, [pc, #44]	; (1000b8bc <ble_encryption_request_handler+0x138>)
1000b890:	4b0b      	ldr	r3, [pc, #44]	; (1000b8c0 <ble_encryption_request_handler+0x13c>)
1000b892:	4798      	blx	r3
1000b894:	4817      	ldr	r0, [pc, #92]	; (1000b8f4 <ble_encryption_request_handler+0x170>)
1000b896:	4b0c      	ldr	r3, [pc, #48]	; (1000b8c8 <ble_encryption_request_handler+0x144>)
1000b898:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000b89a:	2400      	movs	r4, #0
1000b89c:	e005      	b.n	1000b8aa <ble_encryption_request_handler+0x126>
	{
		DBG_LOG("Encryption Request Reply Failed");
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
1000b89e:	4807      	ldr	r0, [pc, #28]	; (1000b8bc <ble_encryption_request_handler+0x138>)
1000b8a0:	4b07      	ldr	r3, [pc, #28]	; (1000b8c0 <ble_encryption_request_handler+0x13c>)
1000b8a2:	4798      	blx	r3
1000b8a4:	4814      	ldr	r0, [pc, #80]	; (1000b8f8 <ble_encryption_request_handler+0x174>)
1000b8a6:	4b08      	ldr	r3, [pc, #32]	; (1000b8c8 <ble_encryption_request_handler+0x144>)
1000b8a8:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000b8aa:	0020      	movs	r0, r4
1000b8ac:	bc1c      	pop	{r2, r3, r4}
1000b8ae:	4691      	mov	r9, r2
1000b8b0:	469a      	mov	sl, r3
1000b8b2:	46a3      	mov	fp, r4
1000b8b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b8b6:	46c0      	nop			; (mov r8, r8)
1000b8b8:	10015898 	.word	0x10015898
1000b8bc:	100123b4 	.word	0x100123b4
1000b8c0:	100110e9 	.word	0x100110e9
1000b8c4:	1001313c 	.word	0x1001313c
1000b8c8:	10010fc9 	.word	0x10010fc9
1000b8cc:	10013168 	.word	0x10013168
1000b8d0:	1001317c 	.word	0x1001317c
1000b8d4:	10013190 	.word	0x10013190
1000b8d8:	100131a0 	.word	0x100131a0
1000b8dc:	10010f89 	.word	0x10010f89
1000b8e0:	100131b0 	.word	0x100131b0
1000b8e4:	1000e42d 	.word	0x1000e42d
1000b8e8:	100131c4 	.word	0x100131c4
1000b8ec:	100131fc 	.word	0x100131fc
1000b8f0:	1000d7d1 	.word	0x1000d7d1
1000b8f4:	10013254 	.word	0x10013254
1000b8f8:	10013274 	.word	0x10013274

1000b8fc <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000b8fc:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000b8fe:	2a00      	cmp	r2, #0
1000b900:	d047      	beq.n	1000b992 <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000b902:	2906      	cmp	r1, #6
1000b904:	d847      	bhi.n	1000b996 <ble_mgr_events_callback_handler+0x9a>
1000b906:	0089      	lsls	r1, r1, #2
1000b908:	4b28      	ldr	r3, [pc, #160]	; (1000b9ac <ble_mgr_events_callback_handler+0xb0>)
1000b90a:	585b      	ldr	r3, [r3, r1]
1000b90c:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000b90e:	4b28      	ldr	r3, [pc, #160]	; (1000b9b0 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000b910:	2405      	movs	r4, #5
1000b912:	e00a      	b.n	1000b92a <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000b914:	4b27      	ldr	r3, [pc, #156]	; (1000b9b4 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000b916:	2401      	movs	r4, #1
			}
			break;
1000b918:	e007      	b.n	1000b92a <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000b91a:	4b27      	ldr	r3, [pc, #156]	; (1000b9b8 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000b91c:	2405      	movs	r4, #5
			}
			break;
1000b91e:	e004      	b.n	1000b92a <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000b920:	4b26      	ldr	r3, [pc, #152]	; (1000b9bc <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000b922:	2401      	movs	r4, #1
			}
			break;
1000b924:	e001      	b.n	1000b92a <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000b926:	4b26      	ldr	r3, [pc, #152]	; (1000b9c0 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000b928:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000b92a:	2800      	cmp	r0, #0
1000b92c:	d116      	bne.n	1000b95c <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000b92e:	6819      	ldr	r1, [r3, #0]
1000b930:	2900      	cmp	r1, #0
1000b932:	d10b      	bne.n	1000b94c <ble_mgr_events_callback_handler+0x50>
1000b934:	e006      	b.n	1000b944 <ble_mgr_events_callback_handler+0x48>
1000b936:	001d      	movs	r5, r3
1000b938:	3304      	adds	r3, #4
1000b93a:	1f18      	subs	r0, r3, #4
1000b93c:	6800      	ldr	r0, [r0, #0]
1000b93e:	2800      	cmp	r0, #0
1000b940:	d106      	bne.n	1000b950 <ble_mgr_events_callback_handler+0x54>
1000b942:	e000      	b.n	1000b946 <ble_mgr_events_callback_handler+0x4a>
1000b944:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000b946:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000b948:	2101      	movs	r1, #1
						break;
1000b94a:	e02c      	b.n	1000b9a6 <ble_mgr_events_callback_handler+0xaa>
1000b94c:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000b94e:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000b950:	3101      	adds	r1, #1
1000b952:	b2c9      	uxtb	r1, r1
1000b954:	42a1      	cmp	r1, r4
1000b956:	d3ee      	bcc.n	1000b936 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000b958:	2100      	movs	r1, #0
1000b95a:	e024      	b.n	1000b9a6 <ble_mgr_events_callback_handler+0xaa>
1000b95c:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000b95e:	2801      	cmp	r0, #1
1000b960:	d121      	bne.n	1000b9a6 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000b962:	6819      	ldr	r1, [r3, #0]
1000b964:	428a      	cmp	r2, r1
1000b966:	d10c      	bne.n	1000b982 <ble_mgr_events_callback_handler+0x86>
1000b968:	e006      	b.n	1000b978 <ble_mgr_events_callback_handler+0x7c>
1000b96a:	001d      	movs	r5, r3
1000b96c:	3304      	adds	r3, #4
1000b96e:	1f18      	subs	r0, r3, #4
1000b970:	6800      	ldr	r0, [r0, #0]
1000b972:	4282      	cmp	r2, r0
1000b974:	d107      	bne.n	1000b986 <ble_mgr_events_callback_handler+0x8a>
1000b976:	e000      	b.n	1000b97a <ble_mgr_events_callback_handler+0x7e>
1000b978:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000b97a:	2300      	movs	r3, #0
1000b97c:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000b97e:	2101      	movs	r1, #1
						break;
1000b980:	e011      	b.n	1000b9a6 <ble_mgr_events_callback_handler+0xaa>
1000b982:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000b984:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000b986:	3101      	adds	r1, #1
1000b988:	b2c9      	uxtb	r1, r1
1000b98a:	42a1      	cmp	r1, r4
1000b98c:	d3ed      	bcc.n	1000b96a <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000b98e:	2100      	movs	r1, #0
1000b990:	e009      	b.n	1000b9a6 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000b992:	2100      	movs	r1, #0
1000b994:	e007      	b.n	1000b9a6 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000b996:	2100      	movs	r1, #0
1000b998:	e005      	b.n	1000b9a6 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000b99a:	4b0a      	ldr	r3, [pc, #40]	; (1000b9c4 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000b99c:	2405      	movs	r4, #5
1000b99e:	e7c4      	b.n	1000b92a <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000b9a0:	4b09      	ldr	r3, [pc, #36]	; (1000b9c8 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000b9a2:	2401      	movs	r4, #1
1000b9a4:	e7c1      	b.n	1000b92a <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000b9a6:	0008      	movs	r0, r1
1000b9a8:	bd30      	pop	{r4, r5, pc}
1000b9aa:	46c0      	nop			; (mov r8, r8)
1000b9ac:	10012b28 	.word	0x10012b28
1000b9b0:	10015884 	.word	0x10015884
1000b9b4:	10015880 	.word	0x10015880
1000b9b8:	10015b08 	.word	0x10015b08
1000b9bc:	100160bc 	.word	0x100160bc
1000b9c0:	10015b1c 	.word	0x10015b1c
1000b9c4:	10015b30 	.word	0x10015b30
1000b9c8:	10015b78 	.word	0x10015b78

1000b9cc <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000b9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b9ce:	465f      	mov	r7, fp
1000b9d0:	4656      	mov	r6, sl
1000b9d2:	464d      	mov	r5, r9
1000b9d4:	4644      	mov	r4, r8
1000b9d6:	b4f0      	push	{r4, r5, r6, r7}
1000b9d8:	b091      	sub	sp, #68	; 0x44
1000b9da:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000b9dc:	2400      	movs	r4, #0
1000b9de:	4b7e      	ldr	r3, [pc, #504]	; (1000bbd8 <ble_device_init+0x20c>)
1000b9e0:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000b9e2:	2207      	movs	r2, #7
1000b9e4:	2100      	movs	r1, #0
1000b9e6:	487d      	ldr	r0, [pc, #500]	; (1000bbdc <ble_device_init+0x210>)
1000b9e8:	4e7d      	ldr	r6, [pc, #500]	; (1000bbe0 <ble_device_init+0x214>)
1000b9ea:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000b9ec:	2212      	movs	r2, #18
1000b9ee:	2100      	movs	r1, #0
1000b9f0:	487c      	ldr	r0, [pc, #496]	; (1000bbe4 <ble_device_init+0x218>)
1000b9f2:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000b9f4:	4a7c      	ldr	r2, [pc, #496]	; (1000bbe8 <ble_device_init+0x21c>)
1000b9f6:	2100      	movs	r1, #0
1000b9f8:	487c      	ldr	r0, [pc, #496]	; (1000bbec <ble_device_init+0x220>)
1000b9fa:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000b9fc:	4b7c      	ldr	r3, [pc, #496]	; (1000bbf0 <ble_device_init+0x224>)
1000b9fe:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000ba00:	22cd      	movs	r2, #205	; 0xcd
1000ba02:	0092      	lsls	r2, r2, #2
1000ba04:	2100      	movs	r1, #0
1000ba06:	487b      	ldr	r0, [pc, #492]	; (1000bbf4 <ble_device_init+0x228>)
1000ba08:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000ba0a:	4b7b      	ldr	r3, [pc, #492]	; (1000bbf8 <ble_device_init+0x22c>)
1000ba0c:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000ba0e:	2283      	movs	r2, #131	; 0x83
1000ba10:	0092      	lsls	r2, r2, #2
1000ba12:	2100      	movs	r1, #0
1000ba14:	4879      	ldr	r0, [pc, #484]	; (1000bbfc <ble_device_init+0x230>)
1000ba16:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000ba18:	4b79      	ldr	r3, [pc, #484]	; (1000bc00 <ble_device_init+0x234>)
1000ba1a:	469b      	mov	fp, r3
1000ba1c:	2380      	movs	r3, #128	; 0x80
1000ba1e:	00db      	lsls	r3, r3, #3
1000ba20:	469a      	mov	sl, r3
1000ba22:	001a      	movs	r2, r3
1000ba24:	2100      	movs	r1, #0
1000ba26:	4658      	mov	r0, fp
1000ba28:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000ba2a:	4b76      	ldr	r3, [pc, #472]	; (1000bc04 <ble_device_init+0x238>)
1000ba2c:	4699      	mov	r9, r3
1000ba2e:	2380      	movs	r3, #128	; 0x80
1000ba30:	015b      	lsls	r3, r3, #5
1000ba32:	4698      	mov	r8, r3
1000ba34:	001a      	movs	r2, r3
1000ba36:	2100      	movs	r1, #0
1000ba38:	4648      	mov	r0, r9
1000ba3a:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000ba3c:	4f72      	ldr	r7, [pc, #456]	; (1000bc08 <ble_device_init+0x23c>)
1000ba3e:	221c      	movs	r2, #28
1000ba40:	2100      	movs	r1, #0
1000ba42:	0038      	movs	r0, r7
1000ba44:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000ba46:	465b      	mov	r3, fp
1000ba48:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000ba4a:	4653      	mov	r3, sl
1000ba4c:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000ba4e:	464b      	mov	r3, r9
1000ba50:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000ba52:	4643      	mov	r3, r8
1000ba54:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000ba56:	4b6d      	ldr	r3, [pc, #436]	; (1000bc0c <ble_device_init+0x240>)
1000ba58:	601c      	str	r4, [r3, #0]
1000ba5a:	605c      	str	r4, [r3, #4]
1000ba5c:	609c      	str	r4, [r3, #8]
1000ba5e:	60dc      	str	r4, [r3, #12]
1000ba60:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000ba62:	4b6b      	ldr	r3, [pc, #428]	; (1000bc10 <ble_device_init+0x244>)
1000ba64:	601c      	str	r4, [r3, #0]
1000ba66:	605c      	str	r4, [r3, #4]
1000ba68:	609c      	str	r4, [r3, #8]
1000ba6a:	60dc      	str	r4, [r3, #12]
1000ba6c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000ba6e:	4b69      	ldr	r3, [pc, #420]	; (1000bc14 <ble_device_init+0x248>)
1000ba70:	601c      	str	r4, [r3, #0]
1000ba72:	605c      	str	r4, [r3, #4]
1000ba74:	609c      	str	r4, [r3, #8]
1000ba76:	60dc      	str	r4, [r3, #12]
1000ba78:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000ba7a:	4b67      	ldr	r3, [pc, #412]	; (1000bc18 <ble_device_init+0x24c>)
1000ba7c:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000ba7e:	4b67      	ldr	r3, [pc, #412]	; (1000bc1c <ble_device_init+0x250>)
1000ba80:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000ba82:	4b67      	ldr	r3, [pc, #412]	; (1000bc20 <ble_device_init+0x254>)
1000ba84:	601c      	str	r4, [r3, #0]
1000ba86:	605c      	str	r4, [r3, #4]
1000ba88:	609c      	str	r4, [r3, #8]
1000ba8a:	60dc      	str	r4, [r3, #12]
1000ba8c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000ba8e:	4b65      	ldr	r3, [pc, #404]	; (1000bc24 <ble_device_init+0x258>)
1000ba90:	601c      	str	r4, [r3, #0]
1000ba92:	4c65      	ldr	r4, [pc, #404]	; (1000bc28 <ble_device_init+0x25c>)
1000ba94:	239b      	movs	r3, #155	; 0x9b
1000ba96:	009b      	lsls	r3, r3, #2
1000ba98:	4698      	mov	r8, r3
1000ba9a:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000ba9c:	4f50      	ldr	r7, [pc, #320]	; (1000bbe0 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000ba9e:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000baa0:	227c      	movs	r2, #124	; 0x7c
1000baa2:	2100      	movs	r1, #0
1000baa4:	0020      	movs	r0, r4
1000baa6:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000baa8:	0023      	movs	r3, r4
1000baaa:	335e      	adds	r3, #94	; 0x5e
1000baac:	2200      	movs	r2, #0
1000baae:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000bab0:	7626      	strb	r6, [r4, #24]
1000bab2:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bab4:	45a0      	cmp	r8, r4
1000bab6:	d1f3      	bne.n	1000baa0 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000bab8:	4b5c      	ldr	r3, [pc, #368]	; (1000bc2c <ble_device_init+0x260>)
1000baba:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000babc:	4c52      	ldr	r4, [pc, #328]	; (1000bc08 <ble_device_init+0x23c>)
1000babe:	4b4a      	ldr	r3, [pc, #296]	; (1000bbe8 <ble_device_init+0x21c>)
1000bac0:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000bac2:	4b4a      	ldr	r3, [pc, #296]	; (1000bbec <ble_device_init+0x220>)
1000bac4:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("[ble_init]\t\t\tInitializing SAMB11");
1000bac6:	485a      	ldr	r0, [pc, #360]	; (1000bc30 <ble_device_init+0x264>)
1000bac8:	4b5a      	ldr	r3, [pc, #360]	; (1000bc34 <ble_device_init+0x268>)
1000baca:	4798      	blx	r3
1000bacc:	485a      	ldr	r0, [pc, #360]	; (1000bc38 <ble_device_init+0x26c>)
1000bace:	4b5b      	ldr	r3, [pc, #364]	; (1000bc3c <ble_device_init+0x270>)
1000bad0:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000bad2:	0020      	movs	r0, r4
1000bad4:	4b5a      	ldr	r3, [pc, #360]	; (1000bc40 <ble_device_init+0x274>)
1000bad6:	4798      	blx	r3
1000bad8:	2800      	cmp	r0, #0
1000bada:	d00b      	beq.n	1000baf4 <ble_device_init+0x128>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000badc:	4e54      	ldr	r6, [pc, #336]	; (1000bc30 <ble_device_init+0x264>)
1000bade:	0030      	movs	r0, r6
1000bae0:	4d54      	ldr	r5, [pc, #336]	; (1000bc34 <ble_device_init+0x268>)
1000bae2:	47a8      	blx	r5
1000bae4:	4857      	ldr	r0, [pc, #348]	; (1000bc44 <ble_device_init+0x278>)
1000bae6:	4c55      	ldr	r4, [pc, #340]	; (1000bc3c <ble_device_init+0x270>)
1000bae8:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000baea:	0030      	movs	r0, r6
1000baec:	47a8      	blx	r5
1000baee:	4856      	ldr	r0, [pc, #344]	; (1000bc48 <ble_device_init+0x27c>)
1000baf0:	47a0      	blx	r4
1000baf2:	e7fe      	b.n	1000baf2 <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000baf4:	4a55      	ldr	r2, [pc, #340]	; (1000bc4c <ble_device_init+0x280>)
1000baf6:	2100      	movs	r1, #0
1000baf8:	2000      	movs	r0, #0
1000bafa:	4c55      	ldr	r4, [pc, #340]	; (1000bc50 <ble_device_init+0x284>)
1000bafc:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000bafe:	4a55      	ldr	r2, [pc, #340]	; (1000bc54 <ble_device_init+0x288>)
1000bb00:	2102      	movs	r1, #2
1000bb02:	2000      	movs	r0, #0
1000bb04:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000bb06:	2109      	movs	r1, #9
1000bb08:	4853      	ldr	r0, [pc, #332]	; (1000bc58 <ble_device_init+0x28c>)
1000bb0a:	4b54      	ldr	r3, [pc, #336]	; (1000bc5c <ble_device_init+0x290>)
1000bb0c:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000bb0e:	2800      	cmp	r0, #0
1000bb10:	d005      	beq.n	1000bb1e <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000bb12:	4847      	ldr	r0, [pc, #284]	; (1000bc30 <ble_device_init+0x264>)
1000bb14:	4b47      	ldr	r3, [pc, #284]	; (1000bc34 <ble_device_init+0x268>)
1000bb16:	4798      	blx	r3
1000bb18:	4851      	ldr	r0, [pc, #324]	; (1000bc60 <ble_device_init+0x294>)
1000bb1a:	4b48      	ldr	r3, [pc, #288]	; (1000bc3c <ble_device_init+0x270>)
1000bb1c:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000bb1e:	2207      	movs	r2, #7
1000bb20:	4950      	ldr	r1, [pc, #320]	; (1000bc64 <ble_device_init+0x298>)
1000bb22:	3108      	adds	r1, #8
1000bb24:	a804      	add	r0, sp, #16
1000bb26:	4b50      	ldr	r3, [pc, #320]	; (1000bc68 <ble_device_init+0x29c>)
1000bb28:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000bb2a:	2226      	movs	r2, #38	; 0x26
1000bb2c:	2100      	movs	r1, #0
1000bb2e:	a806      	add	r0, sp, #24
1000bb30:	4b2b      	ldr	r3, [pc, #172]	; (1000bbe0 <ble_device_init+0x214>)
1000bb32:	4798      	blx	r3
	
	if (addr == NULL)
1000bb34:	2d00      	cmp	r5, #0
1000bb36:	d10c      	bne.n	1000bb52 <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000bb38:	a804      	add	r0, sp, #16
1000bb3a:	4b4c      	ldr	r3, [pc, #304]	; (1000bc6c <ble_device_init+0x2a0>)
1000bb3c:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000bb3e:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000bb40:	2800      	cmp	r0, #0
1000bb42:	d006      	beq.n	1000bb52 <ble_device_init+0x186>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000bb44:	483a      	ldr	r0, [pc, #232]	; (1000bc30 <ble_device_init+0x264>)
1000bb46:	4b3b      	ldr	r3, [pc, #236]	; (1000bc34 <ble_device_init+0x268>)
1000bb48:	4798      	blx	r3
1000bb4a:	4849      	ldr	r0, [pc, #292]	; (1000bc70 <ble_device_init+0x2a4>)
1000bb4c:	4b3b      	ldr	r3, [pc, #236]	; (1000bc3c <ble_device_init+0x270>)
1000bb4e:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000bb50:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("[ble_set_dev_config]\t\tBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000bb52:	4837      	ldr	r0, [pc, #220]	; (1000bc30 <ble_device_init+0x264>)
1000bb54:	4b37      	ldr	r3, [pc, #220]	; (1000bc34 <ble_device_init+0x268>)
1000bb56:	4798      	blx	r3
1000bb58:	792b      	ldrb	r3, [r5, #4]
1000bb5a:	796a      	ldrb	r2, [r5, #5]
1000bb5c:	79a9      	ldrb	r1, [r5, #6]
1000bb5e:	7828      	ldrb	r0, [r5, #0]
1000bb60:	9003      	str	r0, [sp, #12]
1000bb62:	7868      	ldrb	r0, [r5, #1]
1000bb64:	9002      	str	r0, [sp, #8]
1000bb66:	78a8      	ldrb	r0, [r5, #2]
1000bb68:	9001      	str	r0, [sp, #4]
1000bb6a:	78e8      	ldrb	r0, [r5, #3]
1000bb6c:	9000      	str	r0, [sp, #0]
1000bb6e:	4841      	ldr	r0, [pc, #260]	; (1000bc74 <ble_device_init+0x2a8>)
1000bb70:	4c32      	ldr	r4, [pc, #200]	; (1000bc3c <ble_device_init+0x270>)
1000bb72:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000bb74:	ac06      	add	r4, sp, #24
1000bb76:	230a      	movs	r3, #10
1000bb78:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000bb7a:	4b3f      	ldr	r3, [pc, #252]	; (1000bc78 <ble_device_init+0x2ac>)
1000bb7c:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000bb7e:	2207      	movs	r2, #7
1000bb80:	0029      	movs	r1, r5
1000bb82:	a807      	add	r0, sp, #28
1000bb84:	4b38      	ldr	r3, [pc, #224]	; (1000bc68 <ble_device_init+0x29c>)
1000bb86:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000bb88:	2300      	movs	r3, #0
1000bb8a:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000bb8c:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000bb8e:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000bb90:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000bb92:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000bb94:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000bb96:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000bb98:	2380      	movs	r3, #128	; 0x80
1000bb9a:	009b      	lsls	r3, r3, #2
1000bb9c:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000bb9e:	0020      	movs	r0, r4
1000bba0:	4b36      	ldr	r3, [pc, #216]	; (1000bc7c <ble_device_init+0x2b0>)
1000bba2:	4798      	blx	r3
1000bba4:	2800      	cmp	r0, #0
1000bba6:	d005      	beq.n	1000bbb4 <ble_device_init+0x1e8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000bba8:	4821      	ldr	r0, [pc, #132]	; (1000bc30 <ble_device_init+0x264>)
1000bbaa:	4b22      	ldr	r3, [pc, #136]	; (1000bc34 <ble_device_init+0x268>)
1000bbac:	4798      	blx	r3
1000bbae:	4834      	ldr	r0, [pc, #208]	; (1000bc80 <ble_device_init+0x2b4>)
1000bbb0:	4b22      	ldr	r3, [pc, #136]	; (1000bc3c <ble_device_init+0x270>)
1000bbb2:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000bbb4:	0028      	movs	r0, r5
1000bbb6:	4b33      	ldr	r3, [pc, #204]	; (1000bc84 <ble_device_init+0x2b8>)
1000bbb8:	4798      	blx	r3
1000bbba:	2800      	cmp	r0, #0
1000bbbc:	d005      	beq.n	1000bbca <ble_device_init+0x1fe>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000bbbe:	481c      	ldr	r0, [pc, #112]	; (1000bc30 <ble_device_init+0x264>)
1000bbc0:	4b1c      	ldr	r3, [pc, #112]	; (1000bc34 <ble_device_init+0x268>)
1000bbc2:	4798      	blx	r3
1000bbc4:	4830      	ldr	r0, [pc, #192]	; (1000bc88 <ble_device_init+0x2bc>)
1000bbc6:	4b1d      	ldr	r3, [pc, #116]	; (1000bc3c <ble_device_init+0x270>)
1000bbc8:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000bbca:	b011      	add	sp, #68	; 0x44
1000bbcc:	bc3c      	pop	{r2, r3, r4, r5}
1000bbce:	4690      	mov	r8, r2
1000bbd0:	4699      	mov	r9, r3
1000bbd2:	46a2      	mov	sl, r4
1000bbd4:	46ab      	mov	fp, r5
1000bbd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bbd8:	100142e4 	.word	0x100142e4
1000bbdc:	100142ec 	.word	0x100142ec
1000bbe0:	10010fb9 	.word	0x10010fb9
1000bbe4:	10015b44 	.word	0x10015b44
1000bbe8:	000004e2 	.word	0x000004e2
1000bbec:	10013e04 	.word	0x10013e04
1000bbf0:	100142e8 	.word	0x100142e8
1000bbf4:	10015b7c 	.word	0x10015b7c
1000bbf8:	10015b74 	.word	0x10015b74
1000bbfc:	10015eb0 	.word	0x10015eb0
1000bc00:	10013a04 	.word	0x10013a04
1000bc04:	100142f4 	.word	0x100142f4
1000bc08:	10015b58 	.word	0x10015b58
1000bc0c:	10015b1c 	.word	0x10015b1c
1000bc10:	10015b30 	.word	0x10015b30
1000bc14:	10015884 	.word	0x10015884
1000bc18:	10015b78 	.word	0x10015b78
1000bc1c:	10015880 	.word	0x10015880
1000bc20:	10015b08 	.word	0x10015b08
1000bc24:	100160bc 	.word	0x100160bc
1000bc28:	10015898 	.word	0x10015898
1000bc2c:	10015b04 	.word	0x10015b04
1000bc30:	100123b4 	.word	0x100123b4
1000bc34:	100110e9 	.word	0x100110e9
1000bc38:	10013290 	.word	0x10013290
1000bc3c:	10010fc9 	.word	0x10010fc9
1000bc40:	1000d3dd 	.word	0x1000d3dd
1000bc44:	100132b4 	.word	0x100132b4
1000bc48:	100132e0 	.word	0x100132e0
1000bc4c:	1001368c 	.word	0x1001368c
1000bc50:	1000b8fd 	.word	0x1000b8fd
1000bc54:	10012c44 	.word	0x10012c44
1000bc58:	10013328 	.word	0x10013328
1000bc5c:	1000d2f5 	.word	0x1000d2f5
1000bc60:	10013334 	.word	0x10013334
1000bc64:	10012c34 	.word	0x10012c34
1000bc68:	10010fa7 	.word	0x10010fa7
1000bc6c:	1000d329 	.word	0x1000d329
1000bc70:	1001334c 	.word	0x1001334c
1000bc74:	10013378 	.word	0x10013378
1000bc78:	00003a98 	.word	0x00003a98
1000bc7c:	1000d34d 	.word	0x1000d34d
1000bc80:	100133c8 	.word	0x100133c8
1000bc84:	1000d591 	.word	0x1000d591
1000bc88:	10013404 	.word	0x10013404

1000bc8c <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000bc8c:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000bc8e:	2200      	movs	r2, #0
1000bc90:	2100      	movs	r1, #0
1000bc92:	4b0a      	ldr	r3, [pc, #40]	; (1000bcbc <ble_send_slave_sec_request+0x30>)
1000bc94:	4798      	blx	r3
1000bc96:	1e04      	subs	r4, r0, #0
1000bc98:	d106      	bne.n	1000bca8 <ble_send_slave_sec_request+0x1c>
		{
			DBG_LOG_DEV("Slave security request successful");
1000bc9a:	4809      	ldr	r0, [pc, #36]	; (1000bcc0 <ble_send_slave_sec_request+0x34>)
1000bc9c:	4b09      	ldr	r3, [pc, #36]	; (1000bcc4 <ble_send_slave_sec_request+0x38>)
1000bc9e:	4798      	blx	r3
1000bca0:	4809      	ldr	r0, [pc, #36]	; (1000bcc8 <ble_send_slave_sec_request+0x3c>)
1000bca2:	4b0a      	ldr	r3, [pc, #40]	; (1000bccc <ble_send_slave_sec_request+0x40>)
1000bca4:	4798      	blx	r3
			return AT_BLE_SUCCESS;
1000bca6:	e006      	b.n	1000bcb6 <ble_send_slave_sec_request+0x2a>
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000bca8:	4805      	ldr	r0, [pc, #20]	; (1000bcc0 <ble_send_slave_sec_request+0x34>)
1000bcaa:	4b06      	ldr	r3, [pc, #24]	; (1000bcc4 <ble_send_slave_sec_request+0x38>)
1000bcac:	4798      	blx	r3
1000bcae:	4808      	ldr	r0, [pc, #32]	; (1000bcd0 <ble_send_slave_sec_request+0x44>)
1000bcb0:	4b06      	ldr	r3, [pc, #24]	; (1000bccc <ble_send_slave_sec_request+0x40>)
1000bcb2:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000bcb4:	24e2      	movs	r4, #226	; 0xe2
}
1000bcb6:	0020      	movs	r0, r4
1000bcb8:	bd10      	pop	{r4, pc}
1000bcba:	46c0      	nop			; (mov r8, r8)
1000bcbc:	1000e375 	.word	0x1000e375
1000bcc0:	100123b4 	.word	0x100123b4
1000bcc4:	100110e9 	.word	0x100110e9
1000bcc8:	10013454 	.word	0x10013454
1000bccc:	10010fc9 	.word	0x10010fc9
1000bcd0:	10013478 	.word	0x10013478

1000bcd4 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000bcd4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bcd6:	465f      	mov	r7, fp
1000bcd8:	464e      	mov	r6, r9
1000bcda:	4645      	mov	r5, r8
1000bcdc:	b4e0      	push	{r5, r6, r7}
1000bcde:	b09a      	sub	sp, #104	; 0x68
1000bce0:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000bce2:	7a86      	ldrb	r6, [r0, #10]
1000bce4:	2e00      	cmp	r6, #0
1000bce6:	d000      	beq.n	1000bcea <ble_connected_state_handler+0x16>
1000bce8:	e0cc      	b.n	1000be84 <ble_connected_state_handler+0x1b0>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000bcea:	4878      	ldr	r0, [pc, #480]	; (1000becc <ble_connected_state_handler+0x1f8>)
1000bcec:	4f78      	ldr	r7, [pc, #480]	; (1000bed0 <ble_connected_state_handler+0x1fc>)
1000bcee:	47b8      	blx	r7
1000bcf0:	792b      	ldrb	r3, [r5, #4]
1000bcf2:	796a      	ldrb	r2, [r5, #5]
1000bcf4:	79a9      	ldrb	r1, [r5, #6]
1000bcf6:	7868      	ldrb	r0, [r5, #1]
1000bcf8:	9002      	str	r0, [sp, #8]
1000bcfa:	78a8      	ldrb	r0, [r5, #2]
1000bcfc:	9001      	str	r0, [sp, #4]
1000bcfe:	78e8      	ldrb	r0, [r5, #3]
1000bd00:	9000      	str	r0, [sp, #0]
1000bd02:	4874      	ldr	r0, [pc, #464]	; (1000bed4 <ble_connected_state_handler+0x200>)
1000bd04:	4c74      	ldr	r4, [pc, #464]	; (1000bed8 <ble_connected_state_handler+0x204>)
1000bd06:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000bd08:	4870      	ldr	r0, [pc, #448]	; (1000becc <ble_connected_state_handler+0x1f8>)
1000bd0a:	47b8      	blx	r7
1000bd0c:	8929      	ldrh	r1, [r5, #8]
1000bd0e:	4873      	ldr	r0, [pc, #460]	; (1000bedc <ble_connected_state_handler+0x208>)
1000bd10:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000bd12:	2212      	movs	r2, #18
1000bd14:	0029      	movs	r1, r5
1000bd16:	4872      	ldr	r0, [pc, #456]	; (1000bee0 <ble_connected_state_handler+0x20c>)
1000bd18:	4b72      	ldr	r3, [pc, #456]	; (1000bee4 <ble_connected_state_handler+0x210>)
1000bd1a:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000bd1c:	9504      	str	r5, [sp, #16]
1000bd1e:	2207      	movs	r2, #7
1000bd20:	0029      	movs	r1, r5
1000bd22:	4871      	ldr	r0, [pc, #452]	; (1000bee8 <ble_connected_state_handler+0x214>)
1000bd24:	4b71      	ldr	r3, [pc, #452]	; (1000beec <ble_connected_state_handler+0x218>)
1000bd26:	4798      	blx	r3
1000bd28:	2800      	cmp	r0, #0
1000bd2a:	d100      	bne.n	1000bd2e <ble_connected_state_handler+0x5a>
1000bd2c:	e0b3      	b.n	1000be96 <ble_connected_state_handler+0x1c2>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000bd2e:	782b      	ldrb	r3, [r5, #0]
1000bd30:	2b02      	cmp	r3, #2
1000bd32:	d000      	beq.n	1000bd36 <ble_connected_state_handler+0x62>
1000bd34:	e0af      	b.n	1000be96 <ble_connected_state_handler+0x1c2>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000bd36:	2250      	movs	r2, #80	; 0x50
1000bd38:	2100      	movs	r1, #0
1000bd3a:	a806      	add	r0, sp, #24
1000bd3c:	4b6c      	ldr	r3, [pc, #432]	; (1000bef0 <ble_connected_state_handler+0x21c>)
1000bd3e:	4798      	blx	r3
1000bd40:	4f6c      	ldr	r7, [pc, #432]	; (1000bef4 <ble_connected_state_handler+0x220>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000bd42:	2300      	movs	r3, #0
1000bd44:	e00b      	b.n	1000bd5e <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000bd46:	1c59      	adds	r1, r3, #1
1000bd48:	7814      	ldrb	r4, [r2, #0]
1000bd4a:	a806      	add	r0, sp, #24
1000bd4c:	54c4      	strb	r4, [r0, r3]
1000bd4e:	3201      	adds	r2, #1
1000bd50:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000bd52:	42b3      	cmp	r3, r6
1000bd54:	d1f7      	bne.n	1000bd46 <ble_connected_state_handler+0x72>
1000bd56:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000bd58:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000bd5a:	2b50      	cmp	r3, #80	; 0x50
1000bd5c:	d004      	beq.n	1000bd68 <ble_connected_state_handler+0x94>
1000bd5e:	001e      	movs	r6, r3
1000bd60:	3610      	adds	r6, #16
1000bd62:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000bd64:	003a      	movs	r2, r7
1000bd66:	e7ee      	b.n	1000bd46 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000bd68:	aa06      	add	r2, sp, #24
1000bd6a:	0029      	movs	r1, r5
1000bd6c:	2005      	movs	r0, #5
1000bd6e:	4b62      	ldr	r3, [pc, #392]	; (1000bef8 <ble_connected_state_handler+0x224>)
1000bd70:	4798      	blx	r3
1000bd72:	1e06      	subs	r6, r0, #0
1000bd74:	d106      	bne.n	1000bd84 <ble_connected_state_handler+0xb0>
					{
						DBG_LOG_DEV("Resolving Random address success**");
1000bd76:	4855      	ldr	r0, [pc, #340]	; (1000becc <ble_connected_state_handler+0x1f8>)
1000bd78:	4b55      	ldr	r3, [pc, #340]	; (1000bed0 <ble_connected_state_handler+0x1fc>)
1000bd7a:	4798      	blx	r3
1000bd7c:	485f      	ldr	r0, [pc, #380]	; (1000befc <ble_connected_state_handler+0x228>)
1000bd7e:	4b56      	ldr	r3, [pc, #344]	; (1000bed8 <ble_connected_state_handler+0x204>)
1000bd80:	4798      	blx	r3
						return AT_BLE_SUCCESS;
1000bd82:	e09c      	b.n	1000bebe <ble_connected_state_handler+0x1ea>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000bd84:	4851      	ldr	r0, [pc, #324]	; (1000becc <ble_connected_state_handler+0x1f8>)
1000bd86:	4b52      	ldr	r3, [pc, #328]	; (1000bed0 <ble_connected_state_handler+0x1fc>)
1000bd88:	4798      	blx	r3
1000bd8a:	485d      	ldr	r0, [pc, #372]	; (1000bf00 <ble_connected_state_handler+0x22c>)
1000bd8c:	4b52      	ldr	r3, [pc, #328]	; (1000bed8 <ble_connected_state_handler+0x204>)
1000bd8e:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000bd90:	26e2      	movs	r6, #226	; 0xe2
1000bd92:	e094      	b.n	1000bebe <ble_connected_state_handler+0x1ea>
1000bd94:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000bd96:	9405      	str	r4, [sp, #20]
1000bd98:	2207      	movs	r2, #7
1000bd9a:	9904      	ldr	r1, [sp, #16]
1000bd9c:	4648      	mov	r0, r9
1000bd9e:	47d8      	blx	fp
1000bda0:	2800      	cmp	r0, #0
1000bda2:	d109      	bne.n	1000bdb8 <ble_connected_state_handler+0xe4>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000bda4:	9a05      	ldr	r2, [sp, #20]
1000bda6:	0153      	lsls	r3, r2, #5
1000bda8:	1a9b      	subs	r3, r3, r2
1000bdaa:	009a      	lsls	r2, r3, #2
1000bdac:	4b55      	ldr	r3, [pc, #340]	; (1000bf04 <ble_connected_state_handler+0x230>)
1000bdae:	189b      	adds	r3, r3, r2
1000bdb0:	335e      	adds	r3, #94	; 0x5e
1000bdb2:	2202      	movs	r2, #2
1000bdb4:	701a      	strb	r2, [r3, #0]
1000bdb6:	e02b      	b.n	1000be10 <ble_connected_state_handler+0x13c>
1000bdb8:	3401      	adds	r4, #1
1000bdba:	237c      	movs	r3, #124	; 0x7c
1000bdbc:	469c      	mov	ip, r3
1000bdbe:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bdc0:	2c05      	cmp	r4, #5
1000bdc2:	d1e7      	bne.n	1000bd94 <ble_connected_state_handler+0xc0>
1000bdc4:	e072      	b.n	1000beac <ble_connected_state_handler+0x1d8>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000bdc6:	001c      	movs	r4, r3
1000bdc8:	7811      	ldrb	r1, [r2, #0]
1000bdca:	2900      	cmp	r1, #0
1000bdcc:	d11a      	bne.n	1000be04 <ble_connected_state_handler+0x130>
1000bdce:	e001      	b.n	1000bdd4 <ble_connected_state_handler+0x100>
1000bdd0:	2400      	movs	r4, #0
1000bdd2:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000bdd4:	0163      	lsls	r3, r4, #5
1000bdd6:	4699      	mov	r9, r3
1000bdd8:	1b18      	subs	r0, r3, r4
1000bdda:	0080      	lsls	r0, r0, #2
1000bddc:	4b49      	ldr	r3, [pc, #292]	; (1000bf04 <ble_connected_state_handler+0x230>)
1000bdde:	4698      	mov	r8, r3
1000bde0:	4440      	add	r0, r8
1000bde2:	2212      	movs	r2, #18
1000bde4:	0029      	movs	r1, r5
1000bde6:	4b3f      	ldr	r3, [pc, #252]	; (1000bee4 <ble_connected_state_handler+0x210>)
1000bde8:	4798      	blx	r3
						ble_device_count++;
1000bdea:	4a47      	ldr	r2, [pc, #284]	; (1000bf08 <ble_connected_state_handler+0x234>)
1000bdec:	7813      	ldrb	r3, [r2, #0]
1000bdee:	3301      	adds	r3, #1
1000bdf0:	b2db      	uxtb	r3, r3
1000bdf2:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000bdf4:	464b      	mov	r3, r9
1000bdf6:	1b1b      	subs	r3, r3, r4
1000bdf8:	009b      	lsls	r3, r3, #2
1000bdfa:	4443      	add	r3, r8
1000bdfc:	335e      	adds	r3, #94	; 0x5e
1000bdfe:	2202      	movs	r2, #2
1000be00:	701a      	strb	r2, [r3, #0]
						break;
1000be02:	e005      	b.n	1000be10 <ble_connected_state_handler+0x13c>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000be04:	1c79      	adds	r1, r7, #1
1000be06:	b2cf      	uxtb	r7, r1
1000be08:	3301      	adds	r3, #1
1000be0a:	327c      	adds	r2, #124	; 0x7c
1000be0c:	2f05      	cmp	r7, #5
1000be0e:	d1da      	bne.n	1000bdc6 <ble_connected_state_handler+0xf2>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000be10:	2207      	movs	r2, #7
1000be12:	0029      	movs	r1, r5
1000be14:	4834      	ldr	r0, [pc, #208]	; (1000bee8 <ble_connected_state_handler+0x214>)
1000be16:	4b35      	ldr	r3, [pc, #212]	; (1000beec <ble_connected_state_handler+0x218>)
1000be18:	4798      	blx	r3
1000be1a:	2800      	cmp	r0, #0
1000be1c:	d10c      	bne.n	1000be38 <ble_connected_state_handler+0x164>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000be1e:	017b      	lsls	r3, r7, #5
1000be20:	1bdb      	subs	r3, r3, r7
1000be22:	009b      	lsls	r3, r3, #2
1000be24:	4a37      	ldr	r2, [pc, #220]	; (1000bf04 <ble_connected_state_handler+0x230>)
1000be26:	18d3      	adds	r3, r2, r3
1000be28:	2205      	movs	r2, #5
1000be2a:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000be2c:	3202      	adds	r2, #2
1000be2e:	2100      	movs	r1, #0
1000be30:	482d      	ldr	r0, [pc, #180]	; (1000bee8 <ble_connected_state_handler+0x214>)
1000be32:	4b2f      	ldr	r3, [pc, #188]	; (1000bef0 <ble_connected_state_handler+0x21c>)
1000be34:	4798      	blx	r3
1000be36:	e042      	b.n	1000bebe <ble_connected_state_handler+0x1ea>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000be38:	4b32      	ldr	r3, [pc, #200]	; (1000bf04 <ble_connected_state_handler+0x230>)
1000be3a:	4698      	mov	r8, r3
1000be3c:	017c      	lsls	r4, r7, #5
1000be3e:	1be3      	subs	r3, r4, r7
1000be40:	009b      	lsls	r3, r3, #2
1000be42:	4443      	add	r3, r8
1000be44:	220a      	movs	r2, #10
1000be46:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000be48:	3a03      	subs	r2, #3
1000be4a:	2100      	movs	r1, #0
1000be4c:	4826      	ldr	r0, [pc, #152]	; (1000bee8 <ble_connected_state_handler+0x214>)
1000be4e:	4b28      	ldr	r3, [pc, #160]	; (1000bef0 <ble_connected_state_handler+0x21c>)
1000be50:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000be52:	1be4      	subs	r4, r4, r7
1000be54:	00a4      	lsls	r4, r4, #2
1000be56:	4444      	add	r4, r8
1000be58:	7ca3      	ldrb	r3, [r4, #18]
1000be5a:	2b0a      	cmp	r3, #10
1000be5c:	d12f      	bne.n	1000bebe <ble_connected_state_handler+0x1ea>
1000be5e:	e00d      	b.n	1000be7c <ble_connected_state_handler+0x1a8>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000be60:	481a      	ldr	r0, [pc, #104]	; (1000becc <ble_connected_state_handler+0x1f8>)
1000be62:	4b1b      	ldr	r3, [pc, #108]	; (1000bed0 <ble_connected_state_handler+0x1fc>)
1000be64:	4798      	blx	r3
1000be66:	4b28      	ldr	r3, [pc, #160]	; (1000bf08 <ble_connected_state_handler+0x234>)
1000be68:	7819      	ldrb	r1, [r3, #0]
1000be6a:	b2c9      	uxtb	r1, r1
1000be6c:	4827      	ldr	r0, [pc, #156]	; (1000bf0c <ble_connected_state_handler+0x238>)
1000be6e:	4b1a      	ldr	r3, [pc, #104]	; (1000bed8 <ble_connected_state_handler+0x204>)
1000be70:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000be72:	8928      	ldrh	r0, [r5, #8]
1000be74:	2113      	movs	r1, #19
1000be76:	4b26      	ldr	r3, [pc, #152]	; (1000bf10 <ble_connected_state_handler+0x23c>)
1000be78:	4798      	blx	r3
1000be7a:	e020      	b.n	1000bebe <ble_connected_state_handler+0x1ea>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000be7c:	8928      	ldrh	r0, [r5, #8]
1000be7e:	4b25      	ldr	r3, [pc, #148]	; (1000bf14 <ble_connected_state_handler+0x240>)
1000be80:	4798      	blx	r3
1000be82:	e01c      	b.n	1000bebe <ble_connected_state_handler+0x1ea>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000be84:	4811      	ldr	r0, [pc, #68]	; (1000becc <ble_connected_state_handler+0x1f8>)
1000be86:	4b12      	ldr	r3, [pc, #72]	; (1000bed0 <ble_connected_state_handler+0x1fc>)
1000be88:	4798      	blx	r3
1000be8a:	7aa9      	ldrb	r1, [r5, #10]
1000be8c:	4822      	ldr	r0, [pc, #136]	; (1000bf18 <ble_connected_state_handler+0x244>)
1000be8e:	4b12      	ldr	r3, [pc, #72]	; (1000bed8 <ble_connected_state_handler+0x204>)
1000be90:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000be92:	2600      	movs	r6, #0
1000be94:	e013      	b.n	1000bebe <ble_connected_state_handler+0x1ea>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000be96:	4b1c      	ldr	r3, [pc, #112]	; (1000bf08 <ble_connected_state_handler+0x234>)
1000be98:	781b      	ldrb	r3, [r3, #0]
1000be9a:	b2db      	uxtb	r3, r3
1000be9c:	2b04      	cmp	r3, #4
1000be9e:	d8df      	bhi.n	1000be60 <ble_connected_state_handler+0x18c>
1000bea0:	4b18      	ldr	r3, [pc, #96]	; (1000bf04 <ble_connected_state_handler+0x230>)
1000bea2:	4699      	mov	r9, r3
1000bea4:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000bea6:	4b11      	ldr	r3, [pc, #68]	; (1000beec <ble_connected_state_handler+0x218>)
1000bea8:	469b      	mov	fp, r3
1000beaa:	e773      	b.n	1000bd94 <ble_connected_state_handler+0xc0>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000beac:	235e      	movs	r3, #94	; 0x5e
1000beae:	4a15      	ldr	r2, [pc, #84]	; (1000bf04 <ble_connected_state_handler+0x230>)
1000beb0:	5cd3      	ldrb	r3, [r2, r3]
1000beb2:	2b00      	cmp	r3, #0
1000beb4:	d08c      	beq.n	1000bdd0 <ble_connected_state_handler+0xfc>
1000beb6:	4a19      	ldr	r2, [pc, #100]	; (1000bf1c <ble_connected_state_handler+0x248>)
1000beb8:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000beba:	2701      	movs	r7, #1
1000bebc:	e783      	b.n	1000bdc6 <ble_connected_state_handler+0xf2>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000bebe:	0030      	movs	r0, r6
1000bec0:	b01a      	add	sp, #104	; 0x68
1000bec2:	bc1c      	pop	{r2, r3, r4}
1000bec4:	4690      	mov	r8, r2
1000bec6:	4699      	mov	r9, r3
1000bec8:	46a3      	mov	fp, r4
1000beca:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000becc:	100123b4 	.word	0x100123b4
1000bed0:	100110e9 	.word	0x100110e9
1000bed4:	10013498 	.word	0x10013498
1000bed8:	10010fc9 	.word	0x10010fc9
1000bedc:	100134dc 	.word	0x100134dc
1000bee0:	10015b44 	.word	0x10015b44
1000bee4:	10010fa7 	.word	0x10010fa7
1000bee8:	100142ec 	.word	0x100142ec
1000beec:	10010f89 	.word	0x10010f89
1000bef0:	10010fb9 	.word	0x10010fb9
1000bef4:	100158de 	.word	0x100158de
1000bef8:	1000d7fd 	.word	0x1000d7fd
1000befc:	100134f4 	.word	0x100134f4
1000bf00:	10013518 	.word	0x10013518
1000bf04:	10015898 	.word	0x10015898
1000bf08:	10015b04 	.word	0x10015b04
1000bf0c:	1001353c 	.word	0x1001353c
1000bf10:	1000d7d1 	.word	0x1000d7d1
1000bf14:	1000bc8d 	.word	0x1000bc8d
1000bf18:	10013578 	.word	0x10013578
1000bf1c:	10015972 	.word	0x10015972

1000bf20 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000bf20:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bf22:	4647      	mov	r7, r8
1000bf24:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000bf26:	7803      	ldrb	r3, [r0, #0]
1000bf28:	2b00      	cmp	r3, #0
1000bf2a:	d152      	bne.n	1000bfd2 <ble_resolv_rand_addr_handler+0xb2>
1000bf2c:	4d3e      	ldr	r5, [pc, #248]	; (1000c028 <ble_resolv_rand_addr_handler+0x108>)
1000bf2e:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000bf30:	1c46      	adds	r6, r0, #1
1000bf32:	4f3e      	ldr	r7, [pc, #248]	; (1000c02c <ble_resolv_rand_addr_handler+0x10c>)
1000bf34:	2210      	movs	r2, #16
1000bf36:	0029      	movs	r1, r5
1000bf38:	0030      	movs	r0, r6
1000bf3a:	47b8      	blx	r7
1000bf3c:	2800      	cmp	r0, #0
1000bf3e:	d031      	beq.n	1000bfa4 <ble_resolv_rand_addr_handler+0x84>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bf40:	3401      	adds	r4, #1
1000bf42:	b2e4      	uxtb	r4, r4
1000bf44:	357c      	adds	r5, #124	; 0x7c
1000bf46:	2c05      	cmp	r4, #5
1000bf48:	d1f4      	bne.n	1000bf34 <ble_resolv_rand_addr_handler+0x14>
1000bf4a:	e042      	b.n	1000bfd2 <ble_resolv_rand_addr_handler+0xb2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000bf4c:	001d      	movs	r5, r3
1000bf4e:	7811      	ldrb	r1, [r2, #0]
1000bf50:	2900      	cmp	r1, #0
1000bf52:	d11b      	bne.n	1000bf8c <ble_resolv_rand_addr_handler+0x6c>
1000bf54:	e001      	b.n	1000bf5a <ble_resolv_rand_addr_handler+0x3a>
1000bf56:	2500      	movs	r5, #0
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bf58:	2400      	movs	r4, #0
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000bf5a:	4b35      	ldr	r3, [pc, #212]	; (1000c030 <ble_resolv_rand_addr_handler+0x110>)
1000bf5c:	4698      	mov	r8, r3
1000bf5e:	016e      	lsls	r6, r5, #5
1000bf60:	1b77      	subs	r7, r6, r5
1000bf62:	00bf      	lsls	r7, r7, #2
1000bf64:	4447      	add	r7, r8
1000bf66:	2212      	movs	r2, #18
1000bf68:	4932      	ldr	r1, [pc, #200]	; (1000c034 <ble_resolv_rand_addr_handler+0x114>)
1000bf6a:	0038      	movs	r0, r7
1000bf6c:	4b32      	ldr	r3, [pc, #200]	; (1000c038 <ble_resolv_rand_addr_handler+0x118>)
1000bf6e:	4798      	blx	r3
				ble_device_count++;
1000bf70:	4a32      	ldr	r2, [pc, #200]	; (1000c03c <ble_resolv_rand_addr_handler+0x11c>)
1000bf72:	7813      	ldrb	r3, [r2, #0]
1000bf74:	3301      	adds	r3, #1
1000bf76:	b2db      	uxtb	r3, r3
1000bf78:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000bf7a:	375e      	adds	r7, #94	; 0x5e
1000bf7c:	2302      	movs	r3, #2
1000bf7e:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000bf80:	1b75      	subs	r5, r6, r5
1000bf82:	00ad      	lsls	r5, r5, #2
1000bf84:	4445      	add	r5, r8
1000bf86:	3308      	adds	r3, #8
1000bf88:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000bf8a:	e031      	b.n	1000bff0 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bf8c:	3401      	adds	r4, #1
1000bf8e:	b2e4      	uxtb	r4, r4
1000bf90:	3301      	adds	r3, #1
1000bf92:	327c      	adds	r2, #124	; 0x7c
1000bf94:	2c05      	cmp	r4, #5
1000bf96:	d1d9      	bne.n	1000bf4c <ble_resolv_rand_addr_handler+0x2c>
1000bf98:	e03a      	b.n	1000c010 <ble_resolv_rand_addr_handler+0xf0>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000bf9a:	4b26      	ldr	r3, [pc, #152]	; (1000c034 <ble_resolv_rand_addr_handler+0x114>)
1000bf9c:	8918      	ldrh	r0, [r3, #8]
1000bf9e:	4b28      	ldr	r3, [pc, #160]	; (1000c040 <ble_resolv_rand_addr_handler+0x120>)
1000bfa0:	4798      	blx	r3
1000bfa2:	e03c      	b.n	1000c01e <ble_resolv_rand_addr_handler+0xfe>
		
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
1000bfa4:	4827      	ldr	r0, [pc, #156]	; (1000c044 <ble_resolv_rand_addr_handler+0x124>)
1000bfa6:	4b28      	ldr	r3, [pc, #160]	; (1000c048 <ble_resolv_rand_addr_handler+0x128>)
1000bfa8:	4798      	blx	r3
1000bfaa:	4828      	ldr	r0, [pc, #160]	; (1000c04c <ble_resolv_rand_addr_handler+0x12c>)
1000bfac:	4b28      	ldr	r3, [pc, #160]	; (1000c050 <ble_resolv_rand_addr_handler+0x130>)
1000bfae:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000bfb0:	481f      	ldr	r0, [pc, #124]	; (1000c030 <ble_resolv_rand_addr_handler+0x110>)
1000bfb2:	0163      	lsls	r3, r4, #5
1000bfb4:	1b1a      	subs	r2, r3, r4
1000bfb6:	0092      	lsls	r2, r2, #2
1000bfb8:	1882      	adds	r2, r0, r2
1000bfba:	0011      	movs	r1, r2
1000bfbc:	315e      	adds	r1, #94	; 0x5e
1000bfbe:	2502      	movs	r5, #2
1000bfc0:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000bfc2:	210a      	movs	r1, #10
1000bfc4:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000bfc6:	0010      	movs	r0, r2
1000bfc8:	2212      	movs	r2, #18
1000bfca:	491a      	ldr	r1, [pc, #104]	; (1000c034 <ble_resolv_rand_addr_handler+0x114>)
1000bfcc:	4b1a      	ldr	r3, [pc, #104]	; (1000c038 <ble_resolv_rand_addr_handler+0x118>)
1000bfce:	4798      	blx	r3
1000bfd0:	e00e      	b.n	1000bff0 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
1000bfd2:	481c      	ldr	r0, [pc, #112]	; (1000c044 <ble_resolv_rand_addr_handler+0x124>)
1000bfd4:	4b1c      	ldr	r3, [pc, #112]	; (1000c048 <ble_resolv_rand_addr_handler+0x128>)
1000bfd6:	4798      	blx	r3
1000bfd8:	481e      	ldr	r0, [pc, #120]	; (1000c054 <ble_resolv_rand_addr_handler+0x134>)
1000bfda:	4b1d      	ldr	r3, [pc, #116]	; (1000c050 <ble_resolv_rand_addr_handler+0x130>)
1000bfdc:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000bfde:	235e      	movs	r3, #94	; 0x5e
1000bfe0:	4a13      	ldr	r2, [pc, #76]	; (1000c030 <ble_resolv_rand_addr_handler+0x110>)
1000bfe2:	5cd3      	ldrb	r3, [r2, r3]
1000bfe4:	2b00      	cmp	r3, #0
1000bfe6:	d0b6      	beq.n	1000bf56 <ble_resolv_rand_addr_handler+0x36>
1000bfe8:	4a1b      	ldr	r2, [pc, #108]	; (1000c058 <ble_resolv_rand_addr_handler+0x138>)
1000bfea:	2301      	movs	r3, #1
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bfec:	2401      	movs	r4, #1
1000bfee:	e7ad      	b.n	1000bf4c <ble_resolv_rand_addr_handler+0x2c>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000bff0:	4814      	ldr	r0, [pc, #80]	; (1000c044 <ble_resolv_rand_addr_handler+0x124>)
1000bff2:	4b15      	ldr	r3, [pc, #84]	; (1000c048 <ble_resolv_rand_addr_handler+0x128>)
1000bff4:	4798      	blx	r3
1000bff6:	0021      	movs	r1, r4
1000bff8:	4818      	ldr	r0, [pc, #96]	; (1000c05c <ble_resolv_rand_addr_handler+0x13c>)
1000bffa:	4b15      	ldr	r3, [pc, #84]	; (1000c050 <ble_resolv_rand_addr_handler+0x130>)
1000bffc:	4798      	blx	r3
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000bffe:	0163      	lsls	r3, r4, #5
1000c000:	1b1c      	subs	r4, r3, r4
1000c002:	00a4      	lsls	r4, r4, #2
1000c004:	4b0a      	ldr	r3, [pc, #40]	; (1000c030 <ble_resolv_rand_addr_handler+0x110>)
1000c006:	191c      	adds	r4, r3, r4
1000c008:	7ca3      	ldrb	r3, [r4, #18]
1000c00a:	2b0a      	cmp	r3, #10
1000c00c:	d107      	bne.n	1000c01e <ble_resolv_rand_addr_handler+0xfe>
1000c00e:	e7c4      	b.n	1000bf9a <ble_resolv_rand_addr_handler+0x7a>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000c010:	480c      	ldr	r0, [pc, #48]	; (1000c044 <ble_resolv_rand_addr_handler+0x124>)
1000c012:	4b0d      	ldr	r3, [pc, #52]	; (1000c048 <ble_resolv_rand_addr_handler+0x128>)
1000c014:	4798      	blx	r3
1000c016:	2105      	movs	r1, #5
1000c018:	4810      	ldr	r0, [pc, #64]	; (1000c05c <ble_resolv_rand_addr_handler+0x13c>)
1000c01a:	4b0d      	ldr	r3, [pc, #52]	; (1000c050 <ble_resolv_rand_addr_handler+0x130>)
1000c01c:	4798      	blx	r3
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000c01e:	2000      	movs	r0, #0
1000c020:	bc04      	pop	{r2}
1000c022:	4690      	mov	r8, r2
1000c024:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c026:	46c0      	nop			; (mov r8, r8)
1000c028:	100158de 	.word	0x100158de
1000c02c:	10010f89 	.word	0x10010f89
1000c030:	10015898 	.word	0x10015898
1000c034:	10015b44 	.word	0x10015b44
1000c038:	10010fa7 	.word	0x10010fa7
1000c03c:	10015b04 	.word	0x10015b04
1000c040:	1000bc8d 	.word	0x1000bc8d
1000c044:	100123b4 	.word	0x100123b4
1000c048:	100110e9 	.word	0x100110e9
1000c04c:	100135a0 	.word	0x100135a0
1000c050:	10010fc9 	.word	0x10010fc9
1000c054:	100135b8 	.word	0x100135b8
1000c058:	10015972 	.word	0x10015972
1000c05c:	100135d4 	.word	0x100135d4

1000c060 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000c060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c062:	0004      	movs	r4, r0
1000c064:	000d      	movs	r5, r1
	DBG_LOG_DEV("\r\nBLE-Event:%d", events);
1000c066:	4848      	ldr	r0, [pc, #288]	; (1000c188 <ble_event_manager+0x128>)
1000c068:	4b48      	ldr	r3, [pc, #288]	; (1000c18c <ble_event_manager+0x12c>)
1000c06a:	4798      	blx	r3
1000c06c:	0021      	movs	r1, r4
1000c06e:	4848      	ldr	r0, [pc, #288]	; (1000c190 <ble_event_manager+0x130>)
1000c070:	4b48      	ldr	r3, [pc, #288]	; (1000c194 <ble_event_manager+0x134>)
1000c072:	4798      	blx	r3
	switch(events)
1000c074:	2c3b      	cmp	r4, #59	; 0x3b
1000c076:	d879      	bhi.n	1000c16c <ble_event_manager+0x10c>
1000c078:	00a3      	lsls	r3, r4, #2
1000c07a:	4a47      	ldr	r2, [pc, #284]	; (1000c198 <ble_event_manager+0x138>)
1000c07c:	58d3      	ldr	r3, [r2, r3]
1000c07e:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c080:	00a4      	lsls	r4, r4, #2
1000c082:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000c084:	4f45      	ldr	r7, [pc, #276]	; (1000c19c <ble_event_manager+0x13c>)
1000c086:	59bb      	ldr	r3, [r7, r6]
1000c088:	2b00      	cmp	r3, #0
1000c08a:	d004      	beq.n	1000c096 <ble_event_manager+0x36>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c08c:	591b      	ldr	r3, [r3, r4]
1000c08e:	2b00      	cmp	r3, #0
1000c090:	d001      	beq.n	1000c096 <ble_event_manager+0x36>
				{
					event_cb_fn[events](event_params);		
1000c092:	0028      	movs	r0, r5
1000c094:	4798      	blx	r3
1000c096:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000c098:	2e14      	cmp	r6, #20
1000c09a:	d1f4      	bne.n	1000c086 <ble_event_manager+0x26>
1000c09c:	e072      	b.n	1000c184 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c09e:	3c13      	subs	r4, #19
1000c0a0:	b2e4      	uxtb	r4, r4
1000c0a2:	00a4      	lsls	r4, r4, #2
1000c0a4:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000c0a6:	4f3e      	ldr	r7, [pc, #248]	; (1000c1a0 <ble_event_manager+0x140>)
1000c0a8:	59bb      	ldr	r3, [r7, r6]
1000c0aa:	2b00      	cmp	r3, #0
1000c0ac:	d004      	beq.n	1000c0b8 <ble_event_manager+0x58>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c0ae:	591b      	ldr	r3, [r3, r4]
1000c0b0:	2b00      	cmp	r3, #0
1000c0b2:	d001      	beq.n	1000c0b8 <ble_event_manager+0x58>
				{
					event_cb_fn[events](event_params);
1000c0b4:	0028      	movs	r0, r5
1000c0b6:	4798      	blx	r3
1000c0b8:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000c0ba:	2e14      	cmp	r6, #20
1000c0bc:	d1f4      	bne.n	1000c0a8 <ble_event_manager+0x48>
1000c0be:	e061      	b.n	1000c184 <ble_event_manager+0x124>
	case AT_BLE_MTU_CHANGED_CMD_COMPLETE:
	case AT_BLE_CHARACTERISTIC_WRITE_CMD_CMP:
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
1000c0c0:	3c1d      	subs	r4, #29
1000c0c2:	b2e4      	uxtb	r4, r4
		DBG_LOG_DEV("GATT_Server Event:%d", events);
1000c0c4:	4830      	ldr	r0, [pc, #192]	; (1000c188 <ble_event_manager+0x128>)
1000c0c6:	4b31      	ldr	r3, [pc, #196]	; (1000c18c <ble_event_manager+0x12c>)
1000c0c8:	4798      	blx	r3
1000c0ca:	0021      	movs	r1, r4
1000c0cc:	4835      	ldr	r0, [pc, #212]	; (1000c1a4 <ble_event_manager+0x144>)
1000c0ce:	4b31      	ldr	r3, [pc, #196]	; (1000c194 <ble_event_manager+0x134>)
1000c0d0:	4798      	blx	r3
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c0d2:	00a4      	lsls	r4, r4, #2
1000c0d4:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000c0d6:	4f34      	ldr	r7, [pc, #208]	; (1000c1a8 <ble_event_manager+0x148>)
1000c0d8:	59bb      	ldr	r3, [r7, r6]
1000c0da:	2b00      	cmp	r3, #0
1000c0dc:	d004      	beq.n	1000c0e8 <ble_event_manager+0x88>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c0de:	591b      	ldr	r3, [r3, r4]
1000c0e0:	2b00      	cmp	r3, #0
1000c0e2:	d001      	beq.n	1000c0e8 <ble_event_manager+0x88>
				{
					event_cb_fn[events](event_params);
1000c0e4:	0028      	movs	r0, r5
1000c0e6:	4798      	blx	r3
1000c0e8:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000c0ea:	2e14      	cmp	r6, #20
1000c0ec:	d1f4      	bne.n	1000c0d8 <ble_event_manager+0x78>
1000c0ee:	e049      	b.n	1000c184 <ble_event_manager+0x124>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000c0f0:	3c27      	subs	r4, #39	; 0x27
1000c0f2:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000c0f4:	4b2d      	ldr	r3, [pc, #180]	; (1000c1ac <ble_event_manager+0x14c>)
1000c0f6:	681b      	ldr	r3, [r3, #0]
1000c0f8:	2b00      	cmp	r3, #0
1000c0fa:	d043      	beq.n	1000c184 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c0fc:	00a4      	lsls	r4, r4, #2
1000c0fe:	58e3      	ldr	r3, [r4, r3]
1000c100:	2b00      	cmp	r3, #0
1000c102:	d03f      	beq.n	1000c184 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000c104:	0028      	movs	r0, r5
1000c106:	4798      	blx	r3
1000c108:	e03c      	b.n	1000c184 <ble_event_manager+0x124>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000c10a:	3c2d      	subs	r4, #45	; 0x2d
1000c10c:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000c10e:	4b28      	ldr	r3, [pc, #160]	; (1000c1b0 <ble_event_manager+0x150>)
1000c110:	681b      	ldr	r3, [r3, #0]
1000c112:	2b00      	cmp	r3, #0
1000c114:	d036      	beq.n	1000c184 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c116:	00a4      	lsls	r4, r4, #2
1000c118:	58e3      	ldr	r3, [r4, r3]
1000c11a:	2b00      	cmp	r3, #0
1000c11c:	d032      	beq.n	1000c184 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000c11e:	0028      	movs	r0, r5
1000c120:	4798      	blx	r3
1000c122:	e02f      	b.n	1000c184 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c124:	3c36      	subs	r4, #54	; 0x36
1000c126:	b2e4      	uxtb	r4, r4
1000c128:	00a4      	lsls	r4, r4, #2
1000c12a:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000c12c:	4f21      	ldr	r7, [pc, #132]	; (1000c1b4 <ble_event_manager+0x154>)
1000c12e:	59bb      	ldr	r3, [r7, r6]
1000c130:	2b00      	cmp	r3, #0
1000c132:	d004      	beq.n	1000c13e <ble_event_manager+0xde>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c134:	591b      	ldr	r3, [r3, r4]
1000c136:	2b00      	cmp	r3, #0
1000c138:	d001      	beq.n	1000c13e <ble_event_manager+0xde>
				{
					event_cb_fn[events](event_params);
1000c13a:	0028      	movs	r0, r5
1000c13c:	4798      	blx	r3
1000c13e:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000c140:	2e14      	cmp	r6, #20
1000c142:	d1f4      	bne.n	1000c12e <ble_event_manager+0xce>
1000c144:	e01e      	b.n	1000c184 <ble_event_manager+0x124>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000c146:	3c38      	subs	r4, #56	; 0x38
1000c148:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000c14a:	4b1b      	ldr	r3, [pc, #108]	; (1000c1b8 <ble_event_manager+0x158>)
1000c14c:	681b      	ldr	r3, [r3, #0]
1000c14e:	2b00      	cmp	r3, #0
1000c150:	d018      	beq.n	1000c184 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c152:	00a4      	lsls	r4, r4, #2
1000c154:	58e3      	ldr	r3, [r4, r3]
1000c156:	2b00      	cmp	r3, #0
1000c158:	d014      	beq.n	1000c184 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000c15a:	0028      	movs	r0, r5
1000c15c:	4798      	blx	r3
1000c15e:	e011      	b.n	1000c184 <ble_event_manager+0x124>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000c160:	4b16      	ldr	r3, [pc, #88]	; (1000c1bc <ble_event_manager+0x15c>)
1000c162:	681b      	ldr	r3, [r3, #0]
1000c164:	2b00      	cmp	r3, #0
1000c166:	d00d      	beq.n	1000c184 <ble_event_manager+0x124>
			ble_user_event_cb();
1000c168:	4798      	blx	r3
1000c16a:	e00b      	b.n	1000c184 <ble_event_manager+0x124>
	}
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
1000c16c:	4e06      	ldr	r6, [pc, #24]	; (1000c188 <ble_event_manager+0x128>)
1000c16e:	0030      	movs	r0, r6
1000c170:	4d06      	ldr	r5, [pc, #24]	; (1000c18c <ble_event_manager+0x12c>)
1000c172:	47a8      	blx	r5
1000c174:	0021      	movs	r1, r4
1000c176:	4812      	ldr	r0, [pc, #72]	; (1000c1c0 <ble_event_manager+0x160>)
1000c178:	4b06      	ldr	r3, [pc, #24]	; (1000c194 <ble_event_manager+0x134>)
1000c17a:	4798      	blx	r3
		DBG_LOG("\r\n");
1000c17c:	0030      	movs	r0, r6
1000c17e:	47a8      	blx	r5
1000c180:	0030      	movs	r0, r6
1000c182:	47a8      	blx	r5
	}
	break;		
	}
}
1000c184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c186:	46c0      	nop			; (mov r8, r8)
1000c188:	100123b4 	.word	0x100123b4
1000c18c:	100110e9 	.word	0x100110e9
1000c190:	100135e4 	.word	0x100135e4
1000c194:	10010fc9 	.word	0x10010fc9
1000c198:	10012b44 	.word	0x10012b44
1000c19c:	10015b1c 	.word	0x10015b1c
1000c1a0:	10015b30 	.word	0x10015b30
1000c1a4:	100135f4 	.word	0x100135f4
1000c1a8:	10015884 	.word	0x10015884
1000c1ac:	10015b78 	.word	0x10015b78
1000c1b0:	10015880 	.word	0x10015880
1000c1b4:	10015b08 	.word	0x10015b08
1000c1b8:	100160bc 	.word	0x100160bc
1000c1bc:	100142e4 	.word	0x100142e4
1000c1c0:	1001360c 	.word	0x1001360c

1000c1c4 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000c1c4:	b570      	push	{r4, r5, r6, lr}
1000c1c6:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000c1c8:	4b0d      	ldr	r3, [pc, #52]	; (1000c200 <ble_event_task+0x3c>)
1000c1ca:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000c1cc:	2b01      	cmp	r3, #1
1000c1ce:	d101      	bne.n	1000c1d4 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000c1d0:	4b0c      	ldr	r3, [pc, #48]	; (1000c204 <ble_event_task+0x40>)
1000c1d2:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000c1d4:	0022      	movs	r2, r4
1000c1d6:	490c      	ldr	r1, [pc, #48]	; (1000c208 <ble_event_task+0x44>)
1000c1d8:	480c      	ldr	r0, [pc, #48]	; (1000c20c <ble_event_task+0x48>)
1000c1da:	4b0d      	ldr	r3, [pc, #52]	; (1000c210 <ble_event_task+0x4c>)
1000c1dc:	4798      	blx	r3
1000c1de:	0004      	movs	r4, r0
1000c1e0:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000c1e2:	4b07      	ldr	r3, [pc, #28]	; (1000c200 <ble_event_task+0x3c>)
1000c1e4:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000c1e6:	2b01      	cmp	r3, #1
1000c1e8:	d101      	bne.n	1000c1ee <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000c1ea:	4b0a      	ldr	r3, [pc, #40]	; (1000c214 <ble_event_task+0x50>)
1000c1ec:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000c1ee:	2d00      	cmp	r5, #0
1000c1f0:	d104      	bne.n	1000c1fc <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000c1f2:	4b06      	ldr	r3, [pc, #24]	; (1000c20c <ble_event_task+0x48>)
1000c1f4:	7818      	ldrb	r0, [r3, #0]
1000c1f6:	4904      	ldr	r1, [pc, #16]	; (1000c208 <ble_event_task+0x44>)
1000c1f8:	4b07      	ldr	r3, [pc, #28]	; (1000c218 <ble_event_task+0x54>)
1000c1fa:	4798      	blx	r3
    }
    
    return status;
}
1000c1fc:	0020      	movs	r0, r4
1000c1fe:	bd70      	pop	{r4, r5, r6, pc}
1000c200:	100142f3 	.word	0x100142f3
1000c204:	10009a8d 	.word	0x10009a8d
1000c208:	10015eb0 	.word	0x10015eb0
1000c20c:	10015b74 	.word	0x10015b74
1000c210:	1000cb85 	.word	0x1000cb85
1000c214:	10009a65 	.word	0x10009a65
1000c218:	1000c061 	.word	0x1000c061

1000c21c <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000c21c:	b510      	push	{r4, lr}
1000c21e:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000c220:	ac08      	add	r4, sp, #32
1000c222:	2203      	movs	r2, #3
1000c224:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000c226:	2302      	movs	r3, #2
1000c228:	70a3      	strb	r3, [r4, #2]
1000c22a:	3316      	adds	r3, #22
1000c22c:	70e3      	strb	r3, [r4, #3]
1000c22e:	7122      	strb	r2, [r4, #4]
1000c230:	7163      	strb	r3, [r4, #5]
1000c232:	3201      	adds	r2, #1
1000c234:	71a2      	strb	r2, [r4, #6]
1000c236:	71e3      	strb	r3, [r4, #7]
1000c238:	320b      	adds	r2, #11
1000c23a:	7222      	strb	r2, [r4, #8]
1000c23c:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000c23e:	3b0f      	subs	r3, #15
1000c240:	7023      	strb	r3, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000c242:	3a05      	subs	r2, #5
1000c244:	72a2      	strb	r2, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000c246:	72e3      	strb	r3, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000c248:	aa0b      	add	r2, sp, #44	; 0x2c
1000c24a:	4b16      	ldr	r3, [pc, #88]	; (1000c2a4 <ble_advertisement_data_set+0x88>)
1000c24c:	cb03      	ldmia	r3!, {r0, r1}
1000c24e:	c203      	stmia	r2!, {r0, r1}
1000c250:	781b      	ldrb	r3, [r3, #0]
1000c252:	7013      	strb	r3, [r2, #0]
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000c254:	2300      	movs	r3, #0
1000c256:	466a      	mov	r2, sp
1000c258:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000c25a:	3315      	adds	r3, #21
1000c25c:	7053      	strb	r3, [r2, #1]
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
    DBG_LOG_DEV("[ble_manager]\t\t\tManufacturer specific data enabled");
1000c25e:	4812      	ldr	r0, [pc, #72]	; (1000c2a8 <ble_advertisement_data_set+0x8c>)
1000c260:	4b12      	ldr	r3, [pc, #72]	; (1000c2ac <ble_advertisement_data_set+0x90>)
1000c262:	4798      	blx	r3
1000c264:	4812      	ldr	r0, [pc, #72]	; (1000c2b0 <ble_advertisement_data_set+0x94>)
1000c266:	4b13      	ldr	r3, [pc, #76]	; (1000c2b4 <ble_advertisement_data_set+0x98>)
1000c268:	4798      	blx	r3
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000c26a:	2307      	movs	r3, #7
1000c26c:	466a      	mov	r2, sp
1000c26e:	7013      	strb	r3, [r2, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000c270:	33f8      	adds	r3, #248	; 0xf8
1000c272:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000c274:	2206      	movs	r2, #6
1000c276:	4910      	ldr	r1, [pc, #64]	; (1000c2b8 <ble_advertisement_data_set+0x9c>)
1000c278:	466b      	mov	r3, sp
1000c27a:	1c98      	adds	r0, r3, #2
1000c27c:	4b0f      	ldr	r3, [pc, #60]	; (1000c2bc <ble_advertisement_data_set+0xa0>)
1000c27e:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000c280:	2308      	movs	r3, #8
1000c282:	466a      	mov	r2, sp
1000c284:	2115      	movs	r1, #21
1000c286:	0020      	movs	r0, r4
1000c288:	4c0d      	ldr	r4, [pc, #52]	; (1000c2c0 <ble_advertisement_data_set+0xa4>)
1000c28a:	47a0      	blx	r4
1000c28c:	2800      	cmp	r0, #0
1000c28e:	d005      	beq.n	1000c29c <ble_advertisement_data_set+0x80>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000c290:	4805      	ldr	r0, [pc, #20]	; (1000c2a8 <ble_advertisement_data_set+0x8c>)
1000c292:	4b06      	ldr	r3, [pc, #24]	; (1000c2ac <ble_advertisement_data_set+0x90>)
1000c294:	4798      	blx	r3
1000c296:	480b      	ldr	r0, [pc, #44]	; (1000c2c4 <ble_advertisement_data_set+0xa8>)
1000c298:	4b06      	ldr	r3, [pc, #24]	; (1000c2b4 <ble_advertisement_data_set+0x98>)
1000c29a:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000c29c:	2000      	movs	r0, #0
1000c29e:	b010      	add	sp, #64	; 0x40
1000c2a0:	bd10      	pop	{r4, pc}
1000c2a2:	46c0      	nop			; (mov r8, r8)
1000c2a4:	10013328 	.word	0x10013328
1000c2a8:	100123b4 	.word	0x100123b4
1000c2ac:	100110e9 	.word	0x100110e9
1000c2b0:	1001362c 	.word	0x1001362c
1000c2b4:	10010fc9 	.word	0x10010fc9
1000c2b8:	10013660 	.word	0x10013660
1000c2bc:	10010fa7 	.word	0x10010fa7
1000c2c0:	1000d5e5 	.word	0x1000d5e5
1000c2c4:	10013668 	.word	0x10013668

1000c2c8 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000c2c8:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000c2ca:	4b20      	ldr	r3, [pc, #128]	; (1000c34c <uart_rx0_isr_handler+0x84>)
1000c2cc:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000c2ce:	6823      	ldr	r3, [r4, #0]
1000c2d0:	7d1d      	ldrb	r5, [r3, #20]
1000c2d2:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000c2d4:	066a      	lsls	r2, r5, #25
1000c2d6:	d513      	bpl.n	1000c300 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000c2d8:	211e      	movs	r1, #30
1000c2da:	2222      	movs	r2, #34	; 0x22
1000c2dc:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000c2de:	7e1a      	ldrb	r2, [r3, #24]
1000c2e0:	3123      	adds	r1, #35	; 0x23
1000c2e2:	438a      	bics	r2, r1
1000c2e4:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c2e6:	2321      	movs	r3, #33	; 0x21
1000c2e8:	5ce3      	ldrb	r3, [r4, r3]
1000c2ea:	071b      	lsls	r3, r3, #28
1000c2ec:	d506      	bpl.n	1000c2fc <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000c2ee:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c2f0:	5ce3      	ldrb	r3, [r4, r3]
1000c2f2:	071b      	lsls	r3, r3, #28
1000c2f4:	d502      	bpl.n	1000c2fc <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000c2f6:	0020      	movs	r0, r4
1000c2f8:	6923      	ldr	r3, [r4, #16]
1000c2fa:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000c2fc:	6823      	ldr	r3, [r4, #0]
1000c2fe:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c300:	07eb      	lsls	r3, r5, #31
1000c302:	d522      	bpl.n	1000c34a <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000c304:	6823      	ldr	r3, [r4, #0]
1000c306:	7c1b      	ldrb	r3, [r3, #16]
1000c308:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000c30a:	6962      	ldr	r2, [r4, #20]
1000c30c:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000c30e:	6963      	ldr	r3, [r4, #20]
1000c310:	3301      	adds	r3, #1
1000c312:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000c314:	8ba3      	ldrh	r3, [r4, #28]
1000c316:	3b01      	subs	r3, #1
1000c318:	b29b      	uxth	r3, r3
1000c31a:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000c31c:	8ba3      	ldrh	r3, [r4, #28]
1000c31e:	b29b      	uxth	r3, r3
1000c320:	2b00      	cmp	r3, #0
1000c322:	d112      	bne.n	1000c34a <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c324:	3321      	adds	r3, #33	; 0x21
1000c326:	5ce3      	ldrb	r3, [r4, r3]
1000c328:	075b      	lsls	r3, r3, #29
1000c32a:	d50e      	bpl.n	1000c34a <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000c32c:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c32e:	5ce3      	ldrb	r3, [r4, r3]
1000c330:	075b      	lsls	r3, r3, #29
1000c332:	d50a      	bpl.n	1000c34a <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000c334:	2200      	movs	r2, #0
1000c336:	2322      	movs	r3, #34	; 0x22
1000c338:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000c33a:	6822      	ldr	r2, [r4, #0]
1000c33c:	7e13      	ldrb	r3, [r2, #24]
1000c33e:	2101      	movs	r1, #1
1000c340:	438b      	bics	r3, r1
1000c342:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000c344:	68e3      	ldr	r3, [r4, #12]
1000c346:	0020      	movs	r0, r4
1000c348:	4798      	blx	r3
			}
		}
	}
}
1000c34a:	bd70      	pop	{r4, r5, r6, pc}
1000c34c:	100160c0 	.word	0x100160c0

1000c350 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000c350:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000c352:	4b21      	ldr	r3, [pc, #132]	; (1000c3d8 <uart_tx0_isr_handler+0x88>)
1000c354:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000c356:	6823      	ldr	r3, [r4, #0]
1000c358:	791d      	ldrb	r5, [r3, #4]
1000c35a:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000c35c:	07ea      	lsls	r2, r5, #31
1000c35e:	d517      	bpl.n	1000c390 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000c360:	69a2      	ldr	r2, [r4, #24]
1000c362:	7811      	ldrb	r1, [r2, #0]
1000c364:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000c366:	3201      	adds	r2, #1
1000c368:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000c36a:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000c36c:	8be3      	ldrh	r3, [r4, #30]
1000c36e:	3b01      	subs	r3, #1
1000c370:	b29b      	uxth	r3, r3
1000c372:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000c374:	8be3      	ldrh	r3, [r4, #30]
1000c376:	b29b      	uxth	r3, r3
1000c378:	2b00      	cmp	r3, #0
1000c37a:	d109      	bne.n	1000c390 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c37c:	6822      	ldr	r2, [r4, #0]
1000c37e:	7a13      	ldrb	r3, [r2, #8]
1000c380:	2101      	movs	r1, #1
1000c382:	438b      	bics	r3, r1
1000c384:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000c386:	6822      	ldr	r2, [r4, #0]
1000c388:	7a11      	ldrb	r1, [r2, #8]
1000c38a:	2310      	movs	r3, #16
1000c38c:	430b      	orrs	r3, r1
1000c38e:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000c390:	06eb      	lsls	r3, r5, #27
1000c392:	d512      	bpl.n	1000c3ba <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c394:	2321      	movs	r3, #33	; 0x21
1000c396:	5ce3      	ldrb	r3, [r4, r3]
1000c398:	07db      	lsls	r3, r3, #31
1000c39a:	d50e      	bpl.n	1000c3ba <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000c39c:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c39e:	5ce3      	ldrb	r3, [r4, r3]
1000c3a0:	07db      	lsls	r3, r3, #31
1000c3a2:	d50a      	bpl.n	1000c3ba <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000c3a4:	2200      	movs	r2, #0
1000c3a6:	2322      	movs	r3, #34	; 0x22
1000c3a8:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c3aa:	6822      	ldr	r2, [r4, #0]
1000c3ac:	7a13      	ldrb	r3, [r2, #8]
1000c3ae:	2110      	movs	r1, #16
1000c3b0:	438b      	bics	r3, r1
1000c3b2:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000c3b4:	0020      	movs	r0, r4
1000c3b6:	6863      	ldr	r3, [r4, #4]
1000c3b8:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000c3ba:	06ab      	lsls	r3, r5, #26
1000c3bc:	d50a      	bpl.n	1000c3d4 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c3be:	2321      	movs	r3, #33	; 0x21
1000c3c0:	5ce3      	ldrb	r3, [r4, r3]
1000c3c2:	079b      	lsls	r3, r3, #30
1000c3c4:	d506      	bpl.n	1000c3d4 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000c3c6:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c3c8:	5ce3      	ldrb	r3, [r4, r3]
1000c3ca:	079b      	lsls	r3, r3, #30
1000c3cc:	d502      	bpl.n	1000c3d4 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000c3ce:	68a3      	ldr	r3, [r4, #8]
1000c3d0:	0020      	movs	r0, r4
1000c3d2:	4798      	blx	r3
		}

	}
}
1000c3d4:	bd70      	pop	{r4, r5, r6, pc}
1000c3d6:	46c0      	nop			; (mov r8, r8)
1000c3d8:	100160c0 	.word	0x100160c0

1000c3dc <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000c3dc:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000c3de:	4b20      	ldr	r3, [pc, #128]	; (1000c460 <uart_rx1_isr_handler+0x84>)
1000c3e0:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000c3e2:	6823      	ldr	r3, [r4, #0]
1000c3e4:	7d1d      	ldrb	r5, [r3, #20]
1000c3e6:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000c3e8:	066a      	lsls	r2, r5, #25
1000c3ea:	d513      	bpl.n	1000c414 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000c3ec:	211e      	movs	r1, #30
1000c3ee:	2222      	movs	r2, #34	; 0x22
1000c3f0:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000c3f2:	7e1a      	ldrb	r2, [r3, #24]
1000c3f4:	3123      	adds	r1, #35	; 0x23
1000c3f6:	438a      	bics	r2, r1
1000c3f8:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c3fa:	2321      	movs	r3, #33	; 0x21
1000c3fc:	5ce3      	ldrb	r3, [r4, r3]
1000c3fe:	071b      	lsls	r3, r3, #28
1000c400:	d506      	bpl.n	1000c410 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000c402:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c404:	5ce3      	ldrb	r3, [r4, r3]
1000c406:	071b      	lsls	r3, r3, #28
1000c408:	d502      	bpl.n	1000c410 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000c40a:	0020      	movs	r0, r4
1000c40c:	6923      	ldr	r3, [r4, #16]
1000c40e:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000c410:	6823      	ldr	r3, [r4, #0]
1000c412:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c414:	07eb      	lsls	r3, r5, #31
1000c416:	d522      	bpl.n	1000c45e <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000c418:	6823      	ldr	r3, [r4, #0]
1000c41a:	7c1b      	ldrb	r3, [r3, #16]
1000c41c:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000c41e:	6962      	ldr	r2, [r4, #20]
1000c420:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000c422:	6963      	ldr	r3, [r4, #20]
1000c424:	3301      	adds	r3, #1
1000c426:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000c428:	8ba3      	ldrh	r3, [r4, #28]
1000c42a:	3b01      	subs	r3, #1
1000c42c:	b29b      	uxth	r3, r3
1000c42e:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000c430:	8ba3      	ldrh	r3, [r4, #28]
1000c432:	b29b      	uxth	r3, r3
1000c434:	2b00      	cmp	r3, #0
1000c436:	d112      	bne.n	1000c45e <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c438:	3321      	adds	r3, #33	; 0x21
1000c43a:	5ce3      	ldrb	r3, [r4, r3]
1000c43c:	075b      	lsls	r3, r3, #29
1000c43e:	d50e      	bpl.n	1000c45e <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000c440:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c442:	5ce3      	ldrb	r3, [r4, r3]
1000c444:	075b      	lsls	r3, r3, #29
1000c446:	d50a      	bpl.n	1000c45e <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000c448:	2200      	movs	r2, #0
1000c44a:	2322      	movs	r3, #34	; 0x22
1000c44c:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000c44e:	6822      	ldr	r2, [r4, #0]
1000c450:	7e13      	ldrb	r3, [r2, #24]
1000c452:	2101      	movs	r1, #1
1000c454:	438b      	bics	r3, r1
1000c456:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000c458:	68e3      	ldr	r3, [r4, #12]
1000c45a:	0020      	movs	r0, r4
1000c45c:	4798      	blx	r3
			}
		}
	}
}
1000c45e:	bd70      	pop	{r4, r5, r6, pc}
1000c460:	100160c0 	.word	0x100160c0

1000c464 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000c464:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000c466:	4b21      	ldr	r3, [pc, #132]	; (1000c4ec <uart_tx1_isr_handler+0x88>)
1000c468:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000c46a:	6823      	ldr	r3, [r4, #0]
1000c46c:	791d      	ldrb	r5, [r3, #4]
1000c46e:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000c470:	07ea      	lsls	r2, r5, #31
1000c472:	d517      	bpl.n	1000c4a4 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000c474:	69a2      	ldr	r2, [r4, #24]
1000c476:	7811      	ldrb	r1, [r2, #0]
1000c478:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000c47a:	3201      	adds	r2, #1
1000c47c:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000c47e:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000c480:	8be3      	ldrh	r3, [r4, #30]
1000c482:	3b01      	subs	r3, #1
1000c484:	b29b      	uxth	r3, r3
1000c486:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000c488:	8be3      	ldrh	r3, [r4, #30]
1000c48a:	b29b      	uxth	r3, r3
1000c48c:	2b00      	cmp	r3, #0
1000c48e:	d109      	bne.n	1000c4a4 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c490:	6822      	ldr	r2, [r4, #0]
1000c492:	7a13      	ldrb	r3, [r2, #8]
1000c494:	2101      	movs	r1, #1
1000c496:	438b      	bics	r3, r1
1000c498:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000c49a:	6822      	ldr	r2, [r4, #0]
1000c49c:	7a11      	ldrb	r1, [r2, #8]
1000c49e:	2310      	movs	r3, #16
1000c4a0:	430b      	orrs	r3, r1
1000c4a2:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000c4a4:	06eb      	lsls	r3, r5, #27
1000c4a6:	d512      	bpl.n	1000c4ce <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c4a8:	2321      	movs	r3, #33	; 0x21
1000c4aa:	5ce3      	ldrb	r3, [r4, r3]
1000c4ac:	07db      	lsls	r3, r3, #31
1000c4ae:	d50e      	bpl.n	1000c4ce <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000c4b0:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c4b2:	5ce3      	ldrb	r3, [r4, r3]
1000c4b4:	07db      	lsls	r3, r3, #31
1000c4b6:	d50a      	bpl.n	1000c4ce <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000c4b8:	2200      	movs	r2, #0
1000c4ba:	2322      	movs	r3, #34	; 0x22
1000c4bc:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c4be:	6822      	ldr	r2, [r4, #0]
1000c4c0:	7a13      	ldrb	r3, [r2, #8]
1000c4c2:	2110      	movs	r1, #16
1000c4c4:	438b      	bics	r3, r1
1000c4c6:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000c4c8:	0020      	movs	r0, r4
1000c4ca:	6863      	ldr	r3, [r4, #4]
1000c4cc:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000c4ce:	06ab      	lsls	r3, r5, #26
1000c4d0:	d50a      	bpl.n	1000c4e8 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c4d2:	2321      	movs	r3, #33	; 0x21
1000c4d4:	5ce3      	ldrb	r3, [r4, r3]
1000c4d6:	079b      	lsls	r3, r3, #30
1000c4d8:	d506      	bpl.n	1000c4e8 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000c4da:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c4dc:	5ce3      	ldrb	r3, [r4, r3]
1000c4de:	079b      	lsls	r3, r3, #30
1000c4e0:	d502      	bpl.n	1000c4e8 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000c4e2:	68a3      	ldr	r3, [r4, #8]
1000c4e4:	0020      	movs	r0, r4
1000c4e6:	4798      	blx	r3
		}

	}
}
1000c4e8:	bd70      	pop	{r4, r5, r6, pc}
1000c4ea:	46c0      	nop			; (mov r8, r8)
1000c4ec:	100160c0 	.word	0x100160c0

1000c4f0 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000c4f0:	23e1      	movs	r3, #225	; 0xe1
1000c4f2:	025b      	lsls	r3, r3, #9
1000c4f4:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000c4f6:	2300      	movs	r3, #0
1000c4f8:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000c4fa:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000c4fc:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000c4fe:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000c500:	3302      	adds	r3, #2
1000c502:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000c504:	2203      	movs	r2, #3
1000c506:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000c508:	3201      	adds	r2, #1
1000c50a:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000c50c:	3201      	adds	r2, #1
1000c50e:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000c510:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000c512:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000c514:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000c516:	6243      	str	r3, [r0, #36]	; 0x24
}
1000c518:	4770      	bx	lr
1000c51a:	46c0      	nop			; (mov r8, r8)

1000c51c <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000c51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c51e:	464f      	mov	r7, r9
1000c520:	4646      	mov	r6, r8
1000c522:	b4c0      	push	{r6, r7}
1000c524:	0005      	movs	r5, r0
1000c526:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000c528:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000c52a:	2300      	movs	r3, #0
1000c52c:	6043      	str	r3, [r0, #4]
1000c52e:	6083      	str	r3, [r0, #8]
1000c530:	60c3      	str	r3, [r0, #12]
1000c532:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000c534:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000c536:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000c538:	2200      	movs	r2, #0
1000c53a:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000c53c:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000c53e:	3320      	adds	r3, #32
1000c540:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000c542:	3301      	adds	r3, #1
1000c544:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000c546:	3301      	adds	r3, #1
1000c548:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000c54a:	4b55      	ldr	r3, [pc, #340]	; (1000c6a0 <uart_init+0x184>)
1000c54c:	4299      	cmp	r1, r3
1000c54e:	d118      	bne.n	1000c582 <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000c550:	2009      	movs	r0, #9
1000c552:	4c54      	ldr	r4, [pc, #336]	; (1000c6a4 <uart_init+0x188>)
1000c554:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000c556:	200a      	movs	r0, #10
1000c558:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000c55a:	2009      	movs	r0, #9
1000c55c:	4c52      	ldr	r4, [pc, #328]	; (1000c6a8 <uart_init+0x18c>)
1000c55e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000c560:	200a      	movs	r0, #10
1000c562:	47a0      	blx	r4
		_uart_instances[0] = module;
1000c564:	4b51      	ldr	r3, [pc, #324]	; (1000c6ac <uart_init+0x190>)
1000c566:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000c568:	4951      	ldr	r1, [pc, #324]	; (1000c6b0 <uart_init+0x194>)
1000c56a:	2010      	movs	r0, #16
1000c56c:	4c51      	ldr	r4, [pc, #324]	; (1000c6b4 <uart_init+0x198>)
1000c56e:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000c570:	4951      	ldr	r1, [pc, #324]	; (1000c6b8 <uart_init+0x19c>)
1000c572:	2011      	movs	r0, #17
1000c574:	47a0      	blx	r4
1000c576:	4b51      	ldr	r3, [pc, #324]	; (1000c6bc <uart_init+0x1a0>)
1000c578:	2201      	movs	r2, #1
1000c57a:	601a      	str	r2, [r3, #0]
1000c57c:	3201      	adds	r2, #1
1000c57e:	601a      	str	r2, [r3, #0]
1000c580:	e01a      	b.n	1000c5b8 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000c582:	4b4f      	ldr	r3, [pc, #316]	; (1000c6c0 <uart_init+0x1a4>)
1000c584:	4299      	cmp	r1, r3
1000c586:	d117      	bne.n	1000c5b8 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000c588:	200b      	movs	r0, #11
1000c58a:	4c46      	ldr	r4, [pc, #280]	; (1000c6a4 <uart_init+0x188>)
1000c58c:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000c58e:	200c      	movs	r0, #12
1000c590:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000c592:	200b      	movs	r0, #11
1000c594:	4c44      	ldr	r4, [pc, #272]	; (1000c6a8 <uart_init+0x18c>)
1000c596:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000c598:	200c      	movs	r0, #12
1000c59a:	47a0      	blx	r4
		_uart_instances[1] = module;
1000c59c:	4b43      	ldr	r3, [pc, #268]	; (1000c6ac <uart_init+0x190>)
1000c59e:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000c5a0:	4948      	ldr	r1, [pc, #288]	; (1000c6c4 <uart_init+0x1a8>)
1000c5a2:	2012      	movs	r0, #18
1000c5a4:	4c43      	ldr	r4, [pc, #268]	; (1000c6b4 <uart_init+0x198>)
1000c5a6:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000c5a8:	4947      	ldr	r1, [pc, #284]	; (1000c6c8 <uart_init+0x1ac>)
1000c5aa:	2013      	movs	r0, #19
1000c5ac:	47a0      	blx	r4
1000c5ae:	4b43      	ldr	r3, [pc, #268]	; (1000c6bc <uart_init+0x1a0>)
1000c5b0:	2204      	movs	r2, #4
1000c5b2:	601a      	str	r2, [r3, #0]
1000c5b4:	3204      	adds	r2, #4
1000c5b6:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000c5b8:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000c5ba:	2204      	movs	r2, #4
1000c5bc:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000c5be:	2b00      	cmp	r3, #0
1000c5c0:	d152      	bne.n	1000c668 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000c5c2:	3302      	adds	r3, #2
1000c5c4:	4698      	mov	r8, r3
1000c5c6:	e04f      	b.n	1000c668 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000c5c8:	8a31      	ldrh	r1, [r6, #16]
1000c5ca:	ce01      	ldmia	r6!, {r0}
1000c5cc:	b2c0      	uxtb	r0, r0
1000c5ce:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000c5d0:	3401      	adds	r4, #1
1000c5d2:	b2e4      	uxtb	r4, r4
1000c5d4:	4544      	cmp	r4, r8
1000c5d6:	d3f7      	bcc.n	1000c5c8 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c5d8:	682b      	ldr	r3, [r5, #0]
1000c5da:	7d1a      	ldrb	r2, [r3, #20]
1000c5dc:	07d2      	lsls	r2, r2, #31
1000c5de:	d504      	bpl.n	1000c5ea <uart_init+0xce>
1000c5e0:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000c5e2:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c5e4:	7d1a      	ldrb	r2, [r3, #20]
1000c5e6:	420a      	tst	r2, r1
1000c5e8:	d1fb      	bne.n	1000c5e2 <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000c5ea:	2100      	movs	r1, #0
1000c5ec:	2220      	movs	r2, #32
1000c5ee:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000c5f0:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000c5f2:	1e59      	subs	r1, r3, #1
1000c5f4:	418b      	sbcs	r3, r1
1000c5f6:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000c5f8:	793b      	ldrb	r3, [r7, #4]
1000c5fa:	797a      	ldrb	r2, [r7, #5]
1000c5fc:	4313      	orrs	r3, r2
1000c5fe:	430b      	orrs	r3, r1
	switch(config->parity) {
1000c600:	79ba      	ldrb	r2, [r7, #6]
1000c602:	2a02      	cmp	r2, #2
1000c604:	d00d      	beq.n	1000c622 <uart_init+0x106>
1000c606:	b2d1      	uxtb	r1, r2
1000c608:	2902      	cmp	r1, #2
1000c60a:	d802      	bhi.n	1000c612 <uart_init+0xf6>
1000c60c:	2a01      	cmp	r2, #1
1000c60e:	d005      	beq.n	1000c61c <uart_init+0x100>
1000c610:	e00f      	b.n	1000c632 <uart_init+0x116>
1000c612:	2a03      	cmp	r2, #3
1000c614:	d008      	beq.n	1000c628 <uart_init+0x10c>
1000c616:	2a04      	cmp	r2, #4
1000c618:	d009      	beq.n	1000c62e <uart_init+0x112>
1000c61a:	e00a      	b.n	1000c632 <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000c61c:	2202      	movs	r2, #2
1000c61e:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000c620:	e007      	b.n	1000c632 <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000c622:	2206      	movs	r2, #6
1000c624:	4313      	orrs	r3, r2
			break;
1000c626:	e004      	b.n	1000c632 <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000c628:	220a      	movs	r2, #10
1000c62a:	4313      	orrs	r3, r2
			break;
1000c62c:	e001      	b.n	1000c632 <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000c62e:	220e      	movs	r2, #14
1000c630:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000c632:	2220      	movs	r2, #32
1000c634:	6829      	ldr	r1, [r5, #0]
1000c636:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000c638:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000c63a:	4b24      	ldr	r3, [pc, #144]	; (1000c6cc <uart_init+0x1b0>)
1000c63c:	4798      	blx	r3
1000c63e:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000c640:	0031      	movs	r1, r6
1000c642:	4b23      	ldr	r3, [pc, #140]	; (1000c6d0 <uart_init+0x1b4>)
1000c644:	4798      	blx	r3
1000c646:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000c648:	0400      	lsls	r0, r0, #16
1000c64a:	0c00      	lsrs	r0, r0, #16
1000c64c:	4370      	muls	r0, r6
1000c64e:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000c650:	0931      	lsrs	r1, r6, #4
1000c652:	4288      	cmp	r0, r1
1000c654:	d906      	bls.n	1000c664 <uart_init+0x148>
1000c656:	2300      	movs	r3, #0
		i++;
1000c658:	3301      	adds	r3, #1
1000c65a:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000c65c:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000c65e:	4288      	cmp	r0, r1
1000c660:	d8fa      	bhi.n	1000c658 <uart_init+0x13c>
1000c662:	e007      	b.n	1000c674 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000c664:	2300      	movs	r3, #0
1000c666:	e005      	b.n	1000c674 <uart_init+0x158>
1000c668:	003e      	movs	r6, r7
1000c66a:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000c66c:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000c66e:	4b19      	ldr	r3, [pc, #100]	; (1000c6d4 <uart_init+0x1b8>)
1000c670:	4699      	mov	r9, r3
1000c672:	e7a9      	b.n	1000c5c8 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000c674:	2100      	movs	r1, #0
1000c676:	2028      	movs	r0, #40	; 0x28
1000c678:	682c      	ldr	r4, [r5, #0]
1000c67a:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000c67c:	3301      	adds	r3, #1
1000c67e:	071b      	lsls	r3, r3, #28
1000c680:	0f5b      	lsrs	r3, r3, #29
1000c682:	00d2      	lsls	r2, r2, #3
1000c684:	4313      	orrs	r3, r2
1000c686:	b29b      	uxth	r3, r3
1000c688:	682a      	ldr	r2, [r5, #0]
1000c68a:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000c68c:	682b      	ldr	r3, [r5, #0]
1000c68e:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000c690:	682b      	ldr	r3, [r5, #0]
1000c692:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000c694:	2000      	movs	r0, #0
1000c696:	bc0c      	pop	{r2, r3}
1000c698:	4690      	mov	r8, r2
1000c69a:	4699      	mov	r9, r3
1000c69c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c69e:	46c0      	nop			; (mov r8, r8)
1000c6a0:	40004000 	.word	0x40004000
1000c6a4:	10008c79 	.word	0x10008c79
1000c6a8:	1000891d 	.word	0x1000891d
1000c6ac:	100160c0 	.word	0x100160c0
1000c6b0:	1000c2c9 	.word	0x1000c2c9
1000c6b4:	100090e1 	.word	0x100090e1
1000c6b8:	1000c351 	.word	0x1000c351
1000c6bc:	e000e100 	.word	0xe000e100
1000c6c0:	40005000 	.word	0x40005000
1000c6c4:	1000c3dd 	.word	0x1000c3dd
1000c6c8:	1000c465 	.word	0x1000c465
1000c6cc:	10008911 	.word	0x10008911
1000c6d0:	1000fe9d 	.word	0x1000fe9d
1000c6d4:	1000856d 	.word	0x1000856d

1000c6d8 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000c6d8:	6802      	ldr	r2, [r0, #0]
1000c6da:	2001      	movs	r0, #1
1000c6dc:	7913      	ldrb	r3, [r2, #4]
1000c6de:	4203      	tst	r3, r0
1000c6e0:	d0fc      	beq.n	1000c6dc <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000c6e2:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000c6e4:	2000      	movs	r0, #0
1000c6e6:	4770      	bx	lr

1000c6e8 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000c6e8:	6802      	ldr	r2, [r0, #0]
1000c6ea:	2001      	movs	r0, #1
1000c6ec:	7d13      	ldrb	r3, [r2, #20]
1000c6ee:	4203      	tst	r3, r0
1000c6f0:	d0fc      	beq.n	1000c6ec <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000c6f2:	7c13      	ldrb	r3, [r2, #16]
1000c6f4:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000c6f6:	2000      	movs	r0, #0
1000c6f8:	4770      	bx	lr
1000c6fa:	46c0      	nop			; (mov r8, r8)

1000c6fc <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000c6fc:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000c6fe:	2a00      	cmp	r2, #0
1000c700:	d00d      	beq.n	1000c71e <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000c702:	330b      	adds	r3, #11
1000c704:	5cc3      	ldrb	r3, [r0, r3]
1000c706:	b2db      	uxtb	r3, r3
1000c708:	2b05      	cmp	r3, #5
1000c70a:	d008      	beq.n	1000c71e <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000c70c:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000c70e:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000c710:	2205      	movs	r2, #5
1000c712:	2322      	movs	r3, #34	; 0x22
1000c714:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000c716:	6803      	ldr	r3, [r0, #0]
1000c718:	3a04      	subs	r2, #4
1000c71a:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000c71c:	2300      	movs	r3, #0
}
1000c71e:	0018      	movs	r0, r3
1000c720:	4770      	bx	lr
1000c722:	46c0      	nop			; (mov r8, r8)

1000c724 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000c724:	0093      	lsls	r3, r2, #2
1000c726:	18c3      	adds	r3, r0, r3
1000c728:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000c72a:	2120      	movs	r1, #32
1000c72c:	2301      	movs	r3, #1
1000c72e:	4093      	lsls	r3, r2
1000c730:	5c42      	ldrb	r2, [r0, r1]
1000c732:	4313      	orrs	r3, r2
1000c734:	5443      	strb	r3, [r0, r1]
}
1000c736:	4770      	bx	lr

1000c738 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000c738:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000c73a:	2221      	movs	r2, #33	; 0x21
1000c73c:	2301      	movs	r3, #1
1000c73e:	408b      	lsls	r3, r1
1000c740:	5c84      	ldrb	r4, [r0, r2]
1000c742:	4323      	orrs	r3, r4
1000c744:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000c746:	2901      	cmp	r1, #1
1000c748:	d104      	bne.n	1000c754 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000c74a:	6802      	ldr	r2, [r0, #0]
1000c74c:	7a11      	ldrb	r1, [r2, #8]
1000c74e:	2320      	movs	r3, #32
1000c750:	430b      	orrs	r3, r1
1000c752:	7213      	strb	r3, [r2, #8]
	}
}
1000c754:	bd10      	pop	{r4, pc}
1000c756:	46c0      	nop			; (mov r8, r8)

1000c758 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000c758:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000c75a:	2201      	movs	r2, #1
1000c75c:	408a      	lsls	r2, r1
1000c75e:	2421      	movs	r4, #33	; 0x21
1000c760:	5d03      	ldrb	r3, [r0, r4]
1000c762:	4393      	bics	r3, r2
1000c764:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000c766:	2901      	cmp	r1, #1
1000c768:	d104      	bne.n	1000c774 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000c76a:	6802      	ldr	r2, [r0, #0]
1000c76c:	7a13      	ldrb	r3, [r2, #8]
1000c76e:	311f      	adds	r1, #31
1000c770:	438b      	bics	r3, r1
1000c772:	7213      	strb	r3, [r2, #8]
	}

}
1000c774:	bd10      	pop	{r4, pc}
1000c776:	46c0      	nop			; (mov r8, r8)

1000c778 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
1000c778:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000c77a:	4a06      	ldr	r2, [pc, #24]	; (1000c794 <_sbrk+0x1c>)
1000c77c:	6812      	ldr	r2, [r2, #0]
1000c77e:	2a00      	cmp	r2, #0
1000c780:	d102      	bne.n	1000c788 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
1000c782:	4905      	ldr	r1, [pc, #20]	; (1000c798 <_sbrk+0x20>)
1000c784:	4a03      	ldr	r2, [pc, #12]	; (1000c794 <_sbrk+0x1c>)
1000c786:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000c788:	4a02      	ldr	r2, [pc, #8]	; (1000c794 <_sbrk+0x1c>)
1000c78a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
1000c78c:	18c3      	adds	r3, r0, r3
1000c78e:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
1000c790:	4770      	bx	lr
1000c792:	46c0      	nop			; (mov r8, r8)
1000c794:	100152f4 	.word	0x100152f4
1000c798:	10016e48 	.word	0x10016e48

1000c79c <_close>:
}

extern int _close(int file)
{
	return -1;
}
1000c79c:	2001      	movs	r0, #1
1000c79e:	4240      	negs	r0, r0
1000c7a0:	4770      	bx	lr
1000c7a2:	46c0      	nop			; (mov r8, r8)

1000c7a4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000c7a4:	2380      	movs	r3, #128	; 0x80
1000c7a6:	019b      	lsls	r3, r3, #6
1000c7a8:	604b      	str	r3, [r1, #4]

	return 0;
}
1000c7aa:	2000      	movs	r0, #0
1000c7ac:	4770      	bx	lr
1000c7ae:	46c0      	nop			; (mov r8, r8)

1000c7b0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000c7b0:	2001      	movs	r0, #1
1000c7b2:	4770      	bx	lr

1000c7b4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
1000c7b4:	2000      	movs	r0, #0
1000c7b6:	4770      	bx	lr

1000c7b8 <resume_cb>:
    button_instance.btn1.char_value = 0;
}


static void resume_cb(void)
{
1000c7b8:	b510      	push	{r4, lr}
    init_port_list(); // re-initialize all ports
1000c7ba:	4b07      	ldr	r3, [pc, #28]	; (1000c7d8 <resume_cb+0x20>)
1000c7bc:	4798      	blx	r3
    serial_console_init(); // GPIO (UART) for the console
1000c7be:	4b07      	ldr	r3, [pc, #28]	; (1000c7dc <resume_cb+0x24>)
1000c7c0:	4798      	blx	r3
    sms_dualtimer_init();
1000c7c2:	4b07      	ldr	r3, [pc, #28]	; (1000c7e0 <resume_cb+0x28>)
1000c7c4:	4798      	blx	r3
    delay_init();
1000c7c6:	4b07      	ldr	r3, [pc, #28]	; (1000c7e4 <resume_cb+0x2c>)
1000c7c8:	4798      	blx	r3
    sms_button_configure_gpio(); // GPIO (AO_0 & AO_1) for the buttons
1000c7ca:	4b07      	ldr	r3, [pc, #28]	; (1000c7e8 <resume_cb+0x30>)
1000c7cc:	4798      	blx	r3
    sms_led_gpio_init();
1000c7ce:	4b07      	ldr	r3, [pc, #28]	; (1000c7ec <resume_cb+0x34>)
1000c7d0:	4798      	blx	r3
    //sms_mpu_configure_gpio();
    sms_monitor_configure_gpio();
1000c7d2:	4b07      	ldr	r3, [pc, #28]	; (1000c7f0 <resume_cb+0x38>)
1000c7d4:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000c7d6:	bd10      	pop	{r4, pc}
1000c7d8:	1000949d 	.word	0x1000949d
1000c7dc:	10009205 	.word	0x10009205
1000c7e0:	1000a739 	.word	0x1000a739
1000c7e4:	100080e9 	.word	0x100080e9
1000c7e8:	1000a205 	.word	0x1000a205
1000c7ec:	1000a67d 	.word	0x1000a67d
1000c7f0:	1000a585 	.word	0x1000a585

1000c7f4 <sms_init_variables>:
/*- Includes ---------------------------------------------------------------*/
#include "sms_remote1.h"

void sms_init_variables(void)
{
    timer1_current_mode = TIMER1_MODE_NONE;
1000c7f4:	2300      	movs	r3, #0
1000c7f6:	2200      	movs	r2, #0
1000c7f8:	490e      	ldr	r1, [pc, #56]	; (1000c834 <sms_init_variables+0x40>)
1000c7fa:	700b      	strb	r3, [r1, #0]
    timer2_current_mode = TIMER2_MODE_NONE;
1000c7fc:	490e      	ldr	r1, [pc, #56]	; (1000c838 <sms_init_variables+0x44>)
1000c7fe:	700b      	strb	r3, [r1, #0]
    sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000c800:	2101      	movs	r1, #1
1000c802:	480e      	ldr	r0, [pc, #56]	; (1000c83c <sms_init_variables+0x48>)
1000c804:	7001      	strb	r1, [r0, #0]
    ulp_ready = false;
1000c806:	480e      	ldr	r0, [pc, #56]	; (1000c840 <sms_init_variables+0x4c>)
1000c808:	7003      	strb	r3, [r0, #0]

	// BLE
    ble_current_state = BLE_STATE_POWEROFF;
1000c80a:	480e      	ldr	r0, [pc, #56]	; (1000c844 <sms_init_variables+0x50>)
1000c80c:	7003      	strb	r3, [r0, #0]
    sms_ble_send_cnt = 0;
1000c80e:	480e      	ldr	r0, [pc, #56]	; (1000c848 <sms_init_variables+0x54>)
1000c810:	8003      	strh	r3, [r0, #0]

	// button
    button_instance.current_state = BUTTON_STATE_NONE;
1000c812:	4b0e      	ldr	r3, [pc, #56]	; (1000c84c <sms_init_variables+0x58>)
1000c814:	2000      	movs	r0, #0
1000c816:	7358      	strb	r0, [r3, #13]
    button_instance.btn0.id = SMS_BTN_0;
1000c818:	701a      	strb	r2, [r3, #0]
    button_instance.btn0.gpio_pin = SMS_BTN_0_PIN;
1000c81a:	201f      	movs	r0, #31
1000c81c:	7058      	strb	r0, [r3, #1]
    button_instance.btn0.int_enabled = true;
1000c81e:	7099      	strb	r1, [r3, #2]
	button_instance.btn0.new_int = false;
1000c820:	70da      	strb	r2, [r3, #3]
    button_instance.btn0.char_value = 0;
1000c822:	715a      	strb	r2, [r3, #5]
    button_instance.btn1.id = SMS_BTN_1;
1000c824:	7199      	strb	r1, [r3, #6]
    button_instance.btn1.gpio_pin = SMS_BTN_1_PIN;
1000c826:	3802      	subs	r0, #2
1000c828:	71d8      	strb	r0, [r3, #7]
    button_instance.btn1.int_enabled = true;
1000c82a:	7219      	strb	r1, [r3, #8]
	button_instance.btn1.new_int = false;
1000c82c:	725a      	strb	r2, [r3, #9]
    button_instance.btn1.char_value = 0;
1000c82e:	72da      	strb	r2, [r3, #11]
}
1000c830:	4770      	bx	lr
1000c832:	46c0      	nop			; (mov r8, r8)
1000c834:	100157f4 	.word	0x100157f4
1000c838:	1001586b 	.word	0x1001586b
1000c83c:	100157f6 	.word	0x100157f6
1000c840:	100157f7 	.word	0x100157f7
1000c844:	10015864 	.word	0x10015864
1000c848:	10015874 	.word	0x10015874
1000c84c:	100157fc 	.word	0x100157fc

1000c850 <main>:
	//sms_current_interrupt.int_on = true;
//}


int main(void)
{
1000c850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* Define current BLE state
     * ------------------------ */
    ble_current_state = BLE_STATE_STARTING;
1000c852:	2210      	movs	r2, #16
1000c854:	4b58      	ldr	r3, [pc, #352]	; (1000c9b8 <main+0x168>)
1000c856:	701a      	strb	r2, [r3, #0]
    
    /* Initialize platform
     * ------------------- */
	platform_driver_init();
1000c858:	4b58      	ldr	r3, [pc, #352]	; (1000c9bc <main+0x16c>)
1000c85a:	4798      	blx	r3
	gpio_init(); // GPIO
1000c85c:	4b58      	ldr	r3, [pc, #352]	; (1000c9c0 <main+0x170>)
1000c85e:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000c860:	4b58      	ldr	r3, [pc, #352]	; (1000c9c4 <main+0x174>)
1000c862:	4798      	blx	r3
    
    /* Disable ULP
     * ----------- */
	acquire_sleep_lock();
1000c864:	4b58      	ldr	r3, [pc, #352]	; (1000c9c8 <main+0x178>)
1000c866:	4798      	blx	r3
    

    /* Initialize SMS flags
     * -------------------- */
    sms_init_variables();
1000c868:	4b58      	ldr	r3, [pc, #352]	; (1000c9cc <main+0x17c>)
1000c86a:	4798      	blx	r3
    
    
    /* Initialize hardware components
     * ------------------------------ */
    // Dualtimer
    sms_dualtimer_init();
1000c86c:	4b58      	ldr	r3, [pc, #352]	; (1000c9d0 <main+0x180>)
1000c86e:	4798      	blx	r3
	
    // Blocking delay (hacked from other SAM platforms)
    delay_init();
1000c870:	4b58      	ldr	r3, [pc, #352]	; (1000c9d4 <main+0x184>)
1000c872:	4798      	blx	r3

	// Buttons
    sms_button_configure_gpio();
1000c874:	4b58      	ldr	r3, [pc, #352]	; (1000c9d8 <main+0x188>)
1000c876:	4798      	blx	r3
    
    // LED
    sms_led_gpio_init();
1000c878:	4b58      	ldr	r3, [pc, #352]	; (1000c9dc <main+0x18c>)
1000c87a:	4798      	blx	r3
    
	// monitoring...
    sms_monitor_configure_gpio();
1000c87c:	4b58      	ldr	r3, [pc, #352]	; (1000c9e0 <main+0x190>)
1000c87e:	4798      	blx	r3
    
    /* Initialize the BLE module
     * ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address 
1000c880:	2000      	movs	r0, #0
1000c882:	4b58      	ldr	r3, [pc, #352]	; (1000c9e4 <main+0x194>)
1000c884:	4798      	blx	r3
	
    
    /* Define BLE services
     * ------------------- */
    sms_button_define_services();
1000c886:	4b58      	ldr	r3, [pc, #352]	; (1000c9e8 <main+0x198>)
1000c888:	4798      	blx	r3
    
    /* Register callbacks
     * ------------------ */
    // Recovering from ULP
    register_resume_callback(resume_cb); // register resume callback
1000c88a:	4858      	ldr	r0, [pc, #352]	; (1000c9ec <main+0x19c>)
1000c88c:	4b58      	ldr	r3, [pc, #352]	; (1000c9f0 <main+0x1a0>)
1000c88e:	4798      	blx	r3

    // Dualtimer (AON timer enables on registration... so do it later)    
    sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
1000c890:	4958      	ldr	r1, [pc, #352]	; (1000c9f4 <main+0x1a4>)
1000c892:	2000      	movs	r0, #0
1000c894:	4c58      	ldr	r4, [pc, #352]	; (1000c9f8 <main+0x1a8>)
1000c896:	47a0      	blx	r4
    sms_dualtimer_register_callback(DUALTIMER_TIMER2, sms_dualtimer2_cb); // LED blinking timer
1000c898:	4958      	ldr	r1, [pc, #352]	; (1000c9fc <main+0x1ac>)
1000c89a:	2001      	movs	r0, #1
1000c89c:	47a0      	blx	r4

    // Buttons
    sms_button_register_callbacks();
1000c89e:	4b58      	ldr	r3, [pc, #352]	; (1000ca00 <main+0x1b0>)
1000c8a0:	4798      	blx	r3
    
    // BLE
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000c8a2:	4a58      	ldr	r2, [pc, #352]	; (1000ca04 <main+0x1b4>)
1000c8a4:	2100      	movs	r1, #0
1000c8a6:	2000      	movs	r0, #0
1000c8a8:	4c57      	ldr	r4, [pc, #348]	; (1000ca08 <main+0x1b8>)
1000c8aa:	47a0      	blx	r4
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000c8ac:	4a57      	ldr	r2, [pc, #348]	; (1000ca0c <main+0x1bc>)
1000c8ae:	2102      	movs	r1, #2
1000c8b0:	2000      	movs	r0, #0
1000c8b2:	47a0      	blx	r4

    //ble_set_ulp_mode(BLE_ULP_MODE_SET);
    
    /* Enable buttons interrupts
     * ------------------------- */
    sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000c8b4:	2100      	movs	r1, #0
1000c8b6:	2000      	movs	r0, #0
1000c8b8:	4b55      	ldr	r3, [pc, #340]	; (1000ca10 <main+0x1c0>)
1000c8ba:	4798      	blx	r3
    //sms_sensors_interrupt_toggle(true, false);
    //while(1) {}
    
    /* Goto sleep
     * ---------- */
    sms_ble_power_down();
1000c8bc:	4b55      	ldr	r3, [pc, #340]	; (1000ca14 <main+0x1c4>)
1000c8be:	4798      	blx	r3

    
	while(true)
	{
		/* BLE Event task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000c8c0:	4d55      	ldr	r5, [pc, #340]	; (1000ca18 <main+0x1c8>)
		
		/* Sensor interrupt region */
		if(button_instance.btn0.new_int) {
1000c8c2:	4c56      	ldr	r4, [pc, #344]	; (1000ca1c <main+0x1cc>)
			acquire_sleep_lock();
1000c8c4:	4e40      	ldr	r6, [pc, #256]	; (1000c9c8 <main+0x178>)

    
	while(true)
	{
		/* BLE Event task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000c8c6:	2001      	movs	r0, #1
1000c8c8:	4240      	negs	r0, r0
1000c8ca:	47a8      	blx	r5
		
		/* Sensor interrupt region */
		if(button_instance.btn0.new_int) {
1000c8cc:	78e3      	ldrb	r3, [r4, #3]
1000c8ce:	2b00      	cmp	r3, #0
1000c8d0:	d017      	beq.n	1000c902 <main+0xb2>
			acquire_sleep_lock();
1000c8d2:	47b0      	blx	r6
			DBG_LOG_DEV("Waking up... Btn0 int");
1000c8d4:	4852      	ldr	r0, [pc, #328]	; (1000ca20 <main+0x1d0>)
1000c8d6:	4b53      	ldr	r3, [pc, #332]	; (1000ca24 <main+0x1d4>)
1000c8d8:	4798      	blx	r3
1000c8da:	4853      	ldr	r0, [pc, #332]	; (1000ca28 <main+0x1d8>)
1000c8dc:	4b53      	ldr	r3, [pc, #332]	; (1000ca2c <main+0x1dc>)
1000c8de:	4798      	blx	r3
			if(sms_button_fn(SMS_BTN_0) < 0) {
1000c8e0:	2000      	movs	r0, #0
1000c8e2:	4b53      	ldr	r3, [pc, #332]	; (1000ca30 <main+0x1e0>)
1000c8e4:	4798      	blx	r3
1000c8e6:	2800      	cmp	r0, #0
1000c8e8:	da05      	bge.n	1000c8f6 <main+0xa6>
				DBG_LOG_DEV("Error in sms_button_fn()");
1000c8ea:	484d      	ldr	r0, [pc, #308]	; (1000ca20 <main+0x1d0>)
1000c8ec:	4b4d      	ldr	r3, [pc, #308]	; (1000ca24 <main+0x1d4>)
1000c8ee:	4798      	blx	r3
1000c8f0:	4850      	ldr	r0, [pc, #320]	; (1000ca34 <main+0x1e4>)
1000c8f2:	4b4e      	ldr	r3, [pc, #312]	; (1000ca2c <main+0x1dc>)
1000c8f4:	4798      	blx	r3
			}
			// here
			button_instance.btn0.new_int = false;
1000c8f6:	2200      	movs	r2, #0
1000c8f8:	4b48      	ldr	r3, [pc, #288]	; (1000ca1c <main+0x1cc>)
1000c8fa:	70da      	strb	r2, [r3, #3]
			DBG_LOG_CONT_DEV("done");
1000c8fc:	484e      	ldr	r0, [pc, #312]	; (1000ca38 <main+0x1e8>)
1000c8fe:	4b4b      	ldr	r3, [pc, #300]	; (1000ca2c <main+0x1dc>)
1000c900:	4798      	blx	r3
		}
		if(button_instance.btn1.new_int) {
1000c902:	4b46      	ldr	r3, [pc, #280]	; (1000ca1c <main+0x1cc>)
1000c904:	7a5b      	ldrb	r3, [r3, #9]
1000c906:	2b00      	cmp	r3, #0
1000c908:	d018      	beq.n	1000c93c <main+0xec>
			acquire_sleep_lock();
1000c90a:	4b2f      	ldr	r3, [pc, #188]	; (1000c9c8 <main+0x178>)
1000c90c:	4798      	blx	r3
			DBG_LOG_DEV("Waking up... Btn1 int");
1000c90e:	4844      	ldr	r0, [pc, #272]	; (1000ca20 <main+0x1d0>)
1000c910:	4b44      	ldr	r3, [pc, #272]	; (1000ca24 <main+0x1d4>)
1000c912:	4798      	blx	r3
1000c914:	4849      	ldr	r0, [pc, #292]	; (1000ca3c <main+0x1ec>)
1000c916:	4b45      	ldr	r3, [pc, #276]	; (1000ca2c <main+0x1dc>)
1000c918:	4798      	blx	r3
			if(sms_button_fn(SMS_BTN_1) < 0) {
1000c91a:	2001      	movs	r0, #1
1000c91c:	4b44      	ldr	r3, [pc, #272]	; (1000ca30 <main+0x1e0>)
1000c91e:	4798      	blx	r3
1000c920:	2800      	cmp	r0, #0
1000c922:	da05      	bge.n	1000c930 <main+0xe0>
				DBG_LOG_DEV("Error in sms_button_fn()");
1000c924:	483e      	ldr	r0, [pc, #248]	; (1000ca20 <main+0x1d0>)
1000c926:	4b3f      	ldr	r3, [pc, #252]	; (1000ca24 <main+0x1d4>)
1000c928:	4798      	blx	r3
1000c92a:	4842      	ldr	r0, [pc, #264]	; (1000ca34 <main+0x1e4>)
1000c92c:	4b3f      	ldr	r3, [pc, #252]	; (1000ca2c <main+0x1dc>)
1000c92e:	4798      	blx	r3
			}
			// here
			button_instance.btn1.new_int = false;
1000c930:	2200      	movs	r2, #0
1000c932:	4b3a      	ldr	r3, [pc, #232]	; (1000ca1c <main+0x1cc>)
1000c934:	725a      	strb	r2, [r3, #9]
			DBG_LOG_CONT_DEV("done");
1000c936:	4840      	ldr	r0, [pc, #256]	; (1000ca38 <main+0x1e8>)
1000c938:	4b3c      	ldr	r3, [pc, #240]	; (1000ca2c <main+0x1dc>)
1000c93a:	4798      	blx	r3
		}

		/* Timer interrupt region */
		if(timer1_instance.new_int) {
1000c93c:	4b40      	ldr	r3, [pc, #256]	; (1000ca40 <main+0x1f0>)
1000c93e:	789b      	ldrb	r3, [r3, #2]
1000c940:	2b00      	cmp	r3, #0
1000c942:	d00f      	beq.n	1000c964 <main+0x114>
			DBG_LOG_DEV("Timer1 int... ");
1000c944:	4836      	ldr	r0, [pc, #216]	; (1000ca20 <main+0x1d0>)
1000c946:	4b37      	ldr	r3, [pc, #220]	; (1000ca24 <main+0x1d4>)
1000c948:	4798      	blx	r3
1000c94a:	483e      	ldr	r0, [pc, #248]	; (1000ca44 <main+0x1f4>)
1000c94c:	4f37      	ldr	r7, [pc, #220]	; (1000ca2c <main+0x1dc>)
1000c94e:	47b8      	blx	r7
			sms_dualtimer_stop(DUALTIMER_TIMER1);
1000c950:	2000      	movs	r0, #0
1000c952:	4b3d      	ldr	r3, [pc, #244]	; (1000ca48 <main+0x1f8>)
1000c954:	4798      	blx	r3
			sms_dualtimer1_fn();
1000c956:	4b3d      	ldr	r3, [pc, #244]	; (1000ca4c <main+0x1fc>)
1000c958:	4798      	blx	r3
			DBG_LOG_CONT_DEV("done");
1000c95a:	4837      	ldr	r0, [pc, #220]	; (1000ca38 <main+0x1e8>)
1000c95c:	47b8      	blx	r7
			timer1_instance.new_int = false;
1000c95e:	2200      	movs	r2, #0
1000c960:	4b37      	ldr	r3, [pc, #220]	; (1000ca40 <main+0x1f0>)
1000c962:	709a      	strb	r2, [r3, #2]
		}
		if(timer2_instance.new_int) {
1000c964:	4b3a      	ldr	r3, [pc, #232]	; (1000ca50 <main+0x200>)
1000c966:	789b      	ldrb	r3, [r3, #2]
1000c968:	2b00      	cmp	r3, #0
1000c96a:	d00f      	beq.n	1000c98c <main+0x13c>
			DBG_LOG_DEV("Timer2 int... ");
1000c96c:	482c      	ldr	r0, [pc, #176]	; (1000ca20 <main+0x1d0>)
1000c96e:	4b2d      	ldr	r3, [pc, #180]	; (1000ca24 <main+0x1d4>)
1000c970:	4798      	blx	r3
1000c972:	4838      	ldr	r0, [pc, #224]	; (1000ca54 <main+0x204>)
1000c974:	4f2d      	ldr	r7, [pc, #180]	; (1000ca2c <main+0x1dc>)
1000c976:	47b8      	blx	r7
			sms_dualtimer_stop(DUALTIMER_TIMER2);
1000c978:	2001      	movs	r0, #1
1000c97a:	4b33      	ldr	r3, [pc, #204]	; (1000ca48 <main+0x1f8>)
1000c97c:	4798      	blx	r3
			sms_dualtimer2_fn();
1000c97e:	4b36      	ldr	r3, [pc, #216]	; (1000ca58 <main+0x208>)
1000c980:	4798      	blx	r3
			DBG_LOG_CONT_DEV("done");
1000c982:	482d      	ldr	r0, [pc, #180]	; (1000ca38 <main+0x1e8>)
1000c984:	47b8      	blx	r7
			timer2_instance.new_int = false;
1000c986:	2200      	movs	r2, #0
1000c988:	4b31      	ldr	r3, [pc, #196]	; (1000ca50 <main+0x200>)
1000c98a:	709a      	strb	r2, [r3, #2]
		}
		
		/* ULP management */
		if(ulp_ready) {
1000c98c:	4b33      	ldr	r3, [pc, #204]	; (1000ca5c <main+0x20c>)
1000c98e:	781b      	ldrb	r3, [r3, #0]
1000c990:	2b00      	cmp	r3, #0
1000c992:	d008      	beq.n	1000c9a6 <main+0x156>
			DBG_LOG_DEV("Going to sleep...");
1000c994:	4822      	ldr	r0, [pc, #136]	; (1000ca20 <main+0x1d0>)
1000c996:	4b23      	ldr	r3, [pc, #140]	; (1000ca24 <main+0x1d4>)
1000c998:	4798      	blx	r3
1000c99a:	4831      	ldr	r0, [pc, #196]	; (1000ca60 <main+0x210>)
1000c99c:	4b23      	ldr	r3, [pc, #140]	; (1000ca2c <main+0x1dc>)
1000c99e:	4798      	blx	r3
			release_sleep_lock();
1000c9a0:	4b30      	ldr	r3, [pc, #192]	; (1000ca64 <main+0x214>)
1000c9a2:	4798      	blx	r3
1000c9a4:	e78f      	b.n	1000c8c6 <main+0x76>
		}
		else {
			DBG_LOG_DEV("NOT tired!");
1000c9a6:	481e      	ldr	r0, [pc, #120]	; (1000ca20 <main+0x1d0>)
1000c9a8:	4b1e      	ldr	r3, [pc, #120]	; (1000ca24 <main+0x1d4>)
1000c9aa:	4798      	blx	r3
1000c9ac:	482e      	ldr	r0, [pc, #184]	; (1000ca68 <main+0x218>)
1000c9ae:	4b1f      	ldr	r3, [pc, #124]	; (1000ca2c <main+0x1dc>)
1000c9b0:	4798      	blx	r3
			acquire_sleep_lock();
1000c9b2:	4b05      	ldr	r3, [pc, #20]	; (1000c9c8 <main+0x178>)
1000c9b4:	4798      	blx	r3
1000c9b6:	e786      	b.n	1000c8c6 <main+0x76>
1000c9b8:	10015864 	.word	0x10015864
1000c9bc:	10009511 	.word	0x10009511
1000c9c0:	10008821 	.word	0x10008821
1000c9c4:	10009205 	.word	0x10009205
1000c9c8:	10009a65 	.word	0x10009a65
1000c9cc:	1000c7f5 	.word	0x1000c7f5
1000c9d0:	1000a739 	.word	0x1000a739
1000c9d4:	100080e9 	.word	0x100080e9
1000c9d8:	1000a205 	.word	0x1000a205
1000c9dc:	1000a67d 	.word	0x1000a67d
1000c9e0:	1000a585 	.word	0x1000a585
1000c9e4:	1000b9cd 	.word	0x1000b9cd
1000c9e8:	1000a51d 	.word	0x1000a51d
1000c9ec:	1000c7b9 	.word	0x1000c7b9
1000c9f0:	10009aa9 	.word	0x10009aa9
1000c9f4:	1000a7f9 	.word	0x1000a7f9
1000c9f8:	1000a775 	.word	0x1000a775
1000c9fc:	1000a819 	.word	0x1000a819
1000ca00:	1000a2b5 	.word	0x1000a2b5
1000ca04:	10012748 	.word	0x10012748
1000ca08:	1000b8fd 	.word	0x1000b8fd
1000ca0c:	10012794 	.word	0x10012794
1000ca10:	1000a4d5 	.word	0x1000a4d5
1000ca14:	10009d35 	.word	0x10009d35
1000ca18:	1000c1c5 	.word	0x1000c1c5
1000ca1c:	100157fc 	.word	0x100157fc
1000ca20:	100123b4 	.word	0x100123b4
1000ca24:	100110e9 	.word	0x100110e9
1000ca28:	100136d8 	.word	0x100136d8
1000ca2c:	10010fc9 	.word	0x10010fc9
1000ca30:	1000a329 	.word	0x1000a329
1000ca34:	100136f0 	.word	0x100136f0
1000ca38:	1001370c 	.word	0x1001370c
1000ca3c:	10013714 	.word	0x10013714
1000ca40:	1001585c 	.word	0x1001585c
1000ca44:	1001372c 	.word	0x1001372c
1000ca48:	1000a7ed 	.word	0x1000a7ed
1000ca4c:	1000a839 	.word	0x1000a839
1000ca50:	10015868 	.word	0x10015868
1000ca54:	1001373c 	.word	0x1001373c
1000ca58:	1000aa45 	.word	0x1000aa45
1000ca5c:	100157f7 	.word	0x100157f7
1000ca60:	1001374c 	.word	0x1001374c
1000ca64:	10009a8d 	.word	0x10009a8d
1000ca68:	10013760 	.word	0x10013760

1000ca6c <internal_event_post>:
1000ca6c:	b570      	push	{r4, r5, r6, lr}
1000ca6e:	4d12      	ldr	r5, [pc, #72]	; (1000cab8 <internal_event_post+0x4c>)
1000ca70:	682c      	ldr	r4, [r5, #0]
1000ca72:	2c00      	cmp	r4, #0
1000ca74:	d014      	beq.n	1000caa0 <internal_event_post+0x34>
1000ca76:	6826      	ldr	r6, [r4, #0]
1000ca78:	60e2      	str	r2, [r4, #12]
1000ca7a:	602e      	str	r6, [r5, #0]
1000ca7c:	2500      	movs	r5, #0
1000ca7e:	4a0f      	ldr	r2, [pc, #60]	; (1000cabc <internal_event_post+0x50>)
1000ca80:	8123      	strh	r3, [r4, #8]
1000ca82:	6813      	ldr	r3, [r2, #0]
1000ca84:	6025      	str	r5, [r4, #0]
1000ca86:	80a0      	strh	r0, [r4, #4]
1000ca88:	80e1      	strh	r1, [r4, #6]
1000ca8a:	42ab      	cmp	r3, r5
1000ca8c:	d101      	bne.n	1000ca92 <internal_event_post+0x26>
1000ca8e:	6014      	str	r4, [r2, #0]
1000ca90:	e011      	b.n	1000cab6 <internal_event_post+0x4a>
1000ca92:	681a      	ldr	r2, [r3, #0]
1000ca94:	2a00      	cmp	r2, #0
1000ca96:	d001      	beq.n	1000ca9c <internal_event_post+0x30>
1000ca98:	1c13      	adds	r3, r2, #0
1000ca9a:	e7fa      	b.n	1000ca92 <internal_event_post+0x26>
1000ca9c:	601c      	str	r4, [r3, #0]
1000ca9e:	e00a      	b.n	1000cab6 <internal_event_post+0x4a>
1000caa0:	b2c4      	uxtb	r4, r0
1000caa2:	2c00      	cmp	r4, #0
1000caa4:	d107      	bne.n	1000cab6 <internal_event_post+0x4a>
1000caa6:	4c06      	ldr	r4, [pc, #24]	; (1000cac0 <internal_event_post+0x54>)
1000caa8:	60e2      	str	r2, [r4, #12]
1000caaa:	2201      	movs	r2, #1
1000caac:	8123      	strh	r3, [r4, #8]
1000caae:	4b05      	ldr	r3, [pc, #20]	; (1000cac4 <internal_event_post+0x58>)
1000cab0:	80a0      	strh	r0, [r4, #4]
1000cab2:	80e1      	strh	r1, [r4, #6]
1000cab4:	701a      	strb	r2, [r3, #0]
1000cab6:	bd70      	pop	{r4, r5, r6, pc}
1000cab8:	10015310 	.word	0x10015310
1000cabc:	1001530c 	.word	0x1001530c
1000cac0:	100152f8 	.word	0x100152f8
1000cac4:	10015308 	.word	0x10015308

1000cac8 <internal_event_init>:
1000cac8:	b510      	push	{r4, lr}
1000caca:	4b08      	ldr	r3, [pc, #32]	; (1000caec <internal_event_init+0x24>)
1000cacc:	0900      	lsrs	r0, r0, #4
1000cace:	0100      	lsls	r0, r0, #4
1000cad0:	681a      	ldr	r2, [r3, #0]
1000cad2:	1808      	adds	r0, r1, r0
1000cad4:	4281      	cmp	r1, r0
1000cad6:	d003      	beq.n	1000cae0 <internal_event_init+0x18>
1000cad8:	600a      	str	r2, [r1, #0]
1000cada:	1c0a      	adds	r2, r1, #0
1000cadc:	3110      	adds	r1, #16
1000cade:	e7f9      	b.n	1000cad4 <internal_event_init+0xc>
1000cae0:	601a      	str	r2, [r3, #0]
1000cae2:	2200      	movs	r2, #0
1000cae4:	4b02      	ldr	r3, [pc, #8]	; (1000caf0 <internal_event_init+0x28>)
1000cae6:	601a      	str	r2, [r3, #0]
1000cae8:	bd10      	pop	{r4, pc}
1000caea:	46c0      	nop			; (mov r8, r8)
1000caec:	10015310 	.word	0x10015310
1000caf0:	1001530c 	.word	0x1001530c

1000caf4 <special_events_handler>:
1000caf4:	b538      	push	{r3, r4, r5, lr}
1000caf6:	4c1b      	ldr	r4, [pc, #108]	; (1000cb64 <special_events_handler+0x70>)
1000caf8:	1c03      	adds	r3, r0, #0
1000cafa:	8825      	ldrh	r5, [r4, #0]
1000cafc:	1c08      	adds	r0, r1, #0
1000cafe:	1c21      	adds	r1, r4, #0
1000cb00:	429d      	cmp	r5, r3
1000cb02:	d107      	bne.n	1000cb14 <special_events_handler+0x20>
1000cb04:	88a5      	ldrh	r5, [r4, #4]
1000cb06:	4285      	cmp	r5, r0
1000cb08:	d104      	bne.n	1000cb14 <special_events_handler+0x20>
1000cb0a:	2301      	movs	r3, #1
1000cb0c:	425b      	negs	r3, r3
1000cb0e:	8023      	strh	r3, [r4, #0]
1000cb10:	60a2      	str	r2, [r4, #8]
1000cb12:	e009      	b.n	1000cb28 <special_events_handler+0x34>
1000cb14:	884c      	ldrh	r4, [r1, #2]
1000cb16:	429c      	cmp	r4, r3
1000cb18:	d10a      	bne.n	1000cb30 <special_events_handler+0x3c>
1000cb1a:	888c      	ldrh	r4, [r1, #4]
1000cb1c:	4284      	cmp	r4, r0
1000cb1e:	d107      	bne.n	1000cb30 <special_events_handler+0x3c>
1000cb20:	2301      	movs	r3, #1
1000cb22:	425b      	negs	r3, r3
1000cb24:	804b      	strh	r3, [r1, #2]
1000cb26:	608a      	str	r2, [r1, #8]
1000cb28:	4b0f      	ldr	r3, [pc, #60]	; (1000cb68 <special_events_handler+0x74>)
1000cb2a:	4798      	blx	r3
1000cb2c:	2001      	movs	r0, #1
1000cb2e:	e017      	b.n	1000cb60 <special_events_handler+0x6c>
1000cb30:	490e      	ldr	r1, [pc, #56]	; (1000cb6c <special_events_handler+0x78>)
1000cb32:	428b      	cmp	r3, r1
1000cb34:	d00e      	beq.n	1000cb54 <special_events_handler+0x60>
1000cb36:	490e      	ldr	r1, [pc, #56]	; (1000cb70 <special_events_handler+0x7c>)
1000cb38:	428b      	cmp	r3, r1
1000cb3a:	d007      	beq.n	1000cb4c <special_events_handler+0x58>
1000cb3c:	490d      	ldr	r1, [pc, #52]	; (1000cb74 <special_events_handler+0x80>)
1000cb3e:	2000      	movs	r0, #0
1000cb40:	428b      	cmp	r3, r1
1000cb42:	d10d      	bne.n	1000cb60 <special_events_handler+0x6c>
1000cb44:	1c10      	adds	r0, r2, #0
1000cb46:	4b0c      	ldr	r3, [pc, #48]	; (1000cb78 <special_events_handler+0x84>)
1000cb48:	4798      	blx	r3
1000cb4a:	e7ef      	b.n	1000cb2c <special_events_handler+0x38>
1000cb4c:	1c11      	adds	r1, r2, #0
1000cb4e:	4b0b      	ldr	r3, [pc, #44]	; (1000cb7c <special_events_handler+0x88>)
1000cb50:	2200      	movs	r2, #0
1000cb52:	e002      	b.n	1000cb5a <special_events_handler+0x66>
1000cb54:	1c11      	adds	r1, r2, #0
1000cb56:	2200      	movs	r2, #0
1000cb58:	4b09      	ldr	r3, [pc, #36]	; (1000cb80 <special_events_handler+0x8c>)
1000cb5a:	4798      	blx	r3
1000cb5c:	4243      	negs	r3, r0
1000cb5e:	4158      	adcs	r0, r3
1000cb60:	bd38      	pop	{r3, r4, r5, pc}
1000cb62:	46c0      	nop			; (mov r8, r8)
1000cb64:	100160c8 	.word	0x100160c8
1000cb68:	1000e551 	.word	0x1000e551
1000cb6c:	00000e13 	.word	0x00000e13
1000cb70:	00000e15 	.word	0x00000e15
1000cb74:	00000e01 	.word	0x00000e01
1000cb78:	1000e8c1 	.word	0x1000e8c1
1000cb7c:	1000ea81 	.word	0x1000ea81
1000cb80:	1000eb59 	.word	0x1000eb59

1000cb84 <at_ble_event_get>:
1000cb84:	2300      	movs	r3, #0
1000cb86:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cb88:	b087      	sub	sp, #28
1000cb8a:	9204      	str	r2, [sp, #16]
1000cb8c:	7003      	strb	r3, [r0, #0]
1000cb8e:	9b04      	ldr	r3, [sp, #16]
1000cb90:	9003      	str	r0, [sp, #12]
1000cb92:	3b01      	subs	r3, #1
1000cb94:	1c0d      	adds	r5, r1, #0
1000cb96:	9305      	str	r3, [sp, #20]
1000cb98:	3303      	adds	r3, #3
1000cb9a:	d802      	bhi.n	1000cba2 <at_ble_event_get+0x1e>
1000cb9c:	9804      	ldr	r0, [sp, #16]
1000cb9e:	4bae      	ldr	r3, [pc, #696]	; (1000ce58 <at_ble_event_get+0x2d4>)
1000cba0:	4798      	blx	r3
1000cba2:	9b05      	ldr	r3, [sp, #20]
1000cba4:	4cad      	ldr	r4, [pc, #692]	; (1000ce5c <at_ble_event_get+0x2d8>)
1000cba6:	3303      	adds	r3, #3
1000cba8:	d902      	bls.n	1000cbb0 <at_ble_event_get+0x2c>
1000cbaa:	2300      	movs	r3, #0
1000cbac:	9302      	str	r3, [sp, #8]
1000cbae:	e015      	b.n	1000cbdc <at_ble_event_get+0x58>
1000cbb0:	2300      	movs	r3, #0
1000cbb2:	9302      	str	r3, [sp, #8]
1000cbb4:	6823      	ldr	r3, [r4, #0]
1000cbb6:	2b00      	cmp	r3, #0
1000cbb8:	d113      	bne.n	1000cbe2 <at_ble_event_get+0x5e>
1000cbba:	9b02      	ldr	r3, [sp, #8]
1000cbbc:	2bd0      	cmp	r3, #208	; 0xd0
1000cbbe:	d100      	bne.n	1000cbc2 <at_ble_event_get+0x3e>
1000cbc0:	e2da      	b.n	1000d178 <at_ble_event_get+0x5f4>
1000cbc2:	9804      	ldr	r0, [sp, #16]
1000cbc4:	4ba6      	ldr	r3, [pc, #664]	; (1000ce60 <at_ble_event_get+0x2dc>)
1000cbc6:	4798      	blx	r3
1000cbc8:	9002      	str	r0, [sp, #8]
1000cbca:	2802      	cmp	r0, #2
1000cbcc:	d1f2      	bne.n	1000cbb4 <at_ble_event_get+0x30>
1000cbce:	e03f      	b.n	1000cc50 <at_ble_event_get+0xcc>
1000cbd0:	9804      	ldr	r0, [sp, #16]
1000cbd2:	4ba3      	ldr	r3, [pc, #652]	; (1000ce60 <at_ble_event_get+0x2dc>)
1000cbd4:	4798      	blx	r3
1000cbd6:	9002      	str	r0, [sp, #8]
1000cbd8:	2802      	cmp	r0, #2
1000cbda:	d039      	beq.n	1000cc50 <at_ble_event_get+0xcc>
1000cbdc:	6823      	ldr	r3, [r4, #0]
1000cbde:	2b00      	cmp	r3, #0
1000cbe0:	d0f6      	beq.n	1000cbd0 <at_ble_event_get+0x4c>
1000cbe2:	9b02      	ldr	r3, [sp, #8]
1000cbe4:	2bd0      	cmp	r3, #208	; 0xd0
1000cbe6:	d100      	bne.n	1000cbea <at_ble_event_get+0x66>
1000cbe8:	e2c6      	b.n	1000d178 <at_ble_event_get+0x5f4>
1000cbea:	9b02      	ldr	r3, [sp, #8]
1000cbec:	3b03      	subs	r3, #3
1000cbee:	1e5a      	subs	r2, r3, #1
1000cbf0:	4193      	sbcs	r3, r2
1000cbf2:	9a02      	ldr	r2, [sp, #8]
1000cbf4:	425b      	negs	r3, r3
1000cbf6:	401a      	ands	r2, r3
1000cbf8:	6823      	ldr	r3, [r4, #0]
1000cbfa:	9202      	str	r2, [sp, #8]
1000cbfc:	2b00      	cmp	r3, #0
1000cbfe:	d100      	bne.n	1000cc02 <at_ble_event_get+0x7e>
1000cc00:	e2c2      	b.n	1000d188 <at_ble_event_get+0x604>
1000cc02:	681a      	ldr	r2, [r3, #0]
1000cc04:	68de      	ldr	r6, [r3, #12]
1000cc06:	6022      	str	r2, [r4, #0]
1000cc08:	88da      	ldrh	r2, [r3, #6]
1000cc0a:	9201      	str	r2, [sp, #4]
1000cc0c:	4a95      	ldr	r2, [pc, #596]	; (1000ce64 <at_ble_event_get+0x2e0>)
1000cc0e:	889c      	ldrh	r4, [r3, #4]
1000cc10:	6811      	ldr	r1, [r2, #0]
1000cc12:	6013      	str	r3, [r2, #0]
1000cc14:	6019      	str	r1, [r3, #0]
1000cc16:	4b94      	ldr	r3, [pc, #592]	; (1000ce68 <at_ble_event_get+0x2e4>)
1000cc18:	781b      	ldrb	r3, [r3, #0]
1000cc1a:	2b01      	cmp	r3, #1
1000cc1c:	d10f      	bne.n	1000cc3e <at_ble_event_get+0xba>
1000cc1e:	4b93      	ldr	r3, [pc, #588]	; (1000ce6c <at_ble_event_get+0x2e8>)
1000cc20:	4a92      	ldr	r2, [pc, #584]	; (1000ce6c <at_ble_event_get+0x2e8>)
1000cc22:	8898      	ldrh	r0, [r3, #4]
1000cc24:	88d9      	ldrh	r1, [r3, #6]
1000cc26:	68d2      	ldr	r2, [r2, #12]
1000cc28:	891b      	ldrh	r3, [r3, #8]
1000cc2a:	4f91      	ldr	r7, [pc, #580]	; (1000ce70 <at_ble_event_get+0x2ec>)
1000cc2c:	47b8      	blx	r7
1000cc2e:	2210      	movs	r2, #16
1000cc30:	4b90      	ldr	r3, [pc, #576]	; (1000ce74 <at_ble_event_get+0x2f0>)
1000cc32:	488e      	ldr	r0, [pc, #568]	; (1000ce6c <at_ble_event_get+0x2e8>)
1000cc34:	2100      	movs	r1, #0
1000cc36:	4798      	blx	r3
1000cc38:	2300      	movs	r3, #0
1000cc3a:	4a8b      	ldr	r2, [pc, #556]	; (1000ce68 <at_ble_event_get+0x2e4>)
1000cc3c:	7013      	strb	r3, [r2, #0]
1000cc3e:	9b02      	ldr	r3, [sp, #8]
1000cc40:	2b00      	cmp	r3, #0
1000cc42:	d114      	bne.n	1000cc6e <at_ble_event_get+0xea>
1000cc44:	4b8c      	ldr	r3, [pc, #560]	; (1000ce78 <at_ble_event_get+0x2f4>)
1000cc46:	429c      	cmp	r4, r3
1000cc48:	d009      	beq.n	1000cc5e <at_ble_event_get+0xda>
1000cc4a:	4b8c      	ldr	r3, [pc, #560]	; (1000ce7c <at_ble_event_get+0x2f8>)
1000cc4c:	429c      	cmp	r4, r3
1000cc4e:	d127      	bne.n	1000cca0 <at_ble_event_get+0x11c>
1000cc50:	233a      	movs	r3, #58	; 0x3a
1000cc52:	9a03      	ldr	r2, [sp, #12]
1000cc54:	7013      	strb	r3, [r2, #0]
1000cc56:	2300      	movs	r3, #0
1000cc58:	9302      	str	r3, [sp, #8]
1000cc5a:	1c1d      	adds	r5, r3, #0
1000cc5c:	e007      	b.n	1000cc6e <at_ble_event_get+0xea>
1000cc5e:	9b01      	ldr	r3, [sp, #4]
1000cc60:	42a3      	cmp	r3, r4
1000cc62:	d000      	beq.n	1000cc66 <at_ble_event_get+0xe2>
1000cc64:	e28a      	b.n	1000d17c <at_ble_event_get+0x5f8>
1000cc66:	2338      	movs	r3, #56	; 0x38
1000cc68:	9a03      	ldr	r2, [sp, #12]
1000cc6a:	7013      	strb	r3, [r2, #0]
1000cc6c:	602e      	str	r6, [r5, #0]
1000cc6e:	9b03      	ldr	r3, [sp, #12]
1000cc70:	781b      	ldrb	r3, [r3, #0]
1000cc72:	2b3b      	cmp	r3, #59	; 0x3b
1000cc74:	d101      	bne.n	1000cc7a <at_ble_event_get+0xf6>
1000cc76:	4b82      	ldr	r3, [pc, #520]	; (1000ce80 <at_ble_event_get+0x2fc>)
1000cc78:	4798      	blx	r3
1000cc7a:	9b03      	ldr	r3, [sp, #12]
1000cc7c:	781b      	ldrb	r3, [r3, #0]
1000cc7e:	2b3b      	cmp	r3, #59	; 0x3b
1000cc80:	d003      	beq.n	1000cc8a <at_ble_event_get+0x106>
1000cc82:	9b05      	ldr	r3, [sp, #20]
1000cc84:	3303      	adds	r3, #3
1000cc86:	d904      	bls.n	1000cc92 <at_ble_event_get+0x10e>
1000cc88:	e283      	b.n	1000d192 <at_ble_event_get+0x60e>
1000cc8a:	9b02      	ldr	r3, [sp, #8]
1000cc8c:	2b00      	cmp	r3, #0
1000cc8e:	d088      	beq.n	1000cba2 <at_ble_event_get+0x1e>
1000cc90:	e7f7      	b.n	1000cc82 <at_ble_event_get+0xfe>
1000cc92:	9b02      	ldr	r3, [sp, #8]
1000cc94:	2bd0      	cmp	r3, #208	; 0xd0
1000cc96:	d100      	bne.n	1000cc9a <at_ble_event_get+0x116>
1000cc98:	e27b      	b.n	1000d192 <at_ble_event_get+0x60e>
1000cc9a:	4b7a      	ldr	r3, [pc, #488]	; (1000ce84 <at_ble_event_get+0x300>)
1000cc9c:	4798      	blx	r3
1000cc9e:	e278      	b.n	1000d192 <at_ble_event_get+0x60e>
1000cca0:	9b01      	ldr	r3, [sp, #4]
1000cca2:	2bbb      	cmp	r3, #187	; 0xbb
1000cca4:	d125      	bne.n	1000ccf2 <at_ble_event_get+0x16e>
1000cca6:	2cbb      	cmp	r4, #187	; 0xbb
1000cca8:	d123      	bne.n	1000ccf2 <at_ble_event_get+0x16e>
1000ccaa:	466b      	mov	r3, sp
1000ccac:	891b      	ldrh	r3, [r3, #8]
1000ccae:	80ab      	strh	r3, [r5, #4]
1000ccb0:	78b3      	ldrb	r3, [r6, #2]
1000ccb2:	7872      	ldrb	r2, [r6, #1]
1000ccb4:	78f0      	ldrb	r0, [r6, #3]
1000ccb6:	021b      	lsls	r3, r3, #8
1000ccb8:	4313      	orrs	r3, r2
1000ccba:	7971      	ldrb	r1, [r6, #5]
1000ccbc:	7932      	ldrb	r2, [r6, #4]
1000ccbe:	70a8      	strb	r0, [r5, #2]
1000ccc0:	4871      	ldr	r0, [pc, #452]	; (1000ce88 <at_ble_event_get+0x304>)
1000ccc2:	802b      	strh	r3, [r5, #0]
1000ccc4:	4283      	cmp	r3, r0
1000ccc6:	d806      	bhi.n	1000ccd6 <at_ble_event_get+0x152>
1000ccc8:	4a70      	ldr	r2, [pc, #448]	; (1000ce8c <at_ble_event_get+0x308>)
1000ccca:	4293      	cmp	r3, r2
1000cccc:	d20b      	bcs.n	1000cce6 <at_ble_event_get+0x162>
1000ccce:	4a70      	ldr	r2, [pc, #448]	; (1000ce90 <at_ble_event_get+0x30c>)
1000ccd0:	4293      	cmp	r3, r2
1000ccd2:	d008      	beq.n	1000cce6 <at_ble_event_get+0x162>
1000ccd4:	e009      	b.n	1000ccea <at_ble_event_get+0x166>
1000ccd6:	486f      	ldr	r0, [pc, #444]	; (1000ce94 <at_ble_event_get+0x310>)
1000ccd8:	4283      	cmp	r3, r0
1000ccda:	d106      	bne.n	1000ccea <at_ble_event_get+0x166>
1000ccdc:	020b      	lsls	r3, r1, #8
1000ccde:	4313      	orrs	r3, r2
1000cce0:	80ab      	strh	r3, [r5, #4]
1000cce2:	2337      	movs	r3, #55	; 0x37
1000cce4:	e002      	b.n	1000ccec <at_ble_event_get+0x168>
1000cce6:	2336      	movs	r3, #54	; 0x36
1000cce8:	e000      	b.n	1000ccec <at_ble_event_get+0x168>
1000ccea:	2300      	movs	r3, #0
1000ccec:	9a03      	ldr	r2, [sp, #12]
1000ccee:	7013      	strb	r3, [r2, #0]
1000ccf0:	e7bd      	b.n	1000cc6e <at_ble_event_get+0xea>
1000ccf2:	4b69      	ldr	r3, [pc, #420]	; (1000ce98 <at_ble_event_get+0x314>)
1000ccf4:	429c      	cmp	r4, r3
1000ccf6:	d100      	bne.n	1000ccfa <at_ble_event_get+0x176>
1000ccf8:	e144      	b.n	1000cf84 <at_ble_event_get+0x400>
1000ccfa:	d865      	bhi.n	1000cdc8 <at_ble_event_get+0x244>
1000ccfc:	4b67      	ldr	r3, [pc, #412]	; (1000ce9c <at_ble_event_get+0x318>)
1000ccfe:	429c      	cmp	r4, r3
1000cd00:	d100      	bne.n	1000cd04 <at_ble_event_get+0x180>
1000cd02:	e1d5      	b.n	1000d0b0 <at_ble_event_get+0x52c>
1000cd04:	d82f      	bhi.n	1000cd66 <at_ble_event_get+0x1e2>
1000cd06:	4b66      	ldr	r3, [pc, #408]	; (1000cea0 <at_ble_event_get+0x31c>)
1000cd08:	429c      	cmp	r4, r3
1000cd0a:	d100      	bne.n	1000cd0e <at_ble_event_get+0x18a>
1000cd0c:	e1e0      	b.n	1000d0d0 <at_ble_event_get+0x54c>
1000cd0e:	d813      	bhi.n	1000cd38 <at_ble_event_get+0x1b4>
1000cd10:	4b64      	ldr	r3, [pc, #400]	; (1000cea4 <at_ble_event_get+0x320>)
1000cd12:	429c      	cmp	r4, r3
1000cd14:	d100      	bne.n	1000cd18 <at_ble_event_get+0x194>
1000cd16:	e1a3      	b.n	1000d060 <at_ble_event_get+0x4dc>
1000cd18:	d804      	bhi.n	1000cd24 <at_ble_event_get+0x1a0>
1000cd1a:	2638      	movs	r6, #56	; 0x38
1000cd1c:	42b4      	cmp	r4, r6
1000cd1e:	d100      	bne.n	1000cd22 <at_ble_event_get+0x19e>
1000cd20:	e225      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000cd22:	e117      	b.n	1000cf54 <at_ble_event_get+0x3d0>
1000cd24:	4b60      	ldr	r3, [pc, #384]	; (1000cea8 <at_ble_event_get+0x324>)
1000cd26:	429c      	cmp	r4, r3
1000cd28:	d100      	bne.n	1000cd2c <at_ble_event_get+0x1a8>
1000cd2a:	e19f      	b.n	1000d06c <at_ble_event_get+0x4e8>
1000cd2c:	33fe      	adds	r3, #254	; 0xfe
1000cd2e:	33ff      	adds	r3, #255	; 0xff
1000cd30:	429c      	cmp	r4, r3
1000cd32:	d100      	bne.n	1000cd36 <at_ble_event_get+0x1b2>
1000cd34:	e1d3      	b.n	1000d0de <at_ble_event_get+0x55a>
1000cd36:	e10d      	b.n	1000cf54 <at_ble_event_get+0x3d0>
1000cd38:	4b5c      	ldr	r3, [pc, #368]	; (1000ceac <at_ble_event_get+0x328>)
1000cd3a:	429c      	cmp	r4, r3
1000cd3c:	d100      	bne.n	1000cd40 <at_ble_event_get+0x1bc>
1000cd3e:	e1a9      	b.n	1000d094 <at_ble_event_get+0x510>
1000cd40:	d808      	bhi.n	1000cd54 <at_ble_event_get+0x1d0>
1000cd42:	4b5b      	ldr	r3, [pc, #364]	; (1000ceb0 <at_ble_event_get+0x32c>)
1000cd44:	429c      	cmp	r4, r3
1000cd46:	d100      	bne.n	1000cd4a <at_ble_event_get+0x1c6>
1000cd48:	e196      	b.n	1000d078 <at_ble_event_get+0x4f4>
1000cd4a:	4b5a      	ldr	r3, [pc, #360]	; (1000ceb4 <at_ble_event_get+0x330>)
1000cd4c:	429c      	cmp	r4, r3
1000cd4e:	d100      	bne.n	1000cd52 <at_ble_event_get+0x1ce>
1000cd50:	e199      	b.n	1000d086 <at_ble_event_get+0x502>
1000cd52:	e0ff      	b.n	1000cf54 <at_ble_event_get+0x3d0>
1000cd54:	4b58      	ldr	r3, [pc, #352]	; (1000ceb8 <at_ble_event_get+0x334>)
1000cd56:	429c      	cmp	r4, r3
1000cd58:	d100      	bne.n	1000cd5c <at_ble_event_get+0x1d8>
1000cd5a:	e1a2      	b.n	1000d0a2 <at_ble_event_get+0x51e>
1000cd5c:	4b57      	ldr	r3, [pc, #348]	; (1000cebc <at_ble_event_get+0x338>)
1000cd5e:	429c      	cmp	r4, r3
1000cd60:	d100      	bne.n	1000cd64 <at_ble_event_get+0x1e0>
1000cd62:	e1d4      	b.n	1000d10e <at_ble_event_get+0x58a>
1000cd64:	e0f6      	b.n	1000cf54 <at_ble_event_get+0x3d0>
1000cd66:	4b56      	ldr	r3, [pc, #344]	; (1000cec0 <at_ble_event_get+0x33c>)
1000cd68:	429c      	cmp	r4, r3
1000cd6a:	d100      	bne.n	1000cd6e <at_ble_event_get+0x1ea>
1000cd6c:	e1c8      	b.n	1000d100 <at_ble_event_get+0x57c>
1000cd6e:	d812      	bhi.n	1000cd96 <at_ble_event_get+0x212>
1000cd70:	4b54      	ldr	r3, [pc, #336]	; (1000cec4 <at_ble_event_get+0x340>)
1000cd72:	429c      	cmp	r4, r3
1000cd74:	d100      	bne.n	1000cd78 <at_ble_event_get+0x1f4>
1000cd76:	e1d1      	b.n	1000d11c <at_ble_event_get+0x598>
1000cd78:	d804      	bhi.n	1000cd84 <at_ble_event_get+0x200>
1000cd7a:	4b53      	ldr	r3, [pc, #332]	; (1000cec8 <at_ble_event_get+0x344>)
1000cd7c:	429c      	cmp	r4, r3
1000cd7e:	d100      	bne.n	1000cd82 <at_ble_event_get+0x1fe>
1000cd80:	e19b      	b.n	1000d0ba <at_ble_event_get+0x536>
1000cd82:	e0e7      	b.n	1000cf54 <at_ble_event_get+0x3d0>
1000cd84:	4b51      	ldr	r3, [pc, #324]	; (1000cecc <at_ble_event_get+0x348>)
1000cd86:	429c      	cmp	r4, r3
1000cd88:	d100      	bne.n	1000cd8c <at_ble_event_get+0x208>
1000cd8a:	e1ad      	b.n	1000d0e8 <at_ble_event_get+0x564>
1000cd8c:	4b50      	ldr	r3, [pc, #320]	; (1000ced0 <at_ble_event_get+0x34c>)
1000cd8e:	429c      	cmp	r4, r3
1000cd90:	d100      	bne.n	1000cd94 <at_ble_event_get+0x210>
1000cd92:	e1b0      	b.n	1000d0f6 <at_ble_event_get+0x572>
1000cd94:	e0de      	b.n	1000cf54 <at_ble_event_get+0x3d0>
1000cd96:	4b4f      	ldr	r3, [pc, #316]	; (1000ced4 <at_ble_event_get+0x350>)
1000cd98:	429c      	cmp	r4, r3
1000cd9a:	d100      	bne.n	1000cd9e <at_ble_event_get+0x21a>
1000cd9c:	e0e0      	b.n	1000cf60 <at_ble_event_get+0x3dc>
1000cd9e:	d809      	bhi.n	1000cdb4 <at_ble_event_get+0x230>
1000cda0:	3b08      	subs	r3, #8
1000cda2:	429c      	cmp	r4, r3
1000cda4:	d100      	bne.n	1000cda8 <at_ble_event_get+0x224>
1000cda6:	e0d7      	b.n	1000cf58 <at_ble_event_get+0x3d4>
1000cda8:	4b4b      	ldr	r3, [pc, #300]	; (1000ced8 <at_ble_event_get+0x354>)
1000cdaa:	2639      	movs	r6, #57	; 0x39
1000cdac:	429c      	cmp	r4, r3
1000cdae:	d100      	bne.n	1000cdb2 <at_ble_event_get+0x22e>
1000cdb0:	e1dd      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000cdb2:	e0cf      	b.n	1000cf54 <at_ble_event_get+0x3d0>
1000cdb4:	23d1      	movs	r3, #209	; 0xd1
1000cdb6:	011b      	lsls	r3, r3, #4
1000cdb8:	429c      	cmp	r4, r3
1000cdba:	d100      	bne.n	1000cdbe <at_ble_event_get+0x23a>
1000cdbc:	e0d6      	b.n	1000cf6c <at_ble_event_get+0x3e8>
1000cdbe:	4b47      	ldr	r3, [pc, #284]	; (1000cedc <at_ble_event_get+0x358>)
1000cdc0:	429c      	cmp	r4, r3
1000cdc2:	d100      	bne.n	1000cdc6 <at_ble_event_get+0x242>
1000cdc4:	e0d8      	b.n	1000cf78 <at_ble_event_get+0x3f4>
1000cdc6:	e0c5      	b.n	1000cf54 <at_ble_event_get+0x3d0>
1000cdc8:	4b45      	ldr	r3, [pc, #276]	; (1000cee0 <at_ble_event_get+0x35c>)
1000cdca:	429c      	cmp	r4, r3
1000cdcc:	d100      	bne.n	1000cdd0 <at_ble_event_get+0x24c>
1000cdce:	e117      	b.n	1000d000 <at_ble_event_get+0x47c>
1000cdd0:	d82e      	bhi.n	1000ce30 <at_ble_event_get+0x2ac>
1000cdd2:	4b44      	ldr	r3, [pc, #272]	; (1000cee4 <at_ble_event_get+0x360>)
1000cdd4:	429c      	cmp	r4, r3
1000cdd6:	d100      	bne.n	1000cdda <at_ble_event_get+0x256>
1000cdd8:	e13d      	b.n	1000d056 <at_ble_event_get+0x4d2>
1000cdda:	d812      	bhi.n	1000ce02 <at_ble_event_get+0x27e>
1000cddc:	4b42      	ldr	r3, [pc, #264]	; (1000cee8 <at_ble_event_get+0x364>)
1000cdde:	429c      	cmp	r4, r3
1000cde0:	d100      	bne.n	1000cde4 <at_ble_event_get+0x260>
1000cde2:	e0e8      	b.n	1000cfb6 <at_ble_event_get+0x432>
1000cde4:	d804      	bhi.n	1000cdf0 <at_ble_event_get+0x26c>
1000cde6:	3b03      	subs	r3, #3
1000cde8:	429c      	cmp	r4, r3
1000cdea:	d100      	bne.n	1000cdee <at_ble_event_get+0x26a>
1000cdec:	e0d0      	b.n	1000cf90 <at_ble_event_get+0x40c>
1000cdee:	e0b1      	b.n	1000cf54 <at_ble_event_get+0x3d0>
1000cdf0:	4b3e      	ldr	r3, [pc, #248]	; (1000ceec <at_ble_event_get+0x368>)
1000cdf2:	429c      	cmp	r4, r3
1000cdf4:	d100      	bne.n	1000cdf8 <at_ble_event_get+0x274>
1000cdf6:	e0d0      	b.n	1000cf9a <at_ble_event_get+0x416>
1000cdf8:	4b3d      	ldr	r3, [pc, #244]	; (1000cef0 <at_ble_event_get+0x36c>)
1000cdfa:	429c      	cmp	r4, r3
1000cdfc:	d100      	bne.n	1000ce00 <at_ble_event_get+0x27c>
1000cdfe:	e0f9      	b.n	1000cff4 <at_ble_event_get+0x470>
1000ce00:	e0a8      	b.n	1000cf54 <at_ble_event_get+0x3d0>
1000ce02:	4b3c      	ldr	r3, [pc, #240]	; (1000cef4 <at_ble_event_get+0x370>)
1000ce04:	429c      	cmp	r4, r3
1000ce06:	d100      	bne.n	1000ce0a <at_ble_event_get+0x286>
1000ce08:	e0db      	b.n	1000cfc2 <at_ble_event_get+0x43e>
1000ce0a:	d808      	bhi.n	1000ce1e <at_ble_event_get+0x29a>
1000ce0c:	4b3a      	ldr	r3, [pc, #232]	; (1000cef8 <at_ble_event_get+0x374>)
1000ce0e:	429c      	cmp	r4, r3
1000ce10:	d100      	bne.n	1000ce14 <at_ble_event_get+0x290>
1000ce12:	e11b      	b.n	1000d04c <at_ble_event_get+0x4c8>
1000ce14:	4b39      	ldr	r3, [pc, #228]	; (1000cefc <at_ble_event_get+0x378>)
1000ce16:	429c      	cmp	r4, r3
1000ce18:	d100      	bne.n	1000ce1c <at_ble_event_get+0x298>
1000ce1a:	e0d8      	b.n	1000cfce <at_ble_event_get+0x44a>
1000ce1c:	e09a      	b.n	1000cf54 <at_ble_event_get+0x3d0>
1000ce1e:	4b38      	ldr	r3, [pc, #224]	; (1000cf00 <at_ble_event_get+0x37c>)
1000ce20:	429c      	cmp	r4, r3
1000ce22:	d100      	bne.n	1000ce26 <at_ble_event_get+0x2a2>
1000ce24:	e0d8      	b.n	1000cfd8 <at_ble_event_get+0x454>
1000ce26:	4b37      	ldr	r3, [pc, #220]	; (1000cf04 <at_ble_event_get+0x380>)
1000ce28:	429c      	cmp	r4, r3
1000ce2a:	d100      	bne.n	1000ce2e <at_ble_event_get+0x2aa>
1000ce2c:	e0db      	b.n	1000cfe6 <at_ble_event_get+0x462>
1000ce2e:	e091      	b.n	1000cf54 <at_ble_event_get+0x3d0>
1000ce30:	4b35      	ldr	r3, [pc, #212]	; (1000cf08 <at_ble_event_get+0x384>)
1000ce32:	429c      	cmp	r4, r3
1000ce34:	d100      	bne.n	1000ce38 <at_ble_event_get+0x2b4>
1000ce36:	e0f7      	b.n	1000d028 <at_ble_event_get+0x4a4>
1000ce38:	d876      	bhi.n	1000cf28 <at_ble_event_get+0x3a4>
1000ce3a:	4b34      	ldr	r3, [pc, #208]	; (1000cf0c <at_ble_event_get+0x388>)
1000ce3c:	429c      	cmp	r4, r3
1000ce3e:	d100      	bne.n	1000ce42 <at_ble_event_get+0x2be>
1000ce40:	e0f8      	b.n	1000d034 <at_ble_event_get+0x4b0>
1000ce42:	d869      	bhi.n	1000cf18 <at_ble_event_get+0x394>
1000ce44:	4b32      	ldr	r3, [pc, #200]	; (1000cf10 <at_ble_event_get+0x38c>)
1000ce46:	429c      	cmp	r4, r3
1000ce48:	d100      	bne.n	1000ce4c <at_ble_event_get+0x2c8>
1000ce4a:	e0e0      	b.n	1000d00e <at_ble_event_get+0x48a>
1000ce4c:	4b31      	ldr	r3, [pc, #196]	; (1000cf14 <at_ble_event_get+0x390>)
1000ce4e:	429c      	cmp	r4, r3
1000ce50:	d100      	bne.n	1000ce54 <at_ble_event_get+0x2d0>
1000ce52:	e0a9      	b.n	1000cfa8 <at_ble_event_get+0x424>
1000ce54:	e07e      	b.n	1000cf54 <at_ble_event_get+0x3d0>
1000ce56:	46c0      	nop			; (mov r8, r8)
1000ce58:	1000e589 	.word	0x1000e589
1000ce5c:	1001530c 	.word	0x1001530c
1000ce60:	10009801 	.word	0x10009801
1000ce64:	10015310 	.word	0x10015310
1000ce68:	10015308 	.word	0x10015308
1000ce6c:	100152f8 	.word	0x100152f8
1000ce70:	1000ca6d 	.word	0x1000ca6d
1000ce74:	10010fb9 	.word	0x10010fb9
1000ce78:	0000ffff 	.word	0x0000ffff
1000ce7c:	0000fffe 	.word	0x0000fffe
1000ce80:	10009a79 	.word	0x10009a79
1000ce84:	1000e58b 	.word	0x1000e58b
1000ce88:	0000201e 	.word	0x0000201e
1000ce8c:	0000201d 	.word	0x0000201d
1000ce90:	00000c03 	.word	0x00000c03
1000ce94:	0000201f 	.word	0x0000201f
1000ce98:	00000d1c 	.word	0x00000d1c
1000ce9c:	00000c0c 	.word	0x00000c0c
1000cea0:	00000c02 	.word	0x00000c02
1000cea4:	00000a02 	.word	0x00000a02
1000cea8:	00000a03 	.word	0x00000a03
1000ceac:	00000c06 	.word	0x00000c06
1000ceb0:	00000c04 	.word	0x00000c04
1000ceb4:	00000c05 	.word	0x00000c05
1000ceb8:	00000c07 	.word	0x00000c07
1000cebc:	00000c09 	.word	0x00000c09
1000cec0:	00000c17 	.word	0x00000c17
1000cec4:	00000c12 	.word	0x00000c12
1000cec8:	00000c0d 	.word	0x00000c0d
1000cecc:	00000c13 	.word	0x00000c13
1000ced0:	00000c15 	.word	0x00000c15
1000ced4:	00000d08 	.word	0x00000d08
1000ced8:	00000d01 	.word	0x00000d01
1000cedc:	00000d15 	.word	0x00000d15
1000cee0:	00000e1b 	.word	0x00000e1b
1000cee4:	00000e0f 	.word	0x00000e0f
1000cee8:	00000e03 	.word	0x00000e03
1000ceec:	00000e06 	.word	0x00000e06
1000cef0:	00000e0a 	.word	0x00000e0a
1000cef4:	00000e15 	.word	0x00000e15
1000cef8:	00000e11 	.word	0x00000e11
1000cefc:	00000e13 	.word	0x00000e13
1000cf00:	00000e17 	.word	0x00000e17
1000cf04:	00000e19 	.word	0x00000e19
1000cf08:	00000e27 	.word	0x00000e27
1000cf0c:	00000e21 	.word	0x00000e21
1000cf10:	00000e1c 	.word	0x00000e1c
1000cf14:	00000e1d 	.word	0x00000e1d
1000cf18:	4b9f      	ldr	r3, [pc, #636]	; (1000d198 <at_ble_event_get+0x614>)
1000cf1a:	429c      	cmp	r4, r3
1000cf1c:	d07e      	beq.n	1000d01c <at_ble_event_get+0x498>
1000cf1e:	4b9f      	ldr	r3, [pc, #636]	; (1000d19c <at_ble_event_get+0x618>)
1000cf20:	429c      	cmp	r4, r3
1000cf22:	d100      	bne.n	1000cf26 <at_ble_event_get+0x3a2>
1000cf24:	e08c      	b.n	1000d040 <at_ble_event_get+0x4bc>
1000cf26:	e015      	b.n	1000cf54 <at_ble_event_get+0x3d0>
1000cf28:	4b9d      	ldr	r3, [pc, #628]	; (1000d1a0 <at_ble_event_get+0x61c>)
1000cf2a:	429c      	cmp	r4, r3
1000cf2c:	d100      	bne.n	1000cf30 <at_ble_event_get+0x3ac>
1000cf2e:	e10a      	b.n	1000d146 <at_ble_event_get+0x5c2>
1000cf30:	d808      	bhi.n	1000cf44 <at_ble_event_get+0x3c0>
1000cf32:	4b9c      	ldr	r3, [pc, #624]	; (1000d1a4 <at_ble_event_get+0x620>)
1000cf34:	429c      	cmp	r4, r3
1000cf36:	d100      	bne.n	1000cf3a <at_ble_event_get+0x3b6>
1000cf38:	e0f7      	b.n	1000d12a <at_ble_event_get+0x5a6>
1000cf3a:	4b9b      	ldr	r3, [pc, #620]	; (1000d1a8 <at_ble_event_get+0x624>)
1000cf3c:	429c      	cmp	r4, r3
1000cf3e:	d100      	bne.n	1000cf42 <at_ble_event_get+0x3be>
1000cf40:	e0fa      	b.n	1000d138 <at_ble_event_get+0x5b4>
1000cf42:	e007      	b.n	1000cf54 <at_ble_event_get+0x3d0>
1000cf44:	4b99      	ldr	r3, [pc, #612]	; (1000d1ac <at_ble_event_get+0x628>)
1000cf46:	429c      	cmp	r4, r3
1000cf48:	d100      	bne.n	1000cf4c <at_ble_event_get+0x3c8>
1000cf4a:	e103      	b.n	1000d154 <at_ble_event_get+0x5d0>
1000cf4c:	4b98      	ldr	r3, [pc, #608]	; (1000d1b0 <at_ble_event_get+0x62c>)
1000cf4e:	429c      	cmp	r4, r3
1000cf50:	d100      	bne.n	1000cf54 <at_ble_event_get+0x3d0>
1000cf52:	e106      	b.n	1000d162 <at_ble_event_get+0x5de>
1000cf54:	2600      	movs	r6, #0
1000cf56:	e10a      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000cf58:	1c30      	adds	r0, r6, #0
1000cf5a:	1c29      	adds	r1, r5, #0
1000cf5c:	4b95      	ldr	r3, [pc, #596]	; (1000d1b4 <at_ble_event_get+0x630>)
1000cf5e:	e014      	b.n	1000cf8a <at_ble_event_get+0x406>
1000cf60:	1c30      	adds	r0, r6, #0
1000cf62:	1c29      	adds	r1, r5, #0
1000cf64:	4b94      	ldr	r3, [pc, #592]	; (1000d1b8 <at_ble_event_get+0x634>)
1000cf66:	4798      	blx	r3
1000cf68:	2604      	movs	r6, #4
1000cf6a:	e100      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000cf6c:	1c30      	adds	r0, r6, #0
1000cf6e:	1c29      	adds	r1, r5, #0
1000cf70:	4b92      	ldr	r3, [pc, #584]	; (1000d1bc <at_ble_event_get+0x638>)
1000cf72:	4798      	blx	r3
1000cf74:	2601      	movs	r6, #1
1000cf76:	e0fa      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000cf78:	1c30      	adds	r0, r6, #0
1000cf7a:	1c29      	adds	r1, r5, #0
1000cf7c:	4b90      	ldr	r3, [pc, #576]	; (1000d1c0 <at_ble_event_get+0x63c>)
1000cf7e:	4798      	blx	r3
1000cf80:	260f      	movs	r6, #15
1000cf82:	e0f4      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000cf84:	1c30      	adds	r0, r6, #0
1000cf86:	1c29      	adds	r1, r5, #0
1000cf88:	4b8e      	ldr	r3, [pc, #568]	; (1000d1c4 <at_ble_event_get+0x640>)
1000cf8a:	4798      	blx	r3
1000cf8c:	1c06      	adds	r6, r0, #0
1000cf8e:	e0ee      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000cf90:	9801      	ldr	r0, [sp, #4]
1000cf92:	1c31      	adds	r1, r6, #0
1000cf94:	1c2a      	adds	r2, r5, #0
1000cf96:	4b8c      	ldr	r3, [pc, #560]	; (1000d1c8 <at_ble_event_get+0x644>)
1000cf98:	e017      	b.n	1000cfca <at_ble_event_get+0x446>
1000cf9a:	1c31      	adds	r1, r6, #0
1000cf9c:	9801      	ldr	r0, [sp, #4]
1000cf9e:	1c2a      	adds	r2, r5, #0
1000cfa0:	4b8a      	ldr	r3, [pc, #552]	; (1000d1cc <at_ble_event_get+0x648>)
1000cfa2:	4798      	blx	r3
1000cfa4:	2611      	movs	r6, #17
1000cfa6:	e0e2      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000cfa8:	1c31      	adds	r1, r6, #0
1000cfaa:	9801      	ldr	r0, [sp, #4]
1000cfac:	1c2a      	adds	r2, r5, #0
1000cfae:	4b88      	ldr	r3, [pc, #544]	; (1000d1d0 <at_ble_event_get+0x64c>)
1000cfb0:	4798      	blx	r3
1000cfb2:	2612      	movs	r6, #18
1000cfb4:	e0db      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000cfb6:	1c30      	adds	r0, r6, #0
1000cfb8:	1c29      	adds	r1, r5, #0
1000cfba:	4b86      	ldr	r3, [pc, #536]	; (1000d1d4 <at_ble_event_get+0x650>)
1000cfbc:	4798      	blx	r3
1000cfbe:	2606      	movs	r6, #6
1000cfc0:	e0d5      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000cfc2:	1c31      	adds	r1, r6, #0
1000cfc4:	1c2a      	adds	r2, r5, #0
1000cfc6:	9801      	ldr	r0, [sp, #4]
1000cfc8:	4b83      	ldr	r3, [pc, #524]	; (1000d1d8 <at_ble_event_get+0x654>)
1000cfca:	4798      	blx	r3
1000cfcc:	e7de      	b.n	1000cf8c <at_ble_event_get+0x408>
1000cfce:	9801      	ldr	r0, [sp, #4]
1000cfd0:	1c31      	adds	r1, r6, #0
1000cfd2:	1c2a      	adds	r2, r5, #0
1000cfd4:	4b81      	ldr	r3, [pc, #516]	; (1000d1dc <at_ble_event_get+0x658>)
1000cfd6:	e7f8      	b.n	1000cfca <at_ble_event_get+0x446>
1000cfd8:	1c31      	adds	r1, r6, #0
1000cfda:	9801      	ldr	r0, [sp, #4]
1000cfdc:	1c2a      	adds	r2, r5, #0
1000cfde:	4b80      	ldr	r3, [pc, #512]	; (1000d1e0 <at_ble_event_get+0x65c>)
1000cfe0:	4798      	blx	r3
1000cfe2:	260d      	movs	r6, #13
1000cfe4:	e0c3      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000cfe6:	1c31      	adds	r1, r6, #0
1000cfe8:	9801      	ldr	r0, [sp, #4]
1000cfea:	1c2a      	adds	r2, r5, #0
1000cfec:	4b7d      	ldr	r3, [pc, #500]	; (1000d1e4 <at_ble_event_get+0x660>)
1000cfee:	4798      	blx	r3
1000cff0:	260e      	movs	r6, #14
1000cff2:	e0bc      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000cff4:	9801      	ldr	r0, [sp, #4]
1000cff6:	1c31      	adds	r1, r6, #0
1000cff8:	1c2a      	adds	r2, r5, #0
1000cffa:	4b7b      	ldr	r3, [pc, #492]	; (1000d1e8 <at_ble_event_get+0x664>)
1000cffc:	4798      	blx	r3
1000cffe:	e084      	b.n	1000d10a <at_ble_event_get+0x586>
1000d000:	1c31      	adds	r1, r6, #0
1000d002:	9801      	ldr	r0, [sp, #4]
1000d004:	1c2a      	adds	r2, r5, #0
1000d006:	4b79      	ldr	r3, [pc, #484]	; (1000d1ec <at_ble_event_get+0x668>)
1000d008:	4798      	blx	r3
1000d00a:	260b      	movs	r6, #11
1000d00c:	e0af      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000d00e:	1c31      	adds	r1, r6, #0
1000d010:	9801      	ldr	r0, [sp, #4]
1000d012:	1c2a      	adds	r2, r5, #0
1000d014:	4b76      	ldr	r3, [pc, #472]	; (1000d1f0 <at_ble_event_get+0x66c>)
1000d016:	4798      	blx	r3
1000d018:	2610      	movs	r6, #16
1000d01a:	e0a8      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000d01c:	1c30      	adds	r0, r6, #0
1000d01e:	1c29      	adds	r1, r5, #0
1000d020:	4b74      	ldr	r3, [pc, #464]	; (1000d1f4 <at_ble_event_get+0x670>)
1000d022:	4798      	blx	r3
1000d024:	2628      	movs	r6, #40	; 0x28
1000d026:	e0a2      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000d028:	1c30      	adds	r0, r6, #0
1000d02a:	1c29      	adds	r1, r5, #0
1000d02c:	4b72      	ldr	r3, [pc, #456]	; (1000d1f8 <at_ble_event_get+0x674>)
1000d02e:	4798      	blx	r3
1000d030:	2629      	movs	r6, #41	; 0x29
1000d032:	e09c      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000d034:	1c30      	adds	r0, r6, #0
1000d036:	1c29      	adds	r1, r5, #0
1000d038:	4b70      	ldr	r3, [pc, #448]	; (1000d1fc <at_ble_event_get+0x678>)
1000d03a:	4798      	blx	r3
1000d03c:	2627      	movs	r6, #39	; 0x27
1000d03e:	e096      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000d040:	1c30      	adds	r0, r6, #0
1000d042:	1c29      	adds	r1, r5, #0
1000d044:	4b6e      	ldr	r3, [pc, #440]	; (1000d200 <at_ble_event_get+0x67c>)
1000d046:	4798      	blx	r3
1000d048:	262a      	movs	r6, #42	; 0x2a
1000d04a:	e090      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000d04c:	9801      	ldr	r0, [sp, #4]
1000d04e:	1c31      	adds	r1, r6, #0
1000d050:	1c2a      	adds	r2, r5, #0
1000d052:	4b6c      	ldr	r3, [pc, #432]	; (1000d204 <at_ble_event_get+0x680>)
1000d054:	e7b9      	b.n	1000cfca <at_ble_event_get+0x446>
1000d056:	9801      	ldr	r0, [sp, #4]
1000d058:	1c31      	adds	r1, r6, #0
1000d05a:	1c2a      	adds	r2, r5, #0
1000d05c:	4b6a      	ldr	r3, [pc, #424]	; (1000d208 <at_ble_event_get+0x684>)
1000d05e:	e7b4      	b.n	1000cfca <at_ble_event_get+0x446>
1000d060:	1c30      	adds	r0, r6, #0
1000d062:	1c29      	adds	r1, r5, #0
1000d064:	4b69      	ldr	r3, [pc, #420]	; (1000d20c <at_ble_event_get+0x688>)
1000d066:	4798      	blx	r3
1000d068:	262b      	movs	r6, #43	; 0x2b
1000d06a:	e080      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000d06c:	1c30      	adds	r0, r6, #0
1000d06e:	1c29      	adds	r1, r5, #0
1000d070:	4b67      	ldr	r3, [pc, #412]	; (1000d210 <at_ble_event_get+0x68c>)
1000d072:	4798      	blx	r3
1000d074:	262c      	movs	r6, #44	; 0x2c
1000d076:	e07a      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000d078:	1c31      	adds	r1, r6, #0
1000d07a:	9801      	ldr	r0, [sp, #4]
1000d07c:	1c2a      	adds	r2, r5, #0
1000d07e:	4b65      	ldr	r3, [pc, #404]	; (1000d214 <at_ble_event_get+0x690>)
1000d080:	4798      	blx	r3
1000d082:	2613      	movs	r6, #19
1000d084:	e073      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000d086:	1c31      	adds	r1, r6, #0
1000d088:	9801      	ldr	r0, [sp, #4]
1000d08a:	1c2a      	adds	r2, r5, #0
1000d08c:	4b62      	ldr	r3, [pc, #392]	; (1000d218 <at_ble_event_get+0x694>)
1000d08e:	4798      	blx	r3
1000d090:	2614      	movs	r6, #20
1000d092:	e06c      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000d094:	1c31      	adds	r1, r6, #0
1000d096:	9801      	ldr	r0, [sp, #4]
1000d098:	1c2a      	adds	r2, r5, #0
1000d09a:	4b60      	ldr	r3, [pc, #384]	; (1000d21c <at_ble_event_get+0x698>)
1000d09c:	4798      	blx	r3
1000d09e:	2615      	movs	r6, #21
1000d0a0:	e065      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000d0a2:	1c31      	adds	r1, r6, #0
1000d0a4:	9801      	ldr	r0, [sp, #4]
1000d0a6:	1c2a      	adds	r2, r5, #0
1000d0a8:	4b5d      	ldr	r3, [pc, #372]	; (1000d220 <at_ble_event_get+0x69c>)
1000d0aa:	4798      	blx	r3
1000d0ac:	2616      	movs	r6, #22
1000d0ae:	e05e      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000d0b0:	9801      	ldr	r0, [sp, #4]
1000d0b2:	1c31      	adds	r1, r6, #0
1000d0b4:	1c2a      	adds	r2, r5, #0
1000d0b6:	4b5b      	ldr	r3, [pc, #364]	; (1000d224 <at_ble_event_get+0x6a0>)
1000d0b8:	e787      	b.n	1000cfca <at_ble_event_get+0x446>
1000d0ba:	1c31      	adds	r1, r6, #0
1000d0bc:	9801      	ldr	r0, [sp, #4]
1000d0be:	1c2a      	adds	r2, r5, #0
1000d0c0:	4b58      	ldr	r3, [pc, #352]	; (1000d224 <at_ble_event_get+0x6a0>)
1000d0c2:	4798      	blx	r3
1000d0c4:	88a9      	ldrh	r1, [r5, #4]
1000d0c6:	1c06      	adds	r6, r0, #0
1000d0c8:	4b57      	ldr	r3, [pc, #348]	; (1000d228 <at_ble_event_get+0x6a4>)
1000d0ca:	8828      	ldrh	r0, [r5, #0]
1000d0cc:	4798      	blx	r3
1000d0ce:	e04e      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000d0d0:	1c31      	adds	r1, r6, #0
1000d0d2:	9801      	ldr	r0, [sp, #4]
1000d0d4:	1c2a      	adds	r2, r5, #0
1000d0d6:	4b55      	ldr	r3, [pc, #340]	; (1000d22c <at_ble_event_get+0x6a8>)
1000d0d8:	4798      	blx	r3
1000d0da:	2623      	movs	r6, #35	; 0x23
1000d0dc:	e047      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000d0de:	9801      	ldr	r0, [sp, #4]
1000d0e0:	1c31      	adds	r1, r6, #0
1000d0e2:	1c2a      	adds	r2, r5, #0
1000d0e4:	4b52      	ldr	r3, [pc, #328]	; (1000d230 <at_ble_event_get+0x6ac>)
1000d0e6:	e770      	b.n	1000cfca <at_ble_event_get+0x446>
1000d0e8:	9b01      	ldr	r3, [sp, #4]
1000d0ea:	1c30      	adds	r0, r6, #0
1000d0ec:	0a1f      	lsrs	r7, r3, #8
1000d0ee:	802f      	strh	r7, [r5, #0]
1000d0f0:	1c29      	adds	r1, r5, #0
1000d0f2:	4b50      	ldr	r3, [pc, #320]	; (1000d234 <at_ble_event_get+0x6b0>)
1000d0f4:	e749      	b.n	1000cf8a <at_ble_event_get+0x406>
1000d0f6:	9801      	ldr	r0, [sp, #4]
1000d0f8:	1c31      	adds	r1, r6, #0
1000d0fa:	1c2a      	adds	r2, r5, #0
1000d0fc:	4b4e      	ldr	r3, [pc, #312]	; (1000d238 <at_ble_event_get+0x6b4>)
1000d0fe:	e764      	b.n	1000cfca <at_ble_event_get+0x446>
1000d100:	1c30      	adds	r0, r6, #0
1000d102:	1c29      	adds	r1, r5, #0
1000d104:	9a01      	ldr	r2, [sp, #4]
1000d106:	4b4d      	ldr	r3, [pc, #308]	; (1000d23c <at_ble_event_get+0x6b8>)
1000d108:	4798      	blx	r3
1000d10a:	263b      	movs	r6, #59	; 0x3b
1000d10c:	e02f      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000d10e:	1c31      	adds	r1, r6, #0
1000d110:	9801      	ldr	r0, [sp, #4]
1000d112:	1c2a      	adds	r2, r5, #0
1000d114:	4b4a      	ldr	r3, [pc, #296]	; (1000d240 <at_ble_event_get+0x6bc>)
1000d116:	4798      	blx	r3
1000d118:	2618      	movs	r6, #24
1000d11a:	e028      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000d11c:	1c31      	adds	r1, r6, #0
1000d11e:	9801      	ldr	r0, [sp, #4]
1000d120:	1c2a      	adds	r2, r5, #0
1000d122:	4b48      	ldr	r3, [pc, #288]	; (1000d244 <at_ble_event_get+0x6c0>)
1000d124:	4798      	blx	r3
1000d126:	2620      	movs	r6, #32
1000d128:	e021      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000d12a:	1c31      	adds	r1, r6, #0
1000d12c:	9801      	ldr	r0, [sp, #4]
1000d12e:	1c2a      	adds	r2, r5, #0
1000d130:	4b45      	ldr	r3, [pc, #276]	; (1000d248 <at_ble_event_get+0x6c4>)
1000d132:	4798      	blx	r3
1000d134:	2633      	movs	r6, #51	; 0x33
1000d136:	e01a      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000d138:	1c31      	adds	r1, r6, #0
1000d13a:	9801      	ldr	r0, [sp, #4]
1000d13c:	1c2a      	adds	r2, r5, #0
1000d13e:	4b43      	ldr	r3, [pc, #268]	; (1000d24c <at_ble_event_get+0x6c8>)
1000d140:	4798      	blx	r3
1000d142:	2630      	movs	r6, #48	; 0x30
1000d144:	e013      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000d146:	1c31      	adds	r1, r6, #0
1000d148:	9801      	ldr	r0, [sp, #4]
1000d14a:	1c2a      	adds	r2, r5, #0
1000d14c:	4b40      	ldr	r3, [pc, #256]	; (1000d250 <at_ble_event_get+0x6cc>)
1000d14e:	4798      	blx	r3
1000d150:	2634      	movs	r6, #52	; 0x34
1000d152:	e00c      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000d154:	1c31      	adds	r1, r6, #0
1000d156:	9801      	ldr	r0, [sp, #4]
1000d158:	1c2a      	adds	r2, r5, #0
1000d15a:	4b3e      	ldr	r3, [pc, #248]	; (1000d254 <at_ble_event_get+0x6d0>)
1000d15c:	4798      	blx	r3
1000d15e:	2635      	movs	r6, #53	; 0x35
1000d160:	e005      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000d162:	1c31      	adds	r1, r6, #0
1000d164:	9801      	ldr	r0, [sp, #4]
1000d166:	1c2a      	adds	r2, r5, #0
1000d168:	4b3b      	ldr	r3, [pc, #236]	; (1000d258 <at_ble_event_get+0x6d4>)
1000d16a:	4798      	blx	r3
1000d16c:	2632      	movs	r6, #50	; 0x32
1000d16e:	9b03      	ldr	r3, [sp, #12]
1000d170:	701e      	strb	r6, [r3, #0]
1000d172:	2300      	movs	r3, #0
1000d174:	9302      	str	r3, [sp, #8]
1000d176:	e57a      	b.n	1000cc6e <at_ble_event_get+0xea>
1000d178:	23d0      	movs	r3, #208	; 0xd0
1000d17a:	e7fb      	b.n	1000d174 <at_ble_event_get+0x5f0>
1000d17c:	9b01      	ldr	r3, [sp, #4]
1000d17e:	9e02      	ldr	r6, [sp, #8]
1000d180:	2bbb      	cmp	r3, #187	; 0xbb
1000d182:	d000      	beq.n	1000d186 <at_ble_event_get+0x602>
1000d184:	e6e6      	b.n	1000cf54 <at_ble_event_get+0x3d0>
1000d186:	e7f2      	b.n	1000d16e <at_ble_event_get+0x5ea>
1000d188:	9b02      	ldr	r3, [sp, #8]
1000d18a:	2b00      	cmp	r3, #0
1000d18c:	d000      	beq.n	1000d190 <at_ble_event_get+0x60c>
1000d18e:	e56e      	b.n	1000cc6e <at_ble_event_get+0xea>
1000d190:	e6e0      	b.n	1000cf54 <at_ble_event_get+0x3d0>
1000d192:	9802      	ldr	r0, [sp, #8]
1000d194:	b007      	add	sp, #28
1000d196:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d198:	00000e22 	.word	0x00000e22
1000d19c:	00000e25 	.word	0x00000e25
1000d1a0:	00001b05 	.word	0x00001b05
1000d1a4:	00001b01 	.word	0x00001b01
1000d1a8:	00001b03 	.word	0x00001b03
1000d1ac:	00001b06 	.word	0x00001b06
1000d1b0:	00001b08 	.word	0x00001b08
1000d1b4:	1000f3b5 	.word	0x1000f3b5
1000d1b8:	1000f399 	.word	0x1000f399
1000d1bc:	1000f635 	.word	0x1000f635
1000d1c0:	1000f725 	.word	0x1000f725
1000d1c4:	1000f749 	.word	0x1000f749
1000d1c8:	1000e72d 	.word	0x1000e72d
1000d1cc:	1000efad 	.word	0x1000efad
1000d1d0:	1000f029 	.word	0x1000f029
1000d1d4:	1000e9e5 	.word	0x1000e9e5
1000d1d8:	1000ea81 	.word	0x1000ea81
1000d1dc:	1000eb59 	.word	0x1000eb59
1000d1e0:	1000ede1 	.word	0x1000ede1
1000d1e4:	1000ee81 	.word	0x1000ee81
1000d1e8:	1000ef39 	.word	0x1000ef39
1000d1ec:	1000ef61 	.word	0x1000ef61
1000d1f0:	1000ef77 	.word	0x1000ef77
1000d1f4:	1000f041 	.word	0x1000f041
1000d1f8:	1000f06f 	.word	0x1000f06f
1000d1fc:	1000f085 	.word	0x1000f085
1000d200:	1000f0af 	.word	0x1000f0af
1000d204:	1000eedd 	.word	0x1000eedd
1000d208:	1000ef07 	.word	0x1000ef07
1000d20c:	1000e16d 	.word	0x1000e16d
1000d210:	1000e199 	.word	0x1000e199
1000d214:	1000f969 	.word	0x1000f969
1000d218:	1000f9a5 	.word	0x1000f9a5
1000d21c:	1000f9ed 	.word	0x1000f9ed
1000d220:	1000fa31 	.word	0x1000fa31
1000d224:	1000fa65 	.word	0x1000fa65
1000d228:	1000f929 	.word	0x1000f929
1000d22c:	1000fb31 	.word	0x1000fb31
1000d230:	1000fab9 	.word	0x1000fab9
1000d234:	1000e051 	.word	0x1000e051
1000d238:	1000e0bd 	.word	0x1000e0bd
1000d23c:	1000e081 	.word	0x1000e081
1000d240:	1000fb41 	.word	0x1000fb41
1000d244:	1000fb81 	.word	0x1000fb81
1000d248:	1000fe49 	.word	0x1000fe49
1000d24c:	1000fe53 	.word	0x1000fe53
1000d250:	1000fe59 	.word	0x1000fe59
1000d254:	1000fe5f 	.word	0x1000fe5f
1000d258:	1000fe6b 	.word	0x1000fe6b

1000d25c <internal_event_flush>:
1000d25c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d25e:	490e      	ldr	r1, [pc, #56]	; (1000d298 <internal_event_flush+0x3c>)
1000d260:	2400      	movs	r4, #0
1000d262:	680b      	ldr	r3, [r1, #0]
1000d264:	1c0f      	adds	r7, r1, #0
1000d266:	1c1e      	adds	r6, r3, #0
1000d268:	4a0c      	ldr	r2, [pc, #48]	; (1000d29c <internal_event_flush+0x40>)
1000d26a:	6815      	ldr	r5, [r2, #0]
1000d26c:	9201      	str	r2, [sp, #4]
1000d26e:	2b00      	cmp	r3, #0
1000d270:	d00e      	beq.n	1000d290 <internal_event_flush+0x34>
1000d272:	889a      	ldrh	r2, [r3, #4]
1000d274:	6819      	ldr	r1, [r3, #0]
1000d276:	4282      	cmp	r2, r0
1000d278:	d107      	bne.n	1000d28a <internal_event_flush+0x2e>
1000d27a:	2c00      	cmp	r4, #0
1000d27c:	d001      	beq.n	1000d282 <internal_event_flush+0x26>
1000d27e:	6021      	str	r1, [r4, #0]
1000d280:	e000      	b.n	1000d284 <internal_event_flush+0x28>
1000d282:	1c0e      	adds	r6, r1, #0
1000d284:	601d      	str	r5, [r3, #0]
1000d286:	1c1d      	adds	r5, r3, #0
1000d288:	1c23      	adds	r3, r4, #0
1000d28a:	1c1c      	adds	r4, r3, #0
1000d28c:	1c0b      	adds	r3, r1, #0
1000d28e:	e7ee      	b.n	1000d26e <internal_event_flush+0x12>
1000d290:	9b01      	ldr	r3, [sp, #4]
1000d292:	603e      	str	r6, [r7, #0]
1000d294:	601d      	str	r5, [r3, #0]
1000d296:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d298:	1001530c 	.word	0x1001530c
1000d29c:	10015310 	.word	0x10015310

1000d2a0 <internal_conn_flush>:
1000d2a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d2a2:	4a12      	ldr	r2, [pc, #72]	; (1000d2ec <internal_conn_flush+0x4c>)
1000d2a4:	9000      	str	r0, [sp, #0]
1000d2a6:	6813      	ldr	r3, [r2, #0]
1000d2a8:	4811      	ldr	r0, [pc, #68]	; (1000d2f0 <internal_conn_flush+0x50>)
1000d2aa:	1c1f      	adds	r7, r3, #0
1000d2ac:	2100      	movs	r1, #0
1000d2ae:	4684      	mov	ip, r0
1000d2b0:	6804      	ldr	r4, [r0, #0]
1000d2b2:	9201      	str	r2, [sp, #4]
1000d2b4:	2b00      	cmp	r3, #0
1000d2b6:	d014      	beq.n	1000d2e2 <internal_conn_flush+0x42>
1000d2b8:	88d8      	ldrh	r0, [r3, #6]
1000d2ba:	9a00      	ldr	r2, [sp, #0]
1000d2bc:	681d      	ldr	r5, [r3, #0]
1000d2be:	0a06      	lsrs	r6, r0, #8
1000d2c0:	4296      	cmp	r6, r2
1000d2c2:	d10b      	bne.n	1000d2dc <internal_conn_flush+0x3c>
1000d2c4:	26fd      	movs	r6, #253	; 0xfd
1000d2c6:	4006      	ands	r6, r0
1000d2c8:	2e0c      	cmp	r6, #12
1000d2ca:	d107      	bne.n	1000d2dc <internal_conn_flush+0x3c>
1000d2cc:	2900      	cmp	r1, #0
1000d2ce:	d001      	beq.n	1000d2d4 <internal_conn_flush+0x34>
1000d2d0:	600d      	str	r5, [r1, #0]
1000d2d2:	e000      	b.n	1000d2d6 <internal_conn_flush+0x36>
1000d2d4:	1c2f      	adds	r7, r5, #0
1000d2d6:	601c      	str	r4, [r3, #0]
1000d2d8:	1c1c      	adds	r4, r3, #0
1000d2da:	1c0b      	adds	r3, r1, #0
1000d2dc:	1c19      	adds	r1, r3, #0
1000d2de:	1c2b      	adds	r3, r5, #0
1000d2e0:	e7e8      	b.n	1000d2b4 <internal_conn_flush+0x14>
1000d2e2:	9b01      	ldr	r3, [sp, #4]
1000d2e4:	601f      	str	r7, [r3, #0]
1000d2e6:	4663      	mov	r3, ip
1000d2e8:	601c      	str	r4, [r3, #0]
1000d2ea:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d2ec:	1001530c 	.word	0x1001530c
1000d2f0:	10015310 	.word	0x10015310

1000d2f4 <at_ble_device_name_set>:
1000d2f4:	b530      	push	{r4, r5, lr}
1000d2f6:	23cf      	movs	r3, #207	; 0xcf
1000d2f8:	2800      	cmp	r0, #0
1000d2fa:	d010      	beq.n	1000d31e <at_ble_device_name_set+0x2a>
1000d2fc:	1e4a      	subs	r2, r1, #1
1000d2fe:	2a1f      	cmp	r2, #31
1000d300:	d80d      	bhi.n	1000d31e <at_ble_device_name_set+0x2a>
1000d302:	4a08      	ldr	r2, [pc, #32]	; (1000d324 <at_ble_device_name_set+0x30>)
1000d304:	1c13      	adds	r3, r2, #0
1000d306:	33aa      	adds	r3, #170	; 0xaa
1000d308:	8019      	strh	r1, [r3, #0]
1000d30a:	2300      	movs	r3, #0
1000d30c:	1c1c      	adds	r4, r3, #0
1000d30e:	5cc5      	ldrb	r5, [r0, r3]
1000d310:	34ac      	adds	r4, #172	; 0xac
1000d312:	3301      	adds	r3, #1
1000d314:	5515      	strb	r5, [r2, r4]
1000d316:	b2dc      	uxtb	r4, r3
1000d318:	428c      	cmp	r4, r1
1000d31a:	d3f7      	bcc.n	1000d30c <at_ble_device_name_set+0x18>
1000d31c:	2300      	movs	r3, #0
1000d31e:	1c18      	adds	r0, r3, #0
1000d320:	bd30      	pop	{r4, r5, pc}
1000d322:	46c0      	nop			; (mov r8, r8)
1000d324:	10016166 	.word	0x10016166

1000d328 <at_ble_addr_get>:
1000d328:	b510      	push	{r4, lr}
1000d32a:	1c04      	adds	r4, r0, #0
1000d32c:	20cf      	movs	r0, #207	; 0xcf
1000d32e:	2c00      	cmp	r4, #0
1000d330:	d006      	beq.n	1000d340 <at_ble_addr_get+0x18>
1000d332:	4b04      	ldr	r3, [pc, #16]	; (1000d344 <at_ble_addr_get+0x1c>)
1000d334:	38ce      	subs	r0, #206	; 0xce
1000d336:	1c21      	adds	r1, r4, #0
1000d338:	4798      	blx	r3
1000d33a:	4b03      	ldr	r3, [pc, #12]	; (1000d348 <at_ble_addr_get+0x20>)
1000d33c:	791b      	ldrb	r3, [r3, #4]
1000d33e:	7023      	strb	r3, [r4, #0]
1000d340:	bd10      	pop	{r4, pc}
1000d342:	46c0      	nop			; (mov r8, r8)
1000d344:	1000f249 	.word	0x1000f249
1000d348:	10016166 	.word	0x10016166

1000d34c <at_ble_set_dev_config>:
1000d34c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d34e:	7906      	ldrb	r6, [r0, #4]
1000d350:	b089      	sub	sp, #36	; 0x24
1000d352:	25cf      	movs	r5, #207	; 0xcf
1000d354:	2e03      	cmp	r6, #3
1000d356:	d838      	bhi.n	1000d3ca <at_ble_set_dev_config+0x7e>
1000d358:	7803      	ldrb	r3, [r0, #0]
1000d35a:	3511      	adds	r5, #17
1000d35c:	2b0f      	cmp	r3, #15
1000d35e:	d834      	bhi.n	1000d3ca <at_ble_set_dev_config+0x7e>
1000d360:	2380      	movs	r3, #128	; 0x80
1000d362:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000d364:	3d11      	subs	r5, #17
1000d366:	009b      	lsls	r3, r3, #2
1000d368:	429f      	cmp	r7, r3
1000d36a:	d82e      	bhi.n	1000d3ca <at_ble_set_dev_config+0x7e>
1000d36c:	7fc5      	ldrb	r5, [r0, #31]
1000d36e:	7f83      	ldrb	r3, [r0, #30]
1000d370:	01ad      	lsls	r5, r5, #6
1000d372:	015b      	lsls	r3, r3, #5
1000d374:	431d      	orrs	r5, r3
1000d376:	7ec3      	ldrb	r3, [r0, #27]
1000d378:	431d      	orrs	r5, r3
1000d37a:	7f43      	ldrb	r3, [r0, #29]
1000d37c:	011b      	lsls	r3, r3, #4
1000d37e:	431d      	orrs	r5, r3
1000d380:	7f03      	ldrb	r3, [r0, #28]
1000d382:	009b      	lsls	r3, r3, #2
1000d384:	431d      	orrs	r5, r3
1000d386:	4b12      	ldr	r3, [pc, #72]	; (1000d3d0 <at_ble_set_dev_config+0x84>)
1000d388:	b2ed      	uxtb	r5, r5
1000d38a:	711e      	strb	r6, [r3, #4]
1000d38c:	7903      	ldrb	r3, [r0, #4]
1000d38e:	3b02      	subs	r3, #2
1000d390:	2b01      	cmp	r3, #1
1000d392:	d801      	bhi.n	1000d398 <at_ble_set_dev_config+0x4c>
1000d394:	2302      	movs	r3, #2
1000d396:	7103      	strb	r3, [r0, #4]
1000d398:	1c04      	adds	r4, r0, #0
1000d39a:	1c23      	adds	r3, r4, #0
1000d39c:	330b      	adds	r3, #11
1000d39e:	8861      	ldrh	r1, [r4, #2]
1000d3a0:	9307      	str	r3, [sp, #28]
1000d3a2:	7923      	ldrb	r3, [r4, #4]
1000d3a4:	7800      	ldrb	r0, [r0, #0]
1000d3a6:	9300      	str	r3, [sp, #0]
1000d3a8:	9501      	str	r5, [sp, #4]
1000d3aa:	8c25      	ldrh	r5, [r4, #32]
1000d3ac:	1d62      	adds	r2, r4, #5
1000d3ae:	9502      	str	r5, [sp, #8]
1000d3b0:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000d3b2:	9b07      	ldr	r3, [sp, #28]
1000d3b4:	9503      	str	r5, [sp, #12]
1000d3b6:	9704      	str	r7, [sp, #16]
1000d3b8:	4d06      	ldr	r5, [pc, #24]	; (1000d3d4 <at_ble_set_dev_config+0x88>)
1000d3ba:	47a8      	blx	r5
1000d3bc:	7126      	strb	r6, [r4, #4]
1000d3be:	1c05      	adds	r5, r0, #0
1000d3c0:	1c21      	adds	r1, r4, #0
1000d3c2:	4803      	ldr	r0, [pc, #12]	; (1000d3d0 <at_ble_set_dev_config+0x84>)
1000d3c4:	2226      	movs	r2, #38	; 0x26
1000d3c6:	4b04      	ldr	r3, [pc, #16]	; (1000d3d8 <at_ble_set_dev_config+0x8c>)
1000d3c8:	4798      	blx	r3
1000d3ca:	1c28      	adds	r0, r5, #0
1000d3cc:	b009      	add	sp, #36	; 0x24
1000d3ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d3d0:	10016166 	.word	0x10016166
1000d3d4:	1000f141 	.word	0x1000f141
1000d3d8:	10010fa7 	.word	0x10010fa7

1000d3dc <at_ble_init>:
1000d3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d3de:	b087      	sub	sp, #28
1000d3e0:	af03      	add	r7, sp, #12
1000d3e2:	4954      	ldr	r1, [pc, #336]	; (1000d534 <at_ble_init+0x158>)
1000d3e4:	220b      	movs	r2, #11
1000d3e6:	4b54      	ldr	r3, [pc, #336]	; (1000d538 <at_ble_init+0x15c>)
1000d3e8:	1c04      	adds	r4, r0, #0
1000d3ea:	1c38      	adds	r0, r7, #0
1000d3ec:	4798      	blx	r3
1000d3ee:	2205      	movs	r2, #5
1000d3f0:	4b52      	ldr	r3, [pc, #328]	; (1000d53c <at_ble_init+0x160>)
1000d3f2:	2640      	movs	r6, #64	; 0x40
1000d3f4:	801a      	strh	r2, [r3, #0]
1000d3f6:	2300      	movs	r3, #0
1000d3f8:	4a51      	ldr	r2, [pc, #324]	; (1000d540 <at_ble_init+0x164>)
1000d3fa:	6013      	str	r3, [r2, #0]
1000d3fc:	4a51      	ldr	r2, [pc, #324]	; (1000d544 <at_ble_init+0x168>)
1000d3fe:	7013      	strb	r3, [r2, #0]
1000d400:	4a51      	ldr	r2, [pc, #324]	; (1000d548 <at_ble_init+0x16c>)
1000d402:	7013      	strb	r3, [r2, #0]
1000d404:	4b51      	ldr	r3, [pc, #324]	; (1000d54c <at_ble_init+0x170>)
1000d406:	4798      	blx	r3
1000d408:	4b51      	ldr	r3, [pc, #324]	; (1000d550 <at_ble_init+0x174>)
1000d40a:	4798      	blx	r3
1000d40c:	4b51      	ldr	r3, [pc, #324]	; (1000d554 <at_ble_init+0x178>)
1000d40e:	4798      	blx	r3
1000d410:	4b51      	ldr	r3, [pc, #324]	; (1000d558 <at_ble_init+0x17c>)
1000d412:	4798      	blx	r3
1000d414:	2c00      	cmp	r4, #0
1000d416:	d100      	bne.n	1000d41a <at_ble_init+0x3e>
1000d418:	e089      	b.n	1000d52e <at_ble_init+0x152>
1000d41a:	68a3      	ldr	r3, [r4, #8]
1000d41c:	2b00      	cmp	r3, #0
1000d41e:	d100      	bne.n	1000d422 <at_ble_init+0x46>
1000d420:	e085      	b.n	1000d52e <at_ble_init+0x152>
1000d422:	6923      	ldr	r3, [r4, #16]
1000d424:	2b00      	cmp	r3, #0
1000d426:	d100      	bne.n	1000d42a <at_ble_init+0x4e>
1000d428:	e081      	b.n	1000d52e <at_ble_init+0x152>
1000d42a:	6820      	ldr	r0, [r4, #0]
1000d42c:	2800      	cmp	r0, #0
1000d42e:	d102      	bne.n	1000d436 <at_ble_init+0x5a>
1000d430:	6863      	ldr	r3, [r4, #4]
1000d432:	2b00      	cmp	r3, #0
1000d434:	d17b      	bne.n	1000d52e <at_ble_init+0x152>
1000d436:	4b49      	ldr	r3, [pc, #292]	; (1000d55c <at_ble_init+0x180>)
1000d438:	6861      	ldr	r1, [r4, #4]
1000d43a:	4798      	blx	r3
1000d43c:	4b48      	ldr	r3, [pc, #288]	; (1000d560 <at_ble_init+0x184>)
1000d43e:	4798      	blx	r3
1000d440:	2801      	cmp	r0, #1
1000d442:	d901      	bls.n	1000d448 <at_ble_init+0x6c>
1000d444:	26e2      	movs	r6, #226	; 0xe2
1000d446:	e072      	b.n	1000d52e <at_ble_init+0x152>
1000d448:	4846      	ldr	r0, [pc, #280]	; (1000d564 <at_ble_init+0x188>)
1000d44a:	4b47      	ldr	r3, [pc, #284]	; (1000d568 <at_ble_init+0x18c>)
1000d44c:	4798      	blx	r3
1000d44e:	2800      	cmp	r0, #0
1000d450:	d1f8      	bne.n	1000d444 <at_ble_init+0x68>
1000d452:	1c20      	adds	r0, r4, #0
1000d454:	4b45      	ldr	r3, [pc, #276]	; (1000d56c <at_ble_init+0x190>)
1000d456:	4798      	blx	r3
1000d458:	68e0      	ldr	r0, [r4, #12]
1000d45a:	68a1      	ldr	r1, [r4, #8]
1000d45c:	4b44      	ldr	r3, [pc, #272]	; (1000d570 <at_ble_init+0x194>)
1000d45e:	4798      	blx	r3
1000d460:	466b      	mov	r3, sp
1000d462:	2201      	movs	r2, #1
1000d464:	1cdc      	adds	r4, r3, #3
1000d466:	1c20      	adds	r0, r4, #0
1000d468:	a901      	add	r1, sp, #4
1000d46a:	4252      	negs	r2, r2
1000d46c:	4b41      	ldr	r3, [pc, #260]	; (1000d574 <at_ble_init+0x198>)
1000d46e:	4798      	blx	r3
1000d470:	2800      	cmp	r0, #0
1000d472:	d102      	bne.n	1000d47a <at_ble_init+0x9e>
1000d474:	7823      	ldrb	r3, [r4, #0]
1000d476:	2b39      	cmp	r3, #57	; 0x39
1000d478:	d1f2      	bne.n	1000d460 <at_ble_init+0x84>
1000d47a:	4b3f      	ldr	r3, [pc, #252]	; (1000d578 <at_ble_init+0x19c>)
1000d47c:	4798      	blx	r3
1000d47e:	1e06      	subs	r6, r0, #0
1000d480:	d155      	bne.n	1000d52e <at_ble_init+0x152>
1000d482:	1c03      	adds	r3, r0, #0
1000d484:	2101      	movs	r1, #1
1000d486:	4a3d      	ldr	r2, [pc, #244]	; (1000d57c <at_ble_init+0x1a0>)
1000d488:	4249      	negs	r1, r1
1000d48a:	189a      	adds	r2, r3, r2
1000d48c:	3312      	adds	r3, #18
1000d48e:	8151      	strh	r1, [r2, #10]
1000d490:	2b90      	cmp	r3, #144	; 0x90
1000d492:	d1f7      	bne.n	1000d484 <at_ble_init+0xa8>
1000d494:	4c3a      	ldr	r4, [pc, #232]	; (1000d580 <at_ble_init+0x1a4>)
1000d496:	3b81      	subs	r3, #129	; 0x81
1000d498:	7023      	strb	r3, [r4, #0]
1000d49a:	4b3a      	ldr	r3, [pc, #232]	; (1000d584 <at_ble_init+0x1a8>)
1000d49c:	4a3a      	ldr	r2, [pc, #232]	; (1000d588 <at_ble_init+0x1ac>)
1000d49e:	8063      	strh	r3, [r4, #2]
1000d4a0:	2300      	movs	r3, #0
1000d4a2:	7123      	strb	r3, [r4, #4]
1000d4a4:	3301      	adds	r3, #1
1000d4a6:	1e58      	subs	r0, r3, #1
1000d4a8:	0119      	lsls	r1, r3, #4
1000d4aa:	4301      	orrs	r1, r0
1000d4ac:	3302      	adds	r3, #2
1000d4ae:	7011      	strb	r1, [r2, #0]
1000d4b0:	3201      	adds	r2, #1
1000d4b2:	2b21      	cmp	r3, #33	; 0x21
1000d4b4:	d1f7      	bne.n	1000d4a6 <at_ble_init+0xca>
1000d4b6:	33e0      	adds	r3, #224	; 0xe0
1000d4b8:	33ff      	adds	r3, #255	; 0xff
1000d4ba:	84a3      	strh	r3, [r4, #36]	; 0x24
1000d4bc:	1c23      	adds	r3, r4, #0
1000d4be:	2500      	movs	r5, #0
1000d4c0:	3373      	adds	r3, #115	; 0x73
1000d4c2:	701d      	strb	r5, [r3, #0]
1000d4c4:	1c23      	adds	r3, r4, #0
1000d4c6:	3372      	adds	r3, #114	; 0x72
1000d4c8:	701d      	strb	r5, [r3, #0]
1000d4ca:	1c23      	adds	r3, r4, #0
1000d4cc:	3376      	adds	r3, #118	; 0x76
1000d4ce:	701d      	strb	r5, [r3, #0]
1000d4d0:	1c23      	adds	r3, r4, #0
1000d4d2:	33cc      	adds	r3, #204	; 0xcc
1000d4d4:	801d      	strh	r5, [r3, #0]
1000d4d6:	1c22      	adds	r2, r4, #0
1000d4d8:	23a0      	movs	r3, #160	; 0xa0
1000d4da:	32d0      	adds	r2, #208	; 0xd0
1000d4dc:	005b      	lsls	r3, r3, #1
1000d4de:	8013      	strh	r3, [r2, #0]
1000d4e0:	1c22      	adds	r2, r4, #0
1000d4e2:	32ce      	adds	r2, #206	; 0xce
1000d4e4:	8013      	strh	r3, [r2, #0]
1000d4e6:	1c23      	adds	r3, r4, #0
1000d4e8:	33d2      	adds	r3, #210	; 0xd2
1000d4ea:	801d      	strh	r5, [r3, #0]
1000d4ec:	22fa      	movs	r2, #250	; 0xfa
1000d4ee:	1c23      	adds	r3, r4, #0
1000d4f0:	0052      	lsls	r2, r2, #1
1000d4f2:	33d4      	adds	r3, #212	; 0xd4
1000d4f4:	801a      	strh	r2, [r3, #0]
1000d4f6:	1c23      	adds	r3, r4, #0
1000d4f8:	33d6      	adds	r3, #214	; 0xd6
1000d4fa:	701d      	strb	r5, [r3, #0]
1000d4fc:	1c20      	adds	r0, r4, #0
1000d4fe:	4b23      	ldr	r3, [pc, #140]	; (1000d58c <at_ble_init+0x1b0>)
1000d500:	76e5      	strb	r5, [r4, #27]
1000d502:	7725      	strb	r5, [r4, #28]
1000d504:	7765      	strb	r5, [r4, #29]
1000d506:	77a5      	strb	r5, [r4, #30]
1000d508:	77e5      	strb	r5, [r4, #31]
1000d50a:	8425      	strh	r5, [r4, #32]
1000d50c:	8465      	strh	r5, [r4, #34]	; 0x22
1000d50e:	4798      	blx	r3
1000d510:	1c23      	adds	r3, r4, #0
1000d512:	2207      	movs	r2, #7
1000d514:	3374      	adds	r3, #116	; 0x74
1000d516:	701a      	strb	r2, [r3, #0]
1000d518:	1c23      	adds	r3, r4, #0
1000d51a:	3204      	adds	r2, #4
1000d51c:	33aa      	adds	r3, #170	; 0xaa
1000d51e:	801a      	strh	r2, [r3, #0]
1000d520:	1c2b      	adds	r3, r5, #0
1000d522:	5d7a      	ldrb	r2, [r7, r5]
1000d524:	33ac      	adds	r3, #172	; 0xac
1000d526:	3501      	adds	r5, #1
1000d528:	54e2      	strb	r2, [r4, r3]
1000d52a:	2d0b      	cmp	r5, #11
1000d52c:	d1f8      	bne.n	1000d520 <at_ble_init+0x144>
1000d52e:	1c30      	adds	r0, r6, #0
1000d530:	b007      	add	sp, #28
1000d532:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d534:	1001376c 	.word	0x1001376c
1000d538:	10010fa7 	.word	0x10010fa7
1000d53c:	100160d4 	.word	0x100160d4
1000d540:	100153bc 	.word	0x100153bc
1000d544:	1001531c 	.word	0x1001531c
1000d548:	1001389c 	.word	0x1001389c
1000d54c:	1000fb91 	.word	0x1000fb91
1000d550:	1000d84d 	.word	0x1000d84d
1000d554:	1000dead 	.word	0x1000dead
1000d558:	1000e161 	.word	0x1000e161
1000d55c:	1000dee9 	.word	0x1000dee9
1000d560:	10009511 	.word	0x10009511
1000d564:	1000e461 	.word	0x1000e461
1000d568:	10009755 	.word	0x10009755
1000d56c:	1000e509 	.word	0x1000e509
1000d570:	1000cac9 	.word	0x1000cac9
1000d574:	1000cb85 	.word	0x1000cb85
1000d578:	1000f0d1 	.word	0x1000f0d1
1000d57c:	100160d6 	.word	0x100160d6
1000d580:	10016166 	.word	0x10016166
1000d584:	00003a98 	.word	0x00003a98
1000d588:	10016171 	.word	0x10016171
1000d58c:	1000d34d 	.word	0x1000d34d

1000d590 <at_ble_addr_set>:
1000d590:	b538      	push	{r3, r4, r5, lr}
1000d592:	1c45      	adds	r5, r0, #1
1000d594:	1c03      	adds	r3, r0, #0
1000d596:	20cf      	movs	r0, #207	; 0xcf
1000d598:	2d00      	cmp	r5, #0
1000d59a:	d018      	beq.n	1000d5ce <at_ble_addr_set+0x3e>
1000d59c:	781a      	ldrb	r2, [r3, #0]
1000d59e:	2a03      	cmp	r2, #3
1000d5a0:	d815      	bhi.n	1000d5ce <at_ble_addr_set+0x3e>
1000d5a2:	2a01      	cmp	r2, #1
1000d5a4:	d102      	bne.n	1000d5ac <at_ble_addr_set+0x1c>
1000d5a6:	785a      	ldrb	r2, [r3, #1]
1000d5a8:	2a00      	cmp	r2, #0
1000d5aa:	d010      	beq.n	1000d5ce <at_ble_addr_set+0x3e>
1000d5ac:	1c1c      	adds	r4, r3, #0
1000d5ae:	1c29      	adds	r1, r5, #0
1000d5b0:	2206      	movs	r2, #6
1000d5b2:	4b07      	ldr	r3, [pc, #28]	; (1000d5d0 <at_ble_addr_set+0x40>)
1000d5b4:	4807      	ldr	r0, [pc, #28]	; (1000d5d4 <at_ble_addr_set+0x44>)
1000d5b6:	4798      	blx	r3
1000d5b8:	7823      	ldrb	r3, [r4, #0]
1000d5ba:	4807      	ldr	r0, [pc, #28]	; (1000d5d8 <at_ble_addr_set+0x48>)
1000d5bc:	7103      	strb	r3, [r0, #4]
1000d5be:	4b07      	ldr	r3, [pc, #28]	; (1000d5dc <at_ble_addr_set+0x4c>)
1000d5c0:	4798      	blx	r3
1000d5c2:	7823      	ldrb	r3, [r4, #0]
1000d5c4:	2b00      	cmp	r3, #0
1000d5c6:	d102      	bne.n	1000d5ce <at_ble_addr_set+0x3e>
1000d5c8:	1c28      	adds	r0, r5, #0
1000d5ca:	4b05      	ldr	r3, [pc, #20]	; (1000d5e0 <at_ble_addr_set+0x50>)
1000d5cc:	4798      	blx	r3
1000d5ce:	bd38      	pop	{r3, r4, r5, pc}
1000d5d0:	10010fa7 	.word	0x10010fa7
1000d5d4:	1001616b 	.word	0x1001616b
1000d5d8:	10016166 	.word	0x10016166
1000d5dc:	1000d34d 	.word	0x1000d34d
1000d5e0:	1000e58d 	.word	0x1000e58d

1000d5e4 <at_ble_adv_data_set>:
1000d5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d5e6:	4684      	mov	ip, r0
1000d5e8:	1c0f      	adds	r7, r1, #0
1000d5ea:	1c16      	adds	r6, r2, #0
1000d5ec:	1c1c      	adds	r4, r3, #0
1000d5ee:	2800      	cmp	r0, #0
1000d5f0:	d102      	bne.n	1000d5f8 <at_ble_adv_data_set+0x14>
1000d5f2:	20e2      	movs	r0, #226	; 0xe2
1000d5f4:	2a00      	cmp	r2, #0
1000d5f6:	d02b      	beq.n	1000d650 <at_ble_adv_data_set+0x6c>
1000d5f8:	20cf      	movs	r0, #207	; 0xcf
1000d5fa:	2f1f      	cmp	r7, #31
1000d5fc:	d828      	bhi.n	1000d650 <at_ble_adv_data_set+0x6c>
1000d5fe:	2c1f      	cmp	r4, #31
1000d600:	d826      	bhi.n	1000d650 <at_ble_adv_data_set+0x6c>
1000d602:	4663      	mov	r3, ip
1000d604:	2b00      	cmp	r3, #0
1000d606:	d00e      	beq.n	1000d626 <at_ble_adv_data_set+0x42>
1000d608:	4812      	ldr	r0, [pc, #72]	; (1000d654 <at_ble_adv_data_set+0x70>)
1000d60a:	4d13      	ldr	r5, [pc, #76]	; (1000d658 <at_ble_adv_data_set+0x74>)
1000d60c:	2f00      	cmp	r7, #0
1000d60e:	d104      	bne.n	1000d61a <at_ble_adv_data_set+0x36>
1000d610:	1c39      	adds	r1, r7, #0
1000d612:	221f      	movs	r2, #31
1000d614:	4b11      	ldr	r3, [pc, #68]	; (1000d65c <at_ble_adv_data_set+0x78>)
1000d616:	4798      	blx	r3
1000d618:	e003      	b.n	1000d622 <at_ble_adv_data_set+0x3e>
1000d61a:	4661      	mov	r1, ip
1000d61c:	1c3a      	adds	r2, r7, #0
1000d61e:	4b10      	ldr	r3, [pc, #64]	; (1000d660 <at_ble_adv_data_set+0x7c>)
1000d620:	4798      	blx	r3
1000d622:	3572      	adds	r5, #114	; 0x72
1000d624:	702f      	strb	r7, [r5, #0]
1000d626:	1e30      	subs	r0, r6, #0
1000d628:	d012      	beq.n	1000d650 <at_ble_adv_data_set+0x6c>
1000d62a:	4d0b      	ldr	r5, [pc, #44]	; (1000d658 <at_ble_adv_data_set+0x74>)
1000d62c:	480d      	ldr	r0, [pc, #52]	; (1000d664 <at_ble_adv_data_set+0x80>)
1000d62e:	2c00      	cmp	r4, #0
1000d630:	d107      	bne.n	1000d642 <at_ble_adv_data_set+0x5e>
1000d632:	1c21      	adds	r1, r4, #0
1000d634:	221f      	movs	r2, #31
1000d636:	4b09      	ldr	r3, [pc, #36]	; (1000d65c <at_ble_adv_data_set+0x78>)
1000d638:	3573      	adds	r5, #115	; 0x73
1000d63a:	4798      	blx	r3
1000d63c:	702c      	strb	r4, [r5, #0]
1000d63e:	1c20      	adds	r0, r4, #0
1000d640:	e006      	b.n	1000d650 <at_ble_adv_data_set+0x6c>
1000d642:	1c31      	adds	r1, r6, #0
1000d644:	1c22      	adds	r2, r4, #0
1000d646:	4b06      	ldr	r3, [pc, #24]	; (1000d660 <at_ble_adv_data_set+0x7c>)
1000d648:	4798      	blx	r3
1000d64a:	2000      	movs	r0, #0
1000d64c:	3573      	adds	r5, #115	; 0x73
1000d64e:	702c      	strb	r4, [r5, #0]
1000d650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d652:	46c0      	nop			; (mov r8, r8)
1000d654:	1001619a 	.word	0x1001619a
1000d658:	10016166 	.word	0x10016166
1000d65c:	10010fb9 	.word	0x10010fb9
1000d660:	10010fa7 	.word	0x10010fa7
1000d664:	100161b9 	.word	0x100161b9

1000d668 <at_ble_adv_start>:
1000d668:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d66a:	b091      	sub	sp, #68	; 0x44
1000d66c:	1c1f      	adds	r7, r3, #0
1000d66e:	ab16      	add	r3, sp, #88	; 0x58
1000d670:	881d      	ldrh	r5, [r3, #0]
1000d672:	ab17      	add	r3, sp, #92	; 0x5c
1000d674:	881b      	ldrh	r3, [r3, #0]
1000d676:	910d      	str	r1, [sp, #52]	; 0x34
1000d678:	930e      	str	r3, [sp, #56]	; 0x38
1000d67a:	ab18      	add	r3, sp, #96	; 0x60
1000d67c:	781b      	ldrb	r3, [r3, #0]
1000d67e:	1c04      	adds	r4, r0, #0
1000d680:	930f      	str	r3, [sp, #60]	; 0x3c
1000d682:	4b42      	ldr	r3, [pc, #264]	; (1000d78c <at_ble_adv_start+0x124>)
1000d684:	1c16      	adds	r6, r2, #0
1000d686:	3373      	adds	r3, #115	; 0x73
1000d688:	781b      	ldrb	r3, [r3, #0]
1000d68a:	20cf      	movs	r0, #207	; 0xcf
1000d68c:	930c      	str	r3, [sp, #48]	; 0x30
1000d68e:	2c01      	cmp	r4, #1
1000d690:	d103      	bne.n	1000d69a <at_ble_adv_start+0x32>
1000d692:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000d694:	2b00      	cmp	r3, #0
1000d696:	d176      	bne.n	1000d786 <at_ble_adv_start+0x11e>
1000d698:	e024      	b.n	1000d6e4 <at_ble_adv_start+0x7c>
1000d69a:	2c04      	cmp	r4, #4
1000d69c:	d873      	bhi.n	1000d786 <at_ble_adv_start+0x11e>
1000d69e:	2380      	movs	r3, #128	; 0x80
1000d6a0:	01db      	lsls	r3, r3, #7
1000d6a2:	429d      	cmp	r5, r3
1000d6a4:	d86f      	bhi.n	1000d786 <at_ble_adv_start+0x11e>
1000d6a6:	2c00      	cmp	r4, #0
1000d6a8:	d102      	bne.n	1000d6b0 <at_ble_adv_start+0x48>
1000d6aa:	2d1f      	cmp	r5, #31
1000d6ac:	d96b      	bls.n	1000d786 <at_ble_adv_start+0x11e>
1000d6ae:	e003      	b.n	1000d6b8 <at_ble_adv_start+0x50>
1000d6b0:	2d9f      	cmp	r5, #159	; 0x9f
1000d6b2:	d801      	bhi.n	1000d6b8 <at_ble_adv_start+0x50>
1000d6b4:	2c01      	cmp	r4, #1
1000d6b6:	d166      	bne.n	1000d786 <at_ble_adv_start+0x11e>
1000d6b8:	2f00      	cmp	r7, #0
1000d6ba:	d009      	beq.n	1000d6d0 <at_ble_adv_start+0x68>
1000d6bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000d6be:	20cf      	movs	r0, #207	; 0xcf
1000d6c0:	3b01      	subs	r3, #1
1000d6c2:	2b01      	cmp	r3, #1
1000d6c4:	d95f      	bls.n	1000d786 <at_ble_adv_start+0x11e>
1000d6c6:	2c01      	cmp	r4, #1
1000d6c8:	d102      	bne.n	1000d6d0 <at_ble_adv_start+0x68>
1000d6ca:	2d00      	cmp	r5, #0
1000d6cc:	d100      	bne.n	1000d6d0 <at_ble_adv_start+0x68>
1000d6ce:	3520      	adds	r5, #32
1000d6d0:	4b2f      	ldr	r3, [pc, #188]	; (1000d790 <at_ble_adv_start+0x128>)
1000d6d2:	4798      	blx	r3
1000d6d4:	1c01      	adds	r1, r0, #0
1000d6d6:	2e00      	cmp	r6, #0
1000d6d8:	d043      	beq.n	1000d762 <at_ble_adv_start+0xfa>
1000d6da:	7833      	ldrb	r3, [r6, #0]
1000d6dc:	1e60      	subs	r0, r4, #1
1000d6de:	2b00      	cmp	r3, #0
1000d6e0:	d109      	bne.n	1000d6f6 <at_ble_adv_start+0x8e>
1000d6e2:	e03b      	b.n	1000d75c <at_ble_adv_start+0xf4>
1000d6e4:	2380      	movs	r3, #128	; 0x80
1000d6e6:	01db      	lsls	r3, r3, #7
1000d6e8:	429d      	cmp	r5, r3
1000d6ea:	d84c      	bhi.n	1000d786 <at_ble_adv_start+0x11e>
1000d6ec:	2e00      	cmp	r6, #0
1000d6ee:	d04a      	beq.n	1000d786 <at_ble_adv_start+0x11e>
1000d6f0:	2f00      	cmp	r7, #0
1000d6f2:	d1e3      	bne.n	1000d6bc <at_ble_adv_start+0x54>
1000d6f4:	e02b      	b.n	1000d74e <at_ble_adv_start+0xe6>
1000d6f6:	2301      	movs	r3, #1
1000d6f8:	2803      	cmp	r0, #3
1000d6fa:	d93a      	bls.n	1000d772 <at_ble_adv_start+0x10a>
1000d6fc:	200d      	movs	r0, #13
1000d6fe:	1c72      	adds	r2, r6, #1
1000d700:	e002      	b.n	1000d708 <at_ble_adv_start+0xa0>
1000d702:	200e      	movs	r0, #14
1000d704:	1e32      	subs	r2, r6, #0
1000d706:	d1fa      	bne.n	1000d6fe <at_ble_adv_start+0x96>
1000d708:	4c20      	ldr	r4, [pc, #128]	; (1000d78c <at_ble_adv_start+0x124>)
1000d70a:	3474      	adds	r4, #116	; 0x74
1000d70c:	7826      	ldrb	r6, [r4, #0]
1000d70e:	2407      	movs	r4, #7
1000d710:	2e00      	cmp	r6, #0
1000d712:	d000      	beq.n	1000d716 <at_ble_adv_start+0xae>
1000d714:	1c34      	adds	r4, r6, #0
1000d716:	9200      	str	r2, [sp, #0]
1000d718:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000d71a:	9403      	str	r4, [sp, #12]
1000d71c:	9204      	str	r2, [sp, #16]
1000d71e:	4a1b      	ldr	r2, [pc, #108]	; (1000d78c <at_ble_adv_start+0x124>)
1000d720:	9501      	str	r5, [sp, #4]
1000d722:	9502      	str	r5, [sp, #8]
1000d724:	9705      	str	r7, [sp, #20]
1000d726:	3272      	adds	r2, #114	; 0x72
1000d728:	7812      	ldrb	r2, [r2, #0]
1000d72a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000d72c:	9206      	str	r2, [sp, #24]
1000d72e:	4a19      	ldr	r2, [pc, #100]	; (1000d794 <at_ble_adv_start+0x12c>)
1000d730:	9207      	str	r2, [sp, #28]
1000d732:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000d734:	9208      	str	r2, [sp, #32]
1000d736:	4a18      	ldr	r2, [pc, #96]	; (1000d798 <at_ble_adv_start+0x130>)
1000d738:	9209      	str	r2, [sp, #36]	; 0x24
1000d73a:	2264      	movs	r2, #100	; 0x64
1000d73c:	4362      	muls	r2, r4
1000d73e:	b292      	uxth	r2, r2
1000d740:	920a      	str	r2, [sp, #40]	; 0x28
1000d742:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000d744:	4c15      	ldr	r4, [pc, #84]	; (1000d79c <at_ble_adv_start+0x134>)
1000d746:	920b      	str	r2, [sp, #44]	; 0x2c
1000d748:	4a15      	ldr	r2, [pc, #84]	; (1000d7a0 <at_ble_adv_start+0x138>)
1000d74a:	47a0      	blx	r4
1000d74c:	e01b      	b.n	1000d786 <at_ble_adv_start+0x11e>
1000d74e:	2d00      	cmp	r5, #0
1000d750:	d1be      	bne.n	1000d6d0 <at_ble_adv_start+0x68>
1000d752:	4b0f      	ldr	r3, [pc, #60]	; (1000d790 <at_ble_adv_start+0x128>)
1000d754:	4798      	blx	r3
1000d756:	2520      	movs	r5, #32
1000d758:	1c01      	adds	r1, r0, #0
1000d75a:	e7be      	b.n	1000d6da <at_ble_adv_start+0x72>
1000d75c:	2803      	cmp	r0, #3
1000d75e:	d8cd      	bhi.n	1000d6fc <at_ble_adv_start+0x94>
1000d760:	e006      	b.n	1000d770 <at_ble_adv_start+0x108>
1000d762:	1e60      	subs	r0, r4, #1
1000d764:	2803      	cmp	r0, #3
1000d766:	d903      	bls.n	1000d770 <at_ble_adv_start+0x108>
1000d768:	1c33      	adds	r3, r6, #0
1000d76a:	200d      	movs	r0, #13
1000d76c:	1c32      	adds	r2, r6, #0
1000d76e:	e7cb      	b.n	1000d708 <at_ble_adv_start+0xa0>
1000d770:	2300      	movs	r3, #0
1000d772:	f002 fb7f 	bl	1000fe74 <__gnu_thumb1_case_sqi>
1000d776:	06c6      	.short	0x06c6
1000d778:	0204      	.short	0x0204
1000d77a:	200f      	movs	r0, #15
1000d77c:	e7c2      	b.n	1000d704 <at_ble_adv_start+0x9c>
1000d77e:	2200      	movs	r2, #0
1000d780:	920c      	str	r2, [sp, #48]	; 0x30
1000d782:	200c      	movs	r0, #12
1000d784:	e7be      	b.n	1000d704 <at_ble_adv_start+0x9c>
1000d786:	b011      	add	sp, #68	; 0x44
1000d788:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d78a:	46c0      	nop			; (mov r8, r8)
1000d78c:	10016166 	.word	0x10016166
1000d790:	1000f61d 	.word	0x1000f61d
1000d794:	1001619a 	.word	0x1001619a
1000d798:	100161b9 	.word	0x100161b9
1000d79c:	1000f4fd 	.word	0x1000f4fd
1000d7a0:	00003a98 	.word	0x00003a98

1000d7a4 <at_ble_adv_stop>:
1000d7a4:	b508      	push	{r3, lr}
1000d7a6:	4b01      	ldr	r3, [pc, #4]	; (1000d7ac <at_ble_adv_stop+0x8>)
1000d7a8:	4798      	blx	r3
1000d7aa:	bd08      	pop	{r3, pc}
1000d7ac:	1000f329 	.word	0x1000f329

1000d7b0 <at_ble_scan_stop>:
1000d7b0:	b510      	push	{r4, lr}
1000d7b2:	4b05      	ldr	r3, [pc, #20]	; (1000d7c8 <at_ble_scan_stop+0x18>)
1000d7b4:	4798      	blx	r3
1000d7b6:	1e04      	subs	r4, r0, #0
1000d7b8:	d103      	bne.n	1000d7c2 <at_ble_scan_stop+0x12>
1000d7ba:	20d1      	movs	r0, #209	; 0xd1
1000d7bc:	4b03      	ldr	r3, [pc, #12]	; (1000d7cc <at_ble_scan_stop+0x1c>)
1000d7be:	0100      	lsls	r0, r0, #4
1000d7c0:	4798      	blx	r3
1000d7c2:	1c20      	adds	r0, r4, #0
1000d7c4:	bd10      	pop	{r4, pc}
1000d7c6:	46c0      	nop			; (mov r8, r8)
1000d7c8:	1000f329 	.word	0x1000f329
1000d7cc:	1000d25d 	.word	0x1000d25d

1000d7d0 <at_ble_disconnect>:
1000d7d0:	b538      	push	{r3, r4, r5, lr}
1000d7d2:	1c04      	adds	r4, r0, #0
1000d7d4:	4b04      	ldr	r3, [pc, #16]	; (1000d7e8 <at_ble_disconnect+0x18>)
1000d7d6:	1c08      	adds	r0, r1, #0
1000d7d8:	1c21      	adds	r1, r4, #0
1000d7da:	4798      	blx	r3
1000d7dc:	1c05      	adds	r5, r0, #0
1000d7de:	4b03      	ldr	r3, [pc, #12]	; (1000d7ec <at_ble_disconnect+0x1c>)
1000d7e0:	1c20      	adds	r0, r4, #0
1000d7e2:	4798      	blx	r3
1000d7e4:	1c28      	adds	r0, r5, #0
1000d7e6:	bd38      	pop	{r3, r4, r5, pc}
1000d7e8:	1000e9a1 	.word	0x1000e9a1
1000d7ec:	1000d2a1 	.word	0x1000d2a1

1000d7f0 <at_ble_conn_update_reply>:
1000d7f0:	b510      	push	{r4, lr}
1000d7f2:	4c01      	ldr	r4, [pc, #4]	; (1000d7f8 <at_ble_conn_update_reply+0x8>)
1000d7f4:	47a0      	blx	r4
1000d7f6:	bd10      	pop	{r4, pc}
1000d7f8:	1000ee91 	.word	0x1000ee91

1000d7fc <at_ble_random_address_resolve>:
1000d7fc:	b510      	push	{r4, lr}
1000d7fe:	23cf      	movs	r3, #207	; 0xcf
1000d800:	2800      	cmp	r0, #0
1000d802:	d00a      	beq.n	1000d81a <at_ble_random_address_resolve+0x1e>
1000d804:	2900      	cmp	r1, #0
1000d806:	d008      	beq.n	1000d81a <at_ble_random_address_resolve+0x1e>
1000d808:	2a00      	cmp	r2, #0
1000d80a:	d006      	beq.n	1000d81a <at_ble_random_address_resolve+0x1e>
1000d80c:	780c      	ldrb	r4, [r1, #0]
1000d80e:	2c02      	cmp	r4, #2
1000d810:	d103      	bne.n	1000d81a <at_ble_random_address_resolve+0x1e>
1000d812:	4b03      	ldr	r3, [pc, #12]	; (1000d820 <at_ble_random_address_resolve+0x24>)
1000d814:	3101      	adds	r1, #1
1000d816:	4798      	blx	r3
1000d818:	2300      	movs	r3, #0
1000d81a:	1c18      	adds	r0, r3, #0
1000d81c:	bd10      	pop	{r4, pc}
1000d81e:	46c0      	nop			; (mov r8, r8)
1000d820:	1000f6bd 	.word	0x1000f6bd

1000d824 <at_ble_uuid_type2len>:
1000d824:	23cf      	movs	r3, #207	; 0xcf
1000d826:	2802      	cmp	r0, #2
1000d828:	d801      	bhi.n	1000d82e <at_ble_uuid_type2len+0xa>
1000d82a:	4b02      	ldr	r3, [pc, #8]	; (1000d834 <at_ble_uuid_type2len+0x10>)
1000d82c:	5c1b      	ldrb	r3, [r3, r0]
1000d82e:	1c18      	adds	r0, r3, #0
1000d830:	4770      	bx	lr
1000d832:	46c0      	nop			; (mov r8, r8)
1000d834:	10013777 	.word	0x10013777

1000d838 <at_ble_uuid_len2type>:
1000d838:	1e83      	subs	r3, r0, #2
1000d83a:	b2db      	uxtb	r3, r3
1000d83c:	2003      	movs	r0, #3
1000d83e:	2b0e      	cmp	r3, #14
1000d840:	d801      	bhi.n	1000d846 <at_ble_uuid_len2type+0xe>
1000d842:	4a01      	ldr	r2, [pc, #4]	; (1000d848 <at_ble_uuid_len2type+0x10>)
1000d844:	5cd0      	ldrb	r0, [r2, r3]
1000d846:	4770      	bx	lr
1000d848:	1001377a 	.word	0x1001377a

1000d84c <init_gatt_client_module>:
1000d84c:	2200      	movs	r2, #0
1000d84e:	4b01      	ldr	r3, [pc, #4]	; (1000d854 <init_gatt_client_module+0x8>)
1000d850:	801a      	strh	r2, [r3, #0]
1000d852:	4770      	bx	lr
1000d854:	10015314 	.word	0x10015314

1000d858 <db_searchATT>:
1000d858:	b570      	push	{r4, r5, r6, lr}
1000d85a:	1c05      	adds	r5, r0, #0
1000d85c:	2400      	movs	r4, #0
1000d85e:	4b0c      	ldr	r3, [pc, #48]	; (1000d890 <db_searchATT+0x38>)
1000d860:	6819      	ldr	r1, [r3, #0]
1000d862:	4b0c      	ldr	r3, [pc, #48]	; (1000d894 <db_searchATT+0x3c>)
1000d864:	681e      	ldr	r6, [r3, #0]
1000d866:	428c      	cmp	r4, r1
1000d868:	dc10      	bgt.n	1000d88c <db_searchATT+0x34>
1000d86a:	200c      	movs	r0, #12
1000d86c:	1863      	adds	r3, r4, r1
1000d86e:	0fda      	lsrs	r2, r3, #31
1000d870:	18d3      	adds	r3, r2, r3
1000d872:	1c02      	adds	r2, r0, #0
1000d874:	105b      	asrs	r3, r3, #1
1000d876:	435a      	muls	r2, r3
1000d878:	18b0      	adds	r0, r6, r2
1000d87a:	8802      	ldrh	r2, [r0, #0]
1000d87c:	42aa      	cmp	r2, r5
1000d87e:	d201      	bcs.n	1000d884 <db_searchATT+0x2c>
1000d880:	1e59      	subs	r1, r3, #1
1000d882:	e7f0      	b.n	1000d866 <db_searchATT+0xe>
1000d884:	42aa      	cmp	r2, r5
1000d886:	d902      	bls.n	1000d88e <db_searchATT+0x36>
1000d888:	1c5c      	adds	r4, r3, #1
1000d88a:	e7ec      	b.n	1000d866 <db_searchATT+0xe>
1000d88c:	2000      	movs	r0, #0
1000d88e:	bd70      	pop	{r4, r5, r6, pc}
1000d890:	10015328 	.word	0x10015328
1000d894:	10015320 	.word	0x10015320

1000d898 <att_permissions>:
1000d898:	b530      	push	{r4, r5, lr}
1000d89a:	2403      	movs	r4, #3
1000d89c:	1c05      	adds	r5, r0, #0
1000d89e:	2301      	movs	r3, #1
1000d8a0:	4025      	ands	r5, r4
1000d8a2:	42a5      	cmp	r5, r4
1000d8a4:	d009      	beq.n	1000d8ba <att_permissions+0x22>
1000d8a6:	1c23      	adds	r3, r4, #0
1000d8a8:	1924      	adds	r4, r4, r4
1000d8aa:	4220      	tst	r0, r4
1000d8ac:	d105      	bne.n	1000d8ba <att_permissions+0x22>
1000d8ae:	3b02      	subs	r3, #2
1000d8b0:	4218      	tst	r0, r3
1000d8b2:	d102      	bne.n	1000d8ba <att_permissions+0x22>
1000d8b4:	1e4b      	subs	r3, r1, #1
1000d8b6:	4199      	sbcs	r1, r3
1000d8b8:	b28b      	uxth	r3, r1
1000d8ba:	2130      	movs	r1, #48	; 0x30
1000d8bc:	4001      	ands	r1, r0
1000d8be:	2930      	cmp	r1, #48	; 0x30
1000d8c0:	d007      	beq.n	1000d8d2 <att_permissions+0x3a>
1000d8c2:	0641      	lsls	r1, r0, #25
1000d8c4:	d401      	bmi.n	1000d8ca <att_permissions+0x32>
1000d8c6:	0681      	lsls	r1, r0, #26
1000d8c8:	d501      	bpl.n	1000d8ce <att_permissions+0x36>
1000d8ca:	4807      	ldr	r0, [pc, #28]	; (1000d8e8 <att_permissions+0x50>)
1000d8cc:	e009      	b.n	1000d8e2 <att_permissions+0x4a>
1000d8ce:	06c1      	lsls	r1, r0, #27
1000d8d0:	d501      	bpl.n	1000d8d6 <att_permissions+0x3e>
1000d8d2:	4806      	ldr	r0, [pc, #24]	; (1000d8ec <att_permissions+0x54>)
1000d8d4:	e005      	b.n	1000d8e2 <att_permissions+0x4a>
1000d8d6:	2a00      	cmp	r2, #0
1000d8d8:	d001      	beq.n	1000d8de <att_permissions+0x46>
1000d8da:	2204      	movs	r2, #4
1000d8dc:	4313      	orrs	r3, r2
1000d8de:	2080      	movs	r0, #128	; 0x80
1000d8e0:	0180      	lsls	r0, r0, #6
1000d8e2:	4318      	orrs	r0, r3
1000d8e4:	bd30      	pop	{r4, r5, pc}
1000d8e6:	46c0      	nop			; (mov r8, r8)
1000d8e8:	0000200c 	.word	0x0000200c
1000d8ec:	00002004 	.word	0x00002004

1000d8f0 <char_permissions>:
1000d8f0:	b530      	push	{r4, r5, lr}
1000d8f2:	2300      	movs	r3, #0
1000d8f4:	0784      	lsls	r4, r0, #30
1000d8f6:	d503      	bpl.n	1000d900 <char_permissions+0x10>
1000d8f8:	3301      	adds	r3, #1
1000d8fa:	4219      	tst	r1, r3
1000d8fc:	d100      	bne.n	1000d900 <char_permissions+0x10>
1000d8fe:	3302      	adds	r3, #2
1000d900:	0704      	lsls	r4, r0, #28
1000d902:	d508      	bpl.n	1000d916 <char_permissions+0x26>
1000d904:	06cc      	lsls	r4, r1, #27
1000d906:	d501      	bpl.n	1000d90c <char_permissions+0x1c>
1000d908:	2404      	movs	r4, #4
1000d90a:	e000      	b.n	1000d90e <char_permissions+0x1e>
1000d90c:	240c      	movs	r4, #12
1000d90e:	4323      	orrs	r3, r4
1000d910:	2480      	movs	r4, #128	; 0x80
1000d912:	01a4      	lsls	r4, r4, #6
1000d914:	4323      	orrs	r3, r4
1000d916:	0684      	lsls	r4, r0, #26
1000d918:	d506      	bpl.n	1000d928 <char_permissions+0x38>
1000d91a:	2406      	movs	r4, #6
1000d91c:	4221      	tst	r1, r4
1000d91e:	d101      	bne.n	1000d924 <char_permissions+0x34>
1000d920:	340a      	adds	r4, #10
1000d922:	e000      	b.n	1000d926 <char_permissions+0x36>
1000d924:	2430      	movs	r4, #48	; 0x30
1000d926:	4323      	orrs	r3, r4
1000d928:	06c4      	lsls	r4, r0, #27
1000d92a:	d506      	bpl.n	1000d93a <char_permissions+0x4a>
1000d92c:	2406      	movs	r4, #6
1000d92e:	4221      	tst	r1, r4
1000d930:	d101      	bne.n	1000d936 <char_permissions+0x46>
1000d932:	343a      	adds	r4, #58	; 0x3a
1000d934:	e000      	b.n	1000d938 <char_permissions+0x48>
1000d936:	24c0      	movs	r4, #192	; 0xc0
1000d938:	4323      	orrs	r3, r4
1000d93a:	2480      	movs	r4, #128	; 0x80
1000d93c:	0064      	lsls	r4, r4, #1
1000d93e:	4220      	tst	r0, r4
1000d940:	d000      	beq.n	1000d944 <char_permissions+0x54>
1000d942:	4323      	orrs	r3, r4
1000d944:	07c4      	lsls	r4, r0, #31
1000d946:	d502      	bpl.n	1000d94e <char_permissions+0x5e>
1000d948:	2480      	movs	r4, #128	; 0x80
1000d94a:	00a4      	lsls	r4, r4, #2
1000d94c:	4323      	orrs	r3, r4
1000d94e:	2404      	movs	r4, #4
1000d950:	4220      	tst	r0, r4
1000d952:	d006      	beq.n	1000d962 <char_permissions+0x72>
1000d954:	06cd      	lsls	r5, r1, #27
1000d956:	d400      	bmi.n	1000d95a <char_permissions+0x6a>
1000d958:	240c      	movs	r4, #12
1000d95a:	4323      	orrs	r3, r4
1000d95c:	2480      	movs	r4, #128	; 0x80
1000d95e:	0124      	lsls	r4, r4, #4
1000d960:	4323      	orrs	r3, r4
1000d962:	0644      	lsls	r4, r0, #25
1000d964:	d501      	bpl.n	1000d96a <char_permissions+0x7a>
1000d966:	4c08      	ldr	r4, [pc, #32]	; (1000d988 <char_permissions+0x98>)
1000d968:	4323      	orrs	r3, r4
1000d96a:	0600      	lsls	r0, r0, #24
1000d96c:	d507      	bpl.n	1000d97e <char_permissions+0x8e>
1000d96e:	2004      	movs	r0, #4
1000d970:	06c9      	lsls	r1, r1, #27
1000d972:	d400      	bmi.n	1000d976 <char_permissions+0x86>
1000d974:	200c      	movs	r0, #12
1000d976:	4303      	orrs	r3, r0
1000d978:	2084      	movs	r0, #132	; 0x84
1000d97a:	0180      	lsls	r0, r0, #6
1000d97c:	4303      	orrs	r3, r0
1000d97e:	0390      	lsls	r0, r2, #14
1000d980:	4303      	orrs	r3, r0
1000d982:	b298      	uxth	r0, r3
1000d984:	bd30      	pop	{r4, r5, pc}
1000d986:	46c0      	nop			; (mov r8, r8)
1000d988:	00001004 	.word	0x00001004

1000d98c <presentation_format_define>:
1000d98c:	b507      	push	{r0, r1, r2, lr}
1000d98e:	466a      	mov	r2, sp
1000d990:	780b      	ldrb	r3, [r1, #0]
1000d992:	7013      	strb	r3, [r2, #0]
1000d994:	784b      	ldrb	r3, [r1, #1]
1000d996:	7053      	strb	r3, [r2, #1]
1000d998:	884b      	ldrh	r3, [r1, #2]
1000d99a:	7093      	strb	r3, [r2, #2]
1000d99c:	0a1b      	lsrs	r3, r3, #8
1000d99e:	70d3      	strb	r3, [r2, #3]
1000d9a0:	790b      	ldrb	r3, [r1, #4]
1000d9a2:	7113      	strb	r3, [r2, #4]
1000d9a4:	88cb      	ldrh	r3, [r1, #6]
1000d9a6:	2107      	movs	r1, #7
1000d9a8:	7153      	strb	r3, [r2, #5]
1000d9aa:	0a1b      	lsrs	r3, r3, #8
1000d9ac:	7193      	strb	r3, [r2, #6]
1000d9ae:	4b01      	ldr	r3, [pc, #4]	; (1000d9b4 <presentation_format_define+0x28>)
1000d9b0:	4798      	blx	r3
1000d9b2:	bd0e      	pop	{r1, r2, r3, pc}
1000d9b4:	1000fd21 	.word	0x1000fd21

1000d9b8 <db_addATT>:
1000d9b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d9ba:	4c29      	ldr	r4, [pc, #164]	; (1000da60 <db_addATT+0xa8>)
1000d9bc:	1c1d      	adds	r5, r3, #0
1000d9be:	6823      	ldr	r3, [r4, #0]
1000d9c0:	9001      	str	r0, [sp, #4]
1000d9c2:	26d3      	movs	r6, #211	; 0xd3
1000d9c4:	2b00      	cmp	r3, #0
1000d9c6:	d048      	beq.n	1000da5a <db_addATT+0xa2>
1000d9c8:	1c1e      	adds	r6, r3, #0
1000d9ca:	3e0c      	subs	r6, #12
1000d9cc:	6026      	str	r6, [r4, #0]
1000d9ce:	2900      	cmp	r1, #0
1000d9d0:	d005      	beq.n	1000d9de <db_addATT+0x26>
1000d9d2:	4f24      	ldr	r7, [pc, #144]	; (1000da64 <db_addATT+0xac>)
1000d9d4:	46bc      	mov	ip, r7
1000d9d6:	4660      	mov	r0, ip
1000d9d8:	683f      	ldr	r7, [r7, #0]
1000d9da:	18bf      	adds	r7, r7, r2
1000d9dc:	6007      	str	r7, [r0, #0]
1000d9de:	4821      	ldr	r0, [pc, #132]	; (1000da64 <db_addATT+0xac>)
1000d9e0:	6807      	ldr	r7, [r0, #0]
1000d9e2:	4684      	mov	ip, r0
1000d9e4:	42be      	cmp	r6, r7
1000d9e6:	d932      	bls.n	1000da4e <db_addATT+0x96>
1000d9e8:	4668      	mov	r0, sp
1000d9ea:	8880      	ldrh	r0, [r0, #4]
1000d9ec:	3b0c      	subs	r3, #12
1000d9ee:	8018      	strh	r0, [r3, #0]
1000d9f0:	6823      	ldr	r3, [r4, #0]
1000d9f2:	2900      	cmp	r1, #0
1000d9f4:	d009      	beq.n	1000da0a <db_addATT+0x52>
1000d9f6:	2a00      	cmp	r2, #0
1000d9f8:	d007      	beq.n	1000da0a <db_addATT+0x52>
1000d9fa:	4660      	mov	r0, ip
1000d9fc:	6800      	ldr	r0, [r0, #0]
1000d9fe:	809a      	strh	r2, [r3, #4]
1000da00:	1a80      	subs	r0, r0, r2
1000da02:	6098      	str	r0, [r3, #8]
1000da04:	4b18      	ldr	r3, [pc, #96]	; (1000da68 <db_addATT+0xb0>)
1000da06:	4798      	blx	r3
1000da08:	e002      	b.n	1000da10 <db_addATT+0x58>
1000da0a:	2100      	movs	r1, #0
1000da0c:	809a      	strh	r2, [r3, #4]
1000da0e:	6099      	str	r1, [r3, #8]
1000da10:	2300      	movs	r3, #0
1000da12:	6822      	ldr	r2, [r4, #0]
1000da14:	7093      	strb	r3, [r2, #2]
1000da16:	3303      	adds	r3, #3
1000da18:	402b      	ands	r3, r5
1000da1a:	2b03      	cmp	r3, #3
1000da1c:	d001      	beq.n	1000da22 <db_addATT+0x6a>
1000da1e:	076b      	lsls	r3, r5, #29
1000da20:	d504      	bpl.n	1000da2c <db_addATT+0x74>
1000da22:	2101      	movs	r1, #1
1000da24:	6822      	ldr	r2, [r4, #0]
1000da26:	7893      	ldrb	r3, [r2, #2]
1000da28:	430b      	orrs	r3, r1
1000da2a:	7093      	strb	r3, [r2, #2]
1000da2c:	2330      	movs	r3, #48	; 0x30
1000da2e:	402b      	ands	r3, r5
1000da30:	2b30      	cmp	r3, #48	; 0x30
1000da32:	d001      	beq.n	1000da38 <db_addATT+0x80>
1000da34:	066b      	lsls	r3, r5, #25
1000da36:	d504      	bpl.n	1000da42 <db_addATT+0x8a>
1000da38:	2102      	movs	r1, #2
1000da3a:	6822      	ldr	r2, [r4, #0]
1000da3c:	7893      	ldrb	r3, [r2, #2]
1000da3e:	430b      	orrs	r3, r1
1000da40:	7093      	strb	r3, [r2, #2]
1000da42:	4a0a      	ldr	r2, [pc, #40]	; (1000da6c <db_addATT+0xb4>)
1000da44:	2600      	movs	r6, #0
1000da46:	6813      	ldr	r3, [r2, #0]
1000da48:	3301      	adds	r3, #1
1000da4a:	6013      	str	r3, [r2, #0]
1000da4c:	e005      	b.n	1000da5a <db_addATT+0xa2>
1000da4e:	6023      	str	r3, [r4, #0]
1000da50:	2611      	movs	r6, #17
1000da52:	2900      	cmp	r1, #0
1000da54:	d001      	beq.n	1000da5a <db_addATT+0xa2>
1000da56:	1aba      	subs	r2, r7, r2
1000da58:	6002      	str	r2, [r0, #0]
1000da5a:	1c30      	adds	r0, r6, #0
1000da5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000da5e:	46c0      	nop			; (mov r8, r8)
1000da60:	10015320 	.word	0x10015320
1000da64:	10015324 	.word	0x10015324
1000da68:	10010fa7 	.word	0x10010fa7
1000da6c:	10015328 	.word	0x10015328

1000da70 <user_description_define>:
1000da70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000da72:	1c05      	adds	r5, r0, #0
1000da74:	20cf      	movs	r0, #207	; 0xcf
1000da76:	2a00      	cmp	r2, #0
1000da78:	d01c      	beq.n	1000dab4 <user_description_define+0x44>
1000da7a:	1c14      	adds	r4, r2, #0
1000da7c:	2203      	movs	r2, #3
1000da7e:	1c1e      	adds	r6, r3, #0
1000da80:	400a      	ands	r2, r1
1000da82:	1c0b      	adds	r3, r1, #0
1000da84:	3a03      	subs	r2, #3
1000da86:	4251      	negs	r1, r2
1000da88:	4151      	adcs	r1, r2
1000da8a:	075a      	lsls	r2, r3, #29
1000da8c:	0fd2      	lsrs	r2, r2, #31
1000da8e:	430a      	orrs	r2, r1
1000da90:	03d2      	lsls	r2, r2, #15
1000da92:	4f09      	ldr	r7, [pc, #36]	; (1000dab8 <user_description_define+0x48>)
1000da94:	1c28      	adds	r0, r5, #0
1000da96:	2a00      	cmp	r2, #0
1000da98:	d003      	beq.n	1000daa2 <user_description_define+0x32>
1000da9a:	1c21      	adds	r1, r4, #0
1000da9c:	1c32      	adds	r2, r6, #0
1000da9e:	47b8      	blx	r7
1000daa0:	e008      	b.n	1000dab4 <user_description_define+0x44>
1000daa2:	1c11      	adds	r1, r2, #0
1000daa4:	47b8      	blx	r7
1000daa6:	2800      	cmp	r0, #0
1000daa8:	d104      	bne.n	1000dab4 <user_description_define+0x44>
1000daaa:	1c28      	adds	r0, r5, #0
1000daac:	1c31      	adds	r1, r6, #0
1000daae:	1c22      	adds	r2, r4, #0
1000dab0:	4b02      	ldr	r3, [pc, #8]	; (1000dabc <user_description_define+0x4c>)
1000dab2:	4798      	blx	r3
1000dab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000dab6:	46c0      	nop			; (mov r8, r8)
1000dab8:	1000d9b9 	.word	0x1000d9b9
1000dabc:	1000fd21 	.word	0x1000fd21

1000dac0 <at_ble_read_authorize_reply.part.1>:
1000dac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000dac2:	4b09      	ldr	r3, [pc, #36]	; (1000dae8 <at_ble_read_authorize_reply.part.1+0x28>)
1000dac4:	1c05      	adds	r5, r0, #0
1000dac6:	1c08      	adds	r0, r1, #0
1000dac8:	1c0c      	adds	r4, r1, #0
1000daca:	4798      	blx	r3
1000dacc:	2800      	cmp	r0, #0
1000dace:	d009      	beq.n	1000dae4 <at_ble_read_authorize_reply.part.1+0x24>
1000dad0:	6882      	ldr	r2, [r0, #8]
1000dad2:	2a00      	cmp	r2, #0
1000dad4:	d006      	beq.n	1000dae4 <at_ble_read_authorize_reply.part.1+0x24>
1000dad6:	8883      	ldrh	r3, [r0, #4]
1000dad8:	1c29      	adds	r1, r5, #0
1000dada:	9200      	str	r2, [sp, #0]
1000dadc:	1c20      	adds	r0, r4, #0
1000dade:	2200      	movs	r2, #0
1000dae0:	4c02      	ldr	r4, [pc, #8]	; (1000daec <at_ble_read_authorize_reply.part.1+0x2c>)
1000dae2:	47a0      	blx	r4
1000dae4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000dae6:	46c0      	nop			; (mov r8, r8)
1000dae8:	1000d859 	.word	0x1000d859
1000daec:	1000f7b9 	.word	0x1000f7b9

1000daf0 <internal_at_ble_service_define>:
1000daf0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000daf2:	b08b      	sub	sp, #44	; 0x2c
1000daf4:	9306      	str	r3, [sp, #24]
1000daf6:	ab10      	add	r3, sp, #64	; 0x40
1000daf8:	9202      	str	r2, [sp, #8]
1000dafa:	cb04      	ldmia	r3!, {r2}
1000dafc:	1c05      	adds	r5, r0, #0
1000dafe:	881b      	ldrh	r3, [r3, #0]
1000db00:	9105      	str	r1, [sp, #20]
1000db02:	9303      	str	r3, [sp, #12]
1000db04:	ab12      	add	r3, sp, #72	; 0x48
1000db06:	781b      	ldrb	r3, [r3, #0]
1000db08:	20cf      	movs	r0, #207	; 0xcf
1000db0a:	9304      	str	r3, [sp, #16]
1000db0c:	2d00      	cmp	r5, #0
1000db0e:	d100      	bne.n	1000db12 <internal_at_ble_service_define+0x22>
1000db10:	e1ca      	b.n	1000dea8 <internal_at_ble_service_define+0x3b8>
1000db12:	2900      	cmp	r1, #0
1000db14:	d100      	bne.n	1000db18 <internal_at_ble_service_define+0x28>
1000db16:	e1c7      	b.n	1000dea8 <internal_at_ble_service_define+0x3b8>
1000db18:	2a00      	cmp	r2, #0
1000db1a:	d100      	bne.n	1000db1e <internal_at_ble_service_define+0x2e>
1000db1c:	e1c4      	b.n	1000dea8 <internal_at_ble_service_define+0x3b8>
1000db1e:	9b03      	ldr	r3, [sp, #12]
1000db20:	2b00      	cmp	r3, #0
1000db22:	d100      	bne.n	1000db26 <internal_at_ble_service_define+0x36>
1000db24:	e1c0      	b.n	1000dea8 <internal_at_ble_service_define+0x3b8>
1000db26:	4bc9      	ldr	r3, [pc, #804]	; (1000de4c <internal_at_ble_service_define+0x35c>)
1000db28:	3004      	adds	r0, #4
1000db2a:	681e      	ldr	r6, [r3, #0]
1000db2c:	2e00      	cmp	r6, #0
1000db2e:	d100      	bne.n	1000db32 <internal_at_ble_service_define+0x42>
1000db30:	e1ba      	b.n	1000dea8 <internal_at_ble_service_define+0x3b8>
1000db32:	2400      	movs	r4, #0
1000db34:	4bc6      	ldr	r3, [pc, #792]	; (1000de50 <internal_at_ble_service_define+0x360>)
1000db36:	8034      	strh	r4, [r6, #0]
1000db38:	881b      	ldrh	r3, [r3, #0]
1000db3a:	1db7      	adds	r7, r6, #6
1000db3c:	1c21      	adds	r1, r4, #0
1000db3e:	2210      	movs	r2, #16
1000db40:	8073      	strh	r3, [r6, #2]
1000db42:	1c38      	adds	r0, r7, #0
1000db44:	4bc3      	ldr	r3, [pc, #780]	; (1000de54 <internal_at_ble_service_define+0x364>)
1000db46:	4798      	blx	r3
1000db48:	7828      	ldrb	r0, [r5, #0]
1000db4a:	4bc3      	ldr	r3, [pc, #780]	; (1000de58 <internal_at_ble_service_define+0x368>)
1000db4c:	4798      	blx	r3
1000db4e:	1c69      	adds	r1, r5, #1
1000db50:	1c02      	adds	r2, r0, #0
1000db52:	4bc2      	ldr	r3, [pc, #776]	; (1000de5c <internal_at_ble_service_define+0x36c>)
1000db54:	1c38      	adds	r0, r7, #0
1000db56:	4798      	blx	r3
1000db58:	2204      	movs	r2, #4
1000db5a:	782b      	ldrb	r3, [r5, #0]
1000db5c:	9d02      	ldr	r5, [sp, #8]
1000db5e:	011b      	lsls	r3, r3, #4
1000db60:	4313      	orrs	r3, r2
1000db62:	9a04      	ldr	r2, [sp, #16]
1000db64:	7174      	strb	r4, [r6, #5]
1000db66:	0192      	lsls	r2, r2, #6
1000db68:	4313      	orrs	r3, r2
1000db6a:	7133      	strb	r3, [r6, #4]
1000db6c:	2316      	movs	r3, #22
1000db6e:	9a06      	ldr	r2, [sp, #24]
1000db70:	3512      	adds	r5, #18
1000db72:	4353      	muls	r3, r2
1000db74:	9a02      	ldr	r2, [sp, #8]
1000db76:	3312      	adds	r3, #18
1000db78:	18d7      	adds	r7, r2, r3
1000db7a:	42bd      	cmp	r5, r7
1000db7c:	d00f      	beq.n	1000db9e <internal_at_ble_service_define+0xae>
1000db7e:	4bb8      	ldr	r3, [pc, #736]	; (1000de60 <internal_at_ble_service_define+0x370>)
1000db80:	8829      	ldrh	r1, [r5, #0]
1000db82:	9300      	str	r3, [sp, #0]
1000db84:	230e      	movs	r3, #14
1000db86:	aa06      	add	r2, sp, #24
1000db88:	189b      	adds	r3, r3, r2
1000db8a:	9301      	str	r3, [sp, #4]
1000db8c:	4cb5      	ldr	r4, [pc, #724]	; (1000de64 <internal_at_ble_service_define+0x374>)
1000db8e:	1c30      	adds	r0, r6, #0
1000db90:	2201      	movs	r2, #1
1000db92:	2302      	movs	r3, #2
1000db94:	47a0      	blx	r4
1000db96:	3516      	adds	r5, #22
1000db98:	1e04      	subs	r4, r0, #0
1000db9a:	d0ee      	beq.n	1000db7a <internal_at_ble_service_define+0x8a>
1000db9c:	e183      	b.n	1000dea6 <internal_at_ble_service_define+0x3b6>
1000db9e:	9f10      	ldr	r7, [sp, #64]	; 0x40
1000dba0:	2300      	movs	r3, #0
1000dba2:	3714      	adds	r7, #20
1000dba4:	1c3d      	adds	r5, r7, #0
1000dba6:	9302      	str	r3, [sp, #8]
1000dba8:	9b02      	ldr	r3, [sp, #8]
1000dbaa:	9a03      	ldr	r2, [sp, #12]
1000dbac:	4293      	cmp	r3, r2
1000dbae:	db00      	blt.n	1000dbb2 <internal_at_ble_service_define+0xc2>
1000dbb0:	e0bf      	b.n	1000dd32 <internal_at_ble_service_define+0x242>
1000dbb2:	4bad      	ldr	r3, [pc, #692]	; (1000de68 <internal_at_ble_service_define+0x378>)
1000dbb4:	aa06      	add	r2, sp, #24
1000dbb6:	9300      	str	r3, [sp, #0]
1000dbb8:	230e      	movs	r3, #14
1000dbba:	189b      	adds	r3, r3, r2
1000dbbc:	9301      	str	r3, [sp, #4]
1000dbbe:	4ca9      	ldr	r4, [pc, #676]	; (1000de64 <internal_at_ble_service_define+0x374>)
1000dbc0:	1c30      	adds	r0, r6, #0
1000dbc2:	2104      	movs	r1, #4
1000dbc4:	2201      	movs	r2, #1
1000dbc6:	2302      	movs	r3, #2
1000dbc8:	47a0      	blx	r4
1000dbca:	1e04      	subs	r4, r0, #0
1000dbcc:	d000      	beq.n	1000dbd0 <internal_at_ble_service_define+0xe0>
1000dbce:	e16a      	b.n	1000dea6 <internal_at_ble_service_define+0x3b6>
1000dbd0:	1c2b      	adds	r3, r5, #0
1000dbd2:	3b12      	subs	r3, #18
1000dbd4:	7b2c      	ldrb	r4, [r5, #12]
1000dbd6:	781b      	ldrb	r3, [r3, #0]
1000dbd8:	1c21      	adds	r1, r4, #0
1000dbda:	1c1a      	adds	r2, r3, #0
1000dbdc:	9304      	str	r3, [sp, #16]
1000dbde:	8828      	ldrh	r0, [r5, #0]
1000dbe0:	4ba2      	ldr	r3, [pc, #648]	; (1000de6c <internal_at_ble_service_define+0x37c>)
1000dbe2:	4798      	blx	r3
1000dbe4:	2303      	movs	r3, #3
1000dbe6:	4023      	ands	r3, r4
1000dbe8:	3b03      	subs	r3, #3
1000dbea:	4259      	negs	r1, r3
1000dbec:	4159      	adcs	r1, r3
1000dbee:	2301      	movs	r3, #1
1000dbf0:	08a4      	lsrs	r4, r4, #2
1000dbf2:	401c      	ands	r4, r3
1000dbf4:	430c      	orrs	r4, r1
1000dbf6:	896b      	ldrh	r3, [r5, #10]
1000dbf8:	03e4      	lsls	r4, r4, #15
1000dbfa:	431c      	orrs	r4, r3
1000dbfc:	9007      	str	r0, [sp, #28]
1000dbfe:	4b96      	ldr	r3, [pc, #600]	; (1000de58 <internal_at_ble_service_define+0x368>)
1000dc00:	9804      	ldr	r0, [sp, #16]
1000dc02:	4798      	blx	r3
1000dc04:	1c2a      	adds	r2, r5, #0
1000dc06:	3a11      	subs	r2, #17
1000dc08:	9200      	str	r2, [sp, #0]
1000dc0a:	3a03      	subs	r2, #3
1000dc0c:	1c03      	adds	r3, r0, #0
1000dc0e:	9201      	str	r2, [sp, #4]
1000dc10:	1c21      	adds	r1, r4, #0
1000dc12:	1c30      	adds	r0, r6, #0
1000dc14:	4c93      	ldr	r4, [pc, #588]	; (1000de64 <internal_at_ble_service_define+0x374>)
1000dc16:	9a07      	ldr	r2, [sp, #28]
1000dc18:	47a0      	blx	r4
1000dc1a:	1e04      	subs	r4, r0, #0
1000dc1c:	d000      	beq.n	1000dc20 <internal_at_ble_service_define+0x130>
1000dc1e:	e142      	b.n	1000dea6 <internal_at_ble_service_define+0x3b6>
1000dc20:	22c0      	movs	r2, #192	; 0xc0
1000dc22:	882b      	ldrh	r3, [r5, #0]
1000dc24:	0052      	lsls	r2, r2, #1
1000dc26:	4213      	tst	r3, r2
1000dc28:	d104      	bne.n	1000dc34 <internal_at_ble_service_define+0x144>
1000dc2a:	8aab      	ldrh	r3, [r5, #20]
1000dc2c:	9304      	str	r3, [sp, #16]
1000dc2e:	2b00      	cmp	r3, #0
1000dc30:	d116      	bne.n	1000dc60 <internal_at_ble_service_define+0x170>
1000dc32:	e03a      	b.n	1000dcaa <internal_at_ble_service_define+0x1ba>
1000dc34:	2201      	movs	r2, #1
1000dc36:	09d9      	lsrs	r1, r3, #7
1000dc38:	4011      	ands	r1, r2
1000dc3a:	05db      	lsls	r3, r3, #23
1000dc3c:	d501      	bpl.n	1000dc42 <internal_at_ble_service_define+0x152>
1000dc3e:	2302      	movs	r3, #2
1000dc40:	4319      	orrs	r1, r3
1000dc42:	4b8b      	ldr	r3, [pc, #556]	; (1000de70 <internal_at_ble_service_define+0x380>)
1000dc44:	aa06      	add	r2, sp, #24
1000dc46:	9300      	str	r3, [sp, #0]
1000dc48:	230e      	movs	r3, #14
1000dc4a:	189b      	adds	r3, r3, r2
1000dc4c:	9301      	str	r3, [sp, #4]
1000dc4e:	4c85      	ldr	r4, [pc, #532]	; (1000de64 <internal_at_ble_service_define+0x374>)
1000dc50:	0209      	lsls	r1, r1, #8
1000dc52:	1c30      	adds	r0, r6, #0
1000dc54:	2201      	movs	r2, #1
1000dc56:	2302      	movs	r3, #2
1000dc58:	47a0      	blx	r4
1000dc5a:	1e04      	subs	r4, r0, #0
1000dc5c:	d0e5      	beq.n	1000dc2a <internal_at_ble_service_define+0x13a>
1000dc5e:	e122      	b.n	1000dea6 <internal_at_ble_service_define+0x3b6>
1000dc60:	2380      	movs	r3, #128	; 0x80
1000dc62:	882a      	ldrh	r2, [r5, #0]
1000dc64:	7f2c      	ldrb	r4, [r5, #28]
1000dc66:	005b      	lsls	r3, r3, #1
1000dc68:	401a      	ands	r2, r3
1000dc6a:	1c20      	adds	r0, r4, #0
1000dc6c:	2101      	movs	r1, #1
1000dc6e:	2a00      	cmp	r2, #0
1000dc70:	d000      	beq.n	1000dc74 <internal_at_ble_service_define+0x184>
1000dc72:	1c0a      	adds	r2, r1, #0
1000dc74:	4b7f      	ldr	r3, [pc, #508]	; (1000de74 <internal_at_ble_service_define+0x384>)
1000dc76:	4798      	blx	r3
1000dc78:	2203      	movs	r2, #3
1000dc7a:	4022      	ands	r2, r4
1000dc7c:	3a03      	subs	r2, #3
1000dc7e:	4251      	negs	r1, r2
1000dc80:	4151      	adcs	r1, r2
1000dc82:	4b7d      	ldr	r3, [pc, #500]	; (1000de78 <internal_at_ble_service_define+0x388>)
1000dc84:	1c0a      	adds	r2, r1, #0
1000dc86:	9300      	str	r3, [sp, #0]
1000dc88:	1c2b      	adds	r3, r5, #0
1000dc8a:	0764      	lsls	r4, r4, #29
1000dc8c:	0fe4      	lsrs	r4, r4, #31
1000dc8e:	4322      	orrs	r2, r4
1000dc90:	03d2      	lsls	r2, r2, #15
1000dc92:	4310      	orrs	r0, r2
1000dc94:	3320      	adds	r3, #32
1000dc96:	b282      	uxth	r2, r0
1000dc98:	9301      	str	r3, [sp, #4]
1000dc9a:	4c72      	ldr	r4, [pc, #456]	; (1000de64 <internal_at_ble_service_define+0x374>)
1000dc9c:	1c30      	adds	r0, r6, #0
1000dc9e:	9904      	ldr	r1, [sp, #16]
1000dca0:	2302      	movs	r3, #2
1000dca2:	47a0      	blx	r4
1000dca4:	1e04      	subs	r4, r0, #0
1000dca6:	d000      	beq.n	1000dcaa <internal_at_ble_service_define+0x1ba>
1000dca8:	e0fd      	b.n	1000dea6 <internal_at_ble_service_define+0x3b6>
1000dcaa:	2101      	movs	r1, #1
1000dcac:	882b      	ldrh	r3, [r5, #0]
1000dcae:	420b      	tst	r3, r1
1000dcb0:	d011      	beq.n	1000dcd6 <internal_at_ble_service_define+0x1e6>
1000dcb2:	7fa8      	ldrb	r0, [r5, #30]
1000dcb4:	4b6f      	ldr	r3, [pc, #444]	; (1000de74 <internal_at_ble_service_define+0x384>)
1000dcb6:	2200      	movs	r2, #0
1000dcb8:	4798      	blx	r3
1000dcba:	4b70      	ldr	r3, [pc, #448]	; (1000de7c <internal_at_ble_service_define+0x38c>)
1000dcbc:	1c02      	adds	r2, r0, #0
1000dcbe:	9300      	str	r3, [sp, #0]
1000dcc0:	1c2b      	adds	r3, r5, #0
1000dcc2:	3324      	adds	r3, #36	; 0x24
1000dcc4:	9301      	str	r3, [sp, #4]
1000dcc6:	4c67      	ldr	r4, [pc, #412]	; (1000de64 <internal_at_ble_service_define+0x374>)
1000dcc8:	1c30      	adds	r0, r6, #0
1000dcca:	496d      	ldr	r1, [pc, #436]	; (1000de80 <internal_at_ble_service_define+0x390>)
1000dccc:	2302      	movs	r3, #2
1000dcce:	47a0      	blx	r4
1000dcd0:	1e04      	subs	r4, r0, #0
1000dcd2:	d000      	beq.n	1000dcd6 <internal_at_ble_service_define+0x1e6>
1000dcd4:	e0e7      	b.n	1000dea6 <internal_at_ble_service_define+0x3b6>
1000dcd6:	2330      	movs	r3, #48	; 0x30
1000dcd8:	882a      	ldrh	r2, [r5, #0]
1000dcda:	421a      	tst	r2, r3
1000dcdc:	d012      	beq.n	1000dd04 <internal_at_ble_service_define+0x214>
1000dcde:	2101      	movs	r1, #1
1000dce0:	7f68      	ldrb	r0, [r5, #29]
1000dce2:	1c0a      	adds	r2, r1, #0
1000dce4:	4b63      	ldr	r3, [pc, #396]	; (1000de74 <internal_at_ble_service_define+0x384>)
1000dce6:	4798      	blx	r3
1000dce8:	4b66      	ldr	r3, [pc, #408]	; (1000de84 <internal_at_ble_service_define+0x394>)
1000dcea:	1c02      	adds	r2, r0, #0
1000dcec:	9300      	str	r3, [sp, #0]
1000dcee:	1c2b      	adds	r3, r5, #0
1000dcf0:	3322      	adds	r3, #34	; 0x22
1000dcf2:	9301      	str	r3, [sp, #4]
1000dcf4:	4c5b      	ldr	r4, [pc, #364]	; (1000de64 <internal_at_ble_service_define+0x374>)
1000dcf6:	1c30      	adds	r0, r6, #0
1000dcf8:	4961      	ldr	r1, [pc, #388]	; (1000de80 <internal_at_ble_service_define+0x390>)
1000dcfa:	2302      	movs	r3, #2
1000dcfc:	47a0      	blx	r4
1000dcfe:	1e04      	subs	r4, r0, #0
1000dd00:	d000      	beq.n	1000dd04 <internal_at_ble_service_define+0x214>
1000dd02:	e0d0      	b.n	1000dea6 <internal_at_ble_service_define+0x3b6>
1000dd04:	69ab      	ldr	r3, [r5, #24]
1000dd06:	2b00      	cmp	r3, #0
1000dd08:	d00e      	beq.n	1000dd28 <internal_at_ble_service_define+0x238>
1000dd0a:	4b5f      	ldr	r3, [pc, #380]	; (1000de88 <internal_at_ble_service_define+0x398>)
1000dd0c:	aa06      	add	r2, sp, #24
1000dd0e:	9300      	str	r3, [sp, #0]
1000dd10:	230e      	movs	r3, #14
1000dd12:	189b      	adds	r3, r3, r2
1000dd14:	9301      	str	r3, [sp, #4]
1000dd16:	4c53      	ldr	r4, [pc, #332]	; (1000de64 <internal_at_ble_service_define+0x374>)
1000dd18:	1c30      	adds	r0, r6, #0
1000dd1a:	2107      	movs	r1, #7
1000dd1c:	2201      	movs	r2, #1
1000dd1e:	2302      	movs	r3, #2
1000dd20:	47a0      	blx	r4
1000dd22:	1e04      	subs	r4, r0, #0
1000dd24:	d000      	beq.n	1000dd28 <internal_at_ble_service_define+0x238>
1000dd26:	e0be      	b.n	1000dea6 <internal_at_ble_service_define+0x3b6>
1000dd28:	9b02      	ldr	r3, [sp, #8]
1000dd2a:	353c      	adds	r5, #60	; 0x3c
1000dd2c:	3301      	adds	r3, #1
1000dd2e:	9302      	str	r3, [sp, #8]
1000dd30:	e73a      	b.n	1000dba8 <internal_at_ble_service_define+0xb8>
1000dd32:	1c30      	adds	r0, r6, #0
1000dd34:	4b55      	ldr	r3, [pc, #340]	; (1000de8c <internal_at_ble_service_define+0x39c>)
1000dd36:	4798      	blx	r3
1000dd38:	1e04      	subs	r4, r0, #0
1000dd3a:	d000      	beq.n	1000dd3e <internal_at_ble_service_define+0x24e>
1000dd3c:	e0b3      	b.n	1000dea6 <internal_at_ble_service_define+0x3b6>
1000dd3e:	8833      	ldrh	r3, [r6, #0]
1000dd40:	9a05      	ldr	r2, [sp, #20]
1000dd42:	8013      	strh	r3, [r2, #0]
1000dd44:	8836      	ldrh	r6, [r6, #0]
1000dd46:	9b06      	ldr	r3, [sp, #24]
1000dd48:	9a03      	ldr	r2, [sp, #12]
1000dd4a:	18f6      	adds	r6, r6, r3
1000dd4c:	b2b3      	uxth	r3, r6
1000dd4e:	9302      	str	r3, [sp, #8]
1000dd50:	233c      	movs	r3, #60	; 0x3c
1000dd52:	4353      	muls	r3, r2
1000dd54:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000dd56:	3314      	adds	r3, #20
1000dd58:	18d3      	adds	r3, r2, r3
1000dd5a:	9304      	str	r3, [sp, #16]
1000dd5c:	9b04      	ldr	r3, [sp, #16]
1000dd5e:	429f      	cmp	r7, r3
1000dd60:	d100      	bne.n	1000dd64 <internal_at_ble_service_define+0x274>
1000dd62:	e0a0      	b.n	1000dea6 <internal_at_ble_service_define+0x3b6>
1000dd64:	9b02      	ldr	r3, [sp, #8]
1000dd66:	1c9d      	adds	r5, r3, #2
1000dd68:	1c3b      	adds	r3, r7, #0
1000dd6a:	b2ad      	uxth	r5, r5
1000dd6c:	3b14      	subs	r3, #20
1000dd6e:	801d      	strh	r5, [r3, #0]
1000dd70:	9303      	str	r3, [sp, #12]
1000dd72:	893b      	ldrh	r3, [r7, #8]
1000dd74:	2b00      	cmp	r3, #0
1000dd76:	d108      	bne.n	1000dd8a <internal_at_ble_service_define+0x29a>
1000dd78:	23c0      	movs	r3, #192	; 0xc0
1000dd7a:	883a      	ldrh	r2, [r7, #0]
1000dd7c:	005b      	lsls	r3, r3, #1
1000dd7e:	421a      	tst	r2, r3
1000dd80:	d026      	beq.n	1000ddd0 <internal_at_ble_service_define+0x2e0>
1000dd82:	9e02      	ldr	r6, [sp, #8]
1000dd84:	3603      	adds	r6, #3
1000dd86:	b2b5      	uxth	r5, r6
1000dd88:	e022      	b.n	1000ddd0 <internal_at_ble_service_define+0x2e0>
1000dd8a:	2103      	movs	r1, #3
1000dd8c:	7b3b      	ldrb	r3, [r7, #12]
1000dd8e:	4019      	ands	r1, r3
1000dd90:	3903      	subs	r1, #3
1000dd92:	424a      	negs	r2, r1
1000dd94:	414a      	adcs	r2, r1
1000dd96:	0759      	lsls	r1, r3, #29
1000dd98:	0fc9      	lsrs	r1, r1, #31
1000dd9a:	4311      	orrs	r1, r2
1000dd9c:	03c9      	lsls	r1, r1, #15
1000dd9e:	897a      	ldrh	r2, [r7, #10]
1000dda0:	2900      	cmp	r1, #0
1000dda2:	d007      	beq.n	1000ddb4 <internal_at_ble_service_define+0x2c4>
1000dda4:	6879      	ldr	r1, [r7, #4]
1000dda6:	2900      	cmp	r1, #0
1000dda8:	d100      	bne.n	1000ddac <internal_at_ble_service_define+0x2bc>
1000ddaa:	4939      	ldr	r1, [pc, #228]	; (1000de90 <internal_at_ble_service_define+0x3a0>)
1000ddac:	1c28      	adds	r0, r5, #0
1000ddae:	4e39      	ldr	r6, [pc, #228]	; (1000de94 <internal_at_ble_service_define+0x3a4>)
1000ddb0:	47b0      	blx	r6
1000ddb2:	e00a      	b.n	1000ddca <internal_at_ble_service_define+0x2da>
1000ddb4:	1c28      	adds	r0, r5, #0
1000ddb6:	4e37      	ldr	r6, [pc, #220]	; (1000de94 <internal_at_ble_service_define+0x3a4>)
1000ddb8:	47b0      	blx	r6
1000ddba:	2800      	cmp	r0, #0
1000ddbc:	d172      	bne.n	1000dea4 <internal_at_ble_service_define+0x3b4>
1000ddbe:	9b03      	ldr	r3, [sp, #12]
1000ddc0:	8939      	ldrh	r1, [r7, #8]
1000ddc2:	8818      	ldrh	r0, [r3, #0]
1000ddc4:	687a      	ldr	r2, [r7, #4]
1000ddc6:	4b34      	ldr	r3, [pc, #208]	; (1000de98 <internal_at_ble_service_define+0x3a8>)
1000ddc8:	4798      	blx	r3
1000ddca:	2800      	cmp	r0, #0
1000ddcc:	d0d4      	beq.n	1000dd78 <internal_at_ble_service_define+0x288>
1000ddce:	e069      	b.n	1000dea4 <internal_at_ble_service_define+0x3b4>
1000ddd0:	8abb      	ldrh	r3, [r7, #20]
1000ddd2:	2b00      	cmp	r3, #0
1000ddd4:	d00a      	beq.n	1000ddec <internal_at_ble_service_define+0x2fc>
1000ddd6:	3501      	adds	r5, #1
1000ddd8:	b2ad      	uxth	r5, r5
1000ddda:	843d      	strh	r5, [r7, #32]
1000dddc:	7f39      	ldrb	r1, [r7, #28]
1000ddde:	8afb      	ldrh	r3, [r7, #22]
1000dde0:	1c28      	adds	r0, r5, #0
1000dde2:	693a      	ldr	r2, [r7, #16]
1000dde4:	4e2d      	ldr	r6, [pc, #180]	; (1000de9c <internal_at_ble_service_define+0x3ac>)
1000dde6:	47b0      	blx	r6
1000dde8:	2800      	cmp	r0, #0
1000ddea:	d15b      	bne.n	1000dea4 <internal_at_ble_service_define+0x3b4>
1000ddec:	883b      	ldrh	r3, [r7, #0]
1000ddee:	07db      	lsls	r3, r3, #31
1000ddf0:	d50d      	bpl.n	1000de0e <internal_at_ble_service_define+0x31e>
1000ddf2:	2200      	movs	r2, #0
1000ddf4:	3501      	adds	r5, #1
1000ddf6:	b2ad      	uxth	r5, r5
1000ddf8:	a909      	add	r1, sp, #36	; 0x24
1000ddfa:	84bd      	strh	r5, [r7, #36]	; 0x24
1000ddfc:	7fbb      	ldrb	r3, [r7, #30]
1000ddfe:	1c28      	adds	r0, r5, #0
1000de00:	700a      	strb	r2, [r1, #0]
1000de02:	704a      	strb	r2, [r1, #1]
1000de04:	4e23      	ldr	r6, [pc, #140]	; (1000de94 <internal_at_ble_service_define+0x3a4>)
1000de06:	3202      	adds	r2, #2
1000de08:	47b0      	blx	r6
1000de0a:	2800      	cmp	r0, #0
1000de0c:	d14a      	bne.n	1000dea4 <internal_at_ble_service_define+0x3b4>
1000de0e:	2330      	movs	r3, #48	; 0x30
1000de10:	883a      	ldrh	r2, [r7, #0]
1000de12:	421a      	tst	r2, r3
1000de14:	d00d      	beq.n	1000de32 <internal_at_ble_service_define+0x342>
1000de16:	2200      	movs	r2, #0
1000de18:	3501      	adds	r5, #1
1000de1a:	b2ad      	uxth	r5, r5
1000de1c:	a909      	add	r1, sp, #36	; 0x24
1000de1e:	847d      	strh	r5, [r7, #34]	; 0x22
1000de20:	7f7b      	ldrb	r3, [r7, #29]
1000de22:	1c28      	adds	r0, r5, #0
1000de24:	700a      	strb	r2, [r1, #0]
1000de26:	704a      	strb	r2, [r1, #1]
1000de28:	4e1a      	ldr	r6, [pc, #104]	; (1000de94 <internal_at_ble_service_define+0x3a4>)
1000de2a:	3202      	adds	r2, #2
1000de2c:	47b0      	blx	r6
1000de2e:	2800      	cmp	r0, #0
1000de30:	d138      	bne.n	1000dea4 <internal_at_ble_service_define+0x3b4>
1000de32:	69b9      	ldr	r1, [r7, #24]
1000de34:	2900      	cmp	r1, #0
1000de36:	d006      	beq.n	1000de46 <internal_at_ble_service_define+0x356>
1000de38:	3501      	adds	r5, #1
1000de3a:	b2ad      	uxth	r5, r5
1000de3c:	1c28      	adds	r0, r5, #0
1000de3e:	4b18      	ldr	r3, [pc, #96]	; (1000dea0 <internal_at_ble_service_define+0x3b0>)
1000de40:	4798      	blx	r3
1000de42:	2800      	cmp	r0, #0
1000de44:	d12e      	bne.n	1000dea4 <internal_at_ble_service_define+0x3b4>
1000de46:	373c      	adds	r7, #60	; 0x3c
1000de48:	9502      	str	r5, [sp, #8]
1000de4a:	e787      	b.n	1000dd5c <internal_at_ble_service_define+0x26c>
1000de4c:	10015330 	.word	0x10015330
1000de50:	100160d4 	.word	0x100160d4
1000de54:	10010fb9 	.word	0x10010fb9
1000de58:	1000d825 	.word	0x1000d825
1000de5c:	10010fa7 	.word	0x10010fa7
1000de60:	10013793 	.word	0x10013793
1000de64:	1000fcb1 	.word	0x1000fcb1
1000de68:	10013795 	.word	0x10013795
1000de6c:	1000d8f1 	.word	0x1000d8f1
1000de70:	10013791 	.word	0x10013791
1000de74:	1000d899 	.word	0x1000d899
1000de78:	1001378d 	.word	0x1001378d
1000de7c:	1001378f 	.word	0x1001378f
1000de80:	00008002 	.word	0x00008002
1000de84:	10013789 	.word	0x10013789
1000de88:	1001378b 	.word	0x1001378b
1000de8c:	1000fba5 	.word	0x1000fba5
1000de90:	1001531c 	.word	0x1001531c
1000de94:	1000d9b9 	.word	0x1000d9b9
1000de98:	1000fd21 	.word	0x1000fd21
1000de9c:	1000da71 	.word	0x1000da71
1000dea0:	1000d98d 	.word	0x1000d98d
1000dea4:	1c04      	adds	r4, r0, #0
1000dea6:	1c20      	adds	r0, r4, #0
1000dea8:	b00b      	add	sp, #44	; 0x2c
1000deaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000deac <initi_gatt_server_module>:
1000deac:	2300      	movs	r3, #0
1000deae:	4a07      	ldr	r2, [pc, #28]	; (1000decc <initi_gatt_server_module+0x20>)
1000deb0:	7013      	strb	r3, [r2, #0]
1000deb2:	4a07      	ldr	r2, [pc, #28]	; (1000ded0 <initi_gatt_server_module+0x24>)
1000deb4:	6013      	str	r3, [r2, #0]
1000deb6:	4a07      	ldr	r2, [pc, #28]	; (1000ded4 <initi_gatt_server_module+0x28>)
1000deb8:	6013      	str	r3, [r2, #0]
1000deba:	4a07      	ldr	r2, [pc, #28]	; (1000ded8 <initi_gatt_server_module+0x2c>)
1000debc:	6013      	str	r3, [r2, #0]
1000debe:	4a07      	ldr	r2, [pc, #28]	; (1000dedc <initi_gatt_server_module+0x30>)
1000dec0:	6013      	str	r3, [r2, #0]
1000dec2:	4a07      	ldr	r2, [pc, #28]	; (1000dee0 <initi_gatt_server_module+0x34>)
1000dec4:	6013      	str	r3, [r2, #0]
1000dec6:	4a07      	ldr	r2, [pc, #28]	; (1000dee4 <initi_gatt_server_module+0x38>)
1000dec8:	6013      	str	r3, [r2, #0]
1000deca:	4770      	bx	lr
1000decc:	1001531c 	.word	0x1001531c
1000ded0:	1001532c 	.word	0x1001532c
1000ded4:	10015328 	.word	0x10015328
1000ded8:	10015318 	.word	0x10015318
1000dedc:	10015324 	.word	0x10015324
1000dee0:	10015320 	.word	0x10015320
1000dee4:	10015330 	.word	0x10015330

1000dee8 <db_init>:
1000dee8:	4b0a      	ldr	r3, [pc, #40]	; (1000df14 <db_init+0x2c>)
1000deea:	4a0b      	ldr	r2, [pc, #44]	; (1000df18 <db_init+0x30>)
1000deec:	6018      	str	r0, [r3, #0]
1000deee:	084b      	lsrs	r3, r1, #1
1000def0:	6013      	str	r3, [r2, #0]
1000def2:	4a0a      	ldr	r2, [pc, #40]	; (1000df1c <db_init+0x34>)
1000def4:	18c3      	adds	r3, r0, r3
1000def6:	6013      	str	r3, [r2, #0]
1000def8:	4a09      	ldr	r2, [pc, #36]	; (1000df20 <db_init+0x38>)
1000defa:	1841      	adds	r1, r0, r1
1000defc:	6013      	str	r3, [r2, #0]
1000defe:	2303      	movs	r3, #3
1000df00:	2200      	movs	r2, #0
1000df02:	3103      	adds	r1, #3
1000df04:	4399      	bics	r1, r3
1000df06:	4b07      	ldr	r3, [pc, #28]	; (1000df24 <db_init+0x3c>)
1000df08:	3904      	subs	r1, #4
1000df0a:	6019      	str	r1, [r3, #0]
1000df0c:	4b06      	ldr	r3, [pc, #24]	; (1000df28 <db_init+0x40>)
1000df0e:	601a      	str	r2, [r3, #0]
1000df10:	4770      	bx	lr
1000df12:	46c0      	nop			; (mov r8, r8)
1000df14:	10015330 	.word	0x10015330
1000df18:	1001532c 	.word	0x1001532c
1000df1c:	10015318 	.word	0x10015318
1000df20:	10015324 	.word	0x10015324
1000df24:	10015320 	.word	0x10015320
1000df28:	10015328 	.word	0x10015328

1000df2c <at_ble_primary_service_define>:
1000df2c:	b530      	push	{r4, r5, lr}
1000df2e:	b085      	sub	sp, #20
1000df30:	ac08      	add	r4, sp, #32
1000df32:	cc20      	ldmia	r4!, {r5}
1000df34:	8824      	ldrh	r4, [r4, #0]
1000df36:	9500      	str	r5, [sp, #0]
1000df38:	9401      	str	r4, [sp, #4]
1000df3a:	2401      	movs	r4, #1
1000df3c:	9402      	str	r4, [sp, #8]
1000df3e:	4c02      	ldr	r4, [pc, #8]	; (1000df48 <at_ble_primary_service_define+0x1c>)
1000df40:	47a0      	blx	r4
1000df42:	b005      	add	sp, #20
1000df44:	bd30      	pop	{r4, r5, pc}
1000df46:	46c0      	nop			; (mov r8, r8)
1000df48:	1000daf1 	.word	0x1000daf1

1000df4c <at_ble_characteristic_value_set>:
1000df4c:	b570      	push	{r4, r5, r6, lr}
1000df4e:	4b0b      	ldr	r3, [pc, #44]	; (1000df7c <at_ble_characteristic_value_set+0x30>)
1000df50:	1c06      	adds	r6, r0, #0
1000df52:	1c0c      	adds	r4, r1, #0
1000df54:	1c15      	adds	r5, r2, #0
1000df56:	4798      	blx	r3
1000df58:	2800      	cmp	r0, #0
1000df5a:	d008      	beq.n	1000df6e <at_ble_characteristic_value_set+0x22>
1000df5c:	6880      	ldr	r0, [r0, #8]
1000df5e:	2800      	cmp	r0, #0
1000df60:	d005      	beq.n	1000df6e <at_ble_characteristic_value_set+0x22>
1000df62:	1c21      	adds	r1, r4, #0
1000df64:	1c2a      	adds	r2, r5, #0
1000df66:	4b06      	ldr	r3, [pc, #24]	; (1000df80 <at_ble_characteristic_value_set+0x34>)
1000df68:	4798      	blx	r3
1000df6a:	2000      	movs	r0, #0
1000df6c:	e004      	b.n	1000df78 <at_ble_characteristic_value_set+0x2c>
1000df6e:	1c30      	adds	r0, r6, #0
1000df70:	1c29      	adds	r1, r5, #0
1000df72:	1c22      	adds	r2, r4, #0
1000df74:	4b03      	ldr	r3, [pc, #12]	; (1000df84 <at_ble_characteristic_value_set+0x38>)
1000df76:	4798      	blx	r3
1000df78:	bd70      	pop	{r4, r5, r6, pc}
1000df7a:	46c0      	nop			; (mov r8, r8)
1000df7c:	1000d859 	.word	0x1000d859
1000df80:	10010fa7 	.word	0x10010fa7
1000df84:	1000fd21 	.word	0x1000fd21

1000df88 <at_ble_characteristic_value_get>:
1000df88:	b570      	push	{r4, r5, r6, lr}
1000df8a:	4b0c      	ldr	r3, [pc, #48]	; (1000dfbc <at_ble_characteristic_value_get+0x34>)
1000df8c:	1c06      	adds	r6, r0, #0
1000df8e:	1c0c      	adds	r4, r1, #0
1000df90:	1c15      	adds	r5, r2, #0
1000df92:	4798      	blx	r3
1000df94:	2800      	cmp	r0, #0
1000df96:	d00b      	beq.n	1000dfb0 <at_ble_characteristic_value_get+0x28>
1000df98:	6883      	ldr	r3, [r0, #8]
1000df9a:	2b00      	cmp	r3, #0
1000df9c:	d008      	beq.n	1000dfb0 <at_ble_characteristic_value_get+0x28>
1000df9e:	8883      	ldrh	r3, [r0, #4]
1000dfa0:	802b      	strh	r3, [r5, #0]
1000dfa2:	8882      	ldrh	r2, [r0, #4]
1000dfa4:	6881      	ldr	r1, [r0, #8]
1000dfa6:	4b06      	ldr	r3, [pc, #24]	; (1000dfc0 <at_ble_characteristic_value_get+0x38>)
1000dfa8:	1c20      	adds	r0, r4, #0
1000dfaa:	4798      	blx	r3
1000dfac:	2000      	movs	r0, #0
1000dfae:	e004      	b.n	1000dfba <at_ble_characteristic_value_get+0x32>
1000dfb0:	1c30      	adds	r0, r6, #0
1000dfb2:	1c29      	adds	r1, r5, #0
1000dfb4:	1c22      	adds	r2, r4, #0
1000dfb6:	4b03      	ldr	r3, [pc, #12]	; (1000dfc4 <at_ble_characteristic_value_get+0x3c>)
1000dfb8:	4798      	blx	r3
1000dfba:	bd70      	pop	{r4, r5, r6, pc}
1000dfbc:	1000d859 	.word	0x1000d859
1000dfc0:	10010fa7 	.word	0x10010fa7
1000dfc4:	1000fdad 	.word	0x1000fdad

1000dfc8 <at_ble_write_authorize_reply>:
1000dfc8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dfca:	b085      	sub	sp, #20
1000dfcc:	1c04      	adds	r4, r0, #0
1000dfce:	9101      	str	r1, [sp, #4]
1000dfd0:	2900      	cmp	r1, #0
1000dfd2:	d128      	bne.n	1000e026 <at_ble_write_authorize_reply+0x5e>
1000dfd4:	8843      	ldrh	r3, [r0, #2]
1000dfd6:	1c27      	adds	r7, r4, #0
1000dfd8:	9300      	str	r3, [sp, #0]
1000dfda:	1c18      	adds	r0, r3, #0
1000dfdc:	4b16      	ldr	r3, [pc, #88]	; (1000e038 <at_ble_write_authorize_reply+0x70>)
1000dfde:	4798      	blx	r3
1000dfe0:	3708      	adds	r7, #8
1000dfe2:	2800      	cmp	r0, #0
1000dfe4:	d009      	beq.n	1000dffa <at_ble_write_authorize_reply+0x32>
1000dfe6:	6880      	ldr	r0, [r0, #8]
1000dfe8:	2800      	cmp	r0, #0
1000dfea:	d006      	beq.n	1000dffa <at_ble_write_authorize_reply+0x32>
1000dfec:	88a3      	ldrh	r3, [r4, #4]
1000dfee:	88e2      	ldrh	r2, [r4, #6]
1000dff0:	18c0      	adds	r0, r0, r3
1000dff2:	1c39      	adds	r1, r7, #0
1000dff4:	4b11      	ldr	r3, [pc, #68]	; (1000e03c <at_ble_write_authorize_reply+0x74>)
1000dff6:	4798      	blx	r3
1000dff8:	e015      	b.n	1000e026 <at_ble_write_authorize_reply+0x5e>
1000dffa:	ab02      	add	r3, sp, #8
1000dffc:	1d9e      	adds	r6, r3, #6
1000dffe:	2300      	movs	r3, #0
1000e000:	4d0f      	ldr	r5, [pc, #60]	; (1000e040 <at_ble_write_authorize_reply+0x78>)
1000e002:	8033      	strh	r3, [r6, #0]
1000e004:	6829      	ldr	r1, [r5, #0]
1000e006:	1c32      	adds	r2, r6, #0
1000e008:	4b0e      	ldr	r3, [pc, #56]	; (1000e044 <at_ble_write_authorize_reply+0x7c>)
1000e00a:	9800      	ldr	r0, [sp, #0]
1000e00c:	4798      	blx	r3
1000e00e:	682b      	ldr	r3, [r5, #0]
1000e010:	88a0      	ldrh	r0, [r4, #4]
1000e012:	88e2      	ldrh	r2, [r4, #6]
1000e014:	1818      	adds	r0, r3, r0
1000e016:	1c39      	adds	r1, r7, #0
1000e018:	4b08      	ldr	r3, [pc, #32]	; (1000e03c <at_ble_write_authorize_reply+0x74>)
1000e01a:	4798      	blx	r3
1000e01c:	8860      	ldrh	r0, [r4, #2]
1000e01e:	8832      	ldrh	r2, [r6, #0]
1000e020:	6829      	ldr	r1, [r5, #0]
1000e022:	4b09      	ldr	r3, [pc, #36]	; (1000e048 <at_ble_write_authorize_reply+0x80>)
1000e024:	4798      	blx	r3
1000e026:	8860      	ldrh	r0, [r4, #2]
1000e028:	8821      	ldrh	r1, [r4, #0]
1000e02a:	9a01      	ldr	r2, [sp, #4]
1000e02c:	4b07      	ldr	r3, [pc, #28]	; (1000e04c <at_ble_write_authorize_reply+0x84>)
1000e02e:	4798      	blx	r3
1000e030:	2000      	movs	r0, #0
1000e032:	b005      	add	sp, #20
1000e034:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e036:	46c0      	nop			; (mov r8, r8)
1000e038:	1000d859 	.word	0x1000d859
1000e03c:	10010fa7 	.word	0x10010fa7
1000e040:	100138a0 	.word	0x100138a0
1000e044:	1000df89 	.word	0x1000df89
1000e048:	1000df4d 	.word	0x1000df4d
1000e04c:	1000f825 	.word	0x1000f825

1000e050 <gatts_handle_read_req>:
1000e050:	b538      	push	{r3, r4, r5, lr}
1000e052:	1c0c      	adds	r4, r1, #0
1000e054:	4b07      	ldr	r3, [pc, #28]	; (1000e074 <gatts_handle_read_req+0x24>)
1000e056:	4798      	blx	r3
1000e058:	8865      	ldrh	r5, [r4, #2]
1000e05a:	4b07      	ldr	r3, [pc, #28]	; (1000e078 <gatts_handle_read_req+0x28>)
1000e05c:	1c28      	adds	r0, r5, #0
1000e05e:	4798      	blx	r3
1000e060:	7883      	ldrb	r3, [r0, #2]
1000e062:	2026      	movs	r0, #38	; 0x26
1000e064:	07db      	lsls	r3, r3, #31
1000e066:	d404      	bmi.n	1000e072 <gatts_handle_read_req+0x22>
1000e068:	8820      	ldrh	r0, [r4, #0]
1000e06a:	1c29      	adds	r1, r5, #0
1000e06c:	4b03      	ldr	r3, [pc, #12]	; (1000e07c <gatts_handle_read_req+0x2c>)
1000e06e:	4798      	blx	r3
1000e070:	203b      	movs	r0, #59	; 0x3b
1000e072:	bd38      	pop	{r3, r4, r5, pc}
1000e074:	1000f769 	.word	0x1000f769
1000e078:	1000d859 	.word	0x1000d859
1000e07c:	1000dac1 	.word	0x1000dac1

1000e080 <gatts_handle_att_info_req>:
1000e080:	b538      	push	{r3, r4, r5, lr}
1000e082:	1c0d      	adds	r5, r1, #0
1000e084:	4b0a      	ldr	r3, [pc, #40]	; (1000e0b0 <gatts_handle_att_info_req+0x30>)
1000e086:	1c14      	adds	r4, r2, #0
1000e088:	4798      	blx	r3
1000e08a:	882d      	ldrh	r5, [r5, #0]
1000e08c:	4b09      	ldr	r3, [pc, #36]	; (1000e0b4 <gatts_handle_att_info_req+0x34>)
1000e08e:	1c28      	adds	r0, r5, #0
1000e090:	4798      	blx	r3
1000e092:	0a22      	lsrs	r2, r4, #8
1000e094:	1c03      	adds	r3, r0, #0
1000e096:	4c08      	ldr	r4, [pc, #32]	; (1000e0b8 <gatts_handle_att_info_req+0x38>)
1000e098:	b291      	uxth	r1, r2
1000e09a:	2800      	cmp	r0, #0
1000e09c:	d003      	beq.n	1000e0a6 <gatts_handle_att_info_req+0x26>
1000e09e:	8882      	ldrh	r2, [r0, #4]
1000e0a0:	2300      	movs	r3, #0
1000e0a2:	1c28      	adds	r0, r5, #0
1000e0a4:	e001      	b.n	1000e0aa <gatts_handle_att_info_req+0x2a>
1000e0a6:	1c28      	adds	r0, r5, #0
1000e0a8:	2201      	movs	r2, #1
1000e0aa:	47a0      	blx	r4
1000e0ac:	203b      	movs	r0, #59	; 0x3b
1000e0ae:	bd38      	pop	{r3, r4, r5, pc}
1000e0b0:	1000f7ad 	.word	0x1000f7ad
1000e0b4:	1000d859 	.word	0x1000d859
1000e0b8:	1000f869 	.word	0x1000f869

1000e0bc <gatts_handle_write_req>:
1000e0bc:	b510      	push	{r4, lr}
1000e0be:	1c14      	adds	r4, r2, #0
1000e0c0:	4b07      	ldr	r3, [pc, #28]	; (1000e0e0 <gatts_handle_write_req+0x24>)
1000e0c2:	4798      	blx	r3
1000e0c4:	4b07      	ldr	r3, [pc, #28]	; (1000e0e4 <gatts_handle_write_req+0x28>)
1000e0c6:	8860      	ldrh	r0, [r4, #2]
1000e0c8:	4798      	blx	r3
1000e0ca:	2302      	movs	r3, #2
1000e0cc:	7881      	ldrb	r1, [r0, #2]
1000e0ce:	2022      	movs	r0, #34	; 0x22
1000e0d0:	4019      	ands	r1, r3
1000e0d2:	d103      	bne.n	1000e0dc <gatts_handle_write_req+0x20>
1000e0d4:	1c20      	adds	r0, r4, #0
1000e0d6:	4b04      	ldr	r3, [pc, #16]	; (1000e0e8 <gatts_handle_write_req+0x2c>)
1000e0d8:	4798      	blx	r3
1000e0da:	201f      	movs	r0, #31
1000e0dc:	bd10      	pop	{r4, pc}
1000e0de:	46c0      	nop			; (mov r8, r8)
1000e0e0:	1000f775 	.word	0x1000f775
1000e0e4:	1000d859 	.word	0x1000d859
1000e0e8:	1000dfc9 	.word	0x1000dfc9

1000e0ec <at_ble_notification_send>:
1000e0ec:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e0ee:	4d17      	ldr	r5, [pc, #92]	; (1000e14c <at_ble_notification_send+0x60>)
1000e0f0:	4c17      	ldr	r4, [pc, #92]	; (1000e150 <at_ble_notification_send+0x64>)
1000e0f2:	682a      	ldr	r2, [r5, #0]
1000e0f4:	44a5      	add	sp, r4
1000e0f6:	23d2      	movs	r3, #210	; 0xd2
1000e0f8:	2a04      	cmp	r2, #4
1000e0fa:	d822      	bhi.n	1000e142 <at_ble_notification_send+0x56>
1000e0fc:	1c06      	adds	r6, r0, #0
1000e0fe:	4b15      	ldr	r3, [pc, #84]	; (1000e154 <at_ble_notification_send+0x68>)
1000e100:	1c08      	adds	r0, r1, #0
1000e102:	1c0c      	adds	r4, r1, #0
1000e104:	4798      	blx	r3
1000e106:	2800      	cmp	r0, #0
1000e108:	d008      	beq.n	1000e11c <at_ble_notification_send+0x30>
1000e10a:	6883      	ldr	r3, [r0, #8]
1000e10c:	2b00      	cmp	r3, #0
1000e10e:	d005      	beq.n	1000e11c <at_ble_notification_send+0x30>
1000e110:	8882      	ldrh	r2, [r0, #4]
1000e112:	1c21      	adds	r1, r4, #0
1000e114:	9200      	str	r2, [sp, #0]
1000e116:	2012      	movs	r0, #18
1000e118:	1c32      	adds	r2, r6, #0
1000e11a:	e00c      	b.n	1000e136 <at_ble_notification_send+0x4a>
1000e11c:	270e      	movs	r7, #14
1000e11e:	446f      	add	r7, sp
1000e120:	1c39      	adds	r1, r7, #0
1000e122:	aa04      	add	r2, sp, #16
1000e124:	4b0c      	ldr	r3, [pc, #48]	; (1000e158 <at_ble_notification_send+0x6c>)
1000e126:	1c20      	adds	r0, r4, #0
1000e128:	4798      	blx	r3
1000e12a:	2012      	movs	r0, #18
1000e12c:	1c21      	adds	r1, r4, #0
1000e12e:	1c32      	adds	r2, r6, #0
1000e130:	883b      	ldrh	r3, [r7, #0]
1000e132:	9300      	str	r3, [sp, #0]
1000e134:	ab04      	add	r3, sp, #16
1000e136:	4c09      	ldr	r4, [pc, #36]	; (1000e15c <at_ble_notification_send+0x70>)
1000e138:	47a0      	blx	r4
1000e13a:	682b      	ldr	r3, [r5, #0]
1000e13c:	3301      	adds	r3, #1
1000e13e:	602b      	str	r3, [r5, #0]
1000e140:	2300      	movs	r3, #0
1000e142:	1c18      	adds	r0, r3, #0
1000e144:	2385      	movs	r3, #133	; 0x85
1000e146:	009b      	lsls	r3, r3, #2
1000e148:	449d      	add	sp, r3
1000e14a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e14c:	100153bc 	.word	0x100153bc
1000e150:	fffffdec 	.word	0xfffffdec
1000e154:	1000d859 	.word	0x1000d859
1000e158:	1000fdad 	.word	0x1000fdad
1000e15c:	1000f8b1 	.word	0x1000f8b1

1000e160 <init_l2cc_task_module>:
1000e160:	220a      	movs	r2, #10
1000e162:	4b01      	ldr	r3, [pc, #4]	; (1000e168 <init_l2cc_task_module+0x8>)
1000e164:	701a      	strb	r2, [r3, #0]
1000e166:	4770      	bx	lr
1000e168:	1001389c 	.word	0x1001389c

1000e16c <l2cc_data_send_rsp_handler>:
1000e16c:	b510      	push	{r4, lr}
1000e16e:	7802      	ldrb	r2, [r0, #0]
1000e170:	700a      	strb	r2, [r1, #0]
1000e172:	7883      	ldrb	r3, [r0, #2]
1000e174:	7844      	ldrb	r4, [r0, #1]
1000e176:	021b      	lsls	r3, r3, #8
1000e178:	4323      	orrs	r3, r4
1000e17a:	804b      	strh	r3, [r1, #2]
1000e17c:	7903      	ldrb	r3, [r0, #4]
1000e17e:	78c0      	ldrb	r0, [r0, #3]
1000e180:	021b      	lsls	r3, r3, #8
1000e182:	4303      	orrs	r3, r0
1000e184:	808b      	strh	r3, [r1, #4]
1000e186:	2a00      	cmp	r2, #0
1000e188:	d103      	bne.n	1000e192 <l2cc_data_send_rsp_handler+0x26>
1000e18a:	4a02      	ldr	r2, [pc, #8]	; (1000e194 <l2cc_data_send_rsp_handler+0x28>)
1000e18c:	7813      	ldrb	r3, [r2, #0]
1000e18e:	3301      	adds	r3, #1
1000e190:	7013      	strb	r3, [r2, #0]
1000e192:	bd10      	pop	{r4, pc}
1000e194:	1001389c 	.word	0x1001389c

1000e198 <l2cc_data_received_handler>:
1000e198:	b508      	push	{r3, lr}
1000e19a:	1c03      	adds	r3, r0, #0
1000e19c:	7842      	ldrb	r2, [r0, #1]
1000e19e:	7800      	ldrb	r0, [r0, #0]
1000e1a0:	0212      	lsls	r2, r2, #8
1000e1a2:	4302      	orrs	r2, r0
1000e1a4:	800a      	strh	r2, [r1, #0]
1000e1a6:	78da      	ldrb	r2, [r3, #3]
1000e1a8:	7898      	ldrb	r0, [r3, #2]
1000e1aa:	0212      	lsls	r2, r2, #8
1000e1ac:	4302      	orrs	r2, r0
1000e1ae:	804a      	strh	r2, [r1, #2]
1000e1b0:	795a      	ldrb	r2, [r3, #5]
1000e1b2:	7918      	ldrb	r0, [r3, #4]
1000e1b4:	0212      	lsls	r2, r2, #8
1000e1b6:	4302      	orrs	r2, r0
1000e1b8:	808a      	strh	r2, [r1, #4]
1000e1ba:	1d88      	adds	r0, r1, #6
1000e1bc:	1d99      	adds	r1, r3, #6
1000e1be:	4b01      	ldr	r3, [pc, #4]	; (1000e1c4 <l2cc_data_received_handler+0x2c>)
1000e1c0:	4798      	blx	r3
1000e1c2:	bd08      	pop	{r3, pc}
1000e1c4:	10010fa7 	.word	0x10010fa7

1000e1c8 <at_ble_authenticate>:
1000e1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e1ca:	1c0c      	adds	r4, r1, #0
1000e1cc:	211f      	movs	r1, #31
1000e1ce:	b08b      	sub	sp, #44	; 0x2c
1000e1d0:	9307      	str	r3, [sp, #28]
1000e1d2:	ab02      	add	r3, sp, #8
1000e1d4:	18c9      	adds	r1, r1, r3
1000e1d6:	230f      	movs	r3, #15
1000e1d8:	700b      	strb	r3, [r1, #0]
1000e1da:	4b40      	ldr	r3, [pc, #256]	; (1000e2dc <at_ble_authenticate+0x114>)
1000e1dc:	1c05      	adds	r5, r0, #0
1000e1de:	1c16      	adds	r6, r2, #0
1000e1e0:	4798      	blx	r3
1000e1e2:	1c07      	adds	r7, r0, #0
1000e1e4:	2001      	movs	r0, #1
1000e1e6:	2f07      	cmp	r7, #7
1000e1e8:	d875      	bhi.n	1000e2d6 <at_ble_authenticate+0x10e>
1000e1ea:	2c00      	cmp	r4, #0
1000e1ec:	d113      	bne.n	1000e216 <at_ble_authenticate+0x4e>
1000e1ee:	2312      	movs	r3, #18
1000e1f0:	435f      	muls	r7, r3
1000e1f2:	4b3b      	ldr	r3, [pc, #236]	; (1000e2e0 <at_ble_authenticate+0x118>)
1000e1f4:	5cfb      	ldrb	r3, [r7, r3]
1000e1f6:	4283      	cmp	r3, r0
1000e1f8:	d001      	beq.n	1000e1fe <at_ble_authenticate+0x36>
1000e1fa:	20cf      	movs	r0, #207	; 0xcf
1000e1fc:	e06b      	b.n	1000e2d6 <at_ble_authenticate+0x10e>
1000e1fe:	9504      	str	r5, [sp, #16]
1000e200:	9400      	str	r4, [sp, #0]
1000e202:	9401      	str	r4, [sp, #4]
1000e204:	9402      	str	r4, [sp, #8]
1000e206:	9403      	str	r4, [sp, #12]
1000e208:	1c20      	adds	r0, r4, #0
1000e20a:	1c21      	adds	r1, r4, #0
1000e20c:	1c22      	adds	r2, r4, #0
1000e20e:	1c23      	adds	r3, r4, #0
1000e210:	4d34      	ldr	r5, [pc, #208]	; (1000e2e4 <at_ble_authenticate+0x11c>)
1000e212:	47a8      	blx	r5
1000e214:	e05e      	b.n	1000e2d4 <at_ble_authenticate+0x10c>
1000e216:	7922      	ldrb	r2, [r4, #4]
1000e218:	2a06      	cmp	r2, #6
1000e21a:	d9ee      	bls.n	1000e1fa <at_ble_authenticate+0x32>
1000e21c:	7963      	ldrb	r3, [r4, #5]
1000e21e:	2b10      	cmp	r3, #16
1000e220:	d8eb      	bhi.n	1000e1fa <at_ble_authenticate+0x32>
1000e222:	429a      	cmp	r2, r3
1000e224:	d8e9      	bhi.n	1000e1fa <at_ble_authenticate+0x32>
1000e226:	7a23      	ldrb	r3, [r4, #8]
1000e228:	2b04      	cmp	r3, #4
1000e22a:	d8e6      	bhi.n	1000e1fa <at_ble_authenticate+0x32>
1000e22c:	79a3      	ldrb	r3, [r4, #6]
1000e22e:	2b07      	cmp	r3, #7
1000e230:	d8e3      	bhi.n	1000e1fa <at_ble_authenticate+0x32>
1000e232:	79e3      	ldrb	r3, [r4, #7]
1000e234:	2b07      	cmp	r3, #7
1000e236:	d8e0      	bhi.n	1000e1fa <at_ble_authenticate+0x32>
1000e238:	78a3      	ldrb	r3, [r4, #2]
1000e23a:	2b00      	cmp	r3, #0
1000e23c:	d006      	beq.n	1000e24c <at_ble_authenticate+0x84>
1000e23e:	2e00      	cmp	r6, #0
1000e240:	d0db      	beq.n	1000e1fa <at_ble_authenticate+0x32>
1000e242:	4829      	ldr	r0, [pc, #164]	; (1000e2e8 <at_ble_authenticate+0x120>)
1000e244:	1c31      	adds	r1, r6, #0
1000e246:	221c      	movs	r2, #28
1000e248:	4b28      	ldr	r3, [pc, #160]	; (1000e2ec <at_ble_authenticate+0x124>)
1000e24a:	4798      	blx	r3
1000e24c:	9b07      	ldr	r3, [sp, #28]
1000e24e:	2b00      	cmp	r3, #0
1000e250:	d005      	beq.n	1000e25e <at_ble_authenticate+0x96>
1000e252:	4827      	ldr	r0, [pc, #156]	; (1000e2f0 <at_ble_authenticate+0x128>)
1000e254:	1c19      	adds	r1, r3, #0
1000e256:	309a      	adds	r0, #154	; 0x9a
1000e258:	2210      	movs	r2, #16
1000e25a:	4b24      	ldr	r3, [pc, #144]	; (1000e2ec <at_ble_authenticate+0x124>)
1000e25c:	4798      	blx	r3
1000e25e:	7863      	ldrb	r3, [r4, #1]
1000e260:	78a2      	ldrb	r2, [r4, #2]
1000e262:	009b      	lsls	r3, r3, #2
1000e264:	4313      	orrs	r3, r2
1000e266:	2212      	movs	r2, #18
1000e268:	4357      	muls	r7, r2
1000e26a:	4a1d      	ldr	r2, [pc, #116]	; (1000e2e0 <at_ble_authenticate+0x118>)
1000e26c:	b2db      	uxtb	r3, r3
1000e26e:	5cba      	ldrb	r2, [r7, r2]
1000e270:	2a00      	cmp	r2, #0
1000e272:	d116      	bne.n	1000e2a2 <at_ble_authenticate+0xda>
1000e274:	79a0      	ldrb	r0, [r4, #6]
1000e276:	0742      	lsls	r2, r0, #29
1000e278:	d502      	bpl.n	1000e280 <at_ble_authenticate+0xb8>
1000e27a:	9a07      	ldr	r2, [sp, #28]
1000e27c:	2a00      	cmp	r2, #0
1000e27e:	d0bc      	beq.n	1000e1fa <at_ble_authenticate+0x32>
1000e280:	07c2      	lsls	r2, r0, #31
1000e282:	d501      	bpl.n	1000e288 <at_ble_authenticate+0xc0>
1000e284:	2e00      	cmp	r6, #0
1000e286:	d0b8      	beq.n	1000e1fa <at_ble_authenticate+0x32>
1000e288:	7966      	ldrb	r6, [r4, #5]
1000e28a:	7821      	ldrb	r1, [r4, #0]
1000e28c:	78e2      	ldrb	r2, [r4, #3]
1000e28e:	9600      	str	r6, [sp, #0]
1000e290:	9001      	str	r0, [sp, #4]
1000e292:	79e0      	ldrb	r0, [r4, #7]
1000e294:	9002      	str	r0, [sp, #8]
1000e296:	7a20      	ldrb	r0, [r4, #8]
1000e298:	4c16      	ldr	r4, [pc, #88]	; (1000e2f4 <at_ble_authenticate+0x12c>)
1000e29a:	9003      	str	r0, [sp, #12]
1000e29c:	1c28      	adds	r0, r5, #0
1000e29e:	47a0      	blx	r4
1000e2a0:	e018      	b.n	1000e2d4 <at_ble_authenticate+0x10c>
1000e2a2:	2a01      	cmp	r2, #1
1000e2a4:	d1a9      	bne.n	1000e1fa <at_ble_authenticate+0x32>
1000e2a6:	79e0      	ldrb	r0, [r4, #7]
1000e2a8:	0742      	lsls	r2, r0, #29
1000e2aa:	d502      	bpl.n	1000e2b2 <at_ble_authenticate+0xea>
1000e2ac:	9a07      	ldr	r2, [sp, #28]
1000e2ae:	2a00      	cmp	r2, #0
1000e2b0:	d0a3      	beq.n	1000e1fa <at_ble_authenticate+0x32>
1000e2b2:	07c2      	lsls	r2, r0, #31
1000e2b4:	d501      	bpl.n	1000e2ba <at_ble_authenticate+0xf2>
1000e2b6:	2e00      	cmp	r6, #0
1000e2b8:	d09f      	beq.n	1000e1fa <at_ble_authenticate+0x32>
1000e2ba:	7966      	ldrb	r6, [r4, #5]
1000e2bc:	7821      	ldrb	r1, [r4, #0]
1000e2be:	78e2      	ldrb	r2, [r4, #3]
1000e2c0:	9600      	str	r6, [sp, #0]
1000e2c2:	79a6      	ldrb	r6, [r4, #6]
1000e2c4:	9002      	str	r0, [sp, #8]
1000e2c6:	9601      	str	r6, [sp, #4]
1000e2c8:	7a20      	ldrb	r0, [r4, #8]
1000e2ca:	9504      	str	r5, [sp, #16]
1000e2cc:	9003      	str	r0, [sp, #12]
1000e2ce:	4c05      	ldr	r4, [pc, #20]	; (1000e2e4 <at_ble_authenticate+0x11c>)
1000e2d0:	2001      	movs	r0, #1
1000e2d2:	47a0      	blx	r4
1000e2d4:	2000      	movs	r0, #0
1000e2d6:	b00b      	add	sp, #44	; 0x2c
1000e2d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e2da:	46c0      	nop			; (mov r8, r8)
1000e2dc:	1000e6c9 	.word	0x1000e6c9
1000e2e0:	100160d6 	.word	0x100160d6
1000e2e4:	1000ec39 	.word	0x1000ec39
1000e2e8:	100161e4 	.word	0x100161e4
1000e2ec:	10010fa7 	.word	0x10010fa7
1000e2f0:	10016166 	.word	0x10016166
1000e2f4:	1000ea19 	.word	0x1000ea19

1000e2f8 <at_ble_pair_key_reply>:
1000e2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e2fa:	b085      	sub	sp, #20
1000e2fc:	1c05      	adds	r5, r0, #0
1000e2fe:	1c0c      	adds	r4, r1, #0
1000e300:	1c16      	adds	r6, r2, #0
1000e302:	2100      	movs	r1, #0
1000e304:	4668      	mov	r0, sp
1000e306:	2210      	movs	r2, #16
1000e308:	4b18      	ldr	r3, [pc, #96]	; (1000e36c <at_ble_pair_key_reply+0x74>)
1000e30a:	4798      	blx	r3
1000e30c:	2101      	movs	r1, #1
1000e30e:	2e00      	cmp	r6, #0
1000e310:	d101      	bne.n	1000e316 <at_ble_pair_key_reply+0x1e>
1000e312:	1c31      	adds	r1, r6, #0
1000e314:	466e      	mov	r6, sp
1000e316:	2c00      	cmp	r4, #0
1000e318:	d116      	bne.n	1000e348 <at_ble_pair_key_reply+0x50>
1000e31a:	2701      	movs	r7, #1
1000e31c:	1c23      	adds	r3, r4, #0
1000e31e:	1d70      	adds	r0, r6, #5
1000e320:	3e01      	subs	r6, #1
1000e322:	7802      	ldrb	r2, [r0, #0]
1000e324:	3801      	subs	r0, #1
1000e326:	3a30      	subs	r2, #48	; 0x30
1000e328:	437a      	muls	r2, r7
1000e32a:	189b      	adds	r3, r3, r2
1000e32c:	220a      	movs	r2, #10
1000e32e:	4357      	muls	r7, r2
1000e330:	42b0      	cmp	r0, r6
1000e332:	d1f6      	bne.n	1000e322 <at_ble_pair_key_reply+0x2a>
1000e334:	466a      	mov	r2, sp
1000e336:	4668      	mov	r0, sp
1000e338:	7013      	strb	r3, [r2, #0]
1000e33a:	0a1a      	lsrs	r2, r3, #8
1000e33c:	7042      	strb	r2, [r0, #1]
1000e33e:	0c1a      	lsrs	r2, r3, #16
1000e340:	0e1b      	lsrs	r3, r3, #24
1000e342:	7082      	strb	r2, [r0, #2]
1000e344:	70c3      	strb	r3, [r0, #3]
1000e346:	e009      	b.n	1000e35c <at_ble_pair_key_reply+0x64>
1000e348:	20cf      	movs	r0, #207	; 0xcf
1000e34a:	2c01      	cmp	r4, #1
1000e34c:	d10c      	bne.n	1000e368 <at_ble_pair_key_reply+0x70>
1000e34e:	2300      	movs	r3, #0
1000e350:	4668      	mov	r0, sp
1000e352:	5cf2      	ldrb	r2, [r6, r3]
1000e354:	54c2      	strb	r2, [r0, r3]
1000e356:	3301      	adds	r3, #1
1000e358:	2b10      	cmp	r3, #16
1000e35a:	d1f9      	bne.n	1000e350 <at_ble_pair_key_reply+0x58>
1000e35c:	2004      	movs	r0, #4
1000e35e:	466a      	mov	r2, sp
1000e360:	1c2b      	adds	r3, r5, #0
1000e362:	4c03      	ldr	r4, [pc, #12]	; (1000e370 <at_ble_pair_key_reply+0x78>)
1000e364:	47a0      	blx	r4
1000e366:	2000      	movs	r0, #0
1000e368:	b005      	add	sp, #20
1000e36a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e36c:	10010fb9 	.word	0x10010fb9
1000e370:	1000ecb5 	.word	0x1000ecb5

1000e374 <at_ble_send_slave_sec_request>:
1000e374:	b570      	push	{r4, r5, r6, lr}
1000e376:	4b0c      	ldr	r3, [pc, #48]	; (1000e3a8 <at_ble_send_slave_sec_request+0x34>)
1000e378:	1c0e      	adds	r6, r1, #0
1000e37a:	2100      	movs	r1, #0
1000e37c:	1c05      	adds	r5, r0, #0
1000e37e:	1c14      	adds	r4, r2, #0
1000e380:	4798      	blx	r3
1000e382:	2301      	movs	r3, #1
1000e384:	2807      	cmp	r0, #7
1000e386:	d80d      	bhi.n	1000e3a4 <at_ble_send_slave_sec_request+0x30>
1000e388:	3311      	adds	r3, #17
1000e38a:	4358      	muls	r0, r3
1000e38c:	4b07      	ldr	r3, [pc, #28]	; (1000e3ac <at_ble_send_slave_sec_request+0x38>)
1000e38e:	5cc2      	ldrb	r2, [r0, r3]
1000e390:	23e0      	movs	r3, #224	; 0xe0
1000e392:	2a01      	cmp	r2, #1
1000e394:	d106      	bne.n	1000e3a4 <at_ble_send_slave_sec_request+0x30>
1000e396:	00b1      	lsls	r1, r6, #2
1000e398:	430c      	orrs	r4, r1
1000e39a:	4b05      	ldr	r3, [pc, #20]	; (1000e3b0 <at_ble_send_slave_sec_request+0x3c>)
1000e39c:	b2e1      	uxtb	r1, r4
1000e39e:	1c28      	adds	r0, r5, #0
1000e3a0:	4798      	blx	r3
1000e3a2:	2300      	movs	r3, #0
1000e3a4:	1c18      	adds	r0, r3, #0
1000e3a6:	bd70      	pop	{r4, r5, r6, pc}
1000e3a8:	1000e6c9 	.word	0x1000e6c9
1000e3ac:	100160d6 	.word	0x100160d6
1000e3b0:	1000ed05 	.word	0x1000ed05

1000e3b4 <at_ble_encryption_start>:
1000e3b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e3b6:	23cf      	movs	r3, #207	; 0xcf
1000e3b8:	2900      	cmp	r1, #0
1000e3ba:	d02b      	beq.n	1000e414 <at_ble_encryption_start+0x60>
1000e3bc:	2a05      	cmp	r2, #5
1000e3be:	d829      	bhi.n	1000e414 <at_ble_encryption_start+0x60>
1000e3c0:	2701      	movs	r7, #1
1000e3c2:	1c3d      	adds	r5, r7, #0
1000e3c4:	2433      	movs	r4, #51	; 0x33
1000e3c6:	4095      	lsls	r5, r2
1000e3c8:	4225      	tst	r5, r4
1000e3ca:	d023      	beq.n	1000e414 <at_ble_encryption_start+0x60>
1000e3cc:	7e8c      	ldrb	r4, [r1, #26]
1000e3ce:	3c07      	subs	r4, #7
1000e3d0:	2c09      	cmp	r4, #9
1000e3d2:	d81f      	bhi.n	1000e414 <at_ble_encryption_start+0x60>
1000e3d4:	4b10      	ldr	r3, [pc, #64]	; (1000e418 <at_ble_encryption_start+0x64>)
1000e3d6:	1c0c      	adds	r4, r1, #0
1000e3d8:	2100      	movs	r1, #0
1000e3da:	1c15      	adds	r5, r2, #0
1000e3dc:	1c06      	adds	r6, r0, #0
1000e3de:	4798      	blx	r3
1000e3e0:	1c3b      	adds	r3, r7, #0
1000e3e2:	2807      	cmp	r0, #7
1000e3e4:	d816      	bhi.n	1000e414 <at_ble_encryption_start+0x60>
1000e3e6:	2312      	movs	r3, #18
1000e3e8:	4358      	muls	r0, r3
1000e3ea:	4b0c      	ldr	r3, [pc, #48]	; (1000e41c <at_ble_encryption_start+0x68>)
1000e3ec:	5cc7      	ldrb	r7, [r0, r3]
1000e3ee:	23e0      	movs	r3, #224	; 0xe0
1000e3f0:	2f00      	cmp	r7, #0
1000e3f2:	d10f      	bne.n	1000e414 <at_ble_encryption_start+0x60>
1000e3f4:	1c21      	adds	r1, r4, #0
1000e3f6:	221c      	movs	r2, #28
1000e3f8:	4b09      	ldr	r3, [pc, #36]	; (1000e420 <at_ble_encryption_start+0x6c>)
1000e3fa:	480a      	ldr	r0, [pc, #40]	; (1000e424 <at_ble_encryption_start+0x70>)
1000e3fc:	4798      	blx	r3
1000e3fe:	1c23      	adds	r3, r4, #0
1000e400:	7ea1      	ldrb	r1, [r4, #26]
1000e402:	8a22      	ldrh	r2, [r4, #16]
1000e404:	3312      	adds	r3, #18
1000e406:	9100      	str	r1, [sp, #0]
1000e408:	9501      	str	r5, [sp, #4]
1000e40a:	1c21      	adds	r1, r4, #0
1000e40c:	1c30      	adds	r0, r6, #0
1000e40e:	4c06      	ldr	r4, [pc, #24]	; (1000e428 <at_ble_encryption_start+0x74>)
1000e410:	47a0      	blx	r4
1000e412:	1c3b      	adds	r3, r7, #0
1000e414:	1c18      	adds	r0, r3, #0
1000e416:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e418:	1000e6c9 	.word	0x1000e6c9
1000e41c:	100160d6 	.word	0x100160d6
1000e420:	10010fa7 	.word	0x10010fa7
1000e424:	100161e4 	.word	0x100161e4
1000e428:	1000ed45 	.word	0x1000ed45

1000e42c <at_ble_encryption_request_reply>:
1000e42c:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000e42e:	24cf      	movs	r4, #207	; 0xcf
1000e430:	2b00      	cmp	r3, #0
1000e432:	d011      	beq.n	1000e458 <at_ble_encryption_request_reply+0x2c>
1000e434:	2a00      	cmp	r2, #0
1000e436:	d00a      	beq.n	1000e44e <at_ble_encryption_request_reply+0x22>
1000e438:	2905      	cmp	r1, #5
1000e43a:	d80d      	bhi.n	1000e458 <at_ble_encryption_request_reply+0x2c>
1000e43c:	2501      	movs	r5, #1
1000e43e:	2633      	movs	r6, #51	; 0x33
1000e440:	408d      	lsls	r5, r1
1000e442:	4235      	tst	r5, r6
1000e444:	d008      	beq.n	1000e458 <at_ble_encryption_request_reply+0x2c>
1000e446:	7e9d      	ldrb	r5, [r3, #26]
1000e448:	3d07      	subs	r5, #7
1000e44a:	2d09      	cmp	r5, #9
1000e44c:	d804      	bhi.n	1000e458 <at_ble_encryption_request_reply+0x2c>
1000e44e:	7e9c      	ldrb	r4, [r3, #26]
1000e450:	9400      	str	r4, [sp, #0]
1000e452:	4c02      	ldr	r4, [pc, #8]	; (1000e45c <at_ble_encryption_request_reply+0x30>)
1000e454:	47a0      	blx	r4
1000e456:	2400      	movs	r4, #0
1000e458:	1c20      	adds	r0, r4, #0
1000e45a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000e45c:	1000ee01 	.word	0x1000ee01

1000e460 <rx_callback>:
1000e460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e462:	8883      	ldrh	r3, [r0, #4]
1000e464:	1c01      	adds	r1, r0, #0
1000e466:	9301      	str	r3, [sp, #4]
1000e468:	88c5      	ldrh	r5, [r0, #6]
1000e46a:	8806      	ldrh	r6, [r0, #0]
1000e46c:	2d00      	cmp	r5, #0
1000e46e:	d10f      	bne.n	1000e490 <rx_callback+0x30>
1000e470:	1c19      	adds	r1, r3, #0
1000e472:	1c30      	adds	r0, r6, #0
1000e474:	4b19      	ldr	r3, [pc, #100]	; (1000e4dc <rx_callback+0x7c>)
1000e476:	1c2a      	adds	r2, r5, #0
1000e478:	4798      	blx	r3
1000e47a:	1e03      	subs	r3, r0, #0
1000e47c:	d105      	bne.n	1000e48a <rx_callback+0x2a>
1000e47e:	1c30      	adds	r0, r6, #0
1000e480:	9901      	ldr	r1, [sp, #4]
1000e482:	1c1a      	adds	r2, r3, #0
1000e484:	4c16      	ldr	r4, [pc, #88]	; (1000e4e0 <rx_callback+0x80>)
1000e486:	47a0      	blx	r4
1000e488:	e027      	b.n	1000e4da <rx_callback+0x7a>
1000e48a:	4b16      	ldr	r3, [pc, #88]	; (1000e4e4 <rx_callback+0x84>)
1000e48c:	4798      	blx	r3
1000e48e:	e024      	b.n	1000e4da <rx_callback+0x7a>
1000e490:	4c15      	ldr	r4, [pc, #84]	; (1000e4e8 <rx_callback+0x88>)
1000e492:	4a16      	ldr	r2, [pc, #88]	; (1000e4ec <rx_callback+0x8c>)
1000e494:	6823      	ldr	r3, [r4, #0]
1000e496:	6812      	ldr	r2, [r2, #0]
1000e498:	18eb      	adds	r3, r5, r3
1000e49a:	4293      	cmp	r3, r2
1000e49c:	d901      	bls.n	1000e4a2 <rx_callback+0x42>
1000e49e:	2300      	movs	r3, #0
1000e4a0:	6023      	str	r3, [r4, #0]
1000e4a2:	4f13      	ldr	r7, [pc, #76]	; (1000e4f0 <rx_callback+0x90>)
1000e4a4:	6822      	ldr	r2, [r4, #0]
1000e4a6:	683b      	ldr	r3, [r7, #0]
1000e4a8:	3108      	adds	r1, #8
1000e4aa:	1898      	adds	r0, r3, r2
1000e4ac:	1c2a      	adds	r2, r5, #0
1000e4ae:	4b11      	ldr	r3, [pc, #68]	; (1000e4f4 <rx_callback+0x94>)
1000e4b0:	4798      	blx	r3
1000e4b2:	683b      	ldr	r3, [r7, #0]
1000e4b4:	6822      	ldr	r2, [r4, #0]
1000e4b6:	1c30      	adds	r0, r6, #0
1000e4b8:	189a      	adds	r2, r3, r2
1000e4ba:	9901      	ldr	r1, [sp, #4]
1000e4bc:	4b07      	ldr	r3, [pc, #28]	; (1000e4dc <rx_callback+0x7c>)
1000e4be:	4798      	blx	r3
1000e4c0:	2800      	cmp	r0, #0
1000e4c2:	d1e2      	bne.n	1000e48a <rx_callback+0x2a>
1000e4c4:	6823      	ldr	r3, [r4, #0]
1000e4c6:	683a      	ldr	r2, [r7, #0]
1000e4c8:	1c30      	adds	r0, r6, #0
1000e4ca:	18d2      	adds	r2, r2, r3
1000e4cc:	9901      	ldr	r1, [sp, #4]
1000e4ce:	1c2b      	adds	r3, r5, #0
1000e4d0:	4e03      	ldr	r6, [pc, #12]	; (1000e4e0 <rx_callback+0x80>)
1000e4d2:	47b0      	blx	r6
1000e4d4:	6823      	ldr	r3, [r4, #0]
1000e4d6:	18ed      	adds	r5, r5, r3
1000e4d8:	6025      	str	r5, [r4, #0]
1000e4da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e4dc:	1000caf5 	.word	0x1000caf5
1000e4e0:	1000ca6d 	.word	0x1000ca6d
1000e4e4:	10009a79 	.word	0x10009a79
1000e4e8:	10016240 	.word	0x10016240
1000e4ec:	10015338 	.word	0x10015338
1000e4f0:	10015334 	.word	0x10015334
1000e4f4:	10010fa7 	.word	0x10010fa7

1000e4f8 <interface_send>:
1000e4f8:	b508      	push	{r3, lr}
1000e4fa:	4b02      	ldr	r3, [pc, #8]	; (1000e504 <interface_send+0xc>)
1000e4fc:	4798      	blx	r3
1000e4fe:	2000      	movs	r0, #0
1000e500:	bd08      	pop	{r3, pc}
1000e502:	46c0      	nop			; (mov r8, r8)
1000e504:	10009771 	.word	0x10009771

1000e508 <interface_init>:
1000e508:	2280      	movs	r2, #128	; 0x80
1000e50a:	b510      	push	{r4, lr}
1000e50c:	2100      	movs	r1, #0
1000e50e:	1c04      	adds	r4, r0, #0
1000e510:	0092      	lsls	r2, r2, #2
1000e512:	4b08      	ldr	r3, [pc, #32]	; (1000e534 <interface_init+0x2c>)
1000e514:	4808      	ldr	r0, [pc, #32]	; (1000e538 <interface_init+0x30>)
1000e516:	4798      	blx	r3
1000e518:	2200      	movs	r2, #0
1000e51a:	4b08      	ldr	r3, [pc, #32]	; (1000e53c <interface_init+0x34>)
1000e51c:	601a      	str	r2, [r3, #0]
1000e51e:	4a08      	ldr	r2, [pc, #32]	; (1000e540 <interface_init+0x38>)
1000e520:	4b08      	ldr	r3, [pc, #32]	; (1000e544 <interface_init+0x3c>)
1000e522:	601a      	str	r2, [r3, #0]
1000e524:	4b08      	ldr	r3, [pc, #32]	; (1000e548 <interface_init+0x40>)
1000e526:	6922      	ldr	r2, [r4, #16]
1000e528:	601a      	str	r2, [r3, #0]
1000e52a:	6962      	ldr	r2, [r4, #20]
1000e52c:	4b07      	ldr	r3, [pc, #28]	; (1000e54c <interface_init+0x44>)
1000e52e:	601a      	str	r2, [r3, #0]
1000e530:	bd10      	pop	{r4, pc}
1000e532:	46c0      	nop			; (mov r8, r8)
1000e534:	10010fb9 	.word	0x10010fb9
1000e538:	10016444 	.word	0x10016444
1000e53c:	10016240 	.word	0x10016240
1000e540:	10016244 	.word	0x10016244
1000e544:	100138a0 	.word	0x100138a0
1000e548:	10015334 	.word	0x10015334
1000e54c:	10015338 	.word	0x10015338

1000e550 <platform_cmd_cmpl_signal>:
1000e550:	2201      	movs	r2, #1
1000e552:	4b01      	ldr	r3, [pc, #4]	; (1000e558 <platform_cmd_cmpl_signal+0x8>)
1000e554:	601a      	str	r2, [r3, #0]
1000e556:	4770      	bx	lr
1000e558:	1001533c 	.word	0x1001533c

1000e55c <platform_cmd_cmpl_wait>:
1000e55c:	b510      	push	{r4, lr}
1000e55e:	1c04      	adds	r4, r0, #0
1000e560:	4b07      	ldr	r3, [pc, #28]	; (1000e580 <platform_cmd_cmpl_wait+0x24>)
1000e562:	681a      	ldr	r2, [r3, #0]
1000e564:	2a01      	cmp	r2, #1
1000e566:	d003      	beq.n	1000e570 <platform_cmd_cmpl_wait+0x14>
1000e568:	4b06      	ldr	r3, [pc, #24]	; (1000e584 <platform_cmd_cmpl_wait+0x28>)
1000e56a:	2000      	movs	r0, #0
1000e56c:	4798      	blx	r3
1000e56e:	e7f7      	b.n	1000e560 <platform_cmd_cmpl_wait+0x4>
1000e570:	6819      	ldr	r1, [r3, #0]
1000e572:	2901      	cmp	r1, #1
1000e574:	d102      	bne.n	1000e57c <platform_cmd_cmpl_wait+0x20>
1000e576:	2200      	movs	r2, #0
1000e578:	601a      	str	r2, [r3, #0]
1000e57a:	e000      	b.n	1000e57e <platform_cmd_cmpl_wait+0x22>
1000e57c:	7022      	strb	r2, [r4, #0]
1000e57e:	bd10      	pop	{r4, pc}
1000e580:	1001533c 	.word	0x1001533c
1000e584:	10009801 	.word	0x10009801

1000e588 <start_timer>:
1000e588:	4770      	bx	lr

1000e58a <stop_timer>:
1000e58a:	4770      	bx	lr

1000e58c <dbg_le_set_bd_addr_req_handler>:
1000e58c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e58e:	466b      	mov	r3, sp
1000e590:	1dde      	adds	r6, r3, #7
1000e592:	2300      	movs	r3, #0
1000e594:	7033      	strb	r3, [r6, #0]
1000e596:	230f      	movs	r3, #15
1000e598:	4c13      	ldr	r4, [pc, #76]	; (1000e5e8 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000e59a:	2703      	movs	r7, #3
1000e59c:	7023      	strb	r3, [r4, #0]
1000e59e:	2300      	movs	r3, #0
1000e5a0:	70e3      	strb	r3, [r4, #3]
1000e5a2:	4b12      	ldr	r3, [pc, #72]	; (1000e5ec <dbg_le_set_bd_addr_req_handler+0x60>)
1000e5a4:	1c01      	adds	r1, r0, #0
1000e5a6:	881a      	ldrh	r2, [r3, #0]
1000e5a8:	881b      	ldrh	r3, [r3, #0]
1000e5aa:	7122      	strb	r2, [r4, #4]
1000e5ac:	0a1b      	lsrs	r3, r3, #8
1000e5ae:	2206      	movs	r2, #6
1000e5b0:	7163      	strb	r3, [r4, #5]
1000e5b2:	480f      	ldr	r0, [pc, #60]	; (1000e5f0 <dbg_le_set_bd_addr_req_handler+0x64>)
1000e5b4:	4b0f      	ldr	r3, [pc, #60]	; (1000e5f4 <dbg_le_set_bd_addr_req_handler+0x68>)
1000e5b6:	7067      	strb	r7, [r4, #1]
1000e5b8:	70a7      	strb	r7, [r4, #2]
1000e5ba:	4798      	blx	r3
1000e5bc:	4d0e      	ldr	r5, [pc, #56]	; (1000e5f8 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000e5be:	4b0f      	ldr	r3, [pc, #60]	; (1000e5fc <dbg_le_set_bd_addr_req_handler+0x70>)
1000e5c0:	210e      	movs	r1, #14
1000e5c2:	802b      	strh	r3, [r5, #0]
1000e5c4:	2306      	movs	r3, #6
1000e5c6:	71a3      	strb	r3, [r4, #6]
1000e5c8:	2300      	movs	r3, #0
1000e5ca:	1c20      	adds	r0, r4, #0
1000e5cc:	71e3      	strb	r3, [r4, #7]
1000e5ce:	4b0c      	ldr	r3, [pc, #48]	; (1000e600 <dbg_le_set_bd_addr_req_handler+0x74>)
1000e5d0:	80af      	strh	r7, [r5, #4]
1000e5d2:	4798      	blx	r3
1000e5d4:	1c30      	adds	r0, r6, #0
1000e5d6:	4b0b      	ldr	r3, [pc, #44]	; (1000e604 <dbg_le_set_bd_addr_req_handler+0x78>)
1000e5d8:	4798      	blx	r3
1000e5da:	7833      	ldrb	r3, [r6, #0]
1000e5dc:	20e2      	movs	r0, #226	; 0xe2
1000e5de:	2b00      	cmp	r3, #0
1000e5e0:	d101      	bne.n	1000e5e6 <dbg_le_set_bd_addr_req_handler+0x5a>
1000e5e2:	68ab      	ldr	r3, [r5, #8]
1000e5e4:	7818      	ldrb	r0, [r3, #0]
1000e5e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e5e8:	10016444 	.word	0x10016444
1000e5ec:	100160d4 	.word	0x100160d4
1000e5f0:	1001644c 	.word	0x1001644c
1000e5f4:	10010fa7 	.word	0x10010fa7
1000e5f8:	100160c8 	.word	0x100160c8
1000e5fc:	00000329 	.word	0x00000329
1000e600:	1000e4f9 	.word	0x1000e4f9
1000e604:	1000e55d 	.word	0x1000e55d

1000e608 <gapc_get_dev_info_cfm.constprop.1>:
1000e608:	b538      	push	{r3, r4, r5, lr}
1000e60a:	230b      	movs	r3, #11
1000e60c:	4c27      	ldr	r4, [pc, #156]	; (1000e6ac <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000e60e:	7023      	strb	r3, [r4, #0]
1000e610:	3303      	adds	r3, #3
1000e612:	7063      	strb	r3, [r4, #1]
1000e614:	3329      	adds	r3, #41	; 0x29
1000e616:	70a3      	strb	r3, [r4, #2]
1000e618:	4b25      	ldr	r3, [pc, #148]	; (1000e6b0 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000e61a:	70e1      	strb	r1, [r4, #3]
1000e61c:	881a      	ldrh	r2, [r3, #0]
1000e61e:	881b      	ldrh	r3, [r3, #0]
1000e620:	7122      	strb	r2, [r4, #4]
1000e622:	0a1b      	lsrs	r3, r3, #8
1000e624:	7163      	strb	r3, [r4, #5]
1000e626:	2300      	movs	r3, #0
1000e628:	7220      	strb	r0, [r4, #8]
1000e62a:	7263      	strb	r3, [r4, #9]
1000e62c:	2801      	cmp	r0, #1
1000e62e:	d02b      	beq.n	1000e688 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000e630:	4298      	cmp	r0, r3
1000e632:	d01b      	beq.n	1000e66c <gapc_get_dev_info_cfm.constprop.1+0x64>
1000e634:	2802      	cmp	r0, #2
1000e636:	d12f      	bne.n	1000e698 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000e638:	4b1e      	ldr	r3, [pc, #120]	; (1000e6b4 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000e63a:	2112      	movs	r1, #18
1000e63c:	1c1a      	adds	r2, r3, #0
1000e63e:	32ce      	adds	r2, #206	; 0xce
1000e640:	8812      	ldrh	r2, [r2, #0]
1000e642:	72a2      	strb	r2, [r4, #10]
1000e644:	0a12      	lsrs	r2, r2, #8
1000e646:	72e2      	strb	r2, [r4, #11]
1000e648:	1c1a      	adds	r2, r3, #0
1000e64a:	32d0      	adds	r2, #208	; 0xd0
1000e64c:	8812      	ldrh	r2, [r2, #0]
1000e64e:	7322      	strb	r2, [r4, #12]
1000e650:	0a12      	lsrs	r2, r2, #8
1000e652:	7362      	strb	r2, [r4, #13]
1000e654:	1c1a      	adds	r2, r3, #0
1000e656:	32d2      	adds	r2, #210	; 0xd2
1000e658:	8812      	ldrh	r2, [r2, #0]
1000e65a:	33d4      	adds	r3, #212	; 0xd4
1000e65c:	73a2      	strb	r2, [r4, #14]
1000e65e:	0a12      	lsrs	r2, r2, #8
1000e660:	73e2      	strb	r2, [r4, #15]
1000e662:	881b      	ldrh	r3, [r3, #0]
1000e664:	7423      	strb	r3, [r4, #16]
1000e666:	0a1b      	lsrs	r3, r3, #8
1000e668:	7463      	strb	r3, [r4, #17]
1000e66a:	e016      	b.n	1000e69a <gapc_get_dev_info_cfm.constprop.1+0x92>
1000e66c:	4b11      	ldr	r3, [pc, #68]	; (1000e6b4 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000e66e:	4912      	ldr	r1, [pc, #72]	; (1000e6b8 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000e670:	33aa      	adds	r3, #170	; 0xaa
1000e672:	881d      	ldrh	r5, [r3, #0]
1000e674:	4811      	ldr	r0, [pc, #68]	; (1000e6bc <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000e676:	0a2b      	lsrs	r3, r5, #8
1000e678:	72a5      	strb	r5, [r4, #10]
1000e67a:	72e3      	strb	r3, [r4, #11]
1000e67c:	1c2a      	adds	r2, r5, #0
1000e67e:	4b10      	ldr	r3, [pc, #64]	; (1000e6c0 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000e680:	350c      	adds	r5, #12
1000e682:	4798      	blx	r3
1000e684:	b2a9      	uxth	r1, r5
1000e686:	e008      	b.n	1000e69a <gapc_get_dev_info_cfm.constprop.1+0x92>
1000e688:	4b0a      	ldr	r3, [pc, #40]	; (1000e6b4 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000e68a:	210c      	movs	r1, #12
1000e68c:	33cc      	adds	r3, #204	; 0xcc
1000e68e:	881b      	ldrh	r3, [r3, #0]
1000e690:	72a3      	strb	r3, [r4, #10]
1000e692:	0a1b      	lsrs	r3, r3, #8
1000e694:	72e3      	strb	r3, [r4, #11]
1000e696:	e000      	b.n	1000e69a <gapc_get_dev_info_cfm.constprop.1+0x92>
1000e698:	210a      	movs	r1, #10
1000e69a:	1c0b      	adds	r3, r1, #0
1000e69c:	3b08      	subs	r3, #8
1000e69e:	71a3      	strb	r3, [r4, #6]
1000e6a0:	121b      	asrs	r3, r3, #8
1000e6a2:	71e3      	strb	r3, [r4, #7]
1000e6a4:	1c20      	adds	r0, r4, #0
1000e6a6:	4b07      	ldr	r3, [pc, #28]	; (1000e6c4 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000e6a8:	4798      	blx	r3
1000e6aa:	bd38      	pop	{r3, r4, r5, pc}
1000e6ac:	10016444 	.word	0x10016444
1000e6b0:	100160d4 	.word	0x100160d4
1000e6b4:	10016166 	.word	0x10016166
1000e6b8:	10016212 	.word	0x10016212
1000e6bc:	10016450 	.word	0x10016450
1000e6c0:	10010fa7 	.word	0x10010fa7
1000e6c4:	1000e4f9 	.word	0x1000e4f9

1000e6c8 <check_ConnData_idx_role>:
1000e6c8:	4b0c      	ldr	r3, [pc, #48]	; (1000e6fc <check_ConnData_idx_role+0x34>)
1000e6ca:	b570      	push	{r4, r5, r6, lr}
1000e6cc:	1c04      	adds	r4, r0, #0
1000e6ce:	2008      	movs	r0, #8
1000e6d0:	429c      	cmp	r4, r3
1000e6d2:	d011      	beq.n	1000e6f8 <check_ConnData_idx_role+0x30>
1000e6d4:	2300      	movs	r3, #0
1000e6d6:	2212      	movs	r2, #18
1000e6d8:	435a      	muls	r2, r3
1000e6da:	4d09      	ldr	r5, [pc, #36]	; (1000e700 <check_ConnData_idx_role+0x38>)
1000e6dc:	b2d8      	uxtb	r0, r3
1000e6de:	1956      	adds	r6, r2, r5
1000e6e0:	8976      	ldrh	r6, [r6, #10]
1000e6e2:	42a6      	cmp	r6, r4
1000e6e4:	d104      	bne.n	1000e6f0 <check_ConnData_idx_role+0x28>
1000e6e6:	2900      	cmp	r1, #0
1000e6e8:	d006      	beq.n	1000e6f8 <check_ConnData_idx_role+0x30>
1000e6ea:	5d53      	ldrb	r3, [r2, r5]
1000e6ec:	700b      	strb	r3, [r1, #0]
1000e6ee:	e003      	b.n	1000e6f8 <check_ConnData_idx_role+0x30>
1000e6f0:	3301      	adds	r3, #1
1000e6f2:	2b08      	cmp	r3, #8
1000e6f4:	d1ef      	bne.n	1000e6d6 <check_ConnData_idx_role+0xe>
1000e6f6:	1c18      	adds	r0, r3, #0
1000e6f8:	bd70      	pop	{r4, r5, r6, pc}
1000e6fa:	46c0      	nop			; (mov r8, r8)
1000e6fc:	0000ffff 	.word	0x0000ffff
1000e700:	100160d6 	.word	0x100160d6

1000e704 <check_ConnData_emptyEntry>:
1000e704:	2300      	movs	r3, #0
1000e706:	2212      	movs	r2, #18
1000e708:	435a      	muls	r2, r3
1000e70a:	4906      	ldr	r1, [pc, #24]	; (1000e724 <check_ConnData_emptyEntry+0x20>)
1000e70c:	b2d8      	uxtb	r0, r3
1000e70e:	1852      	adds	r2, r2, r1
1000e710:	8951      	ldrh	r1, [r2, #10]
1000e712:	4a05      	ldr	r2, [pc, #20]	; (1000e728 <check_ConnData_emptyEntry+0x24>)
1000e714:	4291      	cmp	r1, r2
1000e716:	d003      	beq.n	1000e720 <check_ConnData_emptyEntry+0x1c>
1000e718:	3301      	adds	r3, #1
1000e71a:	2b08      	cmp	r3, #8
1000e71c:	d1f3      	bne.n	1000e706 <check_ConnData_emptyEntry+0x2>
1000e71e:	1c18      	adds	r0, r3, #0
1000e720:	4770      	bx	lr
1000e722:	46c0      	nop			; (mov r8, r8)
1000e724:	100160d6 	.word	0x100160d6
1000e728:	0000ffff 	.word	0x0000ffff

1000e72c <gapc_cmp_evt>:
1000e72c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e72e:	780b      	ldrb	r3, [r1, #0]
1000e730:	1c05      	adds	r5, r0, #0
1000e732:	1e58      	subs	r0, r3, #1
1000e734:	784e      	ldrb	r6, [r1, #1]
1000e736:	280f      	cmp	r0, #15
1000e738:	d85a      	bhi.n	1000e7f0 <gapc_cmp_evt+0xc4>
1000e73a:	1c14      	adds	r4, r2, #0
1000e73c:	f001 fba4 	bl	1000fe88 <__gnu_thumb1_case_uqi>
1000e740:	5858440a 	.word	0x5858440a
1000e744:	4b584444 	.word	0x4b584444
1000e748:	0825122d 	.word	0x0825122d
1000e74c:	3e395858 	.word	0x3e395858
1000e750:	203b      	movs	r0, #59	; 0x3b
1000e752:	e04e      	b.n	1000e7f2 <gapc_cmp_evt+0xc6>
1000e754:	203b      	movs	r0, #59	; 0x3b
1000e756:	2e00      	cmp	r6, #0
1000e758:	d04b      	beq.n	1000e7f2 <gapc_cmp_evt+0xc6>
1000e75a:	0a2d      	lsrs	r5, r5, #8
1000e75c:	8015      	strh	r5, [r2, #0]
1000e75e:	7096      	strb	r6, [r2, #2]
1000e760:	3835      	subs	r0, #53	; 0x35
1000e762:	e046      	b.n	1000e7f2 <gapc_cmp_evt+0xc6>
1000e764:	466b      	mov	r3, sp
1000e766:	1ddf      	adds	r7, r3, #7
1000e768:	2301      	movs	r3, #1
1000e76a:	0a2d      	lsrs	r5, r5, #8
1000e76c:	703b      	strb	r3, [r7, #0]
1000e76e:	1c28      	adds	r0, r5, #0
1000e770:	1c39      	adds	r1, r7, #0
1000e772:	4b20      	ldr	r3, [pc, #128]	; (1000e7f4 <gapc_cmp_evt+0xc8>)
1000e774:	4798      	blx	r3
1000e776:	2807      	cmp	r0, #7
1000e778:	d803      	bhi.n	1000e782 <gapc_cmp_evt+0x56>
1000e77a:	783b      	ldrb	r3, [r7, #0]
1000e77c:	203b      	movs	r0, #59	; 0x3b
1000e77e:	2b00      	cmp	r3, #0
1000e780:	d037      	beq.n	1000e7f2 <gapc_cmp_evt+0xc6>
1000e782:	8065      	strh	r5, [r4, #2]
1000e784:	7126      	strb	r6, [r4, #4]
1000e786:	2009      	movs	r0, #9
1000e788:	e033      	b.n	1000e7f2 <gapc_cmp_evt+0xc6>
1000e78a:	203b      	movs	r0, #59	; 0x3b
1000e78c:	2e00      	cmp	r6, #0
1000e78e:	d030      	beq.n	1000e7f2 <gapc_cmp_evt+0xc6>
1000e790:	0a2d      	lsrs	r5, r5, #8
1000e792:	8015      	strh	r5, [r2, #0]
1000e794:	7096      	strb	r6, [r2, #2]
1000e796:	382d      	subs	r0, #45	; 0x2d
1000e798:	e02b      	b.n	1000e7f2 <gapc_cmp_evt+0xc6>
1000e79a:	203b      	movs	r0, #59	; 0x3b
1000e79c:	2e00      	cmp	r6, #0
1000e79e:	d028      	beq.n	1000e7f2 <gapc_cmp_evt+0xc6>
1000e7a0:	2300      	movs	r3, #0
1000e7a2:	0a2d      	lsrs	r5, r5, #8
1000e7a4:	8015      	strh	r5, [r2, #0]
1000e7a6:	7096      	strb	r6, [r2, #2]
1000e7a8:	8093      	strh	r3, [r2, #4]
1000e7aa:	80d3      	strh	r3, [r2, #6]
1000e7ac:	8113      	strh	r3, [r2, #8]
1000e7ae:	3834      	subs	r0, #52	; 0x34
1000e7b0:	e01f      	b.n	1000e7f2 <gapc_cmp_evt+0xc6>
1000e7b2:	203b      	movs	r0, #59	; 0x3b
1000e7b4:	2e00      	cmp	r6, #0
1000e7b6:	d01c      	beq.n	1000e7f2 <gapc_cmp_evt+0xc6>
1000e7b8:	7216      	strb	r6, [r2, #8]
1000e7ba:	e003      	b.n	1000e7c4 <gapc_cmp_evt+0x98>
1000e7bc:	203b      	movs	r0, #59	; 0x3b
1000e7be:	2e00      	cmp	r6, #0
1000e7c0:	d017      	beq.n	1000e7f2 <gapc_cmp_evt+0xc6>
1000e7c2:	7116      	strb	r6, [r2, #4]
1000e7c4:	3812      	subs	r0, #18
1000e7c6:	e014      	b.n	1000e7f2 <gapc_cmp_evt+0xc6>
1000e7c8:	203b      	movs	r0, #59	; 0x3b
1000e7ca:	2e00      	cmp	r6, #0
1000e7cc:	d011      	beq.n	1000e7f2 <gapc_cmp_evt+0xc6>
1000e7ce:	7093      	strb	r3, [r2, #2]
1000e7d0:	70d6      	strb	r6, [r2, #3]
1000e7d2:	382a      	subs	r0, #42	; 0x2a
1000e7d4:	e00d      	b.n	1000e7f2 <gapc_cmp_evt+0xc6>
1000e7d6:	203b      	movs	r0, #59	; 0x3b
1000e7d8:	2e00      	cmp	r6, #0
1000e7da:	d00a      	beq.n	1000e7f2 <gapc_cmp_evt+0xc6>
1000e7dc:	0a2d      	lsrs	r5, r5, #8
1000e7de:	7016      	strb	r6, [r2, #0]
1000e7e0:	8055      	strh	r5, [r2, #2]
1000e7e2:	1d10      	adds	r0, r2, #4
1000e7e4:	2100      	movs	r1, #0
1000e7e6:	2205      	movs	r2, #5
1000e7e8:	4b03      	ldr	r3, [pc, #12]	; (1000e7f8 <gapc_cmp_evt+0xcc>)
1000e7ea:	4798      	blx	r3
1000e7ec:	2012      	movs	r0, #18
1000e7ee:	e000      	b.n	1000e7f2 <gapc_cmp_evt+0xc6>
1000e7f0:	2000      	movs	r0, #0
1000e7f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e7f4:	1000e6c9 	.word	0x1000e6c9
1000e7f8:	10010fb9 	.word	0x10010fb9

1000e7fc <gapc_connection_cfm_handler>:
1000e7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e7fe:	b085      	sub	sp, #20
1000e800:	1c1d      	adds	r5, r3, #0
1000e802:	ab0a      	add	r3, sp, #40	; 0x28
1000e804:	781b      	ldrb	r3, [r3, #0]
1000e806:	9201      	str	r2, [sp, #4]
1000e808:	9302      	str	r3, [sp, #8]
1000e80a:	ab0b      	add	r3, sp, #44	; 0x2c
1000e80c:	781b      	ldrb	r3, [r3, #0]
1000e80e:	1c07      	adds	r7, r0, #0
1000e810:	9303      	str	r3, [sp, #12]
1000e812:	ab0c      	add	r3, sp, #48	; 0x30
1000e814:	881a      	ldrh	r2, [r3, #0]
1000e816:	2302      	movs	r3, #2
1000e818:	1c0e      	adds	r6, r1, #0
1000e81a:	4c23      	ldr	r4, [pc, #140]	; (1000e8a8 <gapc_connection_cfm_handler+0xac>)
1000e81c:	1c39      	adds	r1, r7, #0
1000e81e:	7023      	strb	r3, [r4, #0]
1000e820:	330c      	adds	r3, #12
1000e822:	7063      	strb	r3, [r4, #1]
1000e824:	70a3      	strb	r3, [r4, #2]
1000e826:	4b21      	ldr	r3, [pc, #132]	; (1000e8ac <gapc_connection_cfm_handler+0xb0>)
1000e828:	70e2      	strb	r2, [r4, #3]
1000e82a:	881a      	ldrh	r2, [r3, #0]
1000e82c:	881b      	ldrh	r3, [r3, #0]
1000e82e:	7122      	strb	r2, [r4, #4]
1000e830:	0a1b      	lsrs	r3, r3, #8
1000e832:	4f1f      	ldr	r7, [pc, #124]	; (1000e8b0 <gapc_connection_cfm_handler+0xb4>)
1000e834:	2210      	movs	r2, #16
1000e836:	481f      	ldr	r0, [pc, #124]	; (1000e8b4 <gapc_connection_cfm_handler+0xb8>)
1000e838:	7163      	strb	r3, [r4, #5]
1000e83a:	47b8      	blx	r7
1000e83c:	0a33      	lsrs	r3, r6, #8
1000e83e:	7626      	strb	r6, [r4, #24]
1000e840:	7663      	strb	r3, [r4, #25]
1000e842:	9901      	ldr	r1, [sp, #4]
1000e844:	0c33      	lsrs	r3, r6, #16
1000e846:	2210      	movs	r2, #16
1000e848:	0e36      	lsrs	r6, r6, #24
1000e84a:	481b      	ldr	r0, [pc, #108]	; (1000e8b8 <gapc_connection_cfm_handler+0xbc>)
1000e84c:	76a3      	strb	r3, [r4, #26]
1000e84e:	76e6      	strb	r6, [r4, #27]
1000e850:	47b8      	blx	r7
1000e852:	1c23      	adds	r3, r4, #0
1000e854:	332c      	adds	r3, #44	; 0x2c
1000e856:	701d      	strb	r5, [r3, #0]
1000e858:	1c23      	adds	r3, r4, #0
1000e85a:	0a2a      	lsrs	r2, r5, #8
1000e85c:	332d      	adds	r3, #45	; 0x2d
1000e85e:	701a      	strb	r2, [r3, #0]
1000e860:	1c23      	adds	r3, r4, #0
1000e862:	0c2a      	lsrs	r2, r5, #16
1000e864:	332e      	adds	r3, #46	; 0x2e
1000e866:	701a      	strb	r2, [r3, #0]
1000e868:	1c23      	adds	r3, r4, #0
1000e86a:	0e2d      	lsrs	r5, r5, #24
1000e86c:	332f      	adds	r3, #47	; 0x2f
1000e86e:	466a      	mov	r2, sp
1000e870:	701d      	strb	r5, [r3, #0]
1000e872:	1c23      	adds	r3, r4, #0
1000e874:	7a12      	ldrb	r2, [r2, #8]
1000e876:	3330      	adds	r3, #48	; 0x30
1000e878:	701a      	strb	r2, [r3, #0]
1000e87a:	1c23      	adds	r3, r4, #0
1000e87c:	2500      	movs	r5, #0
1000e87e:	3331      	adds	r3, #49	; 0x31
1000e880:	466a      	mov	r2, sp
1000e882:	701d      	strb	r5, [r3, #0]
1000e884:	1c23      	adds	r3, r4, #0
1000e886:	7b12      	ldrb	r2, [r2, #12]
1000e888:	3332      	adds	r3, #50	; 0x32
1000e88a:	701a      	strb	r2, [r3, #0]
1000e88c:	1c23      	adds	r3, r4, #0
1000e88e:	3333      	adds	r3, #51	; 0x33
1000e890:	701d      	strb	r5, [r3, #0]
1000e892:	232c      	movs	r3, #44	; 0x2c
1000e894:	1c20      	adds	r0, r4, #0
1000e896:	71a3      	strb	r3, [r4, #6]
1000e898:	2134      	movs	r1, #52	; 0x34
1000e89a:	4b08      	ldr	r3, [pc, #32]	; (1000e8bc <gapc_connection_cfm_handler+0xc0>)
1000e89c:	71e5      	strb	r5, [r4, #7]
1000e89e:	4798      	blx	r3
1000e8a0:	1c28      	adds	r0, r5, #0
1000e8a2:	b005      	add	sp, #20
1000e8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e8a6:	46c0      	nop			; (mov r8, r8)
1000e8a8:	10016444 	.word	0x10016444
1000e8ac:	100160d4 	.word	0x100160d4
1000e8b0:	10010fa7 	.word	0x10010fa7
1000e8b4:	1001644c 	.word	0x1001644c
1000e8b8:	10016460 	.word	0x10016460
1000e8bc:	1000e4f9 	.word	0x1000e4f9

1000e8c0 <gapc_con_req_ind>:
1000e8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e8c2:	7845      	ldrb	r5, [r0, #1]
1000e8c4:	7803      	ldrb	r3, [r0, #0]
1000e8c6:	4c30      	ldr	r4, [pc, #192]	; (1000e988 <gapc_con_req_ind+0xc8>)
1000e8c8:	022d      	lsls	r5, r5, #8
1000e8ca:	431d      	orrs	r5, r3
1000e8cc:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000e8ce:	78c3      	ldrb	r3, [r0, #3]
1000e8d0:	7882      	ldrb	r2, [r0, #2]
1000e8d2:	b08b      	sub	sp, #44	; 0x2c
1000e8d4:	021b      	lsls	r3, r3, #8
1000e8d6:	431a      	orrs	r2, r3
1000e8d8:	466b      	mov	r3, sp
1000e8da:	9205      	str	r2, [sp, #20]
1000e8dc:	8a9b      	ldrh	r3, [r3, #20]
1000e8de:	2120      	movs	r1, #32
1000e8e0:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000e8e2:	7943      	ldrb	r3, [r0, #5]
1000e8e4:	7902      	ldrb	r2, [r0, #4]
1000e8e6:	021b      	lsls	r3, r3, #8
1000e8e8:	431a      	orrs	r2, r3
1000e8ea:	466b      	mov	r3, sp
1000e8ec:	9206      	str	r2, [sp, #24]
1000e8ee:	8b1b      	ldrh	r3, [r3, #24]
1000e8f0:	1c06      	adds	r6, r0, #0
1000e8f2:	8623      	strh	r3, [r4, #48]	; 0x30
1000e8f4:	79c3      	ldrb	r3, [r0, #7]
1000e8f6:	7982      	ldrb	r2, [r0, #6]
1000e8f8:	021b      	lsls	r3, r3, #8
1000e8fa:	431a      	orrs	r2, r3
1000e8fc:	466b      	mov	r3, sp
1000e8fe:	9207      	str	r2, [sp, #28]
1000e900:	466a      	mov	r2, sp
1000e902:	8b9b      	ldrh	r3, [r3, #28]
1000e904:	1852      	adds	r2, r2, r1
1000e906:	8663      	strh	r3, [r4, #50]	; 0x32
1000e908:	7a43      	ldrb	r3, [r0, #9]
1000e90a:	1c01      	adds	r1, r0, #0
1000e90c:	9308      	str	r3, [sp, #32]
1000e90e:	1c23      	adds	r3, r4, #0
1000e910:	7812      	ldrb	r2, [r2, #0]
1000e912:	3377      	adds	r3, #119	; 0x77
1000e914:	3478      	adds	r4, #120	; 0x78
1000e916:	701a      	strb	r2, [r3, #0]
1000e918:	310a      	adds	r1, #10
1000e91a:	2206      	movs	r2, #6
1000e91c:	4b1b      	ldr	r3, [pc, #108]	; (1000e98c <gapc_con_req_ind+0xcc>)
1000e91e:	1c20      	adds	r0, r4, #0
1000e920:	4798      	blx	r3
1000e922:	7c33      	ldrb	r3, [r6, #16]
1000e924:	9309      	str	r3, [sp, #36]	; 0x24
1000e926:	4b1a      	ldr	r3, [pc, #104]	; (1000e990 <gapc_con_req_ind+0xd0>)
1000e928:	4798      	blx	r3
1000e92a:	4e1a      	ldr	r6, [pc, #104]	; (1000e994 <gapc_con_req_ind+0xd4>)
1000e92c:	1e07      	subs	r7, r0, #0
1000e92e:	2f07      	cmp	r7, #7
1000e930:	d81b      	bhi.n	1000e96a <gapc_con_req_ind+0xaa>
1000e932:	2312      	movs	r3, #18
1000e934:	4343      	muls	r3, r0
1000e936:	18f0      	adds	r0, r6, r3
1000e938:	8145      	strh	r5, [r0, #10]
1000e93a:	4669      	mov	r1, sp
1000e93c:	2524      	movs	r5, #36	; 0x24
1000e93e:	1949      	adds	r1, r1, r5
1000e940:	7809      	ldrb	r1, [r1, #0]
1000e942:	2206      	movs	r2, #6
1000e944:	54f1      	strb	r1, [r6, r3]
1000e946:	2120      	movs	r1, #32
1000e948:	466b      	mov	r3, sp
1000e94a:	185b      	adds	r3, r3, r1
1000e94c:	781b      	ldrb	r3, [r3, #0]
1000e94e:	1c21      	adds	r1, r4, #0
1000e950:	7043      	strb	r3, [r0, #1]
1000e952:	466b      	mov	r3, sp
1000e954:	8a9b      	ldrh	r3, [r3, #20]
1000e956:	3002      	adds	r0, #2
1000e958:	8143      	strh	r3, [r0, #10]
1000e95a:	466b      	mov	r3, sp
1000e95c:	8b1b      	ldrh	r3, [r3, #24]
1000e95e:	8183      	strh	r3, [r0, #12]
1000e960:	466b      	mov	r3, sp
1000e962:	8b9b      	ldrh	r3, [r3, #28]
1000e964:	81c3      	strh	r3, [r0, #14]
1000e966:	4b09      	ldr	r3, [pc, #36]	; (1000e98c <gapc_con_req_ind+0xcc>)
1000e968:	4798      	blx	r3
1000e96a:	2112      	movs	r1, #18
1000e96c:	2300      	movs	r3, #0
1000e96e:	434f      	muls	r7, r1
1000e970:	9300      	str	r3, [sp, #0]
1000e972:	9301      	str	r3, [sp, #4]
1000e974:	19f6      	adds	r6, r6, r7
1000e976:	8971      	ldrh	r1, [r6, #10]
1000e978:	4a07      	ldr	r2, [pc, #28]	; (1000e998 <gapc_con_req_ind+0xd8>)
1000e97a:	9102      	str	r1, [sp, #8]
1000e97c:	1c10      	adds	r0, r2, #0
1000e97e:	1c19      	adds	r1, r3, #0
1000e980:	4c06      	ldr	r4, [pc, #24]	; (1000e99c <gapc_con_req_ind+0xdc>)
1000e982:	47a0      	blx	r4
1000e984:	b00b      	add	sp, #44	; 0x2c
1000e986:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e988:	10016166 	.word	0x10016166
1000e98c:	10010fa7 	.word	0x10010fa7
1000e990:	1000e705 	.word	0x1000e705
1000e994:	100160d6 	.word	0x100160d6
1000e998:	10015340 	.word	0x10015340
1000e99c:	1000e7fd 	.word	0x1000e7fd

1000e9a0 <gapc_disconnect_cmd_handler>:
1000e9a0:	2204      	movs	r2, #4
1000e9a2:	b510      	push	{r4, lr}
1000e9a4:	4b0c      	ldr	r3, [pc, #48]	; (1000e9d8 <gapc_disconnect_cmd_handler+0x38>)
1000e9a6:	2400      	movs	r4, #0
1000e9a8:	701a      	strb	r2, [r3, #0]
1000e9aa:	320a      	adds	r2, #10
1000e9ac:	705a      	strb	r2, [r3, #1]
1000e9ae:	709a      	strb	r2, [r3, #2]
1000e9b0:	4a0a      	ldr	r2, [pc, #40]	; (1000e9dc <gapc_disconnect_cmd_handler+0x3c>)
1000e9b2:	70d9      	strb	r1, [r3, #3]
1000e9b4:	8811      	ldrh	r1, [r2, #0]
1000e9b6:	8812      	ldrh	r2, [r2, #0]
1000e9b8:	7119      	strb	r1, [r3, #4]
1000e9ba:	0a12      	lsrs	r2, r2, #8
1000e9bc:	715a      	strb	r2, [r3, #5]
1000e9be:	2201      	movs	r2, #1
1000e9c0:	721a      	strb	r2, [r3, #8]
1000e9c2:	1892      	adds	r2, r2, r2
1000e9c4:	7258      	strb	r0, [r3, #9]
1000e9c6:	719a      	strb	r2, [r3, #6]
1000e9c8:	71dc      	strb	r4, [r3, #7]
1000e9ca:	1c18      	adds	r0, r3, #0
1000e9cc:	210a      	movs	r1, #10
1000e9ce:	4b04      	ldr	r3, [pc, #16]	; (1000e9e0 <gapc_disconnect_cmd_handler+0x40>)
1000e9d0:	4798      	blx	r3
1000e9d2:	1c20      	adds	r0, r4, #0
1000e9d4:	bd10      	pop	{r4, pc}
1000e9d6:	46c0      	nop			; (mov r8, r8)
1000e9d8:	10016444 	.word	0x10016444
1000e9dc:	100160d4 	.word	0x100160d4
1000e9e0:	1000e4f9 	.word	0x1000e4f9

1000e9e4 <gapc_disconnect_ind>:
1000e9e4:	1c02      	adds	r2, r0, #0
1000e9e6:	b508      	push	{r3, lr}
1000e9e8:	7843      	ldrb	r3, [r0, #1]
1000e9ea:	7800      	ldrb	r0, [r0, #0]
1000e9ec:	021b      	lsls	r3, r3, #8
1000e9ee:	4318      	orrs	r0, r3
1000e9f0:	8008      	strh	r0, [r1, #0]
1000e9f2:	7893      	ldrb	r3, [r2, #2]
1000e9f4:	708b      	strb	r3, [r1, #2]
1000e9f6:	2100      	movs	r1, #0
1000e9f8:	4b05      	ldr	r3, [pc, #20]	; (1000ea10 <gapc_disconnect_ind+0x2c>)
1000e9fa:	4798      	blx	r3
1000e9fc:	2807      	cmp	r0, #7
1000e9fe:	d806      	bhi.n	1000ea0e <gapc_disconnect_ind+0x2a>
1000ea00:	2312      	movs	r3, #18
1000ea02:	4358      	muls	r0, r3
1000ea04:	4b03      	ldr	r3, [pc, #12]	; (1000ea14 <gapc_disconnect_ind+0x30>)
1000ea06:	1818      	adds	r0, r3, r0
1000ea08:	2301      	movs	r3, #1
1000ea0a:	425b      	negs	r3, r3
1000ea0c:	8143      	strh	r3, [r0, #10]
1000ea0e:	bd08      	pop	{r3, pc}
1000ea10:	1000e6c9 	.word	0x1000e6c9
1000ea14:	100160d6 	.word	0x100160d6

1000ea18 <gapc_bond_cmd_handler>:
1000ea18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ea1a:	9300      	str	r3, [sp, #0]
1000ea1c:	2312      	movs	r3, #18
1000ea1e:	1c04      	adds	r4, r0, #0
1000ea20:	a808      	add	r0, sp, #32
1000ea22:	7807      	ldrb	r7, [r0, #0]
1000ea24:	a809      	add	r0, sp, #36	; 0x24
1000ea26:	7806      	ldrb	r6, [r0, #0]
1000ea28:	a80a      	add	r0, sp, #40	; 0x28
1000ea2a:	7805      	ldrb	r5, [r0, #0]
1000ea2c:	a80b      	add	r0, sp, #44	; 0x2c
1000ea2e:	7800      	ldrb	r0, [r0, #0]
1000ea30:	9001      	str	r0, [sp, #4]
1000ea32:	4810      	ldr	r0, [pc, #64]	; (1000ea74 <gapc_bond_cmd_handler+0x5c>)
1000ea34:	7003      	strb	r3, [r0, #0]
1000ea36:	230e      	movs	r3, #14
1000ea38:	70c4      	strb	r4, [r0, #3]
1000ea3a:	4c0f      	ldr	r4, [pc, #60]	; (1000ea78 <gapc_bond_cmd_handler+0x60>)
1000ea3c:	7043      	strb	r3, [r0, #1]
1000ea3e:	7083      	strb	r3, [r0, #2]
1000ea40:	8823      	ldrh	r3, [r4, #0]
1000ea42:	8824      	ldrh	r4, [r4, #0]
1000ea44:	7103      	strb	r3, [r0, #4]
1000ea46:	466b      	mov	r3, sp
1000ea48:	781b      	ldrb	r3, [r3, #0]
1000ea4a:	0a24      	lsrs	r4, r4, #8
1000ea4c:	72c3      	strb	r3, [r0, #11]
1000ea4e:	466b      	mov	r3, sp
1000ea50:	791b      	ldrb	r3, [r3, #4]
1000ea52:	7144      	strb	r4, [r0, #5]
1000ea54:	73c3      	strb	r3, [r0, #15]
1000ea56:	2308      	movs	r3, #8
1000ea58:	7183      	strb	r3, [r0, #6]
1000ea5a:	2300      	movs	r3, #0
1000ea5c:	240a      	movs	r4, #10
1000ea5e:	7241      	strb	r1, [r0, #9]
1000ea60:	71c3      	strb	r3, [r0, #7]
1000ea62:	2110      	movs	r1, #16
1000ea64:	4b05      	ldr	r3, [pc, #20]	; (1000ea7c <gapc_bond_cmd_handler+0x64>)
1000ea66:	7307      	strb	r7, [r0, #12]
1000ea68:	7346      	strb	r6, [r0, #13]
1000ea6a:	7385      	strb	r5, [r0, #14]
1000ea6c:	7204      	strb	r4, [r0, #8]
1000ea6e:	7282      	strb	r2, [r0, #10]
1000ea70:	4798      	blx	r3
1000ea72:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000ea74:	10016444 	.word	0x10016444
1000ea78:	100160d4 	.word	0x100160d4
1000ea7c:	1000e4f9 	.word	0x1000e4f9

1000ea80 <gapc_bond_ind>:
1000ea80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ea82:	780e      	ldrb	r6, [r1, #0]
1000ea84:	1c03      	adds	r3, r0, #0
1000ea86:	1eb0      	subs	r0, r6, #2
1000ea88:	2805      	cmp	r0, #5
1000ea8a:	d85d      	bhi.n	1000eb48 <gapc_bond_ind+0xc8>
1000ea8c:	1c15      	adds	r5, r2, #0
1000ea8e:	1c0c      	adds	r4, r1, #0
1000ea90:	f001 f9fa 	bl	1000fe88 <__gnu_thumb1_case_uqi>
1000ea94:	2f5a030d 	.word	0x2f5a030d
1000ea98:	4740      	.short	0x4740
1000ea9a:	2009      	movs	r0, #9
1000ea9c:	2a00      	cmp	r2, #0
1000ea9e:	d054      	beq.n	1000eb4a <gapc_bond_ind+0xca>
1000eaa0:	0a1b      	lsrs	r3, r3, #8
1000eaa2:	8053      	strh	r3, [r2, #2]
1000eaa4:	788b      	ldrb	r3, [r1, #2]
1000eaa6:	4829      	ldr	r0, [pc, #164]	; (1000eb4c <gapc_bond_ind+0xcc>)
1000eaa8:	7113      	strb	r3, [r2, #4]
1000eaaa:	2100      	movs	r1, #0
1000eaac:	e01c      	b.n	1000eae8 <gapc_bond_ind+0x68>
1000eaae:	2009      	movs	r0, #9
1000eab0:	2a00      	cmp	r2, #0
1000eab2:	d04a      	beq.n	1000eb4a <gapc_bond_ind+0xca>
1000eab4:	4c25      	ldr	r4, [pc, #148]	; (1000eb4c <gapc_bond_ind+0xcc>)
1000eab6:	0a1b      	lsrs	r3, r3, #8
1000eab8:	8053      	strh	r3, [r2, #2]
1000eaba:	788b      	ldrb	r3, [r1, #2]
1000eabc:	2700      	movs	r7, #0
1000eabe:	1c10      	adds	r0, r2, #0
1000eac0:	1c21      	adds	r1, r4, #0
1000eac2:	7013      	strb	r3, [r2, #0]
1000eac4:	4e22      	ldr	r6, [pc, #136]	; (1000eb50 <gapc_bond_ind+0xd0>)
1000eac6:	7117      	strb	r7, [r2, #4]
1000eac8:	312e      	adds	r1, #46	; 0x2e
1000eaca:	2217      	movs	r2, #23
1000eacc:	3032      	adds	r0, #50	; 0x32
1000eace:	47b0      	blx	r6
1000ead0:	1c28      	adds	r0, r5, #0
1000ead2:	1c21      	adds	r1, r4, #0
1000ead4:	2210      	movs	r2, #16
1000ead6:	311e      	adds	r1, #30
1000ead8:	3022      	adds	r0, #34	; 0x22
1000eada:	47b0      	blx	r6
1000eadc:	1ca1      	adds	r1, r4, #2
1000eade:	1da8      	adds	r0, r5, #6
1000eae0:	221c      	movs	r2, #28
1000eae2:	47b0      	blx	r6
1000eae4:	1c20      	adds	r0, r4, #0
1000eae6:	1c39      	adds	r1, r7, #0
1000eae8:	2246      	movs	r2, #70	; 0x46
1000eaea:	4b1a      	ldr	r3, [pc, #104]	; (1000eb54 <gapc_bond_ind+0xd4>)
1000eaec:	4798      	blx	r3
1000eaee:	2009      	movs	r0, #9
1000eaf0:	e02b      	b.n	1000eb4a <gapc_bond_ind+0xca>
1000eaf2:	4d16      	ldr	r5, [pc, #88]	; (1000eb4c <gapc_bond_ind+0xcc>)
1000eaf4:	3102      	adds	r1, #2
1000eaf6:	1c28      	adds	r0, r5, #0
1000eaf8:	2210      	movs	r2, #16
1000eafa:	4e15      	ldr	r6, [pc, #84]	; (1000eb50 <gapc_bond_ind+0xd0>)
1000eafc:	302e      	adds	r0, #46	; 0x2e
1000eafe:	47b0      	blx	r6
1000eb00:	1c28      	adds	r0, r5, #0
1000eb02:	1c21      	adds	r1, r4, #0
1000eb04:	303f      	adds	r0, #63	; 0x3f
1000eb06:	3112      	adds	r1, #18
1000eb08:	2206      	movs	r2, #6
1000eb0a:	47b0      	blx	r6
1000eb0c:	7e23      	ldrb	r3, [r4, #24]
1000eb0e:	353e      	adds	r5, #62	; 0x3e
1000eb10:	702b      	strb	r3, [r5, #0]
1000eb12:	e019      	b.n	1000eb48 <gapc_bond_ind+0xc8>
1000eb14:	480d      	ldr	r0, [pc, #52]	; (1000eb4c <gapc_bond_ind+0xcc>)
1000eb16:	3102      	adds	r1, #2
1000eb18:	2210      	movs	r2, #16
1000eb1a:	4b0d      	ldr	r3, [pc, #52]	; (1000eb50 <gapc_bond_ind+0xd0>)
1000eb1c:	301e      	adds	r0, #30
1000eb1e:	4798      	blx	r3
1000eb20:	e012      	b.n	1000eb48 <gapc_bond_ind+0xc8>
1000eb22:	4d0a      	ldr	r5, [pc, #40]	; (1000eb4c <gapc_bond_ind+0xcc>)
1000eb24:	3102      	adds	r1, #2
1000eb26:	2210      	movs	r2, #16
1000eb28:	4e09      	ldr	r6, [pc, #36]	; (1000eb50 <gapc_bond_ind+0xd0>)
1000eb2a:	1ca8      	adds	r0, r5, #2
1000eb2c:	47b0      	blx	r6
1000eb2e:	1c28      	adds	r0, r5, #0
1000eb30:	1c21      	adds	r1, r4, #0
1000eb32:	7ce3      	ldrb	r3, [r4, #19]
1000eb34:	7ca2      	ldrb	r2, [r4, #18]
1000eb36:	021b      	lsls	r3, r3, #8
1000eb38:	4313      	orrs	r3, r2
1000eb3a:	3014      	adds	r0, #20
1000eb3c:	3114      	adds	r1, #20
1000eb3e:	2208      	movs	r2, #8
1000eb40:	826b      	strh	r3, [r5, #18]
1000eb42:	47b0      	blx	r6
1000eb44:	7f23      	ldrb	r3, [r4, #28]
1000eb46:	772b      	strb	r3, [r5, #28]
1000eb48:	2000      	movs	r0, #0
1000eb4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000eb4c:	10015370 	.word	0x10015370
1000eb50:	10010fa7 	.word	0x10010fa7
1000eb54:	10010fb9 	.word	0x10010fb9

1000eb58 <gapc_bond_req_ind>:
1000eb58:	b570      	push	{r4, r5, r6, lr}
1000eb5a:	780c      	ldrb	r4, [r1, #0]
1000eb5c:	1c03      	adds	r3, r0, #0
1000eb5e:	7849      	ldrb	r1, [r1, #1]
1000eb60:	2c07      	cmp	r4, #7
1000eb62:	d85c      	bhi.n	1000ec1e <gapc_bond_req_ind+0xc6>
1000eb64:	1c20      	adds	r0, r4, #0
1000eb66:	f001 f98f 	bl	1000fe88 <__gnu_thumb1_case_uqi>
1000eb6a:	5a04      	.short	0x5a04
1000eb6c:	5a0b5a5a 	.word	0x5a0b5a5a
1000eb70:	1f1f      	.short	0x1f1f
1000eb72:	200a      	movs	r0, #10
1000eb74:	2a00      	cmp	r2, #0
1000eb76:	d053      	beq.n	1000ec20 <gapc_bond_req_ind+0xc8>
1000eb78:	0a1b      	lsrs	r3, r3, #8
1000eb7a:	8013      	strh	r3, [r2, #0]
1000eb7c:	7091      	strb	r1, [r2, #2]
1000eb7e:	e04f      	b.n	1000ec20 <gapc_bond_req_ind+0xc8>
1000eb80:	2a00      	cmp	r2, #0
1000eb82:	d00b      	beq.n	1000eb9c <gapc_bond_req_ind+0x44>
1000eb84:	0a1b      	lsrs	r3, r3, #8
1000eb86:	8013      	strh	r3, [r2, #0]
1000eb88:	2900      	cmp	r1, #0
1000eb8a:	d102      	bne.n	1000eb92 <gapc_bond_req_ind+0x3a>
1000eb8c:	2301      	movs	r3, #1
1000eb8e:	7093      	strb	r3, [r2, #2]
1000eb90:	e004      	b.n	1000eb9c <gapc_bond_req_ind+0x44>
1000eb92:	2300      	movs	r3, #0
1000eb94:	7093      	strb	r3, [r2, #2]
1000eb96:	2902      	cmp	r1, #2
1000eb98:	d102      	bne.n	1000eba0 <gapc_bond_req_ind+0x48>
1000eb9a:	70d3      	strb	r3, [r2, #3]
1000eb9c:	200c      	movs	r0, #12
1000eb9e:	e03f      	b.n	1000ec20 <gapc_bond_req_ind+0xc8>
1000eba0:	2901      	cmp	r1, #1
1000eba2:	d1fb      	bne.n	1000eb9c <gapc_bond_req_ind+0x44>
1000eba4:	70d1      	strb	r1, [r2, #3]
1000eba6:	e7f9      	b.n	1000eb9c <gapc_bond_req_ind+0x44>
1000eba8:	2214      	movs	r2, #20
1000ebaa:	481e      	ldr	r0, [pc, #120]	; (1000ec24 <gapc_bond_req_ind+0xcc>)
1000ebac:	0a1b      	lsrs	r3, r3, #8
1000ebae:	70c3      	strb	r3, [r0, #3]
1000ebb0:	4b1d      	ldr	r3, [pc, #116]	; (1000ec28 <gapc_bond_req_ind+0xd0>)
1000ebb2:	7002      	strb	r2, [r0, #0]
1000ebb4:	3a06      	subs	r2, #6
1000ebb6:	7042      	strb	r2, [r0, #1]
1000ebb8:	7082      	strb	r2, [r0, #2]
1000ebba:	881a      	ldrh	r2, [r3, #0]
1000ebbc:	881b      	ldrh	r3, [r3, #0]
1000ebbe:	4e1b      	ldr	r6, [pc, #108]	; (1000ec2c <gapc_bond_req_ind+0xd4>)
1000ebc0:	0a1b      	lsrs	r3, r3, #8
1000ebc2:	7143      	strb	r3, [r0, #5]
1000ebc4:	2301      	movs	r3, #1
1000ebc6:	7102      	strb	r2, [r0, #4]
1000ebc8:	7204      	strb	r4, [r0, #8]
1000ebca:	7243      	strb	r3, [r0, #9]
1000ebcc:	1c05      	adds	r5, r0, #0
1000ebce:	1c31      	adds	r1, r6, #0
1000ebd0:	300a      	adds	r0, #10
1000ebd2:	2c07      	cmp	r4, #7
1000ebd4:	d116      	bne.n	1000ec04 <gapc_bond_req_ind+0xac>
1000ebd6:	317e      	adds	r1, #126	; 0x7e
1000ebd8:	2210      	movs	r2, #16
1000ebda:	4c15      	ldr	r4, [pc, #84]	; (1000ec30 <gapc_bond_req_ind+0xd8>)
1000ebdc:	47a0      	blx	r4
1000ebde:	1c33      	adds	r3, r6, #0
1000ebe0:	1c31      	adds	r1, r6, #0
1000ebe2:	1c28      	adds	r0, r5, #0
1000ebe4:	338e      	adds	r3, #142	; 0x8e
1000ebe6:	881b      	ldrh	r3, [r3, #0]
1000ebe8:	3190      	adds	r1, #144	; 0x90
1000ebea:	76ab      	strb	r3, [r5, #26]
1000ebec:	2208      	movs	r2, #8
1000ebee:	0a1b      	lsrs	r3, r3, #8
1000ebf0:	301c      	adds	r0, #28
1000ebf2:	76eb      	strb	r3, [r5, #27]
1000ebf4:	47a0      	blx	r4
1000ebf6:	1c31      	adds	r1, r6, #0
1000ebf8:	3198      	adds	r1, #152	; 0x98
1000ebfa:	780a      	ldrb	r2, [r1, #0]
1000ebfc:	1d6b      	adds	r3, r5, #5
1000ebfe:	77da      	strb	r2, [r3, #31]
1000ec00:	2125      	movs	r1, #37	; 0x25
1000ec02:	e004      	b.n	1000ec0e <gapc_bond_req_ind+0xb6>
1000ec04:	319a      	adds	r1, #154	; 0x9a
1000ec06:	2210      	movs	r2, #16
1000ec08:	4b09      	ldr	r3, [pc, #36]	; (1000ec30 <gapc_bond_req_ind+0xd8>)
1000ec0a:	4798      	blx	r3
1000ec0c:	211a      	movs	r1, #26
1000ec0e:	1c0b      	adds	r3, r1, #0
1000ec10:	2400      	movs	r4, #0
1000ec12:	3b08      	subs	r3, #8
1000ec14:	71ab      	strb	r3, [r5, #6]
1000ec16:	1c28      	adds	r0, r5, #0
1000ec18:	4b06      	ldr	r3, [pc, #24]	; (1000ec34 <gapc_bond_req_ind+0xdc>)
1000ec1a:	71ec      	strb	r4, [r5, #7]
1000ec1c:	4798      	blx	r3
1000ec1e:	2000      	movs	r0, #0
1000ec20:	bd70      	pop	{r4, r5, r6, pc}
1000ec22:	46c0      	nop			; (mov r8, r8)
1000ec24:	10016444 	.word	0x10016444
1000ec28:	100160d4 	.word	0x100160d4
1000ec2c:	10016166 	.word	0x10016166
1000ec30:	10010fa7 	.word	0x10010fa7
1000ec34:	1000e4f9 	.word	0x1000e4f9

1000ec38 <gapc_bond_cfm_handler_pair_resp>:
1000ec38:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ec3a:	b085      	sub	sp, #20
1000ec3c:	1c07      	adds	r7, r0, #0
1000ec3e:	a80a      	add	r0, sp, #40	; 0x28
1000ec40:	7806      	ldrb	r6, [r0, #0]
1000ec42:	a80b      	add	r0, sp, #44	; 0x2c
1000ec44:	7805      	ldrb	r5, [r0, #0]
1000ec46:	a80c      	add	r0, sp, #48	; 0x30
1000ec48:	7800      	ldrb	r0, [r0, #0]
1000ec4a:	2414      	movs	r4, #20
1000ec4c:	9002      	str	r0, [sp, #8]
1000ec4e:	a80d      	add	r0, sp, #52	; 0x34
1000ec50:	7800      	ldrb	r0, [r0, #0]
1000ec52:	9301      	str	r3, [sp, #4]
1000ec54:	9003      	str	r0, [sp, #12]
1000ec56:	a80e      	add	r0, sp, #56	; 0x38
1000ec58:	8800      	ldrh	r0, [r0, #0]
1000ec5a:	4684      	mov	ip, r0
1000ec5c:	4812      	ldr	r0, [pc, #72]	; (1000eca8 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000ec5e:	7004      	strb	r4, [r0, #0]
1000ec60:	3c06      	subs	r4, #6
1000ec62:	7044      	strb	r4, [r0, #1]
1000ec64:	7084      	strb	r4, [r0, #2]
1000ec66:	4664      	mov	r4, ip
1000ec68:	70c4      	strb	r4, [r0, #3]
1000ec6a:	4c10      	ldr	r4, [pc, #64]	; (1000ecac <gapc_bond_cfm_handler_pair_resp+0x74>)
1000ec6c:	7247      	strb	r7, [r0, #9]
1000ec6e:	8823      	ldrh	r3, [r4, #0]
1000ec70:	8824      	ldrh	r4, [r4, #0]
1000ec72:	7103      	strb	r3, [r0, #4]
1000ec74:	466b      	mov	r3, sp
1000ec76:	791b      	ldrb	r3, [r3, #4]
1000ec78:	0a24      	lsrs	r4, r4, #8
1000ec7a:	7303      	strb	r3, [r0, #12]
1000ec7c:	466b      	mov	r3, sp
1000ec7e:	7a1b      	ldrb	r3, [r3, #8]
1000ec80:	7144      	strb	r4, [r0, #5]
1000ec82:	73c3      	strb	r3, [r0, #15]
1000ec84:	466b      	mov	r3, sp
1000ec86:	7b1b      	ldrb	r3, [r3, #12]
1000ec88:	2401      	movs	r4, #1
1000ec8a:	7403      	strb	r3, [r0, #16]
1000ec8c:	2309      	movs	r3, #9
1000ec8e:	7183      	strb	r3, [r0, #6]
1000ec90:	2300      	movs	r3, #0
1000ec92:	7204      	strb	r4, [r0, #8]
1000ec94:	7281      	strb	r1, [r0, #10]
1000ec96:	72c2      	strb	r2, [r0, #11]
1000ec98:	7346      	strb	r6, [r0, #13]
1000ec9a:	7385      	strb	r5, [r0, #14]
1000ec9c:	71c3      	strb	r3, [r0, #7]
1000ec9e:	2111      	movs	r1, #17
1000eca0:	4b03      	ldr	r3, [pc, #12]	; (1000ecb0 <gapc_bond_cfm_handler_pair_resp+0x78>)
1000eca2:	4798      	blx	r3
1000eca4:	b005      	add	sp, #20
1000eca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eca8:	10016444 	.word	0x10016444
1000ecac:	100160d4 	.word	0x100160d4
1000ecb0:	1000e4f9 	.word	0x1000e4f9

1000ecb4 <gapc_bond_cfm_handler_key_exch>:
1000ecb4:	b538      	push	{r3, r4, r5, lr}
1000ecb6:	2514      	movs	r5, #20
1000ecb8:	4c0d      	ldr	r4, [pc, #52]	; (1000ecf0 <gapc_bond_cfm_handler_key_exch+0x3c>)
1000ecba:	70e3      	strb	r3, [r4, #3]
1000ecbc:	4b0d      	ldr	r3, [pc, #52]	; (1000ecf4 <gapc_bond_cfm_handler_key_exch+0x40>)
1000ecbe:	7025      	strb	r5, [r4, #0]
1000ecc0:	3d06      	subs	r5, #6
1000ecc2:	7065      	strb	r5, [r4, #1]
1000ecc4:	70a5      	strb	r5, [r4, #2]
1000ecc6:	881d      	ldrh	r5, [r3, #0]
1000ecc8:	881b      	ldrh	r3, [r3, #0]
1000ecca:	7220      	strb	r0, [r4, #8]
1000eccc:	0a1b      	lsrs	r3, r3, #8
1000ecce:	7163      	strb	r3, [r4, #5]
1000ecd0:	7261      	strb	r1, [r4, #9]
1000ecd2:	4b09      	ldr	r3, [pc, #36]	; (1000ecf8 <gapc_bond_cfm_handler_key_exch+0x44>)
1000ecd4:	1c11      	adds	r1, r2, #0
1000ecd6:	4809      	ldr	r0, [pc, #36]	; (1000ecfc <gapc_bond_cfm_handler_key_exch+0x48>)
1000ecd8:	2210      	movs	r2, #16
1000ecda:	7125      	strb	r5, [r4, #4]
1000ecdc:	4798      	blx	r3
1000ecde:	2312      	movs	r3, #18
1000ece0:	71a3      	strb	r3, [r4, #6]
1000ece2:	2300      	movs	r3, #0
1000ece4:	1c20      	adds	r0, r4, #0
1000ece6:	71e3      	strb	r3, [r4, #7]
1000ece8:	211a      	movs	r1, #26
1000ecea:	4b05      	ldr	r3, [pc, #20]	; (1000ed00 <gapc_bond_cfm_handler_key_exch+0x4c>)
1000ecec:	4798      	blx	r3
1000ecee:	bd38      	pop	{r3, r4, r5, pc}
1000ecf0:	10016444 	.word	0x10016444
1000ecf4:	100160d4 	.word	0x100160d4
1000ecf8:	10010fa7 	.word	0x10010fa7
1000ecfc:	1001644e 	.word	0x1001644e
1000ed00:	1000e4f9 	.word	0x1000e4f9

1000ed04 <gapc_security_cmd_handler>:
1000ed04:	221a      	movs	r2, #26
1000ed06:	b508      	push	{r3, lr}
1000ed08:	4b0b      	ldr	r3, [pc, #44]	; (1000ed38 <gapc_security_cmd_handler+0x34>)
1000ed0a:	701a      	strb	r2, [r3, #0]
1000ed0c:	3a0c      	subs	r2, #12
1000ed0e:	705a      	strb	r2, [r3, #1]
1000ed10:	709a      	strb	r2, [r3, #2]
1000ed12:	4a0a      	ldr	r2, [pc, #40]	; (1000ed3c <gapc_security_cmd_handler+0x38>)
1000ed14:	70d8      	strb	r0, [r3, #3]
1000ed16:	8810      	ldrh	r0, [r2, #0]
1000ed18:	8812      	ldrh	r2, [r2, #0]
1000ed1a:	7118      	strb	r0, [r3, #4]
1000ed1c:	0a12      	lsrs	r2, r2, #8
1000ed1e:	715a      	strb	r2, [r3, #5]
1000ed20:	220c      	movs	r2, #12
1000ed22:	721a      	strb	r2, [r3, #8]
1000ed24:	3a0a      	subs	r2, #10
1000ed26:	719a      	strb	r2, [r3, #6]
1000ed28:	2200      	movs	r2, #0
1000ed2a:	7259      	strb	r1, [r3, #9]
1000ed2c:	71da      	strb	r2, [r3, #7]
1000ed2e:	1c18      	adds	r0, r3, #0
1000ed30:	210a      	movs	r1, #10
1000ed32:	4b03      	ldr	r3, [pc, #12]	; (1000ed40 <gapc_security_cmd_handler+0x3c>)
1000ed34:	4798      	blx	r3
1000ed36:	bd08      	pop	{r3, pc}
1000ed38:	10016444 	.word	0x10016444
1000ed3c:	100160d4 	.word	0x100160d4
1000ed40:	1000e4f9 	.word	0x1000e4f9

1000ed44 <gapc_encrypt_cmd_handler>:
1000ed44:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ed46:	2500      	movs	r5, #0
1000ed48:	b089      	sub	sp, #36	; 0x24
1000ed4a:	9306      	str	r3, [sp, #24]
1000ed4c:	ab0e      	add	r3, sp, #56	; 0x38
1000ed4e:	781b      	ldrb	r3, [r3, #0]
1000ed50:	1c17      	adds	r7, r2, #0
1000ed52:	9307      	str	r3, [sp, #28]
1000ed54:	ab0f      	add	r3, sp, #60	; 0x3c
1000ed56:	781b      	ldrb	r3, [r3, #0]
1000ed58:	4a19      	ldr	r2, [pc, #100]	; (1000edc0 <gapc_encrypt_cmd_handler+0x7c>)
1000ed5a:	1c06      	adds	r6, r0, #0
1000ed5c:	9105      	str	r1, [sp, #20]
1000ed5e:	9300      	str	r3, [sp, #0]
1000ed60:	9002      	str	r0, [sp, #8]
1000ed62:	1c29      	adds	r1, r5, #0
1000ed64:	1c2b      	adds	r3, r5, #0
1000ed66:	9501      	str	r5, [sp, #4]
1000ed68:	1c10      	adds	r0, r2, #0
1000ed6a:	4c16      	ldr	r4, [pc, #88]	; (1000edc4 <gapc_encrypt_cmd_handler+0x80>)
1000ed6c:	47a0      	blx	r4
1000ed6e:	2316      	movs	r3, #22
1000ed70:	4c15      	ldr	r4, [pc, #84]	; (1000edc8 <gapc_encrypt_cmd_handler+0x84>)
1000ed72:	9905      	ldr	r1, [sp, #20]
1000ed74:	7023      	strb	r3, [r4, #0]
1000ed76:	3b08      	subs	r3, #8
1000ed78:	7063      	strb	r3, [r4, #1]
1000ed7a:	70a3      	strb	r3, [r4, #2]
1000ed7c:	4b13      	ldr	r3, [pc, #76]	; (1000edcc <gapc_encrypt_cmd_handler+0x88>)
1000ed7e:	70e6      	strb	r6, [r4, #3]
1000ed80:	881a      	ldrh	r2, [r3, #0]
1000ed82:	881b      	ldrh	r3, [r3, #0]
1000ed84:	7122      	strb	r2, [r4, #4]
1000ed86:	0a1b      	lsrs	r3, r3, #8
1000ed88:	7163      	strb	r3, [r4, #5]
1000ed8a:	230b      	movs	r3, #11
1000ed8c:	4e10      	ldr	r6, [pc, #64]	; (1000edd0 <gapc_encrypt_cmd_handler+0x8c>)
1000ed8e:	2210      	movs	r2, #16
1000ed90:	4810      	ldr	r0, [pc, #64]	; (1000edd4 <gapc_encrypt_cmd_handler+0x90>)
1000ed92:	7223      	strb	r3, [r4, #8]
1000ed94:	7265      	strb	r5, [r4, #9]
1000ed96:	47b0      	blx	r6
1000ed98:	0a3b      	lsrs	r3, r7, #8
1000ed9a:	9906      	ldr	r1, [sp, #24]
1000ed9c:	2208      	movs	r2, #8
1000ed9e:	480e      	ldr	r0, [pc, #56]	; (1000edd8 <gapc_encrypt_cmd_handler+0x94>)
1000eda0:	76e3      	strb	r3, [r4, #27]
1000eda2:	76a7      	strb	r7, [r4, #26]
1000eda4:	47b0      	blx	r6
1000eda6:	466a      	mov	r2, sp
1000eda8:	7f12      	ldrb	r2, [r2, #28]
1000edaa:	1d63      	adds	r3, r4, #5
1000edac:	77da      	strb	r2, [r3, #31]
1000edae:	231d      	movs	r3, #29
1000edb0:	1c20      	adds	r0, r4, #0
1000edb2:	71a3      	strb	r3, [r4, #6]
1000edb4:	2125      	movs	r1, #37	; 0x25
1000edb6:	4b09      	ldr	r3, [pc, #36]	; (1000eddc <gapc_encrypt_cmd_handler+0x98>)
1000edb8:	71e5      	strb	r5, [r4, #7]
1000edba:	4798      	blx	r3
1000edbc:	b009      	add	sp, #36	; 0x24
1000edbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000edc0:	10015350 	.word	0x10015350
1000edc4:	1000e7fd 	.word	0x1000e7fd
1000edc8:	10016444 	.word	0x10016444
1000edcc:	100160d4 	.word	0x100160d4
1000edd0:	10010fa7 	.word	0x10010fa7
1000edd4:	1001644e 	.word	0x1001644e
1000edd8:	10016460 	.word	0x10016460
1000eddc:	1000e4f9 	.word	0x1000e4f9

1000ede0 <gapc_encrypt_req_ind>:
1000ede0:	b508      	push	{r3, lr}
1000ede2:	0a00      	lsrs	r0, r0, #8
1000ede4:	8010      	strh	r0, [r2, #0]
1000ede6:	784b      	ldrb	r3, [r1, #1]
1000ede8:	7808      	ldrb	r0, [r1, #0]
1000edea:	021b      	lsls	r3, r3, #8
1000edec:	4303      	orrs	r3, r0
1000edee:	8053      	strh	r3, [r2, #2]
1000edf0:	1d10      	adds	r0, r2, #4
1000edf2:	3102      	adds	r1, #2
1000edf4:	2208      	movs	r2, #8
1000edf6:	4b01      	ldr	r3, [pc, #4]	; (1000edfc <gapc_encrypt_req_ind+0x1c>)
1000edf8:	4798      	blx	r3
1000edfa:	bd08      	pop	{r3, pc}
1000edfc:	10010fa7 	.word	0x10010fa7

1000ee00 <gapc_encrypt_cfm_handler>:
1000ee00:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ee02:	2500      	movs	r5, #0
1000ee04:	b087      	sub	sp, #28
1000ee06:	9304      	str	r3, [sp, #16]
1000ee08:	ab0c      	add	r3, sp, #48	; 0x30
1000ee0a:	781b      	ldrb	r3, [r3, #0]
1000ee0c:	1c17      	adds	r7, r2, #0
1000ee0e:	4a15      	ldr	r2, [pc, #84]	; (1000ee64 <gapc_encrypt_cfm_handler+0x64>)
1000ee10:	1c06      	adds	r6, r0, #0
1000ee12:	9305      	str	r3, [sp, #20]
1000ee14:	9100      	str	r1, [sp, #0]
1000ee16:	9002      	str	r0, [sp, #8]
1000ee18:	1c29      	adds	r1, r5, #0
1000ee1a:	1c2b      	adds	r3, r5, #0
1000ee1c:	9501      	str	r5, [sp, #4]
1000ee1e:	1c10      	adds	r0, r2, #0
1000ee20:	4c11      	ldr	r4, [pc, #68]	; (1000ee68 <gapc_encrypt_cfm_handler+0x68>)
1000ee22:	47a0      	blx	r4
1000ee24:	2318      	movs	r3, #24
1000ee26:	4c11      	ldr	r4, [pc, #68]	; (1000ee6c <gapc_encrypt_cfm_handler+0x6c>)
1000ee28:	9904      	ldr	r1, [sp, #16]
1000ee2a:	7023      	strb	r3, [r4, #0]
1000ee2c:	3b0a      	subs	r3, #10
1000ee2e:	7063      	strb	r3, [r4, #1]
1000ee30:	70a3      	strb	r3, [r4, #2]
1000ee32:	4b0f      	ldr	r3, [pc, #60]	; (1000ee70 <gapc_encrypt_cfm_handler+0x70>)
1000ee34:	480f      	ldr	r0, [pc, #60]	; (1000ee74 <gapc_encrypt_cfm_handler+0x74>)
1000ee36:	881a      	ldrh	r2, [r3, #0]
1000ee38:	881b      	ldrh	r3, [r3, #0]
1000ee3a:	7122      	strb	r2, [r4, #4]
1000ee3c:	0a1b      	lsrs	r3, r3, #8
1000ee3e:	7163      	strb	r3, [r4, #5]
1000ee40:	2210      	movs	r2, #16
1000ee42:	4b0d      	ldr	r3, [pc, #52]	; (1000ee78 <gapc_encrypt_cfm_handler+0x78>)
1000ee44:	70e6      	strb	r6, [r4, #3]
1000ee46:	7227      	strb	r7, [r4, #8]
1000ee48:	4798      	blx	r3
1000ee4a:	466b      	mov	r3, sp
1000ee4c:	7d1b      	ldrb	r3, [r3, #20]
1000ee4e:	1c20      	adds	r0, r4, #0
1000ee50:	7663      	strb	r3, [r4, #25]
1000ee52:	2312      	movs	r3, #18
1000ee54:	211a      	movs	r1, #26
1000ee56:	71a3      	strb	r3, [r4, #6]
1000ee58:	4b08      	ldr	r3, [pc, #32]	; (1000ee7c <gapc_encrypt_cfm_handler+0x7c>)
1000ee5a:	71e5      	strb	r5, [r4, #7]
1000ee5c:	4798      	blx	r3
1000ee5e:	b007      	add	sp, #28
1000ee60:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ee62:	46c0      	nop			; (mov r8, r8)
1000ee64:	10015360 	.word	0x10015360
1000ee68:	1000e7fd 	.word	0x1000e7fd
1000ee6c:	10016444 	.word	0x10016444
1000ee70:	100160d4 	.word	0x100160d4
1000ee74:	1001644d 	.word	0x1001644d
1000ee78:	10010fa7 	.word	0x10010fa7
1000ee7c:	1000e4f9 	.word	0x1000e4f9

1000ee80 <gapc_encrypt_ind>:
1000ee80:	780b      	ldrb	r3, [r1, #0]
1000ee82:	0a00      	lsrs	r0, r0, #8
1000ee84:	70d3      	strb	r3, [r2, #3]
1000ee86:	2300      	movs	r3, #0
1000ee88:	8010      	strh	r0, [r2, #0]
1000ee8a:	7093      	strb	r3, [r2, #2]
1000ee8c:	4770      	bx	lr
	...

1000ee90 <gapc_param_update_cfm_handler>:
1000ee90:	b538      	push	{r3, r4, r5, lr}
1000ee92:	2410      	movs	r4, #16
1000ee94:	1c05      	adds	r5, r0, #0
1000ee96:	480e      	ldr	r0, [pc, #56]	; (1000eed0 <gapc_param_update_cfm_handler+0x40>)
1000ee98:	7004      	strb	r4, [r0, #0]
1000ee9a:	3c02      	subs	r4, #2
1000ee9c:	7044      	strb	r4, [r0, #1]
1000ee9e:	7084      	strb	r4, [r0, #2]
1000eea0:	4c0c      	ldr	r4, [pc, #48]	; (1000eed4 <gapc_param_update_cfm_handler+0x44>)
1000eea2:	70c5      	strb	r5, [r0, #3]
1000eea4:	8825      	ldrh	r5, [r4, #0]
1000eea6:	8824      	ldrh	r4, [r4, #0]
1000eea8:	72c3      	strb	r3, [r0, #11]
1000eeaa:	0a1b      	lsrs	r3, r3, #8
1000eeac:	0a24      	lsrs	r4, r4, #8
1000eeae:	7303      	strb	r3, [r0, #12]
1000eeb0:	2305      	movs	r3, #5
1000eeb2:	7144      	strb	r4, [r0, #5]
1000eeb4:	2400      	movs	r4, #0
1000eeb6:	7201      	strb	r1, [r0, #8]
1000eeb8:	7242      	strb	r2, [r0, #9]
1000eeba:	7183      	strb	r3, [r0, #6]
1000eebc:	0a12      	lsrs	r2, r2, #8
1000eebe:	210d      	movs	r1, #13
1000eec0:	4b05      	ldr	r3, [pc, #20]	; (1000eed8 <gapc_param_update_cfm_handler+0x48>)
1000eec2:	7105      	strb	r5, [r0, #4]
1000eec4:	7282      	strb	r2, [r0, #10]
1000eec6:	71c4      	strb	r4, [r0, #7]
1000eec8:	4798      	blx	r3
1000eeca:	1c20      	adds	r0, r4, #0
1000eecc:	bd38      	pop	{r3, r4, r5, pc}
1000eece:	46c0      	nop			; (mov r8, r8)
1000eed0:	10016444 	.word	0x10016444
1000eed4:	100160d4 	.word	0x100160d4
1000eed8:	1000e4f9 	.word	0x1000e4f9

1000eedc <gapc_param_updated_ind>:
1000eedc:	2300      	movs	r3, #0
1000eede:	0a00      	lsrs	r0, r0, #8
1000eee0:	8010      	strh	r0, [r2, #0]
1000eee2:	7093      	strb	r3, [r2, #2]
1000eee4:	784b      	ldrb	r3, [r1, #1]
1000eee6:	7808      	ldrb	r0, [r1, #0]
1000eee8:	021b      	lsls	r3, r3, #8
1000eeea:	4303      	orrs	r3, r0
1000eeec:	8093      	strh	r3, [r2, #4]
1000eeee:	78cb      	ldrb	r3, [r1, #3]
1000eef0:	7888      	ldrb	r0, [r1, #2]
1000eef2:	021b      	lsls	r3, r3, #8
1000eef4:	4303      	orrs	r3, r0
1000eef6:	80d3      	strh	r3, [r2, #6]
1000eef8:	794b      	ldrb	r3, [r1, #5]
1000eefa:	7909      	ldrb	r1, [r1, #4]
1000eefc:	021b      	lsls	r3, r3, #8
1000eefe:	430b      	orrs	r3, r1
1000ef00:	2007      	movs	r0, #7
1000ef02:	8113      	strh	r3, [r2, #8]
1000ef04:	4770      	bx	lr

1000ef06 <gapc_param_updated_req_ind>:
1000ef06:	0a00      	lsrs	r0, r0, #8
1000ef08:	8010      	strh	r0, [r2, #0]
1000ef0a:	784b      	ldrb	r3, [r1, #1]
1000ef0c:	7808      	ldrb	r0, [r1, #0]
1000ef0e:	021b      	lsls	r3, r3, #8
1000ef10:	4303      	orrs	r3, r0
1000ef12:	8053      	strh	r3, [r2, #2]
1000ef14:	78cb      	ldrb	r3, [r1, #3]
1000ef16:	7888      	ldrb	r0, [r1, #2]
1000ef18:	021b      	lsls	r3, r3, #8
1000ef1a:	4303      	orrs	r3, r0
1000ef1c:	8093      	strh	r3, [r2, #4]
1000ef1e:	794b      	ldrb	r3, [r1, #5]
1000ef20:	7908      	ldrb	r0, [r1, #4]
1000ef22:	021b      	lsls	r3, r3, #8
1000ef24:	4303      	orrs	r3, r0
1000ef26:	80d3      	strh	r3, [r2, #6]
1000ef28:	79cb      	ldrb	r3, [r1, #7]
1000ef2a:	7989      	ldrb	r1, [r1, #6]
1000ef2c:	021b      	lsls	r3, r3, #8
1000ef2e:	430b      	orrs	r3, r1
1000ef30:	2008      	movs	r0, #8
1000ef32:	8113      	strh	r3, [r2, #8]
1000ef34:	4770      	bx	lr
	...

1000ef38 <gapc_dev_info_req_ind_handler>:
1000ef38:	b508      	push	{r3, lr}
1000ef3a:	1c0b      	adds	r3, r1, #0
1000ef3c:	0a01      	lsrs	r1, r0, #8
1000ef3e:	8011      	strh	r1, [r2, #0]
1000ef40:	7818      	ldrb	r0, [r3, #0]
1000ef42:	7090      	strb	r0, [r2, #2]
1000ef44:	2800      	cmp	r0, #0
1000ef46:	d104      	bne.n	1000ef52 <gapc_dev_info_req_ind_handler+0x1a>
1000ef48:	4b03      	ldr	r3, [pc, #12]	; (1000ef58 <gapc_dev_info_req_ind_handler+0x20>)
1000ef4a:	33aa      	adds	r3, #170	; 0xaa
1000ef4c:	881b      	ldrh	r3, [r3, #0]
1000ef4e:	2b00      	cmp	r3, #0
1000ef50:	d001      	beq.n	1000ef56 <gapc_dev_info_req_ind_handler+0x1e>
1000ef52:	4b02      	ldr	r3, [pc, #8]	; (1000ef5c <gapc_dev_info_req_ind_handler+0x24>)
1000ef54:	4798      	blx	r3
1000ef56:	bd08      	pop	{r3, pc}
1000ef58:	10016166 	.word	0x10016166
1000ef5c:	1000e609 	.word	0x1000e609

1000ef60 <gapc_sec_req_ind>:
1000ef60:	0a00      	lsrs	r0, r0, #8
1000ef62:	8010      	strh	r0, [r2, #0]
1000ef64:	7809      	ldrb	r1, [r1, #0]
1000ef66:	2301      	movs	r3, #1
1000ef68:	1c08      	adds	r0, r1, #0
1000ef6a:	0889      	lsrs	r1, r1, #2
1000ef6c:	4018      	ands	r0, r3
1000ef6e:	400b      	ands	r3, r1
1000ef70:	70d0      	strb	r0, [r2, #3]
1000ef72:	7113      	strb	r3, [r2, #4]
1000ef74:	4770      	bx	lr

1000ef76 <gapc_sign_counter_ind_handler>:
1000ef76:	0a00      	lsrs	r0, r0, #8
1000ef78:	8010      	strh	r0, [r2, #0]
1000ef7a:	784b      	ldrb	r3, [r1, #1]
1000ef7c:	0218      	lsls	r0, r3, #8
1000ef7e:	788b      	ldrb	r3, [r1, #2]
1000ef80:	041b      	lsls	r3, r3, #16
1000ef82:	4303      	orrs	r3, r0
1000ef84:	7808      	ldrb	r0, [r1, #0]
1000ef86:	4303      	orrs	r3, r0
1000ef88:	78c8      	ldrb	r0, [r1, #3]
1000ef8a:	0600      	lsls	r0, r0, #24
1000ef8c:	4303      	orrs	r3, r0
1000ef8e:	6053      	str	r3, [r2, #4]
1000ef90:	794b      	ldrb	r3, [r1, #5]
1000ef92:	0218      	lsls	r0, r3, #8
1000ef94:	798b      	ldrb	r3, [r1, #6]
1000ef96:	041b      	lsls	r3, r3, #16
1000ef98:	4303      	orrs	r3, r0
1000ef9a:	7908      	ldrb	r0, [r1, #4]
1000ef9c:	79c9      	ldrb	r1, [r1, #7]
1000ef9e:	4303      	orrs	r3, r0
1000efa0:	0609      	lsls	r1, r1, #24
1000efa2:	430b      	orrs	r3, r1
1000efa4:	2000      	movs	r0, #0
1000efa6:	6093      	str	r3, [r2, #8]
1000efa8:	4770      	bx	lr
	...

1000efac <gapc_peer_att_info_ind_handler>:
1000efac:	b510      	push	{r4, lr}
1000efae:	0a00      	lsrs	r0, r0, #8
1000efb0:	8010      	strh	r0, [r2, #0]
1000efb2:	7808      	ldrb	r0, [r1, #0]
1000efb4:	7090      	strb	r0, [r2, #2]
1000efb6:	788b      	ldrb	r3, [r1, #2]
1000efb8:	784c      	ldrb	r4, [r1, #1]
1000efba:	021b      	lsls	r3, r3, #8
1000efbc:	4323      	orrs	r3, r4
1000efbe:	8093      	strh	r3, [r2, #4]
1000efc0:	2801      	cmp	r0, #1
1000efc2:	d027      	beq.n	1000f014 <gapc_peer_att_info_ind_handler+0x68>
1000efc4:	2800      	cmp	r0, #0
1000efc6:	d017      	beq.n	1000eff8 <gapc_peer_att_info_ind_handler+0x4c>
1000efc8:	2802      	cmp	r0, #2
1000efca:	d12a      	bne.n	1000f022 <gapc_peer_att_info_ind_handler+0x76>
1000efcc:	790b      	ldrb	r3, [r1, #4]
1000efce:	78c8      	ldrb	r0, [r1, #3]
1000efd0:	021b      	lsls	r3, r3, #8
1000efd2:	4303      	orrs	r3, r0
1000efd4:	8113      	strh	r3, [r2, #8]
1000efd6:	798b      	ldrb	r3, [r1, #6]
1000efd8:	7948      	ldrb	r0, [r1, #5]
1000efda:	021b      	lsls	r3, r3, #8
1000efdc:	4303      	orrs	r3, r0
1000efde:	80d3      	strh	r3, [r2, #6]
1000efe0:	7a0b      	ldrb	r3, [r1, #8]
1000efe2:	79c8      	ldrb	r0, [r1, #7]
1000efe4:	021b      	lsls	r3, r3, #8
1000efe6:	4303      	orrs	r3, r0
1000efe8:	8193      	strh	r3, [r2, #12]
1000efea:	7a8b      	ldrb	r3, [r1, #10]
1000efec:	7a49      	ldrb	r1, [r1, #9]
1000efee:	021b      	lsls	r3, r3, #8
1000eff0:	430b      	orrs	r3, r1
1000eff2:	8153      	strh	r3, [r2, #10]
1000eff4:	2306      	movs	r3, #6
1000eff6:	e013      	b.n	1000f020 <gapc_peer_att_info_ind_handler+0x74>
1000eff8:	1c14      	adds	r4, r2, #0
1000effa:	1c20      	adds	r0, r4, #0
1000effc:	790a      	ldrb	r2, [r1, #4]
1000effe:	78cb      	ldrb	r3, [r1, #3]
1000f000:	0212      	lsls	r2, r2, #8
1000f002:	431a      	orrs	r2, r3
1000f004:	80e2      	strh	r2, [r4, #6]
1000f006:	4b07      	ldr	r3, [pc, #28]	; (1000f024 <gapc_peer_att_info_ind_handler+0x78>)
1000f008:	3008      	adds	r0, #8
1000f00a:	3105      	adds	r1, #5
1000f00c:	4798      	blx	r3
1000f00e:	2302      	movs	r3, #2
1000f010:	70a3      	strb	r3, [r4, #2]
1000f012:	e006      	b.n	1000f022 <gapc_peer_att_info_ind_handler+0x76>
1000f014:	790b      	ldrb	r3, [r1, #4]
1000f016:	78c9      	ldrb	r1, [r1, #3]
1000f018:	021b      	lsls	r3, r3, #8
1000f01a:	430b      	orrs	r3, r1
1000f01c:	80d3      	strh	r3, [r2, #6]
1000f01e:	2305      	movs	r3, #5
1000f020:	7093      	strb	r3, [r2, #2]
1000f022:	bd10      	pop	{r4, pc}
1000f024:	10010fa7 	.word	0x10010fa7

1000f028 <gapc_con_channel_map_ind_handler>:
1000f028:	b508      	push	{r3, lr}
1000f02a:	2300      	movs	r3, #0
1000f02c:	0a00      	lsrs	r0, r0, #8
1000f02e:	7013      	strb	r3, [r2, #0]
1000f030:	8050      	strh	r0, [r2, #2]
1000f032:	4b02      	ldr	r3, [pc, #8]	; (1000f03c <gapc_con_channel_map_ind_handler+0x14>)
1000f034:	1d10      	adds	r0, r2, #4
1000f036:	2205      	movs	r2, #5
1000f038:	4798      	blx	r3
1000f03a:	bd08      	pop	{r3, pc}
1000f03c:	10010fa7 	.word	0x10010fa7

1000f040 <gapc_lecb_connected>:
1000f040:	7843      	ldrb	r3, [r0, #1]
1000f042:	7802      	ldrb	r2, [r0, #0]
1000f044:	021b      	lsls	r3, r3, #8
1000f046:	4313      	orrs	r3, r2
1000f048:	800b      	strh	r3, [r1, #0]
1000f04a:	78c3      	ldrb	r3, [r0, #3]
1000f04c:	7882      	ldrb	r2, [r0, #2]
1000f04e:	021b      	lsls	r3, r3, #8
1000f050:	4313      	orrs	r3, r2
1000f052:	804b      	strh	r3, [r1, #2]
1000f054:	7943      	ldrb	r3, [r0, #5]
1000f056:	7902      	ldrb	r2, [r0, #4]
1000f058:	021b      	lsls	r3, r3, #8
1000f05a:	4313      	orrs	r3, r2
1000f05c:	808b      	strh	r3, [r1, #4]
1000f05e:	79c3      	ldrb	r3, [r0, #7]
1000f060:	7982      	ldrb	r2, [r0, #6]
1000f062:	021b      	lsls	r3, r3, #8
1000f064:	4313      	orrs	r3, r2
1000f066:	80cb      	strh	r3, [r1, #6]
1000f068:	2300      	movs	r3, #0
1000f06a:	720b      	strb	r3, [r1, #8]
1000f06c:	4770      	bx	lr

1000f06e <gapc_lecb_disconnected>:
1000f06e:	7843      	ldrb	r3, [r0, #1]
1000f070:	7802      	ldrb	r2, [r0, #0]
1000f072:	021b      	lsls	r3, r3, #8
1000f074:	4313      	orrs	r3, r2
1000f076:	800b      	strh	r3, [r1, #0]
1000f078:	78c3      	ldrb	r3, [r0, #3]
1000f07a:	7882      	ldrb	r2, [r0, #2]
1000f07c:	021b      	lsls	r3, r3, #8
1000f07e:	4313      	orrs	r3, r2
1000f080:	804b      	strh	r3, [r1, #2]
1000f082:	4770      	bx	lr

1000f084 <gapc_lecb_connect_req_ind>:
1000f084:	7843      	ldrb	r3, [r0, #1]
1000f086:	7802      	ldrb	r2, [r0, #0]
1000f088:	021b      	lsls	r3, r3, #8
1000f08a:	4313      	orrs	r3, r2
1000f08c:	800b      	strh	r3, [r1, #0]
1000f08e:	78c3      	ldrb	r3, [r0, #3]
1000f090:	7882      	ldrb	r2, [r0, #2]
1000f092:	021b      	lsls	r3, r3, #8
1000f094:	4313      	orrs	r3, r2
1000f096:	804b      	strh	r3, [r1, #2]
1000f098:	7943      	ldrb	r3, [r0, #5]
1000f09a:	7902      	ldrb	r2, [r0, #4]
1000f09c:	021b      	lsls	r3, r3, #8
1000f09e:	4313      	orrs	r3, r2
1000f0a0:	808b      	strh	r3, [r1, #4]
1000f0a2:	79c3      	ldrb	r3, [r0, #7]
1000f0a4:	7982      	ldrb	r2, [r0, #6]
1000f0a6:	021b      	lsls	r3, r3, #8
1000f0a8:	4313      	orrs	r3, r2
1000f0aa:	80cb      	strh	r3, [r1, #6]
1000f0ac:	4770      	bx	lr

1000f0ae <gapc_lecb_add_credit_resp_handler>:
1000f0ae:	7843      	ldrb	r3, [r0, #1]
1000f0b0:	7802      	ldrb	r2, [r0, #0]
1000f0b2:	021b      	lsls	r3, r3, #8
1000f0b4:	4313      	orrs	r3, r2
1000f0b6:	800b      	strh	r3, [r1, #0]
1000f0b8:	78c3      	ldrb	r3, [r0, #3]
1000f0ba:	7882      	ldrb	r2, [r0, #2]
1000f0bc:	021b      	lsls	r3, r3, #8
1000f0be:	4313      	orrs	r3, r2
1000f0c0:	804b      	strh	r3, [r1, #2]
1000f0c2:	7943      	ldrb	r3, [r0, #5]
1000f0c4:	7902      	ldrb	r2, [r0, #4]
1000f0c6:	021b      	lsls	r3, r3, #8
1000f0c8:	4313      	orrs	r3, r2
1000f0ca:	808b      	strh	r3, [r1, #4]
1000f0cc:	4770      	bx	lr
	...

1000f0d0 <gapm_reset_req_handler>:
1000f0d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000f0d2:	466b      	mov	r3, sp
1000f0d4:	4915      	ldr	r1, [pc, #84]	; (1000f12c <gapm_reset_req_handler+0x5c>)
1000f0d6:	4816      	ldr	r0, [pc, #88]	; (1000f130 <gapm_reset_req_handler+0x60>)
1000f0d8:	880c      	ldrh	r4, [r1, #0]
1000f0da:	8809      	ldrh	r1, [r1, #0]
1000f0dc:	1ddd      	adds	r5, r3, #7
1000f0de:	0a09      	lsrs	r1, r1, #8
1000f0e0:	2300      	movs	r3, #0
1000f0e2:	2202      	movs	r2, #2
1000f0e4:	7141      	strb	r1, [r0, #5]
1000f0e6:	26d0      	movs	r6, #208	; 0xd0
1000f0e8:	2101      	movs	r1, #1
1000f0ea:	7104      	strb	r4, [r0, #4]
1000f0ec:	4c11      	ldr	r4, [pc, #68]	; (1000f134 <gapm_reset_req_handler+0x64>)
1000f0ee:	702b      	strb	r3, [r5, #0]
1000f0f0:	7002      	strb	r2, [r0, #0]
1000f0f2:	70c3      	strb	r3, [r0, #3]
1000f0f4:	320b      	adds	r2, #11
1000f0f6:	7201      	strb	r1, [r0, #8]
1000f0f8:	7181      	strb	r1, [r0, #6]
1000f0fa:	71c3      	strb	r3, [r0, #7]
1000f0fc:	3108      	adds	r1, #8
1000f0fe:	4b0e      	ldr	r3, [pc, #56]	; (1000f138 <gapm_reset_req_handler+0x68>)
1000f100:	0136      	lsls	r6, r6, #4
1000f102:	7042      	strb	r2, [r0, #1]
1000f104:	7082      	strb	r2, [r0, #2]
1000f106:	80a2      	strh	r2, [r4, #4]
1000f108:	8026      	strh	r6, [r4, #0]
1000f10a:	4798      	blx	r3
1000f10c:	1c28      	adds	r0, r5, #0
1000f10e:	4b0b      	ldr	r3, [pc, #44]	; (1000f13c <gapm_reset_req_handler+0x6c>)
1000f110:	4798      	blx	r3
1000f112:	782b      	ldrb	r3, [r5, #0]
1000f114:	20e2      	movs	r0, #226	; 0xe2
1000f116:	2b00      	cmp	r3, #0
1000f118:	d106      	bne.n	1000f128 <gapm_reset_req_handler+0x58>
1000f11a:	68a3      	ldr	r3, [r4, #8]
1000f11c:	20e2      	movs	r0, #226	; 0xe2
1000f11e:	781a      	ldrb	r2, [r3, #0]
1000f120:	785b      	ldrb	r3, [r3, #1]
1000f122:	2a01      	cmp	r2, #1
1000f124:	d100      	bne.n	1000f128 <gapm_reset_req_handler+0x58>
1000f126:	1c18      	adds	r0, r3, #0
1000f128:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000f12a:	46c0      	nop			; (mov r8, r8)
1000f12c:	100160d4 	.word	0x100160d4
1000f130:	10016444 	.word	0x10016444
1000f134:	100160c8 	.word	0x100160c8
1000f138:	1000e4f9 	.word	0x1000e4f9
1000f13c:	1000e55d 	.word	0x1000e55d

1000f140 <gapm_set_dev_config_cmd_handler>:
1000f140:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f142:	b089      	sub	sp, #36	; 0x24
1000f144:	9303      	str	r3, [sp, #12]
1000f146:	ab0e      	add	r3, sp, #56	; 0x38
1000f148:	781b      	ldrb	r3, [r3, #0]
1000f14a:	4c37      	ldr	r4, [pc, #220]	; (1000f228 <gapm_set_dev_config_cmd_handler+0xe8>)
1000f14c:	9304      	str	r3, [sp, #16]
1000f14e:	ab0f      	add	r3, sp, #60	; 0x3c
1000f150:	781b      	ldrb	r3, [r3, #0]
1000f152:	270d      	movs	r7, #13
1000f154:	9305      	str	r3, [sp, #20]
1000f156:	ab10      	add	r3, sp, #64	; 0x40
1000f158:	881b      	ldrh	r3, [r3, #0]
1000f15a:	72a1      	strb	r1, [r4, #10]
1000f15c:	9300      	str	r3, [sp, #0]
1000f15e:	ab11      	add	r3, sp, #68	; 0x44
1000f160:	881b      	ldrh	r3, [r3, #0]
1000f162:	0a09      	lsrs	r1, r1, #8
1000f164:	9301      	str	r3, [sp, #4]
1000f166:	ab12      	add	r3, sp, #72	; 0x48
1000f168:	881b      	ldrh	r3, [r3, #0]
1000f16a:	7260      	strb	r0, [r4, #9]
1000f16c:	9302      	str	r3, [sp, #8]
1000f16e:	ab06      	add	r3, sp, #24
1000f170:	1dde      	adds	r6, r3, #7
1000f172:	2300      	movs	r3, #0
1000f174:	7033      	strb	r3, [r6, #0]
1000f176:	2304      	movs	r3, #4
1000f178:	7023      	strb	r3, [r4, #0]
1000f17a:	2300      	movs	r3, #0
1000f17c:	70e3      	strb	r3, [r4, #3]
1000f17e:	4b2b      	ldr	r3, [pc, #172]	; (1000f22c <gapm_set_dev_config_cmd_handler+0xec>)
1000f180:	72e1      	strb	r1, [r4, #11]
1000f182:	881d      	ldrh	r5, [r3, #0]
1000f184:	881b      	ldrh	r3, [r3, #0]
1000f186:	1c11      	adds	r1, r2, #0
1000f188:	0a1b      	lsrs	r3, r3, #8
1000f18a:	7163      	strb	r3, [r4, #5]
1000f18c:	2303      	movs	r3, #3
1000f18e:	7125      	strb	r5, [r4, #4]
1000f190:	2206      	movs	r2, #6
1000f192:	4d27      	ldr	r5, [pc, #156]	; (1000f230 <gapm_set_dev_config_cmd_handler+0xf0>)
1000f194:	4827      	ldr	r0, [pc, #156]	; (1000f234 <gapm_set_dev_config_cmd_handler+0xf4>)
1000f196:	7223      	strb	r3, [r4, #8]
1000f198:	7067      	strb	r7, [r4, #1]
1000f19a:	70a7      	strb	r7, [r4, #2]
1000f19c:	47a8      	blx	r5
1000f19e:	9903      	ldr	r1, [sp, #12]
1000f1a0:	2210      	movs	r2, #16
1000f1a2:	4825      	ldr	r0, [pc, #148]	; (1000f238 <gapm_set_dev_config_cmd_handler+0xf8>)
1000f1a4:	47a8      	blx	r5
1000f1a6:	466a      	mov	r2, sp
1000f1a8:	7c12      	ldrb	r2, [r2, #16]
1000f1aa:	1ce3      	adds	r3, r4, #3
1000f1ac:	77da      	strb	r2, [r3, #31]
1000f1ae:	466a      	mov	r2, sp
1000f1b0:	7d12      	ldrb	r2, [r2, #20]
1000f1b2:	1d23      	adds	r3, r4, #4
1000f1b4:	77da      	strb	r2, [r3, #31]
1000f1b6:	466a      	mov	r2, sp
1000f1b8:	7812      	ldrb	r2, [r2, #0]
1000f1ba:	1d63      	adds	r3, r4, #5
1000f1bc:	77da      	strb	r2, [r3, #31]
1000f1be:	9b00      	ldr	r3, [sp, #0]
1000f1c0:	1da2      	adds	r2, r4, #6
1000f1c2:	0a1b      	lsrs	r3, r3, #8
1000f1c4:	77d3      	strb	r3, [r2, #31]
1000f1c6:	466a      	mov	r2, sp
1000f1c8:	7912      	ldrb	r2, [r2, #4]
1000f1ca:	1de3      	adds	r3, r4, #7
1000f1cc:	77da      	strb	r2, [r3, #31]
1000f1ce:	1c22      	adds	r2, r4, #0
1000f1d0:	9b01      	ldr	r3, [sp, #4]
1000f1d2:	3208      	adds	r2, #8
1000f1d4:	0a1b      	lsrs	r3, r3, #8
1000f1d6:	77d3      	strb	r3, [r2, #31]
1000f1d8:	466a      	mov	r2, sp
1000f1da:	1c23      	adds	r3, r4, #0
1000f1dc:	7a12      	ldrb	r2, [r2, #8]
1000f1de:	3328      	adds	r3, #40	; 0x28
1000f1e0:	701a      	strb	r2, [r3, #0]
1000f1e2:	1c22      	adds	r2, r4, #0
1000f1e4:	9b02      	ldr	r3, [sp, #8]
1000f1e6:	3229      	adds	r2, #41	; 0x29
1000f1e8:	0a1b      	lsrs	r3, r3, #8
1000f1ea:	7013      	strb	r3, [r2, #0]
1000f1ec:	23d0      	movs	r3, #208	; 0xd0
1000f1ee:	4d13      	ldr	r5, [pc, #76]	; (1000f23c <gapm_set_dev_config_cmd_handler+0xfc>)
1000f1f0:	011b      	lsls	r3, r3, #4
1000f1f2:	802b      	strh	r3, [r5, #0]
1000f1f4:	2322      	movs	r3, #34	; 0x22
1000f1f6:	71a3      	strb	r3, [r4, #6]
1000f1f8:	2300      	movs	r3, #0
1000f1fa:	212a      	movs	r1, #42	; 0x2a
1000f1fc:	71e3      	strb	r3, [r4, #7]
1000f1fe:	1c20      	adds	r0, r4, #0
1000f200:	4b0f      	ldr	r3, [pc, #60]	; (1000f240 <gapm_set_dev_config_cmd_handler+0x100>)
1000f202:	80af      	strh	r7, [r5, #4]
1000f204:	4798      	blx	r3
1000f206:	1c30      	adds	r0, r6, #0
1000f208:	4b0e      	ldr	r3, [pc, #56]	; (1000f244 <gapm_set_dev_config_cmd_handler+0x104>)
1000f20a:	4798      	blx	r3
1000f20c:	7833      	ldrb	r3, [r6, #0]
1000f20e:	20e2      	movs	r0, #226	; 0xe2
1000f210:	2b00      	cmp	r3, #0
1000f212:	d106      	bne.n	1000f222 <gapm_set_dev_config_cmd_handler+0xe2>
1000f214:	68ab      	ldr	r3, [r5, #8]
1000f216:	20e2      	movs	r0, #226	; 0xe2
1000f218:	781a      	ldrb	r2, [r3, #0]
1000f21a:	785b      	ldrb	r3, [r3, #1]
1000f21c:	2a03      	cmp	r2, #3
1000f21e:	d100      	bne.n	1000f222 <gapm_set_dev_config_cmd_handler+0xe2>
1000f220:	1c18      	adds	r0, r3, #0
1000f222:	b009      	add	sp, #36	; 0x24
1000f224:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f226:	46c0      	nop			; (mov r8, r8)
1000f228:	10016444 	.word	0x10016444
1000f22c:	100160d4 	.word	0x100160d4
1000f230:	10010fa7 	.word	0x10010fa7
1000f234:	10016450 	.word	0x10016450
1000f238:	10016456 	.word	0x10016456
1000f23c:	100160c8 	.word	0x100160c8
1000f240:	1000e4f9 	.word	0x1000e4f9
1000f244:	1000e55d 	.word	0x1000e55d

1000f248 <gapm_get_dev_config_cmd_handler>:
1000f248:	4684      	mov	ip, r0
1000f24a:	4663      	mov	r3, ip
1000f24c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f24e:	b085      	sub	sp, #20
1000f250:	9100      	str	r1, [sp, #0]
1000f252:	20cf      	movs	r0, #207	; 0xcf
1000f254:	2b01      	cmp	r3, #1
1000f256:	d854      	bhi.n	1000f302 <gapm_get_dev_config_cmd_handler+0xba>
1000f258:	2900      	cmp	r1, #0
1000f25a:	d052      	beq.n	1000f302 <gapm_get_dev_config_cmd_handler+0xba>
1000f25c:	2200      	movs	r2, #0
1000f25e:	492a      	ldr	r1, [pc, #168]	; (1000f308 <gapm_get_dev_config_cmd_handler+0xc0>)
1000f260:	ab02      	add	r3, sp, #8
1000f262:	880c      	ldrh	r4, [r1, #0]
1000f264:	8809      	ldrh	r1, [r1, #0]
1000f266:	1d9f      	adds	r7, r3, #6
1000f268:	719a      	strb	r2, [r3, #6]
1000f26a:	4b28      	ldr	r3, [pc, #160]	; (1000f30c <gapm_get_dev_config_cmd_handler+0xc4>)
1000f26c:	0a09      	lsrs	r1, r1, #8
1000f26e:	250d      	movs	r5, #13
1000f270:	2606      	movs	r6, #6
1000f272:	7159      	strb	r1, [r3, #5]
1000f274:	4661      	mov	r1, ip
1000f276:	701e      	strb	r6, [r3, #0]
1000f278:	705d      	strb	r5, [r3, #1]
1000f27a:	709d      	strb	r5, [r3, #2]
1000f27c:	70da      	strb	r2, [r3, #3]
1000f27e:	711c      	strb	r4, [r3, #4]
1000f280:	2901      	cmp	r1, #1
1000f282:	d13e      	bne.n	1000f302 <gapm_get_dev_config_cmd_handler+0xba>
1000f284:	21d0      	movs	r1, #208	; 0xd0
1000f286:	4c22      	ldr	r4, [pc, #136]	; (1000f310 <gapm_get_dev_config_cmd_handler+0xc8>)
1000f288:	0109      	lsls	r1, r1, #4
1000f28a:	8061      	strh	r1, [r4, #2]
1000f28c:	4921      	ldr	r1, [pc, #132]	; (1000f314 <gapm_get_dev_config_cmd_handler+0xcc>)
1000f28e:	71da      	strb	r2, [r3, #7]
1000f290:	8021      	strh	r1, [r4, #0]
1000f292:	4661      	mov	r1, ip
1000f294:	721e      	strb	r6, [r3, #8]
1000f296:	7199      	strb	r1, [r3, #6]
1000f298:	1c18      	adds	r0, r3, #0
1000f29a:	2109      	movs	r1, #9
1000f29c:	4b1e      	ldr	r3, [pc, #120]	; (1000f318 <gapm_get_dev_config_cmd_handler+0xd0>)
1000f29e:	80a5      	strh	r5, [r4, #4]
1000f2a0:	4798      	blx	r3
1000f2a2:	1c38      	adds	r0, r7, #0
1000f2a4:	4b1d      	ldr	r3, [pc, #116]	; (1000f31c <gapm_get_dev_config_cmd_handler+0xd4>)
1000f2a6:	4798      	blx	r3
1000f2a8:	783b      	ldrb	r3, [r7, #0]
1000f2aa:	20e2      	movs	r0, #226	; 0xe2
1000f2ac:	9301      	str	r3, [sp, #4]
1000f2ae:	2b00      	cmp	r3, #0
1000f2b0:	d127      	bne.n	1000f302 <gapm_get_dev_config_cmd_handler+0xba>
1000f2b2:	8821      	ldrh	r1, [r4, #0]
1000f2b4:	4a1a      	ldr	r2, [pc, #104]	; (1000f320 <gapm_get_dev_config_cmd_handler+0xd8>)
1000f2b6:	68a7      	ldr	r7, [r4, #8]
1000f2b8:	3b01      	subs	r3, #1
1000f2ba:	4291      	cmp	r1, r2
1000f2bc:	d001      	beq.n	1000f2c2 <gapm_get_dev_config_cmd_handler+0x7a>
1000f2be:	8023      	strh	r3, [r4, #0]
1000f2c0:	e01a      	b.n	1000f2f8 <gapm_get_dev_config_cmd_handler+0xb0>
1000f2c2:	8063      	strh	r3, [r4, #2]
1000f2c4:	9b00      	ldr	r3, [sp, #0]
1000f2c6:	1c39      	adds	r1, r7, #0
1000f2c8:	1c58      	adds	r0, r3, #1
1000f2ca:	1c32      	adds	r2, r6, #0
1000f2cc:	4b15      	ldr	r3, [pc, #84]	; (1000f324 <gapm_get_dev_config_cmd_handler+0xdc>)
1000f2ce:	4798      	blx	r3
1000f2d0:	79bb      	ldrb	r3, [r7, #6]
1000f2d2:	9a00      	ldr	r2, [sp, #0]
1000f2d4:	7013      	strb	r3, [r2, #0]
1000f2d6:	23d0      	movs	r3, #208	; 0xd0
1000f2d8:	011b      	lsls	r3, r3, #4
1000f2da:	8023      	strh	r3, [r4, #0]
1000f2dc:	ab02      	add	r3, sp, #8
1000f2de:	80a5      	strh	r5, [r4, #4]
1000f2e0:	1ddd      	adds	r5, r3, #7
1000f2e2:	466b      	mov	r3, sp
1000f2e4:	791b      	ldrb	r3, [r3, #4]
1000f2e6:	1c28      	adds	r0, r5, #0
1000f2e8:	702b      	strb	r3, [r5, #0]
1000f2ea:	4b0c      	ldr	r3, [pc, #48]	; (1000f31c <gapm_get_dev_config_cmd_handler+0xd4>)
1000f2ec:	4798      	blx	r3
1000f2ee:	782b      	ldrb	r3, [r5, #0]
1000f2f0:	20d0      	movs	r0, #208	; 0xd0
1000f2f2:	2b00      	cmp	r3, #0
1000f2f4:	d105      	bne.n	1000f302 <gapm_get_dev_config_cmd_handler+0xba>
1000f2f6:	68a7      	ldr	r7, [r4, #8]
1000f2f8:	783b      	ldrb	r3, [r7, #0]
1000f2fa:	7878      	ldrb	r0, [r7, #1]
1000f2fc:	2b06      	cmp	r3, #6
1000f2fe:	d000      	beq.n	1000f302 <gapm_get_dev_config_cmd_handler+0xba>
1000f300:	20e2      	movs	r0, #226	; 0xe2
1000f302:	b005      	add	sp, #20
1000f304:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f306:	46c0      	nop			; (mov r8, r8)
1000f308:	100160d4 	.word	0x100160d4
1000f30c:	10016444 	.word	0x10016444
1000f310:	100160c8 	.word	0x100160c8
1000f314:	00000d08 	.word	0x00000d08
1000f318:	1000e4f9 	.word	0x1000e4f9
1000f31c:	1000e55d 	.word	0x1000e55d
1000f320:	0000ffff 	.word	0x0000ffff
1000f324:	10010fa7 	.word	0x10010fa7

1000f328 <gapm_cancel_cmd_handler>:
1000f328:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000f32a:	4916      	ldr	r1, [pc, #88]	; (1000f384 <gapm_cancel_cmd_handler+0x5c>)
1000f32c:	4816      	ldr	r0, [pc, #88]	; (1000f388 <gapm_cancel_cmd_handler+0x60>)
1000f32e:	880c      	ldrh	r4, [r1, #0]
1000f330:	8809      	ldrh	r1, [r1, #0]
1000f332:	466b      	mov	r3, sp
1000f334:	0a09      	lsrs	r1, r1, #8
1000f336:	7141      	strb	r1, [r0, #5]
1000f338:	2102      	movs	r1, #2
1000f33a:	2203      	movs	r2, #3
1000f33c:	7201      	strb	r1, [r0, #8]
1000f33e:	21d0      	movs	r1, #208	; 0xd0
1000f340:	1ddd      	adds	r5, r3, #7
1000f342:	2300      	movs	r3, #0
1000f344:	7104      	strb	r4, [r0, #4]
1000f346:	4c11      	ldr	r4, [pc, #68]	; (1000f38c <gapm_cancel_cmd_handler+0x64>)
1000f348:	7002      	strb	r2, [r0, #0]
1000f34a:	0109      	lsls	r1, r1, #4
1000f34c:	320a      	adds	r2, #10
1000f34e:	702b      	strb	r3, [r5, #0]
1000f350:	7042      	strb	r2, [r0, #1]
1000f352:	7082      	strb	r2, [r0, #2]
1000f354:	70c3      	strb	r3, [r0, #3]
1000f356:	8021      	strh	r1, [r4, #0]
1000f358:	80a2      	strh	r2, [r4, #4]
1000f35a:	71c3      	strb	r3, [r0, #7]
1000f35c:	3a0c      	subs	r2, #12
1000f35e:	2109      	movs	r1, #9
1000f360:	4b0b      	ldr	r3, [pc, #44]	; (1000f390 <gapm_cancel_cmd_handler+0x68>)
1000f362:	7182      	strb	r2, [r0, #6]
1000f364:	4798      	blx	r3
1000f366:	1c28      	adds	r0, r5, #0
1000f368:	4b0a      	ldr	r3, [pc, #40]	; (1000f394 <gapm_cancel_cmd_handler+0x6c>)
1000f36a:	4798      	blx	r3
1000f36c:	7828      	ldrb	r0, [r5, #0]
1000f36e:	2800      	cmp	r0, #0
1000f370:	d001      	beq.n	1000f376 <gapm_cancel_cmd_handler+0x4e>
1000f372:	20e2      	movs	r0, #226	; 0xe2
1000f374:	e004      	b.n	1000f380 <gapm_cancel_cmd_handler+0x58>
1000f376:	68a3      	ldr	r3, [r4, #8]
1000f378:	785b      	ldrb	r3, [r3, #1]
1000f37a:	2b44      	cmp	r3, #68	; 0x44
1000f37c:	d000      	beq.n	1000f380 <gapm_cancel_cmd_handler+0x58>
1000f37e:	1c18      	adds	r0, r3, #0
1000f380:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000f382:	46c0      	nop			; (mov r8, r8)
1000f384:	100160d4 	.word	0x100160d4
1000f388:	10016444 	.word	0x10016444
1000f38c:	100160c8 	.word	0x100160c8
1000f390:	1000e4f9 	.word	0x1000e4f9
1000f394:	1000e55d 	.word	0x1000e55d

1000f398 <gapm_dev_bdaddr_ind_handler>:
1000f398:	b538      	push	{r3, r4, r5, lr}
1000f39a:	1c05      	adds	r5, r0, #0
1000f39c:	1c0c      	adds	r4, r1, #0
1000f39e:	1c48      	adds	r0, r1, #1
1000f3a0:	2206      	movs	r2, #6
1000f3a2:	1c29      	adds	r1, r5, #0
1000f3a4:	4b02      	ldr	r3, [pc, #8]	; (1000f3b0 <gapm_dev_bdaddr_ind_handler+0x18>)
1000f3a6:	4798      	blx	r3
1000f3a8:	79ab      	ldrb	r3, [r5, #6]
1000f3aa:	2000      	movs	r0, #0
1000f3ac:	7023      	strb	r3, [r4, #0]
1000f3ae:	bd38      	pop	{r3, r4, r5, pc}
1000f3b0:	10010fa7 	.word	0x10010fa7

1000f3b4 <gapm_cmp_evt>:
1000f3b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f3b6:	7803      	ldrb	r3, [r0, #0]
1000f3b8:	7845      	ldrb	r5, [r0, #1]
1000f3ba:	3b0c      	subs	r3, #12
1000f3bc:	1e18      	subs	r0, r3, #0
1000f3be:	280b      	cmp	r0, #11
1000f3c0:	d900      	bls.n	1000f3c4 <gapm_cmp_evt+0x10>
1000f3c2:	e08d      	b.n	1000f4e0 <gapm_cmp_evt+0x12c>
1000f3c4:	1c0c      	adds	r4, r1, #0
1000f3c6:	f000 fd5f 	bl	1000fe88 <__gnu_thumb1_case_uqi>
1000f3ca:	1952      	.short	0x1952
1000f3cc:	068b1919 	.word	0x068b1919
1000f3d0:	8b595906 	.word	0x8b595906
1000f3d4:	0d8b      	.short	0x0d8b
1000f3d6:	2300      	movs	r3, #0
1000f3d8:	2d45      	cmp	r5, #69	; 0x45
1000f3da:	d000      	beq.n	1000f3de <gapm_cmp_evt+0x2a>
1000f3dc:	1c2b      	adds	r3, r5, #0
1000f3de:	7023      	strb	r3, [r4, #0]
1000f3e0:	2002      	movs	r0, #2
1000f3e2:	e07e      	b.n	1000f4e2 <gapm_cmp_evt+0x12e>
1000f3e4:	203b      	movs	r0, #59	; 0x3b
1000f3e6:	2d00      	cmp	r5, #0
1000f3e8:	d100      	bne.n	1000f3ec <gapm_cmp_evt+0x38>
1000f3ea:	e07a      	b.n	1000f4e2 <gapm_cmp_evt+0x12e>
1000f3ec:	700d      	strb	r5, [r1, #0]
1000f3ee:	1c48      	adds	r0, r1, #1
1000f3f0:	2210      	movs	r2, #16
1000f3f2:	2100      	movs	r1, #0
1000f3f4:	4b3b      	ldr	r3, [pc, #236]	; (1000f4e4 <gapm_cmp_evt+0x130>)
1000f3f6:	4798      	blx	r3
1000f3f8:	200f      	movs	r0, #15
1000f3fa:	e072      	b.n	1000f4e2 <gapm_cmp_evt+0x12e>
1000f3fc:	2d00      	cmp	r5, #0
1000f3fe:	d134      	bne.n	1000f46a <gapm_cmp_evt+0xb6>
1000f400:	4b39      	ldr	r3, [pc, #228]	; (1000f4e8 <gapm_cmp_evt+0x134>)
1000f402:	4798      	blx	r3
1000f404:	1e43      	subs	r3, r0, #1
1000f406:	b2db      	uxtb	r3, r3
1000f408:	1c28      	adds	r0, r5, #0
1000f40a:	2b06      	cmp	r3, #6
1000f40c:	d869      	bhi.n	1000f4e2 <gapm_cmp_evt+0x12e>
1000f40e:	466b      	mov	r3, sp
1000f410:	4e36      	ldr	r6, [pc, #216]	; (1000f4ec <gapm_cmp_evt+0x138>)
1000f412:	1dd9      	adds	r1, r3, #7
1000f414:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000f416:	4b36      	ldr	r3, [pc, #216]	; (1000f4f0 <gapm_cmp_evt+0x13c>)
1000f418:	4798      	blx	r3
1000f41a:	2312      	movs	r3, #18
1000f41c:	4358      	muls	r0, r3
1000f41e:	4935      	ldr	r1, [pc, #212]	; (1000f4f4 <gapm_cmp_evt+0x140>)
1000f420:	1809      	adds	r1, r1, r0
1000f422:	1c0b      	adds	r3, r1, #0
1000f424:	894a      	ldrh	r2, [r1, #10]
1000f426:	3308      	adds	r3, #8
1000f428:	8122      	strh	r2, [r4, #8]
1000f42a:	784f      	ldrb	r7, [r1, #1]
1000f42c:	72a5      	strb	r5, [r4, #10]
1000f42e:	7027      	strb	r7, [r4, #0]
1000f430:	898a      	ldrh	r2, [r1, #12]
1000f432:	1c60      	adds	r0, r4, #1
1000f434:	81a2      	strh	r2, [r4, #12]
1000f436:	88db      	ldrh	r3, [r3, #6]
1000f438:	3102      	adds	r1, #2
1000f43a:	81e3      	strh	r3, [r4, #14]
1000f43c:	89cb      	ldrh	r3, [r1, #14]
1000f43e:	2206      	movs	r2, #6
1000f440:	8223      	strh	r3, [r4, #16]
1000f442:	4b2d      	ldr	r3, [pc, #180]	; (1000f4f8 <gapm_cmp_evt+0x144>)
1000f444:	4798      	blx	r3
1000f446:	2f00      	cmp	r7, #0
1000f448:	d00a      	beq.n	1000f460 <gapm_cmp_evt+0xac>
1000f44a:	79a3      	ldrb	r3, [r4, #6]
1000f44c:	223f      	movs	r2, #63	; 0x3f
1000f44e:	1c19      	adds	r1, r3, #0
1000f450:	3501      	adds	r5, #1
1000f452:	4391      	bics	r1, r2
1000f454:	29c0      	cmp	r1, #192	; 0xc0
1000f456:	d003      	beq.n	1000f460 <gapm_cmp_evt+0xac>
1000f458:	065b      	lsls	r3, r3, #25
1000f45a:	0fdb      	lsrs	r3, r3, #31
1000f45c:	3502      	adds	r5, #2
1000f45e:	1aed      	subs	r5, r5, r3
1000f460:	2301      	movs	r3, #1
1000f462:	425b      	negs	r3, r3
1000f464:	7025      	strb	r5, [r4, #0]
1000f466:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000f468:	e038      	b.n	1000f4dc <gapm_cmp_evt+0x128>
1000f46a:	700d      	strb	r5, [r1, #0]
1000f46c:	e004      	b.n	1000f478 <gapm_cmp_evt+0xc4>
1000f46e:	2300      	movs	r3, #0
1000f470:	2d45      	cmp	r5, #69	; 0x45
1000f472:	d000      	beq.n	1000f476 <gapm_cmp_evt+0xc2>
1000f474:	1c2b      	adds	r3, r5, #0
1000f476:	7023      	strb	r3, [r4, #0]
1000f478:	2003      	movs	r0, #3
1000f47a:	e032      	b.n	1000f4e2 <gapm_cmp_evt+0x12e>
1000f47c:	4e1b      	ldr	r6, [pc, #108]	; (1000f4ec <gapm_cmp_evt+0x138>)
1000f47e:	2100      	movs	r1, #0
1000f480:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000f482:	4b1b      	ldr	r3, [pc, #108]	; (1000f4f0 <gapm_cmp_evt+0x13c>)
1000f484:	4798      	blx	r3
1000f486:	2807      	cmp	r0, #7
1000f488:	d818      	bhi.n	1000f4bc <gapm_cmp_evt+0x108>
1000f48a:	2301      	movs	r3, #1
1000f48c:	425b      	negs	r3, r3
1000f48e:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000f490:	3313      	adds	r3, #19
1000f492:	4358      	muls	r0, r3
1000f494:	4917      	ldr	r1, [pc, #92]	; (1000f4f4 <gapm_cmp_evt+0x140>)
1000f496:	1809      	adds	r1, r1, r0
1000f498:	1c0b      	adds	r3, r1, #0
1000f49a:	894a      	ldrh	r2, [r1, #10]
1000f49c:	3308      	adds	r3, #8
1000f49e:	8122      	strh	r2, [r4, #8]
1000f4a0:	784a      	ldrb	r2, [r1, #1]
1000f4a2:	72a5      	strb	r5, [r4, #10]
1000f4a4:	7022      	strb	r2, [r4, #0]
1000f4a6:	898a      	ldrh	r2, [r1, #12]
1000f4a8:	1c60      	adds	r0, r4, #1
1000f4aa:	81a2      	strh	r2, [r4, #12]
1000f4ac:	88db      	ldrh	r3, [r3, #6]
1000f4ae:	3102      	adds	r1, #2
1000f4b0:	81e3      	strh	r3, [r4, #14]
1000f4b2:	89cb      	ldrh	r3, [r1, #14]
1000f4b4:	2206      	movs	r2, #6
1000f4b6:	8223      	strh	r3, [r4, #16]
1000f4b8:	4b0f      	ldr	r3, [pc, #60]	; (1000f4f8 <gapm_cmp_evt+0x144>)
1000f4ba:	4798      	blx	r3
1000f4bc:	2200      	movs	r2, #0
1000f4be:	7823      	ldrb	r3, [r4, #0]
1000f4c0:	4293      	cmp	r3, r2
1000f4c2:	d00a      	beq.n	1000f4da <gapm_cmp_evt+0x126>
1000f4c4:	79a3      	ldrb	r3, [r4, #6]
1000f4c6:	323f      	adds	r2, #63	; 0x3f
1000f4c8:	1c19      	adds	r1, r3, #0
1000f4ca:	4391      	bics	r1, r2
1000f4cc:	3a3e      	subs	r2, #62	; 0x3e
1000f4ce:	29c0      	cmp	r1, #192	; 0xc0
1000f4d0:	d003      	beq.n	1000f4da <gapm_cmp_evt+0x126>
1000f4d2:	065b      	lsls	r3, r3, #25
1000f4d4:	0fdb      	lsrs	r3, r3, #31
1000f4d6:	3202      	adds	r2, #2
1000f4d8:	1ad2      	subs	r2, r2, r3
1000f4da:	7022      	strb	r2, [r4, #0]
1000f4dc:	2005      	movs	r0, #5
1000f4de:	e000      	b.n	1000f4e2 <gapm_cmp_evt+0x12e>
1000f4e0:	2000      	movs	r0, #0
1000f4e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f4e4:	10010fb9 	.word	0x10010fb9
1000f4e8:	1000e705 	.word	0x1000e705
1000f4ec:	10016166 	.word	0x10016166
1000f4f0:	1000e6c9 	.word	0x1000e6c9
1000f4f4:	100160d6 	.word	0x100160d6
1000f4f8:	10010fa7 	.word	0x10010fa7

1000f4fc <gapm_start_adv_cmd_handler>:
1000f4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f4fe:	b089      	sub	sp, #36	; 0x24
1000f500:	9303      	str	r3, [sp, #12]
1000f502:	ab0e      	add	r3, sp, #56	; 0x38
1000f504:	9102      	str	r1, [sp, #8]
1000f506:	cb02      	ldmia	r3!, {r1}
1000f508:	aa08      	add	r2, sp, #32
1000f50a:	881b      	ldrh	r3, [r3, #0]
1000f50c:	4e3c      	ldr	r6, [pc, #240]	; (1000f600 <gapm_start_adv_cmd_handler+0x104>)
1000f50e:	9300      	str	r3, [sp, #0]
1000f510:	ab10      	add	r3, sp, #64	; 0x40
1000f512:	881b      	ldrh	r3, [r3, #0]
1000f514:	240d      	movs	r4, #13
1000f516:	469c      	mov	ip, r3
1000f518:	ab11      	add	r3, sp, #68	; 0x44
1000f51a:	781b      	ldrb	r3, [r3, #0]
1000f51c:	9304      	str	r3, [sp, #16]
1000f51e:	ab12      	add	r3, sp, #72	; 0x48
1000f520:	781b      	ldrb	r3, [r3, #0]
1000f522:	9305      	str	r3, [sp, #20]
1000f524:	ab13      	add	r3, sp, #76	; 0x4c
1000f526:	781b      	ldrb	r3, [r3, #0]
1000f528:	9306      	str	r3, [sp, #24]
1000f52a:	ab14      	add	r3, sp, #80	; 0x50
1000f52c:	781b      	ldrb	r3, [r3, #0]
1000f52e:	9301      	str	r3, [sp, #4]
1000f530:	2319      	movs	r3, #25
1000f532:	189b      	adds	r3, r3, r2
1000f534:	7fdd      	ldrb	r5, [r3, #31]
1000f536:	ab18      	add	r3, sp, #96	; 0x60
1000f538:	881f      	ldrh	r7, [r3, #0]
1000f53a:	ab19      	add	r3, sp, #100	; 0x64
1000f53c:	781b      	ldrb	r3, [r3, #0]
1000f53e:	8832      	ldrh	r2, [r6, #0]
1000f540:	9307      	str	r3, [sp, #28]
1000f542:	4b30      	ldr	r3, [pc, #192]	; (1000f604 <gapm_start_adv_cmd_handler+0x108>)
1000f544:	8836      	ldrh	r6, [r6, #0]
1000f546:	711a      	strb	r2, [r3, #4]
1000f548:	466a      	mov	r2, sp
1000f54a:	7a12      	ldrb	r2, [r2, #8]
1000f54c:	701c      	strb	r4, [r3, #0]
1000f54e:	705c      	strb	r4, [r3, #1]
1000f550:	709c      	strb	r4, [r3, #2]
1000f552:	725a      	strb	r2, [r3, #9]
1000f554:	2400      	movs	r4, #0
1000f556:	466a      	mov	r2, sp
1000f558:	0a36      	lsrs	r6, r6, #8
1000f55a:	70dc      	strb	r4, [r3, #3]
1000f55c:	7218      	strb	r0, [r3, #8]
1000f55e:	729c      	strb	r4, [r3, #10]
1000f560:	715e      	strb	r6, [r3, #5]
1000f562:	72dc      	strb	r4, [r3, #11]
1000f564:	7812      	ldrb	r2, [r2, #0]
1000f566:	380e      	subs	r0, #14
1000f568:	731a      	strb	r2, [r3, #12]
1000f56a:	9a00      	ldr	r2, [sp, #0]
1000f56c:	0a14      	lsrs	r4, r2, #8
1000f56e:	4662      	mov	r2, ip
1000f570:	739a      	strb	r2, [r3, #14]
1000f572:	4662      	mov	r2, ip
1000f574:	735c      	strb	r4, [r3, #13]
1000f576:	0a14      	lsrs	r4, r2, #8
1000f578:	466a      	mov	r2, sp
1000f57a:	7c12      	ldrb	r2, [r2, #16]
1000f57c:	73dc      	strb	r4, [r3, #15]
1000f57e:	741a      	strb	r2, [r3, #16]
1000f580:	1c1c      	adds	r4, r3, #0
1000f582:	2801      	cmp	r0, #1
1000f584:	d809      	bhi.n	1000f59a <gapm_start_adv_cmd_handler+0x9e>
1000f586:	2900      	cmp	r1, #0
1000f588:	d003      	beq.n	1000f592 <gapm_start_adv_cmd_handler+0x96>
1000f58a:	481f      	ldr	r0, [pc, #124]	; (1000f608 <gapm_start_adv_cmd_handler+0x10c>)
1000f58c:	2206      	movs	r2, #6
1000f58e:	4b1f      	ldr	r3, [pc, #124]	; (1000f60c <gapm_start_adv_cmd_handler+0x110>)
1000f590:	4798      	blx	r3
1000f592:	466b      	mov	r3, sp
1000f594:	7b1b      	ldrb	r3, [r3, #12]
1000f596:	75e3      	strb	r3, [r4, #23]
1000f598:	e014      	b.n	1000f5c4 <gapm_start_adv_cmd_handler+0xc8>
1000f59a:	466b      	mov	r3, sp
1000f59c:	7d1b      	ldrb	r3, [r3, #20]
1000f59e:	9915      	ldr	r1, [sp, #84]	; 0x54
1000f5a0:	7463      	strb	r3, [r4, #17]
1000f5a2:	466b      	mov	r3, sp
1000f5a4:	7e1b      	ldrb	r3, [r3, #24]
1000f5a6:	9a01      	ldr	r2, [sp, #4]
1000f5a8:	74a3      	strb	r3, [r4, #18]
1000f5aa:	466b      	mov	r3, sp
1000f5ac:	791b      	ldrb	r3, [r3, #4]
1000f5ae:	4818      	ldr	r0, [pc, #96]	; (1000f610 <gapm_start_adv_cmd_handler+0x114>)
1000f5b0:	4e16      	ldr	r6, [pc, #88]	; (1000f60c <gapm_start_adv_cmd_handler+0x110>)
1000f5b2:	74e3      	strb	r3, [r4, #19]
1000f5b4:	47b0      	blx	r6
1000f5b6:	1c23      	adds	r3, r4, #0
1000f5b8:	4816      	ldr	r0, [pc, #88]	; (1000f614 <gapm_start_adv_cmd_handler+0x118>)
1000f5ba:	3330      	adds	r3, #48	; 0x30
1000f5bc:	9917      	ldr	r1, [sp, #92]	; 0x5c
1000f5be:	1c2a      	adds	r2, r5, #0
1000f5c0:	701d      	strb	r5, [r3, #0]
1000f5c2:	47b0      	blx	r6
1000f5c4:	1c22      	adds	r2, r4, #0
1000f5c6:	23a5      	movs	r3, #165	; 0xa5
1000f5c8:	3250      	adds	r2, #80	; 0x50
1000f5ca:	7013      	strb	r3, [r2, #0]
1000f5cc:	1c22      	adds	r2, r4, #0
1000f5ce:	3251      	adds	r2, #81	; 0x51
1000f5d0:	7013      	strb	r3, [r2, #0]
1000f5d2:	1c23      	adds	r3, r4, #0
1000f5d4:	1c22      	adds	r2, r4, #0
1000f5d6:	3352      	adds	r3, #82	; 0x52
1000f5d8:	701f      	strb	r7, [r3, #0]
1000f5da:	3253      	adds	r2, #83	; 0x53
1000f5dc:	0a3b      	lsrs	r3, r7, #8
1000f5de:	7013      	strb	r3, [r2, #0]
1000f5e0:	466a      	mov	r2, sp
1000f5e2:	1c23      	adds	r3, r4, #0
1000f5e4:	7f12      	ldrb	r2, [r2, #28]
1000f5e6:	3354      	adds	r3, #84	; 0x54
1000f5e8:	701a      	strb	r2, [r3, #0]
1000f5ea:	234d      	movs	r3, #77	; 0x4d
1000f5ec:	2500      	movs	r5, #0
1000f5ee:	71a3      	strb	r3, [r4, #6]
1000f5f0:	1c20      	adds	r0, r4, #0
1000f5f2:	2155      	movs	r1, #85	; 0x55
1000f5f4:	4b08      	ldr	r3, [pc, #32]	; (1000f618 <gapm_start_adv_cmd_handler+0x11c>)
1000f5f6:	71e5      	strb	r5, [r4, #7]
1000f5f8:	4798      	blx	r3
1000f5fa:	1c28      	adds	r0, r5, #0
1000f5fc:	b009      	add	sp, #36	; 0x24
1000f5fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f600:	100160d4 	.word	0x100160d4
1000f604:	10016444 	.word	0x10016444
1000f608:	10016455 	.word	0x10016455
1000f60c:	10010fa7 	.word	0x10010fa7
1000f610:	10016458 	.word	0x10016458
1000f614:	10016475 	.word	0x10016475
1000f618:	1000e4f9 	.word	0x1000e4f9

1000f61c <get_gap_local_addr_type>:
1000f61c:	4b04      	ldr	r3, [pc, #16]	; (1000f630 <get_gap_local_addr_type+0x14>)
1000f61e:	2001      	movs	r0, #1
1000f620:	791b      	ldrb	r3, [r3, #4]
1000f622:	2b02      	cmp	r3, #2
1000f624:	d003      	beq.n	1000f62e <get_gap_local_addr_type+0x12>
1000f626:	3b03      	subs	r3, #3
1000f628:	4258      	negs	r0, r3
1000f62a:	4158      	adcs	r0, r3
1000f62c:	0040      	lsls	r0, r0, #1
1000f62e:	4770      	bx	lr
1000f630:	10016166 	.word	0x10016166

1000f634 <gapm_adv_report_evt_handler>:
1000f634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f636:	7843      	ldrb	r3, [r0, #1]
1000f638:	1c05      	adds	r5, r0, #0
1000f63a:	9301      	str	r3, [sp, #4]
1000f63c:	466b      	mov	r3, sp
1000f63e:	1c0c      	adds	r4, r1, #0
1000f640:	791b      	ldrb	r3, [r3, #4]
1000f642:	7806      	ldrb	r6, [r0, #0]
1000f644:	2206      	movs	r2, #6
1000f646:	704b      	strb	r3, [r1, #1]
1000f648:	1c88      	adds	r0, r1, #2
1000f64a:	4f1b      	ldr	r7, [pc, #108]	; (1000f6b8 <gapm_adv_report_evt_handler+0x84>)
1000f64c:	1ca9      	adds	r1, r5, #2
1000f64e:	47b8      	blx	r7
1000f650:	1c20      	adds	r0, r4, #0
1000f652:	1c29      	adds	r1, r5, #0
1000f654:	7a2a      	ldrb	r2, [r5, #8]
1000f656:	3008      	adds	r0, #8
1000f658:	77c2      	strb	r2, [r0, #31]
1000f65a:	3109      	adds	r1, #9
1000f65c:	3528      	adds	r5, #40	; 0x28
1000f65e:	47b8      	blx	r7
1000f660:	782b      	ldrb	r3, [r5, #0]
1000f662:	b25a      	sxtb	r2, r3
1000f664:	2a00      	cmp	r2, #0
1000f666:	da01      	bge.n	1000f66c <gapm_adv_report_evt_handler+0x38>
1000f668:	3301      	adds	r3, #1
1000f66a:	b2db      	uxtb	r3, r3
1000f66c:	1c22      	adds	r2, r4, #0
1000f66e:	3228      	adds	r2, #40	; 0x28
1000f670:	7013      	strb	r3, [r2, #0]
1000f672:	2200      	movs	r2, #0
1000f674:	9b01      	ldr	r3, [sp, #4]
1000f676:	4293      	cmp	r3, r2
1000f678:	d00a      	beq.n	1000f690 <gapm_adv_report_evt_handler+0x5c>
1000f67a:	79e3      	ldrb	r3, [r4, #7]
1000f67c:	323f      	adds	r2, #63	; 0x3f
1000f67e:	1c19      	adds	r1, r3, #0
1000f680:	4391      	bics	r1, r2
1000f682:	3a3e      	subs	r2, #62	; 0x3e
1000f684:	29c0      	cmp	r1, #192	; 0xc0
1000f686:	d003      	beq.n	1000f690 <gapm_adv_report_evt_handler+0x5c>
1000f688:	065b      	lsls	r3, r3, #25
1000f68a:	0fdb      	lsrs	r3, r3, #31
1000f68c:	3202      	adds	r2, #2
1000f68e:	1ad2      	subs	r2, r2, r3
1000f690:	7062      	strb	r2, [r4, #1]
1000f692:	2e04      	cmp	r6, #4
1000f694:	d80f      	bhi.n	1000f6b6 <gapm_adv_report_evt_handler+0x82>
1000f696:	1c30      	adds	r0, r6, #0
1000f698:	f000 fbf6 	bl	1000fe88 <__gnu_thumb1_case_uqi>
1000f69c:	09070503 	.word	0x09070503
1000f6a0:	0b          	.byte	0x0b
1000f6a1:	00          	.byte	0x00
1000f6a2:	2300      	movs	r3, #0
1000f6a4:	e006      	b.n	1000f6b4 <gapm_adv_report_evt_handler+0x80>
1000f6a6:	2301      	movs	r3, #1
1000f6a8:	e004      	b.n	1000f6b4 <gapm_adv_report_evt_handler+0x80>
1000f6aa:	2302      	movs	r3, #2
1000f6ac:	e002      	b.n	1000f6b4 <gapm_adv_report_evt_handler+0x80>
1000f6ae:	2303      	movs	r3, #3
1000f6b0:	e000      	b.n	1000f6b4 <gapm_adv_report_evt_handler+0x80>
1000f6b2:	2305      	movs	r3, #5
1000f6b4:	7023      	strb	r3, [r4, #0]
1000f6b6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f6b8:	10010fa7 	.word	0x10010fa7

1000f6bc <gapm_resolv_addr_cmd_handler>:
1000f6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f6be:	2314      	movs	r3, #20
1000f6c0:	4c12      	ldr	r4, [pc, #72]	; (1000f70c <gapm_resolv_addr_cmd_handler+0x50>)
1000f6c2:	1c17      	adds	r7, r2, #0
1000f6c4:	7023      	strb	r3, [r4, #0]
1000f6c6:	3b07      	subs	r3, #7
1000f6c8:	7063      	strb	r3, [r4, #1]
1000f6ca:	70a3      	strb	r3, [r4, #2]
1000f6cc:	2300      	movs	r3, #0
1000f6ce:	70e3      	strb	r3, [r4, #3]
1000f6d0:	4b0f      	ldr	r3, [pc, #60]	; (1000f710 <gapm_resolv_addr_cmd_handler+0x54>)
1000f6d2:	1c05      	adds	r5, r0, #0
1000f6d4:	881a      	ldrh	r2, [r3, #0]
1000f6d6:	881b      	ldrh	r3, [r3, #0]
1000f6d8:	4e0e      	ldr	r6, [pc, #56]	; (1000f714 <gapm_resolv_addr_cmd_handler+0x58>)
1000f6da:	0a1b      	lsrs	r3, r3, #8
1000f6dc:	7163      	strb	r3, [r4, #5]
1000f6de:	2317      	movs	r3, #23
1000f6e0:	012d      	lsls	r5, r5, #4
1000f6e2:	7122      	strb	r2, [r4, #4]
1000f6e4:	7260      	strb	r0, [r4, #9]
1000f6e6:	2206      	movs	r2, #6
1000f6e8:	480b      	ldr	r0, [pc, #44]	; (1000f718 <gapm_resolv_addr_cmd_handler+0x5c>)
1000f6ea:	7223      	strb	r3, [r4, #8]
1000f6ec:	47b0      	blx	r6
1000f6ee:	1c39      	adds	r1, r7, #0
1000f6f0:	1c2a      	adds	r2, r5, #0
1000f6f2:	480a      	ldr	r0, [pc, #40]	; (1000f71c <gapm_resolv_addr_cmd_handler+0x60>)
1000f6f4:	47b0      	blx	r6
1000f6f6:	1c29      	adds	r1, r5, #0
1000f6f8:	3110      	adds	r1, #16
1000f6fa:	1c0b      	adds	r3, r1, #0
1000f6fc:	3b08      	subs	r3, #8
1000f6fe:	71a3      	strb	r3, [r4, #6]
1000f700:	121b      	asrs	r3, r3, #8
1000f702:	71e3      	strb	r3, [r4, #7]
1000f704:	1c20      	adds	r0, r4, #0
1000f706:	4b06      	ldr	r3, [pc, #24]	; (1000f720 <gapm_resolv_addr_cmd_handler+0x64>)
1000f708:	4798      	blx	r3
1000f70a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f70c:	10016444 	.word	0x10016444
1000f710:	100160d4 	.word	0x100160d4
1000f714:	10010fa7 	.word	0x10010fa7
1000f718:	1001644e 	.word	0x1001644e
1000f71c:	10016454 	.word	0x10016454
1000f720:	1000e4f9 	.word	0x1000e4f9

1000f724 <gapm_addr_solved_ind_handler>:
1000f724:	b570      	push	{r4, r5, r6, lr}
1000f726:	1c04      	adds	r4, r0, #0
1000f728:	1c08      	adds	r0, r1, #0
1000f72a:	1c0d      	adds	r5, r1, #0
1000f72c:	4e05      	ldr	r6, [pc, #20]	; (1000f744 <gapm_addr_solved_ind_handler+0x20>)
1000f72e:	1c21      	adds	r1, r4, #0
1000f730:	2206      	movs	r2, #6
1000f732:	3011      	adds	r0, #17
1000f734:	47b0      	blx	r6
1000f736:	1c68      	adds	r0, r5, #1
1000f738:	1da1      	adds	r1, r4, #6
1000f73a:	2210      	movs	r2, #16
1000f73c:	47b0      	blx	r6
1000f73e:	2300      	movs	r3, #0
1000f740:	702b      	strb	r3, [r5, #0]
1000f742:	bd70      	pop	{r4, r5, r6, pc}
1000f744:	10010fa7 	.word	0x10010fa7

1000f748 <gapm_profile_added_ind_handler>:
1000f748:	b510      	push	{r4, lr}
1000f74a:	7843      	ldrb	r3, [r0, #1]
1000f74c:	7902      	ldrb	r2, [r0, #4]
1000f74e:	7944      	ldrb	r4, [r0, #5]
1000f750:	7800      	ldrb	r0, [r0, #0]
1000f752:	021b      	lsls	r3, r3, #8
1000f754:	4303      	orrs	r3, r0
1000f756:	2b1b      	cmp	r3, #27
1000f758:	d104      	bne.n	1000f764 <gapm_profile_added_ind_handler+0x1c>
1000f75a:	2300      	movs	r3, #0
1000f75c:	700b      	strb	r3, [r1, #0]
1000f75e:	0223      	lsls	r3, r4, #8
1000f760:	4313      	orrs	r3, r2
1000f762:	804b      	strh	r3, [r1, #2]
1000f764:	203b      	movs	r0, #59	; 0x3b
1000f766:	bd10      	pop	{r4, pc}

1000f768 <gattc_read_req_ind_parser>:
1000f768:	7843      	ldrb	r3, [r0, #1]
1000f76a:	7802      	ldrb	r2, [r0, #0]
1000f76c:	021b      	lsls	r3, r3, #8
1000f76e:	4313      	orrs	r3, r2
1000f770:	804b      	strh	r3, [r1, #2]
1000f772:	4770      	bx	lr

1000f774 <gattc_write_req_ind_parser>:
1000f774:	b508      	push	{r3, lr}
1000f776:	1c13      	adds	r3, r2, #0
1000f778:	0a00      	lsrs	r0, r0, #8
1000f77a:	8010      	strh	r0, [r2, #0]
1000f77c:	784a      	ldrb	r2, [r1, #1]
1000f77e:	7808      	ldrb	r0, [r1, #0]
1000f780:	0212      	lsls	r2, r2, #8
1000f782:	4302      	orrs	r2, r0
1000f784:	805a      	strh	r2, [r3, #2]
1000f786:	78ca      	ldrb	r2, [r1, #3]
1000f788:	7888      	ldrb	r0, [r1, #2]
1000f78a:	0212      	lsls	r2, r2, #8
1000f78c:	4302      	orrs	r2, r0
1000f78e:	809a      	strh	r2, [r3, #4]
1000f790:	794a      	ldrb	r2, [r1, #5]
1000f792:	7908      	ldrb	r0, [r1, #4]
1000f794:	0212      	lsls	r2, r2, #8
1000f796:	4302      	orrs	r2, r0
1000f798:	80da      	strh	r2, [r3, #6]
1000f79a:	3308      	adds	r3, #8
1000f79c:	1c18      	adds	r0, r3, #0
1000f79e:	3106      	adds	r1, #6
1000f7a0:	4b01      	ldr	r3, [pc, #4]	; (1000f7a8 <gattc_write_req_ind_parser+0x34>)
1000f7a2:	4798      	blx	r3
1000f7a4:	bd08      	pop	{r3, pc}
1000f7a6:	46c0      	nop			; (mov r8, r8)
1000f7a8:	10010fa7 	.word	0x10010fa7

1000f7ac <gattc_att_info_req_parser>:
1000f7ac:	7843      	ldrb	r3, [r0, #1]
1000f7ae:	7802      	ldrb	r2, [r0, #0]
1000f7b0:	021b      	lsls	r3, r3, #8
1000f7b2:	4313      	orrs	r3, r2
1000f7b4:	800b      	strh	r3, [r1, #0]
1000f7b6:	4770      	bx	lr

1000f7b8 <gattc_read_cfm>:
1000f7b8:	b538      	push	{r3, r4, r5, lr}
1000f7ba:	2514      	movs	r5, #20
1000f7bc:	1c1c      	adds	r4, r3, #0
1000f7be:	4b14      	ldr	r3, [pc, #80]	; (1000f810 <gattc_read_cfm+0x58>)
1000f7c0:	70d9      	strb	r1, [r3, #3]
1000f7c2:	4914      	ldr	r1, [pc, #80]	; (1000f814 <gattc_read_cfm+0x5c>)
1000f7c4:	701d      	strb	r5, [r3, #0]
1000f7c6:	3d08      	subs	r5, #8
1000f7c8:	705d      	strb	r5, [r3, #1]
1000f7ca:	709d      	strb	r5, [r3, #2]
1000f7cc:	880d      	ldrh	r5, [r1, #0]
1000f7ce:	8809      	ldrh	r1, [r1, #0]
1000f7d0:	7218      	strb	r0, [r3, #8]
1000f7d2:	0a09      	lsrs	r1, r1, #8
1000f7d4:	7159      	strb	r1, [r3, #5]
1000f7d6:	0a00      	lsrs	r0, r0, #8
1000f7d8:	0a21      	lsrs	r1, r4, #8
1000f7da:	711d      	strb	r5, [r3, #4]
1000f7dc:	7258      	strb	r0, [r3, #9]
1000f7de:	729c      	strb	r4, [r3, #10]
1000f7e0:	72d9      	strb	r1, [r3, #11]
1000f7e2:	731a      	strb	r2, [r3, #12]
1000f7e4:	1c1d      	adds	r5, r3, #0
1000f7e6:	2c00      	cmp	r4, #0
1000f7e8:	d007      	beq.n	1000f7fa <gattc_read_cfm+0x42>
1000f7ea:	9904      	ldr	r1, [sp, #16]
1000f7ec:	1c22      	adds	r2, r4, #0
1000f7ee:	480a      	ldr	r0, [pc, #40]	; (1000f818 <gattc_read_cfm+0x60>)
1000f7f0:	4b0a      	ldr	r3, [pc, #40]	; (1000f81c <gattc_read_cfm+0x64>)
1000f7f2:	340d      	adds	r4, #13
1000f7f4:	4798      	blx	r3
1000f7f6:	b2a1      	uxth	r1, r4
1000f7f8:	e001      	b.n	1000f7fe <gattc_read_cfm+0x46>
1000f7fa:	210e      	movs	r1, #14
1000f7fc:	735c      	strb	r4, [r3, #13]
1000f7fe:	1c0b      	adds	r3, r1, #0
1000f800:	3b08      	subs	r3, #8
1000f802:	71ab      	strb	r3, [r5, #6]
1000f804:	121b      	asrs	r3, r3, #8
1000f806:	71eb      	strb	r3, [r5, #7]
1000f808:	1c28      	adds	r0, r5, #0
1000f80a:	4b05      	ldr	r3, [pc, #20]	; (1000f820 <gattc_read_cfm+0x68>)
1000f80c:	4798      	blx	r3
1000f80e:	bd38      	pop	{r3, r4, r5, pc}
1000f810:	10016444 	.word	0x10016444
1000f814:	100160d4 	.word	0x100160d4
1000f818:	10016451 	.word	0x10016451
1000f81c:	10010fa7 	.word	0x10010fa7
1000f820:	1000e4f9 	.word	0x1000e4f9

1000f824 <gattc_write_cfm>:
1000f824:	4b0d      	ldr	r3, [pc, #52]	; (1000f85c <gattc_write_cfm+0x38>)
1000f826:	b510      	push	{r4, lr}
1000f828:	729a      	strb	r2, [r3, #10]
1000f82a:	2203      	movs	r2, #3
1000f82c:	2416      	movs	r4, #22
1000f82e:	719a      	strb	r2, [r3, #6]
1000f830:	2200      	movs	r2, #0
1000f832:	70d9      	strb	r1, [r3, #3]
1000f834:	490a      	ldr	r1, [pc, #40]	; (1000f860 <gattc_write_cfm+0x3c>)
1000f836:	701c      	strb	r4, [r3, #0]
1000f838:	3c0a      	subs	r4, #10
1000f83a:	705c      	strb	r4, [r3, #1]
1000f83c:	709c      	strb	r4, [r3, #2]
1000f83e:	880c      	ldrh	r4, [r1, #0]
1000f840:	8809      	ldrh	r1, [r1, #0]
1000f842:	7218      	strb	r0, [r3, #8]
1000f844:	0a09      	lsrs	r1, r1, #8
1000f846:	0a00      	lsrs	r0, r0, #8
1000f848:	711c      	strb	r4, [r3, #4]
1000f84a:	7159      	strb	r1, [r3, #5]
1000f84c:	7258      	strb	r0, [r3, #9]
1000f84e:	71da      	strb	r2, [r3, #7]
1000f850:	1c18      	adds	r0, r3, #0
1000f852:	210b      	movs	r1, #11
1000f854:	4b03      	ldr	r3, [pc, #12]	; (1000f864 <gattc_write_cfm+0x40>)
1000f856:	4798      	blx	r3
1000f858:	bd10      	pop	{r4, pc}
1000f85a:	46c0      	nop			; (mov r8, r8)
1000f85c:	10016444 	.word	0x10016444
1000f860:	100160d4 	.word	0x100160d4
1000f864:	1000e4f9 	.word	0x1000e4f9

1000f868 <gattc_att_info_cfm>:
1000f868:	b538      	push	{r3, r4, r5, lr}
1000f86a:	4c0e      	ldr	r4, [pc, #56]	; (1000f8a4 <gattc_att_info_cfm+0x3c>)
1000f86c:	2518      	movs	r5, #24
1000f86e:	7323      	strb	r3, [r4, #12]
1000f870:	2305      	movs	r3, #5
1000f872:	71a3      	strb	r3, [r4, #6]
1000f874:	2300      	movs	r3, #0
1000f876:	70e1      	strb	r1, [r4, #3]
1000f878:	490b      	ldr	r1, [pc, #44]	; (1000f8a8 <gattc_att_info_cfm+0x40>)
1000f87a:	7025      	strb	r5, [r4, #0]
1000f87c:	3d0c      	subs	r5, #12
1000f87e:	7065      	strb	r5, [r4, #1]
1000f880:	70a5      	strb	r5, [r4, #2]
1000f882:	880d      	ldrh	r5, [r1, #0]
1000f884:	8809      	ldrh	r1, [r1, #0]
1000f886:	7220      	strb	r0, [r4, #8]
1000f888:	0a09      	lsrs	r1, r1, #8
1000f88a:	0a00      	lsrs	r0, r0, #8
1000f88c:	7161      	strb	r1, [r4, #5]
1000f88e:	7260      	strb	r0, [r4, #9]
1000f890:	72a2      	strb	r2, [r4, #10]
1000f892:	71e3      	strb	r3, [r4, #7]
1000f894:	0a12      	lsrs	r2, r2, #8
1000f896:	1c20      	adds	r0, r4, #0
1000f898:	210d      	movs	r1, #13
1000f89a:	4b04      	ldr	r3, [pc, #16]	; (1000f8ac <gattc_att_info_cfm+0x44>)
1000f89c:	7125      	strb	r5, [r4, #4]
1000f89e:	72e2      	strb	r2, [r4, #11]
1000f8a0:	4798      	blx	r3
1000f8a2:	bd38      	pop	{r3, r4, r5, pc}
1000f8a4:	10016444 	.word	0x10016444
1000f8a8:	100160d4 	.word	0x100160d4
1000f8ac:	1000e4f9 	.word	0x1000e4f9

1000f8b0 <gattc_send_evt_cmd_handler>:
1000f8b0:	b570      	push	{r4, r5, r6, lr}
1000f8b2:	2610      	movs	r6, #16
1000f8b4:	ac04      	add	r4, sp, #16
1000f8b6:	8825      	ldrh	r5, [r4, #0]
1000f8b8:	4c15      	ldr	r4, [pc, #84]	; (1000f910 <gattc_send_evt_cmd_handler+0x60>)
1000f8ba:	70e2      	strb	r2, [r4, #3]
1000f8bc:	4a15      	ldr	r2, [pc, #84]	; (1000f914 <gattc_send_evt_cmd_handler+0x64>)
1000f8be:	7026      	strb	r6, [r4, #0]
1000f8c0:	3e04      	subs	r6, #4
1000f8c2:	7066      	strb	r6, [r4, #1]
1000f8c4:	70a6      	strb	r6, [r4, #2]
1000f8c6:	8816      	ldrh	r6, [r2, #0]
1000f8c8:	8812      	ldrh	r2, [r2, #0]
1000f8ca:	7220      	strb	r0, [r4, #8]
1000f8cc:	0a12      	lsrs	r2, r2, #8
1000f8ce:	7162      	strb	r2, [r4, #5]
1000f8d0:	4a11      	ldr	r2, [pc, #68]	; (1000f918 <gattc_send_evt_cmd_handler+0x68>)
1000f8d2:	7321      	strb	r1, [r4, #12]
1000f8d4:	8812      	ldrh	r2, [r2, #0]
1000f8d6:	73a5      	strb	r5, [r4, #14]
1000f8d8:	3201      	adds	r2, #1
1000f8da:	7262      	strb	r2, [r4, #9]
1000f8dc:	1212      	asrs	r2, r2, #8
1000f8de:	72a2      	strb	r2, [r4, #10]
1000f8e0:	2200      	movs	r2, #0
1000f8e2:	72e2      	strb	r2, [r4, #11]
1000f8e4:	0a0a      	lsrs	r2, r1, #8
1000f8e6:	7362      	strb	r2, [r4, #13]
1000f8e8:	0a2a      	lsrs	r2, r5, #8
1000f8ea:	73e2      	strb	r2, [r4, #15]
1000f8ec:	1c19      	adds	r1, r3, #0
1000f8ee:	1c2a      	adds	r2, r5, #0
1000f8f0:	4b0a      	ldr	r3, [pc, #40]	; (1000f91c <gattc_send_evt_cmd_handler+0x6c>)
1000f8f2:	3510      	adds	r5, #16
1000f8f4:	480a      	ldr	r0, [pc, #40]	; (1000f920 <gattc_send_evt_cmd_handler+0x70>)
1000f8f6:	7126      	strb	r6, [r4, #4]
1000f8f8:	4798      	blx	r3
1000f8fa:	b2a9      	uxth	r1, r5
1000f8fc:	1c0b      	adds	r3, r1, #0
1000f8fe:	3b08      	subs	r3, #8
1000f900:	71a3      	strb	r3, [r4, #6]
1000f902:	121b      	asrs	r3, r3, #8
1000f904:	71e3      	strb	r3, [r4, #7]
1000f906:	1c20      	adds	r0, r4, #0
1000f908:	4b06      	ldr	r3, [pc, #24]	; (1000f924 <gattc_send_evt_cmd_handler+0x74>)
1000f90a:	4798      	blx	r3
1000f90c:	bd70      	pop	{r4, r5, r6, pc}
1000f90e:	46c0      	nop			; (mov r8, r8)
1000f910:	10016444 	.word	0x10016444
1000f914:	100160d4 	.word	0x100160d4
1000f918:	100153b8 	.word	0x100153b8
1000f91c:	10010fa7 	.word	0x10010fa7
1000f920:	10016454 	.word	0x10016454
1000f924:	1000e4f9 	.word	0x1000e4f9

1000f928 <gattc_event_cfm_handler>:
1000f928:	220e      	movs	r2, #14
1000f92a:	b508      	push	{r3, lr}
1000f92c:	4b0b      	ldr	r3, [pc, #44]	; (1000f95c <gattc_event_cfm_handler+0x34>)
1000f92e:	701a      	strb	r2, [r3, #0]
1000f930:	3a02      	subs	r2, #2
1000f932:	705a      	strb	r2, [r3, #1]
1000f934:	709a      	strb	r2, [r3, #2]
1000f936:	4a0a      	ldr	r2, [pc, #40]	; (1000f960 <gattc_event_cfm_handler+0x38>)
1000f938:	70d8      	strb	r0, [r3, #3]
1000f93a:	8810      	ldrh	r0, [r2, #0]
1000f93c:	8812      	ldrh	r2, [r2, #0]
1000f93e:	7219      	strb	r1, [r3, #8]
1000f940:	0a12      	lsrs	r2, r2, #8
1000f942:	715a      	strb	r2, [r3, #5]
1000f944:	2202      	movs	r2, #2
1000f946:	719a      	strb	r2, [r3, #6]
1000f948:	2200      	movs	r2, #0
1000f94a:	0a09      	lsrs	r1, r1, #8
1000f94c:	7118      	strb	r0, [r3, #4]
1000f94e:	7259      	strb	r1, [r3, #9]
1000f950:	71da      	strb	r2, [r3, #7]
1000f952:	1c18      	adds	r0, r3, #0
1000f954:	210a      	movs	r1, #10
1000f956:	4b03      	ldr	r3, [pc, #12]	; (1000f964 <gattc_event_cfm_handler+0x3c>)
1000f958:	4798      	blx	r3
1000f95a:	bd08      	pop	{r3, pc}
1000f95c:	10016444 	.word	0x10016444
1000f960:	100160d4 	.word	0x100160d4
1000f964:	1000e4f9 	.word	0x1000e4f9

1000f968 <gattc_disc_svc_ind_parser>:
1000f968:	b570      	push	{r4, r5, r6, lr}
1000f96a:	1c15      	adds	r5, r2, #0
1000f96c:	0a00      	lsrs	r0, r0, #8
1000f96e:	8010      	strh	r0, [r2, #0]
1000f970:	784b      	ldrb	r3, [r1, #1]
1000f972:	780a      	ldrb	r2, [r1, #0]
1000f974:	021b      	lsls	r3, r3, #8
1000f976:	4313      	orrs	r3, r2
1000f978:	806b      	strh	r3, [r5, #2]
1000f97a:	78cb      	ldrb	r3, [r1, #3]
1000f97c:	788a      	ldrb	r2, [r1, #2]
1000f97e:	021b      	lsls	r3, r3, #8
1000f980:	4313      	orrs	r3, r2
1000f982:	80ab      	strh	r3, [r5, #4]
1000f984:	790e      	ldrb	r6, [r1, #4]
1000f986:	4b05      	ldr	r3, [pc, #20]	; (1000f99c <gattc_disc_svc_ind_parser+0x34>)
1000f988:	1c30      	adds	r0, r6, #0
1000f98a:	1c0c      	adds	r4, r1, #0
1000f98c:	4798      	blx	r3
1000f98e:	1c32      	adds	r2, r6, #0
1000f990:	71a8      	strb	r0, [r5, #6]
1000f992:	1d61      	adds	r1, r4, #5
1000f994:	1de8      	adds	r0, r5, #7
1000f996:	4b02      	ldr	r3, [pc, #8]	; (1000f9a0 <gattc_disc_svc_ind_parser+0x38>)
1000f998:	4798      	blx	r3
1000f99a:	bd70      	pop	{r4, r5, r6, pc}
1000f99c:	1000d839 	.word	0x1000d839
1000f9a0:	10010fa7 	.word	0x10010fa7

1000f9a4 <gattc_disc_svc_incl_ind_parser>:
1000f9a4:	b570      	push	{r4, r5, r6, lr}
1000f9a6:	1c15      	adds	r5, r2, #0
1000f9a8:	0a00      	lsrs	r0, r0, #8
1000f9aa:	8010      	strh	r0, [r2, #0]
1000f9ac:	784b      	ldrb	r3, [r1, #1]
1000f9ae:	780a      	ldrb	r2, [r1, #0]
1000f9b0:	021b      	lsls	r3, r3, #8
1000f9b2:	4313      	orrs	r3, r2
1000f9b4:	806b      	strh	r3, [r5, #2]
1000f9b6:	78cb      	ldrb	r3, [r1, #3]
1000f9b8:	788a      	ldrb	r2, [r1, #2]
1000f9ba:	021b      	lsls	r3, r3, #8
1000f9bc:	4313      	orrs	r3, r2
1000f9be:	80ab      	strh	r3, [r5, #4]
1000f9c0:	794b      	ldrb	r3, [r1, #5]
1000f9c2:	790a      	ldrb	r2, [r1, #4]
1000f9c4:	021b      	lsls	r3, r3, #8
1000f9c6:	4313      	orrs	r3, r2
1000f9c8:	80eb      	strh	r3, [r5, #6]
1000f9ca:	798e      	ldrb	r6, [r1, #6]
1000f9cc:	4b05      	ldr	r3, [pc, #20]	; (1000f9e4 <gattc_disc_svc_incl_ind_parser+0x40>)
1000f9ce:	1c30      	adds	r0, r6, #0
1000f9d0:	1c0c      	adds	r4, r1, #0
1000f9d2:	4798      	blx	r3
1000f9d4:	7228      	strb	r0, [r5, #8]
1000f9d6:	1c28      	adds	r0, r5, #0
1000f9d8:	1c32      	adds	r2, r6, #0
1000f9da:	1de1      	adds	r1, r4, #7
1000f9dc:	4b02      	ldr	r3, [pc, #8]	; (1000f9e8 <gattc_disc_svc_incl_ind_parser+0x44>)
1000f9de:	3009      	adds	r0, #9
1000f9e0:	4798      	blx	r3
1000f9e2:	bd70      	pop	{r4, r5, r6, pc}
1000f9e4:	1000d839 	.word	0x1000d839
1000f9e8:	10010fa7 	.word	0x10010fa7

1000f9ec <gattc_disc_char_ind_parser>:
1000f9ec:	b570      	push	{r4, r5, r6, lr}
1000f9ee:	1c15      	adds	r5, r2, #0
1000f9f0:	0a00      	lsrs	r0, r0, #8
1000f9f2:	8010      	strh	r0, [r2, #0]
1000f9f4:	784b      	ldrb	r3, [r1, #1]
1000f9f6:	780a      	ldrb	r2, [r1, #0]
1000f9f8:	021b      	lsls	r3, r3, #8
1000f9fa:	4313      	orrs	r3, r2
1000f9fc:	806b      	strh	r3, [r5, #2]
1000f9fe:	78cb      	ldrb	r3, [r1, #3]
1000fa00:	788a      	ldrb	r2, [r1, #2]
1000fa02:	021b      	lsls	r3, r3, #8
1000fa04:	4313      	orrs	r3, r2
1000fa06:	80ab      	strh	r3, [r5, #4]
1000fa08:	790b      	ldrb	r3, [r1, #4]
1000fa0a:	1c0c      	adds	r4, r1, #0
1000fa0c:	71ab      	strb	r3, [r5, #6]
1000fa0e:	794e      	ldrb	r6, [r1, #5]
1000fa10:	4b05      	ldr	r3, [pc, #20]	; (1000fa28 <gattc_disc_char_ind_parser+0x3c>)
1000fa12:	1c30      	adds	r0, r6, #0
1000fa14:	4798      	blx	r3
1000fa16:	71e8      	strb	r0, [r5, #7]
1000fa18:	1c28      	adds	r0, r5, #0
1000fa1a:	1c32      	adds	r2, r6, #0
1000fa1c:	1da1      	adds	r1, r4, #6
1000fa1e:	4b03      	ldr	r3, [pc, #12]	; (1000fa2c <gattc_disc_char_ind_parser+0x40>)
1000fa20:	3008      	adds	r0, #8
1000fa22:	4798      	blx	r3
1000fa24:	bd70      	pop	{r4, r5, r6, pc}
1000fa26:	46c0      	nop			; (mov r8, r8)
1000fa28:	1000d839 	.word	0x1000d839
1000fa2c:	10010fa7 	.word	0x10010fa7

1000fa30 <gattc_disc_char_desc_ind_parser>:
1000fa30:	b570      	push	{r4, r5, r6, lr}
1000fa32:	1c15      	adds	r5, r2, #0
1000fa34:	0a00      	lsrs	r0, r0, #8
1000fa36:	8010      	strh	r0, [r2, #0]
1000fa38:	784b      	ldrb	r3, [r1, #1]
1000fa3a:	780a      	ldrb	r2, [r1, #0]
1000fa3c:	021b      	lsls	r3, r3, #8
1000fa3e:	4313      	orrs	r3, r2
1000fa40:	806b      	strh	r3, [r5, #2]
1000fa42:	788e      	ldrb	r6, [r1, #2]
1000fa44:	4b05      	ldr	r3, [pc, #20]	; (1000fa5c <gattc_disc_char_desc_ind_parser+0x2c>)
1000fa46:	1c30      	adds	r0, r6, #0
1000fa48:	1c0c      	adds	r4, r1, #0
1000fa4a:	4798      	blx	r3
1000fa4c:	1c32      	adds	r2, r6, #0
1000fa4e:	7128      	strb	r0, [r5, #4]
1000fa50:	1ce1      	adds	r1, r4, #3
1000fa52:	1d68      	adds	r0, r5, #5
1000fa54:	4b02      	ldr	r3, [pc, #8]	; (1000fa60 <gattc_disc_char_desc_ind_parser+0x30>)
1000fa56:	4798      	blx	r3
1000fa58:	bd70      	pop	{r4, r5, r6, pc}
1000fa5a:	46c0      	nop			; (mov r8, r8)
1000fa5c:	1000d839 	.word	0x1000d839
1000fa60:	10010fa7 	.word	0x10010fa7

1000fa64 <gattc_event_ind_and_notification_parser>:
1000fa64:	b510      	push	{r4, lr}
1000fa66:	780c      	ldrb	r4, [r1, #0]
1000fa68:	1c13      	adds	r3, r2, #0
1000fa6a:	2c12      	cmp	r4, #18
1000fa6c:	d10e      	bne.n	1000fa8c <gattc_event_ind_and_notification_parser+0x28>
1000fa6e:	0a00      	lsrs	r0, r0, #8
1000fa70:	8010      	strh	r0, [r2, #0]
1000fa72:	788a      	ldrb	r2, [r1, #2]
1000fa74:	709a      	strb	r2, [r3, #2]
1000fa76:	7948      	ldrb	r0, [r1, #5]
1000fa78:	790c      	ldrb	r4, [r1, #4]
1000fa7a:	0200      	lsls	r0, r0, #8
1000fa7c:	4320      	orrs	r0, r4
1000fa7e:	8098      	strh	r0, [r3, #4]
1000fa80:	3106      	adds	r1, #6
1000fa82:	1d98      	adds	r0, r3, #6
1000fa84:	4b0b      	ldr	r3, [pc, #44]	; (1000fab4 <gattc_event_ind_and_notification_parser+0x50>)
1000fa86:	4798      	blx	r3
1000fa88:	221b      	movs	r2, #27
1000fa8a:	e010      	b.n	1000faae <gattc_event_ind_and_notification_parser+0x4a>
1000fa8c:	2200      	movs	r2, #0
1000fa8e:	2c13      	cmp	r4, #19
1000fa90:	d10d      	bne.n	1000faae <gattc_event_ind_and_notification_parser+0x4a>
1000fa92:	0a00      	lsrs	r0, r0, #8
1000fa94:	8018      	strh	r0, [r3, #0]
1000fa96:	788a      	ldrb	r2, [r1, #2]
1000fa98:	709a      	strb	r2, [r3, #2]
1000fa9a:	7908      	ldrb	r0, [r1, #4]
1000fa9c:	78cc      	ldrb	r4, [r1, #3]
1000fa9e:	0200      	lsls	r0, r0, #8
1000faa0:	4320      	orrs	r0, r4
1000faa2:	8098      	strh	r0, [r3, #4]
1000faa4:	3106      	adds	r1, #6
1000faa6:	1d98      	adds	r0, r3, #6
1000faa8:	4b02      	ldr	r3, [pc, #8]	; (1000fab4 <gattc_event_ind_and_notification_parser+0x50>)
1000faaa:	4798      	blx	r3
1000faac:	221c      	movs	r2, #28
1000faae:	1c10      	adds	r0, r2, #0
1000fab0:	bd10      	pop	{r4, pc}
1000fab2:	46c0      	nop			; (mov r8, r8)
1000fab4:	10010fa7 	.word	0x10010fa7

1000fab8 <gattc_complete_evt_handler>:
1000fab8:	b500      	push	{lr}
1000faba:	0a00      	lsrs	r0, r0, #8
1000fabc:	8010      	strh	r0, [r2, #0]
1000fabe:	7808      	ldrb	r0, [r1, #0]
1000fac0:	7090      	strb	r0, [r2, #2]
1000fac2:	784b      	ldrb	r3, [r1, #1]
1000fac4:	3801      	subs	r0, #1
1000fac6:	70d3      	strb	r3, [r2, #3]
1000fac8:	2813      	cmp	r0, #19
1000faca:	d82c      	bhi.n	1000fb26 <gattc_complete_evt_handler+0x6e>
1000facc:	f000 f9dc 	bl	1000fe88 <__gnu_thumb1_case_uqi>
1000fad0:	0a0a0a0c 	.word	0x0a0a0a0c
1000fad4:	210a0a0a 	.word	0x210a0a0a
1000fad8:	111f2121 	.word	0x111f2121
1000fadc:	2b111111 	.word	0x2b111111
1000fae0:	2919132b 	.word	0x2919132b
1000fae4:	2017      	movs	r0, #23
1000fae6:	e01f      	b.n	1000fb28 <gattc_complete_evt_handler+0x70>
1000fae8:	2024      	movs	r0, #36	; 0x24
1000faea:	2b00      	cmp	r3, #0
1000faec:	d11c      	bne.n	1000fb28 <gattc_complete_evt_handler+0x70>
1000faee:	3017      	adds	r0, #23
1000faf0:	e01a      	b.n	1000fb28 <gattc_complete_evt_handler+0x70>
1000faf2:	2025      	movs	r0, #37	; 0x25
1000faf4:	e018      	b.n	1000fb28 <gattc_complete_evt_handler+0x70>
1000faf6:	4a0d      	ldr	r2, [pc, #52]	; (1000fb2c <gattc_complete_evt_handler+0x74>)
1000faf8:	201d      	movs	r0, #29
1000fafa:	6813      	ldr	r3, [r2, #0]
1000fafc:	3b01      	subs	r3, #1
1000fafe:	6013      	str	r3, [r2, #0]
1000fb00:	e012      	b.n	1000fb28 <gattc_complete_evt_handler+0x70>
1000fb02:	4a0a      	ldr	r2, [pc, #40]	; (1000fb2c <gattc_complete_evt_handler+0x74>)
1000fb04:	201e      	movs	r0, #30
1000fb06:	6813      	ldr	r3, [r2, #0]
1000fb08:	3b01      	subs	r3, #1
1000fb0a:	6013      	str	r3, [r2, #0]
1000fb0c:	e00c      	b.n	1000fb28 <gattc_complete_evt_handler+0x70>
1000fb0e:	2019      	movs	r0, #25
1000fb10:	e00a      	b.n	1000fb28 <gattc_complete_evt_handler+0x70>
1000fb12:	203b      	movs	r0, #59	; 0x3b
1000fb14:	2b00      	cmp	r3, #0
1000fb16:	d007      	beq.n	1000fb28 <gattc_complete_evt_handler+0x70>
1000fb18:	2182      	movs	r1, #130	; 0x82
1000fb1a:	0089      	lsls	r1, r1, #2
1000fb1c:	5453      	strb	r3, [r2, r1]
1000fb1e:	3823      	subs	r0, #35	; 0x23
1000fb20:	e002      	b.n	1000fb28 <gattc_complete_evt_handler+0x70>
1000fb22:	2021      	movs	r0, #33	; 0x21
1000fb24:	e000      	b.n	1000fb28 <gattc_complete_evt_handler+0x70>
1000fb26:	2000      	movs	r0, #0
1000fb28:	bd00      	pop	{pc}
1000fb2a:	46c0      	nop			; (mov r8, r8)
1000fb2c:	100153bc 	.word	0x100153bc

1000fb30 <gattc_event_mtu_changed_ind_parser>:
1000fb30:	0a00      	lsrs	r0, r0, #8
1000fb32:	8010      	strh	r0, [r2, #0]
1000fb34:	784b      	ldrb	r3, [r1, #1]
1000fb36:	7809      	ldrb	r1, [r1, #0]
1000fb38:	021b      	lsls	r3, r3, #8
1000fb3a:	430b      	orrs	r3, r1
1000fb3c:	8053      	strh	r3, [r2, #2]
1000fb3e:	4770      	bx	lr

1000fb40 <gattc_read_ind_parser>:
1000fb40:	0a00      	lsrs	r0, r0, #8
1000fb42:	b508      	push	{r3, lr}
1000fb44:	8010      	strh	r0, [r2, #0]
1000fb46:	1c13      	adds	r3, r2, #0
1000fb48:	2282      	movs	r2, #130	; 0x82
1000fb4a:	2000      	movs	r0, #0
1000fb4c:	0092      	lsls	r2, r2, #2
1000fb4e:	5498      	strb	r0, [r3, r2]
1000fb50:	784a      	ldrb	r2, [r1, #1]
1000fb52:	7808      	ldrb	r0, [r1, #0]
1000fb54:	0212      	lsls	r2, r2, #8
1000fb56:	4302      	orrs	r2, r0
1000fb58:	805a      	strh	r2, [r3, #2]
1000fb5a:	78ca      	ldrb	r2, [r1, #3]
1000fb5c:	7888      	ldrb	r0, [r1, #2]
1000fb5e:	0212      	lsls	r2, r2, #8
1000fb60:	4302      	orrs	r2, r0
1000fb62:	80da      	strh	r2, [r3, #6]
1000fb64:	794a      	ldrb	r2, [r1, #5]
1000fb66:	7908      	ldrb	r0, [r1, #4]
1000fb68:	0212      	lsls	r2, r2, #8
1000fb6a:	4302      	orrs	r2, r0
1000fb6c:	809a      	strh	r2, [r3, #4]
1000fb6e:	3308      	adds	r3, #8
1000fb70:	1c18      	adds	r0, r3, #0
1000fb72:	3106      	adds	r1, #6
1000fb74:	4b01      	ldr	r3, [pc, #4]	; (1000fb7c <gattc_read_ind_parser+0x3c>)
1000fb76:	4798      	blx	r3
1000fb78:	bd08      	pop	{r3, pc}
1000fb7a:	46c0      	nop			; (mov r8, r8)
1000fb7c:	10010fa7 	.word	0x10010fa7

1000fb80 <gattc_svc_changed_cfg_ind_parser>:
1000fb80:	0a00      	lsrs	r0, r0, #8
1000fb82:	8010      	strh	r0, [r2, #0]
1000fb84:	784b      	ldrb	r3, [r1, #1]
1000fb86:	7809      	ldrb	r1, [r1, #0]
1000fb88:	021b      	lsls	r3, r3, #8
1000fb8a:	430b      	orrs	r3, r1
1000fb8c:	8053      	strh	r3, [r2, #2]
1000fb8e:	4770      	bx	lr

1000fb90 <init_gattc_task_module>:
1000fb90:	2300      	movs	r3, #0
1000fb92:	4a02      	ldr	r2, [pc, #8]	; (1000fb9c <init_gattc_task_module+0xc>)
1000fb94:	8013      	strh	r3, [r2, #0]
1000fb96:	4a02      	ldr	r2, [pc, #8]	; (1000fba0 <init_gattc_task_module+0x10>)
1000fb98:	8013      	strh	r3, [r2, #0]
1000fb9a:	4770      	bx	lr
1000fb9c:	100153b6 	.word	0x100153b6
1000fba0:	100153b8 	.word	0x100153b8

1000fba4 <gattm_add_svc_req_handler>:
1000fba4:	2200      	movs	r2, #0
1000fba6:	210b      	movs	r1, #11
1000fba8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fbaa:	1c04      	adds	r4, r0, #0
1000fbac:	7943      	ldrb	r3, [r0, #5]
1000fbae:	b085      	sub	sp, #20
1000fbb0:	9301      	str	r3, [sp, #4]
1000fbb2:	ab02      	add	r3, sp, #8
1000fbb4:	71da      	strb	r2, [r3, #7]
1000fbb6:	4b37      	ldr	r3, [pc, #220]	; (1000fc94 <gattm_add_svc_req_handler+0xf0>)
1000fbb8:	7059      	strb	r1, [r3, #1]
1000fbba:	7099      	strb	r1, [r3, #2]
1000fbbc:	4936      	ldr	r1, [pc, #216]	; (1000fc98 <gattm_add_svc_req_handler+0xf4>)
1000fbbe:	701a      	strb	r2, [r3, #0]
1000fbc0:	8808      	ldrh	r0, [r1, #0]
1000fbc2:	8809      	ldrh	r1, [r1, #0]
1000fbc4:	70da      	strb	r2, [r3, #3]
1000fbc6:	0a09      	lsrs	r1, r1, #8
1000fbc8:	7118      	strb	r0, [r3, #4]
1000fbca:	7159      	strb	r1, [r3, #5]
1000fbcc:	8821      	ldrh	r1, [r4, #0]
1000fbce:	7219      	strb	r1, [r3, #8]
1000fbd0:	8821      	ldrh	r1, [r4, #0]
1000fbd2:	0a09      	lsrs	r1, r1, #8
1000fbd4:	7259      	strb	r1, [r3, #9]
1000fbd6:	8861      	ldrh	r1, [r4, #2]
1000fbd8:	7299      	strb	r1, [r3, #10]
1000fbda:	8861      	ldrh	r1, [r4, #2]
1000fbdc:	0a09      	lsrs	r1, r1, #8
1000fbde:	72d9      	strb	r1, [r3, #11]
1000fbe0:	7921      	ldrb	r1, [r4, #4]
1000fbe2:	7319      	strb	r1, [r3, #12]
1000fbe4:	4669      	mov	r1, sp
1000fbe6:	7909      	ldrb	r1, [r1, #4]
1000fbe8:	7359      	strb	r1, [r3, #13]
1000fbea:	18a1      	adds	r1, r4, r2
1000fbec:	7988      	ldrb	r0, [r1, #6]
1000fbee:	1899      	adds	r1, r3, r2
1000fbf0:	3201      	adds	r2, #1
1000fbf2:	7388      	strb	r0, [r1, #14]
1000fbf4:	2a10      	cmp	r2, #16
1000fbf6:	d1f8      	bne.n	1000fbea <gattm_add_svc_req_handler+0x46>
1000fbf8:	1c27      	adds	r7, r4, #0
1000fbfa:	2300      	movs	r3, #0
1000fbfc:	251e      	movs	r5, #30
1000fbfe:	3716      	adds	r7, #22
1000fc00:	9300      	str	r3, [sp, #0]
1000fc02:	9b00      	ldr	r3, [sp, #0]
1000fc04:	9a01      	ldr	r2, [sp, #4]
1000fc06:	4e23      	ldr	r6, [pc, #140]	; (1000fc94 <gattm_add_svc_req_handler+0xf0>)
1000fc08:	4293      	cmp	r3, r2
1000fc0a:	da21      	bge.n	1000fc50 <gattm_add_svc_req_handler+0xac>
1000fc0c:	1c39      	adds	r1, r7, #0
1000fc0e:	1970      	adds	r0, r6, r5
1000fc10:	2210      	movs	r2, #16
1000fc12:	4b22      	ldr	r3, [pc, #136]	; (1000fc9c <gattm_add_svc_req_handler+0xf8>)
1000fc14:	4798      	blx	r3
1000fc16:	1c2b      	adds	r3, r5, #0
1000fc18:	8a3a      	ldrh	r2, [r7, #16]
1000fc1a:	3310      	adds	r3, #16
1000fc1c:	b29b      	uxth	r3, r3
1000fc1e:	54f2      	strb	r2, [r6, r3]
1000fc20:	1c2b      	adds	r3, r5, #0
1000fc22:	8a3a      	ldrh	r2, [r7, #16]
1000fc24:	3311      	adds	r3, #17
1000fc26:	b29b      	uxth	r3, r3
1000fc28:	0a12      	lsrs	r2, r2, #8
1000fc2a:	54f2      	strb	r2, [r6, r3]
1000fc2c:	1c2a      	adds	r2, r5, #0
1000fc2e:	1c2b      	adds	r3, r5, #0
1000fc30:	8a79      	ldrh	r1, [r7, #18]
1000fc32:	3212      	adds	r2, #18
1000fc34:	b292      	uxth	r2, r2
1000fc36:	54b1      	strb	r1, [r6, r2]
1000fc38:	8a7a      	ldrh	r2, [r7, #18]
1000fc3a:	3313      	adds	r3, #19
1000fc3c:	b29b      	uxth	r3, r3
1000fc3e:	0a12      	lsrs	r2, r2, #8
1000fc40:	54f2      	strb	r2, [r6, r3]
1000fc42:	9b00      	ldr	r3, [sp, #0]
1000fc44:	3514      	adds	r5, #20
1000fc46:	3301      	adds	r3, #1
1000fc48:	b2ad      	uxth	r5, r5
1000fc4a:	9300      	str	r3, [sp, #0]
1000fc4c:	3714      	adds	r7, #20
1000fc4e:	e7d8      	b.n	1000fc02 <gattm_add_svc_req_handler+0x5e>
1000fc50:	2114      	movs	r1, #20
1000fc52:	4d13      	ldr	r5, [pc, #76]	; (1000fca0 <gattm_add_svc_req_handler+0xfc>)
1000fc54:	4b13      	ldr	r3, [pc, #76]	; (1000fca4 <gattm_add_svc_req_handler+0x100>)
1000fc56:	4351      	muls	r1, r2
1000fc58:	802b      	strh	r3, [r5, #0]
1000fc5a:	230b      	movs	r3, #11
1000fc5c:	311e      	adds	r1, #30
1000fc5e:	80ab      	strh	r3, [r5, #4]
1000fc60:	1c0b      	adds	r3, r1, #0
1000fc62:	3b08      	subs	r3, #8
1000fc64:	71b3      	strb	r3, [r6, #6]
1000fc66:	121b      	asrs	r3, r3, #8
1000fc68:	71f3      	strb	r3, [r6, #7]
1000fc6a:	1c30      	adds	r0, r6, #0
1000fc6c:	4b0e      	ldr	r3, [pc, #56]	; (1000fca8 <gattm_add_svc_req_handler+0x104>)
1000fc6e:	4798      	blx	r3
1000fc70:	ab02      	add	r3, sp, #8
1000fc72:	1dde      	adds	r6, r3, #7
1000fc74:	1c30      	adds	r0, r6, #0
1000fc76:	4b0d      	ldr	r3, [pc, #52]	; (1000fcac <gattm_add_svc_req_handler+0x108>)
1000fc78:	4798      	blx	r3
1000fc7a:	7833      	ldrb	r3, [r6, #0]
1000fc7c:	20e2      	movs	r0, #226	; 0xe2
1000fc7e:	2b00      	cmp	r3, #0
1000fc80:	d106      	bne.n	1000fc90 <gattm_add_svc_req_handler+0xec>
1000fc82:	68aa      	ldr	r2, [r5, #8]
1000fc84:	7853      	ldrb	r3, [r2, #1]
1000fc86:	7811      	ldrb	r1, [r2, #0]
1000fc88:	021b      	lsls	r3, r3, #8
1000fc8a:	430b      	orrs	r3, r1
1000fc8c:	8023      	strh	r3, [r4, #0]
1000fc8e:	7890      	ldrb	r0, [r2, #2]
1000fc90:	b005      	add	sp, #20
1000fc92:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fc94:	10016444 	.word	0x10016444
1000fc98:	100160d4 	.word	0x100160d4
1000fc9c:	10010fa7 	.word	0x10010fa7
1000fca0:	100160c8 	.word	0x100160c8
1000fca4:	00000b01 	.word	0x00000b01
1000fca8:	1000e4f9 	.word	0x1000e4f9
1000fcac:	1000e55d 	.word	0x1000e55d

1000fcb0 <gattm_add_attribute_req_handler>:
1000fcb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fcb2:	1c1f      	adds	r7, r3, #0
1000fcb4:	4b16      	ldr	r3, [pc, #88]	; (1000fd10 <gattm_add_attribute_req_handler+0x60>)
1000fcb6:	9100      	str	r1, [sp, #0]
1000fcb8:	9201      	str	r2, [sp, #4]
1000fcba:	1c05      	adds	r5, r0, #0
1000fcbc:	7946      	ldrb	r6, [r0, #5]
1000fcbe:	6818      	ldr	r0, [r3, #0]
1000fcc0:	2114      	movs	r1, #20
1000fcc2:	4b14      	ldr	r3, [pc, #80]	; (1000fd14 <gattm_add_attribute_req_handler+0x64>)
1000fcc4:	382a      	subs	r0, #42	; 0x2a
1000fcc6:	4798      	blx	r3
1000fcc8:	2311      	movs	r3, #17
1000fcca:	4286      	cmp	r6, r0
1000fccc:	d21e      	bcs.n	1000fd0c <gattm_add_attribute_req_handler+0x5c>
1000fcce:	2414      	movs	r4, #20
1000fcd0:	4366      	muls	r6, r4
1000fcd2:	19a8      	adds	r0, r5, r6
1000fcd4:	2100      	movs	r1, #0
1000fcd6:	2210      	movs	r2, #16
1000fcd8:	4b0f      	ldr	r3, [pc, #60]	; (1000fd18 <gattm_add_attribute_req_handler+0x68>)
1000fcda:	3016      	adds	r0, #22
1000fcdc:	4798      	blx	r3
1000fcde:	7968      	ldrb	r0, [r5, #5]
1000fce0:	1c3a      	adds	r2, r7, #0
1000fce2:	4360      	muls	r0, r4
1000fce4:	1828      	adds	r0, r5, r0
1000fce6:	4b0d      	ldr	r3, [pc, #52]	; (1000fd1c <gattm_add_attribute_req_handler+0x6c>)
1000fce8:	3016      	adds	r0, #22
1000fcea:	9908      	ldr	r1, [sp, #32]
1000fcec:	4798      	blx	r3
1000fcee:	466a      	mov	r2, sp
1000fcf0:	796b      	ldrb	r3, [r5, #5]
1000fcf2:	8812      	ldrh	r2, [r2, #0]
1000fcf4:	435c      	muls	r4, r3
1000fcf6:	192c      	adds	r4, r5, r4
1000fcf8:	8522      	strh	r2, [r4, #40]	; 0x28
1000fcfa:	466a      	mov	r2, sp
1000fcfc:	8892      	ldrh	r2, [r2, #4]
1000fcfe:	84e2      	strh	r2, [r4, #38]	; 0x26
1000fd00:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000fd02:	8013      	strh	r3, [r2, #0]
1000fd04:	796b      	ldrb	r3, [r5, #5]
1000fd06:	3301      	adds	r3, #1
1000fd08:	716b      	strb	r3, [r5, #5]
1000fd0a:	2300      	movs	r3, #0
1000fd0c:	1c18      	adds	r0, r3, #0
1000fd0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000fd10:	1001532c 	.word	0x1001532c
1000fd14:	1000fe9d 	.word	0x1000fe9d
1000fd18:	10010fb9 	.word	0x10010fb9
1000fd1c:	10010fa7 	.word	0x10010fa7

1000fd20 <gattm_att_set_value_req_handler>:
1000fd20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fd22:	466b      	mov	r3, sp
1000fd24:	1dde      	adds	r6, r3, #7
1000fd26:	2300      	movs	r3, #0
1000fd28:	1c0d      	adds	r5, r1, #0
1000fd2a:	210c      	movs	r1, #12
1000fd2c:	270b      	movs	r7, #11
1000fd2e:	4c17      	ldr	r4, [pc, #92]	; (1000fd8c <gattm_att_set_value_req_handler+0x6c>)
1000fd30:	7033      	strb	r3, [r6, #0]
1000fd32:	70e3      	strb	r3, [r4, #3]
1000fd34:	4b16      	ldr	r3, [pc, #88]	; (1000fd90 <gattm_att_set_value_req_handler+0x70>)
1000fd36:	7021      	strb	r1, [r4, #0]
1000fd38:	8819      	ldrh	r1, [r3, #0]
1000fd3a:	881b      	ldrh	r3, [r3, #0]
1000fd3c:	7220      	strb	r0, [r4, #8]
1000fd3e:	0a1b      	lsrs	r3, r3, #8
1000fd40:	7163      	strb	r3, [r4, #5]
1000fd42:	0a00      	lsrs	r0, r0, #8
1000fd44:	0a2b      	lsrs	r3, r5, #8
1000fd46:	7121      	strb	r1, [r4, #4]
1000fd48:	7260      	strb	r0, [r4, #9]
1000fd4a:	1c11      	adds	r1, r2, #0
1000fd4c:	72a5      	strb	r5, [r4, #10]
1000fd4e:	1c2a      	adds	r2, r5, #0
1000fd50:	72e3      	strb	r3, [r4, #11]
1000fd52:	350c      	adds	r5, #12
1000fd54:	4b0f      	ldr	r3, [pc, #60]	; (1000fd94 <gattm_att_set_value_req_handler+0x74>)
1000fd56:	4810      	ldr	r0, [pc, #64]	; (1000fd98 <gattm_att_set_value_req_handler+0x78>)
1000fd58:	7067      	strb	r7, [r4, #1]
1000fd5a:	70a7      	strb	r7, [r4, #2]
1000fd5c:	4798      	blx	r3
1000fd5e:	b2a9      	uxth	r1, r5
1000fd60:	4b0e      	ldr	r3, [pc, #56]	; (1000fd9c <gattm_att_set_value_req_handler+0x7c>)
1000fd62:	4d0f      	ldr	r5, [pc, #60]	; (1000fda0 <gattm_att_set_value_req_handler+0x80>)
1000fd64:	1c20      	adds	r0, r4, #0
1000fd66:	802b      	strh	r3, [r5, #0]
1000fd68:	1c0b      	adds	r3, r1, #0
1000fd6a:	3b08      	subs	r3, #8
1000fd6c:	71a3      	strb	r3, [r4, #6]
1000fd6e:	121b      	asrs	r3, r3, #8
1000fd70:	71e3      	strb	r3, [r4, #7]
1000fd72:	4b0c      	ldr	r3, [pc, #48]	; (1000fda4 <gattm_att_set_value_req_handler+0x84>)
1000fd74:	80af      	strh	r7, [r5, #4]
1000fd76:	4798      	blx	r3
1000fd78:	1c30      	adds	r0, r6, #0
1000fd7a:	4b0b      	ldr	r3, [pc, #44]	; (1000fda8 <gattm_att_set_value_req_handler+0x88>)
1000fd7c:	4798      	blx	r3
1000fd7e:	7833      	ldrb	r3, [r6, #0]
1000fd80:	20e2      	movs	r0, #226	; 0xe2
1000fd82:	2b00      	cmp	r3, #0
1000fd84:	d101      	bne.n	1000fd8a <gattm_att_set_value_req_handler+0x6a>
1000fd86:	68ab      	ldr	r3, [r5, #8]
1000fd88:	7898      	ldrb	r0, [r3, #2]
1000fd8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000fd8c:	10016444 	.word	0x10016444
1000fd90:	100160d4 	.word	0x100160d4
1000fd94:	10010fa7 	.word	0x10010fa7
1000fd98:	10016450 	.word	0x10016450
1000fd9c:	00000b0d 	.word	0x00000b0d
1000fda0:	100160c8 	.word	0x100160c8
1000fda4:	1000e4f9 	.word	0x1000e4f9
1000fda8:	1000e55d 	.word	0x1000e55d

1000fdac <gattm_att_get_value_req_handler>:
1000fdac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fdae:	b085      	sub	sp, #20
1000fdb0:	9201      	str	r2, [sp, #4]
1000fdb2:	220a      	movs	r2, #10
1000fdb4:	1c04      	adds	r4, r0, #0
1000fdb6:	481d      	ldr	r0, [pc, #116]	; (1000fe2c <gattm_att_get_value_req_handler+0x80>)
1000fdb8:	ab02      	add	r3, sp, #8
1000fdba:	1dde      	adds	r6, r3, #7
1000fdbc:	7002      	strb	r2, [r0, #0]
1000fdbe:	2300      	movs	r3, #0
1000fdc0:	220b      	movs	r2, #11
1000fdc2:	4d1b      	ldr	r5, [pc, #108]	; (1000fe30 <gattm_att_get_value_req_handler+0x84>)
1000fdc4:	1c0f      	adds	r7, r1, #0
1000fdc6:	8829      	ldrh	r1, [r5, #0]
1000fdc8:	882d      	ldrh	r5, [r5, #0]
1000fdca:	7101      	strb	r1, [r0, #4]
1000fdcc:	0a2d      	lsrs	r5, r5, #8
1000fdce:	7145      	strb	r5, [r0, #5]
1000fdd0:	0a25      	lsrs	r5, r4, #8
1000fdd2:	7245      	strb	r5, [r0, #9]
1000fdd4:	4917      	ldr	r1, [pc, #92]	; (1000fe34 <gattm_att_get_value_req_handler+0x88>)
1000fdd6:	4d18      	ldr	r5, [pc, #96]	; (1000fe38 <gattm_att_get_value_req_handler+0x8c>)
1000fdd8:	7033      	strb	r3, [r6, #0]
1000fdda:	7042      	strb	r2, [r0, #1]
1000fddc:	7082      	strb	r2, [r0, #2]
1000fdde:	70c3      	strb	r3, [r0, #3]
1000fde0:	8029      	strh	r1, [r5, #0]
1000fde2:	80aa      	strh	r2, [r5, #4]
1000fde4:	71c3      	strb	r3, [r0, #7]
1000fde6:	3a09      	subs	r2, #9
1000fde8:	210a      	movs	r1, #10
1000fdea:	4b14      	ldr	r3, [pc, #80]	; (1000fe3c <gattm_att_get_value_req_handler+0x90>)
1000fdec:	7182      	strb	r2, [r0, #6]
1000fdee:	7204      	strb	r4, [r0, #8]
1000fdf0:	4798      	blx	r3
1000fdf2:	1c30      	adds	r0, r6, #0
1000fdf4:	4b12      	ldr	r3, [pc, #72]	; (1000fe40 <gattm_att_get_value_req_handler+0x94>)
1000fdf6:	4798      	blx	r3
1000fdf8:	7833      	ldrb	r3, [r6, #0]
1000fdfa:	20e2      	movs	r0, #226	; 0xe2
1000fdfc:	2b00      	cmp	r3, #0
1000fdfe:	d112      	bne.n	1000fe26 <gattm_att_get_value_req_handler+0x7a>
1000fe00:	68a9      	ldr	r1, [r5, #8]
1000fe02:	9801      	ldr	r0, [sp, #4]
1000fe04:	784d      	ldrb	r5, [r1, #1]
1000fe06:	780b      	ldrb	r3, [r1, #0]
1000fe08:	78ca      	ldrb	r2, [r1, #3]
1000fe0a:	022d      	lsls	r5, r5, #8
1000fe0c:	431d      	orrs	r5, r3
1000fe0e:	788b      	ldrb	r3, [r1, #2]
1000fe10:	0212      	lsls	r2, r2, #8
1000fe12:	431a      	orrs	r2, r3
1000fe14:	803a      	strh	r2, [r7, #0]
1000fe16:	790e      	ldrb	r6, [r1, #4]
1000fe18:	4b0a      	ldr	r3, [pc, #40]	; (1000fe44 <gattm_att_get_value_req_handler+0x98>)
1000fe1a:	3105      	adds	r1, #5
1000fe1c:	4798      	blx	r3
1000fe1e:	20e2      	movs	r0, #226	; 0xe2
1000fe20:	42ac      	cmp	r4, r5
1000fe22:	d100      	bne.n	1000fe26 <gattm_att_get_value_req_handler+0x7a>
1000fe24:	1c30      	adds	r0, r6, #0
1000fe26:	b005      	add	sp, #20
1000fe28:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fe2a:	46c0      	nop			; (mov r8, r8)
1000fe2c:	10016444 	.word	0x10016444
1000fe30:	100160d4 	.word	0x100160d4
1000fe34:	00000b0b 	.word	0x00000b0b
1000fe38:	100160c8 	.word	0x100160c8
1000fe3c:	1000e4f9 	.word	0x1000e4f9
1000fe40:	1000e55d 	.word	0x1000e55d
1000fe44:	10010fa7 	.word	0x10010fa7

1000fe48 <htpt_enable_rsp_handler>:
1000fe48:	780b      	ldrb	r3, [r1, #0]
1000fe4a:	7013      	strb	r3, [r2, #0]
1000fe4c:	784b      	ldrb	r3, [r1, #1]
1000fe4e:	7053      	strb	r3, [r2, #1]
1000fe50:	4770      	bx	lr

1000fe52 <htpt_temp_send_rsp_handler>:
1000fe52:	780b      	ldrb	r3, [r1, #0]
1000fe54:	7013      	strb	r3, [r2, #0]
1000fe56:	4770      	bx	lr

1000fe58 <htpt_meas_intv_upd_rsp_handler>:
1000fe58:	780b      	ldrb	r3, [r1, #0]
1000fe5a:	7013      	strb	r3, [r2, #0]
1000fe5c:	4770      	bx	lr

1000fe5e <htpt_meas_intv_chg_req_ind_handler>:
1000fe5e:	78cb      	ldrb	r3, [r1, #3]
1000fe60:	7889      	ldrb	r1, [r1, #2]
1000fe62:	021b      	lsls	r3, r3, #8
1000fe64:	430b      	orrs	r3, r1
1000fe66:	8013      	strh	r3, [r2, #0]
1000fe68:	4770      	bx	lr

1000fe6a <htpt_cfg_indntf_ind_handler>:
1000fe6a:	780b      	ldrb	r3, [r1, #0]
1000fe6c:	7013      	strb	r3, [r2, #0]
1000fe6e:	784b      	ldrb	r3, [r1, #1]
1000fe70:	7053      	strb	r3, [r2, #1]
1000fe72:	4770      	bx	lr

1000fe74 <__gnu_thumb1_case_sqi>:
1000fe74:	b402      	push	{r1}
1000fe76:	4671      	mov	r1, lr
1000fe78:	0849      	lsrs	r1, r1, #1
1000fe7a:	0049      	lsls	r1, r1, #1
1000fe7c:	5609      	ldrsb	r1, [r1, r0]
1000fe7e:	0049      	lsls	r1, r1, #1
1000fe80:	448e      	add	lr, r1
1000fe82:	bc02      	pop	{r1}
1000fe84:	4770      	bx	lr
1000fe86:	46c0      	nop			; (mov r8, r8)

1000fe88 <__gnu_thumb1_case_uqi>:
1000fe88:	b402      	push	{r1}
1000fe8a:	4671      	mov	r1, lr
1000fe8c:	0849      	lsrs	r1, r1, #1
1000fe8e:	0049      	lsls	r1, r1, #1
1000fe90:	5c09      	ldrb	r1, [r1, r0]
1000fe92:	0049      	lsls	r1, r1, #1
1000fe94:	448e      	add	lr, r1
1000fe96:	bc02      	pop	{r1}
1000fe98:	4770      	bx	lr
1000fe9a:	46c0      	nop			; (mov r8, r8)

1000fe9c <__aeabi_uidiv>:
1000fe9c:	2200      	movs	r2, #0
1000fe9e:	0843      	lsrs	r3, r0, #1
1000fea0:	428b      	cmp	r3, r1
1000fea2:	d374      	bcc.n	1000ff8e <__aeabi_uidiv+0xf2>
1000fea4:	0903      	lsrs	r3, r0, #4
1000fea6:	428b      	cmp	r3, r1
1000fea8:	d35f      	bcc.n	1000ff6a <__aeabi_uidiv+0xce>
1000feaa:	0a03      	lsrs	r3, r0, #8
1000feac:	428b      	cmp	r3, r1
1000feae:	d344      	bcc.n	1000ff3a <__aeabi_uidiv+0x9e>
1000feb0:	0b03      	lsrs	r3, r0, #12
1000feb2:	428b      	cmp	r3, r1
1000feb4:	d328      	bcc.n	1000ff08 <__aeabi_uidiv+0x6c>
1000feb6:	0c03      	lsrs	r3, r0, #16
1000feb8:	428b      	cmp	r3, r1
1000feba:	d30d      	bcc.n	1000fed8 <__aeabi_uidiv+0x3c>
1000febc:	22ff      	movs	r2, #255	; 0xff
1000febe:	0209      	lsls	r1, r1, #8
1000fec0:	ba12      	rev	r2, r2
1000fec2:	0c03      	lsrs	r3, r0, #16
1000fec4:	428b      	cmp	r3, r1
1000fec6:	d302      	bcc.n	1000fece <__aeabi_uidiv+0x32>
1000fec8:	1212      	asrs	r2, r2, #8
1000feca:	0209      	lsls	r1, r1, #8
1000fecc:	d065      	beq.n	1000ff9a <__aeabi_uidiv+0xfe>
1000fece:	0b03      	lsrs	r3, r0, #12
1000fed0:	428b      	cmp	r3, r1
1000fed2:	d319      	bcc.n	1000ff08 <__aeabi_uidiv+0x6c>
1000fed4:	e000      	b.n	1000fed8 <__aeabi_uidiv+0x3c>
1000fed6:	0a09      	lsrs	r1, r1, #8
1000fed8:	0bc3      	lsrs	r3, r0, #15
1000feda:	428b      	cmp	r3, r1
1000fedc:	d301      	bcc.n	1000fee2 <__aeabi_uidiv+0x46>
1000fede:	03cb      	lsls	r3, r1, #15
1000fee0:	1ac0      	subs	r0, r0, r3
1000fee2:	4152      	adcs	r2, r2
1000fee4:	0b83      	lsrs	r3, r0, #14
1000fee6:	428b      	cmp	r3, r1
1000fee8:	d301      	bcc.n	1000feee <__aeabi_uidiv+0x52>
1000feea:	038b      	lsls	r3, r1, #14
1000feec:	1ac0      	subs	r0, r0, r3
1000feee:	4152      	adcs	r2, r2
1000fef0:	0b43      	lsrs	r3, r0, #13
1000fef2:	428b      	cmp	r3, r1
1000fef4:	d301      	bcc.n	1000fefa <__aeabi_uidiv+0x5e>
1000fef6:	034b      	lsls	r3, r1, #13
1000fef8:	1ac0      	subs	r0, r0, r3
1000fefa:	4152      	adcs	r2, r2
1000fefc:	0b03      	lsrs	r3, r0, #12
1000fefe:	428b      	cmp	r3, r1
1000ff00:	d301      	bcc.n	1000ff06 <__aeabi_uidiv+0x6a>
1000ff02:	030b      	lsls	r3, r1, #12
1000ff04:	1ac0      	subs	r0, r0, r3
1000ff06:	4152      	adcs	r2, r2
1000ff08:	0ac3      	lsrs	r3, r0, #11
1000ff0a:	428b      	cmp	r3, r1
1000ff0c:	d301      	bcc.n	1000ff12 <__aeabi_uidiv+0x76>
1000ff0e:	02cb      	lsls	r3, r1, #11
1000ff10:	1ac0      	subs	r0, r0, r3
1000ff12:	4152      	adcs	r2, r2
1000ff14:	0a83      	lsrs	r3, r0, #10
1000ff16:	428b      	cmp	r3, r1
1000ff18:	d301      	bcc.n	1000ff1e <__aeabi_uidiv+0x82>
1000ff1a:	028b      	lsls	r3, r1, #10
1000ff1c:	1ac0      	subs	r0, r0, r3
1000ff1e:	4152      	adcs	r2, r2
1000ff20:	0a43      	lsrs	r3, r0, #9
1000ff22:	428b      	cmp	r3, r1
1000ff24:	d301      	bcc.n	1000ff2a <__aeabi_uidiv+0x8e>
1000ff26:	024b      	lsls	r3, r1, #9
1000ff28:	1ac0      	subs	r0, r0, r3
1000ff2a:	4152      	adcs	r2, r2
1000ff2c:	0a03      	lsrs	r3, r0, #8
1000ff2e:	428b      	cmp	r3, r1
1000ff30:	d301      	bcc.n	1000ff36 <__aeabi_uidiv+0x9a>
1000ff32:	020b      	lsls	r3, r1, #8
1000ff34:	1ac0      	subs	r0, r0, r3
1000ff36:	4152      	adcs	r2, r2
1000ff38:	d2cd      	bcs.n	1000fed6 <__aeabi_uidiv+0x3a>
1000ff3a:	09c3      	lsrs	r3, r0, #7
1000ff3c:	428b      	cmp	r3, r1
1000ff3e:	d301      	bcc.n	1000ff44 <__aeabi_uidiv+0xa8>
1000ff40:	01cb      	lsls	r3, r1, #7
1000ff42:	1ac0      	subs	r0, r0, r3
1000ff44:	4152      	adcs	r2, r2
1000ff46:	0983      	lsrs	r3, r0, #6
1000ff48:	428b      	cmp	r3, r1
1000ff4a:	d301      	bcc.n	1000ff50 <__aeabi_uidiv+0xb4>
1000ff4c:	018b      	lsls	r3, r1, #6
1000ff4e:	1ac0      	subs	r0, r0, r3
1000ff50:	4152      	adcs	r2, r2
1000ff52:	0943      	lsrs	r3, r0, #5
1000ff54:	428b      	cmp	r3, r1
1000ff56:	d301      	bcc.n	1000ff5c <__aeabi_uidiv+0xc0>
1000ff58:	014b      	lsls	r3, r1, #5
1000ff5a:	1ac0      	subs	r0, r0, r3
1000ff5c:	4152      	adcs	r2, r2
1000ff5e:	0903      	lsrs	r3, r0, #4
1000ff60:	428b      	cmp	r3, r1
1000ff62:	d301      	bcc.n	1000ff68 <__aeabi_uidiv+0xcc>
1000ff64:	010b      	lsls	r3, r1, #4
1000ff66:	1ac0      	subs	r0, r0, r3
1000ff68:	4152      	adcs	r2, r2
1000ff6a:	08c3      	lsrs	r3, r0, #3
1000ff6c:	428b      	cmp	r3, r1
1000ff6e:	d301      	bcc.n	1000ff74 <__aeabi_uidiv+0xd8>
1000ff70:	00cb      	lsls	r3, r1, #3
1000ff72:	1ac0      	subs	r0, r0, r3
1000ff74:	4152      	adcs	r2, r2
1000ff76:	0883      	lsrs	r3, r0, #2
1000ff78:	428b      	cmp	r3, r1
1000ff7a:	d301      	bcc.n	1000ff80 <__aeabi_uidiv+0xe4>
1000ff7c:	008b      	lsls	r3, r1, #2
1000ff7e:	1ac0      	subs	r0, r0, r3
1000ff80:	4152      	adcs	r2, r2
1000ff82:	0843      	lsrs	r3, r0, #1
1000ff84:	428b      	cmp	r3, r1
1000ff86:	d301      	bcc.n	1000ff8c <__aeabi_uidiv+0xf0>
1000ff88:	004b      	lsls	r3, r1, #1
1000ff8a:	1ac0      	subs	r0, r0, r3
1000ff8c:	4152      	adcs	r2, r2
1000ff8e:	1a41      	subs	r1, r0, r1
1000ff90:	d200      	bcs.n	1000ff94 <__aeabi_uidiv+0xf8>
1000ff92:	4601      	mov	r1, r0
1000ff94:	4152      	adcs	r2, r2
1000ff96:	4610      	mov	r0, r2
1000ff98:	4770      	bx	lr
1000ff9a:	e7ff      	b.n	1000ff9c <__aeabi_uidiv+0x100>
1000ff9c:	b501      	push	{r0, lr}
1000ff9e:	2000      	movs	r0, #0
1000ffa0:	f000 f806 	bl	1000ffb0 <__aeabi_idiv0>
1000ffa4:	bd02      	pop	{r1, pc}
1000ffa6:	46c0      	nop			; (mov r8, r8)

1000ffa8 <__aeabi_uidivmod>:
1000ffa8:	2900      	cmp	r1, #0
1000ffaa:	d0f7      	beq.n	1000ff9c <__aeabi_uidiv+0x100>
1000ffac:	e776      	b.n	1000fe9c <__aeabi_uidiv>
1000ffae:	4770      	bx	lr

1000ffb0 <__aeabi_idiv0>:
1000ffb0:	4770      	bx	lr
1000ffb2:	46c0      	nop			; (mov r8, r8)

1000ffb4 <__aeabi_d2uiz>:
1000ffb4:	b570      	push	{r4, r5, r6, lr}
1000ffb6:	2200      	movs	r2, #0
1000ffb8:	4b0c      	ldr	r3, [pc, #48]	; (1000ffec <__aeabi_d2uiz+0x38>)
1000ffba:	0004      	movs	r4, r0
1000ffbc:	000d      	movs	r5, r1
1000ffbe:	f000 fe87 	bl	10010cd0 <__aeabi_dcmpge>
1000ffc2:	2800      	cmp	r0, #0
1000ffc4:	d104      	bne.n	1000ffd0 <__aeabi_d2uiz+0x1c>
1000ffc6:	0020      	movs	r0, r4
1000ffc8:	0029      	movs	r1, r5
1000ffca:	f000 fddf 	bl	10010b8c <__aeabi_d2iz>
1000ffce:	bd70      	pop	{r4, r5, r6, pc}
1000ffd0:	4b06      	ldr	r3, [pc, #24]	; (1000ffec <__aeabi_d2uiz+0x38>)
1000ffd2:	2200      	movs	r2, #0
1000ffd4:	0020      	movs	r0, r4
1000ffd6:	0029      	movs	r1, r5
1000ffd8:	f000 fa84 	bl	100104e4 <__aeabi_dsub>
1000ffdc:	f000 fdd6 	bl	10010b8c <__aeabi_d2iz>
1000ffe0:	2380      	movs	r3, #128	; 0x80
1000ffe2:	061b      	lsls	r3, r3, #24
1000ffe4:	469c      	mov	ip, r3
1000ffe6:	4460      	add	r0, ip
1000ffe8:	e7f1      	b.n	1000ffce <__aeabi_d2uiz+0x1a>
1000ffea:	46c0      	nop			; (mov r8, r8)
1000ffec:	41e00000 	.word	0x41e00000

1000fff0 <__aeabi_dmul>:
1000fff0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fff2:	465f      	mov	r7, fp
1000fff4:	4656      	mov	r6, sl
1000fff6:	464d      	mov	r5, r9
1000fff8:	4644      	mov	r4, r8
1000fffa:	b4f0      	push	{r4, r5, r6, r7}
1000fffc:	030d      	lsls	r5, r1, #12
1000fffe:	4699      	mov	r9, r3
10010000:	004e      	lsls	r6, r1, #1
10010002:	0b2b      	lsrs	r3, r5, #12
10010004:	b087      	sub	sp, #28
10010006:	0007      	movs	r7, r0
10010008:	4692      	mov	sl, r2
1001000a:	4680      	mov	r8, r0
1001000c:	469b      	mov	fp, r3
1001000e:	0d76      	lsrs	r6, r6, #21
10010010:	0fcc      	lsrs	r4, r1, #31
10010012:	2e00      	cmp	r6, #0
10010014:	d069      	beq.n	100100ea <__aeabi_dmul+0xfa>
10010016:	4b6d      	ldr	r3, [pc, #436]	; (100101cc <__aeabi_dmul+0x1dc>)
10010018:	429e      	cmp	r6, r3
1001001a:	d035      	beq.n	10010088 <__aeabi_dmul+0x98>
1001001c:	465b      	mov	r3, fp
1001001e:	2280      	movs	r2, #128	; 0x80
10010020:	00dd      	lsls	r5, r3, #3
10010022:	0412      	lsls	r2, r2, #16
10010024:	0f43      	lsrs	r3, r0, #29
10010026:	4313      	orrs	r3, r2
10010028:	432b      	orrs	r3, r5
1001002a:	469b      	mov	fp, r3
1001002c:	00c3      	lsls	r3, r0, #3
1001002e:	4698      	mov	r8, r3
10010030:	4b67      	ldr	r3, [pc, #412]	; (100101d0 <__aeabi_dmul+0x1e0>)
10010032:	2700      	movs	r7, #0
10010034:	469c      	mov	ip, r3
10010036:	2300      	movs	r3, #0
10010038:	4466      	add	r6, ip
1001003a:	9301      	str	r3, [sp, #4]
1001003c:	464a      	mov	r2, r9
1001003e:	0315      	lsls	r5, r2, #12
10010040:	0050      	lsls	r0, r2, #1
10010042:	0fd2      	lsrs	r2, r2, #31
10010044:	4653      	mov	r3, sl
10010046:	0b2d      	lsrs	r5, r5, #12
10010048:	0d40      	lsrs	r0, r0, #21
1001004a:	4691      	mov	r9, r2
1001004c:	d100      	bne.n	10010050 <__aeabi_dmul+0x60>
1001004e:	e076      	b.n	1001013e <__aeabi_dmul+0x14e>
10010050:	4a5e      	ldr	r2, [pc, #376]	; (100101cc <__aeabi_dmul+0x1dc>)
10010052:	4290      	cmp	r0, r2
10010054:	d06c      	beq.n	10010130 <__aeabi_dmul+0x140>
10010056:	2280      	movs	r2, #128	; 0x80
10010058:	0f5b      	lsrs	r3, r3, #29
1001005a:	0412      	lsls	r2, r2, #16
1001005c:	4313      	orrs	r3, r2
1001005e:	4a5c      	ldr	r2, [pc, #368]	; (100101d0 <__aeabi_dmul+0x1e0>)
10010060:	00ed      	lsls	r5, r5, #3
10010062:	4694      	mov	ip, r2
10010064:	431d      	orrs	r5, r3
10010066:	4653      	mov	r3, sl
10010068:	2200      	movs	r2, #0
1001006a:	00db      	lsls	r3, r3, #3
1001006c:	4460      	add	r0, ip
1001006e:	4649      	mov	r1, r9
10010070:	1836      	adds	r6, r6, r0
10010072:	1c70      	adds	r0, r6, #1
10010074:	4061      	eors	r1, r4
10010076:	9002      	str	r0, [sp, #8]
10010078:	4317      	orrs	r7, r2
1001007a:	2f0f      	cmp	r7, #15
1001007c:	d900      	bls.n	10010080 <__aeabi_dmul+0x90>
1001007e:	e0af      	b.n	100101e0 <__aeabi_dmul+0x1f0>
10010080:	4854      	ldr	r0, [pc, #336]	; (100101d4 <__aeabi_dmul+0x1e4>)
10010082:	00bf      	lsls	r7, r7, #2
10010084:	59c7      	ldr	r7, [r0, r7]
10010086:	46bf      	mov	pc, r7
10010088:	465b      	mov	r3, fp
1001008a:	431f      	orrs	r7, r3
1001008c:	d000      	beq.n	10010090 <__aeabi_dmul+0xa0>
1001008e:	e088      	b.n	100101a2 <__aeabi_dmul+0x1b2>
10010090:	2300      	movs	r3, #0
10010092:	469b      	mov	fp, r3
10010094:	4698      	mov	r8, r3
10010096:	3302      	adds	r3, #2
10010098:	2708      	movs	r7, #8
1001009a:	9301      	str	r3, [sp, #4]
1001009c:	e7ce      	b.n	1001003c <__aeabi_dmul+0x4c>
1001009e:	4649      	mov	r1, r9
100100a0:	2a02      	cmp	r2, #2
100100a2:	d06a      	beq.n	1001017a <__aeabi_dmul+0x18a>
100100a4:	2a03      	cmp	r2, #3
100100a6:	d100      	bne.n	100100aa <__aeabi_dmul+0xba>
100100a8:	e209      	b.n	100104be <__aeabi_dmul+0x4ce>
100100aa:	2a01      	cmp	r2, #1
100100ac:	d000      	beq.n	100100b0 <__aeabi_dmul+0xc0>
100100ae:	e1bb      	b.n	10010428 <__aeabi_dmul+0x438>
100100b0:	4011      	ands	r1, r2
100100b2:	2200      	movs	r2, #0
100100b4:	2300      	movs	r3, #0
100100b6:	2500      	movs	r5, #0
100100b8:	4690      	mov	r8, r2
100100ba:	b2cc      	uxtb	r4, r1
100100bc:	2100      	movs	r1, #0
100100be:	032d      	lsls	r5, r5, #12
100100c0:	0d0a      	lsrs	r2, r1, #20
100100c2:	0512      	lsls	r2, r2, #20
100100c4:	0b2d      	lsrs	r5, r5, #12
100100c6:	4315      	orrs	r5, r2
100100c8:	4a43      	ldr	r2, [pc, #268]	; (100101d8 <__aeabi_dmul+0x1e8>)
100100ca:	051b      	lsls	r3, r3, #20
100100cc:	4015      	ands	r5, r2
100100ce:	431d      	orrs	r5, r3
100100d0:	006d      	lsls	r5, r5, #1
100100d2:	07e4      	lsls	r4, r4, #31
100100d4:	086d      	lsrs	r5, r5, #1
100100d6:	4325      	orrs	r5, r4
100100d8:	4640      	mov	r0, r8
100100da:	0029      	movs	r1, r5
100100dc:	b007      	add	sp, #28
100100de:	bc3c      	pop	{r2, r3, r4, r5}
100100e0:	4690      	mov	r8, r2
100100e2:	4699      	mov	r9, r3
100100e4:	46a2      	mov	sl, r4
100100e6:	46ab      	mov	fp, r5
100100e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100100ea:	4303      	orrs	r3, r0
100100ec:	d052      	beq.n	10010194 <__aeabi_dmul+0x1a4>
100100ee:	465b      	mov	r3, fp
100100f0:	2b00      	cmp	r3, #0
100100f2:	d100      	bne.n	100100f6 <__aeabi_dmul+0x106>
100100f4:	e18a      	b.n	1001040c <__aeabi_dmul+0x41c>
100100f6:	4658      	mov	r0, fp
100100f8:	f000 fdf4 	bl	10010ce4 <__clzsi2>
100100fc:	0003      	movs	r3, r0
100100fe:	3b0b      	subs	r3, #11
10010100:	2b1c      	cmp	r3, #28
10010102:	dd00      	ble.n	10010106 <__aeabi_dmul+0x116>
10010104:	e17b      	b.n	100103fe <__aeabi_dmul+0x40e>
10010106:	221d      	movs	r2, #29
10010108:	1ad3      	subs	r3, r2, r3
1001010a:	003a      	movs	r2, r7
1001010c:	0001      	movs	r1, r0
1001010e:	465d      	mov	r5, fp
10010110:	40da      	lsrs	r2, r3
10010112:	3908      	subs	r1, #8
10010114:	408d      	lsls	r5, r1
10010116:	0013      	movs	r3, r2
10010118:	408f      	lsls	r7, r1
1001011a:	432b      	orrs	r3, r5
1001011c:	469b      	mov	fp, r3
1001011e:	46b8      	mov	r8, r7
10010120:	4b2e      	ldr	r3, [pc, #184]	; (100101dc <__aeabi_dmul+0x1ec>)
10010122:	2700      	movs	r7, #0
10010124:	469c      	mov	ip, r3
10010126:	2300      	movs	r3, #0
10010128:	4460      	add	r0, ip
1001012a:	4246      	negs	r6, r0
1001012c:	9301      	str	r3, [sp, #4]
1001012e:	e785      	b.n	1001003c <__aeabi_dmul+0x4c>
10010130:	4652      	mov	r2, sl
10010132:	432a      	orrs	r2, r5
10010134:	d12c      	bne.n	10010190 <__aeabi_dmul+0x1a0>
10010136:	2500      	movs	r5, #0
10010138:	2300      	movs	r3, #0
1001013a:	2202      	movs	r2, #2
1001013c:	e797      	b.n	1001006e <__aeabi_dmul+0x7e>
1001013e:	4652      	mov	r2, sl
10010140:	432a      	orrs	r2, r5
10010142:	d021      	beq.n	10010188 <__aeabi_dmul+0x198>
10010144:	2d00      	cmp	r5, #0
10010146:	d100      	bne.n	1001014a <__aeabi_dmul+0x15a>
10010148:	e154      	b.n	100103f4 <__aeabi_dmul+0x404>
1001014a:	0028      	movs	r0, r5
1001014c:	f000 fdca 	bl	10010ce4 <__clzsi2>
10010150:	0003      	movs	r3, r0
10010152:	3b0b      	subs	r3, #11
10010154:	2b1c      	cmp	r3, #28
10010156:	dd00      	ble.n	1001015a <__aeabi_dmul+0x16a>
10010158:	e146      	b.n	100103e8 <__aeabi_dmul+0x3f8>
1001015a:	211d      	movs	r1, #29
1001015c:	1acb      	subs	r3, r1, r3
1001015e:	4651      	mov	r1, sl
10010160:	0002      	movs	r2, r0
10010162:	40d9      	lsrs	r1, r3
10010164:	4653      	mov	r3, sl
10010166:	3a08      	subs	r2, #8
10010168:	4095      	lsls	r5, r2
1001016a:	4093      	lsls	r3, r2
1001016c:	430d      	orrs	r5, r1
1001016e:	4a1b      	ldr	r2, [pc, #108]	; (100101dc <__aeabi_dmul+0x1ec>)
10010170:	4694      	mov	ip, r2
10010172:	4460      	add	r0, ip
10010174:	4240      	negs	r0, r0
10010176:	2200      	movs	r2, #0
10010178:	e779      	b.n	1001006e <__aeabi_dmul+0x7e>
1001017a:	2401      	movs	r4, #1
1001017c:	2200      	movs	r2, #0
1001017e:	400c      	ands	r4, r1
10010180:	4b12      	ldr	r3, [pc, #72]	; (100101cc <__aeabi_dmul+0x1dc>)
10010182:	2500      	movs	r5, #0
10010184:	4690      	mov	r8, r2
10010186:	e799      	b.n	100100bc <__aeabi_dmul+0xcc>
10010188:	2500      	movs	r5, #0
1001018a:	2300      	movs	r3, #0
1001018c:	2201      	movs	r2, #1
1001018e:	e76e      	b.n	1001006e <__aeabi_dmul+0x7e>
10010190:	2203      	movs	r2, #3
10010192:	e76c      	b.n	1001006e <__aeabi_dmul+0x7e>
10010194:	2300      	movs	r3, #0
10010196:	469b      	mov	fp, r3
10010198:	4698      	mov	r8, r3
1001019a:	3301      	adds	r3, #1
1001019c:	2704      	movs	r7, #4
1001019e:	9301      	str	r3, [sp, #4]
100101a0:	e74c      	b.n	1001003c <__aeabi_dmul+0x4c>
100101a2:	2303      	movs	r3, #3
100101a4:	270c      	movs	r7, #12
100101a6:	9301      	str	r3, [sp, #4]
100101a8:	e748      	b.n	1001003c <__aeabi_dmul+0x4c>
100101aa:	2300      	movs	r3, #0
100101ac:	2580      	movs	r5, #128	; 0x80
100101ae:	4698      	mov	r8, r3
100101b0:	2400      	movs	r4, #0
100101b2:	032d      	lsls	r5, r5, #12
100101b4:	4b05      	ldr	r3, [pc, #20]	; (100101cc <__aeabi_dmul+0x1dc>)
100101b6:	e781      	b.n	100100bc <__aeabi_dmul+0xcc>
100101b8:	465d      	mov	r5, fp
100101ba:	4643      	mov	r3, r8
100101bc:	9a01      	ldr	r2, [sp, #4]
100101be:	e76f      	b.n	100100a0 <__aeabi_dmul+0xb0>
100101c0:	465d      	mov	r5, fp
100101c2:	4643      	mov	r3, r8
100101c4:	0021      	movs	r1, r4
100101c6:	9a01      	ldr	r2, [sp, #4]
100101c8:	e76a      	b.n	100100a0 <__aeabi_dmul+0xb0>
100101ca:	46c0      	nop			; (mov r8, r8)
100101cc:	000007ff 	.word	0x000007ff
100101d0:	fffffc01 	.word	0xfffffc01
100101d4:	10013798 	.word	0x10013798
100101d8:	800fffff 	.word	0x800fffff
100101dc:	000003f3 	.word	0x000003f3
100101e0:	4642      	mov	r2, r8
100101e2:	0c12      	lsrs	r2, r2, #16
100101e4:	4691      	mov	r9, r2
100101e6:	0c1a      	lsrs	r2, r3, #16
100101e8:	4694      	mov	ip, r2
100101ea:	4642      	mov	r2, r8
100101ec:	0417      	lsls	r7, r2, #16
100101ee:	464a      	mov	r2, r9
100101f0:	041b      	lsls	r3, r3, #16
100101f2:	0c1b      	lsrs	r3, r3, #16
100101f4:	435a      	muls	r2, r3
100101f6:	4660      	mov	r0, ip
100101f8:	4690      	mov	r8, r2
100101fa:	464a      	mov	r2, r9
100101fc:	4342      	muls	r2, r0
100101fe:	0010      	movs	r0, r2
10010200:	9203      	str	r2, [sp, #12]
10010202:	4662      	mov	r2, ip
10010204:	001c      	movs	r4, r3
10010206:	0c3f      	lsrs	r7, r7, #16
10010208:	437a      	muls	r2, r7
1001020a:	437c      	muls	r4, r7
1001020c:	4442      	add	r2, r8
1001020e:	9201      	str	r2, [sp, #4]
10010210:	0c22      	lsrs	r2, r4, #16
10010212:	4692      	mov	sl, r2
10010214:	9a01      	ldr	r2, [sp, #4]
10010216:	4452      	add	r2, sl
10010218:	4590      	cmp	r8, r2
1001021a:	d906      	bls.n	1001022a <__aeabi_dmul+0x23a>
1001021c:	4682      	mov	sl, r0
1001021e:	2080      	movs	r0, #128	; 0x80
10010220:	0240      	lsls	r0, r0, #9
10010222:	4680      	mov	r8, r0
10010224:	44c2      	add	sl, r8
10010226:	4650      	mov	r0, sl
10010228:	9003      	str	r0, [sp, #12]
1001022a:	0c10      	lsrs	r0, r2, #16
1001022c:	9004      	str	r0, [sp, #16]
1001022e:	4648      	mov	r0, r9
10010230:	0424      	lsls	r4, r4, #16
10010232:	0c24      	lsrs	r4, r4, #16
10010234:	0412      	lsls	r2, r2, #16
10010236:	1912      	adds	r2, r2, r4
10010238:	9205      	str	r2, [sp, #20]
1001023a:	0c2a      	lsrs	r2, r5, #16
1001023c:	042d      	lsls	r5, r5, #16
1001023e:	0c2d      	lsrs	r5, r5, #16
10010240:	4368      	muls	r0, r5
10010242:	002c      	movs	r4, r5
10010244:	4682      	mov	sl, r0
10010246:	4648      	mov	r0, r9
10010248:	437c      	muls	r4, r7
1001024a:	4350      	muls	r0, r2
1001024c:	4681      	mov	r9, r0
1001024e:	0c20      	lsrs	r0, r4, #16
10010250:	4680      	mov	r8, r0
10010252:	4357      	muls	r7, r2
10010254:	4457      	add	r7, sl
10010256:	4447      	add	r7, r8
10010258:	45ba      	cmp	sl, r7
1001025a:	d903      	bls.n	10010264 <__aeabi_dmul+0x274>
1001025c:	2080      	movs	r0, #128	; 0x80
1001025e:	0240      	lsls	r0, r0, #9
10010260:	4680      	mov	r8, r0
10010262:	44c1      	add	r9, r8
10010264:	0c38      	lsrs	r0, r7, #16
10010266:	043f      	lsls	r7, r7, #16
10010268:	46b8      	mov	r8, r7
1001026a:	4448      	add	r0, r9
1001026c:	0424      	lsls	r4, r4, #16
1001026e:	0c24      	lsrs	r4, r4, #16
10010270:	9001      	str	r0, [sp, #4]
10010272:	9804      	ldr	r0, [sp, #16]
10010274:	44a0      	add	r8, r4
10010276:	4440      	add	r0, r8
10010278:	9004      	str	r0, [sp, #16]
1001027a:	4658      	mov	r0, fp
1001027c:	0c00      	lsrs	r0, r0, #16
1001027e:	4681      	mov	r9, r0
10010280:	4658      	mov	r0, fp
10010282:	0404      	lsls	r4, r0, #16
10010284:	0c20      	lsrs	r0, r4, #16
10010286:	4682      	mov	sl, r0
10010288:	0007      	movs	r7, r0
1001028a:	4648      	mov	r0, r9
1001028c:	435f      	muls	r7, r3
1001028e:	464c      	mov	r4, r9
10010290:	4343      	muls	r3, r0
10010292:	4660      	mov	r0, ip
10010294:	4360      	muls	r0, r4
10010296:	4664      	mov	r4, ip
10010298:	4683      	mov	fp, r0
1001029a:	4650      	mov	r0, sl
1001029c:	4344      	muls	r4, r0
1001029e:	0c38      	lsrs	r0, r7, #16
100102a0:	4684      	mov	ip, r0
100102a2:	18e4      	adds	r4, r4, r3
100102a4:	4464      	add	r4, ip
100102a6:	42a3      	cmp	r3, r4
100102a8:	d903      	bls.n	100102b2 <__aeabi_dmul+0x2c2>
100102aa:	2380      	movs	r3, #128	; 0x80
100102ac:	025b      	lsls	r3, r3, #9
100102ae:	469c      	mov	ip, r3
100102b0:	44e3      	add	fp, ip
100102b2:	4648      	mov	r0, r9
100102b4:	043f      	lsls	r7, r7, #16
100102b6:	0c23      	lsrs	r3, r4, #16
100102b8:	0c3f      	lsrs	r7, r7, #16
100102ba:	0424      	lsls	r4, r4, #16
100102bc:	19e4      	adds	r4, r4, r7
100102be:	4657      	mov	r7, sl
100102c0:	4368      	muls	r0, r5
100102c2:	436f      	muls	r7, r5
100102c4:	4684      	mov	ip, r0
100102c6:	464d      	mov	r5, r9
100102c8:	4650      	mov	r0, sl
100102ca:	4355      	muls	r5, r2
100102cc:	4342      	muls	r2, r0
100102ce:	0c38      	lsrs	r0, r7, #16
100102d0:	4681      	mov	r9, r0
100102d2:	4462      	add	r2, ip
100102d4:	444a      	add	r2, r9
100102d6:	445b      	add	r3, fp
100102d8:	4594      	cmp	ip, r2
100102da:	d903      	bls.n	100102e4 <__aeabi_dmul+0x2f4>
100102dc:	2080      	movs	r0, #128	; 0x80
100102de:	0240      	lsls	r0, r0, #9
100102e0:	4684      	mov	ip, r0
100102e2:	4465      	add	r5, ip
100102e4:	9803      	ldr	r0, [sp, #12]
100102e6:	043f      	lsls	r7, r7, #16
100102e8:	4683      	mov	fp, r0
100102ea:	9804      	ldr	r0, [sp, #16]
100102ec:	0c3f      	lsrs	r7, r7, #16
100102ee:	4684      	mov	ip, r0
100102f0:	44e3      	add	fp, ip
100102f2:	45c3      	cmp	fp, r8
100102f4:	4180      	sbcs	r0, r0
100102f6:	4240      	negs	r0, r0
100102f8:	4682      	mov	sl, r0
100102fa:	0410      	lsls	r0, r2, #16
100102fc:	4684      	mov	ip, r0
100102fe:	9801      	ldr	r0, [sp, #4]
10010300:	4467      	add	r7, ip
10010302:	4684      	mov	ip, r0
10010304:	4467      	add	r7, ip
10010306:	44a3      	add	fp, r4
10010308:	46bc      	mov	ip, r7
1001030a:	45a3      	cmp	fp, r4
1001030c:	41a4      	sbcs	r4, r4
1001030e:	4699      	mov	r9, r3
10010310:	44d4      	add	ip, sl
10010312:	4264      	negs	r4, r4
10010314:	4287      	cmp	r7, r0
10010316:	41bf      	sbcs	r7, r7
10010318:	45d4      	cmp	ip, sl
1001031a:	4180      	sbcs	r0, r0
1001031c:	44e1      	add	r9, ip
1001031e:	46a0      	mov	r8, r4
10010320:	4599      	cmp	r9, r3
10010322:	419b      	sbcs	r3, r3
10010324:	427f      	negs	r7, r7
10010326:	4240      	negs	r0, r0
10010328:	44c8      	add	r8, r9
1001032a:	4307      	orrs	r7, r0
1001032c:	0c12      	lsrs	r2, r2, #16
1001032e:	18ba      	adds	r2, r7, r2
10010330:	45a0      	cmp	r8, r4
10010332:	41a4      	sbcs	r4, r4
10010334:	425f      	negs	r7, r3
10010336:	003b      	movs	r3, r7
10010338:	4264      	negs	r4, r4
1001033a:	4323      	orrs	r3, r4
1001033c:	18d7      	adds	r7, r2, r3
1001033e:	4643      	mov	r3, r8
10010340:	197d      	adds	r5, r7, r5
10010342:	0ddb      	lsrs	r3, r3, #23
10010344:	026d      	lsls	r5, r5, #9
10010346:	431d      	orrs	r5, r3
10010348:	465b      	mov	r3, fp
1001034a:	025a      	lsls	r2, r3, #9
1001034c:	9b05      	ldr	r3, [sp, #20]
1001034e:	431a      	orrs	r2, r3
10010350:	1e53      	subs	r3, r2, #1
10010352:	419a      	sbcs	r2, r3
10010354:	465b      	mov	r3, fp
10010356:	0ddb      	lsrs	r3, r3, #23
10010358:	431a      	orrs	r2, r3
1001035a:	4643      	mov	r3, r8
1001035c:	025b      	lsls	r3, r3, #9
1001035e:	4313      	orrs	r3, r2
10010360:	01ea      	lsls	r2, r5, #7
10010362:	d507      	bpl.n	10010374 <__aeabi_dmul+0x384>
10010364:	2201      	movs	r2, #1
10010366:	085c      	lsrs	r4, r3, #1
10010368:	4013      	ands	r3, r2
1001036a:	4323      	orrs	r3, r4
1001036c:	07ea      	lsls	r2, r5, #31
1001036e:	9e02      	ldr	r6, [sp, #8]
10010370:	4313      	orrs	r3, r2
10010372:	086d      	lsrs	r5, r5, #1
10010374:	4a57      	ldr	r2, [pc, #348]	; (100104d4 <__aeabi_dmul+0x4e4>)
10010376:	18b2      	adds	r2, r6, r2
10010378:	2a00      	cmp	r2, #0
1001037a:	dd4b      	ble.n	10010414 <__aeabi_dmul+0x424>
1001037c:	0758      	lsls	r0, r3, #29
1001037e:	d009      	beq.n	10010394 <__aeabi_dmul+0x3a4>
10010380:	200f      	movs	r0, #15
10010382:	4018      	ands	r0, r3
10010384:	2804      	cmp	r0, #4
10010386:	d005      	beq.n	10010394 <__aeabi_dmul+0x3a4>
10010388:	1d18      	adds	r0, r3, #4
1001038a:	4298      	cmp	r0, r3
1001038c:	419b      	sbcs	r3, r3
1001038e:	425b      	negs	r3, r3
10010390:	18ed      	adds	r5, r5, r3
10010392:	0003      	movs	r3, r0
10010394:	01e8      	lsls	r0, r5, #7
10010396:	d504      	bpl.n	100103a2 <__aeabi_dmul+0x3b2>
10010398:	4a4f      	ldr	r2, [pc, #316]	; (100104d8 <__aeabi_dmul+0x4e8>)
1001039a:	4015      	ands	r5, r2
1001039c:	2280      	movs	r2, #128	; 0x80
1001039e:	00d2      	lsls	r2, r2, #3
100103a0:	18b2      	adds	r2, r6, r2
100103a2:	484e      	ldr	r0, [pc, #312]	; (100104dc <__aeabi_dmul+0x4ec>)
100103a4:	4282      	cmp	r2, r0
100103a6:	dd00      	ble.n	100103aa <__aeabi_dmul+0x3ba>
100103a8:	e6e7      	b.n	1001017a <__aeabi_dmul+0x18a>
100103aa:	2401      	movs	r4, #1
100103ac:	08db      	lsrs	r3, r3, #3
100103ae:	0768      	lsls	r0, r5, #29
100103b0:	4318      	orrs	r0, r3
100103b2:	026d      	lsls	r5, r5, #9
100103b4:	0553      	lsls	r3, r2, #21
100103b6:	4680      	mov	r8, r0
100103b8:	0b2d      	lsrs	r5, r5, #12
100103ba:	0d5b      	lsrs	r3, r3, #21
100103bc:	400c      	ands	r4, r1
100103be:	e67d      	b.n	100100bc <__aeabi_dmul+0xcc>
100103c0:	2280      	movs	r2, #128	; 0x80
100103c2:	4659      	mov	r1, fp
100103c4:	0312      	lsls	r2, r2, #12
100103c6:	4211      	tst	r1, r2
100103c8:	d008      	beq.n	100103dc <__aeabi_dmul+0x3ec>
100103ca:	4215      	tst	r5, r2
100103cc:	d106      	bne.n	100103dc <__aeabi_dmul+0x3ec>
100103ce:	4315      	orrs	r5, r2
100103d0:	032d      	lsls	r5, r5, #12
100103d2:	4698      	mov	r8, r3
100103d4:	0b2d      	lsrs	r5, r5, #12
100103d6:	464c      	mov	r4, r9
100103d8:	4b41      	ldr	r3, [pc, #260]	; (100104e0 <__aeabi_dmul+0x4f0>)
100103da:	e66f      	b.n	100100bc <__aeabi_dmul+0xcc>
100103dc:	465d      	mov	r5, fp
100103de:	4315      	orrs	r5, r2
100103e0:	032d      	lsls	r5, r5, #12
100103e2:	0b2d      	lsrs	r5, r5, #12
100103e4:	4b3e      	ldr	r3, [pc, #248]	; (100104e0 <__aeabi_dmul+0x4f0>)
100103e6:	e669      	b.n	100100bc <__aeabi_dmul+0xcc>
100103e8:	0003      	movs	r3, r0
100103ea:	4655      	mov	r5, sl
100103ec:	3b28      	subs	r3, #40	; 0x28
100103ee:	409d      	lsls	r5, r3
100103f0:	2300      	movs	r3, #0
100103f2:	e6bc      	b.n	1001016e <__aeabi_dmul+0x17e>
100103f4:	4650      	mov	r0, sl
100103f6:	f000 fc75 	bl	10010ce4 <__clzsi2>
100103fa:	3020      	adds	r0, #32
100103fc:	e6a8      	b.n	10010150 <__aeabi_dmul+0x160>
100103fe:	0003      	movs	r3, r0
10010400:	3b28      	subs	r3, #40	; 0x28
10010402:	409f      	lsls	r7, r3
10010404:	2300      	movs	r3, #0
10010406:	46bb      	mov	fp, r7
10010408:	4698      	mov	r8, r3
1001040a:	e689      	b.n	10010120 <__aeabi_dmul+0x130>
1001040c:	f000 fc6a 	bl	10010ce4 <__clzsi2>
10010410:	3020      	adds	r0, #32
10010412:	e673      	b.n	100100fc <__aeabi_dmul+0x10c>
10010414:	2401      	movs	r4, #1
10010416:	1aa6      	subs	r6, r4, r2
10010418:	2e38      	cmp	r6, #56	; 0x38
1001041a:	dd07      	ble.n	1001042c <__aeabi_dmul+0x43c>
1001041c:	2200      	movs	r2, #0
1001041e:	400c      	ands	r4, r1
10010420:	2300      	movs	r3, #0
10010422:	2500      	movs	r5, #0
10010424:	4690      	mov	r8, r2
10010426:	e649      	b.n	100100bc <__aeabi_dmul+0xcc>
10010428:	9e02      	ldr	r6, [sp, #8]
1001042a:	e7a3      	b.n	10010374 <__aeabi_dmul+0x384>
1001042c:	2e1f      	cmp	r6, #31
1001042e:	dc20      	bgt.n	10010472 <__aeabi_dmul+0x482>
10010430:	2220      	movs	r2, #32
10010432:	002c      	movs	r4, r5
10010434:	0018      	movs	r0, r3
10010436:	1b92      	subs	r2, r2, r6
10010438:	40f0      	lsrs	r0, r6
1001043a:	4094      	lsls	r4, r2
1001043c:	4093      	lsls	r3, r2
1001043e:	4304      	orrs	r4, r0
10010440:	1e58      	subs	r0, r3, #1
10010442:	4183      	sbcs	r3, r0
10010444:	431c      	orrs	r4, r3
10010446:	40f5      	lsrs	r5, r6
10010448:	0763      	lsls	r3, r4, #29
1001044a:	d009      	beq.n	10010460 <__aeabi_dmul+0x470>
1001044c:	230f      	movs	r3, #15
1001044e:	4023      	ands	r3, r4
10010450:	2b04      	cmp	r3, #4
10010452:	d005      	beq.n	10010460 <__aeabi_dmul+0x470>
10010454:	0023      	movs	r3, r4
10010456:	1d1c      	adds	r4, r3, #4
10010458:	429c      	cmp	r4, r3
1001045a:	4192      	sbcs	r2, r2
1001045c:	4252      	negs	r2, r2
1001045e:	18ad      	adds	r5, r5, r2
10010460:	022b      	lsls	r3, r5, #8
10010462:	d51f      	bpl.n	100104a4 <__aeabi_dmul+0x4b4>
10010464:	2401      	movs	r4, #1
10010466:	2200      	movs	r2, #0
10010468:	400c      	ands	r4, r1
1001046a:	2301      	movs	r3, #1
1001046c:	2500      	movs	r5, #0
1001046e:	4690      	mov	r8, r2
10010470:	e624      	b.n	100100bc <__aeabi_dmul+0xcc>
10010472:	201f      	movs	r0, #31
10010474:	002c      	movs	r4, r5
10010476:	4240      	negs	r0, r0
10010478:	1a82      	subs	r2, r0, r2
1001047a:	40d4      	lsrs	r4, r2
1001047c:	2e20      	cmp	r6, #32
1001047e:	d01c      	beq.n	100104ba <__aeabi_dmul+0x4ca>
10010480:	2240      	movs	r2, #64	; 0x40
10010482:	1b96      	subs	r6, r2, r6
10010484:	40b5      	lsls	r5, r6
10010486:	432b      	orrs	r3, r5
10010488:	1e58      	subs	r0, r3, #1
1001048a:	4183      	sbcs	r3, r0
1001048c:	2007      	movs	r0, #7
1001048e:	4323      	orrs	r3, r4
10010490:	4018      	ands	r0, r3
10010492:	2500      	movs	r5, #0
10010494:	2800      	cmp	r0, #0
10010496:	d009      	beq.n	100104ac <__aeabi_dmul+0x4bc>
10010498:	220f      	movs	r2, #15
1001049a:	2500      	movs	r5, #0
1001049c:	401a      	ands	r2, r3
1001049e:	001c      	movs	r4, r3
100104a0:	2a04      	cmp	r2, #4
100104a2:	d1d8      	bne.n	10010456 <__aeabi_dmul+0x466>
100104a4:	0023      	movs	r3, r4
100104a6:	0768      	lsls	r0, r5, #29
100104a8:	026d      	lsls	r5, r5, #9
100104aa:	0b2d      	lsrs	r5, r5, #12
100104ac:	2401      	movs	r4, #1
100104ae:	08db      	lsrs	r3, r3, #3
100104b0:	4303      	orrs	r3, r0
100104b2:	4698      	mov	r8, r3
100104b4:	400c      	ands	r4, r1
100104b6:	2300      	movs	r3, #0
100104b8:	e600      	b.n	100100bc <__aeabi_dmul+0xcc>
100104ba:	2500      	movs	r5, #0
100104bc:	e7e3      	b.n	10010486 <__aeabi_dmul+0x496>
100104be:	2280      	movs	r2, #128	; 0x80
100104c0:	2401      	movs	r4, #1
100104c2:	0312      	lsls	r2, r2, #12
100104c4:	4315      	orrs	r5, r2
100104c6:	032d      	lsls	r5, r5, #12
100104c8:	4698      	mov	r8, r3
100104ca:	0b2d      	lsrs	r5, r5, #12
100104cc:	400c      	ands	r4, r1
100104ce:	4b04      	ldr	r3, [pc, #16]	; (100104e0 <__aeabi_dmul+0x4f0>)
100104d0:	e5f4      	b.n	100100bc <__aeabi_dmul+0xcc>
100104d2:	46c0      	nop			; (mov r8, r8)
100104d4:	000003ff 	.word	0x000003ff
100104d8:	feffffff 	.word	0xfeffffff
100104dc:	000007fe 	.word	0x000007fe
100104e0:	000007ff 	.word	0x000007ff

100104e4 <__aeabi_dsub>:
100104e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100104e6:	4657      	mov	r7, sl
100104e8:	464e      	mov	r6, r9
100104ea:	4645      	mov	r5, r8
100104ec:	b4e0      	push	{r5, r6, r7}
100104ee:	000e      	movs	r6, r1
100104f0:	0011      	movs	r1, r2
100104f2:	0ff2      	lsrs	r2, r6, #31
100104f4:	4692      	mov	sl, r2
100104f6:	00c5      	lsls	r5, r0, #3
100104f8:	0f42      	lsrs	r2, r0, #29
100104fa:	0318      	lsls	r0, r3, #12
100104fc:	0337      	lsls	r7, r6, #12
100104fe:	0074      	lsls	r4, r6, #1
10010500:	0a40      	lsrs	r0, r0, #9
10010502:	0f4e      	lsrs	r6, r1, #29
10010504:	0a7f      	lsrs	r7, r7, #9
10010506:	4330      	orrs	r0, r6
10010508:	4ecf      	ldr	r6, [pc, #828]	; (10010848 <__aeabi_dsub+0x364>)
1001050a:	4317      	orrs	r7, r2
1001050c:	005a      	lsls	r2, r3, #1
1001050e:	0d64      	lsrs	r4, r4, #21
10010510:	0d52      	lsrs	r2, r2, #21
10010512:	0fdb      	lsrs	r3, r3, #31
10010514:	00c9      	lsls	r1, r1, #3
10010516:	42b2      	cmp	r2, r6
10010518:	d100      	bne.n	1001051c <__aeabi_dsub+0x38>
1001051a:	e0e5      	b.n	100106e8 <__aeabi_dsub+0x204>
1001051c:	2601      	movs	r6, #1
1001051e:	4073      	eors	r3, r6
10010520:	1aa6      	subs	r6, r4, r2
10010522:	46b4      	mov	ip, r6
10010524:	4553      	cmp	r3, sl
10010526:	d100      	bne.n	1001052a <__aeabi_dsub+0x46>
10010528:	e0af      	b.n	1001068a <__aeabi_dsub+0x1a6>
1001052a:	2e00      	cmp	r6, #0
1001052c:	dc00      	bgt.n	10010530 <__aeabi_dsub+0x4c>
1001052e:	e10d      	b.n	1001074c <__aeabi_dsub+0x268>
10010530:	2a00      	cmp	r2, #0
10010532:	d13a      	bne.n	100105aa <__aeabi_dsub+0xc6>
10010534:	0003      	movs	r3, r0
10010536:	430b      	orrs	r3, r1
10010538:	d000      	beq.n	1001053c <__aeabi_dsub+0x58>
1001053a:	e0e4      	b.n	10010706 <__aeabi_dsub+0x222>
1001053c:	076b      	lsls	r3, r5, #29
1001053e:	d009      	beq.n	10010554 <__aeabi_dsub+0x70>
10010540:	230f      	movs	r3, #15
10010542:	402b      	ands	r3, r5
10010544:	2b04      	cmp	r3, #4
10010546:	d005      	beq.n	10010554 <__aeabi_dsub+0x70>
10010548:	1d2b      	adds	r3, r5, #4
1001054a:	42ab      	cmp	r3, r5
1001054c:	41ad      	sbcs	r5, r5
1001054e:	426d      	negs	r5, r5
10010550:	197f      	adds	r7, r7, r5
10010552:	001d      	movs	r5, r3
10010554:	023b      	lsls	r3, r7, #8
10010556:	d400      	bmi.n	1001055a <__aeabi_dsub+0x76>
10010558:	e088      	b.n	1001066c <__aeabi_dsub+0x188>
1001055a:	4bbb      	ldr	r3, [pc, #748]	; (10010848 <__aeabi_dsub+0x364>)
1001055c:	3401      	adds	r4, #1
1001055e:	429c      	cmp	r4, r3
10010560:	d100      	bne.n	10010564 <__aeabi_dsub+0x80>
10010562:	e110      	b.n	10010786 <__aeabi_dsub+0x2a2>
10010564:	003a      	movs	r2, r7
10010566:	4bb9      	ldr	r3, [pc, #740]	; (1001084c <__aeabi_dsub+0x368>)
10010568:	4651      	mov	r1, sl
1001056a:	401a      	ands	r2, r3
1001056c:	2301      	movs	r3, #1
1001056e:	0750      	lsls	r0, r2, #29
10010570:	08ed      	lsrs	r5, r5, #3
10010572:	0252      	lsls	r2, r2, #9
10010574:	0564      	lsls	r4, r4, #21
10010576:	4305      	orrs	r5, r0
10010578:	0b12      	lsrs	r2, r2, #12
1001057a:	0d64      	lsrs	r4, r4, #21
1001057c:	400b      	ands	r3, r1
1001057e:	2100      	movs	r1, #0
10010580:	0028      	movs	r0, r5
10010582:	0312      	lsls	r2, r2, #12
10010584:	0d0d      	lsrs	r5, r1, #20
10010586:	0b12      	lsrs	r2, r2, #12
10010588:	0564      	lsls	r4, r4, #21
1001058a:	052d      	lsls	r5, r5, #20
1001058c:	4315      	orrs	r5, r2
1001058e:	0862      	lsrs	r2, r4, #1
10010590:	4caf      	ldr	r4, [pc, #700]	; (10010850 <__aeabi_dsub+0x36c>)
10010592:	07db      	lsls	r3, r3, #31
10010594:	402c      	ands	r4, r5
10010596:	4314      	orrs	r4, r2
10010598:	0064      	lsls	r4, r4, #1
1001059a:	0864      	lsrs	r4, r4, #1
1001059c:	431c      	orrs	r4, r3
1001059e:	0021      	movs	r1, r4
100105a0:	bc1c      	pop	{r2, r3, r4}
100105a2:	4690      	mov	r8, r2
100105a4:	4699      	mov	r9, r3
100105a6:	46a2      	mov	sl, r4
100105a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100105aa:	4ba7      	ldr	r3, [pc, #668]	; (10010848 <__aeabi_dsub+0x364>)
100105ac:	429c      	cmp	r4, r3
100105ae:	d0c5      	beq.n	1001053c <__aeabi_dsub+0x58>
100105b0:	2380      	movs	r3, #128	; 0x80
100105b2:	041b      	lsls	r3, r3, #16
100105b4:	4318      	orrs	r0, r3
100105b6:	4663      	mov	r3, ip
100105b8:	2b38      	cmp	r3, #56	; 0x38
100105ba:	dd00      	ble.n	100105be <__aeabi_dsub+0xda>
100105bc:	e0fd      	b.n	100107ba <__aeabi_dsub+0x2d6>
100105be:	2b1f      	cmp	r3, #31
100105c0:	dd00      	ble.n	100105c4 <__aeabi_dsub+0xe0>
100105c2:	e130      	b.n	10010826 <__aeabi_dsub+0x342>
100105c4:	4662      	mov	r2, ip
100105c6:	2320      	movs	r3, #32
100105c8:	1a9b      	subs	r3, r3, r2
100105ca:	0002      	movs	r2, r0
100105cc:	409a      	lsls	r2, r3
100105ce:	4666      	mov	r6, ip
100105d0:	4690      	mov	r8, r2
100105d2:	000a      	movs	r2, r1
100105d4:	4099      	lsls	r1, r3
100105d6:	40f2      	lsrs	r2, r6
100105d8:	4646      	mov	r6, r8
100105da:	1e4b      	subs	r3, r1, #1
100105dc:	4199      	sbcs	r1, r3
100105de:	4332      	orrs	r2, r6
100105e0:	4311      	orrs	r1, r2
100105e2:	4663      	mov	r3, ip
100105e4:	0002      	movs	r2, r0
100105e6:	40da      	lsrs	r2, r3
100105e8:	1a69      	subs	r1, r5, r1
100105ea:	428d      	cmp	r5, r1
100105ec:	419b      	sbcs	r3, r3
100105ee:	000d      	movs	r5, r1
100105f0:	1aba      	subs	r2, r7, r2
100105f2:	425b      	negs	r3, r3
100105f4:	1ad7      	subs	r7, r2, r3
100105f6:	023b      	lsls	r3, r7, #8
100105f8:	d535      	bpl.n	10010666 <__aeabi_dsub+0x182>
100105fa:	027a      	lsls	r2, r7, #9
100105fc:	0a53      	lsrs	r3, r2, #9
100105fe:	4698      	mov	r8, r3
10010600:	4643      	mov	r3, r8
10010602:	2b00      	cmp	r3, #0
10010604:	d100      	bne.n	10010608 <__aeabi_dsub+0x124>
10010606:	e0c4      	b.n	10010792 <__aeabi_dsub+0x2ae>
10010608:	4640      	mov	r0, r8
1001060a:	f000 fb6b 	bl	10010ce4 <__clzsi2>
1001060e:	0003      	movs	r3, r0
10010610:	3b08      	subs	r3, #8
10010612:	2b1f      	cmp	r3, #31
10010614:	dd00      	ble.n	10010618 <__aeabi_dsub+0x134>
10010616:	e0c5      	b.n	100107a4 <__aeabi_dsub+0x2c0>
10010618:	2220      	movs	r2, #32
1001061a:	0029      	movs	r1, r5
1001061c:	1ad2      	subs	r2, r2, r3
1001061e:	4647      	mov	r7, r8
10010620:	40d1      	lsrs	r1, r2
10010622:	409f      	lsls	r7, r3
10010624:	000a      	movs	r2, r1
10010626:	409d      	lsls	r5, r3
10010628:	433a      	orrs	r2, r7
1001062a:	429c      	cmp	r4, r3
1001062c:	dd00      	ble.n	10010630 <__aeabi_dsub+0x14c>
1001062e:	e0c0      	b.n	100107b2 <__aeabi_dsub+0x2ce>
10010630:	1b1c      	subs	r4, r3, r4
10010632:	1c63      	adds	r3, r4, #1
10010634:	2b1f      	cmp	r3, #31
10010636:	dd00      	ble.n	1001063a <__aeabi_dsub+0x156>
10010638:	e0e4      	b.n	10010804 <__aeabi_dsub+0x320>
1001063a:	2120      	movs	r1, #32
1001063c:	0014      	movs	r4, r2
1001063e:	0028      	movs	r0, r5
10010640:	1ac9      	subs	r1, r1, r3
10010642:	40d8      	lsrs	r0, r3
10010644:	408c      	lsls	r4, r1
10010646:	408d      	lsls	r5, r1
10010648:	4304      	orrs	r4, r0
1001064a:	40da      	lsrs	r2, r3
1001064c:	1e68      	subs	r0, r5, #1
1001064e:	4185      	sbcs	r5, r0
10010650:	0017      	movs	r7, r2
10010652:	4325      	orrs	r5, r4
10010654:	2400      	movs	r4, #0
10010656:	e771      	b.n	1001053c <__aeabi_dsub+0x58>
10010658:	4642      	mov	r2, r8
1001065a:	4663      	mov	r3, ip
1001065c:	431a      	orrs	r2, r3
1001065e:	d100      	bne.n	10010662 <__aeabi_dsub+0x17e>
10010660:	e24c      	b.n	10010afc <__aeabi_dsub+0x618>
10010662:	4667      	mov	r7, ip
10010664:	4645      	mov	r5, r8
10010666:	076b      	lsls	r3, r5, #29
10010668:	d000      	beq.n	1001066c <__aeabi_dsub+0x188>
1001066a:	e769      	b.n	10010540 <__aeabi_dsub+0x5c>
1001066c:	2301      	movs	r3, #1
1001066e:	4651      	mov	r1, sl
10010670:	0778      	lsls	r0, r7, #29
10010672:	08ed      	lsrs	r5, r5, #3
10010674:	08fa      	lsrs	r2, r7, #3
10010676:	400b      	ands	r3, r1
10010678:	4305      	orrs	r5, r0
1001067a:	4973      	ldr	r1, [pc, #460]	; (10010848 <__aeabi_dsub+0x364>)
1001067c:	428c      	cmp	r4, r1
1001067e:	d038      	beq.n	100106f2 <__aeabi_dsub+0x20e>
10010680:	0312      	lsls	r2, r2, #12
10010682:	0564      	lsls	r4, r4, #21
10010684:	0b12      	lsrs	r2, r2, #12
10010686:	0d64      	lsrs	r4, r4, #21
10010688:	e779      	b.n	1001057e <__aeabi_dsub+0x9a>
1001068a:	2e00      	cmp	r6, #0
1001068c:	dc00      	bgt.n	10010690 <__aeabi_dsub+0x1ac>
1001068e:	e09a      	b.n	100107c6 <__aeabi_dsub+0x2e2>
10010690:	2a00      	cmp	r2, #0
10010692:	d047      	beq.n	10010724 <__aeabi_dsub+0x240>
10010694:	4a6c      	ldr	r2, [pc, #432]	; (10010848 <__aeabi_dsub+0x364>)
10010696:	4294      	cmp	r4, r2
10010698:	d100      	bne.n	1001069c <__aeabi_dsub+0x1b8>
1001069a:	e74f      	b.n	1001053c <__aeabi_dsub+0x58>
1001069c:	2280      	movs	r2, #128	; 0x80
1001069e:	0412      	lsls	r2, r2, #16
100106a0:	4310      	orrs	r0, r2
100106a2:	4662      	mov	r2, ip
100106a4:	2a38      	cmp	r2, #56	; 0x38
100106a6:	dc00      	bgt.n	100106aa <__aeabi_dsub+0x1c6>
100106a8:	e108      	b.n	100108bc <__aeabi_dsub+0x3d8>
100106aa:	4301      	orrs	r1, r0
100106ac:	1e48      	subs	r0, r1, #1
100106ae:	4181      	sbcs	r1, r0
100106b0:	2200      	movs	r2, #0
100106b2:	b2c9      	uxtb	r1, r1
100106b4:	1949      	adds	r1, r1, r5
100106b6:	19d2      	adds	r2, r2, r7
100106b8:	42a9      	cmp	r1, r5
100106ba:	41bf      	sbcs	r7, r7
100106bc:	000d      	movs	r5, r1
100106be:	427f      	negs	r7, r7
100106c0:	18bf      	adds	r7, r7, r2
100106c2:	023a      	lsls	r2, r7, #8
100106c4:	d400      	bmi.n	100106c8 <__aeabi_dsub+0x1e4>
100106c6:	e142      	b.n	1001094e <__aeabi_dsub+0x46a>
100106c8:	4a5f      	ldr	r2, [pc, #380]	; (10010848 <__aeabi_dsub+0x364>)
100106ca:	3401      	adds	r4, #1
100106cc:	4294      	cmp	r4, r2
100106ce:	d100      	bne.n	100106d2 <__aeabi_dsub+0x1ee>
100106d0:	e14e      	b.n	10010970 <__aeabi_dsub+0x48c>
100106d2:	2001      	movs	r0, #1
100106d4:	4a5d      	ldr	r2, [pc, #372]	; (1001084c <__aeabi_dsub+0x368>)
100106d6:	0869      	lsrs	r1, r5, #1
100106d8:	403a      	ands	r2, r7
100106da:	4028      	ands	r0, r5
100106dc:	4308      	orrs	r0, r1
100106de:	07d5      	lsls	r5, r2, #31
100106e0:	4305      	orrs	r5, r0
100106e2:	0857      	lsrs	r7, r2, #1
100106e4:	469a      	mov	sl, r3
100106e6:	e729      	b.n	1001053c <__aeabi_dsub+0x58>
100106e8:	0006      	movs	r6, r0
100106ea:	430e      	orrs	r6, r1
100106ec:	d000      	beq.n	100106f0 <__aeabi_dsub+0x20c>
100106ee:	e717      	b.n	10010520 <__aeabi_dsub+0x3c>
100106f0:	e714      	b.n	1001051c <__aeabi_dsub+0x38>
100106f2:	0029      	movs	r1, r5
100106f4:	4311      	orrs	r1, r2
100106f6:	d100      	bne.n	100106fa <__aeabi_dsub+0x216>
100106f8:	e1f9      	b.n	10010aee <__aeabi_dsub+0x60a>
100106fa:	2180      	movs	r1, #128	; 0x80
100106fc:	0309      	lsls	r1, r1, #12
100106fe:	430a      	orrs	r2, r1
10010700:	0312      	lsls	r2, r2, #12
10010702:	0b12      	lsrs	r2, r2, #12
10010704:	e73b      	b.n	1001057e <__aeabi_dsub+0x9a>
10010706:	2301      	movs	r3, #1
10010708:	425b      	negs	r3, r3
1001070a:	4698      	mov	r8, r3
1001070c:	44c4      	add	ip, r8
1001070e:	4663      	mov	r3, ip
10010710:	2b00      	cmp	r3, #0
10010712:	d172      	bne.n	100107fa <__aeabi_dsub+0x316>
10010714:	1a69      	subs	r1, r5, r1
10010716:	428d      	cmp	r5, r1
10010718:	419b      	sbcs	r3, r3
1001071a:	1a3f      	subs	r7, r7, r0
1001071c:	425b      	negs	r3, r3
1001071e:	1aff      	subs	r7, r7, r3
10010720:	000d      	movs	r5, r1
10010722:	e768      	b.n	100105f6 <__aeabi_dsub+0x112>
10010724:	0002      	movs	r2, r0
10010726:	430a      	orrs	r2, r1
10010728:	d100      	bne.n	1001072c <__aeabi_dsub+0x248>
1001072a:	e707      	b.n	1001053c <__aeabi_dsub+0x58>
1001072c:	2201      	movs	r2, #1
1001072e:	4252      	negs	r2, r2
10010730:	4690      	mov	r8, r2
10010732:	44c4      	add	ip, r8
10010734:	4662      	mov	r2, ip
10010736:	2a00      	cmp	r2, #0
10010738:	d000      	beq.n	1001073c <__aeabi_dsub+0x258>
1001073a:	e0e6      	b.n	1001090a <__aeabi_dsub+0x426>
1001073c:	1869      	adds	r1, r5, r1
1001073e:	42a9      	cmp	r1, r5
10010740:	41b6      	sbcs	r6, r6
10010742:	183f      	adds	r7, r7, r0
10010744:	4276      	negs	r6, r6
10010746:	19f7      	adds	r7, r6, r7
10010748:	000d      	movs	r5, r1
1001074a:	e7ba      	b.n	100106c2 <__aeabi_dsub+0x1de>
1001074c:	2e00      	cmp	r6, #0
1001074e:	d000      	beq.n	10010752 <__aeabi_dsub+0x26e>
10010750:	e080      	b.n	10010854 <__aeabi_dsub+0x370>
10010752:	1c62      	adds	r2, r4, #1
10010754:	0552      	lsls	r2, r2, #21
10010756:	0d52      	lsrs	r2, r2, #21
10010758:	2a01      	cmp	r2, #1
1001075a:	dc00      	bgt.n	1001075e <__aeabi_dsub+0x27a>
1001075c:	e0f9      	b.n	10010952 <__aeabi_dsub+0x46e>
1001075e:	1a6a      	subs	r2, r5, r1
10010760:	4691      	mov	r9, r2
10010762:	454d      	cmp	r5, r9
10010764:	41b6      	sbcs	r6, r6
10010766:	1a3a      	subs	r2, r7, r0
10010768:	4276      	negs	r6, r6
1001076a:	1b92      	subs	r2, r2, r6
1001076c:	4690      	mov	r8, r2
1001076e:	0212      	lsls	r2, r2, #8
10010770:	d400      	bmi.n	10010774 <__aeabi_dsub+0x290>
10010772:	e099      	b.n	100108a8 <__aeabi_dsub+0x3c4>
10010774:	1b4d      	subs	r5, r1, r5
10010776:	42a9      	cmp	r1, r5
10010778:	4189      	sbcs	r1, r1
1001077a:	1bc7      	subs	r7, r0, r7
1001077c:	4249      	negs	r1, r1
1001077e:	1a7a      	subs	r2, r7, r1
10010780:	4690      	mov	r8, r2
10010782:	469a      	mov	sl, r3
10010784:	e73c      	b.n	10010600 <__aeabi_dsub+0x11c>
10010786:	4652      	mov	r2, sl
10010788:	2301      	movs	r3, #1
1001078a:	2500      	movs	r5, #0
1001078c:	4013      	ands	r3, r2
1001078e:	2200      	movs	r2, #0
10010790:	e6f5      	b.n	1001057e <__aeabi_dsub+0x9a>
10010792:	0028      	movs	r0, r5
10010794:	f000 faa6 	bl	10010ce4 <__clzsi2>
10010798:	3020      	adds	r0, #32
1001079a:	0003      	movs	r3, r0
1001079c:	3b08      	subs	r3, #8
1001079e:	2b1f      	cmp	r3, #31
100107a0:	dc00      	bgt.n	100107a4 <__aeabi_dsub+0x2c0>
100107a2:	e739      	b.n	10010618 <__aeabi_dsub+0x134>
100107a4:	002a      	movs	r2, r5
100107a6:	3828      	subs	r0, #40	; 0x28
100107a8:	4082      	lsls	r2, r0
100107aa:	2500      	movs	r5, #0
100107ac:	429c      	cmp	r4, r3
100107ae:	dc00      	bgt.n	100107b2 <__aeabi_dsub+0x2ce>
100107b0:	e73e      	b.n	10010630 <__aeabi_dsub+0x14c>
100107b2:	4f26      	ldr	r7, [pc, #152]	; (1001084c <__aeabi_dsub+0x368>)
100107b4:	1ae4      	subs	r4, r4, r3
100107b6:	4017      	ands	r7, r2
100107b8:	e6c0      	b.n	1001053c <__aeabi_dsub+0x58>
100107ba:	4301      	orrs	r1, r0
100107bc:	1e48      	subs	r0, r1, #1
100107be:	4181      	sbcs	r1, r0
100107c0:	2200      	movs	r2, #0
100107c2:	b2c9      	uxtb	r1, r1
100107c4:	e710      	b.n	100105e8 <__aeabi_dsub+0x104>
100107c6:	2e00      	cmp	r6, #0
100107c8:	d000      	beq.n	100107cc <__aeabi_dsub+0x2e8>
100107ca:	e0f1      	b.n	100109b0 <__aeabi_dsub+0x4cc>
100107cc:	1c62      	adds	r2, r4, #1
100107ce:	4694      	mov	ip, r2
100107d0:	0552      	lsls	r2, r2, #21
100107d2:	0d52      	lsrs	r2, r2, #21
100107d4:	2a01      	cmp	r2, #1
100107d6:	dc00      	bgt.n	100107da <__aeabi_dsub+0x2f6>
100107d8:	e0a0      	b.n	1001091c <__aeabi_dsub+0x438>
100107da:	4a1b      	ldr	r2, [pc, #108]	; (10010848 <__aeabi_dsub+0x364>)
100107dc:	4594      	cmp	ip, r2
100107de:	d100      	bne.n	100107e2 <__aeabi_dsub+0x2fe>
100107e0:	e0c5      	b.n	1001096e <__aeabi_dsub+0x48a>
100107e2:	1869      	adds	r1, r5, r1
100107e4:	42a9      	cmp	r1, r5
100107e6:	4192      	sbcs	r2, r2
100107e8:	183f      	adds	r7, r7, r0
100107ea:	4252      	negs	r2, r2
100107ec:	19d2      	adds	r2, r2, r7
100107ee:	0849      	lsrs	r1, r1, #1
100107f0:	07d5      	lsls	r5, r2, #31
100107f2:	430d      	orrs	r5, r1
100107f4:	0857      	lsrs	r7, r2, #1
100107f6:	4664      	mov	r4, ip
100107f8:	e6a0      	b.n	1001053c <__aeabi_dsub+0x58>
100107fa:	4b13      	ldr	r3, [pc, #76]	; (10010848 <__aeabi_dsub+0x364>)
100107fc:	429c      	cmp	r4, r3
100107fe:	d000      	beq.n	10010802 <__aeabi_dsub+0x31e>
10010800:	e6d9      	b.n	100105b6 <__aeabi_dsub+0xd2>
10010802:	e69b      	b.n	1001053c <__aeabi_dsub+0x58>
10010804:	0011      	movs	r1, r2
10010806:	3c1f      	subs	r4, #31
10010808:	40e1      	lsrs	r1, r4
1001080a:	000c      	movs	r4, r1
1001080c:	2b20      	cmp	r3, #32
1001080e:	d100      	bne.n	10010812 <__aeabi_dsub+0x32e>
10010810:	e080      	b.n	10010914 <__aeabi_dsub+0x430>
10010812:	2140      	movs	r1, #64	; 0x40
10010814:	1acb      	subs	r3, r1, r3
10010816:	409a      	lsls	r2, r3
10010818:	4315      	orrs	r5, r2
1001081a:	1e6a      	subs	r2, r5, #1
1001081c:	4195      	sbcs	r5, r2
1001081e:	2700      	movs	r7, #0
10010820:	4325      	orrs	r5, r4
10010822:	2400      	movs	r4, #0
10010824:	e71f      	b.n	10010666 <__aeabi_dsub+0x182>
10010826:	4663      	mov	r3, ip
10010828:	0002      	movs	r2, r0
1001082a:	3b20      	subs	r3, #32
1001082c:	40da      	lsrs	r2, r3
1001082e:	4663      	mov	r3, ip
10010830:	2b20      	cmp	r3, #32
10010832:	d071      	beq.n	10010918 <__aeabi_dsub+0x434>
10010834:	2340      	movs	r3, #64	; 0x40
10010836:	4666      	mov	r6, ip
10010838:	1b9b      	subs	r3, r3, r6
1001083a:	4098      	lsls	r0, r3
1001083c:	4301      	orrs	r1, r0
1001083e:	1e48      	subs	r0, r1, #1
10010840:	4181      	sbcs	r1, r0
10010842:	4311      	orrs	r1, r2
10010844:	2200      	movs	r2, #0
10010846:	e6cf      	b.n	100105e8 <__aeabi_dsub+0x104>
10010848:	000007ff 	.word	0x000007ff
1001084c:	ff7fffff 	.word	0xff7fffff
10010850:	800fffff 	.word	0x800fffff
10010854:	2c00      	cmp	r4, #0
10010856:	d048      	beq.n	100108ea <__aeabi_dsub+0x406>
10010858:	4cca      	ldr	r4, [pc, #808]	; (10010b84 <__aeabi_dsub+0x6a0>)
1001085a:	42a2      	cmp	r2, r4
1001085c:	d100      	bne.n	10010860 <__aeabi_dsub+0x37c>
1001085e:	e0a2      	b.n	100109a6 <__aeabi_dsub+0x4c2>
10010860:	4274      	negs	r4, r6
10010862:	46a1      	mov	r9, r4
10010864:	2480      	movs	r4, #128	; 0x80
10010866:	0424      	lsls	r4, r4, #16
10010868:	4327      	orrs	r7, r4
1001086a:	464c      	mov	r4, r9
1001086c:	2c38      	cmp	r4, #56	; 0x38
1001086e:	dd00      	ble.n	10010872 <__aeabi_dsub+0x38e>
10010870:	e0db      	b.n	10010a2a <__aeabi_dsub+0x546>
10010872:	2c1f      	cmp	r4, #31
10010874:	dd00      	ble.n	10010878 <__aeabi_dsub+0x394>
10010876:	e144      	b.n	10010b02 <__aeabi_dsub+0x61e>
10010878:	464e      	mov	r6, r9
1001087a:	2420      	movs	r4, #32
1001087c:	1ba4      	subs	r4, r4, r6
1001087e:	003e      	movs	r6, r7
10010880:	40a6      	lsls	r6, r4
10010882:	46a2      	mov	sl, r4
10010884:	46b0      	mov	r8, r6
10010886:	464c      	mov	r4, r9
10010888:	002e      	movs	r6, r5
1001088a:	40e6      	lsrs	r6, r4
1001088c:	46b4      	mov	ip, r6
1001088e:	4646      	mov	r6, r8
10010890:	4664      	mov	r4, ip
10010892:	4326      	orrs	r6, r4
10010894:	4654      	mov	r4, sl
10010896:	40a5      	lsls	r5, r4
10010898:	1e6c      	subs	r4, r5, #1
1001089a:	41a5      	sbcs	r5, r4
1001089c:	0034      	movs	r4, r6
1001089e:	432c      	orrs	r4, r5
100108a0:	464d      	mov	r5, r9
100108a2:	40ef      	lsrs	r7, r5
100108a4:	1b0d      	subs	r5, r1, r4
100108a6:	e028      	b.n	100108fa <__aeabi_dsub+0x416>
100108a8:	464a      	mov	r2, r9
100108aa:	4643      	mov	r3, r8
100108ac:	464d      	mov	r5, r9
100108ae:	431a      	orrs	r2, r3
100108b0:	d000      	beq.n	100108b4 <__aeabi_dsub+0x3d0>
100108b2:	e6a5      	b.n	10010600 <__aeabi_dsub+0x11c>
100108b4:	2300      	movs	r3, #0
100108b6:	2400      	movs	r4, #0
100108b8:	2500      	movs	r5, #0
100108ba:	e6de      	b.n	1001067a <__aeabi_dsub+0x196>
100108bc:	2a1f      	cmp	r2, #31
100108be:	dc5a      	bgt.n	10010976 <__aeabi_dsub+0x492>
100108c0:	4666      	mov	r6, ip
100108c2:	2220      	movs	r2, #32
100108c4:	1b92      	subs	r2, r2, r6
100108c6:	0006      	movs	r6, r0
100108c8:	4096      	lsls	r6, r2
100108ca:	4691      	mov	r9, r2
100108cc:	46b0      	mov	r8, r6
100108ce:	4662      	mov	r2, ip
100108d0:	000e      	movs	r6, r1
100108d2:	40d6      	lsrs	r6, r2
100108d4:	4642      	mov	r2, r8
100108d6:	4316      	orrs	r6, r2
100108d8:	464a      	mov	r2, r9
100108da:	4091      	lsls	r1, r2
100108dc:	1e4a      	subs	r2, r1, #1
100108de:	4191      	sbcs	r1, r2
100108e0:	0002      	movs	r2, r0
100108e2:	4660      	mov	r0, ip
100108e4:	4331      	orrs	r1, r6
100108e6:	40c2      	lsrs	r2, r0
100108e8:	e6e4      	b.n	100106b4 <__aeabi_dsub+0x1d0>
100108ea:	003c      	movs	r4, r7
100108ec:	432c      	orrs	r4, r5
100108ee:	d05a      	beq.n	100109a6 <__aeabi_dsub+0x4c2>
100108f0:	43f4      	mvns	r4, r6
100108f2:	46a1      	mov	r9, r4
100108f4:	2c00      	cmp	r4, #0
100108f6:	d152      	bne.n	1001099e <__aeabi_dsub+0x4ba>
100108f8:	1b4d      	subs	r5, r1, r5
100108fa:	42a9      	cmp	r1, r5
100108fc:	4189      	sbcs	r1, r1
100108fe:	1bc7      	subs	r7, r0, r7
10010900:	4249      	negs	r1, r1
10010902:	1a7f      	subs	r7, r7, r1
10010904:	0014      	movs	r4, r2
10010906:	469a      	mov	sl, r3
10010908:	e675      	b.n	100105f6 <__aeabi_dsub+0x112>
1001090a:	4a9e      	ldr	r2, [pc, #632]	; (10010b84 <__aeabi_dsub+0x6a0>)
1001090c:	4294      	cmp	r4, r2
1001090e:	d000      	beq.n	10010912 <__aeabi_dsub+0x42e>
10010910:	e6c7      	b.n	100106a2 <__aeabi_dsub+0x1be>
10010912:	e613      	b.n	1001053c <__aeabi_dsub+0x58>
10010914:	2200      	movs	r2, #0
10010916:	e77f      	b.n	10010818 <__aeabi_dsub+0x334>
10010918:	2000      	movs	r0, #0
1001091a:	e78f      	b.n	1001083c <__aeabi_dsub+0x358>
1001091c:	2c00      	cmp	r4, #0
1001091e:	d000      	beq.n	10010922 <__aeabi_dsub+0x43e>
10010920:	e0c8      	b.n	10010ab4 <__aeabi_dsub+0x5d0>
10010922:	003b      	movs	r3, r7
10010924:	432b      	orrs	r3, r5
10010926:	d100      	bne.n	1001092a <__aeabi_dsub+0x446>
10010928:	e10f      	b.n	10010b4a <__aeabi_dsub+0x666>
1001092a:	0003      	movs	r3, r0
1001092c:	430b      	orrs	r3, r1
1001092e:	d100      	bne.n	10010932 <__aeabi_dsub+0x44e>
10010930:	e604      	b.n	1001053c <__aeabi_dsub+0x58>
10010932:	1869      	adds	r1, r5, r1
10010934:	42a9      	cmp	r1, r5
10010936:	419b      	sbcs	r3, r3
10010938:	183f      	adds	r7, r7, r0
1001093a:	425b      	negs	r3, r3
1001093c:	19df      	adds	r7, r3, r7
1001093e:	023b      	lsls	r3, r7, #8
10010940:	d400      	bmi.n	10010944 <__aeabi_dsub+0x460>
10010942:	e11a      	b.n	10010b7a <__aeabi_dsub+0x696>
10010944:	4b90      	ldr	r3, [pc, #576]	; (10010b88 <__aeabi_dsub+0x6a4>)
10010946:	000d      	movs	r5, r1
10010948:	401f      	ands	r7, r3
1001094a:	4664      	mov	r4, ip
1001094c:	e5f6      	b.n	1001053c <__aeabi_dsub+0x58>
1001094e:	469a      	mov	sl, r3
10010950:	e689      	b.n	10010666 <__aeabi_dsub+0x182>
10010952:	003a      	movs	r2, r7
10010954:	432a      	orrs	r2, r5
10010956:	2c00      	cmp	r4, #0
10010958:	d15c      	bne.n	10010a14 <__aeabi_dsub+0x530>
1001095a:	2a00      	cmp	r2, #0
1001095c:	d175      	bne.n	10010a4a <__aeabi_dsub+0x566>
1001095e:	0002      	movs	r2, r0
10010960:	430a      	orrs	r2, r1
10010962:	d100      	bne.n	10010966 <__aeabi_dsub+0x482>
10010964:	e0ca      	b.n	10010afc <__aeabi_dsub+0x618>
10010966:	0007      	movs	r7, r0
10010968:	000d      	movs	r5, r1
1001096a:	469a      	mov	sl, r3
1001096c:	e5e6      	b.n	1001053c <__aeabi_dsub+0x58>
1001096e:	4664      	mov	r4, ip
10010970:	2200      	movs	r2, #0
10010972:	2500      	movs	r5, #0
10010974:	e681      	b.n	1001067a <__aeabi_dsub+0x196>
10010976:	4662      	mov	r2, ip
10010978:	0006      	movs	r6, r0
1001097a:	3a20      	subs	r2, #32
1001097c:	40d6      	lsrs	r6, r2
1001097e:	4662      	mov	r2, ip
10010980:	46b0      	mov	r8, r6
10010982:	2a20      	cmp	r2, #32
10010984:	d100      	bne.n	10010988 <__aeabi_dsub+0x4a4>
10010986:	e0b7      	b.n	10010af8 <__aeabi_dsub+0x614>
10010988:	2240      	movs	r2, #64	; 0x40
1001098a:	4666      	mov	r6, ip
1001098c:	1b92      	subs	r2, r2, r6
1001098e:	4090      	lsls	r0, r2
10010990:	4301      	orrs	r1, r0
10010992:	4642      	mov	r2, r8
10010994:	1e48      	subs	r0, r1, #1
10010996:	4181      	sbcs	r1, r0
10010998:	4311      	orrs	r1, r2
1001099a:	2200      	movs	r2, #0
1001099c:	e68a      	b.n	100106b4 <__aeabi_dsub+0x1d0>
1001099e:	4c79      	ldr	r4, [pc, #484]	; (10010b84 <__aeabi_dsub+0x6a0>)
100109a0:	42a2      	cmp	r2, r4
100109a2:	d000      	beq.n	100109a6 <__aeabi_dsub+0x4c2>
100109a4:	e761      	b.n	1001086a <__aeabi_dsub+0x386>
100109a6:	0007      	movs	r7, r0
100109a8:	000d      	movs	r5, r1
100109aa:	0014      	movs	r4, r2
100109ac:	469a      	mov	sl, r3
100109ae:	e5c5      	b.n	1001053c <__aeabi_dsub+0x58>
100109b0:	2c00      	cmp	r4, #0
100109b2:	d141      	bne.n	10010a38 <__aeabi_dsub+0x554>
100109b4:	003c      	movs	r4, r7
100109b6:	432c      	orrs	r4, r5
100109b8:	d078      	beq.n	10010aac <__aeabi_dsub+0x5c8>
100109ba:	43f4      	mvns	r4, r6
100109bc:	46a1      	mov	r9, r4
100109be:	2c00      	cmp	r4, #0
100109c0:	d020      	beq.n	10010a04 <__aeabi_dsub+0x520>
100109c2:	4c70      	ldr	r4, [pc, #448]	; (10010b84 <__aeabi_dsub+0x6a0>)
100109c4:	42a2      	cmp	r2, r4
100109c6:	d071      	beq.n	10010aac <__aeabi_dsub+0x5c8>
100109c8:	464c      	mov	r4, r9
100109ca:	2c38      	cmp	r4, #56	; 0x38
100109cc:	dd00      	ble.n	100109d0 <__aeabi_dsub+0x4ec>
100109ce:	e0b2      	b.n	10010b36 <__aeabi_dsub+0x652>
100109d0:	2c1f      	cmp	r4, #31
100109d2:	dd00      	ble.n	100109d6 <__aeabi_dsub+0x4f2>
100109d4:	e0bc      	b.n	10010b50 <__aeabi_dsub+0x66c>
100109d6:	2620      	movs	r6, #32
100109d8:	1b34      	subs	r4, r6, r4
100109da:	46a2      	mov	sl, r4
100109dc:	003c      	movs	r4, r7
100109de:	4656      	mov	r6, sl
100109e0:	40b4      	lsls	r4, r6
100109e2:	464e      	mov	r6, r9
100109e4:	46a0      	mov	r8, r4
100109e6:	002c      	movs	r4, r5
100109e8:	40f4      	lsrs	r4, r6
100109ea:	46a4      	mov	ip, r4
100109ec:	4644      	mov	r4, r8
100109ee:	4666      	mov	r6, ip
100109f0:	4334      	orrs	r4, r6
100109f2:	46a4      	mov	ip, r4
100109f4:	4654      	mov	r4, sl
100109f6:	40a5      	lsls	r5, r4
100109f8:	4664      	mov	r4, ip
100109fa:	1e6e      	subs	r6, r5, #1
100109fc:	41b5      	sbcs	r5, r6
100109fe:	4325      	orrs	r5, r4
10010a00:	464c      	mov	r4, r9
10010a02:	40e7      	lsrs	r7, r4
10010a04:	186d      	adds	r5, r5, r1
10010a06:	428d      	cmp	r5, r1
10010a08:	4189      	sbcs	r1, r1
10010a0a:	183f      	adds	r7, r7, r0
10010a0c:	4249      	negs	r1, r1
10010a0e:	19cf      	adds	r7, r1, r7
10010a10:	0014      	movs	r4, r2
10010a12:	e656      	b.n	100106c2 <__aeabi_dsub+0x1de>
10010a14:	2a00      	cmp	r2, #0
10010a16:	d12f      	bne.n	10010a78 <__aeabi_dsub+0x594>
10010a18:	0002      	movs	r2, r0
10010a1a:	430a      	orrs	r2, r1
10010a1c:	d100      	bne.n	10010a20 <__aeabi_dsub+0x53c>
10010a1e:	e084      	b.n	10010b2a <__aeabi_dsub+0x646>
10010a20:	0007      	movs	r7, r0
10010a22:	000d      	movs	r5, r1
10010a24:	469a      	mov	sl, r3
10010a26:	4c57      	ldr	r4, [pc, #348]	; (10010b84 <__aeabi_dsub+0x6a0>)
10010a28:	e588      	b.n	1001053c <__aeabi_dsub+0x58>
10010a2a:	433d      	orrs	r5, r7
10010a2c:	1e6f      	subs	r7, r5, #1
10010a2e:	41bd      	sbcs	r5, r7
10010a30:	b2ec      	uxtb	r4, r5
10010a32:	2700      	movs	r7, #0
10010a34:	1b0d      	subs	r5, r1, r4
10010a36:	e760      	b.n	100108fa <__aeabi_dsub+0x416>
10010a38:	4c52      	ldr	r4, [pc, #328]	; (10010b84 <__aeabi_dsub+0x6a0>)
10010a3a:	42a2      	cmp	r2, r4
10010a3c:	d036      	beq.n	10010aac <__aeabi_dsub+0x5c8>
10010a3e:	4274      	negs	r4, r6
10010a40:	2680      	movs	r6, #128	; 0x80
10010a42:	0436      	lsls	r6, r6, #16
10010a44:	46a1      	mov	r9, r4
10010a46:	4337      	orrs	r7, r6
10010a48:	e7be      	b.n	100109c8 <__aeabi_dsub+0x4e4>
10010a4a:	0002      	movs	r2, r0
10010a4c:	430a      	orrs	r2, r1
10010a4e:	d100      	bne.n	10010a52 <__aeabi_dsub+0x56e>
10010a50:	e574      	b.n	1001053c <__aeabi_dsub+0x58>
10010a52:	1a6a      	subs	r2, r5, r1
10010a54:	4690      	mov	r8, r2
10010a56:	4545      	cmp	r5, r8
10010a58:	41b6      	sbcs	r6, r6
10010a5a:	1a3a      	subs	r2, r7, r0
10010a5c:	4276      	negs	r6, r6
10010a5e:	1b92      	subs	r2, r2, r6
10010a60:	4694      	mov	ip, r2
10010a62:	0212      	lsls	r2, r2, #8
10010a64:	d400      	bmi.n	10010a68 <__aeabi_dsub+0x584>
10010a66:	e5f7      	b.n	10010658 <__aeabi_dsub+0x174>
10010a68:	1b4d      	subs	r5, r1, r5
10010a6a:	42a9      	cmp	r1, r5
10010a6c:	4189      	sbcs	r1, r1
10010a6e:	1bc7      	subs	r7, r0, r7
10010a70:	4249      	negs	r1, r1
10010a72:	1a7f      	subs	r7, r7, r1
10010a74:	469a      	mov	sl, r3
10010a76:	e561      	b.n	1001053c <__aeabi_dsub+0x58>
10010a78:	0002      	movs	r2, r0
10010a7a:	430a      	orrs	r2, r1
10010a7c:	d03a      	beq.n	10010af4 <__aeabi_dsub+0x610>
10010a7e:	08ed      	lsrs	r5, r5, #3
10010a80:	077c      	lsls	r4, r7, #29
10010a82:	432c      	orrs	r4, r5
10010a84:	2580      	movs	r5, #128	; 0x80
10010a86:	08fa      	lsrs	r2, r7, #3
10010a88:	032d      	lsls	r5, r5, #12
10010a8a:	422a      	tst	r2, r5
10010a8c:	d008      	beq.n	10010aa0 <__aeabi_dsub+0x5bc>
10010a8e:	08c7      	lsrs	r7, r0, #3
10010a90:	422f      	tst	r7, r5
10010a92:	d105      	bne.n	10010aa0 <__aeabi_dsub+0x5bc>
10010a94:	0745      	lsls	r5, r0, #29
10010a96:	002c      	movs	r4, r5
10010a98:	003a      	movs	r2, r7
10010a9a:	469a      	mov	sl, r3
10010a9c:	08c9      	lsrs	r1, r1, #3
10010a9e:	430c      	orrs	r4, r1
10010aa0:	0f67      	lsrs	r7, r4, #29
10010aa2:	00d2      	lsls	r2, r2, #3
10010aa4:	00e5      	lsls	r5, r4, #3
10010aa6:	4317      	orrs	r7, r2
10010aa8:	4c36      	ldr	r4, [pc, #216]	; (10010b84 <__aeabi_dsub+0x6a0>)
10010aaa:	e547      	b.n	1001053c <__aeabi_dsub+0x58>
10010aac:	0007      	movs	r7, r0
10010aae:	000d      	movs	r5, r1
10010ab0:	0014      	movs	r4, r2
10010ab2:	e543      	b.n	1001053c <__aeabi_dsub+0x58>
10010ab4:	003a      	movs	r2, r7
10010ab6:	432a      	orrs	r2, r5
10010ab8:	d043      	beq.n	10010b42 <__aeabi_dsub+0x65e>
10010aba:	0002      	movs	r2, r0
10010abc:	430a      	orrs	r2, r1
10010abe:	d019      	beq.n	10010af4 <__aeabi_dsub+0x610>
10010ac0:	08ed      	lsrs	r5, r5, #3
10010ac2:	077c      	lsls	r4, r7, #29
10010ac4:	432c      	orrs	r4, r5
10010ac6:	2580      	movs	r5, #128	; 0x80
10010ac8:	08fa      	lsrs	r2, r7, #3
10010aca:	032d      	lsls	r5, r5, #12
10010acc:	422a      	tst	r2, r5
10010ace:	d007      	beq.n	10010ae0 <__aeabi_dsub+0x5fc>
10010ad0:	08c6      	lsrs	r6, r0, #3
10010ad2:	422e      	tst	r6, r5
10010ad4:	d104      	bne.n	10010ae0 <__aeabi_dsub+0x5fc>
10010ad6:	0747      	lsls	r7, r0, #29
10010ad8:	003c      	movs	r4, r7
10010ada:	0032      	movs	r2, r6
10010adc:	08c9      	lsrs	r1, r1, #3
10010ade:	430c      	orrs	r4, r1
10010ae0:	00d7      	lsls	r7, r2, #3
10010ae2:	0f62      	lsrs	r2, r4, #29
10010ae4:	00e5      	lsls	r5, r4, #3
10010ae6:	4317      	orrs	r7, r2
10010ae8:	469a      	mov	sl, r3
10010aea:	4c26      	ldr	r4, [pc, #152]	; (10010b84 <__aeabi_dsub+0x6a0>)
10010aec:	e526      	b.n	1001053c <__aeabi_dsub+0x58>
10010aee:	2200      	movs	r2, #0
10010af0:	2500      	movs	r5, #0
10010af2:	e544      	b.n	1001057e <__aeabi_dsub+0x9a>
10010af4:	4c23      	ldr	r4, [pc, #140]	; (10010b84 <__aeabi_dsub+0x6a0>)
10010af6:	e521      	b.n	1001053c <__aeabi_dsub+0x58>
10010af8:	2000      	movs	r0, #0
10010afa:	e749      	b.n	10010990 <__aeabi_dsub+0x4ac>
10010afc:	2300      	movs	r3, #0
10010afe:	2500      	movs	r5, #0
10010b00:	e5bb      	b.n	1001067a <__aeabi_dsub+0x196>
10010b02:	464c      	mov	r4, r9
10010b04:	003e      	movs	r6, r7
10010b06:	3c20      	subs	r4, #32
10010b08:	40e6      	lsrs	r6, r4
10010b0a:	464c      	mov	r4, r9
10010b0c:	46b4      	mov	ip, r6
10010b0e:	2c20      	cmp	r4, #32
10010b10:	d031      	beq.n	10010b76 <__aeabi_dsub+0x692>
10010b12:	2440      	movs	r4, #64	; 0x40
10010b14:	464e      	mov	r6, r9
10010b16:	1ba6      	subs	r6, r4, r6
10010b18:	40b7      	lsls	r7, r6
10010b1a:	433d      	orrs	r5, r7
10010b1c:	1e6c      	subs	r4, r5, #1
10010b1e:	41a5      	sbcs	r5, r4
10010b20:	4664      	mov	r4, ip
10010b22:	432c      	orrs	r4, r5
10010b24:	2700      	movs	r7, #0
10010b26:	1b0d      	subs	r5, r1, r4
10010b28:	e6e7      	b.n	100108fa <__aeabi_dsub+0x416>
10010b2a:	2280      	movs	r2, #128	; 0x80
10010b2c:	2300      	movs	r3, #0
10010b2e:	0312      	lsls	r2, r2, #12
10010b30:	4c14      	ldr	r4, [pc, #80]	; (10010b84 <__aeabi_dsub+0x6a0>)
10010b32:	2500      	movs	r5, #0
10010b34:	e5a1      	b.n	1001067a <__aeabi_dsub+0x196>
10010b36:	433d      	orrs	r5, r7
10010b38:	1e6f      	subs	r7, r5, #1
10010b3a:	41bd      	sbcs	r5, r7
10010b3c:	2700      	movs	r7, #0
10010b3e:	b2ed      	uxtb	r5, r5
10010b40:	e760      	b.n	10010a04 <__aeabi_dsub+0x520>
10010b42:	0007      	movs	r7, r0
10010b44:	000d      	movs	r5, r1
10010b46:	4c0f      	ldr	r4, [pc, #60]	; (10010b84 <__aeabi_dsub+0x6a0>)
10010b48:	e4f8      	b.n	1001053c <__aeabi_dsub+0x58>
10010b4a:	0007      	movs	r7, r0
10010b4c:	000d      	movs	r5, r1
10010b4e:	e4f5      	b.n	1001053c <__aeabi_dsub+0x58>
10010b50:	464e      	mov	r6, r9
10010b52:	003c      	movs	r4, r7
10010b54:	3e20      	subs	r6, #32
10010b56:	40f4      	lsrs	r4, r6
10010b58:	46a0      	mov	r8, r4
10010b5a:	464c      	mov	r4, r9
10010b5c:	2c20      	cmp	r4, #32
10010b5e:	d00e      	beq.n	10010b7e <__aeabi_dsub+0x69a>
10010b60:	2440      	movs	r4, #64	; 0x40
10010b62:	464e      	mov	r6, r9
10010b64:	1ba4      	subs	r4, r4, r6
10010b66:	40a7      	lsls	r7, r4
10010b68:	433d      	orrs	r5, r7
10010b6a:	1e6f      	subs	r7, r5, #1
10010b6c:	41bd      	sbcs	r5, r7
10010b6e:	4644      	mov	r4, r8
10010b70:	2700      	movs	r7, #0
10010b72:	4325      	orrs	r5, r4
10010b74:	e746      	b.n	10010a04 <__aeabi_dsub+0x520>
10010b76:	2700      	movs	r7, #0
10010b78:	e7cf      	b.n	10010b1a <__aeabi_dsub+0x636>
10010b7a:	000d      	movs	r5, r1
10010b7c:	e573      	b.n	10010666 <__aeabi_dsub+0x182>
10010b7e:	2700      	movs	r7, #0
10010b80:	e7f2      	b.n	10010b68 <__aeabi_dsub+0x684>
10010b82:	46c0      	nop			; (mov r8, r8)
10010b84:	000007ff 	.word	0x000007ff
10010b88:	ff7fffff 	.word	0xff7fffff

10010b8c <__aeabi_d2iz>:
10010b8c:	030b      	lsls	r3, r1, #12
10010b8e:	b530      	push	{r4, r5, lr}
10010b90:	4d13      	ldr	r5, [pc, #76]	; (10010be0 <__aeabi_d2iz+0x54>)
10010b92:	0b1a      	lsrs	r2, r3, #12
10010b94:	004b      	lsls	r3, r1, #1
10010b96:	0d5b      	lsrs	r3, r3, #21
10010b98:	0fc9      	lsrs	r1, r1, #31
10010b9a:	2400      	movs	r4, #0
10010b9c:	42ab      	cmp	r3, r5
10010b9e:	dd11      	ble.n	10010bc4 <__aeabi_d2iz+0x38>
10010ba0:	4c10      	ldr	r4, [pc, #64]	; (10010be4 <__aeabi_d2iz+0x58>)
10010ba2:	42a3      	cmp	r3, r4
10010ba4:	dc10      	bgt.n	10010bc8 <__aeabi_d2iz+0x3c>
10010ba6:	2480      	movs	r4, #128	; 0x80
10010ba8:	0364      	lsls	r4, r4, #13
10010baa:	4322      	orrs	r2, r4
10010bac:	4c0e      	ldr	r4, [pc, #56]	; (10010be8 <__aeabi_d2iz+0x5c>)
10010bae:	1ae4      	subs	r4, r4, r3
10010bb0:	2c1f      	cmp	r4, #31
10010bb2:	dd0c      	ble.n	10010bce <__aeabi_d2iz+0x42>
10010bb4:	480d      	ldr	r0, [pc, #52]	; (10010bec <__aeabi_d2iz+0x60>)
10010bb6:	1ac3      	subs	r3, r0, r3
10010bb8:	40da      	lsrs	r2, r3
10010bba:	0013      	movs	r3, r2
10010bbc:	425c      	negs	r4, r3
10010bbe:	2900      	cmp	r1, #0
10010bc0:	d100      	bne.n	10010bc4 <__aeabi_d2iz+0x38>
10010bc2:	001c      	movs	r4, r3
10010bc4:	0020      	movs	r0, r4
10010bc6:	bd30      	pop	{r4, r5, pc}
10010bc8:	4b09      	ldr	r3, [pc, #36]	; (10010bf0 <__aeabi_d2iz+0x64>)
10010bca:	18cc      	adds	r4, r1, r3
10010bcc:	e7fa      	b.n	10010bc4 <__aeabi_d2iz+0x38>
10010bce:	40e0      	lsrs	r0, r4
10010bd0:	4c08      	ldr	r4, [pc, #32]	; (10010bf4 <__aeabi_d2iz+0x68>)
10010bd2:	46a4      	mov	ip, r4
10010bd4:	4463      	add	r3, ip
10010bd6:	409a      	lsls	r2, r3
10010bd8:	0013      	movs	r3, r2
10010bda:	4303      	orrs	r3, r0
10010bdc:	e7ee      	b.n	10010bbc <__aeabi_d2iz+0x30>
10010bde:	46c0      	nop			; (mov r8, r8)
10010be0:	000003fe 	.word	0x000003fe
10010be4:	0000041d 	.word	0x0000041d
10010be8:	00000433 	.word	0x00000433
10010bec:	00000413 	.word	0x00000413
10010bf0:	7fffffff 	.word	0x7fffffff
10010bf4:	fffffbed 	.word	0xfffffbed

10010bf8 <__aeabi_ui2d>:
10010bf8:	b570      	push	{r4, r5, r6, lr}
10010bfa:	1e05      	subs	r5, r0, #0
10010bfc:	d028      	beq.n	10010c50 <__aeabi_ui2d+0x58>
10010bfe:	f000 f871 	bl	10010ce4 <__clzsi2>
10010c02:	4b15      	ldr	r3, [pc, #84]	; (10010c58 <__aeabi_ui2d+0x60>)
10010c04:	4a15      	ldr	r2, [pc, #84]	; (10010c5c <__aeabi_ui2d+0x64>)
10010c06:	1a1b      	subs	r3, r3, r0
10010c08:	1ad2      	subs	r2, r2, r3
10010c0a:	2a1f      	cmp	r2, #31
10010c0c:	dd16      	ble.n	10010c3c <__aeabi_ui2d+0x44>
10010c0e:	002c      	movs	r4, r5
10010c10:	4a13      	ldr	r2, [pc, #76]	; (10010c60 <__aeabi_ui2d+0x68>)
10010c12:	2500      	movs	r5, #0
10010c14:	1ad2      	subs	r2, r2, r3
10010c16:	4094      	lsls	r4, r2
10010c18:	055a      	lsls	r2, r3, #21
10010c1a:	0324      	lsls	r4, r4, #12
10010c1c:	0b24      	lsrs	r4, r4, #12
10010c1e:	0d52      	lsrs	r2, r2, #21
10010c20:	2100      	movs	r1, #0
10010c22:	0324      	lsls	r4, r4, #12
10010c24:	0d0b      	lsrs	r3, r1, #20
10010c26:	0b24      	lsrs	r4, r4, #12
10010c28:	051b      	lsls	r3, r3, #20
10010c2a:	4323      	orrs	r3, r4
10010c2c:	4c0d      	ldr	r4, [pc, #52]	; (10010c64 <__aeabi_ui2d+0x6c>)
10010c2e:	0512      	lsls	r2, r2, #20
10010c30:	4023      	ands	r3, r4
10010c32:	4313      	orrs	r3, r2
10010c34:	005b      	lsls	r3, r3, #1
10010c36:	0028      	movs	r0, r5
10010c38:	0859      	lsrs	r1, r3, #1
10010c3a:	bd70      	pop	{r4, r5, r6, pc}
10010c3c:	210b      	movs	r1, #11
10010c3e:	002c      	movs	r4, r5
10010c40:	1a08      	subs	r0, r1, r0
10010c42:	40c4      	lsrs	r4, r0
10010c44:	4095      	lsls	r5, r2
10010c46:	0324      	lsls	r4, r4, #12
10010c48:	055a      	lsls	r2, r3, #21
10010c4a:	0b24      	lsrs	r4, r4, #12
10010c4c:	0d52      	lsrs	r2, r2, #21
10010c4e:	e7e7      	b.n	10010c20 <__aeabi_ui2d+0x28>
10010c50:	2200      	movs	r2, #0
10010c52:	2400      	movs	r4, #0
10010c54:	e7e4      	b.n	10010c20 <__aeabi_ui2d+0x28>
10010c56:	46c0      	nop			; (mov r8, r8)
10010c58:	0000041e 	.word	0x0000041e
10010c5c:	00000433 	.word	0x00000433
10010c60:	00000413 	.word	0x00000413
10010c64:	800fffff 	.word	0x800fffff

10010c68 <__aeabi_cdrcmple>:
10010c68:	4684      	mov	ip, r0
10010c6a:	1c10      	adds	r0, r2, #0
10010c6c:	4662      	mov	r2, ip
10010c6e:	468c      	mov	ip, r1
10010c70:	1c19      	adds	r1, r3, #0
10010c72:	4663      	mov	r3, ip
10010c74:	e000      	b.n	10010c78 <__aeabi_cdcmpeq>
10010c76:	46c0      	nop			; (mov r8, r8)

10010c78 <__aeabi_cdcmpeq>:
10010c78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10010c7a:	f000 f8f5 	bl	10010e68 <__ledf2>
10010c7e:	2800      	cmp	r0, #0
10010c80:	d401      	bmi.n	10010c86 <__aeabi_cdcmpeq+0xe>
10010c82:	2100      	movs	r1, #0
10010c84:	42c8      	cmn	r0, r1
10010c86:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10010c88 <__aeabi_dcmpeq>:
10010c88:	b510      	push	{r4, lr}
10010c8a:	f000 f849 	bl	10010d20 <__eqdf2>
10010c8e:	4240      	negs	r0, r0
10010c90:	3001      	adds	r0, #1
10010c92:	bd10      	pop	{r4, pc}

10010c94 <__aeabi_dcmplt>:
10010c94:	b510      	push	{r4, lr}
10010c96:	f000 f8e7 	bl	10010e68 <__ledf2>
10010c9a:	2800      	cmp	r0, #0
10010c9c:	db01      	blt.n	10010ca2 <__aeabi_dcmplt+0xe>
10010c9e:	2000      	movs	r0, #0
10010ca0:	bd10      	pop	{r4, pc}
10010ca2:	2001      	movs	r0, #1
10010ca4:	bd10      	pop	{r4, pc}
10010ca6:	46c0      	nop			; (mov r8, r8)

10010ca8 <__aeabi_dcmple>:
10010ca8:	b510      	push	{r4, lr}
10010caa:	f000 f8dd 	bl	10010e68 <__ledf2>
10010cae:	2800      	cmp	r0, #0
10010cb0:	dd01      	ble.n	10010cb6 <__aeabi_dcmple+0xe>
10010cb2:	2000      	movs	r0, #0
10010cb4:	bd10      	pop	{r4, pc}
10010cb6:	2001      	movs	r0, #1
10010cb8:	bd10      	pop	{r4, pc}
10010cba:	46c0      	nop			; (mov r8, r8)

10010cbc <__aeabi_dcmpgt>:
10010cbc:	b510      	push	{r4, lr}
10010cbe:	f000 f86f 	bl	10010da0 <__gedf2>
10010cc2:	2800      	cmp	r0, #0
10010cc4:	dc01      	bgt.n	10010cca <__aeabi_dcmpgt+0xe>
10010cc6:	2000      	movs	r0, #0
10010cc8:	bd10      	pop	{r4, pc}
10010cca:	2001      	movs	r0, #1
10010ccc:	bd10      	pop	{r4, pc}
10010cce:	46c0      	nop			; (mov r8, r8)

10010cd0 <__aeabi_dcmpge>:
10010cd0:	b510      	push	{r4, lr}
10010cd2:	f000 f865 	bl	10010da0 <__gedf2>
10010cd6:	2800      	cmp	r0, #0
10010cd8:	da01      	bge.n	10010cde <__aeabi_dcmpge+0xe>
10010cda:	2000      	movs	r0, #0
10010cdc:	bd10      	pop	{r4, pc}
10010cde:	2001      	movs	r0, #1
10010ce0:	bd10      	pop	{r4, pc}
10010ce2:	46c0      	nop			; (mov r8, r8)

10010ce4 <__clzsi2>:
10010ce4:	211c      	movs	r1, #28
10010ce6:	2301      	movs	r3, #1
10010ce8:	041b      	lsls	r3, r3, #16
10010cea:	4298      	cmp	r0, r3
10010cec:	d301      	bcc.n	10010cf2 <__clzsi2+0xe>
10010cee:	0c00      	lsrs	r0, r0, #16
10010cf0:	3910      	subs	r1, #16
10010cf2:	0a1b      	lsrs	r3, r3, #8
10010cf4:	4298      	cmp	r0, r3
10010cf6:	d301      	bcc.n	10010cfc <__clzsi2+0x18>
10010cf8:	0a00      	lsrs	r0, r0, #8
10010cfa:	3908      	subs	r1, #8
10010cfc:	091b      	lsrs	r3, r3, #4
10010cfe:	4298      	cmp	r0, r3
10010d00:	d301      	bcc.n	10010d06 <__clzsi2+0x22>
10010d02:	0900      	lsrs	r0, r0, #4
10010d04:	3904      	subs	r1, #4
10010d06:	a202      	add	r2, pc, #8	; (adr r2, 10010d10 <__clzsi2+0x2c>)
10010d08:	5c10      	ldrb	r0, [r2, r0]
10010d0a:	1840      	adds	r0, r0, r1
10010d0c:	4770      	bx	lr
10010d0e:	46c0      	nop			; (mov r8, r8)
10010d10:	02020304 	.word	0x02020304
10010d14:	01010101 	.word	0x01010101
	...

10010d20 <__eqdf2>:
10010d20:	b5f0      	push	{r4, r5, r6, r7, lr}
10010d22:	465f      	mov	r7, fp
10010d24:	4656      	mov	r6, sl
10010d26:	464d      	mov	r5, r9
10010d28:	4644      	mov	r4, r8
10010d2a:	b4f0      	push	{r4, r5, r6, r7}
10010d2c:	031f      	lsls	r7, r3, #12
10010d2e:	005c      	lsls	r4, r3, #1
10010d30:	0fdb      	lsrs	r3, r3, #31
10010d32:	469a      	mov	sl, r3
10010d34:	4b19      	ldr	r3, [pc, #100]	; (10010d9c <__eqdf2+0x7c>)
10010d36:	030e      	lsls	r6, r1, #12
10010d38:	004d      	lsls	r5, r1, #1
10010d3a:	0fc9      	lsrs	r1, r1, #31
10010d3c:	4680      	mov	r8, r0
10010d3e:	0b36      	lsrs	r6, r6, #12
10010d40:	0d6d      	lsrs	r5, r5, #21
10010d42:	468b      	mov	fp, r1
10010d44:	4691      	mov	r9, r2
10010d46:	0b3f      	lsrs	r7, r7, #12
10010d48:	0d64      	lsrs	r4, r4, #21
10010d4a:	429d      	cmp	r5, r3
10010d4c:	d019      	beq.n	10010d82 <__eqdf2+0x62>
10010d4e:	4b13      	ldr	r3, [pc, #76]	; (10010d9c <__eqdf2+0x7c>)
10010d50:	429c      	cmp	r4, r3
10010d52:	d01b      	beq.n	10010d8c <__eqdf2+0x6c>
10010d54:	2301      	movs	r3, #1
10010d56:	42a5      	cmp	r5, r4
10010d58:	d006      	beq.n	10010d68 <__eqdf2+0x48>
10010d5a:	0018      	movs	r0, r3
10010d5c:	bc3c      	pop	{r2, r3, r4, r5}
10010d5e:	4690      	mov	r8, r2
10010d60:	4699      	mov	r9, r3
10010d62:	46a2      	mov	sl, r4
10010d64:	46ab      	mov	fp, r5
10010d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010d68:	42be      	cmp	r6, r7
10010d6a:	d1f6      	bne.n	10010d5a <__eqdf2+0x3a>
10010d6c:	45c8      	cmp	r8, r9
10010d6e:	d1f4      	bne.n	10010d5a <__eqdf2+0x3a>
10010d70:	45d3      	cmp	fp, sl
10010d72:	d010      	beq.n	10010d96 <__eqdf2+0x76>
10010d74:	2d00      	cmp	r5, #0
10010d76:	d1f0      	bne.n	10010d5a <__eqdf2+0x3a>
10010d78:	4330      	orrs	r0, r6
10010d7a:	0003      	movs	r3, r0
10010d7c:	1e5a      	subs	r2, r3, #1
10010d7e:	4193      	sbcs	r3, r2
10010d80:	e7eb      	b.n	10010d5a <__eqdf2+0x3a>
10010d82:	0031      	movs	r1, r6
10010d84:	2301      	movs	r3, #1
10010d86:	4301      	orrs	r1, r0
10010d88:	d1e7      	bne.n	10010d5a <__eqdf2+0x3a>
10010d8a:	e7e0      	b.n	10010d4e <__eqdf2+0x2e>
10010d8c:	433a      	orrs	r2, r7
10010d8e:	2301      	movs	r3, #1
10010d90:	2a00      	cmp	r2, #0
10010d92:	d1e2      	bne.n	10010d5a <__eqdf2+0x3a>
10010d94:	e7de      	b.n	10010d54 <__eqdf2+0x34>
10010d96:	2300      	movs	r3, #0
10010d98:	e7df      	b.n	10010d5a <__eqdf2+0x3a>
10010d9a:	46c0      	nop			; (mov r8, r8)
10010d9c:	000007ff 	.word	0x000007ff

10010da0 <__gedf2>:
10010da0:	b5f0      	push	{r4, r5, r6, r7, lr}
10010da2:	465f      	mov	r7, fp
10010da4:	4644      	mov	r4, r8
10010da6:	4656      	mov	r6, sl
10010da8:	464d      	mov	r5, r9
10010daa:	b4f0      	push	{r4, r5, r6, r7}
10010dac:	031f      	lsls	r7, r3, #12
10010dae:	0b3c      	lsrs	r4, r7, #12
10010db0:	4f2c      	ldr	r7, [pc, #176]	; (10010e64 <__gedf2+0xc4>)
10010db2:	030e      	lsls	r6, r1, #12
10010db4:	004d      	lsls	r5, r1, #1
10010db6:	46a3      	mov	fp, r4
10010db8:	005c      	lsls	r4, r3, #1
10010dba:	4684      	mov	ip, r0
10010dbc:	0b36      	lsrs	r6, r6, #12
10010dbe:	0d6d      	lsrs	r5, r5, #21
10010dc0:	0fc9      	lsrs	r1, r1, #31
10010dc2:	4690      	mov	r8, r2
10010dc4:	0d64      	lsrs	r4, r4, #21
10010dc6:	0fdb      	lsrs	r3, r3, #31
10010dc8:	42bd      	cmp	r5, r7
10010dca:	d02b      	beq.n	10010e24 <__gedf2+0x84>
10010dcc:	4f25      	ldr	r7, [pc, #148]	; (10010e64 <__gedf2+0xc4>)
10010dce:	42bc      	cmp	r4, r7
10010dd0:	d02e      	beq.n	10010e30 <__gedf2+0x90>
10010dd2:	2d00      	cmp	r5, #0
10010dd4:	d10e      	bne.n	10010df4 <__gedf2+0x54>
10010dd6:	4330      	orrs	r0, r6
10010dd8:	0007      	movs	r7, r0
10010dda:	4681      	mov	r9, r0
10010ddc:	4278      	negs	r0, r7
10010dde:	4178      	adcs	r0, r7
10010de0:	2c00      	cmp	r4, #0
10010de2:	d117      	bne.n	10010e14 <__gedf2+0x74>
10010de4:	465f      	mov	r7, fp
10010de6:	433a      	orrs	r2, r7
10010de8:	d114      	bne.n	10010e14 <__gedf2+0x74>
10010dea:	464b      	mov	r3, r9
10010dec:	2000      	movs	r0, #0
10010dee:	2b00      	cmp	r3, #0
10010df0:	d00a      	beq.n	10010e08 <__gedf2+0x68>
10010df2:	e006      	b.n	10010e02 <__gedf2+0x62>
10010df4:	2c00      	cmp	r4, #0
10010df6:	d102      	bne.n	10010dfe <__gedf2+0x5e>
10010df8:	4658      	mov	r0, fp
10010dfa:	4302      	orrs	r2, r0
10010dfc:	d001      	beq.n	10010e02 <__gedf2+0x62>
10010dfe:	4299      	cmp	r1, r3
10010e00:	d01a      	beq.n	10010e38 <__gedf2+0x98>
10010e02:	2301      	movs	r3, #1
10010e04:	4248      	negs	r0, r1
10010e06:	4318      	orrs	r0, r3
10010e08:	bc3c      	pop	{r2, r3, r4, r5}
10010e0a:	4690      	mov	r8, r2
10010e0c:	4699      	mov	r9, r3
10010e0e:	46a2      	mov	sl, r4
10010e10:	46ab      	mov	fp, r5
10010e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010e14:	2800      	cmp	r0, #0
10010e16:	d0f2      	beq.n	10010dfe <__gedf2+0x5e>
10010e18:	4258      	negs	r0, r3
10010e1a:	4158      	adcs	r0, r3
10010e1c:	2201      	movs	r2, #1
10010e1e:	4240      	negs	r0, r0
10010e20:	4310      	orrs	r0, r2
10010e22:	e7f1      	b.n	10010e08 <__gedf2+0x68>
10010e24:	0037      	movs	r7, r6
10010e26:	4307      	orrs	r7, r0
10010e28:	d0d0      	beq.n	10010dcc <__gedf2+0x2c>
10010e2a:	2002      	movs	r0, #2
10010e2c:	4240      	negs	r0, r0
10010e2e:	e7eb      	b.n	10010e08 <__gedf2+0x68>
10010e30:	465f      	mov	r7, fp
10010e32:	4317      	orrs	r7, r2
10010e34:	d0cd      	beq.n	10010dd2 <__gedf2+0x32>
10010e36:	e7f8      	b.n	10010e2a <__gedf2+0x8a>
10010e38:	42a5      	cmp	r5, r4
10010e3a:	dce2      	bgt.n	10010e02 <__gedf2+0x62>
10010e3c:	db05      	blt.n	10010e4a <__gedf2+0xaa>
10010e3e:	455e      	cmp	r6, fp
10010e40:	d8df      	bhi.n	10010e02 <__gedf2+0x62>
10010e42:	d008      	beq.n	10010e56 <__gedf2+0xb6>
10010e44:	2000      	movs	r0, #0
10010e46:	455e      	cmp	r6, fp
10010e48:	d2de      	bcs.n	10010e08 <__gedf2+0x68>
10010e4a:	4248      	negs	r0, r1
10010e4c:	4148      	adcs	r0, r1
10010e4e:	2301      	movs	r3, #1
10010e50:	4240      	negs	r0, r0
10010e52:	4318      	orrs	r0, r3
10010e54:	e7d8      	b.n	10010e08 <__gedf2+0x68>
10010e56:	45c4      	cmp	ip, r8
10010e58:	d8d3      	bhi.n	10010e02 <__gedf2+0x62>
10010e5a:	2000      	movs	r0, #0
10010e5c:	45c4      	cmp	ip, r8
10010e5e:	d3f4      	bcc.n	10010e4a <__gedf2+0xaa>
10010e60:	e7d2      	b.n	10010e08 <__gedf2+0x68>
10010e62:	46c0      	nop			; (mov r8, r8)
10010e64:	000007ff 	.word	0x000007ff

10010e68 <__ledf2>:
10010e68:	b5f0      	push	{r4, r5, r6, r7, lr}
10010e6a:	465f      	mov	r7, fp
10010e6c:	464d      	mov	r5, r9
10010e6e:	4644      	mov	r4, r8
10010e70:	4656      	mov	r6, sl
10010e72:	b4f0      	push	{r4, r5, r6, r7}
10010e74:	031c      	lsls	r4, r3, #12
10010e76:	0b24      	lsrs	r4, r4, #12
10010e78:	46a4      	mov	ip, r4
10010e7a:	4c2f      	ldr	r4, [pc, #188]	; (10010f38 <__ledf2+0xd0>)
10010e7c:	030f      	lsls	r7, r1, #12
10010e7e:	004d      	lsls	r5, r1, #1
10010e80:	005e      	lsls	r6, r3, #1
10010e82:	0fc9      	lsrs	r1, r1, #31
10010e84:	4680      	mov	r8, r0
10010e86:	0b3f      	lsrs	r7, r7, #12
10010e88:	0d6d      	lsrs	r5, r5, #21
10010e8a:	468b      	mov	fp, r1
10010e8c:	4691      	mov	r9, r2
10010e8e:	0d76      	lsrs	r6, r6, #21
10010e90:	0fdb      	lsrs	r3, r3, #31
10010e92:	42a5      	cmp	r5, r4
10010e94:	d020      	beq.n	10010ed8 <__ledf2+0x70>
10010e96:	4c28      	ldr	r4, [pc, #160]	; (10010f38 <__ledf2+0xd0>)
10010e98:	42a6      	cmp	r6, r4
10010e9a:	d022      	beq.n	10010ee2 <__ledf2+0x7a>
10010e9c:	2d00      	cmp	r5, #0
10010e9e:	d112      	bne.n	10010ec6 <__ledf2+0x5e>
10010ea0:	4338      	orrs	r0, r7
10010ea2:	4244      	negs	r4, r0
10010ea4:	4144      	adcs	r4, r0
10010ea6:	2e00      	cmp	r6, #0
10010ea8:	d020      	beq.n	10010eec <__ledf2+0x84>
10010eaa:	2c00      	cmp	r4, #0
10010eac:	d00d      	beq.n	10010eca <__ledf2+0x62>
10010eae:	425c      	negs	r4, r3
10010eb0:	4163      	adcs	r3, r4
10010eb2:	2401      	movs	r4, #1
10010eb4:	425b      	negs	r3, r3
10010eb6:	431c      	orrs	r4, r3
10010eb8:	0020      	movs	r0, r4
10010eba:	bc3c      	pop	{r2, r3, r4, r5}
10010ebc:	4690      	mov	r8, r2
10010ebe:	4699      	mov	r9, r3
10010ec0:	46a2      	mov	sl, r4
10010ec2:	46ab      	mov	fp, r5
10010ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010ec6:	2e00      	cmp	r6, #0
10010ec8:	d017      	beq.n	10010efa <__ledf2+0x92>
10010eca:	455b      	cmp	r3, fp
10010ecc:	d019      	beq.n	10010f02 <__ledf2+0x9a>
10010ece:	465b      	mov	r3, fp
10010ed0:	425c      	negs	r4, r3
10010ed2:	2301      	movs	r3, #1
10010ed4:	431c      	orrs	r4, r3
10010ed6:	e7ef      	b.n	10010eb8 <__ledf2+0x50>
10010ed8:	0039      	movs	r1, r7
10010eda:	2402      	movs	r4, #2
10010edc:	4301      	orrs	r1, r0
10010ede:	d1eb      	bne.n	10010eb8 <__ledf2+0x50>
10010ee0:	e7d9      	b.n	10010e96 <__ledf2+0x2e>
10010ee2:	4661      	mov	r1, ip
10010ee4:	2402      	movs	r4, #2
10010ee6:	4311      	orrs	r1, r2
10010ee8:	d1e6      	bne.n	10010eb8 <__ledf2+0x50>
10010eea:	e7d7      	b.n	10010e9c <__ledf2+0x34>
10010eec:	4661      	mov	r1, ip
10010eee:	430a      	orrs	r2, r1
10010ef0:	d1db      	bne.n	10010eaa <__ledf2+0x42>
10010ef2:	2400      	movs	r4, #0
10010ef4:	2800      	cmp	r0, #0
10010ef6:	d0df      	beq.n	10010eb8 <__ledf2+0x50>
10010ef8:	e7e9      	b.n	10010ece <__ledf2+0x66>
10010efa:	4661      	mov	r1, ip
10010efc:	430a      	orrs	r2, r1
10010efe:	d1e4      	bne.n	10010eca <__ledf2+0x62>
10010f00:	e7e5      	b.n	10010ece <__ledf2+0x66>
10010f02:	42b5      	cmp	r5, r6
10010f04:	dd03      	ble.n	10010f0e <__ledf2+0xa6>
10010f06:	2201      	movs	r2, #1
10010f08:	425c      	negs	r4, r3
10010f0a:	4314      	orrs	r4, r2
10010f0c:	e7d4      	b.n	10010eb8 <__ledf2+0x50>
10010f0e:	42b5      	cmp	r5, r6
10010f10:	dbcd      	blt.n	10010eae <__ledf2+0x46>
10010f12:	4567      	cmp	r7, ip
10010f14:	d8db      	bhi.n	10010ece <__ledf2+0x66>
10010f16:	d009      	beq.n	10010f2c <__ledf2+0xc4>
10010f18:	2400      	movs	r4, #0
10010f1a:	4567      	cmp	r7, ip
10010f1c:	d2cc      	bcs.n	10010eb8 <__ledf2+0x50>
10010f1e:	4659      	mov	r1, fp
10010f20:	424c      	negs	r4, r1
10010f22:	4161      	adcs	r1, r4
10010f24:	2401      	movs	r4, #1
10010f26:	4249      	negs	r1, r1
10010f28:	430c      	orrs	r4, r1
10010f2a:	e7c5      	b.n	10010eb8 <__ledf2+0x50>
10010f2c:	45c8      	cmp	r8, r9
10010f2e:	d8ce      	bhi.n	10010ece <__ledf2+0x66>
10010f30:	2400      	movs	r4, #0
10010f32:	45c8      	cmp	r8, r9
10010f34:	d3f3      	bcc.n	10010f1e <__ledf2+0xb6>
10010f36:	e7bf      	b.n	10010eb8 <__ledf2+0x50>
10010f38:	000007ff 	.word	0x000007ff

10010f3c <__libc_init_array>:
10010f3c:	4b0e      	ldr	r3, [pc, #56]	; (10010f78 <__libc_init_array+0x3c>)
10010f3e:	b570      	push	{r4, r5, r6, lr}
10010f40:	2500      	movs	r5, #0
10010f42:	001e      	movs	r6, r3
10010f44:	4c0d      	ldr	r4, [pc, #52]	; (10010f7c <__libc_init_array+0x40>)
10010f46:	1ae4      	subs	r4, r4, r3
10010f48:	10a4      	asrs	r4, r4, #2
10010f4a:	42a5      	cmp	r5, r4
10010f4c:	d004      	beq.n	10010f58 <__libc_init_array+0x1c>
10010f4e:	00ab      	lsls	r3, r5, #2
10010f50:	58f3      	ldr	r3, [r6, r3]
10010f52:	4798      	blx	r3
10010f54:	3501      	adds	r5, #1
10010f56:	e7f8      	b.n	10010f4a <__libc_init_array+0xe>
10010f58:	f002 fc8c 	bl	10013874 <_init>
10010f5c:	4b08      	ldr	r3, [pc, #32]	; (10010f80 <__libc_init_array+0x44>)
10010f5e:	2500      	movs	r5, #0
10010f60:	001e      	movs	r6, r3
10010f62:	4c08      	ldr	r4, [pc, #32]	; (10010f84 <__libc_init_array+0x48>)
10010f64:	1ae4      	subs	r4, r4, r3
10010f66:	10a4      	asrs	r4, r4, #2
10010f68:	42a5      	cmp	r5, r4
10010f6a:	d004      	beq.n	10010f76 <__libc_init_array+0x3a>
10010f6c:	00ab      	lsls	r3, r5, #2
10010f6e:	58f3      	ldr	r3, [r6, r3]
10010f70:	4798      	blx	r3
10010f72:	3501      	adds	r5, #1
10010f74:	e7f8      	b.n	10010f68 <__libc_init_array+0x2c>
10010f76:	bd70      	pop	{r4, r5, r6, pc}
10010f78:	10013880 	.word	0x10013880
10010f7c:	10013880 	.word	0x10013880
10010f80:	10013880 	.word	0x10013880
10010f84:	10013884 	.word	0x10013884

10010f88 <memcmp>:
10010f88:	b530      	push	{r4, r5, lr}
10010f8a:	2400      	movs	r4, #0
10010f8c:	42a2      	cmp	r2, r4
10010f8e:	d008      	beq.n	10010fa2 <memcmp+0x1a>
10010f90:	5d03      	ldrb	r3, [r0, r4]
10010f92:	1c65      	adds	r5, r4, #1
10010f94:	5d0c      	ldrb	r4, [r1, r4]
10010f96:	42a3      	cmp	r3, r4
10010f98:	d001      	beq.n	10010f9e <memcmp+0x16>
10010f9a:	1b18      	subs	r0, r3, r4
10010f9c:	e002      	b.n	10010fa4 <memcmp+0x1c>
10010f9e:	002c      	movs	r4, r5
10010fa0:	e7f4      	b.n	10010f8c <memcmp+0x4>
10010fa2:	2000      	movs	r0, #0
10010fa4:	bd30      	pop	{r4, r5, pc}

10010fa6 <memcpy>:
10010fa6:	2300      	movs	r3, #0
10010fa8:	b510      	push	{r4, lr}
10010faa:	429a      	cmp	r2, r3
10010fac:	d003      	beq.n	10010fb6 <memcpy+0x10>
10010fae:	5ccc      	ldrb	r4, [r1, r3]
10010fb0:	54c4      	strb	r4, [r0, r3]
10010fb2:	3301      	adds	r3, #1
10010fb4:	e7f9      	b.n	10010faa <memcpy+0x4>
10010fb6:	bd10      	pop	{r4, pc}

10010fb8 <memset>:
10010fb8:	0003      	movs	r3, r0
10010fba:	1882      	adds	r2, r0, r2
10010fbc:	4293      	cmp	r3, r2
10010fbe:	d002      	beq.n	10010fc6 <memset+0xe>
10010fc0:	7019      	strb	r1, [r3, #0]
10010fc2:	3301      	adds	r3, #1
10010fc4:	e7fa      	b.n	10010fbc <memset+0x4>
10010fc6:	4770      	bx	lr

10010fc8 <iprintf>:
10010fc8:	b40f      	push	{r0, r1, r2, r3}
10010fca:	4b0b      	ldr	r3, [pc, #44]	; (10010ff8 <iprintf+0x30>)
10010fcc:	b513      	push	{r0, r1, r4, lr}
10010fce:	681c      	ldr	r4, [r3, #0]
10010fd0:	2c00      	cmp	r4, #0
10010fd2:	d005      	beq.n	10010fe0 <iprintf+0x18>
10010fd4:	69a3      	ldr	r3, [r4, #24]
10010fd6:	2b00      	cmp	r3, #0
10010fd8:	d102      	bne.n	10010fe0 <iprintf+0x18>
10010fda:	0020      	movs	r0, r4
10010fdc:	f000 fb46 	bl	1001166c <__sinit>
10010fe0:	ab05      	add	r3, sp, #20
10010fe2:	9a04      	ldr	r2, [sp, #16]
10010fe4:	68a1      	ldr	r1, [r4, #8]
10010fe6:	0020      	movs	r0, r4
10010fe8:	9301      	str	r3, [sp, #4]
10010fea:	f000 fd05 	bl	100119f8 <_vfiprintf_r>
10010fee:	bc16      	pop	{r1, r2, r4}
10010ff0:	bc08      	pop	{r3}
10010ff2:	b004      	add	sp, #16
10010ff4:	4718      	bx	r3
10010ff6:	46c0      	nop			; (mov r8, r8)
10010ff8:	10013904 	.word	0x10013904

10010ffc <putchar>:
10010ffc:	4b08      	ldr	r3, [pc, #32]	; (10011020 <putchar+0x24>)
10010ffe:	b570      	push	{r4, r5, r6, lr}
10011000:	681c      	ldr	r4, [r3, #0]
10011002:	0005      	movs	r5, r0
10011004:	2c00      	cmp	r4, #0
10011006:	d005      	beq.n	10011014 <putchar+0x18>
10011008:	69a3      	ldr	r3, [r4, #24]
1001100a:	2b00      	cmp	r3, #0
1001100c:	d102      	bne.n	10011014 <putchar+0x18>
1001100e:	0020      	movs	r0, r4
10011010:	f000 fb2c 	bl	1001166c <__sinit>
10011014:	0029      	movs	r1, r5
10011016:	68a2      	ldr	r2, [r4, #8]
10011018:	0020      	movs	r0, r4
1001101a:	f000 ff99 	bl	10011f50 <_putc_r>
1001101e:	bd70      	pop	{r4, r5, r6, pc}
10011020:	10013904 	.word	0x10013904

10011024 <_puts_r>:
10011024:	b570      	push	{r4, r5, r6, lr}
10011026:	0005      	movs	r5, r0
10011028:	000e      	movs	r6, r1
1001102a:	2800      	cmp	r0, #0
1001102c:	d004      	beq.n	10011038 <_puts_r+0x14>
1001102e:	6983      	ldr	r3, [r0, #24]
10011030:	2b00      	cmp	r3, #0
10011032:	d101      	bne.n	10011038 <_puts_r+0x14>
10011034:	f000 fb1a 	bl	1001166c <__sinit>
10011038:	69ab      	ldr	r3, [r5, #24]
1001103a:	68ac      	ldr	r4, [r5, #8]
1001103c:	2b00      	cmp	r3, #0
1001103e:	d102      	bne.n	10011046 <_puts_r+0x22>
10011040:	0028      	movs	r0, r5
10011042:	f000 fb13 	bl	1001166c <__sinit>
10011046:	4b25      	ldr	r3, [pc, #148]	; (100110dc <_puts_r+0xb8>)
10011048:	429c      	cmp	r4, r3
1001104a:	d101      	bne.n	10011050 <_puts_r+0x2c>
1001104c:	686c      	ldr	r4, [r5, #4]
1001104e:	e008      	b.n	10011062 <_puts_r+0x3e>
10011050:	4b23      	ldr	r3, [pc, #140]	; (100110e0 <_puts_r+0xbc>)
10011052:	429c      	cmp	r4, r3
10011054:	d101      	bne.n	1001105a <_puts_r+0x36>
10011056:	68ac      	ldr	r4, [r5, #8]
10011058:	e003      	b.n	10011062 <_puts_r+0x3e>
1001105a:	4b22      	ldr	r3, [pc, #136]	; (100110e4 <_puts_r+0xc0>)
1001105c:	429c      	cmp	r4, r3
1001105e:	d100      	bne.n	10011062 <_puts_r+0x3e>
10011060:	68ec      	ldr	r4, [r5, #12]
10011062:	89a3      	ldrh	r3, [r4, #12]
10011064:	071b      	lsls	r3, r3, #28
10011066:	d502      	bpl.n	1001106e <_puts_r+0x4a>
10011068:	6923      	ldr	r3, [r4, #16]
1001106a:	2b00      	cmp	r3, #0
1001106c:	d111      	bne.n	10011092 <_puts_r+0x6e>
1001106e:	0021      	movs	r1, r4
10011070:	0028      	movs	r0, r5
10011072:	f000 f991 	bl	10011398 <__swsetup_r>
10011076:	2800      	cmp	r0, #0
10011078:	d00b      	beq.n	10011092 <_puts_r+0x6e>
1001107a:	2001      	movs	r0, #1
1001107c:	4240      	negs	r0, r0
1001107e:	e02b      	b.n	100110d8 <_puts_r+0xb4>
10011080:	3b01      	subs	r3, #1
10011082:	3601      	adds	r6, #1
10011084:	60a3      	str	r3, [r4, #8]
10011086:	2b00      	cmp	r3, #0
10011088:	db08      	blt.n	1001109c <_puts_r+0x78>
1001108a:	6823      	ldr	r3, [r4, #0]
1001108c:	1c5a      	adds	r2, r3, #1
1001108e:	6022      	str	r2, [r4, #0]
10011090:	7019      	strb	r1, [r3, #0]
10011092:	7831      	ldrb	r1, [r6, #0]
10011094:	68a3      	ldr	r3, [r4, #8]
10011096:	2900      	cmp	r1, #0
10011098:	d1f2      	bne.n	10011080 <_puts_r+0x5c>
1001109a:	e00b      	b.n	100110b4 <_puts_r+0x90>
1001109c:	69a2      	ldr	r2, [r4, #24]
1001109e:	4293      	cmp	r3, r2
100110a0:	db01      	blt.n	100110a6 <_puts_r+0x82>
100110a2:	290a      	cmp	r1, #10
100110a4:	d1f1      	bne.n	1001108a <_puts_r+0x66>
100110a6:	0022      	movs	r2, r4
100110a8:	0028      	movs	r0, r5
100110aa:	f000 f91d 	bl	100112e8 <__swbuf_r>
100110ae:	1c43      	adds	r3, r0, #1
100110b0:	d1ef      	bne.n	10011092 <_puts_r+0x6e>
100110b2:	e7e2      	b.n	1001107a <_puts_r+0x56>
100110b4:	3b01      	subs	r3, #1
100110b6:	60a3      	str	r3, [r4, #8]
100110b8:	2b00      	cmp	r3, #0
100110ba:	da08      	bge.n	100110ce <_puts_r+0xaa>
100110bc:	0022      	movs	r2, r4
100110be:	310a      	adds	r1, #10
100110c0:	0028      	movs	r0, r5
100110c2:	f000 f911 	bl	100112e8 <__swbuf_r>
100110c6:	1c43      	adds	r3, r0, #1
100110c8:	d0d7      	beq.n	1001107a <_puts_r+0x56>
100110ca:	200a      	movs	r0, #10
100110cc:	e004      	b.n	100110d8 <_puts_r+0xb4>
100110ce:	200a      	movs	r0, #10
100110d0:	6823      	ldr	r3, [r4, #0]
100110d2:	1c5a      	adds	r2, r3, #1
100110d4:	6022      	str	r2, [r4, #0]
100110d6:	7018      	strb	r0, [r3, #0]
100110d8:	bd70      	pop	{r4, r5, r6, pc}
100110da:	46c0      	nop			; (mov r8, r8)
100110dc:	100137e0 	.word	0x100137e0
100110e0:	10013800 	.word	0x10013800
100110e4:	10013820 	.word	0x10013820

100110e8 <puts>:
100110e8:	b510      	push	{r4, lr}
100110ea:	4b03      	ldr	r3, [pc, #12]	; (100110f8 <puts+0x10>)
100110ec:	0001      	movs	r1, r0
100110ee:	6818      	ldr	r0, [r3, #0]
100110f0:	f7ff ff98 	bl	10011024 <_puts_r>
100110f4:	bd10      	pop	{r4, pc}
100110f6:	46c0      	nop			; (mov r8, r8)
100110f8:	10013904 	.word	0x10013904

100110fc <rand>:
100110fc:	4b15      	ldr	r3, [pc, #84]	; (10011154 <rand+0x58>)
100110fe:	b510      	push	{r4, lr}
10011100:	681c      	ldr	r4, [r3, #0]
10011102:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10011104:	2b00      	cmp	r3, #0
10011106:	d115      	bne.n	10011134 <rand+0x38>
10011108:	2018      	movs	r0, #24
1001110a:	f000 fba7 	bl	1001185c <malloc>
1001110e:	4b12      	ldr	r3, [pc, #72]	; (10011158 <rand+0x5c>)
10011110:	63a0      	str	r0, [r4, #56]	; 0x38
10011112:	8003      	strh	r3, [r0, #0]
10011114:	4b11      	ldr	r3, [pc, #68]	; (1001115c <rand+0x60>)
10011116:	2201      	movs	r2, #1
10011118:	8043      	strh	r3, [r0, #2]
1001111a:	4b11      	ldr	r3, [pc, #68]	; (10011160 <rand+0x64>)
1001111c:	8083      	strh	r3, [r0, #4]
1001111e:	4b11      	ldr	r3, [pc, #68]	; (10011164 <rand+0x68>)
10011120:	80c3      	strh	r3, [r0, #6]
10011122:	4b11      	ldr	r3, [pc, #68]	; (10011168 <rand+0x6c>)
10011124:	8103      	strh	r3, [r0, #8]
10011126:	2305      	movs	r3, #5
10011128:	8143      	strh	r3, [r0, #10]
1001112a:	3306      	adds	r3, #6
1001112c:	8183      	strh	r3, [r0, #12]
1001112e:	2300      	movs	r3, #0
10011130:	6102      	str	r2, [r0, #16]
10011132:	6143      	str	r3, [r0, #20]
10011134:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10011136:	4a0d      	ldr	r2, [pc, #52]	; (1001116c <rand+0x70>)
10011138:	6920      	ldr	r0, [r4, #16]
1001113a:	6961      	ldr	r1, [r4, #20]
1001113c:	4b0c      	ldr	r3, [pc, #48]	; (10011170 <rand+0x74>)
1001113e:	f001 f819 	bl	10012174 <__aeabi_lmul>
10011142:	2201      	movs	r2, #1
10011144:	2300      	movs	r3, #0
10011146:	1880      	adds	r0, r0, r2
10011148:	4159      	adcs	r1, r3
1001114a:	6120      	str	r0, [r4, #16]
1001114c:	6161      	str	r1, [r4, #20]
1001114e:	0048      	lsls	r0, r1, #1
10011150:	0840      	lsrs	r0, r0, #1
10011152:	bd10      	pop	{r4, pc}
10011154:	10013904 	.word	0x10013904
10011158:	0000330e 	.word	0x0000330e
1001115c:	ffffabcd 	.word	0xffffabcd
10011160:	00001234 	.word	0x00001234
10011164:	ffffe66d 	.word	0xffffe66d
10011168:	ffffdeec 	.word	0xffffdeec
1001116c:	4c957f2d 	.word	0x4c957f2d
10011170:	5851f42d 	.word	0x5851f42d

10011174 <setbuf>:
10011174:	424a      	negs	r2, r1
10011176:	414a      	adcs	r2, r1
10011178:	2380      	movs	r3, #128	; 0x80
1001117a:	b510      	push	{r4, lr}
1001117c:	0052      	lsls	r2, r2, #1
1001117e:	00db      	lsls	r3, r3, #3
10011180:	f000 f802 	bl	10011188 <setvbuf>
10011184:	bd10      	pop	{r4, pc}
	...

10011188 <setvbuf>:
10011188:	b5f0      	push	{r4, r5, r6, r7, lr}
1001118a:	001d      	movs	r5, r3
1001118c:	4b51      	ldr	r3, [pc, #324]	; (100112d4 <setvbuf+0x14c>)
1001118e:	b085      	sub	sp, #20
10011190:	681e      	ldr	r6, [r3, #0]
10011192:	0004      	movs	r4, r0
10011194:	000f      	movs	r7, r1
10011196:	9200      	str	r2, [sp, #0]
10011198:	2e00      	cmp	r6, #0
1001119a:	d005      	beq.n	100111a8 <setvbuf+0x20>
1001119c:	69b3      	ldr	r3, [r6, #24]
1001119e:	2b00      	cmp	r3, #0
100111a0:	d102      	bne.n	100111a8 <setvbuf+0x20>
100111a2:	0030      	movs	r0, r6
100111a4:	f000 fa62 	bl	1001166c <__sinit>
100111a8:	4b4b      	ldr	r3, [pc, #300]	; (100112d8 <setvbuf+0x150>)
100111aa:	429c      	cmp	r4, r3
100111ac:	d101      	bne.n	100111b2 <setvbuf+0x2a>
100111ae:	6874      	ldr	r4, [r6, #4]
100111b0:	e008      	b.n	100111c4 <setvbuf+0x3c>
100111b2:	4b4a      	ldr	r3, [pc, #296]	; (100112dc <setvbuf+0x154>)
100111b4:	429c      	cmp	r4, r3
100111b6:	d101      	bne.n	100111bc <setvbuf+0x34>
100111b8:	68b4      	ldr	r4, [r6, #8]
100111ba:	e003      	b.n	100111c4 <setvbuf+0x3c>
100111bc:	4b48      	ldr	r3, [pc, #288]	; (100112e0 <setvbuf+0x158>)
100111be:	429c      	cmp	r4, r3
100111c0:	d100      	bne.n	100111c4 <setvbuf+0x3c>
100111c2:	68f4      	ldr	r4, [r6, #12]
100111c4:	9b00      	ldr	r3, [sp, #0]
100111c6:	2b02      	cmp	r3, #2
100111c8:	d005      	beq.n	100111d6 <setvbuf+0x4e>
100111ca:	2b01      	cmp	r3, #1
100111cc:	d900      	bls.n	100111d0 <setvbuf+0x48>
100111ce:	e07c      	b.n	100112ca <setvbuf+0x142>
100111d0:	2d00      	cmp	r5, #0
100111d2:	da00      	bge.n	100111d6 <setvbuf+0x4e>
100111d4:	e079      	b.n	100112ca <setvbuf+0x142>
100111d6:	0021      	movs	r1, r4
100111d8:	0030      	movs	r0, r6
100111da:	f000 f9d9 	bl	10011590 <_fflush_r>
100111de:	6b61      	ldr	r1, [r4, #52]	; 0x34
100111e0:	2900      	cmp	r1, #0
100111e2:	d008      	beq.n	100111f6 <setvbuf+0x6e>
100111e4:	0023      	movs	r3, r4
100111e6:	3344      	adds	r3, #68	; 0x44
100111e8:	4299      	cmp	r1, r3
100111ea:	d002      	beq.n	100111f2 <setvbuf+0x6a>
100111ec:	0030      	movs	r0, r6
100111ee:	f000 fb3f 	bl	10011870 <_free_r>
100111f2:	2300      	movs	r3, #0
100111f4:	6363      	str	r3, [r4, #52]	; 0x34
100111f6:	2300      	movs	r3, #0
100111f8:	61a3      	str	r3, [r4, #24]
100111fa:	6063      	str	r3, [r4, #4]
100111fc:	89a3      	ldrh	r3, [r4, #12]
100111fe:	061b      	lsls	r3, r3, #24
10011200:	d503      	bpl.n	1001120a <setvbuf+0x82>
10011202:	6921      	ldr	r1, [r4, #16]
10011204:	0030      	movs	r0, r6
10011206:	f000 fb33 	bl	10011870 <_free_r>
1001120a:	89a2      	ldrh	r2, [r4, #12]
1001120c:	4b35      	ldr	r3, [pc, #212]	; (100112e4 <setvbuf+0x15c>)
1001120e:	4013      	ands	r3, r2
10011210:	81a3      	strh	r3, [r4, #12]
10011212:	9b00      	ldr	r3, [sp, #0]
10011214:	2b02      	cmp	r3, #2
10011216:	d021      	beq.n	1001125c <setvbuf+0xd4>
10011218:	ab03      	add	r3, sp, #12
1001121a:	aa02      	add	r2, sp, #8
1001121c:	0021      	movs	r1, r4
1001121e:	0030      	movs	r0, r6
10011220:	f000 fab8 	bl	10011794 <__swhatbuf_r>
10011224:	89a3      	ldrh	r3, [r4, #12]
10011226:	4318      	orrs	r0, r3
10011228:	81a0      	strh	r0, [r4, #12]
1001122a:	2d00      	cmp	r5, #0
1001122c:	d101      	bne.n	10011232 <setvbuf+0xaa>
1001122e:	9d02      	ldr	r5, [sp, #8]
10011230:	e001      	b.n	10011236 <setvbuf+0xae>
10011232:	2f00      	cmp	r7, #0
10011234:	d125      	bne.n	10011282 <setvbuf+0xfa>
10011236:	0028      	movs	r0, r5
10011238:	f000 fb10 	bl	1001185c <malloc>
1001123c:	9501      	str	r5, [sp, #4]
1001123e:	1e07      	subs	r7, r0, #0
10011240:	d11a      	bne.n	10011278 <setvbuf+0xf0>
10011242:	9b02      	ldr	r3, [sp, #8]
10011244:	9301      	str	r3, [sp, #4]
10011246:	42ab      	cmp	r3, r5
10011248:	d102      	bne.n	10011250 <setvbuf+0xc8>
1001124a:	2001      	movs	r0, #1
1001124c:	4240      	negs	r0, r0
1001124e:	e006      	b.n	1001125e <setvbuf+0xd6>
10011250:	9801      	ldr	r0, [sp, #4]
10011252:	f000 fb03 	bl	1001185c <malloc>
10011256:	1e07      	subs	r7, r0, #0
10011258:	d10e      	bne.n	10011278 <setvbuf+0xf0>
1001125a:	e7f6      	b.n	1001124a <setvbuf+0xc2>
1001125c:	2000      	movs	r0, #0
1001125e:	2202      	movs	r2, #2
10011260:	89a3      	ldrh	r3, [r4, #12]
10011262:	4313      	orrs	r3, r2
10011264:	81a3      	strh	r3, [r4, #12]
10011266:	2300      	movs	r3, #0
10011268:	60a3      	str	r3, [r4, #8]
1001126a:	0023      	movs	r3, r4
1001126c:	3347      	adds	r3, #71	; 0x47
1001126e:	6023      	str	r3, [r4, #0]
10011270:	6123      	str	r3, [r4, #16]
10011272:	2301      	movs	r3, #1
10011274:	6163      	str	r3, [r4, #20]
10011276:	e02a      	b.n	100112ce <setvbuf+0x146>
10011278:	2280      	movs	r2, #128	; 0x80
1001127a:	89a3      	ldrh	r3, [r4, #12]
1001127c:	9d01      	ldr	r5, [sp, #4]
1001127e:	4313      	orrs	r3, r2
10011280:	81a3      	strh	r3, [r4, #12]
10011282:	69b3      	ldr	r3, [r6, #24]
10011284:	2b00      	cmp	r3, #0
10011286:	d102      	bne.n	1001128e <setvbuf+0x106>
10011288:	0030      	movs	r0, r6
1001128a:	f000 f9ef 	bl	1001166c <__sinit>
1001128e:	9b00      	ldr	r3, [sp, #0]
10011290:	2b01      	cmp	r3, #1
10011292:	d103      	bne.n	1001129c <setvbuf+0x114>
10011294:	89a3      	ldrh	r3, [r4, #12]
10011296:	9a00      	ldr	r2, [sp, #0]
10011298:	431a      	orrs	r2, r3
1001129a:	81a2      	strh	r2, [r4, #12]
1001129c:	2308      	movs	r3, #8
1001129e:	89a2      	ldrh	r2, [r4, #12]
100112a0:	6027      	str	r7, [r4, #0]
100112a2:	4013      	ands	r3, r2
100112a4:	6127      	str	r7, [r4, #16]
100112a6:	6165      	str	r5, [r4, #20]
100112a8:	1e18      	subs	r0, r3, #0
100112aa:	d00c      	beq.n	100112c6 <setvbuf+0x13e>
100112ac:	2301      	movs	r3, #1
100112ae:	401a      	ands	r2, r3
100112b0:	2300      	movs	r3, #0
100112b2:	1e10      	subs	r0, r2, #0
100112b4:	4298      	cmp	r0, r3
100112b6:	d004      	beq.n	100112c2 <setvbuf+0x13a>
100112b8:	426d      	negs	r5, r5
100112ba:	60a3      	str	r3, [r4, #8]
100112bc:	61a5      	str	r5, [r4, #24]
100112be:	0018      	movs	r0, r3
100112c0:	e005      	b.n	100112ce <setvbuf+0x146>
100112c2:	60a5      	str	r5, [r4, #8]
100112c4:	e003      	b.n	100112ce <setvbuf+0x146>
100112c6:	60a3      	str	r3, [r4, #8]
100112c8:	e001      	b.n	100112ce <setvbuf+0x146>
100112ca:	2001      	movs	r0, #1
100112cc:	4240      	negs	r0, r0
100112ce:	b005      	add	sp, #20
100112d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100112d2:	46c0      	nop			; (mov r8, r8)
100112d4:	10013904 	.word	0x10013904
100112d8:	100137e0 	.word	0x100137e0
100112dc:	10013800 	.word	0x10013800
100112e0:	10013820 	.word	0x10013820
100112e4:	fffff35c 	.word	0xfffff35c

100112e8 <__swbuf_r>:
100112e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100112ea:	0005      	movs	r5, r0
100112ec:	000f      	movs	r7, r1
100112ee:	0014      	movs	r4, r2
100112f0:	2800      	cmp	r0, #0
100112f2:	d004      	beq.n	100112fe <__swbuf_r+0x16>
100112f4:	6983      	ldr	r3, [r0, #24]
100112f6:	2b00      	cmp	r3, #0
100112f8:	d101      	bne.n	100112fe <__swbuf_r+0x16>
100112fa:	f000 f9b7 	bl	1001166c <__sinit>
100112fe:	4b23      	ldr	r3, [pc, #140]	; (1001138c <__swbuf_r+0xa4>)
10011300:	429c      	cmp	r4, r3
10011302:	d101      	bne.n	10011308 <__swbuf_r+0x20>
10011304:	686c      	ldr	r4, [r5, #4]
10011306:	e008      	b.n	1001131a <__swbuf_r+0x32>
10011308:	4b21      	ldr	r3, [pc, #132]	; (10011390 <__swbuf_r+0xa8>)
1001130a:	429c      	cmp	r4, r3
1001130c:	d101      	bne.n	10011312 <__swbuf_r+0x2a>
1001130e:	68ac      	ldr	r4, [r5, #8]
10011310:	e003      	b.n	1001131a <__swbuf_r+0x32>
10011312:	4b20      	ldr	r3, [pc, #128]	; (10011394 <__swbuf_r+0xac>)
10011314:	429c      	cmp	r4, r3
10011316:	d100      	bne.n	1001131a <__swbuf_r+0x32>
10011318:	68ec      	ldr	r4, [r5, #12]
1001131a:	69a3      	ldr	r3, [r4, #24]
1001131c:	60a3      	str	r3, [r4, #8]
1001131e:	89a3      	ldrh	r3, [r4, #12]
10011320:	071b      	lsls	r3, r3, #28
10011322:	d50a      	bpl.n	1001133a <__swbuf_r+0x52>
10011324:	6923      	ldr	r3, [r4, #16]
10011326:	2b00      	cmp	r3, #0
10011328:	d007      	beq.n	1001133a <__swbuf_r+0x52>
1001132a:	6823      	ldr	r3, [r4, #0]
1001132c:	6922      	ldr	r2, [r4, #16]
1001132e:	b2fe      	uxtb	r6, r7
10011330:	1a98      	subs	r0, r3, r2
10011332:	6963      	ldr	r3, [r4, #20]
10011334:	4298      	cmp	r0, r3
10011336:	db0f      	blt.n	10011358 <__swbuf_r+0x70>
10011338:	e008      	b.n	1001134c <__swbuf_r+0x64>
1001133a:	0021      	movs	r1, r4
1001133c:	0028      	movs	r0, r5
1001133e:	f000 f82b 	bl	10011398 <__swsetup_r>
10011342:	2800      	cmp	r0, #0
10011344:	d0f1      	beq.n	1001132a <__swbuf_r+0x42>
10011346:	2001      	movs	r0, #1
10011348:	4240      	negs	r0, r0
1001134a:	e01d      	b.n	10011388 <__swbuf_r+0xa0>
1001134c:	0021      	movs	r1, r4
1001134e:	0028      	movs	r0, r5
10011350:	f000 f91e 	bl	10011590 <_fflush_r>
10011354:	2800      	cmp	r0, #0
10011356:	d1f6      	bne.n	10011346 <__swbuf_r+0x5e>
10011358:	68a3      	ldr	r3, [r4, #8]
1001135a:	3001      	adds	r0, #1
1001135c:	3b01      	subs	r3, #1
1001135e:	60a3      	str	r3, [r4, #8]
10011360:	6823      	ldr	r3, [r4, #0]
10011362:	1c5a      	adds	r2, r3, #1
10011364:	6022      	str	r2, [r4, #0]
10011366:	701f      	strb	r7, [r3, #0]
10011368:	6963      	ldr	r3, [r4, #20]
1001136a:	4298      	cmp	r0, r3
1001136c:	d005      	beq.n	1001137a <__swbuf_r+0x92>
1001136e:	89a3      	ldrh	r3, [r4, #12]
10011370:	0030      	movs	r0, r6
10011372:	07db      	lsls	r3, r3, #31
10011374:	d508      	bpl.n	10011388 <__swbuf_r+0xa0>
10011376:	2e0a      	cmp	r6, #10
10011378:	d106      	bne.n	10011388 <__swbuf_r+0xa0>
1001137a:	0021      	movs	r1, r4
1001137c:	0028      	movs	r0, r5
1001137e:	f000 f907 	bl	10011590 <_fflush_r>
10011382:	2800      	cmp	r0, #0
10011384:	d1df      	bne.n	10011346 <__swbuf_r+0x5e>
10011386:	0030      	movs	r0, r6
10011388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001138a:	46c0      	nop			; (mov r8, r8)
1001138c:	100137e0 	.word	0x100137e0
10011390:	10013800 	.word	0x10013800
10011394:	10013820 	.word	0x10013820

10011398 <__swsetup_r>:
10011398:	4b36      	ldr	r3, [pc, #216]	; (10011474 <__swsetup_r+0xdc>)
1001139a:	b570      	push	{r4, r5, r6, lr}
1001139c:	681d      	ldr	r5, [r3, #0]
1001139e:	0006      	movs	r6, r0
100113a0:	000c      	movs	r4, r1
100113a2:	2d00      	cmp	r5, #0
100113a4:	d005      	beq.n	100113b2 <__swsetup_r+0x1a>
100113a6:	69ab      	ldr	r3, [r5, #24]
100113a8:	2b00      	cmp	r3, #0
100113aa:	d102      	bne.n	100113b2 <__swsetup_r+0x1a>
100113ac:	0028      	movs	r0, r5
100113ae:	f000 f95d 	bl	1001166c <__sinit>
100113b2:	4b31      	ldr	r3, [pc, #196]	; (10011478 <__swsetup_r+0xe0>)
100113b4:	429c      	cmp	r4, r3
100113b6:	d101      	bne.n	100113bc <__swsetup_r+0x24>
100113b8:	686c      	ldr	r4, [r5, #4]
100113ba:	e008      	b.n	100113ce <__swsetup_r+0x36>
100113bc:	4b2f      	ldr	r3, [pc, #188]	; (1001147c <__swsetup_r+0xe4>)
100113be:	429c      	cmp	r4, r3
100113c0:	d101      	bne.n	100113c6 <__swsetup_r+0x2e>
100113c2:	68ac      	ldr	r4, [r5, #8]
100113c4:	e003      	b.n	100113ce <__swsetup_r+0x36>
100113c6:	4b2e      	ldr	r3, [pc, #184]	; (10011480 <__swsetup_r+0xe8>)
100113c8:	429c      	cmp	r4, r3
100113ca:	d100      	bne.n	100113ce <__swsetup_r+0x36>
100113cc:	68ec      	ldr	r4, [r5, #12]
100113ce:	220c      	movs	r2, #12
100113d0:	5ea3      	ldrsh	r3, [r4, r2]
100113d2:	b29a      	uxth	r2, r3
100113d4:	0711      	lsls	r1, r2, #28
100113d6:	d423      	bmi.n	10011420 <__swsetup_r+0x88>
100113d8:	06d1      	lsls	r1, r2, #27
100113da:	d407      	bmi.n	100113ec <__swsetup_r+0x54>
100113dc:	2209      	movs	r2, #9
100113de:	2001      	movs	r0, #1
100113e0:	6032      	str	r2, [r6, #0]
100113e2:	3237      	adds	r2, #55	; 0x37
100113e4:	4313      	orrs	r3, r2
100113e6:	81a3      	strh	r3, [r4, #12]
100113e8:	4240      	negs	r0, r0
100113ea:	e042      	b.n	10011472 <__swsetup_r+0xda>
100113ec:	0753      	lsls	r3, r2, #29
100113ee:	d513      	bpl.n	10011418 <__swsetup_r+0x80>
100113f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
100113f2:	2900      	cmp	r1, #0
100113f4:	d008      	beq.n	10011408 <__swsetup_r+0x70>
100113f6:	0023      	movs	r3, r4
100113f8:	3344      	adds	r3, #68	; 0x44
100113fa:	4299      	cmp	r1, r3
100113fc:	d002      	beq.n	10011404 <__swsetup_r+0x6c>
100113fe:	0030      	movs	r0, r6
10011400:	f000 fa36 	bl	10011870 <_free_r>
10011404:	2300      	movs	r3, #0
10011406:	6363      	str	r3, [r4, #52]	; 0x34
10011408:	2224      	movs	r2, #36	; 0x24
1001140a:	89a3      	ldrh	r3, [r4, #12]
1001140c:	4393      	bics	r3, r2
1001140e:	81a3      	strh	r3, [r4, #12]
10011410:	2300      	movs	r3, #0
10011412:	6063      	str	r3, [r4, #4]
10011414:	6923      	ldr	r3, [r4, #16]
10011416:	6023      	str	r3, [r4, #0]
10011418:	2208      	movs	r2, #8
1001141a:	89a3      	ldrh	r3, [r4, #12]
1001141c:	4313      	orrs	r3, r2
1001141e:	81a3      	strh	r3, [r4, #12]
10011420:	6923      	ldr	r3, [r4, #16]
10011422:	2b00      	cmp	r3, #0
10011424:	d10b      	bne.n	1001143e <__swsetup_r+0xa6>
10011426:	23a0      	movs	r3, #160	; 0xa0
10011428:	89a2      	ldrh	r2, [r4, #12]
1001142a:	009b      	lsls	r3, r3, #2
1001142c:	4013      	ands	r3, r2
1001142e:	2280      	movs	r2, #128	; 0x80
10011430:	0092      	lsls	r2, r2, #2
10011432:	4293      	cmp	r3, r2
10011434:	d003      	beq.n	1001143e <__swsetup_r+0xa6>
10011436:	0021      	movs	r1, r4
10011438:	0030      	movs	r0, r6
1001143a:	f000 f9d1 	bl	100117e0 <__smakebuf_r>
1001143e:	2301      	movs	r3, #1
10011440:	89a2      	ldrh	r2, [r4, #12]
10011442:	4013      	ands	r3, r2
10011444:	d005      	beq.n	10011452 <__swsetup_r+0xba>
10011446:	2300      	movs	r3, #0
10011448:	60a3      	str	r3, [r4, #8]
1001144a:	6963      	ldr	r3, [r4, #20]
1001144c:	425b      	negs	r3, r3
1001144e:	61a3      	str	r3, [r4, #24]
10011450:	e003      	b.n	1001145a <__swsetup_r+0xc2>
10011452:	0792      	lsls	r2, r2, #30
10011454:	d400      	bmi.n	10011458 <__swsetup_r+0xc0>
10011456:	6963      	ldr	r3, [r4, #20]
10011458:	60a3      	str	r3, [r4, #8]
1001145a:	2000      	movs	r0, #0
1001145c:	6923      	ldr	r3, [r4, #16]
1001145e:	4283      	cmp	r3, r0
10011460:	d107      	bne.n	10011472 <__swsetup_r+0xda>
10011462:	220c      	movs	r2, #12
10011464:	5ea3      	ldrsh	r3, [r4, r2]
10011466:	061a      	lsls	r2, r3, #24
10011468:	d503      	bpl.n	10011472 <__swsetup_r+0xda>
1001146a:	2240      	movs	r2, #64	; 0x40
1001146c:	4313      	orrs	r3, r2
1001146e:	81a3      	strh	r3, [r4, #12]
10011470:	3801      	subs	r0, #1
10011472:	bd70      	pop	{r4, r5, r6, pc}
10011474:	10013904 	.word	0x10013904
10011478:	100137e0 	.word	0x100137e0
1001147c:	10013800 	.word	0x10013800
10011480:	10013820 	.word	0x10013820

10011484 <__sflush_r>:
10011484:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011486:	898a      	ldrh	r2, [r1, #12]
10011488:	0005      	movs	r5, r0
1001148a:	000c      	movs	r4, r1
1001148c:	0713      	lsls	r3, r2, #28
1001148e:	d45a      	bmi.n	10011546 <__sflush_r+0xc2>
10011490:	684b      	ldr	r3, [r1, #4]
10011492:	2b00      	cmp	r3, #0
10011494:	dc02      	bgt.n	1001149c <__sflush_r+0x18>
10011496:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10011498:	2b00      	cmp	r3, #0
1001149a:	dd19      	ble.n	100114d0 <__sflush_r+0x4c>
1001149c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1001149e:	2f00      	cmp	r7, #0
100114a0:	d016      	beq.n	100114d0 <__sflush_r+0x4c>
100114a2:	2300      	movs	r3, #0
100114a4:	682e      	ldr	r6, [r5, #0]
100114a6:	602b      	str	r3, [r5, #0]
100114a8:	2380      	movs	r3, #128	; 0x80
100114aa:	015b      	lsls	r3, r3, #5
100114ac:	401a      	ands	r2, r3
100114ae:	d001      	beq.n	100114b4 <__sflush_r+0x30>
100114b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
100114b2:	e014      	b.n	100114de <__sflush_r+0x5a>
100114b4:	2301      	movs	r3, #1
100114b6:	6a21      	ldr	r1, [r4, #32]
100114b8:	0028      	movs	r0, r5
100114ba:	47b8      	blx	r7
100114bc:	1c43      	adds	r3, r0, #1
100114be:	d10e      	bne.n	100114de <__sflush_r+0x5a>
100114c0:	682b      	ldr	r3, [r5, #0]
100114c2:	2b00      	cmp	r3, #0
100114c4:	d00b      	beq.n	100114de <__sflush_r+0x5a>
100114c6:	2b1d      	cmp	r3, #29
100114c8:	d001      	beq.n	100114ce <__sflush_r+0x4a>
100114ca:	2b16      	cmp	r3, #22
100114cc:	d102      	bne.n	100114d4 <__sflush_r+0x50>
100114ce:	602e      	str	r6, [r5, #0]
100114d0:	2000      	movs	r0, #0
100114d2:	e05a      	b.n	1001158a <__sflush_r+0x106>
100114d4:	2240      	movs	r2, #64	; 0x40
100114d6:	89a3      	ldrh	r3, [r4, #12]
100114d8:	4313      	orrs	r3, r2
100114da:	81a3      	strh	r3, [r4, #12]
100114dc:	e055      	b.n	1001158a <__sflush_r+0x106>
100114de:	89a3      	ldrh	r3, [r4, #12]
100114e0:	075b      	lsls	r3, r3, #29
100114e2:	d506      	bpl.n	100114f2 <__sflush_r+0x6e>
100114e4:	6863      	ldr	r3, [r4, #4]
100114e6:	1ac0      	subs	r0, r0, r3
100114e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
100114ea:	2b00      	cmp	r3, #0
100114ec:	d001      	beq.n	100114f2 <__sflush_r+0x6e>
100114ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
100114f0:	1ac0      	subs	r0, r0, r3
100114f2:	2300      	movs	r3, #0
100114f4:	0002      	movs	r2, r0
100114f6:	6a21      	ldr	r1, [r4, #32]
100114f8:	0028      	movs	r0, r5
100114fa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
100114fc:	47b8      	blx	r7
100114fe:	89a3      	ldrh	r3, [r4, #12]
10011500:	1c42      	adds	r2, r0, #1
10011502:	d106      	bne.n	10011512 <__sflush_r+0x8e>
10011504:	6829      	ldr	r1, [r5, #0]
10011506:	291d      	cmp	r1, #29
10011508:	d83a      	bhi.n	10011580 <__sflush_r+0xfc>
1001150a:	4a20      	ldr	r2, [pc, #128]	; (1001158c <__sflush_r+0x108>)
1001150c:	40ca      	lsrs	r2, r1
1001150e:	07d2      	lsls	r2, r2, #31
10011510:	d536      	bpl.n	10011580 <__sflush_r+0xfc>
10011512:	2200      	movs	r2, #0
10011514:	6062      	str	r2, [r4, #4]
10011516:	6922      	ldr	r2, [r4, #16]
10011518:	6022      	str	r2, [r4, #0]
1001151a:	04db      	lsls	r3, r3, #19
1001151c:	d505      	bpl.n	1001152a <__sflush_r+0xa6>
1001151e:	1c43      	adds	r3, r0, #1
10011520:	d102      	bne.n	10011528 <__sflush_r+0xa4>
10011522:	682b      	ldr	r3, [r5, #0]
10011524:	2b00      	cmp	r3, #0
10011526:	d100      	bne.n	1001152a <__sflush_r+0xa6>
10011528:	6560      	str	r0, [r4, #84]	; 0x54
1001152a:	6b61      	ldr	r1, [r4, #52]	; 0x34
1001152c:	602e      	str	r6, [r5, #0]
1001152e:	2900      	cmp	r1, #0
10011530:	d0ce      	beq.n	100114d0 <__sflush_r+0x4c>
10011532:	0023      	movs	r3, r4
10011534:	3344      	adds	r3, #68	; 0x44
10011536:	4299      	cmp	r1, r3
10011538:	d002      	beq.n	10011540 <__sflush_r+0xbc>
1001153a:	0028      	movs	r0, r5
1001153c:	f000 f998 	bl	10011870 <_free_r>
10011540:	2000      	movs	r0, #0
10011542:	6360      	str	r0, [r4, #52]	; 0x34
10011544:	e021      	b.n	1001158a <__sflush_r+0x106>
10011546:	690f      	ldr	r7, [r1, #16]
10011548:	2f00      	cmp	r7, #0
1001154a:	d0c1      	beq.n	100114d0 <__sflush_r+0x4c>
1001154c:	680b      	ldr	r3, [r1, #0]
1001154e:	600f      	str	r7, [r1, #0]
10011550:	1bdb      	subs	r3, r3, r7
10011552:	9301      	str	r3, [sp, #4]
10011554:	2300      	movs	r3, #0
10011556:	0792      	lsls	r2, r2, #30
10011558:	d100      	bne.n	1001155c <__sflush_r+0xd8>
1001155a:	694b      	ldr	r3, [r1, #20]
1001155c:	60a3      	str	r3, [r4, #8]
1001155e:	e003      	b.n	10011568 <__sflush_r+0xe4>
10011560:	9b01      	ldr	r3, [sp, #4]
10011562:	183f      	adds	r7, r7, r0
10011564:	1a1b      	subs	r3, r3, r0
10011566:	9301      	str	r3, [sp, #4]
10011568:	9b01      	ldr	r3, [sp, #4]
1001156a:	2b00      	cmp	r3, #0
1001156c:	ddb0      	ble.n	100114d0 <__sflush_r+0x4c>
1001156e:	9b01      	ldr	r3, [sp, #4]
10011570:	003a      	movs	r2, r7
10011572:	6a21      	ldr	r1, [r4, #32]
10011574:	0028      	movs	r0, r5
10011576:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10011578:	47b0      	blx	r6
1001157a:	2800      	cmp	r0, #0
1001157c:	dcf0      	bgt.n	10011560 <__sflush_r+0xdc>
1001157e:	89a3      	ldrh	r3, [r4, #12]
10011580:	2240      	movs	r2, #64	; 0x40
10011582:	2001      	movs	r0, #1
10011584:	4313      	orrs	r3, r2
10011586:	81a3      	strh	r3, [r4, #12]
10011588:	4240      	negs	r0, r0
1001158a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1001158c:	20400001 	.word	0x20400001

10011590 <_fflush_r>:
10011590:	690b      	ldr	r3, [r1, #16]
10011592:	b570      	push	{r4, r5, r6, lr}
10011594:	0005      	movs	r5, r0
10011596:	000c      	movs	r4, r1
10011598:	2b00      	cmp	r3, #0
1001159a:	d101      	bne.n	100115a0 <_fflush_r+0x10>
1001159c:	2000      	movs	r0, #0
1001159e:	e01c      	b.n	100115da <_fflush_r+0x4a>
100115a0:	2800      	cmp	r0, #0
100115a2:	d004      	beq.n	100115ae <_fflush_r+0x1e>
100115a4:	6983      	ldr	r3, [r0, #24]
100115a6:	2b00      	cmp	r3, #0
100115a8:	d101      	bne.n	100115ae <_fflush_r+0x1e>
100115aa:	f000 f85f 	bl	1001166c <__sinit>
100115ae:	4b0b      	ldr	r3, [pc, #44]	; (100115dc <_fflush_r+0x4c>)
100115b0:	429c      	cmp	r4, r3
100115b2:	d101      	bne.n	100115b8 <_fflush_r+0x28>
100115b4:	686c      	ldr	r4, [r5, #4]
100115b6:	e008      	b.n	100115ca <_fflush_r+0x3a>
100115b8:	4b09      	ldr	r3, [pc, #36]	; (100115e0 <_fflush_r+0x50>)
100115ba:	429c      	cmp	r4, r3
100115bc:	d101      	bne.n	100115c2 <_fflush_r+0x32>
100115be:	68ac      	ldr	r4, [r5, #8]
100115c0:	e003      	b.n	100115ca <_fflush_r+0x3a>
100115c2:	4b08      	ldr	r3, [pc, #32]	; (100115e4 <_fflush_r+0x54>)
100115c4:	429c      	cmp	r4, r3
100115c6:	d100      	bne.n	100115ca <_fflush_r+0x3a>
100115c8:	68ec      	ldr	r4, [r5, #12]
100115ca:	220c      	movs	r2, #12
100115cc:	5ea3      	ldrsh	r3, [r4, r2]
100115ce:	2b00      	cmp	r3, #0
100115d0:	d0e4      	beq.n	1001159c <_fflush_r+0xc>
100115d2:	0021      	movs	r1, r4
100115d4:	0028      	movs	r0, r5
100115d6:	f7ff ff55 	bl	10011484 <__sflush_r>
100115da:	bd70      	pop	{r4, r5, r6, pc}
100115dc:	100137e0 	.word	0x100137e0
100115e0:	10013800 	.word	0x10013800
100115e4:	10013820 	.word	0x10013820

100115e8 <_cleanup_r>:
100115e8:	b510      	push	{r4, lr}
100115ea:	4902      	ldr	r1, [pc, #8]	; (100115f4 <_cleanup_r+0xc>)
100115ec:	f000 f8b0 	bl	10011750 <_fwalk_reent>
100115f0:	bd10      	pop	{r4, pc}
100115f2:	46c0      	nop			; (mov r8, r8)
100115f4:	10011591 	.word	0x10011591

100115f8 <std.isra.0>:
100115f8:	2300      	movs	r3, #0
100115fa:	b510      	push	{r4, lr}
100115fc:	0004      	movs	r4, r0
100115fe:	6003      	str	r3, [r0, #0]
10011600:	6043      	str	r3, [r0, #4]
10011602:	6083      	str	r3, [r0, #8]
10011604:	8181      	strh	r1, [r0, #12]
10011606:	6643      	str	r3, [r0, #100]	; 0x64
10011608:	81c2      	strh	r2, [r0, #14]
1001160a:	6103      	str	r3, [r0, #16]
1001160c:	6143      	str	r3, [r0, #20]
1001160e:	6183      	str	r3, [r0, #24]
10011610:	0019      	movs	r1, r3
10011612:	2208      	movs	r2, #8
10011614:	305c      	adds	r0, #92	; 0x5c
10011616:	f7ff fccf 	bl	10010fb8 <memset>
1001161a:	4b05      	ldr	r3, [pc, #20]	; (10011630 <std.isra.0+0x38>)
1001161c:	6224      	str	r4, [r4, #32]
1001161e:	6263      	str	r3, [r4, #36]	; 0x24
10011620:	4b04      	ldr	r3, [pc, #16]	; (10011634 <std.isra.0+0x3c>)
10011622:	62a3      	str	r3, [r4, #40]	; 0x28
10011624:	4b04      	ldr	r3, [pc, #16]	; (10011638 <std.isra.0+0x40>)
10011626:	62e3      	str	r3, [r4, #44]	; 0x2c
10011628:	4b04      	ldr	r3, [pc, #16]	; (1001163c <std.isra.0+0x44>)
1001162a:	6323      	str	r3, [r4, #48]	; 0x30
1001162c:	bd10      	pop	{r4, pc}
1001162e:	46c0      	nop			; (mov r8, r8)
10011630:	10011fe1 	.word	0x10011fe1
10011634:	10012009 	.word	0x10012009
10011638:	10012041 	.word	0x10012041
1001163c:	1001206d 	.word	0x1001206d

10011640 <__sfmoreglue>:
10011640:	b570      	push	{r4, r5, r6, lr}
10011642:	2568      	movs	r5, #104	; 0x68
10011644:	1e4b      	subs	r3, r1, #1
10011646:	435d      	muls	r5, r3
10011648:	000e      	movs	r6, r1
1001164a:	0029      	movs	r1, r5
1001164c:	3174      	adds	r1, #116	; 0x74
1001164e:	f000 f955 	bl	100118fc <_malloc_r>
10011652:	1e04      	subs	r4, r0, #0
10011654:	d008      	beq.n	10011668 <__sfmoreglue+0x28>
10011656:	2100      	movs	r1, #0
10011658:	002a      	movs	r2, r5
1001165a:	6001      	str	r1, [r0, #0]
1001165c:	6046      	str	r6, [r0, #4]
1001165e:	300c      	adds	r0, #12
10011660:	60a0      	str	r0, [r4, #8]
10011662:	3268      	adds	r2, #104	; 0x68
10011664:	f7ff fca8 	bl	10010fb8 <memset>
10011668:	0020      	movs	r0, r4
1001166a:	bd70      	pop	{r4, r5, r6, pc}

1001166c <__sinit>:
1001166c:	6983      	ldr	r3, [r0, #24]
1001166e:	b513      	push	{r0, r1, r4, lr}
10011670:	0004      	movs	r4, r0
10011672:	2b00      	cmp	r3, #0
10011674:	d128      	bne.n	100116c8 <__sinit+0x5c>
10011676:	6483      	str	r3, [r0, #72]	; 0x48
10011678:	64c3      	str	r3, [r0, #76]	; 0x4c
1001167a:	6503      	str	r3, [r0, #80]	; 0x50
1001167c:	4b13      	ldr	r3, [pc, #76]	; (100116cc <__sinit+0x60>)
1001167e:	4a14      	ldr	r2, [pc, #80]	; (100116d0 <__sinit+0x64>)
10011680:	681b      	ldr	r3, [r3, #0]
10011682:	6282      	str	r2, [r0, #40]	; 0x28
10011684:	9301      	str	r3, [sp, #4]
10011686:	4298      	cmp	r0, r3
10011688:	d101      	bne.n	1001168e <__sinit+0x22>
1001168a:	2301      	movs	r3, #1
1001168c:	6183      	str	r3, [r0, #24]
1001168e:	0020      	movs	r0, r4
10011690:	f000 f820 	bl	100116d4 <__sfp>
10011694:	6060      	str	r0, [r4, #4]
10011696:	0020      	movs	r0, r4
10011698:	f000 f81c 	bl	100116d4 <__sfp>
1001169c:	60a0      	str	r0, [r4, #8]
1001169e:	0020      	movs	r0, r4
100116a0:	f000 f818 	bl	100116d4 <__sfp>
100116a4:	2200      	movs	r2, #0
100116a6:	60e0      	str	r0, [r4, #12]
100116a8:	2104      	movs	r1, #4
100116aa:	6860      	ldr	r0, [r4, #4]
100116ac:	f7ff ffa4 	bl	100115f8 <std.isra.0>
100116b0:	2201      	movs	r2, #1
100116b2:	2109      	movs	r1, #9
100116b4:	68a0      	ldr	r0, [r4, #8]
100116b6:	f7ff ff9f 	bl	100115f8 <std.isra.0>
100116ba:	2202      	movs	r2, #2
100116bc:	2112      	movs	r1, #18
100116be:	68e0      	ldr	r0, [r4, #12]
100116c0:	f7ff ff9a 	bl	100115f8 <std.isra.0>
100116c4:	2301      	movs	r3, #1
100116c6:	61a3      	str	r3, [r4, #24]
100116c8:	bd13      	pop	{r0, r1, r4, pc}
100116ca:	46c0      	nop			; (mov r8, r8)
100116cc:	100137dc 	.word	0x100137dc
100116d0:	100115e9 	.word	0x100115e9

100116d4 <__sfp>:
100116d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100116d6:	4b1d      	ldr	r3, [pc, #116]	; (1001174c <__sfp+0x78>)
100116d8:	0006      	movs	r6, r0
100116da:	681d      	ldr	r5, [r3, #0]
100116dc:	69ab      	ldr	r3, [r5, #24]
100116de:	2b00      	cmp	r3, #0
100116e0:	d102      	bne.n	100116e8 <__sfp+0x14>
100116e2:	0028      	movs	r0, r5
100116e4:	f7ff ffc2 	bl	1001166c <__sinit>
100116e8:	3548      	adds	r5, #72	; 0x48
100116ea:	68ac      	ldr	r4, [r5, #8]
100116ec:	686b      	ldr	r3, [r5, #4]
100116ee:	3b01      	subs	r3, #1
100116f0:	d405      	bmi.n	100116fe <__sfp+0x2a>
100116f2:	220c      	movs	r2, #12
100116f4:	5ea7      	ldrsh	r7, [r4, r2]
100116f6:	2f00      	cmp	r7, #0
100116f8:	d010      	beq.n	1001171c <__sfp+0x48>
100116fa:	3468      	adds	r4, #104	; 0x68
100116fc:	e7f7      	b.n	100116ee <__sfp+0x1a>
100116fe:	682b      	ldr	r3, [r5, #0]
10011700:	2b00      	cmp	r3, #0
10011702:	d001      	beq.n	10011708 <__sfp+0x34>
10011704:	682d      	ldr	r5, [r5, #0]
10011706:	e7f0      	b.n	100116ea <__sfp+0x16>
10011708:	2104      	movs	r1, #4
1001170a:	0030      	movs	r0, r6
1001170c:	f7ff ff98 	bl	10011640 <__sfmoreglue>
10011710:	6028      	str	r0, [r5, #0]
10011712:	2800      	cmp	r0, #0
10011714:	d1f6      	bne.n	10011704 <__sfp+0x30>
10011716:	230c      	movs	r3, #12
10011718:	6033      	str	r3, [r6, #0]
1001171a:	e016      	b.n	1001174a <__sfp+0x76>
1001171c:	2301      	movs	r3, #1
1001171e:	0020      	movs	r0, r4
10011720:	425b      	negs	r3, r3
10011722:	81e3      	strh	r3, [r4, #14]
10011724:	3302      	adds	r3, #2
10011726:	81a3      	strh	r3, [r4, #12]
10011728:	6667      	str	r7, [r4, #100]	; 0x64
1001172a:	6027      	str	r7, [r4, #0]
1001172c:	60a7      	str	r7, [r4, #8]
1001172e:	6067      	str	r7, [r4, #4]
10011730:	6127      	str	r7, [r4, #16]
10011732:	6167      	str	r7, [r4, #20]
10011734:	61a7      	str	r7, [r4, #24]
10011736:	305c      	adds	r0, #92	; 0x5c
10011738:	2208      	movs	r2, #8
1001173a:	0039      	movs	r1, r7
1001173c:	f7ff fc3c 	bl	10010fb8 <memset>
10011740:	0020      	movs	r0, r4
10011742:	6367      	str	r7, [r4, #52]	; 0x34
10011744:	63a7      	str	r7, [r4, #56]	; 0x38
10011746:	64a7      	str	r7, [r4, #72]	; 0x48
10011748:	64e7      	str	r7, [r4, #76]	; 0x4c
1001174a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001174c:	100137dc 	.word	0x100137dc

10011750 <_fwalk_reent>:
10011750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011752:	0004      	movs	r4, r0
10011754:	0007      	movs	r7, r0
10011756:	2600      	movs	r6, #0
10011758:	9101      	str	r1, [sp, #4]
1001175a:	3448      	adds	r4, #72	; 0x48
1001175c:	2c00      	cmp	r4, #0
1001175e:	d016      	beq.n	1001178e <_fwalk_reent+0x3e>
10011760:	6863      	ldr	r3, [r4, #4]
10011762:	68a5      	ldr	r5, [r4, #8]
10011764:	9300      	str	r3, [sp, #0]
10011766:	9b00      	ldr	r3, [sp, #0]
10011768:	3b01      	subs	r3, #1
1001176a:	9300      	str	r3, [sp, #0]
1001176c:	d40d      	bmi.n	1001178a <_fwalk_reent+0x3a>
1001176e:	89ab      	ldrh	r3, [r5, #12]
10011770:	2b01      	cmp	r3, #1
10011772:	d908      	bls.n	10011786 <_fwalk_reent+0x36>
10011774:	220e      	movs	r2, #14
10011776:	5eab      	ldrsh	r3, [r5, r2]
10011778:	3301      	adds	r3, #1
1001177a:	d004      	beq.n	10011786 <_fwalk_reent+0x36>
1001177c:	0029      	movs	r1, r5
1001177e:	0038      	movs	r0, r7
10011780:	9b01      	ldr	r3, [sp, #4]
10011782:	4798      	blx	r3
10011784:	4306      	orrs	r6, r0
10011786:	3568      	adds	r5, #104	; 0x68
10011788:	e7ed      	b.n	10011766 <_fwalk_reent+0x16>
1001178a:	6824      	ldr	r4, [r4, #0]
1001178c:	e7e6      	b.n	1001175c <_fwalk_reent+0xc>
1001178e:	0030      	movs	r0, r6
10011790:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10011794 <__swhatbuf_r>:
10011794:	b570      	push	{r4, r5, r6, lr}
10011796:	000e      	movs	r6, r1
10011798:	001d      	movs	r5, r3
1001179a:	230e      	movs	r3, #14
1001179c:	5ec9      	ldrsh	r1, [r1, r3]
1001179e:	b090      	sub	sp, #64	; 0x40
100117a0:	0014      	movs	r4, r2
100117a2:	2900      	cmp	r1, #0
100117a4:	da06      	bge.n	100117b4 <__swhatbuf_r+0x20>
100117a6:	2300      	movs	r3, #0
100117a8:	602b      	str	r3, [r5, #0]
100117aa:	89b3      	ldrh	r3, [r6, #12]
100117ac:	061b      	lsls	r3, r3, #24
100117ae:	d50f      	bpl.n	100117d0 <__swhatbuf_r+0x3c>
100117b0:	2340      	movs	r3, #64	; 0x40
100117b2:	e00f      	b.n	100117d4 <__swhatbuf_r+0x40>
100117b4:	aa01      	add	r2, sp, #4
100117b6:	f000 fc85 	bl	100120c4 <_fstat_r>
100117ba:	2800      	cmp	r0, #0
100117bc:	dbf3      	blt.n	100117a6 <__swhatbuf_r+0x12>
100117be:	23f0      	movs	r3, #240	; 0xf0
100117c0:	9a02      	ldr	r2, [sp, #8]
100117c2:	021b      	lsls	r3, r3, #8
100117c4:	4013      	ands	r3, r2
100117c6:	4a05      	ldr	r2, [pc, #20]	; (100117dc <__swhatbuf_r+0x48>)
100117c8:	189b      	adds	r3, r3, r2
100117ca:	425a      	negs	r2, r3
100117cc:	4153      	adcs	r3, r2
100117ce:	602b      	str	r3, [r5, #0]
100117d0:	2380      	movs	r3, #128	; 0x80
100117d2:	00db      	lsls	r3, r3, #3
100117d4:	2000      	movs	r0, #0
100117d6:	6023      	str	r3, [r4, #0]
100117d8:	b010      	add	sp, #64	; 0x40
100117da:	bd70      	pop	{r4, r5, r6, pc}
100117dc:	ffffe000 	.word	0xffffe000

100117e0 <__smakebuf_r>:
100117e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100117e2:	2602      	movs	r6, #2
100117e4:	898b      	ldrh	r3, [r1, #12]
100117e6:	0005      	movs	r5, r0
100117e8:	000c      	movs	r4, r1
100117ea:	4233      	tst	r3, r6
100117ec:	d110      	bne.n	10011810 <__smakebuf_r+0x30>
100117ee:	ab01      	add	r3, sp, #4
100117f0:	466a      	mov	r2, sp
100117f2:	f7ff ffcf 	bl	10011794 <__swhatbuf_r>
100117f6:	9900      	ldr	r1, [sp, #0]
100117f8:	0007      	movs	r7, r0
100117fa:	0028      	movs	r0, r5
100117fc:	f000 f87e 	bl	100118fc <_malloc_r>
10011800:	2800      	cmp	r0, #0
10011802:	d10c      	bne.n	1001181e <__smakebuf_r+0x3e>
10011804:	220c      	movs	r2, #12
10011806:	5ea3      	ldrsh	r3, [r4, r2]
10011808:	059a      	lsls	r2, r3, #22
1001180a:	d423      	bmi.n	10011854 <__smakebuf_r+0x74>
1001180c:	4333      	orrs	r3, r6
1001180e:	81a3      	strh	r3, [r4, #12]
10011810:	0023      	movs	r3, r4
10011812:	3347      	adds	r3, #71	; 0x47
10011814:	6023      	str	r3, [r4, #0]
10011816:	6123      	str	r3, [r4, #16]
10011818:	2301      	movs	r3, #1
1001181a:	6163      	str	r3, [r4, #20]
1001181c:	e01a      	b.n	10011854 <__smakebuf_r+0x74>
1001181e:	2280      	movs	r2, #128	; 0x80
10011820:	4b0d      	ldr	r3, [pc, #52]	; (10011858 <__smakebuf_r+0x78>)
10011822:	62ab      	str	r3, [r5, #40]	; 0x28
10011824:	89a3      	ldrh	r3, [r4, #12]
10011826:	6020      	str	r0, [r4, #0]
10011828:	4313      	orrs	r3, r2
1001182a:	81a3      	strh	r3, [r4, #12]
1001182c:	9b00      	ldr	r3, [sp, #0]
1001182e:	6120      	str	r0, [r4, #16]
10011830:	6163      	str	r3, [r4, #20]
10011832:	9b01      	ldr	r3, [sp, #4]
10011834:	2b00      	cmp	r3, #0
10011836:	d00a      	beq.n	1001184e <__smakebuf_r+0x6e>
10011838:	230e      	movs	r3, #14
1001183a:	5ee1      	ldrsh	r1, [r4, r3]
1001183c:	0028      	movs	r0, r5
1001183e:	f000 fc53 	bl	100120e8 <_isatty_r>
10011842:	2800      	cmp	r0, #0
10011844:	d003      	beq.n	1001184e <__smakebuf_r+0x6e>
10011846:	2201      	movs	r2, #1
10011848:	89a3      	ldrh	r3, [r4, #12]
1001184a:	4313      	orrs	r3, r2
1001184c:	81a3      	strh	r3, [r4, #12]
1001184e:	89a3      	ldrh	r3, [r4, #12]
10011850:	431f      	orrs	r7, r3
10011852:	81a7      	strh	r7, [r4, #12]
10011854:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10011856:	46c0      	nop			; (mov r8, r8)
10011858:	100115e9 	.word	0x100115e9

1001185c <malloc>:
1001185c:	b510      	push	{r4, lr}
1001185e:	4b03      	ldr	r3, [pc, #12]	; (1001186c <malloc+0x10>)
10011860:	0001      	movs	r1, r0
10011862:	6818      	ldr	r0, [r3, #0]
10011864:	f000 f84a 	bl	100118fc <_malloc_r>
10011868:	bd10      	pop	{r4, pc}
1001186a:	46c0      	nop			; (mov r8, r8)
1001186c:	10013904 	.word	0x10013904

10011870 <_free_r>:
10011870:	b530      	push	{r4, r5, lr}
10011872:	2900      	cmp	r1, #0
10011874:	d03e      	beq.n	100118f4 <_free_r+0x84>
10011876:	3904      	subs	r1, #4
10011878:	680b      	ldr	r3, [r1, #0]
1001187a:	2b00      	cmp	r3, #0
1001187c:	da00      	bge.n	10011880 <_free_r+0x10>
1001187e:	18c9      	adds	r1, r1, r3
10011880:	4a1d      	ldr	r2, [pc, #116]	; (100118f8 <_free_r+0x88>)
10011882:	6813      	ldr	r3, [r2, #0]
10011884:	0014      	movs	r4, r2
10011886:	2b00      	cmp	r3, #0
10011888:	d102      	bne.n	10011890 <_free_r+0x20>
1001188a:	604b      	str	r3, [r1, #4]
1001188c:	6011      	str	r1, [r2, #0]
1001188e:	e031      	b.n	100118f4 <_free_r+0x84>
10011890:	428b      	cmp	r3, r1
10011892:	d90d      	bls.n	100118b0 <_free_r+0x40>
10011894:	680a      	ldr	r2, [r1, #0]
10011896:	1888      	adds	r0, r1, r2
10011898:	4283      	cmp	r3, r0
1001189a:	d103      	bne.n	100118a4 <_free_r+0x34>
1001189c:	6818      	ldr	r0, [r3, #0]
1001189e:	685b      	ldr	r3, [r3, #4]
100118a0:	1882      	adds	r2, r0, r2
100118a2:	600a      	str	r2, [r1, #0]
100118a4:	604b      	str	r3, [r1, #4]
100118a6:	6021      	str	r1, [r4, #0]
100118a8:	e024      	b.n	100118f4 <_free_r+0x84>
100118aa:	428a      	cmp	r2, r1
100118ac:	d803      	bhi.n	100118b6 <_free_r+0x46>
100118ae:	0013      	movs	r3, r2
100118b0:	685a      	ldr	r2, [r3, #4]
100118b2:	2a00      	cmp	r2, #0
100118b4:	d1f9      	bne.n	100118aa <_free_r+0x3a>
100118b6:	681d      	ldr	r5, [r3, #0]
100118b8:	195c      	adds	r4, r3, r5
100118ba:	428c      	cmp	r4, r1
100118bc:	d10b      	bne.n	100118d6 <_free_r+0x66>
100118be:	6809      	ldr	r1, [r1, #0]
100118c0:	1869      	adds	r1, r5, r1
100118c2:	1858      	adds	r0, r3, r1
100118c4:	6019      	str	r1, [r3, #0]
100118c6:	4282      	cmp	r2, r0
100118c8:	d114      	bne.n	100118f4 <_free_r+0x84>
100118ca:	6810      	ldr	r0, [r2, #0]
100118cc:	6852      	ldr	r2, [r2, #4]
100118ce:	1841      	adds	r1, r0, r1
100118d0:	6019      	str	r1, [r3, #0]
100118d2:	605a      	str	r2, [r3, #4]
100118d4:	e00e      	b.n	100118f4 <_free_r+0x84>
100118d6:	428c      	cmp	r4, r1
100118d8:	d902      	bls.n	100118e0 <_free_r+0x70>
100118da:	230c      	movs	r3, #12
100118dc:	6003      	str	r3, [r0, #0]
100118de:	e009      	b.n	100118f4 <_free_r+0x84>
100118e0:	6808      	ldr	r0, [r1, #0]
100118e2:	180c      	adds	r4, r1, r0
100118e4:	42a2      	cmp	r2, r4
100118e6:	d103      	bne.n	100118f0 <_free_r+0x80>
100118e8:	6814      	ldr	r4, [r2, #0]
100118ea:	6852      	ldr	r2, [r2, #4]
100118ec:	1820      	adds	r0, r4, r0
100118ee:	6008      	str	r0, [r1, #0]
100118f0:	604a      	str	r2, [r1, #4]
100118f2:	6059      	str	r1, [r3, #4]
100118f4:	bd30      	pop	{r4, r5, pc}
100118f6:	46c0      	nop			; (mov r8, r8)
100118f8:	100153c4 	.word	0x100153c4

100118fc <_malloc_r>:
100118fc:	2303      	movs	r3, #3
100118fe:	b570      	push	{r4, r5, r6, lr}
10011900:	1ccd      	adds	r5, r1, #3
10011902:	439d      	bics	r5, r3
10011904:	3508      	adds	r5, #8
10011906:	0006      	movs	r6, r0
10011908:	2d0c      	cmp	r5, #12
1001190a:	d201      	bcs.n	10011910 <_malloc_r+0x14>
1001190c:	250c      	movs	r5, #12
1001190e:	e005      	b.n	1001191c <_malloc_r+0x20>
10011910:	2d00      	cmp	r5, #0
10011912:	da03      	bge.n	1001191c <_malloc_r+0x20>
10011914:	230c      	movs	r3, #12
10011916:	2000      	movs	r0, #0
10011918:	6033      	str	r3, [r6, #0]
1001191a:	e040      	b.n	1001199e <_malloc_r+0xa2>
1001191c:	42a9      	cmp	r1, r5
1001191e:	d8f9      	bhi.n	10011914 <_malloc_r+0x18>
10011920:	4b1f      	ldr	r3, [pc, #124]	; (100119a0 <_malloc_r+0xa4>)
10011922:	681c      	ldr	r4, [r3, #0]
10011924:	001a      	movs	r2, r3
10011926:	0021      	movs	r1, r4
10011928:	2900      	cmp	r1, #0
1001192a:	d013      	beq.n	10011954 <_malloc_r+0x58>
1001192c:	680b      	ldr	r3, [r1, #0]
1001192e:	1b5b      	subs	r3, r3, r5
10011930:	d40d      	bmi.n	1001194e <_malloc_r+0x52>
10011932:	2b0b      	cmp	r3, #11
10011934:	d902      	bls.n	1001193c <_malloc_r+0x40>
10011936:	600b      	str	r3, [r1, #0]
10011938:	18cc      	adds	r4, r1, r3
1001193a:	e01e      	b.n	1001197a <_malloc_r+0x7e>
1001193c:	428c      	cmp	r4, r1
1001193e:	d102      	bne.n	10011946 <_malloc_r+0x4a>
10011940:	6863      	ldr	r3, [r4, #4]
10011942:	6013      	str	r3, [r2, #0]
10011944:	e01a      	b.n	1001197c <_malloc_r+0x80>
10011946:	684b      	ldr	r3, [r1, #4]
10011948:	6063      	str	r3, [r4, #4]
1001194a:	000c      	movs	r4, r1
1001194c:	e016      	b.n	1001197c <_malloc_r+0x80>
1001194e:	000c      	movs	r4, r1
10011950:	6849      	ldr	r1, [r1, #4]
10011952:	e7e9      	b.n	10011928 <_malloc_r+0x2c>
10011954:	4c13      	ldr	r4, [pc, #76]	; (100119a4 <_malloc_r+0xa8>)
10011956:	6823      	ldr	r3, [r4, #0]
10011958:	2b00      	cmp	r3, #0
1001195a:	d103      	bne.n	10011964 <_malloc_r+0x68>
1001195c:	0030      	movs	r0, r6
1001195e:	f000 fb2d 	bl	10011fbc <_sbrk_r>
10011962:	6020      	str	r0, [r4, #0]
10011964:	0029      	movs	r1, r5
10011966:	0030      	movs	r0, r6
10011968:	f000 fb28 	bl	10011fbc <_sbrk_r>
1001196c:	1c43      	adds	r3, r0, #1
1001196e:	d0d1      	beq.n	10011914 <_malloc_r+0x18>
10011970:	2303      	movs	r3, #3
10011972:	1cc4      	adds	r4, r0, #3
10011974:	439c      	bics	r4, r3
10011976:	42a0      	cmp	r0, r4
10011978:	d10a      	bne.n	10011990 <_malloc_r+0x94>
1001197a:	6025      	str	r5, [r4, #0]
1001197c:	0020      	movs	r0, r4
1001197e:	2207      	movs	r2, #7
10011980:	300b      	adds	r0, #11
10011982:	1d23      	adds	r3, r4, #4
10011984:	4390      	bics	r0, r2
10011986:	1ac3      	subs	r3, r0, r3
10011988:	d009      	beq.n	1001199e <_malloc_r+0xa2>
1001198a:	425a      	negs	r2, r3
1001198c:	50e2      	str	r2, [r4, r3]
1001198e:	e006      	b.n	1001199e <_malloc_r+0xa2>
10011990:	1a21      	subs	r1, r4, r0
10011992:	0030      	movs	r0, r6
10011994:	f000 fb12 	bl	10011fbc <_sbrk_r>
10011998:	1c43      	adds	r3, r0, #1
1001199a:	d1ee      	bne.n	1001197a <_malloc_r+0x7e>
1001199c:	e7ba      	b.n	10011914 <_malloc_r+0x18>
1001199e:	bd70      	pop	{r4, r5, r6, pc}
100119a0:	100153c4 	.word	0x100153c4
100119a4:	100153c0 	.word	0x100153c0

100119a8 <__sfputc_r>:
100119a8:	6893      	ldr	r3, [r2, #8]
100119aa:	b510      	push	{r4, lr}
100119ac:	3b01      	subs	r3, #1
100119ae:	6093      	str	r3, [r2, #8]
100119b0:	2b00      	cmp	r3, #0
100119b2:	da05      	bge.n	100119c0 <__sfputc_r+0x18>
100119b4:	6994      	ldr	r4, [r2, #24]
100119b6:	42a3      	cmp	r3, r4
100119b8:	db08      	blt.n	100119cc <__sfputc_r+0x24>
100119ba:	b2cb      	uxtb	r3, r1
100119bc:	2b0a      	cmp	r3, #10
100119be:	d005      	beq.n	100119cc <__sfputc_r+0x24>
100119c0:	6813      	ldr	r3, [r2, #0]
100119c2:	1c58      	adds	r0, r3, #1
100119c4:	6010      	str	r0, [r2, #0]
100119c6:	7019      	strb	r1, [r3, #0]
100119c8:	b2c8      	uxtb	r0, r1
100119ca:	e001      	b.n	100119d0 <__sfputc_r+0x28>
100119cc:	f7ff fc8c 	bl	100112e8 <__swbuf_r>
100119d0:	bd10      	pop	{r4, pc}

100119d2 <__sfputs_r>:
100119d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100119d4:	0006      	movs	r6, r0
100119d6:	000f      	movs	r7, r1
100119d8:	0014      	movs	r4, r2
100119da:	18d5      	adds	r5, r2, r3
100119dc:	42ac      	cmp	r4, r5
100119de:	d008      	beq.n	100119f2 <__sfputs_r+0x20>
100119e0:	7821      	ldrb	r1, [r4, #0]
100119e2:	003a      	movs	r2, r7
100119e4:	0030      	movs	r0, r6
100119e6:	f7ff ffdf 	bl	100119a8 <__sfputc_r>
100119ea:	3401      	adds	r4, #1
100119ec:	1c43      	adds	r3, r0, #1
100119ee:	d1f5      	bne.n	100119dc <__sfputs_r+0xa>
100119f0:	e000      	b.n	100119f4 <__sfputs_r+0x22>
100119f2:	2000      	movs	r0, #0
100119f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

100119f8 <_vfiprintf_r>:
100119f8:	b5f0      	push	{r4, r5, r6, r7, lr}
100119fa:	b09f      	sub	sp, #124	; 0x7c
100119fc:	0006      	movs	r6, r0
100119fe:	000f      	movs	r7, r1
10011a00:	9202      	str	r2, [sp, #8]
10011a02:	9305      	str	r3, [sp, #20]
10011a04:	2800      	cmp	r0, #0
10011a06:	d004      	beq.n	10011a12 <_vfiprintf_r+0x1a>
10011a08:	6983      	ldr	r3, [r0, #24]
10011a0a:	2b00      	cmp	r3, #0
10011a0c:	d101      	bne.n	10011a12 <_vfiprintf_r+0x1a>
10011a0e:	f7ff fe2d 	bl	1001166c <__sinit>
10011a12:	4b7f      	ldr	r3, [pc, #508]	; (10011c10 <_vfiprintf_r+0x218>)
10011a14:	429f      	cmp	r7, r3
10011a16:	d101      	bne.n	10011a1c <_vfiprintf_r+0x24>
10011a18:	6877      	ldr	r7, [r6, #4]
10011a1a:	e008      	b.n	10011a2e <_vfiprintf_r+0x36>
10011a1c:	4b7d      	ldr	r3, [pc, #500]	; (10011c14 <_vfiprintf_r+0x21c>)
10011a1e:	429f      	cmp	r7, r3
10011a20:	d101      	bne.n	10011a26 <_vfiprintf_r+0x2e>
10011a22:	68b7      	ldr	r7, [r6, #8]
10011a24:	e003      	b.n	10011a2e <_vfiprintf_r+0x36>
10011a26:	4b7c      	ldr	r3, [pc, #496]	; (10011c18 <_vfiprintf_r+0x220>)
10011a28:	429f      	cmp	r7, r3
10011a2a:	d100      	bne.n	10011a2e <_vfiprintf_r+0x36>
10011a2c:	68f7      	ldr	r7, [r6, #12]
10011a2e:	89bb      	ldrh	r3, [r7, #12]
10011a30:	071b      	lsls	r3, r3, #28
10011a32:	d50a      	bpl.n	10011a4a <_vfiprintf_r+0x52>
10011a34:	693b      	ldr	r3, [r7, #16]
10011a36:	2b00      	cmp	r3, #0
10011a38:	d007      	beq.n	10011a4a <_vfiprintf_r+0x52>
10011a3a:	2300      	movs	r3, #0
10011a3c:	ad06      	add	r5, sp, #24
10011a3e:	616b      	str	r3, [r5, #20]
10011a40:	3320      	adds	r3, #32
10011a42:	766b      	strb	r3, [r5, #25]
10011a44:	3310      	adds	r3, #16
10011a46:	76ab      	strb	r3, [r5, #26]
10011a48:	e03d      	b.n	10011ac6 <_vfiprintf_r+0xce>
10011a4a:	0039      	movs	r1, r7
10011a4c:	0030      	movs	r0, r6
10011a4e:	f7ff fca3 	bl	10011398 <__swsetup_r>
10011a52:	2800      	cmp	r0, #0
10011a54:	d0f1      	beq.n	10011a3a <_vfiprintf_r+0x42>
10011a56:	2001      	movs	r0, #1
10011a58:	4240      	negs	r0, r0
10011a5a:	e0d6      	b.n	10011c0a <_vfiprintf_r+0x212>
10011a5c:	9a05      	ldr	r2, [sp, #20]
10011a5e:	1d11      	adds	r1, r2, #4
10011a60:	6812      	ldr	r2, [r2, #0]
10011a62:	9105      	str	r1, [sp, #20]
10011a64:	2a00      	cmp	r2, #0
10011a66:	da00      	bge.n	10011a6a <_vfiprintf_r+0x72>
10011a68:	e07f      	b.n	10011b6a <_vfiprintf_r+0x172>
10011a6a:	9209      	str	r2, [sp, #36]	; 0x24
10011a6c:	3401      	adds	r4, #1
10011a6e:	7823      	ldrb	r3, [r4, #0]
10011a70:	2b2e      	cmp	r3, #46	; 0x2e
10011a72:	d100      	bne.n	10011a76 <_vfiprintf_r+0x7e>
10011a74:	e08d      	b.n	10011b92 <_vfiprintf_r+0x19a>
10011a76:	7821      	ldrb	r1, [r4, #0]
10011a78:	2203      	movs	r2, #3
10011a7a:	4868      	ldr	r0, [pc, #416]	; (10011c1c <_vfiprintf_r+0x224>)
10011a7c:	f000 fb5a 	bl	10012134 <memchr>
10011a80:	2800      	cmp	r0, #0
10011a82:	d007      	beq.n	10011a94 <_vfiprintf_r+0x9c>
10011a84:	4b65      	ldr	r3, [pc, #404]	; (10011c1c <_vfiprintf_r+0x224>)
10011a86:	682a      	ldr	r2, [r5, #0]
10011a88:	1ac0      	subs	r0, r0, r3
10011a8a:	2340      	movs	r3, #64	; 0x40
10011a8c:	4083      	lsls	r3, r0
10011a8e:	4313      	orrs	r3, r2
10011a90:	602b      	str	r3, [r5, #0]
10011a92:	3401      	adds	r4, #1
10011a94:	7821      	ldrb	r1, [r4, #0]
10011a96:	1c63      	adds	r3, r4, #1
10011a98:	2206      	movs	r2, #6
10011a9a:	4861      	ldr	r0, [pc, #388]	; (10011c20 <_vfiprintf_r+0x228>)
10011a9c:	9302      	str	r3, [sp, #8]
10011a9e:	7629      	strb	r1, [r5, #24]
10011aa0:	f000 fb48 	bl	10012134 <memchr>
10011aa4:	2800      	cmp	r0, #0
10011aa6:	d100      	bne.n	10011aaa <_vfiprintf_r+0xb2>
10011aa8:	e09d      	b.n	10011be6 <_vfiprintf_r+0x1ee>
10011aaa:	4b5e      	ldr	r3, [pc, #376]	; (10011c24 <_vfiprintf_r+0x22c>)
10011aac:	2b00      	cmp	r3, #0
10011aae:	d000      	beq.n	10011ab2 <_vfiprintf_r+0xba>
10011ab0:	e090      	b.n	10011bd4 <_vfiprintf_r+0x1dc>
10011ab2:	2207      	movs	r2, #7
10011ab4:	9b05      	ldr	r3, [sp, #20]
10011ab6:	3307      	adds	r3, #7
10011ab8:	4393      	bics	r3, r2
10011aba:	3308      	adds	r3, #8
10011abc:	9305      	str	r3, [sp, #20]
10011abe:	696b      	ldr	r3, [r5, #20]
10011ac0:	9a03      	ldr	r2, [sp, #12]
10011ac2:	189b      	adds	r3, r3, r2
10011ac4:	616b      	str	r3, [r5, #20]
10011ac6:	9c02      	ldr	r4, [sp, #8]
10011ac8:	7823      	ldrb	r3, [r4, #0]
10011aca:	2b00      	cmp	r3, #0
10011acc:	d104      	bne.n	10011ad8 <_vfiprintf_r+0xe0>
10011ace:	9b02      	ldr	r3, [sp, #8]
10011ad0:	1ae3      	subs	r3, r4, r3
10011ad2:	9304      	str	r3, [sp, #16]
10011ad4:	d012      	beq.n	10011afc <_vfiprintf_r+0x104>
10011ad6:	e003      	b.n	10011ae0 <_vfiprintf_r+0xe8>
10011ad8:	2b25      	cmp	r3, #37	; 0x25
10011ada:	d0f8      	beq.n	10011ace <_vfiprintf_r+0xd6>
10011adc:	3401      	adds	r4, #1
10011ade:	e7f3      	b.n	10011ac8 <_vfiprintf_r+0xd0>
10011ae0:	9b04      	ldr	r3, [sp, #16]
10011ae2:	9a02      	ldr	r2, [sp, #8]
10011ae4:	0039      	movs	r1, r7
10011ae6:	0030      	movs	r0, r6
10011ae8:	f7ff ff73 	bl	100119d2 <__sfputs_r>
10011aec:	1c43      	adds	r3, r0, #1
10011aee:	d100      	bne.n	10011af2 <_vfiprintf_r+0xfa>
10011af0:	e086      	b.n	10011c00 <_vfiprintf_r+0x208>
10011af2:	696a      	ldr	r2, [r5, #20]
10011af4:	9b04      	ldr	r3, [sp, #16]
10011af6:	4694      	mov	ip, r2
10011af8:	4463      	add	r3, ip
10011afa:	616b      	str	r3, [r5, #20]
10011afc:	7823      	ldrb	r3, [r4, #0]
10011afe:	2b00      	cmp	r3, #0
10011b00:	d07e      	beq.n	10011c00 <_vfiprintf_r+0x208>
10011b02:	2201      	movs	r2, #1
10011b04:	2300      	movs	r3, #0
10011b06:	4252      	negs	r2, r2
10011b08:	606a      	str	r2, [r5, #4]
10011b0a:	a902      	add	r1, sp, #8
10011b0c:	3254      	adds	r2, #84	; 0x54
10011b0e:	1852      	adds	r2, r2, r1
10011b10:	3401      	adds	r4, #1
10011b12:	602b      	str	r3, [r5, #0]
10011b14:	60eb      	str	r3, [r5, #12]
10011b16:	60ab      	str	r3, [r5, #8]
10011b18:	7013      	strb	r3, [r2, #0]
10011b1a:	65ab      	str	r3, [r5, #88]	; 0x58
10011b1c:	7821      	ldrb	r1, [r4, #0]
10011b1e:	2205      	movs	r2, #5
10011b20:	4841      	ldr	r0, [pc, #260]	; (10011c28 <_vfiprintf_r+0x230>)
10011b22:	f000 fb07 	bl	10012134 <memchr>
10011b26:	2800      	cmp	r0, #0
10011b28:	d008      	beq.n	10011b3c <_vfiprintf_r+0x144>
10011b2a:	4b3f      	ldr	r3, [pc, #252]	; (10011c28 <_vfiprintf_r+0x230>)
10011b2c:	682a      	ldr	r2, [r5, #0]
10011b2e:	1ac0      	subs	r0, r0, r3
10011b30:	2301      	movs	r3, #1
10011b32:	4083      	lsls	r3, r0
10011b34:	4313      	orrs	r3, r2
10011b36:	602b      	str	r3, [r5, #0]
10011b38:	3401      	adds	r4, #1
10011b3a:	e7ef      	b.n	10011b1c <_vfiprintf_r+0x124>
10011b3c:	682b      	ldr	r3, [r5, #0]
10011b3e:	06da      	lsls	r2, r3, #27
10011b40:	d504      	bpl.n	10011b4c <_vfiprintf_r+0x154>
10011b42:	2253      	movs	r2, #83	; 0x53
10011b44:	2120      	movs	r1, #32
10011b46:	a802      	add	r0, sp, #8
10011b48:	1812      	adds	r2, r2, r0
10011b4a:	7011      	strb	r1, [r2, #0]
10011b4c:	071a      	lsls	r2, r3, #28
10011b4e:	d504      	bpl.n	10011b5a <_vfiprintf_r+0x162>
10011b50:	2253      	movs	r2, #83	; 0x53
10011b52:	212b      	movs	r1, #43	; 0x2b
10011b54:	a802      	add	r0, sp, #8
10011b56:	1812      	adds	r2, r2, r0
10011b58:	7011      	strb	r1, [r2, #0]
10011b5a:	7822      	ldrb	r2, [r4, #0]
10011b5c:	2a2a      	cmp	r2, #42	; 0x2a
10011b5e:	d100      	bne.n	10011b62 <_vfiprintf_r+0x16a>
10011b60:	e77c      	b.n	10011a5c <_vfiprintf_r+0x64>
10011b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011b64:	2000      	movs	r0, #0
10011b66:	210a      	movs	r1, #10
10011b68:	e005      	b.n	10011b76 <_vfiprintf_r+0x17e>
10011b6a:	4252      	negs	r2, r2
10011b6c:	60ea      	str	r2, [r5, #12]
10011b6e:	2202      	movs	r2, #2
10011b70:	4313      	orrs	r3, r2
10011b72:	602b      	str	r3, [r5, #0]
10011b74:	e77a      	b.n	10011a6c <_vfiprintf_r+0x74>
10011b76:	7822      	ldrb	r2, [r4, #0]
10011b78:	3a30      	subs	r2, #48	; 0x30
10011b7a:	2a09      	cmp	r2, #9
10011b7c:	d804      	bhi.n	10011b88 <_vfiprintf_r+0x190>
10011b7e:	434b      	muls	r3, r1
10011b80:	3401      	adds	r4, #1
10011b82:	189b      	adds	r3, r3, r2
10011b84:	2001      	movs	r0, #1
10011b86:	e7f6      	b.n	10011b76 <_vfiprintf_r+0x17e>
10011b88:	2800      	cmp	r0, #0
10011b8a:	d100      	bne.n	10011b8e <_vfiprintf_r+0x196>
10011b8c:	e76f      	b.n	10011a6e <_vfiprintf_r+0x76>
10011b8e:	9309      	str	r3, [sp, #36]	; 0x24
10011b90:	e76d      	b.n	10011a6e <_vfiprintf_r+0x76>
10011b92:	7863      	ldrb	r3, [r4, #1]
10011b94:	2b2a      	cmp	r3, #42	; 0x2a
10011b96:	d10a      	bne.n	10011bae <_vfiprintf_r+0x1b6>
10011b98:	9b05      	ldr	r3, [sp, #20]
10011b9a:	3402      	adds	r4, #2
10011b9c:	1d1a      	adds	r2, r3, #4
10011b9e:	681b      	ldr	r3, [r3, #0]
10011ba0:	9205      	str	r2, [sp, #20]
10011ba2:	2b00      	cmp	r3, #0
10011ba4:	da01      	bge.n	10011baa <_vfiprintf_r+0x1b2>
10011ba6:	2301      	movs	r3, #1
10011ba8:	425b      	negs	r3, r3
10011baa:	9307      	str	r3, [sp, #28]
10011bac:	e763      	b.n	10011a76 <_vfiprintf_r+0x7e>
10011bae:	2300      	movs	r3, #0
10011bb0:	200a      	movs	r0, #10
10011bb2:	001a      	movs	r2, r3
10011bb4:	3401      	adds	r4, #1
10011bb6:	606b      	str	r3, [r5, #4]
10011bb8:	7821      	ldrb	r1, [r4, #0]
10011bba:	3930      	subs	r1, #48	; 0x30
10011bbc:	2909      	cmp	r1, #9
10011bbe:	d804      	bhi.n	10011bca <_vfiprintf_r+0x1d2>
10011bc0:	4342      	muls	r2, r0
10011bc2:	3401      	adds	r4, #1
10011bc4:	1852      	adds	r2, r2, r1
10011bc6:	2301      	movs	r3, #1
10011bc8:	e7f6      	b.n	10011bb8 <_vfiprintf_r+0x1c0>
10011bca:	2b00      	cmp	r3, #0
10011bcc:	d100      	bne.n	10011bd0 <_vfiprintf_r+0x1d8>
10011bce:	e752      	b.n	10011a76 <_vfiprintf_r+0x7e>
10011bd0:	9207      	str	r2, [sp, #28]
10011bd2:	e750      	b.n	10011a76 <_vfiprintf_r+0x7e>
10011bd4:	ab05      	add	r3, sp, #20
10011bd6:	9300      	str	r3, [sp, #0]
10011bd8:	003a      	movs	r2, r7
10011bda:	4b14      	ldr	r3, [pc, #80]	; (10011c2c <_vfiprintf_r+0x234>)
10011bdc:	0029      	movs	r1, r5
10011bde:	0030      	movs	r0, r6
10011be0:	e000      	b.n	10011be4 <_vfiprintf_r+0x1ec>
10011be2:	bf00      	nop
10011be4:	e007      	b.n	10011bf6 <_vfiprintf_r+0x1fe>
10011be6:	ab05      	add	r3, sp, #20
10011be8:	9300      	str	r3, [sp, #0]
10011bea:	003a      	movs	r2, r7
10011bec:	4b0f      	ldr	r3, [pc, #60]	; (10011c2c <_vfiprintf_r+0x234>)
10011bee:	0029      	movs	r1, r5
10011bf0:	0030      	movs	r0, r6
10011bf2:	f000 f88b 	bl	10011d0c <_printf_i>
10011bf6:	9003      	str	r0, [sp, #12]
10011bf8:	9b03      	ldr	r3, [sp, #12]
10011bfa:	3301      	adds	r3, #1
10011bfc:	d000      	beq.n	10011c00 <_vfiprintf_r+0x208>
10011bfe:	e75e      	b.n	10011abe <_vfiprintf_r+0xc6>
10011c00:	89bb      	ldrh	r3, [r7, #12]
10011c02:	065b      	lsls	r3, r3, #25
10011c04:	d500      	bpl.n	10011c08 <_vfiprintf_r+0x210>
10011c06:	e726      	b.n	10011a56 <_vfiprintf_r+0x5e>
10011c08:	980b      	ldr	r0, [sp, #44]	; 0x2c
10011c0a:	b01f      	add	sp, #124	; 0x7c
10011c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011c0e:	46c0      	nop			; (mov r8, r8)
10011c10:	100137e0 	.word	0x100137e0
10011c14:	10013800 	.word	0x10013800
10011c18:	10013820 	.word	0x10013820
10011c1c:	10013846 	.word	0x10013846
10011c20:	1001384a 	.word	0x1001384a
10011c24:	00000000 	.word	0x00000000
10011c28:	10013840 	.word	0x10013840
10011c2c:	100119d3 	.word	0x100119d3

10011c30 <_printf_common>:
10011c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011c32:	0017      	movs	r7, r2
10011c34:	9301      	str	r3, [sp, #4]
10011c36:	688a      	ldr	r2, [r1, #8]
10011c38:	690b      	ldr	r3, [r1, #16]
10011c3a:	9000      	str	r0, [sp, #0]
10011c3c:	000c      	movs	r4, r1
10011c3e:	4293      	cmp	r3, r2
10011c40:	da00      	bge.n	10011c44 <_printf_common+0x14>
10011c42:	0013      	movs	r3, r2
10011c44:	0022      	movs	r2, r4
10011c46:	603b      	str	r3, [r7, #0]
10011c48:	3243      	adds	r2, #67	; 0x43
10011c4a:	7812      	ldrb	r2, [r2, #0]
10011c4c:	2a00      	cmp	r2, #0
10011c4e:	d001      	beq.n	10011c54 <_printf_common+0x24>
10011c50:	3301      	adds	r3, #1
10011c52:	603b      	str	r3, [r7, #0]
10011c54:	6823      	ldr	r3, [r4, #0]
10011c56:	069b      	lsls	r3, r3, #26
10011c58:	d502      	bpl.n	10011c60 <_printf_common+0x30>
10011c5a:	683b      	ldr	r3, [r7, #0]
10011c5c:	3302      	adds	r3, #2
10011c5e:	603b      	str	r3, [r7, #0]
10011c60:	2506      	movs	r5, #6
10011c62:	6823      	ldr	r3, [r4, #0]
10011c64:	401d      	ands	r5, r3
10011c66:	d01e      	beq.n	10011ca6 <_printf_common+0x76>
10011c68:	0023      	movs	r3, r4
10011c6a:	3343      	adds	r3, #67	; 0x43
10011c6c:	781b      	ldrb	r3, [r3, #0]
10011c6e:	1e5a      	subs	r2, r3, #1
10011c70:	4193      	sbcs	r3, r2
10011c72:	6822      	ldr	r2, [r4, #0]
10011c74:	0692      	lsls	r2, r2, #26
10011c76:	d51c      	bpl.n	10011cb2 <_printf_common+0x82>
10011c78:	2030      	movs	r0, #48	; 0x30
10011c7a:	18e1      	adds	r1, r4, r3
10011c7c:	3143      	adds	r1, #67	; 0x43
10011c7e:	7008      	strb	r0, [r1, #0]
10011c80:	0021      	movs	r1, r4
10011c82:	1c5a      	adds	r2, r3, #1
10011c84:	3145      	adds	r1, #69	; 0x45
10011c86:	7809      	ldrb	r1, [r1, #0]
10011c88:	18a2      	adds	r2, r4, r2
10011c8a:	3243      	adds	r2, #67	; 0x43
10011c8c:	3302      	adds	r3, #2
10011c8e:	7011      	strb	r1, [r2, #0]
10011c90:	e00f      	b.n	10011cb2 <_printf_common+0x82>
10011c92:	0022      	movs	r2, r4
10011c94:	2301      	movs	r3, #1
10011c96:	3219      	adds	r2, #25
10011c98:	9901      	ldr	r1, [sp, #4]
10011c9a:	9800      	ldr	r0, [sp, #0]
10011c9c:	9e08      	ldr	r6, [sp, #32]
10011c9e:	47b0      	blx	r6
10011ca0:	1c43      	adds	r3, r0, #1
10011ca2:	d00e      	beq.n	10011cc2 <_printf_common+0x92>
10011ca4:	3501      	adds	r5, #1
10011ca6:	68e3      	ldr	r3, [r4, #12]
10011ca8:	683a      	ldr	r2, [r7, #0]
10011caa:	1a9b      	subs	r3, r3, r2
10011cac:	429d      	cmp	r5, r3
10011cae:	dbf0      	blt.n	10011c92 <_printf_common+0x62>
10011cb0:	e7da      	b.n	10011c68 <_printf_common+0x38>
10011cb2:	0022      	movs	r2, r4
10011cb4:	9901      	ldr	r1, [sp, #4]
10011cb6:	3243      	adds	r2, #67	; 0x43
10011cb8:	9800      	ldr	r0, [sp, #0]
10011cba:	9d08      	ldr	r5, [sp, #32]
10011cbc:	47a8      	blx	r5
10011cbe:	1c43      	adds	r3, r0, #1
10011cc0:	d102      	bne.n	10011cc8 <_printf_common+0x98>
10011cc2:	2001      	movs	r0, #1
10011cc4:	4240      	negs	r0, r0
10011cc6:	e020      	b.n	10011d0a <_printf_common+0xda>
10011cc8:	2306      	movs	r3, #6
10011cca:	6820      	ldr	r0, [r4, #0]
10011ccc:	68e1      	ldr	r1, [r4, #12]
10011cce:	683a      	ldr	r2, [r7, #0]
10011cd0:	4003      	ands	r3, r0
10011cd2:	2500      	movs	r5, #0
10011cd4:	2b04      	cmp	r3, #4
10011cd6:	d103      	bne.n	10011ce0 <_printf_common+0xb0>
10011cd8:	1a8d      	subs	r5, r1, r2
10011cda:	43eb      	mvns	r3, r5
10011cdc:	17db      	asrs	r3, r3, #31
10011cde:	401d      	ands	r5, r3
10011ce0:	68a3      	ldr	r3, [r4, #8]
10011ce2:	6922      	ldr	r2, [r4, #16]
10011ce4:	4293      	cmp	r3, r2
10011ce6:	dd01      	ble.n	10011cec <_printf_common+0xbc>
10011ce8:	1a9b      	subs	r3, r3, r2
10011cea:	18ed      	adds	r5, r5, r3
10011cec:	2700      	movs	r7, #0
10011cee:	42bd      	cmp	r5, r7
10011cf0:	d00a      	beq.n	10011d08 <_printf_common+0xd8>
10011cf2:	0022      	movs	r2, r4
10011cf4:	2301      	movs	r3, #1
10011cf6:	321a      	adds	r2, #26
10011cf8:	9901      	ldr	r1, [sp, #4]
10011cfa:	9800      	ldr	r0, [sp, #0]
10011cfc:	9e08      	ldr	r6, [sp, #32]
10011cfe:	47b0      	blx	r6
10011d00:	1c43      	adds	r3, r0, #1
10011d02:	d0de      	beq.n	10011cc2 <_printf_common+0x92>
10011d04:	3701      	adds	r7, #1
10011d06:	e7f2      	b.n	10011cee <_printf_common+0xbe>
10011d08:	2000      	movs	r0, #0
10011d0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10011d0c <_printf_i>:
10011d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
10011d0e:	b08b      	sub	sp, #44	; 0x2c
10011d10:	9206      	str	r2, [sp, #24]
10011d12:	000a      	movs	r2, r1
10011d14:	3243      	adds	r2, #67	; 0x43
10011d16:	9307      	str	r3, [sp, #28]
10011d18:	9005      	str	r0, [sp, #20]
10011d1a:	9204      	str	r2, [sp, #16]
10011d1c:	7e0a      	ldrb	r2, [r1, #24]
10011d1e:	000c      	movs	r4, r1
10011d20:	9b10      	ldr	r3, [sp, #64]	; 0x40
10011d22:	2a6e      	cmp	r2, #110	; 0x6e
10011d24:	d100      	bne.n	10011d28 <_printf_i+0x1c>
10011d26:	e0ab      	b.n	10011e80 <_printf_i+0x174>
10011d28:	d811      	bhi.n	10011d4e <_printf_i+0x42>
10011d2a:	2a63      	cmp	r2, #99	; 0x63
10011d2c:	d022      	beq.n	10011d74 <_printf_i+0x68>
10011d2e:	d809      	bhi.n	10011d44 <_printf_i+0x38>
10011d30:	2a00      	cmp	r2, #0
10011d32:	d100      	bne.n	10011d36 <_printf_i+0x2a>
10011d34:	e0b5      	b.n	10011ea2 <_printf_i+0x196>
10011d36:	2a58      	cmp	r2, #88	; 0x58
10011d38:	d000      	beq.n	10011d3c <_printf_i+0x30>
10011d3a:	e0c5      	b.n	10011ec8 <_printf_i+0x1bc>
10011d3c:	3145      	adds	r1, #69	; 0x45
10011d3e:	700a      	strb	r2, [r1, #0]
10011d40:	4a81      	ldr	r2, [pc, #516]	; (10011f48 <_printf_i+0x23c>)
10011d42:	e04f      	b.n	10011de4 <_printf_i+0xd8>
10011d44:	2a64      	cmp	r2, #100	; 0x64
10011d46:	d01d      	beq.n	10011d84 <_printf_i+0x78>
10011d48:	2a69      	cmp	r2, #105	; 0x69
10011d4a:	d01b      	beq.n	10011d84 <_printf_i+0x78>
10011d4c:	e0bc      	b.n	10011ec8 <_printf_i+0x1bc>
10011d4e:	2a73      	cmp	r2, #115	; 0x73
10011d50:	d100      	bne.n	10011d54 <_printf_i+0x48>
10011d52:	e0aa      	b.n	10011eaa <_printf_i+0x19e>
10011d54:	d809      	bhi.n	10011d6a <_printf_i+0x5e>
10011d56:	2a6f      	cmp	r2, #111	; 0x6f
10011d58:	d029      	beq.n	10011dae <_printf_i+0xa2>
10011d5a:	2a70      	cmp	r2, #112	; 0x70
10011d5c:	d000      	beq.n	10011d60 <_printf_i+0x54>
10011d5e:	e0b3      	b.n	10011ec8 <_printf_i+0x1bc>
10011d60:	2220      	movs	r2, #32
10011d62:	6809      	ldr	r1, [r1, #0]
10011d64:	430a      	orrs	r2, r1
10011d66:	6022      	str	r2, [r4, #0]
10011d68:	e037      	b.n	10011dda <_printf_i+0xce>
10011d6a:	2a75      	cmp	r2, #117	; 0x75
10011d6c:	d01f      	beq.n	10011dae <_printf_i+0xa2>
10011d6e:	2a78      	cmp	r2, #120	; 0x78
10011d70:	d033      	beq.n	10011dda <_printf_i+0xce>
10011d72:	e0a9      	b.n	10011ec8 <_printf_i+0x1bc>
10011d74:	000e      	movs	r6, r1
10011d76:	681a      	ldr	r2, [r3, #0]
10011d78:	3642      	adds	r6, #66	; 0x42
10011d7a:	1d11      	adds	r1, r2, #4
10011d7c:	6019      	str	r1, [r3, #0]
10011d7e:	6813      	ldr	r3, [r2, #0]
10011d80:	7033      	strb	r3, [r6, #0]
10011d82:	e0a4      	b.n	10011ece <_printf_i+0x1c2>
10011d84:	6821      	ldr	r1, [r4, #0]
10011d86:	681a      	ldr	r2, [r3, #0]
10011d88:	0608      	lsls	r0, r1, #24
10011d8a:	d406      	bmi.n	10011d9a <_printf_i+0x8e>
10011d8c:	0649      	lsls	r1, r1, #25
10011d8e:	d504      	bpl.n	10011d9a <_printf_i+0x8e>
10011d90:	1d11      	adds	r1, r2, #4
10011d92:	6019      	str	r1, [r3, #0]
10011d94:	2300      	movs	r3, #0
10011d96:	5ed5      	ldrsh	r5, [r2, r3]
10011d98:	e002      	b.n	10011da0 <_printf_i+0x94>
10011d9a:	1d11      	adds	r1, r2, #4
10011d9c:	6019      	str	r1, [r3, #0]
10011d9e:	6815      	ldr	r5, [r2, #0]
10011da0:	2d00      	cmp	r5, #0
10011da2:	da3b      	bge.n	10011e1c <_printf_i+0x110>
10011da4:	232d      	movs	r3, #45	; 0x2d
10011da6:	9a04      	ldr	r2, [sp, #16]
10011da8:	426d      	negs	r5, r5
10011daa:	7013      	strb	r3, [r2, #0]
10011dac:	e036      	b.n	10011e1c <_printf_i+0x110>
10011dae:	6821      	ldr	r1, [r4, #0]
10011db0:	681a      	ldr	r2, [r3, #0]
10011db2:	0608      	lsls	r0, r1, #24
10011db4:	d406      	bmi.n	10011dc4 <_printf_i+0xb8>
10011db6:	0649      	lsls	r1, r1, #25
10011db8:	d504      	bpl.n	10011dc4 <_printf_i+0xb8>
10011dba:	6815      	ldr	r5, [r2, #0]
10011dbc:	1d11      	adds	r1, r2, #4
10011dbe:	6019      	str	r1, [r3, #0]
10011dc0:	b2ad      	uxth	r5, r5
10011dc2:	e002      	b.n	10011dca <_printf_i+0xbe>
10011dc4:	1d11      	adds	r1, r2, #4
10011dc6:	6019      	str	r1, [r3, #0]
10011dc8:	6815      	ldr	r5, [r2, #0]
10011dca:	4b5f      	ldr	r3, [pc, #380]	; (10011f48 <_printf_i+0x23c>)
10011dcc:	7e22      	ldrb	r2, [r4, #24]
10011dce:	9303      	str	r3, [sp, #12]
10011dd0:	2708      	movs	r7, #8
10011dd2:	2a6f      	cmp	r2, #111	; 0x6f
10011dd4:	d01d      	beq.n	10011e12 <_printf_i+0x106>
10011dd6:	270a      	movs	r7, #10
10011dd8:	e01b      	b.n	10011e12 <_printf_i+0x106>
10011dda:	0022      	movs	r2, r4
10011ddc:	2178      	movs	r1, #120	; 0x78
10011dde:	3245      	adds	r2, #69	; 0x45
10011de0:	7011      	strb	r1, [r2, #0]
10011de2:	4a5a      	ldr	r2, [pc, #360]	; (10011f4c <_printf_i+0x240>)
10011de4:	6819      	ldr	r1, [r3, #0]
10011de6:	9203      	str	r2, [sp, #12]
10011de8:	1d08      	adds	r0, r1, #4
10011dea:	6822      	ldr	r2, [r4, #0]
10011dec:	6018      	str	r0, [r3, #0]
10011dee:	680d      	ldr	r5, [r1, #0]
10011df0:	0610      	lsls	r0, r2, #24
10011df2:	d402      	bmi.n	10011dfa <_printf_i+0xee>
10011df4:	0650      	lsls	r0, r2, #25
10011df6:	d500      	bpl.n	10011dfa <_printf_i+0xee>
10011df8:	b2ad      	uxth	r5, r5
10011dfa:	07d3      	lsls	r3, r2, #31
10011dfc:	d502      	bpl.n	10011e04 <_printf_i+0xf8>
10011dfe:	2320      	movs	r3, #32
10011e00:	431a      	orrs	r2, r3
10011e02:	6022      	str	r2, [r4, #0]
10011e04:	2710      	movs	r7, #16
10011e06:	2d00      	cmp	r5, #0
10011e08:	d103      	bne.n	10011e12 <_printf_i+0x106>
10011e0a:	2320      	movs	r3, #32
10011e0c:	6822      	ldr	r2, [r4, #0]
10011e0e:	439a      	bics	r2, r3
10011e10:	6022      	str	r2, [r4, #0]
10011e12:	0023      	movs	r3, r4
10011e14:	2200      	movs	r2, #0
10011e16:	3343      	adds	r3, #67	; 0x43
10011e18:	701a      	strb	r2, [r3, #0]
10011e1a:	e002      	b.n	10011e22 <_printf_i+0x116>
10011e1c:	270a      	movs	r7, #10
10011e1e:	4b4a      	ldr	r3, [pc, #296]	; (10011f48 <_printf_i+0x23c>)
10011e20:	9303      	str	r3, [sp, #12]
10011e22:	6863      	ldr	r3, [r4, #4]
10011e24:	60a3      	str	r3, [r4, #8]
10011e26:	2b00      	cmp	r3, #0
10011e28:	db09      	blt.n	10011e3e <_printf_i+0x132>
10011e2a:	2204      	movs	r2, #4
10011e2c:	6821      	ldr	r1, [r4, #0]
10011e2e:	4391      	bics	r1, r2
10011e30:	6021      	str	r1, [r4, #0]
10011e32:	2d00      	cmp	r5, #0
10011e34:	d105      	bne.n	10011e42 <_printf_i+0x136>
10011e36:	9e04      	ldr	r6, [sp, #16]
10011e38:	2b00      	cmp	r3, #0
10011e3a:	d011      	beq.n	10011e60 <_printf_i+0x154>
10011e3c:	e07b      	b.n	10011f36 <_printf_i+0x22a>
10011e3e:	2d00      	cmp	r5, #0
10011e40:	d079      	beq.n	10011f36 <_printf_i+0x22a>
10011e42:	9e04      	ldr	r6, [sp, #16]
10011e44:	0028      	movs	r0, r5
10011e46:	0039      	movs	r1, r7
10011e48:	f7fe f8ae 	bl	1000ffa8 <__aeabi_uidivmod>
10011e4c:	9b03      	ldr	r3, [sp, #12]
10011e4e:	3e01      	subs	r6, #1
10011e50:	5c5b      	ldrb	r3, [r3, r1]
10011e52:	0028      	movs	r0, r5
10011e54:	7033      	strb	r3, [r6, #0]
10011e56:	0039      	movs	r1, r7
10011e58:	f7fe f820 	bl	1000fe9c <__aeabi_uidiv>
10011e5c:	1e05      	subs	r5, r0, #0
10011e5e:	d1f1      	bne.n	10011e44 <_printf_i+0x138>
10011e60:	2f08      	cmp	r7, #8
10011e62:	d109      	bne.n	10011e78 <_printf_i+0x16c>
10011e64:	6823      	ldr	r3, [r4, #0]
10011e66:	07db      	lsls	r3, r3, #31
10011e68:	d506      	bpl.n	10011e78 <_printf_i+0x16c>
10011e6a:	6863      	ldr	r3, [r4, #4]
10011e6c:	6922      	ldr	r2, [r4, #16]
10011e6e:	4293      	cmp	r3, r2
10011e70:	dc02      	bgt.n	10011e78 <_printf_i+0x16c>
10011e72:	2330      	movs	r3, #48	; 0x30
10011e74:	3e01      	subs	r6, #1
10011e76:	7033      	strb	r3, [r6, #0]
10011e78:	9b04      	ldr	r3, [sp, #16]
10011e7a:	1b9b      	subs	r3, r3, r6
10011e7c:	6123      	str	r3, [r4, #16]
10011e7e:	e02b      	b.n	10011ed8 <_printf_i+0x1cc>
10011e80:	6809      	ldr	r1, [r1, #0]
10011e82:	681a      	ldr	r2, [r3, #0]
10011e84:	0608      	lsls	r0, r1, #24
10011e86:	d407      	bmi.n	10011e98 <_printf_i+0x18c>
10011e88:	0649      	lsls	r1, r1, #25
10011e8a:	d505      	bpl.n	10011e98 <_printf_i+0x18c>
10011e8c:	1d11      	adds	r1, r2, #4
10011e8e:	6019      	str	r1, [r3, #0]
10011e90:	6813      	ldr	r3, [r2, #0]
10011e92:	8aa2      	ldrh	r2, [r4, #20]
10011e94:	801a      	strh	r2, [r3, #0]
10011e96:	e004      	b.n	10011ea2 <_printf_i+0x196>
10011e98:	1d11      	adds	r1, r2, #4
10011e9a:	6019      	str	r1, [r3, #0]
10011e9c:	6813      	ldr	r3, [r2, #0]
10011e9e:	6962      	ldr	r2, [r4, #20]
10011ea0:	601a      	str	r2, [r3, #0]
10011ea2:	2300      	movs	r3, #0
10011ea4:	9e04      	ldr	r6, [sp, #16]
10011ea6:	6123      	str	r3, [r4, #16]
10011ea8:	e016      	b.n	10011ed8 <_printf_i+0x1cc>
10011eaa:	681a      	ldr	r2, [r3, #0]
10011eac:	1d11      	adds	r1, r2, #4
10011eae:	6019      	str	r1, [r3, #0]
10011eb0:	6816      	ldr	r6, [r2, #0]
10011eb2:	2100      	movs	r1, #0
10011eb4:	6862      	ldr	r2, [r4, #4]
10011eb6:	0030      	movs	r0, r6
10011eb8:	f000 f93c 	bl	10012134 <memchr>
10011ebc:	2800      	cmp	r0, #0
10011ebe:	d001      	beq.n	10011ec4 <_printf_i+0x1b8>
10011ec0:	1b80      	subs	r0, r0, r6
10011ec2:	6060      	str	r0, [r4, #4]
10011ec4:	6863      	ldr	r3, [r4, #4]
10011ec6:	e003      	b.n	10011ed0 <_printf_i+0x1c4>
10011ec8:	0026      	movs	r6, r4
10011eca:	3642      	adds	r6, #66	; 0x42
10011ecc:	7032      	strb	r2, [r6, #0]
10011ece:	2301      	movs	r3, #1
10011ed0:	6123      	str	r3, [r4, #16]
10011ed2:	2300      	movs	r3, #0
10011ed4:	9a04      	ldr	r2, [sp, #16]
10011ed6:	7013      	strb	r3, [r2, #0]
10011ed8:	9b07      	ldr	r3, [sp, #28]
10011eda:	aa09      	add	r2, sp, #36	; 0x24
10011edc:	9300      	str	r3, [sp, #0]
10011ede:	0021      	movs	r1, r4
10011ee0:	9b06      	ldr	r3, [sp, #24]
10011ee2:	9805      	ldr	r0, [sp, #20]
10011ee4:	f7ff fea4 	bl	10011c30 <_printf_common>
10011ee8:	1c43      	adds	r3, r0, #1
10011eea:	d102      	bne.n	10011ef2 <_printf_i+0x1e6>
10011eec:	2001      	movs	r0, #1
10011eee:	4240      	negs	r0, r0
10011ef0:	e027      	b.n	10011f42 <_printf_i+0x236>
10011ef2:	6923      	ldr	r3, [r4, #16]
10011ef4:	0032      	movs	r2, r6
10011ef6:	9906      	ldr	r1, [sp, #24]
10011ef8:	9805      	ldr	r0, [sp, #20]
10011efa:	9d07      	ldr	r5, [sp, #28]
10011efc:	47a8      	blx	r5
10011efe:	1c43      	adds	r3, r0, #1
10011f00:	d0f4      	beq.n	10011eec <_printf_i+0x1e0>
10011f02:	6823      	ldr	r3, [r4, #0]
10011f04:	2500      	movs	r5, #0
10011f06:	079b      	lsls	r3, r3, #30
10011f08:	d40f      	bmi.n	10011f2a <_printf_i+0x21e>
10011f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011f0c:	68e0      	ldr	r0, [r4, #12]
10011f0e:	4298      	cmp	r0, r3
10011f10:	da17      	bge.n	10011f42 <_printf_i+0x236>
10011f12:	0018      	movs	r0, r3
10011f14:	e015      	b.n	10011f42 <_printf_i+0x236>
10011f16:	0022      	movs	r2, r4
10011f18:	2301      	movs	r3, #1
10011f1a:	3219      	adds	r2, #25
10011f1c:	9906      	ldr	r1, [sp, #24]
10011f1e:	9805      	ldr	r0, [sp, #20]
10011f20:	9e07      	ldr	r6, [sp, #28]
10011f22:	47b0      	blx	r6
10011f24:	1c43      	adds	r3, r0, #1
10011f26:	d0e1      	beq.n	10011eec <_printf_i+0x1e0>
10011f28:	3501      	adds	r5, #1
10011f2a:	68e3      	ldr	r3, [r4, #12]
10011f2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
10011f2e:	1a9b      	subs	r3, r3, r2
10011f30:	429d      	cmp	r5, r3
10011f32:	dbf0      	blt.n	10011f16 <_printf_i+0x20a>
10011f34:	e7e9      	b.n	10011f0a <_printf_i+0x1fe>
10011f36:	0026      	movs	r6, r4
10011f38:	9b03      	ldr	r3, [sp, #12]
10011f3a:	3642      	adds	r6, #66	; 0x42
10011f3c:	781b      	ldrb	r3, [r3, #0]
10011f3e:	7033      	strb	r3, [r6, #0]
10011f40:	e78e      	b.n	10011e60 <_printf_i+0x154>
10011f42:	b00b      	add	sp, #44	; 0x2c
10011f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011f46:	46c0      	nop			; (mov r8, r8)
10011f48:	10013851 	.word	0x10013851
10011f4c:	10013862 	.word	0x10013862

10011f50 <_putc_r>:
10011f50:	b570      	push	{r4, r5, r6, lr}
10011f52:	0006      	movs	r6, r0
10011f54:	000d      	movs	r5, r1
10011f56:	0014      	movs	r4, r2
10011f58:	2800      	cmp	r0, #0
10011f5a:	d004      	beq.n	10011f66 <_putc_r+0x16>
10011f5c:	6983      	ldr	r3, [r0, #24]
10011f5e:	2b00      	cmp	r3, #0
10011f60:	d101      	bne.n	10011f66 <_putc_r+0x16>
10011f62:	f7ff fb83 	bl	1001166c <__sinit>
10011f66:	4b12      	ldr	r3, [pc, #72]	; (10011fb0 <_putc_r+0x60>)
10011f68:	429c      	cmp	r4, r3
10011f6a:	d101      	bne.n	10011f70 <_putc_r+0x20>
10011f6c:	6874      	ldr	r4, [r6, #4]
10011f6e:	e008      	b.n	10011f82 <_putc_r+0x32>
10011f70:	4b10      	ldr	r3, [pc, #64]	; (10011fb4 <_putc_r+0x64>)
10011f72:	429c      	cmp	r4, r3
10011f74:	d101      	bne.n	10011f7a <_putc_r+0x2a>
10011f76:	68b4      	ldr	r4, [r6, #8]
10011f78:	e003      	b.n	10011f82 <_putc_r+0x32>
10011f7a:	4b0f      	ldr	r3, [pc, #60]	; (10011fb8 <_putc_r+0x68>)
10011f7c:	429c      	cmp	r4, r3
10011f7e:	d100      	bne.n	10011f82 <_putc_r+0x32>
10011f80:	68f4      	ldr	r4, [r6, #12]
10011f82:	68a3      	ldr	r3, [r4, #8]
10011f84:	3b01      	subs	r3, #1
10011f86:	60a3      	str	r3, [r4, #8]
10011f88:	2b00      	cmp	r3, #0
10011f8a:	da05      	bge.n	10011f98 <_putc_r+0x48>
10011f8c:	69a2      	ldr	r2, [r4, #24]
10011f8e:	4293      	cmp	r3, r2
10011f90:	db08      	blt.n	10011fa4 <_putc_r+0x54>
10011f92:	b2eb      	uxtb	r3, r5
10011f94:	2b0a      	cmp	r3, #10
10011f96:	d005      	beq.n	10011fa4 <_putc_r+0x54>
10011f98:	6823      	ldr	r3, [r4, #0]
10011f9a:	b2e8      	uxtb	r0, r5
10011f9c:	1c5a      	adds	r2, r3, #1
10011f9e:	6022      	str	r2, [r4, #0]
10011fa0:	701d      	strb	r5, [r3, #0]
10011fa2:	e004      	b.n	10011fae <_putc_r+0x5e>
10011fa4:	0022      	movs	r2, r4
10011fa6:	0029      	movs	r1, r5
10011fa8:	0030      	movs	r0, r6
10011faa:	f7ff f99d 	bl	100112e8 <__swbuf_r>
10011fae:	bd70      	pop	{r4, r5, r6, pc}
10011fb0:	100137e0 	.word	0x100137e0
10011fb4:	10013800 	.word	0x10013800
10011fb8:	10013820 	.word	0x10013820

10011fbc <_sbrk_r>:
10011fbc:	2300      	movs	r3, #0
10011fbe:	b570      	push	{r4, r5, r6, lr}
10011fc0:	4c06      	ldr	r4, [pc, #24]	; (10011fdc <_sbrk_r+0x20>)
10011fc2:	0005      	movs	r5, r0
10011fc4:	0008      	movs	r0, r1
10011fc6:	6023      	str	r3, [r4, #0]
10011fc8:	f7fa fbd6 	bl	1000c778 <_sbrk>
10011fcc:	1c43      	adds	r3, r0, #1
10011fce:	d103      	bne.n	10011fd8 <_sbrk_r+0x1c>
10011fd0:	6823      	ldr	r3, [r4, #0]
10011fd2:	2b00      	cmp	r3, #0
10011fd4:	d000      	beq.n	10011fd8 <_sbrk_r+0x1c>
10011fd6:	602b      	str	r3, [r5, #0]
10011fd8:	bd70      	pop	{r4, r5, r6, pc}
10011fda:	46c0      	nop			; (mov r8, r8)
10011fdc:	10016644 	.word	0x10016644

10011fe0 <__sread>:
10011fe0:	b570      	push	{r4, r5, r6, lr}
10011fe2:	000c      	movs	r4, r1
10011fe4:	250e      	movs	r5, #14
10011fe6:	5f49      	ldrsh	r1, [r1, r5]
10011fe8:	f000 f8b0 	bl	1001214c <_read_r>
10011fec:	2800      	cmp	r0, #0
10011fee:	db03      	blt.n	10011ff8 <__sread+0x18>
10011ff0:	6d63      	ldr	r3, [r4, #84]	; 0x54
10011ff2:	181b      	adds	r3, r3, r0
10011ff4:	6563      	str	r3, [r4, #84]	; 0x54
10011ff6:	e003      	b.n	10012000 <__sread+0x20>
10011ff8:	89a2      	ldrh	r2, [r4, #12]
10011ffa:	4b02      	ldr	r3, [pc, #8]	; (10012004 <__sread+0x24>)
10011ffc:	4013      	ands	r3, r2
10011ffe:	81a3      	strh	r3, [r4, #12]
10012000:	bd70      	pop	{r4, r5, r6, pc}
10012002:	46c0      	nop			; (mov r8, r8)
10012004:	ffffefff 	.word	0xffffefff

10012008 <__swrite>:
10012008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001200a:	001f      	movs	r7, r3
1001200c:	898b      	ldrh	r3, [r1, #12]
1001200e:	0005      	movs	r5, r0
10012010:	000c      	movs	r4, r1
10012012:	0016      	movs	r6, r2
10012014:	05db      	lsls	r3, r3, #23
10012016:	d505      	bpl.n	10012024 <__swrite+0x1c>
10012018:	230e      	movs	r3, #14
1001201a:	5ec9      	ldrsh	r1, [r1, r3]
1001201c:	2200      	movs	r2, #0
1001201e:	2302      	movs	r3, #2
10012020:	f000 f874 	bl	1001210c <_lseek_r>
10012024:	89a2      	ldrh	r2, [r4, #12]
10012026:	4b05      	ldr	r3, [pc, #20]	; (1001203c <__swrite+0x34>)
10012028:	0028      	movs	r0, r5
1001202a:	4013      	ands	r3, r2
1001202c:	81a3      	strh	r3, [r4, #12]
1001202e:	0032      	movs	r2, r6
10012030:	230e      	movs	r3, #14
10012032:	5ee1      	ldrsh	r1, [r4, r3]
10012034:	003b      	movs	r3, r7
10012036:	f000 f81f 	bl	10012078 <_write_r>
1001203a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001203c:	ffffefff 	.word	0xffffefff

10012040 <__sseek>:
10012040:	b570      	push	{r4, r5, r6, lr}
10012042:	000c      	movs	r4, r1
10012044:	250e      	movs	r5, #14
10012046:	5f49      	ldrsh	r1, [r1, r5]
10012048:	f000 f860 	bl	1001210c <_lseek_r>
1001204c:	89a3      	ldrh	r3, [r4, #12]
1001204e:	1c42      	adds	r2, r0, #1
10012050:	d103      	bne.n	1001205a <__sseek+0x1a>
10012052:	4a05      	ldr	r2, [pc, #20]	; (10012068 <__sseek+0x28>)
10012054:	4013      	ands	r3, r2
10012056:	81a3      	strh	r3, [r4, #12]
10012058:	e004      	b.n	10012064 <__sseek+0x24>
1001205a:	2280      	movs	r2, #128	; 0x80
1001205c:	0152      	lsls	r2, r2, #5
1001205e:	4313      	orrs	r3, r2
10012060:	81a3      	strh	r3, [r4, #12]
10012062:	6560      	str	r0, [r4, #84]	; 0x54
10012064:	bd70      	pop	{r4, r5, r6, pc}
10012066:	46c0      	nop			; (mov r8, r8)
10012068:	ffffefff 	.word	0xffffefff

1001206c <__sclose>:
1001206c:	b510      	push	{r4, lr}
1001206e:	230e      	movs	r3, #14
10012070:	5ec9      	ldrsh	r1, [r1, r3]
10012072:	f000 f815 	bl	100120a0 <_close_r>
10012076:	bd10      	pop	{r4, pc}

10012078 <_write_r>:
10012078:	b570      	push	{r4, r5, r6, lr}
1001207a:	0005      	movs	r5, r0
1001207c:	0008      	movs	r0, r1
1001207e:	0011      	movs	r1, r2
10012080:	2200      	movs	r2, #0
10012082:	4c06      	ldr	r4, [pc, #24]	; (1001209c <_write_r+0x24>)
10012084:	6022      	str	r2, [r4, #0]
10012086:	001a      	movs	r2, r3
10012088:	f7f7 f852 	bl	10009130 <_write>
1001208c:	1c43      	adds	r3, r0, #1
1001208e:	d103      	bne.n	10012098 <_write_r+0x20>
10012090:	6823      	ldr	r3, [r4, #0]
10012092:	2b00      	cmp	r3, #0
10012094:	d000      	beq.n	10012098 <_write_r+0x20>
10012096:	602b      	str	r3, [r5, #0]
10012098:	bd70      	pop	{r4, r5, r6, pc}
1001209a:	46c0      	nop			; (mov r8, r8)
1001209c:	10016644 	.word	0x10016644

100120a0 <_close_r>:
100120a0:	2300      	movs	r3, #0
100120a2:	b570      	push	{r4, r5, r6, lr}
100120a4:	4c06      	ldr	r4, [pc, #24]	; (100120c0 <_close_r+0x20>)
100120a6:	0005      	movs	r5, r0
100120a8:	0008      	movs	r0, r1
100120aa:	6023      	str	r3, [r4, #0]
100120ac:	f7fa fb76 	bl	1000c79c <_close>
100120b0:	1c43      	adds	r3, r0, #1
100120b2:	d103      	bne.n	100120bc <_close_r+0x1c>
100120b4:	6823      	ldr	r3, [r4, #0]
100120b6:	2b00      	cmp	r3, #0
100120b8:	d000      	beq.n	100120bc <_close_r+0x1c>
100120ba:	602b      	str	r3, [r5, #0]
100120bc:	bd70      	pop	{r4, r5, r6, pc}
100120be:	46c0      	nop			; (mov r8, r8)
100120c0:	10016644 	.word	0x10016644

100120c4 <_fstat_r>:
100120c4:	2300      	movs	r3, #0
100120c6:	b570      	push	{r4, r5, r6, lr}
100120c8:	4c06      	ldr	r4, [pc, #24]	; (100120e4 <_fstat_r+0x20>)
100120ca:	0005      	movs	r5, r0
100120cc:	0008      	movs	r0, r1
100120ce:	0011      	movs	r1, r2
100120d0:	6023      	str	r3, [r4, #0]
100120d2:	f7fa fb67 	bl	1000c7a4 <_fstat>
100120d6:	1c43      	adds	r3, r0, #1
100120d8:	d103      	bne.n	100120e2 <_fstat_r+0x1e>
100120da:	6823      	ldr	r3, [r4, #0]
100120dc:	2b00      	cmp	r3, #0
100120de:	d000      	beq.n	100120e2 <_fstat_r+0x1e>
100120e0:	602b      	str	r3, [r5, #0]
100120e2:	bd70      	pop	{r4, r5, r6, pc}
100120e4:	10016644 	.word	0x10016644

100120e8 <_isatty_r>:
100120e8:	2300      	movs	r3, #0
100120ea:	b570      	push	{r4, r5, r6, lr}
100120ec:	4c06      	ldr	r4, [pc, #24]	; (10012108 <_isatty_r+0x20>)
100120ee:	0005      	movs	r5, r0
100120f0:	0008      	movs	r0, r1
100120f2:	6023      	str	r3, [r4, #0]
100120f4:	f7fa fb5c 	bl	1000c7b0 <_isatty>
100120f8:	1c43      	adds	r3, r0, #1
100120fa:	d103      	bne.n	10012104 <_isatty_r+0x1c>
100120fc:	6823      	ldr	r3, [r4, #0]
100120fe:	2b00      	cmp	r3, #0
10012100:	d000      	beq.n	10012104 <_isatty_r+0x1c>
10012102:	602b      	str	r3, [r5, #0]
10012104:	bd70      	pop	{r4, r5, r6, pc}
10012106:	46c0      	nop			; (mov r8, r8)
10012108:	10016644 	.word	0x10016644

1001210c <_lseek_r>:
1001210c:	b570      	push	{r4, r5, r6, lr}
1001210e:	0005      	movs	r5, r0
10012110:	0008      	movs	r0, r1
10012112:	0011      	movs	r1, r2
10012114:	2200      	movs	r2, #0
10012116:	4c06      	ldr	r4, [pc, #24]	; (10012130 <_lseek_r+0x24>)
10012118:	6022      	str	r2, [r4, #0]
1001211a:	001a      	movs	r2, r3
1001211c:	f7fa fb4a 	bl	1000c7b4 <_lseek>
10012120:	1c43      	adds	r3, r0, #1
10012122:	d103      	bne.n	1001212c <_lseek_r+0x20>
10012124:	6823      	ldr	r3, [r4, #0]
10012126:	2b00      	cmp	r3, #0
10012128:	d000      	beq.n	1001212c <_lseek_r+0x20>
1001212a:	602b      	str	r3, [r5, #0]
1001212c:	bd70      	pop	{r4, r5, r6, pc}
1001212e:	46c0      	nop			; (mov r8, r8)
10012130:	10016644 	.word	0x10016644

10012134 <memchr>:
10012134:	b2c9      	uxtb	r1, r1
10012136:	1882      	adds	r2, r0, r2
10012138:	4290      	cmp	r0, r2
1001213a:	d004      	beq.n	10012146 <memchr+0x12>
1001213c:	7803      	ldrb	r3, [r0, #0]
1001213e:	428b      	cmp	r3, r1
10012140:	d002      	beq.n	10012148 <memchr+0x14>
10012142:	3001      	adds	r0, #1
10012144:	e7f8      	b.n	10012138 <memchr+0x4>
10012146:	2000      	movs	r0, #0
10012148:	4770      	bx	lr
	...

1001214c <_read_r>:
1001214c:	b570      	push	{r4, r5, r6, lr}
1001214e:	0005      	movs	r5, r0
10012150:	0008      	movs	r0, r1
10012152:	0011      	movs	r1, r2
10012154:	2200      	movs	r2, #0
10012156:	4c06      	ldr	r4, [pc, #24]	; (10012170 <_read_r+0x24>)
10012158:	6022      	str	r2, [r4, #0]
1001215a:	001a      	movs	r2, r3
1001215c:	f7f6 ffc8 	bl	100090f0 <_read>
10012160:	1c43      	adds	r3, r0, #1
10012162:	d103      	bne.n	1001216c <_read_r+0x20>
10012164:	6823      	ldr	r3, [r4, #0]
10012166:	2b00      	cmp	r3, #0
10012168:	d000      	beq.n	1001216c <_read_r+0x20>
1001216a:	602b      	str	r3, [r5, #0]
1001216c:	bd70      	pop	{r4, r5, r6, pc}
1001216e:	46c0      	nop			; (mov r8, r8)
10012170:	10016644 	.word	0x10016644

10012174 <__aeabi_lmul>:
10012174:	b5f0      	push	{r4, r5, r6, r7, lr}
10012176:	464f      	mov	r7, r9
10012178:	4646      	mov	r6, r8
1001217a:	b4c0      	push	{r6, r7}
1001217c:	0416      	lsls	r6, r2, #16
1001217e:	0c36      	lsrs	r6, r6, #16
10012180:	4699      	mov	r9, r3
10012182:	0033      	movs	r3, r6
10012184:	0405      	lsls	r5, r0, #16
10012186:	0c2c      	lsrs	r4, r5, #16
10012188:	0c07      	lsrs	r7, r0, #16
1001218a:	0c15      	lsrs	r5, r2, #16
1001218c:	4363      	muls	r3, r4
1001218e:	437e      	muls	r6, r7
10012190:	436f      	muls	r7, r5
10012192:	4365      	muls	r5, r4
10012194:	0c1c      	lsrs	r4, r3, #16
10012196:	19ad      	adds	r5, r5, r6
10012198:	1964      	adds	r4, r4, r5
1001219a:	469c      	mov	ip, r3
1001219c:	42a6      	cmp	r6, r4
1001219e:	d903      	bls.n	100121a8 <__aeabi_lmul+0x34>
100121a0:	2380      	movs	r3, #128	; 0x80
100121a2:	025b      	lsls	r3, r3, #9
100121a4:	4698      	mov	r8, r3
100121a6:	4447      	add	r7, r8
100121a8:	4663      	mov	r3, ip
100121aa:	0c25      	lsrs	r5, r4, #16
100121ac:	19ef      	adds	r7, r5, r7
100121ae:	041d      	lsls	r5, r3, #16
100121b0:	464b      	mov	r3, r9
100121b2:	434a      	muls	r2, r1
100121b4:	4343      	muls	r3, r0
100121b6:	0c2d      	lsrs	r5, r5, #16
100121b8:	0424      	lsls	r4, r4, #16
100121ba:	1964      	adds	r4, r4, r5
100121bc:	1899      	adds	r1, r3, r2
100121be:	19c9      	adds	r1, r1, r7
100121c0:	0020      	movs	r0, r4
100121c2:	bc0c      	pop	{r2, r3}
100121c4:	4690      	mov	r8, r2
100121c6:	4699      	mov	r9, r3
100121c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100121ca:	46c0      	nop			; (mov r8, r8)
100121cc:	1000892c 	.word	0x1000892c
100121d0:	1000893a 	.word	0x1000893a
100121d4:	10008948 	.word	0x10008948
100121d8:	10008956 	.word	0x10008956
100121dc:	10008964 	.word	0x10008964
100121e0:	10008972 	.word	0x10008972
100121e4:	10008980 	.word	0x10008980
100121e8:	10008990 	.word	0x10008990
100121ec:	100089a0 	.word	0x100089a0
100121f0:	100089b0 	.word	0x100089b0
100121f4:	100089c0 	.word	0x100089c0
100121f8:	100089d0 	.word	0x100089d0
100121fc:	100089e0 	.word	0x100089e0
10012200:	100089f0 	.word	0x100089f0
10012204:	10008a00 	.word	0x10008a00
10012208:	10008a10 	.word	0x10008a10
1001220c:	10008a20 	.word	0x10008a20
10012210:	10008a30 	.word	0x10008a30
10012214:	10008a40 	.word	0x10008a40
10012218:	10008a50 	.word	0x10008a50
1001221c:	10008a60 	.word	0x10008a60
10012220:	10008a70 	.word	0x10008a70
10012224:	10008a80 	.word	0x10008a80
10012228:	10008a90 	.word	0x10008a90
1001222c:	10008aa0 	.word	0x10008aa0
10012230:	10008ab0 	.word	0x10008ab0
10012234:	10008ac0 	.word	0x10008ac0
10012238:	10008ad0 	.word	0x10008ad0
1001223c:	10008ade 	.word	0x10008ade
10012240:	10008aec 	.word	0x10008aec
10012244:	10008afa 	.word	0x10008afa
10012248:	10008b08 	.word	0x10008b08
1001224c:	10008b16 	.word	0x10008b16
10012250:	10008b24 	.word	0x10008b24
10012254:	10008b32 	.word	0x10008b32
10012258:	10008b40 	.word	0x10008b40
1001225c:	10008b50 	.word	0x10008b50
10012260:	10008b60 	.word	0x10008b60
10012264:	10008b70 	.word	0x10008b70
10012268:	10008b80 	.word	0x10008b80
1001226c:	10008b90 	.word	0x10008b90
10012270:	10008ba0 	.word	0x10008ba0
10012274:	10008bb0 	.word	0x10008bb0
10012278:	10008bc0 	.word	0x10008bc0
1001227c:	10008bd0 	.word	0x10008bd0
10012280:	10008be0 	.word	0x10008be0
10012284:	10008bf0 	.word	0x10008bf0
10012288:	10008c00 	.word	0x10008c00
1001228c:	10008c10 	.word	0x10008c10
10012290:	10008c20 	.word	0x10008c20
10012294:	10008c30 	.word	0x10008c30
10012298:	10008c40 	.word	0x10008c40
1001229c:	10008c4e 	.word	0x10008c4e
100122a0:	10008c5c 	.word	0x10008c5c
100122a4:	10008c9c 	.word	0x10008c9c
100122a8:	10008cc4 	.word	0x10008cc4
100122ac:	10008cec 	.word	0x10008cec
100122b0:	10008d14 	.word	0x10008d14
100122b4:	10008f54 	.word	0x10008f54
100122b8:	10008d44 	.word	0x10008d44
100122bc:	10008d5c 	.word	0x10008d5c
100122c0:	10008dd4 	.word	0x10008dd4
100122c4:	10008dec 	.word	0x10008dec
100122c8:	10008d74 	.word	0x10008d74
100122cc:	10008d8c 	.word	0x10008d8c
100122d0:	10008da4 	.word	0x10008da4
100122d4:	10008dbc 	.word	0x10008dbc
100122d8:	10008e04 	.word	0x10008e04
100122dc:	100090c8 	.word	0x100090c8
100122e0:	100090c8 	.word	0x100090c8
100122e4:	100090c8 	.word	0x100090c8
100122e8:	100090c8 	.word	0x100090c8
100122ec:	100090c8 	.word	0x100090c8
100122f0:	100090c8 	.word	0x100090c8
100122f4:	100090c8 	.word	0x100090c8
100122f8:	100090c8 	.word	0x100090c8
100122fc:	10008eac 	.word	0x10008eac
10012300:	10008ec4 	.word	0x10008ec4
10012304:	10008edc 	.word	0x10008edc
10012308:	10008f6a 	.word	0x10008f6a
1001230c:	10008e34 	.word	0x10008e34
10012310:	100090c8 	.word	0x100090c8
10012314:	100090c8 	.word	0x100090c8
10012318:	100090c8 	.word	0x100090c8
1001231c:	100090c8 	.word	0x100090c8
10012320:	100090c8 	.word	0x100090c8
10012324:	100090c8 	.word	0x100090c8
10012328:	10008ef4 	.word	0x10008ef4
1001232c:	10008f0c 	.word	0x10008f0c
10012330:	10008f24 	.word	0x10008f24
10012334:	10008f3c 	.word	0x10008f3c
10012338:	100090c8 	.word	0x100090c8
1001233c:	10009080 	.word	0x10009080
10012340:	10009098 	.word	0x10009098
10012344:	100090c8 	.word	0x100090c8
10012348:	100090c8 	.word	0x100090c8
1001234c:	10008f96 	.word	0x10008f96
10012350:	10008fac 	.word	0x10008fac
10012354:	10008fc2 	.word	0x10008fc2
10012358:	10008fd8 	.word	0x10008fd8
1001235c:	100090c8 	.word	0x100090c8
10012360:	100090c8 	.word	0x100090c8
10012364:	100090c8 	.word	0x100090c8
10012368:	100090c8 	.word	0x100090c8
1001236c:	100090c8 	.word	0x100090c8
10012370:	100090c8 	.word	0x100090c8
10012374:	100090c8 	.word	0x100090c8
10012378:	100090c8 	.word	0x100090c8
1001237c:	10008c88 	.word	0x10008c88
10012380:	10008cb0 	.word	0x10008cb0
10012384:	10008cd8 	.word	0x10008cd8
10012388:	10008d00 	.word	0x10008d00
1001238c:	10008d2c 	.word	0x10008d2c
10012390:	10008e1c 	.word	0x10008e1c
10012394:	10008e4c 	.word	0x10008e4c
10012398:	10008e64 	.word	0x10008e64
1001239c:	10008e7c 	.word	0x10008e7c
100123a0:	10008e94 	.word	0x10008e94
100123a4:	10008f80 	.word	0x10008f80
100123a8:	10008fee 	.word	0x10008fee
100123ac:	10009068 	.word	0x10009068
100123b0:	100090b0 	.word	0x100090b0
100123b4:	0000000d 	.word	0x0000000d
100123b8:	736d735b 	.word	0x736d735b
100123bc:	656c625f 	.word	0x656c625f
100123c0:	6961705f 	.word	0x6961705f
100123c4:	65725f72 	.word	0x65725f72
100123c8:	73657571 	.word	0x73657571
100123cc:	6e665f74 	.word	0x6e665f74
100123d0:	6150095d 	.word	0x6150095d
100123d4:	6e697269 	.word	0x6e697269
100123d8:	65722067 	.word	0x65722067
100123dc:	73657571 	.word	0x73657571
100123e0:	2e2e2e74 	.word	0x2e2e2e74
100123e4:	656e4220 	.word	0x656e4220
100123e8:	64252077 	.word	0x64252077
100123ec:	4c42202c 	.word	0x4c42202c
100123f0:	78302045 	.word	0x78302045
100123f4:	78323025 	.word	0x78323025
100123f8:	3154202c 	.word	0x3154202c
100123fc:	2c642520 	.word	0x2c642520
10012400:	20325420 	.word	0x20325420
10012404:	00006425 	.word	0x00006425
10012408:	736d735b 	.word	0x736d735b
1001240c:	656c625f 	.word	0x656c625f
10012410:	776f705f 	.word	0x776f705f
10012414:	645f7265 	.word	0x645f7265
10012418:	5d6e776f 	.word	0x5d6e776f
1001241c:	00000000 	.word	0x00000000
10012420:	736d735b 	.word	0x736d735b
10012424:	656c625f 	.word	0x656c625f
10012428:	776f705f 	.word	0x776f705f
1001242c:	645f7265 	.word	0x645f7265
10012430:	5d6e776f 	.word	0x5d6e776f
10012434:	6f745309 	.word	0x6f745309
10012438:	6e697070 	.word	0x6e697070
1001243c:	6f632067 	.word	0x6f632067
10012440:	6e616d6d 	.word	0x6e616d6d
10012444:	65722064 	.word	0x65722064
10012448:	76696563 	.word	0x76696563
1001244c:	64206465 	.word	0x64206465
10012450:	6e697275 	.word	0x6e697275
10012454:	64612067 	.word	0x64612067
10012458:	74726576 	.word	0x74726576
1001245c:	6d657369 	.word	0x6d657369
10012460:	2e746e65 	.word	0x2e746e65
10012464:	6f745320 	.word	0x6f745320
10012468:	6e697070 	.word	0x6e697070
1001246c:	2e2e2e67 	.word	0x2e2e2e67
10012470:	00000020 	.word	0x00000020
10012474:	6c696166 	.word	0x6c696166
10012478:	21216465 	.word	0x21216465
1001247c:	00000021 	.word	0x00000021
10012480:	656e6f64 	.word	0x656e6f64
10012484:	00000021 	.word	0x00000021
10012488:	736d735b 	.word	0x736d735b
1001248c:	656c625f 	.word	0x656c625f
10012490:	776f705f 	.word	0x776f705f
10012494:	645f7265 	.word	0x645f7265
10012498:	5d6e776f 	.word	0x5d6e776f
1001249c:	65440909 	.word	0x65440909
100124a0:	65636976 	.word	0x65636976
100124a4:	69617020 	.word	0x69617020
100124a8:	2e646572 	.word	0x2e646572
100124ac:	64202e2e 	.word	0x64202e2e
100124b0:	62617369 	.word	0x62617369
100124b4:	676e696c 	.word	0x676e696c
100124b8:	746e6920 	.word	0x746e6920
100124bc:	75727265 	.word	0x75727265
100124c0:	20737470 	.word	0x20737470
100124c4:	77732026 	.word	0x77732026
100124c8:	68637469 	.word	0x68637469
100124cc:	20676e69 	.word	0x20676e69
100124d0:	6e776f64 	.word	0x6e776f64
100124d4:	6e657320 	.word	0x6e657320
100124d8:	73726f73 	.word	0x73726f73
100124dc:	00000000 	.word	0x00000000
100124e0:	736d735b 	.word	0x736d735b
100124e4:	656c625f 	.word	0x656c625f
100124e8:	776f705f 	.word	0x776f705f
100124ec:	645f7265 	.word	0x645f7265
100124f0:	5d6e776f 	.word	0x5d6e776f
100124f4:	75430909 	.word	0x75430909
100124f8:	6e657272 	.word	0x6e657272
100124fc:	20796c74 	.word	0x20796c74
10012500:	69646e69 	.word	0x69646e69
10012504:	69746163 	.word	0x69746163
10012508:	0000676e 	.word	0x0000676e
1001250c:	736d735b 	.word	0x736d735b
10012510:	656c625f 	.word	0x656c625f
10012514:	776f705f 	.word	0x776f705f
10012518:	645f7265 	.word	0x645f7265
1001251c:	5d6e776f 	.word	0x5d6e776f
10012520:	65440909 	.word	0x65440909
10012524:	65636976 	.word	0x65636976
10012528:	6e6f6320 	.word	0x6e6f6320
1001252c:	7463656e 	.word	0x7463656e
10012530:	2e2e6465 	.word	0x2e2e6465
10012534:	6964202e 	.word	0x6964202e
10012538:	6e6f6373 	.word	0x6e6f6373
1001253c:	7463656e 	.word	0x7463656e
10012540:	00676e69 	.word	0x00676e69
10012544:	736d735b 	.word	0x736d735b
10012548:	656c625f 	.word	0x656c625f
1001254c:	7664615f 	.word	0x7664615f
10012550:	7065725f 	.word	0x7065725f
10012554:	5f74726f 	.word	0x5f74726f
10012558:	095d6e66 	.word	0x095d6e66
1001255c:	65766441 	.word	0x65766441
10012560:	73697472 	.word	0x73697472
10012564:	6e656d65 	.word	0x6e656d65
10012568:	69742074 	.word	0x69742074
1001256c:	756f656d 	.word	0x756f656d
10012570:	2e2e2e74 	.word	0x2e2e2e74
10012574:	00000000 	.word	0x00000000
10012578:	736d735b 	.word	0x736d735b
1001257c:	656c625f 	.word	0x656c625f
10012580:	6e6f635f 	.word	0x6e6f635f
10012584:	7463656e 	.word	0x7463656e
10012588:	665f6465 	.word	0x665f6465
1001258c:	09095d6e 	.word	0x09095d6e
10012590:	69766544 	.word	0x69766544
10012594:	20736563 	.word	0x20736563
10012598:	6e6e6f63 	.word	0x6e6e6f63
1001259c:	65746365 	.word	0x65746365
100125a0:	2e2e2e64 	.word	0x2e2e2e64
100125a4:	00000000 	.word	0x00000000
100125a8:	736d735b 	.word	0x736d735b
100125ac:	656c625f 	.word	0x656c625f
100125b0:	6961705f 	.word	0x6961705f
100125b4:	5f646572 	.word	0x5f646572
100125b8:	005d6e66 	.word	0x005d6e66
100125bc:	736d735b 	.word	0x736d735b
100125c0:	656c625f 	.word	0x656c625f
100125c4:	7664615f 	.word	0x7664615f
100125c8:	69747265 	.word	0x69747265
100125cc:	095d6573 	.word	0x095d6573
100125d0:	65766441 	.word	0x65766441
100125d4:	73697472 	.word	0x73697472
100125d8:	6e656d65 	.word	0x6e656d65
100125dc:	61642074 	.word	0x61642074
100125e0:	73206174 	.word	0x73206174
100125e4:	66207465 	.word	0x66207465
100125e8:	656c6961 	.word	0x656c6961
100125ec:	00002164 	.word	0x00002164
100125f0:	736d735b 	.word	0x736d735b
100125f4:	656c625f 	.word	0x656c625f
100125f8:	7664615f 	.word	0x7664615f
100125fc:	69747265 	.word	0x69747265
10012600:	095d6573 	.word	0x095d6573
10012604:	454c4209 	.word	0x454c4209
10012608:	61745320 	.word	0x61745320
1001260c:	64657472 	.word	0x64657472
10012610:	76644120 	.word	0x76644120
10012614:	69747265 	.word	0x69747265
10012618:	656d6573 	.word	0x656d6573
1001261c:	0000746e 	.word	0x0000746e
10012620:	736d735b 	.word	0x736d735b
10012624:	7265735f 	.word	0x7265735f
10012628:	65636976 	.word	0x65636976
1001262c:	7664615f 	.word	0x7664615f
10012630:	69747265 	.word	0x69747265
10012634:	095d6573 	.word	0x095d6573
10012638:	20454c42 	.word	0x20454c42
1001263c:	65766441 	.word	0x65766441
10012640:	73697472 	.word	0x73697472
10012644:	6e656d65 	.word	0x6e656d65
10012648:	74732074 	.word	0x74732074
1001264c:	20747261 	.word	0x20747261
10012650:	6c696166 	.word	0x6c696166
10012654:	203a6465 	.word	0x203a6465
10012658:	73616572 	.word	0x73616572
1001265c:	30206e6f 	.word	0x30206e6f
10012660:	00782578 	.word	0x00782578
10012664:	736d735b 	.word	0x736d735b
10012668:	656c625f 	.word	0x656c625f
1001266c:	7369645f 	.word	0x7369645f
10012670:	6e6e6f63 	.word	0x6e6e6f63
10012674:	65746365 	.word	0x65746365
10012678:	6e665f64 	.word	0x6e665f64
1001267c:	6550095d 	.word	0x6550095d
10012680:	64207265 	.word	0x64207265
10012684:	6f637369 	.word	0x6f637369
10012688:	63656e6e 	.word	0x63656e6e
1001268c:	2e646574 	.word	0x2e646574
10012690:	42202e2e 	.word	0x42202e2e
10012694:	2077656e 	.word	0x2077656e
10012698:	202c6425 	.word	0x202c6425
1001269c:	20454c42 	.word	0x20454c42
100126a0:	30257830 	.word	0x30257830
100126a4:	202c7832 	.word	0x202c7832
100126a8:	25203154 	.word	0x25203154
100126ac:	54202c64 	.word	0x54202c64
100126b0:	64252032 	.word	0x64252032
100126b4:	00000000 	.word	0x00000000
100126b8:	736d735b 	.word	0x736d735b
100126bc:	656c625f 	.word	0x656c625f
100126c0:	6e65735f 	.word	0x6e65735f
100126c4:	68635f64 	.word	0x68635f64
100126c8:	63617261 	.word	0x63617261
100126cc:	69726574 	.word	0x69726574
100126d0:	63697473 	.word	0x63697473
100126d4:	7250095d 	.word	0x7250095d
100126d8:	75737365 	.word	0x75737365
100126dc:	63206572 	.word	0x63206572
100126e0:	61726168 	.word	0x61726168
100126e4:	72657463 	.word	0x72657463
100126e8:	69747369 	.word	0x69747369
100126ec:	00003f63 	.word	0x00003f63
100126f0:	736d735b 	.word	0x736d735b
100126f4:	656c625f 	.word	0x656c625f
100126f8:	6e65735f 	.word	0x6e65735f
100126fc:	68635f64 	.word	0x68635f64
10012700:	63617261 	.word	0x63617261
10012704:	69726574 	.word	0x69726574
10012708:	63697473 	.word	0x63697473
1001270c:	504d095d 	.word	0x504d095d
10012710:	68632055 	.word	0x68632055
10012714:	63617261 	.word	0x63617261
10012718:	69726574 	.word	0x69726574
1001271c:	63697473 	.word	0x63697473
10012720:	0000003f 	.word	0x0000003f
10012724:	54455320 	.word	0x54455320
10012728:	00002021 	.word	0x00002021
1001272c:	20642520 	.word	0x20642520
10012730:	454e4f47 	.word	0x454e4f47
10012734:	6425203f 	.word	0x6425203f
10012738:	00000020 	.word	0x00000020
1001273c:	544f4e20 	.word	0x544f4e20
10012740:	74657320 	.word	0x74657320
10012744:	0000203f 	.word	0x0000203f

10012748 <sms_ble_gap_cb>:
	...
10012754:	10009e1d 00000000 10009e51 10009f55     ........Q...U...
	...
1001276c:	10009e99 10009c51 00000000 00000000     ....Q...........
	...

10012794 <sms_ble_gatt_server_cb>:
10012794:	10009c9d 10009ce1 00000000 00000000     ................
	...
100127bc:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
100127cc:	72756769 70095d65 6c626f72 77206d65     igure].problem w
100127dc:	656c6968 74657320 676e6974 20707520     hile setting up 
100127ec:	74747562 00306e6f 736d735b 7475625f     button0.[sms_but
100127fc:	5f6e6f74 666e6f63 72756769 50095d65     ton_configure].P
1001280c:	6c626f72 77206d65 656c6968 74657320     roblem while set
1001281c:	676e6974 20707520 74747562 00316e6f     ting up button1.
1001282c:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
1001283c:	72756769 50095d65 6c626f72 77206d65     igure].Problem w
1001284c:	656c6968 74657320 676e6974 20707520     hile setting up 
1001285c:	414c5058 44454e49 65737520 75622072     XPLAINED user bu
1001286c:	6e6f7474 00000000 736d735b 7475625f     tton....[sms_but
1001287c:	5f6e6f74 5f746567 74617473 09095d65     ton_get_state]..
1001288c:	74747542 73206e6f 65746174 6425203a     Button state: %d
1001289c:	00642520 736d735b 7475625f 5f6e6f74      %d.[sms_button_
100128ac:	2d5d6e66 00000030 736d735b 7475625f     fn]-0...[sms_but
100128bc:	5f6e6f74 2d5d6e66 00000031 736d735b     ton_fn]-1...[sms
100128cc:	7475625f 5f6e6f74 095d6e66 6f4e0909     _button_fn]...No
100128dc:	73752074 73206465 65746174 2e2e2e73     t used states...
100128ec:	00000000 736d735b 7475625f 5f6e6f74     ....[sms_button_
100128fc:	095d6e66 6c697453 6e69206c 61636964     fn].Still indica
1001290c:	676e6974 002e2e2e 736d735b 7475625f     ting....[sms_but
1001291c:	5f6e6f74 69666564 735f656e 69767265     ton_define_servi
1001292c:	5d736563 72655309 65636976 65642073     ces].Services de
1001293c:	696e6966 6620676e 656c6961 72202c64     fining failed, r
1001294c:	6f736165 7830206e 00007825 736d735b     eason 0x%x..[sms
1001295c:	7475625f 5f6e6f74 69666564 735f656e     _button_define_s
1001296c:	69767265 5d736563 72655309 65636976     ervices].Service
1001297c:	65642073 656e6966 53202c64 6220534d     s defined, SMS b
1001298c:	6f747475 6168206e 656c646e 6425203a     utton handle: %d
1001299c:	00000000 626f7250 206d656c 6c696877     ....Problem whil
100129ac:	65732065 6e697474 70672067 70206f69     e setting gpio p
100129bc:	00006e69 2e2e7325 4209092e 6572702d     in..%s.....B-pre
100129cc:	64252076 2d42202c 20727563 202c6425     v %d, B-cur %d, 
100129dc:	20454c42 30257830 202c7832 25203154     BLE 0x%02x, T1 %
100129ec:	54202c64 64252032 4d53202c 64252053     d, T2 %d, SMS %d
100129fc:	00000000 736d735b 64656c5f 6970675f     ....[sms_led_gpi
10012a0c:	6e695f6f 095d7469 626f7270 206d656c     o_init].problem 
10012a1c:	6c696877 65732065 6e697474 70752067     while setting up
10012a2c:	64656c20 00000030 736d735b 6175645f      led0...[sms_dua
10012a3c:	6d69746c 5f317265 005d6e66 736d735b     ltimer1_fn].[sms
10012a4c:	6175645f 6d69746c 5f327265 005d6e66     _dualtimer2_fn].
10012a5c:	2e2e2e20 69766967 7520676e 00002170      ...giving up!..
10012a6c:	2e2e2e20 74696177 2e676e69 63202e2e      ...waiting... c
10012a7c:	746e756f 203a7265 00006425 736d735b     ounter: %d..[sms
10012a8c:	6175645f 6d69746c 5f327265 095d6e66     _dualtimer2_fn].
10012a9c:	696c4209 6e696b6e 74732067 75747261     .Blinking startu
10012aac:	2e2e2e70 00000000 736d735b 6175645f     p.......[sms_dua
10012abc:	6d69746c 5f327265 095d6e66 696c4209     ltimer2_fn]..Bli
10012acc:	6e696b6e 68732067 6f647475 2e2e6e77     nking shutdown..
10012adc:	0000002e 736d735b 6175645f 6d69746c     ....[sms_dualtim
10012aec:	5f327265 095d6e66 776f5009 6e697265     er2_fn]..Powerin
10012afc:	666f2067 2e2e2e66 00000000 1000af22     g off......."...
10012b0c:	1000af34 1000af0a 1000af0a 1000af0a     4...............
10012b1c:	1000af22 1000af0a 1000af0a 1000b926     "...........&...
10012b2c:	1000b99a 1000b90e 1000b9a0 1000b914     ................
10012b3c:	1000b91a 1000b920 1000c080 1000c080     .... ...........
10012b4c:	1000c080 1000c080 1000c080 1000c080     ................
10012b5c:	1000c080 1000c080 1000c080 1000c080     ................
10012b6c:	1000c080 1000c080 1000c080 1000c080     ................
10012b7c:	1000c080 1000c080 1000c080 1000c080     ................
10012b8c:	1000c080 1000c09e 1000c09e 1000c09e     ................
10012b9c:	1000c09e 1000c09e 1000c09e 1000c09e     ................
10012bac:	1000c09e 1000c09e 1000c09e 1000c0c0     ................
10012bbc:	1000c0c0 1000c0c0 1000c0c0 1000c0c0     ................
10012bcc:	1000c0c0 1000c0c0 1000c0c0 1000c0c0     ................
10012bdc:	1000c0c0 1000c0f0 1000c0f0 1000c0f0     ................
10012bec:	1000c0f0 1000c0f0 1000c0f0 1000c10a     ................
10012bfc:	1000c10a 1000c10a 1000c10a 1000c10a     ................
10012c0c:	1000c10a 1000c10a 1000c10a 1000c10a     ................
10012c1c:	1000c124 1000c124 1000c146 1000c146     $...$...F...F...
10012c2c:	1000c160 1000c146 34333231 00003635     `...F...123456..
10012c3c:	efcdab00 00efcdab                       ........

10012c44 <ble_mgr_gatt_server_handle>:
	...
10012c5c:	1000ae1d 1000ae45 1000ae8d 00000000     ....E...........
10012c6c:	65646e55 656e6966 76452064 20746e65     Undefined Event 
10012c7c:	65636552 64657669 00000000 6e616353     Received....Scan
10012c8c:	676e696e 61662020 64656c69 00000000     ning  failed....
10012c9c:	65766441 73697472 20676e69 6c696166     Advertising fail
10012cac:	00006465 2d454c42 2055544d 6e616843     ed..BLE-MTU Chan
10012cbc:	2c646567 6e6f4320 7463656e 206e6f69     ged, Connection 
10012ccc:	646e6148 203a656c 202c6425 2077654e     Handle: %d, New 
10012cdc:	756c6156 25203a65 00000064 2055544d     Value: %d...MTU 
10012cec:	6e616843 2c646567 6e6f4320 7463656e     Changed, Connect
10012cfc:	206e6f69 646e6148 253a656c 4f202c64     ion Handle:%d, O
10012d0c:	61726570 6e6f6974 0064253a 2055544d     peration:%d.MTU 
10012d1c:	6e616843 46206567 656c6961 43202c64     Change Failed, C
10012d2c:	656e6e6f 6f697463 6148206e 656c646e     onnection Handle
10012d3c:	2c64253a 65704f20 69746172 253a6e6f     :%d, Operation:%
10012d4c:	00000064 72616843 69725720 43206574     d...Char Write C
10012d5c:	4320646d 6c706d6f 2c657465 6e6f4320     md Complete, Con
10012d6c:	7463656e 206e6f69 646e6148 253a656c     nection Handle:%
10012d7c:	4f202c64 61726570 6e6f6974 0064253a     d, Operation:%d.
10012d8c:	72616843 69725720 43206574 4620646d     Char Write Cmd F
10012d9c:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
10012dac:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
10012dbc:	69746172 253a6e6f 00000064 74617453     ration:%d...Stat
10012dcc:	6f4e2065 61482074 656c646e 64252064     e Not Handled %d
10012ddc:	00000000 69766544 64206563 6f637369     ....Device disco
10012dec:	63656e6e 20646574 73616552 303a6e6f     nnected Reason:0
10012dfc:	32302578 61482078 656c646e 2578303d     x%02x Handle=0x%
10012e0c:	00000078 425f5441 435f454c 5f4e4e4f     x...AT_BLE_CONN_
10012e1c:	41524150 50555f4d 45544144 00000020     PARAM_UPDATE ...
10012e2c:	72636e45 69747079 66206e6f 656c6961     Encryption faile
10012e3c:	00000064 72636e45 69747079 63206e6f     d...Encryption c
10012e4c:	6c706d6f 64657465 63757320 73736563     ompleted success
10012e5c:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
10012e6c:	6e206563 6620746f 646e756f 636e6520     ce not found enc
10012e7c:	74707972 206e6f69 6f666e69 00000000     ryption info....
10012e8c:	6f666e49 7665443a 20656369 6e756f66     Info:Device foun
10012e9c:	64612064 73657264 255b2073 20205d64     d address [%d]  
10012eac:	30257830 30255832 30255832 30255832     0x%02X%02X%02X%0
10012ebc:	30255832 30255832 00205832 6f666e49     2X%02X%02X .Info
10012ecc:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
10012edc:	206e6163 69766564 72206563 68636165     can device reach
10012eec:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
10012efc:	00006e61 6c696146 74206465 7473206f     an..Failed to st
10012f0c:	7320706f 6e6e6163 00676e69 30257830     op scanning.0x%0
10012f1c:	202c5832 00000000 4b525343 0000203a     2X, ....CSRK: ..
10012f2c:	3a4b5249 00000000 72696150 20676e69     IRK:....Pairing 
10012f3c:	6c696166 2e2e6465 7369442e 6e6e6f63     failed...Disconn
10012f4c:	69746365 0000676e 63736944 656e6e6f     ecting..Disconne
10012f5c:	52207463 65757165 46207473 656c6961     ct Request Faile
10012f6c:	00000064 72696150 20676e69 636f7270     d...Pairing proc
10012f7c:	72756465 6f632065 656c706d 20646574     edure completed 
10012f8c:	63637573 66737365 796c6c75 00000000     successfully....
10012f9c:	20454c42 69766544 6e206563 6620746f     BLE Device not f
10012fac:	646e756f 206f7420 726f7473 68742065     ound to store th
10012fbc:	61702065 6e697269 6e692067 00006f66     e pairing info..
10012fcc:	3a4b544c 00000020 72636e45 69747079     LTK: ...Encrypti
10012fdc:	4e206e6f 7320746f 74726174 00006465     on Not started..
10012fec:	76616c53 65532065 69727563 52207974     Slave Security R
10012ffc:	2d207165 74754120 746e6568 74616369     eq - Authenticat
1001300c:	206e6f69 6c696146 00006465 656e6547     ion Failed..Gene
1001301c:	65746172 544c2064 00203a4b 30257830     rated LTK: .0x%0
1001302c:	00205832 646e6553 20676e69 72696170     2X .Sending pair
1001303c:	20676e69 70736572 65736e6f 00000000     ing response....
1001304c:	72696150 71655220 74736575 41202d20     Pair Request - A
1001305c:	65687475 6369746e 6f697461 6146206e     uthentication Fa
1001306c:	64656c69 00000000 65746e45 68742072     iled....Enter th
1001307c:	61502065 656b7373 2d362879 69676944     e Passkey(6-Digi
1001308c:	69202974 6554206e 6e696d72 003a6c61     t) in Terminal:.
1001309c:	206e6950 656d6954 0074756f 63736944     Pin Timeout.Disc
100130ac:	656e6e6f 6e697463 2e2e2067 0000002e     onnecting ......
100130bc:	61656c50 45206573 7265746e 65687420     Please Enter the
100130cc:	6c6f6620 69776f6c 5020676e 2d737361      following Pass-
100130dc:	65646f63 206e6f28 6568746f 65442072     code(on other De
100130ec:	65636976 00003a29 72696150 79656b2d     vice):..Pair-key
100130fc:	70657220 6620796c 656c6961 00000064      reply failed...
1001310c:	20424f4f 74616546 20657275 20746f4e     OOB Feature Not 
1001311c:	70707573 6574726f 00000064 65746e45     supported...Ente
1001312c:	20646572 73736150 646f632d 00003a65     red Pass-code:..
1001313c:	2d434e45 3a716552 6e6f4320 6148206e     ENC-Req: Conn Ha
1001314c:	656c646e 76654420 20656369 6e756f46     ndle Device Foun
1001315c:	64683a64 64253a6c 00000000 74736f68     d:hdl:%d....host
1001316c:	76656420 20656369 76696465 00782520      device ediv %x.
1001317c:	72656570 76656420 20656369 76696465     peer device ediv
1001318c:	00782520 5f636e65 20716572 76696465      %x.enc_req ediv
1001319c:	00782520 20656854 65646e69 73692078      %x.The index is
100131ac:	00642520 2d434e45 3a716552 79654b20      %d.ENC-Req: Key
100131bc:	756f4620 0000646e 72696150 20676e69      Found..Pairing 
100131cc:	6f666e69 74616d72 206e6f69 7020666f     information of p
100131dc:	20726565 69766564 69206563 6f6e2073     eer device is no
100131ec:	76612074 616c6961 2e656c62 00000000     t available.....
100131fc:	61656c50 75206573 6961706e 68742072     Please unpair th
1001320c:	65642065 65636976 6f726620 6570206d     e device from pe
1001321c:	64207265 63697665 6f6d2865 656c6962     er device(mobile
1001322c:	65732029 6e697474 6d207367 20756e65     ) settings menu 
1001323c:	20646e61 72617473 61702074 6e697269     and start pairin
1001324c:	67612067 006e6961 72636e45 69747079     g again.Encrypti
1001325c:	52206e6f 65757165 52207473 796c7065     on Request Reply
1001326c:	69614620 0064656c 72636e45 69747079      Failed.Encrypti
1001327c:	52206e6f 65757165 52207473 796c7065     on Request Reply
1001328c:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
1001329c:	696e4909 6c616974 6e697a69 41532067     .Initializing SA
100132ac:	3131424d 00000000 656c625b 696e695f     MB11....[ble_ini
100132bc:	09095d74 424d4153 49203131 6974696e     t]..SAMB11 Initi
100132cc:	7a696c61 6f697461 6166206e 64656c69     alization failed
100132dc:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
100132ec:	61656c50 63206573 6b636568 65687420     Please check the
100132fc:	776f7020 61207265 6320646e 656e6e6f      power and conne
1001330c:	6f697463 202f206e 64726168 65726177     ction / hardware
1001331c:	6e6f6320 7463656e 0000726f 52424153      connector..SABR
1001332c:	4d532d65 00000053 69766544 6e206563     e-SMS...Device n
1001333c:	20656d61 20746573 6c696166 00006465     ame set failed..
1001334c:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
1001335c:	5d676966 44420909 64646120 73736572     fig]..BD address
1001336c:	74656720 69616620 0064656c 656c625b      get failed.[ble
1001337c:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
1001338c:	44420909 64644120 73736572 2578303a     ..BD Address:0x%
1001339c:	25583230 25583230 25583230 25583230     02X%02X%02X%02X%
100133ac:	25583230 2c583230 64644120 73736572     02X%02X, Address
100133bc:	70795420 64253a65 00000000 656c625b      Type:%d....[ble
100133cc:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
100133dc:	74655309 454c4220 76654420 20656369     .Set BLE Device 
100133ec:	666e6f63 72756769 6f697461 6166206e     configuration fa
100133fc:	64656c69 00000000 656c625b 7465735f     iled....[ble_set
1001340c:	7665645f 6e6f635f 5d676966 74655309     _dev_config].Set
1001341c:	454c4220 76654420 20656369 72646441      BLE Device Addr
1001342c:	20737365 6c696166 00006465 6e616353     ess failed..Scan
1001343c:	676e696e 502e2e2e 7361656c 61772065     ning...Please wa
1001344c:	2e2e7469 0000002e 76616c53 65732065     it......Slave se
1001345c:	69727563 72207974 65757165 73207473     curity request s
1001346c:	65636375 75667373 0000006c 76616c53     uccessful...Slav
1001347c:	65732065 69727563 72207974 65757165     e security reque
1001348c:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
1001349c:	65746365 6f742064 65657020 65642072     ected to peer de
100134ac:	65636976 74697720 64612068 73657264     vice with addres
100134bc:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
100134cc:	78323025 78323025 78323025 00000000     %02x%02x%02x....
100134dc:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
100134ec:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
100134fc:	61522067 6d6f646e 64646120 73736572     g Random address
1001350c:	63757320 73736563 00002a2a 6f736552      success**..Reso
1001351c:	6e69766c 61522067 6d6f646e 64646120     lving Random add
1001352c:	73736572 69616620 2a64656c 0000002a     ress failed**...
1001353c:	2078614d 626d756e 6f207265 6f632066     Max number of co
1001354c:	63656e6e 6e6f6974 61657220 64656863     nnection reached
1001355c:	6425203a 3d3d3d20 7369443e 6e6e6f63     : %d ===>Disconn
1001356c:	69746365 2e2e676e 0000002e 69766544     ecting......Devi
1001357c:	43206563 656e6e6f 6f697463 6146206e     ce Connection Fa
1001358c:	64656c69 53202d20 75746174 25203a73     iled - Status: %
1001359c:	00000064 23232323 23232323 65442323     d...##########De
100135ac:	65636976 756f4620 0000646e 23232323     vice Found..####
100135bc:	23232323 65442323 65636976 746f4e20     ######Device Not
100135cc:	756f4620 0000646e 69766544 69206563      Found..Device i
100135dc:	253a7864 00000064 4c420a0d 76452d45     dx:%d.....BLE-Ev
100135ec:	3a746e65 00006425 54544147 7265535f     ent:%d..GATT_Ser
100135fc:	20726576 6e657645 64253a74 00000000     ver Event:%d....
1001360c:	2d454c42 616e614d 3a726567 6e6b6e55     BLE-Manager:Unkn
1001361c:	206e776f 6e657645 78303d74 00005825     own Event=0x%X..
1001362c:	656c625b 6e616d5f 72656761 0909095d     [ble_manager]...
1001363c:	756e614d 74636166 72657275 65707320     Manufacturer spe
1001364c:	69666963 61642063 65206174 6c62616e     cific data enabl
1001365c:	00006465 5a2d571c 00002dbe 20454c42     ed...W-Z.-..BLE 
1001366c:	65766441 73697472 6e656d65 61642074     Advertisement da
1001367c:	73206174 66207465 656c6961 00000064     ta set failed...

1001368c <ble_mgr_gap_handle>:
1001368c:	1000ada9 1000b059 1000adcd 1000adf5     ....Y...........
1001369c:	00000000 1000bcd5 1000aed5 1000af71     ............q...
100136ac:	1000b2b5 1000b105 1000b4b5 1000b2cd     ................
100136bc:	1000b641 1000b785 1000af95 1000bf21     A...........!...
	...
100136d8:	696b6157 7520676e 2e2e2e70 6e744220     Waking up... Btn
100136e8:	6e692030 00000074 6f727245 6e692072     0 int...Error in
100136f8:	736d7320 7475625f 5f6e6f74 29286e66      sms_button_fn()
10013708:	00000000 656e6f64 00000000 696b6157     ....done....Waki
10013718:	7520676e 2e2e2e70 6e744220 6e692031     ng up... Btn1 in
10013728:	00000074 656d6954 69203172 2e2e746e     t...Timer1 int..
10013738:	0000202e 656d6954 69203272 2e2e746e     . ..Timer2 int..
10013748:	0000202e 6e696f47 6f742067 656c7320     . ..Going to sle
10013758:	2e2e7065 0000002e 20544f4e 65726974     ep......NOT tire
10013768:	00002164 656d7441 6f43206c 022e7072              d!..Atmel Corp.

10013777 <CSWTCH.45>:
10013777:	00100402                                         ...

1001377a <CSWTCH.47>:
1001377a:	03010300 03030303 03030303 02020303              ...............

10013789 <client_conf_uuid>:
10013789:	29042902                                         .)

1001378b <presentation_format_uuid>:
1001378b:	29012904                                         .)

1001378d <user_desc_uuid>:
1001378d:	29032901                                         .)

1001378f <server_conf_uuid>:
1001378f:	29002903                                         .)

10013791 <extended_props_uuid>:
10013791:	28022900                                         .)

10013793 <include_uuid>:
10013793:	28032802                                         .(

10013795 <char_uuid>:
10013795:	e0002803 a0100101 a0100100 9e100100     .(..............
100137a5:	b8100100 b8100101 aa100101 9e100101     ................
100137b5:	b8100100 aa100101 b8100101 9e100101     ................
100137c5:	c0100100 c0100101 c0100101 c0100101     ................
100137d5:	43100103 a4000000                                ...C...

100137dc <_global_impure_ptr>:
100137dc:	100138a4                                .8..

100137e0 <__sf_fake_stdin>:
	...

10013800 <__sf_fake_stdout>:
	...

10013820 <__sf_fake_stderr>:
	...
10013840:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10013850:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10013860:	31300046 35343332 39383736 64636261     F.0123456789abcd
10013870:	00006665                                ef..

10013874 <_init>:
10013874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013876:	46c0      	nop			; (mov r8, r8)
10013878:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001387a:	bc08      	pop	{r3}
1001387c:	469e      	mov	lr, r3
1001387e:	4770      	bx	lr

10013880 <__init_array_start>:
10013880:	100080b1 	.word	0x100080b1

10013884 <_fini>:
10013884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013886:	46c0      	nop			; (mov r8, r8)
10013888:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001388a:	bc08      	pop	{r3}
1001388c:	469e      	mov	lr, r3
1001388e:	4770      	bx	lr

10013890 <__fini_array_start>:
10013890:	10008089 	.word	0x10008089
