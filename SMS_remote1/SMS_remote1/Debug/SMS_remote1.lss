
SMS_remote1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b744  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000006c  10013744  10013744  00013744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002d40  100137b0  100137b0  000137b0  2**2
                  ALLOC
  3 .stack        00000800  100164f0  100164f0  000137b0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000137b0  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  000137d8  2**0
                  CONTENTS, READONLY
  6 .debug_info   00029a95  00000000  00000000  0001388c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000311d  00000000  00000000  0003d321  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006491  00000000  00000000  0004043e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000808  00000000  00000000  000468cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000810  00000000  00000000  000470d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000816d  00000000  00000000  000478e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000de44  00000000  00000000  0004fa54  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0013e2cb  00000000  00000000  0005d898  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001ec0  00000000  00000000  0019bb64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10013744 	.word	0x10013744
10008068:	10013744 	.word	0x10013744
1000806c:	100137b0 	.word	0x100137b0
10008070:	100164f0 	.word	0x100164f0
10008074:	100137b0 	.word	0x100137b0
10008078:	10013748 	.word	0x10013748
1000807c:	100137b4 	.word	0x100137b4
10008080:	10010e05 	.word	0x10010e05
10008084:	1000c789 	.word	0x1000c789

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	100137b0 	.word	0x100137b0
100080a8:	00000000 	.word	0x00000000
100080ac:	10013744 	.word	0x10013744

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	100137b4 	.word	0x100137b4
100080dc:	10013744 	.word	0x10013744
100080e0:	10013744 	.word	0x10013744
100080e4:	00000000 	.word	0x00000000

100080e8 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
100080e8:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
100080ea:	4b16      	ldr	r3, [pc, #88]	; (10008144 <gpio_port0_isr_handler+0x5c>)
100080ec:	681d      	ldr	r5, [r3, #0]
100080ee:	8f29      	ldrh	r1, [r5, #56]	; 0x38
100080f0:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
100080f2:	07cb      	lsls	r3, r1, #31
100080f4:	d407      	bmi.n	10008106 <gpio_port0_isr_handler+0x1e>
100080f6:	2301      	movs	r3, #1
100080f8:	2401      	movs	r4, #1
100080fa:	0018      	movs	r0, r3
100080fc:	0022      	movs	r2, r4
100080fe:	409a      	lsls	r2, r3
10008100:	4211      	tst	r1, r2
10008102:	d014      	beq.n	1000812e <gpio_port0_isr_handler+0x46>
10008104:	e001      	b.n	1000810a <gpio_port0_isr_handler+0x22>
10008106:	2201      	movs	r2, #1
10008108:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000810a:	b292      	uxth	r2, r2
1000810c:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000810e:	2346      	movs	r3, #70	; 0x46
10008110:	4a0c      	ldr	r2, [pc, #48]	; (10008144 <gpio_port0_isr_handler+0x5c>)
10008112:	5ad3      	ldrh	r3, [r2, r3]
10008114:	4103      	asrs	r3, r0
10008116:	07db      	lsls	r3, r3, #31
10008118:	d50c      	bpl.n	10008134 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000811a:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000811c:	5ad3      	ldrh	r3, [r2, r3]
1000811e:	4103      	asrs	r3, r0
10008120:	07db      	lsls	r3, r3, #31
10008122:	d507      	bpl.n	10008134 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
10008124:	0080      	lsls	r0, r0, #2
10008126:	1810      	adds	r0, r2, r0
10008128:	6843      	ldr	r3, [r0, #4]
1000812a:	4798      	blx	r3
1000812c:	e002      	b.n	10008134 <gpio_port0_isr_handler+0x4c>
1000812e:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
10008130:	2b10      	cmp	r3, #16
10008132:	d1e2      	bne.n	100080fa <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10008134:	2180      	movs	r1, #128	; 0x80
10008136:	0409      	lsls	r1, r1, #16
10008138:	23c0      	movs	r3, #192	; 0xc0
1000813a:	005b      	lsls	r3, r3, #1
1000813c:	4a02      	ldr	r2, [pc, #8]	; (10008148 <gpio_port0_isr_handler+0x60>)
1000813e:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
10008140:	bd70      	pop	{r4, r5, r6, pc}
10008142:	46c0      	nop			; (mov r8, r8)
10008144:	10015270 	.word	0x10015270
10008148:	e000e100 	.word	0xe000e100

1000814c <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000814e:	4b18      	ldr	r3, [pc, #96]	; (100081b0 <gpio_port1_isr_handler+0x64>)
10008150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10008152:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
10008154:	b2b6      	uxth	r6, r6
10008156:	0037      	movs	r7, r6
10008158:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000815a:	0b76      	lsrs	r6, r6, #13
1000815c:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000815e:	4d14      	ldr	r5, [pc, #80]	; (100081b0 <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
10008160:	2e00      	cmp	r6, #0
10008162:	d001      	beq.n	10008168 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
10008164:	4b13      	ldr	r3, [pc, #76]	; (100081b4 <gpio_port1_isr_handler+0x68>)
10008166:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
10008168:	0022      	movs	r2, r4
1000816a:	2301      	movs	r3, #1
1000816c:	40a3      	lsls	r3, r4
1000816e:	421f      	tst	r7, r3
10008170:	d013      	beq.n	1000819a <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
10008172:	b29b      	uxth	r3, r3
10008174:	6ca9      	ldr	r1, [r5, #72]	; 0x48
10008176:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
10008178:	238e      	movs	r3, #142	; 0x8e
1000817a:	5aeb      	ldrh	r3, [r5, r3]
1000817c:	4123      	asrs	r3, r4
1000817e:	07db      	lsls	r3, r3, #31
10008180:	d50b      	bpl.n	1000819a <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
10008182:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
10008184:	490a      	ldr	r1, [pc, #40]	; (100081b0 <gpio_port1_isr_handler+0x64>)
10008186:	5acb      	ldrh	r3, [r1, r3]
10008188:	4123      	asrs	r3, r4
1000818a:	07db      	lsls	r3, r3, #31
1000818c:	d505      	bpl.n	1000819a <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000818e:	3212      	adds	r2, #18
10008190:	0092      	lsls	r2, r2, #2
10008192:	188a      	adds	r2, r1, r2
10008194:	6853      	ldr	r3, [r2, #4]
10008196:	4798      	blx	r3
				break;
10008198:	e002      	b.n	100081a0 <gpio_port1_isr_handler+0x54>
1000819a:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000819c:	2c10      	cmp	r4, #16
1000819e:	d1df      	bne.n	10008160 <gpio_port1_isr_handler+0x14>
100081a0:	2180      	movs	r1, #128	; 0x80
100081a2:	0449      	lsls	r1, r1, #17
100081a4:	23c0      	movs	r3, #192	; 0xc0
100081a6:	005b      	lsls	r3, r3, #1
100081a8:	4a03      	ldr	r2, [pc, #12]	; (100081b8 <gpio_port1_isr_handler+0x6c>)
100081aa:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
100081ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100081ae:	46c0      	nop			; (mov r8, r8)
100081b0:	10015270 	.word	0x10015270
100081b4:	0001bc51 	.word	0x0001bc51
100081b8:	e000e100 	.word	0xe000e100

100081bc <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
100081bc:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
100081be:	2390      	movs	r3, #144	; 0x90
100081c0:	4a1b      	ldr	r2, [pc, #108]	; (10008230 <gpio_port2_isr_handler+0x74>)
100081c2:	58d2      	ldr	r2, [r2, r3]
100081c4:	8f13      	ldrh	r3, [r2, #56]	; 0x38
100081c6:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
100081c8:	04d9      	lsls	r1, r3, #19
100081ca:	d414      	bmi.n	100081f6 <gpio_port2_isr_handler+0x3a>
100081cc:	0499      	lsls	r1, r3, #18
100081ce:	d40a      	bmi.n	100081e6 <gpio_port2_isr_handler+0x2a>
100081d0:	0459      	lsls	r1, r3, #17
100081d2:	d40c      	bmi.n	100081ee <gpio_port2_isr_handler+0x32>
100081d4:	0bdb      	lsrs	r3, r3, #15
100081d6:	03db      	lsls	r3, r3, #15
100081d8:	b29b      	uxth	r3, r3
100081da:	2b00      	cmp	r3, #0
100081dc:	d020      	beq.n	10008220 <gpio_port2_isr_handler+0x64>
100081de:	2380      	movs	r3, #128	; 0x80
100081e0:	021b      	lsls	r3, r3, #8
100081e2:	210f      	movs	r1, #15
100081e4:	e00a      	b.n	100081fc <gpio_port2_isr_handler+0x40>
100081e6:	2380      	movs	r3, #128	; 0x80
100081e8:	019b      	lsls	r3, r3, #6
100081ea:	210d      	movs	r1, #13
100081ec:	e006      	b.n	100081fc <gpio_port2_isr_handler+0x40>
100081ee:	2380      	movs	r3, #128	; 0x80
100081f0:	01db      	lsls	r3, r3, #7
100081f2:	210e      	movs	r1, #14
100081f4:	e002      	b.n	100081fc <gpio_port2_isr_handler+0x40>
100081f6:	2380      	movs	r3, #128	; 0x80
100081f8:	015b      	lsls	r3, r3, #5
100081fa:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
100081fc:	b29b      	uxth	r3, r3
100081fe:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
10008200:	23d6      	movs	r3, #214	; 0xd6
10008202:	4a0b      	ldr	r2, [pc, #44]	; (10008230 <gpio_port2_isr_handler+0x74>)
10008204:	5ad3      	ldrh	r3, [r2, r3]
10008206:	410b      	asrs	r3, r1
10008208:	07db      	lsls	r3, r3, #31
1000820a:	d509      	bpl.n	10008220 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000820c:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000820e:	5ad3      	ldrh	r3, [r2, r3]
10008210:	410b      	asrs	r3, r1
10008212:	07db      	lsls	r3, r3, #31
10008214:	d504      	bpl.n	10008220 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
10008216:	3124      	adds	r1, #36	; 0x24
10008218:	0089      	lsls	r1, r1, #2
1000821a:	1851      	adds	r1, r2, r1
1000821c:	684b      	ldr	r3, [r1, #4]
1000821e:	4798      	blx	r3
10008220:	2180      	movs	r1, #128	; 0x80
10008222:	0489      	lsls	r1, r1, #18
10008224:	23c0      	movs	r3, #192	; 0xc0
10008226:	005b      	lsls	r3, r3, #1
10008228:	4a02      	ldr	r2, [pc, #8]	; (10008234 <gpio_port2_isr_handler+0x78>)
1000822a:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000822c:	bd10      	pop	{r4, pc}
1000822e:	46c0      	nop			; (mov r8, r8)
10008230:	10015270 	.word	0x10015270
10008234:	e000e100 	.word	0xe000e100

10008238 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
10008238:	2300      	movs	r3, #0
1000823a:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000823c:	2201      	movs	r2, #1
1000823e:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
10008240:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
10008242:	70c3      	strb	r3, [r0, #3]
}
10008244:	4770      	bx	lr
10008246:	46c0      	nop			; (mov r8, r8)

10008248 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
10008248:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000824a:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000824c:	2801      	cmp	r0, #1
1000824e:	d800      	bhi.n	10008252 <gpio_pin_set_config+0xa>
10008250:	e0c8      	b.n	100083e4 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
10008252:	2807      	cmp	r0, #7
10008254:	d809      	bhi.n	1000826a <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008256:	4d64      	ldr	r5, [pc, #400]	; (100083e8 <gpio_pin_set_config+0x1a0>)
10008258:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000825a:	3b10      	subs	r3, #16
1000825c:	4003      	ands	r3, r0
1000825e:	009b      	lsls	r3, r3, #2
10008260:	2407      	movs	r4, #7
10008262:	409c      	lsls	r4, r3
10008264:	43a2      	bics	r2, r4
10008266:	646a      	str	r2, [r5, #68]	; 0x44
10008268:	e029      	b.n	100082be <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000826a:	280f      	cmp	r0, #15
1000826c:	d809      	bhi.n	10008282 <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000826e:	4d5e      	ldr	r5, [pc, #376]	; (100083e8 <gpio_pin_set_config+0x1a0>)
10008270:	6caa      	ldr	r2, [r5, #72]	; 0x48
10008272:	2307      	movs	r3, #7
10008274:	4003      	ands	r3, r0
10008276:	009b      	lsls	r3, r3, #2
10008278:	2407      	movs	r4, #7
1000827a:	409c      	lsls	r4, r3
1000827c:	43a2      	bics	r2, r4
1000827e:	64aa      	str	r2, [r5, #72]	; 0x48
10008280:	e01d      	b.n	100082be <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
10008282:	2817      	cmp	r0, #23
10008284:	d809      	bhi.n	1000829a <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008286:	4d58      	ldr	r5, [pc, #352]	; (100083e8 <gpio_pin_set_config+0x1a0>)
10008288:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000828a:	2307      	movs	r3, #7
1000828c:	4003      	ands	r3, r0
1000828e:	009b      	lsls	r3, r3, #2
10008290:	2407      	movs	r4, #7
10008292:	409c      	lsls	r4, r3
10008294:	43a2      	bics	r2, r4
10008296:	64ea      	str	r2, [r5, #76]	; 0x4c
10008298:	e011      	b.n	100082be <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000829a:	0003      	movs	r3, r0
1000829c:	3b2c      	subs	r3, #44	; 0x2c
1000829e:	2b03      	cmp	r3, #3
100082a0:	d80d      	bhi.n	100082be <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
100082a2:	4d52      	ldr	r5, [pc, #328]	; (100083ec <gpio_pin_set_config+0x1a4>)
100082a4:	2482      	movs	r4, #130	; 0x82
100082a6:	00e4      	lsls	r4, r4, #3
100082a8:	5d2a      	ldrb	r2, [r5, r4]
100082aa:	0712      	lsls	r2, r2, #28
100082ac:	2601      	movs	r6, #1
100082ae:	409e      	lsls	r6, r3
100082b0:	0f12      	lsrs	r2, r2, #28
100082b2:	5d2b      	ldrb	r3, [r5, r4]
100082b4:	43b2      	bics	r2, r6
100082b6:	260f      	movs	r6, #15
100082b8:	43b3      	bics	r3, r6
100082ba:	4313      	orrs	r3, r2
100082bc:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
100082be:	0003      	movs	r3, r0
100082c0:	3b1d      	subs	r3, #29
100082c2:	2b02      	cmp	r3, #2
100082c4:	d829      	bhi.n	1000831a <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
100082c6:	784b      	ldrb	r3, [r1, #1]
100082c8:	2b01      	cmp	r3, #1
100082ca:	d108      	bne.n	100082de <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
100082cc:	4d47      	ldr	r5, [pc, #284]	; (100083ec <gpio_pin_set_config+0x1a4>)
100082ce:	7d2b      	ldrb	r3, [r5, #20]
100082d0:	241f      	movs	r4, #31
100082d2:	1a24      	subs	r4, r4, r0
100082d4:	2201      	movs	r2, #1
100082d6:	40a2      	lsls	r2, r4
100082d8:	4393      	bics	r3, r2
100082da:	752b      	strb	r3, [r5, #20]
100082dc:	e008      	b.n	100082f0 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
100082de:	4c43      	ldr	r4, [pc, #268]	; (100083ec <gpio_pin_set_config+0x1a4>)
100082e0:	7d25      	ldrb	r5, [r4, #20]
100082e2:	221f      	movs	r2, #31
100082e4:	1a12      	subs	r2, r2, r0
100082e6:	2301      	movs	r3, #1
100082e8:	4093      	lsls	r3, r2
100082ea:	432b      	orrs	r3, r5
100082ec:	b2db      	uxtb	r3, r3
100082ee:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
100082f0:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100082f2:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
100082f4:	2a00      	cmp	r2, #0
100082f6:	d075      	beq.n	100083e4 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
100082f8:	493c      	ldr	r1, [pc, #240]	; (100083ec <gpio_pin_set_config+0x1a4>)
100082fa:	880c      	ldrh	r4, [r1, #0]
100082fc:	221f      	movs	r2, #31
100082fe:	1a10      	subs	r0, r2, r0
10008300:	0080      	lsls	r0, r0, #2
10008302:	3301      	adds	r3, #1
10008304:	4083      	lsls	r3, r0
10008306:	4323      	orrs	r3, r4
10008308:	b29b      	uxth	r3, r3
1000830a:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000830c:	4a38      	ldr	r2, [pc, #224]	; (100083f0 <gpio_pin_set_config+0x1a8>)
1000830e:	7811      	ldrb	r1, [r2, #0]
10008310:	2302      	movs	r3, #2
10008312:	430b      	orrs	r3, r1
10008314:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008316:	2300      	movs	r3, #0
10008318:	e064      	b.n	100083e4 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000831a:	780a      	ldrb	r2, [r1, #0]
1000831c:	2a00      	cmp	r2, #0
1000831e:	d140      	bne.n	100083a2 <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
10008320:	280f      	cmp	r0, #15
10008322:	d808      	bhi.n	10008336 <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
10008324:	2301      	movs	r3, #1
10008326:	4083      	lsls	r3, r0
10008328:	b29b      	uxth	r3, r3
1000832a:	4a32      	ldr	r2, [pc, #200]	; (100083f4 <gpio_pin_set_config+0x1ac>)
1000832c:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000832e:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
10008330:	281f      	cmp	r0, #31
10008332:	d857      	bhi.n	100083e4 <gpio_pin_set_config+0x19c>
10008334:	e012      	b.n	1000835c <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
10008336:	281f      	cmp	r0, #31
10008338:	d807      	bhi.n	1000834a <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000833a:	220f      	movs	r2, #15
1000833c:	4002      	ands	r2, r0
1000833e:	2301      	movs	r3, #1
10008340:	4093      	lsls	r3, r2
10008342:	b29b      	uxth	r3, r3
10008344:	4a2c      	ldr	r2, [pc, #176]	; (100083f8 <gpio_pin_set_config+0x1b0>)
10008346:	8293      	strh	r3, [r2, #20]
10008348:	e008      	b.n	1000835c <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000834a:	230f      	movs	r3, #15
1000834c:	4018      	ands	r0, r3
1000834e:	3b0e      	subs	r3, #14
10008350:	4083      	lsls	r3, r0
10008352:	b29b      	uxth	r3, r3
10008354:	4a29      	ldr	r2, [pc, #164]	; (100083fc <gpio_pin_set_config+0x1b4>)
10008356:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008358:	2300      	movs	r3, #0
1000835a:	e043      	b.n	100083e4 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000835c:	784b      	ldrb	r3, [r1, #1]
1000835e:	2b01      	cmp	r3, #1
10008360:	d00c      	beq.n	1000837c <gpio_pin_set_config+0x134>
10008362:	2b00      	cmp	r3, #0
10008364:	d002      	beq.n	1000836c <gpio_pin_set_config+0x124>
10008366:	2b02      	cmp	r3, #2
10008368:	d010      	beq.n	1000838c <gpio_pin_set_config+0x144>
1000836a:	e03a      	b.n	100083e2 <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000836c:	491e      	ldr	r1, [pc, #120]	; (100083e8 <gpio_pin_set_config+0x1a0>)
1000836e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
10008370:	2301      	movs	r3, #1
10008372:	4083      	lsls	r3, r0
10008374:	4313      	orrs	r3, r2
10008376:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008378:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000837a:	e033      	b.n	100083e4 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000837c:	491a      	ldr	r1, [pc, #104]	; (100083e8 <gpio_pin_set_config+0x1a0>)
1000837e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
10008380:	2201      	movs	r2, #1
10008382:	4082      	lsls	r2, r0
10008384:	4393      	bics	r3, r2
10008386:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008388:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000838a:	e02b      	b.n	100083e4 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000838c:	4b16      	ldr	r3, [pc, #88]	; (100083e8 <gpio_pin_set_config+0x1a0>)
1000838e:	6d59      	ldr	r1, [r3, #84]	; 0x54
10008390:	2201      	movs	r2, #1
10008392:	4082      	lsls	r2, r0
10008394:	4311      	orrs	r1, r2
10008396:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10008398:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000839a:	4391      	bics	r1, r2
1000839c:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000839e:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
100083a0:	e020      	b.n	100083e4 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100083a2:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
100083a4:	2a01      	cmp	r2, #1
100083a6:	d11d      	bne.n	100083e4 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
100083a8:	280f      	cmp	r0, #15
100083aa:	d806      	bhi.n	100083ba <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
100083ac:	3301      	adds	r3, #1
100083ae:	4083      	lsls	r3, r0
100083b0:	b29b      	uxth	r3, r3
100083b2:	4a10      	ldr	r2, [pc, #64]	; (100083f4 <gpio_pin_set_config+0x1ac>)
100083b4:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100083b6:	2300      	movs	r3, #0
100083b8:	e014      	b.n	100083e4 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
100083ba:	281f      	cmp	r0, #31
100083bc:	d808      	bhi.n	100083d0 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
100083be:	230f      	movs	r3, #15
100083c0:	4018      	ands	r0, r3
100083c2:	3b0e      	subs	r3, #14
100083c4:	4083      	lsls	r3, r0
100083c6:	b29b      	uxth	r3, r3
100083c8:	4a0b      	ldr	r2, [pc, #44]	; (100083f8 <gpio_pin_set_config+0x1b0>)
100083ca:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100083cc:	2300      	movs	r3, #0
100083ce:	e009      	b.n	100083e4 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
100083d0:	230f      	movs	r3, #15
100083d2:	4018      	ands	r0, r3
100083d4:	3b0e      	subs	r3, #14
100083d6:	4083      	lsls	r3, r0
100083d8:	b29b      	uxth	r3, r3
100083da:	4a08      	ldr	r2, [pc, #32]	; (100083fc <gpio_pin_set_config+0x1b4>)
100083dc:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100083de:	2300      	movs	r3, #0
100083e0:	e000      	b.n	100083e4 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
100083e2:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
100083e4:	0018      	movs	r0, r3
100083e6:	bd70      	pop	{r4, r5, r6, pc}
100083e8:	4000b000 	.word	0x4000b000
100083ec:	4000f000 	.word	0x4000f000
100083f0:	4000e000 	.word	0x4000e000
100083f4:	40010000 	.word	0x40010000
100083f8:	40011000 	.word	0x40011000
100083fc:	40013000 	.word	0x40013000

10008400 <gpio_pin_get_input_level>:
 */
bool gpio_pin_get_input_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
10008400:	280f      	cmp	r0, #15
10008402:	d806      	bhi.n	10008412 <gpio_pin_get_input_level+0x12>
		regval = GPIO0->DATA.reg;
10008404:	4b0f      	ldr	r3, [pc, #60]	; (10008444 <gpio_pin_get_input_level+0x44>)
10008406:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << gpio_pin);
10008408:	2301      	movs	r3, #1
1000840a:	4083      	lsls	r3, r0
1000840c:	0018      	movs	r0, r3
1000840e:	4008      	ands	r0, r1
10008410:	e014      	b.n	1000843c <gpio_pin_get_input_level+0x3c>
	} else if (gpio_pin < 32) {
10008412:	281f      	cmp	r0, #31
10008414:	d809      	bhi.n	1000842a <gpio_pin_get_input_level+0x2a>
		regval = GPIO1->DATA.reg;
10008416:	4b0c      	ldr	r3, [pc, #48]	; (10008448 <gpio_pin_get_input_level+0x48>)
10008418:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000841a:	230f      	movs	r3, #15
1000841c:	4003      	ands	r3, r0
1000841e:	001a      	movs	r2, r3
10008420:	2301      	movs	r3, #1
10008422:	4093      	lsls	r3, r2
10008424:	0018      	movs	r0, r3
10008426:	4008      	ands	r0, r1
10008428:	e008      	b.n	1000843c <gpio_pin_get_input_level+0x3c>
	} else {
		regval = GPIO2->DATA.reg;
1000842a:	4b08      	ldr	r3, [pc, #32]	; (1000844c <gpio_pin_get_input_level+0x4c>)
1000842c:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000842e:	230f      	movs	r3, #15
10008430:	4003      	ands	r3, r0
10008432:	001a      	movs	r2, r3
10008434:	2301      	movs	r3, #1
10008436:	4093      	lsls	r3, r2
10008438:	0018      	movs	r0, r3
1000843a:	4008      	ands	r0, r1
	}

	return regval;
1000843c:	1e43      	subs	r3, r0, #1
1000843e:	4198      	sbcs	r0, r3
10008440:	b2c0      	uxtb	r0, r0
}
10008442:	4770      	bx	lr
10008444:	40010000 	.word	0x40010000
10008448:	40011000 	.word	0x40011000
1000844c:	40013000 	.word	0x40013000

10008450 <gpio_pin_get_output_level>:
 */
bool gpio_pin_get_output_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
10008450:	280f      	cmp	r0, #15
10008452:	d806      	bhi.n	10008462 <gpio_pin_get_output_level+0x12>
		regval = GPIO0->DATAOUT.reg;
10008454:	4b0f      	ldr	r3, [pc, #60]	; (10008494 <gpio_pin_get_output_level+0x44>)
10008456:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << gpio_pin);
10008458:	2301      	movs	r3, #1
1000845a:	4083      	lsls	r3, r0
1000845c:	0018      	movs	r0, r3
1000845e:	4008      	ands	r0, r1
10008460:	e014      	b.n	1000848c <gpio_pin_get_output_level+0x3c>
	} else if (gpio_pin < 32) {
10008462:	281f      	cmp	r0, #31
10008464:	d809      	bhi.n	1000847a <gpio_pin_get_output_level+0x2a>
		regval = GPIO1->DATAOUT.reg;
10008466:	4b0c      	ldr	r3, [pc, #48]	; (10008498 <gpio_pin_get_output_level+0x48>)
10008468:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000846a:	230f      	movs	r3, #15
1000846c:	4003      	ands	r3, r0
1000846e:	001a      	movs	r2, r3
10008470:	2301      	movs	r3, #1
10008472:	4093      	lsls	r3, r2
10008474:	0018      	movs	r0, r3
10008476:	4008      	ands	r0, r1
10008478:	e008      	b.n	1000848c <gpio_pin_get_output_level+0x3c>
	} else {
		regval = GPIO2->DATAOUT.reg;
1000847a:	4b08      	ldr	r3, [pc, #32]	; (1000849c <gpio_pin_get_output_level+0x4c>)
1000847c:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000847e:	230f      	movs	r3, #15
10008480:	4003      	ands	r3, r0
10008482:	001a      	movs	r2, r3
10008484:	2301      	movs	r3, #1
10008486:	4093      	lsls	r3, r2
10008488:	0018      	movs	r0, r3
1000848a:	4008      	ands	r0, r1
	}

	return regval;
1000848c:	1e43      	subs	r3, r0, #1
1000848e:	4198      	sbcs	r0, r3
10008490:	b2c0      	uxtb	r0, r0
}
10008492:	4770      	bx	lr
10008494:	40010000 	.word	0x40010000
10008498:	40011000 	.word	0x40011000
1000849c:	40013000 	.word	0x40013000

100084a0 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
100084a0:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
100084a2:	280f      	cmp	r0, #15
100084a4:	d810      	bhi.n	100084c8 <gpio_pin_set_output_level+0x28>
		if(level) {
100084a6:	2900      	cmp	r1, #0
100084a8:	d007      	beq.n	100084ba <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
100084aa:	4a1d      	ldr	r2, [pc, #116]	; (10008520 <gpio_pin_set_output_level+0x80>)
100084ac:	8891      	ldrh	r1, [r2, #4]
100084ae:	2301      	movs	r3, #1
100084b0:	4083      	lsls	r3, r0
100084b2:	430b      	orrs	r3, r1
100084b4:	b29b      	uxth	r3, r3
100084b6:	8093      	strh	r3, [r2, #4]
100084b8:	e031      	b.n	1000851e <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
100084ba:	4919      	ldr	r1, [pc, #100]	; (10008520 <gpio_pin_set_output_level+0x80>)
100084bc:	888b      	ldrh	r3, [r1, #4]
100084be:	2201      	movs	r2, #1
100084c0:	4082      	lsls	r2, r0
100084c2:	4393      	bics	r3, r2
100084c4:	808b      	strh	r3, [r1, #4]
100084c6:	e02a      	b.n	1000851e <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
100084c8:	281f      	cmp	r0, #31
100084ca:	d814      	bhi.n	100084f6 <gpio_pin_set_output_level+0x56>
		if(level) {
100084cc:	2900      	cmp	r1, #0
100084ce:	d009      	beq.n	100084e4 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
100084d0:	4914      	ldr	r1, [pc, #80]	; (10008524 <gpio_pin_set_output_level+0x84>)
100084d2:	888c      	ldrh	r4, [r1, #4]
100084d4:	220f      	movs	r2, #15
100084d6:	4010      	ands	r0, r2
100084d8:	2301      	movs	r3, #1
100084da:	4083      	lsls	r3, r0
100084dc:	4323      	orrs	r3, r4
100084de:	b29b      	uxth	r3, r3
100084e0:	808b      	strh	r3, [r1, #4]
100084e2:	e01c      	b.n	1000851e <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
100084e4:	490f      	ldr	r1, [pc, #60]	; (10008524 <gpio_pin_set_output_level+0x84>)
100084e6:	888b      	ldrh	r3, [r1, #4]
100084e8:	220f      	movs	r2, #15
100084ea:	4010      	ands	r0, r2
100084ec:	3a0e      	subs	r2, #14
100084ee:	4082      	lsls	r2, r0
100084f0:	4393      	bics	r3, r2
100084f2:	808b      	strh	r3, [r1, #4]
100084f4:	e013      	b.n	1000851e <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
100084f6:	2900      	cmp	r1, #0
100084f8:	d009      	beq.n	1000850e <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
100084fa:	490b      	ldr	r1, [pc, #44]	; (10008528 <gpio_pin_set_output_level+0x88>)
100084fc:	888c      	ldrh	r4, [r1, #4]
100084fe:	220f      	movs	r2, #15
10008500:	4010      	ands	r0, r2
10008502:	2301      	movs	r3, #1
10008504:	4083      	lsls	r3, r0
10008506:	4323      	orrs	r3, r4
10008508:	b29b      	uxth	r3, r3
1000850a:	808b      	strh	r3, [r1, #4]
1000850c:	e007      	b.n	1000851e <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000850e:	4906      	ldr	r1, [pc, #24]	; (10008528 <gpio_pin_set_output_level+0x88>)
10008510:	888b      	ldrh	r3, [r1, #4]
10008512:	220f      	movs	r2, #15
10008514:	4010      	ands	r0, r2
10008516:	3a0e      	subs	r2, #14
10008518:	4082      	lsls	r2, r0
1000851a:	4393      	bics	r3, r2
1000851c:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000851e:	bd10      	pop	{r4, pc}
10008520:	40010000 	.word	0x40010000
10008524:	40011000 	.word	0x40011000
10008528:	40013000 	.word	0x40013000

1000852c <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000852c:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000852e:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
10008530:	23ff      	movs	r3, #255	; 0xff
10008532:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
10008534:	2807      	cmp	r0, #7
10008536:	d833      	bhi.n	100085a0 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008538:	4a4e      	ldr	r2, [pc, #312]	; (10008674 <gpio_pinmux_cofiguration+0x148>)
1000853a:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000853c:	3bf8      	subs	r3, #248	; 0xf8
1000853e:	4003      	ands	r3, r0
10008540:	009b      	lsls	r3, r3, #2
10008542:	2607      	movs	r6, #7
10008544:	409e      	lsls	r6, r3
10008546:	43b4      	bics	r4, r6
10008548:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000854a:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000854c:	000e      	movs	r6, r1
1000854e:	409e      	lsls	r6, r3
10008550:	0033      	movs	r3, r6
10008552:	4323      	orrs	r3, r4
10008554:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
10008556:	2901      	cmp	r1, #1
10008558:	d000      	beq.n	1000855c <gpio_pinmux_cofiguration+0x30>
1000855a:	e08a      	b.n	10008672 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000855c:	2803      	cmp	r0, #3
1000855e:	d80f      	bhi.n	10008580 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008560:	0011      	movs	r1, r2
10008562:	22d0      	movs	r2, #208	; 0xd0
10008564:	0052      	lsls	r2, r2, #1
10008566:	588c      	ldr	r4, [r1, r2]
10008568:	2303      	movs	r3, #3
1000856a:	4018      	ands	r0, r3
1000856c:	00c0      	lsls	r0, r0, #3
1000856e:	333c      	adds	r3, #60	; 0x3c
10008570:	4083      	lsls	r3, r0
10008572:	439c      	bics	r4, r3
10008574:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008576:	588b      	ldr	r3, [r1, r2]
10008578:	4085      	lsls	r5, r0
1000857a:	431d      	orrs	r5, r3
1000857c:	508d      	str	r5, [r1, r2]
1000857e:	e078      	b.n	10008672 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008580:	493c      	ldr	r1, [pc, #240]	; (10008674 <gpio_pinmux_cofiguration+0x148>)
10008582:	22d2      	movs	r2, #210	; 0xd2
10008584:	0052      	lsls	r2, r2, #1
10008586:	588c      	ldr	r4, [r1, r2]
10008588:	2303      	movs	r3, #3
1000858a:	4018      	ands	r0, r3
1000858c:	00c0      	lsls	r0, r0, #3
1000858e:	333c      	adds	r3, #60	; 0x3c
10008590:	4083      	lsls	r3, r0
10008592:	439c      	bics	r4, r3
10008594:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008596:	588b      	ldr	r3, [r1, r2]
10008598:	4085      	lsls	r5, r0
1000859a:	431d      	orrs	r5, r3
1000859c:	508d      	str	r5, [r1, r2]
1000859e:	e068      	b.n	10008672 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
100085a0:	280f      	cmp	r0, #15
100085a2:	d832      	bhi.n	1000860a <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
100085a4:	4a33      	ldr	r2, [pc, #204]	; (10008674 <gpio_pinmux_cofiguration+0x148>)
100085a6:	6c94      	ldr	r4, [r2, #72]	; 0x48
100085a8:	2307      	movs	r3, #7
100085aa:	4003      	ands	r3, r0
100085ac:	009b      	lsls	r3, r3, #2
100085ae:	2607      	movs	r6, #7
100085b0:	409e      	lsls	r6, r3
100085b2:	43b4      	bics	r4, r6
100085b4:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
100085b6:	6c94      	ldr	r4, [r2, #72]	; 0x48
100085b8:	000e      	movs	r6, r1
100085ba:	409e      	lsls	r6, r3
100085bc:	0033      	movs	r3, r6
100085be:	4323      	orrs	r3, r4
100085c0:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
100085c2:	2901      	cmp	r1, #1
100085c4:	d155      	bne.n	10008672 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
100085c6:	280b      	cmp	r0, #11
100085c8:	d80f      	bhi.n	100085ea <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100085ca:	0011      	movs	r1, r2
100085cc:	22d4      	movs	r2, #212	; 0xd4
100085ce:	0052      	lsls	r2, r2, #1
100085d0:	588c      	ldr	r4, [r1, r2]
100085d2:	2303      	movs	r3, #3
100085d4:	4018      	ands	r0, r3
100085d6:	00c0      	lsls	r0, r0, #3
100085d8:	333c      	adds	r3, #60	; 0x3c
100085da:	4083      	lsls	r3, r0
100085dc:	439c      	bics	r4, r3
100085de:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100085e0:	588b      	ldr	r3, [r1, r2]
100085e2:	4085      	lsls	r5, r0
100085e4:	431d      	orrs	r5, r3
100085e6:	508d      	str	r5, [r1, r2]
100085e8:	e043      	b.n	10008672 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100085ea:	4922      	ldr	r1, [pc, #136]	; (10008674 <gpio_pinmux_cofiguration+0x148>)
100085ec:	22d6      	movs	r2, #214	; 0xd6
100085ee:	0052      	lsls	r2, r2, #1
100085f0:	588c      	ldr	r4, [r1, r2]
100085f2:	2303      	movs	r3, #3
100085f4:	4018      	ands	r0, r3
100085f6:	00c0      	lsls	r0, r0, #3
100085f8:	333c      	adds	r3, #60	; 0x3c
100085fa:	4083      	lsls	r3, r0
100085fc:	439c      	bics	r4, r3
100085fe:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008600:	588b      	ldr	r3, [r1, r2]
10008602:	4085      	lsls	r5, r0
10008604:	431d      	orrs	r5, r3
10008606:	508d      	str	r5, [r1, r2]
10008608:	e033      	b.n	10008672 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000860a:	2817      	cmp	r0, #23
1000860c:	d831      	bhi.n	10008672 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000860e:	4a19      	ldr	r2, [pc, #100]	; (10008674 <gpio_pinmux_cofiguration+0x148>)
10008610:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008612:	2307      	movs	r3, #7
10008614:	4003      	ands	r3, r0
10008616:	009b      	lsls	r3, r3, #2
10008618:	2607      	movs	r6, #7
1000861a:	409e      	lsls	r6, r3
1000861c:	43b4      	bics	r4, r6
1000861e:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008620:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008622:	000e      	movs	r6, r1
10008624:	409e      	lsls	r6, r3
10008626:	0033      	movs	r3, r6
10008628:	4323      	orrs	r3, r4
1000862a:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000862c:	2901      	cmp	r1, #1
1000862e:	d120      	bne.n	10008672 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
10008630:	2813      	cmp	r0, #19
10008632:	d80f      	bhi.n	10008654 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008634:	0011      	movs	r1, r2
10008636:	22d8      	movs	r2, #216	; 0xd8
10008638:	0052      	lsls	r2, r2, #1
1000863a:	588c      	ldr	r4, [r1, r2]
1000863c:	2303      	movs	r3, #3
1000863e:	4018      	ands	r0, r3
10008640:	00c0      	lsls	r0, r0, #3
10008642:	333c      	adds	r3, #60	; 0x3c
10008644:	4083      	lsls	r3, r0
10008646:	439c      	bics	r4, r3
10008648:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000864a:	588b      	ldr	r3, [r1, r2]
1000864c:	4085      	lsls	r5, r0
1000864e:	431d      	orrs	r5, r3
10008650:	508d      	str	r5, [r1, r2]
10008652:	e00e      	b.n	10008672 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008654:	4a07      	ldr	r2, [pc, #28]	; (10008674 <gpio_pinmux_cofiguration+0x148>)
10008656:	23da      	movs	r3, #218	; 0xda
10008658:	005b      	lsls	r3, r3, #1
1000865a:	58d1      	ldr	r1, [r2, r3]
1000865c:	2403      	movs	r4, #3
1000865e:	4020      	ands	r0, r4
10008660:	00c0      	lsls	r0, r0, #3
10008662:	343c      	adds	r4, #60	; 0x3c
10008664:	4084      	lsls	r4, r0
10008666:	43a1      	bics	r1, r4
10008668:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000866a:	58d1      	ldr	r1, [r2, r3]
1000866c:	4085      	lsls	r5, r0
1000866e:	430d      	orrs	r5, r1
10008670:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
10008672:	bd70      	pop	{r4, r5, r6, pc}
10008674:	4000b000 	.word	0x4000b000

10008678 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
10008678:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000867a:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000867c:	280f      	cmp	r0, #15
1000867e:	d904      	bls.n	1000868a <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
10008680:	241f      	movs	r4, #31
10008682:	4284      	cmp	r4, r0
10008684:	415b      	adcs	r3, r3
10008686:	3c1d      	subs	r4, #29
10008688:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000868a:	2a01      	cmp	r2, #1
1000868c:	d016      	beq.n	100086bc <gpio_register_callback+0x44>
1000868e:	2a00      	cmp	r2, #0
10008690:	d004      	beq.n	1000869c <gpio_register_callback+0x24>
10008692:	2a02      	cmp	r2, #2
10008694:	d022      	beq.n	100086dc <gpio_register_callback+0x64>
10008696:	2a03      	cmp	r2, #3
10008698:	d030      	beq.n	100086fc <gpio_register_callback+0x84>
1000869a:	e03e      	b.n	1000871a <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000869c:	4e29      	ldr	r6, [pc, #164]	; (10008744 <gpio_register_callback+0xcc>)
1000869e:	00dc      	lsls	r4, r3, #3
100086a0:	18e2      	adds	r2, r4, r3
100086a2:	00d2      	lsls	r2, r2, #3
100086a4:	5997      	ldr	r7, [r2, r6]
100086a6:	250f      	movs	r5, #15
100086a8:	4005      	ands	r5, r0
100086aa:	2201      	movs	r2, #1
100086ac:	40aa      	lsls	r2, r5
100086ae:	b292      	uxth	r2, r2
100086b0:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
100086b2:	18e4      	adds	r4, r4, r3
100086b4:	00e4      	lsls	r4, r4, #3
100086b6:	59a4      	ldr	r4, [r4, r6]
100086b8:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
100086ba:	e02e      	b.n	1000871a <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
100086bc:	4e21      	ldr	r6, [pc, #132]	; (10008744 <gpio_register_callback+0xcc>)
100086be:	00dc      	lsls	r4, r3, #3
100086c0:	18e2      	adds	r2, r4, r3
100086c2:	00d2      	lsls	r2, r2, #3
100086c4:	5997      	ldr	r7, [r2, r6]
100086c6:	250f      	movs	r5, #15
100086c8:	4005      	ands	r5, r0
100086ca:	2201      	movs	r2, #1
100086cc:	40aa      	lsls	r2, r5
100086ce:	b292      	uxth	r2, r2
100086d0:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
100086d2:	18e4      	adds	r4, r4, r3
100086d4:	00e4      	lsls	r4, r4, #3
100086d6:	59a4      	ldr	r4, [r4, r6]
100086d8:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
100086da:	e01e      	b.n	1000871a <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
100086dc:	4e19      	ldr	r6, [pc, #100]	; (10008744 <gpio_register_callback+0xcc>)
100086de:	00dc      	lsls	r4, r3, #3
100086e0:	18e2      	adds	r2, r4, r3
100086e2:	00d2      	lsls	r2, r2, #3
100086e4:	5997      	ldr	r7, [r2, r6]
100086e6:	250f      	movs	r5, #15
100086e8:	4005      	ands	r5, r0
100086ea:	2201      	movs	r2, #1
100086ec:	40aa      	lsls	r2, r5
100086ee:	b292      	uxth	r2, r2
100086f0:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
100086f2:	18e4      	adds	r4, r4, r3
100086f4:	00e4      	lsls	r4, r4, #3
100086f6:	59a4      	ldr	r4, [r4, r6]
100086f8:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
100086fa:	e00e      	b.n	1000871a <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
100086fc:	4e11      	ldr	r6, [pc, #68]	; (10008744 <gpio_register_callback+0xcc>)
100086fe:	00dc      	lsls	r4, r3, #3
10008700:	18e2      	adds	r2, r4, r3
10008702:	00d2      	lsls	r2, r2, #3
10008704:	5997      	ldr	r7, [r2, r6]
10008706:	250f      	movs	r5, #15
10008708:	4005      	ands	r5, r0
1000870a:	2201      	movs	r2, #1
1000870c:	40aa      	lsls	r2, r5
1000870e:	b292      	uxth	r2, r2
10008710:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
10008712:	18e4      	adds	r4, r4, r3
10008714:	00e4      	lsls	r4, r4, #3
10008716:	59a4      	ldr	r4, [r4, r6]
10008718:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000871a:	220f      	movs	r2, #15
1000871c:	4010      	ands	r0, r2
1000871e:	4c09      	ldr	r4, [pc, #36]	; (10008744 <gpio_register_callback+0xcc>)
10008720:	00dd      	lsls	r5, r3, #3
10008722:	18ea      	adds	r2, r5, r3
10008724:	0052      	lsls	r2, r2, #1
10008726:	1812      	adds	r2, r2, r0
10008728:	0092      	lsls	r2, r2, #2
1000872a:	18a2      	adds	r2, r4, r2
1000872c:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000872e:	18ea      	adds	r2, r5, r3
10008730:	00d2      	lsls	r2, r2, #3
10008732:	18a2      	adds	r2, r4, r2
10008734:	3244      	adds	r2, #68	; 0x44
10008736:	2101      	movs	r1, #1
10008738:	4081      	lsls	r1, r0
1000873a:	8813      	ldrh	r3, [r2, #0]
1000873c:	430b      	orrs	r3, r1
1000873e:	8013      	strh	r3, [r2, #0]
}
10008740:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008742:	46c0      	nop			; (mov r8, r8)
10008744:	10015270 	.word	0x10015270

10008748 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
10008748:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000874a:	280f      	cmp	r0, #15
1000874c:	d805      	bhi.n	1000875a <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000874e:	2280      	movs	r2, #128	; 0x80
10008750:	0412      	lsls	r2, r2, #16
10008752:	4b12      	ldr	r3, [pc, #72]	; (1000879c <gpio_enable_callback+0x54>)
10008754:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
10008756:	2200      	movs	r2, #0
10008758:	e00c      	b.n	10008774 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000875a:	281f      	cmp	r0, #31
1000875c:	d805      	bhi.n	1000876a <gpio_enable_callback+0x22>
1000875e:	2280      	movs	r2, #128	; 0x80
10008760:	0452      	lsls	r2, r2, #17
10008762:	4b0e      	ldr	r3, [pc, #56]	; (1000879c <gpio_enable_callback+0x54>)
10008764:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
10008766:	2201      	movs	r2, #1
10008768:	e004      	b.n	10008774 <gpio_enable_callback+0x2c>
1000876a:	2280      	movs	r2, #128	; 0x80
1000876c:	0492      	lsls	r2, r2, #18
1000876e:	4b0b      	ldr	r3, [pc, #44]	; (1000879c <gpio_enable_callback+0x54>)
10008770:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
10008772:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
10008774:	230f      	movs	r3, #15
10008776:	4018      	ands	r0, r3
10008778:	2101      	movs	r1, #1
1000877a:	4081      	lsls	r1, r0
1000877c:	4c08      	ldr	r4, [pc, #32]	; (100087a0 <gpio_enable_callback+0x58>)
1000877e:	00d5      	lsls	r5, r2, #3
10008780:	18ab      	adds	r3, r5, r2
10008782:	00db      	lsls	r3, r3, #3
10008784:	18e3      	adds	r3, r4, r3
10008786:	3346      	adds	r3, #70	; 0x46
10008788:	8818      	ldrh	r0, [r3, #0]
1000878a:	4308      	orrs	r0, r1
1000878c:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000878e:	18aa      	adds	r2, r5, r2
10008790:	00d2      	lsls	r2, r2, #3
10008792:	5913      	ldr	r3, [r2, r4]
10008794:	b289      	uxth	r1, r1
10008796:	8419      	strh	r1, [r3, #32]
}
10008798:	bd30      	pop	{r4, r5, pc}
1000879a:	46c0      	nop			; (mov r8, r8)
1000879c:	e000e100 	.word	0xe000e100
100087a0:	10015270 	.word	0x10015270

100087a4 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
100087a4:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
100087a6:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
100087a8:	280f      	cmp	r0, #15
100087aa:	d904      	bls.n	100087b6 <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
100087ac:	221f      	movs	r2, #31
100087ae:	4282      	cmp	r2, r0
100087b0:	415b      	adcs	r3, r3
100087b2:	3a1d      	subs	r2, #29
100087b4:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
100087b6:	220f      	movs	r2, #15
100087b8:	4010      	ands	r0, r2
100087ba:	2101      	movs	r1, #1
100087bc:	4081      	lsls	r1, r0
100087be:	4c07      	ldr	r4, [pc, #28]	; (100087dc <gpio_disable_callback+0x38>)
100087c0:	00dd      	lsls	r5, r3, #3
100087c2:	18ea      	adds	r2, r5, r3
100087c4:	00d2      	lsls	r2, r2, #3
100087c6:	18a2      	adds	r2, r4, r2
100087c8:	3246      	adds	r2, #70	; 0x46
100087ca:	8810      	ldrh	r0, [r2, #0]
100087cc:	4388      	bics	r0, r1
100087ce:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
100087d0:	18eb      	adds	r3, r5, r3
100087d2:	00db      	lsls	r3, r3, #3
100087d4:	591b      	ldr	r3, [r3, r4]
100087d6:	b289      	uxth	r1, r1
100087d8:	8499      	strh	r1, [r3, #36]	; 0x24
}
100087da:	bd30      	pop	{r4, r5, pc}
100087dc:	10015270 	.word	0x10015270

100087e0 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
100087e0:	b510      	push	{r4, lr}
100087e2:	4a11      	ldr	r2, [pc, #68]	; (10008828 <gpio_init+0x48>)
100087e4:	0010      	movs	r0, r2
100087e6:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
100087e8:	2100      	movs	r1, #0
100087ea:	e007      	b.n	100087fc <gpio_init+0x1c>
100087ec:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
100087ee:	4293      	cmp	r3, r2
100087f0:	d1fc      	bne.n	100087ec <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
100087f2:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
100087f4:	8011      	strh	r1, [r2, #0]
100087f6:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
100087f8:	4282      	cmp	r2, r0
100087fa:	d002      	beq.n	10008802 <gpio_init+0x22>
100087fc:	0013      	movs	r3, r2
100087fe:	3b40      	subs	r3, #64	; 0x40
10008800:	e7f4      	b.n	100087ec <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
10008802:	4b0a      	ldr	r3, [pc, #40]	; (1000882c <gpio_init+0x4c>)
10008804:	4a0a      	ldr	r2, [pc, #40]	; (10008830 <gpio_init+0x50>)
10008806:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
10008808:	4a0a      	ldr	r2, [pc, #40]	; (10008834 <gpio_init+0x54>)
1000880a:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000880c:	490a      	ldr	r1, [pc, #40]	; (10008838 <gpio_init+0x58>)
1000880e:	2290      	movs	r2, #144	; 0x90
10008810:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
10008812:	490a      	ldr	r1, [pc, #40]	; (1000883c <gpio_init+0x5c>)
10008814:	2027      	movs	r0, #39	; 0x27
10008816:	4c0a      	ldr	r4, [pc, #40]	; (10008840 <gpio_init+0x60>)
10008818:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000881a:	490a      	ldr	r1, [pc, #40]	; (10008844 <gpio_init+0x64>)
1000881c:	2028      	movs	r0, #40	; 0x28
1000881e:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
10008820:	4909      	ldr	r1, [pc, #36]	; (10008848 <gpio_init+0x68>)
10008822:	2029      	movs	r0, #41	; 0x29
10008824:	47a0      	blx	r4
}
10008826:	bd10      	pop	{r4, pc}
10008828:	100152b4 	.word	0x100152b4
1000882c:	10015270 	.word	0x10015270
10008830:	40010000 	.word	0x40010000
10008834:	40011000 	.word	0x40011000
10008838:	40013000 	.word	0x40013000
1000883c:	100080e9 	.word	0x100080e9
10008840:	100090a1 	.word	0x100090a1
10008844:	1000814d 	.word	0x1000814d
10008848:	100081bd 	.word	0x100081bd

1000884c <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000884c:	2801      	cmp	r0, #1
1000884e:	d00d      	beq.n	1000886c <system_clock_config+0x20>
10008850:	2800      	cmp	r0, #0
10008852:	d002      	beq.n	1000885a <system_clock_config+0xe>
10008854:	2802      	cmp	r0, #2
10008856:	d01c      	beq.n	10008892 <system_clock_config+0x46>
10008858:	e02e      	b.n	100088b8 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000885a:	4a18      	ldr	r2, [pc, #96]	; (100088bc <system_clock_config+0x70>)
1000885c:	6990      	ldr	r0, [r2, #24]
1000885e:	230c      	movs	r3, #12
10008860:	4303      	orrs	r3, r0
10008862:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
10008864:	4a16      	ldr	r2, [pc, #88]	; (100088c0 <system_clock_config+0x74>)
10008866:	4b17      	ldr	r3, [pc, #92]	; (100088c4 <system_clock_config+0x78>)
10008868:	601a      	str	r2, [r3, #0]
			break;
1000886a:	e01a      	b.n	100088a2 <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000886c:	4b13      	ldr	r3, [pc, #76]	; (100088bc <system_clock_config+0x70>)
1000886e:	6998      	ldr	r0, [r3, #24]
10008870:	2208      	movs	r2, #8
10008872:	4302      	orrs	r2, r0
10008874:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
10008876:	699a      	ldr	r2, [r3, #24]
10008878:	2004      	movs	r0, #4
1000887a:	4382      	bics	r2, r0
1000887c:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000887e:	4a12      	ldr	r2, [pc, #72]	; (100088c8 <system_clock_config+0x7c>)
10008880:	6853      	ldr	r3, [r2, #4]
10008882:	2080      	movs	r0, #128	; 0x80
10008884:	0300      	lsls	r0, r0, #12
10008886:	4303      	orrs	r3, r0
10008888:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000888a:	4a10      	ldr	r2, [pc, #64]	; (100088cc <system_clock_config+0x80>)
1000888c:	4b0d      	ldr	r3, [pc, #52]	; (100088c4 <system_clock_config+0x78>)
1000888e:	601a      	str	r2, [r3, #0]
			break;
10008890:	e007      	b.n	100088a2 <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
10008892:	4a0a      	ldr	r2, [pc, #40]	; (100088bc <system_clock_config+0x70>)
10008894:	6993      	ldr	r3, [r2, #24]
10008896:	200c      	movs	r0, #12
10008898:	4383      	bics	r3, r0
1000889a:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000889c:	4a08      	ldr	r2, [pc, #32]	; (100088c0 <system_clock_config+0x74>)
1000889e:	4b09      	ldr	r3, [pc, #36]	; (100088c4 <system_clock_config+0x78>)
100088a0:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
100088a2:	4b06      	ldr	r3, [pc, #24]	; (100088bc <system_clock_config+0x70>)
100088a4:	699a      	ldr	r2, [r3, #24]
100088a6:	2003      	movs	r0, #3
100088a8:	4382      	bics	r2, r0
100088aa:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
100088ac:	699a      	ldr	r2, [r3, #24]
100088ae:	4001      	ands	r1, r0
100088b0:	4311      	orrs	r1, r2
100088b2:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
100088b4:	2000      	movs	r0, #0
100088b6:	e000      	b.n	100088ba <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
100088b8:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
100088ba:	4770      	bx	lr
100088bc:	4000b000 	.word	0x4000b000
100088c0:	018cba80 	.word	0x018cba80
100088c4:	10015348 	.word	0x10015348
100088c8:	4000f000 	.word	0x4000f000
100088cc:	001e8480 	.word	0x001e8480

100088d0 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
100088d0:	4b01      	ldr	r3, [pc, #4]	; (100088d8 <system_clock_get_value+0x8>)
100088d2:	6818      	ldr	r0, [r3, #0]
}
100088d4:	4770      	bx	lr
100088d6:	46c0      	nop			; (mov r8, r8)
100088d8:	10015348 	.word	0x10015348

100088dc <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
100088dc:	b500      	push	{lr}
	switch (peripheral) {
100088de:	2835      	cmp	r0, #53	; 0x35
100088e0:	d900      	bls.n	100088e4 <system_clock_peripheral_enable+0x8>
100088e2:	e1a2      	b.n	10008c2a <system_clock_peripheral_enable+0x34e>
100088e4:	0080      	lsls	r0, r0, #2
100088e6:	4bd2      	ldr	r3, [pc, #840]	; (10008c30 <system_clock_peripheral_enable+0x354>)
100088e8:	581b      	ldr	r3, [r3, r0]
100088ea:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100088ec:	4ad1      	ldr	r2, [pc, #836]	; (10008c34 <system_clock_peripheral_enable+0x358>)
100088ee:	68d1      	ldr	r1, [r2, #12]
100088f0:	2302      	movs	r3, #2
100088f2:	430b      	orrs	r3, r1
100088f4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100088f6:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
100088f8:	e198      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100088fa:	4ace      	ldr	r2, [pc, #824]	; (10008c34 <system_clock_peripheral_enable+0x358>)
100088fc:	68d1      	ldr	r1, [r2, #12]
100088fe:	2304      	movs	r3, #4
10008900:	430b      	orrs	r3, r1
10008902:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008904:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
10008906:	e191      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008908:	4aca      	ldr	r2, [pc, #808]	; (10008c34 <system_clock_peripheral_enable+0x358>)
1000890a:	68d1      	ldr	r1, [r2, #12]
1000890c:	2308      	movs	r3, #8
1000890e:	430b      	orrs	r3, r1
10008910:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008912:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
10008914:	e18a      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008916:	4ac7      	ldr	r2, [pc, #796]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008918:	68d1      	ldr	r1, [r2, #12]
1000891a:	2310      	movs	r3, #16
1000891c:	430b      	orrs	r3, r1
1000891e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008920:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
10008922:	e183      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008924:	4ac3      	ldr	r2, [pc, #780]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008926:	68d1      	ldr	r1, [r2, #12]
10008928:	2320      	movs	r3, #32
1000892a:	430b      	orrs	r3, r1
1000892c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000892e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
10008930:	e17c      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008932:	4ac0      	ldr	r2, [pc, #768]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008934:	68d1      	ldr	r1, [r2, #12]
10008936:	2380      	movs	r3, #128	; 0x80
10008938:	430b      	orrs	r3, r1
1000893a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000893c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000893e:	e175      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008940:	4abc      	ldr	r2, [pc, #752]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008942:	68d3      	ldr	r3, [r2, #12]
10008944:	2180      	movs	r1, #128	; 0x80
10008946:	0049      	lsls	r1, r1, #1
10008948:	430b      	orrs	r3, r1
1000894a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000894c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000894e:	e16d      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008950:	4ab8      	ldr	r2, [pc, #736]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008952:	68d3      	ldr	r3, [r2, #12]
10008954:	2180      	movs	r1, #128	; 0x80
10008956:	0109      	lsls	r1, r1, #4
10008958:	430b      	orrs	r3, r1
1000895a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000895c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000895e:	e165      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008960:	4ab4      	ldr	r2, [pc, #720]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008962:	68d3      	ldr	r3, [r2, #12]
10008964:	2180      	movs	r1, #128	; 0x80
10008966:	0149      	lsls	r1, r1, #5
10008968:	430b      	orrs	r3, r1
1000896a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000896c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000896e:	e15d      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008970:	4ab0      	ldr	r2, [pc, #704]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008972:	68d3      	ldr	r3, [r2, #12]
10008974:	2180      	movs	r1, #128	; 0x80
10008976:	0189      	lsls	r1, r1, #6
10008978:	430b      	orrs	r3, r1
1000897a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000897c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000897e:	e155      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008980:	4aac      	ldr	r2, [pc, #688]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008982:	68d3      	ldr	r3, [r2, #12]
10008984:	2180      	movs	r1, #128	; 0x80
10008986:	01c9      	lsls	r1, r1, #7
10008988:	430b      	orrs	r3, r1
1000898a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000898c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000898e:	e14d      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008990:	4aa8      	ldr	r2, [pc, #672]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008992:	68d3      	ldr	r3, [r2, #12]
10008994:	2180      	movs	r1, #128	; 0x80
10008996:	0209      	lsls	r1, r1, #8
10008998:	430b      	orrs	r3, r1
1000899a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000899c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000899e:	e145      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089a0:	4aa4      	ldr	r2, [pc, #656]	; (10008c34 <system_clock_peripheral_enable+0x358>)
100089a2:	68d3      	ldr	r3, [r2, #12]
100089a4:	2180      	movs	r1, #128	; 0x80
100089a6:	0249      	lsls	r1, r1, #9
100089a8:	430b      	orrs	r3, r1
100089aa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089ac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
100089ae:	e13d      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089b0:	4aa0      	ldr	r2, [pc, #640]	; (10008c34 <system_clock_peripheral_enable+0x358>)
100089b2:	68d3      	ldr	r3, [r2, #12]
100089b4:	2180      	movs	r1, #128	; 0x80
100089b6:	0289      	lsls	r1, r1, #10
100089b8:	430b      	orrs	r3, r1
100089ba:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089bc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
100089be:	e135      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089c0:	4a9c      	ldr	r2, [pc, #624]	; (10008c34 <system_clock_peripheral_enable+0x358>)
100089c2:	68d3      	ldr	r3, [r2, #12]
100089c4:	2180      	movs	r1, #128	; 0x80
100089c6:	02c9      	lsls	r1, r1, #11
100089c8:	430b      	orrs	r3, r1
100089ca:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089cc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
100089ce:	e12d      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089d0:	4a98      	ldr	r2, [pc, #608]	; (10008c34 <system_clock_peripheral_enable+0x358>)
100089d2:	68d3      	ldr	r3, [r2, #12]
100089d4:	2180      	movs	r1, #128	; 0x80
100089d6:	0309      	lsls	r1, r1, #12
100089d8:	430b      	orrs	r3, r1
100089da:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089dc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
100089de:	e125      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089e0:	4a94      	ldr	r2, [pc, #592]	; (10008c34 <system_clock_peripheral_enable+0x358>)
100089e2:	68d3      	ldr	r3, [r2, #12]
100089e4:	2180      	movs	r1, #128	; 0x80
100089e6:	0349      	lsls	r1, r1, #13
100089e8:	430b      	orrs	r3, r1
100089ea:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089ec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
100089ee:	e11d      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100089f0:	4a90      	ldr	r2, [pc, #576]	; (10008c34 <system_clock_peripheral_enable+0x358>)
100089f2:	68d3      	ldr	r3, [r2, #12]
100089f4:	2180      	movs	r1, #128	; 0x80
100089f6:	0389      	lsls	r1, r1, #14
100089f8:	430b      	orrs	r3, r1
100089fa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100089fc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
100089fe:	e115      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a00:	4a8c      	ldr	r2, [pc, #560]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008a02:	68d3      	ldr	r3, [r2, #12]
10008a04:	2180      	movs	r1, #128	; 0x80
10008a06:	03c9      	lsls	r1, r1, #15
10008a08:	430b      	orrs	r3, r1
10008a0a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a0c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
10008a0e:	e10d      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a10:	4a88      	ldr	r2, [pc, #544]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008a12:	68d3      	ldr	r3, [r2, #12]
10008a14:	2180      	movs	r1, #128	; 0x80
10008a16:	0409      	lsls	r1, r1, #16
10008a18:	430b      	orrs	r3, r1
10008a1a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a1c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
10008a1e:	e105      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a20:	4a84      	ldr	r2, [pc, #528]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008a22:	68d3      	ldr	r3, [r2, #12]
10008a24:	2180      	movs	r1, #128	; 0x80
10008a26:	0449      	lsls	r1, r1, #17
10008a28:	430b      	orrs	r3, r1
10008a2a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a2c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
10008a2e:	e0fd      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a30:	4a80      	ldr	r2, [pc, #512]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008a32:	68d3      	ldr	r3, [r2, #12]
10008a34:	2180      	movs	r1, #128	; 0x80
10008a36:	0489      	lsls	r1, r1, #18
10008a38:	430b      	orrs	r3, r1
10008a3a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a3c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
10008a3e:	e0f5      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a40:	4a7c      	ldr	r2, [pc, #496]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008a42:	68d3      	ldr	r3, [r2, #12]
10008a44:	2180      	movs	r1, #128	; 0x80
10008a46:	04c9      	lsls	r1, r1, #19
10008a48:	430b      	orrs	r3, r1
10008a4a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a4c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
10008a4e:	e0ed      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a50:	4a78      	ldr	r2, [pc, #480]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008a52:	68d3      	ldr	r3, [r2, #12]
10008a54:	2180      	movs	r1, #128	; 0x80
10008a56:	0509      	lsls	r1, r1, #20
10008a58:	430b      	orrs	r3, r1
10008a5a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a5c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
10008a5e:	e0e5      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a60:	4a74      	ldr	r2, [pc, #464]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008a62:	68d3      	ldr	r3, [r2, #12]
10008a64:	2180      	movs	r1, #128	; 0x80
10008a66:	0549      	lsls	r1, r1, #21
10008a68:	430b      	orrs	r3, r1
10008a6a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a6c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
10008a6e:	e0dd      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a70:	4a70      	ldr	r2, [pc, #448]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008a72:	68d3      	ldr	r3, [r2, #12]
10008a74:	2180      	movs	r1, #128	; 0x80
10008a76:	0589      	lsls	r1, r1, #22
10008a78:	430b      	orrs	r3, r1
10008a7a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a7c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
10008a7e:	e0d5      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008a80:	4a6c      	ldr	r2, [pc, #432]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008a82:	68d3      	ldr	r3, [r2, #12]
10008a84:	2180      	movs	r1, #128	; 0x80
10008a86:	05c9      	lsls	r1, r1, #23
10008a88:	430b      	orrs	r3, r1
10008a8a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a8c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
10008a8e:	e0cd      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a90:	4a68      	ldr	r2, [pc, #416]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008a92:	6911      	ldr	r1, [r2, #16]
10008a94:	2301      	movs	r3, #1
10008a96:	430b      	orrs	r3, r1
10008a98:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008a9a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
10008a9c:	e0c6      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008a9e:	4a65      	ldr	r2, [pc, #404]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008aa0:	6911      	ldr	r1, [r2, #16]
10008aa2:	2302      	movs	r3, #2
10008aa4:	430b      	orrs	r3, r1
10008aa6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008aa8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
10008aaa:	e0bf      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008aac:	4a61      	ldr	r2, [pc, #388]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008aae:	6911      	ldr	r1, [r2, #16]
10008ab0:	2304      	movs	r3, #4
10008ab2:	430b      	orrs	r3, r1
10008ab4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ab6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
10008ab8:	e0b8      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008aba:	4a5e      	ldr	r2, [pc, #376]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008abc:	6911      	ldr	r1, [r2, #16]
10008abe:	2308      	movs	r3, #8
10008ac0:	430b      	orrs	r3, r1
10008ac2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ac4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
10008ac6:	e0b1      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008ac8:	4a5a      	ldr	r2, [pc, #360]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008aca:	6911      	ldr	r1, [r2, #16]
10008acc:	2310      	movs	r3, #16
10008ace:	430b      	orrs	r3, r1
10008ad0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ad2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
10008ad4:	e0aa      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008ad6:	4a57      	ldr	r2, [pc, #348]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008ad8:	6911      	ldr	r1, [r2, #16]
10008ada:	2320      	movs	r3, #32
10008adc:	430b      	orrs	r3, r1
10008ade:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ae0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
10008ae2:	e0a3      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008ae4:	4a53      	ldr	r2, [pc, #332]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008ae6:	6911      	ldr	r1, [r2, #16]
10008ae8:	2340      	movs	r3, #64	; 0x40
10008aea:	430b      	orrs	r3, r1
10008aec:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008aee:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
10008af0:	e09c      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008af2:	4a50      	ldr	r2, [pc, #320]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008af4:	6911      	ldr	r1, [r2, #16]
10008af6:	2380      	movs	r3, #128	; 0x80
10008af8:	430b      	orrs	r3, r1
10008afa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008afc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
10008afe:	e095      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b00:	4a4c      	ldr	r2, [pc, #304]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008b02:	6913      	ldr	r3, [r2, #16]
10008b04:	2180      	movs	r1, #128	; 0x80
10008b06:	0049      	lsls	r1, r1, #1
10008b08:	430b      	orrs	r3, r1
10008b0a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b0c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
10008b0e:	e08d      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b10:	4a48      	ldr	r2, [pc, #288]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008b12:	6913      	ldr	r3, [r2, #16]
10008b14:	2180      	movs	r1, #128	; 0x80
10008b16:	0089      	lsls	r1, r1, #2
10008b18:	430b      	orrs	r3, r1
10008b1a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b1c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
10008b1e:	e085      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b20:	4a44      	ldr	r2, [pc, #272]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008b22:	6913      	ldr	r3, [r2, #16]
10008b24:	2180      	movs	r1, #128	; 0x80
10008b26:	00c9      	lsls	r1, r1, #3
10008b28:	430b      	orrs	r3, r1
10008b2a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b2c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
10008b2e:	e07d      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b30:	4a40      	ldr	r2, [pc, #256]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008b32:	6913      	ldr	r3, [r2, #16]
10008b34:	2180      	movs	r1, #128	; 0x80
10008b36:	0109      	lsls	r1, r1, #4
10008b38:	430b      	orrs	r3, r1
10008b3a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b3c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
10008b3e:	e075      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b40:	4a3c      	ldr	r2, [pc, #240]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008b42:	6913      	ldr	r3, [r2, #16]
10008b44:	2180      	movs	r1, #128	; 0x80
10008b46:	0149      	lsls	r1, r1, #5
10008b48:	430b      	orrs	r3, r1
10008b4a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b4c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
10008b4e:	e06d      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b50:	4a38      	ldr	r2, [pc, #224]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008b52:	6913      	ldr	r3, [r2, #16]
10008b54:	2180      	movs	r1, #128	; 0x80
10008b56:	0189      	lsls	r1, r1, #6
10008b58:	430b      	orrs	r3, r1
10008b5a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b5c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
10008b5e:	e065      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b60:	4a34      	ldr	r2, [pc, #208]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008b62:	6913      	ldr	r3, [r2, #16]
10008b64:	2180      	movs	r1, #128	; 0x80
10008b66:	01c9      	lsls	r1, r1, #7
10008b68:	430b      	orrs	r3, r1
10008b6a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b6c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
10008b6e:	e05d      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b70:	4a30      	ldr	r2, [pc, #192]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008b72:	6913      	ldr	r3, [r2, #16]
10008b74:	2180      	movs	r1, #128	; 0x80
10008b76:	0209      	lsls	r1, r1, #8
10008b78:	430b      	orrs	r3, r1
10008b7a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b7c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
10008b7e:	e055      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b80:	4a2c      	ldr	r2, [pc, #176]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008b82:	6913      	ldr	r3, [r2, #16]
10008b84:	2180      	movs	r1, #128	; 0x80
10008b86:	0249      	lsls	r1, r1, #9
10008b88:	430b      	orrs	r3, r1
10008b8a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b8c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
10008b8e:	e04d      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008b90:	4a28      	ldr	r2, [pc, #160]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008b92:	6913      	ldr	r3, [r2, #16]
10008b94:	2180      	movs	r1, #128	; 0x80
10008b96:	0289      	lsls	r1, r1, #10
10008b98:	430b      	orrs	r3, r1
10008b9a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008b9c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
10008b9e:	e045      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008ba0:	4a24      	ldr	r2, [pc, #144]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008ba2:	6913      	ldr	r3, [r2, #16]
10008ba4:	2180      	movs	r1, #128	; 0x80
10008ba6:	02c9      	lsls	r1, r1, #11
10008ba8:	430b      	orrs	r3, r1
10008baa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
10008bae:	e03d      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008bb0:	4a20      	ldr	r2, [pc, #128]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008bb2:	6913      	ldr	r3, [r2, #16]
10008bb4:	2180      	movs	r1, #128	; 0x80
10008bb6:	0309      	lsls	r1, r1, #12
10008bb8:	430b      	orrs	r3, r1
10008bba:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bbc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
10008bbe:	e035      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008bc0:	4a1c      	ldr	r2, [pc, #112]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008bc2:	6913      	ldr	r3, [r2, #16]
10008bc4:	2180      	movs	r1, #128	; 0x80
10008bc6:	0349      	lsls	r1, r1, #13
10008bc8:	430b      	orrs	r3, r1
10008bca:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bcc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
10008bce:	e02d      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008bd0:	4a18      	ldr	r2, [pc, #96]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008bd2:	6913      	ldr	r3, [r2, #16]
10008bd4:	2180      	movs	r1, #128	; 0x80
10008bd6:	0389      	lsls	r1, r1, #14
10008bd8:	430b      	orrs	r3, r1
10008bda:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bdc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
10008bde:	e025      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008be0:	4a14      	ldr	r2, [pc, #80]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008be2:	6913      	ldr	r3, [r2, #16]
10008be4:	2180      	movs	r1, #128	; 0x80
10008be6:	03c9      	lsls	r1, r1, #15
10008be8:	430b      	orrs	r3, r1
10008bea:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
10008bee:	e01d      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008bf0:	4a10      	ldr	r2, [pc, #64]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008bf2:	6913      	ldr	r3, [r2, #16]
10008bf4:	2180      	movs	r1, #128	; 0x80
10008bf6:	0409      	lsls	r1, r1, #16
10008bf8:	430b      	orrs	r3, r1
10008bfa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008bfc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
10008bfe:	e015      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
10008c00:	4a0c      	ldr	r2, [pc, #48]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008c02:	7d11      	ldrb	r1, [r2, #20]
10008c04:	2301      	movs	r3, #1
10008c06:	430b      	orrs	r3, r1
10008c08:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c0a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
10008c0c:	e00e      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
10008c0e:	4a09      	ldr	r2, [pc, #36]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008c10:	7d11      	ldrb	r1, [r2, #20]
10008c12:	2302      	movs	r3, #2
10008c14:	430b      	orrs	r3, r1
10008c16:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c18:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
10008c1a:	e007      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
10008c1c:	4a05      	ldr	r2, [pc, #20]	; (10008c34 <system_clock_peripheral_enable+0x358>)
10008c1e:	7d11      	ldrb	r1, [r2, #20]
10008c20:	2304      	movs	r3, #4
10008c22:	430b      	orrs	r3, r1
10008c24:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c26:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
10008c28:	e000      	b.n	10008c2c <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
10008c2a:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10008c2c:	bd00      	pop	{pc}
10008c2e:	46c0      	nop			; (mov r8, r8)
10008c30:	10012094 	.word	0x10012094
10008c34:	4000b000 	.word	0x4000b000

10008c38 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
10008c38:	b500      	push	{lr}
	switch (peripheral) {
10008c3a:	2843      	cmp	r0, #67	; 0x43
10008c3c:	d900      	bls.n	10008c40 <system_peripheral_reset+0x8>
10008c3e:	e223      	b.n	10009088 <system_peripheral_reset+0x450>
10008c40:	0080      	lsls	r0, r0, #2
10008c42:	4be0      	ldr	r3, [pc, #896]	; (10008fc4 <system_peripheral_reset+0x38c>)
10008c44:	581b      	ldr	r3, [r3, r0]
10008c46:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008c48:	4bdf      	ldr	r3, [pc, #892]	; (10008fc8 <system_peripheral_reset+0x390>)
10008c4a:	6859      	ldr	r1, [r3, #4]
10008c4c:	2202      	movs	r2, #2
10008c4e:	4391      	bics	r1, r2
10008c50:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008c52:	6859      	ldr	r1, [r3, #4]
10008c54:	430a      	orrs	r2, r1
10008c56:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c58:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
10008c5a:	e216      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008c5c:	4bda      	ldr	r3, [pc, #872]	; (10008fc8 <system_peripheral_reset+0x390>)
10008c5e:	6859      	ldr	r1, [r3, #4]
10008c60:	2204      	movs	r2, #4
10008c62:	4391      	bics	r1, r2
10008c64:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008c66:	6859      	ldr	r1, [r3, #4]
10008c68:	430a      	orrs	r2, r1
10008c6a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c6c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
10008c6e:	e20c      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008c70:	4bd5      	ldr	r3, [pc, #852]	; (10008fc8 <system_peripheral_reset+0x390>)
10008c72:	6859      	ldr	r1, [r3, #4]
10008c74:	2208      	movs	r2, #8
10008c76:	4391      	bics	r1, r2
10008c78:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008c7a:	6859      	ldr	r1, [r3, #4]
10008c7c:	430a      	orrs	r2, r1
10008c7e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c80:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
10008c82:	e202      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008c84:	4bd0      	ldr	r3, [pc, #832]	; (10008fc8 <system_peripheral_reset+0x390>)
10008c86:	6859      	ldr	r1, [r3, #4]
10008c88:	2210      	movs	r2, #16
10008c8a:	4391      	bics	r1, r2
10008c8c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008c8e:	6859      	ldr	r1, [r3, #4]
10008c90:	430a      	orrs	r2, r1
10008c92:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008c94:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
10008c96:	e1f8      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008c98:	4bcb      	ldr	r3, [pc, #812]	; (10008fc8 <system_peripheral_reset+0x390>)
10008c9a:	6859      	ldr	r1, [r3, #4]
10008c9c:	2220      	movs	r2, #32
10008c9e:	4391      	bics	r1, r2
10008ca0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008ca2:	6859      	ldr	r1, [r3, #4]
10008ca4:	430a      	orrs	r2, r1
10008ca6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ca8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
10008caa:	e1ee      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008cac:	4bc6      	ldr	r3, [pc, #792]	; (10008fc8 <system_peripheral_reset+0x390>)
10008cae:	6859      	ldr	r1, [r3, #4]
10008cb0:	2240      	movs	r2, #64	; 0x40
10008cb2:	4391      	bics	r1, r2
10008cb4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008cb6:	6859      	ldr	r1, [r3, #4]
10008cb8:	430a      	orrs	r2, r1
10008cba:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cbc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
10008cbe:	e1e4      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008cc0:	4bc1      	ldr	r3, [pc, #772]	; (10008fc8 <system_peripheral_reset+0x390>)
10008cc2:	6859      	ldr	r1, [r3, #4]
10008cc4:	2280      	movs	r2, #128	; 0x80
10008cc6:	4391      	bics	r1, r2
10008cc8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008cca:	6859      	ldr	r1, [r3, #4]
10008ccc:	430a      	orrs	r2, r1
10008cce:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008cd0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
10008cd2:	e1da      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008cd4:	4bbc      	ldr	r3, [pc, #752]	; (10008fc8 <system_peripheral_reset+0x390>)
10008cd6:	6859      	ldr	r1, [r3, #4]
10008cd8:	4abc      	ldr	r2, [pc, #752]	; (10008fcc <system_peripheral_reset+0x394>)
10008cda:	400a      	ands	r2, r1
10008cdc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008cde:	685a      	ldr	r2, [r3, #4]
10008ce0:	2180      	movs	r1, #128	; 0x80
10008ce2:	0049      	lsls	r1, r1, #1
10008ce4:	430a      	orrs	r2, r1
10008ce6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ce8:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
10008cea:	e1ce      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008cec:	4bb6      	ldr	r3, [pc, #728]	; (10008fc8 <system_peripheral_reset+0x390>)
10008cee:	6859      	ldr	r1, [r3, #4]
10008cf0:	4ab7      	ldr	r2, [pc, #732]	; (10008fd0 <system_peripheral_reset+0x398>)
10008cf2:	400a      	ands	r2, r1
10008cf4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008cf6:	685a      	ldr	r2, [r3, #4]
10008cf8:	2180      	movs	r1, #128	; 0x80
10008cfa:	0089      	lsls	r1, r1, #2
10008cfc:	430a      	orrs	r2, r1
10008cfe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d00:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
10008d02:	e1c2      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d04:	4bb0      	ldr	r3, [pc, #704]	; (10008fc8 <system_peripheral_reset+0x390>)
10008d06:	6859      	ldr	r1, [r3, #4]
10008d08:	4ab2      	ldr	r2, [pc, #712]	; (10008fd4 <system_peripheral_reset+0x39c>)
10008d0a:	400a      	ands	r2, r1
10008d0c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d0e:	685a      	ldr	r2, [r3, #4]
10008d10:	2180      	movs	r1, #128	; 0x80
10008d12:	00c9      	lsls	r1, r1, #3
10008d14:	430a      	orrs	r2, r1
10008d16:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d18:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
10008d1a:	e1b6      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d1c:	4baa      	ldr	r3, [pc, #680]	; (10008fc8 <system_peripheral_reset+0x390>)
10008d1e:	6859      	ldr	r1, [r3, #4]
10008d20:	4aad      	ldr	r2, [pc, #692]	; (10008fd8 <system_peripheral_reset+0x3a0>)
10008d22:	400a      	ands	r2, r1
10008d24:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d26:	685a      	ldr	r2, [r3, #4]
10008d28:	2180      	movs	r1, #128	; 0x80
10008d2a:	0109      	lsls	r1, r1, #4
10008d2c:	430a      	orrs	r2, r1
10008d2e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d30:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
10008d32:	e1aa      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d34:	4ba4      	ldr	r3, [pc, #656]	; (10008fc8 <system_peripheral_reset+0x390>)
10008d36:	6859      	ldr	r1, [r3, #4]
10008d38:	4aa8      	ldr	r2, [pc, #672]	; (10008fdc <system_peripheral_reset+0x3a4>)
10008d3a:	400a      	ands	r2, r1
10008d3c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d3e:	685a      	ldr	r2, [r3, #4]
10008d40:	2180      	movs	r1, #128	; 0x80
10008d42:	0149      	lsls	r1, r1, #5
10008d44:	430a      	orrs	r2, r1
10008d46:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d48:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
10008d4a:	e19e      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d4c:	4b9e      	ldr	r3, [pc, #632]	; (10008fc8 <system_peripheral_reset+0x390>)
10008d4e:	6859      	ldr	r1, [r3, #4]
10008d50:	4aa3      	ldr	r2, [pc, #652]	; (10008fe0 <system_peripheral_reset+0x3a8>)
10008d52:	400a      	ands	r2, r1
10008d54:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d56:	685a      	ldr	r2, [r3, #4]
10008d58:	2180      	movs	r1, #128	; 0x80
10008d5a:	0189      	lsls	r1, r1, #6
10008d5c:	430a      	orrs	r2, r1
10008d5e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d60:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
10008d62:	e192      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d64:	4b98      	ldr	r3, [pc, #608]	; (10008fc8 <system_peripheral_reset+0x390>)
10008d66:	6859      	ldr	r1, [r3, #4]
10008d68:	4a9e      	ldr	r2, [pc, #632]	; (10008fe4 <system_peripheral_reset+0x3ac>)
10008d6a:	400a      	ands	r2, r1
10008d6c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d6e:	685a      	ldr	r2, [r3, #4]
10008d70:	2180      	movs	r1, #128	; 0x80
10008d72:	01c9      	lsls	r1, r1, #7
10008d74:	430a      	orrs	r2, r1
10008d76:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d78:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
10008d7a:	e186      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d7c:	4b92      	ldr	r3, [pc, #584]	; (10008fc8 <system_peripheral_reset+0x390>)
10008d7e:	6859      	ldr	r1, [r3, #4]
10008d80:	4a99      	ldr	r2, [pc, #612]	; (10008fe8 <system_peripheral_reset+0x3b0>)
10008d82:	400a      	ands	r2, r1
10008d84:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d86:	685a      	ldr	r2, [r3, #4]
10008d88:	2180      	movs	r1, #128	; 0x80
10008d8a:	0209      	lsls	r1, r1, #8
10008d8c:	430a      	orrs	r2, r1
10008d8e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008d90:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
10008d92:	e17a      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008d94:	4b8c      	ldr	r3, [pc, #560]	; (10008fc8 <system_peripheral_reset+0x390>)
10008d96:	6859      	ldr	r1, [r3, #4]
10008d98:	4a94      	ldr	r2, [pc, #592]	; (10008fec <system_peripheral_reset+0x3b4>)
10008d9a:	400a      	ands	r2, r1
10008d9c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008d9e:	685a      	ldr	r2, [r3, #4]
10008da0:	2180      	movs	r1, #128	; 0x80
10008da2:	0249      	lsls	r1, r1, #9
10008da4:	430a      	orrs	r2, r1
10008da6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008da8:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
10008daa:	e16e      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008dac:	4b86      	ldr	r3, [pc, #536]	; (10008fc8 <system_peripheral_reset+0x390>)
10008dae:	6859      	ldr	r1, [r3, #4]
10008db0:	4a8f      	ldr	r2, [pc, #572]	; (10008ff0 <system_peripheral_reset+0x3b8>)
10008db2:	400a      	ands	r2, r1
10008db4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008db6:	685a      	ldr	r2, [r3, #4]
10008db8:	2180      	movs	r1, #128	; 0x80
10008dba:	0289      	lsls	r1, r1, #10
10008dbc:	430a      	orrs	r2, r1
10008dbe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008dc0:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
10008dc2:	e162      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008dc4:	4b80      	ldr	r3, [pc, #512]	; (10008fc8 <system_peripheral_reset+0x390>)
10008dc6:	6859      	ldr	r1, [r3, #4]
10008dc8:	4a8a      	ldr	r2, [pc, #552]	; (10008ff4 <system_peripheral_reset+0x3bc>)
10008dca:	400a      	ands	r2, r1
10008dcc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008dce:	685a      	ldr	r2, [r3, #4]
10008dd0:	2180      	movs	r1, #128	; 0x80
10008dd2:	02c9      	lsls	r1, r1, #11
10008dd4:	430a      	orrs	r2, r1
10008dd6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008dd8:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
10008dda:	e156      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008ddc:	4b7a      	ldr	r3, [pc, #488]	; (10008fc8 <system_peripheral_reset+0x390>)
10008dde:	6859      	ldr	r1, [r3, #4]
10008de0:	4a85      	ldr	r2, [pc, #532]	; (10008ff8 <system_peripheral_reset+0x3c0>)
10008de2:	400a      	ands	r2, r1
10008de4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008de6:	685a      	ldr	r2, [r3, #4]
10008de8:	2180      	movs	r1, #128	; 0x80
10008dea:	0309      	lsls	r1, r1, #12
10008dec:	430a      	orrs	r2, r1
10008dee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008df0:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
10008df2:	e14a      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008df4:	4b74      	ldr	r3, [pc, #464]	; (10008fc8 <system_peripheral_reset+0x390>)
10008df6:	6859      	ldr	r1, [r3, #4]
10008df8:	4a80      	ldr	r2, [pc, #512]	; (10008ffc <system_peripheral_reset+0x3c4>)
10008dfa:	400a      	ands	r2, r1
10008dfc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008dfe:	685a      	ldr	r2, [r3, #4]
10008e00:	2180      	movs	r1, #128	; 0x80
10008e02:	0349      	lsls	r1, r1, #13
10008e04:	430a      	orrs	r2, r1
10008e06:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e08:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
10008e0a:	e13e      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008e0c:	4b6e      	ldr	r3, [pc, #440]	; (10008fc8 <system_peripheral_reset+0x390>)
10008e0e:	6859      	ldr	r1, [r3, #4]
10008e10:	4a7b      	ldr	r2, [pc, #492]	; (10009000 <system_peripheral_reset+0x3c8>)
10008e12:	400a      	ands	r2, r1
10008e14:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008e16:	685a      	ldr	r2, [r3, #4]
10008e18:	2180      	movs	r1, #128	; 0x80
10008e1a:	0389      	lsls	r1, r1, #14
10008e1c:	430a      	orrs	r2, r1
10008e1e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e20:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
10008e22:	e132      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008e24:	4b68      	ldr	r3, [pc, #416]	; (10008fc8 <system_peripheral_reset+0x390>)
10008e26:	6859      	ldr	r1, [r3, #4]
10008e28:	4a76      	ldr	r2, [pc, #472]	; (10009004 <system_peripheral_reset+0x3cc>)
10008e2a:	400a      	ands	r2, r1
10008e2c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008e2e:	685a      	ldr	r2, [r3, #4]
10008e30:	2180      	movs	r1, #128	; 0x80
10008e32:	03c9      	lsls	r1, r1, #15
10008e34:	430a      	orrs	r2, r1
10008e36:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e38:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
10008e3a:	e126      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008e3c:	4b62      	ldr	r3, [pc, #392]	; (10008fc8 <system_peripheral_reset+0x390>)
10008e3e:	6859      	ldr	r1, [r3, #4]
10008e40:	4a71      	ldr	r2, [pc, #452]	; (10009008 <system_peripheral_reset+0x3d0>)
10008e42:	400a      	ands	r2, r1
10008e44:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008e46:	685a      	ldr	r2, [r3, #4]
10008e48:	2180      	movs	r1, #128	; 0x80
10008e4a:	0409      	lsls	r1, r1, #16
10008e4c:	430a      	orrs	r2, r1
10008e4e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e50:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
10008e52:	e11a      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008e54:	4b5c      	ldr	r3, [pc, #368]	; (10008fc8 <system_peripheral_reset+0x390>)
10008e56:	6859      	ldr	r1, [r3, #4]
10008e58:	4a6c      	ldr	r2, [pc, #432]	; (1000900c <system_peripheral_reset+0x3d4>)
10008e5a:	400a      	ands	r2, r1
10008e5c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008e5e:	685a      	ldr	r2, [r3, #4]
10008e60:	2180      	movs	r1, #128	; 0x80
10008e62:	0449      	lsls	r1, r1, #17
10008e64:	430a      	orrs	r2, r1
10008e66:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e68:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
10008e6a:	e10e      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008e6c:	4b56      	ldr	r3, [pc, #344]	; (10008fc8 <system_peripheral_reset+0x390>)
10008e6e:	6859      	ldr	r1, [r3, #4]
10008e70:	4a67      	ldr	r2, [pc, #412]	; (10009010 <system_peripheral_reset+0x3d8>)
10008e72:	400a      	ands	r2, r1
10008e74:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008e76:	685a      	ldr	r2, [r3, #4]
10008e78:	2180      	movs	r1, #128	; 0x80
10008e7a:	0489      	lsls	r1, r1, #18
10008e7c:	430a      	orrs	r2, r1
10008e7e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e80:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
10008e82:	e102      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008e84:	4b50      	ldr	r3, [pc, #320]	; (10008fc8 <system_peripheral_reset+0x390>)
10008e86:	6859      	ldr	r1, [r3, #4]
10008e88:	4a62      	ldr	r2, [pc, #392]	; (10009014 <system_peripheral_reset+0x3dc>)
10008e8a:	400a      	ands	r2, r1
10008e8c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008e8e:	685a      	ldr	r2, [r3, #4]
10008e90:	2180      	movs	r1, #128	; 0x80
10008e92:	04c9      	lsls	r1, r1, #19
10008e94:	430a      	orrs	r2, r1
10008e96:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e98:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
10008e9a:	e0f6      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008e9c:	4b4a      	ldr	r3, [pc, #296]	; (10008fc8 <system_peripheral_reset+0x390>)
10008e9e:	6859      	ldr	r1, [r3, #4]
10008ea0:	4a5d      	ldr	r2, [pc, #372]	; (10009018 <system_peripheral_reset+0x3e0>)
10008ea2:	400a      	ands	r2, r1
10008ea4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008ea6:	685a      	ldr	r2, [r3, #4]
10008ea8:	2180      	movs	r1, #128	; 0x80
10008eaa:	0509      	lsls	r1, r1, #20
10008eac:	430a      	orrs	r2, r1
10008eae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008eb0:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
10008eb2:	e0ea      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008eb4:	4b44      	ldr	r3, [pc, #272]	; (10008fc8 <system_peripheral_reset+0x390>)
10008eb6:	6859      	ldr	r1, [r3, #4]
10008eb8:	4a58      	ldr	r2, [pc, #352]	; (1000901c <system_peripheral_reset+0x3e4>)
10008eba:	400a      	ands	r2, r1
10008ebc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008ebe:	685a      	ldr	r2, [r3, #4]
10008ec0:	2180      	movs	r1, #128	; 0x80
10008ec2:	0549      	lsls	r1, r1, #21
10008ec4:	430a      	orrs	r2, r1
10008ec6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ec8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
10008eca:	e0de      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008ecc:	4b3e      	ldr	r3, [pc, #248]	; (10008fc8 <system_peripheral_reset+0x390>)
10008ece:	6859      	ldr	r1, [r3, #4]
10008ed0:	4a53      	ldr	r2, [pc, #332]	; (10009020 <system_peripheral_reset+0x3e8>)
10008ed2:	400a      	ands	r2, r1
10008ed4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008ed6:	685a      	ldr	r2, [r3, #4]
10008ed8:	2180      	movs	r1, #128	; 0x80
10008eda:	0589      	lsls	r1, r1, #22
10008edc:	430a      	orrs	r2, r1
10008ede:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ee0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
10008ee2:	e0d2      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008ee4:	4b38      	ldr	r3, [pc, #224]	; (10008fc8 <system_peripheral_reset+0x390>)
10008ee6:	6859      	ldr	r1, [r3, #4]
10008ee8:	4a4e      	ldr	r2, [pc, #312]	; (10009024 <system_peripheral_reset+0x3ec>)
10008eea:	400a      	ands	r2, r1
10008eec:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008eee:	685a      	ldr	r2, [r3, #4]
10008ef0:	2180      	movs	r1, #128	; 0x80
10008ef2:	05c9      	lsls	r1, r1, #23
10008ef4:	430a      	orrs	r2, r1
10008ef6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ef8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
10008efa:	e0c6      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10008efc:	4a32      	ldr	r2, [pc, #200]	; (10008fc8 <system_peripheral_reset+0x390>)
10008efe:	6853      	ldr	r3, [r2, #4]
10008f00:	005b      	lsls	r3, r3, #1
10008f02:	085b      	lsrs	r3, r3, #1
10008f04:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10008f06:	6853      	ldr	r3, [r2, #4]
10008f08:	2180      	movs	r1, #128	; 0x80
10008f0a:	0609      	lsls	r1, r1, #24
10008f0c:	430b      	orrs	r3, r1
10008f0e:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f10:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
10008f12:	e0ba      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008f14:	4b2c      	ldr	r3, [pc, #176]	; (10008fc8 <system_peripheral_reset+0x390>)
10008f16:	891a      	ldrh	r2, [r3, #8]
10008f18:	2101      	movs	r1, #1
10008f1a:	438a      	bics	r2, r1
10008f1c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008f1e:	8919      	ldrh	r1, [r3, #8]
10008f20:	2201      	movs	r2, #1
10008f22:	430a      	orrs	r2, r1
10008f24:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f26:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
10008f28:	e0af      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008f2a:	4b27      	ldr	r3, [pc, #156]	; (10008fc8 <system_peripheral_reset+0x390>)
10008f2c:	891a      	ldrh	r2, [r3, #8]
10008f2e:	2102      	movs	r1, #2
10008f30:	438a      	bics	r2, r1
10008f32:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008f34:	8919      	ldrh	r1, [r3, #8]
10008f36:	2202      	movs	r2, #2
10008f38:	430a      	orrs	r2, r1
10008f3a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f3c:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
10008f3e:	e0a4      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008f40:	4b21      	ldr	r3, [pc, #132]	; (10008fc8 <system_peripheral_reset+0x390>)
10008f42:	891a      	ldrh	r2, [r3, #8]
10008f44:	2104      	movs	r1, #4
10008f46:	438a      	bics	r2, r1
10008f48:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008f4a:	8919      	ldrh	r1, [r3, #8]
10008f4c:	2204      	movs	r2, #4
10008f4e:	430a      	orrs	r2, r1
10008f50:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f52:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
10008f54:	e099      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008f56:	4b1c      	ldr	r3, [pc, #112]	; (10008fc8 <system_peripheral_reset+0x390>)
10008f58:	891a      	ldrh	r2, [r3, #8]
10008f5a:	2108      	movs	r1, #8
10008f5c:	438a      	bics	r2, r1
10008f5e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008f60:	8919      	ldrh	r1, [r3, #8]
10008f62:	2208      	movs	r2, #8
10008f64:	430a      	orrs	r2, r1
10008f66:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f68:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
10008f6a:	e08e      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008f6c:	4b16      	ldr	r3, [pc, #88]	; (10008fc8 <system_peripheral_reset+0x390>)
10008f6e:	891a      	ldrh	r2, [r3, #8]
10008f70:	2110      	movs	r1, #16
10008f72:	438a      	bics	r2, r1
10008f74:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008f76:	8919      	ldrh	r1, [r3, #8]
10008f78:	2210      	movs	r2, #16
10008f7a:	430a      	orrs	r2, r1
10008f7c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f7e:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
10008f80:	e083      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008f82:	4b11      	ldr	r3, [pc, #68]	; (10008fc8 <system_peripheral_reset+0x390>)
10008f84:	891a      	ldrh	r2, [r3, #8]
10008f86:	2120      	movs	r1, #32
10008f88:	438a      	bics	r2, r1
10008f8a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008f8c:	8919      	ldrh	r1, [r3, #8]
10008f8e:	2220      	movs	r2, #32
10008f90:	430a      	orrs	r2, r1
10008f92:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f94:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
10008f96:	e078      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008f98:	4b0b      	ldr	r3, [pc, #44]	; (10008fc8 <system_peripheral_reset+0x390>)
10008f9a:	891a      	ldrh	r2, [r3, #8]
10008f9c:	2140      	movs	r1, #64	; 0x40
10008f9e:	438a      	bics	r2, r1
10008fa0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008fa2:	8919      	ldrh	r1, [r3, #8]
10008fa4:	2240      	movs	r2, #64	; 0x40
10008fa6:	430a      	orrs	r2, r1
10008fa8:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008faa:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
10008fac:	e06d      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10008fae:	4b06      	ldr	r3, [pc, #24]	; (10008fc8 <system_peripheral_reset+0x390>)
10008fb0:	891a      	ldrh	r2, [r3, #8]
10008fb2:	2180      	movs	r1, #128	; 0x80
10008fb4:	438a      	bics	r2, r1
10008fb6:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10008fb8:	8919      	ldrh	r1, [r3, #8]
10008fba:	2280      	movs	r2, #128	; 0x80
10008fbc:	430a      	orrs	r2, r1
10008fbe:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fc0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
10008fc2:	e062      	b.n	1000908a <system_peripheral_reset+0x452>
10008fc4:	1001216c 	.word	0x1001216c
10008fc8:	4000b000 	.word	0x4000b000
10008fcc:	fffffeff 	.word	0xfffffeff
10008fd0:	fffffdff 	.word	0xfffffdff
10008fd4:	fffffbff 	.word	0xfffffbff
10008fd8:	fffff7ff 	.word	0xfffff7ff
10008fdc:	ffffefff 	.word	0xffffefff
10008fe0:	ffffdfff 	.word	0xffffdfff
10008fe4:	ffffbfff 	.word	0xffffbfff
10008fe8:	ffff7fff 	.word	0xffff7fff
10008fec:	fffeffff 	.word	0xfffeffff
10008ff0:	fffdffff 	.word	0xfffdffff
10008ff4:	fffbffff 	.word	0xfffbffff
10008ff8:	fff7ffff 	.word	0xfff7ffff
10008ffc:	ffefffff 	.word	0xffefffff
10009000:	ffdfffff 	.word	0xffdfffff
10009004:	ffbfffff 	.word	0xffbfffff
10009008:	ff7fffff 	.word	0xff7fffff
1000900c:	feffffff 	.word	0xfeffffff
10009010:	fdffffff 	.word	0xfdffffff
10009014:	fbffffff 	.word	0xfbffffff
10009018:	f7ffffff 	.word	0xf7ffffff
1000901c:	efffffff 	.word	0xefffffff
10009020:	dfffffff 	.word	0xdfffffff
10009024:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009028:	4b18      	ldr	r3, [pc, #96]	; (1000908c <system_peripheral_reset+0x454>)
1000902a:	8919      	ldrh	r1, [r3, #8]
1000902c:	4a18      	ldr	r2, [pc, #96]	; (10009090 <system_peripheral_reset+0x458>)
1000902e:	400a      	ands	r2, r1
10009030:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009032:	8919      	ldrh	r1, [r3, #8]
10009034:	2280      	movs	r2, #128	; 0x80
10009036:	0052      	lsls	r2, r2, #1
10009038:	430a      	orrs	r2, r1
1000903a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000903c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000903e:	e024      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009040:	4b12      	ldr	r3, [pc, #72]	; (1000908c <system_peripheral_reset+0x454>)
10009042:	8919      	ldrh	r1, [r3, #8]
10009044:	4a13      	ldr	r2, [pc, #76]	; (10009094 <system_peripheral_reset+0x45c>)
10009046:	400a      	ands	r2, r1
10009048:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000904a:	8919      	ldrh	r1, [r3, #8]
1000904c:	2280      	movs	r2, #128	; 0x80
1000904e:	0092      	lsls	r2, r2, #2
10009050:	430a      	orrs	r2, r1
10009052:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009054:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
10009056:	e018      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009058:	4b0c      	ldr	r3, [pc, #48]	; (1000908c <system_peripheral_reset+0x454>)
1000905a:	8919      	ldrh	r1, [r3, #8]
1000905c:	4a0e      	ldr	r2, [pc, #56]	; (10009098 <system_peripheral_reset+0x460>)
1000905e:	400a      	ands	r2, r1
10009060:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009062:	8919      	ldrh	r1, [r3, #8]
10009064:	2280      	movs	r2, #128	; 0x80
10009066:	00d2      	lsls	r2, r2, #3
10009068:	430a      	orrs	r2, r1
1000906a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000906c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000906e:	e00c      	b.n	1000908a <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009070:	4b06      	ldr	r3, [pc, #24]	; (1000908c <system_peripheral_reset+0x454>)
10009072:	8919      	ldrh	r1, [r3, #8]
10009074:	4a09      	ldr	r2, [pc, #36]	; (1000909c <system_peripheral_reset+0x464>)
10009076:	400a      	ands	r2, r1
10009078:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000907a:	8919      	ldrh	r1, [r3, #8]
1000907c:	2280      	movs	r2, #128	; 0x80
1000907e:	0112      	lsls	r2, r2, #4
10009080:	430a      	orrs	r2, r1
10009082:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009084:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
10009086:	e000      	b.n	1000908a <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
10009088:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000908a:	bd00      	pop	{pc}
1000908c:	4000b000 	.word	0x4000b000
10009090:	fffffeff 	.word	0xfffffeff
10009094:	fffffdff 	.word	0xfffffdff
10009098:	fffffbff 	.word	0xfffffbff
1000909c:	fffff7ff 	.word	0xfffff7ff

100090a0 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
100090a0:	2380      	movs	r3, #128	; 0x80
100090a2:	04db      	lsls	r3, r3, #19
100090a4:	469c      	mov	ip, r3
100090a6:	4460      	add	r0, ip
100090a8:	0080      	lsls	r0, r0, #2
100090aa:	6001      	str	r1, [r0, #0]
}
100090ac:	4770      	bx	lr
100090ae:	46c0      	nop			; (mov r8, r8)

100090b0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
100090b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100090b2:	4647      	mov	r7, r8
100090b4:	b480      	push	{r7}
100090b6:	000c      	movs	r4, r1
100090b8:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
100090ba:	2800      	cmp	r0, #0
100090bc:	d10d      	bne.n	100090da <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
100090be:	2a00      	cmp	r2, #0
100090c0:	dd0e      	ble.n	100090e0 <_read+0x30>
100090c2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
100090c4:	4e08      	ldr	r6, [pc, #32]	; (100090e8 <_read+0x38>)
100090c6:	4d09      	ldr	r5, [pc, #36]	; (100090ec <_read+0x3c>)
100090c8:	6830      	ldr	r0, [r6, #0]
100090ca:	0021      	movs	r1, r4
100090cc:	682b      	ldr	r3, [r5, #0]
100090ce:	4798      	blx	r3
		ptr++;
100090d0:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
100090d2:	42a7      	cmp	r7, r4
100090d4:	d1f8      	bne.n	100090c8 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
100090d6:	4640      	mov	r0, r8
100090d8:	e003      	b.n	100090e2 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
100090da:	2001      	movs	r0, #1
100090dc:	4240      	negs	r0, r0
100090de:	e000      	b.n	100090e2 <_read+0x32>
	}

	for (; len > 0; --len) {
100090e0:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
100090e2:	bc04      	pop	{r2}
100090e4:	4690      	mov	r8, r2
100090e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100090e8:	10015354 	.word	0x10015354
100090ec:	1001534c 	.word	0x1001534c

100090f0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
100090f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100090f2:	4647      	mov	r7, r8
100090f4:	b480      	push	{r7}
100090f6:	000e      	movs	r6, r1
100090f8:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
100090fa:	3801      	subs	r0, #1
100090fc:	2802      	cmp	r0, #2
100090fe:	d811      	bhi.n	10009124 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
10009100:	2a00      	cmp	r2, #0
10009102:	d012      	beq.n	1000912a <_write+0x3a>
10009104:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
10009106:	4b0c      	ldr	r3, [pc, #48]	; (10009138 <_write+0x48>)
10009108:	4698      	mov	r8, r3
1000910a:	4f0c      	ldr	r7, [pc, #48]	; (1000913c <_write+0x4c>)
1000910c:	4643      	mov	r3, r8
1000910e:	6818      	ldr	r0, [r3, #0]
10009110:	5d31      	ldrb	r1, [r6, r4]
10009112:	683b      	ldr	r3, [r7, #0]
10009114:	4798      	blx	r3
10009116:	2800      	cmp	r0, #0
10009118:	db09      	blt.n	1000912e <_write+0x3e>
			return -1;
		}
		++nChars;
1000911a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000911c:	42a5      	cmp	r5, r4
1000911e:	d1f5      	bne.n	1000910c <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
10009120:	0020      	movs	r0, r4
10009122:	e006      	b.n	10009132 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
10009124:	2001      	movs	r0, #1
10009126:	4240      	negs	r0, r0
10009128:	e003      	b.n	10009132 <_write+0x42>
	}

	for (; len != 0; --len) {
1000912a:	2000      	movs	r0, #0
1000912c:	e001      	b.n	10009132 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000912e:	2001      	movs	r0, #1
10009130:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
10009132:	bc04      	pop	{r2}
10009134:	4690      	mov	r8, r2
10009136:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009138:	10015354 	.word	0x10015354
1000913c:	10015350 	.word	0x10015350

10009140 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
10009140:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
10009142:	4b0e      	ldr	r3, [pc, #56]	; (1000917c <uart_read_complete_callback+0x3c>)
10009144:	781b      	ldrb	r3, [r3, #0]
10009146:	2b01      	cmp	r3, #1
10009148:	d10b      	bne.n	10009162 <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000914a:	2202      	movs	r2, #2
1000914c:	4b0b      	ldr	r3, [pc, #44]	; (1000917c <uart_read_complete_callback+0x3c>)
1000914e:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
10009150:	4b0b      	ldr	r3, [pc, #44]	; (10009180 <uart_read_complete_callback+0x40>)
10009152:	681b      	ldr	r3, [r3, #0]
10009154:	2b00      	cmp	r3, #0
10009156:	d110      	bne.n	1000917a <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
10009158:	2102      	movs	r1, #2
1000915a:	480a      	ldr	r0, [pc, #40]	; (10009184 <uart_read_complete_callback+0x44>)
1000915c:	4b0a      	ldr	r3, [pc, #40]	; (10009188 <uart_read_complete_callback+0x48>)
1000915e:	4798      	blx	r3
10009160:	e00b      	b.n	1000917a <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
10009162:	4b07      	ldr	r3, [pc, #28]	; (10009180 <uart_read_complete_callback+0x40>)
10009164:	681b      	ldr	r3, [r3, #0]
10009166:	2b00      	cmp	r3, #0
10009168:	d007      	beq.n	1000917a <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000916a:	4c08      	ldr	r4, [pc, #32]	; (1000918c <uart_read_complete_callback+0x4c>)
1000916c:	7820      	ldrb	r0, [r4, #0]
1000916e:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
10009170:	2201      	movs	r2, #1
10009172:	0021      	movs	r1, r4
10009174:	4803      	ldr	r0, [pc, #12]	; (10009184 <uart_read_complete_callback+0x44>)
10009176:	4b06      	ldr	r3, [pc, #24]	; (10009190 <uart_read_complete_callback+0x50>)
10009178:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000917a:	bd10      	pop	{r4, pc}
1000917c:	100137d0 	.word	0x100137d0
10009180:	100137d8 	.word	0x100137d8
10009184:	10015358 	.word	0x10015358
10009188:	1000c6a9 	.word	0x1000c6a9
1000918c:	100137d4 	.word	0x100137d4
10009190:	1000c64d 	.word	0x1000c64d

10009194 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
10009194:	b570      	push	{r4, r5, r6, lr}
10009196:	0006      	movs	r6, r0
10009198:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000919a:	4c03      	ldr	r4, [pc, #12]	; (100091a8 <usart_serial_getchar+0x14>)
1000919c:	0029      	movs	r1, r5
1000919e:	0030      	movs	r0, r6
100091a0:	47a0      	blx	r4
100091a2:	2800      	cmp	r0, #0
100091a4:	d1fa      	bne.n	1000919c <usart_serial_getchar+0x8>
}
100091a6:	bd70      	pop	{r4, r5, r6, pc}
100091a8:	1000c639 	.word	0x1000c639

100091ac <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
100091ac:	b570      	push	{r4, r5, r6, lr}
100091ae:	0006      	movs	r6, r0
100091b0:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
100091b2:	4c03      	ldr	r4, [pc, #12]	; (100091c0 <usart_serial_putchar+0x14>)
100091b4:	0029      	movs	r1, r5
100091b6:	0030      	movs	r0, r6
100091b8:	47a0      	blx	r4
100091ba:	2800      	cmp	r0, #0
100091bc:	d1fa      	bne.n	100091b4 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
100091be:	bd70      	pop	{r4, r5, r6, pc}
100091c0:	1000c629 	.word	0x1000c629

100091c4 <serial_console_init>:

void serial_console_init(void)
{
100091c4:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
100091c6:	2100      	movs	r1, #0
100091c8:	2000      	movs	r0, #0
100091ca:	4b19      	ldr	r3, [pc, #100]	; (10009230 <serial_console_init+0x6c>)
100091cc:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
100091ce:	4c19      	ldr	r4, [pc, #100]	; (10009234 <serial_console_init+0x70>)
100091d0:	0020      	movs	r0, r4
100091d2:	4b19      	ldr	r3, [pc, #100]	; (10009238 <serial_console_init+0x74>)
100091d4:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
100091d6:	23e1      	movs	r3, #225	; 0xe1
100091d8:	025b      	lsls	r3, r3, #9
100091da:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
100091dc:	2302      	movs	r3, #2
100091de:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
100091e0:	2203      	movs	r2, #3
100091e2:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
100091e4:	3201      	adds	r2, #1
100091e6:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
100091e8:	3201      	adds	r2, #1
100091ea:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
100091ec:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
100091ee:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
100091f0:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
100091f2:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
100091f4:	4d11      	ldr	r5, [pc, #68]	; (1000923c <serial_console_init+0x78>)
100091f6:	4b12      	ldr	r3, [pc, #72]	; (10009240 <serial_console_init+0x7c>)
100091f8:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
100091fa:	4a12      	ldr	r2, [pc, #72]	; (10009244 <serial_console_init+0x80>)
100091fc:	4b12      	ldr	r3, [pc, #72]	; (10009248 <serial_console_init+0x84>)
100091fe:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
10009200:	4a12      	ldr	r2, [pc, #72]	; (1000924c <serial_console_init+0x88>)
10009202:	4b13      	ldr	r3, [pc, #76]	; (10009250 <serial_console_init+0x8c>)
10009204:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
10009206:	0022      	movs	r2, r4
10009208:	4912      	ldr	r1, [pc, #72]	; (10009254 <serial_console_init+0x90>)
1000920a:	0028      	movs	r0, r5
1000920c:	4b12      	ldr	r3, [pc, #72]	; (10009258 <serial_console_init+0x94>)
1000920e:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
10009210:	4e12      	ldr	r6, [pc, #72]	; (1000925c <serial_console_init+0x98>)
10009212:	6833      	ldr	r3, [r6, #0]
10009214:	6898      	ldr	r0, [r3, #8]
10009216:	2100      	movs	r1, #0
10009218:	4c11      	ldr	r4, [pc, #68]	; (10009260 <serial_console_init+0x9c>)
1000921a:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000921c:	6833      	ldr	r3, [r6, #0]
1000921e:	6858      	ldr	r0, [r3, #4]
10009220:	2100      	movs	r1, #0
10009222:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
10009224:	2202      	movs	r2, #2
10009226:	490f      	ldr	r1, [pc, #60]	; (10009264 <serial_console_init+0xa0>)
10009228:	0028      	movs	r0, r5
1000922a:	4b0f      	ldr	r3, [pc, #60]	; (10009268 <serial_console_init+0xa4>)
1000922c:	4798      	blx	r3
}
1000922e:	bd70      	pop	{r4, r5, r6, pc}
10009230:	1000884d 	.word	0x1000884d
10009234:	1001537c 	.word	0x1001537c
10009238:	1000c441 	.word	0x1000c441
1000923c:	10015358 	.word	0x10015358
10009240:	10015354 	.word	0x10015354
10009244:	100091ad 	.word	0x100091ad
10009248:	10015350 	.word	0x10015350
1000924c:	10009195 	.word	0x10009195
10009250:	1001534c 	.word	0x1001534c
10009254:	40004000 	.word	0x40004000
10009258:	1000c46d 	.word	0x1000c46d
1000925c:	100137ac 	.word	0x100137ac
10009260:	1001103d 	.word	0x1001103d
10009264:	10009141 	.word	0x10009141
10009268:	1000c675 	.word	0x1000c675

1000926c <_time_start>:

void _time_start(unsigned int sec)
{
1000926c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000926e:	b083      	sub	sp, #12
10009270:	0005      	movs	r5, r0
	system_clock_get_value();
10009272:	4c0d      	ldr	r4, [pc, #52]	; (100092a8 <_time_start+0x3c>)
10009274:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
10009276:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
10009278:	4f0c      	ldr	r7, [pc, #48]	; (100092ac <_time_start+0x40>)
1000927a:	47b8      	blx	r7
1000927c:	4e0c      	ldr	r6, [pc, #48]	; (100092b0 <_time_start+0x44>)
1000927e:	4a0d      	ldr	r2, [pc, #52]	; (100092b4 <_time_start+0x48>)
10009280:	4b0d      	ldr	r3, [pc, #52]	; (100092b8 <_time_start+0x4c>)
10009282:	47b0      	blx	r6
10009284:	9000      	str	r0, [sp, #0]
10009286:	9101      	str	r1, [sp, #4]
10009288:	20fa      	movs	r0, #250	; 0xfa
1000928a:	0080      	lsls	r0, r0, #2
1000928c:	4368      	muls	r0, r5
1000928e:	47b8      	blx	r7
10009290:	0002      	movs	r2, r0
10009292:	000b      	movs	r3, r1
10009294:	9800      	ldr	r0, [sp, #0]
10009296:	9901      	ldr	r1, [sp, #4]
10009298:	47b0      	blx	r6
1000929a:	4b08      	ldr	r3, [pc, #32]	; (100092bc <_time_start+0x50>)
1000929c:	4798      	blx	r3
1000929e:	4b08      	ldr	r3, [pc, #32]	; (100092c0 <_time_start+0x54>)
100092a0:	6018      	str	r0, [r3, #0]
}
100092a2:	b003      	add	sp, #12
100092a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100092a6:	46c0      	nop			; (mov r8, r8)
100092a8:	100088d1 	.word	0x100088d1
100092ac:	10010ac1 	.word	0x10010ac1
100092b0:	1000feb9 	.word	0x1000feb9
100092b4:	19feaec7 	.word	0x19feaec7
100092b8:	3f09d8ef 	.word	0x3f09d8ef
100092bc:	1000fe7d 	.word	0x1000fe7d
100092c0:	100137cc 	.word	0x100137cc

100092c4 <_time_done>:

unsigned int _time_done()
{
	return --tick;
100092c4:	4b02      	ldr	r3, [pc, #8]	; (100092d0 <_time_done+0xc>)
100092c6:	681a      	ldr	r2, [r3, #0]
100092c8:	1e50      	subs	r0, r2, #1
100092ca:	6018      	str	r0, [r3, #0]
}
100092cc:	4770      	bx	lr
100092ce:	46c0      	nop			; (mov r8, r8)
100092d0:	100137cc 	.word	0x100137cc

100092d4 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
100092d4:	b570      	push	{r4, r5, r6, lr}
100092d6:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
100092d8:	2201      	movs	r2, #1
100092da:	4b11      	ldr	r3, [pc, #68]	; (10009320 <getchar_b11_timeout+0x4c>)
100092dc:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
100092de:	4b11      	ldr	r3, [pc, #68]	; (10009324 <getchar_b11_timeout+0x50>)
100092e0:	681b      	ldr	r3, [r3, #0]
100092e2:	2b00      	cmp	r3, #0
100092e4:	d103      	bne.n	100092ee <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
100092e6:	2102      	movs	r1, #2
100092e8:	480f      	ldr	r0, [pc, #60]	; (10009328 <getchar_b11_timeout+0x54>)
100092ea:	4b10      	ldr	r3, [pc, #64]	; (1000932c <getchar_b11_timeout+0x58>)
100092ec:	4798      	blx	r3

	_time_start(sec);
100092ee:	0020      	movs	r0, r4
100092f0:	4b0f      	ldr	r3, [pc, #60]	; (10009330 <getchar_b11_timeout+0x5c>)
100092f2:	4798      	blx	r3
	
	string_input[0] = 0;
100092f4:	490f      	ldr	r1, [pc, #60]	; (10009334 <getchar_b11_timeout+0x60>)
100092f6:	2300      	movs	r3, #0
100092f8:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
100092fa:	2201      	movs	r2, #1
100092fc:	480a      	ldr	r0, [pc, #40]	; (10009328 <getchar_b11_timeout+0x54>)
100092fe:	4b0e      	ldr	r3, [pc, #56]	; (10009338 <getchar_b11_timeout+0x64>)
10009300:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
10009302:	4c07      	ldr	r4, [pc, #28]	; (10009320 <getchar_b11_timeout+0x4c>)
10009304:	4d0d      	ldr	r5, [pc, #52]	; (1000933c <getchar_b11_timeout+0x68>)
10009306:	7823      	ldrb	r3, [r4, #0]
10009308:	2b02      	cmp	r3, #2
1000930a:	d002      	beq.n	10009312 <getchar_b11_timeout+0x3e>
1000930c:	47a8      	blx	r5
1000930e:	2800      	cmp	r0, #0
10009310:	d1f9      	bne.n	10009306 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
10009312:	2200      	movs	r2, #0
10009314:	4b02      	ldr	r3, [pc, #8]	; (10009320 <getchar_b11_timeout+0x4c>)
10009316:	701a      	strb	r2, [r3, #0]

	return string_input[0];
10009318:	4b06      	ldr	r3, [pc, #24]	; (10009334 <getchar_b11_timeout+0x60>)
1000931a:	7818      	ldrb	r0, [r3, #0]
}
1000931c:	bd70      	pop	{r4, r5, r6, pc}
1000931e:	46c0      	nop			; (mov r8, r8)
10009320:	100137d0 	.word	0x100137d0
10009324:	100137d8 	.word	0x100137d8
10009328:	10015358 	.word	0x10015358
1000932c:	1000c689 	.word	0x1000c689
10009330:	1000926d 	.word	0x1000926d
10009334:	100137d4 	.word	0x100137d4
10009338:	1000c64d 	.word	0x1000c64d
1000933c:	100092c5 	.word	0x100092c5

10009340 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
10009340:	4b02      	ldr	r3, [pc, #8]	; (1000934c <platform_event_free+0xc>)
10009342:	681a      	ldr	r2, [r3, #0]
10009344:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
10009346:	6018      	str	r0, [r3, #0]
}
10009348:	4770      	bx	lr
1000934a:	46c0      	nop			; (mov r8, r8)
1000934c:	100137e0 	.word	0x100137e0

10009350 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
10009350:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
10009352:	4b0b      	ldr	r3, [pc, #44]	; (10009380 <platform_event_post+0x30>)
10009354:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
10009356:	2c00      	cmp	r4, #0
10009358:	d011      	beq.n	1000937e <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000935a:	6825      	ldr	r5, [r4, #0]
1000935c:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000935e:	2300      	movs	r3, #0
10009360:	6023      	str	r3, [r4, #0]
		evt->data = data;
10009362:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
10009364:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
10009366:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
10009368:	4b06      	ldr	r3, [pc, #24]	; (10009384 <platform_event_post+0x34>)
1000936a:	681a      	ldr	r2, [r3, #0]
1000936c:	2a00      	cmp	r2, #0
1000936e:	d102      	bne.n	10009376 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
10009370:	601c      	str	r4, [r3, #0]
10009372:	e004      	b.n	1000937e <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
10009374:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
10009376:	6813      	ldr	r3, [r2, #0]
10009378:	2b00      	cmp	r3, #0
1000937a:	d1fb      	bne.n	10009374 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000937c:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000937e:	bd30      	pop	{r4, r5, pc}
10009380:	100137e0 	.word	0x100137e0
10009384:	100137dc 	.word	0x100137dc

10009388 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
10009388:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000938a:	2300      	movs	r3, #0
1000938c:	4a06      	ldr	r2, [pc, #24]	; (100093a8 <platform_event_init+0x20>)
1000938e:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
10009390:	4a06      	ldr	r2, [pc, #24]	; (100093ac <platform_event_init+0x24>)
10009392:	6013      	str	r3, [r2, #0]
10009394:	4c06      	ldr	r4, [pc, #24]	; (100093b0 <platform_event_init+0x28>)
10009396:	0026      	movs	r6, r4
10009398:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000939a:	4d06      	ldr	r5, [pc, #24]	; (100093b4 <platform_event_init+0x2c>)
1000939c:	0020      	movs	r0, r4
1000939e:	47a8      	blx	r5
100093a0:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
100093a2:	42b4      	cmp	r4, r6
100093a4:	d1fa      	bne.n	1000939c <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
100093a6:	bd70      	pop	{r4, r5, r6, pc}
100093a8:	100137e0 	.word	0x100137e0
100093ac:	100137dc 	.word	0x100137dc
100093b0:	100137e4 	.word	0x100137e4
100093b4:	10009341 	.word	0x10009341

100093b8 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
100093b8:	b570      	push	{r4, r5, r6, lr}
100093ba:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
100093bc:	4b13      	ldr	r3, [pc, #76]	; (1000940c <at_ke_msg_send+0x54>)
100093be:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
100093c0:	4b13      	ldr	r3, [pc, #76]	; (10009410 <at_ke_msg_send+0x58>)
100093c2:	681b      	ldr	r3, [r3, #0]
100093c4:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
100093c6:	2c0c      	cmp	r4, #12
100093c8:	d01f      	beq.n	1000940a <at_ke_msg_send+0x52>
100093ca:	3c0c      	subs	r4, #12
100093cc:	88e3      	ldrh	r3, [r4, #6]
100093ce:	2b05      	cmp	r3, #5
100093d0:	d01b      	beq.n	1000940a <at_ke_msg_send+0x52>
		if(osc_en == 0)
100093d2:	07eb      	lsls	r3, r5, #31
100093d4:	d414      	bmi.n	10009400 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
100093d6:	4b0f      	ldr	r3, [pc, #60]	; (10009414 <at_ke_msg_send+0x5c>)
100093d8:	681b      	ldr	r3, [r3, #0]
100093da:	2002      	movs	r0, #2
100093dc:	4798      	blx	r3
			pwr_arm_wakeup_req();
100093de:	4b0e      	ldr	r3, [pc, #56]	; (10009418 <at_ke_msg_send+0x60>)
100093e0:	681b      	ldr	r3, [r3, #0]
100093e2:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
100093e4:	4c0d      	ldr	r4, [pc, #52]	; (1000941c <at_ke_msg_send+0x64>)
100093e6:	2003      	movs	r0, #3
100093e8:	6823      	ldr	r3, [r4, #0]
100093ea:	4798      	blx	r3
100093ec:	2800      	cmp	r0, #0
100093ee:	d1fa      	bne.n	100093e6 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
100093f0:	4b0b      	ldr	r3, [pc, #44]	; (10009420 <at_ke_msg_send+0x68>)
100093f2:	681b      	ldr	r3, [r3, #0]
100093f4:	3002      	adds	r0, #2
100093f6:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
100093f8:	2201      	movs	r2, #1
100093fa:	4b0a      	ldr	r3, [pc, #40]	; (10009424 <at_ke_msg_send+0x6c>)
100093fc:	601a      	str	r2, [r3, #0]
100093fe:	e004      	b.n	1000940a <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
10009400:	4b09      	ldr	r3, [pc, #36]	; (10009428 <at_ke_msg_send+0x70>)
10009402:	6818      	ldr	r0, [r3, #0]
10009404:	4b09      	ldr	r3, [pc, #36]	; (1000942c <at_ke_msg_send+0x74>)
10009406:	681b      	ldr	r3, [r3, #0]
10009408:	4798      	blx	r3
		}
	}
}
1000940a:	bd70      	pop	{r4, r5, r6, pc}
1000940c:	4000b1ec 	.word	0x4000b1ec
10009410:	1001388c 	.word	0x1001388c
10009414:	10013884 	.word	0x10013884
10009418:	10013894 	.word	0x10013894
1000941c:	10013870 	.word	0x10013870
10009420:	10013878 	.word	0x10013878
10009424:	4000b020 	.word	0x4000b020
10009428:	1001387c 	.word	0x1001387c
1000942c:	1001386c 	.word	0x1001386c

10009430 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
10009430:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
10009432:	4b06      	ldr	r3, [pc, #24]	; (1000944c <samb11_plf_resume_callback+0x1c>)
10009434:	4a06      	ldr	r2, [pc, #24]	; (10009450 <samb11_plf_resume_callback+0x20>)
10009436:	6819      	ldr	r1, [r3, #0]
10009438:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000943a:	685a      	ldr	r2, [r3, #4]
1000943c:	4b05      	ldr	r3, [pc, #20]	; (10009454 <samb11_plf_resume_callback+0x24>)
1000943e:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
10009440:	4b05      	ldr	r3, [pc, #20]	; (10009458 <samb11_plf_resume_callback+0x28>)
10009442:	681b      	ldr	r3, [r3, #0]
10009444:	2b00      	cmp	r3, #0
10009446:	d000      	beq.n	1000944a <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
10009448:	4798      	blx	r3
	}
}
1000944a:	bd10      	pop	{r4, pc}
1000944c:	100153a4 	.word	0x100153a4
10009450:	4000b00c 	.word	0x4000b00c
10009454:	4000b010 	.word	0x4000b010
10009458:	10015680 	.word	0x10015680

1000945c <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000945c:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000945e:	2232      	movs	r2, #50	; 0x32
10009460:	2100      	movs	r1, #0
10009462:	480d      	ldr	r0, [pc, #52]	; (10009498 <init_port_list+0x3c>)
10009464:	4b0d      	ldr	r3, [pc, #52]	; (1000949c <init_port_list+0x40>)
10009466:	4798      	blx	r3
10009468:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000946a:	480b      	ldr	r0, [pc, #44]	; (10009498 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000946c:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000946e:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
10009470:	004a      	lsls	r2, r1, #1
10009472:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
10009474:	1882      	adds	r2, r0, r2
10009476:	7853      	ldrb	r3, [r2, #1]
10009478:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000947a:	b2db      	uxtb	r3, r3
1000947c:	43a3      	bics	r3, r4
1000947e:	7053      	strb	r3, [r2, #1]
10009480:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
10009482:	2919      	cmp	r1, #25
10009484:	d1f4      	bne.n	10009470 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
10009486:	4b04      	ldr	r3, [pc, #16]	; (10009498 <init_port_list+0x3c>)
10009488:	785a      	ldrb	r2, [r3, #1]
1000948a:	3918      	subs	r1, #24
1000948c:	438a      	bics	r2, r1
1000948e:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
10009490:	78da      	ldrb	r2, [r3, #3]
10009492:	438a      	bics	r2, r1
10009494:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
10009496:	bd70      	pop	{r4, r5, r6, pc}
10009498:	100153c0 	.word	0x100153c0
1000949c:	10010e81 	.word	0x10010e81

100094a0 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
100094a0:	4a06      	ldr	r2, [pc, #24]	; (100094bc <init_clock+0x1c>)
100094a2:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
100094a4:	4b06      	ldr	r3, [pc, #24]	; (100094c0 <init_clock+0x20>)
100094a6:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
100094a8:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
100094aa:	4a06      	ldr	r2, [pc, #24]	; (100094c4 <init_clock+0x24>)
100094ac:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
100094ae:	4906      	ldr	r1, [pc, #24]	; (100094c8 <init_clock+0x28>)
100094b0:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
100094b2:	4b06      	ldr	r3, [pc, #24]	; (100094cc <init_clock+0x2c>)
100094b4:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
100094b6:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
100094b8:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
100094ba:	4770      	bx	lr
100094bc:	4000b00c 	.word	0x4000b00c
100094c0:	fffe0fd3 	.word	0xfffe0fd3
100094c4:	100153a4 	.word	0x100153a4
100094c8:	4000b010 	.word	0x4000b010
100094cc:	ffffe7c0 	.word	0xffffe7c0

100094d0 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
100094d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100094d2:	4657      	mov	r7, sl
100094d4:	464e      	mov	r6, r9
100094d6:	4645      	mov	r5, r8
100094d8:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
100094da:	4b4f      	ldr	r3, [pc, #316]	; (10009618 <platform_driver_init+0x148>)
100094dc:	781b      	ldrb	r3, [r3, #0]
100094de:	2b00      	cmp	r3, #0
100094e0:	d004      	beq.n	100094ec <platform_driver_init+0x1c>
100094e2:	4b4d      	ldr	r3, [pc, #308]	; (10009618 <platform_driver_init+0x148>)
100094e4:	781b      	ldrb	r3, [r3, #0]
100094e6:	2b01      	cmp	r3, #1
100094e8:	d100      	bne.n	100094ec <platform_driver_init+0x1c>
100094ea:	e08c      	b.n	10009606 <platform_driver_init+0x136>
		init_port_list();
100094ec:	4b4b      	ldr	r3, [pc, #300]	; (1000961c <platform_driver_init+0x14c>)
100094ee:	4798      	blx	r3
		init_clock();
100094f0:	4b4b      	ldr	r3, [pc, #300]	; (10009620 <platform_driver_init+0x150>)
100094f2:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
100094f4:	2300      	movs	r3, #0
100094f6:	4698      	mov	r8, r3
100094f8:	4b4a      	ldr	r3, [pc, #296]	; (10009624 <platform_driver_init+0x154>)
100094fa:	4642      	mov	r2, r8
100094fc:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
100094fe:	4c4a      	ldr	r4, [pc, #296]	; (10009628 <platform_driver_init+0x158>)
10009500:	2380      	movs	r3, #128	; 0x80
10009502:	2280      	movs	r2, #128	; 0x80
10009504:	0412      	lsls	r2, r2, #16
10009506:	4692      	mov	sl, r2
10009508:	50e2      	str	r2, [r4, r3]
1000950a:	2280      	movs	r2, #128	; 0x80
1000950c:	0452      	lsls	r2, r2, #17
1000950e:	4691      	mov	r9, r2
10009510:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
10009512:	4d46      	ldr	r5, [pc, #280]	; (1000962c <platform_driver_init+0x15c>)
10009514:	4b46      	ldr	r3, [pc, #280]	; (10009630 <platform_driver_init+0x160>)
10009516:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
10009518:	4b46      	ldr	r3, [pc, #280]	; (10009634 <platform_driver_init+0x164>)
1000951a:	4a47      	ldr	r2, [pc, #284]	; (10009638 <platform_driver_init+0x168>)
1000951c:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000951e:	4947      	ldr	r1, [pc, #284]	; (1000963c <platform_driver_init+0x16c>)
10009520:	4a47      	ldr	r2, [pc, #284]	; (10009640 <platform_driver_init+0x170>)
10009522:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
10009524:	4a47      	ldr	r2, [pc, #284]	; (10009644 <platform_driver_init+0x174>)
10009526:	6811      	ldr	r1, [r2, #0]
10009528:	4a47      	ldr	r2, [pc, #284]	; (10009648 <platform_driver_init+0x178>)
1000952a:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000952c:	4a47      	ldr	r2, [pc, #284]	; (1000964c <platform_driver_init+0x17c>)
1000952e:	6811      	ldr	r1, [r2, #0]
10009530:	4a47      	ldr	r2, [pc, #284]	; (10009650 <platform_driver_init+0x180>)
10009532:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
10009534:	4947      	ldr	r1, [pc, #284]	; (10009654 <platform_driver_init+0x184>)
10009536:	4a48      	ldr	r2, [pc, #288]	; (10009658 <platform_driver_init+0x188>)
10009538:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000953a:	4948      	ldr	r1, [pc, #288]	; (1000965c <platform_driver_init+0x18c>)
1000953c:	4a48      	ldr	r2, [pc, #288]	; (10009660 <platform_driver_init+0x190>)
1000953e:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
10009540:	4f48      	ldr	r7, [pc, #288]	; (10009664 <platform_driver_init+0x194>)
10009542:	4a49      	ldr	r2, [pc, #292]	; (10009668 <platform_driver_init+0x198>)
10009544:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
10009546:	4949      	ldr	r1, [pc, #292]	; (1000966c <platform_driver_init+0x19c>)
10009548:	4a49      	ldr	r2, [pc, #292]	; (10009670 <platform_driver_init+0x1a0>)
1000954a:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000954c:	4949      	ldr	r1, [pc, #292]	; (10009674 <platform_driver_init+0x1a4>)
1000954e:	4a4a      	ldr	r2, [pc, #296]	; (10009678 <platform_driver_init+0x1a8>)
10009550:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
10009552:	4e4a      	ldr	r6, [pc, #296]	; (1000967c <platform_driver_init+0x1ac>)
10009554:	4a4a      	ldr	r2, [pc, #296]	; (10009680 <platform_driver_init+0x1b0>)
10009556:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
10009558:	494a      	ldr	r1, [pc, #296]	; (10009684 <platform_driver_init+0x1b4>)
1000955a:	4a4b      	ldr	r2, [pc, #300]	; (10009688 <platform_driver_init+0x1b8>)
1000955c:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000955e:	494b      	ldr	r1, [pc, #300]	; (1000968c <platform_driver_init+0x1bc>)
10009560:	4a4b      	ldr	r2, [pc, #300]	; (10009690 <platform_driver_init+0x1c0>)
10009562:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
10009564:	494b      	ldr	r1, [pc, #300]	; (10009694 <platform_driver_init+0x1c4>)
10009566:	4a4c      	ldr	r2, [pc, #304]	; (10009698 <platform_driver_init+0x1c8>)
10009568:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000956a:	494c      	ldr	r1, [pc, #304]	; (1000969c <platform_driver_init+0x1cc>)
1000956c:	4a4c      	ldr	r2, [pc, #304]	; (100096a0 <platform_driver_init+0x1d0>)
1000956e:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
10009570:	494c      	ldr	r1, [pc, #304]	; (100096a4 <platform_driver_init+0x1d4>)
10009572:	4a4d      	ldr	r2, [pc, #308]	; (100096a8 <platform_driver_init+0x1d8>)
10009574:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
10009576:	2028      	movs	r0, #40	; 0x28
10009578:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000957a:	494c      	ldr	r1, [pc, #304]	; (100096ac <platform_driver_init+0x1dc>)
1000957c:	2028      	movs	r0, #40	; 0x28
1000957e:	682b      	ldr	r3, [r5, #0]
10009580:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
10009582:	682b      	ldr	r3, [r5, #0]
10009584:	494a      	ldr	r1, [pc, #296]	; (100096b0 <platform_driver_init+0x1e0>)
10009586:	2027      	movs	r0, #39	; 0x27
10009588:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000958a:	4b4a      	ldr	r3, [pc, #296]	; (100096b4 <platform_driver_init+0x1e4>)
1000958c:	681a      	ldr	r2, [r3, #0]
1000958e:	4b4a      	ldr	r3, [pc, #296]	; (100096b8 <platform_driver_init+0x1e8>)
10009590:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
10009592:	4a4a      	ldr	r2, [pc, #296]	; (100096bc <platform_driver_init+0x1ec>)
10009594:	4b4a      	ldr	r3, [pc, #296]	; (100096c0 <platform_driver_init+0x1f0>)
10009596:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
10009598:	4a4a      	ldr	r2, [pc, #296]	; (100096c4 <platform_driver_init+0x1f4>)
1000959a:	4b4b      	ldr	r3, [pc, #300]	; (100096c8 <platform_driver_init+0x1f8>)
1000959c:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000959e:	4a4b      	ldr	r2, [pc, #300]	; (100096cc <platform_driver_init+0x1fc>)
100095a0:	4b4b      	ldr	r3, [pc, #300]	; (100096d0 <platform_driver_init+0x200>)
100095a2:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
100095a4:	4a4b      	ldr	r2, [pc, #300]	; (100096d4 <platform_driver_init+0x204>)
100095a6:	4b4c      	ldr	r3, [pc, #304]	; (100096d8 <platform_driver_init+0x208>)
100095a8:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
100095aa:	4a4c      	ldr	r2, [pc, #304]	; (100096dc <platform_driver_init+0x20c>)
100095ac:	4b4c      	ldr	r3, [pc, #304]	; (100096e0 <platform_driver_init+0x210>)
100095ae:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
100095b0:	4a4c      	ldr	r2, [pc, #304]	; (100096e4 <platform_driver_init+0x214>)
100095b2:	4b4d      	ldr	r3, [pc, #308]	; (100096e8 <platform_driver_init+0x218>)
100095b4:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
100095b6:	4a4d      	ldr	r2, [pc, #308]	; (100096ec <platform_driver_init+0x21c>)
100095b8:	4b4d      	ldr	r3, [pc, #308]	; (100096f0 <platform_driver_init+0x220>)
100095ba:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
100095bc:	22a0      	movs	r2, #160	; 0xa0
100095be:	0092      	lsls	r2, r2, #2
100095c0:	2100      	movs	r1, #0
100095c2:	484c      	ldr	r0, [pc, #304]	; (100096f4 <platform_driver_init+0x224>)
100095c4:	4b4c      	ldr	r3, [pc, #304]	; (100096f8 <platform_driver_init+0x228>)
100095c6:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
100095c8:	2280      	movs	r2, #128	; 0x80
100095ca:	0092      	lsls	r2, r2, #2
100095cc:	4b4b      	ldr	r3, [pc, #300]	; (100096fc <platform_driver_init+0x22c>)
100095ce:	801a      	strh	r2, [r3, #0]
		platform_event_init();
100095d0:	4b4b      	ldr	r3, [pc, #300]	; (10009700 <platform_driver_init+0x230>)
100095d2:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
100095d4:	4653      	mov	r3, sl
100095d6:	6023      	str	r3, [r4, #0]
100095d8:	464b      	mov	r3, r9
100095da:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
100095dc:	4b49      	ldr	r3, [pc, #292]	; (10009704 <platform_driver_init+0x234>)
100095de:	4642      	mov	r2, r8
100095e0:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
100095e2:	683b      	ldr	r3, [r7, #0]
100095e4:	4a48      	ldr	r2, [pc, #288]	; (10009708 <platform_driver_init+0x238>)
100095e6:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
100095e8:	6833      	ldr	r3, [r6, #0]
100095ea:	4a48      	ldr	r2, [pc, #288]	; (1000970c <platform_driver_init+0x23c>)
100095ec:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
100095ee:	2000      	movs	r0, #0
100095f0:	4c47      	ldr	r4, [pc, #284]	; (10009710 <platform_driver_init+0x240>)
100095f2:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
100095f4:	2001      	movs	r0, #1
100095f6:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
100095f8:	2002      	movs	r0, #2
100095fa:	47a0      	blx	r4
		platform_initialized = 1;
100095fc:	2201      	movs	r2, #1
100095fe:	4b06      	ldr	r3, [pc, #24]	; (10009618 <platform_driver_init+0x148>)
10009600:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
10009602:	2000      	movs	r0, #0
10009604:	e003      	b.n	1000960e <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
10009606:	2201      	movs	r2, #1
10009608:	4b03      	ldr	r3, [pc, #12]	; (10009618 <platform_driver_init+0x148>)
1000960a:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000960c:	2001      	movs	r0, #1
	}
	return status;
}
1000960e:	bc1c      	pop	{r2, r3, r4}
10009610:	4690      	mov	r8, r2
10009612:	4699      	mov	r9, r3
10009614:	46a2      	mov	sl, r4
10009616:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009618:	10013874 	.word	0x10013874
1000961c:	1000945d 	.word	0x1000945d
10009620:	100094a1 	.word	0x100094a1
10009624:	10013890 	.word	0x10013890
10009628:	e000e100 	.word	0xe000e100
1000962c:	10015674 	.word	0x10015674
10009630:	000007d7 	.word	0x000007d7
10009634:	000007bd 	.word	0x000007bd
10009638:	100153b0 	.word	0x100153b0
1000963c:	0001bc51 	.word	0x0001bc51
10009640:	10015678 	.word	0x10015678
10009644:	100400bc 	.word	0x100400bc
10009648:	10013868 	.word	0x10013868
1000964c:	100400b8 	.word	0x100400b8
10009650:	10013864 	.word	0x10013864
10009654:	0001b99f 	.word	0x0001b99f
10009658:	100153ac 	.word	0x100153ac
1000965c:	0001b9db 	.word	0x0001b9db
10009660:	100153b8 	.word	0x100153b8
10009664:	10015688 	.word	0x10015688
10009668:	1004003c 	.word	0x1004003c
1000966c:	10041fc0 	.word	0x10041fc0
10009670:	100153bc 	.word	0x100153bc
10009674:	10041fc4 	.word	0x10041fc4
10009678:	10015684 	.word	0x10015684
1000967c:	1001567c 	.word	0x1001567c
10009680:	10041fd4 	.word	0x10041fd4
10009684:	10041fd8 	.word	0x10041fd8
10009688:	100153b4 	.word	0x100153b4
1000968c:	0001cbe9 	.word	0x0001cbe9
10009690:	10013884 	.word	0x10013884
10009694:	0001cd8f 	.word	0x0001cd8f
10009698:	10013878 	.word	0x10013878
1000969c:	0001cea3 	.word	0x0001cea3
100096a0:	10013894 	.word	0x10013894
100096a4:	0001cbcf 	.word	0x0001cbcf
100096a8:	10013870 	.word	0x10013870
100096ac:	10009b59 	.word	0x10009b59
100096b0:	10009aed 	.word	0x10009aed
100096b4:	100400e4 	.word	0x100400e4
100096b8:	1001388c 	.word	0x1001388c
100096bc:	00019fe9 	.word	0x00019fe9
100096c0:	1001389c 	.word	0x1001389c
100096c4:	0001dbdd 	.word	0x0001dbdd
100096c8:	1001386c 	.word	0x1001386c
100096cc:	0001dc5b 	.word	0x0001dc5b
100096d0:	10013880 	.word	0x10013880
100096d4:	100405ec 	.word	0x100405ec
100096d8:	1001387c 	.word	0x1001387c
100096dc:	0001d5e3 	.word	0x0001d5e3
100096e0:	10013888 	.word	0x10013888
100096e4:	10040c20 	.word	0x10040c20
100096e8:	100138a0 	.word	0x100138a0
100096ec:	00019f09 	.word	0x00019f09
100096f0:	10013860 	.word	0x10013860
100096f4:	100153f4 	.word	0x100153f4
100096f8:	10010e81 	.word	0x10010e81
100096fc:	1001568c 	.word	0x1001568c
10009700:	10009389 	.word	0x10009389
10009704:	10015680 	.word	0x10015680
10009708:	10009431 	.word	0x10009431
1000970c:	10009bb5 	.word	0x10009bb5
10009710:	10009b9d 	.word	0x10009b9d

10009714 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
10009714:	4b04      	ldr	r3, [pc, #16]	; (10009728 <platform_register_ble_msg_handler+0x14>)
10009716:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
10009718:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000971a:	2a01      	cmp	r2, #1
1000971c:	d102      	bne.n	10009724 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000971e:	4b03      	ldr	r3, [pc, #12]	; (1000972c <platform_register_ble_msg_handler+0x18>)
10009720:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
10009722:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
10009724:	0018      	movs	r0, r3
10009726:	4770      	bx	lr
10009728:	10013874 	.word	0x10013874
1000972c:	10013890 	.word	0x10013890

10009730 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
10009730:	b570      	push	{r4, r5, r6, lr}
10009732:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
10009734:	4b0e      	ldr	r3, [pc, #56]	; (10009770 <platform_interface_send+0x40>)
10009736:	681b      	ldr	r3, [r3, #0]
10009738:	2b00      	cmp	r3, #0
1000973a:	d002      	beq.n	10009742 <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000973c:	8840      	ldrh	r0, [r0, #2]
1000973e:	4798      	blx	r3
10009740:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
10009742:	88e3      	ldrh	r3, [r4, #6]
10009744:	88a2      	ldrh	r2, [r4, #4]
10009746:	8861      	ldrh	r1, [r4, #2]
10009748:	8820      	ldrh	r0, [r4, #0]
1000974a:	4d0a      	ldr	r5, [pc, #40]	; (10009774 <platform_interface_send+0x44>)
1000974c:	682d      	ldr	r5, [r5, #0]
1000974e:	47a8      	blx	r5
10009750:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
10009752:	88e2      	ldrh	r2, [r4, #6]
10009754:	2a00      	cmp	r2, #0
10009756:	d102      	bne.n	1000975e <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
10009758:	4b07      	ldr	r3, [pc, #28]	; (10009778 <platform_interface_send+0x48>)
1000975a:	4798      	blx	r3
1000975c:	e006      	b.n	1000976c <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000975e:	0021      	movs	r1, r4
10009760:	3108      	adds	r1, #8
10009762:	4b06      	ldr	r3, [pc, #24]	; (1000977c <platform_interface_send+0x4c>)
10009764:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
10009766:	0028      	movs	r0, r5
10009768:	4b03      	ldr	r3, [pc, #12]	; (10009778 <platform_interface_send+0x48>)
1000976a:	4798      	blx	r3
	}
}
1000976c:	bd70      	pop	{r4, r5, r6, pc}
1000976e:	46c0      	nop			; (mov r8, r8)
10009770:	10013868 	.word	0x10013868
10009774:	1001389c 	.word	0x1001389c
10009778:	100093b9 	.word	0x100093b9
1000977c:	10010e6f 	.word	0x10010e6f

10009780 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
10009780:	b570      	push	{r4, r5, r6, lr}
10009782:	0015      	movs	r5, r2
10009784:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
10009786:	020a      	lsls	r2, r1, #8
10009788:	4302      	orrs	r2, r0
1000978a:	4b0a      	ldr	r3, [pc, #40]	; (100097b4 <send_plf_int_msg_ind+0x34>)
1000978c:	681e      	ldr	r6, [r3, #0]
1000978e:	0023      	movs	r3, r4
10009790:	2105      	movs	r1, #5
10009792:	20a0      	movs	r0, #160	; 0xa0
10009794:	00c0      	lsls	r0, r0, #3
10009796:	47b0      	blx	r6
10009798:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000979a:	d00a      	beq.n	100097b2 <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000979c:	2c00      	cmp	r4, #0
1000979e:	d005      	beq.n	100097ac <send_plf_int_msg_ind+0x2c>
100097a0:	2d00      	cmp	r5, #0
100097a2:	d003      	beq.n	100097ac <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
100097a4:	0022      	movs	r2, r4
100097a6:	0029      	movs	r1, r5
100097a8:	4b03      	ldr	r3, [pc, #12]	; (100097b8 <send_plf_int_msg_ind+0x38>)
100097aa:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
100097ac:	0030      	movs	r0, r6
100097ae:	4b03      	ldr	r3, [pc, #12]	; (100097bc <send_plf_int_msg_ind+0x3c>)
100097b0:	4798      	blx	r3
	}
}
100097b2:	bd70      	pop	{r4, r5, r6, pc}
100097b4:	1001389c 	.word	0x1001389c
100097b8:	10010e6f 	.word	0x10010e6f
100097bc:	100093b9 	.word	0x100093b9

100097c0 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
100097c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100097c2:	465f      	mov	r7, fp
100097c4:	4656      	mov	r6, sl
100097c6:	464d      	mov	r5, r9
100097c8:	4644      	mov	r4, r8
100097ca:	b4f0      	push	{r4, r5, r6, r7}
100097cc:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
100097ce:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
100097d0:	2300      	movs	r3, #0
100097d2:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
100097d4:	1ce3      	adds	r3, r4, #3
100097d6:	d81c      	bhi.n	10009812 <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
100097d8:	220d      	movs	r2, #13
100097da:	2100      	movs	r1, #0
100097dc:	a802      	add	r0, sp, #8
100097de:	4b82      	ldr	r3, [pc, #520]	; (100099e8 <platform_event_wait+0x228>)
100097e0:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
100097e2:	2333      	movs	r3, #51	; 0x33
100097e4:	aa02      	add	r2, sp, #8
100097e6:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
100097e8:	3b30      	subs	r3, #48	; 0x30
100097ea:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
100097ec:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
100097ee:	3302      	adds	r3, #2
100097f0:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
100097f2:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
100097f4:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
100097f6:	0a23      	lsrs	r3, r4, #8
100097f8:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
100097fa:	0c23      	lsrs	r3, r4, #16
100097fc:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
100097fe:	0e24      	lsrs	r4, r4, #24
10009800:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
10009802:	2301      	movs	r3, #1
10009804:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
10009806:	210d      	movs	r1, #13
10009808:	0010      	movs	r0, r2
1000980a:	4b78      	ldr	r3, [pc, #480]	; (100099ec <platform_event_wait+0x22c>)
1000980c:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000980e:	2301      	movs	r3, #1
10009810:	4699      	mov	r9, r3
10009812:	2400      	movs	r4, #0
10009814:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
10009816:	4f76      	ldr	r7, [pc, #472]	; (100099f0 <platform_event_wait+0x230>)
10009818:	4e76      	ldr	r6, [pc, #472]	; (100099f4 <platform_event_wait+0x234>)
1000981a:	4977      	ldr	r1, [pc, #476]	; (100099f8 <platform_event_wait+0x238>)
1000981c:	6838      	ldr	r0, [r7, #0]
1000981e:	6833      	ldr	r3, [r6, #0]
10009820:	4798      	blx	r3
10009822:	2800      	cmp	r0, #0
10009824:	d000      	beq.n	10009828 <platform_event_wait+0x68>
10009826:	e088      	b.n	1000993a <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
10009828:	4b73      	ldr	r3, [pc, #460]	; (100099f8 <platform_event_wait+0x238>)
1000982a:	681c      	ldr	r4, [r3, #0]
1000982c:	88a3      	ldrh	r3, [r4, #4]
1000982e:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
10009830:	23cd      	movs	r3, #205	; 0xcd
10009832:	009b      	lsls	r3, r3, #2
10009834:	459a      	cmp	sl, r3
10009836:	d100      	bne.n	1000983a <platform_event_wait+0x7a>
10009838:	e0c7      	b.n	100099ca <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000983a:	8923      	ldrh	r3, [r4, #8]
1000983c:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000983e:	8963      	ldrh	r3, [r4, #10]
10009840:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
10009842:	464b      	mov	r3, r9
10009844:	2b00      	cmp	r3, #0
10009846:	d011      	beq.n	1000986c <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
10009848:	220d      	movs	r2, #13
1000984a:	2100      	movs	r1, #0
1000984c:	a802      	add	r0, sp, #8
1000984e:	4b66      	ldr	r3, [pc, #408]	; (100099e8 <platform_event_wait+0x228>)
10009850:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
10009852:	2333      	movs	r3, #51	; 0x33
10009854:	aa02      	add	r2, sp, #8
10009856:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
10009858:	3b30      	subs	r3, #48	; 0x30
1000985a:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000985c:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000985e:	3302      	adds	r3, #2
10009860:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
10009862:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
10009864:	210d      	movs	r1, #13
10009866:	0010      	movs	r0, r2
10009868:	4b60      	ldr	r3, [pc, #384]	; (100099ec <platform_event_wait+0x22c>)
1000986a:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000986c:	23a0      	movs	r3, #160	; 0xa0
1000986e:	00db      	lsls	r3, r3, #3
10009870:	459a      	cmp	sl, r3
10009872:	d121      	bne.n	100098b8 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
10009874:	4b61      	ldr	r3, [pc, #388]	; (100099fc <platform_event_wait+0x23c>)
10009876:	881b      	ldrh	r3, [r3, #0]
10009878:	4443      	add	r3, r8
1000987a:	22a0      	movs	r2, #160	; 0xa0
1000987c:	0092      	lsls	r2, r2, #2
1000987e:	4293      	cmp	r3, r2
10009880:	dd02      	ble.n	10009888 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
10009882:	3a80      	subs	r2, #128	; 0x80
10009884:	4b5d      	ldr	r3, [pc, #372]	; (100099fc <platform_event_wait+0x23c>)
10009886:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
10009888:	4b5c      	ldr	r3, [pc, #368]	; (100099fc <platform_event_wait+0x23c>)
1000988a:	469a      	mov	sl, r3
1000988c:	881d      	ldrh	r5, [r3, #0]
1000988e:	4b5c      	ldr	r3, [pc, #368]	; (10009a00 <platform_event_wait+0x240>)
10009890:	18ed      	adds	r5, r5, r3
10009892:	0021      	movs	r1, r4
10009894:	310c      	adds	r1, #12
10009896:	4642      	mov	r2, r8
10009898:	0028      	movs	r0, r5
1000989a:	4b5a      	ldr	r3, [pc, #360]	; (10009a04 <platform_event_wait+0x244>)
1000989c:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000989e:	4642      	mov	r2, r8
100098a0:	0029      	movs	r1, r5
100098a2:	4658      	mov	r0, fp
100098a4:	4b58      	ldr	r3, [pc, #352]	; (10009a08 <platform_event_wait+0x248>)
100098a6:	4798      	blx	r3
				plf_event_buff_index += len;
100098a8:	4653      	mov	r3, sl
100098aa:	881b      	ldrh	r3, [r3, #0]
100098ac:	4443      	add	r3, r8
100098ae:	4652      	mov	r2, sl
100098b0:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
100098b2:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
100098b4:	2502      	movs	r5, #2
100098b6:	e03a      	b.n	1000992e <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
100098b8:	4b54      	ldr	r3, [pc, #336]	; (10009a0c <platform_event_wait+0x24c>)
100098ba:	681b      	ldr	r3, [r3, #0]
100098bc:	2b00      	cmp	r3, #0
100098be:	d032      	beq.n	10009926 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
100098c0:	4b4d      	ldr	r3, [pc, #308]	; (100099f8 <platform_event_wait+0x238>)
100098c2:	681a      	ldr	r2, [r3, #0]
100098c4:	8893      	ldrh	r3, [r2, #4]
100098c6:	21cd      	movs	r1, #205	; 0xcd
100098c8:	0089      	lsls	r1, r1, #2
100098ca:	428b      	cmp	r3, r1
100098cc:	d104      	bne.n	100098d8 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
100098ce:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
100098d0:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
100098d2:	2b00      	cmp	r3, #0
100098d4:	d02b      	beq.n	1000992e <platform_event_wait+0x16e>
100098d6:	e028      	b.n	1000992a <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
100098d8:	4c4d      	ldr	r4, [pc, #308]	; (10009a10 <platform_event_wait+0x250>)
100098da:	4d49      	ldr	r5, [pc, #292]	; (10009a00 <platform_event_wait+0x240>)
100098dc:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
100098de:	702b      	strb	r3, [r5, #0]
100098e0:	0a1b      	lsrs	r3, r3, #8
100098e2:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
100098e4:	8910      	ldrh	r0, [r2, #8]
100098e6:	4b4b      	ldr	r3, [pc, #300]	; (10009a14 <platform_event_wait+0x254>)
100098e8:	681b      	ldr	r3, [r3, #0]
100098ea:	4798      	blx	r3
100098ec:	7128      	strb	r0, [r5, #4]
100098ee:	0a00      	lsrs	r0, r0, #8
100098f0:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
100098f2:	6820      	ldr	r0, [r4, #0]
100098f4:	4b40      	ldr	r3, [pc, #256]	; (100099f8 <platform_event_wait+0x238>)
100098f6:	681a      	ldr	r2, [r3, #0]
100098f8:	88d2      	ldrh	r2, [r2, #6]
100098fa:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
100098fc:	681d      	ldr	r5, [r3, #0]
100098fe:	896b      	ldrh	r3, [r5, #10]
10009900:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
10009902:	3008      	adds	r0, #8
10009904:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
10009906:	896a      	ldrh	r2, [r5, #10]
10009908:	2a00      	cmp	r2, #0
1000990a:	d003      	beq.n	10009914 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000990c:	0029      	movs	r1, r5
1000990e:	310c      	adds	r1, #12
10009910:	4b3c      	ldr	r3, [pc, #240]	; (10009a04 <platform_event_wait+0x244>)
10009912:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
10009914:	8969      	ldrh	r1, [r5, #10]
10009916:	3108      	adds	r1, #8
10009918:	4b3c      	ldr	r3, [pc, #240]	; (10009a0c <platform_event_wait+0x24c>)
1000991a:	681b      	ldr	r3, [r3, #0]
1000991c:	4838      	ldr	r0, [pc, #224]	; (10009a00 <platform_event_wait+0x240>)
1000991e:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
10009920:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
10009922:	2503      	movs	r5, #3
10009924:	e003      	b.n	1000992e <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
10009926:	2400      	movs	r4, #0
10009928:	e001      	b.n	1000992e <platform_event_wait+0x16e>
1000992a:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000992c:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000992e:	4b32      	ldr	r3, [pc, #200]	; (100099f8 <platform_event_wait+0x238>)
10009930:	6818      	ldr	r0, [r3, #0]
10009932:	4b39      	ldr	r3, [pc, #228]	; (10009a18 <platform_event_wait+0x258>)
10009934:	681b      	ldr	r3, [r3, #0]
10009936:	4798      	blx	r3
10009938:	e000      	b.n	1000993c <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000993a:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000993c:	2c00      	cmp	r4, #0
1000993e:	d000      	beq.n	10009942 <platform_event_wait+0x182>
10009940:	e76b      	b.n	1000981a <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
10009942:	464b      	mov	r3, r9
10009944:	2b00      	cmp	r3, #0
10009946:	d046      	beq.n	100099d6 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
10009948:	4b29      	ldr	r3, [pc, #164]	; (100099f0 <platform_event_wait+0x230>)
1000994a:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000994c:	2e00      	cmp	r6, #0
1000994e:	d104      	bne.n	1000995a <platform_event_wait+0x19a>
10009950:	2300      	movs	r3, #0
10009952:	6a1c      	ldr	r4, [r3, #32]
10009954:	2c00      	cmp	r4, #0
10009956:	d131      	bne.n	100099bc <platform_event_wait+0x1fc>
10009958:	e03d      	b.n	100099d6 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000995a:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000995c:	2314      	movs	r3, #20
1000995e:	469c      	mov	ip, r3
10009960:	44b4      	add	ip, r6
10009962:	4663      	mov	r3, ip
10009964:	4660      	mov	r0, ip
10009966:	9300      	str	r3, [sp, #0]
10009968:	4b2c      	ldr	r3, [pc, #176]	; (10009a1c <platform_event_wait+0x25c>)
1000996a:	681b      	ldr	r3, [r3, #0]
1000996c:	4798      	blx	r3
	while(NULL != current)
1000996e:	2c00      	cmp	r4, #0
10009970:	d01f      	beq.n	100099b2 <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
10009972:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
10009974:	23cd      	movs	r3, #205	; 0xcd
10009976:	009b      	lsls	r3, r3, #2
10009978:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000997a:	4b27      	ldr	r3, [pc, #156]	; (10009a18 <platform_event_wait+0x258>)
1000997c:	469a      	mov	sl, r3
1000997e:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
10009980:	6803      	ldr	r3, [r0, #0]
10009982:	889b      	ldrh	r3, [r3, #4]
10009984:	4543      	cmp	r3, r8
10009986:	d110      	bne.n	100099aa <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
10009988:	2f00      	cmp	r7, #0
1000998a:	d006      	beq.n	1000999a <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000998c:	6883      	ldr	r3, [r0, #8]
1000998e:	60bb      	str	r3, [r7, #8]
				ke_free(current);
10009990:	4653      	mov	r3, sl
10009992:	681b      	ldr	r3, [r3, #0]
10009994:	4798      	blx	r3
				current = prev->pstrNext;
10009996:	68b8      	ldr	r0, [r7, #8]
10009998:	e009      	b.n	100099ae <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000999a:	6883      	ldr	r3, [r0, #8]
1000999c:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000999e:	4b1e      	ldr	r3, [pc, #120]	; (10009a18 <platform_event_wait+0x258>)
100099a0:	681b      	ldr	r3, [r3, #0]
100099a2:	9301      	str	r3, [sp, #4]
100099a4:	4798      	blx	r3
				current = pHandle->pstrMessageList;
100099a6:	6a30      	ldr	r0, [r6, #32]
100099a8:	e001      	b.n	100099ae <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
100099aa:	0007      	movs	r7, r0
100099ac:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
100099ae:	2800      	cmp	r0, #0
100099b0:	d1e6      	bne.n	10009980 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
100099b2:	4b1b      	ldr	r3, [pc, #108]	; (10009a20 <platform_event_wait+0x260>)
100099b4:	681b      	ldr	r3, [r3, #0]
100099b6:	9800      	ldr	r0, [sp, #0]
100099b8:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
100099ba:	e00c      	b.n	100099d6 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
100099bc:	2314      	movs	r3, #20
100099be:	9300      	str	r3, [sp, #0]
100099c0:	4b16      	ldr	r3, [pc, #88]	; (10009a1c <platform_event_wait+0x25c>)
100099c2:	681b      	ldr	r3, [r3, #0]
100099c4:	2014      	movs	r0, #20
100099c6:	4798      	blx	r3
100099c8:	e7d3      	b.n	10009972 <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
100099ca:	4b10      	ldr	r3, [pc, #64]	; (10009a0c <platform_event_wait+0x24c>)
100099cc:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
100099ce:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
100099d0:	2b00      	cmp	r3, #0
100099d2:	d0ac      	beq.n	1000992e <platform_event_wait+0x16e>
100099d4:	e77b      	b.n	100098ce <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
100099d6:	0028      	movs	r0, r5
100099d8:	b007      	add	sp, #28
100099da:	bc3c      	pop	{r2, r3, r4, r5}
100099dc:	4690      	mov	r8, r2
100099de:	4699      	mov	r9, r3
100099e0:	46a2      	mov	sl, r4
100099e2:	46ab      	mov	fp, r5
100099e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100099e6:	46c0      	nop			; (mov r8, r8)
100099e8:	10010e81 	.word	0x10010e81
100099ec:	10009731 	.word	0x10009731
100099f0:	100138a0 	.word	0x100138a0
100099f4:	10013888 	.word	0x10013888
100099f8:	1001385c 	.word	0x1001385c
100099fc:	1001568c 	.word	0x1001568c
10009a00:	100153f4 	.word	0x100153f4
10009a04:	10010e6f 	.word	0x10010e6f
10009a08:	10009351 	.word	0x10009351
10009a0c:	10013890 	.word	0x10013890
10009a10:	10013898 	.word	0x10013898
10009a14:	10013864 	.word	0x10013864
10009a18:	10013860 	.word	0x10013860
10009a1c:	10013880 	.word	0x10013880
10009a20:	1001386c 	.word	0x1001386c

10009a24 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
10009a24:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
10009a26:	4b03      	ldr	r3, [pc, #12]	; (10009a34 <acquire_sleep_lock+0x10>)
10009a28:	681b      	ldr	r3, [r3, #0]
10009a2a:	2080      	movs	r0, #128	; 0x80
10009a2c:	0200      	lsls	r0, r0, #8
10009a2e:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
10009a30:	2008      	movs	r0, #8
10009a32:	bd10      	pop	{r4, pc}
10009a34:	100153ac 	.word	0x100153ac

10009a38 <release_message_lock>:

plf_drv_status release_message_lock()
{
10009a38:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
10009a3a:	4b03      	ldr	r3, [pc, #12]	; (10009a48 <release_message_lock+0x10>)
10009a3c:	681b      	ldr	r3, [r3, #0]
10009a3e:	2080      	movs	r0, #128	; 0x80
10009a40:	01c0      	lsls	r0, r0, #7
10009a42:	4798      	blx	r3
	return status;
}
10009a44:	2000      	movs	r0, #0
10009a46:	bd10      	pop	{r4, pc}
10009a48:	100153b8 	.word	0x100153b8

10009a4c <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
10009a4c:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
10009a4e:	4c05      	ldr	r4, [pc, #20]	; (10009a64 <release_sleep_lock+0x18>)
10009a50:	2080      	movs	r0, #128	; 0x80
10009a52:	01c0      	lsls	r0, r0, #7
10009a54:	6823      	ldr	r3, [r4, #0]
10009a56:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
10009a58:	6823      	ldr	r3, [r4, #0]
10009a5a:	2080      	movs	r0, #128	; 0x80
10009a5c:	0200      	lsls	r0, r0, #8
10009a5e:	4798      	blx	r3
	return status;
}
10009a60:	2000      	movs	r0, #0
10009a62:	bd10      	pop	{r4, pc}
10009a64:	100153b8 	.word	0x100153b8

10009a68 <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
10009a68:	2800      	cmp	r0, #0
10009a6a:	d003      	beq.n	10009a74 <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
10009a6c:	4b02      	ldr	r3, [pc, #8]	; (10009a78 <register_resume_callback+0x10>)
10009a6e:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
10009a70:	2000      	movs	r0, #0
10009a72:	e000      	b.n	10009a76 <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
10009a74:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
10009a76:	4770      	bx	lr
10009a78:	10015680 	.word	0x10015680

10009a7c <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
10009a7c:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
10009a7e:	4a18      	ldr	r2, [pc, #96]	; (10009ae0 <gpio1_combined_isr_handler+0x64>)
10009a80:	8f13      	ldrh	r3, [r2, #56]	; 0x38
10009a82:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
10009a84:	8d10      	ldrh	r0, [r2, #40]	; 0x28
10009a86:	2180      	movs	r1, #128	; 0x80
10009a88:	0209      	lsls	r1, r1, #8
10009a8a:	4301      	orrs	r1, r0
10009a8c:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
10009a8e:	0010      	movs	r0, r2
10009a90:	4d14      	ldr	r5, [pc, #80]	; (10009ae4 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
10009a92:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
10009a94:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
10009a96:	05db      	lsls	r3, r3, #23
10009a98:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
10009a9a:	d011      	beq.n	10009ac0 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
10009a9c:	b2db      	uxtb	r3, r3
10009a9e:	4259      	negs	r1, r3
10009aa0:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
10009aa2:	2b01      	cmp	r3, #1
10009aa4:	d006      	beq.n	10009ab4 <gpio1_combined_isr_handler+0x38>
10009aa6:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
10009aa8:	085b      	lsrs	r3, r3, #1
				index++;
10009aaa:	3101      	adds	r1, #1
10009aac:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
10009aae:	2b01      	cmp	r3, #1
10009ab0:	d1fa      	bne.n	10009aa8 <gpio1_combined_isr_handler+0x2c>
10009ab2:	e000      	b.n	10009ab6 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
10009ab4:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
10009ab6:	0023      	movs	r3, r4
10009ab8:	408b      	lsls	r3, r1
10009aba:	b29b      	uxth	r3, r3
10009abc:	8703      	strh	r3, [r0, #56]	; 0x38
10009abe:	e003      	b.n	10009ac8 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
10009ac0:	8f03      	ldrh	r3, [r0, #56]	; 0x38
10009ac2:	432b      	orrs	r3, r5
10009ac4:	b29b      	uxth	r3, r3
10009ac6:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
10009ac8:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
10009aca:	05db      	lsls	r3, r3, #23
10009acc:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
10009ace:	d1e2      	bne.n	10009a96 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10009ad0:	2180      	movs	r1, #128	; 0x80
10009ad2:	0049      	lsls	r1, r1, #1
10009ad4:	3381      	adds	r3, #129	; 0x81
10009ad6:	33ff      	adds	r3, #255	; 0xff
10009ad8:	4a03      	ldr	r2, [pc, #12]	; (10009ae8 <gpio1_combined_isr_handler+0x6c>)
10009ada:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
10009adc:	bd30      	pop	{r4, r5, pc}
10009ade:	46c0      	nop			; (mov r8, r8)
10009ae0:	40011000 	.word	0x40011000
10009ae4:	ffff8000 	.word	0xffff8000
10009ae8:	e000e100 	.word	0xe000e100

10009aec <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
10009aec:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
10009aee:	4a17      	ldr	r2, [pc, #92]	; (10009b4c <gpio0_combined_isr_handler+0x60>)
10009af0:	8f13      	ldrh	r3, [r2, #56]	; 0x38
10009af2:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
10009af4:	8d10      	ldrh	r0, [r2, #40]	; 0x28
10009af6:	2180      	movs	r1, #128	; 0x80
10009af8:	0209      	lsls	r1, r1, #8
10009afa:	4301      	orrs	r1, r0
10009afc:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
10009afe:	0010      	movs	r0, r2
10009b00:	4d13      	ldr	r5, [pc, #76]	; (10009b50 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
10009b02:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
10009b04:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
10009b06:	05db      	lsls	r3, r3, #23
10009b08:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
10009b0a:	d011      	beq.n	10009b30 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
10009b0c:	b2db      	uxtb	r3, r3
10009b0e:	4259      	negs	r1, r3
10009b10:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
10009b12:	2b01      	cmp	r3, #1
10009b14:	d006      	beq.n	10009b24 <gpio0_combined_isr_handler+0x38>
10009b16:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
10009b18:	085b      	lsrs	r3, r3, #1
				index++;
10009b1a:	3101      	adds	r1, #1
10009b1c:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
10009b1e:	2b01      	cmp	r3, #1
10009b20:	d1fa      	bne.n	10009b18 <gpio0_combined_isr_handler+0x2c>
10009b22:	e000      	b.n	10009b26 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
10009b24:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
10009b26:	0023      	movs	r3, r4
10009b28:	408b      	lsls	r3, r1
10009b2a:	b29b      	uxth	r3, r3
10009b2c:	8703      	strh	r3, [r0, #56]	; 0x38
10009b2e:	e003      	b.n	10009b38 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
10009b30:	8f03      	ldrh	r3, [r0, #56]	; 0x38
10009b32:	432b      	orrs	r3, r5
10009b34:	b29b      	uxth	r3, r3
10009b36:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
10009b38:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
10009b3a:	05db      	lsls	r3, r3, #23
10009b3c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
10009b3e:	d1e2      	bne.n	10009b06 <gpio0_combined_isr_handler+0x1a>
10009b40:	2180      	movs	r1, #128	; 0x80
10009b42:	3381      	adds	r3, #129	; 0x81
10009b44:	33ff      	adds	r3, #255	; 0xff
10009b46:	4a03      	ldr	r2, [pc, #12]	; (10009b54 <gpio0_combined_isr_handler+0x68>)
10009b48:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
10009b4a:	bd30      	pop	{r4, r5, pc}
10009b4c:	40010000 	.word	0x40010000
10009b50:	ffff8000 	.word	0xffff8000
10009b54:	e000e100 	.word	0xe000e100

10009b58 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
10009b58:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
10009b5a:	4b0c      	ldr	r3, [pc, #48]	; (10009b8c <PORT1_COMB_Handler+0x34>)
10009b5c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
10009b5e:	0b5b      	lsrs	r3, r3, #13
10009b60:	d010      	beq.n	10009b84 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
10009b62:	4b0b      	ldr	r3, [pc, #44]	; (10009b90 <PORT1_COMB_Handler+0x38>)
10009b64:	681b      	ldr	r3, [r3, #0]
10009b66:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
10009b68:	4a08      	ldr	r2, [pc, #32]	; (10009b8c <PORT1_COMB_Handler+0x34>)
10009b6a:	8f13      	ldrh	r3, [r2, #56]	; 0x38
10009b6c:	8f11      	ldrh	r1, [r2, #56]	; 0x38
10009b6e:	0b5b      	lsrs	r3, r3, #13
10009b70:	035b      	lsls	r3, r3, #13
10009b72:	430b      	orrs	r3, r1
10009b74:	8713      	strh	r3, [r2, #56]	; 0x38
10009b76:	2180      	movs	r1, #128	; 0x80
10009b78:	0049      	lsls	r1, r1, #1
10009b7a:	23c0      	movs	r3, #192	; 0xc0
10009b7c:	005b      	lsls	r3, r3, #1
10009b7e:	4a05      	ldr	r2, [pc, #20]	; (10009b94 <PORT1_COMB_Handler+0x3c>)
10009b80:	50d1      	str	r1, [r2, r3]
10009b82:	e001      	b.n	10009b88 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
10009b84:	4b04      	ldr	r3, [pc, #16]	; (10009b98 <PORT1_COMB_Handler+0x40>)
10009b86:	4798      	blx	r3
	}
}
10009b88:	bd10      	pop	{r4, pc}
10009b8a:	46c0      	nop			; (mov r8, r8)
10009b8c:	40011000 	.word	0x40011000
10009b90:	10015678 	.word	0x10015678
10009b94:	e000e100 	.word	0xe000e100
10009b98:	10009a7d 	.word	0x10009a7d

10009b9c <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
10009b9c:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
10009b9e:	2802      	cmp	r0, #2
10009ba0:	d804      	bhi.n	10009bac <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
10009ba2:	0080      	lsls	r0, r0, #2
10009ba4:	2200      	movs	r2, #0
10009ba6:	4b02      	ldr	r3, [pc, #8]	; (10009bb0 <wakeup_int_unregister_callback+0x14>)
10009ba8:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
10009baa:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
10009bac:	0018      	movs	r0, r3
10009bae:	4770      	bx	lr
10009bb0:	10015690 	.word	0x10015690

10009bb4 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
10009bb4:	b510      	push	{r4, lr}
10009bb6:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
10009bb8:	7803      	ldrb	r3, [r0, #0]
10009bba:	2b01      	cmp	r3, #1
10009bbc:	d108      	bne.n	10009bd0 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
10009bbe:	4b11      	ldr	r3, [pc, #68]	; (10009c04 <wakeup_active_event_callback+0x50>)
10009bc0:	681b      	ldr	r3, [r3, #0]
10009bc2:	2b00      	cmp	r3, #0
10009bc4:	d000      	beq.n	10009bc8 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
10009bc6:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
10009bc8:	23ff      	movs	r3, #255	; 0xff
10009bca:	6822      	ldr	r2, [r4, #0]
10009bcc:	439a      	bics	r2, r3
10009bce:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
10009bd0:	7863      	ldrb	r3, [r4, #1]
10009bd2:	2b01      	cmp	r3, #1
10009bd4:	d108      	bne.n	10009be8 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
10009bd6:	4b0b      	ldr	r3, [pc, #44]	; (10009c04 <wakeup_active_event_callback+0x50>)
10009bd8:	685b      	ldr	r3, [r3, #4]
10009bda:	2b00      	cmp	r3, #0
10009bdc:	d000      	beq.n	10009be0 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
10009bde:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
10009be0:	4b09      	ldr	r3, [pc, #36]	; (10009c08 <wakeup_active_event_callback+0x54>)
10009be2:	6822      	ldr	r2, [r4, #0]
10009be4:	4013      	ands	r3, r2
10009be6:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
10009be8:	78a3      	ldrb	r3, [r4, #2]
10009bea:	2b01      	cmp	r3, #1
10009bec:	d108      	bne.n	10009c00 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
10009bee:	4b05      	ldr	r3, [pc, #20]	; (10009c04 <wakeup_active_event_callback+0x50>)
10009bf0:	689b      	ldr	r3, [r3, #8]
10009bf2:	2b00      	cmp	r3, #0
10009bf4:	d000      	beq.n	10009bf8 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
10009bf6:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
10009bf8:	4b04      	ldr	r3, [pc, #16]	; (10009c0c <wakeup_active_event_callback+0x58>)
10009bfa:	6822      	ldr	r2, [r4, #0]
10009bfc:	4013      	ands	r3, r2
10009bfe:	6023      	str	r3, [r4, #0]
	}
}
10009c00:	bd10      	pop	{r4, pc}
10009c02:	46c0      	nop			; (mov r8, r8)
10009c04:	10015690 	.word	0x10015690
10009c08:	ffff00ff 	.word	0xffff00ff
10009c0c:	ff00ffff 	.word	0xff00ffff

10009c10 <sms_ble_pair_request_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
10009c10:	b510      	push	{r4, lr}
10009c12:	b082      	sub	sp, #8
    at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
    DBG_LOG_DEV("[sms_ble_pair_request_fn]\tPairing request... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
10009c14:	4809      	ldr	r0, [pc, #36]	; (10009c3c <sms_ble_pair_request_fn+0x2c>)
10009c16:	4b0a      	ldr	r3, [pc, #40]	; (10009c40 <sms_ble_pair_request_fn+0x30>)
10009c18:	4798      	blx	r3
10009c1a:	4b0a      	ldr	r3, [pc, #40]	; (10009c44 <sms_ble_pair_request_fn+0x34>)
10009c1c:	781a      	ldrb	r2, [r3, #0]
10009c1e:	b2d2      	uxtb	r2, r2
10009c20:	4b09      	ldr	r3, [pc, #36]	; (10009c48 <sms_ble_pair_request_fn+0x38>)
10009c22:	781b      	ldrb	r3, [r3, #0]
10009c24:	b2db      	uxtb	r3, r3
10009c26:	4909      	ldr	r1, [pc, #36]	; (10009c4c <sms_ble_pair_request_fn+0x3c>)
10009c28:	7808      	ldrb	r0, [r1, #0]
10009c2a:	4909      	ldr	r1, [pc, #36]	; (10009c50 <sms_ble_pair_request_fn+0x40>)
10009c2c:	7b49      	ldrb	r1, [r1, #13]
10009c2e:	9000      	str	r0, [sp, #0]
10009c30:	4808      	ldr	r0, [pc, #32]	; (10009c54 <sms_ble_pair_request_fn+0x44>)
10009c32:	4c09      	ldr	r4, [pc, #36]	; (10009c58 <sms_ble_pair_request_fn+0x48>)
10009c34:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
    return AT_BLE_SUCCESS;
}
10009c36:	2000      	movs	r0, #0
10009c38:	b002      	add	sp, #8
10009c3a:	bd10      	pop	{r4, pc}
10009c3c:	1001227c 	.word	0x1001227c
10009c40:	10010fb1 	.word	0x10010fb1
10009c44:	1001570c 	.word	0x1001570c
10009c48:	1001569c 	.word	0x1001569c
10009c4c:	10015713 	.word	0x10015713
10009c50:	100156a4 	.word	0x100156a4
10009c54:	10012280 	.word	0x10012280
10009c58:	10010e91 	.word	0x10010e91

10009c5c <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10009c5c:	b510      	push	{r4, lr}
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_HIGH);
    
    at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
	sms_ble_sending = false;
10009c5e:	2400      	movs	r4, #0
10009c60:	4b09      	ldr	r3, [pc, #36]	; (10009c88 <sms_ble_notification_confirmed_fn+0x2c>)
10009c62:	701c      	strb	r4, [r3, #0]
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009c64:	2001      	movs	r0, #1
10009c66:	4b09      	ldr	r3, [pc, #36]	; (10009c8c <sms_ble_notification_confirmed_fn+0x30>)
10009c68:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10009c6a:	4b09      	ldr	r3, [pc, #36]	; (10009c90 <sms_ble_notification_confirmed_fn+0x34>)
10009c6c:	701c      	strb	r4, [r3, #0]
    ble_current_state = BLE_STATE_PAIRED;
10009c6e:	2222      	movs	r2, #34	; 0x22
10009c70:	4b08      	ldr	r3, [pc, #32]	; (10009c94 <sms_ble_notification_confirmed_fn+0x38>)
10009c72:	701a      	strb	r2, [r3, #0]
    //DBG_LOG_CONT_DEV(" done!");

    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    //DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10009c74:	4b08      	ldr	r3, [pc, #32]	; (10009c98 <sms_ble_notification_confirmed_fn+0x3c>)
10009c76:	781b      	ldrb	r3, [r3, #0]
10009c78:	2b00      	cmp	r3, #0
10009c7a:	d102      	bne.n	10009c82 <sms_ble_notification_confirmed_fn+0x26>
        ulp_ready = true;
10009c7c:	3a21      	subs	r2, #33	; 0x21
10009c7e:	4b07      	ldr	r3, [pc, #28]	; (10009c9c <sms_ble_notification_confirmed_fn+0x40>)
10009c80:	701a      	strb	r2, [r3, #0]
    }
    return AT_BLE_SUCCESS;
}
10009c82:	2000      	movs	r0, #0
10009c84:	bd10      	pop	{r4, pc}
10009c86:	46c0      	nop			; (mov r8, r8)
10009c88:	1001569d 	.word	0x1001569d
10009c8c:	1000a731 	.word	0x1000a731
10009c90:	10015713 	.word	0x10015713
10009c94:	1001570c 	.word	0x1001570c
10009c98:	1001569c 	.word	0x1001569c
10009c9c:	1001569f 	.word	0x1001569f

10009ca0 <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
10009ca0:	b510      	push	{r4, lr}
    
    at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10009ca2:	2001      	movs	r0, #1
10009ca4:	4b08      	ldr	r3, [pc, #32]	; (10009cc8 <sms_ble_indication_confirmed_fn+0x28>)
10009ca6:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10009ca8:	2200      	movs	r2, #0
10009caa:	4b08      	ldr	r3, [pc, #32]	; (10009ccc <sms_ble_indication_confirmed_fn+0x2c>)
10009cac:	701a      	strb	r2, [r3, #0]
    ble_current_state = BLE_STATE_PAIRED;
10009cae:	3222      	adds	r2, #34	; 0x22
10009cb0:	4b07      	ldr	r3, [pc, #28]	; (10009cd0 <sms_ble_indication_confirmed_fn+0x30>)
10009cb2:	701a      	strb	r2, [r3, #0]
    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
    
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10009cb4:	4b07      	ldr	r3, [pc, #28]	; (10009cd4 <sms_ble_indication_confirmed_fn+0x34>)
10009cb6:	781b      	ldrb	r3, [r3, #0]
10009cb8:	2b00      	cmp	r3, #0
10009cba:	d102      	bne.n	10009cc2 <sms_ble_indication_confirmed_fn+0x22>
        ulp_ready = true;
10009cbc:	3a21      	subs	r2, #33	; 0x21
10009cbe:	4b06      	ldr	r3, [pc, #24]	; (10009cd8 <sms_ble_indication_confirmed_fn+0x38>)
10009cc0:	701a      	strb	r2, [r3, #0]
    }        
    return AT_BLE_SUCCESS;
}
10009cc2:	2000      	movs	r0, #0
10009cc4:	bd10      	pop	{r4, pc}
10009cc6:	46c0      	nop			; (mov r8, r8)
10009cc8:	1000a731 	.word	0x1000a731
10009ccc:	10015713 	.word	0x10015713
10009cd0:	1001570c 	.word	0x1001570c
10009cd4:	1001569c 	.word	0x1001569c
10009cd8:	1001569f 	.word	0x1001569f

10009cdc <sms_ble_startup>:
#include <stdio.h>
//#include <stdlib.h>
#include "sms_remote1.h"

void sms_ble_startup(void)
{
10009cdc:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    timer2_current_mode = TIMER2_MODE_LED_STARTUP;
10009cde:	2202      	movs	r2, #2
10009ce0:	4b02      	ldr	r3, [pc, #8]	; (10009cec <sms_ble_startup+0x10>)
10009ce2:	701a      	strb	r2, [r3, #0]
    sms_led_blink_start(SMS_LED_0_PIN);
10009ce4:	2016      	movs	r0, #22
10009ce6:	4b02      	ldr	r3, [pc, #8]	; (10009cf0 <sms_ble_startup+0x14>)
10009ce8:	4798      	blx	r3
}
10009cea:	bd10      	pop	{r4, pc}
10009cec:	10015713 	.word	0x10015713
10009cf0:	1000a639 	.word	0x1000a639

10009cf4 <sms_ble_power_down>:

void sms_ble_power_down(void)
{
10009cf4:	b510      	push	{r4, lr}
    sms_monitor_get_states("[sms_ble_power_down]");
10009cf6:	482b      	ldr	r0, [pc, #172]	; (10009da4 <sms_ble_power_down+0xb0>)
10009cf8:	4b2b      	ldr	r3, [pc, #172]	; (10009da8 <sms_ble_power_down+0xb4>)
10009cfa:	4798      	blx	r3
    if(ble_current_state == BLE_STATE_POWEROFF) {
10009cfc:	4b2b      	ldr	r3, [pc, #172]	; (10009dac <sms_ble_power_down+0xb8>)
10009cfe:	781b      	ldrb	r3, [r3, #0]
10009d00:	2b00      	cmp	r3, #0
10009d02:	d10b      	bne.n	10009d1c <sms_ble_power_down+0x28>
        /* If already power off state, then go back sleeping */
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        ulp_ready = true;
10009d04:	2201      	movs	r2, #1
10009d06:	4b2a      	ldr	r3, [pc, #168]	; (10009db0 <sms_ble_power_down+0xbc>)
10009d08:	701a      	strb	r2, [r3, #0]
		DBG_LOG_DEV("Good night");
10009d0a:	482a      	ldr	r0, [pc, #168]	; (10009db4 <sms_ble_power_down+0xc0>)
10009d0c:	4b2a      	ldr	r3, [pc, #168]	; (10009db8 <sms_ble_power_down+0xc4>)
10009d0e:	4798      	blx	r3
10009d10:	482a      	ldr	r0, [pc, #168]	; (10009dbc <sms_ble_power_down+0xc8>)
10009d12:	4b2b      	ldr	r3, [pc, #172]	; (10009dc0 <sms_ble_power_down+0xcc>)
10009d14:	4798      	blx	r3
        release_sleep_lock();
10009d16:	4b2b      	ldr	r3, [pc, #172]	; (10009dc4 <sms_ble_power_down+0xd0>)
10009d18:	4798      	blx	r3
10009d1a:	e042      	b.n	10009da2 <sms_ble_power_down+0xae>
    }
    else {
        /* Disable button interrupts */
        //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);        
        /* Disconnect if necessary from BLE network */
        switch(ble_current_state) {
10009d1c:	4b23      	ldr	r3, [pc, #140]	; (10009dac <sms_ble_power_down+0xb8>)
10009d1e:	781b      	ldrb	r3, [r3, #0]
10009d20:	b2db      	uxtb	r3, r3
10009d22:	2b21      	cmp	r3, #33	; 0x21
10009d24:	d029      	beq.n	10009d7a <sms_ble_power_down+0x86>
10009d26:	d802      	bhi.n	10009d2e <sms_ble_power_down+0x3a>
10009d28:	2b20      	cmp	r3, #32
10009d2a:	d005      	beq.n	10009d38 <sms_ble_power_down+0x44>
10009d2c:	e030      	b.n	10009d90 <sms_ble_power_down+0x9c>
10009d2e:	2b22      	cmp	r3, #34	; 0x22
10009d30:	d017      	beq.n	10009d62 <sms_ble_power_down+0x6e>
10009d32:	2b23      	cmp	r3, #35	; 0x23
10009d34:	d01b      	beq.n	10009d6e <sms_ble_power_down+0x7a>
10009d36:	e02b      	b.n	10009d90 <sms_ble_power_down+0x9c>
            case BLE_STATE_ADVERTISING:
            DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
10009d38:	481e      	ldr	r0, [pc, #120]	; (10009db4 <sms_ble_power_down+0xc0>)
10009d3a:	4b1f      	ldr	r3, [pc, #124]	; (10009db8 <sms_ble_power_down+0xc4>)
10009d3c:	4798      	blx	r3
10009d3e:	4822      	ldr	r0, [pc, #136]	; (10009dc8 <sms_ble_power_down+0xd4>)
10009d40:	4b1f      	ldr	r3, [pc, #124]	; (10009dc0 <sms_ble_power_down+0xcc>)
10009d42:	4798      	blx	r3
            if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10009d44:	4b21      	ldr	r3, [pc, #132]	; (10009dcc <sms_ble_power_down+0xd8>)
10009d46:	4798      	blx	r3
10009d48:	2800      	cmp	r0, #0
10009d4a:	d003      	beq.n	10009d54 <sms_ble_power_down+0x60>
                DBG_LOG_CONT_DEV("failed!!!");
10009d4c:	4820      	ldr	r0, [pc, #128]	; (10009dd0 <sms_ble_power_down+0xdc>)
10009d4e:	4b1c      	ldr	r3, [pc, #112]	; (10009dc0 <sms_ble_power_down+0xcc>)
10009d50:	4798      	blx	r3
10009d52:	e01d      	b.n	10009d90 <sms_ble_power_down+0x9c>
                //#pragma TBD: manage adv_stop failure
            }
            else {
                DBG_LOG_CONT_DEV("done!");
10009d54:	481f      	ldr	r0, [pc, #124]	; (10009dd4 <sms_ble_power_down+0xe0>)
10009d56:	4b1a      	ldr	r3, [pc, #104]	; (10009dc0 <sms_ble_power_down+0xcc>)
10009d58:	4798      	blx	r3
                ble_current_state = BLE_STATE_DISCONNECTED;
10009d5a:	2211      	movs	r2, #17
10009d5c:	4b13      	ldr	r3, [pc, #76]	; (10009dac <sms_ble_power_down+0xb8>)
10009d5e:	701a      	strb	r2, [r3, #0]
10009d60:	e016      	b.n	10009d90 <sms_ble_power_down+0x9c>
            }
            break;
            
            case BLE_STATE_PAIRED:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
10009d62:	4814      	ldr	r0, [pc, #80]	; (10009db4 <sms_ble_power_down+0xc0>)
10009d64:	4b14      	ldr	r3, [pc, #80]	; (10009db8 <sms_ble_power_down+0xc4>)
10009d66:	4798      	blx	r3
10009d68:	481b      	ldr	r0, [pc, #108]	; (10009dd8 <sms_ble_power_down+0xe4>)
10009d6a:	4b15      	ldr	r3, [pc, #84]	; (10009dc0 <sms_ble_power_down+0xcc>)
10009d6c:	4798      	blx	r3
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
10009d6e:	4811      	ldr	r0, [pc, #68]	; (10009db4 <sms_ble_power_down+0xc0>)
10009d70:	4b11      	ldr	r3, [pc, #68]	; (10009db8 <sms_ble_power_down+0xc4>)
10009d72:	4798      	blx	r3
10009d74:	4819      	ldr	r0, [pc, #100]	; (10009ddc <sms_ble_power_down+0xe8>)
10009d76:	4b12      	ldr	r3, [pc, #72]	; (10009dc0 <sms_ble_power_down+0xcc>)
10009d78:	4798      	blx	r3
            //#pragma TBD: switch-off sensors to save current
            //sms_sensors_switch(false);
            
            case BLE_STATE_CONNECTED:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
10009d7a:	480e      	ldr	r0, [pc, #56]	; (10009db4 <sms_ble_power_down+0xc0>)
10009d7c:	4b0e      	ldr	r3, [pc, #56]	; (10009db8 <sms_ble_power_down+0xc4>)
10009d7e:	4798      	blx	r3
10009d80:	4817      	ldr	r0, [pc, #92]	; (10009de0 <sms_ble_power_down+0xec>)
10009d82:	4b0f      	ldr	r3, [pc, #60]	; (10009dc0 <sms_ble_power_down+0xcc>)
10009d84:	4798      	blx	r3
            at_ble_disconnect(sms_connection_handle, AT_BLE_TERMINATED_BY_USER);
10009d86:	4b17      	ldr	r3, [pc, #92]	; (10009de4 <sms_ble_power_down+0xf0>)
10009d88:	8818      	ldrh	r0, [r3, #0]
10009d8a:	2113      	movs	r1, #19
10009d8c:	4b16      	ldr	r3, [pc, #88]	; (10009de8 <sms_ble_power_down+0xf4>)
10009d8e:	4798      	blx	r3
            
            default:
            break;
        }
        
        ble_current_state = BLE_STATE_DISCONNECTED;
10009d90:	2211      	movs	r2, #17
10009d92:	4b06      	ldr	r3, [pc, #24]	; (10009dac <sms_ble_power_down+0xb8>)
10009d94:	701a      	strb	r2, [r3, #0]
        timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
10009d96:	3a0e      	subs	r2, #14
10009d98:	4b14      	ldr	r3, [pc, #80]	; (10009dec <sms_ble_power_down+0xf8>)
10009d9a:	701a      	strb	r2, [r3, #0]
        sms_led_blink_start(SMS_LED_0_PIN);
10009d9c:	2016      	movs	r0, #22
10009d9e:	4b14      	ldr	r3, [pc, #80]	; (10009df0 <sms_ble_power_down+0xfc>)
10009da0:	4798      	blx	r3
    }
}
10009da2:	bd10      	pop	{r4, pc}
10009da4:	100122d0 	.word	0x100122d0
10009da8:	1000a595 	.word	0x1000a595
10009dac:	1001570c 	.word	0x1001570c
10009db0:	1001569f 	.word	0x1001569f
10009db4:	1001227c 	.word	0x1001227c
10009db8:	10010fb1 	.word	0x10010fb1
10009dbc:	100122e8 	.word	0x100122e8
10009dc0:	10010e91 	.word	0x10010e91
10009dc4:	10009a4d 	.word	0x10009a4d
10009dc8:	100122f4 	.word	0x100122f4
10009dcc:	1000d66d 	.word	0x1000d66d
10009dd0:	10012348 	.word	0x10012348
10009dd4:	10012354 	.word	0x10012354
10009dd8:	1001235c 	.word	0x1001235c
10009ddc:	100123b4 	.word	0x100123b4
10009de0:	100123e0 	.word	0x100123e0
10009de4:	100156a0 	.word	0x100156a0
10009de8:	1000d699 	.word	0x1000d699
10009dec:	10015713 	.word	0x10015713
10009df0:	1000a639 	.word	0x1000a639

10009df4 <sms_ble_adv_report_fn>:
    return status;
}

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
10009df4:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
    ble_current_state = BLE_STATE_DISCONNECTED;
10009df6:	2211      	movs	r2, #17
10009df8:	4b05      	ldr	r3, [pc, #20]	; (10009e10 <sms_ble_adv_report_fn+0x1c>)
10009dfa:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_adv_report_fn]\tAdvertisement timeout...");
10009dfc:	4805      	ldr	r0, [pc, #20]	; (10009e14 <sms_ble_adv_report_fn+0x20>)
10009dfe:	4b06      	ldr	r3, [pc, #24]	; (10009e18 <sms_ble_adv_report_fn+0x24>)
10009e00:	4798      	blx	r3
10009e02:	4806      	ldr	r0, [pc, #24]	; (10009e1c <sms_ble_adv_report_fn+0x28>)
10009e04:	4b06      	ldr	r3, [pc, #24]	; (10009e20 <sms_ble_adv_report_fn+0x2c>)
10009e06:	4798      	blx	r3
    //DBG_LOG_DEV("- status: 0x%02x", adv_report->status);
    sms_ble_power_down();
10009e08:	4b06      	ldr	r3, [pc, #24]	; (10009e24 <sms_ble_adv_report_fn+0x30>)
10009e0a:	4798      	blx	r3
    return AT_BLE_SUCCESS;
}
10009e0c:	2000      	movs	r0, #0
10009e0e:	bd10      	pop	{r4, pc}
10009e10:	1001570c 	.word	0x1001570c
10009e14:	1001227c 	.word	0x1001227c
10009e18:	10010fb1 	.word	0x10010fb1
10009e1c:	10012418 	.word	0x10012418
10009e20:	10010e91 	.word	0x10010e91
10009e24:	10009cf5 	.word	0x10009cf5

10009e28 <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
10009e28:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_ADVERTISING) {
10009e2a:	4b0a      	ldr	r3, [pc, #40]	; (10009e54 <sms_ble_connected_fn+0x2c>)
10009e2c:	781b      	ldrb	r3, [r3, #0]
10009e2e:	2b20      	cmp	r3, #32
10009e30:	d10c      	bne.n	10009e4c <sms_ble_connected_fn+0x24>
        at_ble_connected_t *connected = (at_ble_connected_t *)params;
        sms_ble_conn_handle = connected->handle;
10009e32:	8902      	ldrh	r2, [r0, #8]
10009e34:	4b08      	ldr	r3, [pc, #32]	; (10009e58 <sms_ble_connected_fn+0x30>)
10009e36:	801a      	strh	r2, [r3, #0]
        ble_current_state = BLE_STATE_CONNECTED;
10009e38:	2221      	movs	r2, #33	; 0x21
10009e3a:	4b06      	ldr	r3, [pc, #24]	; (10009e54 <sms_ble_connected_fn+0x2c>)
10009e3c:	701a      	strb	r2, [r3, #0]
        DBG_LOG_DEV("[sms_ble_connected_fn]\t\tDevices connected...");
10009e3e:	4807      	ldr	r0, [pc, #28]	; (10009e5c <sms_ble_connected_fn+0x34>)
10009e40:	4b07      	ldr	r3, [pc, #28]	; (10009e60 <sms_ble_connected_fn+0x38>)
10009e42:	4798      	blx	r3
10009e44:	4807      	ldr	r0, [pc, #28]	; (10009e64 <sms_ble_connected_fn+0x3c>)
10009e46:	4b08      	ldr	r3, [pc, #32]	; (10009e68 <sms_ble_connected_fn+0x40>)
10009e48:	4798      	blx	r3
10009e4a:	e001      	b.n	10009e50 <sms_ble_connected_fn+0x28>
        //for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
            //DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
        //}            
    }
    else {
        sms_ble_power_down();
10009e4c:	4b07      	ldr	r3, [pc, #28]	; (10009e6c <sms_ble_connected_fn+0x44>)
10009e4e:	4798      	blx	r3
    }    
    return AT_BLE_SUCCESS;
}
10009e50:	2000      	movs	r0, #0
10009e52:	bd10      	pop	{r4, pc}
10009e54:	1001570c 	.word	0x1001570c
10009e58:	1001570a 	.word	0x1001570a
10009e5c:	1001227c 	.word	0x1001227c
10009e60:	10010fb1 	.word	0x10010fb1
10009e64:	1001244c 	.word	0x1001244c
10009e68:	10010e91 	.word	0x10010e91
10009e6c:	10009cf5 	.word	0x10009cf5

10009e70 <sms_ble_paired_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
10009e70:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_CONNECTED) {
10009e72:	4b07      	ldr	r3, [pc, #28]	; (10009e90 <sms_ble_paired_fn+0x20>)
10009e74:	781b      	ldrb	r3, [r3, #0]
10009e76:	2b21      	cmp	r3, #33	; 0x21
10009e78:	d106      	bne.n	10009e88 <sms_ble_paired_fn+0x18>
        ble_current_state = BLE_STATE_PAIRED;
10009e7a:	2222      	movs	r2, #34	; 0x22
10009e7c:	4b04      	ldr	r3, [pc, #16]	; (10009e90 <sms_ble_paired_fn+0x20>)
10009e7e:	701a      	strb	r2, [r3, #0]
        at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
        sms_monitor_get_states("[sms_ble_paired_fn]");
10009e80:	4804      	ldr	r0, [pc, #16]	; (10009e94 <sms_ble_paired_fn+0x24>)
10009e82:	4b05      	ldr	r3, [pc, #20]	; (10009e98 <sms_ble_paired_fn+0x28>)
10009e84:	4798      	blx	r3
10009e86:	e001      	b.n	10009e8c <sms_ble_paired_fn+0x1c>
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    }
    else {
        sms_ble_power_down();
10009e88:	4b04      	ldr	r3, [pc, #16]	; (10009e9c <sms_ble_paired_fn+0x2c>)
10009e8a:	4798      	blx	r3
    }        
    return AT_BLE_SUCCESS;
}
10009e8c:	2000      	movs	r0, #0
10009e8e:	bd10      	pop	{r4, pc}
10009e90:	1001570c 	.word	0x1001570c
10009e94:	1001247c 	.word	0x1001247c
10009e98:	1000a595 	.word	0x1000a595
10009e9c:	10009cf5 	.word	0x10009cf5

10009ea0 <sms_ble_advertise>:
        sms_led_blink_start(SMS_LED_0_PIN);
    }
}

at_ble_status_t sms_ble_advertise(void)
{
10009ea0:	b530      	push	{r4, r5, lr}
10009ea2:	b085      	sub	sp, #20
    at_ble_status_t status = AT_BLE_FAILURE;
    ble_current_state = BLE_STATE_ADVERTISING;
10009ea4:	2220      	movs	r2, #32
10009ea6:	4b19      	ldr	r3, [pc, #100]	; (10009f0c <sms_ble_advertise+0x6c>)
10009ea8:	701a      	strb	r2, [r3, #0]

    /* Set the advertisement data */
    if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
10009eaa:	4b19      	ldr	r3, [pc, #100]	; (10009f10 <sms_ble_advertise+0x70>)
10009eac:	4798      	blx	r3
10009eae:	1e04      	subs	r4, r0, #0
10009eb0:	d007      	beq.n	10009ec2 <sms_ble_advertise+0x22>
        DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
10009eb2:	4818      	ldr	r0, [pc, #96]	; (10009f14 <sms_ble_advertise+0x74>)
10009eb4:	4b18      	ldr	r3, [pc, #96]	; (10009f18 <sms_ble_advertise+0x78>)
10009eb6:	4798      	blx	r3
10009eb8:	4818      	ldr	r0, [pc, #96]	; (10009f1c <sms_ble_advertise+0x7c>)
10009eba:	4b19      	ldr	r3, [pc, #100]	; (10009f20 <sms_ble_advertise+0x80>)
10009ebc:	4798      	blx	r3
        return status;
10009ebe:	0020      	movs	r0, r4
10009ec0:	e022      	b.n	10009f08 <sms_ble_advertise+0x68>
    }

    /* Start of advertisement */
    if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
10009ec2:	2300      	movs	r3, #0
10009ec4:	9302      	str	r3, [sp, #8]
10009ec6:	4b17      	ldr	r3, [pc, #92]	; (10009f24 <sms_ble_advertise+0x84>)
10009ec8:	9301      	str	r3, [sp, #4]
10009eca:	23c8      	movs	r3, #200	; 0xc8
10009ecc:	00db      	lsls	r3, r3, #3
10009ece:	9300      	str	r3, [sp, #0]
10009ed0:	2300      	movs	r3, #0
10009ed2:	2200      	movs	r2, #0
10009ed4:	2101      	movs	r1, #1
10009ed6:	2000      	movs	r0, #0
10009ed8:	4c13      	ldr	r4, [pc, #76]	; (10009f28 <sms_ble_advertise+0x88>)
10009eda:	47a0      	blx	r4
10009edc:	0005      	movs	r5, r0
10009ede:	1e04      	subs	r4, r0, #0
10009ee0:	d106      	bne.n	10009ef0 <sms_ble_advertise+0x50>
    {
        DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
10009ee2:	480c      	ldr	r0, [pc, #48]	; (10009f14 <sms_ble_advertise+0x74>)
10009ee4:	4b0c      	ldr	r3, [pc, #48]	; (10009f18 <sms_ble_advertise+0x78>)
10009ee6:	4798      	blx	r3
10009ee8:	4810      	ldr	r0, [pc, #64]	; (10009f2c <sms_ble_advertise+0x8c>)
10009eea:	4b0d      	ldr	r3, [pc, #52]	; (10009f20 <sms_ble_advertise+0x80>)
10009eec:	4798      	blx	r3
10009eee:	e007      	b.n	10009f00 <sms_ble_advertise+0x60>
        status = AT_BLE_SUCCESS;
    } 
    else {
        DBG_LOG("[sms_service_advertise]\tBLE Advertisement start failed: reason 0x%x", status);
10009ef0:	4808      	ldr	r0, [pc, #32]	; (10009f14 <sms_ble_advertise+0x74>)
10009ef2:	4b09      	ldr	r3, [pc, #36]	; (10009f18 <sms_ble_advertise+0x78>)
10009ef4:	4798      	blx	r3
10009ef6:	0029      	movs	r1, r5
10009ef8:	480d      	ldr	r0, [pc, #52]	; (10009f30 <sms_ble_advertise+0x90>)
10009efa:	4b09      	ldr	r3, [pc, #36]	; (10009f20 <sms_ble_advertise+0x80>)
10009efc:	4798      	blx	r3
		status = AT_BLE_FAILURE;
10009efe:	24e2      	movs	r4, #226	; 0xe2
    }
	ulp_ready = true;
10009f00:	2201      	movs	r2, #1
10009f02:	4b0c      	ldr	r3, [pc, #48]	; (10009f34 <sms_ble_advertise+0x94>)
10009f04:	701a      	strb	r2, [r3, #0]
    return status;
10009f06:	0020      	movs	r0, r4
}
10009f08:	b005      	add	sp, #20
10009f0a:	bd30      	pop	{r4, r5, pc}
10009f0c:	1001570c 	.word	0x1001570c
10009f10:	1000c16d 	.word	0x1000c16d
10009f14:	1001227c 	.word	0x1001227c
10009f18:	10010fb1 	.word	0x10010fb1
10009f1c:	10012490 	.word	0x10012490
10009f20:	10010e91 	.word	0x10010e91
10009f24:	0000028f 	.word	0x0000028f
10009f28:	1000d531 	.word	0x1000d531
10009f2c:	100124c4 	.word	0x100124c4
10009f30:	100124f4 	.word	0x100124f4
10009f34:	1001569f 	.word	0x1001569f

10009f38 <sms_ble_disconnected_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
10009f38:	b530      	push	{r4, r5, lr}
10009f3a:	b083      	sub	sp, #12
10009f3c:	0005      	movs	r5, r0
    at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
    if(ble_current_state == BLE_STATE_PAIRED) {
10009f3e:	4c15      	ldr	r4, [pc, #84]	; (10009f94 <sms_ble_disconnected_fn+0x5c>)
10009f40:	7823      	ldrb	r3, [r4, #0]
    }
    ble_current_state = BLE_STATE_DISCONNECTED;
10009f42:	2311      	movs	r3, #17
10009f44:	7023      	strb	r3, [r4, #0]
    DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
10009f46:	4814      	ldr	r0, [pc, #80]	; (10009f98 <sms_ble_disconnected_fn+0x60>)
10009f48:	4b14      	ldr	r3, [pc, #80]	; (10009f9c <sms_ble_disconnected_fn+0x64>)
10009f4a:	4798      	blx	r3
10009f4c:	7822      	ldrb	r2, [r4, #0]
10009f4e:	b2d2      	uxtb	r2, r2
10009f50:	4b13      	ldr	r3, [pc, #76]	; (10009fa0 <sms_ble_disconnected_fn+0x68>)
10009f52:	781b      	ldrb	r3, [r3, #0]
10009f54:	b2db      	uxtb	r3, r3
10009f56:	4913      	ldr	r1, [pc, #76]	; (10009fa4 <sms_ble_disconnected_fn+0x6c>)
10009f58:	7808      	ldrb	r0, [r1, #0]
10009f5a:	4913      	ldr	r1, [pc, #76]	; (10009fa8 <sms_ble_disconnected_fn+0x70>)
10009f5c:	7b49      	ldrb	r1, [r1, #13]
10009f5e:	9000      	str	r0, [sp, #0]
10009f60:	4812      	ldr	r0, [pc, #72]	; (10009fac <sms_ble_disconnected_fn+0x74>)
10009f62:	4c13      	ldr	r4, [pc, #76]	; (10009fb0 <sms_ble_disconnected_fn+0x78>)
10009f64:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
    switch(disconnect->reason) {
10009f66:	78ab      	ldrb	r3, [r5, #2]
10009f68:	2b1a      	cmp	r3, #26
10009f6a:	d00b      	beq.n	10009f84 <sms_ble_disconnected_fn+0x4c>
10009f6c:	b2da      	uxtb	r2, r3
10009f6e:	2a1a      	cmp	r2, #26
10009f70:	d804      	bhi.n	10009f7c <sms_ble_disconnected_fn+0x44>
10009f72:	2b05      	cmp	r3, #5
10009f74:	d006      	beq.n	10009f84 <sms_ble_disconnected_fn+0x4c>
10009f76:	2b08      	cmp	r3, #8
10009f78:	d107      	bne.n	10009f8a <sms_ble_disconnected_fn+0x52>
10009f7a:	e003      	b.n	10009f84 <sms_ble_disconnected_fn+0x4c>
10009f7c:	2b29      	cmp	r3, #41	; 0x29
10009f7e:	d001      	beq.n	10009f84 <sms_ble_disconnected_fn+0x4c>
10009f80:	2b3b      	cmp	r3, #59	; 0x3b
10009f82:	d102      	bne.n	10009f8a <sms_ble_disconnected_fn+0x52>
        case AT_BLE_AUTH_FAILURE: //0x05
        case AT_BLE_SUPERVISION_TIMEOUT: //0x08
        case AT_BLE_UNSUPPORTED_REMOTE_FEATURE: // 0x1A
        case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
        case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
        sms_ble_advertise();
10009f84:	4b0b      	ldr	r3, [pc, #44]	; (10009fb4 <sms_ble_disconnected_fn+0x7c>)
10009f86:	4798      	blx	r3
        break;
10009f88:	e001      	b.n	10009f8e <sms_ble_disconnected_fn+0x56>
        case AT_BLE_TERMINATED_BY_USER: // 0x13
        case AT_BLE_REMOTE_DEV_TERM_LOW_RESOURCES: //0x14
        case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
        case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
        default:
        sms_ble_power_down();
10009f8a:	4b0b      	ldr	r3, [pc, #44]	; (10009fb8 <sms_ble_disconnected_fn+0x80>)
10009f8c:	4798      	blx	r3
        break;
    }
    
    return AT_BLE_SUCCESS;
}
10009f8e:	2000      	movs	r0, #0
10009f90:	b003      	add	sp, #12
10009f92:	bd30      	pop	{r4, r5, pc}
10009f94:	1001570c 	.word	0x1001570c
10009f98:	1001227c 	.word	0x1001227c
10009f9c:	10010fb1 	.word	0x10010fb1
10009fa0:	1001569c 	.word	0x1001569c
10009fa4:	10015713 	.word	0x10015713
10009fa8:	100156a4 	.word	0x100156a4
10009fac:	10012538 	.word	0x10012538
10009fb0:	10010e91 	.word	0x10010e91
10009fb4:	10009ea1 	.word	0x10009ea1
10009fb8:	10009cf5 	.word	0x10009cf5

10009fbc <sms_ble_send_characteristic>:
    NULL, //ble_characteristic_write_cmd_cmp
    NULL //ble_read_authorize_request_handler
};

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
10009fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
10009fbe:	b083      	sub	sp, #12
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
    uint8_t char_size = 0;
    uint8_t send_val[BLE_CHAR_SIZE_MAX];
    ble_current_state = BLE_STATE_INDICATING;
10009fc0:	2223      	movs	r2, #35	; 0x23
10009fc2:	4b43      	ldr	r3, [pc, #268]	; (1000a0d0 <sms_ble_send_characteristic+0x114>)
10009fc4:	701a      	strb	r2, [r3, #0]

    
	sms_ble_sending = true;
10009fc6:	3a22      	subs	r2, #34	; 0x22
10009fc8:	4b42      	ldr	r3, [pc, #264]	; (1000a0d4 <sms_ble_send_characteristic+0x118>)
10009fca:	701a      	strb	r2, [r3, #0]
    sms_ble_send_cnt++;
10009fcc:	4a42      	ldr	r2, [pc, #264]	; (1000a0d8 <sms_ble_send_characteristic+0x11c>)
10009fce:	8813      	ldrh	r3, [r2, #0]
10009fd0:	3301      	adds	r3, #1
10009fd2:	8013      	strh	r3, [r2, #0]
    
    switch(ch) {
10009fd4:	2801      	cmp	r0, #1
10009fd6:	d030      	beq.n	1000a03a <sms_ble_send_characteristic+0x7e>
10009fd8:	2800      	cmp	r0, #0
10009fda:	d002      	beq.n	10009fe2 <sms_ble_send_characteristic+0x26>
10009fdc:	2802      	cmp	r0, #2
10009fde:	d035      	beq.n	1000a04c <sms_ble_send_characteristic+0x90>
10009fe0:	e03d      	b.n	1000a05e <sms_ble_send_characteristic+0xa2>
        case BLE_CHAR_BTN:
		send_val[0] = 0x00;
10009fe2:	2200      	movs	r2, #0
10009fe4:	ab01      	add	r3, sp, #4
10009fe6:	701a      	strb	r2, [r3, #0]
		if(button_instance.btn0.new_char) {
10009fe8:	4b3c      	ldr	r3, [pc, #240]	; (1000a0dc <sms_ble_send_characteristic+0x120>)
10009fea:	791b      	ldrb	r3, [r3, #4]
10009fec:	2b00      	cmp	r3, #0
10009fee:	d00b      	beq.n	1000a008 <sms_ble_send_characteristic+0x4c>
			button_instance.btn0.new_char = false;
10009ff0:	4b3a      	ldr	r3, [pc, #232]	; (1000a0dc <sms_ble_send_characteristic+0x120>)
10009ff2:	711a      	strb	r2, [r3, #4]
			button_instance.btn0.char_value = ((button_instance.btn0.char_value >= 0x7f) ? 0 : (button_instance.btn0.char_value + 1));
10009ff4:	795a      	ldrb	r2, [r3, #5]
10009ff6:	2300      	movs	r3, #0
10009ff8:	2a7e      	cmp	r2, #126	; 0x7e
10009ffa:	d801      	bhi.n	1000a000 <sms_ble_send_characteristic+0x44>
10009ffc:	3201      	adds	r2, #1
10009ffe:	b2d3      	uxtb	r3, r2
1000a000:	4a36      	ldr	r2, [pc, #216]	; (1000a0dc <sms_ble_send_characteristic+0x120>)
1000a002:	7153      	strb	r3, [r2, #5]
			send_val[0] |= button_instance.btn0.char_value;
1000a004:	aa01      	add	r2, sp, #4
1000a006:	7013      	strb	r3, [r2, #0]
		}
		if(button_instance.btn1.new_char) {
1000a008:	4b34      	ldr	r3, [pc, #208]	; (1000a0dc <sms_ble_send_characteristic+0x120>)
1000a00a:	7a9b      	ldrb	r3, [r3, #10]
1000a00c:	2b00      	cmp	r3, #0
1000a00e:	d010      	beq.n	1000a032 <sms_ble_send_characteristic+0x76>
			button_instance.btn1.new_char = false;
1000a010:	4b32      	ldr	r3, [pc, #200]	; (1000a0dc <sms_ble_send_characteristic+0x120>)
1000a012:	2200      	movs	r2, #0
1000a014:	729a      	strb	r2, [r3, #10]
	        button_instance.btn1.char_value = ((button_instance.btn1.char_value >= 0xff) ? 0 : (button_instance.btn1.char_value + 1));
1000a016:	7adb      	ldrb	r3, [r3, #11]
1000a018:	2bff      	cmp	r3, #255	; 0xff
1000a01a:	d002      	beq.n	1000a022 <sms_ble_send_characteristic+0x66>
1000a01c:	3301      	adds	r3, #1
1000a01e:	b2db      	uxtb	r3, r3
1000a020:	e000      	b.n	1000a024 <sms_ble_send_characteristic+0x68>
1000a022:	2300      	movs	r3, #0
1000a024:	4a2d      	ldr	r2, [pc, #180]	; (1000a0dc <sms_ble_send_characteristic+0x120>)
1000a026:	72d3      	strb	r3, [r2, #11]
			send_val[0] |= button_instance.btn1.char_value + 0x80;
1000a028:	aa01      	add	r2, sp, #4
1000a02a:	3b80      	subs	r3, #128	; 0x80
1000a02c:	7811      	ldrb	r1, [r2, #0]
1000a02e:	430b      	orrs	r3, r1
1000a030:	7013      	strb	r3, [r2, #0]
		}
        val_handle = button_instance.service_handler.serv_chars.char_val_handle;
1000a032:	4b2a      	ldr	r3, [pc, #168]	; (1000a0dc <sms_ble_send_characteristic+0x120>)
1000a034:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
        length = BLE_CHAR_SIZE_BUTTON;
1000a036:	2201      	movs	r2, #1
        break;
1000a038:	e013      	b.n	1000a062 <sms_ble_send_characteristic+0xa6>
                
        case BLE_CHAR_PRESS:
		DBG_LOG_DEV("[sms_ble_send_characteristic]\tPressure characteristic?");
1000a03a:	4829      	ldr	r0, [pc, #164]	; (1000a0e0 <sms_ble_send_characteristic+0x124>)
1000a03c:	4b29      	ldr	r3, [pc, #164]	; (1000a0e4 <sms_ble_send_characteristic+0x128>)
1000a03e:	4798      	blx	r3
1000a040:	4829      	ldr	r0, [pc, #164]	; (1000a0e8 <sms_ble_send_characteristic+0x12c>)
1000a042:	4b2a      	ldr	r3, [pc, #168]	; (1000a0ec <sms_ble_send_characteristic+0x130>)
1000a044:	4798      	blx	r3

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
1000a046:	2200      	movs	r2, #0
};

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
1000a048:	2500      	movs	r5, #0
        length = BLE_CHAR_SIZE_BUTTON;
        break;
                
        case BLE_CHAR_PRESS:
		DBG_LOG_DEV("[sms_ble_send_characteristic]\tPressure characteristic?");
        break;
1000a04a:	e00a      	b.n	1000a062 <sms_ble_send_characteristic+0xa6>
        
        case BLE_CHAR_MPU:
		DBG_LOG_DEV("[sms_ble_send_characteristic]\tMPU characteristic?");
1000a04c:	4824      	ldr	r0, [pc, #144]	; (1000a0e0 <sms_ble_send_characteristic+0x124>)
1000a04e:	4b25      	ldr	r3, [pc, #148]	; (1000a0e4 <sms_ble_send_characteristic+0x128>)
1000a050:	4798      	blx	r3
1000a052:	4827      	ldr	r0, [pc, #156]	; (1000a0f0 <sms_ble_send_characteristic+0x134>)
1000a054:	4b25      	ldr	r3, [pc, #148]	; (1000a0ec <sms_ble_send_characteristic+0x130>)
1000a056:	4798      	blx	r3

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
1000a058:	2200      	movs	r2, #0
};

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
1000a05a:	2500      	movs	r5, #0
		DBG_LOG_DEV("[sms_ble_send_characteristic]\tPressure characteristic?");
        break;
        
        case BLE_CHAR_MPU:
		DBG_LOG_DEV("[sms_ble_send_characteristic]\tMPU characteristic?");
        break;
1000a05c:	e001      	b.n	1000a062 <sms_ble_send_characteristic+0xa6>

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
1000a05e:	2200      	movs	r2, #0
};

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
1000a060:	2500      	movs	r5, #0
    
    //DBG_LOG_DEV("Sending: ");
    //for(int i = 0; i < 20; i += 2) {
        //DBG_LOG_CONT_DEV("0x%02x%02x ", send_val[i], send_val[i+1]);
    //}
    status = at_ble_characteristic_value_set(val_handle, send_val, (length * sizeof(uint8_t)));
1000a062:	b292      	uxth	r2, r2
1000a064:	a901      	add	r1, sp, #4
1000a066:	0028      	movs	r0, r5
1000a068:	4b22      	ldr	r3, [pc, #136]	; (1000a0f4 <sms_ble_send_characteristic+0x138>)
1000a06a:	4798      	blx	r3
1000a06c:	1e04      	subs	r4, r0, #0
    if(status == AT_BLE_SUCCESS) {
1000a06e:	d125      	bne.n	1000a0bc <sms_ble_send_characteristic+0x100>
		DBG_LOG_DEV(" SET: %d at 0x%x  ", send_val[0], val_handle);
1000a070:	481b      	ldr	r0, [pc, #108]	; (1000a0e0 <sms_ble_send_characteristic+0x124>)
1000a072:	4b1c      	ldr	r3, [pc, #112]	; (1000a0e4 <sms_ble_send_characteristic+0x128>)
1000a074:	4798      	blx	r3
1000a076:	ab01      	add	r3, sp, #4
1000a078:	7819      	ldrb	r1, [r3, #0]
1000a07a:	002a      	movs	r2, r5
1000a07c:	481e      	ldr	r0, [pc, #120]	; (1000a0f8 <sms_ble_send_characteristic+0x13c>)
1000a07e:	4b1b      	ldr	r3, [pc, #108]	; (1000a0ec <sms_ble_send_characteristic+0x130>)
1000a080:	4798      	blx	r3
        //sms_ble_ind_retry = 0;
        //status = at_ble_indication_send(sms_connection_handle, val_handle);
//#   else
		uint8_t res = 0;
		for(uint8_t i = 0; i < 2; i++) {
	        status = at_ble_notification_send(sms_connection_handle, val_handle);
1000a082:	4f1e      	ldr	r7, [pc, #120]	; (1000a0fc <sms_ble_send_characteristic+0x140>)
1000a084:	8838      	ldrh	r0, [r7, #0]
1000a086:	0029      	movs	r1, r5
1000a088:	4c1d      	ldr	r4, [pc, #116]	; (1000a100 <sms_ble_send_characteristic+0x144>)
1000a08a:	47a0      	blx	r4
			if(status == AT_BLE_SUCCESS) res++;
1000a08c:	4243      	negs	r3, r0
1000a08e:	4143      	adcs	r3, r0
1000a090:	b2de      	uxtb	r6, r3
        //sms_ble_ind_retry = 0;
        //status = at_ble_indication_send(sms_connection_handle, val_handle);
//#   else
		uint8_t res = 0;
		for(uint8_t i = 0; i < 2; i++) {
	        status = at_ble_notification_send(sms_connection_handle, val_handle);
1000a092:	8838      	ldrh	r0, [r7, #0]
1000a094:	0029      	movs	r1, r5
1000a096:	47a0      	blx	r4
1000a098:	1e04      	subs	r4, r0, #0
			if(status == AT_BLE_SUCCESS) res++;
1000a09a:	d108      	bne.n	1000a0ae <sms_ble_send_characteristic+0xf2>
		}
//#   endif
        if(res == 2) {
1000a09c:	2e01      	cmp	r6, #1
1000a09e:	d106      	bne.n	1000a0ae <sms_ble_send_characteristic+0xf2>
			DBG_LOG_CONT_DEV("%d GONE? %d ", sms_ble_send_cnt, status);
1000a0a0:	4b0d      	ldr	r3, [pc, #52]	; (1000a0d8 <sms_ble_send_characteristic+0x11c>)
1000a0a2:	8819      	ldrh	r1, [r3, #0]
1000a0a4:	0002      	movs	r2, r0
1000a0a6:	4817      	ldr	r0, [pc, #92]	; (1000a104 <sms_ble_send_characteristic+0x148>)
1000a0a8:	4b10      	ldr	r3, [pc, #64]	; (1000a0ec <sms_ble_send_characteristic+0x130>)
1000a0aa:	4798      	blx	r3
1000a0ac:	e00c      	b.n	1000a0c8 <sms_ble_send_characteristic+0x10c>
            //timer2_current_mode = TIMER2_MODE_INDICATION_TOUT;
            //sms_dualtimer_start(TIMER_UNIT_MS, BLE_INDICATION_TOUT_MS, DUALTIMER_TIMER2);
//#   endif
        }
        else {
	        DBG_LOG_DEV("NOT (completely) gone? ");
1000a0ae:	480c      	ldr	r0, [pc, #48]	; (1000a0e0 <sms_ble_send_characteristic+0x124>)
1000a0b0:	4b0c      	ldr	r3, [pc, #48]	; (1000a0e4 <sms_ble_send_characteristic+0x128>)
1000a0b2:	4798      	blx	r3
1000a0b4:	4814      	ldr	r0, [pc, #80]	; (1000a108 <sms_ble_send_characteristic+0x14c>)
1000a0b6:	4b0d      	ldr	r3, [pc, #52]	; (1000a0ec <sms_ble_send_characteristic+0x130>)
1000a0b8:	4798      	blx	r3
1000a0ba:	e005      	b.n	1000a0c8 <sms_ble_send_characteristic+0x10c>
            //#pragma TBD: handle sending error...
        }
    }
	else {
		DBG_LOG_DEV(" NOT set? ");
1000a0bc:	4808      	ldr	r0, [pc, #32]	; (1000a0e0 <sms_ble_send_characteristic+0x124>)
1000a0be:	4b09      	ldr	r3, [pc, #36]	; (1000a0e4 <sms_ble_send_characteristic+0x128>)
1000a0c0:	4798      	blx	r3
1000a0c2:	4812      	ldr	r0, [pc, #72]	; (1000a10c <sms_ble_send_characteristic+0x150>)
1000a0c4:	4b09      	ldr	r3, [pc, #36]	; (1000a0ec <sms_ble_send_characteristic+0x130>)
1000a0c6:	4798      	blx	r3
	}
    return status;
}
1000a0c8:	0020      	movs	r0, r4
1000a0ca:	b003      	add	sp, #12
1000a0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a0ce:	46c0      	nop			; (mov r8, r8)
1000a0d0:	1001570c 	.word	0x1001570c
1000a0d4:	1001569d 	.word	0x1001569d
1000a0d8:	1001571c 	.word	0x1001571c
1000a0dc:	100156a4 	.word	0x100156a4
1000a0e0:	1001227c 	.word	0x1001227c
1000a0e4:	10010fb1 	.word	0x10010fb1
1000a0e8:	1001258c 	.word	0x1001258c
1000a0ec:	10010e91 	.word	0x10010e91
1000a0f0:	100125c4 	.word	0x100125c4
1000a0f4:	1000de15 	.word	0x1000de15
1000a0f8:	100125f8 	.word	0x100125f8
1000a0fc:	100156a0 	.word	0x100156a0
1000a100:	1000dfb5 	.word	0x1000dfb5
1000a104:	1001260c 	.word	0x1001260c
1000a108:	1001261c 	.word	0x1001261c
1000a10c:	10012634 	.word	0x10012634

1000a110 <sms_ble_primary_service_define>:


at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
1000a110:	b510      	push	{r4, lr}
1000a112:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
1000a114:	0001      	movs	r1, r0
1000a116:	3112      	adds	r1, #18
1000a118:	2301      	movs	r3, #1
1000a11a:	9301      	str	r3, [sp, #4]
1000a11c:	0003      	movs	r3, r0
1000a11e:	3314      	adds	r3, #20
1000a120:	9300      	str	r3, [sp, #0]
1000a122:	2300      	movs	r3, #0
1000a124:	2200      	movs	r2, #0
1000a126:	4c02      	ldr	r4, [pc, #8]	; (1000a130 <sms_ble_primary_service_define+0x20>)
1000a128:	47a0      	blx	r4
}
1000a12a:	b002      	add	sp, #8
1000a12c:	bd10      	pop	{r4, pc}
1000a12e:	46c0      	nop			; (mov r8, r8)
1000a130:	1000ddf5 	.word	0x1000ddf5

1000a134 <sms_ble_service_init>:


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
1000a134:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a136:	464f      	mov	r7, r9
1000a138:	4646      	mov	r6, r8
1000a13a:	b4c0      	push	{r6, r7}
1000a13c:	b083      	sub	sp, #12
1000a13e:	4694      	mov	ip, r2
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
1000a140:	2800      	cmp	r0, #0
1000a142:	d10b      	bne.n	1000a15c <sms_ble_service_init+0x28>
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
1000a144:	23bb      	movs	r3, #187	; 0xbb
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
1000a146:	2450      	movs	r4, #80	; 0x50
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
1000a148:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
1000a14a:	26be      	movs	r6, #190	; 0xbe
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
1000a14c:	275a      	movs	r7, #90	; 0x5a
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
1000a14e:	3057      	adds	r0, #87	; 0x57
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
1000a150:	221c      	movs	r2, #28
1000a152:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
1000a154:	3a1b      	subs	r2, #27
1000a156:	9201      	str	r2, [sp, #4]
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
1000a158:	4691      	mov	r9, r2
1000a15a:	e009      	b.n	1000a170 <sms_ble_service_init+0x3c>


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
1000a15c:	2300      	movs	r3, #0
1000a15e:	2400      	movs	r4, #0
1000a160:	2500      	movs	r5, #0
1000a162:	2600      	movs	r6, #0
1000a164:	2700      	movs	r7, #0
1000a166:	2000      	movs	r0, #0
1000a168:	2200      	movs	r2, #0
1000a16a:	4690      	mov	r8, r2
    uint8_t char_size = 0;
1000a16c:	9201      	str	r2, [sp, #4]
}


void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
1000a16e:	4691      	mov	r9, r2
        
        default:
        break;
    }
    //SMS button service characteristic
    service->serv_handle = handle;
1000a170:	464a      	mov	r2, r9
1000a172:	824a      	strh	r2, [r1, #18]
    service->serv_uuid.type = AT_BLE_UUID_128;
1000a174:	2202      	movs	r2, #2
1000a176:	700a      	strb	r2, [r1, #0]
    service->serv_uuid.uuid[0] = uuid[0];
1000a178:	4642      	mov	r2, r8
1000a17a:	704a      	strb	r2, [r1, #1]
    service->serv_uuid.uuid[1] = uuid[1];
1000a17c:	7088      	strb	r0, [r1, #2]
    service->serv_uuid.uuid[2] = uuid[2];
1000a17e:	70cf      	strb	r7, [r1, #3]
    service->serv_uuid.uuid[3] = uuid[3];
1000a180:	710e      	strb	r6, [r1, #4]
    service->serv_uuid.uuid[4] = uuid[4];
1000a182:	714d      	strb	r5, [r1, #5]
    service->serv_uuid.uuid[5] = uuid[5];
1000a184:	718c      	strb	r4, [r1, #6]
    service->serv_uuid.uuid[6] = uuid[6];
1000a186:	71cb      	strb	r3, [r1, #7]
    service->serv_uuid.uuid[7] = uuid[7];
1000a188:	720b      	strb	r3, [r1, #8]
    service->serv_uuid.uuid[8] = uuid[8];
1000a18a:	2300      	movs	r3, #0
1000a18c:	724b      	strb	r3, [r1, #9]
    service->serv_uuid.uuid[9] = uuid[9];
1000a18e:	728b      	strb	r3, [r1, #10]
    service->serv_uuid.uuid[10] = uuid[10];
1000a190:	72cb      	strb	r3, [r1, #11]
    service->serv_uuid.uuid[11] = uuid[11];
1000a192:	730b      	strb	r3, [r1, #12]
    service->serv_uuid.uuid[12] = uuid[12];
1000a194:	734b      	strb	r3, [r1, #13]
    service->serv_uuid.uuid[13] = uuid[13];
1000a196:	738b      	strb	r3, [r1, #14]
    service->serv_uuid.uuid[14] = uuid[14];
1000a198:	73cb      	strb	r3, [r1, #15]
    service->serv_uuid.uuid[15] = uuid[15];
1000a19a:	740b      	strb	r3, [r1, #16]
    
    #   if SMS_SENDING_WITH_ACK == true
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
    #   else
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
1000a19c:	2412      	movs	r4, #18
1000a19e:	850c      	strh	r4, [r1, #40]	; 0x28
    #   endif
    service->serv_chars.init_value = value; // value
1000a1a0:	4662      	mov	r2, ip
1000a1a2:	62ca      	str	r2, [r1, #44]	; 0x2c
    service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
1000a1a4:	466a      	mov	r2, sp
1000a1a6:	8892      	ldrh	r2, [r2, #4]
1000a1a8:	860a      	strh	r2, [r1, #48]	; 0x30
    service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
1000a1aa:	864a      	strh	r2, [r1, #50]	; 0x32
    service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
1000a1ac:	2011      	movs	r0, #17
1000a1ae:	2234      	movs	r2, #52	; 0x34
1000a1b0:	5488      	strb	r0, [r1, r2]
    service->serv_chars.user_desc = NULL; //user defined name
1000a1b2:	638b      	str	r3, [r1, #56]	; 0x38
    service->serv_chars.user_desc_len = 0;
1000a1b4:	2200      	movs	r2, #0
1000a1b6:	878b      	strh	r3, [r1, #60]	; 0x3c
    service->serv_chars.user_desc_max_len = 0;
1000a1b8:	87cb      	strh	r3, [r1, #62]	; 0x3e
    service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
1000a1ba:	3033      	adds	r0, #51	; 0x33
1000a1bc:	540a      	strb	r2, [r1, r0]
    service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
1000a1be:	3001      	adds	r0, #1
1000a1c0:	540a      	strb	r2, [r1, r0]
    service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
1000a1c2:	3001      	adds	r0, #1
1000a1c4:	540a      	strb	r2, [r1, r0]
    service->serv_chars.user_desc_handle = 0; // user description handles
1000a1c6:	2248      	movs	r2, #72	; 0x48
1000a1c8:	528b      	strh	r3, [r1, r2]
    service->serv_chars.client_config_handle = 0; // client config handles
1000a1ca:	3202      	adds	r2, #2
1000a1cc:	528b      	strh	r3, [r1, r2]
    service->serv_chars.server_config_handle = 0; // server config handles
1000a1ce:	3202      	adds	r2, #2
1000a1d0:	528b      	strh	r3, [r1, r2]
    
    service->serv_chars.presentation_format = NULL; //presentation format
1000a1d2:	640b      	str	r3, [r1, #64]	; 0x40
1000a1d4:	b003      	add	sp, #12
1000a1d6:	bc0c      	pop	{r2, r3}
1000a1d8:	4690      	mov	r8, r2
1000a1da:	4699      	mov	r9, r3
1000a1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a1de:	46c0      	nop			; (mov r8, r8)

1000a1e0 <sms_button_bt0_callback>:
        gpio_disable_callback(button_instance.btn1.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
1000a1e0:	b510      	push	{r4, lr}
	DBG_LOG_DEV("BT0 CB");
1000a1e2:	4808      	ldr	r0, [pc, #32]	; (1000a204 <sms_button_bt0_callback+0x24>)
1000a1e4:	4b08      	ldr	r3, [pc, #32]	; (1000a208 <sms_button_bt0_callback+0x28>)
1000a1e6:	4798      	blx	r3
1000a1e8:	4808      	ldr	r0, [pc, #32]	; (1000a20c <sms_button_bt0_callback+0x2c>)
1000a1ea:	4b09      	ldr	r3, [pc, #36]	; (1000a210 <sms_button_bt0_callback+0x30>)
1000a1ec:	4798      	blx	r3
    button_instance.btn0.new_int = true;
1000a1ee:	4b09      	ldr	r3, [pc, #36]	; (1000a214 <sms_button_bt0_callback+0x34>)
1000a1f0:	2201      	movs	r2, #1
1000a1f2:	70da      	strb	r2, [r3, #3]
    send_plf_int_msg_ind(button_instance.btn0.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000a1f4:	7858      	ldrb	r0, [r3, #1]
1000a1f6:	2300      	movs	r3, #0
1000a1f8:	2200      	movs	r2, #0
1000a1fa:	2102      	movs	r1, #2
1000a1fc:	4c06      	ldr	r4, [pc, #24]	; (1000a218 <sms_button_bt0_callback+0x38>)
1000a1fe:	47a0      	blx	r4
}
1000a200:	bd10      	pop	{r4, pc}
1000a202:	46c0      	nop			; (mov r8, r8)
1000a204:	1001227c 	.word	0x1001227c
1000a208:	10010fb1 	.word	0x10010fb1
1000a20c:	100126b4 	.word	0x100126b4
1000a210:	10010e91 	.word	0x10010e91
1000a214:	100156a4 	.word	0x100156a4
1000a218:	10009781 	.word	0x10009781

1000a21c <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
1000a21c:	b510      	push	{r4, lr}
	DBG_LOG_DEV("BT1 CB");
1000a21e:	4808      	ldr	r0, [pc, #32]	; (1000a240 <sms_button_bt1_callback+0x24>)
1000a220:	4b08      	ldr	r3, [pc, #32]	; (1000a244 <sms_button_bt1_callback+0x28>)
1000a222:	4798      	blx	r3
1000a224:	4808      	ldr	r0, [pc, #32]	; (1000a248 <sms_button_bt1_callback+0x2c>)
1000a226:	4b09      	ldr	r3, [pc, #36]	; (1000a24c <sms_button_bt1_callback+0x30>)
1000a228:	4798      	blx	r3
	button_instance.btn1.new_int = true;
1000a22a:	4b09      	ldr	r3, [pc, #36]	; (1000a250 <sms_button_bt1_callback+0x34>)
1000a22c:	2201      	movs	r2, #1
1000a22e:	725a      	strb	r2, [r3, #9]
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000a230:	79d8      	ldrb	r0, [r3, #7]
1000a232:	2300      	movs	r3, #0
1000a234:	2200      	movs	r2, #0
1000a236:	2102      	movs	r1, #2
1000a238:	4c06      	ldr	r4, [pc, #24]	; (1000a254 <sms_button_bt1_callback+0x38>)
1000a23a:	47a0      	blx	r4
}
1000a23c:	bd10      	pop	{r4, pc}
1000a23e:	46c0      	nop			; (mov r8, r8)
1000a240:	1001227c 	.word	0x1001227c
1000a244:	10010fb1 	.word	0x10010fb1
1000a248:	100126bc 	.word	0x100126bc
1000a24c:	10010e91 	.word	0x10010e91
1000a250:	100156a4 	.word	0x100156a4
1000a254:	10009781 	.word	0x10009781

1000a258 <sms_button_configure_gpio>:
/* Callback functions --> doing things                                  */
/************************************************************************/

/* Initialize gpio for button inputs */
void sms_button_configure_gpio(void)
{
1000a258:	b510      	push	{r4, lr}
1000a25a:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a25c:	ac01      	add	r4, sp, #4
1000a25e:	0020      	movs	r0, r4
1000a260:	4b2a      	ldr	r3, [pc, #168]	; (1000a30c <sms_button_configure_gpio+0xb4>)
1000a262:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a264:	2300      	movs	r3, #0
1000a266:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a268:	3302      	adds	r3, #2
1000a26a:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a26c:	3b01      	subs	r3, #1
1000a26e:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn0.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000a270:	4b27      	ldr	r3, [pc, #156]	; (1000a310 <sms_button_configure_gpio+0xb8>)
1000a272:	7858      	ldrb	r0, [r3, #1]
1000a274:	0021      	movs	r1, r4
1000a276:	4b27      	ldr	r3, [pc, #156]	; (1000a314 <sms_button_configure_gpio+0xbc>)
1000a278:	4798      	blx	r3
1000a27a:	2800      	cmp	r0, #0
1000a27c:	d005      	beq.n	1000a28a <sms_button_configure_gpio+0x32>
        DBG_LOG_DEV("[sms_button_configure]\t\tproblem while setting up button0");
1000a27e:	4826      	ldr	r0, [pc, #152]	; (1000a318 <sms_button_configure_gpio+0xc0>)
1000a280:	4b26      	ldr	r3, [pc, #152]	; (1000a31c <sms_button_configure_gpio+0xc4>)
1000a282:	4798      	blx	r3
1000a284:	4826      	ldr	r0, [pc, #152]	; (1000a320 <sms_button_configure_gpio+0xc8>)
1000a286:	4b27      	ldr	r3, [pc, #156]	; (1000a324 <sms_button_configure_gpio+0xcc>)
1000a288:	4798      	blx	r3
    }
	
	/* Nothing connected to AO_GPIO_1, but pulling down to allow sleep state */
	gpio_get_config_defaults(&config_gpio_pin);
1000a28a:	ac01      	add	r4, sp, #4
1000a28c:	0020      	movs	r0, r4
1000a28e:	4b1f      	ldr	r3, [pc, #124]	; (1000a30c <sms_button_configure_gpio+0xb4>)
1000a290:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a292:	2300      	movs	r3, #0
1000a294:	7023      	strb	r3, [r4, #0]
	config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a296:	2202      	movs	r2, #2
1000a298:	7062      	strb	r2, [r4, #1]
	config_gpio_pin.aon_wakeup = false;
1000a29a:	70e3      	strb	r3, [r4, #3]
	if(gpio_pin_set_config(PIN_AO_GPIO_1, &config_gpio_pin) != STATUS_OK) {
1000a29c:	0021      	movs	r1, r4
1000a29e:	201e      	movs	r0, #30
1000a2a0:	4b1c      	ldr	r3, [pc, #112]	; (1000a314 <sms_button_configure_gpio+0xbc>)
1000a2a2:	4798      	blx	r3
1000a2a4:	2800      	cmp	r0, #0
1000a2a6:	d005      	beq.n	1000a2b4 <sms_button_configure_gpio+0x5c>
		DBG_LOG_DEV("[sms_button_configure]\t\tproblem while setting AO_GPIO_1");
1000a2a8:	481b      	ldr	r0, [pc, #108]	; (1000a318 <sms_button_configure_gpio+0xc0>)
1000a2aa:	4b1c      	ldr	r3, [pc, #112]	; (1000a31c <sms_button_configure_gpio+0xc4>)
1000a2ac:	4798      	blx	r3
1000a2ae:	481e      	ldr	r0, [pc, #120]	; (1000a328 <sms_button_configure_gpio+0xd0>)
1000a2b0:	4b1c      	ldr	r3, [pc, #112]	; (1000a324 <sms_button_configure_gpio+0xcc>)
1000a2b2:	4798      	blx	r3
	}
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
1000a2b4:	ac01      	add	r4, sp, #4
1000a2b6:	0020      	movs	r0, r4
1000a2b8:	4b14      	ldr	r3, [pc, #80]	; (1000a30c <sms_button_configure_gpio+0xb4>)
1000a2ba:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a2bc:	2300      	movs	r3, #0
1000a2be:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000a2c0:	3302      	adds	r3, #2
1000a2c2:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000a2c4:	3b01      	subs	r3, #1
1000a2c6:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn1.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000a2c8:	4b11      	ldr	r3, [pc, #68]	; (1000a310 <sms_button_configure_gpio+0xb8>)
1000a2ca:	79d8      	ldrb	r0, [r3, #7]
1000a2cc:	0021      	movs	r1, r4
1000a2ce:	4b11      	ldr	r3, [pc, #68]	; (1000a314 <sms_button_configure_gpio+0xbc>)
1000a2d0:	4798      	blx	r3
1000a2d2:	2800      	cmp	r0, #0
1000a2d4:	d005      	beq.n	1000a2e2 <sms_button_configure_gpio+0x8a>
        DBG_LOG_DEV("[sms_button_configure]\t\tProblem while setting up button1");
1000a2d6:	4810      	ldr	r0, [pc, #64]	; (1000a318 <sms_button_configure_gpio+0xc0>)
1000a2d8:	4b10      	ldr	r3, [pc, #64]	; (1000a31c <sms_button_configure_gpio+0xc4>)
1000a2da:	4798      	blx	r3
1000a2dc:	4813      	ldr	r0, [pc, #76]	; (1000a32c <sms_button_configure_gpio+0xd4>)
1000a2de:	4b11      	ldr	r3, [pc, #68]	; (1000a324 <sms_button_configure_gpio+0xcc>)
1000a2e0:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
1000a2e2:	ac01      	add	r4, sp, #4
1000a2e4:	0020      	movs	r0, r4
1000a2e6:	4b09      	ldr	r3, [pc, #36]	; (1000a30c <sms_button_configure_gpio+0xb4>)
1000a2e8:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000a2ea:	2300      	movs	r3, #0
1000a2ec:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
1000a2ee:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000a2f0:	0021      	movs	r1, r4
1000a2f2:	2017      	movs	r0, #23
1000a2f4:	4b07      	ldr	r3, [pc, #28]	; (1000a314 <sms_button_configure_gpio+0xbc>)
1000a2f6:	4798      	blx	r3
1000a2f8:	2800      	cmp	r0, #0
1000a2fa:	d005      	beq.n	1000a308 <sms_button_configure_gpio+0xb0>
        DBG_LOG_DEV("[sms_button_configure]\t\tProblem while setting up XPLAINED user button");
1000a2fc:	4806      	ldr	r0, [pc, #24]	; (1000a318 <sms_button_configure_gpio+0xc0>)
1000a2fe:	4b07      	ldr	r3, [pc, #28]	; (1000a31c <sms_button_configure_gpio+0xc4>)
1000a300:	4798      	blx	r3
1000a302:	480b      	ldr	r0, [pc, #44]	; (1000a330 <sms_button_configure_gpio+0xd8>)
1000a304:	4b07      	ldr	r3, [pc, #28]	; (1000a324 <sms_button_configure_gpio+0xcc>)
1000a306:	4798      	blx	r3
    }
}
1000a308:	b002      	add	sp, #8
1000a30a:	bd10      	pop	{r4, pc}
1000a30c:	10008239 	.word	0x10008239
1000a310:	100156a4 	.word	0x100156a4
1000a314:	10008249 	.word	0x10008249
1000a318:	1001227c 	.word	0x1001227c
1000a31c:	10010fb1 	.word	0x10010fb1
1000a320:	100126c4 	.word	0x100126c4
1000a324:	10010e91 	.word	0x10010e91
1000a328:	10012700 	.word	0x10012700
1000a32c:	10012738 	.word	0x10012738
1000a330:	10012774 	.word	0x10012774

1000a334 <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
1000a334:	b570      	push	{r4, r5, r6, lr}
    /* Button0 callback */
    gpio_register_callback(button_instance.btn0.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
1000a336:	4d05      	ldr	r5, [pc, #20]	; (1000a34c <sms_button_register_callbacks+0x18>)
1000a338:	7868      	ldrb	r0, [r5, #1]
1000a33a:	2202      	movs	r2, #2
1000a33c:	4904      	ldr	r1, [pc, #16]	; (1000a350 <sms_button_register_callbacks+0x1c>)
1000a33e:	4c05      	ldr	r4, [pc, #20]	; (1000a354 <sms_button_register_callbacks+0x20>)
1000a340:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(button_instance.btn1.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
1000a342:	79e8      	ldrb	r0, [r5, #7]
1000a344:	2202      	movs	r2, #2
1000a346:	4904      	ldr	r1, [pc, #16]	; (1000a358 <sms_button_register_callbacks+0x24>)
1000a348:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
1000a34a:	bd70      	pop	{r4, r5, r6, pc}
1000a34c:	100156a4 	.word	0x100156a4
1000a350:	1000a1e1 	.word	0x1000a1e1
1000a354:	10008679 	.word	0x10008679
1000a358:	1000a21d 	.word	0x1000a21d

1000a35c <sms_button_get_state>:
    gpio_disable_callback(SMS_BTN_1_PIN);
}

/* Get current buttons state */
enum sms_button_state sms_button_get_state(void)
{
1000a35c:	b570      	push	{r4, r5, r6, lr}
    bool b0 = gpio_pin_get_input_level(SMS_BTN_0_PIN);
1000a35e:	201f      	movs	r0, #31
1000a360:	4d0c      	ldr	r5, [pc, #48]	; (1000a394 <sms_button_get_state+0x38>)
1000a362:	47a8      	blx	r5
1000a364:	0004      	movs	r4, r0
    bool b1 = gpio_pin_get_input_level(SMS_BTN_1_PIN);
1000a366:	201d      	movs	r0, #29
1000a368:	47a8      	blx	r5
1000a36a:	0005      	movs	r5, r0
1000a36c:	0006      	movs	r6, r0
    DBG_LOG("[sms_button_get_state]\t\tButton state: %d %d", b1, b0);
1000a36e:	480a      	ldr	r0, [pc, #40]	; (1000a398 <sms_button_get_state+0x3c>)
1000a370:	4b0a      	ldr	r3, [pc, #40]	; (1000a39c <sms_button_get_state+0x40>)
1000a372:	4798      	blx	r3
1000a374:	0022      	movs	r2, r4
1000a376:	0029      	movs	r1, r5
1000a378:	4809      	ldr	r0, [pc, #36]	; (1000a3a0 <sms_button_get_state+0x44>)
1000a37a:	4b0a      	ldr	r3, [pc, #40]	; (1000a3a4 <sms_button_get_state+0x48>)
1000a37c:	4798      	blx	r3
    if(b0 && b1) return BUTTON_STATE_BOTH;
1000a37e:	2c00      	cmp	r4, #0
1000a380:	d004      	beq.n	1000a38c <sms_button_get_state+0x30>
1000a382:	2003      	movs	r0, #3
1000a384:	2d00      	cmp	r5, #0
1000a386:	d104      	bne.n	1000a392 <sms_button_get_state+0x36>
    else if(b0 && !b1) return BUTTON_STATE_B0;
1000a388:	3802      	subs	r0, #2
1000a38a:	e002      	b.n	1000a392 <sms_button_get_state+0x36>
    else if(!b0 && b1) return BUTTON_STATE_B1;
    else return BUTTON_STATE_NONE;
1000a38c:	1e70      	subs	r0, r6, #1
1000a38e:	4186      	sbcs	r6, r0
1000a390:	0070      	lsls	r0, r6, #1
}
1000a392:	bd70      	pop	{r4, r5, r6, pc}
1000a394:	10008401 	.word	0x10008401
1000a398:	1001227c 	.word	0x1001227c
1000a39c:	10010fb1 	.word	0x10010fb1
1000a3a0:	100127bc 	.word	0x100127bc
1000a3a4:	10010e91 	.word	0x10010e91

1000a3a8 <sms_button_fn>:
/************************************************************************/
/* Callback functions --> doing things                                  */
/************************************************************************/
//int sms_button_fn(enum sms_btn_ids btn)
int sms_button_fn(void)
{
1000a3a8:	b510      	push	{r4, lr}
    button_instance.previous_state = button_instance.current_state;
1000a3aa:	4c40      	ldr	r4, [pc, #256]	; (1000a4ac <sms_button_fn+0x104>)
1000a3ac:	7b63      	ldrb	r3, [r4, #13]
1000a3ae:	7323      	strb	r3, [r4, #12]
    button_instance.current_state = sms_button_get_state();
1000a3b0:	4b3f      	ldr	r3, [pc, #252]	; (1000a4b0 <sms_button_fn+0x108>)
1000a3b2:	4798      	blx	r3
1000a3b4:	7360      	strb	r0, [r4, #13]
	sms_monitor_get_states("[sms_button_fn]");
1000a3b6:	483f      	ldr	r0, [pc, #252]	; (1000a4b4 <sms_button_fn+0x10c>)
1000a3b8:	4b3f      	ldr	r3, [pc, #252]	; (1000a4b8 <sms_button_fn+0x110>)
1000a3ba:	4798      	blx	r3
	
    //if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
    //else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
    //else return -1;
    
    switch(button_instance.current_state) {
1000a3bc:	7b63      	ldrb	r3, [r4, #13]
1000a3be:	2b02      	cmp	r3, #2
1000a3c0:	d032      	beq.n	1000a428 <sms_button_fn+0x80>
1000a3c2:	2b03      	cmp	r3, #3
1000a3c4:	d055      	beq.n	1000a472 <sms_button_fn+0xca>
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a3c6:	2000      	movs	r0, #0
	
    //if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
    //else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
    //else return -1;
    
    switch(button_instance.current_state) {
1000a3c8:	2b01      	cmp	r3, #1
1000a3ca:	d16d      	bne.n	1000a4a8 <sms_button_fn+0x100>
        // --- current state ---
        case BUTTON_STATE_B0:
        switch(ble_current_state) {
1000a3cc:	4b3b      	ldr	r3, [pc, #236]	; (1000a4bc <sms_button_fn+0x114>)
1000a3ce:	781b      	ldrb	r3, [r3, #0]
1000a3d0:	b2db      	uxtb	r3, r3
1000a3d2:	2b00      	cmp	r3, #0
1000a3d4:	d003      	beq.n	1000a3de <sms_button_fn+0x36>
1000a3d6:	3b22      	subs	r3, #34	; 0x22
1000a3d8:	2b01      	cmp	r3, #1
1000a3da:	d81c      	bhi.n	1000a416 <sms_button_fn+0x6e>
1000a3dc:	e00e      	b.n	1000a3fc <sms_button_fn+0x54>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a3de:	2201      	movs	r2, #1
1000a3e0:	4b37      	ldr	r3, [pc, #220]	; (1000a4c0 <sms_button_fn+0x118>)
1000a3e2:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a3e4:	2300      	movs	r3, #0
1000a3e6:	4a37      	ldr	r2, [pc, #220]	; (1000a4c4 <sms_button_fn+0x11c>)
1000a3e8:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a3ea:	4a37      	ldr	r2, [pc, #220]	; (1000a4c8 <sms_button_fn+0x120>)
1000a3ec:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a3ee:	2200      	movs	r2, #0
1000a3f0:	21fa      	movs	r1, #250	; 0xfa
1000a3f2:	2001      	movs	r0, #1
1000a3f4:	4b35      	ldr	r3, [pc, #212]	; (1000a4cc <sms_button_fn+0x124>)
1000a3f6:	4798      	blx	r3
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a3f8:	2000      	movs	r0, #0
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
			//ulp_ready = false;
            break;
1000a3fa:	e055      	b.n	1000a4a8 <sms_button_fn+0x100>
            
            case BLE_STATE_PAIRED:
            case BLE_STATE_INDICATING:
            timer1_current_mode = TIMER1_MODE_NONE;
1000a3fc:	2300      	movs	r3, #0
1000a3fe:	4a30      	ldr	r2, [pc, #192]	; (1000a4c0 <sms_button_fn+0x118>)
1000a400:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a402:	4a30      	ldr	r2, [pc, #192]	; (1000a4c4 <sms_button_fn+0x11c>)
1000a404:	7013      	strb	r3, [r2, #0]
			button_instance.btn0.new_char = true;
1000a406:	2201      	movs	r2, #1
1000a408:	4b28      	ldr	r3, [pc, #160]	; (1000a4ac <sms_button_fn+0x104>)
1000a40a:	711a      	strb	r2, [r3, #4]
			sms_ble_send_characteristic(BLE_CHAR_BTN);
1000a40c:	2000      	movs	r0, #0
1000a40e:	4b30      	ldr	r3, [pc, #192]	; (1000a4d0 <sms_button_fn+0x128>)
1000a410:	4798      	blx	r3
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a412:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
			button_instance.btn0.new_char = true;
			sms_ble_send_characteristic(BLE_CHAR_BTN);
			//ulp_ready = true;
            break;
1000a414:	e048      	b.n	1000a4a8 <sms_button_fn+0x100>
            
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used states...");
1000a416:	482f      	ldr	r0, [pc, #188]	; (1000a4d4 <sms_button_fn+0x12c>)
1000a418:	4b2f      	ldr	r3, [pc, #188]	; (1000a4d8 <sms_button_fn+0x130>)
1000a41a:	4798      	blx	r3
1000a41c:	482f      	ldr	r0, [pc, #188]	; (1000a4dc <sms_button_fn+0x134>)
1000a41e:	4b30      	ldr	r3, [pc, #192]	; (1000a4e0 <sms_button_fn+0x138>)
1000a420:	4798      	blx	r3
			//ulp_ready = true;
            return -1;
1000a422:	2001      	movs	r0, #1
1000a424:	4240      	negs	r0, r0
1000a426:	e03f      	b.n	1000a4a8 <sms_button_fn+0x100>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_B1:
        switch(ble_current_state) {
1000a428:	4b24      	ldr	r3, [pc, #144]	; (1000a4bc <sms_button_fn+0x114>)
1000a42a:	781b      	ldrb	r3, [r3, #0]
1000a42c:	b2db      	uxtb	r3, r3
1000a42e:	2b00      	cmp	r3, #0
1000a430:	d003      	beq.n	1000a43a <sms_button_fn+0x92>
1000a432:	3b22      	subs	r3, #34	; 0x22
1000a434:	2b01      	cmp	r3, #1
1000a436:	d835      	bhi.n	1000a4a4 <sms_button_fn+0xfc>
1000a438:	e00e      	b.n	1000a458 <sms_button_fn+0xb0>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a43a:	2201      	movs	r2, #1
1000a43c:	4b20      	ldr	r3, [pc, #128]	; (1000a4c0 <sms_button_fn+0x118>)
1000a43e:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a440:	2300      	movs	r3, #0
1000a442:	4a20      	ldr	r2, [pc, #128]	; (1000a4c4 <sms_button_fn+0x11c>)
1000a444:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a446:	4a20      	ldr	r2, [pc, #128]	; (1000a4c8 <sms_button_fn+0x120>)
1000a448:	7013      	strb	r3, [r2, #0]
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a44a:	2200      	movs	r2, #0
1000a44c:	21fa      	movs	r1, #250	; 0xfa
1000a44e:	2001      	movs	r0, #1
1000a450:	4b1e      	ldr	r3, [pc, #120]	; (1000a4cc <sms_button_fn+0x124>)
1000a452:	4798      	blx	r3
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a454:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
			//ulp_ready = false;
            break;
1000a456:	e027      	b.n	1000a4a8 <sms_button_fn+0x100>
            
            case BLE_STATE_PAIRED:
            case BLE_STATE_INDICATING:
            timer1_current_mode = TIMER1_MODE_NONE;
1000a458:	2300      	movs	r3, #0
1000a45a:	4a19      	ldr	r2, [pc, #100]	; (1000a4c0 <sms_button_fn+0x118>)
1000a45c:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a45e:	4a19      	ldr	r2, [pc, #100]	; (1000a4c4 <sms_button_fn+0x11c>)
1000a460:	7013      	strb	r3, [r2, #0]
			button_instance.btn1.new_char = true;
1000a462:	2201      	movs	r2, #1
1000a464:	4b11      	ldr	r3, [pc, #68]	; (1000a4ac <sms_button_fn+0x104>)
1000a466:	729a      	strb	r2, [r3, #10]
            sms_ble_send_characteristic(BLE_CHAR_BTN);
1000a468:	2000      	movs	r0, #0
1000a46a:	4b19      	ldr	r3, [pc, #100]	; (1000a4d0 <sms_button_fn+0x128>)
1000a46c:	4798      	blx	r3
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a46e:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
			button_instance.btn1.new_char = true;
            sms_ble_send_characteristic(BLE_CHAR_BTN);
			//ulp_ready = true;
            break;
1000a470:	e01a      	b.n	1000a4a8 <sms_button_fn+0x100>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_BOTH:
        if(ble_current_state == BLE_STATE_POWEROFF) {
1000a472:	4b12      	ldr	r3, [pc, #72]	; (1000a4bc <sms_button_fn+0x114>)
1000a474:	781b      	ldrb	r3, [r3, #0]
1000a476:	2b00      	cmp	r3, #0
1000a478:	d105      	bne.n	1000a486 <sms_button_fn+0xde>
            timer1_current_mode = TIMER1_MODE_NONE;
1000a47a:	4a11      	ldr	r2, [pc, #68]	; (1000a4c0 <sms_button_fn+0x118>)
1000a47c:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a47e:	4a11      	ldr	r2, [pc, #68]	; (1000a4c4 <sms_button_fn+0x11c>)
1000a480:	7013      	strb	r3, [r2, #0]
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a482:	2000      	movs	r0, #0
1000a484:	e010      	b.n	1000a4a8 <sms_button_fn+0x100>
                //pressure_device.state = PRESSURE_STATE_STDBY;
            //}
            //else {
                //pressure_device.state = PRESSURE_STATE_OFF;
            //}
            timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000a486:	2202      	movs	r2, #2
1000a488:	4b0d      	ldr	r3, [pc, #52]	; (1000a4c0 <sms_button_fn+0x118>)
1000a48a:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
1000a48c:	2300      	movs	r3, #0
1000a48e:	4a0d      	ldr	r2, [pc, #52]	; (1000a4c4 <sms_button_fn+0x11c>)
1000a490:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000a492:	4a0d      	ldr	r2, [pc, #52]	; (1000a4c8 <sms_button_fn+0x120>)
1000a494:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000a496:	2200      	movs	r2, #0
1000a498:	21fa      	movs	r1, #250	; 0xfa
1000a49a:	2001      	movs	r0, #1
1000a49c:	4b0b      	ldr	r3, [pc, #44]	; (1000a4cc <sms_button_fn+0x124>)
1000a49e:	4798      	blx	r3
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000a4a0:	2000      	movs	r0, #0
1000a4a2:	e001      	b.n	1000a4a8 <sms_button_fn+0x100>
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
			//ulp_ready = true;
            return -1;
1000a4a4:	2001      	movs	r0, #1
1000a4a6:	4240      	negs	r0, r0
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
}
1000a4a8:	bd10      	pop	{r4, pc}
1000a4aa:	46c0      	nop			; (mov r8, r8)
1000a4ac:	100156a4 	.word	0x100156a4
1000a4b0:	1000a35d 	.word	0x1000a35d
1000a4b4:	100127e8 	.word	0x100127e8
1000a4b8:	1000a595 	.word	0x1000a595
1000a4bc:	1001570c 	.word	0x1001570c
1000a4c0:	1001569c 	.word	0x1001569c
1000a4c4:	10015713 	.word	0x10015713
1000a4c8:	1001571e 	.word	0x1001571e
1000a4cc:	1000a6d1 	.word	0x1000a6d1
1000a4d0:	10009fbd 	.word	0x10009fbd
1000a4d4:	1001227c 	.word	0x1001227c
1000a4d8:	10010fb1 	.word	0x10010fb1
1000a4dc:	100127f8 	.word	0x100127f8
1000a4e0:	10010e91 	.word	0x10010e91

1000a4e4 <sms_button_toggle_interrupt>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_interrupt(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
1000a4e4:	b510      	push	{r4, lr}
1000a4e6:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
1000a4e8:	2800      	cmp	r0, #0
1000a4ea:	d104      	bne.n	1000a4f6 <sms_button_toggle_interrupt+0x12>
        gpio_enable_callback(button_instance.btn0.gpio_pin);
1000a4ec:	4b0c      	ldr	r3, [pc, #48]	; (1000a520 <sms_button_toggle_interrupt+0x3c>)
1000a4ee:	7858      	ldrb	r0, [r3, #1]
1000a4f0:	4b0c      	ldr	r3, [pc, #48]	; (1000a524 <sms_button_toggle_interrupt+0x40>)
1000a4f2:	4798      	blx	r3
1000a4f4:	e005      	b.n	1000a502 <sms_button_toggle_interrupt+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
1000a4f6:	2801      	cmp	r0, #1
1000a4f8:	d103      	bne.n	1000a502 <sms_button_toggle_interrupt+0x1e>
        gpio_disable_callback(button_instance.btn0.gpio_pin);
1000a4fa:	4b09      	ldr	r3, [pc, #36]	; (1000a520 <sms_button_toggle_interrupt+0x3c>)
1000a4fc:	7858      	ldrb	r0, [r3, #1]
1000a4fe:	4b0a      	ldr	r3, [pc, #40]	; (1000a528 <sms_button_toggle_interrupt+0x44>)
1000a500:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
1000a502:	2c00      	cmp	r4, #0
1000a504:	d104      	bne.n	1000a510 <sms_button_toggle_interrupt+0x2c>
        gpio_enable_callback(button_instance.btn1.gpio_pin);
1000a506:	4b06      	ldr	r3, [pc, #24]	; (1000a520 <sms_button_toggle_interrupt+0x3c>)
1000a508:	79d8      	ldrb	r0, [r3, #7]
1000a50a:	4b06      	ldr	r3, [pc, #24]	; (1000a524 <sms_button_toggle_interrupt+0x40>)
1000a50c:	4798      	blx	r3
1000a50e:	e005      	b.n	1000a51c <sms_button_toggle_interrupt+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
1000a510:	2c01      	cmp	r4, #1
1000a512:	d103      	bne.n	1000a51c <sms_button_toggle_interrupt+0x38>
        gpio_disable_callback(button_instance.btn1.gpio_pin);
1000a514:	4b02      	ldr	r3, [pc, #8]	; (1000a520 <sms_button_toggle_interrupt+0x3c>)
1000a516:	79d8      	ldrb	r0, [r3, #7]
1000a518:	4b03      	ldr	r3, [pc, #12]	; (1000a528 <sms_button_toggle_interrupt+0x44>)
1000a51a:	4798      	blx	r3
    }
}
1000a51c:	bd10      	pop	{r4, pc}
1000a51e:	46c0      	nop			; (mov r8, r8)
1000a520:	100156a4 	.word	0x100156a4
1000a524:	10008749 	.word	0x10008749
1000a528:	100087a5 	.word	0x100087a5

1000a52c <sms_button_define_services>:
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
1000a52c:	b510      	push	{r4, lr}
1000a52e:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000a530:	466b      	mov	r3, sp
1000a532:	1dda      	adds	r2, r3, #7
1000a534:	2300      	movs	r3, #0
1000a536:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
1000a538:	4c0d      	ldr	r4, [pc, #52]	; (1000a570 <sms_button_define_services+0x44>)
1000a53a:	0021      	movs	r1, r4
1000a53c:	2000      	movs	r0, #0
1000a53e:	4b0d      	ldr	r3, [pc, #52]	; (1000a574 <sms_button_define_services+0x48>)
1000a540:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
1000a542:	0020      	movs	r0, r4
1000a544:	4b0c      	ldr	r3, [pc, #48]	; (1000a578 <sms_button_define_services+0x4c>)
1000a546:	4798      	blx	r3
1000a548:	1e04      	subs	r4, r0, #0
1000a54a:	d007      	beq.n	1000a55c <sms_button_define_services+0x30>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
1000a54c:	480b      	ldr	r0, [pc, #44]	; (1000a57c <sms_button_define_services+0x50>)
1000a54e:	4b0c      	ldr	r3, [pc, #48]	; (1000a580 <sms_button_define_services+0x54>)
1000a550:	4798      	blx	r3
1000a552:	0021      	movs	r1, r4
1000a554:	480b      	ldr	r0, [pc, #44]	; (1000a584 <sms_button_define_services+0x58>)
1000a556:	4b0c      	ldr	r3, [pc, #48]	; (1000a588 <sms_button_define_services+0x5c>)
1000a558:	4798      	blx	r3
1000a55a:	e007      	b.n	1000a56c <sms_button_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
1000a55c:	4807      	ldr	r0, [pc, #28]	; (1000a57c <sms_button_define_services+0x50>)
1000a55e:	4b08      	ldr	r3, [pc, #32]	; (1000a580 <sms_button_define_services+0x54>)
1000a560:	4798      	blx	r3
1000a562:	4b0a      	ldr	r3, [pc, #40]	; (1000a58c <sms_button_define_services+0x60>)
1000a564:	8c59      	ldrh	r1, [r3, #34]	; 0x22
1000a566:	480a      	ldr	r0, [pc, #40]	; (1000a590 <sms_button_define_services+0x64>)
1000a568:	4b07      	ldr	r3, [pc, #28]	; (1000a588 <sms_button_define_services+0x5c>)
1000a56a:	4798      	blx	r3
    }
1000a56c:	b002      	add	sp, #8
1000a56e:	bd10      	pop	{r4, pc}
1000a570:	100156b4 	.word	0x100156b4
1000a574:	1000a135 	.word	0x1000a135
1000a578:	1000a111 	.word	0x1000a111
1000a57c:	1001227c 	.word	0x1001227c
1000a580:	10010fb1 	.word	0x10010fb1
1000a584:	10012820 	.word	0x10012820
1000a588:	10010e91 	.word	0x10010e91
1000a58c:	100156a4 	.word	0x100156a4
1000a590:	10012864 	.word	0x10012864

1000a594 <sms_monitor_get_states>:
	}
	gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
}

void sms_monitor_get_states(const char *label)
{
1000a594:	b570      	push	{r4, r5, r6, lr}
1000a596:	b084      	sub	sp, #16
1000a598:	0004      	movs	r4, r0
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
1000a59a:	480c      	ldr	r0, [pc, #48]	; (1000a5cc <sms_monitor_get_states+0x38>)
1000a59c:	4b0c      	ldr	r3, [pc, #48]	; (1000a5d0 <sms_monitor_get_states+0x3c>)
1000a59e:	4798      	blx	r3
1000a5a0:	4b0c      	ldr	r3, [pc, #48]	; (1000a5d4 <sms_monitor_get_states+0x40>)
1000a5a2:	7819      	ldrb	r1, [r3, #0]
1000a5a4:	4b0c      	ldr	r3, [pc, #48]	; (1000a5d8 <sms_monitor_get_states+0x44>)
1000a5a6:	7818      	ldrb	r0, [r3, #0]
1000a5a8:	4b0c      	ldr	r3, [pc, #48]	; (1000a5dc <sms_monitor_get_states+0x48>)
1000a5aa:	781d      	ldrb	r5, [r3, #0]
1000a5ac:	4b0c      	ldr	r3, [pc, #48]	; (1000a5e0 <sms_monitor_get_states+0x4c>)
1000a5ae:	781e      	ldrb	r6, [r3, #0]
1000a5b0:	4a0c      	ldr	r2, [pc, #48]	; (1000a5e4 <sms_monitor_get_states+0x50>)
1000a5b2:	7b53      	ldrb	r3, [r2, #13]
1000a5b4:	7b12      	ldrb	r2, [r2, #12]
1000a5b6:	9603      	str	r6, [sp, #12]
1000a5b8:	9502      	str	r5, [sp, #8]
1000a5ba:	9001      	str	r0, [sp, #4]
1000a5bc:	9100      	str	r1, [sp, #0]
1000a5be:	0021      	movs	r1, r4
1000a5c0:	4809      	ldr	r0, [pc, #36]	; (1000a5e8 <sms_monitor_get_states+0x54>)
1000a5c2:	4c0a      	ldr	r4, [pc, #40]	; (1000a5ec <sms_monitor_get_states+0x58>)
1000a5c4:	47a0      	blx	r4
}
1000a5c6:	b004      	add	sp, #16
1000a5c8:	bd70      	pop	{r4, r5, r6, pc}
1000a5ca:	46c0      	nop			; (mov r8, r8)
1000a5cc:	1001227c 	.word	0x1001227c
1000a5d0:	10010fb1 	.word	0x10010fb1
1000a5d4:	1001570c 	.word	0x1001570c
1000a5d8:	1001569c 	.word	0x1001569c
1000a5dc:	10015713 	.word	0x10015713
1000a5e0:	1001569e 	.word	0x1001569e
1000a5e4:	100156a4 	.word	0x100156a4
1000a5e8:	100128cc 	.word	0x100128cc
1000a5ec:	10010e91 	.word	0x10010e91

1000a5f0 <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0_PIN);
}


void sms_led_switch_on(enum sms_leds led)
{
1000a5f0:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
1000a5f2:	2100      	movs	r1, #0
1000a5f4:	4b01      	ldr	r3, [pc, #4]	; (1000a5fc <sms_led_switch_on+0xc>)
1000a5f6:	4798      	blx	r3
}
1000a5f8:	bd10      	pop	{r4, pc}
1000a5fa:	46c0      	nop			; (mov r8, r8)
1000a5fc:	100084a1 	.word	0x100084a1

1000a600 <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
1000a600:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
1000a602:	2101      	movs	r1, #1
1000a604:	4b01      	ldr	r3, [pc, #4]	; (1000a60c <sms_led_switch_off+0xc>)
1000a606:	4798      	blx	r3
}
1000a608:	bd10      	pop	{r4, pc}
1000a60a:	46c0      	nop			; (mov r8, r8)
1000a60c:	100084a1 	.word	0x100084a1

1000a610 <sms_led_toggle>:


void sms_led_toggle(enum sms_leds led)
{
1000a610:	b510      	push	{r4, lr}
1000a612:	0004      	movs	r4, r0
}


bool sms_led_get_state(enum sms_leds led)
{
    return gpio_pin_get_output_level(led);
1000a614:	4b05      	ldr	r3, [pc, #20]	; (1000a62c <sms_led_toggle+0x1c>)
1000a616:	4798      	blx	r3


void sms_led_toggle(enum sms_leds led)
{
    bool state = sms_led_get_state(led);
    if(state == SMS_LED_ACTIVE) sms_led_switch_off(led);
1000a618:	2800      	cmp	r0, #0
1000a61a:	d103      	bne.n	1000a624 <sms_led_toggle+0x14>
1000a61c:	0020      	movs	r0, r4
1000a61e:	4b04      	ldr	r3, [pc, #16]	; (1000a630 <sms_led_toggle+0x20>)
1000a620:	4798      	blx	r3
1000a622:	e002      	b.n	1000a62a <sms_led_toggle+0x1a>
    else sms_led_switch_on(led);
1000a624:	0020      	movs	r0, r4
1000a626:	4b03      	ldr	r3, [pc, #12]	; (1000a634 <sms_led_toggle+0x24>)
1000a628:	4798      	blx	r3
}
1000a62a:	bd10      	pop	{r4, pc}
1000a62c:	10008451 	.word	0x10008451
1000a630:	1000a601 	.word	0x1000a601
1000a634:	1000a5f1 	.word	0x1000a5f1

1000a638 <sms_led_blink_start>:
    return gpio_pin_get_output_level(led);
}


void sms_led_blink_start(enum sms_leds led)
{
1000a638:	b510      	push	{r4, lr}
    sms_led_switch_on(led);
1000a63a:	4b0c      	ldr	r3, [pc, #48]	; (1000a66c <sms_led_blink_start+0x34>)
1000a63c:	4798      	blx	r3
    sms_led_blink_cnt = 0;
1000a63e:	2200      	movs	r2, #0
1000a640:	4b0b      	ldr	r3, [pc, #44]	; (1000a670 <sms_led_blink_start+0x38>)
1000a642:	701a      	strb	r2, [r3, #0]
    uint32_t delay = 0;
    switch(timer2_current_mode) {
1000a644:	4b0b      	ldr	r3, [pc, #44]	; (1000a674 <sms_led_blink_start+0x3c>)
1000a646:	781b      	ldrb	r3, [r3, #0]
1000a648:	b2db      	uxtb	r3, r3
1000a64a:	2b02      	cmp	r3, #2
1000a64c:	d002      	beq.n	1000a654 <sms_led_blink_start+0x1c>
1000a64e:	2b03      	cmp	r3, #3
1000a650:	d002      	beq.n	1000a658 <sms_led_blink_start+0x20>
1000a652:	e004      	b.n	1000a65e <sms_led_blink_start+0x26>
        case TIMER2_MODE_LED_STARTUP:
        delay = SMS_BLINK_STARTUP_MS;
1000a654:	2164      	movs	r1, #100	; 0x64
1000a656:	e003      	b.n	1000a660 <sms_led_blink_start+0x28>
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        delay = SMS_BLINK_SHTDWN_MS;
1000a658:	21c8      	movs	r1, #200	; 0xc8
1000a65a:	0049      	lsls	r1, r1, #1
        break;
1000a65c:	e000      	b.n	1000a660 <sms_led_blink_start+0x28>

void sms_led_blink_start(enum sms_leds led)
{
    sms_led_switch_on(led);
    sms_led_blink_cnt = 0;
    uint32_t delay = 0;
1000a65e:	2100      	movs	r1, #0
        
        default:
        break;
    }

    sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
1000a660:	2201      	movs	r2, #1
1000a662:	2001      	movs	r0, #1
1000a664:	4b04      	ldr	r3, [pc, #16]	; (1000a678 <sms_led_blink_start+0x40>)
1000a666:	4798      	blx	r3
}
1000a668:	bd10      	pop	{r4, pc}
1000a66a:	46c0      	nop			; (mov r8, r8)
1000a66c:	1000a5f1 	.word	0x1000a5f1
1000a670:	10015724 	.word	0x10015724
1000a674:	10015713 	.word	0x10015713
1000a678:	1000a6d1 	.word	0x1000a6d1

1000a67c <sms_dualtimer_init>:
    count = (uint32_t *)0;
}

/* DUALTIMER */
void sms_dualtimer_init(void)
{
1000a67c:	b510      	push	{r4, lr}
1000a67e:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000a680:	ac01      	add	r4, sp, #4
1000a682:	0020      	movs	r0, r4
1000a684:	4b08      	ldr	r3, [pc, #32]	; (1000a6a8 <sms_dualtimer_init+0x2c>)
1000a686:	4798      	blx	r3

    config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_S;
1000a688:	4a08      	ldr	r2, [pc, #32]	; (1000a6ac <sms_dualtimer_init+0x30>)
1000a68a:	60a2      	str	r2, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000a68c:	2300      	movs	r3, #0
1000a68e:	7063      	strb	r3, [r4, #1]
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_S;
1000a690:	6162      	str	r2, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000a692:	7363      	strb	r3, [r4, #13]

    dualtimer_init(&config_dualtimer);
1000a694:	0020      	movs	r0, r4
1000a696:	4b06      	ldr	r3, [pc, #24]	; (1000a6b0 <sms_dualtimer_init+0x34>)
1000a698:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000a69a:	2000      	movs	r0, #0
1000a69c:	4c05      	ldr	r4, [pc, #20]	; (1000a6b4 <sms_dualtimer_init+0x38>)
1000a69e:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
1000a6a0:	2001      	movs	r0, #1
1000a6a2:	47a0      	blx	r4
}
1000a6a4:	b008      	add	sp, #32
1000a6a6:	bd10      	pop	{r4, pc}
1000a6a8:	1000ab3d 	.word	0x1000ab3d
1000a6ac:	018cba80 	.word	0x018cba80
1000a6b0:	1000abd1 	.word	0x1000abd1
1000a6b4:	1000abad 	.word	0x1000abad

1000a6b8 <sms_dualtimer_register_callback>:

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
1000a6b8:	b510      	push	{r4, lr}
1000a6ba:	0004      	movs	r4, r0
    dualtimer_register_callback(tmr, cb_handler);
1000a6bc:	4b02      	ldr	r3, [pc, #8]	; (1000a6c8 <sms_dualtimer_register_callback+0x10>)
1000a6be:	4798      	blx	r3
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000a6c0:	0020      	movs	r0, r4
1000a6c2:	4b02      	ldr	r3, [pc, #8]	; (1000a6cc <sms_dualtimer_register_callback+0x14>)
1000a6c4:	4798      	blx	r3

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}
1000a6c6:	bd10      	pop	{r4, pc}
1000a6c8:	1000acd5 	.word	0x1000acd5
1000a6cc:	1000abad 	.word	0x1000abad

1000a6d0 <sms_dualtimer_start>:

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
1000a6d0:	b510      	push	{r4, lr}
1000a6d2:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
1000a6d4:	2801      	cmp	r0, #1
1000a6d6:	d006      	beq.n	1000a6e6 <sms_dualtimer_start+0x16>
1000a6d8:	2800      	cmp	r0, #0
1000a6da:	d002      	beq.n	1000a6e2 <sms_dualtimer_start+0x12>
1000a6dc:	2802      	cmp	r0, #2
1000a6de:	d004      	beq.n	1000a6ea <sms_dualtimer_start+0x1a>
1000a6e0:	e005      	b.n	1000a6ee <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
1000a6e2:	221a      	movs	r2, #26
1000a6e4:	e004      	b.n	1000a6f0 <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
1000a6e6:	4a0c      	ldr	r2, [pc, #48]	; (1000a718 <sms_dualtimer_start+0x48>)
        break;
1000a6e8:	e002      	b.n	1000a6f0 <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
1000a6ea:	4a0c      	ldr	r2, [pc, #48]	; (1000a71c <sms_dualtimer_start+0x4c>)
        break;
1000a6ec:	e000      	b.n	1000a6f0 <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
1000a6ee:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
1000a6f0:	2900      	cmp	r1, #0
1000a6f2:	d101      	bne.n	1000a6f8 <sms_dualtimer_start+0x28>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1000");
        delay = 1000;
1000a6f4:	21fa      	movs	r1, #250	; 0xfa
1000a6f6:	0089      	lsls	r1, r1, #2
    }
    
    ulp_ready = false;
1000a6f8:	2000      	movs	r0, #0
1000a6fa:	4b09      	ldr	r3, [pc, #36]	; (1000a720 <sms_dualtimer_start+0x50>)
1000a6fc:	7018      	strb	r0, [r3, #0]
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
1000a6fe:	434a      	muls	r2, r1
1000a700:	2100      	movs	r1, #0
1000a702:	0020      	movs	r0, r4
1000a704:	4b07      	ldr	r3, [pc, #28]	; (1000a724 <sms_dualtimer_start+0x54>)
1000a706:	4798      	blx	r3
    dualtimer_enable(tmr);
1000a708:	0020      	movs	r0, r4
1000a70a:	4b07      	ldr	r3, [pc, #28]	; (1000a728 <sms_dualtimer_start+0x58>)
1000a70c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a70e:	2280      	movs	r2, #128	; 0x80
1000a710:	01d2      	lsls	r2, r2, #7
1000a712:	4b06      	ldr	r3, [pc, #24]	; (1000a72c <sms_dualtimer_start+0x5c>)
1000a714:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000a716:	bd10      	pop	{r4, pc}
1000a718:	00006590 	.word	0x00006590
1000a71c:	018cba80 	.word	0x018cba80
1000a720:	1001569f 	.word	0x1001569f
1000a724:	1000ab61 	.word	0x1000ab61
1000a728:	1000ab89 	.word	0x1000ab89
1000a72c:	e000e100 	.word	0xe000e100

1000a730 <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
1000a730:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
1000a732:	4b01      	ldr	r3, [pc, #4]	; (1000a738 <sms_dualtimer_stop+0x8>)
1000a734:	4798      	blx	r3
}
1000a736:	bd10      	pop	{r4, pc}
1000a738:	1000abad 	.word	0x1000abad

1000a73c <sms_dualtimer1_cb>:

void sms_dualtimer1_cb(void)
{
1000a73c:	b510      	push	{r4, lr}
    timer1_instance.new_int = true;
1000a73e:	2201      	movs	r2, #1
1000a740:	4b04      	ldr	r3, [pc, #16]	; (1000a754 <sms_dualtimer1_cb+0x18>)
1000a742:	709a      	strb	r2, [r3, #2]
    send_plf_int_msg_ind(DUALTIMER_TIMER1_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000a744:	2300      	movs	r3, #0
1000a746:	2200      	movs	r2, #0
1000a748:	2101      	movs	r1, #1
1000a74a:	2040      	movs	r0, #64	; 0x40
1000a74c:	4c02      	ldr	r4, [pc, #8]	; (1000a758 <sms_dualtimer1_cb+0x1c>)
1000a74e:	47a0      	blx	r4
}
1000a750:	bd10      	pop	{r4, pc}
1000a752:	46c0      	nop			; (mov r8, r8)
1000a754:	10015704 	.word	0x10015704
1000a758:	10009781 	.word	0x10009781

1000a75c <sms_dualtimer2_cb>:

void sms_dualtimer2_cb(void)
{
1000a75c:	b510      	push	{r4, lr}
    timer2_instance.new_int = true;
1000a75e:	2201      	movs	r2, #1
1000a760:	4b04      	ldr	r3, [pc, #16]	; (1000a774 <sms_dualtimer2_cb+0x18>)
1000a762:	709a      	strb	r2, [r3, #2]
    send_plf_int_msg_ind(DUALTIMER_TIMER2_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000a764:	2300      	movs	r3, #0
1000a766:	2200      	movs	r2, #0
1000a768:	2101      	movs	r1, #1
1000a76a:	2041      	movs	r0, #65	; 0x41
1000a76c:	4c02      	ldr	r4, [pc, #8]	; (1000a778 <sms_dualtimer2_cb+0x1c>)
1000a76e:	47a0      	blx	r4
}
1000a770:	bd10      	pop	{r4, pc}
1000a772:	46c0      	nop			; (mov r8, r8)
1000a774:	10015710 	.word	0x10015710
1000a778:	10009781 	.word	0x10009781

1000a77c <sms_dualtimer1_fn>:


void sms_dualtimer1_fn(void)
{
1000a77c:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    switch(timer1_current_mode) {
1000a77e:	4b75      	ldr	r3, [pc, #468]	; (1000a954 <sms_dualtimer1_fn+0x1d8>)
1000a780:	781b      	ldrb	r3, [r3, #0]
1000a782:	b2db      	uxtb	r3, r3
1000a784:	2b01      	cmp	r3, #1
1000a786:	d003      	beq.n	1000a790 <sms_dualtimer1_fn+0x14>
1000a788:	2b02      	cmp	r3, #2
1000a78a:	d100      	bne.n	1000a78e <sms_dualtimer1_fn+0x12>
1000a78c:	e0ae      	b.n	1000a8ec <sms_dualtimer1_fn+0x170>
1000a78e:	e0d8      	b.n	1000a942 <sms_dualtimer1_fn+0x1c6>
        /* Timer1 mode = STARTUP */
        case TIMER1_MODE_STARTUP:
        {
            timer1_current_mode = TIMER1_MODE_NONE;
1000a790:	2200      	movs	r2, #0
1000a792:	4b70      	ldr	r3, [pc, #448]	; (1000a954 <sms_dualtimer1_fn+0x1d8>)
1000a794:	701a      	strb	r2, [r3, #0]
            button_instance.previous_state = button_instance.current_state;
1000a796:	4c70      	ldr	r4, [pc, #448]	; (1000a958 <sms_dualtimer1_fn+0x1dc>)
1000a798:	7b63      	ldrb	r3, [r4, #13]
1000a79a:	7323      	strb	r3, [r4, #12]
            button_instance.current_state = sms_button_get_state();
1000a79c:	4b6f      	ldr	r3, [pc, #444]	; (1000a95c <sms_dualtimer1_fn+0x1e0>)
1000a79e:	4798      	blx	r3
1000a7a0:	7360      	strb	r0, [r4, #13]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000a7a2:	486f      	ldr	r0, [pc, #444]	; (1000a960 <sms_dualtimer1_fn+0x1e4>)
1000a7a4:	4b6f      	ldr	r3, [pc, #444]	; (1000a964 <sms_dualtimer1_fn+0x1e8>)
1000a7a6:	4798      	blx	r3
            
            switch(button_instance.previous_state) {
1000a7a8:	7b23      	ldrb	r3, [r4, #12]
1000a7aa:	2b01      	cmp	r3, #1
1000a7ac:	d002      	beq.n	1000a7b4 <sms_dualtimer1_fn+0x38>
1000a7ae:	2b02      	cmp	r3, #2
1000a7b0:	d04c      	beq.n	1000a84c <sms_dualtimer1_fn+0xd0>
1000a7b2:	e093      	b.n	1000a8dc <sms_dualtimer1_fn+0x160>
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B0:
                switch(button_instance.current_state) {
1000a7b4:	4b68      	ldr	r3, [pc, #416]	; (1000a958 <sms_dualtimer1_fn+0x1dc>)
1000a7b6:	7b5b      	ldrb	r3, [r3, #13]
1000a7b8:	2b01      	cmp	r3, #1
1000a7ba:	d002      	beq.n	1000a7c2 <sms_dualtimer1_fn+0x46>
1000a7bc:	2b02      	cmp	r3, #2
1000a7be:	d023      	beq.n	1000a808 <sms_dualtimer1_fn+0x8c>
1000a7c0:	e03b      	b.n	1000a83a <sms_dualtimer1_fn+0xbe>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000a7c2:	4b69      	ldr	r3, [pc, #420]	; (1000a968 <sms_dualtimer1_fn+0x1ec>)
1000a7c4:	781b      	ldrb	r3, [r3, #0]
1000a7c6:	2b00      	cmp	r3, #0
1000a7c8:	d115      	bne.n	1000a7f6 <sms_dualtimer1_fn+0x7a>
                        sms_btn_cnt++;
1000a7ca:	4a68      	ldr	r2, [pc, #416]	; (1000a96c <sms_dualtimer1_fn+0x1f0>)
1000a7cc:	7813      	ldrb	r3, [r2, #0]
1000a7ce:	3301      	adds	r3, #1
1000a7d0:	b2db      	uxtb	r3, r3
1000a7d2:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000a7d4:	2b0f      	cmp	r3, #15
1000a7d6:	d905      	bls.n	1000a7e4 <sms_dualtimer1_fn+0x68>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000a7d8:	2200      	movs	r2, #0
1000a7da:	4b5e      	ldr	r3, [pc, #376]	; (1000a954 <sms_dualtimer1_fn+0x1d8>)
1000a7dc:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000a7de:	4b64      	ldr	r3, [pc, #400]	; (1000a970 <sms_dualtimer1_fn+0x1f4>)
1000a7e0:	4798      	blx	r3
1000a7e2:	e0b5      	b.n	1000a950 <sms_dualtimer1_fn+0x1d4>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a7e4:	2201      	movs	r2, #1
1000a7e6:	4b5b      	ldr	r3, [pc, #364]	; (1000a954 <sms_dualtimer1_fn+0x1d8>)
1000a7e8:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a7ea:	2200      	movs	r2, #0
1000a7ec:	21fa      	movs	r1, #250	; 0xfa
1000a7ee:	2001      	movs	r0, #1
1000a7f0:	4b60      	ldr	r3, [pc, #384]	; (1000a974 <sms_dualtimer1_fn+0x1f8>)
1000a7f2:	4798      	blx	r3
1000a7f4:	e0ac      	b.n	1000a950 <sms_dualtimer1_fn+0x1d4>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a7f6:	4b60      	ldr	r3, [pc, #384]	; (1000a978 <sms_dualtimer1_fn+0x1fc>)
1000a7f8:	781b      	ldrb	r3, [r3, #0]
1000a7fa:	2b00      	cmp	r3, #0
1000a7fc:	d000      	beq.n	1000a800 <sms_dualtimer1_fn+0x84>
1000a7fe:	e0a7      	b.n	1000a950 <sms_dualtimer1_fn+0x1d4>
                            //release_sleep_lock();
                            ulp_ready = true;
1000a800:	2201      	movs	r2, #1
1000a802:	4b5e      	ldr	r3, [pc, #376]	; (1000a97c <sms_dualtimer1_fn+0x200>)
1000a804:	701a      	strb	r2, [r3, #0]
1000a806:	e0a3      	b.n	1000a950 <sms_dualtimer1_fn+0x1d4>
                    }
                    break;
                    
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000a808:	4b57      	ldr	r3, [pc, #348]	; (1000a968 <sms_dualtimer1_fn+0x1ec>)
1000a80a:	781b      	ldrb	r3, [r3, #0]
1000a80c:	2b00      	cmp	r3, #0
1000a80e:	d10b      	bne.n	1000a828 <sms_dualtimer1_fn+0xac>
                        sms_btn_cnt = 0;
1000a810:	2200      	movs	r2, #0
1000a812:	4b56      	ldr	r3, [pc, #344]	; (1000a96c <sms_dualtimer1_fn+0x1f0>)
1000a814:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000a816:	3201      	adds	r2, #1
1000a818:	4b4e      	ldr	r3, [pc, #312]	; (1000a954 <sms_dualtimer1_fn+0x1d8>)
1000a81a:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000a81c:	2200      	movs	r2, #0
1000a81e:	2164      	movs	r1, #100	; 0x64
1000a820:	2001      	movs	r0, #1
1000a822:	4b54      	ldr	r3, [pc, #336]	; (1000a974 <sms_dualtimer1_fn+0x1f8>)
1000a824:	4798      	blx	r3
1000a826:	e093      	b.n	1000a950 <sms_dualtimer1_fn+0x1d4>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a828:	4b53      	ldr	r3, [pc, #332]	; (1000a978 <sms_dualtimer1_fn+0x1fc>)
1000a82a:	781b      	ldrb	r3, [r3, #0]
1000a82c:	2b00      	cmp	r3, #0
1000a82e:	d000      	beq.n	1000a832 <sms_dualtimer1_fn+0xb6>
1000a830:	e08e      	b.n	1000a950 <sms_dualtimer1_fn+0x1d4>
                            //release_sleep_lock();
                            ulp_ready = true;
1000a832:	2201      	movs	r2, #1
1000a834:	4b51      	ldr	r3, [pc, #324]	; (1000a97c <sms_dualtimer1_fn+0x200>)
1000a836:	701a      	strb	r2, [r3, #0]
1000a838:	e08a      	b.n	1000a950 <sms_dualtimer1_fn+0x1d4>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_BOTH:
                    case BUTTON_STATE_NONE:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a83a:	4b4f      	ldr	r3, [pc, #316]	; (1000a978 <sms_dualtimer1_fn+0x1fc>)
1000a83c:	781b      	ldrb	r3, [r3, #0]
1000a83e:	2b00      	cmp	r3, #0
1000a840:	d000      	beq.n	1000a844 <sms_dualtimer1_fn+0xc8>
1000a842:	e085      	b.n	1000a950 <sms_dualtimer1_fn+0x1d4>
                        //release_sleep_lock();
                        ulp_ready = true;
1000a844:	2201      	movs	r2, #1
1000a846:	4b4d      	ldr	r3, [pc, #308]	; (1000a97c <sms_dualtimer1_fn+0x200>)
1000a848:	701a      	strb	r2, [r3, #0]
1000a84a:	e081      	b.n	1000a950 <sms_dualtimer1_fn+0x1d4>
                }
                break;
                
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B1:
                switch(button_instance.current_state) {
1000a84c:	4b42      	ldr	r3, [pc, #264]	; (1000a958 <sms_dualtimer1_fn+0x1dc>)
1000a84e:	7b5b      	ldrb	r3, [r3, #13]
1000a850:	2b01      	cmp	r3, #1
1000a852:	d023      	beq.n	1000a89c <sms_dualtimer1_fn+0x120>
1000a854:	2b02      	cmp	r3, #2
1000a856:	d139      	bne.n	1000a8cc <sms_dualtimer1_fn+0x150>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000a858:	4b43      	ldr	r3, [pc, #268]	; (1000a968 <sms_dualtimer1_fn+0x1ec>)
1000a85a:	781b      	ldrb	r3, [r3, #0]
1000a85c:	2b00      	cmp	r3, #0
1000a85e:	d115      	bne.n	1000a88c <sms_dualtimer1_fn+0x110>
                        sms_btn_cnt++;
1000a860:	4a42      	ldr	r2, [pc, #264]	; (1000a96c <sms_dualtimer1_fn+0x1f0>)
1000a862:	7813      	ldrb	r3, [r2, #0]
1000a864:	3301      	adds	r3, #1
1000a866:	b2db      	uxtb	r3, r3
1000a868:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000a86a:	2b0f      	cmp	r3, #15
1000a86c:	d905      	bls.n	1000a87a <sms_dualtimer1_fn+0xfe>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000a86e:	2200      	movs	r2, #0
1000a870:	4b38      	ldr	r3, [pc, #224]	; (1000a954 <sms_dualtimer1_fn+0x1d8>)
1000a872:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000a874:	4b3e      	ldr	r3, [pc, #248]	; (1000a970 <sms_dualtimer1_fn+0x1f4>)
1000a876:	4798      	blx	r3
1000a878:	e06a      	b.n	1000a950 <sms_dualtimer1_fn+0x1d4>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a87a:	2201      	movs	r2, #1
1000a87c:	4b35      	ldr	r3, [pc, #212]	; (1000a954 <sms_dualtimer1_fn+0x1d8>)
1000a87e:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a880:	2200      	movs	r2, #0
1000a882:	21fa      	movs	r1, #250	; 0xfa
1000a884:	2001      	movs	r0, #1
1000a886:	4b3b      	ldr	r3, [pc, #236]	; (1000a974 <sms_dualtimer1_fn+0x1f8>)
1000a888:	4798      	blx	r3
1000a88a:	e061      	b.n	1000a950 <sms_dualtimer1_fn+0x1d4>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a88c:	4b3a      	ldr	r3, [pc, #232]	; (1000a978 <sms_dualtimer1_fn+0x1fc>)
1000a88e:	781b      	ldrb	r3, [r3, #0]
1000a890:	2b00      	cmp	r3, #0
1000a892:	d15d      	bne.n	1000a950 <sms_dualtimer1_fn+0x1d4>
                            //release_sleep_lock();
                            ulp_ready = true;
1000a894:	2201      	movs	r2, #1
1000a896:	4b39      	ldr	r3, [pc, #228]	; (1000a97c <sms_dualtimer1_fn+0x200>)
1000a898:	701a      	strb	r2, [r3, #0]
1000a89a:	e059      	b.n	1000a950 <sms_dualtimer1_fn+0x1d4>
                    }
                    break;
                    
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000a89c:	4b32      	ldr	r3, [pc, #200]	; (1000a968 <sms_dualtimer1_fn+0x1ec>)
1000a89e:	781b      	ldrb	r3, [r3, #0]
1000a8a0:	2b00      	cmp	r3, #0
1000a8a2:	d10b      	bne.n	1000a8bc <sms_dualtimer1_fn+0x140>
                        sms_btn_cnt = 0;
1000a8a4:	2200      	movs	r2, #0
1000a8a6:	4b31      	ldr	r3, [pc, #196]	; (1000a96c <sms_dualtimer1_fn+0x1f0>)
1000a8a8:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000a8aa:	3201      	adds	r2, #1
1000a8ac:	4b29      	ldr	r3, [pc, #164]	; (1000a954 <sms_dualtimer1_fn+0x1d8>)
1000a8ae:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000a8b0:	2200      	movs	r2, #0
1000a8b2:	2164      	movs	r1, #100	; 0x64
1000a8b4:	2001      	movs	r0, #1
1000a8b6:	4b2f      	ldr	r3, [pc, #188]	; (1000a974 <sms_dualtimer1_fn+0x1f8>)
1000a8b8:	4798      	blx	r3
1000a8ba:	e049      	b.n	1000a950 <sms_dualtimer1_fn+0x1d4>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a8bc:	4b2e      	ldr	r3, [pc, #184]	; (1000a978 <sms_dualtimer1_fn+0x1fc>)
1000a8be:	781b      	ldrb	r3, [r3, #0]
1000a8c0:	2b00      	cmp	r3, #0
1000a8c2:	d145      	bne.n	1000a950 <sms_dualtimer1_fn+0x1d4>
                            //release_sleep_lock();
                            ulp_ready = true;
1000a8c4:	2201      	movs	r2, #1
1000a8c6:	4b2d      	ldr	r3, [pc, #180]	; (1000a97c <sms_dualtimer1_fn+0x200>)
1000a8c8:	701a      	strb	r2, [r3, #0]
1000a8ca:	e041      	b.n	1000a950 <sms_dualtimer1_fn+0x1d4>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_NONE:
                    case BUTTON_STATE_BOTH:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a8cc:	4b2a      	ldr	r3, [pc, #168]	; (1000a978 <sms_dualtimer1_fn+0x1fc>)
1000a8ce:	781b      	ldrb	r3, [r3, #0]
1000a8d0:	2b00      	cmp	r3, #0
1000a8d2:	d13d      	bne.n	1000a950 <sms_dualtimer1_fn+0x1d4>
                        //release_sleep_lock();
                        ulp_ready = true;
1000a8d4:	2201      	movs	r2, #1
1000a8d6:	4b29      	ldr	r3, [pc, #164]	; (1000a97c <sms_dualtimer1_fn+0x200>)
1000a8d8:	701a      	strb	r2, [r3, #0]
1000a8da:	e039      	b.n	1000a950 <sms_dualtimer1_fn+0x1d4>
                case BUTTON_STATE_NONE:
                case BUTTON_STATE_BOTH:
                default:
                {
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a8dc:	4b26      	ldr	r3, [pc, #152]	; (1000a978 <sms_dualtimer1_fn+0x1fc>)
1000a8de:	781b      	ldrb	r3, [r3, #0]
1000a8e0:	2b00      	cmp	r3, #0
1000a8e2:	d135      	bne.n	1000a950 <sms_dualtimer1_fn+0x1d4>
                        //release_sleep_lock();
                        ulp_ready = true;
1000a8e4:	2201      	movs	r2, #1
1000a8e6:	4b25      	ldr	r3, [pc, #148]	; (1000a97c <sms_dualtimer1_fn+0x200>)
1000a8e8:	701a      	strb	r2, [r3, #0]
1000a8ea:	e031      	b.n	1000a950 <sms_dualtimer1_fn+0x1d4>
        
        /* Timer1 mode = SHUTDOWN */
        case TIMER1_MODE_SHUTDOWN:
        {
            //timer1_current_mode = TIMER1_MODE_NONE;
            button_instance.previous_state = button_instance.current_state;
1000a8ec:	4c1a      	ldr	r4, [pc, #104]	; (1000a958 <sms_dualtimer1_fn+0x1dc>)
1000a8ee:	7b63      	ldrb	r3, [r4, #13]
1000a8f0:	7323      	strb	r3, [r4, #12]
            button_instance.current_state = sms_button_get_state();
1000a8f2:	4b1a      	ldr	r3, [pc, #104]	; (1000a95c <sms_dualtimer1_fn+0x1e0>)
1000a8f4:	4798      	blx	r3
1000a8f6:	7360      	strb	r0, [r4, #13]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000a8f8:	4819      	ldr	r0, [pc, #100]	; (1000a960 <sms_dualtimer1_fn+0x1e4>)
1000a8fa:	4b1a      	ldr	r3, [pc, #104]	; (1000a964 <sms_dualtimer1_fn+0x1e8>)
1000a8fc:	4798      	blx	r3
            
            if((button_instance.previous_state == BUTTON_STATE_BOTH) && (button_instance.current_state == BUTTON_STATE_BOTH)) {
1000a8fe:	89a2      	ldrh	r2, [r4, #12]
1000a900:	4b1f      	ldr	r3, [pc, #124]	; (1000a980 <sms_dualtimer1_fn+0x204>)
1000a902:	429a      	cmp	r2, r3
1000a904:	d112      	bne.n	1000a92c <sms_dualtimer1_fn+0x1b0>
                sms_btn_cnt++;
1000a906:	4a19      	ldr	r2, [pc, #100]	; (1000a96c <sms_dualtimer1_fn+0x1f0>)
1000a908:	7813      	ldrb	r3, [r2, #0]
1000a90a:	3301      	adds	r3, #1
1000a90c:	b2db      	uxtb	r3, r3
1000a90e:	7013      	strb	r3, [r2, #0]
                if(sms_btn_cnt >= SMS_BTN_SHTDWN_CNT) {
1000a910:	2b09      	cmp	r3, #9
1000a912:	d902      	bls.n	1000a91a <sms_dualtimer1_fn+0x19e>
                    sms_ble_power_down();
1000a914:	4b1b      	ldr	r3, [pc, #108]	; (1000a984 <sms_dualtimer1_fn+0x208>)
1000a916:	4798      	blx	r3
1000a918:	e01a      	b.n	1000a950 <sms_dualtimer1_fn+0x1d4>
                }
                else {
                    //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                    timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000a91a:	2202      	movs	r2, #2
1000a91c:	4b0d      	ldr	r3, [pc, #52]	; (1000a954 <sms_dualtimer1_fn+0x1d8>)
1000a91e:	701a      	strb	r2, [r3, #0]
                    sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000a920:	2200      	movs	r2, #0
1000a922:	21fa      	movs	r1, #250	; 0xfa
1000a924:	2001      	movs	r0, #1
1000a926:	4b13      	ldr	r3, [pc, #76]	; (1000a974 <sms_dualtimer1_fn+0x1f8>)
1000a928:	4798      	blx	r3
1000a92a:	e011      	b.n	1000a950 <sms_dualtimer1_fn+0x1d4>
                }
            }
            else {
                timer1_current_mode = TIMER1_MODE_NONE;
1000a92c:	2200      	movs	r2, #0
1000a92e:	4b09      	ldr	r3, [pc, #36]	; (1000a954 <sms_dualtimer1_fn+0x1d8>)
1000a930:	701a      	strb	r2, [r3, #0]
                if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a932:	4b11      	ldr	r3, [pc, #68]	; (1000a978 <sms_dualtimer1_fn+0x1fc>)
1000a934:	781b      	ldrb	r3, [r3, #0]
1000a936:	2b00      	cmp	r3, #0
1000a938:	d10a      	bne.n	1000a950 <sms_dualtimer1_fn+0x1d4>
                    ulp_ready = true;
1000a93a:	3201      	adds	r2, #1
1000a93c:	4b0f      	ldr	r3, [pc, #60]	; (1000a97c <sms_dualtimer1_fn+0x200>)
1000a93e:	701a      	strb	r2, [r3, #0]
1000a940:	e006      	b.n	1000a950 <sms_dualtimer1_fn+0x1d4>
        }
        
        case TIMER1_MODE_NONE:
        default:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a942:	4b0d      	ldr	r3, [pc, #52]	; (1000a978 <sms_dualtimer1_fn+0x1fc>)
1000a944:	781b      	ldrb	r3, [r3, #0]
1000a946:	2b00      	cmp	r3, #0
1000a948:	d102      	bne.n	1000a950 <sms_dualtimer1_fn+0x1d4>
            //release_sleep_lock();
            ulp_ready = true;
1000a94a:	2201      	movs	r2, #1
1000a94c:	4b0b      	ldr	r3, [pc, #44]	; (1000a97c <sms_dualtimer1_fn+0x200>)
1000a94e:	701a      	strb	r2, [r3, #0]
        }            
        break;
    } // switch(timer1_current_mode)
}
1000a950:	bd10      	pop	{r4, pc}
1000a952:	46c0      	nop			; (mov r8, r8)
1000a954:	1001569c 	.word	0x1001569c
1000a958:	100156a4 	.word	0x100156a4
1000a95c:	1000a35d 	.word	0x1000a35d
1000a960:	1001290c 	.word	0x1001290c
1000a964:	1000a595 	.word	0x1000a595
1000a968:	1001570c 	.word	0x1001570c
1000a96c:	1001571e 	.word	0x1001571e
1000a970:	10009cdd 	.word	0x10009cdd
1000a974:	1000a6d1 	.word	0x1000a6d1
1000a978:	10015713 	.word	0x10015713
1000a97c:	1001569f 	.word	0x1001569f
1000a980:	00000303 	.word	0x00000303
1000a984:	10009cf5 	.word	0x10009cf5

1000a988 <sms_dualtimer2_fn>:

void sms_dualtimer2_fn(void)
{
1000a988:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    sms_monitor_get_states("[sms_dualtimer2_fn]");
1000a98a:	4846      	ldr	r0, [pc, #280]	; (1000aaa4 <sms_dualtimer2_fn+0x11c>)
1000a98c:	4b46      	ldr	r3, [pc, #280]	; (1000aaa8 <sms_dualtimer2_fn+0x120>)
1000a98e:	4798      	blx	r3
    switch(timer2_current_mode) {
1000a990:	4b46      	ldr	r3, [pc, #280]	; (1000aaac <sms_dualtimer2_fn+0x124>)
1000a992:	781b      	ldrb	r3, [r3, #0]
1000a994:	b2db      	uxtb	r3, r3
1000a996:	2b02      	cmp	r3, #2
1000a998:	d02f      	beq.n	1000a9fa <sms_dualtimer2_fn+0x72>
1000a99a:	2b03      	cmp	r3, #3
1000a99c:	d054      	beq.n	1000aa48 <sms_dualtimer2_fn+0xc0>
1000a99e:	2b01      	cmp	r3, #1
1000a9a0:	d17f      	bne.n	1000aaa2 <sms_dualtimer2_fn+0x11a>
        case TIMER2_MODE_INDICATION_TOUT:
        timer2_current_mode = TIMER2_MODE_NONE;
1000a9a2:	2200      	movs	r2, #0
1000a9a4:	4b41      	ldr	r3, [pc, #260]	; (1000aaac <sms_dualtimer2_fn+0x124>)
1000a9a6:	701a      	strb	r2, [r3, #0]
        if(ble_current_state == BLE_STATE_PAIRED) {
1000a9a8:	4b41      	ldr	r3, [pc, #260]	; (1000aab0 <sms_dualtimer2_fn+0x128>)
1000a9aa:	781b      	ldrb	r3, [r3, #0]
1000a9ac:	2b22      	cmp	r3, #34	; 0x22
1000a9ae:	d107      	bne.n	1000a9c0 <sms_dualtimer2_fn+0x38>
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            if(timer1_current_mode == TIMER1_MODE_NONE) {
1000a9b0:	4b40      	ldr	r3, [pc, #256]	; (1000aab4 <sms_dualtimer2_fn+0x12c>)
1000a9b2:	781b      	ldrb	r3, [r3, #0]
1000a9b4:	2b00      	cmp	r3, #0
1000a9b6:	d174      	bne.n	1000aaa2 <sms_dualtimer2_fn+0x11a>
                //release_sleep_lock();
                ulp_ready = true;
1000a9b8:	3201      	adds	r2, #1
1000a9ba:	4b3f      	ldr	r3, [pc, #252]	; (1000aab8 <sms_dualtimer2_fn+0x130>)
1000a9bc:	701a      	strb	r2, [r3, #0]
1000a9be:	e070      	b.n	1000aaa2 <sms_dualtimer2_fn+0x11a>
            }                
        }
        else {
            sms_ble_ind_retry++;
1000a9c0:	4a3e      	ldr	r2, [pc, #248]	; (1000aabc <sms_dualtimer2_fn+0x134>)
1000a9c2:	7813      	ldrb	r3, [r2, #0]
1000a9c4:	3301      	adds	r3, #1
1000a9c6:	b2db      	uxtb	r3, r3
1000a9c8:	7013      	strb	r3, [r2, #0]
            if(sms_ble_ind_retry >= BLE_INDICATION_RETRY_MAX) {
1000a9ca:	2b00      	cmp	r3, #0
1000a9cc:	d009      	beq.n	1000a9e2 <sms_dualtimer2_fn+0x5a>
                DBG_LOG_CONT_DEV(" ...giving up!");
1000a9ce:	483c      	ldr	r0, [pc, #240]	; (1000aac0 <sms_dualtimer2_fn+0x138>)
1000a9d0:	4b3c      	ldr	r3, [pc, #240]	; (1000aac4 <sms_dualtimer2_fn+0x13c>)
1000a9d2:	4798      	blx	r3
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\tTimer1 mode: %d", timer1_current_mode);
                timer2_current_mode = TIMER2_MODE_NONE;
1000a9d4:	2200      	movs	r2, #0
1000a9d6:	4b35      	ldr	r3, [pc, #212]	; (1000aaac <sms_dualtimer2_fn+0x124>)
1000a9d8:	701a      	strb	r2, [r3, #0]
                ble_current_state = BLE_STATE_PAIRED;
1000a9da:	3222      	adds	r2, #34	; 0x22
1000a9dc:	4b34      	ldr	r3, [pc, #208]	; (1000aab0 <sms_dualtimer2_fn+0x128>)
1000a9de:	701a      	strb	r2, [r3, #0]
1000a9e0:	e05f      	b.n	1000aaa2 <sms_dualtimer2_fn+0x11a>
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tStarting sensors...");
                //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
                //if(timer1_current_mode == TIMER1_MODE_NONE) release_sleep_lock();
            }
            else {
                DBG_LOG_CONT_DEV(" ...waiting... counter: %d", sms_ble_ind_retry);
1000a9e2:	2100      	movs	r1, #0
1000a9e4:	4838      	ldr	r0, [pc, #224]	; (1000aac8 <sms_dualtimer2_fn+0x140>)
1000a9e6:	4b37      	ldr	r3, [pc, #220]	; (1000aac4 <sms_dualtimer2_fn+0x13c>)
1000a9e8:	4798      	blx	r3
                //sms_ble_send_characteristic(BLE_CHAR_PRESSURE);
                timer2_current_mode = TIMER2_MODE_INDICATION_TOUT;
1000a9ea:	2201      	movs	r2, #1
1000a9ec:	4b2f      	ldr	r3, [pc, #188]	; (1000aaac <sms_dualtimer2_fn+0x124>)
1000a9ee:	701a      	strb	r2, [r3, #0]
                //ulp_ready = false;
                sms_dualtimer_start(TIMER_UNIT_MS, BLE_INDICATION_TOUT_MS, DUALTIMER_TIMER2);
1000a9f0:	2164      	movs	r1, #100	; 0x64
1000a9f2:	2001      	movs	r0, #1
1000a9f4:	4b35      	ldr	r3, [pc, #212]	; (1000aacc <sms_dualtimer2_fn+0x144>)
1000a9f6:	4798      	blx	r3
1000a9f8:	e053      	b.n	1000aaa2 <sms_dualtimer2_fn+0x11a>
            }
        }
        break;
        
        case TIMER2_MODE_LED_STARTUP:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking startup...");
1000a9fa:	4835      	ldr	r0, [pc, #212]	; (1000aad0 <sms_dualtimer2_fn+0x148>)
1000a9fc:	4b35      	ldr	r3, [pc, #212]	; (1000aad4 <sms_dualtimer2_fn+0x14c>)
1000a9fe:	4798      	blx	r3
1000aa00:	4835      	ldr	r0, [pc, #212]	; (1000aad8 <sms_dualtimer2_fn+0x150>)
1000aa02:	4b30      	ldr	r3, [pc, #192]	; (1000aac4 <sms_dualtimer2_fn+0x13c>)
1000aa04:	4798      	blx	r3
        timer2_current_mode = TIMER2_MODE_NONE;
1000aa06:	2200      	movs	r2, #0
1000aa08:	4b28      	ldr	r3, [pc, #160]	; (1000aaac <sms_dualtimer2_fn+0x124>)
1000aa0a:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000aa0c:	4a33      	ldr	r2, [pc, #204]	; (1000aadc <sms_dualtimer2_fn+0x154>)
1000aa0e:	7813      	ldrb	r3, [r2, #0]
1000aa10:	3301      	adds	r3, #1
1000aa12:	b2db      	uxtb	r3, r3
1000aa14:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_STARTUP_CNT) {
1000aa16:	7813      	ldrb	r3, [r2, #0]
1000aa18:	b2db      	uxtb	r3, r3
1000aa1a:	2b07      	cmp	r3, #7
1000aa1c:	d908      	bls.n	1000aa30 <sms_dualtimer2_fn+0xa8>
            sms_led_switch_off(SMS_LED_0_PIN);
1000aa1e:	2016      	movs	r0, #22
1000aa20:	4b2f      	ldr	r3, [pc, #188]	; (1000aae0 <sms_dualtimer2_fn+0x158>)
1000aa22:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            /* Blinking done... starting ble advertisement */
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tSMS awake... starting advertisement");
            sms_ble_advertise();
1000aa24:	4b2f      	ldr	r3, [pc, #188]	; (1000aae4 <sms_dualtimer2_fn+0x15c>)
1000aa26:	4798      	blx	r3
            ulp_ready = true;
1000aa28:	2201      	movs	r2, #1
1000aa2a:	4b23      	ldr	r3, [pc, #140]	; (1000aab8 <sms_dualtimer2_fn+0x130>)
1000aa2c:	701a      	strb	r2, [r3, #0]
1000aa2e:	e038      	b.n	1000aaa2 <sms_dualtimer2_fn+0x11a>
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBlinking up... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000aa30:	2016      	movs	r0, #22
1000aa32:	4b2d      	ldr	r3, [pc, #180]	; (1000aae8 <sms_dualtimer2_fn+0x160>)
1000aa34:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_STARTUP;
1000aa36:	2202      	movs	r2, #2
1000aa38:	4b1c      	ldr	r3, [pc, #112]	; (1000aaac <sms_dualtimer2_fn+0x124>)
1000aa3a:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER2);
1000aa3c:	3a01      	subs	r2, #1
1000aa3e:	2164      	movs	r1, #100	; 0x64
1000aa40:	2001      	movs	r0, #1
1000aa42:	4b22      	ldr	r3, [pc, #136]	; (1000aacc <sms_dualtimer2_fn+0x144>)
1000aa44:	4798      	blx	r3
1000aa46:	e02c      	b.n	1000aaa2 <sms_dualtimer2_fn+0x11a>
        }
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking shutdown...");
1000aa48:	4821      	ldr	r0, [pc, #132]	; (1000aad0 <sms_dualtimer2_fn+0x148>)
1000aa4a:	4b22      	ldr	r3, [pc, #136]	; (1000aad4 <sms_dualtimer2_fn+0x14c>)
1000aa4c:	4798      	blx	r3
1000aa4e:	4827      	ldr	r0, [pc, #156]	; (1000aaec <sms_dualtimer2_fn+0x164>)
1000aa50:	4b1c      	ldr	r3, [pc, #112]	; (1000aac4 <sms_dualtimer2_fn+0x13c>)
1000aa52:	4798      	blx	r3
        timer2_current_mode = TIMER2_MODE_NONE;
1000aa54:	2200      	movs	r2, #0
1000aa56:	4b15      	ldr	r3, [pc, #84]	; (1000aaac <sms_dualtimer2_fn+0x124>)
1000aa58:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000aa5a:	4a20      	ldr	r2, [pc, #128]	; (1000aadc <sms_dualtimer2_fn+0x154>)
1000aa5c:	7813      	ldrb	r3, [r2, #0]
1000aa5e:	3301      	adds	r3, #1
1000aa60:	b2db      	uxtb	r3, r3
1000aa62:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_SHTDWN_CNT) {
1000aa64:	7813      	ldrb	r3, [r2, #0]
1000aa66:	b2db      	uxtb	r3, r3
1000aa68:	2b03      	cmp	r3, #3
1000aa6a:	d90e      	bls.n	1000aa8a <sms_dualtimer2_fn+0x102>
            sms_led_switch_off(SMS_LED_0_PIN);
1000aa6c:	2016      	movs	r0, #22
1000aa6e:	4b1c      	ldr	r3, [pc, #112]	; (1000aae0 <sms_dualtimer2_fn+0x158>)
1000aa70:	4798      	blx	r3
            DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tPowering off...");
1000aa72:	4817      	ldr	r0, [pc, #92]	; (1000aad0 <sms_dualtimer2_fn+0x148>)
1000aa74:	4b17      	ldr	r3, [pc, #92]	; (1000aad4 <sms_dualtimer2_fn+0x14c>)
1000aa76:	4798      	blx	r3
1000aa78:	481d      	ldr	r0, [pc, #116]	; (1000aaf0 <sms_dualtimer2_fn+0x168>)
1000aa7a:	4b12      	ldr	r3, [pc, #72]	; (1000aac4 <sms_dualtimer2_fn+0x13c>)
1000aa7c:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            sms_init_variables();
1000aa7e:	4b1d      	ldr	r3, [pc, #116]	; (1000aaf4 <sms_dualtimer2_fn+0x16c>)
1000aa80:	4798      	blx	r3
            ulp_ready = true;
1000aa82:	2201      	movs	r2, #1
1000aa84:	4b0c      	ldr	r3, [pc, #48]	; (1000aab8 <sms_dualtimer2_fn+0x130>)
1000aa86:	701a      	strb	r2, [r3, #0]
1000aa88:	e00b      	b.n	1000aaa2 <sms_dualtimer2_fn+0x11a>
            //release_sleep_lock();
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBLinking off... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000aa8a:	2016      	movs	r0, #22
1000aa8c:	4b16      	ldr	r3, [pc, #88]	; (1000aae8 <sms_dualtimer2_fn+0x160>)
1000aa8e:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
1000aa90:	2203      	movs	r2, #3
1000aa92:	4b06      	ldr	r3, [pc, #24]	; (1000aaac <sms_dualtimer2_fn+0x124>)
1000aa94:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_SHTDWN_MS, DUALTIMER_TIMER2);
1000aa96:	3a02      	subs	r2, #2
1000aa98:	21c8      	movs	r1, #200	; 0xc8
1000aa9a:	0049      	lsls	r1, r1, #1
1000aa9c:	2001      	movs	r0, #1
1000aa9e:	4b0b      	ldr	r3, [pc, #44]	; (1000aacc <sms_dualtimer2_fn+0x144>)
1000aaa0:	4798      	blx	r3
        case TIMER2_MODE_LED_CONNECTION_LOST:
        case TIMER2_MODE_NONE:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        break;
    }
1000aaa2:	bd10      	pop	{r4, pc}
1000aaa4:	10012920 	.word	0x10012920
1000aaa8:	1000a595 	.word	0x1000a595
1000aaac:	10015713 	.word	0x10015713
1000aab0:	1001570c 	.word	0x1001570c
1000aab4:	1001569c 	.word	0x1001569c
1000aab8:	1001569f 	.word	0x1001569f
1000aabc:	10015708 	.word	0x10015708
1000aac0:	10012934 	.word	0x10012934
1000aac4:	10010e91 	.word	0x10010e91
1000aac8:	10012944 	.word	0x10012944
1000aacc:	1000a6d1 	.word	0x1000a6d1
1000aad0:	1001227c 	.word	0x1001227c
1000aad4:	10010fb1 	.word	0x10010fb1
1000aad8:	10012960 	.word	0x10012960
1000aadc:	10015724 	.word	0x10015724
1000aae0:	1000a601 	.word	0x1000a601
1000aae4:	10009ea1 	.word	0x10009ea1
1000aae8:	1000a611 	.word	0x1000a611
1000aaec:	1001298c 	.word	0x1001298c
1000aaf0:	100129b8 	.word	0x100129b8
1000aaf4:	1000c72d 	.word	0x1000c72d

1000aaf8 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000aaf8:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000aafa:	4b0d      	ldr	r3, [pc, #52]	; (1000ab30 <dualtimer_isr_handler+0x38>)
1000aafc:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000aafe:	2b00      	cmp	r3, #0
1000ab00:	d007      	beq.n	1000ab12 <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000ab02:	2201      	movs	r2, #1
1000ab04:	4b0a      	ldr	r3, [pc, #40]	; (1000ab30 <dualtimer_isr_handler+0x38>)
1000ab06:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000ab08:	4b0a      	ldr	r3, [pc, #40]	; (1000ab34 <dualtimer_isr_handler+0x3c>)
1000ab0a:	681b      	ldr	r3, [r3, #0]
1000ab0c:	2b00      	cmp	r3, #0
1000ab0e:	d000      	beq.n	1000ab12 <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000ab10:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000ab12:	2334      	movs	r3, #52	; 0x34
1000ab14:	4a06      	ldr	r2, [pc, #24]	; (1000ab30 <dualtimer_isr_handler+0x38>)
1000ab16:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000ab18:	2b00      	cmp	r3, #0
1000ab1a:	d007      	beq.n	1000ab2c <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000ab1c:	2101      	movs	r1, #1
1000ab1e:	232c      	movs	r3, #44	; 0x2c
1000ab20:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000ab22:	4b05      	ldr	r3, [pc, #20]	; (1000ab38 <dualtimer_isr_handler+0x40>)
1000ab24:	681b      	ldr	r3, [r3, #0]
1000ab26:	2b00      	cmp	r3, #0
1000ab28:	d000      	beq.n	1000ab2c <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000ab2a:	4798      	blx	r3
	}
}
1000ab2c:	bd10      	pop	{r4, pc}
1000ab2e:	46c0      	nop			; (mov r8, r8)
1000ab30:	40001000 	.word	0x40001000
1000ab34:	100138a4 	.word	0x100138a4
1000ab38:	100138a8 	.word	0x100138a8

1000ab3c <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000ab3c:	2301      	movs	r3, #1
1000ab3e:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000ab40:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000ab42:	2202      	movs	r2, #2
1000ab44:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000ab46:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000ab48:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000ab4a:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000ab4c:	2200      	movs	r2, #0
1000ab4e:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000ab50:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000ab52:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000ab54:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000ab56:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000ab58:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000ab5a:	7602      	strb	r2, [r0, #24]
}
1000ab5c:	4770      	bx	lr
1000ab5e:	46c0      	nop			; (mov r8, r8)

1000ab60 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000ab60:	2800      	cmp	r0, #0
1000ab62:	d107      	bne.n	1000ab74 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000ab64:	2900      	cmp	r1, #0
1000ab66:	d102      	bne.n	1000ab6e <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000ab68:	4b06      	ldr	r3, [pc, #24]	; (1000ab84 <dualtimer_set_counter+0x24>)
1000ab6a:	601a      	str	r2, [r3, #0]
1000ab6c:	e009      	b.n	1000ab82 <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000ab6e:	4b05      	ldr	r3, [pc, #20]	; (1000ab84 <dualtimer_set_counter+0x24>)
1000ab70:	619a      	str	r2, [r3, #24]
1000ab72:	e006      	b.n	1000ab82 <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000ab74:	2900      	cmp	r1, #0
1000ab76:	d102      	bne.n	1000ab7e <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000ab78:	4b02      	ldr	r3, [pc, #8]	; (1000ab84 <dualtimer_set_counter+0x24>)
1000ab7a:	621a      	str	r2, [r3, #32]
1000ab7c:	e001      	b.n	1000ab82 <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000ab7e:	4b01      	ldr	r3, [pc, #4]	; (1000ab84 <dualtimer_set_counter+0x24>)
1000ab80:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000ab82:	4770      	bx	lr
1000ab84:	40001000 	.word	0x40001000

1000ab88 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000ab88:	2800      	cmp	r0, #0
1000ab8a:	d105      	bne.n	1000ab98 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000ab8c:	4a06      	ldr	r2, [pc, #24]	; (1000aba8 <dualtimer_enable+0x20>)
1000ab8e:	7a11      	ldrb	r1, [r2, #8]
1000ab90:	2380      	movs	r3, #128	; 0x80
1000ab92:	430b      	orrs	r3, r1
1000ab94:	7213      	strb	r3, [r2, #8]
1000ab96:	e005      	b.n	1000aba4 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000ab98:	4903      	ldr	r1, [pc, #12]	; (1000aba8 <dualtimer_enable+0x20>)
1000ab9a:	2228      	movs	r2, #40	; 0x28
1000ab9c:	5c88      	ldrb	r0, [r1, r2]
1000ab9e:	2380      	movs	r3, #128	; 0x80
1000aba0:	4303      	orrs	r3, r0
1000aba2:	548b      	strb	r3, [r1, r2]
	}
}
1000aba4:	4770      	bx	lr
1000aba6:	46c0      	nop			; (mov r8, r8)
1000aba8:	40001000 	.word	0x40001000

1000abac <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000abac:	2800      	cmp	r0, #0
1000abae:	d105      	bne.n	1000abbc <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000abb0:	4a06      	ldr	r2, [pc, #24]	; (1000abcc <dualtimer_disable+0x20>)
1000abb2:	7a11      	ldrb	r1, [r2, #8]
1000abb4:	237f      	movs	r3, #127	; 0x7f
1000abb6:	400b      	ands	r3, r1
1000abb8:	7213      	strb	r3, [r2, #8]
1000abba:	e005      	b.n	1000abc8 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000abbc:	4903      	ldr	r1, [pc, #12]	; (1000abcc <dualtimer_disable+0x20>)
1000abbe:	2228      	movs	r2, #40	; 0x28
1000abc0:	5c88      	ldrb	r0, [r1, r2]
1000abc2:	237f      	movs	r3, #127	; 0x7f
1000abc4:	4003      	ands	r3, r0
1000abc6:	548b      	strb	r3, [r1, r2]
	}
}
1000abc8:	4770      	bx	lr
1000abca:	46c0      	nop			; (mov r8, r8)
1000abcc:	40001000 	.word	0x40001000

1000abd0 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000abd0:	b570      	push	{r4, r5, r6, lr}
1000abd2:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000abd4:	2004      	movs	r0, #4
1000abd6:	4b39      	ldr	r3, [pc, #228]	; (1000acbc <dualtimer_init+0xec>)
1000abd8:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000abda:	7823      	ldrb	r3, [r4, #0]
1000abdc:	2b00      	cmp	r3, #0
1000abde:	d102      	bne.n	1000abe6 <dualtimer_init+0x16>
1000abe0:	7b23      	ldrb	r3, [r4, #12]
1000abe2:	2b00      	cmp	r3, #0
1000abe4:	d065      	beq.n	1000acb2 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000abe6:	4936      	ldr	r1, [pc, #216]	; (1000acc0 <dualtimer_init+0xf0>)
1000abe8:	68ca      	ldr	r2, [r1, #12]
1000abea:	2320      	movs	r3, #32
1000abec:	4313      	orrs	r3, r2
1000abee:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000abf0:	7e22      	ldrb	r2, [r4, #24]
1000abf2:	698b      	ldr	r3, [r1, #24]
1000abf4:	2003      	movs	r0, #3
1000abf6:	4002      	ands	r2, r0
1000abf8:	0112      	lsls	r2, r2, #4
1000abfa:	302d      	adds	r0, #45	; 0x2d
1000abfc:	4383      	bics	r3, r0
1000abfe:	4313      	orrs	r3, r2
1000ac00:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000ac02:	7823      	ldrb	r3, [r4, #0]
1000ac04:	2b00      	cmp	r3, #0
1000ac06:	d026      	beq.n	1000ac56 <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000ac08:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000ac0a:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000ac0c:	2b00      	cmp	r3, #0
1000ac0e:	d003      	beq.n	1000ac18 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000ac10:	3b02      	subs	r3, #2
1000ac12:	425d      	negs	r5, r3
1000ac14:	415d      	adcs	r5, r3
1000ac16:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000ac18:	78a2      	ldrb	r2, [r4, #2]
1000ac1a:	0052      	lsls	r2, r2, #1
1000ac1c:	2502      	movs	r5, #2
1000ac1e:	402a      	ands	r2, r5
1000ac20:	78e3      	ldrb	r3, [r4, #3]
1000ac22:	009b      	lsls	r3, r3, #2
1000ac24:	350a      	adds	r5, #10
1000ac26:	402b      	ands	r3, r5
1000ac28:	431a      	orrs	r2, r3
1000ac2a:	0015      	movs	r5, r2
1000ac2c:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000ac2e:	7923      	ldrb	r3, [r4, #4]
1000ac30:	2b00      	cmp	r3, #0
1000ac32:	d001      	beq.n	1000ac38 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000ac34:	2320      	movs	r3, #32
1000ac36:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000ac38:	4b22      	ldr	r3, [pc, #136]	; (1000acc4 <dualtimer_init+0xf4>)
1000ac3a:	68a2      	ldr	r2, [r4, #8]
1000ac3c:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000ac3e:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000ac40:	491f      	ldr	r1, [pc, #124]	; (1000acc0 <dualtimer_init+0xf0>)
1000ac42:	22c4      	movs	r2, #196	; 0xc4
1000ac44:	0052      	lsls	r2, r2, #1
1000ac46:	5c88      	ldrb	r0, [r1, r2]
1000ac48:	2301      	movs	r3, #1
1000ac4a:	4303      	orrs	r3, r0
1000ac4c:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000ac4e:	2000      	movs	r0, #0
1000ac50:	4b1d      	ldr	r3, [pc, #116]	; (1000acc8 <dualtimer_init+0xf8>)
1000ac52:	4798      	blx	r3
1000ac54:	e000      	b.n	1000ac58 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000ac56:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000ac58:	7b23      	ldrb	r3, [r4, #12]
1000ac5a:	2b00      	cmp	r3, #0
1000ac5c:	d029      	beq.n	1000acb2 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000ac5e:	7b63      	ldrb	r3, [r4, #13]
1000ac60:	2b00      	cmp	r3, #0
1000ac62:	d005      	beq.n	1000ac70 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000ac64:	2b01      	cmp	r3, #1
1000ac66:	d005      	beq.n	1000ac74 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000ac68:	2b02      	cmp	r3, #2
1000ac6a:	d104      	bne.n	1000ac76 <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000ac6c:	2540      	movs	r5, #64	; 0x40
1000ac6e:	e002      	b.n	1000ac76 <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000ac70:	2501      	movs	r5, #1
1000ac72:	e000      	b.n	1000ac76 <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000ac74:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000ac76:	7ba3      	ldrb	r3, [r4, #14]
1000ac78:	005b      	lsls	r3, r3, #1
1000ac7a:	2102      	movs	r1, #2
1000ac7c:	4019      	ands	r1, r3
1000ac7e:	7be2      	ldrb	r2, [r4, #15]
1000ac80:	0092      	lsls	r2, r2, #2
1000ac82:	230c      	movs	r3, #12
1000ac84:	4013      	ands	r3, r2
1000ac86:	430b      	orrs	r3, r1
1000ac88:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000ac8a:	7c23      	ldrb	r3, [r4, #16]
1000ac8c:	2b00      	cmp	r3, #0
1000ac8e:	d001      	beq.n	1000ac94 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000ac90:	2320      	movs	r3, #32
1000ac92:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000ac94:	6962      	ldr	r2, [r4, #20]
1000ac96:	4b0b      	ldr	r3, [pc, #44]	; (1000acc4 <dualtimer_init+0xf4>)
1000ac98:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000ac9a:	2228      	movs	r2, #40	; 0x28
1000ac9c:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000ac9e:	4908      	ldr	r1, [pc, #32]	; (1000acc0 <dualtimer_init+0xf0>)
1000aca0:	3261      	adds	r2, #97	; 0x61
1000aca2:	32ff      	adds	r2, #255	; 0xff
1000aca4:	5c88      	ldrb	r0, [r1, r2]
1000aca6:	2302      	movs	r3, #2
1000aca8:	4303      	orrs	r3, r0
1000acaa:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000acac:	2001      	movs	r0, #1
1000acae:	4b06      	ldr	r3, [pc, #24]	; (1000acc8 <dualtimer_init+0xf8>)
1000acb0:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000acb2:	4906      	ldr	r1, [pc, #24]	; (1000accc <dualtimer_init+0xfc>)
1000acb4:	201e      	movs	r0, #30
1000acb6:	4b06      	ldr	r3, [pc, #24]	; (1000acd0 <dualtimer_init+0x100>)
1000acb8:	4798      	blx	r3
}
1000acba:	bd70      	pop	{r4, r5, r6, pc}
1000acbc:	10008c39 	.word	0x10008c39
1000acc0:	4000b000 	.word	0x4000b000
1000acc4:	40001000 	.word	0x40001000
1000acc8:	1000ab89 	.word	0x1000ab89
1000accc:	1000aaf9 	.word	0x1000aaf9
1000acd0:	100090a1 	.word	0x100090a1

1000acd4 <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
1000acd4:	2800      	cmp	r0, #0
1000acd6:	d102      	bne.n	1000acde <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
1000acd8:	4b02      	ldr	r3, [pc, #8]	; (1000ace4 <dualtimer_register_callback+0x10>)
1000acda:	6019      	str	r1, [r3, #0]
1000acdc:	e001      	b.n	1000ace2 <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
1000acde:	4b02      	ldr	r3, [pc, #8]	; (1000ace8 <dualtimer_register_callback+0x14>)
1000ace0:	6019      	str	r1, [r3, #0]
	}
}
1000ace2:	4770      	bx	lr
1000ace4:	100138a4 	.word	0x100138a4
1000ace8:	100138a8 	.word	0x100138a8

1000acec <ble_undefined_event_handler>:
	}
	return status;
}

at_ble_status_t ble_undefined_event_handler(void *params)
{
1000acec:	b510      	push	{r4, lr}
	DBG_LOG_DEV("Undefined Event Received");
1000acee:	4804      	ldr	r0, [pc, #16]	; (1000ad00 <ble_undefined_event_handler+0x14>)
1000acf0:	4b04      	ldr	r3, [pc, #16]	; (1000ad04 <ble_undefined_event_handler+0x18>)
1000acf2:	4798      	blx	r3
1000acf4:	4804      	ldr	r0, [pc, #16]	; (1000ad08 <ble_undefined_event_handler+0x1c>)
1000acf6:	4b05      	ldr	r3, [pc, #20]	; (1000ad0c <ble_undefined_event_handler+0x20>)
1000acf8:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000acfa:	2000      	movs	r0, #0
1000acfc:	bd10      	pop	{r4, pc}
1000acfe:	46c0      	nop			; (mov r8, r8)
1000ad00:	1001227c 	.word	0x1001227c
1000ad04:	10010fb1 	.word	0x10010fb1
1000ad08:	10012b44 	.word	0x10012b44
1000ad0c:	10010e91 	.word	0x10010e91

1000ad10 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000ad10:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000ad12:	7800      	ldrb	r0, [r0, #0]
1000ad14:	2800      	cmp	r0, #0
1000ad16:	d006      	beq.n	1000ad26 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000ad18:	4803      	ldr	r0, [pc, #12]	; (1000ad28 <ble_scan_report_handler+0x18>)
1000ad1a:	4b04      	ldr	r3, [pc, #16]	; (1000ad2c <ble_scan_report_handler+0x1c>)
1000ad1c:	4798      	blx	r3
1000ad1e:	4804      	ldr	r0, [pc, #16]	; (1000ad30 <ble_scan_report_handler+0x20>)
1000ad20:	4b04      	ldr	r3, [pc, #16]	; (1000ad34 <ble_scan_report_handler+0x24>)
1000ad22:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000ad24:	20e2      	movs	r0, #226	; 0xe2
}
1000ad26:	bd10      	pop	{r4, pc}
1000ad28:	1001227c 	.word	0x1001227c
1000ad2c:	10010fb1 	.word	0x10010fb1
1000ad30:	10012b60 	.word	0x10012b60
1000ad34:	10010e91 	.word	0x10010e91

1000ad38 <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000ad38:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000ad3a:	7800      	ldrb	r0, [r0, #0]
1000ad3c:	2800      	cmp	r0, #0
1000ad3e:	d006      	beq.n	1000ad4e <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000ad40:	4803      	ldr	r0, [pc, #12]	; (1000ad50 <ble_adv_report_handler+0x18>)
1000ad42:	4b04      	ldr	r3, [pc, #16]	; (1000ad54 <ble_adv_report_handler+0x1c>)
1000ad44:	4798      	blx	r3
1000ad46:	4804      	ldr	r0, [pc, #16]	; (1000ad58 <ble_adv_report_handler+0x20>)
1000ad48:	4b04      	ldr	r3, [pc, #16]	; (1000ad5c <ble_adv_report_handler+0x24>)
1000ad4a:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000ad4c:	20e2      	movs	r0, #226	; 0xe2
}
1000ad4e:	bd10      	pop	{r4, pc}
1000ad50:	1001227c 	.word	0x1001227c
1000ad54:	10010fb1 	.word	0x10010fb1
1000ad58:	10012b74 	.word	0x10012b74
1000ad5c:	10010e91 	.word	0x10010e91

1000ad60 <ble_mtu_changed_indication_handler>:
	return AT_BLE_SUCCESS;
	
}

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
1000ad60:	b510      	push	{r4, lr}
1000ad62:	0004      	movs	r4, r0
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
1000ad64:	4804      	ldr	r0, [pc, #16]	; (1000ad78 <ble_mtu_changed_indication_handler+0x18>)
1000ad66:	4b05      	ldr	r3, [pc, #20]	; (1000ad7c <ble_mtu_changed_indication_handler+0x1c>)
1000ad68:	4798      	blx	r3
1000ad6a:	8862      	ldrh	r2, [r4, #2]
1000ad6c:	8821      	ldrh	r1, [r4, #0]
1000ad6e:	4804      	ldr	r0, [pc, #16]	; (1000ad80 <ble_mtu_changed_indication_handler+0x20>)
1000ad70:	4b04      	ldr	r3, [pc, #16]	; (1000ad84 <ble_mtu_changed_indication_handler+0x24>)
1000ad72:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000ad74:	2000      	movs	r0, #0
1000ad76:	bd10      	pop	{r4, pc}
1000ad78:	1001227c 	.word	0x1001227c
1000ad7c:	10010fb1 	.word	0x10010fb1
1000ad80:	10012b88 	.word	0x10012b88
1000ad84:	10010e91 	.word	0x10010e91

1000ad88 <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000ad88:	b570      	push	{r4, r5, r6, lr}
1000ad8a:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000ad8c:	78c5      	ldrb	r5, [r0, #3]
1000ad8e:	2d00      	cmp	r5, #0
1000ad90:	d108      	bne.n	1000ada4 <ble_mtu_changed_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
1000ad92:	480a      	ldr	r0, [pc, #40]	; (1000adbc <ble_mtu_changed_cmd_complete_handler+0x34>)
1000ad94:	4b0a      	ldr	r3, [pc, #40]	; (1000adc0 <ble_mtu_changed_cmd_complete_handler+0x38>)
1000ad96:	4798      	blx	r3
1000ad98:	78a2      	ldrb	r2, [r4, #2]
1000ad9a:	8821      	ldrh	r1, [r4, #0]
1000ad9c:	4809      	ldr	r0, [pc, #36]	; (1000adc4 <ble_mtu_changed_cmd_complete_handler+0x3c>)
1000ad9e:	4b0a      	ldr	r3, [pc, #40]	; (1000adc8 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000ada0:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000ada2:	e008      	b.n	1000adb6 <ble_mtu_changed_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000ada4:	4805      	ldr	r0, [pc, #20]	; (1000adbc <ble_mtu_changed_cmd_complete_handler+0x34>)
1000ada6:	4b06      	ldr	r3, [pc, #24]	; (1000adc0 <ble_mtu_changed_cmd_complete_handler+0x38>)
1000ada8:	4798      	blx	r3
1000adaa:	78a2      	ldrb	r2, [r4, #2]
1000adac:	8821      	ldrh	r1, [r4, #0]
1000adae:	4807      	ldr	r0, [pc, #28]	; (1000adcc <ble_mtu_changed_cmd_complete_handler+0x44>)
1000adb0:	4b05      	ldr	r3, [pc, #20]	; (1000adc8 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000adb2:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000adb4:	25e2      	movs	r5, #226	; 0xe2
}
1000adb6:	0028      	movs	r0, r5
1000adb8:	bd70      	pop	{r4, r5, r6, pc}
1000adba:	46c0      	nop			; (mov r8, r8)
1000adbc:	1001227c 	.word	0x1001227c
1000adc0:	10010fb1 	.word	0x10010fb1
1000adc4:	10012bc0 	.word	0x10012bc0
1000adc8:	10010e91 	.word	0x10010e91
1000adcc:	10012bf0 	.word	0x10012bf0

1000add0 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
1000add0:	b570      	push	{r4, r5, r6, lr}
1000add2:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000add4:	78c5      	ldrb	r5, [r0, #3]
1000add6:	2d00      	cmp	r5, #0
1000add8:	d108      	bne.n	1000adec <ble_characteristic_write_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
1000adda:	480a      	ldr	r0, [pc, #40]	; (1000ae04 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000addc:	4b0a      	ldr	r3, [pc, #40]	; (1000ae08 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000adde:	4798      	blx	r3
1000ade0:	78a2      	ldrb	r2, [r4, #2]
1000ade2:	8821      	ldrh	r1, [r4, #0]
1000ade4:	4809      	ldr	r0, [pc, #36]	; (1000ae0c <ble_characteristic_write_cmd_complete_handler+0x3c>)
1000ade6:	4b0a      	ldr	r3, [pc, #40]	; (1000ae10 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000ade8:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000adea:	e008      	b.n	1000adfe <ble_characteristic_write_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
1000adec:	4805      	ldr	r0, [pc, #20]	; (1000ae04 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000adee:	4b06      	ldr	r3, [pc, #24]	; (1000ae08 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000adf0:	4798      	blx	r3
1000adf2:	78a2      	ldrb	r2, [r4, #2]
1000adf4:	8821      	ldrh	r1, [r4, #0]
1000adf6:	4807      	ldr	r0, [pc, #28]	; (1000ae14 <ble_characteristic_write_cmd_complete_handler+0x44>)
1000adf8:	4b05      	ldr	r3, [pc, #20]	; (1000ae10 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000adfa:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000adfc:	25e2      	movs	r5, #226	; 0xe2
}
1000adfe:	0028      	movs	r0, r5
1000ae00:	bd70      	pop	{r4, r5, r6, pc}
1000ae02:	46c0      	nop			; (mov r8, r8)
1000ae04:	1001227c 	.word	0x1001227c
1000ae08:	10010fb1 	.word	0x10010fb1
1000ae0c:	10012c28 	.word	0x10012c28
1000ae10:	10010e91 	.word	0x10010e91
1000ae14:	10012c64 	.word	0x10012c64

1000ae18 <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000ae18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ae1a:	0006      	movs	r6, r0
1000ae1c:	4c1d      	ldr	r4, [pc, #116]	; (1000ae94 <ble_disconnected_state_handler+0x7c>)
1000ae1e:	239b      	movs	r3, #155	; 0x9b
1000ae20:	009b      	lsls	r3, r3, #2
1000ae22:	18e7      	adds	r7, r4, r3
1000ae24:	0025      	movs	r5, r4
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000ae26:	0023      	movs	r3, r4
1000ae28:	3b56      	subs	r3, #86	; 0x56
1000ae2a:	881a      	ldrh	r2, [r3, #0]
1000ae2c:	8833      	ldrh	r3, [r6, #0]
1000ae2e:	429a      	cmp	r2, r3
1000ae30:	d122      	bne.n	1000ae78 <ble_disconnected_state_handler+0x60>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000ae32:	7823      	ldrb	r3, [r4, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000ae34:	2b05      	cmp	r3, #5
1000ae36:	d001      	beq.n	1000ae3c <ble_disconnected_state_handler+0x24>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000ae38:	2b08      	cmp	r3, #8
1000ae3a:	d102      	bne.n	1000ae42 <ble_disconnected_state_handler+0x2a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000ae3c:	2301      	movs	r3, #1
1000ae3e:	702b      	strb	r3, [r5, #0]
1000ae40:	e01a      	b.n	1000ae78 <ble_disconnected_state_handler+0x60>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000ae42:	2b07      	cmp	r3, #7
1000ae44:	d80f      	bhi.n	1000ae66 <ble_disconnected_state_handler+0x4e>
1000ae46:	009b      	lsls	r3, r3, #2
1000ae48:	4a13      	ldr	r2, [pc, #76]	; (1000ae98 <ble_disconnected_state_handler+0x80>)
1000ae4a:	58d3      	ldr	r3, [r2, r3]
1000ae4c:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000ae4e:	2300      	movs	r3, #0
1000ae50:	7023      	strb	r3, [r4, #0]
					if (ble_device_count > 0)
1000ae52:	4b12      	ldr	r3, [pc, #72]	; (1000ae9c <ble_disconnected_state_handler+0x84>)
1000ae54:	781b      	ldrb	r3, [r3, #0]
1000ae56:	2b00      	cmp	r3, #0
1000ae58:	d00e      	beq.n	1000ae78 <ble_disconnected_state_handler+0x60>
					{
						ble_device_count--;
1000ae5a:	4a10      	ldr	r2, [pc, #64]	; (1000ae9c <ble_disconnected_state_handler+0x84>)
1000ae5c:	7813      	ldrb	r3, [r2, #0]
1000ae5e:	3b01      	subs	r3, #1
1000ae60:	b2db      	uxtb	r3, r3
1000ae62:	7013      	strb	r3, [r2, #0]
1000ae64:	e008      	b.n	1000ae78 <ble_disconnected_state_handler+0x60>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
1000ae66:	480e      	ldr	r0, [pc, #56]	; (1000aea0 <ble_disconnected_state_handler+0x88>)
1000ae68:	4b0e      	ldr	r3, [pc, #56]	; (1000aea4 <ble_disconnected_state_handler+0x8c>)
1000ae6a:	4798      	blx	r3
1000ae6c:	7829      	ldrb	r1, [r5, #0]
1000ae6e:	480e      	ldr	r0, [pc, #56]	; (1000aea8 <ble_disconnected_state_handler+0x90>)
1000ae70:	4b0e      	ldr	r3, [pc, #56]	; (1000aeac <ble_disconnected_state_handler+0x94>)
1000ae72:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000ae74:	2300      	movs	r3, #0
1000ae76:	702b      	strb	r3, [r5, #0]
1000ae78:	347c      	adds	r4, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ae7a:	42bc      	cmp	r4, r7
1000ae7c:	d1d2      	bne.n	1000ae24 <ble_disconnected_state_handler+0xc>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000ae7e:	4808      	ldr	r0, [pc, #32]	; (1000aea0 <ble_disconnected_state_handler+0x88>)
1000ae80:	4b08      	ldr	r3, [pc, #32]	; (1000aea4 <ble_disconnected_state_handler+0x8c>)
1000ae82:	4798      	blx	r3
1000ae84:	8832      	ldrh	r2, [r6, #0]
1000ae86:	78b1      	ldrb	r1, [r6, #2]
1000ae88:	4809      	ldr	r0, [pc, #36]	; (1000aeb0 <ble_disconnected_state_handler+0x98>)
1000ae8a:	4b08      	ldr	r3, [pc, #32]	; (1000aeac <ble_disconnected_state_handler+0x94>)
1000ae8c:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000ae8e:	2000      	movs	r0, #0
1000ae90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ae92:	46c0      	nop			; (mov r8, r8)
1000ae94:	1001579e 	.word	0x1001579e
1000ae98:	100129e0 	.word	0x100129e0
1000ae9c:	100159ac 	.word	0x100159ac
1000aea0:	1001227c 	.word	0x1001227c
1000aea4:	10010fb1 	.word	0x10010fb1
1000aea8:	10012ca0 	.word	0x10012ca0
1000aeac:	10010e91 	.word	0x10010e91
1000aeb0:	10012cb8 	.word	0x10012cb8

1000aeb4 <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
1000aeb4:	b510      	push	{r4, lr}
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
1000aeb6:	4804      	ldr	r0, [pc, #16]	; (1000aec8 <ble_conn_param_update+0x14>)
1000aeb8:	4b04      	ldr	r3, [pc, #16]	; (1000aecc <ble_conn_param_update+0x18>)
1000aeba:	4798      	blx	r3
1000aebc:	4804      	ldr	r0, [pc, #16]	; (1000aed0 <ble_conn_param_update+0x1c>)
1000aebe:	4b05      	ldr	r3, [pc, #20]	; (1000aed4 <ble_conn_param_update+0x20>)
1000aec0:	4798      	blx	r3
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000aec2:	2000      	movs	r0, #0
1000aec4:	bd10      	pop	{r4, pc}
1000aec6:	46c0      	nop			; (mov r8, r8)
1000aec8:	1001227c 	.word	0x1001227c
1000aecc:	10010fb1 	.word	0x10010fb1
1000aed0:	10012ce8 	.word	0x10012ce8
1000aed4:	10010e91 	.word	0x10010e91

1000aed8 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000aed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000aeda:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000aedc:	8801      	ldrh	r1, [r0, #0]
1000aede:	4b28      	ldr	r3, [pc, #160]	; (1000af80 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000aee0:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000aee2:	891a      	ldrh	r2, [r3, #8]
1000aee4:	428a      	cmp	r2, r1
1000aee6:	d104      	bne.n	1000aef2 <ble_encryption_status_change_handler+0x1a>
1000aee8:	001a      	movs	r2, r3
1000aeea:	325e      	adds	r2, #94	; 0x5e
1000aeec:	7812      	ldrb	r2, [r2, #0]
1000aeee:	2a06      	cmp	r2, #6
1000aef0:	d02e      	beq.n	1000af50 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000aef2:	3401      	adds	r4, #1
1000aef4:	b2e4      	uxtb	r4, r4
1000aef6:	337c      	adds	r3, #124	; 0x7c
1000aef8:	2c05      	cmp	r4, #5
1000aefa:	d1f2      	bne.n	1000aee2 <ble_encryption_status_change_handler+0xa>
1000aefc:	e039      	b.n	1000af72 <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000aefe:	4920      	ldr	r1, [pc, #128]	; (1000af80 <ble_encryption_status_change_handler+0xa8>)
1000af00:	0163      	lsls	r3, r4, #5
1000af02:	1b1a      	subs	r2, r3, r4
1000af04:	0092      	lsls	r2, r2, #2
1000af06:	188a      	adds	r2, r1, r2
1000af08:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000af0a:	0014      	movs	r4, r2
1000af0c:	345e      	adds	r4, #94	; 0x5e
1000af0e:	2307      	movs	r3, #7
1000af10:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000af12:	481c      	ldr	r0, [pc, #112]	; (1000af84 <ble_encryption_status_change_handler+0xac>)
1000af14:	4b1c      	ldr	r3, [pc, #112]	; (1000af88 <ble_encryption_status_change_handler+0xb0>)
1000af16:	4798      	blx	r3
1000af18:	481c      	ldr	r0, [pc, #112]	; (1000af8c <ble_encryption_status_change_handler+0xb4>)
1000af1a:	4b1d      	ldr	r3, [pc, #116]	; (1000af90 <ble_encryption_status_change_handler+0xb8>)
1000af1c:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000af1e:	25e2      	movs	r5, #226	; 0xe2
1000af20:	e02b      	b.n	1000af7a <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000af22:	4818      	ldr	r0, [pc, #96]	; (1000af84 <ble_encryption_status_change_handler+0xac>)
1000af24:	4b18      	ldr	r3, [pc, #96]	; (1000af88 <ble_encryption_status_change_handler+0xb0>)
1000af26:	4798      	blx	r3
1000af28:	481a      	ldr	r0, [pc, #104]	; (1000af94 <ble_encryption_status_change_handler+0xbc>)
1000af2a:	4b19      	ldr	r3, [pc, #100]	; (1000af90 <ble_encryption_status_change_handler+0xb8>)
1000af2c:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000af2e:	4914      	ldr	r1, [pc, #80]	; (1000af80 <ble_encryption_status_change_handler+0xa8>)
1000af30:	0163      	lsls	r3, r4, #5
1000af32:	1b1a      	subs	r2, r3, r4
1000af34:	0092      	lsls	r2, r2, #2
1000af36:	188a      	adds	r2, r1, r2
1000af38:	0010      	movs	r0, r2
1000af3a:	305e      	adds	r0, #94	; 0x5e
1000af3c:	2708      	movs	r7, #8
1000af3e:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000af40:	78f0      	ldrb	r0, [r6, #3]
1000af42:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000af44:	78b2      	ldrb	r2, [r6, #2]
1000af46:	1b1c      	subs	r4, r3, r4
1000af48:	00a4      	lsls	r4, r4, #2
1000af4a:	190c      	adds	r4, r1, r4
1000af4c:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000af4e:	e014      	b.n	1000af7a <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000af50:	78b5      	ldrb	r5, [r6, #2]
1000af52:	2d00      	cmp	r5, #0
1000af54:	d0e5      	beq.n	1000af22 <ble_encryption_status_change_handler+0x4a>
1000af56:	e7d2      	b.n	1000aefe <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000af58:	4e0a      	ldr	r6, [pc, #40]	; (1000af84 <ble_encryption_status_change_handler+0xac>)
1000af5a:	0030      	movs	r0, r6
1000af5c:	4d0a      	ldr	r5, [pc, #40]	; (1000af88 <ble_encryption_status_change_handler+0xb0>)
1000af5e:	47a8      	blx	r5
1000af60:	480c      	ldr	r0, [pc, #48]	; (1000af94 <ble_encryption_status_change_handler+0xbc>)
1000af62:	4c0b      	ldr	r4, [pc, #44]	; (1000af90 <ble_encryption_status_change_handler+0xb8>)
1000af64:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000af66:	0030      	movs	r0, r6
1000af68:	47a8      	blx	r5
1000af6a:	480b      	ldr	r0, [pc, #44]	; (1000af98 <ble_encryption_status_change_handler+0xc0>)
1000af6c:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000af6e:	25e2      	movs	r5, #226	; 0xe2
1000af70:	e003      	b.n	1000af7a <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000af72:	78b5      	ldrb	r5, [r6, #2]
1000af74:	2d00      	cmp	r5, #0
1000af76:	d1c2      	bne.n	1000aefe <ble_encryption_status_change_handler+0x26>
1000af78:	e7ee      	b.n	1000af58 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000af7a:	0028      	movs	r0, r5
1000af7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000af7e:	46c0      	nop			; (mov r8, r8)
1000af80:	10015740 	.word	0x10015740
1000af84:	1001227c 	.word	0x1001227c
1000af88:	10010fb1 	.word	0x10010fb1
1000af8c:	10012d04 	.word	0x10012d04
1000af90:	10010e91 	.word	0x10010e91
1000af94:	10012d18 	.word	0x10012d18
1000af98:	10012d3c 	.word	0x10012d3c

1000af9c <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000af9c:	b530      	push	{r4, r5, lr}
1000af9e:	b085      	sub	sp, #20
1000afa0:	0004      	movs	r4, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000afa2:	4b1f      	ldr	r3, [pc, #124]	; (1000b020 <ble_scan_info_handler+0x84>)
1000afa4:	781b      	ldrb	r3, [r3, #0]
1000afa6:	b2db      	uxtb	r3, r3
1000afa8:	2b13      	cmp	r3, #19
1000afaa:	d824      	bhi.n	1000aff6 <ble_scan_info_handler+0x5a>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000afac:	4d1c      	ldr	r5, [pc, #112]	; (1000b020 <ble_scan_info_handler+0x84>)
1000afae:	782b      	ldrb	r3, [r5, #0]
1000afb0:	b2db      	uxtb	r3, r3
1000afb2:	0098      	lsls	r0, r3, #2
1000afb4:	18c0      	adds	r0, r0, r3
1000afb6:	00c0      	lsls	r0, r0, #3
1000afb8:	18c3      	adds	r3, r0, r3
1000afba:	481a      	ldr	r0, [pc, #104]	; (1000b024 <ble_scan_info_handler+0x88>)
1000afbc:	1818      	adds	r0, r3, r0
1000afbe:	2229      	movs	r2, #41	; 0x29
1000afc0:	0021      	movs	r1, r4
1000afc2:	4b19      	ldr	r3, [pc, #100]	; (1000b028 <ble_scan_info_handler+0x8c>)
1000afc4:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000afc6:	4819      	ldr	r0, [pc, #100]	; (1000b02c <ble_scan_info_handler+0x90>)
1000afc8:	4b19      	ldr	r3, [pc, #100]	; (1000b030 <ble_scan_info_handler+0x94>)
1000afca:	4798      	blx	r3
1000afcc:	7829      	ldrb	r1, [r5, #0]
1000afce:	b2c9      	uxtb	r1, r1
1000afd0:	79a3      	ldrb	r3, [r4, #6]
1000afd2:	79e2      	ldrb	r2, [r4, #7]
1000afd4:	78a0      	ldrb	r0, [r4, #2]
1000afd6:	9003      	str	r0, [sp, #12]
1000afd8:	78e0      	ldrb	r0, [r4, #3]
1000afda:	9002      	str	r0, [sp, #8]
1000afdc:	7920      	ldrb	r0, [r4, #4]
1000afde:	9001      	str	r0, [sp, #4]
1000afe0:	7960      	ldrb	r0, [r4, #5]
1000afe2:	9000      	str	r0, [sp, #0]
1000afe4:	4813      	ldr	r0, [pc, #76]	; (1000b034 <ble_scan_info_handler+0x98>)
1000afe6:	4c14      	ldr	r4, [pc, #80]	; (1000b038 <ble_scan_info_handler+0x9c>)
1000afe8:	47a0      	blx	r4
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000afea:	782b      	ldrb	r3, [r5, #0]
1000afec:	3301      	adds	r3, #1
1000afee:	b2db      	uxtb	r3, r3
1000aff0:	702b      	strb	r3, [r5, #0]
		return AT_BLE_SUCCESS;
1000aff2:	2300      	movs	r3, #0
1000aff4:	e011      	b.n	1000b01a <ble_scan_info_handler+0x7e>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000aff6:	480d      	ldr	r0, [pc, #52]	; (1000b02c <ble_scan_info_handler+0x90>)
1000aff8:	4b0d      	ldr	r3, [pc, #52]	; (1000b030 <ble_scan_info_handler+0x94>)
1000affa:	4798      	blx	r3
1000affc:	480f      	ldr	r0, [pc, #60]	; (1000b03c <ble_scan_info_handler+0xa0>)
1000affe:	4b0e      	ldr	r3, [pc, #56]	; (1000b038 <ble_scan_info_handler+0x9c>)
1000b000:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000b002:	4b0f      	ldr	r3, [pc, #60]	; (1000b040 <ble_scan_info_handler+0xa4>)
1000b004:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000b006:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000b008:	2800      	cmp	r0, #0
1000b00a:	d006      	beq.n	1000b01a <ble_scan_info_handler+0x7e>
		{
			DBG_LOG("Failed to stop scanning");
1000b00c:	4807      	ldr	r0, [pc, #28]	; (1000b02c <ble_scan_info_handler+0x90>)
1000b00e:	4b08      	ldr	r3, [pc, #32]	; (1000b030 <ble_scan_info_handler+0x94>)
1000b010:	4798      	blx	r3
1000b012:	480c      	ldr	r0, [pc, #48]	; (1000b044 <ble_scan_info_handler+0xa8>)
1000b014:	4b08      	ldr	r3, [pc, #32]	; (1000b038 <ble_scan_info_handler+0x9c>)
1000b016:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000b018:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000b01a:	0018      	movs	r0, r3
1000b01c:	b005      	add	sp, #20
1000b01e:	bd30      	pop	{r4, r5, pc}
1000b020:	10014190 	.word	0x10014190
1000b024:	10015a24 	.word	0x10015a24
1000b028:	10010e6f 	.word	0x10010e6f
1000b02c:	1001227c 	.word	0x1001227c
1000b030:	10010fb1 	.word	0x10010fb1
1000b034:	10012d64 	.word	0x10012d64
1000b038:	10010e91 	.word	0x10010e91
1000b03c:	10012da0 	.word	0x10012da0
1000b040:	1000d679 	.word	0x1000d679
1000b044:	10012dd8 	.word	0x10012dd8

1000b048 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000b048:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b04a:	465f      	mov	r7, fp
1000b04c:	4656      	mov	r6, sl
1000b04e:	464d      	mov	r5, r9
1000b050:	4644      	mov	r4, r8
1000b052:	b4f0      	push	{r4, r5, r6, r7}
1000b054:	b083      	sub	sp, #12
1000b056:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000b058:	8841      	ldrh	r1, [r0, #2]
1000b05a:	4b59      	ldr	r3, [pc, #356]	; (1000b1c0 <ble_pair_done_handler+0x178>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b05c:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000b05e:	891a      	ldrh	r2, [r3, #8]
1000b060:	428a      	cmp	r2, r1
1000b062:	d105      	bne.n	1000b070 <ble_pair_done_handler+0x28>
1000b064:	001a      	movs	r2, r3
1000b066:	325e      	adds	r2, #94	; 0x5e
1000b068:	7812      	ldrb	r2, [r2, #0]
1000b06a:	2a03      	cmp	r2, #3
1000b06c:	d100      	bne.n	1000b070 <ble_pair_done_handler+0x28>
1000b06e:	e09a      	b.n	1000b1a6 <ble_pair_done_handler+0x15e>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b070:	3401      	adds	r4, #1
1000b072:	b2e4      	uxtb	r4, r4
1000b074:	337c      	adds	r3, #124	; 0x7c
1000b076:	2c05      	cmp	r4, #5
1000b078:	d1f1      	bne.n	1000b05e <ble_pair_done_handler+0x16>
1000b07a:	e057      	b.n	1000b12c <ble_pair_done_handler+0xe4>
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000b07c:	7821      	ldrb	r1, [r4, #0]
1000b07e:	0030      	movs	r0, r6
1000b080:	47b8      	blx	r7
1000b082:	3401      	adds	r4, #1
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
1000b084:	454c      	cmp	r4, r9
1000b086:	d1f9      	bne.n	1000b07c <ble_pair_done_handler+0x34>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
1000b088:	484e      	ldr	r0, [pc, #312]	; (1000b1c4 <ble_pair_done_handler+0x17c>)
1000b08a:	4b4f      	ldr	r3, [pc, #316]	; (1000b1c8 <ble_pair_done_handler+0x180>)
1000b08c:	4798      	blx	r3
1000b08e:	484f      	ldr	r0, [pc, #316]	; (1000b1cc <ble_pair_done_handler+0x184>)
1000b090:	4b4f      	ldr	r3, [pc, #316]	; (1000b1d0 <ble_pair_done_handler+0x188>)
1000b092:	4798      	blx	r3
1000b094:	002e      	movs	r6, r5
1000b096:	3622      	adds	r6, #34	; 0x22
1000b098:	002c      	movs	r4, r5
1000b09a:	3432      	adds	r4, #50	; 0x32
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
1000b09c:	4f4c      	ldr	r7, [pc, #304]	; (1000b1d0 <ble_pair_done_handler+0x188>)
1000b09e:	7831      	ldrb	r1, [r6, #0]
1000b0a0:	484c      	ldr	r0, [pc, #304]	; (1000b1d4 <ble_pair_done_handler+0x18c>)
1000b0a2:	47b8      	blx	r7
1000b0a4:	3601      	adds	r6, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
			for (idx = 0; idx < 16; idx++)
1000b0a6:	42a6      	cmp	r6, r4
1000b0a8:	d1f9      	bne.n	1000b09e <ble_pair_done_handler+0x56>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
1000b0aa:	4846      	ldr	r0, [pc, #280]	; (1000b1c4 <ble_pair_done_handler+0x17c>)
1000b0ac:	4b46      	ldr	r3, [pc, #280]	; (1000b1c8 <ble_pair_done_handler+0x180>)
1000b0ae:	4798      	blx	r3
1000b0b0:	4849      	ldr	r0, [pc, #292]	; (1000b1d8 <ble_pair_done_handler+0x190>)
1000b0b2:	4b47      	ldr	r3, [pc, #284]	; (1000b1d0 <ble_pair_done_handler+0x188>)
1000b0b4:	4798      	blx	r3
1000b0b6:	3542      	adds	r5, #66	; 0x42
1000b0b8:	002f      	movs	r7, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
1000b0ba:	4e46      	ldr	r6, [pc, #280]	; (1000b1d4 <ble_pair_done_handler+0x18c>)
1000b0bc:	4d44      	ldr	r5, [pc, #272]	; (1000b1d0 <ble_pair_done_handler+0x188>)
1000b0be:	7821      	ldrb	r1, [r4, #0]
1000b0c0:	0030      	movs	r0, r6
1000b0c2:	47a8      	blx	r5
1000b0c4:	3401      	adds	r4, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
			for (idx = 0; idx < 16; idx++)
1000b0c6:	42bc      	cmp	r4, r7
1000b0c8:	d1f9      	bne.n	1000b0be <ble_pair_done_handler+0x76>
1000b0ca:	e071      	b.n	1000b1b0 <ble_pair_done_handler+0x168>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000b0cc:	0163      	lsls	r3, r4, #5
1000b0ce:	1b1c      	subs	r4, r3, r4
1000b0d0:	00a4      	lsls	r4, r4, #2
1000b0d2:	4b3b      	ldr	r3, [pc, #236]	; (1000b1c0 <ble_pair_done_handler+0x178>)
1000b0d4:	191c      	adds	r4, r3, r4
1000b0d6:	345e      	adds	r4, #94	; 0x5e
1000b0d8:	7823      	ldrb	r3, [r4, #0]
1000b0da:	2b01      	cmp	r3, #1
1000b0dc:	d915      	bls.n	1000b10a <ble_pair_done_handler+0xc2>
			DBG_LOG("Pairing failed...Disconnecting");
1000b0de:	4839      	ldr	r0, [pc, #228]	; (1000b1c4 <ble_pair_done_handler+0x17c>)
1000b0e0:	4b39      	ldr	r3, [pc, #228]	; (1000b1c8 <ble_pair_done_handler+0x180>)
1000b0e2:	4798      	blx	r3
1000b0e4:	483d      	ldr	r0, [pc, #244]	; (1000b1dc <ble_pair_done_handler+0x194>)
1000b0e6:	4b3a      	ldr	r3, [pc, #232]	; (1000b1d0 <ble_pair_done_handler+0x188>)
1000b0e8:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000b0ea:	8868      	ldrh	r0, [r5, #2]
1000b0ec:	2113      	movs	r1, #19
1000b0ee:	4b3c      	ldr	r3, [pc, #240]	; (1000b1e0 <ble_pair_done_handler+0x198>)
1000b0f0:	4798      	blx	r3
1000b0f2:	9001      	str	r0, [sp, #4]
1000b0f4:	2800      	cmp	r0, #0
1000b0f6:	d05b      	beq.n	1000b1b0 <ble_pair_done_handler+0x168>
			{
				DBG_LOG("Disconnect Request Failed");
1000b0f8:	4832      	ldr	r0, [pc, #200]	; (1000b1c4 <ble_pair_done_handler+0x17c>)
1000b0fa:	4b33      	ldr	r3, [pc, #204]	; (1000b1c8 <ble_pair_done_handler+0x180>)
1000b0fc:	4798      	blx	r3
1000b0fe:	4839      	ldr	r0, [pc, #228]	; (1000b1e4 <ble_pair_done_handler+0x19c>)
1000b100:	4b33      	ldr	r3, [pc, #204]	; (1000b1d0 <ble_pair_done_handler+0x188>)
1000b102:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000b104:	23e2      	movs	r3, #226	; 0xe2
1000b106:	9301      	str	r3, [sp, #4]
1000b108:	e052      	b.n	1000b1b0 <ble_pair_done_handler+0x168>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000b10a:	2300      	movs	r3, #0
1000b10c:	9301      	str	r3, [sp, #4]
1000b10e:	e04f      	b.n	1000b1b0 <ble_pair_done_handler+0x168>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000b110:	4e2c      	ldr	r6, [pc, #176]	; (1000b1c4 <ble_pair_done_handler+0x17c>)
1000b112:	0030      	movs	r0, r6
1000b114:	4d2c      	ldr	r5, [pc, #176]	; (1000b1c8 <ble_pair_done_handler+0x180>)
1000b116:	47a8      	blx	r5
1000b118:	4833      	ldr	r0, [pc, #204]	; (1000b1e8 <ble_pair_done_handler+0x1a0>)
1000b11a:	4c2d      	ldr	r4, [pc, #180]	; (1000b1d0 <ble_pair_done_handler+0x188>)
1000b11c:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000b11e:	0030      	movs	r0, r6
1000b120:	47a8      	blx	r5
1000b122:	4832      	ldr	r0, [pc, #200]	; (1000b1ec <ble_pair_done_handler+0x1a4>)
1000b124:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000b126:	23e2      	movs	r3, #226	; 0xe2
1000b128:	9301      	str	r3, [sp, #4]
1000b12a:	e041      	b.n	1000b1b0 <ble_pair_done_handler+0x168>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000b12c:	792b      	ldrb	r3, [r5, #4]
1000b12e:	2b00      	cmp	r3, #0
1000b130:	d1cc      	bne.n	1000b0cc <ble_pair_done_handler+0x84>
1000b132:	e7ed      	b.n	1000b110 <ble_pair_done_handler+0xc8>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000b134:	4823      	ldr	r0, [pc, #140]	; (1000b1c4 <ble_pair_done_handler+0x17c>)
1000b136:	4b24      	ldr	r3, [pc, #144]	; (1000b1c8 <ble_pair_done_handler+0x180>)
1000b138:	469b      	mov	fp, r3
1000b13a:	4798      	blx	r3
1000b13c:	482a      	ldr	r0, [pc, #168]	; (1000b1e8 <ble_pair_done_handler+0x1a0>)
1000b13e:	4b24      	ldr	r3, [pc, #144]	; (1000b1d0 <ble_pair_done_handler+0x188>)
1000b140:	469a      	mov	sl, r3
1000b142:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000b144:	782a      	ldrb	r2, [r5, #0]
1000b146:	4b1e      	ldr	r3, [pc, #120]	; (1000b1c0 <ble_pair_done_handler+0x178>)
1000b148:	4698      	mov	r8, r3
1000b14a:	0167      	lsls	r7, r4, #5
1000b14c:	1b3b      	subs	r3, r7, r4
1000b14e:	009b      	lsls	r3, r3, #2
1000b150:	4443      	add	r3, r8
1000b152:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000b154:	792a      	ldrb	r2, [r5, #4]
1000b156:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000b158:	335e      	adds	r3, #94	; 0x5e
1000b15a:	2205      	movs	r2, #5
1000b15c:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000b15e:	1b38      	subs	r0, r7, r4
1000b160:	0080      	lsls	r0, r0, #2
1000b162:	4440      	add	r0, r8
1000b164:	3036      	adds	r0, #54	; 0x36
1000b166:	320b      	adds	r2, #11
1000b168:	0029      	movs	r1, r5
1000b16a:	3122      	adds	r1, #34	; 0x22
1000b16c:	4b20      	ldr	r3, [pc, #128]	; (1000b1f0 <ble_pair_done_handler+0x1a8>)
1000b16e:	4699      	mov	r9, r3
1000b170:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000b172:	1b38      	subs	r0, r7, r4
1000b174:	0080      	lsls	r0, r0, #2
1000b176:	4440      	add	r0, r8
1000b178:	3046      	adds	r0, #70	; 0x46
1000b17a:	2217      	movs	r2, #23
1000b17c:	0029      	movs	r1, r5
1000b17e:	3132      	adds	r1, #50	; 0x32
1000b180:	47c8      	blx	r9
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000b182:	1b38      	subs	r0, r7, r4
1000b184:	0080      	lsls	r0, r0, #2
1000b186:	4440      	add	r0, r8
1000b188:	301a      	adds	r0, #26
1000b18a:	1dac      	adds	r4, r5, #6
1000b18c:	221c      	movs	r2, #28
1000b18e:	0021      	movs	r1, r4
1000b190:	47c8      	blx	r9
			
			DBG_LOG_DEV("LTK: ");
1000b192:	480c      	ldr	r0, [pc, #48]	; (1000b1c4 <ble_pair_done_handler+0x17c>)
1000b194:	47d8      	blx	fp
1000b196:	4817      	ldr	r0, [pc, #92]	; (1000b1f4 <ble_pair_done_handler+0x1ac>)
1000b198:	47d0      	blx	sl
1000b19a:	2316      	movs	r3, #22
1000b19c:	4699      	mov	r9, r3
1000b19e:	44a9      	add	r9, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000b1a0:	4e0c      	ldr	r6, [pc, #48]	; (1000b1d4 <ble_pair_done_handler+0x18c>)
1000b1a2:	4f0b      	ldr	r7, [pc, #44]	; (1000b1d0 <ble_pair_done_handler+0x188>)
1000b1a4:	e76a      	b.n	1000b07c <ble_pair_done_handler+0x34>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000b1a6:	792b      	ldrb	r3, [r5, #4]
1000b1a8:	9301      	str	r3, [sp, #4]
1000b1aa:	2b00      	cmp	r3, #0
1000b1ac:	d0c2      	beq.n	1000b134 <ble_pair_done_handler+0xec>
1000b1ae:	e78d      	b.n	1000b0cc <ble_pair_done_handler+0x84>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000b1b0:	9801      	ldr	r0, [sp, #4]
1000b1b2:	b003      	add	sp, #12
1000b1b4:	bc3c      	pop	{r2, r3, r4, r5}
1000b1b6:	4690      	mov	r8, r2
1000b1b8:	4699      	mov	r9, r3
1000b1ba:	46a2      	mov	sl, r4
1000b1bc:	46ab      	mov	fp, r5
1000b1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b1c0:	10015740 	.word	0x10015740
1000b1c4:	1001227c 	.word	0x1001227c
1000b1c8:	10010fb1 	.word	0x10010fb1
1000b1cc:	10012dfc 	.word	0x10012dfc
1000b1d0:	10010e91 	.word	0x10010e91
1000b1d4:	10012df0 	.word	0x10012df0
1000b1d8:	10012e04 	.word	0x10012e04
1000b1dc:	10012e0c 	.word	0x10012e0c
1000b1e0:	1000d699 	.word	0x1000d699
1000b1e4:	10012e2c 	.word	0x10012e2c
1000b1e8:	10012e48 	.word	0x10012e48
1000b1ec:	10012e74 	.word	0x10012e74
1000b1f0:	10010e6f 	.word	0x10010e6f
1000b1f4:	10012ea4 	.word	0x10012ea4

1000b1f8 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000b1f8:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000b1fa:	8800      	ldrh	r0, [r0, #0]
1000b1fc:	2378      	movs	r3, #120	; 0x78
1000b1fe:	2201      	movs	r2, #1
1000b200:	2101      	movs	r1, #1
1000b202:	4c02      	ldr	r4, [pc, #8]	; (1000b20c <ble_conn_param_update_req+0x14>)
1000b204:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000b206:	2000      	movs	r0, #0
1000b208:	bd10      	pop	{r4, pc}
1000b20a:	46c0      	nop			; (mov r8, r8)
1000b20c:	1000d6b9 	.word	0x1000d6b9

1000b210 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000b210:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b212:	4657      	mov	r7, sl
1000b214:	464e      	mov	r6, r9
1000b216:	4645      	mov	r5, r8
1000b218:	b4e0      	push	{r5, r6, r7}
1000b21a:	b084      	sub	sp, #16
1000b21c:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000b21e:	2209      	movs	r2, #9
1000b220:	2100      	movs	r1, #0
1000b222:	a801      	add	r0, sp, #4
1000b224:	4b6a      	ldr	r3, [pc, #424]	; (1000b3d0 <ble_slave_security_request_handler+0x1c0>)
1000b226:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b228:	8825      	ldrh	r5, [r4, #0]
1000b22a:	496a      	ldr	r1, [pc, #424]	; (1000b3d4 <ble_slave_security_request_handler+0x1c4>)
1000b22c:	000a      	movs	r2, r1
1000b22e:	2300      	movs	r3, #0
1000b230:	8910      	ldrh	r0, [r2, #8]
1000b232:	42a8      	cmp	r0, r5
1000b234:	d116      	bne.n	1000b264 <ble_slave_security_request_handler+0x54>
1000b236:	0010      	movs	r0, r2
1000b238:	305e      	adds	r0, #94	; 0x5e
1000b23a:	7800      	ldrb	r0, [r0, #0]
1000b23c:	2802      	cmp	r0, #2
1000b23e:	d111      	bne.n	1000b264 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000b240:	4864      	ldr	r0, [pc, #400]	; (1000b3d4 <ble_slave_security_request_handler+0x1c4>)
1000b242:	015a      	lsls	r2, r3, #5
1000b244:	1ad6      	subs	r6, r2, r3
1000b246:	00b6      	lsls	r6, r6, #2
1000b248:	1986      	adds	r6, r0, r6
1000b24a:	365e      	adds	r6, #94	; 0x5e
1000b24c:	2206      	movs	r2, #6
1000b24e:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000b250:	32f9      	adds	r2, #249	; 0xf9
1000b252:	4013      	ands	r3, r2
1000b254:	015a      	lsls	r2, r3, #5
1000b256:	1ad2      	subs	r2, r2, r3
1000b258:	0092      	lsls	r2, r2, #2
1000b25a:	1882      	adds	r2, r0, r2
1000b25c:	7d12      	ldrb	r2, [r2, #20]
1000b25e:	07d0      	lsls	r0, r2, #31
1000b260:	d405      	bmi.n	1000b26e <ble_slave_security_request_handler+0x5e>
1000b262:	e01b      	b.n	1000b29c <ble_slave_security_request_handler+0x8c>
1000b264:	3301      	adds	r3, #1
1000b266:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b268:	2b05      	cmp	r3, #5
1000b26a:	d1e1      	bne.n	1000b230 <ble_slave_security_request_handler+0x20>
1000b26c:	e01e      	b.n	1000b2ac <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000b26e:	78e0      	ldrb	r0, [r4, #3]
1000b270:	2800      	cmp	r0, #0
1000b272:	d013      	beq.n	1000b29c <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000b274:	0159      	lsls	r1, r3, #5
1000b276:	1ac9      	subs	r1, r1, r3
1000b278:	008b      	lsls	r3, r1, #2
1000b27a:	4956      	ldr	r1, [pc, #344]	; (1000b3d4 <ble_slave_security_request_handler+0x1c4>)
1000b27c:	18c9      	adds	r1, r1, r3
1000b27e:	311a      	adds	r1, #26
1000b280:	8820      	ldrh	r0, [r4, #0]
1000b282:	4b55      	ldr	r3, [pc, #340]	; (1000b3d8 <ble_slave_security_request_handler+0x1c8>)
1000b284:	4798      	blx	r3
1000b286:	2800      	cmp	r0, #0
1000b288:	d100      	bne.n	1000b28c <ble_slave_security_request_handler+0x7c>
1000b28a:	e09b      	b.n	1000b3c4 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000b28c:	4853      	ldr	r0, [pc, #332]	; (1000b3dc <ble_slave_security_request_handler+0x1cc>)
1000b28e:	4b54      	ldr	r3, [pc, #336]	; (1000b3e0 <ble_slave_security_request_handler+0x1d0>)
1000b290:	4798      	blx	r3
1000b292:	4854      	ldr	r0, [pc, #336]	; (1000b3e4 <ble_slave_security_request_handler+0x1d4>)
1000b294:	4b54      	ldr	r3, [pc, #336]	; (1000b3e8 <ble_slave_security_request_handler+0x1d8>)
1000b296:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000b298:	20e2      	movs	r0, #226	; 0xe2
1000b29a:	e093      	b.n	1000b3c4 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000b29c:	015a      	lsls	r2, r3, #5
1000b29e:	1ad3      	subs	r3, r2, r3
1000b2a0:	009b      	lsls	r3, r3, #2
1000b2a2:	4a4c      	ldr	r2, [pc, #304]	; (1000b3d4 <ble_slave_security_request_handler+0x1c4>)
1000b2a4:	18d3      	adds	r3, r2, r3
1000b2a6:	335e      	adds	r3, #94	; 0x5e
1000b2a8:	2202      	movs	r2, #2
1000b2aa:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b2ac:	8825      	ldrh	r5, [r4, #0]
1000b2ae:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b2b0:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b2b2:	0016      	movs	r6, r2
1000b2b4:	8908      	ldrh	r0, [r1, #8]
1000b2b6:	42a8      	cmp	r0, r5
1000b2b8:	d10d      	bne.n	1000b2d6 <ble_slave_security_request_handler+0xc6>
1000b2ba:	0008      	movs	r0, r1
1000b2bc:	305e      	adds	r0, #94	; 0x5e
1000b2be:	7800      	ldrb	r0, [r0, #0]
1000b2c0:	2802      	cmp	r0, #2
1000b2c2:	d108      	bne.n	1000b2d6 <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000b2c4:	0152      	lsls	r2, r2, #5
1000b2c6:	1b92      	subs	r2, r2, r6
1000b2c8:	0096      	lsls	r6, r2, #2
1000b2ca:	4a42      	ldr	r2, [pc, #264]	; (1000b3d4 <ble_slave_security_request_handler+0x1c4>)
1000b2cc:	1992      	adds	r2, r2, r6
1000b2ce:	325e      	adds	r2, #94	; 0x5e
1000b2d0:	2103      	movs	r1, #3
1000b2d2:	7011      	strb	r1, [r2, #0]
			break;
1000b2d4:	e005      	b.n	1000b2e2 <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b2d6:	3301      	adds	r3, #1
1000b2d8:	b2db      	uxtb	r3, r3
1000b2da:	3201      	adds	r2, #1
1000b2dc:	317c      	adds	r1, #124	; 0x7c
1000b2de:	2b05      	cmp	r3, #5
1000b2e0:	d1e7      	bne.n	1000b2b2 <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000b2e2:	aa01      	add	r2, sp, #4
1000b2e4:	78e1      	ldrb	r1, [r4, #3]
1000b2e6:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000b2e8:	2101      	movs	r1, #1
1000b2ea:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000b2ec:	3103      	adds	r1, #3
1000b2ee:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000b2f0:	001f      	movs	r7, r3
1000b2f2:	015a      	lsls	r2, r3, #5
1000b2f4:	1ad2      	subs	r2, r2, r3
1000b2f6:	0092      	lsls	r2, r2, #2
1000b2f8:	4936      	ldr	r1, [pc, #216]	; (1000b3d4 <ble_slave_security_request_handler+0x1c4>)
1000b2fa:	5c52      	ldrb	r2, [r2, r1]
1000b2fc:	2a02      	cmp	r2, #2
1000b2fe:	d104      	bne.n	1000b30a <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000b300:	aa01      	add	r2, sp, #4
1000b302:	2103      	movs	r1, #3
1000b304:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000b306:	71d1      	strb	r1, [r2, #7]
1000b308:	e003      	b.n	1000b312 <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000b30a:	aa01      	add	r2, sp, #4
1000b30c:	2101      	movs	r1, #1
1000b30e:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000b310:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000b312:	aa01      	add	r2, sp, #4
1000b314:	2110      	movs	r1, #16
1000b316:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000b318:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000b31a:	017a      	lsls	r2, r7, #5
1000b31c:	1bd2      	subs	r2, r2, r7
1000b31e:	0092      	lsls	r2, r2, #2
1000b320:	492c      	ldr	r1, [pc, #176]	; (1000b3d4 <ble_slave_security_request_handler+0x1c4>)
1000b322:	188a      	adds	r2, r1, r2
1000b324:	7e12      	ldrb	r2, [r2, #24]
1000b326:	2a40      	cmp	r2, #64	; 0x40
1000b328:	d134      	bne.n	1000b394 <ble_slave_security_request_handler+0x184>
1000b32a:	015a      	lsls	r2, r3, #5
1000b32c:	1ad3      	subs	r3, r2, r3
1000b32e:	009b      	lsls	r3, r3, #2
1000b330:	469a      	mov	sl, r3
1000b332:	001e      	movs	r6, r3
1000b334:	3660      	adds	r6, #96	; 0x60
1000b336:	1876      	adds	r6, r6, r1
1000b338:	4655      	mov	r5, sl
1000b33a:	3568      	adds	r5, #104	; 0x68
1000b33c:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000b33e:	4b2b      	ldr	r3, [pc, #172]	; (1000b3ec <ble_slave_security_request_handler+0x1dc>)
1000b340:	4699      	mov	r9, r3
1000b342:	230f      	movs	r3, #15
1000b344:	4698      	mov	r8, r3
1000b346:	47c8      	blx	r9
1000b348:	4643      	mov	r3, r8
1000b34a:	4018      	ands	r0, r3
1000b34c:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000b34e:	47c8      	blx	r9
1000b350:	4643      	mov	r3, r8
1000b352:	4018      	ands	r0, r3
1000b354:	74b0      	strb	r0, [r6, #18]
1000b356:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000b358:	42ae      	cmp	r6, r5
1000b35a:	d1f4      	bne.n	1000b346 <ble_slave_security_request_handler+0x136>
1000b35c:	4656      	mov	r6, sl
1000b35e:	3670      	adds	r6, #112	; 0x70
1000b360:	4a1c      	ldr	r2, [pc, #112]	; (1000b3d4 <ble_slave_security_request_handler+0x1c4>)
1000b362:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000b364:	4b21      	ldr	r3, [pc, #132]	; (1000b3ec <ble_slave_security_request_handler+0x1dc>)
1000b366:	4699      	mov	r9, r3
1000b368:	230f      	movs	r3, #15
1000b36a:	4698      	mov	r8, r3
1000b36c:	47c8      	blx	r9
1000b36e:	4643      	mov	r3, r8
1000b370:	4018      	ands	r0, r3
1000b372:	7028      	strb	r0, [r5, #0]
1000b374:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000b376:	42b5      	cmp	r5, r6
1000b378:	d1f8      	bne.n	1000b36c <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000b37a:	4b1c      	ldr	r3, [pc, #112]	; (1000b3ec <ble_slave_security_request_handler+0x1dc>)
1000b37c:	4798      	blx	r3
1000b37e:	017b      	lsls	r3, r7, #5
1000b380:	1bdb      	subs	r3, r3, r7
1000b382:	009b      	lsls	r3, r3, #2
1000b384:	4a13      	ldr	r2, [pc, #76]	; (1000b3d4 <ble_slave_security_request_handler+0x1c4>)
1000b386:	18d3      	adds	r3, r2, r3
1000b388:	001a      	movs	r2, r3
1000b38a:	3270      	adds	r2, #112	; 0x70
1000b38c:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000b38e:	337a      	adds	r3, #122	; 0x7a
1000b390:	2210      	movs	r2, #16
1000b392:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000b394:	017a      	lsls	r2, r7, #5
1000b396:	1bd7      	subs	r7, r2, r7
1000b398:	00bf      	lsls	r7, r7, #2
1000b39a:	3760      	adds	r7, #96	; 0x60
1000b39c:	4a0d      	ldr	r2, [pc, #52]	; (1000b3d4 <ble_slave_security_request_handler+0x1c4>)
1000b39e:	18ba      	adds	r2, r7, r2
1000b3a0:	8820      	ldrh	r0, [r4, #0]
1000b3a2:	2300      	movs	r3, #0
1000b3a4:	a901      	add	r1, sp, #4
1000b3a6:	4c12      	ldr	r4, [pc, #72]	; (1000b3f0 <ble_slave_security_request_handler+0x1e0>)
1000b3a8:	47a0      	blx	r4
1000b3aa:	2800      	cmp	r0, #0
1000b3ac:	d00a      	beq.n	1000b3c4 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000b3ae:	ab01      	add	r3, sp, #4
1000b3b0:	2200      	movs	r2, #0
1000b3b2:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000b3b4:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000b3b6:	4809      	ldr	r0, [pc, #36]	; (1000b3dc <ble_slave_security_request_handler+0x1cc>)
1000b3b8:	4b09      	ldr	r3, [pc, #36]	; (1000b3e0 <ble_slave_security_request_handler+0x1d0>)
1000b3ba:	4798      	blx	r3
1000b3bc:	480d      	ldr	r0, [pc, #52]	; (1000b3f4 <ble_slave_security_request_handler+0x1e4>)
1000b3be:	4b0a      	ldr	r3, [pc, #40]	; (1000b3e8 <ble_slave_security_request_handler+0x1d8>)
1000b3c0:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000b3c2:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000b3c4:	b004      	add	sp, #16
1000b3c6:	bc1c      	pop	{r2, r3, r4}
1000b3c8:	4690      	mov	r8, r2
1000b3ca:	4699      	mov	r9, r3
1000b3cc:	46a2      	mov	sl, r4
1000b3ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b3d0:	10010e81 	.word	0x10010e81
1000b3d4:	10015740 	.word	0x10015740
1000b3d8:	1000e27d 	.word	0x1000e27d
1000b3dc:	1001227c 	.word	0x1001227c
1000b3e0:	10010fb1 	.word	0x10010fb1
1000b3e4:	10012eac 	.word	0x10012eac
1000b3e8:	10010e91 	.word	0x10010e91
1000b3ec:	10010fc5 	.word	0x10010fc5
1000b3f0:	1000e091 	.word	0x1000e091
1000b3f4:	10012ec4 	.word	0x10012ec4

1000b3f8 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000b3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b3fa:	465f      	mov	r7, fp
1000b3fc:	4656      	mov	r6, sl
1000b3fe:	464d      	mov	r5, r9
1000b400:	4644      	mov	r4, r8
1000b402:	b4f0      	push	{r4, r5, r6, r7}
1000b404:	b085      	sub	sp, #20
1000b406:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b408:	8804      	ldrh	r4, [r0, #0]
1000b40a:	4a54      	ldr	r2, [pc, #336]	; (1000b55c <ble_pair_request_handler+0x164>)
1000b40c:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b40e:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b410:	8910      	ldrh	r0, [r2, #8]
1000b412:	42a0      	cmp	r0, r4
1000b414:	d10d      	bne.n	1000b432 <ble_pair_request_handler+0x3a>
1000b416:	0010      	movs	r0, r2
1000b418:	305e      	adds	r0, #94	; 0x5e
1000b41a:	7800      	ldrb	r0, [r0, #0]
1000b41c:	2802      	cmp	r0, #2
1000b41e:	d108      	bne.n	1000b432 <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000b420:	014a      	lsls	r2, r1, #5
1000b422:	1a52      	subs	r2, r2, r1
1000b424:	0095      	lsls	r5, r2, #2
1000b426:	4a4d      	ldr	r2, [pc, #308]	; (1000b55c <ble_pair_request_handler+0x164>)
1000b428:	1952      	adds	r2, r2, r5
1000b42a:	325e      	adds	r2, #94	; 0x5e
1000b42c:	2103      	movs	r1, #3
1000b42e:	7011      	strb	r1, [r2, #0]
			break;
1000b430:	e005      	b.n	1000b43e <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b432:	3301      	adds	r3, #1
1000b434:	b2db      	uxtb	r3, r3
1000b436:	3101      	adds	r1, #1
1000b438:	327c      	adds	r2, #124	; 0x7c
1000b43a:	2b05      	cmp	r3, #5
1000b43c:	d1e8      	bne.n	1000b410 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000b43e:	aa01      	add	r2, sp, #4
1000b440:	2100      	movs	r1, #0
1000b442:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000b444:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000b446:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000b448:	2003      	movs	r0, #3
1000b44a:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000b44c:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000b44e:	001e      	movs	r6, r3
1000b450:	015a      	lsls	r2, r3, #5
1000b452:	1ad2      	subs	r2, r2, r3
1000b454:	0092      	lsls	r2, r2, #2
1000b456:	4941      	ldr	r1, [pc, #260]	; (1000b55c <ble_pair_request_handler+0x164>)
1000b458:	5c52      	ldrb	r2, [r2, r1]
1000b45a:	2a02      	cmp	r2, #2
1000b45c:	d104      	bne.n	1000b468 <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000b45e:	aa01      	add	r2, sp, #4
1000b460:	2103      	movs	r1, #3
1000b462:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000b464:	71d1      	strb	r1, [r2, #7]
1000b466:	e003      	b.n	1000b470 <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000b468:	aa01      	add	r2, sp, #4
1000b46a:	2101      	movs	r1, #1
1000b46c:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000b46e:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000b470:	aa01      	add	r2, sp, #4
1000b472:	2110      	movs	r1, #16
1000b474:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000b476:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000b478:	0172      	lsls	r2, r6, #5
1000b47a:	1b92      	subs	r2, r2, r6
1000b47c:	0092      	lsls	r2, r2, #2
1000b47e:	4937      	ldr	r1, [pc, #220]	; (1000b55c <ble_pair_request_handler+0x164>)
1000b480:	188a      	adds	r2, r1, r2
1000b482:	7e12      	ldrb	r2, [r2, #24]
1000b484:	2a40      	cmp	r2, #64	; 0x40
1000b486:	d142      	bne.n	1000b50e <ble_pair_request_handler+0x116>
1000b488:	015f      	lsls	r7, r3, #5
1000b48a:	1afb      	subs	r3, r7, r3
1000b48c:	009b      	lsls	r3, r3, #2
1000b48e:	469b      	mov	fp, r3
1000b490:	001c      	movs	r4, r3
1000b492:	3460      	adds	r4, #96	; 0x60
1000b494:	1864      	adds	r4, r4, r1
1000b496:	465d      	mov	r5, fp
1000b498:	3568      	adds	r5, #104	; 0x68
1000b49a:	186d      	adds	r5, r5, r1
1000b49c:	0027      	movs	r7, r4
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000b49e:	4b30      	ldr	r3, [pc, #192]	; (1000b560 <ble_pair_request_handler+0x168>)
1000b4a0:	469a      	mov	sl, r3
1000b4a2:	230f      	movs	r3, #15
1000b4a4:	4699      	mov	r9, r3
1000b4a6:	47d0      	blx	sl
1000b4a8:	464b      	mov	r3, r9
1000b4aa:	4018      	ands	r0, r3
1000b4ac:	7038      	strb	r0, [r7, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000b4ae:	47d0      	blx	sl
1000b4b0:	464b      	mov	r3, r9
1000b4b2:	4018      	ands	r0, r3
1000b4b4:	74b8      	strb	r0, [r7, #18]
1000b4b6:	3701      	adds	r7, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000b4b8:	42af      	cmp	r7, r5
1000b4ba:	d1f4      	bne.n	1000b4a6 <ble_pair_request_handler+0xae>
1000b4bc:	465b      	mov	r3, fp
1000b4be:	3370      	adds	r3, #112	; 0x70
1000b4c0:	4f26      	ldr	r7, [pc, #152]	; (1000b55c <ble_pair_request_handler+0x164>)
1000b4c2:	19df      	adds	r7, r3, r7
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000b4c4:	4b26      	ldr	r3, [pc, #152]	; (1000b560 <ble_pair_request_handler+0x168>)
1000b4c6:	469a      	mov	sl, r3
1000b4c8:	230f      	movs	r3, #15
1000b4ca:	4699      	mov	r9, r3
1000b4cc:	47d0      	blx	sl
1000b4ce:	464b      	mov	r3, r9
1000b4d0:	4018      	ands	r0, r3
1000b4d2:	7028      	strb	r0, [r5, #0]
1000b4d4:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000b4d6:	42bd      	cmp	r5, r7
1000b4d8:	d1f8      	bne.n	1000b4cc <ble_pair_request_handler+0xd4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
1000b4da:	4822      	ldr	r0, [pc, #136]	; (1000b564 <ble_pair_request_handler+0x16c>)
1000b4dc:	4b22      	ldr	r3, [pc, #136]	; (1000b568 <ble_pair_request_handler+0x170>)
1000b4de:	4798      	blx	r3
1000b4e0:	4822      	ldr	r0, [pc, #136]	; (1000b56c <ble_pair_request_handler+0x174>)
1000b4e2:	4b23      	ldr	r3, [pc, #140]	; (1000b570 <ble_pair_request_handler+0x178>)
1000b4e4:	4798      	blx	r3
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
1000b4e6:	4d22      	ldr	r5, [pc, #136]	; (1000b570 <ble_pair_request_handler+0x178>)
1000b4e8:	7821      	ldrb	r1, [r4, #0]
1000b4ea:	4822      	ldr	r0, [pc, #136]	; (1000b574 <ble_pair_request_handler+0x17c>)
1000b4ec:	47a8      	blx	r5
1000b4ee:	3401      	adds	r4, #1
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
1000b4f0:	42bc      	cmp	r4, r7
1000b4f2:	d1f9      	bne.n	1000b4e8 <ble_pair_request_handler+0xf0>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000b4f4:	4b1a      	ldr	r3, [pc, #104]	; (1000b560 <ble_pair_request_handler+0x168>)
1000b4f6:	4798      	blx	r3
1000b4f8:	0173      	lsls	r3, r6, #5
1000b4fa:	1b9b      	subs	r3, r3, r6
1000b4fc:	009b      	lsls	r3, r3, #2
1000b4fe:	4a17      	ldr	r2, [pc, #92]	; (1000b55c <ble_pair_request_handler+0x164>)
1000b500:	18d3      	adds	r3, r2, r3
1000b502:	001a      	movs	r2, r3
1000b504:	3270      	adds	r2, #112	; 0x70
1000b506:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000b508:	337a      	adds	r3, #122	; 0x7a
1000b50a:	2210      	movs	r2, #16
1000b50c:	701a      	strb	r2, [r3, #0]
		/* Bonding information already exists */
		
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");
1000b50e:	4815      	ldr	r0, [pc, #84]	; (1000b564 <ble_pair_request_handler+0x16c>)
1000b510:	4b15      	ldr	r3, [pc, #84]	; (1000b568 <ble_pair_request_handler+0x170>)
1000b512:	4798      	blx	r3
1000b514:	4818      	ldr	r0, [pc, #96]	; (1000b578 <ble_pair_request_handler+0x180>)
1000b516:	4b16      	ldr	r3, [pc, #88]	; (1000b570 <ble_pair_request_handler+0x178>)
1000b518:	4798      	blx	r3

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000b51a:	0173      	lsls	r3, r6, #5
1000b51c:	1b9b      	subs	r3, r3, r6
1000b51e:	009b      	lsls	r3, r3, #2
1000b520:	3360      	adds	r3, #96	; 0x60
1000b522:	4a0e      	ldr	r2, [pc, #56]	; (1000b55c <ble_pair_request_handler+0x164>)
1000b524:	189a      	adds	r2, r3, r2
1000b526:	4643      	mov	r3, r8
1000b528:	8818      	ldrh	r0, [r3, #0]
1000b52a:	2300      	movs	r3, #0
1000b52c:	a901      	add	r1, sp, #4
1000b52e:	4c13      	ldr	r4, [pc, #76]	; (1000b57c <ble_pair_request_handler+0x184>)
1000b530:	47a0      	blx	r4
1000b532:	2800      	cmp	r0, #0
1000b534:	d00a      	beq.n	1000b54c <ble_pair_request_handler+0x154>
	{
		features.bond = false;
1000b536:	ab01      	add	r3, sp, #4
1000b538:	2200      	movs	r2, #0
1000b53a:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000b53c:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000b53e:	4809      	ldr	r0, [pc, #36]	; (1000b564 <ble_pair_request_handler+0x16c>)
1000b540:	4b09      	ldr	r3, [pc, #36]	; (1000b568 <ble_pair_request_handler+0x170>)
1000b542:	4798      	blx	r3
1000b544:	480e      	ldr	r0, [pc, #56]	; (1000b580 <ble_pair_request_handler+0x188>)
1000b546:	4b0a      	ldr	r3, [pc, #40]	; (1000b570 <ble_pair_request_handler+0x178>)
1000b548:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000b54a:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000b54c:	b005      	add	sp, #20
1000b54e:	bc3c      	pop	{r2, r3, r4, r5}
1000b550:	4690      	mov	r8, r2
1000b552:	4699      	mov	r9, r3
1000b554:	46a2      	mov	sl, r4
1000b556:	46ab      	mov	fp, r5
1000b558:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b55a:	46c0      	nop			; (mov r8, r8)
1000b55c:	10015740 	.word	0x10015740
1000b560:	10010fc5 	.word	0x10010fc5
1000b564:	1001227c 	.word	0x1001227c
1000b568:	10010fb1 	.word	0x10010fb1
1000b56c:	10012ef0 	.word	0x10012ef0
1000b570:	10010e91 	.word	0x10010e91
1000b574:	10012f00 	.word	0x10012f00
1000b578:	10012f08 	.word	0x10012f08
1000b57c:	1000e091 	.word	0x1000e091
1000b580:	10012f24 	.word	0x10012f24

1000b584 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000b584:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b586:	b085      	sub	sp, #20
1000b588:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000b58a:	2206      	movs	r2, #6
1000b58c:	493d      	ldr	r1, [pc, #244]	; (1000b684 <ble_pair_key_request_handler+0x100>)
1000b58e:	a802      	add	r0, sp, #8
1000b590:	4e3d      	ldr	r6, [pc, #244]	; (1000b688 <ble_pair_key_request_handler+0x104>)
1000b592:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000b594:	ac01      	add	r4, sp, #4
1000b596:	2204      	movs	r2, #4
1000b598:	0029      	movs	r1, r5
1000b59a:	0020      	movs	r0, r4
1000b59c:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000b59e:	78e3      	ldrb	r3, [r4, #3]
1000b5a0:	2b00      	cmp	r3, #0
1000b5a2:	d162      	bne.n	1000b66a <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000b5a4:	4839      	ldr	r0, [pc, #228]	; (1000b68c <ble_pair_key_request_handler+0x108>)
1000b5a6:	4b3a      	ldr	r3, [pc, #232]	; (1000b690 <ble_pair_key_request_handler+0x10c>)
1000b5a8:	4798      	blx	r3
1000b5aa:	483a      	ldr	r0, [pc, #232]	; (1000b694 <ble_pair_key_request_handler+0x110>)
1000b5ac:	4b3a      	ldr	r3, [pc, #232]	; (1000b698 <ble_pair_key_request_handler+0x114>)
1000b5ae:	4798      	blx	r3
1000b5b0:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000b5b2:	4c3a      	ldr	r4, [pc, #232]	; (1000b69c <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000b5b4:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000b5b6:	201e      	movs	r0, #30
1000b5b8:	47a0      	blx	r4
1000b5ba:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000b5bc:	2b00      	cmp	r3, #0
1000b5be:	d11a      	bne.n	1000b5f6 <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000b5c0:	4f32      	ldr	r7, [pc, #200]	; (1000b68c <ble_pair_key_request_handler+0x108>)
1000b5c2:	0038      	movs	r0, r7
1000b5c4:	4e32      	ldr	r6, [pc, #200]	; (1000b690 <ble_pair_key_request_handler+0x10c>)
1000b5c6:	47b0      	blx	r6
1000b5c8:	4835      	ldr	r0, [pc, #212]	; (1000b6a0 <ble_pair_key_request_handler+0x11c>)
1000b5ca:	4c33      	ldr	r4, [pc, #204]	; (1000b698 <ble_pair_key_request_handler+0x114>)
1000b5cc:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000b5ce:	0038      	movs	r0, r7
1000b5d0:	47b0      	blx	r6
1000b5d2:	4834      	ldr	r0, [pc, #208]	; (1000b6a4 <ble_pair_key_request_handler+0x120>)
1000b5d4:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000b5d6:	8828      	ldrh	r0, [r5, #0]
1000b5d8:	2113      	movs	r1, #19
1000b5da:	4b33      	ldr	r3, [pc, #204]	; (1000b6a8 <ble_pair_key_request_handler+0x124>)
1000b5dc:	4798      	blx	r3
1000b5de:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000b5e0:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000b5e2:	2b00      	cmp	r3, #0
1000b5e4:	d04c      	beq.n	1000b680 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000b5e6:	4829      	ldr	r0, [pc, #164]	; (1000b68c <ble_pair_key_request_handler+0x108>)
1000b5e8:	4b29      	ldr	r3, [pc, #164]	; (1000b690 <ble_pair_key_request_handler+0x10c>)
1000b5ea:	4798      	blx	r3
1000b5ec:	482f      	ldr	r0, [pc, #188]	; (1000b6ac <ble_pair_key_request_handler+0x128>)
1000b5ee:	4b2a      	ldr	r3, [pc, #168]	; (1000b698 <ble_pair_key_request_handler+0x114>)
1000b5f0:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000b5f2:	20e2      	movs	r0, #226	; 0xe2
1000b5f4:	e044      	b.n	1000b680 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000b5f6:	001a      	movs	r2, r3
1000b5f8:	3a30      	subs	r2, #48	; 0x30
1000b5fa:	2a09      	cmp	r2, #9
1000b5fc:	d8db      	bhi.n	1000b5b6 <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000b5fe:	aa02      	add	r2, sp, #8
1000b600:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000b602:	4038      	ands	r0, r7
1000b604:	4b2a      	ldr	r3, [pc, #168]	; (1000b6b0 <ble_pair_key_request_handler+0x12c>)
1000b606:	4798      	blx	r3
1000b608:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000b60a:	2e06      	cmp	r6, #6
1000b60c:	d026      	beq.n	1000b65c <ble_pair_key_request_handler+0xd8>
1000b60e:	e7d2      	b.n	1000b5b6 <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000b610:	481e      	ldr	r0, [pc, #120]	; (1000b68c <ble_pair_key_request_handler+0x108>)
1000b612:	4b1f      	ldr	r3, [pc, #124]	; (1000b690 <ble_pair_key_request_handler+0x10c>)
1000b614:	4798      	blx	r3
1000b616:	4827      	ldr	r0, [pc, #156]	; (1000b6b4 <ble_pair_key_request_handler+0x130>)
1000b618:	4b1f      	ldr	r3, [pc, #124]	; (1000b698 <ble_pair_key_request_handler+0x114>)
1000b61a:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000b61c:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000b61e:	4e24      	ldr	r6, [pc, #144]	; (1000b6b0 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000b620:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000b622:	5ce0      	ldrb	r0, [r4, r3]
1000b624:	47b0      	blx	r6
1000b626:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000b628:	2c06      	cmp	r4, #6
1000b62a:	d1f9      	bne.n	1000b620 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000b62c:	ab01      	add	r3, sp, #4
1000b62e:	7899      	ldrb	r1, [r3, #2]
1000b630:	8828      	ldrh	r0, [r5, #0]
1000b632:	aa02      	add	r2, sp, #8
1000b634:	4b20      	ldr	r3, [pc, #128]	; (1000b6b8 <ble_pair_key_request_handler+0x134>)
1000b636:	4798      	blx	r3
1000b638:	2800      	cmp	r0, #0
1000b63a:	d021      	beq.n	1000b680 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000b63c:	4813      	ldr	r0, [pc, #76]	; (1000b68c <ble_pair_key_request_handler+0x108>)
1000b63e:	4b14      	ldr	r3, [pc, #80]	; (1000b690 <ble_pair_key_request_handler+0x10c>)
1000b640:	4798      	blx	r3
1000b642:	481e      	ldr	r0, [pc, #120]	; (1000b6bc <ble_pair_key_request_handler+0x138>)
1000b644:	4b14      	ldr	r3, [pc, #80]	; (1000b698 <ble_pair_key_request_handler+0x114>)
1000b646:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000b648:	2000      	movs	r0, #0
1000b64a:	e019      	b.n	1000b680 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000b64c:	480f      	ldr	r0, [pc, #60]	; (1000b68c <ble_pair_key_request_handler+0x108>)
1000b64e:	4b10      	ldr	r3, [pc, #64]	; (1000b690 <ble_pair_key_request_handler+0x10c>)
1000b650:	4798      	blx	r3
1000b652:	481b      	ldr	r0, [pc, #108]	; (1000b6c0 <ble_pair_key_request_handler+0x13c>)
1000b654:	4b10      	ldr	r3, [pc, #64]	; (1000b698 <ble_pair_key_request_handler+0x114>)
1000b656:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000b658:	2000      	movs	r0, #0
1000b65a:	e011      	b.n	1000b680 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000b65c:	480b      	ldr	r0, [pc, #44]	; (1000b68c <ble_pair_key_request_handler+0x108>)
1000b65e:	4b0c      	ldr	r3, [pc, #48]	; (1000b690 <ble_pair_key_request_handler+0x10c>)
1000b660:	4798      	blx	r3
1000b662:	4818      	ldr	r0, [pc, #96]	; (1000b6c4 <ble_pair_key_request_handler+0x140>)
1000b664:	4b0c      	ldr	r3, [pc, #48]	; (1000b698 <ble_pair_key_request_handler+0x114>)
1000b666:	4798      	blx	r3
1000b668:	e7d8      	b.n	1000b61c <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000b66a:	ab01      	add	r3, sp, #4
1000b66c:	885a      	ldrh	r2, [r3, #2]
1000b66e:	2380      	movs	r3, #128	; 0x80
1000b670:	005b      	lsls	r3, r3, #1
1000b672:	429a      	cmp	r2, r3
1000b674:	d0cc      	beq.n	1000b610 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000b676:	ab01      	add	r3, sp, #4
1000b678:	789b      	ldrb	r3, [r3, #2]
1000b67a:	2b01      	cmp	r3, #1
1000b67c:	d0e6      	beq.n	1000b64c <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000b67e:	2000      	movs	r0, #0
}
1000b680:	b005      	add	sp, #20
1000b682:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b684:	10012b0c 	.word	0x10012b0c
1000b688:	10010e6f 	.word	0x10010e6f
1000b68c:	1001227c 	.word	0x1001227c
1000b690:	10010fb1 	.word	0x10010fb1
1000b694:	10012f4c 	.word	0x10012f4c
1000b698:	10010e91 	.word	0x10010e91
1000b69c:	100092d5 	.word	0x100092d5
1000b6a0:	10012f74 	.word	0x10012f74
1000b6a4:	10012f80 	.word	0x10012f80
1000b6a8:	1000d699 	.word	0x1000d699
1000b6ac:	10012e2c 	.word	0x10012e2c
1000b6b0:	10010ec5 	.word	0x10010ec5
1000b6b4:	10012f94 	.word	0x10012f94
1000b6b8:	1000e1c1 	.word	0x1000e1c1
1000b6bc:	10012fcc 	.word	0x10012fcc
1000b6c0:	10012fe4 	.word	0x10012fe4
1000b6c4:	10013000 	.word	0x10013000

1000b6c8 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000b6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b6ca:	465f      	mov	r7, fp
1000b6cc:	4656      	mov	r6, sl
1000b6ce:	464d      	mov	r5, r9
1000b6d0:	b4e0      	push	{r5, r6, r7}
1000b6d2:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000b6d4:	8800      	ldrh	r0, [r0, #0]
1000b6d6:	4b49      	ldr	r3, [pc, #292]	; (1000b7fc <ble_encryption_request_handler+0x134>)
1000b6d8:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b6da:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000b6dc:	8919      	ldrh	r1, [r3, #8]
1000b6de:	4281      	cmp	r1, r0
1000b6e0:	d137      	bne.n	1000b752 <ble_encryption_request_handler+0x8a>
1000b6e2:	0019      	movs	r1, r3
1000b6e4:	315e      	adds	r1, #94	; 0x5e
1000b6e6:	7809      	ldrb	r1, [r1, #0]
1000b6e8:	2901      	cmp	r1, #1
1000b6ea:	d932      	bls.n	1000b752 <ble_encryption_request_handler+0x8a>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000b6ec:	4f43      	ldr	r7, [pc, #268]	; (1000b7fc <ble_encryption_request_handler+0x134>)
1000b6ee:	0153      	lsls	r3, r2, #5
1000b6f0:	1a9d      	subs	r5, r3, r2
1000b6f2:	00ad      	lsls	r5, r5, #2
1000b6f4:	197d      	adds	r5, r7, r5
1000b6f6:	355e      	adds	r5, #94	; 0x5e
1000b6f8:	2306      	movs	r3, #6
1000b6fa:	702b      	strb	r3, [r5, #0]
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
1000b6fc:	4840      	ldr	r0, [pc, #256]	; (1000b800 <ble_encryption_request_handler+0x138>)
1000b6fe:	4b41      	ldr	r3, [pc, #260]	; (1000b804 <ble_encryption_request_handler+0x13c>)
1000b700:	469a      	mov	sl, r3
1000b702:	4798      	blx	r3
1000b704:	8831      	ldrh	r1, [r6, #0]
1000b706:	4840      	ldr	r0, [pc, #256]	; (1000b808 <ble_encryption_request_handler+0x140>)
1000b708:	4b40      	ldr	r3, [pc, #256]	; (1000b80c <ble_encryption_request_handler+0x144>)
1000b70a:	4699      	mov	r9, r3
1000b70c:	4798      	blx	r3
		}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
1000b70e:	483c      	ldr	r0, [pc, #240]	; (1000b800 <ble_encryption_request_handler+0x138>)
1000b710:	47d0      	blx	sl
1000b712:	0163      	lsls	r3, r4, #5
1000b714:	1b1b      	subs	r3, r3, r4
1000b716:	009b      	lsls	r3, r3, #2
1000b718:	18ff      	adds	r7, r7, r3
1000b71a:	2370      	movs	r3, #112	; 0x70
1000b71c:	469b      	mov	fp, r3
1000b71e:	44bb      	add	fp, r7
1000b720:	465b      	mov	r3, fp
1000b722:	8819      	ldrh	r1, [r3, #0]
1000b724:	483a      	ldr	r0, [pc, #232]	; (1000b810 <ble_encryption_request_handler+0x148>)
1000b726:	47c8      	blx	r9
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
1000b728:	4835      	ldr	r0, [pc, #212]	; (1000b800 <ble_encryption_request_handler+0x138>)
1000b72a:	47d0      	blx	sl
1000b72c:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
1000b72e:	4839      	ldr	r0, [pc, #228]	; (1000b814 <ble_encryption_request_handler+0x14c>)
1000b730:	47c8      	blx	r9
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
1000b732:	4833      	ldr	r0, [pc, #204]	; (1000b800 <ble_encryption_request_handler+0x138>)
1000b734:	47d0      	blx	sl
1000b736:	8871      	ldrh	r1, [r6, #2]
1000b738:	4837      	ldr	r0, [pc, #220]	; (1000b818 <ble_encryption_request_handler+0x150>)
1000b73a:	47c8      	blx	r9
		DBG_LOG_DEV("The index is %d",idx);
1000b73c:	4830      	ldr	r0, [pc, #192]	; (1000b800 <ble_encryption_request_handler+0x138>)
1000b73e:	47d0      	blx	sl
1000b740:	0021      	movs	r1, r4
1000b742:	4836      	ldr	r0, [pc, #216]	; (1000b81c <ble_encryption_request_handler+0x154>)
1000b744:	47c8      	blx	r9
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000b746:	465b      	mov	r3, fp
1000b748:	881a      	ldrh	r2, [r3, #0]
1000b74a:	8873      	ldrh	r3, [r6, #2]
1000b74c:	429a      	cmp	r2, r3
1000b74e:	d12a      	bne.n	1000b7a6 <ble_encryption_request_handler+0xde>
1000b750:	e006      	b.n	1000b760 <ble_encryption_request_handler+0x98>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b752:	3401      	adds	r4, #1
1000b754:	b2e4      	uxtb	r4, r4
1000b756:	3201      	adds	r2, #1
1000b758:	337c      	adds	r3, #124	; 0x7c
1000b75a:	2c05      	cmp	r4, #5
1000b75c:	d1be      	bne.n	1000b6dc <ble_encryption_request_handler+0x14>
1000b75e:	e022      	b.n	1000b7a6 <ble_encryption_request_handler+0xde>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000b760:	0161      	lsls	r1, r4, #5
1000b762:	1b09      	subs	r1, r1, r4
1000b764:	0089      	lsls	r1, r1, #2
1000b766:	4b25      	ldr	r3, [pc, #148]	; (1000b7fc <ble_encryption_request_handler+0x134>)
1000b768:	1859      	adds	r1, r3, r1
1000b76a:	3172      	adds	r1, #114	; 0x72
1000b76c:	1d30      	adds	r0, r6, #4
1000b76e:	2208      	movs	r2, #8
1000b770:	4b2b      	ldr	r3, [pc, #172]	; (1000b820 <ble_encryption_request_handler+0x158>)
1000b772:	4798      	blx	r3
1000b774:	2800      	cmp	r0, #0
1000b776:	d116      	bne.n	1000b7a6 <ble_encryption_request_handler+0xde>
		{
			key_found = true;
			DBG_LOG_DEV("ENC-Req: Key Found");
1000b778:	4821      	ldr	r0, [pc, #132]	; (1000b800 <ble_encryption_request_handler+0x138>)
1000b77a:	4b22      	ldr	r3, [pc, #136]	; (1000b804 <ble_encryption_request_handler+0x13c>)
1000b77c:	4798      	blx	r3
1000b77e:	4829      	ldr	r0, [pc, #164]	; (1000b824 <ble_encryption_request_handler+0x15c>)
1000b780:	4b22      	ldr	r3, [pc, #136]	; (1000b80c <ble_encryption_request_handler+0x144>)
1000b782:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000b784:	0162      	lsls	r2, r4, #5
1000b786:	1b13      	subs	r3, r2, r4
1000b788:	009b      	lsls	r3, r3, #2
1000b78a:	3360      	adds	r3, #96	; 0x60
1000b78c:	491b      	ldr	r1, [pc, #108]	; (1000b7fc <ble_encryption_request_handler+0x134>)
1000b78e:	185b      	adds	r3, r3, r1
1000b790:	1b12      	subs	r2, r2, r4
1000b792:	0092      	lsls	r2, r2, #2
1000b794:	188a      	adds	r2, r1, r2
1000b796:	7d11      	ldrb	r1, [r2, #20]
1000b798:	8830      	ldrh	r0, [r6, #0]
1000b79a:	2201      	movs	r2, #1
1000b79c:	4c22      	ldr	r4, [pc, #136]	; (1000b828 <ble_encryption_request_handler+0x160>)
1000b79e:	47a0      	blx	r4
1000b7a0:	1e04      	subs	r4, r0, #0
1000b7a2:	d01e      	beq.n	1000b7e2 <ble_encryption_request_handler+0x11a>
1000b7a4:	e015      	b.n	1000b7d2 <ble_encryption_request_handler+0x10a>
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000b7a6:	4f16      	ldr	r7, [pc, #88]	; (1000b800 <ble_encryption_request_handler+0x138>)
1000b7a8:	0038      	movs	r0, r7
1000b7aa:	4e16      	ldr	r6, [pc, #88]	; (1000b804 <ble_encryption_request_handler+0x13c>)
1000b7ac:	47b0      	blx	r6
1000b7ae:	481f      	ldr	r0, [pc, #124]	; (1000b82c <ble_encryption_request_handler+0x164>)
1000b7b0:	4d16      	ldr	r5, [pc, #88]	; (1000b80c <ble_encryption_request_handler+0x144>)
1000b7b2:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000b7b4:	0038      	movs	r0, r7
1000b7b6:	47b0      	blx	r6
1000b7b8:	481d      	ldr	r0, [pc, #116]	; (1000b830 <ble_encryption_request_handler+0x168>)
1000b7ba:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000b7bc:	0163      	lsls	r3, r4, #5
1000b7be:	1b1c      	subs	r4, r3, r4
1000b7c0:	00a4      	lsls	r4, r4, #2
1000b7c2:	4b0e      	ldr	r3, [pc, #56]	; (1000b7fc <ble_encryption_request_handler+0x134>)
1000b7c4:	191c      	adds	r4, r3, r4
1000b7c6:	8920      	ldrh	r0, [r4, #8]
1000b7c8:	2105      	movs	r1, #5
1000b7ca:	4b1a      	ldr	r3, [pc, #104]	; (1000b834 <ble_encryption_request_handler+0x16c>)
1000b7cc:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000b7ce:	24e2      	movs	r4, #226	; 0xe2
1000b7d0:	e00d      	b.n	1000b7ee <ble_encryption_request_handler+0x126>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
	{
		DBG_LOG("Encryption Request Reply Failed");
1000b7d2:	480b      	ldr	r0, [pc, #44]	; (1000b800 <ble_encryption_request_handler+0x138>)
1000b7d4:	4b0b      	ldr	r3, [pc, #44]	; (1000b804 <ble_encryption_request_handler+0x13c>)
1000b7d6:	4798      	blx	r3
1000b7d8:	4817      	ldr	r0, [pc, #92]	; (1000b838 <ble_encryption_request_handler+0x170>)
1000b7da:	4b0c      	ldr	r3, [pc, #48]	; (1000b80c <ble_encryption_request_handler+0x144>)
1000b7dc:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000b7de:	2400      	movs	r4, #0
1000b7e0:	e005      	b.n	1000b7ee <ble_encryption_request_handler+0x126>
	{
		DBG_LOG("Encryption Request Reply Failed");
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
1000b7e2:	4807      	ldr	r0, [pc, #28]	; (1000b800 <ble_encryption_request_handler+0x138>)
1000b7e4:	4b07      	ldr	r3, [pc, #28]	; (1000b804 <ble_encryption_request_handler+0x13c>)
1000b7e6:	4798      	blx	r3
1000b7e8:	4814      	ldr	r0, [pc, #80]	; (1000b83c <ble_encryption_request_handler+0x174>)
1000b7ea:	4b08      	ldr	r3, [pc, #32]	; (1000b80c <ble_encryption_request_handler+0x144>)
1000b7ec:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000b7ee:	0020      	movs	r0, r4
1000b7f0:	bc1c      	pop	{r2, r3, r4}
1000b7f2:	4691      	mov	r9, r2
1000b7f4:	469a      	mov	sl, r3
1000b7f6:	46a3      	mov	fp, r4
1000b7f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b7fa:	46c0      	nop			; (mov r8, r8)
1000b7fc:	10015740 	.word	0x10015740
1000b800:	1001227c 	.word	0x1001227c
1000b804:	10010fb1 	.word	0x10010fb1
1000b808:	10013014 	.word	0x10013014
1000b80c:	10010e91 	.word	0x10010e91
1000b810:	10013040 	.word	0x10013040
1000b814:	10013054 	.word	0x10013054
1000b818:	10013068 	.word	0x10013068
1000b81c:	10013078 	.word	0x10013078
1000b820:	10010e51 	.word	0x10010e51
1000b824:	10013088 	.word	0x10013088
1000b828:	1000e2f5 	.word	0x1000e2f5
1000b82c:	1001309c 	.word	0x1001309c
1000b830:	100130d4 	.word	0x100130d4
1000b834:	1000d699 	.word	0x1000d699
1000b838:	1001312c 	.word	0x1001312c
1000b83c:	1001314c 	.word	0x1001314c

1000b840 <ble_set_ulp_mode>:
}

at_ble_status_t ble_set_ulp_mode(ble_ulp_mode_t mode)
{
	at_ble_status_t status = AT_BLE_SUCCESS;
	ulp_status = mode;
1000b840:	4b01      	ldr	r3, [pc, #4]	; (1000b848 <ble_set_ulp_mode+0x8>)
1000b842:	7018      	strb	r0, [r3, #0]
	return status;
}
1000b844:	2000      	movs	r0, #0
1000b846:	4770      	bx	lr
1000b848:	1001419b 	.word	0x1001419b

1000b84c <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000b84c:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000b84e:	2a00      	cmp	r2, #0
1000b850:	d047      	beq.n	1000b8e2 <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000b852:	2906      	cmp	r1, #6
1000b854:	d847      	bhi.n	1000b8e6 <ble_mgr_events_callback_handler+0x9a>
1000b856:	0089      	lsls	r1, r1, #2
1000b858:	4b28      	ldr	r3, [pc, #160]	; (1000b8fc <ble_mgr_events_callback_handler+0xb0>)
1000b85a:	585b      	ldr	r3, [r3, r1]
1000b85c:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000b85e:	4b28      	ldr	r3, [pc, #160]	; (1000b900 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000b860:	2405      	movs	r4, #5
1000b862:	e00a      	b.n	1000b87a <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000b864:	4b27      	ldr	r3, [pc, #156]	; (1000b904 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000b866:	2401      	movs	r4, #1
			}
			break;
1000b868:	e007      	b.n	1000b87a <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000b86a:	4b27      	ldr	r3, [pc, #156]	; (1000b908 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000b86c:	2405      	movs	r4, #5
			}
			break;
1000b86e:	e004      	b.n	1000b87a <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000b870:	4b26      	ldr	r3, [pc, #152]	; (1000b90c <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000b872:	2401      	movs	r4, #1
			}
			break;
1000b874:	e001      	b.n	1000b87a <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000b876:	4b26      	ldr	r3, [pc, #152]	; (1000b910 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000b878:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000b87a:	2800      	cmp	r0, #0
1000b87c:	d116      	bne.n	1000b8ac <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000b87e:	6819      	ldr	r1, [r3, #0]
1000b880:	2900      	cmp	r1, #0
1000b882:	d10b      	bne.n	1000b89c <ble_mgr_events_callback_handler+0x50>
1000b884:	e006      	b.n	1000b894 <ble_mgr_events_callback_handler+0x48>
1000b886:	001d      	movs	r5, r3
1000b888:	3304      	adds	r3, #4
1000b88a:	1f18      	subs	r0, r3, #4
1000b88c:	6800      	ldr	r0, [r0, #0]
1000b88e:	2800      	cmp	r0, #0
1000b890:	d106      	bne.n	1000b8a0 <ble_mgr_events_callback_handler+0x54>
1000b892:	e000      	b.n	1000b896 <ble_mgr_events_callback_handler+0x4a>
1000b894:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000b896:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000b898:	2101      	movs	r1, #1
						break;
1000b89a:	e02c      	b.n	1000b8f6 <ble_mgr_events_callback_handler+0xaa>
1000b89c:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000b89e:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000b8a0:	3101      	adds	r1, #1
1000b8a2:	b2c9      	uxtb	r1, r1
1000b8a4:	42a1      	cmp	r1, r4
1000b8a6:	d3ee      	bcc.n	1000b886 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000b8a8:	2100      	movs	r1, #0
1000b8aa:	e024      	b.n	1000b8f6 <ble_mgr_events_callback_handler+0xaa>
1000b8ac:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000b8ae:	2801      	cmp	r0, #1
1000b8b0:	d121      	bne.n	1000b8f6 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000b8b2:	6819      	ldr	r1, [r3, #0]
1000b8b4:	428a      	cmp	r2, r1
1000b8b6:	d10c      	bne.n	1000b8d2 <ble_mgr_events_callback_handler+0x86>
1000b8b8:	e006      	b.n	1000b8c8 <ble_mgr_events_callback_handler+0x7c>
1000b8ba:	001d      	movs	r5, r3
1000b8bc:	3304      	adds	r3, #4
1000b8be:	1f18      	subs	r0, r3, #4
1000b8c0:	6800      	ldr	r0, [r0, #0]
1000b8c2:	4282      	cmp	r2, r0
1000b8c4:	d107      	bne.n	1000b8d6 <ble_mgr_events_callback_handler+0x8a>
1000b8c6:	e000      	b.n	1000b8ca <ble_mgr_events_callback_handler+0x7e>
1000b8c8:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000b8ca:	2300      	movs	r3, #0
1000b8cc:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000b8ce:	2101      	movs	r1, #1
						break;
1000b8d0:	e011      	b.n	1000b8f6 <ble_mgr_events_callback_handler+0xaa>
1000b8d2:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000b8d4:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000b8d6:	3101      	adds	r1, #1
1000b8d8:	b2c9      	uxtb	r1, r1
1000b8da:	42a1      	cmp	r1, r4
1000b8dc:	d3ed      	bcc.n	1000b8ba <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000b8de:	2100      	movs	r1, #0
1000b8e0:	e009      	b.n	1000b8f6 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000b8e2:	2100      	movs	r1, #0
1000b8e4:	e007      	b.n	1000b8f6 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000b8e6:	2100      	movs	r1, #0
1000b8e8:	e005      	b.n	1000b8f6 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000b8ea:	4b0a      	ldr	r3, [pc, #40]	; (1000b914 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000b8ec:	2405      	movs	r4, #5
1000b8ee:	e7c4      	b.n	1000b87a <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000b8f0:	4b09      	ldr	r3, [pc, #36]	; (1000b918 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000b8f2:	2401      	movs	r4, #1
1000b8f4:	e7c1      	b.n	1000b87a <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000b8f6:	0008      	movs	r0, r1
1000b8f8:	bd30      	pop	{r4, r5, pc}
1000b8fa:	46c0      	nop			; (mov r8, r8)
1000b8fc:	10012a00 	.word	0x10012a00
1000b900:	1001572c 	.word	0x1001572c
1000b904:	10015728 	.word	0x10015728
1000b908:	100159b0 	.word	0x100159b0
1000b90c:	10015f64 	.word	0x10015f64
1000b910:	100159c4 	.word	0x100159c4
1000b914:	100159d8 	.word	0x100159d8
1000b918:	10015a20 	.word	0x10015a20

1000b91c <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000b91c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b91e:	465f      	mov	r7, fp
1000b920:	4656      	mov	r6, sl
1000b922:	464d      	mov	r5, r9
1000b924:	4644      	mov	r4, r8
1000b926:	b4f0      	push	{r4, r5, r6, r7}
1000b928:	b091      	sub	sp, #68	; 0x44
1000b92a:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000b92c:	2400      	movs	r4, #0
1000b92e:	4b7e      	ldr	r3, [pc, #504]	; (1000bb28 <ble_device_init+0x20c>)
1000b930:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000b932:	2207      	movs	r2, #7
1000b934:	2100      	movs	r1, #0
1000b936:	487d      	ldr	r0, [pc, #500]	; (1000bb2c <ble_device_init+0x210>)
1000b938:	4e7d      	ldr	r6, [pc, #500]	; (1000bb30 <ble_device_init+0x214>)
1000b93a:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000b93c:	2212      	movs	r2, #18
1000b93e:	2100      	movs	r1, #0
1000b940:	487c      	ldr	r0, [pc, #496]	; (1000bb34 <ble_device_init+0x218>)
1000b942:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000b944:	4a7c      	ldr	r2, [pc, #496]	; (1000bb38 <ble_device_init+0x21c>)
1000b946:	2100      	movs	r1, #0
1000b948:	487c      	ldr	r0, [pc, #496]	; (1000bb3c <ble_device_init+0x220>)
1000b94a:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000b94c:	4b7c      	ldr	r3, [pc, #496]	; (1000bb40 <ble_device_init+0x224>)
1000b94e:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000b950:	22cd      	movs	r2, #205	; 0xcd
1000b952:	0092      	lsls	r2, r2, #2
1000b954:	2100      	movs	r1, #0
1000b956:	487b      	ldr	r0, [pc, #492]	; (1000bb44 <ble_device_init+0x228>)
1000b958:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000b95a:	4b7b      	ldr	r3, [pc, #492]	; (1000bb48 <ble_device_init+0x22c>)
1000b95c:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000b95e:	2283      	movs	r2, #131	; 0x83
1000b960:	0092      	lsls	r2, r2, #2
1000b962:	2100      	movs	r1, #0
1000b964:	4879      	ldr	r0, [pc, #484]	; (1000bb4c <ble_device_init+0x230>)
1000b966:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000b968:	4b79      	ldr	r3, [pc, #484]	; (1000bb50 <ble_device_init+0x234>)
1000b96a:	469b      	mov	fp, r3
1000b96c:	2380      	movs	r3, #128	; 0x80
1000b96e:	00db      	lsls	r3, r3, #3
1000b970:	469a      	mov	sl, r3
1000b972:	001a      	movs	r2, r3
1000b974:	2100      	movs	r1, #0
1000b976:	4658      	mov	r0, fp
1000b978:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000b97a:	4b76      	ldr	r3, [pc, #472]	; (1000bb54 <ble_device_init+0x238>)
1000b97c:	4699      	mov	r9, r3
1000b97e:	2380      	movs	r3, #128	; 0x80
1000b980:	015b      	lsls	r3, r3, #5
1000b982:	4698      	mov	r8, r3
1000b984:	001a      	movs	r2, r3
1000b986:	2100      	movs	r1, #0
1000b988:	4648      	mov	r0, r9
1000b98a:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000b98c:	4f72      	ldr	r7, [pc, #456]	; (1000bb58 <ble_device_init+0x23c>)
1000b98e:	221c      	movs	r2, #28
1000b990:	2100      	movs	r1, #0
1000b992:	0038      	movs	r0, r7
1000b994:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000b996:	465b      	mov	r3, fp
1000b998:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000b99a:	4653      	mov	r3, sl
1000b99c:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000b99e:	464b      	mov	r3, r9
1000b9a0:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000b9a2:	4643      	mov	r3, r8
1000b9a4:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000b9a6:	4b6d      	ldr	r3, [pc, #436]	; (1000bb5c <ble_device_init+0x240>)
1000b9a8:	601c      	str	r4, [r3, #0]
1000b9aa:	605c      	str	r4, [r3, #4]
1000b9ac:	609c      	str	r4, [r3, #8]
1000b9ae:	60dc      	str	r4, [r3, #12]
1000b9b0:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000b9b2:	4b6b      	ldr	r3, [pc, #428]	; (1000bb60 <ble_device_init+0x244>)
1000b9b4:	601c      	str	r4, [r3, #0]
1000b9b6:	605c      	str	r4, [r3, #4]
1000b9b8:	609c      	str	r4, [r3, #8]
1000b9ba:	60dc      	str	r4, [r3, #12]
1000b9bc:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000b9be:	4b69      	ldr	r3, [pc, #420]	; (1000bb64 <ble_device_init+0x248>)
1000b9c0:	601c      	str	r4, [r3, #0]
1000b9c2:	605c      	str	r4, [r3, #4]
1000b9c4:	609c      	str	r4, [r3, #8]
1000b9c6:	60dc      	str	r4, [r3, #12]
1000b9c8:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000b9ca:	4b67      	ldr	r3, [pc, #412]	; (1000bb68 <ble_device_init+0x24c>)
1000b9cc:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000b9ce:	4b67      	ldr	r3, [pc, #412]	; (1000bb6c <ble_device_init+0x250>)
1000b9d0:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000b9d2:	4b67      	ldr	r3, [pc, #412]	; (1000bb70 <ble_device_init+0x254>)
1000b9d4:	601c      	str	r4, [r3, #0]
1000b9d6:	605c      	str	r4, [r3, #4]
1000b9d8:	609c      	str	r4, [r3, #8]
1000b9da:	60dc      	str	r4, [r3, #12]
1000b9dc:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000b9de:	4b65      	ldr	r3, [pc, #404]	; (1000bb74 <ble_device_init+0x258>)
1000b9e0:	601c      	str	r4, [r3, #0]
1000b9e2:	4c65      	ldr	r4, [pc, #404]	; (1000bb78 <ble_device_init+0x25c>)
1000b9e4:	239b      	movs	r3, #155	; 0x9b
1000b9e6:	009b      	lsls	r3, r3, #2
1000b9e8:	4698      	mov	r8, r3
1000b9ea:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000b9ec:	4f50      	ldr	r7, [pc, #320]	; (1000bb30 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000b9ee:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000b9f0:	227c      	movs	r2, #124	; 0x7c
1000b9f2:	2100      	movs	r1, #0
1000b9f4:	0020      	movs	r0, r4
1000b9f6:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000b9f8:	0023      	movs	r3, r4
1000b9fa:	335e      	adds	r3, #94	; 0x5e
1000b9fc:	2200      	movs	r2, #0
1000b9fe:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000ba00:	7626      	strb	r6, [r4, #24]
1000ba02:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ba04:	45a0      	cmp	r8, r4
1000ba06:	d1f3      	bne.n	1000b9f0 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000ba08:	4b5c      	ldr	r3, [pc, #368]	; (1000bb7c <ble_device_init+0x260>)
1000ba0a:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000ba0c:	4c52      	ldr	r4, [pc, #328]	; (1000bb58 <ble_device_init+0x23c>)
1000ba0e:	4b4a      	ldr	r3, [pc, #296]	; (1000bb38 <ble_device_init+0x21c>)
1000ba10:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000ba12:	4b4a      	ldr	r3, [pc, #296]	; (1000bb3c <ble_device_init+0x220>)
1000ba14:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("[ble_init]\t\t\tInitializing SAMB11");
1000ba16:	485a      	ldr	r0, [pc, #360]	; (1000bb80 <ble_device_init+0x264>)
1000ba18:	4b5a      	ldr	r3, [pc, #360]	; (1000bb84 <ble_device_init+0x268>)
1000ba1a:	4798      	blx	r3
1000ba1c:	485a      	ldr	r0, [pc, #360]	; (1000bb88 <ble_device_init+0x26c>)
1000ba1e:	4b5b      	ldr	r3, [pc, #364]	; (1000bb8c <ble_device_init+0x270>)
1000ba20:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000ba22:	0020      	movs	r0, r4
1000ba24:	4b5a      	ldr	r3, [pc, #360]	; (1000bb90 <ble_device_init+0x274>)
1000ba26:	4798      	blx	r3
1000ba28:	2800      	cmp	r0, #0
1000ba2a:	d00b      	beq.n	1000ba44 <ble_device_init+0x128>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000ba2c:	4e54      	ldr	r6, [pc, #336]	; (1000bb80 <ble_device_init+0x264>)
1000ba2e:	0030      	movs	r0, r6
1000ba30:	4d54      	ldr	r5, [pc, #336]	; (1000bb84 <ble_device_init+0x268>)
1000ba32:	47a8      	blx	r5
1000ba34:	4857      	ldr	r0, [pc, #348]	; (1000bb94 <ble_device_init+0x278>)
1000ba36:	4c55      	ldr	r4, [pc, #340]	; (1000bb8c <ble_device_init+0x270>)
1000ba38:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000ba3a:	0030      	movs	r0, r6
1000ba3c:	47a8      	blx	r5
1000ba3e:	4856      	ldr	r0, [pc, #344]	; (1000bb98 <ble_device_init+0x27c>)
1000ba40:	47a0      	blx	r4
1000ba42:	e7fe      	b.n	1000ba42 <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000ba44:	4a55      	ldr	r2, [pc, #340]	; (1000bb9c <ble_device_init+0x280>)
1000ba46:	2100      	movs	r1, #0
1000ba48:	2000      	movs	r0, #0
1000ba4a:	4c55      	ldr	r4, [pc, #340]	; (1000bba0 <ble_device_init+0x284>)
1000ba4c:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000ba4e:	4a55      	ldr	r2, [pc, #340]	; (1000bba4 <ble_device_init+0x288>)
1000ba50:	2102      	movs	r1, #2
1000ba52:	2000      	movs	r0, #0
1000ba54:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000ba56:	2109      	movs	r1, #9
1000ba58:	4853      	ldr	r0, [pc, #332]	; (1000bba8 <ble_device_init+0x28c>)
1000ba5a:	4b54      	ldr	r3, [pc, #336]	; (1000bbac <ble_device_init+0x290>)
1000ba5c:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000ba5e:	2800      	cmp	r0, #0
1000ba60:	d005      	beq.n	1000ba6e <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000ba62:	4847      	ldr	r0, [pc, #284]	; (1000bb80 <ble_device_init+0x264>)
1000ba64:	4b47      	ldr	r3, [pc, #284]	; (1000bb84 <ble_device_init+0x268>)
1000ba66:	4798      	blx	r3
1000ba68:	4851      	ldr	r0, [pc, #324]	; (1000bbb0 <ble_device_init+0x294>)
1000ba6a:	4b48      	ldr	r3, [pc, #288]	; (1000bb8c <ble_device_init+0x270>)
1000ba6c:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000ba6e:	2207      	movs	r2, #7
1000ba70:	4950      	ldr	r1, [pc, #320]	; (1000bbb4 <ble_device_init+0x298>)
1000ba72:	3108      	adds	r1, #8
1000ba74:	a804      	add	r0, sp, #16
1000ba76:	4b50      	ldr	r3, [pc, #320]	; (1000bbb8 <ble_device_init+0x29c>)
1000ba78:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000ba7a:	2226      	movs	r2, #38	; 0x26
1000ba7c:	2100      	movs	r1, #0
1000ba7e:	a806      	add	r0, sp, #24
1000ba80:	4b2b      	ldr	r3, [pc, #172]	; (1000bb30 <ble_device_init+0x214>)
1000ba82:	4798      	blx	r3
	
	if (addr == NULL)
1000ba84:	2d00      	cmp	r5, #0
1000ba86:	d10c      	bne.n	1000baa2 <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000ba88:	a804      	add	r0, sp, #16
1000ba8a:	4b4c      	ldr	r3, [pc, #304]	; (1000bbbc <ble_device_init+0x2a0>)
1000ba8c:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000ba8e:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000ba90:	2800      	cmp	r0, #0
1000ba92:	d006      	beq.n	1000baa2 <ble_device_init+0x186>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000ba94:	483a      	ldr	r0, [pc, #232]	; (1000bb80 <ble_device_init+0x264>)
1000ba96:	4b3b      	ldr	r3, [pc, #236]	; (1000bb84 <ble_device_init+0x268>)
1000ba98:	4798      	blx	r3
1000ba9a:	4849      	ldr	r0, [pc, #292]	; (1000bbc0 <ble_device_init+0x2a4>)
1000ba9c:	4b3b      	ldr	r3, [pc, #236]	; (1000bb8c <ble_device_init+0x270>)
1000ba9e:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000baa0:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("[ble_set_dev_config]\t\tBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000baa2:	4837      	ldr	r0, [pc, #220]	; (1000bb80 <ble_device_init+0x264>)
1000baa4:	4b37      	ldr	r3, [pc, #220]	; (1000bb84 <ble_device_init+0x268>)
1000baa6:	4798      	blx	r3
1000baa8:	792b      	ldrb	r3, [r5, #4]
1000baaa:	796a      	ldrb	r2, [r5, #5]
1000baac:	79a9      	ldrb	r1, [r5, #6]
1000baae:	7828      	ldrb	r0, [r5, #0]
1000bab0:	9003      	str	r0, [sp, #12]
1000bab2:	7868      	ldrb	r0, [r5, #1]
1000bab4:	9002      	str	r0, [sp, #8]
1000bab6:	78a8      	ldrb	r0, [r5, #2]
1000bab8:	9001      	str	r0, [sp, #4]
1000baba:	78e8      	ldrb	r0, [r5, #3]
1000babc:	9000      	str	r0, [sp, #0]
1000babe:	4841      	ldr	r0, [pc, #260]	; (1000bbc4 <ble_device_init+0x2a8>)
1000bac0:	4c32      	ldr	r4, [pc, #200]	; (1000bb8c <ble_device_init+0x270>)
1000bac2:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000bac4:	ac06      	add	r4, sp, #24
1000bac6:	230a      	movs	r3, #10
1000bac8:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000baca:	4b3f      	ldr	r3, [pc, #252]	; (1000bbc8 <ble_device_init+0x2ac>)
1000bacc:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000bace:	2207      	movs	r2, #7
1000bad0:	0029      	movs	r1, r5
1000bad2:	a807      	add	r0, sp, #28
1000bad4:	4b38      	ldr	r3, [pc, #224]	; (1000bbb8 <ble_device_init+0x29c>)
1000bad6:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000bad8:	2300      	movs	r3, #0
1000bada:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000badc:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000bade:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000bae0:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000bae2:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000bae4:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000bae6:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000bae8:	2380      	movs	r3, #128	; 0x80
1000baea:	009b      	lsls	r3, r3, #2
1000baec:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000baee:	0020      	movs	r0, r4
1000baf0:	4b36      	ldr	r3, [pc, #216]	; (1000bbcc <ble_device_init+0x2b0>)
1000baf2:	4798      	blx	r3
1000baf4:	2800      	cmp	r0, #0
1000baf6:	d005      	beq.n	1000bb04 <ble_device_init+0x1e8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000baf8:	4821      	ldr	r0, [pc, #132]	; (1000bb80 <ble_device_init+0x264>)
1000bafa:	4b22      	ldr	r3, [pc, #136]	; (1000bb84 <ble_device_init+0x268>)
1000bafc:	4798      	blx	r3
1000bafe:	4834      	ldr	r0, [pc, #208]	; (1000bbd0 <ble_device_init+0x2b4>)
1000bb00:	4b22      	ldr	r3, [pc, #136]	; (1000bb8c <ble_device_init+0x270>)
1000bb02:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000bb04:	0028      	movs	r0, r5
1000bb06:	4b33      	ldr	r3, [pc, #204]	; (1000bbd4 <ble_device_init+0x2b8>)
1000bb08:	4798      	blx	r3
1000bb0a:	2800      	cmp	r0, #0
1000bb0c:	d005      	beq.n	1000bb1a <ble_device_init+0x1fe>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000bb0e:	481c      	ldr	r0, [pc, #112]	; (1000bb80 <ble_device_init+0x264>)
1000bb10:	4b1c      	ldr	r3, [pc, #112]	; (1000bb84 <ble_device_init+0x268>)
1000bb12:	4798      	blx	r3
1000bb14:	4830      	ldr	r0, [pc, #192]	; (1000bbd8 <ble_device_init+0x2bc>)
1000bb16:	4b1d      	ldr	r3, [pc, #116]	; (1000bb8c <ble_device_init+0x270>)
1000bb18:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000bb1a:	b011      	add	sp, #68	; 0x44
1000bb1c:	bc3c      	pop	{r2, r3, r4, r5}
1000bb1e:	4690      	mov	r8, r2
1000bb20:	4699      	mov	r9, r3
1000bb22:	46a2      	mov	sl, r4
1000bb24:	46ab      	mov	fp, r5
1000bb26:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bb28:	1001418c 	.word	0x1001418c
1000bb2c:	10014194 	.word	0x10014194
1000bb30:	10010e81 	.word	0x10010e81
1000bb34:	100159ec 	.word	0x100159ec
1000bb38:	000004e2 	.word	0x000004e2
1000bb3c:	10013cac 	.word	0x10013cac
1000bb40:	10014190 	.word	0x10014190
1000bb44:	10015a24 	.word	0x10015a24
1000bb48:	10015a1c 	.word	0x10015a1c
1000bb4c:	10015d58 	.word	0x10015d58
1000bb50:	100138ac 	.word	0x100138ac
1000bb54:	1001419c 	.word	0x1001419c
1000bb58:	10015a00 	.word	0x10015a00
1000bb5c:	100159c4 	.word	0x100159c4
1000bb60:	100159d8 	.word	0x100159d8
1000bb64:	1001572c 	.word	0x1001572c
1000bb68:	10015a20 	.word	0x10015a20
1000bb6c:	10015728 	.word	0x10015728
1000bb70:	100159b0 	.word	0x100159b0
1000bb74:	10015f64 	.word	0x10015f64
1000bb78:	10015740 	.word	0x10015740
1000bb7c:	100159ac 	.word	0x100159ac
1000bb80:	1001227c 	.word	0x1001227c
1000bb84:	10010fb1 	.word	0x10010fb1
1000bb88:	10013168 	.word	0x10013168
1000bb8c:	10010e91 	.word	0x10010e91
1000bb90:	1000d2a5 	.word	0x1000d2a5
1000bb94:	1001318c 	.word	0x1001318c
1000bb98:	100131b8 	.word	0x100131b8
1000bb9c:	10013564 	.word	0x10013564
1000bba0:	1000b84d 	.word	0x1000b84d
1000bba4:	10012b1c 	.word	0x10012b1c
1000bba8:	10013200 	.word	0x10013200
1000bbac:	1000d1bd 	.word	0x1000d1bd
1000bbb0:	1001320c 	.word	0x1001320c
1000bbb4:	10012b0c 	.word	0x10012b0c
1000bbb8:	10010e6f 	.word	0x10010e6f
1000bbbc:	1000d1f1 	.word	0x1000d1f1
1000bbc0:	10013224 	.word	0x10013224
1000bbc4:	10013250 	.word	0x10013250
1000bbc8:	00003a98 	.word	0x00003a98
1000bbcc:	1000d215 	.word	0x1000d215
1000bbd0:	100132a0 	.word	0x100132a0
1000bbd4:	1000d459 	.word	0x1000d459
1000bbd8:	100132dc 	.word	0x100132dc

1000bbdc <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000bbdc:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000bbde:	2200      	movs	r2, #0
1000bbe0:	2100      	movs	r1, #0
1000bbe2:	4b0a      	ldr	r3, [pc, #40]	; (1000bc0c <ble_send_slave_sec_request+0x30>)
1000bbe4:	4798      	blx	r3
1000bbe6:	1e04      	subs	r4, r0, #0
1000bbe8:	d106      	bne.n	1000bbf8 <ble_send_slave_sec_request+0x1c>
		{
			DBG_LOG_DEV("Slave security request successful");
1000bbea:	4809      	ldr	r0, [pc, #36]	; (1000bc10 <ble_send_slave_sec_request+0x34>)
1000bbec:	4b09      	ldr	r3, [pc, #36]	; (1000bc14 <ble_send_slave_sec_request+0x38>)
1000bbee:	4798      	blx	r3
1000bbf0:	4809      	ldr	r0, [pc, #36]	; (1000bc18 <ble_send_slave_sec_request+0x3c>)
1000bbf2:	4b0a      	ldr	r3, [pc, #40]	; (1000bc1c <ble_send_slave_sec_request+0x40>)
1000bbf4:	4798      	blx	r3
			return AT_BLE_SUCCESS;
1000bbf6:	e006      	b.n	1000bc06 <ble_send_slave_sec_request+0x2a>
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000bbf8:	4805      	ldr	r0, [pc, #20]	; (1000bc10 <ble_send_slave_sec_request+0x34>)
1000bbfa:	4b06      	ldr	r3, [pc, #24]	; (1000bc14 <ble_send_slave_sec_request+0x38>)
1000bbfc:	4798      	blx	r3
1000bbfe:	4808      	ldr	r0, [pc, #32]	; (1000bc20 <ble_send_slave_sec_request+0x44>)
1000bc00:	4b06      	ldr	r3, [pc, #24]	; (1000bc1c <ble_send_slave_sec_request+0x40>)
1000bc02:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000bc04:	24e2      	movs	r4, #226	; 0xe2
}
1000bc06:	0020      	movs	r0, r4
1000bc08:	bd10      	pop	{r4, pc}
1000bc0a:	46c0      	nop			; (mov r8, r8)
1000bc0c:	1000e23d 	.word	0x1000e23d
1000bc10:	1001227c 	.word	0x1001227c
1000bc14:	10010fb1 	.word	0x10010fb1
1000bc18:	1001332c 	.word	0x1001332c
1000bc1c:	10010e91 	.word	0x10010e91
1000bc20:	10013350 	.word	0x10013350

1000bc24 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000bc24:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bc26:	465f      	mov	r7, fp
1000bc28:	464e      	mov	r6, r9
1000bc2a:	4645      	mov	r5, r8
1000bc2c:	b4e0      	push	{r5, r6, r7}
1000bc2e:	b09a      	sub	sp, #104	; 0x68
1000bc30:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000bc32:	7a86      	ldrb	r6, [r0, #10]
1000bc34:	2e00      	cmp	r6, #0
1000bc36:	d000      	beq.n	1000bc3a <ble_connected_state_handler+0x16>
1000bc38:	e0cc      	b.n	1000bdd4 <ble_connected_state_handler+0x1b0>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000bc3a:	4878      	ldr	r0, [pc, #480]	; (1000be1c <ble_connected_state_handler+0x1f8>)
1000bc3c:	4f78      	ldr	r7, [pc, #480]	; (1000be20 <ble_connected_state_handler+0x1fc>)
1000bc3e:	47b8      	blx	r7
1000bc40:	792b      	ldrb	r3, [r5, #4]
1000bc42:	796a      	ldrb	r2, [r5, #5]
1000bc44:	79a9      	ldrb	r1, [r5, #6]
1000bc46:	7868      	ldrb	r0, [r5, #1]
1000bc48:	9002      	str	r0, [sp, #8]
1000bc4a:	78a8      	ldrb	r0, [r5, #2]
1000bc4c:	9001      	str	r0, [sp, #4]
1000bc4e:	78e8      	ldrb	r0, [r5, #3]
1000bc50:	9000      	str	r0, [sp, #0]
1000bc52:	4874      	ldr	r0, [pc, #464]	; (1000be24 <ble_connected_state_handler+0x200>)
1000bc54:	4c74      	ldr	r4, [pc, #464]	; (1000be28 <ble_connected_state_handler+0x204>)
1000bc56:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000bc58:	4870      	ldr	r0, [pc, #448]	; (1000be1c <ble_connected_state_handler+0x1f8>)
1000bc5a:	47b8      	blx	r7
1000bc5c:	8929      	ldrh	r1, [r5, #8]
1000bc5e:	4873      	ldr	r0, [pc, #460]	; (1000be2c <ble_connected_state_handler+0x208>)
1000bc60:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000bc62:	2212      	movs	r2, #18
1000bc64:	0029      	movs	r1, r5
1000bc66:	4872      	ldr	r0, [pc, #456]	; (1000be30 <ble_connected_state_handler+0x20c>)
1000bc68:	4b72      	ldr	r3, [pc, #456]	; (1000be34 <ble_connected_state_handler+0x210>)
1000bc6a:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000bc6c:	9504      	str	r5, [sp, #16]
1000bc6e:	2207      	movs	r2, #7
1000bc70:	0029      	movs	r1, r5
1000bc72:	4871      	ldr	r0, [pc, #452]	; (1000be38 <ble_connected_state_handler+0x214>)
1000bc74:	4b71      	ldr	r3, [pc, #452]	; (1000be3c <ble_connected_state_handler+0x218>)
1000bc76:	4798      	blx	r3
1000bc78:	2800      	cmp	r0, #0
1000bc7a:	d100      	bne.n	1000bc7e <ble_connected_state_handler+0x5a>
1000bc7c:	e0b3      	b.n	1000bde6 <ble_connected_state_handler+0x1c2>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000bc7e:	782b      	ldrb	r3, [r5, #0]
1000bc80:	2b02      	cmp	r3, #2
1000bc82:	d000      	beq.n	1000bc86 <ble_connected_state_handler+0x62>
1000bc84:	e0af      	b.n	1000bde6 <ble_connected_state_handler+0x1c2>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000bc86:	2250      	movs	r2, #80	; 0x50
1000bc88:	2100      	movs	r1, #0
1000bc8a:	a806      	add	r0, sp, #24
1000bc8c:	4b6c      	ldr	r3, [pc, #432]	; (1000be40 <ble_connected_state_handler+0x21c>)
1000bc8e:	4798      	blx	r3
1000bc90:	4f6c      	ldr	r7, [pc, #432]	; (1000be44 <ble_connected_state_handler+0x220>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000bc92:	2300      	movs	r3, #0
1000bc94:	e00b      	b.n	1000bcae <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000bc96:	1c59      	adds	r1, r3, #1
1000bc98:	7814      	ldrb	r4, [r2, #0]
1000bc9a:	a806      	add	r0, sp, #24
1000bc9c:	54c4      	strb	r4, [r0, r3]
1000bc9e:	3201      	adds	r2, #1
1000bca0:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000bca2:	42b3      	cmp	r3, r6
1000bca4:	d1f7      	bne.n	1000bc96 <ble_connected_state_handler+0x72>
1000bca6:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000bca8:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000bcaa:	2b50      	cmp	r3, #80	; 0x50
1000bcac:	d004      	beq.n	1000bcb8 <ble_connected_state_handler+0x94>
1000bcae:	001e      	movs	r6, r3
1000bcb0:	3610      	adds	r6, #16
1000bcb2:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000bcb4:	003a      	movs	r2, r7
1000bcb6:	e7ee      	b.n	1000bc96 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000bcb8:	aa06      	add	r2, sp, #24
1000bcba:	0029      	movs	r1, r5
1000bcbc:	2005      	movs	r0, #5
1000bcbe:	4b62      	ldr	r3, [pc, #392]	; (1000be48 <ble_connected_state_handler+0x224>)
1000bcc0:	4798      	blx	r3
1000bcc2:	1e06      	subs	r6, r0, #0
1000bcc4:	d106      	bne.n	1000bcd4 <ble_connected_state_handler+0xb0>
					{
						DBG_LOG_DEV("Resolving Random address success**");
1000bcc6:	4855      	ldr	r0, [pc, #340]	; (1000be1c <ble_connected_state_handler+0x1f8>)
1000bcc8:	4b55      	ldr	r3, [pc, #340]	; (1000be20 <ble_connected_state_handler+0x1fc>)
1000bcca:	4798      	blx	r3
1000bccc:	485f      	ldr	r0, [pc, #380]	; (1000be4c <ble_connected_state_handler+0x228>)
1000bcce:	4b56      	ldr	r3, [pc, #344]	; (1000be28 <ble_connected_state_handler+0x204>)
1000bcd0:	4798      	blx	r3
						return AT_BLE_SUCCESS;
1000bcd2:	e09c      	b.n	1000be0e <ble_connected_state_handler+0x1ea>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000bcd4:	4851      	ldr	r0, [pc, #324]	; (1000be1c <ble_connected_state_handler+0x1f8>)
1000bcd6:	4b52      	ldr	r3, [pc, #328]	; (1000be20 <ble_connected_state_handler+0x1fc>)
1000bcd8:	4798      	blx	r3
1000bcda:	485d      	ldr	r0, [pc, #372]	; (1000be50 <ble_connected_state_handler+0x22c>)
1000bcdc:	4b52      	ldr	r3, [pc, #328]	; (1000be28 <ble_connected_state_handler+0x204>)
1000bcde:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000bce0:	26e2      	movs	r6, #226	; 0xe2
1000bce2:	e094      	b.n	1000be0e <ble_connected_state_handler+0x1ea>
1000bce4:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000bce6:	9405      	str	r4, [sp, #20]
1000bce8:	2207      	movs	r2, #7
1000bcea:	9904      	ldr	r1, [sp, #16]
1000bcec:	4648      	mov	r0, r9
1000bcee:	47d8      	blx	fp
1000bcf0:	2800      	cmp	r0, #0
1000bcf2:	d109      	bne.n	1000bd08 <ble_connected_state_handler+0xe4>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000bcf4:	9a05      	ldr	r2, [sp, #20]
1000bcf6:	0153      	lsls	r3, r2, #5
1000bcf8:	1a9b      	subs	r3, r3, r2
1000bcfa:	009a      	lsls	r2, r3, #2
1000bcfc:	4b55      	ldr	r3, [pc, #340]	; (1000be54 <ble_connected_state_handler+0x230>)
1000bcfe:	189b      	adds	r3, r3, r2
1000bd00:	335e      	adds	r3, #94	; 0x5e
1000bd02:	2202      	movs	r2, #2
1000bd04:	701a      	strb	r2, [r3, #0]
1000bd06:	e02b      	b.n	1000bd60 <ble_connected_state_handler+0x13c>
1000bd08:	3401      	adds	r4, #1
1000bd0a:	237c      	movs	r3, #124	; 0x7c
1000bd0c:	469c      	mov	ip, r3
1000bd0e:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bd10:	2c05      	cmp	r4, #5
1000bd12:	d1e7      	bne.n	1000bce4 <ble_connected_state_handler+0xc0>
1000bd14:	e072      	b.n	1000bdfc <ble_connected_state_handler+0x1d8>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000bd16:	001c      	movs	r4, r3
1000bd18:	7811      	ldrb	r1, [r2, #0]
1000bd1a:	2900      	cmp	r1, #0
1000bd1c:	d11a      	bne.n	1000bd54 <ble_connected_state_handler+0x130>
1000bd1e:	e001      	b.n	1000bd24 <ble_connected_state_handler+0x100>
1000bd20:	2400      	movs	r4, #0
1000bd22:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000bd24:	0163      	lsls	r3, r4, #5
1000bd26:	4699      	mov	r9, r3
1000bd28:	1b18      	subs	r0, r3, r4
1000bd2a:	0080      	lsls	r0, r0, #2
1000bd2c:	4b49      	ldr	r3, [pc, #292]	; (1000be54 <ble_connected_state_handler+0x230>)
1000bd2e:	4698      	mov	r8, r3
1000bd30:	4440      	add	r0, r8
1000bd32:	2212      	movs	r2, #18
1000bd34:	0029      	movs	r1, r5
1000bd36:	4b3f      	ldr	r3, [pc, #252]	; (1000be34 <ble_connected_state_handler+0x210>)
1000bd38:	4798      	blx	r3
						ble_device_count++;
1000bd3a:	4a47      	ldr	r2, [pc, #284]	; (1000be58 <ble_connected_state_handler+0x234>)
1000bd3c:	7813      	ldrb	r3, [r2, #0]
1000bd3e:	3301      	adds	r3, #1
1000bd40:	b2db      	uxtb	r3, r3
1000bd42:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000bd44:	464b      	mov	r3, r9
1000bd46:	1b1b      	subs	r3, r3, r4
1000bd48:	009b      	lsls	r3, r3, #2
1000bd4a:	4443      	add	r3, r8
1000bd4c:	335e      	adds	r3, #94	; 0x5e
1000bd4e:	2202      	movs	r2, #2
1000bd50:	701a      	strb	r2, [r3, #0]
						break;
1000bd52:	e005      	b.n	1000bd60 <ble_connected_state_handler+0x13c>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bd54:	1c79      	adds	r1, r7, #1
1000bd56:	b2cf      	uxtb	r7, r1
1000bd58:	3301      	adds	r3, #1
1000bd5a:	327c      	adds	r2, #124	; 0x7c
1000bd5c:	2f05      	cmp	r7, #5
1000bd5e:	d1da      	bne.n	1000bd16 <ble_connected_state_handler+0xf2>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000bd60:	2207      	movs	r2, #7
1000bd62:	0029      	movs	r1, r5
1000bd64:	4834      	ldr	r0, [pc, #208]	; (1000be38 <ble_connected_state_handler+0x214>)
1000bd66:	4b35      	ldr	r3, [pc, #212]	; (1000be3c <ble_connected_state_handler+0x218>)
1000bd68:	4798      	blx	r3
1000bd6a:	2800      	cmp	r0, #0
1000bd6c:	d10c      	bne.n	1000bd88 <ble_connected_state_handler+0x164>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000bd6e:	017b      	lsls	r3, r7, #5
1000bd70:	1bdb      	subs	r3, r3, r7
1000bd72:	009b      	lsls	r3, r3, #2
1000bd74:	4a37      	ldr	r2, [pc, #220]	; (1000be54 <ble_connected_state_handler+0x230>)
1000bd76:	18d3      	adds	r3, r2, r3
1000bd78:	2205      	movs	r2, #5
1000bd7a:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000bd7c:	3202      	adds	r2, #2
1000bd7e:	2100      	movs	r1, #0
1000bd80:	482d      	ldr	r0, [pc, #180]	; (1000be38 <ble_connected_state_handler+0x214>)
1000bd82:	4b2f      	ldr	r3, [pc, #188]	; (1000be40 <ble_connected_state_handler+0x21c>)
1000bd84:	4798      	blx	r3
1000bd86:	e042      	b.n	1000be0e <ble_connected_state_handler+0x1ea>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000bd88:	4b32      	ldr	r3, [pc, #200]	; (1000be54 <ble_connected_state_handler+0x230>)
1000bd8a:	4698      	mov	r8, r3
1000bd8c:	017c      	lsls	r4, r7, #5
1000bd8e:	1be3      	subs	r3, r4, r7
1000bd90:	009b      	lsls	r3, r3, #2
1000bd92:	4443      	add	r3, r8
1000bd94:	220a      	movs	r2, #10
1000bd96:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000bd98:	3a03      	subs	r2, #3
1000bd9a:	2100      	movs	r1, #0
1000bd9c:	4826      	ldr	r0, [pc, #152]	; (1000be38 <ble_connected_state_handler+0x214>)
1000bd9e:	4b28      	ldr	r3, [pc, #160]	; (1000be40 <ble_connected_state_handler+0x21c>)
1000bda0:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000bda2:	1be4      	subs	r4, r4, r7
1000bda4:	00a4      	lsls	r4, r4, #2
1000bda6:	4444      	add	r4, r8
1000bda8:	7ca3      	ldrb	r3, [r4, #18]
1000bdaa:	2b0a      	cmp	r3, #10
1000bdac:	d12f      	bne.n	1000be0e <ble_connected_state_handler+0x1ea>
1000bdae:	e00d      	b.n	1000bdcc <ble_connected_state_handler+0x1a8>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000bdb0:	481a      	ldr	r0, [pc, #104]	; (1000be1c <ble_connected_state_handler+0x1f8>)
1000bdb2:	4b1b      	ldr	r3, [pc, #108]	; (1000be20 <ble_connected_state_handler+0x1fc>)
1000bdb4:	4798      	blx	r3
1000bdb6:	4b28      	ldr	r3, [pc, #160]	; (1000be58 <ble_connected_state_handler+0x234>)
1000bdb8:	7819      	ldrb	r1, [r3, #0]
1000bdba:	b2c9      	uxtb	r1, r1
1000bdbc:	4827      	ldr	r0, [pc, #156]	; (1000be5c <ble_connected_state_handler+0x238>)
1000bdbe:	4b1a      	ldr	r3, [pc, #104]	; (1000be28 <ble_connected_state_handler+0x204>)
1000bdc0:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000bdc2:	8928      	ldrh	r0, [r5, #8]
1000bdc4:	2113      	movs	r1, #19
1000bdc6:	4b26      	ldr	r3, [pc, #152]	; (1000be60 <ble_connected_state_handler+0x23c>)
1000bdc8:	4798      	blx	r3
1000bdca:	e020      	b.n	1000be0e <ble_connected_state_handler+0x1ea>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000bdcc:	8928      	ldrh	r0, [r5, #8]
1000bdce:	4b25      	ldr	r3, [pc, #148]	; (1000be64 <ble_connected_state_handler+0x240>)
1000bdd0:	4798      	blx	r3
1000bdd2:	e01c      	b.n	1000be0e <ble_connected_state_handler+0x1ea>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000bdd4:	4811      	ldr	r0, [pc, #68]	; (1000be1c <ble_connected_state_handler+0x1f8>)
1000bdd6:	4b12      	ldr	r3, [pc, #72]	; (1000be20 <ble_connected_state_handler+0x1fc>)
1000bdd8:	4798      	blx	r3
1000bdda:	7aa9      	ldrb	r1, [r5, #10]
1000bddc:	4822      	ldr	r0, [pc, #136]	; (1000be68 <ble_connected_state_handler+0x244>)
1000bdde:	4b12      	ldr	r3, [pc, #72]	; (1000be28 <ble_connected_state_handler+0x204>)
1000bde0:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000bde2:	2600      	movs	r6, #0
1000bde4:	e013      	b.n	1000be0e <ble_connected_state_handler+0x1ea>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000bde6:	4b1c      	ldr	r3, [pc, #112]	; (1000be58 <ble_connected_state_handler+0x234>)
1000bde8:	781b      	ldrb	r3, [r3, #0]
1000bdea:	b2db      	uxtb	r3, r3
1000bdec:	2b04      	cmp	r3, #4
1000bdee:	d8df      	bhi.n	1000bdb0 <ble_connected_state_handler+0x18c>
1000bdf0:	4b18      	ldr	r3, [pc, #96]	; (1000be54 <ble_connected_state_handler+0x230>)
1000bdf2:	4699      	mov	r9, r3
1000bdf4:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000bdf6:	4b11      	ldr	r3, [pc, #68]	; (1000be3c <ble_connected_state_handler+0x218>)
1000bdf8:	469b      	mov	fp, r3
1000bdfa:	e773      	b.n	1000bce4 <ble_connected_state_handler+0xc0>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000bdfc:	235e      	movs	r3, #94	; 0x5e
1000bdfe:	4a15      	ldr	r2, [pc, #84]	; (1000be54 <ble_connected_state_handler+0x230>)
1000be00:	5cd3      	ldrb	r3, [r2, r3]
1000be02:	2b00      	cmp	r3, #0
1000be04:	d08c      	beq.n	1000bd20 <ble_connected_state_handler+0xfc>
1000be06:	4a19      	ldr	r2, [pc, #100]	; (1000be6c <ble_connected_state_handler+0x248>)
1000be08:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000be0a:	2701      	movs	r7, #1
1000be0c:	e783      	b.n	1000bd16 <ble_connected_state_handler+0xf2>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000be0e:	0030      	movs	r0, r6
1000be10:	b01a      	add	sp, #104	; 0x68
1000be12:	bc1c      	pop	{r2, r3, r4}
1000be14:	4690      	mov	r8, r2
1000be16:	4699      	mov	r9, r3
1000be18:	46a3      	mov	fp, r4
1000be1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000be1c:	1001227c 	.word	0x1001227c
1000be20:	10010fb1 	.word	0x10010fb1
1000be24:	10013370 	.word	0x10013370
1000be28:	10010e91 	.word	0x10010e91
1000be2c:	100133b4 	.word	0x100133b4
1000be30:	100159ec 	.word	0x100159ec
1000be34:	10010e6f 	.word	0x10010e6f
1000be38:	10014194 	.word	0x10014194
1000be3c:	10010e51 	.word	0x10010e51
1000be40:	10010e81 	.word	0x10010e81
1000be44:	10015786 	.word	0x10015786
1000be48:	1000d6c5 	.word	0x1000d6c5
1000be4c:	100133cc 	.word	0x100133cc
1000be50:	100133f0 	.word	0x100133f0
1000be54:	10015740 	.word	0x10015740
1000be58:	100159ac 	.word	0x100159ac
1000be5c:	10013414 	.word	0x10013414
1000be60:	1000d699 	.word	0x1000d699
1000be64:	1000bbdd 	.word	0x1000bbdd
1000be68:	10013450 	.word	0x10013450
1000be6c:	1001581a 	.word	0x1001581a

1000be70 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000be70:	b5f0      	push	{r4, r5, r6, r7, lr}
1000be72:	4647      	mov	r7, r8
1000be74:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000be76:	7803      	ldrb	r3, [r0, #0]
1000be78:	2b00      	cmp	r3, #0
1000be7a:	d152      	bne.n	1000bf22 <ble_resolv_rand_addr_handler+0xb2>
1000be7c:	4d3e      	ldr	r5, [pc, #248]	; (1000bf78 <ble_resolv_rand_addr_handler+0x108>)
1000be7e:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000be80:	1c46      	adds	r6, r0, #1
1000be82:	4f3e      	ldr	r7, [pc, #248]	; (1000bf7c <ble_resolv_rand_addr_handler+0x10c>)
1000be84:	2210      	movs	r2, #16
1000be86:	0029      	movs	r1, r5
1000be88:	0030      	movs	r0, r6
1000be8a:	47b8      	blx	r7
1000be8c:	2800      	cmp	r0, #0
1000be8e:	d031      	beq.n	1000bef4 <ble_resolv_rand_addr_handler+0x84>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000be90:	3401      	adds	r4, #1
1000be92:	b2e4      	uxtb	r4, r4
1000be94:	357c      	adds	r5, #124	; 0x7c
1000be96:	2c05      	cmp	r4, #5
1000be98:	d1f4      	bne.n	1000be84 <ble_resolv_rand_addr_handler+0x14>
1000be9a:	e042      	b.n	1000bf22 <ble_resolv_rand_addr_handler+0xb2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000be9c:	001d      	movs	r5, r3
1000be9e:	7811      	ldrb	r1, [r2, #0]
1000bea0:	2900      	cmp	r1, #0
1000bea2:	d11b      	bne.n	1000bedc <ble_resolv_rand_addr_handler+0x6c>
1000bea4:	e001      	b.n	1000beaa <ble_resolv_rand_addr_handler+0x3a>
1000bea6:	2500      	movs	r5, #0
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bea8:	2400      	movs	r4, #0
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000beaa:	4b35      	ldr	r3, [pc, #212]	; (1000bf80 <ble_resolv_rand_addr_handler+0x110>)
1000beac:	4698      	mov	r8, r3
1000beae:	016e      	lsls	r6, r5, #5
1000beb0:	1b77      	subs	r7, r6, r5
1000beb2:	00bf      	lsls	r7, r7, #2
1000beb4:	4447      	add	r7, r8
1000beb6:	2212      	movs	r2, #18
1000beb8:	4932      	ldr	r1, [pc, #200]	; (1000bf84 <ble_resolv_rand_addr_handler+0x114>)
1000beba:	0038      	movs	r0, r7
1000bebc:	4b32      	ldr	r3, [pc, #200]	; (1000bf88 <ble_resolv_rand_addr_handler+0x118>)
1000bebe:	4798      	blx	r3
				ble_device_count++;
1000bec0:	4a32      	ldr	r2, [pc, #200]	; (1000bf8c <ble_resolv_rand_addr_handler+0x11c>)
1000bec2:	7813      	ldrb	r3, [r2, #0]
1000bec4:	3301      	adds	r3, #1
1000bec6:	b2db      	uxtb	r3, r3
1000bec8:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000beca:	375e      	adds	r7, #94	; 0x5e
1000becc:	2302      	movs	r3, #2
1000bece:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000bed0:	1b75      	subs	r5, r6, r5
1000bed2:	00ad      	lsls	r5, r5, #2
1000bed4:	4445      	add	r5, r8
1000bed6:	3308      	adds	r3, #8
1000bed8:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000beda:	e031      	b.n	1000bf40 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bedc:	3401      	adds	r4, #1
1000bede:	b2e4      	uxtb	r4, r4
1000bee0:	3301      	adds	r3, #1
1000bee2:	327c      	adds	r2, #124	; 0x7c
1000bee4:	2c05      	cmp	r4, #5
1000bee6:	d1d9      	bne.n	1000be9c <ble_resolv_rand_addr_handler+0x2c>
1000bee8:	e03a      	b.n	1000bf60 <ble_resolv_rand_addr_handler+0xf0>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000beea:	4b26      	ldr	r3, [pc, #152]	; (1000bf84 <ble_resolv_rand_addr_handler+0x114>)
1000beec:	8918      	ldrh	r0, [r3, #8]
1000beee:	4b28      	ldr	r3, [pc, #160]	; (1000bf90 <ble_resolv_rand_addr_handler+0x120>)
1000bef0:	4798      	blx	r3
1000bef2:	e03c      	b.n	1000bf6e <ble_resolv_rand_addr_handler+0xfe>
		
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
1000bef4:	4827      	ldr	r0, [pc, #156]	; (1000bf94 <ble_resolv_rand_addr_handler+0x124>)
1000bef6:	4b28      	ldr	r3, [pc, #160]	; (1000bf98 <ble_resolv_rand_addr_handler+0x128>)
1000bef8:	4798      	blx	r3
1000befa:	4828      	ldr	r0, [pc, #160]	; (1000bf9c <ble_resolv_rand_addr_handler+0x12c>)
1000befc:	4b28      	ldr	r3, [pc, #160]	; (1000bfa0 <ble_resolv_rand_addr_handler+0x130>)
1000befe:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000bf00:	481f      	ldr	r0, [pc, #124]	; (1000bf80 <ble_resolv_rand_addr_handler+0x110>)
1000bf02:	0163      	lsls	r3, r4, #5
1000bf04:	1b1a      	subs	r2, r3, r4
1000bf06:	0092      	lsls	r2, r2, #2
1000bf08:	1882      	adds	r2, r0, r2
1000bf0a:	0011      	movs	r1, r2
1000bf0c:	315e      	adds	r1, #94	; 0x5e
1000bf0e:	2502      	movs	r5, #2
1000bf10:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000bf12:	210a      	movs	r1, #10
1000bf14:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000bf16:	0010      	movs	r0, r2
1000bf18:	2212      	movs	r2, #18
1000bf1a:	491a      	ldr	r1, [pc, #104]	; (1000bf84 <ble_resolv_rand_addr_handler+0x114>)
1000bf1c:	4b1a      	ldr	r3, [pc, #104]	; (1000bf88 <ble_resolv_rand_addr_handler+0x118>)
1000bf1e:	4798      	blx	r3
1000bf20:	e00e      	b.n	1000bf40 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
1000bf22:	481c      	ldr	r0, [pc, #112]	; (1000bf94 <ble_resolv_rand_addr_handler+0x124>)
1000bf24:	4b1c      	ldr	r3, [pc, #112]	; (1000bf98 <ble_resolv_rand_addr_handler+0x128>)
1000bf26:	4798      	blx	r3
1000bf28:	481e      	ldr	r0, [pc, #120]	; (1000bfa4 <ble_resolv_rand_addr_handler+0x134>)
1000bf2a:	4b1d      	ldr	r3, [pc, #116]	; (1000bfa0 <ble_resolv_rand_addr_handler+0x130>)
1000bf2c:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000bf2e:	235e      	movs	r3, #94	; 0x5e
1000bf30:	4a13      	ldr	r2, [pc, #76]	; (1000bf80 <ble_resolv_rand_addr_handler+0x110>)
1000bf32:	5cd3      	ldrb	r3, [r2, r3]
1000bf34:	2b00      	cmp	r3, #0
1000bf36:	d0b6      	beq.n	1000bea6 <ble_resolv_rand_addr_handler+0x36>
1000bf38:	4a1b      	ldr	r2, [pc, #108]	; (1000bfa8 <ble_resolv_rand_addr_handler+0x138>)
1000bf3a:	2301      	movs	r3, #1
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bf3c:	2401      	movs	r4, #1
1000bf3e:	e7ad      	b.n	1000be9c <ble_resolv_rand_addr_handler+0x2c>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000bf40:	4814      	ldr	r0, [pc, #80]	; (1000bf94 <ble_resolv_rand_addr_handler+0x124>)
1000bf42:	4b15      	ldr	r3, [pc, #84]	; (1000bf98 <ble_resolv_rand_addr_handler+0x128>)
1000bf44:	4798      	blx	r3
1000bf46:	0021      	movs	r1, r4
1000bf48:	4818      	ldr	r0, [pc, #96]	; (1000bfac <ble_resolv_rand_addr_handler+0x13c>)
1000bf4a:	4b15      	ldr	r3, [pc, #84]	; (1000bfa0 <ble_resolv_rand_addr_handler+0x130>)
1000bf4c:	4798      	blx	r3
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000bf4e:	0163      	lsls	r3, r4, #5
1000bf50:	1b1c      	subs	r4, r3, r4
1000bf52:	00a4      	lsls	r4, r4, #2
1000bf54:	4b0a      	ldr	r3, [pc, #40]	; (1000bf80 <ble_resolv_rand_addr_handler+0x110>)
1000bf56:	191c      	adds	r4, r3, r4
1000bf58:	7ca3      	ldrb	r3, [r4, #18]
1000bf5a:	2b0a      	cmp	r3, #10
1000bf5c:	d107      	bne.n	1000bf6e <ble_resolv_rand_addr_handler+0xfe>
1000bf5e:	e7c4      	b.n	1000beea <ble_resolv_rand_addr_handler+0x7a>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000bf60:	480c      	ldr	r0, [pc, #48]	; (1000bf94 <ble_resolv_rand_addr_handler+0x124>)
1000bf62:	4b0d      	ldr	r3, [pc, #52]	; (1000bf98 <ble_resolv_rand_addr_handler+0x128>)
1000bf64:	4798      	blx	r3
1000bf66:	2105      	movs	r1, #5
1000bf68:	4810      	ldr	r0, [pc, #64]	; (1000bfac <ble_resolv_rand_addr_handler+0x13c>)
1000bf6a:	4b0d      	ldr	r3, [pc, #52]	; (1000bfa0 <ble_resolv_rand_addr_handler+0x130>)
1000bf6c:	4798      	blx	r3
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000bf6e:	2000      	movs	r0, #0
1000bf70:	bc04      	pop	{r2}
1000bf72:	4690      	mov	r8, r2
1000bf74:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bf76:	46c0      	nop			; (mov r8, r8)
1000bf78:	10015786 	.word	0x10015786
1000bf7c:	10010e51 	.word	0x10010e51
1000bf80:	10015740 	.word	0x10015740
1000bf84:	100159ec 	.word	0x100159ec
1000bf88:	10010e6f 	.word	0x10010e6f
1000bf8c:	100159ac 	.word	0x100159ac
1000bf90:	1000bbdd 	.word	0x1000bbdd
1000bf94:	1001227c 	.word	0x1001227c
1000bf98:	10010fb1 	.word	0x10010fb1
1000bf9c:	10013478 	.word	0x10013478
1000bfa0:	10010e91 	.word	0x10010e91
1000bfa4:	10013490 	.word	0x10013490
1000bfa8:	1001581a 	.word	0x1001581a
1000bfac:	100134ac 	.word	0x100134ac

1000bfb0 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000bfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000bfb2:	0004      	movs	r4, r0
1000bfb4:	000d      	movs	r5, r1
	DBG_LOG_DEV("\r\nBLE-Event:%d", events);
1000bfb6:	4848      	ldr	r0, [pc, #288]	; (1000c0d8 <ble_event_manager+0x128>)
1000bfb8:	4b48      	ldr	r3, [pc, #288]	; (1000c0dc <ble_event_manager+0x12c>)
1000bfba:	4798      	blx	r3
1000bfbc:	0021      	movs	r1, r4
1000bfbe:	4848      	ldr	r0, [pc, #288]	; (1000c0e0 <ble_event_manager+0x130>)
1000bfc0:	4b48      	ldr	r3, [pc, #288]	; (1000c0e4 <ble_event_manager+0x134>)
1000bfc2:	4798      	blx	r3
	switch(events)
1000bfc4:	2c3b      	cmp	r4, #59	; 0x3b
1000bfc6:	d879      	bhi.n	1000c0bc <ble_event_manager+0x10c>
1000bfc8:	00a3      	lsls	r3, r4, #2
1000bfca:	4a47      	ldr	r2, [pc, #284]	; (1000c0e8 <ble_event_manager+0x138>)
1000bfcc:	58d3      	ldr	r3, [r2, r3]
1000bfce:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000bfd0:	00a4      	lsls	r4, r4, #2
1000bfd2:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000bfd4:	4f45      	ldr	r7, [pc, #276]	; (1000c0ec <ble_event_manager+0x13c>)
1000bfd6:	59bb      	ldr	r3, [r7, r6]
1000bfd8:	2b00      	cmp	r3, #0
1000bfda:	d004      	beq.n	1000bfe6 <ble_event_manager+0x36>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000bfdc:	591b      	ldr	r3, [r3, r4]
1000bfde:	2b00      	cmp	r3, #0
1000bfe0:	d001      	beq.n	1000bfe6 <ble_event_manager+0x36>
				{
					event_cb_fn[events](event_params);		
1000bfe2:	0028      	movs	r0, r5
1000bfe4:	4798      	blx	r3
1000bfe6:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000bfe8:	2e14      	cmp	r6, #20
1000bfea:	d1f4      	bne.n	1000bfd6 <ble_event_manager+0x26>
1000bfec:	e072      	b.n	1000c0d4 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000bfee:	3c13      	subs	r4, #19
1000bff0:	b2e4      	uxtb	r4, r4
1000bff2:	00a4      	lsls	r4, r4, #2
1000bff4:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000bff6:	4f3e      	ldr	r7, [pc, #248]	; (1000c0f0 <ble_event_manager+0x140>)
1000bff8:	59bb      	ldr	r3, [r7, r6]
1000bffa:	2b00      	cmp	r3, #0
1000bffc:	d004      	beq.n	1000c008 <ble_event_manager+0x58>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000bffe:	591b      	ldr	r3, [r3, r4]
1000c000:	2b00      	cmp	r3, #0
1000c002:	d001      	beq.n	1000c008 <ble_event_manager+0x58>
				{
					event_cb_fn[events](event_params);
1000c004:	0028      	movs	r0, r5
1000c006:	4798      	blx	r3
1000c008:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000c00a:	2e14      	cmp	r6, #20
1000c00c:	d1f4      	bne.n	1000bff8 <ble_event_manager+0x48>
1000c00e:	e061      	b.n	1000c0d4 <ble_event_manager+0x124>
	case AT_BLE_MTU_CHANGED_CMD_COMPLETE:
	case AT_BLE_CHARACTERISTIC_WRITE_CMD_CMP:
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
1000c010:	3c1d      	subs	r4, #29
1000c012:	b2e4      	uxtb	r4, r4
		DBG_LOG_DEV("GATT_Server Event:%d", events);
1000c014:	4830      	ldr	r0, [pc, #192]	; (1000c0d8 <ble_event_manager+0x128>)
1000c016:	4b31      	ldr	r3, [pc, #196]	; (1000c0dc <ble_event_manager+0x12c>)
1000c018:	4798      	blx	r3
1000c01a:	0021      	movs	r1, r4
1000c01c:	4835      	ldr	r0, [pc, #212]	; (1000c0f4 <ble_event_manager+0x144>)
1000c01e:	4b31      	ldr	r3, [pc, #196]	; (1000c0e4 <ble_event_manager+0x134>)
1000c020:	4798      	blx	r3
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c022:	00a4      	lsls	r4, r4, #2
1000c024:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000c026:	4f34      	ldr	r7, [pc, #208]	; (1000c0f8 <ble_event_manager+0x148>)
1000c028:	59bb      	ldr	r3, [r7, r6]
1000c02a:	2b00      	cmp	r3, #0
1000c02c:	d004      	beq.n	1000c038 <ble_event_manager+0x88>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c02e:	591b      	ldr	r3, [r3, r4]
1000c030:	2b00      	cmp	r3, #0
1000c032:	d001      	beq.n	1000c038 <ble_event_manager+0x88>
				{
					event_cb_fn[events](event_params);
1000c034:	0028      	movs	r0, r5
1000c036:	4798      	blx	r3
1000c038:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000c03a:	2e14      	cmp	r6, #20
1000c03c:	d1f4      	bne.n	1000c028 <ble_event_manager+0x78>
1000c03e:	e049      	b.n	1000c0d4 <ble_event_manager+0x124>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000c040:	3c27      	subs	r4, #39	; 0x27
1000c042:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000c044:	4b2d      	ldr	r3, [pc, #180]	; (1000c0fc <ble_event_manager+0x14c>)
1000c046:	681b      	ldr	r3, [r3, #0]
1000c048:	2b00      	cmp	r3, #0
1000c04a:	d043      	beq.n	1000c0d4 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c04c:	00a4      	lsls	r4, r4, #2
1000c04e:	58e3      	ldr	r3, [r4, r3]
1000c050:	2b00      	cmp	r3, #0
1000c052:	d03f      	beq.n	1000c0d4 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000c054:	0028      	movs	r0, r5
1000c056:	4798      	blx	r3
1000c058:	e03c      	b.n	1000c0d4 <ble_event_manager+0x124>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000c05a:	3c2d      	subs	r4, #45	; 0x2d
1000c05c:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000c05e:	4b28      	ldr	r3, [pc, #160]	; (1000c100 <ble_event_manager+0x150>)
1000c060:	681b      	ldr	r3, [r3, #0]
1000c062:	2b00      	cmp	r3, #0
1000c064:	d036      	beq.n	1000c0d4 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c066:	00a4      	lsls	r4, r4, #2
1000c068:	58e3      	ldr	r3, [r4, r3]
1000c06a:	2b00      	cmp	r3, #0
1000c06c:	d032      	beq.n	1000c0d4 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000c06e:	0028      	movs	r0, r5
1000c070:	4798      	blx	r3
1000c072:	e02f      	b.n	1000c0d4 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c074:	3c36      	subs	r4, #54	; 0x36
1000c076:	b2e4      	uxtb	r4, r4
1000c078:	00a4      	lsls	r4, r4, #2
1000c07a:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000c07c:	4f21      	ldr	r7, [pc, #132]	; (1000c104 <ble_event_manager+0x154>)
1000c07e:	59bb      	ldr	r3, [r7, r6]
1000c080:	2b00      	cmp	r3, #0
1000c082:	d004      	beq.n	1000c08e <ble_event_manager+0xde>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c084:	591b      	ldr	r3, [r3, r4]
1000c086:	2b00      	cmp	r3, #0
1000c088:	d001      	beq.n	1000c08e <ble_event_manager+0xde>
				{
					event_cb_fn[events](event_params);
1000c08a:	0028      	movs	r0, r5
1000c08c:	4798      	blx	r3
1000c08e:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000c090:	2e14      	cmp	r6, #20
1000c092:	d1f4      	bne.n	1000c07e <ble_event_manager+0xce>
1000c094:	e01e      	b.n	1000c0d4 <ble_event_manager+0x124>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000c096:	3c38      	subs	r4, #56	; 0x38
1000c098:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000c09a:	4b1b      	ldr	r3, [pc, #108]	; (1000c108 <ble_event_manager+0x158>)
1000c09c:	681b      	ldr	r3, [r3, #0]
1000c09e:	2b00      	cmp	r3, #0
1000c0a0:	d018      	beq.n	1000c0d4 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c0a2:	00a4      	lsls	r4, r4, #2
1000c0a4:	58e3      	ldr	r3, [r4, r3]
1000c0a6:	2b00      	cmp	r3, #0
1000c0a8:	d014      	beq.n	1000c0d4 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000c0aa:	0028      	movs	r0, r5
1000c0ac:	4798      	blx	r3
1000c0ae:	e011      	b.n	1000c0d4 <ble_event_manager+0x124>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000c0b0:	4b16      	ldr	r3, [pc, #88]	; (1000c10c <ble_event_manager+0x15c>)
1000c0b2:	681b      	ldr	r3, [r3, #0]
1000c0b4:	2b00      	cmp	r3, #0
1000c0b6:	d00d      	beq.n	1000c0d4 <ble_event_manager+0x124>
			ble_user_event_cb();
1000c0b8:	4798      	blx	r3
1000c0ba:	e00b      	b.n	1000c0d4 <ble_event_manager+0x124>
	}
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
1000c0bc:	4e06      	ldr	r6, [pc, #24]	; (1000c0d8 <ble_event_manager+0x128>)
1000c0be:	0030      	movs	r0, r6
1000c0c0:	4d06      	ldr	r5, [pc, #24]	; (1000c0dc <ble_event_manager+0x12c>)
1000c0c2:	47a8      	blx	r5
1000c0c4:	0021      	movs	r1, r4
1000c0c6:	4812      	ldr	r0, [pc, #72]	; (1000c110 <ble_event_manager+0x160>)
1000c0c8:	4b06      	ldr	r3, [pc, #24]	; (1000c0e4 <ble_event_manager+0x134>)
1000c0ca:	4798      	blx	r3
		DBG_LOG("\r\n");
1000c0cc:	0030      	movs	r0, r6
1000c0ce:	47a8      	blx	r5
1000c0d0:	0030      	movs	r0, r6
1000c0d2:	47a8      	blx	r5
	}
	break;		
	}
}
1000c0d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c0d6:	46c0      	nop			; (mov r8, r8)
1000c0d8:	1001227c 	.word	0x1001227c
1000c0dc:	10010fb1 	.word	0x10010fb1
1000c0e0:	100134bc 	.word	0x100134bc
1000c0e4:	10010e91 	.word	0x10010e91
1000c0e8:	10012a1c 	.word	0x10012a1c
1000c0ec:	100159c4 	.word	0x100159c4
1000c0f0:	100159d8 	.word	0x100159d8
1000c0f4:	100134cc 	.word	0x100134cc
1000c0f8:	1001572c 	.word	0x1001572c
1000c0fc:	10015a20 	.word	0x10015a20
1000c100:	10015728 	.word	0x10015728
1000c104:	100159b0 	.word	0x100159b0
1000c108:	10015f64 	.word	0x10015f64
1000c10c:	1001418c 	.word	0x1001418c
1000c110:	100134e4 	.word	0x100134e4

1000c114 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000c114:	b570      	push	{r4, r5, r6, lr}
1000c116:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000c118:	4b0d      	ldr	r3, [pc, #52]	; (1000c150 <ble_event_task+0x3c>)
1000c11a:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000c11c:	2b01      	cmp	r3, #1
1000c11e:	d101      	bne.n	1000c124 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000c120:	4b0c      	ldr	r3, [pc, #48]	; (1000c154 <ble_event_task+0x40>)
1000c122:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000c124:	0022      	movs	r2, r4
1000c126:	490c      	ldr	r1, [pc, #48]	; (1000c158 <ble_event_task+0x44>)
1000c128:	480c      	ldr	r0, [pc, #48]	; (1000c15c <ble_event_task+0x48>)
1000c12a:	4b0d      	ldr	r3, [pc, #52]	; (1000c160 <ble_event_task+0x4c>)
1000c12c:	4798      	blx	r3
1000c12e:	0004      	movs	r4, r0
1000c130:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000c132:	4b07      	ldr	r3, [pc, #28]	; (1000c150 <ble_event_task+0x3c>)
1000c134:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000c136:	2b01      	cmp	r3, #1
1000c138:	d101      	bne.n	1000c13e <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000c13a:	4b0a      	ldr	r3, [pc, #40]	; (1000c164 <ble_event_task+0x50>)
1000c13c:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000c13e:	2d00      	cmp	r5, #0
1000c140:	d104      	bne.n	1000c14c <ble_event_task+0x38>
    {		
		ble_event_manager(event, ble_event_params);
1000c142:	4b06      	ldr	r3, [pc, #24]	; (1000c15c <ble_event_task+0x48>)
1000c144:	7818      	ldrb	r0, [r3, #0]
1000c146:	4904      	ldr	r1, [pc, #16]	; (1000c158 <ble_event_task+0x44>)
1000c148:	4b07      	ldr	r3, [pc, #28]	; (1000c168 <ble_event_task+0x54>)
1000c14a:	4798      	blx	r3
    }
    
    return status;
}
1000c14c:	0020      	movs	r0, r4
1000c14e:	bd70      	pop	{r4, r5, r6, pc}
1000c150:	1001419b 	.word	0x1001419b
1000c154:	10009a4d 	.word	0x10009a4d
1000c158:	10015d58 	.word	0x10015d58
1000c15c:	10015a1c 	.word	0x10015a1c
1000c160:	1000ca4d 	.word	0x1000ca4d
1000c164:	10009a25 	.word	0x10009a25
1000c168:	1000bfb1 	.word	0x1000bfb1

1000c16c <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000c16c:	b510      	push	{r4, lr}
1000c16e:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000c170:	ac08      	add	r4, sp, #32
1000c172:	2203      	movs	r2, #3
1000c174:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000c176:	2302      	movs	r3, #2
1000c178:	70a3      	strb	r3, [r4, #2]
1000c17a:	3316      	adds	r3, #22
1000c17c:	70e3      	strb	r3, [r4, #3]
1000c17e:	7122      	strb	r2, [r4, #4]
1000c180:	7163      	strb	r3, [r4, #5]
1000c182:	3201      	adds	r2, #1
1000c184:	71a2      	strb	r2, [r4, #6]
1000c186:	71e3      	strb	r3, [r4, #7]
1000c188:	320b      	adds	r2, #11
1000c18a:	7222      	strb	r2, [r4, #8]
1000c18c:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000c18e:	3b0f      	subs	r3, #15
1000c190:	7023      	strb	r3, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000c192:	3a05      	subs	r2, #5
1000c194:	72a2      	strb	r2, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000c196:	72e3      	strb	r3, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000c198:	aa0b      	add	r2, sp, #44	; 0x2c
1000c19a:	4b16      	ldr	r3, [pc, #88]	; (1000c1f4 <ble_advertisement_data_set+0x88>)
1000c19c:	cb03      	ldmia	r3!, {r0, r1}
1000c19e:	c203      	stmia	r2!, {r0, r1}
1000c1a0:	781b      	ldrb	r3, [r3, #0]
1000c1a2:	7013      	strb	r3, [r2, #0]
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000c1a4:	2300      	movs	r3, #0
1000c1a6:	466a      	mov	r2, sp
1000c1a8:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000c1aa:	3315      	adds	r3, #21
1000c1ac:	7053      	strb	r3, [r2, #1]
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
    DBG_LOG_DEV("[ble_manager]\t\t\tManufacturer specific data enabled");
1000c1ae:	4812      	ldr	r0, [pc, #72]	; (1000c1f8 <ble_advertisement_data_set+0x8c>)
1000c1b0:	4b12      	ldr	r3, [pc, #72]	; (1000c1fc <ble_advertisement_data_set+0x90>)
1000c1b2:	4798      	blx	r3
1000c1b4:	4812      	ldr	r0, [pc, #72]	; (1000c200 <ble_advertisement_data_set+0x94>)
1000c1b6:	4b13      	ldr	r3, [pc, #76]	; (1000c204 <ble_advertisement_data_set+0x98>)
1000c1b8:	4798      	blx	r3
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000c1ba:	2307      	movs	r3, #7
1000c1bc:	466a      	mov	r2, sp
1000c1be:	7013      	strb	r3, [r2, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000c1c0:	33f8      	adds	r3, #248	; 0xf8
1000c1c2:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000c1c4:	2206      	movs	r2, #6
1000c1c6:	4910      	ldr	r1, [pc, #64]	; (1000c208 <ble_advertisement_data_set+0x9c>)
1000c1c8:	466b      	mov	r3, sp
1000c1ca:	1c98      	adds	r0, r3, #2
1000c1cc:	4b0f      	ldr	r3, [pc, #60]	; (1000c20c <ble_advertisement_data_set+0xa0>)
1000c1ce:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000c1d0:	2308      	movs	r3, #8
1000c1d2:	466a      	mov	r2, sp
1000c1d4:	2115      	movs	r1, #21
1000c1d6:	0020      	movs	r0, r4
1000c1d8:	4c0d      	ldr	r4, [pc, #52]	; (1000c210 <ble_advertisement_data_set+0xa4>)
1000c1da:	47a0      	blx	r4
1000c1dc:	2800      	cmp	r0, #0
1000c1de:	d005      	beq.n	1000c1ec <ble_advertisement_data_set+0x80>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000c1e0:	4805      	ldr	r0, [pc, #20]	; (1000c1f8 <ble_advertisement_data_set+0x8c>)
1000c1e2:	4b06      	ldr	r3, [pc, #24]	; (1000c1fc <ble_advertisement_data_set+0x90>)
1000c1e4:	4798      	blx	r3
1000c1e6:	480b      	ldr	r0, [pc, #44]	; (1000c214 <ble_advertisement_data_set+0xa8>)
1000c1e8:	4b06      	ldr	r3, [pc, #24]	; (1000c204 <ble_advertisement_data_set+0x98>)
1000c1ea:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000c1ec:	2000      	movs	r0, #0
1000c1ee:	b010      	add	sp, #64	; 0x40
1000c1f0:	bd10      	pop	{r4, pc}
1000c1f2:	46c0      	nop			; (mov r8, r8)
1000c1f4:	10013200 	.word	0x10013200
1000c1f8:	1001227c 	.word	0x1001227c
1000c1fc:	10010fb1 	.word	0x10010fb1
1000c200:	10013504 	.word	0x10013504
1000c204:	10010e91 	.word	0x10010e91
1000c208:	10013538 	.word	0x10013538
1000c20c:	10010e6f 	.word	0x10010e6f
1000c210:	1000d4ad 	.word	0x1000d4ad
1000c214:	10013540 	.word	0x10013540

1000c218 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000c218:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000c21a:	4b20      	ldr	r3, [pc, #128]	; (1000c29c <uart_rx0_isr_handler+0x84>)
1000c21c:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000c21e:	6823      	ldr	r3, [r4, #0]
1000c220:	7d1d      	ldrb	r5, [r3, #20]
1000c222:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000c224:	066a      	lsls	r2, r5, #25
1000c226:	d513      	bpl.n	1000c250 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000c228:	211e      	movs	r1, #30
1000c22a:	2222      	movs	r2, #34	; 0x22
1000c22c:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000c22e:	7e1a      	ldrb	r2, [r3, #24]
1000c230:	3123      	adds	r1, #35	; 0x23
1000c232:	438a      	bics	r2, r1
1000c234:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c236:	2321      	movs	r3, #33	; 0x21
1000c238:	5ce3      	ldrb	r3, [r4, r3]
1000c23a:	071b      	lsls	r3, r3, #28
1000c23c:	d506      	bpl.n	1000c24c <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000c23e:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c240:	5ce3      	ldrb	r3, [r4, r3]
1000c242:	071b      	lsls	r3, r3, #28
1000c244:	d502      	bpl.n	1000c24c <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000c246:	0020      	movs	r0, r4
1000c248:	6923      	ldr	r3, [r4, #16]
1000c24a:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000c24c:	6823      	ldr	r3, [r4, #0]
1000c24e:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c250:	07eb      	lsls	r3, r5, #31
1000c252:	d522      	bpl.n	1000c29a <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000c254:	6823      	ldr	r3, [r4, #0]
1000c256:	7c1b      	ldrb	r3, [r3, #16]
1000c258:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000c25a:	6962      	ldr	r2, [r4, #20]
1000c25c:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000c25e:	6963      	ldr	r3, [r4, #20]
1000c260:	3301      	adds	r3, #1
1000c262:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000c264:	8ba3      	ldrh	r3, [r4, #28]
1000c266:	3b01      	subs	r3, #1
1000c268:	b29b      	uxth	r3, r3
1000c26a:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000c26c:	8ba3      	ldrh	r3, [r4, #28]
1000c26e:	b29b      	uxth	r3, r3
1000c270:	2b00      	cmp	r3, #0
1000c272:	d112      	bne.n	1000c29a <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c274:	3321      	adds	r3, #33	; 0x21
1000c276:	5ce3      	ldrb	r3, [r4, r3]
1000c278:	075b      	lsls	r3, r3, #29
1000c27a:	d50e      	bpl.n	1000c29a <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000c27c:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c27e:	5ce3      	ldrb	r3, [r4, r3]
1000c280:	075b      	lsls	r3, r3, #29
1000c282:	d50a      	bpl.n	1000c29a <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000c284:	2200      	movs	r2, #0
1000c286:	2322      	movs	r3, #34	; 0x22
1000c288:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000c28a:	6822      	ldr	r2, [r4, #0]
1000c28c:	7e13      	ldrb	r3, [r2, #24]
1000c28e:	2101      	movs	r1, #1
1000c290:	438b      	bics	r3, r1
1000c292:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000c294:	68e3      	ldr	r3, [r4, #12]
1000c296:	0020      	movs	r0, r4
1000c298:	4798      	blx	r3
			}
		}
	}
}
1000c29a:	bd70      	pop	{r4, r5, r6, pc}
1000c29c:	10015f68 	.word	0x10015f68

1000c2a0 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000c2a0:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000c2a2:	4b21      	ldr	r3, [pc, #132]	; (1000c328 <uart_tx0_isr_handler+0x88>)
1000c2a4:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000c2a6:	6823      	ldr	r3, [r4, #0]
1000c2a8:	791d      	ldrb	r5, [r3, #4]
1000c2aa:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000c2ac:	07ea      	lsls	r2, r5, #31
1000c2ae:	d517      	bpl.n	1000c2e0 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000c2b0:	69a2      	ldr	r2, [r4, #24]
1000c2b2:	7811      	ldrb	r1, [r2, #0]
1000c2b4:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000c2b6:	3201      	adds	r2, #1
1000c2b8:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000c2ba:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000c2bc:	8be3      	ldrh	r3, [r4, #30]
1000c2be:	3b01      	subs	r3, #1
1000c2c0:	b29b      	uxth	r3, r3
1000c2c2:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000c2c4:	8be3      	ldrh	r3, [r4, #30]
1000c2c6:	b29b      	uxth	r3, r3
1000c2c8:	2b00      	cmp	r3, #0
1000c2ca:	d109      	bne.n	1000c2e0 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c2cc:	6822      	ldr	r2, [r4, #0]
1000c2ce:	7a13      	ldrb	r3, [r2, #8]
1000c2d0:	2101      	movs	r1, #1
1000c2d2:	438b      	bics	r3, r1
1000c2d4:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000c2d6:	6822      	ldr	r2, [r4, #0]
1000c2d8:	7a11      	ldrb	r1, [r2, #8]
1000c2da:	2310      	movs	r3, #16
1000c2dc:	430b      	orrs	r3, r1
1000c2de:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000c2e0:	06eb      	lsls	r3, r5, #27
1000c2e2:	d512      	bpl.n	1000c30a <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c2e4:	2321      	movs	r3, #33	; 0x21
1000c2e6:	5ce3      	ldrb	r3, [r4, r3]
1000c2e8:	07db      	lsls	r3, r3, #31
1000c2ea:	d50e      	bpl.n	1000c30a <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000c2ec:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c2ee:	5ce3      	ldrb	r3, [r4, r3]
1000c2f0:	07db      	lsls	r3, r3, #31
1000c2f2:	d50a      	bpl.n	1000c30a <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000c2f4:	2200      	movs	r2, #0
1000c2f6:	2322      	movs	r3, #34	; 0x22
1000c2f8:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c2fa:	6822      	ldr	r2, [r4, #0]
1000c2fc:	7a13      	ldrb	r3, [r2, #8]
1000c2fe:	2110      	movs	r1, #16
1000c300:	438b      	bics	r3, r1
1000c302:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000c304:	0020      	movs	r0, r4
1000c306:	6863      	ldr	r3, [r4, #4]
1000c308:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000c30a:	06ab      	lsls	r3, r5, #26
1000c30c:	d50a      	bpl.n	1000c324 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c30e:	2321      	movs	r3, #33	; 0x21
1000c310:	5ce3      	ldrb	r3, [r4, r3]
1000c312:	079b      	lsls	r3, r3, #30
1000c314:	d506      	bpl.n	1000c324 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000c316:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c318:	5ce3      	ldrb	r3, [r4, r3]
1000c31a:	079b      	lsls	r3, r3, #30
1000c31c:	d502      	bpl.n	1000c324 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000c31e:	68a3      	ldr	r3, [r4, #8]
1000c320:	0020      	movs	r0, r4
1000c322:	4798      	blx	r3
		}

	}
}
1000c324:	bd70      	pop	{r4, r5, r6, pc}
1000c326:	46c0      	nop			; (mov r8, r8)
1000c328:	10015f68 	.word	0x10015f68

1000c32c <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000c32c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000c32e:	4b20      	ldr	r3, [pc, #128]	; (1000c3b0 <uart_rx1_isr_handler+0x84>)
1000c330:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000c332:	6823      	ldr	r3, [r4, #0]
1000c334:	7d1d      	ldrb	r5, [r3, #20]
1000c336:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000c338:	066a      	lsls	r2, r5, #25
1000c33a:	d513      	bpl.n	1000c364 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000c33c:	211e      	movs	r1, #30
1000c33e:	2222      	movs	r2, #34	; 0x22
1000c340:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000c342:	7e1a      	ldrb	r2, [r3, #24]
1000c344:	3123      	adds	r1, #35	; 0x23
1000c346:	438a      	bics	r2, r1
1000c348:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c34a:	2321      	movs	r3, #33	; 0x21
1000c34c:	5ce3      	ldrb	r3, [r4, r3]
1000c34e:	071b      	lsls	r3, r3, #28
1000c350:	d506      	bpl.n	1000c360 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000c352:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c354:	5ce3      	ldrb	r3, [r4, r3]
1000c356:	071b      	lsls	r3, r3, #28
1000c358:	d502      	bpl.n	1000c360 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000c35a:	0020      	movs	r0, r4
1000c35c:	6923      	ldr	r3, [r4, #16]
1000c35e:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000c360:	6823      	ldr	r3, [r4, #0]
1000c362:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c364:	07eb      	lsls	r3, r5, #31
1000c366:	d522      	bpl.n	1000c3ae <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000c368:	6823      	ldr	r3, [r4, #0]
1000c36a:	7c1b      	ldrb	r3, [r3, #16]
1000c36c:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000c36e:	6962      	ldr	r2, [r4, #20]
1000c370:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000c372:	6963      	ldr	r3, [r4, #20]
1000c374:	3301      	adds	r3, #1
1000c376:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000c378:	8ba3      	ldrh	r3, [r4, #28]
1000c37a:	3b01      	subs	r3, #1
1000c37c:	b29b      	uxth	r3, r3
1000c37e:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000c380:	8ba3      	ldrh	r3, [r4, #28]
1000c382:	b29b      	uxth	r3, r3
1000c384:	2b00      	cmp	r3, #0
1000c386:	d112      	bne.n	1000c3ae <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c388:	3321      	adds	r3, #33	; 0x21
1000c38a:	5ce3      	ldrb	r3, [r4, r3]
1000c38c:	075b      	lsls	r3, r3, #29
1000c38e:	d50e      	bpl.n	1000c3ae <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000c390:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c392:	5ce3      	ldrb	r3, [r4, r3]
1000c394:	075b      	lsls	r3, r3, #29
1000c396:	d50a      	bpl.n	1000c3ae <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000c398:	2200      	movs	r2, #0
1000c39a:	2322      	movs	r3, #34	; 0x22
1000c39c:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000c39e:	6822      	ldr	r2, [r4, #0]
1000c3a0:	7e13      	ldrb	r3, [r2, #24]
1000c3a2:	2101      	movs	r1, #1
1000c3a4:	438b      	bics	r3, r1
1000c3a6:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000c3a8:	68e3      	ldr	r3, [r4, #12]
1000c3aa:	0020      	movs	r0, r4
1000c3ac:	4798      	blx	r3
			}
		}
	}
}
1000c3ae:	bd70      	pop	{r4, r5, r6, pc}
1000c3b0:	10015f68 	.word	0x10015f68

1000c3b4 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000c3b4:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000c3b6:	4b21      	ldr	r3, [pc, #132]	; (1000c43c <uart_tx1_isr_handler+0x88>)
1000c3b8:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000c3ba:	6823      	ldr	r3, [r4, #0]
1000c3bc:	791d      	ldrb	r5, [r3, #4]
1000c3be:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000c3c0:	07ea      	lsls	r2, r5, #31
1000c3c2:	d517      	bpl.n	1000c3f4 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000c3c4:	69a2      	ldr	r2, [r4, #24]
1000c3c6:	7811      	ldrb	r1, [r2, #0]
1000c3c8:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000c3ca:	3201      	adds	r2, #1
1000c3cc:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000c3ce:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000c3d0:	8be3      	ldrh	r3, [r4, #30]
1000c3d2:	3b01      	subs	r3, #1
1000c3d4:	b29b      	uxth	r3, r3
1000c3d6:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000c3d8:	8be3      	ldrh	r3, [r4, #30]
1000c3da:	b29b      	uxth	r3, r3
1000c3dc:	2b00      	cmp	r3, #0
1000c3de:	d109      	bne.n	1000c3f4 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c3e0:	6822      	ldr	r2, [r4, #0]
1000c3e2:	7a13      	ldrb	r3, [r2, #8]
1000c3e4:	2101      	movs	r1, #1
1000c3e6:	438b      	bics	r3, r1
1000c3e8:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000c3ea:	6822      	ldr	r2, [r4, #0]
1000c3ec:	7a11      	ldrb	r1, [r2, #8]
1000c3ee:	2310      	movs	r3, #16
1000c3f0:	430b      	orrs	r3, r1
1000c3f2:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000c3f4:	06eb      	lsls	r3, r5, #27
1000c3f6:	d512      	bpl.n	1000c41e <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c3f8:	2321      	movs	r3, #33	; 0x21
1000c3fa:	5ce3      	ldrb	r3, [r4, r3]
1000c3fc:	07db      	lsls	r3, r3, #31
1000c3fe:	d50e      	bpl.n	1000c41e <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000c400:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c402:	5ce3      	ldrb	r3, [r4, r3]
1000c404:	07db      	lsls	r3, r3, #31
1000c406:	d50a      	bpl.n	1000c41e <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000c408:	2200      	movs	r2, #0
1000c40a:	2322      	movs	r3, #34	; 0x22
1000c40c:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c40e:	6822      	ldr	r2, [r4, #0]
1000c410:	7a13      	ldrb	r3, [r2, #8]
1000c412:	2110      	movs	r1, #16
1000c414:	438b      	bics	r3, r1
1000c416:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000c418:	0020      	movs	r0, r4
1000c41a:	6863      	ldr	r3, [r4, #4]
1000c41c:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000c41e:	06ab      	lsls	r3, r5, #26
1000c420:	d50a      	bpl.n	1000c438 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c422:	2321      	movs	r3, #33	; 0x21
1000c424:	5ce3      	ldrb	r3, [r4, r3]
1000c426:	079b      	lsls	r3, r3, #30
1000c428:	d506      	bpl.n	1000c438 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000c42a:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c42c:	5ce3      	ldrb	r3, [r4, r3]
1000c42e:	079b      	lsls	r3, r3, #30
1000c430:	d502      	bpl.n	1000c438 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000c432:	68a3      	ldr	r3, [r4, #8]
1000c434:	0020      	movs	r0, r4
1000c436:	4798      	blx	r3
		}

	}
}
1000c438:	bd70      	pop	{r4, r5, r6, pc}
1000c43a:	46c0      	nop			; (mov r8, r8)
1000c43c:	10015f68 	.word	0x10015f68

1000c440 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000c440:	23e1      	movs	r3, #225	; 0xe1
1000c442:	025b      	lsls	r3, r3, #9
1000c444:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000c446:	2300      	movs	r3, #0
1000c448:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000c44a:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000c44c:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000c44e:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000c450:	3302      	adds	r3, #2
1000c452:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000c454:	2203      	movs	r2, #3
1000c456:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000c458:	3201      	adds	r2, #1
1000c45a:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000c45c:	3201      	adds	r2, #1
1000c45e:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000c460:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000c462:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000c464:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000c466:	6243      	str	r3, [r0, #36]	; 0x24
}
1000c468:	4770      	bx	lr
1000c46a:	46c0      	nop			; (mov r8, r8)

1000c46c <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000c46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c46e:	464f      	mov	r7, r9
1000c470:	4646      	mov	r6, r8
1000c472:	b4c0      	push	{r6, r7}
1000c474:	0005      	movs	r5, r0
1000c476:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000c478:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000c47a:	2300      	movs	r3, #0
1000c47c:	6043      	str	r3, [r0, #4]
1000c47e:	6083      	str	r3, [r0, #8]
1000c480:	60c3      	str	r3, [r0, #12]
1000c482:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000c484:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000c486:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000c488:	2200      	movs	r2, #0
1000c48a:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000c48c:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000c48e:	3320      	adds	r3, #32
1000c490:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000c492:	3301      	adds	r3, #1
1000c494:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000c496:	3301      	adds	r3, #1
1000c498:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000c49a:	4b55      	ldr	r3, [pc, #340]	; (1000c5f0 <uart_init+0x184>)
1000c49c:	4299      	cmp	r1, r3
1000c49e:	d118      	bne.n	1000c4d2 <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000c4a0:	2009      	movs	r0, #9
1000c4a2:	4c54      	ldr	r4, [pc, #336]	; (1000c5f4 <uart_init+0x188>)
1000c4a4:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000c4a6:	200a      	movs	r0, #10
1000c4a8:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000c4aa:	2009      	movs	r0, #9
1000c4ac:	4c52      	ldr	r4, [pc, #328]	; (1000c5f8 <uart_init+0x18c>)
1000c4ae:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000c4b0:	200a      	movs	r0, #10
1000c4b2:	47a0      	blx	r4
		_uart_instances[0] = module;
1000c4b4:	4b51      	ldr	r3, [pc, #324]	; (1000c5fc <uart_init+0x190>)
1000c4b6:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000c4b8:	4951      	ldr	r1, [pc, #324]	; (1000c600 <uart_init+0x194>)
1000c4ba:	2010      	movs	r0, #16
1000c4bc:	4c51      	ldr	r4, [pc, #324]	; (1000c604 <uart_init+0x198>)
1000c4be:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000c4c0:	4951      	ldr	r1, [pc, #324]	; (1000c608 <uart_init+0x19c>)
1000c4c2:	2011      	movs	r0, #17
1000c4c4:	47a0      	blx	r4
1000c4c6:	4b51      	ldr	r3, [pc, #324]	; (1000c60c <uart_init+0x1a0>)
1000c4c8:	2201      	movs	r2, #1
1000c4ca:	601a      	str	r2, [r3, #0]
1000c4cc:	3201      	adds	r2, #1
1000c4ce:	601a      	str	r2, [r3, #0]
1000c4d0:	e01a      	b.n	1000c508 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000c4d2:	4b4f      	ldr	r3, [pc, #316]	; (1000c610 <uart_init+0x1a4>)
1000c4d4:	4299      	cmp	r1, r3
1000c4d6:	d117      	bne.n	1000c508 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000c4d8:	200b      	movs	r0, #11
1000c4da:	4c46      	ldr	r4, [pc, #280]	; (1000c5f4 <uart_init+0x188>)
1000c4dc:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000c4de:	200c      	movs	r0, #12
1000c4e0:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000c4e2:	200b      	movs	r0, #11
1000c4e4:	4c44      	ldr	r4, [pc, #272]	; (1000c5f8 <uart_init+0x18c>)
1000c4e6:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000c4e8:	200c      	movs	r0, #12
1000c4ea:	47a0      	blx	r4
		_uart_instances[1] = module;
1000c4ec:	4b43      	ldr	r3, [pc, #268]	; (1000c5fc <uart_init+0x190>)
1000c4ee:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000c4f0:	4948      	ldr	r1, [pc, #288]	; (1000c614 <uart_init+0x1a8>)
1000c4f2:	2012      	movs	r0, #18
1000c4f4:	4c43      	ldr	r4, [pc, #268]	; (1000c604 <uart_init+0x198>)
1000c4f6:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000c4f8:	4947      	ldr	r1, [pc, #284]	; (1000c618 <uart_init+0x1ac>)
1000c4fa:	2013      	movs	r0, #19
1000c4fc:	47a0      	blx	r4
1000c4fe:	4b43      	ldr	r3, [pc, #268]	; (1000c60c <uart_init+0x1a0>)
1000c500:	2204      	movs	r2, #4
1000c502:	601a      	str	r2, [r3, #0]
1000c504:	3204      	adds	r2, #4
1000c506:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000c508:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000c50a:	2204      	movs	r2, #4
1000c50c:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000c50e:	2b00      	cmp	r3, #0
1000c510:	d152      	bne.n	1000c5b8 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000c512:	3302      	adds	r3, #2
1000c514:	4698      	mov	r8, r3
1000c516:	e04f      	b.n	1000c5b8 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000c518:	8a31      	ldrh	r1, [r6, #16]
1000c51a:	ce01      	ldmia	r6!, {r0}
1000c51c:	b2c0      	uxtb	r0, r0
1000c51e:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000c520:	3401      	adds	r4, #1
1000c522:	b2e4      	uxtb	r4, r4
1000c524:	4544      	cmp	r4, r8
1000c526:	d3f7      	bcc.n	1000c518 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c528:	682b      	ldr	r3, [r5, #0]
1000c52a:	7d1a      	ldrb	r2, [r3, #20]
1000c52c:	07d2      	lsls	r2, r2, #31
1000c52e:	d504      	bpl.n	1000c53a <uart_init+0xce>
1000c530:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000c532:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c534:	7d1a      	ldrb	r2, [r3, #20]
1000c536:	420a      	tst	r2, r1
1000c538:	d1fb      	bne.n	1000c532 <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000c53a:	2100      	movs	r1, #0
1000c53c:	2220      	movs	r2, #32
1000c53e:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000c540:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000c542:	1e59      	subs	r1, r3, #1
1000c544:	418b      	sbcs	r3, r1
1000c546:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000c548:	793b      	ldrb	r3, [r7, #4]
1000c54a:	797a      	ldrb	r2, [r7, #5]
1000c54c:	4313      	orrs	r3, r2
1000c54e:	430b      	orrs	r3, r1
	switch(config->parity) {
1000c550:	79ba      	ldrb	r2, [r7, #6]
1000c552:	2a02      	cmp	r2, #2
1000c554:	d00d      	beq.n	1000c572 <uart_init+0x106>
1000c556:	b2d1      	uxtb	r1, r2
1000c558:	2902      	cmp	r1, #2
1000c55a:	d802      	bhi.n	1000c562 <uart_init+0xf6>
1000c55c:	2a01      	cmp	r2, #1
1000c55e:	d005      	beq.n	1000c56c <uart_init+0x100>
1000c560:	e00f      	b.n	1000c582 <uart_init+0x116>
1000c562:	2a03      	cmp	r2, #3
1000c564:	d008      	beq.n	1000c578 <uart_init+0x10c>
1000c566:	2a04      	cmp	r2, #4
1000c568:	d009      	beq.n	1000c57e <uart_init+0x112>
1000c56a:	e00a      	b.n	1000c582 <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000c56c:	2202      	movs	r2, #2
1000c56e:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000c570:	e007      	b.n	1000c582 <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000c572:	2206      	movs	r2, #6
1000c574:	4313      	orrs	r3, r2
			break;
1000c576:	e004      	b.n	1000c582 <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000c578:	220a      	movs	r2, #10
1000c57a:	4313      	orrs	r3, r2
			break;
1000c57c:	e001      	b.n	1000c582 <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000c57e:	220e      	movs	r2, #14
1000c580:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000c582:	2220      	movs	r2, #32
1000c584:	6829      	ldr	r1, [r5, #0]
1000c586:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000c588:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000c58a:	4b24      	ldr	r3, [pc, #144]	; (1000c61c <uart_init+0x1b0>)
1000c58c:	4798      	blx	r3
1000c58e:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000c590:	0031      	movs	r1, r6
1000c592:	4b23      	ldr	r3, [pc, #140]	; (1000c620 <uart_init+0x1b4>)
1000c594:	4798      	blx	r3
1000c596:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000c598:	0400      	lsls	r0, r0, #16
1000c59a:	0c00      	lsrs	r0, r0, #16
1000c59c:	4370      	muls	r0, r6
1000c59e:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000c5a0:	0931      	lsrs	r1, r6, #4
1000c5a2:	4288      	cmp	r0, r1
1000c5a4:	d906      	bls.n	1000c5b4 <uart_init+0x148>
1000c5a6:	2300      	movs	r3, #0
		i++;
1000c5a8:	3301      	adds	r3, #1
1000c5aa:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000c5ac:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000c5ae:	4288      	cmp	r0, r1
1000c5b0:	d8fa      	bhi.n	1000c5a8 <uart_init+0x13c>
1000c5b2:	e007      	b.n	1000c5c4 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000c5b4:	2300      	movs	r3, #0
1000c5b6:	e005      	b.n	1000c5c4 <uart_init+0x158>
1000c5b8:	003e      	movs	r6, r7
1000c5ba:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000c5bc:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000c5be:	4b19      	ldr	r3, [pc, #100]	; (1000c624 <uart_init+0x1b8>)
1000c5c0:	4699      	mov	r9, r3
1000c5c2:	e7a9      	b.n	1000c518 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000c5c4:	2100      	movs	r1, #0
1000c5c6:	2028      	movs	r0, #40	; 0x28
1000c5c8:	682c      	ldr	r4, [r5, #0]
1000c5ca:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000c5cc:	3301      	adds	r3, #1
1000c5ce:	071b      	lsls	r3, r3, #28
1000c5d0:	0f5b      	lsrs	r3, r3, #29
1000c5d2:	00d2      	lsls	r2, r2, #3
1000c5d4:	4313      	orrs	r3, r2
1000c5d6:	b29b      	uxth	r3, r3
1000c5d8:	682a      	ldr	r2, [r5, #0]
1000c5da:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000c5dc:	682b      	ldr	r3, [r5, #0]
1000c5de:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000c5e0:	682b      	ldr	r3, [r5, #0]
1000c5e2:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000c5e4:	2000      	movs	r0, #0
1000c5e6:	bc0c      	pop	{r2, r3}
1000c5e8:	4690      	mov	r8, r2
1000c5ea:	4699      	mov	r9, r3
1000c5ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c5ee:	46c0      	nop			; (mov r8, r8)
1000c5f0:	40004000 	.word	0x40004000
1000c5f4:	10008c39 	.word	0x10008c39
1000c5f8:	100088dd 	.word	0x100088dd
1000c5fc:	10015f68 	.word	0x10015f68
1000c600:	1000c219 	.word	0x1000c219
1000c604:	100090a1 	.word	0x100090a1
1000c608:	1000c2a1 	.word	0x1000c2a1
1000c60c:	e000e100 	.word	0xe000e100
1000c610:	40005000 	.word	0x40005000
1000c614:	1000c32d 	.word	0x1000c32d
1000c618:	1000c3b5 	.word	0x1000c3b5
1000c61c:	100088d1 	.word	0x100088d1
1000c620:	1000fd65 	.word	0x1000fd65
1000c624:	1000852d 	.word	0x1000852d

1000c628 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000c628:	6802      	ldr	r2, [r0, #0]
1000c62a:	2001      	movs	r0, #1
1000c62c:	7913      	ldrb	r3, [r2, #4]
1000c62e:	4203      	tst	r3, r0
1000c630:	d0fc      	beq.n	1000c62c <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000c632:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000c634:	2000      	movs	r0, #0
1000c636:	4770      	bx	lr

1000c638 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000c638:	6802      	ldr	r2, [r0, #0]
1000c63a:	2001      	movs	r0, #1
1000c63c:	7d13      	ldrb	r3, [r2, #20]
1000c63e:	4203      	tst	r3, r0
1000c640:	d0fc      	beq.n	1000c63c <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000c642:	7c13      	ldrb	r3, [r2, #16]
1000c644:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000c646:	2000      	movs	r0, #0
1000c648:	4770      	bx	lr
1000c64a:	46c0      	nop			; (mov r8, r8)

1000c64c <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000c64c:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000c64e:	2a00      	cmp	r2, #0
1000c650:	d00d      	beq.n	1000c66e <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000c652:	330b      	adds	r3, #11
1000c654:	5cc3      	ldrb	r3, [r0, r3]
1000c656:	b2db      	uxtb	r3, r3
1000c658:	2b05      	cmp	r3, #5
1000c65a:	d008      	beq.n	1000c66e <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000c65c:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000c65e:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000c660:	2205      	movs	r2, #5
1000c662:	2322      	movs	r3, #34	; 0x22
1000c664:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000c666:	6803      	ldr	r3, [r0, #0]
1000c668:	3a04      	subs	r2, #4
1000c66a:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000c66c:	2300      	movs	r3, #0
}
1000c66e:	0018      	movs	r0, r3
1000c670:	4770      	bx	lr
1000c672:	46c0      	nop			; (mov r8, r8)

1000c674 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000c674:	0093      	lsls	r3, r2, #2
1000c676:	18c3      	adds	r3, r0, r3
1000c678:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000c67a:	2120      	movs	r1, #32
1000c67c:	2301      	movs	r3, #1
1000c67e:	4093      	lsls	r3, r2
1000c680:	5c42      	ldrb	r2, [r0, r1]
1000c682:	4313      	orrs	r3, r2
1000c684:	5443      	strb	r3, [r0, r1]
}
1000c686:	4770      	bx	lr

1000c688 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000c688:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000c68a:	2221      	movs	r2, #33	; 0x21
1000c68c:	2301      	movs	r3, #1
1000c68e:	408b      	lsls	r3, r1
1000c690:	5c84      	ldrb	r4, [r0, r2]
1000c692:	4323      	orrs	r3, r4
1000c694:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000c696:	2901      	cmp	r1, #1
1000c698:	d104      	bne.n	1000c6a4 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000c69a:	6802      	ldr	r2, [r0, #0]
1000c69c:	7a11      	ldrb	r1, [r2, #8]
1000c69e:	2320      	movs	r3, #32
1000c6a0:	430b      	orrs	r3, r1
1000c6a2:	7213      	strb	r3, [r2, #8]
	}
}
1000c6a4:	bd10      	pop	{r4, pc}
1000c6a6:	46c0      	nop			; (mov r8, r8)

1000c6a8 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000c6a8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000c6aa:	2201      	movs	r2, #1
1000c6ac:	408a      	lsls	r2, r1
1000c6ae:	2421      	movs	r4, #33	; 0x21
1000c6b0:	5d03      	ldrb	r3, [r0, r4]
1000c6b2:	4393      	bics	r3, r2
1000c6b4:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000c6b6:	2901      	cmp	r1, #1
1000c6b8:	d104      	bne.n	1000c6c4 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000c6ba:	6802      	ldr	r2, [r0, #0]
1000c6bc:	7a13      	ldrb	r3, [r2, #8]
1000c6be:	311f      	adds	r1, #31
1000c6c0:	438b      	bics	r3, r1
1000c6c2:	7213      	strb	r3, [r2, #8]
	}

}
1000c6c4:	bd10      	pop	{r4, pc}
1000c6c6:	46c0      	nop			; (mov r8, r8)

1000c6c8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
1000c6c8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000c6ca:	4a06      	ldr	r2, [pc, #24]	; (1000c6e4 <_sbrk+0x1c>)
1000c6cc:	6812      	ldr	r2, [r2, #0]
1000c6ce:	2a00      	cmp	r2, #0
1000c6d0:	d102      	bne.n	1000c6d8 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
1000c6d2:	4905      	ldr	r1, [pc, #20]	; (1000c6e8 <_sbrk+0x20>)
1000c6d4:	4a03      	ldr	r2, [pc, #12]	; (1000c6e4 <_sbrk+0x1c>)
1000c6d6:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000c6d8:	4a02      	ldr	r2, [pc, #8]	; (1000c6e4 <_sbrk+0x1c>)
1000c6da:	6810      	ldr	r0, [r2, #0]

	heap += incr;
1000c6dc:	18c3      	adds	r3, r0, r3
1000c6de:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
1000c6e0:	4770      	bx	lr
1000c6e2:	46c0      	nop			; (mov r8, r8)
1000c6e4:	1001519c 	.word	0x1001519c
1000c6e8:	10016cf0 	.word	0x10016cf0

1000c6ec <_close>:
}

extern int _close(int file)
{
	return -1;
}
1000c6ec:	2001      	movs	r0, #1
1000c6ee:	4240      	negs	r0, r0
1000c6f0:	4770      	bx	lr
1000c6f2:	46c0      	nop			; (mov r8, r8)

1000c6f4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000c6f4:	2380      	movs	r3, #128	; 0x80
1000c6f6:	019b      	lsls	r3, r3, #6
1000c6f8:	604b      	str	r3, [r1, #4]

	return 0;
}
1000c6fa:	2000      	movs	r0, #0
1000c6fc:	4770      	bx	lr
1000c6fe:	46c0      	nop			; (mov r8, r8)

1000c700 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000c700:	2001      	movs	r0, #1
1000c702:	4770      	bx	lr

1000c704 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
1000c704:	2000      	movs	r0, #0
1000c706:	4770      	bx	lr

1000c708 <resume_cb>:
    button_instance.btn1.char_value = 0;
}


static void resume_cb(void)
{
1000c708:	b510      	push	{r4, lr}
    init_port_list(); // re-initialize all ports
1000c70a:	4b04      	ldr	r3, [pc, #16]	; (1000c71c <resume_cb+0x14>)
1000c70c:	4798      	blx	r3
    serial_console_init(); // GPIO (UART) for the console
1000c70e:	4b04      	ldr	r3, [pc, #16]	; (1000c720 <resume_cb+0x18>)
1000c710:	4798      	blx	r3
    sms_dualtimer_init();
1000c712:	4b04      	ldr	r3, [pc, #16]	; (1000c724 <resume_cb+0x1c>)
1000c714:	4798      	blx	r3
    //delay_init();
    sms_button_configure_gpio(); // GPIO (AO_0 & AO_1) for the buttons
1000c716:	4b04      	ldr	r3, [pc, #16]	; (1000c728 <resume_cb+0x20>)
1000c718:	4798      	blx	r3
    //sms_led_gpio_init();
    //sms_monitor_configure_gpio();
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000c71a:	bd10      	pop	{r4, pc}
1000c71c:	1000945d 	.word	0x1000945d
1000c720:	100091c5 	.word	0x100091c5
1000c724:	1000a67d 	.word	0x1000a67d
1000c728:	1000a259 	.word	0x1000a259

1000c72c <sms_init_variables>:
/*- Includes ---------------------------------------------------------------*/
#include "sms_remote1.h"

void sms_init_variables(void)
{
    timer1_current_mode = TIMER1_MODE_NONE;
1000c72c:	2300      	movs	r3, #0
1000c72e:	2200      	movs	r2, #0
1000c730:	490e      	ldr	r1, [pc, #56]	; (1000c76c <sms_init_variables+0x40>)
1000c732:	700b      	strb	r3, [r1, #0]
    timer2_current_mode = TIMER2_MODE_NONE;
1000c734:	490e      	ldr	r1, [pc, #56]	; (1000c770 <sms_init_variables+0x44>)
1000c736:	700b      	strb	r3, [r1, #0]
    sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000c738:	2101      	movs	r1, #1
1000c73a:	480e      	ldr	r0, [pc, #56]	; (1000c774 <sms_init_variables+0x48>)
1000c73c:	7001      	strb	r1, [r0, #0]
    ulp_ready = false;
1000c73e:	480e      	ldr	r0, [pc, #56]	; (1000c778 <sms_init_variables+0x4c>)
1000c740:	7003      	strb	r3, [r0, #0]

	// BLE
    ble_current_state = BLE_STATE_POWEROFF;
1000c742:	480e      	ldr	r0, [pc, #56]	; (1000c77c <sms_init_variables+0x50>)
1000c744:	7003      	strb	r3, [r0, #0]
    sms_ble_send_cnt = 0;
1000c746:	480e      	ldr	r0, [pc, #56]	; (1000c780 <sms_init_variables+0x54>)
1000c748:	8003      	strh	r3, [r0, #0]

	// button
    button_instance.current_state = BUTTON_STATE_NONE;
1000c74a:	4b0e      	ldr	r3, [pc, #56]	; (1000c784 <sms_init_variables+0x58>)
1000c74c:	2000      	movs	r0, #0
1000c74e:	7358      	strb	r0, [r3, #13]
    button_instance.btn0.id = SMS_BTN_0;
1000c750:	701a      	strb	r2, [r3, #0]
    button_instance.btn0.gpio_pin = SMS_BTN_0_PIN;
1000c752:	201f      	movs	r0, #31
1000c754:	7058      	strb	r0, [r3, #1]
    button_instance.btn0.int_enabled = true;
1000c756:	7099      	strb	r1, [r3, #2]
	button_instance.btn0.new_int = false;
1000c758:	70da      	strb	r2, [r3, #3]
    button_instance.btn0.char_value = 0;
1000c75a:	715a      	strb	r2, [r3, #5]
    button_instance.btn1.id = SMS_BTN_1;
1000c75c:	7199      	strb	r1, [r3, #6]
    button_instance.btn1.gpio_pin = SMS_BTN_1_PIN;
1000c75e:	3802      	subs	r0, #2
1000c760:	71d8      	strb	r0, [r3, #7]
    button_instance.btn1.int_enabled = true;
1000c762:	7219      	strb	r1, [r3, #8]
	button_instance.btn1.new_int = false;
1000c764:	725a      	strb	r2, [r3, #9]
    button_instance.btn1.char_value = 0;
1000c766:	72da      	strb	r2, [r3, #11]
}
1000c768:	4770      	bx	lr
1000c76a:	46c0      	nop			; (mov r8, r8)
1000c76c:	1001569c 	.word	0x1001569c
1000c770:	10015713 	.word	0x10015713
1000c774:	1001569e 	.word	0x1001569e
1000c778:	1001569f 	.word	0x1001569f
1000c77c:	1001570c 	.word	0x1001570c
1000c780:	1001571c 	.word	0x1001571c
1000c784:	100156a4 	.word	0x100156a4

1000c788 <main>:
	//sms_current_interrupt.int_on = true;
//}


int main(void)
{
1000c788:	b570      	push	{r4, r5, r6, lr}
    /* Define current BLE state
     * ------------------------ */
    ble_current_state = BLE_STATE_STARTING;
1000c78a:	2210      	movs	r2, #16
1000c78c:	4b44      	ldr	r3, [pc, #272]	; (1000c8a0 <main+0x118>)
1000c78e:	701a      	strb	r2, [r3, #0]
    
    /* Initialize platform
     * ------------------- */
	platform_driver_init();
1000c790:	4b44      	ldr	r3, [pc, #272]	; (1000c8a4 <main+0x11c>)
1000c792:	4798      	blx	r3
	gpio_init(); // GPIO
1000c794:	4b44      	ldr	r3, [pc, #272]	; (1000c8a8 <main+0x120>)
1000c796:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000c798:	4b44      	ldr	r3, [pc, #272]	; (1000c8ac <main+0x124>)
1000c79a:	4798      	blx	r3
	//acquire_sleep_lock();
    

    /* Initialize SMS flags
     * -------------------- */
    sms_init_variables();
1000c79c:	4b44      	ldr	r3, [pc, #272]	; (1000c8b0 <main+0x128>)
1000c79e:	4798      	blx	r3
    
    
    /* Initialize hardware components
     * ------------------------------ */
    // Dualtimer
    sms_dualtimer_init();
1000c7a0:	4b44      	ldr	r3, [pc, #272]	; (1000c8b4 <main+0x12c>)
1000c7a2:	4798      	blx	r3
	
    // Blocking delay (hacked from other SAM platforms)
    //delay_init();

	// Buttons
    sms_button_configure_gpio();
1000c7a4:	4b44      	ldr	r3, [pc, #272]	; (1000c8b8 <main+0x130>)
1000c7a6:	4798      	blx	r3
	// monitoring...
    //sms_monitor_configure_gpio();
    
    /* Initialize the BLE module
     * ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address 
1000c7a8:	2000      	movs	r0, #0
1000c7aa:	4b44      	ldr	r3, [pc, #272]	; (1000c8bc <main+0x134>)
1000c7ac:	4798      	blx	r3
	
    
    /* Define BLE services
     * ------------------- */
    sms_button_define_services();
1000c7ae:	4b44      	ldr	r3, [pc, #272]	; (1000c8c0 <main+0x138>)
1000c7b0:	4798      	blx	r3
    
    /* Register callbacks
     * ------------------ */
    // Recovering from ULP
    register_resume_callback(resume_cb); // register resume callback
1000c7b2:	4844      	ldr	r0, [pc, #272]	; (1000c8c4 <main+0x13c>)
1000c7b4:	4b44      	ldr	r3, [pc, #272]	; (1000c8c8 <main+0x140>)
1000c7b6:	4798      	blx	r3

    // Dualtimer (AON timer enables on registration... so do it later)    
    sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
1000c7b8:	4944      	ldr	r1, [pc, #272]	; (1000c8cc <main+0x144>)
1000c7ba:	2000      	movs	r0, #0
1000c7bc:	4c44      	ldr	r4, [pc, #272]	; (1000c8d0 <main+0x148>)
1000c7be:	47a0      	blx	r4
    sms_dualtimer_register_callback(DUALTIMER_TIMER2, sms_dualtimer2_cb); // LED blinking timer
1000c7c0:	4944      	ldr	r1, [pc, #272]	; (1000c8d4 <main+0x14c>)
1000c7c2:	2001      	movs	r0, #1
1000c7c4:	47a0      	blx	r4

    // Buttons
    sms_button_register_callbacks();
1000c7c6:	4b44      	ldr	r3, [pc, #272]	; (1000c8d8 <main+0x150>)
1000c7c8:	4798      	blx	r3
    
    // BLE
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000c7ca:	4a44      	ldr	r2, [pc, #272]	; (1000c8dc <main+0x154>)
1000c7cc:	2100      	movs	r1, #0
1000c7ce:	2000      	movs	r0, #0
1000c7d0:	4c43      	ldr	r4, [pc, #268]	; (1000c8e0 <main+0x158>)
1000c7d2:	47a0      	blx	r4
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000c7d4:	4a43      	ldr	r2, [pc, #268]	; (1000c8e4 <main+0x15c>)
1000c7d6:	2102      	movs	r1, #2
1000c7d8:	2000      	movs	r0, #0
1000c7da:	47a0      	blx	r4
    //register_ble_user_event_cb(sms_plf_event_cb);

    /* Enable buttons interrupts
     * ------------------------- */
    sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000c7dc:	2100      	movs	r1, #0
1000c7de:	2000      	movs	r0, #0
1000c7e0:	4b41      	ldr	r3, [pc, #260]	; (1000c8e8 <main+0x160>)
1000c7e2:	4798      	blx	r3
    
	
    /* Goto sleep
     * ---------- */
    //sms_ble_power_down();
	ulp_ready = true;
1000c7e4:	2201      	movs	r2, #1
1000c7e6:	4b41      	ldr	r3, [pc, #260]	; (1000c8ec <main+0x164>)
1000c7e8:	701a      	strb	r2, [r3, #0]
	ble_set_ulp_mode(BLE_ULP_MODE_SET);	
1000c7ea:	2001      	movs	r0, #1
1000c7ec:	4b40      	ldr	r3, [pc, #256]	; (1000c8f0 <main+0x168>)
1000c7ee:	4798      	blx	r3
    
	while(true)
	{
		/* BLE Event task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000c7f0:	4e40      	ldr	r6, [pc, #256]	; (1000c8f4 <main+0x16c>)
		
		/* Sensor interrupt region */
		if(button_instance.btn0.new_int) {
1000c7f2:	4d41      	ldr	r5, [pc, #260]	; (1000c8f8 <main+0x170>)
			DBG_LOG_DEV("Waking up... Btn0 int");
1000c7f4:	4c41      	ldr	r4, [pc, #260]	; (1000c8fc <main+0x174>)
	ble_set_ulp_mode(BLE_ULP_MODE_SET);	
    
	while(true)
	{
		/* BLE Event task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000c7f6:	2001      	movs	r0, #1
1000c7f8:	4240      	negs	r0, r0
1000c7fa:	47b0      	blx	r6
		
		/* Sensor interrupt region */
		if(button_instance.btn0.new_int) {
1000c7fc:	78eb      	ldrb	r3, [r5, #3]
1000c7fe:	2b00      	cmp	r3, #0
1000c800:	d012      	beq.n	1000c828 <main+0xa0>
			DBG_LOG_DEV("Waking up... Btn0 int");
1000c802:	0020      	movs	r0, r4
1000c804:	4b3e      	ldr	r3, [pc, #248]	; (1000c900 <main+0x178>)
1000c806:	4798      	blx	r3
1000c808:	483e      	ldr	r0, [pc, #248]	; (1000c904 <main+0x17c>)
1000c80a:	4b3f      	ldr	r3, [pc, #252]	; (1000c908 <main+0x180>)
1000c80c:	4798      	blx	r3
			//if(sms_button_fn(SMS_BTN_0) < 0) {
			if(sms_button_fn() < 0) {
1000c80e:	4b3f      	ldr	r3, [pc, #252]	; (1000c90c <main+0x184>)
1000c810:	4798      	blx	r3
1000c812:	2800      	cmp	r0, #0
1000c814:	da05      	bge.n	1000c822 <main+0x9a>
				DBG_LOG_DEV("Error in sms_button_fn()");
1000c816:	4839      	ldr	r0, [pc, #228]	; (1000c8fc <main+0x174>)
1000c818:	4b39      	ldr	r3, [pc, #228]	; (1000c900 <main+0x178>)
1000c81a:	4798      	blx	r3
1000c81c:	483c      	ldr	r0, [pc, #240]	; (1000c910 <main+0x188>)
1000c81e:	4b3a      	ldr	r3, [pc, #232]	; (1000c908 <main+0x180>)
1000c820:	4798      	blx	r3
			}
			// here
			button_instance.btn0.new_int = false;
1000c822:	2200      	movs	r2, #0
1000c824:	4b34      	ldr	r3, [pc, #208]	; (1000c8f8 <main+0x170>)
1000c826:	70da      	strb	r2, [r3, #3]
		}
		if(button_instance.btn1.new_int) {
1000c828:	4b33      	ldr	r3, [pc, #204]	; (1000c8f8 <main+0x170>)
1000c82a:	7a5b      	ldrb	r3, [r3, #9]
1000c82c:	2b00      	cmp	r3, #0
1000c82e:	d012      	beq.n	1000c856 <main+0xce>
			DBG_LOG_DEV("Waking up... Btn1 int");
1000c830:	4832      	ldr	r0, [pc, #200]	; (1000c8fc <main+0x174>)
1000c832:	4b33      	ldr	r3, [pc, #204]	; (1000c900 <main+0x178>)
1000c834:	4798      	blx	r3
1000c836:	4837      	ldr	r0, [pc, #220]	; (1000c914 <main+0x18c>)
1000c838:	4b33      	ldr	r3, [pc, #204]	; (1000c908 <main+0x180>)
1000c83a:	4798      	blx	r3
			//if(sms_button_fn(SMS_BTN_1) < 0) {
			if(sms_button_fn() < 0) {
1000c83c:	4b33      	ldr	r3, [pc, #204]	; (1000c90c <main+0x184>)
1000c83e:	4798      	blx	r3
1000c840:	2800      	cmp	r0, #0
1000c842:	da05      	bge.n	1000c850 <main+0xc8>
				DBG_LOG_DEV("Error in sms_button_fn()");
1000c844:	482d      	ldr	r0, [pc, #180]	; (1000c8fc <main+0x174>)
1000c846:	4b2e      	ldr	r3, [pc, #184]	; (1000c900 <main+0x178>)
1000c848:	4798      	blx	r3
1000c84a:	4831      	ldr	r0, [pc, #196]	; (1000c910 <main+0x188>)
1000c84c:	4b2e      	ldr	r3, [pc, #184]	; (1000c908 <main+0x180>)
1000c84e:	4798      	blx	r3
			}
			// here
			button_instance.btn1.new_int = false;
1000c850:	2200      	movs	r2, #0
1000c852:	4b29      	ldr	r3, [pc, #164]	; (1000c8f8 <main+0x170>)
1000c854:	725a      	strb	r2, [r3, #9]
		}

		/* Timer interrupt region */
		if(timer1_instance.new_int) {
1000c856:	4b30      	ldr	r3, [pc, #192]	; (1000c918 <main+0x190>)
1000c858:	789b      	ldrb	r3, [r3, #2]
1000c85a:	2b00      	cmp	r3, #0
1000c85c:	d00d      	beq.n	1000c87a <main+0xf2>
			DBG_LOG_DEV("Timer1 int... ");
1000c85e:	4827      	ldr	r0, [pc, #156]	; (1000c8fc <main+0x174>)
1000c860:	4b27      	ldr	r3, [pc, #156]	; (1000c900 <main+0x178>)
1000c862:	4798      	blx	r3
1000c864:	482d      	ldr	r0, [pc, #180]	; (1000c91c <main+0x194>)
1000c866:	4b28      	ldr	r3, [pc, #160]	; (1000c908 <main+0x180>)
1000c868:	4798      	blx	r3
			sms_dualtimer_stop(DUALTIMER_TIMER1);
1000c86a:	2000      	movs	r0, #0
1000c86c:	4b2c      	ldr	r3, [pc, #176]	; (1000c920 <main+0x198>)
1000c86e:	4798      	blx	r3
			sms_dualtimer1_fn();
1000c870:	4b2c      	ldr	r3, [pc, #176]	; (1000c924 <main+0x19c>)
1000c872:	4798      	blx	r3
			timer1_instance.new_int = false;
1000c874:	2200      	movs	r2, #0
1000c876:	4b28      	ldr	r3, [pc, #160]	; (1000c918 <main+0x190>)
1000c878:	709a      	strb	r2, [r3, #2]
		}
		if(timer2_instance.new_int) {
1000c87a:	4b2b      	ldr	r3, [pc, #172]	; (1000c928 <main+0x1a0>)
1000c87c:	789b      	ldrb	r3, [r3, #2]
1000c87e:	2b00      	cmp	r3, #0
1000c880:	d0b9      	beq.n	1000c7f6 <main+0x6e>
			DBG_LOG_DEV("Timer2 int... ");
1000c882:	481e      	ldr	r0, [pc, #120]	; (1000c8fc <main+0x174>)
1000c884:	4b1e      	ldr	r3, [pc, #120]	; (1000c900 <main+0x178>)
1000c886:	4798      	blx	r3
1000c888:	4828      	ldr	r0, [pc, #160]	; (1000c92c <main+0x1a4>)
1000c88a:	4b1f      	ldr	r3, [pc, #124]	; (1000c908 <main+0x180>)
1000c88c:	4798      	blx	r3
			sms_dualtimer_stop(DUALTIMER_TIMER2);
1000c88e:	2001      	movs	r0, #1
1000c890:	4b23      	ldr	r3, [pc, #140]	; (1000c920 <main+0x198>)
1000c892:	4798      	blx	r3
			sms_dualtimer2_fn();
1000c894:	4b26      	ldr	r3, [pc, #152]	; (1000c930 <main+0x1a8>)
1000c896:	4798      	blx	r3
			timer2_instance.new_int = false;
1000c898:	2200      	movs	r2, #0
1000c89a:	4b23      	ldr	r3, [pc, #140]	; (1000c928 <main+0x1a0>)
1000c89c:	709a      	strb	r2, [r3, #2]
1000c89e:	e7aa      	b.n	1000c7f6 <main+0x6e>
1000c8a0:	1001570c 	.word	0x1001570c
1000c8a4:	100094d1 	.word	0x100094d1
1000c8a8:	100087e1 	.word	0x100087e1
1000c8ac:	100091c5 	.word	0x100091c5
1000c8b0:	1000c72d 	.word	0x1000c72d
1000c8b4:	1000a67d 	.word	0x1000a67d
1000c8b8:	1000a259 	.word	0x1000a259
1000c8bc:	1000b91d 	.word	0x1000b91d
1000c8c0:	1000a52d 	.word	0x1000a52d
1000c8c4:	1000c709 	.word	0x1000c709
1000c8c8:	10009a69 	.word	0x10009a69
1000c8cc:	1000a73d 	.word	0x1000a73d
1000c8d0:	1000a6b9 	.word	0x1000a6b9
1000c8d4:	1000a75d 	.word	0x1000a75d
1000c8d8:	1000a335 	.word	0x1000a335
1000c8dc:	10012640 	.word	0x10012640
1000c8e0:	1000b84d 	.word	0x1000b84d
1000c8e4:	1001268c 	.word	0x1001268c
1000c8e8:	1000a4e5 	.word	0x1000a4e5
1000c8ec:	1001569f 	.word	0x1001569f
1000c8f0:	1000b841 	.word	0x1000b841
1000c8f4:	1000c115 	.word	0x1000c115
1000c8f8:	100156a4 	.word	0x100156a4
1000c8fc:	1001227c 	.word	0x1001227c
1000c900:	10010fb1 	.word	0x10010fb1
1000c904:	100135b0 	.word	0x100135b0
1000c908:	10010e91 	.word	0x10010e91
1000c90c:	1000a3a9 	.word	0x1000a3a9
1000c910:	100135c8 	.word	0x100135c8
1000c914:	100135e4 	.word	0x100135e4
1000c918:	10015704 	.word	0x10015704
1000c91c:	100135fc 	.word	0x100135fc
1000c920:	1000a731 	.word	0x1000a731
1000c924:	1000a77d 	.word	0x1000a77d
1000c928:	10015710 	.word	0x10015710
1000c92c:	1001360c 	.word	0x1001360c
1000c930:	1000a989 	.word	0x1000a989

1000c934 <internal_event_post>:
1000c934:	b570      	push	{r4, r5, r6, lr}
1000c936:	4d12      	ldr	r5, [pc, #72]	; (1000c980 <internal_event_post+0x4c>)
1000c938:	682c      	ldr	r4, [r5, #0]
1000c93a:	2c00      	cmp	r4, #0
1000c93c:	d014      	beq.n	1000c968 <internal_event_post+0x34>
1000c93e:	6826      	ldr	r6, [r4, #0]
1000c940:	60e2      	str	r2, [r4, #12]
1000c942:	602e      	str	r6, [r5, #0]
1000c944:	2500      	movs	r5, #0
1000c946:	4a0f      	ldr	r2, [pc, #60]	; (1000c984 <internal_event_post+0x50>)
1000c948:	8123      	strh	r3, [r4, #8]
1000c94a:	6813      	ldr	r3, [r2, #0]
1000c94c:	6025      	str	r5, [r4, #0]
1000c94e:	80a0      	strh	r0, [r4, #4]
1000c950:	80e1      	strh	r1, [r4, #6]
1000c952:	42ab      	cmp	r3, r5
1000c954:	d101      	bne.n	1000c95a <internal_event_post+0x26>
1000c956:	6014      	str	r4, [r2, #0]
1000c958:	e011      	b.n	1000c97e <internal_event_post+0x4a>
1000c95a:	681a      	ldr	r2, [r3, #0]
1000c95c:	2a00      	cmp	r2, #0
1000c95e:	d001      	beq.n	1000c964 <internal_event_post+0x30>
1000c960:	1c13      	adds	r3, r2, #0
1000c962:	e7fa      	b.n	1000c95a <internal_event_post+0x26>
1000c964:	601c      	str	r4, [r3, #0]
1000c966:	e00a      	b.n	1000c97e <internal_event_post+0x4a>
1000c968:	b2c4      	uxtb	r4, r0
1000c96a:	2c00      	cmp	r4, #0
1000c96c:	d107      	bne.n	1000c97e <internal_event_post+0x4a>
1000c96e:	4c06      	ldr	r4, [pc, #24]	; (1000c988 <internal_event_post+0x54>)
1000c970:	60e2      	str	r2, [r4, #12]
1000c972:	2201      	movs	r2, #1
1000c974:	8123      	strh	r3, [r4, #8]
1000c976:	4b05      	ldr	r3, [pc, #20]	; (1000c98c <internal_event_post+0x58>)
1000c978:	80a0      	strh	r0, [r4, #4]
1000c97a:	80e1      	strh	r1, [r4, #6]
1000c97c:	701a      	strb	r2, [r3, #0]
1000c97e:	bd70      	pop	{r4, r5, r6, pc}
1000c980:	100151b8 	.word	0x100151b8
1000c984:	100151b4 	.word	0x100151b4
1000c988:	100151a0 	.word	0x100151a0
1000c98c:	100151b0 	.word	0x100151b0

1000c990 <internal_event_init>:
1000c990:	b510      	push	{r4, lr}
1000c992:	4b08      	ldr	r3, [pc, #32]	; (1000c9b4 <internal_event_init+0x24>)
1000c994:	0900      	lsrs	r0, r0, #4
1000c996:	0100      	lsls	r0, r0, #4
1000c998:	681a      	ldr	r2, [r3, #0]
1000c99a:	1808      	adds	r0, r1, r0
1000c99c:	4281      	cmp	r1, r0
1000c99e:	d003      	beq.n	1000c9a8 <internal_event_init+0x18>
1000c9a0:	600a      	str	r2, [r1, #0]
1000c9a2:	1c0a      	adds	r2, r1, #0
1000c9a4:	3110      	adds	r1, #16
1000c9a6:	e7f9      	b.n	1000c99c <internal_event_init+0xc>
1000c9a8:	601a      	str	r2, [r3, #0]
1000c9aa:	2200      	movs	r2, #0
1000c9ac:	4b02      	ldr	r3, [pc, #8]	; (1000c9b8 <internal_event_init+0x28>)
1000c9ae:	601a      	str	r2, [r3, #0]
1000c9b0:	bd10      	pop	{r4, pc}
1000c9b2:	46c0      	nop			; (mov r8, r8)
1000c9b4:	100151b8 	.word	0x100151b8
1000c9b8:	100151b4 	.word	0x100151b4

1000c9bc <special_events_handler>:
1000c9bc:	b538      	push	{r3, r4, r5, lr}
1000c9be:	4c1b      	ldr	r4, [pc, #108]	; (1000ca2c <special_events_handler+0x70>)
1000c9c0:	1c03      	adds	r3, r0, #0
1000c9c2:	8825      	ldrh	r5, [r4, #0]
1000c9c4:	1c08      	adds	r0, r1, #0
1000c9c6:	1c21      	adds	r1, r4, #0
1000c9c8:	429d      	cmp	r5, r3
1000c9ca:	d107      	bne.n	1000c9dc <special_events_handler+0x20>
1000c9cc:	88a5      	ldrh	r5, [r4, #4]
1000c9ce:	4285      	cmp	r5, r0
1000c9d0:	d104      	bne.n	1000c9dc <special_events_handler+0x20>
1000c9d2:	2301      	movs	r3, #1
1000c9d4:	425b      	negs	r3, r3
1000c9d6:	8023      	strh	r3, [r4, #0]
1000c9d8:	60a2      	str	r2, [r4, #8]
1000c9da:	e009      	b.n	1000c9f0 <special_events_handler+0x34>
1000c9dc:	884c      	ldrh	r4, [r1, #2]
1000c9de:	429c      	cmp	r4, r3
1000c9e0:	d10a      	bne.n	1000c9f8 <special_events_handler+0x3c>
1000c9e2:	888c      	ldrh	r4, [r1, #4]
1000c9e4:	4284      	cmp	r4, r0
1000c9e6:	d107      	bne.n	1000c9f8 <special_events_handler+0x3c>
1000c9e8:	2301      	movs	r3, #1
1000c9ea:	425b      	negs	r3, r3
1000c9ec:	804b      	strh	r3, [r1, #2]
1000c9ee:	608a      	str	r2, [r1, #8]
1000c9f0:	4b0f      	ldr	r3, [pc, #60]	; (1000ca30 <special_events_handler+0x74>)
1000c9f2:	4798      	blx	r3
1000c9f4:	2001      	movs	r0, #1
1000c9f6:	e017      	b.n	1000ca28 <special_events_handler+0x6c>
1000c9f8:	490e      	ldr	r1, [pc, #56]	; (1000ca34 <special_events_handler+0x78>)
1000c9fa:	428b      	cmp	r3, r1
1000c9fc:	d00e      	beq.n	1000ca1c <special_events_handler+0x60>
1000c9fe:	490e      	ldr	r1, [pc, #56]	; (1000ca38 <special_events_handler+0x7c>)
1000ca00:	428b      	cmp	r3, r1
1000ca02:	d007      	beq.n	1000ca14 <special_events_handler+0x58>
1000ca04:	490d      	ldr	r1, [pc, #52]	; (1000ca3c <special_events_handler+0x80>)
1000ca06:	2000      	movs	r0, #0
1000ca08:	428b      	cmp	r3, r1
1000ca0a:	d10d      	bne.n	1000ca28 <special_events_handler+0x6c>
1000ca0c:	1c10      	adds	r0, r2, #0
1000ca0e:	4b0c      	ldr	r3, [pc, #48]	; (1000ca40 <special_events_handler+0x84>)
1000ca10:	4798      	blx	r3
1000ca12:	e7ef      	b.n	1000c9f4 <special_events_handler+0x38>
1000ca14:	1c11      	adds	r1, r2, #0
1000ca16:	4b0b      	ldr	r3, [pc, #44]	; (1000ca44 <special_events_handler+0x88>)
1000ca18:	2200      	movs	r2, #0
1000ca1a:	e002      	b.n	1000ca22 <special_events_handler+0x66>
1000ca1c:	1c11      	adds	r1, r2, #0
1000ca1e:	2200      	movs	r2, #0
1000ca20:	4b09      	ldr	r3, [pc, #36]	; (1000ca48 <special_events_handler+0x8c>)
1000ca22:	4798      	blx	r3
1000ca24:	4243      	negs	r3, r0
1000ca26:	4158      	adcs	r0, r3
1000ca28:	bd38      	pop	{r3, r4, r5, pc}
1000ca2a:	46c0      	nop			; (mov r8, r8)
1000ca2c:	10015f70 	.word	0x10015f70
1000ca30:	1000e419 	.word	0x1000e419
1000ca34:	00000e13 	.word	0x00000e13
1000ca38:	00000e15 	.word	0x00000e15
1000ca3c:	00000e01 	.word	0x00000e01
1000ca40:	1000e789 	.word	0x1000e789
1000ca44:	1000e949 	.word	0x1000e949
1000ca48:	1000ea21 	.word	0x1000ea21

1000ca4c <at_ble_event_get>:
1000ca4c:	2300      	movs	r3, #0
1000ca4e:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ca50:	b087      	sub	sp, #28
1000ca52:	9204      	str	r2, [sp, #16]
1000ca54:	7003      	strb	r3, [r0, #0]
1000ca56:	9b04      	ldr	r3, [sp, #16]
1000ca58:	9003      	str	r0, [sp, #12]
1000ca5a:	3b01      	subs	r3, #1
1000ca5c:	1c0d      	adds	r5, r1, #0
1000ca5e:	9305      	str	r3, [sp, #20]
1000ca60:	3303      	adds	r3, #3
1000ca62:	d802      	bhi.n	1000ca6a <at_ble_event_get+0x1e>
1000ca64:	9804      	ldr	r0, [sp, #16]
1000ca66:	4bae      	ldr	r3, [pc, #696]	; (1000cd20 <at_ble_event_get+0x2d4>)
1000ca68:	4798      	blx	r3
1000ca6a:	9b05      	ldr	r3, [sp, #20]
1000ca6c:	4cad      	ldr	r4, [pc, #692]	; (1000cd24 <at_ble_event_get+0x2d8>)
1000ca6e:	3303      	adds	r3, #3
1000ca70:	d902      	bls.n	1000ca78 <at_ble_event_get+0x2c>
1000ca72:	2300      	movs	r3, #0
1000ca74:	9302      	str	r3, [sp, #8]
1000ca76:	e015      	b.n	1000caa4 <at_ble_event_get+0x58>
1000ca78:	2300      	movs	r3, #0
1000ca7a:	9302      	str	r3, [sp, #8]
1000ca7c:	6823      	ldr	r3, [r4, #0]
1000ca7e:	2b00      	cmp	r3, #0
1000ca80:	d113      	bne.n	1000caaa <at_ble_event_get+0x5e>
1000ca82:	9b02      	ldr	r3, [sp, #8]
1000ca84:	2bd0      	cmp	r3, #208	; 0xd0
1000ca86:	d100      	bne.n	1000ca8a <at_ble_event_get+0x3e>
1000ca88:	e2da      	b.n	1000d040 <at_ble_event_get+0x5f4>
1000ca8a:	9804      	ldr	r0, [sp, #16]
1000ca8c:	4ba6      	ldr	r3, [pc, #664]	; (1000cd28 <at_ble_event_get+0x2dc>)
1000ca8e:	4798      	blx	r3
1000ca90:	9002      	str	r0, [sp, #8]
1000ca92:	2802      	cmp	r0, #2
1000ca94:	d1f2      	bne.n	1000ca7c <at_ble_event_get+0x30>
1000ca96:	e03f      	b.n	1000cb18 <at_ble_event_get+0xcc>
1000ca98:	9804      	ldr	r0, [sp, #16]
1000ca9a:	4ba3      	ldr	r3, [pc, #652]	; (1000cd28 <at_ble_event_get+0x2dc>)
1000ca9c:	4798      	blx	r3
1000ca9e:	9002      	str	r0, [sp, #8]
1000caa0:	2802      	cmp	r0, #2
1000caa2:	d039      	beq.n	1000cb18 <at_ble_event_get+0xcc>
1000caa4:	6823      	ldr	r3, [r4, #0]
1000caa6:	2b00      	cmp	r3, #0
1000caa8:	d0f6      	beq.n	1000ca98 <at_ble_event_get+0x4c>
1000caaa:	9b02      	ldr	r3, [sp, #8]
1000caac:	2bd0      	cmp	r3, #208	; 0xd0
1000caae:	d100      	bne.n	1000cab2 <at_ble_event_get+0x66>
1000cab0:	e2c6      	b.n	1000d040 <at_ble_event_get+0x5f4>
1000cab2:	9b02      	ldr	r3, [sp, #8]
1000cab4:	3b03      	subs	r3, #3
1000cab6:	1e5a      	subs	r2, r3, #1
1000cab8:	4193      	sbcs	r3, r2
1000caba:	9a02      	ldr	r2, [sp, #8]
1000cabc:	425b      	negs	r3, r3
1000cabe:	401a      	ands	r2, r3
1000cac0:	6823      	ldr	r3, [r4, #0]
1000cac2:	9202      	str	r2, [sp, #8]
1000cac4:	2b00      	cmp	r3, #0
1000cac6:	d100      	bne.n	1000caca <at_ble_event_get+0x7e>
1000cac8:	e2c2      	b.n	1000d050 <at_ble_event_get+0x604>
1000caca:	681a      	ldr	r2, [r3, #0]
1000cacc:	68de      	ldr	r6, [r3, #12]
1000cace:	6022      	str	r2, [r4, #0]
1000cad0:	88da      	ldrh	r2, [r3, #6]
1000cad2:	9201      	str	r2, [sp, #4]
1000cad4:	4a95      	ldr	r2, [pc, #596]	; (1000cd2c <at_ble_event_get+0x2e0>)
1000cad6:	889c      	ldrh	r4, [r3, #4]
1000cad8:	6811      	ldr	r1, [r2, #0]
1000cada:	6013      	str	r3, [r2, #0]
1000cadc:	6019      	str	r1, [r3, #0]
1000cade:	4b94      	ldr	r3, [pc, #592]	; (1000cd30 <at_ble_event_get+0x2e4>)
1000cae0:	781b      	ldrb	r3, [r3, #0]
1000cae2:	2b01      	cmp	r3, #1
1000cae4:	d10f      	bne.n	1000cb06 <at_ble_event_get+0xba>
1000cae6:	4b93      	ldr	r3, [pc, #588]	; (1000cd34 <at_ble_event_get+0x2e8>)
1000cae8:	4a92      	ldr	r2, [pc, #584]	; (1000cd34 <at_ble_event_get+0x2e8>)
1000caea:	8898      	ldrh	r0, [r3, #4]
1000caec:	88d9      	ldrh	r1, [r3, #6]
1000caee:	68d2      	ldr	r2, [r2, #12]
1000caf0:	891b      	ldrh	r3, [r3, #8]
1000caf2:	4f91      	ldr	r7, [pc, #580]	; (1000cd38 <at_ble_event_get+0x2ec>)
1000caf4:	47b8      	blx	r7
1000caf6:	2210      	movs	r2, #16
1000caf8:	4b90      	ldr	r3, [pc, #576]	; (1000cd3c <at_ble_event_get+0x2f0>)
1000cafa:	488e      	ldr	r0, [pc, #568]	; (1000cd34 <at_ble_event_get+0x2e8>)
1000cafc:	2100      	movs	r1, #0
1000cafe:	4798      	blx	r3
1000cb00:	2300      	movs	r3, #0
1000cb02:	4a8b      	ldr	r2, [pc, #556]	; (1000cd30 <at_ble_event_get+0x2e4>)
1000cb04:	7013      	strb	r3, [r2, #0]
1000cb06:	9b02      	ldr	r3, [sp, #8]
1000cb08:	2b00      	cmp	r3, #0
1000cb0a:	d114      	bne.n	1000cb36 <at_ble_event_get+0xea>
1000cb0c:	4b8c      	ldr	r3, [pc, #560]	; (1000cd40 <at_ble_event_get+0x2f4>)
1000cb0e:	429c      	cmp	r4, r3
1000cb10:	d009      	beq.n	1000cb26 <at_ble_event_get+0xda>
1000cb12:	4b8c      	ldr	r3, [pc, #560]	; (1000cd44 <at_ble_event_get+0x2f8>)
1000cb14:	429c      	cmp	r4, r3
1000cb16:	d127      	bne.n	1000cb68 <at_ble_event_get+0x11c>
1000cb18:	233a      	movs	r3, #58	; 0x3a
1000cb1a:	9a03      	ldr	r2, [sp, #12]
1000cb1c:	7013      	strb	r3, [r2, #0]
1000cb1e:	2300      	movs	r3, #0
1000cb20:	9302      	str	r3, [sp, #8]
1000cb22:	1c1d      	adds	r5, r3, #0
1000cb24:	e007      	b.n	1000cb36 <at_ble_event_get+0xea>
1000cb26:	9b01      	ldr	r3, [sp, #4]
1000cb28:	42a3      	cmp	r3, r4
1000cb2a:	d000      	beq.n	1000cb2e <at_ble_event_get+0xe2>
1000cb2c:	e28a      	b.n	1000d044 <at_ble_event_get+0x5f8>
1000cb2e:	2338      	movs	r3, #56	; 0x38
1000cb30:	9a03      	ldr	r2, [sp, #12]
1000cb32:	7013      	strb	r3, [r2, #0]
1000cb34:	602e      	str	r6, [r5, #0]
1000cb36:	9b03      	ldr	r3, [sp, #12]
1000cb38:	781b      	ldrb	r3, [r3, #0]
1000cb3a:	2b3b      	cmp	r3, #59	; 0x3b
1000cb3c:	d101      	bne.n	1000cb42 <at_ble_event_get+0xf6>
1000cb3e:	4b82      	ldr	r3, [pc, #520]	; (1000cd48 <at_ble_event_get+0x2fc>)
1000cb40:	4798      	blx	r3
1000cb42:	9b03      	ldr	r3, [sp, #12]
1000cb44:	781b      	ldrb	r3, [r3, #0]
1000cb46:	2b3b      	cmp	r3, #59	; 0x3b
1000cb48:	d003      	beq.n	1000cb52 <at_ble_event_get+0x106>
1000cb4a:	9b05      	ldr	r3, [sp, #20]
1000cb4c:	3303      	adds	r3, #3
1000cb4e:	d904      	bls.n	1000cb5a <at_ble_event_get+0x10e>
1000cb50:	e283      	b.n	1000d05a <at_ble_event_get+0x60e>
1000cb52:	9b02      	ldr	r3, [sp, #8]
1000cb54:	2b00      	cmp	r3, #0
1000cb56:	d088      	beq.n	1000ca6a <at_ble_event_get+0x1e>
1000cb58:	e7f7      	b.n	1000cb4a <at_ble_event_get+0xfe>
1000cb5a:	9b02      	ldr	r3, [sp, #8]
1000cb5c:	2bd0      	cmp	r3, #208	; 0xd0
1000cb5e:	d100      	bne.n	1000cb62 <at_ble_event_get+0x116>
1000cb60:	e27b      	b.n	1000d05a <at_ble_event_get+0x60e>
1000cb62:	4b7a      	ldr	r3, [pc, #488]	; (1000cd4c <at_ble_event_get+0x300>)
1000cb64:	4798      	blx	r3
1000cb66:	e278      	b.n	1000d05a <at_ble_event_get+0x60e>
1000cb68:	9b01      	ldr	r3, [sp, #4]
1000cb6a:	2bbb      	cmp	r3, #187	; 0xbb
1000cb6c:	d125      	bne.n	1000cbba <at_ble_event_get+0x16e>
1000cb6e:	2cbb      	cmp	r4, #187	; 0xbb
1000cb70:	d123      	bne.n	1000cbba <at_ble_event_get+0x16e>
1000cb72:	466b      	mov	r3, sp
1000cb74:	891b      	ldrh	r3, [r3, #8]
1000cb76:	80ab      	strh	r3, [r5, #4]
1000cb78:	78b3      	ldrb	r3, [r6, #2]
1000cb7a:	7872      	ldrb	r2, [r6, #1]
1000cb7c:	78f0      	ldrb	r0, [r6, #3]
1000cb7e:	021b      	lsls	r3, r3, #8
1000cb80:	4313      	orrs	r3, r2
1000cb82:	7971      	ldrb	r1, [r6, #5]
1000cb84:	7932      	ldrb	r2, [r6, #4]
1000cb86:	70a8      	strb	r0, [r5, #2]
1000cb88:	4871      	ldr	r0, [pc, #452]	; (1000cd50 <at_ble_event_get+0x304>)
1000cb8a:	802b      	strh	r3, [r5, #0]
1000cb8c:	4283      	cmp	r3, r0
1000cb8e:	d806      	bhi.n	1000cb9e <at_ble_event_get+0x152>
1000cb90:	4a70      	ldr	r2, [pc, #448]	; (1000cd54 <at_ble_event_get+0x308>)
1000cb92:	4293      	cmp	r3, r2
1000cb94:	d20b      	bcs.n	1000cbae <at_ble_event_get+0x162>
1000cb96:	4a70      	ldr	r2, [pc, #448]	; (1000cd58 <at_ble_event_get+0x30c>)
1000cb98:	4293      	cmp	r3, r2
1000cb9a:	d008      	beq.n	1000cbae <at_ble_event_get+0x162>
1000cb9c:	e009      	b.n	1000cbb2 <at_ble_event_get+0x166>
1000cb9e:	486f      	ldr	r0, [pc, #444]	; (1000cd5c <at_ble_event_get+0x310>)
1000cba0:	4283      	cmp	r3, r0
1000cba2:	d106      	bne.n	1000cbb2 <at_ble_event_get+0x166>
1000cba4:	020b      	lsls	r3, r1, #8
1000cba6:	4313      	orrs	r3, r2
1000cba8:	80ab      	strh	r3, [r5, #4]
1000cbaa:	2337      	movs	r3, #55	; 0x37
1000cbac:	e002      	b.n	1000cbb4 <at_ble_event_get+0x168>
1000cbae:	2336      	movs	r3, #54	; 0x36
1000cbb0:	e000      	b.n	1000cbb4 <at_ble_event_get+0x168>
1000cbb2:	2300      	movs	r3, #0
1000cbb4:	9a03      	ldr	r2, [sp, #12]
1000cbb6:	7013      	strb	r3, [r2, #0]
1000cbb8:	e7bd      	b.n	1000cb36 <at_ble_event_get+0xea>
1000cbba:	4b69      	ldr	r3, [pc, #420]	; (1000cd60 <at_ble_event_get+0x314>)
1000cbbc:	429c      	cmp	r4, r3
1000cbbe:	d100      	bne.n	1000cbc2 <at_ble_event_get+0x176>
1000cbc0:	e144      	b.n	1000ce4c <at_ble_event_get+0x400>
1000cbc2:	d865      	bhi.n	1000cc90 <at_ble_event_get+0x244>
1000cbc4:	4b67      	ldr	r3, [pc, #412]	; (1000cd64 <at_ble_event_get+0x318>)
1000cbc6:	429c      	cmp	r4, r3
1000cbc8:	d100      	bne.n	1000cbcc <at_ble_event_get+0x180>
1000cbca:	e1d5      	b.n	1000cf78 <at_ble_event_get+0x52c>
1000cbcc:	d82f      	bhi.n	1000cc2e <at_ble_event_get+0x1e2>
1000cbce:	4b66      	ldr	r3, [pc, #408]	; (1000cd68 <at_ble_event_get+0x31c>)
1000cbd0:	429c      	cmp	r4, r3
1000cbd2:	d100      	bne.n	1000cbd6 <at_ble_event_get+0x18a>
1000cbd4:	e1e0      	b.n	1000cf98 <at_ble_event_get+0x54c>
1000cbd6:	d813      	bhi.n	1000cc00 <at_ble_event_get+0x1b4>
1000cbd8:	4b64      	ldr	r3, [pc, #400]	; (1000cd6c <at_ble_event_get+0x320>)
1000cbda:	429c      	cmp	r4, r3
1000cbdc:	d100      	bne.n	1000cbe0 <at_ble_event_get+0x194>
1000cbde:	e1a3      	b.n	1000cf28 <at_ble_event_get+0x4dc>
1000cbe0:	d804      	bhi.n	1000cbec <at_ble_event_get+0x1a0>
1000cbe2:	2638      	movs	r6, #56	; 0x38
1000cbe4:	42b4      	cmp	r4, r6
1000cbe6:	d100      	bne.n	1000cbea <at_ble_event_get+0x19e>
1000cbe8:	e225      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000cbea:	e117      	b.n	1000ce1c <at_ble_event_get+0x3d0>
1000cbec:	4b60      	ldr	r3, [pc, #384]	; (1000cd70 <at_ble_event_get+0x324>)
1000cbee:	429c      	cmp	r4, r3
1000cbf0:	d100      	bne.n	1000cbf4 <at_ble_event_get+0x1a8>
1000cbf2:	e19f      	b.n	1000cf34 <at_ble_event_get+0x4e8>
1000cbf4:	33fe      	adds	r3, #254	; 0xfe
1000cbf6:	33ff      	adds	r3, #255	; 0xff
1000cbf8:	429c      	cmp	r4, r3
1000cbfa:	d100      	bne.n	1000cbfe <at_ble_event_get+0x1b2>
1000cbfc:	e1d3      	b.n	1000cfa6 <at_ble_event_get+0x55a>
1000cbfe:	e10d      	b.n	1000ce1c <at_ble_event_get+0x3d0>
1000cc00:	4b5c      	ldr	r3, [pc, #368]	; (1000cd74 <at_ble_event_get+0x328>)
1000cc02:	429c      	cmp	r4, r3
1000cc04:	d100      	bne.n	1000cc08 <at_ble_event_get+0x1bc>
1000cc06:	e1a9      	b.n	1000cf5c <at_ble_event_get+0x510>
1000cc08:	d808      	bhi.n	1000cc1c <at_ble_event_get+0x1d0>
1000cc0a:	4b5b      	ldr	r3, [pc, #364]	; (1000cd78 <at_ble_event_get+0x32c>)
1000cc0c:	429c      	cmp	r4, r3
1000cc0e:	d100      	bne.n	1000cc12 <at_ble_event_get+0x1c6>
1000cc10:	e196      	b.n	1000cf40 <at_ble_event_get+0x4f4>
1000cc12:	4b5a      	ldr	r3, [pc, #360]	; (1000cd7c <at_ble_event_get+0x330>)
1000cc14:	429c      	cmp	r4, r3
1000cc16:	d100      	bne.n	1000cc1a <at_ble_event_get+0x1ce>
1000cc18:	e199      	b.n	1000cf4e <at_ble_event_get+0x502>
1000cc1a:	e0ff      	b.n	1000ce1c <at_ble_event_get+0x3d0>
1000cc1c:	4b58      	ldr	r3, [pc, #352]	; (1000cd80 <at_ble_event_get+0x334>)
1000cc1e:	429c      	cmp	r4, r3
1000cc20:	d100      	bne.n	1000cc24 <at_ble_event_get+0x1d8>
1000cc22:	e1a2      	b.n	1000cf6a <at_ble_event_get+0x51e>
1000cc24:	4b57      	ldr	r3, [pc, #348]	; (1000cd84 <at_ble_event_get+0x338>)
1000cc26:	429c      	cmp	r4, r3
1000cc28:	d100      	bne.n	1000cc2c <at_ble_event_get+0x1e0>
1000cc2a:	e1d4      	b.n	1000cfd6 <at_ble_event_get+0x58a>
1000cc2c:	e0f6      	b.n	1000ce1c <at_ble_event_get+0x3d0>
1000cc2e:	4b56      	ldr	r3, [pc, #344]	; (1000cd88 <at_ble_event_get+0x33c>)
1000cc30:	429c      	cmp	r4, r3
1000cc32:	d100      	bne.n	1000cc36 <at_ble_event_get+0x1ea>
1000cc34:	e1c8      	b.n	1000cfc8 <at_ble_event_get+0x57c>
1000cc36:	d812      	bhi.n	1000cc5e <at_ble_event_get+0x212>
1000cc38:	4b54      	ldr	r3, [pc, #336]	; (1000cd8c <at_ble_event_get+0x340>)
1000cc3a:	429c      	cmp	r4, r3
1000cc3c:	d100      	bne.n	1000cc40 <at_ble_event_get+0x1f4>
1000cc3e:	e1d1      	b.n	1000cfe4 <at_ble_event_get+0x598>
1000cc40:	d804      	bhi.n	1000cc4c <at_ble_event_get+0x200>
1000cc42:	4b53      	ldr	r3, [pc, #332]	; (1000cd90 <at_ble_event_get+0x344>)
1000cc44:	429c      	cmp	r4, r3
1000cc46:	d100      	bne.n	1000cc4a <at_ble_event_get+0x1fe>
1000cc48:	e19b      	b.n	1000cf82 <at_ble_event_get+0x536>
1000cc4a:	e0e7      	b.n	1000ce1c <at_ble_event_get+0x3d0>
1000cc4c:	4b51      	ldr	r3, [pc, #324]	; (1000cd94 <at_ble_event_get+0x348>)
1000cc4e:	429c      	cmp	r4, r3
1000cc50:	d100      	bne.n	1000cc54 <at_ble_event_get+0x208>
1000cc52:	e1ad      	b.n	1000cfb0 <at_ble_event_get+0x564>
1000cc54:	4b50      	ldr	r3, [pc, #320]	; (1000cd98 <at_ble_event_get+0x34c>)
1000cc56:	429c      	cmp	r4, r3
1000cc58:	d100      	bne.n	1000cc5c <at_ble_event_get+0x210>
1000cc5a:	e1b0      	b.n	1000cfbe <at_ble_event_get+0x572>
1000cc5c:	e0de      	b.n	1000ce1c <at_ble_event_get+0x3d0>
1000cc5e:	4b4f      	ldr	r3, [pc, #316]	; (1000cd9c <at_ble_event_get+0x350>)
1000cc60:	429c      	cmp	r4, r3
1000cc62:	d100      	bne.n	1000cc66 <at_ble_event_get+0x21a>
1000cc64:	e0e0      	b.n	1000ce28 <at_ble_event_get+0x3dc>
1000cc66:	d809      	bhi.n	1000cc7c <at_ble_event_get+0x230>
1000cc68:	3b08      	subs	r3, #8
1000cc6a:	429c      	cmp	r4, r3
1000cc6c:	d100      	bne.n	1000cc70 <at_ble_event_get+0x224>
1000cc6e:	e0d7      	b.n	1000ce20 <at_ble_event_get+0x3d4>
1000cc70:	4b4b      	ldr	r3, [pc, #300]	; (1000cda0 <at_ble_event_get+0x354>)
1000cc72:	2639      	movs	r6, #57	; 0x39
1000cc74:	429c      	cmp	r4, r3
1000cc76:	d100      	bne.n	1000cc7a <at_ble_event_get+0x22e>
1000cc78:	e1dd      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000cc7a:	e0cf      	b.n	1000ce1c <at_ble_event_get+0x3d0>
1000cc7c:	23d1      	movs	r3, #209	; 0xd1
1000cc7e:	011b      	lsls	r3, r3, #4
1000cc80:	429c      	cmp	r4, r3
1000cc82:	d100      	bne.n	1000cc86 <at_ble_event_get+0x23a>
1000cc84:	e0d6      	b.n	1000ce34 <at_ble_event_get+0x3e8>
1000cc86:	4b47      	ldr	r3, [pc, #284]	; (1000cda4 <at_ble_event_get+0x358>)
1000cc88:	429c      	cmp	r4, r3
1000cc8a:	d100      	bne.n	1000cc8e <at_ble_event_get+0x242>
1000cc8c:	e0d8      	b.n	1000ce40 <at_ble_event_get+0x3f4>
1000cc8e:	e0c5      	b.n	1000ce1c <at_ble_event_get+0x3d0>
1000cc90:	4b45      	ldr	r3, [pc, #276]	; (1000cda8 <at_ble_event_get+0x35c>)
1000cc92:	429c      	cmp	r4, r3
1000cc94:	d100      	bne.n	1000cc98 <at_ble_event_get+0x24c>
1000cc96:	e117      	b.n	1000cec8 <at_ble_event_get+0x47c>
1000cc98:	d82e      	bhi.n	1000ccf8 <at_ble_event_get+0x2ac>
1000cc9a:	4b44      	ldr	r3, [pc, #272]	; (1000cdac <at_ble_event_get+0x360>)
1000cc9c:	429c      	cmp	r4, r3
1000cc9e:	d100      	bne.n	1000cca2 <at_ble_event_get+0x256>
1000cca0:	e13d      	b.n	1000cf1e <at_ble_event_get+0x4d2>
1000cca2:	d812      	bhi.n	1000ccca <at_ble_event_get+0x27e>
1000cca4:	4b42      	ldr	r3, [pc, #264]	; (1000cdb0 <at_ble_event_get+0x364>)
1000cca6:	429c      	cmp	r4, r3
1000cca8:	d100      	bne.n	1000ccac <at_ble_event_get+0x260>
1000ccaa:	e0e8      	b.n	1000ce7e <at_ble_event_get+0x432>
1000ccac:	d804      	bhi.n	1000ccb8 <at_ble_event_get+0x26c>
1000ccae:	3b03      	subs	r3, #3
1000ccb0:	429c      	cmp	r4, r3
1000ccb2:	d100      	bne.n	1000ccb6 <at_ble_event_get+0x26a>
1000ccb4:	e0d0      	b.n	1000ce58 <at_ble_event_get+0x40c>
1000ccb6:	e0b1      	b.n	1000ce1c <at_ble_event_get+0x3d0>
1000ccb8:	4b3e      	ldr	r3, [pc, #248]	; (1000cdb4 <at_ble_event_get+0x368>)
1000ccba:	429c      	cmp	r4, r3
1000ccbc:	d100      	bne.n	1000ccc0 <at_ble_event_get+0x274>
1000ccbe:	e0d0      	b.n	1000ce62 <at_ble_event_get+0x416>
1000ccc0:	4b3d      	ldr	r3, [pc, #244]	; (1000cdb8 <at_ble_event_get+0x36c>)
1000ccc2:	429c      	cmp	r4, r3
1000ccc4:	d100      	bne.n	1000ccc8 <at_ble_event_get+0x27c>
1000ccc6:	e0f9      	b.n	1000cebc <at_ble_event_get+0x470>
1000ccc8:	e0a8      	b.n	1000ce1c <at_ble_event_get+0x3d0>
1000ccca:	4b3c      	ldr	r3, [pc, #240]	; (1000cdbc <at_ble_event_get+0x370>)
1000cccc:	429c      	cmp	r4, r3
1000ccce:	d100      	bne.n	1000ccd2 <at_ble_event_get+0x286>
1000ccd0:	e0db      	b.n	1000ce8a <at_ble_event_get+0x43e>
1000ccd2:	d808      	bhi.n	1000cce6 <at_ble_event_get+0x29a>
1000ccd4:	4b3a      	ldr	r3, [pc, #232]	; (1000cdc0 <at_ble_event_get+0x374>)
1000ccd6:	429c      	cmp	r4, r3
1000ccd8:	d100      	bne.n	1000ccdc <at_ble_event_get+0x290>
1000ccda:	e11b      	b.n	1000cf14 <at_ble_event_get+0x4c8>
1000ccdc:	4b39      	ldr	r3, [pc, #228]	; (1000cdc4 <at_ble_event_get+0x378>)
1000ccde:	429c      	cmp	r4, r3
1000cce0:	d100      	bne.n	1000cce4 <at_ble_event_get+0x298>
1000cce2:	e0d8      	b.n	1000ce96 <at_ble_event_get+0x44a>
1000cce4:	e09a      	b.n	1000ce1c <at_ble_event_get+0x3d0>
1000cce6:	4b38      	ldr	r3, [pc, #224]	; (1000cdc8 <at_ble_event_get+0x37c>)
1000cce8:	429c      	cmp	r4, r3
1000ccea:	d100      	bne.n	1000ccee <at_ble_event_get+0x2a2>
1000ccec:	e0d8      	b.n	1000cea0 <at_ble_event_get+0x454>
1000ccee:	4b37      	ldr	r3, [pc, #220]	; (1000cdcc <at_ble_event_get+0x380>)
1000ccf0:	429c      	cmp	r4, r3
1000ccf2:	d100      	bne.n	1000ccf6 <at_ble_event_get+0x2aa>
1000ccf4:	e0db      	b.n	1000ceae <at_ble_event_get+0x462>
1000ccf6:	e091      	b.n	1000ce1c <at_ble_event_get+0x3d0>
1000ccf8:	4b35      	ldr	r3, [pc, #212]	; (1000cdd0 <at_ble_event_get+0x384>)
1000ccfa:	429c      	cmp	r4, r3
1000ccfc:	d100      	bne.n	1000cd00 <at_ble_event_get+0x2b4>
1000ccfe:	e0f7      	b.n	1000cef0 <at_ble_event_get+0x4a4>
1000cd00:	d876      	bhi.n	1000cdf0 <at_ble_event_get+0x3a4>
1000cd02:	4b34      	ldr	r3, [pc, #208]	; (1000cdd4 <at_ble_event_get+0x388>)
1000cd04:	429c      	cmp	r4, r3
1000cd06:	d100      	bne.n	1000cd0a <at_ble_event_get+0x2be>
1000cd08:	e0f8      	b.n	1000cefc <at_ble_event_get+0x4b0>
1000cd0a:	d869      	bhi.n	1000cde0 <at_ble_event_get+0x394>
1000cd0c:	4b32      	ldr	r3, [pc, #200]	; (1000cdd8 <at_ble_event_get+0x38c>)
1000cd0e:	429c      	cmp	r4, r3
1000cd10:	d100      	bne.n	1000cd14 <at_ble_event_get+0x2c8>
1000cd12:	e0e0      	b.n	1000ced6 <at_ble_event_get+0x48a>
1000cd14:	4b31      	ldr	r3, [pc, #196]	; (1000cddc <at_ble_event_get+0x390>)
1000cd16:	429c      	cmp	r4, r3
1000cd18:	d100      	bne.n	1000cd1c <at_ble_event_get+0x2d0>
1000cd1a:	e0a9      	b.n	1000ce70 <at_ble_event_get+0x424>
1000cd1c:	e07e      	b.n	1000ce1c <at_ble_event_get+0x3d0>
1000cd1e:	46c0      	nop			; (mov r8, r8)
1000cd20:	1000e451 	.word	0x1000e451
1000cd24:	100151b4 	.word	0x100151b4
1000cd28:	100097c1 	.word	0x100097c1
1000cd2c:	100151b8 	.word	0x100151b8
1000cd30:	100151b0 	.word	0x100151b0
1000cd34:	100151a0 	.word	0x100151a0
1000cd38:	1000c935 	.word	0x1000c935
1000cd3c:	10010e81 	.word	0x10010e81
1000cd40:	0000ffff 	.word	0x0000ffff
1000cd44:	0000fffe 	.word	0x0000fffe
1000cd48:	10009a39 	.word	0x10009a39
1000cd4c:	1000e453 	.word	0x1000e453
1000cd50:	0000201e 	.word	0x0000201e
1000cd54:	0000201d 	.word	0x0000201d
1000cd58:	00000c03 	.word	0x00000c03
1000cd5c:	0000201f 	.word	0x0000201f
1000cd60:	00000d1c 	.word	0x00000d1c
1000cd64:	00000c0c 	.word	0x00000c0c
1000cd68:	00000c02 	.word	0x00000c02
1000cd6c:	00000a02 	.word	0x00000a02
1000cd70:	00000a03 	.word	0x00000a03
1000cd74:	00000c06 	.word	0x00000c06
1000cd78:	00000c04 	.word	0x00000c04
1000cd7c:	00000c05 	.word	0x00000c05
1000cd80:	00000c07 	.word	0x00000c07
1000cd84:	00000c09 	.word	0x00000c09
1000cd88:	00000c17 	.word	0x00000c17
1000cd8c:	00000c12 	.word	0x00000c12
1000cd90:	00000c0d 	.word	0x00000c0d
1000cd94:	00000c13 	.word	0x00000c13
1000cd98:	00000c15 	.word	0x00000c15
1000cd9c:	00000d08 	.word	0x00000d08
1000cda0:	00000d01 	.word	0x00000d01
1000cda4:	00000d15 	.word	0x00000d15
1000cda8:	00000e1b 	.word	0x00000e1b
1000cdac:	00000e0f 	.word	0x00000e0f
1000cdb0:	00000e03 	.word	0x00000e03
1000cdb4:	00000e06 	.word	0x00000e06
1000cdb8:	00000e0a 	.word	0x00000e0a
1000cdbc:	00000e15 	.word	0x00000e15
1000cdc0:	00000e11 	.word	0x00000e11
1000cdc4:	00000e13 	.word	0x00000e13
1000cdc8:	00000e17 	.word	0x00000e17
1000cdcc:	00000e19 	.word	0x00000e19
1000cdd0:	00000e27 	.word	0x00000e27
1000cdd4:	00000e21 	.word	0x00000e21
1000cdd8:	00000e1c 	.word	0x00000e1c
1000cddc:	00000e1d 	.word	0x00000e1d
1000cde0:	4b9f      	ldr	r3, [pc, #636]	; (1000d060 <at_ble_event_get+0x614>)
1000cde2:	429c      	cmp	r4, r3
1000cde4:	d07e      	beq.n	1000cee4 <at_ble_event_get+0x498>
1000cde6:	4b9f      	ldr	r3, [pc, #636]	; (1000d064 <at_ble_event_get+0x618>)
1000cde8:	429c      	cmp	r4, r3
1000cdea:	d100      	bne.n	1000cdee <at_ble_event_get+0x3a2>
1000cdec:	e08c      	b.n	1000cf08 <at_ble_event_get+0x4bc>
1000cdee:	e015      	b.n	1000ce1c <at_ble_event_get+0x3d0>
1000cdf0:	4b9d      	ldr	r3, [pc, #628]	; (1000d068 <at_ble_event_get+0x61c>)
1000cdf2:	429c      	cmp	r4, r3
1000cdf4:	d100      	bne.n	1000cdf8 <at_ble_event_get+0x3ac>
1000cdf6:	e10a      	b.n	1000d00e <at_ble_event_get+0x5c2>
1000cdf8:	d808      	bhi.n	1000ce0c <at_ble_event_get+0x3c0>
1000cdfa:	4b9c      	ldr	r3, [pc, #624]	; (1000d06c <at_ble_event_get+0x620>)
1000cdfc:	429c      	cmp	r4, r3
1000cdfe:	d100      	bne.n	1000ce02 <at_ble_event_get+0x3b6>
1000ce00:	e0f7      	b.n	1000cff2 <at_ble_event_get+0x5a6>
1000ce02:	4b9b      	ldr	r3, [pc, #620]	; (1000d070 <at_ble_event_get+0x624>)
1000ce04:	429c      	cmp	r4, r3
1000ce06:	d100      	bne.n	1000ce0a <at_ble_event_get+0x3be>
1000ce08:	e0fa      	b.n	1000d000 <at_ble_event_get+0x5b4>
1000ce0a:	e007      	b.n	1000ce1c <at_ble_event_get+0x3d0>
1000ce0c:	4b99      	ldr	r3, [pc, #612]	; (1000d074 <at_ble_event_get+0x628>)
1000ce0e:	429c      	cmp	r4, r3
1000ce10:	d100      	bne.n	1000ce14 <at_ble_event_get+0x3c8>
1000ce12:	e103      	b.n	1000d01c <at_ble_event_get+0x5d0>
1000ce14:	4b98      	ldr	r3, [pc, #608]	; (1000d078 <at_ble_event_get+0x62c>)
1000ce16:	429c      	cmp	r4, r3
1000ce18:	d100      	bne.n	1000ce1c <at_ble_event_get+0x3d0>
1000ce1a:	e106      	b.n	1000d02a <at_ble_event_get+0x5de>
1000ce1c:	2600      	movs	r6, #0
1000ce1e:	e10a      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000ce20:	1c30      	adds	r0, r6, #0
1000ce22:	1c29      	adds	r1, r5, #0
1000ce24:	4b95      	ldr	r3, [pc, #596]	; (1000d07c <at_ble_event_get+0x630>)
1000ce26:	e014      	b.n	1000ce52 <at_ble_event_get+0x406>
1000ce28:	1c30      	adds	r0, r6, #0
1000ce2a:	1c29      	adds	r1, r5, #0
1000ce2c:	4b94      	ldr	r3, [pc, #592]	; (1000d080 <at_ble_event_get+0x634>)
1000ce2e:	4798      	blx	r3
1000ce30:	2604      	movs	r6, #4
1000ce32:	e100      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000ce34:	1c30      	adds	r0, r6, #0
1000ce36:	1c29      	adds	r1, r5, #0
1000ce38:	4b92      	ldr	r3, [pc, #584]	; (1000d084 <at_ble_event_get+0x638>)
1000ce3a:	4798      	blx	r3
1000ce3c:	2601      	movs	r6, #1
1000ce3e:	e0fa      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000ce40:	1c30      	adds	r0, r6, #0
1000ce42:	1c29      	adds	r1, r5, #0
1000ce44:	4b90      	ldr	r3, [pc, #576]	; (1000d088 <at_ble_event_get+0x63c>)
1000ce46:	4798      	blx	r3
1000ce48:	260f      	movs	r6, #15
1000ce4a:	e0f4      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000ce4c:	1c30      	adds	r0, r6, #0
1000ce4e:	1c29      	adds	r1, r5, #0
1000ce50:	4b8e      	ldr	r3, [pc, #568]	; (1000d08c <at_ble_event_get+0x640>)
1000ce52:	4798      	blx	r3
1000ce54:	1c06      	adds	r6, r0, #0
1000ce56:	e0ee      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000ce58:	9801      	ldr	r0, [sp, #4]
1000ce5a:	1c31      	adds	r1, r6, #0
1000ce5c:	1c2a      	adds	r2, r5, #0
1000ce5e:	4b8c      	ldr	r3, [pc, #560]	; (1000d090 <at_ble_event_get+0x644>)
1000ce60:	e017      	b.n	1000ce92 <at_ble_event_get+0x446>
1000ce62:	1c31      	adds	r1, r6, #0
1000ce64:	9801      	ldr	r0, [sp, #4]
1000ce66:	1c2a      	adds	r2, r5, #0
1000ce68:	4b8a      	ldr	r3, [pc, #552]	; (1000d094 <at_ble_event_get+0x648>)
1000ce6a:	4798      	blx	r3
1000ce6c:	2611      	movs	r6, #17
1000ce6e:	e0e2      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000ce70:	1c31      	adds	r1, r6, #0
1000ce72:	9801      	ldr	r0, [sp, #4]
1000ce74:	1c2a      	adds	r2, r5, #0
1000ce76:	4b88      	ldr	r3, [pc, #544]	; (1000d098 <at_ble_event_get+0x64c>)
1000ce78:	4798      	blx	r3
1000ce7a:	2612      	movs	r6, #18
1000ce7c:	e0db      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000ce7e:	1c30      	adds	r0, r6, #0
1000ce80:	1c29      	adds	r1, r5, #0
1000ce82:	4b86      	ldr	r3, [pc, #536]	; (1000d09c <at_ble_event_get+0x650>)
1000ce84:	4798      	blx	r3
1000ce86:	2606      	movs	r6, #6
1000ce88:	e0d5      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000ce8a:	1c31      	adds	r1, r6, #0
1000ce8c:	1c2a      	adds	r2, r5, #0
1000ce8e:	9801      	ldr	r0, [sp, #4]
1000ce90:	4b83      	ldr	r3, [pc, #524]	; (1000d0a0 <at_ble_event_get+0x654>)
1000ce92:	4798      	blx	r3
1000ce94:	e7de      	b.n	1000ce54 <at_ble_event_get+0x408>
1000ce96:	9801      	ldr	r0, [sp, #4]
1000ce98:	1c31      	adds	r1, r6, #0
1000ce9a:	1c2a      	adds	r2, r5, #0
1000ce9c:	4b81      	ldr	r3, [pc, #516]	; (1000d0a4 <at_ble_event_get+0x658>)
1000ce9e:	e7f8      	b.n	1000ce92 <at_ble_event_get+0x446>
1000cea0:	1c31      	adds	r1, r6, #0
1000cea2:	9801      	ldr	r0, [sp, #4]
1000cea4:	1c2a      	adds	r2, r5, #0
1000cea6:	4b80      	ldr	r3, [pc, #512]	; (1000d0a8 <at_ble_event_get+0x65c>)
1000cea8:	4798      	blx	r3
1000ceaa:	260d      	movs	r6, #13
1000ceac:	e0c3      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000ceae:	1c31      	adds	r1, r6, #0
1000ceb0:	9801      	ldr	r0, [sp, #4]
1000ceb2:	1c2a      	adds	r2, r5, #0
1000ceb4:	4b7d      	ldr	r3, [pc, #500]	; (1000d0ac <at_ble_event_get+0x660>)
1000ceb6:	4798      	blx	r3
1000ceb8:	260e      	movs	r6, #14
1000ceba:	e0bc      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000cebc:	9801      	ldr	r0, [sp, #4]
1000cebe:	1c31      	adds	r1, r6, #0
1000cec0:	1c2a      	adds	r2, r5, #0
1000cec2:	4b7b      	ldr	r3, [pc, #492]	; (1000d0b0 <at_ble_event_get+0x664>)
1000cec4:	4798      	blx	r3
1000cec6:	e084      	b.n	1000cfd2 <at_ble_event_get+0x586>
1000cec8:	1c31      	adds	r1, r6, #0
1000ceca:	9801      	ldr	r0, [sp, #4]
1000cecc:	1c2a      	adds	r2, r5, #0
1000cece:	4b79      	ldr	r3, [pc, #484]	; (1000d0b4 <at_ble_event_get+0x668>)
1000ced0:	4798      	blx	r3
1000ced2:	260b      	movs	r6, #11
1000ced4:	e0af      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000ced6:	1c31      	adds	r1, r6, #0
1000ced8:	9801      	ldr	r0, [sp, #4]
1000ceda:	1c2a      	adds	r2, r5, #0
1000cedc:	4b76      	ldr	r3, [pc, #472]	; (1000d0b8 <at_ble_event_get+0x66c>)
1000cede:	4798      	blx	r3
1000cee0:	2610      	movs	r6, #16
1000cee2:	e0a8      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000cee4:	1c30      	adds	r0, r6, #0
1000cee6:	1c29      	adds	r1, r5, #0
1000cee8:	4b74      	ldr	r3, [pc, #464]	; (1000d0bc <at_ble_event_get+0x670>)
1000ceea:	4798      	blx	r3
1000ceec:	2628      	movs	r6, #40	; 0x28
1000ceee:	e0a2      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000cef0:	1c30      	adds	r0, r6, #0
1000cef2:	1c29      	adds	r1, r5, #0
1000cef4:	4b72      	ldr	r3, [pc, #456]	; (1000d0c0 <at_ble_event_get+0x674>)
1000cef6:	4798      	blx	r3
1000cef8:	2629      	movs	r6, #41	; 0x29
1000cefa:	e09c      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000cefc:	1c30      	adds	r0, r6, #0
1000cefe:	1c29      	adds	r1, r5, #0
1000cf00:	4b70      	ldr	r3, [pc, #448]	; (1000d0c4 <at_ble_event_get+0x678>)
1000cf02:	4798      	blx	r3
1000cf04:	2627      	movs	r6, #39	; 0x27
1000cf06:	e096      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000cf08:	1c30      	adds	r0, r6, #0
1000cf0a:	1c29      	adds	r1, r5, #0
1000cf0c:	4b6e      	ldr	r3, [pc, #440]	; (1000d0c8 <at_ble_event_get+0x67c>)
1000cf0e:	4798      	blx	r3
1000cf10:	262a      	movs	r6, #42	; 0x2a
1000cf12:	e090      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000cf14:	9801      	ldr	r0, [sp, #4]
1000cf16:	1c31      	adds	r1, r6, #0
1000cf18:	1c2a      	adds	r2, r5, #0
1000cf1a:	4b6c      	ldr	r3, [pc, #432]	; (1000d0cc <at_ble_event_get+0x680>)
1000cf1c:	e7b9      	b.n	1000ce92 <at_ble_event_get+0x446>
1000cf1e:	9801      	ldr	r0, [sp, #4]
1000cf20:	1c31      	adds	r1, r6, #0
1000cf22:	1c2a      	adds	r2, r5, #0
1000cf24:	4b6a      	ldr	r3, [pc, #424]	; (1000d0d0 <at_ble_event_get+0x684>)
1000cf26:	e7b4      	b.n	1000ce92 <at_ble_event_get+0x446>
1000cf28:	1c30      	adds	r0, r6, #0
1000cf2a:	1c29      	adds	r1, r5, #0
1000cf2c:	4b69      	ldr	r3, [pc, #420]	; (1000d0d4 <at_ble_event_get+0x688>)
1000cf2e:	4798      	blx	r3
1000cf30:	262b      	movs	r6, #43	; 0x2b
1000cf32:	e080      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000cf34:	1c30      	adds	r0, r6, #0
1000cf36:	1c29      	adds	r1, r5, #0
1000cf38:	4b67      	ldr	r3, [pc, #412]	; (1000d0d8 <at_ble_event_get+0x68c>)
1000cf3a:	4798      	blx	r3
1000cf3c:	262c      	movs	r6, #44	; 0x2c
1000cf3e:	e07a      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000cf40:	1c31      	adds	r1, r6, #0
1000cf42:	9801      	ldr	r0, [sp, #4]
1000cf44:	1c2a      	adds	r2, r5, #0
1000cf46:	4b65      	ldr	r3, [pc, #404]	; (1000d0dc <at_ble_event_get+0x690>)
1000cf48:	4798      	blx	r3
1000cf4a:	2613      	movs	r6, #19
1000cf4c:	e073      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000cf4e:	1c31      	adds	r1, r6, #0
1000cf50:	9801      	ldr	r0, [sp, #4]
1000cf52:	1c2a      	adds	r2, r5, #0
1000cf54:	4b62      	ldr	r3, [pc, #392]	; (1000d0e0 <at_ble_event_get+0x694>)
1000cf56:	4798      	blx	r3
1000cf58:	2614      	movs	r6, #20
1000cf5a:	e06c      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000cf5c:	1c31      	adds	r1, r6, #0
1000cf5e:	9801      	ldr	r0, [sp, #4]
1000cf60:	1c2a      	adds	r2, r5, #0
1000cf62:	4b60      	ldr	r3, [pc, #384]	; (1000d0e4 <at_ble_event_get+0x698>)
1000cf64:	4798      	blx	r3
1000cf66:	2615      	movs	r6, #21
1000cf68:	e065      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000cf6a:	1c31      	adds	r1, r6, #0
1000cf6c:	9801      	ldr	r0, [sp, #4]
1000cf6e:	1c2a      	adds	r2, r5, #0
1000cf70:	4b5d      	ldr	r3, [pc, #372]	; (1000d0e8 <at_ble_event_get+0x69c>)
1000cf72:	4798      	blx	r3
1000cf74:	2616      	movs	r6, #22
1000cf76:	e05e      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000cf78:	9801      	ldr	r0, [sp, #4]
1000cf7a:	1c31      	adds	r1, r6, #0
1000cf7c:	1c2a      	adds	r2, r5, #0
1000cf7e:	4b5b      	ldr	r3, [pc, #364]	; (1000d0ec <at_ble_event_get+0x6a0>)
1000cf80:	e787      	b.n	1000ce92 <at_ble_event_get+0x446>
1000cf82:	1c31      	adds	r1, r6, #0
1000cf84:	9801      	ldr	r0, [sp, #4]
1000cf86:	1c2a      	adds	r2, r5, #0
1000cf88:	4b58      	ldr	r3, [pc, #352]	; (1000d0ec <at_ble_event_get+0x6a0>)
1000cf8a:	4798      	blx	r3
1000cf8c:	88a9      	ldrh	r1, [r5, #4]
1000cf8e:	1c06      	adds	r6, r0, #0
1000cf90:	4b57      	ldr	r3, [pc, #348]	; (1000d0f0 <at_ble_event_get+0x6a4>)
1000cf92:	8828      	ldrh	r0, [r5, #0]
1000cf94:	4798      	blx	r3
1000cf96:	e04e      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000cf98:	1c31      	adds	r1, r6, #0
1000cf9a:	9801      	ldr	r0, [sp, #4]
1000cf9c:	1c2a      	adds	r2, r5, #0
1000cf9e:	4b55      	ldr	r3, [pc, #340]	; (1000d0f4 <at_ble_event_get+0x6a8>)
1000cfa0:	4798      	blx	r3
1000cfa2:	2623      	movs	r6, #35	; 0x23
1000cfa4:	e047      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000cfa6:	9801      	ldr	r0, [sp, #4]
1000cfa8:	1c31      	adds	r1, r6, #0
1000cfaa:	1c2a      	adds	r2, r5, #0
1000cfac:	4b52      	ldr	r3, [pc, #328]	; (1000d0f8 <at_ble_event_get+0x6ac>)
1000cfae:	e770      	b.n	1000ce92 <at_ble_event_get+0x446>
1000cfb0:	9b01      	ldr	r3, [sp, #4]
1000cfb2:	1c30      	adds	r0, r6, #0
1000cfb4:	0a1f      	lsrs	r7, r3, #8
1000cfb6:	802f      	strh	r7, [r5, #0]
1000cfb8:	1c29      	adds	r1, r5, #0
1000cfba:	4b50      	ldr	r3, [pc, #320]	; (1000d0fc <at_ble_event_get+0x6b0>)
1000cfbc:	e749      	b.n	1000ce52 <at_ble_event_get+0x406>
1000cfbe:	9801      	ldr	r0, [sp, #4]
1000cfc0:	1c31      	adds	r1, r6, #0
1000cfc2:	1c2a      	adds	r2, r5, #0
1000cfc4:	4b4e      	ldr	r3, [pc, #312]	; (1000d100 <at_ble_event_get+0x6b4>)
1000cfc6:	e764      	b.n	1000ce92 <at_ble_event_get+0x446>
1000cfc8:	1c30      	adds	r0, r6, #0
1000cfca:	1c29      	adds	r1, r5, #0
1000cfcc:	9a01      	ldr	r2, [sp, #4]
1000cfce:	4b4d      	ldr	r3, [pc, #308]	; (1000d104 <at_ble_event_get+0x6b8>)
1000cfd0:	4798      	blx	r3
1000cfd2:	263b      	movs	r6, #59	; 0x3b
1000cfd4:	e02f      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000cfd6:	1c31      	adds	r1, r6, #0
1000cfd8:	9801      	ldr	r0, [sp, #4]
1000cfda:	1c2a      	adds	r2, r5, #0
1000cfdc:	4b4a      	ldr	r3, [pc, #296]	; (1000d108 <at_ble_event_get+0x6bc>)
1000cfde:	4798      	blx	r3
1000cfe0:	2618      	movs	r6, #24
1000cfe2:	e028      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000cfe4:	1c31      	adds	r1, r6, #0
1000cfe6:	9801      	ldr	r0, [sp, #4]
1000cfe8:	1c2a      	adds	r2, r5, #0
1000cfea:	4b48      	ldr	r3, [pc, #288]	; (1000d10c <at_ble_event_get+0x6c0>)
1000cfec:	4798      	blx	r3
1000cfee:	2620      	movs	r6, #32
1000cff0:	e021      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000cff2:	1c31      	adds	r1, r6, #0
1000cff4:	9801      	ldr	r0, [sp, #4]
1000cff6:	1c2a      	adds	r2, r5, #0
1000cff8:	4b45      	ldr	r3, [pc, #276]	; (1000d110 <at_ble_event_get+0x6c4>)
1000cffa:	4798      	blx	r3
1000cffc:	2633      	movs	r6, #51	; 0x33
1000cffe:	e01a      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000d000:	1c31      	adds	r1, r6, #0
1000d002:	9801      	ldr	r0, [sp, #4]
1000d004:	1c2a      	adds	r2, r5, #0
1000d006:	4b43      	ldr	r3, [pc, #268]	; (1000d114 <at_ble_event_get+0x6c8>)
1000d008:	4798      	blx	r3
1000d00a:	2630      	movs	r6, #48	; 0x30
1000d00c:	e013      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000d00e:	1c31      	adds	r1, r6, #0
1000d010:	9801      	ldr	r0, [sp, #4]
1000d012:	1c2a      	adds	r2, r5, #0
1000d014:	4b40      	ldr	r3, [pc, #256]	; (1000d118 <at_ble_event_get+0x6cc>)
1000d016:	4798      	blx	r3
1000d018:	2634      	movs	r6, #52	; 0x34
1000d01a:	e00c      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000d01c:	1c31      	adds	r1, r6, #0
1000d01e:	9801      	ldr	r0, [sp, #4]
1000d020:	1c2a      	adds	r2, r5, #0
1000d022:	4b3e      	ldr	r3, [pc, #248]	; (1000d11c <at_ble_event_get+0x6d0>)
1000d024:	4798      	blx	r3
1000d026:	2635      	movs	r6, #53	; 0x35
1000d028:	e005      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000d02a:	1c31      	adds	r1, r6, #0
1000d02c:	9801      	ldr	r0, [sp, #4]
1000d02e:	1c2a      	adds	r2, r5, #0
1000d030:	4b3b      	ldr	r3, [pc, #236]	; (1000d120 <at_ble_event_get+0x6d4>)
1000d032:	4798      	blx	r3
1000d034:	2632      	movs	r6, #50	; 0x32
1000d036:	9b03      	ldr	r3, [sp, #12]
1000d038:	701e      	strb	r6, [r3, #0]
1000d03a:	2300      	movs	r3, #0
1000d03c:	9302      	str	r3, [sp, #8]
1000d03e:	e57a      	b.n	1000cb36 <at_ble_event_get+0xea>
1000d040:	23d0      	movs	r3, #208	; 0xd0
1000d042:	e7fb      	b.n	1000d03c <at_ble_event_get+0x5f0>
1000d044:	9b01      	ldr	r3, [sp, #4]
1000d046:	9e02      	ldr	r6, [sp, #8]
1000d048:	2bbb      	cmp	r3, #187	; 0xbb
1000d04a:	d000      	beq.n	1000d04e <at_ble_event_get+0x602>
1000d04c:	e6e6      	b.n	1000ce1c <at_ble_event_get+0x3d0>
1000d04e:	e7f2      	b.n	1000d036 <at_ble_event_get+0x5ea>
1000d050:	9b02      	ldr	r3, [sp, #8]
1000d052:	2b00      	cmp	r3, #0
1000d054:	d000      	beq.n	1000d058 <at_ble_event_get+0x60c>
1000d056:	e56e      	b.n	1000cb36 <at_ble_event_get+0xea>
1000d058:	e6e0      	b.n	1000ce1c <at_ble_event_get+0x3d0>
1000d05a:	9802      	ldr	r0, [sp, #8]
1000d05c:	b007      	add	sp, #28
1000d05e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d060:	00000e22 	.word	0x00000e22
1000d064:	00000e25 	.word	0x00000e25
1000d068:	00001b05 	.word	0x00001b05
1000d06c:	00001b01 	.word	0x00001b01
1000d070:	00001b03 	.word	0x00001b03
1000d074:	00001b06 	.word	0x00001b06
1000d078:	00001b08 	.word	0x00001b08
1000d07c:	1000f27d 	.word	0x1000f27d
1000d080:	1000f261 	.word	0x1000f261
1000d084:	1000f4fd 	.word	0x1000f4fd
1000d088:	1000f5ed 	.word	0x1000f5ed
1000d08c:	1000f611 	.word	0x1000f611
1000d090:	1000e5f5 	.word	0x1000e5f5
1000d094:	1000ee75 	.word	0x1000ee75
1000d098:	1000eef1 	.word	0x1000eef1
1000d09c:	1000e8ad 	.word	0x1000e8ad
1000d0a0:	1000e949 	.word	0x1000e949
1000d0a4:	1000ea21 	.word	0x1000ea21
1000d0a8:	1000eca9 	.word	0x1000eca9
1000d0ac:	1000ed49 	.word	0x1000ed49
1000d0b0:	1000ee01 	.word	0x1000ee01
1000d0b4:	1000ee29 	.word	0x1000ee29
1000d0b8:	1000ee3f 	.word	0x1000ee3f
1000d0bc:	1000ef09 	.word	0x1000ef09
1000d0c0:	1000ef37 	.word	0x1000ef37
1000d0c4:	1000ef4d 	.word	0x1000ef4d
1000d0c8:	1000ef77 	.word	0x1000ef77
1000d0cc:	1000eda5 	.word	0x1000eda5
1000d0d0:	1000edcf 	.word	0x1000edcf
1000d0d4:	1000e035 	.word	0x1000e035
1000d0d8:	1000e061 	.word	0x1000e061
1000d0dc:	1000f831 	.word	0x1000f831
1000d0e0:	1000f86d 	.word	0x1000f86d
1000d0e4:	1000f8b5 	.word	0x1000f8b5
1000d0e8:	1000f8f9 	.word	0x1000f8f9
1000d0ec:	1000f92d 	.word	0x1000f92d
1000d0f0:	1000f7f1 	.word	0x1000f7f1
1000d0f4:	1000f9f9 	.word	0x1000f9f9
1000d0f8:	1000f981 	.word	0x1000f981
1000d0fc:	1000df19 	.word	0x1000df19
1000d100:	1000df85 	.word	0x1000df85
1000d104:	1000df49 	.word	0x1000df49
1000d108:	1000fa09 	.word	0x1000fa09
1000d10c:	1000fa49 	.word	0x1000fa49
1000d110:	1000fd11 	.word	0x1000fd11
1000d114:	1000fd1b 	.word	0x1000fd1b
1000d118:	1000fd21 	.word	0x1000fd21
1000d11c:	1000fd27 	.word	0x1000fd27
1000d120:	1000fd33 	.word	0x1000fd33

1000d124 <internal_event_flush>:
1000d124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d126:	490e      	ldr	r1, [pc, #56]	; (1000d160 <internal_event_flush+0x3c>)
1000d128:	2400      	movs	r4, #0
1000d12a:	680b      	ldr	r3, [r1, #0]
1000d12c:	1c0f      	adds	r7, r1, #0
1000d12e:	1c1e      	adds	r6, r3, #0
1000d130:	4a0c      	ldr	r2, [pc, #48]	; (1000d164 <internal_event_flush+0x40>)
1000d132:	6815      	ldr	r5, [r2, #0]
1000d134:	9201      	str	r2, [sp, #4]
1000d136:	2b00      	cmp	r3, #0
1000d138:	d00e      	beq.n	1000d158 <internal_event_flush+0x34>
1000d13a:	889a      	ldrh	r2, [r3, #4]
1000d13c:	6819      	ldr	r1, [r3, #0]
1000d13e:	4282      	cmp	r2, r0
1000d140:	d107      	bne.n	1000d152 <internal_event_flush+0x2e>
1000d142:	2c00      	cmp	r4, #0
1000d144:	d001      	beq.n	1000d14a <internal_event_flush+0x26>
1000d146:	6021      	str	r1, [r4, #0]
1000d148:	e000      	b.n	1000d14c <internal_event_flush+0x28>
1000d14a:	1c0e      	adds	r6, r1, #0
1000d14c:	601d      	str	r5, [r3, #0]
1000d14e:	1c1d      	adds	r5, r3, #0
1000d150:	1c23      	adds	r3, r4, #0
1000d152:	1c1c      	adds	r4, r3, #0
1000d154:	1c0b      	adds	r3, r1, #0
1000d156:	e7ee      	b.n	1000d136 <internal_event_flush+0x12>
1000d158:	9b01      	ldr	r3, [sp, #4]
1000d15a:	603e      	str	r6, [r7, #0]
1000d15c:	601d      	str	r5, [r3, #0]
1000d15e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d160:	100151b4 	.word	0x100151b4
1000d164:	100151b8 	.word	0x100151b8

1000d168 <internal_conn_flush>:
1000d168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d16a:	4a12      	ldr	r2, [pc, #72]	; (1000d1b4 <internal_conn_flush+0x4c>)
1000d16c:	9000      	str	r0, [sp, #0]
1000d16e:	6813      	ldr	r3, [r2, #0]
1000d170:	4811      	ldr	r0, [pc, #68]	; (1000d1b8 <internal_conn_flush+0x50>)
1000d172:	1c1f      	adds	r7, r3, #0
1000d174:	2100      	movs	r1, #0
1000d176:	4684      	mov	ip, r0
1000d178:	6804      	ldr	r4, [r0, #0]
1000d17a:	9201      	str	r2, [sp, #4]
1000d17c:	2b00      	cmp	r3, #0
1000d17e:	d014      	beq.n	1000d1aa <internal_conn_flush+0x42>
1000d180:	88d8      	ldrh	r0, [r3, #6]
1000d182:	9a00      	ldr	r2, [sp, #0]
1000d184:	681d      	ldr	r5, [r3, #0]
1000d186:	0a06      	lsrs	r6, r0, #8
1000d188:	4296      	cmp	r6, r2
1000d18a:	d10b      	bne.n	1000d1a4 <internal_conn_flush+0x3c>
1000d18c:	26fd      	movs	r6, #253	; 0xfd
1000d18e:	4006      	ands	r6, r0
1000d190:	2e0c      	cmp	r6, #12
1000d192:	d107      	bne.n	1000d1a4 <internal_conn_flush+0x3c>
1000d194:	2900      	cmp	r1, #0
1000d196:	d001      	beq.n	1000d19c <internal_conn_flush+0x34>
1000d198:	600d      	str	r5, [r1, #0]
1000d19a:	e000      	b.n	1000d19e <internal_conn_flush+0x36>
1000d19c:	1c2f      	adds	r7, r5, #0
1000d19e:	601c      	str	r4, [r3, #0]
1000d1a0:	1c1c      	adds	r4, r3, #0
1000d1a2:	1c0b      	adds	r3, r1, #0
1000d1a4:	1c19      	adds	r1, r3, #0
1000d1a6:	1c2b      	adds	r3, r5, #0
1000d1a8:	e7e8      	b.n	1000d17c <internal_conn_flush+0x14>
1000d1aa:	9b01      	ldr	r3, [sp, #4]
1000d1ac:	601f      	str	r7, [r3, #0]
1000d1ae:	4663      	mov	r3, ip
1000d1b0:	601c      	str	r4, [r3, #0]
1000d1b2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d1b4:	100151b4 	.word	0x100151b4
1000d1b8:	100151b8 	.word	0x100151b8

1000d1bc <at_ble_device_name_set>:
1000d1bc:	b530      	push	{r4, r5, lr}
1000d1be:	23cf      	movs	r3, #207	; 0xcf
1000d1c0:	2800      	cmp	r0, #0
1000d1c2:	d010      	beq.n	1000d1e6 <at_ble_device_name_set+0x2a>
1000d1c4:	1e4a      	subs	r2, r1, #1
1000d1c6:	2a1f      	cmp	r2, #31
1000d1c8:	d80d      	bhi.n	1000d1e6 <at_ble_device_name_set+0x2a>
1000d1ca:	4a08      	ldr	r2, [pc, #32]	; (1000d1ec <at_ble_device_name_set+0x30>)
1000d1cc:	1c13      	adds	r3, r2, #0
1000d1ce:	33aa      	adds	r3, #170	; 0xaa
1000d1d0:	8019      	strh	r1, [r3, #0]
1000d1d2:	2300      	movs	r3, #0
1000d1d4:	1c1c      	adds	r4, r3, #0
1000d1d6:	5cc5      	ldrb	r5, [r0, r3]
1000d1d8:	34ac      	adds	r4, #172	; 0xac
1000d1da:	3301      	adds	r3, #1
1000d1dc:	5515      	strb	r5, [r2, r4]
1000d1de:	b2dc      	uxtb	r4, r3
1000d1e0:	428c      	cmp	r4, r1
1000d1e2:	d3f7      	bcc.n	1000d1d4 <at_ble_device_name_set+0x18>
1000d1e4:	2300      	movs	r3, #0
1000d1e6:	1c18      	adds	r0, r3, #0
1000d1e8:	bd30      	pop	{r4, r5, pc}
1000d1ea:	46c0      	nop			; (mov r8, r8)
1000d1ec:	1001600e 	.word	0x1001600e

1000d1f0 <at_ble_addr_get>:
1000d1f0:	b510      	push	{r4, lr}
1000d1f2:	1c04      	adds	r4, r0, #0
1000d1f4:	20cf      	movs	r0, #207	; 0xcf
1000d1f6:	2c00      	cmp	r4, #0
1000d1f8:	d006      	beq.n	1000d208 <at_ble_addr_get+0x18>
1000d1fa:	4b04      	ldr	r3, [pc, #16]	; (1000d20c <at_ble_addr_get+0x1c>)
1000d1fc:	38ce      	subs	r0, #206	; 0xce
1000d1fe:	1c21      	adds	r1, r4, #0
1000d200:	4798      	blx	r3
1000d202:	4b03      	ldr	r3, [pc, #12]	; (1000d210 <at_ble_addr_get+0x20>)
1000d204:	791b      	ldrb	r3, [r3, #4]
1000d206:	7023      	strb	r3, [r4, #0]
1000d208:	bd10      	pop	{r4, pc}
1000d20a:	46c0      	nop			; (mov r8, r8)
1000d20c:	1000f111 	.word	0x1000f111
1000d210:	1001600e 	.word	0x1001600e

1000d214 <at_ble_set_dev_config>:
1000d214:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d216:	7906      	ldrb	r6, [r0, #4]
1000d218:	b089      	sub	sp, #36	; 0x24
1000d21a:	25cf      	movs	r5, #207	; 0xcf
1000d21c:	2e03      	cmp	r6, #3
1000d21e:	d838      	bhi.n	1000d292 <at_ble_set_dev_config+0x7e>
1000d220:	7803      	ldrb	r3, [r0, #0]
1000d222:	3511      	adds	r5, #17
1000d224:	2b0f      	cmp	r3, #15
1000d226:	d834      	bhi.n	1000d292 <at_ble_set_dev_config+0x7e>
1000d228:	2380      	movs	r3, #128	; 0x80
1000d22a:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000d22c:	3d11      	subs	r5, #17
1000d22e:	009b      	lsls	r3, r3, #2
1000d230:	429f      	cmp	r7, r3
1000d232:	d82e      	bhi.n	1000d292 <at_ble_set_dev_config+0x7e>
1000d234:	7fc5      	ldrb	r5, [r0, #31]
1000d236:	7f83      	ldrb	r3, [r0, #30]
1000d238:	01ad      	lsls	r5, r5, #6
1000d23a:	015b      	lsls	r3, r3, #5
1000d23c:	431d      	orrs	r5, r3
1000d23e:	7ec3      	ldrb	r3, [r0, #27]
1000d240:	431d      	orrs	r5, r3
1000d242:	7f43      	ldrb	r3, [r0, #29]
1000d244:	011b      	lsls	r3, r3, #4
1000d246:	431d      	orrs	r5, r3
1000d248:	7f03      	ldrb	r3, [r0, #28]
1000d24a:	009b      	lsls	r3, r3, #2
1000d24c:	431d      	orrs	r5, r3
1000d24e:	4b12      	ldr	r3, [pc, #72]	; (1000d298 <at_ble_set_dev_config+0x84>)
1000d250:	b2ed      	uxtb	r5, r5
1000d252:	711e      	strb	r6, [r3, #4]
1000d254:	7903      	ldrb	r3, [r0, #4]
1000d256:	3b02      	subs	r3, #2
1000d258:	2b01      	cmp	r3, #1
1000d25a:	d801      	bhi.n	1000d260 <at_ble_set_dev_config+0x4c>
1000d25c:	2302      	movs	r3, #2
1000d25e:	7103      	strb	r3, [r0, #4]
1000d260:	1c04      	adds	r4, r0, #0
1000d262:	1c23      	adds	r3, r4, #0
1000d264:	330b      	adds	r3, #11
1000d266:	8861      	ldrh	r1, [r4, #2]
1000d268:	9307      	str	r3, [sp, #28]
1000d26a:	7923      	ldrb	r3, [r4, #4]
1000d26c:	7800      	ldrb	r0, [r0, #0]
1000d26e:	9300      	str	r3, [sp, #0]
1000d270:	9501      	str	r5, [sp, #4]
1000d272:	8c25      	ldrh	r5, [r4, #32]
1000d274:	1d62      	adds	r2, r4, #5
1000d276:	9502      	str	r5, [sp, #8]
1000d278:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000d27a:	9b07      	ldr	r3, [sp, #28]
1000d27c:	9503      	str	r5, [sp, #12]
1000d27e:	9704      	str	r7, [sp, #16]
1000d280:	4d06      	ldr	r5, [pc, #24]	; (1000d29c <at_ble_set_dev_config+0x88>)
1000d282:	47a8      	blx	r5
1000d284:	7126      	strb	r6, [r4, #4]
1000d286:	1c05      	adds	r5, r0, #0
1000d288:	1c21      	adds	r1, r4, #0
1000d28a:	4803      	ldr	r0, [pc, #12]	; (1000d298 <at_ble_set_dev_config+0x84>)
1000d28c:	2226      	movs	r2, #38	; 0x26
1000d28e:	4b04      	ldr	r3, [pc, #16]	; (1000d2a0 <at_ble_set_dev_config+0x8c>)
1000d290:	4798      	blx	r3
1000d292:	1c28      	adds	r0, r5, #0
1000d294:	b009      	add	sp, #36	; 0x24
1000d296:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d298:	1001600e 	.word	0x1001600e
1000d29c:	1000f009 	.word	0x1000f009
1000d2a0:	10010e6f 	.word	0x10010e6f

1000d2a4 <at_ble_init>:
1000d2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d2a6:	b087      	sub	sp, #28
1000d2a8:	af03      	add	r7, sp, #12
1000d2aa:	4954      	ldr	r1, [pc, #336]	; (1000d3fc <at_ble_init+0x158>)
1000d2ac:	220b      	movs	r2, #11
1000d2ae:	4b54      	ldr	r3, [pc, #336]	; (1000d400 <at_ble_init+0x15c>)
1000d2b0:	1c04      	adds	r4, r0, #0
1000d2b2:	1c38      	adds	r0, r7, #0
1000d2b4:	4798      	blx	r3
1000d2b6:	2205      	movs	r2, #5
1000d2b8:	4b52      	ldr	r3, [pc, #328]	; (1000d404 <at_ble_init+0x160>)
1000d2ba:	2640      	movs	r6, #64	; 0x40
1000d2bc:	801a      	strh	r2, [r3, #0]
1000d2be:	2300      	movs	r3, #0
1000d2c0:	4a51      	ldr	r2, [pc, #324]	; (1000d408 <at_ble_init+0x164>)
1000d2c2:	6013      	str	r3, [r2, #0]
1000d2c4:	4a51      	ldr	r2, [pc, #324]	; (1000d40c <at_ble_init+0x168>)
1000d2c6:	7013      	strb	r3, [r2, #0]
1000d2c8:	4a51      	ldr	r2, [pc, #324]	; (1000d410 <at_ble_init+0x16c>)
1000d2ca:	7013      	strb	r3, [r2, #0]
1000d2cc:	4b51      	ldr	r3, [pc, #324]	; (1000d414 <at_ble_init+0x170>)
1000d2ce:	4798      	blx	r3
1000d2d0:	4b51      	ldr	r3, [pc, #324]	; (1000d418 <at_ble_init+0x174>)
1000d2d2:	4798      	blx	r3
1000d2d4:	4b51      	ldr	r3, [pc, #324]	; (1000d41c <at_ble_init+0x178>)
1000d2d6:	4798      	blx	r3
1000d2d8:	4b51      	ldr	r3, [pc, #324]	; (1000d420 <at_ble_init+0x17c>)
1000d2da:	4798      	blx	r3
1000d2dc:	2c00      	cmp	r4, #0
1000d2de:	d100      	bne.n	1000d2e2 <at_ble_init+0x3e>
1000d2e0:	e089      	b.n	1000d3f6 <at_ble_init+0x152>
1000d2e2:	68a3      	ldr	r3, [r4, #8]
1000d2e4:	2b00      	cmp	r3, #0
1000d2e6:	d100      	bne.n	1000d2ea <at_ble_init+0x46>
1000d2e8:	e085      	b.n	1000d3f6 <at_ble_init+0x152>
1000d2ea:	6923      	ldr	r3, [r4, #16]
1000d2ec:	2b00      	cmp	r3, #0
1000d2ee:	d100      	bne.n	1000d2f2 <at_ble_init+0x4e>
1000d2f0:	e081      	b.n	1000d3f6 <at_ble_init+0x152>
1000d2f2:	6820      	ldr	r0, [r4, #0]
1000d2f4:	2800      	cmp	r0, #0
1000d2f6:	d102      	bne.n	1000d2fe <at_ble_init+0x5a>
1000d2f8:	6863      	ldr	r3, [r4, #4]
1000d2fa:	2b00      	cmp	r3, #0
1000d2fc:	d17b      	bne.n	1000d3f6 <at_ble_init+0x152>
1000d2fe:	4b49      	ldr	r3, [pc, #292]	; (1000d424 <at_ble_init+0x180>)
1000d300:	6861      	ldr	r1, [r4, #4]
1000d302:	4798      	blx	r3
1000d304:	4b48      	ldr	r3, [pc, #288]	; (1000d428 <at_ble_init+0x184>)
1000d306:	4798      	blx	r3
1000d308:	2801      	cmp	r0, #1
1000d30a:	d901      	bls.n	1000d310 <at_ble_init+0x6c>
1000d30c:	26e2      	movs	r6, #226	; 0xe2
1000d30e:	e072      	b.n	1000d3f6 <at_ble_init+0x152>
1000d310:	4846      	ldr	r0, [pc, #280]	; (1000d42c <at_ble_init+0x188>)
1000d312:	4b47      	ldr	r3, [pc, #284]	; (1000d430 <at_ble_init+0x18c>)
1000d314:	4798      	blx	r3
1000d316:	2800      	cmp	r0, #0
1000d318:	d1f8      	bne.n	1000d30c <at_ble_init+0x68>
1000d31a:	1c20      	adds	r0, r4, #0
1000d31c:	4b45      	ldr	r3, [pc, #276]	; (1000d434 <at_ble_init+0x190>)
1000d31e:	4798      	blx	r3
1000d320:	68e0      	ldr	r0, [r4, #12]
1000d322:	68a1      	ldr	r1, [r4, #8]
1000d324:	4b44      	ldr	r3, [pc, #272]	; (1000d438 <at_ble_init+0x194>)
1000d326:	4798      	blx	r3
1000d328:	466b      	mov	r3, sp
1000d32a:	2201      	movs	r2, #1
1000d32c:	1cdc      	adds	r4, r3, #3
1000d32e:	1c20      	adds	r0, r4, #0
1000d330:	a901      	add	r1, sp, #4
1000d332:	4252      	negs	r2, r2
1000d334:	4b41      	ldr	r3, [pc, #260]	; (1000d43c <at_ble_init+0x198>)
1000d336:	4798      	blx	r3
1000d338:	2800      	cmp	r0, #0
1000d33a:	d102      	bne.n	1000d342 <at_ble_init+0x9e>
1000d33c:	7823      	ldrb	r3, [r4, #0]
1000d33e:	2b39      	cmp	r3, #57	; 0x39
1000d340:	d1f2      	bne.n	1000d328 <at_ble_init+0x84>
1000d342:	4b3f      	ldr	r3, [pc, #252]	; (1000d440 <at_ble_init+0x19c>)
1000d344:	4798      	blx	r3
1000d346:	1e06      	subs	r6, r0, #0
1000d348:	d155      	bne.n	1000d3f6 <at_ble_init+0x152>
1000d34a:	1c03      	adds	r3, r0, #0
1000d34c:	2101      	movs	r1, #1
1000d34e:	4a3d      	ldr	r2, [pc, #244]	; (1000d444 <at_ble_init+0x1a0>)
1000d350:	4249      	negs	r1, r1
1000d352:	189a      	adds	r2, r3, r2
1000d354:	3312      	adds	r3, #18
1000d356:	8151      	strh	r1, [r2, #10]
1000d358:	2b90      	cmp	r3, #144	; 0x90
1000d35a:	d1f7      	bne.n	1000d34c <at_ble_init+0xa8>
1000d35c:	4c3a      	ldr	r4, [pc, #232]	; (1000d448 <at_ble_init+0x1a4>)
1000d35e:	3b81      	subs	r3, #129	; 0x81
1000d360:	7023      	strb	r3, [r4, #0]
1000d362:	4b3a      	ldr	r3, [pc, #232]	; (1000d44c <at_ble_init+0x1a8>)
1000d364:	4a3a      	ldr	r2, [pc, #232]	; (1000d450 <at_ble_init+0x1ac>)
1000d366:	8063      	strh	r3, [r4, #2]
1000d368:	2300      	movs	r3, #0
1000d36a:	7123      	strb	r3, [r4, #4]
1000d36c:	3301      	adds	r3, #1
1000d36e:	1e58      	subs	r0, r3, #1
1000d370:	0119      	lsls	r1, r3, #4
1000d372:	4301      	orrs	r1, r0
1000d374:	3302      	adds	r3, #2
1000d376:	7011      	strb	r1, [r2, #0]
1000d378:	3201      	adds	r2, #1
1000d37a:	2b21      	cmp	r3, #33	; 0x21
1000d37c:	d1f7      	bne.n	1000d36e <at_ble_init+0xca>
1000d37e:	33e0      	adds	r3, #224	; 0xe0
1000d380:	33ff      	adds	r3, #255	; 0xff
1000d382:	84a3      	strh	r3, [r4, #36]	; 0x24
1000d384:	1c23      	adds	r3, r4, #0
1000d386:	2500      	movs	r5, #0
1000d388:	3373      	adds	r3, #115	; 0x73
1000d38a:	701d      	strb	r5, [r3, #0]
1000d38c:	1c23      	adds	r3, r4, #0
1000d38e:	3372      	adds	r3, #114	; 0x72
1000d390:	701d      	strb	r5, [r3, #0]
1000d392:	1c23      	adds	r3, r4, #0
1000d394:	3376      	adds	r3, #118	; 0x76
1000d396:	701d      	strb	r5, [r3, #0]
1000d398:	1c23      	adds	r3, r4, #0
1000d39a:	33cc      	adds	r3, #204	; 0xcc
1000d39c:	801d      	strh	r5, [r3, #0]
1000d39e:	1c22      	adds	r2, r4, #0
1000d3a0:	23a0      	movs	r3, #160	; 0xa0
1000d3a2:	32d0      	adds	r2, #208	; 0xd0
1000d3a4:	005b      	lsls	r3, r3, #1
1000d3a6:	8013      	strh	r3, [r2, #0]
1000d3a8:	1c22      	adds	r2, r4, #0
1000d3aa:	32ce      	adds	r2, #206	; 0xce
1000d3ac:	8013      	strh	r3, [r2, #0]
1000d3ae:	1c23      	adds	r3, r4, #0
1000d3b0:	33d2      	adds	r3, #210	; 0xd2
1000d3b2:	801d      	strh	r5, [r3, #0]
1000d3b4:	22fa      	movs	r2, #250	; 0xfa
1000d3b6:	1c23      	adds	r3, r4, #0
1000d3b8:	0052      	lsls	r2, r2, #1
1000d3ba:	33d4      	adds	r3, #212	; 0xd4
1000d3bc:	801a      	strh	r2, [r3, #0]
1000d3be:	1c23      	adds	r3, r4, #0
1000d3c0:	33d6      	adds	r3, #214	; 0xd6
1000d3c2:	701d      	strb	r5, [r3, #0]
1000d3c4:	1c20      	adds	r0, r4, #0
1000d3c6:	4b23      	ldr	r3, [pc, #140]	; (1000d454 <at_ble_init+0x1b0>)
1000d3c8:	76e5      	strb	r5, [r4, #27]
1000d3ca:	7725      	strb	r5, [r4, #28]
1000d3cc:	7765      	strb	r5, [r4, #29]
1000d3ce:	77a5      	strb	r5, [r4, #30]
1000d3d0:	77e5      	strb	r5, [r4, #31]
1000d3d2:	8425      	strh	r5, [r4, #32]
1000d3d4:	8465      	strh	r5, [r4, #34]	; 0x22
1000d3d6:	4798      	blx	r3
1000d3d8:	1c23      	adds	r3, r4, #0
1000d3da:	2207      	movs	r2, #7
1000d3dc:	3374      	adds	r3, #116	; 0x74
1000d3de:	701a      	strb	r2, [r3, #0]
1000d3e0:	1c23      	adds	r3, r4, #0
1000d3e2:	3204      	adds	r2, #4
1000d3e4:	33aa      	adds	r3, #170	; 0xaa
1000d3e6:	801a      	strh	r2, [r3, #0]
1000d3e8:	1c2b      	adds	r3, r5, #0
1000d3ea:	5d7a      	ldrb	r2, [r7, r5]
1000d3ec:	33ac      	adds	r3, #172	; 0xac
1000d3ee:	3501      	adds	r5, #1
1000d3f0:	54e2      	strb	r2, [r4, r3]
1000d3f2:	2d0b      	cmp	r5, #11
1000d3f4:	d1f8      	bne.n	1000d3e8 <at_ble_init+0x144>
1000d3f6:	1c30      	adds	r0, r6, #0
1000d3f8:	b007      	add	sp, #28
1000d3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d3fc:	1001361c 	.word	0x1001361c
1000d400:	10010e6f 	.word	0x10010e6f
1000d404:	10015f7c 	.word	0x10015f7c
1000d408:	10015264 	.word	0x10015264
1000d40c:	100151c4 	.word	0x100151c4
1000d410:	10013744 	.word	0x10013744
1000d414:	1000fa59 	.word	0x1000fa59
1000d418:	1000d715 	.word	0x1000d715
1000d41c:	1000dd75 	.word	0x1000dd75
1000d420:	1000e029 	.word	0x1000e029
1000d424:	1000ddb1 	.word	0x1000ddb1
1000d428:	100094d1 	.word	0x100094d1
1000d42c:	1000e329 	.word	0x1000e329
1000d430:	10009715 	.word	0x10009715
1000d434:	1000e3d1 	.word	0x1000e3d1
1000d438:	1000c991 	.word	0x1000c991
1000d43c:	1000ca4d 	.word	0x1000ca4d
1000d440:	1000ef99 	.word	0x1000ef99
1000d444:	10015f7e 	.word	0x10015f7e
1000d448:	1001600e 	.word	0x1001600e
1000d44c:	00003a98 	.word	0x00003a98
1000d450:	10016019 	.word	0x10016019
1000d454:	1000d215 	.word	0x1000d215

1000d458 <at_ble_addr_set>:
1000d458:	b538      	push	{r3, r4, r5, lr}
1000d45a:	1c45      	adds	r5, r0, #1
1000d45c:	1c03      	adds	r3, r0, #0
1000d45e:	20cf      	movs	r0, #207	; 0xcf
1000d460:	2d00      	cmp	r5, #0
1000d462:	d018      	beq.n	1000d496 <at_ble_addr_set+0x3e>
1000d464:	781a      	ldrb	r2, [r3, #0]
1000d466:	2a03      	cmp	r2, #3
1000d468:	d815      	bhi.n	1000d496 <at_ble_addr_set+0x3e>
1000d46a:	2a01      	cmp	r2, #1
1000d46c:	d102      	bne.n	1000d474 <at_ble_addr_set+0x1c>
1000d46e:	785a      	ldrb	r2, [r3, #1]
1000d470:	2a00      	cmp	r2, #0
1000d472:	d010      	beq.n	1000d496 <at_ble_addr_set+0x3e>
1000d474:	1c1c      	adds	r4, r3, #0
1000d476:	1c29      	adds	r1, r5, #0
1000d478:	2206      	movs	r2, #6
1000d47a:	4b07      	ldr	r3, [pc, #28]	; (1000d498 <at_ble_addr_set+0x40>)
1000d47c:	4807      	ldr	r0, [pc, #28]	; (1000d49c <at_ble_addr_set+0x44>)
1000d47e:	4798      	blx	r3
1000d480:	7823      	ldrb	r3, [r4, #0]
1000d482:	4807      	ldr	r0, [pc, #28]	; (1000d4a0 <at_ble_addr_set+0x48>)
1000d484:	7103      	strb	r3, [r0, #4]
1000d486:	4b07      	ldr	r3, [pc, #28]	; (1000d4a4 <at_ble_addr_set+0x4c>)
1000d488:	4798      	blx	r3
1000d48a:	7823      	ldrb	r3, [r4, #0]
1000d48c:	2b00      	cmp	r3, #0
1000d48e:	d102      	bne.n	1000d496 <at_ble_addr_set+0x3e>
1000d490:	1c28      	adds	r0, r5, #0
1000d492:	4b05      	ldr	r3, [pc, #20]	; (1000d4a8 <at_ble_addr_set+0x50>)
1000d494:	4798      	blx	r3
1000d496:	bd38      	pop	{r3, r4, r5, pc}
1000d498:	10010e6f 	.word	0x10010e6f
1000d49c:	10016013 	.word	0x10016013
1000d4a0:	1001600e 	.word	0x1001600e
1000d4a4:	1000d215 	.word	0x1000d215
1000d4a8:	1000e455 	.word	0x1000e455

1000d4ac <at_ble_adv_data_set>:
1000d4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d4ae:	4684      	mov	ip, r0
1000d4b0:	1c0f      	adds	r7, r1, #0
1000d4b2:	1c16      	adds	r6, r2, #0
1000d4b4:	1c1c      	adds	r4, r3, #0
1000d4b6:	2800      	cmp	r0, #0
1000d4b8:	d102      	bne.n	1000d4c0 <at_ble_adv_data_set+0x14>
1000d4ba:	20e2      	movs	r0, #226	; 0xe2
1000d4bc:	2a00      	cmp	r2, #0
1000d4be:	d02b      	beq.n	1000d518 <at_ble_adv_data_set+0x6c>
1000d4c0:	20cf      	movs	r0, #207	; 0xcf
1000d4c2:	2f1f      	cmp	r7, #31
1000d4c4:	d828      	bhi.n	1000d518 <at_ble_adv_data_set+0x6c>
1000d4c6:	2c1f      	cmp	r4, #31
1000d4c8:	d826      	bhi.n	1000d518 <at_ble_adv_data_set+0x6c>
1000d4ca:	4663      	mov	r3, ip
1000d4cc:	2b00      	cmp	r3, #0
1000d4ce:	d00e      	beq.n	1000d4ee <at_ble_adv_data_set+0x42>
1000d4d0:	4812      	ldr	r0, [pc, #72]	; (1000d51c <at_ble_adv_data_set+0x70>)
1000d4d2:	4d13      	ldr	r5, [pc, #76]	; (1000d520 <at_ble_adv_data_set+0x74>)
1000d4d4:	2f00      	cmp	r7, #0
1000d4d6:	d104      	bne.n	1000d4e2 <at_ble_adv_data_set+0x36>
1000d4d8:	1c39      	adds	r1, r7, #0
1000d4da:	221f      	movs	r2, #31
1000d4dc:	4b11      	ldr	r3, [pc, #68]	; (1000d524 <at_ble_adv_data_set+0x78>)
1000d4de:	4798      	blx	r3
1000d4e0:	e003      	b.n	1000d4ea <at_ble_adv_data_set+0x3e>
1000d4e2:	4661      	mov	r1, ip
1000d4e4:	1c3a      	adds	r2, r7, #0
1000d4e6:	4b10      	ldr	r3, [pc, #64]	; (1000d528 <at_ble_adv_data_set+0x7c>)
1000d4e8:	4798      	blx	r3
1000d4ea:	3572      	adds	r5, #114	; 0x72
1000d4ec:	702f      	strb	r7, [r5, #0]
1000d4ee:	1e30      	subs	r0, r6, #0
1000d4f0:	d012      	beq.n	1000d518 <at_ble_adv_data_set+0x6c>
1000d4f2:	4d0b      	ldr	r5, [pc, #44]	; (1000d520 <at_ble_adv_data_set+0x74>)
1000d4f4:	480d      	ldr	r0, [pc, #52]	; (1000d52c <at_ble_adv_data_set+0x80>)
1000d4f6:	2c00      	cmp	r4, #0
1000d4f8:	d107      	bne.n	1000d50a <at_ble_adv_data_set+0x5e>
1000d4fa:	1c21      	adds	r1, r4, #0
1000d4fc:	221f      	movs	r2, #31
1000d4fe:	4b09      	ldr	r3, [pc, #36]	; (1000d524 <at_ble_adv_data_set+0x78>)
1000d500:	3573      	adds	r5, #115	; 0x73
1000d502:	4798      	blx	r3
1000d504:	702c      	strb	r4, [r5, #0]
1000d506:	1c20      	adds	r0, r4, #0
1000d508:	e006      	b.n	1000d518 <at_ble_adv_data_set+0x6c>
1000d50a:	1c31      	adds	r1, r6, #0
1000d50c:	1c22      	adds	r2, r4, #0
1000d50e:	4b06      	ldr	r3, [pc, #24]	; (1000d528 <at_ble_adv_data_set+0x7c>)
1000d510:	4798      	blx	r3
1000d512:	2000      	movs	r0, #0
1000d514:	3573      	adds	r5, #115	; 0x73
1000d516:	702c      	strb	r4, [r5, #0]
1000d518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d51a:	46c0      	nop			; (mov r8, r8)
1000d51c:	10016042 	.word	0x10016042
1000d520:	1001600e 	.word	0x1001600e
1000d524:	10010e81 	.word	0x10010e81
1000d528:	10010e6f 	.word	0x10010e6f
1000d52c:	10016061 	.word	0x10016061

1000d530 <at_ble_adv_start>:
1000d530:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d532:	b091      	sub	sp, #68	; 0x44
1000d534:	1c1f      	adds	r7, r3, #0
1000d536:	ab16      	add	r3, sp, #88	; 0x58
1000d538:	881d      	ldrh	r5, [r3, #0]
1000d53a:	ab17      	add	r3, sp, #92	; 0x5c
1000d53c:	881b      	ldrh	r3, [r3, #0]
1000d53e:	910d      	str	r1, [sp, #52]	; 0x34
1000d540:	930e      	str	r3, [sp, #56]	; 0x38
1000d542:	ab18      	add	r3, sp, #96	; 0x60
1000d544:	781b      	ldrb	r3, [r3, #0]
1000d546:	1c04      	adds	r4, r0, #0
1000d548:	930f      	str	r3, [sp, #60]	; 0x3c
1000d54a:	4b42      	ldr	r3, [pc, #264]	; (1000d654 <at_ble_adv_start+0x124>)
1000d54c:	1c16      	adds	r6, r2, #0
1000d54e:	3373      	adds	r3, #115	; 0x73
1000d550:	781b      	ldrb	r3, [r3, #0]
1000d552:	20cf      	movs	r0, #207	; 0xcf
1000d554:	930c      	str	r3, [sp, #48]	; 0x30
1000d556:	2c01      	cmp	r4, #1
1000d558:	d103      	bne.n	1000d562 <at_ble_adv_start+0x32>
1000d55a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000d55c:	2b00      	cmp	r3, #0
1000d55e:	d176      	bne.n	1000d64e <at_ble_adv_start+0x11e>
1000d560:	e024      	b.n	1000d5ac <at_ble_adv_start+0x7c>
1000d562:	2c04      	cmp	r4, #4
1000d564:	d873      	bhi.n	1000d64e <at_ble_adv_start+0x11e>
1000d566:	2380      	movs	r3, #128	; 0x80
1000d568:	01db      	lsls	r3, r3, #7
1000d56a:	429d      	cmp	r5, r3
1000d56c:	d86f      	bhi.n	1000d64e <at_ble_adv_start+0x11e>
1000d56e:	2c00      	cmp	r4, #0
1000d570:	d102      	bne.n	1000d578 <at_ble_adv_start+0x48>
1000d572:	2d1f      	cmp	r5, #31
1000d574:	d96b      	bls.n	1000d64e <at_ble_adv_start+0x11e>
1000d576:	e003      	b.n	1000d580 <at_ble_adv_start+0x50>
1000d578:	2d9f      	cmp	r5, #159	; 0x9f
1000d57a:	d801      	bhi.n	1000d580 <at_ble_adv_start+0x50>
1000d57c:	2c01      	cmp	r4, #1
1000d57e:	d166      	bne.n	1000d64e <at_ble_adv_start+0x11e>
1000d580:	2f00      	cmp	r7, #0
1000d582:	d009      	beq.n	1000d598 <at_ble_adv_start+0x68>
1000d584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000d586:	20cf      	movs	r0, #207	; 0xcf
1000d588:	3b01      	subs	r3, #1
1000d58a:	2b01      	cmp	r3, #1
1000d58c:	d95f      	bls.n	1000d64e <at_ble_adv_start+0x11e>
1000d58e:	2c01      	cmp	r4, #1
1000d590:	d102      	bne.n	1000d598 <at_ble_adv_start+0x68>
1000d592:	2d00      	cmp	r5, #0
1000d594:	d100      	bne.n	1000d598 <at_ble_adv_start+0x68>
1000d596:	3520      	adds	r5, #32
1000d598:	4b2f      	ldr	r3, [pc, #188]	; (1000d658 <at_ble_adv_start+0x128>)
1000d59a:	4798      	blx	r3
1000d59c:	1c01      	adds	r1, r0, #0
1000d59e:	2e00      	cmp	r6, #0
1000d5a0:	d043      	beq.n	1000d62a <at_ble_adv_start+0xfa>
1000d5a2:	7833      	ldrb	r3, [r6, #0]
1000d5a4:	1e60      	subs	r0, r4, #1
1000d5a6:	2b00      	cmp	r3, #0
1000d5a8:	d109      	bne.n	1000d5be <at_ble_adv_start+0x8e>
1000d5aa:	e03b      	b.n	1000d624 <at_ble_adv_start+0xf4>
1000d5ac:	2380      	movs	r3, #128	; 0x80
1000d5ae:	01db      	lsls	r3, r3, #7
1000d5b0:	429d      	cmp	r5, r3
1000d5b2:	d84c      	bhi.n	1000d64e <at_ble_adv_start+0x11e>
1000d5b4:	2e00      	cmp	r6, #0
1000d5b6:	d04a      	beq.n	1000d64e <at_ble_adv_start+0x11e>
1000d5b8:	2f00      	cmp	r7, #0
1000d5ba:	d1e3      	bne.n	1000d584 <at_ble_adv_start+0x54>
1000d5bc:	e02b      	b.n	1000d616 <at_ble_adv_start+0xe6>
1000d5be:	2301      	movs	r3, #1
1000d5c0:	2803      	cmp	r0, #3
1000d5c2:	d93a      	bls.n	1000d63a <at_ble_adv_start+0x10a>
1000d5c4:	200d      	movs	r0, #13
1000d5c6:	1c72      	adds	r2, r6, #1
1000d5c8:	e002      	b.n	1000d5d0 <at_ble_adv_start+0xa0>
1000d5ca:	200e      	movs	r0, #14
1000d5cc:	1e32      	subs	r2, r6, #0
1000d5ce:	d1fa      	bne.n	1000d5c6 <at_ble_adv_start+0x96>
1000d5d0:	4c20      	ldr	r4, [pc, #128]	; (1000d654 <at_ble_adv_start+0x124>)
1000d5d2:	3474      	adds	r4, #116	; 0x74
1000d5d4:	7826      	ldrb	r6, [r4, #0]
1000d5d6:	2407      	movs	r4, #7
1000d5d8:	2e00      	cmp	r6, #0
1000d5da:	d000      	beq.n	1000d5de <at_ble_adv_start+0xae>
1000d5dc:	1c34      	adds	r4, r6, #0
1000d5de:	9200      	str	r2, [sp, #0]
1000d5e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000d5e2:	9403      	str	r4, [sp, #12]
1000d5e4:	9204      	str	r2, [sp, #16]
1000d5e6:	4a1b      	ldr	r2, [pc, #108]	; (1000d654 <at_ble_adv_start+0x124>)
1000d5e8:	9501      	str	r5, [sp, #4]
1000d5ea:	9502      	str	r5, [sp, #8]
1000d5ec:	9705      	str	r7, [sp, #20]
1000d5ee:	3272      	adds	r2, #114	; 0x72
1000d5f0:	7812      	ldrb	r2, [r2, #0]
1000d5f2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000d5f4:	9206      	str	r2, [sp, #24]
1000d5f6:	4a19      	ldr	r2, [pc, #100]	; (1000d65c <at_ble_adv_start+0x12c>)
1000d5f8:	9207      	str	r2, [sp, #28]
1000d5fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000d5fc:	9208      	str	r2, [sp, #32]
1000d5fe:	4a18      	ldr	r2, [pc, #96]	; (1000d660 <at_ble_adv_start+0x130>)
1000d600:	9209      	str	r2, [sp, #36]	; 0x24
1000d602:	2264      	movs	r2, #100	; 0x64
1000d604:	4362      	muls	r2, r4
1000d606:	b292      	uxth	r2, r2
1000d608:	920a      	str	r2, [sp, #40]	; 0x28
1000d60a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000d60c:	4c15      	ldr	r4, [pc, #84]	; (1000d664 <at_ble_adv_start+0x134>)
1000d60e:	920b      	str	r2, [sp, #44]	; 0x2c
1000d610:	4a15      	ldr	r2, [pc, #84]	; (1000d668 <at_ble_adv_start+0x138>)
1000d612:	47a0      	blx	r4
1000d614:	e01b      	b.n	1000d64e <at_ble_adv_start+0x11e>
1000d616:	2d00      	cmp	r5, #0
1000d618:	d1be      	bne.n	1000d598 <at_ble_adv_start+0x68>
1000d61a:	4b0f      	ldr	r3, [pc, #60]	; (1000d658 <at_ble_adv_start+0x128>)
1000d61c:	4798      	blx	r3
1000d61e:	2520      	movs	r5, #32
1000d620:	1c01      	adds	r1, r0, #0
1000d622:	e7be      	b.n	1000d5a2 <at_ble_adv_start+0x72>
1000d624:	2803      	cmp	r0, #3
1000d626:	d8cd      	bhi.n	1000d5c4 <at_ble_adv_start+0x94>
1000d628:	e006      	b.n	1000d638 <at_ble_adv_start+0x108>
1000d62a:	1e60      	subs	r0, r4, #1
1000d62c:	2803      	cmp	r0, #3
1000d62e:	d903      	bls.n	1000d638 <at_ble_adv_start+0x108>
1000d630:	1c33      	adds	r3, r6, #0
1000d632:	200d      	movs	r0, #13
1000d634:	1c32      	adds	r2, r6, #0
1000d636:	e7cb      	b.n	1000d5d0 <at_ble_adv_start+0xa0>
1000d638:	2300      	movs	r3, #0
1000d63a:	f002 fb7f 	bl	1000fd3c <__gnu_thumb1_case_sqi>
1000d63e:	06c6      	.short	0x06c6
1000d640:	0204      	.short	0x0204
1000d642:	200f      	movs	r0, #15
1000d644:	e7c2      	b.n	1000d5cc <at_ble_adv_start+0x9c>
1000d646:	2200      	movs	r2, #0
1000d648:	920c      	str	r2, [sp, #48]	; 0x30
1000d64a:	200c      	movs	r0, #12
1000d64c:	e7be      	b.n	1000d5cc <at_ble_adv_start+0x9c>
1000d64e:	b011      	add	sp, #68	; 0x44
1000d650:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d652:	46c0      	nop			; (mov r8, r8)
1000d654:	1001600e 	.word	0x1001600e
1000d658:	1000f4e5 	.word	0x1000f4e5
1000d65c:	10016042 	.word	0x10016042
1000d660:	10016061 	.word	0x10016061
1000d664:	1000f3c5 	.word	0x1000f3c5
1000d668:	00003a98 	.word	0x00003a98

1000d66c <at_ble_adv_stop>:
1000d66c:	b508      	push	{r3, lr}
1000d66e:	4b01      	ldr	r3, [pc, #4]	; (1000d674 <at_ble_adv_stop+0x8>)
1000d670:	4798      	blx	r3
1000d672:	bd08      	pop	{r3, pc}
1000d674:	1000f1f1 	.word	0x1000f1f1

1000d678 <at_ble_scan_stop>:
1000d678:	b510      	push	{r4, lr}
1000d67a:	4b05      	ldr	r3, [pc, #20]	; (1000d690 <at_ble_scan_stop+0x18>)
1000d67c:	4798      	blx	r3
1000d67e:	1e04      	subs	r4, r0, #0
1000d680:	d103      	bne.n	1000d68a <at_ble_scan_stop+0x12>
1000d682:	20d1      	movs	r0, #209	; 0xd1
1000d684:	4b03      	ldr	r3, [pc, #12]	; (1000d694 <at_ble_scan_stop+0x1c>)
1000d686:	0100      	lsls	r0, r0, #4
1000d688:	4798      	blx	r3
1000d68a:	1c20      	adds	r0, r4, #0
1000d68c:	bd10      	pop	{r4, pc}
1000d68e:	46c0      	nop			; (mov r8, r8)
1000d690:	1000f1f1 	.word	0x1000f1f1
1000d694:	1000d125 	.word	0x1000d125

1000d698 <at_ble_disconnect>:
1000d698:	b538      	push	{r3, r4, r5, lr}
1000d69a:	1c04      	adds	r4, r0, #0
1000d69c:	4b04      	ldr	r3, [pc, #16]	; (1000d6b0 <at_ble_disconnect+0x18>)
1000d69e:	1c08      	adds	r0, r1, #0
1000d6a0:	1c21      	adds	r1, r4, #0
1000d6a2:	4798      	blx	r3
1000d6a4:	1c05      	adds	r5, r0, #0
1000d6a6:	4b03      	ldr	r3, [pc, #12]	; (1000d6b4 <at_ble_disconnect+0x1c>)
1000d6a8:	1c20      	adds	r0, r4, #0
1000d6aa:	4798      	blx	r3
1000d6ac:	1c28      	adds	r0, r5, #0
1000d6ae:	bd38      	pop	{r3, r4, r5, pc}
1000d6b0:	1000e869 	.word	0x1000e869
1000d6b4:	1000d169 	.word	0x1000d169

1000d6b8 <at_ble_conn_update_reply>:
1000d6b8:	b510      	push	{r4, lr}
1000d6ba:	4c01      	ldr	r4, [pc, #4]	; (1000d6c0 <at_ble_conn_update_reply+0x8>)
1000d6bc:	47a0      	blx	r4
1000d6be:	bd10      	pop	{r4, pc}
1000d6c0:	1000ed59 	.word	0x1000ed59

1000d6c4 <at_ble_random_address_resolve>:
1000d6c4:	b510      	push	{r4, lr}
1000d6c6:	23cf      	movs	r3, #207	; 0xcf
1000d6c8:	2800      	cmp	r0, #0
1000d6ca:	d00a      	beq.n	1000d6e2 <at_ble_random_address_resolve+0x1e>
1000d6cc:	2900      	cmp	r1, #0
1000d6ce:	d008      	beq.n	1000d6e2 <at_ble_random_address_resolve+0x1e>
1000d6d0:	2a00      	cmp	r2, #0
1000d6d2:	d006      	beq.n	1000d6e2 <at_ble_random_address_resolve+0x1e>
1000d6d4:	780c      	ldrb	r4, [r1, #0]
1000d6d6:	2c02      	cmp	r4, #2
1000d6d8:	d103      	bne.n	1000d6e2 <at_ble_random_address_resolve+0x1e>
1000d6da:	4b03      	ldr	r3, [pc, #12]	; (1000d6e8 <at_ble_random_address_resolve+0x24>)
1000d6dc:	3101      	adds	r1, #1
1000d6de:	4798      	blx	r3
1000d6e0:	2300      	movs	r3, #0
1000d6e2:	1c18      	adds	r0, r3, #0
1000d6e4:	bd10      	pop	{r4, pc}
1000d6e6:	46c0      	nop			; (mov r8, r8)
1000d6e8:	1000f585 	.word	0x1000f585

1000d6ec <at_ble_uuid_type2len>:
1000d6ec:	23cf      	movs	r3, #207	; 0xcf
1000d6ee:	2802      	cmp	r0, #2
1000d6f0:	d801      	bhi.n	1000d6f6 <at_ble_uuid_type2len+0xa>
1000d6f2:	4b02      	ldr	r3, [pc, #8]	; (1000d6fc <at_ble_uuid_type2len+0x10>)
1000d6f4:	5c1b      	ldrb	r3, [r3, r0]
1000d6f6:	1c18      	adds	r0, r3, #0
1000d6f8:	4770      	bx	lr
1000d6fa:	46c0      	nop			; (mov r8, r8)
1000d6fc:	10013627 	.word	0x10013627

1000d700 <at_ble_uuid_len2type>:
1000d700:	1e83      	subs	r3, r0, #2
1000d702:	b2db      	uxtb	r3, r3
1000d704:	2003      	movs	r0, #3
1000d706:	2b0e      	cmp	r3, #14
1000d708:	d801      	bhi.n	1000d70e <at_ble_uuid_len2type+0xe>
1000d70a:	4a01      	ldr	r2, [pc, #4]	; (1000d710 <at_ble_uuid_len2type+0x10>)
1000d70c:	5cd0      	ldrb	r0, [r2, r3]
1000d70e:	4770      	bx	lr
1000d710:	1001362a 	.word	0x1001362a

1000d714 <init_gatt_client_module>:
1000d714:	2200      	movs	r2, #0
1000d716:	4b01      	ldr	r3, [pc, #4]	; (1000d71c <init_gatt_client_module+0x8>)
1000d718:	801a      	strh	r2, [r3, #0]
1000d71a:	4770      	bx	lr
1000d71c:	100151bc 	.word	0x100151bc

1000d720 <db_searchATT>:
1000d720:	b570      	push	{r4, r5, r6, lr}
1000d722:	1c05      	adds	r5, r0, #0
1000d724:	2400      	movs	r4, #0
1000d726:	4b0c      	ldr	r3, [pc, #48]	; (1000d758 <db_searchATT+0x38>)
1000d728:	6819      	ldr	r1, [r3, #0]
1000d72a:	4b0c      	ldr	r3, [pc, #48]	; (1000d75c <db_searchATT+0x3c>)
1000d72c:	681e      	ldr	r6, [r3, #0]
1000d72e:	428c      	cmp	r4, r1
1000d730:	dc10      	bgt.n	1000d754 <db_searchATT+0x34>
1000d732:	200c      	movs	r0, #12
1000d734:	1863      	adds	r3, r4, r1
1000d736:	0fda      	lsrs	r2, r3, #31
1000d738:	18d3      	adds	r3, r2, r3
1000d73a:	1c02      	adds	r2, r0, #0
1000d73c:	105b      	asrs	r3, r3, #1
1000d73e:	435a      	muls	r2, r3
1000d740:	18b0      	adds	r0, r6, r2
1000d742:	8802      	ldrh	r2, [r0, #0]
1000d744:	42aa      	cmp	r2, r5
1000d746:	d201      	bcs.n	1000d74c <db_searchATT+0x2c>
1000d748:	1e59      	subs	r1, r3, #1
1000d74a:	e7f0      	b.n	1000d72e <db_searchATT+0xe>
1000d74c:	42aa      	cmp	r2, r5
1000d74e:	d902      	bls.n	1000d756 <db_searchATT+0x36>
1000d750:	1c5c      	adds	r4, r3, #1
1000d752:	e7ec      	b.n	1000d72e <db_searchATT+0xe>
1000d754:	2000      	movs	r0, #0
1000d756:	bd70      	pop	{r4, r5, r6, pc}
1000d758:	100151d0 	.word	0x100151d0
1000d75c:	100151c8 	.word	0x100151c8

1000d760 <att_permissions>:
1000d760:	b530      	push	{r4, r5, lr}
1000d762:	2403      	movs	r4, #3
1000d764:	1c05      	adds	r5, r0, #0
1000d766:	2301      	movs	r3, #1
1000d768:	4025      	ands	r5, r4
1000d76a:	42a5      	cmp	r5, r4
1000d76c:	d009      	beq.n	1000d782 <att_permissions+0x22>
1000d76e:	1c23      	adds	r3, r4, #0
1000d770:	1924      	adds	r4, r4, r4
1000d772:	4220      	tst	r0, r4
1000d774:	d105      	bne.n	1000d782 <att_permissions+0x22>
1000d776:	3b02      	subs	r3, #2
1000d778:	4218      	tst	r0, r3
1000d77a:	d102      	bne.n	1000d782 <att_permissions+0x22>
1000d77c:	1e4b      	subs	r3, r1, #1
1000d77e:	4199      	sbcs	r1, r3
1000d780:	b28b      	uxth	r3, r1
1000d782:	2130      	movs	r1, #48	; 0x30
1000d784:	4001      	ands	r1, r0
1000d786:	2930      	cmp	r1, #48	; 0x30
1000d788:	d007      	beq.n	1000d79a <att_permissions+0x3a>
1000d78a:	0641      	lsls	r1, r0, #25
1000d78c:	d401      	bmi.n	1000d792 <att_permissions+0x32>
1000d78e:	0681      	lsls	r1, r0, #26
1000d790:	d501      	bpl.n	1000d796 <att_permissions+0x36>
1000d792:	4807      	ldr	r0, [pc, #28]	; (1000d7b0 <att_permissions+0x50>)
1000d794:	e009      	b.n	1000d7aa <att_permissions+0x4a>
1000d796:	06c1      	lsls	r1, r0, #27
1000d798:	d501      	bpl.n	1000d79e <att_permissions+0x3e>
1000d79a:	4806      	ldr	r0, [pc, #24]	; (1000d7b4 <att_permissions+0x54>)
1000d79c:	e005      	b.n	1000d7aa <att_permissions+0x4a>
1000d79e:	2a00      	cmp	r2, #0
1000d7a0:	d001      	beq.n	1000d7a6 <att_permissions+0x46>
1000d7a2:	2204      	movs	r2, #4
1000d7a4:	4313      	orrs	r3, r2
1000d7a6:	2080      	movs	r0, #128	; 0x80
1000d7a8:	0180      	lsls	r0, r0, #6
1000d7aa:	4318      	orrs	r0, r3
1000d7ac:	bd30      	pop	{r4, r5, pc}
1000d7ae:	46c0      	nop			; (mov r8, r8)
1000d7b0:	0000200c 	.word	0x0000200c
1000d7b4:	00002004 	.word	0x00002004

1000d7b8 <char_permissions>:
1000d7b8:	b530      	push	{r4, r5, lr}
1000d7ba:	2300      	movs	r3, #0
1000d7bc:	0784      	lsls	r4, r0, #30
1000d7be:	d503      	bpl.n	1000d7c8 <char_permissions+0x10>
1000d7c0:	3301      	adds	r3, #1
1000d7c2:	4219      	tst	r1, r3
1000d7c4:	d100      	bne.n	1000d7c8 <char_permissions+0x10>
1000d7c6:	3302      	adds	r3, #2
1000d7c8:	0704      	lsls	r4, r0, #28
1000d7ca:	d508      	bpl.n	1000d7de <char_permissions+0x26>
1000d7cc:	06cc      	lsls	r4, r1, #27
1000d7ce:	d501      	bpl.n	1000d7d4 <char_permissions+0x1c>
1000d7d0:	2404      	movs	r4, #4
1000d7d2:	e000      	b.n	1000d7d6 <char_permissions+0x1e>
1000d7d4:	240c      	movs	r4, #12
1000d7d6:	4323      	orrs	r3, r4
1000d7d8:	2480      	movs	r4, #128	; 0x80
1000d7da:	01a4      	lsls	r4, r4, #6
1000d7dc:	4323      	orrs	r3, r4
1000d7de:	0684      	lsls	r4, r0, #26
1000d7e0:	d506      	bpl.n	1000d7f0 <char_permissions+0x38>
1000d7e2:	2406      	movs	r4, #6
1000d7e4:	4221      	tst	r1, r4
1000d7e6:	d101      	bne.n	1000d7ec <char_permissions+0x34>
1000d7e8:	340a      	adds	r4, #10
1000d7ea:	e000      	b.n	1000d7ee <char_permissions+0x36>
1000d7ec:	2430      	movs	r4, #48	; 0x30
1000d7ee:	4323      	orrs	r3, r4
1000d7f0:	06c4      	lsls	r4, r0, #27
1000d7f2:	d506      	bpl.n	1000d802 <char_permissions+0x4a>
1000d7f4:	2406      	movs	r4, #6
1000d7f6:	4221      	tst	r1, r4
1000d7f8:	d101      	bne.n	1000d7fe <char_permissions+0x46>
1000d7fa:	343a      	adds	r4, #58	; 0x3a
1000d7fc:	e000      	b.n	1000d800 <char_permissions+0x48>
1000d7fe:	24c0      	movs	r4, #192	; 0xc0
1000d800:	4323      	orrs	r3, r4
1000d802:	2480      	movs	r4, #128	; 0x80
1000d804:	0064      	lsls	r4, r4, #1
1000d806:	4220      	tst	r0, r4
1000d808:	d000      	beq.n	1000d80c <char_permissions+0x54>
1000d80a:	4323      	orrs	r3, r4
1000d80c:	07c4      	lsls	r4, r0, #31
1000d80e:	d502      	bpl.n	1000d816 <char_permissions+0x5e>
1000d810:	2480      	movs	r4, #128	; 0x80
1000d812:	00a4      	lsls	r4, r4, #2
1000d814:	4323      	orrs	r3, r4
1000d816:	2404      	movs	r4, #4
1000d818:	4220      	tst	r0, r4
1000d81a:	d006      	beq.n	1000d82a <char_permissions+0x72>
1000d81c:	06cd      	lsls	r5, r1, #27
1000d81e:	d400      	bmi.n	1000d822 <char_permissions+0x6a>
1000d820:	240c      	movs	r4, #12
1000d822:	4323      	orrs	r3, r4
1000d824:	2480      	movs	r4, #128	; 0x80
1000d826:	0124      	lsls	r4, r4, #4
1000d828:	4323      	orrs	r3, r4
1000d82a:	0644      	lsls	r4, r0, #25
1000d82c:	d501      	bpl.n	1000d832 <char_permissions+0x7a>
1000d82e:	4c08      	ldr	r4, [pc, #32]	; (1000d850 <char_permissions+0x98>)
1000d830:	4323      	orrs	r3, r4
1000d832:	0600      	lsls	r0, r0, #24
1000d834:	d507      	bpl.n	1000d846 <char_permissions+0x8e>
1000d836:	2004      	movs	r0, #4
1000d838:	06c9      	lsls	r1, r1, #27
1000d83a:	d400      	bmi.n	1000d83e <char_permissions+0x86>
1000d83c:	200c      	movs	r0, #12
1000d83e:	4303      	orrs	r3, r0
1000d840:	2084      	movs	r0, #132	; 0x84
1000d842:	0180      	lsls	r0, r0, #6
1000d844:	4303      	orrs	r3, r0
1000d846:	0390      	lsls	r0, r2, #14
1000d848:	4303      	orrs	r3, r0
1000d84a:	b298      	uxth	r0, r3
1000d84c:	bd30      	pop	{r4, r5, pc}
1000d84e:	46c0      	nop			; (mov r8, r8)
1000d850:	00001004 	.word	0x00001004

1000d854 <presentation_format_define>:
1000d854:	b507      	push	{r0, r1, r2, lr}
1000d856:	466a      	mov	r2, sp
1000d858:	780b      	ldrb	r3, [r1, #0]
1000d85a:	7013      	strb	r3, [r2, #0]
1000d85c:	784b      	ldrb	r3, [r1, #1]
1000d85e:	7053      	strb	r3, [r2, #1]
1000d860:	884b      	ldrh	r3, [r1, #2]
1000d862:	7093      	strb	r3, [r2, #2]
1000d864:	0a1b      	lsrs	r3, r3, #8
1000d866:	70d3      	strb	r3, [r2, #3]
1000d868:	790b      	ldrb	r3, [r1, #4]
1000d86a:	7113      	strb	r3, [r2, #4]
1000d86c:	88cb      	ldrh	r3, [r1, #6]
1000d86e:	2107      	movs	r1, #7
1000d870:	7153      	strb	r3, [r2, #5]
1000d872:	0a1b      	lsrs	r3, r3, #8
1000d874:	7193      	strb	r3, [r2, #6]
1000d876:	4b01      	ldr	r3, [pc, #4]	; (1000d87c <presentation_format_define+0x28>)
1000d878:	4798      	blx	r3
1000d87a:	bd0e      	pop	{r1, r2, r3, pc}
1000d87c:	1000fbe9 	.word	0x1000fbe9

1000d880 <db_addATT>:
1000d880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d882:	4c29      	ldr	r4, [pc, #164]	; (1000d928 <db_addATT+0xa8>)
1000d884:	1c1d      	adds	r5, r3, #0
1000d886:	6823      	ldr	r3, [r4, #0]
1000d888:	9001      	str	r0, [sp, #4]
1000d88a:	26d3      	movs	r6, #211	; 0xd3
1000d88c:	2b00      	cmp	r3, #0
1000d88e:	d048      	beq.n	1000d922 <db_addATT+0xa2>
1000d890:	1c1e      	adds	r6, r3, #0
1000d892:	3e0c      	subs	r6, #12
1000d894:	6026      	str	r6, [r4, #0]
1000d896:	2900      	cmp	r1, #0
1000d898:	d005      	beq.n	1000d8a6 <db_addATT+0x26>
1000d89a:	4f24      	ldr	r7, [pc, #144]	; (1000d92c <db_addATT+0xac>)
1000d89c:	46bc      	mov	ip, r7
1000d89e:	4660      	mov	r0, ip
1000d8a0:	683f      	ldr	r7, [r7, #0]
1000d8a2:	18bf      	adds	r7, r7, r2
1000d8a4:	6007      	str	r7, [r0, #0]
1000d8a6:	4821      	ldr	r0, [pc, #132]	; (1000d92c <db_addATT+0xac>)
1000d8a8:	6807      	ldr	r7, [r0, #0]
1000d8aa:	4684      	mov	ip, r0
1000d8ac:	42be      	cmp	r6, r7
1000d8ae:	d932      	bls.n	1000d916 <db_addATT+0x96>
1000d8b0:	4668      	mov	r0, sp
1000d8b2:	8880      	ldrh	r0, [r0, #4]
1000d8b4:	3b0c      	subs	r3, #12
1000d8b6:	8018      	strh	r0, [r3, #0]
1000d8b8:	6823      	ldr	r3, [r4, #0]
1000d8ba:	2900      	cmp	r1, #0
1000d8bc:	d009      	beq.n	1000d8d2 <db_addATT+0x52>
1000d8be:	2a00      	cmp	r2, #0
1000d8c0:	d007      	beq.n	1000d8d2 <db_addATT+0x52>
1000d8c2:	4660      	mov	r0, ip
1000d8c4:	6800      	ldr	r0, [r0, #0]
1000d8c6:	809a      	strh	r2, [r3, #4]
1000d8c8:	1a80      	subs	r0, r0, r2
1000d8ca:	6098      	str	r0, [r3, #8]
1000d8cc:	4b18      	ldr	r3, [pc, #96]	; (1000d930 <db_addATT+0xb0>)
1000d8ce:	4798      	blx	r3
1000d8d0:	e002      	b.n	1000d8d8 <db_addATT+0x58>
1000d8d2:	2100      	movs	r1, #0
1000d8d4:	809a      	strh	r2, [r3, #4]
1000d8d6:	6099      	str	r1, [r3, #8]
1000d8d8:	2300      	movs	r3, #0
1000d8da:	6822      	ldr	r2, [r4, #0]
1000d8dc:	7093      	strb	r3, [r2, #2]
1000d8de:	3303      	adds	r3, #3
1000d8e0:	402b      	ands	r3, r5
1000d8e2:	2b03      	cmp	r3, #3
1000d8e4:	d001      	beq.n	1000d8ea <db_addATT+0x6a>
1000d8e6:	076b      	lsls	r3, r5, #29
1000d8e8:	d504      	bpl.n	1000d8f4 <db_addATT+0x74>
1000d8ea:	2101      	movs	r1, #1
1000d8ec:	6822      	ldr	r2, [r4, #0]
1000d8ee:	7893      	ldrb	r3, [r2, #2]
1000d8f0:	430b      	orrs	r3, r1
1000d8f2:	7093      	strb	r3, [r2, #2]
1000d8f4:	2330      	movs	r3, #48	; 0x30
1000d8f6:	402b      	ands	r3, r5
1000d8f8:	2b30      	cmp	r3, #48	; 0x30
1000d8fa:	d001      	beq.n	1000d900 <db_addATT+0x80>
1000d8fc:	066b      	lsls	r3, r5, #25
1000d8fe:	d504      	bpl.n	1000d90a <db_addATT+0x8a>
1000d900:	2102      	movs	r1, #2
1000d902:	6822      	ldr	r2, [r4, #0]
1000d904:	7893      	ldrb	r3, [r2, #2]
1000d906:	430b      	orrs	r3, r1
1000d908:	7093      	strb	r3, [r2, #2]
1000d90a:	4a0a      	ldr	r2, [pc, #40]	; (1000d934 <db_addATT+0xb4>)
1000d90c:	2600      	movs	r6, #0
1000d90e:	6813      	ldr	r3, [r2, #0]
1000d910:	3301      	adds	r3, #1
1000d912:	6013      	str	r3, [r2, #0]
1000d914:	e005      	b.n	1000d922 <db_addATT+0xa2>
1000d916:	6023      	str	r3, [r4, #0]
1000d918:	2611      	movs	r6, #17
1000d91a:	2900      	cmp	r1, #0
1000d91c:	d001      	beq.n	1000d922 <db_addATT+0xa2>
1000d91e:	1aba      	subs	r2, r7, r2
1000d920:	6002      	str	r2, [r0, #0]
1000d922:	1c30      	adds	r0, r6, #0
1000d924:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d926:	46c0      	nop			; (mov r8, r8)
1000d928:	100151c8 	.word	0x100151c8
1000d92c:	100151cc 	.word	0x100151cc
1000d930:	10010e6f 	.word	0x10010e6f
1000d934:	100151d0 	.word	0x100151d0

1000d938 <user_description_define>:
1000d938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d93a:	1c05      	adds	r5, r0, #0
1000d93c:	20cf      	movs	r0, #207	; 0xcf
1000d93e:	2a00      	cmp	r2, #0
1000d940:	d01c      	beq.n	1000d97c <user_description_define+0x44>
1000d942:	1c14      	adds	r4, r2, #0
1000d944:	2203      	movs	r2, #3
1000d946:	1c1e      	adds	r6, r3, #0
1000d948:	400a      	ands	r2, r1
1000d94a:	1c0b      	adds	r3, r1, #0
1000d94c:	3a03      	subs	r2, #3
1000d94e:	4251      	negs	r1, r2
1000d950:	4151      	adcs	r1, r2
1000d952:	075a      	lsls	r2, r3, #29
1000d954:	0fd2      	lsrs	r2, r2, #31
1000d956:	430a      	orrs	r2, r1
1000d958:	03d2      	lsls	r2, r2, #15
1000d95a:	4f09      	ldr	r7, [pc, #36]	; (1000d980 <user_description_define+0x48>)
1000d95c:	1c28      	adds	r0, r5, #0
1000d95e:	2a00      	cmp	r2, #0
1000d960:	d003      	beq.n	1000d96a <user_description_define+0x32>
1000d962:	1c21      	adds	r1, r4, #0
1000d964:	1c32      	adds	r2, r6, #0
1000d966:	47b8      	blx	r7
1000d968:	e008      	b.n	1000d97c <user_description_define+0x44>
1000d96a:	1c11      	adds	r1, r2, #0
1000d96c:	47b8      	blx	r7
1000d96e:	2800      	cmp	r0, #0
1000d970:	d104      	bne.n	1000d97c <user_description_define+0x44>
1000d972:	1c28      	adds	r0, r5, #0
1000d974:	1c31      	adds	r1, r6, #0
1000d976:	1c22      	adds	r2, r4, #0
1000d978:	4b02      	ldr	r3, [pc, #8]	; (1000d984 <user_description_define+0x4c>)
1000d97a:	4798      	blx	r3
1000d97c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d97e:	46c0      	nop			; (mov r8, r8)
1000d980:	1000d881 	.word	0x1000d881
1000d984:	1000fbe9 	.word	0x1000fbe9

1000d988 <at_ble_read_authorize_reply.part.1>:
1000d988:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000d98a:	4b09      	ldr	r3, [pc, #36]	; (1000d9b0 <at_ble_read_authorize_reply.part.1+0x28>)
1000d98c:	1c05      	adds	r5, r0, #0
1000d98e:	1c08      	adds	r0, r1, #0
1000d990:	1c0c      	adds	r4, r1, #0
1000d992:	4798      	blx	r3
1000d994:	2800      	cmp	r0, #0
1000d996:	d009      	beq.n	1000d9ac <at_ble_read_authorize_reply.part.1+0x24>
1000d998:	6882      	ldr	r2, [r0, #8]
1000d99a:	2a00      	cmp	r2, #0
1000d99c:	d006      	beq.n	1000d9ac <at_ble_read_authorize_reply.part.1+0x24>
1000d99e:	8883      	ldrh	r3, [r0, #4]
1000d9a0:	1c29      	adds	r1, r5, #0
1000d9a2:	9200      	str	r2, [sp, #0]
1000d9a4:	1c20      	adds	r0, r4, #0
1000d9a6:	2200      	movs	r2, #0
1000d9a8:	4c02      	ldr	r4, [pc, #8]	; (1000d9b4 <at_ble_read_authorize_reply.part.1+0x2c>)
1000d9aa:	47a0      	blx	r4
1000d9ac:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000d9ae:	46c0      	nop			; (mov r8, r8)
1000d9b0:	1000d721 	.word	0x1000d721
1000d9b4:	1000f681 	.word	0x1000f681

1000d9b8 <internal_at_ble_service_define>:
1000d9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d9ba:	b08b      	sub	sp, #44	; 0x2c
1000d9bc:	9306      	str	r3, [sp, #24]
1000d9be:	ab10      	add	r3, sp, #64	; 0x40
1000d9c0:	9202      	str	r2, [sp, #8]
1000d9c2:	cb04      	ldmia	r3!, {r2}
1000d9c4:	1c05      	adds	r5, r0, #0
1000d9c6:	881b      	ldrh	r3, [r3, #0]
1000d9c8:	9105      	str	r1, [sp, #20]
1000d9ca:	9303      	str	r3, [sp, #12]
1000d9cc:	ab12      	add	r3, sp, #72	; 0x48
1000d9ce:	781b      	ldrb	r3, [r3, #0]
1000d9d0:	20cf      	movs	r0, #207	; 0xcf
1000d9d2:	9304      	str	r3, [sp, #16]
1000d9d4:	2d00      	cmp	r5, #0
1000d9d6:	d100      	bne.n	1000d9da <internal_at_ble_service_define+0x22>
1000d9d8:	e1ca      	b.n	1000dd70 <internal_at_ble_service_define+0x3b8>
1000d9da:	2900      	cmp	r1, #0
1000d9dc:	d100      	bne.n	1000d9e0 <internal_at_ble_service_define+0x28>
1000d9de:	e1c7      	b.n	1000dd70 <internal_at_ble_service_define+0x3b8>
1000d9e0:	2a00      	cmp	r2, #0
1000d9e2:	d100      	bne.n	1000d9e6 <internal_at_ble_service_define+0x2e>
1000d9e4:	e1c4      	b.n	1000dd70 <internal_at_ble_service_define+0x3b8>
1000d9e6:	9b03      	ldr	r3, [sp, #12]
1000d9e8:	2b00      	cmp	r3, #0
1000d9ea:	d100      	bne.n	1000d9ee <internal_at_ble_service_define+0x36>
1000d9ec:	e1c0      	b.n	1000dd70 <internal_at_ble_service_define+0x3b8>
1000d9ee:	4bc9      	ldr	r3, [pc, #804]	; (1000dd14 <internal_at_ble_service_define+0x35c>)
1000d9f0:	3004      	adds	r0, #4
1000d9f2:	681e      	ldr	r6, [r3, #0]
1000d9f4:	2e00      	cmp	r6, #0
1000d9f6:	d100      	bne.n	1000d9fa <internal_at_ble_service_define+0x42>
1000d9f8:	e1ba      	b.n	1000dd70 <internal_at_ble_service_define+0x3b8>
1000d9fa:	2400      	movs	r4, #0
1000d9fc:	4bc6      	ldr	r3, [pc, #792]	; (1000dd18 <internal_at_ble_service_define+0x360>)
1000d9fe:	8034      	strh	r4, [r6, #0]
1000da00:	881b      	ldrh	r3, [r3, #0]
1000da02:	1db7      	adds	r7, r6, #6
1000da04:	1c21      	adds	r1, r4, #0
1000da06:	2210      	movs	r2, #16
1000da08:	8073      	strh	r3, [r6, #2]
1000da0a:	1c38      	adds	r0, r7, #0
1000da0c:	4bc3      	ldr	r3, [pc, #780]	; (1000dd1c <internal_at_ble_service_define+0x364>)
1000da0e:	4798      	blx	r3
1000da10:	7828      	ldrb	r0, [r5, #0]
1000da12:	4bc3      	ldr	r3, [pc, #780]	; (1000dd20 <internal_at_ble_service_define+0x368>)
1000da14:	4798      	blx	r3
1000da16:	1c69      	adds	r1, r5, #1
1000da18:	1c02      	adds	r2, r0, #0
1000da1a:	4bc2      	ldr	r3, [pc, #776]	; (1000dd24 <internal_at_ble_service_define+0x36c>)
1000da1c:	1c38      	adds	r0, r7, #0
1000da1e:	4798      	blx	r3
1000da20:	2204      	movs	r2, #4
1000da22:	782b      	ldrb	r3, [r5, #0]
1000da24:	9d02      	ldr	r5, [sp, #8]
1000da26:	011b      	lsls	r3, r3, #4
1000da28:	4313      	orrs	r3, r2
1000da2a:	9a04      	ldr	r2, [sp, #16]
1000da2c:	7174      	strb	r4, [r6, #5]
1000da2e:	0192      	lsls	r2, r2, #6
1000da30:	4313      	orrs	r3, r2
1000da32:	7133      	strb	r3, [r6, #4]
1000da34:	2316      	movs	r3, #22
1000da36:	9a06      	ldr	r2, [sp, #24]
1000da38:	3512      	adds	r5, #18
1000da3a:	4353      	muls	r3, r2
1000da3c:	9a02      	ldr	r2, [sp, #8]
1000da3e:	3312      	adds	r3, #18
1000da40:	18d7      	adds	r7, r2, r3
1000da42:	42bd      	cmp	r5, r7
1000da44:	d00f      	beq.n	1000da66 <internal_at_ble_service_define+0xae>
1000da46:	4bb8      	ldr	r3, [pc, #736]	; (1000dd28 <internal_at_ble_service_define+0x370>)
1000da48:	8829      	ldrh	r1, [r5, #0]
1000da4a:	9300      	str	r3, [sp, #0]
1000da4c:	230e      	movs	r3, #14
1000da4e:	aa06      	add	r2, sp, #24
1000da50:	189b      	adds	r3, r3, r2
1000da52:	9301      	str	r3, [sp, #4]
1000da54:	4cb5      	ldr	r4, [pc, #724]	; (1000dd2c <internal_at_ble_service_define+0x374>)
1000da56:	1c30      	adds	r0, r6, #0
1000da58:	2201      	movs	r2, #1
1000da5a:	2302      	movs	r3, #2
1000da5c:	47a0      	blx	r4
1000da5e:	3516      	adds	r5, #22
1000da60:	1e04      	subs	r4, r0, #0
1000da62:	d0ee      	beq.n	1000da42 <internal_at_ble_service_define+0x8a>
1000da64:	e183      	b.n	1000dd6e <internal_at_ble_service_define+0x3b6>
1000da66:	9f10      	ldr	r7, [sp, #64]	; 0x40
1000da68:	2300      	movs	r3, #0
1000da6a:	3714      	adds	r7, #20
1000da6c:	1c3d      	adds	r5, r7, #0
1000da6e:	9302      	str	r3, [sp, #8]
1000da70:	9b02      	ldr	r3, [sp, #8]
1000da72:	9a03      	ldr	r2, [sp, #12]
1000da74:	4293      	cmp	r3, r2
1000da76:	db00      	blt.n	1000da7a <internal_at_ble_service_define+0xc2>
1000da78:	e0bf      	b.n	1000dbfa <internal_at_ble_service_define+0x242>
1000da7a:	4bad      	ldr	r3, [pc, #692]	; (1000dd30 <internal_at_ble_service_define+0x378>)
1000da7c:	aa06      	add	r2, sp, #24
1000da7e:	9300      	str	r3, [sp, #0]
1000da80:	230e      	movs	r3, #14
1000da82:	189b      	adds	r3, r3, r2
1000da84:	9301      	str	r3, [sp, #4]
1000da86:	4ca9      	ldr	r4, [pc, #676]	; (1000dd2c <internal_at_ble_service_define+0x374>)
1000da88:	1c30      	adds	r0, r6, #0
1000da8a:	2104      	movs	r1, #4
1000da8c:	2201      	movs	r2, #1
1000da8e:	2302      	movs	r3, #2
1000da90:	47a0      	blx	r4
1000da92:	1e04      	subs	r4, r0, #0
1000da94:	d000      	beq.n	1000da98 <internal_at_ble_service_define+0xe0>
1000da96:	e16a      	b.n	1000dd6e <internal_at_ble_service_define+0x3b6>
1000da98:	1c2b      	adds	r3, r5, #0
1000da9a:	3b12      	subs	r3, #18
1000da9c:	7b2c      	ldrb	r4, [r5, #12]
1000da9e:	781b      	ldrb	r3, [r3, #0]
1000daa0:	1c21      	adds	r1, r4, #0
1000daa2:	1c1a      	adds	r2, r3, #0
1000daa4:	9304      	str	r3, [sp, #16]
1000daa6:	8828      	ldrh	r0, [r5, #0]
1000daa8:	4ba2      	ldr	r3, [pc, #648]	; (1000dd34 <internal_at_ble_service_define+0x37c>)
1000daaa:	4798      	blx	r3
1000daac:	2303      	movs	r3, #3
1000daae:	4023      	ands	r3, r4
1000dab0:	3b03      	subs	r3, #3
1000dab2:	4259      	negs	r1, r3
1000dab4:	4159      	adcs	r1, r3
1000dab6:	2301      	movs	r3, #1
1000dab8:	08a4      	lsrs	r4, r4, #2
1000daba:	401c      	ands	r4, r3
1000dabc:	430c      	orrs	r4, r1
1000dabe:	896b      	ldrh	r3, [r5, #10]
1000dac0:	03e4      	lsls	r4, r4, #15
1000dac2:	431c      	orrs	r4, r3
1000dac4:	9007      	str	r0, [sp, #28]
1000dac6:	4b96      	ldr	r3, [pc, #600]	; (1000dd20 <internal_at_ble_service_define+0x368>)
1000dac8:	9804      	ldr	r0, [sp, #16]
1000daca:	4798      	blx	r3
1000dacc:	1c2a      	adds	r2, r5, #0
1000dace:	3a11      	subs	r2, #17
1000dad0:	9200      	str	r2, [sp, #0]
1000dad2:	3a03      	subs	r2, #3
1000dad4:	1c03      	adds	r3, r0, #0
1000dad6:	9201      	str	r2, [sp, #4]
1000dad8:	1c21      	adds	r1, r4, #0
1000dada:	1c30      	adds	r0, r6, #0
1000dadc:	4c93      	ldr	r4, [pc, #588]	; (1000dd2c <internal_at_ble_service_define+0x374>)
1000dade:	9a07      	ldr	r2, [sp, #28]
1000dae0:	47a0      	blx	r4
1000dae2:	1e04      	subs	r4, r0, #0
1000dae4:	d000      	beq.n	1000dae8 <internal_at_ble_service_define+0x130>
1000dae6:	e142      	b.n	1000dd6e <internal_at_ble_service_define+0x3b6>
1000dae8:	22c0      	movs	r2, #192	; 0xc0
1000daea:	882b      	ldrh	r3, [r5, #0]
1000daec:	0052      	lsls	r2, r2, #1
1000daee:	4213      	tst	r3, r2
1000daf0:	d104      	bne.n	1000dafc <internal_at_ble_service_define+0x144>
1000daf2:	8aab      	ldrh	r3, [r5, #20]
1000daf4:	9304      	str	r3, [sp, #16]
1000daf6:	2b00      	cmp	r3, #0
1000daf8:	d116      	bne.n	1000db28 <internal_at_ble_service_define+0x170>
1000dafa:	e03a      	b.n	1000db72 <internal_at_ble_service_define+0x1ba>
1000dafc:	2201      	movs	r2, #1
1000dafe:	09d9      	lsrs	r1, r3, #7
1000db00:	4011      	ands	r1, r2
1000db02:	05db      	lsls	r3, r3, #23
1000db04:	d501      	bpl.n	1000db0a <internal_at_ble_service_define+0x152>
1000db06:	2302      	movs	r3, #2
1000db08:	4319      	orrs	r1, r3
1000db0a:	4b8b      	ldr	r3, [pc, #556]	; (1000dd38 <internal_at_ble_service_define+0x380>)
1000db0c:	aa06      	add	r2, sp, #24
1000db0e:	9300      	str	r3, [sp, #0]
1000db10:	230e      	movs	r3, #14
1000db12:	189b      	adds	r3, r3, r2
1000db14:	9301      	str	r3, [sp, #4]
1000db16:	4c85      	ldr	r4, [pc, #532]	; (1000dd2c <internal_at_ble_service_define+0x374>)
1000db18:	0209      	lsls	r1, r1, #8
1000db1a:	1c30      	adds	r0, r6, #0
1000db1c:	2201      	movs	r2, #1
1000db1e:	2302      	movs	r3, #2
1000db20:	47a0      	blx	r4
1000db22:	1e04      	subs	r4, r0, #0
1000db24:	d0e5      	beq.n	1000daf2 <internal_at_ble_service_define+0x13a>
1000db26:	e122      	b.n	1000dd6e <internal_at_ble_service_define+0x3b6>
1000db28:	2380      	movs	r3, #128	; 0x80
1000db2a:	882a      	ldrh	r2, [r5, #0]
1000db2c:	7f2c      	ldrb	r4, [r5, #28]
1000db2e:	005b      	lsls	r3, r3, #1
1000db30:	401a      	ands	r2, r3
1000db32:	1c20      	adds	r0, r4, #0
1000db34:	2101      	movs	r1, #1
1000db36:	2a00      	cmp	r2, #0
1000db38:	d000      	beq.n	1000db3c <internal_at_ble_service_define+0x184>
1000db3a:	1c0a      	adds	r2, r1, #0
1000db3c:	4b7f      	ldr	r3, [pc, #508]	; (1000dd3c <internal_at_ble_service_define+0x384>)
1000db3e:	4798      	blx	r3
1000db40:	2203      	movs	r2, #3
1000db42:	4022      	ands	r2, r4
1000db44:	3a03      	subs	r2, #3
1000db46:	4251      	negs	r1, r2
1000db48:	4151      	adcs	r1, r2
1000db4a:	4b7d      	ldr	r3, [pc, #500]	; (1000dd40 <internal_at_ble_service_define+0x388>)
1000db4c:	1c0a      	adds	r2, r1, #0
1000db4e:	9300      	str	r3, [sp, #0]
1000db50:	1c2b      	adds	r3, r5, #0
1000db52:	0764      	lsls	r4, r4, #29
1000db54:	0fe4      	lsrs	r4, r4, #31
1000db56:	4322      	orrs	r2, r4
1000db58:	03d2      	lsls	r2, r2, #15
1000db5a:	4310      	orrs	r0, r2
1000db5c:	3320      	adds	r3, #32
1000db5e:	b282      	uxth	r2, r0
1000db60:	9301      	str	r3, [sp, #4]
1000db62:	4c72      	ldr	r4, [pc, #456]	; (1000dd2c <internal_at_ble_service_define+0x374>)
1000db64:	1c30      	adds	r0, r6, #0
1000db66:	9904      	ldr	r1, [sp, #16]
1000db68:	2302      	movs	r3, #2
1000db6a:	47a0      	blx	r4
1000db6c:	1e04      	subs	r4, r0, #0
1000db6e:	d000      	beq.n	1000db72 <internal_at_ble_service_define+0x1ba>
1000db70:	e0fd      	b.n	1000dd6e <internal_at_ble_service_define+0x3b6>
1000db72:	2101      	movs	r1, #1
1000db74:	882b      	ldrh	r3, [r5, #0]
1000db76:	420b      	tst	r3, r1
1000db78:	d011      	beq.n	1000db9e <internal_at_ble_service_define+0x1e6>
1000db7a:	7fa8      	ldrb	r0, [r5, #30]
1000db7c:	4b6f      	ldr	r3, [pc, #444]	; (1000dd3c <internal_at_ble_service_define+0x384>)
1000db7e:	2200      	movs	r2, #0
1000db80:	4798      	blx	r3
1000db82:	4b70      	ldr	r3, [pc, #448]	; (1000dd44 <internal_at_ble_service_define+0x38c>)
1000db84:	1c02      	adds	r2, r0, #0
1000db86:	9300      	str	r3, [sp, #0]
1000db88:	1c2b      	adds	r3, r5, #0
1000db8a:	3324      	adds	r3, #36	; 0x24
1000db8c:	9301      	str	r3, [sp, #4]
1000db8e:	4c67      	ldr	r4, [pc, #412]	; (1000dd2c <internal_at_ble_service_define+0x374>)
1000db90:	1c30      	adds	r0, r6, #0
1000db92:	496d      	ldr	r1, [pc, #436]	; (1000dd48 <internal_at_ble_service_define+0x390>)
1000db94:	2302      	movs	r3, #2
1000db96:	47a0      	blx	r4
1000db98:	1e04      	subs	r4, r0, #0
1000db9a:	d000      	beq.n	1000db9e <internal_at_ble_service_define+0x1e6>
1000db9c:	e0e7      	b.n	1000dd6e <internal_at_ble_service_define+0x3b6>
1000db9e:	2330      	movs	r3, #48	; 0x30
1000dba0:	882a      	ldrh	r2, [r5, #0]
1000dba2:	421a      	tst	r2, r3
1000dba4:	d012      	beq.n	1000dbcc <internal_at_ble_service_define+0x214>
1000dba6:	2101      	movs	r1, #1
1000dba8:	7f68      	ldrb	r0, [r5, #29]
1000dbaa:	1c0a      	adds	r2, r1, #0
1000dbac:	4b63      	ldr	r3, [pc, #396]	; (1000dd3c <internal_at_ble_service_define+0x384>)
1000dbae:	4798      	blx	r3
1000dbb0:	4b66      	ldr	r3, [pc, #408]	; (1000dd4c <internal_at_ble_service_define+0x394>)
1000dbb2:	1c02      	adds	r2, r0, #0
1000dbb4:	9300      	str	r3, [sp, #0]
1000dbb6:	1c2b      	adds	r3, r5, #0
1000dbb8:	3322      	adds	r3, #34	; 0x22
1000dbba:	9301      	str	r3, [sp, #4]
1000dbbc:	4c5b      	ldr	r4, [pc, #364]	; (1000dd2c <internal_at_ble_service_define+0x374>)
1000dbbe:	1c30      	adds	r0, r6, #0
1000dbc0:	4961      	ldr	r1, [pc, #388]	; (1000dd48 <internal_at_ble_service_define+0x390>)
1000dbc2:	2302      	movs	r3, #2
1000dbc4:	47a0      	blx	r4
1000dbc6:	1e04      	subs	r4, r0, #0
1000dbc8:	d000      	beq.n	1000dbcc <internal_at_ble_service_define+0x214>
1000dbca:	e0d0      	b.n	1000dd6e <internal_at_ble_service_define+0x3b6>
1000dbcc:	69ab      	ldr	r3, [r5, #24]
1000dbce:	2b00      	cmp	r3, #0
1000dbd0:	d00e      	beq.n	1000dbf0 <internal_at_ble_service_define+0x238>
1000dbd2:	4b5f      	ldr	r3, [pc, #380]	; (1000dd50 <internal_at_ble_service_define+0x398>)
1000dbd4:	aa06      	add	r2, sp, #24
1000dbd6:	9300      	str	r3, [sp, #0]
1000dbd8:	230e      	movs	r3, #14
1000dbda:	189b      	adds	r3, r3, r2
1000dbdc:	9301      	str	r3, [sp, #4]
1000dbde:	4c53      	ldr	r4, [pc, #332]	; (1000dd2c <internal_at_ble_service_define+0x374>)
1000dbe0:	1c30      	adds	r0, r6, #0
1000dbe2:	2107      	movs	r1, #7
1000dbe4:	2201      	movs	r2, #1
1000dbe6:	2302      	movs	r3, #2
1000dbe8:	47a0      	blx	r4
1000dbea:	1e04      	subs	r4, r0, #0
1000dbec:	d000      	beq.n	1000dbf0 <internal_at_ble_service_define+0x238>
1000dbee:	e0be      	b.n	1000dd6e <internal_at_ble_service_define+0x3b6>
1000dbf0:	9b02      	ldr	r3, [sp, #8]
1000dbf2:	353c      	adds	r5, #60	; 0x3c
1000dbf4:	3301      	adds	r3, #1
1000dbf6:	9302      	str	r3, [sp, #8]
1000dbf8:	e73a      	b.n	1000da70 <internal_at_ble_service_define+0xb8>
1000dbfa:	1c30      	adds	r0, r6, #0
1000dbfc:	4b55      	ldr	r3, [pc, #340]	; (1000dd54 <internal_at_ble_service_define+0x39c>)
1000dbfe:	4798      	blx	r3
1000dc00:	1e04      	subs	r4, r0, #0
1000dc02:	d000      	beq.n	1000dc06 <internal_at_ble_service_define+0x24e>
1000dc04:	e0b3      	b.n	1000dd6e <internal_at_ble_service_define+0x3b6>
1000dc06:	8833      	ldrh	r3, [r6, #0]
1000dc08:	9a05      	ldr	r2, [sp, #20]
1000dc0a:	8013      	strh	r3, [r2, #0]
1000dc0c:	8836      	ldrh	r6, [r6, #0]
1000dc0e:	9b06      	ldr	r3, [sp, #24]
1000dc10:	9a03      	ldr	r2, [sp, #12]
1000dc12:	18f6      	adds	r6, r6, r3
1000dc14:	b2b3      	uxth	r3, r6
1000dc16:	9302      	str	r3, [sp, #8]
1000dc18:	233c      	movs	r3, #60	; 0x3c
1000dc1a:	4353      	muls	r3, r2
1000dc1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000dc1e:	3314      	adds	r3, #20
1000dc20:	18d3      	adds	r3, r2, r3
1000dc22:	9304      	str	r3, [sp, #16]
1000dc24:	9b04      	ldr	r3, [sp, #16]
1000dc26:	429f      	cmp	r7, r3
1000dc28:	d100      	bne.n	1000dc2c <internal_at_ble_service_define+0x274>
1000dc2a:	e0a0      	b.n	1000dd6e <internal_at_ble_service_define+0x3b6>
1000dc2c:	9b02      	ldr	r3, [sp, #8]
1000dc2e:	1c9d      	adds	r5, r3, #2
1000dc30:	1c3b      	adds	r3, r7, #0
1000dc32:	b2ad      	uxth	r5, r5
1000dc34:	3b14      	subs	r3, #20
1000dc36:	801d      	strh	r5, [r3, #0]
1000dc38:	9303      	str	r3, [sp, #12]
1000dc3a:	893b      	ldrh	r3, [r7, #8]
1000dc3c:	2b00      	cmp	r3, #0
1000dc3e:	d108      	bne.n	1000dc52 <internal_at_ble_service_define+0x29a>
1000dc40:	23c0      	movs	r3, #192	; 0xc0
1000dc42:	883a      	ldrh	r2, [r7, #0]
1000dc44:	005b      	lsls	r3, r3, #1
1000dc46:	421a      	tst	r2, r3
1000dc48:	d026      	beq.n	1000dc98 <internal_at_ble_service_define+0x2e0>
1000dc4a:	9e02      	ldr	r6, [sp, #8]
1000dc4c:	3603      	adds	r6, #3
1000dc4e:	b2b5      	uxth	r5, r6
1000dc50:	e022      	b.n	1000dc98 <internal_at_ble_service_define+0x2e0>
1000dc52:	2103      	movs	r1, #3
1000dc54:	7b3b      	ldrb	r3, [r7, #12]
1000dc56:	4019      	ands	r1, r3
1000dc58:	3903      	subs	r1, #3
1000dc5a:	424a      	negs	r2, r1
1000dc5c:	414a      	adcs	r2, r1
1000dc5e:	0759      	lsls	r1, r3, #29
1000dc60:	0fc9      	lsrs	r1, r1, #31
1000dc62:	4311      	orrs	r1, r2
1000dc64:	03c9      	lsls	r1, r1, #15
1000dc66:	897a      	ldrh	r2, [r7, #10]
1000dc68:	2900      	cmp	r1, #0
1000dc6a:	d007      	beq.n	1000dc7c <internal_at_ble_service_define+0x2c4>
1000dc6c:	6879      	ldr	r1, [r7, #4]
1000dc6e:	2900      	cmp	r1, #0
1000dc70:	d100      	bne.n	1000dc74 <internal_at_ble_service_define+0x2bc>
1000dc72:	4939      	ldr	r1, [pc, #228]	; (1000dd58 <internal_at_ble_service_define+0x3a0>)
1000dc74:	1c28      	adds	r0, r5, #0
1000dc76:	4e39      	ldr	r6, [pc, #228]	; (1000dd5c <internal_at_ble_service_define+0x3a4>)
1000dc78:	47b0      	blx	r6
1000dc7a:	e00a      	b.n	1000dc92 <internal_at_ble_service_define+0x2da>
1000dc7c:	1c28      	adds	r0, r5, #0
1000dc7e:	4e37      	ldr	r6, [pc, #220]	; (1000dd5c <internal_at_ble_service_define+0x3a4>)
1000dc80:	47b0      	blx	r6
1000dc82:	2800      	cmp	r0, #0
1000dc84:	d172      	bne.n	1000dd6c <internal_at_ble_service_define+0x3b4>
1000dc86:	9b03      	ldr	r3, [sp, #12]
1000dc88:	8939      	ldrh	r1, [r7, #8]
1000dc8a:	8818      	ldrh	r0, [r3, #0]
1000dc8c:	687a      	ldr	r2, [r7, #4]
1000dc8e:	4b34      	ldr	r3, [pc, #208]	; (1000dd60 <internal_at_ble_service_define+0x3a8>)
1000dc90:	4798      	blx	r3
1000dc92:	2800      	cmp	r0, #0
1000dc94:	d0d4      	beq.n	1000dc40 <internal_at_ble_service_define+0x288>
1000dc96:	e069      	b.n	1000dd6c <internal_at_ble_service_define+0x3b4>
1000dc98:	8abb      	ldrh	r3, [r7, #20]
1000dc9a:	2b00      	cmp	r3, #0
1000dc9c:	d00a      	beq.n	1000dcb4 <internal_at_ble_service_define+0x2fc>
1000dc9e:	3501      	adds	r5, #1
1000dca0:	b2ad      	uxth	r5, r5
1000dca2:	843d      	strh	r5, [r7, #32]
1000dca4:	7f39      	ldrb	r1, [r7, #28]
1000dca6:	8afb      	ldrh	r3, [r7, #22]
1000dca8:	1c28      	adds	r0, r5, #0
1000dcaa:	693a      	ldr	r2, [r7, #16]
1000dcac:	4e2d      	ldr	r6, [pc, #180]	; (1000dd64 <internal_at_ble_service_define+0x3ac>)
1000dcae:	47b0      	blx	r6
1000dcb0:	2800      	cmp	r0, #0
1000dcb2:	d15b      	bne.n	1000dd6c <internal_at_ble_service_define+0x3b4>
1000dcb4:	883b      	ldrh	r3, [r7, #0]
1000dcb6:	07db      	lsls	r3, r3, #31
1000dcb8:	d50d      	bpl.n	1000dcd6 <internal_at_ble_service_define+0x31e>
1000dcba:	2200      	movs	r2, #0
1000dcbc:	3501      	adds	r5, #1
1000dcbe:	b2ad      	uxth	r5, r5
1000dcc0:	a909      	add	r1, sp, #36	; 0x24
1000dcc2:	84bd      	strh	r5, [r7, #36]	; 0x24
1000dcc4:	7fbb      	ldrb	r3, [r7, #30]
1000dcc6:	1c28      	adds	r0, r5, #0
1000dcc8:	700a      	strb	r2, [r1, #0]
1000dcca:	704a      	strb	r2, [r1, #1]
1000dccc:	4e23      	ldr	r6, [pc, #140]	; (1000dd5c <internal_at_ble_service_define+0x3a4>)
1000dcce:	3202      	adds	r2, #2
1000dcd0:	47b0      	blx	r6
1000dcd2:	2800      	cmp	r0, #0
1000dcd4:	d14a      	bne.n	1000dd6c <internal_at_ble_service_define+0x3b4>
1000dcd6:	2330      	movs	r3, #48	; 0x30
1000dcd8:	883a      	ldrh	r2, [r7, #0]
1000dcda:	421a      	tst	r2, r3
1000dcdc:	d00d      	beq.n	1000dcfa <internal_at_ble_service_define+0x342>
1000dcde:	2200      	movs	r2, #0
1000dce0:	3501      	adds	r5, #1
1000dce2:	b2ad      	uxth	r5, r5
1000dce4:	a909      	add	r1, sp, #36	; 0x24
1000dce6:	847d      	strh	r5, [r7, #34]	; 0x22
1000dce8:	7f7b      	ldrb	r3, [r7, #29]
1000dcea:	1c28      	adds	r0, r5, #0
1000dcec:	700a      	strb	r2, [r1, #0]
1000dcee:	704a      	strb	r2, [r1, #1]
1000dcf0:	4e1a      	ldr	r6, [pc, #104]	; (1000dd5c <internal_at_ble_service_define+0x3a4>)
1000dcf2:	3202      	adds	r2, #2
1000dcf4:	47b0      	blx	r6
1000dcf6:	2800      	cmp	r0, #0
1000dcf8:	d138      	bne.n	1000dd6c <internal_at_ble_service_define+0x3b4>
1000dcfa:	69b9      	ldr	r1, [r7, #24]
1000dcfc:	2900      	cmp	r1, #0
1000dcfe:	d006      	beq.n	1000dd0e <internal_at_ble_service_define+0x356>
1000dd00:	3501      	adds	r5, #1
1000dd02:	b2ad      	uxth	r5, r5
1000dd04:	1c28      	adds	r0, r5, #0
1000dd06:	4b18      	ldr	r3, [pc, #96]	; (1000dd68 <internal_at_ble_service_define+0x3b0>)
1000dd08:	4798      	blx	r3
1000dd0a:	2800      	cmp	r0, #0
1000dd0c:	d12e      	bne.n	1000dd6c <internal_at_ble_service_define+0x3b4>
1000dd0e:	373c      	adds	r7, #60	; 0x3c
1000dd10:	9502      	str	r5, [sp, #8]
1000dd12:	e787      	b.n	1000dc24 <internal_at_ble_service_define+0x26c>
1000dd14:	100151d8 	.word	0x100151d8
1000dd18:	10015f7c 	.word	0x10015f7c
1000dd1c:	10010e81 	.word	0x10010e81
1000dd20:	1000d6ed 	.word	0x1000d6ed
1000dd24:	10010e6f 	.word	0x10010e6f
1000dd28:	10013643 	.word	0x10013643
1000dd2c:	1000fb79 	.word	0x1000fb79
1000dd30:	10013645 	.word	0x10013645
1000dd34:	1000d7b9 	.word	0x1000d7b9
1000dd38:	10013641 	.word	0x10013641
1000dd3c:	1000d761 	.word	0x1000d761
1000dd40:	1001363d 	.word	0x1001363d
1000dd44:	1001363f 	.word	0x1001363f
1000dd48:	00008002 	.word	0x00008002
1000dd4c:	10013639 	.word	0x10013639
1000dd50:	1001363b 	.word	0x1001363b
1000dd54:	1000fa6d 	.word	0x1000fa6d
1000dd58:	100151c4 	.word	0x100151c4
1000dd5c:	1000d881 	.word	0x1000d881
1000dd60:	1000fbe9 	.word	0x1000fbe9
1000dd64:	1000d939 	.word	0x1000d939
1000dd68:	1000d855 	.word	0x1000d855
1000dd6c:	1c04      	adds	r4, r0, #0
1000dd6e:	1c20      	adds	r0, r4, #0
1000dd70:	b00b      	add	sp, #44	; 0x2c
1000dd72:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000dd74 <initi_gatt_server_module>:
1000dd74:	2300      	movs	r3, #0
1000dd76:	4a07      	ldr	r2, [pc, #28]	; (1000dd94 <initi_gatt_server_module+0x20>)
1000dd78:	7013      	strb	r3, [r2, #0]
1000dd7a:	4a07      	ldr	r2, [pc, #28]	; (1000dd98 <initi_gatt_server_module+0x24>)
1000dd7c:	6013      	str	r3, [r2, #0]
1000dd7e:	4a07      	ldr	r2, [pc, #28]	; (1000dd9c <initi_gatt_server_module+0x28>)
1000dd80:	6013      	str	r3, [r2, #0]
1000dd82:	4a07      	ldr	r2, [pc, #28]	; (1000dda0 <initi_gatt_server_module+0x2c>)
1000dd84:	6013      	str	r3, [r2, #0]
1000dd86:	4a07      	ldr	r2, [pc, #28]	; (1000dda4 <initi_gatt_server_module+0x30>)
1000dd88:	6013      	str	r3, [r2, #0]
1000dd8a:	4a07      	ldr	r2, [pc, #28]	; (1000dda8 <initi_gatt_server_module+0x34>)
1000dd8c:	6013      	str	r3, [r2, #0]
1000dd8e:	4a07      	ldr	r2, [pc, #28]	; (1000ddac <initi_gatt_server_module+0x38>)
1000dd90:	6013      	str	r3, [r2, #0]
1000dd92:	4770      	bx	lr
1000dd94:	100151c4 	.word	0x100151c4
1000dd98:	100151d4 	.word	0x100151d4
1000dd9c:	100151d0 	.word	0x100151d0
1000dda0:	100151c0 	.word	0x100151c0
1000dda4:	100151cc 	.word	0x100151cc
1000dda8:	100151c8 	.word	0x100151c8
1000ddac:	100151d8 	.word	0x100151d8

1000ddb0 <db_init>:
1000ddb0:	4b0a      	ldr	r3, [pc, #40]	; (1000dddc <db_init+0x2c>)
1000ddb2:	4a0b      	ldr	r2, [pc, #44]	; (1000dde0 <db_init+0x30>)
1000ddb4:	6018      	str	r0, [r3, #0]
1000ddb6:	084b      	lsrs	r3, r1, #1
1000ddb8:	6013      	str	r3, [r2, #0]
1000ddba:	4a0a      	ldr	r2, [pc, #40]	; (1000dde4 <db_init+0x34>)
1000ddbc:	18c3      	adds	r3, r0, r3
1000ddbe:	6013      	str	r3, [r2, #0]
1000ddc0:	4a09      	ldr	r2, [pc, #36]	; (1000dde8 <db_init+0x38>)
1000ddc2:	1841      	adds	r1, r0, r1
1000ddc4:	6013      	str	r3, [r2, #0]
1000ddc6:	2303      	movs	r3, #3
1000ddc8:	2200      	movs	r2, #0
1000ddca:	3103      	adds	r1, #3
1000ddcc:	4399      	bics	r1, r3
1000ddce:	4b07      	ldr	r3, [pc, #28]	; (1000ddec <db_init+0x3c>)
1000ddd0:	3904      	subs	r1, #4
1000ddd2:	6019      	str	r1, [r3, #0]
1000ddd4:	4b06      	ldr	r3, [pc, #24]	; (1000ddf0 <db_init+0x40>)
1000ddd6:	601a      	str	r2, [r3, #0]
1000ddd8:	4770      	bx	lr
1000ddda:	46c0      	nop			; (mov r8, r8)
1000dddc:	100151d8 	.word	0x100151d8
1000dde0:	100151d4 	.word	0x100151d4
1000dde4:	100151c0 	.word	0x100151c0
1000dde8:	100151cc 	.word	0x100151cc
1000ddec:	100151c8 	.word	0x100151c8
1000ddf0:	100151d0 	.word	0x100151d0

1000ddf4 <at_ble_primary_service_define>:
1000ddf4:	b530      	push	{r4, r5, lr}
1000ddf6:	b085      	sub	sp, #20
1000ddf8:	ac08      	add	r4, sp, #32
1000ddfa:	cc20      	ldmia	r4!, {r5}
1000ddfc:	8824      	ldrh	r4, [r4, #0]
1000ddfe:	9500      	str	r5, [sp, #0]
1000de00:	9401      	str	r4, [sp, #4]
1000de02:	2401      	movs	r4, #1
1000de04:	9402      	str	r4, [sp, #8]
1000de06:	4c02      	ldr	r4, [pc, #8]	; (1000de10 <at_ble_primary_service_define+0x1c>)
1000de08:	47a0      	blx	r4
1000de0a:	b005      	add	sp, #20
1000de0c:	bd30      	pop	{r4, r5, pc}
1000de0e:	46c0      	nop			; (mov r8, r8)
1000de10:	1000d9b9 	.word	0x1000d9b9

1000de14 <at_ble_characteristic_value_set>:
1000de14:	b570      	push	{r4, r5, r6, lr}
1000de16:	4b0b      	ldr	r3, [pc, #44]	; (1000de44 <at_ble_characteristic_value_set+0x30>)
1000de18:	1c06      	adds	r6, r0, #0
1000de1a:	1c0c      	adds	r4, r1, #0
1000de1c:	1c15      	adds	r5, r2, #0
1000de1e:	4798      	blx	r3
1000de20:	2800      	cmp	r0, #0
1000de22:	d008      	beq.n	1000de36 <at_ble_characteristic_value_set+0x22>
1000de24:	6880      	ldr	r0, [r0, #8]
1000de26:	2800      	cmp	r0, #0
1000de28:	d005      	beq.n	1000de36 <at_ble_characteristic_value_set+0x22>
1000de2a:	1c21      	adds	r1, r4, #0
1000de2c:	1c2a      	adds	r2, r5, #0
1000de2e:	4b06      	ldr	r3, [pc, #24]	; (1000de48 <at_ble_characteristic_value_set+0x34>)
1000de30:	4798      	blx	r3
1000de32:	2000      	movs	r0, #0
1000de34:	e004      	b.n	1000de40 <at_ble_characteristic_value_set+0x2c>
1000de36:	1c30      	adds	r0, r6, #0
1000de38:	1c29      	adds	r1, r5, #0
1000de3a:	1c22      	adds	r2, r4, #0
1000de3c:	4b03      	ldr	r3, [pc, #12]	; (1000de4c <at_ble_characteristic_value_set+0x38>)
1000de3e:	4798      	blx	r3
1000de40:	bd70      	pop	{r4, r5, r6, pc}
1000de42:	46c0      	nop			; (mov r8, r8)
1000de44:	1000d721 	.word	0x1000d721
1000de48:	10010e6f 	.word	0x10010e6f
1000de4c:	1000fbe9 	.word	0x1000fbe9

1000de50 <at_ble_characteristic_value_get>:
1000de50:	b570      	push	{r4, r5, r6, lr}
1000de52:	4b0c      	ldr	r3, [pc, #48]	; (1000de84 <at_ble_characteristic_value_get+0x34>)
1000de54:	1c06      	adds	r6, r0, #0
1000de56:	1c0c      	adds	r4, r1, #0
1000de58:	1c15      	adds	r5, r2, #0
1000de5a:	4798      	blx	r3
1000de5c:	2800      	cmp	r0, #0
1000de5e:	d00b      	beq.n	1000de78 <at_ble_characteristic_value_get+0x28>
1000de60:	6883      	ldr	r3, [r0, #8]
1000de62:	2b00      	cmp	r3, #0
1000de64:	d008      	beq.n	1000de78 <at_ble_characteristic_value_get+0x28>
1000de66:	8883      	ldrh	r3, [r0, #4]
1000de68:	802b      	strh	r3, [r5, #0]
1000de6a:	8882      	ldrh	r2, [r0, #4]
1000de6c:	6881      	ldr	r1, [r0, #8]
1000de6e:	4b06      	ldr	r3, [pc, #24]	; (1000de88 <at_ble_characteristic_value_get+0x38>)
1000de70:	1c20      	adds	r0, r4, #0
1000de72:	4798      	blx	r3
1000de74:	2000      	movs	r0, #0
1000de76:	e004      	b.n	1000de82 <at_ble_characteristic_value_get+0x32>
1000de78:	1c30      	adds	r0, r6, #0
1000de7a:	1c29      	adds	r1, r5, #0
1000de7c:	1c22      	adds	r2, r4, #0
1000de7e:	4b03      	ldr	r3, [pc, #12]	; (1000de8c <at_ble_characteristic_value_get+0x3c>)
1000de80:	4798      	blx	r3
1000de82:	bd70      	pop	{r4, r5, r6, pc}
1000de84:	1000d721 	.word	0x1000d721
1000de88:	10010e6f 	.word	0x10010e6f
1000de8c:	1000fc75 	.word	0x1000fc75

1000de90 <at_ble_write_authorize_reply>:
1000de90:	b5f0      	push	{r4, r5, r6, r7, lr}
1000de92:	b085      	sub	sp, #20
1000de94:	1c04      	adds	r4, r0, #0
1000de96:	9101      	str	r1, [sp, #4]
1000de98:	2900      	cmp	r1, #0
1000de9a:	d128      	bne.n	1000deee <at_ble_write_authorize_reply+0x5e>
1000de9c:	8843      	ldrh	r3, [r0, #2]
1000de9e:	1c27      	adds	r7, r4, #0
1000dea0:	9300      	str	r3, [sp, #0]
1000dea2:	1c18      	adds	r0, r3, #0
1000dea4:	4b16      	ldr	r3, [pc, #88]	; (1000df00 <at_ble_write_authorize_reply+0x70>)
1000dea6:	4798      	blx	r3
1000dea8:	3708      	adds	r7, #8
1000deaa:	2800      	cmp	r0, #0
1000deac:	d009      	beq.n	1000dec2 <at_ble_write_authorize_reply+0x32>
1000deae:	6880      	ldr	r0, [r0, #8]
1000deb0:	2800      	cmp	r0, #0
1000deb2:	d006      	beq.n	1000dec2 <at_ble_write_authorize_reply+0x32>
1000deb4:	88a3      	ldrh	r3, [r4, #4]
1000deb6:	88e2      	ldrh	r2, [r4, #6]
1000deb8:	18c0      	adds	r0, r0, r3
1000deba:	1c39      	adds	r1, r7, #0
1000debc:	4b11      	ldr	r3, [pc, #68]	; (1000df04 <at_ble_write_authorize_reply+0x74>)
1000debe:	4798      	blx	r3
1000dec0:	e015      	b.n	1000deee <at_ble_write_authorize_reply+0x5e>
1000dec2:	ab02      	add	r3, sp, #8
1000dec4:	1d9e      	adds	r6, r3, #6
1000dec6:	2300      	movs	r3, #0
1000dec8:	4d0f      	ldr	r5, [pc, #60]	; (1000df08 <at_ble_write_authorize_reply+0x78>)
1000deca:	8033      	strh	r3, [r6, #0]
1000decc:	6829      	ldr	r1, [r5, #0]
1000dece:	1c32      	adds	r2, r6, #0
1000ded0:	4b0e      	ldr	r3, [pc, #56]	; (1000df0c <at_ble_write_authorize_reply+0x7c>)
1000ded2:	9800      	ldr	r0, [sp, #0]
1000ded4:	4798      	blx	r3
1000ded6:	682b      	ldr	r3, [r5, #0]
1000ded8:	88a0      	ldrh	r0, [r4, #4]
1000deda:	88e2      	ldrh	r2, [r4, #6]
1000dedc:	1818      	adds	r0, r3, r0
1000dede:	1c39      	adds	r1, r7, #0
1000dee0:	4b08      	ldr	r3, [pc, #32]	; (1000df04 <at_ble_write_authorize_reply+0x74>)
1000dee2:	4798      	blx	r3
1000dee4:	8860      	ldrh	r0, [r4, #2]
1000dee6:	8832      	ldrh	r2, [r6, #0]
1000dee8:	6829      	ldr	r1, [r5, #0]
1000deea:	4b09      	ldr	r3, [pc, #36]	; (1000df10 <at_ble_write_authorize_reply+0x80>)
1000deec:	4798      	blx	r3
1000deee:	8860      	ldrh	r0, [r4, #2]
1000def0:	8821      	ldrh	r1, [r4, #0]
1000def2:	9a01      	ldr	r2, [sp, #4]
1000def4:	4b07      	ldr	r3, [pc, #28]	; (1000df14 <at_ble_write_authorize_reply+0x84>)
1000def6:	4798      	blx	r3
1000def8:	2000      	movs	r0, #0
1000defa:	b005      	add	sp, #20
1000defc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000defe:	46c0      	nop			; (mov r8, r8)
1000df00:	1000d721 	.word	0x1000d721
1000df04:	10010e6f 	.word	0x10010e6f
1000df08:	10013748 	.word	0x10013748
1000df0c:	1000de51 	.word	0x1000de51
1000df10:	1000de15 	.word	0x1000de15
1000df14:	1000f6ed 	.word	0x1000f6ed

1000df18 <gatts_handle_read_req>:
1000df18:	b538      	push	{r3, r4, r5, lr}
1000df1a:	1c0c      	adds	r4, r1, #0
1000df1c:	4b07      	ldr	r3, [pc, #28]	; (1000df3c <gatts_handle_read_req+0x24>)
1000df1e:	4798      	blx	r3
1000df20:	8865      	ldrh	r5, [r4, #2]
1000df22:	4b07      	ldr	r3, [pc, #28]	; (1000df40 <gatts_handle_read_req+0x28>)
1000df24:	1c28      	adds	r0, r5, #0
1000df26:	4798      	blx	r3
1000df28:	7883      	ldrb	r3, [r0, #2]
1000df2a:	2026      	movs	r0, #38	; 0x26
1000df2c:	07db      	lsls	r3, r3, #31
1000df2e:	d404      	bmi.n	1000df3a <gatts_handle_read_req+0x22>
1000df30:	8820      	ldrh	r0, [r4, #0]
1000df32:	1c29      	adds	r1, r5, #0
1000df34:	4b03      	ldr	r3, [pc, #12]	; (1000df44 <gatts_handle_read_req+0x2c>)
1000df36:	4798      	blx	r3
1000df38:	203b      	movs	r0, #59	; 0x3b
1000df3a:	bd38      	pop	{r3, r4, r5, pc}
1000df3c:	1000f631 	.word	0x1000f631
1000df40:	1000d721 	.word	0x1000d721
1000df44:	1000d989 	.word	0x1000d989

1000df48 <gatts_handle_att_info_req>:
1000df48:	b538      	push	{r3, r4, r5, lr}
1000df4a:	1c0d      	adds	r5, r1, #0
1000df4c:	4b0a      	ldr	r3, [pc, #40]	; (1000df78 <gatts_handle_att_info_req+0x30>)
1000df4e:	1c14      	adds	r4, r2, #0
1000df50:	4798      	blx	r3
1000df52:	882d      	ldrh	r5, [r5, #0]
1000df54:	4b09      	ldr	r3, [pc, #36]	; (1000df7c <gatts_handle_att_info_req+0x34>)
1000df56:	1c28      	adds	r0, r5, #0
1000df58:	4798      	blx	r3
1000df5a:	0a22      	lsrs	r2, r4, #8
1000df5c:	1c03      	adds	r3, r0, #0
1000df5e:	4c08      	ldr	r4, [pc, #32]	; (1000df80 <gatts_handle_att_info_req+0x38>)
1000df60:	b291      	uxth	r1, r2
1000df62:	2800      	cmp	r0, #0
1000df64:	d003      	beq.n	1000df6e <gatts_handle_att_info_req+0x26>
1000df66:	8882      	ldrh	r2, [r0, #4]
1000df68:	2300      	movs	r3, #0
1000df6a:	1c28      	adds	r0, r5, #0
1000df6c:	e001      	b.n	1000df72 <gatts_handle_att_info_req+0x2a>
1000df6e:	1c28      	adds	r0, r5, #0
1000df70:	2201      	movs	r2, #1
1000df72:	47a0      	blx	r4
1000df74:	203b      	movs	r0, #59	; 0x3b
1000df76:	bd38      	pop	{r3, r4, r5, pc}
1000df78:	1000f675 	.word	0x1000f675
1000df7c:	1000d721 	.word	0x1000d721
1000df80:	1000f731 	.word	0x1000f731

1000df84 <gatts_handle_write_req>:
1000df84:	b510      	push	{r4, lr}
1000df86:	1c14      	adds	r4, r2, #0
1000df88:	4b07      	ldr	r3, [pc, #28]	; (1000dfa8 <gatts_handle_write_req+0x24>)
1000df8a:	4798      	blx	r3
1000df8c:	4b07      	ldr	r3, [pc, #28]	; (1000dfac <gatts_handle_write_req+0x28>)
1000df8e:	8860      	ldrh	r0, [r4, #2]
1000df90:	4798      	blx	r3
1000df92:	2302      	movs	r3, #2
1000df94:	7881      	ldrb	r1, [r0, #2]
1000df96:	2022      	movs	r0, #34	; 0x22
1000df98:	4019      	ands	r1, r3
1000df9a:	d103      	bne.n	1000dfa4 <gatts_handle_write_req+0x20>
1000df9c:	1c20      	adds	r0, r4, #0
1000df9e:	4b04      	ldr	r3, [pc, #16]	; (1000dfb0 <gatts_handle_write_req+0x2c>)
1000dfa0:	4798      	blx	r3
1000dfa2:	201f      	movs	r0, #31
1000dfa4:	bd10      	pop	{r4, pc}
1000dfa6:	46c0      	nop			; (mov r8, r8)
1000dfa8:	1000f63d 	.word	0x1000f63d
1000dfac:	1000d721 	.word	0x1000d721
1000dfb0:	1000de91 	.word	0x1000de91

1000dfb4 <at_ble_notification_send>:
1000dfb4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dfb6:	4d17      	ldr	r5, [pc, #92]	; (1000e014 <at_ble_notification_send+0x60>)
1000dfb8:	4c17      	ldr	r4, [pc, #92]	; (1000e018 <at_ble_notification_send+0x64>)
1000dfba:	682a      	ldr	r2, [r5, #0]
1000dfbc:	44a5      	add	sp, r4
1000dfbe:	23d2      	movs	r3, #210	; 0xd2
1000dfc0:	2a04      	cmp	r2, #4
1000dfc2:	d822      	bhi.n	1000e00a <at_ble_notification_send+0x56>
1000dfc4:	1c06      	adds	r6, r0, #0
1000dfc6:	4b15      	ldr	r3, [pc, #84]	; (1000e01c <at_ble_notification_send+0x68>)
1000dfc8:	1c08      	adds	r0, r1, #0
1000dfca:	1c0c      	adds	r4, r1, #0
1000dfcc:	4798      	blx	r3
1000dfce:	2800      	cmp	r0, #0
1000dfd0:	d008      	beq.n	1000dfe4 <at_ble_notification_send+0x30>
1000dfd2:	6883      	ldr	r3, [r0, #8]
1000dfd4:	2b00      	cmp	r3, #0
1000dfd6:	d005      	beq.n	1000dfe4 <at_ble_notification_send+0x30>
1000dfd8:	8882      	ldrh	r2, [r0, #4]
1000dfda:	1c21      	adds	r1, r4, #0
1000dfdc:	9200      	str	r2, [sp, #0]
1000dfde:	2012      	movs	r0, #18
1000dfe0:	1c32      	adds	r2, r6, #0
1000dfe2:	e00c      	b.n	1000dffe <at_ble_notification_send+0x4a>
1000dfe4:	270e      	movs	r7, #14
1000dfe6:	446f      	add	r7, sp
1000dfe8:	1c39      	adds	r1, r7, #0
1000dfea:	aa04      	add	r2, sp, #16
1000dfec:	4b0c      	ldr	r3, [pc, #48]	; (1000e020 <at_ble_notification_send+0x6c>)
1000dfee:	1c20      	adds	r0, r4, #0
1000dff0:	4798      	blx	r3
1000dff2:	2012      	movs	r0, #18
1000dff4:	1c21      	adds	r1, r4, #0
1000dff6:	1c32      	adds	r2, r6, #0
1000dff8:	883b      	ldrh	r3, [r7, #0]
1000dffa:	9300      	str	r3, [sp, #0]
1000dffc:	ab04      	add	r3, sp, #16
1000dffe:	4c09      	ldr	r4, [pc, #36]	; (1000e024 <at_ble_notification_send+0x70>)
1000e000:	47a0      	blx	r4
1000e002:	682b      	ldr	r3, [r5, #0]
1000e004:	3301      	adds	r3, #1
1000e006:	602b      	str	r3, [r5, #0]
1000e008:	2300      	movs	r3, #0
1000e00a:	1c18      	adds	r0, r3, #0
1000e00c:	2385      	movs	r3, #133	; 0x85
1000e00e:	009b      	lsls	r3, r3, #2
1000e010:	449d      	add	sp, r3
1000e012:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e014:	10015264 	.word	0x10015264
1000e018:	fffffdec 	.word	0xfffffdec
1000e01c:	1000d721 	.word	0x1000d721
1000e020:	1000fc75 	.word	0x1000fc75
1000e024:	1000f779 	.word	0x1000f779

1000e028 <init_l2cc_task_module>:
1000e028:	220a      	movs	r2, #10
1000e02a:	4b01      	ldr	r3, [pc, #4]	; (1000e030 <init_l2cc_task_module+0x8>)
1000e02c:	701a      	strb	r2, [r3, #0]
1000e02e:	4770      	bx	lr
1000e030:	10013744 	.word	0x10013744

1000e034 <l2cc_data_send_rsp_handler>:
1000e034:	b510      	push	{r4, lr}
1000e036:	7802      	ldrb	r2, [r0, #0]
1000e038:	700a      	strb	r2, [r1, #0]
1000e03a:	7883      	ldrb	r3, [r0, #2]
1000e03c:	7844      	ldrb	r4, [r0, #1]
1000e03e:	021b      	lsls	r3, r3, #8
1000e040:	4323      	orrs	r3, r4
1000e042:	804b      	strh	r3, [r1, #2]
1000e044:	7903      	ldrb	r3, [r0, #4]
1000e046:	78c0      	ldrb	r0, [r0, #3]
1000e048:	021b      	lsls	r3, r3, #8
1000e04a:	4303      	orrs	r3, r0
1000e04c:	808b      	strh	r3, [r1, #4]
1000e04e:	2a00      	cmp	r2, #0
1000e050:	d103      	bne.n	1000e05a <l2cc_data_send_rsp_handler+0x26>
1000e052:	4a02      	ldr	r2, [pc, #8]	; (1000e05c <l2cc_data_send_rsp_handler+0x28>)
1000e054:	7813      	ldrb	r3, [r2, #0]
1000e056:	3301      	adds	r3, #1
1000e058:	7013      	strb	r3, [r2, #0]
1000e05a:	bd10      	pop	{r4, pc}
1000e05c:	10013744 	.word	0x10013744

1000e060 <l2cc_data_received_handler>:
1000e060:	b508      	push	{r3, lr}
1000e062:	1c03      	adds	r3, r0, #0
1000e064:	7842      	ldrb	r2, [r0, #1]
1000e066:	7800      	ldrb	r0, [r0, #0]
1000e068:	0212      	lsls	r2, r2, #8
1000e06a:	4302      	orrs	r2, r0
1000e06c:	800a      	strh	r2, [r1, #0]
1000e06e:	78da      	ldrb	r2, [r3, #3]
1000e070:	7898      	ldrb	r0, [r3, #2]
1000e072:	0212      	lsls	r2, r2, #8
1000e074:	4302      	orrs	r2, r0
1000e076:	804a      	strh	r2, [r1, #2]
1000e078:	795a      	ldrb	r2, [r3, #5]
1000e07a:	7918      	ldrb	r0, [r3, #4]
1000e07c:	0212      	lsls	r2, r2, #8
1000e07e:	4302      	orrs	r2, r0
1000e080:	808a      	strh	r2, [r1, #4]
1000e082:	1d88      	adds	r0, r1, #6
1000e084:	1d99      	adds	r1, r3, #6
1000e086:	4b01      	ldr	r3, [pc, #4]	; (1000e08c <l2cc_data_received_handler+0x2c>)
1000e088:	4798      	blx	r3
1000e08a:	bd08      	pop	{r3, pc}
1000e08c:	10010e6f 	.word	0x10010e6f

1000e090 <at_ble_authenticate>:
1000e090:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e092:	1c0c      	adds	r4, r1, #0
1000e094:	211f      	movs	r1, #31
1000e096:	b08b      	sub	sp, #44	; 0x2c
1000e098:	9307      	str	r3, [sp, #28]
1000e09a:	ab02      	add	r3, sp, #8
1000e09c:	18c9      	adds	r1, r1, r3
1000e09e:	230f      	movs	r3, #15
1000e0a0:	700b      	strb	r3, [r1, #0]
1000e0a2:	4b40      	ldr	r3, [pc, #256]	; (1000e1a4 <at_ble_authenticate+0x114>)
1000e0a4:	1c05      	adds	r5, r0, #0
1000e0a6:	1c16      	adds	r6, r2, #0
1000e0a8:	4798      	blx	r3
1000e0aa:	1c07      	adds	r7, r0, #0
1000e0ac:	2001      	movs	r0, #1
1000e0ae:	2f07      	cmp	r7, #7
1000e0b0:	d875      	bhi.n	1000e19e <at_ble_authenticate+0x10e>
1000e0b2:	2c00      	cmp	r4, #0
1000e0b4:	d113      	bne.n	1000e0de <at_ble_authenticate+0x4e>
1000e0b6:	2312      	movs	r3, #18
1000e0b8:	435f      	muls	r7, r3
1000e0ba:	4b3b      	ldr	r3, [pc, #236]	; (1000e1a8 <at_ble_authenticate+0x118>)
1000e0bc:	5cfb      	ldrb	r3, [r7, r3]
1000e0be:	4283      	cmp	r3, r0
1000e0c0:	d001      	beq.n	1000e0c6 <at_ble_authenticate+0x36>
1000e0c2:	20cf      	movs	r0, #207	; 0xcf
1000e0c4:	e06b      	b.n	1000e19e <at_ble_authenticate+0x10e>
1000e0c6:	9504      	str	r5, [sp, #16]
1000e0c8:	9400      	str	r4, [sp, #0]
1000e0ca:	9401      	str	r4, [sp, #4]
1000e0cc:	9402      	str	r4, [sp, #8]
1000e0ce:	9403      	str	r4, [sp, #12]
1000e0d0:	1c20      	adds	r0, r4, #0
1000e0d2:	1c21      	adds	r1, r4, #0
1000e0d4:	1c22      	adds	r2, r4, #0
1000e0d6:	1c23      	adds	r3, r4, #0
1000e0d8:	4d34      	ldr	r5, [pc, #208]	; (1000e1ac <at_ble_authenticate+0x11c>)
1000e0da:	47a8      	blx	r5
1000e0dc:	e05e      	b.n	1000e19c <at_ble_authenticate+0x10c>
1000e0de:	7922      	ldrb	r2, [r4, #4]
1000e0e0:	2a06      	cmp	r2, #6
1000e0e2:	d9ee      	bls.n	1000e0c2 <at_ble_authenticate+0x32>
1000e0e4:	7963      	ldrb	r3, [r4, #5]
1000e0e6:	2b10      	cmp	r3, #16
1000e0e8:	d8eb      	bhi.n	1000e0c2 <at_ble_authenticate+0x32>
1000e0ea:	429a      	cmp	r2, r3
1000e0ec:	d8e9      	bhi.n	1000e0c2 <at_ble_authenticate+0x32>
1000e0ee:	7a23      	ldrb	r3, [r4, #8]
1000e0f0:	2b04      	cmp	r3, #4
1000e0f2:	d8e6      	bhi.n	1000e0c2 <at_ble_authenticate+0x32>
1000e0f4:	79a3      	ldrb	r3, [r4, #6]
1000e0f6:	2b07      	cmp	r3, #7
1000e0f8:	d8e3      	bhi.n	1000e0c2 <at_ble_authenticate+0x32>
1000e0fa:	79e3      	ldrb	r3, [r4, #7]
1000e0fc:	2b07      	cmp	r3, #7
1000e0fe:	d8e0      	bhi.n	1000e0c2 <at_ble_authenticate+0x32>
1000e100:	78a3      	ldrb	r3, [r4, #2]
1000e102:	2b00      	cmp	r3, #0
1000e104:	d006      	beq.n	1000e114 <at_ble_authenticate+0x84>
1000e106:	2e00      	cmp	r6, #0
1000e108:	d0db      	beq.n	1000e0c2 <at_ble_authenticate+0x32>
1000e10a:	4829      	ldr	r0, [pc, #164]	; (1000e1b0 <at_ble_authenticate+0x120>)
1000e10c:	1c31      	adds	r1, r6, #0
1000e10e:	221c      	movs	r2, #28
1000e110:	4b28      	ldr	r3, [pc, #160]	; (1000e1b4 <at_ble_authenticate+0x124>)
1000e112:	4798      	blx	r3
1000e114:	9b07      	ldr	r3, [sp, #28]
1000e116:	2b00      	cmp	r3, #0
1000e118:	d005      	beq.n	1000e126 <at_ble_authenticate+0x96>
1000e11a:	4827      	ldr	r0, [pc, #156]	; (1000e1b8 <at_ble_authenticate+0x128>)
1000e11c:	1c19      	adds	r1, r3, #0
1000e11e:	309a      	adds	r0, #154	; 0x9a
1000e120:	2210      	movs	r2, #16
1000e122:	4b24      	ldr	r3, [pc, #144]	; (1000e1b4 <at_ble_authenticate+0x124>)
1000e124:	4798      	blx	r3
1000e126:	7863      	ldrb	r3, [r4, #1]
1000e128:	78a2      	ldrb	r2, [r4, #2]
1000e12a:	009b      	lsls	r3, r3, #2
1000e12c:	4313      	orrs	r3, r2
1000e12e:	2212      	movs	r2, #18
1000e130:	4357      	muls	r7, r2
1000e132:	4a1d      	ldr	r2, [pc, #116]	; (1000e1a8 <at_ble_authenticate+0x118>)
1000e134:	b2db      	uxtb	r3, r3
1000e136:	5cba      	ldrb	r2, [r7, r2]
1000e138:	2a00      	cmp	r2, #0
1000e13a:	d116      	bne.n	1000e16a <at_ble_authenticate+0xda>
1000e13c:	79a0      	ldrb	r0, [r4, #6]
1000e13e:	0742      	lsls	r2, r0, #29
1000e140:	d502      	bpl.n	1000e148 <at_ble_authenticate+0xb8>
1000e142:	9a07      	ldr	r2, [sp, #28]
1000e144:	2a00      	cmp	r2, #0
1000e146:	d0bc      	beq.n	1000e0c2 <at_ble_authenticate+0x32>
1000e148:	07c2      	lsls	r2, r0, #31
1000e14a:	d501      	bpl.n	1000e150 <at_ble_authenticate+0xc0>
1000e14c:	2e00      	cmp	r6, #0
1000e14e:	d0b8      	beq.n	1000e0c2 <at_ble_authenticate+0x32>
1000e150:	7966      	ldrb	r6, [r4, #5]
1000e152:	7821      	ldrb	r1, [r4, #0]
1000e154:	78e2      	ldrb	r2, [r4, #3]
1000e156:	9600      	str	r6, [sp, #0]
1000e158:	9001      	str	r0, [sp, #4]
1000e15a:	79e0      	ldrb	r0, [r4, #7]
1000e15c:	9002      	str	r0, [sp, #8]
1000e15e:	7a20      	ldrb	r0, [r4, #8]
1000e160:	4c16      	ldr	r4, [pc, #88]	; (1000e1bc <at_ble_authenticate+0x12c>)
1000e162:	9003      	str	r0, [sp, #12]
1000e164:	1c28      	adds	r0, r5, #0
1000e166:	47a0      	blx	r4
1000e168:	e018      	b.n	1000e19c <at_ble_authenticate+0x10c>
1000e16a:	2a01      	cmp	r2, #1
1000e16c:	d1a9      	bne.n	1000e0c2 <at_ble_authenticate+0x32>
1000e16e:	79e0      	ldrb	r0, [r4, #7]
1000e170:	0742      	lsls	r2, r0, #29
1000e172:	d502      	bpl.n	1000e17a <at_ble_authenticate+0xea>
1000e174:	9a07      	ldr	r2, [sp, #28]
1000e176:	2a00      	cmp	r2, #0
1000e178:	d0a3      	beq.n	1000e0c2 <at_ble_authenticate+0x32>
1000e17a:	07c2      	lsls	r2, r0, #31
1000e17c:	d501      	bpl.n	1000e182 <at_ble_authenticate+0xf2>
1000e17e:	2e00      	cmp	r6, #0
1000e180:	d09f      	beq.n	1000e0c2 <at_ble_authenticate+0x32>
1000e182:	7966      	ldrb	r6, [r4, #5]
1000e184:	7821      	ldrb	r1, [r4, #0]
1000e186:	78e2      	ldrb	r2, [r4, #3]
1000e188:	9600      	str	r6, [sp, #0]
1000e18a:	79a6      	ldrb	r6, [r4, #6]
1000e18c:	9002      	str	r0, [sp, #8]
1000e18e:	9601      	str	r6, [sp, #4]
1000e190:	7a20      	ldrb	r0, [r4, #8]
1000e192:	9504      	str	r5, [sp, #16]
1000e194:	9003      	str	r0, [sp, #12]
1000e196:	4c05      	ldr	r4, [pc, #20]	; (1000e1ac <at_ble_authenticate+0x11c>)
1000e198:	2001      	movs	r0, #1
1000e19a:	47a0      	blx	r4
1000e19c:	2000      	movs	r0, #0
1000e19e:	b00b      	add	sp, #44	; 0x2c
1000e1a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e1a2:	46c0      	nop			; (mov r8, r8)
1000e1a4:	1000e591 	.word	0x1000e591
1000e1a8:	10015f7e 	.word	0x10015f7e
1000e1ac:	1000eb01 	.word	0x1000eb01
1000e1b0:	1001608c 	.word	0x1001608c
1000e1b4:	10010e6f 	.word	0x10010e6f
1000e1b8:	1001600e 	.word	0x1001600e
1000e1bc:	1000e8e1 	.word	0x1000e8e1

1000e1c0 <at_ble_pair_key_reply>:
1000e1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e1c2:	b085      	sub	sp, #20
1000e1c4:	1c05      	adds	r5, r0, #0
1000e1c6:	1c0c      	adds	r4, r1, #0
1000e1c8:	1c16      	adds	r6, r2, #0
1000e1ca:	2100      	movs	r1, #0
1000e1cc:	4668      	mov	r0, sp
1000e1ce:	2210      	movs	r2, #16
1000e1d0:	4b18      	ldr	r3, [pc, #96]	; (1000e234 <at_ble_pair_key_reply+0x74>)
1000e1d2:	4798      	blx	r3
1000e1d4:	2101      	movs	r1, #1
1000e1d6:	2e00      	cmp	r6, #0
1000e1d8:	d101      	bne.n	1000e1de <at_ble_pair_key_reply+0x1e>
1000e1da:	1c31      	adds	r1, r6, #0
1000e1dc:	466e      	mov	r6, sp
1000e1de:	2c00      	cmp	r4, #0
1000e1e0:	d116      	bne.n	1000e210 <at_ble_pair_key_reply+0x50>
1000e1e2:	2701      	movs	r7, #1
1000e1e4:	1c23      	adds	r3, r4, #0
1000e1e6:	1d70      	adds	r0, r6, #5
1000e1e8:	3e01      	subs	r6, #1
1000e1ea:	7802      	ldrb	r2, [r0, #0]
1000e1ec:	3801      	subs	r0, #1
1000e1ee:	3a30      	subs	r2, #48	; 0x30
1000e1f0:	437a      	muls	r2, r7
1000e1f2:	189b      	adds	r3, r3, r2
1000e1f4:	220a      	movs	r2, #10
1000e1f6:	4357      	muls	r7, r2
1000e1f8:	42b0      	cmp	r0, r6
1000e1fa:	d1f6      	bne.n	1000e1ea <at_ble_pair_key_reply+0x2a>
1000e1fc:	466a      	mov	r2, sp
1000e1fe:	4668      	mov	r0, sp
1000e200:	7013      	strb	r3, [r2, #0]
1000e202:	0a1a      	lsrs	r2, r3, #8
1000e204:	7042      	strb	r2, [r0, #1]
1000e206:	0c1a      	lsrs	r2, r3, #16
1000e208:	0e1b      	lsrs	r3, r3, #24
1000e20a:	7082      	strb	r2, [r0, #2]
1000e20c:	70c3      	strb	r3, [r0, #3]
1000e20e:	e009      	b.n	1000e224 <at_ble_pair_key_reply+0x64>
1000e210:	20cf      	movs	r0, #207	; 0xcf
1000e212:	2c01      	cmp	r4, #1
1000e214:	d10c      	bne.n	1000e230 <at_ble_pair_key_reply+0x70>
1000e216:	2300      	movs	r3, #0
1000e218:	4668      	mov	r0, sp
1000e21a:	5cf2      	ldrb	r2, [r6, r3]
1000e21c:	54c2      	strb	r2, [r0, r3]
1000e21e:	3301      	adds	r3, #1
1000e220:	2b10      	cmp	r3, #16
1000e222:	d1f9      	bne.n	1000e218 <at_ble_pair_key_reply+0x58>
1000e224:	2004      	movs	r0, #4
1000e226:	466a      	mov	r2, sp
1000e228:	1c2b      	adds	r3, r5, #0
1000e22a:	4c03      	ldr	r4, [pc, #12]	; (1000e238 <at_ble_pair_key_reply+0x78>)
1000e22c:	47a0      	blx	r4
1000e22e:	2000      	movs	r0, #0
1000e230:	b005      	add	sp, #20
1000e232:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e234:	10010e81 	.word	0x10010e81
1000e238:	1000eb7d 	.word	0x1000eb7d

1000e23c <at_ble_send_slave_sec_request>:
1000e23c:	b570      	push	{r4, r5, r6, lr}
1000e23e:	4b0c      	ldr	r3, [pc, #48]	; (1000e270 <at_ble_send_slave_sec_request+0x34>)
1000e240:	1c0e      	adds	r6, r1, #0
1000e242:	2100      	movs	r1, #0
1000e244:	1c05      	adds	r5, r0, #0
1000e246:	1c14      	adds	r4, r2, #0
1000e248:	4798      	blx	r3
1000e24a:	2301      	movs	r3, #1
1000e24c:	2807      	cmp	r0, #7
1000e24e:	d80d      	bhi.n	1000e26c <at_ble_send_slave_sec_request+0x30>
1000e250:	3311      	adds	r3, #17
1000e252:	4358      	muls	r0, r3
1000e254:	4b07      	ldr	r3, [pc, #28]	; (1000e274 <at_ble_send_slave_sec_request+0x38>)
1000e256:	5cc2      	ldrb	r2, [r0, r3]
1000e258:	23e0      	movs	r3, #224	; 0xe0
1000e25a:	2a01      	cmp	r2, #1
1000e25c:	d106      	bne.n	1000e26c <at_ble_send_slave_sec_request+0x30>
1000e25e:	00b1      	lsls	r1, r6, #2
1000e260:	430c      	orrs	r4, r1
1000e262:	4b05      	ldr	r3, [pc, #20]	; (1000e278 <at_ble_send_slave_sec_request+0x3c>)
1000e264:	b2e1      	uxtb	r1, r4
1000e266:	1c28      	adds	r0, r5, #0
1000e268:	4798      	blx	r3
1000e26a:	2300      	movs	r3, #0
1000e26c:	1c18      	adds	r0, r3, #0
1000e26e:	bd70      	pop	{r4, r5, r6, pc}
1000e270:	1000e591 	.word	0x1000e591
1000e274:	10015f7e 	.word	0x10015f7e
1000e278:	1000ebcd 	.word	0x1000ebcd

1000e27c <at_ble_encryption_start>:
1000e27c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e27e:	23cf      	movs	r3, #207	; 0xcf
1000e280:	2900      	cmp	r1, #0
1000e282:	d02b      	beq.n	1000e2dc <at_ble_encryption_start+0x60>
1000e284:	2a05      	cmp	r2, #5
1000e286:	d829      	bhi.n	1000e2dc <at_ble_encryption_start+0x60>
1000e288:	2701      	movs	r7, #1
1000e28a:	1c3d      	adds	r5, r7, #0
1000e28c:	2433      	movs	r4, #51	; 0x33
1000e28e:	4095      	lsls	r5, r2
1000e290:	4225      	tst	r5, r4
1000e292:	d023      	beq.n	1000e2dc <at_ble_encryption_start+0x60>
1000e294:	7e8c      	ldrb	r4, [r1, #26]
1000e296:	3c07      	subs	r4, #7
1000e298:	2c09      	cmp	r4, #9
1000e29a:	d81f      	bhi.n	1000e2dc <at_ble_encryption_start+0x60>
1000e29c:	4b10      	ldr	r3, [pc, #64]	; (1000e2e0 <at_ble_encryption_start+0x64>)
1000e29e:	1c0c      	adds	r4, r1, #0
1000e2a0:	2100      	movs	r1, #0
1000e2a2:	1c15      	adds	r5, r2, #0
1000e2a4:	1c06      	adds	r6, r0, #0
1000e2a6:	4798      	blx	r3
1000e2a8:	1c3b      	adds	r3, r7, #0
1000e2aa:	2807      	cmp	r0, #7
1000e2ac:	d816      	bhi.n	1000e2dc <at_ble_encryption_start+0x60>
1000e2ae:	2312      	movs	r3, #18
1000e2b0:	4358      	muls	r0, r3
1000e2b2:	4b0c      	ldr	r3, [pc, #48]	; (1000e2e4 <at_ble_encryption_start+0x68>)
1000e2b4:	5cc7      	ldrb	r7, [r0, r3]
1000e2b6:	23e0      	movs	r3, #224	; 0xe0
1000e2b8:	2f00      	cmp	r7, #0
1000e2ba:	d10f      	bne.n	1000e2dc <at_ble_encryption_start+0x60>
1000e2bc:	1c21      	adds	r1, r4, #0
1000e2be:	221c      	movs	r2, #28
1000e2c0:	4b09      	ldr	r3, [pc, #36]	; (1000e2e8 <at_ble_encryption_start+0x6c>)
1000e2c2:	480a      	ldr	r0, [pc, #40]	; (1000e2ec <at_ble_encryption_start+0x70>)
1000e2c4:	4798      	blx	r3
1000e2c6:	1c23      	adds	r3, r4, #0
1000e2c8:	7ea1      	ldrb	r1, [r4, #26]
1000e2ca:	8a22      	ldrh	r2, [r4, #16]
1000e2cc:	3312      	adds	r3, #18
1000e2ce:	9100      	str	r1, [sp, #0]
1000e2d0:	9501      	str	r5, [sp, #4]
1000e2d2:	1c21      	adds	r1, r4, #0
1000e2d4:	1c30      	adds	r0, r6, #0
1000e2d6:	4c06      	ldr	r4, [pc, #24]	; (1000e2f0 <at_ble_encryption_start+0x74>)
1000e2d8:	47a0      	blx	r4
1000e2da:	1c3b      	adds	r3, r7, #0
1000e2dc:	1c18      	adds	r0, r3, #0
1000e2de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e2e0:	1000e591 	.word	0x1000e591
1000e2e4:	10015f7e 	.word	0x10015f7e
1000e2e8:	10010e6f 	.word	0x10010e6f
1000e2ec:	1001608c 	.word	0x1001608c
1000e2f0:	1000ec0d 	.word	0x1000ec0d

1000e2f4 <at_ble_encryption_request_reply>:
1000e2f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000e2f6:	24cf      	movs	r4, #207	; 0xcf
1000e2f8:	2b00      	cmp	r3, #0
1000e2fa:	d011      	beq.n	1000e320 <at_ble_encryption_request_reply+0x2c>
1000e2fc:	2a00      	cmp	r2, #0
1000e2fe:	d00a      	beq.n	1000e316 <at_ble_encryption_request_reply+0x22>
1000e300:	2905      	cmp	r1, #5
1000e302:	d80d      	bhi.n	1000e320 <at_ble_encryption_request_reply+0x2c>
1000e304:	2501      	movs	r5, #1
1000e306:	2633      	movs	r6, #51	; 0x33
1000e308:	408d      	lsls	r5, r1
1000e30a:	4235      	tst	r5, r6
1000e30c:	d008      	beq.n	1000e320 <at_ble_encryption_request_reply+0x2c>
1000e30e:	7e9d      	ldrb	r5, [r3, #26]
1000e310:	3d07      	subs	r5, #7
1000e312:	2d09      	cmp	r5, #9
1000e314:	d804      	bhi.n	1000e320 <at_ble_encryption_request_reply+0x2c>
1000e316:	7e9c      	ldrb	r4, [r3, #26]
1000e318:	9400      	str	r4, [sp, #0]
1000e31a:	4c02      	ldr	r4, [pc, #8]	; (1000e324 <at_ble_encryption_request_reply+0x30>)
1000e31c:	47a0      	blx	r4
1000e31e:	2400      	movs	r4, #0
1000e320:	1c20      	adds	r0, r4, #0
1000e322:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000e324:	1000ecc9 	.word	0x1000ecc9

1000e328 <rx_callback>:
1000e328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e32a:	8883      	ldrh	r3, [r0, #4]
1000e32c:	1c01      	adds	r1, r0, #0
1000e32e:	9301      	str	r3, [sp, #4]
1000e330:	88c5      	ldrh	r5, [r0, #6]
1000e332:	8806      	ldrh	r6, [r0, #0]
1000e334:	2d00      	cmp	r5, #0
1000e336:	d10f      	bne.n	1000e358 <rx_callback+0x30>
1000e338:	1c19      	adds	r1, r3, #0
1000e33a:	1c30      	adds	r0, r6, #0
1000e33c:	4b19      	ldr	r3, [pc, #100]	; (1000e3a4 <rx_callback+0x7c>)
1000e33e:	1c2a      	adds	r2, r5, #0
1000e340:	4798      	blx	r3
1000e342:	1e03      	subs	r3, r0, #0
1000e344:	d105      	bne.n	1000e352 <rx_callback+0x2a>
1000e346:	1c30      	adds	r0, r6, #0
1000e348:	9901      	ldr	r1, [sp, #4]
1000e34a:	1c1a      	adds	r2, r3, #0
1000e34c:	4c16      	ldr	r4, [pc, #88]	; (1000e3a8 <rx_callback+0x80>)
1000e34e:	47a0      	blx	r4
1000e350:	e027      	b.n	1000e3a2 <rx_callback+0x7a>
1000e352:	4b16      	ldr	r3, [pc, #88]	; (1000e3ac <rx_callback+0x84>)
1000e354:	4798      	blx	r3
1000e356:	e024      	b.n	1000e3a2 <rx_callback+0x7a>
1000e358:	4c15      	ldr	r4, [pc, #84]	; (1000e3b0 <rx_callback+0x88>)
1000e35a:	4a16      	ldr	r2, [pc, #88]	; (1000e3b4 <rx_callback+0x8c>)
1000e35c:	6823      	ldr	r3, [r4, #0]
1000e35e:	6812      	ldr	r2, [r2, #0]
1000e360:	18eb      	adds	r3, r5, r3
1000e362:	4293      	cmp	r3, r2
1000e364:	d901      	bls.n	1000e36a <rx_callback+0x42>
1000e366:	2300      	movs	r3, #0
1000e368:	6023      	str	r3, [r4, #0]
1000e36a:	4f13      	ldr	r7, [pc, #76]	; (1000e3b8 <rx_callback+0x90>)
1000e36c:	6822      	ldr	r2, [r4, #0]
1000e36e:	683b      	ldr	r3, [r7, #0]
1000e370:	3108      	adds	r1, #8
1000e372:	1898      	adds	r0, r3, r2
1000e374:	1c2a      	adds	r2, r5, #0
1000e376:	4b11      	ldr	r3, [pc, #68]	; (1000e3bc <rx_callback+0x94>)
1000e378:	4798      	blx	r3
1000e37a:	683b      	ldr	r3, [r7, #0]
1000e37c:	6822      	ldr	r2, [r4, #0]
1000e37e:	1c30      	adds	r0, r6, #0
1000e380:	189a      	adds	r2, r3, r2
1000e382:	9901      	ldr	r1, [sp, #4]
1000e384:	4b07      	ldr	r3, [pc, #28]	; (1000e3a4 <rx_callback+0x7c>)
1000e386:	4798      	blx	r3
1000e388:	2800      	cmp	r0, #0
1000e38a:	d1e2      	bne.n	1000e352 <rx_callback+0x2a>
1000e38c:	6823      	ldr	r3, [r4, #0]
1000e38e:	683a      	ldr	r2, [r7, #0]
1000e390:	1c30      	adds	r0, r6, #0
1000e392:	18d2      	adds	r2, r2, r3
1000e394:	9901      	ldr	r1, [sp, #4]
1000e396:	1c2b      	adds	r3, r5, #0
1000e398:	4e03      	ldr	r6, [pc, #12]	; (1000e3a8 <rx_callback+0x80>)
1000e39a:	47b0      	blx	r6
1000e39c:	6823      	ldr	r3, [r4, #0]
1000e39e:	18ed      	adds	r5, r5, r3
1000e3a0:	6025      	str	r5, [r4, #0]
1000e3a2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e3a4:	1000c9bd 	.word	0x1000c9bd
1000e3a8:	1000c935 	.word	0x1000c935
1000e3ac:	10009a39 	.word	0x10009a39
1000e3b0:	100160e8 	.word	0x100160e8
1000e3b4:	100151e0 	.word	0x100151e0
1000e3b8:	100151dc 	.word	0x100151dc
1000e3bc:	10010e6f 	.word	0x10010e6f

1000e3c0 <interface_send>:
1000e3c0:	b508      	push	{r3, lr}
1000e3c2:	4b02      	ldr	r3, [pc, #8]	; (1000e3cc <interface_send+0xc>)
1000e3c4:	4798      	blx	r3
1000e3c6:	2000      	movs	r0, #0
1000e3c8:	bd08      	pop	{r3, pc}
1000e3ca:	46c0      	nop			; (mov r8, r8)
1000e3cc:	10009731 	.word	0x10009731

1000e3d0 <interface_init>:
1000e3d0:	2280      	movs	r2, #128	; 0x80
1000e3d2:	b510      	push	{r4, lr}
1000e3d4:	2100      	movs	r1, #0
1000e3d6:	1c04      	adds	r4, r0, #0
1000e3d8:	0092      	lsls	r2, r2, #2
1000e3da:	4b08      	ldr	r3, [pc, #32]	; (1000e3fc <interface_init+0x2c>)
1000e3dc:	4808      	ldr	r0, [pc, #32]	; (1000e400 <interface_init+0x30>)
1000e3de:	4798      	blx	r3
1000e3e0:	2200      	movs	r2, #0
1000e3e2:	4b08      	ldr	r3, [pc, #32]	; (1000e404 <interface_init+0x34>)
1000e3e4:	601a      	str	r2, [r3, #0]
1000e3e6:	4a08      	ldr	r2, [pc, #32]	; (1000e408 <interface_init+0x38>)
1000e3e8:	4b08      	ldr	r3, [pc, #32]	; (1000e40c <interface_init+0x3c>)
1000e3ea:	601a      	str	r2, [r3, #0]
1000e3ec:	4b08      	ldr	r3, [pc, #32]	; (1000e410 <interface_init+0x40>)
1000e3ee:	6922      	ldr	r2, [r4, #16]
1000e3f0:	601a      	str	r2, [r3, #0]
1000e3f2:	6962      	ldr	r2, [r4, #20]
1000e3f4:	4b07      	ldr	r3, [pc, #28]	; (1000e414 <interface_init+0x44>)
1000e3f6:	601a      	str	r2, [r3, #0]
1000e3f8:	bd10      	pop	{r4, pc}
1000e3fa:	46c0      	nop			; (mov r8, r8)
1000e3fc:	10010e81 	.word	0x10010e81
1000e400:	100162ec 	.word	0x100162ec
1000e404:	100160e8 	.word	0x100160e8
1000e408:	100160ec 	.word	0x100160ec
1000e40c:	10013748 	.word	0x10013748
1000e410:	100151dc 	.word	0x100151dc
1000e414:	100151e0 	.word	0x100151e0

1000e418 <platform_cmd_cmpl_signal>:
1000e418:	2201      	movs	r2, #1
1000e41a:	4b01      	ldr	r3, [pc, #4]	; (1000e420 <platform_cmd_cmpl_signal+0x8>)
1000e41c:	601a      	str	r2, [r3, #0]
1000e41e:	4770      	bx	lr
1000e420:	100151e4 	.word	0x100151e4

1000e424 <platform_cmd_cmpl_wait>:
1000e424:	b510      	push	{r4, lr}
1000e426:	1c04      	adds	r4, r0, #0
1000e428:	4b07      	ldr	r3, [pc, #28]	; (1000e448 <platform_cmd_cmpl_wait+0x24>)
1000e42a:	681a      	ldr	r2, [r3, #0]
1000e42c:	2a01      	cmp	r2, #1
1000e42e:	d003      	beq.n	1000e438 <platform_cmd_cmpl_wait+0x14>
1000e430:	4b06      	ldr	r3, [pc, #24]	; (1000e44c <platform_cmd_cmpl_wait+0x28>)
1000e432:	2000      	movs	r0, #0
1000e434:	4798      	blx	r3
1000e436:	e7f7      	b.n	1000e428 <platform_cmd_cmpl_wait+0x4>
1000e438:	6819      	ldr	r1, [r3, #0]
1000e43a:	2901      	cmp	r1, #1
1000e43c:	d102      	bne.n	1000e444 <platform_cmd_cmpl_wait+0x20>
1000e43e:	2200      	movs	r2, #0
1000e440:	601a      	str	r2, [r3, #0]
1000e442:	e000      	b.n	1000e446 <platform_cmd_cmpl_wait+0x22>
1000e444:	7022      	strb	r2, [r4, #0]
1000e446:	bd10      	pop	{r4, pc}
1000e448:	100151e4 	.word	0x100151e4
1000e44c:	100097c1 	.word	0x100097c1

1000e450 <start_timer>:
1000e450:	4770      	bx	lr

1000e452 <stop_timer>:
1000e452:	4770      	bx	lr

1000e454 <dbg_le_set_bd_addr_req_handler>:
1000e454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e456:	466b      	mov	r3, sp
1000e458:	1dde      	adds	r6, r3, #7
1000e45a:	2300      	movs	r3, #0
1000e45c:	7033      	strb	r3, [r6, #0]
1000e45e:	230f      	movs	r3, #15
1000e460:	4c13      	ldr	r4, [pc, #76]	; (1000e4b0 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000e462:	2703      	movs	r7, #3
1000e464:	7023      	strb	r3, [r4, #0]
1000e466:	2300      	movs	r3, #0
1000e468:	70e3      	strb	r3, [r4, #3]
1000e46a:	4b12      	ldr	r3, [pc, #72]	; (1000e4b4 <dbg_le_set_bd_addr_req_handler+0x60>)
1000e46c:	1c01      	adds	r1, r0, #0
1000e46e:	881a      	ldrh	r2, [r3, #0]
1000e470:	881b      	ldrh	r3, [r3, #0]
1000e472:	7122      	strb	r2, [r4, #4]
1000e474:	0a1b      	lsrs	r3, r3, #8
1000e476:	2206      	movs	r2, #6
1000e478:	7163      	strb	r3, [r4, #5]
1000e47a:	480f      	ldr	r0, [pc, #60]	; (1000e4b8 <dbg_le_set_bd_addr_req_handler+0x64>)
1000e47c:	4b0f      	ldr	r3, [pc, #60]	; (1000e4bc <dbg_le_set_bd_addr_req_handler+0x68>)
1000e47e:	7067      	strb	r7, [r4, #1]
1000e480:	70a7      	strb	r7, [r4, #2]
1000e482:	4798      	blx	r3
1000e484:	4d0e      	ldr	r5, [pc, #56]	; (1000e4c0 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000e486:	4b0f      	ldr	r3, [pc, #60]	; (1000e4c4 <dbg_le_set_bd_addr_req_handler+0x70>)
1000e488:	210e      	movs	r1, #14
1000e48a:	802b      	strh	r3, [r5, #0]
1000e48c:	2306      	movs	r3, #6
1000e48e:	71a3      	strb	r3, [r4, #6]
1000e490:	2300      	movs	r3, #0
1000e492:	1c20      	adds	r0, r4, #0
1000e494:	71e3      	strb	r3, [r4, #7]
1000e496:	4b0c      	ldr	r3, [pc, #48]	; (1000e4c8 <dbg_le_set_bd_addr_req_handler+0x74>)
1000e498:	80af      	strh	r7, [r5, #4]
1000e49a:	4798      	blx	r3
1000e49c:	1c30      	adds	r0, r6, #0
1000e49e:	4b0b      	ldr	r3, [pc, #44]	; (1000e4cc <dbg_le_set_bd_addr_req_handler+0x78>)
1000e4a0:	4798      	blx	r3
1000e4a2:	7833      	ldrb	r3, [r6, #0]
1000e4a4:	20e2      	movs	r0, #226	; 0xe2
1000e4a6:	2b00      	cmp	r3, #0
1000e4a8:	d101      	bne.n	1000e4ae <dbg_le_set_bd_addr_req_handler+0x5a>
1000e4aa:	68ab      	ldr	r3, [r5, #8]
1000e4ac:	7818      	ldrb	r0, [r3, #0]
1000e4ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e4b0:	100162ec 	.word	0x100162ec
1000e4b4:	10015f7c 	.word	0x10015f7c
1000e4b8:	100162f4 	.word	0x100162f4
1000e4bc:	10010e6f 	.word	0x10010e6f
1000e4c0:	10015f70 	.word	0x10015f70
1000e4c4:	00000329 	.word	0x00000329
1000e4c8:	1000e3c1 	.word	0x1000e3c1
1000e4cc:	1000e425 	.word	0x1000e425

1000e4d0 <gapc_get_dev_info_cfm.constprop.1>:
1000e4d0:	b538      	push	{r3, r4, r5, lr}
1000e4d2:	230b      	movs	r3, #11
1000e4d4:	4c27      	ldr	r4, [pc, #156]	; (1000e574 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000e4d6:	7023      	strb	r3, [r4, #0]
1000e4d8:	3303      	adds	r3, #3
1000e4da:	7063      	strb	r3, [r4, #1]
1000e4dc:	3329      	adds	r3, #41	; 0x29
1000e4de:	70a3      	strb	r3, [r4, #2]
1000e4e0:	4b25      	ldr	r3, [pc, #148]	; (1000e578 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000e4e2:	70e1      	strb	r1, [r4, #3]
1000e4e4:	881a      	ldrh	r2, [r3, #0]
1000e4e6:	881b      	ldrh	r3, [r3, #0]
1000e4e8:	7122      	strb	r2, [r4, #4]
1000e4ea:	0a1b      	lsrs	r3, r3, #8
1000e4ec:	7163      	strb	r3, [r4, #5]
1000e4ee:	2300      	movs	r3, #0
1000e4f0:	7220      	strb	r0, [r4, #8]
1000e4f2:	7263      	strb	r3, [r4, #9]
1000e4f4:	2801      	cmp	r0, #1
1000e4f6:	d02b      	beq.n	1000e550 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000e4f8:	4298      	cmp	r0, r3
1000e4fa:	d01b      	beq.n	1000e534 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000e4fc:	2802      	cmp	r0, #2
1000e4fe:	d12f      	bne.n	1000e560 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000e500:	4b1e      	ldr	r3, [pc, #120]	; (1000e57c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000e502:	2112      	movs	r1, #18
1000e504:	1c1a      	adds	r2, r3, #0
1000e506:	32ce      	adds	r2, #206	; 0xce
1000e508:	8812      	ldrh	r2, [r2, #0]
1000e50a:	72a2      	strb	r2, [r4, #10]
1000e50c:	0a12      	lsrs	r2, r2, #8
1000e50e:	72e2      	strb	r2, [r4, #11]
1000e510:	1c1a      	adds	r2, r3, #0
1000e512:	32d0      	adds	r2, #208	; 0xd0
1000e514:	8812      	ldrh	r2, [r2, #0]
1000e516:	7322      	strb	r2, [r4, #12]
1000e518:	0a12      	lsrs	r2, r2, #8
1000e51a:	7362      	strb	r2, [r4, #13]
1000e51c:	1c1a      	adds	r2, r3, #0
1000e51e:	32d2      	adds	r2, #210	; 0xd2
1000e520:	8812      	ldrh	r2, [r2, #0]
1000e522:	33d4      	adds	r3, #212	; 0xd4
1000e524:	73a2      	strb	r2, [r4, #14]
1000e526:	0a12      	lsrs	r2, r2, #8
1000e528:	73e2      	strb	r2, [r4, #15]
1000e52a:	881b      	ldrh	r3, [r3, #0]
1000e52c:	7423      	strb	r3, [r4, #16]
1000e52e:	0a1b      	lsrs	r3, r3, #8
1000e530:	7463      	strb	r3, [r4, #17]
1000e532:	e016      	b.n	1000e562 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000e534:	4b11      	ldr	r3, [pc, #68]	; (1000e57c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000e536:	4912      	ldr	r1, [pc, #72]	; (1000e580 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000e538:	33aa      	adds	r3, #170	; 0xaa
1000e53a:	881d      	ldrh	r5, [r3, #0]
1000e53c:	4811      	ldr	r0, [pc, #68]	; (1000e584 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000e53e:	0a2b      	lsrs	r3, r5, #8
1000e540:	72a5      	strb	r5, [r4, #10]
1000e542:	72e3      	strb	r3, [r4, #11]
1000e544:	1c2a      	adds	r2, r5, #0
1000e546:	4b10      	ldr	r3, [pc, #64]	; (1000e588 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000e548:	350c      	adds	r5, #12
1000e54a:	4798      	blx	r3
1000e54c:	b2a9      	uxth	r1, r5
1000e54e:	e008      	b.n	1000e562 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000e550:	4b0a      	ldr	r3, [pc, #40]	; (1000e57c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000e552:	210c      	movs	r1, #12
1000e554:	33cc      	adds	r3, #204	; 0xcc
1000e556:	881b      	ldrh	r3, [r3, #0]
1000e558:	72a3      	strb	r3, [r4, #10]
1000e55a:	0a1b      	lsrs	r3, r3, #8
1000e55c:	72e3      	strb	r3, [r4, #11]
1000e55e:	e000      	b.n	1000e562 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000e560:	210a      	movs	r1, #10
1000e562:	1c0b      	adds	r3, r1, #0
1000e564:	3b08      	subs	r3, #8
1000e566:	71a3      	strb	r3, [r4, #6]
1000e568:	121b      	asrs	r3, r3, #8
1000e56a:	71e3      	strb	r3, [r4, #7]
1000e56c:	1c20      	adds	r0, r4, #0
1000e56e:	4b07      	ldr	r3, [pc, #28]	; (1000e58c <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000e570:	4798      	blx	r3
1000e572:	bd38      	pop	{r3, r4, r5, pc}
1000e574:	100162ec 	.word	0x100162ec
1000e578:	10015f7c 	.word	0x10015f7c
1000e57c:	1001600e 	.word	0x1001600e
1000e580:	100160ba 	.word	0x100160ba
1000e584:	100162f8 	.word	0x100162f8
1000e588:	10010e6f 	.word	0x10010e6f
1000e58c:	1000e3c1 	.word	0x1000e3c1

1000e590 <check_ConnData_idx_role>:
1000e590:	4b0c      	ldr	r3, [pc, #48]	; (1000e5c4 <check_ConnData_idx_role+0x34>)
1000e592:	b570      	push	{r4, r5, r6, lr}
1000e594:	1c04      	adds	r4, r0, #0
1000e596:	2008      	movs	r0, #8
1000e598:	429c      	cmp	r4, r3
1000e59a:	d011      	beq.n	1000e5c0 <check_ConnData_idx_role+0x30>
1000e59c:	2300      	movs	r3, #0
1000e59e:	2212      	movs	r2, #18
1000e5a0:	435a      	muls	r2, r3
1000e5a2:	4d09      	ldr	r5, [pc, #36]	; (1000e5c8 <check_ConnData_idx_role+0x38>)
1000e5a4:	b2d8      	uxtb	r0, r3
1000e5a6:	1956      	adds	r6, r2, r5
1000e5a8:	8976      	ldrh	r6, [r6, #10]
1000e5aa:	42a6      	cmp	r6, r4
1000e5ac:	d104      	bne.n	1000e5b8 <check_ConnData_idx_role+0x28>
1000e5ae:	2900      	cmp	r1, #0
1000e5b0:	d006      	beq.n	1000e5c0 <check_ConnData_idx_role+0x30>
1000e5b2:	5d53      	ldrb	r3, [r2, r5]
1000e5b4:	700b      	strb	r3, [r1, #0]
1000e5b6:	e003      	b.n	1000e5c0 <check_ConnData_idx_role+0x30>
1000e5b8:	3301      	adds	r3, #1
1000e5ba:	2b08      	cmp	r3, #8
1000e5bc:	d1ef      	bne.n	1000e59e <check_ConnData_idx_role+0xe>
1000e5be:	1c18      	adds	r0, r3, #0
1000e5c0:	bd70      	pop	{r4, r5, r6, pc}
1000e5c2:	46c0      	nop			; (mov r8, r8)
1000e5c4:	0000ffff 	.word	0x0000ffff
1000e5c8:	10015f7e 	.word	0x10015f7e

1000e5cc <check_ConnData_emptyEntry>:
1000e5cc:	2300      	movs	r3, #0
1000e5ce:	2212      	movs	r2, #18
1000e5d0:	435a      	muls	r2, r3
1000e5d2:	4906      	ldr	r1, [pc, #24]	; (1000e5ec <check_ConnData_emptyEntry+0x20>)
1000e5d4:	b2d8      	uxtb	r0, r3
1000e5d6:	1852      	adds	r2, r2, r1
1000e5d8:	8951      	ldrh	r1, [r2, #10]
1000e5da:	4a05      	ldr	r2, [pc, #20]	; (1000e5f0 <check_ConnData_emptyEntry+0x24>)
1000e5dc:	4291      	cmp	r1, r2
1000e5de:	d003      	beq.n	1000e5e8 <check_ConnData_emptyEntry+0x1c>
1000e5e0:	3301      	adds	r3, #1
1000e5e2:	2b08      	cmp	r3, #8
1000e5e4:	d1f3      	bne.n	1000e5ce <check_ConnData_emptyEntry+0x2>
1000e5e6:	1c18      	adds	r0, r3, #0
1000e5e8:	4770      	bx	lr
1000e5ea:	46c0      	nop			; (mov r8, r8)
1000e5ec:	10015f7e 	.word	0x10015f7e
1000e5f0:	0000ffff 	.word	0x0000ffff

1000e5f4 <gapc_cmp_evt>:
1000e5f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e5f6:	780b      	ldrb	r3, [r1, #0]
1000e5f8:	1c05      	adds	r5, r0, #0
1000e5fa:	1e58      	subs	r0, r3, #1
1000e5fc:	784e      	ldrb	r6, [r1, #1]
1000e5fe:	280f      	cmp	r0, #15
1000e600:	d85a      	bhi.n	1000e6b8 <gapc_cmp_evt+0xc4>
1000e602:	1c14      	adds	r4, r2, #0
1000e604:	f001 fba4 	bl	1000fd50 <__gnu_thumb1_case_uqi>
1000e608:	5858440a 	.word	0x5858440a
1000e60c:	4b584444 	.word	0x4b584444
1000e610:	0825122d 	.word	0x0825122d
1000e614:	3e395858 	.word	0x3e395858
1000e618:	203b      	movs	r0, #59	; 0x3b
1000e61a:	e04e      	b.n	1000e6ba <gapc_cmp_evt+0xc6>
1000e61c:	203b      	movs	r0, #59	; 0x3b
1000e61e:	2e00      	cmp	r6, #0
1000e620:	d04b      	beq.n	1000e6ba <gapc_cmp_evt+0xc6>
1000e622:	0a2d      	lsrs	r5, r5, #8
1000e624:	8015      	strh	r5, [r2, #0]
1000e626:	7096      	strb	r6, [r2, #2]
1000e628:	3835      	subs	r0, #53	; 0x35
1000e62a:	e046      	b.n	1000e6ba <gapc_cmp_evt+0xc6>
1000e62c:	466b      	mov	r3, sp
1000e62e:	1ddf      	adds	r7, r3, #7
1000e630:	2301      	movs	r3, #1
1000e632:	0a2d      	lsrs	r5, r5, #8
1000e634:	703b      	strb	r3, [r7, #0]
1000e636:	1c28      	adds	r0, r5, #0
1000e638:	1c39      	adds	r1, r7, #0
1000e63a:	4b20      	ldr	r3, [pc, #128]	; (1000e6bc <gapc_cmp_evt+0xc8>)
1000e63c:	4798      	blx	r3
1000e63e:	2807      	cmp	r0, #7
1000e640:	d803      	bhi.n	1000e64a <gapc_cmp_evt+0x56>
1000e642:	783b      	ldrb	r3, [r7, #0]
1000e644:	203b      	movs	r0, #59	; 0x3b
1000e646:	2b00      	cmp	r3, #0
1000e648:	d037      	beq.n	1000e6ba <gapc_cmp_evt+0xc6>
1000e64a:	8065      	strh	r5, [r4, #2]
1000e64c:	7126      	strb	r6, [r4, #4]
1000e64e:	2009      	movs	r0, #9
1000e650:	e033      	b.n	1000e6ba <gapc_cmp_evt+0xc6>
1000e652:	203b      	movs	r0, #59	; 0x3b
1000e654:	2e00      	cmp	r6, #0
1000e656:	d030      	beq.n	1000e6ba <gapc_cmp_evt+0xc6>
1000e658:	0a2d      	lsrs	r5, r5, #8
1000e65a:	8015      	strh	r5, [r2, #0]
1000e65c:	7096      	strb	r6, [r2, #2]
1000e65e:	382d      	subs	r0, #45	; 0x2d
1000e660:	e02b      	b.n	1000e6ba <gapc_cmp_evt+0xc6>
1000e662:	203b      	movs	r0, #59	; 0x3b
1000e664:	2e00      	cmp	r6, #0
1000e666:	d028      	beq.n	1000e6ba <gapc_cmp_evt+0xc6>
1000e668:	2300      	movs	r3, #0
1000e66a:	0a2d      	lsrs	r5, r5, #8
1000e66c:	8015      	strh	r5, [r2, #0]
1000e66e:	7096      	strb	r6, [r2, #2]
1000e670:	8093      	strh	r3, [r2, #4]
1000e672:	80d3      	strh	r3, [r2, #6]
1000e674:	8113      	strh	r3, [r2, #8]
1000e676:	3834      	subs	r0, #52	; 0x34
1000e678:	e01f      	b.n	1000e6ba <gapc_cmp_evt+0xc6>
1000e67a:	203b      	movs	r0, #59	; 0x3b
1000e67c:	2e00      	cmp	r6, #0
1000e67e:	d01c      	beq.n	1000e6ba <gapc_cmp_evt+0xc6>
1000e680:	7216      	strb	r6, [r2, #8]
1000e682:	e003      	b.n	1000e68c <gapc_cmp_evt+0x98>
1000e684:	203b      	movs	r0, #59	; 0x3b
1000e686:	2e00      	cmp	r6, #0
1000e688:	d017      	beq.n	1000e6ba <gapc_cmp_evt+0xc6>
1000e68a:	7116      	strb	r6, [r2, #4]
1000e68c:	3812      	subs	r0, #18
1000e68e:	e014      	b.n	1000e6ba <gapc_cmp_evt+0xc6>
1000e690:	203b      	movs	r0, #59	; 0x3b
1000e692:	2e00      	cmp	r6, #0
1000e694:	d011      	beq.n	1000e6ba <gapc_cmp_evt+0xc6>
1000e696:	7093      	strb	r3, [r2, #2]
1000e698:	70d6      	strb	r6, [r2, #3]
1000e69a:	382a      	subs	r0, #42	; 0x2a
1000e69c:	e00d      	b.n	1000e6ba <gapc_cmp_evt+0xc6>
1000e69e:	203b      	movs	r0, #59	; 0x3b
1000e6a0:	2e00      	cmp	r6, #0
1000e6a2:	d00a      	beq.n	1000e6ba <gapc_cmp_evt+0xc6>
1000e6a4:	0a2d      	lsrs	r5, r5, #8
1000e6a6:	7016      	strb	r6, [r2, #0]
1000e6a8:	8055      	strh	r5, [r2, #2]
1000e6aa:	1d10      	adds	r0, r2, #4
1000e6ac:	2100      	movs	r1, #0
1000e6ae:	2205      	movs	r2, #5
1000e6b0:	4b03      	ldr	r3, [pc, #12]	; (1000e6c0 <gapc_cmp_evt+0xcc>)
1000e6b2:	4798      	blx	r3
1000e6b4:	2012      	movs	r0, #18
1000e6b6:	e000      	b.n	1000e6ba <gapc_cmp_evt+0xc6>
1000e6b8:	2000      	movs	r0, #0
1000e6ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e6bc:	1000e591 	.word	0x1000e591
1000e6c0:	10010e81 	.word	0x10010e81

1000e6c4 <gapc_connection_cfm_handler>:
1000e6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e6c6:	b085      	sub	sp, #20
1000e6c8:	1c1d      	adds	r5, r3, #0
1000e6ca:	ab0a      	add	r3, sp, #40	; 0x28
1000e6cc:	781b      	ldrb	r3, [r3, #0]
1000e6ce:	9201      	str	r2, [sp, #4]
1000e6d0:	9302      	str	r3, [sp, #8]
1000e6d2:	ab0b      	add	r3, sp, #44	; 0x2c
1000e6d4:	781b      	ldrb	r3, [r3, #0]
1000e6d6:	1c07      	adds	r7, r0, #0
1000e6d8:	9303      	str	r3, [sp, #12]
1000e6da:	ab0c      	add	r3, sp, #48	; 0x30
1000e6dc:	881a      	ldrh	r2, [r3, #0]
1000e6de:	2302      	movs	r3, #2
1000e6e0:	1c0e      	adds	r6, r1, #0
1000e6e2:	4c23      	ldr	r4, [pc, #140]	; (1000e770 <gapc_connection_cfm_handler+0xac>)
1000e6e4:	1c39      	adds	r1, r7, #0
1000e6e6:	7023      	strb	r3, [r4, #0]
1000e6e8:	330c      	adds	r3, #12
1000e6ea:	7063      	strb	r3, [r4, #1]
1000e6ec:	70a3      	strb	r3, [r4, #2]
1000e6ee:	4b21      	ldr	r3, [pc, #132]	; (1000e774 <gapc_connection_cfm_handler+0xb0>)
1000e6f0:	70e2      	strb	r2, [r4, #3]
1000e6f2:	881a      	ldrh	r2, [r3, #0]
1000e6f4:	881b      	ldrh	r3, [r3, #0]
1000e6f6:	7122      	strb	r2, [r4, #4]
1000e6f8:	0a1b      	lsrs	r3, r3, #8
1000e6fa:	4f1f      	ldr	r7, [pc, #124]	; (1000e778 <gapc_connection_cfm_handler+0xb4>)
1000e6fc:	2210      	movs	r2, #16
1000e6fe:	481f      	ldr	r0, [pc, #124]	; (1000e77c <gapc_connection_cfm_handler+0xb8>)
1000e700:	7163      	strb	r3, [r4, #5]
1000e702:	47b8      	blx	r7
1000e704:	0a33      	lsrs	r3, r6, #8
1000e706:	7626      	strb	r6, [r4, #24]
1000e708:	7663      	strb	r3, [r4, #25]
1000e70a:	9901      	ldr	r1, [sp, #4]
1000e70c:	0c33      	lsrs	r3, r6, #16
1000e70e:	2210      	movs	r2, #16
1000e710:	0e36      	lsrs	r6, r6, #24
1000e712:	481b      	ldr	r0, [pc, #108]	; (1000e780 <gapc_connection_cfm_handler+0xbc>)
1000e714:	76a3      	strb	r3, [r4, #26]
1000e716:	76e6      	strb	r6, [r4, #27]
1000e718:	47b8      	blx	r7
1000e71a:	1c23      	adds	r3, r4, #0
1000e71c:	332c      	adds	r3, #44	; 0x2c
1000e71e:	701d      	strb	r5, [r3, #0]
1000e720:	1c23      	adds	r3, r4, #0
1000e722:	0a2a      	lsrs	r2, r5, #8
1000e724:	332d      	adds	r3, #45	; 0x2d
1000e726:	701a      	strb	r2, [r3, #0]
1000e728:	1c23      	adds	r3, r4, #0
1000e72a:	0c2a      	lsrs	r2, r5, #16
1000e72c:	332e      	adds	r3, #46	; 0x2e
1000e72e:	701a      	strb	r2, [r3, #0]
1000e730:	1c23      	adds	r3, r4, #0
1000e732:	0e2d      	lsrs	r5, r5, #24
1000e734:	332f      	adds	r3, #47	; 0x2f
1000e736:	466a      	mov	r2, sp
1000e738:	701d      	strb	r5, [r3, #0]
1000e73a:	1c23      	adds	r3, r4, #0
1000e73c:	7a12      	ldrb	r2, [r2, #8]
1000e73e:	3330      	adds	r3, #48	; 0x30
1000e740:	701a      	strb	r2, [r3, #0]
1000e742:	1c23      	adds	r3, r4, #0
1000e744:	2500      	movs	r5, #0
1000e746:	3331      	adds	r3, #49	; 0x31
1000e748:	466a      	mov	r2, sp
1000e74a:	701d      	strb	r5, [r3, #0]
1000e74c:	1c23      	adds	r3, r4, #0
1000e74e:	7b12      	ldrb	r2, [r2, #12]
1000e750:	3332      	adds	r3, #50	; 0x32
1000e752:	701a      	strb	r2, [r3, #0]
1000e754:	1c23      	adds	r3, r4, #0
1000e756:	3333      	adds	r3, #51	; 0x33
1000e758:	701d      	strb	r5, [r3, #0]
1000e75a:	232c      	movs	r3, #44	; 0x2c
1000e75c:	1c20      	adds	r0, r4, #0
1000e75e:	71a3      	strb	r3, [r4, #6]
1000e760:	2134      	movs	r1, #52	; 0x34
1000e762:	4b08      	ldr	r3, [pc, #32]	; (1000e784 <gapc_connection_cfm_handler+0xc0>)
1000e764:	71e5      	strb	r5, [r4, #7]
1000e766:	4798      	blx	r3
1000e768:	1c28      	adds	r0, r5, #0
1000e76a:	b005      	add	sp, #20
1000e76c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e76e:	46c0      	nop			; (mov r8, r8)
1000e770:	100162ec 	.word	0x100162ec
1000e774:	10015f7c 	.word	0x10015f7c
1000e778:	10010e6f 	.word	0x10010e6f
1000e77c:	100162f4 	.word	0x100162f4
1000e780:	10016308 	.word	0x10016308
1000e784:	1000e3c1 	.word	0x1000e3c1

1000e788 <gapc_con_req_ind>:
1000e788:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e78a:	7845      	ldrb	r5, [r0, #1]
1000e78c:	7803      	ldrb	r3, [r0, #0]
1000e78e:	4c30      	ldr	r4, [pc, #192]	; (1000e850 <gapc_con_req_ind+0xc8>)
1000e790:	022d      	lsls	r5, r5, #8
1000e792:	431d      	orrs	r5, r3
1000e794:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000e796:	78c3      	ldrb	r3, [r0, #3]
1000e798:	7882      	ldrb	r2, [r0, #2]
1000e79a:	b08b      	sub	sp, #44	; 0x2c
1000e79c:	021b      	lsls	r3, r3, #8
1000e79e:	431a      	orrs	r2, r3
1000e7a0:	466b      	mov	r3, sp
1000e7a2:	9205      	str	r2, [sp, #20]
1000e7a4:	8a9b      	ldrh	r3, [r3, #20]
1000e7a6:	2120      	movs	r1, #32
1000e7a8:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000e7aa:	7943      	ldrb	r3, [r0, #5]
1000e7ac:	7902      	ldrb	r2, [r0, #4]
1000e7ae:	021b      	lsls	r3, r3, #8
1000e7b0:	431a      	orrs	r2, r3
1000e7b2:	466b      	mov	r3, sp
1000e7b4:	9206      	str	r2, [sp, #24]
1000e7b6:	8b1b      	ldrh	r3, [r3, #24]
1000e7b8:	1c06      	adds	r6, r0, #0
1000e7ba:	8623      	strh	r3, [r4, #48]	; 0x30
1000e7bc:	79c3      	ldrb	r3, [r0, #7]
1000e7be:	7982      	ldrb	r2, [r0, #6]
1000e7c0:	021b      	lsls	r3, r3, #8
1000e7c2:	431a      	orrs	r2, r3
1000e7c4:	466b      	mov	r3, sp
1000e7c6:	9207      	str	r2, [sp, #28]
1000e7c8:	466a      	mov	r2, sp
1000e7ca:	8b9b      	ldrh	r3, [r3, #28]
1000e7cc:	1852      	adds	r2, r2, r1
1000e7ce:	8663      	strh	r3, [r4, #50]	; 0x32
1000e7d0:	7a43      	ldrb	r3, [r0, #9]
1000e7d2:	1c01      	adds	r1, r0, #0
1000e7d4:	9308      	str	r3, [sp, #32]
1000e7d6:	1c23      	adds	r3, r4, #0
1000e7d8:	7812      	ldrb	r2, [r2, #0]
1000e7da:	3377      	adds	r3, #119	; 0x77
1000e7dc:	3478      	adds	r4, #120	; 0x78
1000e7de:	701a      	strb	r2, [r3, #0]
1000e7e0:	310a      	adds	r1, #10
1000e7e2:	2206      	movs	r2, #6
1000e7e4:	4b1b      	ldr	r3, [pc, #108]	; (1000e854 <gapc_con_req_ind+0xcc>)
1000e7e6:	1c20      	adds	r0, r4, #0
1000e7e8:	4798      	blx	r3
1000e7ea:	7c33      	ldrb	r3, [r6, #16]
1000e7ec:	9309      	str	r3, [sp, #36]	; 0x24
1000e7ee:	4b1a      	ldr	r3, [pc, #104]	; (1000e858 <gapc_con_req_ind+0xd0>)
1000e7f0:	4798      	blx	r3
1000e7f2:	4e1a      	ldr	r6, [pc, #104]	; (1000e85c <gapc_con_req_ind+0xd4>)
1000e7f4:	1e07      	subs	r7, r0, #0
1000e7f6:	2f07      	cmp	r7, #7
1000e7f8:	d81b      	bhi.n	1000e832 <gapc_con_req_ind+0xaa>
1000e7fa:	2312      	movs	r3, #18
1000e7fc:	4343      	muls	r3, r0
1000e7fe:	18f0      	adds	r0, r6, r3
1000e800:	8145      	strh	r5, [r0, #10]
1000e802:	4669      	mov	r1, sp
1000e804:	2524      	movs	r5, #36	; 0x24
1000e806:	1949      	adds	r1, r1, r5
1000e808:	7809      	ldrb	r1, [r1, #0]
1000e80a:	2206      	movs	r2, #6
1000e80c:	54f1      	strb	r1, [r6, r3]
1000e80e:	2120      	movs	r1, #32
1000e810:	466b      	mov	r3, sp
1000e812:	185b      	adds	r3, r3, r1
1000e814:	781b      	ldrb	r3, [r3, #0]
1000e816:	1c21      	adds	r1, r4, #0
1000e818:	7043      	strb	r3, [r0, #1]
1000e81a:	466b      	mov	r3, sp
1000e81c:	8a9b      	ldrh	r3, [r3, #20]
1000e81e:	3002      	adds	r0, #2
1000e820:	8143      	strh	r3, [r0, #10]
1000e822:	466b      	mov	r3, sp
1000e824:	8b1b      	ldrh	r3, [r3, #24]
1000e826:	8183      	strh	r3, [r0, #12]
1000e828:	466b      	mov	r3, sp
1000e82a:	8b9b      	ldrh	r3, [r3, #28]
1000e82c:	81c3      	strh	r3, [r0, #14]
1000e82e:	4b09      	ldr	r3, [pc, #36]	; (1000e854 <gapc_con_req_ind+0xcc>)
1000e830:	4798      	blx	r3
1000e832:	2112      	movs	r1, #18
1000e834:	2300      	movs	r3, #0
1000e836:	434f      	muls	r7, r1
1000e838:	9300      	str	r3, [sp, #0]
1000e83a:	9301      	str	r3, [sp, #4]
1000e83c:	19f6      	adds	r6, r6, r7
1000e83e:	8971      	ldrh	r1, [r6, #10]
1000e840:	4a07      	ldr	r2, [pc, #28]	; (1000e860 <gapc_con_req_ind+0xd8>)
1000e842:	9102      	str	r1, [sp, #8]
1000e844:	1c10      	adds	r0, r2, #0
1000e846:	1c19      	adds	r1, r3, #0
1000e848:	4c06      	ldr	r4, [pc, #24]	; (1000e864 <gapc_con_req_ind+0xdc>)
1000e84a:	47a0      	blx	r4
1000e84c:	b00b      	add	sp, #44	; 0x2c
1000e84e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e850:	1001600e 	.word	0x1001600e
1000e854:	10010e6f 	.word	0x10010e6f
1000e858:	1000e5cd 	.word	0x1000e5cd
1000e85c:	10015f7e 	.word	0x10015f7e
1000e860:	100151e8 	.word	0x100151e8
1000e864:	1000e6c5 	.word	0x1000e6c5

1000e868 <gapc_disconnect_cmd_handler>:
1000e868:	2204      	movs	r2, #4
1000e86a:	b510      	push	{r4, lr}
1000e86c:	4b0c      	ldr	r3, [pc, #48]	; (1000e8a0 <gapc_disconnect_cmd_handler+0x38>)
1000e86e:	2400      	movs	r4, #0
1000e870:	701a      	strb	r2, [r3, #0]
1000e872:	320a      	adds	r2, #10
1000e874:	705a      	strb	r2, [r3, #1]
1000e876:	709a      	strb	r2, [r3, #2]
1000e878:	4a0a      	ldr	r2, [pc, #40]	; (1000e8a4 <gapc_disconnect_cmd_handler+0x3c>)
1000e87a:	70d9      	strb	r1, [r3, #3]
1000e87c:	8811      	ldrh	r1, [r2, #0]
1000e87e:	8812      	ldrh	r2, [r2, #0]
1000e880:	7119      	strb	r1, [r3, #4]
1000e882:	0a12      	lsrs	r2, r2, #8
1000e884:	715a      	strb	r2, [r3, #5]
1000e886:	2201      	movs	r2, #1
1000e888:	721a      	strb	r2, [r3, #8]
1000e88a:	1892      	adds	r2, r2, r2
1000e88c:	7258      	strb	r0, [r3, #9]
1000e88e:	719a      	strb	r2, [r3, #6]
1000e890:	71dc      	strb	r4, [r3, #7]
1000e892:	1c18      	adds	r0, r3, #0
1000e894:	210a      	movs	r1, #10
1000e896:	4b04      	ldr	r3, [pc, #16]	; (1000e8a8 <gapc_disconnect_cmd_handler+0x40>)
1000e898:	4798      	blx	r3
1000e89a:	1c20      	adds	r0, r4, #0
1000e89c:	bd10      	pop	{r4, pc}
1000e89e:	46c0      	nop			; (mov r8, r8)
1000e8a0:	100162ec 	.word	0x100162ec
1000e8a4:	10015f7c 	.word	0x10015f7c
1000e8a8:	1000e3c1 	.word	0x1000e3c1

1000e8ac <gapc_disconnect_ind>:
1000e8ac:	1c02      	adds	r2, r0, #0
1000e8ae:	b508      	push	{r3, lr}
1000e8b0:	7843      	ldrb	r3, [r0, #1]
1000e8b2:	7800      	ldrb	r0, [r0, #0]
1000e8b4:	021b      	lsls	r3, r3, #8
1000e8b6:	4318      	orrs	r0, r3
1000e8b8:	8008      	strh	r0, [r1, #0]
1000e8ba:	7893      	ldrb	r3, [r2, #2]
1000e8bc:	708b      	strb	r3, [r1, #2]
1000e8be:	2100      	movs	r1, #0
1000e8c0:	4b05      	ldr	r3, [pc, #20]	; (1000e8d8 <gapc_disconnect_ind+0x2c>)
1000e8c2:	4798      	blx	r3
1000e8c4:	2807      	cmp	r0, #7
1000e8c6:	d806      	bhi.n	1000e8d6 <gapc_disconnect_ind+0x2a>
1000e8c8:	2312      	movs	r3, #18
1000e8ca:	4358      	muls	r0, r3
1000e8cc:	4b03      	ldr	r3, [pc, #12]	; (1000e8dc <gapc_disconnect_ind+0x30>)
1000e8ce:	1818      	adds	r0, r3, r0
1000e8d0:	2301      	movs	r3, #1
1000e8d2:	425b      	negs	r3, r3
1000e8d4:	8143      	strh	r3, [r0, #10]
1000e8d6:	bd08      	pop	{r3, pc}
1000e8d8:	1000e591 	.word	0x1000e591
1000e8dc:	10015f7e 	.word	0x10015f7e

1000e8e0 <gapc_bond_cmd_handler>:
1000e8e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e8e2:	9300      	str	r3, [sp, #0]
1000e8e4:	2312      	movs	r3, #18
1000e8e6:	1c04      	adds	r4, r0, #0
1000e8e8:	a808      	add	r0, sp, #32
1000e8ea:	7807      	ldrb	r7, [r0, #0]
1000e8ec:	a809      	add	r0, sp, #36	; 0x24
1000e8ee:	7806      	ldrb	r6, [r0, #0]
1000e8f0:	a80a      	add	r0, sp, #40	; 0x28
1000e8f2:	7805      	ldrb	r5, [r0, #0]
1000e8f4:	a80b      	add	r0, sp, #44	; 0x2c
1000e8f6:	7800      	ldrb	r0, [r0, #0]
1000e8f8:	9001      	str	r0, [sp, #4]
1000e8fa:	4810      	ldr	r0, [pc, #64]	; (1000e93c <gapc_bond_cmd_handler+0x5c>)
1000e8fc:	7003      	strb	r3, [r0, #0]
1000e8fe:	230e      	movs	r3, #14
1000e900:	70c4      	strb	r4, [r0, #3]
1000e902:	4c0f      	ldr	r4, [pc, #60]	; (1000e940 <gapc_bond_cmd_handler+0x60>)
1000e904:	7043      	strb	r3, [r0, #1]
1000e906:	7083      	strb	r3, [r0, #2]
1000e908:	8823      	ldrh	r3, [r4, #0]
1000e90a:	8824      	ldrh	r4, [r4, #0]
1000e90c:	7103      	strb	r3, [r0, #4]
1000e90e:	466b      	mov	r3, sp
1000e910:	781b      	ldrb	r3, [r3, #0]
1000e912:	0a24      	lsrs	r4, r4, #8
1000e914:	72c3      	strb	r3, [r0, #11]
1000e916:	466b      	mov	r3, sp
1000e918:	791b      	ldrb	r3, [r3, #4]
1000e91a:	7144      	strb	r4, [r0, #5]
1000e91c:	73c3      	strb	r3, [r0, #15]
1000e91e:	2308      	movs	r3, #8
1000e920:	7183      	strb	r3, [r0, #6]
1000e922:	2300      	movs	r3, #0
1000e924:	240a      	movs	r4, #10
1000e926:	7241      	strb	r1, [r0, #9]
1000e928:	71c3      	strb	r3, [r0, #7]
1000e92a:	2110      	movs	r1, #16
1000e92c:	4b05      	ldr	r3, [pc, #20]	; (1000e944 <gapc_bond_cmd_handler+0x64>)
1000e92e:	7307      	strb	r7, [r0, #12]
1000e930:	7346      	strb	r6, [r0, #13]
1000e932:	7385      	strb	r5, [r0, #14]
1000e934:	7204      	strb	r4, [r0, #8]
1000e936:	7282      	strb	r2, [r0, #10]
1000e938:	4798      	blx	r3
1000e93a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e93c:	100162ec 	.word	0x100162ec
1000e940:	10015f7c 	.word	0x10015f7c
1000e944:	1000e3c1 	.word	0x1000e3c1

1000e948 <gapc_bond_ind>:
1000e948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e94a:	780e      	ldrb	r6, [r1, #0]
1000e94c:	1c03      	adds	r3, r0, #0
1000e94e:	1eb0      	subs	r0, r6, #2
1000e950:	2805      	cmp	r0, #5
1000e952:	d85d      	bhi.n	1000ea10 <gapc_bond_ind+0xc8>
1000e954:	1c15      	adds	r5, r2, #0
1000e956:	1c0c      	adds	r4, r1, #0
1000e958:	f001 f9fa 	bl	1000fd50 <__gnu_thumb1_case_uqi>
1000e95c:	2f5a030d 	.word	0x2f5a030d
1000e960:	4740      	.short	0x4740
1000e962:	2009      	movs	r0, #9
1000e964:	2a00      	cmp	r2, #0
1000e966:	d054      	beq.n	1000ea12 <gapc_bond_ind+0xca>
1000e968:	0a1b      	lsrs	r3, r3, #8
1000e96a:	8053      	strh	r3, [r2, #2]
1000e96c:	788b      	ldrb	r3, [r1, #2]
1000e96e:	4829      	ldr	r0, [pc, #164]	; (1000ea14 <gapc_bond_ind+0xcc>)
1000e970:	7113      	strb	r3, [r2, #4]
1000e972:	2100      	movs	r1, #0
1000e974:	e01c      	b.n	1000e9b0 <gapc_bond_ind+0x68>
1000e976:	2009      	movs	r0, #9
1000e978:	2a00      	cmp	r2, #0
1000e97a:	d04a      	beq.n	1000ea12 <gapc_bond_ind+0xca>
1000e97c:	4c25      	ldr	r4, [pc, #148]	; (1000ea14 <gapc_bond_ind+0xcc>)
1000e97e:	0a1b      	lsrs	r3, r3, #8
1000e980:	8053      	strh	r3, [r2, #2]
1000e982:	788b      	ldrb	r3, [r1, #2]
1000e984:	2700      	movs	r7, #0
1000e986:	1c10      	adds	r0, r2, #0
1000e988:	1c21      	adds	r1, r4, #0
1000e98a:	7013      	strb	r3, [r2, #0]
1000e98c:	4e22      	ldr	r6, [pc, #136]	; (1000ea18 <gapc_bond_ind+0xd0>)
1000e98e:	7117      	strb	r7, [r2, #4]
1000e990:	312e      	adds	r1, #46	; 0x2e
1000e992:	2217      	movs	r2, #23
1000e994:	3032      	adds	r0, #50	; 0x32
1000e996:	47b0      	blx	r6
1000e998:	1c28      	adds	r0, r5, #0
1000e99a:	1c21      	adds	r1, r4, #0
1000e99c:	2210      	movs	r2, #16
1000e99e:	311e      	adds	r1, #30
1000e9a0:	3022      	adds	r0, #34	; 0x22
1000e9a2:	47b0      	blx	r6
1000e9a4:	1ca1      	adds	r1, r4, #2
1000e9a6:	1da8      	adds	r0, r5, #6
1000e9a8:	221c      	movs	r2, #28
1000e9aa:	47b0      	blx	r6
1000e9ac:	1c20      	adds	r0, r4, #0
1000e9ae:	1c39      	adds	r1, r7, #0
1000e9b0:	2246      	movs	r2, #70	; 0x46
1000e9b2:	4b1a      	ldr	r3, [pc, #104]	; (1000ea1c <gapc_bond_ind+0xd4>)
1000e9b4:	4798      	blx	r3
1000e9b6:	2009      	movs	r0, #9
1000e9b8:	e02b      	b.n	1000ea12 <gapc_bond_ind+0xca>
1000e9ba:	4d16      	ldr	r5, [pc, #88]	; (1000ea14 <gapc_bond_ind+0xcc>)
1000e9bc:	3102      	adds	r1, #2
1000e9be:	1c28      	adds	r0, r5, #0
1000e9c0:	2210      	movs	r2, #16
1000e9c2:	4e15      	ldr	r6, [pc, #84]	; (1000ea18 <gapc_bond_ind+0xd0>)
1000e9c4:	302e      	adds	r0, #46	; 0x2e
1000e9c6:	47b0      	blx	r6
1000e9c8:	1c28      	adds	r0, r5, #0
1000e9ca:	1c21      	adds	r1, r4, #0
1000e9cc:	303f      	adds	r0, #63	; 0x3f
1000e9ce:	3112      	adds	r1, #18
1000e9d0:	2206      	movs	r2, #6
1000e9d2:	47b0      	blx	r6
1000e9d4:	7e23      	ldrb	r3, [r4, #24]
1000e9d6:	353e      	adds	r5, #62	; 0x3e
1000e9d8:	702b      	strb	r3, [r5, #0]
1000e9da:	e019      	b.n	1000ea10 <gapc_bond_ind+0xc8>
1000e9dc:	480d      	ldr	r0, [pc, #52]	; (1000ea14 <gapc_bond_ind+0xcc>)
1000e9de:	3102      	adds	r1, #2
1000e9e0:	2210      	movs	r2, #16
1000e9e2:	4b0d      	ldr	r3, [pc, #52]	; (1000ea18 <gapc_bond_ind+0xd0>)
1000e9e4:	301e      	adds	r0, #30
1000e9e6:	4798      	blx	r3
1000e9e8:	e012      	b.n	1000ea10 <gapc_bond_ind+0xc8>
1000e9ea:	4d0a      	ldr	r5, [pc, #40]	; (1000ea14 <gapc_bond_ind+0xcc>)
1000e9ec:	3102      	adds	r1, #2
1000e9ee:	2210      	movs	r2, #16
1000e9f0:	4e09      	ldr	r6, [pc, #36]	; (1000ea18 <gapc_bond_ind+0xd0>)
1000e9f2:	1ca8      	adds	r0, r5, #2
1000e9f4:	47b0      	blx	r6
1000e9f6:	1c28      	adds	r0, r5, #0
1000e9f8:	1c21      	adds	r1, r4, #0
1000e9fa:	7ce3      	ldrb	r3, [r4, #19]
1000e9fc:	7ca2      	ldrb	r2, [r4, #18]
1000e9fe:	021b      	lsls	r3, r3, #8
1000ea00:	4313      	orrs	r3, r2
1000ea02:	3014      	adds	r0, #20
1000ea04:	3114      	adds	r1, #20
1000ea06:	2208      	movs	r2, #8
1000ea08:	826b      	strh	r3, [r5, #18]
1000ea0a:	47b0      	blx	r6
1000ea0c:	7f23      	ldrb	r3, [r4, #28]
1000ea0e:	772b      	strb	r3, [r5, #28]
1000ea10:	2000      	movs	r0, #0
1000ea12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ea14:	10015218 	.word	0x10015218
1000ea18:	10010e6f 	.word	0x10010e6f
1000ea1c:	10010e81 	.word	0x10010e81

1000ea20 <gapc_bond_req_ind>:
1000ea20:	b570      	push	{r4, r5, r6, lr}
1000ea22:	780c      	ldrb	r4, [r1, #0]
1000ea24:	1c03      	adds	r3, r0, #0
1000ea26:	7849      	ldrb	r1, [r1, #1]
1000ea28:	2c07      	cmp	r4, #7
1000ea2a:	d85c      	bhi.n	1000eae6 <gapc_bond_req_ind+0xc6>
1000ea2c:	1c20      	adds	r0, r4, #0
1000ea2e:	f001 f98f 	bl	1000fd50 <__gnu_thumb1_case_uqi>
1000ea32:	5a04      	.short	0x5a04
1000ea34:	5a0b5a5a 	.word	0x5a0b5a5a
1000ea38:	1f1f      	.short	0x1f1f
1000ea3a:	200a      	movs	r0, #10
1000ea3c:	2a00      	cmp	r2, #0
1000ea3e:	d053      	beq.n	1000eae8 <gapc_bond_req_ind+0xc8>
1000ea40:	0a1b      	lsrs	r3, r3, #8
1000ea42:	8013      	strh	r3, [r2, #0]
1000ea44:	7091      	strb	r1, [r2, #2]
1000ea46:	e04f      	b.n	1000eae8 <gapc_bond_req_ind+0xc8>
1000ea48:	2a00      	cmp	r2, #0
1000ea4a:	d00b      	beq.n	1000ea64 <gapc_bond_req_ind+0x44>
1000ea4c:	0a1b      	lsrs	r3, r3, #8
1000ea4e:	8013      	strh	r3, [r2, #0]
1000ea50:	2900      	cmp	r1, #0
1000ea52:	d102      	bne.n	1000ea5a <gapc_bond_req_ind+0x3a>
1000ea54:	2301      	movs	r3, #1
1000ea56:	7093      	strb	r3, [r2, #2]
1000ea58:	e004      	b.n	1000ea64 <gapc_bond_req_ind+0x44>
1000ea5a:	2300      	movs	r3, #0
1000ea5c:	7093      	strb	r3, [r2, #2]
1000ea5e:	2902      	cmp	r1, #2
1000ea60:	d102      	bne.n	1000ea68 <gapc_bond_req_ind+0x48>
1000ea62:	70d3      	strb	r3, [r2, #3]
1000ea64:	200c      	movs	r0, #12
1000ea66:	e03f      	b.n	1000eae8 <gapc_bond_req_ind+0xc8>
1000ea68:	2901      	cmp	r1, #1
1000ea6a:	d1fb      	bne.n	1000ea64 <gapc_bond_req_ind+0x44>
1000ea6c:	70d1      	strb	r1, [r2, #3]
1000ea6e:	e7f9      	b.n	1000ea64 <gapc_bond_req_ind+0x44>
1000ea70:	2214      	movs	r2, #20
1000ea72:	481e      	ldr	r0, [pc, #120]	; (1000eaec <gapc_bond_req_ind+0xcc>)
1000ea74:	0a1b      	lsrs	r3, r3, #8
1000ea76:	70c3      	strb	r3, [r0, #3]
1000ea78:	4b1d      	ldr	r3, [pc, #116]	; (1000eaf0 <gapc_bond_req_ind+0xd0>)
1000ea7a:	7002      	strb	r2, [r0, #0]
1000ea7c:	3a06      	subs	r2, #6
1000ea7e:	7042      	strb	r2, [r0, #1]
1000ea80:	7082      	strb	r2, [r0, #2]
1000ea82:	881a      	ldrh	r2, [r3, #0]
1000ea84:	881b      	ldrh	r3, [r3, #0]
1000ea86:	4e1b      	ldr	r6, [pc, #108]	; (1000eaf4 <gapc_bond_req_ind+0xd4>)
1000ea88:	0a1b      	lsrs	r3, r3, #8
1000ea8a:	7143      	strb	r3, [r0, #5]
1000ea8c:	2301      	movs	r3, #1
1000ea8e:	7102      	strb	r2, [r0, #4]
1000ea90:	7204      	strb	r4, [r0, #8]
1000ea92:	7243      	strb	r3, [r0, #9]
1000ea94:	1c05      	adds	r5, r0, #0
1000ea96:	1c31      	adds	r1, r6, #0
1000ea98:	300a      	adds	r0, #10
1000ea9a:	2c07      	cmp	r4, #7
1000ea9c:	d116      	bne.n	1000eacc <gapc_bond_req_ind+0xac>
1000ea9e:	317e      	adds	r1, #126	; 0x7e
1000eaa0:	2210      	movs	r2, #16
1000eaa2:	4c15      	ldr	r4, [pc, #84]	; (1000eaf8 <gapc_bond_req_ind+0xd8>)
1000eaa4:	47a0      	blx	r4
1000eaa6:	1c33      	adds	r3, r6, #0
1000eaa8:	1c31      	adds	r1, r6, #0
1000eaaa:	1c28      	adds	r0, r5, #0
1000eaac:	338e      	adds	r3, #142	; 0x8e
1000eaae:	881b      	ldrh	r3, [r3, #0]
1000eab0:	3190      	adds	r1, #144	; 0x90
1000eab2:	76ab      	strb	r3, [r5, #26]
1000eab4:	2208      	movs	r2, #8
1000eab6:	0a1b      	lsrs	r3, r3, #8
1000eab8:	301c      	adds	r0, #28
1000eaba:	76eb      	strb	r3, [r5, #27]
1000eabc:	47a0      	blx	r4
1000eabe:	1c31      	adds	r1, r6, #0
1000eac0:	3198      	adds	r1, #152	; 0x98
1000eac2:	780a      	ldrb	r2, [r1, #0]
1000eac4:	1d6b      	adds	r3, r5, #5
1000eac6:	77da      	strb	r2, [r3, #31]
1000eac8:	2125      	movs	r1, #37	; 0x25
1000eaca:	e004      	b.n	1000ead6 <gapc_bond_req_ind+0xb6>
1000eacc:	319a      	adds	r1, #154	; 0x9a
1000eace:	2210      	movs	r2, #16
1000ead0:	4b09      	ldr	r3, [pc, #36]	; (1000eaf8 <gapc_bond_req_ind+0xd8>)
1000ead2:	4798      	blx	r3
1000ead4:	211a      	movs	r1, #26
1000ead6:	1c0b      	adds	r3, r1, #0
1000ead8:	2400      	movs	r4, #0
1000eada:	3b08      	subs	r3, #8
1000eadc:	71ab      	strb	r3, [r5, #6]
1000eade:	1c28      	adds	r0, r5, #0
1000eae0:	4b06      	ldr	r3, [pc, #24]	; (1000eafc <gapc_bond_req_ind+0xdc>)
1000eae2:	71ec      	strb	r4, [r5, #7]
1000eae4:	4798      	blx	r3
1000eae6:	2000      	movs	r0, #0
1000eae8:	bd70      	pop	{r4, r5, r6, pc}
1000eaea:	46c0      	nop			; (mov r8, r8)
1000eaec:	100162ec 	.word	0x100162ec
1000eaf0:	10015f7c 	.word	0x10015f7c
1000eaf4:	1001600e 	.word	0x1001600e
1000eaf8:	10010e6f 	.word	0x10010e6f
1000eafc:	1000e3c1 	.word	0x1000e3c1

1000eb00 <gapc_bond_cfm_handler_pair_resp>:
1000eb00:	b5f0      	push	{r4, r5, r6, r7, lr}
1000eb02:	b085      	sub	sp, #20
1000eb04:	1c07      	adds	r7, r0, #0
1000eb06:	a80a      	add	r0, sp, #40	; 0x28
1000eb08:	7806      	ldrb	r6, [r0, #0]
1000eb0a:	a80b      	add	r0, sp, #44	; 0x2c
1000eb0c:	7805      	ldrb	r5, [r0, #0]
1000eb0e:	a80c      	add	r0, sp, #48	; 0x30
1000eb10:	7800      	ldrb	r0, [r0, #0]
1000eb12:	2414      	movs	r4, #20
1000eb14:	9002      	str	r0, [sp, #8]
1000eb16:	a80d      	add	r0, sp, #52	; 0x34
1000eb18:	7800      	ldrb	r0, [r0, #0]
1000eb1a:	9301      	str	r3, [sp, #4]
1000eb1c:	9003      	str	r0, [sp, #12]
1000eb1e:	a80e      	add	r0, sp, #56	; 0x38
1000eb20:	8800      	ldrh	r0, [r0, #0]
1000eb22:	4684      	mov	ip, r0
1000eb24:	4812      	ldr	r0, [pc, #72]	; (1000eb70 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000eb26:	7004      	strb	r4, [r0, #0]
1000eb28:	3c06      	subs	r4, #6
1000eb2a:	7044      	strb	r4, [r0, #1]
1000eb2c:	7084      	strb	r4, [r0, #2]
1000eb2e:	4664      	mov	r4, ip
1000eb30:	70c4      	strb	r4, [r0, #3]
1000eb32:	4c10      	ldr	r4, [pc, #64]	; (1000eb74 <gapc_bond_cfm_handler_pair_resp+0x74>)
1000eb34:	7247      	strb	r7, [r0, #9]
1000eb36:	8823      	ldrh	r3, [r4, #0]
1000eb38:	8824      	ldrh	r4, [r4, #0]
1000eb3a:	7103      	strb	r3, [r0, #4]
1000eb3c:	466b      	mov	r3, sp
1000eb3e:	791b      	ldrb	r3, [r3, #4]
1000eb40:	0a24      	lsrs	r4, r4, #8
1000eb42:	7303      	strb	r3, [r0, #12]
1000eb44:	466b      	mov	r3, sp
1000eb46:	7a1b      	ldrb	r3, [r3, #8]
1000eb48:	7144      	strb	r4, [r0, #5]
1000eb4a:	73c3      	strb	r3, [r0, #15]
1000eb4c:	466b      	mov	r3, sp
1000eb4e:	7b1b      	ldrb	r3, [r3, #12]
1000eb50:	2401      	movs	r4, #1
1000eb52:	7403      	strb	r3, [r0, #16]
1000eb54:	2309      	movs	r3, #9
1000eb56:	7183      	strb	r3, [r0, #6]
1000eb58:	2300      	movs	r3, #0
1000eb5a:	7204      	strb	r4, [r0, #8]
1000eb5c:	7281      	strb	r1, [r0, #10]
1000eb5e:	72c2      	strb	r2, [r0, #11]
1000eb60:	7346      	strb	r6, [r0, #13]
1000eb62:	7385      	strb	r5, [r0, #14]
1000eb64:	71c3      	strb	r3, [r0, #7]
1000eb66:	2111      	movs	r1, #17
1000eb68:	4b03      	ldr	r3, [pc, #12]	; (1000eb78 <gapc_bond_cfm_handler_pair_resp+0x78>)
1000eb6a:	4798      	blx	r3
1000eb6c:	b005      	add	sp, #20
1000eb6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eb70:	100162ec 	.word	0x100162ec
1000eb74:	10015f7c 	.word	0x10015f7c
1000eb78:	1000e3c1 	.word	0x1000e3c1

1000eb7c <gapc_bond_cfm_handler_key_exch>:
1000eb7c:	b538      	push	{r3, r4, r5, lr}
1000eb7e:	2514      	movs	r5, #20
1000eb80:	4c0d      	ldr	r4, [pc, #52]	; (1000ebb8 <gapc_bond_cfm_handler_key_exch+0x3c>)
1000eb82:	70e3      	strb	r3, [r4, #3]
1000eb84:	4b0d      	ldr	r3, [pc, #52]	; (1000ebbc <gapc_bond_cfm_handler_key_exch+0x40>)
1000eb86:	7025      	strb	r5, [r4, #0]
1000eb88:	3d06      	subs	r5, #6
1000eb8a:	7065      	strb	r5, [r4, #1]
1000eb8c:	70a5      	strb	r5, [r4, #2]
1000eb8e:	881d      	ldrh	r5, [r3, #0]
1000eb90:	881b      	ldrh	r3, [r3, #0]
1000eb92:	7220      	strb	r0, [r4, #8]
1000eb94:	0a1b      	lsrs	r3, r3, #8
1000eb96:	7163      	strb	r3, [r4, #5]
1000eb98:	7261      	strb	r1, [r4, #9]
1000eb9a:	4b09      	ldr	r3, [pc, #36]	; (1000ebc0 <gapc_bond_cfm_handler_key_exch+0x44>)
1000eb9c:	1c11      	adds	r1, r2, #0
1000eb9e:	4809      	ldr	r0, [pc, #36]	; (1000ebc4 <gapc_bond_cfm_handler_key_exch+0x48>)
1000eba0:	2210      	movs	r2, #16
1000eba2:	7125      	strb	r5, [r4, #4]
1000eba4:	4798      	blx	r3
1000eba6:	2312      	movs	r3, #18
1000eba8:	71a3      	strb	r3, [r4, #6]
1000ebaa:	2300      	movs	r3, #0
1000ebac:	1c20      	adds	r0, r4, #0
1000ebae:	71e3      	strb	r3, [r4, #7]
1000ebb0:	211a      	movs	r1, #26
1000ebb2:	4b05      	ldr	r3, [pc, #20]	; (1000ebc8 <gapc_bond_cfm_handler_key_exch+0x4c>)
1000ebb4:	4798      	blx	r3
1000ebb6:	bd38      	pop	{r3, r4, r5, pc}
1000ebb8:	100162ec 	.word	0x100162ec
1000ebbc:	10015f7c 	.word	0x10015f7c
1000ebc0:	10010e6f 	.word	0x10010e6f
1000ebc4:	100162f6 	.word	0x100162f6
1000ebc8:	1000e3c1 	.word	0x1000e3c1

1000ebcc <gapc_security_cmd_handler>:
1000ebcc:	221a      	movs	r2, #26
1000ebce:	b508      	push	{r3, lr}
1000ebd0:	4b0b      	ldr	r3, [pc, #44]	; (1000ec00 <gapc_security_cmd_handler+0x34>)
1000ebd2:	701a      	strb	r2, [r3, #0]
1000ebd4:	3a0c      	subs	r2, #12
1000ebd6:	705a      	strb	r2, [r3, #1]
1000ebd8:	709a      	strb	r2, [r3, #2]
1000ebda:	4a0a      	ldr	r2, [pc, #40]	; (1000ec04 <gapc_security_cmd_handler+0x38>)
1000ebdc:	70d8      	strb	r0, [r3, #3]
1000ebde:	8810      	ldrh	r0, [r2, #0]
1000ebe0:	8812      	ldrh	r2, [r2, #0]
1000ebe2:	7118      	strb	r0, [r3, #4]
1000ebe4:	0a12      	lsrs	r2, r2, #8
1000ebe6:	715a      	strb	r2, [r3, #5]
1000ebe8:	220c      	movs	r2, #12
1000ebea:	721a      	strb	r2, [r3, #8]
1000ebec:	3a0a      	subs	r2, #10
1000ebee:	719a      	strb	r2, [r3, #6]
1000ebf0:	2200      	movs	r2, #0
1000ebf2:	7259      	strb	r1, [r3, #9]
1000ebf4:	71da      	strb	r2, [r3, #7]
1000ebf6:	1c18      	adds	r0, r3, #0
1000ebf8:	210a      	movs	r1, #10
1000ebfa:	4b03      	ldr	r3, [pc, #12]	; (1000ec08 <gapc_security_cmd_handler+0x3c>)
1000ebfc:	4798      	blx	r3
1000ebfe:	bd08      	pop	{r3, pc}
1000ec00:	100162ec 	.word	0x100162ec
1000ec04:	10015f7c 	.word	0x10015f7c
1000ec08:	1000e3c1 	.word	0x1000e3c1

1000ec0c <gapc_encrypt_cmd_handler>:
1000ec0c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ec0e:	2500      	movs	r5, #0
1000ec10:	b089      	sub	sp, #36	; 0x24
1000ec12:	9306      	str	r3, [sp, #24]
1000ec14:	ab0e      	add	r3, sp, #56	; 0x38
1000ec16:	781b      	ldrb	r3, [r3, #0]
1000ec18:	1c17      	adds	r7, r2, #0
1000ec1a:	9307      	str	r3, [sp, #28]
1000ec1c:	ab0f      	add	r3, sp, #60	; 0x3c
1000ec1e:	781b      	ldrb	r3, [r3, #0]
1000ec20:	4a19      	ldr	r2, [pc, #100]	; (1000ec88 <gapc_encrypt_cmd_handler+0x7c>)
1000ec22:	1c06      	adds	r6, r0, #0
1000ec24:	9105      	str	r1, [sp, #20]
1000ec26:	9300      	str	r3, [sp, #0]
1000ec28:	9002      	str	r0, [sp, #8]
1000ec2a:	1c29      	adds	r1, r5, #0
1000ec2c:	1c2b      	adds	r3, r5, #0
1000ec2e:	9501      	str	r5, [sp, #4]
1000ec30:	1c10      	adds	r0, r2, #0
1000ec32:	4c16      	ldr	r4, [pc, #88]	; (1000ec8c <gapc_encrypt_cmd_handler+0x80>)
1000ec34:	47a0      	blx	r4
1000ec36:	2316      	movs	r3, #22
1000ec38:	4c15      	ldr	r4, [pc, #84]	; (1000ec90 <gapc_encrypt_cmd_handler+0x84>)
1000ec3a:	9905      	ldr	r1, [sp, #20]
1000ec3c:	7023      	strb	r3, [r4, #0]
1000ec3e:	3b08      	subs	r3, #8
1000ec40:	7063      	strb	r3, [r4, #1]
1000ec42:	70a3      	strb	r3, [r4, #2]
1000ec44:	4b13      	ldr	r3, [pc, #76]	; (1000ec94 <gapc_encrypt_cmd_handler+0x88>)
1000ec46:	70e6      	strb	r6, [r4, #3]
1000ec48:	881a      	ldrh	r2, [r3, #0]
1000ec4a:	881b      	ldrh	r3, [r3, #0]
1000ec4c:	7122      	strb	r2, [r4, #4]
1000ec4e:	0a1b      	lsrs	r3, r3, #8
1000ec50:	7163      	strb	r3, [r4, #5]
1000ec52:	230b      	movs	r3, #11
1000ec54:	4e10      	ldr	r6, [pc, #64]	; (1000ec98 <gapc_encrypt_cmd_handler+0x8c>)
1000ec56:	2210      	movs	r2, #16
1000ec58:	4810      	ldr	r0, [pc, #64]	; (1000ec9c <gapc_encrypt_cmd_handler+0x90>)
1000ec5a:	7223      	strb	r3, [r4, #8]
1000ec5c:	7265      	strb	r5, [r4, #9]
1000ec5e:	47b0      	blx	r6
1000ec60:	0a3b      	lsrs	r3, r7, #8
1000ec62:	9906      	ldr	r1, [sp, #24]
1000ec64:	2208      	movs	r2, #8
1000ec66:	480e      	ldr	r0, [pc, #56]	; (1000eca0 <gapc_encrypt_cmd_handler+0x94>)
1000ec68:	76e3      	strb	r3, [r4, #27]
1000ec6a:	76a7      	strb	r7, [r4, #26]
1000ec6c:	47b0      	blx	r6
1000ec6e:	466a      	mov	r2, sp
1000ec70:	7f12      	ldrb	r2, [r2, #28]
1000ec72:	1d63      	adds	r3, r4, #5
1000ec74:	77da      	strb	r2, [r3, #31]
1000ec76:	231d      	movs	r3, #29
1000ec78:	1c20      	adds	r0, r4, #0
1000ec7a:	71a3      	strb	r3, [r4, #6]
1000ec7c:	2125      	movs	r1, #37	; 0x25
1000ec7e:	4b09      	ldr	r3, [pc, #36]	; (1000eca4 <gapc_encrypt_cmd_handler+0x98>)
1000ec80:	71e5      	strb	r5, [r4, #7]
1000ec82:	4798      	blx	r3
1000ec84:	b009      	add	sp, #36	; 0x24
1000ec86:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ec88:	100151f8 	.word	0x100151f8
1000ec8c:	1000e6c5 	.word	0x1000e6c5
1000ec90:	100162ec 	.word	0x100162ec
1000ec94:	10015f7c 	.word	0x10015f7c
1000ec98:	10010e6f 	.word	0x10010e6f
1000ec9c:	100162f6 	.word	0x100162f6
1000eca0:	10016308 	.word	0x10016308
1000eca4:	1000e3c1 	.word	0x1000e3c1

1000eca8 <gapc_encrypt_req_ind>:
1000eca8:	b508      	push	{r3, lr}
1000ecaa:	0a00      	lsrs	r0, r0, #8
1000ecac:	8010      	strh	r0, [r2, #0]
1000ecae:	784b      	ldrb	r3, [r1, #1]
1000ecb0:	7808      	ldrb	r0, [r1, #0]
1000ecb2:	021b      	lsls	r3, r3, #8
1000ecb4:	4303      	orrs	r3, r0
1000ecb6:	8053      	strh	r3, [r2, #2]
1000ecb8:	1d10      	adds	r0, r2, #4
1000ecba:	3102      	adds	r1, #2
1000ecbc:	2208      	movs	r2, #8
1000ecbe:	4b01      	ldr	r3, [pc, #4]	; (1000ecc4 <gapc_encrypt_req_ind+0x1c>)
1000ecc0:	4798      	blx	r3
1000ecc2:	bd08      	pop	{r3, pc}
1000ecc4:	10010e6f 	.word	0x10010e6f

1000ecc8 <gapc_encrypt_cfm_handler>:
1000ecc8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ecca:	2500      	movs	r5, #0
1000eccc:	b087      	sub	sp, #28
1000ecce:	9304      	str	r3, [sp, #16]
1000ecd0:	ab0c      	add	r3, sp, #48	; 0x30
1000ecd2:	781b      	ldrb	r3, [r3, #0]
1000ecd4:	1c17      	adds	r7, r2, #0
1000ecd6:	4a15      	ldr	r2, [pc, #84]	; (1000ed2c <gapc_encrypt_cfm_handler+0x64>)
1000ecd8:	1c06      	adds	r6, r0, #0
1000ecda:	9305      	str	r3, [sp, #20]
1000ecdc:	9100      	str	r1, [sp, #0]
1000ecde:	9002      	str	r0, [sp, #8]
1000ece0:	1c29      	adds	r1, r5, #0
1000ece2:	1c2b      	adds	r3, r5, #0
1000ece4:	9501      	str	r5, [sp, #4]
1000ece6:	1c10      	adds	r0, r2, #0
1000ece8:	4c11      	ldr	r4, [pc, #68]	; (1000ed30 <gapc_encrypt_cfm_handler+0x68>)
1000ecea:	47a0      	blx	r4
1000ecec:	2318      	movs	r3, #24
1000ecee:	4c11      	ldr	r4, [pc, #68]	; (1000ed34 <gapc_encrypt_cfm_handler+0x6c>)
1000ecf0:	9904      	ldr	r1, [sp, #16]
1000ecf2:	7023      	strb	r3, [r4, #0]
1000ecf4:	3b0a      	subs	r3, #10
1000ecf6:	7063      	strb	r3, [r4, #1]
1000ecf8:	70a3      	strb	r3, [r4, #2]
1000ecfa:	4b0f      	ldr	r3, [pc, #60]	; (1000ed38 <gapc_encrypt_cfm_handler+0x70>)
1000ecfc:	480f      	ldr	r0, [pc, #60]	; (1000ed3c <gapc_encrypt_cfm_handler+0x74>)
1000ecfe:	881a      	ldrh	r2, [r3, #0]
1000ed00:	881b      	ldrh	r3, [r3, #0]
1000ed02:	7122      	strb	r2, [r4, #4]
1000ed04:	0a1b      	lsrs	r3, r3, #8
1000ed06:	7163      	strb	r3, [r4, #5]
1000ed08:	2210      	movs	r2, #16
1000ed0a:	4b0d      	ldr	r3, [pc, #52]	; (1000ed40 <gapc_encrypt_cfm_handler+0x78>)
1000ed0c:	70e6      	strb	r6, [r4, #3]
1000ed0e:	7227      	strb	r7, [r4, #8]
1000ed10:	4798      	blx	r3
1000ed12:	466b      	mov	r3, sp
1000ed14:	7d1b      	ldrb	r3, [r3, #20]
1000ed16:	1c20      	adds	r0, r4, #0
1000ed18:	7663      	strb	r3, [r4, #25]
1000ed1a:	2312      	movs	r3, #18
1000ed1c:	211a      	movs	r1, #26
1000ed1e:	71a3      	strb	r3, [r4, #6]
1000ed20:	4b08      	ldr	r3, [pc, #32]	; (1000ed44 <gapc_encrypt_cfm_handler+0x7c>)
1000ed22:	71e5      	strb	r5, [r4, #7]
1000ed24:	4798      	blx	r3
1000ed26:	b007      	add	sp, #28
1000ed28:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ed2a:	46c0      	nop			; (mov r8, r8)
1000ed2c:	10015208 	.word	0x10015208
1000ed30:	1000e6c5 	.word	0x1000e6c5
1000ed34:	100162ec 	.word	0x100162ec
1000ed38:	10015f7c 	.word	0x10015f7c
1000ed3c:	100162f5 	.word	0x100162f5
1000ed40:	10010e6f 	.word	0x10010e6f
1000ed44:	1000e3c1 	.word	0x1000e3c1

1000ed48 <gapc_encrypt_ind>:
1000ed48:	780b      	ldrb	r3, [r1, #0]
1000ed4a:	0a00      	lsrs	r0, r0, #8
1000ed4c:	70d3      	strb	r3, [r2, #3]
1000ed4e:	2300      	movs	r3, #0
1000ed50:	8010      	strh	r0, [r2, #0]
1000ed52:	7093      	strb	r3, [r2, #2]
1000ed54:	4770      	bx	lr
	...

1000ed58 <gapc_param_update_cfm_handler>:
1000ed58:	b538      	push	{r3, r4, r5, lr}
1000ed5a:	2410      	movs	r4, #16
1000ed5c:	1c05      	adds	r5, r0, #0
1000ed5e:	480e      	ldr	r0, [pc, #56]	; (1000ed98 <gapc_param_update_cfm_handler+0x40>)
1000ed60:	7004      	strb	r4, [r0, #0]
1000ed62:	3c02      	subs	r4, #2
1000ed64:	7044      	strb	r4, [r0, #1]
1000ed66:	7084      	strb	r4, [r0, #2]
1000ed68:	4c0c      	ldr	r4, [pc, #48]	; (1000ed9c <gapc_param_update_cfm_handler+0x44>)
1000ed6a:	70c5      	strb	r5, [r0, #3]
1000ed6c:	8825      	ldrh	r5, [r4, #0]
1000ed6e:	8824      	ldrh	r4, [r4, #0]
1000ed70:	72c3      	strb	r3, [r0, #11]
1000ed72:	0a1b      	lsrs	r3, r3, #8
1000ed74:	0a24      	lsrs	r4, r4, #8
1000ed76:	7303      	strb	r3, [r0, #12]
1000ed78:	2305      	movs	r3, #5
1000ed7a:	7144      	strb	r4, [r0, #5]
1000ed7c:	2400      	movs	r4, #0
1000ed7e:	7201      	strb	r1, [r0, #8]
1000ed80:	7242      	strb	r2, [r0, #9]
1000ed82:	7183      	strb	r3, [r0, #6]
1000ed84:	0a12      	lsrs	r2, r2, #8
1000ed86:	210d      	movs	r1, #13
1000ed88:	4b05      	ldr	r3, [pc, #20]	; (1000eda0 <gapc_param_update_cfm_handler+0x48>)
1000ed8a:	7105      	strb	r5, [r0, #4]
1000ed8c:	7282      	strb	r2, [r0, #10]
1000ed8e:	71c4      	strb	r4, [r0, #7]
1000ed90:	4798      	blx	r3
1000ed92:	1c20      	adds	r0, r4, #0
1000ed94:	bd38      	pop	{r3, r4, r5, pc}
1000ed96:	46c0      	nop			; (mov r8, r8)
1000ed98:	100162ec 	.word	0x100162ec
1000ed9c:	10015f7c 	.word	0x10015f7c
1000eda0:	1000e3c1 	.word	0x1000e3c1

1000eda4 <gapc_param_updated_ind>:
1000eda4:	2300      	movs	r3, #0
1000eda6:	0a00      	lsrs	r0, r0, #8
1000eda8:	8010      	strh	r0, [r2, #0]
1000edaa:	7093      	strb	r3, [r2, #2]
1000edac:	784b      	ldrb	r3, [r1, #1]
1000edae:	7808      	ldrb	r0, [r1, #0]
1000edb0:	021b      	lsls	r3, r3, #8
1000edb2:	4303      	orrs	r3, r0
1000edb4:	8093      	strh	r3, [r2, #4]
1000edb6:	78cb      	ldrb	r3, [r1, #3]
1000edb8:	7888      	ldrb	r0, [r1, #2]
1000edba:	021b      	lsls	r3, r3, #8
1000edbc:	4303      	orrs	r3, r0
1000edbe:	80d3      	strh	r3, [r2, #6]
1000edc0:	794b      	ldrb	r3, [r1, #5]
1000edc2:	7909      	ldrb	r1, [r1, #4]
1000edc4:	021b      	lsls	r3, r3, #8
1000edc6:	430b      	orrs	r3, r1
1000edc8:	2007      	movs	r0, #7
1000edca:	8113      	strh	r3, [r2, #8]
1000edcc:	4770      	bx	lr

1000edce <gapc_param_updated_req_ind>:
1000edce:	0a00      	lsrs	r0, r0, #8
1000edd0:	8010      	strh	r0, [r2, #0]
1000edd2:	784b      	ldrb	r3, [r1, #1]
1000edd4:	7808      	ldrb	r0, [r1, #0]
1000edd6:	021b      	lsls	r3, r3, #8
1000edd8:	4303      	orrs	r3, r0
1000edda:	8053      	strh	r3, [r2, #2]
1000eddc:	78cb      	ldrb	r3, [r1, #3]
1000edde:	7888      	ldrb	r0, [r1, #2]
1000ede0:	021b      	lsls	r3, r3, #8
1000ede2:	4303      	orrs	r3, r0
1000ede4:	8093      	strh	r3, [r2, #4]
1000ede6:	794b      	ldrb	r3, [r1, #5]
1000ede8:	7908      	ldrb	r0, [r1, #4]
1000edea:	021b      	lsls	r3, r3, #8
1000edec:	4303      	orrs	r3, r0
1000edee:	80d3      	strh	r3, [r2, #6]
1000edf0:	79cb      	ldrb	r3, [r1, #7]
1000edf2:	7989      	ldrb	r1, [r1, #6]
1000edf4:	021b      	lsls	r3, r3, #8
1000edf6:	430b      	orrs	r3, r1
1000edf8:	2008      	movs	r0, #8
1000edfa:	8113      	strh	r3, [r2, #8]
1000edfc:	4770      	bx	lr
	...

1000ee00 <gapc_dev_info_req_ind_handler>:
1000ee00:	b508      	push	{r3, lr}
1000ee02:	1c0b      	adds	r3, r1, #0
1000ee04:	0a01      	lsrs	r1, r0, #8
1000ee06:	8011      	strh	r1, [r2, #0]
1000ee08:	7818      	ldrb	r0, [r3, #0]
1000ee0a:	7090      	strb	r0, [r2, #2]
1000ee0c:	2800      	cmp	r0, #0
1000ee0e:	d104      	bne.n	1000ee1a <gapc_dev_info_req_ind_handler+0x1a>
1000ee10:	4b03      	ldr	r3, [pc, #12]	; (1000ee20 <gapc_dev_info_req_ind_handler+0x20>)
1000ee12:	33aa      	adds	r3, #170	; 0xaa
1000ee14:	881b      	ldrh	r3, [r3, #0]
1000ee16:	2b00      	cmp	r3, #0
1000ee18:	d001      	beq.n	1000ee1e <gapc_dev_info_req_ind_handler+0x1e>
1000ee1a:	4b02      	ldr	r3, [pc, #8]	; (1000ee24 <gapc_dev_info_req_ind_handler+0x24>)
1000ee1c:	4798      	blx	r3
1000ee1e:	bd08      	pop	{r3, pc}
1000ee20:	1001600e 	.word	0x1001600e
1000ee24:	1000e4d1 	.word	0x1000e4d1

1000ee28 <gapc_sec_req_ind>:
1000ee28:	0a00      	lsrs	r0, r0, #8
1000ee2a:	8010      	strh	r0, [r2, #0]
1000ee2c:	7809      	ldrb	r1, [r1, #0]
1000ee2e:	2301      	movs	r3, #1
1000ee30:	1c08      	adds	r0, r1, #0
1000ee32:	0889      	lsrs	r1, r1, #2
1000ee34:	4018      	ands	r0, r3
1000ee36:	400b      	ands	r3, r1
1000ee38:	70d0      	strb	r0, [r2, #3]
1000ee3a:	7113      	strb	r3, [r2, #4]
1000ee3c:	4770      	bx	lr

1000ee3e <gapc_sign_counter_ind_handler>:
1000ee3e:	0a00      	lsrs	r0, r0, #8
1000ee40:	8010      	strh	r0, [r2, #0]
1000ee42:	784b      	ldrb	r3, [r1, #1]
1000ee44:	0218      	lsls	r0, r3, #8
1000ee46:	788b      	ldrb	r3, [r1, #2]
1000ee48:	041b      	lsls	r3, r3, #16
1000ee4a:	4303      	orrs	r3, r0
1000ee4c:	7808      	ldrb	r0, [r1, #0]
1000ee4e:	4303      	orrs	r3, r0
1000ee50:	78c8      	ldrb	r0, [r1, #3]
1000ee52:	0600      	lsls	r0, r0, #24
1000ee54:	4303      	orrs	r3, r0
1000ee56:	6053      	str	r3, [r2, #4]
1000ee58:	794b      	ldrb	r3, [r1, #5]
1000ee5a:	0218      	lsls	r0, r3, #8
1000ee5c:	798b      	ldrb	r3, [r1, #6]
1000ee5e:	041b      	lsls	r3, r3, #16
1000ee60:	4303      	orrs	r3, r0
1000ee62:	7908      	ldrb	r0, [r1, #4]
1000ee64:	79c9      	ldrb	r1, [r1, #7]
1000ee66:	4303      	orrs	r3, r0
1000ee68:	0609      	lsls	r1, r1, #24
1000ee6a:	430b      	orrs	r3, r1
1000ee6c:	2000      	movs	r0, #0
1000ee6e:	6093      	str	r3, [r2, #8]
1000ee70:	4770      	bx	lr
	...

1000ee74 <gapc_peer_att_info_ind_handler>:
1000ee74:	b510      	push	{r4, lr}
1000ee76:	0a00      	lsrs	r0, r0, #8
1000ee78:	8010      	strh	r0, [r2, #0]
1000ee7a:	7808      	ldrb	r0, [r1, #0]
1000ee7c:	7090      	strb	r0, [r2, #2]
1000ee7e:	788b      	ldrb	r3, [r1, #2]
1000ee80:	784c      	ldrb	r4, [r1, #1]
1000ee82:	021b      	lsls	r3, r3, #8
1000ee84:	4323      	orrs	r3, r4
1000ee86:	8093      	strh	r3, [r2, #4]
1000ee88:	2801      	cmp	r0, #1
1000ee8a:	d027      	beq.n	1000eedc <gapc_peer_att_info_ind_handler+0x68>
1000ee8c:	2800      	cmp	r0, #0
1000ee8e:	d017      	beq.n	1000eec0 <gapc_peer_att_info_ind_handler+0x4c>
1000ee90:	2802      	cmp	r0, #2
1000ee92:	d12a      	bne.n	1000eeea <gapc_peer_att_info_ind_handler+0x76>
1000ee94:	790b      	ldrb	r3, [r1, #4]
1000ee96:	78c8      	ldrb	r0, [r1, #3]
1000ee98:	021b      	lsls	r3, r3, #8
1000ee9a:	4303      	orrs	r3, r0
1000ee9c:	8113      	strh	r3, [r2, #8]
1000ee9e:	798b      	ldrb	r3, [r1, #6]
1000eea0:	7948      	ldrb	r0, [r1, #5]
1000eea2:	021b      	lsls	r3, r3, #8
1000eea4:	4303      	orrs	r3, r0
1000eea6:	80d3      	strh	r3, [r2, #6]
1000eea8:	7a0b      	ldrb	r3, [r1, #8]
1000eeaa:	79c8      	ldrb	r0, [r1, #7]
1000eeac:	021b      	lsls	r3, r3, #8
1000eeae:	4303      	orrs	r3, r0
1000eeb0:	8193      	strh	r3, [r2, #12]
1000eeb2:	7a8b      	ldrb	r3, [r1, #10]
1000eeb4:	7a49      	ldrb	r1, [r1, #9]
1000eeb6:	021b      	lsls	r3, r3, #8
1000eeb8:	430b      	orrs	r3, r1
1000eeba:	8153      	strh	r3, [r2, #10]
1000eebc:	2306      	movs	r3, #6
1000eebe:	e013      	b.n	1000eee8 <gapc_peer_att_info_ind_handler+0x74>
1000eec0:	1c14      	adds	r4, r2, #0
1000eec2:	1c20      	adds	r0, r4, #0
1000eec4:	790a      	ldrb	r2, [r1, #4]
1000eec6:	78cb      	ldrb	r3, [r1, #3]
1000eec8:	0212      	lsls	r2, r2, #8
1000eeca:	431a      	orrs	r2, r3
1000eecc:	80e2      	strh	r2, [r4, #6]
1000eece:	4b07      	ldr	r3, [pc, #28]	; (1000eeec <gapc_peer_att_info_ind_handler+0x78>)
1000eed0:	3008      	adds	r0, #8
1000eed2:	3105      	adds	r1, #5
1000eed4:	4798      	blx	r3
1000eed6:	2302      	movs	r3, #2
1000eed8:	70a3      	strb	r3, [r4, #2]
1000eeda:	e006      	b.n	1000eeea <gapc_peer_att_info_ind_handler+0x76>
1000eedc:	790b      	ldrb	r3, [r1, #4]
1000eede:	78c9      	ldrb	r1, [r1, #3]
1000eee0:	021b      	lsls	r3, r3, #8
1000eee2:	430b      	orrs	r3, r1
1000eee4:	80d3      	strh	r3, [r2, #6]
1000eee6:	2305      	movs	r3, #5
1000eee8:	7093      	strb	r3, [r2, #2]
1000eeea:	bd10      	pop	{r4, pc}
1000eeec:	10010e6f 	.word	0x10010e6f

1000eef0 <gapc_con_channel_map_ind_handler>:
1000eef0:	b508      	push	{r3, lr}
1000eef2:	2300      	movs	r3, #0
1000eef4:	0a00      	lsrs	r0, r0, #8
1000eef6:	7013      	strb	r3, [r2, #0]
1000eef8:	8050      	strh	r0, [r2, #2]
1000eefa:	4b02      	ldr	r3, [pc, #8]	; (1000ef04 <gapc_con_channel_map_ind_handler+0x14>)
1000eefc:	1d10      	adds	r0, r2, #4
1000eefe:	2205      	movs	r2, #5
1000ef00:	4798      	blx	r3
1000ef02:	bd08      	pop	{r3, pc}
1000ef04:	10010e6f 	.word	0x10010e6f

1000ef08 <gapc_lecb_connected>:
1000ef08:	7843      	ldrb	r3, [r0, #1]
1000ef0a:	7802      	ldrb	r2, [r0, #0]
1000ef0c:	021b      	lsls	r3, r3, #8
1000ef0e:	4313      	orrs	r3, r2
1000ef10:	800b      	strh	r3, [r1, #0]
1000ef12:	78c3      	ldrb	r3, [r0, #3]
1000ef14:	7882      	ldrb	r2, [r0, #2]
1000ef16:	021b      	lsls	r3, r3, #8
1000ef18:	4313      	orrs	r3, r2
1000ef1a:	804b      	strh	r3, [r1, #2]
1000ef1c:	7943      	ldrb	r3, [r0, #5]
1000ef1e:	7902      	ldrb	r2, [r0, #4]
1000ef20:	021b      	lsls	r3, r3, #8
1000ef22:	4313      	orrs	r3, r2
1000ef24:	808b      	strh	r3, [r1, #4]
1000ef26:	79c3      	ldrb	r3, [r0, #7]
1000ef28:	7982      	ldrb	r2, [r0, #6]
1000ef2a:	021b      	lsls	r3, r3, #8
1000ef2c:	4313      	orrs	r3, r2
1000ef2e:	80cb      	strh	r3, [r1, #6]
1000ef30:	2300      	movs	r3, #0
1000ef32:	720b      	strb	r3, [r1, #8]
1000ef34:	4770      	bx	lr

1000ef36 <gapc_lecb_disconnected>:
1000ef36:	7843      	ldrb	r3, [r0, #1]
1000ef38:	7802      	ldrb	r2, [r0, #0]
1000ef3a:	021b      	lsls	r3, r3, #8
1000ef3c:	4313      	orrs	r3, r2
1000ef3e:	800b      	strh	r3, [r1, #0]
1000ef40:	78c3      	ldrb	r3, [r0, #3]
1000ef42:	7882      	ldrb	r2, [r0, #2]
1000ef44:	021b      	lsls	r3, r3, #8
1000ef46:	4313      	orrs	r3, r2
1000ef48:	804b      	strh	r3, [r1, #2]
1000ef4a:	4770      	bx	lr

1000ef4c <gapc_lecb_connect_req_ind>:
1000ef4c:	7843      	ldrb	r3, [r0, #1]
1000ef4e:	7802      	ldrb	r2, [r0, #0]
1000ef50:	021b      	lsls	r3, r3, #8
1000ef52:	4313      	orrs	r3, r2
1000ef54:	800b      	strh	r3, [r1, #0]
1000ef56:	78c3      	ldrb	r3, [r0, #3]
1000ef58:	7882      	ldrb	r2, [r0, #2]
1000ef5a:	021b      	lsls	r3, r3, #8
1000ef5c:	4313      	orrs	r3, r2
1000ef5e:	804b      	strh	r3, [r1, #2]
1000ef60:	7943      	ldrb	r3, [r0, #5]
1000ef62:	7902      	ldrb	r2, [r0, #4]
1000ef64:	021b      	lsls	r3, r3, #8
1000ef66:	4313      	orrs	r3, r2
1000ef68:	808b      	strh	r3, [r1, #4]
1000ef6a:	79c3      	ldrb	r3, [r0, #7]
1000ef6c:	7982      	ldrb	r2, [r0, #6]
1000ef6e:	021b      	lsls	r3, r3, #8
1000ef70:	4313      	orrs	r3, r2
1000ef72:	80cb      	strh	r3, [r1, #6]
1000ef74:	4770      	bx	lr

1000ef76 <gapc_lecb_add_credit_resp_handler>:
1000ef76:	7843      	ldrb	r3, [r0, #1]
1000ef78:	7802      	ldrb	r2, [r0, #0]
1000ef7a:	021b      	lsls	r3, r3, #8
1000ef7c:	4313      	orrs	r3, r2
1000ef7e:	800b      	strh	r3, [r1, #0]
1000ef80:	78c3      	ldrb	r3, [r0, #3]
1000ef82:	7882      	ldrb	r2, [r0, #2]
1000ef84:	021b      	lsls	r3, r3, #8
1000ef86:	4313      	orrs	r3, r2
1000ef88:	804b      	strh	r3, [r1, #2]
1000ef8a:	7943      	ldrb	r3, [r0, #5]
1000ef8c:	7902      	ldrb	r2, [r0, #4]
1000ef8e:	021b      	lsls	r3, r3, #8
1000ef90:	4313      	orrs	r3, r2
1000ef92:	808b      	strh	r3, [r1, #4]
1000ef94:	4770      	bx	lr
	...

1000ef98 <gapm_reset_req_handler>:
1000ef98:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000ef9a:	466b      	mov	r3, sp
1000ef9c:	4915      	ldr	r1, [pc, #84]	; (1000eff4 <gapm_reset_req_handler+0x5c>)
1000ef9e:	4816      	ldr	r0, [pc, #88]	; (1000eff8 <gapm_reset_req_handler+0x60>)
1000efa0:	880c      	ldrh	r4, [r1, #0]
1000efa2:	8809      	ldrh	r1, [r1, #0]
1000efa4:	1ddd      	adds	r5, r3, #7
1000efa6:	0a09      	lsrs	r1, r1, #8
1000efa8:	2300      	movs	r3, #0
1000efaa:	2202      	movs	r2, #2
1000efac:	7141      	strb	r1, [r0, #5]
1000efae:	26d0      	movs	r6, #208	; 0xd0
1000efb0:	2101      	movs	r1, #1
1000efb2:	7104      	strb	r4, [r0, #4]
1000efb4:	4c11      	ldr	r4, [pc, #68]	; (1000effc <gapm_reset_req_handler+0x64>)
1000efb6:	702b      	strb	r3, [r5, #0]
1000efb8:	7002      	strb	r2, [r0, #0]
1000efba:	70c3      	strb	r3, [r0, #3]
1000efbc:	320b      	adds	r2, #11
1000efbe:	7201      	strb	r1, [r0, #8]
1000efc0:	7181      	strb	r1, [r0, #6]
1000efc2:	71c3      	strb	r3, [r0, #7]
1000efc4:	3108      	adds	r1, #8
1000efc6:	4b0e      	ldr	r3, [pc, #56]	; (1000f000 <gapm_reset_req_handler+0x68>)
1000efc8:	0136      	lsls	r6, r6, #4
1000efca:	7042      	strb	r2, [r0, #1]
1000efcc:	7082      	strb	r2, [r0, #2]
1000efce:	80a2      	strh	r2, [r4, #4]
1000efd0:	8026      	strh	r6, [r4, #0]
1000efd2:	4798      	blx	r3
1000efd4:	1c28      	adds	r0, r5, #0
1000efd6:	4b0b      	ldr	r3, [pc, #44]	; (1000f004 <gapm_reset_req_handler+0x6c>)
1000efd8:	4798      	blx	r3
1000efda:	782b      	ldrb	r3, [r5, #0]
1000efdc:	20e2      	movs	r0, #226	; 0xe2
1000efde:	2b00      	cmp	r3, #0
1000efe0:	d106      	bne.n	1000eff0 <gapm_reset_req_handler+0x58>
1000efe2:	68a3      	ldr	r3, [r4, #8]
1000efe4:	20e2      	movs	r0, #226	; 0xe2
1000efe6:	781a      	ldrb	r2, [r3, #0]
1000efe8:	785b      	ldrb	r3, [r3, #1]
1000efea:	2a01      	cmp	r2, #1
1000efec:	d100      	bne.n	1000eff0 <gapm_reset_req_handler+0x58>
1000efee:	1c18      	adds	r0, r3, #0
1000eff0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000eff2:	46c0      	nop			; (mov r8, r8)
1000eff4:	10015f7c 	.word	0x10015f7c
1000eff8:	100162ec 	.word	0x100162ec
1000effc:	10015f70 	.word	0x10015f70
1000f000:	1000e3c1 	.word	0x1000e3c1
1000f004:	1000e425 	.word	0x1000e425

1000f008 <gapm_set_dev_config_cmd_handler>:
1000f008:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f00a:	b089      	sub	sp, #36	; 0x24
1000f00c:	9303      	str	r3, [sp, #12]
1000f00e:	ab0e      	add	r3, sp, #56	; 0x38
1000f010:	781b      	ldrb	r3, [r3, #0]
1000f012:	4c37      	ldr	r4, [pc, #220]	; (1000f0f0 <gapm_set_dev_config_cmd_handler+0xe8>)
1000f014:	9304      	str	r3, [sp, #16]
1000f016:	ab0f      	add	r3, sp, #60	; 0x3c
1000f018:	781b      	ldrb	r3, [r3, #0]
1000f01a:	270d      	movs	r7, #13
1000f01c:	9305      	str	r3, [sp, #20]
1000f01e:	ab10      	add	r3, sp, #64	; 0x40
1000f020:	881b      	ldrh	r3, [r3, #0]
1000f022:	72a1      	strb	r1, [r4, #10]
1000f024:	9300      	str	r3, [sp, #0]
1000f026:	ab11      	add	r3, sp, #68	; 0x44
1000f028:	881b      	ldrh	r3, [r3, #0]
1000f02a:	0a09      	lsrs	r1, r1, #8
1000f02c:	9301      	str	r3, [sp, #4]
1000f02e:	ab12      	add	r3, sp, #72	; 0x48
1000f030:	881b      	ldrh	r3, [r3, #0]
1000f032:	7260      	strb	r0, [r4, #9]
1000f034:	9302      	str	r3, [sp, #8]
1000f036:	ab06      	add	r3, sp, #24
1000f038:	1dde      	adds	r6, r3, #7
1000f03a:	2300      	movs	r3, #0
1000f03c:	7033      	strb	r3, [r6, #0]
1000f03e:	2304      	movs	r3, #4
1000f040:	7023      	strb	r3, [r4, #0]
1000f042:	2300      	movs	r3, #0
1000f044:	70e3      	strb	r3, [r4, #3]
1000f046:	4b2b      	ldr	r3, [pc, #172]	; (1000f0f4 <gapm_set_dev_config_cmd_handler+0xec>)
1000f048:	72e1      	strb	r1, [r4, #11]
1000f04a:	881d      	ldrh	r5, [r3, #0]
1000f04c:	881b      	ldrh	r3, [r3, #0]
1000f04e:	1c11      	adds	r1, r2, #0
1000f050:	0a1b      	lsrs	r3, r3, #8
1000f052:	7163      	strb	r3, [r4, #5]
1000f054:	2303      	movs	r3, #3
1000f056:	7125      	strb	r5, [r4, #4]
1000f058:	2206      	movs	r2, #6
1000f05a:	4d27      	ldr	r5, [pc, #156]	; (1000f0f8 <gapm_set_dev_config_cmd_handler+0xf0>)
1000f05c:	4827      	ldr	r0, [pc, #156]	; (1000f0fc <gapm_set_dev_config_cmd_handler+0xf4>)
1000f05e:	7223      	strb	r3, [r4, #8]
1000f060:	7067      	strb	r7, [r4, #1]
1000f062:	70a7      	strb	r7, [r4, #2]
1000f064:	47a8      	blx	r5
1000f066:	9903      	ldr	r1, [sp, #12]
1000f068:	2210      	movs	r2, #16
1000f06a:	4825      	ldr	r0, [pc, #148]	; (1000f100 <gapm_set_dev_config_cmd_handler+0xf8>)
1000f06c:	47a8      	blx	r5
1000f06e:	466a      	mov	r2, sp
1000f070:	7c12      	ldrb	r2, [r2, #16]
1000f072:	1ce3      	adds	r3, r4, #3
1000f074:	77da      	strb	r2, [r3, #31]
1000f076:	466a      	mov	r2, sp
1000f078:	7d12      	ldrb	r2, [r2, #20]
1000f07a:	1d23      	adds	r3, r4, #4
1000f07c:	77da      	strb	r2, [r3, #31]
1000f07e:	466a      	mov	r2, sp
1000f080:	7812      	ldrb	r2, [r2, #0]
1000f082:	1d63      	adds	r3, r4, #5
1000f084:	77da      	strb	r2, [r3, #31]
1000f086:	9b00      	ldr	r3, [sp, #0]
1000f088:	1da2      	adds	r2, r4, #6
1000f08a:	0a1b      	lsrs	r3, r3, #8
1000f08c:	77d3      	strb	r3, [r2, #31]
1000f08e:	466a      	mov	r2, sp
1000f090:	7912      	ldrb	r2, [r2, #4]
1000f092:	1de3      	adds	r3, r4, #7
1000f094:	77da      	strb	r2, [r3, #31]
1000f096:	1c22      	adds	r2, r4, #0
1000f098:	9b01      	ldr	r3, [sp, #4]
1000f09a:	3208      	adds	r2, #8
1000f09c:	0a1b      	lsrs	r3, r3, #8
1000f09e:	77d3      	strb	r3, [r2, #31]
1000f0a0:	466a      	mov	r2, sp
1000f0a2:	1c23      	adds	r3, r4, #0
1000f0a4:	7a12      	ldrb	r2, [r2, #8]
1000f0a6:	3328      	adds	r3, #40	; 0x28
1000f0a8:	701a      	strb	r2, [r3, #0]
1000f0aa:	1c22      	adds	r2, r4, #0
1000f0ac:	9b02      	ldr	r3, [sp, #8]
1000f0ae:	3229      	adds	r2, #41	; 0x29
1000f0b0:	0a1b      	lsrs	r3, r3, #8
1000f0b2:	7013      	strb	r3, [r2, #0]
1000f0b4:	23d0      	movs	r3, #208	; 0xd0
1000f0b6:	4d13      	ldr	r5, [pc, #76]	; (1000f104 <gapm_set_dev_config_cmd_handler+0xfc>)
1000f0b8:	011b      	lsls	r3, r3, #4
1000f0ba:	802b      	strh	r3, [r5, #0]
1000f0bc:	2322      	movs	r3, #34	; 0x22
1000f0be:	71a3      	strb	r3, [r4, #6]
1000f0c0:	2300      	movs	r3, #0
1000f0c2:	212a      	movs	r1, #42	; 0x2a
1000f0c4:	71e3      	strb	r3, [r4, #7]
1000f0c6:	1c20      	adds	r0, r4, #0
1000f0c8:	4b0f      	ldr	r3, [pc, #60]	; (1000f108 <gapm_set_dev_config_cmd_handler+0x100>)
1000f0ca:	80af      	strh	r7, [r5, #4]
1000f0cc:	4798      	blx	r3
1000f0ce:	1c30      	adds	r0, r6, #0
1000f0d0:	4b0e      	ldr	r3, [pc, #56]	; (1000f10c <gapm_set_dev_config_cmd_handler+0x104>)
1000f0d2:	4798      	blx	r3
1000f0d4:	7833      	ldrb	r3, [r6, #0]
1000f0d6:	20e2      	movs	r0, #226	; 0xe2
1000f0d8:	2b00      	cmp	r3, #0
1000f0da:	d106      	bne.n	1000f0ea <gapm_set_dev_config_cmd_handler+0xe2>
1000f0dc:	68ab      	ldr	r3, [r5, #8]
1000f0de:	20e2      	movs	r0, #226	; 0xe2
1000f0e0:	781a      	ldrb	r2, [r3, #0]
1000f0e2:	785b      	ldrb	r3, [r3, #1]
1000f0e4:	2a03      	cmp	r2, #3
1000f0e6:	d100      	bne.n	1000f0ea <gapm_set_dev_config_cmd_handler+0xe2>
1000f0e8:	1c18      	adds	r0, r3, #0
1000f0ea:	b009      	add	sp, #36	; 0x24
1000f0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f0ee:	46c0      	nop			; (mov r8, r8)
1000f0f0:	100162ec 	.word	0x100162ec
1000f0f4:	10015f7c 	.word	0x10015f7c
1000f0f8:	10010e6f 	.word	0x10010e6f
1000f0fc:	100162f8 	.word	0x100162f8
1000f100:	100162fe 	.word	0x100162fe
1000f104:	10015f70 	.word	0x10015f70
1000f108:	1000e3c1 	.word	0x1000e3c1
1000f10c:	1000e425 	.word	0x1000e425

1000f110 <gapm_get_dev_config_cmd_handler>:
1000f110:	4684      	mov	ip, r0
1000f112:	4663      	mov	r3, ip
1000f114:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f116:	b085      	sub	sp, #20
1000f118:	9100      	str	r1, [sp, #0]
1000f11a:	20cf      	movs	r0, #207	; 0xcf
1000f11c:	2b01      	cmp	r3, #1
1000f11e:	d854      	bhi.n	1000f1ca <gapm_get_dev_config_cmd_handler+0xba>
1000f120:	2900      	cmp	r1, #0
1000f122:	d052      	beq.n	1000f1ca <gapm_get_dev_config_cmd_handler+0xba>
1000f124:	2200      	movs	r2, #0
1000f126:	492a      	ldr	r1, [pc, #168]	; (1000f1d0 <gapm_get_dev_config_cmd_handler+0xc0>)
1000f128:	ab02      	add	r3, sp, #8
1000f12a:	880c      	ldrh	r4, [r1, #0]
1000f12c:	8809      	ldrh	r1, [r1, #0]
1000f12e:	1d9f      	adds	r7, r3, #6
1000f130:	719a      	strb	r2, [r3, #6]
1000f132:	4b28      	ldr	r3, [pc, #160]	; (1000f1d4 <gapm_get_dev_config_cmd_handler+0xc4>)
1000f134:	0a09      	lsrs	r1, r1, #8
1000f136:	250d      	movs	r5, #13
1000f138:	2606      	movs	r6, #6
1000f13a:	7159      	strb	r1, [r3, #5]
1000f13c:	4661      	mov	r1, ip
1000f13e:	701e      	strb	r6, [r3, #0]
1000f140:	705d      	strb	r5, [r3, #1]
1000f142:	709d      	strb	r5, [r3, #2]
1000f144:	70da      	strb	r2, [r3, #3]
1000f146:	711c      	strb	r4, [r3, #4]
1000f148:	2901      	cmp	r1, #1
1000f14a:	d13e      	bne.n	1000f1ca <gapm_get_dev_config_cmd_handler+0xba>
1000f14c:	21d0      	movs	r1, #208	; 0xd0
1000f14e:	4c22      	ldr	r4, [pc, #136]	; (1000f1d8 <gapm_get_dev_config_cmd_handler+0xc8>)
1000f150:	0109      	lsls	r1, r1, #4
1000f152:	8061      	strh	r1, [r4, #2]
1000f154:	4921      	ldr	r1, [pc, #132]	; (1000f1dc <gapm_get_dev_config_cmd_handler+0xcc>)
1000f156:	71da      	strb	r2, [r3, #7]
1000f158:	8021      	strh	r1, [r4, #0]
1000f15a:	4661      	mov	r1, ip
1000f15c:	721e      	strb	r6, [r3, #8]
1000f15e:	7199      	strb	r1, [r3, #6]
1000f160:	1c18      	adds	r0, r3, #0
1000f162:	2109      	movs	r1, #9
1000f164:	4b1e      	ldr	r3, [pc, #120]	; (1000f1e0 <gapm_get_dev_config_cmd_handler+0xd0>)
1000f166:	80a5      	strh	r5, [r4, #4]
1000f168:	4798      	blx	r3
1000f16a:	1c38      	adds	r0, r7, #0
1000f16c:	4b1d      	ldr	r3, [pc, #116]	; (1000f1e4 <gapm_get_dev_config_cmd_handler+0xd4>)
1000f16e:	4798      	blx	r3
1000f170:	783b      	ldrb	r3, [r7, #0]
1000f172:	20e2      	movs	r0, #226	; 0xe2
1000f174:	9301      	str	r3, [sp, #4]
1000f176:	2b00      	cmp	r3, #0
1000f178:	d127      	bne.n	1000f1ca <gapm_get_dev_config_cmd_handler+0xba>
1000f17a:	8821      	ldrh	r1, [r4, #0]
1000f17c:	4a1a      	ldr	r2, [pc, #104]	; (1000f1e8 <gapm_get_dev_config_cmd_handler+0xd8>)
1000f17e:	68a7      	ldr	r7, [r4, #8]
1000f180:	3b01      	subs	r3, #1
1000f182:	4291      	cmp	r1, r2
1000f184:	d001      	beq.n	1000f18a <gapm_get_dev_config_cmd_handler+0x7a>
1000f186:	8023      	strh	r3, [r4, #0]
1000f188:	e01a      	b.n	1000f1c0 <gapm_get_dev_config_cmd_handler+0xb0>
1000f18a:	8063      	strh	r3, [r4, #2]
1000f18c:	9b00      	ldr	r3, [sp, #0]
1000f18e:	1c39      	adds	r1, r7, #0
1000f190:	1c58      	adds	r0, r3, #1
1000f192:	1c32      	adds	r2, r6, #0
1000f194:	4b15      	ldr	r3, [pc, #84]	; (1000f1ec <gapm_get_dev_config_cmd_handler+0xdc>)
1000f196:	4798      	blx	r3
1000f198:	79bb      	ldrb	r3, [r7, #6]
1000f19a:	9a00      	ldr	r2, [sp, #0]
1000f19c:	7013      	strb	r3, [r2, #0]
1000f19e:	23d0      	movs	r3, #208	; 0xd0
1000f1a0:	011b      	lsls	r3, r3, #4
1000f1a2:	8023      	strh	r3, [r4, #0]
1000f1a4:	ab02      	add	r3, sp, #8
1000f1a6:	80a5      	strh	r5, [r4, #4]
1000f1a8:	1ddd      	adds	r5, r3, #7
1000f1aa:	466b      	mov	r3, sp
1000f1ac:	791b      	ldrb	r3, [r3, #4]
1000f1ae:	1c28      	adds	r0, r5, #0
1000f1b0:	702b      	strb	r3, [r5, #0]
1000f1b2:	4b0c      	ldr	r3, [pc, #48]	; (1000f1e4 <gapm_get_dev_config_cmd_handler+0xd4>)
1000f1b4:	4798      	blx	r3
1000f1b6:	782b      	ldrb	r3, [r5, #0]
1000f1b8:	20d0      	movs	r0, #208	; 0xd0
1000f1ba:	2b00      	cmp	r3, #0
1000f1bc:	d105      	bne.n	1000f1ca <gapm_get_dev_config_cmd_handler+0xba>
1000f1be:	68a7      	ldr	r7, [r4, #8]
1000f1c0:	783b      	ldrb	r3, [r7, #0]
1000f1c2:	7878      	ldrb	r0, [r7, #1]
1000f1c4:	2b06      	cmp	r3, #6
1000f1c6:	d000      	beq.n	1000f1ca <gapm_get_dev_config_cmd_handler+0xba>
1000f1c8:	20e2      	movs	r0, #226	; 0xe2
1000f1ca:	b005      	add	sp, #20
1000f1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f1ce:	46c0      	nop			; (mov r8, r8)
1000f1d0:	10015f7c 	.word	0x10015f7c
1000f1d4:	100162ec 	.word	0x100162ec
1000f1d8:	10015f70 	.word	0x10015f70
1000f1dc:	00000d08 	.word	0x00000d08
1000f1e0:	1000e3c1 	.word	0x1000e3c1
1000f1e4:	1000e425 	.word	0x1000e425
1000f1e8:	0000ffff 	.word	0x0000ffff
1000f1ec:	10010e6f 	.word	0x10010e6f

1000f1f0 <gapm_cancel_cmd_handler>:
1000f1f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000f1f2:	4916      	ldr	r1, [pc, #88]	; (1000f24c <gapm_cancel_cmd_handler+0x5c>)
1000f1f4:	4816      	ldr	r0, [pc, #88]	; (1000f250 <gapm_cancel_cmd_handler+0x60>)
1000f1f6:	880c      	ldrh	r4, [r1, #0]
1000f1f8:	8809      	ldrh	r1, [r1, #0]
1000f1fa:	466b      	mov	r3, sp
1000f1fc:	0a09      	lsrs	r1, r1, #8
1000f1fe:	7141      	strb	r1, [r0, #5]
1000f200:	2102      	movs	r1, #2
1000f202:	2203      	movs	r2, #3
1000f204:	7201      	strb	r1, [r0, #8]
1000f206:	21d0      	movs	r1, #208	; 0xd0
1000f208:	1ddd      	adds	r5, r3, #7
1000f20a:	2300      	movs	r3, #0
1000f20c:	7104      	strb	r4, [r0, #4]
1000f20e:	4c11      	ldr	r4, [pc, #68]	; (1000f254 <gapm_cancel_cmd_handler+0x64>)
1000f210:	7002      	strb	r2, [r0, #0]
1000f212:	0109      	lsls	r1, r1, #4
1000f214:	320a      	adds	r2, #10
1000f216:	702b      	strb	r3, [r5, #0]
1000f218:	7042      	strb	r2, [r0, #1]
1000f21a:	7082      	strb	r2, [r0, #2]
1000f21c:	70c3      	strb	r3, [r0, #3]
1000f21e:	8021      	strh	r1, [r4, #0]
1000f220:	80a2      	strh	r2, [r4, #4]
1000f222:	71c3      	strb	r3, [r0, #7]
1000f224:	3a0c      	subs	r2, #12
1000f226:	2109      	movs	r1, #9
1000f228:	4b0b      	ldr	r3, [pc, #44]	; (1000f258 <gapm_cancel_cmd_handler+0x68>)
1000f22a:	7182      	strb	r2, [r0, #6]
1000f22c:	4798      	blx	r3
1000f22e:	1c28      	adds	r0, r5, #0
1000f230:	4b0a      	ldr	r3, [pc, #40]	; (1000f25c <gapm_cancel_cmd_handler+0x6c>)
1000f232:	4798      	blx	r3
1000f234:	7828      	ldrb	r0, [r5, #0]
1000f236:	2800      	cmp	r0, #0
1000f238:	d001      	beq.n	1000f23e <gapm_cancel_cmd_handler+0x4e>
1000f23a:	20e2      	movs	r0, #226	; 0xe2
1000f23c:	e004      	b.n	1000f248 <gapm_cancel_cmd_handler+0x58>
1000f23e:	68a3      	ldr	r3, [r4, #8]
1000f240:	785b      	ldrb	r3, [r3, #1]
1000f242:	2b44      	cmp	r3, #68	; 0x44
1000f244:	d000      	beq.n	1000f248 <gapm_cancel_cmd_handler+0x58>
1000f246:	1c18      	adds	r0, r3, #0
1000f248:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000f24a:	46c0      	nop			; (mov r8, r8)
1000f24c:	10015f7c 	.word	0x10015f7c
1000f250:	100162ec 	.word	0x100162ec
1000f254:	10015f70 	.word	0x10015f70
1000f258:	1000e3c1 	.word	0x1000e3c1
1000f25c:	1000e425 	.word	0x1000e425

1000f260 <gapm_dev_bdaddr_ind_handler>:
1000f260:	b538      	push	{r3, r4, r5, lr}
1000f262:	1c05      	adds	r5, r0, #0
1000f264:	1c0c      	adds	r4, r1, #0
1000f266:	1c48      	adds	r0, r1, #1
1000f268:	2206      	movs	r2, #6
1000f26a:	1c29      	adds	r1, r5, #0
1000f26c:	4b02      	ldr	r3, [pc, #8]	; (1000f278 <gapm_dev_bdaddr_ind_handler+0x18>)
1000f26e:	4798      	blx	r3
1000f270:	79ab      	ldrb	r3, [r5, #6]
1000f272:	2000      	movs	r0, #0
1000f274:	7023      	strb	r3, [r4, #0]
1000f276:	bd38      	pop	{r3, r4, r5, pc}
1000f278:	10010e6f 	.word	0x10010e6f

1000f27c <gapm_cmp_evt>:
1000f27c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f27e:	7803      	ldrb	r3, [r0, #0]
1000f280:	7845      	ldrb	r5, [r0, #1]
1000f282:	3b0c      	subs	r3, #12
1000f284:	1e18      	subs	r0, r3, #0
1000f286:	280b      	cmp	r0, #11
1000f288:	d900      	bls.n	1000f28c <gapm_cmp_evt+0x10>
1000f28a:	e08d      	b.n	1000f3a8 <gapm_cmp_evt+0x12c>
1000f28c:	1c0c      	adds	r4, r1, #0
1000f28e:	f000 fd5f 	bl	1000fd50 <__gnu_thumb1_case_uqi>
1000f292:	1952      	.short	0x1952
1000f294:	068b1919 	.word	0x068b1919
1000f298:	8b595906 	.word	0x8b595906
1000f29c:	0d8b      	.short	0x0d8b
1000f29e:	2300      	movs	r3, #0
1000f2a0:	2d45      	cmp	r5, #69	; 0x45
1000f2a2:	d000      	beq.n	1000f2a6 <gapm_cmp_evt+0x2a>
1000f2a4:	1c2b      	adds	r3, r5, #0
1000f2a6:	7023      	strb	r3, [r4, #0]
1000f2a8:	2002      	movs	r0, #2
1000f2aa:	e07e      	b.n	1000f3aa <gapm_cmp_evt+0x12e>
1000f2ac:	203b      	movs	r0, #59	; 0x3b
1000f2ae:	2d00      	cmp	r5, #0
1000f2b0:	d100      	bne.n	1000f2b4 <gapm_cmp_evt+0x38>
1000f2b2:	e07a      	b.n	1000f3aa <gapm_cmp_evt+0x12e>
1000f2b4:	700d      	strb	r5, [r1, #0]
1000f2b6:	1c48      	adds	r0, r1, #1
1000f2b8:	2210      	movs	r2, #16
1000f2ba:	2100      	movs	r1, #0
1000f2bc:	4b3b      	ldr	r3, [pc, #236]	; (1000f3ac <gapm_cmp_evt+0x130>)
1000f2be:	4798      	blx	r3
1000f2c0:	200f      	movs	r0, #15
1000f2c2:	e072      	b.n	1000f3aa <gapm_cmp_evt+0x12e>
1000f2c4:	2d00      	cmp	r5, #0
1000f2c6:	d134      	bne.n	1000f332 <gapm_cmp_evt+0xb6>
1000f2c8:	4b39      	ldr	r3, [pc, #228]	; (1000f3b0 <gapm_cmp_evt+0x134>)
1000f2ca:	4798      	blx	r3
1000f2cc:	1e43      	subs	r3, r0, #1
1000f2ce:	b2db      	uxtb	r3, r3
1000f2d0:	1c28      	adds	r0, r5, #0
1000f2d2:	2b06      	cmp	r3, #6
1000f2d4:	d869      	bhi.n	1000f3aa <gapm_cmp_evt+0x12e>
1000f2d6:	466b      	mov	r3, sp
1000f2d8:	4e36      	ldr	r6, [pc, #216]	; (1000f3b4 <gapm_cmp_evt+0x138>)
1000f2da:	1dd9      	adds	r1, r3, #7
1000f2dc:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000f2de:	4b36      	ldr	r3, [pc, #216]	; (1000f3b8 <gapm_cmp_evt+0x13c>)
1000f2e0:	4798      	blx	r3
1000f2e2:	2312      	movs	r3, #18
1000f2e4:	4358      	muls	r0, r3
1000f2e6:	4935      	ldr	r1, [pc, #212]	; (1000f3bc <gapm_cmp_evt+0x140>)
1000f2e8:	1809      	adds	r1, r1, r0
1000f2ea:	1c0b      	adds	r3, r1, #0
1000f2ec:	894a      	ldrh	r2, [r1, #10]
1000f2ee:	3308      	adds	r3, #8
1000f2f0:	8122      	strh	r2, [r4, #8]
1000f2f2:	784f      	ldrb	r7, [r1, #1]
1000f2f4:	72a5      	strb	r5, [r4, #10]
1000f2f6:	7027      	strb	r7, [r4, #0]
1000f2f8:	898a      	ldrh	r2, [r1, #12]
1000f2fa:	1c60      	adds	r0, r4, #1
1000f2fc:	81a2      	strh	r2, [r4, #12]
1000f2fe:	88db      	ldrh	r3, [r3, #6]
1000f300:	3102      	adds	r1, #2
1000f302:	81e3      	strh	r3, [r4, #14]
1000f304:	89cb      	ldrh	r3, [r1, #14]
1000f306:	2206      	movs	r2, #6
1000f308:	8223      	strh	r3, [r4, #16]
1000f30a:	4b2d      	ldr	r3, [pc, #180]	; (1000f3c0 <gapm_cmp_evt+0x144>)
1000f30c:	4798      	blx	r3
1000f30e:	2f00      	cmp	r7, #0
1000f310:	d00a      	beq.n	1000f328 <gapm_cmp_evt+0xac>
1000f312:	79a3      	ldrb	r3, [r4, #6]
1000f314:	223f      	movs	r2, #63	; 0x3f
1000f316:	1c19      	adds	r1, r3, #0
1000f318:	3501      	adds	r5, #1
1000f31a:	4391      	bics	r1, r2
1000f31c:	29c0      	cmp	r1, #192	; 0xc0
1000f31e:	d003      	beq.n	1000f328 <gapm_cmp_evt+0xac>
1000f320:	065b      	lsls	r3, r3, #25
1000f322:	0fdb      	lsrs	r3, r3, #31
1000f324:	3502      	adds	r5, #2
1000f326:	1aed      	subs	r5, r5, r3
1000f328:	2301      	movs	r3, #1
1000f32a:	425b      	negs	r3, r3
1000f32c:	7025      	strb	r5, [r4, #0]
1000f32e:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000f330:	e038      	b.n	1000f3a4 <gapm_cmp_evt+0x128>
1000f332:	700d      	strb	r5, [r1, #0]
1000f334:	e004      	b.n	1000f340 <gapm_cmp_evt+0xc4>
1000f336:	2300      	movs	r3, #0
1000f338:	2d45      	cmp	r5, #69	; 0x45
1000f33a:	d000      	beq.n	1000f33e <gapm_cmp_evt+0xc2>
1000f33c:	1c2b      	adds	r3, r5, #0
1000f33e:	7023      	strb	r3, [r4, #0]
1000f340:	2003      	movs	r0, #3
1000f342:	e032      	b.n	1000f3aa <gapm_cmp_evt+0x12e>
1000f344:	4e1b      	ldr	r6, [pc, #108]	; (1000f3b4 <gapm_cmp_evt+0x138>)
1000f346:	2100      	movs	r1, #0
1000f348:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000f34a:	4b1b      	ldr	r3, [pc, #108]	; (1000f3b8 <gapm_cmp_evt+0x13c>)
1000f34c:	4798      	blx	r3
1000f34e:	2807      	cmp	r0, #7
1000f350:	d818      	bhi.n	1000f384 <gapm_cmp_evt+0x108>
1000f352:	2301      	movs	r3, #1
1000f354:	425b      	negs	r3, r3
1000f356:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000f358:	3313      	adds	r3, #19
1000f35a:	4358      	muls	r0, r3
1000f35c:	4917      	ldr	r1, [pc, #92]	; (1000f3bc <gapm_cmp_evt+0x140>)
1000f35e:	1809      	adds	r1, r1, r0
1000f360:	1c0b      	adds	r3, r1, #0
1000f362:	894a      	ldrh	r2, [r1, #10]
1000f364:	3308      	adds	r3, #8
1000f366:	8122      	strh	r2, [r4, #8]
1000f368:	784a      	ldrb	r2, [r1, #1]
1000f36a:	72a5      	strb	r5, [r4, #10]
1000f36c:	7022      	strb	r2, [r4, #0]
1000f36e:	898a      	ldrh	r2, [r1, #12]
1000f370:	1c60      	adds	r0, r4, #1
1000f372:	81a2      	strh	r2, [r4, #12]
1000f374:	88db      	ldrh	r3, [r3, #6]
1000f376:	3102      	adds	r1, #2
1000f378:	81e3      	strh	r3, [r4, #14]
1000f37a:	89cb      	ldrh	r3, [r1, #14]
1000f37c:	2206      	movs	r2, #6
1000f37e:	8223      	strh	r3, [r4, #16]
1000f380:	4b0f      	ldr	r3, [pc, #60]	; (1000f3c0 <gapm_cmp_evt+0x144>)
1000f382:	4798      	blx	r3
1000f384:	2200      	movs	r2, #0
1000f386:	7823      	ldrb	r3, [r4, #0]
1000f388:	4293      	cmp	r3, r2
1000f38a:	d00a      	beq.n	1000f3a2 <gapm_cmp_evt+0x126>
1000f38c:	79a3      	ldrb	r3, [r4, #6]
1000f38e:	323f      	adds	r2, #63	; 0x3f
1000f390:	1c19      	adds	r1, r3, #0
1000f392:	4391      	bics	r1, r2
1000f394:	3a3e      	subs	r2, #62	; 0x3e
1000f396:	29c0      	cmp	r1, #192	; 0xc0
1000f398:	d003      	beq.n	1000f3a2 <gapm_cmp_evt+0x126>
1000f39a:	065b      	lsls	r3, r3, #25
1000f39c:	0fdb      	lsrs	r3, r3, #31
1000f39e:	3202      	adds	r2, #2
1000f3a0:	1ad2      	subs	r2, r2, r3
1000f3a2:	7022      	strb	r2, [r4, #0]
1000f3a4:	2005      	movs	r0, #5
1000f3a6:	e000      	b.n	1000f3aa <gapm_cmp_evt+0x12e>
1000f3a8:	2000      	movs	r0, #0
1000f3aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f3ac:	10010e81 	.word	0x10010e81
1000f3b0:	1000e5cd 	.word	0x1000e5cd
1000f3b4:	1001600e 	.word	0x1001600e
1000f3b8:	1000e591 	.word	0x1000e591
1000f3bc:	10015f7e 	.word	0x10015f7e
1000f3c0:	10010e6f 	.word	0x10010e6f

1000f3c4 <gapm_start_adv_cmd_handler>:
1000f3c4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f3c6:	b089      	sub	sp, #36	; 0x24
1000f3c8:	9303      	str	r3, [sp, #12]
1000f3ca:	ab0e      	add	r3, sp, #56	; 0x38
1000f3cc:	9102      	str	r1, [sp, #8]
1000f3ce:	cb02      	ldmia	r3!, {r1}
1000f3d0:	aa08      	add	r2, sp, #32
1000f3d2:	881b      	ldrh	r3, [r3, #0]
1000f3d4:	4e3c      	ldr	r6, [pc, #240]	; (1000f4c8 <gapm_start_adv_cmd_handler+0x104>)
1000f3d6:	9300      	str	r3, [sp, #0]
1000f3d8:	ab10      	add	r3, sp, #64	; 0x40
1000f3da:	881b      	ldrh	r3, [r3, #0]
1000f3dc:	240d      	movs	r4, #13
1000f3de:	469c      	mov	ip, r3
1000f3e0:	ab11      	add	r3, sp, #68	; 0x44
1000f3e2:	781b      	ldrb	r3, [r3, #0]
1000f3e4:	9304      	str	r3, [sp, #16]
1000f3e6:	ab12      	add	r3, sp, #72	; 0x48
1000f3e8:	781b      	ldrb	r3, [r3, #0]
1000f3ea:	9305      	str	r3, [sp, #20]
1000f3ec:	ab13      	add	r3, sp, #76	; 0x4c
1000f3ee:	781b      	ldrb	r3, [r3, #0]
1000f3f0:	9306      	str	r3, [sp, #24]
1000f3f2:	ab14      	add	r3, sp, #80	; 0x50
1000f3f4:	781b      	ldrb	r3, [r3, #0]
1000f3f6:	9301      	str	r3, [sp, #4]
1000f3f8:	2319      	movs	r3, #25
1000f3fa:	189b      	adds	r3, r3, r2
1000f3fc:	7fdd      	ldrb	r5, [r3, #31]
1000f3fe:	ab18      	add	r3, sp, #96	; 0x60
1000f400:	881f      	ldrh	r7, [r3, #0]
1000f402:	ab19      	add	r3, sp, #100	; 0x64
1000f404:	781b      	ldrb	r3, [r3, #0]
1000f406:	8832      	ldrh	r2, [r6, #0]
1000f408:	9307      	str	r3, [sp, #28]
1000f40a:	4b30      	ldr	r3, [pc, #192]	; (1000f4cc <gapm_start_adv_cmd_handler+0x108>)
1000f40c:	8836      	ldrh	r6, [r6, #0]
1000f40e:	711a      	strb	r2, [r3, #4]
1000f410:	466a      	mov	r2, sp
1000f412:	7a12      	ldrb	r2, [r2, #8]
1000f414:	701c      	strb	r4, [r3, #0]
1000f416:	705c      	strb	r4, [r3, #1]
1000f418:	709c      	strb	r4, [r3, #2]
1000f41a:	725a      	strb	r2, [r3, #9]
1000f41c:	2400      	movs	r4, #0
1000f41e:	466a      	mov	r2, sp
1000f420:	0a36      	lsrs	r6, r6, #8
1000f422:	70dc      	strb	r4, [r3, #3]
1000f424:	7218      	strb	r0, [r3, #8]
1000f426:	729c      	strb	r4, [r3, #10]
1000f428:	715e      	strb	r6, [r3, #5]
1000f42a:	72dc      	strb	r4, [r3, #11]
1000f42c:	7812      	ldrb	r2, [r2, #0]
1000f42e:	380e      	subs	r0, #14
1000f430:	731a      	strb	r2, [r3, #12]
1000f432:	9a00      	ldr	r2, [sp, #0]
1000f434:	0a14      	lsrs	r4, r2, #8
1000f436:	4662      	mov	r2, ip
1000f438:	739a      	strb	r2, [r3, #14]
1000f43a:	4662      	mov	r2, ip
1000f43c:	735c      	strb	r4, [r3, #13]
1000f43e:	0a14      	lsrs	r4, r2, #8
1000f440:	466a      	mov	r2, sp
1000f442:	7c12      	ldrb	r2, [r2, #16]
1000f444:	73dc      	strb	r4, [r3, #15]
1000f446:	741a      	strb	r2, [r3, #16]
1000f448:	1c1c      	adds	r4, r3, #0
1000f44a:	2801      	cmp	r0, #1
1000f44c:	d809      	bhi.n	1000f462 <gapm_start_adv_cmd_handler+0x9e>
1000f44e:	2900      	cmp	r1, #0
1000f450:	d003      	beq.n	1000f45a <gapm_start_adv_cmd_handler+0x96>
1000f452:	481f      	ldr	r0, [pc, #124]	; (1000f4d0 <gapm_start_adv_cmd_handler+0x10c>)
1000f454:	2206      	movs	r2, #6
1000f456:	4b1f      	ldr	r3, [pc, #124]	; (1000f4d4 <gapm_start_adv_cmd_handler+0x110>)
1000f458:	4798      	blx	r3
1000f45a:	466b      	mov	r3, sp
1000f45c:	7b1b      	ldrb	r3, [r3, #12]
1000f45e:	75e3      	strb	r3, [r4, #23]
1000f460:	e014      	b.n	1000f48c <gapm_start_adv_cmd_handler+0xc8>
1000f462:	466b      	mov	r3, sp
1000f464:	7d1b      	ldrb	r3, [r3, #20]
1000f466:	9915      	ldr	r1, [sp, #84]	; 0x54
1000f468:	7463      	strb	r3, [r4, #17]
1000f46a:	466b      	mov	r3, sp
1000f46c:	7e1b      	ldrb	r3, [r3, #24]
1000f46e:	9a01      	ldr	r2, [sp, #4]
1000f470:	74a3      	strb	r3, [r4, #18]
1000f472:	466b      	mov	r3, sp
1000f474:	791b      	ldrb	r3, [r3, #4]
1000f476:	4818      	ldr	r0, [pc, #96]	; (1000f4d8 <gapm_start_adv_cmd_handler+0x114>)
1000f478:	4e16      	ldr	r6, [pc, #88]	; (1000f4d4 <gapm_start_adv_cmd_handler+0x110>)
1000f47a:	74e3      	strb	r3, [r4, #19]
1000f47c:	47b0      	blx	r6
1000f47e:	1c23      	adds	r3, r4, #0
1000f480:	4816      	ldr	r0, [pc, #88]	; (1000f4dc <gapm_start_adv_cmd_handler+0x118>)
1000f482:	3330      	adds	r3, #48	; 0x30
1000f484:	9917      	ldr	r1, [sp, #92]	; 0x5c
1000f486:	1c2a      	adds	r2, r5, #0
1000f488:	701d      	strb	r5, [r3, #0]
1000f48a:	47b0      	blx	r6
1000f48c:	1c22      	adds	r2, r4, #0
1000f48e:	23a5      	movs	r3, #165	; 0xa5
1000f490:	3250      	adds	r2, #80	; 0x50
1000f492:	7013      	strb	r3, [r2, #0]
1000f494:	1c22      	adds	r2, r4, #0
1000f496:	3251      	adds	r2, #81	; 0x51
1000f498:	7013      	strb	r3, [r2, #0]
1000f49a:	1c23      	adds	r3, r4, #0
1000f49c:	1c22      	adds	r2, r4, #0
1000f49e:	3352      	adds	r3, #82	; 0x52
1000f4a0:	701f      	strb	r7, [r3, #0]
1000f4a2:	3253      	adds	r2, #83	; 0x53
1000f4a4:	0a3b      	lsrs	r3, r7, #8
1000f4a6:	7013      	strb	r3, [r2, #0]
1000f4a8:	466a      	mov	r2, sp
1000f4aa:	1c23      	adds	r3, r4, #0
1000f4ac:	7f12      	ldrb	r2, [r2, #28]
1000f4ae:	3354      	adds	r3, #84	; 0x54
1000f4b0:	701a      	strb	r2, [r3, #0]
1000f4b2:	234d      	movs	r3, #77	; 0x4d
1000f4b4:	2500      	movs	r5, #0
1000f4b6:	71a3      	strb	r3, [r4, #6]
1000f4b8:	1c20      	adds	r0, r4, #0
1000f4ba:	2155      	movs	r1, #85	; 0x55
1000f4bc:	4b08      	ldr	r3, [pc, #32]	; (1000f4e0 <gapm_start_adv_cmd_handler+0x11c>)
1000f4be:	71e5      	strb	r5, [r4, #7]
1000f4c0:	4798      	blx	r3
1000f4c2:	1c28      	adds	r0, r5, #0
1000f4c4:	b009      	add	sp, #36	; 0x24
1000f4c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f4c8:	10015f7c 	.word	0x10015f7c
1000f4cc:	100162ec 	.word	0x100162ec
1000f4d0:	100162fd 	.word	0x100162fd
1000f4d4:	10010e6f 	.word	0x10010e6f
1000f4d8:	10016300 	.word	0x10016300
1000f4dc:	1001631d 	.word	0x1001631d
1000f4e0:	1000e3c1 	.word	0x1000e3c1

1000f4e4 <get_gap_local_addr_type>:
1000f4e4:	4b04      	ldr	r3, [pc, #16]	; (1000f4f8 <get_gap_local_addr_type+0x14>)
1000f4e6:	2001      	movs	r0, #1
1000f4e8:	791b      	ldrb	r3, [r3, #4]
1000f4ea:	2b02      	cmp	r3, #2
1000f4ec:	d003      	beq.n	1000f4f6 <get_gap_local_addr_type+0x12>
1000f4ee:	3b03      	subs	r3, #3
1000f4f0:	4258      	negs	r0, r3
1000f4f2:	4158      	adcs	r0, r3
1000f4f4:	0040      	lsls	r0, r0, #1
1000f4f6:	4770      	bx	lr
1000f4f8:	1001600e 	.word	0x1001600e

1000f4fc <gapm_adv_report_evt_handler>:
1000f4fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f4fe:	7843      	ldrb	r3, [r0, #1]
1000f500:	1c05      	adds	r5, r0, #0
1000f502:	9301      	str	r3, [sp, #4]
1000f504:	466b      	mov	r3, sp
1000f506:	1c0c      	adds	r4, r1, #0
1000f508:	791b      	ldrb	r3, [r3, #4]
1000f50a:	7806      	ldrb	r6, [r0, #0]
1000f50c:	2206      	movs	r2, #6
1000f50e:	704b      	strb	r3, [r1, #1]
1000f510:	1c88      	adds	r0, r1, #2
1000f512:	4f1b      	ldr	r7, [pc, #108]	; (1000f580 <gapm_adv_report_evt_handler+0x84>)
1000f514:	1ca9      	adds	r1, r5, #2
1000f516:	47b8      	blx	r7
1000f518:	1c20      	adds	r0, r4, #0
1000f51a:	1c29      	adds	r1, r5, #0
1000f51c:	7a2a      	ldrb	r2, [r5, #8]
1000f51e:	3008      	adds	r0, #8
1000f520:	77c2      	strb	r2, [r0, #31]
1000f522:	3109      	adds	r1, #9
1000f524:	3528      	adds	r5, #40	; 0x28
1000f526:	47b8      	blx	r7
1000f528:	782b      	ldrb	r3, [r5, #0]
1000f52a:	b25a      	sxtb	r2, r3
1000f52c:	2a00      	cmp	r2, #0
1000f52e:	da01      	bge.n	1000f534 <gapm_adv_report_evt_handler+0x38>
1000f530:	3301      	adds	r3, #1
1000f532:	b2db      	uxtb	r3, r3
1000f534:	1c22      	adds	r2, r4, #0
1000f536:	3228      	adds	r2, #40	; 0x28
1000f538:	7013      	strb	r3, [r2, #0]
1000f53a:	2200      	movs	r2, #0
1000f53c:	9b01      	ldr	r3, [sp, #4]
1000f53e:	4293      	cmp	r3, r2
1000f540:	d00a      	beq.n	1000f558 <gapm_adv_report_evt_handler+0x5c>
1000f542:	79e3      	ldrb	r3, [r4, #7]
1000f544:	323f      	adds	r2, #63	; 0x3f
1000f546:	1c19      	adds	r1, r3, #0
1000f548:	4391      	bics	r1, r2
1000f54a:	3a3e      	subs	r2, #62	; 0x3e
1000f54c:	29c0      	cmp	r1, #192	; 0xc0
1000f54e:	d003      	beq.n	1000f558 <gapm_adv_report_evt_handler+0x5c>
1000f550:	065b      	lsls	r3, r3, #25
1000f552:	0fdb      	lsrs	r3, r3, #31
1000f554:	3202      	adds	r2, #2
1000f556:	1ad2      	subs	r2, r2, r3
1000f558:	7062      	strb	r2, [r4, #1]
1000f55a:	2e04      	cmp	r6, #4
1000f55c:	d80f      	bhi.n	1000f57e <gapm_adv_report_evt_handler+0x82>
1000f55e:	1c30      	adds	r0, r6, #0
1000f560:	f000 fbf6 	bl	1000fd50 <__gnu_thumb1_case_uqi>
1000f564:	09070503 	.word	0x09070503
1000f568:	0b          	.byte	0x0b
1000f569:	00          	.byte	0x00
1000f56a:	2300      	movs	r3, #0
1000f56c:	e006      	b.n	1000f57c <gapm_adv_report_evt_handler+0x80>
1000f56e:	2301      	movs	r3, #1
1000f570:	e004      	b.n	1000f57c <gapm_adv_report_evt_handler+0x80>
1000f572:	2302      	movs	r3, #2
1000f574:	e002      	b.n	1000f57c <gapm_adv_report_evt_handler+0x80>
1000f576:	2303      	movs	r3, #3
1000f578:	e000      	b.n	1000f57c <gapm_adv_report_evt_handler+0x80>
1000f57a:	2305      	movs	r3, #5
1000f57c:	7023      	strb	r3, [r4, #0]
1000f57e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f580:	10010e6f 	.word	0x10010e6f

1000f584 <gapm_resolv_addr_cmd_handler>:
1000f584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f586:	2314      	movs	r3, #20
1000f588:	4c12      	ldr	r4, [pc, #72]	; (1000f5d4 <gapm_resolv_addr_cmd_handler+0x50>)
1000f58a:	1c17      	adds	r7, r2, #0
1000f58c:	7023      	strb	r3, [r4, #0]
1000f58e:	3b07      	subs	r3, #7
1000f590:	7063      	strb	r3, [r4, #1]
1000f592:	70a3      	strb	r3, [r4, #2]
1000f594:	2300      	movs	r3, #0
1000f596:	70e3      	strb	r3, [r4, #3]
1000f598:	4b0f      	ldr	r3, [pc, #60]	; (1000f5d8 <gapm_resolv_addr_cmd_handler+0x54>)
1000f59a:	1c05      	adds	r5, r0, #0
1000f59c:	881a      	ldrh	r2, [r3, #0]
1000f59e:	881b      	ldrh	r3, [r3, #0]
1000f5a0:	4e0e      	ldr	r6, [pc, #56]	; (1000f5dc <gapm_resolv_addr_cmd_handler+0x58>)
1000f5a2:	0a1b      	lsrs	r3, r3, #8
1000f5a4:	7163      	strb	r3, [r4, #5]
1000f5a6:	2317      	movs	r3, #23
1000f5a8:	012d      	lsls	r5, r5, #4
1000f5aa:	7122      	strb	r2, [r4, #4]
1000f5ac:	7260      	strb	r0, [r4, #9]
1000f5ae:	2206      	movs	r2, #6
1000f5b0:	480b      	ldr	r0, [pc, #44]	; (1000f5e0 <gapm_resolv_addr_cmd_handler+0x5c>)
1000f5b2:	7223      	strb	r3, [r4, #8]
1000f5b4:	47b0      	blx	r6
1000f5b6:	1c39      	adds	r1, r7, #0
1000f5b8:	1c2a      	adds	r2, r5, #0
1000f5ba:	480a      	ldr	r0, [pc, #40]	; (1000f5e4 <gapm_resolv_addr_cmd_handler+0x60>)
1000f5bc:	47b0      	blx	r6
1000f5be:	1c29      	adds	r1, r5, #0
1000f5c0:	3110      	adds	r1, #16
1000f5c2:	1c0b      	adds	r3, r1, #0
1000f5c4:	3b08      	subs	r3, #8
1000f5c6:	71a3      	strb	r3, [r4, #6]
1000f5c8:	121b      	asrs	r3, r3, #8
1000f5ca:	71e3      	strb	r3, [r4, #7]
1000f5cc:	1c20      	adds	r0, r4, #0
1000f5ce:	4b06      	ldr	r3, [pc, #24]	; (1000f5e8 <gapm_resolv_addr_cmd_handler+0x64>)
1000f5d0:	4798      	blx	r3
1000f5d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f5d4:	100162ec 	.word	0x100162ec
1000f5d8:	10015f7c 	.word	0x10015f7c
1000f5dc:	10010e6f 	.word	0x10010e6f
1000f5e0:	100162f6 	.word	0x100162f6
1000f5e4:	100162fc 	.word	0x100162fc
1000f5e8:	1000e3c1 	.word	0x1000e3c1

1000f5ec <gapm_addr_solved_ind_handler>:
1000f5ec:	b570      	push	{r4, r5, r6, lr}
1000f5ee:	1c04      	adds	r4, r0, #0
1000f5f0:	1c08      	adds	r0, r1, #0
1000f5f2:	1c0d      	adds	r5, r1, #0
1000f5f4:	4e05      	ldr	r6, [pc, #20]	; (1000f60c <gapm_addr_solved_ind_handler+0x20>)
1000f5f6:	1c21      	adds	r1, r4, #0
1000f5f8:	2206      	movs	r2, #6
1000f5fa:	3011      	adds	r0, #17
1000f5fc:	47b0      	blx	r6
1000f5fe:	1c68      	adds	r0, r5, #1
1000f600:	1da1      	adds	r1, r4, #6
1000f602:	2210      	movs	r2, #16
1000f604:	47b0      	blx	r6
1000f606:	2300      	movs	r3, #0
1000f608:	702b      	strb	r3, [r5, #0]
1000f60a:	bd70      	pop	{r4, r5, r6, pc}
1000f60c:	10010e6f 	.word	0x10010e6f

1000f610 <gapm_profile_added_ind_handler>:
1000f610:	b510      	push	{r4, lr}
1000f612:	7843      	ldrb	r3, [r0, #1]
1000f614:	7902      	ldrb	r2, [r0, #4]
1000f616:	7944      	ldrb	r4, [r0, #5]
1000f618:	7800      	ldrb	r0, [r0, #0]
1000f61a:	021b      	lsls	r3, r3, #8
1000f61c:	4303      	orrs	r3, r0
1000f61e:	2b1b      	cmp	r3, #27
1000f620:	d104      	bne.n	1000f62c <gapm_profile_added_ind_handler+0x1c>
1000f622:	2300      	movs	r3, #0
1000f624:	700b      	strb	r3, [r1, #0]
1000f626:	0223      	lsls	r3, r4, #8
1000f628:	4313      	orrs	r3, r2
1000f62a:	804b      	strh	r3, [r1, #2]
1000f62c:	203b      	movs	r0, #59	; 0x3b
1000f62e:	bd10      	pop	{r4, pc}

1000f630 <gattc_read_req_ind_parser>:
1000f630:	7843      	ldrb	r3, [r0, #1]
1000f632:	7802      	ldrb	r2, [r0, #0]
1000f634:	021b      	lsls	r3, r3, #8
1000f636:	4313      	orrs	r3, r2
1000f638:	804b      	strh	r3, [r1, #2]
1000f63a:	4770      	bx	lr

1000f63c <gattc_write_req_ind_parser>:
1000f63c:	b508      	push	{r3, lr}
1000f63e:	1c13      	adds	r3, r2, #0
1000f640:	0a00      	lsrs	r0, r0, #8
1000f642:	8010      	strh	r0, [r2, #0]
1000f644:	784a      	ldrb	r2, [r1, #1]
1000f646:	7808      	ldrb	r0, [r1, #0]
1000f648:	0212      	lsls	r2, r2, #8
1000f64a:	4302      	orrs	r2, r0
1000f64c:	805a      	strh	r2, [r3, #2]
1000f64e:	78ca      	ldrb	r2, [r1, #3]
1000f650:	7888      	ldrb	r0, [r1, #2]
1000f652:	0212      	lsls	r2, r2, #8
1000f654:	4302      	orrs	r2, r0
1000f656:	809a      	strh	r2, [r3, #4]
1000f658:	794a      	ldrb	r2, [r1, #5]
1000f65a:	7908      	ldrb	r0, [r1, #4]
1000f65c:	0212      	lsls	r2, r2, #8
1000f65e:	4302      	orrs	r2, r0
1000f660:	80da      	strh	r2, [r3, #6]
1000f662:	3308      	adds	r3, #8
1000f664:	1c18      	adds	r0, r3, #0
1000f666:	3106      	adds	r1, #6
1000f668:	4b01      	ldr	r3, [pc, #4]	; (1000f670 <gattc_write_req_ind_parser+0x34>)
1000f66a:	4798      	blx	r3
1000f66c:	bd08      	pop	{r3, pc}
1000f66e:	46c0      	nop			; (mov r8, r8)
1000f670:	10010e6f 	.word	0x10010e6f

1000f674 <gattc_att_info_req_parser>:
1000f674:	7843      	ldrb	r3, [r0, #1]
1000f676:	7802      	ldrb	r2, [r0, #0]
1000f678:	021b      	lsls	r3, r3, #8
1000f67a:	4313      	orrs	r3, r2
1000f67c:	800b      	strh	r3, [r1, #0]
1000f67e:	4770      	bx	lr

1000f680 <gattc_read_cfm>:
1000f680:	b538      	push	{r3, r4, r5, lr}
1000f682:	2514      	movs	r5, #20
1000f684:	1c1c      	adds	r4, r3, #0
1000f686:	4b14      	ldr	r3, [pc, #80]	; (1000f6d8 <gattc_read_cfm+0x58>)
1000f688:	70d9      	strb	r1, [r3, #3]
1000f68a:	4914      	ldr	r1, [pc, #80]	; (1000f6dc <gattc_read_cfm+0x5c>)
1000f68c:	701d      	strb	r5, [r3, #0]
1000f68e:	3d08      	subs	r5, #8
1000f690:	705d      	strb	r5, [r3, #1]
1000f692:	709d      	strb	r5, [r3, #2]
1000f694:	880d      	ldrh	r5, [r1, #0]
1000f696:	8809      	ldrh	r1, [r1, #0]
1000f698:	7218      	strb	r0, [r3, #8]
1000f69a:	0a09      	lsrs	r1, r1, #8
1000f69c:	7159      	strb	r1, [r3, #5]
1000f69e:	0a00      	lsrs	r0, r0, #8
1000f6a0:	0a21      	lsrs	r1, r4, #8
1000f6a2:	711d      	strb	r5, [r3, #4]
1000f6a4:	7258      	strb	r0, [r3, #9]
1000f6a6:	729c      	strb	r4, [r3, #10]
1000f6a8:	72d9      	strb	r1, [r3, #11]
1000f6aa:	731a      	strb	r2, [r3, #12]
1000f6ac:	1c1d      	adds	r5, r3, #0
1000f6ae:	2c00      	cmp	r4, #0
1000f6b0:	d007      	beq.n	1000f6c2 <gattc_read_cfm+0x42>
1000f6b2:	9904      	ldr	r1, [sp, #16]
1000f6b4:	1c22      	adds	r2, r4, #0
1000f6b6:	480a      	ldr	r0, [pc, #40]	; (1000f6e0 <gattc_read_cfm+0x60>)
1000f6b8:	4b0a      	ldr	r3, [pc, #40]	; (1000f6e4 <gattc_read_cfm+0x64>)
1000f6ba:	340d      	adds	r4, #13
1000f6bc:	4798      	blx	r3
1000f6be:	b2a1      	uxth	r1, r4
1000f6c0:	e001      	b.n	1000f6c6 <gattc_read_cfm+0x46>
1000f6c2:	210e      	movs	r1, #14
1000f6c4:	735c      	strb	r4, [r3, #13]
1000f6c6:	1c0b      	adds	r3, r1, #0
1000f6c8:	3b08      	subs	r3, #8
1000f6ca:	71ab      	strb	r3, [r5, #6]
1000f6cc:	121b      	asrs	r3, r3, #8
1000f6ce:	71eb      	strb	r3, [r5, #7]
1000f6d0:	1c28      	adds	r0, r5, #0
1000f6d2:	4b05      	ldr	r3, [pc, #20]	; (1000f6e8 <gattc_read_cfm+0x68>)
1000f6d4:	4798      	blx	r3
1000f6d6:	bd38      	pop	{r3, r4, r5, pc}
1000f6d8:	100162ec 	.word	0x100162ec
1000f6dc:	10015f7c 	.word	0x10015f7c
1000f6e0:	100162f9 	.word	0x100162f9
1000f6e4:	10010e6f 	.word	0x10010e6f
1000f6e8:	1000e3c1 	.word	0x1000e3c1

1000f6ec <gattc_write_cfm>:
1000f6ec:	4b0d      	ldr	r3, [pc, #52]	; (1000f724 <gattc_write_cfm+0x38>)
1000f6ee:	b510      	push	{r4, lr}
1000f6f0:	729a      	strb	r2, [r3, #10]
1000f6f2:	2203      	movs	r2, #3
1000f6f4:	2416      	movs	r4, #22
1000f6f6:	719a      	strb	r2, [r3, #6]
1000f6f8:	2200      	movs	r2, #0
1000f6fa:	70d9      	strb	r1, [r3, #3]
1000f6fc:	490a      	ldr	r1, [pc, #40]	; (1000f728 <gattc_write_cfm+0x3c>)
1000f6fe:	701c      	strb	r4, [r3, #0]
1000f700:	3c0a      	subs	r4, #10
1000f702:	705c      	strb	r4, [r3, #1]
1000f704:	709c      	strb	r4, [r3, #2]
1000f706:	880c      	ldrh	r4, [r1, #0]
1000f708:	8809      	ldrh	r1, [r1, #0]
1000f70a:	7218      	strb	r0, [r3, #8]
1000f70c:	0a09      	lsrs	r1, r1, #8
1000f70e:	0a00      	lsrs	r0, r0, #8
1000f710:	711c      	strb	r4, [r3, #4]
1000f712:	7159      	strb	r1, [r3, #5]
1000f714:	7258      	strb	r0, [r3, #9]
1000f716:	71da      	strb	r2, [r3, #7]
1000f718:	1c18      	adds	r0, r3, #0
1000f71a:	210b      	movs	r1, #11
1000f71c:	4b03      	ldr	r3, [pc, #12]	; (1000f72c <gattc_write_cfm+0x40>)
1000f71e:	4798      	blx	r3
1000f720:	bd10      	pop	{r4, pc}
1000f722:	46c0      	nop			; (mov r8, r8)
1000f724:	100162ec 	.word	0x100162ec
1000f728:	10015f7c 	.word	0x10015f7c
1000f72c:	1000e3c1 	.word	0x1000e3c1

1000f730 <gattc_att_info_cfm>:
1000f730:	b538      	push	{r3, r4, r5, lr}
1000f732:	4c0e      	ldr	r4, [pc, #56]	; (1000f76c <gattc_att_info_cfm+0x3c>)
1000f734:	2518      	movs	r5, #24
1000f736:	7323      	strb	r3, [r4, #12]
1000f738:	2305      	movs	r3, #5
1000f73a:	71a3      	strb	r3, [r4, #6]
1000f73c:	2300      	movs	r3, #0
1000f73e:	70e1      	strb	r1, [r4, #3]
1000f740:	490b      	ldr	r1, [pc, #44]	; (1000f770 <gattc_att_info_cfm+0x40>)
1000f742:	7025      	strb	r5, [r4, #0]
1000f744:	3d0c      	subs	r5, #12
1000f746:	7065      	strb	r5, [r4, #1]
1000f748:	70a5      	strb	r5, [r4, #2]
1000f74a:	880d      	ldrh	r5, [r1, #0]
1000f74c:	8809      	ldrh	r1, [r1, #0]
1000f74e:	7220      	strb	r0, [r4, #8]
1000f750:	0a09      	lsrs	r1, r1, #8
1000f752:	0a00      	lsrs	r0, r0, #8
1000f754:	7161      	strb	r1, [r4, #5]
1000f756:	7260      	strb	r0, [r4, #9]
1000f758:	72a2      	strb	r2, [r4, #10]
1000f75a:	71e3      	strb	r3, [r4, #7]
1000f75c:	0a12      	lsrs	r2, r2, #8
1000f75e:	1c20      	adds	r0, r4, #0
1000f760:	210d      	movs	r1, #13
1000f762:	4b04      	ldr	r3, [pc, #16]	; (1000f774 <gattc_att_info_cfm+0x44>)
1000f764:	7125      	strb	r5, [r4, #4]
1000f766:	72e2      	strb	r2, [r4, #11]
1000f768:	4798      	blx	r3
1000f76a:	bd38      	pop	{r3, r4, r5, pc}
1000f76c:	100162ec 	.word	0x100162ec
1000f770:	10015f7c 	.word	0x10015f7c
1000f774:	1000e3c1 	.word	0x1000e3c1

1000f778 <gattc_send_evt_cmd_handler>:
1000f778:	b570      	push	{r4, r5, r6, lr}
1000f77a:	2610      	movs	r6, #16
1000f77c:	ac04      	add	r4, sp, #16
1000f77e:	8825      	ldrh	r5, [r4, #0]
1000f780:	4c15      	ldr	r4, [pc, #84]	; (1000f7d8 <gattc_send_evt_cmd_handler+0x60>)
1000f782:	70e2      	strb	r2, [r4, #3]
1000f784:	4a15      	ldr	r2, [pc, #84]	; (1000f7dc <gattc_send_evt_cmd_handler+0x64>)
1000f786:	7026      	strb	r6, [r4, #0]
1000f788:	3e04      	subs	r6, #4
1000f78a:	7066      	strb	r6, [r4, #1]
1000f78c:	70a6      	strb	r6, [r4, #2]
1000f78e:	8816      	ldrh	r6, [r2, #0]
1000f790:	8812      	ldrh	r2, [r2, #0]
1000f792:	7220      	strb	r0, [r4, #8]
1000f794:	0a12      	lsrs	r2, r2, #8
1000f796:	7162      	strb	r2, [r4, #5]
1000f798:	4a11      	ldr	r2, [pc, #68]	; (1000f7e0 <gattc_send_evt_cmd_handler+0x68>)
1000f79a:	7321      	strb	r1, [r4, #12]
1000f79c:	8812      	ldrh	r2, [r2, #0]
1000f79e:	73a5      	strb	r5, [r4, #14]
1000f7a0:	3201      	adds	r2, #1
1000f7a2:	7262      	strb	r2, [r4, #9]
1000f7a4:	1212      	asrs	r2, r2, #8
1000f7a6:	72a2      	strb	r2, [r4, #10]
1000f7a8:	2200      	movs	r2, #0
1000f7aa:	72e2      	strb	r2, [r4, #11]
1000f7ac:	0a0a      	lsrs	r2, r1, #8
1000f7ae:	7362      	strb	r2, [r4, #13]
1000f7b0:	0a2a      	lsrs	r2, r5, #8
1000f7b2:	73e2      	strb	r2, [r4, #15]
1000f7b4:	1c19      	adds	r1, r3, #0
1000f7b6:	1c2a      	adds	r2, r5, #0
1000f7b8:	4b0a      	ldr	r3, [pc, #40]	; (1000f7e4 <gattc_send_evt_cmd_handler+0x6c>)
1000f7ba:	3510      	adds	r5, #16
1000f7bc:	480a      	ldr	r0, [pc, #40]	; (1000f7e8 <gattc_send_evt_cmd_handler+0x70>)
1000f7be:	7126      	strb	r6, [r4, #4]
1000f7c0:	4798      	blx	r3
1000f7c2:	b2a9      	uxth	r1, r5
1000f7c4:	1c0b      	adds	r3, r1, #0
1000f7c6:	3b08      	subs	r3, #8
1000f7c8:	71a3      	strb	r3, [r4, #6]
1000f7ca:	121b      	asrs	r3, r3, #8
1000f7cc:	71e3      	strb	r3, [r4, #7]
1000f7ce:	1c20      	adds	r0, r4, #0
1000f7d0:	4b06      	ldr	r3, [pc, #24]	; (1000f7ec <gattc_send_evt_cmd_handler+0x74>)
1000f7d2:	4798      	blx	r3
1000f7d4:	bd70      	pop	{r4, r5, r6, pc}
1000f7d6:	46c0      	nop			; (mov r8, r8)
1000f7d8:	100162ec 	.word	0x100162ec
1000f7dc:	10015f7c 	.word	0x10015f7c
1000f7e0:	10015260 	.word	0x10015260
1000f7e4:	10010e6f 	.word	0x10010e6f
1000f7e8:	100162fc 	.word	0x100162fc
1000f7ec:	1000e3c1 	.word	0x1000e3c1

1000f7f0 <gattc_event_cfm_handler>:
1000f7f0:	220e      	movs	r2, #14
1000f7f2:	b508      	push	{r3, lr}
1000f7f4:	4b0b      	ldr	r3, [pc, #44]	; (1000f824 <gattc_event_cfm_handler+0x34>)
1000f7f6:	701a      	strb	r2, [r3, #0]
1000f7f8:	3a02      	subs	r2, #2
1000f7fa:	705a      	strb	r2, [r3, #1]
1000f7fc:	709a      	strb	r2, [r3, #2]
1000f7fe:	4a0a      	ldr	r2, [pc, #40]	; (1000f828 <gattc_event_cfm_handler+0x38>)
1000f800:	70d8      	strb	r0, [r3, #3]
1000f802:	8810      	ldrh	r0, [r2, #0]
1000f804:	8812      	ldrh	r2, [r2, #0]
1000f806:	7219      	strb	r1, [r3, #8]
1000f808:	0a12      	lsrs	r2, r2, #8
1000f80a:	715a      	strb	r2, [r3, #5]
1000f80c:	2202      	movs	r2, #2
1000f80e:	719a      	strb	r2, [r3, #6]
1000f810:	2200      	movs	r2, #0
1000f812:	0a09      	lsrs	r1, r1, #8
1000f814:	7118      	strb	r0, [r3, #4]
1000f816:	7259      	strb	r1, [r3, #9]
1000f818:	71da      	strb	r2, [r3, #7]
1000f81a:	1c18      	adds	r0, r3, #0
1000f81c:	210a      	movs	r1, #10
1000f81e:	4b03      	ldr	r3, [pc, #12]	; (1000f82c <gattc_event_cfm_handler+0x3c>)
1000f820:	4798      	blx	r3
1000f822:	bd08      	pop	{r3, pc}
1000f824:	100162ec 	.word	0x100162ec
1000f828:	10015f7c 	.word	0x10015f7c
1000f82c:	1000e3c1 	.word	0x1000e3c1

1000f830 <gattc_disc_svc_ind_parser>:
1000f830:	b570      	push	{r4, r5, r6, lr}
1000f832:	1c15      	adds	r5, r2, #0
1000f834:	0a00      	lsrs	r0, r0, #8
1000f836:	8010      	strh	r0, [r2, #0]
1000f838:	784b      	ldrb	r3, [r1, #1]
1000f83a:	780a      	ldrb	r2, [r1, #0]
1000f83c:	021b      	lsls	r3, r3, #8
1000f83e:	4313      	orrs	r3, r2
1000f840:	806b      	strh	r3, [r5, #2]
1000f842:	78cb      	ldrb	r3, [r1, #3]
1000f844:	788a      	ldrb	r2, [r1, #2]
1000f846:	021b      	lsls	r3, r3, #8
1000f848:	4313      	orrs	r3, r2
1000f84a:	80ab      	strh	r3, [r5, #4]
1000f84c:	790e      	ldrb	r6, [r1, #4]
1000f84e:	4b05      	ldr	r3, [pc, #20]	; (1000f864 <gattc_disc_svc_ind_parser+0x34>)
1000f850:	1c30      	adds	r0, r6, #0
1000f852:	1c0c      	adds	r4, r1, #0
1000f854:	4798      	blx	r3
1000f856:	1c32      	adds	r2, r6, #0
1000f858:	71a8      	strb	r0, [r5, #6]
1000f85a:	1d61      	adds	r1, r4, #5
1000f85c:	1de8      	adds	r0, r5, #7
1000f85e:	4b02      	ldr	r3, [pc, #8]	; (1000f868 <gattc_disc_svc_ind_parser+0x38>)
1000f860:	4798      	blx	r3
1000f862:	bd70      	pop	{r4, r5, r6, pc}
1000f864:	1000d701 	.word	0x1000d701
1000f868:	10010e6f 	.word	0x10010e6f

1000f86c <gattc_disc_svc_incl_ind_parser>:
1000f86c:	b570      	push	{r4, r5, r6, lr}
1000f86e:	1c15      	adds	r5, r2, #0
1000f870:	0a00      	lsrs	r0, r0, #8
1000f872:	8010      	strh	r0, [r2, #0]
1000f874:	784b      	ldrb	r3, [r1, #1]
1000f876:	780a      	ldrb	r2, [r1, #0]
1000f878:	021b      	lsls	r3, r3, #8
1000f87a:	4313      	orrs	r3, r2
1000f87c:	806b      	strh	r3, [r5, #2]
1000f87e:	78cb      	ldrb	r3, [r1, #3]
1000f880:	788a      	ldrb	r2, [r1, #2]
1000f882:	021b      	lsls	r3, r3, #8
1000f884:	4313      	orrs	r3, r2
1000f886:	80ab      	strh	r3, [r5, #4]
1000f888:	794b      	ldrb	r3, [r1, #5]
1000f88a:	790a      	ldrb	r2, [r1, #4]
1000f88c:	021b      	lsls	r3, r3, #8
1000f88e:	4313      	orrs	r3, r2
1000f890:	80eb      	strh	r3, [r5, #6]
1000f892:	798e      	ldrb	r6, [r1, #6]
1000f894:	4b05      	ldr	r3, [pc, #20]	; (1000f8ac <gattc_disc_svc_incl_ind_parser+0x40>)
1000f896:	1c30      	adds	r0, r6, #0
1000f898:	1c0c      	adds	r4, r1, #0
1000f89a:	4798      	blx	r3
1000f89c:	7228      	strb	r0, [r5, #8]
1000f89e:	1c28      	adds	r0, r5, #0
1000f8a0:	1c32      	adds	r2, r6, #0
1000f8a2:	1de1      	adds	r1, r4, #7
1000f8a4:	4b02      	ldr	r3, [pc, #8]	; (1000f8b0 <gattc_disc_svc_incl_ind_parser+0x44>)
1000f8a6:	3009      	adds	r0, #9
1000f8a8:	4798      	blx	r3
1000f8aa:	bd70      	pop	{r4, r5, r6, pc}
1000f8ac:	1000d701 	.word	0x1000d701
1000f8b0:	10010e6f 	.word	0x10010e6f

1000f8b4 <gattc_disc_char_ind_parser>:
1000f8b4:	b570      	push	{r4, r5, r6, lr}
1000f8b6:	1c15      	adds	r5, r2, #0
1000f8b8:	0a00      	lsrs	r0, r0, #8
1000f8ba:	8010      	strh	r0, [r2, #0]
1000f8bc:	784b      	ldrb	r3, [r1, #1]
1000f8be:	780a      	ldrb	r2, [r1, #0]
1000f8c0:	021b      	lsls	r3, r3, #8
1000f8c2:	4313      	orrs	r3, r2
1000f8c4:	806b      	strh	r3, [r5, #2]
1000f8c6:	78cb      	ldrb	r3, [r1, #3]
1000f8c8:	788a      	ldrb	r2, [r1, #2]
1000f8ca:	021b      	lsls	r3, r3, #8
1000f8cc:	4313      	orrs	r3, r2
1000f8ce:	80ab      	strh	r3, [r5, #4]
1000f8d0:	790b      	ldrb	r3, [r1, #4]
1000f8d2:	1c0c      	adds	r4, r1, #0
1000f8d4:	71ab      	strb	r3, [r5, #6]
1000f8d6:	794e      	ldrb	r6, [r1, #5]
1000f8d8:	4b05      	ldr	r3, [pc, #20]	; (1000f8f0 <gattc_disc_char_ind_parser+0x3c>)
1000f8da:	1c30      	adds	r0, r6, #0
1000f8dc:	4798      	blx	r3
1000f8de:	71e8      	strb	r0, [r5, #7]
1000f8e0:	1c28      	adds	r0, r5, #0
1000f8e2:	1c32      	adds	r2, r6, #0
1000f8e4:	1da1      	adds	r1, r4, #6
1000f8e6:	4b03      	ldr	r3, [pc, #12]	; (1000f8f4 <gattc_disc_char_ind_parser+0x40>)
1000f8e8:	3008      	adds	r0, #8
1000f8ea:	4798      	blx	r3
1000f8ec:	bd70      	pop	{r4, r5, r6, pc}
1000f8ee:	46c0      	nop			; (mov r8, r8)
1000f8f0:	1000d701 	.word	0x1000d701
1000f8f4:	10010e6f 	.word	0x10010e6f

1000f8f8 <gattc_disc_char_desc_ind_parser>:
1000f8f8:	b570      	push	{r4, r5, r6, lr}
1000f8fa:	1c15      	adds	r5, r2, #0
1000f8fc:	0a00      	lsrs	r0, r0, #8
1000f8fe:	8010      	strh	r0, [r2, #0]
1000f900:	784b      	ldrb	r3, [r1, #1]
1000f902:	780a      	ldrb	r2, [r1, #0]
1000f904:	021b      	lsls	r3, r3, #8
1000f906:	4313      	orrs	r3, r2
1000f908:	806b      	strh	r3, [r5, #2]
1000f90a:	788e      	ldrb	r6, [r1, #2]
1000f90c:	4b05      	ldr	r3, [pc, #20]	; (1000f924 <gattc_disc_char_desc_ind_parser+0x2c>)
1000f90e:	1c30      	adds	r0, r6, #0
1000f910:	1c0c      	adds	r4, r1, #0
1000f912:	4798      	blx	r3
1000f914:	1c32      	adds	r2, r6, #0
1000f916:	7128      	strb	r0, [r5, #4]
1000f918:	1ce1      	adds	r1, r4, #3
1000f91a:	1d68      	adds	r0, r5, #5
1000f91c:	4b02      	ldr	r3, [pc, #8]	; (1000f928 <gattc_disc_char_desc_ind_parser+0x30>)
1000f91e:	4798      	blx	r3
1000f920:	bd70      	pop	{r4, r5, r6, pc}
1000f922:	46c0      	nop			; (mov r8, r8)
1000f924:	1000d701 	.word	0x1000d701
1000f928:	10010e6f 	.word	0x10010e6f

1000f92c <gattc_event_ind_and_notification_parser>:
1000f92c:	b510      	push	{r4, lr}
1000f92e:	780c      	ldrb	r4, [r1, #0]
1000f930:	1c13      	adds	r3, r2, #0
1000f932:	2c12      	cmp	r4, #18
1000f934:	d10e      	bne.n	1000f954 <gattc_event_ind_and_notification_parser+0x28>
1000f936:	0a00      	lsrs	r0, r0, #8
1000f938:	8010      	strh	r0, [r2, #0]
1000f93a:	788a      	ldrb	r2, [r1, #2]
1000f93c:	709a      	strb	r2, [r3, #2]
1000f93e:	7948      	ldrb	r0, [r1, #5]
1000f940:	790c      	ldrb	r4, [r1, #4]
1000f942:	0200      	lsls	r0, r0, #8
1000f944:	4320      	orrs	r0, r4
1000f946:	8098      	strh	r0, [r3, #4]
1000f948:	3106      	adds	r1, #6
1000f94a:	1d98      	adds	r0, r3, #6
1000f94c:	4b0b      	ldr	r3, [pc, #44]	; (1000f97c <gattc_event_ind_and_notification_parser+0x50>)
1000f94e:	4798      	blx	r3
1000f950:	221b      	movs	r2, #27
1000f952:	e010      	b.n	1000f976 <gattc_event_ind_and_notification_parser+0x4a>
1000f954:	2200      	movs	r2, #0
1000f956:	2c13      	cmp	r4, #19
1000f958:	d10d      	bne.n	1000f976 <gattc_event_ind_and_notification_parser+0x4a>
1000f95a:	0a00      	lsrs	r0, r0, #8
1000f95c:	8018      	strh	r0, [r3, #0]
1000f95e:	788a      	ldrb	r2, [r1, #2]
1000f960:	709a      	strb	r2, [r3, #2]
1000f962:	7908      	ldrb	r0, [r1, #4]
1000f964:	78cc      	ldrb	r4, [r1, #3]
1000f966:	0200      	lsls	r0, r0, #8
1000f968:	4320      	orrs	r0, r4
1000f96a:	8098      	strh	r0, [r3, #4]
1000f96c:	3106      	adds	r1, #6
1000f96e:	1d98      	adds	r0, r3, #6
1000f970:	4b02      	ldr	r3, [pc, #8]	; (1000f97c <gattc_event_ind_and_notification_parser+0x50>)
1000f972:	4798      	blx	r3
1000f974:	221c      	movs	r2, #28
1000f976:	1c10      	adds	r0, r2, #0
1000f978:	bd10      	pop	{r4, pc}
1000f97a:	46c0      	nop			; (mov r8, r8)
1000f97c:	10010e6f 	.word	0x10010e6f

1000f980 <gattc_complete_evt_handler>:
1000f980:	b500      	push	{lr}
1000f982:	0a00      	lsrs	r0, r0, #8
1000f984:	8010      	strh	r0, [r2, #0]
1000f986:	7808      	ldrb	r0, [r1, #0]
1000f988:	7090      	strb	r0, [r2, #2]
1000f98a:	784b      	ldrb	r3, [r1, #1]
1000f98c:	3801      	subs	r0, #1
1000f98e:	70d3      	strb	r3, [r2, #3]
1000f990:	2813      	cmp	r0, #19
1000f992:	d82c      	bhi.n	1000f9ee <gattc_complete_evt_handler+0x6e>
1000f994:	f000 f9dc 	bl	1000fd50 <__gnu_thumb1_case_uqi>
1000f998:	0a0a0a0c 	.word	0x0a0a0a0c
1000f99c:	210a0a0a 	.word	0x210a0a0a
1000f9a0:	111f2121 	.word	0x111f2121
1000f9a4:	2b111111 	.word	0x2b111111
1000f9a8:	2919132b 	.word	0x2919132b
1000f9ac:	2017      	movs	r0, #23
1000f9ae:	e01f      	b.n	1000f9f0 <gattc_complete_evt_handler+0x70>
1000f9b0:	2024      	movs	r0, #36	; 0x24
1000f9b2:	2b00      	cmp	r3, #0
1000f9b4:	d11c      	bne.n	1000f9f0 <gattc_complete_evt_handler+0x70>
1000f9b6:	3017      	adds	r0, #23
1000f9b8:	e01a      	b.n	1000f9f0 <gattc_complete_evt_handler+0x70>
1000f9ba:	2025      	movs	r0, #37	; 0x25
1000f9bc:	e018      	b.n	1000f9f0 <gattc_complete_evt_handler+0x70>
1000f9be:	4a0d      	ldr	r2, [pc, #52]	; (1000f9f4 <gattc_complete_evt_handler+0x74>)
1000f9c0:	201d      	movs	r0, #29
1000f9c2:	6813      	ldr	r3, [r2, #0]
1000f9c4:	3b01      	subs	r3, #1
1000f9c6:	6013      	str	r3, [r2, #0]
1000f9c8:	e012      	b.n	1000f9f0 <gattc_complete_evt_handler+0x70>
1000f9ca:	4a0a      	ldr	r2, [pc, #40]	; (1000f9f4 <gattc_complete_evt_handler+0x74>)
1000f9cc:	201e      	movs	r0, #30
1000f9ce:	6813      	ldr	r3, [r2, #0]
1000f9d0:	3b01      	subs	r3, #1
1000f9d2:	6013      	str	r3, [r2, #0]
1000f9d4:	e00c      	b.n	1000f9f0 <gattc_complete_evt_handler+0x70>
1000f9d6:	2019      	movs	r0, #25
1000f9d8:	e00a      	b.n	1000f9f0 <gattc_complete_evt_handler+0x70>
1000f9da:	203b      	movs	r0, #59	; 0x3b
1000f9dc:	2b00      	cmp	r3, #0
1000f9de:	d007      	beq.n	1000f9f0 <gattc_complete_evt_handler+0x70>
1000f9e0:	2182      	movs	r1, #130	; 0x82
1000f9e2:	0089      	lsls	r1, r1, #2
1000f9e4:	5453      	strb	r3, [r2, r1]
1000f9e6:	3823      	subs	r0, #35	; 0x23
1000f9e8:	e002      	b.n	1000f9f0 <gattc_complete_evt_handler+0x70>
1000f9ea:	2021      	movs	r0, #33	; 0x21
1000f9ec:	e000      	b.n	1000f9f0 <gattc_complete_evt_handler+0x70>
1000f9ee:	2000      	movs	r0, #0
1000f9f0:	bd00      	pop	{pc}
1000f9f2:	46c0      	nop			; (mov r8, r8)
1000f9f4:	10015264 	.word	0x10015264

1000f9f8 <gattc_event_mtu_changed_ind_parser>:
1000f9f8:	0a00      	lsrs	r0, r0, #8
1000f9fa:	8010      	strh	r0, [r2, #0]
1000f9fc:	784b      	ldrb	r3, [r1, #1]
1000f9fe:	7809      	ldrb	r1, [r1, #0]
1000fa00:	021b      	lsls	r3, r3, #8
1000fa02:	430b      	orrs	r3, r1
1000fa04:	8053      	strh	r3, [r2, #2]
1000fa06:	4770      	bx	lr

1000fa08 <gattc_read_ind_parser>:
1000fa08:	0a00      	lsrs	r0, r0, #8
1000fa0a:	b508      	push	{r3, lr}
1000fa0c:	8010      	strh	r0, [r2, #0]
1000fa0e:	1c13      	adds	r3, r2, #0
1000fa10:	2282      	movs	r2, #130	; 0x82
1000fa12:	2000      	movs	r0, #0
1000fa14:	0092      	lsls	r2, r2, #2
1000fa16:	5498      	strb	r0, [r3, r2]
1000fa18:	784a      	ldrb	r2, [r1, #1]
1000fa1a:	7808      	ldrb	r0, [r1, #0]
1000fa1c:	0212      	lsls	r2, r2, #8
1000fa1e:	4302      	orrs	r2, r0
1000fa20:	805a      	strh	r2, [r3, #2]
1000fa22:	78ca      	ldrb	r2, [r1, #3]
1000fa24:	7888      	ldrb	r0, [r1, #2]
1000fa26:	0212      	lsls	r2, r2, #8
1000fa28:	4302      	orrs	r2, r0
1000fa2a:	80da      	strh	r2, [r3, #6]
1000fa2c:	794a      	ldrb	r2, [r1, #5]
1000fa2e:	7908      	ldrb	r0, [r1, #4]
1000fa30:	0212      	lsls	r2, r2, #8
1000fa32:	4302      	orrs	r2, r0
1000fa34:	809a      	strh	r2, [r3, #4]
1000fa36:	3308      	adds	r3, #8
1000fa38:	1c18      	adds	r0, r3, #0
1000fa3a:	3106      	adds	r1, #6
1000fa3c:	4b01      	ldr	r3, [pc, #4]	; (1000fa44 <gattc_read_ind_parser+0x3c>)
1000fa3e:	4798      	blx	r3
1000fa40:	bd08      	pop	{r3, pc}
1000fa42:	46c0      	nop			; (mov r8, r8)
1000fa44:	10010e6f 	.word	0x10010e6f

1000fa48 <gattc_svc_changed_cfg_ind_parser>:
1000fa48:	0a00      	lsrs	r0, r0, #8
1000fa4a:	8010      	strh	r0, [r2, #0]
1000fa4c:	784b      	ldrb	r3, [r1, #1]
1000fa4e:	7809      	ldrb	r1, [r1, #0]
1000fa50:	021b      	lsls	r3, r3, #8
1000fa52:	430b      	orrs	r3, r1
1000fa54:	8053      	strh	r3, [r2, #2]
1000fa56:	4770      	bx	lr

1000fa58 <init_gattc_task_module>:
1000fa58:	2300      	movs	r3, #0
1000fa5a:	4a02      	ldr	r2, [pc, #8]	; (1000fa64 <init_gattc_task_module+0xc>)
1000fa5c:	8013      	strh	r3, [r2, #0]
1000fa5e:	4a02      	ldr	r2, [pc, #8]	; (1000fa68 <init_gattc_task_module+0x10>)
1000fa60:	8013      	strh	r3, [r2, #0]
1000fa62:	4770      	bx	lr
1000fa64:	1001525e 	.word	0x1001525e
1000fa68:	10015260 	.word	0x10015260

1000fa6c <gattm_add_svc_req_handler>:
1000fa6c:	2200      	movs	r2, #0
1000fa6e:	210b      	movs	r1, #11
1000fa70:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fa72:	1c04      	adds	r4, r0, #0
1000fa74:	7943      	ldrb	r3, [r0, #5]
1000fa76:	b085      	sub	sp, #20
1000fa78:	9301      	str	r3, [sp, #4]
1000fa7a:	ab02      	add	r3, sp, #8
1000fa7c:	71da      	strb	r2, [r3, #7]
1000fa7e:	4b37      	ldr	r3, [pc, #220]	; (1000fb5c <gattm_add_svc_req_handler+0xf0>)
1000fa80:	7059      	strb	r1, [r3, #1]
1000fa82:	7099      	strb	r1, [r3, #2]
1000fa84:	4936      	ldr	r1, [pc, #216]	; (1000fb60 <gattm_add_svc_req_handler+0xf4>)
1000fa86:	701a      	strb	r2, [r3, #0]
1000fa88:	8808      	ldrh	r0, [r1, #0]
1000fa8a:	8809      	ldrh	r1, [r1, #0]
1000fa8c:	70da      	strb	r2, [r3, #3]
1000fa8e:	0a09      	lsrs	r1, r1, #8
1000fa90:	7118      	strb	r0, [r3, #4]
1000fa92:	7159      	strb	r1, [r3, #5]
1000fa94:	8821      	ldrh	r1, [r4, #0]
1000fa96:	7219      	strb	r1, [r3, #8]
1000fa98:	8821      	ldrh	r1, [r4, #0]
1000fa9a:	0a09      	lsrs	r1, r1, #8
1000fa9c:	7259      	strb	r1, [r3, #9]
1000fa9e:	8861      	ldrh	r1, [r4, #2]
1000faa0:	7299      	strb	r1, [r3, #10]
1000faa2:	8861      	ldrh	r1, [r4, #2]
1000faa4:	0a09      	lsrs	r1, r1, #8
1000faa6:	72d9      	strb	r1, [r3, #11]
1000faa8:	7921      	ldrb	r1, [r4, #4]
1000faaa:	7319      	strb	r1, [r3, #12]
1000faac:	4669      	mov	r1, sp
1000faae:	7909      	ldrb	r1, [r1, #4]
1000fab0:	7359      	strb	r1, [r3, #13]
1000fab2:	18a1      	adds	r1, r4, r2
1000fab4:	7988      	ldrb	r0, [r1, #6]
1000fab6:	1899      	adds	r1, r3, r2
1000fab8:	3201      	adds	r2, #1
1000faba:	7388      	strb	r0, [r1, #14]
1000fabc:	2a10      	cmp	r2, #16
1000fabe:	d1f8      	bne.n	1000fab2 <gattm_add_svc_req_handler+0x46>
1000fac0:	1c27      	adds	r7, r4, #0
1000fac2:	2300      	movs	r3, #0
1000fac4:	251e      	movs	r5, #30
1000fac6:	3716      	adds	r7, #22
1000fac8:	9300      	str	r3, [sp, #0]
1000faca:	9b00      	ldr	r3, [sp, #0]
1000facc:	9a01      	ldr	r2, [sp, #4]
1000face:	4e23      	ldr	r6, [pc, #140]	; (1000fb5c <gattm_add_svc_req_handler+0xf0>)
1000fad0:	4293      	cmp	r3, r2
1000fad2:	da21      	bge.n	1000fb18 <gattm_add_svc_req_handler+0xac>
1000fad4:	1c39      	adds	r1, r7, #0
1000fad6:	1970      	adds	r0, r6, r5
1000fad8:	2210      	movs	r2, #16
1000fada:	4b22      	ldr	r3, [pc, #136]	; (1000fb64 <gattm_add_svc_req_handler+0xf8>)
1000fadc:	4798      	blx	r3
1000fade:	1c2b      	adds	r3, r5, #0
1000fae0:	8a3a      	ldrh	r2, [r7, #16]
1000fae2:	3310      	adds	r3, #16
1000fae4:	b29b      	uxth	r3, r3
1000fae6:	54f2      	strb	r2, [r6, r3]
1000fae8:	1c2b      	adds	r3, r5, #0
1000faea:	8a3a      	ldrh	r2, [r7, #16]
1000faec:	3311      	adds	r3, #17
1000faee:	b29b      	uxth	r3, r3
1000faf0:	0a12      	lsrs	r2, r2, #8
1000faf2:	54f2      	strb	r2, [r6, r3]
1000faf4:	1c2a      	adds	r2, r5, #0
1000faf6:	1c2b      	adds	r3, r5, #0
1000faf8:	8a79      	ldrh	r1, [r7, #18]
1000fafa:	3212      	adds	r2, #18
1000fafc:	b292      	uxth	r2, r2
1000fafe:	54b1      	strb	r1, [r6, r2]
1000fb00:	8a7a      	ldrh	r2, [r7, #18]
1000fb02:	3313      	adds	r3, #19
1000fb04:	b29b      	uxth	r3, r3
1000fb06:	0a12      	lsrs	r2, r2, #8
1000fb08:	54f2      	strb	r2, [r6, r3]
1000fb0a:	9b00      	ldr	r3, [sp, #0]
1000fb0c:	3514      	adds	r5, #20
1000fb0e:	3301      	adds	r3, #1
1000fb10:	b2ad      	uxth	r5, r5
1000fb12:	9300      	str	r3, [sp, #0]
1000fb14:	3714      	adds	r7, #20
1000fb16:	e7d8      	b.n	1000faca <gattm_add_svc_req_handler+0x5e>
1000fb18:	2114      	movs	r1, #20
1000fb1a:	4d13      	ldr	r5, [pc, #76]	; (1000fb68 <gattm_add_svc_req_handler+0xfc>)
1000fb1c:	4b13      	ldr	r3, [pc, #76]	; (1000fb6c <gattm_add_svc_req_handler+0x100>)
1000fb1e:	4351      	muls	r1, r2
1000fb20:	802b      	strh	r3, [r5, #0]
1000fb22:	230b      	movs	r3, #11
1000fb24:	311e      	adds	r1, #30
1000fb26:	80ab      	strh	r3, [r5, #4]
1000fb28:	1c0b      	adds	r3, r1, #0
1000fb2a:	3b08      	subs	r3, #8
1000fb2c:	71b3      	strb	r3, [r6, #6]
1000fb2e:	121b      	asrs	r3, r3, #8
1000fb30:	71f3      	strb	r3, [r6, #7]
1000fb32:	1c30      	adds	r0, r6, #0
1000fb34:	4b0e      	ldr	r3, [pc, #56]	; (1000fb70 <gattm_add_svc_req_handler+0x104>)
1000fb36:	4798      	blx	r3
1000fb38:	ab02      	add	r3, sp, #8
1000fb3a:	1dde      	adds	r6, r3, #7
1000fb3c:	1c30      	adds	r0, r6, #0
1000fb3e:	4b0d      	ldr	r3, [pc, #52]	; (1000fb74 <gattm_add_svc_req_handler+0x108>)
1000fb40:	4798      	blx	r3
1000fb42:	7833      	ldrb	r3, [r6, #0]
1000fb44:	20e2      	movs	r0, #226	; 0xe2
1000fb46:	2b00      	cmp	r3, #0
1000fb48:	d106      	bne.n	1000fb58 <gattm_add_svc_req_handler+0xec>
1000fb4a:	68aa      	ldr	r2, [r5, #8]
1000fb4c:	7853      	ldrb	r3, [r2, #1]
1000fb4e:	7811      	ldrb	r1, [r2, #0]
1000fb50:	021b      	lsls	r3, r3, #8
1000fb52:	430b      	orrs	r3, r1
1000fb54:	8023      	strh	r3, [r4, #0]
1000fb56:	7890      	ldrb	r0, [r2, #2]
1000fb58:	b005      	add	sp, #20
1000fb5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fb5c:	100162ec 	.word	0x100162ec
1000fb60:	10015f7c 	.word	0x10015f7c
1000fb64:	10010e6f 	.word	0x10010e6f
1000fb68:	10015f70 	.word	0x10015f70
1000fb6c:	00000b01 	.word	0x00000b01
1000fb70:	1000e3c1 	.word	0x1000e3c1
1000fb74:	1000e425 	.word	0x1000e425

1000fb78 <gattm_add_attribute_req_handler>:
1000fb78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fb7a:	1c1f      	adds	r7, r3, #0
1000fb7c:	4b16      	ldr	r3, [pc, #88]	; (1000fbd8 <gattm_add_attribute_req_handler+0x60>)
1000fb7e:	9100      	str	r1, [sp, #0]
1000fb80:	9201      	str	r2, [sp, #4]
1000fb82:	1c05      	adds	r5, r0, #0
1000fb84:	7946      	ldrb	r6, [r0, #5]
1000fb86:	6818      	ldr	r0, [r3, #0]
1000fb88:	2114      	movs	r1, #20
1000fb8a:	4b14      	ldr	r3, [pc, #80]	; (1000fbdc <gattm_add_attribute_req_handler+0x64>)
1000fb8c:	382a      	subs	r0, #42	; 0x2a
1000fb8e:	4798      	blx	r3
1000fb90:	2311      	movs	r3, #17
1000fb92:	4286      	cmp	r6, r0
1000fb94:	d21e      	bcs.n	1000fbd4 <gattm_add_attribute_req_handler+0x5c>
1000fb96:	2414      	movs	r4, #20
1000fb98:	4366      	muls	r6, r4
1000fb9a:	19a8      	adds	r0, r5, r6
1000fb9c:	2100      	movs	r1, #0
1000fb9e:	2210      	movs	r2, #16
1000fba0:	4b0f      	ldr	r3, [pc, #60]	; (1000fbe0 <gattm_add_attribute_req_handler+0x68>)
1000fba2:	3016      	adds	r0, #22
1000fba4:	4798      	blx	r3
1000fba6:	7968      	ldrb	r0, [r5, #5]
1000fba8:	1c3a      	adds	r2, r7, #0
1000fbaa:	4360      	muls	r0, r4
1000fbac:	1828      	adds	r0, r5, r0
1000fbae:	4b0d      	ldr	r3, [pc, #52]	; (1000fbe4 <gattm_add_attribute_req_handler+0x6c>)
1000fbb0:	3016      	adds	r0, #22
1000fbb2:	9908      	ldr	r1, [sp, #32]
1000fbb4:	4798      	blx	r3
1000fbb6:	466a      	mov	r2, sp
1000fbb8:	796b      	ldrb	r3, [r5, #5]
1000fbba:	8812      	ldrh	r2, [r2, #0]
1000fbbc:	435c      	muls	r4, r3
1000fbbe:	192c      	adds	r4, r5, r4
1000fbc0:	8522      	strh	r2, [r4, #40]	; 0x28
1000fbc2:	466a      	mov	r2, sp
1000fbc4:	8892      	ldrh	r2, [r2, #4]
1000fbc6:	84e2      	strh	r2, [r4, #38]	; 0x26
1000fbc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000fbca:	8013      	strh	r3, [r2, #0]
1000fbcc:	796b      	ldrb	r3, [r5, #5]
1000fbce:	3301      	adds	r3, #1
1000fbd0:	716b      	strb	r3, [r5, #5]
1000fbd2:	2300      	movs	r3, #0
1000fbd4:	1c18      	adds	r0, r3, #0
1000fbd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000fbd8:	100151d4 	.word	0x100151d4
1000fbdc:	1000fd65 	.word	0x1000fd65
1000fbe0:	10010e81 	.word	0x10010e81
1000fbe4:	10010e6f 	.word	0x10010e6f

1000fbe8 <gattm_att_set_value_req_handler>:
1000fbe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fbea:	466b      	mov	r3, sp
1000fbec:	1dde      	adds	r6, r3, #7
1000fbee:	2300      	movs	r3, #0
1000fbf0:	1c0d      	adds	r5, r1, #0
1000fbf2:	210c      	movs	r1, #12
1000fbf4:	270b      	movs	r7, #11
1000fbf6:	4c17      	ldr	r4, [pc, #92]	; (1000fc54 <gattm_att_set_value_req_handler+0x6c>)
1000fbf8:	7033      	strb	r3, [r6, #0]
1000fbfa:	70e3      	strb	r3, [r4, #3]
1000fbfc:	4b16      	ldr	r3, [pc, #88]	; (1000fc58 <gattm_att_set_value_req_handler+0x70>)
1000fbfe:	7021      	strb	r1, [r4, #0]
1000fc00:	8819      	ldrh	r1, [r3, #0]
1000fc02:	881b      	ldrh	r3, [r3, #0]
1000fc04:	7220      	strb	r0, [r4, #8]
1000fc06:	0a1b      	lsrs	r3, r3, #8
1000fc08:	7163      	strb	r3, [r4, #5]
1000fc0a:	0a00      	lsrs	r0, r0, #8
1000fc0c:	0a2b      	lsrs	r3, r5, #8
1000fc0e:	7121      	strb	r1, [r4, #4]
1000fc10:	7260      	strb	r0, [r4, #9]
1000fc12:	1c11      	adds	r1, r2, #0
1000fc14:	72a5      	strb	r5, [r4, #10]
1000fc16:	1c2a      	adds	r2, r5, #0
1000fc18:	72e3      	strb	r3, [r4, #11]
1000fc1a:	350c      	adds	r5, #12
1000fc1c:	4b0f      	ldr	r3, [pc, #60]	; (1000fc5c <gattm_att_set_value_req_handler+0x74>)
1000fc1e:	4810      	ldr	r0, [pc, #64]	; (1000fc60 <gattm_att_set_value_req_handler+0x78>)
1000fc20:	7067      	strb	r7, [r4, #1]
1000fc22:	70a7      	strb	r7, [r4, #2]
1000fc24:	4798      	blx	r3
1000fc26:	b2a9      	uxth	r1, r5
1000fc28:	4b0e      	ldr	r3, [pc, #56]	; (1000fc64 <gattm_att_set_value_req_handler+0x7c>)
1000fc2a:	4d0f      	ldr	r5, [pc, #60]	; (1000fc68 <gattm_att_set_value_req_handler+0x80>)
1000fc2c:	1c20      	adds	r0, r4, #0
1000fc2e:	802b      	strh	r3, [r5, #0]
1000fc30:	1c0b      	adds	r3, r1, #0
1000fc32:	3b08      	subs	r3, #8
1000fc34:	71a3      	strb	r3, [r4, #6]
1000fc36:	121b      	asrs	r3, r3, #8
1000fc38:	71e3      	strb	r3, [r4, #7]
1000fc3a:	4b0c      	ldr	r3, [pc, #48]	; (1000fc6c <gattm_att_set_value_req_handler+0x84>)
1000fc3c:	80af      	strh	r7, [r5, #4]
1000fc3e:	4798      	blx	r3
1000fc40:	1c30      	adds	r0, r6, #0
1000fc42:	4b0b      	ldr	r3, [pc, #44]	; (1000fc70 <gattm_att_set_value_req_handler+0x88>)
1000fc44:	4798      	blx	r3
1000fc46:	7833      	ldrb	r3, [r6, #0]
1000fc48:	20e2      	movs	r0, #226	; 0xe2
1000fc4a:	2b00      	cmp	r3, #0
1000fc4c:	d101      	bne.n	1000fc52 <gattm_att_set_value_req_handler+0x6a>
1000fc4e:	68ab      	ldr	r3, [r5, #8]
1000fc50:	7898      	ldrb	r0, [r3, #2]
1000fc52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000fc54:	100162ec 	.word	0x100162ec
1000fc58:	10015f7c 	.word	0x10015f7c
1000fc5c:	10010e6f 	.word	0x10010e6f
1000fc60:	100162f8 	.word	0x100162f8
1000fc64:	00000b0d 	.word	0x00000b0d
1000fc68:	10015f70 	.word	0x10015f70
1000fc6c:	1000e3c1 	.word	0x1000e3c1
1000fc70:	1000e425 	.word	0x1000e425

1000fc74 <gattm_att_get_value_req_handler>:
1000fc74:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fc76:	b085      	sub	sp, #20
1000fc78:	9201      	str	r2, [sp, #4]
1000fc7a:	220a      	movs	r2, #10
1000fc7c:	1c04      	adds	r4, r0, #0
1000fc7e:	481d      	ldr	r0, [pc, #116]	; (1000fcf4 <gattm_att_get_value_req_handler+0x80>)
1000fc80:	ab02      	add	r3, sp, #8
1000fc82:	1dde      	adds	r6, r3, #7
1000fc84:	7002      	strb	r2, [r0, #0]
1000fc86:	2300      	movs	r3, #0
1000fc88:	220b      	movs	r2, #11
1000fc8a:	4d1b      	ldr	r5, [pc, #108]	; (1000fcf8 <gattm_att_get_value_req_handler+0x84>)
1000fc8c:	1c0f      	adds	r7, r1, #0
1000fc8e:	8829      	ldrh	r1, [r5, #0]
1000fc90:	882d      	ldrh	r5, [r5, #0]
1000fc92:	7101      	strb	r1, [r0, #4]
1000fc94:	0a2d      	lsrs	r5, r5, #8
1000fc96:	7145      	strb	r5, [r0, #5]
1000fc98:	0a25      	lsrs	r5, r4, #8
1000fc9a:	7245      	strb	r5, [r0, #9]
1000fc9c:	4917      	ldr	r1, [pc, #92]	; (1000fcfc <gattm_att_get_value_req_handler+0x88>)
1000fc9e:	4d18      	ldr	r5, [pc, #96]	; (1000fd00 <gattm_att_get_value_req_handler+0x8c>)
1000fca0:	7033      	strb	r3, [r6, #0]
1000fca2:	7042      	strb	r2, [r0, #1]
1000fca4:	7082      	strb	r2, [r0, #2]
1000fca6:	70c3      	strb	r3, [r0, #3]
1000fca8:	8029      	strh	r1, [r5, #0]
1000fcaa:	80aa      	strh	r2, [r5, #4]
1000fcac:	71c3      	strb	r3, [r0, #7]
1000fcae:	3a09      	subs	r2, #9
1000fcb0:	210a      	movs	r1, #10
1000fcb2:	4b14      	ldr	r3, [pc, #80]	; (1000fd04 <gattm_att_get_value_req_handler+0x90>)
1000fcb4:	7182      	strb	r2, [r0, #6]
1000fcb6:	7204      	strb	r4, [r0, #8]
1000fcb8:	4798      	blx	r3
1000fcba:	1c30      	adds	r0, r6, #0
1000fcbc:	4b12      	ldr	r3, [pc, #72]	; (1000fd08 <gattm_att_get_value_req_handler+0x94>)
1000fcbe:	4798      	blx	r3
1000fcc0:	7833      	ldrb	r3, [r6, #0]
1000fcc2:	20e2      	movs	r0, #226	; 0xe2
1000fcc4:	2b00      	cmp	r3, #0
1000fcc6:	d112      	bne.n	1000fcee <gattm_att_get_value_req_handler+0x7a>
1000fcc8:	68a9      	ldr	r1, [r5, #8]
1000fcca:	9801      	ldr	r0, [sp, #4]
1000fccc:	784d      	ldrb	r5, [r1, #1]
1000fcce:	780b      	ldrb	r3, [r1, #0]
1000fcd0:	78ca      	ldrb	r2, [r1, #3]
1000fcd2:	022d      	lsls	r5, r5, #8
1000fcd4:	431d      	orrs	r5, r3
1000fcd6:	788b      	ldrb	r3, [r1, #2]
1000fcd8:	0212      	lsls	r2, r2, #8
1000fcda:	431a      	orrs	r2, r3
1000fcdc:	803a      	strh	r2, [r7, #0]
1000fcde:	790e      	ldrb	r6, [r1, #4]
1000fce0:	4b0a      	ldr	r3, [pc, #40]	; (1000fd0c <gattm_att_get_value_req_handler+0x98>)
1000fce2:	3105      	adds	r1, #5
1000fce4:	4798      	blx	r3
1000fce6:	20e2      	movs	r0, #226	; 0xe2
1000fce8:	42ac      	cmp	r4, r5
1000fcea:	d100      	bne.n	1000fcee <gattm_att_get_value_req_handler+0x7a>
1000fcec:	1c30      	adds	r0, r6, #0
1000fcee:	b005      	add	sp, #20
1000fcf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fcf2:	46c0      	nop			; (mov r8, r8)
1000fcf4:	100162ec 	.word	0x100162ec
1000fcf8:	10015f7c 	.word	0x10015f7c
1000fcfc:	00000b0b 	.word	0x00000b0b
1000fd00:	10015f70 	.word	0x10015f70
1000fd04:	1000e3c1 	.word	0x1000e3c1
1000fd08:	1000e425 	.word	0x1000e425
1000fd0c:	10010e6f 	.word	0x10010e6f

1000fd10 <htpt_enable_rsp_handler>:
1000fd10:	780b      	ldrb	r3, [r1, #0]
1000fd12:	7013      	strb	r3, [r2, #0]
1000fd14:	784b      	ldrb	r3, [r1, #1]
1000fd16:	7053      	strb	r3, [r2, #1]
1000fd18:	4770      	bx	lr

1000fd1a <htpt_temp_send_rsp_handler>:
1000fd1a:	780b      	ldrb	r3, [r1, #0]
1000fd1c:	7013      	strb	r3, [r2, #0]
1000fd1e:	4770      	bx	lr

1000fd20 <htpt_meas_intv_upd_rsp_handler>:
1000fd20:	780b      	ldrb	r3, [r1, #0]
1000fd22:	7013      	strb	r3, [r2, #0]
1000fd24:	4770      	bx	lr

1000fd26 <htpt_meas_intv_chg_req_ind_handler>:
1000fd26:	78cb      	ldrb	r3, [r1, #3]
1000fd28:	7889      	ldrb	r1, [r1, #2]
1000fd2a:	021b      	lsls	r3, r3, #8
1000fd2c:	430b      	orrs	r3, r1
1000fd2e:	8013      	strh	r3, [r2, #0]
1000fd30:	4770      	bx	lr

1000fd32 <htpt_cfg_indntf_ind_handler>:
1000fd32:	780b      	ldrb	r3, [r1, #0]
1000fd34:	7013      	strb	r3, [r2, #0]
1000fd36:	784b      	ldrb	r3, [r1, #1]
1000fd38:	7053      	strb	r3, [r2, #1]
1000fd3a:	4770      	bx	lr

1000fd3c <__gnu_thumb1_case_sqi>:
1000fd3c:	b402      	push	{r1}
1000fd3e:	4671      	mov	r1, lr
1000fd40:	0849      	lsrs	r1, r1, #1
1000fd42:	0049      	lsls	r1, r1, #1
1000fd44:	5609      	ldrsb	r1, [r1, r0]
1000fd46:	0049      	lsls	r1, r1, #1
1000fd48:	448e      	add	lr, r1
1000fd4a:	bc02      	pop	{r1}
1000fd4c:	4770      	bx	lr
1000fd4e:	46c0      	nop			; (mov r8, r8)

1000fd50 <__gnu_thumb1_case_uqi>:
1000fd50:	b402      	push	{r1}
1000fd52:	4671      	mov	r1, lr
1000fd54:	0849      	lsrs	r1, r1, #1
1000fd56:	0049      	lsls	r1, r1, #1
1000fd58:	5c09      	ldrb	r1, [r1, r0]
1000fd5a:	0049      	lsls	r1, r1, #1
1000fd5c:	448e      	add	lr, r1
1000fd5e:	bc02      	pop	{r1}
1000fd60:	4770      	bx	lr
1000fd62:	46c0      	nop			; (mov r8, r8)

1000fd64 <__aeabi_uidiv>:
1000fd64:	2200      	movs	r2, #0
1000fd66:	0843      	lsrs	r3, r0, #1
1000fd68:	428b      	cmp	r3, r1
1000fd6a:	d374      	bcc.n	1000fe56 <__aeabi_uidiv+0xf2>
1000fd6c:	0903      	lsrs	r3, r0, #4
1000fd6e:	428b      	cmp	r3, r1
1000fd70:	d35f      	bcc.n	1000fe32 <__aeabi_uidiv+0xce>
1000fd72:	0a03      	lsrs	r3, r0, #8
1000fd74:	428b      	cmp	r3, r1
1000fd76:	d344      	bcc.n	1000fe02 <__aeabi_uidiv+0x9e>
1000fd78:	0b03      	lsrs	r3, r0, #12
1000fd7a:	428b      	cmp	r3, r1
1000fd7c:	d328      	bcc.n	1000fdd0 <__aeabi_uidiv+0x6c>
1000fd7e:	0c03      	lsrs	r3, r0, #16
1000fd80:	428b      	cmp	r3, r1
1000fd82:	d30d      	bcc.n	1000fda0 <__aeabi_uidiv+0x3c>
1000fd84:	22ff      	movs	r2, #255	; 0xff
1000fd86:	0209      	lsls	r1, r1, #8
1000fd88:	ba12      	rev	r2, r2
1000fd8a:	0c03      	lsrs	r3, r0, #16
1000fd8c:	428b      	cmp	r3, r1
1000fd8e:	d302      	bcc.n	1000fd96 <__aeabi_uidiv+0x32>
1000fd90:	1212      	asrs	r2, r2, #8
1000fd92:	0209      	lsls	r1, r1, #8
1000fd94:	d065      	beq.n	1000fe62 <__aeabi_uidiv+0xfe>
1000fd96:	0b03      	lsrs	r3, r0, #12
1000fd98:	428b      	cmp	r3, r1
1000fd9a:	d319      	bcc.n	1000fdd0 <__aeabi_uidiv+0x6c>
1000fd9c:	e000      	b.n	1000fda0 <__aeabi_uidiv+0x3c>
1000fd9e:	0a09      	lsrs	r1, r1, #8
1000fda0:	0bc3      	lsrs	r3, r0, #15
1000fda2:	428b      	cmp	r3, r1
1000fda4:	d301      	bcc.n	1000fdaa <__aeabi_uidiv+0x46>
1000fda6:	03cb      	lsls	r3, r1, #15
1000fda8:	1ac0      	subs	r0, r0, r3
1000fdaa:	4152      	adcs	r2, r2
1000fdac:	0b83      	lsrs	r3, r0, #14
1000fdae:	428b      	cmp	r3, r1
1000fdb0:	d301      	bcc.n	1000fdb6 <__aeabi_uidiv+0x52>
1000fdb2:	038b      	lsls	r3, r1, #14
1000fdb4:	1ac0      	subs	r0, r0, r3
1000fdb6:	4152      	adcs	r2, r2
1000fdb8:	0b43      	lsrs	r3, r0, #13
1000fdba:	428b      	cmp	r3, r1
1000fdbc:	d301      	bcc.n	1000fdc2 <__aeabi_uidiv+0x5e>
1000fdbe:	034b      	lsls	r3, r1, #13
1000fdc0:	1ac0      	subs	r0, r0, r3
1000fdc2:	4152      	adcs	r2, r2
1000fdc4:	0b03      	lsrs	r3, r0, #12
1000fdc6:	428b      	cmp	r3, r1
1000fdc8:	d301      	bcc.n	1000fdce <__aeabi_uidiv+0x6a>
1000fdca:	030b      	lsls	r3, r1, #12
1000fdcc:	1ac0      	subs	r0, r0, r3
1000fdce:	4152      	adcs	r2, r2
1000fdd0:	0ac3      	lsrs	r3, r0, #11
1000fdd2:	428b      	cmp	r3, r1
1000fdd4:	d301      	bcc.n	1000fdda <__aeabi_uidiv+0x76>
1000fdd6:	02cb      	lsls	r3, r1, #11
1000fdd8:	1ac0      	subs	r0, r0, r3
1000fdda:	4152      	adcs	r2, r2
1000fddc:	0a83      	lsrs	r3, r0, #10
1000fdde:	428b      	cmp	r3, r1
1000fde0:	d301      	bcc.n	1000fde6 <__aeabi_uidiv+0x82>
1000fde2:	028b      	lsls	r3, r1, #10
1000fde4:	1ac0      	subs	r0, r0, r3
1000fde6:	4152      	adcs	r2, r2
1000fde8:	0a43      	lsrs	r3, r0, #9
1000fdea:	428b      	cmp	r3, r1
1000fdec:	d301      	bcc.n	1000fdf2 <__aeabi_uidiv+0x8e>
1000fdee:	024b      	lsls	r3, r1, #9
1000fdf0:	1ac0      	subs	r0, r0, r3
1000fdf2:	4152      	adcs	r2, r2
1000fdf4:	0a03      	lsrs	r3, r0, #8
1000fdf6:	428b      	cmp	r3, r1
1000fdf8:	d301      	bcc.n	1000fdfe <__aeabi_uidiv+0x9a>
1000fdfa:	020b      	lsls	r3, r1, #8
1000fdfc:	1ac0      	subs	r0, r0, r3
1000fdfe:	4152      	adcs	r2, r2
1000fe00:	d2cd      	bcs.n	1000fd9e <__aeabi_uidiv+0x3a>
1000fe02:	09c3      	lsrs	r3, r0, #7
1000fe04:	428b      	cmp	r3, r1
1000fe06:	d301      	bcc.n	1000fe0c <__aeabi_uidiv+0xa8>
1000fe08:	01cb      	lsls	r3, r1, #7
1000fe0a:	1ac0      	subs	r0, r0, r3
1000fe0c:	4152      	adcs	r2, r2
1000fe0e:	0983      	lsrs	r3, r0, #6
1000fe10:	428b      	cmp	r3, r1
1000fe12:	d301      	bcc.n	1000fe18 <__aeabi_uidiv+0xb4>
1000fe14:	018b      	lsls	r3, r1, #6
1000fe16:	1ac0      	subs	r0, r0, r3
1000fe18:	4152      	adcs	r2, r2
1000fe1a:	0943      	lsrs	r3, r0, #5
1000fe1c:	428b      	cmp	r3, r1
1000fe1e:	d301      	bcc.n	1000fe24 <__aeabi_uidiv+0xc0>
1000fe20:	014b      	lsls	r3, r1, #5
1000fe22:	1ac0      	subs	r0, r0, r3
1000fe24:	4152      	adcs	r2, r2
1000fe26:	0903      	lsrs	r3, r0, #4
1000fe28:	428b      	cmp	r3, r1
1000fe2a:	d301      	bcc.n	1000fe30 <__aeabi_uidiv+0xcc>
1000fe2c:	010b      	lsls	r3, r1, #4
1000fe2e:	1ac0      	subs	r0, r0, r3
1000fe30:	4152      	adcs	r2, r2
1000fe32:	08c3      	lsrs	r3, r0, #3
1000fe34:	428b      	cmp	r3, r1
1000fe36:	d301      	bcc.n	1000fe3c <__aeabi_uidiv+0xd8>
1000fe38:	00cb      	lsls	r3, r1, #3
1000fe3a:	1ac0      	subs	r0, r0, r3
1000fe3c:	4152      	adcs	r2, r2
1000fe3e:	0883      	lsrs	r3, r0, #2
1000fe40:	428b      	cmp	r3, r1
1000fe42:	d301      	bcc.n	1000fe48 <__aeabi_uidiv+0xe4>
1000fe44:	008b      	lsls	r3, r1, #2
1000fe46:	1ac0      	subs	r0, r0, r3
1000fe48:	4152      	adcs	r2, r2
1000fe4a:	0843      	lsrs	r3, r0, #1
1000fe4c:	428b      	cmp	r3, r1
1000fe4e:	d301      	bcc.n	1000fe54 <__aeabi_uidiv+0xf0>
1000fe50:	004b      	lsls	r3, r1, #1
1000fe52:	1ac0      	subs	r0, r0, r3
1000fe54:	4152      	adcs	r2, r2
1000fe56:	1a41      	subs	r1, r0, r1
1000fe58:	d200      	bcs.n	1000fe5c <__aeabi_uidiv+0xf8>
1000fe5a:	4601      	mov	r1, r0
1000fe5c:	4152      	adcs	r2, r2
1000fe5e:	4610      	mov	r0, r2
1000fe60:	4770      	bx	lr
1000fe62:	e7ff      	b.n	1000fe64 <__aeabi_uidiv+0x100>
1000fe64:	b501      	push	{r0, lr}
1000fe66:	2000      	movs	r0, #0
1000fe68:	f000 f806 	bl	1000fe78 <__aeabi_idiv0>
1000fe6c:	bd02      	pop	{r1, pc}
1000fe6e:	46c0      	nop			; (mov r8, r8)

1000fe70 <__aeabi_uidivmod>:
1000fe70:	2900      	cmp	r1, #0
1000fe72:	d0f7      	beq.n	1000fe64 <__aeabi_uidiv+0x100>
1000fe74:	e776      	b.n	1000fd64 <__aeabi_uidiv>
1000fe76:	4770      	bx	lr

1000fe78 <__aeabi_idiv0>:
1000fe78:	4770      	bx	lr
1000fe7a:	46c0      	nop			; (mov r8, r8)

1000fe7c <__aeabi_d2uiz>:
1000fe7c:	b570      	push	{r4, r5, r6, lr}
1000fe7e:	2200      	movs	r2, #0
1000fe80:	4b0c      	ldr	r3, [pc, #48]	; (1000feb4 <__aeabi_d2uiz+0x38>)
1000fe82:	0004      	movs	r4, r0
1000fe84:	000d      	movs	r5, r1
1000fe86:	f000 fe87 	bl	10010b98 <__aeabi_dcmpge>
1000fe8a:	2800      	cmp	r0, #0
1000fe8c:	d104      	bne.n	1000fe98 <__aeabi_d2uiz+0x1c>
1000fe8e:	0020      	movs	r0, r4
1000fe90:	0029      	movs	r1, r5
1000fe92:	f000 fddf 	bl	10010a54 <__aeabi_d2iz>
1000fe96:	bd70      	pop	{r4, r5, r6, pc}
1000fe98:	4b06      	ldr	r3, [pc, #24]	; (1000feb4 <__aeabi_d2uiz+0x38>)
1000fe9a:	2200      	movs	r2, #0
1000fe9c:	0020      	movs	r0, r4
1000fe9e:	0029      	movs	r1, r5
1000fea0:	f000 fa84 	bl	100103ac <__aeabi_dsub>
1000fea4:	f000 fdd6 	bl	10010a54 <__aeabi_d2iz>
1000fea8:	2380      	movs	r3, #128	; 0x80
1000feaa:	061b      	lsls	r3, r3, #24
1000feac:	469c      	mov	ip, r3
1000feae:	4460      	add	r0, ip
1000feb0:	e7f1      	b.n	1000fe96 <__aeabi_d2uiz+0x1a>
1000feb2:	46c0      	nop			; (mov r8, r8)
1000feb4:	41e00000 	.word	0x41e00000

1000feb8 <__aeabi_dmul>:
1000feb8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000feba:	465f      	mov	r7, fp
1000febc:	4656      	mov	r6, sl
1000febe:	464d      	mov	r5, r9
1000fec0:	4644      	mov	r4, r8
1000fec2:	b4f0      	push	{r4, r5, r6, r7}
1000fec4:	030d      	lsls	r5, r1, #12
1000fec6:	4699      	mov	r9, r3
1000fec8:	004e      	lsls	r6, r1, #1
1000feca:	0b2b      	lsrs	r3, r5, #12
1000fecc:	b087      	sub	sp, #28
1000fece:	0007      	movs	r7, r0
1000fed0:	4692      	mov	sl, r2
1000fed2:	4680      	mov	r8, r0
1000fed4:	469b      	mov	fp, r3
1000fed6:	0d76      	lsrs	r6, r6, #21
1000fed8:	0fcc      	lsrs	r4, r1, #31
1000feda:	2e00      	cmp	r6, #0
1000fedc:	d069      	beq.n	1000ffb2 <__aeabi_dmul+0xfa>
1000fede:	4b6d      	ldr	r3, [pc, #436]	; (10010094 <__aeabi_dmul+0x1dc>)
1000fee0:	429e      	cmp	r6, r3
1000fee2:	d035      	beq.n	1000ff50 <__aeabi_dmul+0x98>
1000fee4:	465b      	mov	r3, fp
1000fee6:	2280      	movs	r2, #128	; 0x80
1000fee8:	00dd      	lsls	r5, r3, #3
1000feea:	0412      	lsls	r2, r2, #16
1000feec:	0f43      	lsrs	r3, r0, #29
1000feee:	4313      	orrs	r3, r2
1000fef0:	432b      	orrs	r3, r5
1000fef2:	469b      	mov	fp, r3
1000fef4:	00c3      	lsls	r3, r0, #3
1000fef6:	4698      	mov	r8, r3
1000fef8:	4b67      	ldr	r3, [pc, #412]	; (10010098 <__aeabi_dmul+0x1e0>)
1000fefa:	2700      	movs	r7, #0
1000fefc:	469c      	mov	ip, r3
1000fefe:	2300      	movs	r3, #0
1000ff00:	4466      	add	r6, ip
1000ff02:	9301      	str	r3, [sp, #4]
1000ff04:	464a      	mov	r2, r9
1000ff06:	0315      	lsls	r5, r2, #12
1000ff08:	0050      	lsls	r0, r2, #1
1000ff0a:	0fd2      	lsrs	r2, r2, #31
1000ff0c:	4653      	mov	r3, sl
1000ff0e:	0b2d      	lsrs	r5, r5, #12
1000ff10:	0d40      	lsrs	r0, r0, #21
1000ff12:	4691      	mov	r9, r2
1000ff14:	d100      	bne.n	1000ff18 <__aeabi_dmul+0x60>
1000ff16:	e076      	b.n	10010006 <__aeabi_dmul+0x14e>
1000ff18:	4a5e      	ldr	r2, [pc, #376]	; (10010094 <__aeabi_dmul+0x1dc>)
1000ff1a:	4290      	cmp	r0, r2
1000ff1c:	d06c      	beq.n	1000fff8 <__aeabi_dmul+0x140>
1000ff1e:	2280      	movs	r2, #128	; 0x80
1000ff20:	0f5b      	lsrs	r3, r3, #29
1000ff22:	0412      	lsls	r2, r2, #16
1000ff24:	4313      	orrs	r3, r2
1000ff26:	4a5c      	ldr	r2, [pc, #368]	; (10010098 <__aeabi_dmul+0x1e0>)
1000ff28:	00ed      	lsls	r5, r5, #3
1000ff2a:	4694      	mov	ip, r2
1000ff2c:	431d      	orrs	r5, r3
1000ff2e:	4653      	mov	r3, sl
1000ff30:	2200      	movs	r2, #0
1000ff32:	00db      	lsls	r3, r3, #3
1000ff34:	4460      	add	r0, ip
1000ff36:	4649      	mov	r1, r9
1000ff38:	1836      	adds	r6, r6, r0
1000ff3a:	1c70      	adds	r0, r6, #1
1000ff3c:	4061      	eors	r1, r4
1000ff3e:	9002      	str	r0, [sp, #8]
1000ff40:	4317      	orrs	r7, r2
1000ff42:	2f0f      	cmp	r7, #15
1000ff44:	d900      	bls.n	1000ff48 <__aeabi_dmul+0x90>
1000ff46:	e0af      	b.n	100100a8 <__aeabi_dmul+0x1f0>
1000ff48:	4854      	ldr	r0, [pc, #336]	; (1001009c <__aeabi_dmul+0x1e4>)
1000ff4a:	00bf      	lsls	r7, r7, #2
1000ff4c:	59c7      	ldr	r7, [r0, r7]
1000ff4e:	46bf      	mov	pc, r7
1000ff50:	465b      	mov	r3, fp
1000ff52:	431f      	orrs	r7, r3
1000ff54:	d000      	beq.n	1000ff58 <__aeabi_dmul+0xa0>
1000ff56:	e088      	b.n	1001006a <__aeabi_dmul+0x1b2>
1000ff58:	2300      	movs	r3, #0
1000ff5a:	469b      	mov	fp, r3
1000ff5c:	4698      	mov	r8, r3
1000ff5e:	3302      	adds	r3, #2
1000ff60:	2708      	movs	r7, #8
1000ff62:	9301      	str	r3, [sp, #4]
1000ff64:	e7ce      	b.n	1000ff04 <__aeabi_dmul+0x4c>
1000ff66:	4649      	mov	r1, r9
1000ff68:	2a02      	cmp	r2, #2
1000ff6a:	d06a      	beq.n	10010042 <__aeabi_dmul+0x18a>
1000ff6c:	2a03      	cmp	r2, #3
1000ff6e:	d100      	bne.n	1000ff72 <__aeabi_dmul+0xba>
1000ff70:	e209      	b.n	10010386 <__aeabi_dmul+0x4ce>
1000ff72:	2a01      	cmp	r2, #1
1000ff74:	d000      	beq.n	1000ff78 <__aeabi_dmul+0xc0>
1000ff76:	e1bb      	b.n	100102f0 <__aeabi_dmul+0x438>
1000ff78:	4011      	ands	r1, r2
1000ff7a:	2200      	movs	r2, #0
1000ff7c:	2300      	movs	r3, #0
1000ff7e:	2500      	movs	r5, #0
1000ff80:	4690      	mov	r8, r2
1000ff82:	b2cc      	uxtb	r4, r1
1000ff84:	2100      	movs	r1, #0
1000ff86:	032d      	lsls	r5, r5, #12
1000ff88:	0d0a      	lsrs	r2, r1, #20
1000ff8a:	0512      	lsls	r2, r2, #20
1000ff8c:	0b2d      	lsrs	r5, r5, #12
1000ff8e:	4315      	orrs	r5, r2
1000ff90:	4a43      	ldr	r2, [pc, #268]	; (100100a0 <__aeabi_dmul+0x1e8>)
1000ff92:	051b      	lsls	r3, r3, #20
1000ff94:	4015      	ands	r5, r2
1000ff96:	431d      	orrs	r5, r3
1000ff98:	006d      	lsls	r5, r5, #1
1000ff9a:	07e4      	lsls	r4, r4, #31
1000ff9c:	086d      	lsrs	r5, r5, #1
1000ff9e:	4325      	orrs	r5, r4
1000ffa0:	4640      	mov	r0, r8
1000ffa2:	0029      	movs	r1, r5
1000ffa4:	b007      	add	sp, #28
1000ffa6:	bc3c      	pop	{r2, r3, r4, r5}
1000ffa8:	4690      	mov	r8, r2
1000ffaa:	4699      	mov	r9, r3
1000ffac:	46a2      	mov	sl, r4
1000ffae:	46ab      	mov	fp, r5
1000ffb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ffb2:	4303      	orrs	r3, r0
1000ffb4:	d052      	beq.n	1001005c <__aeabi_dmul+0x1a4>
1000ffb6:	465b      	mov	r3, fp
1000ffb8:	2b00      	cmp	r3, #0
1000ffba:	d100      	bne.n	1000ffbe <__aeabi_dmul+0x106>
1000ffbc:	e18a      	b.n	100102d4 <__aeabi_dmul+0x41c>
1000ffbe:	4658      	mov	r0, fp
1000ffc0:	f000 fdf4 	bl	10010bac <__clzsi2>
1000ffc4:	0003      	movs	r3, r0
1000ffc6:	3b0b      	subs	r3, #11
1000ffc8:	2b1c      	cmp	r3, #28
1000ffca:	dd00      	ble.n	1000ffce <__aeabi_dmul+0x116>
1000ffcc:	e17b      	b.n	100102c6 <__aeabi_dmul+0x40e>
1000ffce:	221d      	movs	r2, #29
1000ffd0:	1ad3      	subs	r3, r2, r3
1000ffd2:	003a      	movs	r2, r7
1000ffd4:	0001      	movs	r1, r0
1000ffd6:	465d      	mov	r5, fp
1000ffd8:	40da      	lsrs	r2, r3
1000ffda:	3908      	subs	r1, #8
1000ffdc:	408d      	lsls	r5, r1
1000ffde:	0013      	movs	r3, r2
1000ffe0:	408f      	lsls	r7, r1
1000ffe2:	432b      	orrs	r3, r5
1000ffe4:	469b      	mov	fp, r3
1000ffe6:	46b8      	mov	r8, r7
1000ffe8:	4b2e      	ldr	r3, [pc, #184]	; (100100a4 <__aeabi_dmul+0x1ec>)
1000ffea:	2700      	movs	r7, #0
1000ffec:	469c      	mov	ip, r3
1000ffee:	2300      	movs	r3, #0
1000fff0:	4460      	add	r0, ip
1000fff2:	4246      	negs	r6, r0
1000fff4:	9301      	str	r3, [sp, #4]
1000fff6:	e785      	b.n	1000ff04 <__aeabi_dmul+0x4c>
1000fff8:	4652      	mov	r2, sl
1000fffa:	432a      	orrs	r2, r5
1000fffc:	d12c      	bne.n	10010058 <__aeabi_dmul+0x1a0>
1000fffe:	2500      	movs	r5, #0
10010000:	2300      	movs	r3, #0
10010002:	2202      	movs	r2, #2
10010004:	e797      	b.n	1000ff36 <__aeabi_dmul+0x7e>
10010006:	4652      	mov	r2, sl
10010008:	432a      	orrs	r2, r5
1001000a:	d021      	beq.n	10010050 <__aeabi_dmul+0x198>
1001000c:	2d00      	cmp	r5, #0
1001000e:	d100      	bne.n	10010012 <__aeabi_dmul+0x15a>
10010010:	e154      	b.n	100102bc <__aeabi_dmul+0x404>
10010012:	0028      	movs	r0, r5
10010014:	f000 fdca 	bl	10010bac <__clzsi2>
10010018:	0003      	movs	r3, r0
1001001a:	3b0b      	subs	r3, #11
1001001c:	2b1c      	cmp	r3, #28
1001001e:	dd00      	ble.n	10010022 <__aeabi_dmul+0x16a>
10010020:	e146      	b.n	100102b0 <__aeabi_dmul+0x3f8>
10010022:	211d      	movs	r1, #29
10010024:	1acb      	subs	r3, r1, r3
10010026:	4651      	mov	r1, sl
10010028:	0002      	movs	r2, r0
1001002a:	40d9      	lsrs	r1, r3
1001002c:	4653      	mov	r3, sl
1001002e:	3a08      	subs	r2, #8
10010030:	4095      	lsls	r5, r2
10010032:	4093      	lsls	r3, r2
10010034:	430d      	orrs	r5, r1
10010036:	4a1b      	ldr	r2, [pc, #108]	; (100100a4 <__aeabi_dmul+0x1ec>)
10010038:	4694      	mov	ip, r2
1001003a:	4460      	add	r0, ip
1001003c:	4240      	negs	r0, r0
1001003e:	2200      	movs	r2, #0
10010040:	e779      	b.n	1000ff36 <__aeabi_dmul+0x7e>
10010042:	2401      	movs	r4, #1
10010044:	2200      	movs	r2, #0
10010046:	400c      	ands	r4, r1
10010048:	4b12      	ldr	r3, [pc, #72]	; (10010094 <__aeabi_dmul+0x1dc>)
1001004a:	2500      	movs	r5, #0
1001004c:	4690      	mov	r8, r2
1001004e:	e799      	b.n	1000ff84 <__aeabi_dmul+0xcc>
10010050:	2500      	movs	r5, #0
10010052:	2300      	movs	r3, #0
10010054:	2201      	movs	r2, #1
10010056:	e76e      	b.n	1000ff36 <__aeabi_dmul+0x7e>
10010058:	2203      	movs	r2, #3
1001005a:	e76c      	b.n	1000ff36 <__aeabi_dmul+0x7e>
1001005c:	2300      	movs	r3, #0
1001005e:	469b      	mov	fp, r3
10010060:	4698      	mov	r8, r3
10010062:	3301      	adds	r3, #1
10010064:	2704      	movs	r7, #4
10010066:	9301      	str	r3, [sp, #4]
10010068:	e74c      	b.n	1000ff04 <__aeabi_dmul+0x4c>
1001006a:	2303      	movs	r3, #3
1001006c:	270c      	movs	r7, #12
1001006e:	9301      	str	r3, [sp, #4]
10010070:	e748      	b.n	1000ff04 <__aeabi_dmul+0x4c>
10010072:	2300      	movs	r3, #0
10010074:	2580      	movs	r5, #128	; 0x80
10010076:	4698      	mov	r8, r3
10010078:	2400      	movs	r4, #0
1001007a:	032d      	lsls	r5, r5, #12
1001007c:	4b05      	ldr	r3, [pc, #20]	; (10010094 <__aeabi_dmul+0x1dc>)
1001007e:	e781      	b.n	1000ff84 <__aeabi_dmul+0xcc>
10010080:	465d      	mov	r5, fp
10010082:	4643      	mov	r3, r8
10010084:	9a01      	ldr	r2, [sp, #4]
10010086:	e76f      	b.n	1000ff68 <__aeabi_dmul+0xb0>
10010088:	465d      	mov	r5, fp
1001008a:	4643      	mov	r3, r8
1001008c:	0021      	movs	r1, r4
1001008e:	9a01      	ldr	r2, [sp, #4]
10010090:	e76a      	b.n	1000ff68 <__aeabi_dmul+0xb0>
10010092:	46c0      	nop			; (mov r8, r8)
10010094:	000007ff 	.word	0x000007ff
10010098:	fffffc01 	.word	0xfffffc01
1001009c:	10013648 	.word	0x10013648
100100a0:	800fffff 	.word	0x800fffff
100100a4:	000003f3 	.word	0x000003f3
100100a8:	4642      	mov	r2, r8
100100aa:	0c12      	lsrs	r2, r2, #16
100100ac:	4691      	mov	r9, r2
100100ae:	0c1a      	lsrs	r2, r3, #16
100100b0:	4694      	mov	ip, r2
100100b2:	4642      	mov	r2, r8
100100b4:	0417      	lsls	r7, r2, #16
100100b6:	464a      	mov	r2, r9
100100b8:	041b      	lsls	r3, r3, #16
100100ba:	0c1b      	lsrs	r3, r3, #16
100100bc:	435a      	muls	r2, r3
100100be:	4660      	mov	r0, ip
100100c0:	4690      	mov	r8, r2
100100c2:	464a      	mov	r2, r9
100100c4:	4342      	muls	r2, r0
100100c6:	0010      	movs	r0, r2
100100c8:	9203      	str	r2, [sp, #12]
100100ca:	4662      	mov	r2, ip
100100cc:	001c      	movs	r4, r3
100100ce:	0c3f      	lsrs	r7, r7, #16
100100d0:	437a      	muls	r2, r7
100100d2:	437c      	muls	r4, r7
100100d4:	4442      	add	r2, r8
100100d6:	9201      	str	r2, [sp, #4]
100100d8:	0c22      	lsrs	r2, r4, #16
100100da:	4692      	mov	sl, r2
100100dc:	9a01      	ldr	r2, [sp, #4]
100100de:	4452      	add	r2, sl
100100e0:	4590      	cmp	r8, r2
100100e2:	d906      	bls.n	100100f2 <__aeabi_dmul+0x23a>
100100e4:	4682      	mov	sl, r0
100100e6:	2080      	movs	r0, #128	; 0x80
100100e8:	0240      	lsls	r0, r0, #9
100100ea:	4680      	mov	r8, r0
100100ec:	44c2      	add	sl, r8
100100ee:	4650      	mov	r0, sl
100100f0:	9003      	str	r0, [sp, #12]
100100f2:	0c10      	lsrs	r0, r2, #16
100100f4:	9004      	str	r0, [sp, #16]
100100f6:	4648      	mov	r0, r9
100100f8:	0424      	lsls	r4, r4, #16
100100fa:	0c24      	lsrs	r4, r4, #16
100100fc:	0412      	lsls	r2, r2, #16
100100fe:	1912      	adds	r2, r2, r4
10010100:	9205      	str	r2, [sp, #20]
10010102:	0c2a      	lsrs	r2, r5, #16
10010104:	042d      	lsls	r5, r5, #16
10010106:	0c2d      	lsrs	r5, r5, #16
10010108:	4368      	muls	r0, r5
1001010a:	002c      	movs	r4, r5
1001010c:	4682      	mov	sl, r0
1001010e:	4648      	mov	r0, r9
10010110:	437c      	muls	r4, r7
10010112:	4350      	muls	r0, r2
10010114:	4681      	mov	r9, r0
10010116:	0c20      	lsrs	r0, r4, #16
10010118:	4680      	mov	r8, r0
1001011a:	4357      	muls	r7, r2
1001011c:	4457      	add	r7, sl
1001011e:	4447      	add	r7, r8
10010120:	45ba      	cmp	sl, r7
10010122:	d903      	bls.n	1001012c <__aeabi_dmul+0x274>
10010124:	2080      	movs	r0, #128	; 0x80
10010126:	0240      	lsls	r0, r0, #9
10010128:	4680      	mov	r8, r0
1001012a:	44c1      	add	r9, r8
1001012c:	0c38      	lsrs	r0, r7, #16
1001012e:	043f      	lsls	r7, r7, #16
10010130:	46b8      	mov	r8, r7
10010132:	4448      	add	r0, r9
10010134:	0424      	lsls	r4, r4, #16
10010136:	0c24      	lsrs	r4, r4, #16
10010138:	9001      	str	r0, [sp, #4]
1001013a:	9804      	ldr	r0, [sp, #16]
1001013c:	44a0      	add	r8, r4
1001013e:	4440      	add	r0, r8
10010140:	9004      	str	r0, [sp, #16]
10010142:	4658      	mov	r0, fp
10010144:	0c00      	lsrs	r0, r0, #16
10010146:	4681      	mov	r9, r0
10010148:	4658      	mov	r0, fp
1001014a:	0404      	lsls	r4, r0, #16
1001014c:	0c20      	lsrs	r0, r4, #16
1001014e:	4682      	mov	sl, r0
10010150:	0007      	movs	r7, r0
10010152:	4648      	mov	r0, r9
10010154:	435f      	muls	r7, r3
10010156:	464c      	mov	r4, r9
10010158:	4343      	muls	r3, r0
1001015a:	4660      	mov	r0, ip
1001015c:	4360      	muls	r0, r4
1001015e:	4664      	mov	r4, ip
10010160:	4683      	mov	fp, r0
10010162:	4650      	mov	r0, sl
10010164:	4344      	muls	r4, r0
10010166:	0c38      	lsrs	r0, r7, #16
10010168:	4684      	mov	ip, r0
1001016a:	18e4      	adds	r4, r4, r3
1001016c:	4464      	add	r4, ip
1001016e:	42a3      	cmp	r3, r4
10010170:	d903      	bls.n	1001017a <__aeabi_dmul+0x2c2>
10010172:	2380      	movs	r3, #128	; 0x80
10010174:	025b      	lsls	r3, r3, #9
10010176:	469c      	mov	ip, r3
10010178:	44e3      	add	fp, ip
1001017a:	4648      	mov	r0, r9
1001017c:	043f      	lsls	r7, r7, #16
1001017e:	0c23      	lsrs	r3, r4, #16
10010180:	0c3f      	lsrs	r7, r7, #16
10010182:	0424      	lsls	r4, r4, #16
10010184:	19e4      	adds	r4, r4, r7
10010186:	4657      	mov	r7, sl
10010188:	4368      	muls	r0, r5
1001018a:	436f      	muls	r7, r5
1001018c:	4684      	mov	ip, r0
1001018e:	464d      	mov	r5, r9
10010190:	4650      	mov	r0, sl
10010192:	4355      	muls	r5, r2
10010194:	4342      	muls	r2, r0
10010196:	0c38      	lsrs	r0, r7, #16
10010198:	4681      	mov	r9, r0
1001019a:	4462      	add	r2, ip
1001019c:	444a      	add	r2, r9
1001019e:	445b      	add	r3, fp
100101a0:	4594      	cmp	ip, r2
100101a2:	d903      	bls.n	100101ac <__aeabi_dmul+0x2f4>
100101a4:	2080      	movs	r0, #128	; 0x80
100101a6:	0240      	lsls	r0, r0, #9
100101a8:	4684      	mov	ip, r0
100101aa:	4465      	add	r5, ip
100101ac:	9803      	ldr	r0, [sp, #12]
100101ae:	043f      	lsls	r7, r7, #16
100101b0:	4683      	mov	fp, r0
100101b2:	9804      	ldr	r0, [sp, #16]
100101b4:	0c3f      	lsrs	r7, r7, #16
100101b6:	4684      	mov	ip, r0
100101b8:	44e3      	add	fp, ip
100101ba:	45c3      	cmp	fp, r8
100101bc:	4180      	sbcs	r0, r0
100101be:	4240      	negs	r0, r0
100101c0:	4682      	mov	sl, r0
100101c2:	0410      	lsls	r0, r2, #16
100101c4:	4684      	mov	ip, r0
100101c6:	9801      	ldr	r0, [sp, #4]
100101c8:	4467      	add	r7, ip
100101ca:	4684      	mov	ip, r0
100101cc:	4467      	add	r7, ip
100101ce:	44a3      	add	fp, r4
100101d0:	46bc      	mov	ip, r7
100101d2:	45a3      	cmp	fp, r4
100101d4:	41a4      	sbcs	r4, r4
100101d6:	4699      	mov	r9, r3
100101d8:	44d4      	add	ip, sl
100101da:	4264      	negs	r4, r4
100101dc:	4287      	cmp	r7, r0
100101de:	41bf      	sbcs	r7, r7
100101e0:	45d4      	cmp	ip, sl
100101e2:	4180      	sbcs	r0, r0
100101e4:	44e1      	add	r9, ip
100101e6:	46a0      	mov	r8, r4
100101e8:	4599      	cmp	r9, r3
100101ea:	419b      	sbcs	r3, r3
100101ec:	427f      	negs	r7, r7
100101ee:	4240      	negs	r0, r0
100101f0:	44c8      	add	r8, r9
100101f2:	4307      	orrs	r7, r0
100101f4:	0c12      	lsrs	r2, r2, #16
100101f6:	18ba      	adds	r2, r7, r2
100101f8:	45a0      	cmp	r8, r4
100101fa:	41a4      	sbcs	r4, r4
100101fc:	425f      	negs	r7, r3
100101fe:	003b      	movs	r3, r7
10010200:	4264      	negs	r4, r4
10010202:	4323      	orrs	r3, r4
10010204:	18d7      	adds	r7, r2, r3
10010206:	4643      	mov	r3, r8
10010208:	197d      	adds	r5, r7, r5
1001020a:	0ddb      	lsrs	r3, r3, #23
1001020c:	026d      	lsls	r5, r5, #9
1001020e:	431d      	orrs	r5, r3
10010210:	465b      	mov	r3, fp
10010212:	025a      	lsls	r2, r3, #9
10010214:	9b05      	ldr	r3, [sp, #20]
10010216:	431a      	orrs	r2, r3
10010218:	1e53      	subs	r3, r2, #1
1001021a:	419a      	sbcs	r2, r3
1001021c:	465b      	mov	r3, fp
1001021e:	0ddb      	lsrs	r3, r3, #23
10010220:	431a      	orrs	r2, r3
10010222:	4643      	mov	r3, r8
10010224:	025b      	lsls	r3, r3, #9
10010226:	4313      	orrs	r3, r2
10010228:	01ea      	lsls	r2, r5, #7
1001022a:	d507      	bpl.n	1001023c <__aeabi_dmul+0x384>
1001022c:	2201      	movs	r2, #1
1001022e:	085c      	lsrs	r4, r3, #1
10010230:	4013      	ands	r3, r2
10010232:	4323      	orrs	r3, r4
10010234:	07ea      	lsls	r2, r5, #31
10010236:	9e02      	ldr	r6, [sp, #8]
10010238:	4313      	orrs	r3, r2
1001023a:	086d      	lsrs	r5, r5, #1
1001023c:	4a57      	ldr	r2, [pc, #348]	; (1001039c <__aeabi_dmul+0x4e4>)
1001023e:	18b2      	adds	r2, r6, r2
10010240:	2a00      	cmp	r2, #0
10010242:	dd4b      	ble.n	100102dc <__aeabi_dmul+0x424>
10010244:	0758      	lsls	r0, r3, #29
10010246:	d009      	beq.n	1001025c <__aeabi_dmul+0x3a4>
10010248:	200f      	movs	r0, #15
1001024a:	4018      	ands	r0, r3
1001024c:	2804      	cmp	r0, #4
1001024e:	d005      	beq.n	1001025c <__aeabi_dmul+0x3a4>
10010250:	1d18      	adds	r0, r3, #4
10010252:	4298      	cmp	r0, r3
10010254:	419b      	sbcs	r3, r3
10010256:	425b      	negs	r3, r3
10010258:	18ed      	adds	r5, r5, r3
1001025a:	0003      	movs	r3, r0
1001025c:	01e8      	lsls	r0, r5, #7
1001025e:	d504      	bpl.n	1001026a <__aeabi_dmul+0x3b2>
10010260:	4a4f      	ldr	r2, [pc, #316]	; (100103a0 <__aeabi_dmul+0x4e8>)
10010262:	4015      	ands	r5, r2
10010264:	2280      	movs	r2, #128	; 0x80
10010266:	00d2      	lsls	r2, r2, #3
10010268:	18b2      	adds	r2, r6, r2
1001026a:	484e      	ldr	r0, [pc, #312]	; (100103a4 <__aeabi_dmul+0x4ec>)
1001026c:	4282      	cmp	r2, r0
1001026e:	dd00      	ble.n	10010272 <__aeabi_dmul+0x3ba>
10010270:	e6e7      	b.n	10010042 <__aeabi_dmul+0x18a>
10010272:	2401      	movs	r4, #1
10010274:	08db      	lsrs	r3, r3, #3
10010276:	0768      	lsls	r0, r5, #29
10010278:	4318      	orrs	r0, r3
1001027a:	026d      	lsls	r5, r5, #9
1001027c:	0553      	lsls	r3, r2, #21
1001027e:	4680      	mov	r8, r0
10010280:	0b2d      	lsrs	r5, r5, #12
10010282:	0d5b      	lsrs	r3, r3, #21
10010284:	400c      	ands	r4, r1
10010286:	e67d      	b.n	1000ff84 <__aeabi_dmul+0xcc>
10010288:	2280      	movs	r2, #128	; 0x80
1001028a:	4659      	mov	r1, fp
1001028c:	0312      	lsls	r2, r2, #12
1001028e:	4211      	tst	r1, r2
10010290:	d008      	beq.n	100102a4 <__aeabi_dmul+0x3ec>
10010292:	4215      	tst	r5, r2
10010294:	d106      	bne.n	100102a4 <__aeabi_dmul+0x3ec>
10010296:	4315      	orrs	r5, r2
10010298:	032d      	lsls	r5, r5, #12
1001029a:	4698      	mov	r8, r3
1001029c:	0b2d      	lsrs	r5, r5, #12
1001029e:	464c      	mov	r4, r9
100102a0:	4b41      	ldr	r3, [pc, #260]	; (100103a8 <__aeabi_dmul+0x4f0>)
100102a2:	e66f      	b.n	1000ff84 <__aeabi_dmul+0xcc>
100102a4:	465d      	mov	r5, fp
100102a6:	4315      	orrs	r5, r2
100102a8:	032d      	lsls	r5, r5, #12
100102aa:	0b2d      	lsrs	r5, r5, #12
100102ac:	4b3e      	ldr	r3, [pc, #248]	; (100103a8 <__aeabi_dmul+0x4f0>)
100102ae:	e669      	b.n	1000ff84 <__aeabi_dmul+0xcc>
100102b0:	0003      	movs	r3, r0
100102b2:	4655      	mov	r5, sl
100102b4:	3b28      	subs	r3, #40	; 0x28
100102b6:	409d      	lsls	r5, r3
100102b8:	2300      	movs	r3, #0
100102ba:	e6bc      	b.n	10010036 <__aeabi_dmul+0x17e>
100102bc:	4650      	mov	r0, sl
100102be:	f000 fc75 	bl	10010bac <__clzsi2>
100102c2:	3020      	adds	r0, #32
100102c4:	e6a8      	b.n	10010018 <__aeabi_dmul+0x160>
100102c6:	0003      	movs	r3, r0
100102c8:	3b28      	subs	r3, #40	; 0x28
100102ca:	409f      	lsls	r7, r3
100102cc:	2300      	movs	r3, #0
100102ce:	46bb      	mov	fp, r7
100102d0:	4698      	mov	r8, r3
100102d2:	e689      	b.n	1000ffe8 <__aeabi_dmul+0x130>
100102d4:	f000 fc6a 	bl	10010bac <__clzsi2>
100102d8:	3020      	adds	r0, #32
100102da:	e673      	b.n	1000ffc4 <__aeabi_dmul+0x10c>
100102dc:	2401      	movs	r4, #1
100102de:	1aa6      	subs	r6, r4, r2
100102e0:	2e38      	cmp	r6, #56	; 0x38
100102e2:	dd07      	ble.n	100102f4 <__aeabi_dmul+0x43c>
100102e4:	2200      	movs	r2, #0
100102e6:	400c      	ands	r4, r1
100102e8:	2300      	movs	r3, #0
100102ea:	2500      	movs	r5, #0
100102ec:	4690      	mov	r8, r2
100102ee:	e649      	b.n	1000ff84 <__aeabi_dmul+0xcc>
100102f0:	9e02      	ldr	r6, [sp, #8]
100102f2:	e7a3      	b.n	1001023c <__aeabi_dmul+0x384>
100102f4:	2e1f      	cmp	r6, #31
100102f6:	dc20      	bgt.n	1001033a <__aeabi_dmul+0x482>
100102f8:	2220      	movs	r2, #32
100102fa:	002c      	movs	r4, r5
100102fc:	0018      	movs	r0, r3
100102fe:	1b92      	subs	r2, r2, r6
10010300:	40f0      	lsrs	r0, r6
10010302:	4094      	lsls	r4, r2
10010304:	4093      	lsls	r3, r2
10010306:	4304      	orrs	r4, r0
10010308:	1e58      	subs	r0, r3, #1
1001030a:	4183      	sbcs	r3, r0
1001030c:	431c      	orrs	r4, r3
1001030e:	40f5      	lsrs	r5, r6
10010310:	0763      	lsls	r3, r4, #29
10010312:	d009      	beq.n	10010328 <__aeabi_dmul+0x470>
10010314:	230f      	movs	r3, #15
10010316:	4023      	ands	r3, r4
10010318:	2b04      	cmp	r3, #4
1001031a:	d005      	beq.n	10010328 <__aeabi_dmul+0x470>
1001031c:	0023      	movs	r3, r4
1001031e:	1d1c      	adds	r4, r3, #4
10010320:	429c      	cmp	r4, r3
10010322:	4192      	sbcs	r2, r2
10010324:	4252      	negs	r2, r2
10010326:	18ad      	adds	r5, r5, r2
10010328:	022b      	lsls	r3, r5, #8
1001032a:	d51f      	bpl.n	1001036c <__aeabi_dmul+0x4b4>
1001032c:	2401      	movs	r4, #1
1001032e:	2200      	movs	r2, #0
10010330:	400c      	ands	r4, r1
10010332:	2301      	movs	r3, #1
10010334:	2500      	movs	r5, #0
10010336:	4690      	mov	r8, r2
10010338:	e624      	b.n	1000ff84 <__aeabi_dmul+0xcc>
1001033a:	201f      	movs	r0, #31
1001033c:	002c      	movs	r4, r5
1001033e:	4240      	negs	r0, r0
10010340:	1a82      	subs	r2, r0, r2
10010342:	40d4      	lsrs	r4, r2
10010344:	2e20      	cmp	r6, #32
10010346:	d01c      	beq.n	10010382 <__aeabi_dmul+0x4ca>
10010348:	2240      	movs	r2, #64	; 0x40
1001034a:	1b96      	subs	r6, r2, r6
1001034c:	40b5      	lsls	r5, r6
1001034e:	432b      	orrs	r3, r5
10010350:	1e58      	subs	r0, r3, #1
10010352:	4183      	sbcs	r3, r0
10010354:	2007      	movs	r0, #7
10010356:	4323      	orrs	r3, r4
10010358:	4018      	ands	r0, r3
1001035a:	2500      	movs	r5, #0
1001035c:	2800      	cmp	r0, #0
1001035e:	d009      	beq.n	10010374 <__aeabi_dmul+0x4bc>
10010360:	220f      	movs	r2, #15
10010362:	2500      	movs	r5, #0
10010364:	401a      	ands	r2, r3
10010366:	001c      	movs	r4, r3
10010368:	2a04      	cmp	r2, #4
1001036a:	d1d8      	bne.n	1001031e <__aeabi_dmul+0x466>
1001036c:	0023      	movs	r3, r4
1001036e:	0768      	lsls	r0, r5, #29
10010370:	026d      	lsls	r5, r5, #9
10010372:	0b2d      	lsrs	r5, r5, #12
10010374:	2401      	movs	r4, #1
10010376:	08db      	lsrs	r3, r3, #3
10010378:	4303      	orrs	r3, r0
1001037a:	4698      	mov	r8, r3
1001037c:	400c      	ands	r4, r1
1001037e:	2300      	movs	r3, #0
10010380:	e600      	b.n	1000ff84 <__aeabi_dmul+0xcc>
10010382:	2500      	movs	r5, #0
10010384:	e7e3      	b.n	1001034e <__aeabi_dmul+0x496>
10010386:	2280      	movs	r2, #128	; 0x80
10010388:	2401      	movs	r4, #1
1001038a:	0312      	lsls	r2, r2, #12
1001038c:	4315      	orrs	r5, r2
1001038e:	032d      	lsls	r5, r5, #12
10010390:	4698      	mov	r8, r3
10010392:	0b2d      	lsrs	r5, r5, #12
10010394:	400c      	ands	r4, r1
10010396:	4b04      	ldr	r3, [pc, #16]	; (100103a8 <__aeabi_dmul+0x4f0>)
10010398:	e5f4      	b.n	1000ff84 <__aeabi_dmul+0xcc>
1001039a:	46c0      	nop			; (mov r8, r8)
1001039c:	000003ff 	.word	0x000003ff
100103a0:	feffffff 	.word	0xfeffffff
100103a4:	000007fe 	.word	0x000007fe
100103a8:	000007ff 	.word	0x000007ff

100103ac <__aeabi_dsub>:
100103ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100103ae:	4657      	mov	r7, sl
100103b0:	464e      	mov	r6, r9
100103b2:	4645      	mov	r5, r8
100103b4:	b4e0      	push	{r5, r6, r7}
100103b6:	000e      	movs	r6, r1
100103b8:	0011      	movs	r1, r2
100103ba:	0ff2      	lsrs	r2, r6, #31
100103bc:	4692      	mov	sl, r2
100103be:	00c5      	lsls	r5, r0, #3
100103c0:	0f42      	lsrs	r2, r0, #29
100103c2:	0318      	lsls	r0, r3, #12
100103c4:	0337      	lsls	r7, r6, #12
100103c6:	0074      	lsls	r4, r6, #1
100103c8:	0a40      	lsrs	r0, r0, #9
100103ca:	0f4e      	lsrs	r6, r1, #29
100103cc:	0a7f      	lsrs	r7, r7, #9
100103ce:	4330      	orrs	r0, r6
100103d0:	4ecf      	ldr	r6, [pc, #828]	; (10010710 <__aeabi_dsub+0x364>)
100103d2:	4317      	orrs	r7, r2
100103d4:	005a      	lsls	r2, r3, #1
100103d6:	0d64      	lsrs	r4, r4, #21
100103d8:	0d52      	lsrs	r2, r2, #21
100103da:	0fdb      	lsrs	r3, r3, #31
100103dc:	00c9      	lsls	r1, r1, #3
100103de:	42b2      	cmp	r2, r6
100103e0:	d100      	bne.n	100103e4 <__aeabi_dsub+0x38>
100103e2:	e0e5      	b.n	100105b0 <__aeabi_dsub+0x204>
100103e4:	2601      	movs	r6, #1
100103e6:	4073      	eors	r3, r6
100103e8:	1aa6      	subs	r6, r4, r2
100103ea:	46b4      	mov	ip, r6
100103ec:	4553      	cmp	r3, sl
100103ee:	d100      	bne.n	100103f2 <__aeabi_dsub+0x46>
100103f0:	e0af      	b.n	10010552 <__aeabi_dsub+0x1a6>
100103f2:	2e00      	cmp	r6, #0
100103f4:	dc00      	bgt.n	100103f8 <__aeabi_dsub+0x4c>
100103f6:	e10d      	b.n	10010614 <__aeabi_dsub+0x268>
100103f8:	2a00      	cmp	r2, #0
100103fa:	d13a      	bne.n	10010472 <__aeabi_dsub+0xc6>
100103fc:	0003      	movs	r3, r0
100103fe:	430b      	orrs	r3, r1
10010400:	d000      	beq.n	10010404 <__aeabi_dsub+0x58>
10010402:	e0e4      	b.n	100105ce <__aeabi_dsub+0x222>
10010404:	076b      	lsls	r3, r5, #29
10010406:	d009      	beq.n	1001041c <__aeabi_dsub+0x70>
10010408:	230f      	movs	r3, #15
1001040a:	402b      	ands	r3, r5
1001040c:	2b04      	cmp	r3, #4
1001040e:	d005      	beq.n	1001041c <__aeabi_dsub+0x70>
10010410:	1d2b      	adds	r3, r5, #4
10010412:	42ab      	cmp	r3, r5
10010414:	41ad      	sbcs	r5, r5
10010416:	426d      	negs	r5, r5
10010418:	197f      	adds	r7, r7, r5
1001041a:	001d      	movs	r5, r3
1001041c:	023b      	lsls	r3, r7, #8
1001041e:	d400      	bmi.n	10010422 <__aeabi_dsub+0x76>
10010420:	e088      	b.n	10010534 <__aeabi_dsub+0x188>
10010422:	4bbb      	ldr	r3, [pc, #748]	; (10010710 <__aeabi_dsub+0x364>)
10010424:	3401      	adds	r4, #1
10010426:	429c      	cmp	r4, r3
10010428:	d100      	bne.n	1001042c <__aeabi_dsub+0x80>
1001042a:	e110      	b.n	1001064e <__aeabi_dsub+0x2a2>
1001042c:	003a      	movs	r2, r7
1001042e:	4bb9      	ldr	r3, [pc, #740]	; (10010714 <__aeabi_dsub+0x368>)
10010430:	4651      	mov	r1, sl
10010432:	401a      	ands	r2, r3
10010434:	2301      	movs	r3, #1
10010436:	0750      	lsls	r0, r2, #29
10010438:	08ed      	lsrs	r5, r5, #3
1001043a:	0252      	lsls	r2, r2, #9
1001043c:	0564      	lsls	r4, r4, #21
1001043e:	4305      	orrs	r5, r0
10010440:	0b12      	lsrs	r2, r2, #12
10010442:	0d64      	lsrs	r4, r4, #21
10010444:	400b      	ands	r3, r1
10010446:	2100      	movs	r1, #0
10010448:	0028      	movs	r0, r5
1001044a:	0312      	lsls	r2, r2, #12
1001044c:	0d0d      	lsrs	r5, r1, #20
1001044e:	0b12      	lsrs	r2, r2, #12
10010450:	0564      	lsls	r4, r4, #21
10010452:	052d      	lsls	r5, r5, #20
10010454:	4315      	orrs	r5, r2
10010456:	0862      	lsrs	r2, r4, #1
10010458:	4caf      	ldr	r4, [pc, #700]	; (10010718 <__aeabi_dsub+0x36c>)
1001045a:	07db      	lsls	r3, r3, #31
1001045c:	402c      	ands	r4, r5
1001045e:	4314      	orrs	r4, r2
10010460:	0064      	lsls	r4, r4, #1
10010462:	0864      	lsrs	r4, r4, #1
10010464:	431c      	orrs	r4, r3
10010466:	0021      	movs	r1, r4
10010468:	bc1c      	pop	{r2, r3, r4}
1001046a:	4690      	mov	r8, r2
1001046c:	4699      	mov	r9, r3
1001046e:	46a2      	mov	sl, r4
10010470:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010472:	4ba7      	ldr	r3, [pc, #668]	; (10010710 <__aeabi_dsub+0x364>)
10010474:	429c      	cmp	r4, r3
10010476:	d0c5      	beq.n	10010404 <__aeabi_dsub+0x58>
10010478:	2380      	movs	r3, #128	; 0x80
1001047a:	041b      	lsls	r3, r3, #16
1001047c:	4318      	orrs	r0, r3
1001047e:	4663      	mov	r3, ip
10010480:	2b38      	cmp	r3, #56	; 0x38
10010482:	dd00      	ble.n	10010486 <__aeabi_dsub+0xda>
10010484:	e0fd      	b.n	10010682 <__aeabi_dsub+0x2d6>
10010486:	2b1f      	cmp	r3, #31
10010488:	dd00      	ble.n	1001048c <__aeabi_dsub+0xe0>
1001048a:	e130      	b.n	100106ee <__aeabi_dsub+0x342>
1001048c:	4662      	mov	r2, ip
1001048e:	2320      	movs	r3, #32
10010490:	1a9b      	subs	r3, r3, r2
10010492:	0002      	movs	r2, r0
10010494:	409a      	lsls	r2, r3
10010496:	4666      	mov	r6, ip
10010498:	4690      	mov	r8, r2
1001049a:	000a      	movs	r2, r1
1001049c:	4099      	lsls	r1, r3
1001049e:	40f2      	lsrs	r2, r6
100104a0:	4646      	mov	r6, r8
100104a2:	1e4b      	subs	r3, r1, #1
100104a4:	4199      	sbcs	r1, r3
100104a6:	4332      	orrs	r2, r6
100104a8:	4311      	orrs	r1, r2
100104aa:	4663      	mov	r3, ip
100104ac:	0002      	movs	r2, r0
100104ae:	40da      	lsrs	r2, r3
100104b0:	1a69      	subs	r1, r5, r1
100104b2:	428d      	cmp	r5, r1
100104b4:	419b      	sbcs	r3, r3
100104b6:	000d      	movs	r5, r1
100104b8:	1aba      	subs	r2, r7, r2
100104ba:	425b      	negs	r3, r3
100104bc:	1ad7      	subs	r7, r2, r3
100104be:	023b      	lsls	r3, r7, #8
100104c0:	d535      	bpl.n	1001052e <__aeabi_dsub+0x182>
100104c2:	027a      	lsls	r2, r7, #9
100104c4:	0a53      	lsrs	r3, r2, #9
100104c6:	4698      	mov	r8, r3
100104c8:	4643      	mov	r3, r8
100104ca:	2b00      	cmp	r3, #0
100104cc:	d100      	bne.n	100104d0 <__aeabi_dsub+0x124>
100104ce:	e0c4      	b.n	1001065a <__aeabi_dsub+0x2ae>
100104d0:	4640      	mov	r0, r8
100104d2:	f000 fb6b 	bl	10010bac <__clzsi2>
100104d6:	0003      	movs	r3, r0
100104d8:	3b08      	subs	r3, #8
100104da:	2b1f      	cmp	r3, #31
100104dc:	dd00      	ble.n	100104e0 <__aeabi_dsub+0x134>
100104de:	e0c5      	b.n	1001066c <__aeabi_dsub+0x2c0>
100104e0:	2220      	movs	r2, #32
100104e2:	0029      	movs	r1, r5
100104e4:	1ad2      	subs	r2, r2, r3
100104e6:	4647      	mov	r7, r8
100104e8:	40d1      	lsrs	r1, r2
100104ea:	409f      	lsls	r7, r3
100104ec:	000a      	movs	r2, r1
100104ee:	409d      	lsls	r5, r3
100104f0:	433a      	orrs	r2, r7
100104f2:	429c      	cmp	r4, r3
100104f4:	dd00      	ble.n	100104f8 <__aeabi_dsub+0x14c>
100104f6:	e0c0      	b.n	1001067a <__aeabi_dsub+0x2ce>
100104f8:	1b1c      	subs	r4, r3, r4
100104fa:	1c63      	adds	r3, r4, #1
100104fc:	2b1f      	cmp	r3, #31
100104fe:	dd00      	ble.n	10010502 <__aeabi_dsub+0x156>
10010500:	e0e4      	b.n	100106cc <__aeabi_dsub+0x320>
10010502:	2120      	movs	r1, #32
10010504:	0014      	movs	r4, r2
10010506:	0028      	movs	r0, r5
10010508:	1ac9      	subs	r1, r1, r3
1001050a:	40d8      	lsrs	r0, r3
1001050c:	408c      	lsls	r4, r1
1001050e:	408d      	lsls	r5, r1
10010510:	4304      	orrs	r4, r0
10010512:	40da      	lsrs	r2, r3
10010514:	1e68      	subs	r0, r5, #1
10010516:	4185      	sbcs	r5, r0
10010518:	0017      	movs	r7, r2
1001051a:	4325      	orrs	r5, r4
1001051c:	2400      	movs	r4, #0
1001051e:	e771      	b.n	10010404 <__aeabi_dsub+0x58>
10010520:	4642      	mov	r2, r8
10010522:	4663      	mov	r3, ip
10010524:	431a      	orrs	r2, r3
10010526:	d100      	bne.n	1001052a <__aeabi_dsub+0x17e>
10010528:	e24c      	b.n	100109c4 <__aeabi_dsub+0x618>
1001052a:	4667      	mov	r7, ip
1001052c:	4645      	mov	r5, r8
1001052e:	076b      	lsls	r3, r5, #29
10010530:	d000      	beq.n	10010534 <__aeabi_dsub+0x188>
10010532:	e769      	b.n	10010408 <__aeabi_dsub+0x5c>
10010534:	2301      	movs	r3, #1
10010536:	4651      	mov	r1, sl
10010538:	0778      	lsls	r0, r7, #29
1001053a:	08ed      	lsrs	r5, r5, #3
1001053c:	08fa      	lsrs	r2, r7, #3
1001053e:	400b      	ands	r3, r1
10010540:	4305      	orrs	r5, r0
10010542:	4973      	ldr	r1, [pc, #460]	; (10010710 <__aeabi_dsub+0x364>)
10010544:	428c      	cmp	r4, r1
10010546:	d038      	beq.n	100105ba <__aeabi_dsub+0x20e>
10010548:	0312      	lsls	r2, r2, #12
1001054a:	0564      	lsls	r4, r4, #21
1001054c:	0b12      	lsrs	r2, r2, #12
1001054e:	0d64      	lsrs	r4, r4, #21
10010550:	e779      	b.n	10010446 <__aeabi_dsub+0x9a>
10010552:	2e00      	cmp	r6, #0
10010554:	dc00      	bgt.n	10010558 <__aeabi_dsub+0x1ac>
10010556:	e09a      	b.n	1001068e <__aeabi_dsub+0x2e2>
10010558:	2a00      	cmp	r2, #0
1001055a:	d047      	beq.n	100105ec <__aeabi_dsub+0x240>
1001055c:	4a6c      	ldr	r2, [pc, #432]	; (10010710 <__aeabi_dsub+0x364>)
1001055e:	4294      	cmp	r4, r2
10010560:	d100      	bne.n	10010564 <__aeabi_dsub+0x1b8>
10010562:	e74f      	b.n	10010404 <__aeabi_dsub+0x58>
10010564:	2280      	movs	r2, #128	; 0x80
10010566:	0412      	lsls	r2, r2, #16
10010568:	4310      	orrs	r0, r2
1001056a:	4662      	mov	r2, ip
1001056c:	2a38      	cmp	r2, #56	; 0x38
1001056e:	dc00      	bgt.n	10010572 <__aeabi_dsub+0x1c6>
10010570:	e108      	b.n	10010784 <__aeabi_dsub+0x3d8>
10010572:	4301      	orrs	r1, r0
10010574:	1e48      	subs	r0, r1, #1
10010576:	4181      	sbcs	r1, r0
10010578:	2200      	movs	r2, #0
1001057a:	b2c9      	uxtb	r1, r1
1001057c:	1949      	adds	r1, r1, r5
1001057e:	19d2      	adds	r2, r2, r7
10010580:	42a9      	cmp	r1, r5
10010582:	41bf      	sbcs	r7, r7
10010584:	000d      	movs	r5, r1
10010586:	427f      	negs	r7, r7
10010588:	18bf      	adds	r7, r7, r2
1001058a:	023a      	lsls	r2, r7, #8
1001058c:	d400      	bmi.n	10010590 <__aeabi_dsub+0x1e4>
1001058e:	e142      	b.n	10010816 <__aeabi_dsub+0x46a>
10010590:	4a5f      	ldr	r2, [pc, #380]	; (10010710 <__aeabi_dsub+0x364>)
10010592:	3401      	adds	r4, #1
10010594:	4294      	cmp	r4, r2
10010596:	d100      	bne.n	1001059a <__aeabi_dsub+0x1ee>
10010598:	e14e      	b.n	10010838 <__aeabi_dsub+0x48c>
1001059a:	2001      	movs	r0, #1
1001059c:	4a5d      	ldr	r2, [pc, #372]	; (10010714 <__aeabi_dsub+0x368>)
1001059e:	0869      	lsrs	r1, r5, #1
100105a0:	403a      	ands	r2, r7
100105a2:	4028      	ands	r0, r5
100105a4:	4308      	orrs	r0, r1
100105a6:	07d5      	lsls	r5, r2, #31
100105a8:	4305      	orrs	r5, r0
100105aa:	0857      	lsrs	r7, r2, #1
100105ac:	469a      	mov	sl, r3
100105ae:	e729      	b.n	10010404 <__aeabi_dsub+0x58>
100105b0:	0006      	movs	r6, r0
100105b2:	430e      	orrs	r6, r1
100105b4:	d000      	beq.n	100105b8 <__aeabi_dsub+0x20c>
100105b6:	e717      	b.n	100103e8 <__aeabi_dsub+0x3c>
100105b8:	e714      	b.n	100103e4 <__aeabi_dsub+0x38>
100105ba:	0029      	movs	r1, r5
100105bc:	4311      	orrs	r1, r2
100105be:	d100      	bne.n	100105c2 <__aeabi_dsub+0x216>
100105c0:	e1f9      	b.n	100109b6 <__aeabi_dsub+0x60a>
100105c2:	2180      	movs	r1, #128	; 0x80
100105c4:	0309      	lsls	r1, r1, #12
100105c6:	430a      	orrs	r2, r1
100105c8:	0312      	lsls	r2, r2, #12
100105ca:	0b12      	lsrs	r2, r2, #12
100105cc:	e73b      	b.n	10010446 <__aeabi_dsub+0x9a>
100105ce:	2301      	movs	r3, #1
100105d0:	425b      	negs	r3, r3
100105d2:	4698      	mov	r8, r3
100105d4:	44c4      	add	ip, r8
100105d6:	4663      	mov	r3, ip
100105d8:	2b00      	cmp	r3, #0
100105da:	d172      	bne.n	100106c2 <__aeabi_dsub+0x316>
100105dc:	1a69      	subs	r1, r5, r1
100105de:	428d      	cmp	r5, r1
100105e0:	419b      	sbcs	r3, r3
100105e2:	1a3f      	subs	r7, r7, r0
100105e4:	425b      	negs	r3, r3
100105e6:	1aff      	subs	r7, r7, r3
100105e8:	000d      	movs	r5, r1
100105ea:	e768      	b.n	100104be <__aeabi_dsub+0x112>
100105ec:	0002      	movs	r2, r0
100105ee:	430a      	orrs	r2, r1
100105f0:	d100      	bne.n	100105f4 <__aeabi_dsub+0x248>
100105f2:	e707      	b.n	10010404 <__aeabi_dsub+0x58>
100105f4:	2201      	movs	r2, #1
100105f6:	4252      	negs	r2, r2
100105f8:	4690      	mov	r8, r2
100105fa:	44c4      	add	ip, r8
100105fc:	4662      	mov	r2, ip
100105fe:	2a00      	cmp	r2, #0
10010600:	d000      	beq.n	10010604 <__aeabi_dsub+0x258>
10010602:	e0e6      	b.n	100107d2 <__aeabi_dsub+0x426>
10010604:	1869      	adds	r1, r5, r1
10010606:	42a9      	cmp	r1, r5
10010608:	41b6      	sbcs	r6, r6
1001060a:	183f      	adds	r7, r7, r0
1001060c:	4276      	negs	r6, r6
1001060e:	19f7      	adds	r7, r6, r7
10010610:	000d      	movs	r5, r1
10010612:	e7ba      	b.n	1001058a <__aeabi_dsub+0x1de>
10010614:	2e00      	cmp	r6, #0
10010616:	d000      	beq.n	1001061a <__aeabi_dsub+0x26e>
10010618:	e080      	b.n	1001071c <__aeabi_dsub+0x370>
1001061a:	1c62      	adds	r2, r4, #1
1001061c:	0552      	lsls	r2, r2, #21
1001061e:	0d52      	lsrs	r2, r2, #21
10010620:	2a01      	cmp	r2, #1
10010622:	dc00      	bgt.n	10010626 <__aeabi_dsub+0x27a>
10010624:	e0f9      	b.n	1001081a <__aeabi_dsub+0x46e>
10010626:	1a6a      	subs	r2, r5, r1
10010628:	4691      	mov	r9, r2
1001062a:	454d      	cmp	r5, r9
1001062c:	41b6      	sbcs	r6, r6
1001062e:	1a3a      	subs	r2, r7, r0
10010630:	4276      	negs	r6, r6
10010632:	1b92      	subs	r2, r2, r6
10010634:	4690      	mov	r8, r2
10010636:	0212      	lsls	r2, r2, #8
10010638:	d400      	bmi.n	1001063c <__aeabi_dsub+0x290>
1001063a:	e099      	b.n	10010770 <__aeabi_dsub+0x3c4>
1001063c:	1b4d      	subs	r5, r1, r5
1001063e:	42a9      	cmp	r1, r5
10010640:	4189      	sbcs	r1, r1
10010642:	1bc7      	subs	r7, r0, r7
10010644:	4249      	negs	r1, r1
10010646:	1a7a      	subs	r2, r7, r1
10010648:	4690      	mov	r8, r2
1001064a:	469a      	mov	sl, r3
1001064c:	e73c      	b.n	100104c8 <__aeabi_dsub+0x11c>
1001064e:	4652      	mov	r2, sl
10010650:	2301      	movs	r3, #1
10010652:	2500      	movs	r5, #0
10010654:	4013      	ands	r3, r2
10010656:	2200      	movs	r2, #0
10010658:	e6f5      	b.n	10010446 <__aeabi_dsub+0x9a>
1001065a:	0028      	movs	r0, r5
1001065c:	f000 faa6 	bl	10010bac <__clzsi2>
10010660:	3020      	adds	r0, #32
10010662:	0003      	movs	r3, r0
10010664:	3b08      	subs	r3, #8
10010666:	2b1f      	cmp	r3, #31
10010668:	dc00      	bgt.n	1001066c <__aeabi_dsub+0x2c0>
1001066a:	e739      	b.n	100104e0 <__aeabi_dsub+0x134>
1001066c:	002a      	movs	r2, r5
1001066e:	3828      	subs	r0, #40	; 0x28
10010670:	4082      	lsls	r2, r0
10010672:	2500      	movs	r5, #0
10010674:	429c      	cmp	r4, r3
10010676:	dc00      	bgt.n	1001067a <__aeabi_dsub+0x2ce>
10010678:	e73e      	b.n	100104f8 <__aeabi_dsub+0x14c>
1001067a:	4f26      	ldr	r7, [pc, #152]	; (10010714 <__aeabi_dsub+0x368>)
1001067c:	1ae4      	subs	r4, r4, r3
1001067e:	4017      	ands	r7, r2
10010680:	e6c0      	b.n	10010404 <__aeabi_dsub+0x58>
10010682:	4301      	orrs	r1, r0
10010684:	1e48      	subs	r0, r1, #1
10010686:	4181      	sbcs	r1, r0
10010688:	2200      	movs	r2, #0
1001068a:	b2c9      	uxtb	r1, r1
1001068c:	e710      	b.n	100104b0 <__aeabi_dsub+0x104>
1001068e:	2e00      	cmp	r6, #0
10010690:	d000      	beq.n	10010694 <__aeabi_dsub+0x2e8>
10010692:	e0f1      	b.n	10010878 <__aeabi_dsub+0x4cc>
10010694:	1c62      	adds	r2, r4, #1
10010696:	4694      	mov	ip, r2
10010698:	0552      	lsls	r2, r2, #21
1001069a:	0d52      	lsrs	r2, r2, #21
1001069c:	2a01      	cmp	r2, #1
1001069e:	dc00      	bgt.n	100106a2 <__aeabi_dsub+0x2f6>
100106a0:	e0a0      	b.n	100107e4 <__aeabi_dsub+0x438>
100106a2:	4a1b      	ldr	r2, [pc, #108]	; (10010710 <__aeabi_dsub+0x364>)
100106a4:	4594      	cmp	ip, r2
100106a6:	d100      	bne.n	100106aa <__aeabi_dsub+0x2fe>
100106a8:	e0c5      	b.n	10010836 <__aeabi_dsub+0x48a>
100106aa:	1869      	adds	r1, r5, r1
100106ac:	42a9      	cmp	r1, r5
100106ae:	4192      	sbcs	r2, r2
100106b0:	183f      	adds	r7, r7, r0
100106b2:	4252      	negs	r2, r2
100106b4:	19d2      	adds	r2, r2, r7
100106b6:	0849      	lsrs	r1, r1, #1
100106b8:	07d5      	lsls	r5, r2, #31
100106ba:	430d      	orrs	r5, r1
100106bc:	0857      	lsrs	r7, r2, #1
100106be:	4664      	mov	r4, ip
100106c0:	e6a0      	b.n	10010404 <__aeabi_dsub+0x58>
100106c2:	4b13      	ldr	r3, [pc, #76]	; (10010710 <__aeabi_dsub+0x364>)
100106c4:	429c      	cmp	r4, r3
100106c6:	d000      	beq.n	100106ca <__aeabi_dsub+0x31e>
100106c8:	e6d9      	b.n	1001047e <__aeabi_dsub+0xd2>
100106ca:	e69b      	b.n	10010404 <__aeabi_dsub+0x58>
100106cc:	0011      	movs	r1, r2
100106ce:	3c1f      	subs	r4, #31
100106d0:	40e1      	lsrs	r1, r4
100106d2:	000c      	movs	r4, r1
100106d4:	2b20      	cmp	r3, #32
100106d6:	d100      	bne.n	100106da <__aeabi_dsub+0x32e>
100106d8:	e080      	b.n	100107dc <__aeabi_dsub+0x430>
100106da:	2140      	movs	r1, #64	; 0x40
100106dc:	1acb      	subs	r3, r1, r3
100106de:	409a      	lsls	r2, r3
100106e0:	4315      	orrs	r5, r2
100106e2:	1e6a      	subs	r2, r5, #1
100106e4:	4195      	sbcs	r5, r2
100106e6:	2700      	movs	r7, #0
100106e8:	4325      	orrs	r5, r4
100106ea:	2400      	movs	r4, #0
100106ec:	e71f      	b.n	1001052e <__aeabi_dsub+0x182>
100106ee:	4663      	mov	r3, ip
100106f0:	0002      	movs	r2, r0
100106f2:	3b20      	subs	r3, #32
100106f4:	40da      	lsrs	r2, r3
100106f6:	4663      	mov	r3, ip
100106f8:	2b20      	cmp	r3, #32
100106fa:	d071      	beq.n	100107e0 <__aeabi_dsub+0x434>
100106fc:	2340      	movs	r3, #64	; 0x40
100106fe:	4666      	mov	r6, ip
10010700:	1b9b      	subs	r3, r3, r6
10010702:	4098      	lsls	r0, r3
10010704:	4301      	orrs	r1, r0
10010706:	1e48      	subs	r0, r1, #1
10010708:	4181      	sbcs	r1, r0
1001070a:	4311      	orrs	r1, r2
1001070c:	2200      	movs	r2, #0
1001070e:	e6cf      	b.n	100104b0 <__aeabi_dsub+0x104>
10010710:	000007ff 	.word	0x000007ff
10010714:	ff7fffff 	.word	0xff7fffff
10010718:	800fffff 	.word	0x800fffff
1001071c:	2c00      	cmp	r4, #0
1001071e:	d048      	beq.n	100107b2 <__aeabi_dsub+0x406>
10010720:	4cca      	ldr	r4, [pc, #808]	; (10010a4c <__aeabi_dsub+0x6a0>)
10010722:	42a2      	cmp	r2, r4
10010724:	d100      	bne.n	10010728 <__aeabi_dsub+0x37c>
10010726:	e0a2      	b.n	1001086e <__aeabi_dsub+0x4c2>
10010728:	4274      	negs	r4, r6
1001072a:	46a1      	mov	r9, r4
1001072c:	2480      	movs	r4, #128	; 0x80
1001072e:	0424      	lsls	r4, r4, #16
10010730:	4327      	orrs	r7, r4
10010732:	464c      	mov	r4, r9
10010734:	2c38      	cmp	r4, #56	; 0x38
10010736:	dd00      	ble.n	1001073a <__aeabi_dsub+0x38e>
10010738:	e0db      	b.n	100108f2 <__aeabi_dsub+0x546>
1001073a:	2c1f      	cmp	r4, #31
1001073c:	dd00      	ble.n	10010740 <__aeabi_dsub+0x394>
1001073e:	e144      	b.n	100109ca <__aeabi_dsub+0x61e>
10010740:	464e      	mov	r6, r9
10010742:	2420      	movs	r4, #32
10010744:	1ba4      	subs	r4, r4, r6
10010746:	003e      	movs	r6, r7
10010748:	40a6      	lsls	r6, r4
1001074a:	46a2      	mov	sl, r4
1001074c:	46b0      	mov	r8, r6
1001074e:	464c      	mov	r4, r9
10010750:	002e      	movs	r6, r5
10010752:	40e6      	lsrs	r6, r4
10010754:	46b4      	mov	ip, r6
10010756:	4646      	mov	r6, r8
10010758:	4664      	mov	r4, ip
1001075a:	4326      	orrs	r6, r4
1001075c:	4654      	mov	r4, sl
1001075e:	40a5      	lsls	r5, r4
10010760:	1e6c      	subs	r4, r5, #1
10010762:	41a5      	sbcs	r5, r4
10010764:	0034      	movs	r4, r6
10010766:	432c      	orrs	r4, r5
10010768:	464d      	mov	r5, r9
1001076a:	40ef      	lsrs	r7, r5
1001076c:	1b0d      	subs	r5, r1, r4
1001076e:	e028      	b.n	100107c2 <__aeabi_dsub+0x416>
10010770:	464a      	mov	r2, r9
10010772:	4643      	mov	r3, r8
10010774:	464d      	mov	r5, r9
10010776:	431a      	orrs	r2, r3
10010778:	d000      	beq.n	1001077c <__aeabi_dsub+0x3d0>
1001077a:	e6a5      	b.n	100104c8 <__aeabi_dsub+0x11c>
1001077c:	2300      	movs	r3, #0
1001077e:	2400      	movs	r4, #0
10010780:	2500      	movs	r5, #0
10010782:	e6de      	b.n	10010542 <__aeabi_dsub+0x196>
10010784:	2a1f      	cmp	r2, #31
10010786:	dc5a      	bgt.n	1001083e <__aeabi_dsub+0x492>
10010788:	4666      	mov	r6, ip
1001078a:	2220      	movs	r2, #32
1001078c:	1b92      	subs	r2, r2, r6
1001078e:	0006      	movs	r6, r0
10010790:	4096      	lsls	r6, r2
10010792:	4691      	mov	r9, r2
10010794:	46b0      	mov	r8, r6
10010796:	4662      	mov	r2, ip
10010798:	000e      	movs	r6, r1
1001079a:	40d6      	lsrs	r6, r2
1001079c:	4642      	mov	r2, r8
1001079e:	4316      	orrs	r6, r2
100107a0:	464a      	mov	r2, r9
100107a2:	4091      	lsls	r1, r2
100107a4:	1e4a      	subs	r2, r1, #1
100107a6:	4191      	sbcs	r1, r2
100107a8:	0002      	movs	r2, r0
100107aa:	4660      	mov	r0, ip
100107ac:	4331      	orrs	r1, r6
100107ae:	40c2      	lsrs	r2, r0
100107b0:	e6e4      	b.n	1001057c <__aeabi_dsub+0x1d0>
100107b2:	003c      	movs	r4, r7
100107b4:	432c      	orrs	r4, r5
100107b6:	d05a      	beq.n	1001086e <__aeabi_dsub+0x4c2>
100107b8:	43f4      	mvns	r4, r6
100107ba:	46a1      	mov	r9, r4
100107bc:	2c00      	cmp	r4, #0
100107be:	d152      	bne.n	10010866 <__aeabi_dsub+0x4ba>
100107c0:	1b4d      	subs	r5, r1, r5
100107c2:	42a9      	cmp	r1, r5
100107c4:	4189      	sbcs	r1, r1
100107c6:	1bc7      	subs	r7, r0, r7
100107c8:	4249      	negs	r1, r1
100107ca:	1a7f      	subs	r7, r7, r1
100107cc:	0014      	movs	r4, r2
100107ce:	469a      	mov	sl, r3
100107d0:	e675      	b.n	100104be <__aeabi_dsub+0x112>
100107d2:	4a9e      	ldr	r2, [pc, #632]	; (10010a4c <__aeabi_dsub+0x6a0>)
100107d4:	4294      	cmp	r4, r2
100107d6:	d000      	beq.n	100107da <__aeabi_dsub+0x42e>
100107d8:	e6c7      	b.n	1001056a <__aeabi_dsub+0x1be>
100107da:	e613      	b.n	10010404 <__aeabi_dsub+0x58>
100107dc:	2200      	movs	r2, #0
100107de:	e77f      	b.n	100106e0 <__aeabi_dsub+0x334>
100107e0:	2000      	movs	r0, #0
100107e2:	e78f      	b.n	10010704 <__aeabi_dsub+0x358>
100107e4:	2c00      	cmp	r4, #0
100107e6:	d000      	beq.n	100107ea <__aeabi_dsub+0x43e>
100107e8:	e0c8      	b.n	1001097c <__aeabi_dsub+0x5d0>
100107ea:	003b      	movs	r3, r7
100107ec:	432b      	orrs	r3, r5
100107ee:	d100      	bne.n	100107f2 <__aeabi_dsub+0x446>
100107f0:	e10f      	b.n	10010a12 <__aeabi_dsub+0x666>
100107f2:	0003      	movs	r3, r0
100107f4:	430b      	orrs	r3, r1
100107f6:	d100      	bne.n	100107fa <__aeabi_dsub+0x44e>
100107f8:	e604      	b.n	10010404 <__aeabi_dsub+0x58>
100107fa:	1869      	adds	r1, r5, r1
100107fc:	42a9      	cmp	r1, r5
100107fe:	419b      	sbcs	r3, r3
10010800:	183f      	adds	r7, r7, r0
10010802:	425b      	negs	r3, r3
10010804:	19df      	adds	r7, r3, r7
10010806:	023b      	lsls	r3, r7, #8
10010808:	d400      	bmi.n	1001080c <__aeabi_dsub+0x460>
1001080a:	e11a      	b.n	10010a42 <__aeabi_dsub+0x696>
1001080c:	4b90      	ldr	r3, [pc, #576]	; (10010a50 <__aeabi_dsub+0x6a4>)
1001080e:	000d      	movs	r5, r1
10010810:	401f      	ands	r7, r3
10010812:	4664      	mov	r4, ip
10010814:	e5f6      	b.n	10010404 <__aeabi_dsub+0x58>
10010816:	469a      	mov	sl, r3
10010818:	e689      	b.n	1001052e <__aeabi_dsub+0x182>
1001081a:	003a      	movs	r2, r7
1001081c:	432a      	orrs	r2, r5
1001081e:	2c00      	cmp	r4, #0
10010820:	d15c      	bne.n	100108dc <__aeabi_dsub+0x530>
10010822:	2a00      	cmp	r2, #0
10010824:	d175      	bne.n	10010912 <__aeabi_dsub+0x566>
10010826:	0002      	movs	r2, r0
10010828:	430a      	orrs	r2, r1
1001082a:	d100      	bne.n	1001082e <__aeabi_dsub+0x482>
1001082c:	e0ca      	b.n	100109c4 <__aeabi_dsub+0x618>
1001082e:	0007      	movs	r7, r0
10010830:	000d      	movs	r5, r1
10010832:	469a      	mov	sl, r3
10010834:	e5e6      	b.n	10010404 <__aeabi_dsub+0x58>
10010836:	4664      	mov	r4, ip
10010838:	2200      	movs	r2, #0
1001083a:	2500      	movs	r5, #0
1001083c:	e681      	b.n	10010542 <__aeabi_dsub+0x196>
1001083e:	4662      	mov	r2, ip
10010840:	0006      	movs	r6, r0
10010842:	3a20      	subs	r2, #32
10010844:	40d6      	lsrs	r6, r2
10010846:	4662      	mov	r2, ip
10010848:	46b0      	mov	r8, r6
1001084a:	2a20      	cmp	r2, #32
1001084c:	d100      	bne.n	10010850 <__aeabi_dsub+0x4a4>
1001084e:	e0b7      	b.n	100109c0 <__aeabi_dsub+0x614>
10010850:	2240      	movs	r2, #64	; 0x40
10010852:	4666      	mov	r6, ip
10010854:	1b92      	subs	r2, r2, r6
10010856:	4090      	lsls	r0, r2
10010858:	4301      	orrs	r1, r0
1001085a:	4642      	mov	r2, r8
1001085c:	1e48      	subs	r0, r1, #1
1001085e:	4181      	sbcs	r1, r0
10010860:	4311      	orrs	r1, r2
10010862:	2200      	movs	r2, #0
10010864:	e68a      	b.n	1001057c <__aeabi_dsub+0x1d0>
10010866:	4c79      	ldr	r4, [pc, #484]	; (10010a4c <__aeabi_dsub+0x6a0>)
10010868:	42a2      	cmp	r2, r4
1001086a:	d000      	beq.n	1001086e <__aeabi_dsub+0x4c2>
1001086c:	e761      	b.n	10010732 <__aeabi_dsub+0x386>
1001086e:	0007      	movs	r7, r0
10010870:	000d      	movs	r5, r1
10010872:	0014      	movs	r4, r2
10010874:	469a      	mov	sl, r3
10010876:	e5c5      	b.n	10010404 <__aeabi_dsub+0x58>
10010878:	2c00      	cmp	r4, #0
1001087a:	d141      	bne.n	10010900 <__aeabi_dsub+0x554>
1001087c:	003c      	movs	r4, r7
1001087e:	432c      	orrs	r4, r5
10010880:	d078      	beq.n	10010974 <__aeabi_dsub+0x5c8>
10010882:	43f4      	mvns	r4, r6
10010884:	46a1      	mov	r9, r4
10010886:	2c00      	cmp	r4, #0
10010888:	d020      	beq.n	100108cc <__aeabi_dsub+0x520>
1001088a:	4c70      	ldr	r4, [pc, #448]	; (10010a4c <__aeabi_dsub+0x6a0>)
1001088c:	42a2      	cmp	r2, r4
1001088e:	d071      	beq.n	10010974 <__aeabi_dsub+0x5c8>
10010890:	464c      	mov	r4, r9
10010892:	2c38      	cmp	r4, #56	; 0x38
10010894:	dd00      	ble.n	10010898 <__aeabi_dsub+0x4ec>
10010896:	e0b2      	b.n	100109fe <__aeabi_dsub+0x652>
10010898:	2c1f      	cmp	r4, #31
1001089a:	dd00      	ble.n	1001089e <__aeabi_dsub+0x4f2>
1001089c:	e0bc      	b.n	10010a18 <__aeabi_dsub+0x66c>
1001089e:	2620      	movs	r6, #32
100108a0:	1b34      	subs	r4, r6, r4
100108a2:	46a2      	mov	sl, r4
100108a4:	003c      	movs	r4, r7
100108a6:	4656      	mov	r6, sl
100108a8:	40b4      	lsls	r4, r6
100108aa:	464e      	mov	r6, r9
100108ac:	46a0      	mov	r8, r4
100108ae:	002c      	movs	r4, r5
100108b0:	40f4      	lsrs	r4, r6
100108b2:	46a4      	mov	ip, r4
100108b4:	4644      	mov	r4, r8
100108b6:	4666      	mov	r6, ip
100108b8:	4334      	orrs	r4, r6
100108ba:	46a4      	mov	ip, r4
100108bc:	4654      	mov	r4, sl
100108be:	40a5      	lsls	r5, r4
100108c0:	4664      	mov	r4, ip
100108c2:	1e6e      	subs	r6, r5, #1
100108c4:	41b5      	sbcs	r5, r6
100108c6:	4325      	orrs	r5, r4
100108c8:	464c      	mov	r4, r9
100108ca:	40e7      	lsrs	r7, r4
100108cc:	186d      	adds	r5, r5, r1
100108ce:	428d      	cmp	r5, r1
100108d0:	4189      	sbcs	r1, r1
100108d2:	183f      	adds	r7, r7, r0
100108d4:	4249      	negs	r1, r1
100108d6:	19cf      	adds	r7, r1, r7
100108d8:	0014      	movs	r4, r2
100108da:	e656      	b.n	1001058a <__aeabi_dsub+0x1de>
100108dc:	2a00      	cmp	r2, #0
100108de:	d12f      	bne.n	10010940 <__aeabi_dsub+0x594>
100108e0:	0002      	movs	r2, r0
100108e2:	430a      	orrs	r2, r1
100108e4:	d100      	bne.n	100108e8 <__aeabi_dsub+0x53c>
100108e6:	e084      	b.n	100109f2 <__aeabi_dsub+0x646>
100108e8:	0007      	movs	r7, r0
100108ea:	000d      	movs	r5, r1
100108ec:	469a      	mov	sl, r3
100108ee:	4c57      	ldr	r4, [pc, #348]	; (10010a4c <__aeabi_dsub+0x6a0>)
100108f0:	e588      	b.n	10010404 <__aeabi_dsub+0x58>
100108f2:	433d      	orrs	r5, r7
100108f4:	1e6f      	subs	r7, r5, #1
100108f6:	41bd      	sbcs	r5, r7
100108f8:	b2ec      	uxtb	r4, r5
100108fa:	2700      	movs	r7, #0
100108fc:	1b0d      	subs	r5, r1, r4
100108fe:	e760      	b.n	100107c2 <__aeabi_dsub+0x416>
10010900:	4c52      	ldr	r4, [pc, #328]	; (10010a4c <__aeabi_dsub+0x6a0>)
10010902:	42a2      	cmp	r2, r4
10010904:	d036      	beq.n	10010974 <__aeabi_dsub+0x5c8>
10010906:	4274      	negs	r4, r6
10010908:	2680      	movs	r6, #128	; 0x80
1001090a:	0436      	lsls	r6, r6, #16
1001090c:	46a1      	mov	r9, r4
1001090e:	4337      	orrs	r7, r6
10010910:	e7be      	b.n	10010890 <__aeabi_dsub+0x4e4>
10010912:	0002      	movs	r2, r0
10010914:	430a      	orrs	r2, r1
10010916:	d100      	bne.n	1001091a <__aeabi_dsub+0x56e>
10010918:	e574      	b.n	10010404 <__aeabi_dsub+0x58>
1001091a:	1a6a      	subs	r2, r5, r1
1001091c:	4690      	mov	r8, r2
1001091e:	4545      	cmp	r5, r8
10010920:	41b6      	sbcs	r6, r6
10010922:	1a3a      	subs	r2, r7, r0
10010924:	4276      	negs	r6, r6
10010926:	1b92      	subs	r2, r2, r6
10010928:	4694      	mov	ip, r2
1001092a:	0212      	lsls	r2, r2, #8
1001092c:	d400      	bmi.n	10010930 <__aeabi_dsub+0x584>
1001092e:	e5f7      	b.n	10010520 <__aeabi_dsub+0x174>
10010930:	1b4d      	subs	r5, r1, r5
10010932:	42a9      	cmp	r1, r5
10010934:	4189      	sbcs	r1, r1
10010936:	1bc7      	subs	r7, r0, r7
10010938:	4249      	negs	r1, r1
1001093a:	1a7f      	subs	r7, r7, r1
1001093c:	469a      	mov	sl, r3
1001093e:	e561      	b.n	10010404 <__aeabi_dsub+0x58>
10010940:	0002      	movs	r2, r0
10010942:	430a      	orrs	r2, r1
10010944:	d03a      	beq.n	100109bc <__aeabi_dsub+0x610>
10010946:	08ed      	lsrs	r5, r5, #3
10010948:	077c      	lsls	r4, r7, #29
1001094a:	432c      	orrs	r4, r5
1001094c:	2580      	movs	r5, #128	; 0x80
1001094e:	08fa      	lsrs	r2, r7, #3
10010950:	032d      	lsls	r5, r5, #12
10010952:	422a      	tst	r2, r5
10010954:	d008      	beq.n	10010968 <__aeabi_dsub+0x5bc>
10010956:	08c7      	lsrs	r7, r0, #3
10010958:	422f      	tst	r7, r5
1001095a:	d105      	bne.n	10010968 <__aeabi_dsub+0x5bc>
1001095c:	0745      	lsls	r5, r0, #29
1001095e:	002c      	movs	r4, r5
10010960:	003a      	movs	r2, r7
10010962:	469a      	mov	sl, r3
10010964:	08c9      	lsrs	r1, r1, #3
10010966:	430c      	orrs	r4, r1
10010968:	0f67      	lsrs	r7, r4, #29
1001096a:	00d2      	lsls	r2, r2, #3
1001096c:	00e5      	lsls	r5, r4, #3
1001096e:	4317      	orrs	r7, r2
10010970:	4c36      	ldr	r4, [pc, #216]	; (10010a4c <__aeabi_dsub+0x6a0>)
10010972:	e547      	b.n	10010404 <__aeabi_dsub+0x58>
10010974:	0007      	movs	r7, r0
10010976:	000d      	movs	r5, r1
10010978:	0014      	movs	r4, r2
1001097a:	e543      	b.n	10010404 <__aeabi_dsub+0x58>
1001097c:	003a      	movs	r2, r7
1001097e:	432a      	orrs	r2, r5
10010980:	d043      	beq.n	10010a0a <__aeabi_dsub+0x65e>
10010982:	0002      	movs	r2, r0
10010984:	430a      	orrs	r2, r1
10010986:	d019      	beq.n	100109bc <__aeabi_dsub+0x610>
10010988:	08ed      	lsrs	r5, r5, #3
1001098a:	077c      	lsls	r4, r7, #29
1001098c:	432c      	orrs	r4, r5
1001098e:	2580      	movs	r5, #128	; 0x80
10010990:	08fa      	lsrs	r2, r7, #3
10010992:	032d      	lsls	r5, r5, #12
10010994:	422a      	tst	r2, r5
10010996:	d007      	beq.n	100109a8 <__aeabi_dsub+0x5fc>
10010998:	08c6      	lsrs	r6, r0, #3
1001099a:	422e      	tst	r6, r5
1001099c:	d104      	bne.n	100109a8 <__aeabi_dsub+0x5fc>
1001099e:	0747      	lsls	r7, r0, #29
100109a0:	003c      	movs	r4, r7
100109a2:	0032      	movs	r2, r6
100109a4:	08c9      	lsrs	r1, r1, #3
100109a6:	430c      	orrs	r4, r1
100109a8:	00d7      	lsls	r7, r2, #3
100109aa:	0f62      	lsrs	r2, r4, #29
100109ac:	00e5      	lsls	r5, r4, #3
100109ae:	4317      	orrs	r7, r2
100109b0:	469a      	mov	sl, r3
100109b2:	4c26      	ldr	r4, [pc, #152]	; (10010a4c <__aeabi_dsub+0x6a0>)
100109b4:	e526      	b.n	10010404 <__aeabi_dsub+0x58>
100109b6:	2200      	movs	r2, #0
100109b8:	2500      	movs	r5, #0
100109ba:	e544      	b.n	10010446 <__aeabi_dsub+0x9a>
100109bc:	4c23      	ldr	r4, [pc, #140]	; (10010a4c <__aeabi_dsub+0x6a0>)
100109be:	e521      	b.n	10010404 <__aeabi_dsub+0x58>
100109c0:	2000      	movs	r0, #0
100109c2:	e749      	b.n	10010858 <__aeabi_dsub+0x4ac>
100109c4:	2300      	movs	r3, #0
100109c6:	2500      	movs	r5, #0
100109c8:	e5bb      	b.n	10010542 <__aeabi_dsub+0x196>
100109ca:	464c      	mov	r4, r9
100109cc:	003e      	movs	r6, r7
100109ce:	3c20      	subs	r4, #32
100109d0:	40e6      	lsrs	r6, r4
100109d2:	464c      	mov	r4, r9
100109d4:	46b4      	mov	ip, r6
100109d6:	2c20      	cmp	r4, #32
100109d8:	d031      	beq.n	10010a3e <__aeabi_dsub+0x692>
100109da:	2440      	movs	r4, #64	; 0x40
100109dc:	464e      	mov	r6, r9
100109de:	1ba6      	subs	r6, r4, r6
100109e0:	40b7      	lsls	r7, r6
100109e2:	433d      	orrs	r5, r7
100109e4:	1e6c      	subs	r4, r5, #1
100109e6:	41a5      	sbcs	r5, r4
100109e8:	4664      	mov	r4, ip
100109ea:	432c      	orrs	r4, r5
100109ec:	2700      	movs	r7, #0
100109ee:	1b0d      	subs	r5, r1, r4
100109f0:	e6e7      	b.n	100107c2 <__aeabi_dsub+0x416>
100109f2:	2280      	movs	r2, #128	; 0x80
100109f4:	2300      	movs	r3, #0
100109f6:	0312      	lsls	r2, r2, #12
100109f8:	4c14      	ldr	r4, [pc, #80]	; (10010a4c <__aeabi_dsub+0x6a0>)
100109fa:	2500      	movs	r5, #0
100109fc:	e5a1      	b.n	10010542 <__aeabi_dsub+0x196>
100109fe:	433d      	orrs	r5, r7
10010a00:	1e6f      	subs	r7, r5, #1
10010a02:	41bd      	sbcs	r5, r7
10010a04:	2700      	movs	r7, #0
10010a06:	b2ed      	uxtb	r5, r5
10010a08:	e760      	b.n	100108cc <__aeabi_dsub+0x520>
10010a0a:	0007      	movs	r7, r0
10010a0c:	000d      	movs	r5, r1
10010a0e:	4c0f      	ldr	r4, [pc, #60]	; (10010a4c <__aeabi_dsub+0x6a0>)
10010a10:	e4f8      	b.n	10010404 <__aeabi_dsub+0x58>
10010a12:	0007      	movs	r7, r0
10010a14:	000d      	movs	r5, r1
10010a16:	e4f5      	b.n	10010404 <__aeabi_dsub+0x58>
10010a18:	464e      	mov	r6, r9
10010a1a:	003c      	movs	r4, r7
10010a1c:	3e20      	subs	r6, #32
10010a1e:	40f4      	lsrs	r4, r6
10010a20:	46a0      	mov	r8, r4
10010a22:	464c      	mov	r4, r9
10010a24:	2c20      	cmp	r4, #32
10010a26:	d00e      	beq.n	10010a46 <__aeabi_dsub+0x69a>
10010a28:	2440      	movs	r4, #64	; 0x40
10010a2a:	464e      	mov	r6, r9
10010a2c:	1ba4      	subs	r4, r4, r6
10010a2e:	40a7      	lsls	r7, r4
10010a30:	433d      	orrs	r5, r7
10010a32:	1e6f      	subs	r7, r5, #1
10010a34:	41bd      	sbcs	r5, r7
10010a36:	4644      	mov	r4, r8
10010a38:	2700      	movs	r7, #0
10010a3a:	4325      	orrs	r5, r4
10010a3c:	e746      	b.n	100108cc <__aeabi_dsub+0x520>
10010a3e:	2700      	movs	r7, #0
10010a40:	e7cf      	b.n	100109e2 <__aeabi_dsub+0x636>
10010a42:	000d      	movs	r5, r1
10010a44:	e573      	b.n	1001052e <__aeabi_dsub+0x182>
10010a46:	2700      	movs	r7, #0
10010a48:	e7f2      	b.n	10010a30 <__aeabi_dsub+0x684>
10010a4a:	46c0      	nop			; (mov r8, r8)
10010a4c:	000007ff 	.word	0x000007ff
10010a50:	ff7fffff 	.word	0xff7fffff

10010a54 <__aeabi_d2iz>:
10010a54:	030b      	lsls	r3, r1, #12
10010a56:	b530      	push	{r4, r5, lr}
10010a58:	4d13      	ldr	r5, [pc, #76]	; (10010aa8 <__aeabi_d2iz+0x54>)
10010a5a:	0b1a      	lsrs	r2, r3, #12
10010a5c:	004b      	lsls	r3, r1, #1
10010a5e:	0d5b      	lsrs	r3, r3, #21
10010a60:	0fc9      	lsrs	r1, r1, #31
10010a62:	2400      	movs	r4, #0
10010a64:	42ab      	cmp	r3, r5
10010a66:	dd11      	ble.n	10010a8c <__aeabi_d2iz+0x38>
10010a68:	4c10      	ldr	r4, [pc, #64]	; (10010aac <__aeabi_d2iz+0x58>)
10010a6a:	42a3      	cmp	r3, r4
10010a6c:	dc10      	bgt.n	10010a90 <__aeabi_d2iz+0x3c>
10010a6e:	2480      	movs	r4, #128	; 0x80
10010a70:	0364      	lsls	r4, r4, #13
10010a72:	4322      	orrs	r2, r4
10010a74:	4c0e      	ldr	r4, [pc, #56]	; (10010ab0 <__aeabi_d2iz+0x5c>)
10010a76:	1ae4      	subs	r4, r4, r3
10010a78:	2c1f      	cmp	r4, #31
10010a7a:	dd0c      	ble.n	10010a96 <__aeabi_d2iz+0x42>
10010a7c:	480d      	ldr	r0, [pc, #52]	; (10010ab4 <__aeabi_d2iz+0x60>)
10010a7e:	1ac3      	subs	r3, r0, r3
10010a80:	40da      	lsrs	r2, r3
10010a82:	0013      	movs	r3, r2
10010a84:	425c      	negs	r4, r3
10010a86:	2900      	cmp	r1, #0
10010a88:	d100      	bne.n	10010a8c <__aeabi_d2iz+0x38>
10010a8a:	001c      	movs	r4, r3
10010a8c:	0020      	movs	r0, r4
10010a8e:	bd30      	pop	{r4, r5, pc}
10010a90:	4b09      	ldr	r3, [pc, #36]	; (10010ab8 <__aeabi_d2iz+0x64>)
10010a92:	18cc      	adds	r4, r1, r3
10010a94:	e7fa      	b.n	10010a8c <__aeabi_d2iz+0x38>
10010a96:	40e0      	lsrs	r0, r4
10010a98:	4c08      	ldr	r4, [pc, #32]	; (10010abc <__aeabi_d2iz+0x68>)
10010a9a:	46a4      	mov	ip, r4
10010a9c:	4463      	add	r3, ip
10010a9e:	409a      	lsls	r2, r3
10010aa0:	0013      	movs	r3, r2
10010aa2:	4303      	orrs	r3, r0
10010aa4:	e7ee      	b.n	10010a84 <__aeabi_d2iz+0x30>
10010aa6:	46c0      	nop			; (mov r8, r8)
10010aa8:	000003fe 	.word	0x000003fe
10010aac:	0000041d 	.word	0x0000041d
10010ab0:	00000433 	.word	0x00000433
10010ab4:	00000413 	.word	0x00000413
10010ab8:	7fffffff 	.word	0x7fffffff
10010abc:	fffffbed 	.word	0xfffffbed

10010ac0 <__aeabi_ui2d>:
10010ac0:	b570      	push	{r4, r5, r6, lr}
10010ac2:	1e05      	subs	r5, r0, #0
10010ac4:	d028      	beq.n	10010b18 <__aeabi_ui2d+0x58>
10010ac6:	f000 f871 	bl	10010bac <__clzsi2>
10010aca:	4b15      	ldr	r3, [pc, #84]	; (10010b20 <__aeabi_ui2d+0x60>)
10010acc:	4a15      	ldr	r2, [pc, #84]	; (10010b24 <__aeabi_ui2d+0x64>)
10010ace:	1a1b      	subs	r3, r3, r0
10010ad0:	1ad2      	subs	r2, r2, r3
10010ad2:	2a1f      	cmp	r2, #31
10010ad4:	dd16      	ble.n	10010b04 <__aeabi_ui2d+0x44>
10010ad6:	002c      	movs	r4, r5
10010ad8:	4a13      	ldr	r2, [pc, #76]	; (10010b28 <__aeabi_ui2d+0x68>)
10010ada:	2500      	movs	r5, #0
10010adc:	1ad2      	subs	r2, r2, r3
10010ade:	4094      	lsls	r4, r2
10010ae0:	055a      	lsls	r2, r3, #21
10010ae2:	0324      	lsls	r4, r4, #12
10010ae4:	0b24      	lsrs	r4, r4, #12
10010ae6:	0d52      	lsrs	r2, r2, #21
10010ae8:	2100      	movs	r1, #0
10010aea:	0324      	lsls	r4, r4, #12
10010aec:	0d0b      	lsrs	r3, r1, #20
10010aee:	0b24      	lsrs	r4, r4, #12
10010af0:	051b      	lsls	r3, r3, #20
10010af2:	4323      	orrs	r3, r4
10010af4:	4c0d      	ldr	r4, [pc, #52]	; (10010b2c <__aeabi_ui2d+0x6c>)
10010af6:	0512      	lsls	r2, r2, #20
10010af8:	4023      	ands	r3, r4
10010afa:	4313      	orrs	r3, r2
10010afc:	005b      	lsls	r3, r3, #1
10010afe:	0028      	movs	r0, r5
10010b00:	0859      	lsrs	r1, r3, #1
10010b02:	bd70      	pop	{r4, r5, r6, pc}
10010b04:	210b      	movs	r1, #11
10010b06:	002c      	movs	r4, r5
10010b08:	1a08      	subs	r0, r1, r0
10010b0a:	40c4      	lsrs	r4, r0
10010b0c:	4095      	lsls	r5, r2
10010b0e:	0324      	lsls	r4, r4, #12
10010b10:	055a      	lsls	r2, r3, #21
10010b12:	0b24      	lsrs	r4, r4, #12
10010b14:	0d52      	lsrs	r2, r2, #21
10010b16:	e7e7      	b.n	10010ae8 <__aeabi_ui2d+0x28>
10010b18:	2200      	movs	r2, #0
10010b1a:	2400      	movs	r4, #0
10010b1c:	e7e4      	b.n	10010ae8 <__aeabi_ui2d+0x28>
10010b1e:	46c0      	nop			; (mov r8, r8)
10010b20:	0000041e 	.word	0x0000041e
10010b24:	00000433 	.word	0x00000433
10010b28:	00000413 	.word	0x00000413
10010b2c:	800fffff 	.word	0x800fffff

10010b30 <__aeabi_cdrcmple>:
10010b30:	4684      	mov	ip, r0
10010b32:	1c10      	adds	r0, r2, #0
10010b34:	4662      	mov	r2, ip
10010b36:	468c      	mov	ip, r1
10010b38:	1c19      	adds	r1, r3, #0
10010b3a:	4663      	mov	r3, ip
10010b3c:	e000      	b.n	10010b40 <__aeabi_cdcmpeq>
10010b3e:	46c0      	nop			; (mov r8, r8)

10010b40 <__aeabi_cdcmpeq>:
10010b40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10010b42:	f000 f8f5 	bl	10010d30 <__ledf2>
10010b46:	2800      	cmp	r0, #0
10010b48:	d401      	bmi.n	10010b4e <__aeabi_cdcmpeq+0xe>
10010b4a:	2100      	movs	r1, #0
10010b4c:	42c8      	cmn	r0, r1
10010b4e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10010b50 <__aeabi_dcmpeq>:
10010b50:	b510      	push	{r4, lr}
10010b52:	f000 f849 	bl	10010be8 <__eqdf2>
10010b56:	4240      	negs	r0, r0
10010b58:	3001      	adds	r0, #1
10010b5a:	bd10      	pop	{r4, pc}

10010b5c <__aeabi_dcmplt>:
10010b5c:	b510      	push	{r4, lr}
10010b5e:	f000 f8e7 	bl	10010d30 <__ledf2>
10010b62:	2800      	cmp	r0, #0
10010b64:	db01      	blt.n	10010b6a <__aeabi_dcmplt+0xe>
10010b66:	2000      	movs	r0, #0
10010b68:	bd10      	pop	{r4, pc}
10010b6a:	2001      	movs	r0, #1
10010b6c:	bd10      	pop	{r4, pc}
10010b6e:	46c0      	nop			; (mov r8, r8)

10010b70 <__aeabi_dcmple>:
10010b70:	b510      	push	{r4, lr}
10010b72:	f000 f8dd 	bl	10010d30 <__ledf2>
10010b76:	2800      	cmp	r0, #0
10010b78:	dd01      	ble.n	10010b7e <__aeabi_dcmple+0xe>
10010b7a:	2000      	movs	r0, #0
10010b7c:	bd10      	pop	{r4, pc}
10010b7e:	2001      	movs	r0, #1
10010b80:	bd10      	pop	{r4, pc}
10010b82:	46c0      	nop			; (mov r8, r8)

10010b84 <__aeabi_dcmpgt>:
10010b84:	b510      	push	{r4, lr}
10010b86:	f000 f86f 	bl	10010c68 <__gedf2>
10010b8a:	2800      	cmp	r0, #0
10010b8c:	dc01      	bgt.n	10010b92 <__aeabi_dcmpgt+0xe>
10010b8e:	2000      	movs	r0, #0
10010b90:	bd10      	pop	{r4, pc}
10010b92:	2001      	movs	r0, #1
10010b94:	bd10      	pop	{r4, pc}
10010b96:	46c0      	nop			; (mov r8, r8)

10010b98 <__aeabi_dcmpge>:
10010b98:	b510      	push	{r4, lr}
10010b9a:	f000 f865 	bl	10010c68 <__gedf2>
10010b9e:	2800      	cmp	r0, #0
10010ba0:	da01      	bge.n	10010ba6 <__aeabi_dcmpge+0xe>
10010ba2:	2000      	movs	r0, #0
10010ba4:	bd10      	pop	{r4, pc}
10010ba6:	2001      	movs	r0, #1
10010ba8:	bd10      	pop	{r4, pc}
10010baa:	46c0      	nop			; (mov r8, r8)

10010bac <__clzsi2>:
10010bac:	211c      	movs	r1, #28
10010bae:	2301      	movs	r3, #1
10010bb0:	041b      	lsls	r3, r3, #16
10010bb2:	4298      	cmp	r0, r3
10010bb4:	d301      	bcc.n	10010bba <__clzsi2+0xe>
10010bb6:	0c00      	lsrs	r0, r0, #16
10010bb8:	3910      	subs	r1, #16
10010bba:	0a1b      	lsrs	r3, r3, #8
10010bbc:	4298      	cmp	r0, r3
10010bbe:	d301      	bcc.n	10010bc4 <__clzsi2+0x18>
10010bc0:	0a00      	lsrs	r0, r0, #8
10010bc2:	3908      	subs	r1, #8
10010bc4:	091b      	lsrs	r3, r3, #4
10010bc6:	4298      	cmp	r0, r3
10010bc8:	d301      	bcc.n	10010bce <__clzsi2+0x22>
10010bca:	0900      	lsrs	r0, r0, #4
10010bcc:	3904      	subs	r1, #4
10010bce:	a202      	add	r2, pc, #8	; (adr r2, 10010bd8 <__clzsi2+0x2c>)
10010bd0:	5c10      	ldrb	r0, [r2, r0]
10010bd2:	1840      	adds	r0, r0, r1
10010bd4:	4770      	bx	lr
10010bd6:	46c0      	nop			; (mov r8, r8)
10010bd8:	02020304 	.word	0x02020304
10010bdc:	01010101 	.word	0x01010101
	...

10010be8 <__eqdf2>:
10010be8:	b5f0      	push	{r4, r5, r6, r7, lr}
10010bea:	465f      	mov	r7, fp
10010bec:	4656      	mov	r6, sl
10010bee:	464d      	mov	r5, r9
10010bf0:	4644      	mov	r4, r8
10010bf2:	b4f0      	push	{r4, r5, r6, r7}
10010bf4:	031f      	lsls	r7, r3, #12
10010bf6:	005c      	lsls	r4, r3, #1
10010bf8:	0fdb      	lsrs	r3, r3, #31
10010bfa:	469a      	mov	sl, r3
10010bfc:	4b19      	ldr	r3, [pc, #100]	; (10010c64 <__eqdf2+0x7c>)
10010bfe:	030e      	lsls	r6, r1, #12
10010c00:	004d      	lsls	r5, r1, #1
10010c02:	0fc9      	lsrs	r1, r1, #31
10010c04:	4680      	mov	r8, r0
10010c06:	0b36      	lsrs	r6, r6, #12
10010c08:	0d6d      	lsrs	r5, r5, #21
10010c0a:	468b      	mov	fp, r1
10010c0c:	4691      	mov	r9, r2
10010c0e:	0b3f      	lsrs	r7, r7, #12
10010c10:	0d64      	lsrs	r4, r4, #21
10010c12:	429d      	cmp	r5, r3
10010c14:	d019      	beq.n	10010c4a <__eqdf2+0x62>
10010c16:	4b13      	ldr	r3, [pc, #76]	; (10010c64 <__eqdf2+0x7c>)
10010c18:	429c      	cmp	r4, r3
10010c1a:	d01b      	beq.n	10010c54 <__eqdf2+0x6c>
10010c1c:	2301      	movs	r3, #1
10010c1e:	42a5      	cmp	r5, r4
10010c20:	d006      	beq.n	10010c30 <__eqdf2+0x48>
10010c22:	0018      	movs	r0, r3
10010c24:	bc3c      	pop	{r2, r3, r4, r5}
10010c26:	4690      	mov	r8, r2
10010c28:	4699      	mov	r9, r3
10010c2a:	46a2      	mov	sl, r4
10010c2c:	46ab      	mov	fp, r5
10010c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010c30:	42be      	cmp	r6, r7
10010c32:	d1f6      	bne.n	10010c22 <__eqdf2+0x3a>
10010c34:	45c8      	cmp	r8, r9
10010c36:	d1f4      	bne.n	10010c22 <__eqdf2+0x3a>
10010c38:	45d3      	cmp	fp, sl
10010c3a:	d010      	beq.n	10010c5e <__eqdf2+0x76>
10010c3c:	2d00      	cmp	r5, #0
10010c3e:	d1f0      	bne.n	10010c22 <__eqdf2+0x3a>
10010c40:	4330      	orrs	r0, r6
10010c42:	0003      	movs	r3, r0
10010c44:	1e5a      	subs	r2, r3, #1
10010c46:	4193      	sbcs	r3, r2
10010c48:	e7eb      	b.n	10010c22 <__eqdf2+0x3a>
10010c4a:	0031      	movs	r1, r6
10010c4c:	2301      	movs	r3, #1
10010c4e:	4301      	orrs	r1, r0
10010c50:	d1e7      	bne.n	10010c22 <__eqdf2+0x3a>
10010c52:	e7e0      	b.n	10010c16 <__eqdf2+0x2e>
10010c54:	433a      	orrs	r2, r7
10010c56:	2301      	movs	r3, #1
10010c58:	2a00      	cmp	r2, #0
10010c5a:	d1e2      	bne.n	10010c22 <__eqdf2+0x3a>
10010c5c:	e7de      	b.n	10010c1c <__eqdf2+0x34>
10010c5e:	2300      	movs	r3, #0
10010c60:	e7df      	b.n	10010c22 <__eqdf2+0x3a>
10010c62:	46c0      	nop			; (mov r8, r8)
10010c64:	000007ff 	.word	0x000007ff

10010c68 <__gedf2>:
10010c68:	b5f0      	push	{r4, r5, r6, r7, lr}
10010c6a:	465f      	mov	r7, fp
10010c6c:	4644      	mov	r4, r8
10010c6e:	4656      	mov	r6, sl
10010c70:	464d      	mov	r5, r9
10010c72:	b4f0      	push	{r4, r5, r6, r7}
10010c74:	031f      	lsls	r7, r3, #12
10010c76:	0b3c      	lsrs	r4, r7, #12
10010c78:	4f2c      	ldr	r7, [pc, #176]	; (10010d2c <__gedf2+0xc4>)
10010c7a:	030e      	lsls	r6, r1, #12
10010c7c:	004d      	lsls	r5, r1, #1
10010c7e:	46a3      	mov	fp, r4
10010c80:	005c      	lsls	r4, r3, #1
10010c82:	4684      	mov	ip, r0
10010c84:	0b36      	lsrs	r6, r6, #12
10010c86:	0d6d      	lsrs	r5, r5, #21
10010c88:	0fc9      	lsrs	r1, r1, #31
10010c8a:	4690      	mov	r8, r2
10010c8c:	0d64      	lsrs	r4, r4, #21
10010c8e:	0fdb      	lsrs	r3, r3, #31
10010c90:	42bd      	cmp	r5, r7
10010c92:	d02b      	beq.n	10010cec <__gedf2+0x84>
10010c94:	4f25      	ldr	r7, [pc, #148]	; (10010d2c <__gedf2+0xc4>)
10010c96:	42bc      	cmp	r4, r7
10010c98:	d02e      	beq.n	10010cf8 <__gedf2+0x90>
10010c9a:	2d00      	cmp	r5, #0
10010c9c:	d10e      	bne.n	10010cbc <__gedf2+0x54>
10010c9e:	4330      	orrs	r0, r6
10010ca0:	0007      	movs	r7, r0
10010ca2:	4681      	mov	r9, r0
10010ca4:	4278      	negs	r0, r7
10010ca6:	4178      	adcs	r0, r7
10010ca8:	2c00      	cmp	r4, #0
10010caa:	d117      	bne.n	10010cdc <__gedf2+0x74>
10010cac:	465f      	mov	r7, fp
10010cae:	433a      	orrs	r2, r7
10010cb0:	d114      	bne.n	10010cdc <__gedf2+0x74>
10010cb2:	464b      	mov	r3, r9
10010cb4:	2000      	movs	r0, #0
10010cb6:	2b00      	cmp	r3, #0
10010cb8:	d00a      	beq.n	10010cd0 <__gedf2+0x68>
10010cba:	e006      	b.n	10010cca <__gedf2+0x62>
10010cbc:	2c00      	cmp	r4, #0
10010cbe:	d102      	bne.n	10010cc6 <__gedf2+0x5e>
10010cc0:	4658      	mov	r0, fp
10010cc2:	4302      	orrs	r2, r0
10010cc4:	d001      	beq.n	10010cca <__gedf2+0x62>
10010cc6:	4299      	cmp	r1, r3
10010cc8:	d01a      	beq.n	10010d00 <__gedf2+0x98>
10010cca:	2301      	movs	r3, #1
10010ccc:	4248      	negs	r0, r1
10010cce:	4318      	orrs	r0, r3
10010cd0:	bc3c      	pop	{r2, r3, r4, r5}
10010cd2:	4690      	mov	r8, r2
10010cd4:	4699      	mov	r9, r3
10010cd6:	46a2      	mov	sl, r4
10010cd8:	46ab      	mov	fp, r5
10010cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010cdc:	2800      	cmp	r0, #0
10010cde:	d0f2      	beq.n	10010cc6 <__gedf2+0x5e>
10010ce0:	4258      	negs	r0, r3
10010ce2:	4158      	adcs	r0, r3
10010ce4:	2201      	movs	r2, #1
10010ce6:	4240      	negs	r0, r0
10010ce8:	4310      	orrs	r0, r2
10010cea:	e7f1      	b.n	10010cd0 <__gedf2+0x68>
10010cec:	0037      	movs	r7, r6
10010cee:	4307      	orrs	r7, r0
10010cf0:	d0d0      	beq.n	10010c94 <__gedf2+0x2c>
10010cf2:	2002      	movs	r0, #2
10010cf4:	4240      	negs	r0, r0
10010cf6:	e7eb      	b.n	10010cd0 <__gedf2+0x68>
10010cf8:	465f      	mov	r7, fp
10010cfa:	4317      	orrs	r7, r2
10010cfc:	d0cd      	beq.n	10010c9a <__gedf2+0x32>
10010cfe:	e7f8      	b.n	10010cf2 <__gedf2+0x8a>
10010d00:	42a5      	cmp	r5, r4
10010d02:	dce2      	bgt.n	10010cca <__gedf2+0x62>
10010d04:	db05      	blt.n	10010d12 <__gedf2+0xaa>
10010d06:	455e      	cmp	r6, fp
10010d08:	d8df      	bhi.n	10010cca <__gedf2+0x62>
10010d0a:	d008      	beq.n	10010d1e <__gedf2+0xb6>
10010d0c:	2000      	movs	r0, #0
10010d0e:	455e      	cmp	r6, fp
10010d10:	d2de      	bcs.n	10010cd0 <__gedf2+0x68>
10010d12:	4248      	negs	r0, r1
10010d14:	4148      	adcs	r0, r1
10010d16:	2301      	movs	r3, #1
10010d18:	4240      	negs	r0, r0
10010d1a:	4318      	orrs	r0, r3
10010d1c:	e7d8      	b.n	10010cd0 <__gedf2+0x68>
10010d1e:	45c4      	cmp	ip, r8
10010d20:	d8d3      	bhi.n	10010cca <__gedf2+0x62>
10010d22:	2000      	movs	r0, #0
10010d24:	45c4      	cmp	ip, r8
10010d26:	d3f4      	bcc.n	10010d12 <__gedf2+0xaa>
10010d28:	e7d2      	b.n	10010cd0 <__gedf2+0x68>
10010d2a:	46c0      	nop			; (mov r8, r8)
10010d2c:	000007ff 	.word	0x000007ff

10010d30 <__ledf2>:
10010d30:	b5f0      	push	{r4, r5, r6, r7, lr}
10010d32:	465f      	mov	r7, fp
10010d34:	464d      	mov	r5, r9
10010d36:	4644      	mov	r4, r8
10010d38:	4656      	mov	r6, sl
10010d3a:	b4f0      	push	{r4, r5, r6, r7}
10010d3c:	031c      	lsls	r4, r3, #12
10010d3e:	0b24      	lsrs	r4, r4, #12
10010d40:	46a4      	mov	ip, r4
10010d42:	4c2f      	ldr	r4, [pc, #188]	; (10010e00 <__ledf2+0xd0>)
10010d44:	030f      	lsls	r7, r1, #12
10010d46:	004d      	lsls	r5, r1, #1
10010d48:	005e      	lsls	r6, r3, #1
10010d4a:	0fc9      	lsrs	r1, r1, #31
10010d4c:	4680      	mov	r8, r0
10010d4e:	0b3f      	lsrs	r7, r7, #12
10010d50:	0d6d      	lsrs	r5, r5, #21
10010d52:	468b      	mov	fp, r1
10010d54:	4691      	mov	r9, r2
10010d56:	0d76      	lsrs	r6, r6, #21
10010d58:	0fdb      	lsrs	r3, r3, #31
10010d5a:	42a5      	cmp	r5, r4
10010d5c:	d020      	beq.n	10010da0 <__ledf2+0x70>
10010d5e:	4c28      	ldr	r4, [pc, #160]	; (10010e00 <__ledf2+0xd0>)
10010d60:	42a6      	cmp	r6, r4
10010d62:	d022      	beq.n	10010daa <__ledf2+0x7a>
10010d64:	2d00      	cmp	r5, #0
10010d66:	d112      	bne.n	10010d8e <__ledf2+0x5e>
10010d68:	4338      	orrs	r0, r7
10010d6a:	4244      	negs	r4, r0
10010d6c:	4144      	adcs	r4, r0
10010d6e:	2e00      	cmp	r6, #0
10010d70:	d020      	beq.n	10010db4 <__ledf2+0x84>
10010d72:	2c00      	cmp	r4, #0
10010d74:	d00d      	beq.n	10010d92 <__ledf2+0x62>
10010d76:	425c      	negs	r4, r3
10010d78:	4163      	adcs	r3, r4
10010d7a:	2401      	movs	r4, #1
10010d7c:	425b      	negs	r3, r3
10010d7e:	431c      	orrs	r4, r3
10010d80:	0020      	movs	r0, r4
10010d82:	bc3c      	pop	{r2, r3, r4, r5}
10010d84:	4690      	mov	r8, r2
10010d86:	4699      	mov	r9, r3
10010d88:	46a2      	mov	sl, r4
10010d8a:	46ab      	mov	fp, r5
10010d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010d8e:	2e00      	cmp	r6, #0
10010d90:	d017      	beq.n	10010dc2 <__ledf2+0x92>
10010d92:	455b      	cmp	r3, fp
10010d94:	d019      	beq.n	10010dca <__ledf2+0x9a>
10010d96:	465b      	mov	r3, fp
10010d98:	425c      	negs	r4, r3
10010d9a:	2301      	movs	r3, #1
10010d9c:	431c      	orrs	r4, r3
10010d9e:	e7ef      	b.n	10010d80 <__ledf2+0x50>
10010da0:	0039      	movs	r1, r7
10010da2:	2402      	movs	r4, #2
10010da4:	4301      	orrs	r1, r0
10010da6:	d1eb      	bne.n	10010d80 <__ledf2+0x50>
10010da8:	e7d9      	b.n	10010d5e <__ledf2+0x2e>
10010daa:	4661      	mov	r1, ip
10010dac:	2402      	movs	r4, #2
10010dae:	4311      	orrs	r1, r2
10010db0:	d1e6      	bne.n	10010d80 <__ledf2+0x50>
10010db2:	e7d7      	b.n	10010d64 <__ledf2+0x34>
10010db4:	4661      	mov	r1, ip
10010db6:	430a      	orrs	r2, r1
10010db8:	d1db      	bne.n	10010d72 <__ledf2+0x42>
10010dba:	2400      	movs	r4, #0
10010dbc:	2800      	cmp	r0, #0
10010dbe:	d0df      	beq.n	10010d80 <__ledf2+0x50>
10010dc0:	e7e9      	b.n	10010d96 <__ledf2+0x66>
10010dc2:	4661      	mov	r1, ip
10010dc4:	430a      	orrs	r2, r1
10010dc6:	d1e4      	bne.n	10010d92 <__ledf2+0x62>
10010dc8:	e7e5      	b.n	10010d96 <__ledf2+0x66>
10010dca:	42b5      	cmp	r5, r6
10010dcc:	dd03      	ble.n	10010dd6 <__ledf2+0xa6>
10010dce:	2201      	movs	r2, #1
10010dd0:	425c      	negs	r4, r3
10010dd2:	4314      	orrs	r4, r2
10010dd4:	e7d4      	b.n	10010d80 <__ledf2+0x50>
10010dd6:	42b5      	cmp	r5, r6
10010dd8:	dbcd      	blt.n	10010d76 <__ledf2+0x46>
10010dda:	4567      	cmp	r7, ip
10010ddc:	d8db      	bhi.n	10010d96 <__ledf2+0x66>
10010dde:	d009      	beq.n	10010df4 <__ledf2+0xc4>
10010de0:	2400      	movs	r4, #0
10010de2:	4567      	cmp	r7, ip
10010de4:	d2cc      	bcs.n	10010d80 <__ledf2+0x50>
10010de6:	4659      	mov	r1, fp
10010de8:	424c      	negs	r4, r1
10010dea:	4161      	adcs	r1, r4
10010dec:	2401      	movs	r4, #1
10010dee:	4249      	negs	r1, r1
10010df0:	430c      	orrs	r4, r1
10010df2:	e7c5      	b.n	10010d80 <__ledf2+0x50>
10010df4:	45c8      	cmp	r8, r9
10010df6:	d8ce      	bhi.n	10010d96 <__ledf2+0x66>
10010df8:	2400      	movs	r4, #0
10010dfa:	45c8      	cmp	r8, r9
10010dfc:	d3f3      	bcc.n	10010de6 <__ledf2+0xb6>
10010dfe:	e7bf      	b.n	10010d80 <__ledf2+0x50>
10010e00:	000007ff 	.word	0x000007ff

10010e04 <__libc_init_array>:
10010e04:	4b0e      	ldr	r3, [pc, #56]	; (10010e40 <__libc_init_array+0x3c>)
10010e06:	b570      	push	{r4, r5, r6, lr}
10010e08:	2500      	movs	r5, #0
10010e0a:	001e      	movs	r6, r3
10010e0c:	4c0d      	ldr	r4, [pc, #52]	; (10010e44 <__libc_init_array+0x40>)
10010e0e:	1ae4      	subs	r4, r4, r3
10010e10:	10a4      	asrs	r4, r4, #2
10010e12:	42a5      	cmp	r5, r4
10010e14:	d004      	beq.n	10010e20 <__libc_init_array+0x1c>
10010e16:	00ab      	lsls	r3, r5, #2
10010e18:	58f3      	ldr	r3, [r6, r3]
10010e1a:	4798      	blx	r3
10010e1c:	3501      	adds	r5, #1
10010e1e:	e7f8      	b.n	10010e12 <__libc_init_array+0xe>
10010e20:	f002 fc80 	bl	10013724 <_init>
10010e24:	4b08      	ldr	r3, [pc, #32]	; (10010e48 <__libc_init_array+0x44>)
10010e26:	2500      	movs	r5, #0
10010e28:	001e      	movs	r6, r3
10010e2a:	4c08      	ldr	r4, [pc, #32]	; (10010e4c <__libc_init_array+0x48>)
10010e2c:	1ae4      	subs	r4, r4, r3
10010e2e:	10a4      	asrs	r4, r4, #2
10010e30:	42a5      	cmp	r5, r4
10010e32:	d004      	beq.n	10010e3e <__libc_init_array+0x3a>
10010e34:	00ab      	lsls	r3, r5, #2
10010e36:	58f3      	ldr	r3, [r6, r3]
10010e38:	4798      	blx	r3
10010e3a:	3501      	adds	r5, #1
10010e3c:	e7f8      	b.n	10010e30 <__libc_init_array+0x2c>
10010e3e:	bd70      	pop	{r4, r5, r6, pc}
10010e40:	10013730 	.word	0x10013730
10010e44:	10013730 	.word	0x10013730
10010e48:	10013730 	.word	0x10013730
10010e4c:	10013734 	.word	0x10013734

10010e50 <memcmp>:
10010e50:	b530      	push	{r4, r5, lr}
10010e52:	2400      	movs	r4, #0
10010e54:	42a2      	cmp	r2, r4
10010e56:	d008      	beq.n	10010e6a <memcmp+0x1a>
10010e58:	5d03      	ldrb	r3, [r0, r4]
10010e5a:	1c65      	adds	r5, r4, #1
10010e5c:	5d0c      	ldrb	r4, [r1, r4]
10010e5e:	42a3      	cmp	r3, r4
10010e60:	d001      	beq.n	10010e66 <memcmp+0x16>
10010e62:	1b18      	subs	r0, r3, r4
10010e64:	e002      	b.n	10010e6c <memcmp+0x1c>
10010e66:	002c      	movs	r4, r5
10010e68:	e7f4      	b.n	10010e54 <memcmp+0x4>
10010e6a:	2000      	movs	r0, #0
10010e6c:	bd30      	pop	{r4, r5, pc}

10010e6e <memcpy>:
10010e6e:	2300      	movs	r3, #0
10010e70:	b510      	push	{r4, lr}
10010e72:	429a      	cmp	r2, r3
10010e74:	d003      	beq.n	10010e7e <memcpy+0x10>
10010e76:	5ccc      	ldrb	r4, [r1, r3]
10010e78:	54c4      	strb	r4, [r0, r3]
10010e7a:	3301      	adds	r3, #1
10010e7c:	e7f9      	b.n	10010e72 <memcpy+0x4>
10010e7e:	bd10      	pop	{r4, pc}

10010e80 <memset>:
10010e80:	0003      	movs	r3, r0
10010e82:	1882      	adds	r2, r0, r2
10010e84:	4293      	cmp	r3, r2
10010e86:	d002      	beq.n	10010e8e <memset+0xe>
10010e88:	7019      	strb	r1, [r3, #0]
10010e8a:	3301      	adds	r3, #1
10010e8c:	e7fa      	b.n	10010e84 <memset+0x4>
10010e8e:	4770      	bx	lr

10010e90 <iprintf>:
10010e90:	b40f      	push	{r0, r1, r2, r3}
10010e92:	4b0b      	ldr	r3, [pc, #44]	; (10010ec0 <iprintf+0x30>)
10010e94:	b513      	push	{r0, r1, r4, lr}
10010e96:	681c      	ldr	r4, [r3, #0]
10010e98:	2c00      	cmp	r4, #0
10010e9a:	d005      	beq.n	10010ea8 <iprintf+0x18>
10010e9c:	69a3      	ldr	r3, [r4, #24]
10010e9e:	2b00      	cmp	r3, #0
10010ea0:	d102      	bne.n	10010ea8 <iprintf+0x18>
10010ea2:	0020      	movs	r0, r4
10010ea4:	f000 fb46 	bl	10011534 <__sinit>
10010ea8:	ab05      	add	r3, sp, #20
10010eaa:	9a04      	ldr	r2, [sp, #16]
10010eac:	68a1      	ldr	r1, [r4, #8]
10010eae:	0020      	movs	r0, r4
10010eb0:	9301      	str	r3, [sp, #4]
10010eb2:	f000 fd05 	bl	100118c0 <_vfiprintf_r>
10010eb6:	bc16      	pop	{r1, r2, r4}
10010eb8:	bc08      	pop	{r3}
10010eba:	b004      	add	sp, #16
10010ebc:	4718      	bx	r3
10010ebe:	46c0      	nop			; (mov r8, r8)
10010ec0:	100137ac 	.word	0x100137ac

10010ec4 <putchar>:
10010ec4:	4b08      	ldr	r3, [pc, #32]	; (10010ee8 <putchar+0x24>)
10010ec6:	b570      	push	{r4, r5, r6, lr}
10010ec8:	681c      	ldr	r4, [r3, #0]
10010eca:	0005      	movs	r5, r0
10010ecc:	2c00      	cmp	r4, #0
10010ece:	d005      	beq.n	10010edc <putchar+0x18>
10010ed0:	69a3      	ldr	r3, [r4, #24]
10010ed2:	2b00      	cmp	r3, #0
10010ed4:	d102      	bne.n	10010edc <putchar+0x18>
10010ed6:	0020      	movs	r0, r4
10010ed8:	f000 fb2c 	bl	10011534 <__sinit>
10010edc:	0029      	movs	r1, r5
10010ede:	68a2      	ldr	r2, [r4, #8]
10010ee0:	0020      	movs	r0, r4
10010ee2:	f000 ff99 	bl	10011e18 <_putc_r>
10010ee6:	bd70      	pop	{r4, r5, r6, pc}
10010ee8:	100137ac 	.word	0x100137ac

10010eec <_puts_r>:
10010eec:	b570      	push	{r4, r5, r6, lr}
10010eee:	0005      	movs	r5, r0
10010ef0:	000e      	movs	r6, r1
10010ef2:	2800      	cmp	r0, #0
10010ef4:	d004      	beq.n	10010f00 <_puts_r+0x14>
10010ef6:	6983      	ldr	r3, [r0, #24]
10010ef8:	2b00      	cmp	r3, #0
10010efa:	d101      	bne.n	10010f00 <_puts_r+0x14>
10010efc:	f000 fb1a 	bl	10011534 <__sinit>
10010f00:	69ab      	ldr	r3, [r5, #24]
10010f02:	68ac      	ldr	r4, [r5, #8]
10010f04:	2b00      	cmp	r3, #0
10010f06:	d102      	bne.n	10010f0e <_puts_r+0x22>
10010f08:	0028      	movs	r0, r5
10010f0a:	f000 fb13 	bl	10011534 <__sinit>
10010f0e:	4b25      	ldr	r3, [pc, #148]	; (10010fa4 <_puts_r+0xb8>)
10010f10:	429c      	cmp	r4, r3
10010f12:	d101      	bne.n	10010f18 <_puts_r+0x2c>
10010f14:	686c      	ldr	r4, [r5, #4]
10010f16:	e008      	b.n	10010f2a <_puts_r+0x3e>
10010f18:	4b23      	ldr	r3, [pc, #140]	; (10010fa8 <_puts_r+0xbc>)
10010f1a:	429c      	cmp	r4, r3
10010f1c:	d101      	bne.n	10010f22 <_puts_r+0x36>
10010f1e:	68ac      	ldr	r4, [r5, #8]
10010f20:	e003      	b.n	10010f2a <_puts_r+0x3e>
10010f22:	4b22      	ldr	r3, [pc, #136]	; (10010fac <_puts_r+0xc0>)
10010f24:	429c      	cmp	r4, r3
10010f26:	d100      	bne.n	10010f2a <_puts_r+0x3e>
10010f28:	68ec      	ldr	r4, [r5, #12]
10010f2a:	89a3      	ldrh	r3, [r4, #12]
10010f2c:	071b      	lsls	r3, r3, #28
10010f2e:	d502      	bpl.n	10010f36 <_puts_r+0x4a>
10010f30:	6923      	ldr	r3, [r4, #16]
10010f32:	2b00      	cmp	r3, #0
10010f34:	d111      	bne.n	10010f5a <_puts_r+0x6e>
10010f36:	0021      	movs	r1, r4
10010f38:	0028      	movs	r0, r5
10010f3a:	f000 f991 	bl	10011260 <__swsetup_r>
10010f3e:	2800      	cmp	r0, #0
10010f40:	d00b      	beq.n	10010f5a <_puts_r+0x6e>
10010f42:	2001      	movs	r0, #1
10010f44:	4240      	negs	r0, r0
10010f46:	e02b      	b.n	10010fa0 <_puts_r+0xb4>
10010f48:	3b01      	subs	r3, #1
10010f4a:	3601      	adds	r6, #1
10010f4c:	60a3      	str	r3, [r4, #8]
10010f4e:	2b00      	cmp	r3, #0
10010f50:	db08      	blt.n	10010f64 <_puts_r+0x78>
10010f52:	6823      	ldr	r3, [r4, #0]
10010f54:	1c5a      	adds	r2, r3, #1
10010f56:	6022      	str	r2, [r4, #0]
10010f58:	7019      	strb	r1, [r3, #0]
10010f5a:	7831      	ldrb	r1, [r6, #0]
10010f5c:	68a3      	ldr	r3, [r4, #8]
10010f5e:	2900      	cmp	r1, #0
10010f60:	d1f2      	bne.n	10010f48 <_puts_r+0x5c>
10010f62:	e00b      	b.n	10010f7c <_puts_r+0x90>
10010f64:	69a2      	ldr	r2, [r4, #24]
10010f66:	4293      	cmp	r3, r2
10010f68:	db01      	blt.n	10010f6e <_puts_r+0x82>
10010f6a:	290a      	cmp	r1, #10
10010f6c:	d1f1      	bne.n	10010f52 <_puts_r+0x66>
10010f6e:	0022      	movs	r2, r4
10010f70:	0028      	movs	r0, r5
10010f72:	f000 f91d 	bl	100111b0 <__swbuf_r>
10010f76:	1c43      	adds	r3, r0, #1
10010f78:	d1ef      	bne.n	10010f5a <_puts_r+0x6e>
10010f7a:	e7e2      	b.n	10010f42 <_puts_r+0x56>
10010f7c:	3b01      	subs	r3, #1
10010f7e:	60a3      	str	r3, [r4, #8]
10010f80:	2b00      	cmp	r3, #0
10010f82:	da08      	bge.n	10010f96 <_puts_r+0xaa>
10010f84:	0022      	movs	r2, r4
10010f86:	310a      	adds	r1, #10
10010f88:	0028      	movs	r0, r5
10010f8a:	f000 f911 	bl	100111b0 <__swbuf_r>
10010f8e:	1c43      	adds	r3, r0, #1
10010f90:	d0d7      	beq.n	10010f42 <_puts_r+0x56>
10010f92:	200a      	movs	r0, #10
10010f94:	e004      	b.n	10010fa0 <_puts_r+0xb4>
10010f96:	200a      	movs	r0, #10
10010f98:	6823      	ldr	r3, [r4, #0]
10010f9a:	1c5a      	adds	r2, r3, #1
10010f9c:	6022      	str	r2, [r4, #0]
10010f9e:	7018      	strb	r0, [r3, #0]
10010fa0:	bd70      	pop	{r4, r5, r6, pc}
10010fa2:	46c0      	nop			; (mov r8, r8)
10010fa4:	10013690 	.word	0x10013690
10010fa8:	100136b0 	.word	0x100136b0
10010fac:	100136d0 	.word	0x100136d0

10010fb0 <puts>:
10010fb0:	b510      	push	{r4, lr}
10010fb2:	4b03      	ldr	r3, [pc, #12]	; (10010fc0 <puts+0x10>)
10010fb4:	0001      	movs	r1, r0
10010fb6:	6818      	ldr	r0, [r3, #0]
10010fb8:	f7ff ff98 	bl	10010eec <_puts_r>
10010fbc:	bd10      	pop	{r4, pc}
10010fbe:	46c0      	nop			; (mov r8, r8)
10010fc0:	100137ac 	.word	0x100137ac

10010fc4 <rand>:
10010fc4:	4b15      	ldr	r3, [pc, #84]	; (1001101c <rand+0x58>)
10010fc6:	b510      	push	{r4, lr}
10010fc8:	681c      	ldr	r4, [r3, #0]
10010fca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10010fcc:	2b00      	cmp	r3, #0
10010fce:	d115      	bne.n	10010ffc <rand+0x38>
10010fd0:	2018      	movs	r0, #24
10010fd2:	f000 fba7 	bl	10011724 <malloc>
10010fd6:	4b12      	ldr	r3, [pc, #72]	; (10011020 <rand+0x5c>)
10010fd8:	63a0      	str	r0, [r4, #56]	; 0x38
10010fda:	8003      	strh	r3, [r0, #0]
10010fdc:	4b11      	ldr	r3, [pc, #68]	; (10011024 <rand+0x60>)
10010fde:	2201      	movs	r2, #1
10010fe0:	8043      	strh	r3, [r0, #2]
10010fe2:	4b11      	ldr	r3, [pc, #68]	; (10011028 <rand+0x64>)
10010fe4:	8083      	strh	r3, [r0, #4]
10010fe6:	4b11      	ldr	r3, [pc, #68]	; (1001102c <rand+0x68>)
10010fe8:	80c3      	strh	r3, [r0, #6]
10010fea:	4b11      	ldr	r3, [pc, #68]	; (10011030 <rand+0x6c>)
10010fec:	8103      	strh	r3, [r0, #8]
10010fee:	2305      	movs	r3, #5
10010ff0:	8143      	strh	r3, [r0, #10]
10010ff2:	3306      	adds	r3, #6
10010ff4:	8183      	strh	r3, [r0, #12]
10010ff6:	2300      	movs	r3, #0
10010ff8:	6102      	str	r2, [r0, #16]
10010ffa:	6143      	str	r3, [r0, #20]
10010ffc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10010ffe:	4a0d      	ldr	r2, [pc, #52]	; (10011034 <rand+0x70>)
10011000:	6920      	ldr	r0, [r4, #16]
10011002:	6961      	ldr	r1, [r4, #20]
10011004:	4b0c      	ldr	r3, [pc, #48]	; (10011038 <rand+0x74>)
10011006:	f001 f819 	bl	1001203c <__aeabi_lmul>
1001100a:	2201      	movs	r2, #1
1001100c:	2300      	movs	r3, #0
1001100e:	1880      	adds	r0, r0, r2
10011010:	4159      	adcs	r1, r3
10011012:	6120      	str	r0, [r4, #16]
10011014:	6161      	str	r1, [r4, #20]
10011016:	0048      	lsls	r0, r1, #1
10011018:	0840      	lsrs	r0, r0, #1
1001101a:	bd10      	pop	{r4, pc}
1001101c:	100137ac 	.word	0x100137ac
10011020:	0000330e 	.word	0x0000330e
10011024:	ffffabcd 	.word	0xffffabcd
10011028:	00001234 	.word	0x00001234
1001102c:	ffffe66d 	.word	0xffffe66d
10011030:	ffffdeec 	.word	0xffffdeec
10011034:	4c957f2d 	.word	0x4c957f2d
10011038:	5851f42d 	.word	0x5851f42d

1001103c <setbuf>:
1001103c:	424a      	negs	r2, r1
1001103e:	414a      	adcs	r2, r1
10011040:	2380      	movs	r3, #128	; 0x80
10011042:	b510      	push	{r4, lr}
10011044:	0052      	lsls	r2, r2, #1
10011046:	00db      	lsls	r3, r3, #3
10011048:	f000 f802 	bl	10011050 <setvbuf>
1001104c:	bd10      	pop	{r4, pc}
	...

10011050 <setvbuf>:
10011050:	b5f0      	push	{r4, r5, r6, r7, lr}
10011052:	001d      	movs	r5, r3
10011054:	4b51      	ldr	r3, [pc, #324]	; (1001119c <setvbuf+0x14c>)
10011056:	b085      	sub	sp, #20
10011058:	681e      	ldr	r6, [r3, #0]
1001105a:	0004      	movs	r4, r0
1001105c:	000f      	movs	r7, r1
1001105e:	9200      	str	r2, [sp, #0]
10011060:	2e00      	cmp	r6, #0
10011062:	d005      	beq.n	10011070 <setvbuf+0x20>
10011064:	69b3      	ldr	r3, [r6, #24]
10011066:	2b00      	cmp	r3, #0
10011068:	d102      	bne.n	10011070 <setvbuf+0x20>
1001106a:	0030      	movs	r0, r6
1001106c:	f000 fa62 	bl	10011534 <__sinit>
10011070:	4b4b      	ldr	r3, [pc, #300]	; (100111a0 <setvbuf+0x150>)
10011072:	429c      	cmp	r4, r3
10011074:	d101      	bne.n	1001107a <setvbuf+0x2a>
10011076:	6874      	ldr	r4, [r6, #4]
10011078:	e008      	b.n	1001108c <setvbuf+0x3c>
1001107a:	4b4a      	ldr	r3, [pc, #296]	; (100111a4 <setvbuf+0x154>)
1001107c:	429c      	cmp	r4, r3
1001107e:	d101      	bne.n	10011084 <setvbuf+0x34>
10011080:	68b4      	ldr	r4, [r6, #8]
10011082:	e003      	b.n	1001108c <setvbuf+0x3c>
10011084:	4b48      	ldr	r3, [pc, #288]	; (100111a8 <setvbuf+0x158>)
10011086:	429c      	cmp	r4, r3
10011088:	d100      	bne.n	1001108c <setvbuf+0x3c>
1001108a:	68f4      	ldr	r4, [r6, #12]
1001108c:	9b00      	ldr	r3, [sp, #0]
1001108e:	2b02      	cmp	r3, #2
10011090:	d005      	beq.n	1001109e <setvbuf+0x4e>
10011092:	2b01      	cmp	r3, #1
10011094:	d900      	bls.n	10011098 <setvbuf+0x48>
10011096:	e07c      	b.n	10011192 <setvbuf+0x142>
10011098:	2d00      	cmp	r5, #0
1001109a:	da00      	bge.n	1001109e <setvbuf+0x4e>
1001109c:	e079      	b.n	10011192 <setvbuf+0x142>
1001109e:	0021      	movs	r1, r4
100110a0:	0030      	movs	r0, r6
100110a2:	f000 f9d9 	bl	10011458 <_fflush_r>
100110a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
100110a8:	2900      	cmp	r1, #0
100110aa:	d008      	beq.n	100110be <setvbuf+0x6e>
100110ac:	0023      	movs	r3, r4
100110ae:	3344      	adds	r3, #68	; 0x44
100110b0:	4299      	cmp	r1, r3
100110b2:	d002      	beq.n	100110ba <setvbuf+0x6a>
100110b4:	0030      	movs	r0, r6
100110b6:	f000 fb3f 	bl	10011738 <_free_r>
100110ba:	2300      	movs	r3, #0
100110bc:	6363      	str	r3, [r4, #52]	; 0x34
100110be:	2300      	movs	r3, #0
100110c0:	61a3      	str	r3, [r4, #24]
100110c2:	6063      	str	r3, [r4, #4]
100110c4:	89a3      	ldrh	r3, [r4, #12]
100110c6:	061b      	lsls	r3, r3, #24
100110c8:	d503      	bpl.n	100110d2 <setvbuf+0x82>
100110ca:	6921      	ldr	r1, [r4, #16]
100110cc:	0030      	movs	r0, r6
100110ce:	f000 fb33 	bl	10011738 <_free_r>
100110d2:	89a2      	ldrh	r2, [r4, #12]
100110d4:	4b35      	ldr	r3, [pc, #212]	; (100111ac <setvbuf+0x15c>)
100110d6:	4013      	ands	r3, r2
100110d8:	81a3      	strh	r3, [r4, #12]
100110da:	9b00      	ldr	r3, [sp, #0]
100110dc:	2b02      	cmp	r3, #2
100110de:	d021      	beq.n	10011124 <setvbuf+0xd4>
100110e0:	ab03      	add	r3, sp, #12
100110e2:	aa02      	add	r2, sp, #8
100110e4:	0021      	movs	r1, r4
100110e6:	0030      	movs	r0, r6
100110e8:	f000 fab8 	bl	1001165c <__swhatbuf_r>
100110ec:	89a3      	ldrh	r3, [r4, #12]
100110ee:	4318      	orrs	r0, r3
100110f0:	81a0      	strh	r0, [r4, #12]
100110f2:	2d00      	cmp	r5, #0
100110f4:	d101      	bne.n	100110fa <setvbuf+0xaa>
100110f6:	9d02      	ldr	r5, [sp, #8]
100110f8:	e001      	b.n	100110fe <setvbuf+0xae>
100110fa:	2f00      	cmp	r7, #0
100110fc:	d125      	bne.n	1001114a <setvbuf+0xfa>
100110fe:	0028      	movs	r0, r5
10011100:	f000 fb10 	bl	10011724 <malloc>
10011104:	9501      	str	r5, [sp, #4]
10011106:	1e07      	subs	r7, r0, #0
10011108:	d11a      	bne.n	10011140 <setvbuf+0xf0>
1001110a:	9b02      	ldr	r3, [sp, #8]
1001110c:	9301      	str	r3, [sp, #4]
1001110e:	42ab      	cmp	r3, r5
10011110:	d102      	bne.n	10011118 <setvbuf+0xc8>
10011112:	2001      	movs	r0, #1
10011114:	4240      	negs	r0, r0
10011116:	e006      	b.n	10011126 <setvbuf+0xd6>
10011118:	9801      	ldr	r0, [sp, #4]
1001111a:	f000 fb03 	bl	10011724 <malloc>
1001111e:	1e07      	subs	r7, r0, #0
10011120:	d10e      	bne.n	10011140 <setvbuf+0xf0>
10011122:	e7f6      	b.n	10011112 <setvbuf+0xc2>
10011124:	2000      	movs	r0, #0
10011126:	2202      	movs	r2, #2
10011128:	89a3      	ldrh	r3, [r4, #12]
1001112a:	4313      	orrs	r3, r2
1001112c:	81a3      	strh	r3, [r4, #12]
1001112e:	2300      	movs	r3, #0
10011130:	60a3      	str	r3, [r4, #8]
10011132:	0023      	movs	r3, r4
10011134:	3347      	adds	r3, #71	; 0x47
10011136:	6023      	str	r3, [r4, #0]
10011138:	6123      	str	r3, [r4, #16]
1001113a:	2301      	movs	r3, #1
1001113c:	6163      	str	r3, [r4, #20]
1001113e:	e02a      	b.n	10011196 <setvbuf+0x146>
10011140:	2280      	movs	r2, #128	; 0x80
10011142:	89a3      	ldrh	r3, [r4, #12]
10011144:	9d01      	ldr	r5, [sp, #4]
10011146:	4313      	orrs	r3, r2
10011148:	81a3      	strh	r3, [r4, #12]
1001114a:	69b3      	ldr	r3, [r6, #24]
1001114c:	2b00      	cmp	r3, #0
1001114e:	d102      	bne.n	10011156 <setvbuf+0x106>
10011150:	0030      	movs	r0, r6
10011152:	f000 f9ef 	bl	10011534 <__sinit>
10011156:	9b00      	ldr	r3, [sp, #0]
10011158:	2b01      	cmp	r3, #1
1001115a:	d103      	bne.n	10011164 <setvbuf+0x114>
1001115c:	89a3      	ldrh	r3, [r4, #12]
1001115e:	9a00      	ldr	r2, [sp, #0]
10011160:	431a      	orrs	r2, r3
10011162:	81a2      	strh	r2, [r4, #12]
10011164:	2308      	movs	r3, #8
10011166:	89a2      	ldrh	r2, [r4, #12]
10011168:	6027      	str	r7, [r4, #0]
1001116a:	4013      	ands	r3, r2
1001116c:	6127      	str	r7, [r4, #16]
1001116e:	6165      	str	r5, [r4, #20]
10011170:	1e18      	subs	r0, r3, #0
10011172:	d00c      	beq.n	1001118e <setvbuf+0x13e>
10011174:	2301      	movs	r3, #1
10011176:	401a      	ands	r2, r3
10011178:	2300      	movs	r3, #0
1001117a:	1e10      	subs	r0, r2, #0
1001117c:	4298      	cmp	r0, r3
1001117e:	d004      	beq.n	1001118a <setvbuf+0x13a>
10011180:	426d      	negs	r5, r5
10011182:	60a3      	str	r3, [r4, #8]
10011184:	61a5      	str	r5, [r4, #24]
10011186:	0018      	movs	r0, r3
10011188:	e005      	b.n	10011196 <setvbuf+0x146>
1001118a:	60a5      	str	r5, [r4, #8]
1001118c:	e003      	b.n	10011196 <setvbuf+0x146>
1001118e:	60a3      	str	r3, [r4, #8]
10011190:	e001      	b.n	10011196 <setvbuf+0x146>
10011192:	2001      	movs	r0, #1
10011194:	4240      	negs	r0, r0
10011196:	b005      	add	sp, #20
10011198:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001119a:	46c0      	nop			; (mov r8, r8)
1001119c:	100137ac 	.word	0x100137ac
100111a0:	10013690 	.word	0x10013690
100111a4:	100136b0 	.word	0x100136b0
100111a8:	100136d0 	.word	0x100136d0
100111ac:	fffff35c 	.word	0xfffff35c

100111b0 <__swbuf_r>:
100111b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100111b2:	0005      	movs	r5, r0
100111b4:	000f      	movs	r7, r1
100111b6:	0014      	movs	r4, r2
100111b8:	2800      	cmp	r0, #0
100111ba:	d004      	beq.n	100111c6 <__swbuf_r+0x16>
100111bc:	6983      	ldr	r3, [r0, #24]
100111be:	2b00      	cmp	r3, #0
100111c0:	d101      	bne.n	100111c6 <__swbuf_r+0x16>
100111c2:	f000 f9b7 	bl	10011534 <__sinit>
100111c6:	4b23      	ldr	r3, [pc, #140]	; (10011254 <__swbuf_r+0xa4>)
100111c8:	429c      	cmp	r4, r3
100111ca:	d101      	bne.n	100111d0 <__swbuf_r+0x20>
100111cc:	686c      	ldr	r4, [r5, #4]
100111ce:	e008      	b.n	100111e2 <__swbuf_r+0x32>
100111d0:	4b21      	ldr	r3, [pc, #132]	; (10011258 <__swbuf_r+0xa8>)
100111d2:	429c      	cmp	r4, r3
100111d4:	d101      	bne.n	100111da <__swbuf_r+0x2a>
100111d6:	68ac      	ldr	r4, [r5, #8]
100111d8:	e003      	b.n	100111e2 <__swbuf_r+0x32>
100111da:	4b20      	ldr	r3, [pc, #128]	; (1001125c <__swbuf_r+0xac>)
100111dc:	429c      	cmp	r4, r3
100111de:	d100      	bne.n	100111e2 <__swbuf_r+0x32>
100111e0:	68ec      	ldr	r4, [r5, #12]
100111e2:	69a3      	ldr	r3, [r4, #24]
100111e4:	60a3      	str	r3, [r4, #8]
100111e6:	89a3      	ldrh	r3, [r4, #12]
100111e8:	071b      	lsls	r3, r3, #28
100111ea:	d50a      	bpl.n	10011202 <__swbuf_r+0x52>
100111ec:	6923      	ldr	r3, [r4, #16]
100111ee:	2b00      	cmp	r3, #0
100111f0:	d007      	beq.n	10011202 <__swbuf_r+0x52>
100111f2:	6823      	ldr	r3, [r4, #0]
100111f4:	6922      	ldr	r2, [r4, #16]
100111f6:	b2fe      	uxtb	r6, r7
100111f8:	1a98      	subs	r0, r3, r2
100111fa:	6963      	ldr	r3, [r4, #20]
100111fc:	4298      	cmp	r0, r3
100111fe:	db0f      	blt.n	10011220 <__swbuf_r+0x70>
10011200:	e008      	b.n	10011214 <__swbuf_r+0x64>
10011202:	0021      	movs	r1, r4
10011204:	0028      	movs	r0, r5
10011206:	f000 f82b 	bl	10011260 <__swsetup_r>
1001120a:	2800      	cmp	r0, #0
1001120c:	d0f1      	beq.n	100111f2 <__swbuf_r+0x42>
1001120e:	2001      	movs	r0, #1
10011210:	4240      	negs	r0, r0
10011212:	e01d      	b.n	10011250 <__swbuf_r+0xa0>
10011214:	0021      	movs	r1, r4
10011216:	0028      	movs	r0, r5
10011218:	f000 f91e 	bl	10011458 <_fflush_r>
1001121c:	2800      	cmp	r0, #0
1001121e:	d1f6      	bne.n	1001120e <__swbuf_r+0x5e>
10011220:	68a3      	ldr	r3, [r4, #8]
10011222:	3001      	adds	r0, #1
10011224:	3b01      	subs	r3, #1
10011226:	60a3      	str	r3, [r4, #8]
10011228:	6823      	ldr	r3, [r4, #0]
1001122a:	1c5a      	adds	r2, r3, #1
1001122c:	6022      	str	r2, [r4, #0]
1001122e:	701f      	strb	r7, [r3, #0]
10011230:	6963      	ldr	r3, [r4, #20]
10011232:	4298      	cmp	r0, r3
10011234:	d005      	beq.n	10011242 <__swbuf_r+0x92>
10011236:	89a3      	ldrh	r3, [r4, #12]
10011238:	0030      	movs	r0, r6
1001123a:	07db      	lsls	r3, r3, #31
1001123c:	d508      	bpl.n	10011250 <__swbuf_r+0xa0>
1001123e:	2e0a      	cmp	r6, #10
10011240:	d106      	bne.n	10011250 <__swbuf_r+0xa0>
10011242:	0021      	movs	r1, r4
10011244:	0028      	movs	r0, r5
10011246:	f000 f907 	bl	10011458 <_fflush_r>
1001124a:	2800      	cmp	r0, #0
1001124c:	d1df      	bne.n	1001120e <__swbuf_r+0x5e>
1001124e:	0030      	movs	r0, r6
10011250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011252:	46c0      	nop			; (mov r8, r8)
10011254:	10013690 	.word	0x10013690
10011258:	100136b0 	.word	0x100136b0
1001125c:	100136d0 	.word	0x100136d0

10011260 <__swsetup_r>:
10011260:	4b36      	ldr	r3, [pc, #216]	; (1001133c <__swsetup_r+0xdc>)
10011262:	b570      	push	{r4, r5, r6, lr}
10011264:	681d      	ldr	r5, [r3, #0]
10011266:	0006      	movs	r6, r0
10011268:	000c      	movs	r4, r1
1001126a:	2d00      	cmp	r5, #0
1001126c:	d005      	beq.n	1001127a <__swsetup_r+0x1a>
1001126e:	69ab      	ldr	r3, [r5, #24]
10011270:	2b00      	cmp	r3, #0
10011272:	d102      	bne.n	1001127a <__swsetup_r+0x1a>
10011274:	0028      	movs	r0, r5
10011276:	f000 f95d 	bl	10011534 <__sinit>
1001127a:	4b31      	ldr	r3, [pc, #196]	; (10011340 <__swsetup_r+0xe0>)
1001127c:	429c      	cmp	r4, r3
1001127e:	d101      	bne.n	10011284 <__swsetup_r+0x24>
10011280:	686c      	ldr	r4, [r5, #4]
10011282:	e008      	b.n	10011296 <__swsetup_r+0x36>
10011284:	4b2f      	ldr	r3, [pc, #188]	; (10011344 <__swsetup_r+0xe4>)
10011286:	429c      	cmp	r4, r3
10011288:	d101      	bne.n	1001128e <__swsetup_r+0x2e>
1001128a:	68ac      	ldr	r4, [r5, #8]
1001128c:	e003      	b.n	10011296 <__swsetup_r+0x36>
1001128e:	4b2e      	ldr	r3, [pc, #184]	; (10011348 <__swsetup_r+0xe8>)
10011290:	429c      	cmp	r4, r3
10011292:	d100      	bne.n	10011296 <__swsetup_r+0x36>
10011294:	68ec      	ldr	r4, [r5, #12]
10011296:	220c      	movs	r2, #12
10011298:	5ea3      	ldrsh	r3, [r4, r2]
1001129a:	b29a      	uxth	r2, r3
1001129c:	0711      	lsls	r1, r2, #28
1001129e:	d423      	bmi.n	100112e8 <__swsetup_r+0x88>
100112a0:	06d1      	lsls	r1, r2, #27
100112a2:	d407      	bmi.n	100112b4 <__swsetup_r+0x54>
100112a4:	2209      	movs	r2, #9
100112a6:	2001      	movs	r0, #1
100112a8:	6032      	str	r2, [r6, #0]
100112aa:	3237      	adds	r2, #55	; 0x37
100112ac:	4313      	orrs	r3, r2
100112ae:	81a3      	strh	r3, [r4, #12]
100112b0:	4240      	negs	r0, r0
100112b2:	e042      	b.n	1001133a <__swsetup_r+0xda>
100112b4:	0753      	lsls	r3, r2, #29
100112b6:	d513      	bpl.n	100112e0 <__swsetup_r+0x80>
100112b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
100112ba:	2900      	cmp	r1, #0
100112bc:	d008      	beq.n	100112d0 <__swsetup_r+0x70>
100112be:	0023      	movs	r3, r4
100112c0:	3344      	adds	r3, #68	; 0x44
100112c2:	4299      	cmp	r1, r3
100112c4:	d002      	beq.n	100112cc <__swsetup_r+0x6c>
100112c6:	0030      	movs	r0, r6
100112c8:	f000 fa36 	bl	10011738 <_free_r>
100112cc:	2300      	movs	r3, #0
100112ce:	6363      	str	r3, [r4, #52]	; 0x34
100112d0:	2224      	movs	r2, #36	; 0x24
100112d2:	89a3      	ldrh	r3, [r4, #12]
100112d4:	4393      	bics	r3, r2
100112d6:	81a3      	strh	r3, [r4, #12]
100112d8:	2300      	movs	r3, #0
100112da:	6063      	str	r3, [r4, #4]
100112dc:	6923      	ldr	r3, [r4, #16]
100112de:	6023      	str	r3, [r4, #0]
100112e0:	2208      	movs	r2, #8
100112e2:	89a3      	ldrh	r3, [r4, #12]
100112e4:	4313      	orrs	r3, r2
100112e6:	81a3      	strh	r3, [r4, #12]
100112e8:	6923      	ldr	r3, [r4, #16]
100112ea:	2b00      	cmp	r3, #0
100112ec:	d10b      	bne.n	10011306 <__swsetup_r+0xa6>
100112ee:	23a0      	movs	r3, #160	; 0xa0
100112f0:	89a2      	ldrh	r2, [r4, #12]
100112f2:	009b      	lsls	r3, r3, #2
100112f4:	4013      	ands	r3, r2
100112f6:	2280      	movs	r2, #128	; 0x80
100112f8:	0092      	lsls	r2, r2, #2
100112fa:	4293      	cmp	r3, r2
100112fc:	d003      	beq.n	10011306 <__swsetup_r+0xa6>
100112fe:	0021      	movs	r1, r4
10011300:	0030      	movs	r0, r6
10011302:	f000 f9d1 	bl	100116a8 <__smakebuf_r>
10011306:	2301      	movs	r3, #1
10011308:	89a2      	ldrh	r2, [r4, #12]
1001130a:	4013      	ands	r3, r2
1001130c:	d005      	beq.n	1001131a <__swsetup_r+0xba>
1001130e:	2300      	movs	r3, #0
10011310:	60a3      	str	r3, [r4, #8]
10011312:	6963      	ldr	r3, [r4, #20]
10011314:	425b      	negs	r3, r3
10011316:	61a3      	str	r3, [r4, #24]
10011318:	e003      	b.n	10011322 <__swsetup_r+0xc2>
1001131a:	0792      	lsls	r2, r2, #30
1001131c:	d400      	bmi.n	10011320 <__swsetup_r+0xc0>
1001131e:	6963      	ldr	r3, [r4, #20]
10011320:	60a3      	str	r3, [r4, #8]
10011322:	2000      	movs	r0, #0
10011324:	6923      	ldr	r3, [r4, #16]
10011326:	4283      	cmp	r3, r0
10011328:	d107      	bne.n	1001133a <__swsetup_r+0xda>
1001132a:	220c      	movs	r2, #12
1001132c:	5ea3      	ldrsh	r3, [r4, r2]
1001132e:	061a      	lsls	r2, r3, #24
10011330:	d503      	bpl.n	1001133a <__swsetup_r+0xda>
10011332:	2240      	movs	r2, #64	; 0x40
10011334:	4313      	orrs	r3, r2
10011336:	81a3      	strh	r3, [r4, #12]
10011338:	3801      	subs	r0, #1
1001133a:	bd70      	pop	{r4, r5, r6, pc}
1001133c:	100137ac 	.word	0x100137ac
10011340:	10013690 	.word	0x10013690
10011344:	100136b0 	.word	0x100136b0
10011348:	100136d0 	.word	0x100136d0

1001134c <__sflush_r>:
1001134c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001134e:	898a      	ldrh	r2, [r1, #12]
10011350:	0005      	movs	r5, r0
10011352:	000c      	movs	r4, r1
10011354:	0713      	lsls	r3, r2, #28
10011356:	d45a      	bmi.n	1001140e <__sflush_r+0xc2>
10011358:	684b      	ldr	r3, [r1, #4]
1001135a:	2b00      	cmp	r3, #0
1001135c:	dc02      	bgt.n	10011364 <__sflush_r+0x18>
1001135e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10011360:	2b00      	cmp	r3, #0
10011362:	dd19      	ble.n	10011398 <__sflush_r+0x4c>
10011364:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10011366:	2f00      	cmp	r7, #0
10011368:	d016      	beq.n	10011398 <__sflush_r+0x4c>
1001136a:	2300      	movs	r3, #0
1001136c:	682e      	ldr	r6, [r5, #0]
1001136e:	602b      	str	r3, [r5, #0]
10011370:	2380      	movs	r3, #128	; 0x80
10011372:	015b      	lsls	r3, r3, #5
10011374:	401a      	ands	r2, r3
10011376:	d001      	beq.n	1001137c <__sflush_r+0x30>
10011378:	6d60      	ldr	r0, [r4, #84]	; 0x54
1001137a:	e014      	b.n	100113a6 <__sflush_r+0x5a>
1001137c:	2301      	movs	r3, #1
1001137e:	6a21      	ldr	r1, [r4, #32]
10011380:	0028      	movs	r0, r5
10011382:	47b8      	blx	r7
10011384:	1c43      	adds	r3, r0, #1
10011386:	d10e      	bne.n	100113a6 <__sflush_r+0x5a>
10011388:	682b      	ldr	r3, [r5, #0]
1001138a:	2b00      	cmp	r3, #0
1001138c:	d00b      	beq.n	100113a6 <__sflush_r+0x5a>
1001138e:	2b1d      	cmp	r3, #29
10011390:	d001      	beq.n	10011396 <__sflush_r+0x4a>
10011392:	2b16      	cmp	r3, #22
10011394:	d102      	bne.n	1001139c <__sflush_r+0x50>
10011396:	602e      	str	r6, [r5, #0]
10011398:	2000      	movs	r0, #0
1001139a:	e05a      	b.n	10011452 <__sflush_r+0x106>
1001139c:	2240      	movs	r2, #64	; 0x40
1001139e:	89a3      	ldrh	r3, [r4, #12]
100113a0:	4313      	orrs	r3, r2
100113a2:	81a3      	strh	r3, [r4, #12]
100113a4:	e055      	b.n	10011452 <__sflush_r+0x106>
100113a6:	89a3      	ldrh	r3, [r4, #12]
100113a8:	075b      	lsls	r3, r3, #29
100113aa:	d506      	bpl.n	100113ba <__sflush_r+0x6e>
100113ac:	6863      	ldr	r3, [r4, #4]
100113ae:	1ac0      	subs	r0, r0, r3
100113b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
100113b2:	2b00      	cmp	r3, #0
100113b4:	d001      	beq.n	100113ba <__sflush_r+0x6e>
100113b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
100113b8:	1ac0      	subs	r0, r0, r3
100113ba:	2300      	movs	r3, #0
100113bc:	0002      	movs	r2, r0
100113be:	6a21      	ldr	r1, [r4, #32]
100113c0:	0028      	movs	r0, r5
100113c2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
100113c4:	47b8      	blx	r7
100113c6:	89a3      	ldrh	r3, [r4, #12]
100113c8:	1c42      	adds	r2, r0, #1
100113ca:	d106      	bne.n	100113da <__sflush_r+0x8e>
100113cc:	6829      	ldr	r1, [r5, #0]
100113ce:	291d      	cmp	r1, #29
100113d0:	d83a      	bhi.n	10011448 <__sflush_r+0xfc>
100113d2:	4a20      	ldr	r2, [pc, #128]	; (10011454 <__sflush_r+0x108>)
100113d4:	40ca      	lsrs	r2, r1
100113d6:	07d2      	lsls	r2, r2, #31
100113d8:	d536      	bpl.n	10011448 <__sflush_r+0xfc>
100113da:	2200      	movs	r2, #0
100113dc:	6062      	str	r2, [r4, #4]
100113de:	6922      	ldr	r2, [r4, #16]
100113e0:	6022      	str	r2, [r4, #0]
100113e2:	04db      	lsls	r3, r3, #19
100113e4:	d505      	bpl.n	100113f2 <__sflush_r+0xa6>
100113e6:	1c43      	adds	r3, r0, #1
100113e8:	d102      	bne.n	100113f0 <__sflush_r+0xa4>
100113ea:	682b      	ldr	r3, [r5, #0]
100113ec:	2b00      	cmp	r3, #0
100113ee:	d100      	bne.n	100113f2 <__sflush_r+0xa6>
100113f0:	6560      	str	r0, [r4, #84]	; 0x54
100113f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
100113f4:	602e      	str	r6, [r5, #0]
100113f6:	2900      	cmp	r1, #0
100113f8:	d0ce      	beq.n	10011398 <__sflush_r+0x4c>
100113fa:	0023      	movs	r3, r4
100113fc:	3344      	adds	r3, #68	; 0x44
100113fe:	4299      	cmp	r1, r3
10011400:	d002      	beq.n	10011408 <__sflush_r+0xbc>
10011402:	0028      	movs	r0, r5
10011404:	f000 f998 	bl	10011738 <_free_r>
10011408:	2000      	movs	r0, #0
1001140a:	6360      	str	r0, [r4, #52]	; 0x34
1001140c:	e021      	b.n	10011452 <__sflush_r+0x106>
1001140e:	690f      	ldr	r7, [r1, #16]
10011410:	2f00      	cmp	r7, #0
10011412:	d0c1      	beq.n	10011398 <__sflush_r+0x4c>
10011414:	680b      	ldr	r3, [r1, #0]
10011416:	600f      	str	r7, [r1, #0]
10011418:	1bdb      	subs	r3, r3, r7
1001141a:	9301      	str	r3, [sp, #4]
1001141c:	2300      	movs	r3, #0
1001141e:	0792      	lsls	r2, r2, #30
10011420:	d100      	bne.n	10011424 <__sflush_r+0xd8>
10011422:	694b      	ldr	r3, [r1, #20]
10011424:	60a3      	str	r3, [r4, #8]
10011426:	e003      	b.n	10011430 <__sflush_r+0xe4>
10011428:	9b01      	ldr	r3, [sp, #4]
1001142a:	183f      	adds	r7, r7, r0
1001142c:	1a1b      	subs	r3, r3, r0
1001142e:	9301      	str	r3, [sp, #4]
10011430:	9b01      	ldr	r3, [sp, #4]
10011432:	2b00      	cmp	r3, #0
10011434:	ddb0      	ble.n	10011398 <__sflush_r+0x4c>
10011436:	9b01      	ldr	r3, [sp, #4]
10011438:	003a      	movs	r2, r7
1001143a:	6a21      	ldr	r1, [r4, #32]
1001143c:	0028      	movs	r0, r5
1001143e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10011440:	47b0      	blx	r6
10011442:	2800      	cmp	r0, #0
10011444:	dcf0      	bgt.n	10011428 <__sflush_r+0xdc>
10011446:	89a3      	ldrh	r3, [r4, #12]
10011448:	2240      	movs	r2, #64	; 0x40
1001144a:	2001      	movs	r0, #1
1001144c:	4313      	orrs	r3, r2
1001144e:	81a3      	strh	r3, [r4, #12]
10011450:	4240      	negs	r0, r0
10011452:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011454:	20400001 	.word	0x20400001

10011458 <_fflush_r>:
10011458:	690b      	ldr	r3, [r1, #16]
1001145a:	b570      	push	{r4, r5, r6, lr}
1001145c:	0005      	movs	r5, r0
1001145e:	000c      	movs	r4, r1
10011460:	2b00      	cmp	r3, #0
10011462:	d101      	bne.n	10011468 <_fflush_r+0x10>
10011464:	2000      	movs	r0, #0
10011466:	e01c      	b.n	100114a2 <_fflush_r+0x4a>
10011468:	2800      	cmp	r0, #0
1001146a:	d004      	beq.n	10011476 <_fflush_r+0x1e>
1001146c:	6983      	ldr	r3, [r0, #24]
1001146e:	2b00      	cmp	r3, #0
10011470:	d101      	bne.n	10011476 <_fflush_r+0x1e>
10011472:	f000 f85f 	bl	10011534 <__sinit>
10011476:	4b0b      	ldr	r3, [pc, #44]	; (100114a4 <_fflush_r+0x4c>)
10011478:	429c      	cmp	r4, r3
1001147a:	d101      	bne.n	10011480 <_fflush_r+0x28>
1001147c:	686c      	ldr	r4, [r5, #4]
1001147e:	e008      	b.n	10011492 <_fflush_r+0x3a>
10011480:	4b09      	ldr	r3, [pc, #36]	; (100114a8 <_fflush_r+0x50>)
10011482:	429c      	cmp	r4, r3
10011484:	d101      	bne.n	1001148a <_fflush_r+0x32>
10011486:	68ac      	ldr	r4, [r5, #8]
10011488:	e003      	b.n	10011492 <_fflush_r+0x3a>
1001148a:	4b08      	ldr	r3, [pc, #32]	; (100114ac <_fflush_r+0x54>)
1001148c:	429c      	cmp	r4, r3
1001148e:	d100      	bne.n	10011492 <_fflush_r+0x3a>
10011490:	68ec      	ldr	r4, [r5, #12]
10011492:	220c      	movs	r2, #12
10011494:	5ea3      	ldrsh	r3, [r4, r2]
10011496:	2b00      	cmp	r3, #0
10011498:	d0e4      	beq.n	10011464 <_fflush_r+0xc>
1001149a:	0021      	movs	r1, r4
1001149c:	0028      	movs	r0, r5
1001149e:	f7ff ff55 	bl	1001134c <__sflush_r>
100114a2:	bd70      	pop	{r4, r5, r6, pc}
100114a4:	10013690 	.word	0x10013690
100114a8:	100136b0 	.word	0x100136b0
100114ac:	100136d0 	.word	0x100136d0

100114b0 <_cleanup_r>:
100114b0:	b510      	push	{r4, lr}
100114b2:	4902      	ldr	r1, [pc, #8]	; (100114bc <_cleanup_r+0xc>)
100114b4:	f000 f8b0 	bl	10011618 <_fwalk_reent>
100114b8:	bd10      	pop	{r4, pc}
100114ba:	46c0      	nop			; (mov r8, r8)
100114bc:	10011459 	.word	0x10011459

100114c0 <std.isra.0>:
100114c0:	2300      	movs	r3, #0
100114c2:	b510      	push	{r4, lr}
100114c4:	0004      	movs	r4, r0
100114c6:	6003      	str	r3, [r0, #0]
100114c8:	6043      	str	r3, [r0, #4]
100114ca:	6083      	str	r3, [r0, #8]
100114cc:	8181      	strh	r1, [r0, #12]
100114ce:	6643      	str	r3, [r0, #100]	; 0x64
100114d0:	81c2      	strh	r2, [r0, #14]
100114d2:	6103      	str	r3, [r0, #16]
100114d4:	6143      	str	r3, [r0, #20]
100114d6:	6183      	str	r3, [r0, #24]
100114d8:	0019      	movs	r1, r3
100114da:	2208      	movs	r2, #8
100114dc:	305c      	adds	r0, #92	; 0x5c
100114de:	f7ff fccf 	bl	10010e80 <memset>
100114e2:	4b05      	ldr	r3, [pc, #20]	; (100114f8 <std.isra.0+0x38>)
100114e4:	6224      	str	r4, [r4, #32]
100114e6:	6263      	str	r3, [r4, #36]	; 0x24
100114e8:	4b04      	ldr	r3, [pc, #16]	; (100114fc <std.isra.0+0x3c>)
100114ea:	62a3      	str	r3, [r4, #40]	; 0x28
100114ec:	4b04      	ldr	r3, [pc, #16]	; (10011500 <std.isra.0+0x40>)
100114ee:	62e3      	str	r3, [r4, #44]	; 0x2c
100114f0:	4b04      	ldr	r3, [pc, #16]	; (10011504 <std.isra.0+0x44>)
100114f2:	6323      	str	r3, [r4, #48]	; 0x30
100114f4:	bd10      	pop	{r4, pc}
100114f6:	46c0      	nop			; (mov r8, r8)
100114f8:	10011ea9 	.word	0x10011ea9
100114fc:	10011ed1 	.word	0x10011ed1
10011500:	10011f09 	.word	0x10011f09
10011504:	10011f35 	.word	0x10011f35

10011508 <__sfmoreglue>:
10011508:	b570      	push	{r4, r5, r6, lr}
1001150a:	2568      	movs	r5, #104	; 0x68
1001150c:	1e4b      	subs	r3, r1, #1
1001150e:	435d      	muls	r5, r3
10011510:	000e      	movs	r6, r1
10011512:	0029      	movs	r1, r5
10011514:	3174      	adds	r1, #116	; 0x74
10011516:	f000 f955 	bl	100117c4 <_malloc_r>
1001151a:	1e04      	subs	r4, r0, #0
1001151c:	d008      	beq.n	10011530 <__sfmoreglue+0x28>
1001151e:	2100      	movs	r1, #0
10011520:	002a      	movs	r2, r5
10011522:	6001      	str	r1, [r0, #0]
10011524:	6046      	str	r6, [r0, #4]
10011526:	300c      	adds	r0, #12
10011528:	60a0      	str	r0, [r4, #8]
1001152a:	3268      	adds	r2, #104	; 0x68
1001152c:	f7ff fca8 	bl	10010e80 <memset>
10011530:	0020      	movs	r0, r4
10011532:	bd70      	pop	{r4, r5, r6, pc}

10011534 <__sinit>:
10011534:	6983      	ldr	r3, [r0, #24]
10011536:	b513      	push	{r0, r1, r4, lr}
10011538:	0004      	movs	r4, r0
1001153a:	2b00      	cmp	r3, #0
1001153c:	d128      	bne.n	10011590 <__sinit+0x5c>
1001153e:	6483      	str	r3, [r0, #72]	; 0x48
10011540:	64c3      	str	r3, [r0, #76]	; 0x4c
10011542:	6503      	str	r3, [r0, #80]	; 0x50
10011544:	4b13      	ldr	r3, [pc, #76]	; (10011594 <__sinit+0x60>)
10011546:	4a14      	ldr	r2, [pc, #80]	; (10011598 <__sinit+0x64>)
10011548:	681b      	ldr	r3, [r3, #0]
1001154a:	6282      	str	r2, [r0, #40]	; 0x28
1001154c:	9301      	str	r3, [sp, #4]
1001154e:	4298      	cmp	r0, r3
10011550:	d101      	bne.n	10011556 <__sinit+0x22>
10011552:	2301      	movs	r3, #1
10011554:	6183      	str	r3, [r0, #24]
10011556:	0020      	movs	r0, r4
10011558:	f000 f820 	bl	1001159c <__sfp>
1001155c:	6060      	str	r0, [r4, #4]
1001155e:	0020      	movs	r0, r4
10011560:	f000 f81c 	bl	1001159c <__sfp>
10011564:	60a0      	str	r0, [r4, #8]
10011566:	0020      	movs	r0, r4
10011568:	f000 f818 	bl	1001159c <__sfp>
1001156c:	2200      	movs	r2, #0
1001156e:	60e0      	str	r0, [r4, #12]
10011570:	2104      	movs	r1, #4
10011572:	6860      	ldr	r0, [r4, #4]
10011574:	f7ff ffa4 	bl	100114c0 <std.isra.0>
10011578:	2201      	movs	r2, #1
1001157a:	2109      	movs	r1, #9
1001157c:	68a0      	ldr	r0, [r4, #8]
1001157e:	f7ff ff9f 	bl	100114c0 <std.isra.0>
10011582:	2202      	movs	r2, #2
10011584:	2112      	movs	r1, #18
10011586:	68e0      	ldr	r0, [r4, #12]
10011588:	f7ff ff9a 	bl	100114c0 <std.isra.0>
1001158c:	2301      	movs	r3, #1
1001158e:	61a3      	str	r3, [r4, #24]
10011590:	bd13      	pop	{r0, r1, r4, pc}
10011592:	46c0      	nop			; (mov r8, r8)
10011594:	1001368c 	.word	0x1001368c
10011598:	100114b1 	.word	0x100114b1

1001159c <__sfp>:
1001159c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001159e:	4b1d      	ldr	r3, [pc, #116]	; (10011614 <__sfp+0x78>)
100115a0:	0006      	movs	r6, r0
100115a2:	681d      	ldr	r5, [r3, #0]
100115a4:	69ab      	ldr	r3, [r5, #24]
100115a6:	2b00      	cmp	r3, #0
100115a8:	d102      	bne.n	100115b0 <__sfp+0x14>
100115aa:	0028      	movs	r0, r5
100115ac:	f7ff ffc2 	bl	10011534 <__sinit>
100115b0:	3548      	adds	r5, #72	; 0x48
100115b2:	68ac      	ldr	r4, [r5, #8]
100115b4:	686b      	ldr	r3, [r5, #4]
100115b6:	3b01      	subs	r3, #1
100115b8:	d405      	bmi.n	100115c6 <__sfp+0x2a>
100115ba:	220c      	movs	r2, #12
100115bc:	5ea7      	ldrsh	r7, [r4, r2]
100115be:	2f00      	cmp	r7, #0
100115c0:	d010      	beq.n	100115e4 <__sfp+0x48>
100115c2:	3468      	adds	r4, #104	; 0x68
100115c4:	e7f7      	b.n	100115b6 <__sfp+0x1a>
100115c6:	682b      	ldr	r3, [r5, #0]
100115c8:	2b00      	cmp	r3, #0
100115ca:	d001      	beq.n	100115d0 <__sfp+0x34>
100115cc:	682d      	ldr	r5, [r5, #0]
100115ce:	e7f0      	b.n	100115b2 <__sfp+0x16>
100115d0:	2104      	movs	r1, #4
100115d2:	0030      	movs	r0, r6
100115d4:	f7ff ff98 	bl	10011508 <__sfmoreglue>
100115d8:	6028      	str	r0, [r5, #0]
100115da:	2800      	cmp	r0, #0
100115dc:	d1f6      	bne.n	100115cc <__sfp+0x30>
100115de:	230c      	movs	r3, #12
100115e0:	6033      	str	r3, [r6, #0]
100115e2:	e016      	b.n	10011612 <__sfp+0x76>
100115e4:	2301      	movs	r3, #1
100115e6:	0020      	movs	r0, r4
100115e8:	425b      	negs	r3, r3
100115ea:	81e3      	strh	r3, [r4, #14]
100115ec:	3302      	adds	r3, #2
100115ee:	81a3      	strh	r3, [r4, #12]
100115f0:	6667      	str	r7, [r4, #100]	; 0x64
100115f2:	6027      	str	r7, [r4, #0]
100115f4:	60a7      	str	r7, [r4, #8]
100115f6:	6067      	str	r7, [r4, #4]
100115f8:	6127      	str	r7, [r4, #16]
100115fa:	6167      	str	r7, [r4, #20]
100115fc:	61a7      	str	r7, [r4, #24]
100115fe:	305c      	adds	r0, #92	; 0x5c
10011600:	2208      	movs	r2, #8
10011602:	0039      	movs	r1, r7
10011604:	f7ff fc3c 	bl	10010e80 <memset>
10011608:	0020      	movs	r0, r4
1001160a:	6367      	str	r7, [r4, #52]	; 0x34
1001160c:	63a7      	str	r7, [r4, #56]	; 0x38
1001160e:	64a7      	str	r7, [r4, #72]	; 0x48
10011610:	64e7      	str	r7, [r4, #76]	; 0x4c
10011612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011614:	1001368c 	.word	0x1001368c

10011618 <_fwalk_reent>:
10011618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001161a:	0004      	movs	r4, r0
1001161c:	0007      	movs	r7, r0
1001161e:	2600      	movs	r6, #0
10011620:	9101      	str	r1, [sp, #4]
10011622:	3448      	adds	r4, #72	; 0x48
10011624:	2c00      	cmp	r4, #0
10011626:	d016      	beq.n	10011656 <_fwalk_reent+0x3e>
10011628:	6863      	ldr	r3, [r4, #4]
1001162a:	68a5      	ldr	r5, [r4, #8]
1001162c:	9300      	str	r3, [sp, #0]
1001162e:	9b00      	ldr	r3, [sp, #0]
10011630:	3b01      	subs	r3, #1
10011632:	9300      	str	r3, [sp, #0]
10011634:	d40d      	bmi.n	10011652 <_fwalk_reent+0x3a>
10011636:	89ab      	ldrh	r3, [r5, #12]
10011638:	2b01      	cmp	r3, #1
1001163a:	d908      	bls.n	1001164e <_fwalk_reent+0x36>
1001163c:	220e      	movs	r2, #14
1001163e:	5eab      	ldrsh	r3, [r5, r2]
10011640:	3301      	adds	r3, #1
10011642:	d004      	beq.n	1001164e <_fwalk_reent+0x36>
10011644:	0029      	movs	r1, r5
10011646:	0038      	movs	r0, r7
10011648:	9b01      	ldr	r3, [sp, #4]
1001164a:	4798      	blx	r3
1001164c:	4306      	orrs	r6, r0
1001164e:	3568      	adds	r5, #104	; 0x68
10011650:	e7ed      	b.n	1001162e <_fwalk_reent+0x16>
10011652:	6824      	ldr	r4, [r4, #0]
10011654:	e7e6      	b.n	10011624 <_fwalk_reent+0xc>
10011656:	0030      	movs	r0, r6
10011658:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

1001165c <__swhatbuf_r>:
1001165c:	b570      	push	{r4, r5, r6, lr}
1001165e:	000e      	movs	r6, r1
10011660:	001d      	movs	r5, r3
10011662:	230e      	movs	r3, #14
10011664:	5ec9      	ldrsh	r1, [r1, r3]
10011666:	b090      	sub	sp, #64	; 0x40
10011668:	0014      	movs	r4, r2
1001166a:	2900      	cmp	r1, #0
1001166c:	da06      	bge.n	1001167c <__swhatbuf_r+0x20>
1001166e:	2300      	movs	r3, #0
10011670:	602b      	str	r3, [r5, #0]
10011672:	89b3      	ldrh	r3, [r6, #12]
10011674:	061b      	lsls	r3, r3, #24
10011676:	d50f      	bpl.n	10011698 <__swhatbuf_r+0x3c>
10011678:	2340      	movs	r3, #64	; 0x40
1001167a:	e00f      	b.n	1001169c <__swhatbuf_r+0x40>
1001167c:	aa01      	add	r2, sp, #4
1001167e:	f000 fc85 	bl	10011f8c <_fstat_r>
10011682:	2800      	cmp	r0, #0
10011684:	dbf3      	blt.n	1001166e <__swhatbuf_r+0x12>
10011686:	23f0      	movs	r3, #240	; 0xf0
10011688:	9a02      	ldr	r2, [sp, #8]
1001168a:	021b      	lsls	r3, r3, #8
1001168c:	4013      	ands	r3, r2
1001168e:	4a05      	ldr	r2, [pc, #20]	; (100116a4 <__swhatbuf_r+0x48>)
10011690:	189b      	adds	r3, r3, r2
10011692:	425a      	negs	r2, r3
10011694:	4153      	adcs	r3, r2
10011696:	602b      	str	r3, [r5, #0]
10011698:	2380      	movs	r3, #128	; 0x80
1001169a:	00db      	lsls	r3, r3, #3
1001169c:	2000      	movs	r0, #0
1001169e:	6023      	str	r3, [r4, #0]
100116a0:	b010      	add	sp, #64	; 0x40
100116a2:	bd70      	pop	{r4, r5, r6, pc}
100116a4:	ffffe000 	.word	0xffffe000

100116a8 <__smakebuf_r>:
100116a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100116aa:	2602      	movs	r6, #2
100116ac:	898b      	ldrh	r3, [r1, #12]
100116ae:	0005      	movs	r5, r0
100116b0:	000c      	movs	r4, r1
100116b2:	4233      	tst	r3, r6
100116b4:	d110      	bne.n	100116d8 <__smakebuf_r+0x30>
100116b6:	ab01      	add	r3, sp, #4
100116b8:	466a      	mov	r2, sp
100116ba:	f7ff ffcf 	bl	1001165c <__swhatbuf_r>
100116be:	9900      	ldr	r1, [sp, #0]
100116c0:	0007      	movs	r7, r0
100116c2:	0028      	movs	r0, r5
100116c4:	f000 f87e 	bl	100117c4 <_malloc_r>
100116c8:	2800      	cmp	r0, #0
100116ca:	d10c      	bne.n	100116e6 <__smakebuf_r+0x3e>
100116cc:	220c      	movs	r2, #12
100116ce:	5ea3      	ldrsh	r3, [r4, r2]
100116d0:	059a      	lsls	r2, r3, #22
100116d2:	d423      	bmi.n	1001171c <__smakebuf_r+0x74>
100116d4:	4333      	orrs	r3, r6
100116d6:	81a3      	strh	r3, [r4, #12]
100116d8:	0023      	movs	r3, r4
100116da:	3347      	adds	r3, #71	; 0x47
100116dc:	6023      	str	r3, [r4, #0]
100116de:	6123      	str	r3, [r4, #16]
100116e0:	2301      	movs	r3, #1
100116e2:	6163      	str	r3, [r4, #20]
100116e4:	e01a      	b.n	1001171c <__smakebuf_r+0x74>
100116e6:	2280      	movs	r2, #128	; 0x80
100116e8:	4b0d      	ldr	r3, [pc, #52]	; (10011720 <__smakebuf_r+0x78>)
100116ea:	62ab      	str	r3, [r5, #40]	; 0x28
100116ec:	89a3      	ldrh	r3, [r4, #12]
100116ee:	6020      	str	r0, [r4, #0]
100116f0:	4313      	orrs	r3, r2
100116f2:	81a3      	strh	r3, [r4, #12]
100116f4:	9b00      	ldr	r3, [sp, #0]
100116f6:	6120      	str	r0, [r4, #16]
100116f8:	6163      	str	r3, [r4, #20]
100116fa:	9b01      	ldr	r3, [sp, #4]
100116fc:	2b00      	cmp	r3, #0
100116fe:	d00a      	beq.n	10011716 <__smakebuf_r+0x6e>
10011700:	230e      	movs	r3, #14
10011702:	5ee1      	ldrsh	r1, [r4, r3]
10011704:	0028      	movs	r0, r5
10011706:	f000 fc53 	bl	10011fb0 <_isatty_r>
1001170a:	2800      	cmp	r0, #0
1001170c:	d003      	beq.n	10011716 <__smakebuf_r+0x6e>
1001170e:	2201      	movs	r2, #1
10011710:	89a3      	ldrh	r3, [r4, #12]
10011712:	4313      	orrs	r3, r2
10011714:	81a3      	strh	r3, [r4, #12]
10011716:	89a3      	ldrh	r3, [r4, #12]
10011718:	431f      	orrs	r7, r3
1001171a:	81a7      	strh	r7, [r4, #12]
1001171c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1001171e:	46c0      	nop			; (mov r8, r8)
10011720:	100114b1 	.word	0x100114b1

10011724 <malloc>:
10011724:	b510      	push	{r4, lr}
10011726:	4b03      	ldr	r3, [pc, #12]	; (10011734 <malloc+0x10>)
10011728:	0001      	movs	r1, r0
1001172a:	6818      	ldr	r0, [r3, #0]
1001172c:	f000 f84a 	bl	100117c4 <_malloc_r>
10011730:	bd10      	pop	{r4, pc}
10011732:	46c0      	nop			; (mov r8, r8)
10011734:	100137ac 	.word	0x100137ac

10011738 <_free_r>:
10011738:	b530      	push	{r4, r5, lr}
1001173a:	2900      	cmp	r1, #0
1001173c:	d03e      	beq.n	100117bc <_free_r+0x84>
1001173e:	3904      	subs	r1, #4
10011740:	680b      	ldr	r3, [r1, #0]
10011742:	2b00      	cmp	r3, #0
10011744:	da00      	bge.n	10011748 <_free_r+0x10>
10011746:	18c9      	adds	r1, r1, r3
10011748:	4a1d      	ldr	r2, [pc, #116]	; (100117c0 <_free_r+0x88>)
1001174a:	6813      	ldr	r3, [r2, #0]
1001174c:	0014      	movs	r4, r2
1001174e:	2b00      	cmp	r3, #0
10011750:	d102      	bne.n	10011758 <_free_r+0x20>
10011752:	604b      	str	r3, [r1, #4]
10011754:	6011      	str	r1, [r2, #0]
10011756:	e031      	b.n	100117bc <_free_r+0x84>
10011758:	428b      	cmp	r3, r1
1001175a:	d90d      	bls.n	10011778 <_free_r+0x40>
1001175c:	680a      	ldr	r2, [r1, #0]
1001175e:	1888      	adds	r0, r1, r2
10011760:	4283      	cmp	r3, r0
10011762:	d103      	bne.n	1001176c <_free_r+0x34>
10011764:	6818      	ldr	r0, [r3, #0]
10011766:	685b      	ldr	r3, [r3, #4]
10011768:	1882      	adds	r2, r0, r2
1001176a:	600a      	str	r2, [r1, #0]
1001176c:	604b      	str	r3, [r1, #4]
1001176e:	6021      	str	r1, [r4, #0]
10011770:	e024      	b.n	100117bc <_free_r+0x84>
10011772:	428a      	cmp	r2, r1
10011774:	d803      	bhi.n	1001177e <_free_r+0x46>
10011776:	0013      	movs	r3, r2
10011778:	685a      	ldr	r2, [r3, #4]
1001177a:	2a00      	cmp	r2, #0
1001177c:	d1f9      	bne.n	10011772 <_free_r+0x3a>
1001177e:	681d      	ldr	r5, [r3, #0]
10011780:	195c      	adds	r4, r3, r5
10011782:	428c      	cmp	r4, r1
10011784:	d10b      	bne.n	1001179e <_free_r+0x66>
10011786:	6809      	ldr	r1, [r1, #0]
10011788:	1869      	adds	r1, r5, r1
1001178a:	1858      	adds	r0, r3, r1
1001178c:	6019      	str	r1, [r3, #0]
1001178e:	4282      	cmp	r2, r0
10011790:	d114      	bne.n	100117bc <_free_r+0x84>
10011792:	6810      	ldr	r0, [r2, #0]
10011794:	6852      	ldr	r2, [r2, #4]
10011796:	1841      	adds	r1, r0, r1
10011798:	6019      	str	r1, [r3, #0]
1001179a:	605a      	str	r2, [r3, #4]
1001179c:	e00e      	b.n	100117bc <_free_r+0x84>
1001179e:	428c      	cmp	r4, r1
100117a0:	d902      	bls.n	100117a8 <_free_r+0x70>
100117a2:	230c      	movs	r3, #12
100117a4:	6003      	str	r3, [r0, #0]
100117a6:	e009      	b.n	100117bc <_free_r+0x84>
100117a8:	6808      	ldr	r0, [r1, #0]
100117aa:	180c      	adds	r4, r1, r0
100117ac:	42a2      	cmp	r2, r4
100117ae:	d103      	bne.n	100117b8 <_free_r+0x80>
100117b0:	6814      	ldr	r4, [r2, #0]
100117b2:	6852      	ldr	r2, [r2, #4]
100117b4:	1820      	adds	r0, r4, r0
100117b6:	6008      	str	r0, [r1, #0]
100117b8:	604a      	str	r2, [r1, #4]
100117ba:	6059      	str	r1, [r3, #4]
100117bc:	bd30      	pop	{r4, r5, pc}
100117be:	46c0      	nop			; (mov r8, r8)
100117c0:	1001526c 	.word	0x1001526c

100117c4 <_malloc_r>:
100117c4:	2303      	movs	r3, #3
100117c6:	b570      	push	{r4, r5, r6, lr}
100117c8:	1ccd      	adds	r5, r1, #3
100117ca:	439d      	bics	r5, r3
100117cc:	3508      	adds	r5, #8
100117ce:	0006      	movs	r6, r0
100117d0:	2d0c      	cmp	r5, #12
100117d2:	d201      	bcs.n	100117d8 <_malloc_r+0x14>
100117d4:	250c      	movs	r5, #12
100117d6:	e005      	b.n	100117e4 <_malloc_r+0x20>
100117d8:	2d00      	cmp	r5, #0
100117da:	da03      	bge.n	100117e4 <_malloc_r+0x20>
100117dc:	230c      	movs	r3, #12
100117de:	2000      	movs	r0, #0
100117e0:	6033      	str	r3, [r6, #0]
100117e2:	e040      	b.n	10011866 <_malloc_r+0xa2>
100117e4:	42a9      	cmp	r1, r5
100117e6:	d8f9      	bhi.n	100117dc <_malloc_r+0x18>
100117e8:	4b1f      	ldr	r3, [pc, #124]	; (10011868 <_malloc_r+0xa4>)
100117ea:	681c      	ldr	r4, [r3, #0]
100117ec:	001a      	movs	r2, r3
100117ee:	0021      	movs	r1, r4
100117f0:	2900      	cmp	r1, #0
100117f2:	d013      	beq.n	1001181c <_malloc_r+0x58>
100117f4:	680b      	ldr	r3, [r1, #0]
100117f6:	1b5b      	subs	r3, r3, r5
100117f8:	d40d      	bmi.n	10011816 <_malloc_r+0x52>
100117fa:	2b0b      	cmp	r3, #11
100117fc:	d902      	bls.n	10011804 <_malloc_r+0x40>
100117fe:	600b      	str	r3, [r1, #0]
10011800:	18cc      	adds	r4, r1, r3
10011802:	e01e      	b.n	10011842 <_malloc_r+0x7e>
10011804:	428c      	cmp	r4, r1
10011806:	d102      	bne.n	1001180e <_malloc_r+0x4a>
10011808:	6863      	ldr	r3, [r4, #4]
1001180a:	6013      	str	r3, [r2, #0]
1001180c:	e01a      	b.n	10011844 <_malloc_r+0x80>
1001180e:	684b      	ldr	r3, [r1, #4]
10011810:	6063      	str	r3, [r4, #4]
10011812:	000c      	movs	r4, r1
10011814:	e016      	b.n	10011844 <_malloc_r+0x80>
10011816:	000c      	movs	r4, r1
10011818:	6849      	ldr	r1, [r1, #4]
1001181a:	e7e9      	b.n	100117f0 <_malloc_r+0x2c>
1001181c:	4c13      	ldr	r4, [pc, #76]	; (1001186c <_malloc_r+0xa8>)
1001181e:	6823      	ldr	r3, [r4, #0]
10011820:	2b00      	cmp	r3, #0
10011822:	d103      	bne.n	1001182c <_malloc_r+0x68>
10011824:	0030      	movs	r0, r6
10011826:	f000 fb2d 	bl	10011e84 <_sbrk_r>
1001182a:	6020      	str	r0, [r4, #0]
1001182c:	0029      	movs	r1, r5
1001182e:	0030      	movs	r0, r6
10011830:	f000 fb28 	bl	10011e84 <_sbrk_r>
10011834:	1c43      	adds	r3, r0, #1
10011836:	d0d1      	beq.n	100117dc <_malloc_r+0x18>
10011838:	2303      	movs	r3, #3
1001183a:	1cc4      	adds	r4, r0, #3
1001183c:	439c      	bics	r4, r3
1001183e:	42a0      	cmp	r0, r4
10011840:	d10a      	bne.n	10011858 <_malloc_r+0x94>
10011842:	6025      	str	r5, [r4, #0]
10011844:	0020      	movs	r0, r4
10011846:	2207      	movs	r2, #7
10011848:	300b      	adds	r0, #11
1001184a:	1d23      	adds	r3, r4, #4
1001184c:	4390      	bics	r0, r2
1001184e:	1ac3      	subs	r3, r0, r3
10011850:	d009      	beq.n	10011866 <_malloc_r+0xa2>
10011852:	425a      	negs	r2, r3
10011854:	50e2      	str	r2, [r4, r3]
10011856:	e006      	b.n	10011866 <_malloc_r+0xa2>
10011858:	1a21      	subs	r1, r4, r0
1001185a:	0030      	movs	r0, r6
1001185c:	f000 fb12 	bl	10011e84 <_sbrk_r>
10011860:	1c43      	adds	r3, r0, #1
10011862:	d1ee      	bne.n	10011842 <_malloc_r+0x7e>
10011864:	e7ba      	b.n	100117dc <_malloc_r+0x18>
10011866:	bd70      	pop	{r4, r5, r6, pc}
10011868:	1001526c 	.word	0x1001526c
1001186c:	10015268 	.word	0x10015268

10011870 <__sfputc_r>:
10011870:	6893      	ldr	r3, [r2, #8]
10011872:	b510      	push	{r4, lr}
10011874:	3b01      	subs	r3, #1
10011876:	6093      	str	r3, [r2, #8]
10011878:	2b00      	cmp	r3, #0
1001187a:	da05      	bge.n	10011888 <__sfputc_r+0x18>
1001187c:	6994      	ldr	r4, [r2, #24]
1001187e:	42a3      	cmp	r3, r4
10011880:	db08      	blt.n	10011894 <__sfputc_r+0x24>
10011882:	b2cb      	uxtb	r3, r1
10011884:	2b0a      	cmp	r3, #10
10011886:	d005      	beq.n	10011894 <__sfputc_r+0x24>
10011888:	6813      	ldr	r3, [r2, #0]
1001188a:	1c58      	adds	r0, r3, #1
1001188c:	6010      	str	r0, [r2, #0]
1001188e:	7019      	strb	r1, [r3, #0]
10011890:	b2c8      	uxtb	r0, r1
10011892:	e001      	b.n	10011898 <__sfputc_r+0x28>
10011894:	f7ff fc8c 	bl	100111b0 <__swbuf_r>
10011898:	bd10      	pop	{r4, pc}

1001189a <__sfputs_r>:
1001189a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001189c:	0006      	movs	r6, r0
1001189e:	000f      	movs	r7, r1
100118a0:	0014      	movs	r4, r2
100118a2:	18d5      	adds	r5, r2, r3
100118a4:	42ac      	cmp	r4, r5
100118a6:	d008      	beq.n	100118ba <__sfputs_r+0x20>
100118a8:	7821      	ldrb	r1, [r4, #0]
100118aa:	003a      	movs	r2, r7
100118ac:	0030      	movs	r0, r6
100118ae:	f7ff ffdf 	bl	10011870 <__sfputc_r>
100118b2:	3401      	adds	r4, #1
100118b4:	1c43      	adds	r3, r0, #1
100118b6:	d1f5      	bne.n	100118a4 <__sfputs_r+0xa>
100118b8:	e000      	b.n	100118bc <__sfputs_r+0x22>
100118ba:	2000      	movs	r0, #0
100118bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

100118c0 <_vfiprintf_r>:
100118c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100118c2:	b09f      	sub	sp, #124	; 0x7c
100118c4:	0006      	movs	r6, r0
100118c6:	000f      	movs	r7, r1
100118c8:	9202      	str	r2, [sp, #8]
100118ca:	9305      	str	r3, [sp, #20]
100118cc:	2800      	cmp	r0, #0
100118ce:	d004      	beq.n	100118da <_vfiprintf_r+0x1a>
100118d0:	6983      	ldr	r3, [r0, #24]
100118d2:	2b00      	cmp	r3, #0
100118d4:	d101      	bne.n	100118da <_vfiprintf_r+0x1a>
100118d6:	f7ff fe2d 	bl	10011534 <__sinit>
100118da:	4b7f      	ldr	r3, [pc, #508]	; (10011ad8 <_vfiprintf_r+0x218>)
100118dc:	429f      	cmp	r7, r3
100118de:	d101      	bne.n	100118e4 <_vfiprintf_r+0x24>
100118e0:	6877      	ldr	r7, [r6, #4]
100118e2:	e008      	b.n	100118f6 <_vfiprintf_r+0x36>
100118e4:	4b7d      	ldr	r3, [pc, #500]	; (10011adc <_vfiprintf_r+0x21c>)
100118e6:	429f      	cmp	r7, r3
100118e8:	d101      	bne.n	100118ee <_vfiprintf_r+0x2e>
100118ea:	68b7      	ldr	r7, [r6, #8]
100118ec:	e003      	b.n	100118f6 <_vfiprintf_r+0x36>
100118ee:	4b7c      	ldr	r3, [pc, #496]	; (10011ae0 <_vfiprintf_r+0x220>)
100118f0:	429f      	cmp	r7, r3
100118f2:	d100      	bne.n	100118f6 <_vfiprintf_r+0x36>
100118f4:	68f7      	ldr	r7, [r6, #12]
100118f6:	89bb      	ldrh	r3, [r7, #12]
100118f8:	071b      	lsls	r3, r3, #28
100118fa:	d50a      	bpl.n	10011912 <_vfiprintf_r+0x52>
100118fc:	693b      	ldr	r3, [r7, #16]
100118fe:	2b00      	cmp	r3, #0
10011900:	d007      	beq.n	10011912 <_vfiprintf_r+0x52>
10011902:	2300      	movs	r3, #0
10011904:	ad06      	add	r5, sp, #24
10011906:	616b      	str	r3, [r5, #20]
10011908:	3320      	adds	r3, #32
1001190a:	766b      	strb	r3, [r5, #25]
1001190c:	3310      	adds	r3, #16
1001190e:	76ab      	strb	r3, [r5, #26]
10011910:	e03d      	b.n	1001198e <_vfiprintf_r+0xce>
10011912:	0039      	movs	r1, r7
10011914:	0030      	movs	r0, r6
10011916:	f7ff fca3 	bl	10011260 <__swsetup_r>
1001191a:	2800      	cmp	r0, #0
1001191c:	d0f1      	beq.n	10011902 <_vfiprintf_r+0x42>
1001191e:	2001      	movs	r0, #1
10011920:	4240      	negs	r0, r0
10011922:	e0d6      	b.n	10011ad2 <_vfiprintf_r+0x212>
10011924:	9a05      	ldr	r2, [sp, #20]
10011926:	1d11      	adds	r1, r2, #4
10011928:	6812      	ldr	r2, [r2, #0]
1001192a:	9105      	str	r1, [sp, #20]
1001192c:	2a00      	cmp	r2, #0
1001192e:	da00      	bge.n	10011932 <_vfiprintf_r+0x72>
10011930:	e07f      	b.n	10011a32 <_vfiprintf_r+0x172>
10011932:	9209      	str	r2, [sp, #36]	; 0x24
10011934:	3401      	adds	r4, #1
10011936:	7823      	ldrb	r3, [r4, #0]
10011938:	2b2e      	cmp	r3, #46	; 0x2e
1001193a:	d100      	bne.n	1001193e <_vfiprintf_r+0x7e>
1001193c:	e08d      	b.n	10011a5a <_vfiprintf_r+0x19a>
1001193e:	7821      	ldrb	r1, [r4, #0]
10011940:	2203      	movs	r2, #3
10011942:	4868      	ldr	r0, [pc, #416]	; (10011ae4 <_vfiprintf_r+0x224>)
10011944:	f000 fb5a 	bl	10011ffc <memchr>
10011948:	2800      	cmp	r0, #0
1001194a:	d007      	beq.n	1001195c <_vfiprintf_r+0x9c>
1001194c:	4b65      	ldr	r3, [pc, #404]	; (10011ae4 <_vfiprintf_r+0x224>)
1001194e:	682a      	ldr	r2, [r5, #0]
10011950:	1ac0      	subs	r0, r0, r3
10011952:	2340      	movs	r3, #64	; 0x40
10011954:	4083      	lsls	r3, r0
10011956:	4313      	orrs	r3, r2
10011958:	602b      	str	r3, [r5, #0]
1001195a:	3401      	adds	r4, #1
1001195c:	7821      	ldrb	r1, [r4, #0]
1001195e:	1c63      	adds	r3, r4, #1
10011960:	2206      	movs	r2, #6
10011962:	4861      	ldr	r0, [pc, #388]	; (10011ae8 <_vfiprintf_r+0x228>)
10011964:	9302      	str	r3, [sp, #8]
10011966:	7629      	strb	r1, [r5, #24]
10011968:	f000 fb48 	bl	10011ffc <memchr>
1001196c:	2800      	cmp	r0, #0
1001196e:	d100      	bne.n	10011972 <_vfiprintf_r+0xb2>
10011970:	e09d      	b.n	10011aae <_vfiprintf_r+0x1ee>
10011972:	4b5e      	ldr	r3, [pc, #376]	; (10011aec <_vfiprintf_r+0x22c>)
10011974:	2b00      	cmp	r3, #0
10011976:	d000      	beq.n	1001197a <_vfiprintf_r+0xba>
10011978:	e090      	b.n	10011a9c <_vfiprintf_r+0x1dc>
1001197a:	2207      	movs	r2, #7
1001197c:	9b05      	ldr	r3, [sp, #20]
1001197e:	3307      	adds	r3, #7
10011980:	4393      	bics	r3, r2
10011982:	3308      	adds	r3, #8
10011984:	9305      	str	r3, [sp, #20]
10011986:	696b      	ldr	r3, [r5, #20]
10011988:	9a03      	ldr	r2, [sp, #12]
1001198a:	189b      	adds	r3, r3, r2
1001198c:	616b      	str	r3, [r5, #20]
1001198e:	9c02      	ldr	r4, [sp, #8]
10011990:	7823      	ldrb	r3, [r4, #0]
10011992:	2b00      	cmp	r3, #0
10011994:	d104      	bne.n	100119a0 <_vfiprintf_r+0xe0>
10011996:	9b02      	ldr	r3, [sp, #8]
10011998:	1ae3      	subs	r3, r4, r3
1001199a:	9304      	str	r3, [sp, #16]
1001199c:	d012      	beq.n	100119c4 <_vfiprintf_r+0x104>
1001199e:	e003      	b.n	100119a8 <_vfiprintf_r+0xe8>
100119a0:	2b25      	cmp	r3, #37	; 0x25
100119a2:	d0f8      	beq.n	10011996 <_vfiprintf_r+0xd6>
100119a4:	3401      	adds	r4, #1
100119a6:	e7f3      	b.n	10011990 <_vfiprintf_r+0xd0>
100119a8:	9b04      	ldr	r3, [sp, #16]
100119aa:	9a02      	ldr	r2, [sp, #8]
100119ac:	0039      	movs	r1, r7
100119ae:	0030      	movs	r0, r6
100119b0:	f7ff ff73 	bl	1001189a <__sfputs_r>
100119b4:	1c43      	adds	r3, r0, #1
100119b6:	d100      	bne.n	100119ba <_vfiprintf_r+0xfa>
100119b8:	e086      	b.n	10011ac8 <_vfiprintf_r+0x208>
100119ba:	696a      	ldr	r2, [r5, #20]
100119bc:	9b04      	ldr	r3, [sp, #16]
100119be:	4694      	mov	ip, r2
100119c0:	4463      	add	r3, ip
100119c2:	616b      	str	r3, [r5, #20]
100119c4:	7823      	ldrb	r3, [r4, #0]
100119c6:	2b00      	cmp	r3, #0
100119c8:	d07e      	beq.n	10011ac8 <_vfiprintf_r+0x208>
100119ca:	2201      	movs	r2, #1
100119cc:	2300      	movs	r3, #0
100119ce:	4252      	negs	r2, r2
100119d0:	606a      	str	r2, [r5, #4]
100119d2:	a902      	add	r1, sp, #8
100119d4:	3254      	adds	r2, #84	; 0x54
100119d6:	1852      	adds	r2, r2, r1
100119d8:	3401      	adds	r4, #1
100119da:	602b      	str	r3, [r5, #0]
100119dc:	60eb      	str	r3, [r5, #12]
100119de:	60ab      	str	r3, [r5, #8]
100119e0:	7013      	strb	r3, [r2, #0]
100119e2:	65ab      	str	r3, [r5, #88]	; 0x58
100119e4:	7821      	ldrb	r1, [r4, #0]
100119e6:	2205      	movs	r2, #5
100119e8:	4841      	ldr	r0, [pc, #260]	; (10011af0 <_vfiprintf_r+0x230>)
100119ea:	f000 fb07 	bl	10011ffc <memchr>
100119ee:	2800      	cmp	r0, #0
100119f0:	d008      	beq.n	10011a04 <_vfiprintf_r+0x144>
100119f2:	4b3f      	ldr	r3, [pc, #252]	; (10011af0 <_vfiprintf_r+0x230>)
100119f4:	682a      	ldr	r2, [r5, #0]
100119f6:	1ac0      	subs	r0, r0, r3
100119f8:	2301      	movs	r3, #1
100119fa:	4083      	lsls	r3, r0
100119fc:	4313      	orrs	r3, r2
100119fe:	602b      	str	r3, [r5, #0]
10011a00:	3401      	adds	r4, #1
10011a02:	e7ef      	b.n	100119e4 <_vfiprintf_r+0x124>
10011a04:	682b      	ldr	r3, [r5, #0]
10011a06:	06da      	lsls	r2, r3, #27
10011a08:	d504      	bpl.n	10011a14 <_vfiprintf_r+0x154>
10011a0a:	2253      	movs	r2, #83	; 0x53
10011a0c:	2120      	movs	r1, #32
10011a0e:	a802      	add	r0, sp, #8
10011a10:	1812      	adds	r2, r2, r0
10011a12:	7011      	strb	r1, [r2, #0]
10011a14:	071a      	lsls	r2, r3, #28
10011a16:	d504      	bpl.n	10011a22 <_vfiprintf_r+0x162>
10011a18:	2253      	movs	r2, #83	; 0x53
10011a1a:	212b      	movs	r1, #43	; 0x2b
10011a1c:	a802      	add	r0, sp, #8
10011a1e:	1812      	adds	r2, r2, r0
10011a20:	7011      	strb	r1, [r2, #0]
10011a22:	7822      	ldrb	r2, [r4, #0]
10011a24:	2a2a      	cmp	r2, #42	; 0x2a
10011a26:	d100      	bne.n	10011a2a <_vfiprintf_r+0x16a>
10011a28:	e77c      	b.n	10011924 <_vfiprintf_r+0x64>
10011a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011a2c:	2000      	movs	r0, #0
10011a2e:	210a      	movs	r1, #10
10011a30:	e005      	b.n	10011a3e <_vfiprintf_r+0x17e>
10011a32:	4252      	negs	r2, r2
10011a34:	60ea      	str	r2, [r5, #12]
10011a36:	2202      	movs	r2, #2
10011a38:	4313      	orrs	r3, r2
10011a3a:	602b      	str	r3, [r5, #0]
10011a3c:	e77a      	b.n	10011934 <_vfiprintf_r+0x74>
10011a3e:	7822      	ldrb	r2, [r4, #0]
10011a40:	3a30      	subs	r2, #48	; 0x30
10011a42:	2a09      	cmp	r2, #9
10011a44:	d804      	bhi.n	10011a50 <_vfiprintf_r+0x190>
10011a46:	434b      	muls	r3, r1
10011a48:	3401      	adds	r4, #1
10011a4a:	189b      	adds	r3, r3, r2
10011a4c:	2001      	movs	r0, #1
10011a4e:	e7f6      	b.n	10011a3e <_vfiprintf_r+0x17e>
10011a50:	2800      	cmp	r0, #0
10011a52:	d100      	bne.n	10011a56 <_vfiprintf_r+0x196>
10011a54:	e76f      	b.n	10011936 <_vfiprintf_r+0x76>
10011a56:	9309      	str	r3, [sp, #36]	; 0x24
10011a58:	e76d      	b.n	10011936 <_vfiprintf_r+0x76>
10011a5a:	7863      	ldrb	r3, [r4, #1]
10011a5c:	2b2a      	cmp	r3, #42	; 0x2a
10011a5e:	d10a      	bne.n	10011a76 <_vfiprintf_r+0x1b6>
10011a60:	9b05      	ldr	r3, [sp, #20]
10011a62:	3402      	adds	r4, #2
10011a64:	1d1a      	adds	r2, r3, #4
10011a66:	681b      	ldr	r3, [r3, #0]
10011a68:	9205      	str	r2, [sp, #20]
10011a6a:	2b00      	cmp	r3, #0
10011a6c:	da01      	bge.n	10011a72 <_vfiprintf_r+0x1b2>
10011a6e:	2301      	movs	r3, #1
10011a70:	425b      	negs	r3, r3
10011a72:	9307      	str	r3, [sp, #28]
10011a74:	e763      	b.n	1001193e <_vfiprintf_r+0x7e>
10011a76:	2300      	movs	r3, #0
10011a78:	200a      	movs	r0, #10
10011a7a:	001a      	movs	r2, r3
10011a7c:	3401      	adds	r4, #1
10011a7e:	606b      	str	r3, [r5, #4]
10011a80:	7821      	ldrb	r1, [r4, #0]
10011a82:	3930      	subs	r1, #48	; 0x30
10011a84:	2909      	cmp	r1, #9
10011a86:	d804      	bhi.n	10011a92 <_vfiprintf_r+0x1d2>
10011a88:	4342      	muls	r2, r0
10011a8a:	3401      	adds	r4, #1
10011a8c:	1852      	adds	r2, r2, r1
10011a8e:	2301      	movs	r3, #1
10011a90:	e7f6      	b.n	10011a80 <_vfiprintf_r+0x1c0>
10011a92:	2b00      	cmp	r3, #0
10011a94:	d100      	bne.n	10011a98 <_vfiprintf_r+0x1d8>
10011a96:	e752      	b.n	1001193e <_vfiprintf_r+0x7e>
10011a98:	9207      	str	r2, [sp, #28]
10011a9a:	e750      	b.n	1001193e <_vfiprintf_r+0x7e>
10011a9c:	ab05      	add	r3, sp, #20
10011a9e:	9300      	str	r3, [sp, #0]
10011aa0:	003a      	movs	r2, r7
10011aa2:	4b14      	ldr	r3, [pc, #80]	; (10011af4 <_vfiprintf_r+0x234>)
10011aa4:	0029      	movs	r1, r5
10011aa6:	0030      	movs	r0, r6
10011aa8:	e000      	b.n	10011aac <_vfiprintf_r+0x1ec>
10011aaa:	bf00      	nop
10011aac:	e007      	b.n	10011abe <_vfiprintf_r+0x1fe>
10011aae:	ab05      	add	r3, sp, #20
10011ab0:	9300      	str	r3, [sp, #0]
10011ab2:	003a      	movs	r2, r7
10011ab4:	4b0f      	ldr	r3, [pc, #60]	; (10011af4 <_vfiprintf_r+0x234>)
10011ab6:	0029      	movs	r1, r5
10011ab8:	0030      	movs	r0, r6
10011aba:	f000 f88b 	bl	10011bd4 <_printf_i>
10011abe:	9003      	str	r0, [sp, #12]
10011ac0:	9b03      	ldr	r3, [sp, #12]
10011ac2:	3301      	adds	r3, #1
10011ac4:	d000      	beq.n	10011ac8 <_vfiprintf_r+0x208>
10011ac6:	e75e      	b.n	10011986 <_vfiprintf_r+0xc6>
10011ac8:	89bb      	ldrh	r3, [r7, #12]
10011aca:	065b      	lsls	r3, r3, #25
10011acc:	d500      	bpl.n	10011ad0 <_vfiprintf_r+0x210>
10011ace:	e726      	b.n	1001191e <_vfiprintf_r+0x5e>
10011ad0:	980b      	ldr	r0, [sp, #44]	; 0x2c
10011ad2:	b01f      	add	sp, #124	; 0x7c
10011ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011ad6:	46c0      	nop			; (mov r8, r8)
10011ad8:	10013690 	.word	0x10013690
10011adc:	100136b0 	.word	0x100136b0
10011ae0:	100136d0 	.word	0x100136d0
10011ae4:	100136f6 	.word	0x100136f6
10011ae8:	100136fa 	.word	0x100136fa
10011aec:	00000000 	.word	0x00000000
10011af0:	100136f0 	.word	0x100136f0
10011af4:	1001189b 	.word	0x1001189b

10011af8 <_printf_common>:
10011af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011afa:	0017      	movs	r7, r2
10011afc:	9301      	str	r3, [sp, #4]
10011afe:	688a      	ldr	r2, [r1, #8]
10011b00:	690b      	ldr	r3, [r1, #16]
10011b02:	9000      	str	r0, [sp, #0]
10011b04:	000c      	movs	r4, r1
10011b06:	4293      	cmp	r3, r2
10011b08:	da00      	bge.n	10011b0c <_printf_common+0x14>
10011b0a:	0013      	movs	r3, r2
10011b0c:	0022      	movs	r2, r4
10011b0e:	603b      	str	r3, [r7, #0]
10011b10:	3243      	adds	r2, #67	; 0x43
10011b12:	7812      	ldrb	r2, [r2, #0]
10011b14:	2a00      	cmp	r2, #0
10011b16:	d001      	beq.n	10011b1c <_printf_common+0x24>
10011b18:	3301      	adds	r3, #1
10011b1a:	603b      	str	r3, [r7, #0]
10011b1c:	6823      	ldr	r3, [r4, #0]
10011b1e:	069b      	lsls	r3, r3, #26
10011b20:	d502      	bpl.n	10011b28 <_printf_common+0x30>
10011b22:	683b      	ldr	r3, [r7, #0]
10011b24:	3302      	adds	r3, #2
10011b26:	603b      	str	r3, [r7, #0]
10011b28:	2506      	movs	r5, #6
10011b2a:	6823      	ldr	r3, [r4, #0]
10011b2c:	401d      	ands	r5, r3
10011b2e:	d01e      	beq.n	10011b6e <_printf_common+0x76>
10011b30:	0023      	movs	r3, r4
10011b32:	3343      	adds	r3, #67	; 0x43
10011b34:	781b      	ldrb	r3, [r3, #0]
10011b36:	1e5a      	subs	r2, r3, #1
10011b38:	4193      	sbcs	r3, r2
10011b3a:	6822      	ldr	r2, [r4, #0]
10011b3c:	0692      	lsls	r2, r2, #26
10011b3e:	d51c      	bpl.n	10011b7a <_printf_common+0x82>
10011b40:	2030      	movs	r0, #48	; 0x30
10011b42:	18e1      	adds	r1, r4, r3
10011b44:	3143      	adds	r1, #67	; 0x43
10011b46:	7008      	strb	r0, [r1, #0]
10011b48:	0021      	movs	r1, r4
10011b4a:	1c5a      	adds	r2, r3, #1
10011b4c:	3145      	adds	r1, #69	; 0x45
10011b4e:	7809      	ldrb	r1, [r1, #0]
10011b50:	18a2      	adds	r2, r4, r2
10011b52:	3243      	adds	r2, #67	; 0x43
10011b54:	3302      	adds	r3, #2
10011b56:	7011      	strb	r1, [r2, #0]
10011b58:	e00f      	b.n	10011b7a <_printf_common+0x82>
10011b5a:	0022      	movs	r2, r4
10011b5c:	2301      	movs	r3, #1
10011b5e:	3219      	adds	r2, #25
10011b60:	9901      	ldr	r1, [sp, #4]
10011b62:	9800      	ldr	r0, [sp, #0]
10011b64:	9e08      	ldr	r6, [sp, #32]
10011b66:	47b0      	blx	r6
10011b68:	1c43      	adds	r3, r0, #1
10011b6a:	d00e      	beq.n	10011b8a <_printf_common+0x92>
10011b6c:	3501      	adds	r5, #1
10011b6e:	68e3      	ldr	r3, [r4, #12]
10011b70:	683a      	ldr	r2, [r7, #0]
10011b72:	1a9b      	subs	r3, r3, r2
10011b74:	429d      	cmp	r5, r3
10011b76:	dbf0      	blt.n	10011b5a <_printf_common+0x62>
10011b78:	e7da      	b.n	10011b30 <_printf_common+0x38>
10011b7a:	0022      	movs	r2, r4
10011b7c:	9901      	ldr	r1, [sp, #4]
10011b7e:	3243      	adds	r2, #67	; 0x43
10011b80:	9800      	ldr	r0, [sp, #0]
10011b82:	9d08      	ldr	r5, [sp, #32]
10011b84:	47a8      	blx	r5
10011b86:	1c43      	adds	r3, r0, #1
10011b88:	d102      	bne.n	10011b90 <_printf_common+0x98>
10011b8a:	2001      	movs	r0, #1
10011b8c:	4240      	negs	r0, r0
10011b8e:	e020      	b.n	10011bd2 <_printf_common+0xda>
10011b90:	2306      	movs	r3, #6
10011b92:	6820      	ldr	r0, [r4, #0]
10011b94:	68e1      	ldr	r1, [r4, #12]
10011b96:	683a      	ldr	r2, [r7, #0]
10011b98:	4003      	ands	r3, r0
10011b9a:	2500      	movs	r5, #0
10011b9c:	2b04      	cmp	r3, #4
10011b9e:	d103      	bne.n	10011ba8 <_printf_common+0xb0>
10011ba0:	1a8d      	subs	r5, r1, r2
10011ba2:	43eb      	mvns	r3, r5
10011ba4:	17db      	asrs	r3, r3, #31
10011ba6:	401d      	ands	r5, r3
10011ba8:	68a3      	ldr	r3, [r4, #8]
10011baa:	6922      	ldr	r2, [r4, #16]
10011bac:	4293      	cmp	r3, r2
10011bae:	dd01      	ble.n	10011bb4 <_printf_common+0xbc>
10011bb0:	1a9b      	subs	r3, r3, r2
10011bb2:	18ed      	adds	r5, r5, r3
10011bb4:	2700      	movs	r7, #0
10011bb6:	42bd      	cmp	r5, r7
10011bb8:	d00a      	beq.n	10011bd0 <_printf_common+0xd8>
10011bba:	0022      	movs	r2, r4
10011bbc:	2301      	movs	r3, #1
10011bbe:	321a      	adds	r2, #26
10011bc0:	9901      	ldr	r1, [sp, #4]
10011bc2:	9800      	ldr	r0, [sp, #0]
10011bc4:	9e08      	ldr	r6, [sp, #32]
10011bc6:	47b0      	blx	r6
10011bc8:	1c43      	adds	r3, r0, #1
10011bca:	d0de      	beq.n	10011b8a <_printf_common+0x92>
10011bcc:	3701      	adds	r7, #1
10011bce:	e7f2      	b.n	10011bb6 <_printf_common+0xbe>
10011bd0:	2000      	movs	r0, #0
10011bd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10011bd4 <_printf_i>:
10011bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
10011bd6:	b08b      	sub	sp, #44	; 0x2c
10011bd8:	9206      	str	r2, [sp, #24]
10011bda:	000a      	movs	r2, r1
10011bdc:	3243      	adds	r2, #67	; 0x43
10011bde:	9307      	str	r3, [sp, #28]
10011be0:	9005      	str	r0, [sp, #20]
10011be2:	9204      	str	r2, [sp, #16]
10011be4:	7e0a      	ldrb	r2, [r1, #24]
10011be6:	000c      	movs	r4, r1
10011be8:	9b10      	ldr	r3, [sp, #64]	; 0x40
10011bea:	2a6e      	cmp	r2, #110	; 0x6e
10011bec:	d100      	bne.n	10011bf0 <_printf_i+0x1c>
10011bee:	e0ab      	b.n	10011d48 <_printf_i+0x174>
10011bf0:	d811      	bhi.n	10011c16 <_printf_i+0x42>
10011bf2:	2a63      	cmp	r2, #99	; 0x63
10011bf4:	d022      	beq.n	10011c3c <_printf_i+0x68>
10011bf6:	d809      	bhi.n	10011c0c <_printf_i+0x38>
10011bf8:	2a00      	cmp	r2, #0
10011bfa:	d100      	bne.n	10011bfe <_printf_i+0x2a>
10011bfc:	e0b5      	b.n	10011d6a <_printf_i+0x196>
10011bfe:	2a58      	cmp	r2, #88	; 0x58
10011c00:	d000      	beq.n	10011c04 <_printf_i+0x30>
10011c02:	e0c5      	b.n	10011d90 <_printf_i+0x1bc>
10011c04:	3145      	adds	r1, #69	; 0x45
10011c06:	700a      	strb	r2, [r1, #0]
10011c08:	4a81      	ldr	r2, [pc, #516]	; (10011e10 <_printf_i+0x23c>)
10011c0a:	e04f      	b.n	10011cac <_printf_i+0xd8>
10011c0c:	2a64      	cmp	r2, #100	; 0x64
10011c0e:	d01d      	beq.n	10011c4c <_printf_i+0x78>
10011c10:	2a69      	cmp	r2, #105	; 0x69
10011c12:	d01b      	beq.n	10011c4c <_printf_i+0x78>
10011c14:	e0bc      	b.n	10011d90 <_printf_i+0x1bc>
10011c16:	2a73      	cmp	r2, #115	; 0x73
10011c18:	d100      	bne.n	10011c1c <_printf_i+0x48>
10011c1a:	e0aa      	b.n	10011d72 <_printf_i+0x19e>
10011c1c:	d809      	bhi.n	10011c32 <_printf_i+0x5e>
10011c1e:	2a6f      	cmp	r2, #111	; 0x6f
10011c20:	d029      	beq.n	10011c76 <_printf_i+0xa2>
10011c22:	2a70      	cmp	r2, #112	; 0x70
10011c24:	d000      	beq.n	10011c28 <_printf_i+0x54>
10011c26:	e0b3      	b.n	10011d90 <_printf_i+0x1bc>
10011c28:	2220      	movs	r2, #32
10011c2a:	6809      	ldr	r1, [r1, #0]
10011c2c:	430a      	orrs	r2, r1
10011c2e:	6022      	str	r2, [r4, #0]
10011c30:	e037      	b.n	10011ca2 <_printf_i+0xce>
10011c32:	2a75      	cmp	r2, #117	; 0x75
10011c34:	d01f      	beq.n	10011c76 <_printf_i+0xa2>
10011c36:	2a78      	cmp	r2, #120	; 0x78
10011c38:	d033      	beq.n	10011ca2 <_printf_i+0xce>
10011c3a:	e0a9      	b.n	10011d90 <_printf_i+0x1bc>
10011c3c:	000e      	movs	r6, r1
10011c3e:	681a      	ldr	r2, [r3, #0]
10011c40:	3642      	adds	r6, #66	; 0x42
10011c42:	1d11      	adds	r1, r2, #4
10011c44:	6019      	str	r1, [r3, #0]
10011c46:	6813      	ldr	r3, [r2, #0]
10011c48:	7033      	strb	r3, [r6, #0]
10011c4a:	e0a4      	b.n	10011d96 <_printf_i+0x1c2>
10011c4c:	6821      	ldr	r1, [r4, #0]
10011c4e:	681a      	ldr	r2, [r3, #0]
10011c50:	0608      	lsls	r0, r1, #24
10011c52:	d406      	bmi.n	10011c62 <_printf_i+0x8e>
10011c54:	0649      	lsls	r1, r1, #25
10011c56:	d504      	bpl.n	10011c62 <_printf_i+0x8e>
10011c58:	1d11      	adds	r1, r2, #4
10011c5a:	6019      	str	r1, [r3, #0]
10011c5c:	2300      	movs	r3, #0
10011c5e:	5ed5      	ldrsh	r5, [r2, r3]
10011c60:	e002      	b.n	10011c68 <_printf_i+0x94>
10011c62:	1d11      	adds	r1, r2, #4
10011c64:	6019      	str	r1, [r3, #0]
10011c66:	6815      	ldr	r5, [r2, #0]
10011c68:	2d00      	cmp	r5, #0
10011c6a:	da3b      	bge.n	10011ce4 <_printf_i+0x110>
10011c6c:	232d      	movs	r3, #45	; 0x2d
10011c6e:	9a04      	ldr	r2, [sp, #16]
10011c70:	426d      	negs	r5, r5
10011c72:	7013      	strb	r3, [r2, #0]
10011c74:	e036      	b.n	10011ce4 <_printf_i+0x110>
10011c76:	6821      	ldr	r1, [r4, #0]
10011c78:	681a      	ldr	r2, [r3, #0]
10011c7a:	0608      	lsls	r0, r1, #24
10011c7c:	d406      	bmi.n	10011c8c <_printf_i+0xb8>
10011c7e:	0649      	lsls	r1, r1, #25
10011c80:	d504      	bpl.n	10011c8c <_printf_i+0xb8>
10011c82:	6815      	ldr	r5, [r2, #0]
10011c84:	1d11      	adds	r1, r2, #4
10011c86:	6019      	str	r1, [r3, #0]
10011c88:	b2ad      	uxth	r5, r5
10011c8a:	e002      	b.n	10011c92 <_printf_i+0xbe>
10011c8c:	1d11      	adds	r1, r2, #4
10011c8e:	6019      	str	r1, [r3, #0]
10011c90:	6815      	ldr	r5, [r2, #0]
10011c92:	4b5f      	ldr	r3, [pc, #380]	; (10011e10 <_printf_i+0x23c>)
10011c94:	7e22      	ldrb	r2, [r4, #24]
10011c96:	9303      	str	r3, [sp, #12]
10011c98:	2708      	movs	r7, #8
10011c9a:	2a6f      	cmp	r2, #111	; 0x6f
10011c9c:	d01d      	beq.n	10011cda <_printf_i+0x106>
10011c9e:	270a      	movs	r7, #10
10011ca0:	e01b      	b.n	10011cda <_printf_i+0x106>
10011ca2:	0022      	movs	r2, r4
10011ca4:	2178      	movs	r1, #120	; 0x78
10011ca6:	3245      	adds	r2, #69	; 0x45
10011ca8:	7011      	strb	r1, [r2, #0]
10011caa:	4a5a      	ldr	r2, [pc, #360]	; (10011e14 <_printf_i+0x240>)
10011cac:	6819      	ldr	r1, [r3, #0]
10011cae:	9203      	str	r2, [sp, #12]
10011cb0:	1d08      	adds	r0, r1, #4
10011cb2:	6822      	ldr	r2, [r4, #0]
10011cb4:	6018      	str	r0, [r3, #0]
10011cb6:	680d      	ldr	r5, [r1, #0]
10011cb8:	0610      	lsls	r0, r2, #24
10011cba:	d402      	bmi.n	10011cc2 <_printf_i+0xee>
10011cbc:	0650      	lsls	r0, r2, #25
10011cbe:	d500      	bpl.n	10011cc2 <_printf_i+0xee>
10011cc0:	b2ad      	uxth	r5, r5
10011cc2:	07d3      	lsls	r3, r2, #31
10011cc4:	d502      	bpl.n	10011ccc <_printf_i+0xf8>
10011cc6:	2320      	movs	r3, #32
10011cc8:	431a      	orrs	r2, r3
10011cca:	6022      	str	r2, [r4, #0]
10011ccc:	2710      	movs	r7, #16
10011cce:	2d00      	cmp	r5, #0
10011cd0:	d103      	bne.n	10011cda <_printf_i+0x106>
10011cd2:	2320      	movs	r3, #32
10011cd4:	6822      	ldr	r2, [r4, #0]
10011cd6:	439a      	bics	r2, r3
10011cd8:	6022      	str	r2, [r4, #0]
10011cda:	0023      	movs	r3, r4
10011cdc:	2200      	movs	r2, #0
10011cde:	3343      	adds	r3, #67	; 0x43
10011ce0:	701a      	strb	r2, [r3, #0]
10011ce2:	e002      	b.n	10011cea <_printf_i+0x116>
10011ce4:	270a      	movs	r7, #10
10011ce6:	4b4a      	ldr	r3, [pc, #296]	; (10011e10 <_printf_i+0x23c>)
10011ce8:	9303      	str	r3, [sp, #12]
10011cea:	6863      	ldr	r3, [r4, #4]
10011cec:	60a3      	str	r3, [r4, #8]
10011cee:	2b00      	cmp	r3, #0
10011cf0:	db09      	blt.n	10011d06 <_printf_i+0x132>
10011cf2:	2204      	movs	r2, #4
10011cf4:	6821      	ldr	r1, [r4, #0]
10011cf6:	4391      	bics	r1, r2
10011cf8:	6021      	str	r1, [r4, #0]
10011cfa:	2d00      	cmp	r5, #0
10011cfc:	d105      	bne.n	10011d0a <_printf_i+0x136>
10011cfe:	9e04      	ldr	r6, [sp, #16]
10011d00:	2b00      	cmp	r3, #0
10011d02:	d011      	beq.n	10011d28 <_printf_i+0x154>
10011d04:	e07b      	b.n	10011dfe <_printf_i+0x22a>
10011d06:	2d00      	cmp	r5, #0
10011d08:	d079      	beq.n	10011dfe <_printf_i+0x22a>
10011d0a:	9e04      	ldr	r6, [sp, #16]
10011d0c:	0028      	movs	r0, r5
10011d0e:	0039      	movs	r1, r7
10011d10:	f7fe f8ae 	bl	1000fe70 <__aeabi_uidivmod>
10011d14:	9b03      	ldr	r3, [sp, #12]
10011d16:	3e01      	subs	r6, #1
10011d18:	5c5b      	ldrb	r3, [r3, r1]
10011d1a:	0028      	movs	r0, r5
10011d1c:	7033      	strb	r3, [r6, #0]
10011d1e:	0039      	movs	r1, r7
10011d20:	f7fe f820 	bl	1000fd64 <__aeabi_uidiv>
10011d24:	1e05      	subs	r5, r0, #0
10011d26:	d1f1      	bne.n	10011d0c <_printf_i+0x138>
10011d28:	2f08      	cmp	r7, #8
10011d2a:	d109      	bne.n	10011d40 <_printf_i+0x16c>
10011d2c:	6823      	ldr	r3, [r4, #0]
10011d2e:	07db      	lsls	r3, r3, #31
10011d30:	d506      	bpl.n	10011d40 <_printf_i+0x16c>
10011d32:	6863      	ldr	r3, [r4, #4]
10011d34:	6922      	ldr	r2, [r4, #16]
10011d36:	4293      	cmp	r3, r2
10011d38:	dc02      	bgt.n	10011d40 <_printf_i+0x16c>
10011d3a:	2330      	movs	r3, #48	; 0x30
10011d3c:	3e01      	subs	r6, #1
10011d3e:	7033      	strb	r3, [r6, #0]
10011d40:	9b04      	ldr	r3, [sp, #16]
10011d42:	1b9b      	subs	r3, r3, r6
10011d44:	6123      	str	r3, [r4, #16]
10011d46:	e02b      	b.n	10011da0 <_printf_i+0x1cc>
10011d48:	6809      	ldr	r1, [r1, #0]
10011d4a:	681a      	ldr	r2, [r3, #0]
10011d4c:	0608      	lsls	r0, r1, #24
10011d4e:	d407      	bmi.n	10011d60 <_printf_i+0x18c>
10011d50:	0649      	lsls	r1, r1, #25
10011d52:	d505      	bpl.n	10011d60 <_printf_i+0x18c>
10011d54:	1d11      	adds	r1, r2, #4
10011d56:	6019      	str	r1, [r3, #0]
10011d58:	6813      	ldr	r3, [r2, #0]
10011d5a:	8aa2      	ldrh	r2, [r4, #20]
10011d5c:	801a      	strh	r2, [r3, #0]
10011d5e:	e004      	b.n	10011d6a <_printf_i+0x196>
10011d60:	1d11      	adds	r1, r2, #4
10011d62:	6019      	str	r1, [r3, #0]
10011d64:	6813      	ldr	r3, [r2, #0]
10011d66:	6962      	ldr	r2, [r4, #20]
10011d68:	601a      	str	r2, [r3, #0]
10011d6a:	2300      	movs	r3, #0
10011d6c:	9e04      	ldr	r6, [sp, #16]
10011d6e:	6123      	str	r3, [r4, #16]
10011d70:	e016      	b.n	10011da0 <_printf_i+0x1cc>
10011d72:	681a      	ldr	r2, [r3, #0]
10011d74:	1d11      	adds	r1, r2, #4
10011d76:	6019      	str	r1, [r3, #0]
10011d78:	6816      	ldr	r6, [r2, #0]
10011d7a:	2100      	movs	r1, #0
10011d7c:	6862      	ldr	r2, [r4, #4]
10011d7e:	0030      	movs	r0, r6
10011d80:	f000 f93c 	bl	10011ffc <memchr>
10011d84:	2800      	cmp	r0, #0
10011d86:	d001      	beq.n	10011d8c <_printf_i+0x1b8>
10011d88:	1b80      	subs	r0, r0, r6
10011d8a:	6060      	str	r0, [r4, #4]
10011d8c:	6863      	ldr	r3, [r4, #4]
10011d8e:	e003      	b.n	10011d98 <_printf_i+0x1c4>
10011d90:	0026      	movs	r6, r4
10011d92:	3642      	adds	r6, #66	; 0x42
10011d94:	7032      	strb	r2, [r6, #0]
10011d96:	2301      	movs	r3, #1
10011d98:	6123      	str	r3, [r4, #16]
10011d9a:	2300      	movs	r3, #0
10011d9c:	9a04      	ldr	r2, [sp, #16]
10011d9e:	7013      	strb	r3, [r2, #0]
10011da0:	9b07      	ldr	r3, [sp, #28]
10011da2:	aa09      	add	r2, sp, #36	; 0x24
10011da4:	9300      	str	r3, [sp, #0]
10011da6:	0021      	movs	r1, r4
10011da8:	9b06      	ldr	r3, [sp, #24]
10011daa:	9805      	ldr	r0, [sp, #20]
10011dac:	f7ff fea4 	bl	10011af8 <_printf_common>
10011db0:	1c43      	adds	r3, r0, #1
10011db2:	d102      	bne.n	10011dba <_printf_i+0x1e6>
10011db4:	2001      	movs	r0, #1
10011db6:	4240      	negs	r0, r0
10011db8:	e027      	b.n	10011e0a <_printf_i+0x236>
10011dba:	6923      	ldr	r3, [r4, #16]
10011dbc:	0032      	movs	r2, r6
10011dbe:	9906      	ldr	r1, [sp, #24]
10011dc0:	9805      	ldr	r0, [sp, #20]
10011dc2:	9d07      	ldr	r5, [sp, #28]
10011dc4:	47a8      	blx	r5
10011dc6:	1c43      	adds	r3, r0, #1
10011dc8:	d0f4      	beq.n	10011db4 <_printf_i+0x1e0>
10011dca:	6823      	ldr	r3, [r4, #0]
10011dcc:	2500      	movs	r5, #0
10011dce:	079b      	lsls	r3, r3, #30
10011dd0:	d40f      	bmi.n	10011df2 <_printf_i+0x21e>
10011dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011dd4:	68e0      	ldr	r0, [r4, #12]
10011dd6:	4298      	cmp	r0, r3
10011dd8:	da17      	bge.n	10011e0a <_printf_i+0x236>
10011dda:	0018      	movs	r0, r3
10011ddc:	e015      	b.n	10011e0a <_printf_i+0x236>
10011dde:	0022      	movs	r2, r4
10011de0:	2301      	movs	r3, #1
10011de2:	3219      	adds	r2, #25
10011de4:	9906      	ldr	r1, [sp, #24]
10011de6:	9805      	ldr	r0, [sp, #20]
10011de8:	9e07      	ldr	r6, [sp, #28]
10011dea:	47b0      	blx	r6
10011dec:	1c43      	adds	r3, r0, #1
10011dee:	d0e1      	beq.n	10011db4 <_printf_i+0x1e0>
10011df0:	3501      	adds	r5, #1
10011df2:	68e3      	ldr	r3, [r4, #12]
10011df4:	9a09      	ldr	r2, [sp, #36]	; 0x24
10011df6:	1a9b      	subs	r3, r3, r2
10011df8:	429d      	cmp	r5, r3
10011dfa:	dbf0      	blt.n	10011dde <_printf_i+0x20a>
10011dfc:	e7e9      	b.n	10011dd2 <_printf_i+0x1fe>
10011dfe:	0026      	movs	r6, r4
10011e00:	9b03      	ldr	r3, [sp, #12]
10011e02:	3642      	adds	r6, #66	; 0x42
10011e04:	781b      	ldrb	r3, [r3, #0]
10011e06:	7033      	strb	r3, [r6, #0]
10011e08:	e78e      	b.n	10011d28 <_printf_i+0x154>
10011e0a:	b00b      	add	sp, #44	; 0x2c
10011e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011e0e:	46c0      	nop			; (mov r8, r8)
10011e10:	10013701 	.word	0x10013701
10011e14:	10013712 	.word	0x10013712

10011e18 <_putc_r>:
10011e18:	b570      	push	{r4, r5, r6, lr}
10011e1a:	0006      	movs	r6, r0
10011e1c:	000d      	movs	r5, r1
10011e1e:	0014      	movs	r4, r2
10011e20:	2800      	cmp	r0, #0
10011e22:	d004      	beq.n	10011e2e <_putc_r+0x16>
10011e24:	6983      	ldr	r3, [r0, #24]
10011e26:	2b00      	cmp	r3, #0
10011e28:	d101      	bne.n	10011e2e <_putc_r+0x16>
10011e2a:	f7ff fb83 	bl	10011534 <__sinit>
10011e2e:	4b12      	ldr	r3, [pc, #72]	; (10011e78 <_putc_r+0x60>)
10011e30:	429c      	cmp	r4, r3
10011e32:	d101      	bne.n	10011e38 <_putc_r+0x20>
10011e34:	6874      	ldr	r4, [r6, #4]
10011e36:	e008      	b.n	10011e4a <_putc_r+0x32>
10011e38:	4b10      	ldr	r3, [pc, #64]	; (10011e7c <_putc_r+0x64>)
10011e3a:	429c      	cmp	r4, r3
10011e3c:	d101      	bne.n	10011e42 <_putc_r+0x2a>
10011e3e:	68b4      	ldr	r4, [r6, #8]
10011e40:	e003      	b.n	10011e4a <_putc_r+0x32>
10011e42:	4b0f      	ldr	r3, [pc, #60]	; (10011e80 <_putc_r+0x68>)
10011e44:	429c      	cmp	r4, r3
10011e46:	d100      	bne.n	10011e4a <_putc_r+0x32>
10011e48:	68f4      	ldr	r4, [r6, #12]
10011e4a:	68a3      	ldr	r3, [r4, #8]
10011e4c:	3b01      	subs	r3, #1
10011e4e:	60a3      	str	r3, [r4, #8]
10011e50:	2b00      	cmp	r3, #0
10011e52:	da05      	bge.n	10011e60 <_putc_r+0x48>
10011e54:	69a2      	ldr	r2, [r4, #24]
10011e56:	4293      	cmp	r3, r2
10011e58:	db08      	blt.n	10011e6c <_putc_r+0x54>
10011e5a:	b2eb      	uxtb	r3, r5
10011e5c:	2b0a      	cmp	r3, #10
10011e5e:	d005      	beq.n	10011e6c <_putc_r+0x54>
10011e60:	6823      	ldr	r3, [r4, #0]
10011e62:	b2e8      	uxtb	r0, r5
10011e64:	1c5a      	adds	r2, r3, #1
10011e66:	6022      	str	r2, [r4, #0]
10011e68:	701d      	strb	r5, [r3, #0]
10011e6a:	e004      	b.n	10011e76 <_putc_r+0x5e>
10011e6c:	0022      	movs	r2, r4
10011e6e:	0029      	movs	r1, r5
10011e70:	0030      	movs	r0, r6
10011e72:	f7ff f99d 	bl	100111b0 <__swbuf_r>
10011e76:	bd70      	pop	{r4, r5, r6, pc}
10011e78:	10013690 	.word	0x10013690
10011e7c:	100136b0 	.word	0x100136b0
10011e80:	100136d0 	.word	0x100136d0

10011e84 <_sbrk_r>:
10011e84:	2300      	movs	r3, #0
10011e86:	b570      	push	{r4, r5, r6, lr}
10011e88:	4c06      	ldr	r4, [pc, #24]	; (10011ea4 <_sbrk_r+0x20>)
10011e8a:	0005      	movs	r5, r0
10011e8c:	0008      	movs	r0, r1
10011e8e:	6023      	str	r3, [r4, #0]
10011e90:	f7fa fc1a 	bl	1000c6c8 <_sbrk>
10011e94:	1c43      	adds	r3, r0, #1
10011e96:	d103      	bne.n	10011ea0 <_sbrk_r+0x1c>
10011e98:	6823      	ldr	r3, [r4, #0]
10011e9a:	2b00      	cmp	r3, #0
10011e9c:	d000      	beq.n	10011ea0 <_sbrk_r+0x1c>
10011e9e:	602b      	str	r3, [r5, #0]
10011ea0:	bd70      	pop	{r4, r5, r6, pc}
10011ea2:	46c0      	nop			; (mov r8, r8)
10011ea4:	100164ec 	.word	0x100164ec

10011ea8 <__sread>:
10011ea8:	b570      	push	{r4, r5, r6, lr}
10011eaa:	000c      	movs	r4, r1
10011eac:	250e      	movs	r5, #14
10011eae:	5f49      	ldrsh	r1, [r1, r5]
10011eb0:	f000 f8b0 	bl	10012014 <_read_r>
10011eb4:	2800      	cmp	r0, #0
10011eb6:	db03      	blt.n	10011ec0 <__sread+0x18>
10011eb8:	6d63      	ldr	r3, [r4, #84]	; 0x54
10011eba:	181b      	adds	r3, r3, r0
10011ebc:	6563      	str	r3, [r4, #84]	; 0x54
10011ebe:	e003      	b.n	10011ec8 <__sread+0x20>
10011ec0:	89a2      	ldrh	r2, [r4, #12]
10011ec2:	4b02      	ldr	r3, [pc, #8]	; (10011ecc <__sread+0x24>)
10011ec4:	4013      	ands	r3, r2
10011ec6:	81a3      	strh	r3, [r4, #12]
10011ec8:	bd70      	pop	{r4, r5, r6, pc}
10011eca:	46c0      	nop			; (mov r8, r8)
10011ecc:	ffffefff 	.word	0xffffefff

10011ed0 <__swrite>:
10011ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011ed2:	001f      	movs	r7, r3
10011ed4:	898b      	ldrh	r3, [r1, #12]
10011ed6:	0005      	movs	r5, r0
10011ed8:	000c      	movs	r4, r1
10011eda:	0016      	movs	r6, r2
10011edc:	05db      	lsls	r3, r3, #23
10011ede:	d505      	bpl.n	10011eec <__swrite+0x1c>
10011ee0:	230e      	movs	r3, #14
10011ee2:	5ec9      	ldrsh	r1, [r1, r3]
10011ee4:	2200      	movs	r2, #0
10011ee6:	2302      	movs	r3, #2
10011ee8:	f000 f874 	bl	10011fd4 <_lseek_r>
10011eec:	89a2      	ldrh	r2, [r4, #12]
10011eee:	4b05      	ldr	r3, [pc, #20]	; (10011f04 <__swrite+0x34>)
10011ef0:	0028      	movs	r0, r5
10011ef2:	4013      	ands	r3, r2
10011ef4:	81a3      	strh	r3, [r4, #12]
10011ef6:	0032      	movs	r2, r6
10011ef8:	230e      	movs	r3, #14
10011efa:	5ee1      	ldrsh	r1, [r4, r3]
10011efc:	003b      	movs	r3, r7
10011efe:	f000 f81f 	bl	10011f40 <_write_r>
10011f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011f04:	ffffefff 	.word	0xffffefff

10011f08 <__sseek>:
10011f08:	b570      	push	{r4, r5, r6, lr}
10011f0a:	000c      	movs	r4, r1
10011f0c:	250e      	movs	r5, #14
10011f0e:	5f49      	ldrsh	r1, [r1, r5]
10011f10:	f000 f860 	bl	10011fd4 <_lseek_r>
10011f14:	89a3      	ldrh	r3, [r4, #12]
10011f16:	1c42      	adds	r2, r0, #1
10011f18:	d103      	bne.n	10011f22 <__sseek+0x1a>
10011f1a:	4a05      	ldr	r2, [pc, #20]	; (10011f30 <__sseek+0x28>)
10011f1c:	4013      	ands	r3, r2
10011f1e:	81a3      	strh	r3, [r4, #12]
10011f20:	e004      	b.n	10011f2c <__sseek+0x24>
10011f22:	2280      	movs	r2, #128	; 0x80
10011f24:	0152      	lsls	r2, r2, #5
10011f26:	4313      	orrs	r3, r2
10011f28:	81a3      	strh	r3, [r4, #12]
10011f2a:	6560      	str	r0, [r4, #84]	; 0x54
10011f2c:	bd70      	pop	{r4, r5, r6, pc}
10011f2e:	46c0      	nop			; (mov r8, r8)
10011f30:	ffffefff 	.word	0xffffefff

10011f34 <__sclose>:
10011f34:	b510      	push	{r4, lr}
10011f36:	230e      	movs	r3, #14
10011f38:	5ec9      	ldrsh	r1, [r1, r3]
10011f3a:	f000 f815 	bl	10011f68 <_close_r>
10011f3e:	bd10      	pop	{r4, pc}

10011f40 <_write_r>:
10011f40:	b570      	push	{r4, r5, r6, lr}
10011f42:	0005      	movs	r5, r0
10011f44:	0008      	movs	r0, r1
10011f46:	0011      	movs	r1, r2
10011f48:	2200      	movs	r2, #0
10011f4a:	4c06      	ldr	r4, [pc, #24]	; (10011f64 <_write_r+0x24>)
10011f4c:	6022      	str	r2, [r4, #0]
10011f4e:	001a      	movs	r2, r3
10011f50:	f7f7 f8ce 	bl	100090f0 <_write>
10011f54:	1c43      	adds	r3, r0, #1
10011f56:	d103      	bne.n	10011f60 <_write_r+0x20>
10011f58:	6823      	ldr	r3, [r4, #0]
10011f5a:	2b00      	cmp	r3, #0
10011f5c:	d000      	beq.n	10011f60 <_write_r+0x20>
10011f5e:	602b      	str	r3, [r5, #0]
10011f60:	bd70      	pop	{r4, r5, r6, pc}
10011f62:	46c0      	nop			; (mov r8, r8)
10011f64:	100164ec 	.word	0x100164ec

10011f68 <_close_r>:
10011f68:	2300      	movs	r3, #0
10011f6a:	b570      	push	{r4, r5, r6, lr}
10011f6c:	4c06      	ldr	r4, [pc, #24]	; (10011f88 <_close_r+0x20>)
10011f6e:	0005      	movs	r5, r0
10011f70:	0008      	movs	r0, r1
10011f72:	6023      	str	r3, [r4, #0]
10011f74:	f7fa fbba 	bl	1000c6ec <_close>
10011f78:	1c43      	adds	r3, r0, #1
10011f7a:	d103      	bne.n	10011f84 <_close_r+0x1c>
10011f7c:	6823      	ldr	r3, [r4, #0]
10011f7e:	2b00      	cmp	r3, #0
10011f80:	d000      	beq.n	10011f84 <_close_r+0x1c>
10011f82:	602b      	str	r3, [r5, #0]
10011f84:	bd70      	pop	{r4, r5, r6, pc}
10011f86:	46c0      	nop			; (mov r8, r8)
10011f88:	100164ec 	.word	0x100164ec

10011f8c <_fstat_r>:
10011f8c:	2300      	movs	r3, #0
10011f8e:	b570      	push	{r4, r5, r6, lr}
10011f90:	4c06      	ldr	r4, [pc, #24]	; (10011fac <_fstat_r+0x20>)
10011f92:	0005      	movs	r5, r0
10011f94:	0008      	movs	r0, r1
10011f96:	0011      	movs	r1, r2
10011f98:	6023      	str	r3, [r4, #0]
10011f9a:	f7fa fbab 	bl	1000c6f4 <_fstat>
10011f9e:	1c43      	adds	r3, r0, #1
10011fa0:	d103      	bne.n	10011faa <_fstat_r+0x1e>
10011fa2:	6823      	ldr	r3, [r4, #0]
10011fa4:	2b00      	cmp	r3, #0
10011fa6:	d000      	beq.n	10011faa <_fstat_r+0x1e>
10011fa8:	602b      	str	r3, [r5, #0]
10011faa:	bd70      	pop	{r4, r5, r6, pc}
10011fac:	100164ec 	.word	0x100164ec

10011fb0 <_isatty_r>:
10011fb0:	2300      	movs	r3, #0
10011fb2:	b570      	push	{r4, r5, r6, lr}
10011fb4:	4c06      	ldr	r4, [pc, #24]	; (10011fd0 <_isatty_r+0x20>)
10011fb6:	0005      	movs	r5, r0
10011fb8:	0008      	movs	r0, r1
10011fba:	6023      	str	r3, [r4, #0]
10011fbc:	f7fa fba0 	bl	1000c700 <_isatty>
10011fc0:	1c43      	adds	r3, r0, #1
10011fc2:	d103      	bne.n	10011fcc <_isatty_r+0x1c>
10011fc4:	6823      	ldr	r3, [r4, #0]
10011fc6:	2b00      	cmp	r3, #0
10011fc8:	d000      	beq.n	10011fcc <_isatty_r+0x1c>
10011fca:	602b      	str	r3, [r5, #0]
10011fcc:	bd70      	pop	{r4, r5, r6, pc}
10011fce:	46c0      	nop			; (mov r8, r8)
10011fd0:	100164ec 	.word	0x100164ec

10011fd4 <_lseek_r>:
10011fd4:	b570      	push	{r4, r5, r6, lr}
10011fd6:	0005      	movs	r5, r0
10011fd8:	0008      	movs	r0, r1
10011fda:	0011      	movs	r1, r2
10011fdc:	2200      	movs	r2, #0
10011fde:	4c06      	ldr	r4, [pc, #24]	; (10011ff8 <_lseek_r+0x24>)
10011fe0:	6022      	str	r2, [r4, #0]
10011fe2:	001a      	movs	r2, r3
10011fe4:	f7fa fb8e 	bl	1000c704 <_lseek>
10011fe8:	1c43      	adds	r3, r0, #1
10011fea:	d103      	bne.n	10011ff4 <_lseek_r+0x20>
10011fec:	6823      	ldr	r3, [r4, #0]
10011fee:	2b00      	cmp	r3, #0
10011ff0:	d000      	beq.n	10011ff4 <_lseek_r+0x20>
10011ff2:	602b      	str	r3, [r5, #0]
10011ff4:	bd70      	pop	{r4, r5, r6, pc}
10011ff6:	46c0      	nop			; (mov r8, r8)
10011ff8:	100164ec 	.word	0x100164ec

10011ffc <memchr>:
10011ffc:	b2c9      	uxtb	r1, r1
10011ffe:	1882      	adds	r2, r0, r2
10012000:	4290      	cmp	r0, r2
10012002:	d004      	beq.n	1001200e <memchr+0x12>
10012004:	7803      	ldrb	r3, [r0, #0]
10012006:	428b      	cmp	r3, r1
10012008:	d002      	beq.n	10012010 <memchr+0x14>
1001200a:	3001      	adds	r0, #1
1001200c:	e7f8      	b.n	10012000 <memchr+0x4>
1001200e:	2000      	movs	r0, #0
10012010:	4770      	bx	lr
	...

10012014 <_read_r>:
10012014:	b570      	push	{r4, r5, r6, lr}
10012016:	0005      	movs	r5, r0
10012018:	0008      	movs	r0, r1
1001201a:	0011      	movs	r1, r2
1001201c:	2200      	movs	r2, #0
1001201e:	4c06      	ldr	r4, [pc, #24]	; (10012038 <_read_r+0x24>)
10012020:	6022      	str	r2, [r4, #0]
10012022:	001a      	movs	r2, r3
10012024:	f7f7 f844 	bl	100090b0 <_read>
10012028:	1c43      	adds	r3, r0, #1
1001202a:	d103      	bne.n	10012034 <_read_r+0x20>
1001202c:	6823      	ldr	r3, [r4, #0]
1001202e:	2b00      	cmp	r3, #0
10012030:	d000      	beq.n	10012034 <_read_r+0x20>
10012032:	602b      	str	r3, [r5, #0]
10012034:	bd70      	pop	{r4, r5, r6, pc}
10012036:	46c0      	nop			; (mov r8, r8)
10012038:	100164ec 	.word	0x100164ec

1001203c <__aeabi_lmul>:
1001203c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001203e:	464f      	mov	r7, r9
10012040:	4646      	mov	r6, r8
10012042:	b4c0      	push	{r6, r7}
10012044:	0416      	lsls	r6, r2, #16
10012046:	0c36      	lsrs	r6, r6, #16
10012048:	4699      	mov	r9, r3
1001204a:	0033      	movs	r3, r6
1001204c:	0405      	lsls	r5, r0, #16
1001204e:	0c2c      	lsrs	r4, r5, #16
10012050:	0c07      	lsrs	r7, r0, #16
10012052:	0c15      	lsrs	r5, r2, #16
10012054:	4363      	muls	r3, r4
10012056:	437e      	muls	r6, r7
10012058:	436f      	muls	r7, r5
1001205a:	4365      	muls	r5, r4
1001205c:	0c1c      	lsrs	r4, r3, #16
1001205e:	19ad      	adds	r5, r5, r6
10012060:	1964      	adds	r4, r4, r5
10012062:	469c      	mov	ip, r3
10012064:	42a6      	cmp	r6, r4
10012066:	d903      	bls.n	10012070 <__aeabi_lmul+0x34>
10012068:	2380      	movs	r3, #128	; 0x80
1001206a:	025b      	lsls	r3, r3, #9
1001206c:	4698      	mov	r8, r3
1001206e:	4447      	add	r7, r8
10012070:	4663      	mov	r3, ip
10012072:	0c25      	lsrs	r5, r4, #16
10012074:	19ef      	adds	r7, r5, r7
10012076:	041d      	lsls	r5, r3, #16
10012078:	464b      	mov	r3, r9
1001207a:	434a      	muls	r2, r1
1001207c:	4343      	muls	r3, r0
1001207e:	0c2d      	lsrs	r5, r5, #16
10012080:	0424      	lsls	r4, r4, #16
10012082:	1964      	adds	r4, r4, r5
10012084:	1899      	adds	r1, r3, r2
10012086:	19c9      	adds	r1, r1, r7
10012088:	0020      	movs	r0, r4
1001208a:	bc0c      	pop	{r2, r3}
1001208c:	4690      	mov	r8, r2
1001208e:	4699      	mov	r9, r3
10012090:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012092:	46c0      	nop			; (mov r8, r8)
10012094:	100088ec 	.word	0x100088ec
10012098:	100088fa 	.word	0x100088fa
1001209c:	10008908 	.word	0x10008908
100120a0:	10008916 	.word	0x10008916
100120a4:	10008924 	.word	0x10008924
100120a8:	10008932 	.word	0x10008932
100120ac:	10008940 	.word	0x10008940
100120b0:	10008950 	.word	0x10008950
100120b4:	10008960 	.word	0x10008960
100120b8:	10008970 	.word	0x10008970
100120bc:	10008980 	.word	0x10008980
100120c0:	10008990 	.word	0x10008990
100120c4:	100089a0 	.word	0x100089a0
100120c8:	100089b0 	.word	0x100089b0
100120cc:	100089c0 	.word	0x100089c0
100120d0:	100089d0 	.word	0x100089d0
100120d4:	100089e0 	.word	0x100089e0
100120d8:	100089f0 	.word	0x100089f0
100120dc:	10008a00 	.word	0x10008a00
100120e0:	10008a10 	.word	0x10008a10
100120e4:	10008a20 	.word	0x10008a20
100120e8:	10008a30 	.word	0x10008a30
100120ec:	10008a40 	.word	0x10008a40
100120f0:	10008a50 	.word	0x10008a50
100120f4:	10008a60 	.word	0x10008a60
100120f8:	10008a70 	.word	0x10008a70
100120fc:	10008a80 	.word	0x10008a80
10012100:	10008a90 	.word	0x10008a90
10012104:	10008a9e 	.word	0x10008a9e
10012108:	10008aac 	.word	0x10008aac
1001210c:	10008aba 	.word	0x10008aba
10012110:	10008ac8 	.word	0x10008ac8
10012114:	10008ad6 	.word	0x10008ad6
10012118:	10008ae4 	.word	0x10008ae4
1001211c:	10008af2 	.word	0x10008af2
10012120:	10008b00 	.word	0x10008b00
10012124:	10008b10 	.word	0x10008b10
10012128:	10008b20 	.word	0x10008b20
1001212c:	10008b30 	.word	0x10008b30
10012130:	10008b40 	.word	0x10008b40
10012134:	10008b50 	.word	0x10008b50
10012138:	10008b60 	.word	0x10008b60
1001213c:	10008b70 	.word	0x10008b70
10012140:	10008b80 	.word	0x10008b80
10012144:	10008b90 	.word	0x10008b90
10012148:	10008ba0 	.word	0x10008ba0
1001214c:	10008bb0 	.word	0x10008bb0
10012150:	10008bc0 	.word	0x10008bc0
10012154:	10008bd0 	.word	0x10008bd0
10012158:	10008be0 	.word	0x10008be0
1001215c:	10008bf0 	.word	0x10008bf0
10012160:	10008c00 	.word	0x10008c00
10012164:	10008c0e 	.word	0x10008c0e
10012168:	10008c1c 	.word	0x10008c1c
1001216c:	10008c5c 	.word	0x10008c5c
10012170:	10008c84 	.word	0x10008c84
10012174:	10008cac 	.word	0x10008cac
10012178:	10008cd4 	.word	0x10008cd4
1001217c:	10008f14 	.word	0x10008f14
10012180:	10008d04 	.word	0x10008d04
10012184:	10008d1c 	.word	0x10008d1c
10012188:	10008d94 	.word	0x10008d94
1001218c:	10008dac 	.word	0x10008dac
10012190:	10008d34 	.word	0x10008d34
10012194:	10008d4c 	.word	0x10008d4c
10012198:	10008d64 	.word	0x10008d64
1001219c:	10008d7c 	.word	0x10008d7c
100121a0:	10008dc4 	.word	0x10008dc4
100121a4:	10009088 	.word	0x10009088
100121a8:	10009088 	.word	0x10009088
100121ac:	10009088 	.word	0x10009088
100121b0:	10009088 	.word	0x10009088
100121b4:	10009088 	.word	0x10009088
100121b8:	10009088 	.word	0x10009088
100121bc:	10009088 	.word	0x10009088
100121c0:	10009088 	.word	0x10009088
100121c4:	10008e6c 	.word	0x10008e6c
100121c8:	10008e84 	.word	0x10008e84
100121cc:	10008e9c 	.word	0x10008e9c
100121d0:	10008f2a 	.word	0x10008f2a
100121d4:	10008df4 	.word	0x10008df4
100121d8:	10009088 	.word	0x10009088
100121dc:	10009088 	.word	0x10009088
100121e0:	10009088 	.word	0x10009088
100121e4:	10009088 	.word	0x10009088
100121e8:	10009088 	.word	0x10009088
100121ec:	10009088 	.word	0x10009088
100121f0:	10008eb4 	.word	0x10008eb4
100121f4:	10008ecc 	.word	0x10008ecc
100121f8:	10008ee4 	.word	0x10008ee4
100121fc:	10008efc 	.word	0x10008efc
10012200:	10009088 	.word	0x10009088
10012204:	10009040 	.word	0x10009040
10012208:	10009058 	.word	0x10009058
1001220c:	10009088 	.word	0x10009088
10012210:	10009088 	.word	0x10009088
10012214:	10008f56 	.word	0x10008f56
10012218:	10008f6c 	.word	0x10008f6c
1001221c:	10008f82 	.word	0x10008f82
10012220:	10008f98 	.word	0x10008f98
10012224:	10009088 	.word	0x10009088
10012228:	10009088 	.word	0x10009088
1001222c:	10009088 	.word	0x10009088
10012230:	10009088 	.word	0x10009088
10012234:	10009088 	.word	0x10009088
10012238:	10009088 	.word	0x10009088
1001223c:	10009088 	.word	0x10009088
10012240:	10009088 	.word	0x10009088
10012244:	10008c48 	.word	0x10008c48
10012248:	10008c70 	.word	0x10008c70
1001224c:	10008c98 	.word	0x10008c98
10012250:	10008cc0 	.word	0x10008cc0
10012254:	10008cec 	.word	0x10008cec
10012258:	10008ddc 	.word	0x10008ddc
1001225c:	10008e0c 	.word	0x10008e0c
10012260:	10008e24 	.word	0x10008e24
10012264:	10008e3c 	.word	0x10008e3c
10012268:	10008e54 	.word	0x10008e54
1001226c:	10008f40 	.word	0x10008f40
10012270:	10008fae 	.word	0x10008fae
10012274:	10009028 	.word	0x10009028
10012278:	10009070 	.word	0x10009070
1001227c:	0000000d 	.word	0x0000000d
10012280:	736d735b 	.word	0x736d735b
10012284:	656c625f 	.word	0x656c625f
10012288:	6961705f 	.word	0x6961705f
1001228c:	65725f72 	.word	0x65725f72
10012290:	73657571 	.word	0x73657571
10012294:	6e665f74 	.word	0x6e665f74
10012298:	6150095d 	.word	0x6150095d
1001229c:	6e697269 	.word	0x6e697269
100122a0:	65722067 	.word	0x65722067
100122a4:	73657571 	.word	0x73657571
100122a8:	2e2e2e74 	.word	0x2e2e2e74
100122ac:	656e4220 	.word	0x656e4220
100122b0:	64252077 	.word	0x64252077
100122b4:	4c42202c 	.word	0x4c42202c
100122b8:	78302045 	.word	0x78302045
100122bc:	78323025 	.word	0x78323025
100122c0:	3154202c 	.word	0x3154202c
100122c4:	2c642520 	.word	0x2c642520
100122c8:	20325420 	.word	0x20325420
100122cc:	00006425 	.word	0x00006425
100122d0:	736d735b 	.word	0x736d735b
100122d4:	656c625f 	.word	0x656c625f
100122d8:	776f705f 	.word	0x776f705f
100122dc:	645f7265 	.word	0x645f7265
100122e0:	5d6e776f 	.word	0x5d6e776f
100122e4:	00000000 	.word	0x00000000
100122e8:	646f6f47 	.word	0x646f6f47
100122ec:	67696e20 	.word	0x67696e20
100122f0:	00007468 	.word	0x00007468
100122f4:	736d735b 	.word	0x736d735b
100122f8:	656c625f 	.word	0x656c625f
100122fc:	776f705f 	.word	0x776f705f
10012300:	645f7265 	.word	0x645f7265
10012304:	5d6e776f 	.word	0x5d6e776f
10012308:	6f745309 	.word	0x6f745309
1001230c:	6e697070 	.word	0x6e697070
10012310:	6f632067 	.word	0x6f632067
10012314:	6e616d6d 	.word	0x6e616d6d
10012318:	65722064 	.word	0x65722064
1001231c:	76696563 	.word	0x76696563
10012320:	64206465 	.word	0x64206465
10012324:	6e697275 	.word	0x6e697275
10012328:	64612067 	.word	0x64612067
1001232c:	74726576 	.word	0x74726576
10012330:	6d657369 	.word	0x6d657369
10012334:	2e746e65 	.word	0x2e746e65
10012338:	6f745320 	.word	0x6f745320
1001233c:	6e697070 	.word	0x6e697070
10012340:	2e2e2e67 	.word	0x2e2e2e67
10012344:	00000020 	.word	0x00000020
10012348:	6c696166 	.word	0x6c696166
1001234c:	21216465 	.word	0x21216465
10012350:	00000021 	.word	0x00000021
10012354:	656e6f64 	.word	0x656e6f64
10012358:	00000021 	.word	0x00000021
1001235c:	736d735b 	.word	0x736d735b
10012360:	656c625f 	.word	0x656c625f
10012364:	776f705f 	.word	0x776f705f
10012368:	645f7265 	.word	0x645f7265
1001236c:	5d6e776f 	.word	0x5d6e776f
10012370:	65440909 	.word	0x65440909
10012374:	65636976 	.word	0x65636976
10012378:	69617020 	.word	0x69617020
1001237c:	2e646572 	.word	0x2e646572
10012380:	64202e2e 	.word	0x64202e2e
10012384:	62617369 	.word	0x62617369
10012388:	676e696c 	.word	0x676e696c
1001238c:	746e6920 	.word	0x746e6920
10012390:	75727265 	.word	0x75727265
10012394:	20737470 	.word	0x20737470
10012398:	77732026 	.word	0x77732026
1001239c:	68637469 	.word	0x68637469
100123a0:	20676e69 	.word	0x20676e69
100123a4:	6e776f64 	.word	0x6e776f64
100123a8:	6e657320 	.word	0x6e657320
100123ac:	73726f73 	.word	0x73726f73
100123b0:	00000000 	.word	0x00000000
100123b4:	736d735b 	.word	0x736d735b
100123b8:	656c625f 	.word	0x656c625f
100123bc:	776f705f 	.word	0x776f705f
100123c0:	645f7265 	.word	0x645f7265
100123c4:	5d6e776f 	.word	0x5d6e776f
100123c8:	75430909 	.word	0x75430909
100123cc:	6e657272 	.word	0x6e657272
100123d0:	20796c74 	.word	0x20796c74
100123d4:	69646e69 	.word	0x69646e69
100123d8:	69746163 	.word	0x69746163
100123dc:	0000676e 	.word	0x0000676e
100123e0:	736d735b 	.word	0x736d735b
100123e4:	656c625f 	.word	0x656c625f
100123e8:	776f705f 	.word	0x776f705f
100123ec:	645f7265 	.word	0x645f7265
100123f0:	5d6e776f 	.word	0x5d6e776f
100123f4:	65440909 	.word	0x65440909
100123f8:	65636976 	.word	0x65636976
100123fc:	6e6f6320 	.word	0x6e6f6320
10012400:	7463656e 	.word	0x7463656e
10012404:	2e2e6465 	.word	0x2e2e6465
10012408:	6964202e 	.word	0x6964202e
1001240c:	6e6f6373 	.word	0x6e6f6373
10012410:	7463656e 	.word	0x7463656e
10012414:	00676e69 	.word	0x00676e69
10012418:	736d735b 	.word	0x736d735b
1001241c:	656c625f 	.word	0x656c625f
10012420:	7664615f 	.word	0x7664615f
10012424:	7065725f 	.word	0x7065725f
10012428:	5f74726f 	.word	0x5f74726f
1001242c:	095d6e66 	.word	0x095d6e66
10012430:	65766441 	.word	0x65766441
10012434:	73697472 	.word	0x73697472
10012438:	6e656d65 	.word	0x6e656d65
1001243c:	69742074 	.word	0x69742074
10012440:	756f656d 	.word	0x756f656d
10012444:	2e2e2e74 	.word	0x2e2e2e74
10012448:	00000000 	.word	0x00000000
1001244c:	736d735b 	.word	0x736d735b
10012450:	656c625f 	.word	0x656c625f
10012454:	6e6f635f 	.word	0x6e6f635f
10012458:	7463656e 	.word	0x7463656e
1001245c:	665f6465 	.word	0x665f6465
10012460:	09095d6e 	.word	0x09095d6e
10012464:	69766544 	.word	0x69766544
10012468:	20736563 	.word	0x20736563
1001246c:	6e6e6f63 	.word	0x6e6e6f63
10012470:	65746365 	.word	0x65746365
10012474:	2e2e2e64 	.word	0x2e2e2e64
10012478:	00000000 	.word	0x00000000
1001247c:	736d735b 	.word	0x736d735b
10012480:	656c625f 	.word	0x656c625f
10012484:	6961705f 	.word	0x6961705f
10012488:	5f646572 	.word	0x5f646572
1001248c:	005d6e66 	.word	0x005d6e66
10012490:	736d735b 	.word	0x736d735b
10012494:	656c625f 	.word	0x656c625f
10012498:	7664615f 	.word	0x7664615f
1001249c:	69747265 	.word	0x69747265
100124a0:	095d6573 	.word	0x095d6573
100124a4:	65766441 	.word	0x65766441
100124a8:	73697472 	.word	0x73697472
100124ac:	6e656d65 	.word	0x6e656d65
100124b0:	61642074 	.word	0x61642074
100124b4:	73206174 	.word	0x73206174
100124b8:	66207465 	.word	0x66207465
100124bc:	656c6961 	.word	0x656c6961
100124c0:	00002164 	.word	0x00002164
100124c4:	736d735b 	.word	0x736d735b
100124c8:	656c625f 	.word	0x656c625f
100124cc:	7664615f 	.word	0x7664615f
100124d0:	69747265 	.word	0x69747265
100124d4:	095d6573 	.word	0x095d6573
100124d8:	454c4209 	.word	0x454c4209
100124dc:	61745320 	.word	0x61745320
100124e0:	64657472 	.word	0x64657472
100124e4:	76644120 	.word	0x76644120
100124e8:	69747265 	.word	0x69747265
100124ec:	656d6573 	.word	0x656d6573
100124f0:	0000746e 	.word	0x0000746e
100124f4:	736d735b 	.word	0x736d735b
100124f8:	7265735f 	.word	0x7265735f
100124fc:	65636976 	.word	0x65636976
10012500:	7664615f 	.word	0x7664615f
10012504:	69747265 	.word	0x69747265
10012508:	095d6573 	.word	0x095d6573
1001250c:	20454c42 	.word	0x20454c42
10012510:	65766441 	.word	0x65766441
10012514:	73697472 	.word	0x73697472
10012518:	6e656d65 	.word	0x6e656d65
1001251c:	74732074 	.word	0x74732074
10012520:	20747261 	.word	0x20747261
10012524:	6c696166 	.word	0x6c696166
10012528:	203a6465 	.word	0x203a6465
1001252c:	73616572 	.word	0x73616572
10012530:	30206e6f 	.word	0x30206e6f
10012534:	00782578 	.word	0x00782578
10012538:	736d735b 	.word	0x736d735b
1001253c:	656c625f 	.word	0x656c625f
10012540:	7369645f 	.word	0x7369645f
10012544:	6e6e6f63 	.word	0x6e6e6f63
10012548:	65746365 	.word	0x65746365
1001254c:	6e665f64 	.word	0x6e665f64
10012550:	6550095d 	.word	0x6550095d
10012554:	64207265 	.word	0x64207265
10012558:	6f637369 	.word	0x6f637369
1001255c:	63656e6e 	.word	0x63656e6e
10012560:	2e646574 	.word	0x2e646574
10012564:	42202e2e 	.word	0x42202e2e
10012568:	2077656e 	.word	0x2077656e
1001256c:	202c6425 	.word	0x202c6425
10012570:	20454c42 	.word	0x20454c42
10012574:	30257830 	.word	0x30257830
10012578:	202c7832 	.word	0x202c7832
1001257c:	25203154 	.word	0x25203154
10012580:	54202c64 	.word	0x54202c64
10012584:	64252032 	.word	0x64252032
10012588:	00000000 	.word	0x00000000
1001258c:	736d735b 	.word	0x736d735b
10012590:	656c625f 	.word	0x656c625f
10012594:	6e65735f 	.word	0x6e65735f
10012598:	68635f64 	.word	0x68635f64
1001259c:	63617261 	.word	0x63617261
100125a0:	69726574 	.word	0x69726574
100125a4:	63697473 	.word	0x63697473
100125a8:	7250095d 	.word	0x7250095d
100125ac:	75737365 	.word	0x75737365
100125b0:	63206572 	.word	0x63206572
100125b4:	61726168 	.word	0x61726168
100125b8:	72657463 	.word	0x72657463
100125bc:	69747369 	.word	0x69747369
100125c0:	00003f63 	.word	0x00003f63
100125c4:	736d735b 	.word	0x736d735b
100125c8:	656c625f 	.word	0x656c625f
100125cc:	6e65735f 	.word	0x6e65735f
100125d0:	68635f64 	.word	0x68635f64
100125d4:	63617261 	.word	0x63617261
100125d8:	69726574 	.word	0x69726574
100125dc:	63697473 	.word	0x63697473
100125e0:	504d095d 	.word	0x504d095d
100125e4:	68632055 	.word	0x68632055
100125e8:	63617261 	.word	0x63617261
100125ec:	69726574 	.word	0x69726574
100125f0:	63697473 	.word	0x63697473
100125f4:	0000003f 	.word	0x0000003f
100125f8:	54455320 	.word	0x54455320
100125fc:	6425203a 	.word	0x6425203a
10012600:	20746120 	.word	0x20746120
10012604:	78257830 	.word	0x78257830
10012608:	00002020 	.word	0x00002020
1001260c:	47206425 	.word	0x47206425
10012610:	3f454e4f 	.word	0x3f454e4f
10012614:	20642520 	.word	0x20642520
10012618:	00000000 	.word	0x00000000
1001261c:	20544f4e 	.word	0x20544f4e
10012620:	6d6f6328 	.word	0x6d6f6328
10012624:	74656c70 	.word	0x74656c70
10012628:	29796c65 	.word	0x29796c65
1001262c:	6e6f6720 	.word	0x6e6f6720
10012630:	00203f65 	.word	0x00203f65
10012634:	544f4e20 	.word	0x544f4e20
10012638:	74657320 	.word	0x74657320
1001263c:	0000203f 	.word	0x0000203f

10012640 <sms_ble_gap_cb>:
	...
1001264c:	10009df5 00000000 10009e29 10009f39     ........)...9...
	...
10012664:	10009e71 10009c11 00000000 00000000     q...............
	...

1001268c <sms_ble_gatt_server_cb>:
1001268c:	10009c5d 10009ca1 00000000 00000000     ]...............
	...
100126b4:	20305442 00004243 20315442 00004243     BT0 CB..BT1 CB..
100126c4:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
100126d4:	72756769 09095d65 626f7270 206d656c     igure]..problem 
100126e4:	6c696877 65732065 6e697474 70752067     while setting up
100126f4:	74756220 306e6f74 00000000 736d735b      button0....[sms
10012704:	7475625f 5f6e6f74 666e6f63 72756769     _button_configur
10012714:	09095d65 626f7270 206d656c 6c696877     e]..problem whil
10012724:	65732065 6e697474 4f412067 4950475f     e setting AO_GPI
10012734:	00315f4f 736d735b 7475625f 5f6e6f74     O_1.[sms_button_
10012744:	666e6f63 72756769 09095d65 626f7250     configure]..Prob
10012754:	206d656c 6c696877 65732065 6e697474     lem while settin
10012764:	70752067 74756220 316e6f74 00000000     g up button1....
10012774:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10012784:	72756769 09095d65 626f7250 206d656c     igure]..Problem 
10012794:	6c696877 65732065 6e697474 70752067     while setting up
100127a4:	4c505820 454e4941 73752044 62207265      XPLAINED user b
100127b4:	6f747475 0000006e 736d735b 7475625f     utton...[sms_but
100127c4:	5f6e6f74 5f746567 74617473 09095d65     ton_get_state]..
100127d4:	74747542 73206e6f 65746174 6425203a     Button state: %d
100127e4:	00642520 736d735b 7475625f 5f6e6f74      %d.[sms_button_
100127f4:	005d6e66 736d735b 7475625f 5f6e6f74     fn].[sms_button_
10012804:	095d6e66 6f4e0909 73752074 73206465     fn]...Not used s
10012814:	65746174 2e2e2e73 00000000 736d735b     tates.......[sms
10012824:	7475625f 5f6e6f74 69666564 735f656e     _button_define_s
10012834:	69767265 5d736563 72655309 65636976     ervices].Service
10012844:	65642073 696e6966 6620676e 656c6961     s defining faile
10012854:	72202c64 6f736165 7830206e 00007825     d, reason 0x%x..
10012864:	736d735b 7475625f 5f6e6f74 69666564     [sms_button_defi
10012874:	735f656e 69767265 5d736563 72655309     ne_services].Ser
10012884:	65636976 65642073 656e6966 53202c64     vices defined, S
10012894:	6220534d 6f747475 6168206e 656c646e     MS button handle
100128a4:	6425203a 00000000 626f7250 206d656c     : %d....Problem 
100128b4:	6c696877 65732065 6e697474 70672067     while setting gp
100128c4:	70206f69 00006e69 2e2e7325 4209092e     io pin..%s.....B
100128d4:	6572702d 64252076 2d42202c 20727563     -prev %d, B-cur 
100128e4:	202c6425 20454c42 30257830 202c7832     %d, BLE 0x%02x, 
100128f4:	25203154 54202c64 64252032 4d53202c     T1 %d, T2 %d, SM
10012904:	64252053 00000000 736d735b 6175645f     S %d....[sms_dua
10012914:	6d69746c 5f317265 005d6e66 736d735b     ltimer1_fn].[sms
10012924:	6175645f 6d69746c 5f327265 005d6e66     _dualtimer2_fn].
10012934:	2e2e2e20 69766967 7520676e 00002170      ...giving up!..
10012944:	2e2e2e20 74696177 2e676e69 63202e2e      ...waiting... c
10012954:	746e756f 203a7265 00006425 736d735b     ounter: %d..[sms
10012964:	6175645f 6d69746c 5f327265 095d6e66     _dualtimer2_fn].
10012974:	696c4209 6e696b6e 74732067 75747261     .Blinking startu
10012984:	2e2e2e70 00000000 736d735b 6175645f     p.......[sms_dua
10012994:	6d69746c 5f327265 095d6e66 696c4209     ltimer2_fn]..Bli
100129a4:	6e696b6e 68732067 6f647475 2e2e6e77     nking shutdown..
100129b4:	0000002e 736d735b 6175645f 6d69746c     ....[sms_dualtim
100129c4:	5f327265 095d6e66 776f5009 6e697265     er2_fn]..Powerin
100129d4:	666f2067 2e2e2e66 00000000 1000ae66     g off.......f...
100129e4:	1000ae78 1000ae4e 1000ae4e 1000ae4e     x...N...N...N...
100129f4:	1000ae66 1000ae4e 1000ae4e 1000b876     f...N...N...v...
10012a04:	1000b8ea 1000b85e 1000b8f0 1000b864     ....^.......d...
10012a14:	1000b86a 1000b870 1000bfd0 1000bfd0     j...p...........
10012a24:	1000bfd0 1000bfd0 1000bfd0 1000bfd0     ................
10012a34:	1000bfd0 1000bfd0 1000bfd0 1000bfd0     ................
10012a44:	1000bfd0 1000bfd0 1000bfd0 1000bfd0     ................
10012a54:	1000bfd0 1000bfd0 1000bfd0 1000bfd0     ................
10012a64:	1000bfd0 1000bfee 1000bfee 1000bfee     ................
10012a74:	1000bfee 1000bfee 1000bfee 1000bfee     ................
10012a84:	1000bfee 1000bfee 1000bfee 1000c010     ................
10012a94:	1000c010 1000c010 1000c010 1000c010     ................
10012aa4:	1000c010 1000c010 1000c010 1000c010     ................
10012ab4:	1000c010 1000c040 1000c040 1000c040     ....@...@...@...
10012ac4:	1000c040 1000c040 1000c040 1000c05a     @...@...@...Z...
10012ad4:	1000c05a 1000c05a 1000c05a 1000c05a     Z...Z...Z...Z...
10012ae4:	1000c05a 1000c05a 1000c05a 1000c05a     Z...Z...Z...Z...
10012af4:	1000c074 1000c074 1000c096 1000c096     t...t...........
10012b04:	1000c0b0 1000c096 34333231 00003635     ........123456..
10012b14:	efcdab00 00efcdab                       ........

10012b1c <ble_mgr_gatt_server_handle>:
	...
10012b34:	1000ad61 1000ad89 1000add1 00000000     a...............
10012b44:	65646e55 656e6966 76452064 20746e65     Undefined Event 
10012b54:	65636552 64657669 00000000 6e616353     Received....Scan
10012b64:	676e696e 61662020 64656c69 00000000     ning  failed....
10012b74:	65766441 73697472 20676e69 6c696166     Advertising fail
10012b84:	00006465 2d454c42 2055544d 6e616843     ed..BLE-MTU Chan
10012b94:	2c646567 6e6f4320 7463656e 206e6f69     ged, Connection 
10012ba4:	646e6148 203a656c 202c6425 2077654e     Handle: %d, New 
10012bb4:	756c6156 25203a65 00000064 2055544d     Value: %d...MTU 
10012bc4:	6e616843 2c646567 6e6f4320 7463656e     Changed, Connect
10012bd4:	206e6f69 646e6148 253a656c 4f202c64     ion Handle:%d, O
10012be4:	61726570 6e6f6974 0064253a 2055544d     peration:%d.MTU 
10012bf4:	6e616843 46206567 656c6961 43202c64     Change Failed, C
10012c04:	656e6e6f 6f697463 6148206e 656c646e     onnection Handle
10012c14:	2c64253a 65704f20 69746172 253a6e6f     :%d, Operation:%
10012c24:	00000064 72616843 69725720 43206574     d...Char Write C
10012c34:	4320646d 6c706d6f 2c657465 6e6f4320     md Complete, Con
10012c44:	7463656e 206e6f69 646e6148 253a656c     nection Handle:%
10012c54:	4f202c64 61726570 6e6f6974 0064253a     d, Operation:%d.
10012c64:	72616843 69725720 43206574 4620646d     Char Write Cmd F
10012c74:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
10012c84:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
10012c94:	69746172 253a6e6f 00000064 74617453     ration:%d...Stat
10012ca4:	6f4e2065 61482074 656c646e 64252064     e Not Handled %d
10012cb4:	00000000 69766544 64206563 6f637369     ....Device disco
10012cc4:	63656e6e 20646574 73616552 303a6e6f     nnected Reason:0
10012cd4:	32302578 61482078 656c646e 2578303d     x%02x Handle=0x%
10012ce4:	00000078 425f5441 435f454c 5f4e4e4f     x...AT_BLE_CONN_
10012cf4:	41524150 50555f4d 45544144 00000020     PARAM_UPDATE ...
10012d04:	72636e45 69747079 66206e6f 656c6961     Encryption faile
10012d14:	00000064 72636e45 69747079 63206e6f     d...Encryption c
10012d24:	6c706d6f 64657465 63757320 73736563     ompleted success
10012d34:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
10012d44:	6e206563 6620746f 646e756f 636e6520     ce not found enc
10012d54:	74707972 206e6f69 6f666e69 00000000     ryption info....
10012d64:	6f666e49 7665443a 20656369 6e756f66     Info:Device foun
10012d74:	64612064 73657264 255b2073 20205d64     d address [%d]  
10012d84:	30257830 30255832 30255832 30255832     0x%02X%02X%02X%0
10012d94:	30255832 30255832 00205832 6f666e49     2X%02X%02X .Info
10012da4:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
10012db4:	206e6163 69766564 72206563 68636165     can device reach
10012dc4:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
10012dd4:	00006e61 6c696146 74206465 7473206f     an..Failed to st
10012de4:	7320706f 6e6e6163 00676e69 30257830     op scanning.0x%0
10012df4:	202c5832 00000000 4b525343 0000203a     2X, ....CSRK: ..
10012e04:	3a4b5249 00000000 72696150 20676e69     IRK:....Pairing 
10012e14:	6c696166 2e2e6465 7369442e 6e6e6f63     failed...Disconn
10012e24:	69746365 0000676e 63736944 656e6e6f     ecting..Disconne
10012e34:	52207463 65757165 46207473 656c6961     ct Request Faile
10012e44:	00000064 72696150 20676e69 636f7270     d...Pairing proc
10012e54:	72756465 6f632065 656c706d 20646574     edure completed 
10012e64:	63637573 66737365 796c6c75 00000000     successfully....
10012e74:	20454c42 69766544 6e206563 6620746f     BLE Device not f
10012e84:	646e756f 206f7420 726f7473 68742065     ound to store th
10012e94:	61702065 6e697269 6e692067 00006f66     e pairing info..
10012ea4:	3a4b544c 00000020 72636e45 69747079     LTK: ...Encrypti
10012eb4:	4e206e6f 7320746f 74726174 00006465     on Not started..
10012ec4:	76616c53 65532065 69727563 52207974     Slave Security R
10012ed4:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10012ee4:	206e6f69 6c696146 00006465 656e6547     ion Failed..Gene
10012ef4:	65746172 544c2064 00203a4b 30257830     rated LTK: .0x%0
10012f04:	00205832 646e6553 20676e69 72696170     2X .Sending pair
10012f14:	20676e69 70736572 65736e6f 00000000     ing response....
10012f24:	72696150 71655220 74736575 41202d20     Pair Request - A
10012f34:	65687475 6369746e 6f697461 6146206e     uthentication Fa
10012f44:	64656c69 00000000 65746e45 68742072     iled....Enter th
10012f54:	61502065 656b7373 2d362879 69676944     e Passkey(6-Digi
10012f64:	69202974 6554206e 6e696d72 003a6c61     t) in Terminal:.
10012f74:	206e6950 656d6954 0074756f 63736944     Pin Timeout.Disc
10012f84:	656e6e6f 6e697463 2e2e2067 0000002e     onnecting ......
10012f94:	61656c50 45206573 7265746e 65687420     Please Enter the
10012fa4:	6c6f6620 69776f6c 5020676e 2d737361      following Pass-
10012fb4:	65646f63 206e6f28 6568746f 65442072     code(on other De
10012fc4:	65636976 00003a29 72696150 79656b2d     vice):..Pair-key
10012fd4:	70657220 6620796c 656c6961 00000064      reply failed...
10012fe4:	20424f4f 74616546 20657275 20746f4e     OOB Feature Not 
10012ff4:	70707573 6574726f 00000064 65746e45     supported...Ente
10013004:	20646572 73736150 646f632d 00003a65     red Pass-code:..
10013014:	2d434e45 3a716552 6e6f4320 6148206e     ENC-Req: Conn Ha
10013024:	656c646e 76654420 20656369 6e756f46     ndle Device Foun
10013034:	64683a64 64253a6c 00000000 74736f68     d:hdl:%d....host
10013044:	76656420 20656369 76696465 00782520      device ediv %x.
10013054:	72656570 76656420 20656369 76696465     peer device ediv
10013064:	00782520 5f636e65 20716572 76696465      %x.enc_req ediv
10013074:	00782520 20656854 65646e69 73692078      %x.The index is
10013084:	00642520 2d434e45 3a716552 79654b20      %d.ENC-Req: Key
10013094:	756f4620 0000646e 72696150 20676e69      Found..Pairing 
100130a4:	6f666e69 74616d72 206e6f69 7020666f     information of p
100130b4:	20726565 69766564 69206563 6f6e2073     eer device is no
100130c4:	76612074 616c6961 2e656c62 00000000     t available.....
100130d4:	61656c50 75206573 6961706e 68742072     Please unpair th
100130e4:	65642065 65636976 6f726620 6570206d     e device from pe
100130f4:	64207265 63697665 6f6d2865 656c6962     er device(mobile
10013104:	65732029 6e697474 6d207367 20756e65     ) settings menu 
10013114:	20646e61 72617473 61702074 6e697269     and start pairin
10013124:	67612067 006e6961 72636e45 69747079     g again.Encrypti
10013134:	52206e6f 65757165 52207473 796c7065     on Request Reply
10013144:	69614620 0064656c 72636e45 69747079      Failed.Encrypti
10013154:	52206e6f 65757165 52207473 796c7065     on Request Reply
10013164:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10013174:	696e4909 6c616974 6e697a69 41532067     .Initializing SA
10013184:	3131424d 00000000 656c625b 696e695f     MB11....[ble_ini
10013194:	09095d74 424d4153 49203131 6974696e     t]..SAMB11 Initi
100131a4:	7a696c61 6f697461 6166206e 64656c69     alization failed
100131b4:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
100131c4:	61656c50 63206573 6b636568 65687420     Please check the
100131d4:	776f7020 61207265 6320646e 656e6e6f      power and conne
100131e4:	6f697463 202f206e 64726168 65726177     ction / hardware
100131f4:	6e6f6320 7463656e 0000726f 52424153      connector..SABR
10013204:	4d532d65 00000053 69766544 6e206563     e-SMS...Device n
10013214:	20656d61 20746573 6c696166 00006465     ame set failed..
10013224:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
10013234:	5d676966 44420909 64646120 73736572     fig]..BD address
10013244:	74656720 69616620 0064656c 656c625b      get failed.[ble
10013254:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10013264:	44420909 64644120 73736572 2578303a     ..BD Address:0x%
10013274:	25583230 25583230 25583230 25583230     02X%02X%02X%02X%
10013284:	25583230 2c583230 64644120 73736572     02X%02X, Address
10013294:	70795420 64253a65 00000000 656c625b      Type:%d....[ble
100132a4:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
100132b4:	74655309 454c4220 76654420 20656369     .Set BLE Device 
100132c4:	666e6f63 72756769 6f697461 6166206e     configuration fa
100132d4:	64656c69 00000000 656c625b 7465735f     iled....[ble_set
100132e4:	7665645f 6e6f635f 5d676966 74655309     _dev_config].Set
100132f4:	454c4220 76654420 20656369 72646441      BLE Device Addr
10013304:	20737365 6c696166 00006465 6e616353     ess failed..Scan
10013314:	676e696e 502e2e2e 7361656c 61772065     ning...Please wa
10013324:	2e2e7469 0000002e 76616c53 65732065     it......Slave se
10013334:	69727563 72207974 65757165 73207473     curity request s
10013344:	65636375 75667373 0000006c 76616c53     uccessful...Slav
10013354:	65732065 69727563 72207974 65757165     e security reque
10013364:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10013374:	65746365 6f742064 65657020 65642072     ected to peer de
10013384:	65636976 74697720 64612068 73657264     vice with addres
10013394:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
100133a4:	78323025 78323025 78323025 00000000     %02x%02x%02x....
100133b4:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
100133c4:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
100133d4:	61522067 6d6f646e 64646120 73736572     g Random address
100133e4:	63757320 73736563 00002a2a 6f736552      success**..Reso
100133f4:	6e69766c 61522067 6d6f646e 64646120     lving Random add
10013404:	73736572 69616620 2a64656c 0000002a     ress failed**...
10013414:	2078614d 626d756e 6f207265 6f632066     Max number of co
10013424:	63656e6e 6e6f6974 61657220 64656863     nnection reached
10013434:	6425203a 3d3d3d20 7369443e 6e6e6f63     : %d ===>Disconn
10013444:	69746365 2e2e676e 0000002e 69766544     ecting......Devi
10013454:	43206563 656e6e6f 6f697463 6146206e     ce Connection Fa
10013464:	64656c69 53202d20 75746174 25203a73     iled - Status: %
10013474:	00000064 23232323 23232323 65442323     d...##########De
10013484:	65636976 756f4620 0000646e 23232323     vice Found..####
10013494:	23232323 65442323 65636976 746f4e20     ######Device Not
100134a4:	756f4620 0000646e 69766544 69206563      Found..Device i
100134b4:	253a7864 00000064 4c420a0d 76452d45     dx:%d.....BLE-Ev
100134c4:	3a746e65 00006425 54544147 7265535f     ent:%d..GATT_Ser
100134d4:	20726576 6e657645 64253a74 00000000     ver Event:%d....
100134e4:	2d454c42 616e614d 3a726567 6e6b6e55     BLE-Manager:Unkn
100134f4:	206e776f 6e657645 78303d74 00005825     own Event=0x%X..
10013504:	656c625b 6e616d5f 72656761 0909095d     [ble_manager]...
10013514:	756e614d 74636166 72657275 65707320     Manufacturer spe
10013524:	69666963 61642063 65206174 6c62616e     cific data enabl
10013534:	00006465 5a2d571c 00002dbe 20454c42     ed...W-Z.-..BLE 
10013544:	65766441 73697472 6e656d65 61642074     Advertisement da
10013554:	73206174 66207465 656c6961 00000064     ta set failed...

10013564 <ble_mgr_gap_handle>:
10013564:	1000aced 1000af9d 1000ad11 1000ad39     ............9...
10013574:	00000000 1000bc25 1000ae19 1000aeb5     ....%...........
10013584:	1000b1f9 1000b049 1000b3f9 1000b211     ....I...........
10013594:	1000b585 1000b6c9 1000aed9 1000be71     ............q...
	...
100135b0:	696b6157 7520676e 2e2e2e70 6e744220     Waking up... Btn
100135c0:	6e692030 00000074 6f727245 6e692072     0 int...Error in
100135d0:	736d7320 7475625f 5f6e6f74 29286e66      sms_button_fn()
100135e0:	00000000 696b6157 7520676e 2e2e2e70     ....Waking up...
100135f0:	6e744220 6e692031 00000074 656d6954      Btn1 int...Time
10013600:	69203172 2e2e746e 0000202e 656d6954     r1 int... ..Time
10013610:	69203272 2e2e746e 0000202e 656d7441     r2 int... ..Atme
10013620:	6f43206c 022e7072                                l Corp.

10013627 <CSWTCH.45>:
10013627:	00100402                                         ...

1001362a <CSWTCH.47>:
1001362a:	03010300 03030303 03030303 02020303              ...............

10013639 <client_conf_uuid>:
10013639:	29042902                                         .)

1001363b <presentation_format_uuid>:
1001363b:	29012904                                         .)

1001363d <user_desc_uuid>:
1001363d:	29032901                                         .)

1001363f <server_conf_uuid>:
1001363f:	29002903                                         .)

10013641 <extended_props_uuid>:
10013641:	28022900                                         .)

10013643 <include_uuid>:
10013643:	28032802                                         .(

10013645 <char_uuid>:
10013645:	a8002803 68100100 681000ff 661000ff     .(.....h...h...f
10013655:	801000ff 80100100 72100100 66100100     ...........r...f
10013665:	801000ff 72100100 80100100 66100100     .......r.......f
10013675:	881000ff 88100100 88100100 88100100     ................
10013685:	43100102 4c000000                                ...C...

1001368c <_global_impure_ptr>:
1001368c:	1001374c                                L7..

10013690 <__sf_fake_stdin>:
	...

100136b0 <__sf_fake_stdout>:
	...

100136d0 <__sf_fake_stderr>:
	...
100136f0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10013700:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10013710:	31300046 35343332 39383736 64636261     F.0123456789abcd
10013720:	00006665                                ef..

10013724 <_init>:
10013724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013726:	46c0      	nop			; (mov r8, r8)
10013728:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001372a:	bc08      	pop	{r3}
1001372c:	469e      	mov	lr, r3
1001372e:	4770      	bx	lr

10013730 <__init_array_start>:
10013730:	100080b1 	.word	0x100080b1

10013734 <_fini>:
10013734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013736:	46c0      	nop			; (mov r8, r8)
10013738:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001373a:	bc08      	pop	{r3}
1001373c:	469e      	mov	lr, r3
1001373e:	4770      	bx	lr

10013740 <__fini_array_start>:
10013740:	10008089 	.word	0x10008089
