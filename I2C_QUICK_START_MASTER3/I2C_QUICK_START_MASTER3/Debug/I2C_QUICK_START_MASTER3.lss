
I2C_QUICK_START_MASTER3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000135c8  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000c8  1001b5c8  1001b5c8  0001b5c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003414  1001b690  1001b690  0001b690  2**3
                  ALLOC
  3 .stack        00000804  1001eaa4  1001eaa4  0001b690  2**0
                  ALLOC
  4 .ARM.exidx    00000008  1001f2a8  1001f2a8  0001f2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.attributes 00000028  00000000  00000000  0001f2b0  2**0
                  CONTENTS, READONLY
  6 .comment      00000124  00000000  00000000  0001f2d8  2**0
                  CONTENTS, READONLY
  7 .debug_info   00033fb4  00000000  00000000  0001f3fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005807  00000000  00000000  000533b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00011c3c  00000000  00000000  00058bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ff8  00000000  00000000  0006a7f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001ad0  00000000  00000000  0006b7eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000254b0  00000000  00000000  0006d2bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00012afe  00000000  00000000  0009276b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001486fc  00000000  00000000  000a5269  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004750  00000000  00000000  001ed968  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008000:	4813      	ldr	r0, [pc, #76]	; (10008050 <app_entry+0x50>)
10008002:	4914      	ldr	r1, [pc, #80]	; (10008054 <app_entry+0x54>)
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008004:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008006:	4288      	cmp	r0, r1
10008008:	d00d      	beq.n	10008026 <app_entry+0x26>
        for (; pDest < &_erelocate;) {
1000800a:	4b13      	ldr	r3, [pc, #76]	; (10008058 <app_entry+0x58>)
1000800c:	4299      	cmp	r1, r3
1000800e:	d20a      	bcs.n	10008026 <app_entry+0x26>
10008010:	43ca      	mvns	r2, r1
10008012:	18d2      	adds	r2, r2, r3
10008014:	2300      	movs	r3, #0
10008016:	0892      	lsrs	r2, r2, #2
10008018:	3201      	adds	r2, #1
1000801a:	0092      	lsls	r2, r2, #2
            *pDest++ = *pSrc++;
1000801c:	58c4      	ldr	r4, [r0, r3]
1000801e:	50cc      	str	r4, [r1, r3]
10008020:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008022:	4293      	cmp	r3, r2
10008024:	d1fa      	bne.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008026:	480d      	ldr	r0, [pc, #52]	; (1000805c <app_entry+0x5c>)
10008028:	4b0d      	ldr	r3, [pc, #52]	; (10008060 <app_entry+0x60>)
1000802a:	4298      	cmp	r0, r3
1000802c:	d20b      	bcs.n	10008046 <app_entry+0x46>
1000802e:	43c1      	mvns	r1, r0
        *pDest++ = 0;
10008030:	2400      	movs	r4, #0
10008032:	18c9      	adds	r1, r1, r3
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008034:	2300      	movs	r3, #0
10008036:	0889      	lsrs	r1, r1, #2
10008038:	3101      	adds	r1, #1
1000803a:	0089      	lsls	r1, r1, #2
        *pDest++ = 0;
1000803c:	18c2      	adds	r2, r0, r3
1000803e:	3304      	adds	r3, #4
10008040:	6014      	str	r4, [r2, #0]
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008042:	428b      	cmp	r3, r1
10008044:	d1fa      	bne.n	1000803c <app_entry+0x3c>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
10008046:	4b07      	ldr	r3, [pc, #28]	; (10008064 <app_entry+0x64>)
10008048:	4798      	blx	r3

    /* Branch to main function */
    main();
1000804a:	4b07      	ldr	r3, [pc, #28]	; (10008068 <app_entry+0x68>)
1000804c:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
1000804e:	bd10      	pop	{r4, pc}
10008050:	1001b5c8 	.word	0x1001b5c8
10008054:	1001b5c8 	.word	0x1001b5c8
10008058:	1001b690 	.word	0x1001b690
1000805c:	1001b690 	.word	0x1001b690
10008060:	1001eaa4 	.word	0x1001eaa4
10008064:	10018251 	.word	0x10018251
10008068:	1000dec1 	.word	0x1000dec1

1000806c <__do_global_dtors_aux>:
1000806c:	b510      	push	{r4, lr}
1000806e:	4c06      	ldr	r4, [pc, #24]	; (10008088 <__do_global_dtors_aux+0x1c>)
10008070:	7823      	ldrb	r3, [r4, #0]
10008072:	2b00      	cmp	r3, #0
10008074:	d107      	bne.n	10008086 <__do_global_dtors_aux+0x1a>
10008076:	4b05      	ldr	r3, [pc, #20]	; (1000808c <__do_global_dtors_aux+0x20>)
10008078:	2b00      	cmp	r3, #0
1000807a:	d002      	beq.n	10008082 <__do_global_dtors_aux+0x16>
1000807c:	4804      	ldr	r0, [pc, #16]	; (10008090 <__do_global_dtors_aux+0x24>)
1000807e:	e000      	b.n	10008082 <__do_global_dtors_aux+0x16>
10008080:	bf00      	nop
10008082:	2301      	movs	r3, #1
10008084:	7023      	strb	r3, [r4, #0]
10008086:	bd10      	pop	{r4, pc}
10008088:	1001b690 	.word	0x1001b690
1000808c:	00000000 	.word	0x00000000
10008090:	1001f2b0 	.word	0x1001f2b0

10008094 <frame_dummy>:
10008094:	4b08      	ldr	r3, [pc, #32]	; (100080b8 <frame_dummy+0x24>)
10008096:	b510      	push	{r4, lr}
10008098:	2b00      	cmp	r3, #0
1000809a:	d003      	beq.n	100080a4 <frame_dummy+0x10>
1000809c:	4907      	ldr	r1, [pc, #28]	; (100080bc <frame_dummy+0x28>)
1000809e:	4808      	ldr	r0, [pc, #32]	; (100080c0 <frame_dummy+0x2c>)
100080a0:	e000      	b.n	100080a4 <frame_dummy+0x10>
100080a2:	bf00      	nop
100080a4:	4807      	ldr	r0, [pc, #28]	; (100080c4 <frame_dummy+0x30>)
100080a6:	6803      	ldr	r3, [r0, #0]
100080a8:	2b00      	cmp	r3, #0
100080aa:	d100      	bne.n	100080ae <frame_dummy+0x1a>
100080ac:	bd10      	pop	{r4, pc}
100080ae:	4b06      	ldr	r3, [pc, #24]	; (100080c8 <frame_dummy+0x34>)
100080b0:	2b00      	cmp	r3, #0
100080b2:	d0fb      	beq.n	100080ac <frame_dummy+0x18>
100080b4:	4798      	blx	r3
100080b6:	e7f9      	b.n	100080ac <frame_dummy+0x18>
100080b8:	00000000 	.word	0x00000000
100080bc:	1001b694 	.word	0x1001b694
100080c0:	1001f2b0 	.word	0x1001f2b0
100080c4:	1001f2b0 	.word	0x1001f2b0
100080c8:	00000000 	.word	0x00000000

100080cc <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
100080cc:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_clock_get_value();
100080ce:	4b09      	ldr	r3, [pc, #36]	; (100080f4 <delay_init+0x28>)
100080d0:	4798      	blx	r3
	cycles_per_ms /= 1000;
100080d2:	21fa      	movs	r1, #250	; 0xfa
100080d4:	4c08      	ldr	r4, [pc, #32]	; (100080f8 <delay_init+0x2c>)
100080d6:	0089      	lsls	r1, r1, #2
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
	cycles_per_ms = system_clock_get_value();
100080d8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
100080da:	47a0      	blx	r4
100080dc:	4b07      	ldr	r3, [pc, #28]	; (100080fc <delay_init+0x30>)
	cycles_per_us = cycles_per_ms / 1000;
100080de:	4908      	ldr	r1, [pc, #32]	; (10008100 <delay_init+0x34>)
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
	cycles_per_ms = system_clock_get_value();
	cycles_per_ms /= 1000;
100080e0:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
100080e2:	0028      	movs	r0, r5
100080e4:	47a0      	blx	r4

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
100080e6:	2205      	movs	r2, #5
 */
void delay_init(void)
{
	cycles_per_ms = system_clock_get_value();
	cycles_per_ms /= 1000;
	cycles_per_us = cycles_per_ms / 1000;
100080e8:	4b06      	ldr	r3, [pc, #24]	; (10008104 <delay_init+0x38>)
100080ea:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
100080ec:	4b06      	ldr	r3, [pc, #24]	; (10008108 <delay_init+0x3c>)
100080ee:	601a      	str	r2, [r3, #0]
}
100080f0:	bd70      	pop	{r4, r5, r6, pc}
100080f2:	46c0      	nop			; (mov r8, r8)
100080f4:	1000d679 	.word	0x1000d679
100080f8:	10014fb5 	.word	0x10014fb5
100080fc:	1001b5cc 	.word	0x1001b5cc
10008100:	000f4240 	.word	0x000f4240
10008104:	1001b5c8 	.word	0x1001b5c8
10008108:	e000e010 	.word	0xe000e010

1000810c <delay_cycles_ms>:
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
1000810c:	2180      	movs	r1, #128	; 0x80
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
1000810e:	b530      	push	{r4, r5, lr}
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
10008110:	2500      	movs	r5, #0
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
10008112:	4b08      	ldr	r3, [pc, #32]	; (10008134 <delay_cycles_ms+0x28>)
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
10008114:	4a08      	ldr	r2, [pc, #32]	; (10008138 <delay_cycles_ms+0x2c>)
10008116:	681c      	ldr	r4, [r3, #0]
        SysTick->VAL = 0;
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008118:	0249      	lsls	r1, r1, #9
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
1000811a:	3801      	subs	r0, #1
1000811c:	d308      	bcc.n	10008130 <delay_cycles_ms+0x24>
 *
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
1000811e:	2c00      	cmp	r4, #0
10008120:	d0fb      	beq.n	1000811a <delay_cycles_ms+0xe>
        SysTick->LOAD = n;
10008122:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
10008124:	6095      	str	r5, [r2, #8]
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008126:	6813      	ldr	r3, [r2, #0]
10008128:	420b      	tst	r3, r1
1000812a:	d0fc      	beq.n	10008126 <delay_cycles_ms+0x1a>
1000812c:	3801      	subs	r0, #1
1000812e:	d2f6      	bcs.n	1000811e <delay_cycles_ms+0x12>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
10008130:	bd30      	pop	{r4, r5, pc}
10008132:	46c0      	nop			; (mov r8, r8)
10008134:	1001b5cc 	.word	0x1001b5cc
10008138:	e000e010 	.word	0xe000e010

1000813c <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000813c:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000813e:	4b0c      	ldr	r3, [pc, #48]	; (10008170 <dualtimer_isr_handler+0x34>)
10008140:	7d1a      	ldrb	r2, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
10008142:	2a00      	cmp	r2, #0
10008144:	d006      	beq.n	10008154 <dualtimer_isr_handler+0x18>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
10008146:	2201      	movs	r2, #1
10008148:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000814a:	4b0a      	ldr	r3, [pc, #40]	; (10008174 <dualtimer_isr_handler+0x38>)
1000814c:	681b      	ldr	r3, [r3, #0]
1000814e:	2b00      	cmp	r3, #0
10008150:	d000      	beq.n	10008154 <dualtimer_isr_handler+0x18>
			dualtimer_callback_timer1();
10008152:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
10008154:	2234      	movs	r2, #52	; 0x34
10008156:	4b06      	ldr	r3, [pc, #24]	; (10008170 <dualtimer_isr_handler+0x34>)
10008158:	5c9a      	ldrb	r2, [r3, r2]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000815a:	2a00      	cmp	r2, #0
1000815c:	d007      	beq.n	1000816e <dualtimer_isr_handler+0x32>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000815e:	2101      	movs	r1, #1
10008160:	222c      	movs	r2, #44	; 0x2c
10008162:	5499      	strb	r1, [r3, r2]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
10008164:	4b04      	ldr	r3, [pc, #16]	; (10008178 <dualtimer_isr_handler+0x3c>)
10008166:	681b      	ldr	r3, [r3, #0]
10008168:	2b00      	cmp	r3, #0
1000816a:	d000      	beq.n	1000816e <dualtimer_isr_handler+0x32>
			dualtimer_callback_timer2();
1000816c:	4798      	blx	r3
	}
}
1000816e:	bd10      	pop	{r4, pc}
10008170:	40001000 	.word	0x40001000
10008174:	1001b6ac 	.word	0x1001b6ac
10008178:	1001b6b0 	.word	0x1001b6b0

1000817c <dualtimer_get_config_defaults>:
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
	config->timer2.timer_enable = true;

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000817c:	2202      	movs	r2, #2
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000817e:	2301      	movs	r3, #1
	config->timer2.timer_enable = true;

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
10008180:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
10008182:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008184:	2200      	movs	r2, #0
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
10008186:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
10008188:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000818a:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000818c:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000818e:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008190:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
10008192:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
10008194:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
10008196:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
10008198:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000819a:	7602      	strb	r2, [r0, #24]
}
1000819c:	4770      	bx	lr
1000819e:	46c0      	nop			; (mov r8, r8)

100081a0 <dualtimer_get_value>:
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1VALUE.reg;
100081a0:	4b03      	ldr	r3, [pc, #12]	; (100081b0 <dualtimer_get_value+0x10>)
 *
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
100081a2:	2800      	cmp	r0, #0
100081a4:	d001      	beq.n	100081aa <dualtimer_get_value+0xa>
		return DUALTIMER0->TIMER1VALUE.reg;
	} else {
		return DUALTIMER0->TIMER2VALUE.reg;
100081a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
	}
}
100081a8:	4770      	bx	lr
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1VALUE.reg;
100081aa:	6858      	ldr	r0, [r3, #4]
100081ac:	e7fc      	b.n	100081a8 <dualtimer_get_value+0x8>
100081ae:	46c0      	nop			; (mov r8, r8)
100081b0:	40001000 	.word	0x40001000

100081b4 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
100081b4:	2800      	cmp	r0, #0
100081b6:	d006      	beq.n	100081c6 <dualtimer_enable+0x12>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
100081b8:	2228      	movs	r2, #40	; 0x28
100081ba:	2380      	movs	r3, #128	; 0x80
100081bc:	4905      	ldr	r1, [pc, #20]	; (100081d4 <dualtimer_enable+0x20>)
100081be:	5c88      	ldrb	r0, [r1, r2]
100081c0:	4303      	orrs	r3, r0
100081c2:	548b      	strb	r3, [r1, r2]
	}
}
100081c4:	4770      	bx	lr
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
100081c6:	2380      	movs	r3, #128	; 0x80
100081c8:	4a02      	ldr	r2, [pc, #8]	; (100081d4 <dualtimer_enable+0x20>)
100081ca:	7a11      	ldrb	r1, [r2, #8]
100081cc:	430b      	orrs	r3, r1
100081ce:	7213      	strb	r3, [r2, #8]
100081d0:	e7f8      	b.n	100081c4 <dualtimer_enable+0x10>
100081d2:	46c0      	nop			; (mov r8, r8)
100081d4:	40001000 	.word	0x40001000

100081d8 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
100081d8:	2800      	cmp	r0, #0
100081da:	d006      	beq.n	100081ea <dualtimer_disable+0x12>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
100081dc:	2228      	movs	r2, #40	; 0x28
100081de:	207f      	movs	r0, #127	; 0x7f
100081e0:	4905      	ldr	r1, [pc, #20]	; (100081f8 <dualtimer_disable+0x20>)
100081e2:	5c8b      	ldrb	r3, [r1, r2]
100081e4:	4003      	ands	r3, r0
100081e6:	548b      	strb	r3, [r1, r2]
	}
}
100081e8:	4770      	bx	lr
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
100081ea:	217f      	movs	r1, #127	; 0x7f
100081ec:	4a02      	ldr	r2, [pc, #8]	; (100081f8 <dualtimer_disable+0x20>)
100081ee:	7a13      	ldrb	r3, [r2, #8]
100081f0:	400b      	ands	r3, r1
100081f2:	7213      	strb	r3, [r2, #8]
100081f4:	e7f8      	b.n	100081e8 <dualtimer_disable+0x10>
100081f6:	46c0      	nop			; (mov r8, r8)
100081f8:	40001000 	.word	0x40001000

100081fc <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
100081fc:	b570      	push	{r4, r5, r6, lr}
100081fe:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
10008200:	4b3a      	ldr	r3, [pc, #232]	; (100082ec <dualtimer_init+0xf0>)
10008202:	2004      	movs	r0, #4
10008204:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
10008206:	7823      	ldrb	r3, [r4, #0]
10008208:	2b00      	cmp	r3, #0
1000820a:	d102      	bne.n	10008212 <dualtimer_init+0x16>
1000820c:	7b23      	ldrb	r3, [r4, #12]
1000820e:	2b00      	cmp	r3, #0
10008210:	d057      	beq.n	100082c2 <dualtimer_init+0xc6>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
10008212:	2320      	movs	r3, #32
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
10008214:	2003      	movs	r0, #3
	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
10008216:	4936      	ldr	r1, [pc, #216]	; (100082f0 <dualtimer_init+0xf4>)
10008218:	68ca      	ldr	r2, [r1, #12]
1000821a:	4313      	orrs	r3, r2
1000821c:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000821e:	7e22      	ldrb	r2, [r4, #24]
10008220:	698b      	ldr	r3, [r1, #24]
10008222:	4002      	ands	r2, r0
10008224:	302d      	adds	r0, #45	; 0x2d
10008226:	0112      	lsls	r2, r2, #4
10008228:	4383      	bics	r3, r0
1000822a:	4313      	orrs	r3, r2
1000822c:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000822e:	7823      	ldrb	r3, [r4, #0]
10008230:	2b00      	cmp	r3, #0
10008232:	d020      	beq.n	10008276 <dualtimer_init+0x7a>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008234:	7862      	ldrb	r2, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
10008236:	2001      	movs	r0, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008238:	2a00      	cmp	r2, #0
1000823a:	d150      	bne.n	100082de <dualtimer_init+0xe2>
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000823c:	2302      	movs	r3, #2
1000823e:	78a1      	ldrb	r1, [r4, #2]
10008240:	78e2      	ldrb	r2, [r4, #3]
10008242:	0049      	lsls	r1, r1, #1
10008244:	4019      	ands	r1, r3
10008246:	0092      	lsls	r2, r2, #2
10008248:	330a      	adds	r3, #10
1000824a:	401a      	ands	r2, r3
1000824c:	000b      	movs	r3, r1
1000824e:	4313      	orrs	r3, r2
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
10008250:	7922      	ldrb	r2, [r4, #4]
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
10008252:	4303      	orrs	r3, r0
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
10008254:	2a00      	cmp	r2, #0
10008256:	d13f      	bne.n	100082d8 <dualtimer_init+0xdc>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
		DUALTIMER0->TIMER1CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10008258:	20c4      	movs	r0, #196	; 0xc4
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000825a:	68a1      	ldr	r1, [r4, #8]
1000825c:	4a25      	ldr	r2, [pc, #148]	; (100082f4 <dualtimer_init+0xf8>)
		DUALTIMER0->TIMER1CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000825e:	4d24      	ldr	r5, [pc, #144]	; (100082f0 <dualtimer_init+0xf4>)
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
10008260:	6011      	str	r1, [r2, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10008262:	2101      	movs	r1, #1
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
		DUALTIMER0->TIMER1CONTROL.reg = regval;
10008264:	7213      	strb	r3, [r2, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10008266:	0040      	lsls	r0, r0, #1
10008268:	5c2e      	ldrb	r6, [r5, r0]
1000826a:	4331      	orrs	r1, r6
1000826c:	5429      	strb	r1, [r5, r0]
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000826e:	2180      	movs	r1, #128	; 0x80
10008270:	7a10      	ldrb	r0, [r2, #8]
10008272:	4301      	orrs	r1, r0
10008274:	7211      	strb	r1, [r2, #8]
10008276:	7b22      	ldrb	r2, [r4, #12]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
10008278:	2a00      	cmp	r2, #0
1000827a:	d022      	beq.n	100082c2 <dualtimer_init+0xc6>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000827c:	7b62      	ldrb	r2, [r4, #13]
1000827e:	2a00      	cmp	r2, #0
10008280:	d124      	bne.n	100082cc <dualtimer_init+0xd0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
10008282:	2301      	movs	r3, #1
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
10008284:	2002      	movs	r0, #2
10008286:	7ba2      	ldrb	r2, [r4, #14]
10008288:	7be1      	ldrb	r1, [r4, #15]
1000828a:	0052      	lsls	r2, r2, #1
1000828c:	4010      	ands	r0, r2
1000828e:	220c      	movs	r2, #12
10008290:	0089      	lsls	r1, r1, #2
10008292:	400a      	ands	r2, r1
10008294:	4302      	orrs	r2, r0
10008296:	4313      	orrs	r3, r2
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
10008298:	7c22      	ldrb	r2, [r4, #16]
1000829a:	2a00      	cmp	r2, #0
1000829c:	d001      	beq.n	100082a2 <dualtimer_init+0xa6>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000829e:	2220      	movs	r2, #32
100082a0:	4313      	orrs	r3, r2
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
100082a2:	6961      	ldr	r1, [r4, #20]
100082a4:	4a13      	ldr	r2, [pc, #76]	; (100082f4 <dualtimer_init+0xf8>)
		DUALTIMER0->TIMER2CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
100082a6:	20c4      	movs	r0, #196	; 0xc4
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
100082a8:	6211      	str	r1, [r2, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
100082aa:	2128      	movs	r1, #40	; 0x28
100082ac:	5453      	strb	r3, [r2, r1]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
100082ae:	2302      	movs	r3, #2
100082b0:	4c0f      	ldr	r4, [pc, #60]	; (100082f0 <dualtimer_init+0xf4>)
100082b2:	0040      	lsls	r0, r0, #1
100082b4:	5c25      	ldrb	r5, [r4, r0]
100082b6:	432b      	orrs	r3, r5
100082b8:	5423      	strb	r3, [r4, r0]
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
100082ba:	2380      	movs	r3, #128	; 0x80
100082bc:	5c50      	ldrb	r0, [r2, r1]
100082be:	4303      	orrs	r3, r0
100082c0:	5453      	strb	r3, [r2, r1]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER2);
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
100082c2:	490d      	ldr	r1, [pc, #52]	; (100082f8 <dualtimer_init+0xfc>)
100082c4:	201e      	movs	r0, #30
100082c6:	4b0d      	ldr	r3, [pc, #52]	; (100082fc <dualtimer_init+0x100>)
100082c8:	4798      	blx	r3
}
100082ca:	bd70      	pop	{r4, r5, r6, pc}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
100082cc:	2a01      	cmp	r2, #1
100082ce:	d00b      	beq.n	100082e8 <dualtimer_init+0xec>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
100082d0:	2a02      	cmp	r2, #2
100082d2:	d1d7      	bne.n	10008284 <dualtimer_init+0x88>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
100082d4:	2340      	movs	r3, #64	; 0x40
100082d6:	e7d5      	b.n	10008284 <dualtimer_init+0x88>
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
100082d8:	2220      	movs	r2, #32
100082da:	4313      	orrs	r3, r2
100082dc:	e7bc      	b.n	10008258 <dualtimer_init+0x5c>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
100082de:	3a02      	subs	r2, #2
100082e0:	4253      	negs	r3, r2
100082e2:	4153      	adcs	r3, r2
100082e4:	0198      	lsls	r0, r3, #6
100082e6:	e7a9      	b.n	1000823c <dualtimer_init+0x40>
	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
100082e8:	2300      	movs	r3, #0
100082ea:	e7cb      	b.n	10008284 <dualtimer_init+0x88>
100082ec:	1000d98d 	.word	0x1000d98d
100082f0:	4000b000 	.word	0x4000b000
100082f4:	40001000 	.word	0x40001000
100082f8:	1000813d 	.word	0x1000813d
100082fc:	1000dda5 	.word	0x1000dda5

10008300 <i2c_write>:
 */
#if defined EMPL_TARGET_SAMB11
#include "include.h"
#define I2C_TIMEOUT 1000
static int i2c_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
10008300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
10008302:	4d11      	ldr	r5, [pc, #68]	; (10008348 <i2c_write+0x48>)
10008304:	8028      	strh	r0, [r5, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
10008306:	1c50      	adds	r0, r2, #1
10008308:	b2c0      	uxtb	r0, r0
1000830a:	8068      	strh	r0, [r5, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000830c:	6868      	ldr	r0, [r5, #4]
1000830e:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
10008310:	2a00      	cmp	r2, #0
10008312:	d008      	beq.n	10008326 <i2c_write+0x26>
10008314:	2100      	movs	r1, #0
10008316:	1c48      	adds	r0, r1, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
10008318:	686c      	ldr	r4, [r5, #4]
1000831a:	5c59      	ldrb	r1, [r3, r1]
1000831c:	5421      	strb	r1, [r4, r0]
1000831e:	0001      	movs	r1, r0
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
10008320:	b2c0      	uxtb	r0, r0
10008322:	4290      	cmp	r0, r2
10008324:	d3f7      	bcc.n	10008316 <i2c_write+0x16>
10008326:	4c09      	ldr	r4, [pc, #36]	; (1000834c <i2c_write+0x4c>)
10008328:	4f09      	ldr	r7, [pc, #36]	; (10008350 <i2c_write+0x50>)
1000832a:	4e0a      	ldr	r6, [pc, #40]	; (10008354 <i2c_write+0x54>)
1000832c:	e003      	b.n	10008336 <i2c_write+0x36>
1000832e:	3c01      	subs	r4, #1
10008330:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
10008332:	2c00      	cmp	r4, #0
10008334:	d005      	beq.n	10008342 <i2c_write+0x42>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008336:	0029      	movs	r1, r5
10008338:	0038      	movs	r0, r7
1000833a:	47b0      	blx	r6
1000833c:	2800      	cmp	r0, #0
1000833e:	d1f6      	bne.n	1000832e <i2c_write+0x2e>
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    return 0;
}
10008340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
10008342:	2001      	movs	r0, #1
10008344:	4240      	negs	r0, r0
10008346:	e7fb      	b.n	10008340 <i2c_write+0x40>
10008348:	1001d510 	.word	0x1001d510
1000834c:	000003e9 	.word	0x000003e9
10008350:	1001d508 	.word	0x1001d508
10008354:	1000d5a5 	.word	0x1000d5a5

10008358 <i2c_read>:
        }
    }
    return 0;
}
static int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
10008358:	b5f0      	push	{r4, r5, r6, r7, lr}
1000835a:	4645      	mov	r5, r8
1000835c:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000835e:	4b20      	ldr	r3, [pc, #128]	; (100083e0 <i2c_read+0x88>)
        }
    }
    return 0;
}
static int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
10008360:	4657      	mov	r7, sl
10008362:	464e      	mov	r6, r9
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
10008364:	4699      	mov	r9, r3
10008366:	b280      	uxth	r0, r0
        }
    }
    return 0;
}
static int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
10008368:	b4e0      	push	{r5, r6, r7}
1000836a:	4692      	mov	sl, r2
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000836c:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
1000836e:	464a      	mov	r2, r9
10008370:	2301      	movs	r3, #1
10008372:	8053      	strh	r3, [r2, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10008374:	6853      	ldr	r3, [r2, #4]
    i2c_rpacket.address = (uint8_t)slave_addr;
10008376:	4e1b      	ldr	r6, [pc, #108]	; (100083e4 <i2c_read+0x8c>)
{
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = 1;
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10008378:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
1000837a:	4653      	mov	r3, sl
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = 1;
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
1000837c:	8030      	strh	r0, [r6, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
1000837e:	8073      	strh	r3, [r6, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008380:	4c19      	ldr	r4, [pc, #100]	; (100083e8 <i2c_read+0x90>)
10008382:	4d1a      	ldr	r5, [pc, #104]	; (100083ec <i2c_read+0x94>)
10008384:	4f1a      	ldr	r7, [pc, #104]	; (100083f0 <i2c_read+0x98>)
10008386:	e003      	b.n	10008390 <i2c_read+0x38>
10008388:	3c01      	subs	r4, #1
1000838a:	b2a4      	uxth	r4, r4
        if(timeout++ >= I2C_TIMEOUT) {
1000838c:	2c00      	cmp	r4, #0
1000838e:	d023      	beq.n	100083d8 <i2c_read+0x80>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008390:	4649      	mov	r1, r9
10008392:	0028      	movs	r0, r5
10008394:	47b8      	blx	r7
10008396:	2800      	cmp	r0, #0
10008398:	d1f6      	bne.n	10008388 <i2c_read+0x30>
1000839a:	4b16      	ldr	r3, [pc, #88]	; (100083f4 <i2c_read+0x9c>)
1000839c:	4c12      	ldr	r4, [pc, #72]	; (100083e8 <i2c_read+0x90>)
1000839e:	4699      	mov	r9, r3
100083a0:	e003      	b.n	100083aa <i2c_read+0x52>
100083a2:	3c01      	subs	r4, #1
100083a4:	b2a4      	uxth	r4, r4
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
100083a6:	2c00      	cmp	r4, #0
100083a8:	d016      	beq.n	100083d8 <i2c_read+0x80>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
100083aa:	0031      	movs	r1, r6
100083ac:	0028      	movs	r0, r5
100083ae:	47c8      	blx	r9
100083b0:	2800      	cmp	r0, #0
100083b2:	d1f6      	bne.n	100083a2 <i2c_read+0x4a>
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
100083b4:	4652      	mov	r2, sl
100083b6:	2300      	movs	r3, #0
100083b8:	2a00      	cmp	r2, #0
100083ba:	d007      	beq.n	100083cc <i2c_read+0x74>
        data[i] = i2c_rpacket.data[i];
100083bc:	4641      	mov	r1, r8
100083be:	6872      	ldr	r2, [r6, #4]
100083c0:	5cd2      	ldrb	r2, [r2, r3]
100083c2:	54ca      	strb	r2, [r1, r3]
100083c4:	3301      	adds	r3, #1
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
100083c6:	b2da      	uxtb	r2, r3
100083c8:	4592      	cmp	sl, r2
100083ca:	d8f7      	bhi.n	100083bc <i2c_read+0x64>
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
100083cc:	2000      	movs	r0, #0
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
}
100083ce:	bc1c      	pop	{r2, r3, r4}
100083d0:	4690      	mov	r8, r2
100083d2:	4699      	mov	r9, r3
100083d4:	46a2      	mov	sl, r4
100083d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
100083d8:	2001      	movs	r0, #1
100083da:	4240      	negs	r0, r0
100083dc:	e7f7      	b.n	100083ce <i2c_read+0x76>
100083de:	46c0      	nop			; (mov r8, r8)
100083e0:	1001d510 	.word	0x1001d510
100083e4:	1001d500 	.word	0x1001d500
100083e8:	000003e9 	.word	0x000003e9
100083ec:	1001d508 	.word	0x1001d508
100083f0:	1000d5d5 	.word	0x1000d5d5
100083f4:	1000d585 	.word	0x1000d585

100083f8 <set_int_enable>:
 */
static int set_int_enable(unsigned char enable)
{
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
100083f8:	2324      	movs	r3, #36	; 0x24
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
100083fa:	b570      	push	{r4, r5, r6, lr}
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
100083fc:	4c17      	ldr	r4, [pc, #92]	; (1000845c <set_int_enable+0x64>)
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
100083fe:	b082      	sub	sp, #8
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
10008400:	5ce3      	ldrb	r3, [r4, r3]
10008402:	2b00      	cmp	r3, #0
10008404:	d012      	beq.n	1000842c <set_int_enable+0x34>
        if (enable)
            tmp = BIT_DMP_INT_EN;
10008406:	466b      	mov	r3, sp
10008408:	1ddd      	adds	r5, r3, #7
static int set_int_enable(unsigned char enable)
{
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
        if (enable)
1000840a:	2800      	cmp	r0, #0
1000840c:	d117      	bne.n	1000843e <set_int_enable+0x46>
            tmp = BIT_DMP_INT_EN;
        else
            tmp = 0x00;
1000840e:	7028      	strb	r0, [r5, #0]
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
10008410:	6823      	ldr	r3, [r4, #0]
10008412:	2201      	movs	r2, #1
10008414:	7c59      	ldrb	r1, [r3, #17]
10008416:	6863      	ldr	r3, [r4, #4]
10008418:	4e11      	ldr	r6, [pc, #68]	; (10008460 <set_int_enable+0x68>)
1000841a:	7818      	ldrb	r0, [r3, #0]
1000841c:	002b      	movs	r3, r5
1000841e:	47b0      	blx	r6
10008420:	2800      	cmp	r0, #0
10008422:	d118      	bne.n	10008456 <set_int_enable+0x5e>
            return -1;
        st.chip_cfg.int_enable = tmp;
10008424:	782b      	ldrb	r3, [r5, #0]
10008426:	7463      	strb	r3, [r4, #17]
    }
    return 0;
}
10008428:	b002      	add	sp, #8
1000842a:	bd70      	pop	{r4, r5, r6, pc}
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
1000842c:	7aa3      	ldrb	r3, [r4, #10]
1000842e:	2b00      	cmp	r3, #0
10008430:	d011      	beq.n	10008456 <set_int_enable+0x5e>
            return -1;
        if (enable && st.chip_cfg.int_enable)
10008432:	2800      	cmp	r0, #0
10008434:	d106      	bne.n	10008444 <set_int_enable+0x4c>
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
        else
            tmp = 0x00;
10008436:	466b      	mov	r3, sp
10008438:	1ddd      	adds	r5, r3, #7
1000843a:	71d8      	strb	r0, [r3, #7]
1000843c:	e7e8      	b.n	10008410 <set_int_enable+0x18>
{
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
        if (enable)
            tmp = BIT_DMP_INT_EN;
1000843e:	2302      	movs	r3, #2
10008440:	702b      	strb	r3, [r5, #0]
10008442:	e7e5      	b.n	10008410 <set_int_enable+0x18>
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
10008444:	7c63      	ldrb	r3, [r4, #17]
            return 0;
10008446:	2000      	movs	r0, #0
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
10008448:	2b00      	cmp	r3, #0
1000844a:	d1ed      	bne.n	10008428 <set_int_enable+0x30>
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
1000844c:	466b      	mov	r3, sp
1000844e:	1ddd      	adds	r5, r3, #7
10008450:	2301      	movs	r3, #1
10008452:	702b      	strb	r3, [r5, #0]
10008454:	e7dc      	b.n	10008410 <set_int_enable+0x18>
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
10008456:	2001      	movs	r0, #1
10008458:	4240      	negs	r0, r0
1000845a:	e7e5      	b.n	10008428 <set_int_enable+0x30>
1000845c:	1001b5d0 	.word	0x1001b5d0
10008460:	10008301 	.word	0x10008301

10008464 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
10008464:	b570      	push	{r4, r5, r6, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008466:	4c54      	ldr	r4, [pc, #336]	; (100085b8 <mpu_reset_fifo+0x154>)
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
10008468:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000846a:	7aa3      	ldrb	r3, [r4, #10]
1000846c:	2b00      	cmp	r3, #0
1000846e:	d100      	bne.n	10008472 <mpu_reset_fifo+0xe>
10008470:	e08f      	b.n	10008592 <mpu_reset_fifo+0x12e>
        return -1;

    data = 0;
10008472:	466b      	mov	r3, sp
10008474:	1ddd      	adds	r5, r3, #7
10008476:	2300      	movs	r3, #0
10008478:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1000847a:	6823      	ldr	r3, [r4, #0]
1000847c:	2201      	movs	r2, #1
1000847e:	7c59      	ldrb	r1, [r3, #17]
10008480:	6863      	ldr	r3, [r4, #4]
10008482:	4e4e      	ldr	r6, [pc, #312]	; (100085bc <mpu_reset_fifo+0x158>)
10008484:	7818      	ldrb	r0, [r3, #0]
10008486:	002b      	movs	r3, r5
10008488:	47b0      	blx	r6
1000848a:	2800      	cmp	r0, #0
1000848c:	d000      	beq.n	10008490 <mpu_reset_fifo+0x2c>
1000848e:	e080      	b.n	10008592 <mpu_reset_fifo+0x12e>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
10008490:	6823      	ldr	r3, [r4, #0]
10008492:	2201      	movs	r2, #1
10008494:	7959      	ldrb	r1, [r3, #5]
10008496:	6863      	ldr	r3, [r4, #4]
10008498:	7818      	ldrb	r0, [r3, #0]
1000849a:	002b      	movs	r3, r5
1000849c:	47b0      	blx	r6
1000849e:	2800      	cmp	r0, #0
100084a0:	d177      	bne.n	10008592 <mpu_reset_fifo+0x12e>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100084a2:	6823      	ldr	r3, [r4, #0]
100084a4:	2201      	movs	r2, #1
100084a6:	7919      	ldrb	r1, [r3, #4]
100084a8:	6863      	ldr	r3, [r4, #4]
100084aa:	7818      	ldrb	r0, [r3, #0]
100084ac:	002b      	movs	r3, r5
100084ae:	47b0      	blx	r6
100084b0:	2800      	cmp	r0, #0
100084b2:	d16e      	bne.n	10008592 <mpu_reset_fifo+0x12e>
        return -1;

    if (st.chip_cfg.dmp_on) {
100084b4:	2324      	movs	r3, #36	; 0x24
100084b6:	5ce3      	ldrb	r3, [r4, r3]
100084b8:	2b00      	cmp	r3, #0
100084ba:	d034      	beq.n	10008526 <mpu_reset_fifo+0xc2>
        data = BIT_FIFO_RST | BIT_DMP_RST;
100084bc:	230c      	movs	r3, #12
100084be:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100084c0:	6823      	ldr	r3, [r4, #0]
100084c2:	2201      	movs	r2, #1
100084c4:	7919      	ldrb	r1, [r3, #4]
100084c6:	6863      	ldr	r3, [r4, #4]
100084c8:	7818      	ldrb	r0, [r3, #0]
100084ca:	002b      	movs	r3, r5
100084cc:	47b0      	blx	r6
100084ce:	2800      	cmp	r0, #0
100084d0:	d15f      	bne.n	10008592 <mpu_reset_fifo+0x12e>
            return -1;
        delay_ms(50);
100084d2:	4b3b      	ldr	r3, [pc, #236]	; (100085c0 <mpu_reset_fifo+0x15c>)
100084d4:	3032      	adds	r0, #50	; 0x32
100084d6:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
100084d8:	23c0      	movs	r3, #192	; 0xc0
100084da:	702b      	strb	r3, [r5, #0]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
100084dc:	7aa3      	ldrb	r3, [r4, #10]
100084de:	07db      	lsls	r3, r3, #31
100084e0:	d461      	bmi.n	100085a6 <mpu_reset_fifo+0x142>
            data |= BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100084e2:	6823      	ldr	r3, [r4, #0]
100084e4:	2201      	movs	r2, #1
100084e6:	7919      	ldrb	r1, [r3, #4]
100084e8:	6863      	ldr	r3, [r4, #4]
100084ea:	7818      	ldrb	r0, [r3, #0]
100084ec:	002b      	movs	r3, r5
100084ee:	47b0      	blx	r6
100084f0:	2800      	cmp	r0, #0
100084f2:	d14e      	bne.n	10008592 <mpu_reset_fifo+0x12e>
            return -1;
        if (st.chip_cfg.int_enable)
100084f4:	7c63      	ldrb	r3, [r4, #17]
100084f6:	2b00      	cmp	r3, #0
100084f8:	d158      	bne.n	100085ac <mpu_reset_fifo+0x148>
            data = BIT_DMP_INT_EN;
        else
            data = 0;
100084fa:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
100084fc:	6823      	ldr	r3, [r4, #0]
100084fe:	2201      	movs	r2, #1
10008500:	7c59      	ldrb	r1, [r3, #17]
10008502:	6863      	ldr	r3, [r4, #4]
10008504:	7818      	ldrb	r0, [r3, #0]
10008506:	002b      	movs	r3, r5
10008508:	47b0      	blx	r6
1000850a:	2800      	cmp	r0, #0
1000850c:	d141      	bne.n	10008592 <mpu_reset_fifo+0x12e>
            return -1;
        data = 0;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
1000850e:	6823      	ldr	r3, [r4, #0]
            data = BIT_DMP_INT_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
        data = 0;
10008510:	7028      	strb	r0, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
10008512:	7959      	ldrb	r1, [r3, #5]
10008514:	6863      	ldr	r3, [r4, #4]
10008516:	2201      	movs	r2, #1
10008518:	7818      	ldrb	r0, [r3, #0]
1000851a:	002b      	movs	r3, r5
1000851c:	47b0      	blx	r6
1000851e:	1e43      	subs	r3, r0, #1
10008520:	4198      	sbcs	r0, r3
10008522:	4240      	negs	r0, r0
10008524:	e037      	b.n	10008596 <mpu_reset_fifo+0x132>
            return -1;
    } else {
        data = BIT_FIFO_RST;
10008526:	2304      	movs	r3, #4
10008528:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000852a:	6823      	ldr	r3, [r4, #0]
1000852c:	2201      	movs	r2, #1
1000852e:	7919      	ldrb	r1, [r3, #4]
10008530:	6863      	ldr	r3, [r4, #4]
10008532:	7818      	ldrb	r0, [r3, #0]
10008534:	002b      	movs	r3, r5
10008536:	47b0      	blx	r6
10008538:	2800      	cmp	r0, #0
1000853a:	d12a      	bne.n	10008592 <mpu_reset_fifo+0x12e>
            return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
1000853c:	7ca3      	ldrb	r3, [r4, #18]
1000853e:	2b00      	cmp	r3, #0
10008540:	d02b      	beq.n	1000859a <mpu_reset_fifo+0x136>
            data = BIT_FIFO_EN;
10008542:	2340      	movs	r3, #64	; 0x40
10008544:	702b      	strb	r3, [r5, #0]
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008546:	6823      	ldr	r3, [r4, #0]
10008548:	2201      	movs	r2, #1
1000854a:	7919      	ldrb	r1, [r3, #4]
1000854c:	6863      	ldr	r3, [r4, #4]
1000854e:	7818      	ldrb	r0, [r3, #0]
10008550:	002b      	movs	r3, r5
10008552:	47b0      	blx	r6
10008554:	2800      	cmp	r0, #0
10008556:	d11c      	bne.n	10008592 <mpu_reset_fifo+0x12e>
            return -1;
        delay_ms(50);
10008558:	4b19      	ldr	r3, [pc, #100]	; (100085c0 <mpu_reset_fifo+0x15c>)
1000855a:	3032      	adds	r0, #50	; 0x32
1000855c:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
1000855e:	7c63      	ldrb	r3, [r4, #17]
10008560:	2b00      	cmp	r3, #0
10008562:	d026      	beq.n	100085b2 <mpu_reset_fifo+0x14e>
            data = BIT_DATA_RDY_EN;
10008564:	2301      	movs	r3, #1
10008566:	702b      	strb	r3, [r5, #0]
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
10008568:	6823      	ldr	r3, [r4, #0]
1000856a:	2201      	movs	r2, #1
1000856c:	7c59      	ldrb	r1, [r3, #17]
1000856e:	6863      	ldr	r3, [r4, #4]
10008570:	7818      	ldrb	r0, [r3, #0]
10008572:	002b      	movs	r3, r5
10008574:	47b0      	blx	r6
10008576:	2800      	cmp	r0, #0
10008578:	d10b      	bne.n	10008592 <mpu_reset_fifo+0x12e>
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
1000857a:	0023      	movs	r3, r4
1000857c:	6822      	ldr	r2, [r4, #0]
1000857e:	3310      	adds	r3, #16
10008580:	7951      	ldrb	r1, [r2, #5]
10008582:	6862      	ldr	r2, [r4, #4]
10008584:	7810      	ldrb	r0, [r2, #0]
10008586:	2201      	movs	r2, #1
10008588:	47b0      	blx	r6
1000858a:	1e43      	subs	r3, r0, #1
1000858c:	4198      	sbcs	r0, r3
1000858e:	4240      	negs	r0, r0
10008590:	e001      	b.n	10008596 <mpu_reset_fifo+0x132>
int mpu_reset_fifo(void)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008592:	2001      	movs	r0, #1
10008594:	4240      	negs	r0, r0
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
10008596:	b002      	add	sp, #8
10008598:	bd70      	pop	{r4, r5, r6, pc}
            return -1;
    } else {
        data = BIT_FIFO_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
1000859a:	7aa3      	ldrb	r3, [r4, #10]
1000859c:	07db      	lsls	r3, r3, #31
1000859e:	d5d0      	bpl.n	10008542 <mpu_reset_fifo+0xde>
            data = BIT_FIFO_EN;
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
100085a0:	2360      	movs	r3, #96	; 0x60
100085a2:	702b      	strb	r3, [r5, #0]
100085a4:	e7cf      	b.n	10008546 <mpu_reset_fifo+0xe2>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
        delay_ms(50);
        data = BIT_DMP_EN | BIT_FIFO_EN;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            data |= BIT_AUX_IF_EN;
100085a6:	23e0      	movs	r3, #224	; 0xe0
100085a8:	702b      	strb	r3, [r5, #0]
100085aa:	e79a      	b.n	100084e2 <mpu_reset_fifo+0x7e>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
        if (st.chip_cfg.int_enable)
            data = BIT_DMP_INT_EN;
100085ac:	2302      	movs	r3, #2
100085ae:	702b      	strb	r3, [r5, #0]
100085b0:	e7a4      	b.n	100084fc <mpu_reset_fifo+0x98>
            return -1;
        delay_ms(50);
        if (st.chip_cfg.int_enable)
            data = BIT_DATA_RDY_EN;
        else
            data = 0;
100085b2:	702b      	strb	r3, [r5, #0]
100085b4:	e7d8      	b.n	10008568 <mpu_reset_fifo+0x104>
100085b6:	46c0      	nop			; (mov r8, r8)
100085b8:	1001b5d0 	.word	0x1001b5d0
100085bc:	10008301 	.word	0x10008301
100085c0:	1000810d 	.word	0x1000810d

100085c4 <mpu_get_gyro_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
    switch (st.chip_cfg.gyro_fsr) {
100085c4:	4b0e      	ldr	r3, [pc, #56]	; (10008600 <mpu_get_gyro_fsr+0x3c>)
100085c6:	7a1b      	ldrb	r3, [r3, #8]
100085c8:	2b01      	cmp	r3, #1
100085ca:	d014      	beq.n	100085f6 <mpu_get_gyro_fsr+0x32>
100085cc:	2b00      	cmp	r3, #0
100085ce:	d00f      	beq.n	100085f0 <mpu_get_gyro_fsr+0x2c>
100085d0:	2b02      	cmp	r3, #2
100085d2:	d006      	beq.n	100085e2 <mpu_get_gyro_fsr+0x1e>
100085d4:	2b03      	cmp	r3, #3
100085d6:	d108      	bne.n	100085ea <mpu_get_gyro_fsr+0x26>
        break;
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
        break;
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
100085d8:	23fa      	movs	r3, #250	; 0xfa
100085da:	00db      	lsls	r3, r3, #3
100085dc:	8003      	strh	r3, [r0, #0]
    default:
        fsr[0] = 0;
        break;
    }
    return 0;
}
100085de:	2000      	movs	r0, #0
100085e0:	4770      	bx	lr
        break;
    case INV_FSR_500DPS:
        fsr[0] = 500;
        break;
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
100085e2:	23fa      	movs	r3, #250	; 0xfa
100085e4:	009b      	lsls	r3, r3, #2
100085e6:	8003      	strh	r3, [r0, #0]
        break;
100085e8:	e7f9      	b.n	100085de <mpu_get_gyro_fsr+0x1a>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
        break;
    default:
        fsr[0] = 0;
100085ea:	2300      	movs	r3, #0
100085ec:	8003      	strh	r3, [r0, #0]
        break;
100085ee:	e7f6      	b.n	100085de <mpu_get_gyro_fsr+0x1a>
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
    switch (st.chip_cfg.gyro_fsr) {
    case INV_FSR_250DPS:
        fsr[0] = 250;
100085f0:	23fa      	movs	r3, #250	; 0xfa
100085f2:	8003      	strh	r3, [r0, #0]
        break;
100085f4:	e7f3      	b.n	100085de <mpu_get_gyro_fsr+0x1a>
    case INV_FSR_500DPS:
        fsr[0] = 500;
100085f6:	23fa      	movs	r3, #250	; 0xfa
100085f8:	005b      	lsls	r3, r3, #1
100085fa:	8003      	strh	r3, [r0, #0]
        break;
100085fc:	e7ef      	b.n	100085de <mpu_get_gyro_fsr+0x1a>
100085fe:	46c0      	nop			; (mov r8, r8)
10008600:	1001b5d0 	.word	0x1001b5d0

10008604 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
10008604:	b570      	push	{r4, r5, r6, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008606:	4c20      	ldr	r4, [pc, #128]	; (10008688 <mpu_set_gyro_fsr+0x84>)
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
10008608:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000860a:	7aa3      	ldrb	r3, [r4, #10]
1000860c:	2b00      	cmp	r3, #0
1000860e:	d02a      	beq.n	10008666 <mpu_set_gyro_fsr+0x62>
        return -1;

    switch (fsr) {
10008610:	23fa      	movs	r3, #250	; 0xfa
10008612:	005b      	lsls	r3, r3, #1
10008614:	4298      	cmp	r0, r3
10008616:	d030      	beq.n	1000867a <mpu_set_gyro_fsr+0x76>
10008618:	d90d      	bls.n	10008636 <mpu_set_gyro_fsr+0x32>
1000861a:	23fa      	movs	r3, #250	; 0xfa
1000861c:	009b      	lsls	r3, r3, #2
1000861e:	4298      	cmp	r0, r3
10008620:	d025      	beq.n	1000866e <mpu_set_gyro_fsr+0x6a>
10008622:	23fa      	movs	r3, #250	; 0xfa
10008624:	00db      	lsls	r3, r3, #3
10008626:	4298      	cmp	r0, r3
10008628:	d11d      	bne.n	10008666 <mpu_set_gyro_fsr+0x62>
        break;
    case 1000:
        data = INV_FSR_1000DPS << 3;
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
1000862a:	466b      	mov	r3, sp
1000862c:	1ddd      	adds	r5, r3, #7
1000862e:	2318      	movs	r3, #24
10008630:	702b      	strb	r3, [r5, #0]
        break;
10008632:	3b15      	subs	r3, #21
10008634:	e005      	b.n	10008642 <mpu_set_gyro_fsr+0x3e>
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;

    switch (fsr) {
10008636:	28fa      	cmp	r0, #250	; 0xfa
10008638:	d115      	bne.n	10008666 <mpu_set_gyro_fsr+0x62>
    case 250:
        data = INV_FSR_250DPS << 3;
1000863a:	466b      	mov	r3, sp
1000863c:	1ddd      	adds	r5, r3, #7
1000863e:	2300      	movs	r3, #0
10008640:	702b      	strb	r3, [r5, #0]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008642:	7a22      	ldrb	r2, [r4, #8]
        return 0;
10008644:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008646:	429a      	cmp	r2, r3
10008648:	d00f      	beq.n	1000866a <mpu_set_gyro_fsr+0x66>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
1000864a:	6823      	ldr	r3, [r4, #0]
1000864c:	2201      	movs	r2, #1
1000864e:	7999      	ldrb	r1, [r3, #6]
10008650:	6863      	ldr	r3, [r4, #4]
10008652:	4e0e      	ldr	r6, [pc, #56]	; (1000868c <mpu_set_gyro_fsr+0x88>)
10008654:	7818      	ldrb	r0, [r3, #0]
10008656:	002b      	movs	r3, r5
10008658:	47b0      	blx	r6
1000865a:	2800      	cmp	r0, #0
1000865c:	d103      	bne.n	10008666 <mpu_set_gyro_fsr+0x62>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
1000865e:	782b      	ldrb	r3, [r5, #0]
10008660:	08db      	lsrs	r3, r3, #3
10008662:	7223      	strb	r3, [r4, #8]
    return 0;
10008664:	e001      	b.n	1000866a <mpu_set_gyro_fsr+0x66>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
10008666:	2001      	movs	r0, #1
10008668:	4240      	negs	r0, r0
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
    return 0;
}
1000866a:	b002      	add	sp, #8
1000866c:	bd70      	pop	{r4, r5, r6, pc}
        break;
    case 500:
        data = INV_FSR_500DPS << 3;
        break;
    case 1000:
        data = INV_FSR_1000DPS << 3;
1000866e:	466b      	mov	r3, sp
10008670:	1ddd      	adds	r5, r3, #7
10008672:	2310      	movs	r3, #16
10008674:	702b      	strb	r3, [r5, #0]
        break;
10008676:	3b0e      	subs	r3, #14
10008678:	e7e3      	b.n	10008642 <mpu_set_gyro_fsr+0x3e>
    switch (fsr) {
    case 250:
        data = INV_FSR_250DPS << 3;
        break;
    case 500:
        data = INV_FSR_500DPS << 3;
1000867a:	466b      	mov	r3, sp
1000867c:	1ddd      	adds	r5, r3, #7
1000867e:	2308      	movs	r3, #8
10008680:	702b      	strb	r3, [r5, #0]
        break;
10008682:	3b07      	subs	r3, #7
10008684:	e7dd      	b.n	10008642 <mpu_set_gyro_fsr+0x3e>
10008686:	46c0      	nop			; (mov r8, r8)
10008688:	1001b5d0 	.word	0x1001b5d0
1000868c:	10008301 	.word	0x10008301

10008690 <mpu_get_accel_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
10008690:	4a10      	ldr	r2, [pc, #64]	; (100086d4 <mpu_get_accel_fsr+0x44>)
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
10008692:	0001      	movs	r1, r0
    switch (st.chip_cfg.accel_fsr) {
10008694:	7a53      	ldrb	r3, [r2, #9]
10008696:	2b01      	cmp	r3, #1
10008698:	d018      	beq.n	100086cc <mpu_get_accel_fsr+0x3c>
1000869a:	2b00      	cmp	r3, #0
1000869c:	d013      	beq.n	100086c6 <mpu_get_accel_fsr+0x36>
1000869e:	2b02      	cmp	r3, #2
100086a0:	d00b      	beq.n	100086ba <mpu_get_accel_fsr+0x2a>
100086a2:	2b03      	cmp	r3, #3
100086a4:	d10c      	bne.n	100086c0 <mpu_get_accel_fsr+0x30>
        break;
    case INV_FSR_8G:
        fsr[0] = 8;
        break;
    case INV_FSR_16G:
        fsr[0] = 16;
100086a6:	2310      	movs	r3, #16
100086a8:	7003      	strb	r3, [r0, #0]
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
100086aa:	7cd3      	ldrb	r3, [r2, #19]
        fsr[0] <<= 1;
    return 0;
100086ac:	2000      	movs	r0, #0
        fsr[0] = 16;
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
100086ae:	2b00      	cmp	r3, #0
100086b0:	d002      	beq.n	100086b8 <mpu_get_accel_fsr+0x28>
        fsr[0] <<= 1;
100086b2:	780b      	ldrb	r3, [r1, #0]
100086b4:	005b      	lsls	r3, r3, #1
100086b6:	700b      	strb	r3, [r1, #0]
    return 0;
}
100086b8:	4770      	bx	lr
        break;
    case INV_FSR_4G:
        fsr[0] = 4;
        break;
    case INV_FSR_8G:
        fsr[0] = 8;
100086ba:	2308      	movs	r3, #8
100086bc:	7003      	strb	r3, [r0, #0]
        break;
100086be:	e7f4      	b.n	100086aa <mpu_get_accel_fsr+0x1a>
    case INV_FSR_16G:
        fsr[0] = 16;
        break;
    default:
        return -1;
100086c0:	2001      	movs	r0, #1
100086c2:	4240      	negs	r0, r0
100086c4:	e7f8      	b.n	100086b8 <mpu_get_accel_fsr+0x28>
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
    case INV_FSR_2G:
        fsr[0] = 2;
100086c6:	2302      	movs	r3, #2
100086c8:	7003      	strb	r3, [r0, #0]
        break;
100086ca:	e7ee      	b.n	100086aa <mpu_get_accel_fsr+0x1a>
    case INV_FSR_4G:
        fsr[0] = 4;
100086cc:	2304      	movs	r3, #4
100086ce:	7003      	strb	r3, [r0, #0]
        break;
100086d0:	e7eb      	b.n	100086aa <mpu_get_accel_fsr+0x1a>
100086d2:	46c0      	nop			; (mov r8, r8)
100086d4:	1001b5d0 	.word	0x1001b5d0

100086d8 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
100086d8:	b570      	push	{r4, r5, r6, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100086da:	4c1d      	ldr	r4, [pc, #116]	; (10008750 <mpu_set_accel_fsr+0x78>)
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
100086dc:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100086de:	7aa3      	ldrb	r3, [r4, #10]
100086e0:	2b00      	cmp	r3, #0
100086e2:	d024      	beq.n	1000872e <mpu_set_accel_fsr+0x56>
        return -1;

    switch (fsr) {
100086e4:	2804      	cmp	r0, #4
100086e6:	d02c      	beq.n	10008742 <mpu_set_accel_fsr+0x6a>
100086e8:	d909      	bls.n	100086fe <mpu_set_accel_fsr+0x26>
100086ea:	2808      	cmp	r0, #8
100086ec:	d023      	beq.n	10008736 <mpu_set_accel_fsr+0x5e>
100086ee:	2810      	cmp	r0, #16
100086f0:	d11d      	bne.n	1000872e <mpu_set_accel_fsr+0x56>
        break;
    case 8:
        data = INV_FSR_8G << 3;
        break;
    case 16:
        data = INV_FSR_16G << 3;
100086f2:	466b      	mov	r3, sp
100086f4:	1ddd      	adds	r5, r3, #7
100086f6:	2318      	movs	r3, #24
100086f8:	702b      	strb	r3, [r5, #0]
        break;
100086fa:	3b15      	subs	r3, #21
100086fc:	e005      	b.n	1000870a <mpu_set_accel_fsr+0x32>
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;

    switch (fsr) {
100086fe:	2802      	cmp	r0, #2
10008700:	d115      	bne.n	1000872e <mpu_set_accel_fsr+0x56>
    case 2:
        data = INV_FSR_2G << 3;
10008702:	466b      	mov	r3, sp
10008704:	1ddd      	adds	r5, r3, #7
10008706:	2300      	movs	r3, #0
10008708:	702b      	strb	r3, [r5, #0]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
1000870a:	7a62      	ldrb	r2, [r4, #9]
        return 0;
1000870c:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
1000870e:	429a      	cmp	r2, r3
10008710:	d00f      	beq.n	10008732 <mpu_set_accel_fsr+0x5a>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
10008712:	6823      	ldr	r3, [r4, #0]
10008714:	2201      	movs	r2, #1
10008716:	79d9      	ldrb	r1, [r3, #7]
10008718:	6863      	ldr	r3, [r4, #4]
1000871a:	4e0e      	ldr	r6, [pc, #56]	; (10008754 <mpu_set_accel_fsr+0x7c>)
1000871c:	7818      	ldrb	r0, [r3, #0]
1000871e:	002b      	movs	r3, r5
10008720:	47b0      	blx	r6
10008722:	2800      	cmp	r0, #0
10008724:	d103      	bne.n	1000872e <mpu_set_accel_fsr+0x56>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
10008726:	782b      	ldrb	r3, [r5, #0]
10008728:	08db      	lsrs	r3, r3, #3
1000872a:	7263      	strb	r3, [r4, #9]
    return 0;
1000872c:	e001      	b.n	10008732 <mpu_set_accel_fsr+0x5a>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
1000872e:	2001      	movs	r0, #1
10008730:	4240      	negs	r0, r0
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
    return 0;
}
10008732:	b002      	add	sp, #8
10008734:	bd70      	pop	{r4, r5, r6, pc}
        break;
    case 4:
        data = INV_FSR_4G << 3;
        break;
    case 8:
        data = INV_FSR_8G << 3;
10008736:	466b      	mov	r3, sp
10008738:	1ddd      	adds	r5, r3, #7
1000873a:	2310      	movs	r3, #16
1000873c:	702b      	strb	r3, [r5, #0]
        break;
1000873e:	3b0e      	subs	r3, #14
10008740:	e7e3      	b.n	1000870a <mpu_set_accel_fsr+0x32>
    switch (fsr) {
    case 2:
        data = INV_FSR_2G << 3;
        break;
    case 4:
        data = INV_FSR_4G << 3;
10008742:	466b      	mov	r3, sp
10008744:	1ddd      	adds	r5, r3, #7
10008746:	2308      	movs	r3, #8
10008748:	702b      	strb	r3, [r5, #0]
        break;
1000874a:	3b07      	subs	r3, #7
1000874c:	e7dd      	b.n	1000870a <mpu_set_accel_fsr+0x32>
1000874e:	46c0      	nop			; (mov r8, r8)
10008750:	1001b5d0 	.word	0x1001b5d0
10008754:	10008301 	.word	0x10008301

10008758 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
10008758:	b570      	push	{r4, r5, r6, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000875a:	4c22      	ldr	r4, [pc, #136]	; (100087e4 <mpu_set_lpf+0x8c>)
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
1000875c:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000875e:	7aa3      	ldrb	r3, [r4, #10]
10008760:	2b00      	cmp	r3, #0
10008762:	d033      	beq.n	100087cc <mpu_set_lpf+0x74>
        return -1;

    if (lpf >= 188)
        data = INV_FILTER_188HZ;
10008764:	466b      	mov	r3, sp
10008766:	1ddd      	adds	r5, r3, #7
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;

    if (lpf >= 188)
10008768:	28bb      	cmp	r0, #187	; 0xbb
1000876a:	d822      	bhi.n	100087b2 <mpu_set_lpf+0x5a>
        data = INV_FILTER_188HZ;
    else if (lpf >= 98)
1000876c:	2861      	cmp	r0, #97	; 0x61
1000876e:	d923      	bls.n	100087b8 <mpu_set_lpf+0x60>
        data = INV_FILTER_98HZ;
10008770:	2302      	movs	r3, #2
10008772:	702b      	strb	r3, [r5, #0]
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
10008774:	7ae2      	ldrb	r2, [r4, #11]
        return 0;
10008776:	2000      	movs	r0, #0
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
10008778:	429a      	cmp	r2, r3
1000877a:	d018      	beq.n	100087ae <mpu_set_lpf+0x56>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
1000877c:	6823      	ldr	r3, [r4, #0]
1000877e:	2201      	movs	r2, #1
10008780:	7899      	ldrb	r1, [r3, #2]
10008782:	6863      	ldr	r3, [r4, #4]
10008784:	4e18      	ldr	r6, [pc, #96]	; (100087e8 <mpu_set_lpf+0x90>)
10008786:	7818      	ldrb	r0, [r3, #0]
10008788:	002b      	movs	r3, r5
1000878a:	47b0      	blx	r6
1000878c:	2800      	cmp	r0, #0
1000878e:	d11d      	bne.n	100087cc <mpu_set_lpf+0x74>
        return -1;
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;
10008790:	2340      	movs	r3, #64	; 0x40
10008792:	782a      	ldrb	r2, [r5, #0]
10008794:	4313      	orrs	r3, r2
10008796:	702b      	strb	r3, [r5, #0]

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
10008798:	6823      	ldr	r3, [r4, #0]
1000879a:	2201      	movs	r2, #1
1000879c:	7a19      	ldrb	r1, [r3, #8]
1000879e:	6863      	ldr	r3, [r4, #4]
100087a0:	7818      	ldrb	r0, [r3, #0]
100087a2:	002b      	movs	r3, r5
100087a4:	47b0      	blx	r6
100087a6:	2800      	cmp	r0, #0
100087a8:	d110      	bne.n	100087cc <mpu_set_lpf+0x74>
            return -1;
#endif
    st.chip_cfg.lpf = data;
100087aa:	782b      	ldrb	r3, [r5, #0]
100087ac:	72e3      	strb	r3, [r4, #11]
    return 0;
}
100087ae:	b002      	add	sp, #8
100087b0:	bd70      	pop	{r4, r5, r6, pc}

    if (!(st.chip_cfg.sensors))
        return -1;

    if (lpf >= 188)
        data = INV_FILTER_188HZ;
100087b2:	2301      	movs	r3, #1
100087b4:	702b      	strb	r3, [r5, #0]
100087b6:	e7dd      	b.n	10008774 <mpu_set_lpf+0x1c>
    else if (lpf >= 98)
        data = INV_FILTER_98HZ;
    else if (lpf >= 42)
100087b8:	2829      	cmp	r0, #41	; 0x29
100087ba:	d804      	bhi.n	100087c6 <mpu_set_lpf+0x6e>
        data = INV_FILTER_42HZ;
    else if (lpf >= 20)
100087bc:	2813      	cmp	r0, #19
100087be:	d908      	bls.n	100087d2 <mpu_set_lpf+0x7a>
        data = INV_FILTER_20HZ;
100087c0:	2304      	movs	r3, #4
100087c2:	702b      	strb	r3, [r5, #0]
100087c4:	e7d6      	b.n	10008774 <mpu_set_lpf+0x1c>
    if (lpf >= 188)
        data = INV_FILTER_188HZ;
    else if (lpf >= 98)
        data = INV_FILTER_98HZ;
    else if (lpf >= 42)
        data = INV_FILTER_42HZ;
100087c6:	2303      	movs	r3, #3
100087c8:	702b      	strb	r3, [r5, #0]
100087ca:	e7d3      	b.n	10008774 <mpu_set_lpf+0x1c>
int mpu_set_lpf(unsigned short lpf)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
100087cc:	2001      	movs	r0, #1
100087ce:	4240      	negs	r0, r0
100087d0:	e7ed      	b.n	100087ae <mpu_set_lpf+0x56>
        data = INV_FILTER_98HZ;
    else if (lpf >= 42)
        data = INV_FILTER_42HZ;
    else if (lpf >= 20)
        data = INV_FILTER_20HZ;
    else if (lpf >= 10)
100087d2:	2809      	cmp	r0, #9
100087d4:	d902      	bls.n	100087dc <mpu_set_lpf+0x84>
        data = INV_FILTER_10HZ;
100087d6:	2305      	movs	r3, #5
100087d8:	702b      	strb	r3, [r5, #0]
100087da:	e7cb      	b.n	10008774 <mpu_set_lpf+0x1c>
    else
        data = INV_FILTER_5HZ;
100087dc:	2306      	movs	r3, #6
100087de:	702b      	strb	r3, [r5, #0]
100087e0:	e7c8      	b.n	10008774 <mpu_set_lpf+0x1c>
100087e2:	46c0      	nop			; (mov r8, r8)
100087e4:	1001b5d0 	.word	0x1001b5d0
100087e8:	10008301 	.word	0x10008301

100087ec <mpu_get_sample_rate>:
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
100087ec:	2224      	movs	r2, #36	; 0x24
100087ee:	4b05      	ldr	r3, [pc, #20]	; (10008804 <mpu_get_sample_rate+0x18>)
100087f0:	5c9a      	ldrb	r2, [r3, r2]
100087f2:	2a00      	cmp	r2, #0
100087f4:	d103      	bne.n	100087fe <mpu_get_sample_rate+0x12>
        return -1;
    else
        rate[0] = st.chip_cfg.sample_rate;
100087f6:	89db      	ldrh	r3, [r3, #14]
100087f8:	8003      	strh	r3, [r0, #0]
    return 0;
100087fa:	2000      	movs	r0, #0
}
100087fc:	4770      	bx	lr
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
        return -1;
100087fe:	2001      	movs	r0, #1
10008800:	4240      	negs	r0, r0
10008802:	e7fb      	b.n	100087fc <mpu_get_sample_rate+0x10>
10008804:	1001b5d0 	.word	0x1001b5d0

10008808 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
10008808:	b530      	push	{r4, r5, lr}
1000880a:	0001      	movs	r1, r0
1000880c:	b083      	sub	sp, #12
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
1000880e:	2800      	cmp	r0, #0
10008810:	d020      	beq.n	10008854 <mpu_set_compass_sample_rate+0x4c>
10008812:	4c12      	ldr	r4, [pc, #72]	; (1000885c <mpu_set_compass_sample_rate+0x54>)
10008814:	89e0      	ldrh	r0, [r4, #14]
10008816:	4281      	cmp	r1, r0
10008818:	d81c      	bhi.n	10008854 <mpu_set_compass_sample_rate+0x4c>
1000881a:	2964      	cmp	r1, #100	; 0x64
1000881c:	d81a      	bhi.n	10008854 <mpu_set_compass_sample_rate+0x4c>
        return -1;

    div = st.chip_cfg.sample_rate / rate - 1;
1000881e:	4b10      	ldr	r3, [pc, #64]	; (10008860 <mpu_set_compass_sample_rate+0x58>)
10008820:	4798      	blx	r3
10008822:	466b      	mov	r3, sp
10008824:	3801      	subs	r0, #1
10008826:	71d8      	strb	r0, [r3, #7]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
10008828:	2324      	movs	r3, #36	; 0x24
1000882a:	6822      	ldr	r2, [r4, #0]
1000882c:	4d0d      	ldr	r5, [pc, #52]	; (10008864 <mpu_set_compass_sample_rate+0x5c>)
1000882e:	5cd1      	ldrb	r1, [r2, r3]
10008830:	6863      	ldr	r3, [r4, #4]
10008832:	2201      	movs	r2, #1
10008834:	7818      	ldrb	r0, [r3, #0]
10008836:	466b      	mov	r3, sp
10008838:	3307      	adds	r3, #7
1000883a:	47a8      	blx	r5
1000883c:	1e05      	subs	r5, r0, #0
1000883e:	d109      	bne.n	10008854 <mpu_set_compass_sample_rate+0x4c>
        return -1;
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
10008840:	466b      	mov	r3, sp
10008842:	79d9      	ldrb	r1, [r3, #7]
10008844:	89e0      	ldrh	r0, [r4, #14]
10008846:	3101      	adds	r1, #1
10008848:	4b07      	ldr	r3, [pc, #28]	; (10008868 <mpu_set_compass_sample_rate+0x60>)
1000884a:	4798      	blx	r3
1000884c:	8520      	strh	r0, [r4, #40]	; 0x28
    return 0;
#else
    return -1;
#endif
}
1000884e:	0028      	movs	r0, r5
10008850:	b003      	add	sp, #12
10008852:	bd30      	pop	{r4, r5, pc}
int mpu_set_compass_sample_rate(unsigned short rate)
{
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
        return -1;
10008854:	2501      	movs	r5, #1
10008856:	426d      	negs	r5, r5
10008858:	e7f9      	b.n	1000884e <mpu_set_compass_sample_rate+0x46>
1000885a:	46c0      	nop			; (mov r8, r8)
1000885c:	1001b5d0 	.word	0x1001b5d0
10008860:	10014fb5 	.word	0x10014fb5
10008864:	10008301 	.word	0x10008301
10008868:	100150c9 	.word	0x100150c9

1000886c <mpu_configure_fifo>:
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
1000886c:	2324      	movs	r3, #36	; 0x24
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
1000886e:	b570      	push	{r4, r5, r6, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008870:	4d14      	ldr	r5, [pc, #80]	; (100088c4 <mpu_configure_fifo+0x58>)
        return 0;
10008872:	2400      	movs	r4, #0
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008874:	5ceb      	ldrb	r3, [r5, r3]
10008876:	2b00      	cmp	r3, #0
10008878:	d113      	bne.n	100088a2 <mpu_configure_fifo+0x36>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
1000887a:	7aac      	ldrb	r4, [r5, #10]
1000887c:	2c00      	cmp	r4, #0
1000887e:	d01d      	beq.n	100088bc <mpu_configure_fifo+0x50>
{
    unsigned char prev;
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
10008880:	3301      	adds	r3, #1
10008882:	4398      	bics	r0, r3
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
        prev = st.chip_cfg.fifo_enable;
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
10008884:	4004      	ands	r4, r0
    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
        prev = st.chip_cfg.fifo_enable;
10008886:	7c2e      	ldrb	r6, [r5, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
10008888:	742c      	strb	r4, [r5, #16]
        if (st.chip_cfg.fifo_enable != sensors)
1000888a:	1b04      	subs	r4, r0, r4
1000888c:	1e63      	subs	r3, r4, #1
1000888e:	419c      	sbcs	r4, r3
10008890:	4264      	negs	r4, r4
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
10008892:	2800      	cmp	r0, #0
10008894:	d107      	bne.n	100088a6 <mpu_configure_fifo+0x3a>
10008896:	7d2b      	ldrb	r3, [r5, #20]
10008898:	2b00      	cmp	r3, #0
1000889a:	d000      	beq.n	1000889e <mpu_configure_fifo+0x32>
            set_int_enable(1);
1000889c:	2001      	movs	r0, #1
1000889e:	4b0a      	ldr	r3, [pc, #40]	; (100088c8 <mpu_configure_fifo+0x5c>)
100088a0:	4798      	blx	r3
            }
        }
    }

    return result;
}
100088a2:	0020      	movs	r0, r4
100088a4:	bd70      	pop	{r4, r5, r6, pc}
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
100088a6:	4b08      	ldr	r3, [pc, #32]	; (100088c8 <mpu_configure_fifo+0x5c>)
100088a8:	2001      	movs	r0, #1
100088aa:	4798      	blx	r3
        else
            set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
100088ac:	4b07      	ldr	r3, [pc, #28]	; (100088cc <mpu_configure_fifo+0x60>)
100088ae:	4798      	blx	r3
100088b0:	2800      	cmp	r0, #0
100088b2:	d0f6      	beq.n	100088a2 <mpu_configure_fifo+0x36>
                st.chip_cfg.fifo_enable = prev;
                return -1;
100088b4:	2401      	movs	r4, #1
            set_int_enable(1);
        else
            set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
                st.chip_cfg.fifo_enable = prev;
100088b6:	742e      	strb	r6, [r5, #16]
                return -1;
100088b8:	4264      	negs	r4, r4
100088ba:	e7f2      	b.n	100088a2 <mpu_configure_fifo+0x36>

    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
100088bc:	2401      	movs	r4, #1
100088be:	4264      	negs	r4, r4
100088c0:	e7ef      	b.n	100088a2 <mpu_configure_fifo+0x36>
100088c2:	46c0      	nop			; (mov r8, r8)
100088c4:	1001b5d0 	.word	0x1001b5d0
100088c8:	100083f9 	.word	0x100083f9
100088cc:	10008465 	.word	0x10008465

100088d0 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
100088d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
100088d2:	4c36      	ldr	r4, [pc, #216]	; (100089ac <mpu_set_bypass+0xdc>)
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
100088d4:	b083      	sub	sp, #12
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
100088d6:	7ca3      	ldrb	r3, [r4, #18]
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
100088d8:	0006      	movs	r6, r0
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
100088da:	4283      	cmp	r3, r0
100088dc:	d05f      	beq.n	1000899e <mpu_set_bypass+0xce>
        return 0;

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
100088de:	466b      	mov	r3, sp
100088e0:	1ddd      	adds	r5, r3, #7
100088e2:	6823      	ldr	r3, [r4, #0]
100088e4:	2201      	movs	r2, #1
100088e6:	7919      	ldrb	r1, [r3, #4]
100088e8:	6863      	ldr	r3, [r4, #4]
100088ea:	4f31      	ldr	r7, [pc, #196]	; (100089b0 <mpu_set_bypass+0xe0>)
100088ec:	7818      	ldrb	r0, [r3, #0]
100088ee:	002b      	movs	r3, r5
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;

    if (bypass_on) {
100088f0:	2e00      	cmp	r6, #0
100088f2:	d02e      	beq.n	10008952 <mpu_set_bypass+0x82>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
100088f4:	47b8      	blx	r7
100088f6:	2800      	cmp	r0, #0
100088f8:	d155      	bne.n	100089a6 <mpu_set_bypass+0xd6>
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
100088fa:	2220      	movs	r2, #32
100088fc:	782b      	ldrb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
100088fe:	4f2d      	ldr	r7, [pc, #180]	; (100089b4 <mpu_set_bypass+0xe4>)
        return 0;

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
10008900:	4393      	bics	r3, r2
10008902:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008904:	6823      	ldr	r3, [r4, #0]
10008906:	3a1f      	subs	r2, #31
10008908:	7919      	ldrb	r1, [r3, #4]
1000890a:	6863      	ldr	r3, [r4, #4]
1000890c:	7818      	ldrb	r0, [r3, #0]
1000890e:	002b      	movs	r3, r5
10008910:	47b8      	blx	r7
10008912:	2800      	cmp	r0, #0
10008914:	d147      	bne.n	100089a6 <mpu_set_bypass+0xd6>
            return -1;
        delay_ms(3);
10008916:	4b28      	ldr	r3, [pc, #160]	; (100089b8 <mpu_set_bypass+0xe8>)
10008918:	3003      	adds	r0, #3
1000891a:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
1000891c:	2302      	movs	r3, #2
1000891e:	702b      	strb	r3, [r5, #0]
        if (st.chip_cfg.active_low_int)
10008920:	3320      	adds	r3, #32
10008922:	5ce3      	ldrb	r3, [r4, r3]
10008924:	2b00      	cmp	r3, #0
10008926:	d137      	bne.n	10008998 <mpu_set_bypass+0xc8>
        delay_ms(3);
        if (st.chip_cfg.active_low_int)
            tmp = BIT_ACTL;
        else
            tmp = 0;
        if (st.chip_cfg.latched_int)
10008928:	2323      	movs	r3, #35	; 0x23
1000892a:	5ce3      	ldrb	r3, [r4, r3]
1000892c:	2b00      	cmp	r3, #0
1000892e:	d003      	beq.n	10008938 <mpu_set_bypass+0x68>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008930:	2330      	movs	r3, #48	; 0x30
10008932:	782a      	ldrb	r2, [r5, #0]
10008934:	4313      	orrs	r3, r2
10008936:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008938:	6823      	ldr	r3, [r4, #0]
1000893a:	2201      	movs	r2, #1
1000893c:	7dd9      	ldrb	r1, [r3, #23]
1000893e:	6863      	ldr	r3, [r4, #4]
10008940:	7818      	ldrb	r0, [r3, #0]
10008942:	002b      	movs	r3, r5
10008944:	47b8      	blx	r7
10008946:	2800      	cmp	r0, #0
10008948:	d12d      	bne.n	100089a6 <mpu_set_bypass+0xd6>
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
1000894a:	2000      	movs	r0, #0
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
1000894c:	74a6      	strb	r6, [r4, #18]
    return 0;
}
1000894e:	b003      	add	sp, #12
10008950:	bdf0      	pop	{r4, r5, r6, r7, pc}
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008952:	47b8      	blx	r7
10008954:	2800      	cmp	r0, #0
10008956:	d126      	bne.n	100089a6 <mpu_set_bypass+0xd6>
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008958:	7aa3      	ldrb	r3, [r4, #10]
1000895a:	07db      	lsls	r3, r3, #31
1000895c:	d417      	bmi.n	1000898e <mpu_set_bypass+0xbe>
            tmp |= BIT_AUX_IF_EN;
        else
            tmp &= ~BIT_AUX_IF_EN;
1000895e:	2220      	movs	r2, #32
10008960:	782b      	ldrb	r3, [r5, #0]
10008962:	4393      	bics	r3, r2
10008964:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008966:	6823      	ldr	r3, [r4, #0]
10008968:	2201      	movs	r2, #1
1000896a:	7919      	ldrb	r1, [r3, #4]
1000896c:	6863      	ldr	r3, [r4, #4]
1000896e:	4f11      	ldr	r7, [pc, #68]	; (100089b4 <mpu_set_bypass+0xe4>)
10008970:	7818      	ldrb	r0, [r3, #0]
10008972:	002b      	movs	r3, r5
10008974:	47b8      	blx	r7
10008976:	2800      	cmp	r0, #0
10008978:	d115      	bne.n	100089a6 <mpu_set_bypass+0xd6>
            return -1;
        delay_ms(3);
1000897a:	4b0f      	ldr	r3, [pc, #60]	; (100089b8 <mpu_set_bypass+0xe8>)
1000897c:	3003      	adds	r0, #3
1000897e:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
10008980:	2322      	movs	r3, #34	; 0x22
10008982:	5ce3      	ldrb	r3, [r4, r3]
10008984:	2b00      	cmp	r3, #0
10008986:	d00c      	beq.n	100089a2 <mpu_set_bypass+0xd2>
            tmp = BIT_ACTL;
10008988:	2380      	movs	r3, #128	; 0x80
1000898a:	702b      	strb	r3, [r5, #0]
1000898c:	e7cc      	b.n	10008928 <mpu_set_bypass+0x58>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            tmp |= BIT_AUX_IF_EN;
1000898e:	2320      	movs	r3, #32
10008990:	782a      	ldrb	r2, [r5, #0]
10008992:	4313      	orrs	r3, r2
10008994:	702b      	strb	r3, [r5, #0]
10008996:	e7e6      	b.n	10008966 <mpu_set_bypass+0x96>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
        delay_ms(3);
        tmp = BIT_BYPASS_EN;
        if (st.chip_cfg.active_low_int)
            tmp |= BIT_ACTL;
10008998:	2382      	movs	r3, #130	; 0x82
1000899a:	702b      	strb	r3, [r5, #0]
1000899c:	e7c4      	b.n	10008928 <mpu_set_bypass+0x58>
int mpu_set_bypass(unsigned char bypass_on)
{
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;
1000899e:	2000      	movs	r0, #0
100089a0:	e7d5      	b.n	1000894e <mpu_set_bypass+0x7e>
            return -1;
        delay_ms(3);
        if (st.chip_cfg.active_low_int)
            tmp = BIT_ACTL;
        else
            tmp = 0;
100089a2:	702b      	strb	r3, [r5, #0]
100089a4:	e7c0      	b.n	10008928 <mpu_set_bypass+0x58>
    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
100089a6:	2001      	movs	r0, #1
100089a8:	4240      	negs	r0, r0
100089aa:	e7d0      	b.n	1000894e <mpu_set_bypass+0x7e>
100089ac:	1001b5d0 	.word	0x1001b5d0
100089b0:	10008359 	.word	0x10008359
100089b4:	10008301 	.word	0x10008301
100089b8:	1000810d 	.word	0x1000810d

100089bc <mpu_set_int_latched>:
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
100089bc:	2323      	movs	r3, #35	; 0x23
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
100089be:	b570      	push	{r4, r5, r6, lr}
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
100089c0:	4c17      	ldr	r4, [pc, #92]	; (10008a20 <mpu_set_int_latched+0x64>)
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
100089c2:	b082      	sub	sp, #8
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
100089c4:	5ce3      	ldrb	r3, [r4, r3]
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
100089c6:	0005      	movs	r5, r0
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
100089c8:	4283      	cmp	r3, r0
100089ca:	d024      	beq.n	10008a16 <mpu_set_int_latched+0x5a>
        return 0;

    if (enable)
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
100089cc:	466b      	mov	r3, sp
100089ce:	3307      	adds	r3, #7
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;

    if (enable)
100089d0:	2800      	cmp	r0, #0
100089d2:	d11d      	bne.n	10008a10 <mpu_set_int_latched+0x54>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
    else
        tmp = 0;
100089d4:	7018      	strb	r0, [r3, #0]
    if (st.chip_cfg.bypass_mode)
100089d6:	7ca2      	ldrb	r2, [r4, #18]
100089d8:	2a00      	cmp	r2, #0
100089da:	d003      	beq.n	100089e4 <mpu_set_int_latched+0x28>
        tmp |= BIT_BYPASS_EN;
100089dc:	2202      	movs	r2, #2
100089de:	7819      	ldrb	r1, [r3, #0]
100089e0:	430a      	orrs	r2, r1
100089e2:	701a      	strb	r2, [r3, #0]
    if (st.chip_cfg.active_low_int)
100089e4:	2222      	movs	r2, #34	; 0x22
100089e6:	5ca2      	ldrb	r2, [r4, r2]
100089e8:	2a00      	cmp	r2, #0
100089ea:	d004      	beq.n	100089f6 <mpu_set_int_latched+0x3a>
        tmp |= BIT_ACTL;
100089ec:	2180      	movs	r1, #128	; 0x80
100089ee:	781a      	ldrb	r2, [r3, #0]
100089f0:	4249      	negs	r1, r1
100089f2:	430a      	orrs	r2, r1
100089f4:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
100089f6:	6822      	ldr	r2, [r4, #0]
100089f8:	4e0a      	ldr	r6, [pc, #40]	; (10008a24 <mpu_set_int_latched+0x68>)
100089fa:	7dd1      	ldrb	r1, [r2, #23]
100089fc:	6862      	ldr	r2, [r4, #4]
100089fe:	7810      	ldrb	r0, [r2, #0]
10008a00:	2201      	movs	r2, #1
10008a02:	47b0      	blx	r6
10008a04:	2800      	cmp	r0, #0
10008a06:	d108      	bne.n	10008a1a <mpu_set_int_latched+0x5e>
        return -1;
    st.chip_cfg.latched_int = enable;
10008a08:	2323      	movs	r3, #35	; 0x23
10008a0a:	54e5      	strb	r5, [r4, r3]
    return 0;
}
10008a0c:	b002      	add	sp, #8
10008a0e:	bd70      	pop	{r4, r5, r6, pc}
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;

    if (enable)
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008a10:	2230      	movs	r2, #48	; 0x30
10008a12:	701a      	strb	r2, [r3, #0]
10008a14:	e7df      	b.n	100089d6 <mpu_set_int_latched+0x1a>
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;
10008a16:	2000      	movs	r0, #0
10008a18:	e7f8      	b.n	10008a0c <mpu_set_int_latched+0x50>
    if (st.chip_cfg.bypass_mode)
        tmp |= BIT_BYPASS_EN;
    if (st.chip_cfg.active_low_int)
        tmp |= BIT_ACTL;
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
        return -1;
10008a1a:	2001      	movs	r0, #1
10008a1c:	4240      	negs	r0, r0
10008a1e:	e7f5      	b.n	10008a0c <mpu_set_int_latched+0x50>
10008a20:	1001b5d0 	.word	0x1001b5d0
10008a24:	10008301 	.word	0x10008301

10008a28 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
10008a28:	b5f0      	push	{r4, r5, r6, r7, lr}
10008a2a:	0004      	movs	r4, r0
10008a2c:	b083      	sub	sp, #12
    unsigned char tmp[2];

    if (rate > 40)
10008a2e:	2828      	cmp	r0, #40	; 0x28
10008a30:	d85a      	bhi.n	10008ae8 <mpu_lp_accel_mode+0xc0>
        return -1;

    if (!rate) {
10008a32:	2800      	cmp	r0, #0
10008a34:	d114      	bne.n	10008a60 <mpu_lp_accel_mode+0x38>
        mpu_set_int_latched(0);
10008a36:	4b36      	ldr	r3, [pc, #216]	; (10008b10 <mpu_lp_accel_mode+0xe8>)
10008a38:	2000      	movs	r0, #0
10008a3a:	4798      	blx	r3
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
10008a3c:	2207      	movs	r2, #7
    if (rate > 40)
        return -1;

    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
10008a3e:	ab01      	add	r3, sp, #4
10008a40:	701c      	strb	r4, [r3, #0]
        tmp[1] = BIT_STBY_XYZG;
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008a42:	4c34      	ldr	r4, [pc, #208]	; (10008b14 <mpu_lp_accel_mode+0xec>)
        return -1;

    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
10008a44:	705a      	strb	r2, [r3, #1]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008a46:	6822      	ldr	r2, [r4, #0]
10008a48:	4d33      	ldr	r5, [pc, #204]	; (10008b18 <mpu_lp_accel_mode+0xf0>)
10008a4a:	7d51      	ldrb	r1, [r2, #21]
10008a4c:	6862      	ldr	r2, [r4, #4]
10008a4e:	7810      	ldrb	r0, [r2, #0]
10008a50:	2202      	movs	r2, #2
10008a52:	47a8      	blx	r5
10008a54:	1e05      	subs	r5, r0, #0
10008a56:	d147      	bne.n	10008ae8 <mpu_lp_accel_mode+0xc0>
            return -1;
        st.chip_cfg.lp_accel_mode = 0;
10008a58:	7520      	strb	r0, [r4, #20]
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
    mpu_configure_fifo(0);

    return 0;
}
10008a5a:	0028      	movs	r0, r5
10008a5c:	b003      	add	sp, #12
10008a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
10008a60:	2001      	movs	r0, #1
10008a62:	4b2b      	ldr	r3, [pc, #172]	; (10008b10 <mpu_lp_accel_mode+0xe8>)
10008a64:	4798      	blx	r3
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
        tmp[0] = INV_LPA_1_25HZ;
10008a66:	ad01      	add	r5, sp, #4
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
10008a68:	2c01      	cmp	r4, #1
10008a6a:	d043      	beq.n	10008af4 <mpu_lp_accel_mode+0xcc>
        tmp[0] = INV_LPA_1_25HZ;
    else if (rate == 2)
10008a6c:	2c02      	cmp	r4, #2
10008a6e:	d044      	beq.n	10008afa <mpu_lp_accel_mode+0xd2>
        tmp[0] = INV_LPA_2_5HZ;
    else if (rate <= 5)
10008a70:	2c05      	cmp	r4, #5
10008a72:	d93c      	bls.n	10008aee <mpu_lp_accel_mode+0xc6>
        tmp[0] = INV_LPA_5HZ;
    else if (rate <= 10)
10008a74:	2c0a      	cmp	r4, #10
10008a76:	d843      	bhi.n	10008b00 <mpu_lp_accel_mode+0xd8>
        tmp[0] = INV_LPA_10HZ;
10008a78:	2305      	movs	r3, #5
10008a7a:	702b      	strb	r3, [r5, #0]
        tmp[0] = INV_LPA_160HZ;
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
10008a7c:	4c25      	ldr	r4, [pc, #148]	; (10008b14 <mpu_lp_accel_mode+0xec>)
10008a7e:	2201      	movs	r2, #1
10008a80:	6823      	ldr	r3, [r4, #0]
10008a82:	4e25      	ldr	r6, [pc, #148]	; (10008b18 <mpu_lp_accel_mode+0xf0>)
10008a84:	7a59      	ldrb	r1, [r3, #9]
10008a86:	6863      	ldr	r3, [r4, #4]
10008a88:	7818      	ldrb	r0, [r3, #0]
10008a8a:	002b      	movs	r3, r5
10008a8c:	47b0      	blx	r6
10008a8e:	2800      	cmp	r0, #0
10008a90:	d12a      	bne.n	10008ae8 <mpu_lp_accel_mode+0xc0>
        return -1;
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008a92:	6823      	ldr	r3, [r4, #0]
10008a94:	2201      	movs	r2, #1
10008a96:	7a19      	ldrb	r1, [r3, #8]
10008a98:	6863      	ldr	r3, [r4, #4]
10008a9a:	4f20      	ldr	r7, [pc, #128]	; (10008b1c <mpu_lp_accel_mode+0xf4>)
10008a9c:	7818      	ldrb	r0, [r3, #0]
10008a9e:	002b      	movs	r3, r5
10008aa0:	47b8      	blx	r7
10008aa2:	2800      	cmp	r0, #0
10008aa4:	d120      	bne.n	10008ae8 <mpu_lp_accel_mode+0xc0>
       	return -1;

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
10008aa6:	2308      	movs	r3, #8
10008aa8:	782a      	ldrb	r2, [r5, #0]
10008aaa:	4313      	orrs	r3, r2
10008aac:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008aae:	6823      	ldr	r3, [r4, #0]
10008ab0:	2201      	movs	r2, #1
10008ab2:	7a19      	ldrb	r1, [r3, #8]
10008ab4:	6863      	ldr	r3, [r4, #4]
10008ab6:	7818      	ldrb	r0, [r3, #0]
10008ab8:	002b      	movs	r3, r5
10008aba:	47b0      	blx	r6
10008abc:	2800      	cmp	r0, #0
10008abe:	d113      	bne.n	10008ae8 <mpu_lp_accel_mode+0xc0>
    	return -1;
    tmp[0] = BIT_LPA_CYCLE;
10008ac0:	2320      	movs	r3, #32
10008ac2:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
10008ac4:	6823      	ldr	r3, [r4, #0]
10008ac6:	2201      	movs	r2, #1
10008ac8:	7d59      	ldrb	r1, [r3, #21]
10008aca:	6863      	ldr	r3, [r4, #4]
10008acc:	7818      	ldrb	r0, [r3, #0]
10008ace:	002b      	movs	r3, r5
10008ad0:	47b0      	blx	r6
10008ad2:	1e05      	subs	r5, r0, #0
10008ad4:	d108      	bne.n	10008ae8 <mpu_lp_accel_mode+0xc0>
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
10008ad6:	2308      	movs	r3, #8
10008ad8:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
10008ada:	3b07      	subs	r3, #7
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
    st.chip_cfg.clk_src = 0;
10008adc:	7320      	strb	r0, [r4, #12]
    st.chip_cfg.lp_accel_mode = 1;
10008ade:	7523      	strb	r3, [r4, #20]
    mpu_configure_fifo(0);
10008ae0:	2000      	movs	r0, #0
10008ae2:	4b0f      	ldr	r3, [pc, #60]	; (10008b20 <mpu_lp_accel_mode+0xf8>)
10008ae4:	4798      	blx	r3
10008ae6:	e7b8      	b.n	10008a5a <mpu_lp_accel_mode+0x32>
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
        return -1;
10008ae8:	2501      	movs	r5, #1
10008aea:	426d      	negs	r5, r5
10008aec:	e7b5      	b.n	10008a5a <mpu_lp_accel_mode+0x32>
    if (rate == 1)
        tmp[0] = INV_LPA_1_25HZ;
    else if (rate == 2)
        tmp[0] = INV_LPA_2_5HZ;
    else if (rate <= 5)
        tmp[0] = INV_LPA_5HZ;
10008aee:	2304      	movs	r3, #4
10008af0:	702b      	strb	r3, [r5, #0]
10008af2:	e7c3      	b.n	10008a7c <mpu_lp_accel_mode+0x54>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
        tmp[0] = INV_LPA_1_25HZ;
10008af4:	2302      	movs	r3, #2
10008af6:	702b      	strb	r3, [r5, #0]
10008af8:	e7c0      	b.n	10008a7c <mpu_lp_accel_mode+0x54>
    else if (rate == 2)
        tmp[0] = INV_LPA_2_5HZ;
10008afa:	2303      	movs	r3, #3
10008afc:	702b      	strb	r3, [r5, #0]
10008afe:	e7bd      	b.n	10008a7c <mpu_lp_accel_mode+0x54>
    else if (rate <= 5)
        tmp[0] = INV_LPA_5HZ;
    else if (rate <= 10)
        tmp[0] = INV_LPA_10HZ;
    else if (rate <= 20)
10008b00:	2c14      	cmp	r4, #20
10008b02:	d802      	bhi.n	10008b0a <mpu_lp_accel_mode+0xe2>
        tmp[0] = INV_LPA_20HZ;
10008b04:	2306      	movs	r3, #6
10008b06:	702b      	strb	r3, [r5, #0]
10008b08:	e7b8      	b.n	10008a7c <mpu_lp_accel_mode+0x54>
    else if (rate <= 40)
        tmp[0] = INV_LPA_40HZ;
10008b0a:	2307      	movs	r3, #7
10008b0c:	702b      	strb	r3, [r5, #0]
10008b0e:	e7b5      	b.n	10008a7c <mpu_lp_accel_mode+0x54>
10008b10:	100089bd 	.word	0x100089bd
10008b14:	1001b5d0 	.word	0x1001b5d0
10008b18:	10008301 	.word	0x10008301
10008b1c:	10008359 	.word	0x10008359
10008b20:	1000886d 	.word	0x1000886d

10008b24 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10008b24:	b530      	push	{r4, r5, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008b26:	4c2c      	ldr	r4, [pc, #176]	; (10008bd8 <mpu_set_sample_rate+0xb4>)
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10008b28:	b083      	sub	sp, #12
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008b2a:	7aa3      	ldrb	r3, [r4, #10]
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10008b2c:	0005      	movs	r5, r0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008b2e:	2b00      	cmp	r3, #0
10008b30:	d04e      	beq.n	10008bd0 <mpu_set_sample_rate+0xac>
        return -1;

    if (st.chip_cfg.dmp_on)
10008b32:	2324      	movs	r3, #36	; 0x24
10008b34:	5ce3      	ldrb	r3, [r4, r3]
10008b36:	2b00      	cmp	r3, #0
10008b38:	d14a      	bne.n	10008bd0 <mpu_set_sample_rate+0xac>
        return -1;
    else {
        if (st.chip_cfg.lp_accel_mode) {
10008b3a:	7d23      	ldrb	r3, [r4, #20]
10008b3c:	2b00      	cmp	r3, #0
10008b3e:	d005      	beq.n	10008b4c <mpu_set_sample_rate+0x28>
            if (rate && (rate <= 40)) {
10008b40:	1e43      	subs	r3, r0, #1
10008b42:	2b27      	cmp	r3, #39	; 0x27
10008b44:	d940      	bls.n	10008bc8 <mpu_set_sample_rate+0xa4>
                return 0;
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
10008b46:	2000      	movs	r0, #0
10008b48:	4b24      	ldr	r3, [pc, #144]	; (10008bdc <mpu_set_sample_rate+0xb8>)
10008b4a:	4798      	blx	r3
10008b4c:	20f9      	movs	r0, #249	; 0xf9
        }
        if (rate < 4)
10008b4e:	2d03      	cmp	r5, #3
10008b50:	d822      	bhi.n	10008b98 <mpu_set_sample_rate+0x74>
            rate = 4;
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
10008b52:	466b      	mov	r3, sp
10008b54:	71d8      	strb	r0, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
10008b56:	6823      	ldr	r3, [r4, #0]
10008b58:	4d21      	ldr	r5, [pc, #132]	; (10008be0 <mpu_set_sample_rate+0xbc>)
10008b5a:	7859      	ldrb	r1, [r3, #1]
10008b5c:	6863      	ldr	r3, [r4, #4]
10008b5e:	2201      	movs	r2, #1
10008b60:	7818      	ldrb	r0, [r3, #0]
10008b62:	466b      	mov	r3, sp
10008b64:	3307      	adds	r3, #7
10008b66:	47a8      	blx	r5
10008b68:	1e05      	subs	r5, r0, #0
10008b6a:	d131      	bne.n	10008bd0 <mpu_set_sample_rate+0xac>
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);
10008b6c:	466b      	mov	r3, sp
10008b6e:	20fa      	movs	r0, #250	; 0xfa
10008b70:	79d9      	ldrb	r1, [r3, #7]
10008b72:	0080      	lsls	r0, r0, #2
10008b74:	4b1b      	ldr	r3, [pc, #108]	; (10008be4 <mpu_set_sample_rate+0xc0>)
10008b76:	3101      	adds	r1, #1
10008b78:	4798      	blx	r3

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10008b7a:	8d23      	ldrh	r3, [r4, #40]	; 0x28

        data = 1000 / rate - 1;
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);
10008b7c:	81e0      	strh	r0, [r4, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10008b7e:	1c18      	adds	r0, r3, #0
10008b80:	2b64      	cmp	r3, #100	; 0x64
10008b82:	d816      	bhi.n	10008bb2 <mpu_set_sample_rate+0x8e>
10008b84:	4b18      	ldr	r3, [pc, #96]	; (10008be8 <mpu_set_sample_rate+0xc4>)
10008b86:	b280      	uxth	r0, r0
10008b88:	4798      	blx	r3
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
10008b8a:	89e0      	ldrh	r0, [r4, #14]
10008b8c:	4b17      	ldr	r3, [pc, #92]	; (10008bec <mpu_set_sample_rate+0xc8>)
10008b8e:	0840      	lsrs	r0, r0, #1
10008b90:	4798      	blx	r3
        return 0;
    }
}
10008b92:	0028      	movs	r0, r5
10008b94:	b003      	add	sp, #12
10008b96:	bd30      	pop	{r4, r5, pc}
10008b98:	23fa      	movs	r3, #250	; 0xfa
10008b9a:	1c29      	adds	r1, r5, #0
10008b9c:	009b      	lsls	r3, r3, #2
10008b9e:	429d      	cmp	r5, r3
10008ba0:	d809      	bhi.n	10008bb6 <mpu_set_sample_rate+0x92>
10008ba2:	20fa      	movs	r0, #250	; 0xfa
10008ba4:	b289      	uxth	r1, r1
10008ba6:	0080      	lsls	r0, r0, #2
10008ba8:	4b0e      	ldr	r3, [pc, #56]	; (10008be4 <mpu_set_sample_rate+0xc0>)
10008baa:	4798      	blx	r3
10008bac:	3801      	subs	r0, #1
10008bae:	b2c0      	uxtb	r0, r0
10008bb0:	e7cf      	b.n	10008b52 <mpu_set_sample_rate+0x2e>
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10008bb2:	2064      	movs	r0, #100	; 0x64
10008bb4:	e7e6      	b.n	10008b84 <mpu_set_sample_rate+0x60>
10008bb6:	20fa      	movs	r0, #250	; 0xfa
10008bb8:	1c19      	adds	r1, r3, #0
10008bba:	b289      	uxth	r1, r1
10008bbc:	0080      	lsls	r0, r0, #2
10008bbe:	4b09      	ldr	r3, [pc, #36]	; (10008be4 <mpu_set_sample_rate+0xc0>)
10008bc0:	4798      	blx	r3
10008bc2:	3801      	subs	r0, #1
10008bc4:	b2c0      	uxtb	r0, r0
10008bc6:	e7c4      	b.n	10008b52 <mpu_set_sample_rate+0x2e>
        return -1;
    else {
        if (st.chip_cfg.lp_accel_mode) {
            if (rate && (rate <= 40)) {
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
10008bc8:	4b04      	ldr	r3, [pc, #16]	; (10008bdc <mpu_set_sample_rate+0xb8>)
10008bca:	4798      	blx	r3
                return 0;
10008bcc:	2500      	movs	r5, #0
10008bce:	e7e0      	b.n	10008b92 <mpu_set_sample_rate+0x6e>
int mpu_set_sample_rate(unsigned short rate)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008bd0:	2501      	movs	r5, #1
10008bd2:	426d      	negs	r5, r5
10008bd4:	e7dd      	b.n	10008b92 <mpu_set_sample_rate+0x6e>
10008bd6:	46c0      	nop			; (mov r8, r8)
10008bd8:	1001b5d0 	.word	0x1001b5d0
10008bdc:	10008a29 	.word	0x10008a29
10008be0:	10008301 	.word	0x10008301
10008be4:	100150c9 	.word	0x100150c9
10008be8:	10008809 	.word	0x10008809
10008bec:	10008759 	.word	0x10008759

10008bf0 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
10008bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
10008bf2:	464e      	mov	r6, r9
10008bf4:	4657      	mov	r7, sl
10008bf6:	4645      	mov	r5, r8
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
10008bf8:	2370      	movs	r3, #112	; 0x70
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
10008bfa:	b4e0      	push	{r5, r6, r7}
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
10008bfc:	4003      	ands	r3, r0
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
10008bfe:	b082      	sub	sp, #8
10008c00:	0006      	movs	r6, r0
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
10008c02:	2b00      	cmp	r3, #0
10008c04:	d100      	bne.n	10008c08 <mpu_set_sensors+0x18>
10008c06:	e095      	b.n	10008d34 <mpu_set_sensors+0x144>
        data = INV_CLK_PLL;
10008c08:	466b      	mov	r3, sp
10008c0a:	1d9d      	adds	r5, r3, #6
10008c0c:	2301      	movs	r3, #1
10008c0e:	702b      	strb	r3, [r5, #0]
    else if (sensors)
        data = 0;
    else
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10008c10:	4c5f      	ldr	r4, [pc, #380]	; (10008d90 <mpu_set_sensors+0x1a0>)
10008c12:	4f60      	ldr	r7, [pc, #384]	; (10008d94 <mpu_set_sensors+0x1a4>)
10008c14:	6823      	ldr	r3, [r4, #0]
10008c16:	2201      	movs	r2, #1
10008c18:	7d59      	ldrb	r1, [r3, #21]
10008c1a:	6863      	ldr	r3, [r4, #4]
10008c1c:	46b8      	mov	r8, r7
10008c1e:	7818      	ldrb	r0, [r3, #0]
10008c20:	002b      	movs	r3, r5
10008c22:	47b8      	blx	r7
10008c24:	2800      	cmp	r0, #0
10008c26:	d000      	beq.n	10008c2a <mpu_set_sensors+0x3a>
10008c28:	e0ad      	b.n	10008d86 <mpu_set_sensors+0x196>
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008c2a:	2240      	movs	r2, #64	; 0x40
10008c2c:	782b      	ldrb	r3, [r5, #0]

    data = 0;
10008c2e:	7028      	strb	r0, [r5, #0]
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008c30:	4393      	bics	r3, r2
10008c32:	7323      	strb	r3, [r4, #12]

    data = 0;
    if (!(sensors & INV_X_GYRO))
10008c34:	4232      	tst	r2, r6
10008c36:	d100      	bne.n	10008c3a <mpu_set_sensors+0x4a>
10008c38:	e093      	b.n	10008d62 <mpu_set_sensors+0x172>
        data |= BIT_STBY_XG;
    if (!(sensors & INV_Y_GYRO))
10008c3a:	06b3      	lsls	r3, r6, #26
10008c3c:	d403      	bmi.n	10008c46 <mpu_set_sensors+0x56>
        data |= BIT_STBY_YG;
10008c3e:	2302      	movs	r3, #2
10008c40:	782a      	ldrb	r2, [r5, #0]
10008c42:	4313      	orrs	r3, r2
10008c44:	702b      	strb	r3, [r5, #0]
    if (!(sensors & INV_Z_GYRO))
10008c46:	06f3      	lsls	r3, r6, #27
10008c48:	d403      	bmi.n	10008c52 <mpu_set_sensors+0x62>
        data |= BIT_STBY_ZG;
10008c4a:	2301      	movs	r3, #1
10008c4c:	782a      	ldrb	r2, [r5, #0]
10008c4e:	4313      	orrs	r3, r2
10008c50:	702b      	strb	r3, [r5, #0]
    if (!(sensors & INV_XYZ_ACCEL))
10008c52:	0733      	lsls	r3, r6, #28
10008c54:	d400      	bmi.n	10008c58 <mpu_set_sensors+0x68>
10008c56:	e08a      	b.n	10008d6e <mpu_set_sensors+0x17e>
        data |= BIT_STBY_XYZA;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
10008c58:	6823      	ldr	r3, [r4, #0]
10008c5a:	2201      	movs	r2, #1
10008c5c:	7d99      	ldrb	r1, [r3, #22]
10008c5e:	6863      	ldr	r3, [r4, #4]
10008c60:	7818      	ldrb	r0, [r3, #0]
10008c62:	002b      	movs	r3, r5
10008c64:	47c0      	blx	r8
10008c66:	2800      	cmp	r0, #0
10008c68:	d000      	beq.n	10008c6c <mpu_set_sensors+0x7c>
10008c6a:	e08c      	b.n	10008d86 <mpu_set_sensors+0x196>
        st.chip_cfg.sensors = 0;
        return -1;
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
10008c6c:	2308      	movs	r3, #8
10008c6e:	0032      	movs	r2, r6
10008c70:	439a      	bics	r2, r3
10008c72:	d041      	beq.n	10008cf8 <mpu_set_sensors+0x108>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
10008c74:	4b48      	ldr	r3, [pc, #288]	; (10008d98 <mpu_set_sensors+0x1a8>)
10008c76:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008c78:	466b      	mov	r3, sp
10008c7a:	3307      	adds	r3, #7
10008c7c:	469a      	mov	sl, r3
10008c7e:	6823      	ldr	r3, [r4, #0]
10008c80:	2201      	movs	r2, #1
10008c82:	7919      	ldrb	r1, [r3, #4]
10008c84:	6863      	ldr	r3, [r4, #4]
10008c86:	4f45      	ldr	r7, [pc, #276]	; (10008d9c <mpu_set_sensors+0x1ac>)
10008c88:	7818      	ldrb	r0, [r3, #0]
10008c8a:	4653      	mov	r3, sl
10008c8c:	47b8      	blx	r7
10008c8e:	2800      	cmp	r0, #0
10008c90:	d000      	beq.n	10008c94 <mpu_set_sensors+0xa4>
10008c92:	e075      	b.n	10008d80 <mpu_set_sensors+0x190>
        return -1;
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
10008c94:	07f3      	lsls	r3, r6, #31
10008c96:	d53c      	bpl.n	10008d12 <mpu_set_sensors+0x122>
        data = AKM_SINGLE_MEASUREMENT;
10008c98:	2311      	movs	r3, #17
10008c9a:	702b      	strb	r3, [r5, #0]
        user_ctrl |= BIT_AUX_IF_EN;
10008c9c:	4653      	mov	r3, sl
10008c9e:	781a      	ldrb	r2, [r3, #0]
10008ca0:	2320      	movs	r3, #32
10008ca2:	4313      	orrs	r3, r2
10008ca4:	4652      	mov	r2, sl
10008ca6:	7013      	strb	r3, [r2, #0]
    } else {
        data = AKM_POWER_DOWN;
        user_ctrl &= ~BIT_AUX_IF_EN;
    }
    if (st.chip_cfg.dmp_on)
10008ca8:	2224      	movs	r2, #36	; 0x24
10008caa:	5ca2      	ldrb	r2, [r4, r2]
10008cac:	2a00      	cmp	r2, #0
10008cae:	d03c      	beq.n	10008d2a <mpu_set_sensors+0x13a>
        user_ctrl |= BIT_DMP_EN;
10008cb0:	2280      	movs	r2, #128	; 0x80
10008cb2:	4252      	negs	r2, r2
10008cb4:	4313      	orrs	r3, r2
10008cb6:	4652      	mov	r2, sl
10008cb8:	7013      	strb	r3, [r2, #0]
    else
        user_ctrl &= ~BIT_DMP_EN;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
10008cba:	2326      	movs	r3, #38	; 0x26
10008cbc:	6822      	ldr	r2, [r4, #0]
10008cbe:	5cd1      	ldrb	r1, [r2, r3]
10008cc0:	6863      	ldr	r3, [r4, #4]
10008cc2:	2201      	movs	r2, #1
10008cc4:	7818      	ldrb	r0, [r3, #0]
10008cc6:	002b      	movs	r3, r5
10008cc8:	47c0      	blx	r8
10008cca:	2800      	cmp	r0, #0
10008ccc:	d158      	bne.n	10008d80 <mpu_set_sensors+0x190>
        return -1;
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008cce:	6823      	ldr	r3, [r4, #0]
10008cd0:	2201      	movs	r2, #1
10008cd2:	7919      	ldrb	r1, [r3, #4]
10008cd4:	6863      	ldr	r3, [r4, #4]
10008cd6:	7818      	ldrb	r0, [r3, #0]
10008cd8:	4653      	mov	r3, sl
10008cda:	47c0      	blx	r8
10008cdc:	1e05      	subs	r5, r0, #0
10008cde:	d14f      	bne.n	10008d80 <mpu_set_sensors+0x190>
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
    st.chip_cfg.lp_accel_mode = 0;
10008ce0:	7520      	strb	r0, [r4, #20]
    delay_ms(50);
10008ce2:	4b2f      	ldr	r3, [pc, #188]	; (10008da0 <mpu_set_sensors+0x1b0>)
10008ce4:	2032      	movs	r0, #50	; 0x32
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
10008ce6:	72a6      	strb	r6, [r4, #10]
    st.chip_cfg.lp_accel_mode = 0;
    delay_ms(50);
10008ce8:	4798      	blx	r3
    return 0;
}
10008cea:	0028      	movs	r0, r5
10008cec:	b002      	add	sp, #8
10008cee:	bc1c      	pop	{r2, r3, r4}
10008cf0:	4690      	mov	r8, r2
10008cf2:	4699      	mov	r9, r3
10008cf4:	46a2      	mov	sl, r4
10008cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008cf8:	466b      	mov	r3, sp
10008cfa:	3307      	adds	r3, #7
10008cfc:	469a      	mov	sl, r3
10008cfe:	6823      	ldr	r3, [r4, #0]
10008d00:	2201      	movs	r2, #1
10008d02:	7919      	ldrb	r1, [r3, #4]
10008d04:	6863      	ldr	r3, [r4, #4]
10008d06:	4f25      	ldr	r7, [pc, #148]	; (10008d9c <mpu_set_sensors+0x1ac>)
10008d08:	7818      	ldrb	r0, [r3, #0]
10008d0a:	4653      	mov	r3, sl
10008d0c:	47b8      	blx	r7
10008d0e:	2800      	cmp	r0, #0
10008d10:	d136      	bne.n	10008d80 <mpu_set_sensors+0x190>
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
        data = AKM_SINGLE_MEASUREMENT;
        user_ctrl |= BIT_AUX_IF_EN;
    } else {
        data = AKM_POWER_DOWN;
10008d12:	2310      	movs	r3, #16
10008d14:	702b      	strb	r3, [r5, #0]
        user_ctrl &= ~BIT_AUX_IF_EN;
10008d16:	4653      	mov	r3, sl
10008d18:	2220      	movs	r2, #32
10008d1a:	781b      	ldrb	r3, [r3, #0]
10008d1c:	4393      	bics	r3, r2
10008d1e:	4652      	mov	r2, sl
10008d20:	7013      	strb	r3, [r2, #0]
    }
    if (st.chip_cfg.dmp_on)
10008d22:	2224      	movs	r2, #36	; 0x24
10008d24:	5ca2      	ldrb	r2, [r4, r2]
10008d26:	2a00      	cmp	r2, #0
10008d28:	d1c2      	bne.n	10008cb0 <mpu_set_sensors+0xc0>
        user_ctrl |= BIT_DMP_EN;
    else
        user_ctrl &= ~BIT_DMP_EN;
10008d2a:	227f      	movs	r2, #127	; 0x7f
10008d2c:	4013      	ands	r3, r2
10008d2e:	4652      	mov	r2, sl
10008d30:	7013      	strb	r3, [r2, #0]
10008d32:	e7c2      	b.n	10008cba <mpu_set_sensors+0xca>
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
        data = INV_CLK_PLL;
    else if (sensors)
10008d34:	2800      	cmp	r0, #0
10008d36:	d11f      	bne.n	10008d78 <mpu_set_sensors+0x188>
        data = 0;
    else
        data = BIT_SLEEP;
10008d38:	466b      	mov	r3, sp
10008d3a:	1d9d      	adds	r5, r3, #6
10008d3c:	2340      	movs	r3, #64	; 0x40
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10008d3e:	4c14      	ldr	r4, [pc, #80]	; (10008d90 <mpu_set_sensors+0x1a0>)
    if (sensors & INV_XYZ_GYRO)
        data = INV_CLK_PLL;
    else if (sensors)
        data = 0;
    else
        data = BIT_SLEEP;
10008d40:	702b      	strb	r3, [r5, #0]
10008d42:	4699      	mov	r9, r3
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10008d44:	6823      	ldr	r3, [r4, #0]
10008d46:	4f13      	ldr	r7, [pc, #76]	; (10008d94 <mpu_set_sensors+0x1a4>)
10008d48:	7d59      	ldrb	r1, [r3, #21]
10008d4a:	6863      	ldr	r3, [r4, #4]
10008d4c:	2201      	movs	r2, #1
10008d4e:	7818      	ldrb	r0, [r3, #0]
10008d50:	002b      	movs	r3, r5
10008d52:	46b8      	mov	r8, r7
10008d54:	47b8      	blx	r7
10008d56:	2800      	cmp	r0, #0
10008d58:	d115      	bne.n	10008d86 <mpu_set_sensors+0x196>
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008d5a:	464a      	mov	r2, r9
10008d5c:	782b      	ldrb	r3, [r5, #0]
10008d5e:	4393      	bics	r3, r2
10008d60:	7323      	strb	r3, [r4, #12]

    data = 0;
    if (!(sensors & INV_X_GYRO))
        data |= BIT_STBY_XG;
10008d62:	2304      	movs	r3, #4
10008d64:	702b      	strb	r3, [r5, #0]
    if (!(sensors & INV_Y_GYRO))
10008d66:	06b3      	lsls	r3, r6, #26
10008d68:	d500      	bpl.n	10008d6c <mpu_set_sensors+0x17c>
10008d6a:	e76c      	b.n	10008c46 <mpu_set_sensors+0x56>
10008d6c:	e767      	b.n	10008c3e <mpu_set_sensors+0x4e>
        data |= BIT_STBY_YG;
    if (!(sensors & INV_Z_GYRO))
        data |= BIT_STBY_ZG;
    if (!(sensors & INV_XYZ_ACCEL))
        data |= BIT_STBY_XYZA;
10008d6e:	2338      	movs	r3, #56	; 0x38
10008d70:	782a      	ldrb	r2, [r5, #0]
10008d72:	4313      	orrs	r3, r2
10008d74:	702b      	strb	r3, [r5, #0]
10008d76:	e76f      	b.n	10008c58 <mpu_set_sensors+0x68>
#endif

    if (sensors & INV_XYZ_GYRO)
        data = INV_CLK_PLL;
    else if (sensors)
        data = 0;
10008d78:	466a      	mov	r2, sp
10008d7a:	1d95      	adds	r5, r2, #6
10008d7c:	702b      	strb	r3, [r5, #0]
10008d7e:	e747      	b.n	10008c10 <mpu_set_sensors+0x20>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10008d80:	2501      	movs	r5, #1
10008d82:	426d      	negs	r5, r5
10008d84:	e7b1      	b.n	10008cea <mpu_set_sensors+0xfa>
    else if (sensors)
        data = 0;
    else
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
10008d86:	2300      	movs	r3, #0
        return -1;
10008d88:	2501      	movs	r5, #1
    else if (sensors)
        data = 0;
    else
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
10008d8a:	72a3      	strb	r3, [r4, #10]
        return -1;
10008d8c:	426d      	negs	r5, r5
10008d8e:	e7ac      	b.n	10008cea <mpu_set_sensors+0xfa>
10008d90:	1001b5d0 	.word	0x1001b5d0
10008d94:	10008301 	.word	0x10008301
10008d98:	100089bd 	.word	0x100089bd
10008d9c:	10008359 	.word	0x10008359
10008da0:	1000810d 	.word	0x1000810d

10008da4 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
10008da4:	b5f0      	push	{r4, r5, r6, r7, lr}
10008da6:	464d      	mov	r5, r9
10008da8:	465f      	mov	r7, fp
10008daa:	4656      	mov	r6, sl
10008dac:	4644      	mov	r4, r8
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
10008dae:	2380      	movs	r3, #128	; 0x80
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
10008db0:	b4f0      	push	{r4, r5, r6, r7}
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10008db2:	4ca1      	ldr	r4, [pc, #644]	; (10009038 <mpu_init+0x294>)
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
10008db4:	b085      	sub	sp, #20
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
10008db6:	ad02      	add	r5, sp, #8
10008db8:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10008dba:	6823      	ldr	r3, [r4, #0]
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
10008dbc:	0006      	movs	r6, r0
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10008dbe:	7d59      	ldrb	r1, [r3, #21]
10008dc0:	6863      	ldr	r3, [r4, #4]
10008dc2:	2201      	movs	r2, #1
10008dc4:	7818      	ldrb	r0, [r3, #0]
10008dc6:	4f9d      	ldr	r7, [pc, #628]	; (1000903c <mpu_init+0x298>)
10008dc8:	002b      	movs	r3, r5
10008dca:	47b8      	blx	r7
10008dcc:	4681      	mov	r9, r0
10008dce:	2800      	cmp	r0, #0
10008dd0:	d17c      	bne.n	10008ecc <mpu_init+0x128>
        return -1;
    delay_ms(100);
10008dd2:	4b9b      	ldr	r3, [pc, #620]	; (10009040 <mpu_init+0x29c>)
10008dd4:	2064      	movs	r0, #100	; 0x64
10008dd6:	4698      	mov	r8, r3
10008dd8:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
10008dda:	464b      	mov	r3, r9
10008ddc:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10008dde:	6823      	ldr	r3, [r4, #0]
10008de0:	2201      	movs	r2, #1
10008de2:	7d59      	ldrb	r1, [r3, #21]
10008de4:	6863      	ldr	r3, [r4, #4]
10008de6:	7818      	ldrb	r0, [r3, #0]
10008de8:	002b      	movs	r3, r5
10008dea:	47b8      	blx	r7
10008dec:	2800      	cmp	r0, #0
10008dee:	d16d      	bne.n	10008ecc <mpu_init+0x128>

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
10008df0:	2340      	movs	r3, #64	; 0x40
10008df2:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
10008df4:	6823      	ldr	r3, [r4, #0]
    /* Wake up chip. */
    data[0] = 0x00;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;

   st.chip_cfg.accel_half = 0;
10008df6:	74e0      	strb	r0, [r4, #19]
#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
10008df8:	7a19      	ldrb	r1, [r3, #8]
10008dfa:	6863      	ldr	r3, [r4, #4]
10008dfc:	2201      	movs	r2, #1
10008dfe:	7818      	ldrb	r0, [r3, #0]
10008e00:	002b      	movs	r3, r5
10008e02:	47b8      	blx	r7
10008e04:	1e05      	subs	r5, r0, #0
10008e06:	d161      	bne.n	10008ecc <mpu_init+0x128>
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
10008e08:	23ff      	movs	r3, #255	; 0xff
10008e0a:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
10008e0c:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
10008e0e:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
10008e10:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
    st.chip_cfg.fifo_enable = 0xFF;
    st.chip_cfg.bypass_mode = 0xFF;
10008e12:	74a3      	strb	r3, [r4, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
10008e14:	3bfe      	subs	r3, #254	; 0xfe
10008e16:	7323      	strb	r3, [r4, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
10008e18:	3321      	adds	r3, #33	; 0x21
10008e1a:	54e0      	strb	r0, [r4, r3]
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
    st.chip_cfg.gyro_fsr = 0xFF;
    st.chip_cfg.accel_fsr = 0xFF;
    st.chip_cfg.lpf = 0xFF;
    st.chip_cfg.sample_rate = 0xFFFF;
10008e1c:	2201      	movs	r2, #1
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
    st.chip_cfg.latched_int = 0;
10008e1e:	3301      	adds	r3, #1
10008e20:	54e0      	strb	r0, [r4, r3]
    st.chip_cfg.int_motion_only = 0;
10008e22:	7560      	strb	r0, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
10008e24:	7520      	strb	r0, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
10008e26:	0020      	movs	r0, r4
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
    st.chip_cfg.gyro_fsr = 0xFF;
    st.chip_cfg.accel_fsr = 0xFF;
    st.chip_cfg.lpf = 0xFF;
    st.chip_cfg.sample_rate = 0xFFFF;
10008e28:	4252      	negs	r2, r2
10008e2a:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
10008e2c:	7422      	strb	r2, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
10008e2e:	8522      	strh	r2, [r4, #40]	; 0x28
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
    st.chip_cfg.latched_int = 0;
    st.chip_cfg.int_motion_only = 0;
    st.chip_cfg.lp_accel_mode = 0;
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
10008e30:	4b84      	ldr	r3, [pc, #528]	; (10009044 <mpu_init+0x2a0>)
10008e32:	3016      	adds	r0, #22
10008e34:	320d      	adds	r2, #13
10008e36:	2100      	movs	r1, #0
10008e38:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
10008e3a:	2324      	movs	r3, #36	; 0x24
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;

    if (mpu_set_gyro_fsr(2000))
10008e3c:	20fa      	movs	r0, #250	; 0xfa
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
    st.chip_cfg.latched_int = 0;
    st.chip_cfg.int_motion_only = 0;
    st.chip_cfg.lp_accel_mode = 0;
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
    st.chip_cfg.dmp_on = 0;
10008e3e:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_loaded = 0;
10008e40:	3301      	adds	r3, #1
10008e42:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_sample_rate = 0;

    if (mpu_set_gyro_fsr(2000))
10008e44:	00c0      	lsls	r0, r0, #3
10008e46:	4b80      	ldr	r3, [pc, #512]	; (10009048 <mpu_init+0x2a4>)
    st.chip_cfg.int_motion_only = 0;
    st.chip_cfg.lp_accel_mode = 0;
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
    st.chip_cfg.dmp_on = 0;
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;
10008e48:	84e5      	strh	r5, [r4, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
10008e4a:	4798      	blx	r3
10008e4c:	2800      	cmp	r0, #0
10008e4e:	d13d      	bne.n	10008ecc <mpu_init+0x128>
        return -1;
    if (mpu_set_accel_fsr(2))
10008e50:	3002      	adds	r0, #2
10008e52:	4b7e      	ldr	r3, [pc, #504]	; (1000904c <mpu_init+0x2a8>)
10008e54:	4798      	blx	r3
10008e56:	2800      	cmp	r0, #0
10008e58:	d138      	bne.n	10008ecc <mpu_init+0x128>
        return -1;
    if (mpu_set_lpf(42))
10008e5a:	302a      	adds	r0, #42	; 0x2a
10008e5c:	4b7c      	ldr	r3, [pc, #496]	; (10009050 <mpu_init+0x2ac>)
10008e5e:	4798      	blx	r3
10008e60:	2800      	cmp	r0, #0
10008e62:	d133      	bne.n	10008ecc <mpu_init+0x128>
        return -1;
    if (mpu_set_sample_rate(50))
10008e64:	3032      	adds	r0, #50	; 0x32
10008e66:	4b7b      	ldr	r3, [pc, #492]	; (10009054 <mpu_init+0x2b0>)
10008e68:	4798      	blx	r3
10008e6a:	2800      	cmp	r0, #0
10008e6c:	d12e      	bne.n	10008ecc <mpu_init+0x128>
        return -1;
    if (mpu_configure_fifo(0))
10008e6e:	4b7a      	ldr	r3, [pc, #488]	; (10009058 <mpu_init+0x2b4>)
10008e70:	4798      	blx	r3
10008e72:	2800      	cmp	r0, #0
10008e74:	d12a      	bne.n	10008ecc <mpu_init+0x128>
        return -1;

    if (int_param)
10008e76:	2e00      	cmp	r6, #0
10008e78:	d004      	beq.n	10008e84 <mpu_init+0xe0>
    count = (uint32_t *)(load / 26000);
}
static inline int reg_int_cb(struct int_param_s *int_param)
{
    
    gpio_register_callback(int_param->pin, int_param->cb, GPIO_CALLBACK_RISING);
10008e7a:	6871      	ldr	r1, [r6, #4]
10008e7c:	7830      	ldrb	r0, [r6, #0]
10008e7e:	2202      	movs	r2, #2
10008e80:	4b76      	ldr	r3, [pc, #472]	; (1000905c <mpu_init+0x2b8>)
10008e82:	4798      	blx	r3
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
10008e84:	4b76      	ldr	r3, [pc, #472]	; (10009060 <mpu_init+0x2bc>)
10008e86:	2001      	movs	r0, #1
10008e88:	469b      	mov	fp, r3
10008e8a:	4798      	blx	r3
10008e8c:	4b75      	ldr	r3, [pc, #468]	; (10009064 <mpu_init+0x2c0>)

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
10008e8e:	250c      	movs	r5, #12
10008e90:	4699      	mov	r9, r3
10008e92:	ae01      	add	r6, sp, #4
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
10008e94:	0033      	movs	r3, r6
10008e96:	2201      	movs	r2, #1
10008e98:	2100      	movs	r1, #0
10008e9a:	0028      	movs	r0, r5
10008e9c:	47c8      	blx	r9
        if (!result && (data[0] == AKM_WHOAMI))
10008e9e:	2800      	cmp	r0, #0
10008ea0:	d102      	bne.n	10008ea8 <mpu_init+0x104>
10008ea2:	7833      	ldrb	r3, [r6, #0]
10008ea4:	2b48      	cmp	r3, #72	; 0x48
10008ea6:	d01b      	beq.n	10008ee0 <mpu_init+0x13c>
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
10008ea8:	3501      	adds	r5, #1
10008eaa:	b2ed      	uxtb	r5, r5
10008eac:	2d10      	cmp	r5, #16
10008eae:	d1f1      	bne.n	10008e94 <mpu_init+0xf0>
            break;
    }

    if (akm_addr > 0x0F) {
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
10008eb0:	486d      	ldr	r0, [pc, #436]	; (10009068 <mpu_init+0x2c4>)
10008eb2:	4c6e      	ldr	r4, [pc, #440]	; (1000906c <mpu_init+0x2c8>)
10008eb4:	47a0      	blx	r4
10008eb6:	486e      	ldr	r0, [pc, #440]	; (10009070 <mpu_init+0x2cc>)
10008eb8:	47a0      	blx	r4
    if (int_param)
        reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
10008eba:	200a      	movs	r0, #10
10008ebc:	4b6d      	ldr	r3, [pc, #436]	; (10009074 <mpu_init+0x2d0>)
10008ebe:	4798      	blx	r3
10008ec0:	1e04      	subs	r4, r0, #0
10008ec2:	d103      	bne.n	10008ecc <mpu_init+0x128>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
10008ec4:	4b6c      	ldr	r3, [pc, #432]	; (10009078 <mpu_init+0x2d4>)
10008ec6:	2000      	movs	r0, #0
10008ec8:	4798      	blx	r3
    return 0;
10008eca:	e001      	b.n	10008ed0 <mpu_init+0x12c>
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
10008ecc:	2401      	movs	r4, #1
10008ece:	4264      	negs	r4, r4
        return -1;
#endif

    mpu_set_sensors(0);
    return 0;
}
10008ed0:	0020      	movs	r0, r4
10008ed2:	b005      	add	sp, #20
10008ed4:	bc3c      	pop	{r2, r3, r4, r5}
10008ed6:	4690      	mov	r8, r2
10008ed8:	4699      	mov	r9, r3
10008eda:	46a2      	mov	sl, r4
10008edc:	46ab      	mov	fp, r5
10008ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;
10008ee0:	232a      	movs	r3, #42	; 0x2a
10008ee2:	469a      	mov	sl, r3
10008ee4:	54e5      	strb	r5, [r4, r3]

    data[0] = AKM_POWER_DOWN;
10008ee6:	3b1a      	subs	r3, #26
10008ee8:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10008eea:	2201      	movs	r2, #1
10008eec:	0033      	movs	r3, r6
10008eee:	210a      	movs	r1, #10
10008ef0:	0028      	movs	r0, r5
10008ef2:	47b8      	blx	r7
10008ef4:	2800      	cmp	r0, #0
10008ef6:	d1e0      	bne.n	10008eba <mpu_init+0x116>
        return -1;
    delay_ms(1);
10008ef8:	2001      	movs	r0, #1
10008efa:	47c0      	blx	r8

    data[0] = AKM_FUSE_ROM_ACCESS;
10008efc:	231f      	movs	r3, #31
10008efe:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10008f00:	4653      	mov	r3, sl
10008f02:	2201      	movs	r2, #1
10008f04:	5ce0      	ldrb	r0, [r4, r3]
10008f06:	210a      	movs	r1, #10
10008f08:	0033      	movs	r3, r6
10008f0a:	47b8      	blx	r7
10008f0c:	2800      	cmp	r0, #0
10008f0e:	d1d4      	bne.n	10008eba <mpu_init+0x116>
        return -1;
    delay_ms(1);
10008f10:	3001      	adds	r0, #1
10008f12:	47c0      	blx	r8

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
10008f14:	4653      	mov	r3, sl
10008f16:	2203      	movs	r2, #3
10008f18:	5ce0      	ldrb	r0, [r4, r3]
10008f1a:	2110      	movs	r1, #16
10008f1c:	0033      	movs	r3, r6
10008f1e:	47c8      	blx	r9
10008f20:	2800      	cmp	r0, #0
10008f22:	d1ca      	bne.n	10008eba <mpu_init+0x116>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
10008f24:	7833      	ldrb	r3, [r6, #0]
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;

    data[0] = AKM_POWER_DOWN;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10008f26:	2201      	movs	r2, #1
    delay_ms(1);

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
10008f28:	3380      	adds	r3, #128	; 0x80
10008f2a:	85a3      	strh	r3, [r4, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
10008f2c:	7873      	ldrb	r3, [r6, #1]
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;

    data[0] = AKM_POWER_DOWN;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10008f2e:	210a      	movs	r1, #10

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
10008f30:	3380      	adds	r3, #128	; 0x80
10008f32:	85e3      	strh	r3, [r4, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
10008f34:	78b3      	ldrb	r3, [r6, #2]
10008f36:	3380      	adds	r3, #128	; 0x80
10008f38:	8623      	strh	r3, [r4, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
10008f3a:	2310      	movs	r3, #16
10008f3c:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10008f3e:	4653      	mov	r3, sl
10008f40:	5ce0      	ldrb	r0, [r4, r3]
10008f42:	0033      	movs	r3, r6
10008f44:	47b8      	blx	r7
10008f46:	2800      	cmp	r0, #0
10008f48:	d1b7      	bne.n	10008eba <mpu_init+0x116>
        return -1;
    delay_ms(1);
10008f4a:	3001      	adds	r0, #1
10008f4c:	47c0      	blx	r8

    mpu_set_bypass(0);
10008f4e:	2000      	movs	r0, #0
10008f50:	47d8      	blx	fp

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
10008f52:	2340      	movs	r3, #64	; 0x40
10008f54:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
10008f56:	6823      	ldr	r3, [r4, #0]
10008f58:	2201      	movs	r2, #1
10008f5a:	7e99      	ldrb	r1, [r3, #26]
10008f5c:	6863      	ldr	r3, [r4, #4]
10008f5e:	7818      	ldrb	r0, [r3, #0]
10008f60:	0033      	movs	r3, r6
10008f62:	47b8      	blx	r7
10008f64:	2800      	cmp	r0, #0
10008f66:	d1a8      	bne.n	10008eba <mpu_init+0x116>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
10008f68:	4653      	mov	r3, sl
10008f6a:	2280      	movs	r2, #128	; 0x80
10008f6c:	5ce3      	ldrb	r3, [r4, r3]
10008f6e:	4252      	negs	r2, r2
10008f70:	4313      	orrs	r3, r2
10008f72:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
10008f74:	6823      	ldr	r3, [r4, #0]
10008f76:	3281      	adds	r2, #129	; 0x81
10008f78:	7f99      	ldrb	r1, [r3, #30]
10008f7a:	6863      	ldr	r3, [r4, #4]
10008f7c:	7818      	ldrb	r0, [r3, #0]
10008f7e:	0033      	movs	r3, r6
10008f80:	47b8      	blx	r7
10008f82:	2800      	cmp	r0, #0
10008f84:	d199      	bne.n	10008eba <mpu_init+0x116>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
10008f86:	2302      	movs	r3, #2
10008f88:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
10008f8a:	6823      	ldr	r3, [r4, #0]
10008f8c:	2201      	movs	r2, #1
10008f8e:	7fd9      	ldrb	r1, [r3, #31]
10008f90:	6863      	ldr	r3, [r4, #4]
10008f92:	7818      	ldrb	r0, [r3, #0]
10008f94:	0033      	movs	r3, r6
10008f96:	47b8      	blx	r7
10008f98:	2800      	cmp	r0, #0
10008f9a:	d000      	beq.n	10008f9e <mpu_init+0x1fa>
10008f9c:	e78d      	b.n	10008eba <mpu_init+0x116>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
10008f9e:	2388      	movs	r3, #136	; 0x88
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
10008fa0:	6822      	ldr	r2, [r4, #0]
    data[0] = AKM_REG_ST1;
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
10008fa2:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
10008fa4:	3b68      	subs	r3, #104	; 0x68
10008fa6:	5cd1      	ldrb	r1, [r2, r3]
10008fa8:	6863      	ldr	r3, [r4, #4]
10008faa:	2201      	movs	r2, #1
10008fac:	7818      	ldrb	r0, [r3, #0]
10008fae:	0033      	movs	r3, r6
10008fb0:	47b8      	blx	r7
10008fb2:	2800      	cmp	r0, #0
10008fb4:	d000      	beq.n	10008fb8 <mpu_init+0x214>
10008fb6:	e780      	b.n	10008eba <mpu_init+0x116>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
10008fb8:	232a      	movs	r3, #42	; 0x2a
10008fba:	5ce3      	ldrb	r3, [r4, r3]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
10008fbc:	6822      	ldr	r2, [r4, #0]
    data[0] = BIT_SLAVE_EN | 8;
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
10008fbe:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
10008fc0:	2321      	movs	r3, #33	; 0x21
10008fc2:	5cd1      	ldrb	r1, [r2, r3]
10008fc4:	6863      	ldr	r3, [r4, #4]
10008fc6:	2201      	movs	r2, #1
10008fc8:	7818      	ldrb	r0, [r3, #0]
10008fca:	0033      	movs	r3, r6
10008fcc:	47b8      	blx	r7
10008fce:	2800      	cmp	r0, #0
10008fd0:	d000      	beq.n	10008fd4 <mpu_init+0x230>
10008fd2:	e772      	b.n	10008eba <mpu_init+0x116>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
10008fd4:	230a      	movs	r3, #10
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
10008fd6:	6822      	ldr	r2, [r4, #0]
    data[0] = st.chip_cfg.compass_addr;
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
10008fd8:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
10008fda:	3318      	adds	r3, #24
10008fdc:	5cd1      	ldrb	r1, [r2, r3]
10008fde:	6863      	ldr	r3, [r4, #4]
10008fe0:	2201      	movs	r2, #1
10008fe2:	7818      	ldrb	r0, [r3, #0]
10008fe4:	0033      	movs	r3, r6
10008fe6:	47b8      	blx	r7
10008fe8:	2800      	cmp	r0, #0
10008fea:	d000      	beq.n	10008fee <mpu_init+0x24a>
10008fec:	e765      	b.n	10008eba <mpu_init+0x116>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
10008fee:	2381      	movs	r3, #129	; 0x81
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
10008ff0:	6822      	ldr	r2, [r4, #0]
    data[0] = AKM_REG_CNTL;
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
10008ff2:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
10008ff4:	3b5e      	subs	r3, #94	; 0x5e
10008ff6:	5cd1      	ldrb	r1, [r2, r3]
10008ff8:	6863      	ldr	r3, [r4, #4]
10008ffa:	2201      	movs	r2, #1
10008ffc:	7818      	ldrb	r0, [r3, #0]
10008ffe:	0033      	movs	r3, r6
10009000:	47b8      	blx	r7
10009002:	2800      	cmp	r0, #0
10009004:	d000      	beq.n	10009008 <mpu_init+0x264>
10009006:	e758      	b.n	10008eba <mpu_init+0x116>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
10009008:	2311      	movs	r3, #17
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
1000900a:	6822      	ldr	r2, [r4, #0]
    data[0] = BIT_SLAVE_EN | 1;
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
1000900c:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
1000900e:	3315      	adds	r3, #21
10009010:	5cd1      	ldrb	r1, [r2, r3]
10009012:	6863      	ldr	r3, [r4, #4]
10009014:	2201      	movs	r2, #1
10009016:	7818      	ldrb	r0, [r3, #0]
10009018:	0033      	movs	r3, r6
1000901a:	47b8      	blx	r7
1000901c:	2800      	cmp	r0, #0
1000901e:	d000      	beq.n	10009022 <mpu_init+0x27e>
10009020:	e74b      	b.n	10008eba <mpu_init+0x116>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
10009022:	2303      	movs	r3, #3
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
10009024:	6822      	ldr	r2, [r4, #0]
    data[0] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
10009026:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
10009028:	3324      	adds	r3, #36	; 0x24
1000902a:	5cd1      	ldrb	r1, [r2, r3]
1000902c:	6863      	ldr	r3, [r4, #4]
1000902e:	2201      	movs	r2, #1
10009030:	7818      	ldrb	r0, [r3, #0]
10009032:	0033      	movs	r3, r6
10009034:	47b8      	blx	r7
10009036:	e740      	b.n	10008eba <mpu_init+0x116>
10009038:	1001b5d0 	.word	0x1001b5d0
1000903c:	10008301 	.word	0x10008301
10009040:	1000810d 	.word	0x1000810d
10009044:	1001830b 	.word	0x1001830b
10009048:	10008605 	.word	0x10008605
1000904c:	100086d9 	.word	0x100086d9
10009050:	10008759 	.word	0x10008759
10009054:	10008b25 	.word	0x10008b25
10009058:	1000886d 	.word	0x1000886d
1000905c:	1000d2a9 	.word	0x1000d2a9
10009060:	100088d1 	.word	0x100088d1
10009064:	10008359 	.word	0x10008359
10009068:	10019718 	.word	0x10019718
1000906c:	10018575 	.word	0x10018575
10009070:	10019588 	.word	0x10019588
10009074:	10008809 	.word	0x10008809
10009078:	10008bf1 	.word	0x10008bf1

1000907c <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
1000907c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000907e:	000d      	movs	r5, r1
10009080:	b083      	sub	sp, #12
10009082:	1e16      	subs	r6, r2, #0
    unsigned char tmp[2];

    if (!data)
10009084:	d021      	beq.n	100090ca <mpu_write_mem+0x4e>
        return -1;
    if (!st.chip_cfg.sensors)
10009086:	4c12      	ldr	r4, [pc, #72]	; (100090d0 <mpu_write_mem+0x54>)
10009088:	7aa3      	ldrb	r3, [r4, #10]
1000908a:	2b00      	cmp	r3, #0
1000908c:	d01d      	beq.n	100090ca <mpu_write_mem+0x4e>
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
1000908e:	0a02      	lsrs	r2, r0, #8
10009090:	ab01      	add	r3, sp, #4
10009092:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
10009094:	b2c0      	uxtb	r0, r0

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
10009096:	6862      	ldr	r2, [r4, #4]
        return -1;
    if (!st.chip_cfg.sensors)
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
10009098:	7058      	strb	r0, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
1000909a:	1840      	adds	r0, r0, r1
1000909c:	8951      	ldrh	r1, [r2, #10]
1000909e:	4288      	cmp	r0, r1
100090a0:	dc13      	bgt.n	100090ca <mpu_write_mem+0x4e>
        return -1;

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
100090a2:	6821      	ldr	r1, [r4, #0]
100090a4:	7810      	ldrb	r0, [r2, #0]
100090a6:	7ec9      	ldrb	r1, [r1, #27]
100090a8:	2202      	movs	r2, #2
100090aa:	4f0a      	ldr	r7, [pc, #40]	; (100090d4 <mpu_write_mem+0x58>)
100090ac:	47b8      	blx	r7
100090ae:	2800      	cmp	r0, #0
100090b0:	d10b      	bne.n	100090ca <mpu_write_mem+0x4e>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
100090b2:	6823      	ldr	r3, [r4, #0]
100090b4:	b2ea      	uxtb	r2, r5
100090b6:	7e19      	ldrb	r1, [r3, #24]
100090b8:	6863      	ldr	r3, [r4, #4]
100090ba:	7818      	ldrb	r0, [r3, #0]
100090bc:	0033      	movs	r3, r6
100090be:	47b8      	blx	r7
100090c0:	1e43      	subs	r3, r0, #1
100090c2:	4198      	sbcs	r0, r3
100090c4:	4240      	negs	r0, r0
        return -1;
    return 0;
}
100090c6:	b003      	add	sp, #12
100090c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        unsigned char *data)
{
    unsigned char tmp[2];

    if (!data)
        return -1;
100090ca:	2001      	movs	r0, #1
100090cc:	4240      	negs	r0, r0
100090ce:	e7fa      	b.n	100090c6 <mpu_write_mem+0x4a>
100090d0:	1001b5d0 	.word	0x1001b5d0
100090d4:	10008301 	.word	0x10008301

100090d8 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
100090d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100090da:	000d      	movs	r5, r1
100090dc:	b083      	sub	sp, #12
100090de:	1e16      	subs	r6, r2, #0
    unsigned char tmp[2];

    if (!data)
100090e0:	d022      	beq.n	10009128 <mpu_read_mem+0x50>
        return -1;
    if (!st.chip_cfg.sensors)
100090e2:	4c13      	ldr	r4, [pc, #76]	; (10009130 <mpu_read_mem+0x58>)
100090e4:	7aa3      	ldrb	r3, [r4, #10]
100090e6:	2b00      	cmp	r3, #0
100090e8:	d01e      	beq.n	10009128 <mpu_read_mem+0x50>
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
100090ea:	0a02      	lsrs	r2, r0, #8
100090ec:	ab01      	add	r3, sp, #4
100090ee:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
100090f0:	b2c0      	uxtb	r0, r0

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
100090f2:	6862      	ldr	r2, [r4, #4]
        return -1;
    if (!st.chip_cfg.sensors)
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
100090f4:	7058      	strb	r0, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
100090f6:	1840      	adds	r0, r0, r1
100090f8:	8951      	ldrh	r1, [r2, #10]
100090fa:	4288      	cmp	r0, r1
100090fc:	dc14      	bgt.n	10009128 <mpu_read_mem+0x50>
        return -1;

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
100090fe:	6821      	ldr	r1, [r4, #0]
10009100:	7810      	ldrb	r0, [r2, #0]
10009102:	7ec9      	ldrb	r1, [r1, #27]
10009104:	2202      	movs	r2, #2
10009106:	4f0b      	ldr	r7, [pc, #44]	; (10009134 <mpu_read_mem+0x5c>)
10009108:	47b8      	blx	r7
1000910a:	2800      	cmp	r0, #0
1000910c:	d10c      	bne.n	10009128 <mpu_read_mem+0x50>
        return -1;
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
1000910e:	6823      	ldr	r3, [r4, #0]
10009110:	b2ea      	uxtb	r2, r5
10009112:	7e19      	ldrb	r1, [r3, #24]
10009114:	6863      	ldr	r3, [r4, #4]
10009116:	4c08      	ldr	r4, [pc, #32]	; (10009138 <mpu_read_mem+0x60>)
10009118:	7818      	ldrb	r0, [r3, #0]
1000911a:	0033      	movs	r3, r6
1000911c:	47a0      	blx	r4
1000911e:	1e43      	subs	r3, r0, #1
10009120:	4198      	sbcs	r0, r3
10009122:	4240      	negs	r0, r0
        return -1;
    return 0;
}
10009124:	b003      	add	sp, #12
10009126:	bdf0      	pop	{r4, r5, r6, r7, pc}
        unsigned char *data)
{
    unsigned char tmp[2];

    if (!data)
        return -1;
10009128:	2001      	movs	r0, #1
1000912a:	4240      	negs	r0, r0
1000912c:	e7fa      	b.n	10009124 <mpu_read_mem+0x4c>
1000912e:	46c0      	nop			; (mov r8, r8)
10009130:	1001b5d0 	.word	0x1001b5d0
10009134:	10008301 	.word	0x10008301
10009138:	10008359 	.word	0x10008359

1000913c <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
1000913c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000913e:	464d      	mov	r5, r9
10009140:	4644      	mov	r4, r8
10009142:	465f      	mov	r7, fp
10009144:	4656      	mov	r6, sl
10009146:	b4f0      	push	{r4, r5, r6, r7}
10009148:	b089      	sub	sp, #36	; 0x24
1000914a:	9301      	str	r3, [sp, #4]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
1000914c:	2325      	movs	r3, #37	; 0x25
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
1000914e:	9200      	str	r2, [sp, #0]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
10009150:	4a2a      	ldr	r2, [pc, #168]	; (100091fc <mpu_load_firmware+0xc0>)
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
10009152:	4680      	mov	r8, r0
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
10009154:	5cd3      	ldrb	r3, [r2, r3]
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
10009156:	4689      	mov	r9, r1
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
10009158:	2b00      	cmp	r3, #0
1000915a:	d129      	bne.n	100091b0 <mpu_load_firmware+0x74>
        /* DMP should only be loaded once. */
        return -1;

    if (!firmware)
1000915c:	2900      	cmp	r1, #0
1000915e:	d027      	beq.n	100091b0 <mpu_load_firmware+0x74>
        return -1;
    for (ii = 0; ii < length; ii += this_write) {
10009160:	2800      	cmp	r0, #0
10009162:	d02e      	beq.n	100091c2 <mpu_load_firmware+0x86>
10009164:	4b26      	ldr	r3, [pc, #152]	; (10009200 <mpu_load_firmware+0xc4>)
10009166:	2400      	movs	r4, #0
10009168:	469a      	mov	sl, r3
        this_write = min(LOAD_CHUNK, length - ii);
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
            return -1;
        if (mpu_read_mem(ii, this_write, cur))
1000916a:	4b26      	ldr	r3, [pc, #152]	; (10009204 <mpu_load_firmware+0xc8>)
1000916c:	469b      	mov	fp, r3
1000916e:	e011      	b.n	10009194 <mpu_load_firmware+0x58>
10009170:	aa04      	add	r2, sp, #16
10009172:	0031      	movs	r1, r6
10009174:	0020      	movs	r0, r4
10009176:	47d8      	blx	fp
10009178:	2800      	cmp	r0, #0
1000917a:	d119      	bne.n	100091b0 <mpu_load_firmware+0x74>
            return -1;
        if (memcmp(firmware+ii, cur, this_write))
1000917c:	042a      	lsls	r2, r5, #16
1000917e:	0c12      	lsrs	r2, r2, #16
10009180:	a904      	add	r1, sp, #16
10009182:	0038      	movs	r0, r7
10009184:	4b20      	ldr	r3, [pc, #128]	; (10009208 <mpu_load_firmware+0xcc>)
10009186:	4798      	blx	r3
10009188:	2800      	cmp	r0, #0
1000918a:	d134      	bne.n	100091f6 <mpu_load_firmware+0xba>
        /* DMP should only be loaded once. */
        return -1;

    if (!firmware)
        return -1;
    for (ii = 0; ii < length; ii += this_write) {
1000918c:	1934      	adds	r4, r6, r4
1000918e:	b2a4      	uxth	r4, r4
10009190:	45a0      	cmp	r8, r4
10009192:	d916      	bls.n	100091c2 <mpu_load_firmware+0x86>
        this_write = min(LOAD_CHUNK, length - ii);
10009194:	4643      	mov	r3, r8
10009196:	1b1d      	subs	r5, r3, r4
10009198:	2d10      	cmp	r5, #16
1000919a:	dd00      	ble.n	1000919e <mpu_load_firmware+0x62>
1000919c:	2510      	movs	r5, #16
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
1000919e:	464b      	mov	r3, r9
        return -1;

    if (!firmware)
        return -1;
    for (ii = 0; ii < length; ii += this_write) {
        this_write = min(LOAD_CHUNK, length - ii);
100091a0:	b2ae      	uxth	r6, r5
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
100091a2:	191f      	adds	r7, r3, r4
100091a4:	003a      	movs	r2, r7
100091a6:	0031      	movs	r1, r6
100091a8:	0020      	movs	r0, r4
100091aa:	47d0      	blx	sl
100091ac:	2800      	cmp	r0, #0
100091ae:	d0df      	beq.n	10009170 <mpu_load_firmware+0x34>
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
        /* DMP should only be loaded once. */
        return -1;
100091b0:	2001      	movs	r0, #1
100091b2:	4240      	negs	r0, r0
        return -1;

    st.chip_cfg.dmp_loaded = 1;
    st.chip_cfg.dmp_sample_rate = sample_rate;
    return 0;
}
100091b4:	b009      	add	sp, #36	; 0x24
100091b6:	bc3c      	pop	{r2, r3, r4, r5}
100091b8:	4690      	mov	r8, r2
100091ba:	4699      	mov	r9, r3
100091bc:	46a2      	mov	sl, r4
100091be:	46ab      	mov	fp, r5
100091c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (memcmp(firmware+ii, cur, this_write))
            return -2;
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
100091c2:	9900      	ldr	r1, [sp, #0]
100091c4:	ab03      	add	r3, sp, #12
100091c6:	0a0a      	lsrs	r2, r1, #8
100091c8:	701a      	strb	r2, [r3, #0]
    tmp[1] = start_addr & 0xFF;
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
100091ca:	4a0c      	ldr	r2, [pc, #48]	; (100091fc <mpu_load_firmware+0xc0>)
            return -2;
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
    tmp[1] = start_addr & 0xFF;
100091cc:	7059      	strb	r1, [r3, #1]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
100091ce:	6812      	ldr	r2, [r2, #0]
100091d0:	4c0e      	ldr	r4, [pc, #56]	; (1000920c <mpu_load_firmware+0xd0>)
100091d2:	9200      	str	r2, [sp, #0]
100091d4:	7f51      	ldrb	r1, [r2, #29]
100091d6:	4a09      	ldr	r2, [pc, #36]	; (100091fc <mpu_load_firmware+0xc0>)
100091d8:	6852      	ldr	r2, [r2, #4]
100091da:	9200      	str	r2, [sp, #0]
100091dc:	7810      	ldrb	r0, [r2, #0]
100091de:	2202      	movs	r2, #2
100091e0:	47a0      	blx	r4
100091e2:	2800      	cmp	r0, #0
100091e4:	d1e4      	bne.n	100091b0 <mpu_load_firmware+0x74>
        return -1;

    st.chip_cfg.dmp_loaded = 1;
100091e6:	2201      	movs	r2, #1
100091e8:	2325      	movs	r3, #37	; 0x25
100091ea:	4904      	ldr	r1, [pc, #16]	; (100091fc <mpu_load_firmware+0xc0>)
100091ec:	54ca      	strb	r2, [r1, r3]
    st.chip_cfg.dmp_sample_rate = sample_rate;
100091ee:	466a      	mov	r2, sp
100091f0:	8892      	ldrh	r2, [r2, #4]
100091f2:	84ca      	strh	r2, [r1, #38]	; 0x26
    return 0;
100091f4:	e7de      	b.n	100091b4 <mpu_load_firmware+0x78>
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
            return -1;
        if (mpu_read_mem(ii, this_write, cur))
            return -1;
        if (memcmp(firmware+ii, cur, this_write))
            return -2;
100091f6:	2002      	movs	r0, #2
100091f8:	4240      	negs	r0, r0
100091fa:	e7db      	b.n	100091b4 <mpu_load_firmware+0x78>
100091fc:	1001b5d0 	.word	0x1001b5d0
10009200:	1000907d 	.word	0x1000907d
10009204:	100090d9 	.word	0x100090d9
10009208:	100182b1 	.word	0x100182b1
1000920c:	10008301 	.word	0x10008301

10009210 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
10009210:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
10009212:	2624      	movs	r6, #36	; 0x24
10009214:	4c1f      	ldr	r4, [pc, #124]	; (10009294 <mpu_set_dmp_state+0x84>)
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
10009216:	b083      	sub	sp, #12
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
10009218:	5da3      	ldrb	r3, [r4, r6]
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
1000921a:	0005      	movs	r5, r0
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
1000921c:	4283      	cmp	r3, r0
1000921e:	d033      	beq.n	10009288 <mpu_set_dmp_state+0x78>
        return 0;

    if (enable) {
10009220:	2800      	cmp	r0, #0
10009222:	d01f      	beq.n	10009264 <mpu_set_dmp_state+0x54>
        if (!st.chip_cfg.dmp_loaded)
10009224:	2325      	movs	r3, #37	; 0x25
10009226:	5ce3      	ldrb	r3, [r4, r3]
10009228:	2b00      	cmp	r3, #0
1000922a:	d02f      	beq.n	1000928c <mpu_set_dmp_state+0x7c>
            return -1;
        /* Disable data ready interrupt. */
        set_int_enable(0);
1000922c:	4d1a      	ldr	r5, [pc, #104]	; (10009298 <mpu_set_dmp_state+0x88>)
1000922e:	2000      	movs	r0, #0
10009230:	47a8      	blx	r5
        /* Disable bypass mode. */
        mpu_set_bypass(0);
10009232:	4b1a      	ldr	r3, [pc, #104]	; (1000929c <mpu_set_dmp_state+0x8c>)
10009234:	2000      	movs	r0, #0
10009236:	4798      	blx	r3
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
10009238:	4b19      	ldr	r3, [pc, #100]	; (100092a0 <mpu_set_dmp_state+0x90>)
1000923a:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
1000923c:	4798      	blx	r3
        /* Remove FIFO elements. */
        tmp = 0;
1000923e:	466b      	mov	r3, sp
10009240:	2200      	movs	r2, #0
10009242:	3307      	adds	r3, #7
10009244:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
10009246:	6862      	ldr	r2, [r4, #4]
10009248:	2123      	movs	r1, #35	; 0x23
1000924a:	7810      	ldrb	r0, [r2, #0]
1000924c:	4f15      	ldr	r7, [pc, #84]	; (100092a4 <mpu_set_dmp_state+0x94>)
1000924e:	2201      	movs	r2, #1
10009250:	47b8      	blx	r7
        st.chip_cfg.dmp_on = 1;
10009252:	2301      	movs	r3, #1
        /* Enable DMP interrupt. */
        set_int_enable(1);
10009254:	2001      	movs	r0, #1
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
        /* Remove FIFO elements. */
        tmp = 0;
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 1;
10009256:	55a3      	strb	r3, [r4, r6]
        /* Enable DMP interrupt. */
        set_int_enable(1);
10009258:	47a8      	blx	r5
        mpu_reset_fifo();
1000925a:	4b13      	ldr	r3, [pc, #76]	; (100092a8 <mpu_set_dmp_state+0x98>)
1000925c:	4798      	blx	r3
        tmp = st.chip_cfg.fifo_enable;
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
    }
    return 0;
1000925e:	2000      	movs	r0, #0
}
10009260:	b003      	add	sp, #12
10009262:	bdf0      	pop	{r4, r5, r6, r7, pc}
        /* Enable DMP interrupt. */
        set_int_enable(1);
        mpu_reset_fifo();
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
10009264:	4b0c      	ldr	r3, [pc, #48]	; (10009298 <mpu_set_dmp_state+0x88>)
10009266:	2000      	movs	r0, #0
10009268:	4798      	blx	r3
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
1000926a:	466b      	mov	r3, sp
1000926c:	7c22      	ldrb	r2, [r4, #16]
1000926e:	3307      	adds	r3, #7
10009270:	701a      	strb	r2, [r3, #0]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
10009272:	6862      	ldr	r2, [r4, #4]
10009274:	2123      	movs	r1, #35	; 0x23
10009276:	7810      	ldrb	r0, [r2, #0]
10009278:	4f0a      	ldr	r7, [pc, #40]	; (100092a4 <mpu_set_dmp_state+0x94>)
1000927a:	2201      	movs	r2, #1
1000927c:	47b8      	blx	r7
        st.chip_cfg.dmp_on = 0;
        mpu_reset_fifo();
1000927e:	4b0a      	ldr	r3, [pc, #40]	; (100092a8 <mpu_set_dmp_state+0x98>)
        /* Disable DMP interrupt. */
        set_int_enable(0);
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
        st.chip_cfg.dmp_on = 0;
10009280:	55a5      	strb	r5, [r4, r6]
        mpu_reset_fifo();
10009282:	4798      	blx	r3
10009284:	2000      	movs	r0, #0
10009286:	e7eb      	b.n	10009260 <mpu_set_dmp_state+0x50>
 */
int mpu_set_dmp_state(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
        return 0;
10009288:	2000      	movs	r0, #0
1000928a:	e7e9      	b.n	10009260 <mpu_set_dmp_state+0x50>

    if (enable) {
        if (!st.chip_cfg.dmp_loaded)
            return -1;
1000928c:	2001      	movs	r0, #1
1000928e:	4240      	negs	r0, r0
10009290:	e7e6      	b.n	10009260 <mpu_set_dmp_state+0x50>
10009292:	46c0      	nop			; (mov r8, r8)
10009294:	1001b5d0 	.word	0x1001b5d0
10009298:	100083f9 	.word	0x100083f9
1000929c:	100088d1 	.word	0x100088d1
100092a0:	10008b25 	.word	0x10008b25
100092a4:	10008301 	.word	0x10008301
100092a8:	10008465 	.word	0x10008465

100092ac <mpu_get_compass_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
100092ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100092ae:	4647      	mov	r7, r8
100092b0:	b480      	push	{r7}
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
100092b2:	4e28      	ldr	r6, [pc, #160]	; (10009354 <mpu_get_compass_reg+0xa8>)
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
100092b4:	b084      	sub	sp, #16
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
100092b6:	7ab3      	ldrb	r3, [r6, #10]
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
100092b8:	0004      	movs	r4, r0
100092ba:	4688      	mov	r8, r1
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
100092bc:	07db      	lsls	r3, r3, #31
100092be:	d53f      	bpl.n	10009340 <mpu_get_compass_reg+0x94>
        return -1;
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
100092c0:	2328      	movs	r3, #40	; 0x28
100092c2:	6832      	ldr	r2, [r6, #0]
100092c4:	af01      	add	r7, sp, #4
100092c6:	5cd1      	ldrb	r1, [r2, r3]
100092c8:	6873      	ldr	r3, [r6, #4]
100092ca:	4d23      	ldr	r5, [pc, #140]	; (10009358 <mpu_get_compass_reg+0xac>)
100092cc:	7818      	ldrb	r0, [r3, #0]
100092ce:	2208      	movs	r2, #8
100092d0:	003b      	movs	r3, r7
100092d2:	47a8      	blx	r5
100092d4:	1e05      	subs	r5, r0, #0
100092d6:	d133      	bne.n	10009340 <mpu_get_compass_reg+0x94>
        return -2;
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
100092d8:	2203      	movs	r2, #3
100092da:	783b      	ldrb	r3, [r7, #0]
100092dc:	4013      	ands	r3, r2
100092de:	2b01      	cmp	r3, #1
100092e0:	d131      	bne.n	10009346 <mpu_get_compass_reg+0x9a>
        return -2;
    if (tmp[7] & AKM_OVERFLOW)
100092e2:	79fb      	ldrb	r3, [r7, #7]
100092e4:	2b7f      	cmp	r3, #127	; 0x7f
100092e6:	d831      	bhi.n	1000934c <mpu_get_compass_reg+0xa0>
        return -3;
#endif
    data[0] = (tmp[2] << 8) | tmp[1];
100092e8:	78b9      	ldrb	r1, [r7, #2]
100092ea:	787b      	ldrb	r3, [r7, #1]
100092ec:	0209      	lsls	r1, r1, #8
100092ee:	4319      	orrs	r1, r3
100092f0:	b209      	sxth	r1, r1
100092f2:	8021      	strh	r1, [r4, #0]
    data[1] = (tmp[4] << 8) | tmp[3];
100092f4:	793a      	ldrb	r2, [r7, #4]
100092f6:	78fb      	ldrb	r3, [r7, #3]
100092f8:	0212      	lsls	r2, r2, #8
100092fa:	431a      	orrs	r2, r3
100092fc:	b212      	sxth	r2, r2
100092fe:	8062      	strh	r2, [r4, #2]
    data[2] = (tmp[6] << 8) | tmp[5];
10009300:	79bb      	ldrb	r3, [r7, #6]
10009302:	7978      	ldrb	r0, [r7, #5]
10009304:	021b      	lsls	r3, r3, #8
10009306:	4303      	orrs	r3, r0
10009308:	b21b      	sxth	r3, r3
1000930a:	80a3      	strh	r3, [r4, #4]

    data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
1000930c:	272c      	movs	r7, #44	; 0x2c
1000930e:	5ff0      	ldrsh	r0, [r6, r7]
10009310:	4341      	muls	r1, r0
10009312:	1209      	asrs	r1, r1, #8
10009314:	8021      	strh	r1, [r4, #0]
    data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
10009316:	202e      	movs	r0, #46	; 0x2e
10009318:	5e31      	ldrsh	r1, [r6, r0]
1000931a:	434a      	muls	r2, r1
1000931c:	1212      	asrs	r2, r2, #8
1000931e:	8062      	strh	r2, [r4, #2]
    data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
10009320:	2130      	movs	r1, #48	; 0x30
10009322:	5e72      	ldrsh	r2, [r6, r1]
10009324:	4353      	muls	r3, r2
10009326:	121b      	asrs	r3, r3, #8
10009328:	80a3      	strh	r3, [r4, #4]

    if (timestamp)
1000932a:	4643      	mov	r3, r8
1000932c:	2b00      	cmp	r3, #0
1000932e:	d002      	beq.n	10009336 <mpu_get_compass_reg+0x8a>
    }
    return 0;
}
static inline void get_ms(uint32_t *count)
{
    uint32_t load = (uint32_t)(26000 - dualtimer_get_value(DUALTIMER_TIMER2));
10009330:	2001      	movs	r0, #1
10009332:	4b0a      	ldr	r3, [pc, #40]	; (1000935c <mpu_get_compass_reg+0xb0>)
10009334:	4798      	blx	r3
        get_ms(timestamp);
    return 0;
#else
    return -1;
#endif
}
10009336:	0028      	movs	r0, r5
10009338:	b004      	add	sp, #16
1000933a:	bc04      	pop	{r2}
1000933c:	4690      	mov	r8, r2
1000933e:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
        return -1;
10009340:	2501      	movs	r5, #1
10009342:	426d      	negs	r5, r5
10009344:	e7f7      	b.n	10009336 <mpu_get_compass_reg+0x8a>
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
        return -2;
10009346:	2502      	movs	r5, #2
10009348:	426d      	negs	r5, r5
1000934a:	e7f4      	b.n	10009336 <mpu_get_compass_reg+0x8a>
    if (tmp[7] & AKM_OVERFLOW)
        return -3;
1000934c:	2503      	movs	r5, #3
1000934e:	426d      	negs	r5, r5
10009350:	e7f1      	b.n	10009336 <mpu_get_compass_reg+0x8a>
10009352:	46c0      	nop			; (mov r8, r8)
10009354:	1001b5d0 	.word	0x1001b5d0
10009358:	10008359 	.word	0x10008359
1000935c:	100081a1 	.word	0x100081a1

10009360 <mpu_get_compass_fsr>:
 *  @return     0 if successful.
 */
int mpu_get_compass_fsr(unsigned short *fsr)
{
#ifdef AK89xx_SECONDARY
    fsr[0] = st.hw->compass_fsr;
10009360:	4b02      	ldr	r3, [pc, #8]	; (1000936c <mpu_get_compass_fsr+0xc>)
10009362:	685b      	ldr	r3, [r3, #4]
10009364:	899b      	ldrh	r3, [r3, #12]
10009366:	8003      	strh	r3, [r0, #0]
    return 0;
#else
    return -1;
#endif
}
10009368:	2000      	movs	r0, #0
1000936a:	4770      	bx	lr
1000936c:	1001b5d0 	.word	0x1001b5d0

10009370 <dmp_enable_gyro_cal.part.1>:
 *  called with @e DMP_FEATURE_SEND_CAL_GYRO, the biases will also be
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
10009370:	b500      	push	{lr}
10009372:	b085      	sub	sp, #20
{
    if (enable) {
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
10009374:	2209      	movs	r2, #9
10009376:	4906      	ldr	r1, [pc, #24]	; (10009390 <dmp_enable_gyro_cal.part.1+0x20>)
10009378:	a801      	add	r0, sp, #4
1000937a:	4b06      	ldr	r3, [pc, #24]	; (10009394 <dmp_enable_gyro_cal.part.1+0x24>)
1000937c:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
1000937e:	2097      	movs	r0, #151	; 0x97
10009380:	aa01      	add	r2, sp, #4
10009382:	2109      	movs	r1, #9
10009384:	4b04      	ldr	r3, [pc, #16]	; (10009398 <dmp_enable_gyro_cal.part.1+0x28>)
10009386:	00c0      	lsls	r0, r0, #3
10009388:	4798      	blx	r3
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    }
}
1000938a:	b005      	add	sp, #20
1000938c:	bd00      	pop	{pc}
1000938e:	46c0      	nop			; (mov r8, r8)
10009390:	10019964 	.word	0x10019964
10009394:	100182cf 	.word	0x100182cf
10009398:	1000907d 	.word	0x1000907d

1000939c <dmp_load_motion_driver_firmware>:
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
1000939c:	2280      	movs	r2, #128	; 0x80
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
1000939e:	b510      	push	{r4, lr}
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
100093a0:	23c8      	movs	r3, #200	; 0xc8
100093a2:	00d2      	lsls	r2, r2, #3
100093a4:	4902      	ldr	r1, [pc, #8]	; (100093b0 <dmp_load_motion_driver_firmware+0x14>)
100093a6:	4c03      	ldr	r4, [pc, #12]	; (100093b4 <dmp_load_motion_driver_firmware+0x18>)
100093a8:	4803      	ldr	r0, [pc, #12]	; (100093b8 <dmp_load_motion_driver_firmware+0x1c>)
100093aa:	47a0      	blx	r4
        DMP_SAMPLE_RATE);
}
100093ac:	bd10      	pop	{r4, pc}
100093ae:	46c0      	nop			; (mov r8, r8)
100093b0:	100199b0 	.word	0x100199b0
100093b4:	1000913d 	.word	0x1000913d
100093b8:	00000bf6 	.word	0x00000bf6

100093bc <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
100093bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100093be:	4647      	mov	r7, r8
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
100093c0:	4c3a      	ldr	r4, [pc, #232]	; (100094ac <dmp_set_orientation+0xf0>)
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
100093c2:	b480      	push	{r7}
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
100093c4:	0021      	movs	r1, r4
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
100093c6:	b086      	sub	sp, #24
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
100093c8:	4b39      	ldr	r3, [pc, #228]	; (100094b0 <dmp_set_orientation+0xf4>)
100093ca:	af02      	add	r7, sp, #8
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
100093cc:	0005      	movs	r5, r0
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
100093ce:	310c      	adds	r1, #12
100093d0:	2203      	movs	r2, #3
100093d2:	0038      	movs	r0, r7
100093d4:	4698      	mov	r8, r3
100093d6:	4798      	blx	r3
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
100093d8:	0021      	movs	r1, r4
100093da:	ae03      	add	r6, sp, #12
100093dc:	3110      	adds	r1, #16
100093de:	2203      	movs	r2, #3
100093e0:	0030      	movs	r0, r6
100093e2:	47c0      	blx	r8
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
100093e4:	0021      	movs	r1, r4
100093e6:	2203      	movs	r2, #3
100093e8:	3114      	adds	r1, #20
100093ea:	a804      	add	r0, sp, #16
100093ec:	47c0      	blx	r8
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
100093ee:	0021      	movs	r1, r4
100093f0:	2203      	movs	r2, #3
100093f2:	3118      	adds	r1, #24
100093f4:	a805      	add	r0, sp, #20
100093f6:	47c0      	blx	r8

    gyro_regs[0] = gyro_axes[orient & 3];
100093f8:	2103      	movs	r1, #3
100093fa:	0008      	movs	r0, r1
100093fc:	466a      	mov	r2, sp
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
100093fe:	466c      	mov	r4, sp
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};

    gyro_regs[0] = gyro_axes[orient & 3];
10009400:	4028      	ands	r0, r5
10009402:	5c3b      	ldrb	r3, [r7, r0]
10009404:	7013      	strb	r3, [r2, #0]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
10009406:	08ea      	lsrs	r2, r5, #3
10009408:	400a      	ands	r2, r1
1000940a:	5cbb      	ldrb	r3, [r7, r2]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
    accel_regs[0] = accel_axes[orient & 3];
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
1000940c:	5cb2      	ldrb	r2, [r6, r2]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};

    gyro_regs[0] = gyro_axes[orient & 3];
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
1000940e:	7063      	strb	r3, [r4, #1]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
10009410:	09ab      	lsrs	r3, r5, #6
10009412:	400b      	ands	r3, r1
10009414:	5cf9      	ldrb	r1, [r7, r3]
    accel_regs[0] = accel_axes[orient & 3];
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
10009416:	5cf3      	ldrb	r3, [r6, r3]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};

    gyro_regs[0] = gyro_axes[orient & 3];
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
10009418:	70a1      	strb	r1, [r4, #2]
    accel_regs[0] = accel_axes[orient & 3];
1000941a:	5c31      	ldrb	r1, [r6, r0]
1000941c:	ac01      	add	r4, sp, #4
1000941e:	7021      	strb	r1, [r4, #0]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
10009420:	7062      	strb	r2, [r4, #1]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
10009422:	2103      	movs	r1, #3
10009424:	466a      	mov	r2, sp
10009426:	4823      	ldr	r0, [pc, #140]	; (100094b4 <dmp_set_orientation+0xf8>)
10009428:	4e23      	ldr	r6, [pc, #140]	; (100094b8 <dmp_set_orientation+0xfc>)
    gyro_regs[0] = gyro_axes[orient & 3];
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
    accel_regs[0] = accel_axes[orient & 3];
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
1000942a:	70a3      	strb	r3, [r4, #2]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
1000942c:	47b0      	blx	r6
1000942e:	2800      	cmp	r0, #0
10009430:	d138      	bne.n	100094a4 <dmp_set_orientation+0xe8>
        return -1;
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
10009432:	0022      	movs	r2, r4
10009434:	2103      	movs	r1, #3
10009436:	4821      	ldr	r0, [pc, #132]	; (100094bc <dmp_set_orientation+0x100>)
10009438:	47b0      	blx	r6
1000943a:	2800      	cmp	r0, #0
1000943c:	d132      	bne.n	100094a4 <dmp_set_orientation+0xe8>
        return -1;

    memcpy(gyro_regs, gyro_sign, 3);
1000943e:	2203      	movs	r2, #3
10009440:	a904      	add	r1, sp, #16
10009442:	4668      	mov	r0, sp
10009444:	47c0      	blx	r8
    memcpy(accel_regs, accel_sign, 3);
10009446:	466b      	mov	r3, sp
10009448:	8a9b      	ldrh	r3, [r3, #20]
1000944a:	8023      	strh	r3, [r4, #0]
1000944c:	466b      	mov	r3, sp
1000944e:	7d9b      	ldrb	r3, [r3, #22]
10009450:	70a3      	strb	r3, [r4, #2]
    if (orient & 4) {
10009452:	076b      	lsls	r3, r5, #29
10009454:	d504      	bpl.n	10009460 <dmp_set_orientation+0xa4>
        gyro_regs[0] |= 1;
10009456:	2337      	movs	r3, #55	; 0x37
10009458:	466a      	mov	r2, sp
1000945a:	7013      	strb	r3, [r2, #0]
        accel_regs[0] |= 1;
1000945c:	3b10      	subs	r3, #16
1000945e:	7023      	strb	r3, [r4, #0]
    }
    if (orient & 0x20) {
10009460:	06ab      	lsls	r3, r5, #26
10009462:	d504      	bpl.n	1000946e <dmp_set_orientation+0xb2>
        gyro_regs[1] |= 1;
10009464:	2357      	movs	r3, #87	; 0x57
10009466:	466a      	mov	r2, sp
10009468:	7053      	strb	r3, [r2, #1]
        accel_regs[1] |= 1;
1000946a:	3b10      	subs	r3, #16
1000946c:	7063      	strb	r3, [r4, #1]
    }
    if (orient & 0x100) {
1000946e:	05eb      	lsls	r3, r5, #23
10009470:	d412      	bmi.n	10009498 <dmp_set_orientation+0xdc>
        gyro_regs[2] |= 1;
        accel_regs[2] |= 1;
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
10009472:	2088      	movs	r0, #136	; 0x88
10009474:	466a      	mov	r2, sp
10009476:	2103      	movs	r1, #3
10009478:	00c0      	lsls	r0, r0, #3
1000947a:	47b0      	blx	r6
1000947c:	2800      	cmp	r0, #0
1000947e:	d111      	bne.n	100094a4 <dmp_set_orientation+0xe8>
        return -1;
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
10009480:	0022      	movs	r2, r4
10009482:	2103      	movs	r1, #3
10009484:	480e      	ldr	r0, [pc, #56]	; (100094c0 <dmp_set_orientation+0x104>)
10009486:	47b0      	blx	r6
10009488:	2800      	cmp	r0, #0
1000948a:	d10b      	bne.n	100094a4 <dmp_set_orientation+0xe8>
        return -1;
    dmp.orient = orient;
1000948c:	4b0d      	ldr	r3, [pc, #52]	; (100094c4 <dmp_set_orientation+0x108>)
1000948e:	811d      	strh	r5, [r3, #8]
    return 0;
}
10009490:	b006      	add	sp, #24
10009492:	bc04      	pop	{r2}
10009494:	4690      	mov	r8, r2
10009496:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (orient & 0x20) {
        gyro_regs[1] |= 1;
        accel_regs[1] |= 1;
    }
    if (orient & 0x100) {
        gyro_regs[2] |= 1;
10009498:	2377      	movs	r3, #119	; 0x77
1000949a:	466a      	mov	r2, sp
1000949c:	7093      	strb	r3, [r2, #2]
        accel_regs[2] |= 1;
1000949e:	3b10      	subs	r3, #16
100094a0:	70a3      	strb	r3, [r4, #2]
100094a2:	e7e6      	b.n	10009472 <dmp_set_orientation+0xb6>
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
    accel_regs[2] = accel_axes[(orient >> 6) & 3];

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
        return -1;
100094a4:	2001      	movs	r0, #1
100094a6:	4240      	negs	r0, r0
100094a8:	e7f2      	b.n	10009490 <dmp_set_orientation+0xd4>
100094aa:	46c0      	nop			; (mov r8, r8)
100094ac:	10019964 	.word	0x10019964
100094b0:	100182cf 	.word	0x100182cf
100094b4:	00000426 	.word	0x00000426
100094b8:	1000907d 	.word	0x1000907d
100094bc:	0000042a 	.word	0x0000042a
100094c0:	00000431 	.word	0x00000431
100094c4:	1001b6b4 	.word	0x1001b6b4

100094c8 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
100094c8:	b530      	push	{r4, r5, lr}
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
100094ca:	4913      	ldr	r1, [pc, #76]	; (10009518 <dmp_set_fifo_rate+0x50>)
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
100094cc:	b087      	sub	sp, #28
100094ce:	0004      	movs	r4, r0
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
100094d0:	220c      	movs	r2, #12
100094d2:	311c      	adds	r1, #28
100094d4:	a803      	add	r0, sp, #12
100094d6:	4b11      	ldr	r3, [pc, #68]	; (1000951c <dmp_set_fifo_rate+0x54>)
100094d8:	4798      	blx	r3
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
100094da:	2cc8      	cmp	r4, #200	; 0xc8
100094dc:	d819      	bhi.n	10009512 <dmp_set_fifo_rate+0x4a>
        return -1;
    div = DMP_SAMPLE_RATE / rate - 1;
100094de:	0021      	movs	r1, r4
100094e0:	4b0f      	ldr	r3, [pc, #60]	; (10009520 <dmp_set_fifo_rate+0x58>)
100094e2:	20c8      	movs	r0, #200	; 0xc8
100094e4:	4798      	blx	r3
100094e6:	3801      	subs	r0, #1
100094e8:	b280      	uxth	r0, r0
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
100094ea:	aa01      	add	r2, sp, #4
100094ec:	0a03      	lsrs	r3, r0, #8
    tmp[1] = (unsigned char)(div & 0xFF);
100094ee:	7050      	strb	r0, [r2, #1]
    if (mpu_write_mem(D_0_22, 2, tmp))
100094f0:	2102      	movs	r1, #2
100094f2:	480c      	ldr	r0, [pc, #48]	; (10009524 <dmp_set_fifo_rate+0x5c>)
100094f4:	4d0c      	ldr	r5, [pc, #48]	; (10009528 <dmp_set_fifo_rate+0x60>)
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
        return -1;
    div = DMP_SAMPLE_RATE / rate - 1;
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
100094f6:	7013      	strb	r3, [r2, #0]
    tmp[1] = (unsigned char)(div & 0xFF);
    if (mpu_write_mem(D_0_22, 2, tmp))
100094f8:	47a8      	blx	r5
100094fa:	2800      	cmp	r0, #0
100094fc:	d109      	bne.n	10009512 <dmp_set_fifo_rate+0x4a>
        return -1;
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
100094fe:	aa03      	add	r2, sp, #12
10009500:	210c      	movs	r1, #12
10009502:	480a      	ldr	r0, [pc, #40]	; (1000952c <dmp_set_fifo_rate+0x64>)
10009504:	47a8      	blx	r5
10009506:	2800      	cmp	r0, #0
10009508:	d103      	bne.n	10009512 <dmp_set_fifo_rate+0x4a>
        return -1;

    dmp.fifo_rate = rate;
1000950a:	4b09      	ldr	r3, [pc, #36]	; (10009530 <dmp_set_fifo_rate+0x68>)
1000950c:	819c      	strh	r4, [r3, #12]
    return 0;
}
1000950e:	b007      	add	sp, #28
10009510:	bd30      	pop	{r4, r5, pc}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
        return -1;
10009512:	2001      	movs	r0, #1
10009514:	4240      	negs	r0, r0
10009516:	e7fa      	b.n	1000950e <dmp_set_fifo_rate+0x46>
10009518:	10019964 	.word	0x10019964
1000951c:	100182cf 	.word	0x100182cf
10009520:	100150c9 	.word	0x100150c9
10009524:	00000216 	.word	0x00000216
10009528:	1000907d 	.word	0x1000907d
1000952c:	00000ac1 	.word	0x00000ac1
10009530:	1001b6b4 	.word	0x1001b6b4

10009534 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
10009534:	b5f0      	push	{r4, r5, r6, r7, lr}
10009536:	4647      	mov	r7, r8
10009538:	b480      	push	{r7}
1000953a:	0005      	movs	r5, r0
1000953c:	b082      	sub	sp, #8
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
1000953e:	0743      	lsls	r3, r0, #29
10009540:	d067      	beq.n	10009612 <dmp_set_tap_thresh+0xde>
10009542:	23c8      	movs	r3, #200	; 0xc8
10009544:	00db      	lsls	r3, r3, #3
10009546:	4299      	cmp	r1, r3
10009548:	d863      	bhi.n	10009612 <dmp_set_tap_thresh+0xde>
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
1000954a:	4b4c      	ldr	r3, [pc, #304]	; (1000967c <dmp_set_tap_thresh+0x148>)
1000954c:	0008      	movs	r0, r1
1000954e:	4798      	blx	r3
10009550:	4b4b      	ldr	r3, [pc, #300]	; (10009680 <dmp_set_tap_thresh+0x14c>)
10009552:	494c      	ldr	r1, [pc, #304]	; (10009684 <dmp_set_tap_thresh+0x150>)
10009554:	4798      	blx	r3

    mpu_get_accel_fsr(&accel_fsr);
10009556:	466b      	mov	r3, sp
10009558:	1cdc      	adds	r4, r3, #3
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
1000955a:	1c07      	adds	r7, r0, #0

    mpu_get_accel_fsr(&accel_fsr);
1000955c:	4b4a      	ldr	r3, [pc, #296]	; (10009688 <dmp_set_tap_thresh+0x154>)
1000955e:	0020      	movs	r0, r4
10009560:	4798      	blx	r3
    switch (accel_fsr) {
10009562:	7823      	ldrb	r3, [r4, #0]
10009564:	2b04      	cmp	r3, #4
10009566:	d100      	bne.n	1000956a <dmp_set_tap_thresh+0x36>
10009568:	e079      	b.n	1000965e <dmp_set_tap_thresh+0x12a>
1000956a:	d931      	bls.n	100095d0 <dmp_set_tap_thresh+0x9c>
1000956c:	2b08      	cmp	r3, #8
1000956e:	d067      	beq.n	10009640 <dmp_set_tap_thresh+0x10c>
10009570:	2b10      	cmp	r3, #16
10009572:	d14e      	bne.n	10009612 <dmp_set_tap_thresh+0xde>
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
        break;
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
10009574:	218a      	movs	r1, #138	; 0x8a
10009576:	4b45      	ldr	r3, [pc, #276]	; (1000968c <dmp_set_tap_thresh+0x158>)
10009578:	05c9      	lsls	r1, r1, #23
1000957a:	1c38      	adds	r0, r7, #0
1000957c:	4698      	mov	r8, r3
1000957e:	4798      	blx	r3
10009580:	4c43      	ldr	r4, [pc, #268]	; (10009690 <dmp_set_tap_thresh+0x15c>)
10009582:	47a0      	blx	r4
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
10009584:	4943      	ldr	r1, [pc, #268]	; (10009694 <dmp_set_tap_thresh+0x160>)
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
        break;
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
10009586:	b286      	uxth	r6, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
10009588:	1c38      	adds	r0, r7, #0
1000958a:	47c0      	blx	r8
1000958c:	47a0      	blx	r4
1000958e:	b280      	uxth	r0, r0
        break;
    default:
        return -1;
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
10009590:	ac01      	add	r4, sp, #4
10009592:	0a33      	lsrs	r3, r6, #8
10009594:	7023      	strb	r3, [r4, #0]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
10009596:	0a03      	lsrs	r3, r0, #8
        break;
    default:
        return -1;
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
10009598:	7066      	strb	r6, [r4, #1]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
1000959a:	70a3      	strb	r3, [r4, #2]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
1000959c:	70e0      	strb	r0, [r4, #3]

    if (axis & TAP_X) {
1000959e:	07eb      	lsls	r3, r5, #31
100095a0:	d427      	bmi.n	100095f2 <dmp_set_tap_thresh+0xbe>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Y) {
100095a2:	07ab      	lsls	r3, r5, #30
100095a4:	d43b      	bmi.n	1000961e <dmp_set_tap_thresh+0xea>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
100095a6:	2000      	movs	r0, #0
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Z) {
100095a8:	076b      	lsls	r3, r5, #29
100095aa:	d534      	bpl.n	10009616 <dmp_set_tap_thresh+0xe2>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
100095ac:	20ee      	movs	r0, #238	; 0xee
100095ae:	0022      	movs	r2, r4
100095b0:	2102      	movs	r1, #2
100095b2:	0040      	lsls	r0, r0, #1
100095b4:	4c38      	ldr	r4, [pc, #224]	; (10009698 <dmp_set_tap_thresh+0x164>)
100095b6:	47a0      	blx	r4
100095b8:	2800      	cmp	r0, #0
100095ba:	d12a      	bne.n	10009612 <dmp_set_tap_thresh+0xde>
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
100095bc:	466b      	mov	r3, sp
100095be:	302d      	adds	r0, #45	; 0x2d
100095c0:	1d9a      	adds	r2, r3, #6
100095c2:	2102      	movs	r1, #2
100095c4:	30ff      	adds	r0, #255	; 0xff
100095c6:	47a0      	blx	r4
100095c8:	1e43      	subs	r3, r0, #1
100095ca:	4198      	sbcs	r0, r3
100095cc:	4240      	negs	r0, r0
100095ce:	e022      	b.n	10009616 <dmp_set_tap_thresh+0xe2>
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;

    mpu_get_accel_fsr(&accel_fsr);
    switch (accel_fsr) {
100095d0:	2b02      	cmp	r3, #2
100095d2:	d11e      	bne.n	10009612 <dmp_set_tap_thresh+0xde>
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
100095d4:	218d      	movs	r1, #141	; 0x8d
100095d6:	4b2d      	ldr	r3, [pc, #180]	; (1000968c <dmp_set_tap_thresh+0x158>)
100095d8:	05c9      	lsls	r1, r1, #23
100095da:	1c38      	adds	r0, r7, #0
100095dc:	4698      	mov	r8, r3
100095de:	4798      	blx	r3
100095e0:	4c2b      	ldr	r4, [pc, #172]	; (10009690 <dmp_set_tap_thresh+0x15c>)
100095e2:	47a0      	blx	r4
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
100095e4:	492d      	ldr	r1, [pc, #180]	; (1000969c <dmp_set_tap_thresh+0x168>)
    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;

    mpu_get_accel_fsr(&accel_fsr);
    switch (accel_fsr) {
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
100095e6:	b286      	uxth	r6, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
100095e8:	1c38      	adds	r0, r7, #0
100095ea:	47c0      	blx	r8
100095ec:	47a0      	blx	r4
100095ee:	b280      	uxth	r0, r0
        break;
100095f0:	e7ce      	b.n	10009590 <dmp_set_tap_thresh+0x5c>
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);

    if (axis & TAP_X) {
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
100095f2:	20ea      	movs	r0, #234	; 0xea
100095f4:	0022      	movs	r2, r4
100095f6:	2102      	movs	r1, #2
100095f8:	0040      	lsls	r0, r0, #1
100095fa:	4e27      	ldr	r6, [pc, #156]	; (10009698 <dmp_set_tap_thresh+0x164>)
100095fc:	47b0      	blx	r6
100095fe:	2800      	cmp	r0, #0
10009600:	d107      	bne.n	10009612 <dmp_set_tap_thresh+0xde>
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
10009602:	466b      	mov	r3, sp
10009604:	3025      	adds	r0, #37	; 0x25
10009606:	1d9a      	adds	r2, r3, #6
10009608:	2102      	movs	r1, #2
1000960a:	30ff      	adds	r0, #255	; 0xff
1000960c:	47b0      	blx	r6
1000960e:	2800      	cmp	r0, #0
10009610:	d0c7      	beq.n	100095a2 <dmp_set_tap_thresh+0x6e>
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
        break;
    default:
        return -1;
10009612:	2001      	movs	r0, #1
10009614:	4240      	negs	r0, r0
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
}
10009616:	b002      	add	sp, #8
10009618:	bc04      	pop	{r2}
1000961a:	4690      	mov	r8, r2
1000961c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Y) {
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
1000961e:	20ec      	movs	r0, #236	; 0xec
10009620:	0022      	movs	r2, r4
10009622:	2102      	movs	r1, #2
10009624:	0040      	lsls	r0, r0, #1
10009626:	4e1c      	ldr	r6, [pc, #112]	; (10009698 <dmp_set_tap_thresh+0x164>)
10009628:	47b0      	blx	r6
1000962a:	2800      	cmp	r0, #0
1000962c:	d1f1      	bne.n	10009612 <dmp_set_tap_thresh+0xde>
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
1000962e:	466b      	mov	r3, sp
10009630:	3029      	adds	r0, #41	; 0x29
10009632:	1d9a      	adds	r2, r3, #6
10009634:	2102      	movs	r1, #2
10009636:	30ff      	adds	r0, #255	; 0xff
10009638:	47b0      	blx	r6
1000963a:	2800      	cmp	r0, #0
1000963c:	d0b3      	beq.n	100095a6 <dmp_set_tap_thresh+0x72>
1000963e:	e7e8      	b.n	10009612 <dmp_set_tap_thresh+0xde>
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
        break;
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
10009640:	218b      	movs	r1, #139	; 0x8b
10009642:	4b12      	ldr	r3, [pc, #72]	; (1000968c <dmp_set_tap_thresh+0x158>)
10009644:	05c9      	lsls	r1, r1, #23
10009646:	1c38      	adds	r0, r7, #0
10009648:	4698      	mov	r8, r3
1000964a:	4798      	blx	r3
1000964c:	4c10      	ldr	r4, [pc, #64]	; (10009690 <dmp_set_tap_thresh+0x15c>)
1000964e:	47a0      	blx	r4
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
10009650:	4913      	ldr	r1, [pc, #76]	; (100096a0 <dmp_set_tap_thresh+0x16c>)
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
        break;
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
10009652:	b286      	uxth	r6, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
10009654:	1c38      	adds	r0, r7, #0
10009656:	47c0      	blx	r8
10009658:	47a0      	blx	r4
1000965a:	b280      	uxth	r0, r0
        break;
1000965c:	e798      	b.n	10009590 <dmp_set_tap_thresh+0x5c>
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
        break;
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
1000965e:	218c      	movs	r1, #140	; 0x8c
10009660:	4b0a      	ldr	r3, [pc, #40]	; (1000968c <dmp_set_tap_thresh+0x158>)
10009662:	05c9      	lsls	r1, r1, #23
10009664:	1c38      	adds	r0, r7, #0
10009666:	4698      	mov	r8, r3
10009668:	4798      	blx	r3
1000966a:	4c09      	ldr	r4, [pc, #36]	; (10009690 <dmp_set_tap_thresh+0x15c>)
1000966c:	47a0      	blx	r4
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
1000966e:	490d      	ldr	r1, [pc, #52]	; (100096a4 <dmp_set_tap_thresh+0x170>)
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
        break;
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
10009670:	b286      	uxth	r6, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
10009672:	1c38      	adds	r0, r7, #0
10009674:	47c0      	blx	r8
10009676:	47a0      	blx	r4
10009678:	b280      	uxth	r0, r0
        break;
1000967a:	e789      	b.n	10009590 <dmp_set_tap_thresh+0x5c>
1000967c:	1001625d 	.word	0x1001625d
10009680:	10015891 	.word	0x10015891
10009684:	43480000 	.word	0x43480000
10009688:	10008691 	.word	0x10008691
1000968c:	10015c25 	.word	0x10015c25
10009690:	10015431 	.word	0x10015431
10009694:	44c00000 	.word	0x44c00000
10009698:	1000907d 	.word	0x1000907d
1000969c:	46400000 	.word	0x46400000
100096a0:	45400000 	.word	0x45400000
100096a4:	45c00000 	.word	0x45c00000

100096a8 <dmp_set_tap_axes>:
 */
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;

    if (axis & TAP_X)
100096a8:	2301      	movs	r3, #1
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
100096aa:	b500      	push	{lr}
    unsigned char tmp = 0;

    if (axis & TAP_X)
100096ac:	4003      	ands	r3, r0
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
100096ae:	b083      	sub	sp, #12
    unsigned char tmp = 0;

    if (axis & TAP_X)
100096b0:	2b00      	cmp	r3, #0
100096b2:	d115      	bne.n	100096e0 <dmp_set_tap_axes+0x38>
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;
100096b4:	466a      	mov	r2, sp
100096b6:	3207      	adds	r2, #7
100096b8:	7013      	strb	r3, [r2, #0]

    if (axis & TAP_X)
        tmp |= 0x30;
    if (axis & TAP_Y)
100096ba:	0783      	lsls	r3, r0, #30
100096bc:	d503      	bpl.n	100096c6 <dmp_set_tap_axes+0x1e>
        tmp |= 0x0C;
100096be:	230c      	movs	r3, #12
100096c0:	7811      	ldrb	r1, [r2, #0]
100096c2:	430b      	orrs	r3, r1
100096c4:	7013      	strb	r3, [r2, #0]
    if (axis & TAP_Z)
100096c6:	0743      	lsls	r3, r0, #29
100096c8:	d503      	bpl.n	100096d2 <dmp_set_tap_axes+0x2a>
        tmp |= 0x03;
100096ca:	2303      	movs	r3, #3
100096cc:	7811      	ldrb	r1, [r2, #0]
100096ce:	430b      	orrs	r3, r1
100096d0:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_72, 1, &tmp);
100096d2:	20a4      	movs	r0, #164	; 0xa4
100096d4:	2101      	movs	r1, #1
100096d6:	4b05      	ldr	r3, [pc, #20]	; (100096ec <dmp_set_tap_axes+0x44>)
100096d8:	0040      	lsls	r0, r0, #1
100096da:	4798      	blx	r3
}
100096dc:	b003      	add	sp, #12
100096de:	bd00      	pop	{pc}
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;

    if (axis & TAP_X)
        tmp |= 0x30;
100096e0:	466b      	mov	r3, sp
100096e2:	1dda      	adds	r2, r3, #7
100096e4:	2330      	movs	r3, #48	; 0x30
100096e6:	7013      	strb	r3, [r2, #0]
100096e8:	e7e7      	b.n	100096ba <dmp_set_tap_axes+0x12>
100096ea:	46c0      	nop			; (mov r8, r8)
100096ec:	1000907d 	.word	0x1000907d

100096f0 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
100096f0:	b500      	push	{lr}
100096f2:	b085      	sub	sp, #20
    if (enable) {
100096f4:	2800      	cmp	r0, #0
100096f6:	d10d      	bne.n	10009714 <dmp_enable_gyro_cal+0x24>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
100096f8:	4908      	ldr	r1, [pc, #32]	; (1000971c <dmp_enable_gyro_cal+0x2c>)
100096fa:	2209      	movs	r2, #9
100096fc:	3128      	adds	r1, #40	; 0x28
100096fe:	4b08      	ldr	r3, [pc, #32]	; (10009720 <dmp_enable_gyro_cal+0x30>)
10009700:	a801      	add	r0, sp, #4
10009702:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
10009704:	2097      	movs	r0, #151	; 0x97
10009706:	aa01      	add	r2, sp, #4
10009708:	2109      	movs	r1, #9
1000970a:	00c0      	lsls	r0, r0, #3
1000970c:	4b05      	ldr	r3, [pc, #20]	; (10009724 <dmp_enable_gyro_cal+0x34>)
1000970e:	4798      	blx	r3
    }
}
10009710:	b005      	add	sp, #20
10009712:	bd00      	pop	{pc}
10009714:	4b04      	ldr	r3, [pc, #16]	; (10009728 <dmp_enable_gyro_cal+0x38>)
10009716:	4798      	blx	r3
10009718:	e7fa      	b.n	10009710 <dmp_enable_gyro_cal+0x20>
1000971a:	46c0      	nop			; (mov r8, r8)
1000971c:	10019964 	.word	0x10019964
10009720:	100182cf 	.word	0x100182cf
10009724:	1000907d 	.word	0x1000907d
10009728:	10009371 	.word	0x10009371

1000972c <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
1000972c:	b500      	push	{lr}
1000972e:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009730:	2800      	cmp	r0, #0
10009732:	d010      	beq.n	10009756 <dmp_enable_lp_quat+0x2a>
        regs[0] = DINBC0;
10009734:	23c0      	movs	r3, #192	; 0xc0
10009736:	aa01      	add	r2, sp, #4
10009738:	7013      	strb	r3, [r2, #0]
        regs[1] = DINBC2;
1000973a:	3302      	adds	r3, #2
1000973c:	7053      	strb	r3, [r2, #1]
        regs[2] = DINBC4;
1000973e:	3302      	adds	r3, #2
10009740:	7093      	strb	r3, [r2, #2]
        regs[3] = DINBC6;
10009742:	3302      	adds	r3, #2
10009744:	70d3      	strb	r3, [r2, #3]
    }
    else
        memset(regs, 0x8B, 4);

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
10009746:	2104      	movs	r1, #4
10009748:	4b05      	ldr	r3, [pc, #20]	; (10009760 <dmp_enable_lp_quat+0x34>)
1000974a:	4806      	ldr	r0, [pc, #24]	; (10009764 <dmp_enable_lp_quat+0x38>)
1000974c:	4798      	blx	r3

    return mpu_reset_fifo();
1000974e:	4b06      	ldr	r3, [pc, #24]	; (10009768 <dmp_enable_lp_quat+0x3c>)
10009750:	4798      	blx	r3
}
10009752:	b003      	add	sp, #12
10009754:	bd00      	pop	{pc}
        regs[1] = DINBC2;
        regs[2] = DINBC4;
        regs[3] = DINBC6;
    }
    else
        memset(regs, 0x8B, 4);
10009756:	4b05      	ldr	r3, [pc, #20]	; (1000976c <dmp_enable_lp_quat+0x40>)
10009758:	aa01      	add	r2, sp, #4
1000975a:	9301      	str	r3, [sp, #4]
1000975c:	e7f3      	b.n	10009746 <dmp_enable_lp_quat+0x1a>
1000975e:	46c0      	nop			; (mov r8, r8)
10009760:	1000907d 	.word	0x1000907d
10009764:	00000a98 	.word	0x00000a98
10009768:	10008465 	.word	0x10008465
1000976c:	8b8b8b8b 	.word	0x8b8b8b8b

10009770 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
10009770:	b500      	push	{lr}
10009772:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009774:	2800      	cmp	r0, #0
10009776:	d010      	beq.n	1000979a <dmp_enable_6x_lp_quat+0x2a>
        regs[0] = DINA20;
10009778:	2320      	movs	r3, #32
1000977a:	aa01      	add	r2, sp, #4
1000977c:	7013      	strb	r3, [r2, #0]
        regs[1] = DINA28;
1000977e:	3308      	adds	r3, #8
10009780:	7053      	strb	r3, [r2, #1]
        regs[2] = DINA30;
10009782:	3308      	adds	r3, #8
10009784:	7093      	strb	r3, [r2, #2]
        regs[3] = DINA38;
10009786:	3308      	adds	r3, #8
10009788:	70d3      	strb	r3, [r2, #3]
    } else
        memset(regs, 0xA3, 4);

    mpu_write_mem(CFG_8, 4, regs);
1000978a:	2104      	movs	r1, #4
1000978c:	4b05      	ldr	r3, [pc, #20]	; (100097a4 <dmp_enable_6x_lp_quat+0x34>)
1000978e:	4806      	ldr	r0, [pc, #24]	; (100097a8 <dmp_enable_6x_lp_quat+0x38>)
10009790:	4798      	blx	r3

    return mpu_reset_fifo();
10009792:	4b06      	ldr	r3, [pc, #24]	; (100097ac <dmp_enable_6x_lp_quat+0x3c>)
10009794:	4798      	blx	r3
}
10009796:	b003      	add	sp, #12
10009798:	bd00      	pop	{pc}
        regs[0] = DINA20;
        regs[1] = DINA28;
        regs[2] = DINA30;
        regs[3] = DINA38;
    } else
        memset(regs, 0xA3, 4);
1000979a:	4b05      	ldr	r3, [pc, #20]	; (100097b0 <dmp_enable_6x_lp_quat+0x40>)
1000979c:	aa01      	add	r2, sp, #4
1000979e:	9301      	str	r3, [sp, #4]
100097a0:	e7f3      	b.n	1000978a <dmp_enable_6x_lp_quat+0x1a>
100097a2:	46c0      	nop			; (mov r8, r8)
100097a4:	1000907d 	.word	0x1000907d
100097a8:	00000a9e 	.word	0x00000a9e
100097ac:	10008465 	.word	0x10008465
100097b0:	a3a3a3a3 	.word	0xa3a3a3a3

100097b4 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
100097b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100097b6:	4645      	mov	r5, r8
100097b8:	464e      	mov	r6, r9
100097ba:	4657      	mov	r7, sl

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
100097bc:	2302      	movs	r3, #2
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
100097be:	b4e0      	push	{r5, r6, r7}
100097c0:	b084      	sub	sp, #16

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
100097c2:	ac01      	add	r4, sp, #4
100097c4:	7023      	strb	r3, [r4, #0]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
100097c6:	33c8      	adds	r3, #200	; 0xc8
100097c8:	7063      	strb	r3, [r4, #1]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
100097ca:	3319      	adds	r3, #25
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
100097cc:	0005      	movs	r5, r0
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
100097ce:	70a3      	strb	r3, [r4, #2]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
    mpu_write_mem(D_0_104, 4, tmp);
100097d0:	0022      	movs	r2, r4
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
100097d2:	3bda      	subs	r3, #218	; 0xda
    mpu_write_mem(D_0_104, 4, tmp);
100097d4:	2104      	movs	r1, #4
100097d6:	2068      	movs	r0, #104	; 0x68
100097d8:	4e7c      	ldr	r6, [pc, #496]	; (100099cc <dmp_enable_feature+0x218>)
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
100097da:	70e3      	strb	r3, [r4, #3]
    mpu_write_mem(D_0_104, 4, tmp);
100097dc:	47b0      	blx	r6
100097de:	2240      	movs	r2, #64	; 0x40

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
100097e0:	23a3      	movs	r3, #163	; 0xa3
100097e2:	402a      	ands	r2, r5
100097e4:	7023      	strb	r3, [r4, #0]
100097e6:	4690      	mov	r8, r2
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
100097e8:	d100      	bne.n	100097ec <dmp_enable_feature+0x38>
100097ea:	e0e1      	b.n	100099b0 <dmp_enable_feature+0x1fc>
        tmp[1] = 0xC0;
100097ec:	331d      	adds	r3, #29
100097ee:	7063      	strb	r3, [r4, #1]
        tmp[2] = 0xC8;
100097f0:	3308      	adds	r3, #8
100097f2:	70a3      	strb	r3, [r4, #2]
        tmp[3] = 0xC2;
100097f4:	3b06      	subs	r3, #6
100097f6:	70e3      	strb	r3, [r4, #3]
100097f8:	27c0      	movs	r7, #192	; 0xc0
100097fa:	007f      	lsls	r7, r7, #1
100097fc:	402f      	ands	r7, r5
    } else {
        tmp[1] = 0xA3;
        tmp[2] = 0xA3;
        tmp[3] = 0xA3;
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
100097fe:	d100      	bne.n	10009802 <dmp_enable_feature+0x4e>
10009800:	e0d1      	b.n	100099a6 <dmp_enable_feature+0x1f2>
        tmp[4] = 0xC4;
10009802:	23c4      	movs	r3, #196	; 0xc4
10009804:	7123      	strb	r3, [r4, #4]
        tmp[5] = 0xCC;
10009806:	3308      	adds	r3, #8
10009808:	7163      	strb	r3, [r4, #5]
        tmp[6] = 0xC6;
1000980a:	3b06      	subs	r3, #6
1000980c:	71a3      	strb	r3, [r4, #6]
    } else {
        tmp[4] = 0xA3;
        tmp[5] = 0xA3;
        tmp[6] = 0xA3;
    }
    tmp[7] = 0xA3;
1000980e:	23a3      	movs	r3, #163	; 0xa3
    tmp[8] = 0xA3;
    tmp[9] = 0xA3;
    mpu_write_mem(CFG_15,10,tmp);
10009810:	0022      	movs	r2, r4
10009812:	210a      	movs	r1, #10
10009814:	486e      	ldr	r0, [pc, #440]	; (100099d0 <dmp_enable_feature+0x21c>)
    } else {
        tmp[4] = 0xA3;
        tmp[5] = 0xA3;
        tmp[6] = 0xA3;
    }
    tmp[7] = 0xA3;
10009816:	71e3      	strb	r3, [r4, #7]
    tmp[8] = 0xA3;
10009818:	7223      	strb	r3, [r4, #8]
    tmp[9] = 0xA3;
1000981a:	7263      	strb	r3, [r4, #9]
    mpu_write_mem(CFG_15,10,tmp);
1000981c:	47b0      	blx	r6
1000981e:	2303      	movs	r3, #3
10009820:	402b      	ands	r3, r5
10009822:	4699      	mov	r9, r3

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009824:	d100      	bne.n	10009828 <dmp_enable_feature+0x74>
10009826:	e0bb      	b.n	100099a0 <dmp_enable_feature+0x1ec>
        tmp[0] = DINA20;
10009828:	2320      	movs	r3, #32
1000982a:	7023      	strb	r3, [r4, #0]
    else
        tmp[0] = 0xD8;
    mpu_write_mem(CFG_27,1,tmp);
1000982c:	0022      	movs	r2, r4
1000982e:	2101      	movs	r1, #1
10009830:	4868      	ldr	r0, [pc, #416]	; (100099d4 <dmp_enable_feature+0x220>)
10009832:	47b0      	blx	r6

    if (mask & DMP_FEATURE_GYRO_CAL)
10009834:	06ab      	lsls	r3, r5, #26
10009836:	d400      	bmi.n	1000983a <dmp_enable_feature+0x86>
10009838:	e0ae      	b.n	10009998 <dmp_enable_feature+0x1e4>
1000983a:	4b67      	ldr	r3, [pc, #412]	; (100099d8 <dmp_enable_feature+0x224>)
1000983c:	4798      	blx	r3
        dmp_enable_gyro_cal(1);
    else
        dmp_enable_gyro_cal(0);

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
1000983e:	2f00      	cmp	r7, #0
10009840:	d00e      	beq.n	10009860 <dmp_enable_feature+0xac>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
10009842:	05eb      	lsls	r3, r5, #23
10009844:	d500      	bpl.n	10009848 <dmp_enable_feature+0x94>
10009846:	e0b7      	b.n	100099b8 <dmp_enable_feature+0x204>
            tmp[0] = 0xB2;
            tmp[1] = 0x8B;
            tmp[2] = 0xB6;
            tmp[3] = 0x9B;
        } else {
            tmp[0] = DINAC0;
10009848:	23b0      	movs	r3, #176	; 0xb0
1000984a:	7023      	strb	r3, [r4, #0]
            tmp[1] = DINA80;
1000984c:	3b30      	subs	r3, #48	; 0x30
1000984e:	7063      	strb	r3, [r4, #1]
            tmp[2] = DINAC2;
10009850:	3334      	adds	r3, #52	; 0x34
10009852:	70a3      	strb	r3, [r4, #2]
            tmp[3] = DINA90;
10009854:	3b24      	subs	r3, #36	; 0x24
10009856:	70e3      	strb	r3, [r4, #3]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
10009858:	0022      	movs	r2, r4
1000985a:	2104      	movs	r1, #4
1000985c:	485f      	ldr	r0, [pc, #380]	; (100099dc <dmp_enable_feature+0x228>)
1000985e:	47b0      	blx	r6
    }

    if (mask & DMP_FEATURE_TAP) {
10009860:	07eb      	lsls	r3, r5, #31
10009862:	d400      	bmi.n	10009866 <dmp_enable_feature+0xb2>
10009864:	e090      	b.n	10009988 <dmp_enable_feature+0x1d4>
        /* Enable tap. */
        tmp[0] = 0xF8;
        mpu_write_mem(CFG_20, 1, tmp);
10009866:	208b      	movs	r0, #139	; 0x8b
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
    }

    if (mask & DMP_FEATURE_TAP) {
        /* Enable tap. */
        tmp[0] = 0xF8;
10009868:	23f8      	movs	r3, #248	; 0xf8
        mpu_write_mem(CFG_20, 1, tmp);
1000986a:	0022      	movs	r2, r4
1000986c:	2101      	movs	r1, #1
1000986e:	0100      	lsls	r0, r0, #4
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
    }

    if (mask & DMP_FEATURE_TAP) {
        /* Enable tap. */
        tmp[0] = 0xF8;
10009870:	7023      	strb	r3, [r4, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009872:	47b0      	blx	r6
        dmp_set_tap_thresh(TAP_XYZ, 250);
10009874:	21fa      	movs	r1, #250	; 0xfa
10009876:	4b5a      	ldr	r3, [pc, #360]	; (100099e0 <dmp_enable_feature+0x22c>)
10009878:	2007      	movs	r0, #7
1000987a:	4798      	blx	r3
        dmp_set_tap_axes(TAP_XYZ);
1000987c:	4b59      	ldr	r3, [pc, #356]	; (100099e4 <dmp_enable_feature+0x230>)
1000987e:	2007      	movs	r0, #7
10009880:	4798      	blx	r3
    if (min_taps < 1)
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
10009882:	2300      	movs	r3, #0
10009884:	469a      	mov	sl, r3
    return mpu_write_mem(D_1_79, 1, &tmp);
10009886:	2050      	movs	r0, #80	; 0x50
    if (min_taps < 1)
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
10009888:	466b      	mov	r3, sp
1000988a:	4652      	mov	r2, sl
    return mpu_write_mem(D_1_79, 1, &tmp);
1000988c:	2101      	movs	r1, #1
    if (min_taps < 1)
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
1000988e:	701a      	strb	r2, [r3, #0]
    return mpu_write_mem(D_1_79, 1, &tmp);
10009890:	30ff      	adds	r0, #255	; 0xff
10009892:	466a      	mov	r2, sp
10009894:	47b0      	blx	r6
{
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
10009896:	466b      	mov	r3, sp
10009898:	4652      	mov	r2, sl
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
1000989a:	20ef      	movs	r0, #239	; 0xef
{
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
1000989c:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
1000989e:	2314      	movs	r3, #20
100098a0:	466a      	mov	r2, sp
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
100098a2:	2102      	movs	r1, #2
100098a4:	0040      	lsls	r0, r0, #1
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
100098a6:	7053      	strb	r3, [r2, #1]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
100098a8:	47b0      	blx	r6
{
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
100098aa:	466b      	mov	r3, sp
100098ac:	4652      	mov	r2, sl
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
    return mpu_write_mem(D_1_218, 2, tmp);
100098ae:	20ed      	movs	r0, #237	; 0xed
{
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
100098b0:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
100098b2:	2364      	movs	r3, #100	; 0x64
100098b4:	466a      	mov	r2, sp
    return mpu_write_mem(D_1_218, 2, tmp);
100098b6:	2102      	movs	r1, #2
100098b8:	0040      	lsls	r0, r0, #1
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
100098ba:	7053      	strb	r3, [r2, #1]
    return mpu_write_mem(D_1_218, 2, tmp);
100098bc:	47b0      	blx	r6
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
100098be:	466b      	mov	r3, sp
100098c0:	4652      	mov	r2, sl
100098c2:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
100098c4:	466a      	mov	r2, sp
100098c6:	238e      	movs	r3, #142	; 0x8e
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
    return mpu_write_mem(D_1_92, 4, tmp);
100098c8:	20ae      	movs	r0, #174	; 0xae
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
100098ca:	7053      	strb	r3, [r2, #1]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
100098cc:	336b      	adds	r3, #107	; 0x6b
100098ce:	7093      	strb	r3, [r2, #2]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
    return mpu_write_mem(D_1_92, 4, tmp);
100098d0:	2104      	movs	r1, #4
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
100098d2:	3b69      	subs	r3, #105	; 0x69
    return mpu_write_mem(D_1_92, 4, tmp);
100098d4:	0040      	lsls	r0, r0, #1
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
100098d6:	70d3      	strb	r3, [r2, #3]
    return mpu_write_mem(D_1_92, 4, tmp);
100098d8:	47b0      	blx	r6
int dmp_set_shake_reject_time(unsigned short time)
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
100098da:	466b      	mov	r3, sp
100098dc:	4652      	mov	r2, sl
    tmp[1] = time & 0xFF;
    return mpu_write_mem(D_1_90,2,tmp);
100098de:	20ad      	movs	r0, #173	; 0xad
int dmp_set_shake_reject_time(unsigned short time)
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
100098e0:	701a      	strb	r2, [r3, #0]
    tmp[1] = time & 0xFF;
100098e2:	2308      	movs	r3, #8
100098e4:	466a      	mov	r2, sp
    return mpu_write_mem(D_1_90,2,tmp);
100098e6:	2102      	movs	r1, #2
100098e8:	0040      	lsls	r0, r0, #1
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
    tmp[1] = time & 0xFF;
100098ea:	7053      	strb	r3, [r2, #1]
    return mpu_write_mem(D_1_90,2,tmp);
100098ec:	47b0      	blx	r6
int dmp_set_shake_reject_timeout(unsigned short time)
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
100098ee:	466b      	mov	r3, sp
100098f0:	4652      	mov	r2, sl
    tmp[1] = time & 0xFF;
    return mpu_write_mem(D_1_88,2,tmp);
100098f2:	20ac      	movs	r0, #172	; 0xac
int dmp_set_shake_reject_timeout(unsigned short time)
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
100098f4:	701a      	strb	r2, [r3, #0]
    tmp[1] = time & 0xFF;
100098f6:	2302      	movs	r3, #2
100098f8:	466a      	mov	r2, sp
    return mpu_write_mem(D_1_88,2,tmp);
100098fa:	2102      	movs	r1, #2
100098fc:	0040      	lsls	r0, r0, #1
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
    tmp[1] = time & 0xFF;
100098fe:	7053      	strb	r3, [r2, #1]
    return mpu_write_mem(D_1_88,2,tmp);
10009900:	47b0      	blx	r6
    } else {
        tmp[0] = 0xD8;
        mpu_write_mem(CFG_20, 1, tmp);
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
10009902:	07ab      	lsls	r3, r5, #30
10009904:	d53d      	bpl.n	10009982 <dmp_enable_feature+0x1ce>
        tmp[0] = 0xD9;
10009906:	23d9      	movs	r3, #217	; 0xd9
10009908:	7023      	strb	r3, [r4, #0]
    } else
        tmp[0] = 0xD8;
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
1000990a:	0022      	movs	r2, r4
1000990c:	2101      	movs	r1, #1
1000990e:	4836      	ldr	r0, [pc, #216]	; (100099e8 <dmp_enable_feature+0x234>)
10009910:	47b0      	blx	r6

    if (mask & DMP_FEATURE_LP_QUAT)
10009912:	076b      	lsls	r3, r5, #29
10009914:	d531      	bpl.n	1000997a <dmp_enable_feature+0x1c6>
        dmp_enable_lp_quat(1);
10009916:	2001      	movs	r0, #1
10009918:	4b34      	ldr	r3, [pc, #208]	; (100099ec <dmp_enable_feature+0x238>)
1000991a:	4798      	blx	r3
    else
        dmp_enable_lp_quat(0);

    if (mask & DMP_FEATURE_6X_LP_QUAT)
1000991c:	06eb      	lsls	r3, r5, #27
1000991e:	d528      	bpl.n	10009972 <dmp_enable_feature+0x1be>
        dmp_enable_6x_lp_quat(1);
10009920:	2001      	movs	r0, #1
10009922:	4b33      	ldr	r3, [pc, #204]	; (100099f0 <dmp_enable_feature+0x23c>)
10009924:	4798      	blx	r3
    else
        dmp_enable_6x_lp_quat(0);

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
10009926:	2308      	movs	r3, #8
10009928:	4c32      	ldr	r4, [pc, #200]	; (100099f4 <dmp_enable_feature+0x240>)
1000992a:	432b      	orrs	r3, r5
1000992c:	8163      	strh	r3, [r4, #10]
    mpu_reset_fifo();
1000992e:	4b32      	ldr	r3, [pc, #200]	; (100099f8 <dmp_enable_feature+0x244>)
10009930:	4798      	blx	r3

    dmp.packet_length = 0;
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
10009932:	4643      	mov	r3, r8
10009934:	2b00      	cmp	r3, #0
10009936:	d119      	bne.n	1000996c <dmp_enable_feature+0x1b8>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    mpu_reset_fifo();

    dmp.packet_length = 0;
10009938:	4643      	mov	r3, r8
1000993a:	73a3      	strb	r3, [r4, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        dmp.packet_length += 6;
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
1000993c:	2f00      	cmp	r7, #0
1000993e:	d002      	beq.n	10009946 <dmp_enable_feature+0x192>
        dmp.packet_length += 6;
10009940:	7ba3      	ldrb	r3, [r4, #14]
10009942:	3306      	adds	r3, #6
10009944:	73a3      	strb	r3, [r4, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
10009946:	2314      	movs	r3, #20
10009948:	422b      	tst	r3, r5
1000994a:	d002      	beq.n	10009952 <dmp_enable_feature+0x19e>
        dmp.packet_length += 16;
1000994c:	7ba3      	ldrb	r3, [r4, #14]
1000994e:	3310      	adds	r3, #16
10009950:	73a3      	strb	r3, [r4, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009952:	464b      	mov	r3, r9
10009954:	2b00      	cmp	r3, #0
10009956:	d002      	beq.n	1000995e <dmp_enable_feature+0x1aa>
        dmp.packet_length += 4;
10009958:	7ba3      	ldrb	r3, [r4, #14]
1000995a:	3304      	adds	r3, #4
1000995c:	73a3      	strb	r3, [r4, #14]

    return 0;
}
1000995e:	2000      	movs	r0, #0
10009960:	b004      	add	sp, #16
10009962:	bc1c      	pop	{r2, r3, r4}
10009964:	4690      	mov	r8, r2
10009966:	4699      	mov	r9, r3
10009968:	46a2      	mov	sl, r4
1000996a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    mpu_reset_fifo();

    dmp.packet_length = 0;
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        dmp.packet_length += 6;
1000996c:	2306      	movs	r3, #6
1000996e:	73a3      	strb	r3, [r4, #14]
10009970:	e7e4      	b.n	1000993c <dmp_enable_feature+0x188>
        dmp_enable_lp_quat(0);

    if (mask & DMP_FEATURE_6X_LP_QUAT)
        dmp_enable_6x_lp_quat(1);
    else
        dmp_enable_6x_lp_quat(0);
10009972:	4b1f      	ldr	r3, [pc, #124]	; (100099f0 <dmp_enable_feature+0x23c>)
10009974:	2000      	movs	r0, #0
10009976:	4798      	blx	r3
10009978:	e7d5      	b.n	10009926 <dmp_enable_feature+0x172>
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);

    if (mask & DMP_FEATURE_LP_QUAT)
        dmp_enable_lp_quat(1);
    else
        dmp_enable_lp_quat(0);
1000997a:	4b1c      	ldr	r3, [pc, #112]	; (100099ec <dmp_enable_feature+0x238>)
1000997c:	2000      	movs	r0, #0
1000997e:	4798      	blx	r3
10009980:	e7cc      	b.n	1000991c <dmp_enable_feature+0x168>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
        tmp[0] = 0xD9;
    } else
        tmp[0] = 0xD8;
10009982:	23d8      	movs	r3, #216	; 0xd8
10009984:	7023      	strb	r3, [r4, #0]
10009986:	e7c0      	b.n	1000990a <dmp_enable_feature+0x156>
        dmp_set_shake_reject_thresh(GYRO_SF, 200);
        dmp_set_shake_reject_time(40);
        dmp_set_shake_reject_timeout(10);
    } else {
        tmp[0] = 0xD8;
        mpu_write_mem(CFG_20, 1, tmp);
10009988:	208b      	movs	r0, #139	; 0x8b

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
        dmp_set_shake_reject_time(40);
        dmp_set_shake_reject_timeout(10);
    } else {
        tmp[0] = 0xD8;
1000998a:	23d8      	movs	r3, #216	; 0xd8
        mpu_write_mem(CFG_20, 1, tmp);
1000998c:	0022      	movs	r2, r4
1000998e:	2101      	movs	r1, #1
10009990:	0100      	lsls	r0, r0, #4

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
        dmp_set_shake_reject_time(40);
        dmp_set_shake_reject_timeout(10);
    } else {
        tmp[0] = 0xD8;
10009992:	7023      	strb	r3, [r4, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009994:	47b0      	blx	r6
10009996:	e7b4      	b.n	10009902 <dmp_enable_feature+0x14e>
    mpu_write_mem(CFG_27,1,tmp);

    if (mask & DMP_FEATURE_GYRO_CAL)
        dmp_enable_gyro_cal(1);
    else
        dmp_enable_gyro_cal(0);
10009998:	4b18      	ldr	r3, [pc, #96]	; (100099fc <dmp_enable_feature+0x248>)
1000999a:	2000      	movs	r0, #0
1000999c:	4798      	blx	r3
1000999e:	e74e      	b.n	1000983e <dmp_enable_feature+0x8a>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
        tmp[0] = DINA20;
    else
        tmp[0] = 0xD8;
100099a0:	23d8      	movs	r3, #216	; 0xd8
100099a2:	7023      	strb	r3, [r4, #0]
100099a4:	e742      	b.n	1000982c <dmp_enable_feature+0x78>
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
        tmp[4] = 0xC4;
        tmp[5] = 0xCC;
        tmp[6] = 0xC6;
    } else {
        tmp[4] = 0xA3;
100099a6:	23a3      	movs	r3, #163	; 0xa3
100099a8:	7123      	strb	r3, [r4, #4]
        tmp[5] = 0xA3;
100099aa:	7163      	strb	r3, [r4, #5]
        tmp[6] = 0xA3;
100099ac:	71a3      	strb	r3, [r4, #6]
100099ae:	e72e      	b.n	1000980e <dmp_enable_feature+0x5a>
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
        tmp[1] = 0xC0;
        tmp[2] = 0xC8;
        tmp[3] = 0xC2;
    } else {
        tmp[1] = 0xA3;
100099b0:	7063      	strb	r3, [r4, #1]
        tmp[2] = 0xA3;
100099b2:	70a3      	strb	r3, [r4, #2]
        tmp[3] = 0xA3;
100099b4:	70e3      	strb	r3, [r4, #3]
100099b6:	e71f      	b.n	100097f8 <dmp_enable_feature+0x44>
    else
        dmp_enable_gyro_cal(0);

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
            tmp[0] = 0xB2;
100099b8:	23b2      	movs	r3, #178	; 0xb2
100099ba:	7023      	strb	r3, [r4, #0]
            tmp[1] = 0x8B;
100099bc:	3b27      	subs	r3, #39	; 0x27
100099be:	7063      	strb	r3, [r4, #1]
            tmp[2] = 0xB6;
100099c0:	332b      	adds	r3, #43	; 0x2b
100099c2:	70a3      	strb	r3, [r4, #2]
            tmp[3] = 0x9B;
100099c4:	3b1b      	subs	r3, #27
100099c6:	70e3      	strb	r3, [r4, #3]
100099c8:	e746      	b.n	10009858 <dmp_enable_feature+0xa4>
100099ca:	46c0      	nop			; (mov r8, r8)
100099cc:	1000907d 	.word	0x1000907d
100099d0:	00000aa7 	.word	0x00000aa7
100099d4:	00000ab6 	.word	0x00000ab6
100099d8:	10009371 	.word	0x10009371
100099dc:	00000aa2 	.word	0x00000aa2
100099e0:	10009535 	.word	0x10009535
100099e4:	100096a9 	.word	0x100096a9
100099e8:	0000073d 	.word	0x0000073d
100099ec:	1000972d 	.word	0x1000972d
100099f0:	10009771 	.word	0x10009771
100099f4:	1001b6b4 	.word	0x1001b6b4
100099f8:	10008465 	.word	0x10008465
100099fc:	100096f1 	.word	0x100096f1

10009a00 <inv_db_save_func>:
    return INV_SUCCESS;
}

/** This function returns the data to be stored in non-volatile memory between power off */
static inv_error_t inv_db_save_func(unsigned char *data)
{
10009a00:	b510      	push	{r4, lr}
    memcpy(data, &inv_data_builder.save, sizeof(inv_data_builder.save));
10009a02:	4903      	ldr	r1, [pc, #12]	; (10009a10 <inv_db_save_func+0x10>)
10009a04:	2248      	movs	r2, #72	; 0x48
10009a06:	31f4      	adds	r1, #244	; 0xf4
10009a08:	4b02      	ldr	r3, [pc, #8]	; (10009a14 <inv_db_save_func+0x14>)
10009a0a:	4798      	blx	r3
    return INV_SUCCESS;
}
10009a0c:	2000      	movs	r0, #0
10009a0e:	bd10      	pop	{r4, pc}
10009a10:	1001b6c4 	.word	0x1001b6c4
10009a14:	100182cf 	.word	0x100182cf

10009a18 <inv_db_load_func>:
}
#endif

/** This function receives the data that was stored in non-volatile memory between power off */
static inv_error_t inv_db_load_func(const unsigned char *data)
{
10009a18:	b510      	push	{r4, lr}
    memcpy(&inv_data_builder.save, data, sizeof(inv_data_builder.save));
10009a1a:	4c0e      	ldr	r4, [pc, #56]	; (10009a54 <inv_db_load_func+0x3c>)
}
#endif

/** This function receives the data that was stored in non-volatile memory between power off */
static inv_error_t inv_db_load_func(const unsigned char *data)
{
10009a1c:	0001      	movs	r1, r0
    memcpy(&inv_data_builder.save, data, sizeof(inv_data_builder.save));
10009a1e:	0020      	movs	r0, r4
10009a20:	2248      	movs	r2, #72	; 0x48
10009a22:	4b0d      	ldr	r3, [pc, #52]	; (10009a58 <inv_db_load_func+0x40>)
10009a24:	30f4      	adds	r0, #244	; 0xf4
10009a26:	4798      	blx	r3
    // copy in the saved accuracy in the actual sensors accuracy
    sensors.gyro.accuracy = inv_data_builder.save.gyro_accuracy;
10009a28:	2298      	movs	r2, #152	; 0x98
10009a2a:	0052      	lsls	r2, r2, #1
10009a2c:	4b0b      	ldr	r3, [pc, #44]	; (10009a5c <inv_db_load_func+0x44>)
10009a2e:	58a2      	ldr	r2, [r4, r2]
    sensors.accel.accuracy = inv_data_builder.save.accel_accuracy;
    sensors.compass.accuracy = inv_data_builder.save.compass_accuracy;
10009a30:	21bc      	movs	r1, #188	; 0xbc
/** This function receives the data that was stored in non-volatile memory between power off */
static inv_error_t inv_db_load_func(const unsigned char *data)
{
    memcpy(&inv_data_builder.save, data, sizeof(inv_data_builder.save));
    // copy in the saved accuracy in the actual sensors accuracy
    sensors.gyro.accuracy = inv_data_builder.save.gyro_accuracy;
10009a32:	635a      	str	r2, [r3, #52]	; 0x34
    sensors.accel.accuracy = inv_data_builder.save.accel_accuracy;
10009a34:	229a      	movs	r2, #154	; 0x9a
10009a36:	0052      	lsls	r2, r2, #1
10009a38:	58a2      	ldr	r2, [r4, r2]
10009a3a:	679a      	str	r2, [r3, #120]	; 0x78
    sensors.compass.accuracy = inv_data_builder.save.compass_accuracy;
10009a3c:	229c      	movs	r2, #156	; 0x9c
10009a3e:	0052      	lsls	r2, r2, #1
10009a40:	58a2      	ldr	r2, [r4, r2]
10009a42:	505a      	str	r2, [r3, r1]
    // TODO
    if (sensors.compass.accuracy == 3) {
10009a44:	2a03      	cmp	r2, #3
10009a46:	d001      	beq.n	10009a4c <inv_db_load_func+0x34>
        inv_set_compass_bias_found(1);
    }
    return INV_SUCCESS;
}
10009a48:	2000      	movs	r0, #0
10009a4a:	bd10      	pop	{r4, pc}
    sensors.gyro.accuracy = inv_data_builder.save.gyro_accuracy;
    sensors.accel.accuracy = inv_data_builder.save.accel_accuracy;
    sensors.compass.accuracy = inv_data_builder.save.compass_accuracy;
    // TODO
    if (sensors.compass.accuracy == 3) {
        inv_set_compass_bias_found(1);
10009a4c:	2001      	movs	r0, #1
10009a4e:	4b04      	ldr	r3, [pc, #16]	; (10009a60 <inv_db_load_func+0x48>)
10009a50:	4798      	blx	r3
10009a52:	e7f9      	b.n	10009a48 <inv_db_load_func+0x30>
10009a54:	1001b6c4 	.word	0x1001b6c4
10009a58:	100182cf 	.word	0x100182cf
10009a5c:	1001b804 	.word	0x1001b804
10009a60:	1000ada1 	.word	0x1000ada1

10009a64 <inv_set_gyro_orientation_and_scale>:
*            standard units (dps, uT, g).
*/
void set_sensor_orientation_and_scale(struct inv_single_sensor_t *sensor,
                                 int orientation, long sensitivity)
{
    sensor->sensitivity = sensitivity;
10009a64:	4b01      	ldr	r3, [pc, #4]	; (10009a6c <inv_set_gyro_orientation_and_scale+0x8>)
10009a66:	6259      	str	r1, [r3, #36]	; 0x24
    sensor->orientation = orientation;
10009a68:	6018      	str	r0, [r3, #0]
        fwrite(&sensitivity, sizeof(sensitivity), 1, inv_data_builder.file);
    }
#endif
    set_sensor_orientation_and_scale(&sensors.gyro, orientation,
                                     sensitivity);
}
10009a6a:	4770      	bx	lr
10009a6c:	1001b804 	.word	0x1001b804

10009a70 <inv_set_gyro_sample_rate>:
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.gyro.sample_rate_us = sample_rate_us;
    sensors.gyro.sample_rate_ms = sample_rate_us / 1000;
10009a70:	21fa      	movs	r1, #250	; 0xfa

/** Set Gyro Sample rate in micro seconds.
* @param[in] sample_rate_us Set Gyro Sample rate in us
*/
void inv_set_gyro_sample_rate(long sample_rate_us)
{
10009a72:	b570      	push	{r4, r5, r6, lr}
        int type = PLAYBACK_DBG_TYPE_G_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.gyro.sample_rate_us = sample_rate_us;
10009a74:	4c07      	ldr	r4, [pc, #28]	; (10009a94 <inv_set_gyro_sample_rate+0x24>)
    sensors.gyro.sample_rate_ms = sample_rate_us / 1000;
10009a76:	4e08      	ldr	r6, [pc, #32]	; (10009a98 <inv_set_gyro_sample_rate+0x28>)
        int type = PLAYBACK_DBG_TYPE_G_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.gyro.sample_rate_us = sample_rate_us;
10009a78:	62a0      	str	r0, [r4, #40]	; 0x28
    sensors.gyro.sample_rate_ms = sample_rate_us / 1000;
10009a7a:	0089      	lsls	r1, r1, #2

/** Set Gyro Sample rate in micro seconds.
* @param[in] sample_rate_us Set Gyro Sample rate in us
*/
void inv_set_gyro_sample_rate(long sample_rate_us)
{
10009a7c:	0005      	movs	r5, r0
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.gyro.sample_rate_us = sample_rate_us;
    sensors.gyro.sample_rate_ms = sample_rate_us / 1000;
10009a7e:	47b0      	blx	r6
    if (sensors.gyro.bandwidth == 0) {
10009a80:	6c23      	ldr	r3, [r4, #64]	; 0x40
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.gyro.sample_rate_us = sample_rate_us;
    sensors.gyro.sample_rate_ms = sample_rate_us / 1000;
10009a82:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (sensors.gyro.bandwidth == 0) {
10009a84:	2b00      	cmp	r3, #0
10009a86:	d103      	bne.n	10009a90 <inv_set_gyro_sample_rate+0x20>
        sensors.gyro.bandwidth = (int)(1000000L / sample_rate_us);
10009a88:	0029      	movs	r1, r5
10009a8a:	4804      	ldr	r0, [pc, #16]	; (10009a9c <inv_set_gyro_sample_rate+0x2c>)
10009a8c:	47b0      	blx	r6
10009a8e:	6420      	str	r0, [r4, #64]	; 0x40
    }
}
10009a90:	bd70      	pop	{r4, r5, r6, pc}
10009a92:	46c0      	nop			; (mov r8, r8)
10009a94:	1001b804 	.word	0x1001b804
10009a98:	100150c9 	.word	0x100150c9
10009a9c:	000f4240 	.word	0x000f4240

10009aa0 <inv_set_accel_sample_rate>:
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.accel.sample_rate_us = sample_rate_us;
    sensors.accel.sample_rate_ms = sample_rate_us / 1000;
10009aa0:	21fa      	movs	r1, #250	; 0xfa

/** Set Accel Sample rate in micro seconds.
* @param[in] sample_rate_us Set Accel Sample rate in us
*/
void inv_set_accel_sample_rate(long sample_rate_us)
{
10009aa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        int type = PLAYBACK_DBG_TYPE_A_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.accel.sample_rate_us = sample_rate_us;
10009aa4:	4c07      	ldr	r4, [pc, #28]	; (10009ac4 <inv_set_accel_sample_rate+0x24>)
    sensors.accel.sample_rate_ms = sample_rate_us / 1000;
    if (sensors.accel.bandwidth == 0) {
10009aa6:	2684      	movs	r6, #132	; 0x84
        int type = PLAYBACK_DBG_TYPE_A_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.accel.sample_rate_us = sample_rate_us;
10009aa8:	66e0      	str	r0, [r4, #108]	; 0x6c
    sensors.accel.sample_rate_ms = sample_rate_us / 1000;
10009aaa:	4f07      	ldr	r7, [pc, #28]	; (10009ac8 <inv_set_accel_sample_rate+0x28>)
10009aac:	0089      	lsls	r1, r1, #2

/** Set Accel Sample rate in micro seconds.
* @param[in] sample_rate_us Set Accel Sample rate in us
*/
void inv_set_accel_sample_rate(long sample_rate_us)
{
10009aae:	0005      	movs	r5, r0
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.accel.sample_rate_us = sample_rate_us;
    sensors.accel.sample_rate_ms = sample_rate_us / 1000;
10009ab0:	47b8      	blx	r7
    if (sensors.accel.bandwidth == 0) {
10009ab2:	59a3      	ldr	r3, [r4, r6]
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.accel.sample_rate_us = sample_rate_us;
    sensors.accel.sample_rate_ms = sample_rate_us / 1000;
10009ab4:	6720      	str	r0, [r4, #112]	; 0x70
    if (sensors.accel.bandwidth == 0) {
10009ab6:	2b00      	cmp	r3, #0
10009ab8:	d103      	bne.n	10009ac2 <inv_set_accel_sample_rate+0x22>
        sensors.accel.bandwidth = (int)(1000000L / sample_rate_us);
10009aba:	0029      	movs	r1, r5
10009abc:	4803      	ldr	r0, [pc, #12]	; (10009acc <inv_set_accel_sample_rate+0x2c>)
10009abe:	47b8      	blx	r7
10009ac0:	51a0      	str	r0, [r4, r6]
    }
}
10009ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009ac4:	1001b804 	.word	0x1001b804
10009ac8:	100150c9 	.word	0x100150c9
10009acc:	000f4240 	.word	0x000f4240

10009ad0 <inv_set_compass_sample_rate>:

/** Set Compass Sample rate in micro seconds.
* @param[in] sample_rate_us Set Gyro Sample rate in micro seconds.
*/
void inv_set_compass_sample_rate(long sample_rate_us)
{
10009ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.compass.sample_rate_us = sample_rate_us;
    sensors.compass.sample_rate_ms = sample_rate_us / 1000;
10009ad2:	21fa      	movs	r1, #250	; 0xfa
        int type = PLAYBACK_DBG_TYPE_C_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.compass.sample_rate_us = sample_rate_us;
10009ad4:	23b0      	movs	r3, #176	; 0xb0
10009ad6:	4c08      	ldr	r4, [pc, #32]	; (10009af8 <inv_set_compass_sample_rate+0x28>)
    sensors.compass.sample_rate_ms = sample_rate_us / 1000;
10009ad8:	4f08      	ldr	r7, [pc, #32]	; (10009afc <inv_set_compass_sample_rate+0x2c>)
        int type = PLAYBACK_DBG_TYPE_C_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.compass.sample_rate_us = sample_rate_us;
10009ada:	50e0      	str	r0, [r4, r3]
    sensors.compass.sample_rate_ms = sample_rate_us / 1000;
10009adc:	0089      	lsls	r1, r1, #2

/** Set Compass Sample rate in micro seconds.
* @param[in] sample_rate_us Set Gyro Sample rate in micro seconds.
*/
void inv_set_compass_sample_rate(long sample_rate_us)
{
10009ade:	0005      	movs	r5, r0
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.compass.sample_rate_us = sample_rate_us;
    sensors.compass.sample_rate_ms = sample_rate_us / 1000;
    if (sensors.compass.bandwidth == 0) {
10009ae0:	26c8      	movs	r6, #200	; 0xc8
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.compass.sample_rate_us = sample_rate_us;
    sensors.compass.sample_rate_ms = sample_rate_us / 1000;
10009ae2:	47b8      	blx	r7
10009ae4:	23b4      	movs	r3, #180	; 0xb4
10009ae6:	50e0      	str	r0, [r4, r3]
    if (sensors.compass.bandwidth == 0) {
10009ae8:	59a3      	ldr	r3, [r4, r6]
10009aea:	2b00      	cmp	r3, #0
10009aec:	d103      	bne.n	10009af6 <inv_set_compass_sample_rate+0x26>
        sensors.compass.bandwidth = (int)(1000000L / sample_rate_us);
10009aee:	0029      	movs	r1, r5
10009af0:	4803      	ldr	r0, [pc, #12]	; (10009b00 <inv_set_compass_sample_rate+0x30>)
10009af2:	47b8      	blx	r7
10009af4:	51a0      	str	r0, [r4, r6]
    }
}
10009af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009af8:	1001b804 	.word	0x1001b804
10009afc:	100150c9 	.word	0x100150c9
10009b00:	000f4240 	.word	0x000f4240

10009b04 <inv_set_quat_sample_rate>:
        int type = PLAYBACK_DBG_TYPE_Q_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.quat.sample_rate_us = sample_rate_us;
10009b04:	2394      	movs	r3, #148	; 0x94
    sensors.quat.sample_rate_ms = sample_rate_us / 1000;
10009b06:	21fa      	movs	r1, #250	; 0xfa

/** Set Quat Sample rate in micro seconds.
* @param[in] sample_rate_us Set Quat Sample rate in us
*/
void inv_set_quat_sample_rate(long sample_rate_us)
{
10009b08:	b510      	push	{r4, lr}
        int type = PLAYBACK_DBG_TYPE_Q_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.quat.sample_rate_us = sample_rate_us;
10009b0a:	4c05      	ldr	r4, [pc, #20]	; (10009b20 <inv_set_quat_sample_rate+0x1c>)
10009b0c:	005b      	lsls	r3, r3, #1
10009b0e:	50e0      	str	r0, [r4, r3]
    sensors.quat.sample_rate_ms = sample_rate_us / 1000;
10009b10:	0089      	lsls	r1, r1, #2
10009b12:	4b04      	ldr	r3, [pc, #16]	; (10009b24 <inv_set_quat_sample_rate+0x20>)
10009b14:	4798      	blx	r3
10009b16:	2396      	movs	r3, #150	; 0x96
10009b18:	005b      	lsls	r3, r3, #1
10009b1a:	50e0      	str	r0, [r4, r3]
}
10009b1c:	bd10      	pop	{r4, pc}
10009b1e:	46c0      	nop			; (mov r8, r8)
10009b20:	1001b804 	.word	0x1001b804
10009b24:	100150c9 	.word	0x100150c9

10009b28 <inv_get_gyro_on>:
/** Helper function stating whether the gyro is on or off.
 * @return TRUE if gyro if on, 0 if gyro if off
*/
int inv_get_gyro_on()
{
    return (sensors.gyro.status & INV_SENSOR_ON) == INV_SENSOR_ON;
10009b28:	4b02      	ldr	r3, [pc, #8]	; (10009b34 <inv_get_gyro_on+0xc>)
10009b2a:	6b18      	ldr	r0, [r3, #48]	; 0x30
10009b2c:	05c0      	lsls	r0, r0, #23
10009b2e:	0fc0      	lsrs	r0, r0, #31
}
10009b30:	4770      	bx	lr
10009b32:	46c0      	nop			; (mov r8, r8)
10009b34:	1001b804 	.word	0x1001b804

10009b38 <inv_set_accel_orientation_and_scale>:
*            standard units (dps, uT, g).
*/
void set_sensor_orientation_and_scale(struct inv_single_sensor_t *sensor,
                                 int orientation, long sensitivity)
{
    sensor->sensitivity = sensitivity;
10009b38:	4b01      	ldr	r3, [pc, #4]	; (10009b40 <inv_set_accel_orientation_and_scale+0x8>)
10009b3a:	6699      	str	r1, [r3, #104]	; 0x68
    sensor->orientation = orientation;
10009b3c:	6458      	str	r0, [r3, #68]	; 0x44
        fwrite(&sensitivity, sizeof(sensitivity), 1, inv_data_builder.file);
    }
#endif
    set_sensor_orientation_and_scale(&sensors.accel, orientation,
                                     sensitivity);
}
10009b3e:	4770      	bx	lr
10009b40:	1001b804 	.word	0x1001b804

10009b44 <inv_set_compass_orientation_and_scale>:
*            standard units (dps, uT, g).
*/
void set_sensor_orientation_and_scale(struct inv_single_sensor_t *sensor,
                                 int orientation, long sensitivity)
{
    sensor->sensitivity = sensitivity;
10009b44:	22ac      	movs	r2, #172	; 0xac
10009b46:	4b02      	ldr	r3, [pc, #8]	; (10009b50 <inv_set_compass_orientation_and_scale+0xc>)
10009b48:	5099      	str	r1, [r3, r2]
    sensor->orientation = orientation;
10009b4a:	3a24      	subs	r2, #36	; 0x24
10009b4c:	5098      	str	r0, [r3, r2]
        fwrite(&orientation, sizeof(orientation), 1, inv_data_builder.file);
        fwrite(&sensitivity, sizeof(sensitivity), 1, inv_data_builder.file);
    }
#endif
    set_sensor_orientation_and_scale(&sensors.compass, orientation, sensitivity);
}
10009b4e:	4770      	bx	lr
10009b50:	1001b804 	.word	0x1001b804

10009b54 <inv_apply_calibration>:
* @param[in,out] sensor structure to modify
* @param[in] bias bias in the mounting frame, in hardware units scaled by
*                 2^16. Length 3.
*/
void inv_apply_calibration(struct inv_single_sensor_t *sensor, const long *bias)
{
10009b54:	b570      	push	{r4, r5, r6, lr}
    long raw32[3];

    // Convert raw to calibrated
    raw32[0] = (long)sensor->raw[0] << 15;
10009b56:	2204      	movs	r2, #4
10009b58:	5e83      	ldrsh	r3, [r0, r2]
* @param[in,out] sensor structure to modify
* @param[in] bias bias in the mounting frame, in hardware units scaled by
*                 2^16. Length 3.
*/
void inv_apply_calibration(struct inv_single_sensor_t *sensor, const long *bias)
{
10009b5a:	b086      	sub	sp, #24
    long raw32[3];

    // Convert raw to calibrated
    raw32[0] = (long)sensor->raw[0] << 15;
10009b5c:	03db      	lsls	r3, r3, #15
10009b5e:	9303      	str	r3, [sp, #12]
    raw32[1] = (long)sensor->raw[1] << 15;
10009b60:	2206      	movs	r2, #6
10009b62:	5e83      	ldrsh	r3, [r0, r2]
* @param[in,out] sensor structure to modify
* @param[in] bias bias in the mounting frame, in hardware units scaled by
*                 2^16. Length 3.
*/
void inv_apply_calibration(struct inv_single_sensor_t *sensor, const long *bias)
{
10009b64:	000d      	movs	r5, r1
    long raw32[3];

    // Convert raw to calibrated
    raw32[0] = (long)sensor->raw[0] << 15;
    raw32[1] = (long)sensor->raw[1] << 15;
10009b66:	03db      	lsls	r3, r3, #15
10009b68:	9304      	str	r3, [sp, #16]
    raw32[2] = (long)sensor->raw[2] << 15;
10009b6a:	2208      	movs	r2, #8
10009b6c:	5e83      	ldrsh	r3, [r0, r2]
* @param[in,out] sensor structure to modify
* @param[in] bias bias in the mounting frame, in hardware units scaled by
*                 2^16. Length 3.
*/
void inv_apply_calibration(struct inv_single_sensor_t *sensor, const long *bias)
{
10009b6e:	0004      	movs	r4, r0
    long raw32[3];

    // Convert raw to calibrated
    raw32[0] = (long)sensor->raw[0] << 15;
    raw32[1] = (long)sensor->raw[1] << 15;
    raw32[2] = (long)sensor->raw[2] << 15;
10009b70:	03db      	lsls	r3, r3, #15
10009b72:	9305      	str	r3, [sp, #20]

    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->raw_scaled);
10009b74:	0003      	movs	r3, r0
10009b76:	6a42      	ldr	r2, [r0, #36]	; 0x24
10009b78:	4e11      	ldr	r6, [pc, #68]	; (10009bc0 <inv_apply_calibration+0x6c>)
10009b7a:	0051      	lsls	r1, r2, #1
10009b7c:	330c      	adds	r3, #12
10009b7e:	aa03      	add	r2, sp, #12
10009b80:	8800      	ldrh	r0, [r0, #0]
10009b82:	47b0      	blx	r6

    raw32[0] -= bias[0] >> 1;
10009b84:	682b      	ldr	r3, [r5, #0]
10009b86:	9a03      	ldr	r2, [sp, #12]
10009b88:	105b      	asrs	r3, r3, #1
10009b8a:	1ad3      	subs	r3, r2, r3
10009b8c:	9303      	str	r3, [sp, #12]
    raw32[1] -= bias[1] >> 1;
10009b8e:	686b      	ldr	r3, [r5, #4]
10009b90:	9a04      	ldr	r2, [sp, #16]
10009b92:	105b      	asrs	r3, r3, #1
10009b94:	1ad3      	subs	r3, r2, r3
10009b96:	9304      	str	r3, [sp, #16]
    raw32[2] -= bias[2] >> 1;
10009b98:	68ab      	ldr	r3, [r5, #8]
10009b9a:	9a05      	ldr	r2, [sp, #20]
10009b9c:	105b      	asrs	r3, r3, #1
10009b9e:	1ad3      	subs	r3, r2, r3
10009ba0:	9305      	str	r3, [sp, #20]

    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->calibrated);
10009ba2:	0023      	movs	r3, r4

    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->raw_scaled);

    raw32[0] -= bias[0] >> 1;
    raw32[1] -= bias[1] >> 1;
    raw32[2] -= bias[2] >> 1;
10009ba4:	9201      	str	r2, [sp, #4]

    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->calibrated);
10009ba6:	6a62      	ldr	r2, [r4, #36]	; 0x24
10009ba8:	3318      	adds	r3, #24
10009baa:	0051      	lsls	r1, r2, #1
10009bac:	8820      	ldrh	r0, [r4, #0]
10009bae:	aa03      	add	r2, sp, #12
10009bb0:	47b0      	blx	r6

    sensor->status |= INV_CALIBRATED;
10009bb2:	2320      	movs	r3, #32
10009bb4:	6b22      	ldr	r2, [r4, #48]	; 0x30
10009bb6:	4313      	orrs	r3, r2
10009bb8:	6323      	str	r3, [r4, #48]	; 0x30
}
10009bba:	b006      	add	sp, #24
10009bbc:	bd70      	pop	{r4, r5, r6, pc}
10009bbe:	46c0      	nop			; (mov r8, r8)
10009bc0:	1000aa41 	.word	0x1000aa41

10009bc4 <inv_set_compass_disturbance>:
/** Set the state of a compass disturbance
* @param[in] dist 1=disturbance, 0=no disturbance
*/
void inv_set_compass_disturbance(int dist)
{
    inv_data_builder.compass_disturbance = dist;
10009bc4:	239e      	movs	r3, #158	; 0x9e
10009bc6:	4a02      	ldr	r2, [pc, #8]	; (10009bd0 <inv_set_compass_disturbance+0xc>)
10009bc8:	005b      	lsls	r3, r3, #1
10009bca:	50d0      	str	r0, [r2, r3]
}
10009bcc:	4770      	bx	lr
10009bce:	46c0      	nop			; (mov r8, r8)
10009bd0:	1001b6c4 	.word	0x1001b6c4

10009bd4 <inv_set_gyro_bias>:
* @param[in] bias Gyro bias in hardware units scaled by 2^16. In chip mounting frame.
*            Length 3.
* @param[in] accuracy Accuracy of bias. 0 = least accurate, 3 = most accurate.
*/
void inv_set_gyro_bias(const long *bias, int accuracy)
{
10009bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009bd6:	0005      	movs	r5, r0
10009bd8:	000e      	movs	r6, r1
    if (bias != NULL) {
        if (memcmp(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias))) {
10009bda:	4c1d      	ldr	r4, [pc, #116]	; (10009c50 <inv_set_gyro_bias+0x7c>)
*            Length 3.
* @param[in] accuracy Accuracy of bias. 0 = least accurate, 3 = most accurate.
*/
void inv_set_gyro_bias(const long *bias, int accuracy)
{
    if (bias != NULL) {
10009bdc:	2800      	cmp	r0, #0
10009bde:	d008      	beq.n	10009bf2 <inv_set_gyro_bias+0x1e>
        if (memcmp(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias))) {
10009be0:	1c67      	adds	r7, r4, #1
10009be2:	37ff      	adds	r7, #255	; 0xff
10009be4:	0001      	movs	r1, r0
10009be6:	220c      	movs	r2, #12
10009be8:	0038      	movs	r0, r7
10009bea:	4b1a      	ldr	r3, [pc, #104]	; (10009c54 <inv_set_gyro_bias+0x80>)
10009bec:	4798      	blx	r3
10009bee:	2800      	cmp	r0, #0
10009bf0:	d117      	bne.n	10009c22 <inv_set_gyro_bias+0x4e>
            memcpy(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias));
            inv_apply_calibration(&sensors.gyro, inv_data_builder.save.gyro_bias);
        }
    }
    sensors.gyro.accuracy = accuracy;
    inv_data_builder.save.gyro_accuracy = accuracy;
10009bf2:	2398      	movs	r3, #152	; 0x98
10009bf4:	4d18      	ldr	r5, [pc, #96]	; (10009c58 <inv_set_gyro_bias+0x84>)
10009bf6:	005b      	lsls	r3, r3, #1
10009bf8:	50e6      	str	r6, [r4, r3]

    /* TODO: What should we do if there's no temperature data? */
    if (sensors.temp.calibrated[0])
10009bfa:	3b4c      	subs	r3, #76	; 0x4c
10009bfc:	58eb      	ldr	r3, [r5, r3]
        if (memcmp(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias))) {
            memcpy(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias));
            inv_apply_calibration(&sensors.gyro, inv_data_builder.save.gyro_bias);
        }
    }
    sensors.gyro.accuracy = accuracy;
10009bfe:	636e      	str	r6, [r5, #52]	; 0x34
    inv_data_builder.save.gyro_accuracy = accuracy;

    /* TODO: What should we do if there's no temperature data? */
    if (sensors.temp.calibrated[0])
10009c00:	2b00      	cmp	r3, #0
10009c02:	d120      	bne.n	10009c46 <inv_set_gyro_bias+0x72>
        inv_data_builder.save.gyro_temp = sensors.temp.calibrated[0];
    else
        /* Set to 27 deg C for now until we've got a better solution. */
        inv_data_builder.save.gyro_temp = 1769472L;
10009c04:	22d8      	movs	r2, #216	; 0xd8
10009c06:	2386      	movs	r3, #134	; 0x86
10009c08:	0352      	lsls	r2, r2, #13
10009c0a:	005b      	lsls	r3, r3, #1
10009c0c:	50e2      	str	r2, [r4, r3]
    inv_set_message(INV_MSG_NEW_GB_EVENT, INV_MSG_NEW_GB_EVENT, 0);
10009c0e:	2200      	movs	r2, #0
10009c10:	2104      	movs	r1, #4
10009c12:	2004      	movs	r0, #4
10009c14:	4b11      	ldr	r3, [pc, #68]	; (10009c5c <inv_set_gyro_bias+0x88>)
10009c16:	4798      	blx	r3

    /* TODO: this flag works around the synchronization problem seen with using
       the user-exposed message layer to signal the temperature compensation
       module that gyro biases were set.
       A better, cleaner method is certainly needed. */
    inv_data_builder.save.gyro_bias_tc_set = true;
10009c18:	2388      	movs	r3, #136	; 0x88
10009c1a:	2201      	movs	r2, #1
10009c1c:	005b      	lsls	r3, r3, #1
10009c1e:	50e2      	str	r2, [r4, r3]
}
10009c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
*/
void inv_set_gyro_bias(const long *bias, int accuracy)
{
    if (bias != NULL) {
        if (memcmp(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias))) {
            memcpy(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias));
10009c22:	0029      	movs	r1, r5
10009c24:	220c      	movs	r2, #12
10009c26:	4b0e      	ldr	r3, [pc, #56]	; (10009c60 <inv_set_gyro_bias+0x8c>)
10009c28:	0038      	movs	r0, r7
10009c2a:	4798      	blx	r3
            inv_apply_calibration(&sensors.gyro, inv_data_builder.save.gyro_bias);
10009c2c:	4d0a      	ldr	r5, [pc, #40]	; (10009c58 <inv_set_gyro_bias+0x84>)
10009c2e:	4b0d      	ldr	r3, [pc, #52]	; (10009c64 <inv_set_gyro_bias+0x90>)
10009c30:	0039      	movs	r1, r7
10009c32:	0028      	movs	r0, r5
10009c34:	4798      	blx	r3
        }
    }
    sensors.gyro.accuracy = accuracy;
    inv_data_builder.save.gyro_accuracy = accuracy;
10009c36:	2398      	movs	r3, #152	; 0x98
10009c38:	005b      	lsls	r3, r3, #1
10009c3a:	50e6      	str	r6, [r4, r3]

    /* TODO: What should we do if there's no temperature data? */
    if (sensors.temp.calibrated[0])
10009c3c:	3b4c      	subs	r3, #76	; 0x4c
10009c3e:	58eb      	ldr	r3, [r5, r3]
        if (memcmp(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias))) {
            memcpy(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias));
            inv_apply_calibration(&sensors.gyro, inv_data_builder.save.gyro_bias);
        }
    }
    sensors.gyro.accuracy = accuracy;
10009c40:	636e      	str	r6, [r5, #52]	; 0x34
    inv_data_builder.save.gyro_accuracy = accuracy;

    /* TODO: What should we do if there's no temperature data? */
    if (sensors.temp.calibrated[0])
10009c42:	2b00      	cmp	r3, #0
10009c44:	d0de      	beq.n	10009c04 <inv_set_gyro_bias+0x30>
        inv_data_builder.save.gyro_temp = sensors.temp.calibrated[0];
10009c46:	2286      	movs	r2, #134	; 0x86
10009c48:	0052      	lsls	r2, r2, #1
10009c4a:	50a3      	str	r3, [r4, r2]
10009c4c:	e7df      	b.n	10009c0e <inv_set_gyro_bias+0x3a>
10009c4e:	46c0      	nop			; (mov r8, r8)
10009c50:	1001b6c4 	.word	0x1001b6c4
10009c54:	100182b1 	.word	0x100182b1
10009c58:	1001b804 	.word	0x1001b804
10009c5c:	1000a141 	.word	0x1000a141
10009c60:	100182cf 	.word	0x100182cf
10009c64:	10009b55 	.word	0x10009b55

10009c68 <inv_get_gyro_bias_tc_set>:
 *  @return true if the flag was set, indicating gyro biases were set.
 *          false if the flag was not set.
 */
int inv_get_gyro_bias_tc_set(void)
{
    int flag = (inv_data_builder.save.gyro_bias_tc_set == true);
10009c68:	2388      	movs	r3, #136	; 0x88
 *          The flag clear automatically after is read.
 *  @return true if the flag was set, indicating gyro biases were set.
 *          false if the flag was not set.
 */
int inv_get_gyro_bias_tc_set(void)
{
10009c6a:	b510      	push	{r4, lr}
    int flag = (inv_data_builder.save.gyro_bias_tc_set == true);
10009c6c:	4a04      	ldr	r2, [pc, #16]	; (10009c80 <inv_get_gyro_bias_tc_set+0x18>)
10009c6e:	005b      	lsls	r3, r3, #1
10009c70:	58d1      	ldr	r1, [r2, r3]
10009c72:	1e48      	subs	r0, r1, #1
10009c74:	4244      	negs	r4, r0
10009c76:	4144      	adcs	r4, r0
    inv_data_builder.save.gyro_bias_tc_set = false;
10009c78:	2100      	movs	r1, #0
    return flag;
}
10009c7a:	0020      	movs	r0, r4
 *          false if the flag was not set.
 */
int inv_get_gyro_bias_tc_set(void)
{
    int flag = (inv_data_builder.save.gyro_bias_tc_set == true);
    inv_data_builder.save.gyro_bias_tc_set = false;
10009c7c:	50d1      	str	r1, [r2, r3]
    return flag;
}
10009c7e:	bd10      	pop	{r4, pc}
10009c80:	1001b6c4 	.word	0x1001b6c4

10009c84 <inv_get_gyro_bias>:
 *              Length 3.
 *  @param[in] temp
 *              Tempearature in degrees C.
 */
void inv_get_gyro_bias(long *bias, long *temp)
{
10009c84:	b510      	push	{r4, lr}
10009c86:	000c      	movs	r4, r1
    if (bias != NULL)
10009c88:	2800      	cmp	r0, #0
10009c8a:	d005      	beq.n	10009c98 <inv_get_gyro_bias+0x14>
        memcpy(bias, inv_data_builder.save.gyro_bias,
10009c8c:	4906      	ldr	r1, [pc, #24]	; (10009ca8 <inv_get_gyro_bias+0x24>)
10009c8e:	220c      	movs	r2, #12
10009c90:	3101      	adds	r1, #1
10009c92:	31ff      	adds	r1, #255	; 0xff
10009c94:	4b05      	ldr	r3, [pc, #20]	; (10009cac <inv_get_gyro_bias+0x28>)
10009c96:	4798      	blx	r3
               sizeof(inv_data_builder.save.gyro_bias));
    if (temp != NULL)
10009c98:	2c00      	cmp	r4, #0
10009c9a:	d004      	beq.n	10009ca6 <inv_get_gyro_bias+0x22>
        temp[0] = inv_data_builder.save.gyro_temp;
10009c9c:	2386      	movs	r3, #134	; 0x86
10009c9e:	4a02      	ldr	r2, [pc, #8]	; (10009ca8 <inv_get_gyro_bias+0x24>)
10009ca0:	005b      	lsls	r3, r3, #1
10009ca2:	58d3      	ldr	r3, [r2, r3]
10009ca4:	6023      	str	r3, [r4, #0]
}
10009ca6:	bd10      	pop	{r4, pc}
10009ca8:	1001b6c4 	.word	0x1001b6c4
10009cac:	100182cf 	.word	0x100182cf

10009cb0 <inv_register_data_cb>:
*            callback would be generated if there was new magnetomer data OR new accel data.
*/
inv_error_t inv_register_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data),
    int priority, int sensor_type)
{
10009cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
10009cb2:	4656      	mov	r6, sl
10009cb4:	464d      	mov	r5, r9
10009cb6:	465f      	mov	r7, fp
10009cb8:	4644      	mov	r4, r8
10009cba:	b4f0      	push	{r4, r5, r6, r7}
    inv_error_t result = INV_SUCCESS;
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
10009cbc:	4b3a      	ldr	r3, [pc, #232]	; (10009da8 <inv_register_data_cb+0xf8>)
*            callback would be generated if there was new magnetomer data OR new accel data.
*/
inv_error_t inv_register_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data),
    int priority, int sensor_type)
{
10009cbe:	b083      	sub	sp, #12
    inv_error_t result = INV_SUCCESS;
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
10009cc0:	681e      	ldr	r6, [r3, #0]
*            callback would be generated if there was new magnetomer data OR new accel data.
*/
inv_error_t inv_register_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data),
    int priority, int sensor_type)
{
10009cc2:	9200      	str	r2, [sp, #0]
    inv_error_t result = INV_SUCCESS;
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
10009cc4:	4699      	mov	r9, r3
10009cc6:	2e00      	cmp	r6, #0
10009cc8:	dd22      	ble.n	10009d10 <inv_register_data_cb+0x60>
        if ((inv_data_builder.process[kk].func == func) ||
10009cca:	685b      	ldr	r3, [r3, #4]
10009ccc:	4298      	cmp	r0, r3
10009cce:	d017      	beq.n	10009d00 <inv_register_data_cb+0x50>
10009cd0:	464b      	mov	r3, r9
10009cd2:	689b      	ldr	r3, [r3, #8]
10009cd4:	4299      	cmp	r1, r3
10009cd6:	d013      	beq.n	10009d00 <inv_register_data_cb+0x50>
10009cd8:	464b      	mov	r3, r9
10009cda:	2400      	movs	r4, #0
10009cdc:	3310      	adds	r3, #16
10009cde:	e008      	b.n	10009cf2 <inv_register_data_cb+0x42>
10009ce0:	681d      	ldr	r5, [r3, #0]
10009ce2:	4285      	cmp	r5, r0
10009ce4:	d00c      	beq.n	10009d00 <inv_register_data_cb+0x50>
10009ce6:	330c      	adds	r3, #12
                (inv_data_builder.process[kk].priority == priority)) {
10009ce8:	001d      	movs	r5, r3
10009cea:	3d08      	subs	r5, #8
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
        if ((inv_data_builder.process[kk].func == func) ||
10009cec:	682d      	ldr	r5, [r5, #0]
10009cee:	428d      	cmp	r5, r1
10009cf0:	d006      	beq.n	10009d00 <inv_register_data_cb+0x50>
    inv_error_t result = INV_SUCCESS;
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
10009cf2:	3401      	adds	r4, #1
10009cf4:	42b4      	cmp	r4, r6
10009cf6:	d1f3      	bne.n	10009ce0 <inv_register_data_cb+0x30>
            return INV_ERROR_INVALID_PARAMETER;    //fixme give a warning
        }
    }

    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
10009cf8:	2c13      	cmp	r4, #19
10009cfa:	dd1d      	ble.n	10009d38 <inv_register_data_cb+0x88>
        inv_data_builder.process[kk].priority = priority;
        inv_data_builder.process[kk].data_required = sensor_type;
        inv_data_builder.num_cb++;
    } else {
        MPL_LOGE("Unable to add feature callback as too many were already registered\n");
        result = INV_ERROR_MEMORY_EXAUSTED;
10009cfc:	200c      	movs	r0, #12
10009cfe:	e000      	b.n	10009d02 <inv_register_data_cb+0x52>
    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
        if ((inv_data_builder.process[kk].func == func) ||
                (inv_data_builder.process[kk].priority == priority)) {
            return INV_ERROR_INVALID_PARAMETER;    //fixme give a warning
10009d00:	2016      	movs	r0, #22
        MPL_LOGE("Unable to add feature callback as too many were already registered\n");
        result = INV_ERROR_MEMORY_EXAUSTED;
    }

    return result;
}
10009d02:	b003      	add	sp, #12
10009d04:	bc3c      	pop	{r2, r3, r4, r5}
10009d06:	4690      	mov	r8, r2
10009d08:	4699      	mov	r9, r3
10009d0a:	46a2      	mov	sl, r4
10009d0c:	46ab      	mov	fp, r5
10009d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009d10:	2300      	movs	r3, #0
10009d12:	469b      	mov	fp, r3
    }

    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
10009d14:	2e00      	cmp	r6, #0
10009d16:	d126      	bne.n	10009d66 <inv_register_data_cb+0xb6>
10009d18:	9301      	str	r3, [sp, #4]
                        inv_data_builder.process[nn - 1];
                }
            }
        }
        // Add new callback
        inv_data_builder.process[kk].func = func;
10009d1a:	9b01      	ldr	r3, [sp, #4]
10009d1c:	465d      	mov	r5, fp
10009d1e:	469c      	mov	ip, r3
10009d20:	4465      	add	r5, ip
        inv_data_builder.process[kk].priority = priority;
        inv_data_builder.process[kk].data_required = sensor_type;
10009d22:	9b00      	ldr	r3, [sp, #0]
                        inv_data_builder.process[nn - 1];
                }
            }
        }
        // Add new callback
        inv_data_builder.process[kk].func = func;
10009d24:	00ad      	lsls	r5, r5, #2
10009d26:	444d      	add	r5, r9
        inv_data_builder.process[kk].priority = priority;
        inv_data_builder.process[kk].data_required = sensor_type;
10009d28:	60eb      	str	r3, [r5, #12]
        inv_data_builder.num_cb++;
10009d2a:	464b      	mov	r3, r9
10009d2c:	3601      	adds	r6, #1
                        inv_data_builder.process[nn - 1];
                }
            }
        }
        // Add new callback
        inv_data_builder.process[kk].func = func;
10009d2e:	6068      	str	r0, [r5, #4]
        inv_data_builder.process[kk].priority = priority;
10009d30:	60a9      	str	r1, [r5, #8]
        inv_data_builder.process[kk].data_required = sensor_type;
        inv_data_builder.num_cb++;
10009d32:	601e      	str	r6, [r3, #0]
*/
inv_error_t inv_register_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data),
    int priority, int sensor_type)
{
    inv_error_t result = INV_SUCCESS;
10009d34:	2000      	movs	r0, #0
10009d36:	e7e4      	b.n	10009d02 <inv_register_data_cb+0x52>
    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
10009d38:	464b      	mov	r3, r9
10009d3a:	689b      	ldr	r3, [r3, #8]
10009d3c:	4299      	cmp	r1, r3
10009d3e:	dd2f      	ble.n	10009da0 <inv_register_data_cb+0xf0>
10009d40:	464b      	mov	r3, r9
10009d42:	2200      	movs	r2, #0
10009d44:	3314      	adds	r3, #20
10009d46:	4693      	mov	fp, r2
10009d48:	e005      	b.n	10009d56 <inv_register_data_cb+0xa6>
10009d4a:	330c      	adds	r3, #12
                    (inv_data_builder.process[kk].priority < priority)) {
10009d4c:	001c      	movs	r4, r3
10009d4e:	3c0c      	subs	r4, #12
    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
10009d50:	6824      	ldr	r4, [r4, #0]
10009d52:	42a1      	cmp	r1, r4
10009d54:	dd07      	ble.n	10009d66 <inv_register_data_cb+0xb6>
                    (inv_data_builder.process[kk].priority < priority)) {
                kk++;
10009d56:	2201      	movs	r2, #1
10009d58:	4694      	mov	ip, r2
10009d5a:	44e3      	add	fp, ip
    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
10009d5c:	45b3      	cmp	fp, r6
10009d5e:	d1f4      	bne.n	10009d4a <inv_register_data_cb+0x9a>
10009d60:	465b      	mov	r3, fp
10009d62:	005b      	lsls	r3, r3, #1
10009d64:	e7d8      	b.n	10009d18 <inv_register_data_cb+0x68>
                    (inv_data_builder.process[kk].priority < priority)) {
                kk++;
            }
            if (kk != inv_data_builder.num_cb) {
                // We need to move the others
                for (nn = inv_data_builder.num_cb; nn > kk; --nn) {
10009d66:	45b3      	cmp	fp, r6
10009d68:	dafa      	bge.n	10009d60 <inv_register_data_cb+0xb0>
10009d6a:	0073      	lsls	r3, r6, #1
10009d6c:	199b      	adds	r3, r3, r6
10009d6e:	009b      	lsls	r3, r3, #2
10009d70:	3b08      	subs	r3, #8
10009d72:	444b      	add	r3, r9
10009d74:	469a      	mov	sl, r3
10009d76:	465b      	mov	r3, fp
10009d78:	005b      	lsls	r3, r3, #1
10009d7a:	001c      	movs	r4, r3
10009d7c:	445c      	add	r4, fp
10009d7e:	00a4      	lsls	r4, r4, #2
10009d80:	3c08      	subs	r4, #8
10009d82:	46a4      	mov	ip, r4
10009d84:	9301      	str	r3, [sp, #4]
10009d86:	44cc      	add	ip, r9
                    inv_data_builder.process[nn] =
10009d88:	4654      	mov	r4, sl
10009d8a:	4652      	mov	r2, sl
10009d8c:	340c      	adds	r4, #12
10009d8e:	caa8      	ldmia	r2!, {r3, r5, r7}
10009d90:	c4a8      	stmia	r4!, {r3, r5, r7}
10009d92:	230c      	movs	r3, #12
10009d94:	425b      	negs	r3, r3
10009d96:	4698      	mov	r8, r3
10009d98:	44c2      	add	sl, r8
                    (inv_data_builder.process[kk].priority < priority)) {
                kk++;
            }
            if (kk != inv_data_builder.num_cb) {
                // We need to move the others
                for (nn = inv_data_builder.num_cb; nn > kk; --nn) {
10009d9a:	45d4      	cmp	ip, sl
10009d9c:	d1f4      	bne.n	10009d88 <inv_register_data_cb+0xd8>
10009d9e:	e7bc      	b.n	10009d1a <inv_register_data_cb+0x6a>
    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
10009da0:	2300      	movs	r3, #0
10009da2:	469b      	mov	fp, r3
10009da4:	e7e1      	b.n	10009d6a <inv_register_data_cb+0xba>
10009da6:	46c0      	nop			; (mov r8, r8)
10009da8:	1001b6c4 	.word	0x1001b6c4

10009dac <inv_unregister_data_cb>:
*            INV_ACCEL_NEW | INV_MAG_NEW, a
*            callback would be generated if there was new magnetomer data OR new accel data.
*/
inv_error_t inv_unregister_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data))
{
10009dac:	b5f0      	push	{r4, r5, r6, r7, lr}
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
10009dae:	4e17      	ldr	r6, [pc, #92]	; (10009e0c <inv_unregister_data_cb+0x60>)
10009db0:	6835      	ldr	r5, [r6, #0]
10009db2:	2d00      	cmp	r5, #0
10009db4:	dd10      	ble.n	10009dd8 <inv_unregister_data_cb+0x2c>
        if (inv_data_builder.process[kk].func == func) {
10009db6:	6873      	ldr	r3, [r6, #4]
10009db8:	4298      	cmp	r0, r3
10009dba:	d025      	beq.n	10009e08 <inv_unregister_data_cb+0x5c>
10009dbc:	0032      	movs	r2, r6
10009dbe:	2300      	movs	r3, #0
10009dc0:	3210      	adds	r2, #16
10009dc2:	e006      	b.n	10009dd2 <inv_unregister_data_cb+0x26>
10009dc4:	320c      	adds	r2, #12
10009dc6:	0014      	movs	r4, r2
10009dc8:	3c0c      	subs	r4, #12
10009dca:	6824      	ldr	r4, [r4, #0]
10009dcc:	4284      	cmp	r4, r0
10009dce:	d005      	beq.n	10009ddc <inv_unregister_data_cb+0x30>
10009dd0:	000b      	movs	r3, r1
inv_error_t inv_unregister_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data))
{
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
10009dd2:	1c59      	adds	r1, r3, #1
10009dd4:	42a9      	cmp	r1, r5
10009dd6:	d1f5      	bne.n	10009dc4 <inv_unregister_data_cb+0x18>
            return INV_SUCCESS;
        }
    }

    return INV_SUCCESS;    // We did not find the callback
}
10009dd8:	2000      	movs	r0, #0
10009dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009ddc:	3302      	adds	r3, #2
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
        if (inv_data_builder.process[kk].func == func) {
            // Delete this callback
            for (nn = kk + 1; nn < inv_data_builder.num_cb; ++nn) {
10009dde:	42ab      	cmp	r3, r5
10009de0:	da0f      	bge.n	10009e02 <inv_unregister_data_cb+0x56>
10009de2:	005a      	lsls	r2, r3, #1
10009de4:	0069      	lsls	r1, r5, #1
10009de6:	18d3      	adds	r3, r2, r3
10009de8:	1949      	adds	r1, r1, r5
10009dea:	009b      	lsls	r3, r3, #2
10009dec:	0089      	lsls	r1, r1, #2
10009dee:	3b08      	subs	r3, #8
10009df0:	3908      	subs	r1, #8
10009df2:	18f3      	adds	r3, r6, r3
10009df4:	1871      	adds	r1, r6, r1
                inv_data_builder.process[nn - 1] =
10009df6:	001a      	movs	r2, r3
10009df8:	320c      	adds	r2, #12
10009dfa:	ca91      	ldmia	r2!, {r0, r4, r7}
10009dfc:	c391      	stmia	r3!, {r0, r4, r7}
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
        if (inv_data_builder.process[kk].func == func) {
            // Delete this callback
            for (nn = kk + 1; nn < inv_data_builder.num_cb; ++nn) {
10009dfe:	428b      	cmp	r3, r1
10009e00:	d1f9      	bne.n	10009df6 <inv_unregister_data_cb+0x4a>
                inv_data_builder.process[nn - 1] =
                    inv_data_builder.process[nn];
            }
            inv_data_builder.num_cb--;
10009e02:	3d01      	subs	r5, #1
10009e04:	6035      	str	r5, [r6, #0]
            return INV_SUCCESS;
10009e06:	e7e7      	b.n	10009dd8 <inv_unregister_data_cb+0x2c>
    inv_error_t (*func)(struct inv_sensor_cal_t *data))
{
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
        if (inv_data_builder.process[kk].func == func) {
10009e08:	2301      	movs	r3, #1
10009e0a:	e7e8      	b.n	10009dde <inv_unregister_data_cb+0x32>
10009e0c:	1001b6c4 	.word	0x1001b6c4

10009e10 <inv_execute_on_data>:
* It will process the data it has received and update all the internal states
* and features that have been turned on.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_execute_on_data(void)
{
10009e10:	b5f0      	push	{r4, r5, r6, r7, lr}
10009e12:	465f      	mov	r7, fp
10009e14:	4644      	mov	r4, r8
10009e16:	4656      	mov	r6, sl
10009e18:	464d      	mov	r5, r9
10009e1a:	b4f0      	push	{r4, r5, r6, r7}
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
    }
#endif
    // Determine what new data we have
    mode = 0;
    if (sensors.gyro.status & INV_NEW_DATA)
10009e1c:	4e4f      	ldr	r6, [pc, #316]	; (10009f5c <inv_execute_on_data+0x14c>)
* It will process the data it has received and update all the internal states
* and features that have been turned on.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_execute_on_data(void)
{
10009e1e:	b083      	sub	sp, #12
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
    }
#endif
    // Determine what new data we have
    mode = 0;
    if (sensors.gyro.status & INV_NEW_DATA)
10009e20:	6b33      	ldr	r3, [r6, #48]	; 0x30
        mode |= INV_GYRO_NEW;
    if (sensors.accel.status & INV_NEW_DATA)
10009e22:	6f70      	ldr	r0, [r6, #116]	; 0x74
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
    }
#endif
    // Determine what new data we have
    mode = 0;
    if (sensors.gyro.status & INV_NEW_DATA)
10009e24:	469c      	mov	ip, r3
10009e26:	2340      	movs	r3, #64	; 0x40
10009e28:	4662      	mov	r2, ip
10009e2a:	401a      	ands	r2, r3
        mode |= INV_GYRO_NEW;
10009e2c:	0014      	movs	r4, r2
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
    }
#endif
    // Determine what new data we have
    mode = 0;
    if (sensors.gyro.status & INV_NEW_DATA)
10009e2e:	4693      	mov	fp, r2
        mode |= INV_GYRO_NEW;
10009e30:	1e62      	subs	r2, r4, #1
10009e32:	4194      	sbcs	r4, r2
    if (sensors.accel.status & INV_NEW_DATA)
10009e34:	4003      	ands	r3, r0
    }
#endif
    // Determine what new data we have
    mode = 0;
    if (sensors.gyro.status & INV_NEW_DATA)
        mode |= INV_GYRO_NEW;
10009e36:	0062      	lsls	r2, r4, #1
10009e38:	4690      	mov	r8, r2
    if (sensors.accel.status & INV_NEW_DATA)
10009e3a:	1e1f      	subs	r7, r3, #0
10009e3c:	d002      	beq.n	10009e44 <inv_execute_on_data+0x34>
        mode |= INV_ACCEL_NEW;
10009e3e:	2301      	movs	r3, #1
10009e40:	431a      	orrs	r2, r3
10009e42:	4690      	mov	r8, r2
    if (sensors.compass.status & INV_NEW_DATA)
10009e44:	23b8      	movs	r3, #184	; 0xb8
10009e46:	58f1      	ldr	r1, [r6, r3]
10009e48:	3b78      	subs	r3, #120	; 0x78
10009e4a:	400b      	ands	r3, r1
10009e4c:	469a      	mov	sl, r3
10009e4e:	d003      	beq.n	10009e58 <inv_execute_on_data+0x48>
        mode |= INV_MAG_NEW;
10009e50:	4642      	mov	r2, r8
10009e52:	2304      	movs	r3, #4
10009e54:	431a      	orrs	r2, r3
10009e56:	4690      	mov	r8, r2
    if (sensors.temp.status & INV_NEW_DATA)
10009e58:	23fc      	movs	r3, #252	; 0xfc
10009e5a:	58f2      	ldr	r2, [r6, r3]
10009e5c:	3bbc      	subs	r3, #188	; 0xbc
10009e5e:	4013      	ands	r3, r2
10009e60:	4699      	mov	r9, r3
10009e62:	d003      	beq.n	10009e6c <inv_execute_on_data+0x5c>
        mode |= INV_TEMP_NEW;
10009e64:	4644      	mov	r4, r8
10009e66:	2308      	movs	r3, #8
10009e68:	431c      	orrs	r4, r3
10009e6a:	46a0      	mov	r8, r4
    if (sensors.quat.status & INV_NEW_DATA)
10009e6c:	2390      	movs	r3, #144	; 0x90
10009e6e:	2540      	movs	r5, #64	; 0x40
10009e70:	005b      	lsls	r3, r3, #1
10009e72:	58f3      	ldr	r3, [r6, r3]
10009e74:	401d      	ands	r5, r3
10009e76:	9501      	str	r5, [sp, #4]
10009e78:	d003      	beq.n	10009e82 <inv_execute_on_data+0x72>
        mode |= INV_QUAT_NEW;
10009e7a:	4644      	mov	r4, r8
10009e7c:	2510      	movs	r5, #16
10009e7e:	432c      	orrs	r4, r5
10009e80:	46a0      	mov	r8, r4

    first_error = INV_SUCCESS;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
10009e82:	4d37      	ldr	r5, [pc, #220]	; (10009f60 <inv_execute_on_data+0x150>)
10009e84:	682c      	ldr	r4, [r5, #0]
10009e86:	2c00      	cmp	r4, #0
10009e88:	dd64      	ble.n	10009f54 <inv_execute_on_data+0x144>
10009e8a:	2300      	movs	r3, #0
10009e8c:	1d2c      	adds	r4, r5, #4
10009e8e:	2700      	movs	r7, #0
10009e90:	9300      	str	r3, [sp, #0]
10009e92:	e004      	b.n	10009e9e <inv_execute_on_data+0x8e>
10009e94:	682b      	ldr	r3, [r5, #0]
10009e96:	3701      	adds	r7, #1
10009e98:	340c      	adds	r4, #12
10009e9a:	42bb      	cmp	r3, r7
10009e9c:	dd11      	ble.n	10009ec2 <inv_execute_on_data+0xb2>
        if (mode & inv_data_builder.process[kk].data_required) {
10009e9e:	4642      	mov	r2, r8
10009ea0:	68a3      	ldr	r3, [r4, #8]
10009ea2:	4213      	tst	r3, r2
10009ea4:	d0f6      	beq.n	10009e94 <inv_execute_on_data+0x84>
            result = inv_data_builder.process[kk].func(&sensors);
10009ea6:	0030      	movs	r0, r6
10009ea8:	6823      	ldr	r3, [r4, #0]
10009eaa:	4798      	blx	r3
            if (result && !first_error) {
10009eac:	2800      	cmp	r0, #0
10009eae:	d0f1      	beq.n	10009e94 <inv_execute_on_data+0x84>
10009eb0:	9b00      	ldr	r3, [sp, #0]
10009eb2:	2b00      	cmp	r3, #0
10009eb4:	d1ee      	bne.n	10009e94 <inv_execute_on_data+0x84>
    if (sensors.quat.status & INV_NEW_DATA)
        mode |= INV_QUAT_NEW;

    first_error = INV_SUCCESS;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
10009eb6:	682b      	ldr	r3, [r5, #0]
10009eb8:	3701      	adds	r7, #1
10009eba:	9000      	str	r0, [sp, #0]
10009ebc:	340c      	adds	r4, #12
10009ebe:	42bb      	cmp	r3, r7
10009ec0:	dced      	bgt.n	10009e9e <inv_execute_on_data+0x8e>
10009ec2:	2440      	movs	r4, #64	; 0x40
10009ec4:	6b33      	ldr	r3, [r6, #48]	; 0x30
10009ec6:	0027      	movs	r7, r4
10009ec8:	469c      	mov	ip, r3
10009eca:	4023      	ands	r3, r4
10009ecc:	469b      	mov	fp, r3
10009ece:	23b8      	movs	r3, #184	; 0xb8
10009ed0:	58f1      	ldr	r1, [r6, r3]
10009ed2:	0023      	movs	r3, r4
10009ed4:	400b      	ands	r3, r1
10009ed6:	469a      	mov	sl, r3
10009ed8:	23fc      	movs	r3, #252	; 0xfc
10009eda:	58f2      	ldr	r2, [r6, r3]
10009edc:	0023      	movs	r3, r4
10009ede:	4013      	ands	r3, r2
10009ee0:	4699      	mov	r9, r3
10009ee2:	2390      	movs	r3, #144	; 0x90
10009ee4:	005b      	lsls	r3, r3, #1
10009ee6:	58f3      	ldr	r3, [r6, r3]
10009ee8:	6f70      	ldr	r0, [r6, #116]	; 0x74
10009eea:	401c      	ands	r4, r3
10009eec:	4007      	ands	r7, r0
10009eee:	9401      	str	r4, [sp, #4]
*
*/
static void inv_set_contiguous(void)
{
    inv_time_t current_time = 0;
    if (sensors.gyro.status & INV_NEW_DATA) {
10009ef0:	465c      	mov	r4, fp
10009ef2:	2c00      	cmp	r4, #0
10009ef4:	d003      	beq.n	10009efe <inv_execute_on_data+0xee>
        sensors.gyro.status |= INV_CONTIGUOUS;
10009ef6:	4665      	mov	r5, ip
10009ef8:	2410      	movs	r4, #16
10009efa:	4325      	orrs	r5, r4
10009efc:	46ac      	mov	ip, r5
        current_time = sensors.gyro.timestamp;
    }
    if (sensors.accel.status & INV_NEW_DATA) {
10009efe:	2f00      	cmp	r7, #0
10009f00:	d001      	beq.n	10009f06 <inv_execute_on_data+0xf6>
        sensors.accel.status |= INV_CONTIGUOUS;
10009f02:	2410      	movs	r4, #16
10009f04:	4320      	orrs	r0, r4
        current_time = MAX(current_time, sensors.accel.timestamp);
    }
    if (sensors.compass.status & INV_NEW_DATA) {
10009f06:	4654      	mov	r4, sl
10009f08:	2c00      	cmp	r4, #0
10009f0a:	d001      	beq.n	10009f10 <inv_execute_on_data+0x100>
        sensors.compass.status |= INV_CONTIGUOUS;
10009f0c:	2410      	movs	r4, #16
10009f0e:	4321      	orrs	r1, r4
        current_time = MAX(current_time, sensors.compass.timestamp);
    }
    if (sensors.temp.status & INV_NEW_DATA) {
10009f10:	464c      	mov	r4, r9
10009f12:	2c00      	cmp	r4, #0
10009f14:	d001      	beq.n	10009f1a <inv_execute_on_data+0x10a>
        sensors.temp.status |= INV_CONTIGUOUS;
10009f16:	2410      	movs	r4, #16
10009f18:	4322      	orrs	r2, r4
        current_time = MAX(current_time, sensors.temp.timestamp);
    }
    if (sensors.quat.status & INV_NEW_DATA) {
10009f1a:	9c01      	ldr	r4, [sp, #4]
10009f1c:	2c00      	cmp	r4, #0
10009f1e:	d001      	beq.n	10009f24 <inv_execute_on_data+0x114>
        sensors.quat.status |= INV_CONTIGUOUS;
10009f20:	2410      	movs	r4, #16
10009f22:	4323      	orrs	r3, r4
    if (inv_delta_time_ms(current_time, sensors.temp.timestamp) >= 2000)
        inv_temperature_was_turned_off();
#endif

    /* clear bits */
    sensors.gyro.status &= ~INV_NEW_DATA;
10009f24:	2540      	movs	r5, #64	; 0x40
    sensors.accel.status &= ~INV_NEW_DATA;
10009f26:	43a8      	bics	r0, r5
10009f28:	6770      	str	r0, [r6, #116]	; 0x74
    sensors.compass.status &= ~INV_NEW_DATA;
10009f2a:	20b8      	movs	r0, #184	; 0xb8
10009f2c:	43a9      	bics	r1, r5
10009f2e:	5031      	str	r1, [r6, r0]
    sensors.temp.status &= ~INV_NEW_DATA;
10009f30:	21fc      	movs	r1, #252	; 0xfc
10009f32:	43aa      	bics	r2, r5
    if (inv_delta_time_ms(current_time, sensors.temp.timestamp) >= 2000)
        inv_temperature_was_turned_off();
#endif

    /* clear bits */
    sensors.gyro.status &= ~INV_NEW_DATA;
10009f34:	4664      	mov	r4, ip
    sensors.accel.status &= ~INV_NEW_DATA;
    sensors.compass.status &= ~INV_NEW_DATA;
    sensors.temp.status &= ~INV_NEW_DATA;
10009f36:	5072      	str	r2, [r6, r1]
    sensors.quat.status &= ~INV_NEW_DATA;
10009f38:	2290      	movs	r2, #144	; 0x90
    }

    inv_set_contiguous();

    return first_error;
}
10009f3a:	9800      	ldr	r0, [sp, #0]
    if (inv_delta_time_ms(current_time, sensors.temp.timestamp) >= 2000)
        inv_temperature_was_turned_off();
#endif

    /* clear bits */
    sensors.gyro.status &= ~INV_NEW_DATA;
10009f3c:	43ac      	bics	r4, r5
    sensors.accel.status &= ~INV_NEW_DATA;
    sensors.compass.status &= ~INV_NEW_DATA;
    sensors.temp.status &= ~INV_NEW_DATA;
    sensors.quat.status &= ~INV_NEW_DATA;
10009f3e:	43ab      	bics	r3, r5
10009f40:	0052      	lsls	r2, r2, #1
    if (inv_delta_time_ms(current_time, sensors.temp.timestamp) >= 2000)
        inv_temperature_was_turned_off();
#endif

    /* clear bits */
    sensors.gyro.status &= ~INV_NEW_DATA;
10009f42:	6334      	str	r4, [r6, #48]	; 0x30
    sensors.accel.status &= ~INV_NEW_DATA;
    sensors.compass.status &= ~INV_NEW_DATA;
    sensors.temp.status &= ~INV_NEW_DATA;
    sensors.quat.status &= ~INV_NEW_DATA;
10009f44:	50b3      	str	r3, [r6, r2]
    }

    inv_set_contiguous();

    return first_error;
}
10009f46:	b003      	add	sp, #12
10009f48:	bc3c      	pop	{r2, r3, r4, r5}
10009f4a:	4690      	mov	r8, r2
10009f4c:	4699      	mov	r9, r3
10009f4e:	46a2      	mov	sl, r4
10009f50:	46ab      	mov	fp, r5
10009f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sensors.temp.status & INV_NEW_DATA)
        mode |= INV_TEMP_NEW;
    if (sensors.quat.status & INV_NEW_DATA)
        mode |= INV_QUAT_NEW;

    first_error = INV_SUCCESS;
10009f54:	2400      	movs	r4, #0
10009f56:	9400      	str	r4, [sp, #0]
10009f58:	e7ca      	b.n	10009ef0 <inv_execute_on_data+0xe0>
10009f5a:	46c0      	nop			; (mov r8, r8)
10009f5c:	1001b804 	.word	0x1001b804
10009f60:	1001b6c4 	.word	0x1001b6c4

10009f64 <inv_get_accel_set>:
 * @param[out] data Accel Data where 1g = 2^16
 * @param[out] accuracy Accuracy 0 being not accurate, and 3 being most accurate.
 * @param[out] timestamp The timestamp of the data sample.
*/
void inv_get_accel_set(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
10009f64:	b570      	push	{r4, r5, r6, lr}
10009f66:	000c      	movs	r4, r1
10009f68:	0015      	movs	r5, r2
    if (data != NULL) {
10009f6a:	2800      	cmp	r0, #0
10009f6c:	d004      	beq.n	10009f78 <inv_get_accel_set+0x14>
        memcpy(data, sensors.accel.calibrated, sizeof(sensors.accel.calibrated));
10009f6e:	4908      	ldr	r1, [pc, #32]	; (10009f90 <inv_get_accel_set+0x2c>)
10009f70:	220c      	movs	r2, #12
10009f72:	315c      	adds	r1, #92	; 0x5c
10009f74:	4b07      	ldr	r3, [pc, #28]	; (10009f94 <inv_get_accel_set+0x30>)
10009f76:	4798      	blx	r3
    }
    if (timestamp != NULL) {
10009f78:	2d00      	cmp	r5, #0
10009f7a:	d002      	beq.n	10009f82 <inv_get_accel_set+0x1e>
        *timestamp = sensors.accel.timestamp;
10009f7c:	4b04      	ldr	r3, [pc, #16]	; (10009f90 <inv_get_accel_set+0x2c>)
10009f7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
10009f80:	602b      	str	r3, [r5, #0]
    }
    if (accuracy != NULL) {
10009f82:	2c00      	cmp	r4, #0
10009f84:	d002      	beq.n	10009f8c <inv_get_accel_set+0x28>
        *accuracy = sensors.accel.accuracy;
10009f86:	4b02      	ldr	r3, [pc, #8]	; (10009f90 <inv_get_accel_set+0x2c>)
10009f88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
10009f8a:	7023      	strb	r3, [r4, #0]
    }
}
10009f8c:	bd70      	pop	{r4, r5, r6, pc}
10009f8e:	46c0      	nop			; (mov r8, r8)
10009f90:	1001b804 	.word	0x1001b804
10009f94:	100182cf 	.word	0x100182cf

10009f98 <inv_get_gyro>:

/** Get's latest gyro data.
* @param[out] gyro Gyro Data, Length 3. 1 dps = 2^16.
*/
void inv_get_gyro(long *gyro)
{
10009f98:	b510      	push	{r4, lr}
    memcpy(gyro, sensors.gyro.calibrated, sizeof(sensors.gyro.calibrated));
10009f9a:	4903      	ldr	r1, [pc, #12]	; (10009fa8 <inv_get_gyro+0x10>)
10009f9c:	220c      	movs	r2, #12
10009f9e:	3118      	adds	r1, #24
10009fa0:	4b02      	ldr	r3, [pc, #8]	; (10009fac <inv_get_gyro+0x14>)
10009fa2:	4798      	blx	r3
}
10009fa4:	bd10      	pop	{r4, pc}
10009fa6:	46c0      	nop			; (mov r8, r8)
10009fa8:	1001b804 	.word	0x1001b804
10009fac:	100182cf 	.word	0x100182cf

10009fb0 <inv_set_compass_soft_iron_input_data>:
 * @param[int] the pointer of the 3x1 vector compass raw data in MPL format
*/
void inv_set_compass_soft_iron_input_data(const long *data)  {
    int i;
    for (i=0; i<3; i++)  {
        sensors.soft_iron.raw[i] = data[i];
10009fb0:	2298      	movs	r2, #152	; 0x98
    }
}
/** This subroutine sets the compass raw data for the soft iron transformation.
 * @param[int] the pointer of the 3x1 vector compass raw data in MPL format
*/
void inv_set_compass_soft_iron_input_data(const long *data)  {
10009fb2:	b510      	push	{r4, lr}
    int i;
    for (i=0; i<3; i++)  {
        sensors.soft_iron.raw[i] = data[i];
10009fb4:	4b11      	ldr	r3, [pc, #68]	; (10009ffc <inv_set_compass_soft_iron_input_data+0x4c>)
10009fb6:	6801      	ldr	r1, [r0, #0]
10009fb8:	0052      	lsls	r2, r2, #1
10009fba:	5099      	str	r1, [r3, r2]
10009fbc:	6841      	ldr	r1, [r0, #4]
10009fbe:	3204      	adds	r2, #4
10009fc0:	5099      	str	r1, [r3, r2]
10009fc2:	6881      	ldr	r1, [r0, #8]
10009fc4:	3204      	adds	r2, #4
10009fc6:	5099      	str	r1, [r3, r2]
    }
    if (sensors.soft_iron.enable == 1)  {
10009fc8:	3258      	adds	r2, #88	; 0x58
10009fca:	589a      	ldr	r2, [r3, r2]
10009fcc:	2a01      	cmp	r2, #1
10009fce:	d00a      	beq.n	10009fe6 <inv_set_compass_soft_iron_input_data+0x36>
        mlMatrixVectorMult(sensors.soft_iron.matrix_d, data, sensors.soft_iron.trans);
    } else {
        for (i=0; i<3; i++)  {
            sensors.soft_iron.trans[i] = data[i];
10009fd0:	229e      	movs	r2, #158	; 0x9e
10009fd2:	6801      	ldr	r1, [r0, #0]
10009fd4:	0052      	lsls	r2, r2, #1
10009fd6:	5099      	str	r1, [r3, r2]
10009fd8:	6841      	ldr	r1, [r0, #4]
10009fda:	3204      	adds	r2, #4
10009fdc:	5099      	str	r1, [r3, r2]
10009fde:	6881      	ldr	r1, [r0, #8]
10009fe0:	3204      	adds	r2, #4
10009fe2:	5099      	str	r1, [r3, r2]
        }
    }
}
10009fe4:	bd10      	pop	{r4, pc}
    int i;
    for (i=0; i<3; i++)  {
        sensors.soft_iron.raw[i] = data[i];
    }
    if (sensors.soft_iron.enable == 1)  {
        mlMatrixVectorMult(sensors.soft_iron.matrix_d, data, sensors.soft_iron.trans);
10009fe6:	001a      	movs	r2, r3
10009fe8:	3349      	adds	r3, #73	; 0x49
10009fea:	33ff      	adds	r3, #255	; 0xff
10009fec:	323d      	adds	r2, #61	; 0x3d
10009fee:	0001      	movs	r1, r0
10009ff0:	32ff      	adds	r2, #255	; 0xff
10009ff2:	0018      	movs	r0, r3
10009ff4:	4b02      	ldr	r3, [pc, #8]	; (1000a000 <inv_set_compass_soft_iron_input_data+0x50>)
10009ff6:	4798      	blx	r3
    } else {
        for (i=0; i<3; i++)  {
            sensors.soft_iron.trans[i] = data[i];
        }
    }
}
10009ff8:	e7f4      	b.n	10009fe4 <inv_set_compass_soft_iron_input_data+0x34>
10009ffa:	46c0      	nop			; (mov r8, r8)
10009ffc:	1001b804 	.word	0x1001b804
1000a000:	1000aad9 	.word	0x1000aad9

1000a004 <inv_build_compass>:
* @param[out] executed Set to 1 if data processing was done.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_build_compass(const long *compass, int status,
                              inv_time_t timestamp)
{
1000a004:	b570      	push	{r4, r5, r6, lr}
1000a006:	0015      	movs	r5, r2
        fwrite(compass, sizeof(compass[0]), 3, inv_data_builder.file);
        fwrite(&timestamp, sizeof(timestamp), 1, inv_data_builder.file);
    }
#endif

    if ((status & INV_CALIBRATED) == 0) {
1000a008:	2220      	movs	r2, #32
1000a00a:	420a      	tst	r2, r1
1000a00c:	d01e      	beq.n	1000a04c <inv_build_compass+0x48>
        sensors.compass.raw[1] = (short)data[1];
        sensors.compass.raw[2] = (short)data[2];
        inv_apply_calibration(&sensors.compass, inv_data_builder.save.compass_bias);
        sensors.compass.status |= INV_RAW_DATA;
    } else {
        sensors.compass.calibrated[0] = compass[0];
1000a00e:	23a0      	movs	r3, #160	; 0xa0
1000a010:	6806      	ldr	r6, [r0, #0]
1000a012:	4c1c      	ldr	r4, [pc, #112]	; (1000a084 <inv_build_compass+0x80>)
1000a014:	50e6      	str	r6, [r4, r3]
        sensors.compass.calibrated[1] = compass[1];
1000a016:	6846      	ldr	r6, [r0, #4]
1000a018:	3304      	adds	r3, #4
1000a01a:	50e6      	str	r6, [r4, r3]
        sensors.compass.calibrated[2] = compass[2];
1000a01c:	6880      	ldr	r0, [r0, #8]
1000a01e:	3304      	adds	r3, #4
1000a020:	50e0      	str	r0, [r4, r3]
        sensors.compass.status |= INV_CALIBRATED;
1000a022:	3310      	adds	r3, #16
1000a024:	58e3      	ldr	r3, [r4, r3]
        sensors.compass.accuracy = status & 3;
        inv_data_builder.save.compass_accuracy = status & 3;
1000a026:	4818      	ldr	r0, [pc, #96]	; (1000a088 <inv_build_compass+0x84>)
        sensors.compass.status |= INV_RAW_DATA;
    } else {
        sensors.compass.calibrated[0] = compass[0];
        sensors.compass.calibrated[1] = compass[1];
        sensors.compass.calibrated[2] = compass[2];
        sensors.compass.status |= INV_CALIBRATED;
1000a028:	4313      	orrs	r3, r2
        sensors.compass.accuracy = status & 3;
1000a02a:	2203      	movs	r2, #3
1000a02c:	4011      	ands	r1, r2
1000a02e:	32b9      	adds	r2, #185	; 0xb9
1000a030:	50a1      	str	r1, [r4, r2]
        inv_data_builder.save.compass_accuracy = status & 3;
1000a032:	327c      	adds	r2, #124	; 0x7c
1000a034:	5081      	str	r1, [r0, r2]
    }
    sensors.compass.timestamp_prev = sensors.compass.timestamp;
1000a036:	22c0      	movs	r2, #192	; 0xc0
1000a038:	21c4      	movs	r1, #196	; 0xc4
1000a03a:	58a0      	ldr	r0, [r4, r2]
    sensors.compass.timestamp = timestamp;
1000a03c:	50a5      	str	r5, [r4, r2]
    sensors.compass.status |= INV_NEW_DATA | INV_SENSOR_ON;
1000a03e:	3280      	adds	r2, #128	; 0x80
1000a040:	4313      	orrs	r3, r2
1000a042:	3a88      	subs	r2, #136	; 0x88
        sensors.compass.calibrated[2] = compass[2];
        sensors.compass.status |= INV_CALIBRATED;
        sensors.compass.accuracy = status & 3;
        inv_data_builder.save.compass_accuracy = status & 3;
    }
    sensors.compass.timestamp_prev = sensors.compass.timestamp;
1000a044:	5060      	str	r0, [r4, r1]
    sensors.compass.timestamp = timestamp;
    sensors.compass.status |= INV_NEW_DATA | INV_SENSOR_ON;
1000a046:	50a3      	str	r3, [r4, r2]

    return INV_SUCCESS;
}
1000a048:	2000      	movs	r0, #0
1000a04a:	bd70      	pop	{r4, r5, r6, pc}
    }
#endif

    if ((status & INV_CALIBRATED) == 0) {
        long data[3];
        inv_set_compass_soft_iron_input_data(compass);
1000a04c:	4b0f      	ldr	r3, [pc, #60]	; (1000a08c <inv_build_compass+0x88>)
1000a04e:	4798      	blx	r3
 * @param[out] the pointer of the 3x1 vector compass data in MPL format
*/
void inv_get_compass_soft_iron_output_data(long *data) {
    int i;
    for (i=0; i<3; i++)  {
        data[i] = sensors.soft_iron.trans[i];
1000a050:	23a0      	movs	r3, #160	; 0xa0
1000a052:	4c0c      	ldr	r4, [pc, #48]	; (1000a084 <inv_build_compass+0x80>)
1000a054:	005b      	lsls	r3, r3, #1
1000a056:	58e1      	ldr	r1, [r4, r3]
1000a058:	3304      	adds	r3, #4
1000a05a:	58e2      	ldr	r2, [r4, r3]
1000a05c:	3b08      	subs	r3, #8

    if ((status & INV_CALIBRATED) == 0) {
        long data[3];
        inv_set_compass_soft_iron_input_data(compass);
        inv_get_compass_soft_iron_output_data(data);
        sensors.compass.raw[0] = (short)data[0];
1000a05e:	58e0      	ldr	r0, [r4, r3]
1000a060:	3bb0      	subs	r3, #176	; 0xb0
1000a062:	52e0      	strh	r0, [r4, r3]
        sensors.compass.raw[1] = (short)data[1];
        sensors.compass.raw[2] = (short)data[2];
        inv_apply_calibration(&sensors.compass, inv_data_builder.save.compass_bias);
1000a064:	0020      	movs	r0, r4
    if ((status & INV_CALIBRATED) == 0) {
        long data[3];
        inv_set_compass_soft_iron_input_data(compass);
        inv_get_compass_soft_iron_output_data(data);
        sensors.compass.raw[0] = (short)data[0];
        sensors.compass.raw[1] = (short)data[1];
1000a066:	3302      	adds	r3, #2
1000a068:	52e1      	strh	r1, [r4, r3]
        sensors.compass.raw[2] = (short)data[2];
        inv_apply_calibration(&sensors.compass, inv_data_builder.save.compass_bias);
1000a06a:	4907      	ldr	r1, [pc, #28]	; (1000a088 <inv_build_compass+0x84>)
        long data[3];
        inv_set_compass_soft_iron_input_data(compass);
        inv_get_compass_soft_iron_output_data(data);
        sensors.compass.raw[0] = (short)data[0];
        sensors.compass.raw[1] = (short)data[1];
        sensors.compass.raw[2] = (short)data[2];
1000a06c:	3302      	adds	r3, #2
1000a06e:	52e2      	strh	r2, [r4, r3]
        inv_apply_calibration(&sensors.compass, inv_data_builder.save.compass_bias);
1000a070:	3088      	adds	r0, #136	; 0x88
1000a072:	4b07      	ldr	r3, [pc, #28]	; (1000a090 <inv_build_compass+0x8c>)
1000a074:	31f4      	adds	r1, #244	; 0xf4
1000a076:	4798      	blx	r3
        sensors.compass.status |= INV_RAW_DATA;
1000a078:	23b8      	movs	r3, #184	; 0xb8
1000a07a:	2280      	movs	r2, #128	; 0x80
1000a07c:	58e3      	ldr	r3, [r4, r3]
1000a07e:	4313      	orrs	r3, r2
1000a080:	e7d9      	b.n	1000a036 <inv_build_compass+0x32>
1000a082:	46c0      	nop			; (mov r8, r8)
1000a084:	1001b804 	.word	0x1001b804
1000a088:	1001b6c4 	.word	0x1001b6c4
1000a08c:	10009fb1 	.word	0x10009fb1
1000a090:	10009b55 	.word	0x10009b55

1000a094 <inv_reset_compass_soft_iron_matrix>:
}

/** This subroutine resets the the soft iron transformation to unity matrix and
 * disable the soft iron transformation process by default.
*/
void inv_reset_compass_soft_iron_matrix(void)  {
1000a094:	b510      	push	{r4, lr}
1000a096:	4c15      	ldr	r4, [pc, #84]	; (1000a0ec <inv_reset_compass_soft_iron_matrix+0x58>)
    int i;
    for (i=0; i<9; i++) {
        sensors.soft_iron.matrix_f[i] = 0.0f;
1000a098:	2200      	movs	r2, #0
1000a09a:	0023      	movs	r3, r4
1000a09c:	0021      	movs	r1, r4
1000a09e:	336d      	adds	r3, #109	; 0x6d
1000a0a0:	3191      	adds	r1, #145	; 0x91
1000a0a2:	33ff      	adds	r3, #255	; 0xff
1000a0a4:	31ff      	adds	r1, #255	; 0xff
1000a0a6:	c304      	stmia	r3!, {r2}
/** This subroutine resets the the soft iron transformation to unity matrix and
 * disable the soft iron transformation process by default.
*/
void inv_reset_compass_soft_iron_matrix(void)  {
    int i;
    for (i=0; i<9; i++) {
1000a0a8:	428b      	cmp	r3, r1
1000a0aa:	d1fc      	bne.n	1000a0a6 <inv_reset_compass_soft_iron_matrix+0x12>
        sensors.soft_iron.matrix_f[i] = 0.0f;
    }

    memset(&sensors.soft_iron.matrix_d,0,sizeof(sensors.soft_iron.matrix_d));
1000a0ac:	0020      	movs	r0, r4
1000a0ae:	3049      	adds	r0, #73	; 0x49
1000a0b0:	2224      	movs	r2, #36	; 0x24
1000a0b2:	2100      	movs	r1, #0
1000a0b4:	4b0e      	ldr	r3, [pc, #56]	; (1000a0f0 <inv_reset_compass_soft_iron_matrix+0x5c>)
1000a0b6:	30ff      	adds	r0, #255	; 0xff
1000a0b8:	4798      	blx	r3

    for (i=0; i<3; i++)  {
        // set the floating point matrix
        sensors.soft_iron.matrix_f[i*4] = 1.0;
1000a0ba:	22fe      	movs	r2, #254	; 0xfe
1000a0bc:	23b6      	movs	r3, #182	; 0xb6
1000a0be:	0592      	lsls	r2, r2, #22
1000a0c0:	005b      	lsls	r3, r3, #1
1000a0c2:	50e2      	str	r2, [r4, r3]
        // set the fixed point matrix
        sensors.soft_iron.matrix_d[i*4] = ROT_MATRIX_SCALE_LONG;
1000a0c4:	21a4      	movs	r1, #164	; 0xa4
1000a0c6:	2380      	movs	r3, #128	; 0x80
1000a0c8:	0049      	lsls	r1, r1, #1
1000a0ca:	05db      	lsls	r3, r3, #23
1000a0cc:	5063      	str	r3, [r4, r1]

    memset(&sensors.soft_iron.matrix_d,0,sizeof(sensors.soft_iron.matrix_d));

    for (i=0; i<3; i++)  {
        // set the floating point matrix
        sensors.soft_iron.matrix_f[i*4] = 1.0;
1000a0ce:	3134      	adds	r1, #52	; 0x34
1000a0d0:	5062      	str	r2, [r4, r1]
        // set the fixed point matrix
        sensors.soft_iron.matrix_d[i*4] = ROT_MATRIX_SCALE_LONG;
1000a0d2:	3924      	subs	r1, #36	; 0x24
1000a0d4:	5063      	str	r3, [r4, r1]

    memset(&sensors.soft_iron.matrix_d,0,sizeof(sensors.soft_iron.matrix_d));

    for (i=0; i<3; i++)  {
        // set the floating point matrix
        sensors.soft_iron.matrix_f[i*4] = 1.0;
1000a0d6:	3134      	adds	r1, #52	; 0x34
1000a0d8:	5062      	str	r2, [r4, r1]
        // set the fixed point matrix
        sensors.soft_iron.matrix_d[i*4] = ROT_MATRIX_SCALE_LONG;
1000a0da:	22b4      	movs	r2, #180	; 0xb4
1000a0dc:	0052      	lsls	r2, r2, #1
1000a0de:	50a3      	str	r3, [r4, r2]
}

/** This subroutine disables the the soft iron transformation process.
*/
void inv_disable_compass_soft_iron_matrix(void)   {
    sensors.soft_iron.enable = 0;
1000a0e0:	23c8      	movs	r3, #200	; 0xc8
1000a0e2:	2200      	movs	r2, #0
1000a0e4:	005b      	lsls	r3, r3, #1
1000a0e6:	50e2      	str	r2, [r4, r3]
        // set the fixed point matrix
        sensors.soft_iron.matrix_d[i*4] = ROT_MATRIX_SCALE_LONG;
    }

    inv_disable_compass_soft_iron_matrix();
}
1000a0e8:	bd10      	pop	{r4, pc}
1000a0ea:	46c0      	nop			; (mov r8, r8)
1000a0ec:	1001b804 	.word	0x1001b804
1000a0f0:	1001830b 	.word	0x1001830b

1000a0f4 <inv_init_data_builder>:
/** Initialize the data builder
*/
inv_error_t inv_init_data_builder(void)
{
    /* TODO: Hardcode temperature scale/offset here. */
    memset(&inv_data_builder, 0, sizeof(inv_data_builder));
1000a0f4:	22a0      	movs	r2, #160	; 0xa0
}

/** Initialize the data builder
*/
inv_error_t inv_init_data_builder(void)
{
1000a0f6:	b510      	push	{r4, lr}
    /* TODO: Hardcode temperature scale/offset here. */
    memset(&inv_data_builder, 0, sizeof(inv_data_builder));
1000a0f8:	0052      	lsls	r2, r2, #1
1000a0fa:	4c09      	ldr	r4, [pc, #36]	; (1000a120 <inv_init_data_builder+0x2c>)
1000a0fc:	2100      	movs	r1, #0
1000a0fe:	4809      	ldr	r0, [pc, #36]	; (1000a124 <inv_init_data_builder+0x30>)
1000a100:	47a0      	blx	r4
    memset(&sensors, 0, sizeof(sensors));
1000a102:	22cc      	movs	r2, #204	; 0xcc
1000a104:	2100      	movs	r1, #0
1000a106:	0052      	lsls	r2, r2, #1
1000a108:	4807      	ldr	r0, [pc, #28]	; (1000a128 <inv_init_data_builder+0x34>)
1000a10a:	47a0      	blx	r4

    // disable the soft iron transform process
    inv_reset_compass_soft_iron_matrix();
1000a10c:	4b07      	ldr	r3, [pc, #28]	; (1000a12c <inv_init_data_builder+0x38>)
1000a10e:	4798      	blx	r3

    return inv_register_load_store(inv_db_load_func, inv_db_save_func,
1000a110:	4b07      	ldr	r3, [pc, #28]	; (1000a130 <inv_init_data_builder+0x3c>)
1000a112:	2248      	movs	r2, #72	; 0x48
1000a114:	4907      	ldr	r1, [pc, #28]	; (1000a134 <inv_init_data_builder+0x40>)
1000a116:	4c08      	ldr	r4, [pc, #32]	; (1000a138 <inv_init_data_builder+0x44>)
1000a118:	4808      	ldr	r0, [pc, #32]	; (1000a13c <inv_init_data_builder+0x48>)
1000a11a:	47a0      	blx	r4
                                   sizeof(inv_data_builder.save),
                                   INV_DB_SAVE_KEY);
}
1000a11c:	bd10      	pop	{r4, pc}
1000a11e:	46c0      	nop			; (mov r8, r8)
1000a120:	1001830b 	.word	0x1001830b
1000a124:	1001b6c4 	.word	0x1001b6c4
1000a128:	1001b804 	.word	0x1001b804
1000a12c:	1000a095 	.word	0x1000a095
1000a130:	0000d093 	.word	0x0000d093
1000a134:	10009a01 	.word	0x10009a01
1000a138:	1000aeb1 	.word	0x1000aeb1
1000a13c:	10009a19 	.word	0x10009a19

1000a140 <inv_set_message>:
* @param[in] level Level of the messages. It starts at 0, and may increase
*            in the future to allow more messages if the bit storage runs out.
*/
void inv_set_message(long set, long clear, int level)
{
    if (level == 0) {
1000a140:	2a00      	cmp	r2, #0
1000a142:	d104      	bne.n	1000a14e <inv_set_message+0xe>
        mh.message &= ~clear;
        mh.message |= set;
1000a144:	4a02      	ldr	r2, [pc, #8]	; (1000a150 <inv_set_message+0x10>)
1000a146:	6813      	ldr	r3, [r2, #0]
1000a148:	438b      	bics	r3, r1
1000a14a:	4318      	orrs	r0, r3
1000a14c:	6010      	str	r0, [r2, #0]
    }
}
1000a14e:	4770      	bx	lr
1000a150:	1001b99c 	.word	0x1001b99c

1000a154 <inv_row_2_scale>:

static unsigned short inv_row_2_scale(const signed char *row)
{
    unsigned short b;

    if (row[0] > 0)
1000a154:	2200      	movs	r2, #0
1000a156:	5682      	ldrsb	r2, [r0, r2]
        b = 0;
1000a158:	2300      	movs	r3, #0

static unsigned short inv_row_2_scale(const signed char *row)
{
    unsigned short b;

    if (row[0] > 0)
1000a15a:	2a00      	cmp	r2, #0
1000a15c:	dd01      	ble.n	1000a162 <inv_row_2_scale+0xe>
    else if (row[2] < 0)
        b = 6;
    else
        b = 7;		// error
    return b;
}
1000a15e:	0018      	movs	r0, r3
1000a160:	4770      	bx	lr
    unsigned short b;

    if (row[0] > 0)
        b = 0;
    else if (row[0] < 0)
        b = 4;
1000a162:	3304      	adds	r3, #4
{
    unsigned short b;

    if (row[0] > 0)
        b = 0;
    else if (row[0] < 0)
1000a164:	2a00      	cmp	r2, #0
1000a166:	d1fa      	bne.n	1000a15e <inv_row_2_scale+0xa>
        b = 4;
    else if (row[1] > 0)
1000a168:	2201      	movs	r2, #1
1000a16a:	5682      	ldrsb	r2, [r0, r2]
        b = 1;
1000a16c:	3b03      	subs	r3, #3

    if (row[0] > 0)
        b = 0;
    else if (row[0] < 0)
        b = 4;
    else if (row[1] > 0)
1000a16e:	2a00      	cmp	r2, #0
1000a170:	dcf5      	bgt.n	1000a15e <inv_row_2_scale+0xa>
        b = 1;
    else if (row[1] < 0)
        b = 5;
1000a172:	3304      	adds	r3, #4
        b = 0;
    else if (row[0] < 0)
        b = 4;
    else if (row[1] > 0)
        b = 1;
    else if (row[1] < 0)
1000a174:	2a00      	cmp	r2, #0
1000a176:	d1f2      	bne.n	1000a15e <inv_row_2_scale+0xa>
        b = 5;
    else if (row[2] > 0)
1000a178:	7880      	ldrb	r0, [r0, #2]
        b = 2;
1000a17a:	3b03      	subs	r3, #3
        b = 4;
    else if (row[1] > 0)
        b = 1;
    else if (row[1] < 0)
        b = 5;
    else if (row[2] > 0)
1000a17c:	b240      	sxtb	r0, r0
1000a17e:	2800      	cmp	r0, #0
1000a180:	dced      	bgt.n	1000a15e <inv_row_2_scale+0xa>
        b = 2;
    else if (row[2] < 0)
        b = 6;
    else
        b = 7;		// error
1000a182:	1e43      	subs	r3, r0, #1
1000a184:	4198      	sbcs	r0, r3
1000a186:	2307      	movs	r3, #7
1000a188:	1a1b      	subs	r3, r3, r0
1000a18a:	e7e8      	b.n	1000a15e <inv_row_2_scale+0xa>

1000a18c <inv_get_gyro_sum_of_sqr>:
 *          (1 degree per second)^2 = 2^6 = 2^GYRO_MAG_SQR_SHIFT.
 * @param[in] gyro Gyro data scaled with 1 dps = 2^16
 *  @return the computed magnitude squared output of the gyroscope.
 */
unsigned long inv_get_gyro_sum_of_sqr(const long *gyro)
{
1000a18c:	0001      	movs	r1, r0
1000a18e:	0002      	movs	r2, r0
    unsigned long gmag = 0;
1000a190:	2000      	movs	r0, #0
1000a192:	310c      	adds	r1, #12
    long temp;
    int kk;

    for (kk = 0; kk < 3; ++kk) {
        temp = gyro[kk] >> (16 - (GYRO_MAG_SQR_SHIFT / 2));
1000a194:	ca08      	ldmia	r2!, {r3}
1000a196:	135b      	asrs	r3, r3, #13
        gmag += temp * temp;
1000a198:	435b      	muls	r3, r3
1000a19a:	18c0      	adds	r0, r0, r3
{
    unsigned long gmag = 0;
    long temp;
    int kk;

    for (kk = 0; kk < 3; ++kk) {
1000a19c:	4291      	cmp	r1, r2
1000a19e:	d1f9      	bne.n	1000a194 <inv_get_gyro_sum_of_sqr+0x8>
        temp = gyro[kk] >> (16 - (GYRO_MAG_SQR_SHIFT / 2));
        gmag += temp * temp;
    }

    return gmag;
}
1000a1a0:	4770      	bx	lr
1000a1a2:	46c0      	nop			; (mov r8, r8)

1000a1a4 <inv_q29_mult>:
 * @param[in] a
 * @param[in] b
 * @return ((long long)a*b)>>29
*/
long inv_q29_mult(long a, long b)
{
1000a1a4:	000a      	movs	r2, r1
1000a1a6:	b510      	push	{r4, lr}
#else
    long long temp;
    long result;
    temp = (long long)a * b;
    result = (long)(temp >> 29);
    return result;
1000a1a8:	17d3      	asrs	r3, r2, #31
1000a1aa:	4c03      	ldr	r4, [pc, #12]	; (1000a1b8 <inv_q29_mult+0x14>)
1000a1ac:	17c1      	asrs	r1, r0, #31
1000a1ae:	47a0      	blx	r4
1000a1b0:	00c9      	lsls	r1, r1, #3
1000a1b2:	0f40      	lsrs	r0, r0, #29
1000a1b4:	4308      	orrs	r0, r1
#endif
}
1000a1b6:	bd10      	pop	{r4, pc}
1000a1b8:	100153d9 	.word	0x100153d9

1000a1bc <inv_q30_mult>:
 * @param[in] a
 * @param[in] b
 * @return ((long long)a*b)>>30
*/
long inv_q30_mult(long a, long b)
{
1000a1bc:	000a      	movs	r2, r1
1000a1be:	b510      	push	{r4, lr}
#else
    long long temp;
    long result;
    temp = (long long)a * b;
    result = (long)(temp >> 30);
    return result;
1000a1c0:	17d3      	asrs	r3, r2, #31
1000a1c2:	4c03      	ldr	r4, [pc, #12]	; (1000a1d0 <inv_q30_mult+0x14>)
1000a1c4:	17c1      	asrs	r1, r0, #31
1000a1c6:	47a0      	blx	r4
1000a1c8:	0089      	lsls	r1, r1, #2
1000a1ca:	0f80      	lsrs	r0, r0, #30
1000a1cc:	4308      	orrs	r0, r1
#endif
}
1000a1ce:	bd10      	pop	{r4, pc}
1000a1d0:	100153d9 	.word	0x100153d9

1000a1d4 <inv_q_mult>:
*            to 2^30
* @param[out] qProd Product after quaternion multiply. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_mult(const long *q1, const long *q2, long *qProd)
{
1000a1d4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a1d6:	4647      	mov	r7, r8
1000a1d8:	000e      	movs	r6, r1
1000a1da:	b480      	push	{r7}
    INVENSENSE_FUNC_START;
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
1000a1dc:	6803      	ldr	r3, [r0, #0]
*            to 2^30
* @param[out] qProd Product after quaternion multiply. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_mult(const long *q1, const long *q2, long *qProd)
{
1000a1de:	0005      	movs	r5, r0
    INVENSENSE_FUNC_START;
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
1000a1e0:	17d9      	asrs	r1, r3, #31
1000a1e2:	6833      	ldr	r3, [r6, #0]
1000a1e4:	4c5e      	ldr	r4, [pc, #376]	; (1000a360 <inv_q_mult+0x18c>)
*            to 2^30
* @param[out] qProd Product after quaternion multiply. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_mult(const long *q1, const long *q2, long *qProd)
{
1000a1e6:	0017      	movs	r7, r2
    INVENSENSE_FUNC_START;
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
1000a1e8:	6800      	ldr	r0, [r0, #0]
1000a1ea:	6832      	ldr	r2, [r6, #0]
1000a1ec:	17db      	asrs	r3, r3, #31
1000a1ee:	47a0      	blx	r4
1000a1f0:	0089      	lsls	r1, r1, #2
1000a1f2:	0f83      	lsrs	r3, r0, #30
1000a1f4:	430b      	orrs	r3, r1
1000a1f6:	4698      	mov	r8, r3
1000a1f8:	686b      	ldr	r3, [r5, #4]
1000a1fa:	6872      	ldr	r2, [r6, #4]
1000a1fc:	17d9      	asrs	r1, r3, #31
1000a1fe:	6873      	ldr	r3, [r6, #4]
1000a200:	6868      	ldr	r0, [r5, #4]
1000a202:	17db      	asrs	r3, r3, #31
1000a204:	47a0      	blx	r4
1000a206:	4643      	mov	r3, r8
1000a208:	0089      	lsls	r1, r1, #2
1000a20a:	0f80      	lsrs	r0, r0, #30
1000a20c:	4308      	orrs	r0, r1
1000a20e:	1a1b      	subs	r3, r3, r0
1000a210:	4698      	mov	r8, r3
1000a212:	68ab      	ldr	r3, [r5, #8]
1000a214:	68b2      	ldr	r2, [r6, #8]
1000a216:	17d9      	asrs	r1, r3, #31
1000a218:	68b3      	ldr	r3, [r6, #8]
1000a21a:	68a8      	ldr	r0, [r5, #8]
1000a21c:	17db      	asrs	r3, r3, #31
1000a21e:	47a0      	blx	r4
1000a220:	4643      	mov	r3, r8
1000a222:	0089      	lsls	r1, r1, #2
1000a224:	0f80      	lsrs	r0, r0, #30
1000a226:	4308      	orrs	r0, r1
1000a228:	1a1b      	subs	r3, r3, r0
1000a22a:	4698      	mov	r8, r3
1000a22c:	68eb      	ldr	r3, [r5, #12]
1000a22e:	68f2      	ldr	r2, [r6, #12]
1000a230:	17d9      	asrs	r1, r3, #31
1000a232:	68f3      	ldr	r3, [r6, #12]
1000a234:	68e8      	ldr	r0, [r5, #12]
1000a236:	17db      	asrs	r3, r3, #31
1000a238:	47a0      	blx	r4
1000a23a:	4643      	mov	r3, r8
1000a23c:	0089      	lsls	r1, r1, #2
1000a23e:	0f80      	lsrs	r0, r0, #30
1000a240:	4308      	orrs	r0, r1
1000a242:	1a18      	subs	r0, r3, r0
1000a244:	6038      	str	r0, [r7, #0]
               inv_q30_mult(q1[2], q2[2]) - inv_q30_mult(q1[3], q2[3]);

    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
1000a246:	686b      	ldr	r3, [r5, #4]
1000a248:	6832      	ldr	r2, [r6, #0]
1000a24a:	17d9      	asrs	r1, r3, #31
1000a24c:	6833      	ldr	r3, [r6, #0]
1000a24e:	6868      	ldr	r0, [r5, #4]
1000a250:	17db      	asrs	r3, r3, #31
1000a252:	47a0      	blx	r4
1000a254:	0089      	lsls	r1, r1, #2
1000a256:	0f83      	lsrs	r3, r0, #30
1000a258:	430b      	orrs	r3, r1
1000a25a:	4698      	mov	r8, r3
1000a25c:	682b      	ldr	r3, [r5, #0]
1000a25e:	6872      	ldr	r2, [r6, #4]
1000a260:	17d9      	asrs	r1, r3, #31
1000a262:	6873      	ldr	r3, [r6, #4]
1000a264:	6828      	ldr	r0, [r5, #0]
1000a266:	17db      	asrs	r3, r3, #31
1000a268:	47a0      	blx	r4
1000a26a:	68ab      	ldr	r3, [r5, #8]
1000a26c:	0089      	lsls	r1, r1, #2
1000a26e:	0f80      	lsrs	r0, r0, #30
1000a270:	4308      	orrs	r0, r1
1000a272:	17d9      	asrs	r1, r3, #31
1000a274:	68f3      	ldr	r3, [r6, #12]
1000a276:	4480      	add	r8, r0
1000a278:	68f2      	ldr	r2, [r6, #12]
1000a27a:	68a8      	ldr	r0, [r5, #8]
1000a27c:	17db      	asrs	r3, r3, #31
1000a27e:	47a0      	blx	r4
1000a280:	68eb      	ldr	r3, [r5, #12]
1000a282:	0089      	lsls	r1, r1, #2
1000a284:	0f80      	lsrs	r0, r0, #30
1000a286:	4308      	orrs	r0, r1
1000a288:	17d9      	asrs	r1, r3, #31
1000a28a:	68b3      	ldr	r3, [r6, #8]
1000a28c:	68b2      	ldr	r2, [r6, #8]
1000a28e:	4480      	add	r8, r0
1000a290:	17db      	asrs	r3, r3, #31
1000a292:	68e8      	ldr	r0, [r5, #12]
1000a294:	47a0      	blx	r4
1000a296:	4643      	mov	r3, r8
1000a298:	0089      	lsls	r1, r1, #2
1000a29a:	0f80      	lsrs	r0, r0, #30
1000a29c:	4308      	orrs	r0, r1
1000a29e:	1a18      	subs	r0, r3, r0
1000a2a0:	6078      	str	r0, [r7, #4]
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);

    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
1000a2a2:	682b      	ldr	r3, [r5, #0]
1000a2a4:	68b2      	ldr	r2, [r6, #8]
1000a2a6:	17d9      	asrs	r1, r3, #31
1000a2a8:	68b3      	ldr	r3, [r6, #8]
1000a2aa:	6828      	ldr	r0, [r5, #0]
1000a2ac:	17db      	asrs	r3, r3, #31
1000a2ae:	47a0      	blx	r4
1000a2b0:	0089      	lsls	r1, r1, #2
1000a2b2:	0f83      	lsrs	r3, r0, #30
1000a2b4:	430b      	orrs	r3, r1
1000a2b6:	4698      	mov	r8, r3
1000a2b8:	686b      	ldr	r3, [r5, #4]
1000a2ba:	68f2      	ldr	r2, [r6, #12]
1000a2bc:	17d9      	asrs	r1, r3, #31
1000a2be:	68f3      	ldr	r3, [r6, #12]
1000a2c0:	6868      	ldr	r0, [r5, #4]
1000a2c2:	17db      	asrs	r3, r3, #31
1000a2c4:	47a0      	blx	r4
1000a2c6:	4643      	mov	r3, r8
1000a2c8:	0089      	lsls	r1, r1, #2
1000a2ca:	0f80      	lsrs	r0, r0, #30
1000a2cc:	4308      	orrs	r0, r1
1000a2ce:	1a1b      	subs	r3, r3, r0
1000a2d0:	4698      	mov	r8, r3
1000a2d2:	68ab      	ldr	r3, [r5, #8]
1000a2d4:	6832      	ldr	r2, [r6, #0]
1000a2d6:	17d9      	asrs	r1, r3, #31
1000a2d8:	6833      	ldr	r3, [r6, #0]
1000a2da:	68a8      	ldr	r0, [r5, #8]
1000a2dc:	17db      	asrs	r3, r3, #31
1000a2de:	47a0      	blx	r4
1000a2e0:	68eb      	ldr	r3, [r5, #12]
1000a2e2:	0089      	lsls	r1, r1, #2
1000a2e4:	0f80      	lsrs	r0, r0, #30
1000a2e6:	4308      	orrs	r0, r1
1000a2e8:	17d9      	asrs	r1, r3, #31
1000a2ea:	6873      	ldr	r3, [r6, #4]
1000a2ec:	6872      	ldr	r2, [r6, #4]
1000a2ee:	4480      	add	r8, r0
1000a2f0:	17db      	asrs	r3, r3, #31
1000a2f2:	68e8      	ldr	r0, [r5, #12]
1000a2f4:	47a0      	blx	r4
1000a2f6:	0089      	lsls	r1, r1, #2
1000a2f8:	0f80      	lsrs	r0, r0, #30
1000a2fa:	4308      	orrs	r0, r1
1000a2fc:	4440      	add	r0, r8
1000a2fe:	60b8      	str	r0, [r7, #8]
               inv_q30_mult(q1[2], q2[0]) + inv_q30_mult(q1[3], q2[1]);

    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
1000a300:	68b3      	ldr	r3, [r6, #8]
1000a302:	17d9      	asrs	r1, r3, #31
1000a304:	686b      	ldr	r3, [r5, #4]
1000a306:	686a      	ldr	r2, [r5, #4]
1000a308:	17db      	asrs	r3, r3, #31
1000a30a:	68b0      	ldr	r0, [r6, #8]
1000a30c:	47a0      	blx	r4
1000a30e:	0089      	lsls	r1, r1, #2
1000a310:	0f83      	lsrs	r3, r0, #30
1000a312:	430b      	orrs	r3, r1
1000a314:	4698      	mov	r8, r3
1000a316:	682b      	ldr	r3, [r5, #0]
1000a318:	68f2      	ldr	r2, [r6, #12]
1000a31a:	17d9      	asrs	r1, r3, #31
1000a31c:	68f3      	ldr	r3, [r6, #12]
1000a31e:	6828      	ldr	r0, [r5, #0]
1000a320:	17db      	asrs	r3, r3, #31
1000a322:	47a0      	blx	r4
1000a324:	6873      	ldr	r3, [r6, #4]
1000a326:	0089      	lsls	r1, r1, #2
1000a328:	0f80      	lsrs	r0, r0, #30
1000a32a:	4308      	orrs	r0, r1
1000a32c:	17d9      	asrs	r1, r3, #31
1000a32e:	68ab      	ldr	r3, [r5, #8]
1000a330:	68aa      	ldr	r2, [r5, #8]
1000a332:	4480      	add	r8, r0
1000a334:	17db      	asrs	r3, r3, #31
1000a336:	6870      	ldr	r0, [r6, #4]
1000a338:	47a0      	blx	r4
1000a33a:	4643      	mov	r3, r8
1000a33c:	0089      	lsls	r1, r1, #2
1000a33e:	0f80      	lsrs	r0, r0, #30
1000a340:	4308      	orrs	r0, r1
1000a342:	68ea      	ldr	r2, [r5, #12]
1000a344:	1a1b      	subs	r3, r3, r0
1000a346:	6830      	ldr	r0, [r6, #0]
1000a348:	4698      	mov	r8, r3
1000a34a:	17c1      	asrs	r1, r0, #31
1000a34c:	17d3      	asrs	r3, r2, #31
1000a34e:	47a0      	blx	r4
1000a350:	0089      	lsls	r1, r1, #2
1000a352:	0f80      	lsrs	r0, r0, #30
1000a354:	4308      	orrs	r0, r1
1000a356:	4440      	add	r0, r8
1000a358:	60f8      	str	r0, [r7, #12]
               inv_q30_mult(q1[2], q2[1]) + inv_q30_mult(q1[3], q2[0]);
}
1000a35a:	bc04      	pop	{r2}
1000a35c:	4690      	mov	r8, r2
1000a35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a360:	100153d9 	.word	0x100153d9

1000a364 <inv_compass_angle>:
 * @param[in] grav Gravity Vector (Body Frame), length 3
 * @param[in] quat Quaternion, Length 4
 * @return Angle Cross Product makes after quaternion rotation.
 */
float inv_compass_angle(const long *compass, const long *grav, const long *quat)
{
1000a364:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a366:	465f      	mov	r7, fp
1000a368:	4656      	mov	r6, sl
1000a36a:	464d      	mov	r5, r9
1000a36c:	4644      	mov	r4, r8
    long cgcross[4], q1[4], q2[4], qi[4];
    float angW;

    // Compass cross Gravity
    cgcross[0] = 0L;
1000a36e:	2300      	movs	r3, #0
 * @param[in] grav Gravity Vector (Body Frame), length 3
 * @param[in] quat Quaternion, Length 4
 * @return Angle Cross Product makes after quaternion rotation.
 */
float inv_compass_angle(const long *compass, const long *grav, const long *quat)
{
1000a370:	4689      	mov	r9, r1
1000a372:	b4f0      	push	{r4, r5, r6, r7}
1000a374:	b097      	sub	sp, #92	; 0x5c
    long cgcross[4], q1[4], q2[4], qi[4];
    float angW;

    // Compass cross Gravity
    cgcross[0] = 0L;
1000a376:	9306      	str	r3, [sp, #24]
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a378:	6843      	ldr	r3, [r0, #4]
 * @param[in] grav Gravity Vector (Body Frame), length 3
 * @param[in] quat Quaternion, Length 4
 * @return Angle Cross Product makes after quaternion rotation.
 */
float inv_compass_angle(const long *compass, const long *grav, const long *quat)
{
1000a37a:	0007      	movs	r7, r0
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a37c:	469a      	mov	sl, r3
1000a37e:	17db      	asrs	r3, r3, #31
1000a380:	0019      	movs	r1, r3
1000a382:	464b      	mov	r3, r9
1000a384:	464c      	mov	r4, r9
1000a386:	689b      	ldr	r3, [r3, #8]
 * @param[in] grav Gravity Vector (Body Frame), length 3
 * @param[in] quat Quaternion, Length 4
 * @return Angle Cross Product makes after quaternion rotation.
 */
float inv_compass_angle(const long *compass, const long *grav, const long *quat)
{
1000a388:	0015      	movs	r5, r2
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a38a:	17da      	asrs	r2, r3, #31
1000a38c:	0010      	movs	r0, r2
1000a38e:	6864      	ldr	r4, [r4, #4]
1000a390:	68ba      	ldr	r2, [r7, #8]
1000a392:	46a3      	mov	fp, r4
1000a394:	4690      	mov	r8, r2
1000a396:	17e4      	asrs	r4, r4, #31
1000a398:	17d2      	asrs	r2, r2, #31
1000a39a:	9200      	str	r2, [sp, #0]
1000a39c:	9401      	str	r4, [sp, #4]
    long cgcross[4], q1[4], q2[4], qi[4];
    float angW;

    // Compass cross Gravity
    cgcross[0] = 0L;
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
1000a39e:	001a      	movs	r2, r3
1000a3a0:	4c3b      	ldr	r4, [pc, #236]	; (1000a490 <inv_compass_angle+0x12c>)
1000a3a2:	9303      	str	r3, [sp, #12]
1000a3a4:	9004      	str	r0, [sp, #16]
1000a3a6:	0003      	movs	r3, r0
1000a3a8:	9102      	str	r1, [sp, #8]
1000a3aa:	4650      	mov	r0, sl
1000a3ac:	47a0      	blx	r4
1000a3ae:	0089      	lsls	r1, r1, #2
1000a3b0:	0f86      	lsrs	r6, r0, #30
1000a3b2:	9b01      	ldr	r3, [sp, #4]
1000a3b4:	430e      	orrs	r6, r1
1000a3b6:	465a      	mov	r2, fp
1000a3b8:	4640      	mov	r0, r8
1000a3ba:	9900      	ldr	r1, [sp, #0]
1000a3bc:	47a0      	blx	r4
1000a3be:	0089      	lsls	r1, r1, #2
1000a3c0:	0f80      	lsrs	r0, r0, #30
1000a3c2:	4308      	orrs	r0, r1
1000a3c4:	1a36      	subs	r6, r6, r0
1000a3c6:	9607      	str	r6, [sp, #28]
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a3c8:	464e      	mov	r6, r9
1000a3ca:	6836      	ldr	r6, [r6, #0]
1000a3cc:	683f      	ldr	r7, [r7, #0]
1000a3ce:	17f1      	asrs	r1, r6, #31
1000a3d0:	4689      	mov	r9, r1
1000a3d2:	17f9      	asrs	r1, r7, #31
    float angW;

    // Compass cross Gravity
    cgcross[0] = 0L;
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
    cgcross[2] = inv_q30_mult(compass[2], grav[0]) - inv_q30_mult(compass[0], grav[2]);
1000a3d4:	4642      	mov	r2, r8
1000a3d6:	9b00      	ldr	r3, [sp, #0]
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a3d8:	9105      	str	r1, [sp, #20]
    float angW;

    // Compass cross Gravity
    cgcross[0] = 0L;
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
    cgcross[2] = inv_q30_mult(compass[2], grav[0]) - inv_q30_mult(compass[0], grav[2]);
1000a3da:	0030      	movs	r0, r6
1000a3dc:	4649      	mov	r1, r9
1000a3de:	47a0      	blx	r4
1000a3e0:	0f82      	lsrs	r2, r0, #30
1000a3e2:	0010      	movs	r0, r2
1000a3e4:	0089      	lsls	r1, r1, #2
1000a3e6:	4308      	orrs	r0, r1
1000a3e8:	4680      	mov	r8, r0
1000a3ea:	9a03      	ldr	r2, [sp, #12]
1000a3ec:	9b04      	ldr	r3, [sp, #16]
1000a3ee:	0038      	movs	r0, r7
1000a3f0:	17f9      	asrs	r1, r7, #31
1000a3f2:	47a0      	blx	r4
1000a3f4:	4642      	mov	r2, r8
1000a3f6:	0089      	lsls	r1, r1, #2
1000a3f8:	0f80      	lsrs	r0, r0, #30
1000a3fa:	4308      	orrs	r0, r1
1000a3fc:	1a10      	subs	r0, r2, r0
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);
1000a3fe:	9b01      	ldr	r3, [sp, #4]
    float angW;

    // Compass cross Gravity
    cgcross[0] = 0L;
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
    cgcross[2] = inv_q30_mult(compass[2], grav[0]) - inv_q30_mult(compass[0], grav[2]);
1000a400:	9008      	str	r0, [sp, #32]
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);
1000a402:	465a      	mov	r2, fp
1000a404:	0038      	movs	r0, r7
1000a406:	9905      	ldr	r1, [sp, #20]
1000a408:	47a0      	blx	r4
1000a40a:	0089      	lsls	r1, r1, #2
1000a40c:	0f87      	lsrs	r7, r0, #30
1000a40e:	9b02      	ldr	r3, [sp, #8]
1000a410:	430f      	orrs	r7, r1
1000a412:	4652      	mov	r2, sl
1000a414:	0030      	movs	r0, r6
1000a416:	4649      	mov	r1, r9
1000a418:	47a0      	blx	r4
1000a41a:	0089      	lsls	r1, r1, #2
1000a41c:	0f80      	lsrs	r0, r0, #30
1000a41e:	4308      	orrs	r0, r1

    // Now convert cross product into world frame
    inv_q_mult(quat, cgcross, q1);
1000a420:	4c1c      	ldr	r4, [pc, #112]	; (1000a494 <inv_compass_angle+0x130>)

    // Compass cross Gravity
    cgcross[0] = 0L;
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
    cgcross[2] = inv_q30_mult(compass[2], grav[0]) - inv_q30_mult(compass[0], grav[2]);
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);
1000a422:	1a3f      	subs	r7, r7, r0

    // Now convert cross product into world frame
    inv_q_mult(quat, cgcross, q1);
1000a424:	aa0a      	add	r2, sp, #40	; 0x28
1000a426:	a906      	add	r1, sp, #24
1000a428:	0028      	movs	r0, r5

    // Compass cross Gravity
    cgcross[0] = 0L;
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
    cgcross[2] = inv_q30_mult(compass[2], grav[0]) - inv_q30_mult(compass[0], grav[2]);
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);
1000a42a:	9709      	str	r7, [sp, #36]	; 0x24

    // Now convert cross product into world frame
    inv_q_mult(quat, cgcross, q1);
1000a42c:	47a0      	blx	r4
}

void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
1000a42e:	682b      	ldr	r3, [r5, #0]
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);

    // Now convert cross product into world frame
    inv_q_mult(quat, cgcross, q1);
    inv_q_invert(quat, qi);
    inv_q_mult(q1, qi, q2);
1000a430:	a80a      	add	r0, sp, #40	; 0x28
}

void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
1000a432:	9312      	str	r3, [sp, #72]	; 0x48
    qInverted[1] = -q[1];
1000a434:	686b      	ldr	r3, [r5, #4]
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);

    // Now convert cross product into world frame
    inv_q_mult(quat, cgcross, q1);
    inv_q_invert(quat, qi);
    inv_q_mult(q1, qi, q2);
1000a436:	aa0e      	add	r2, sp, #56	; 0x38

void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
    qInverted[1] = -q[1];
1000a438:	425b      	negs	r3, r3
1000a43a:	9313      	str	r3, [sp, #76]	; 0x4c
    qInverted[2] = -q[2];
1000a43c:	68ab      	ldr	r3, [r5, #8]
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);

    // Now convert cross product into world frame
    inv_q_mult(quat, cgcross, q1);
    inv_q_invert(quat, qi);
    inv_q_mult(q1, qi, q2);
1000a43e:	a912      	add	r1, sp, #72	; 0x48
void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
    qInverted[1] = -q[1];
    qInverted[2] = -q[2];
1000a440:	425b      	negs	r3, r3
1000a442:	9314      	str	r3, [sp, #80]	; 0x50
    qInverted[3] = -q[3];
1000a444:	68eb      	ldr	r3, [r5, #12]
1000a446:	425b      	negs	r3, r3
1000a448:	9315      	str	r3, [sp, #84]	; 0x54
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);

    // Now convert cross product into world frame
    inv_q_mult(quat, cgcross, q1);
    inv_q_invert(quat, qi);
    inv_q_mult(q1, qi, q2);
1000a44a:	47a0      	blx	r4

    // Protect against atan2 of 0,0
    if ((q2[2] == 0L) && (q2[1] == 0L))
1000a44c:	9c10      	ldr	r4, [sp, #64]	; 0x40
1000a44e:	980f      	ldr	r0, [sp, #60]	; 0x3c
1000a450:	2c00      	cmp	r4, #0
1000a452:	d101      	bne.n	1000a458 <inv_compass_angle+0xf4>
1000a454:	2800      	cmp	r0, #0
1000a456:	d019      	beq.n	1000a48c <inv_compass_angle+0x128>
        return 0.f;

    // This is the unfiltered heading correction
    angW = -atan2f(inv_q30_to_float(q2[2]), inv_q30_to_float(q2[1]));
1000a458:	4e0f      	ldr	r6, [pc, #60]	; (1000a498 <inv_compass_angle+0x134>)
1000a45a:	47b0      	blx	r6
1000a45c:	21c2      	movs	r1, #194	; 0xc2
1000a45e:	4d0f      	ldr	r5, [pc, #60]	; (1000a49c <inv_compass_angle+0x138>)
1000a460:	0589      	lsls	r1, r1, #22
1000a462:	47a8      	blx	r5
1000a464:	1c07      	adds	r7, r0, #0
1000a466:	0020      	movs	r0, r4
1000a468:	47b0      	blx	r6
1000a46a:	21c2      	movs	r1, #194	; 0xc2
1000a46c:	0589      	lsls	r1, r1, #22
1000a46e:	47a8      	blx	r5
1000a470:	4b0b      	ldr	r3, [pc, #44]	; (1000a4a0 <inv_compass_angle+0x13c>)
1000a472:	1c39      	adds	r1, r7, #0
1000a474:	4798      	blx	r3
1000a476:	2380      	movs	r3, #128	; 0x80
1000a478:	061b      	lsls	r3, r3, #24
1000a47a:	469c      	mov	ip, r3
1000a47c:	4460      	add	r0, ip
    return angW;
}
1000a47e:	b017      	add	sp, #92	; 0x5c
1000a480:	bc3c      	pop	{r2, r3, r4, r5}
1000a482:	4690      	mov	r8, r2
1000a484:	4699      	mov	r9, r3
1000a486:	46a2      	mov	sl, r4
1000a488:	46ab      	mov	fp, r5
1000a48a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inv_q_invert(quat, qi);
    inv_q_mult(q1, qi, q2);

    // Protect against atan2 of 0,0
    if ((q2[2] == 0L) && (q2[1] == 0L))
        return 0.f;
1000a48c:	2000      	movs	r0, #0
1000a48e:	e7f6      	b.n	1000a47e <inv_compass_angle+0x11a>
1000a490:	100153d9 	.word	0x100153d9
1000a494:	1000a1d5 	.word	0x1000a1d5
1000a498:	100161cd 	.word	0x100161cd
1000a49c:	10015c25 	.word	0x10015c25
1000a4a0:	10010ac5 	.word	0x10010ac5

1000a4a4 <inv_q_add>:
*            to 2^30
* @param[out] qSum Sum after quaternion summation. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_add(long *q1, long *q2, long *qSum)
{
1000a4a4:	b510      	push	{r4, lr}
    INVENSENSE_FUNC_START;
    qSum[0] = q1[0] + q2[0];
1000a4a6:	6803      	ldr	r3, [r0, #0]
1000a4a8:	001c      	movs	r4, r3
1000a4aa:	680b      	ldr	r3, [r1, #0]
1000a4ac:	469c      	mov	ip, r3
1000a4ae:	4464      	add	r4, ip
1000a4b0:	6014      	str	r4, [r2, #0]
    qSum[1] = q1[1] + q2[1];
1000a4b2:	6843      	ldr	r3, [r0, #4]
1000a4b4:	001c      	movs	r4, r3
1000a4b6:	684b      	ldr	r3, [r1, #4]
1000a4b8:	469c      	mov	ip, r3
1000a4ba:	4464      	add	r4, ip
1000a4bc:	6054      	str	r4, [r2, #4]
    qSum[2] = q1[2] + q2[2];
1000a4be:	6883      	ldr	r3, [r0, #8]
1000a4c0:	001c      	movs	r4, r3
1000a4c2:	688b      	ldr	r3, [r1, #8]
1000a4c4:	469c      	mov	ip, r3
1000a4c6:	4464      	add	r4, ip
1000a4c8:	6094      	str	r4, [r2, #8]
    qSum[3] = q1[3] + q2[3];
1000a4ca:	68c0      	ldr	r0, [r0, #12]
1000a4cc:	68cb      	ldr	r3, [r1, #12]
1000a4ce:	18c3      	adds	r3, r0, r3
1000a4d0:	60d3      	str	r3, [r2, #12]
}
1000a4d2:	bd10      	pop	{r4, pc}

1000a4d4 <inv_q_invert>:
}

void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
1000a4d4:	6803      	ldr	r3, [r0, #0]
1000a4d6:	600b      	str	r3, [r1, #0]
    qInverted[1] = -q[1];
1000a4d8:	6843      	ldr	r3, [r0, #4]
1000a4da:	425b      	negs	r3, r3
1000a4dc:	604b      	str	r3, [r1, #4]
    qInverted[2] = -q[2];
1000a4de:	6883      	ldr	r3, [r0, #8]
1000a4e0:	425b      	negs	r3, r3
1000a4e2:	608b      	str	r3, [r1, #8]
    qInverted[3] = -q[3];
1000a4e4:	68c3      	ldr	r3, [r0, #12]
1000a4e6:	425b      	negs	r3, r3
1000a4e8:	60cb      	str	r3, [r1, #12]
}
1000a4ea:	4770      	bx	lr

1000a4ec <inv_q_rotate>:
}

/** Rotates a 3-element vector by Rotation defined by Q
*/
void inv_q_rotate(const long *q, const long *in, long *out)
{
1000a4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    long q_temp1[4], q_temp2[4];
    long in4[4], out4[4];

    // Fixme optimize
    in4[0] = 0;
1000a4ee:	2300      	movs	r3, #0
}

/** Rotates a 3-element vector by Rotation defined by Q
*/
void inv_q_rotate(const long *q, const long *in, long *out)
{
1000a4f0:	0004      	movs	r4, r0
1000a4f2:	0017      	movs	r7, r2
1000a4f4:	b091      	sub	sp, #68	; 0x44
    long q_temp1[4], q_temp2[4];
    long in4[4], out4[4];

    // Fixme optimize
    in4[0] = 0;
    memcpy(&in4[1], in, 3 * sizeof(long));
1000a4f6:	4d0f      	ldr	r5, [pc, #60]	; (1000a534 <inv_q_rotate+0x48>)
1000a4f8:	220c      	movs	r2, #12
1000a4fa:	a809      	add	r0, sp, #36	; 0x24
{
    long q_temp1[4], q_temp2[4];
    long in4[4], out4[4];

    // Fixme optimize
    in4[0] = 0;
1000a4fc:	9308      	str	r3, [sp, #32]
    memcpy(&in4[1], in, 3 * sizeof(long));
1000a4fe:	47a8      	blx	r5
    inv_q_mult(q, in4, q_temp1);
1000a500:	466a      	mov	r2, sp
1000a502:	a908      	add	r1, sp, #32
1000a504:	0020      	movs	r0, r4
1000a506:	4e0c      	ldr	r6, [pc, #48]	; (1000a538 <inv_q_rotate+0x4c>)
1000a508:	47b0      	blx	r6
}

void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
1000a50a:	6823      	ldr	r3, [r4, #0]
    // Fixme optimize
    in4[0] = 0;
    memcpy(&in4[1], in, 3 * sizeof(long));
    inv_q_mult(q, in4, q_temp1);
    inv_q_invert(q, q_temp2);
    inv_q_mult(q_temp1, q_temp2, out4);
1000a50c:	aa0c      	add	r2, sp, #48	; 0x30
}

void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
1000a50e:	9304      	str	r3, [sp, #16]
    qInverted[1] = -q[1];
1000a510:	6863      	ldr	r3, [r4, #4]
    // Fixme optimize
    in4[0] = 0;
    memcpy(&in4[1], in, 3 * sizeof(long));
    inv_q_mult(q, in4, q_temp1);
    inv_q_invert(q, q_temp2);
    inv_q_mult(q_temp1, q_temp2, out4);
1000a512:	a904      	add	r1, sp, #16

void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
    qInverted[1] = -q[1];
1000a514:	425b      	negs	r3, r3
1000a516:	9305      	str	r3, [sp, #20]
    qInverted[2] = -q[2];
1000a518:	68a3      	ldr	r3, [r4, #8]
    // Fixme optimize
    in4[0] = 0;
    memcpy(&in4[1], in, 3 * sizeof(long));
    inv_q_mult(q, in4, q_temp1);
    inv_q_invert(q, q_temp2);
    inv_q_mult(q_temp1, q_temp2, out4);
1000a51a:	4668      	mov	r0, sp
void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
    qInverted[1] = -q[1];
    qInverted[2] = -q[2];
1000a51c:	425b      	negs	r3, r3
1000a51e:	9306      	str	r3, [sp, #24]
    qInverted[3] = -q[3];
1000a520:	68e3      	ldr	r3, [r4, #12]
1000a522:	425b      	negs	r3, r3
1000a524:	9307      	str	r3, [sp, #28]
    // Fixme optimize
    in4[0] = 0;
    memcpy(&in4[1], in, 3 * sizeof(long));
    inv_q_mult(q, in4, q_temp1);
    inv_q_invert(q, q_temp2);
    inv_q_mult(q_temp1, q_temp2, out4);
1000a526:	47b0      	blx	r6
    memcpy(out, &out4[1], 3 * sizeof(long));
1000a528:	220c      	movs	r2, #12
1000a52a:	a90d      	add	r1, sp, #52	; 0x34
1000a52c:	0038      	movs	r0, r7
1000a52e:	47a8      	blx	r5
}
1000a530:	b011      	add	sp, #68	; 0x44
1000a532:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a534:	100182cf 	.word	0x100182cf
1000a538:	1000a1d5 	.word	0x1000a1d5

1000a53c <inv_q_multf>:

void inv_q_multf(const float *q1, const float *q2, float *qProd)
{
1000a53c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a53e:	4657      	mov	r7, sl
1000a540:	464e      	mov	r6, r9
1000a542:	4645      	mov	r5, r8
1000a544:	b4e0      	push	{r5, r6, r7}
    INVENSENSE_FUNC_START;
    qProd[0] =
1000a546:	4c3a      	ldr	r4, [pc, #232]	; (1000a630 <inv_q_multf+0xf4>)
    inv_q_mult(q_temp1, q_temp2, out4);
    memcpy(out, &out4[1], 3 * sizeof(long));
}

void inv_q_multf(const float *q1, const float *q2, float *qProd)
{
1000a548:	0005      	movs	r5, r0
1000a54a:	000e      	movs	r6, r1
    INVENSENSE_FUNC_START;
    qProd[0] =
1000a54c:	6800      	ldr	r0, [r0, #0]
1000a54e:	6809      	ldr	r1, [r1, #0]
    inv_q_mult(q_temp1, q_temp2, out4);
    memcpy(out, &out4[1], 3 * sizeof(long));
}

void inv_q_multf(const float *q1, const float *q2, float *qProd)
{
1000a550:	4691      	mov	r9, r2
    INVENSENSE_FUNC_START;
    qProd[0] =
1000a552:	47a0      	blx	r4
1000a554:	6871      	ldr	r1, [r6, #4]
1000a556:	1c07      	adds	r7, r0, #0
1000a558:	6868      	ldr	r0, [r5, #4]
1000a55a:	47a0      	blx	r4
1000a55c:	4b35      	ldr	r3, [pc, #212]	; (1000a634 <inv_q_multf+0xf8>)
1000a55e:	1c01      	adds	r1, r0, #0
1000a560:	1c38      	adds	r0, r7, #0
1000a562:	4698      	mov	r8, r3
1000a564:	4798      	blx	r3
1000a566:	68b1      	ldr	r1, [r6, #8]
1000a568:	1c07      	adds	r7, r0, #0
1000a56a:	68a8      	ldr	r0, [r5, #8]
1000a56c:	47a0      	blx	r4
1000a56e:	1c01      	adds	r1, r0, #0
1000a570:	1c38      	adds	r0, r7, #0
1000a572:	47c0      	blx	r8
1000a574:	68f1      	ldr	r1, [r6, #12]
1000a576:	1c07      	adds	r7, r0, #0
1000a578:	68e8      	ldr	r0, [r5, #12]
1000a57a:	47a0      	blx	r4
1000a57c:	1c01      	adds	r1, r0, #0
1000a57e:	1c38      	adds	r0, r7, #0
1000a580:	47c0      	blx	r8
1000a582:	464b      	mov	r3, r9
1000a584:	6018      	str	r0, [r3, #0]
        (q1[0] * q2[0] - q1[1] * q2[1] - q1[2] * q2[2] - q1[3] * q2[3]);
    qProd[1] =
1000a586:	6871      	ldr	r1, [r6, #4]
1000a588:	6828      	ldr	r0, [r5, #0]
1000a58a:	47a0      	blx	r4
1000a58c:	6831      	ldr	r1, [r6, #0]
1000a58e:	4682      	mov	sl, r0
1000a590:	6868      	ldr	r0, [r5, #4]
1000a592:	47a0      	blx	r4
1000a594:	4f28      	ldr	r7, [pc, #160]	; (1000a638 <inv_q_multf+0xfc>)
1000a596:	1c01      	adds	r1, r0, #0
1000a598:	4650      	mov	r0, sl
1000a59a:	47b8      	blx	r7
1000a59c:	68f1      	ldr	r1, [r6, #12]
1000a59e:	4682      	mov	sl, r0
1000a5a0:	68a8      	ldr	r0, [r5, #8]
1000a5a2:	47a0      	blx	r4
1000a5a4:	1c01      	adds	r1, r0, #0
1000a5a6:	4650      	mov	r0, sl
1000a5a8:	47b8      	blx	r7
1000a5aa:	68b1      	ldr	r1, [r6, #8]
1000a5ac:	4682      	mov	sl, r0
1000a5ae:	68e8      	ldr	r0, [r5, #12]
1000a5b0:	47a0      	blx	r4
1000a5b2:	1c01      	adds	r1, r0, #0
1000a5b4:	4650      	mov	r0, sl
1000a5b6:	47c0      	blx	r8
1000a5b8:	464b      	mov	r3, r9
1000a5ba:	6058      	str	r0, [r3, #4]
        (q1[0] * q2[1] + q1[1] * q2[0] + q1[2] * q2[3] - q1[3] * q2[2]);
    qProd[2] =
1000a5bc:	68b1      	ldr	r1, [r6, #8]
1000a5be:	6828      	ldr	r0, [r5, #0]
1000a5c0:	47a0      	blx	r4
1000a5c2:	68f1      	ldr	r1, [r6, #12]
1000a5c4:	4682      	mov	sl, r0
1000a5c6:	6868      	ldr	r0, [r5, #4]
1000a5c8:	47a0      	blx	r4
1000a5ca:	1c01      	adds	r1, r0, #0
1000a5cc:	4650      	mov	r0, sl
1000a5ce:	47c0      	blx	r8
1000a5d0:	6831      	ldr	r1, [r6, #0]
1000a5d2:	4682      	mov	sl, r0
1000a5d4:	68a8      	ldr	r0, [r5, #8]
1000a5d6:	47a0      	blx	r4
1000a5d8:	1c01      	adds	r1, r0, #0
1000a5da:	4650      	mov	r0, sl
1000a5dc:	47b8      	blx	r7
1000a5de:	6871      	ldr	r1, [r6, #4]
1000a5e0:	4682      	mov	sl, r0
1000a5e2:	68e8      	ldr	r0, [r5, #12]
1000a5e4:	47a0      	blx	r4
1000a5e6:	1c01      	adds	r1, r0, #0
1000a5e8:	4650      	mov	r0, sl
1000a5ea:	47b8      	blx	r7
1000a5ec:	464b      	mov	r3, r9
1000a5ee:	6098      	str	r0, [r3, #8]
        (q1[0] * q2[2] - q1[1] * q2[3] + q1[2] * q2[0] + q1[3] * q2[1]);
    qProd[3] =
1000a5f0:	68f1      	ldr	r1, [r6, #12]
1000a5f2:	6828      	ldr	r0, [r5, #0]
1000a5f4:	47a0      	blx	r4
1000a5f6:	68b1      	ldr	r1, [r6, #8]
1000a5f8:	4682      	mov	sl, r0
1000a5fa:	6868      	ldr	r0, [r5, #4]
1000a5fc:	47a0      	blx	r4
1000a5fe:	1c01      	adds	r1, r0, #0
1000a600:	4650      	mov	r0, sl
1000a602:	47b8      	blx	r7
1000a604:	6871      	ldr	r1, [r6, #4]
1000a606:	4682      	mov	sl, r0
1000a608:	68a8      	ldr	r0, [r5, #8]
1000a60a:	47a0      	blx	r4
1000a60c:	1c01      	adds	r1, r0, #0
1000a60e:	4650      	mov	r0, sl
1000a610:	47c0      	blx	r8
1000a612:	6831      	ldr	r1, [r6, #0]
1000a614:	4680      	mov	r8, r0
1000a616:	68e8      	ldr	r0, [r5, #12]
1000a618:	47a0      	blx	r4
1000a61a:	1c01      	adds	r1, r0, #0
1000a61c:	4640      	mov	r0, r8
1000a61e:	47b8      	blx	r7
1000a620:	464b      	mov	r3, r9
1000a622:	60d8      	str	r0, [r3, #12]
        (q1[0] * q2[3] + q1[1] * q2[2] - q1[2] * q2[1] + q1[3] * q2[0]);
}
1000a624:	bc1c      	pop	{r2, r3, r4}
1000a626:	4690      	mov	r8, r2
1000a628:	4699      	mov	r9, r3
1000a62a:	46a2      	mov	sl, r4
1000a62c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a62e:	46c0      	nop			; (mov r8, r8)
1000a630:	10015c25 	.word	0x10015c25
1000a634:	10015e4d 	.word	0x10015e4d
1000a638:	100155a5 	.word	0x100155a5

1000a63c <inv_q_addf>:

void inv_q_addf(const float *q1, const float *q2, float *qSum)
{
1000a63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a63e:	0006      	movs	r6, r0
1000a640:	000f      	movs	r7, r1
    INVENSENSE_FUNC_START;
    qSum[0] = q1[0] + q2[0];
1000a642:	4d09      	ldr	r5, [pc, #36]	; (1000a668 <inv_q_addf+0x2c>)
1000a644:	6809      	ldr	r1, [r1, #0]
1000a646:	6800      	ldr	r0, [r0, #0]
    qProd[3] =
        (q1[0] * q2[3] + q1[1] * q2[2] - q1[2] * q2[1] + q1[3] * q2[0]);
}

void inv_q_addf(const float *q1, const float *q2, float *qSum)
{
1000a648:	0014      	movs	r4, r2
    INVENSENSE_FUNC_START;
    qSum[0] = q1[0] + q2[0];
1000a64a:	47a8      	blx	r5
1000a64c:	6020      	str	r0, [r4, #0]
    qSum[1] = q1[1] + q2[1];
1000a64e:	6879      	ldr	r1, [r7, #4]
1000a650:	6870      	ldr	r0, [r6, #4]
1000a652:	47a8      	blx	r5
1000a654:	6060      	str	r0, [r4, #4]
    qSum[2] = q1[2] + q2[2];
1000a656:	68b9      	ldr	r1, [r7, #8]
1000a658:	68b0      	ldr	r0, [r6, #8]
1000a65a:	47a8      	blx	r5
1000a65c:	60a0      	str	r0, [r4, #8]
    qSum[3] = q1[3] + q2[3];
1000a65e:	68f9      	ldr	r1, [r7, #12]
1000a660:	68f0      	ldr	r0, [r6, #12]
1000a662:	47a8      	blx	r5
1000a664:	60e0      	str	r0, [r4, #12]
}
1000a666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a668:	100155a5 	.word	0x100155a5

1000a66c <inv_q_normalizef>:

void inv_q_normalizef(float *q)
{
1000a66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a66e:	465f      	mov	r7, fp
1000a670:	4656      	mov	r6, sl
1000a672:	464d      	mov	r5, r9
1000a674:	4644      	mov	r4, r8
1000a676:	b4f0      	push	{r4, r5, r6, r7}
    INVENSENSE_FUNC_START;
    float normSF = 0;
    float xHalf = 0;
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1000a678:	6803      	ldr	r3, [r0, #0]
1000a67a:	4c41      	ldr	r4, [pc, #260]	; (1000a780 <inv_q_normalizef+0x114>)
1000a67c:	469a      	mov	sl, r3
1000a67e:	6843      	ldr	r3, [r0, #4]
1000a680:	68c7      	ldr	r7, [r0, #12]
1000a682:	4699      	mov	r9, r3
1000a684:	6883      	ldr	r3, [r0, #8]
1000a686:	4651      	mov	r1, sl
    qSum[2] = q1[2] + q2[2];
    qSum[3] = q1[3] + q2[3];
}

void inv_q_normalizef(float *q)
{
1000a688:	0005      	movs	r5, r0
    INVENSENSE_FUNC_START;
    float normSF = 0;
    float xHalf = 0;
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1000a68a:	4650      	mov	r0, sl
1000a68c:	4698      	mov	r8, r3
1000a68e:	47a0      	blx	r4
1000a690:	4649      	mov	r1, r9
1000a692:	4683      	mov	fp, r0
1000a694:	4648      	mov	r0, r9
1000a696:	47a0      	blx	r4
1000a698:	4e3a      	ldr	r6, [pc, #232]	; (1000a784 <inv_q_normalizef+0x118>)
1000a69a:	1c01      	adds	r1, r0, #0
1000a69c:	4658      	mov	r0, fp
1000a69e:	47b0      	blx	r6
1000a6a0:	4641      	mov	r1, r8
1000a6a2:	4683      	mov	fp, r0
1000a6a4:	4640      	mov	r0, r8
1000a6a6:	47a0      	blx	r4
1000a6a8:	1c01      	adds	r1, r0, #0
1000a6aa:	4658      	mov	r0, fp
1000a6ac:	47b0      	blx	r6
1000a6ae:	1c39      	adds	r1, r7, #0
1000a6b0:	4683      	mov	fp, r0
1000a6b2:	1c38      	adds	r0, r7, #0
1000a6b4:	47a0      	blx	r4
1000a6b6:	1c01      	adds	r1, r0, #0
1000a6b8:	4658      	mov	r0, fp
1000a6ba:	47b0      	blx	r6
    if (normSF < 2) {
1000a6bc:	2180      	movs	r1, #128	; 0x80
1000a6be:	4b32      	ldr	r3, [pc, #200]	; (1000a788 <inv_q_normalizef+0x11c>)
1000a6c0:	05c9      	lsls	r1, r1, #23
void inv_q_normalizef(float *q)
{
    INVENSENSE_FUNC_START;
    float normSF = 0;
    float xHalf = 0;
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1000a6c2:	1c06      	adds	r6, r0, #0
    if (normSF < 2) {
1000a6c4:	4798      	blx	r3
1000a6c6:	2800      	cmp	r0, #0
1000a6c8:	d10c      	bne.n	1000a6e4 <inv_q_normalizef+0x78>
        q[0] *= normSF;
        q[1] *= normSF;
        q[2] *= normSF;
        q[3] *= normSF;
    } else {
        q[0] = 1.0;
1000a6ca:	23fe      	movs	r3, #254	; 0xfe
1000a6cc:	059b      	lsls	r3, r3, #22
1000a6ce:	602b      	str	r3, [r5, #0]
        q[1] = 0.0;
1000a6d0:	2300      	movs	r3, #0
1000a6d2:	606b      	str	r3, [r5, #4]
        q[2] = 0.0;
1000a6d4:	60ab      	str	r3, [r5, #8]
        q[3] = 0.0;
1000a6d6:	60eb      	str	r3, [r5, #12]
    }
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
}
1000a6d8:	bc3c      	pop	{r2, r3, r4, r5}
1000a6da:	4690      	mov	r8, r2
1000a6dc:	4699      	mov	r9, r3
1000a6de:	46a2      	mov	sl, r4
1000a6e0:	46ab      	mov	fp, r5
1000a6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    INVENSENSE_FUNC_START;
    float normSF = 0;
    float xHalf = 0;
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
    if (normSF < 2) {
        xHalf = 0.5f * normSF;
1000a6e4:	21fc      	movs	r1, #252	; 0xfc
1000a6e6:	1c30      	adds	r0, r6, #0
1000a6e8:	0589      	lsls	r1, r1, #22
1000a6ea:	47a0      	blx	r4
1000a6ec:	4683      	mov	fp, r0
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
1000a6ee:	1c01      	adds	r1, r0, #0
1000a6f0:	1c30      	adds	r0, r6, #0
1000a6f2:	47a0      	blx	r4
1000a6f4:	1c31      	adds	r1, r6, #0
1000a6f6:	47a0      	blx	r4
1000a6f8:	1c01      	adds	r1, r0, #0
1000a6fa:	20ff      	movs	r0, #255	; 0xff
1000a6fc:	4b23      	ldr	r3, [pc, #140]	; (1000a78c <inv_q_normalizef+0x120>)
1000a6fe:	0580      	lsls	r0, r0, #22
1000a700:	4798      	blx	r3
1000a702:	1c01      	adds	r1, r0, #0
1000a704:	1c30      	adds	r0, r6, #0
1000a706:	47a0      	blx	r4
1000a708:	1c06      	adds	r6, r0, #0
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
1000a70a:	1c01      	adds	r1, r0, #0
1000a70c:	4658      	mov	r0, fp
1000a70e:	47a0      	blx	r4
1000a710:	1c31      	adds	r1, r6, #0
1000a712:	47a0      	blx	r4
1000a714:	1c01      	adds	r1, r0, #0
1000a716:	20ff      	movs	r0, #255	; 0xff
1000a718:	4b1c      	ldr	r3, [pc, #112]	; (1000a78c <inv_q_normalizef+0x120>)
1000a71a:	0580      	lsls	r0, r0, #22
1000a71c:	4798      	blx	r3
1000a71e:	1c01      	adds	r1, r0, #0
1000a720:	1c30      	adds	r0, r6, #0
1000a722:	47a0      	blx	r4
1000a724:	1c06      	adds	r6, r0, #0
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
1000a726:	1c01      	adds	r1, r0, #0
1000a728:	4658      	mov	r0, fp
1000a72a:	47a0      	blx	r4
1000a72c:	1c31      	adds	r1, r6, #0
1000a72e:	47a0      	blx	r4
1000a730:	1c01      	adds	r1, r0, #0
1000a732:	20ff      	movs	r0, #255	; 0xff
1000a734:	4b15      	ldr	r3, [pc, #84]	; (1000a78c <inv_q_normalizef+0x120>)
1000a736:	0580      	lsls	r0, r0, #22
1000a738:	4798      	blx	r3
1000a73a:	1c01      	adds	r1, r0, #0
1000a73c:	1c30      	adds	r0, r6, #0
1000a73e:	47a0      	blx	r4
1000a740:	1c06      	adds	r6, r0, #0
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
1000a742:	1c01      	adds	r1, r0, #0
1000a744:	4658      	mov	r0, fp
1000a746:	47a0      	blx	r4
1000a748:	1c31      	adds	r1, r6, #0
1000a74a:	47a0      	blx	r4
1000a74c:	1c01      	adds	r1, r0, #0
1000a74e:	20ff      	movs	r0, #255	; 0xff
1000a750:	4b0e      	ldr	r3, [pc, #56]	; (1000a78c <inv_q_normalizef+0x120>)
1000a752:	0580      	lsls	r0, r0, #22
1000a754:	4798      	blx	r3
1000a756:	1c01      	adds	r1, r0, #0
1000a758:	1c30      	adds	r0, r6, #0
1000a75a:	47a0      	blx	r4
1000a75c:	1c06      	adds	r6, r0, #0
        q[0] *= normSF;
1000a75e:	1c01      	adds	r1, r0, #0
1000a760:	4650      	mov	r0, sl
1000a762:	47a0      	blx	r4
        q[1] *= normSF;
1000a764:	1c31      	adds	r1, r6, #0
        xHalf = 0.5f * normSF;
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        q[0] *= normSF;
1000a766:	6028      	str	r0, [r5, #0]
        q[1] *= normSF;
1000a768:	4648      	mov	r0, r9
1000a76a:	47a0      	blx	r4
        q[2] *= normSF;
1000a76c:	1c31      	adds	r1, r6, #0
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        q[0] *= normSF;
        q[1] *= normSF;
1000a76e:	6068      	str	r0, [r5, #4]
        q[2] *= normSF;
1000a770:	4640      	mov	r0, r8
1000a772:	47a0      	blx	r4
        q[3] *= normSF;
1000a774:	1c31      	adds	r1, r6, #0
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        q[0] *= normSF;
        q[1] *= normSF;
        q[2] *= normSF;
1000a776:	60a8      	str	r0, [r5, #8]
        q[3] *= normSF;
1000a778:	1c38      	adds	r0, r7, #0
1000a77a:	47a0      	blx	r4
1000a77c:	60e8      	str	r0, [r5, #12]
1000a77e:	e7ab      	b.n	1000a6d8 <inv_q_normalizef+0x6c>
1000a780:	10015c25 	.word	0x10015c25
1000a784:	100155a5 	.word	0x100155a5
1000a788:	10015341 	.word	0x10015341
1000a78c:	10015e4d 	.word	0x10015e4d

1000a790 <inv_q_norm4>:

/** Performs a length 4 vector normalization with a square root.
* @param[in,out] q vector to normalize. Returns [1,0,0,0] is magnitude is zero.
*/
void inv_q_norm4(float *q)
{
1000a790:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a792:	4657      	mov	r7, sl
1000a794:	464e      	mov	r6, r9
1000a796:	4645      	mov	r5, r8
1000a798:	b4e0      	push	{r5, r6, r7}
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1000a79a:	6843      	ldr	r3, [r0, #4]
1000a79c:	6801      	ldr	r1, [r0, #0]
1000a79e:	4699      	mov	r9, r3
1000a7a0:	6883      	ldr	r3, [r0, #8]
1000a7a2:	4d21      	ldr	r5, [pc, #132]	; (1000a828 <inv_q_norm4+0x98>)
1000a7a4:	68c7      	ldr	r7, [r0, #12]

/** Performs a length 4 vector normalization with a square root.
* @param[in,out] q vector to normalize. Returns [1,0,0,0] is magnitude is zero.
*/
void inv_q_norm4(float *q)
{
1000a7a6:	0004      	movs	r4, r0
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1000a7a8:	1c08      	adds	r0, r1, #0
1000a7aa:	4698      	mov	r8, r3
1000a7ac:	47a8      	blx	r5
1000a7ae:	4649      	mov	r1, r9
1000a7b0:	4682      	mov	sl, r0
1000a7b2:	4648      	mov	r0, r9
1000a7b4:	47a8      	blx	r5
1000a7b6:	4e1d      	ldr	r6, [pc, #116]	; (1000a82c <inv_q_norm4+0x9c>)
1000a7b8:	1c01      	adds	r1, r0, #0
1000a7ba:	4650      	mov	r0, sl
1000a7bc:	47b0      	blx	r6
1000a7be:	4641      	mov	r1, r8
1000a7c0:	4681      	mov	r9, r0
1000a7c2:	4640      	mov	r0, r8
1000a7c4:	47a8      	blx	r5
1000a7c6:	1c01      	adds	r1, r0, #0
1000a7c8:	4648      	mov	r0, r9
1000a7ca:	47b0      	blx	r6
1000a7cc:	1c39      	adds	r1, r7, #0
1000a7ce:	4680      	mov	r8, r0
1000a7d0:	1c38      	adds	r0, r7, #0
1000a7d2:	47a8      	blx	r5
1000a7d4:	1c01      	adds	r1, r0, #0
1000a7d6:	4640      	mov	r0, r8
1000a7d8:	47b0      	blx	r6
    if (mag) {
1000a7da:	2500      	movs	r5, #0
* @param[in,out] q vector to normalize. Returns [1,0,0,0] is magnitude is zero.
*/
void inv_q_norm4(float *q)
{
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1000a7dc:	4b14      	ldr	r3, [pc, #80]	; (1000a830 <inv_q_norm4+0xa0>)
1000a7de:	4798      	blx	r3
    if (mag) {
1000a7e0:	1c29      	adds	r1, r5, #0
1000a7e2:	4b14      	ldr	r3, [pc, #80]	; (1000a834 <inv_q_norm4+0xa4>)
* @param[in,out] q vector to normalize. Returns [1,0,0,0] is magnitude is zero.
*/
void inv_q_norm4(float *q)
{
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1000a7e4:	1c06      	adds	r6, r0, #0
    if (mag) {
1000a7e6:	4798      	blx	r3
1000a7e8:	2800      	cmp	r0, #0
1000a7ea:	d00a      	beq.n	1000a802 <inv_q_norm4+0x72>
        q[0] /= mag;
        q[1] /= mag;
        q[2] /= mag;
        q[3] /= mag;
    } else {
        q[0] = 1.f;
1000a7ec:	23fe      	movs	r3, #254	; 0xfe
1000a7ee:	059b      	lsls	r3, r3, #22
1000a7f0:	6023      	str	r3, [r4, #0]
        q[1] = 0.f;
1000a7f2:	6065      	str	r5, [r4, #4]
        q[2] = 0.f;
1000a7f4:	60a5      	str	r5, [r4, #8]
        q[3] = 0.f;
1000a7f6:	60e5      	str	r5, [r4, #12]
    }
}
1000a7f8:	bc1c      	pop	{r2, r3, r4}
1000a7fa:	4690      	mov	r8, r2
1000a7fc:	4699      	mov	r9, r3
1000a7fe:	46a2      	mov	sl, r4
1000a800:	bdf0      	pop	{r4, r5, r6, r7, pc}
void inv_q_norm4(float *q)
{
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
    if (mag) {
        q[0] /= mag;
1000a802:	4d0d      	ldr	r5, [pc, #52]	; (1000a838 <inv_q_norm4+0xa8>)
1000a804:	1c31      	adds	r1, r6, #0
1000a806:	6820      	ldr	r0, [r4, #0]
1000a808:	47a8      	blx	r5
        q[1] /= mag;
1000a80a:	1c31      	adds	r1, r6, #0
void inv_q_norm4(float *q)
{
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
    if (mag) {
        q[0] /= mag;
1000a80c:	6020      	str	r0, [r4, #0]
        q[1] /= mag;
1000a80e:	6860      	ldr	r0, [r4, #4]
1000a810:	47a8      	blx	r5
        q[2] /= mag;
1000a812:	1c31      	adds	r1, r6, #0
{
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
    if (mag) {
        q[0] /= mag;
        q[1] /= mag;
1000a814:	6060      	str	r0, [r4, #4]
        q[2] /= mag;
1000a816:	68a0      	ldr	r0, [r4, #8]
1000a818:	47a8      	blx	r5
        q[3] /= mag;
1000a81a:	1c31      	adds	r1, r6, #0
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
    if (mag) {
        q[0] /= mag;
        q[1] /= mag;
        q[2] /= mag;
1000a81c:	60a0      	str	r0, [r4, #8]
        q[3] /= mag;
1000a81e:	68e0      	ldr	r0, [r4, #12]
1000a820:	47a8      	blx	r5
1000a822:	60e0      	str	r0, [r4, #12]
1000a824:	e7e8      	b.n	1000a7f8 <inv_q_norm4+0x68>
1000a826:	46c0      	nop			; (mov r8, r8)
1000a828:	10015c25 	.word	0x10015c25
1000a82c:	100155a5 	.word	0x100155a5
1000a830:	10010acd 	.word	0x10010acd
1000a834:	10015335 	.word	0x10015335
1000a838:	10015891 	.word	0x10015891

1000a83c <inv_q_invertf>:

void inv_q_invertf(const float *q, float *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
    qInverted[1] = -q[1];
1000a83c:	2280      	movs	r2, #128	; 0x80
1000a83e:	0612      	lsls	r2, r2, #24
1000a840:	4694      	mov	ip, r2
}

void inv_q_invertf(const float *q, float *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
1000a842:	6803      	ldr	r3, [r0, #0]
1000a844:	600b      	str	r3, [r1, #0]
    qInverted[1] = -q[1];
1000a846:	6843      	ldr	r3, [r0, #4]
1000a848:	4463      	add	r3, ip
1000a84a:	604b      	str	r3, [r1, #4]
    qInverted[2] = -q[2];
1000a84c:	6883      	ldr	r3, [r0, #8]
1000a84e:	4463      	add	r3, ip
1000a850:	608b      	str	r3, [r1, #8]
    qInverted[3] = -q[3];
1000a852:	68c3      	ldr	r3, [r0, #12]
1000a854:	4463      	add	r3, ip
1000a856:	60cb      	str	r3, [r1, #12]
}
1000a858:	4770      	bx	lr
1000a85a:	46c0      	nop			; (mov r8, r8)

1000a85c <inv_quaternion_to_rotation>:
 *             the first row of the matrix. Rotation matrix multiplied
 *             by a 3 element column vector transform a vector from Body
 *             to World.
 */
void inv_quaternion_to_rotation(const long *quat, long *rot)
{
1000a85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a85e:	464f      	mov	r7, r9
1000a860:	4646      	mov	r6, r8
1000a862:	b4c0      	push	{r6, r7}
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a864:	6843      	ldr	r3, [r0, #4]
 *             the first row of the matrix. Rotation matrix multiplied
 *             by a 3 element column vector transform a vector from Body
 *             to World.
 */
void inv_quaternion_to_rotation(const long *quat, long *rot)
{
1000a866:	000e      	movs	r6, r1
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a868:	4698      	mov	r8, r3
1000a86a:	17db      	asrs	r3, r3, #31
1000a86c:	4699      	mov	r9, r3
1000a86e:	6803      	ldr	r3, [r0, #0]
 *             the first row of the matrix. Rotation matrix multiplied
 *             by a 3 element column vector transform a vector from Body
 *             to World.
 */
void inv_quaternion_to_rotation(const long *quat, long *rot)
{
1000a870:	0004      	movs	r4, r0
    rot[0] =
1000a872:	001a      	movs	r2, r3
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a874:	17d9      	asrs	r1, r3, #31
 *             by a 3 element column vector transform a vector from Body
 *             to World.
 */
void inv_quaternion_to_rotation(const long *quat, long *rot)
{
    rot[0] =
1000a876:	4d68      	ldr	r5, [pc, #416]	; (1000aa18 <inv_quaternion_to_rotation+0x1bc>)
1000a878:	000b      	movs	r3, r1
1000a87a:	0010      	movs	r0, r2
1000a87c:	47a8      	blx	r5
1000a87e:	00c9      	lsls	r1, r1, #3
1000a880:	0f47      	lsrs	r7, r0, #29
1000a882:	430f      	orrs	r7, r1
1000a884:	4642      	mov	r2, r8
1000a886:	464b      	mov	r3, r9
1000a888:	4640      	mov	r0, r8
1000a88a:	4649      	mov	r1, r9
1000a88c:	47a8      	blx	r5
1000a88e:	23c0      	movs	r3, #192	; 0xc0
1000a890:	061b      	lsls	r3, r3, #24
1000a892:	469c      	mov	ip, r3
1000a894:	00c9      	lsls	r1, r1, #3
1000a896:	0f40      	lsrs	r0, r0, #29
1000a898:	4308      	orrs	r0, r1
1000a89a:	1838      	adds	r0, r7, r0
1000a89c:	4460      	add	r0, ip
1000a89e:	6030      	str	r0, [r6, #0]
        inv_q29_mult(quat[1], quat[1]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
    rot[1] =
1000a8a0:	6863      	ldr	r3, [r4, #4]
1000a8a2:	68a2      	ldr	r2, [r4, #8]
1000a8a4:	17d9      	asrs	r1, r3, #31
1000a8a6:	68a3      	ldr	r3, [r4, #8]
1000a8a8:	6860      	ldr	r0, [r4, #4]
1000a8aa:	17db      	asrs	r3, r3, #31
1000a8ac:	47a8      	blx	r5
1000a8ae:	68e3      	ldr	r3, [r4, #12]
1000a8b0:	00c9      	lsls	r1, r1, #3
1000a8b2:	0f47      	lsrs	r7, r0, #29
1000a8b4:	430f      	orrs	r7, r1
1000a8b6:	17d9      	asrs	r1, r3, #31
1000a8b8:	6823      	ldr	r3, [r4, #0]
1000a8ba:	6822      	ldr	r2, [r4, #0]
1000a8bc:	68e0      	ldr	r0, [r4, #12]
1000a8be:	17db      	asrs	r3, r3, #31
1000a8c0:	47a8      	blx	r5
1000a8c2:	00c9      	lsls	r1, r1, #3
1000a8c4:	0f40      	lsrs	r0, r0, #29
1000a8c6:	4308      	orrs	r0, r1
1000a8c8:	1a3f      	subs	r7, r7, r0
1000a8ca:	6077      	str	r7, [r6, #4]
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
    rot[2] =
1000a8cc:	68a3      	ldr	r3, [r4, #8]
1000a8ce:	6822      	ldr	r2, [r4, #0]
1000a8d0:	17d9      	asrs	r1, r3, #31
1000a8d2:	6823      	ldr	r3, [r4, #0]
1000a8d4:	68a0      	ldr	r0, [r4, #8]
1000a8d6:	17db      	asrs	r3, r3, #31
1000a8d8:	47a8      	blx	r5
1000a8da:	6863      	ldr	r3, [r4, #4]
1000a8dc:	00c9      	lsls	r1, r1, #3
1000a8de:	0f47      	lsrs	r7, r0, #29
1000a8e0:	430f      	orrs	r7, r1
1000a8e2:	17d9      	asrs	r1, r3, #31
1000a8e4:	68e3      	ldr	r3, [r4, #12]
1000a8e6:	68e2      	ldr	r2, [r4, #12]
1000a8e8:	6860      	ldr	r0, [r4, #4]
1000a8ea:	17db      	asrs	r3, r3, #31
1000a8ec:	47a8      	blx	r5
1000a8ee:	00c9      	lsls	r1, r1, #3
1000a8f0:	0f40      	lsrs	r0, r0, #29
1000a8f2:	4308      	orrs	r0, r1
1000a8f4:	1838      	adds	r0, r7, r0
1000a8f6:	60b0      	str	r0, [r6, #8]
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
    rot[3] =
1000a8f8:	68e3      	ldr	r3, [r4, #12]
1000a8fa:	6822      	ldr	r2, [r4, #0]
1000a8fc:	17d9      	asrs	r1, r3, #31
1000a8fe:	6823      	ldr	r3, [r4, #0]
1000a900:	68e0      	ldr	r0, [r4, #12]
1000a902:	17db      	asrs	r3, r3, #31
1000a904:	47a8      	blx	r5
1000a906:	6863      	ldr	r3, [r4, #4]
1000a908:	00c9      	lsls	r1, r1, #3
1000a90a:	0f47      	lsrs	r7, r0, #29
1000a90c:	430f      	orrs	r7, r1
1000a90e:	17d9      	asrs	r1, r3, #31
1000a910:	68a3      	ldr	r3, [r4, #8]
1000a912:	68a2      	ldr	r2, [r4, #8]
1000a914:	17db      	asrs	r3, r3, #31
1000a916:	6860      	ldr	r0, [r4, #4]
1000a918:	47a8      	blx	r5
1000a91a:	00c9      	lsls	r1, r1, #3
1000a91c:	0f40      	lsrs	r0, r0, #29
1000a91e:	4308      	orrs	r0, r1
1000a920:	1838      	adds	r0, r7, r0
1000a922:	60f0      	str	r0, [r6, #12]
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a924:	68a3      	ldr	r3, [r4, #8]
1000a926:	4698      	mov	r8, r3
1000a928:	17db      	asrs	r3, r3, #31
1000a92a:	4699      	mov	r9, r3
1000a92c:	6823      	ldr	r3, [r4, #0]
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
    rot[2] =
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
    rot[3] =
        inv_q29_mult(quat[1], quat[2]) + inv_q29_mult(quat[3], quat[0]);
    rot[4] =
1000a92e:	001a      	movs	r2, r3
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a930:	17d9      	asrs	r1, r3, #31
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
    rot[2] =
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
    rot[3] =
        inv_q29_mult(quat[1], quat[2]) + inv_q29_mult(quat[3], quat[0]);
    rot[4] =
1000a932:	000b      	movs	r3, r1
1000a934:	0010      	movs	r0, r2
1000a936:	47a8      	blx	r5
1000a938:	00c9      	lsls	r1, r1, #3
1000a93a:	0f47      	lsrs	r7, r0, #29
1000a93c:	464b      	mov	r3, r9
1000a93e:	430f      	orrs	r7, r1
1000a940:	4642      	mov	r2, r8
1000a942:	4649      	mov	r1, r9
1000a944:	4640      	mov	r0, r8
1000a946:	47a8      	blx	r5
1000a948:	23c0      	movs	r3, #192	; 0xc0
1000a94a:	061b      	lsls	r3, r3, #24
1000a94c:	469c      	mov	ip, r3
1000a94e:	00c9      	lsls	r1, r1, #3
1000a950:	0f40      	lsrs	r0, r0, #29
1000a952:	4308      	orrs	r0, r1
1000a954:	1838      	adds	r0, r7, r0
1000a956:	4460      	add	r0, ip
1000a958:	6130      	str	r0, [r6, #16]
        inv_q29_mult(quat[2], quat[2]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
    rot[5] =
1000a95a:	68a3      	ldr	r3, [r4, #8]
1000a95c:	68e2      	ldr	r2, [r4, #12]
1000a95e:	17d9      	asrs	r1, r3, #31
1000a960:	68e3      	ldr	r3, [r4, #12]
1000a962:	68a0      	ldr	r0, [r4, #8]
1000a964:	17db      	asrs	r3, r3, #31
1000a966:	47a8      	blx	r5
1000a968:	6863      	ldr	r3, [r4, #4]
1000a96a:	00c9      	lsls	r1, r1, #3
1000a96c:	0f47      	lsrs	r7, r0, #29
1000a96e:	430f      	orrs	r7, r1
1000a970:	17d9      	asrs	r1, r3, #31
1000a972:	6823      	ldr	r3, [r4, #0]
1000a974:	6822      	ldr	r2, [r4, #0]
1000a976:	6860      	ldr	r0, [r4, #4]
1000a978:	17db      	asrs	r3, r3, #31
1000a97a:	47a8      	blx	r5
1000a97c:	00c9      	lsls	r1, r1, #3
1000a97e:	0f40      	lsrs	r0, r0, #29
1000a980:	4308      	orrs	r0, r1
1000a982:	1a3f      	subs	r7, r7, r0
1000a984:	6177      	str	r7, [r6, #20]
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
    rot[6] =
1000a986:	6863      	ldr	r3, [r4, #4]
1000a988:	68e2      	ldr	r2, [r4, #12]
1000a98a:	17d9      	asrs	r1, r3, #31
1000a98c:	68e3      	ldr	r3, [r4, #12]
1000a98e:	6860      	ldr	r0, [r4, #4]
1000a990:	17db      	asrs	r3, r3, #31
1000a992:	47a8      	blx	r5
1000a994:	68a3      	ldr	r3, [r4, #8]
1000a996:	00c9      	lsls	r1, r1, #3
1000a998:	0f47      	lsrs	r7, r0, #29
1000a99a:	430f      	orrs	r7, r1
1000a99c:	17d9      	asrs	r1, r3, #31
1000a99e:	6823      	ldr	r3, [r4, #0]
1000a9a0:	6822      	ldr	r2, [r4, #0]
1000a9a2:	68a0      	ldr	r0, [r4, #8]
1000a9a4:	17db      	asrs	r3, r3, #31
1000a9a6:	47a8      	blx	r5
1000a9a8:	00c9      	lsls	r1, r1, #3
1000a9aa:	0f40      	lsrs	r0, r0, #29
1000a9ac:	4308      	orrs	r0, r1
1000a9ae:	1a3f      	subs	r7, r7, r0
1000a9b0:	61b7      	str	r7, [r6, #24]
        inv_q29_mult(quat[1], quat[3]) - inv_q29_mult(quat[2], quat[0]);
    rot[7] =
1000a9b2:	6823      	ldr	r3, [r4, #0]
1000a9b4:	6862      	ldr	r2, [r4, #4]
1000a9b6:	17d9      	asrs	r1, r3, #31
1000a9b8:	6863      	ldr	r3, [r4, #4]
1000a9ba:	6820      	ldr	r0, [r4, #0]
1000a9bc:	17db      	asrs	r3, r3, #31
1000a9be:	47a8      	blx	r5
1000a9c0:	68e3      	ldr	r3, [r4, #12]
1000a9c2:	00c9      	lsls	r1, r1, #3
1000a9c4:	0f47      	lsrs	r7, r0, #29
1000a9c6:	430f      	orrs	r7, r1
1000a9c8:	17d9      	asrs	r1, r3, #31
1000a9ca:	68a3      	ldr	r3, [r4, #8]
1000a9cc:	68a2      	ldr	r2, [r4, #8]
1000a9ce:	68e0      	ldr	r0, [r4, #12]
1000a9d0:	17db      	asrs	r3, r3, #31
1000a9d2:	47a8      	blx	r5
1000a9d4:	00c9      	lsls	r1, r1, #3
1000a9d6:	0f40      	lsrs	r0, r0, #29
1000a9d8:	4308      	orrs	r0, r1
1000a9da:	1838      	adds	r0, r7, r0
1000a9dc:	61f0      	str	r0, [r6, #28]
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a9de:	6827      	ldr	r7, [r4, #0]
1000a9e0:	68e0      	ldr	r0, [r4, #12]
1000a9e2:	17fb      	asrs	r3, r7, #31
1000a9e4:	17c1      	asrs	r1, r0, #31
1000a9e6:	4698      	mov	r8, r3
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
    rot[6] =
        inv_q29_mult(quat[1], quat[3]) - inv_q29_mult(quat[2], quat[0]);
    rot[7] =
        inv_q29_mult(quat[2], quat[3]) + inv_q29_mult(quat[1], quat[0]);
    rot[8] =
1000a9e8:	0002      	movs	r2, r0
1000a9ea:	000b      	movs	r3, r1
1000a9ec:	47a8      	blx	r5
1000a9ee:	00c9      	lsls	r1, r1, #3
1000a9f0:	0f44      	lsrs	r4, r0, #29
1000a9f2:	4643      	mov	r3, r8
1000a9f4:	430c      	orrs	r4, r1
1000a9f6:	003a      	movs	r2, r7
1000a9f8:	0038      	movs	r0, r7
1000a9fa:	4641      	mov	r1, r8
1000a9fc:	47a8      	blx	r5
1000a9fe:	23c0      	movs	r3, #192	; 0xc0
1000aa00:	061b      	lsls	r3, r3, #24
1000aa02:	469c      	mov	ip, r3
1000aa04:	00c9      	lsls	r1, r1, #3
1000aa06:	0f40      	lsrs	r0, r0, #29
1000aa08:	4308      	orrs	r0, r1
1000aa0a:	1820      	adds	r0, r4, r0
1000aa0c:	4460      	add	r0, ip
1000aa0e:	6230      	str	r0, [r6, #32]
        inv_q29_mult(quat[3], quat[3]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
}
1000aa10:	bc0c      	pop	{r2, r3}
1000aa12:	4690      	mov	r8, r2
1000aa14:	4699      	mov	r9, r3
1000aa16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000aa18:	100153d9 	.word	0x100153d9

1000aa1c <inv_orientation_matrix_to_scalar>:
* The next 2 bits (6 and 7) represent the column the one is on for the third row with
* bit number 8 being the sign. In binary the identity matrix would therefor be:
* 010_001_000 or 0x88 in hex.
*/
unsigned short inv_orientation_matrix_to_scalar(const signed char *mtx)
{
1000aa1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
       YZX  000_010_001
       ZXY  001_000_010
       ZYX  000_001_010
     */

    scalar = inv_row_2_scale(mtx);
1000aa1e:	4f07      	ldr	r7, [pc, #28]	; (1000aa3c <inv_orientation_matrix_to_scalar+0x20>)
* The next 2 bits (6 and 7) represent the column the one is on for the third row with
* bit number 8 being the sign. In binary the identity matrix would therefor be:
* 010_001_000 or 0x88 in hex.
*/
unsigned short inv_orientation_matrix_to_scalar(const signed char *mtx)
{
1000aa20:	0005      	movs	r5, r0
       YZX  000_010_001
       ZXY  001_000_010
       ZYX  000_001_010
     */

    scalar = inv_row_2_scale(mtx);
1000aa22:	47b8      	blx	r7
1000aa24:	0004      	movs	r4, r0
    scalar |= inv_row_2_scale(mtx + 3) << 3;
1000aa26:	1ce8      	adds	r0, r5, #3
1000aa28:	47b8      	blx	r7
1000aa2a:	0006      	movs	r6, r0
    scalar |= inv_row_2_scale(mtx + 6) << 6;
1000aa2c:	1da8      	adds	r0, r5, #6
1000aa2e:	47b8      	blx	r7
1000aa30:	00f6      	lsls	r6, r6, #3
1000aa32:	0180      	lsls	r0, r0, #6
1000aa34:	4330      	orrs	r0, r6
1000aa36:	4304      	orrs	r4, r0


    return scalar;
1000aa38:	b2a0      	uxth	r0, r4
}
1000aa3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000aa3c:	1000a155 	.word	0x1000a155

1000aa40 <inv_convert_to_body_with_scale>:
* @param[in] sensitivity Sensitivity scale
* @param[in] input Input vector, length 3
* @param[out] output Output vector, length 3
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
1000aa40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000aa42:	465f      	mov	r7, fp
1000aa44:	4656      	mov	r6, sl
1000aa46:	464d      	mov	r5, r9
1000aa48:	4644      	mov	r4, r8
1000aa4a:	b4f0      	push	{r4, r5, r6, r7}
1000aa4c:	001f      	movs	r7, r3
    output[0] = inv_q30_mult(input[orientation & 0x03] *
1000aa4e:	2303      	movs	r3, #3
1000aa50:	2501      	movs	r5, #1
1000aa52:	469b      	mov	fp, r3
1000aa54:	4003      	ands	r3, r0
1000aa56:	009b      	lsls	r3, r3, #2
1000aa58:	589b      	ldr	r3, [r3, r2]
* @param[in] sensitivity Sensitivity scale
* @param[in] input Input vector, length 3
* @param[out] output Output vector, length 3
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
1000aa5a:	4692      	mov	sl, r2
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000aa5c:	17ca      	asrs	r2, r1, #31
* @param[in] sensitivity Sensitivity scale
* @param[in] input Input vector, length 3
* @param[out] output Output vector, length 3
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
1000aa5e:	000e      	movs	r6, r1
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000aa60:	4691      	mov	r9, r2
* @param[in] sensitivity Sensitivity scale
* @param[in] input Input vector, length 3
* @param[out] output Output vector, length 3
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
1000aa62:	0004      	movs	r4, r0
    output[0] = inv_q30_mult(input[orientation & 0x03] *
1000aa64:	0740      	lsls	r0, r0, #29
1000aa66:	17c0      	asrs	r0, r0, #31
1000aa68:	4328      	orrs	r0, r5
1000aa6a:	4358      	muls	r0, r3
1000aa6c:	4b19      	ldr	r3, [pc, #100]	; (1000aad4 <inv_convert_to_body_with_scale+0x94>)
1000aa6e:	0032      	movs	r2, r6
1000aa70:	4698      	mov	r8, r3
1000aa72:	17c1      	asrs	r1, r0, #31
1000aa74:	464b      	mov	r3, r9
1000aa76:	47c0      	blx	r8
                             SIGNSET(orientation & 0x004), sensitivity);
    output[1] = inv_q30_mult(input[(orientation>>3) & 0x03] *
1000aa78:	465a      	mov	r2, fp
1000aa7a:	08e3      	lsrs	r3, r4, #3
1000aa7c:	4013      	ands	r3, r2
1000aa7e:	4652      	mov	r2, sl
* @param[in] input Input vector, length 3
* @param[out] output Output vector, length 3
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
    output[0] = inv_q30_mult(input[orientation & 0x03] *
1000aa80:	0089      	lsls	r1, r1, #2
1000aa82:	0f80      	lsrs	r0, r0, #30
1000aa84:	4308      	orrs	r0, r1
1000aa86:	6038      	str	r0, [r7, #0]
                             SIGNSET(orientation & 0x004), sensitivity);
    output[1] = inv_q30_mult(input[(orientation>>3) & 0x03] *
1000aa88:	009b      	lsls	r3, r3, #2
1000aa8a:	06a0      	lsls	r0, r4, #26
1000aa8c:	589b      	ldr	r3, [r3, r2]
1000aa8e:	17c0      	asrs	r0, r0, #31
1000aa90:	4328      	orrs	r0, r5
1000aa92:	4358      	muls	r0, r3
1000aa94:	0032      	movs	r2, r6
1000aa96:	464b      	mov	r3, r9
1000aa98:	17c1      	asrs	r1, r0, #31
1000aa9a:	47c0      	blx	r8
                             SIGNSET(orientation & 0x020), sensitivity);
    output[2] = inv_q30_mult(input[(orientation>>6) & 0x03] *
1000aa9c:	465a      	mov	r2, fp
1000aa9e:	09a3      	lsrs	r3, r4, #6
1000aaa0:	4013      	ands	r3, r2
1000aaa2:	4652      	mov	r2, sl
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
    output[0] = inv_q30_mult(input[orientation & 0x03] *
                             SIGNSET(orientation & 0x004), sensitivity);
    output[1] = inv_q30_mult(input[(orientation>>3) & 0x03] *
1000aaa4:	0089      	lsls	r1, r1, #2
1000aaa6:	0f80      	lsrs	r0, r0, #30
1000aaa8:	4308      	orrs	r0, r1
1000aaaa:	6078      	str	r0, [r7, #4]
                             SIGNSET(orientation & 0x020), sensitivity);
    output[2] = inv_q30_mult(input[(orientation>>6) & 0x03] *
1000aaac:	009b      	lsls	r3, r3, #2
1000aaae:	05e4      	lsls	r4, r4, #23
1000aab0:	5898      	ldr	r0, [r3, r2]
1000aab2:	17e4      	asrs	r4, r4, #31
1000aab4:	432c      	orrs	r4, r5
1000aab6:	4360      	muls	r0, r4
1000aab8:	0032      	movs	r2, r6
1000aaba:	464b      	mov	r3, r9
1000aabc:	17c1      	asrs	r1, r0, #31
1000aabe:	47c0      	blx	r8
1000aac0:	0089      	lsls	r1, r1, #2
1000aac2:	0f80      	lsrs	r0, r0, #30
1000aac4:	4308      	orrs	r0, r1
1000aac6:	60b8      	str	r0, [r7, #8]
                             SIGNSET(orientation & 0x100), sensitivity);
}
1000aac8:	bc3c      	pop	{r2, r3, r4, r5}
1000aaca:	4690      	mov	r8, r2
1000aacc:	4699      	mov	r9, r3
1000aace:	46a2      	mov	sl, r4
1000aad0:	46ab      	mov	fp, r5
1000aad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000aad4:	100153d9 	.word	0x100153d9

1000aad8 <mlMatrixVectorMult>:
    cgcross[0] = (float)compass[1] * grav[2] - (float)compass[2] * grav[1];
    cgcross[1] = (float)compass[2] * grav[0] - (float)compass[0] * grav[2];
    cgcross[2] = (float)compass[0] * grav[1] - (float)compass[1] * grav[0];
}

void mlMatrixVectorMult(long matrix[9], const long vecIn[3], long *vecOut)  {
1000aad8:	4b16      	ldr	r3, [pc, #88]	; (1000ab34 <mlMatrixVectorMult+0x5c>)
1000aada:	b5f0      	push	{r4, r5, r6, r7, lr}
1000aadc:	4656      	mov	r6, sl
1000aade:	464d      	mov	r5, r9
1000aae0:	468a      	mov	sl, r1
1000aae2:	4699      	mov	r9, r3
1000aae4:	230c      	movs	r3, #12
1000aae6:	465f      	mov	r7, fp
1000aae8:	4644      	mov	r4, r8
1000aaea:	4453      	add	r3, sl
1000aaec:	b4f0      	push	{r4, r5, r6, r7}
1000aaee:	4683      	mov	fp, r0
1000aaf0:	2700      	movs	r7, #0
1000aaf2:	4698      	mov	r8, r3
1000aaf4:	b083      	sub	sp, #12
1000aaf6:	9201      	str	r2, [sp, #4]
1000aaf8:	465b      	mov	r3, fp
1000aafa:	4654      	mov	r4, sl
1000aafc:	2600      	movs	r6, #0
1000aafe:	19dd      	adds	r5, r3, r7
        long temp;

        for (i=0; i<3; i++)	{
                temp = 0;
                for (j=0; j<3; j++)  {
                        temp += inv_q30_mult(matrix[i+j*3], vecIn[j]);
1000ab00:	682b      	ldr	r3, [r5, #0]
1000ab02:	cc04      	ldmia	r4!, {r2}
1000ab04:	17d9      	asrs	r1, r3, #31
1000ab06:	6828      	ldr	r0, [r5, #0]
1000ab08:	17d3      	asrs	r3, r2, #31
1000ab0a:	47c8      	blx	r9
1000ab0c:	0089      	lsls	r1, r1, #2
1000ab0e:	0f80      	lsrs	r0, r0, #30
1000ab10:	4308      	orrs	r0, r1
1000ab12:	1836      	adds	r6, r6, r0
1000ab14:	350c      	adds	r5, #12
        int i, j;
        long temp;

        for (i=0; i<3; i++)	{
                temp = 0;
                for (j=0; j<3; j++)  {
1000ab16:	45a0      	cmp	r8, r4
1000ab18:	d1f2      	bne.n	1000ab00 <mlMatrixVectorMult+0x28>
                        temp += inv_q30_mult(matrix[i+j*3], vecIn[j]);
                }
                vecOut[i] = temp;
1000ab1a:	9b01      	ldr	r3, [sp, #4]
1000ab1c:	51de      	str	r6, [r3, r7]
1000ab1e:	3704      	adds	r7, #4

        // vector format:  [0  1  2]^T;
        int i, j;
        long temp;

        for (i=0; i<3; i++)	{
1000ab20:	2f0c      	cmp	r7, #12
1000ab22:	d1e9      	bne.n	1000aaf8 <mlMatrixVectorMult+0x20>
                for (j=0; j<3; j++)  {
                        temp += inv_q30_mult(matrix[i+j*3], vecIn[j]);
                }
                vecOut[i] = temp;
        }
}
1000ab24:	b003      	add	sp, #12
1000ab26:	bc3c      	pop	{r2, r3, r4, r5}
1000ab28:	4690      	mov	r8, r2
1000ab2a:	4699      	mov	r9, r3
1000ab2c:	46a2      	mov	sl, r4
1000ab2e:	46ab      	mov	fp, r5
1000ab30:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ab32:	46c0      	nop			; (mov r8, r8)
1000ab34:	100153d9 	.word	0x100153d9

1000ab38 <inv_init_mpl>:
/**
 * @brief  Initializes the MPL. Should be called first and once 
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_init_mpl(void)
{
1000ab38:	b510      	push	{r4, lr}
    inv_init_storage_manager();
1000ab3a:	4b08      	ldr	r3, [pc, #32]	; (1000ab5c <inv_init_mpl+0x24>)
1000ab3c:	4798      	blx	r3

    /* initialize the start callback manager */
    INV_ERROR_CHECK(inv_init_start_manager());
1000ab3e:	4c08      	ldr	r4, [pc, #32]	; (1000ab60 <inv_init_mpl+0x28>)
1000ab40:	47a0      	blx	r4
1000ab42:	2800      	cmp	r0, #0
1000ab44:	d107      	bne.n	1000ab56 <inv_init_mpl+0x1e>

    /* initialize the data builder */
    INV_ERROR_CHECK(inv_init_data_builder());
1000ab46:	4c07      	ldr	r4, [pc, #28]	; (1000ab64 <inv_init_mpl+0x2c>)
1000ab48:	47a0      	blx	r4
1000ab4a:	2800      	cmp	r0, #0
1000ab4c:	d103      	bne.n	1000ab56 <inv_init_mpl+0x1e>

    INV_ERROR_CHECK(inv_enable_results_holder());
1000ab4e:	4c06      	ldr	r4, [pc, #24]	; (1000ab68 <inv_init_mpl+0x30>)
1000ab50:	47a0      	blx	r4
1000ab52:	2800      	cmp	r0, #0
1000ab54:	d001      	beq.n	1000ab5a <inv_init_mpl+0x22>
1000ab56:	47a0      	blx	r4
1000ab58:	47a0      	blx	r4

    return INV_SUCCESS;
}
1000ab5a:	bd10      	pop	{r4, pc}
1000ab5c:	1000ae91 	.word	0x1000ae91
1000ab60:	1000adc5 	.word	0x1000adc5
1000ab64:	1000a0f5 	.word	0x1000a0f5
1000ab68:	1000ad75 	.word	0x1000ad75

1000ab6c <inv_start_mpl>:
 *  @brief  Starts the MPL. Typically called after inv_init_mpl() or after a
 *          inv_stop_mpl() to start the MPL back up an running.
 *  @return INV_SUCCESS if successful or a non-zero error code otherwise.
 */
inv_error_t inv_start_mpl(void)
{
1000ab6c:	b510      	push	{r4, lr}
    INV_ERROR_CHECK(inv_execute_mpl_start_notification());
1000ab6e:	4c03      	ldr	r4, [pc, #12]	; (1000ab7c <inv_start_mpl+0x10>)
1000ab70:	47a0      	blx	r4
1000ab72:	2800      	cmp	r0, #0
1000ab74:	d001      	beq.n	1000ab7a <inv_start_mpl+0xe>
1000ab76:	47a0      	blx	r4
1000ab78:	47a0      	blx	r4
    return INV_SUCCESS;
}
1000ab7a:	bd10      	pop	{r4, pc}
1000ab7c:	1000ae5d 	.word	0x1000ae5d

1000ab80 <inv_generate_results>:
 * @param[in] sensor_cal New sensor data to process.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_generate_results(struct inv_sensor_cal_t *sensor_cal)
{
    rh.sensor = sensor_cal;
1000ab80:	2380      	movs	r3, #128	; 0x80
1000ab82:	4a02      	ldr	r2, [pc, #8]	; (1000ab8c <inv_generate_results+0xc>)
1000ab84:	50d0      	str	r0, [r2, r3]
    return INV_SUCCESS;
}
1000ab86:	2000      	movs	r0, #0
1000ab88:	4770      	bx	lr
1000ab8a:	46c0      	nop			; (mov r8, r8)
1000ab8c:	1001b9a0 	.word	0x1001b9a0

1000ab90 <inv_start_results_holder>:
 *  inv_enable_results_holder(). Typically not called by users.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_start_results_holder(void)
{
    inv_register_data_cb(inv_generate_results, INV_PRIORITY_RESULTS_HOLDER,
1000ab90:	21c8      	movs	r1, #200	; 0xc8
/** Function to turn on this module. This is automatically called by
 *  inv_enable_results_holder(). Typically not called by users.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_start_results_holder(void)
{
1000ab92:	b510      	push	{r4, lr}
    inv_register_data_cb(inv_generate_results, INV_PRIORITY_RESULTS_HOLDER,
1000ab94:	2207      	movs	r2, #7
1000ab96:	0089      	lsls	r1, r1, #2
1000ab98:	4802      	ldr	r0, [pc, #8]	; (1000aba4 <inv_start_results_holder+0x14>)
1000ab9a:	4b03      	ldr	r3, [pc, #12]	; (1000aba8 <inv_start_results_holder+0x18>)
1000ab9c:	4798      	blx	r3
        INV_GYRO_NEW | INV_ACCEL_NEW | INV_MAG_NEW);
    return INV_SUCCESS;
}
1000ab9e:	2000      	movs	r0, #0
1000aba0:	bd10      	pop	{r4, pc}
1000aba2:	46c0      	nop			; (mov r8, r8)
1000aba4:	1000ab81 	.word	0x1000ab81
1000aba8:	10009cb1 	.word	0x10009cb1

1000abac <inv_store_gaming_quaternion>:
* using only gyro and accel.
* @param[in] quat Length 4, Quaternion scaled by 2^30
*/
void inv_store_gaming_quaternion(const long *quat, inv_time_t timestamp)
{
    rh.status |= INV_6_AXIS_QUAT_SET;
1000abac:	2302      	movs	r3, #2
* Store a quaternion more suitable for gaming. This quaternion is often determined
* using only gyro and accel.
* @param[in] quat Length 4, Quaternion scaled by 2^30
*/
void inv_store_gaming_quaternion(const long *quat, inv_time_t timestamp)
{
1000abae:	b570      	push	{r4, r5, r6, lr}
    rh.status |= INV_6_AXIS_QUAT_SET;
1000abb0:	4c06      	ldr	r4, [pc, #24]	; (1000abcc <inv_store_gaming_quaternion+0x20>)
* Store a quaternion more suitable for gaming. This quaternion is often determined
* using only gyro and accel.
* @param[in] quat Length 4, Quaternion scaled by 2^30
*/
void inv_store_gaming_quaternion(const long *quat, inv_time_t timestamp)
{
1000abb2:	000d      	movs	r5, r1
    rh.status |= INV_6_AXIS_QUAT_SET;
1000abb4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    memcpy(&rh.gam_quat, quat, sizeof(rh.gam_quat));
1000abb6:	0001      	movs	r1, r0
* using only gyro and accel.
* @param[in] quat Length 4, Quaternion scaled by 2^30
*/
void inv_store_gaming_quaternion(const long *quat, inv_time_t timestamp)
{
    rh.status |= INV_6_AXIS_QUAT_SET;
1000abb8:	4313      	orrs	r3, r2
1000abba:	67e3      	str	r3, [r4, #124]	; 0x7c
    memcpy(&rh.gam_quat, quat, sizeof(rh.gam_quat));
1000abbc:	0023      	movs	r3, r4
1000abbe:	3310      	adds	r3, #16
1000abc0:	2210      	movs	r2, #16
1000abc2:	0018      	movs	r0, r3
1000abc4:	4b02      	ldr	r3, [pc, #8]	; (1000abd0 <inv_store_gaming_quaternion+0x24>)
1000abc6:	4798      	blx	r3
    rh.gam_timestamp = timestamp;
1000abc8:	6265      	str	r5, [r4, #36]	; 0x24
}
1000abca:	bd70      	pop	{r4, r5, r6, pc}
1000abcc:	1001b9a0 	.word	0x1001b9a0
1000abd0:	100182cf 	.word	0x100182cf

1000abd4 <inv_set_compass_correction>:
* @param[in] data Quaternion Adjustment
* @param[in] timestamp Timestamp of when this is valid
*/
void inv_set_compass_correction(const long *data, inv_time_t timestamp)
{
    rh.status |= INV_COMPASS_CORRECTION_SET;
1000abd4:	2301      	movs	r3, #1
* Sets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
* @param[in] data Quaternion Adjustment
* @param[in] timestamp Timestamp of when this is valid
*/
void inv_set_compass_correction(const long *data, inv_time_t timestamp)
{
1000abd6:	b570      	push	{r4, r5, r6, lr}
    rh.status |= INV_COMPASS_CORRECTION_SET;
1000abd8:	4c06      	ldr	r4, [pc, #24]	; (1000abf4 <inv_set_compass_correction+0x20>)
* Sets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
* @param[in] data Quaternion Adjustment
* @param[in] timestamp Timestamp of when this is valid
*/
void inv_set_compass_correction(const long *data, inv_time_t timestamp)
{
1000abda:	000d      	movs	r5, r1
    rh.status |= INV_COMPASS_CORRECTION_SET;
1000abdc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    memcpy(rh.compass_correction, data, sizeof(rh.compass_correction));
1000abde:	0001      	movs	r1, r0
* @param[in] data Quaternion Adjustment
* @param[in] timestamp Timestamp of when this is valid
*/
void inv_set_compass_correction(const long *data, inv_time_t timestamp)
{
    rh.status |= INV_COMPASS_CORRECTION_SET;
1000abe0:	4313      	orrs	r3, r2
1000abe2:	67e3      	str	r3, [r4, #124]	; 0x7c
    memcpy(rh.compass_correction, data, sizeof(rh.compass_correction));
1000abe4:	0023      	movs	r3, r4
1000abe6:	3340      	adds	r3, #64	; 0x40
1000abe8:	2210      	movs	r2, #16
1000abea:	0018      	movs	r0, r3
1000abec:	4b02      	ldr	r3, [pc, #8]	; (1000abf8 <inv_set_compass_correction+0x24>)
1000abee:	4798      	blx	r3
    rh.nav_timestamp = timestamp;
1000abf0:	6225      	str	r5, [r4, #32]
}
1000abf2:	bd70      	pop	{r4, r5, r6, pc}
1000abf4:	1001b9a0 	.word	0x1001b9a0
1000abf8:	100182cf 	.word	0x100182cf

1000abfc <inv_get_compass_correction>:
* Gets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
* @param[out] data Quaternion Adjustment
* @param[out] timestamp Timestamp of when this is valid
*/
void inv_get_compass_correction(long *data, inv_time_t *timestamp)
{
1000abfc:	b570      	push	{r4, r5, r6, lr}
    memcpy(data, rh.compass_correction, sizeof(rh.compass_correction));
1000abfe:	4c05      	ldr	r4, [pc, #20]	; (1000ac14 <inv_get_compass_correction+0x18>)
* Gets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
* @param[out] data Quaternion Adjustment
* @param[out] timestamp Timestamp of when this is valid
*/
void inv_get_compass_correction(long *data, inv_time_t *timestamp)
{
1000ac00:	000d      	movs	r5, r1
    memcpy(data, rh.compass_correction, sizeof(rh.compass_correction));
1000ac02:	0021      	movs	r1, r4
1000ac04:	2210      	movs	r2, #16
1000ac06:	3140      	adds	r1, #64	; 0x40
1000ac08:	4b03      	ldr	r3, [pc, #12]	; (1000ac18 <inv_get_compass_correction+0x1c>)
1000ac0a:	4798      	blx	r3
    *timestamp = rh.nav_timestamp;
1000ac0c:	6a23      	ldr	r3, [r4, #32]
1000ac0e:	602b      	str	r3, [r5, #0]
}
1000ac10:	bd70      	pop	{r4, r5, r6, pc}
1000ac12:	46c0      	nop			; (mov r8, r8)
1000ac14:	1001b9a0 	.word	0x1001b9a0
1000ac18:	100182cf 	.word	0x100182cf

1000ac1c <inv_get_acc_state>:
/** Gets the accel state set by inv_set_acc_state()
 * @return accel state.
 */
int inv_get_acc_state()
{
    return rh.acc_state;
1000ac1c:	4b01      	ldr	r3, [pc, #4]	; (1000ac24 <inv_get_acc_state+0x8>)
1000ac1e:	6d18      	ldr	r0, [r3, #80]	; 0x50
}
1000ac20:	4770      	bx	lr
1000ac22:	46c0      	nop			; (mov r8, r8)
1000ac24:	1001b9a0 	.word	0x1001b9a0

1000ac28 <inv_get_motion_state>:
* @param[out] cntr Number of previous times a no motion event has occured in a row.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
int inv_get_motion_state(unsigned int *cntr)
{
    *cntr = rh.motion_state_counter;
1000ac28:	4b02      	ldr	r3, [pc, #8]	; (1000ac34 <inv_get_motion_state+0xc>)
1000ac2a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
1000ac2c:	6002      	str	r2, [r0, #0]
    return rh.motion_state;
1000ac2e:	2264      	movs	r2, #100	; 0x64
1000ac30:	5c98      	ldrb	r0, [r3, r2]
}
1000ac32:	4770      	bx	lr
1000ac34:	1001b9a0 	.word	0x1001b9a0

1000ac38 <inv_set_motion_state>:
 *            and INV_MOTION is moving.
 */
void inv_set_motion_state(unsigned char state)
{
    long set;
    if (state == rh.motion_state) {
1000ac38:	2264      	movs	r2, #100	; 0x64
/** Sets the motion state
 * @param[in] state motion state where INV_NO_MOTION is not moving
 *            and INV_MOTION is moving.
 */
void inv_set_motion_state(unsigned char state)
{
1000ac3a:	b510      	push	{r4, lr}
    long set;
    if (state == rh.motion_state) {
1000ac3c:	4b0c      	ldr	r3, [pc, #48]	; (1000ac70 <inv_set_motion_state+0x38>)
1000ac3e:	5c99      	ldrb	r1, [r3, r2]
1000ac40:	4281      	cmp	r1, r0
1000ac42:	d00c      	beq.n	1000ac5e <inv_set_motion_state+0x26>
        } else {
            rh.motion_state_counter = 0;
        }
        return;
    }
    rh.motion_state_counter = 0;
1000ac44:	2100      	movs	r1, #0
    rh.motion_state = state;
1000ac46:	5498      	strb	r0, [r3, r2]
    /* Equivalent to set = state, but #define's may change. */
    if (state == INV_MOTION)
        set = INV_MSG_MOTION_EVENT;
    else
        set = INV_MSG_NO_MOTION_EVENT;
1000ac48:	3801      	subs	r0, #1
        } else {
            rh.motion_state_counter = 0;
        }
        return;
    }
    rh.motion_state_counter = 0;
1000ac4a:	6699      	str	r1, [r3, #104]	; 0x68
    rh.motion_state = state;
    /* Equivalent to set = state, but #define's may change. */
    if (state == INV_MOTION)
        set = INV_MSG_MOTION_EVENT;
    else
        set = INV_MSG_NO_MOTION_EVENT;
1000ac4c:	4243      	negs	r3, r0
1000ac4e:	4143      	adcs	r3, r0
1000ac50:	2002      	movs	r0, #2
    inv_set_message(set, (INV_MSG_MOTION_EVENT | INV_MSG_NO_MOTION_EVENT), 0);
1000ac52:	2200      	movs	r2, #0
    rh.motion_state = state;
    /* Equivalent to set = state, but #define's may change. */
    if (state == INV_MOTION)
        set = INV_MSG_MOTION_EVENT;
    else
        set = INV_MSG_NO_MOTION_EVENT;
1000ac54:	1ac0      	subs	r0, r0, r3
    inv_set_message(set, (INV_MSG_MOTION_EVENT | INV_MSG_NO_MOTION_EVENT), 0);
1000ac56:	3103      	adds	r1, #3
1000ac58:	4b06      	ldr	r3, [pc, #24]	; (1000ac74 <inv_set_motion_state+0x3c>)
1000ac5a:	4798      	blx	r3
}
1000ac5c:	bd10      	pop	{r4, pc}
 */
void inv_set_motion_state(unsigned char state)
{
    long set;
    if (state == rh.motion_state) {
        if (state == INV_NO_MOTION) {
1000ac5e:	2902      	cmp	r1, #2
1000ac60:	d002      	beq.n	1000ac68 <inv_set_motion_state+0x30>
            rh.motion_state_counter++;
        } else {
            rh.motion_state_counter = 0;
1000ac62:	2200      	movs	r2, #0
1000ac64:	669a      	str	r2, [r3, #104]	; 0x68
1000ac66:	e7f9      	b.n	1000ac5c <inv_set_motion_state+0x24>
void inv_set_motion_state(unsigned char state)
{
    long set;
    if (state == rh.motion_state) {
        if (state == INV_NO_MOTION) {
            rh.motion_state_counter++;
1000ac68:	6e9a      	ldr	r2, [r3, #104]	; 0x68
1000ac6a:	3201      	adds	r2, #1
1000ac6c:	669a      	str	r2, [r3, #104]	; 0x68
1000ac6e:	e7f5      	b.n	1000ac5c <inv_set_motion_state+0x24>
1000ac70:	1001b9a0 	.word	0x1001b9a0
1000ac74:	1000a141 	.word	0x1000a141

1000ac78 <inv_get_local_field>:
* @param[out] data Local earth's magnetic field in uT scaled by 2^16.
*            Length = 3. Y typically points north, Z typically points down in
*                        northern hemisphere and up in southern hemisphere.
*/
void inv_get_local_field(long *data)
{
1000ac78:	b510      	push	{r4, lr}
    memcpy(data, rh.local_field, sizeof(rh.local_field));
1000ac7a:	4903      	ldr	r1, [pc, #12]	; (1000ac88 <inv_get_local_field+0x10>)
1000ac7c:	220c      	movs	r2, #12
1000ac7e:	3128      	adds	r1, #40	; 0x28
1000ac80:	4b02      	ldr	r3, [pc, #8]	; (1000ac8c <inv_get_local_field+0x14>)
1000ac82:	4798      	blx	r3
}
1000ac84:	bd10      	pop	{r4, pc}
1000ac86:	46c0      	nop			; (mov r8, r8)
1000ac88:	1001b9a0 	.word	0x1001b9a0
1000ac8c:	100182cf 	.word	0x100182cf

1000ac90 <inv_get_gravity>:
/** Gets gravity vector
 * @param[out] data gravity vector in body frame scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_gravity(long *data)
{
1000ac90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    data[0] =
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
1000ac92:	4c12      	ldr	r4, [pc, #72]	; (1000acdc <inv_get_gravity+0x4c>)
1000ac94:	4d12      	ldr	r5, [pc, #72]	; (1000ace0 <inv_get_gravity+0x50>)
/** Gets gravity vector
 * @param[out] data gravity vector in body frame scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_gravity(long *data)
{
1000ac96:	0006      	movs	r6, r0
    data[0] =
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
1000ac98:	68e1      	ldr	r1, [r4, #12]
1000ac9a:	6860      	ldr	r0, [r4, #4]
1000ac9c:	47a8      	blx	r5
1000ac9e:	6821      	ldr	r1, [r4, #0]
1000aca0:	0007      	movs	r7, r0
1000aca2:	68a0      	ldr	r0, [r4, #8]
1000aca4:	47a8      	blx	r5
 * @param[out] data gravity vector in body frame scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_gravity(long *data)
{
    data[0] =
1000aca6:	1a3f      	subs	r7, r7, r0
1000aca8:	6037      	str	r7, [r6, #0]
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
    data[1] =
        inv_q29_mult(rh.nav_quat[2], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[1], rh.nav_quat[0]);
1000acaa:	68e1      	ldr	r1, [r4, #12]
1000acac:	68a0      	ldr	r0, [r4, #8]
1000acae:	47a8      	blx	r5
1000acb0:	6821      	ldr	r1, [r4, #0]
1000acb2:	0007      	movs	r7, r0
1000acb4:	6860      	ldr	r0, [r4, #4]
1000acb6:	47a8      	blx	r5
 */
inv_error_t inv_get_gravity(long *data)
{
    data[0] =
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
    data[1] =
1000acb8:	1838      	adds	r0, r7, r0
1000acba:	6070      	str	r0, [r6, #4]
        inv_q29_mult(rh.nav_quat[2], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[1], rh.nav_quat[0]);
    data[2] =
        (inv_q29_mult(rh.nav_quat[3], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[0], rh.nav_quat[0])) -
1000acbc:	68e1      	ldr	r1, [r4, #12]
1000acbe:	0008      	movs	r0, r1
1000acc0:	47a8      	blx	r5
1000acc2:	0007      	movs	r7, r0
1000acc4:	6820      	ldr	r0, [r4, #0]
1000acc6:	0001      	movs	r1, r0
1000acc8:	47a8      	blx	r5
{
    data[0] =
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
    data[1] =
        inv_q29_mult(rh.nav_quat[2], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[1], rh.nav_quat[0]);
    data[2] =
1000acca:	23c0      	movs	r3, #192	; 0xc0
1000accc:	061b      	lsls	r3, r3, #24
1000acce:	469c      	mov	ip, r3
1000acd0:	1838      	adds	r0, r7, r0
1000acd2:	4460      	add	r0, ip
1000acd4:	60b0      	str	r0, [r6, #8]
        (inv_q29_mult(rh.nav_quat[3], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[0], rh.nav_quat[0])) -
        1073741824L;

    return INV_SUCCESS;
}
1000acd6:	2000      	movs	r0, #0
1000acd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000acda:	46c0      	nop			; (mov r8, r8)
1000acdc:	1001b9a0 	.word	0x1001b9a0
1000ace0:	1000a1a5 	.word	0x1000a1a5

1000ace4 <inv_get_linear_accel.part.0>:
 *  @param[out] data    3-element vector of accelerometer data in body frame
 *                with gravity removed
 *  @return     INV_SUCCESS if successful
 *              INV_ERROR_INVALID_PARAMETER if invalid input pointer
 */
inv_error_t inv_get_linear_accel(long *data)
1000ace4:	b510      	push	{r4, lr}
1000ace6:	0004      	movs	r4, r0
1000ace8:	b086      	sub	sp, #24
{
    long gravity[3];

    if (data != NULL)
    {
        inv_get_accel_set(data, NULL, NULL);
1000acea:	2200      	movs	r2, #0
1000acec:	2100      	movs	r1, #0
1000acee:	4b0c      	ldr	r3, [pc, #48]	; (1000ad20 <inv_get_linear_accel.part.0+0x3c>)
1000acf0:	4798      	blx	r3
        inv_get_gravity(gravity);
1000acf2:	a803      	add	r0, sp, #12
1000acf4:	4b0b      	ldr	r3, [pc, #44]	; (1000ad24 <inv_get_linear_accel.part.0+0x40>)
1000acf6:	4798      	blx	r3
        return INV_SUCCESS;
    }
    else {
        return INV_ERROR_INVALID_PARAMETER;
    }
}
1000acf8:	2000      	movs	r0, #0

    if (data != NULL)
    {
        inv_get_accel_set(data, NULL, NULL);
        inv_get_gravity(gravity);
        data[0] -= gravity[0] >> 14;
1000acfa:	9b03      	ldr	r3, [sp, #12]
1000acfc:	6822      	ldr	r2, [r4, #0]
1000acfe:	139b      	asrs	r3, r3, #14
1000ad00:	1ad3      	subs	r3, r2, r3
1000ad02:	6023      	str	r3, [r4, #0]
        data[1] -= gravity[1] >> 14;
1000ad04:	9b04      	ldr	r3, [sp, #16]
1000ad06:	6862      	ldr	r2, [r4, #4]
1000ad08:	9301      	str	r3, [sp, #4]
1000ad0a:	139b      	asrs	r3, r3, #14
1000ad0c:	1ad3      	subs	r3, r2, r3
1000ad0e:	6063      	str	r3, [r4, #4]
        data[2] -= gravity[2] >> 14;
1000ad10:	9b05      	ldr	r3, [sp, #20]
1000ad12:	68a2      	ldr	r2, [r4, #8]
1000ad14:	139b      	asrs	r3, r3, #14
1000ad16:	1ad3      	subs	r3, r2, r3
1000ad18:	60a3      	str	r3, [r4, #8]
        return INV_SUCCESS;
    }
    else {
        return INV_ERROR_INVALID_PARAMETER;
    }
}
1000ad1a:	b006      	add	sp, #24
1000ad1c:	bd10      	pop	{r4, pc}
1000ad1e:	46c0      	nop			; (mov r8, r8)
1000ad20:	10009f65 	.word	0x10009f65
1000ad24:	1000ac91 	.word	0x1000ac91

1000ad28 <inv_get_6axis_quaternion>:
/** Returns a quaternion based only on gyro and accel.
 * @param[out] data 6-axis  gyro and accel quaternion scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_6axis_quaternion(long *data)
{
1000ad28:	b510      	push	{r4, lr}
    memcpy(data, rh.gam_quat, sizeof(rh.gam_quat));
1000ad2a:	4903      	ldr	r1, [pc, #12]	; (1000ad38 <inv_get_6axis_quaternion+0x10>)
1000ad2c:	2210      	movs	r2, #16
1000ad2e:	3110      	adds	r1, #16
1000ad30:	4b02      	ldr	r3, [pc, #8]	; (1000ad3c <inv_get_6axis_quaternion+0x14>)
1000ad32:	4798      	blx	r3
    return INV_SUCCESS;
}
1000ad34:	2000      	movs	r0, #0
1000ad36:	bd10      	pop	{r4, pc}
1000ad38:	1001b9a0 	.word	0x1001b9a0
1000ad3c:	100182cf 	.word	0x100182cf

1000ad40 <inv_init_results_holder>:
* enable function inv_enable_results_holder(). It may be called any time the feature is enabled, but
* is typically not needed to be called by outside callers.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_init_results_holder(void)
{
1000ad40:	b510      	push	{r4, lr}
    memset(&rh, 0, sizeof(rh));
1000ad42:	4c09      	ldr	r4, [pc, #36]	; (1000ad68 <inv_init_results_holder+0x28>)
1000ad44:	2288      	movs	r2, #136	; 0x88
1000ad46:	2100      	movs	r1, #0
1000ad48:	0020      	movs	r0, r4
1000ad4a:	4b08      	ldr	r3, [pc, #32]	; (1000ad6c <inv_init_results_holder+0x2c>)
1000ad4c:	4798      	blx	r3
    rh.mag_scale[0] = 1L<<30;
1000ad4e:	2380      	movs	r3, #128	; 0x80
1000ad50:	05db      	lsls	r3, r3, #23
1000ad52:	6363      	str	r3, [r4, #52]	; 0x34
    rh.mag_scale[1] = 1L<<30;
1000ad54:	63a3      	str	r3, [r4, #56]	; 0x38
    rh.mag_scale[2] = 1L<<30;
1000ad56:	63e3      	str	r3, [r4, #60]	; 0x3c
    rh.compass_correction[0] = 1L<<30;
1000ad58:	6423      	str	r3, [r4, #64]	; 0x40
    rh.gam_quat[0] = 1L<<30;
1000ad5a:	6123      	str	r3, [r4, #16]
    rh.nav_quat[0] = 1L<<30;
1000ad5c:	6023      	str	r3, [r4, #0]
    rh.quat_confidence_interval = (float)M_PI;
1000ad5e:	2384      	movs	r3, #132	; 0x84
1000ad60:	4a03      	ldr	r2, [pc, #12]	; (1000ad70 <inv_init_results_holder+0x30>)
    return INV_SUCCESS;
}
1000ad62:	2000      	movs	r0, #0
    rh.mag_scale[1] = 1L<<30;
    rh.mag_scale[2] = 1L<<30;
    rh.compass_correction[0] = 1L<<30;
    rh.gam_quat[0] = 1L<<30;
    rh.nav_quat[0] = 1L<<30;
    rh.quat_confidence_interval = (float)M_PI;
1000ad64:	50e2      	str	r2, [r4, r3]
    return INV_SUCCESS;
}
1000ad66:	bd10      	pop	{r4, pc}
1000ad68:	1001b9a0 	.word	0x1001b9a0
1000ad6c:	1001830b 	.word	0x1001830b
1000ad70:	40490fdb 	.word	0x40490fdb

1000ad74 <inv_enable_results_holder>:

/** Turns on storage of results.
*/
inv_error_t inv_enable_results_holder()
{
1000ad74:	b510      	push	{r4, lr}
    inv_error_t result;
    result = inv_init_results_holder();
1000ad76:	4b04      	ldr	r3, [pc, #16]	; (1000ad88 <inv_enable_results_holder+0x14>)
1000ad78:	4798      	blx	r3
    if ( result ) {
1000ad7a:	2800      	cmp	r0, #0
1000ad7c:	d102      	bne.n	1000ad84 <inv_enable_results_holder+0x10>
        return result;
    }

    result = inv_register_mpl_start_notification(inv_start_results_holder);
1000ad7e:	4803      	ldr	r0, [pc, #12]	; (1000ad8c <inv_enable_results_holder+0x18>)
1000ad80:	4b03      	ldr	r3, [pc, #12]	; (1000ad90 <inv_enable_results_holder+0x1c>)
1000ad82:	4798      	blx	r3
    return result;
}
1000ad84:	bd10      	pop	{r4, pc}
1000ad86:	46c0      	nop			; (mov r8, r8)
1000ad88:	1000ad41 	.word	0x1000ad41
1000ad8c:	1000ab91 	.word	0x1000ab91
1000ad90:	1000ae3d 	.word	0x1000ae3d

1000ad94 <inv_got_compass_bias>:
 * @return return 1 if we know the compass bias, 0 if not.
 *            it is set with inv_set_compass_bias_found()
 */
int inv_got_compass_bias()
{
    return rh.got_compass_bias;
1000ad94:	4b01      	ldr	r3, [pc, #4]	; (1000ad9c <inv_got_compass_bias+0x8>)
1000ad96:	6f18      	ldr	r0, [r3, #112]	; 0x70
}
1000ad98:	4770      	bx	lr
1000ad9a:	46c0      	nop			; (mov r8, r8)
1000ad9c:	1001b9a0 	.word	0x1001b9a0

1000ada0 <inv_set_compass_bias_found>:
 * @param[in] state Set to 1 if we know the compass bias. 
 *            Can be retrieved with inv_got_compass_bias()
 */
void inv_set_compass_bias_found(int state)
{
    rh.got_compass_bias = state;
1000ada0:	4b01      	ldr	r3, [pc, #4]	; (1000ada8 <inv_set_compass_bias_found+0x8>)
1000ada2:	6718      	str	r0, [r3, #112]	; 0x70
}
1000ada4:	4770      	bx	lr
1000ada6:	46c0      	nop			; (mov r8, r8)
1000ada8:	1001b9a0 	.word	0x1001b9a0

1000adac <inv_get_linear_accel>:
 *                with gravity removed
 *  @return     INV_SUCCESS if successful
 *              INV_ERROR_INVALID_PARAMETER if invalid input pointer
 */
inv_error_t inv_get_linear_accel(long *data)
{
1000adac:	b510      	push	{r4, lr}
        data[1] -= gravity[1] >> 14;
        data[2] -= gravity[2] >> 14;
        return INV_SUCCESS;
    }
    else {
        return INV_ERROR_INVALID_PARAMETER;
1000adae:	2316      	movs	r3, #22
 */
inv_error_t inv_get_linear_accel(long *data)
{
    long gravity[3];

    if (data != NULL)
1000adb0:	2800      	cmp	r0, #0
1000adb2:	d002      	beq.n	1000adba <inv_get_linear_accel+0xe>
1000adb4:	4b02      	ldr	r3, [pc, #8]	; (1000adc0 <inv_get_linear_accel+0x14>)
1000adb6:	4798      	blx	r3
1000adb8:	0003      	movs	r3, r0
        return INV_SUCCESS;
    }
    else {
        return INV_ERROR_INVALID_PARAMETER;
    }
}
1000adba:	0018      	movs	r0, r3
1000adbc:	bd10      	pop	{r4, pc}
1000adbe:	46c0      	nop			; (mov r8, r8)
1000adc0:	1000ace5 	.word	0x1000ace5

1000adc4 <inv_init_start_manager>:

/** Initilize the start manager. Typically called by inv_start_mpl();
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_init_start_manager(void)
{
1000adc4:	b510      	push	{r4, lr}
    memset(&inv_start_cb, 0, sizeof(inv_start_cb));
1000adc6:	2254      	movs	r2, #84	; 0x54
1000adc8:	2100      	movs	r1, #0
1000adca:	4802      	ldr	r0, [pc, #8]	; (1000add4 <inv_init_start_manager+0x10>)
1000adcc:	4b02      	ldr	r3, [pc, #8]	; (1000add8 <inv_init_start_manager+0x14>)
1000adce:	4798      	blx	r3
    return INV_SUCCESS;
}
1000add0:	2000      	movs	r0, #0
1000add2:	bd10      	pop	{r4, pc}
1000add4:	1001ba28 	.word	0x1001ba28
1000add8:	1001830b 	.word	0x1001830b

1000addc <inv_unregister_mpl_start_notification>:
/** Removes a callback from start notification
* @param[in] start_cb function to remove from start notification
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_unregister_mpl_start_notification(inv_error_t (*start_cb)(void))
{
1000addc:	b570      	push	{r4, r5, r6, lr}
    int kk;

    for (kk=0; kk<inv_start_cb.num_cb; ++kk) {
1000adde:	4d15      	ldr	r5, [pc, #84]	; (1000ae34 <inv_unregister_mpl_start_notification+0x58>)
1000ade0:	682c      	ldr	r4, [r5, #0]
1000ade2:	2c00      	cmp	r4, #0
1000ade4:	dd0e      	ble.n	1000ae04 <inv_unregister_mpl_start_notification+0x28>
        if (inv_start_cb.start_cb[kk] == start_cb) {
1000ade6:	686b      	ldr	r3, [r5, #4]
1000ade8:	4298      	cmp	r0, r3
1000adea:	d00d      	beq.n	1000ae08 <inv_unregister_mpl_start_notification+0x2c>
1000adec:	002a      	movs	r2, r5
1000adee:	2300      	movs	r3, #0
1000adf0:	3208      	adds	r2, #8
1000adf2:	e004      	b.n	1000adfe <inv_unregister_mpl_start_notification+0x22>
1000adf4:	3204      	adds	r2, #4
1000adf6:	1f11      	subs	r1, r2, #4
1000adf8:	6809      	ldr	r1, [r1, #0]
1000adfa:	4281      	cmp	r1, r0
1000adfc:	d005      	beq.n	1000ae0a <inv_unregister_mpl_start_notification+0x2e>
*/
inv_error_t inv_unregister_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    int kk;

    for (kk=0; kk<inv_start_cb.num_cb; ++kk) {
1000adfe:	3301      	adds	r3, #1
1000ae00:	42a3      	cmp	r3, r4
1000ae02:	d1f7      	bne.n	1000adf4 <inv_unregister_mpl_start_notification+0x18>
            }
            inv_start_cb.num_cb--;
            return INV_SUCCESS;
        }
    }
    return INV_ERROR_INVALID_PARAMETER;
1000ae04:	2016      	movs	r0, #22
}
1000ae06:	bd70      	pop	{r4, r5, r6, pc}
*/
inv_error_t inv_unregister_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    int kk;

    for (kk=0; kk<inv_start_cb.num_cb; ++kk) {
1000ae08:	2300      	movs	r3, #0
        if (inv_start_cb.start_cb[kk] == start_cb) {
            // Found the match
            if (kk != (inv_start_cb.num_cb-1)) {
1000ae0a:	1e62      	subs	r2, r4, #1
1000ae0c:	429a      	cmp	r2, r3
1000ae0e:	d00d      	beq.n	1000ae2c <inv_unregister_mpl_start_notification+0x50>
                memmove(&inv_start_cb.start_cb[kk],
1000ae10:	1c59      	adds	r1, r3, #1
1000ae12:	1ae2      	subs	r2, r4, r3
1000ae14:	0089      	lsls	r1, r1, #2
1000ae16:	009b      	lsls	r3, r3, #2
1000ae18:	18eb      	adds	r3, r5, r3
1000ae1a:	3a01      	subs	r2, #1
1000ae1c:	1869      	adds	r1, r5, r1
1000ae1e:	0092      	lsls	r2, r2, #2
1000ae20:	1d18      	adds	r0, r3, #4
1000ae22:	3104      	adds	r1, #4
1000ae24:	4b04      	ldr	r3, [pc, #16]	; (1000ae38 <inv_unregister_mpl_start_notification+0x5c>)
1000ae26:	4798      	blx	r3
1000ae28:	682b      	ldr	r3, [r5, #0]
1000ae2a:	1e5a      	subs	r2, r3, #1
                    &inv_start_cb.start_cb[kk+1],
                    (inv_start_cb.num_cb-kk-1)*sizeof(inv_start_cb_func));
            }
            inv_start_cb.num_cb--;
1000ae2c:	602a      	str	r2, [r5, #0]
            return INV_SUCCESS;
1000ae2e:	2000      	movs	r0, #0
1000ae30:	e7e9      	b.n	1000ae06 <inv_unregister_mpl_start_notification+0x2a>
1000ae32:	46c0      	nop			; (mov r8, r8)
1000ae34:	1001ba28 	.word	0x1001ba28
1000ae38:	100182e1 	.word	0x100182e1

1000ae3c <inv_register_mpl_start_notification>:
*            called.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    if (inv_start_cb.num_cb >= INV_MAX_START_CB)
1000ae3c:	4a06      	ldr	r2, [pc, #24]	; (1000ae58 <inv_register_mpl_start_notification+0x1c>)
        return INV_ERROR_INVALID_PARAMETER;
1000ae3e:	2116      	movs	r1, #22
*            called.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    if (inv_start_cb.num_cb >= INV_MAX_START_CB)
1000ae40:	6813      	ldr	r3, [r2, #0]
1000ae42:	2b13      	cmp	r3, #19
1000ae44:	dd01      	ble.n	1000ae4a <inv_register_mpl_start_notification+0xe>
        return INV_ERROR_INVALID_PARAMETER;

    inv_start_cb.start_cb[inv_start_cb.num_cb] = start_cb;
    inv_start_cb.num_cb++;
    return INV_SUCCESS;
}
1000ae46:	0008      	movs	r0, r1
1000ae48:	4770      	bx	lr
inv_error_t inv_register_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    if (inv_start_cb.num_cb >= INV_MAX_START_CB)
        return INV_ERROR_INVALID_PARAMETER;

    inv_start_cb.start_cb[inv_start_cb.num_cb] = start_cb;
1000ae4a:	0099      	lsls	r1, r3, #2
1000ae4c:	1851      	adds	r1, r2, r1
    inv_start_cb.num_cb++;
1000ae4e:	3301      	adds	r3, #1
inv_error_t inv_register_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    if (inv_start_cb.num_cb >= INV_MAX_START_CB)
        return INV_ERROR_INVALID_PARAMETER;

    inv_start_cb.start_cb[inv_start_cb.num_cb] = start_cb;
1000ae50:	6048      	str	r0, [r1, #4]
    inv_start_cb.num_cb++;
1000ae52:	6013      	str	r3, [r2, #0]
    return INV_SUCCESS;
1000ae54:	2100      	movs	r1, #0
1000ae56:	e7f6      	b.n	1000ae46 <inv_register_mpl_start_notification+0xa>
1000ae58:	1001ba28 	.word	0x1001ba28

1000ae5c <inv_execute_mpl_start_notification>:
/** Callback all the functions that want to be notified when inv_start_mpl() was
* called.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_execute_mpl_start_notification(void)
{
1000ae5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    inv_error_t result,first_error;
    int kk;

    first_error = INV_SUCCESS;

    for (kk = 0; kk < inv_start_cb.num_cb; ++kk) {
1000ae5e:	4e0b      	ldr	r6, [pc, #44]	; (1000ae8c <inv_execute_mpl_start_notification+0x30>)
1000ae60:	6833      	ldr	r3, [r6, #0]
1000ae62:	2b00      	cmp	r3, #0
1000ae64:	dd10      	ble.n	1000ae88 <inv_execute_mpl_start_notification+0x2c>
1000ae66:	2400      	movs	r4, #0
1000ae68:	2700      	movs	r7, #0
1000ae6a:	1d35      	adds	r5, r6, #4
        result = inv_start_cb.start_cb[kk]();
1000ae6c:	682b      	ldr	r3, [r5, #0]
1000ae6e:	4798      	blx	r3
        if (result && (first_error == INV_SUCCESS)) {
1000ae70:	2800      	cmp	r0, #0
1000ae72:	d002      	beq.n	1000ae7a <inv_execute_mpl_start_notification+0x1e>
1000ae74:	2f00      	cmp	r7, #0
1000ae76:	d100      	bne.n	1000ae7a <inv_execute_mpl_start_notification+0x1e>
1000ae78:	0007      	movs	r7, r0
    inv_error_t result,first_error;
    int kk;

    first_error = INV_SUCCESS;

    for (kk = 0; kk < inv_start_cb.num_cb; ++kk) {
1000ae7a:	6833      	ldr	r3, [r6, #0]
1000ae7c:	3401      	adds	r4, #1
1000ae7e:	3504      	adds	r5, #4
1000ae80:	42a3      	cmp	r3, r4
1000ae82:	dcf3      	bgt.n	1000ae6c <inv_execute_mpl_start_notification+0x10>
        if (result && (first_error == INV_SUCCESS)) {
            first_error = result;
        }
    }
    return first_error;
}
1000ae84:	0038      	movs	r0, r7
1000ae86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inv_error_t inv_execute_mpl_start_notification(void)
{
    inv_error_t result,first_error;
    int kk;

    first_error = INV_SUCCESS;
1000ae88:	2700      	movs	r7, #0
1000ae8a:	e7fb      	b.n	1000ae84 <inv_execute_mpl_start_notification+0x28>
1000ae8c:	1001ba28 	.word	0x1001ba28

1000ae90 <inv_init_storage_manager>:

/** Should be called once before using any of the storage methods. Typically
* called first by inv_init_mpl().*/
void inv_init_storage_manager()
{
    memset(&ds, 0, sizeof(ds));
1000ae90:	22cc      	movs	r2, #204	; 0xcc
static struct data_storage_t ds;

/** Should be called once before using any of the storage methods. Typically
* called first by inv_init_mpl().*/
void inv_init_storage_manager()
{
1000ae92:	b510      	push	{r4, lr}
    memset(&ds, 0, sizeof(ds));
1000ae94:	4c04      	ldr	r4, [pc, #16]	; (1000aea8 <inv_init_storage_manager+0x18>)
1000ae96:	0052      	lsls	r2, r2, #1
1000ae98:	2100      	movs	r1, #0
1000ae9a:	0020      	movs	r0, r4
1000ae9c:	4b03      	ldr	r3, [pc, #12]	; (1000aeac <inv_init_storage_manager+0x1c>)
1000ae9e:	4798      	blx	r3
    ds.total_size = sizeof(struct data_header_t);
1000aea0:	230c      	movs	r3, #12
1000aea2:	6063      	str	r3, [r4, #4]
}
1000aea4:	bd10      	pop	{r4, pc}
1000aea6:	46c0      	nop			; (mov r8, r8)
1000aea8:	1001ba7c 	.word	0x1001ba7c
1000aeac:	1001830b 	.word	0x1001830b

1000aeb0 <inv_register_load_store>:
*                    The key should change when your type of data for storage changes.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_load_store(inv_error_t (*load_func)(const unsigned char *data),
                                    inv_error_t (*save_func)(unsigned char *data), size_t size, unsigned int key)
{
1000aeb0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000aeb2:	4647      	mov	r7, r8
1000aeb4:	b480      	push	{r7}
1000aeb6:	4688      	mov	r8, r1
    int kk;
    // Check if this has been registered already
    for (kk=0; kk<ds.num; ++kk) {
1000aeb8:	491b      	ldr	r1, [pc, #108]	; (1000af28 <inv_register_load_store+0x78>)
*                    The key should change when your type of data for storage changes.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_load_store(inv_error_t (*load_func)(const unsigned char *data),
                                    inv_error_t (*save_func)(unsigned char *data), size_t size, unsigned int key)
{
1000aeba:	4684      	mov	ip, r0
    int kk;
    // Check if this has been registered already
    for (kk=0; kk<ds.num; ++kk) {
1000aebc:	680f      	ldr	r7, [r1, #0]
1000aebe:	2f00      	cmp	r7, #0
1000aec0:	dd18      	ble.n	1000aef4 <inv_register_load_store+0x44>
        if (key == ds.hd[kk].key) {
1000aec2:	20b0      	movs	r0, #176	; 0xb0
1000aec4:	580c      	ldr	r4, [r1, r0]
1000aec6:	42a3      	cmp	r3, r4
1000aec8:	d012      	beq.n	1000aef0 <inv_register_load_store+0x40>
1000aeca:	000d      	movs	r5, r1
1000aecc:	2400      	movs	r4, #0
1000aece:	35bc      	adds	r5, #188	; 0xbc
1000aed0:	e005      	b.n	1000aede <inv_register_load_store+0x2e>
1000aed2:	350c      	adds	r5, #12
1000aed4:	002e      	movs	r6, r5
1000aed6:	3e0c      	subs	r6, #12
1000aed8:	6836      	ldr	r6, [r6, #0]
1000aeda:	429e      	cmp	r6, r3
1000aedc:	d008      	beq.n	1000aef0 <inv_register_load_store+0x40>
inv_error_t inv_register_load_store(inv_error_t (*load_func)(const unsigned char *data),
                                    inv_error_t (*save_func)(unsigned char *data), size_t size, unsigned int key)
{
    int kk;
    // Check if this has been registered already
    for (kk=0; kk<ds.num; ++kk) {
1000aede:	3401      	adds	r4, #1
1000aee0:	42bc      	cmp	r4, r7
1000aee2:	d1f6      	bne.n	1000aed2 <inv_register_load_store+0x22>
        if (key == ds.hd[kk].key) {
            return INV_ERROR_INVALID_PARAMETER;
1000aee4:	2016      	movs	r0, #22
        }
    }
    // Make sure there is room
    if (ds.num >= NUM_STORAGE_BOXES) {
1000aee6:	2f13      	cmp	r7, #19
1000aee8:	dd04      	ble.n	1000aef4 <inv_register_load_store+0x44>
    ds.save[ds.num] = save_func;
    ds.total_size += size + sizeof(struct data_header_t);
    ds.num++;

    return INV_SUCCESS;
}
1000aeea:	bc04      	pop	{r2}
1000aeec:	4690      	mov	r8, r2
1000aeee:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    int kk;
    // Check if this has been registered already
    for (kk=0; kk<ds.num; ++kk) {
        if (key == ds.hd[kk].key) {
            return INV_ERROR_INVALID_PARAMETER;
1000aef0:	2016      	movs	r0, #22
1000aef2:	e7fa      	b.n	1000aeea <inv_register_load_store+0x3a>
    // Make sure there is room
    if (ds.num >= NUM_STORAGE_BOXES) {
        return INV_ERROR_INVALID_PARAMETER;
    }
    // Add to list
    ds.hd[ds.num].key = key;
1000aef4:	0078      	lsls	r0, r7, #1
1000aef6:	19c0      	adds	r0, r0, r7
1000aef8:	0080      	lsls	r0, r0, #2
1000aefa:	1808      	adds	r0, r1, r0
1000aefc:	0004      	movs	r4, r0
    ds.hd[ds.num].size = size;
1000aefe:	30a8      	adds	r0, #168	; 0xa8
1000af00:	6002      	str	r2, [r0, #0]
    ds.load[ds.num] = load_func;
1000af02:	4660      	mov	r0, ip
    // Make sure there is room
    if (ds.num >= NUM_STORAGE_BOXES) {
        return INV_ERROR_INVALID_PARAMETER;
    }
    // Add to list
    ds.hd[ds.num].key = key;
1000af04:	34b0      	adds	r4, #176	; 0xb0
1000af06:	6023      	str	r3, [r4, #0]
    ds.hd[ds.num].size = size;
    ds.load[ds.num] = load_func;
1000af08:	1cbb      	adds	r3, r7, #2
1000af0a:	009b      	lsls	r3, r3, #2
1000af0c:	50c8      	str	r0, [r1, r3]
    ds.save[ds.num] = save_func;
1000af0e:	003b      	movs	r3, r7
1000af10:	4640      	mov	r0, r8
1000af12:	3316      	adds	r3, #22
1000af14:	009b      	lsls	r3, r3, #2
1000af16:	50c8      	str	r0, [r1, r3]
    ds.total_size += size + sizeof(struct data_header_t);
1000af18:	684b      	ldr	r3, [r1, #4]
    ds.num++;
1000af1a:	3701      	adds	r7, #1
    // Add to list
    ds.hd[ds.num].key = key;
    ds.hd[ds.num].size = size;
    ds.load[ds.num] = load_func;
    ds.save[ds.num] = save_func;
    ds.total_size += size + sizeof(struct data_header_t);
1000af1c:	330c      	adds	r3, #12
1000af1e:	189a      	adds	r2, r3, r2
1000af20:	604a      	str	r2, [r1, #4]
    ds.num++;
1000af22:	600f      	str	r7, [r1, #0]

    return INV_SUCCESS;
1000af24:	2000      	movs	r0, #0
1000af26:	e7e0      	b.n	1000aeea <inv_register_load_store+0x3a>
1000af28:	1001ba7c 	.word	0x1001ba7c

1000af2c <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000af2c:	78c0      	ldrb	r0, [r0, #3]
1000af2e:	2800      	cmp	r0, #0
1000af30:	d000      	beq.n	1000af34 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000af32:	20e2      	movs	r0, #226	; 0xe2
}
1000af34:	4770      	bx	lr
1000af36:	46c0      	nop			; (mov r8, r8)

1000af38 <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000af38:	2000      	movs	r0, #0
1000af3a:	4770      	bx	lr

1000af3c <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000af3c:	229b      	movs	r2, #155	; 0x9b
1000af3e:	4b20      	ldr	r3, [pc, #128]	; (1000afc0 <ble_disconnected_state_handler+0x84>)
1000af40:	0092      	lsls	r2, r2, #2
1000af42:	b5f0      	push	{r4, r5, r6, r7, lr}
1000af44:	0004      	movs	r4, r0
1000af46:	1898      	adds	r0, r3, r2
1000af48:	3a91      	subs	r2, #145	; 0x91
1000af4a:	4647      	mov	r7, r8
1000af4c:	3aff      	subs	r2, #255	; 0xff
1000af4e:	4694      	mov	ip, r2
1000af50:	3ada      	subs	r2, #218	; 0xda
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000af52:	2501      	movs	r5, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000af54:	2600      	movs	r6, #0
1000af56:	4690      	mov	r8, r2
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000af58:	b480      	push	{r7}
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
					if (ble_device_count > 0)
1000af5a:	4f1a      	ldr	r7, [pc, #104]	; (1000afc4 <ble_disconnected_state_handler+0x88>)
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000af5c:	001a      	movs	r2, r3
1000af5e:	3a56      	subs	r2, #86	; 0x56
1000af60:	8811      	ldrh	r1, [r2, #0]
1000af62:	8822      	ldrh	r2, [r4, #0]
1000af64:	4291      	cmp	r1, r2
1000af66:	d00e      	beq.n	1000af86 <ble_disconnected_state_handler+0x4a>
1000af68:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000af6a:	4283      	cmp	r3, r0
1000af6c:	d1f6      	bne.n	1000af5c <ble_disconnected_state_handler+0x20>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000af6e:	4b16      	ldr	r3, [pc, #88]	; (1000afc8 <ble_disconnected_state_handler+0x8c>)
1000af70:	4816      	ldr	r0, [pc, #88]	; (1000afcc <ble_disconnected_state_handler+0x90>)
1000af72:	4798      	blx	r3
1000af74:	8822      	ldrh	r2, [r4, #0]
1000af76:	78a1      	ldrb	r1, [r4, #2]
1000af78:	4b15      	ldr	r3, [pc, #84]	; (1000afd0 <ble_disconnected_state_handler+0x94>)
1000af7a:	4816      	ldr	r0, [pc, #88]	; (1000afd4 <ble_disconnected_state_handler+0x98>)
1000af7c:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000af7e:	2000      	movs	r0, #0
1000af80:	bc04      	pop	{r2}
1000af82:	4690      	mov	r8, r2
1000af84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000af86:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000af88:	2a05      	cmp	r2, #5
1000af8a:	d00e      	beq.n	1000afaa <ble_disconnected_state_handler+0x6e>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000af8c:	2a08      	cmp	r2, #8
1000af8e:	d00c      	beq.n	1000afaa <ble_disconnected_state_handler+0x6e>
1000af90:	2a07      	cmp	r2, #7
1000af92:	d808      	bhi.n	1000afa6 <ble_disconnected_state_handler+0x6a>
1000af94:	0029      	movs	r1, r5
1000af96:	4091      	lsls	r1, r2
1000af98:	000a      	movs	r2, r1
1000af9a:	4661      	mov	r1, ip
1000af9c:	4211      	tst	r1, r2
1000af9e:	d106      	bne.n	1000afae <ble_disconnected_state_handler+0x72>
1000afa0:	4641      	mov	r1, r8
1000afa2:	4211      	tst	r1, r2
1000afa4:	d1e0      	bne.n	1000af68 <ble_disconnected_state_handler+0x2c>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000afa6:	701e      	strb	r6, [r3, #0]
				break;				
1000afa8:	e7de      	b.n	1000af68 <ble_disconnected_state_handler+0x2c>
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000afaa:	701d      	strb	r5, [r3, #0]
1000afac:	e7dc      	b.n	1000af68 <ble_disconnected_state_handler+0x2c>
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000afae:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
1000afb0:	783a      	ldrb	r2, [r7, #0]
1000afb2:	2a00      	cmp	r2, #0
1000afb4:	d0d8      	beq.n	1000af68 <ble_disconnected_state_handler+0x2c>
					{
						ble_device_count--;
1000afb6:	783a      	ldrb	r2, [r7, #0]
1000afb8:	3a01      	subs	r2, #1
1000afba:	b2d2      	uxtb	r2, r2
1000afbc:	703a      	strb	r2, [r7, #0]
1000afbe:	e7d3      	b.n	1000af68 <ble_disconnected_state_handler+0x2c>
1000afc0:	1001d58e 	.word	0x1001d58e
1000afc4:	1001d79c 	.word	0x1001d79c
1000afc8:	10018575 	.word	0x10018575
1000afcc:	10019718 	.word	0x10019718
1000afd0:	10018455 	.word	0x10018455
1000afd4:	1001a6dc 	.word	0x1001a6dc

1000afd8 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000afd8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000afda:	4647      	mov	r7, r8
1000afdc:	b480      	push	{r7}
1000afde:	4f33      	ldr	r7, [pc, #204]	; (1000b0ac <ble_pair_done_handler+0xd4>)
1000afe0:	0006      	movs	r6, r0
1000afe2:	003b      	movs	r3, r7
1000afe4:	2400      	movs	r4, #0
1000afe6:	8845      	ldrh	r5, [r0, #2]
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000afe8:	891a      	ldrh	r2, [r3, #8]
1000afea:	42aa      	cmp	r2, r5
1000afec:	d022      	beq.n	1000b034 <ble_pair_done_handler+0x5c>
1000afee:	3401      	adds	r4, #1
1000aff0:	337c      	adds	r3, #124	; 0x7c
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000aff2:	2c05      	cmp	r4, #5
1000aff4:	d1f8      	bne.n	1000afe8 <ble_pair_done_handler+0x10>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000aff6:	7933      	ldrb	r3, [r6, #4]
1000aff8:	2b00      	cmp	r3, #0
1000affa:	d049      	beq.n	1000b090 <ble_pair_done_handler+0xb8>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000affc:	4b2c      	ldr	r3, [pc, #176]	; (1000b0b0 <ble_pair_done_handler+0xd8>)
1000affe:	5cfb      	ldrb	r3, [r7, r3]
1000b000:	2b01      	cmp	r3, #1
1000b002:	d912      	bls.n	1000b02a <ble_pair_done_handler+0x52>
			DBG_LOG("Pairing failed...Disconnecting");
1000b004:	4f2b      	ldr	r7, [pc, #172]	; (1000b0b4 <ble_pair_done_handler+0xdc>)
1000b006:	4d2c      	ldr	r5, [pc, #176]	; (1000b0b8 <ble_pair_done_handler+0xe0>)
1000b008:	0038      	movs	r0, r7
1000b00a:	47a8      	blx	r5
1000b00c:	482b      	ldr	r0, [pc, #172]	; (1000b0bc <ble_pair_done_handler+0xe4>)
1000b00e:	4c2c      	ldr	r4, [pc, #176]	; (1000b0c0 <ble_pair_done_handler+0xe8>)
1000b010:	47a0      	blx	r4
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000b012:	8870      	ldrh	r0, [r6, #2]
1000b014:	2113      	movs	r1, #19
1000b016:	4b2b      	ldr	r3, [pc, #172]	; (1000b0c4 <ble_pair_done_handler+0xec>)
1000b018:	4798      	blx	r3
1000b01a:	2800      	cmp	r0, #0
1000b01c:	d005      	beq.n	1000b02a <ble_pair_done_handler+0x52>
			{
				DBG_LOG("Disconnect Request Failed");
1000b01e:	0038      	movs	r0, r7
1000b020:	47a8      	blx	r5
1000b022:	4829      	ldr	r0, [pc, #164]	; (1000b0c8 <ble_pair_done_handler+0xf0>)
1000b024:	47a0      	blx	r4
				return AT_BLE_FAILURE;
1000b026:	25e2      	movs	r5, #226	; 0xe2
1000b028:	e000      	b.n	1000b02c <ble_pair_done_handler+0x54>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000b02a:	2500      	movs	r5, #0
}
1000b02c:	0028      	movs	r0, r5
1000b02e:	bc04      	pop	{r2}
1000b030:	4690      	mov	r8, r2
1000b032:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000b034:	001a      	movs	r2, r3
1000b036:	325e      	adds	r2, #94	; 0x5e
1000b038:	7812      	ldrb	r2, [r2, #0]
1000b03a:	2a03      	cmp	r2, #3
1000b03c:	d1d7      	bne.n	1000afee <ble_pair_done_handler+0x16>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000b03e:	7935      	ldrb	r5, [r6, #4]
1000b040:	2d00      	cmp	r5, #0
1000b042:	d1df      	bne.n	1000b004 <ble_pair_done_handler+0x2c>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000b044:	4b1c      	ldr	r3, [pc, #112]	; (1000b0b8 <ble_pair_done_handler+0xe0>)
1000b046:	481b      	ldr	r0, [pc, #108]	; (1000b0b4 <ble_pair_done_handler+0xdc>)
1000b048:	4798      	blx	r3
1000b04a:	4b1d      	ldr	r3, [pc, #116]	; (1000b0c0 <ble_pair_done_handler+0xe8>)
1000b04c:	481f      	ldr	r0, [pc, #124]	; (1000b0cc <ble_pair_done_handler+0xf4>)
1000b04e:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000b050:	0163      	lsls	r3, r4, #5
1000b052:	1b1c      	subs	r4, r3, r4
1000b054:	7832      	ldrb	r2, [r6, #0]
1000b056:	00a4      	lsls	r4, r4, #2
1000b058:	193b      	adds	r3, r7, r4
1000b05a:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000b05c:	7932      	ldrb	r2, [r6, #4]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000b05e:	0031      	movs	r1, r6
	{
		DBG_LOG("Pairing procedure completed successfully");
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000b060:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000b062:	2205      	movs	r2, #5
1000b064:	335e      	adds	r3, #94	; 0x5e
1000b066:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000b068:	1938      	adds	r0, r7, r4
1000b06a:	4b19      	ldr	r3, [pc, #100]	; (1000b0d0 <ble_pair_done_handler+0xf8>)
1000b06c:	3122      	adds	r1, #34	; 0x22
1000b06e:	320b      	adds	r2, #11
1000b070:	3036      	adds	r0, #54	; 0x36
1000b072:	4698      	mov	r8, r3
1000b074:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000b076:	0031      	movs	r1, r6
1000b078:	1938      	adds	r0, r7, r4
1000b07a:	3132      	adds	r1, #50	; 0x32
1000b07c:	2217      	movs	r2, #23
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000b07e:	193c      	adds	r4, r7, r4
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
			ble_dev_info[idx].bond_info.status = pairing_params->status;
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000b080:	3046      	adds	r0, #70	; 0x46
1000b082:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000b084:	0020      	movs	r0, r4
1000b086:	1db1      	adds	r1, r6, #6
1000b088:	221c      	movs	r2, #28
1000b08a:	301a      	adds	r0, #26
1000b08c:	47c0      	blx	r8
1000b08e:	e7cd      	b.n	1000b02c <ble_pair_done_handler+0x54>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000b090:	4e08      	ldr	r6, [pc, #32]	; (1000b0b4 <ble_pair_done_handler+0xdc>)
1000b092:	4d09      	ldr	r5, [pc, #36]	; (1000b0b8 <ble_pair_done_handler+0xe0>)
1000b094:	0030      	movs	r0, r6
1000b096:	47a8      	blx	r5
1000b098:	4c09      	ldr	r4, [pc, #36]	; (1000b0c0 <ble_pair_done_handler+0xe8>)
1000b09a:	480c      	ldr	r0, [pc, #48]	; (1000b0cc <ble_pair_done_handler+0xf4>)
1000b09c:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000b09e:	0030      	movs	r0, r6
1000b0a0:	47a8      	blx	r5
1000b0a2:	480c      	ldr	r0, [pc, #48]	; (1000b0d4 <ble_pair_done_handler+0xfc>)
1000b0a4:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000b0a6:	25e2      	movs	r5, #226	; 0xe2
1000b0a8:	e7c0      	b.n	1000b02c <ble_pair_done_handler+0x54>
1000b0aa:	46c0      	nop			; (mov r8, r8)
1000b0ac:	1001d530 	.word	0x1001d530
1000b0b0:	000002ca 	.word	0x000002ca
1000b0b4:	10019718 	.word	0x10019718
1000b0b8:	10018575 	.word	0x10018575
1000b0bc:	1001a70c 	.word	0x1001a70c
1000b0c0:	10018455 	.word	0x10018455
1000b0c4:	1000edd9 	.word	0x1000edd9
1000b0c8:	1001a72c 	.word	0x1001a72c
1000b0cc:	1001a748 	.word	0x1001a748
1000b0d0:	100182cf 	.word	0x100182cf
1000b0d4:	1001a774 	.word	0x1001a774

1000b0d8 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000b0d8:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000b0da:	2378      	movs	r3, #120	; 0x78
1000b0dc:	2201      	movs	r2, #1
1000b0de:	2101      	movs	r1, #1
1000b0e0:	4c02      	ldr	r4, [pc, #8]	; (1000b0ec <ble_conn_param_update_req+0x14>)
1000b0e2:	8800      	ldrh	r0, [r0, #0]
1000b0e4:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000b0e6:	2000      	movs	r0, #0
1000b0e8:	bd10      	pop	{r4, pc}
1000b0ea:	46c0      	nop			; (mov r8, r8)
1000b0ec:	1000edf9 	.word	0x1000edf9

1000b0f0 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000b0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b0f2:	4644      	mov	r4, r8
1000b0f4:	4656      	mov	r6, sl
1000b0f6:	465f      	mov	r7, fp
1000b0f8:	464d      	mov	r5, r9
1000b0fa:	4682      	mov	sl, r0
1000b0fc:	b4f0      	push	{r4, r5, r6, r7}
1000b0fe:	b087      	sub	sp, #28
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000b100:	ac03      	add	r4, sp, #12
1000b102:	2209      	movs	r2, #9
1000b104:	2100      	movs	r1, #0
1000b106:	4b63      	ldr	r3, [pc, #396]	; (1000b294 <ble_slave_security_request_handler+0x1a4>)
1000b108:	0020      	movs	r0, r4
1000b10a:	4798      	blx	r3
1000b10c:	4653      	mov	r3, sl
1000b10e:	8819      	ldrh	r1, [r3, #0]
1000b110:	4b61      	ldr	r3, [pc, #388]	; (1000b298 <ble_slave_security_request_handler+0x1a8>)
1000b112:	4698      	mov	r8, r3
1000b114:	0018      	movs	r0, r3
1000b116:	001a      	movs	r2, r3
1000b118:	2300      	movs	r3, #0
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b11a:	8915      	ldrh	r5, [r2, #8]
1000b11c:	428d      	cmp	r5, r1
1000b11e:	d041      	beq.n	1000b1a4 <ble_slave_security_request_handler+0xb4>
1000b120:	3301      	adds	r3, #1
1000b122:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b124:	2b05      	cmp	r3, #5
1000b126:	d1f8      	bne.n	1000b11a <ble_slave_security_request_handler+0x2a>
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000b128:	2300      	movs	r3, #0
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b12a:	8902      	ldrh	r2, [r0, #8]
1000b12c:	001f      	movs	r7, r3
1000b12e:	428a      	cmp	r2, r1
1000b130:	d056      	beq.n	1000b1e0 <ble_slave_security_request_handler+0xf0>
1000b132:	3301      	adds	r3, #1
1000b134:	307c      	adds	r0, #124	; 0x7c
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b136:	2b05      	cmp	r3, #5
1000b138:	d1f7      	bne.n	1000b12a <ble_slave_security_request_handler+0x3a>
1000b13a:	2705      	movs	r7, #5
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000b13c:	2302      	movs	r3, #2
1000b13e:	7223      	strb	r3, [r4, #8]
	features.bond = slave_sec_req->bond;
1000b140:	4653      	mov	r3, sl
1000b142:	78db      	ldrb	r3, [r3, #3]
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000b144:	4641      	mov	r1, r8
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000b146:	70a3      	strb	r3, [r4, #2]
	features.mitm_protection = true;
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000b148:	2304      	movs	r3, #4
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
	features.mitm_protection = true;
1000b14a:	2201      	movs	r2, #1
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000b14c:	7023      	strb	r3, [r4, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000b14e:	017b      	lsls	r3, r7, #5
1000b150:	9300      	str	r3, [sp, #0]
1000b152:	1bdb      	subs	r3, r3, r7
1000b154:	009b      	lsls	r3, r3, #2
1000b156:	5ccb      	ldrb	r3, [r1, r3]
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
	features.mitm_protection = true;
1000b158:	7062      	strb	r2, [r4, #1]
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000b15a:	2b02      	cmp	r3, #2
1000b15c:	d100      	bne.n	1000b160 <ble_slave_security_request_handler+0x70>
1000b15e:	e084      	b.n	1000b26a <ble_slave_security_request_handler+0x17a>
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000b160:	71a2      	strb	r2, [r4, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000b162:	71e2      	strb	r2, [r4, #7]
	}
	features.max_key_size = 16;
1000b164:	2310      	movs	r3, #16
1000b166:	7163      	strb	r3, [r4, #5]
	features.min_key_size = 16;
1000b168:	7123      	strb	r3, [r4, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000b16a:	9b00      	ldr	r3, [sp, #0]
1000b16c:	1bde      	subs	r6, r3, r7
1000b16e:	4643      	mov	r3, r8
1000b170:	00b6      	lsls	r6, r6, #2
1000b172:	199b      	adds	r3, r3, r6
1000b174:	7e1b      	ldrb	r3, [r3, #24]
1000b176:	2b40      	cmp	r3, #64	; 0x40
1000b178:	d04a      	beq.n	1000b210 <ble_slave_security_request_handler+0x120>
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000b17a:	9b00      	ldr	r3, [sp, #0]
1000b17c:	0021      	movs	r1, r4
1000b17e:	1bda      	subs	r2, r3, r7
1000b180:	4653      	mov	r3, sl
1000b182:	0092      	lsls	r2, r2, #2
1000b184:	3260      	adds	r2, #96	; 0x60
1000b186:	8818      	ldrh	r0, [r3, #0]
1000b188:	4442      	add	r2, r8
1000b18a:	2300      	movs	r3, #0
1000b18c:	4d43      	ldr	r5, [pc, #268]	; (1000b29c <ble_slave_security_request_handler+0x1ac>)
1000b18e:	47a8      	blx	r5
1000b190:	2800      	cmp	r0, #0
1000b192:	d132      	bne.n	1000b1fa <ble_slave_security_request_handler+0x10a>
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
			{
				return  AT_BLE_SUCCESS;
1000b194:	2000      	movs	r0, #0
		features.mitm_protection = false;
		DBG_LOG("Slave Security Req - Authentication Failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000b196:	b007      	add	sp, #28
1000b198:	bc3c      	pop	{r2, r3, r4, r5}
1000b19a:	4690      	mov	r8, r2
1000b19c:	4699      	mov	r9, r3
1000b19e:	46a2      	mov	sl, r4
1000b1a0:	46ab      	mov	fp, r5
1000b1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b1a4:	0015      	movs	r5, r2
1000b1a6:	355e      	adds	r5, #94	; 0x5e
1000b1a8:	782d      	ldrb	r5, [r5, #0]
1000b1aa:	2d02      	cmp	r5, #2
1000b1ac:	d1b8      	bne.n	1000b120 <ble_slave_security_request_handler+0x30>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000b1ae:	4642      	mov	r2, r8
1000b1b0:	015d      	lsls	r5, r3, #5
1000b1b2:	1ae9      	subs	r1, r5, r3
1000b1b4:	0089      	lsls	r1, r1, #2
1000b1b6:	1852      	adds	r2, r2, r1
1000b1b8:	0016      	movs	r6, r2
1000b1ba:	2706      	movs	r7, #6
1000b1bc:	365e      	adds	r6, #94	; 0x5e
1000b1be:	7037      	strb	r7, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000b1c0:	7d12      	ldrb	r2, [r2, #20]
1000b1c2:	07d6      	lsls	r6, r2, #31
1000b1c4:	d503      	bpl.n	1000b1ce <ble_slave_security_request_handler+0xde>
1000b1c6:	4656      	mov	r6, sl
1000b1c8:	78f6      	ldrb	r6, [r6, #3]
1000b1ca:	2e00      	cmp	r6, #0
1000b1cc:	d151      	bne.n	1000b272 <ble_slave_security_request_handler+0x182>
				return AT_BLE_FAILURE;
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000b1ce:	2202      	movs	r2, #2
1000b1d0:	1aeb      	subs	r3, r5, r3
1000b1d2:	009b      	lsls	r3, r3, #2
1000b1d4:	4443      	add	r3, r8
1000b1d6:	335e      	adds	r3, #94	; 0x5e
1000b1d8:	701a      	strb	r2, [r3, #0]
1000b1da:	4653      	mov	r3, sl
1000b1dc:	8819      	ldrh	r1, [r3, #0]
1000b1de:	e7a3      	b.n	1000b128 <ble_slave_security_request_handler+0x38>
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b1e0:	0002      	movs	r2, r0
1000b1e2:	325e      	adds	r2, #94	; 0x5e
1000b1e4:	7812      	ldrb	r2, [r2, #0]
1000b1e6:	2a02      	cmp	r2, #2
1000b1e8:	d1a3      	bne.n	1000b132 <ble_slave_security_request_handler+0x42>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000b1ea:	015b      	lsls	r3, r3, #5
1000b1ec:	1bdb      	subs	r3, r3, r7
1000b1ee:	009b      	lsls	r3, r3, #2
1000b1f0:	4443      	add	r3, r8
1000b1f2:	335e      	adds	r3, #94	; 0x5e
1000b1f4:	3201      	adds	r2, #1
1000b1f6:	701a      	strb	r2, [r3, #0]
			break;
1000b1f8:	e7a0      	b.n	1000b13c <ble_slave_security_request_handler+0x4c>
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
	{
		features.bond = false;
1000b1fa:	2300      	movs	r3, #0
		features.mitm_protection = false;
		DBG_LOG("Slave Security Req - Authentication Failed");
1000b1fc:	4828      	ldr	r0, [pc, #160]	; (1000b2a0 <ble_slave_security_request_handler+0x1b0>)
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
	{
		features.bond = false;
1000b1fe:	70a3      	strb	r3, [r4, #2]
		features.mitm_protection = false;
1000b200:	7063      	strb	r3, [r4, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000b202:	4b28      	ldr	r3, [pc, #160]	; (1000b2a4 <ble_slave_security_request_handler+0x1b4>)
1000b204:	4798      	blx	r3
1000b206:	4828      	ldr	r0, [pc, #160]	; (1000b2a8 <ble_slave_security_request_handler+0x1b8>)
1000b208:	4b28      	ldr	r3, [pc, #160]	; (1000b2ac <ble_slave_security_request_handler+0x1bc>)
1000b20a:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000b20c:	20e2      	movs	r0, #226	; 0xe2
1000b20e:	e7c2      	b.n	1000b196 <ble_slave_security_request_handler+0xa6>
1000b210:	4b27      	ldr	r3, [pc, #156]	; (1000b2b0 <ble_slave_security_request_handler+0x1c0>)
1000b212:	0035      	movs	r5, r6
1000b214:	4699      	mov	r9, r3
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000b216:	230f      	movs	r3, #15
1000b218:	469b      	mov	fp, r3
1000b21a:	9601      	str	r6, [sp, #4]
1000b21c:	3568      	adds	r5, #104	; 0x68
1000b21e:	3660      	adds	r6, #96	; 0x60
1000b220:	4446      	add	r6, r8
1000b222:	4445      	add	r5, r8
1000b224:	47c8      	blx	r9
1000b226:	465b      	mov	r3, fp
1000b228:	4018      	ands	r0, r3
1000b22a:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000b22c:	47c8      	blx	r9
1000b22e:	465b      	mov	r3, fp
1000b230:	4018      	ands	r0, r3
1000b232:	74b0      	strb	r0, [r6, #18]
1000b234:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000b236:	42ae      	cmp	r6, r5
1000b238:	d1f4      	bne.n	1000b224 <ble_slave_security_request_handler+0x134>
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000b23a:	230f      	movs	r3, #15
1000b23c:	469b      	mov	fp, r3
1000b23e:	9e01      	ldr	r6, [sp, #4]
1000b240:	3670      	adds	r6, #112	; 0x70
1000b242:	4446      	add	r6, r8
1000b244:	47c8      	blx	r9
1000b246:	465b      	mov	r3, fp
1000b248:	4018      	ands	r0, r3
1000b24a:	7028      	strb	r0, [r5, #0]
1000b24c:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000b24e:	42b5      	cmp	r5, r6
1000b250:	d1f8      	bne.n	1000b244 <ble_slave_security_request_handler+0x154>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000b252:	47c8      	blx	r9
1000b254:	9b00      	ldr	r3, [sp, #0]
1000b256:	1bdb      	subs	r3, r3, r7
1000b258:	009b      	lsls	r3, r3, #2
1000b25a:	4443      	add	r3, r8
1000b25c:	001a      	movs	r2, r3
1000b25e:	3270      	adds	r2, #112	; 0x70
1000b260:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000b262:	2210      	movs	r2, #16
1000b264:	337a      	adds	r3, #122	; 0x7a
1000b266:	701a      	strb	r2, [r3, #0]
1000b268:	e787      	b.n	1000b17a <ble_slave_security_request_handler+0x8a>
	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000b26a:	3301      	adds	r3, #1
1000b26c:	71a3      	strb	r3, [r4, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000b26e:	71e3      	strb	r3, [r4, #7]
1000b270:	e778      	b.n	1000b164 <ble_slave_security_request_handler+0x74>
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000b272:	4653      	mov	r3, sl
1000b274:	4441      	add	r1, r8
1000b276:	8818      	ldrh	r0, [r3, #0]
1000b278:	311a      	adds	r1, #26
1000b27a:	4b0e      	ldr	r3, [pc, #56]	; (1000b2b4 <ble_slave_security_request_handler+0x1c4>)
1000b27c:	4798      	blx	r3
1000b27e:	2800      	cmp	r0, #0
1000b280:	d100      	bne.n	1000b284 <ble_slave_security_request_handler+0x194>
1000b282:	e787      	b.n	1000b194 <ble_slave_security_request_handler+0xa4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000b284:	4b07      	ldr	r3, [pc, #28]	; (1000b2a4 <ble_slave_security_request_handler+0x1b4>)
1000b286:	4806      	ldr	r0, [pc, #24]	; (1000b2a0 <ble_slave_security_request_handler+0x1b0>)
1000b288:	4798      	blx	r3
1000b28a:	480b      	ldr	r0, [pc, #44]	; (1000b2b8 <ble_slave_security_request_handler+0x1c8>)
1000b28c:	4b07      	ldr	r3, [pc, #28]	; (1000b2ac <ble_slave_security_request_handler+0x1bc>)
1000b28e:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000b290:	20e2      	movs	r0, #226	; 0xe2
1000b292:	e780      	b.n	1000b196 <ble_slave_security_request_handler+0xa6>
1000b294:	1001830b 	.word	0x1001830b
1000b298:	1001d530 	.word	0x1001d530
1000b29c:	1000f145 	.word	0x1000f145
1000b2a0:	10019718 	.word	0x10019718
1000b2a4:	10018575 	.word	0x10018575
1000b2a8:	1001a7bc 	.word	0x1001a7bc
1000b2ac:	10018455 	.word	0x10018455
1000b2b0:	10018589 	.word	0x10018589
1000b2b4:	1000f331 	.word	0x1000f331
1000b2b8:	1001a7a4 	.word	0x1001a7a4

1000b2bc <ble_pair_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000b2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b2be:	4656      	mov	r6, sl
1000b2c0:	465f      	mov	r7, fp
1000b2c2:	464d      	mov	r5, r9
1000b2c4:	4644      	mov	r4, r8
1000b2c6:	4b45      	ldr	r3, [pc, #276]	; (1000b3dc <ble_pair_request_handler+0x120>)
1000b2c8:	b4f0      	push	{r4, r5, r6, r7}
1000b2ca:	469a      	mov	sl, r3
1000b2cc:	001a      	movs	r2, r3
1000b2ce:	2300      	movs	r3, #0
1000b2d0:	b087      	sub	sp, #28
1000b2d2:	9000      	str	r0, [sp, #0]
1000b2d4:	8800      	ldrh	r0, [r0, #0]
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b2d6:	8911      	ldrh	r1, [r2, #8]
1000b2d8:	001c      	movs	r4, r3
1000b2da:	4281      	cmp	r1, r0
1000b2dc:	d040      	beq.n	1000b360 <ble_pair_request_handler+0xa4>
1000b2de:	3301      	adds	r3, #1
1000b2e0:	327c      	adds	r2, #124	; 0x7c
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b2e2:	2b05      	cmp	r3, #5
1000b2e4:	d1f7      	bne.n	1000b2d6 <ble_pair_request_handler+0x1a>
1000b2e6:	2405      	movs	r4, #5
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = BLE_BOND_REQ;
	features.mitm_protection = BLE_MITM_REQ;
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000b2e8:	2200      	movs	r2, #0
	features.oob_avaiable = BLE_OOB_REQ;
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000b2ea:	4651      	mov	r1, sl
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000b2ec:	2302      	movs	r3, #2
1000b2ee:	af03      	add	r7, sp, #12
	features.bond = BLE_BOND_REQ;
	features.mitm_protection = BLE_MITM_REQ;
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000b2f0:	703a      	strb	r2, [r7, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000b2f2:	70fa      	strb	r2, [r7, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000b2f4:	0162      	lsls	r2, r4, #5
1000b2f6:	4690      	mov	r8, r2
1000b2f8:	1b12      	subs	r2, r2, r4
1000b2fa:	0092      	lsls	r2, r2, #2
1000b2fc:	5c8a      	ldrb	r2, [r1, r2]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000b2fe:	723b      	strb	r3, [r7, #8]
	features.bond = BLE_BOND_REQ;
1000b300:	3b01      	subs	r3, #1
1000b302:	70bb      	strb	r3, [r7, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000b304:	707b      	strb	r3, [r7, #1]
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
	features.oob_avaiable = BLE_OOB_REQ;
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000b306:	2a02      	cmp	r2, #2
1000b308:	d064      	beq.n	1000b3d4 <ble_pair_request_handler+0x118>
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000b30a:	71bb      	strb	r3, [r7, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000b30c:	71fb      	strb	r3, [r7, #7]
	}
			
	features.max_key_size = 16;
1000b30e:	2310      	movs	r3, #16
1000b310:	717b      	strb	r3, [r7, #5]
	features.min_key_size = 16;
1000b312:	713b      	strb	r3, [r7, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000b314:	4643      	mov	r3, r8
1000b316:	1b1e      	subs	r6, r3, r4
1000b318:	4653      	mov	r3, sl
1000b31a:	00b6      	lsls	r6, r6, #2
1000b31c:	199b      	adds	r3, r3, r6
1000b31e:	7e1b      	ldrb	r3, [r3, #24]
1000b320:	2b40      	cmp	r3, #64	; 0x40
1000b322:	d02a      	beq.n	1000b37a <ble_pair_request_handler+0xbe>
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000b324:	4643      	mov	r3, r8
1000b326:	1b1a      	subs	r2, r3, r4
1000b328:	0092      	lsls	r2, r2, #2
1000b32a:	9b00      	ldr	r3, [sp, #0]
1000b32c:	3260      	adds	r2, #96	; 0x60
1000b32e:	8818      	ldrh	r0, [r3, #0]
1000b330:	4452      	add	r2, sl
1000b332:	2300      	movs	r3, #0
1000b334:	0039      	movs	r1, r7
1000b336:	4c2a      	ldr	r4, [pc, #168]	; (1000b3e0 <ble_pair_request_handler+0x124>)
1000b338:	47a0      	blx	r4
1000b33a:	2800      	cmp	r0, #0
1000b33c:	d009      	beq.n	1000b352 <ble_pair_request_handler+0x96>
	{
		features.bond = false;
1000b33e:	2300      	movs	r3, #0
		features.mitm_protection = false;
		DBG_LOG("Pair Request - Authentication Failed");
1000b340:	4828      	ldr	r0, [pc, #160]	; (1000b3e4 <ble_pair_request_handler+0x128>)
	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
	{
		features.bond = false;
1000b342:	70bb      	strb	r3, [r7, #2]
		features.mitm_protection = false;
1000b344:	707b      	strb	r3, [r7, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000b346:	4b28      	ldr	r3, [pc, #160]	; (1000b3e8 <ble_pair_request_handler+0x12c>)
1000b348:	4798      	blx	r3
1000b34a:	4828      	ldr	r0, [pc, #160]	; (1000b3ec <ble_pair_request_handler+0x130>)
1000b34c:	4b28      	ldr	r3, [pc, #160]	; (1000b3f0 <ble_pair_request_handler+0x134>)
1000b34e:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000b350:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000b352:	b007      	add	sp, #28
1000b354:	bc3c      	pop	{r2, r3, r4, r5}
1000b356:	4690      	mov	r8, r2
1000b358:	4699      	mov	r9, r3
1000b35a:	46a2      	mov	sl, r4
1000b35c:	46ab      	mov	fp, r5
1000b35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b360:	0011      	movs	r1, r2
1000b362:	315e      	adds	r1, #94	; 0x5e
1000b364:	7809      	ldrb	r1, [r1, #0]
1000b366:	2902      	cmp	r1, #2
1000b368:	d1b9      	bne.n	1000b2de <ble_pair_request_handler+0x22>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000b36a:	2203      	movs	r2, #3
1000b36c:	015b      	lsls	r3, r3, #5
1000b36e:	1b1b      	subs	r3, r3, r4
1000b370:	009b      	lsls	r3, r3, #2
1000b372:	4453      	add	r3, sl
1000b374:	335e      	adds	r3, #94	; 0x5e
1000b376:	701a      	strb	r2, [r3, #0]
			break;
1000b378:	e7b6      	b.n	1000b2e8 <ble_pair_request_handler+0x2c>
1000b37a:	4b1e      	ldr	r3, [pc, #120]	; (1000b3f4 <ble_pair_request_handler+0x138>)
1000b37c:	0035      	movs	r5, r6
1000b37e:	4699      	mov	r9, r3
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000b380:	230f      	movs	r3, #15
1000b382:	469b      	mov	fp, r3
1000b384:	9601      	str	r6, [sp, #4]
1000b386:	3568      	adds	r5, #104	; 0x68
1000b388:	3660      	adds	r6, #96	; 0x60
1000b38a:	4456      	add	r6, sl
1000b38c:	4455      	add	r5, sl
1000b38e:	47c8      	blx	r9
1000b390:	465b      	mov	r3, fp
1000b392:	4018      	ands	r0, r3
1000b394:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000b396:	47c8      	blx	r9
1000b398:	465b      	mov	r3, fp
1000b39a:	4018      	ands	r0, r3
1000b39c:	74b0      	strb	r0, [r6, #18]
1000b39e:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000b3a0:	42ae      	cmp	r6, r5
1000b3a2:	d1f4      	bne.n	1000b38e <ble_pair_request_handler+0xd2>
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000b3a4:	230f      	movs	r3, #15
1000b3a6:	469b      	mov	fp, r3
1000b3a8:	9e01      	ldr	r6, [sp, #4]
1000b3aa:	3670      	adds	r6, #112	; 0x70
1000b3ac:	4456      	add	r6, sl
1000b3ae:	47c8      	blx	r9
1000b3b0:	465b      	mov	r3, fp
1000b3b2:	4018      	ands	r0, r3
1000b3b4:	7028      	strb	r0, [r5, #0]
1000b3b6:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000b3b8:	42b5      	cmp	r5, r6
1000b3ba:	d1f8      	bne.n	1000b3ae <ble_pair_request_handler+0xf2>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000b3bc:	47c8      	blx	r9
1000b3be:	4643      	mov	r3, r8
1000b3c0:	1b1b      	subs	r3, r3, r4
1000b3c2:	009b      	lsls	r3, r3, #2
1000b3c4:	4453      	add	r3, sl
1000b3c6:	001a      	movs	r2, r3
1000b3c8:	3270      	adds	r2, #112	; 0x70
1000b3ca:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000b3cc:	2210      	movs	r2, #16
1000b3ce:	337a      	adds	r3, #122	; 0x7a
1000b3d0:	701a      	strb	r2, [r3, #0]
1000b3d2:	e7a7      	b.n	1000b324 <ble_pair_request_handler+0x68>
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000b3d4:	3302      	adds	r3, #2
1000b3d6:	71bb      	strb	r3, [r7, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000b3d8:	71fb      	strb	r3, [r7, #7]
1000b3da:	e798      	b.n	1000b30e <ble_pair_request_handler+0x52>
1000b3dc:	1001d530 	.word	0x1001d530
1000b3e0:	1000f145 	.word	0x1000f145
1000b3e4:	10019718 	.word	0x10019718
1000b3e8:	10018575 	.word	0x10018575
1000b3ec:	1001a7e8 	.word	0x1001a7e8
1000b3f0:	10018455 	.word	0x10018455
1000b3f4:	10018589 	.word	0x10018589

1000b3f8 <ble_pair_key_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000b3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b3fa:	465f      	mov	r7, fp
1000b3fc:	4656      	mov	r6, sl
1000b3fe:	464d      	mov	r5, r9
1000b400:	4644      	mov	r4, r8
1000b402:	b4f0      	push	{r4, r5, r6, r7}
1000b404:	0007      	movs	r7, r0
1000b406:	b087      	sub	sp, #28
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000b408:	ac04      	add	r4, sp, #16
	return AT_BLE_SUCCESS;
}

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000b40a:	9001      	str	r0, [sp, #4]
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000b40c:	2206      	movs	r2, #6
1000b40e:	4940      	ldr	r1, [pc, #256]	; (1000b510 <ble_pair_key_request_handler+0x118>)
1000b410:	4e40      	ldr	r6, [pc, #256]	; (1000b514 <ble_pair_key_request_handler+0x11c>)
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000b412:	ad03      	add	r5, sp, #12
at_ble_status_t ble_pair_key_request_handler (void *params)
{
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000b414:	0020      	movs	r0, r4
1000b416:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000b418:	2204      	movs	r2, #4
1000b41a:	0039      	movs	r1, r7
1000b41c:	0028      	movs	r0, r5
1000b41e:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000b420:	78eb      	ldrb	r3, [r5, #3]
1000b422:	2b00      	cmp	r3, #0
1000b424:	d02e      	beq.n	1000b484 <ble_pair_key_request_handler+0x8c>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000b426:	2380      	movs	r3, #128	; 0x80
1000b428:	886a      	ldrh	r2, [r5, #2]
1000b42a:	005b      	lsls	r3, r3, #1
1000b42c:	429a      	cmp	r2, r3
1000b42e:	d00b      	beq.n	1000b448 <ble_pair_key_request_handler+0x50>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000b430:	78ab      	ldrb	r3, [r5, #2]
1000b432:	2b01      	cmp	r3, #1
1000b434:	d052      	beq.n	1000b4dc <ble_pair_key_request_handler+0xe4>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000b436:	2400      	movs	r4, #0
}
1000b438:	0020      	movs	r0, r4
1000b43a:	b007      	add	sp, #28
1000b43c:	bc3c      	pop	{r2, r3, r4, r5}
1000b43e:	4690      	mov	r8, r2
1000b440:	4699      	mov	r9, r3
1000b442:	46a2      	mov	sl, r4
1000b444:	46ab      	mov	fp, r5
1000b446:	bdf0      	pop	{r4, r5, r6, r7, pc}
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000b448:	4b33      	ldr	r3, [pc, #204]	; (1000b518 <ble_pair_key_request_handler+0x120>)
1000b44a:	0018      	movs	r0, r3
1000b44c:	469a      	mov	sl, r3
1000b44e:	4b33      	ldr	r3, [pc, #204]	; (1000b51c <ble_pair_key_request_handler+0x124>)
1000b450:	4699      	mov	r9, r3
1000b452:	4798      	blx	r3
1000b454:	4b32      	ldr	r3, [pc, #200]	; (1000b520 <ble_pair_key_request_handler+0x128>)
1000b456:	4833      	ldr	r0, [pc, #204]	; (1000b524 <ble_pair_key_request_handler+0x12c>)
1000b458:	4698      	mov	r8, r3
1000b45a:	4798      	blx	r3
1000b45c:	4e32      	ldr	r6, [pc, #200]	; (1000b528 <ble_pair_key_request_handler+0x130>)
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000b45e:	2700      	movs	r7, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000b460:	5de0      	ldrb	r0, [r4, r7]
1000b462:	3701      	adds	r7, #1
1000b464:	47b0      	blx	r6
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000b466:	2f06      	cmp	r7, #6
1000b468:	d1fa      	bne.n	1000b460 <ble_pair_key_request_handler+0x68>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000b46a:	9b01      	ldr	r3, [sp, #4]
1000b46c:	78a9      	ldrb	r1, [r5, #2]
1000b46e:	8818      	ldrh	r0, [r3, #0]
1000b470:	0022      	movs	r2, r4
1000b472:	4b2e      	ldr	r3, [pc, #184]	; (1000b52c <ble_pair_key_request_handler+0x134>)
1000b474:	4798      	blx	r3
1000b476:	2800      	cmp	r0, #0
1000b478:	d0dd      	beq.n	1000b436 <ble_pair_key_request_handler+0x3e>
          {
                  DBG_LOG("Pair-key reply failed");
1000b47a:	4650      	mov	r0, sl
1000b47c:	47c8      	blx	r9
1000b47e:	482c      	ldr	r0, [pc, #176]	; (1000b530 <ble_pair_key_request_handler+0x138>)
1000b480:	47c0      	blx	r8
1000b482:	e7d8      	b.n	1000b436 <ble_pair_key_request_handler+0x3e>
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000b484:	4b24      	ldr	r3, [pc, #144]	; (1000b518 <ble_pair_key_request_handler+0x120>)
1000b486:	0018      	movs	r0, r3
1000b488:	469a      	mov	sl, r3
1000b48a:	4b24      	ldr	r3, [pc, #144]	; (1000b51c <ble_pair_key_request_handler+0x124>)
1000b48c:	4699      	mov	r9, r3
1000b48e:	4798      	blx	r3
1000b490:	4b23      	ldr	r3, [pc, #140]	; (1000b520 <ble_pair_key_request_handler+0x128>)
1000b492:	4828      	ldr	r0, [pc, #160]	; (1000b534 <ble_pair_key_request_handler+0x13c>)
1000b494:	4698      	mov	r8, r3
1000b496:	4798      	blx	r3
1000b498:	2300      	movs	r3, #0
1000b49a:	4f27      	ldr	r7, [pc, #156]	; (1000b538 <ble_pair_key_request_handler+0x140>)
1000b49c:	469b      	mov	fp, r3
1000b49e:	e003      	b.n	1000b4a8 <ble_pair_key_request_handler+0xb0>
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000b4a0:	001a      	movs	r2, r3
1000b4a2:	3a30      	subs	r2, #48	; 0x30
1000b4a4:	2a09      	cmp	r2, #9
1000b4a6:	d921      	bls.n	1000b4ec <ble_pair_key_request_handler+0xf4>
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000b4a8:	201e      	movs	r0, #30
1000b4aa:	47b8      	blx	r7
1000b4ac:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000b4ae:	2b00      	cmp	r3, #0
1000b4b0:	d1f6      	bne.n	1000b4a0 <ble_pair_key_request_handler+0xa8>
			DBG_LOG("Pin Timeout");
1000b4b2:	4650      	mov	r0, sl
1000b4b4:	47c8      	blx	r9
1000b4b6:	4821      	ldr	r0, [pc, #132]	; (1000b53c <ble_pair_key_request_handler+0x144>)
1000b4b8:	47c0      	blx	r8
				DBG_LOG("Disconnecting ...");
1000b4ba:	4650      	mov	r0, sl
1000b4bc:	47c8      	blx	r9
1000b4be:	4820      	ldr	r0, [pc, #128]	; (1000b540 <ble_pair_key_request_handler+0x148>)
1000b4c0:	47c0      	blx	r8
				if (!(at_ble_disconnect(pair_key->handle,
1000b4c2:	9b01      	ldr	r3, [sp, #4]
1000b4c4:	2113      	movs	r1, #19
1000b4c6:	8818      	ldrh	r0, [r3, #0]
1000b4c8:	4b1e      	ldr	r3, [pc, #120]	; (1000b544 <ble_pair_key_request_handler+0x14c>)
1000b4ca:	4798      	blx	r3
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000b4cc:	24e2      	movs	r4, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000b4ce:	2800      	cmp	r0, #0
1000b4d0:	d0b2      	beq.n	1000b438 <ble_pair_key_request_handler+0x40>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000b4d2:	4650      	mov	r0, sl
1000b4d4:	47c8      	blx	r9
1000b4d6:	481c      	ldr	r0, [pc, #112]	; (1000b548 <ble_pair_key_request_handler+0x150>)
1000b4d8:	47c0      	blx	r8
1000b4da:	e7ad      	b.n	1000b438 <ble_pair_key_request_handler+0x40>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000b4dc:	4b0f      	ldr	r3, [pc, #60]	; (1000b51c <ble_pair_key_request_handler+0x124>)
1000b4de:	480e      	ldr	r0, [pc, #56]	; (1000b518 <ble_pair_key_request_handler+0x120>)
1000b4e0:	4798      	blx	r3
1000b4e2:	481a      	ldr	r0, [pc, #104]	; (1000b54c <ble_pair_key_request_handler+0x154>)
1000b4e4:	4b0e      	ldr	r3, [pc, #56]	; (1000b520 <ble_pair_key_request_handler+0x128>)
1000b4e6:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000b4e8:	2400      	movs	r4, #0
1000b4ea:	e7a5      	b.n	1000b438 <ble_pair_key_request_handler+0x40>
				}
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
1000b4ec:	465a      	mov	r2, fp
1000b4ee:	54a3      	strb	r3, [r4, r2]
			  DBG_LOG_CONT("%c", pin);
1000b4f0:	23ff      	movs	r3, #255	; 0xff
1000b4f2:	4e0d      	ldr	r6, [pc, #52]	; (1000b528 <ble_pair_key_request_handler+0x130>)
1000b4f4:	4018      	ands	r0, r3
1000b4f6:	47b0      	blx	r6
1000b4f8:	2301      	movs	r3, #1
1000b4fa:	469c      	mov	ip, r3
1000b4fc:	44e3      	add	fp, ip
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000b4fe:	465b      	mov	r3, fp
1000b500:	2b06      	cmp	r3, #6
1000b502:	d1d1      	bne.n	1000b4a8 <ble_pair_key_request_handler+0xb0>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000b504:	4650      	mov	r0, sl
1000b506:	47c8      	blx	r9
1000b508:	4811      	ldr	r0, [pc, #68]	; (1000b550 <ble_pair_key_request_handler+0x158>)
1000b50a:	47c0      	blx	r8
1000b50c:	e7a7      	b.n	1000b45e <ble_pair_key_request_handler+0x66>
1000b50e:	46c0      	nop			; (mov r8, r8)
1000b510:	1001a698 	.word	0x1001a698
1000b514:	100182cf 	.word	0x100182cf
1000b518:	10019718 	.word	0x10019718
1000b51c:	10018575 	.word	0x10018575
1000b520:	10018455 	.word	0x10018455
1000b524:	1001a858 	.word	0x1001a858
1000b528:	10018489 	.word	0x10018489
1000b52c:	1000f275 	.word	0x1000f275
1000b530:	1001a890 	.word	0x1001a890
1000b534:	1001a810 	.word	0x1001a810
1000b538:	1000c05d 	.word	0x1000c05d
1000b53c:	1001a838 	.word	0x1001a838
1000b540:	1001a844 	.word	0x1001a844
1000b544:	1000edd9 	.word	0x1000edd9
1000b548:	1001a72c 	.word	0x1001a72c
1000b54c:	1001a8a8 	.word	0x1001a8a8
1000b550:	1001a8c4 	.word	0x1001a8c4

1000b554 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000b554:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b556:	4647      	mov	r7, r8
1000b558:	4e29      	ldr	r6, [pc, #164]	; (1000b600 <ble_encryption_request_handler+0xac>)
1000b55a:	b480      	push	{r7}
1000b55c:	0031      	movs	r1, r6
1000b55e:	0007      	movs	r7, r0
1000b560:	2200      	movs	r2, #0
1000b562:	8805      	ldrh	r5, [r0, #0]
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000b564:	8908      	ldrh	r0, [r1, #8]
1000b566:	0014      	movs	r4, r2
1000b568:	42a8      	cmp	r0, r5
1000b56a:	d01c      	beq.n	1000b5a6 <ble_encryption_request_handler+0x52>
1000b56c:	3201      	adds	r2, #1
1000b56e:	317c      	adds	r1, #124	; 0x7c
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b570:	2a05      	cmp	r2, #5
1000b572:	d1f7      	bne.n	1000b564 <ble_encryption_request_handler+0x10>
1000b574:	2405      	movs	r4, #5
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000b576:	4b23      	ldr	r3, [pc, #140]	; (1000b604 <ble_encryption_request_handler+0xb0>)
1000b578:	4f23      	ldr	r7, [pc, #140]	; (1000b608 <ble_encryption_request_handler+0xb4>)
1000b57a:	4698      	mov	r8, r3
1000b57c:	0018      	movs	r0, r3
1000b57e:	47b8      	blx	r7
1000b580:	4d22      	ldr	r5, [pc, #136]	; (1000b60c <ble_encryption_request_handler+0xb8>)
1000b582:	4823      	ldr	r0, [pc, #140]	; (1000b610 <ble_encryption_request_handler+0xbc>)
1000b584:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000b586:	4640      	mov	r0, r8
1000b588:	47b8      	blx	r7
1000b58a:	4822      	ldr	r0, [pc, #136]	; (1000b614 <ble_encryption_request_handler+0xc0>)
1000b58c:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000b58e:	0163      	lsls	r3, r4, #5
1000b590:	1b1b      	subs	r3, r3, r4
1000b592:	009b      	lsls	r3, r3, #2
1000b594:	18f3      	adds	r3, r6, r3
1000b596:	8918      	ldrh	r0, [r3, #8]
1000b598:	2105      	movs	r1, #5
1000b59a:	4b1f      	ldr	r3, [pc, #124]	; (1000b618 <ble_encryption_request_handler+0xc4>)
1000b59c:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000b59e:	20e2      	movs	r0, #226	; 0xe2
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
}
1000b5a0:	bc04      	pop	{r2}
1000b5a2:	4690      	mov	r8, r2
1000b5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000b5a6:	000b      	movs	r3, r1
1000b5a8:	335e      	adds	r3, #94	; 0x5e
1000b5aa:	781b      	ldrb	r3, [r3, #0]
1000b5ac:	2b01      	cmp	r3, #1
1000b5ae:	d9dd      	bls.n	1000b56c <ble_encryption_request_handler+0x18>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000b5b0:	0155      	lsls	r5, r2, #5
1000b5b2:	1aad      	subs	r5, r5, r2
1000b5b4:	2206      	movs	r2, #6
1000b5b6:	00ad      	lsls	r5, r5, #2
1000b5b8:	1973      	adds	r3, r6, r5
1000b5ba:	4698      	mov	r8, r3
1000b5bc:	335e      	adds	r3, #94	; 0x5e
1000b5be:	701a      	strb	r2, [r3, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000b5c0:	8a5a      	ldrh	r2, [r3, #18]
1000b5c2:	887b      	ldrh	r3, [r7, #2]
1000b5c4:	429a      	cmp	r2, r3
1000b5c6:	d1d6      	bne.n	1000b576 <ble_encryption_request_handler+0x22>
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000b5c8:	1971      	adds	r1, r6, r5
1000b5ca:	3172      	adds	r1, #114	; 0x72
1000b5cc:	1d38      	adds	r0, r7, #4
1000b5ce:	2208      	movs	r2, #8
1000b5d0:	4b12      	ldr	r3, [pc, #72]	; (1000b61c <ble_encryption_request_handler+0xc8>)
1000b5d2:	4798      	blx	r3
1000b5d4:	2800      	cmp	r0, #0
1000b5d6:	d1ce      	bne.n	1000b576 <ble_encryption_request_handler+0x22>
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000b5d8:	002b      	movs	r3, r5
1000b5da:	4642      	mov	r2, r8
1000b5dc:	3360      	adds	r3, #96	; 0x60
1000b5de:	7d11      	ldrb	r1, [r2, #20]
1000b5e0:	199b      	adds	r3, r3, r6
1000b5e2:	8838      	ldrh	r0, [r7, #0]
1000b5e4:	2201      	movs	r2, #1
1000b5e6:	4c0e      	ldr	r4, [pc, #56]	; (1000b620 <ble_encryption_request_handler+0xcc>)
1000b5e8:	47a0      	blx	r4
1000b5ea:	2800      	cmp	r0, #0
1000b5ec:	d0d8      	beq.n	1000b5a0 <ble_encryption_request_handler+0x4c>
	{
		DBG_LOG("Encryption Request Reply Failed");
1000b5ee:	4b06      	ldr	r3, [pc, #24]	; (1000b608 <ble_encryption_request_handler+0xb4>)
1000b5f0:	4804      	ldr	r0, [pc, #16]	; (1000b604 <ble_encryption_request_handler+0xb0>)
1000b5f2:	4798      	blx	r3
1000b5f4:	480b      	ldr	r0, [pc, #44]	; (1000b624 <ble_encryption_request_handler+0xd0>)
1000b5f6:	4b05      	ldr	r3, [pc, #20]	; (1000b60c <ble_encryption_request_handler+0xb8>)
1000b5f8:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000b5fa:	2000      	movs	r0, #0
1000b5fc:	e7d0      	b.n	1000b5a0 <ble_encryption_request_handler+0x4c>
1000b5fe:	46c0      	nop			; (mov r8, r8)
1000b600:	1001d530 	.word	0x1001d530
1000b604:	10019718 	.word	0x10019718
1000b608:	10018575 	.word	0x10018575
1000b60c:	10018455 	.word	0x10018455
1000b610:	1001a8d8 	.word	0x1001a8d8
1000b614:	1001a910 	.word	0x1001a910
1000b618:	1000edd9 	.word	0x1000edd9
1000b61c:	100182b1 	.word	0x100182b1
1000b620:	1000f3a9 	.word	0x1000f3a9
1000b624:	1001a968 	.word	0x1001a968

1000b628 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000b628:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000b62a:	7800      	ldrb	r0, [r0, #0]
1000b62c:	2800      	cmp	r0, #0
1000b62e:	d006      	beq.n	1000b63e <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000b630:	4b03      	ldr	r3, [pc, #12]	; (1000b640 <ble_scan_report_handler+0x18>)
1000b632:	4804      	ldr	r0, [pc, #16]	; (1000b644 <ble_scan_report_handler+0x1c>)
1000b634:	4798      	blx	r3
1000b636:	4804      	ldr	r0, [pc, #16]	; (1000b648 <ble_scan_report_handler+0x20>)
1000b638:	4b04      	ldr	r3, [pc, #16]	; (1000b64c <ble_scan_report_handler+0x24>)
1000b63a:	4798      	blx	r3
1000b63c:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_FAILURE;
}
1000b63e:	bd10      	pop	{r4, pc}
1000b640:	10018575 	.word	0x10018575
1000b644:	10019718 	.word	0x10019718
1000b648:	1001a988 	.word	0x1001a988
1000b64c:	10018455 	.word	0x10018455

1000b650 <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000b650:	b510      	push	{r4, lr}
1000b652:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000b654:	78c0      	ldrb	r0, [r0, #3]
1000b656:	2800      	cmp	r0, #0
1000b658:	d008      	beq.n	1000b66c <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000b65a:	4b05      	ldr	r3, [pc, #20]	; (1000b670 <ble_mtu_changed_cmd_complete_handler+0x20>)
1000b65c:	4805      	ldr	r0, [pc, #20]	; (1000b674 <ble_mtu_changed_cmd_complete_handler+0x24>)
1000b65e:	4798      	blx	r3
1000b660:	78a2      	ldrb	r2, [r4, #2]
1000b662:	8821      	ldrh	r1, [r4, #0]
1000b664:	4804      	ldr	r0, [pc, #16]	; (1000b678 <ble_mtu_changed_cmd_complete_handler+0x28>)
1000b666:	4b05      	ldr	r3, [pc, #20]	; (1000b67c <ble_mtu_changed_cmd_complete_handler+0x2c>)
1000b668:	4798      	blx	r3
1000b66a:	20e2      	movs	r0, #226	; 0xe2
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
}
1000b66c:	bd10      	pop	{r4, pc}
1000b66e:	46c0      	nop			; (mov r8, r8)
1000b670:	10018575 	.word	0x10018575
1000b674:	10019718 	.word	0x10019718
1000b678:	1001a99c 	.word	0x1001a99c
1000b67c:	10018455 	.word	0x10018455

1000b680 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000b680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b682:	4d25      	ldr	r5, [pc, #148]	; (1000b718 <ble_encryption_status_change_handler+0x98>)
1000b684:	2400      	movs	r4, #0
1000b686:	002b      	movs	r3, r5
1000b688:	0007      	movs	r7, r0
1000b68a:	8800      	ldrh	r0, [r0, #0]
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000b68c:	891a      	ldrh	r2, [r3, #8]
1000b68e:	0021      	movs	r1, r4
1000b690:	4282      	cmp	r2, r0
1000b692:	d018      	beq.n	1000b6c6 <ble_encryption_status_change_handler+0x46>
1000b694:	3401      	adds	r4, #1
1000b696:	337c      	adds	r3, #124	; 0x7c
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b698:	2c05      	cmp	r4, #5
1000b69a:	d1f7      	bne.n	1000b68c <ble_encryption_status_change_handler+0xc>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000b69c:	78be      	ldrb	r6, [r7, #2]
1000b69e:	2e00      	cmp	r6, #0
1000b6a0:	d02c      	beq.n	1000b6fc <ble_encryption_status_change_handler+0x7c>
1000b6a2:	2105      	movs	r1, #5
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000b6a4:	014b      	lsls	r3, r1, #5
1000b6a6:	1a5c      	subs	r4, r3, r1
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000b6a8:	2307      	movs	r3, #7
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000b6aa:	00a4      	lsls	r4, r4, #2
1000b6ac:	192c      	adds	r4, r5, r4
1000b6ae:	7626      	strb	r6, [r4, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000b6b0:	345e      	adds	r4, #94	; 0x5e
1000b6b2:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000b6b4:	4819      	ldr	r0, [pc, #100]	; (1000b71c <ble_encryption_status_change_handler+0x9c>)
1000b6b6:	4b1a      	ldr	r3, [pc, #104]	; (1000b720 <ble_encryption_status_change_handler+0xa0>)
1000b6b8:	4798      	blx	r3
1000b6ba:	481a      	ldr	r0, [pc, #104]	; (1000b724 <ble_encryption_status_change_handler+0xa4>)
1000b6bc:	4b1a      	ldr	r3, [pc, #104]	; (1000b728 <ble_encryption_status_change_handler+0xa8>)
1000b6be:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000b6c0:	26e2      	movs	r6, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000b6c2:	0030      	movs	r0, r6
1000b6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000b6c6:	001a      	movs	r2, r3
1000b6c8:	325e      	adds	r2, #94	; 0x5e
1000b6ca:	7812      	ldrb	r2, [r2, #0]
1000b6cc:	2a06      	cmp	r2, #6
1000b6ce:	d1e1      	bne.n	1000b694 <ble_encryption_status_change_handler+0x14>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000b6d0:	78be      	ldrb	r6, [r7, #2]
1000b6d2:	2e00      	cmp	r6, #0
1000b6d4:	d1e6      	bne.n	1000b6a4 <ble_encryption_status_change_handler+0x24>
	{
		DBG_LOG("Encryption completed successfully");
1000b6d6:	4b12      	ldr	r3, [pc, #72]	; (1000b720 <ble_encryption_status_change_handler+0xa0>)
1000b6d8:	4810      	ldr	r0, [pc, #64]	; (1000b71c <ble_encryption_status_change_handler+0x9c>)
1000b6da:	4798      	blx	r3
1000b6dc:	4b12      	ldr	r3, [pc, #72]	; (1000b728 <ble_encryption_status_change_handler+0xa8>)
1000b6de:	4813      	ldr	r0, [pc, #76]	; (1000b72c <ble_encryption_status_change_handler+0xac>)
1000b6e0:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000b6e2:	0163      	lsls	r3, r4, #5
1000b6e4:	1b1c      	subs	r4, r3, r4
1000b6e6:	00a4      	lsls	r4, r4, #2
1000b6e8:	192c      	adds	r4, r5, r4
1000b6ea:	0023      	movs	r3, r4
1000b6ec:	2208      	movs	r2, #8
1000b6ee:	335e      	adds	r3, #94	; 0x5e
1000b6f0:	701a      	strb	r2, [r3, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000b6f2:	78fb      	ldrb	r3, [r7, #3]
1000b6f4:	7523      	strb	r3, [r4, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000b6f6:	78bb      	ldrb	r3, [r7, #2]
1000b6f8:	7623      	strb	r3, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000b6fa:	e7e2      	b.n	1000b6c2 <ble_encryption_status_change_handler+0x42>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000b6fc:	4e07      	ldr	r6, [pc, #28]	; (1000b71c <ble_encryption_status_change_handler+0x9c>)
1000b6fe:	4d08      	ldr	r5, [pc, #32]	; (1000b720 <ble_encryption_status_change_handler+0xa0>)
1000b700:	0030      	movs	r0, r6
1000b702:	47a8      	blx	r5
1000b704:	4c08      	ldr	r4, [pc, #32]	; (1000b728 <ble_encryption_status_change_handler+0xa8>)
1000b706:	4809      	ldr	r0, [pc, #36]	; (1000b72c <ble_encryption_status_change_handler+0xac>)
1000b708:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000b70a:	0030      	movs	r0, r6
1000b70c:	47a8      	blx	r5
1000b70e:	4808      	ldr	r0, [pc, #32]	; (1000b730 <ble_encryption_status_change_handler+0xb0>)
1000b710:	47a0      	blx	r4
1000b712:	26e2      	movs	r6, #226	; 0xe2
1000b714:	e7d5      	b.n	1000b6c2 <ble_encryption_status_change_handler+0x42>
1000b716:	46c0      	nop			; (mov r8, r8)
1000b718:	1001d530 	.word	0x1001d530
1000b71c:	10019718 	.word	0x10019718
1000b720:	10018575 	.word	0x10018575
1000b724:	1001a9d4 	.word	0x1001a9d4
1000b728:	10018455 	.word	0x10018455
1000b72c:	1001a9e8 	.word	0x1001a9e8
1000b730:	1001aa0c 	.word	0x1001aa0c

1000b734 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000b734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000b736:	4c15      	ldr	r4, [pc, #84]	; (1000b78c <ble_scan_info_handler+0x58>)
1000b738:	7823      	ldrb	r3, [r4, #0]
1000b73a:	2b13      	cmp	r3, #19
1000b73c:	d90d      	bls.n	1000b75a <ble_scan_info_handler+0x26>
		scan_response_count++;
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000b73e:	4f14      	ldr	r7, [pc, #80]	; (1000b790 <ble_scan_info_handler+0x5c>)
1000b740:	4e14      	ldr	r6, [pc, #80]	; (1000b794 <ble_scan_info_handler+0x60>)
1000b742:	0038      	movs	r0, r7
1000b744:	47b0      	blx	r6
1000b746:	4814      	ldr	r0, [pc, #80]	; (1000b798 <ble_scan_info_handler+0x64>)
1000b748:	4d14      	ldr	r5, [pc, #80]	; (1000b79c <ble_scan_info_handler+0x68>)
1000b74a:	47a8      	blx	r5
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000b74c:	4b14      	ldr	r3, [pc, #80]	; (1000b7a0 <ble_scan_info_handler+0x6c>)
1000b74e:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000b750:	24e2      	movs	r4, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000b752:	2800      	cmp	r0, #0
1000b754:	d115      	bne.n	1000b782 <ble_scan_info_handler+0x4e>
		}
	
		#endif
		return AT_BLE_FAILURE;
	}
}
1000b756:	0020      	movs	r0, r4
1000b758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000b75a:	7823      	ldrb	r3, [r4, #0]
1000b75c:	0001      	movs	r1, r0
1000b75e:	b2db      	uxtb	r3, r3
1000b760:	009a      	lsls	r2, r3, #2
1000b762:	18d2      	adds	r2, r2, r3
1000b764:	00d2      	lsls	r2, r2, #3
1000b766:	18d3      	adds	r3, r2, r3
1000b768:	4a0e      	ldr	r2, [pc, #56]	; (1000b7a4 <ble_scan_info_handler+0x70>)
1000b76a:	189b      	adds	r3, r3, r2
1000b76c:	0018      	movs	r0, r3
1000b76e:	2229      	movs	r2, #41	; 0x29
1000b770:	4b0d      	ldr	r3, [pc, #52]	; (1000b7a8 <ble_scan_info_handler+0x74>)
1000b772:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000b774:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000b776:	7823      	ldrb	r3, [r4, #0]
1000b778:	3301      	adds	r3, #1
1000b77a:	b2db      	uxtb	r3, r3
1000b77c:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
1000b77e:	2400      	movs	r4, #0
1000b780:	e7e9      	b.n	1000b756 <ble_scan_info_handler+0x22>
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
		{
			DBG_LOG("Failed to stop scanning");
1000b782:	0038      	movs	r0, r7
1000b784:	47b0      	blx	r6
1000b786:	4809      	ldr	r0, [pc, #36]	; (1000b7ac <ble_scan_info_handler+0x78>)
1000b788:	47a8      	blx	r5
1000b78a:	e7e4      	b.n	1000b756 <ble_scan_info_handler+0x22>
1000b78c:	1001d018 	.word	0x1001d018
1000b790:	10019718 	.word	0x10019718
1000b794:	10018575 	.word	0x10018575
1000b798:	1001aa34 	.word	0x1001aa34
1000b79c:	10018455 	.word	0x10018455
1000b7a0:	1000edb9 	.word	0x1000edb9
1000b7a4:	1001d814 	.word	0x1001d814
1000b7a8:	100182cf 	.word	0x100182cf
1000b7ac:	1001aa6c 	.word	0x1001aa6c

1000b7b0 <ble_mtu_changed_indication_handler>:
1000b7b0:	2000      	movs	r0, #0
1000b7b2:	4770      	bx	lr

1000b7b4 <ble_undefined_event_handler>:
1000b7b4:	2000      	movs	r0, #0
1000b7b6:	4770      	bx	lr

1000b7b8 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000b7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b7ba:	465f      	mov	r7, fp
1000b7bc:	4656      	mov	r6, sl
1000b7be:	464d      	mov	r5, r9
1000b7c0:	4644      	mov	r4, r8
1000b7c2:	b4f0      	push	{r4, r5, r6, r7}
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000b7c4:	2700      	movs	r7, #0
1000b7c6:	4b82      	ldr	r3, [pc, #520]	; (1000b9d0 <ble_device_init+0x218>)
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000b7c8:	b091      	sub	sp, #68	; 0x44
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000b7ca:	601f      	str	r7, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000b7cc:	2207      	movs	r2, #7
1000b7ce:	2100      	movs	r1, #0
1000b7d0:	4b80      	ldr	r3, [pc, #512]	; (1000b9d4 <ble_device_init+0x21c>)
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000b7d2:	0006      	movs	r6, r0

static void init_global_var(void)
{
	ble_user_event_cb = 0;
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000b7d4:	4880      	ldr	r0, [pc, #512]	; (1000b9d8 <ble_device_init+0x220>)
1000b7d6:	4798      	blx	r3
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000b7d8:	2212      	movs	r2, #18
1000b7da:	2100      	movs	r1, #0
1000b7dc:	4b7d      	ldr	r3, [pc, #500]	; (1000b9d4 <ble_device_init+0x21c>)
1000b7de:	487f      	ldr	r0, [pc, #508]	; (1000b9dc <ble_device_init+0x224>)
1000b7e0:	4798      	blx	r3
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
#endif

	scan_response_count = 0;
	memset(scan_info, 0, sizeof(scan_info));
1000b7e2:	22cd      	movs	r2, #205	; 0xcd
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
#endif

	scan_response_count = 0;
1000b7e4:	4b7e      	ldr	r3, [pc, #504]	; (1000b9e0 <ble_device_init+0x228>)
	memset(scan_info, 0, sizeof(scan_info));
1000b7e6:	0092      	lsls	r2, r2, #2
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
#endif

	scan_response_count = 0;
1000b7e8:	701f      	strb	r7, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000b7ea:	2100      	movs	r1, #0
1000b7ec:	4b79      	ldr	r3, [pc, #484]	; (1000b9d4 <ble_device_init+0x21c>)
1000b7ee:	487d      	ldr	r0, [pc, #500]	; (1000b9e4 <ble_device_init+0x22c>)
1000b7f0:	4798      	blx	r3

	event = AT_BLE_UNDEFINED_EVENT;
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000b7f2:	2283      	movs	r2, #131	; 0x83
#endif

	scan_response_count = 0;
	memset(scan_info, 0, sizeof(scan_info));

	event = AT_BLE_UNDEFINED_EVENT;
1000b7f4:	4b7c      	ldr	r3, [pc, #496]	; (1000b9e8 <ble_device_init+0x230>)
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000b7f6:	0092      	lsls	r2, r2, #2
#endif

	scan_response_count = 0;
	memset(scan_info, 0, sizeof(scan_info));

	event = AT_BLE_UNDEFINED_EVENT;
1000b7f8:	701f      	strb	r7, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000b7fa:	2100      	movs	r1, #0
1000b7fc:	4b75      	ldr	r3, [pc, #468]	; (1000b9d4 <ble_device_init+0x21c>)
1000b7fe:	487b      	ldr	r0, [pc, #492]	; (1000b9ec <ble_device_init+0x234>)
1000b800:	4798      	blx	r3
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000b802:	4b7b      	ldr	r3, [pc, #492]	; (1000b9f0 <ble_device_init+0x238>)
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000b804:	2480      	movs	r4, #128	; 0x80
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000b806:	469a      	mov	sl, r3
1000b808:	2380      	movs	r3, #128	; 0x80
1000b80a:	00db      	lsls	r3, r3, #3
1000b80c:	4699      	mov	r9, r3
1000b80e:	001a      	movs	r2, r3
1000b810:	2100      	movs	r1, #0
1000b812:	4650      	mov	r0, sl
1000b814:	4b6f      	ldr	r3, [pc, #444]	; (1000b9d4 <ble_device_init+0x21c>)
1000b816:	4798      	blx	r3
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000b818:	4d76      	ldr	r5, [pc, #472]	; (1000b9f4 <ble_device_init+0x23c>)
1000b81a:	0164      	lsls	r4, r4, #5
1000b81c:	0022      	movs	r2, r4
1000b81e:	2100      	movs	r1, #0
1000b820:	0028      	movs	r0, r5
1000b822:	4b6c      	ldr	r3, [pc, #432]	; (1000b9d4 <ble_device_init+0x21c>)
1000b824:	4798      	blx	r3

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000b826:	4b74      	ldr	r3, [pc, #464]	; (1000b9f8 <ble_device_init+0x240>)
1000b828:	221c      	movs	r2, #28
1000b82a:	469b      	mov	fp, r3
1000b82c:	0018      	movs	r0, r3
1000b82e:	2100      	movs	r1, #0
1000b830:	4b68      	ldr	r3, [pc, #416]	; (1000b9d4 <ble_device_init+0x21c>)
1000b832:	4798      	blx	r3

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000b834:	465b      	mov	r3, fp
1000b836:	4652      	mov	r2, sl
1000b838:	609a      	str	r2, [r3, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000b83a:	464a      	mov	r2, r9
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000b83c:	611d      	str	r5, [r3, #16]
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));

	memset(&pf_cfg, 0, sizeof(pf_cfg));

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000b83e:	60da      	str	r2, [r3, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000b840:	615c      	str	r4, [r3, #20]
		ble_mgr_gap_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000b842:	4b6e      	ldr	r3, [pc, #440]	; (1000b9fc <ble_device_init+0x244>)
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000b844:	4d6e      	ldr	r5, [pc, #440]	; (1000ba00 <ble_device_init+0x248>)
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000b846:	601f      	str	r7, [r3, #0]
1000b848:	605f      	str	r7, [r3, #4]
1000b84a:	609f      	str	r7, [r3, #8]
1000b84c:	60df      	str	r7, [r3, #12]
1000b84e:	611f      	str	r7, [r3, #16]
		ble_mgr_gatt_server_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000b850:	4b6c      	ldr	r3, [pc, #432]	; (1000ba04 <ble_device_init+0x24c>)
		ble_mgr_gatt_client_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000b852:	4c6d      	ldr	r4, [pc, #436]	; (1000ba08 <ble_device_init+0x250>)
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000b854:	601f      	str	r7, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000b856:	4b6d      	ldr	r3, [pc, #436]	; (1000ba0c <ble_device_init+0x254>)
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000b858:	602f      	str	r7, [r5, #0]
		ble_mgr_l2cap_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000b85a:	601f      	str	r7, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000b85c:	4b6c      	ldr	r3, [pc, #432]	; (1000ba10 <ble_device_init+0x258>)
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000b85e:	606f      	str	r7, [r5, #4]
1000b860:	60af      	str	r7, [r5, #8]
1000b862:	60ef      	str	r7, [r5, #12]
1000b864:	612f      	str	r7, [r5, #16]
		ble_mgr_gatt_client_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000b866:	6027      	str	r7, [r4, #0]
1000b868:	6067      	str	r7, [r4, #4]
1000b86a:	60a7      	str	r7, [r4, #8]
1000b86c:	60e7      	str	r7, [r4, #12]
1000b86e:	6127      	str	r7, [r4, #16]
		ble_mgr_htpt_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000b870:	601f      	str	r7, [r3, #0]
1000b872:	605f      	str	r7, [r3, #4]
1000b874:	609f      	str	r7, [r3, #8]
1000b876:	60df      	str	r7, [r3, #12]
1000b878:	611f      	str	r7, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000b87a:	4b66      	ldr	r3, [pc, #408]	; (1000ba14 <ble_device_init+0x25c>)
1000b87c:	601f      	str	r7, [r3, #0]
1000b87e:	4b66      	ldr	r3, [pc, #408]	; (1000ba18 <ble_device_init+0x260>)
1000b880:	4698      	mov	r8, r3
1000b882:	239b      	movs	r3, #155	; 0x9b
1000b884:	009b      	lsls	r3, r3, #2
1000b886:	4443      	add	r3, r8
1000b888:	469a      	mov	sl, r3
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000b88a:	2340      	movs	r3, #64	; 0x40
1000b88c:	4699      	mov	r9, r3
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000b88e:	227c      	movs	r2, #124	; 0x7c
1000b890:	2100      	movs	r1, #0
1000b892:	4640      	mov	r0, r8
1000b894:	4b4f      	ldr	r3, [pc, #316]	; (1000b9d4 <ble_device_init+0x21c>)
1000b896:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000b898:	4642      	mov	r2, r8
1000b89a:	2300      	movs	r3, #0
1000b89c:	325e      	adds	r2, #94	; 0x5e
1000b89e:	7013      	strb	r3, [r2, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000b8a0:	4649      	mov	r1, r9
1000b8a2:	4642      	mov	r2, r8
1000b8a4:	7611      	strb	r1, [r2, #24]
1000b8a6:	227c      	movs	r2, #124	; 0x7c
1000b8a8:	4694      	mov	ip, r2
1000b8aa:	44e0      	add	r8, ip
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b8ac:	45d0      	cmp	r8, sl
1000b8ae:	d1ee      	bne.n	1000b88e <ble_device_init+0xd6>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000b8b0:	4a5a      	ldr	r2, [pc, #360]	; (1000ba1c <ble_device_init+0x264>)
1000b8b2:	7013      	strb	r3, [r2, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing SAMB11");
1000b8b4:	4b5a      	ldr	r3, [pc, #360]	; (1000ba20 <ble_device_init+0x268>)
1000b8b6:	0018      	movs	r0, r3
1000b8b8:	469a      	mov	sl, r3
1000b8ba:	4b5a      	ldr	r3, [pc, #360]	; (1000ba24 <ble_device_init+0x26c>)
1000b8bc:	4699      	mov	r9, r3
1000b8be:	4798      	blx	r3
1000b8c0:	4b59      	ldr	r3, [pc, #356]	; (1000ba28 <ble_device_init+0x270>)
1000b8c2:	485a      	ldr	r0, [pc, #360]	; (1000ba2c <ble_device_init+0x274>)
1000b8c4:	4698      	mov	r8, r3
1000b8c6:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000b8c8:	4658      	mov	r0, fp
1000b8ca:	4b59      	ldr	r3, [pc, #356]	; (1000ba30 <ble_device_init+0x278>)
1000b8cc:	4798      	blx	r3
1000b8ce:	2800      	cmp	r0, #0
1000b8d0:	d15e      	bne.n	1000b990 <ble_device_init+0x1d8>
1000b8d2:	002b      	movs	r3, r5
1000b8d4:	3314      	adds	r3, #20
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000b8d6:	682a      	ldr	r2, [r5, #0]
1000b8d8:	2a00      	cmp	r2, #0
1000b8da:	d062      	beq.n	1000b9a2 <ble_device_init+0x1ea>
1000b8dc:	3504      	adds	r5, #4
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000b8de:	429d      	cmp	r5, r3
1000b8e0:	d1f9      	bne.n	1000b8d6 <ble_device_init+0x11e>
1000b8e2:	0023      	movs	r3, r4
1000b8e4:	3314      	adds	r3, #20
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000b8e6:	6822      	ldr	r2, [r4, #0]
1000b8e8:	2a00      	cmp	r2, #0
1000b8ea:	d06d      	beq.n	1000b9c8 <ble_device_init+0x210>
1000b8ec:	3404      	adds	r4, #4
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000b8ee:	42a3      	cmp	r3, r4
1000b8f0:	d1f9      	bne.n	1000b8e6 <ble_device_init+0x12e>
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000b8f2:	2109      	movs	r1, #9
1000b8f4:	484f      	ldr	r0, [pc, #316]	; (1000ba34 <ble_device_init+0x27c>)
1000b8f6:	4b50      	ldr	r3, [pc, #320]	; (1000ba38 <ble_device_init+0x280>)
1000b8f8:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000b8fa:	2800      	cmp	r0, #0
1000b8fc:	d003      	beq.n	1000b906 <ble_device_init+0x14e>
	{
		DBG_LOG("Device name set failed");
1000b8fe:	4650      	mov	r0, sl
1000b900:	47c8      	blx	r9
1000b902:	484e      	ldr	r0, [pc, #312]	; (1000ba3c <ble_device_init+0x284>)
1000b904:	47c0      	blx	r8

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000b906:	494e      	ldr	r1, [pc, #312]	; (1000ba40 <ble_device_init+0x288>)
1000b908:	2207      	movs	r2, #7
1000b90a:	3108      	adds	r1, #8
1000b90c:	a804      	add	r0, sp, #16
1000b90e:	4d4d      	ldr	r5, [pc, #308]	; (1000ba44 <ble_device_init+0x28c>)
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000b910:	ac06      	add	r4, sp, #24

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000b912:	47a8      	blx	r5
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000b914:	2226      	movs	r2, #38	; 0x26
1000b916:	2100      	movs	r1, #0
1000b918:	0020      	movs	r0, r4
1000b91a:	4b2e      	ldr	r3, [pc, #184]	; (1000b9d4 <ble_device_init+0x21c>)
1000b91c:	4798      	blx	r3
	
	if (addr == NULL)
1000b91e:	2e00      	cmp	r6, #0
1000b920:	d047      	beq.n	1000b9b2 <ble_device_init+0x1fa>
		
		/* Copy the BD address into address pointer */
		addr = &address;
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000b922:	4650      	mov	r0, sl
1000b924:	47c8      	blx	r9
1000b926:	7830      	ldrb	r0, [r6, #0]
1000b928:	7933      	ldrb	r3, [r6, #4]
1000b92a:	7972      	ldrb	r2, [r6, #5]
1000b92c:	79b1      	ldrb	r1, [r6, #6]
1000b92e:	9003      	str	r0, [sp, #12]
1000b930:	7870      	ldrb	r0, [r6, #1]
1000b932:	9002      	str	r0, [sp, #8]
1000b934:	78b0      	ldrb	r0, [r6, #2]
1000b936:	9001      	str	r0, [sp, #4]
1000b938:	78f0      	ldrb	r0, [r6, #3]
1000b93a:	9000      	str	r0, [sp, #0]
1000b93c:	4842      	ldr	r0, [pc, #264]	; (1000ba48 <ble_device_init+0x290>)
1000b93e:	47c0      	blx	r8
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000b940:	230a      	movs	r3, #10
1000b942:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000b944:	4b41      	ldr	r3, [pc, #260]	; (1000ba4c <ble_device_init+0x294>)
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000b946:	2207      	movs	r2, #7
1000b948:	0031      	movs	r1, r6
1000b94a:	a807      	add	r0, sp, #28
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000b94c:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000b94e:	47a8      	blx	r5
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000b950:	2300      	movs	r3, #0
1000b952:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000b954:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000b956:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000b958:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000b95a:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000b95c:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000b95e:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000b960:	2380      	movs	r3, #128	; 0x80
1000b962:	009b      	lsls	r3, r3, #2
1000b964:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000b966:	0020      	movs	r0, r4
1000b968:	4b39      	ldr	r3, [pc, #228]	; (1000ba50 <ble_device_init+0x298>)
1000b96a:	4798      	blx	r3
1000b96c:	2800      	cmp	r0, #0
1000b96e:	d11b      	bne.n	1000b9a8 <ble_device_init+0x1f0>
	{
		DBG_LOG("Set BLE Device configuration failed");
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000b970:	0030      	movs	r0, r6
1000b972:	4b38      	ldr	r3, [pc, #224]	; (1000ba54 <ble_device_init+0x29c>)
1000b974:	4798      	blx	r3
1000b976:	2800      	cmp	r0, #0
1000b978:	d003      	beq.n	1000b982 <ble_device_init+0x1ca>
	{
		DBG_LOG("Set BLE Device Address failed");
1000b97a:	4650      	mov	r0, sl
1000b97c:	47c8      	blx	r9
1000b97e:	4836      	ldr	r0, [pc, #216]	; (1000ba58 <ble_device_init+0x2a0>)
1000b980:	47c0      	blx	r8
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000b982:	b011      	add	sp, #68	; 0x44
1000b984:	bc3c      	pop	{r2, r3, r4, r5}
1000b986:	4690      	mov	r8, r2
1000b988:	4699      	mov	r9, r3
1000b98a:	46a2      	mov	sl, r4
1000b98c:	46ab      	mov	fp, r5
1000b98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	DBG_LOG("Initializing SAMB11");
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
	{
		DBG_LOG("SAMB11 Initialization failed");
1000b990:	4650      	mov	r0, sl
1000b992:	47c8      	blx	r9
1000b994:	4831      	ldr	r0, [pc, #196]	; (1000ba5c <ble_device_init+0x2a4>)
1000b996:	47c0      	blx	r8
		DBG_LOG("Please check the power and connection / hardware connector");	
1000b998:	4650      	mov	r0, sl
1000b99a:	47c8      	blx	r9
1000b99c:	4830      	ldr	r0, [pc, #192]	; (1000ba60 <ble_device_init+0x2a8>)
1000b99e:	47c0      	blx	r8
1000b9a0:	e7fe      	b.n	1000b9a0 <ble_device_init+0x1e8>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000b9a2:	4b30      	ldr	r3, [pc, #192]	; (1000ba64 <ble_device_init+0x2ac>)
1000b9a4:	602b      	str	r3, [r5, #0]
1000b9a6:	e79c      	b.n	1000b8e2 <ble_device_init+0x12a>
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
	{
		DBG_LOG("Set BLE Device configuration failed");
1000b9a8:	4650      	mov	r0, sl
1000b9aa:	47c8      	blx	r9
1000b9ac:	482e      	ldr	r0, [pc, #184]	; (1000ba68 <ble_device_init+0x2b0>)
1000b9ae:	47c0      	blx	r8
1000b9b0:	e7de      	b.n	1000b970 <ble_device_init+0x1b8>
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000b9b2:	a804      	add	r0, sp, #16
1000b9b4:	4b2d      	ldr	r3, [pc, #180]	; (1000ba6c <ble_device_init+0x2b4>)
1000b9b6:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000b9b8:	ae04      	add	r6, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000b9ba:	2800      	cmp	r0, #0
1000b9bc:	d0b1      	beq.n	1000b922 <ble_device_init+0x16a>
		{
			DBG_LOG("BD address get failed");
1000b9be:	4650      	mov	r0, sl
1000b9c0:	47c8      	blx	r9
1000b9c2:	482b      	ldr	r0, [pc, #172]	; (1000ba70 <ble_device_init+0x2b8>)
1000b9c4:	47c0      	blx	r8
1000b9c6:	e7ac      	b.n	1000b922 <ble_device_init+0x16a>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000b9c8:	4b2a      	ldr	r3, [pc, #168]	; (1000ba74 <ble_device_init+0x2bc>)
1000b9ca:	6023      	str	r3, [r4, #0]
1000b9cc:	e791      	b.n	1000b8f2 <ble_device_init+0x13a>
1000b9ce:	46c0      	nop			; (mov r8, r8)
1000b9d0:	1001d014 	.word	0x1001d014
1000b9d4:	1001830b 	.word	0x1001830b
1000b9d8:	1001d01c 	.word	0x1001d01c
1000b9dc:	1001d7dc 	.word	0x1001d7dc
1000b9e0:	1001d018 	.word	0x1001d018
1000b9e4:	1001d814 	.word	0x1001d814
1000b9e8:	1001d80c 	.word	0x1001d80c
1000b9ec:	1001db48 	.word	0x1001db48
1000b9f0:	1001bc14 	.word	0x1001bc14
1000b9f4:	1001c014 	.word	0x1001c014
1000b9f8:	1001d7f0 	.word	0x1001d7f0
1000b9fc:	1001d7c8 	.word	0x1001d7c8
1000ba00:	1001d7b4 	.word	0x1001d7b4
1000ba04:	1001d810 	.word	0x1001d810
1000ba08:	1001d51c 	.word	0x1001d51c
1000ba0c:	1001d518 	.word	0x1001d518
1000ba10:	1001d7a0 	.word	0x1001d7a0
1000ba14:	1001dd54 	.word	0x1001dd54
1000ba18:	1001d530 	.word	0x1001d530
1000ba1c:	1001d79c 	.word	0x1001d79c
1000ba20:	10019718 	.word	0x10019718
1000ba24:	10018575 	.word	0x10018575
1000ba28:	10018455 	.word	0x10018455
1000ba2c:	1001aa84 	.word	0x1001aa84
1000ba30:	1000ebb1 	.word	0x1000ebb1
1000ba34:	1001aaf4 	.word	0x1001aaf4
1000ba38:	1000eac9 	.word	0x1000eac9
1000ba3c:	1001ab00 	.word	0x1001ab00
1000ba40:	1001a698 	.word	0x1001a698
1000ba44:	100182cf 	.word	0x100182cf
1000ba48:	1001ab30 	.word	0x1001ab30
1000ba4c:	00003a98 	.word	0x00003a98
1000ba50:	1000eb21 	.word	0x1000eb21
1000ba54:	1000ed65 	.word	0x1000ed65
1000ba58:	1001ab8c 	.word	0x1001ab8c
1000ba5c:	1001aa98 	.word	0x1001aa98
1000ba60:	1001aab8 	.word	0x1001aab8
1000ba64:	1001acf0 	.word	0x1001acf0
1000ba68:	1001ab68 	.word	0x1001ab68
1000ba6c:	1000eafd 	.word	0x1000eafd
1000ba70:	1001ab18 	.word	0x1001ab18
1000ba74:	1001a6b4 	.word	0x1001a6b4

1000ba78 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000ba78:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000ba7a:	2201      	movs	r2, #1
1000ba7c:	2101      	movs	r1, #1
1000ba7e:	4b06      	ldr	r3, [pc, #24]	; (1000ba98 <ble_send_slave_sec_request+0x20>)
1000ba80:	4798      	blx	r3
1000ba82:	2800      	cmp	r0, #0
1000ba84:	d006      	beq.n	1000ba94 <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000ba86:	4b05      	ldr	r3, [pc, #20]	; (1000ba9c <ble_send_slave_sec_request+0x24>)
1000ba88:	4805      	ldr	r0, [pc, #20]	; (1000baa0 <ble_send_slave_sec_request+0x28>)
1000ba8a:	4798      	blx	r3
1000ba8c:	4805      	ldr	r0, [pc, #20]	; (1000baa4 <ble_send_slave_sec_request+0x2c>)
1000ba8e:	4b06      	ldr	r3, [pc, #24]	; (1000baa8 <ble_send_slave_sec_request+0x30>)
1000ba90:	4798      	blx	r3
1000ba92:	20e2      	movs	r0, #226	; 0xe2
		}
	#endif
	return AT_BLE_FAILURE;
}
1000ba94:	bd10      	pop	{r4, pc}
1000ba96:	46c0      	nop			; (mov r8, r8)
1000ba98:	1000f2f1 	.word	0x1000f2f1
1000ba9c:	10018575 	.word	0x10018575
1000baa0:	10019718 	.word	0x10019718
1000baa4:	1001abc8 	.word	0x1001abc8
1000baa8:	10018455 	.word	0x10018455

1000baac <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000baac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000baae:	464d      	mov	r5, r9
1000bab0:	4644      	mov	r4, r8
1000bab2:	465f      	mov	r7, fp
1000bab4:	4656      	mov	r6, sl
1000bab6:	b4f0      	push	{r4, r5, r6, r7}
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000bab8:	7a85      	ldrb	r5, [r0, #10]
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000baba:	b099      	sub	sp, #100	; 0x64
1000babc:	0004      	movs	r4, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000babe:	2d00      	cmp	r5, #0
1000bac0:	d156      	bne.n	1000bb70 <ble_connected_state_handler+0xc4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000bac2:	4b69      	ldr	r3, [pc, #420]	; (1000bc68 <ble_connected_state_handler+0x1bc>)
1000bac4:	4699      	mov	r9, r3
1000bac6:	0018      	movs	r0, r3
1000bac8:	4b68      	ldr	r3, [pc, #416]	; (1000bc6c <ble_connected_state_handler+0x1c0>)
1000baca:	4698      	mov	r8, r3
1000bacc:	4798      	blx	r3
1000bace:	7860      	ldrb	r0, [r4, #1]
1000bad0:	7923      	ldrb	r3, [r4, #4]
1000bad2:	7962      	ldrb	r2, [r4, #5]
1000bad4:	79a1      	ldrb	r1, [r4, #6]
1000bad6:	9002      	str	r0, [sp, #8]
1000bad8:	78a0      	ldrb	r0, [r4, #2]
1000bada:	4f65      	ldr	r7, [pc, #404]	; (1000bc70 <ble_connected_state_handler+0x1c4>)
1000badc:	9001      	str	r0, [sp, #4]
1000bade:	78e0      	ldrb	r0, [r4, #3]
1000bae0:	9000      	str	r0, [sp, #0]
1000bae2:	4864      	ldr	r0, [pc, #400]	; (1000bc74 <ble_connected_state_handler+0x1c8>)
1000bae4:	47b8      	blx	r7
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000bae6:	4648      	mov	r0, r9
1000bae8:	47c0      	blx	r8
1000baea:	8921      	ldrh	r1, [r4, #8]
1000baec:	4862      	ldr	r0, [pc, #392]	; (1000bc78 <ble_connected_state_handler+0x1cc>)
1000baee:	47b8      	blx	r7
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000baf0:	2212      	movs	r2, #18
1000baf2:	0021      	movs	r1, r4
1000baf4:	4b61      	ldr	r3, [pc, #388]	; (1000bc7c <ble_connected_state_handler+0x1d0>)
1000baf6:	4862      	ldr	r0, [pc, #392]	; (1000bc80 <ble_connected_state_handler+0x1d4>)
1000baf8:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000bafa:	4b62      	ldr	r3, [pc, #392]	; (1000bc84 <ble_connected_state_handler+0x1d8>)
1000bafc:	2207      	movs	r2, #7
1000bafe:	0018      	movs	r0, r3
1000bb00:	469b      	mov	fp, r3
1000bb02:	0021      	movs	r1, r4
1000bb04:	4b60      	ldr	r3, [pc, #384]	; (1000bc88 <ble_connected_state_handler+0x1dc>)
1000bb06:	4798      	blx	r3
1000bb08:	4682      	mov	sl, r0
1000bb0a:	2800      	cmp	r0, #0
1000bb0c:	d140      	bne.n	1000bb90 <ble_connected_state_handler+0xe4>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000bb0e:	4b5f      	ldr	r3, [pc, #380]	; (1000bc8c <ble_connected_state_handler+0x1e0>)
1000bb10:	781b      	ldrb	r3, [r3, #0]
1000bb12:	2b04      	cmp	r3, #4
1000bb14:	d900      	bls.n	1000bb18 <ble_connected_state_handler+0x6c>
1000bb16:	e076      	b.n	1000bc06 <ble_connected_state_handler+0x15a>
1000bb18:	4b5d      	ldr	r3, [pc, #372]	; (1000bc90 <ble_connected_state_handler+0x1e4>)
1000bb1a:	2600      	movs	r6, #0
1000bb1c:	46a8      	mov	r8, r5
1000bb1e:	001f      	movs	r7, r3
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000bb20:	2207      	movs	r2, #7
1000bb22:	0021      	movs	r1, r4
1000bb24:	0038      	movs	r0, r7
1000bb26:	4b58      	ldr	r3, [pc, #352]	; (1000bc88 <ble_connected_state_handler+0x1dc>)
1000bb28:	4798      	blx	r3
1000bb2a:	2800      	cmp	r0, #0
1000bb2c:	d100      	bne.n	1000bb30 <ble_connected_state_handler+0x84>
1000bb2e:	e076      	b.n	1000bc1e <ble_connected_state_handler+0x172>
1000bb30:	3601      	adds	r6, #1
1000bb32:	377c      	adds	r7, #124	; 0x7c
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bb34:	2e05      	cmp	r6, #5
1000bb36:	d1f3      	bne.n	1000bb20 <ble_connected_state_handler+0x74>
1000bb38:	4645      	mov	r5, r8
1000bb3a:	2700      	movs	r7, #0
1000bb3c:	4b55      	ldr	r3, [pc, #340]	; (1000bc94 <ble_connected_state_handler+0x1e8>)
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000bb3e:	781a      	ldrb	r2, [r3, #0]
1000bb40:	2a00      	cmp	r2, #0
1000bb42:	d100      	bne.n	1000bb46 <ble_connected_state_handler+0x9a>
1000bb44:	e07d      	b.n	1000bc42 <ble_connected_state_handler+0x196>
1000bb46:	3701      	adds	r7, #1
1000bb48:	337c      	adds	r3, #124	; 0x7c
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bb4a:	2f05      	cmp	r7, #5
1000bb4c:	d1f7      	bne.n	1000bb3e <ble_connected_state_handler+0x92>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000bb4e:	4653      	mov	r3, sl
1000bb50:	2b00      	cmp	r3, #0
1000bb52:	d147      	bne.n	1000bbe4 <ble_connected_state_handler+0x138>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000bb54:	017b      	lsls	r3, r7, #5
1000bb56:	1bdf      	subs	r7, r3, r7
1000bb58:	4b4d      	ldr	r3, [pc, #308]	; (1000bc90 <ble_connected_state_handler+0x1e4>)
1000bb5a:	00bf      	lsls	r7, r7, #2
1000bb5c:	469c      	mov	ip, r3
1000bb5e:	2305      	movs	r3, #5
1000bb60:	4467      	add	r7, ip
1000bb62:	74bb      	strb	r3, [r7, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000bb64:	2207      	movs	r2, #7
1000bb66:	2100      	movs	r1, #0
1000bb68:	4658      	mov	r0, fp
1000bb6a:	4b4b      	ldr	r3, [pc, #300]	; (1000bc98 <ble_connected_state_handler+0x1ec>)
1000bb6c:	4798      	blx	r3
1000bb6e:	e007      	b.n	1000bb80 <ble_connected_state_handler+0xd4>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000bb70:	4b3e      	ldr	r3, [pc, #248]	; (1000bc6c <ble_connected_state_handler+0x1c0>)
1000bb72:	483d      	ldr	r0, [pc, #244]	; (1000bc68 <ble_connected_state_handler+0x1bc>)
1000bb74:	4798      	blx	r3
1000bb76:	7aa1      	ldrb	r1, [r4, #10]
1000bb78:	4848      	ldr	r0, [pc, #288]	; (1000bc9c <ble_connected_state_handler+0x1f0>)
1000bb7a:	4b3d      	ldr	r3, [pc, #244]	; (1000bc70 <ble_connected_state_handler+0x1c4>)
1000bb7c:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000bb7e:	2500      	movs	r5, #0
}
1000bb80:	0028      	movs	r0, r5
1000bb82:	b019      	add	sp, #100	; 0x64
1000bb84:	bc3c      	pop	{r2, r3, r4, r5}
1000bb86:	4690      	mov	r8, r2
1000bb88:	4699      	mov	r9, r3
1000bb8a:	46a2      	mov	sl, r4
1000bb8c:	46ab      	mov	fp, r5
1000bb8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000bb90:	7823      	ldrb	r3, [r4, #0]
1000bb92:	2b02      	cmp	r3, #2
1000bb94:	d1bb      	bne.n	1000bb0e <ble_connected_state_handler+0x62>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000bb96:	ad04      	add	r5, sp, #16
1000bb98:	2250      	movs	r2, #80	; 0x50
1000bb9a:	4b3f      	ldr	r3, [pc, #252]	; (1000bc98 <ble_connected_state_handler+0x1ec>)
1000bb9c:	2100      	movs	r1, #0
1000bb9e:	0028      	movs	r0, r5
1000bba0:	4798      	blx	r3
1000bba2:	4b3f      	ldr	r3, [pc, #252]	; (1000bca0 <ble_connected_state_handler+0x1f4>)
1000bba4:	0022      	movs	r2, r4
1000bba6:	469c      	mov	ip, r3
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000bba8:	2300      	movs	r3, #0
1000bbaa:	4664      	mov	r4, ip
1000bbac:	4694      	mov	ip, r2
1000bbae:	001e      	movs	r6, r3
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000bbb0:	0022      	movs	r2, r4
1000bbb2:	3610      	adds	r6, #16
1000bbb4:	b2b6      	uxth	r6, r6
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000bbb6:	7810      	ldrb	r0, [r2, #0]
1000bbb8:	1c59      	adds	r1, r3, #1
1000bbba:	54e8      	strb	r0, [r5, r3]
1000bbbc:	b28b      	uxth	r3, r1
1000bbbe:	3201      	adds	r2, #1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000bbc0:	42b3      	cmp	r3, r6
1000bbc2:	d1f8      	bne.n	1000bbb6 <ble_connected_state_handler+0x10a>
1000bbc4:	347c      	adds	r4, #124	; 0x7c
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000bbc6:	2b50      	cmp	r3, #80	; 0x50
1000bbc8:	d1f1      	bne.n	1000bbae <ble_connected_state_handler+0x102>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000bbca:	002a      	movs	r2, r5
1000bbcc:	4661      	mov	r1, ip
1000bbce:	2005      	movs	r0, #5
1000bbd0:	4b34      	ldr	r3, [pc, #208]	; (1000bca4 <ble_connected_state_handler+0x1f8>)
1000bbd2:	4798      	blx	r3
1000bbd4:	1e05      	subs	r5, r0, #0
1000bbd6:	d0d3      	beq.n	1000bb80 <ble_connected_state_handler+0xd4>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000bbd8:	4648      	mov	r0, r9
1000bbda:	47c0      	blx	r8
1000bbdc:	4832      	ldr	r0, [pc, #200]	; (1000bca8 <ble_connected_state_handler+0x1fc>)
1000bbde:	47b8      	blx	r7
						return AT_BLE_FAILURE;
1000bbe0:	25e2      	movs	r5, #226	; 0xe2
1000bbe2:	e7cd      	b.n	1000bb80 <ble_connected_state_handler+0xd4>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000bbe4:	017b      	lsls	r3, r7, #5
1000bbe6:	1bdf      	subs	r7, r3, r7
1000bbe8:	4b29      	ldr	r3, [pc, #164]	; (1000bc90 <ble_connected_state_handler+0x1e4>)
1000bbea:	00bf      	lsls	r7, r7, #2
1000bbec:	469c      	mov	ip, r3
1000bbee:	230a      	movs	r3, #10
1000bbf0:	4467      	add	r7, ip
1000bbf2:	74bb      	strb	r3, [r7, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000bbf4:	2207      	movs	r2, #7
1000bbf6:	2100      	movs	r1, #0
1000bbf8:	4658      	mov	r0, fp
1000bbfa:	4b27      	ldr	r3, [pc, #156]	; (1000bc98 <ble_connected_state_handler+0x1ec>)
1000bbfc:	4798      	blx	r3
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000bbfe:	8920      	ldrh	r0, [r4, #8]
1000bc00:	4b2a      	ldr	r3, [pc, #168]	; (1000bcac <ble_connected_state_handler+0x200>)
1000bc02:	4798      	blx	r3
1000bc04:	e7bc      	b.n	1000bb80 <ble_connected_state_handler+0xd4>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000bc06:	4648      	mov	r0, r9
1000bc08:	47c0      	blx	r8
1000bc0a:	4b20      	ldr	r3, [pc, #128]	; (1000bc8c <ble_connected_state_handler+0x1e0>)
1000bc0c:	4828      	ldr	r0, [pc, #160]	; (1000bcb0 <ble_connected_state_handler+0x204>)
1000bc0e:	7819      	ldrb	r1, [r3, #0]
1000bc10:	b2c9      	uxtb	r1, r1
1000bc12:	47b8      	blx	r7
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000bc14:	8920      	ldrh	r0, [r4, #8]
1000bc16:	2113      	movs	r1, #19
1000bc18:	4b26      	ldr	r3, [pc, #152]	; (1000bcb4 <ble_connected_state_handler+0x208>)
1000bc1a:	4798      	blx	r3
1000bc1c:	e7b0      	b.n	1000bb80 <ble_connected_state_handler+0xd4>
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000bc1e:	4a1c      	ldr	r2, [pc, #112]	; (1000bc90 <ble_connected_state_handler+0x1e4>)
1000bc20:	0037      	movs	r7, r6
1000bc22:	4694      	mov	ip, r2
1000bc24:	4645      	mov	r5, r8
1000bc26:	0173      	lsls	r3, r6, #5
1000bc28:	1b9b      	subs	r3, r3, r6
1000bc2a:	009b      	lsls	r3, r3, #2
1000bc2c:	4463      	add	r3, ip
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
						ble_device_count++;
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000bc2e:	2202      	movs	r2, #2
1000bc30:	335e      	adds	r3, #94	; 0x5e
1000bc32:	701a      	strb	r2, [r3, #0]
1000bc34:	0021      	movs	r1, r4
1000bc36:	3205      	adds	r2, #5
1000bc38:	4658      	mov	r0, fp
1000bc3a:	4b13      	ldr	r3, [pc, #76]	; (1000bc88 <ble_connected_state_handler+0x1dc>)
1000bc3c:	4798      	blx	r3
1000bc3e:	4682      	mov	sl, r0
1000bc40:	e785      	b.n	1000bb4e <ble_connected_state_handler+0xa2>
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000bc42:	4a13      	ldr	r2, [pc, #76]	; (1000bc90 <ble_connected_state_handler+0x1e4>)
1000bc44:	017b      	lsls	r3, r7, #5
1000bc46:	4690      	mov	r8, r2
1000bc48:	1bdb      	subs	r3, r3, r7
1000bc4a:	009b      	lsls	r3, r3, #2
1000bc4c:	4498      	add	r8, r3
1000bc4e:	2212      	movs	r2, #18
1000bc50:	4b0a      	ldr	r3, [pc, #40]	; (1000bc7c <ble_connected_state_handler+0x1d0>)
1000bc52:	0021      	movs	r1, r4
1000bc54:	4640      	mov	r0, r8
1000bc56:	4798      	blx	r3
						ble_device_count++;
1000bc58:	4b0c      	ldr	r3, [pc, #48]	; (1000bc8c <ble_connected_state_handler+0x1e0>)
1000bc5a:	4a0c      	ldr	r2, [pc, #48]	; (1000bc8c <ble_connected_state_handler+0x1e0>)
1000bc5c:	781b      	ldrb	r3, [r3, #0]
1000bc5e:	3301      	adds	r3, #1
1000bc60:	b2db      	uxtb	r3, r3
1000bc62:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000bc64:	4643      	mov	r3, r8
1000bc66:	e7e2      	b.n	1000bc2e <ble_connected_state_handler+0x182>
1000bc68:	10019718 	.word	0x10019718
1000bc6c:	10018575 	.word	0x10018575
1000bc70:	10018455 	.word	0x10018455
1000bc74:	1001abe8 	.word	0x1001abe8
1000bc78:	1001ac2c 	.word	0x1001ac2c
1000bc7c:	100182cf 	.word	0x100182cf
1000bc80:	1001d7dc 	.word	0x1001d7dc
1000bc84:	1001d01c 	.word	0x1001d01c
1000bc88:	100182b1 	.word	0x100182b1
1000bc8c:	1001d79c 	.word	0x1001d79c
1000bc90:	1001d530 	.word	0x1001d530
1000bc94:	1001d58e 	.word	0x1001d58e
1000bc98:	1001830b 	.word	0x1001830b
1000bc9c:	1001aca4 	.word	0x1001aca4
1000bca0:	1001d576 	.word	0x1001d576
1000bca4:	1000ee05 	.word	0x1000ee05
1000bca8:	1001ac44 	.word	0x1001ac44
1000bcac:	1000ba79 	.word	0x1000ba79
1000bcb0:	1001ac68 	.word	0x1001ac68
1000bcb4:	1000edd9 	.word	0x1000edd9

1000bcb8 <ble_resolv_rand_addr_handler>:
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000bcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000bcba:	7803      	ldrb	r3, [r0, #0]
1000bcbc:	2b00      	cmp	r3, #0
1000bcbe:	d10d      	bne.n	1000bcdc <ble_resolv_rand_addr_handler+0x24>
1000bcc0:	2400      	movs	r4, #0
1000bcc2:	4d21      	ldr	r5, [pc, #132]	; (1000bd48 <ble_resolv_rand_addr_handler+0x90>)
1000bcc4:	4f21      	ldr	r7, [pc, #132]	; (1000bd4c <ble_resolv_rand_addr_handler+0x94>)
1000bcc6:	1c46      	adds	r6, r0, #1
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000bcc8:	2210      	movs	r2, #16
1000bcca:	0029      	movs	r1, r5
1000bccc:	0030      	movs	r0, r6
1000bcce:	47b8      	blx	r7
1000bcd0:	2800      	cmp	r0, #0
1000bcd2:	d00e      	beq.n	1000bcf2 <ble_resolv_rand_addr_handler+0x3a>
1000bcd4:	3401      	adds	r4, #1
1000bcd6:	357c      	adds	r5, #124	; 0x7c
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bcd8:	2c05      	cmp	r4, #5
1000bcda:	d1f5      	bne.n	1000bcc8 <ble_resolv_rand_addr_handler+0x10>
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000bcdc:	2300      	movs	r3, #0
1000bcde:	4a1c      	ldr	r2, [pc, #112]	; (1000bd50 <ble_resolv_rand_addr_handler+0x98>)
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000bce0:	7811      	ldrb	r1, [r2, #0]
1000bce2:	2900      	cmp	r1, #0
1000bce4:	d019      	beq.n	1000bd1a <ble_resolv_rand_addr_handler+0x62>
1000bce6:	3301      	adds	r3, #1
1000bce8:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bcea:	2b05      	cmp	r3, #5
1000bcec:	d1f8      	bne.n	1000bce0 <ble_resolv_rand_addr_handler+0x28>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000bcee:	2000      	movs	r0, #0
1000bcf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000bcf2:	0160      	lsls	r0, r4, #5
1000bcf4:	1b00      	subs	r0, r0, r4
1000bcf6:	0084      	lsls	r4, r0, #2
1000bcf8:	4816      	ldr	r0, [pc, #88]	; (1000bd54 <ble_resolv_rand_addr_handler+0x9c>)
1000bcfa:	2202      	movs	r2, #2
1000bcfc:	1900      	adds	r0, r0, r4
1000bcfe:	0003      	movs	r3, r0
1000bd00:	335e      	adds	r3, #94	; 0x5e
1000bd02:	701a      	strb	r2, [r3, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000bd04:	230a      	movs	r3, #10
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000bd06:	4c14      	ldr	r4, [pc, #80]	; (1000bd58 <ble_resolv_rand_addr_handler+0xa0>)
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000bd08:	7483      	strb	r3, [r0, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000bd0a:	3210      	adds	r2, #16
1000bd0c:	0021      	movs	r1, r4
1000bd0e:	4b13      	ldr	r3, [pc, #76]	; (1000bd5c <ble_resolv_rand_addr_handler+0xa4>)
1000bd10:	4798      	blx	r3
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000bd12:	8920      	ldrh	r0, [r4, #8]
1000bd14:	4b12      	ldr	r3, [pc, #72]	; (1000bd60 <ble_resolv_rand_addr_handler+0xa8>)
1000bd16:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000bd18:	e7e9      	b.n	1000bcee <ble_resolv_rand_addr_handler+0x36>
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000bd1a:	015d      	lsls	r5, r3, #5
1000bd1c:	1aeb      	subs	r3, r5, r3
1000bd1e:	4d0d      	ldr	r5, [pc, #52]	; (1000bd54 <ble_resolv_rand_addr_handler+0x9c>)
1000bd20:	009b      	lsls	r3, r3, #2
1000bd22:	4c0d      	ldr	r4, [pc, #52]	; (1000bd58 <ble_resolv_rand_addr_handler+0xa0>)
1000bd24:	18ed      	adds	r5, r5, r3
1000bd26:	2212      	movs	r2, #18
1000bd28:	4b0c      	ldr	r3, [pc, #48]	; (1000bd5c <ble_resolv_rand_addr_handler+0xa4>)
1000bd2a:	0021      	movs	r1, r4
1000bd2c:	0028      	movs	r0, r5
1000bd2e:	4798      	blx	r3
				ble_device_count++;
1000bd30:	4a0c      	ldr	r2, [pc, #48]	; (1000bd64 <ble_resolv_rand_addr_handler+0xac>)
1000bd32:	7813      	ldrb	r3, [r2, #0]
1000bd34:	3301      	adds	r3, #1
1000bd36:	b2db      	uxtb	r3, r3
1000bd38:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000bd3a:	002b      	movs	r3, r5
1000bd3c:	2202      	movs	r2, #2
1000bd3e:	335e      	adds	r3, #94	; 0x5e
1000bd40:	701a      	strb	r2, [r3, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000bd42:	230a      	movs	r3, #10
1000bd44:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000bd46:	e7e4      	b.n	1000bd12 <ble_resolv_rand_addr_handler+0x5a>
1000bd48:	1001d576 	.word	0x1001d576
1000bd4c:	100182b1 	.word	0x100182b1
1000bd50:	1001d58e 	.word	0x1001d58e
1000bd54:	1001d530 	.word	0x1001d530
1000bd58:	1001d7dc 	.word	0x1001d7dc
1000bd5c:	100182cf 	.word	0x100182cf
1000bd60:	1000ba79 	.word	0x1000ba79
1000bd64:	1001d79c 	.word	0x1001d79c

1000bd68 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000bd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000bd6a:	000d      	movs	r5, r1
	DBG_LOG_DEV("BLE-Event:%d", events);
	switch(events)
1000bd6c:	283b      	cmp	r0, #59	; 0x3b
1000bd6e:	d865      	bhi.n	1000be3c <ble_event_manager+0xd4>
1000bd70:	4b36      	ldr	r3, [pc, #216]	; (1000be4c <ble_event_manager+0xe4>)
1000bd72:	0086      	lsls	r6, r0, #2
1000bd74:	599b      	ldr	r3, [r3, r6]
1000bd76:	469f      	mov	pc, r3
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000bd78:	4b35      	ldr	r3, [pc, #212]	; (1000be50 <ble_event_manager+0xe8>)
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000bd7a:	3838      	subs	r0, #56	; 0x38
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000bd7c:	681b      	ldr	r3, [r3, #0]
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000bd7e:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000bd80:	2b00      	cmp	r3, #0
1000bd82:	d005      	beq.n	1000bd90 <ble_event_manager+0x28>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000bd84:	0080      	lsls	r0, r0, #2
1000bd86:	58c3      	ldr	r3, [r0, r3]
1000bd88:	2b00      	cmp	r3, #0
1000bd8a:	d001      	beq.n	1000bd90 <ble_event_manager+0x28>
				{
					event_cb_fn[events](event_params);
1000bd8c:	0028      	movs	r0, r5
1000bd8e:	4798      	blx	r3
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
	}
	break;		
	}
}
1000bd90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000bd92:	4b30      	ldr	r3, [pc, #192]	; (1000be54 <ble_event_manager+0xec>)
1000bd94:	681b      	ldr	r3, [r3, #0]
1000bd96:	2b00      	cmp	r3, #0
1000bd98:	d0fa      	beq.n	1000bd90 <ble_event_manager+0x28>
			ble_user_event_cb();
1000bd9a:	4798      	blx	r3
1000bd9c:	e7f8      	b.n	1000bd90 <ble_event_manager+0x28>
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000bd9e:	2400      	movs	r4, #0
1000bda0:	4f2d      	ldr	r7, [pc, #180]	; (1000be58 <ble_event_manager+0xf0>)
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000bda2:	593b      	ldr	r3, [r7, r4]
1000bda4:	2b00      	cmp	r3, #0
1000bda6:	d004      	beq.n	1000bdb2 <ble_event_manager+0x4a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000bda8:	599b      	ldr	r3, [r3, r6]
1000bdaa:	2b00      	cmp	r3, #0
1000bdac:	d001      	beq.n	1000bdb2 <ble_event_manager+0x4a>
				{
					event_cb_fn[events](event_params);		
1000bdae:	0028      	movs	r0, r5
1000bdb0:	4798      	blx	r3
1000bdb2:	3404      	adds	r4, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000bdb4:	2c14      	cmp	r4, #20
1000bdb6:	d1f4      	bne.n	1000bda2 <ble_event_manager+0x3a>
1000bdb8:	e7ea      	b.n	1000bd90 <ble_event_manager+0x28>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000bdba:	2600      	movs	r6, #0
1000bdbc:	3813      	subs	r0, #19
1000bdbe:	b2c4      	uxtb	r4, r0
1000bdc0:	4f26      	ldr	r7, [pc, #152]	; (1000be5c <ble_event_manager+0xf4>)
1000bdc2:	00a4      	lsls	r4, r4, #2
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000bdc4:	59bb      	ldr	r3, [r7, r6]
1000bdc6:	2b00      	cmp	r3, #0
1000bdc8:	d004      	beq.n	1000bdd4 <ble_event_manager+0x6c>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000bdca:	591b      	ldr	r3, [r3, r4]
1000bdcc:	2b00      	cmp	r3, #0
1000bdce:	d001      	beq.n	1000bdd4 <ble_event_manager+0x6c>
				{
					event_cb_fn[events](event_params);
1000bdd0:	0028      	movs	r0, r5
1000bdd2:	4798      	blx	r3
1000bdd4:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000bdd6:	2e14      	cmp	r6, #20
1000bdd8:	d1f4      	bne.n	1000bdc4 <ble_event_manager+0x5c>
1000bdda:	e7d9      	b.n	1000bd90 <ble_event_manager+0x28>
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000bddc:	2600      	movs	r6, #0
1000bdde:	381d      	subs	r0, #29
1000bde0:	b2c4      	uxtb	r4, r0
1000bde2:	4f1f      	ldr	r7, [pc, #124]	; (1000be60 <ble_event_manager+0xf8>)
1000bde4:	00a4      	lsls	r4, r4, #2
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000bde6:	59bb      	ldr	r3, [r7, r6]
1000bde8:	2b00      	cmp	r3, #0
1000bdea:	d004      	beq.n	1000bdf6 <ble_event_manager+0x8e>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000bdec:	591b      	ldr	r3, [r3, r4]
1000bdee:	2b00      	cmp	r3, #0
1000bdf0:	d001      	beq.n	1000bdf6 <ble_event_manager+0x8e>
				{
					event_cb_fn[events](event_params);
1000bdf2:	0028      	movs	r0, r5
1000bdf4:	4798      	blx	r3
1000bdf6:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000bdf8:	2e14      	cmp	r6, #20
1000bdfa:	d1f4      	bne.n	1000bde6 <ble_event_manager+0x7e>
1000bdfc:	e7c8      	b.n	1000bd90 <ble_event_manager+0x28>
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000bdfe:	4b19      	ldr	r3, [pc, #100]	; (1000be64 <ble_event_manager+0xfc>)
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000be00:	3827      	subs	r0, #39	; 0x27
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000be02:	681b      	ldr	r3, [r3, #0]
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000be04:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000be06:	2b00      	cmp	r3, #0
1000be08:	d1bc      	bne.n	1000bd84 <ble_event_manager+0x1c>
1000be0a:	e7c1      	b.n	1000bd90 <ble_event_manager+0x28>
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000be0c:	4b16      	ldr	r3, [pc, #88]	; (1000be68 <ble_event_manager+0x100>)
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000be0e:	382d      	subs	r0, #45	; 0x2d
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000be10:	681b      	ldr	r3, [r3, #0]
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000be12:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000be14:	2b00      	cmp	r3, #0
1000be16:	d1b5      	bne.n	1000bd84 <ble_event_manager+0x1c>
1000be18:	e7ba      	b.n	1000bd90 <ble_event_manager+0x28>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000be1a:	2600      	movs	r6, #0
1000be1c:	3836      	subs	r0, #54	; 0x36
1000be1e:	b2c4      	uxtb	r4, r0
1000be20:	4f12      	ldr	r7, [pc, #72]	; (1000be6c <ble_event_manager+0x104>)
1000be22:	00a4      	lsls	r4, r4, #2
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000be24:	59bb      	ldr	r3, [r7, r6]
1000be26:	2b00      	cmp	r3, #0
1000be28:	d004      	beq.n	1000be34 <ble_event_manager+0xcc>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000be2a:	591b      	ldr	r3, [r3, r4]
1000be2c:	2b00      	cmp	r3, #0
1000be2e:	d001      	beq.n	1000be34 <ble_event_manager+0xcc>
				{
					event_cb_fn[events](event_params);
1000be30:	0028      	movs	r0, r5
1000be32:	4798      	blx	r3
1000be34:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000be36:	2e14      	cmp	r6, #20
1000be38:	d1f4      	bne.n	1000be24 <ble_event_manager+0xbc>
1000be3a:	e7a9      	b.n	1000bd90 <ble_event_manager+0x28>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000be3c:	4d0c      	ldr	r5, [pc, #48]	; (1000be70 <ble_event_manager+0x108>)
1000be3e:	4c0d      	ldr	r4, [pc, #52]	; (1000be74 <ble_event_manager+0x10c>)
1000be40:	0028      	movs	r0, r5
1000be42:	47a0      	blx	r4
1000be44:	0028      	movs	r0, r5
1000be46:	47a0      	blx	r4
	}
	break;		
	}
}
1000be48:	e7a2      	b.n	1000bd90 <ble_event_manager+0x28>
1000be4a:	46c0      	nop			; (mov r8, r8)
1000be4c:	1001a5a8 	.word	0x1001a5a8
1000be50:	1001dd54 	.word	0x1001dd54
1000be54:	1001d014 	.word	0x1001d014
1000be58:	1001d7b4 	.word	0x1001d7b4
1000be5c:	1001d7c8 	.word	0x1001d7c8
1000be60:	1001d51c 	.word	0x1001d51c
1000be64:	1001d810 	.word	0x1001d810
1000be68:	1001d518 	.word	0x1001d518
1000be6c:	1001d7a0 	.word	0x1001d7a0
1000be70:	10019718 	.word	0x10019718
1000be74:	10018575 	.word	0x10018575

1000be78 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000be78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000be7a:	4d0f      	ldr	r5, [pc, #60]	; (1000beb8 <ble_event_task+0x40>)
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000be7c:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000be7e:	782b      	ldrb	r3, [r5, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000be80:	2b01      	cmp	r3, #1
1000be82:	d015      	beq.n	1000beb0 <ble_event_task+0x38>
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000be84:	4e0d      	ldr	r6, [pc, #52]	; (1000bebc <ble_event_task+0x44>)
1000be86:	4f0e      	ldr	r7, [pc, #56]	; (1000bec0 <ble_event_task+0x48>)
1000be88:	0022      	movs	r2, r4
1000be8a:	4b0e      	ldr	r3, [pc, #56]	; (1000bec4 <ble_event_task+0x4c>)
1000be8c:	0031      	movs	r1, r6
1000be8e:	0038      	movs	r0, r7
1000be90:	4798      	blx	r3
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000be92:	782b      	ldrb	r3, [r5, #0]
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000be94:	0004      	movs	r4, r0
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000be96:	2b01      	cmp	r3, #1
1000be98:	d007      	beq.n	1000beaa <ble_event_task+0x32>
	{
		acquire_sleep_lock();
	}
	
    if (status == AT_BLE_SUCCESS) 
1000be9a:	2c00      	cmp	r4, #0
1000be9c:	d103      	bne.n	1000bea6 <ble_event_task+0x2e>
    {		
            ble_event_manager(event, ble_event_params);
1000be9e:	7838      	ldrb	r0, [r7, #0]
1000bea0:	0031      	movs	r1, r6
1000bea2:	4b09      	ldr	r3, [pc, #36]	; (1000bec8 <ble_event_task+0x50>)
1000bea4:	4798      	blx	r3
    }
    
    return status;
}
1000bea6:	0020      	movs	r0, r4
1000bea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
	{
		acquire_sleep_lock();
1000beaa:	4b08      	ldr	r3, [pc, #32]	; (1000becc <ble_event_task+0x54>)
1000beac:	4798      	blx	r3
1000beae:	e7f4      	b.n	1000be9a <ble_event_task+0x22>
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
	{
		release_sleep_lock();
1000beb0:	4b07      	ldr	r3, [pc, #28]	; (1000bed0 <ble_event_task+0x58>)
1000beb2:	4798      	blx	r3
1000beb4:	e7e6      	b.n	1000be84 <ble_event_task+0xc>
1000beb6:	46c0      	nop			; (mov r8, r8)
1000beb8:	1001d023 	.word	0x1001d023
1000bebc:	1001db48 	.word	0x1001db48
1000bec0:	1001d80c 	.word	0x1001d80c
1000bec4:	1000e359 	.word	0x1000e359
1000bec8:	1000bd69 	.word	0x1000bd69
1000becc:	1000c7c5 	.word	0x1000c7c5
1000bed0:	1000c7ed 	.word	0x1000c7ed

1000bed4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000bed4:	b570      	push	{r4, r5, r6, lr}
1000bed6:	0006      	movs	r6, r0
1000bed8:	000d      	movs	r5, r1
1000beda:	4c03      	ldr	r4, [pc, #12]	; (1000bee8 <usart_serial_getchar+0x14>)
	while(STATUS_OK != uart_read_wait(module, c));
1000bedc:	0029      	movs	r1, r5
1000bede:	0030      	movs	r0, r6
1000bee0:	47a0      	blx	r4
1000bee2:	2800      	cmp	r0, #0
1000bee4:	d1fa      	bne.n	1000bedc <usart_serial_getchar+0x8>
}
1000bee6:	bd70      	pop	{r4, r5, r6, pc}
1000bee8:	1000ce41 	.word	0x1000ce41

1000beec <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000beec:	b570      	push	{r4, r5, r6, lr}
1000beee:	0006      	movs	r6, r0
1000bef0:	000d      	movs	r5, r1
1000bef2:	4c03      	ldr	r4, [pc, #12]	; (1000bf00 <usart_serial_putchar+0x14>)
	while(STATUS_OK !=uart_write_wait(module, c));
1000bef4:	0029      	movs	r1, r5
1000bef6:	0030      	movs	r0, r6
1000bef8:	47a0      	blx	r4
1000befa:	2800      	cmp	r0, #0
1000befc:	d1fa      	bne.n	1000bef4 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000befe:	bd70      	pop	{r4, r5, r6, pc}
1000bf00:	1000ce31 	.word	0x1000ce31

1000bf04 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000bf04:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000bf06:	4b0e      	ldr	r3, [pc, #56]	; (1000bf40 <uart_read_complete_callback+0x3c>)
1000bf08:	781a      	ldrb	r2, [r3, #0]
1000bf0a:	2a01      	cmp	r2, #1
1000bf0c:	d00c      	beq.n	1000bf28 <uart_read_complete_callback+0x24>
		read_status = UART_READ_DONE;
		
		if(user_callback_func == NULL)
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
	}
	else if(user_callback_func != NULL) {
1000bf0e:	4b0d      	ldr	r3, [pc, #52]	; (1000bf44 <uart_read_complete_callback+0x40>)
1000bf10:	681b      	ldr	r3, [r3, #0]
1000bf12:	2b00      	cmp	r3, #0
1000bf14:	d007      	beq.n	1000bf26 <uart_read_complete_callback+0x22>
		user_callback_func(string_input[0]);
1000bf16:	4c0c      	ldr	r4, [pc, #48]	; (1000bf48 <uart_read_complete_callback+0x44>)
1000bf18:	7820      	ldrb	r0, [r4, #0]
1000bf1a:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000bf1c:	2201      	movs	r2, #1
1000bf1e:	0021      	movs	r1, r4
1000bf20:	480a      	ldr	r0, [pc, #40]	; (1000bf4c <uart_read_complete_callback+0x48>)
1000bf22:	4b0b      	ldr	r3, [pc, #44]	; (1000bf50 <uart_read_complete_callback+0x4c>)
1000bf24:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000bf26:	bd10      	pop	{r4, pc}
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
	if(read_status == UART_READ_WAITING) {
		read_status = UART_READ_DONE;
1000bf28:	3201      	adds	r2, #1
1000bf2a:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000bf2c:	4b05      	ldr	r3, [pc, #20]	; (1000bf44 <uart_read_complete_callback+0x40>)
1000bf2e:	681b      	ldr	r3, [r3, #0]
1000bf30:	2b00      	cmp	r3, #0
1000bf32:	d1f8      	bne.n	1000bf26 <uart_read_complete_callback+0x22>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000bf34:	2102      	movs	r1, #2
1000bf36:	4805      	ldr	r0, [pc, #20]	; (1000bf4c <uart_read_complete_callback+0x48>)
1000bf38:	4b06      	ldr	r3, [pc, #24]	; (1000bf54 <uart_read_complete_callback+0x50>)
1000bf3a:	4798      	blx	r3
1000bf3c:	e7f3      	b.n	1000bf26 <uart_read_complete_callback+0x22>
1000bf3e:	46c0      	nop			; (mov r8, r8)
1000bf40:	1001d028 	.word	0x1001d028
1000bf44:	1001d030 	.word	0x1001d030
1000bf48:	1001d02c 	.word	0x1001d02c
1000bf4c:	1001dd58 	.word	0x1001dd58
1000bf50:	1000ce55 	.word	0x1000ce55
1000bf54:	1000ceb1 	.word	0x1000ceb1

1000bf58 <serial_console_init>:
		//Nothing to do.
	}
}

void serial_console_init(void)
{
1000bf58:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000bf5a:	2100      	movs	r1, #0
1000bf5c:	4b19      	ldr	r3, [pc, #100]	; (1000bfc4 <serial_console_init+0x6c>)
1000bf5e:	2000      	movs	r0, #0
1000bf60:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000bf62:	4c19      	ldr	r4, [pc, #100]	; (1000bfc8 <serial_console_init+0x70>)
1000bf64:	4b19      	ldr	r3, [pc, #100]	; (1000bfcc <serial_console_init+0x74>)
1000bf66:	0020      	movs	r0, r4
1000bf68:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000bf6a:	23e1      	movs	r3, #225	; 0xe1
1000bf6c:	025b      	lsls	r3, r3, #9
1000bf6e:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000bf70:	2203      	movs	r2, #3
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);

	uart_get_config_defaults(&config_uart);

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000bf72:	2302      	movs	r3, #2
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000bf74:	4d16      	ldr	r5, [pc, #88]	; (1000bfd0 <serial_console_init+0x78>)
1000bf76:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000bf78:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000bf7a:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000bf7c:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000bf7e:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000bf80:	6263      	str	r3, [r4, #36]	; 0x24
	uart_get_config_defaults(&config_uart);

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000bf82:	3201      	adds	r2, #1
1000bf84:	4b13      	ldr	r3, [pc, #76]	; (1000bfd4 <serial_console_init+0x7c>)
1000bf86:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000bf88:	3201      	adds	r2, #1
1000bf8a:	601d      	str	r5, [r3, #0]
1000bf8c:	6162      	str	r2, [r4, #20]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000bf8e:	4b12      	ldr	r3, [pc, #72]	; (1000bfd8 <serial_console_init+0x80>)
1000bf90:	4a12      	ldr	r2, [pc, #72]	; (1000bfdc <serial_console_init+0x84>)
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000bf92:	0028      	movs	r0, r5
1000bf94:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000bf96:	4a12      	ldr	r2, [pc, #72]	; (1000bfe0 <serial_console_init+0x88>)
1000bf98:	4b12      	ldr	r3, [pc, #72]	; (1000bfe4 <serial_console_init+0x8c>)
1000bf9a:	4913      	ldr	r1, [pc, #76]	; (1000bfe8 <serial_console_init+0x90>)
1000bf9c:	601a      	str	r2, [r3, #0]
1000bf9e:	0022      	movs	r2, r4
1000bfa0:	4b12      	ldr	r3, [pc, #72]	; (1000bfec <serial_console_init+0x94>)
1000bfa2:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000bfa4:	4e12      	ldr	r6, [pc, #72]	; (1000bff0 <serial_console_init+0x98>)
1000bfa6:	4c13      	ldr	r4, [pc, #76]	; (1000bff4 <serial_console_init+0x9c>)
1000bfa8:	6833      	ldr	r3, [r6, #0]
1000bfaa:	2100      	movs	r1, #0
1000bfac:	6898      	ldr	r0, [r3, #8]
1000bfae:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000bfb0:	6833      	ldr	r3, [r6, #0]
1000bfb2:	2100      	movs	r1, #0
1000bfb4:	6858      	ldr	r0, [r3, #4]
1000bfb6:	47a0      	blx	r4
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000bfb8:	0028      	movs	r0, r5
1000bfba:	2202      	movs	r2, #2
1000bfbc:	490e      	ldr	r1, [pc, #56]	; (1000bff8 <serial_console_init+0xa0>)
1000bfbe:	4b0f      	ldr	r3, [pc, #60]	; (1000bffc <serial_console_init+0xa4>)
1000bfc0:	4798      	blx	r3
}
1000bfc2:	bd70      	pop	{r4, r5, r6, pc}
1000bfc4:	1000d5f5 	.word	0x1000d5f5
1000bfc8:	1001dd7c 	.word	0x1001dd7c
1000bfcc:	1000cc59 	.word	0x1000cc59
1000bfd0:	1001dd58 	.word	0x1001dd58
1000bfd4:	1001e0a4 	.word	0x1001e0a4
1000bfd8:	1001e0a0 	.word	0x1001e0a0
1000bfdc:	1000beed 	.word	0x1000beed
1000bfe0:	1000bed5 	.word	0x1000bed5
1000bfe4:	1001e09c 	.word	0x1001e09c
1000bfe8:	40004000 	.word	0x40004000
1000bfec:	1000cc85 	.word	0x1000cc85
1000bff0:	1001b68c 	.word	0x1001b68c
1000bff4:	10018625 	.word	0x10018625
1000bff8:	1000bf05 	.word	0x1000bf05
1000bffc:	1000ce7d 	.word	0x1000ce7d

1000c000 <_time_start>:

void _time_start(unsigned int sec)
{
1000c000:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c002:	4647      	mov	r7, r8
	system_clock_get_value();
1000c004:	4c0e      	ldr	r4, [pc, #56]	; (1000c040 <_time_start+0x40>)
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
}

void _time_start(unsigned int sec)
{
1000c006:	b480      	push	{r7}
1000c008:	4680      	mov	r8, r0
	system_clock_get_value();
1000c00a:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000c00c:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000c00e:	4f0d      	ldr	r7, [pc, #52]	; (1000c044 <_time_start+0x44>)
1000c010:	47b8      	blx	r7
1000c012:	4e0d      	ldr	r6, [pc, #52]	; (1000c048 <_time_start+0x48>)
1000c014:	4a0d      	ldr	r2, [pc, #52]	; (1000c04c <_time_start+0x4c>)
1000c016:	4b0e      	ldr	r3, [pc, #56]	; (1000c050 <_time_start+0x50>)
1000c018:	47b0      	blx	r6
1000c01a:	0004      	movs	r4, r0
1000c01c:	20fa      	movs	r0, #250	; 0xfa
1000c01e:	4643      	mov	r3, r8
1000c020:	0080      	lsls	r0, r0, #2
1000c022:	4358      	muls	r0, r3
1000c024:	000d      	movs	r5, r1
1000c026:	47b8      	blx	r7
1000c028:	0002      	movs	r2, r0
1000c02a:	000b      	movs	r3, r1
1000c02c:	0020      	movs	r0, r4
1000c02e:	0029      	movs	r1, r5
1000c030:	47b0      	blx	r6
1000c032:	4b08      	ldr	r3, [pc, #32]	; (1000c054 <_time_start+0x54>)
1000c034:	4798      	blx	r3
1000c036:	4b08      	ldr	r3, [pc, #32]	; (1000c058 <_time_start+0x58>)
1000c038:	6018      	str	r0, [r3, #0]
}
1000c03a:	bc04      	pop	{r2}
1000c03c:	4690      	mov	r8, r2
1000c03e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c040:	1000d679 	.word	0x1000d679
1000c044:	10017e05 	.word	0x10017e05
1000c048:	10017179 	.word	0x10017179
1000c04c:	19feaec7 	.word	0x19feaec7
1000c050:	3f09d8ef 	.word	0x3f09d8ef
1000c054:	10015461 	.word	0x10015461
1000c058:	1001d024 	.word	0x1001d024

1000c05c <getchar_b11_timeout>:
	return --tick;
}

int getchar_b11_timeout(unsigned int sec)
{
	read_status = UART_READ_WAITING;
1000c05c:	2301      	movs	r3, #1
{
	return --tick;
}

int getchar_b11_timeout(unsigned int sec)
{
1000c05e:	b570      	push	{r4, r5, r6, lr}
	read_status = UART_READ_WAITING;
1000c060:	4c15      	ldr	r4, [pc, #84]	; (1000c0b8 <getchar_b11_timeout+0x5c>)
{
	return --tick;
}

int getchar_b11_timeout(unsigned int sec)
{
1000c062:	0005      	movs	r5, r0
	read_status = UART_READ_WAITING;
1000c064:	7023      	strb	r3, [r4, #0]
	
	if(user_callback_func == NULL)
1000c066:	4b15      	ldr	r3, [pc, #84]	; (1000c0bc <getchar_b11_timeout+0x60>)
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000c068:	4e15      	ldr	r6, [pc, #84]	; (1000c0c0 <getchar_b11_timeout+0x64>)

int getchar_b11_timeout(unsigned int sec)
{
	read_status = UART_READ_WAITING;
	
	if(user_callback_func == NULL)
1000c06a:	681b      	ldr	r3, [r3, #0]
1000c06c:	2b00      	cmp	r3, #0
1000c06e:	d01d      	beq.n	1000c0ac <getchar_b11_timeout+0x50>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);

	_time_start(sec);
1000c070:	0028      	movs	r0, r5
1000c072:	4b14      	ldr	r3, [pc, #80]	; (1000c0c4 <getchar_b11_timeout+0x68>)
1000c074:	4798      	blx	r3
	
	string_input[0] = 0;
1000c076:	2300      	movs	r3, #0
1000c078:	4d13      	ldr	r5, [pc, #76]	; (1000c0c8 <getchar_b11_timeout+0x6c>)
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000c07a:	2201      	movs	r2, #1
	if(user_callback_func == NULL)
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);

	_time_start(sec);
	
	string_input[0] = 0;
1000c07c:	702b      	strb	r3, [r5, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000c07e:	0029      	movs	r1, r5
1000c080:	4b12      	ldr	r3, [pc, #72]	; (1000c0cc <getchar_b11_timeout+0x70>)
1000c082:	0030      	movs	r0, r6
1000c084:	4798      	blx	r3
1000c086:	4812      	ldr	r0, [pc, #72]	; (1000c0d0 <getchar_b11_timeout+0x74>)
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000c088:	2100      	movs	r1, #0
1000c08a:	6803      	ldr	r3, [r0, #0]
1000c08c:	e003      	b.n	1000c096 <getchar_b11_timeout+0x3a>
	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
}

unsigned int _time_done()
{
	return --tick;
1000c08e:	3b01      	subs	r3, #1
1000c090:	2101      	movs	r1, #1
	_time_start(sec);
	
	string_input[0] = 0;
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000c092:	2b00      	cmp	r3, #0
1000c094:	d008      	beq.n	1000c0a8 <getchar_b11_timeout+0x4c>
1000c096:	7822      	ldrb	r2, [r4, #0]
1000c098:	2a02      	cmp	r2, #2
1000c09a:	d1f8      	bne.n	1000c08e <getchar_b11_timeout+0x32>
1000c09c:	2900      	cmp	r1, #0
1000c09e:	d103      	bne.n	1000c0a8 <getchar_b11_timeout+0x4c>
	
	read_status = UART_READ_NONE;
1000c0a0:	2300      	movs	r3, #0

	return string_input[0];
1000c0a2:	7828      	ldrb	r0, [r5, #0]
	string_input[0] = 0;
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
	
	read_status = UART_READ_NONE;
1000c0a4:	7023      	strb	r3, [r4, #0]

	return string_input[0];
}
1000c0a6:	bd70      	pop	{r4, r5, r6, pc}
1000c0a8:	6003      	str	r3, [r0, #0]
1000c0aa:	e7f9      	b.n	1000c0a0 <getchar_b11_timeout+0x44>
int getchar_b11_timeout(unsigned int sec)
{
	read_status = UART_READ_WAITING;
	
	if(user_callback_func == NULL)
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000c0ac:	2102      	movs	r1, #2
1000c0ae:	0030      	movs	r0, r6
1000c0b0:	4b08      	ldr	r3, [pc, #32]	; (1000c0d4 <getchar_b11_timeout+0x78>)
1000c0b2:	4798      	blx	r3
1000c0b4:	e7dc      	b.n	1000c070 <getchar_b11_timeout+0x14>
1000c0b6:	46c0      	nop			; (mov r8, r8)
1000c0b8:	1001d028 	.word	0x1001d028
1000c0bc:	1001d030 	.word	0x1001d030
1000c0c0:	1001dd58 	.word	0x1001dd58
1000c0c4:	1000c001 	.word	0x1000c001
1000c0c8:	1001d02c 	.word	0x1001d02c
1000c0cc:	1000ce55 	.word	0x1000ce55
1000c0d0:	1001d024 	.word	0x1001d024
1000c0d4:	1000ce91 	.word	0x1000ce91

1000c0d8 <platform_event_post>:
	event->next = platform_event_free_list;
	platform_event_free_list = event;
}

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000c0d8:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000c0da:	4b0c      	ldr	r3, [pc, #48]	; (1000c10c <platform_event_post+0x34>)
1000c0dc:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000c0de:	2c00      	cmp	r4, #0
1000c0e0:	d010      	beq.n	1000c104 <platform_event_post+0x2c>
	{
		platform_event_free_list = evt->next;
1000c0e2:	6825      	ldr	r5, [r4, #0]
		
		evt->next = NULL;
		evt->data = data;
		evt->data_len = data_len;
1000c0e4:	80e2      	strh	r2, [r4, #6]
{
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
	if(evt != NULL)
	{
		platform_event_free_list = evt->next;
1000c0e6:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000c0e8:	2300      	movs	r3, #0
1000c0ea:	6023      	str	r3, [r4, #0]
		evt->data = data;
		evt->data_len = data_len;
		evt->event_type = event_type;

		if(platform_event_pending_list == NULL)
1000c0ec:	4b08      	ldr	r3, [pc, #32]	; (1000c110 <platform_event_post+0x38>)
	if(evt != NULL)
	{
		platform_event_free_list = evt->next;
		
		evt->next = NULL;
		evt->data = data;
1000c0ee:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
		evt->event_type = event_type;

		if(platform_event_pending_list == NULL)
1000c0f0:	681a      	ldr	r2, [r3, #0]
		platform_event_free_list = evt->next;
		
		evt->next = NULL;
		evt->data = data;
		evt->data_len = data_len;
		evt->event_type = event_type;
1000c0f2:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000c0f4:	2a00      	cmp	r2, #0
1000c0f6:	d101      	bne.n	1000c0fc <platform_event_post+0x24>
1000c0f8:	e005      	b.n	1000c106 <platform_event_post+0x2e>
1000c0fa:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000c0fc:	6813      	ldr	r3, [r2, #0]
1000c0fe:	2b00      	cmp	r3, #0
1000c100:	d1fb      	bne.n	1000c0fa <platform_event_post+0x22>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000c102:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000c104:	bd30      	pop	{r4, r5, pc}
		evt->data_len = data_len;
		evt->event_type = event_type;

		if(platform_event_pending_list == NULL)
		{
			platform_event_pending_list = evt;
1000c106:	601c      	str	r4, [r3, #0]
1000c108:	e7fc      	b.n	1000c104 <platform_event_post+0x2c>
1000c10a:	46c0      	nop			; (mov r8, r8)
1000c10c:	1001d038 	.word	0x1001d038
1000c110:	1001d034 	.word	0x1001d034

1000c114 <platform_event_init>:

void platform_event_init()
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
1000c114:	2200      	movs	r2, #0
	return status;
	
}

void platform_event_init()
{
1000c116:	b510      	push	{r4, lr}
1000c118:	4c07      	ldr	r4, [pc, #28]	; (1000c138 <platform_event_init+0x24>)
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
1000c11a:	4b08      	ldr	r3, [pc, #32]	; (1000c13c <platform_event_init+0x28>)
1000c11c:	0020      	movs	r0, r4
1000c11e:	601a      	str	r2, [r3, #0]
1000c120:	0023      	movs	r3, r4
1000c122:	3078      	adds	r0, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000c124:	0019      	movs	r1, r3
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000c126:	601a      	str	r2, [r3, #0]
1000c128:	330c      	adds	r3, #12
1000c12a:	000a      	movs	r2, r1
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000c12c:	4283      	cmp	r3, r0
1000c12e:	d1f9      	bne.n	1000c124 <platform_event_init+0x10>
1000c130:	4b03      	ldr	r3, [pc, #12]	; (1000c140 <platform_event_init+0x2c>)
1000c132:	346c      	adds	r4, #108	; 0x6c
1000c134:	601c      	str	r4, [r3, #0]
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000c136:	bd10      	pop	{r4, pc}
1000c138:	1001d03c 	.word	0x1001d03c
1000c13c:	1001d034 	.word	0x1001d034
1000c140:	1001d038 	.word	0x1001d038

1000c144 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000c144:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000c146:	4b06      	ldr	r3, [pc, #24]	; (1000c160 <samb11_plf_resume_callback+0x1c>)
1000c148:	4a06      	ldr	r2, [pc, #24]	; (1000c164 <samb11_plf_resume_callback+0x20>)
1000c14a:	6819      	ldr	r1, [r3, #0]
1000c14c:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000c14e:	685a      	ldr	r2, [r3, #4]
1000c150:	4b05      	ldr	r3, [pc, #20]	; (1000c168 <samb11_plf_resume_callback+0x24>)
1000c152:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000c154:	4b05      	ldr	r3, [pc, #20]	; (1000c16c <samb11_plf_resume_callback+0x28>)
1000c156:	681b      	ldr	r3, [r3, #0]
1000c158:	2b00      	cmp	r3, #0
1000c15a:	d000      	beq.n	1000c15e <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000c15c:	4798      	blx	r3
	}
}
1000c15e:	bd10      	pop	{r4, pc}
1000c160:	1001dda4 	.word	0x1001dda4
1000c164:	4000b00c 	.word	0x4000b00c
1000c168:	4000b010 	.word	0x4000b010
1000c16c:	1001e080 	.word	0x1001e080

1000c170 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000c170:	b570      	push	{r4, r5, r6, lr}
1000c172:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000c174:	4b13      	ldr	r3, [pc, #76]	; (1000c1c4 <at_ke_msg_send+0x54>)
	ke_msg_send(param_ptr);
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000c176:	3c0c      	subs	r4, #12
}

static void at_ke_msg_send(void const * param_ptr)
{
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000c178:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000c17a:	4b13      	ldr	r3, [pc, #76]	; (1000c1c8 <at_ke_msg_send+0x58>)
1000c17c:	681b      	ldr	r3, [r3, #0]
1000c17e:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000c180:	2c00      	cmp	r4, #0
1000c182:	d018      	beq.n	1000c1b6 <at_ke_msg_send+0x46>
1000c184:	88e3      	ldrh	r3, [r4, #6]
1000c186:	2b05      	cmp	r3, #5
1000c188:	d015      	beq.n	1000c1b6 <at_ke_msg_send+0x46>
		if(osc_en == 0)
1000c18a:	07eb      	lsls	r3, r5, #31
1000c18c:	d414      	bmi.n	1000c1b8 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000c18e:	4b0f      	ldr	r3, [pc, #60]	; (1000c1cc <at_ke_msg_send+0x5c>)
1000c190:	2002      	movs	r0, #2
1000c192:	681b      	ldr	r3, [r3, #0]
1000c194:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000c196:	4b0e      	ldr	r3, [pc, #56]	; (1000c1d0 <at_ke_msg_send+0x60>)
1000c198:	681b      	ldr	r3, [r3, #0]
1000c19a:	4798      	blx	r3
1000c19c:	4c0d      	ldr	r4, [pc, #52]	; (1000c1d4 <at_ke_msg_send+0x64>)
			while (pwr_wait_BLE_out_of_reset(3));
1000c19e:	2003      	movs	r0, #3
1000c1a0:	6823      	ldr	r3, [r4, #0]
1000c1a2:	4798      	blx	r3
1000c1a4:	2800      	cmp	r0, #0
1000c1a6:	d1fa      	bne.n	1000c19e <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000c1a8:	4b0b      	ldr	r3, [pc, #44]	; (1000c1d8 <at_ke_msg_send+0x68>)
1000c1aa:	3002      	adds	r0, #2
1000c1ac:	681b      	ldr	r3, [r3, #0]
1000c1ae:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000c1b0:	2201      	movs	r2, #1
1000c1b2:	4b0a      	ldr	r3, [pc, #40]	; (1000c1dc <at_ke_msg_send+0x6c>)
1000c1b4:	601a      	str	r2, [r3, #0]
		{
			/*  */
			os_sem_up(gstrFwSem);
		}
	}
}
1000c1b6:	bd70      	pop	{r4, r5, r6, pc}
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000c1b8:	4b09      	ldr	r3, [pc, #36]	; (1000c1e0 <at_ke_msg_send+0x70>)
1000c1ba:	6818      	ldr	r0, [r3, #0]
1000c1bc:	4b09      	ldr	r3, [pc, #36]	; (1000c1e4 <at_ke_msg_send+0x74>)
1000c1be:	681b      	ldr	r3, [r3, #0]
1000c1c0:	4798      	blx	r3
		}
	}
}
1000c1c2:	e7f8      	b.n	1000c1b6 <at_ke_msg_send+0x46>
1000c1c4:	4000b1ec 	.word	0x4000b1ec
1000c1c8:	1001d0e4 	.word	0x1001d0e4
1000c1cc:	1001d0dc 	.word	0x1001d0dc
1000c1d0:	1001d0ec 	.word	0x1001d0ec
1000c1d4:	1001d0c8 	.word	0x1001d0c8
1000c1d8:	1001d0d0 	.word	0x1001d0d0
1000c1dc:	4000b020 	.word	0x4000b020
1000c1e0:	1001d0d4 	.word	0x1001d0d4
1000c1e4:	1001d0c4 	.word	0x1001d0c4

1000c1e8 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000c1e8:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000c1ea:	4c0e      	ldr	r4, [pc, #56]	; (1000c224 <init_port_list+0x3c>)
1000c1ec:	2100      	movs	r1, #0
1000c1ee:	2232      	movs	r2, #50	; 0x32
1000c1f0:	0020      	movs	r0, r4
1000c1f2:	4b0d      	ldr	r3, [pc, #52]	; (1000c228 <init_port_list+0x40>)
1000c1f4:	4798      	blx	r3
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
1000c1f6:	2601      	movs	r6, #1
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000c1f8:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
1000c1fa:	2502      	movs	r5, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000c1fc:	004a      	lsls	r2, r1, #1
1000c1fe:	54a1      	strb	r1, [r4, r2]
		port_list[i].bit.available = 1;
1000c200:	18a2      	adds	r2, r4, r2
1000c202:	7853      	ldrb	r3, [r2, #1]
1000c204:	3101      	adds	r1, #1
1000c206:	4333      	orrs	r3, r6
		port_list[i].bit.configured = 0;
1000c208:	b2db      	uxtb	r3, r3
1000c20a:	43ab      	bics	r3, r5
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
1000c20c:	2001      	movs	r0, #1
		port_list[i].bit.configured = 0;
1000c20e:	7053      	strb	r3, [r2, #1]

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000c210:	2919      	cmp	r1, #25
1000c212:	d1f3      	bne.n	1000c1fc <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000c214:	7863      	ldrb	r3, [r4, #1]
1000c216:	4383      	bics	r3, r0
1000c218:	7063      	strb	r3, [r4, #1]
	port_list[1].bit.available = 0;
1000c21a:	78e3      	ldrb	r3, [r4, #3]
1000c21c:	4383      	bics	r3, r0
1000c21e:	70e3      	strb	r3, [r4, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000c220:	bd70      	pop	{r4, r5, r6, pc}
1000c222:	46c0      	nop			; (mov r8, r8)
1000c224:	1001ddc0 	.word	0x1001ddc0
1000c228:	1001830b 	.word	0x1001830b

1000c22c <platform_driver_init>:
	
	//store default values
}

plf_drv_status platform_driver_init()
{
1000c22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c22e:	4644      	mov	r4, r8
1000c230:	465f      	mov	r7, fp
1000c232:	4656      	mov	r6, sl
1000c234:	464d      	mov	r5, r9
1000c236:	b4f0      	push	{r4, r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000c238:	4c55      	ldr	r4, [pc, #340]	; (1000c390 <platform_driver_init+0x164>)
1000c23a:	7823      	ldrb	r3, [r4, #0]
1000c23c:	2b00      	cmp	r3, #0
1000c23e:	d004      	beq.n	1000c24a <platform_driver_init+0x1e>
1000c240:	7823      	ldrb	r3, [r4, #0]
1000c242:	b2db      	uxtb	r3, r3
1000c244:	2b01      	cmp	r3, #1
1000c246:	d100      	bne.n	1000c24a <platform_driver_init+0x1e>
1000c248:	e09e      	b.n	1000c388 <platform_driver_init+0x15c>
		init_port_list();
1000c24a:	4b52      	ldr	r3, [pc, #328]	; (1000c394 <platform_driver_init+0x168>)
1000c24c:	4798      	blx	r3
}

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000c24e:	4a52      	ldr	r2, [pc, #328]	; (1000c398 <platform_driver_init+0x16c>)
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000c250:	4b52      	ldr	r3, [pc, #328]	; (1000c39c <platform_driver_init+0x170>)
}

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000c252:	6811      	ldr	r1, [r2, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000c254:	4d52      	ldr	r5, [pc, #328]	; (1000c3a0 <platform_driver_init+0x174>)
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000c256:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000c258:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000c25a:	4a52      	ldr	r2, [pc, #328]	; (1000c3a4 <platform_driver_init+0x178>)
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000c25c:	4952      	ldr	r1, [pc, #328]	; (1000c3a8 <platform_driver_init+0x17c>)
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
	default_samb11_clock_init[0] = regval;
1000c25e:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000c260:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000c262:	4b52      	ldr	r3, [pc, #328]	; (1000c3ac <platform_driver_init+0x180>)
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000c264:	4e52      	ldr	r6, [pc, #328]	; (1000c3b0 <platform_driver_init+0x184>)
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000c266:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000c268:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000c26a:	6053      	str	r3, [r2, #4]
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
		init_port_list();
		init_clock();
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000c26c:	2300      	movs	r3, #0
1000c26e:	4699      	mov	r9, r3
1000c270:	464a      	mov	r2, r9
1000c272:	4b50      	ldr	r3, [pc, #320]	; (1000c3b4 <platform_driver_init+0x188>)
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000c274:	4950      	ldr	r1, [pc, #320]	; (1000c3b8 <platform_driver_init+0x18c>)
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
		init_port_list();
		init_clock();
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000c276:	601a      	str	r2, [r3, #0]
1000c278:	2280      	movs	r2, #128	; 0x80
1000c27a:	2380      	movs	r3, #128	; 0x80
1000c27c:	0412      	lsls	r2, r2, #16
1000c27e:	50ea      	str	r2, [r5, r3]
1000c280:	4693      	mov	fp, r2
1000c282:	2280      	movs	r2, #128	; 0x80
1000c284:	0452      	lsls	r2, r2, #17
1000c286:	50ea      	str	r2, [r5, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000c288:	4b4c      	ldr	r3, [pc, #304]	; (1000c3bc <platform_driver_init+0x190>)
1000c28a:	4692      	mov	sl, r2
1000c28c:	6033      	str	r3, [r6, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000c28e:	4a4c      	ldr	r2, [pc, #304]	; (1000c3c0 <platform_driver_init+0x194>)
1000c290:	4b4c      	ldr	r3, [pc, #304]	; (1000c3c4 <platform_driver_init+0x198>)
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000c292:	2028      	movs	r0, #40	; 0x28
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000c294:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000c296:	4a4c      	ldr	r2, [pc, #304]	; (1000c3c8 <platform_driver_init+0x19c>)
1000c298:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000c29a:	4a4c      	ldr	r2, [pc, #304]	; (1000c3cc <platform_driver_init+0x1a0>)
1000c29c:	6811      	ldr	r1, [r2, #0]
1000c29e:	4a4c      	ldr	r2, [pc, #304]	; (1000c3d0 <platform_driver_init+0x1a4>)
1000c2a0:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000c2a2:	4a4c      	ldr	r2, [pc, #304]	; (1000c3d4 <platform_driver_init+0x1a8>)
1000c2a4:	6811      	ldr	r1, [r2, #0]
1000c2a6:	4a4c      	ldr	r2, [pc, #304]	; (1000c3d8 <platform_driver_init+0x1ac>)
1000c2a8:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000c2aa:	4a4c      	ldr	r2, [pc, #304]	; (1000c3dc <platform_driver_init+0x1b0>)
1000c2ac:	494c      	ldr	r1, [pc, #304]	; (1000c3e0 <platform_driver_init+0x1b4>)
1000c2ae:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000c2b0:	4a4c      	ldr	r2, [pc, #304]	; (1000c3e4 <platform_driver_init+0x1b8>)
1000c2b2:	494d      	ldr	r1, [pc, #308]	; (1000c3e8 <platform_driver_init+0x1bc>)
1000c2b4:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000c2b6:	4a4d      	ldr	r2, [pc, #308]	; (1000c3ec <platform_driver_init+0x1c0>)
1000c2b8:	4690      	mov	r8, r2
1000c2ba:	4641      	mov	r1, r8
1000c2bc:	4a4c      	ldr	r2, [pc, #304]	; (1000c3f0 <platform_driver_init+0x1c4>)
1000c2be:	600a      	str	r2, [r1, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000c2c0:	4a4c      	ldr	r2, [pc, #304]	; (1000c3f4 <platform_driver_init+0x1c8>)
1000c2c2:	494d      	ldr	r1, [pc, #308]	; (1000c3f8 <platform_driver_init+0x1cc>)
1000c2c4:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000c2c6:	494d      	ldr	r1, [pc, #308]	; (1000c3fc <platform_driver_init+0x1d0>)
1000c2c8:	4a4d      	ldr	r2, [pc, #308]	; (1000c400 <platform_driver_init+0x1d4>)
1000c2ca:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000c2cc:	4f4d      	ldr	r7, [pc, #308]	; (1000c404 <platform_driver_init+0x1d8>)
1000c2ce:	4a4e      	ldr	r2, [pc, #312]	; (1000c408 <platform_driver_init+0x1dc>)
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000c2d0:	494e      	ldr	r1, [pc, #312]	; (1000c40c <platform_driver_init+0x1e0>)
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
		apps_resume_cb = (uint32_t *)0x1004003c;
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
		updateuartbr_fp = (void (*)())0x10041FC4;
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000c2d2:	603a      	str	r2, [r7, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000c2d4:	4a4e      	ldr	r2, [pc, #312]	; (1000c410 <platform_driver_init+0x1e4>)
1000c2d6:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000c2d8:	4a4e      	ldr	r2, [pc, #312]	; (1000c414 <platform_driver_init+0x1e8>)
1000c2da:	494f      	ldr	r1, [pc, #316]	; (1000c418 <platform_driver_init+0x1ec>)
1000c2dc:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000c2de:	4a4f      	ldr	r2, [pc, #316]	; (1000c41c <platform_driver_init+0x1f0>)
1000c2e0:	494f      	ldr	r1, [pc, #316]	; (1000c420 <platform_driver_init+0x1f4>)
1000c2e2:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000c2e4:	4a4f      	ldr	r2, [pc, #316]	; (1000c424 <platform_driver_init+0x1f8>)
1000c2e6:	4950      	ldr	r1, [pc, #320]	; (1000c428 <platform_driver_init+0x1fc>)
1000c2e8:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000c2ea:	4a50      	ldr	r2, [pc, #320]	; (1000c42c <platform_driver_init+0x200>)
1000c2ec:	4950      	ldr	r1, [pc, #320]	; (1000c430 <platform_driver_init+0x204>)
1000c2ee:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000c2f0:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000c2f2:	4950      	ldr	r1, [pc, #320]	; (1000c434 <platform_driver_init+0x208>)
1000c2f4:	6833      	ldr	r3, [r6, #0]
1000c2f6:	2028      	movs	r0, #40	; 0x28
1000c2f8:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000c2fa:	6833      	ldr	r3, [r6, #0]
1000c2fc:	494e      	ldr	r1, [pc, #312]	; (1000c438 <platform_driver_init+0x20c>)
1000c2fe:	2027      	movs	r0, #39	; 0x27
1000c300:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000c302:	4b4e      	ldr	r3, [pc, #312]	; (1000c43c <platform_driver_init+0x210>)
		gstrFwSem 		= (void*)0x100405ec;
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
		InternalAppMsgQHandle = (void*)0x10040c20;
		ke_free = (void(*)(void*))0x00019f09;
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000c304:	2100      	movs	r1, #0
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000c306:	681a      	ldr	r2, [r3, #0]
1000c308:	4b4d      	ldr	r3, [pc, #308]	; (1000c440 <platform_driver_init+0x214>)
		gstrFwSem 		= (void*)0x100405ec;
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
		InternalAppMsgQHandle = (void*)0x10040c20;
		ke_free = (void(*)(void*))0x00019f09;
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000c30a:	484e      	ldr	r0, [pc, #312]	; (1000c444 <platform_driver_init+0x218>)
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000c30c:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000c30e:	4b4e      	ldr	r3, [pc, #312]	; (1000c448 <platform_driver_init+0x21c>)
1000c310:	4a4e      	ldr	r2, [pc, #312]	; (1000c44c <platform_driver_init+0x220>)
1000c312:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000c314:	4b4e      	ldr	r3, [pc, #312]	; (1000c450 <platform_driver_init+0x224>)
1000c316:	4a4f      	ldr	r2, [pc, #316]	; (1000c454 <platform_driver_init+0x228>)
1000c318:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000c31a:	4b4f      	ldr	r3, [pc, #316]	; (1000c458 <platform_driver_init+0x22c>)
1000c31c:	4a4f      	ldr	r2, [pc, #316]	; (1000c45c <platform_driver_init+0x230>)
1000c31e:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000c320:	4b4f      	ldr	r3, [pc, #316]	; (1000c460 <platform_driver_init+0x234>)
1000c322:	4a50      	ldr	r2, [pc, #320]	; (1000c464 <platform_driver_init+0x238>)
1000c324:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000c326:	4b50      	ldr	r3, [pc, #320]	; (1000c468 <platform_driver_init+0x23c>)
1000c328:	4a50      	ldr	r2, [pc, #320]	; (1000c46c <platform_driver_init+0x240>)
1000c32a:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000c32c:	4b50      	ldr	r3, [pc, #320]	; (1000c470 <platform_driver_init+0x244>)
1000c32e:	4a51      	ldr	r2, [pc, #324]	; (1000c474 <platform_driver_init+0x248>)
1000c330:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000c332:	4b51      	ldr	r3, [pc, #324]	; (1000c478 <platform_driver_init+0x24c>)
1000c334:	4a51      	ldr	r2, [pc, #324]	; (1000c47c <platform_driver_init+0x250>)
1000c336:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000c338:	22a0      	movs	r2, #160	; 0xa0
1000c33a:	4b51      	ldr	r3, [pc, #324]	; (1000c480 <platform_driver_init+0x254>)
1000c33c:	0092      	lsls	r2, r2, #2
1000c33e:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000c340:	2280      	movs	r2, #128	; 0x80
1000c342:	4b50      	ldr	r3, [pc, #320]	; (1000c484 <platform_driver_init+0x258>)
1000c344:	0092      	lsls	r2, r2, #2
1000c346:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000c348:	4b4f      	ldr	r3, [pc, #316]	; (1000c488 <platform_driver_init+0x25c>)
1000c34a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000c34c:	465b      	mov	r3, fp
1000c34e:	602b      	str	r3, [r5, #0]
1000c350:	4653      	mov	r3, sl
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000c352:	464a      	mov	r2, r9
1000c354:	602b      	str	r3, [r5, #0]
1000c356:	4b4d      	ldr	r3, [pc, #308]	; (1000c48c <platform_driver_init+0x260>)
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
		wakeup_int_unregister_callback(0);
1000c358:	4d4d      	ldr	r5, [pc, #308]	; (1000c490 <platform_driver_init+0x264>)
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000c35a:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000c35c:	4643      	mov	r3, r8
1000c35e:	4a4d      	ldr	r2, [pc, #308]	; (1000c494 <platform_driver_init+0x268>)
1000c360:	681b      	ldr	r3, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
		wakeup_int_unregister_callback(0);
1000c362:	2000      	movs	r0, #0
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000c364:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000c366:	683b      	ldr	r3, [r7, #0]
1000c368:	4a4b      	ldr	r2, [pc, #300]	; (1000c498 <platform_driver_init+0x26c>)
1000c36a:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000c36c:	47a8      	blx	r5
		wakeup_int_unregister_callback(1);
1000c36e:	2001      	movs	r0, #1
1000c370:	47a8      	blx	r5
		wakeup_int_unregister_callback(2);
1000c372:	2002      	movs	r0, #2
1000c374:	47a8      	blx	r5
		platform_initialized = 1;
1000c376:	2301      	movs	r3, #1
		status = STATUS_SUCCESS;
1000c378:	2000      	movs	r0, #0
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
		wakeup_int_unregister_callback(0);
		wakeup_int_unregister_callback(1);
		wakeup_int_unregister_callback(2);
		platform_initialized = 1;
1000c37a:	7023      	strb	r3, [r4, #0]
	else {
		platform_initialized = 1;
		status = STATUS_ALREADY_INITIALIZED;
	}
	return status;
}
1000c37c:	bc3c      	pop	{r2, r3, r4, r5}
1000c37e:	4690      	mov	r8, r2
1000c380:	4699      	mov	r9, r3
1000c382:	46a2      	mov	sl, r4
1000c384:	46ab      	mov	fp, r5
1000c386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wakeup_int_unregister_callback(2);
		platform_initialized = 1;
		status = STATUS_SUCCESS;
	}
	else {
		platform_initialized = 1;
1000c388:	7023      	strb	r3, [r4, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000c38a:	2001      	movs	r0, #1
1000c38c:	e7f6      	b.n	1000c37c <platform_driver_init+0x150>
1000c38e:	46c0      	nop			; (mov r8, r8)
1000c390:	1001d0cc 	.word	0x1001d0cc
1000c394:	1000c1e9 	.word	0x1000c1e9
1000c398:	4000b00c 	.word	0x4000b00c
1000c39c:	fffe0fd3 	.word	0xfffe0fd3
1000c3a0:	e000e100 	.word	0xe000e100
1000c3a4:	1001dda4 	.word	0x1001dda4
1000c3a8:	4000b010 	.word	0x4000b010
1000c3ac:	ffffe7c0 	.word	0xffffe7c0
1000c3b0:	1001e074 	.word	0x1001e074
1000c3b4:	1001d0e8 	.word	0x1001d0e8
1000c3b8:	0001bc51 	.word	0x0001bc51
1000c3bc:	000007d7 	.word	0x000007d7
1000c3c0:	1001ddb0 	.word	0x1001ddb0
1000c3c4:	000007bd 	.word	0x000007bd
1000c3c8:	1001e078 	.word	0x1001e078
1000c3cc:	100400bc 	.word	0x100400bc
1000c3d0:	1001d0c0 	.word	0x1001d0c0
1000c3d4:	100400b8 	.word	0x100400b8
1000c3d8:	1001d0bc 	.word	0x1001d0bc
1000c3dc:	1001ddac 	.word	0x1001ddac
1000c3e0:	0001b99f 	.word	0x0001b99f
1000c3e4:	1001ddb8 	.word	0x1001ddb8
1000c3e8:	0001b9db 	.word	0x0001b9db
1000c3ec:	1001e088 	.word	0x1001e088
1000c3f0:	1004003c 	.word	0x1004003c
1000c3f4:	1001ddbc 	.word	0x1001ddbc
1000c3f8:	10041fc0 	.word	0x10041fc0
1000c3fc:	10041fc4 	.word	0x10041fc4
1000c400:	1001e084 	.word	0x1001e084
1000c404:	1001e07c 	.word	0x1001e07c
1000c408:	10041fd4 	.word	0x10041fd4
1000c40c:	10041fd8 	.word	0x10041fd8
1000c410:	1001ddb4 	.word	0x1001ddb4
1000c414:	1001d0dc 	.word	0x1001d0dc
1000c418:	0001cbe9 	.word	0x0001cbe9
1000c41c:	1001d0d0 	.word	0x1001d0d0
1000c420:	0001cd8f 	.word	0x0001cd8f
1000c424:	1001d0ec 	.word	0x1001d0ec
1000c428:	0001cea3 	.word	0x0001cea3
1000c42c:	1001d0c8 	.word	0x1001d0c8
1000c430:	0001cbcf 	.word	0x0001cbcf
1000c434:	1000c8c9 	.word	0x1000c8c9
1000c438:	1000c869 	.word	0x1000c869
1000c43c:	100400e4 	.word	0x100400e4
1000c440:	1001d0e4 	.word	0x1001d0e4
1000c444:	1001ddf4 	.word	0x1001ddf4
1000c448:	1001d0f4 	.word	0x1001d0f4
1000c44c:	00019fe9 	.word	0x00019fe9
1000c450:	1001d0c4 	.word	0x1001d0c4
1000c454:	0001dbdd 	.word	0x0001dbdd
1000c458:	1001d0d8 	.word	0x1001d0d8
1000c45c:	0001dc5b 	.word	0x0001dc5b
1000c460:	1001d0d4 	.word	0x1001d0d4
1000c464:	100405ec 	.word	0x100405ec
1000c468:	1001d0e0 	.word	0x1001d0e0
1000c46c:	0001d5e3 	.word	0x0001d5e3
1000c470:	1001d0f8 	.word	0x1001d0f8
1000c474:	10040c20 	.word	0x10040c20
1000c478:	1001d0b8 	.word	0x1001d0b8
1000c47c:	00019f09 	.word	0x00019f09
1000c480:	1001830b 	.word	0x1001830b
1000c484:	1001e08c 	.word	0x1001e08c
1000c488:	1000c115 	.word	0x1000c115
1000c48c:	1001e080 	.word	0x1001e080
1000c490:	1000c909 	.word	0x1000c909
1000c494:	1000c145 	.word	0x1000c145
1000c498:	1000c925 	.word	0x1000c925

1000c49c <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000c49c:	4b05      	ldr	r3, [pc, #20]	; (1000c4b4 <platform_register_ble_msg_handler+0x18>)
1000c49e:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000c4a0:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000c4a2:	2a01      	cmp	r2, #1
1000c4a4:	d001      	beq.n	1000c4aa <platform_register_ble_msg_handler+0xe>
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000c4a6:	0018      	movs	r0, r3
1000c4a8:	4770      	bx	lr

plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
		ble_stack_message_handler = fp;
1000c4aa:	4b03      	ldr	r3, [pc, #12]	; (1000c4b8 <platform_register_ble_msg_handler+0x1c>)
1000c4ac:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000c4ae:	2300      	movs	r3, #0
1000c4b0:	e7f9      	b.n	1000c4a6 <platform_register_ble_msg_handler+0xa>
1000c4b2:	46c0      	nop			; (mov r8, r8)
1000c4b4:	1001d0cc 	.word	0x1001d0cc
1000c4b8:	1001d0e8 	.word	0x1001d0e8

1000c4bc <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000c4bc:	b570      	push	{r4, r5, r6, lr}
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000c4be:	4b0e      	ldr	r3, [pc, #56]	; (1000c4f8 <platform_interface_send+0x3c>)


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000c4c0:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000c4c2:	681b      	ldr	r3, [r3, #0]
	struct ke_msghdr *p_msg_hdr = (struct ke_msghdr *)((void *)data);
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
1000c4c4:	8840      	ldrh	r0, [r0, #2]
	if(gapm_get_task_from_id != NULL)
1000c4c6:	2b00      	cmp	r3, #0
1000c4c8:	d014      	beq.n	1000c4f4 <platform_interface_send+0x38>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000c4ca:	4798      	blx	r3
1000c4cc:	0001      	movs	r1, r0
1000c4ce:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000c4d0:	4d0a      	ldr	r5, [pc, #40]	; (1000c4fc <platform_interface_send+0x40>)
1000c4d2:	88a2      	ldrh	r2, [r4, #4]
1000c4d4:	682d      	ldr	r5, [r5, #0]
1000c4d6:	88e3      	ldrh	r3, [r4, #6]
1000c4d8:	8820      	ldrh	r0, [r4, #0]
1000c4da:	47a8      	blx	r5
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000c4dc:	88e2      	ldrh	r2, [r4, #6]
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000c4de:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000c4e0:	2a00      	cmp	r2, #0
1000c4e2:	d003      	beq.n	1000c4ec <platform_interface_send+0x30>
		at_ke_msg_send(params);
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000c4e4:	0021      	movs	r1, r4
1000c4e6:	4b06      	ldr	r3, [pc, #24]	; (1000c500 <platform_interface_send+0x44>)
1000c4e8:	3108      	adds	r1, #8
1000c4ea:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000c4ec:	0028      	movs	r0, r5
1000c4ee:	4b05      	ldr	r3, [pc, #20]	; (1000c504 <platform_interface_send+0x48>)
1000c4f0:	4798      	blx	r3
	}
}
1000c4f2:	bd70      	pop	{r4, r5, r6, pc}
1000c4f4:	0001      	movs	r1, r0
1000c4f6:	e7eb      	b.n	1000c4d0 <platform_interface_send+0x14>
1000c4f8:	1001d0c0 	.word	0x1001d0c0
1000c4fc:	1001d0f4 	.word	0x1001d0f4
1000c500:	100182cf 	.word	0x100182cf
1000c504:	1000c171 	.word	0x1000c171

1000c508 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000c508:	b570      	push	{r4, r5, r6, lr}
1000c50a:	0016      	movs	r6, r2
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000c50c:	020a      	lsls	r2, r1, #8
		at_ke_msg_send(params);
	}
}

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000c50e:	001d      	movs	r5, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000c510:	4302      	orrs	r2, r0
1000c512:	20a0      	movs	r0, #160	; 0xa0
1000c514:	4b09      	ldr	r3, [pc, #36]	; (1000c53c <send_plf_int_msg_ind+0x34>)
1000c516:	2105      	movs	r1, #5
1000c518:	681c      	ldr	r4, [r3, #0]
1000c51a:	00c0      	lsls	r0, r0, #3
1000c51c:	002b      	movs	r3, r5
1000c51e:	47a0      	blx	r4
1000c520:	1e04      	subs	r4, r0, #0
											
	//no params
	if(params != NULL) {
1000c522:	d00a      	beq.n	1000c53a <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000c524:	2d00      	cmp	r5, #0
1000c526:	d005      	beq.n	1000c534 <send_plf_int_msg_ind+0x2c>
1000c528:	2e00      	cmp	r6, #0
1000c52a:	d003      	beq.n	1000c534 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000c52c:	002a      	movs	r2, r5
1000c52e:	0031      	movs	r1, r6
1000c530:	4b03      	ldr	r3, [pc, #12]	; (1000c540 <send_plf_int_msg_ind+0x38>)
1000c532:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000c534:	0020      	movs	r0, r4
1000c536:	4b03      	ldr	r3, [pc, #12]	; (1000c544 <send_plf_int_msg_ind+0x3c>)
1000c538:	4798      	blx	r3
	}
}
1000c53a:	bd70      	pop	{r4, r5, r6, pc}
1000c53c:	1001d0f4 	.word	0x1001d0f4
1000c540:	100182cf 	.word	0x100182cf
1000c544:	1000c171 	.word	0x1000c171

1000c548 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000c548:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c54a:	4644      	mov	r4, r8
1000c54c:	465f      	mov	r7, fp
1000c54e:	4656      	mov	r6, sl
1000c550:	464d      	mov	r5, r9
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000c552:	2300      	movs	r3, #0
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000c554:	b4f0      	push	{r4, r5, r6, r7}
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000c556:	1e44      	subs	r4, r0, #1
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000c558:	b089      	sub	sp, #36	; 0x24
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000c55a:	9301      	str	r3, [sp, #4]
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000c55c:	1ce3      	adds	r3, r4, #3
1000c55e:	d800      	bhi.n	1000c562 <platform_event_wait+0x1a>
1000c560:	e0ea      	b.n	1000c738 <platform_event_wait+0x1f0>
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000c562:	2300      	movs	r3, #0
1000c564:	4699      	mov	r9, r3
1000c566:	4b88      	ldr	r3, [pc, #544]	; (1000c788 <platform_event_wait+0x240>)
1000c568:	2700      	movs	r7, #0
1000c56a:	4698      	mov	r8, r3
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000c56c:	4b87      	ldr	r3, [pc, #540]	; (1000c78c <platform_event_wait+0x244>)
1000c56e:	4d88      	ldr	r5, [pc, #544]	; (1000c790 <platform_event_wait+0x248>)
1000c570:	469b      	mov	fp, r3
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000c572:	4b88      	ldr	r3, [pc, #544]	; (1000c794 <platform_event_wait+0x24c>)
1000c574:	4e88      	ldr	r6, [pc, #544]	; (1000c798 <platform_event_wait+0x250>)
1000c576:	469a      	mov	sl, r3
1000c578:	e003      	b.n	1000c582 <platform_event_wait+0x3a>
		}
		else
		{
			status = STATUS_FAILURE;
		}
	}while(bLoopAgain);
1000c57a:	464b      	mov	r3, r9
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000c57c:	2707      	movs	r7, #7
		}
	}while(bLoopAgain);
1000c57e:	2b00      	cmp	r3, #0
1000c580:	d052      	beq.n	1000c628 <platform_event_wait+0xe0>
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000c582:	4643      	mov	r3, r8
1000c584:	0029      	movs	r1, r5
1000c586:	6830      	ldr	r0, [r6, #0]
1000c588:	681b      	ldr	r3, [r3, #0]
1000c58a:	4798      	blx	r3
1000c58c:	2800      	cmp	r0, #0
1000c58e:	d1f4      	bne.n	1000c57a <platform_event_wait+0x32>
		{
			uint16_t msg_id = rcv_msg->id;
1000c590:	682c      	ldr	r4, [r5, #0]
1000c592:	88a3      	ldrh	r3, [r4, #4]
1000c594:	4699      	mov	r9, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000c596:	23cd      	movs	r3, #205	; 0xcd
1000c598:	009b      	lsls	r3, r3, #2
1000c59a:	4599      	cmp	r9, r3
1000c59c:	d04f      	beq.n	1000c63e <platform_event_wait+0xf6>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000c59e:	8923      	ldrh	r3, [r4, #8]
1000c5a0:	9303      	str	r3, [sp, #12]
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000c5a2:	8963      	ldrh	r3, [r4, #10]
1000c5a4:	9302      	str	r3, [sp, #8]
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000c5a6:	9b01      	ldr	r3, [sp, #4]
1000c5a8:	2b00      	cmp	r3, #0
1000c5aa:	d000      	beq.n	1000c5ae <platform_event_wait+0x66>
1000c5ac:	e07b      	b.n	1000c6a6 <platform_event_wait+0x15e>
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000c5ae:	23a0      	movs	r3, #160	; 0xa0
1000c5b0:	00db      	lsls	r3, r3, #3
1000c5b2:	4599      	cmp	r9, r3
1000c5b4:	d051      	beq.n	1000c65a <platform_event_wait+0x112>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000c5b6:	4653      	mov	r3, sl
1000c5b8:	681b      	ldr	r3, [r3, #0]
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000c5ba:	682c      	ldr	r4, [r5, #0]
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000c5bc:	2b00      	cmp	r3, #0
1000c5be:	d100      	bne.n	1000c5c2 <platform_event_wait+0x7a>
1000c5c0:	e084      	b.n	1000c6cc <platform_event_wait+0x184>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000c5c2:	22cd      	movs	r2, #205	; 0xcd
1000c5c4:	88a3      	ldrh	r3, [r4, #4]
1000c5c6:	0092      	lsls	r2, r2, #2
1000c5c8:	4293      	cmp	r3, r2
1000c5ca:	d03d      	beq.n	1000c648 <platform_event_wait+0x100>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000c5cc:	4a73      	ldr	r2, [pc, #460]	; (1000c79c <platform_event_wait+0x254>)
1000c5ce:	4f74      	ldr	r7, [pc, #464]	; (1000c7a0 <platform_event_wait+0x258>)
1000c5d0:	4691      	mov	r9, r2
						ke_msg_hdr->id = rcv_msg->id;
1000c5d2:	703b      	strb	r3, [r7, #0]
1000c5d4:	0a1b      	lsrs	r3, r3, #8
1000c5d6:	707b      	strb	r3, [r7, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000c5d8:	4b72      	ldr	r3, [pc, #456]	; (1000c7a4 <platform_event_wait+0x25c>)
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000c5da:	6017      	str	r7, [r2, #0]
						ke_msg_hdr->id = rcv_msg->id;
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000c5dc:	8920      	ldrh	r0, [r4, #8]
1000c5de:	681b      	ldr	r3, [r3, #0]
1000c5e0:	4798      	blx	r3
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000c5e2:	464b      	mov	r3, r9
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
						ke_msg_hdr->id = rcv_msg->id;
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000c5e4:	7138      	strb	r0, [r7, #4]
1000c5e6:	0a00      	lsrs	r0, r0, #8
1000c5e8:	7178      	strb	r0, [r7, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000c5ea:	6818      	ldr	r0, [r3, #0]
1000c5ec:	682b      	ldr	r3, [r5, #0]
1000c5ee:	88db      	ldrh	r3, [r3, #6]
1000c5f0:	8043      	strh	r3, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000c5f2:	682c      	ldr	r4, [r5, #0]
1000c5f4:	8963      	ldrh	r3, [r4, #10]
1000c5f6:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000c5f8:	464b      	mov	r3, r9
1000c5fa:	3008      	adds	r0, #8
1000c5fc:	6018      	str	r0, [r3, #0]
						if(rcv_msg->param_len > 0) {
1000c5fe:	8962      	ldrh	r2, [r4, #10]
1000c600:	2a00      	cmp	r2, #0
1000c602:	d000      	beq.n	1000c606 <platform_event_wait+0xbe>
1000c604:	e092      	b.n	1000c72c <platform_event_wait+0x1e4>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000c606:	4653      	mov	r3, sl
1000c608:	3208      	adds	r2, #8
1000c60a:	0038      	movs	r0, r7
1000c60c:	681b      	ldr	r3, [r3, #0]
1000c60e:	0011      	movs	r1, r2
1000c610:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c612:	2300      	movs	r3, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000c614:	2703      	movs	r7, #3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c616:	4699      	mov	r9, r3
1000c618:	682c      	ldr	r4, [r5, #0]
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000c61a:	465b      	mov	r3, fp
1000c61c:	0020      	movs	r0, r4
1000c61e:	681b      	ldr	r3, [r3, #0]
1000c620:	4798      	blx	r3
		}
		else
		{
			status = STATUS_FAILURE;
		}
	}while(bLoopAgain);
1000c622:	464b      	mov	r3, r9
1000c624:	2b00      	cmp	r3, #0
1000c626:	d1ac      	bne.n	1000c582 <platform_event_wait+0x3a>
	
	if(bEventTimeoutFlag)
1000c628:	9b01      	ldr	r3, [sp, #4]
1000c62a:	2b00      	cmp	r3, #0
1000c62c:	d150      	bne.n	1000c6d0 <platform_event_wait+0x188>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000c62e:	0038      	movs	r0, r7
1000c630:	b009      	add	sp, #36	; 0x24
1000c632:	bc3c      	pop	{r2, r3, r4, r5}
1000c634:	4690      	mov	r8, r2
1000c636:	4699      	mov	r9, r3
1000c638:	46a2      	mov	sl, r4
1000c63a:	46ab      	mov	fp, r5
1000c63c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000c63e:	4b55      	ldr	r3, [pc, #340]	; (1000c794 <platform_event_wait+0x24c>)
1000c640:	681b      	ldr	r3, [r3, #0]
1000c642:	9302      	str	r3, [sp, #8]
1000c644:	2b00      	cmp	r3, #0
1000c646:	d041      	beq.n	1000c6cc <platform_event_wait+0x184>
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000c648:	2301      	movs	r3, #1
1000c64a:	4699      	mov	r9, r3
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000c64c:	9b01      	ldr	r3, [sp, #4]
1000c64e:	2b00      	cmp	r3, #0
1000c650:	d0e3      	beq.n	1000c61a <platform_event_wait+0xd2>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c652:	2300      	movs	r3, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000c654:	27d0      	movs	r7, #208	; 0xd0
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c656:	4699      	mov	r9, r3
1000c658:	e7df      	b.n	1000c61a <platform_event_wait+0xd2>
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000c65a:	4b53      	ldr	r3, [pc, #332]	; (1000c7a8 <platform_event_wait+0x260>)
1000c65c:	881f      	ldrh	r7, [r3, #0]
1000c65e:	4699      	mov	r9, r3
1000c660:	9b02      	ldr	r3, [sp, #8]
1000c662:	19da      	adds	r2, r3, r7
1000c664:	23a0      	movs	r3, #160	; 0xa0
1000c666:	009b      	lsls	r3, r3, #2
1000c668:	429a      	cmp	r2, r3
1000c66a:	dd03      	ble.n	1000c674 <platform_event_wait+0x12c>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000c66c:	2780      	movs	r7, #128	; 0x80
1000c66e:	464b      	mov	r3, r9
1000c670:	00bf      	lsls	r7, r7, #2
1000c672:	801f      	strh	r7, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000c674:	0021      	movs	r1, r4
1000c676:	4b4a      	ldr	r3, [pc, #296]	; (1000c7a0 <platform_event_wait+0x258>)
1000c678:	9c02      	ldr	r4, [sp, #8]
1000c67a:	18ff      	adds	r7, r7, r3
1000c67c:	0022      	movs	r2, r4
1000c67e:	310c      	adds	r1, #12
1000c680:	0038      	movs	r0, r7
1000c682:	4b4a      	ldr	r3, [pc, #296]	; (1000c7ac <platform_event_wait+0x264>)
1000c684:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000c686:	0022      	movs	r2, r4
1000c688:	0039      	movs	r1, r7
1000c68a:	4b49      	ldr	r3, [pc, #292]	; (1000c7b0 <platform_event_wait+0x268>)
1000c68c:	9803      	ldr	r0, [sp, #12]
1000c68e:	4798      	blx	r3
				plf_event_buff_index += len;
1000c690:	464b      	mov	r3, r9
1000c692:	46a4      	mov	ip, r4
1000c694:	464a      	mov	r2, r9
1000c696:	881b      	ldrh	r3, [r3, #0]
1000c698:	682c      	ldr	r4, [r5, #0]
1000c69a:	4463      	add	r3, ip
1000c69c:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c69e:	2300      	movs	r3, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000c6a0:	2702      	movs	r7, #2
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c6a2:	4699      	mov	r9, r3
1000c6a4:	e7b9      	b.n	1000c61a <platform_event_wait+0xd2>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000c6a6:	220d      	movs	r2, #13
1000c6a8:	2100      	movs	r1, #0
1000c6aa:	a804      	add	r0, sp, #16
1000c6ac:	4b41      	ldr	r3, [pc, #260]	; (1000c7b4 <platform_event_wait+0x26c>)
1000c6ae:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000c6b0:	2333      	movs	r3, #51	; 0x33
1000c6b2:	aa04      	add	r2, sp, #16
1000c6b4:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000c6b6:	3b30      	subs	r3, #48	; 0x30
1000c6b8:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000c6ba:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000c6bc:	3302      	adds	r3, #2
1000c6be:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000c6c0:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000c6c2:	210d      	movs	r1, #13
1000c6c4:	0010      	movs	r0, r2
1000c6c6:	4b3c      	ldr	r3, [pc, #240]	; (1000c7b8 <platform_event_wait+0x270>)
1000c6c8:	4798      	blx	r3
1000c6ca:	e770      	b.n	1000c5ae <platform_event_wait+0x66>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c6cc:	4699      	mov	r9, r3
1000c6ce:	e7a4      	b.n	1000c61a <platform_event_wait+0xd2>
	}while(bLoopAgain);
	
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000c6d0:	6833      	ldr	r3, [r6, #0]
1000c6d2:	4698      	mov	r8, r3
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000c6d4:	2b00      	cmp	r3, #0
1000c6d6:	d053      	beq.n	1000c780 <platform_event_wait+0x238>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000c6d8:	6a1c      	ldr	r4, [r3, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000c6da:	2314      	movs	r3, #20
1000c6dc:	4443      	add	r3, r8
1000c6de:	469a      	mov	sl, r3
1000c6e0:	4b36      	ldr	r3, [pc, #216]	; (1000c7bc <platform_event_wait+0x274>)
1000c6e2:	4650      	mov	r0, sl
1000c6e4:	681b      	ldr	r3, [r3, #0]
1000c6e6:	4798      	blx	r3
	while(NULL != current)
1000c6e8:	2500      	movs	r5, #0
1000c6ea:	2c00      	cmp	r4, #0
1000c6ec:	d019      	beq.n	1000c722 <platform_event_wait+0x1da>
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000c6ee:	26cd      	movs	r6, #205	; 0xcd
				current = prev->pstrNext;
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
				ke_free(current);
1000c6f0:	4b26      	ldr	r3, [pc, #152]	; (1000c78c <platform_event_wait+0x244>)
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000c6f2:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000c6f4:	00b6      	lsls	r6, r6, #2
				current = prev->pstrNext;
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
				ke_free(current);
1000c6f6:	469b      	mov	fp, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000c6f8:	4699      	mov	r9, r3
1000c6fa:	4644      	mov	r4, r8
1000c6fc:	e003      	b.n	1000c706 <platform_event_wait+0x1be>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000c6fe:	0005      	movs	r5, r0
1000c700:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000c702:	2800      	cmp	r0, #0
1000c704:	d00d      	beq.n	1000c722 <platform_event_wait+0x1da>
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000c706:	6803      	ldr	r3, [r0, #0]
1000c708:	889b      	ldrh	r3, [r3, #4]
1000c70a:	42b3      	cmp	r3, r6
1000c70c:	d1f7      	bne.n	1000c6fe <platform_event_wait+0x1b6>
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
1000c70e:	6883      	ldr	r3, [r0, #8]
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
		{
			num_of_freed++;
			if(NULL != prev)
1000c710:	2d00      	cmp	r5, #0
1000c712:	d02f      	beq.n	1000c774 <platform_event_wait+0x22c>
			{
				prev->pstrNext = current->pstrNext;
1000c714:	60ab      	str	r3, [r5, #8]
				ke_free(current);
1000c716:	464b      	mov	r3, r9
1000c718:	681b      	ldr	r3, [r3, #0]
1000c71a:	4798      	blx	r3
				current = prev->pstrNext;
1000c71c:	68a8      	ldr	r0, [r5, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000c71e:	2800      	cmp	r0, #0
1000c720:	d1f1      	bne.n	1000c706 <platform_event_wait+0x1be>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000c722:	4b27      	ldr	r3, [pc, #156]	; (1000c7c0 <platform_event_wait+0x278>)
1000c724:	4650      	mov	r0, sl
1000c726:	681b      	ldr	r3, [r3, #0]
1000c728:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000c72a:	e780      	b.n	1000c62e <platform_event_wait+0xe6>
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
						ke_msg_hdr->param_len = rcv_msg->param_len;
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000c72c:	0021      	movs	r1, r4
1000c72e:	4b1f      	ldr	r3, [pc, #124]	; (1000c7ac <platform_event_wait+0x264>)
1000c730:	310c      	adds	r1, #12
1000c732:	4798      	blx	r3
1000c734:	8962      	ldrh	r2, [r4, #10]
1000c736:	e766      	b.n	1000c606 <platform_event_wait+0xbe>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000c738:	220d      	movs	r2, #13
1000c73a:	2100      	movs	r1, #0
1000c73c:	4b1d      	ldr	r3, [pc, #116]	; (1000c7b4 <platform_event_wait+0x26c>)
1000c73e:	a804      	add	r0, sp, #16
1000c740:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000c742:	2333      	movs	r3, #51	; 0x33
1000c744:	aa04      	add	r2, sp, #16
1000c746:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000c748:	3b30      	subs	r3, #48	; 0x30
1000c74a:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000c74c:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000c74e:	3302      	adds	r3, #2
1000c750:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000c752:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000c754:	0a23      	lsrs	r3, r4, #8
1000c756:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000c758:	0c23      	lsrs	r3, r4, #16
1000c75a:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000c75c:	2301      	movs	r3, #1
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000c75e:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000c760:	7313      	strb	r3, [r2, #12]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000c762:	0e24      	lsrs	r4, r4, #24
	
	msg[u16TxLen++] = ((1) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000c764:	4b14      	ldr	r3, [pc, #80]	; (1000c7b8 <platform_event_wait+0x270>)
1000c766:	210d      	movs	r1, #13
1000c768:	0010      	movs	r0, r2
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000c76a:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000c76c:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000c76e:	2301      	movs	r3, #1
1000c770:	9301      	str	r3, [sp, #4]
1000c772:	e6f6      	b.n	1000c562 <platform_event_wait+0x1a>
				ke_free(current);
				current = prev->pstrNext;
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000c774:	6223      	str	r3, [r4, #32]
				ke_free(current);
1000c776:	465b      	mov	r3, fp
1000c778:	681b      	ldr	r3, [r3, #0]
1000c77a:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000c77c:	6a20      	ldr	r0, [r4, #32]
1000c77e:	e7c0      	b.n	1000c702 <platform_event_wait+0x1ba>
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000c780:	464b      	mov	r3, r9
1000c782:	6a1b      	ldr	r3, [r3, #32]
1000c784:	deff      	udf	#255	; 0xff
1000c786:	46c0      	nop			; (mov r8, r8)
1000c788:	1001d0e0 	.word	0x1001d0e0
1000c78c:	1001d0b8 	.word	0x1001d0b8
1000c790:	1001d0b4 	.word	0x1001d0b4
1000c794:	1001d0e8 	.word	0x1001d0e8
1000c798:	1001d0f8 	.word	0x1001d0f8
1000c79c:	1001d0f0 	.word	0x1001d0f0
1000c7a0:	1001ddf4 	.word	0x1001ddf4
1000c7a4:	1001d0bc 	.word	0x1001d0bc
1000c7a8:	1001e08c 	.word	0x1001e08c
1000c7ac:	100182cf 	.word	0x100182cf
1000c7b0:	1000c0d9 	.word	0x1000c0d9
1000c7b4:	1001830b 	.word	0x1001830b
1000c7b8:	1000c4bd 	.word	0x1000c4bd
1000c7bc:	1001d0d8 	.word	0x1001d0d8
1000c7c0:	1001d0c4 	.word	0x1001d0c4

1000c7c4 <acquire_sleep_lock>:
plf_drv_status acquire_sleep_lock()
{
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000c7c4:	2080      	movs	r0, #128	; 0x80
	}
	return status;
}

plf_drv_status acquire_sleep_lock()
{
1000c7c6:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000c7c8:	4b02      	ldr	r3, [pc, #8]	; (1000c7d4 <acquire_sleep_lock+0x10>)
1000c7ca:	0200      	lsls	r0, r0, #8
1000c7cc:	681b      	ldr	r3, [r3, #0]
1000c7ce:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000c7d0:	2008      	movs	r0, #8
1000c7d2:	bd10      	pop	{r4, pc}
1000c7d4:	1001ddac 	.word	0x1001ddac

1000c7d8 <release_message_lock>:

plf_drv_status release_message_lock()
{
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000c7d8:	2080      	movs	r0, #128	; 0x80
#endif	//0
	return status;
}

plf_drv_status release_message_lock()
{
1000c7da:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000c7dc:	4b02      	ldr	r3, [pc, #8]	; (1000c7e8 <release_message_lock+0x10>)
1000c7de:	01c0      	lsls	r0, r0, #7
1000c7e0:	681b      	ldr	r3, [r3, #0]
1000c7e2:	4798      	blx	r3
	return status;
}
1000c7e4:	2000      	movs	r0, #0
1000c7e6:	bd10      	pop	{r4, pc}
1000c7e8:	1001ddb8 	.word	0x1001ddb8

1000c7ec <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000c7ec:	2080      	movs	r0, #128	; 0x80
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
	return status;
}

plf_drv_status release_sleep_lock()
{
1000c7ee:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000c7f0:	4c04      	ldr	r4, [pc, #16]	; (1000c804 <release_sleep_lock+0x18>)
1000c7f2:	01c0      	lsls	r0, r0, #7
1000c7f4:	6823      	ldr	r3, [r4, #0]
1000c7f6:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000c7f8:	2080      	movs	r0, #128	; 0x80
1000c7fa:	6823      	ldr	r3, [r4, #0]
1000c7fc:	0200      	lsls	r0, r0, #8
1000c7fe:	4798      	blx	r3
	return status;
}
1000c800:	2000      	movs	r0, #0
1000c802:	bd10      	pop	{r4, pc}
1000c804:	1001ddb8 	.word	0x1001ddb8

1000c808 <gpio1_combined_isr_handler>:
void gpio1_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000c808:	4914      	ldr	r1, [pc, #80]	; (1000c85c <gpio1_combined_isr_handler+0x54>)
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000c80a:	4815      	ldr	r0, [pc, #84]	; (1000c860 <gpio1_combined_isr_handler+0x58>)
void gpio1_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000c80c:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000c80e:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
void gpio1_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000c810:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000c812:	4302      	orrs	r2, r0
1000c814:	b292      	uxth	r2, r2
1000c816:	850a      	strh	r2, [r1, #40]	; 0x28

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000c818:	05db      	lsls	r3, r3, #23
1000c81a:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000c81c:	d018      	beq.n	1000c850 <gpio1_combined_isr_handler+0x48>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000c81e:	b2db      	uxtb	r3, r3
1000c820:	425a      	negs	r2, r3
1000c822:	4013      	ands	r3, r2
			while (!(port_gpio1 == 1)) {
1000c824:	2b01      	cmp	r3, #1
1000c826:	d017      	beq.n	1000c858 <gpio1_combined_isr_handler+0x50>
1000c828:	2200      	movs	r2, #0
				port_gpio1 = port_gpio1 >> 1;
				index++;
1000c82a:	3201      	adds	r2, #1
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
				port_gpio1 = port_gpio1 >> 1;
1000c82c:	085b      	lsrs	r3, r3, #1
				index++;
1000c82e:	b2d2      	uxtb	r2, r2
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000c830:	2b01      	cmp	r3, #1
1000c832:	d1fa      	bne.n	1000c82a <gpio1_combined_isr_handler+0x22>
1000c834:	4093      	lsls	r3, r2
1000c836:	b29b      	uxth	r3, r3
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000c838:	870b      	strh	r3, [r1, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000c83a:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
1000c83c:	05db      	lsls	r3, r3, #23
1000c83e:	0ddb      	lsrs	r3, r3, #23
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000c840:	d1ea      	bne.n	1000c818 <gpio1_combined_isr_handler+0x10>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000c842:	2180      	movs	r1, #128	; 0x80
1000c844:	4a07      	ldr	r2, [pc, #28]	; (1000c864 <gpio1_combined_isr_handler+0x5c>)
1000c846:	3381      	adds	r3, #129	; 0x81
1000c848:	0049      	lsls	r1, r1, #1
1000c84a:	33ff      	adds	r3, #255	; 0xff
1000c84c:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000c84e:	4770      	bx	lr
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000c850:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
1000c852:	4303      	orrs	r3, r0
1000c854:	b29b      	uxth	r3, r3
1000c856:	e7ef      	b.n	1000c838 <gpio1_combined_isr_handler+0x30>
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000c858:	2301      	movs	r3, #1
1000c85a:	e7ed      	b.n	1000c838 <gpio1_combined_isr_handler+0x30>
1000c85c:	40011000 	.word	0x40011000
1000c860:	ffff8000 	.word	0xffff8000
1000c864:	e000e100 	.word	0xe000e100

1000c868 <gpio0_combined_isr_handler>:
void gpio0_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000c868:	4914      	ldr	r1, [pc, #80]	; (1000c8bc <gpio0_combined_isr_handler+0x54>)
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000c86a:	4815      	ldr	r0, [pc, #84]	; (1000c8c0 <gpio0_combined_isr_handler+0x58>)
void gpio0_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000c86c:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000c86e:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
void gpio0_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000c870:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000c872:	4302      	orrs	r2, r0
1000c874:	b292      	uxth	r2, r2
1000c876:	850a      	strh	r2, [r1, #40]	; 0x28

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000c878:	05db      	lsls	r3, r3, #23
1000c87a:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000c87c:	d017      	beq.n	1000c8ae <gpio0_combined_isr_handler+0x46>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000c87e:	b2db      	uxtb	r3, r3
1000c880:	425a      	negs	r2, r3
1000c882:	4013      	ands	r3, r2
			while (!(port_gpio0 == 1)) {
1000c884:	2b01      	cmp	r3, #1
1000c886:	d016      	beq.n	1000c8b6 <gpio0_combined_isr_handler+0x4e>
1000c888:	2200      	movs	r2, #0
				port_gpio0 = port_gpio0 >> 1;
				index++;
1000c88a:	3201      	adds	r2, #1
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
				port_gpio0 = port_gpio0 >> 1;
1000c88c:	085b      	lsrs	r3, r3, #1
				index++;
1000c88e:	b2d2      	uxtb	r2, r2
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000c890:	2b01      	cmp	r3, #1
1000c892:	d1fa      	bne.n	1000c88a <gpio0_combined_isr_handler+0x22>
1000c894:	4093      	lsls	r3, r2
1000c896:	b29b      	uxth	r3, r3
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000c898:	870b      	strh	r3, [r1, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000c89a:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
1000c89c:	05db      	lsls	r3, r3, #23
1000c89e:	0ddb      	lsrs	r3, r3, #23
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000c8a0:	d1ea      	bne.n	1000c878 <gpio0_combined_isr_handler+0x10>
1000c8a2:	2180      	movs	r1, #128	; 0x80
1000c8a4:	4a07      	ldr	r2, [pc, #28]	; (1000c8c4 <gpio0_combined_isr_handler+0x5c>)
1000c8a6:	3381      	adds	r3, #129	; 0x81
1000c8a8:	33ff      	adds	r3, #255	; 0xff
1000c8aa:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000c8ac:	4770      	bx	lr
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000c8ae:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
1000c8b0:	4303      	orrs	r3, r0
1000c8b2:	b29b      	uxth	r3, r3
1000c8b4:	e7f0      	b.n	1000c898 <gpio0_combined_isr_handler+0x30>
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000c8b6:	2301      	movs	r3, #1
1000c8b8:	e7ee      	b.n	1000c898 <gpio0_combined_isr_handler+0x30>
1000c8ba:	46c0      	nop			; (mov r8, r8)
1000c8bc:	40010000 	.word	0x40010000
1000c8c0:	ffff8000 	.word	0xffff8000
1000c8c4:	e000e100 	.word	0xe000e100

1000c8c8 <PORT1_COMB_Handler>:
	NVIC_ClearPendingIRQ(7);
}

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000c8c8:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000c8ca:	4c0b      	ldr	r4, [pc, #44]	; (1000c8f8 <PORT1_COMB_Handler+0x30>)
1000c8cc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
1000c8ce:	0b5b      	lsrs	r3, r3, #13
1000c8d0:	d102      	bne.n	1000c8d8 <PORT1_COMB_Handler+0x10>
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000c8d2:	4b0a      	ldr	r3, [pc, #40]	; (1000c8fc <PORT1_COMB_Handler+0x34>)
1000c8d4:	4798      	blx	r3
	}
}
1000c8d6:	bd10      	pop	{r4, pc}
#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
		handle_ext_wakeup_isr();
1000c8d8:	4b09      	ldr	r3, [pc, #36]	; (1000c900 <PORT1_COMB_Handler+0x38>)
1000c8da:	681b      	ldr	r3, [r3, #0]
1000c8dc:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000c8de:	8f23      	ldrh	r3, [r4, #56]	; 0x38
1000c8e0:	8f22      	ldrh	r2, [r4, #56]	; 0x38
1000c8e2:	0b5b      	lsrs	r3, r3, #13
1000c8e4:	035b      	lsls	r3, r3, #13
1000c8e6:	4313      	orrs	r3, r2
1000c8e8:	8723      	strh	r3, [r4, #56]	; 0x38
1000c8ea:	2180      	movs	r1, #128	; 0x80
1000c8ec:	23c0      	movs	r3, #192	; 0xc0
1000c8ee:	4a05      	ldr	r2, [pc, #20]	; (1000c904 <PORT1_COMB_Handler+0x3c>)
1000c8f0:	0049      	lsls	r1, r1, #1
1000c8f2:	005b      	lsls	r3, r3, #1
1000c8f4:	50d1      	str	r1, [r2, r3]
1000c8f6:	e7ee      	b.n	1000c8d6 <PORT1_COMB_Handler+0xe>
1000c8f8:	40011000 	.word	0x40011000
1000c8fc:	1000c809 	.word	0x1000c809
1000c900:	1001e078 	.word	0x1001e078
1000c904:	e000e100 	.word	0xe000e100

1000c908 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000c908:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000c90a:	2802      	cmp	r0, #2
1000c90c:	d901      	bls.n	1000c912 <wakeup_int_unregister_callback+0xa>
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000c90e:	0018      	movs	r0, r3
1000c910:	4770      	bx	lr
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000c912:	2200      	movs	r2, #0
1000c914:	4b02      	ldr	r3, [pc, #8]	; (1000c920 <wakeup_int_unregister_callback+0x18>)
1000c916:	0080      	lsls	r0, r0, #2
1000c918:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000c91a:	2300      	movs	r3, #0
1000c91c:	e7f7      	b.n	1000c90e <wakeup_int_unregister_callback+0x6>
1000c91e:	46c0      	nop			; (mov r8, r8)
1000c920:	1001e090 	.word	0x1001e090

1000c924 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000c924:	7802      	ldrb	r2, [r0, #0]
	}
	return status;
}

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000c926:	b510      	push	{r4, lr}
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000c928:	6803      	ldr	r3, [r0, #0]
	}
	return status;
}

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000c92a:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000c92c:	2a01      	cmp	r2, #1
1000c92e:	d01c      	beq.n	1000c96a <wakeup_active_event_callback+0x46>
			callback = wakeup_source_callback[0];
			callback();
		}
		*pu32WakeSource &= ~(0xFF);
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000c930:	041a      	lsls	r2, r3, #16
1000c932:	0e12      	lsrs	r2, r2, #24
1000c934:	2a01      	cmp	r2, #1
1000c936:	d00e      	beq.n	1000c956 <wakeup_active_event_callback+0x32>
			callback = wakeup_source_callback[1];
			callback();
		}
		*pu32WakeSource &= ~(0xFF << 8);
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000c938:	021a      	lsls	r2, r3, #8
1000c93a:	0e12      	lsrs	r2, r2, #24
1000c93c:	2a01      	cmp	r2, #1
1000c93e:	d000      	beq.n	1000c942 <wakeup_active_event_callback+0x1e>
			callback = wakeup_source_callback[2];
			callback();
		}
		*pu32WakeSource &= ~(0xFF << 16);
	}
}
1000c940:	bd10      	pop	{r4, pc}
		}
		*pu32WakeSource &= ~(0xFF << 8);
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
	{
		if(wakeup_source_callback[2] != NULL) {
1000c942:	4a0f      	ldr	r2, [pc, #60]	; (1000c980 <wakeup_active_event_callback+0x5c>)
1000c944:	6892      	ldr	r2, [r2, #8]
1000c946:	2a00      	cmp	r2, #0
1000c948:	d001      	beq.n	1000c94e <wakeup_active_event_callback+0x2a>
			callback = wakeup_source_callback[2];
			callback();
1000c94a:	4790      	blx	r2
1000c94c:	6823      	ldr	r3, [r4, #0]
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000c94e:	4a0d      	ldr	r2, [pc, #52]	; (1000c984 <wakeup_active_event_callback+0x60>)
1000c950:	4013      	ands	r3, r2
1000c952:	6023      	str	r3, [r4, #0]
	}
}
1000c954:	e7f4      	b.n	1000c940 <wakeup_active_event_callback+0x1c>
		}
		*pu32WakeSource &= ~(0xFF);
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
	{
		if(wakeup_source_callback[1] != NULL) {
1000c956:	4a0a      	ldr	r2, [pc, #40]	; (1000c980 <wakeup_active_event_callback+0x5c>)
1000c958:	6852      	ldr	r2, [r2, #4]
1000c95a:	2a00      	cmp	r2, #0
1000c95c:	d001      	beq.n	1000c962 <wakeup_active_event_callback+0x3e>
			callback = wakeup_source_callback[1];
			callback();
1000c95e:	4790      	blx	r2
1000c960:	6823      	ldr	r3, [r4, #0]
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000c962:	4a09      	ldr	r2, [pc, #36]	; (1000c988 <wakeup_active_event_callback+0x64>)
1000c964:	4013      	ands	r3, r2
1000c966:	6023      	str	r3, [r4, #0]
1000c968:	e7e6      	b.n	1000c938 <wakeup_active_event_callback+0x14>
{
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
	{
		if(wakeup_source_callback[0] != NULL) {
1000c96a:	4a05      	ldr	r2, [pc, #20]	; (1000c980 <wakeup_active_event_callback+0x5c>)
1000c96c:	6812      	ldr	r2, [r2, #0]
1000c96e:	2a00      	cmp	r2, #0
1000c970:	d001      	beq.n	1000c976 <wakeup_active_event_callback+0x52>
			callback = wakeup_source_callback[0];
			callback();
1000c972:	4790      	blx	r2
1000c974:	6823      	ldr	r3, [r4, #0]
		}
		*pu32WakeSource &= ~(0xFF);
1000c976:	22ff      	movs	r2, #255	; 0xff
1000c978:	4393      	bics	r3, r2
1000c97a:	6023      	str	r3, [r4, #0]
1000c97c:	e7d8      	b.n	1000c930 <wakeup_active_event_callback+0xc>
1000c97e:	46c0      	nop			; (mov r8, r8)
1000c980:	1001e090 	.word	0x1001e090
1000c984:	ff00ffff 	.word	0xff00ffff
1000c988:	ffff00ff 	.word	0xffff00ff

1000c98c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000c98c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c98e:	4647      	mov	r7, r8
1000c990:	000c      	movs	r4, r1
1000c992:	b480      	push	{r7}
1000c994:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000c996:	2800      	cmp	r0, #0
1000c998:	d111      	bne.n	1000c9be <_read+0x32>
		return -1;
	}

	for (; len > 0; --len) {
1000c99a:	2a00      	cmp	r2, #0
1000c99c:	dd0d      	ble.n	1000c9ba <_read+0x2e>
1000c99e:	4e09      	ldr	r6, [pc, #36]	; (1000c9c4 <_read+0x38>)
1000c9a0:	4d09      	ldr	r5, [pc, #36]	; (1000c9c8 <_read+0x3c>)
1000c9a2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000c9a4:	0021      	movs	r1, r4
1000c9a6:	6830      	ldr	r0, [r6, #0]
1000c9a8:	682b      	ldr	r3, [r5, #0]
		ptr++;
1000c9aa:	3401      	adds	r4, #1
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
1000c9ac:	4798      	blx	r3

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000c9ae:	42bc      	cmp	r4, r7
1000c9b0:	d1f8      	bne.n	1000c9a4 <_read+0x18>
1000c9b2:	4640      	mov	r0, r8
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000c9b4:	bc04      	pop	{r2}
1000c9b6:	4690      	mov	r8, r2
1000c9b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000c9ba:	2000      	movs	r0, #0
1000c9bc:	e7fa      	b.n	1000c9b4 <_read+0x28>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000c9be:	2001      	movs	r0, #1
1000c9c0:	4240      	negs	r0, r0
1000c9c2:	e7f7      	b.n	1000c9b4 <_read+0x28>
1000c9c4:	1001e0a4 	.word	0x1001e0a4
1000c9c8:	1001e09c 	.word	0x1001e09c

1000c9cc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000c9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c9ce:	4647      	mov	r7, r8
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000c9d0:	3801      	subs	r0, #1
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000c9d2:	b480      	push	{r7}
1000c9d4:	000e      	movs	r6, r1
1000c9d6:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000c9d8:	2802      	cmp	r0, #2
1000c9da:	d810      	bhi.n	1000c9fe <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
1000c9dc:	2a00      	cmp	r2, #0
1000c9de:	d015      	beq.n	1000ca0c <_write+0x40>
1000c9e0:	4b0b      	ldr	r3, [pc, #44]	; (1000ca10 <_write+0x44>)
1000c9e2:	2400      	movs	r4, #0
1000c9e4:	4698      	mov	r8, r3
1000c9e6:	4f0b      	ldr	r7, [pc, #44]	; (1000ca14 <_write+0x48>)
1000c9e8:	e002      	b.n	1000c9f0 <_write+0x24>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000c9ea:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000c9ec:	42a5      	cmp	r5, r4
1000c9ee:	d00b      	beq.n	1000ca08 <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000c9f0:	4643      	mov	r3, r8
1000c9f2:	5d31      	ldrb	r1, [r6, r4]
1000c9f4:	6818      	ldr	r0, [r3, #0]
1000c9f6:	683b      	ldr	r3, [r7, #0]
1000c9f8:	4798      	blx	r3
1000c9fa:	2800      	cmp	r0, #0
1000c9fc:	daf5      	bge.n	1000c9ea <_write+0x1e>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000c9fe:	2001      	movs	r0, #1
1000ca00:	4240      	negs	r0, r0
			return -1;
		}
		++nChars;
	}
	return nChars;
}
1000ca02:	bc04      	pop	{r2}
1000ca04:	4690      	mov	r8, r2
1000ca06:	bdf0      	pop	{r4, r5, r6, r7, pc}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000ca08:	0028      	movs	r0, r5
1000ca0a:	e7fa      	b.n	1000ca02 <_write+0x36>

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000ca0c:	2000      	movs	r0, #0
1000ca0e:	e7f8      	b.n	1000ca02 <_write+0x36>
1000ca10:	1001e0a4 	.word	0x1001e0a4
1000ca14:	1001e0a0 	.word	0x1001e0a0

1000ca18 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000ca18:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000ca1a:	4b21      	ldr	r3, [pc, #132]	; (1000caa0 <uart_rx0_isr_handler+0x88>)
1000ca1c:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000ca1e:	6823      	ldr	r3, [r4, #0]
1000ca20:	7d1d      	ldrb	r5, [r3, #20]
1000ca22:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000ca24:	066a      	lsls	r2, r5, #25
1000ca26:	d50d      	bpl.n	1000ca44 <uart_rx0_isr_handler+0x2c>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000ca28:	211e      	movs	r1, #30
1000ca2a:	2222      	movs	r2, #34	; 0x22
1000ca2c:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000ca2e:	7e1a      	ldrb	r2, [r3, #24]
1000ca30:	3123      	adds	r1, #35	; 0x23
1000ca32:	438a      	bics	r2, r1
1000ca34:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000ca36:	2321      	movs	r3, #33	; 0x21
1000ca38:	5ce2      	ldrb	r2, [r4, r3]
1000ca3a:	3b19      	subs	r3, #25
1000ca3c:	4213      	tst	r3, r2
1000ca3e:	d11d      	bne.n	1000ca7c <uart_rx0_isr_handler+0x64>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000ca40:	6823      	ldr	r3, [r4, #0]
1000ca42:	7c1a      	ldrb	r2, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000ca44:	2201      	movs	r2, #1
1000ca46:	422a      	tst	r2, r5
1000ca48:	d017      	beq.n	1000ca7a <uart_rx0_isr_handler+0x62>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000ca4a:	7c1b      	ldrb	r3, [r3, #16]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000ca4c:	6961      	ldr	r1, [r4, #20]
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000ca4e:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000ca50:	700b      	strb	r3, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000ca52:	6963      	ldr	r3, [r4, #20]
1000ca54:	3301      	adds	r3, #1
1000ca56:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000ca58:	8ba3      	ldrh	r3, [r4, #28]
1000ca5a:	3b01      	subs	r3, #1
1000ca5c:	b29b      	uxth	r3, r3
1000ca5e:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000ca60:	8ba3      	ldrh	r3, [r4, #28]
1000ca62:	b29b      	uxth	r3, r3
1000ca64:	2b00      	cmp	r3, #0
1000ca66:	d108      	bne.n	1000ca7a <uart_rx0_isr_handler+0x62>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000ca68:	2121      	movs	r1, #33	; 0x21
1000ca6a:	5c60      	ldrb	r0, [r4, r1]
1000ca6c:	391d      	subs	r1, #29
1000ca6e:	4201      	tst	r1, r0
1000ca70:	d003      	beq.n	1000ca7a <uart_rx0_isr_handler+0x62>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000ca72:	2020      	movs	r0, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000ca74:	5c20      	ldrb	r0, [r4, r0]
1000ca76:	4201      	tst	r1, r0
1000ca78:	d108      	bne.n	1000ca8c <uart_rx0_isr_handler+0x74>
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
			}
		}
	}
}
1000ca7a:	bd70      	pop	{r4, r5, r6, pc}
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000ca7c:	2220      	movs	r2, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000ca7e:	5ca2      	ldrb	r2, [r4, r2]
1000ca80:	4213      	tst	r3, r2
1000ca82:	d0dd      	beq.n	1000ca40 <uart_rx0_isr_handler+0x28>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000ca84:	0020      	movs	r0, r4
1000ca86:	6923      	ldr	r3, [r4, #16]
1000ca88:	4798      	blx	r3
1000ca8a:	e7d9      	b.n	1000ca40 <uart_rx0_isr_handler+0x28>
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000ca8c:	311e      	adds	r1, #30
1000ca8e:	5463      	strb	r3, [r4, r1]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000ca90:	6821      	ldr	r1, [r4, #0]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000ca92:	0020      	movs	r0, r4
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
				module->hw->RX_INTERRUPT_MASK.reg &=
1000ca94:	7e0b      	ldrb	r3, [r1, #24]
1000ca96:	4393      	bics	r3, r2
1000ca98:	760b      	strb	r3, [r1, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000ca9a:	68e3      	ldr	r3, [r4, #12]
1000ca9c:	4798      	blx	r3
			}
		}
	}
}
1000ca9e:	e7ec      	b.n	1000ca7a <uart_rx0_isr_handler+0x62>
1000caa0:	1001e0a8 	.word	0x1001e0a8

1000caa4 <uart_tx0_isr_handler>:
static void uart_tx0_isr_handler(void)
{
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000caa4:	2101      	movs	r1, #1
		}
	}
}

static void uart_tx0_isr_handler(void)
{
1000caa6:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000caa8:	4b22      	ldr	r3, [pc, #136]	; (1000cb34 <uart_tx0_isr_handler+0x90>)
1000caaa:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000caac:	6823      	ldr	r3, [r4, #0]
1000caae:	791d      	ldrb	r5, [r3, #4]
1000cab0:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000cab2:	4229      	tst	r1, r5
1000cab4:	d00c      	beq.n	1000cad0 <uart_tx0_isr_handler+0x2c>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000cab6:	69a2      	ldr	r2, [r4, #24]
1000cab8:	7810      	ldrb	r0, [r2, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000caba:	3201      	adds	r2, #1
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000cabc:	b2c0      	uxtb	r0, r0
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000cabe:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000cac0:	7018      	strb	r0, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000cac2:	8be3      	ldrh	r3, [r4, #30]
1000cac4:	3b01      	subs	r3, #1
1000cac6:	b29b      	uxth	r3, r3
1000cac8:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000caca:	8be3      	ldrh	r3, [r4, #30]
1000cacc:	2b00      	cmp	r3, #0
1000cace:	d022      	beq.n	1000cb16 <uart_tx0_isr_handler+0x72>
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000cad0:	2310      	movs	r3, #16
1000cad2:	422b      	tst	r3, r5
1000cad4:	d004      	beq.n	1000cae0 <uart_tx0_isr_handler+0x3c>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000cad6:	2221      	movs	r2, #33	; 0x21
1000cad8:	5ca1      	ldrb	r1, [r4, r2]
1000cada:	3a20      	subs	r2, #32
1000cadc:	420a      	tst	r2, r1
1000cade:	d10b      	bne.n	1000caf8 <uart_tx0_isr_handler+0x54>
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000cae0:	2320      	movs	r3, #32
1000cae2:	422b      	tst	r3, r5
1000cae4:	d007      	beq.n	1000caf6 <uart_tx0_isr_handler+0x52>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000cae6:	2221      	movs	r2, #33	; 0x21
1000cae8:	5ca1      	ldrb	r1, [r4, r2]
1000caea:	3a1f      	subs	r2, #31
1000caec:	420a      	tst	r2, r1
1000caee:	d002      	beq.n	1000caf6 <uart_tx0_isr_handler+0x52>
1000caf0:	5ce3      	ldrb	r3, [r4, r3]
1000caf2:	421a      	tst	r2, r3
1000caf4:	d119      	bne.n	1000cb2a <uart_tx0_isr_handler+0x86>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
		}

	}
}
1000caf6:	bd70      	pop	{r4, r5, r6, pc}
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000caf8:	2120      	movs	r1, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000cafa:	5c61      	ldrb	r1, [r4, r1]
1000cafc:	420a      	tst	r2, r1
1000cafe:	d0ef      	beq.n	1000cae0 <uart_tx0_isr_handler+0x3c>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000cb00:	2100      	movs	r1, #0
1000cb02:	3221      	adds	r2, #33	; 0x21
1000cb04:	54a1      	strb	r1, [r4, r2]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000cb06:	6821      	ldr	r1, [r4, #0]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000cb08:	0020      	movs	r0, r4
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000cb0a:	7a0a      	ldrb	r2, [r1, #8]
1000cb0c:	439a      	bics	r2, r3
1000cb0e:	720a      	strb	r2, [r1, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000cb10:	6863      	ldr	r3, [r4, #4]
1000cb12:	4798      	blx	r3
1000cb14:	e7e4      	b.n	1000cae0 <uart_tx0_isr_handler+0x3c>
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
			module->hw->TX_INTERRUPT_MASK.reg &=
1000cb16:	6822      	ldr	r2, [r4, #0]
1000cb18:	7a13      	ldrb	r3, [r2, #8]
1000cb1a:	438b      	bics	r3, r1
1000cb1c:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000cb1e:	2310      	movs	r3, #16
1000cb20:	6822      	ldr	r2, [r4, #0]
1000cb22:	7a11      	ldrb	r1, [r2, #8]
1000cb24:	430b      	orrs	r3, r1
1000cb26:	7213      	strb	r3, [r2, #8]
1000cb28:	e7d2      	b.n	1000cad0 <uart_tx0_isr_handler+0x2c>

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000cb2a:	68a3      	ldr	r3, [r4, #8]
1000cb2c:	0020      	movs	r0, r4
1000cb2e:	4798      	blx	r3
		}

	}
}
1000cb30:	e7e1      	b.n	1000caf6 <uart_tx0_isr_handler+0x52>
1000cb32:	46c0      	nop			; (mov r8, r8)
1000cb34:	1001e0a8 	.word	0x1001e0a8

1000cb38 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000cb38:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000cb3a:	4b21      	ldr	r3, [pc, #132]	; (1000cbc0 <uart_rx1_isr_handler+0x88>)
1000cb3c:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000cb3e:	6823      	ldr	r3, [r4, #0]
1000cb40:	7d1d      	ldrb	r5, [r3, #20]
1000cb42:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000cb44:	066a      	lsls	r2, r5, #25
1000cb46:	d50d      	bpl.n	1000cb64 <uart_rx1_isr_handler+0x2c>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000cb48:	211e      	movs	r1, #30
1000cb4a:	2222      	movs	r2, #34	; 0x22
1000cb4c:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000cb4e:	7e1a      	ldrb	r2, [r3, #24]
1000cb50:	3123      	adds	r1, #35	; 0x23
1000cb52:	438a      	bics	r2, r1
1000cb54:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000cb56:	2321      	movs	r3, #33	; 0x21
1000cb58:	5ce2      	ldrb	r2, [r4, r3]
1000cb5a:	3b19      	subs	r3, #25
1000cb5c:	4213      	tst	r3, r2
1000cb5e:	d11d      	bne.n	1000cb9c <uart_rx1_isr_handler+0x64>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000cb60:	6823      	ldr	r3, [r4, #0]
1000cb62:	7c1a      	ldrb	r2, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000cb64:	2201      	movs	r2, #1
1000cb66:	422a      	tst	r2, r5
1000cb68:	d017      	beq.n	1000cb9a <uart_rx1_isr_handler+0x62>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000cb6a:	7c1b      	ldrb	r3, [r3, #16]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000cb6c:	6961      	ldr	r1, [r4, #20]
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000cb6e:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000cb70:	700b      	strb	r3, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000cb72:	6963      	ldr	r3, [r4, #20]
1000cb74:	3301      	adds	r3, #1
1000cb76:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000cb78:	8ba3      	ldrh	r3, [r4, #28]
1000cb7a:	3b01      	subs	r3, #1
1000cb7c:	b29b      	uxth	r3, r3
1000cb7e:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000cb80:	8ba3      	ldrh	r3, [r4, #28]
1000cb82:	b29b      	uxth	r3, r3
1000cb84:	2b00      	cmp	r3, #0
1000cb86:	d108      	bne.n	1000cb9a <uart_rx1_isr_handler+0x62>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000cb88:	2121      	movs	r1, #33	; 0x21
1000cb8a:	5c60      	ldrb	r0, [r4, r1]
1000cb8c:	391d      	subs	r1, #29
1000cb8e:	4201      	tst	r1, r0
1000cb90:	d003      	beq.n	1000cb9a <uart_rx1_isr_handler+0x62>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000cb92:	2020      	movs	r0, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000cb94:	5c20      	ldrb	r0, [r4, r0]
1000cb96:	4201      	tst	r1, r0
1000cb98:	d108      	bne.n	1000cbac <uart_rx1_isr_handler+0x74>
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
			}
		}
	}
}
1000cb9a:	bd70      	pop	{r4, r5, r6, pc}
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000cb9c:	2220      	movs	r2, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000cb9e:	5ca2      	ldrb	r2, [r4, r2]
1000cba0:	4213      	tst	r3, r2
1000cba2:	d0dd      	beq.n	1000cb60 <uart_rx1_isr_handler+0x28>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000cba4:	0020      	movs	r0, r4
1000cba6:	6923      	ldr	r3, [r4, #16]
1000cba8:	4798      	blx	r3
1000cbaa:	e7d9      	b.n	1000cb60 <uart_rx1_isr_handler+0x28>
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000cbac:	311e      	adds	r1, #30
1000cbae:	5463      	strb	r3, [r4, r1]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000cbb0:	6821      	ldr	r1, [r4, #0]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000cbb2:	0020      	movs	r0, r4
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
				module->hw->RX_INTERRUPT_MASK.reg &=
1000cbb4:	7e0b      	ldrb	r3, [r1, #24]
1000cbb6:	4393      	bics	r3, r2
1000cbb8:	760b      	strb	r3, [r1, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000cbba:	68e3      	ldr	r3, [r4, #12]
1000cbbc:	4798      	blx	r3
			}
		}
	}
}
1000cbbe:	e7ec      	b.n	1000cb9a <uart_rx1_isr_handler+0x62>
1000cbc0:	1001e0a8 	.word	0x1001e0a8

1000cbc4 <uart_tx1_isr_handler>:
static void uart_tx1_isr_handler(void)
{
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000cbc4:	2101      	movs	r1, #1
		}
	}
}

static void uart_tx1_isr_handler(void)
{
1000cbc6:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000cbc8:	4b22      	ldr	r3, [pc, #136]	; (1000cc54 <uart_tx1_isr_handler+0x90>)
1000cbca:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000cbcc:	6823      	ldr	r3, [r4, #0]
1000cbce:	791d      	ldrb	r5, [r3, #4]
1000cbd0:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000cbd2:	4229      	tst	r1, r5
1000cbd4:	d00c      	beq.n	1000cbf0 <uart_tx1_isr_handler+0x2c>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000cbd6:	69a2      	ldr	r2, [r4, #24]
1000cbd8:	7810      	ldrb	r0, [r2, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000cbda:	3201      	adds	r2, #1
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000cbdc:	b2c0      	uxtb	r0, r0
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000cbde:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000cbe0:	7018      	strb	r0, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000cbe2:	8be3      	ldrh	r3, [r4, #30]
1000cbe4:	3b01      	subs	r3, #1
1000cbe6:	b29b      	uxth	r3, r3
1000cbe8:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000cbea:	8be3      	ldrh	r3, [r4, #30]
1000cbec:	2b00      	cmp	r3, #0
1000cbee:	d022      	beq.n	1000cc36 <uart_tx1_isr_handler+0x72>
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000cbf0:	2310      	movs	r3, #16
1000cbf2:	422b      	tst	r3, r5
1000cbf4:	d004      	beq.n	1000cc00 <uart_tx1_isr_handler+0x3c>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000cbf6:	2221      	movs	r2, #33	; 0x21
1000cbf8:	5ca1      	ldrb	r1, [r4, r2]
1000cbfa:	3a20      	subs	r2, #32
1000cbfc:	420a      	tst	r2, r1
1000cbfe:	d10b      	bne.n	1000cc18 <uart_tx1_isr_handler+0x54>
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000cc00:	2320      	movs	r3, #32
1000cc02:	422b      	tst	r3, r5
1000cc04:	d007      	beq.n	1000cc16 <uart_tx1_isr_handler+0x52>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000cc06:	2221      	movs	r2, #33	; 0x21
1000cc08:	5ca1      	ldrb	r1, [r4, r2]
1000cc0a:	3a1f      	subs	r2, #31
1000cc0c:	420a      	tst	r2, r1
1000cc0e:	d002      	beq.n	1000cc16 <uart_tx1_isr_handler+0x52>
1000cc10:	5ce3      	ldrb	r3, [r4, r3]
1000cc12:	421a      	tst	r2, r3
1000cc14:	d119      	bne.n	1000cc4a <uart_tx1_isr_handler+0x86>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
		}

	}
}
1000cc16:	bd70      	pop	{r4, r5, r6, pc}
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000cc18:	2120      	movs	r1, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000cc1a:	5c61      	ldrb	r1, [r4, r1]
1000cc1c:	420a      	tst	r2, r1
1000cc1e:	d0ef      	beq.n	1000cc00 <uart_tx1_isr_handler+0x3c>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000cc20:	2100      	movs	r1, #0
1000cc22:	3221      	adds	r2, #33	; 0x21
1000cc24:	54a1      	strb	r1, [r4, r2]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000cc26:	6821      	ldr	r1, [r4, #0]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000cc28:	0020      	movs	r0, r4
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000cc2a:	7a0a      	ldrb	r2, [r1, #8]
1000cc2c:	439a      	bics	r2, r3
1000cc2e:	720a      	strb	r2, [r1, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000cc30:	6863      	ldr	r3, [r4, #4]
1000cc32:	4798      	blx	r3
1000cc34:	e7e4      	b.n	1000cc00 <uart_tx1_isr_handler+0x3c>
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
			module->hw->TX_INTERRUPT_MASK.reg &=
1000cc36:	6822      	ldr	r2, [r4, #0]
1000cc38:	7a13      	ldrb	r3, [r2, #8]
1000cc3a:	438b      	bics	r3, r1
1000cc3c:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000cc3e:	2310      	movs	r3, #16
1000cc40:	6822      	ldr	r2, [r4, #0]
1000cc42:	7a11      	ldrb	r1, [r2, #8]
1000cc44:	430b      	orrs	r3, r1
1000cc46:	7213      	strb	r3, [r2, #8]
1000cc48:	e7d2      	b.n	1000cbf0 <uart_tx1_isr_handler+0x2c>

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000cc4a:	68a3      	ldr	r3, [r4, #8]
1000cc4c:	0020      	movs	r0, r4
1000cc4e:	4798      	blx	r3
		}

	}
}
1000cc50:	e7e1      	b.n	1000cc16 <uart_tx1_isr_handler+0x52>
1000cc52:	46c0      	nop			; (mov r8, r8)
1000cc54:	1001e0a8 	.word	0x1001e0a8

1000cc58 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000cc58:	23e1      	movs	r3, #225	; 0xe1
	config->stop_bits = UART_1_STOP_BIT;
	config->parity = UART_NO_PARITY;
	config->flow_control = false;

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000cc5a:	2203      	movs	r2, #3
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000cc5c:	025b      	lsls	r3, r3, #9
1000cc5e:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000cc60:	2300      	movs	r3, #0
	config->stop_bits = UART_1_STOP_BIT;
	config->parity = UART_NO_PARITY;
	config->flow_control = false;

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000cc62:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000cc64:	3201      	adds	r2, #1
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
	config->data_bits = UART_8_BITS;
1000cc66:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000cc68:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000cc6a:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000cc6c:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000cc6e:	6102      	str	r2, [r0, #16]
	config->data_bits = UART_8_BITS;
	config->stop_bits = UART_1_STOP_BIT;
	config->parity = UART_NO_PARITY;
	config->flow_control = false;

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000cc70:	3302      	adds	r3, #2
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000cc72:	3201      	adds	r2, #1
	config->data_bits = UART_8_BITS;
	config->stop_bits = UART_1_STOP_BIT;
	config->parity = UART_NO_PARITY;
	config->flow_control = false;

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000cc74:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000cc76:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000cc78:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000cc7a:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000cc7c:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000cc7e:	6243      	str	r3, [r0, #36]	; 0x24
}
1000cc80:	4770      	bx	lr
1000cc82:	46c0      	nop			; (mov r8, r8)

1000cc84 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000cc84:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cc86:	4647      	mov	r7, r8

	/* Assign module pointer to software instance struct */
	module->hw = hw;

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000cc88:	2300      	movs	r3, #0
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000cc8a:	b480      	push	{r7}
1000cc8c:	0017      	movs	r7, r2
	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
	}
	module->rx_buffer_ptr = NULL;
	module->tx_buffer_ptr = NULL;
	module->remaining_rx_buffer_length = 0;
1000cc8e:	2200      	movs	r2, #0
1000cc90:	8383      	strh	r3, [r0, #28]

	/* Assign module pointer to software instance struct */
	module->hw = hw;

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000cc92:	6043      	str	r3, [r0, #4]
1000cc94:	6083      	str	r3, [r0, #8]
1000cc96:	60c3      	str	r3, [r0, #12]
1000cc98:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000cc9a:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000cc9c:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
	module->remaining_tx_buffer_length = 0;
1000cc9e:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000cca0:	3320      	adds	r3, #32

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000cca2:	6001      	str	r1, [r0, #0]
	}
	module->rx_buffer_ptr = NULL;
	module->tx_buffer_ptr = NULL;
	module->remaining_rx_buffer_length = 0;
	module->remaining_tx_buffer_length = 0;
	module->callback_reg_mask = 0;
1000cca4:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000cca6:	3301      	adds	r3, #1
1000cca8:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000ccaa:	3301      	adds	r3, #1
1000ccac:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000ccae:	4b52      	ldr	r3, [pc, #328]	; (1000cdf8 <uart_init+0x174>)
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000ccb0:	0005      	movs	r5, r0
	module->remaining_tx_buffer_length = 0;
	module->callback_reg_mask = 0;
	module->callback_enable_mask = 0;
	module->status = STATUS_OK;

	if (hw == UART0) {
1000ccb2:	4299      	cmp	r1, r3
1000ccb4:	d100      	bne.n	1000ccb8 <uart_init+0x34>
1000ccb6:	e06c      	b.n	1000cd92 <uart_init+0x10e>
		_uart_instances[0] = module;
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000ccb8:	4b50      	ldr	r3, [pc, #320]	; (1000cdfc <uart_init+0x178>)
1000ccba:	4299      	cmp	r1, r3
1000ccbc:	d100      	bne.n	1000ccc0 <uart_init+0x3c>
1000ccbe:	e081      	b.n	1000cdc4 <uart_init+0x140>
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000ccc0:	79fa      	ldrb	r2, [r7, #7]
		index = 4;
	} else {
		index = 2;
1000ccc2:	2302      	movs	r3, #2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000ccc4:	2a00      	cmp	r2, #0
1000ccc6:	d000      	beq.n	1000ccca <uart_init+0x46>
		index = 4;
1000ccc8:	3302      	adds	r3, #2
1000ccca:	3b01      	subs	r3, #1
1000cccc:	b2de      	uxtb	r6, r3
1000ccce:	4b4c      	ldr	r3, [pc, #304]	; (1000ce00 <uart_init+0x17c>)
1000ccd0:	003c      	movs	r4, r7
1000ccd2:	4698      	mov	r8, r3
1000ccd4:	3603      	adds	r6, #3
1000ccd6:	00b6      	lsls	r6, r6, #2
1000ccd8:	3408      	adds	r4, #8
1000ccda:	19be      	adds	r6, r7, r6
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000ccdc:	8a21      	ldrh	r1, [r4, #16]
1000ccde:	cc01      	ldmia	r4!, {r0}
1000cce0:	b2c0      	uxtb	r0, r0
1000cce2:	47c0      	blx	r8

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000cce4:	42a6      	cmp	r6, r4
1000cce6:	d1f9      	bne.n	1000ccdc <uart_init+0x58>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000cce8:	682b      	ldr	r3, [r5, #0]
1000ccea:	7d1a      	ldrb	r2, [r3, #20]
1000ccec:	07d2      	lsls	r2, r2, #31
1000ccee:	d504      	bpl.n	1000ccfa <uart_init+0x76>
1000ccf0:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000ccf2:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000ccf4:	7d1a      	ldrb	r2, [r3, #20]
1000ccf6:	4211      	tst	r1, r2
1000ccf8:	d1fb      	bne.n	1000ccf2 <uart_init+0x6e>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000ccfa:	2100      	movs	r1, #0
1000ccfc:	2220      	movs	r2, #32
1000ccfe:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000cd00:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000cd02:	797a      	ldrb	r2, [r7, #5]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	uint8_t config_temp = 0;
1000cd04:	1e59      	subs	r1, r3, #1
1000cd06:	418b      	sbcs	r3, r1
1000cd08:	0159      	lsls	r1, r3, #5
	/* program the uart configuration. */
	if(config->flow_control) {
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000cd0a:	793b      	ldrb	r3, [r7, #4]
1000cd0c:	4313      	orrs	r3, r2
	switch(config->parity) {
1000cd0e:	79ba      	ldrb	r2, [r7, #6]
	/* program the uart configuration. */
	if(config->flow_control) {
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000cd10:	430b      	orrs	r3, r1
	switch(config->parity) {
1000cd12:	2a02      	cmp	r2, #2
1000cd14:	d03a      	beq.n	1000cd8c <uart_init+0x108>
1000cd16:	d934      	bls.n	1000cd82 <uart_init+0xfe>
1000cd18:	2a03      	cmp	r2, #3
1000cd1a:	d02f      	beq.n	1000cd7c <uart_init+0xf8>
1000cd1c:	2a04      	cmp	r2, #4
1000cd1e:	d101      	bne.n	1000cd24 <uart_init+0xa0>
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
			break;

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000cd20:	220e      	movs	r2, #14
1000cd22:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000cd24:	2220      	movs	r2, #32
1000cd26:	6829      	ldr	r1, [r5, #0]
1000cd28:	548b      	strb	r3, [r1, r2]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000cd2a:	4b36      	ldr	r3, [pc, #216]	; (1000ce04 <uart_init+0x180>)
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000cd2c:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000cd2e:	4798      	blx	r3
	integerpart = clock / baud_rate;
1000cd30:	0031      	movs	r1, r6
1000cd32:	4b35      	ldr	r3, [pc, #212]	; (1000ce08 <uart_init+0x184>)
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000cd34:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000cd36:	4798      	blx	r3
1000cd38:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000cd3a:	0400      	lsls	r0, r0, #16
1000cd3c:	0c00      	lsrs	r0, r0, #16
1000cd3e:	4370      	muls	r0, r6
	i = 0;
	while(diff > (baud_rate / 16)) {
1000cd40:	0931      	lsrs	r1, r6, #4
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
1000cd42:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000cd44:	2300      	movs	r3, #0
1000cd46:	4281      	cmp	r1, r0
1000cd48:	d207      	bcs.n	1000cd5a <uart_init+0xd6>
		i++;
1000cd4a:	3301      	adds	r3, #1
1000cd4c:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000cd4e:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000cd50:	4281      	cmp	r1, r0
1000cd52:	d3fa      	bcc.n	1000cd4a <uart_init+0xc6>
1000cd54:	3301      	adds	r3, #1
1000cd56:	071b      	lsls	r3, r3, #28
1000cd58:	0f5b      	lsrs	r3, r3, #29
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000cd5a:	2100      	movs	r1, #0
1000cd5c:	2028      	movs	r0, #40	; 0x28
1000cd5e:	682c      	ldr	r4, [r5, #0]
	module->hw->UART_BAUD_RATE.reg =
1000cd60:	00d2      	lsls	r2, r2, #3
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000cd62:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000cd64:	4313      	orrs	r3, r2
1000cd66:	682a      	ldr	r2, [r5, #0]
1000cd68:	b29b      	uxth	r3, r3
1000cd6a:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000cd6c:	682b      	ldr	r3, [r5, #0]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
	
	return STATUS_OK;
}
1000cd6e:	2000      	movs	r0, #0
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000cd70:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000cd72:	682b      	ldr	r3, [r5, #0]
1000cd74:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000cd76:	bc04      	pop	{r2}
1000cd78:	4690      	mov	r8, r2
1000cd7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
			break;

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000cd7c:	220a      	movs	r2, #10
1000cd7e:	4313      	orrs	r3, r2
			break;
1000cd80:	e7d0      	b.n	1000cd24 <uart_init+0xa0>
	if(config->flow_control) {
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
	switch(config->parity) {
1000cd82:	2a01      	cmp	r2, #1
1000cd84:	d1ce      	bne.n	1000cd24 <uart_init+0xa0>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000cd86:	2202      	movs	r2, #2
1000cd88:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000cd8a:	e7cb      	b.n	1000cd24 <uart_init+0xa0>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000cd8c:	2206      	movs	r2, #6
1000cd8e:	4313      	orrs	r3, r2
			break;
1000cd90:	e7c8      	b.n	1000cd24 <uart_init+0xa0>
	module->callback_reg_mask = 0;
	module->callback_enable_mask = 0;
	module->status = STATUS_OK;

	if (hw == UART0) {
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000cd92:	4c1e      	ldr	r4, [pc, #120]	; (1000ce0c <uart_init+0x188>)
1000cd94:	2009      	movs	r0, #9
1000cd96:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000cd98:	200a      	movs	r0, #10
1000cd9a:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000cd9c:	4c1c      	ldr	r4, [pc, #112]	; (1000ce10 <uart_init+0x18c>)
1000cd9e:	2009      	movs	r0, #9
1000cda0:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000cda2:	200a      	movs	r0, #10
1000cda4:	47a0      	blx	r4
		_uart_instances[0] = module;
1000cda6:	4b1b      	ldr	r3, [pc, #108]	; (1000ce14 <uart_init+0x190>)
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000cda8:	491b      	ldr	r1, [pc, #108]	; (1000ce18 <uart_init+0x194>)
1000cdaa:	2010      	movs	r0, #16
1000cdac:	4c1b      	ldr	r4, [pc, #108]	; (1000ce1c <uart_init+0x198>)
	if (hw == UART0) {
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
		system_peripheral_reset(PERIPHERAL_UART0_IF);
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
		_uart_instances[0] = module;
1000cdae:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000cdb0:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000cdb2:	491b      	ldr	r1, [pc, #108]	; (1000ce20 <uart_init+0x19c>)
1000cdb4:	2011      	movs	r0, #17
1000cdb6:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000cdb8:	2201      	movs	r2, #1
1000cdba:	4b1a      	ldr	r3, [pc, #104]	; (1000ce24 <uart_init+0x1a0>)
1000cdbc:	601a      	str	r2, [r3, #0]
1000cdbe:	3201      	adds	r2, #1
1000cdc0:	601a      	str	r2, [r3, #0]
1000cdc2:	e77d      	b.n	1000ccc0 <uart_init+0x3c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000cdc4:	4c11      	ldr	r4, [pc, #68]	; (1000ce0c <uart_init+0x188>)
1000cdc6:	200b      	movs	r0, #11
1000cdc8:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000cdca:	200c      	movs	r0, #12
1000cdcc:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000cdce:	4c10      	ldr	r4, [pc, #64]	; (1000ce10 <uart_init+0x18c>)
1000cdd0:	200b      	movs	r0, #11
1000cdd2:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000cdd4:	200c      	movs	r0, #12
1000cdd6:	47a0      	blx	r4
		_uart_instances[1] = module;
1000cdd8:	4b0e      	ldr	r3, [pc, #56]	; (1000ce14 <uart_init+0x190>)
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000cdda:	4913      	ldr	r1, [pc, #76]	; (1000ce28 <uart_init+0x1a4>)
1000cddc:	2012      	movs	r0, #18
1000cdde:	4c0f      	ldr	r4, [pc, #60]	; (1000ce1c <uart_init+0x198>)
	} else if (hw == UART1) {
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
		system_peripheral_reset(PERIPHERAL_UART1_IF);
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
		_uart_instances[1] = module;
1000cde0:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000cde2:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000cde4:	4911      	ldr	r1, [pc, #68]	; (1000ce2c <uart_init+0x1a8>)
1000cde6:	2013      	movs	r0, #19
1000cde8:	47a0      	blx	r4
1000cdea:	2204      	movs	r2, #4
1000cdec:	4b0d      	ldr	r3, [pc, #52]	; (1000ce24 <uart_init+0x1a0>)
1000cdee:	601a      	str	r2, [r3, #0]
1000cdf0:	3204      	adds	r2, #4
1000cdf2:	601a      	str	r2, [r3, #0]
1000cdf4:	e764      	b.n	1000ccc0 <uart_init+0x3c>
1000cdf6:	46c0      	nop			; (mov r8, r8)
1000cdf8:	40004000 	.word	0x40004000
1000cdfc:	40005000 	.word	0x40005000
1000ce00:	1000d1cd 	.word	0x1000d1cd
1000ce04:	1000d679 	.word	0x1000d679
1000ce08:	10014fb5 	.word	0x10014fb5
1000ce0c:	1000d98d 	.word	0x1000d98d
1000ce10:	1000d685 	.word	0x1000d685
1000ce14:	1001e0a8 	.word	0x1001e0a8
1000ce18:	1000ca19 	.word	0x1000ca19
1000ce1c:	1000dda5 	.word	0x1000dda5
1000ce20:	1000caa5 	.word	0x1000caa5
1000ce24:	e000e100 	.word	0xe000e100
1000ce28:	1000cb39 	.word	0x1000cb39
1000ce2c:	1000cbc5 	.word	0x1000cbc5

1000ce30 <uart_write_wait>:
* \return Status of the operation.
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
1000ce30:	6802      	ldr	r2, [r0, #0]
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000ce32:	2001      	movs	r0, #1
1000ce34:	7913      	ldrb	r3, [r2, #4]
1000ce36:	4218      	tst	r0, r3
1000ce38:	d0fc      	beq.n	1000ce34 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
	
	return STATUS_OK;
}
1000ce3a:	2000      	movs	r0, #0
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000ce3c:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000ce3e:	4770      	bx	lr

1000ce40 <uart_read_wait>:
* \return Status of the operation.
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
1000ce40:	6802      	ldr	r2, [r0, #0]
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000ce42:	2001      	movs	r0, #1
1000ce44:	7d13      	ldrb	r3, [r2, #20]
1000ce46:	4218      	tst	r0, r3
1000ce48:	d0fc      	beq.n	1000ce44 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000ce4a:	7c13      	ldrb	r3, [r2, #16]
	
	return STATUS_OK;
}
1000ce4c:	2000      	movs	r0, #0
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000ce4e:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000ce50:	4770      	bx	lr
1000ce52:	46c0      	nop			; (mov r8, r8)

1000ce54 <uart_read_buffer_job>:
 * \retval  STATUS_ERR_DENIED       If the receiver is not enabled
 * \retval  STATUS_ERR_INVALID_ARG  If requested read length was zero
 */
enum status_code uart_read_buffer_job(struct uart_module *const module,
		uint8_t *rx_data, uint16_t length)
{
1000ce54:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000ce56:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000ce58:	2a00      	cmp	r2, #0
1000ce5a:	d101      	bne.n	1000ce60 <uart_read_buffer_job+0xc>
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
}
1000ce5c:	0018      	movs	r0, r3
1000ce5e:	bd10      	pop	{r4, pc}
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000ce60:	2422      	movs	r4, #34	; 0x22
1000ce62:	5d03      	ldrb	r3, [r0, r4]
1000ce64:	b2db      	uxtb	r3, r3
1000ce66:	2b05      	cmp	r3, #5
1000ce68:	d0f8      	beq.n	1000ce5c <uart_read_buffer_job+0x8>

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
	module->rx_buffer_ptr = rx_data;
	module->status = STATUS_BUSY;
1000ce6a:	2305      	movs	r3, #5
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000ce6c:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
	module->status = STATUS_BUSY;

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000ce6e:	2201      	movs	r2, #1
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
	module->rx_buffer_ptr = rx_data;
1000ce70:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000ce72:	5503      	strb	r3, [r0, r4]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000ce74:	6803      	ldr	r3, [r0, #0]
1000ce76:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000ce78:	2300      	movs	r3, #0
1000ce7a:	e7ef      	b.n	1000ce5c <uart_read_buffer_job+0x8>

1000ce7c <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000ce7c:	0093      	lsls	r3, r2, #2
1000ce7e:	18c3      	adds	r3, r0, r3
1000ce80:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000ce82:	2301      	movs	r3, #1
1000ce84:	2120      	movs	r1, #32
1000ce86:	4093      	lsls	r3, r2
1000ce88:	5c42      	ldrb	r2, [r0, r1]
1000ce8a:	4313      	orrs	r3, r2
1000ce8c:	5443      	strb	r3, [r0, r1]
}
1000ce8e:	4770      	bx	lr

1000ce90 <uart_enable_callback>:
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000ce90:	2301      	movs	r3, #1
1000ce92:	2221      	movs	r2, #33	; 0x21
1000ce94:	408b      	lsls	r3, r1
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000ce96:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000ce98:	5c84      	ldrb	r4, [r0, r2]
1000ce9a:	4323      	orrs	r3, r4
1000ce9c:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000ce9e:	2901      	cmp	r1, #1
1000cea0:	d104      	bne.n	1000ceac <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000cea2:	2320      	movs	r3, #32
1000cea4:	6802      	ldr	r2, [r0, #0]
1000cea6:	7a11      	ldrb	r1, [r2, #8]
1000cea8:	430b      	orrs	r3, r1
1000ceaa:	7213      	strb	r3, [r2, #8]
	}
}
1000ceac:	bd10      	pop	{r4, pc}
1000ceae:	46c0      	nop			; (mov r8, r8)

1000ceb0 <uart_disable_callback>:
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000ceb0:	2201      	movs	r2, #1
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000ceb2:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000ceb4:	2421      	movs	r4, #33	; 0x21
1000ceb6:	408a      	lsls	r2, r1
1000ceb8:	5d03      	ldrb	r3, [r0, r4]
1000ceba:	4393      	bics	r3, r2
1000cebc:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000cebe:	2901      	cmp	r1, #1
1000cec0:	d104      	bne.n	1000cecc <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000cec2:	6802      	ldr	r2, [r0, #0]
1000cec4:	311f      	adds	r1, #31
1000cec6:	7a13      	ldrb	r3, [r2, #8]
1000cec8:	438b      	bics	r3, r1
1000ceca:	7213      	strb	r3, [r2, #8]
	}

}
1000cecc:	bd10      	pop	{r4, pc}
1000cece:	46c0      	nop			; (mov r8, r8)

1000ced0 <gpio_port0_isr_handler>:
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000ced0:	2300      	movs	r3, #0

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000ced2:	2001      	movs	r0, #1
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000ced4:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000ced6:	4d12      	ldr	r5, [pc, #72]	; (1000cf20 <gpio_port0_isr_handler+0x50>)
1000ced8:	682e      	ldr	r6, [r5, #0]
1000ceda:	8f31      	ldrh	r1, [r6, #56]	; 0x38
1000cedc:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000cede:	0002      	movs	r2, r0
1000cee0:	409a      	lsls	r2, r3
1000cee2:	2401      	movs	r4, #1
1000cee4:	4211      	tst	r1, r2
1000cee6:	d109      	bne.n	1000cefc <gpio_port0_isr_handler+0x2c>
1000cee8:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000ceea:	2b10      	cmp	r3, #16
1000ceec:	d1f7      	bne.n	1000cede <gpio_port0_isr_handler+0xe>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000ceee:	2180      	movs	r1, #128	; 0x80
1000cef0:	23c0      	movs	r3, #192	; 0xc0
1000cef2:	4a0c      	ldr	r2, [pc, #48]	; (1000cf24 <gpio_port0_isr_handler+0x54>)
1000cef4:	0409      	lsls	r1, r1, #16
1000cef6:	005b      	lsls	r3, r3, #1
1000cef8:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000cefa:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000cefc:	b292      	uxth	r2, r2
1000cefe:	8732      	strh	r2, [r6, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000cf00:	2246      	movs	r2, #70	; 0x46
1000cf02:	5aaa      	ldrh	r2, [r5, r2]
1000cf04:	411a      	asrs	r2, r3
1000cf06:	4214      	tst	r4, r2
1000cf08:	d0f1      	beq.n	1000ceee <gpio_port0_isr_handler+0x1e>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000cf0a:	2244      	movs	r2, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000cf0c:	5aaa      	ldrh	r2, [r5, r2]
1000cf0e:	411a      	asrs	r2, r3
1000cf10:	4214      	tst	r4, r2
1000cf12:	d0ec      	beq.n	1000ceee <gpio_port0_isr_handler+0x1e>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000cf14:	009b      	lsls	r3, r3, #2
1000cf16:	18eb      	adds	r3, r5, r3
1000cf18:	685b      	ldr	r3, [r3, #4]
1000cf1a:	4798      	blx	r3
1000cf1c:	e7e7      	b.n	1000ceee <gpio_port0_isr_handler+0x1e>
1000cf1e:	46c0      	nop			; (mov r8, r8)
1000cf20:	1001e0b0 	.word	0x1001e0b0
1000cf24:	e000e100 	.word	0xe000e100

1000cf28 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000cf28:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cf2a:	4657      	mov	r7, sl
1000cf2c:	464e      	mov	r6, r9
1000cf2e:	4645      	mov	r5, r8
1000cf30:	b4e0      	push	{r5, r6, r7}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000cf32:	4e1b      	ldr	r6, [pc, #108]	; (1000cfa0 <gpio_port1_isr_handler+0x78>)
1000cf34:	2400      	movs	r4, #0
1000cf36:	6cb3      	ldr	r3, [r6, #72]	; 0x48
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
1000cf38:	2501      	movs	r5, #1
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000cf3a:	8f1f      	ldrh	r7, [r3, #56]	; 0x38
1000cf3c:	b2bf      	uxth	r7, r7
1000cf3e:	0b7b      	lsrs	r3, r7, #13
1000cf40:	035b      	lsls	r3, r3, #13
1000cf42:	4698      	mov	r8, r3

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
			aon_handle_ext_wakeup_isr();
1000cf44:	4b17      	ldr	r3, [pc, #92]	; (1000cfa4 <gpio_port1_isr_handler+0x7c>)
1000cf46:	469a      	mov	sl, r3
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000cf48:	238e      	movs	r3, #142	; 0x8e
1000cf4a:	4699      	mov	r9, r3
1000cf4c:	e013      	b.n	1000cf76 <gpio_port1_isr_handler+0x4e>
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
1000cf4e:	002b      	movs	r3, r5
1000cf50:	40a3      	lsls	r3, r4
1000cf52:	421f      	tst	r7, r3
1000cf54:	d00c      	beq.n	1000cf70 <gpio_port1_isr_handler+0x48>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000cf56:	6cb2      	ldr	r2, [r6, #72]	; 0x48
1000cf58:	b29b      	uxth	r3, r3
1000cf5a:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000cf5c:	464b      	mov	r3, r9
1000cf5e:	5af3      	ldrh	r3, [r6, r3]
1000cf60:	4123      	asrs	r3, r4
1000cf62:	421d      	tst	r5, r3
1000cf64:	d004      	beq.n	1000cf70 <gpio_port1_isr_handler+0x48>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000cf66:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000cf68:	5af3      	ldrh	r3, [r6, r3]
1000cf6a:	4123      	asrs	r3, r4
1000cf6c:	421d      	tst	r5, r3
1000cf6e:	d107      	bne.n	1000cf80 <gpio_port1_isr_handler+0x58>
1000cf70:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000cf72:	2c10      	cmp	r4, #16
1000cf74:	d009      	beq.n	1000cf8a <gpio_port1_isr_handler+0x62>
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000cf76:	4643      	mov	r3, r8
1000cf78:	2b00      	cmp	r3, #0
1000cf7a:	d0e8      	beq.n	1000cf4e <gpio_port1_isr_handler+0x26>
			aon_handle_ext_wakeup_isr();
1000cf7c:	47d0      	blx	sl
1000cf7e:	e7e6      	b.n	1000cf4e <gpio_port1_isr_handler+0x26>
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000cf80:	3412      	adds	r4, #18
1000cf82:	00a4      	lsls	r4, r4, #2
1000cf84:	1934      	adds	r4, r6, r4
1000cf86:	6863      	ldr	r3, [r4, #4]
1000cf88:	4798      	blx	r3
1000cf8a:	2180      	movs	r1, #128	; 0x80
1000cf8c:	23c0      	movs	r3, #192	; 0xc0
1000cf8e:	4a06      	ldr	r2, [pc, #24]	; (1000cfa8 <gpio_port1_isr_handler+0x80>)
1000cf90:	0449      	lsls	r1, r1, #17
1000cf92:	005b      	lsls	r3, r3, #1
1000cf94:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000cf96:	bc1c      	pop	{r2, r3, r4}
1000cf98:	4690      	mov	r8, r2
1000cf9a:	4699      	mov	r9, r3
1000cf9c:	46a2      	mov	sl, r4
1000cf9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cfa0:	1001e0b0 	.word	0x1001e0b0
1000cfa4:	0001bc51 	.word	0x0001bc51
1000cfa8:	e000e100 	.word	0xe000e100

1000cfac <gpio_port2_isr_handler>:
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000cfac:	2390      	movs	r3, #144	; 0x90

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000cfae:	2280      	movs	r2, #128	; 0x80
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000cfb0:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000cfb2:	491a      	ldr	r1, [pc, #104]	; (1000d01c <gpio_port2_isr_handler+0x70>)

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000cfb4:	0152      	lsls	r2, r2, #5
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000cfb6:	58c8      	ldr	r0, [r1, r3]
1000cfb8:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000cfba:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000cfbc:	4213      	tst	r3, r2
1000cfbe:	d110      	bne.n	1000cfe2 <gpio_port2_isr_handler+0x36>
1000cfc0:	2280      	movs	r2, #128	; 0x80
1000cfc2:	0192      	lsls	r2, r2, #6
1000cfc4:	4213      	tst	r3, r2
1000cfc6:	d120      	bne.n	1000d00a <gpio_port2_isr_handler+0x5e>
1000cfc8:	2280      	movs	r2, #128	; 0x80
1000cfca:	01d2      	lsls	r2, r2, #7
1000cfcc:	4213      	tst	r3, r2
1000cfce:	d11e      	bne.n	1000d00e <gpio_port2_isr_handler+0x62>
1000cfd0:	0bdb      	lsrs	r3, r3, #15
1000cfd2:	d11e      	bne.n	1000d012 <gpio_port2_isr_handler+0x66>
1000cfd4:	2180      	movs	r1, #128	; 0x80
1000cfd6:	23c0      	movs	r3, #192	; 0xc0
1000cfd8:	4a11      	ldr	r2, [pc, #68]	; (1000d020 <gpio_port2_isr_handler+0x74>)
1000cfda:	0489      	lsls	r1, r1, #18
1000cfdc:	005b      	lsls	r3, r3, #1
1000cfde:	50d1      	str	r1, [r2, r3]
                _gpio_instances[2].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000cfe0:	bd10      	pop	{r4, pc}
static void gpio_port2_isr_handler(void)
{
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000cfe2:	240c      	movs	r4, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000cfe4:	23d6      	movs	r3, #214	; 0xd6
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000cfe6:	b292      	uxth	r2, r2
1000cfe8:	8702      	strh	r2, [r0, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000cfea:	5acb      	ldrh	r3, [r1, r3]
1000cfec:	2201      	movs	r2, #1
1000cfee:	4123      	asrs	r3, r4
1000cff0:	421a      	tst	r2, r3
1000cff2:	d0ef      	beq.n	1000cfd4 <gpio_port2_isr_handler+0x28>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000cff4:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000cff6:	5acb      	ldrh	r3, [r1, r3]
1000cff8:	4123      	asrs	r3, r4
1000cffa:	421a      	tst	r2, r3
1000cffc:	d0ea      	beq.n	1000cfd4 <gpio_port2_isr_handler+0x28>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000cffe:	3424      	adds	r4, #36	; 0x24
1000d000:	00a4      	lsls	r4, r4, #2
1000d002:	1909      	adds	r1, r1, r4
1000d004:	684b      	ldr	r3, [r1, #4]
1000d006:	4798      	blx	r3
1000d008:	e7e4      	b.n	1000cfd4 <gpio_port2_isr_handler+0x28>
static void gpio_port2_isr_handler(void)
{
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000d00a:	240d      	movs	r4, #13
1000d00c:	e7ea      	b.n	1000cfe4 <gpio_port2_isr_handler+0x38>
1000d00e:	240e      	movs	r4, #14
1000d010:	e7e8      	b.n	1000cfe4 <gpio_port2_isr_handler+0x38>
1000d012:	2280      	movs	r2, #128	; 0x80
1000d014:	240f      	movs	r4, #15
1000d016:	0212      	lsls	r2, r2, #8
1000d018:	e7e4      	b.n	1000cfe4 <gpio_port2_isr_handler+0x38>
1000d01a:	46c0      	nop			; (mov r8, r8)
1000d01c:	1001e0b0 	.word	0x1001e0b0
1000d020:	e000e100 	.word	0xe000e100

1000d024 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000d024:	2300      	movs	r3, #0
	config->input_pull = GPIO_PIN_PULL_UP;
1000d026:	2201      	movs	r2, #1
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000d028:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000d02a:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000d02c:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000d02e:	70c3      	strb	r3, [r0, #3]
}
1000d030:	4770      	bx	lr
1000d032:	46c0      	nop			; (mov r8, r8)

1000d034 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000d034:	0003      	movs	r3, r0
1000d036:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000d038:	2017      	movs	r0, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000d03a:	2b01      	cmp	r3, #1
1000d03c:	d92b      	bls.n	1000d096 <gpio_pin_set_config+0x62>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000d03e:	2b07      	cmp	r3, #7
1000d040:	d82a      	bhi.n	1000d098 <gpio_pin_set_config+0x64>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000d042:	009d      	lsls	r5, r3, #2
1000d044:	3810      	subs	r0, #16
1000d046:	40a8      	lsls	r0, r5
1000d048:	4c5a      	ldr	r4, [pc, #360]	; (1000d1b4 <gpio_pin_set_config+0x180>)
1000d04a:	6c62      	ldr	r2, [r4, #68]	; 0x44
1000d04c:	4382      	bics	r2, r0
1000d04e:	6462      	str	r2, [r4, #68]	; 0x44
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000d050:	001a      	movs	r2, r3
1000d052:	3a1d      	subs	r2, #29
1000d054:	2a02      	cmp	r2, #2
1000d056:	d834      	bhi.n	1000d0c2 <gpio_pin_set_config+0x8e>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000d058:	241f      	movs	r4, #31
1000d05a:	4d57      	ldr	r5, [pc, #348]	; (1000d1b8 <gpio_pin_set_config+0x184>)
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000d05c:	784a      	ldrb	r2, [r1, #1]
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000d05e:	7d28      	ldrb	r0, [r5, #20]
1000d060:	1ae4      	subs	r4, r4, r3
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000d062:	2a01      	cmp	r2, #1
1000d064:	d063      	beq.n	1000d12e <gpio_pin_set_config+0xfa>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000d066:	2201      	movs	r2, #1
1000d068:	40a2      	lsls	r2, r4
1000d06a:	4302      	orrs	r2, r0
1000d06c:	b2d2      	uxtb	r2, r2
1000d06e:	752a      	strb	r2, [r5, #20]
			}
			if (config->aon_wakeup) {
1000d070:	78ca      	ldrb	r2, [r1, #3]
1000d072:	2a00      	cmp	r2, #0
1000d074:	d023      	beq.n	1000d0be <gpio_pin_set_config+0x8a>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000d076:	201f      	movs	r0, #31
1000d078:	1ac0      	subs	r0, r0, r3
1000d07a:	2301      	movs	r3, #1
1000d07c:	0080      	lsls	r0, r0, #2
1000d07e:	4083      	lsls	r3, r0
1000d080:	494d      	ldr	r1, [pc, #308]	; (1000d1b8 <gpio_pin_set_config+0x184>)
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d082:	2000      	movs	r0, #0
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000d084:	880a      	ldrh	r2, [r1, #0]
1000d086:	4313      	orrs	r3, r2
1000d088:	b29b      	uxth	r3, r3
1000d08a:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000d08c:	2302      	movs	r3, #2
1000d08e:	4a4b      	ldr	r2, [pc, #300]	; (1000d1bc <gpio_pin_set_config+0x188>)
1000d090:	7811      	ldrb	r1, [r2, #0]
1000d092:	430b      	orrs	r3, r1
1000d094:	7013      	strb	r3, [r2, #0]
				}
			}
		}
	}
	return status;
}
1000d096:	bd70      	pop	{r4, r5, r6, pc}
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 15) {
1000d098:	2b0f      	cmp	r3, #15
1000d09a:	d93e      	bls.n	1000d11a <gpio_pin_set_config+0xe6>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 23) {
1000d09c:	2b17      	cmp	r3, #23
1000d09e:	d84a      	bhi.n	1000d136 <gpio_pin_set_config+0x102>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000d0a0:	2207      	movs	r2, #7
1000d0a2:	0014      	movs	r4, r2
1000d0a4:	401c      	ands	r4, r3
1000d0a6:	00a4      	lsls	r4, r4, #2
1000d0a8:	40a2      	lsls	r2, r4
1000d0aa:	4d42      	ldr	r5, [pc, #264]	; (1000d1b4 <gpio_pin_set_config+0x180>)
1000d0ac:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
1000d0ae:	4390      	bics	r0, r2
1000d0b0:	64e8      	str	r0, [r5, #76]	; 0x4c
1000d0b2:	e7cd      	b.n	1000d050 <gpio_pin_set_config+0x1c>
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000d0b4:	4003      	ands	r3, r0
1000d0b6:	409a      	lsls	r2, r3
1000d0b8:	4b41      	ldr	r3, [pc, #260]	; (1000d1c0 <gpio_pin_set_config+0x18c>)
1000d0ba:	b292      	uxth	r2, r2
1000d0bc:	821a      	strh	r2, [r3, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d0be:	2000      	movs	r0, #0
1000d0c0:	e7e9      	b.n	1000d096 <gpio_pin_set_config+0x62>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000d0c2:	780a      	ldrb	r2, [r1, #0]
1000d0c4:	2a00      	cmp	r2, #0
1000d0c6:	d11a      	bne.n	1000d0fe <gpio_pin_set_config+0xca>
				if(gpio_pin < 16) {
1000d0c8:	2b0f      	cmp	r3, #15
1000d0ca:	d849      	bhi.n	1000d160 <gpio_pin_set_config+0x12c>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000d0cc:	3201      	adds	r2, #1
1000d0ce:	409a      	lsls	r2, r3
1000d0d0:	483c      	ldr	r0, [pc, #240]	; (1000d1c4 <gpio_pin_set_config+0x190>)
1000d0d2:	b292      	uxth	r2, r2
1000d0d4:	8282      	strh	r2, [r0, #20]
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000d0d6:	784a      	ldrb	r2, [r1, #1]
1000d0d8:	2a01      	cmp	r2, #1
1000d0da:	d063      	beq.n	1000d1a4 <gpio_pin_set_config+0x170>
1000d0dc:	2a00      	cmp	r2, #0
1000d0de:	d050      	beq.n	1000d182 <gpio_pin_set_config+0x14e>
1000d0e0:	2a02      	cmp	r2, #2
1000d0e2:	d15d      	bne.n	1000d1a0 <gpio_pin_set_config+0x16c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000d0e4:	2101      	movs	r1, #1
1000d0e6:	4099      	lsls	r1, r3
1000d0e8:	4a32      	ldr	r2, [pc, #200]	; (1000d1b4 <gpio_pin_set_config+0x180>)
1000d0ea:	000b      	movs	r3, r1
1000d0ec:	6d50      	ldr	r0, [r2, #84]	; 0x54
1000d0ee:	0001      	movs	r1, r0
1000d0f0:	4319      	orrs	r1, r3
1000d0f2:	6551      	str	r1, [r2, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000d0f4:	6d11      	ldr	r1, [r2, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d0f6:	2000      	movs	r0, #0
							break;
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000d0f8:	4399      	bics	r1, r3
1000d0fa:	6511      	str	r1, [r2, #80]	; 0x50
							break;
1000d0fc:	e7cb      	b.n	1000d096 <gpio_pin_set_config+0x62>
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000d0fe:	2a01      	cmp	r2, #1
1000d100:	d1dd      	bne.n	1000d0be <gpio_pin_set_config+0x8a>
				if (gpio_pin < 16) {
1000d102:	2b0f      	cmp	r3, #15
1000d104:	d946      	bls.n	1000d194 <gpio_pin_set_config+0x160>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000d106:	200f      	movs	r0, #15
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000d108:	2b1f      	cmp	r3, #31
1000d10a:	d9d3      	bls.n	1000d0b4 <gpio_pin_set_config+0x80>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000d10c:	4003      	ands	r3, r0
1000d10e:	409a      	lsls	r2, r3
1000d110:	4b2d      	ldr	r3, [pc, #180]	; (1000d1c8 <gpio_pin_set_config+0x194>)
1000d112:	b292      	uxth	r2, r2
1000d114:	821a      	strh	r2, [r3, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d116:	2000      	movs	r0, #0
1000d118:	e7bd      	b.n	1000d096 <gpio_pin_set_config+0x62>
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 15) {
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000d11a:	2207      	movs	r2, #7
1000d11c:	0014      	movs	r4, r2
1000d11e:	401c      	ands	r4, r3
1000d120:	00a4      	lsls	r4, r4, #2
1000d122:	40a2      	lsls	r2, r4
1000d124:	4d23      	ldr	r5, [pc, #140]	; (1000d1b4 <gpio_pin_set_config+0x180>)
1000d126:	6ca8      	ldr	r0, [r5, #72]	; 0x48
1000d128:	4390      	bics	r0, r2
1000d12a:	64a8      	str	r0, [r5, #72]	; 0x48
1000d12c:	e790      	b.n	1000d050 <gpio_pin_set_config+0x1c>
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000d12e:	40a2      	lsls	r2, r4
1000d130:	4390      	bics	r0, r2
1000d132:	7528      	strb	r0, [r5, #20]
1000d134:	e79c      	b.n	1000d070 <gpio_pin_set_config+0x3c>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 15) {
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 23) {
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000d136:	001a      	movs	r2, r3
1000d138:	3a2c      	subs	r2, #44	; 0x2c
1000d13a:	b2d0      	uxtb	r0, r2
1000d13c:	2803      	cmp	r0, #3
1000d13e:	d900      	bls.n	1000d142 <gpio_pin_set_config+0x10e>
1000d140:	e786      	b.n	1000d050 <gpio_pin_set_config+0x1c>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000d142:	2601      	movs	r6, #1
1000d144:	2482      	movs	r4, #130	; 0x82
1000d146:	4096      	lsls	r6, r2
1000d148:	4d1b      	ldr	r5, [pc, #108]	; (1000d1b8 <gpio_pin_set_config+0x184>)
1000d14a:	00e4      	lsls	r4, r4, #3
1000d14c:	5d28      	ldrb	r0, [r5, r4]
1000d14e:	5d2a      	ldrb	r2, [r5, r4]
1000d150:	0700      	lsls	r0, r0, #28
1000d152:	0f00      	lsrs	r0, r0, #28
1000d154:	43b0      	bics	r0, r6
1000d156:	260f      	movs	r6, #15
1000d158:	43b2      	bics	r2, r6
1000d15a:	4302      	orrs	r2, r0
1000d15c:	552a      	strb	r2, [r5, r4]
1000d15e:	e777      	b.n	1000d050 <gpio_pin_set_config+0x1c>
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000d160:	200f      	movs	r0, #15
1000d162:	4018      	ands	r0, r3
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000d164:	2b1f      	cmp	r3, #31
1000d166:	d805      	bhi.n	1000d174 <gpio_pin_set_config+0x140>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000d168:	2201      	movs	r2, #1
1000d16a:	4082      	lsls	r2, r0
1000d16c:	4814      	ldr	r0, [pc, #80]	; (1000d1c0 <gpio_pin_set_config+0x18c>)
1000d16e:	b292      	uxth	r2, r2
1000d170:	8282      	strh	r2, [r0, #20]
1000d172:	e7b0      	b.n	1000d0d6 <gpio_pin_set_config+0xa2>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000d174:	2301      	movs	r3, #1
1000d176:	4083      	lsls	r3, r0
1000d178:	4a13      	ldr	r2, [pc, #76]	; (1000d1c8 <gpio_pin_set_config+0x194>)
1000d17a:	b29b      	uxth	r3, r3
1000d17c:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d17e:	2000      	movs	r0, #0
1000d180:	e789      	b.n	1000d096 <gpio_pin_set_config+0x62>
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000d182:	2101      	movs	r1, #1
1000d184:	4099      	lsls	r1, r3
1000d186:	000b      	movs	r3, r1
1000d188:	480a      	ldr	r0, [pc, #40]	; (1000d1b4 <gpio_pin_set_config+0x180>)
1000d18a:	6d02      	ldr	r2, [r0, #80]	; 0x50
1000d18c:	4313      	orrs	r3, r2
1000d18e:	6503      	str	r3, [r0, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d190:	2000      	movs	r0, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000d192:	e780      	b.n	1000d096 <gpio_pin_set_config+0x62>
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000d194:	409a      	lsls	r2, r3
1000d196:	4b0b      	ldr	r3, [pc, #44]	; (1000d1c4 <gpio_pin_set_config+0x190>)
1000d198:	b292      	uxth	r2, r2
1000d19a:	821a      	strh	r2, [r3, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d19c:	2000      	movs	r0, #0
1000d19e:	e77a      	b.n	1000d096 <gpio_pin_set_config+0x62>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000d1a0:	2017      	movs	r0, #23
1000d1a2:	e778      	b.n	1000d096 <gpio_pin_set_config+0x62>
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000d1a4:	4803      	ldr	r0, [pc, #12]	; (1000d1b4 <gpio_pin_set_config+0x180>)
1000d1a6:	409a      	lsls	r2, r3
1000d1a8:	6d01      	ldr	r1, [r0, #80]	; 0x50
1000d1aa:	000b      	movs	r3, r1
1000d1ac:	4393      	bics	r3, r2
1000d1ae:	6503      	str	r3, [r0, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000d1b0:	2000      	movs	r0, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000d1b2:	e770      	b.n	1000d096 <gpio_pin_set_config+0x62>
1000d1b4:	4000b000 	.word	0x4000b000
1000d1b8:	4000f000 	.word	0x4000f000
1000d1bc:	4000e000 	.word	0x4000e000
1000d1c0:	40011000 	.word	0x40011000
1000d1c4:	40010000 	.word	0x40010000
1000d1c8:	40013000 	.word	0x40013000

1000d1cc <gpio_pinmux_cofiguration>:
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;

	pinmux_sel &= 0xFF;
1000d1cc:	23ff      	movs	r3, #255	; 0xff
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000d1ce:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000d1d0:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000d1d2:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000d1d4:	2807      	cmp	r0, #7
1000d1d6:	d80e      	bhi.n	1000d1f6 <gpio_pinmux_cofiguration+0x2a>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000d1d8:	2407      	movs	r4, #7
1000d1da:	0086      	lsls	r6, r0, #2
1000d1dc:	40b4      	lsls	r4, r6
1000d1de:	4b31      	ldr	r3, [pc, #196]	; (1000d2a4 <gpio_pinmux_cofiguration+0xd8>)
1000d1e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
1000d1e2:	43a2      	bics	r2, r4
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000d1e4:	000c      	movs	r4, r1
1000d1e6:	40b4      	lsls	r4, r6
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;

	pinmux_sel &= 0xFF;

	if (gpio_pin <= 7) {
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000d1e8:	645a      	str	r2, [r3, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000d1ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
1000d1ec:	4322      	orrs	r2, r4
1000d1ee:	645a      	str	r2, [r3, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000d1f0:	2901      	cmp	r1, #1
1000d1f2:	d036      	beq.n	1000d262 <gpio_pinmux_cofiguration+0x96>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	}
}
1000d1f4:	bd70      	pop	{r4, r5, r6, pc}
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	} else if (gpio_pin <= 15) {
1000d1f6:	280f      	cmp	r0, #15
1000d1f8:	d816      	bhi.n	1000d228 <gpio_pinmux_cofiguration+0x5c>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000d1fa:	2407      	movs	r4, #7
1000d1fc:	0022      	movs	r2, r4
1000d1fe:	4002      	ands	r2, r0
1000d200:	0092      	lsls	r2, r2, #2
1000d202:	4094      	lsls	r4, r2
1000d204:	4b27      	ldr	r3, [pc, #156]	; (1000d2a4 <gpio_pinmux_cofiguration+0xd8>)
1000d206:	6c9e      	ldr	r6, [r3, #72]	; 0x48
1000d208:	43a6      	bics	r6, r4
1000d20a:	649e      	str	r6, [r3, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000d20c:	000e      	movs	r6, r1
1000d20e:	4096      	lsls	r6, r2
1000d210:	0032      	movs	r2, r6
1000d212:	6c9c      	ldr	r4, [r3, #72]	; 0x48
1000d214:	4322      	orrs	r2, r4
1000d216:	649a      	str	r2, [r3, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000d218:	2901      	cmp	r1, #1
1000d21a:	d1eb      	bne.n	1000d1f4 <gpio_pinmux_cofiguration+0x28>
			if (gpio_pin <= 11) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d21c:	31a8      	adds	r1, #168	; 0xa8
		}
	} else if (gpio_pin <= 15) {
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 11) {
1000d21e:	280b      	cmp	r0, #11
1000d220:	d93e      	bls.n	1000d2a0 <gpio_pinmux_cofiguration+0xd4>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d222:	21d6      	movs	r1, #214	; 0xd6
1000d224:	0049      	lsls	r1, r1, #1
1000d226:	e020      	b.n	1000d26a <gpio_pinmux_cofiguration+0x9e>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	} else if (gpio_pin <= 23) {
1000d228:	2817      	cmp	r0, #23
1000d22a:	d8e3      	bhi.n	1000d1f4 <gpio_pinmux_cofiguration+0x28>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000d22c:	2407      	movs	r4, #7
1000d22e:	0022      	movs	r2, r4
1000d230:	4002      	ands	r2, r0
1000d232:	0092      	lsls	r2, r2, #2
1000d234:	4094      	lsls	r4, r2
1000d236:	4b1b      	ldr	r3, [pc, #108]	; (1000d2a4 <gpio_pinmux_cofiguration+0xd8>)
1000d238:	6cde      	ldr	r6, [r3, #76]	; 0x4c
1000d23a:	43a6      	bics	r6, r4
1000d23c:	64de      	str	r6, [r3, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000d23e:	000e      	movs	r6, r1
1000d240:	4096      	lsls	r6, r2
1000d242:	0032      	movs	r2, r6
1000d244:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
1000d246:	4322      	orrs	r2, r4
1000d248:	64da      	str	r2, [r3, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000d24a:	2901      	cmp	r1, #1
1000d24c:	d1d2      	bne.n	1000d1f4 <gpio_pinmux_cofiguration+0x28>
			if (gpio_pin <= 19) {
1000d24e:	2813      	cmp	r0, #19
1000d250:	d925      	bls.n	1000d29e <gpio_pinmux_cofiguration+0xd2>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d252:	2403      	movs	r4, #3
1000d254:	22da      	movs	r2, #218	; 0xda
1000d256:	4020      	ands	r0, r4
1000d258:	0052      	lsls	r2, r2, #1
1000d25a:	5899      	ldr	r1, [r3, r2]
1000d25c:	00c0      	lsls	r0, r0, #3
1000d25e:	343c      	adds	r4, #60	; 0x3c
1000d260:	e015      	b.n	1000d28e <gpio_pinmux_cofiguration+0xc2>

	if (gpio_pin <= 7) {
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 3) {
1000d262:	2803      	cmp	r0, #3
1000d264:	d90e      	bls.n	1000d284 <gpio_pinmux_cofiguration+0xb8>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d266:	21d2      	movs	r1, #210	; 0xd2
1000d268:	0049      	lsls	r1, r1, #1
	} else if (gpio_pin <= 23) {
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d26a:	2203      	movs	r2, #3
1000d26c:	4010      	ands	r0, r2
1000d26e:	00c0      	lsls	r0, r0, #3
1000d270:	323c      	adds	r2, #60	; 0x3c
1000d272:	4082      	lsls	r2, r0
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000d274:	4085      	lsls	r5, r0
	} else if (gpio_pin <= 23) {
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d276:	585c      	ldr	r4, [r3, r1]
1000d278:	4394      	bics	r4, r2
1000d27a:	505c      	str	r4, [r3, r1]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000d27c:	585a      	ldr	r2, [r3, r1]
1000d27e:	4315      	orrs	r5, r2
1000d280:	505d      	str	r5, [r3, r1]
1000d282:	e7b7      	b.n	1000d1f4 <gpio_pinmux_cofiguration+0x28>
	if (gpio_pin <= 7) {
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 3) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d284:	22d0      	movs	r2, #208	; 0xd0
1000d286:	243f      	movs	r4, #63	; 0x3f
1000d288:	0052      	lsls	r2, r2, #1
1000d28a:	5899      	ldr	r1, [r3, r2]
1000d28c:	00c0      	lsls	r0, r0, #3
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d28e:	4084      	lsls	r4, r0
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000d290:	4085      	lsls	r5, r0
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d292:	43a1      	bics	r1, r4
1000d294:	5099      	str	r1, [r3, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000d296:	5899      	ldr	r1, [r3, r2]
1000d298:	430d      	orrs	r5, r1
1000d29a:	509d      	str	r5, [r3, r2]
			}
		}
	}
}
1000d29c:	e7aa      	b.n	1000d1f4 <gpio_pinmux_cofiguration+0x28>
	} else if (gpio_pin <= 23) {
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000d29e:	31b0      	adds	r1, #176	; 0xb0
1000d2a0:	31ff      	adds	r1, #255	; 0xff
1000d2a2:	e7e2      	b.n	1000d26a <gpio_pinmux_cofiguration+0x9e>
1000d2a4:	4000b000 	.word	0x4000b000

1000d2a8 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000d2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d2aa:	468c      	mov	ip, r1
1000d2ac:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000d2ae:	280f      	cmp	r0, #15
1000d2b0:	d904      	bls.n	1000d2bc <gpio_register_callback+0x14>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
1000d2b2:	331f      	adds	r3, #31
1000d2b4:	4283      	cmp	r3, r0
1000d2b6:	419b      	sbcs	r3, r3
1000d2b8:	425b      	negs	r3, r3
1000d2ba:	3301      	adds	r3, #1
		gpio_port = 1;
	} else {
		gpio_port = 2;
	}
	switch (callback_type) {
1000d2bc:	2a01      	cmp	r2, #1
1000d2be:	d043      	beq.n	1000d348 <gpio_register_callback+0xa0>
1000d2c0:	2a00      	cmp	r2, #0
1000d2c2:	d033      	beq.n	1000d32c <gpio_register_callback+0x84>
1000d2c4:	2a02      	cmp	r2, #2
1000d2c6:	d015      	beq.n	1000d2f4 <gpio_register_callback+0x4c>
1000d2c8:	2a03      	cmp	r2, #3
1000d2ca:	d021      	beq.n	1000d310 <gpio_register_callback+0x68>
1000d2cc:	220f      	movs	r2, #15
1000d2ce:	4010      	ands	r0, r2
1000d2d0:	3a0e      	subs	r2, #14
1000d2d2:	4082      	lsls	r2, r0
1000d2d4:	4c23      	ldr	r4, [pc, #140]	; (1000d364 <gpio_register_callback+0xbc>)
1000d2d6:	00dd      	lsls	r5, r3, #3

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000d2d8:	4661      	mov	r1, ip
1000d2da:	18eb      	adds	r3, r5, r3
1000d2dc:	005d      	lsls	r5, r3, #1
1000d2de:	1828      	adds	r0, r5, r0
1000d2e0:	0080      	lsls	r0, r0, #2
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000d2e2:	00db      	lsls	r3, r3, #3

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000d2e4:	1820      	adds	r0, r4, r0
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000d2e6:	18e3      	adds	r3, r4, r3
1000d2e8:	3344      	adds	r3, #68	; 0x44

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000d2ea:	6041      	str	r1, [r0, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000d2ec:	8819      	ldrh	r1, [r3, #0]
1000d2ee:	430a      	orrs	r2, r1
1000d2f0:	801a      	strh	r2, [r3, #0]
}
1000d2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
		break;

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000d2f4:	220f      	movs	r2, #15
1000d2f6:	4010      	ands	r0, r2
1000d2f8:	3a0e      	subs	r2, #14
1000d2fa:	4082      	lsls	r2, r0
1000d2fc:	00dd      	lsls	r5, r3, #3
1000d2fe:	4c19      	ldr	r4, [pc, #100]	; (1000d364 <gpio_register_callback+0xbc>)
1000d300:	18ee      	adds	r6, r5, r3
1000d302:	00f6      	lsls	r6, r6, #3
1000d304:	59a1      	ldr	r1, [r4, r6]
1000d306:	b297      	uxth	r7, r2
1000d308:	850f      	strh	r7, [r1, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000d30a:	59a6      	ldr	r6, [r4, r6]
1000d30c:	8637      	strh	r7, [r6, #48]	; 0x30
		break;
1000d30e:	e7e3      	b.n	1000d2d8 <gpio_register_callback+0x30>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000d310:	220f      	movs	r2, #15
1000d312:	4010      	ands	r0, r2
1000d314:	3a0e      	subs	r2, #14
1000d316:	4082      	lsls	r2, r0
1000d318:	00dd      	lsls	r5, r3, #3
1000d31a:	4c12      	ldr	r4, [pc, #72]	; (1000d364 <gpio_register_callback+0xbc>)
1000d31c:	18ee      	adds	r6, r5, r3
1000d31e:	00f6      	lsls	r6, r6, #3
1000d320:	59a1      	ldr	r1, [r4, r6]
1000d322:	b297      	uxth	r7, r2
1000d324:	850f      	strh	r7, [r1, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000d326:	59a6      	ldr	r6, [r4, r6]
1000d328:	86b7      	strh	r7, [r6, #52]	; 0x34
		break;
1000d32a:	e7d5      	b.n	1000d2d8 <gpio_register_callback+0x30>
	} else {
		gpio_port = 2;
	}
	switch (callback_type) {
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000d32c:	220f      	movs	r2, #15
1000d32e:	4010      	ands	r0, r2
1000d330:	3a0e      	subs	r2, #14
1000d332:	4082      	lsls	r2, r0
1000d334:	00dd      	lsls	r5, r3, #3
1000d336:	4c0b      	ldr	r4, [pc, #44]	; (1000d364 <gpio_register_callback+0xbc>)
1000d338:	18ee      	adds	r6, r5, r3
1000d33a:	00f6      	lsls	r6, r6, #3
1000d33c:	59a1      	ldr	r1, [r4, r6]
1000d33e:	b297      	uxth	r7, r2
1000d340:	858f      	strh	r7, [r1, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000d342:	59a6      	ldr	r6, [r4, r6]
1000d344:	86b7      	strh	r7, [r6, #52]	; 0x34
		break;
1000d346:	e7c7      	b.n	1000d2d8 <gpio_register_callback+0x30>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000d348:	270f      	movs	r7, #15
1000d34a:	4038      	ands	r0, r7
1000d34c:	4082      	lsls	r2, r0
1000d34e:	00dd      	lsls	r5, r3, #3
1000d350:	4c04      	ldr	r4, [pc, #16]	; (1000d364 <gpio_register_callback+0xbc>)
1000d352:	18ee      	adds	r6, r5, r3
1000d354:	00f6      	lsls	r6, r6, #3
1000d356:	59a1      	ldr	r1, [r4, r6]
1000d358:	b297      	uxth	r7, r2
1000d35a:	858f      	strh	r7, [r1, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000d35c:	59a6      	ldr	r6, [r4, r6]
1000d35e:	8637      	strh	r7, [r6, #48]	; 0x30
		break;
1000d360:	e7ba      	b.n	1000d2d8 <gpio_register_callback+0x30>
1000d362:	46c0      	nop			; (mov r8, r8)
1000d364:	1001e0b0 	.word	0x1001e0b0

1000d368 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000d368:	b510      	push	{r4, lr}

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000d36a:	2280      	movs	r2, #128	; 0x80
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000d36c:	280f      	cmp	r0, #15
1000d36e:	d91b      	bls.n	1000d3a8 <gpio_enable_callback+0x40>
		gpio_port = 0;
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000d370:	281f      	cmp	r0, #31
1000d372:	d914      	bls.n	1000d39e <gpio_enable_callback+0x36>
1000d374:	4b0f      	ldr	r3, [pc, #60]	; (1000d3b4 <gpio_enable_callback+0x4c>)
1000d376:	0492      	lsls	r2, r2, #18
1000d378:	601a      	str	r2, [r3, #0]
1000d37a:	2302      	movs	r3, #2
		gpio_port = 2;
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000d37c:	220f      	movs	r2, #15
1000d37e:	4010      	ands	r0, r2
1000d380:	3a0e      	subs	r2, #14
1000d382:	4082      	lsls	r2, r0
1000d384:	00d9      	lsls	r1, r3, #3
1000d386:	4c0c      	ldr	r4, [pc, #48]	; (1000d3b8 <gpio_enable_callback+0x50>)
1000d388:	18cb      	adds	r3, r1, r3
1000d38a:	00db      	lsls	r3, r3, #3
1000d38c:	18e1      	adds	r1, r4, r3
1000d38e:	3146      	adds	r1, #70	; 0x46
1000d390:	8808      	ldrh	r0, [r1, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000d392:	58e3      	ldr	r3, [r4, r3]
		gpio_port = 2;
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000d394:	4310      	orrs	r0, r2
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000d396:	b292      	uxth	r2, r2
		gpio_port = 2;
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000d398:	8008      	strh	r0, [r1, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000d39a:	841a      	strh	r2, [r3, #32]
}
1000d39c:	bd10      	pop	{r4, pc}
1000d39e:	4b05      	ldr	r3, [pc, #20]	; (1000d3b4 <gpio_enable_callback+0x4c>)
1000d3a0:	0452      	lsls	r2, r2, #17
1000d3a2:	601a      	str	r2, [r3, #0]
1000d3a4:	2301      	movs	r3, #1
1000d3a6:	e7e9      	b.n	1000d37c <gpio_enable_callback+0x14>
1000d3a8:	4b02      	ldr	r3, [pc, #8]	; (1000d3b4 <gpio_enable_callback+0x4c>)
1000d3aa:	0412      	lsls	r2, r2, #16
1000d3ac:	601a      	str	r2, [r3, #0]
1000d3ae:	2300      	movs	r3, #0
1000d3b0:	e7e4      	b.n	1000d37c <gpio_enable_callback+0x14>
1000d3b2:	46c0      	nop			; (mov r8, r8)
1000d3b4:	e000e100 	.word	0xe000e100
1000d3b8:	1001e0b0 	.word	0x1001e0b0

1000d3bc <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000d3bc:	4a11      	ldr	r2, [pc, #68]	; (1000d404 <gpio_init+0x48>)
1000d3be:	b510      	push	{r4, lr}
1000d3c0:	0014      	movs	r4, r2
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000d3c2:	2100      	movs	r1, #0
1000d3c4:	2000      	movs	r0, #0
1000d3c6:	34d8      	adds	r4, #216	; 0xd8
1000d3c8:	0013      	movs	r3, r2
1000d3ca:	3b40      	subs	r3, #64	; 0x40
1000d3cc:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000d3ce:	429a      	cmp	r2, r3
1000d3d0:	d1fc      	bne.n	1000d3cc <gpio_init+0x10>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000d3d2:	8050      	strh	r0, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000d3d4:	8010      	strh	r0, [r2, #0]
1000d3d6:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000d3d8:	42a2      	cmp	r2, r4
1000d3da:	d1f5      	bne.n	1000d3c8 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000d3dc:	4b0a      	ldr	r3, [pc, #40]	; (1000d408 <gpio_init+0x4c>)
1000d3de:	4a0b      	ldr	r2, [pc, #44]	; (1000d40c <gpio_init+0x50>)
	_gpio_instances[1].hw = (void *)GPIO1;
	_gpio_instances[2].hw = (void *)GPIO2;
1000d3e0:	490b      	ldr	r1, [pc, #44]	; (1000d410 <gpio_init+0x54>)
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000d3e2:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000d3e4:	4a0b      	ldr	r2, [pc, #44]	; (1000d414 <gpio_init+0x58>)
	_gpio_instances[2].hw = (void *)GPIO2;
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000d3e6:	4c0c      	ldr	r4, [pc, #48]	; (1000d418 <gpio_init+0x5c>)
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
	_gpio_instances[1].hw = (void *)GPIO1;
1000d3e8:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000d3ea:	2290      	movs	r2, #144	; 0x90
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000d3ec:	2027      	movs	r0, #39	; 0x27
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
	_gpio_instances[1].hw = (void *)GPIO1;
	_gpio_instances[2].hw = (void *)GPIO2;
1000d3ee:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000d3f0:	490a      	ldr	r1, [pc, #40]	; (1000d41c <gpio_init+0x60>)
1000d3f2:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000d3f4:	490a      	ldr	r1, [pc, #40]	; (1000d420 <gpio_init+0x64>)
1000d3f6:	2028      	movs	r0, #40	; 0x28
1000d3f8:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000d3fa:	490a      	ldr	r1, [pc, #40]	; (1000d424 <gpio_init+0x68>)
1000d3fc:	2029      	movs	r0, #41	; 0x29
1000d3fe:	47a0      	blx	r4
}
1000d400:	bd10      	pop	{r4, pc}
1000d402:	46c0      	nop			; (mov r8, r8)
1000d404:	1001e0f4 	.word	0x1001e0f4
1000d408:	1001e0b0 	.word	0x1001e0b0
1000d40c:	40010000 	.word	0x40010000
1000d410:	40013000 	.word	0x40013000
1000d414:	40011000 	.word	0x40011000
1000d418:	1000dda5 	.word	0x1000dda5
1000d41c:	1000ced1 	.word	0x1000ced1
1000d420:	1000cf29 	.word	0x1000cf29
1000d424:	1000cfad 	.word	0x1000cfad

1000d428 <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000d428:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d42a:	464f      	mov	r7, r9
1000d42c:	4646      	mov	r6, r8
1000d42e:	b4c0      	push	{r6, r7}
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
1000d430:	884d      	ldrh	r5, [r1, #2]
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000d432:	4681      	mov	r9, r0
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000d434:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
1000d436:	2d00      	cmp	r5, #0
1000d438:	d104      	bne.n	1000d444 <_i2c_master_read_packet+0x1c>
	if (!module->no_stop) {
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
}
1000d43a:	0018      	movs	r0, r3
1000d43c:	bc0c      	pop	{r2, r3}
1000d43e:	4690      	mov	r8, r2
1000d440:	4699      	mov	r9, r3
1000d442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000d444:	2428      	movs	r4, #40	; 0x28
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000d446:	6802      	ldr	r2, [r0, #0]
1000d448:	5d13      	ldrb	r3, [r2, r4]
1000d44a:	07db      	lsls	r3, r3, #31
1000d44c:	d4fc      	bmi.n	1000d448 <_i2c_master_read_packet+0x20>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
1000d44e:	2301      	movs	r3, #1
1000d450:	2434      	movs	r4, #52	; 0x34
1000d452:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000d454:	3c14      	subs	r4, #20
1000d456:	5513      	strb	r3, [r2, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
1000d458:	2402      	movs	r4, #2
1000d45a:	880b      	ldrh	r3, [r1, #0]
1000d45c:	34ff      	adds	r4, #255	; 0xff
1000d45e:	005b      	lsls	r3, r3, #1
1000d460:	4323      	orrs	r3, r4
1000d462:	b29b      	uxth	r3, r3
1000d464:	8013      	strh	r3, [r2, #0]
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
1000d466:	2301      	movs	r3, #1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
1000d468:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
1000d46a:	4698      	mov	r8, r3
1000d46c:	4640      	mov	r0, r8
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
1000d46e:	7b13      	ldrb	r3, [r2, #12]
1000d470:	b2db      	uxtb	r3, r3
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
1000d472:	4218      	tst	r0, r3
1000d474:	d006      	beq.n	1000d484 <_i2c_master_read_packet+0x5c>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
1000d476:	7910      	ldrb	r0, [r2, #4]
1000d478:	1c67      	adds	r7, r4, #1
1000d47a:	4684      	mov	ip, r0
1000d47c:	4666      	mov	r6, ip
1000d47e:	6848      	ldr	r0, [r1, #4]
1000d480:	5506      	strb	r6, [r0, r4]
1000d482:	b2bc      	uxth	r4, r7
	} while (counter < length); 
1000d484:	42ac      	cmp	r4, r5
1000d486:	d3f1      	bcc.n	1000d46c <_i2c_master_read_packet+0x44>

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000d488:	06db      	lsls	r3, r3, #27
1000d48a:	d403      	bmi.n	1000d494 <_i2c_master_read_packet+0x6c>
1000d48c:	2110      	movs	r1, #16
		status = i2c_module->TRANSMIT_STATUS.reg;
1000d48e:	7a13      	ldrb	r3, [r2, #8]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000d490:	4219      	tst	r1, r3
1000d492:	d0fc      	beq.n	1000d48e <_i2c_master_read_packet+0x66>
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
1000d494:	464b      	mov	r3, r9
1000d496:	7959      	ldrb	r1, [r3, #5]
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
1000d498:	2300      	movs	r3, #0
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
1000d49a:	2900      	cmp	r1, #0
1000d49c:	d1cd      	bne.n	1000d43a <_i2c_master_read_packet+0x12>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000d49e:	3120      	adds	r1, #32
1000d4a0:	5453      	strb	r3, [r2, r1]
1000d4a2:	e7ca      	b.n	1000d43a <_i2c_master_read_packet+0x12>

1000d4a4 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000d4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d4a6:	4684      	mov	ip, r0
1000d4a8:	2428      	movs	r4, #40	; 0x28
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
1000d4aa:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
1000d4ac:	884e      	ldrh	r6, [r1, #2]
1000d4ae:	5d13      	ldrb	r3, [r2, r4]
1000d4b0:	07db      	lsls	r3, r3, #31
1000d4b2:	d4fc      	bmi.n	1000d4ae <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
1000d4b4:	2301      	movs	r3, #1
1000d4b6:	2434      	movs	r4, #52	; 0x34
1000d4b8:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000d4ba:	3c14      	subs	r4, #20
1000d4bc:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
1000d4be:	880b      	ldrh	r3, [r1, #0]
1000d4c0:	34e0      	adds	r4, #224	; 0xe0
1000d4c2:	005b      	lsls	r3, r3, #1
1000d4c4:	4323      	orrs	r3, r4
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
        //printf(".");
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
1000d4c6:	2501      	movs	r5, #1
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
1000d4c8:	2400      	movs	r4, #0

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
1000d4ca:	b29b      	uxth	r3, r3
1000d4cc:	8013      	strh	r3, [r2, #0]
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
        //printf(".");
		status = i2c_module->TRANSMIT_STATUS.reg;
1000d4ce:	7a13      	ldrb	r3, [r2, #8]
1000d4d0:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
1000d4d2:	421d      	tst	r5, r3
1000d4d4:	d004      	beq.n	1000d4e0 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
1000d4d6:	6848      	ldr	r0, [r1, #4]
1000d4d8:	1c67      	adds	r7, r4, #1
1000d4da:	5d04      	ldrb	r4, [r0, r4]
1000d4dc:	8014      	strh	r4, [r2, #0]
1000d4de:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
1000d4e0:	42b4      	cmp	r4, r6
1000d4e2:	d3f4      	bcc.n	1000d4ce <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000d4e4:	06db      	lsls	r3, r3, #27
1000d4e6:	d403      	bmi.n	1000d4f0 <_i2c_master_write_packet+0x4c>
1000d4e8:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
1000d4ea:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000d4ec:	4219      	tst	r1, r3
1000d4ee:	d0fc      	beq.n	1000d4ea <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
1000d4f0:	4663      	mov	r3, ip
1000d4f2:	795b      	ldrb	r3, [r3, #5]
1000d4f4:	2b00      	cmp	r3, #0
1000d4f6:	d101      	bne.n	1000d4fc <_i2c_master_write_packet+0x58>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000d4f8:	2120      	movs	r1, #32
1000d4fa:	5453      	strb	r3, [r2, r1]
	}

	return STATUS_OK;
}
1000d4fc:	2000      	movs	r0, #0
1000d4fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000d500 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
1000d500:	2303      	movs	r3, #3
1000d502:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
1000d504:	330d      	adds	r3, #13
1000d506:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
1000d508:	3b08      	subs	r3, #8
1000d50a:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
1000d50c:	3301      	adds	r3, #1
1000d50e:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
1000d510:	3b07      	subs	r3, #7
1000d512:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
1000d514:	6103      	str	r3, [r0, #16]
}
1000d516:	4770      	bx	lr

1000d518 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
1000d518:	b570      	push	{r4, r5, r6, lr}
1000d51a:	0015      	movs	r5, r2
1000d51c:	0004      	movs	r4, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
1000d51e:	6001      	str	r1, [r0, #0]
1000d520:	2228      	movs	r2, #40	; 0x28

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
1000d522:	2d00      	cmp	r5, #0
1000d524:	d00d      	beq.n	1000d542 <i2c_master_init+0x2a>
1000d526:	5c8b      	ldrb	r3, [r1, r2]
1000d528:	07db      	lsls	r3, r3, #31
1000d52a:	0fdb      	lsrs	r3, r3, #31
1000d52c:	b2db      	uxtb	r3, r3
1000d52e:	2b00      	cmp	r3, #0
1000d530:	d1f9      	bne.n	1000d526 <i2c_master_init+0xe>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
1000d532:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
1000d534:	6823      	ldr	r3, [r4, #0]
1000d536:	4a0f      	ldr	r2, [pc, #60]	; (1000d574 <i2c_master_init+0x5c>)
1000d538:	4293      	cmp	r3, r2
1000d53a:	d017      	beq.n	1000d56c <i2c_master_init+0x54>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
1000d53c:	4a0e      	ldr	r2, [pc, #56]	; (1000d578 <i2c_master_init+0x60>)
1000d53e:	4293      	cmp	r3, r2
1000d540:	d001      	beq.n	1000d546 <i2c_master_init+0x2e>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
1000d542:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
1000d544:	bd70      	pop	{r4, r5, r6, pc}

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
1000d546:	2019      	movs	r0, #25
1000d548:	4b0c      	ldr	r3, [pc, #48]	; (1000d57c <i2c_master_init+0x64>)
1000d54a:	4798      	blx	r3
	Assert(config);

	I2c *const i2c_module = (module->hw);

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
1000d54c:	8929      	ldrh	r1, [r5, #8]
1000d54e:	7928      	ldrb	r0, [r5, #4]
1000d550:	4e0b      	ldr	r6, [pc, #44]	; (1000d580 <i2c_master_init+0x68>)
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
1000d552:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
1000d554:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
1000d556:	7b28      	ldrb	r0, [r5, #12]
1000d558:	8a29      	ldrh	r1, [r5, #16]
1000d55a:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000d55c:	782b      	ldrb	r3, [r5, #0]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
1000d55e:	2000      	movs	r0, #0

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000d560:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000d562:	886b      	ldrh	r3, [r5, #2]
1000d564:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
1000d566:	2301      	movs	r3, #1
1000d568:	7723      	strb	r3, [r4, #28]
1000d56a:	e7eb      	b.n	1000d544 <i2c_master_init+0x2c>
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
1000d56c:	4b03      	ldr	r3, [pc, #12]	; (1000d57c <i2c_master_init+0x64>)
1000d56e:	2003      	movs	r0, #3
1000d570:	4798      	blx	r3
1000d572:	e7eb      	b.n	1000d54c <i2c_master_init+0x34>
1000d574:	40003000 	.word	0x40003000
1000d578:	40003400 	.word	0x40003400
1000d57c:	1000d98d 	.word	0x1000d98d
1000d580:	1000d1cd 	.word	0x1000d1cd

1000d584 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000d584:	0003      	movs	r3, r0
1000d586:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
1000d588:	2017      	movs	r0, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
1000d58a:	2b00      	cmp	r3, #0
1000d58c:	d006      	beq.n	1000d59c <i2c_master_read_packet_wait+0x18>
1000d58e:	2900      	cmp	r1, #0
1000d590:	d004      	beq.n	1000d59c <i2c_master_read_packet_wait+0x18>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000d592:	2200      	movs	r2, #0

	return _i2c_master_read_packet(module, packet);
1000d594:	0018      	movs	r0, r3
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000d596:	715a      	strb	r2, [r3, #5]

	return _i2c_master_read_packet(module, packet);
1000d598:	4b01      	ldr	r3, [pc, #4]	; (1000d5a0 <i2c_master_read_packet_wait+0x1c>)
1000d59a:	4798      	blx	r3
}
1000d59c:	bd10      	pop	{r4, pc}
1000d59e:	46c0      	nop			; (mov r8, r8)
1000d5a0:	1000d429 	.word	0x1000d429

1000d5a4 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000d5a4:	b570      	push	{r4, r5, r6, lr}
1000d5a6:	0004      	movs	r4, r0
1000d5a8:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
1000d5aa:	2017      	movs	r0, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000d5ac:	2c00      	cmp	r4, #0
1000d5ae:	d00a      	beq.n	1000d5c6 <i2c_master_write_packet_wait+0x22>
1000d5b0:	2900      	cmp	r1, #0
1000d5b2:	d008      	beq.n	1000d5c6 <i2c_master_write_packet_wait+0x22>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000d5b4:	2300      	movs	r3, #0

    printf("!!");
1000d5b6:	4804      	ldr	r0, [pc, #16]	; (1000d5c8 <i2c_master_write_packet_wait+0x24>)
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000d5b8:	7163      	strb	r3, [r4, #5]

    printf("!!");
1000d5ba:	4b04      	ldr	r3, [pc, #16]	; (1000d5cc <i2c_master_write_packet_wait+0x28>)
1000d5bc:	4798      	blx	r3
	return _i2c_master_write_packet(module, packet);
1000d5be:	0029      	movs	r1, r5
1000d5c0:	0020      	movs	r0, r4
1000d5c2:	4b03      	ldr	r3, [pc, #12]	; (1000d5d0 <i2c_master_write_packet_wait+0x2c>)
1000d5c4:	4798      	blx	r3
}
1000d5c6:	bd70      	pop	{r4, r5, r6, pc}
1000d5c8:	1001ad3c 	.word	0x1001ad3c
1000d5cc:	10018455 	.word	0x10018455
1000d5d0:	1000d4a5 	.word	0x1000d4a5

1000d5d4 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000d5d4:	0003      	movs	r3, r0
1000d5d6:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
1000d5d8:	2017      	movs	r0, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
1000d5da:	2b00      	cmp	r3, #0
1000d5dc:	d006      	beq.n	1000d5ec <i2c_master_write_packet_wait_no_stop+0x18>
1000d5de:	2900      	cmp	r1, #0
1000d5e0:	d004      	beq.n	1000d5ec <i2c_master_write_packet_wait_no_stop+0x18>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
1000d5e2:	2201      	movs	r2, #1

	return _i2c_master_write_packet(module, packet);
1000d5e4:	0018      	movs	r0, r3
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
1000d5e6:	715a      	strb	r2, [r3, #5]

	return _i2c_master_write_packet(module, packet);
1000d5e8:	4b01      	ldr	r3, [pc, #4]	; (1000d5f0 <i2c_master_write_packet_wait_no_stop+0x1c>)
1000d5ea:	4798      	blx	r3
}
1000d5ec:	bd10      	pop	{r4, pc}
1000d5ee:	46c0      	nop			; (mov r8, r8)
1000d5f0:	1000d4a5 	.word	0x1000d4a5

1000d5f4 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000d5f4:	2801      	cmp	r0, #1
1000d5f6:	d021      	beq.n	1000d63c <system_clock_config+0x48>
1000d5f8:	2800      	cmp	r0, #0
1000d5fa:	d016      	beq.n	1000d62a <system_clock_config+0x36>
1000d5fc:	2802      	cmp	r0, #2
1000d5fe:	d112      	bne.n	1000d626 <system_clock_config+0x32>
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
			break;

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000d600:	200c      	movs	r0, #12
1000d602:	4a18      	ldr	r2, [pc, #96]	; (1000d664 <system_clock_config+0x70>)
1000d604:	6993      	ldr	r3, [r2, #24]
1000d606:	4383      	bics	r3, r0
1000d608:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000d60a:	4a17      	ldr	r2, [pc, #92]	; (1000d668 <system_clock_config+0x74>)
1000d60c:	4b17      	ldr	r3, [pc, #92]	; (1000d66c <system_clock_config+0x78>)
1000d60e:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000d610:	2003      	movs	r0, #3
1000d612:	4b14      	ldr	r3, [pc, #80]	; (1000d664 <system_clock_config+0x70>)
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000d614:	4001      	ands	r1, r0

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000d616:	699a      	ldr	r2, [r3, #24]
1000d618:	4382      	bics	r2, r0
1000d61a:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000d61c:	699a      	ldr	r2, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000d61e:	2000      	movs	r0, #0
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000d620:	4311      	orrs	r1, r2
1000d622:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000d624:	e000      	b.n	1000d628 <system_clock_config+0x34>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000d626:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000d628:	4770      	bx	lr
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000d62a:	230c      	movs	r3, #12
1000d62c:	4a0d      	ldr	r2, [pc, #52]	; (1000d664 <system_clock_config+0x70>)
1000d62e:	6990      	ldr	r0, [r2, #24]
1000d630:	4303      	orrs	r3, r0
1000d632:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000d634:	4a0c      	ldr	r2, [pc, #48]	; (1000d668 <system_clock_config+0x74>)
1000d636:	4b0d      	ldr	r3, [pc, #52]	; (1000d66c <system_clock_config+0x78>)
1000d638:	601a      	str	r2, [r3, #0]
			break;
1000d63a:	e7e9      	b.n	1000d610 <system_clock_config+0x1c>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000d63c:	2208      	movs	r2, #8
1000d63e:	4b09      	ldr	r3, [pc, #36]	; (1000d664 <system_clock_config+0x70>)
1000d640:	6998      	ldr	r0, [r3, #24]
1000d642:	4302      	orrs	r2, r0
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000d644:	2004      	movs	r0, #4
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
			break;

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000d646:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000d648:	699a      	ldr	r2, [r3, #24]
1000d64a:	4382      	bics	r2, r0
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000d64c:	2080      	movs	r0, #128	; 0x80
			break;

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000d64e:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000d650:	4a07      	ldr	r2, [pc, #28]	; (1000d670 <system_clock_config+0x7c>)
1000d652:	0300      	lsls	r0, r0, #12
1000d654:	6853      	ldr	r3, [r2, #4]
1000d656:	4303      	orrs	r3, r0
1000d658:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000d65a:	4a06      	ldr	r2, [pc, #24]	; (1000d674 <system_clock_config+0x80>)
1000d65c:	4b03      	ldr	r3, [pc, #12]	; (1000d66c <system_clock_config+0x78>)
1000d65e:	601a      	str	r2, [r3, #0]
			break;
1000d660:	e7d6      	b.n	1000d610 <system_clock_config+0x1c>
1000d662:	46c0      	nop			; (mov r8, r8)
1000d664:	4000b000 	.word	0x4000b000
1000d668:	018cba80 	.word	0x018cba80
1000d66c:	1001e188 	.word	0x1001e188
1000d670:	4000f000 	.word	0x4000f000
1000d674:	001e8480 	.word	0x001e8480

1000d678 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000d678:	4b01      	ldr	r3, [pc, #4]	; (1000d680 <system_clock_get_value+0x8>)
1000d67a:	6818      	ldr	r0, [r3, #0]
}
1000d67c:	4770      	bx	lr
1000d67e:	46c0      	nop			; (mov r8, r8)
1000d680:	1001e188 	.word	0x1001e188

1000d684 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000d684:	b500      	push	{lr}
	switch (peripheral) {
1000d686:	2835      	cmp	r0, #53	; 0x35
1000d688:	d900      	bls.n	1000d68c <system_clock_peripheral_enable+0x8>
1000d68a:	e16d      	b.n	1000d968 <system_clock_peripheral_enable+0x2e4>
1000d68c:	4bb7      	ldr	r3, [pc, #732]	; (1000d96c <system_clock_peripheral_enable+0x2e8>)
1000d68e:	0080      	lsls	r0, r0, #2
1000d690:	581b      	ldr	r3, [r3, r0]
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000d692:	4ab7      	ldr	r2, [pc, #732]	; (1000d970 <system_clock_peripheral_enable+0x2ec>)
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
	switch (peripheral) {
1000d694:	469f      	mov	pc, r3
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000d696:	2302      	movs	r3, #2

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d698:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000d69a:	7d11      	ldrb	r1, [r2, #20]
1000d69c:	430b      	orrs	r3, r1
1000d69e:	7513      	strb	r3, [r2, #20]
		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
1000d6a0:	bd00      	pop	{pc}
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000d6a2:	2301      	movs	r3, #1
1000d6a4:	7d11      	ldrb	r1, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d6a6:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000d6a8:	430b      	orrs	r3, r1
1000d6aa:	7513      	strb	r3, [r2, #20]
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000d6ac:	e7f8      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d6ae:	2180      	movs	r1, #128	; 0x80
1000d6b0:	6913      	ldr	r3, [r2, #16]
1000d6b2:	0409      	lsls	r1, r1, #16
1000d6b4:	430b      	orrs	r3, r1
1000d6b6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d6b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000d6ba:	e7f1      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d6bc:	2180      	movs	r1, #128	; 0x80
1000d6be:	6913      	ldr	r3, [r2, #16]
1000d6c0:	03c9      	lsls	r1, r1, #15
1000d6c2:	430b      	orrs	r3, r1
1000d6c4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d6c6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000d6c8:	e7ea      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d6ca:	2180      	movs	r1, #128	; 0x80
1000d6cc:	6913      	ldr	r3, [r2, #16]
1000d6ce:	0389      	lsls	r1, r1, #14
1000d6d0:	430b      	orrs	r3, r1
1000d6d2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d6d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000d6d6:	e7e3      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d6d8:	2180      	movs	r1, #128	; 0x80
1000d6da:	6913      	ldr	r3, [r2, #16]
1000d6dc:	0349      	lsls	r1, r1, #13
1000d6de:	430b      	orrs	r3, r1
1000d6e0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d6e2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000d6e4:	e7dc      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d6e6:	2180      	movs	r1, #128	; 0x80
1000d6e8:	6913      	ldr	r3, [r2, #16]
1000d6ea:	0309      	lsls	r1, r1, #12
1000d6ec:	430b      	orrs	r3, r1
1000d6ee:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d6f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000d6f2:	e7d5      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d6f4:	2180      	movs	r1, #128	; 0x80
1000d6f6:	6913      	ldr	r3, [r2, #16]
1000d6f8:	02c9      	lsls	r1, r1, #11
1000d6fa:	430b      	orrs	r3, r1
1000d6fc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d6fe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000d700:	e7ce      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d702:	2180      	movs	r1, #128	; 0x80
1000d704:	6913      	ldr	r3, [r2, #16]
1000d706:	0289      	lsls	r1, r1, #10
1000d708:	430b      	orrs	r3, r1
1000d70a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d70c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000d70e:	e7c7      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d710:	2180      	movs	r1, #128	; 0x80
1000d712:	6913      	ldr	r3, [r2, #16]
1000d714:	0249      	lsls	r1, r1, #9
1000d716:	430b      	orrs	r3, r1
1000d718:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d71a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000d71c:	e7c0      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d71e:	2180      	movs	r1, #128	; 0x80
1000d720:	6913      	ldr	r3, [r2, #16]
1000d722:	0209      	lsls	r1, r1, #8
1000d724:	430b      	orrs	r3, r1
1000d726:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d728:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000d72a:	e7b9      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d72c:	2180      	movs	r1, #128	; 0x80
1000d72e:	6913      	ldr	r3, [r2, #16]
1000d730:	01c9      	lsls	r1, r1, #7
1000d732:	430b      	orrs	r3, r1
1000d734:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d736:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000d738:	e7b2      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d73a:	2180      	movs	r1, #128	; 0x80
1000d73c:	6913      	ldr	r3, [r2, #16]
1000d73e:	0189      	lsls	r1, r1, #6
1000d740:	430b      	orrs	r3, r1
1000d742:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d744:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000d746:	e7ab      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d748:	2180      	movs	r1, #128	; 0x80
1000d74a:	6913      	ldr	r3, [r2, #16]
1000d74c:	0149      	lsls	r1, r1, #5
1000d74e:	430b      	orrs	r3, r1
1000d750:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d752:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000d754:	e7a4      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d756:	2180      	movs	r1, #128	; 0x80
1000d758:	6913      	ldr	r3, [r2, #16]
1000d75a:	0109      	lsls	r1, r1, #4
1000d75c:	430b      	orrs	r3, r1
1000d75e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d760:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000d762:	e79d      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d764:	2180      	movs	r1, #128	; 0x80
1000d766:	6913      	ldr	r3, [r2, #16]
1000d768:	00c9      	lsls	r1, r1, #3
1000d76a:	430b      	orrs	r3, r1
1000d76c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d76e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000d770:	e796      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d772:	2180      	movs	r1, #128	; 0x80
1000d774:	6913      	ldr	r3, [r2, #16]
1000d776:	0089      	lsls	r1, r1, #2
1000d778:	430b      	orrs	r3, r1
1000d77a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d77c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000d77e:	e78f      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d780:	2180      	movs	r1, #128	; 0x80
1000d782:	6913      	ldr	r3, [r2, #16]
1000d784:	0049      	lsls	r1, r1, #1
1000d786:	430b      	orrs	r3, r1
1000d788:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d78a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000d78c:	e788      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d78e:	2380      	movs	r3, #128	; 0x80
1000d790:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d792:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d794:	430b      	orrs	r3, r1
1000d796:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000d798:	e782      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d79a:	2340      	movs	r3, #64	; 0x40
1000d79c:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d79e:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d7a0:	430b      	orrs	r3, r1
1000d7a2:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000d7a4:	e77c      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d7a6:	2320      	movs	r3, #32
1000d7a8:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d7aa:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d7ac:	430b      	orrs	r3, r1
1000d7ae:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000d7b0:	e776      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d7b2:	2310      	movs	r3, #16
1000d7b4:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d7b6:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d7b8:	430b      	orrs	r3, r1
1000d7ba:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000d7bc:	e770      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d7be:	2308      	movs	r3, #8
1000d7c0:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d7c2:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d7c4:	430b      	orrs	r3, r1
1000d7c6:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000d7c8:	e76a      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d7ca:	2304      	movs	r3, #4
1000d7cc:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d7ce:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d7d0:	430b      	orrs	r3, r1
1000d7d2:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000d7d4:	e764      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d7d6:	2302      	movs	r3, #2
1000d7d8:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d7da:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d7dc:	430b      	orrs	r3, r1
1000d7de:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000d7e0:	e75e      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d7e2:	2301      	movs	r3, #1
1000d7e4:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d7e6:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d7e8:	430b      	orrs	r3, r1
1000d7ea:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000d7ec:	e758      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d7ee:	2180      	movs	r1, #128	; 0x80
1000d7f0:	68d3      	ldr	r3, [r2, #12]
1000d7f2:	05c9      	lsls	r1, r1, #23
1000d7f4:	430b      	orrs	r3, r1
1000d7f6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d7f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000d7fa:	e751      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d7fc:	2180      	movs	r1, #128	; 0x80
1000d7fe:	68d3      	ldr	r3, [r2, #12]
1000d800:	0589      	lsls	r1, r1, #22
1000d802:	430b      	orrs	r3, r1
1000d804:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d806:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000d808:	e74a      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d80a:	2180      	movs	r1, #128	; 0x80
1000d80c:	68d3      	ldr	r3, [r2, #12]
1000d80e:	0549      	lsls	r1, r1, #21
1000d810:	430b      	orrs	r3, r1
1000d812:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d814:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000d816:	e743      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d818:	2180      	movs	r1, #128	; 0x80
1000d81a:	68d3      	ldr	r3, [r2, #12]
1000d81c:	0509      	lsls	r1, r1, #20
1000d81e:	430b      	orrs	r3, r1
1000d820:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d822:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000d824:	e73c      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d826:	2180      	movs	r1, #128	; 0x80
1000d828:	68d3      	ldr	r3, [r2, #12]
1000d82a:	04c9      	lsls	r1, r1, #19
1000d82c:	430b      	orrs	r3, r1
1000d82e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d830:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000d832:	e735      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d834:	2180      	movs	r1, #128	; 0x80
1000d836:	68d3      	ldr	r3, [r2, #12]
1000d838:	0489      	lsls	r1, r1, #18
1000d83a:	430b      	orrs	r3, r1
1000d83c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d83e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000d840:	e72e      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d842:	2180      	movs	r1, #128	; 0x80
1000d844:	68d3      	ldr	r3, [r2, #12]
1000d846:	0449      	lsls	r1, r1, #17
1000d848:	430b      	orrs	r3, r1
1000d84a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d84c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000d84e:	e727      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d850:	2180      	movs	r1, #128	; 0x80
1000d852:	68d3      	ldr	r3, [r2, #12]
1000d854:	0409      	lsls	r1, r1, #16
1000d856:	430b      	orrs	r3, r1
1000d858:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d85a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000d85c:	e720      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d85e:	2180      	movs	r1, #128	; 0x80
1000d860:	68d3      	ldr	r3, [r2, #12]
1000d862:	03c9      	lsls	r1, r1, #15
1000d864:	430b      	orrs	r3, r1
1000d866:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d868:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000d86a:	e719      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d86c:	2180      	movs	r1, #128	; 0x80
1000d86e:	68d3      	ldr	r3, [r2, #12]
1000d870:	0389      	lsls	r1, r1, #14
1000d872:	430b      	orrs	r3, r1
1000d874:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d876:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000d878:	e712      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d87a:	2180      	movs	r1, #128	; 0x80
1000d87c:	68d3      	ldr	r3, [r2, #12]
1000d87e:	0349      	lsls	r1, r1, #13
1000d880:	430b      	orrs	r3, r1
1000d882:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d884:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000d886:	e70b      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d888:	2180      	movs	r1, #128	; 0x80
1000d88a:	68d3      	ldr	r3, [r2, #12]
1000d88c:	0309      	lsls	r1, r1, #12
1000d88e:	430b      	orrs	r3, r1
1000d890:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d892:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000d894:	e704      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d896:	2180      	movs	r1, #128	; 0x80
1000d898:	68d3      	ldr	r3, [r2, #12]
1000d89a:	02c9      	lsls	r1, r1, #11
1000d89c:	430b      	orrs	r3, r1
1000d89e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d8a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000d8a2:	e6fd      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d8a4:	2180      	movs	r1, #128	; 0x80
1000d8a6:	68d3      	ldr	r3, [r2, #12]
1000d8a8:	0289      	lsls	r1, r1, #10
1000d8aa:	430b      	orrs	r3, r1
1000d8ac:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d8ae:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000d8b0:	e6f6      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d8b2:	2180      	movs	r1, #128	; 0x80
1000d8b4:	68d3      	ldr	r3, [r2, #12]
1000d8b6:	0249      	lsls	r1, r1, #9
1000d8b8:	430b      	orrs	r3, r1
1000d8ba:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d8bc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000d8be:	e6ef      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d8c0:	2180      	movs	r1, #128	; 0x80
1000d8c2:	68d3      	ldr	r3, [r2, #12]
1000d8c4:	0209      	lsls	r1, r1, #8
1000d8c6:	430b      	orrs	r3, r1
1000d8c8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d8ca:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000d8cc:	e6e8      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d8ce:	2180      	movs	r1, #128	; 0x80
1000d8d0:	68d3      	ldr	r3, [r2, #12]
1000d8d2:	01c9      	lsls	r1, r1, #7
1000d8d4:	430b      	orrs	r3, r1
1000d8d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d8d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000d8da:	e6e1      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d8dc:	2180      	movs	r1, #128	; 0x80
1000d8de:	68d3      	ldr	r3, [r2, #12]
1000d8e0:	0189      	lsls	r1, r1, #6
1000d8e2:	430b      	orrs	r3, r1
1000d8e4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d8e6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000d8e8:	e6da      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d8ea:	2180      	movs	r1, #128	; 0x80
1000d8ec:	68d3      	ldr	r3, [r2, #12]
1000d8ee:	0149      	lsls	r1, r1, #5
1000d8f0:	430b      	orrs	r3, r1
1000d8f2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d8f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000d8f6:	e6d3      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d8f8:	2180      	movs	r1, #128	; 0x80
1000d8fa:	68d3      	ldr	r3, [r2, #12]
1000d8fc:	0109      	lsls	r1, r1, #4
1000d8fe:	430b      	orrs	r3, r1
1000d900:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d902:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000d904:	e6cc      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d906:	2180      	movs	r1, #128	; 0x80
1000d908:	68d3      	ldr	r3, [r2, #12]
1000d90a:	0049      	lsls	r1, r1, #1
1000d90c:	430b      	orrs	r3, r1
1000d90e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d910:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000d912:	e6c5      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d914:	2380      	movs	r3, #128	; 0x80
1000d916:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d918:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d91a:	430b      	orrs	r3, r1
1000d91c:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000d91e:	e6bf      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d920:	2320      	movs	r3, #32
1000d922:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d924:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d926:	430b      	orrs	r3, r1
1000d928:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000d92a:	e6b9      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d92c:	2310      	movs	r3, #16
1000d92e:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d930:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d932:	430b      	orrs	r3, r1
1000d934:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000d936:	e6b3      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d938:	2308      	movs	r3, #8
1000d93a:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d93c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d93e:	430b      	orrs	r3, r1
1000d940:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000d942:	e6ad      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d944:	2304      	movs	r3, #4
1000d946:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d948:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d94a:	430b      	orrs	r3, r1
1000d94c:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000d94e:	e6a7      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d950:	2302      	movs	r3, #2
1000d952:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d954:	2000      	movs	r0, #0
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d956:	430b      	orrs	r3, r1
1000d958:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000d95a:	e6a1      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000d95c:	2304      	movs	r3, #4
1000d95e:	7d11      	ldrb	r1, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d960:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000d962:	430b      	orrs	r3, r1
1000d964:	7513      	strb	r3, [r2, #20]
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000d966:	e69b      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>

		default:
			return STATUS_ERR_INVALID_ARG;
1000d968:	2017      	movs	r0, #23
1000d96a:	e699      	b.n	1000d6a0 <system_clock_peripheral_enable+0x1c>
1000d96c:	1001ad40 	.word	0x1001ad40
1000d970:	4000b000 	.word	0x4000b000

1000d974 <system_global_reset>:
 * Use this function to reset system global.
 *
 */
void system_global_reset(void)
{
	LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d974:	2201      	movs	r2, #1
1000d976:	4b04      	ldr	r3, [pc, #16]	; (1000d988 <system_global_reset+0x14>)
1000d978:	6859      	ldr	r1, [r3, #4]
1000d97a:	4391      	bics	r1, r2
1000d97c:	6059      	str	r1, [r3, #4]
		~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GLOBAL_RSTN;
	LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d97e:	6859      	ldr	r1, [r3, #4]
1000d980:	430a      	orrs	r2, r1
1000d982:	605a      	str	r2, [r3, #4]
		LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GLOBAL_RSTN;
};
1000d984:	4770      	bx	lr
1000d986:	46c0      	nop			; (mov r8, r8)
1000d988:	4000b000 	.word	0x4000b000

1000d98c <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000d98c:	b500      	push	{lr}
	switch (peripheral) {
1000d98e:	2843      	cmp	r0, #67	; 0x43
1000d990:	d900      	bls.n	1000d994 <system_peripheral_reset+0x8>
1000d992:	e200      	b.n	1000dd96 <system_peripheral_reset+0x40a>
1000d994:	4bd5      	ldr	r3, [pc, #852]	; (1000dcec <system_peripheral_reset+0x360>)
1000d996:	0080      	lsls	r0, r0, #2
1000d998:	581b      	ldr	r3, [r3, r0]
1000d99a:	469f      	mov	pc, r3
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d99c:	4bd4      	ldr	r3, [pc, #848]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000d99e:	4ad5      	ldr	r2, [pc, #852]	; (1000dcf4 <system_peripheral_reset+0x368>)
1000d9a0:	8919      	ldrh	r1, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d9a2:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d9a4:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d9a6:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d9a8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d9aa:	891a      	ldrh	r2, [r3, #8]
1000d9ac:	0109      	lsls	r1, r1, #4
1000d9ae:	430a      	orrs	r2, r1
1000d9b0:	811a      	strh	r2, [r3, #8]
		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
1000d9b2:	bd00      	pop	{pc}
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d9b4:	4bce      	ldr	r3, [pc, #824]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000d9b6:	4ad0      	ldr	r2, [pc, #832]	; (1000dcf8 <system_peripheral_reset+0x36c>)
1000d9b8:	8919      	ldrh	r1, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d9ba:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d9bc:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d9be:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d9c0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d9c2:	891a      	ldrh	r2, [r3, #8]
1000d9c4:	0049      	lsls	r1, r1, #1
1000d9c6:	430a      	orrs	r2, r1
1000d9c8:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000d9ca:	e7f2      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d9cc:	2180      	movs	r1, #128	; 0x80
1000d9ce:	4bc8      	ldr	r3, [pc, #800]	; (1000dcf0 <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d9d0:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d9d2:	891a      	ldrh	r2, [r3, #8]
1000d9d4:	438a      	bics	r2, r1
1000d9d6:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d9d8:	2280      	movs	r2, #128	; 0x80
1000d9da:	8919      	ldrh	r1, [r3, #8]
1000d9dc:	430a      	orrs	r2, r1
1000d9de:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000d9e0:	e7e7      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d9e2:	2104      	movs	r1, #4
1000d9e4:	4bc2      	ldr	r3, [pc, #776]	; (1000dcf0 <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d9e6:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d9e8:	891a      	ldrh	r2, [r3, #8]
1000d9ea:	438a      	bics	r2, r1
1000d9ec:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d9ee:	2204      	movs	r2, #4
1000d9f0:	8919      	ldrh	r1, [r3, #8]
1000d9f2:	430a      	orrs	r2, r1
1000d9f4:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000d9f6:	e7dc      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d9f8:	4bbd      	ldr	r3, [pc, #756]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000d9fa:	4ac0      	ldr	r2, [pc, #768]	; (1000dcfc <system_peripheral_reset+0x370>)
1000d9fc:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d9fe:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da00:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000da02:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da04:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000da06:	685a      	ldr	r2, [r3, #4]
1000da08:	0449      	lsls	r1, r1, #17
1000da0a:	430a      	orrs	r2, r1
1000da0c:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000da0e:	e7d0      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da10:	4bb7      	ldr	r3, [pc, #732]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000da12:	4abb      	ldr	r2, [pc, #748]	; (1000dd00 <system_peripheral_reset+0x374>)
1000da14:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000da16:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da18:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000da1a:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da1c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000da1e:	685a      	ldr	r2, [r3, #4]
1000da20:	0409      	lsls	r1, r1, #16
1000da22:	430a      	orrs	r2, r1
1000da24:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000da26:	e7c4      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da28:	4bb1      	ldr	r3, [pc, #708]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000da2a:	4ab6      	ldr	r2, [pc, #728]	; (1000dd04 <system_peripheral_reset+0x378>)
1000da2c:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000da2e:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da30:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000da32:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da34:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000da36:	685a      	ldr	r2, [r3, #4]
1000da38:	03c9      	lsls	r1, r1, #15
1000da3a:	430a      	orrs	r2, r1
1000da3c:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000da3e:	e7b8      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da40:	4bab      	ldr	r3, [pc, #684]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000da42:	4ab1      	ldr	r2, [pc, #708]	; (1000dd08 <system_peripheral_reset+0x37c>)
1000da44:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000da46:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da48:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000da4a:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da4c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000da4e:	685a      	ldr	r2, [r3, #4]
1000da50:	0389      	lsls	r1, r1, #14
1000da52:	430a      	orrs	r2, r1
1000da54:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000da56:	e7ac      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da58:	4ba5      	ldr	r3, [pc, #660]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000da5a:	4aac      	ldr	r2, [pc, #688]	; (1000dd0c <system_peripheral_reset+0x380>)
1000da5c:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000da5e:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da60:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000da62:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da64:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000da66:	685a      	ldr	r2, [r3, #4]
1000da68:	0309      	lsls	r1, r1, #12
1000da6a:	430a      	orrs	r2, r1
1000da6c:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000da6e:	e7a0      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da70:	4b9f      	ldr	r3, [pc, #636]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000da72:	4aa7      	ldr	r2, [pc, #668]	; (1000dd10 <system_peripheral_reset+0x384>)
1000da74:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000da76:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da78:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000da7a:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da7c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000da7e:	685a      	ldr	r2, [r3, #4]
1000da80:	0089      	lsls	r1, r1, #2
1000da82:	430a      	orrs	r2, r1
1000da84:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000da86:	e794      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da88:	2280      	movs	r2, #128	; 0x80
1000da8a:	4b99      	ldr	r3, [pc, #612]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000da8c:	6859      	ldr	r1, [r3, #4]
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da8e:	4391      	bics	r1, r2
1000da90:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000da92:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000da94:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000da96:	430a      	orrs	r2, r1
1000da98:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000da9a:	e78a      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000da9c:	4b94      	ldr	r3, [pc, #592]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000da9e:	2220      	movs	r2, #32
1000daa0:	6859      	ldr	r1, [r3, #4]
1000daa2:	e7f4      	b.n	1000da8e <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000daa4:	4b92      	ldr	r3, [pc, #584]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000daa6:	2208      	movs	r2, #8
1000daa8:	6859      	ldr	r1, [r3, #4]
1000daaa:	e7f0      	b.n	1000da8e <system_peripheral_reset+0x102>
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
	switch (peripheral) {
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000daac:	4b90      	ldr	r3, [pc, #576]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000daae:	2202      	movs	r2, #2
1000dab0:	6859      	ldr	r1, [r3, #4]
1000dab2:	e7ec      	b.n	1000da8e <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000dab4:	2140      	movs	r1, #64	; 0x40
1000dab6:	4b8e      	ldr	r3, [pc, #568]	; (1000dcf0 <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dab8:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000daba:	891a      	ldrh	r2, [r3, #8]
1000dabc:	438a      	bics	r2, r1
1000dabe:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000dac0:	2240      	movs	r2, #64	; 0x40
1000dac2:	8919      	ldrh	r1, [r3, #8]
1000dac4:	430a      	orrs	r2, r1
1000dac6:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000dac8:	e773      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000daca:	2120      	movs	r1, #32
1000dacc:	4b88      	ldr	r3, [pc, #544]	; (1000dcf0 <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dace:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000dad0:	891a      	ldrh	r2, [r3, #8]
1000dad2:	438a      	bics	r2, r1
1000dad4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000dad6:	2220      	movs	r2, #32
1000dad8:	8919      	ldrh	r1, [r3, #8]
1000dada:	430a      	orrs	r2, r1
1000dadc:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000dade:	e768      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000dae0:	2110      	movs	r1, #16
1000dae2:	4b83      	ldr	r3, [pc, #524]	; (1000dcf0 <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dae4:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000dae6:	891a      	ldrh	r2, [r3, #8]
1000dae8:	438a      	bics	r2, r1
1000daea:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000daec:	2210      	movs	r2, #16
1000daee:	8919      	ldrh	r1, [r3, #8]
1000daf0:	430a      	orrs	r2, r1
1000daf2:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000daf4:	e75d      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000daf6:	2108      	movs	r1, #8
1000daf8:	4b7d      	ldr	r3, [pc, #500]	; (1000dcf0 <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dafa:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000dafc:	891a      	ldrh	r2, [r3, #8]
1000dafe:	438a      	bics	r2, r1
1000db00:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000db02:	2208      	movs	r2, #8
1000db04:	8919      	ldrh	r1, [r3, #8]
1000db06:	430a      	orrs	r2, r1
1000db08:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000db0a:	e752      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000db0c:	4b78      	ldr	r3, [pc, #480]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000db0e:	4a81      	ldr	r2, [pc, #516]	; (1000dd14 <system_peripheral_reset+0x388>)
1000db10:	8919      	ldrh	r1, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db12:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000db14:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000db16:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000db18:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000db1a:	891a      	ldrh	r2, [r3, #8]
1000db1c:	00c9      	lsls	r1, r1, #3
1000db1e:	430a      	orrs	r2, r1
1000db20:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000db22:	e746      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000db24:	4b72      	ldr	r3, [pc, #456]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000db26:	4a7a      	ldr	r2, [pc, #488]	; (1000dd10 <system_peripheral_reset+0x384>)
1000db28:	8919      	ldrh	r1, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db2a:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000db2c:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000db2e:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000db30:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000db32:	891a      	ldrh	r2, [r3, #8]
1000db34:	0089      	lsls	r1, r1, #2
1000db36:	430a      	orrs	r2, r1
1000db38:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000db3a:	e73a      	b.n	1000d9b2 <system_peripheral_reset+0x26>
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000db3c:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db3e:	4a6c      	ldr	r2, [pc, #432]	; (1000dcf0 <system_peripheral_reset+0x364>)
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000db40:	0609      	lsls	r1, r1, #24
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db42:	6853      	ldr	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db44:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db46:	005b      	lsls	r3, r3, #1
1000db48:	085b      	lsrs	r3, r3, #1
1000db4a:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000db4c:	6853      	ldr	r3, [r2, #4]
1000db4e:	430b      	orrs	r3, r1
1000db50:	6053      	str	r3, [r2, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000db52:	e72e      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db54:	4b66      	ldr	r3, [pc, #408]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000db56:	4a70      	ldr	r2, [pc, #448]	; (1000dd18 <system_peripheral_reset+0x38c>)
1000db58:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db5a:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db5c:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000db5e:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db60:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000db62:	685a      	ldr	r2, [r3, #4]
1000db64:	05c9      	lsls	r1, r1, #23
1000db66:	430a      	orrs	r2, r1
1000db68:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000db6a:	e722      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db6c:	4b60      	ldr	r3, [pc, #384]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000db6e:	4a6b      	ldr	r2, [pc, #428]	; (1000dd1c <system_peripheral_reset+0x390>)
1000db70:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db72:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db74:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000db76:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db78:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000db7a:	685a      	ldr	r2, [r3, #4]
1000db7c:	0589      	lsls	r1, r1, #22
1000db7e:	430a      	orrs	r2, r1
1000db80:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000db82:	e716      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db84:	4b5a      	ldr	r3, [pc, #360]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000db86:	4a66      	ldr	r2, [pc, #408]	; (1000dd20 <system_peripheral_reset+0x394>)
1000db88:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000db8a:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db8c:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000db8e:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db90:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000db92:	685a      	ldr	r2, [r3, #4]
1000db94:	0549      	lsls	r1, r1, #21
1000db96:	430a      	orrs	r2, r1
1000db98:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000db9a:	e70a      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000db9c:	4b54      	ldr	r3, [pc, #336]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000db9e:	4a61      	ldr	r2, [pc, #388]	; (1000dd24 <system_peripheral_reset+0x398>)
1000dba0:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dba2:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dba4:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dba6:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dba8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dbaa:	685a      	ldr	r2, [r3, #4]
1000dbac:	0349      	lsls	r1, r1, #13
1000dbae:	430a      	orrs	r2, r1
1000dbb0:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000dbb2:	e6fe      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000dbb4:	2102      	movs	r1, #2
1000dbb6:	4b4e      	ldr	r3, [pc, #312]	; (1000dcf0 <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dbb8:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000dbba:	891a      	ldrh	r2, [r3, #8]
1000dbbc:	438a      	bics	r2, r1
1000dbbe:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000dbc0:	2202      	movs	r2, #2
1000dbc2:	8919      	ldrh	r1, [r3, #8]
1000dbc4:	430a      	orrs	r2, r1
1000dbc6:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000dbc8:	e6f3      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dbca:	4b49      	ldr	r3, [pc, #292]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000dbcc:	4a56      	ldr	r2, [pc, #344]	; (1000dd28 <system_peripheral_reset+0x39c>)
1000dbce:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dbd0:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dbd2:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dbd4:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dbd6:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dbd8:	685a      	ldr	r2, [r3, #4]
1000dbda:	0509      	lsls	r1, r1, #20
1000dbdc:	430a      	orrs	r2, r1
1000dbde:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000dbe0:	e6e7      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dbe2:	4b43      	ldr	r3, [pc, #268]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000dbe4:	4a51      	ldr	r2, [pc, #324]	; (1000dd2c <system_peripheral_reset+0x3a0>)
1000dbe6:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dbe8:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dbea:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dbec:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dbee:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dbf0:	685a      	ldr	r2, [r3, #4]
1000dbf2:	04c9      	lsls	r1, r1, #19
1000dbf4:	430a      	orrs	r2, r1
1000dbf6:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000dbf8:	e6db      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dbfa:	4b3d      	ldr	r3, [pc, #244]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000dbfc:	4a4c      	ldr	r2, [pc, #304]	; (1000dd30 <system_peripheral_reset+0x3a4>)
1000dbfe:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc00:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dc02:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dc04:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dc06:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dc08:	685a      	ldr	r2, [r3, #4]
1000dc0a:	0489      	lsls	r1, r1, #18
1000dc0c:	430a      	orrs	r2, r1
1000dc0e:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000dc10:	e6cf      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dc12:	4b37      	ldr	r3, [pc, #220]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000dc14:	4a47      	ldr	r2, [pc, #284]	; (1000dd34 <system_peripheral_reset+0x3a8>)
1000dc16:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc18:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dc1a:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dc1c:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dc1e:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dc20:	685a      	ldr	r2, [r3, #4]
1000dc22:	02c9      	lsls	r1, r1, #11
1000dc24:	430a      	orrs	r2, r1
1000dc26:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000dc28:	e6c3      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dc2a:	4b31      	ldr	r3, [pc, #196]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000dc2c:	4a42      	ldr	r2, [pc, #264]	; (1000dd38 <system_peripheral_reset+0x3ac>)
1000dc2e:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc30:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dc32:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dc34:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dc36:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dc38:	685a      	ldr	r2, [r3, #4]
1000dc3a:	0209      	lsls	r1, r1, #8
1000dc3c:	430a      	orrs	r2, r1
1000dc3e:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000dc40:	e6b7      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dc42:	4b2b      	ldr	r3, [pc, #172]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000dc44:	4a3d      	ldr	r2, [pc, #244]	; (1000dd3c <system_peripheral_reset+0x3b0>)
1000dc46:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc48:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dc4a:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dc4c:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dc4e:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dc50:	685a      	ldr	r2, [r3, #4]
1000dc52:	01c9      	lsls	r1, r1, #7
1000dc54:	430a      	orrs	r2, r1
1000dc56:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000dc58:	e6ab      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dc5a:	4b25      	ldr	r3, [pc, #148]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000dc5c:	4a38      	ldr	r2, [pc, #224]	; (1000dd40 <system_peripheral_reset+0x3b4>)
1000dc5e:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc60:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dc62:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dc64:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dc66:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dc68:	685a      	ldr	r2, [r3, #4]
1000dc6a:	0189      	lsls	r1, r1, #6
1000dc6c:	430a      	orrs	r2, r1
1000dc6e:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000dc70:	e69f      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dc72:	4b1f      	ldr	r3, [pc, #124]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000dc74:	4a33      	ldr	r2, [pc, #204]	; (1000dd44 <system_peripheral_reset+0x3b8>)
1000dc76:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc78:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dc7a:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dc7c:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dc7e:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dc80:	685a      	ldr	r2, [r3, #4]
1000dc82:	0149      	lsls	r1, r1, #5
1000dc84:	430a      	orrs	r2, r1
1000dc86:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000dc88:	e693      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dc8a:	4b19      	ldr	r3, [pc, #100]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000dc8c:	4a2e      	ldr	r2, [pc, #184]	; (1000dd48 <system_peripheral_reset+0x3bc>)
1000dc8e:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dc90:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dc92:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dc94:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dc96:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dc98:	685a      	ldr	r2, [r3, #4]
1000dc9a:	0289      	lsls	r1, r1, #10
1000dc9c:	430a      	orrs	r2, r1
1000dc9e:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000dca0:	e687      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dca2:	4b13      	ldr	r3, [pc, #76]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000dca4:	4a29      	ldr	r2, [pc, #164]	; (1000dd4c <system_peripheral_reset+0x3c0>)
1000dca6:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dca8:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dcaa:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dcac:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dcae:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dcb0:	685a      	ldr	r2, [r3, #4]
1000dcb2:	0249      	lsls	r1, r1, #9
1000dcb4:	430a      	orrs	r2, r1
1000dcb6:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000dcb8:	e67b      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dcba:	4b0d      	ldr	r3, [pc, #52]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000dcbc:	4a0d      	ldr	r2, [pc, #52]	; (1000dcf4 <system_peripheral_reset+0x368>)
1000dcbe:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dcc0:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dcc2:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dcc4:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dcc6:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dcc8:	685a      	ldr	r2, [r3, #4]
1000dcca:	0109      	lsls	r1, r1, #4
1000dccc:	430a      	orrs	r2, r1
1000dcce:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000dcd0:	e66f      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dcd2:	4b07      	ldr	r3, [pc, #28]	; (1000dcf0 <system_peripheral_reset+0x364>)
1000dcd4:	4a0f      	ldr	r2, [pc, #60]	; (1000dd14 <system_peripheral_reset+0x388>)
1000dcd6:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dcd8:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dcda:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dcdc:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dcde:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dce0:	685a      	ldr	r2, [r3, #4]
1000dce2:	00c9      	lsls	r1, r1, #3
1000dce4:	430a      	orrs	r2, r1
1000dce6:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000dce8:	e663      	b.n	1000d9b2 <system_peripheral_reset+0x26>
1000dcea:	46c0      	nop			; (mov r8, r8)
1000dcec:	1001ae18 	.word	0x1001ae18
1000dcf0:	4000b000 	.word	0x4000b000
1000dcf4:	fffff7ff 	.word	0xfffff7ff
1000dcf8:	fffffeff 	.word	0xfffffeff
1000dcfc:	feffffff 	.word	0xfeffffff
1000dd00:	ff7fffff 	.word	0xff7fffff
1000dd04:	ffbfffff 	.word	0xffbfffff
1000dd08:	ffdfffff 	.word	0xffdfffff
1000dd0c:	fff7ffff 	.word	0xfff7ffff
1000dd10:	fffffdff 	.word	0xfffffdff
1000dd14:	fffffbff 	.word	0xfffffbff
1000dd18:	bfffffff 	.word	0xbfffffff
1000dd1c:	dfffffff 	.word	0xdfffffff
1000dd20:	efffffff 	.word	0xefffffff
1000dd24:	ffefffff 	.word	0xffefffff
1000dd28:	f7ffffff 	.word	0xf7ffffff
1000dd2c:	fbffffff 	.word	0xfbffffff
1000dd30:	fdffffff 	.word	0xfdffffff
1000dd34:	fffbffff 	.word	0xfffbffff
1000dd38:	ffff7fff 	.word	0xffff7fff
1000dd3c:	ffffbfff 	.word	0xffffbfff
1000dd40:	ffffdfff 	.word	0xffffdfff
1000dd44:	ffffefff 	.word	0xffffefff
1000dd48:	fffdffff 	.word	0xfffdffff
1000dd4c:	fffeffff 	.word	0xfffeffff
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000dd50:	2101      	movs	r1, #1
1000dd52:	4b12      	ldr	r3, [pc, #72]	; (1000dd9c <system_peripheral_reset+0x410>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dd54:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000dd56:	891a      	ldrh	r2, [r3, #8]
1000dd58:	438a      	bics	r2, r1
1000dd5a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000dd5c:	2201      	movs	r2, #1
1000dd5e:	8919      	ldrh	r1, [r3, #8]
1000dd60:	430a      	orrs	r2, r1
1000dd62:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000dd64:	e625      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dd66:	4b0d      	ldr	r3, [pc, #52]	; (1000dd9c <system_peripheral_reset+0x410>)
1000dd68:	4a0d      	ldr	r2, [pc, #52]	; (1000dda0 <system_peripheral_reset+0x414>)
1000dd6a:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000dd6c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dd6e:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dd70:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dd72:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000dd74:	685a      	ldr	r2, [r3, #4]
1000dd76:	0049      	lsls	r1, r1, #1
1000dd78:	430a      	orrs	r2, r1
1000dd7a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000dd7c:	e619      	b.n	1000d9b2 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dd7e:	4b07      	ldr	r3, [pc, #28]	; (1000dd9c <system_peripheral_reset+0x410>)
1000dd80:	2240      	movs	r2, #64	; 0x40
1000dd82:	6859      	ldr	r1, [r3, #4]
1000dd84:	e683      	b.n	1000da8e <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dd86:	4b05      	ldr	r3, [pc, #20]	; (1000dd9c <system_peripheral_reset+0x410>)
1000dd88:	2210      	movs	r2, #16
1000dd8a:	6859      	ldr	r1, [r3, #4]
1000dd8c:	e67f      	b.n	1000da8e <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000dd8e:	4b03      	ldr	r3, [pc, #12]	; (1000dd9c <system_peripheral_reset+0x410>)
1000dd90:	2204      	movs	r2, #4
1000dd92:	6859      	ldr	r1, [r3, #4]
1000dd94:	e67b      	b.n	1000da8e <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000dd96:	2017      	movs	r0, #23
1000dd98:	e60b      	b.n	1000d9b2 <system_peripheral_reset+0x26>
1000dd9a:	46c0      	nop			; (mov r8, r8)
1000dd9c:	4000b000 	.word	0x4000b000
1000dda0:	fffffeff 	.word	0xfffffeff

1000dda4 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000dda4:	2380      	movs	r3, #128	; 0x80
1000dda6:	04db      	lsls	r3, r3, #19
1000dda8:	469c      	mov	ip, r3
1000ddaa:	4460      	add	r0, ip
1000ddac:	0080      	lsls	r0, r0, #2
1000ddae:	6001      	str	r1, [r0, #0]
}
1000ddb0:	4770      	bx	lr
1000ddb2:	46c0      	nop			; (mov r8, r8)

1000ddb4 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000ddb4:	4a04      	ldr	r2, [pc, #16]	; (1000ddc8 <_sbrk+0x14>)
1000ddb6:	6813      	ldr	r3, [r2, #0]
1000ddb8:	2b00      	cmp	r3, #0
1000ddba:	d003      	beq.n	1000ddc4 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	heap += incr;
1000ddbc:	1818      	adds	r0, r3, r0
1000ddbe:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
1000ddc0:	0018      	movs	r0, r3
1000ddc2:	4770      	bx	lr
1000ddc4:	4b01      	ldr	r3, [pc, #4]	; (1000ddcc <_sbrk+0x18>)
1000ddc6:	e7f9      	b.n	1000ddbc <_sbrk+0x8>
1000ddc8:	1001d0fc 	.word	0x1001d0fc
1000ddcc:	1001f2b0 	.word	0x1001f2b0

1000ddd0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
1000ddd0:	2001      	movs	r0, #1
1000ddd2:	4240      	negs	r0, r0
1000ddd4:	4770      	bx	lr
1000ddd6:	46c0      	nop			; (mov r8, r8)

1000ddd8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000ddd8:	2380      	movs	r3, #128	; 0x80
1000ddda:	019b      	lsls	r3, r3, #6

	return 0;
}
1000dddc:	2000      	movs	r0, #0
	return -1;
}

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000ddde:	604b      	str	r3, [r1, #4]

	return 0;
}
1000dde0:	4770      	bx	lr
1000dde2:	46c0      	nop			; (mov r8, r8)

1000dde4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000dde4:	2001      	movs	r0, #1
1000dde6:	4770      	bx	lr

1000dde8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
1000dde8:	2000      	movs	r0, #0
1000ddea:	4770      	bx	lr

1000ddec <interrupt_cb>:
    dualtimer_disable(DUALTIMER_TIMER1);
    dualtimer_disable(DUALTIMER_TIMER2);
}
void interrupt_cb(void)
{
    imu_interrupt = true;
1000ddec:	2201      	movs	r2, #1
    dualtimer_init(&config_dualtimer);
    dualtimer_disable(DUALTIMER_TIMER1);
    dualtimer_disable(DUALTIMER_TIMER2);
}
void interrupt_cb(void)
{
1000ddee:	b510      	push	{r4, lr}
    imu_interrupt = true;
1000ddf0:	4b04      	ldr	r3, [pc, #16]	; (1000de04 <interrupt_cb+0x18>)
    send_plf_int_msg_ind(PIN_AO_GPIO_2, GPIO_CALLBACK_RISING, NULL, 0);
1000ddf2:	2102      	movs	r1, #2
    dualtimer_disable(DUALTIMER_TIMER1);
    dualtimer_disable(DUALTIMER_TIMER2);
}
void interrupt_cb(void)
{
    imu_interrupt = true;
1000ddf4:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(PIN_AO_GPIO_2, GPIO_CALLBACK_RISING, NULL, 0);
1000ddf6:	201d      	movs	r0, #29
1000ddf8:	2300      	movs	r3, #0
1000ddfa:	2200      	movs	r2, #0
1000ddfc:	4c02      	ldr	r4, [pc, #8]	; (1000de08 <interrupt_cb+0x1c>)
1000ddfe:	47a0      	blx	r4
}
1000de00:	bd10      	pop	{r4, pc}
1000de02:	46c0      	nop			; (mov r8, r8)
1000de04:	1001d104 	.word	0x1001d104
1000de08:	1000c509 	.word	0x1000c509

1000de0c <configure_i2c_master>:
    old_val = val;
    count[0] = delta;
}

void configure_i2c_master(void)
{
1000de0c:	b570      	push	{r4, r5, r6, lr}
    i2c_wpacket.data = malloc(16 * sizeof(uint8_t));
1000de0e:	2010      	movs	r0, #16
    old_val = val;
    count[0] = delta;
}

void configure_i2c_master(void)
{
1000de10:	b086      	sub	sp, #24
    i2c_wpacket.data = malloc(16 * sizeof(uint8_t));
1000de12:	4c14      	ldr	r4, [pc, #80]	; (1000de64 <configure_i2c_master+0x58>)
1000de14:	47a0      	blx	r4
1000de16:	4b14      	ldr	r3, [pc, #80]	; (1000de68 <configure_i2c_master+0x5c>)
1000de18:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(16 * sizeof(uint8_t));
1000de1a:	2010      	movs	r0, #16
1000de1c:	47a0      	blx	r4
1000de1e:	4b13      	ldr	r3, [pc, #76]	; (1000de6c <configure_i2c_master+0x60>)
    
    /* Initialize config structure and software module. */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
1000de20:	ac01      	add	r4, sp, #4
}

void configure_i2c_master(void)
{
    i2c_wpacket.data = malloc(16 * sizeof(uint8_t));
    i2c_rpacket.data = malloc(16 * sizeof(uint8_t));
1000de22:	6058      	str	r0, [r3, #4]
    
    /* Initialize config structure and software module. */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
1000de24:	4b12      	ldr	r3, [pc, #72]	; (1000de70 <configure_i2c_master+0x64>)
1000de26:	0020      	movs	r0, r4
1000de28:	4798      	blx	r3
    /* 26 MHz / 65 = 400 kHz */
    config_i2c_master.clock_source = I2C_CLK_INPUT_0;
1000de2a:	2300      	movs	r3, #0
1000de2c:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = 65;
1000de2e:	3341      	adds	r3, #65	; 0x41
1000de30:	8063      	strh	r3, [r4, #2]
    /* 3 MHz / 30 = 100 kHz */
    //config_i2c_master.clock_source = I2C_CLK_INPUT_3;
    //config_i2c_master.clock_divider = 30;
    config_i2c_master.pin_number_pad0 = PIN_LP_GPIO_8;
1000de32:	3b39      	subs	r3, #57	; 0x39
1000de34:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = PIN_LP_GPIO_9;
1000de36:	3301      	adds	r3, #1
1000de38:	60e3      	str	r3, [r4, #12]
1000de3a:	4d0e      	ldr	r5, [pc, #56]	; (1000de74 <configure_i2c_master+0x68>)
    config_i2c_master.pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
1000de3c:	3b07      	subs	r3, #7
1000de3e:	4e0e      	ldr	r6, [pc, #56]	; (1000de78 <configure_i2c_master+0x6c>)
1000de40:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
1000de42:	6123      	str	r3, [r4, #16]
    /* Initialize and enable device with config, and enable i2c. */
    while(i2c_master_init(&i2c_master_instance, I2C0, &config_i2c_master) != STATUS_OK);
1000de44:	0022      	movs	r2, r4
1000de46:	490d      	ldr	r1, [pc, #52]	; (1000de7c <configure_i2c_master+0x70>)
1000de48:	0028      	movs	r0, r5
1000de4a:	47b0      	blx	r6
1000de4c:	2800      	cmp	r0, #0
1000de4e:	d1f9      	bne.n	1000de44 <configure_i2c_master+0x38>
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000de50:	2128      	movs	r1, #40	; 0x28
    
    i2c_enable(i2c_master_instance.hw);
1000de52:	682a      	ldr	r2, [r5, #0]
1000de54:	5c53      	ldrb	r3, [r2, r1]
1000de56:	07db      	lsls	r3, r3, #31
1000de58:	d4fc      	bmi.n	1000de54 <configure_i2c_master+0x48>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
1000de5a:	2301      	movs	r3, #1
1000de5c:	7513      	strb	r3, [r2, #20]
}
1000de5e:	b006      	add	sp, #24
1000de60:	bd70      	pop	{r4, r5, r6, pc}
1000de62:	46c0      	nop			; (mov r8, r8)
1000de64:	1001829d 	.word	0x1001829d
1000de68:	1001d510 	.word	0x1001d510
1000de6c:	1001d500 	.word	0x1001d500
1000de70:	1000d501 	.word	0x1000d501
1000de74:	1001d508 	.word	0x1001d508
1000de78:	1000d519 	.word	0x1000d519
1000de7c:	40003000 	.word	0x40003000

1000de80 <init_dualtimer>:

void init_dualtimer(void)
{
1000de80:	b510      	push	{r4, lr}
1000de82:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000de84:	ac01      	add	r4, sp, #4
1000de86:	0020      	movs	r0, r4
1000de88:	4b09      	ldr	r3, [pc, #36]	; (1000deb0 <init_dualtimer+0x30>)
1000de8a:	4798      	blx	r3
    
    config_dualtimer.timer1.load_value = 26000;
1000de8c:	4b09      	ldr	r3, [pc, #36]	; (1000deb4 <init_dualtimer+0x34>)
    config_dualtimer.timer2.load_value = 0xffffffff;
    config_dualtimer.timer2.interrup_enable = false;
    
    dualtimer_init(&config_dualtimer);
1000de8e:	0020      	movs	r0, r4
void init_dualtimer(void)
{
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
    
    config_dualtimer.timer1.load_value = 26000;
1000de90:	60a3      	str	r3, [r4, #8]
    config_dualtimer.timer2.load_value = 0xffffffff;
1000de92:	2301      	movs	r3, #1
1000de94:	425b      	negs	r3, r3
1000de96:	6163      	str	r3, [r4, #20]
    config_dualtimer.timer2.interrup_enable = false;
1000de98:	2300      	movs	r3, #0
1000de9a:	7423      	strb	r3, [r4, #16]
    
    dualtimer_init(&config_dualtimer);
1000de9c:	4b06      	ldr	r3, [pc, #24]	; (1000deb8 <init_dualtimer+0x38>)
1000de9e:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000dea0:	4c06      	ldr	r4, [pc, #24]	; (1000debc <init_dualtimer+0x3c>)
1000dea2:	2000      	movs	r0, #0
1000dea4:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
1000dea6:	2001      	movs	r0, #1
1000dea8:	47a0      	blx	r4
}
1000deaa:	b008      	add	sp, #32
1000deac:	bd10      	pop	{r4, pc}
1000deae:	46c0      	nop			; (mov r8, r8)
1000deb0:	1000817d 	.word	0x1000817d
1000deb4:	00006590 	.word	0x00006590
1000deb8:	100081fd 	.word	0x100081fd
1000debc:	100081d9 	.word	0x100081d9

1000dec0 <main>:
    dmp_read_fifo(gyro, accel_short, quat, &sensor_timestamp, &sensors, &more);
    DBG_LOG("FIFO: %d %d %d, %d %d %d, %ld %ld %ld %ld", gyro[0], gyro[1], gyro[2], accel_short[0], accel_short[1], accel_short[2], quat[0], quat[1], quat[2], quat[3]);
}

int main(void)
{
1000dec0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dec2:	4644      	mov	r4, r8
1000dec4:	464d      	mov	r5, r9
1000dec6:	465f      	mov	r7, fp
1000dec8:	4656      	mov	r6, sl
1000deca:	b4f0      	push	{r4, r5, r6, r7}
    inv_error_t result;
    unsigned char accel_fsr = 0;
1000decc:	2500      	movs	r5, #0
    dmp_read_fifo(gyro, accel_short, quat, &sensor_timestamp, &sensors, &more);
    DBG_LOG("FIFO: %d %d %d, %d %d %d, %ld %ld %ld %ld", gyro[0], gyro[1], gyro[2], accel_short[0], accel_short[1], accel_short[2], quat[0], quat[1], quat[2], quat[3]);
}

int main(void)
{
1000dece:	b093      	sub	sp, #76	; 0x4c
    inv_error_t result;
    unsigned char accel_fsr = 0;
1000ded0:	ab04      	add	r3, sp, #16
1000ded2:	1c5c      	adds	r4, r3, #1
    unsigned short gyro_rate, gyro_fsr;
    unsigned long timestamp = 0;
    unsigned char new_compass = 0;
    unsigned short compass_fsr;
    
    platform_driver_init();
1000ded4:	4b99      	ldr	r3, [pc, #612]	; (1000e13c <main+0x27c>)
}

int main(void)
{
    inv_error_t result;
    unsigned char accel_fsr = 0;
1000ded6:	7025      	strb	r5, [r4, #0]
    unsigned short gyro_rate, gyro_fsr;
    unsigned long timestamp = 0;
    unsigned char new_compass = 0;
    unsigned short compass_fsr;
    
    platform_driver_init();
1000ded8:	4798      	blx	r3
    gpio_init();
1000deda:	4b99      	ldr	r3, [pc, #612]	; (1000e140 <main+0x280>)
1000dedc:	4798      	blx	r3
    acquire_sleep_lock();
1000dede:	4b99      	ldr	r3, [pc, #612]	; (1000e144 <main+0x284>)
1000dee0:	4798      	blx	r3
    serial_console_init();
1000dee2:	4b99      	ldr	r3, [pc, #612]	; (1000e148 <main+0x288>)
1000dee4:	4798      	blx	r3
    ble_device_init(NULL);
1000dee6:	2000      	movs	r0, #0
1000dee8:	4b98      	ldr	r3, [pc, #608]	; (1000e14c <main+0x28c>)
1000deea:	4798      	blx	r3

    init_dualtimer();
1000deec:	4b98      	ldr	r3, [pc, #608]	; (1000e150 <main+0x290>)
1000deee:	4798      	blx	r3
    delay_init();
1000def0:	4b98      	ldr	r3, [pc, #608]	; (1000e154 <main+0x294>)
1000def2:	4798      	blx	r3
}

static void configure_imu_gpio(void)
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000def4:	a80f      	add	r0, sp, #60	; 0x3c
1000def6:	4b98      	ldr	r3, [pc, #608]	; (1000e158 <main+0x298>)
1000def8:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000defa:	222c      	movs	r2, #44	; 0x2c
1000defc:	ab04      	add	r3, sp, #16
1000defe:	189b      	adds	r3, r3, r2
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000df00:	212d      	movs	r1, #45	; 0x2d

static void configure_imu_gpio(void)
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000df02:	701d      	strb	r5, [r3, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000df04:	2302      	movs	r3, #2
1000df06:	aa04      	add	r2, sp, #16
1000df08:	1852      	adds	r2, r2, r1
1000df0a:	7013      	strb	r3, [r2, #0]
    config_gpio_pin.aon_wakeup = true;
1000df0c:	3102      	adds	r1, #2
1000df0e:	aa04      	add	r2, sp, #16
1000df10:	1852      	adds	r2, r2, r1
1000df12:	3b01      	subs	r3, #1
1000df14:	7013      	strb	r3, [r2, #0]
    gpio_pin_set_config(PIN_AO_GPIO_2, &config_gpio_pin);
1000df16:	a90f      	add	r1, sp, #60	; 0x3c
1000df18:	4b90      	ldr	r3, [pc, #576]	; (1000e15c <main+0x29c>)
1000df1a:	201d      	movs	r0, #29
1000df1c:	4798      	blx	r3

    init_dualtimer();
    delay_init();

    configure_imu_gpio();
    configure_i2c_master();
1000df1e:	4b90      	ldr	r3, [pc, #576]	; (1000e160 <main+0x2a0>)
1000df20:	4798      	blx	r3
    
    struct int_param_s int_param;
    int_param.cb = (void*)interrupt_cb;
1000df22:	4b90      	ldr	r3, [pc, #576]	; (1000e164 <main+0x2a4>)
1000df24:	a80c      	add	r0, sp, #48	; 0x30
1000df26:	6043      	str	r3, [r0, #4]
    int_param.pin = PIN_AO_GPIO_2;
1000df28:	231d      	movs	r3, #29
1000df2a:	8003      	strh	r3, [r0, #0]
    result = mpu_init(&int_param);
1000df2c:	4b8e      	ldr	r3, [pc, #568]	; (1000e168 <main+0x2a8>)
1000df2e:	4798      	blx	r3
    if(result) {
        DBG_LOG_DEV("Could not initialize MPU!");
        system_global_reset();
1000df30:	4d8e      	ldr	r5, [pc, #568]	; (1000e16c <main+0x2ac>)
    
    struct int_param_s int_param;
    int_param.cb = (void*)interrupt_cb;
    int_param.pin = PIN_AO_GPIO_2;
    result = mpu_init(&int_param);
    if(result) {
1000df32:	2800      	cmp	r0, #0
1000df34:	d000      	beq.n	1000df38 <main+0x78>
        DBG_LOG_DEV("Could not initialize MPU!");
        system_global_reset();
1000df36:	47a8      	blx	r5
    
    /* If you're not using an MPU9150 AND you're not using DMP features, this
    * function will place all slaves on the primary bus.
    * mpu_set_bypass(1);
    */
    result = inv_init_mpl();
1000df38:	4b8d      	ldr	r3, [pc, #564]	; (1000e170 <main+0x2b0>)
1000df3a:	4798      	blx	r3
    if(result) {
1000df3c:	2800      	cmp	r0, #0
1000df3e:	d000      	beq.n	1000df42 <main+0x82>
        DBG_LOG_DEV("Could not initialize MPL.");
        system_global_reset();
1000df40:	47a8      	blx	r5
    }
    
    /* Compute 6-axis and 9-axis quaternions. */
    inv_enable_quaternion();
1000df42:	4b8c      	ldr	r3, [pc, #560]	; (1000e174 <main+0x2b4>)
1000df44:	4798      	blx	r3
    inv_enable_9x_sensor_fusion();
1000df46:	4b8c      	ldr	r3, [pc, #560]	; (1000e178 <main+0x2b8>)
1000df48:	4798      	blx	r3
    */

    /* Update gyro biases when not in motion.
    * WARNING: These algorithms are mutually exclusive.
    */
    inv_enable_fast_nomot();
1000df4a:	4b8c      	ldr	r3, [pc, #560]	; (1000e17c <main+0x2bc>)
1000df4c:	4798      	blx	r3
    /* inv_enable_motion_no_motion(); */
    /* inv_set_no_motion_time(1000); */

    /* Update gyro biases when temperature changes. */
    inv_enable_gyro_tc();
1000df4e:	4b8c      	ldr	r3, [pc, #560]	; (1000e180 <main+0x2c0>)
1000df50:	4798      	blx	r3
    */

    /* Allows use of the MPL APIs in read_from_mpl. */
    //inv_enable_eMPL_outputs();

    result = inv_start_mpl();
1000df52:	4b8c      	ldr	r3, [pc, #560]	; (1000e184 <main+0x2c4>)
1000df54:	4798      	blx	r3
    if (result == INV_ERROR_NOT_AUTHORIZED) {
1000df56:	2832      	cmp	r0, #50	; 0x32
1000df58:	d100      	bne.n	1000df5c <main+0x9c>
1000df5a:	e0e1      	b.n	1000e120 <main+0x260>
        while (1) {
            DBG_LOG("Not authorized.\n");
            delay_ms(5000);
        }
    }
    if (result) {
1000df5c:	2800      	cmp	r0, #0
1000df5e:	d000      	beq.n	1000df62 <main+0xa2>
        MPL_LOGE("Could not start the MPL.\n");
        system_global_reset();
1000df60:	47a8      	blx	r5
    }

    /* Get/set hardware configuration. Start gyro. */
    /* Wake up all sensors. */
    mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
1000df62:	4b89      	ldr	r3, [pc, #548]	; (1000e188 <main+0x2c8>)
1000df64:	2079      	movs	r0, #121	; 0x79
1000df66:	4798      	blx	r3

    /* Push both gyro and accel data into the FIFO. */
    mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
1000df68:	4b88      	ldr	r3, [pc, #544]	; (1000e18c <main+0x2cc>)
1000df6a:	2078      	movs	r0, #120	; 0x78
1000df6c:	4798      	blx	r3
    mpu_set_sample_rate(DEFAULT_MPU_HZ);
1000df6e:	4b88      	ldr	r3, [pc, #544]	; (1000e190 <main+0x2d0>)
1000df70:	200a      	movs	r0, #10
1000df72:	4798      	blx	r3
    /* The compass sampling rate can be less than the gyro/accel sampling rate.
    * Use this function for proper power management.
    */
    mpu_set_compass_sample_rate(1000 / COMPASS_READ_MS);
1000df74:	4b87      	ldr	r3, [pc, #540]	; (1000e194 <main+0x2d4>)
1000df76:	200a      	movs	r0, #10
1000df78:	4798      	blx	r3

    /* Read back configuration in case it was set improperly. */
    mpu_get_sample_rate(&gyro_rate);
1000df7a:	ab04      	add	r3, sp, #16
1000df7c:	1c9e      	adds	r6, r3, #2
1000df7e:	0030      	movs	r0, r6
1000df80:	4b85      	ldr	r3, [pc, #532]	; (1000e198 <main+0x2d8>)
1000df82:	4798      	blx	r3
    mpu_get_gyro_fsr(&gyro_fsr);
1000df84:	ab05      	add	r3, sp, #20
1000df86:	4699      	mov	r9, r3
1000df88:	0018      	movs	r0, r3
1000df8a:	4b84      	ldr	r3, [pc, #528]	; (1000e19c <main+0x2dc>)
1000df8c:	4798      	blx	r3
    mpu_get_accel_fsr(&accel_fsr);
1000df8e:	0020      	movs	r0, r4
1000df90:	4b83      	ldr	r3, [pc, #524]	; (1000e1a0 <main+0x2e0>)
1000df92:	4798      	blx	r3
    mpu_get_compass_fsr(&compass_fsr);
1000df94:	aa04      	add	r2, sp, #16
1000df96:	4694      	mov	ip, r2
1000df98:	2306      	movs	r3, #6
1000df9a:	4463      	add	r3, ip
1000df9c:	4698      	mov	r8, r3
1000df9e:	0018      	movs	r0, r3
1000dfa0:	4b80      	ldr	r3, [pc, #512]	; (1000e1a4 <main+0x2e4>)
1000dfa2:	4798      	blx	r3

    /* Sync driver configuration with MPL. */
    /* Sample rate expected in microseconds. */
    inv_set_gyro_sample_rate(1000000L / gyro_rate);
1000dfa4:	8831      	ldrh	r1, [r6, #0]
1000dfa6:	4f80      	ldr	r7, [pc, #512]	; (1000e1a8 <main+0x2e8>)
1000dfa8:	4880      	ldr	r0, [pc, #512]	; (1000e1ac <main+0x2ec>)
1000dfaa:	47b8      	blx	r7
1000dfac:	4b80      	ldr	r3, [pc, #512]	; (1000e1b0 <main+0x2f0>)
1000dfae:	4798      	blx	r3
    inv_set_accel_sample_rate(1000000L / gyro_rate);
1000dfb0:	8831      	ldrh	r1, [r6, #0]
1000dfb2:	487e      	ldr	r0, [pc, #504]	; (1000e1ac <main+0x2ec>)
1000dfb4:	47b8      	blx	r7
1000dfb6:	4b7f      	ldr	r3, [pc, #508]	; (1000e1b4 <main+0x2f4>)
1000dfb8:	4798      	blx	r3
    /* The compass rate is independent of the gyro and accel rates. As long as
    * inv_set_compass_sample_rate is called with the correct value, the 9-axis
    * fusion algorithm's compass correction gain will work properly.
    */
    inv_set_compass_sample_rate(COMPASS_READ_MS * 1000L);
1000dfba:	4b7f      	ldr	r3, [pc, #508]	; (1000e1b8 <main+0x2f8>)
1000dfbc:	487f      	ldr	r0, [pc, #508]	; (1000e1bc <main+0x2fc>)
1000dfbe:	4798      	blx	r3

    /* Set chip-to-body orientation matrix.
    * Set hardware units to dps/g's/degrees scaling factor.
    */
    inv_set_gyro_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long)gyro_fsr<<15);
1000dfc0:	4f7f      	ldr	r7, [pc, #508]	; (1000e1c0 <main+0x300>)
1000dfc2:	4e80      	ldr	r6, [pc, #512]	; (1000e1c4 <main+0x304>)
1000dfc4:	0038      	movs	r0, r7
1000dfc6:	47b0      	blx	r6
1000dfc8:	464b      	mov	r3, r9
1000dfca:	8819      	ldrh	r1, [r3, #0]
1000dfcc:	4b7e      	ldr	r3, [pc, #504]	; (1000e1c8 <main+0x308>)
1000dfce:	03c9      	lsls	r1, r1, #15
1000dfd0:	4798      	blx	r3
    inv_set_accel_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long)accel_fsr<<15);
1000dfd2:	0038      	movs	r0, r7
1000dfd4:	47b0      	blx	r6
1000dfd6:	7821      	ldrb	r1, [r4, #0]
1000dfd8:	4b7c      	ldr	r3, [pc, #496]	; (1000e1cc <main+0x30c>)
1000dfda:	03c9      	lsls	r1, r1, #15
1000dfdc:	4798      	blx	r3
    inv_set_compass_orientation_and_scale(inv_orientation_matrix_to_scalar(compass_pdata.orientation), (long)compass_fsr<<15);
1000dfde:	487c      	ldr	r0, [pc, #496]	; (1000e1d0 <main+0x310>)
1000dfe0:	47b0      	blx	r6
1000dfe2:	4643      	mov	r3, r8
1000dfe4:	8819      	ldrh	r1, [r3, #0]
1000dfe6:	4b7b      	ldr	r3, [pc, #492]	; (1000e1d4 <main+0x314>)
1000dfe8:	03c9      	lsls	r1, r1, #15
1000dfea:	4798      	blx	r3
    hal.next_pedo_ms = 0;
    hal.next_compass_ms = 0;
    hal.next_temp_ms = 0;

    /* Compass reads are handled by scheduler. */
    dualtimer_enable(DUALTIMER_TIMER2);
1000dfec:	2001      	movs	r0, #1
1000dfee:	4b7a      	ldr	r3, [pc, #488]	; (1000e1d8 <main+0x318>)
1000dff0:	4798      	blx	r3
#define COMPASS_ENABLED 1

static inline void get_ms(uint32_t *count)
{
    static uint32_t old_val = 0;
    volatile uint32_t val = (uint32_t)((0xffffffff - dualtimer_get_value(DUALTIMER_TIMER2)) / (uint32_t)26000);
1000dff2:	4b7a      	ldr	r3, [pc, #488]	; (1000e1dc <main+0x31c>)
1000dff4:	2001      	movs	r0, #1
1000dff6:	469a      	mov	sl, r3
1000dff8:	4798      	blx	r3
1000dffa:	4b79      	ldr	r3, [pc, #484]	; (1000e1e0 <main+0x320>)
1000dffc:	43c0      	mvns	r0, r0
1000dffe:	4979      	ldr	r1, [pc, #484]	; (1000e1e4 <main+0x324>)
1000e000:	469b      	mov	fp, r3
1000e002:	4798      	blx	r3
    volatile uint32_t delta;
    if(val >= old_val) delta = val - old_val;
1000e004:	4c78      	ldr	r4, [pc, #480]	; (1000e1e8 <main+0x328>)
#define COMPASS_ENABLED 1

static inline void get_ms(uint32_t *count)
{
    static uint32_t old_val = 0;
    volatile uint32_t val = (uint32_t)((0xffffffff - dualtimer_get_value(DUALTIMER_TIMER2)) / (uint32_t)26000);
1000e006:	9006      	str	r0, [sp, #24]
    volatile uint32_t delta;
    if(val >= old_val) delta = val - old_val;
1000e008:	9b06      	ldr	r3, [sp, #24]
1000e00a:	6822      	ldr	r2, [r4, #0]
1000e00c:	4293      	cmp	r3, r2
1000e00e:	d300      	bcc.n	1000e012 <main+0x152>
1000e010:	e082      	b.n	1000e118 <main+0x258>
    else delta = (uint32_t)(0xffffffff/(uint32_t)26000) - old_val + val;
1000e012:	4976      	ldr	r1, [pc, #472]	; (1000e1ec <main+0x32c>)
1000e014:	9b06      	ldr	r3, [sp, #24]
1000e016:	468c      	mov	ip, r1
1000e018:	4463      	add	r3, ip
1000e01a:	1a9b      	subs	r3, r3, r2
1000e01c:	9307      	str	r3, [sp, #28]
    //DBG_LOG("old_val %lu, val %lu, delta %lu", old_val, val, delta);
    old_val = val;
1000e01e:	9b06      	ldr	r3, [sp, #24]
1000e020:	6023      	str	r3, [r4, #0]
    count[0] = delta;
1000e022:	9b07      	ldr	r3, [sp, #28]

    /* Compass reads are handled by scheduler. */
    dualtimer_enable(DUALTIMER_TIMER2);
    get_ms(&timestamp);
    
    if (dmp_load_motion_driver_firmware()) {
1000e024:	4b72      	ldr	r3, [pc, #456]	; (1000e1f0 <main+0x330>)
1000e026:	4798      	blx	r3
1000e028:	2800      	cmp	r0, #0
1000e02a:	d000      	beq.n	1000e02e <main+0x16e>
        MPL_LOGE("Could not download DMP.\n");
        system_global_reset();
1000e02c:	47a8      	blx	r5
    }
    dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_pdata.orientation));
1000e02e:	0038      	movs	r0, r7
1000e030:	47b0      	blx	r6
1000e032:	4b70      	ldr	r3, [pc, #448]	; (1000e1f4 <main+0x334>)
1000e034:	4798      	blx	r3

    hal.dmp_features = DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL;
    dmp_enable_feature(hal.dmp_features);
1000e036:	2074      	movs	r0, #116	; 0x74
1000e038:	4b6f      	ldr	r3, [pc, #444]	; (1000e1f8 <main+0x338>)
1000e03a:	30ff      	adds	r0, #255	; 0xff
1000e03c:	4798      	blx	r3
    dmp_set_fifo_rate(DEFAULT_MPU_HZ);
1000e03e:	4b6f      	ldr	r3, [pc, #444]	; (1000e1fc <main+0x33c>)
1000e040:	200a      	movs	r0, #10
1000e042:	4798      	blx	r3
    inv_set_quat_sample_rate(1000000L / DEFAULT_MPU_HZ);
1000e044:	485d      	ldr	r0, [pc, #372]	; (1000e1bc <main+0x2fc>)
1000e046:	4b6e      	ldr	r3, [pc, #440]	; (1000e200 <main+0x340>)
1000e048:	4798      	blx	r3
    mpu_set_dmp_state(1);
1000e04a:	4b6e      	ldr	r3, [pc, #440]	; (1000e204 <main+0x344>)
1000e04c:	2001      	movs	r0, #1
1000e04e:	4798      	blx	r3
    hal.dmp_on = 1;

    //gpio_register_callback(PIN_AO_GPIO_2, interrupt_cb, GPIO_CALLBACK_RISING);
    gpio_enable_callback(PIN_AO_GPIO_2);
1000e050:	4b6d      	ldr	r3, [pc, #436]	; (1000e208 <main+0x348>)
1000e052:	201d      	movs	r0, #29
1000e054:	4798      	blx	r3
    //while(1){}


    uint8_t compass_cnt = 0;
1000e056:	2300      	movs	r3, #0
1000e058:	9301      	str	r3, [sp, #4]
1000e05a:	4b6c      	ldr	r3, [pc, #432]	; (1000e20c <main+0x34c>)
1000e05c:	4f6c      	ldr	r7, [pc, #432]	; (1000e210 <main+0x350>)
1000e05e:	4699      	mov	r9, r3
1000e060:	4b6c      	ldr	r3, [pc, #432]	; (1000e214 <main+0x354>)
1000e062:	4e6d      	ldr	r6, [pc, #436]	; (1000e218 <main+0x358>)
1000e064:	4698      	mov	r8, r3
1000e066:	464d      	mov	r5, r9
1000e068:	e011      	b.n	1000e08e <main+0x1ce>
{
    static uint32_t old_val = 0;
    volatile uint32_t val = (uint32_t)((0xffffffff - dualtimer_get_value(DUALTIMER_TIMER2)) / (uint32_t)26000);
    volatile uint32_t delta;
    if(val >= old_val) delta = val - old_val;
    else delta = (uint32_t)(0xffffffff/(uint32_t)26000) - old_val + val;
1000e06a:	4960      	ldr	r1, [pc, #384]	; (1000e1ec <main+0x32c>)
1000e06c:	9b08      	ldr	r3, [sp, #32]
1000e06e:	468c      	mov	ip, r1
1000e070:	4463      	add	r3, ip
1000e072:	1a9b      	subs	r3, r3, r2
1000e074:	9309      	str	r3, [sp, #36]	; 0x24
    //DBG_LOG("old_val %lu, val %lu, delta %lu", old_val, val, delta);
    old_val = val;
1000e076:	9b08      	ldr	r3, [sp, #32]
    uint8_t compass_cnt = 0;
    while (true) {
        ble_event_task(BLE_EVENT_TIMEOUT);

        get_ms(&timestamp);
        DBG_LOG("Timestamp: %ld", timestamp);
1000e078:	0028      	movs	r0, r5
    volatile uint32_t val = (uint32_t)((0xffffffff - dualtimer_get_value(DUALTIMER_TIMER2)) / (uint32_t)26000);
    volatile uint32_t delta;
    if(val >= old_val) delta = val - old_val;
    else delta = (uint32_t)(0xffffffff/(uint32_t)26000) - old_val + val;
    //DBG_LOG("old_val %lu, val %lu, delta %lu", old_val, val, delta);
    old_val = val;
1000e07a:	6023      	str	r3, [r4, #0]
    count[0] = delta;
1000e07c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000e07e:	4699      	mov	r9, r3
    uint8_t compass_cnt = 0;
    while (true) {
        ble_event_task(BLE_EVENT_TIMEOUT);

        get_ms(&timestamp);
        DBG_LOG("Timestamp: %ld", timestamp);
1000e080:	47c0      	blx	r8
1000e082:	4649      	mov	r1, r9
1000e084:	4865      	ldr	r0, [pc, #404]	; (1000e21c <main+0x35c>)
1000e086:	47b8      	blx	r7
        
        if(imu_interrupt) {
1000e088:	7833      	ldrb	r3, [r6, #0]
1000e08a:	2b00      	cmp	r3, #0
1000e08c:	d111      	bne.n	1000e0b2 <main+0x1f2>
    //while(1){}


    uint8_t compass_cnt = 0;
    while (true) {
        ble_event_task(BLE_EVENT_TIMEOUT);
1000e08e:	2001      	movs	r0, #1
1000e090:	4b63      	ldr	r3, [pc, #396]	; (1000e220 <main+0x360>)
1000e092:	4240      	negs	r0, r0
1000e094:	4798      	blx	r3
#define COMPASS_ENABLED 1

static inline void get_ms(uint32_t *count)
{
    static uint32_t old_val = 0;
    volatile uint32_t val = (uint32_t)((0xffffffff - dualtimer_get_value(DUALTIMER_TIMER2)) / (uint32_t)26000);
1000e096:	2001      	movs	r0, #1
1000e098:	47d0      	blx	sl
1000e09a:	4952      	ldr	r1, [pc, #328]	; (1000e1e4 <main+0x324>)
1000e09c:	43c0      	mvns	r0, r0
1000e09e:	47d8      	blx	fp
1000e0a0:	9008      	str	r0, [sp, #32]
    volatile uint32_t delta;
    if(val >= old_val) delta = val - old_val;
1000e0a2:	9b08      	ldr	r3, [sp, #32]
1000e0a4:	6822      	ldr	r2, [r4, #0]
1000e0a6:	4293      	cmp	r3, r2
1000e0a8:	d3df      	bcc.n	1000e06a <main+0x1aa>
1000e0aa:	9b08      	ldr	r3, [sp, #32]
1000e0ac:	1a9b      	subs	r3, r3, r2
1000e0ae:	9309      	str	r3, [sp, #36]	; 0x24
1000e0b0:	e7e1      	b.n	1000e076 <main+0x1b6>
        get_ms(&timestamp);
        DBG_LOG("Timestamp: %ld", timestamp);
        
        if(imu_interrupt) {
            //imu_poll_data();
            compass_cnt++;
1000e0b2:	9b01      	ldr	r3, [sp, #4]
1000e0b4:	3301      	adds	r3, #1
1000e0b6:	b2db      	uxtb	r3, r3
1000e0b8:	9301      	str	r3, [sp, #4]
            if(compass_cnt > 2) {
1000e0ba:	2b02      	cmp	r3, #2
1000e0bc:	d802      	bhi.n	1000e0c4 <main+0x204>
                    //int8_t accuracy;
                    //inv_get_sensor_type_quat(data, &accuracy, NULL);
                    //DBG_LOG("Quat: %ld %ld %ld %ld", data[0], data[1], data[2], data[3]);
                }
            }
            imu_interrupt = false;
1000e0be:	2300      	movs	r3, #0
1000e0c0:	7033      	strb	r3, [r6, #0]
1000e0c2:	e7e4      	b.n	1000e08e <main+0x1ce>
            compass_cnt++;
            if(compass_cnt > 2) {
                compass_cnt = 0;
                short compass_short[3];
                long compass[3];
                if(!mpu_get_compass_reg(compass_short, NULL)) {
1000e0c4:	2100      	movs	r1, #0
1000e0c6:	a80a      	add	r0, sp, #40	; 0x28
1000e0c8:	4b56      	ldr	r3, [pc, #344]	; (1000e224 <main+0x364>)
1000e0ca:	4798      	blx	r3
1000e0cc:	2800      	cmp	r0, #0
1000e0ce:	d002      	beq.n	1000e0d6 <main+0x216>
        
        if(imu_interrupt) {
            //imu_poll_data();
            compass_cnt++;
            if(compass_cnt > 2) {
                compass_cnt = 0;
1000e0d0:	2300      	movs	r3, #0
1000e0d2:	9301      	str	r3, [sp, #4]
1000e0d4:	e7f3      	b.n	1000e0be <main+0x1fe>
                short compass_short[3];
                long compass[3];
                if(!mpu_get_compass_reg(compass_short, NULL)) {
                    compass[0] = (long)compass_short[0];
1000e0d6:	ab04      	add	r3, sp, #16
1000e0d8:	2218      	movs	r2, #24
1000e0da:	5e9b      	ldrsh	r3, [r3, r2]
                    compass[1] = (long)compass_short[1];
                    compass[2] = (long)compass_short[2];
                    DBG_LOG("Compass: %ld %ld %ld", compass[0], compass[1], compass[2]);
1000e0dc:	0028      	movs	r0, r5
            if(compass_cnt > 2) {
                compass_cnt = 0;
                short compass_short[3];
                long compass[3];
                if(!mpu_get_compass_reg(compass_short, NULL)) {
                    compass[0] = (long)compass_short[0];
1000e0de:	930f      	str	r3, [sp, #60]	; 0x3c
                    compass[1] = (long)compass_short[1];
1000e0e0:	ab04      	add	r3, sp, #16
1000e0e2:	221a      	movs	r2, #26
1000e0e4:	5e9b      	ldrsh	r3, [r3, r2]
1000e0e6:	9310      	str	r3, [sp, #64]	; 0x40
                    compass[2] = (long)compass_short[2];
1000e0e8:	ab04      	add	r3, sp, #16
1000e0ea:	221c      	movs	r2, #28
1000e0ec:	5e9b      	ldrsh	r3, [r3, r2]
1000e0ee:	9311      	str	r3, [sp, #68]	; 0x44
                    DBG_LOG("Compass: %ld %ld %ld", compass[0], compass[1], compass[2]);
1000e0f0:	47c0      	blx	r8
1000e0f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
1000e0f4:	484c      	ldr	r0, [pc, #304]	; (1000e228 <main+0x368>)
1000e0f6:	9301      	str	r3, [sp, #4]
1000e0f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000e0fa:	9302      	str	r3, [sp, #8]
1000e0fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000e0fe:	9a02      	ldr	r2, [sp, #8]
1000e100:	9303      	str	r3, [sp, #12]
1000e102:	9903      	ldr	r1, [sp, #12]
1000e104:	9b01      	ldr	r3, [sp, #4]
1000e106:	47b8      	blx	r7
                    inv_build_compass(compass, 0, (inv_time_t)NULL);
1000e108:	2200      	movs	r2, #0
1000e10a:	2100      	movs	r1, #0
1000e10c:	a80f      	add	r0, sp, #60	; 0x3c
1000e10e:	4b47      	ldr	r3, [pc, #284]	; (1000e22c <main+0x36c>)
1000e110:	4798      	blx	r3
                    inv_execute_on_data();
1000e112:	4b47      	ldr	r3, [pc, #284]	; (1000e230 <main+0x370>)
1000e114:	4798      	blx	r3
1000e116:	e7db      	b.n	1000e0d0 <main+0x210>
static inline void get_ms(uint32_t *count)
{
    static uint32_t old_val = 0;
    volatile uint32_t val = (uint32_t)((0xffffffff - dualtimer_get_value(DUALTIMER_TIMER2)) / (uint32_t)26000);
    volatile uint32_t delta;
    if(val >= old_val) delta = val - old_val;
1000e118:	9b06      	ldr	r3, [sp, #24]
1000e11a:	1a9b      	subs	r3, r3, r2
1000e11c:	9307      	str	r3, [sp, #28]
1000e11e:	e77e      	b.n	1000e01e <main+0x15e>
1000e120:	4b3a      	ldr	r3, [pc, #232]	; (1000e20c <main+0x34c>)
1000e122:	4d44      	ldr	r5, [pc, #272]	; (1000e234 <main+0x374>)
1000e124:	4699      	mov	r9, r3
1000e126:	4b3b      	ldr	r3, [pc, #236]	; (1000e214 <main+0x354>)
1000e128:	464f      	mov	r7, r9
1000e12a:	001e      	movs	r6, r3
1000e12c:	4c42      	ldr	r4, [pc, #264]	; (1000e238 <main+0x378>)
    //inv_enable_eMPL_outputs();

    result = inv_start_mpl();
    if (result == INV_ERROR_NOT_AUTHORIZED) {
        while (1) {
            DBG_LOG("Not authorized.\n");
1000e12e:	0038      	movs	r0, r7
1000e130:	47b0      	blx	r6
1000e132:	0028      	movs	r0, r5
1000e134:	47b0      	blx	r6
            delay_ms(5000);
1000e136:	4841      	ldr	r0, [pc, #260]	; (1000e23c <main+0x37c>)
1000e138:	47a0      	blx	r4
1000e13a:	e7f8      	b.n	1000e12e <main+0x26e>
1000e13c:	1000c22d 	.word	0x1000c22d
1000e140:	1000d3bd 	.word	0x1000d3bd
1000e144:	1000c7c5 	.word	0x1000c7c5
1000e148:	1000bf59 	.word	0x1000bf59
1000e14c:	1000b7b9 	.word	0x1000b7b9
1000e150:	1000de81 	.word	0x1000de81
1000e154:	100080cd 	.word	0x100080cd
1000e158:	1000d025 	.word	0x1000d025
1000e15c:	1000d035 	.word	0x1000d035
1000e160:	1000de0d 	.word	0x1000de0d
1000e164:	1000dded 	.word	0x1000dded
1000e168:	10008da5 	.word	0x10008da5
1000e16c:	1000d975 	.word	0x1000d975
1000e170:	1000ab39 	.word	0x1000ab39
1000e174:	10013ce1 	.word	0x10013ce1
1000e178:	100124d5 	.word	0x100124d5
1000e17c:	10011d89 	.word	0x10011d89
1000e180:	10012ac9 	.word	0x10012ac9
1000e184:	1000ab6d 	.word	0x1000ab6d
1000e188:	10008bf1 	.word	0x10008bf1
1000e18c:	1000886d 	.word	0x1000886d
1000e190:	10008b25 	.word	0x10008b25
1000e194:	10008809 	.word	0x10008809
1000e198:	100087ed 	.word	0x100087ed
1000e19c:	100085c5 	.word	0x100085c5
1000e1a0:	10008691 	.word	0x10008691
1000e1a4:	10009361 	.word	0x10009361
1000e1a8:	100150c9 	.word	0x100150c9
1000e1ac:	000f4240 	.word	0x000f4240
1000e1b0:	10009a71 	.word	0x10009a71
1000e1b4:	10009aa1 	.word	0x10009aa1
1000e1b8:	10009ad1 	.word	0x10009ad1
1000e1bc:	000186a0 	.word	0x000186a0
1000e1c0:	1001b60c 	.word	0x1001b60c
1000e1c4:	1000aa1d 	.word	0x1000aa1d
1000e1c8:	10009a65 	.word	0x10009a65
1000e1cc:	10009b39 	.word	0x10009b39
1000e1d0:	1001b618 	.word	0x1001b618
1000e1d4:	10009b45 	.word	0x10009b45
1000e1d8:	100081b5 	.word	0x100081b5
1000e1dc:	100081a1 	.word	0x100081a1
1000e1e0:	10014fb5 	.word	0x10014fb5
1000e1e4:	00006590 	.word	0x00006590
1000e1e8:	1001d100 	.word	0x1001d100
1000e1ec:	00028547 	.word	0x00028547
1000e1f0:	1000939d 	.word	0x1000939d
1000e1f4:	100093bd 	.word	0x100093bd
1000e1f8:	100097b5 	.word	0x100097b5
1000e1fc:	100094c9 	.word	0x100094c9
1000e200:	10009b05 	.word	0x10009b05
1000e204:	10009211 	.word	0x10009211
1000e208:	1000d369 	.word	0x1000d369
1000e20c:	10019718 	.word	0x10019718
1000e210:	10018455 	.word	0x10018455
1000e214:	10018575 	.word	0x10018575
1000e218:	1001d104 	.word	0x1001d104
1000e21c:	1001af64 	.word	0x1001af64
1000e220:	1000be79 	.word	0x1000be79
1000e224:	100092ad 	.word	0x100092ad
1000e228:	1001af74 	.word	0x1001af74
1000e22c:	1000a005 	.word	0x1000a005
1000e230:	10009e11 	.word	0x10009e11
1000e234:	1001af54 	.word	0x1001af54
1000e238:	1000810d 	.word	0x1000810d
1000e23c:	00001388 	.word	0x00001388

1000e240 <internal_event_post>:
1000e240:	b570      	push	{r4, r5, r6, lr}
1000e242:	4d12      	ldr	r5, [pc, #72]	; (1000e28c <internal_event_post+0x4c>)
1000e244:	682c      	ldr	r4, [r5, #0]
1000e246:	2c00      	cmp	r4, #0
1000e248:	d014      	beq.n	1000e274 <internal_event_post+0x34>
1000e24a:	6826      	ldr	r6, [r4, #0]
1000e24c:	60e2      	str	r2, [r4, #12]
1000e24e:	602e      	str	r6, [r5, #0]
1000e250:	2500      	movs	r5, #0
1000e252:	4a0f      	ldr	r2, [pc, #60]	; (1000e290 <internal_event_post+0x50>)
1000e254:	8123      	strh	r3, [r4, #8]
1000e256:	6813      	ldr	r3, [r2, #0]
1000e258:	6025      	str	r5, [r4, #0]
1000e25a:	80a0      	strh	r0, [r4, #4]
1000e25c:	80e1      	strh	r1, [r4, #6]
1000e25e:	42ab      	cmp	r3, r5
1000e260:	d101      	bne.n	1000e266 <internal_event_post+0x26>
1000e262:	6014      	str	r4, [r2, #0]
1000e264:	e011      	b.n	1000e28a <internal_event_post+0x4a>
1000e266:	681a      	ldr	r2, [r3, #0]
1000e268:	2a00      	cmp	r2, #0
1000e26a:	d001      	beq.n	1000e270 <internal_event_post+0x30>
1000e26c:	1c13      	adds	r3, r2, #0
1000e26e:	e7fa      	b.n	1000e266 <internal_event_post+0x26>
1000e270:	601c      	str	r4, [r3, #0]
1000e272:	e00a      	b.n	1000e28a <internal_event_post+0x4a>
1000e274:	b2c4      	uxtb	r4, r0
1000e276:	2c00      	cmp	r4, #0
1000e278:	d107      	bne.n	1000e28a <internal_event_post+0x4a>
1000e27a:	4c06      	ldr	r4, [pc, #24]	; (1000e294 <internal_event_post+0x54>)
1000e27c:	60e2      	str	r2, [r4, #12]
1000e27e:	2201      	movs	r2, #1
1000e280:	8123      	strh	r3, [r4, #8]
1000e282:	4b05      	ldr	r3, [pc, #20]	; (1000e298 <internal_event_post+0x58>)
1000e284:	80a0      	strh	r0, [r4, #4]
1000e286:	80e1      	strh	r1, [r4, #6]
1000e288:	701a      	strb	r2, [r3, #0]
1000e28a:	bd70      	pop	{r4, r5, r6, pc}
1000e28c:	1001d120 	.word	0x1001d120
1000e290:	1001d11c 	.word	0x1001d11c
1000e294:	1001d108 	.word	0x1001d108
1000e298:	1001d118 	.word	0x1001d118

1000e29c <internal_event_init>:
1000e29c:	b510      	push	{r4, lr}
1000e29e:	4b08      	ldr	r3, [pc, #32]	; (1000e2c0 <internal_event_init+0x24>)
1000e2a0:	0900      	lsrs	r0, r0, #4
1000e2a2:	0100      	lsls	r0, r0, #4
1000e2a4:	681a      	ldr	r2, [r3, #0]
1000e2a6:	1808      	adds	r0, r1, r0
1000e2a8:	4281      	cmp	r1, r0
1000e2aa:	d003      	beq.n	1000e2b4 <internal_event_init+0x18>
1000e2ac:	600a      	str	r2, [r1, #0]
1000e2ae:	1c0a      	adds	r2, r1, #0
1000e2b0:	3110      	adds	r1, #16
1000e2b2:	e7f9      	b.n	1000e2a8 <internal_event_init+0xc>
1000e2b4:	601a      	str	r2, [r3, #0]
1000e2b6:	2200      	movs	r2, #0
1000e2b8:	4b02      	ldr	r3, [pc, #8]	; (1000e2c4 <internal_event_init+0x28>)
1000e2ba:	601a      	str	r2, [r3, #0]
1000e2bc:	bd10      	pop	{r4, pc}
1000e2be:	46c0      	nop			; (mov r8, r8)
1000e2c0:	1001d120 	.word	0x1001d120
1000e2c4:	1001d11c 	.word	0x1001d11c

1000e2c8 <special_events_handler>:
1000e2c8:	b538      	push	{r3, r4, r5, lr}
1000e2ca:	4c1b      	ldr	r4, [pc, #108]	; (1000e338 <special_events_handler+0x70>)
1000e2cc:	1c03      	adds	r3, r0, #0
1000e2ce:	8825      	ldrh	r5, [r4, #0]
1000e2d0:	1c08      	adds	r0, r1, #0
1000e2d2:	1c21      	adds	r1, r4, #0
1000e2d4:	429d      	cmp	r5, r3
1000e2d6:	d107      	bne.n	1000e2e8 <special_events_handler+0x20>
1000e2d8:	88a5      	ldrh	r5, [r4, #4]
1000e2da:	4285      	cmp	r5, r0
1000e2dc:	d104      	bne.n	1000e2e8 <special_events_handler+0x20>
1000e2de:	2301      	movs	r3, #1
1000e2e0:	425b      	negs	r3, r3
1000e2e2:	8023      	strh	r3, [r4, #0]
1000e2e4:	60a2      	str	r2, [r4, #8]
1000e2e6:	e009      	b.n	1000e2fc <special_events_handler+0x34>
1000e2e8:	884c      	ldrh	r4, [r1, #2]
1000e2ea:	429c      	cmp	r4, r3
1000e2ec:	d10a      	bne.n	1000e304 <special_events_handler+0x3c>
1000e2ee:	888c      	ldrh	r4, [r1, #4]
1000e2f0:	4284      	cmp	r4, r0
1000e2f2:	d107      	bne.n	1000e304 <special_events_handler+0x3c>
1000e2f4:	2301      	movs	r3, #1
1000e2f6:	425b      	negs	r3, r3
1000e2f8:	804b      	strh	r3, [r1, #2]
1000e2fa:	608a      	str	r2, [r1, #8]
1000e2fc:	4b0f      	ldr	r3, [pc, #60]	; (1000e33c <special_events_handler+0x74>)
1000e2fe:	4798      	blx	r3
1000e300:	2001      	movs	r0, #1
1000e302:	e017      	b.n	1000e334 <special_events_handler+0x6c>
1000e304:	490e      	ldr	r1, [pc, #56]	; (1000e340 <special_events_handler+0x78>)
1000e306:	428b      	cmp	r3, r1
1000e308:	d00e      	beq.n	1000e328 <special_events_handler+0x60>
1000e30a:	490e      	ldr	r1, [pc, #56]	; (1000e344 <special_events_handler+0x7c>)
1000e30c:	428b      	cmp	r3, r1
1000e30e:	d007      	beq.n	1000e320 <special_events_handler+0x58>
1000e310:	490d      	ldr	r1, [pc, #52]	; (1000e348 <special_events_handler+0x80>)
1000e312:	2000      	movs	r0, #0
1000e314:	428b      	cmp	r3, r1
1000e316:	d10d      	bne.n	1000e334 <special_events_handler+0x6c>
1000e318:	1c10      	adds	r0, r2, #0
1000e31a:	4b0c      	ldr	r3, [pc, #48]	; (1000e34c <special_events_handler+0x84>)
1000e31c:	4798      	blx	r3
1000e31e:	e7ef      	b.n	1000e300 <special_events_handler+0x38>
1000e320:	1c11      	adds	r1, r2, #0
1000e322:	4b0b      	ldr	r3, [pc, #44]	; (1000e350 <special_events_handler+0x88>)
1000e324:	2200      	movs	r2, #0
1000e326:	e002      	b.n	1000e32e <special_events_handler+0x66>
1000e328:	1c11      	adds	r1, r2, #0
1000e32a:	2200      	movs	r2, #0
1000e32c:	4b09      	ldr	r3, [pc, #36]	; (1000e354 <special_events_handler+0x8c>)
1000e32e:	4798      	blx	r3
1000e330:	4243      	negs	r3, r0
1000e332:	4158      	adcs	r0, r3
1000e334:	bd38      	pop	{r3, r4, r5, pc}
1000e336:	46c0      	nop			; (mov r8, r8)
1000e338:	1001e18c 	.word	0x1001e18c
1000e33c:	1000f4cd 	.word	0x1000f4cd
1000e340:	00000e13 	.word	0x00000e13
1000e344:	00000e15 	.word	0x00000e15
1000e348:	00000e01 	.word	0x00000e01
1000e34c:	1000f83d 	.word	0x1000f83d
1000e350:	1000f9fd 	.word	0x1000f9fd
1000e354:	1000fad5 	.word	0x1000fad5

1000e358 <at_ble_event_get>:
1000e358:	2300      	movs	r3, #0
1000e35a:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e35c:	b087      	sub	sp, #28
1000e35e:	9204      	str	r2, [sp, #16]
1000e360:	7003      	strb	r3, [r0, #0]
1000e362:	9b04      	ldr	r3, [sp, #16]
1000e364:	9003      	str	r0, [sp, #12]
1000e366:	3b01      	subs	r3, #1
1000e368:	1c0d      	adds	r5, r1, #0
1000e36a:	9305      	str	r3, [sp, #20]
1000e36c:	3303      	adds	r3, #3
1000e36e:	d802      	bhi.n	1000e376 <at_ble_event_get+0x1e>
1000e370:	9804      	ldr	r0, [sp, #16]
1000e372:	4bae      	ldr	r3, [pc, #696]	; (1000e62c <at_ble_event_get+0x2d4>)
1000e374:	4798      	blx	r3
1000e376:	9b05      	ldr	r3, [sp, #20]
1000e378:	4cad      	ldr	r4, [pc, #692]	; (1000e630 <at_ble_event_get+0x2d8>)
1000e37a:	3303      	adds	r3, #3
1000e37c:	d902      	bls.n	1000e384 <at_ble_event_get+0x2c>
1000e37e:	2300      	movs	r3, #0
1000e380:	9302      	str	r3, [sp, #8]
1000e382:	e015      	b.n	1000e3b0 <at_ble_event_get+0x58>
1000e384:	2300      	movs	r3, #0
1000e386:	9302      	str	r3, [sp, #8]
1000e388:	6823      	ldr	r3, [r4, #0]
1000e38a:	2b00      	cmp	r3, #0
1000e38c:	d113      	bne.n	1000e3b6 <at_ble_event_get+0x5e>
1000e38e:	9b02      	ldr	r3, [sp, #8]
1000e390:	2bd0      	cmp	r3, #208	; 0xd0
1000e392:	d100      	bne.n	1000e396 <at_ble_event_get+0x3e>
1000e394:	e2da      	b.n	1000e94c <at_ble_event_get+0x5f4>
1000e396:	9804      	ldr	r0, [sp, #16]
1000e398:	4ba6      	ldr	r3, [pc, #664]	; (1000e634 <at_ble_event_get+0x2dc>)
1000e39a:	4798      	blx	r3
1000e39c:	9002      	str	r0, [sp, #8]
1000e39e:	2802      	cmp	r0, #2
1000e3a0:	d1f2      	bne.n	1000e388 <at_ble_event_get+0x30>
1000e3a2:	e03f      	b.n	1000e424 <at_ble_event_get+0xcc>
1000e3a4:	9804      	ldr	r0, [sp, #16]
1000e3a6:	4ba3      	ldr	r3, [pc, #652]	; (1000e634 <at_ble_event_get+0x2dc>)
1000e3a8:	4798      	blx	r3
1000e3aa:	9002      	str	r0, [sp, #8]
1000e3ac:	2802      	cmp	r0, #2
1000e3ae:	d039      	beq.n	1000e424 <at_ble_event_get+0xcc>
1000e3b0:	6823      	ldr	r3, [r4, #0]
1000e3b2:	2b00      	cmp	r3, #0
1000e3b4:	d0f6      	beq.n	1000e3a4 <at_ble_event_get+0x4c>
1000e3b6:	9b02      	ldr	r3, [sp, #8]
1000e3b8:	2bd0      	cmp	r3, #208	; 0xd0
1000e3ba:	d100      	bne.n	1000e3be <at_ble_event_get+0x66>
1000e3bc:	e2c6      	b.n	1000e94c <at_ble_event_get+0x5f4>
1000e3be:	9b02      	ldr	r3, [sp, #8]
1000e3c0:	3b03      	subs	r3, #3
1000e3c2:	1e5a      	subs	r2, r3, #1
1000e3c4:	4193      	sbcs	r3, r2
1000e3c6:	9a02      	ldr	r2, [sp, #8]
1000e3c8:	425b      	negs	r3, r3
1000e3ca:	401a      	ands	r2, r3
1000e3cc:	6823      	ldr	r3, [r4, #0]
1000e3ce:	9202      	str	r2, [sp, #8]
1000e3d0:	2b00      	cmp	r3, #0
1000e3d2:	d100      	bne.n	1000e3d6 <at_ble_event_get+0x7e>
1000e3d4:	e2c2      	b.n	1000e95c <at_ble_event_get+0x604>
1000e3d6:	681a      	ldr	r2, [r3, #0]
1000e3d8:	68de      	ldr	r6, [r3, #12]
1000e3da:	6022      	str	r2, [r4, #0]
1000e3dc:	88da      	ldrh	r2, [r3, #6]
1000e3de:	9201      	str	r2, [sp, #4]
1000e3e0:	4a95      	ldr	r2, [pc, #596]	; (1000e638 <at_ble_event_get+0x2e0>)
1000e3e2:	889c      	ldrh	r4, [r3, #4]
1000e3e4:	6811      	ldr	r1, [r2, #0]
1000e3e6:	6013      	str	r3, [r2, #0]
1000e3e8:	6019      	str	r1, [r3, #0]
1000e3ea:	4b94      	ldr	r3, [pc, #592]	; (1000e63c <at_ble_event_get+0x2e4>)
1000e3ec:	781b      	ldrb	r3, [r3, #0]
1000e3ee:	2b01      	cmp	r3, #1
1000e3f0:	d10f      	bne.n	1000e412 <at_ble_event_get+0xba>
1000e3f2:	4b93      	ldr	r3, [pc, #588]	; (1000e640 <at_ble_event_get+0x2e8>)
1000e3f4:	4a92      	ldr	r2, [pc, #584]	; (1000e640 <at_ble_event_get+0x2e8>)
1000e3f6:	8898      	ldrh	r0, [r3, #4]
1000e3f8:	88d9      	ldrh	r1, [r3, #6]
1000e3fa:	68d2      	ldr	r2, [r2, #12]
1000e3fc:	891b      	ldrh	r3, [r3, #8]
1000e3fe:	4f91      	ldr	r7, [pc, #580]	; (1000e644 <at_ble_event_get+0x2ec>)
1000e400:	47b8      	blx	r7
1000e402:	2210      	movs	r2, #16
1000e404:	4b90      	ldr	r3, [pc, #576]	; (1000e648 <at_ble_event_get+0x2f0>)
1000e406:	488e      	ldr	r0, [pc, #568]	; (1000e640 <at_ble_event_get+0x2e8>)
1000e408:	2100      	movs	r1, #0
1000e40a:	4798      	blx	r3
1000e40c:	2300      	movs	r3, #0
1000e40e:	4a8b      	ldr	r2, [pc, #556]	; (1000e63c <at_ble_event_get+0x2e4>)
1000e410:	7013      	strb	r3, [r2, #0]
1000e412:	9b02      	ldr	r3, [sp, #8]
1000e414:	2b00      	cmp	r3, #0
1000e416:	d114      	bne.n	1000e442 <at_ble_event_get+0xea>
1000e418:	4b8c      	ldr	r3, [pc, #560]	; (1000e64c <at_ble_event_get+0x2f4>)
1000e41a:	429c      	cmp	r4, r3
1000e41c:	d009      	beq.n	1000e432 <at_ble_event_get+0xda>
1000e41e:	4b8c      	ldr	r3, [pc, #560]	; (1000e650 <at_ble_event_get+0x2f8>)
1000e420:	429c      	cmp	r4, r3
1000e422:	d127      	bne.n	1000e474 <at_ble_event_get+0x11c>
1000e424:	233a      	movs	r3, #58	; 0x3a
1000e426:	9a03      	ldr	r2, [sp, #12]
1000e428:	7013      	strb	r3, [r2, #0]
1000e42a:	2300      	movs	r3, #0
1000e42c:	9302      	str	r3, [sp, #8]
1000e42e:	1c1d      	adds	r5, r3, #0
1000e430:	e007      	b.n	1000e442 <at_ble_event_get+0xea>
1000e432:	9b01      	ldr	r3, [sp, #4]
1000e434:	42a3      	cmp	r3, r4
1000e436:	d000      	beq.n	1000e43a <at_ble_event_get+0xe2>
1000e438:	e28a      	b.n	1000e950 <at_ble_event_get+0x5f8>
1000e43a:	2338      	movs	r3, #56	; 0x38
1000e43c:	9a03      	ldr	r2, [sp, #12]
1000e43e:	7013      	strb	r3, [r2, #0]
1000e440:	602e      	str	r6, [r5, #0]
1000e442:	9b03      	ldr	r3, [sp, #12]
1000e444:	781b      	ldrb	r3, [r3, #0]
1000e446:	2b3b      	cmp	r3, #59	; 0x3b
1000e448:	d101      	bne.n	1000e44e <at_ble_event_get+0xf6>
1000e44a:	4b82      	ldr	r3, [pc, #520]	; (1000e654 <at_ble_event_get+0x2fc>)
1000e44c:	4798      	blx	r3
1000e44e:	9b03      	ldr	r3, [sp, #12]
1000e450:	781b      	ldrb	r3, [r3, #0]
1000e452:	2b3b      	cmp	r3, #59	; 0x3b
1000e454:	d003      	beq.n	1000e45e <at_ble_event_get+0x106>
1000e456:	9b05      	ldr	r3, [sp, #20]
1000e458:	3303      	adds	r3, #3
1000e45a:	d904      	bls.n	1000e466 <at_ble_event_get+0x10e>
1000e45c:	e283      	b.n	1000e966 <at_ble_event_get+0x60e>
1000e45e:	9b02      	ldr	r3, [sp, #8]
1000e460:	2b00      	cmp	r3, #0
1000e462:	d088      	beq.n	1000e376 <at_ble_event_get+0x1e>
1000e464:	e7f7      	b.n	1000e456 <at_ble_event_get+0xfe>
1000e466:	9b02      	ldr	r3, [sp, #8]
1000e468:	2bd0      	cmp	r3, #208	; 0xd0
1000e46a:	d100      	bne.n	1000e46e <at_ble_event_get+0x116>
1000e46c:	e27b      	b.n	1000e966 <at_ble_event_get+0x60e>
1000e46e:	4b7a      	ldr	r3, [pc, #488]	; (1000e658 <at_ble_event_get+0x300>)
1000e470:	4798      	blx	r3
1000e472:	e278      	b.n	1000e966 <at_ble_event_get+0x60e>
1000e474:	9b01      	ldr	r3, [sp, #4]
1000e476:	2bbb      	cmp	r3, #187	; 0xbb
1000e478:	d125      	bne.n	1000e4c6 <at_ble_event_get+0x16e>
1000e47a:	2cbb      	cmp	r4, #187	; 0xbb
1000e47c:	d123      	bne.n	1000e4c6 <at_ble_event_get+0x16e>
1000e47e:	466b      	mov	r3, sp
1000e480:	891b      	ldrh	r3, [r3, #8]
1000e482:	80ab      	strh	r3, [r5, #4]
1000e484:	78b3      	ldrb	r3, [r6, #2]
1000e486:	7872      	ldrb	r2, [r6, #1]
1000e488:	78f0      	ldrb	r0, [r6, #3]
1000e48a:	021b      	lsls	r3, r3, #8
1000e48c:	4313      	orrs	r3, r2
1000e48e:	7971      	ldrb	r1, [r6, #5]
1000e490:	7932      	ldrb	r2, [r6, #4]
1000e492:	70a8      	strb	r0, [r5, #2]
1000e494:	4871      	ldr	r0, [pc, #452]	; (1000e65c <at_ble_event_get+0x304>)
1000e496:	802b      	strh	r3, [r5, #0]
1000e498:	4283      	cmp	r3, r0
1000e49a:	d806      	bhi.n	1000e4aa <at_ble_event_get+0x152>
1000e49c:	4a70      	ldr	r2, [pc, #448]	; (1000e660 <at_ble_event_get+0x308>)
1000e49e:	4293      	cmp	r3, r2
1000e4a0:	d20b      	bcs.n	1000e4ba <at_ble_event_get+0x162>
1000e4a2:	4a70      	ldr	r2, [pc, #448]	; (1000e664 <at_ble_event_get+0x30c>)
1000e4a4:	4293      	cmp	r3, r2
1000e4a6:	d008      	beq.n	1000e4ba <at_ble_event_get+0x162>
1000e4a8:	e009      	b.n	1000e4be <at_ble_event_get+0x166>
1000e4aa:	486f      	ldr	r0, [pc, #444]	; (1000e668 <at_ble_event_get+0x310>)
1000e4ac:	4283      	cmp	r3, r0
1000e4ae:	d106      	bne.n	1000e4be <at_ble_event_get+0x166>
1000e4b0:	020b      	lsls	r3, r1, #8
1000e4b2:	4313      	orrs	r3, r2
1000e4b4:	80ab      	strh	r3, [r5, #4]
1000e4b6:	2337      	movs	r3, #55	; 0x37
1000e4b8:	e002      	b.n	1000e4c0 <at_ble_event_get+0x168>
1000e4ba:	2336      	movs	r3, #54	; 0x36
1000e4bc:	e000      	b.n	1000e4c0 <at_ble_event_get+0x168>
1000e4be:	2300      	movs	r3, #0
1000e4c0:	9a03      	ldr	r2, [sp, #12]
1000e4c2:	7013      	strb	r3, [r2, #0]
1000e4c4:	e7bd      	b.n	1000e442 <at_ble_event_get+0xea>
1000e4c6:	4b69      	ldr	r3, [pc, #420]	; (1000e66c <at_ble_event_get+0x314>)
1000e4c8:	429c      	cmp	r4, r3
1000e4ca:	d100      	bne.n	1000e4ce <at_ble_event_get+0x176>
1000e4cc:	e144      	b.n	1000e758 <at_ble_event_get+0x400>
1000e4ce:	d865      	bhi.n	1000e59c <at_ble_event_get+0x244>
1000e4d0:	4b67      	ldr	r3, [pc, #412]	; (1000e670 <at_ble_event_get+0x318>)
1000e4d2:	429c      	cmp	r4, r3
1000e4d4:	d100      	bne.n	1000e4d8 <at_ble_event_get+0x180>
1000e4d6:	e1d5      	b.n	1000e884 <at_ble_event_get+0x52c>
1000e4d8:	d82f      	bhi.n	1000e53a <at_ble_event_get+0x1e2>
1000e4da:	4b66      	ldr	r3, [pc, #408]	; (1000e674 <at_ble_event_get+0x31c>)
1000e4dc:	429c      	cmp	r4, r3
1000e4de:	d100      	bne.n	1000e4e2 <at_ble_event_get+0x18a>
1000e4e0:	e1e0      	b.n	1000e8a4 <at_ble_event_get+0x54c>
1000e4e2:	d813      	bhi.n	1000e50c <at_ble_event_get+0x1b4>
1000e4e4:	4b64      	ldr	r3, [pc, #400]	; (1000e678 <at_ble_event_get+0x320>)
1000e4e6:	429c      	cmp	r4, r3
1000e4e8:	d100      	bne.n	1000e4ec <at_ble_event_get+0x194>
1000e4ea:	e1a3      	b.n	1000e834 <at_ble_event_get+0x4dc>
1000e4ec:	d804      	bhi.n	1000e4f8 <at_ble_event_get+0x1a0>
1000e4ee:	2638      	movs	r6, #56	; 0x38
1000e4f0:	42b4      	cmp	r4, r6
1000e4f2:	d100      	bne.n	1000e4f6 <at_ble_event_get+0x19e>
1000e4f4:	e225      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e4f6:	e117      	b.n	1000e728 <at_ble_event_get+0x3d0>
1000e4f8:	4b60      	ldr	r3, [pc, #384]	; (1000e67c <at_ble_event_get+0x324>)
1000e4fa:	429c      	cmp	r4, r3
1000e4fc:	d100      	bne.n	1000e500 <at_ble_event_get+0x1a8>
1000e4fe:	e19f      	b.n	1000e840 <at_ble_event_get+0x4e8>
1000e500:	33fe      	adds	r3, #254	; 0xfe
1000e502:	33ff      	adds	r3, #255	; 0xff
1000e504:	429c      	cmp	r4, r3
1000e506:	d100      	bne.n	1000e50a <at_ble_event_get+0x1b2>
1000e508:	e1d3      	b.n	1000e8b2 <at_ble_event_get+0x55a>
1000e50a:	e10d      	b.n	1000e728 <at_ble_event_get+0x3d0>
1000e50c:	4b5c      	ldr	r3, [pc, #368]	; (1000e680 <at_ble_event_get+0x328>)
1000e50e:	429c      	cmp	r4, r3
1000e510:	d100      	bne.n	1000e514 <at_ble_event_get+0x1bc>
1000e512:	e1a9      	b.n	1000e868 <at_ble_event_get+0x510>
1000e514:	d808      	bhi.n	1000e528 <at_ble_event_get+0x1d0>
1000e516:	4b5b      	ldr	r3, [pc, #364]	; (1000e684 <at_ble_event_get+0x32c>)
1000e518:	429c      	cmp	r4, r3
1000e51a:	d100      	bne.n	1000e51e <at_ble_event_get+0x1c6>
1000e51c:	e196      	b.n	1000e84c <at_ble_event_get+0x4f4>
1000e51e:	4b5a      	ldr	r3, [pc, #360]	; (1000e688 <at_ble_event_get+0x330>)
1000e520:	429c      	cmp	r4, r3
1000e522:	d100      	bne.n	1000e526 <at_ble_event_get+0x1ce>
1000e524:	e199      	b.n	1000e85a <at_ble_event_get+0x502>
1000e526:	e0ff      	b.n	1000e728 <at_ble_event_get+0x3d0>
1000e528:	4b58      	ldr	r3, [pc, #352]	; (1000e68c <at_ble_event_get+0x334>)
1000e52a:	429c      	cmp	r4, r3
1000e52c:	d100      	bne.n	1000e530 <at_ble_event_get+0x1d8>
1000e52e:	e1a2      	b.n	1000e876 <at_ble_event_get+0x51e>
1000e530:	4b57      	ldr	r3, [pc, #348]	; (1000e690 <at_ble_event_get+0x338>)
1000e532:	429c      	cmp	r4, r3
1000e534:	d100      	bne.n	1000e538 <at_ble_event_get+0x1e0>
1000e536:	e1d4      	b.n	1000e8e2 <at_ble_event_get+0x58a>
1000e538:	e0f6      	b.n	1000e728 <at_ble_event_get+0x3d0>
1000e53a:	4b56      	ldr	r3, [pc, #344]	; (1000e694 <at_ble_event_get+0x33c>)
1000e53c:	429c      	cmp	r4, r3
1000e53e:	d100      	bne.n	1000e542 <at_ble_event_get+0x1ea>
1000e540:	e1c8      	b.n	1000e8d4 <at_ble_event_get+0x57c>
1000e542:	d812      	bhi.n	1000e56a <at_ble_event_get+0x212>
1000e544:	4b54      	ldr	r3, [pc, #336]	; (1000e698 <at_ble_event_get+0x340>)
1000e546:	429c      	cmp	r4, r3
1000e548:	d100      	bne.n	1000e54c <at_ble_event_get+0x1f4>
1000e54a:	e1d1      	b.n	1000e8f0 <at_ble_event_get+0x598>
1000e54c:	d804      	bhi.n	1000e558 <at_ble_event_get+0x200>
1000e54e:	4b53      	ldr	r3, [pc, #332]	; (1000e69c <at_ble_event_get+0x344>)
1000e550:	429c      	cmp	r4, r3
1000e552:	d100      	bne.n	1000e556 <at_ble_event_get+0x1fe>
1000e554:	e19b      	b.n	1000e88e <at_ble_event_get+0x536>
1000e556:	e0e7      	b.n	1000e728 <at_ble_event_get+0x3d0>
1000e558:	4b51      	ldr	r3, [pc, #324]	; (1000e6a0 <at_ble_event_get+0x348>)
1000e55a:	429c      	cmp	r4, r3
1000e55c:	d100      	bne.n	1000e560 <at_ble_event_get+0x208>
1000e55e:	e1ad      	b.n	1000e8bc <at_ble_event_get+0x564>
1000e560:	4b50      	ldr	r3, [pc, #320]	; (1000e6a4 <at_ble_event_get+0x34c>)
1000e562:	429c      	cmp	r4, r3
1000e564:	d100      	bne.n	1000e568 <at_ble_event_get+0x210>
1000e566:	e1b0      	b.n	1000e8ca <at_ble_event_get+0x572>
1000e568:	e0de      	b.n	1000e728 <at_ble_event_get+0x3d0>
1000e56a:	4b4f      	ldr	r3, [pc, #316]	; (1000e6a8 <at_ble_event_get+0x350>)
1000e56c:	429c      	cmp	r4, r3
1000e56e:	d100      	bne.n	1000e572 <at_ble_event_get+0x21a>
1000e570:	e0e0      	b.n	1000e734 <at_ble_event_get+0x3dc>
1000e572:	d809      	bhi.n	1000e588 <at_ble_event_get+0x230>
1000e574:	3b08      	subs	r3, #8
1000e576:	429c      	cmp	r4, r3
1000e578:	d100      	bne.n	1000e57c <at_ble_event_get+0x224>
1000e57a:	e0d7      	b.n	1000e72c <at_ble_event_get+0x3d4>
1000e57c:	4b4b      	ldr	r3, [pc, #300]	; (1000e6ac <at_ble_event_get+0x354>)
1000e57e:	2639      	movs	r6, #57	; 0x39
1000e580:	429c      	cmp	r4, r3
1000e582:	d100      	bne.n	1000e586 <at_ble_event_get+0x22e>
1000e584:	e1dd      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e586:	e0cf      	b.n	1000e728 <at_ble_event_get+0x3d0>
1000e588:	23d1      	movs	r3, #209	; 0xd1
1000e58a:	011b      	lsls	r3, r3, #4
1000e58c:	429c      	cmp	r4, r3
1000e58e:	d100      	bne.n	1000e592 <at_ble_event_get+0x23a>
1000e590:	e0d6      	b.n	1000e740 <at_ble_event_get+0x3e8>
1000e592:	4b47      	ldr	r3, [pc, #284]	; (1000e6b0 <at_ble_event_get+0x358>)
1000e594:	429c      	cmp	r4, r3
1000e596:	d100      	bne.n	1000e59a <at_ble_event_get+0x242>
1000e598:	e0d8      	b.n	1000e74c <at_ble_event_get+0x3f4>
1000e59a:	e0c5      	b.n	1000e728 <at_ble_event_get+0x3d0>
1000e59c:	4b45      	ldr	r3, [pc, #276]	; (1000e6b4 <at_ble_event_get+0x35c>)
1000e59e:	429c      	cmp	r4, r3
1000e5a0:	d100      	bne.n	1000e5a4 <at_ble_event_get+0x24c>
1000e5a2:	e117      	b.n	1000e7d4 <at_ble_event_get+0x47c>
1000e5a4:	d82e      	bhi.n	1000e604 <at_ble_event_get+0x2ac>
1000e5a6:	4b44      	ldr	r3, [pc, #272]	; (1000e6b8 <at_ble_event_get+0x360>)
1000e5a8:	429c      	cmp	r4, r3
1000e5aa:	d100      	bne.n	1000e5ae <at_ble_event_get+0x256>
1000e5ac:	e13d      	b.n	1000e82a <at_ble_event_get+0x4d2>
1000e5ae:	d812      	bhi.n	1000e5d6 <at_ble_event_get+0x27e>
1000e5b0:	4b42      	ldr	r3, [pc, #264]	; (1000e6bc <at_ble_event_get+0x364>)
1000e5b2:	429c      	cmp	r4, r3
1000e5b4:	d100      	bne.n	1000e5b8 <at_ble_event_get+0x260>
1000e5b6:	e0e8      	b.n	1000e78a <at_ble_event_get+0x432>
1000e5b8:	d804      	bhi.n	1000e5c4 <at_ble_event_get+0x26c>
1000e5ba:	3b03      	subs	r3, #3
1000e5bc:	429c      	cmp	r4, r3
1000e5be:	d100      	bne.n	1000e5c2 <at_ble_event_get+0x26a>
1000e5c0:	e0d0      	b.n	1000e764 <at_ble_event_get+0x40c>
1000e5c2:	e0b1      	b.n	1000e728 <at_ble_event_get+0x3d0>
1000e5c4:	4b3e      	ldr	r3, [pc, #248]	; (1000e6c0 <at_ble_event_get+0x368>)
1000e5c6:	429c      	cmp	r4, r3
1000e5c8:	d100      	bne.n	1000e5cc <at_ble_event_get+0x274>
1000e5ca:	e0d0      	b.n	1000e76e <at_ble_event_get+0x416>
1000e5cc:	4b3d      	ldr	r3, [pc, #244]	; (1000e6c4 <at_ble_event_get+0x36c>)
1000e5ce:	429c      	cmp	r4, r3
1000e5d0:	d100      	bne.n	1000e5d4 <at_ble_event_get+0x27c>
1000e5d2:	e0f9      	b.n	1000e7c8 <at_ble_event_get+0x470>
1000e5d4:	e0a8      	b.n	1000e728 <at_ble_event_get+0x3d0>
1000e5d6:	4b3c      	ldr	r3, [pc, #240]	; (1000e6c8 <at_ble_event_get+0x370>)
1000e5d8:	429c      	cmp	r4, r3
1000e5da:	d100      	bne.n	1000e5de <at_ble_event_get+0x286>
1000e5dc:	e0db      	b.n	1000e796 <at_ble_event_get+0x43e>
1000e5de:	d808      	bhi.n	1000e5f2 <at_ble_event_get+0x29a>
1000e5e0:	4b3a      	ldr	r3, [pc, #232]	; (1000e6cc <at_ble_event_get+0x374>)
1000e5e2:	429c      	cmp	r4, r3
1000e5e4:	d100      	bne.n	1000e5e8 <at_ble_event_get+0x290>
1000e5e6:	e11b      	b.n	1000e820 <at_ble_event_get+0x4c8>
1000e5e8:	4b39      	ldr	r3, [pc, #228]	; (1000e6d0 <at_ble_event_get+0x378>)
1000e5ea:	429c      	cmp	r4, r3
1000e5ec:	d100      	bne.n	1000e5f0 <at_ble_event_get+0x298>
1000e5ee:	e0d8      	b.n	1000e7a2 <at_ble_event_get+0x44a>
1000e5f0:	e09a      	b.n	1000e728 <at_ble_event_get+0x3d0>
1000e5f2:	4b38      	ldr	r3, [pc, #224]	; (1000e6d4 <at_ble_event_get+0x37c>)
1000e5f4:	429c      	cmp	r4, r3
1000e5f6:	d100      	bne.n	1000e5fa <at_ble_event_get+0x2a2>
1000e5f8:	e0d8      	b.n	1000e7ac <at_ble_event_get+0x454>
1000e5fa:	4b37      	ldr	r3, [pc, #220]	; (1000e6d8 <at_ble_event_get+0x380>)
1000e5fc:	429c      	cmp	r4, r3
1000e5fe:	d100      	bne.n	1000e602 <at_ble_event_get+0x2aa>
1000e600:	e0db      	b.n	1000e7ba <at_ble_event_get+0x462>
1000e602:	e091      	b.n	1000e728 <at_ble_event_get+0x3d0>
1000e604:	4b35      	ldr	r3, [pc, #212]	; (1000e6dc <at_ble_event_get+0x384>)
1000e606:	429c      	cmp	r4, r3
1000e608:	d100      	bne.n	1000e60c <at_ble_event_get+0x2b4>
1000e60a:	e0f7      	b.n	1000e7fc <at_ble_event_get+0x4a4>
1000e60c:	d876      	bhi.n	1000e6fc <at_ble_event_get+0x3a4>
1000e60e:	4b34      	ldr	r3, [pc, #208]	; (1000e6e0 <at_ble_event_get+0x388>)
1000e610:	429c      	cmp	r4, r3
1000e612:	d100      	bne.n	1000e616 <at_ble_event_get+0x2be>
1000e614:	e0f8      	b.n	1000e808 <at_ble_event_get+0x4b0>
1000e616:	d869      	bhi.n	1000e6ec <at_ble_event_get+0x394>
1000e618:	4b32      	ldr	r3, [pc, #200]	; (1000e6e4 <at_ble_event_get+0x38c>)
1000e61a:	429c      	cmp	r4, r3
1000e61c:	d100      	bne.n	1000e620 <at_ble_event_get+0x2c8>
1000e61e:	e0e0      	b.n	1000e7e2 <at_ble_event_get+0x48a>
1000e620:	4b31      	ldr	r3, [pc, #196]	; (1000e6e8 <at_ble_event_get+0x390>)
1000e622:	429c      	cmp	r4, r3
1000e624:	d100      	bne.n	1000e628 <at_ble_event_get+0x2d0>
1000e626:	e0a9      	b.n	1000e77c <at_ble_event_get+0x424>
1000e628:	e07e      	b.n	1000e728 <at_ble_event_get+0x3d0>
1000e62a:	46c0      	nop			; (mov r8, r8)
1000e62c:	1000f505 	.word	0x1000f505
1000e630:	1001d11c 	.word	0x1001d11c
1000e634:	1000c549 	.word	0x1000c549
1000e638:	1001d120 	.word	0x1001d120
1000e63c:	1001d118 	.word	0x1001d118
1000e640:	1001d108 	.word	0x1001d108
1000e644:	1000e241 	.word	0x1000e241
1000e648:	1001830b 	.word	0x1001830b
1000e64c:	0000ffff 	.word	0x0000ffff
1000e650:	0000fffe 	.word	0x0000fffe
1000e654:	1000c7d9 	.word	0x1000c7d9
1000e658:	1000f507 	.word	0x1000f507
1000e65c:	0000201e 	.word	0x0000201e
1000e660:	0000201d 	.word	0x0000201d
1000e664:	00000c03 	.word	0x00000c03
1000e668:	0000201f 	.word	0x0000201f
1000e66c:	00000d1c 	.word	0x00000d1c
1000e670:	00000c0c 	.word	0x00000c0c
1000e674:	00000c02 	.word	0x00000c02
1000e678:	00000a02 	.word	0x00000a02
1000e67c:	00000a03 	.word	0x00000a03
1000e680:	00000c06 	.word	0x00000c06
1000e684:	00000c04 	.word	0x00000c04
1000e688:	00000c05 	.word	0x00000c05
1000e68c:	00000c07 	.word	0x00000c07
1000e690:	00000c09 	.word	0x00000c09
1000e694:	00000c17 	.word	0x00000c17
1000e698:	00000c12 	.word	0x00000c12
1000e69c:	00000c0d 	.word	0x00000c0d
1000e6a0:	00000c13 	.word	0x00000c13
1000e6a4:	00000c15 	.word	0x00000c15
1000e6a8:	00000d08 	.word	0x00000d08
1000e6ac:	00000d01 	.word	0x00000d01
1000e6b0:	00000d15 	.word	0x00000d15
1000e6b4:	00000e1b 	.word	0x00000e1b
1000e6b8:	00000e0f 	.word	0x00000e0f
1000e6bc:	00000e03 	.word	0x00000e03
1000e6c0:	00000e06 	.word	0x00000e06
1000e6c4:	00000e0a 	.word	0x00000e0a
1000e6c8:	00000e15 	.word	0x00000e15
1000e6cc:	00000e11 	.word	0x00000e11
1000e6d0:	00000e13 	.word	0x00000e13
1000e6d4:	00000e17 	.word	0x00000e17
1000e6d8:	00000e19 	.word	0x00000e19
1000e6dc:	00000e27 	.word	0x00000e27
1000e6e0:	00000e21 	.word	0x00000e21
1000e6e4:	00000e1c 	.word	0x00000e1c
1000e6e8:	00000e1d 	.word	0x00000e1d
1000e6ec:	4b9f      	ldr	r3, [pc, #636]	; (1000e96c <at_ble_event_get+0x614>)
1000e6ee:	429c      	cmp	r4, r3
1000e6f0:	d07e      	beq.n	1000e7f0 <at_ble_event_get+0x498>
1000e6f2:	4b9f      	ldr	r3, [pc, #636]	; (1000e970 <at_ble_event_get+0x618>)
1000e6f4:	429c      	cmp	r4, r3
1000e6f6:	d100      	bne.n	1000e6fa <at_ble_event_get+0x3a2>
1000e6f8:	e08c      	b.n	1000e814 <at_ble_event_get+0x4bc>
1000e6fa:	e015      	b.n	1000e728 <at_ble_event_get+0x3d0>
1000e6fc:	4b9d      	ldr	r3, [pc, #628]	; (1000e974 <at_ble_event_get+0x61c>)
1000e6fe:	429c      	cmp	r4, r3
1000e700:	d100      	bne.n	1000e704 <at_ble_event_get+0x3ac>
1000e702:	e10a      	b.n	1000e91a <at_ble_event_get+0x5c2>
1000e704:	d808      	bhi.n	1000e718 <at_ble_event_get+0x3c0>
1000e706:	4b9c      	ldr	r3, [pc, #624]	; (1000e978 <at_ble_event_get+0x620>)
1000e708:	429c      	cmp	r4, r3
1000e70a:	d100      	bne.n	1000e70e <at_ble_event_get+0x3b6>
1000e70c:	e0f7      	b.n	1000e8fe <at_ble_event_get+0x5a6>
1000e70e:	4b9b      	ldr	r3, [pc, #620]	; (1000e97c <at_ble_event_get+0x624>)
1000e710:	429c      	cmp	r4, r3
1000e712:	d100      	bne.n	1000e716 <at_ble_event_get+0x3be>
1000e714:	e0fa      	b.n	1000e90c <at_ble_event_get+0x5b4>
1000e716:	e007      	b.n	1000e728 <at_ble_event_get+0x3d0>
1000e718:	4b99      	ldr	r3, [pc, #612]	; (1000e980 <at_ble_event_get+0x628>)
1000e71a:	429c      	cmp	r4, r3
1000e71c:	d100      	bne.n	1000e720 <at_ble_event_get+0x3c8>
1000e71e:	e103      	b.n	1000e928 <at_ble_event_get+0x5d0>
1000e720:	4b98      	ldr	r3, [pc, #608]	; (1000e984 <at_ble_event_get+0x62c>)
1000e722:	429c      	cmp	r4, r3
1000e724:	d100      	bne.n	1000e728 <at_ble_event_get+0x3d0>
1000e726:	e106      	b.n	1000e936 <at_ble_event_get+0x5de>
1000e728:	2600      	movs	r6, #0
1000e72a:	e10a      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e72c:	1c30      	adds	r0, r6, #0
1000e72e:	1c29      	adds	r1, r5, #0
1000e730:	4b95      	ldr	r3, [pc, #596]	; (1000e988 <at_ble_event_get+0x630>)
1000e732:	e014      	b.n	1000e75e <at_ble_event_get+0x406>
1000e734:	1c30      	adds	r0, r6, #0
1000e736:	1c29      	adds	r1, r5, #0
1000e738:	4b94      	ldr	r3, [pc, #592]	; (1000e98c <at_ble_event_get+0x634>)
1000e73a:	4798      	blx	r3
1000e73c:	2604      	movs	r6, #4
1000e73e:	e100      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e740:	1c30      	adds	r0, r6, #0
1000e742:	1c29      	adds	r1, r5, #0
1000e744:	4b92      	ldr	r3, [pc, #584]	; (1000e990 <at_ble_event_get+0x638>)
1000e746:	4798      	blx	r3
1000e748:	2601      	movs	r6, #1
1000e74a:	e0fa      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e74c:	1c30      	adds	r0, r6, #0
1000e74e:	1c29      	adds	r1, r5, #0
1000e750:	4b90      	ldr	r3, [pc, #576]	; (1000e994 <at_ble_event_get+0x63c>)
1000e752:	4798      	blx	r3
1000e754:	260f      	movs	r6, #15
1000e756:	e0f4      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e758:	1c30      	adds	r0, r6, #0
1000e75a:	1c29      	adds	r1, r5, #0
1000e75c:	4b8e      	ldr	r3, [pc, #568]	; (1000e998 <at_ble_event_get+0x640>)
1000e75e:	4798      	blx	r3
1000e760:	1c06      	adds	r6, r0, #0
1000e762:	e0ee      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e764:	9801      	ldr	r0, [sp, #4]
1000e766:	1c31      	adds	r1, r6, #0
1000e768:	1c2a      	adds	r2, r5, #0
1000e76a:	4b8c      	ldr	r3, [pc, #560]	; (1000e99c <at_ble_event_get+0x644>)
1000e76c:	e017      	b.n	1000e79e <at_ble_event_get+0x446>
1000e76e:	1c31      	adds	r1, r6, #0
1000e770:	9801      	ldr	r0, [sp, #4]
1000e772:	1c2a      	adds	r2, r5, #0
1000e774:	4b8a      	ldr	r3, [pc, #552]	; (1000e9a0 <at_ble_event_get+0x648>)
1000e776:	4798      	blx	r3
1000e778:	2611      	movs	r6, #17
1000e77a:	e0e2      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e77c:	1c31      	adds	r1, r6, #0
1000e77e:	9801      	ldr	r0, [sp, #4]
1000e780:	1c2a      	adds	r2, r5, #0
1000e782:	4b88      	ldr	r3, [pc, #544]	; (1000e9a4 <at_ble_event_get+0x64c>)
1000e784:	4798      	blx	r3
1000e786:	2612      	movs	r6, #18
1000e788:	e0db      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e78a:	1c30      	adds	r0, r6, #0
1000e78c:	1c29      	adds	r1, r5, #0
1000e78e:	4b86      	ldr	r3, [pc, #536]	; (1000e9a8 <at_ble_event_get+0x650>)
1000e790:	4798      	blx	r3
1000e792:	2606      	movs	r6, #6
1000e794:	e0d5      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e796:	1c31      	adds	r1, r6, #0
1000e798:	1c2a      	adds	r2, r5, #0
1000e79a:	9801      	ldr	r0, [sp, #4]
1000e79c:	4b83      	ldr	r3, [pc, #524]	; (1000e9ac <at_ble_event_get+0x654>)
1000e79e:	4798      	blx	r3
1000e7a0:	e7de      	b.n	1000e760 <at_ble_event_get+0x408>
1000e7a2:	9801      	ldr	r0, [sp, #4]
1000e7a4:	1c31      	adds	r1, r6, #0
1000e7a6:	1c2a      	adds	r2, r5, #0
1000e7a8:	4b81      	ldr	r3, [pc, #516]	; (1000e9b0 <at_ble_event_get+0x658>)
1000e7aa:	e7f8      	b.n	1000e79e <at_ble_event_get+0x446>
1000e7ac:	1c31      	adds	r1, r6, #0
1000e7ae:	9801      	ldr	r0, [sp, #4]
1000e7b0:	1c2a      	adds	r2, r5, #0
1000e7b2:	4b80      	ldr	r3, [pc, #512]	; (1000e9b4 <at_ble_event_get+0x65c>)
1000e7b4:	4798      	blx	r3
1000e7b6:	260d      	movs	r6, #13
1000e7b8:	e0c3      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e7ba:	1c31      	adds	r1, r6, #0
1000e7bc:	9801      	ldr	r0, [sp, #4]
1000e7be:	1c2a      	adds	r2, r5, #0
1000e7c0:	4b7d      	ldr	r3, [pc, #500]	; (1000e9b8 <at_ble_event_get+0x660>)
1000e7c2:	4798      	blx	r3
1000e7c4:	260e      	movs	r6, #14
1000e7c6:	e0bc      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e7c8:	9801      	ldr	r0, [sp, #4]
1000e7ca:	1c31      	adds	r1, r6, #0
1000e7cc:	1c2a      	adds	r2, r5, #0
1000e7ce:	4b7b      	ldr	r3, [pc, #492]	; (1000e9bc <at_ble_event_get+0x664>)
1000e7d0:	4798      	blx	r3
1000e7d2:	e084      	b.n	1000e8de <at_ble_event_get+0x586>
1000e7d4:	1c31      	adds	r1, r6, #0
1000e7d6:	9801      	ldr	r0, [sp, #4]
1000e7d8:	1c2a      	adds	r2, r5, #0
1000e7da:	4b79      	ldr	r3, [pc, #484]	; (1000e9c0 <at_ble_event_get+0x668>)
1000e7dc:	4798      	blx	r3
1000e7de:	260b      	movs	r6, #11
1000e7e0:	e0af      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e7e2:	1c31      	adds	r1, r6, #0
1000e7e4:	9801      	ldr	r0, [sp, #4]
1000e7e6:	1c2a      	adds	r2, r5, #0
1000e7e8:	4b76      	ldr	r3, [pc, #472]	; (1000e9c4 <at_ble_event_get+0x66c>)
1000e7ea:	4798      	blx	r3
1000e7ec:	2610      	movs	r6, #16
1000e7ee:	e0a8      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e7f0:	1c30      	adds	r0, r6, #0
1000e7f2:	1c29      	adds	r1, r5, #0
1000e7f4:	4b74      	ldr	r3, [pc, #464]	; (1000e9c8 <at_ble_event_get+0x670>)
1000e7f6:	4798      	blx	r3
1000e7f8:	2628      	movs	r6, #40	; 0x28
1000e7fa:	e0a2      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e7fc:	1c30      	adds	r0, r6, #0
1000e7fe:	1c29      	adds	r1, r5, #0
1000e800:	4b72      	ldr	r3, [pc, #456]	; (1000e9cc <at_ble_event_get+0x674>)
1000e802:	4798      	blx	r3
1000e804:	2629      	movs	r6, #41	; 0x29
1000e806:	e09c      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e808:	1c30      	adds	r0, r6, #0
1000e80a:	1c29      	adds	r1, r5, #0
1000e80c:	4b70      	ldr	r3, [pc, #448]	; (1000e9d0 <at_ble_event_get+0x678>)
1000e80e:	4798      	blx	r3
1000e810:	2627      	movs	r6, #39	; 0x27
1000e812:	e096      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e814:	1c30      	adds	r0, r6, #0
1000e816:	1c29      	adds	r1, r5, #0
1000e818:	4b6e      	ldr	r3, [pc, #440]	; (1000e9d4 <at_ble_event_get+0x67c>)
1000e81a:	4798      	blx	r3
1000e81c:	262a      	movs	r6, #42	; 0x2a
1000e81e:	e090      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e820:	9801      	ldr	r0, [sp, #4]
1000e822:	1c31      	adds	r1, r6, #0
1000e824:	1c2a      	adds	r2, r5, #0
1000e826:	4b6c      	ldr	r3, [pc, #432]	; (1000e9d8 <at_ble_event_get+0x680>)
1000e828:	e7b9      	b.n	1000e79e <at_ble_event_get+0x446>
1000e82a:	9801      	ldr	r0, [sp, #4]
1000e82c:	1c31      	adds	r1, r6, #0
1000e82e:	1c2a      	adds	r2, r5, #0
1000e830:	4b6a      	ldr	r3, [pc, #424]	; (1000e9dc <at_ble_event_get+0x684>)
1000e832:	e7b4      	b.n	1000e79e <at_ble_event_get+0x446>
1000e834:	1c30      	adds	r0, r6, #0
1000e836:	1c29      	adds	r1, r5, #0
1000e838:	4b69      	ldr	r3, [pc, #420]	; (1000e9e0 <at_ble_event_get+0x688>)
1000e83a:	4798      	blx	r3
1000e83c:	262b      	movs	r6, #43	; 0x2b
1000e83e:	e080      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e840:	1c30      	adds	r0, r6, #0
1000e842:	1c29      	adds	r1, r5, #0
1000e844:	4b67      	ldr	r3, [pc, #412]	; (1000e9e4 <at_ble_event_get+0x68c>)
1000e846:	4798      	blx	r3
1000e848:	262c      	movs	r6, #44	; 0x2c
1000e84a:	e07a      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e84c:	1c31      	adds	r1, r6, #0
1000e84e:	9801      	ldr	r0, [sp, #4]
1000e850:	1c2a      	adds	r2, r5, #0
1000e852:	4b65      	ldr	r3, [pc, #404]	; (1000e9e8 <at_ble_event_get+0x690>)
1000e854:	4798      	blx	r3
1000e856:	2613      	movs	r6, #19
1000e858:	e073      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e85a:	1c31      	adds	r1, r6, #0
1000e85c:	9801      	ldr	r0, [sp, #4]
1000e85e:	1c2a      	adds	r2, r5, #0
1000e860:	4b62      	ldr	r3, [pc, #392]	; (1000e9ec <at_ble_event_get+0x694>)
1000e862:	4798      	blx	r3
1000e864:	2614      	movs	r6, #20
1000e866:	e06c      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e868:	1c31      	adds	r1, r6, #0
1000e86a:	9801      	ldr	r0, [sp, #4]
1000e86c:	1c2a      	adds	r2, r5, #0
1000e86e:	4b60      	ldr	r3, [pc, #384]	; (1000e9f0 <at_ble_event_get+0x698>)
1000e870:	4798      	blx	r3
1000e872:	2615      	movs	r6, #21
1000e874:	e065      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e876:	1c31      	adds	r1, r6, #0
1000e878:	9801      	ldr	r0, [sp, #4]
1000e87a:	1c2a      	adds	r2, r5, #0
1000e87c:	4b5d      	ldr	r3, [pc, #372]	; (1000e9f4 <at_ble_event_get+0x69c>)
1000e87e:	4798      	blx	r3
1000e880:	2616      	movs	r6, #22
1000e882:	e05e      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e884:	9801      	ldr	r0, [sp, #4]
1000e886:	1c31      	adds	r1, r6, #0
1000e888:	1c2a      	adds	r2, r5, #0
1000e88a:	4b5b      	ldr	r3, [pc, #364]	; (1000e9f8 <at_ble_event_get+0x6a0>)
1000e88c:	e787      	b.n	1000e79e <at_ble_event_get+0x446>
1000e88e:	1c31      	adds	r1, r6, #0
1000e890:	9801      	ldr	r0, [sp, #4]
1000e892:	1c2a      	adds	r2, r5, #0
1000e894:	4b58      	ldr	r3, [pc, #352]	; (1000e9f8 <at_ble_event_get+0x6a0>)
1000e896:	4798      	blx	r3
1000e898:	88a9      	ldrh	r1, [r5, #4]
1000e89a:	1c06      	adds	r6, r0, #0
1000e89c:	4b57      	ldr	r3, [pc, #348]	; (1000e9fc <at_ble_event_get+0x6a4>)
1000e89e:	8828      	ldrh	r0, [r5, #0]
1000e8a0:	4798      	blx	r3
1000e8a2:	e04e      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e8a4:	1c31      	adds	r1, r6, #0
1000e8a6:	9801      	ldr	r0, [sp, #4]
1000e8a8:	1c2a      	adds	r2, r5, #0
1000e8aa:	4b55      	ldr	r3, [pc, #340]	; (1000ea00 <at_ble_event_get+0x6a8>)
1000e8ac:	4798      	blx	r3
1000e8ae:	2623      	movs	r6, #35	; 0x23
1000e8b0:	e047      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e8b2:	9801      	ldr	r0, [sp, #4]
1000e8b4:	1c31      	adds	r1, r6, #0
1000e8b6:	1c2a      	adds	r2, r5, #0
1000e8b8:	4b52      	ldr	r3, [pc, #328]	; (1000ea04 <at_ble_event_get+0x6ac>)
1000e8ba:	e770      	b.n	1000e79e <at_ble_event_get+0x446>
1000e8bc:	9b01      	ldr	r3, [sp, #4]
1000e8be:	1c30      	adds	r0, r6, #0
1000e8c0:	0a1f      	lsrs	r7, r3, #8
1000e8c2:	802f      	strh	r7, [r5, #0]
1000e8c4:	1c29      	adds	r1, r5, #0
1000e8c6:	4b50      	ldr	r3, [pc, #320]	; (1000ea08 <at_ble_event_get+0x6b0>)
1000e8c8:	e749      	b.n	1000e75e <at_ble_event_get+0x406>
1000e8ca:	9801      	ldr	r0, [sp, #4]
1000e8cc:	1c31      	adds	r1, r6, #0
1000e8ce:	1c2a      	adds	r2, r5, #0
1000e8d0:	4b4e      	ldr	r3, [pc, #312]	; (1000ea0c <at_ble_event_get+0x6b4>)
1000e8d2:	e764      	b.n	1000e79e <at_ble_event_get+0x446>
1000e8d4:	1c30      	adds	r0, r6, #0
1000e8d6:	1c29      	adds	r1, r5, #0
1000e8d8:	9a01      	ldr	r2, [sp, #4]
1000e8da:	4b4d      	ldr	r3, [pc, #308]	; (1000ea10 <at_ble_event_get+0x6b8>)
1000e8dc:	4798      	blx	r3
1000e8de:	263b      	movs	r6, #59	; 0x3b
1000e8e0:	e02f      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e8e2:	1c31      	adds	r1, r6, #0
1000e8e4:	9801      	ldr	r0, [sp, #4]
1000e8e6:	1c2a      	adds	r2, r5, #0
1000e8e8:	4b4a      	ldr	r3, [pc, #296]	; (1000ea14 <at_ble_event_get+0x6bc>)
1000e8ea:	4798      	blx	r3
1000e8ec:	2618      	movs	r6, #24
1000e8ee:	e028      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e8f0:	1c31      	adds	r1, r6, #0
1000e8f2:	9801      	ldr	r0, [sp, #4]
1000e8f4:	1c2a      	adds	r2, r5, #0
1000e8f6:	4b48      	ldr	r3, [pc, #288]	; (1000ea18 <at_ble_event_get+0x6c0>)
1000e8f8:	4798      	blx	r3
1000e8fa:	2620      	movs	r6, #32
1000e8fc:	e021      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e8fe:	1c31      	adds	r1, r6, #0
1000e900:	9801      	ldr	r0, [sp, #4]
1000e902:	1c2a      	adds	r2, r5, #0
1000e904:	4b45      	ldr	r3, [pc, #276]	; (1000ea1c <at_ble_event_get+0x6c4>)
1000e906:	4798      	blx	r3
1000e908:	2633      	movs	r6, #51	; 0x33
1000e90a:	e01a      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e90c:	1c31      	adds	r1, r6, #0
1000e90e:	9801      	ldr	r0, [sp, #4]
1000e910:	1c2a      	adds	r2, r5, #0
1000e912:	4b43      	ldr	r3, [pc, #268]	; (1000ea20 <at_ble_event_get+0x6c8>)
1000e914:	4798      	blx	r3
1000e916:	2630      	movs	r6, #48	; 0x30
1000e918:	e013      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e91a:	1c31      	adds	r1, r6, #0
1000e91c:	9801      	ldr	r0, [sp, #4]
1000e91e:	1c2a      	adds	r2, r5, #0
1000e920:	4b40      	ldr	r3, [pc, #256]	; (1000ea24 <at_ble_event_get+0x6cc>)
1000e922:	4798      	blx	r3
1000e924:	2634      	movs	r6, #52	; 0x34
1000e926:	e00c      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e928:	1c31      	adds	r1, r6, #0
1000e92a:	9801      	ldr	r0, [sp, #4]
1000e92c:	1c2a      	adds	r2, r5, #0
1000e92e:	4b3e      	ldr	r3, [pc, #248]	; (1000ea28 <at_ble_event_get+0x6d0>)
1000e930:	4798      	blx	r3
1000e932:	2635      	movs	r6, #53	; 0x35
1000e934:	e005      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e936:	1c31      	adds	r1, r6, #0
1000e938:	9801      	ldr	r0, [sp, #4]
1000e93a:	1c2a      	adds	r2, r5, #0
1000e93c:	4b3b      	ldr	r3, [pc, #236]	; (1000ea2c <at_ble_event_get+0x6d4>)
1000e93e:	4798      	blx	r3
1000e940:	2632      	movs	r6, #50	; 0x32
1000e942:	9b03      	ldr	r3, [sp, #12]
1000e944:	701e      	strb	r6, [r3, #0]
1000e946:	2300      	movs	r3, #0
1000e948:	9302      	str	r3, [sp, #8]
1000e94a:	e57a      	b.n	1000e442 <at_ble_event_get+0xea>
1000e94c:	23d0      	movs	r3, #208	; 0xd0
1000e94e:	e7fb      	b.n	1000e948 <at_ble_event_get+0x5f0>
1000e950:	9b01      	ldr	r3, [sp, #4]
1000e952:	9e02      	ldr	r6, [sp, #8]
1000e954:	2bbb      	cmp	r3, #187	; 0xbb
1000e956:	d000      	beq.n	1000e95a <at_ble_event_get+0x602>
1000e958:	e6e6      	b.n	1000e728 <at_ble_event_get+0x3d0>
1000e95a:	e7f2      	b.n	1000e942 <at_ble_event_get+0x5ea>
1000e95c:	9b02      	ldr	r3, [sp, #8]
1000e95e:	2b00      	cmp	r3, #0
1000e960:	d000      	beq.n	1000e964 <at_ble_event_get+0x60c>
1000e962:	e56e      	b.n	1000e442 <at_ble_event_get+0xea>
1000e964:	e6e0      	b.n	1000e728 <at_ble_event_get+0x3d0>
1000e966:	9802      	ldr	r0, [sp, #8]
1000e968:	b007      	add	sp, #28
1000e96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e96c:	00000e22 	.word	0x00000e22
1000e970:	00000e25 	.word	0x00000e25
1000e974:	00001b05 	.word	0x00001b05
1000e978:	00001b01 	.word	0x00001b01
1000e97c:	00001b03 	.word	0x00001b03
1000e980:	00001b06 	.word	0x00001b06
1000e984:	00001b08 	.word	0x00001b08
1000e988:	10010331 	.word	0x10010331
1000e98c:	10010315 	.word	0x10010315
1000e990:	10010479 	.word	0x10010479
1000e994:	10010569 	.word	0x10010569
1000e998:	1001058d 	.word	0x1001058d
1000e99c:	1000f6a9 	.word	0x1000f6a9
1000e9a0:	1000ff29 	.word	0x1000ff29
1000e9a4:	1000ffa5 	.word	0x1000ffa5
1000e9a8:	1000f961 	.word	0x1000f961
1000e9ac:	1000f9fd 	.word	0x1000f9fd
1000e9b0:	1000fad5 	.word	0x1000fad5
1000e9b4:	1000fd5d 	.word	0x1000fd5d
1000e9b8:	1000fdfd 	.word	0x1000fdfd
1000e9bc:	1000feb5 	.word	0x1000feb5
1000e9c0:	1000fedd 	.word	0x1000fedd
1000e9c4:	1000fef3 	.word	0x1000fef3
1000e9c8:	1000ffbd 	.word	0x1000ffbd
1000e9cc:	1000ffeb 	.word	0x1000ffeb
1000e9d0:	10010001 	.word	0x10010001
1000e9d4:	1001002b 	.word	0x1001002b
1000e9d8:	1000fe59 	.word	0x1000fe59
1000e9dc:	1000fe83 	.word	0x1000fe83
1000e9e0:	1000f0e9 	.word	0x1000f0e9
1000e9e4:	1000f115 	.word	0x1000f115
1000e9e8:	10010735 	.word	0x10010735
1000e9ec:	10010771 	.word	0x10010771
1000e9f0:	100107b9 	.word	0x100107b9
1000e9f4:	100107fd 	.word	0x100107fd
1000e9f8:	10010831 	.word	0x10010831
1000e9fc:	100106f5 	.word	0x100106f5
1000ea00:	100108fd 	.word	0x100108fd
1000ea04:	10010885 	.word	0x10010885
1000ea08:	1000f041 	.word	0x1000f041
1000ea0c:	1000f0ad 	.word	0x1000f0ad
1000ea10:	1000f071 	.word	0x1000f071
1000ea14:	1001090d 	.word	0x1001090d
1000ea18:	1001094d 	.word	0x1001094d
1000ea1c:	10010a99 	.word	0x10010a99
1000ea20:	10010aa3 	.word	0x10010aa3
1000ea24:	10010aa9 	.word	0x10010aa9
1000ea28:	10010aaf 	.word	0x10010aaf
1000ea2c:	10010abb 	.word	0x10010abb

1000ea30 <internal_event_flush>:
1000ea30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ea32:	490e      	ldr	r1, [pc, #56]	; (1000ea6c <internal_event_flush+0x3c>)
1000ea34:	2400      	movs	r4, #0
1000ea36:	680b      	ldr	r3, [r1, #0]
1000ea38:	1c0f      	adds	r7, r1, #0
1000ea3a:	1c1e      	adds	r6, r3, #0
1000ea3c:	4a0c      	ldr	r2, [pc, #48]	; (1000ea70 <internal_event_flush+0x40>)
1000ea3e:	6815      	ldr	r5, [r2, #0]
1000ea40:	9201      	str	r2, [sp, #4]
1000ea42:	2b00      	cmp	r3, #0
1000ea44:	d00e      	beq.n	1000ea64 <internal_event_flush+0x34>
1000ea46:	889a      	ldrh	r2, [r3, #4]
1000ea48:	6819      	ldr	r1, [r3, #0]
1000ea4a:	4282      	cmp	r2, r0
1000ea4c:	d107      	bne.n	1000ea5e <internal_event_flush+0x2e>
1000ea4e:	2c00      	cmp	r4, #0
1000ea50:	d001      	beq.n	1000ea56 <internal_event_flush+0x26>
1000ea52:	6021      	str	r1, [r4, #0]
1000ea54:	e000      	b.n	1000ea58 <internal_event_flush+0x28>
1000ea56:	1c0e      	adds	r6, r1, #0
1000ea58:	601d      	str	r5, [r3, #0]
1000ea5a:	1c1d      	adds	r5, r3, #0
1000ea5c:	1c23      	adds	r3, r4, #0
1000ea5e:	1c1c      	adds	r4, r3, #0
1000ea60:	1c0b      	adds	r3, r1, #0
1000ea62:	e7ee      	b.n	1000ea42 <internal_event_flush+0x12>
1000ea64:	9b01      	ldr	r3, [sp, #4]
1000ea66:	603e      	str	r6, [r7, #0]
1000ea68:	601d      	str	r5, [r3, #0]
1000ea6a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000ea6c:	1001d11c 	.word	0x1001d11c
1000ea70:	1001d120 	.word	0x1001d120

1000ea74 <internal_conn_flush>:
1000ea74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ea76:	4a12      	ldr	r2, [pc, #72]	; (1000eac0 <internal_conn_flush+0x4c>)
1000ea78:	9000      	str	r0, [sp, #0]
1000ea7a:	6813      	ldr	r3, [r2, #0]
1000ea7c:	4811      	ldr	r0, [pc, #68]	; (1000eac4 <internal_conn_flush+0x50>)
1000ea7e:	1c1f      	adds	r7, r3, #0
1000ea80:	2100      	movs	r1, #0
1000ea82:	4684      	mov	ip, r0
1000ea84:	6804      	ldr	r4, [r0, #0]
1000ea86:	9201      	str	r2, [sp, #4]
1000ea88:	2b00      	cmp	r3, #0
1000ea8a:	d014      	beq.n	1000eab6 <internal_conn_flush+0x42>
1000ea8c:	88d8      	ldrh	r0, [r3, #6]
1000ea8e:	9a00      	ldr	r2, [sp, #0]
1000ea90:	681d      	ldr	r5, [r3, #0]
1000ea92:	0a06      	lsrs	r6, r0, #8
1000ea94:	4296      	cmp	r6, r2
1000ea96:	d10b      	bne.n	1000eab0 <internal_conn_flush+0x3c>
1000ea98:	26fd      	movs	r6, #253	; 0xfd
1000ea9a:	4006      	ands	r6, r0
1000ea9c:	2e0c      	cmp	r6, #12
1000ea9e:	d107      	bne.n	1000eab0 <internal_conn_flush+0x3c>
1000eaa0:	2900      	cmp	r1, #0
1000eaa2:	d001      	beq.n	1000eaa8 <internal_conn_flush+0x34>
1000eaa4:	600d      	str	r5, [r1, #0]
1000eaa6:	e000      	b.n	1000eaaa <internal_conn_flush+0x36>
1000eaa8:	1c2f      	adds	r7, r5, #0
1000eaaa:	601c      	str	r4, [r3, #0]
1000eaac:	1c1c      	adds	r4, r3, #0
1000eaae:	1c0b      	adds	r3, r1, #0
1000eab0:	1c19      	adds	r1, r3, #0
1000eab2:	1c2b      	adds	r3, r5, #0
1000eab4:	e7e8      	b.n	1000ea88 <internal_conn_flush+0x14>
1000eab6:	9b01      	ldr	r3, [sp, #4]
1000eab8:	601f      	str	r7, [r3, #0]
1000eaba:	4663      	mov	r3, ip
1000eabc:	601c      	str	r4, [r3, #0]
1000eabe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000eac0:	1001d11c 	.word	0x1001d11c
1000eac4:	1001d120 	.word	0x1001d120

1000eac8 <at_ble_device_name_set>:
1000eac8:	b530      	push	{r4, r5, lr}
1000eaca:	23cf      	movs	r3, #207	; 0xcf
1000eacc:	2800      	cmp	r0, #0
1000eace:	d010      	beq.n	1000eaf2 <at_ble_device_name_set+0x2a>
1000ead0:	1e4a      	subs	r2, r1, #1
1000ead2:	2a1f      	cmp	r2, #31
1000ead4:	d80d      	bhi.n	1000eaf2 <at_ble_device_name_set+0x2a>
1000ead6:	4a08      	ldr	r2, [pc, #32]	; (1000eaf8 <at_ble_device_name_set+0x30>)
1000ead8:	1c13      	adds	r3, r2, #0
1000eada:	33aa      	adds	r3, #170	; 0xaa
1000eadc:	8019      	strh	r1, [r3, #0]
1000eade:	2300      	movs	r3, #0
1000eae0:	1c1c      	adds	r4, r3, #0
1000eae2:	5cc5      	ldrb	r5, [r0, r3]
1000eae4:	34ac      	adds	r4, #172	; 0xac
1000eae6:	3301      	adds	r3, #1
1000eae8:	5515      	strb	r5, [r2, r4]
1000eaea:	b2dc      	uxtb	r4, r3
1000eaec:	428c      	cmp	r4, r1
1000eaee:	d3f7      	bcc.n	1000eae0 <at_ble_device_name_set+0x18>
1000eaf0:	2300      	movs	r3, #0
1000eaf2:	1c18      	adds	r0, r3, #0
1000eaf4:	bd30      	pop	{r4, r5, pc}
1000eaf6:	46c0      	nop			; (mov r8, r8)
1000eaf8:	1001e22a 	.word	0x1001e22a

1000eafc <at_ble_addr_get>:
1000eafc:	b510      	push	{r4, lr}
1000eafe:	1c04      	adds	r4, r0, #0
1000eb00:	20cf      	movs	r0, #207	; 0xcf
1000eb02:	2c00      	cmp	r4, #0
1000eb04:	d006      	beq.n	1000eb14 <at_ble_addr_get+0x18>
1000eb06:	4b04      	ldr	r3, [pc, #16]	; (1000eb18 <at_ble_addr_get+0x1c>)
1000eb08:	38ce      	subs	r0, #206	; 0xce
1000eb0a:	1c21      	adds	r1, r4, #0
1000eb0c:	4798      	blx	r3
1000eb0e:	4b03      	ldr	r3, [pc, #12]	; (1000eb1c <at_ble_addr_get+0x20>)
1000eb10:	791b      	ldrb	r3, [r3, #4]
1000eb12:	7023      	strb	r3, [r4, #0]
1000eb14:	bd10      	pop	{r4, pc}
1000eb16:	46c0      	nop			; (mov r8, r8)
1000eb18:	100101c5 	.word	0x100101c5
1000eb1c:	1001e22a 	.word	0x1001e22a

1000eb20 <at_ble_set_dev_config>:
1000eb20:	b5f0      	push	{r4, r5, r6, r7, lr}
1000eb22:	7906      	ldrb	r6, [r0, #4]
1000eb24:	b089      	sub	sp, #36	; 0x24
1000eb26:	25cf      	movs	r5, #207	; 0xcf
1000eb28:	2e03      	cmp	r6, #3
1000eb2a:	d838      	bhi.n	1000eb9e <at_ble_set_dev_config+0x7e>
1000eb2c:	7803      	ldrb	r3, [r0, #0]
1000eb2e:	3511      	adds	r5, #17
1000eb30:	2b0f      	cmp	r3, #15
1000eb32:	d834      	bhi.n	1000eb9e <at_ble_set_dev_config+0x7e>
1000eb34:	2380      	movs	r3, #128	; 0x80
1000eb36:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000eb38:	3d11      	subs	r5, #17
1000eb3a:	009b      	lsls	r3, r3, #2
1000eb3c:	429f      	cmp	r7, r3
1000eb3e:	d82e      	bhi.n	1000eb9e <at_ble_set_dev_config+0x7e>
1000eb40:	7fc5      	ldrb	r5, [r0, #31]
1000eb42:	7f83      	ldrb	r3, [r0, #30]
1000eb44:	01ad      	lsls	r5, r5, #6
1000eb46:	015b      	lsls	r3, r3, #5
1000eb48:	431d      	orrs	r5, r3
1000eb4a:	7ec3      	ldrb	r3, [r0, #27]
1000eb4c:	431d      	orrs	r5, r3
1000eb4e:	7f43      	ldrb	r3, [r0, #29]
1000eb50:	011b      	lsls	r3, r3, #4
1000eb52:	431d      	orrs	r5, r3
1000eb54:	7f03      	ldrb	r3, [r0, #28]
1000eb56:	009b      	lsls	r3, r3, #2
1000eb58:	431d      	orrs	r5, r3
1000eb5a:	4b12      	ldr	r3, [pc, #72]	; (1000eba4 <at_ble_set_dev_config+0x84>)
1000eb5c:	b2ed      	uxtb	r5, r5
1000eb5e:	711e      	strb	r6, [r3, #4]
1000eb60:	7903      	ldrb	r3, [r0, #4]
1000eb62:	3b02      	subs	r3, #2
1000eb64:	2b01      	cmp	r3, #1
1000eb66:	d801      	bhi.n	1000eb6c <at_ble_set_dev_config+0x4c>
1000eb68:	2302      	movs	r3, #2
1000eb6a:	7103      	strb	r3, [r0, #4]
1000eb6c:	1c04      	adds	r4, r0, #0
1000eb6e:	1c23      	adds	r3, r4, #0
1000eb70:	330b      	adds	r3, #11
1000eb72:	8861      	ldrh	r1, [r4, #2]
1000eb74:	9307      	str	r3, [sp, #28]
1000eb76:	7923      	ldrb	r3, [r4, #4]
1000eb78:	7800      	ldrb	r0, [r0, #0]
1000eb7a:	9300      	str	r3, [sp, #0]
1000eb7c:	9501      	str	r5, [sp, #4]
1000eb7e:	8c25      	ldrh	r5, [r4, #32]
1000eb80:	1d62      	adds	r2, r4, #5
1000eb82:	9502      	str	r5, [sp, #8]
1000eb84:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000eb86:	9b07      	ldr	r3, [sp, #28]
1000eb88:	9503      	str	r5, [sp, #12]
1000eb8a:	9704      	str	r7, [sp, #16]
1000eb8c:	4d06      	ldr	r5, [pc, #24]	; (1000eba8 <at_ble_set_dev_config+0x88>)
1000eb8e:	47a8      	blx	r5
1000eb90:	7126      	strb	r6, [r4, #4]
1000eb92:	1c05      	adds	r5, r0, #0
1000eb94:	1c21      	adds	r1, r4, #0
1000eb96:	4803      	ldr	r0, [pc, #12]	; (1000eba4 <at_ble_set_dev_config+0x84>)
1000eb98:	2226      	movs	r2, #38	; 0x26
1000eb9a:	4b04      	ldr	r3, [pc, #16]	; (1000ebac <at_ble_set_dev_config+0x8c>)
1000eb9c:	4798      	blx	r3
1000eb9e:	1c28      	adds	r0, r5, #0
1000eba0:	b009      	add	sp, #36	; 0x24
1000eba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eba4:	1001e22a 	.word	0x1001e22a
1000eba8:	100100bd 	.word	0x100100bd
1000ebac:	100182cf 	.word	0x100182cf

1000ebb0 <at_ble_init>:
1000ebb0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ebb2:	b087      	sub	sp, #28
1000ebb4:	af03      	add	r7, sp, #12
1000ebb6:	4954      	ldr	r1, [pc, #336]	; (1000ed08 <at_ble_init+0x158>)
1000ebb8:	220b      	movs	r2, #11
1000ebba:	4b54      	ldr	r3, [pc, #336]	; (1000ed0c <at_ble_init+0x15c>)
1000ebbc:	1c04      	adds	r4, r0, #0
1000ebbe:	1c38      	adds	r0, r7, #0
1000ebc0:	4798      	blx	r3
1000ebc2:	2205      	movs	r2, #5
1000ebc4:	4b52      	ldr	r3, [pc, #328]	; (1000ed10 <at_ble_init+0x160>)
1000ebc6:	2640      	movs	r6, #64	; 0x40
1000ebc8:	801a      	strh	r2, [r3, #0]
1000ebca:	2300      	movs	r3, #0
1000ebcc:	4a51      	ldr	r2, [pc, #324]	; (1000ed14 <at_ble_init+0x164>)
1000ebce:	6013      	str	r3, [r2, #0]
1000ebd0:	4a51      	ldr	r2, [pc, #324]	; (1000ed18 <at_ble_init+0x168>)
1000ebd2:	7013      	strb	r3, [r2, #0]
1000ebd4:	4a51      	ldr	r2, [pc, #324]	; (1000ed1c <at_ble_init+0x16c>)
1000ebd6:	7013      	strb	r3, [r2, #0]
1000ebd8:	4b51      	ldr	r3, [pc, #324]	; (1000ed20 <at_ble_init+0x170>)
1000ebda:	4798      	blx	r3
1000ebdc:	4b51      	ldr	r3, [pc, #324]	; (1000ed24 <at_ble_init+0x174>)
1000ebde:	4798      	blx	r3
1000ebe0:	4b51      	ldr	r3, [pc, #324]	; (1000ed28 <at_ble_init+0x178>)
1000ebe2:	4798      	blx	r3
1000ebe4:	4b51      	ldr	r3, [pc, #324]	; (1000ed2c <at_ble_init+0x17c>)
1000ebe6:	4798      	blx	r3
1000ebe8:	2c00      	cmp	r4, #0
1000ebea:	d100      	bne.n	1000ebee <at_ble_init+0x3e>
1000ebec:	e089      	b.n	1000ed02 <at_ble_init+0x152>
1000ebee:	68a3      	ldr	r3, [r4, #8]
1000ebf0:	2b00      	cmp	r3, #0
1000ebf2:	d100      	bne.n	1000ebf6 <at_ble_init+0x46>
1000ebf4:	e085      	b.n	1000ed02 <at_ble_init+0x152>
1000ebf6:	6923      	ldr	r3, [r4, #16]
1000ebf8:	2b00      	cmp	r3, #0
1000ebfa:	d100      	bne.n	1000ebfe <at_ble_init+0x4e>
1000ebfc:	e081      	b.n	1000ed02 <at_ble_init+0x152>
1000ebfe:	6820      	ldr	r0, [r4, #0]
1000ec00:	2800      	cmp	r0, #0
1000ec02:	d102      	bne.n	1000ec0a <at_ble_init+0x5a>
1000ec04:	6863      	ldr	r3, [r4, #4]
1000ec06:	2b00      	cmp	r3, #0
1000ec08:	d17b      	bne.n	1000ed02 <at_ble_init+0x152>
1000ec0a:	4b49      	ldr	r3, [pc, #292]	; (1000ed30 <at_ble_init+0x180>)
1000ec0c:	6861      	ldr	r1, [r4, #4]
1000ec0e:	4798      	blx	r3
1000ec10:	4b48      	ldr	r3, [pc, #288]	; (1000ed34 <at_ble_init+0x184>)
1000ec12:	4798      	blx	r3
1000ec14:	2801      	cmp	r0, #1
1000ec16:	d901      	bls.n	1000ec1c <at_ble_init+0x6c>
1000ec18:	26e2      	movs	r6, #226	; 0xe2
1000ec1a:	e072      	b.n	1000ed02 <at_ble_init+0x152>
1000ec1c:	4846      	ldr	r0, [pc, #280]	; (1000ed38 <at_ble_init+0x188>)
1000ec1e:	4b47      	ldr	r3, [pc, #284]	; (1000ed3c <at_ble_init+0x18c>)
1000ec20:	4798      	blx	r3
1000ec22:	2800      	cmp	r0, #0
1000ec24:	d1f8      	bne.n	1000ec18 <at_ble_init+0x68>
1000ec26:	1c20      	adds	r0, r4, #0
1000ec28:	4b45      	ldr	r3, [pc, #276]	; (1000ed40 <at_ble_init+0x190>)
1000ec2a:	4798      	blx	r3
1000ec2c:	68e0      	ldr	r0, [r4, #12]
1000ec2e:	68a1      	ldr	r1, [r4, #8]
1000ec30:	4b44      	ldr	r3, [pc, #272]	; (1000ed44 <at_ble_init+0x194>)
1000ec32:	4798      	blx	r3
1000ec34:	466b      	mov	r3, sp
1000ec36:	2201      	movs	r2, #1
1000ec38:	1cdc      	adds	r4, r3, #3
1000ec3a:	1c20      	adds	r0, r4, #0
1000ec3c:	a901      	add	r1, sp, #4
1000ec3e:	4252      	negs	r2, r2
1000ec40:	4b41      	ldr	r3, [pc, #260]	; (1000ed48 <at_ble_init+0x198>)
1000ec42:	4798      	blx	r3
1000ec44:	2800      	cmp	r0, #0
1000ec46:	d102      	bne.n	1000ec4e <at_ble_init+0x9e>
1000ec48:	7823      	ldrb	r3, [r4, #0]
1000ec4a:	2b39      	cmp	r3, #57	; 0x39
1000ec4c:	d1f2      	bne.n	1000ec34 <at_ble_init+0x84>
1000ec4e:	4b3f      	ldr	r3, [pc, #252]	; (1000ed4c <at_ble_init+0x19c>)
1000ec50:	4798      	blx	r3
1000ec52:	1e06      	subs	r6, r0, #0
1000ec54:	d155      	bne.n	1000ed02 <at_ble_init+0x152>
1000ec56:	1c03      	adds	r3, r0, #0
1000ec58:	2101      	movs	r1, #1
1000ec5a:	4a3d      	ldr	r2, [pc, #244]	; (1000ed50 <at_ble_init+0x1a0>)
1000ec5c:	4249      	negs	r1, r1
1000ec5e:	189a      	adds	r2, r3, r2
1000ec60:	3312      	adds	r3, #18
1000ec62:	8151      	strh	r1, [r2, #10]
1000ec64:	2b90      	cmp	r3, #144	; 0x90
1000ec66:	d1f7      	bne.n	1000ec58 <at_ble_init+0xa8>
1000ec68:	4c3a      	ldr	r4, [pc, #232]	; (1000ed54 <at_ble_init+0x1a4>)
1000ec6a:	3b81      	subs	r3, #129	; 0x81
1000ec6c:	7023      	strb	r3, [r4, #0]
1000ec6e:	4b3a      	ldr	r3, [pc, #232]	; (1000ed58 <at_ble_init+0x1a8>)
1000ec70:	4a3a      	ldr	r2, [pc, #232]	; (1000ed5c <at_ble_init+0x1ac>)
1000ec72:	8063      	strh	r3, [r4, #2]
1000ec74:	2300      	movs	r3, #0
1000ec76:	7123      	strb	r3, [r4, #4]
1000ec78:	3301      	adds	r3, #1
1000ec7a:	1e58      	subs	r0, r3, #1
1000ec7c:	0119      	lsls	r1, r3, #4
1000ec7e:	4301      	orrs	r1, r0
1000ec80:	3302      	adds	r3, #2
1000ec82:	7011      	strb	r1, [r2, #0]
1000ec84:	3201      	adds	r2, #1
1000ec86:	2b21      	cmp	r3, #33	; 0x21
1000ec88:	d1f7      	bne.n	1000ec7a <at_ble_init+0xca>
1000ec8a:	33e0      	adds	r3, #224	; 0xe0
1000ec8c:	33ff      	adds	r3, #255	; 0xff
1000ec8e:	84a3      	strh	r3, [r4, #36]	; 0x24
1000ec90:	1c23      	adds	r3, r4, #0
1000ec92:	2500      	movs	r5, #0
1000ec94:	3373      	adds	r3, #115	; 0x73
1000ec96:	701d      	strb	r5, [r3, #0]
1000ec98:	1c23      	adds	r3, r4, #0
1000ec9a:	3372      	adds	r3, #114	; 0x72
1000ec9c:	701d      	strb	r5, [r3, #0]
1000ec9e:	1c23      	adds	r3, r4, #0
1000eca0:	3376      	adds	r3, #118	; 0x76
1000eca2:	701d      	strb	r5, [r3, #0]
1000eca4:	1c23      	adds	r3, r4, #0
1000eca6:	33cc      	adds	r3, #204	; 0xcc
1000eca8:	801d      	strh	r5, [r3, #0]
1000ecaa:	1c22      	adds	r2, r4, #0
1000ecac:	23a0      	movs	r3, #160	; 0xa0
1000ecae:	32d0      	adds	r2, #208	; 0xd0
1000ecb0:	005b      	lsls	r3, r3, #1
1000ecb2:	8013      	strh	r3, [r2, #0]
1000ecb4:	1c22      	adds	r2, r4, #0
1000ecb6:	32ce      	adds	r2, #206	; 0xce
1000ecb8:	8013      	strh	r3, [r2, #0]
1000ecba:	1c23      	adds	r3, r4, #0
1000ecbc:	33d2      	adds	r3, #210	; 0xd2
1000ecbe:	801d      	strh	r5, [r3, #0]
1000ecc0:	22fa      	movs	r2, #250	; 0xfa
1000ecc2:	1c23      	adds	r3, r4, #0
1000ecc4:	0052      	lsls	r2, r2, #1
1000ecc6:	33d4      	adds	r3, #212	; 0xd4
1000ecc8:	801a      	strh	r2, [r3, #0]
1000ecca:	1c23      	adds	r3, r4, #0
1000eccc:	33d6      	adds	r3, #214	; 0xd6
1000ecce:	701d      	strb	r5, [r3, #0]
1000ecd0:	1c20      	adds	r0, r4, #0
1000ecd2:	4b23      	ldr	r3, [pc, #140]	; (1000ed60 <at_ble_init+0x1b0>)
1000ecd4:	76e5      	strb	r5, [r4, #27]
1000ecd6:	7725      	strb	r5, [r4, #28]
1000ecd8:	7765      	strb	r5, [r4, #29]
1000ecda:	77a5      	strb	r5, [r4, #30]
1000ecdc:	77e5      	strb	r5, [r4, #31]
1000ecde:	8425      	strh	r5, [r4, #32]
1000ece0:	8465      	strh	r5, [r4, #34]	; 0x22
1000ece2:	4798      	blx	r3
1000ece4:	1c23      	adds	r3, r4, #0
1000ece6:	2207      	movs	r2, #7
1000ece8:	3374      	adds	r3, #116	; 0x74
1000ecea:	701a      	strb	r2, [r3, #0]
1000ecec:	1c23      	adds	r3, r4, #0
1000ecee:	3204      	adds	r2, #4
1000ecf0:	33aa      	adds	r3, #170	; 0xaa
1000ecf2:	801a      	strh	r2, [r3, #0]
1000ecf4:	1c2b      	adds	r3, r5, #0
1000ecf6:	5d7a      	ldrb	r2, [r7, r5]
1000ecf8:	33ac      	adds	r3, #172	; 0xac
1000ecfa:	3501      	adds	r5, #1
1000ecfc:	54e2      	strb	r2, [r4, r3]
1000ecfe:	2d0b      	cmp	r5, #11
1000ed00:	d1f8      	bne.n	1000ecf4 <at_ble_init+0x144>
1000ed02:	1c30      	adds	r0, r6, #0
1000ed04:	b007      	add	sp, #28
1000ed06:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ed08:	1001af95 	.word	0x1001af95
1000ed0c:	100182cf 	.word	0x100182cf
1000ed10:	1001e198 	.word	0x1001e198
1000ed14:	1001d1cc 	.word	0x1001d1cc
1000ed18:	1001d12c 	.word	0x1001d12c
1000ed1c:	1001b621 	.word	0x1001b621
1000ed20:	1001095d 	.word	0x1001095d
1000ed24:	1000ee41 	.word	0x1000ee41
1000ed28:	1000eebd 	.word	0x1000eebd
1000ed2c:	1000f0dd 	.word	0x1000f0dd
1000ed30:	1000eef9 	.word	0x1000eef9
1000ed34:	1000c22d 	.word	0x1000c22d
1000ed38:	1000f3dd 	.word	0x1000f3dd
1000ed3c:	1000c49d 	.word	0x1000c49d
1000ed40:	1000f485 	.word	0x1000f485
1000ed44:	1000e29d 	.word	0x1000e29d
1000ed48:	1000e359 	.word	0x1000e359
1000ed4c:	1001004d 	.word	0x1001004d
1000ed50:	1001e19a 	.word	0x1001e19a
1000ed54:	1001e22a 	.word	0x1001e22a
1000ed58:	00003a98 	.word	0x00003a98
1000ed5c:	1001e235 	.word	0x1001e235
1000ed60:	1000eb21 	.word	0x1000eb21

1000ed64 <at_ble_addr_set>:
1000ed64:	b538      	push	{r3, r4, r5, lr}
1000ed66:	1c45      	adds	r5, r0, #1
1000ed68:	1c03      	adds	r3, r0, #0
1000ed6a:	20cf      	movs	r0, #207	; 0xcf
1000ed6c:	2d00      	cmp	r5, #0
1000ed6e:	d018      	beq.n	1000eda2 <at_ble_addr_set+0x3e>
1000ed70:	781a      	ldrb	r2, [r3, #0]
1000ed72:	2a03      	cmp	r2, #3
1000ed74:	d815      	bhi.n	1000eda2 <at_ble_addr_set+0x3e>
1000ed76:	2a01      	cmp	r2, #1
1000ed78:	d102      	bne.n	1000ed80 <at_ble_addr_set+0x1c>
1000ed7a:	785a      	ldrb	r2, [r3, #1]
1000ed7c:	2a00      	cmp	r2, #0
1000ed7e:	d010      	beq.n	1000eda2 <at_ble_addr_set+0x3e>
1000ed80:	1c1c      	adds	r4, r3, #0
1000ed82:	1c29      	adds	r1, r5, #0
1000ed84:	2206      	movs	r2, #6
1000ed86:	4b07      	ldr	r3, [pc, #28]	; (1000eda4 <at_ble_addr_set+0x40>)
1000ed88:	4807      	ldr	r0, [pc, #28]	; (1000eda8 <at_ble_addr_set+0x44>)
1000ed8a:	4798      	blx	r3
1000ed8c:	7823      	ldrb	r3, [r4, #0]
1000ed8e:	4807      	ldr	r0, [pc, #28]	; (1000edac <at_ble_addr_set+0x48>)
1000ed90:	7103      	strb	r3, [r0, #4]
1000ed92:	4b07      	ldr	r3, [pc, #28]	; (1000edb0 <at_ble_addr_set+0x4c>)
1000ed94:	4798      	blx	r3
1000ed96:	7823      	ldrb	r3, [r4, #0]
1000ed98:	2b00      	cmp	r3, #0
1000ed9a:	d102      	bne.n	1000eda2 <at_ble_addr_set+0x3e>
1000ed9c:	1c28      	adds	r0, r5, #0
1000ed9e:	4b05      	ldr	r3, [pc, #20]	; (1000edb4 <at_ble_addr_set+0x50>)
1000eda0:	4798      	blx	r3
1000eda2:	bd38      	pop	{r3, r4, r5, pc}
1000eda4:	100182cf 	.word	0x100182cf
1000eda8:	1001e22f 	.word	0x1001e22f
1000edac:	1001e22a 	.word	0x1001e22a
1000edb0:	1000eb21 	.word	0x1000eb21
1000edb4:	1000f509 	.word	0x1000f509

1000edb8 <at_ble_scan_stop>:
1000edb8:	b510      	push	{r4, lr}
1000edba:	4b05      	ldr	r3, [pc, #20]	; (1000edd0 <at_ble_scan_stop+0x18>)
1000edbc:	4798      	blx	r3
1000edbe:	1e04      	subs	r4, r0, #0
1000edc0:	d103      	bne.n	1000edca <at_ble_scan_stop+0x12>
1000edc2:	20d1      	movs	r0, #209	; 0xd1
1000edc4:	4b03      	ldr	r3, [pc, #12]	; (1000edd4 <at_ble_scan_stop+0x1c>)
1000edc6:	0100      	lsls	r0, r0, #4
1000edc8:	4798      	blx	r3
1000edca:	1c20      	adds	r0, r4, #0
1000edcc:	bd10      	pop	{r4, pc}
1000edce:	46c0      	nop			; (mov r8, r8)
1000edd0:	100102a5 	.word	0x100102a5
1000edd4:	1000ea31 	.word	0x1000ea31

1000edd8 <at_ble_disconnect>:
1000edd8:	b538      	push	{r3, r4, r5, lr}
1000edda:	1c04      	adds	r4, r0, #0
1000eddc:	4b04      	ldr	r3, [pc, #16]	; (1000edf0 <at_ble_disconnect+0x18>)
1000edde:	1c08      	adds	r0, r1, #0
1000ede0:	1c21      	adds	r1, r4, #0
1000ede2:	4798      	blx	r3
1000ede4:	1c05      	adds	r5, r0, #0
1000ede6:	4b03      	ldr	r3, [pc, #12]	; (1000edf4 <at_ble_disconnect+0x1c>)
1000ede8:	1c20      	adds	r0, r4, #0
1000edea:	4798      	blx	r3
1000edec:	1c28      	adds	r0, r5, #0
1000edee:	bd38      	pop	{r3, r4, r5, pc}
1000edf0:	1000f91d 	.word	0x1000f91d
1000edf4:	1000ea75 	.word	0x1000ea75

1000edf8 <at_ble_conn_update_reply>:
1000edf8:	b510      	push	{r4, lr}
1000edfa:	4c01      	ldr	r4, [pc, #4]	; (1000ee00 <at_ble_conn_update_reply+0x8>)
1000edfc:	47a0      	blx	r4
1000edfe:	bd10      	pop	{r4, pc}
1000ee00:	1000fe0d 	.word	0x1000fe0d

1000ee04 <at_ble_random_address_resolve>:
1000ee04:	b510      	push	{r4, lr}
1000ee06:	23cf      	movs	r3, #207	; 0xcf
1000ee08:	2800      	cmp	r0, #0
1000ee0a:	d00a      	beq.n	1000ee22 <at_ble_random_address_resolve+0x1e>
1000ee0c:	2900      	cmp	r1, #0
1000ee0e:	d008      	beq.n	1000ee22 <at_ble_random_address_resolve+0x1e>
1000ee10:	2a00      	cmp	r2, #0
1000ee12:	d006      	beq.n	1000ee22 <at_ble_random_address_resolve+0x1e>
1000ee14:	780c      	ldrb	r4, [r1, #0]
1000ee16:	2c02      	cmp	r4, #2
1000ee18:	d103      	bne.n	1000ee22 <at_ble_random_address_resolve+0x1e>
1000ee1a:	4b03      	ldr	r3, [pc, #12]	; (1000ee28 <at_ble_random_address_resolve+0x24>)
1000ee1c:	3101      	adds	r1, #1
1000ee1e:	4798      	blx	r3
1000ee20:	2300      	movs	r3, #0
1000ee22:	1c18      	adds	r0, r3, #0
1000ee24:	bd10      	pop	{r4, pc}
1000ee26:	46c0      	nop			; (mov r8, r8)
1000ee28:	10010501 	.word	0x10010501

1000ee2c <at_ble_uuid_len2type>:
1000ee2c:	1e83      	subs	r3, r0, #2
1000ee2e:	b2db      	uxtb	r3, r3
1000ee30:	2003      	movs	r0, #3
1000ee32:	2b0e      	cmp	r3, #14
1000ee34:	d801      	bhi.n	1000ee3a <at_ble_uuid_len2type+0xe>
1000ee36:	4a01      	ldr	r2, [pc, #4]	; (1000ee3c <at_ble_uuid_len2type+0x10>)
1000ee38:	5cd0      	ldrb	r0, [r2, r3]
1000ee3a:	4770      	bx	lr
1000ee3c:	1001afa0 	.word	0x1001afa0

1000ee40 <init_gatt_client_module>:
1000ee40:	2200      	movs	r2, #0
1000ee42:	4b01      	ldr	r3, [pc, #4]	; (1000ee48 <init_gatt_client_module+0x8>)
1000ee44:	801a      	strh	r2, [r3, #0]
1000ee46:	4770      	bx	lr
1000ee48:	1001d124 	.word	0x1001d124

1000ee4c <db_searchATT>:
1000ee4c:	b570      	push	{r4, r5, r6, lr}
1000ee4e:	1c05      	adds	r5, r0, #0
1000ee50:	2400      	movs	r4, #0
1000ee52:	4b0c      	ldr	r3, [pc, #48]	; (1000ee84 <db_searchATT+0x38>)
1000ee54:	6819      	ldr	r1, [r3, #0]
1000ee56:	4b0c      	ldr	r3, [pc, #48]	; (1000ee88 <db_searchATT+0x3c>)
1000ee58:	681e      	ldr	r6, [r3, #0]
1000ee5a:	428c      	cmp	r4, r1
1000ee5c:	dc10      	bgt.n	1000ee80 <db_searchATT+0x34>
1000ee5e:	200c      	movs	r0, #12
1000ee60:	1863      	adds	r3, r4, r1
1000ee62:	0fda      	lsrs	r2, r3, #31
1000ee64:	18d3      	adds	r3, r2, r3
1000ee66:	1c02      	adds	r2, r0, #0
1000ee68:	105b      	asrs	r3, r3, #1
1000ee6a:	435a      	muls	r2, r3
1000ee6c:	18b0      	adds	r0, r6, r2
1000ee6e:	8802      	ldrh	r2, [r0, #0]
1000ee70:	42aa      	cmp	r2, r5
1000ee72:	d201      	bcs.n	1000ee78 <db_searchATT+0x2c>
1000ee74:	1e59      	subs	r1, r3, #1
1000ee76:	e7f0      	b.n	1000ee5a <db_searchATT+0xe>
1000ee78:	42aa      	cmp	r2, r5
1000ee7a:	d902      	bls.n	1000ee82 <db_searchATT+0x36>
1000ee7c:	1c5c      	adds	r4, r3, #1
1000ee7e:	e7ec      	b.n	1000ee5a <db_searchATT+0xe>
1000ee80:	2000      	movs	r0, #0
1000ee82:	bd70      	pop	{r4, r5, r6, pc}
1000ee84:	1001d138 	.word	0x1001d138
1000ee88:	1001d130 	.word	0x1001d130

1000ee8c <at_ble_read_authorize_reply.part.1>:
1000ee8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000ee8e:	4b09      	ldr	r3, [pc, #36]	; (1000eeb4 <at_ble_read_authorize_reply.part.1+0x28>)
1000ee90:	1c05      	adds	r5, r0, #0
1000ee92:	1c08      	adds	r0, r1, #0
1000ee94:	1c0c      	adds	r4, r1, #0
1000ee96:	4798      	blx	r3
1000ee98:	2800      	cmp	r0, #0
1000ee9a:	d009      	beq.n	1000eeb0 <at_ble_read_authorize_reply.part.1+0x24>
1000ee9c:	6882      	ldr	r2, [r0, #8]
1000ee9e:	2a00      	cmp	r2, #0
1000eea0:	d006      	beq.n	1000eeb0 <at_ble_read_authorize_reply.part.1+0x24>
1000eea2:	8883      	ldrh	r3, [r0, #4]
1000eea4:	1c29      	adds	r1, r5, #0
1000eea6:	9200      	str	r2, [sp, #0]
1000eea8:	1c20      	adds	r0, r4, #0
1000eeaa:	2200      	movs	r2, #0
1000eeac:	4c02      	ldr	r4, [pc, #8]	; (1000eeb8 <at_ble_read_authorize_reply.part.1+0x2c>)
1000eeae:	47a0      	blx	r4
1000eeb0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000eeb2:	46c0      	nop			; (mov r8, r8)
1000eeb4:	1000ee4d 	.word	0x1000ee4d
1000eeb8:	100105fd 	.word	0x100105fd

1000eebc <initi_gatt_server_module>:
1000eebc:	2300      	movs	r3, #0
1000eebe:	4a07      	ldr	r2, [pc, #28]	; (1000eedc <initi_gatt_server_module+0x20>)
1000eec0:	7013      	strb	r3, [r2, #0]
1000eec2:	4a07      	ldr	r2, [pc, #28]	; (1000eee0 <initi_gatt_server_module+0x24>)
1000eec4:	6013      	str	r3, [r2, #0]
1000eec6:	4a07      	ldr	r2, [pc, #28]	; (1000eee4 <initi_gatt_server_module+0x28>)
1000eec8:	6013      	str	r3, [r2, #0]
1000eeca:	4a07      	ldr	r2, [pc, #28]	; (1000eee8 <initi_gatt_server_module+0x2c>)
1000eecc:	6013      	str	r3, [r2, #0]
1000eece:	4a07      	ldr	r2, [pc, #28]	; (1000eeec <initi_gatt_server_module+0x30>)
1000eed0:	6013      	str	r3, [r2, #0]
1000eed2:	4a07      	ldr	r2, [pc, #28]	; (1000eef0 <initi_gatt_server_module+0x34>)
1000eed4:	6013      	str	r3, [r2, #0]
1000eed6:	4a07      	ldr	r2, [pc, #28]	; (1000eef4 <initi_gatt_server_module+0x38>)
1000eed8:	6013      	str	r3, [r2, #0]
1000eeda:	4770      	bx	lr
1000eedc:	1001d12c 	.word	0x1001d12c
1000eee0:	1001d13c 	.word	0x1001d13c
1000eee4:	1001d138 	.word	0x1001d138
1000eee8:	1001d128 	.word	0x1001d128
1000eeec:	1001d134 	.word	0x1001d134
1000eef0:	1001d130 	.word	0x1001d130
1000eef4:	1001d140 	.word	0x1001d140

1000eef8 <db_init>:
1000eef8:	4b0a      	ldr	r3, [pc, #40]	; (1000ef24 <db_init+0x2c>)
1000eefa:	4a0b      	ldr	r2, [pc, #44]	; (1000ef28 <db_init+0x30>)
1000eefc:	6018      	str	r0, [r3, #0]
1000eefe:	084b      	lsrs	r3, r1, #1
1000ef00:	6013      	str	r3, [r2, #0]
1000ef02:	4a0a      	ldr	r2, [pc, #40]	; (1000ef2c <db_init+0x34>)
1000ef04:	18c3      	adds	r3, r0, r3
1000ef06:	6013      	str	r3, [r2, #0]
1000ef08:	4a09      	ldr	r2, [pc, #36]	; (1000ef30 <db_init+0x38>)
1000ef0a:	1841      	adds	r1, r0, r1
1000ef0c:	6013      	str	r3, [r2, #0]
1000ef0e:	2303      	movs	r3, #3
1000ef10:	2200      	movs	r2, #0
1000ef12:	3103      	adds	r1, #3
1000ef14:	4399      	bics	r1, r3
1000ef16:	4b07      	ldr	r3, [pc, #28]	; (1000ef34 <db_init+0x3c>)
1000ef18:	3904      	subs	r1, #4
1000ef1a:	6019      	str	r1, [r3, #0]
1000ef1c:	4b06      	ldr	r3, [pc, #24]	; (1000ef38 <db_init+0x40>)
1000ef1e:	601a      	str	r2, [r3, #0]
1000ef20:	4770      	bx	lr
1000ef22:	46c0      	nop			; (mov r8, r8)
1000ef24:	1001d140 	.word	0x1001d140
1000ef28:	1001d13c 	.word	0x1001d13c
1000ef2c:	1001d128 	.word	0x1001d128
1000ef30:	1001d134 	.word	0x1001d134
1000ef34:	1001d130 	.word	0x1001d130
1000ef38:	1001d138 	.word	0x1001d138

1000ef3c <at_ble_characteristic_value_set>:
1000ef3c:	b570      	push	{r4, r5, r6, lr}
1000ef3e:	4b0b      	ldr	r3, [pc, #44]	; (1000ef6c <at_ble_characteristic_value_set+0x30>)
1000ef40:	1c06      	adds	r6, r0, #0
1000ef42:	1c0c      	adds	r4, r1, #0
1000ef44:	1c15      	adds	r5, r2, #0
1000ef46:	4798      	blx	r3
1000ef48:	2800      	cmp	r0, #0
1000ef4a:	d008      	beq.n	1000ef5e <at_ble_characteristic_value_set+0x22>
1000ef4c:	6880      	ldr	r0, [r0, #8]
1000ef4e:	2800      	cmp	r0, #0
1000ef50:	d005      	beq.n	1000ef5e <at_ble_characteristic_value_set+0x22>
1000ef52:	1c21      	adds	r1, r4, #0
1000ef54:	1c2a      	adds	r2, r5, #0
1000ef56:	4b06      	ldr	r3, [pc, #24]	; (1000ef70 <at_ble_characteristic_value_set+0x34>)
1000ef58:	4798      	blx	r3
1000ef5a:	2000      	movs	r0, #0
1000ef5c:	e004      	b.n	1000ef68 <at_ble_characteristic_value_set+0x2c>
1000ef5e:	1c30      	adds	r0, r6, #0
1000ef60:	1c29      	adds	r1, r5, #0
1000ef62:	1c22      	adds	r2, r4, #0
1000ef64:	4b03      	ldr	r3, [pc, #12]	; (1000ef74 <at_ble_characteristic_value_set+0x38>)
1000ef66:	4798      	blx	r3
1000ef68:	bd70      	pop	{r4, r5, r6, pc}
1000ef6a:	46c0      	nop			; (mov r8, r8)
1000ef6c:	1000ee4d 	.word	0x1000ee4d
1000ef70:	100182cf 	.word	0x100182cf
1000ef74:	10010971 	.word	0x10010971

1000ef78 <at_ble_characteristic_value_get>:
1000ef78:	b570      	push	{r4, r5, r6, lr}
1000ef7a:	4b0c      	ldr	r3, [pc, #48]	; (1000efac <at_ble_characteristic_value_get+0x34>)
1000ef7c:	1c06      	adds	r6, r0, #0
1000ef7e:	1c0c      	adds	r4, r1, #0
1000ef80:	1c15      	adds	r5, r2, #0
1000ef82:	4798      	blx	r3
1000ef84:	2800      	cmp	r0, #0
1000ef86:	d00b      	beq.n	1000efa0 <at_ble_characteristic_value_get+0x28>
1000ef88:	6883      	ldr	r3, [r0, #8]
1000ef8a:	2b00      	cmp	r3, #0
1000ef8c:	d008      	beq.n	1000efa0 <at_ble_characteristic_value_get+0x28>
1000ef8e:	8883      	ldrh	r3, [r0, #4]
1000ef90:	802b      	strh	r3, [r5, #0]
1000ef92:	8882      	ldrh	r2, [r0, #4]
1000ef94:	6881      	ldr	r1, [r0, #8]
1000ef96:	4b06      	ldr	r3, [pc, #24]	; (1000efb0 <at_ble_characteristic_value_get+0x38>)
1000ef98:	1c20      	adds	r0, r4, #0
1000ef9a:	4798      	blx	r3
1000ef9c:	2000      	movs	r0, #0
1000ef9e:	e004      	b.n	1000efaa <at_ble_characteristic_value_get+0x32>
1000efa0:	1c30      	adds	r0, r6, #0
1000efa2:	1c29      	adds	r1, r5, #0
1000efa4:	1c22      	adds	r2, r4, #0
1000efa6:	4b03      	ldr	r3, [pc, #12]	; (1000efb4 <at_ble_characteristic_value_get+0x3c>)
1000efa8:	4798      	blx	r3
1000efaa:	bd70      	pop	{r4, r5, r6, pc}
1000efac:	1000ee4d 	.word	0x1000ee4d
1000efb0:	100182cf 	.word	0x100182cf
1000efb4:	100109fd 	.word	0x100109fd

1000efb8 <at_ble_write_authorize_reply>:
1000efb8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000efba:	b085      	sub	sp, #20
1000efbc:	1c04      	adds	r4, r0, #0
1000efbe:	9101      	str	r1, [sp, #4]
1000efc0:	2900      	cmp	r1, #0
1000efc2:	d128      	bne.n	1000f016 <at_ble_write_authorize_reply+0x5e>
1000efc4:	8843      	ldrh	r3, [r0, #2]
1000efc6:	1c27      	adds	r7, r4, #0
1000efc8:	9300      	str	r3, [sp, #0]
1000efca:	1c18      	adds	r0, r3, #0
1000efcc:	4b16      	ldr	r3, [pc, #88]	; (1000f028 <at_ble_write_authorize_reply+0x70>)
1000efce:	4798      	blx	r3
1000efd0:	3708      	adds	r7, #8
1000efd2:	2800      	cmp	r0, #0
1000efd4:	d009      	beq.n	1000efea <at_ble_write_authorize_reply+0x32>
1000efd6:	6880      	ldr	r0, [r0, #8]
1000efd8:	2800      	cmp	r0, #0
1000efda:	d006      	beq.n	1000efea <at_ble_write_authorize_reply+0x32>
1000efdc:	88a3      	ldrh	r3, [r4, #4]
1000efde:	88e2      	ldrh	r2, [r4, #6]
1000efe0:	18c0      	adds	r0, r0, r3
1000efe2:	1c39      	adds	r1, r7, #0
1000efe4:	4b11      	ldr	r3, [pc, #68]	; (1000f02c <at_ble_write_authorize_reply+0x74>)
1000efe6:	4798      	blx	r3
1000efe8:	e015      	b.n	1000f016 <at_ble_write_authorize_reply+0x5e>
1000efea:	ab02      	add	r3, sp, #8
1000efec:	1d9e      	adds	r6, r3, #6
1000efee:	2300      	movs	r3, #0
1000eff0:	4d0f      	ldr	r5, [pc, #60]	; (1000f030 <at_ble_write_authorize_reply+0x78>)
1000eff2:	8033      	strh	r3, [r6, #0]
1000eff4:	6829      	ldr	r1, [r5, #0]
1000eff6:	1c32      	adds	r2, r6, #0
1000eff8:	4b0e      	ldr	r3, [pc, #56]	; (1000f034 <at_ble_write_authorize_reply+0x7c>)
1000effa:	9800      	ldr	r0, [sp, #0]
1000effc:	4798      	blx	r3
1000effe:	682b      	ldr	r3, [r5, #0]
1000f000:	88a0      	ldrh	r0, [r4, #4]
1000f002:	88e2      	ldrh	r2, [r4, #6]
1000f004:	1818      	adds	r0, r3, r0
1000f006:	1c39      	adds	r1, r7, #0
1000f008:	4b08      	ldr	r3, [pc, #32]	; (1000f02c <at_ble_write_authorize_reply+0x74>)
1000f00a:	4798      	blx	r3
1000f00c:	8860      	ldrh	r0, [r4, #2]
1000f00e:	8832      	ldrh	r2, [r6, #0]
1000f010:	6829      	ldr	r1, [r5, #0]
1000f012:	4b09      	ldr	r3, [pc, #36]	; (1000f038 <at_ble_write_authorize_reply+0x80>)
1000f014:	4798      	blx	r3
1000f016:	8860      	ldrh	r0, [r4, #2]
1000f018:	8821      	ldrh	r1, [r4, #0]
1000f01a:	9a01      	ldr	r2, [sp, #4]
1000f01c:	4b07      	ldr	r3, [pc, #28]	; (1000f03c <at_ble_write_authorize_reply+0x84>)
1000f01e:	4798      	blx	r3
1000f020:	2000      	movs	r0, #0
1000f022:	b005      	add	sp, #20
1000f024:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f026:	46c0      	nop			; (mov r8, r8)
1000f028:	1000ee4d 	.word	0x1000ee4d
1000f02c:	100182cf 	.word	0x100182cf
1000f030:	1001b624 	.word	0x1001b624
1000f034:	1000ef79 	.word	0x1000ef79
1000f038:	1000ef3d 	.word	0x1000ef3d
1000f03c:	10010669 	.word	0x10010669

1000f040 <gatts_handle_read_req>:
1000f040:	b538      	push	{r3, r4, r5, lr}
1000f042:	1c0c      	adds	r4, r1, #0
1000f044:	4b07      	ldr	r3, [pc, #28]	; (1000f064 <gatts_handle_read_req+0x24>)
1000f046:	4798      	blx	r3
1000f048:	8865      	ldrh	r5, [r4, #2]
1000f04a:	4b07      	ldr	r3, [pc, #28]	; (1000f068 <gatts_handle_read_req+0x28>)
1000f04c:	1c28      	adds	r0, r5, #0
1000f04e:	4798      	blx	r3
1000f050:	7883      	ldrb	r3, [r0, #2]
1000f052:	2026      	movs	r0, #38	; 0x26
1000f054:	07db      	lsls	r3, r3, #31
1000f056:	d404      	bmi.n	1000f062 <gatts_handle_read_req+0x22>
1000f058:	8820      	ldrh	r0, [r4, #0]
1000f05a:	1c29      	adds	r1, r5, #0
1000f05c:	4b03      	ldr	r3, [pc, #12]	; (1000f06c <gatts_handle_read_req+0x2c>)
1000f05e:	4798      	blx	r3
1000f060:	203b      	movs	r0, #59	; 0x3b
1000f062:	bd38      	pop	{r3, r4, r5, pc}
1000f064:	100105ad 	.word	0x100105ad
1000f068:	1000ee4d 	.word	0x1000ee4d
1000f06c:	1000ee8d 	.word	0x1000ee8d

1000f070 <gatts_handle_att_info_req>:
1000f070:	b538      	push	{r3, r4, r5, lr}
1000f072:	1c0d      	adds	r5, r1, #0
1000f074:	4b0a      	ldr	r3, [pc, #40]	; (1000f0a0 <gatts_handle_att_info_req+0x30>)
1000f076:	1c14      	adds	r4, r2, #0
1000f078:	4798      	blx	r3
1000f07a:	882d      	ldrh	r5, [r5, #0]
1000f07c:	4b09      	ldr	r3, [pc, #36]	; (1000f0a4 <gatts_handle_att_info_req+0x34>)
1000f07e:	1c28      	adds	r0, r5, #0
1000f080:	4798      	blx	r3
1000f082:	0a22      	lsrs	r2, r4, #8
1000f084:	1c03      	adds	r3, r0, #0
1000f086:	4c08      	ldr	r4, [pc, #32]	; (1000f0a8 <gatts_handle_att_info_req+0x38>)
1000f088:	b291      	uxth	r1, r2
1000f08a:	2800      	cmp	r0, #0
1000f08c:	d003      	beq.n	1000f096 <gatts_handle_att_info_req+0x26>
1000f08e:	8882      	ldrh	r2, [r0, #4]
1000f090:	2300      	movs	r3, #0
1000f092:	1c28      	adds	r0, r5, #0
1000f094:	e001      	b.n	1000f09a <gatts_handle_att_info_req+0x2a>
1000f096:	1c28      	adds	r0, r5, #0
1000f098:	2201      	movs	r2, #1
1000f09a:	47a0      	blx	r4
1000f09c:	203b      	movs	r0, #59	; 0x3b
1000f09e:	bd38      	pop	{r3, r4, r5, pc}
1000f0a0:	100105f1 	.word	0x100105f1
1000f0a4:	1000ee4d 	.word	0x1000ee4d
1000f0a8:	100106ad 	.word	0x100106ad

1000f0ac <gatts_handle_write_req>:
1000f0ac:	b510      	push	{r4, lr}
1000f0ae:	1c14      	adds	r4, r2, #0
1000f0b0:	4b07      	ldr	r3, [pc, #28]	; (1000f0d0 <gatts_handle_write_req+0x24>)
1000f0b2:	4798      	blx	r3
1000f0b4:	4b07      	ldr	r3, [pc, #28]	; (1000f0d4 <gatts_handle_write_req+0x28>)
1000f0b6:	8860      	ldrh	r0, [r4, #2]
1000f0b8:	4798      	blx	r3
1000f0ba:	2302      	movs	r3, #2
1000f0bc:	7881      	ldrb	r1, [r0, #2]
1000f0be:	2022      	movs	r0, #34	; 0x22
1000f0c0:	4019      	ands	r1, r3
1000f0c2:	d103      	bne.n	1000f0cc <gatts_handle_write_req+0x20>
1000f0c4:	1c20      	adds	r0, r4, #0
1000f0c6:	4b04      	ldr	r3, [pc, #16]	; (1000f0d8 <gatts_handle_write_req+0x2c>)
1000f0c8:	4798      	blx	r3
1000f0ca:	201f      	movs	r0, #31
1000f0cc:	bd10      	pop	{r4, pc}
1000f0ce:	46c0      	nop			; (mov r8, r8)
1000f0d0:	100105b9 	.word	0x100105b9
1000f0d4:	1000ee4d 	.word	0x1000ee4d
1000f0d8:	1000efb9 	.word	0x1000efb9

1000f0dc <init_l2cc_task_module>:
1000f0dc:	220a      	movs	r2, #10
1000f0de:	4b01      	ldr	r3, [pc, #4]	; (1000f0e4 <init_l2cc_task_module+0x8>)
1000f0e0:	701a      	strb	r2, [r3, #0]
1000f0e2:	4770      	bx	lr
1000f0e4:	1001b621 	.word	0x1001b621

1000f0e8 <l2cc_data_send_rsp_handler>:
1000f0e8:	b510      	push	{r4, lr}
1000f0ea:	7802      	ldrb	r2, [r0, #0]
1000f0ec:	700a      	strb	r2, [r1, #0]
1000f0ee:	7883      	ldrb	r3, [r0, #2]
1000f0f0:	7844      	ldrb	r4, [r0, #1]
1000f0f2:	021b      	lsls	r3, r3, #8
1000f0f4:	4323      	orrs	r3, r4
1000f0f6:	804b      	strh	r3, [r1, #2]
1000f0f8:	7903      	ldrb	r3, [r0, #4]
1000f0fa:	78c0      	ldrb	r0, [r0, #3]
1000f0fc:	021b      	lsls	r3, r3, #8
1000f0fe:	4303      	orrs	r3, r0
1000f100:	808b      	strh	r3, [r1, #4]
1000f102:	2a00      	cmp	r2, #0
1000f104:	d103      	bne.n	1000f10e <l2cc_data_send_rsp_handler+0x26>
1000f106:	4a02      	ldr	r2, [pc, #8]	; (1000f110 <l2cc_data_send_rsp_handler+0x28>)
1000f108:	7813      	ldrb	r3, [r2, #0]
1000f10a:	3301      	adds	r3, #1
1000f10c:	7013      	strb	r3, [r2, #0]
1000f10e:	bd10      	pop	{r4, pc}
1000f110:	1001b621 	.word	0x1001b621

1000f114 <l2cc_data_received_handler>:
1000f114:	b508      	push	{r3, lr}
1000f116:	1c03      	adds	r3, r0, #0
1000f118:	7842      	ldrb	r2, [r0, #1]
1000f11a:	7800      	ldrb	r0, [r0, #0]
1000f11c:	0212      	lsls	r2, r2, #8
1000f11e:	4302      	orrs	r2, r0
1000f120:	800a      	strh	r2, [r1, #0]
1000f122:	78da      	ldrb	r2, [r3, #3]
1000f124:	7898      	ldrb	r0, [r3, #2]
1000f126:	0212      	lsls	r2, r2, #8
1000f128:	4302      	orrs	r2, r0
1000f12a:	804a      	strh	r2, [r1, #2]
1000f12c:	795a      	ldrb	r2, [r3, #5]
1000f12e:	7918      	ldrb	r0, [r3, #4]
1000f130:	0212      	lsls	r2, r2, #8
1000f132:	4302      	orrs	r2, r0
1000f134:	808a      	strh	r2, [r1, #4]
1000f136:	1d88      	adds	r0, r1, #6
1000f138:	1d99      	adds	r1, r3, #6
1000f13a:	4b01      	ldr	r3, [pc, #4]	; (1000f140 <l2cc_data_received_handler+0x2c>)
1000f13c:	4798      	blx	r3
1000f13e:	bd08      	pop	{r3, pc}
1000f140:	100182cf 	.word	0x100182cf

1000f144 <at_ble_authenticate>:
1000f144:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f146:	1c0c      	adds	r4, r1, #0
1000f148:	211f      	movs	r1, #31
1000f14a:	b08b      	sub	sp, #44	; 0x2c
1000f14c:	9307      	str	r3, [sp, #28]
1000f14e:	ab02      	add	r3, sp, #8
1000f150:	18c9      	adds	r1, r1, r3
1000f152:	230f      	movs	r3, #15
1000f154:	700b      	strb	r3, [r1, #0]
1000f156:	4b40      	ldr	r3, [pc, #256]	; (1000f258 <at_ble_authenticate+0x114>)
1000f158:	1c05      	adds	r5, r0, #0
1000f15a:	1c16      	adds	r6, r2, #0
1000f15c:	4798      	blx	r3
1000f15e:	1c07      	adds	r7, r0, #0
1000f160:	2001      	movs	r0, #1
1000f162:	2f07      	cmp	r7, #7
1000f164:	d875      	bhi.n	1000f252 <at_ble_authenticate+0x10e>
1000f166:	2c00      	cmp	r4, #0
1000f168:	d113      	bne.n	1000f192 <at_ble_authenticate+0x4e>
1000f16a:	2312      	movs	r3, #18
1000f16c:	435f      	muls	r7, r3
1000f16e:	4b3b      	ldr	r3, [pc, #236]	; (1000f25c <at_ble_authenticate+0x118>)
1000f170:	5cfb      	ldrb	r3, [r7, r3]
1000f172:	4283      	cmp	r3, r0
1000f174:	d001      	beq.n	1000f17a <at_ble_authenticate+0x36>
1000f176:	20cf      	movs	r0, #207	; 0xcf
1000f178:	e06b      	b.n	1000f252 <at_ble_authenticate+0x10e>
1000f17a:	9504      	str	r5, [sp, #16]
1000f17c:	9400      	str	r4, [sp, #0]
1000f17e:	9401      	str	r4, [sp, #4]
1000f180:	9402      	str	r4, [sp, #8]
1000f182:	9403      	str	r4, [sp, #12]
1000f184:	1c20      	adds	r0, r4, #0
1000f186:	1c21      	adds	r1, r4, #0
1000f188:	1c22      	adds	r2, r4, #0
1000f18a:	1c23      	adds	r3, r4, #0
1000f18c:	4d34      	ldr	r5, [pc, #208]	; (1000f260 <at_ble_authenticate+0x11c>)
1000f18e:	47a8      	blx	r5
1000f190:	e05e      	b.n	1000f250 <at_ble_authenticate+0x10c>
1000f192:	7922      	ldrb	r2, [r4, #4]
1000f194:	2a06      	cmp	r2, #6
1000f196:	d9ee      	bls.n	1000f176 <at_ble_authenticate+0x32>
1000f198:	7963      	ldrb	r3, [r4, #5]
1000f19a:	2b10      	cmp	r3, #16
1000f19c:	d8eb      	bhi.n	1000f176 <at_ble_authenticate+0x32>
1000f19e:	429a      	cmp	r2, r3
1000f1a0:	d8e9      	bhi.n	1000f176 <at_ble_authenticate+0x32>
1000f1a2:	7a23      	ldrb	r3, [r4, #8]
1000f1a4:	2b04      	cmp	r3, #4
1000f1a6:	d8e6      	bhi.n	1000f176 <at_ble_authenticate+0x32>
1000f1a8:	79a3      	ldrb	r3, [r4, #6]
1000f1aa:	2b07      	cmp	r3, #7
1000f1ac:	d8e3      	bhi.n	1000f176 <at_ble_authenticate+0x32>
1000f1ae:	79e3      	ldrb	r3, [r4, #7]
1000f1b0:	2b07      	cmp	r3, #7
1000f1b2:	d8e0      	bhi.n	1000f176 <at_ble_authenticate+0x32>
1000f1b4:	78a3      	ldrb	r3, [r4, #2]
1000f1b6:	2b00      	cmp	r3, #0
1000f1b8:	d006      	beq.n	1000f1c8 <at_ble_authenticate+0x84>
1000f1ba:	2e00      	cmp	r6, #0
1000f1bc:	d0db      	beq.n	1000f176 <at_ble_authenticate+0x32>
1000f1be:	4829      	ldr	r0, [pc, #164]	; (1000f264 <at_ble_authenticate+0x120>)
1000f1c0:	1c31      	adds	r1, r6, #0
1000f1c2:	221c      	movs	r2, #28
1000f1c4:	4b28      	ldr	r3, [pc, #160]	; (1000f268 <at_ble_authenticate+0x124>)
1000f1c6:	4798      	blx	r3
1000f1c8:	9b07      	ldr	r3, [sp, #28]
1000f1ca:	2b00      	cmp	r3, #0
1000f1cc:	d005      	beq.n	1000f1da <at_ble_authenticate+0x96>
1000f1ce:	4827      	ldr	r0, [pc, #156]	; (1000f26c <at_ble_authenticate+0x128>)
1000f1d0:	1c19      	adds	r1, r3, #0
1000f1d2:	309a      	adds	r0, #154	; 0x9a
1000f1d4:	2210      	movs	r2, #16
1000f1d6:	4b24      	ldr	r3, [pc, #144]	; (1000f268 <at_ble_authenticate+0x124>)
1000f1d8:	4798      	blx	r3
1000f1da:	7863      	ldrb	r3, [r4, #1]
1000f1dc:	78a2      	ldrb	r2, [r4, #2]
1000f1de:	009b      	lsls	r3, r3, #2
1000f1e0:	4313      	orrs	r3, r2
1000f1e2:	2212      	movs	r2, #18
1000f1e4:	4357      	muls	r7, r2
1000f1e6:	4a1d      	ldr	r2, [pc, #116]	; (1000f25c <at_ble_authenticate+0x118>)
1000f1e8:	b2db      	uxtb	r3, r3
1000f1ea:	5cba      	ldrb	r2, [r7, r2]
1000f1ec:	2a00      	cmp	r2, #0
1000f1ee:	d116      	bne.n	1000f21e <at_ble_authenticate+0xda>
1000f1f0:	79a0      	ldrb	r0, [r4, #6]
1000f1f2:	0742      	lsls	r2, r0, #29
1000f1f4:	d502      	bpl.n	1000f1fc <at_ble_authenticate+0xb8>
1000f1f6:	9a07      	ldr	r2, [sp, #28]
1000f1f8:	2a00      	cmp	r2, #0
1000f1fa:	d0bc      	beq.n	1000f176 <at_ble_authenticate+0x32>
1000f1fc:	07c2      	lsls	r2, r0, #31
1000f1fe:	d501      	bpl.n	1000f204 <at_ble_authenticate+0xc0>
1000f200:	2e00      	cmp	r6, #0
1000f202:	d0b8      	beq.n	1000f176 <at_ble_authenticate+0x32>
1000f204:	7966      	ldrb	r6, [r4, #5]
1000f206:	7821      	ldrb	r1, [r4, #0]
1000f208:	78e2      	ldrb	r2, [r4, #3]
1000f20a:	9600      	str	r6, [sp, #0]
1000f20c:	9001      	str	r0, [sp, #4]
1000f20e:	79e0      	ldrb	r0, [r4, #7]
1000f210:	9002      	str	r0, [sp, #8]
1000f212:	7a20      	ldrb	r0, [r4, #8]
1000f214:	4c16      	ldr	r4, [pc, #88]	; (1000f270 <at_ble_authenticate+0x12c>)
1000f216:	9003      	str	r0, [sp, #12]
1000f218:	1c28      	adds	r0, r5, #0
1000f21a:	47a0      	blx	r4
1000f21c:	e018      	b.n	1000f250 <at_ble_authenticate+0x10c>
1000f21e:	2a01      	cmp	r2, #1
1000f220:	d1a9      	bne.n	1000f176 <at_ble_authenticate+0x32>
1000f222:	79e0      	ldrb	r0, [r4, #7]
1000f224:	0742      	lsls	r2, r0, #29
1000f226:	d502      	bpl.n	1000f22e <at_ble_authenticate+0xea>
1000f228:	9a07      	ldr	r2, [sp, #28]
1000f22a:	2a00      	cmp	r2, #0
1000f22c:	d0a3      	beq.n	1000f176 <at_ble_authenticate+0x32>
1000f22e:	07c2      	lsls	r2, r0, #31
1000f230:	d501      	bpl.n	1000f236 <at_ble_authenticate+0xf2>
1000f232:	2e00      	cmp	r6, #0
1000f234:	d09f      	beq.n	1000f176 <at_ble_authenticate+0x32>
1000f236:	7966      	ldrb	r6, [r4, #5]
1000f238:	7821      	ldrb	r1, [r4, #0]
1000f23a:	78e2      	ldrb	r2, [r4, #3]
1000f23c:	9600      	str	r6, [sp, #0]
1000f23e:	79a6      	ldrb	r6, [r4, #6]
1000f240:	9002      	str	r0, [sp, #8]
1000f242:	9601      	str	r6, [sp, #4]
1000f244:	7a20      	ldrb	r0, [r4, #8]
1000f246:	9504      	str	r5, [sp, #16]
1000f248:	9003      	str	r0, [sp, #12]
1000f24a:	4c05      	ldr	r4, [pc, #20]	; (1000f260 <at_ble_authenticate+0x11c>)
1000f24c:	2001      	movs	r0, #1
1000f24e:	47a0      	blx	r4
1000f250:	2000      	movs	r0, #0
1000f252:	b00b      	add	sp, #44	; 0x2c
1000f254:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f256:	46c0      	nop			; (mov r8, r8)
1000f258:	1000f645 	.word	0x1000f645
1000f25c:	1001e19a 	.word	0x1001e19a
1000f260:	1000fbb5 	.word	0x1000fbb5
1000f264:	1001e2a8 	.word	0x1001e2a8
1000f268:	100182cf 	.word	0x100182cf
1000f26c:	1001e22a 	.word	0x1001e22a
1000f270:	1000f995 	.word	0x1000f995

1000f274 <at_ble_pair_key_reply>:
1000f274:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f276:	b085      	sub	sp, #20
1000f278:	1c05      	adds	r5, r0, #0
1000f27a:	1c0c      	adds	r4, r1, #0
1000f27c:	1c16      	adds	r6, r2, #0
1000f27e:	2100      	movs	r1, #0
1000f280:	4668      	mov	r0, sp
1000f282:	2210      	movs	r2, #16
1000f284:	4b18      	ldr	r3, [pc, #96]	; (1000f2e8 <at_ble_pair_key_reply+0x74>)
1000f286:	4798      	blx	r3
1000f288:	2101      	movs	r1, #1
1000f28a:	2e00      	cmp	r6, #0
1000f28c:	d101      	bne.n	1000f292 <at_ble_pair_key_reply+0x1e>
1000f28e:	1c31      	adds	r1, r6, #0
1000f290:	466e      	mov	r6, sp
1000f292:	2c00      	cmp	r4, #0
1000f294:	d116      	bne.n	1000f2c4 <at_ble_pair_key_reply+0x50>
1000f296:	2701      	movs	r7, #1
1000f298:	1c23      	adds	r3, r4, #0
1000f29a:	1d70      	adds	r0, r6, #5
1000f29c:	3e01      	subs	r6, #1
1000f29e:	7802      	ldrb	r2, [r0, #0]
1000f2a0:	3801      	subs	r0, #1
1000f2a2:	3a30      	subs	r2, #48	; 0x30
1000f2a4:	437a      	muls	r2, r7
1000f2a6:	189b      	adds	r3, r3, r2
1000f2a8:	220a      	movs	r2, #10
1000f2aa:	4357      	muls	r7, r2
1000f2ac:	42b0      	cmp	r0, r6
1000f2ae:	d1f6      	bne.n	1000f29e <at_ble_pair_key_reply+0x2a>
1000f2b0:	466a      	mov	r2, sp
1000f2b2:	4668      	mov	r0, sp
1000f2b4:	7013      	strb	r3, [r2, #0]
1000f2b6:	0a1a      	lsrs	r2, r3, #8
1000f2b8:	7042      	strb	r2, [r0, #1]
1000f2ba:	0c1a      	lsrs	r2, r3, #16
1000f2bc:	0e1b      	lsrs	r3, r3, #24
1000f2be:	7082      	strb	r2, [r0, #2]
1000f2c0:	70c3      	strb	r3, [r0, #3]
1000f2c2:	e009      	b.n	1000f2d8 <at_ble_pair_key_reply+0x64>
1000f2c4:	20cf      	movs	r0, #207	; 0xcf
1000f2c6:	2c01      	cmp	r4, #1
1000f2c8:	d10c      	bne.n	1000f2e4 <at_ble_pair_key_reply+0x70>
1000f2ca:	2300      	movs	r3, #0
1000f2cc:	4668      	mov	r0, sp
1000f2ce:	5cf2      	ldrb	r2, [r6, r3]
1000f2d0:	54c2      	strb	r2, [r0, r3]
1000f2d2:	3301      	adds	r3, #1
1000f2d4:	2b10      	cmp	r3, #16
1000f2d6:	d1f9      	bne.n	1000f2cc <at_ble_pair_key_reply+0x58>
1000f2d8:	2004      	movs	r0, #4
1000f2da:	466a      	mov	r2, sp
1000f2dc:	1c2b      	adds	r3, r5, #0
1000f2de:	4c03      	ldr	r4, [pc, #12]	; (1000f2ec <at_ble_pair_key_reply+0x78>)
1000f2e0:	47a0      	blx	r4
1000f2e2:	2000      	movs	r0, #0
1000f2e4:	b005      	add	sp, #20
1000f2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f2e8:	1001830b 	.word	0x1001830b
1000f2ec:	1000fc31 	.word	0x1000fc31

1000f2f0 <at_ble_send_slave_sec_request>:
1000f2f0:	b570      	push	{r4, r5, r6, lr}
1000f2f2:	4b0c      	ldr	r3, [pc, #48]	; (1000f324 <at_ble_send_slave_sec_request+0x34>)
1000f2f4:	1c0e      	adds	r6, r1, #0
1000f2f6:	2100      	movs	r1, #0
1000f2f8:	1c05      	adds	r5, r0, #0
1000f2fa:	1c14      	adds	r4, r2, #0
1000f2fc:	4798      	blx	r3
1000f2fe:	2301      	movs	r3, #1
1000f300:	2807      	cmp	r0, #7
1000f302:	d80d      	bhi.n	1000f320 <at_ble_send_slave_sec_request+0x30>
1000f304:	3311      	adds	r3, #17
1000f306:	4358      	muls	r0, r3
1000f308:	4b07      	ldr	r3, [pc, #28]	; (1000f328 <at_ble_send_slave_sec_request+0x38>)
1000f30a:	5cc2      	ldrb	r2, [r0, r3]
1000f30c:	23e0      	movs	r3, #224	; 0xe0
1000f30e:	2a01      	cmp	r2, #1
1000f310:	d106      	bne.n	1000f320 <at_ble_send_slave_sec_request+0x30>
1000f312:	00b1      	lsls	r1, r6, #2
1000f314:	430c      	orrs	r4, r1
1000f316:	4b05      	ldr	r3, [pc, #20]	; (1000f32c <at_ble_send_slave_sec_request+0x3c>)
1000f318:	b2e1      	uxtb	r1, r4
1000f31a:	1c28      	adds	r0, r5, #0
1000f31c:	4798      	blx	r3
1000f31e:	2300      	movs	r3, #0
1000f320:	1c18      	adds	r0, r3, #0
1000f322:	bd70      	pop	{r4, r5, r6, pc}
1000f324:	1000f645 	.word	0x1000f645
1000f328:	1001e19a 	.word	0x1001e19a
1000f32c:	1000fc81 	.word	0x1000fc81

1000f330 <at_ble_encryption_start>:
1000f330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f332:	23cf      	movs	r3, #207	; 0xcf
1000f334:	2900      	cmp	r1, #0
1000f336:	d02b      	beq.n	1000f390 <at_ble_encryption_start+0x60>
1000f338:	2a05      	cmp	r2, #5
1000f33a:	d829      	bhi.n	1000f390 <at_ble_encryption_start+0x60>
1000f33c:	2701      	movs	r7, #1
1000f33e:	1c3d      	adds	r5, r7, #0
1000f340:	2433      	movs	r4, #51	; 0x33
1000f342:	4095      	lsls	r5, r2
1000f344:	4225      	tst	r5, r4
1000f346:	d023      	beq.n	1000f390 <at_ble_encryption_start+0x60>
1000f348:	7e8c      	ldrb	r4, [r1, #26]
1000f34a:	3c07      	subs	r4, #7
1000f34c:	2c09      	cmp	r4, #9
1000f34e:	d81f      	bhi.n	1000f390 <at_ble_encryption_start+0x60>
1000f350:	4b10      	ldr	r3, [pc, #64]	; (1000f394 <at_ble_encryption_start+0x64>)
1000f352:	1c0c      	adds	r4, r1, #0
1000f354:	2100      	movs	r1, #0
1000f356:	1c15      	adds	r5, r2, #0
1000f358:	1c06      	adds	r6, r0, #0
1000f35a:	4798      	blx	r3
1000f35c:	1c3b      	adds	r3, r7, #0
1000f35e:	2807      	cmp	r0, #7
1000f360:	d816      	bhi.n	1000f390 <at_ble_encryption_start+0x60>
1000f362:	2312      	movs	r3, #18
1000f364:	4358      	muls	r0, r3
1000f366:	4b0c      	ldr	r3, [pc, #48]	; (1000f398 <at_ble_encryption_start+0x68>)
1000f368:	5cc7      	ldrb	r7, [r0, r3]
1000f36a:	23e0      	movs	r3, #224	; 0xe0
1000f36c:	2f00      	cmp	r7, #0
1000f36e:	d10f      	bne.n	1000f390 <at_ble_encryption_start+0x60>
1000f370:	1c21      	adds	r1, r4, #0
1000f372:	221c      	movs	r2, #28
1000f374:	4b09      	ldr	r3, [pc, #36]	; (1000f39c <at_ble_encryption_start+0x6c>)
1000f376:	480a      	ldr	r0, [pc, #40]	; (1000f3a0 <at_ble_encryption_start+0x70>)
1000f378:	4798      	blx	r3
1000f37a:	1c23      	adds	r3, r4, #0
1000f37c:	7ea1      	ldrb	r1, [r4, #26]
1000f37e:	8a22      	ldrh	r2, [r4, #16]
1000f380:	3312      	adds	r3, #18
1000f382:	9100      	str	r1, [sp, #0]
1000f384:	9501      	str	r5, [sp, #4]
1000f386:	1c21      	adds	r1, r4, #0
1000f388:	1c30      	adds	r0, r6, #0
1000f38a:	4c06      	ldr	r4, [pc, #24]	; (1000f3a4 <at_ble_encryption_start+0x74>)
1000f38c:	47a0      	blx	r4
1000f38e:	1c3b      	adds	r3, r7, #0
1000f390:	1c18      	adds	r0, r3, #0
1000f392:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f394:	1000f645 	.word	0x1000f645
1000f398:	1001e19a 	.word	0x1001e19a
1000f39c:	100182cf 	.word	0x100182cf
1000f3a0:	1001e2a8 	.word	0x1001e2a8
1000f3a4:	1000fcc1 	.word	0x1000fcc1

1000f3a8 <at_ble_encryption_request_reply>:
1000f3a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000f3aa:	24cf      	movs	r4, #207	; 0xcf
1000f3ac:	2b00      	cmp	r3, #0
1000f3ae:	d011      	beq.n	1000f3d4 <at_ble_encryption_request_reply+0x2c>
1000f3b0:	2a00      	cmp	r2, #0
1000f3b2:	d00a      	beq.n	1000f3ca <at_ble_encryption_request_reply+0x22>
1000f3b4:	2905      	cmp	r1, #5
1000f3b6:	d80d      	bhi.n	1000f3d4 <at_ble_encryption_request_reply+0x2c>
1000f3b8:	2501      	movs	r5, #1
1000f3ba:	2633      	movs	r6, #51	; 0x33
1000f3bc:	408d      	lsls	r5, r1
1000f3be:	4235      	tst	r5, r6
1000f3c0:	d008      	beq.n	1000f3d4 <at_ble_encryption_request_reply+0x2c>
1000f3c2:	7e9d      	ldrb	r5, [r3, #26]
1000f3c4:	3d07      	subs	r5, #7
1000f3c6:	2d09      	cmp	r5, #9
1000f3c8:	d804      	bhi.n	1000f3d4 <at_ble_encryption_request_reply+0x2c>
1000f3ca:	7e9c      	ldrb	r4, [r3, #26]
1000f3cc:	9400      	str	r4, [sp, #0]
1000f3ce:	4c02      	ldr	r4, [pc, #8]	; (1000f3d8 <at_ble_encryption_request_reply+0x30>)
1000f3d0:	47a0      	blx	r4
1000f3d2:	2400      	movs	r4, #0
1000f3d4:	1c20      	adds	r0, r4, #0
1000f3d6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000f3d8:	1000fd7d 	.word	0x1000fd7d

1000f3dc <rx_callback>:
1000f3dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f3de:	8883      	ldrh	r3, [r0, #4]
1000f3e0:	1c01      	adds	r1, r0, #0
1000f3e2:	9301      	str	r3, [sp, #4]
1000f3e4:	88c5      	ldrh	r5, [r0, #6]
1000f3e6:	8806      	ldrh	r6, [r0, #0]
1000f3e8:	2d00      	cmp	r5, #0
1000f3ea:	d10f      	bne.n	1000f40c <rx_callback+0x30>
1000f3ec:	1c19      	adds	r1, r3, #0
1000f3ee:	1c30      	adds	r0, r6, #0
1000f3f0:	4b19      	ldr	r3, [pc, #100]	; (1000f458 <rx_callback+0x7c>)
1000f3f2:	1c2a      	adds	r2, r5, #0
1000f3f4:	4798      	blx	r3
1000f3f6:	1e03      	subs	r3, r0, #0
1000f3f8:	d105      	bne.n	1000f406 <rx_callback+0x2a>
1000f3fa:	1c30      	adds	r0, r6, #0
1000f3fc:	9901      	ldr	r1, [sp, #4]
1000f3fe:	1c1a      	adds	r2, r3, #0
1000f400:	4c16      	ldr	r4, [pc, #88]	; (1000f45c <rx_callback+0x80>)
1000f402:	47a0      	blx	r4
1000f404:	e027      	b.n	1000f456 <rx_callback+0x7a>
1000f406:	4b16      	ldr	r3, [pc, #88]	; (1000f460 <rx_callback+0x84>)
1000f408:	4798      	blx	r3
1000f40a:	e024      	b.n	1000f456 <rx_callback+0x7a>
1000f40c:	4c15      	ldr	r4, [pc, #84]	; (1000f464 <rx_callback+0x88>)
1000f40e:	4a16      	ldr	r2, [pc, #88]	; (1000f468 <rx_callback+0x8c>)
1000f410:	6823      	ldr	r3, [r4, #0]
1000f412:	6812      	ldr	r2, [r2, #0]
1000f414:	18eb      	adds	r3, r5, r3
1000f416:	4293      	cmp	r3, r2
1000f418:	d901      	bls.n	1000f41e <rx_callback+0x42>
1000f41a:	2300      	movs	r3, #0
1000f41c:	6023      	str	r3, [r4, #0]
1000f41e:	4f13      	ldr	r7, [pc, #76]	; (1000f46c <rx_callback+0x90>)
1000f420:	6822      	ldr	r2, [r4, #0]
1000f422:	683b      	ldr	r3, [r7, #0]
1000f424:	3108      	adds	r1, #8
1000f426:	1898      	adds	r0, r3, r2
1000f428:	1c2a      	adds	r2, r5, #0
1000f42a:	4b11      	ldr	r3, [pc, #68]	; (1000f470 <rx_callback+0x94>)
1000f42c:	4798      	blx	r3
1000f42e:	683b      	ldr	r3, [r7, #0]
1000f430:	6822      	ldr	r2, [r4, #0]
1000f432:	1c30      	adds	r0, r6, #0
1000f434:	189a      	adds	r2, r3, r2
1000f436:	9901      	ldr	r1, [sp, #4]
1000f438:	4b07      	ldr	r3, [pc, #28]	; (1000f458 <rx_callback+0x7c>)
1000f43a:	4798      	blx	r3
1000f43c:	2800      	cmp	r0, #0
1000f43e:	d1e2      	bne.n	1000f406 <rx_callback+0x2a>
1000f440:	6823      	ldr	r3, [r4, #0]
1000f442:	683a      	ldr	r2, [r7, #0]
1000f444:	1c30      	adds	r0, r6, #0
1000f446:	18d2      	adds	r2, r2, r3
1000f448:	9901      	ldr	r1, [sp, #4]
1000f44a:	1c2b      	adds	r3, r5, #0
1000f44c:	4e03      	ldr	r6, [pc, #12]	; (1000f45c <rx_callback+0x80>)
1000f44e:	47b0      	blx	r6
1000f450:	6823      	ldr	r3, [r4, #0]
1000f452:	18ed      	adds	r5, r5, r3
1000f454:	6025      	str	r5, [r4, #0]
1000f456:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f458:	1000e2c9 	.word	0x1000e2c9
1000f45c:	1000e241 	.word	0x1000e241
1000f460:	1000c7d9 	.word	0x1000c7d9
1000f464:	1001e304 	.word	0x1001e304
1000f468:	1001d148 	.word	0x1001d148
1000f46c:	1001d144 	.word	0x1001d144
1000f470:	100182cf 	.word	0x100182cf

1000f474 <interface_send>:
1000f474:	b508      	push	{r3, lr}
1000f476:	4b02      	ldr	r3, [pc, #8]	; (1000f480 <interface_send+0xc>)
1000f478:	4798      	blx	r3
1000f47a:	2000      	movs	r0, #0
1000f47c:	bd08      	pop	{r3, pc}
1000f47e:	46c0      	nop			; (mov r8, r8)
1000f480:	1000c4bd 	.word	0x1000c4bd

1000f484 <interface_init>:
1000f484:	2280      	movs	r2, #128	; 0x80
1000f486:	b510      	push	{r4, lr}
1000f488:	2100      	movs	r1, #0
1000f48a:	1c04      	adds	r4, r0, #0
1000f48c:	0092      	lsls	r2, r2, #2
1000f48e:	4b08      	ldr	r3, [pc, #32]	; (1000f4b0 <interface_init+0x2c>)
1000f490:	4808      	ldr	r0, [pc, #32]	; (1000f4b4 <interface_init+0x30>)
1000f492:	4798      	blx	r3
1000f494:	2200      	movs	r2, #0
1000f496:	4b08      	ldr	r3, [pc, #32]	; (1000f4b8 <interface_init+0x34>)
1000f498:	601a      	str	r2, [r3, #0]
1000f49a:	4a08      	ldr	r2, [pc, #32]	; (1000f4bc <interface_init+0x38>)
1000f49c:	4b08      	ldr	r3, [pc, #32]	; (1000f4c0 <interface_init+0x3c>)
1000f49e:	601a      	str	r2, [r3, #0]
1000f4a0:	4b08      	ldr	r3, [pc, #32]	; (1000f4c4 <interface_init+0x40>)
1000f4a2:	6922      	ldr	r2, [r4, #16]
1000f4a4:	601a      	str	r2, [r3, #0]
1000f4a6:	6962      	ldr	r2, [r4, #20]
1000f4a8:	4b07      	ldr	r3, [pc, #28]	; (1000f4c8 <interface_init+0x44>)
1000f4aa:	601a      	str	r2, [r3, #0]
1000f4ac:	bd10      	pop	{r4, pc}
1000f4ae:	46c0      	nop			; (mov r8, r8)
1000f4b0:	1001830b 	.word	0x1001830b
1000f4b4:	1001e508 	.word	0x1001e508
1000f4b8:	1001e304 	.word	0x1001e304
1000f4bc:	1001e308 	.word	0x1001e308
1000f4c0:	1001b624 	.word	0x1001b624
1000f4c4:	1001d144 	.word	0x1001d144
1000f4c8:	1001d148 	.word	0x1001d148

1000f4cc <platform_cmd_cmpl_signal>:
1000f4cc:	2201      	movs	r2, #1
1000f4ce:	4b01      	ldr	r3, [pc, #4]	; (1000f4d4 <platform_cmd_cmpl_signal+0x8>)
1000f4d0:	601a      	str	r2, [r3, #0]
1000f4d2:	4770      	bx	lr
1000f4d4:	1001d14c 	.word	0x1001d14c

1000f4d8 <platform_cmd_cmpl_wait>:
1000f4d8:	b510      	push	{r4, lr}
1000f4da:	1c04      	adds	r4, r0, #0
1000f4dc:	4b07      	ldr	r3, [pc, #28]	; (1000f4fc <platform_cmd_cmpl_wait+0x24>)
1000f4de:	681a      	ldr	r2, [r3, #0]
1000f4e0:	2a01      	cmp	r2, #1
1000f4e2:	d003      	beq.n	1000f4ec <platform_cmd_cmpl_wait+0x14>
1000f4e4:	4b06      	ldr	r3, [pc, #24]	; (1000f500 <platform_cmd_cmpl_wait+0x28>)
1000f4e6:	2000      	movs	r0, #0
1000f4e8:	4798      	blx	r3
1000f4ea:	e7f7      	b.n	1000f4dc <platform_cmd_cmpl_wait+0x4>
1000f4ec:	6819      	ldr	r1, [r3, #0]
1000f4ee:	2901      	cmp	r1, #1
1000f4f0:	d102      	bne.n	1000f4f8 <platform_cmd_cmpl_wait+0x20>
1000f4f2:	2200      	movs	r2, #0
1000f4f4:	601a      	str	r2, [r3, #0]
1000f4f6:	e000      	b.n	1000f4fa <platform_cmd_cmpl_wait+0x22>
1000f4f8:	7022      	strb	r2, [r4, #0]
1000f4fa:	bd10      	pop	{r4, pc}
1000f4fc:	1001d14c 	.word	0x1001d14c
1000f500:	1000c549 	.word	0x1000c549

1000f504 <start_timer>:
1000f504:	4770      	bx	lr

1000f506 <stop_timer>:
1000f506:	4770      	bx	lr

1000f508 <dbg_le_set_bd_addr_req_handler>:
1000f508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f50a:	466b      	mov	r3, sp
1000f50c:	1dde      	adds	r6, r3, #7
1000f50e:	2300      	movs	r3, #0
1000f510:	7033      	strb	r3, [r6, #0]
1000f512:	230f      	movs	r3, #15
1000f514:	4c13      	ldr	r4, [pc, #76]	; (1000f564 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000f516:	2703      	movs	r7, #3
1000f518:	7023      	strb	r3, [r4, #0]
1000f51a:	2300      	movs	r3, #0
1000f51c:	70e3      	strb	r3, [r4, #3]
1000f51e:	4b12      	ldr	r3, [pc, #72]	; (1000f568 <dbg_le_set_bd_addr_req_handler+0x60>)
1000f520:	1c01      	adds	r1, r0, #0
1000f522:	881a      	ldrh	r2, [r3, #0]
1000f524:	881b      	ldrh	r3, [r3, #0]
1000f526:	7122      	strb	r2, [r4, #4]
1000f528:	0a1b      	lsrs	r3, r3, #8
1000f52a:	2206      	movs	r2, #6
1000f52c:	7163      	strb	r3, [r4, #5]
1000f52e:	480f      	ldr	r0, [pc, #60]	; (1000f56c <dbg_le_set_bd_addr_req_handler+0x64>)
1000f530:	4b0f      	ldr	r3, [pc, #60]	; (1000f570 <dbg_le_set_bd_addr_req_handler+0x68>)
1000f532:	7067      	strb	r7, [r4, #1]
1000f534:	70a7      	strb	r7, [r4, #2]
1000f536:	4798      	blx	r3
1000f538:	4d0e      	ldr	r5, [pc, #56]	; (1000f574 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000f53a:	4b0f      	ldr	r3, [pc, #60]	; (1000f578 <dbg_le_set_bd_addr_req_handler+0x70>)
1000f53c:	210e      	movs	r1, #14
1000f53e:	802b      	strh	r3, [r5, #0]
1000f540:	2306      	movs	r3, #6
1000f542:	71a3      	strb	r3, [r4, #6]
1000f544:	2300      	movs	r3, #0
1000f546:	1c20      	adds	r0, r4, #0
1000f548:	71e3      	strb	r3, [r4, #7]
1000f54a:	4b0c      	ldr	r3, [pc, #48]	; (1000f57c <dbg_le_set_bd_addr_req_handler+0x74>)
1000f54c:	80af      	strh	r7, [r5, #4]
1000f54e:	4798      	blx	r3
1000f550:	1c30      	adds	r0, r6, #0
1000f552:	4b0b      	ldr	r3, [pc, #44]	; (1000f580 <dbg_le_set_bd_addr_req_handler+0x78>)
1000f554:	4798      	blx	r3
1000f556:	7833      	ldrb	r3, [r6, #0]
1000f558:	20e2      	movs	r0, #226	; 0xe2
1000f55a:	2b00      	cmp	r3, #0
1000f55c:	d101      	bne.n	1000f562 <dbg_le_set_bd_addr_req_handler+0x5a>
1000f55e:	68ab      	ldr	r3, [r5, #8]
1000f560:	7818      	ldrb	r0, [r3, #0]
1000f562:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f564:	1001e508 	.word	0x1001e508
1000f568:	1001e198 	.word	0x1001e198
1000f56c:	1001e510 	.word	0x1001e510
1000f570:	100182cf 	.word	0x100182cf
1000f574:	1001e18c 	.word	0x1001e18c
1000f578:	00000329 	.word	0x00000329
1000f57c:	1000f475 	.word	0x1000f475
1000f580:	1000f4d9 	.word	0x1000f4d9

1000f584 <gapc_get_dev_info_cfm.constprop.1>:
1000f584:	b538      	push	{r3, r4, r5, lr}
1000f586:	230b      	movs	r3, #11
1000f588:	4c27      	ldr	r4, [pc, #156]	; (1000f628 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000f58a:	7023      	strb	r3, [r4, #0]
1000f58c:	3303      	adds	r3, #3
1000f58e:	7063      	strb	r3, [r4, #1]
1000f590:	3329      	adds	r3, #41	; 0x29
1000f592:	70a3      	strb	r3, [r4, #2]
1000f594:	4b25      	ldr	r3, [pc, #148]	; (1000f62c <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000f596:	70e1      	strb	r1, [r4, #3]
1000f598:	881a      	ldrh	r2, [r3, #0]
1000f59a:	881b      	ldrh	r3, [r3, #0]
1000f59c:	7122      	strb	r2, [r4, #4]
1000f59e:	0a1b      	lsrs	r3, r3, #8
1000f5a0:	7163      	strb	r3, [r4, #5]
1000f5a2:	2300      	movs	r3, #0
1000f5a4:	7220      	strb	r0, [r4, #8]
1000f5a6:	7263      	strb	r3, [r4, #9]
1000f5a8:	2801      	cmp	r0, #1
1000f5aa:	d02b      	beq.n	1000f604 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000f5ac:	4298      	cmp	r0, r3
1000f5ae:	d01b      	beq.n	1000f5e8 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000f5b0:	2802      	cmp	r0, #2
1000f5b2:	d12f      	bne.n	1000f614 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000f5b4:	4b1e      	ldr	r3, [pc, #120]	; (1000f630 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f5b6:	2112      	movs	r1, #18
1000f5b8:	1c1a      	adds	r2, r3, #0
1000f5ba:	32ce      	adds	r2, #206	; 0xce
1000f5bc:	8812      	ldrh	r2, [r2, #0]
1000f5be:	72a2      	strb	r2, [r4, #10]
1000f5c0:	0a12      	lsrs	r2, r2, #8
1000f5c2:	72e2      	strb	r2, [r4, #11]
1000f5c4:	1c1a      	adds	r2, r3, #0
1000f5c6:	32d0      	adds	r2, #208	; 0xd0
1000f5c8:	8812      	ldrh	r2, [r2, #0]
1000f5ca:	7322      	strb	r2, [r4, #12]
1000f5cc:	0a12      	lsrs	r2, r2, #8
1000f5ce:	7362      	strb	r2, [r4, #13]
1000f5d0:	1c1a      	adds	r2, r3, #0
1000f5d2:	32d2      	adds	r2, #210	; 0xd2
1000f5d4:	8812      	ldrh	r2, [r2, #0]
1000f5d6:	33d4      	adds	r3, #212	; 0xd4
1000f5d8:	73a2      	strb	r2, [r4, #14]
1000f5da:	0a12      	lsrs	r2, r2, #8
1000f5dc:	73e2      	strb	r2, [r4, #15]
1000f5de:	881b      	ldrh	r3, [r3, #0]
1000f5e0:	7423      	strb	r3, [r4, #16]
1000f5e2:	0a1b      	lsrs	r3, r3, #8
1000f5e4:	7463      	strb	r3, [r4, #17]
1000f5e6:	e016      	b.n	1000f616 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f5e8:	4b11      	ldr	r3, [pc, #68]	; (1000f630 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f5ea:	4912      	ldr	r1, [pc, #72]	; (1000f634 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000f5ec:	33aa      	adds	r3, #170	; 0xaa
1000f5ee:	881d      	ldrh	r5, [r3, #0]
1000f5f0:	4811      	ldr	r0, [pc, #68]	; (1000f638 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000f5f2:	0a2b      	lsrs	r3, r5, #8
1000f5f4:	72a5      	strb	r5, [r4, #10]
1000f5f6:	72e3      	strb	r3, [r4, #11]
1000f5f8:	1c2a      	adds	r2, r5, #0
1000f5fa:	4b10      	ldr	r3, [pc, #64]	; (1000f63c <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000f5fc:	350c      	adds	r5, #12
1000f5fe:	4798      	blx	r3
1000f600:	b2a9      	uxth	r1, r5
1000f602:	e008      	b.n	1000f616 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f604:	4b0a      	ldr	r3, [pc, #40]	; (1000f630 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f606:	210c      	movs	r1, #12
1000f608:	33cc      	adds	r3, #204	; 0xcc
1000f60a:	881b      	ldrh	r3, [r3, #0]
1000f60c:	72a3      	strb	r3, [r4, #10]
1000f60e:	0a1b      	lsrs	r3, r3, #8
1000f610:	72e3      	strb	r3, [r4, #11]
1000f612:	e000      	b.n	1000f616 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f614:	210a      	movs	r1, #10
1000f616:	1c0b      	adds	r3, r1, #0
1000f618:	3b08      	subs	r3, #8
1000f61a:	71a3      	strb	r3, [r4, #6]
1000f61c:	121b      	asrs	r3, r3, #8
1000f61e:	71e3      	strb	r3, [r4, #7]
1000f620:	1c20      	adds	r0, r4, #0
1000f622:	4b07      	ldr	r3, [pc, #28]	; (1000f640 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000f624:	4798      	blx	r3
1000f626:	bd38      	pop	{r3, r4, r5, pc}
1000f628:	1001e508 	.word	0x1001e508
1000f62c:	1001e198 	.word	0x1001e198
1000f630:	1001e22a 	.word	0x1001e22a
1000f634:	1001e2d6 	.word	0x1001e2d6
1000f638:	1001e514 	.word	0x1001e514
1000f63c:	100182cf 	.word	0x100182cf
1000f640:	1000f475 	.word	0x1000f475

1000f644 <check_ConnData_idx_role>:
1000f644:	4b0c      	ldr	r3, [pc, #48]	; (1000f678 <check_ConnData_idx_role+0x34>)
1000f646:	b570      	push	{r4, r5, r6, lr}
1000f648:	1c04      	adds	r4, r0, #0
1000f64a:	2008      	movs	r0, #8
1000f64c:	429c      	cmp	r4, r3
1000f64e:	d011      	beq.n	1000f674 <check_ConnData_idx_role+0x30>
1000f650:	2300      	movs	r3, #0
1000f652:	2212      	movs	r2, #18
1000f654:	435a      	muls	r2, r3
1000f656:	4d09      	ldr	r5, [pc, #36]	; (1000f67c <check_ConnData_idx_role+0x38>)
1000f658:	b2d8      	uxtb	r0, r3
1000f65a:	1956      	adds	r6, r2, r5
1000f65c:	8976      	ldrh	r6, [r6, #10]
1000f65e:	42a6      	cmp	r6, r4
1000f660:	d104      	bne.n	1000f66c <check_ConnData_idx_role+0x28>
1000f662:	2900      	cmp	r1, #0
1000f664:	d006      	beq.n	1000f674 <check_ConnData_idx_role+0x30>
1000f666:	5d53      	ldrb	r3, [r2, r5]
1000f668:	700b      	strb	r3, [r1, #0]
1000f66a:	e003      	b.n	1000f674 <check_ConnData_idx_role+0x30>
1000f66c:	3301      	adds	r3, #1
1000f66e:	2b08      	cmp	r3, #8
1000f670:	d1ef      	bne.n	1000f652 <check_ConnData_idx_role+0xe>
1000f672:	1c18      	adds	r0, r3, #0
1000f674:	bd70      	pop	{r4, r5, r6, pc}
1000f676:	46c0      	nop			; (mov r8, r8)
1000f678:	0000ffff 	.word	0x0000ffff
1000f67c:	1001e19a 	.word	0x1001e19a

1000f680 <check_ConnData_emptyEntry>:
1000f680:	2300      	movs	r3, #0
1000f682:	2212      	movs	r2, #18
1000f684:	435a      	muls	r2, r3
1000f686:	4906      	ldr	r1, [pc, #24]	; (1000f6a0 <check_ConnData_emptyEntry+0x20>)
1000f688:	b2d8      	uxtb	r0, r3
1000f68a:	1852      	adds	r2, r2, r1
1000f68c:	8951      	ldrh	r1, [r2, #10]
1000f68e:	4a05      	ldr	r2, [pc, #20]	; (1000f6a4 <check_ConnData_emptyEntry+0x24>)
1000f690:	4291      	cmp	r1, r2
1000f692:	d003      	beq.n	1000f69c <check_ConnData_emptyEntry+0x1c>
1000f694:	3301      	adds	r3, #1
1000f696:	2b08      	cmp	r3, #8
1000f698:	d1f3      	bne.n	1000f682 <check_ConnData_emptyEntry+0x2>
1000f69a:	1c18      	adds	r0, r3, #0
1000f69c:	4770      	bx	lr
1000f69e:	46c0      	nop			; (mov r8, r8)
1000f6a0:	1001e19a 	.word	0x1001e19a
1000f6a4:	0000ffff 	.word	0x0000ffff

1000f6a8 <gapc_cmp_evt>:
1000f6a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f6aa:	780b      	ldrb	r3, [r1, #0]
1000f6ac:	1c05      	adds	r5, r0, #0
1000f6ae:	1e58      	subs	r0, r3, #1
1000f6b0:	784e      	ldrb	r6, [r1, #1]
1000f6b2:	280f      	cmp	r0, #15
1000f6b4:	d85a      	bhi.n	1000f76c <gapc_cmp_evt+0xc4>
1000f6b6:	1c14      	adds	r4, r2, #0
1000f6b8:	f005 fc72 	bl	10014fa0 <__gnu_thumb1_case_uqi>
1000f6bc:	5858440a 	.word	0x5858440a
1000f6c0:	4b584444 	.word	0x4b584444
1000f6c4:	0825122d 	.word	0x0825122d
1000f6c8:	3e395858 	.word	0x3e395858
1000f6cc:	203b      	movs	r0, #59	; 0x3b
1000f6ce:	e04e      	b.n	1000f76e <gapc_cmp_evt+0xc6>
1000f6d0:	203b      	movs	r0, #59	; 0x3b
1000f6d2:	2e00      	cmp	r6, #0
1000f6d4:	d04b      	beq.n	1000f76e <gapc_cmp_evt+0xc6>
1000f6d6:	0a2d      	lsrs	r5, r5, #8
1000f6d8:	8015      	strh	r5, [r2, #0]
1000f6da:	7096      	strb	r6, [r2, #2]
1000f6dc:	3835      	subs	r0, #53	; 0x35
1000f6de:	e046      	b.n	1000f76e <gapc_cmp_evt+0xc6>
1000f6e0:	466b      	mov	r3, sp
1000f6e2:	1ddf      	adds	r7, r3, #7
1000f6e4:	2301      	movs	r3, #1
1000f6e6:	0a2d      	lsrs	r5, r5, #8
1000f6e8:	703b      	strb	r3, [r7, #0]
1000f6ea:	1c28      	adds	r0, r5, #0
1000f6ec:	1c39      	adds	r1, r7, #0
1000f6ee:	4b20      	ldr	r3, [pc, #128]	; (1000f770 <gapc_cmp_evt+0xc8>)
1000f6f0:	4798      	blx	r3
1000f6f2:	2807      	cmp	r0, #7
1000f6f4:	d803      	bhi.n	1000f6fe <gapc_cmp_evt+0x56>
1000f6f6:	783b      	ldrb	r3, [r7, #0]
1000f6f8:	203b      	movs	r0, #59	; 0x3b
1000f6fa:	2b00      	cmp	r3, #0
1000f6fc:	d037      	beq.n	1000f76e <gapc_cmp_evt+0xc6>
1000f6fe:	8065      	strh	r5, [r4, #2]
1000f700:	7126      	strb	r6, [r4, #4]
1000f702:	2009      	movs	r0, #9
1000f704:	e033      	b.n	1000f76e <gapc_cmp_evt+0xc6>
1000f706:	203b      	movs	r0, #59	; 0x3b
1000f708:	2e00      	cmp	r6, #0
1000f70a:	d030      	beq.n	1000f76e <gapc_cmp_evt+0xc6>
1000f70c:	0a2d      	lsrs	r5, r5, #8
1000f70e:	8015      	strh	r5, [r2, #0]
1000f710:	7096      	strb	r6, [r2, #2]
1000f712:	382d      	subs	r0, #45	; 0x2d
1000f714:	e02b      	b.n	1000f76e <gapc_cmp_evt+0xc6>
1000f716:	203b      	movs	r0, #59	; 0x3b
1000f718:	2e00      	cmp	r6, #0
1000f71a:	d028      	beq.n	1000f76e <gapc_cmp_evt+0xc6>
1000f71c:	2300      	movs	r3, #0
1000f71e:	0a2d      	lsrs	r5, r5, #8
1000f720:	8015      	strh	r5, [r2, #0]
1000f722:	7096      	strb	r6, [r2, #2]
1000f724:	8093      	strh	r3, [r2, #4]
1000f726:	80d3      	strh	r3, [r2, #6]
1000f728:	8113      	strh	r3, [r2, #8]
1000f72a:	3834      	subs	r0, #52	; 0x34
1000f72c:	e01f      	b.n	1000f76e <gapc_cmp_evt+0xc6>
1000f72e:	203b      	movs	r0, #59	; 0x3b
1000f730:	2e00      	cmp	r6, #0
1000f732:	d01c      	beq.n	1000f76e <gapc_cmp_evt+0xc6>
1000f734:	7216      	strb	r6, [r2, #8]
1000f736:	e003      	b.n	1000f740 <gapc_cmp_evt+0x98>
1000f738:	203b      	movs	r0, #59	; 0x3b
1000f73a:	2e00      	cmp	r6, #0
1000f73c:	d017      	beq.n	1000f76e <gapc_cmp_evt+0xc6>
1000f73e:	7116      	strb	r6, [r2, #4]
1000f740:	3812      	subs	r0, #18
1000f742:	e014      	b.n	1000f76e <gapc_cmp_evt+0xc6>
1000f744:	203b      	movs	r0, #59	; 0x3b
1000f746:	2e00      	cmp	r6, #0
1000f748:	d011      	beq.n	1000f76e <gapc_cmp_evt+0xc6>
1000f74a:	7093      	strb	r3, [r2, #2]
1000f74c:	70d6      	strb	r6, [r2, #3]
1000f74e:	382a      	subs	r0, #42	; 0x2a
1000f750:	e00d      	b.n	1000f76e <gapc_cmp_evt+0xc6>
1000f752:	203b      	movs	r0, #59	; 0x3b
1000f754:	2e00      	cmp	r6, #0
1000f756:	d00a      	beq.n	1000f76e <gapc_cmp_evt+0xc6>
1000f758:	0a2d      	lsrs	r5, r5, #8
1000f75a:	7016      	strb	r6, [r2, #0]
1000f75c:	8055      	strh	r5, [r2, #2]
1000f75e:	1d10      	adds	r0, r2, #4
1000f760:	2100      	movs	r1, #0
1000f762:	2205      	movs	r2, #5
1000f764:	4b03      	ldr	r3, [pc, #12]	; (1000f774 <gapc_cmp_evt+0xcc>)
1000f766:	4798      	blx	r3
1000f768:	2012      	movs	r0, #18
1000f76a:	e000      	b.n	1000f76e <gapc_cmp_evt+0xc6>
1000f76c:	2000      	movs	r0, #0
1000f76e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f770:	1000f645 	.word	0x1000f645
1000f774:	1001830b 	.word	0x1001830b

1000f778 <gapc_connection_cfm_handler>:
1000f778:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f77a:	b085      	sub	sp, #20
1000f77c:	1c1d      	adds	r5, r3, #0
1000f77e:	ab0a      	add	r3, sp, #40	; 0x28
1000f780:	781b      	ldrb	r3, [r3, #0]
1000f782:	9201      	str	r2, [sp, #4]
1000f784:	9302      	str	r3, [sp, #8]
1000f786:	ab0b      	add	r3, sp, #44	; 0x2c
1000f788:	781b      	ldrb	r3, [r3, #0]
1000f78a:	1c07      	adds	r7, r0, #0
1000f78c:	9303      	str	r3, [sp, #12]
1000f78e:	ab0c      	add	r3, sp, #48	; 0x30
1000f790:	881a      	ldrh	r2, [r3, #0]
1000f792:	2302      	movs	r3, #2
1000f794:	1c0e      	adds	r6, r1, #0
1000f796:	4c23      	ldr	r4, [pc, #140]	; (1000f824 <gapc_connection_cfm_handler+0xac>)
1000f798:	1c39      	adds	r1, r7, #0
1000f79a:	7023      	strb	r3, [r4, #0]
1000f79c:	330c      	adds	r3, #12
1000f79e:	7063      	strb	r3, [r4, #1]
1000f7a0:	70a3      	strb	r3, [r4, #2]
1000f7a2:	4b21      	ldr	r3, [pc, #132]	; (1000f828 <gapc_connection_cfm_handler+0xb0>)
1000f7a4:	70e2      	strb	r2, [r4, #3]
1000f7a6:	881a      	ldrh	r2, [r3, #0]
1000f7a8:	881b      	ldrh	r3, [r3, #0]
1000f7aa:	7122      	strb	r2, [r4, #4]
1000f7ac:	0a1b      	lsrs	r3, r3, #8
1000f7ae:	4f1f      	ldr	r7, [pc, #124]	; (1000f82c <gapc_connection_cfm_handler+0xb4>)
1000f7b0:	2210      	movs	r2, #16
1000f7b2:	481f      	ldr	r0, [pc, #124]	; (1000f830 <gapc_connection_cfm_handler+0xb8>)
1000f7b4:	7163      	strb	r3, [r4, #5]
1000f7b6:	47b8      	blx	r7
1000f7b8:	0a33      	lsrs	r3, r6, #8
1000f7ba:	7626      	strb	r6, [r4, #24]
1000f7bc:	7663      	strb	r3, [r4, #25]
1000f7be:	9901      	ldr	r1, [sp, #4]
1000f7c0:	0c33      	lsrs	r3, r6, #16
1000f7c2:	2210      	movs	r2, #16
1000f7c4:	0e36      	lsrs	r6, r6, #24
1000f7c6:	481b      	ldr	r0, [pc, #108]	; (1000f834 <gapc_connection_cfm_handler+0xbc>)
1000f7c8:	76a3      	strb	r3, [r4, #26]
1000f7ca:	76e6      	strb	r6, [r4, #27]
1000f7cc:	47b8      	blx	r7
1000f7ce:	1c23      	adds	r3, r4, #0
1000f7d0:	332c      	adds	r3, #44	; 0x2c
1000f7d2:	701d      	strb	r5, [r3, #0]
1000f7d4:	1c23      	adds	r3, r4, #0
1000f7d6:	0a2a      	lsrs	r2, r5, #8
1000f7d8:	332d      	adds	r3, #45	; 0x2d
1000f7da:	701a      	strb	r2, [r3, #0]
1000f7dc:	1c23      	adds	r3, r4, #0
1000f7de:	0c2a      	lsrs	r2, r5, #16
1000f7e0:	332e      	adds	r3, #46	; 0x2e
1000f7e2:	701a      	strb	r2, [r3, #0]
1000f7e4:	1c23      	adds	r3, r4, #0
1000f7e6:	0e2d      	lsrs	r5, r5, #24
1000f7e8:	332f      	adds	r3, #47	; 0x2f
1000f7ea:	466a      	mov	r2, sp
1000f7ec:	701d      	strb	r5, [r3, #0]
1000f7ee:	1c23      	adds	r3, r4, #0
1000f7f0:	7a12      	ldrb	r2, [r2, #8]
1000f7f2:	3330      	adds	r3, #48	; 0x30
1000f7f4:	701a      	strb	r2, [r3, #0]
1000f7f6:	1c23      	adds	r3, r4, #0
1000f7f8:	2500      	movs	r5, #0
1000f7fa:	3331      	adds	r3, #49	; 0x31
1000f7fc:	466a      	mov	r2, sp
1000f7fe:	701d      	strb	r5, [r3, #0]
1000f800:	1c23      	adds	r3, r4, #0
1000f802:	7b12      	ldrb	r2, [r2, #12]
1000f804:	3332      	adds	r3, #50	; 0x32
1000f806:	701a      	strb	r2, [r3, #0]
1000f808:	1c23      	adds	r3, r4, #0
1000f80a:	3333      	adds	r3, #51	; 0x33
1000f80c:	701d      	strb	r5, [r3, #0]
1000f80e:	232c      	movs	r3, #44	; 0x2c
1000f810:	1c20      	adds	r0, r4, #0
1000f812:	71a3      	strb	r3, [r4, #6]
1000f814:	2134      	movs	r1, #52	; 0x34
1000f816:	4b08      	ldr	r3, [pc, #32]	; (1000f838 <gapc_connection_cfm_handler+0xc0>)
1000f818:	71e5      	strb	r5, [r4, #7]
1000f81a:	4798      	blx	r3
1000f81c:	1c28      	adds	r0, r5, #0
1000f81e:	b005      	add	sp, #20
1000f820:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f822:	46c0      	nop			; (mov r8, r8)
1000f824:	1001e508 	.word	0x1001e508
1000f828:	1001e198 	.word	0x1001e198
1000f82c:	100182cf 	.word	0x100182cf
1000f830:	1001e510 	.word	0x1001e510
1000f834:	1001e524 	.word	0x1001e524
1000f838:	1000f475 	.word	0x1000f475

1000f83c <gapc_con_req_ind>:
1000f83c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f83e:	7845      	ldrb	r5, [r0, #1]
1000f840:	7803      	ldrb	r3, [r0, #0]
1000f842:	4c30      	ldr	r4, [pc, #192]	; (1000f904 <gapc_con_req_ind+0xc8>)
1000f844:	022d      	lsls	r5, r5, #8
1000f846:	431d      	orrs	r5, r3
1000f848:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000f84a:	78c3      	ldrb	r3, [r0, #3]
1000f84c:	7882      	ldrb	r2, [r0, #2]
1000f84e:	b08b      	sub	sp, #44	; 0x2c
1000f850:	021b      	lsls	r3, r3, #8
1000f852:	431a      	orrs	r2, r3
1000f854:	466b      	mov	r3, sp
1000f856:	9205      	str	r2, [sp, #20]
1000f858:	8a9b      	ldrh	r3, [r3, #20]
1000f85a:	2120      	movs	r1, #32
1000f85c:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000f85e:	7943      	ldrb	r3, [r0, #5]
1000f860:	7902      	ldrb	r2, [r0, #4]
1000f862:	021b      	lsls	r3, r3, #8
1000f864:	431a      	orrs	r2, r3
1000f866:	466b      	mov	r3, sp
1000f868:	9206      	str	r2, [sp, #24]
1000f86a:	8b1b      	ldrh	r3, [r3, #24]
1000f86c:	1c06      	adds	r6, r0, #0
1000f86e:	8623      	strh	r3, [r4, #48]	; 0x30
1000f870:	79c3      	ldrb	r3, [r0, #7]
1000f872:	7982      	ldrb	r2, [r0, #6]
1000f874:	021b      	lsls	r3, r3, #8
1000f876:	431a      	orrs	r2, r3
1000f878:	466b      	mov	r3, sp
1000f87a:	9207      	str	r2, [sp, #28]
1000f87c:	466a      	mov	r2, sp
1000f87e:	8b9b      	ldrh	r3, [r3, #28]
1000f880:	1852      	adds	r2, r2, r1
1000f882:	8663      	strh	r3, [r4, #50]	; 0x32
1000f884:	7a43      	ldrb	r3, [r0, #9]
1000f886:	1c01      	adds	r1, r0, #0
1000f888:	9308      	str	r3, [sp, #32]
1000f88a:	1c23      	adds	r3, r4, #0
1000f88c:	7812      	ldrb	r2, [r2, #0]
1000f88e:	3377      	adds	r3, #119	; 0x77
1000f890:	3478      	adds	r4, #120	; 0x78
1000f892:	701a      	strb	r2, [r3, #0]
1000f894:	310a      	adds	r1, #10
1000f896:	2206      	movs	r2, #6
1000f898:	4b1b      	ldr	r3, [pc, #108]	; (1000f908 <gapc_con_req_ind+0xcc>)
1000f89a:	1c20      	adds	r0, r4, #0
1000f89c:	4798      	blx	r3
1000f89e:	7c33      	ldrb	r3, [r6, #16]
1000f8a0:	9309      	str	r3, [sp, #36]	; 0x24
1000f8a2:	4b1a      	ldr	r3, [pc, #104]	; (1000f90c <gapc_con_req_ind+0xd0>)
1000f8a4:	4798      	blx	r3
1000f8a6:	4e1a      	ldr	r6, [pc, #104]	; (1000f910 <gapc_con_req_ind+0xd4>)
1000f8a8:	1e07      	subs	r7, r0, #0
1000f8aa:	2f07      	cmp	r7, #7
1000f8ac:	d81b      	bhi.n	1000f8e6 <gapc_con_req_ind+0xaa>
1000f8ae:	2312      	movs	r3, #18
1000f8b0:	4343      	muls	r3, r0
1000f8b2:	18f0      	adds	r0, r6, r3
1000f8b4:	8145      	strh	r5, [r0, #10]
1000f8b6:	4669      	mov	r1, sp
1000f8b8:	2524      	movs	r5, #36	; 0x24
1000f8ba:	1949      	adds	r1, r1, r5
1000f8bc:	7809      	ldrb	r1, [r1, #0]
1000f8be:	2206      	movs	r2, #6
1000f8c0:	54f1      	strb	r1, [r6, r3]
1000f8c2:	2120      	movs	r1, #32
1000f8c4:	466b      	mov	r3, sp
1000f8c6:	185b      	adds	r3, r3, r1
1000f8c8:	781b      	ldrb	r3, [r3, #0]
1000f8ca:	1c21      	adds	r1, r4, #0
1000f8cc:	7043      	strb	r3, [r0, #1]
1000f8ce:	466b      	mov	r3, sp
1000f8d0:	8a9b      	ldrh	r3, [r3, #20]
1000f8d2:	3002      	adds	r0, #2
1000f8d4:	8143      	strh	r3, [r0, #10]
1000f8d6:	466b      	mov	r3, sp
1000f8d8:	8b1b      	ldrh	r3, [r3, #24]
1000f8da:	8183      	strh	r3, [r0, #12]
1000f8dc:	466b      	mov	r3, sp
1000f8de:	8b9b      	ldrh	r3, [r3, #28]
1000f8e0:	81c3      	strh	r3, [r0, #14]
1000f8e2:	4b09      	ldr	r3, [pc, #36]	; (1000f908 <gapc_con_req_ind+0xcc>)
1000f8e4:	4798      	blx	r3
1000f8e6:	2112      	movs	r1, #18
1000f8e8:	2300      	movs	r3, #0
1000f8ea:	434f      	muls	r7, r1
1000f8ec:	9300      	str	r3, [sp, #0]
1000f8ee:	9301      	str	r3, [sp, #4]
1000f8f0:	19f6      	adds	r6, r6, r7
1000f8f2:	8971      	ldrh	r1, [r6, #10]
1000f8f4:	4a07      	ldr	r2, [pc, #28]	; (1000f914 <gapc_con_req_ind+0xd8>)
1000f8f6:	9102      	str	r1, [sp, #8]
1000f8f8:	1c10      	adds	r0, r2, #0
1000f8fa:	1c19      	adds	r1, r3, #0
1000f8fc:	4c06      	ldr	r4, [pc, #24]	; (1000f918 <gapc_con_req_ind+0xdc>)
1000f8fe:	47a0      	blx	r4
1000f900:	b00b      	add	sp, #44	; 0x2c
1000f902:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f904:	1001e22a 	.word	0x1001e22a
1000f908:	100182cf 	.word	0x100182cf
1000f90c:	1000f681 	.word	0x1000f681
1000f910:	1001e19a 	.word	0x1001e19a
1000f914:	1001d150 	.word	0x1001d150
1000f918:	1000f779 	.word	0x1000f779

1000f91c <gapc_disconnect_cmd_handler>:
1000f91c:	2204      	movs	r2, #4
1000f91e:	b510      	push	{r4, lr}
1000f920:	4b0c      	ldr	r3, [pc, #48]	; (1000f954 <gapc_disconnect_cmd_handler+0x38>)
1000f922:	2400      	movs	r4, #0
1000f924:	701a      	strb	r2, [r3, #0]
1000f926:	320a      	adds	r2, #10
1000f928:	705a      	strb	r2, [r3, #1]
1000f92a:	709a      	strb	r2, [r3, #2]
1000f92c:	4a0a      	ldr	r2, [pc, #40]	; (1000f958 <gapc_disconnect_cmd_handler+0x3c>)
1000f92e:	70d9      	strb	r1, [r3, #3]
1000f930:	8811      	ldrh	r1, [r2, #0]
1000f932:	8812      	ldrh	r2, [r2, #0]
1000f934:	7119      	strb	r1, [r3, #4]
1000f936:	0a12      	lsrs	r2, r2, #8
1000f938:	715a      	strb	r2, [r3, #5]
1000f93a:	2201      	movs	r2, #1
1000f93c:	721a      	strb	r2, [r3, #8]
1000f93e:	1892      	adds	r2, r2, r2
1000f940:	7258      	strb	r0, [r3, #9]
1000f942:	719a      	strb	r2, [r3, #6]
1000f944:	71dc      	strb	r4, [r3, #7]
1000f946:	1c18      	adds	r0, r3, #0
1000f948:	210a      	movs	r1, #10
1000f94a:	4b04      	ldr	r3, [pc, #16]	; (1000f95c <gapc_disconnect_cmd_handler+0x40>)
1000f94c:	4798      	blx	r3
1000f94e:	1c20      	adds	r0, r4, #0
1000f950:	bd10      	pop	{r4, pc}
1000f952:	46c0      	nop			; (mov r8, r8)
1000f954:	1001e508 	.word	0x1001e508
1000f958:	1001e198 	.word	0x1001e198
1000f95c:	1000f475 	.word	0x1000f475

1000f960 <gapc_disconnect_ind>:
1000f960:	1c02      	adds	r2, r0, #0
1000f962:	b508      	push	{r3, lr}
1000f964:	7843      	ldrb	r3, [r0, #1]
1000f966:	7800      	ldrb	r0, [r0, #0]
1000f968:	021b      	lsls	r3, r3, #8
1000f96a:	4318      	orrs	r0, r3
1000f96c:	8008      	strh	r0, [r1, #0]
1000f96e:	7893      	ldrb	r3, [r2, #2]
1000f970:	708b      	strb	r3, [r1, #2]
1000f972:	2100      	movs	r1, #0
1000f974:	4b05      	ldr	r3, [pc, #20]	; (1000f98c <gapc_disconnect_ind+0x2c>)
1000f976:	4798      	blx	r3
1000f978:	2807      	cmp	r0, #7
1000f97a:	d806      	bhi.n	1000f98a <gapc_disconnect_ind+0x2a>
1000f97c:	2312      	movs	r3, #18
1000f97e:	4358      	muls	r0, r3
1000f980:	4b03      	ldr	r3, [pc, #12]	; (1000f990 <gapc_disconnect_ind+0x30>)
1000f982:	1818      	adds	r0, r3, r0
1000f984:	2301      	movs	r3, #1
1000f986:	425b      	negs	r3, r3
1000f988:	8143      	strh	r3, [r0, #10]
1000f98a:	bd08      	pop	{r3, pc}
1000f98c:	1000f645 	.word	0x1000f645
1000f990:	1001e19a 	.word	0x1001e19a

1000f994 <gapc_bond_cmd_handler>:
1000f994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f996:	9300      	str	r3, [sp, #0]
1000f998:	2312      	movs	r3, #18
1000f99a:	1c04      	adds	r4, r0, #0
1000f99c:	a808      	add	r0, sp, #32
1000f99e:	7807      	ldrb	r7, [r0, #0]
1000f9a0:	a809      	add	r0, sp, #36	; 0x24
1000f9a2:	7806      	ldrb	r6, [r0, #0]
1000f9a4:	a80a      	add	r0, sp, #40	; 0x28
1000f9a6:	7805      	ldrb	r5, [r0, #0]
1000f9a8:	a80b      	add	r0, sp, #44	; 0x2c
1000f9aa:	7800      	ldrb	r0, [r0, #0]
1000f9ac:	9001      	str	r0, [sp, #4]
1000f9ae:	4810      	ldr	r0, [pc, #64]	; (1000f9f0 <gapc_bond_cmd_handler+0x5c>)
1000f9b0:	7003      	strb	r3, [r0, #0]
1000f9b2:	230e      	movs	r3, #14
1000f9b4:	70c4      	strb	r4, [r0, #3]
1000f9b6:	4c0f      	ldr	r4, [pc, #60]	; (1000f9f4 <gapc_bond_cmd_handler+0x60>)
1000f9b8:	7043      	strb	r3, [r0, #1]
1000f9ba:	7083      	strb	r3, [r0, #2]
1000f9bc:	8823      	ldrh	r3, [r4, #0]
1000f9be:	8824      	ldrh	r4, [r4, #0]
1000f9c0:	7103      	strb	r3, [r0, #4]
1000f9c2:	466b      	mov	r3, sp
1000f9c4:	781b      	ldrb	r3, [r3, #0]
1000f9c6:	0a24      	lsrs	r4, r4, #8
1000f9c8:	72c3      	strb	r3, [r0, #11]
1000f9ca:	466b      	mov	r3, sp
1000f9cc:	791b      	ldrb	r3, [r3, #4]
1000f9ce:	7144      	strb	r4, [r0, #5]
1000f9d0:	73c3      	strb	r3, [r0, #15]
1000f9d2:	2308      	movs	r3, #8
1000f9d4:	7183      	strb	r3, [r0, #6]
1000f9d6:	2300      	movs	r3, #0
1000f9d8:	240a      	movs	r4, #10
1000f9da:	7241      	strb	r1, [r0, #9]
1000f9dc:	71c3      	strb	r3, [r0, #7]
1000f9de:	2110      	movs	r1, #16
1000f9e0:	4b05      	ldr	r3, [pc, #20]	; (1000f9f8 <gapc_bond_cmd_handler+0x64>)
1000f9e2:	7307      	strb	r7, [r0, #12]
1000f9e4:	7346      	strb	r6, [r0, #13]
1000f9e6:	7385      	strb	r5, [r0, #14]
1000f9e8:	7204      	strb	r4, [r0, #8]
1000f9ea:	7282      	strb	r2, [r0, #10]
1000f9ec:	4798      	blx	r3
1000f9ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f9f0:	1001e508 	.word	0x1001e508
1000f9f4:	1001e198 	.word	0x1001e198
1000f9f8:	1000f475 	.word	0x1000f475

1000f9fc <gapc_bond_ind>:
1000f9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f9fe:	780e      	ldrb	r6, [r1, #0]
1000fa00:	1c03      	adds	r3, r0, #0
1000fa02:	1eb0      	subs	r0, r6, #2
1000fa04:	2805      	cmp	r0, #5
1000fa06:	d85d      	bhi.n	1000fac4 <gapc_bond_ind+0xc8>
1000fa08:	1c15      	adds	r5, r2, #0
1000fa0a:	1c0c      	adds	r4, r1, #0
1000fa0c:	f005 fac8 	bl	10014fa0 <__gnu_thumb1_case_uqi>
1000fa10:	2f5a030d 	.word	0x2f5a030d
1000fa14:	4740      	.short	0x4740
1000fa16:	2009      	movs	r0, #9
1000fa18:	2a00      	cmp	r2, #0
1000fa1a:	d054      	beq.n	1000fac6 <gapc_bond_ind+0xca>
1000fa1c:	0a1b      	lsrs	r3, r3, #8
1000fa1e:	8053      	strh	r3, [r2, #2]
1000fa20:	788b      	ldrb	r3, [r1, #2]
1000fa22:	4829      	ldr	r0, [pc, #164]	; (1000fac8 <gapc_bond_ind+0xcc>)
1000fa24:	7113      	strb	r3, [r2, #4]
1000fa26:	2100      	movs	r1, #0
1000fa28:	e01c      	b.n	1000fa64 <gapc_bond_ind+0x68>
1000fa2a:	2009      	movs	r0, #9
1000fa2c:	2a00      	cmp	r2, #0
1000fa2e:	d04a      	beq.n	1000fac6 <gapc_bond_ind+0xca>
1000fa30:	4c25      	ldr	r4, [pc, #148]	; (1000fac8 <gapc_bond_ind+0xcc>)
1000fa32:	0a1b      	lsrs	r3, r3, #8
1000fa34:	8053      	strh	r3, [r2, #2]
1000fa36:	788b      	ldrb	r3, [r1, #2]
1000fa38:	2700      	movs	r7, #0
1000fa3a:	1c10      	adds	r0, r2, #0
1000fa3c:	1c21      	adds	r1, r4, #0
1000fa3e:	7013      	strb	r3, [r2, #0]
1000fa40:	4e22      	ldr	r6, [pc, #136]	; (1000facc <gapc_bond_ind+0xd0>)
1000fa42:	7117      	strb	r7, [r2, #4]
1000fa44:	312e      	adds	r1, #46	; 0x2e
1000fa46:	2217      	movs	r2, #23
1000fa48:	3032      	adds	r0, #50	; 0x32
1000fa4a:	47b0      	blx	r6
1000fa4c:	1c28      	adds	r0, r5, #0
1000fa4e:	1c21      	adds	r1, r4, #0
1000fa50:	2210      	movs	r2, #16
1000fa52:	311e      	adds	r1, #30
1000fa54:	3022      	adds	r0, #34	; 0x22
1000fa56:	47b0      	blx	r6
1000fa58:	1ca1      	adds	r1, r4, #2
1000fa5a:	1da8      	adds	r0, r5, #6
1000fa5c:	221c      	movs	r2, #28
1000fa5e:	47b0      	blx	r6
1000fa60:	1c20      	adds	r0, r4, #0
1000fa62:	1c39      	adds	r1, r7, #0
1000fa64:	2246      	movs	r2, #70	; 0x46
1000fa66:	4b1a      	ldr	r3, [pc, #104]	; (1000fad0 <gapc_bond_ind+0xd4>)
1000fa68:	4798      	blx	r3
1000fa6a:	2009      	movs	r0, #9
1000fa6c:	e02b      	b.n	1000fac6 <gapc_bond_ind+0xca>
1000fa6e:	4d16      	ldr	r5, [pc, #88]	; (1000fac8 <gapc_bond_ind+0xcc>)
1000fa70:	3102      	adds	r1, #2
1000fa72:	1c28      	adds	r0, r5, #0
1000fa74:	2210      	movs	r2, #16
1000fa76:	4e15      	ldr	r6, [pc, #84]	; (1000facc <gapc_bond_ind+0xd0>)
1000fa78:	302e      	adds	r0, #46	; 0x2e
1000fa7a:	47b0      	blx	r6
1000fa7c:	1c28      	adds	r0, r5, #0
1000fa7e:	1c21      	adds	r1, r4, #0
1000fa80:	303f      	adds	r0, #63	; 0x3f
1000fa82:	3112      	adds	r1, #18
1000fa84:	2206      	movs	r2, #6
1000fa86:	47b0      	blx	r6
1000fa88:	7e23      	ldrb	r3, [r4, #24]
1000fa8a:	353e      	adds	r5, #62	; 0x3e
1000fa8c:	702b      	strb	r3, [r5, #0]
1000fa8e:	e019      	b.n	1000fac4 <gapc_bond_ind+0xc8>
1000fa90:	480d      	ldr	r0, [pc, #52]	; (1000fac8 <gapc_bond_ind+0xcc>)
1000fa92:	3102      	adds	r1, #2
1000fa94:	2210      	movs	r2, #16
1000fa96:	4b0d      	ldr	r3, [pc, #52]	; (1000facc <gapc_bond_ind+0xd0>)
1000fa98:	301e      	adds	r0, #30
1000fa9a:	4798      	blx	r3
1000fa9c:	e012      	b.n	1000fac4 <gapc_bond_ind+0xc8>
1000fa9e:	4d0a      	ldr	r5, [pc, #40]	; (1000fac8 <gapc_bond_ind+0xcc>)
1000faa0:	3102      	adds	r1, #2
1000faa2:	2210      	movs	r2, #16
1000faa4:	4e09      	ldr	r6, [pc, #36]	; (1000facc <gapc_bond_ind+0xd0>)
1000faa6:	1ca8      	adds	r0, r5, #2
1000faa8:	47b0      	blx	r6
1000faaa:	1c28      	adds	r0, r5, #0
1000faac:	1c21      	adds	r1, r4, #0
1000faae:	7ce3      	ldrb	r3, [r4, #19]
1000fab0:	7ca2      	ldrb	r2, [r4, #18]
1000fab2:	021b      	lsls	r3, r3, #8
1000fab4:	4313      	orrs	r3, r2
1000fab6:	3014      	adds	r0, #20
1000fab8:	3114      	adds	r1, #20
1000faba:	2208      	movs	r2, #8
1000fabc:	826b      	strh	r3, [r5, #18]
1000fabe:	47b0      	blx	r6
1000fac0:	7f23      	ldrb	r3, [r4, #28]
1000fac2:	772b      	strb	r3, [r5, #28]
1000fac4:	2000      	movs	r0, #0
1000fac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000fac8:	1001d180 	.word	0x1001d180
1000facc:	100182cf 	.word	0x100182cf
1000fad0:	1001830b 	.word	0x1001830b

1000fad4 <gapc_bond_req_ind>:
1000fad4:	b570      	push	{r4, r5, r6, lr}
1000fad6:	780c      	ldrb	r4, [r1, #0]
1000fad8:	1c03      	adds	r3, r0, #0
1000fada:	7849      	ldrb	r1, [r1, #1]
1000fadc:	2c07      	cmp	r4, #7
1000fade:	d85c      	bhi.n	1000fb9a <gapc_bond_req_ind+0xc6>
1000fae0:	1c20      	adds	r0, r4, #0
1000fae2:	f005 fa5d 	bl	10014fa0 <__gnu_thumb1_case_uqi>
1000fae6:	5a04      	.short	0x5a04
1000fae8:	5a0b5a5a 	.word	0x5a0b5a5a
1000faec:	1f1f      	.short	0x1f1f
1000faee:	200a      	movs	r0, #10
1000faf0:	2a00      	cmp	r2, #0
1000faf2:	d053      	beq.n	1000fb9c <gapc_bond_req_ind+0xc8>
1000faf4:	0a1b      	lsrs	r3, r3, #8
1000faf6:	8013      	strh	r3, [r2, #0]
1000faf8:	7091      	strb	r1, [r2, #2]
1000fafa:	e04f      	b.n	1000fb9c <gapc_bond_req_ind+0xc8>
1000fafc:	2a00      	cmp	r2, #0
1000fafe:	d00b      	beq.n	1000fb18 <gapc_bond_req_ind+0x44>
1000fb00:	0a1b      	lsrs	r3, r3, #8
1000fb02:	8013      	strh	r3, [r2, #0]
1000fb04:	2900      	cmp	r1, #0
1000fb06:	d102      	bne.n	1000fb0e <gapc_bond_req_ind+0x3a>
1000fb08:	2301      	movs	r3, #1
1000fb0a:	7093      	strb	r3, [r2, #2]
1000fb0c:	e004      	b.n	1000fb18 <gapc_bond_req_ind+0x44>
1000fb0e:	2300      	movs	r3, #0
1000fb10:	7093      	strb	r3, [r2, #2]
1000fb12:	2902      	cmp	r1, #2
1000fb14:	d102      	bne.n	1000fb1c <gapc_bond_req_ind+0x48>
1000fb16:	70d3      	strb	r3, [r2, #3]
1000fb18:	200c      	movs	r0, #12
1000fb1a:	e03f      	b.n	1000fb9c <gapc_bond_req_ind+0xc8>
1000fb1c:	2901      	cmp	r1, #1
1000fb1e:	d1fb      	bne.n	1000fb18 <gapc_bond_req_ind+0x44>
1000fb20:	70d1      	strb	r1, [r2, #3]
1000fb22:	e7f9      	b.n	1000fb18 <gapc_bond_req_ind+0x44>
1000fb24:	2214      	movs	r2, #20
1000fb26:	481e      	ldr	r0, [pc, #120]	; (1000fba0 <gapc_bond_req_ind+0xcc>)
1000fb28:	0a1b      	lsrs	r3, r3, #8
1000fb2a:	70c3      	strb	r3, [r0, #3]
1000fb2c:	4b1d      	ldr	r3, [pc, #116]	; (1000fba4 <gapc_bond_req_ind+0xd0>)
1000fb2e:	7002      	strb	r2, [r0, #0]
1000fb30:	3a06      	subs	r2, #6
1000fb32:	7042      	strb	r2, [r0, #1]
1000fb34:	7082      	strb	r2, [r0, #2]
1000fb36:	881a      	ldrh	r2, [r3, #0]
1000fb38:	881b      	ldrh	r3, [r3, #0]
1000fb3a:	4e1b      	ldr	r6, [pc, #108]	; (1000fba8 <gapc_bond_req_ind+0xd4>)
1000fb3c:	0a1b      	lsrs	r3, r3, #8
1000fb3e:	7143      	strb	r3, [r0, #5]
1000fb40:	2301      	movs	r3, #1
1000fb42:	7102      	strb	r2, [r0, #4]
1000fb44:	7204      	strb	r4, [r0, #8]
1000fb46:	7243      	strb	r3, [r0, #9]
1000fb48:	1c05      	adds	r5, r0, #0
1000fb4a:	1c31      	adds	r1, r6, #0
1000fb4c:	300a      	adds	r0, #10
1000fb4e:	2c07      	cmp	r4, #7
1000fb50:	d116      	bne.n	1000fb80 <gapc_bond_req_ind+0xac>
1000fb52:	317e      	adds	r1, #126	; 0x7e
1000fb54:	2210      	movs	r2, #16
1000fb56:	4c15      	ldr	r4, [pc, #84]	; (1000fbac <gapc_bond_req_ind+0xd8>)
1000fb58:	47a0      	blx	r4
1000fb5a:	1c33      	adds	r3, r6, #0
1000fb5c:	1c31      	adds	r1, r6, #0
1000fb5e:	1c28      	adds	r0, r5, #0
1000fb60:	338e      	adds	r3, #142	; 0x8e
1000fb62:	881b      	ldrh	r3, [r3, #0]
1000fb64:	3190      	adds	r1, #144	; 0x90
1000fb66:	76ab      	strb	r3, [r5, #26]
1000fb68:	2208      	movs	r2, #8
1000fb6a:	0a1b      	lsrs	r3, r3, #8
1000fb6c:	301c      	adds	r0, #28
1000fb6e:	76eb      	strb	r3, [r5, #27]
1000fb70:	47a0      	blx	r4
1000fb72:	1c31      	adds	r1, r6, #0
1000fb74:	3198      	adds	r1, #152	; 0x98
1000fb76:	780a      	ldrb	r2, [r1, #0]
1000fb78:	1d6b      	adds	r3, r5, #5
1000fb7a:	77da      	strb	r2, [r3, #31]
1000fb7c:	2125      	movs	r1, #37	; 0x25
1000fb7e:	e004      	b.n	1000fb8a <gapc_bond_req_ind+0xb6>
1000fb80:	319a      	adds	r1, #154	; 0x9a
1000fb82:	2210      	movs	r2, #16
1000fb84:	4b09      	ldr	r3, [pc, #36]	; (1000fbac <gapc_bond_req_ind+0xd8>)
1000fb86:	4798      	blx	r3
1000fb88:	211a      	movs	r1, #26
1000fb8a:	1c0b      	adds	r3, r1, #0
1000fb8c:	2400      	movs	r4, #0
1000fb8e:	3b08      	subs	r3, #8
1000fb90:	71ab      	strb	r3, [r5, #6]
1000fb92:	1c28      	adds	r0, r5, #0
1000fb94:	4b06      	ldr	r3, [pc, #24]	; (1000fbb0 <gapc_bond_req_ind+0xdc>)
1000fb96:	71ec      	strb	r4, [r5, #7]
1000fb98:	4798      	blx	r3
1000fb9a:	2000      	movs	r0, #0
1000fb9c:	bd70      	pop	{r4, r5, r6, pc}
1000fb9e:	46c0      	nop			; (mov r8, r8)
1000fba0:	1001e508 	.word	0x1001e508
1000fba4:	1001e198 	.word	0x1001e198
1000fba8:	1001e22a 	.word	0x1001e22a
1000fbac:	100182cf 	.word	0x100182cf
1000fbb0:	1000f475 	.word	0x1000f475

1000fbb4 <gapc_bond_cfm_handler_pair_resp>:
1000fbb4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fbb6:	b085      	sub	sp, #20
1000fbb8:	1c07      	adds	r7, r0, #0
1000fbba:	a80a      	add	r0, sp, #40	; 0x28
1000fbbc:	7806      	ldrb	r6, [r0, #0]
1000fbbe:	a80b      	add	r0, sp, #44	; 0x2c
1000fbc0:	7805      	ldrb	r5, [r0, #0]
1000fbc2:	a80c      	add	r0, sp, #48	; 0x30
1000fbc4:	7800      	ldrb	r0, [r0, #0]
1000fbc6:	2414      	movs	r4, #20
1000fbc8:	9002      	str	r0, [sp, #8]
1000fbca:	a80d      	add	r0, sp, #52	; 0x34
1000fbcc:	7800      	ldrb	r0, [r0, #0]
1000fbce:	9301      	str	r3, [sp, #4]
1000fbd0:	9003      	str	r0, [sp, #12]
1000fbd2:	a80e      	add	r0, sp, #56	; 0x38
1000fbd4:	8800      	ldrh	r0, [r0, #0]
1000fbd6:	4684      	mov	ip, r0
1000fbd8:	4812      	ldr	r0, [pc, #72]	; (1000fc24 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000fbda:	7004      	strb	r4, [r0, #0]
1000fbdc:	3c06      	subs	r4, #6
1000fbde:	7044      	strb	r4, [r0, #1]
1000fbe0:	7084      	strb	r4, [r0, #2]
1000fbe2:	4664      	mov	r4, ip
1000fbe4:	70c4      	strb	r4, [r0, #3]
1000fbe6:	4c10      	ldr	r4, [pc, #64]	; (1000fc28 <gapc_bond_cfm_handler_pair_resp+0x74>)
1000fbe8:	7247      	strb	r7, [r0, #9]
1000fbea:	8823      	ldrh	r3, [r4, #0]
1000fbec:	8824      	ldrh	r4, [r4, #0]
1000fbee:	7103      	strb	r3, [r0, #4]
1000fbf0:	466b      	mov	r3, sp
1000fbf2:	791b      	ldrb	r3, [r3, #4]
1000fbf4:	0a24      	lsrs	r4, r4, #8
1000fbf6:	7303      	strb	r3, [r0, #12]
1000fbf8:	466b      	mov	r3, sp
1000fbfa:	7a1b      	ldrb	r3, [r3, #8]
1000fbfc:	7144      	strb	r4, [r0, #5]
1000fbfe:	73c3      	strb	r3, [r0, #15]
1000fc00:	466b      	mov	r3, sp
1000fc02:	7b1b      	ldrb	r3, [r3, #12]
1000fc04:	2401      	movs	r4, #1
1000fc06:	7403      	strb	r3, [r0, #16]
1000fc08:	2309      	movs	r3, #9
1000fc0a:	7183      	strb	r3, [r0, #6]
1000fc0c:	2300      	movs	r3, #0
1000fc0e:	7204      	strb	r4, [r0, #8]
1000fc10:	7281      	strb	r1, [r0, #10]
1000fc12:	72c2      	strb	r2, [r0, #11]
1000fc14:	7346      	strb	r6, [r0, #13]
1000fc16:	7385      	strb	r5, [r0, #14]
1000fc18:	71c3      	strb	r3, [r0, #7]
1000fc1a:	2111      	movs	r1, #17
1000fc1c:	4b03      	ldr	r3, [pc, #12]	; (1000fc2c <gapc_bond_cfm_handler_pair_resp+0x78>)
1000fc1e:	4798      	blx	r3
1000fc20:	b005      	add	sp, #20
1000fc22:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fc24:	1001e508 	.word	0x1001e508
1000fc28:	1001e198 	.word	0x1001e198
1000fc2c:	1000f475 	.word	0x1000f475

1000fc30 <gapc_bond_cfm_handler_key_exch>:
1000fc30:	b538      	push	{r3, r4, r5, lr}
1000fc32:	2514      	movs	r5, #20
1000fc34:	4c0d      	ldr	r4, [pc, #52]	; (1000fc6c <gapc_bond_cfm_handler_key_exch+0x3c>)
1000fc36:	70e3      	strb	r3, [r4, #3]
1000fc38:	4b0d      	ldr	r3, [pc, #52]	; (1000fc70 <gapc_bond_cfm_handler_key_exch+0x40>)
1000fc3a:	7025      	strb	r5, [r4, #0]
1000fc3c:	3d06      	subs	r5, #6
1000fc3e:	7065      	strb	r5, [r4, #1]
1000fc40:	70a5      	strb	r5, [r4, #2]
1000fc42:	881d      	ldrh	r5, [r3, #0]
1000fc44:	881b      	ldrh	r3, [r3, #0]
1000fc46:	7220      	strb	r0, [r4, #8]
1000fc48:	0a1b      	lsrs	r3, r3, #8
1000fc4a:	7163      	strb	r3, [r4, #5]
1000fc4c:	7261      	strb	r1, [r4, #9]
1000fc4e:	4b09      	ldr	r3, [pc, #36]	; (1000fc74 <gapc_bond_cfm_handler_key_exch+0x44>)
1000fc50:	1c11      	adds	r1, r2, #0
1000fc52:	4809      	ldr	r0, [pc, #36]	; (1000fc78 <gapc_bond_cfm_handler_key_exch+0x48>)
1000fc54:	2210      	movs	r2, #16
1000fc56:	7125      	strb	r5, [r4, #4]
1000fc58:	4798      	blx	r3
1000fc5a:	2312      	movs	r3, #18
1000fc5c:	71a3      	strb	r3, [r4, #6]
1000fc5e:	2300      	movs	r3, #0
1000fc60:	1c20      	adds	r0, r4, #0
1000fc62:	71e3      	strb	r3, [r4, #7]
1000fc64:	211a      	movs	r1, #26
1000fc66:	4b05      	ldr	r3, [pc, #20]	; (1000fc7c <gapc_bond_cfm_handler_key_exch+0x4c>)
1000fc68:	4798      	blx	r3
1000fc6a:	bd38      	pop	{r3, r4, r5, pc}
1000fc6c:	1001e508 	.word	0x1001e508
1000fc70:	1001e198 	.word	0x1001e198
1000fc74:	100182cf 	.word	0x100182cf
1000fc78:	1001e512 	.word	0x1001e512
1000fc7c:	1000f475 	.word	0x1000f475

1000fc80 <gapc_security_cmd_handler>:
1000fc80:	221a      	movs	r2, #26
1000fc82:	b508      	push	{r3, lr}
1000fc84:	4b0b      	ldr	r3, [pc, #44]	; (1000fcb4 <gapc_security_cmd_handler+0x34>)
1000fc86:	701a      	strb	r2, [r3, #0]
1000fc88:	3a0c      	subs	r2, #12
1000fc8a:	705a      	strb	r2, [r3, #1]
1000fc8c:	709a      	strb	r2, [r3, #2]
1000fc8e:	4a0a      	ldr	r2, [pc, #40]	; (1000fcb8 <gapc_security_cmd_handler+0x38>)
1000fc90:	70d8      	strb	r0, [r3, #3]
1000fc92:	8810      	ldrh	r0, [r2, #0]
1000fc94:	8812      	ldrh	r2, [r2, #0]
1000fc96:	7118      	strb	r0, [r3, #4]
1000fc98:	0a12      	lsrs	r2, r2, #8
1000fc9a:	715a      	strb	r2, [r3, #5]
1000fc9c:	220c      	movs	r2, #12
1000fc9e:	721a      	strb	r2, [r3, #8]
1000fca0:	3a0a      	subs	r2, #10
1000fca2:	719a      	strb	r2, [r3, #6]
1000fca4:	2200      	movs	r2, #0
1000fca6:	7259      	strb	r1, [r3, #9]
1000fca8:	71da      	strb	r2, [r3, #7]
1000fcaa:	1c18      	adds	r0, r3, #0
1000fcac:	210a      	movs	r1, #10
1000fcae:	4b03      	ldr	r3, [pc, #12]	; (1000fcbc <gapc_security_cmd_handler+0x3c>)
1000fcb0:	4798      	blx	r3
1000fcb2:	bd08      	pop	{r3, pc}
1000fcb4:	1001e508 	.word	0x1001e508
1000fcb8:	1001e198 	.word	0x1001e198
1000fcbc:	1000f475 	.word	0x1000f475

1000fcc0 <gapc_encrypt_cmd_handler>:
1000fcc0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fcc2:	2500      	movs	r5, #0
1000fcc4:	b089      	sub	sp, #36	; 0x24
1000fcc6:	9306      	str	r3, [sp, #24]
1000fcc8:	ab0e      	add	r3, sp, #56	; 0x38
1000fcca:	781b      	ldrb	r3, [r3, #0]
1000fccc:	1c17      	adds	r7, r2, #0
1000fcce:	9307      	str	r3, [sp, #28]
1000fcd0:	ab0f      	add	r3, sp, #60	; 0x3c
1000fcd2:	781b      	ldrb	r3, [r3, #0]
1000fcd4:	4a19      	ldr	r2, [pc, #100]	; (1000fd3c <gapc_encrypt_cmd_handler+0x7c>)
1000fcd6:	1c06      	adds	r6, r0, #0
1000fcd8:	9105      	str	r1, [sp, #20]
1000fcda:	9300      	str	r3, [sp, #0]
1000fcdc:	9002      	str	r0, [sp, #8]
1000fcde:	1c29      	adds	r1, r5, #0
1000fce0:	1c2b      	adds	r3, r5, #0
1000fce2:	9501      	str	r5, [sp, #4]
1000fce4:	1c10      	adds	r0, r2, #0
1000fce6:	4c16      	ldr	r4, [pc, #88]	; (1000fd40 <gapc_encrypt_cmd_handler+0x80>)
1000fce8:	47a0      	blx	r4
1000fcea:	2316      	movs	r3, #22
1000fcec:	4c15      	ldr	r4, [pc, #84]	; (1000fd44 <gapc_encrypt_cmd_handler+0x84>)
1000fcee:	9905      	ldr	r1, [sp, #20]
1000fcf0:	7023      	strb	r3, [r4, #0]
1000fcf2:	3b08      	subs	r3, #8
1000fcf4:	7063      	strb	r3, [r4, #1]
1000fcf6:	70a3      	strb	r3, [r4, #2]
1000fcf8:	4b13      	ldr	r3, [pc, #76]	; (1000fd48 <gapc_encrypt_cmd_handler+0x88>)
1000fcfa:	70e6      	strb	r6, [r4, #3]
1000fcfc:	881a      	ldrh	r2, [r3, #0]
1000fcfe:	881b      	ldrh	r3, [r3, #0]
1000fd00:	7122      	strb	r2, [r4, #4]
1000fd02:	0a1b      	lsrs	r3, r3, #8
1000fd04:	7163      	strb	r3, [r4, #5]
1000fd06:	230b      	movs	r3, #11
1000fd08:	4e10      	ldr	r6, [pc, #64]	; (1000fd4c <gapc_encrypt_cmd_handler+0x8c>)
1000fd0a:	2210      	movs	r2, #16
1000fd0c:	4810      	ldr	r0, [pc, #64]	; (1000fd50 <gapc_encrypt_cmd_handler+0x90>)
1000fd0e:	7223      	strb	r3, [r4, #8]
1000fd10:	7265      	strb	r5, [r4, #9]
1000fd12:	47b0      	blx	r6
1000fd14:	0a3b      	lsrs	r3, r7, #8
1000fd16:	9906      	ldr	r1, [sp, #24]
1000fd18:	2208      	movs	r2, #8
1000fd1a:	480e      	ldr	r0, [pc, #56]	; (1000fd54 <gapc_encrypt_cmd_handler+0x94>)
1000fd1c:	76e3      	strb	r3, [r4, #27]
1000fd1e:	76a7      	strb	r7, [r4, #26]
1000fd20:	47b0      	blx	r6
1000fd22:	466a      	mov	r2, sp
1000fd24:	7f12      	ldrb	r2, [r2, #28]
1000fd26:	1d63      	adds	r3, r4, #5
1000fd28:	77da      	strb	r2, [r3, #31]
1000fd2a:	231d      	movs	r3, #29
1000fd2c:	1c20      	adds	r0, r4, #0
1000fd2e:	71a3      	strb	r3, [r4, #6]
1000fd30:	2125      	movs	r1, #37	; 0x25
1000fd32:	4b09      	ldr	r3, [pc, #36]	; (1000fd58 <gapc_encrypt_cmd_handler+0x98>)
1000fd34:	71e5      	strb	r5, [r4, #7]
1000fd36:	4798      	blx	r3
1000fd38:	b009      	add	sp, #36	; 0x24
1000fd3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fd3c:	1001d160 	.word	0x1001d160
1000fd40:	1000f779 	.word	0x1000f779
1000fd44:	1001e508 	.word	0x1001e508
1000fd48:	1001e198 	.word	0x1001e198
1000fd4c:	100182cf 	.word	0x100182cf
1000fd50:	1001e512 	.word	0x1001e512
1000fd54:	1001e524 	.word	0x1001e524
1000fd58:	1000f475 	.word	0x1000f475

1000fd5c <gapc_encrypt_req_ind>:
1000fd5c:	b508      	push	{r3, lr}
1000fd5e:	0a00      	lsrs	r0, r0, #8
1000fd60:	8010      	strh	r0, [r2, #0]
1000fd62:	784b      	ldrb	r3, [r1, #1]
1000fd64:	7808      	ldrb	r0, [r1, #0]
1000fd66:	021b      	lsls	r3, r3, #8
1000fd68:	4303      	orrs	r3, r0
1000fd6a:	8053      	strh	r3, [r2, #2]
1000fd6c:	1d10      	adds	r0, r2, #4
1000fd6e:	3102      	adds	r1, #2
1000fd70:	2208      	movs	r2, #8
1000fd72:	4b01      	ldr	r3, [pc, #4]	; (1000fd78 <gapc_encrypt_req_ind+0x1c>)
1000fd74:	4798      	blx	r3
1000fd76:	bd08      	pop	{r3, pc}
1000fd78:	100182cf 	.word	0x100182cf

1000fd7c <gapc_encrypt_cfm_handler>:
1000fd7c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fd7e:	2500      	movs	r5, #0
1000fd80:	b087      	sub	sp, #28
1000fd82:	9304      	str	r3, [sp, #16]
1000fd84:	ab0c      	add	r3, sp, #48	; 0x30
1000fd86:	781b      	ldrb	r3, [r3, #0]
1000fd88:	1c17      	adds	r7, r2, #0
1000fd8a:	4a15      	ldr	r2, [pc, #84]	; (1000fde0 <gapc_encrypt_cfm_handler+0x64>)
1000fd8c:	1c06      	adds	r6, r0, #0
1000fd8e:	9305      	str	r3, [sp, #20]
1000fd90:	9100      	str	r1, [sp, #0]
1000fd92:	9002      	str	r0, [sp, #8]
1000fd94:	1c29      	adds	r1, r5, #0
1000fd96:	1c2b      	adds	r3, r5, #0
1000fd98:	9501      	str	r5, [sp, #4]
1000fd9a:	1c10      	adds	r0, r2, #0
1000fd9c:	4c11      	ldr	r4, [pc, #68]	; (1000fde4 <gapc_encrypt_cfm_handler+0x68>)
1000fd9e:	47a0      	blx	r4
1000fda0:	2318      	movs	r3, #24
1000fda2:	4c11      	ldr	r4, [pc, #68]	; (1000fde8 <gapc_encrypt_cfm_handler+0x6c>)
1000fda4:	9904      	ldr	r1, [sp, #16]
1000fda6:	7023      	strb	r3, [r4, #0]
1000fda8:	3b0a      	subs	r3, #10
1000fdaa:	7063      	strb	r3, [r4, #1]
1000fdac:	70a3      	strb	r3, [r4, #2]
1000fdae:	4b0f      	ldr	r3, [pc, #60]	; (1000fdec <gapc_encrypt_cfm_handler+0x70>)
1000fdb0:	480f      	ldr	r0, [pc, #60]	; (1000fdf0 <gapc_encrypt_cfm_handler+0x74>)
1000fdb2:	881a      	ldrh	r2, [r3, #0]
1000fdb4:	881b      	ldrh	r3, [r3, #0]
1000fdb6:	7122      	strb	r2, [r4, #4]
1000fdb8:	0a1b      	lsrs	r3, r3, #8
1000fdba:	7163      	strb	r3, [r4, #5]
1000fdbc:	2210      	movs	r2, #16
1000fdbe:	4b0d      	ldr	r3, [pc, #52]	; (1000fdf4 <gapc_encrypt_cfm_handler+0x78>)
1000fdc0:	70e6      	strb	r6, [r4, #3]
1000fdc2:	7227      	strb	r7, [r4, #8]
1000fdc4:	4798      	blx	r3
1000fdc6:	466b      	mov	r3, sp
1000fdc8:	7d1b      	ldrb	r3, [r3, #20]
1000fdca:	1c20      	adds	r0, r4, #0
1000fdcc:	7663      	strb	r3, [r4, #25]
1000fdce:	2312      	movs	r3, #18
1000fdd0:	211a      	movs	r1, #26
1000fdd2:	71a3      	strb	r3, [r4, #6]
1000fdd4:	4b08      	ldr	r3, [pc, #32]	; (1000fdf8 <gapc_encrypt_cfm_handler+0x7c>)
1000fdd6:	71e5      	strb	r5, [r4, #7]
1000fdd8:	4798      	blx	r3
1000fdda:	b007      	add	sp, #28
1000fddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fdde:	46c0      	nop			; (mov r8, r8)
1000fde0:	1001d170 	.word	0x1001d170
1000fde4:	1000f779 	.word	0x1000f779
1000fde8:	1001e508 	.word	0x1001e508
1000fdec:	1001e198 	.word	0x1001e198
1000fdf0:	1001e511 	.word	0x1001e511
1000fdf4:	100182cf 	.word	0x100182cf
1000fdf8:	1000f475 	.word	0x1000f475

1000fdfc <gapc_encrypt_ind>:
1000fdfc:	780b      	ldrb	r3, [r1, #0]
1000fdfe:	0a00      	lsrs	r0, r0, #8
1000fe00:	70d3      	strb	r3, [r2, #3]
1000fe02:	2300      	movs	r3, #0
1000fe04:	8010      	strh	r0, [r2, #0]
1000fe06:	7093      	strb	r3, [r2, #2]
1000fe08:	4770      	bx	lr
	...

1000fe0c <gapc_param_update_cfm_handler>:
1000fe0c:	b538      	push	{r3, r4, r5, lr}
1000fe0e:	2410      	movs	r4, #16
1000fe10:	1c05      	adds	r5, r0, #0
1000fe12:	480e      	ldr	r0, [pc, #56]	; (1000fe4c <gapc_param_update_cfm_handler+0x40>)
1000fe14:	7004      	strb	r4, [r0, #0]
1000fe16:	3c02      	subs	r4, #2
1000fe18:	7044      	strb	r4, [r0, #1]
1000fe1a:	7084      	strb	r4, [r0, #2]
1000fe1c:	4c0c      	ldr	r4, [pc, #48]	; (1000fe50 <gapc_param_update_cfm_handler+0x44>)
1000fe1e:	70c5      	strb	r5, [r0, #3]
1000fe20:	8825      	ldrh	r5, [r4, #0]
1000fe22:	8824      	ldrh	r4, [r4, #0]
1000fe24:	72c3      	strb	r3, [r0, #11]
1000fe26:	0a1b      	lsrs	r3, r3, #8
1000fe28:	0a24      	lsrs	r4, r4, #8
1000fe2a:	7303      	strb	r3, [r0, #12]
1000fe2c:	2305      	movs	r3, #5
1000fe2e:	7144      	strb	r4, [r0, #5]
1000fe30:	2400      	movs	r4, #0
1000fe32:	7201      	strb	r1, [r0, #8]
1000fe34:	7242      	strb	r2, [r0, #9]
1000fe36:	7183      	strb	r3, [r0, #6]
1000fe38:	0a12      	lsrs	r2, r2, #8
1000fe3a:	210d      	movs	r1, #13
1000fe3c:	4b05      	ldr	r3, [pc, #20]	; (1000fe54 <gapc_param_update_cfm_handler+0x48>)
1000fe3e:	7105      	strb	r5, [r0, #4]
1000fe40:	7282      	strb	r2, [r0, #10]
1000fe42:	71c4      	strb	r4, [r0, #7]
1000fe44:	4798      	blx	r3
1000fe46:	1c20      	adds	r0, r4, #0
1000fe48:	bd38      	pop	{r3, r4, r5, pc}
1000fe4a:	46c0      	nop			; (mov r8, r8)
1000fe4c:	1001e508 	.word	0x1001e508
1000fe50:	1001e198 	.word	0x1001e198
1000fe54:	1000f475 	.word	0x1000f475

1000fe58 <gapc_param_updated_ind>:
1000fe58:	2300      	movs	r3, #0
1000fe5a:	0a00      	lsrs	r0, r0, #8
1000fe5c:	8010      	strh	r0, [r2, #0]
1000fe5e:	7093      	strb	r3, [r2, #2]
1000fe60:	784b      	ldrb	r3, [r1, #1]
1000fe62:	7808      	ldrb	r0, [r1, #0]
1000fe64:	021b      	lsls	r3, r3, #8
1000fe66:	4303      	orrs	r3, r0
1000fe68:	8093      	strh	r3, [r2, #4]
1000fe6a:	78cb      	ldrb	r3, [r1, #3]
1000fe6c:	7888      	ldrb	r0, [r1, #2]
1000fe6e:	021b      	lsls	r3, r3, #8
1000fe70:	4303      	orrs	r3, r0
1000fe72:	80d3      	strh	r3, [r2, #6]
1000fe74:	794b      	ldrb	r3, [r1, #5]
1000fe76:	7909      	ldrb	r1, [r1, #4]
1000fe78:	021b      	lsls	r3, r3, #8
1000fe7a:	430b      	orrs	r3, r1
1000fe7c:	2007      	movs	r0, #7
1000fe7e:	8113      	strh	r3, [r2, #8]
1000fe80:	4770      	bx	lr

1000fe82 <gapc_param_updated_req_ind>:
1000fe82:	0a00      	lsrs	r0, r0, #8
1000fe84:	8010      	strh	r0, [r2, #0]
1000fe86:	784b      	ldrb	r3, [r1, #1]
1000fe88:	7808      	ldrb	r0, [r1, #0]
1000fe8a:	021b      	lsls	r3, r3, #8
1000fe8c:	4303      	orrs	r3, r0
1000fe8e:	8053      	strh	r3, [r2, #2]
1000fe90:	78cb      	ldrb	r3, [r1, #3]
1000fe92:	7888      	ldrb	r0, [r1, #2]
1000fe94:	021b      	lsls	r3, r3, #8
1000fe96:	4303      	orrs	r3, r0
1000fe98:	8093      	strh	r3, [r2, #4]
1000fe9a:	794b      	ldrb	r3, [r1, #5]
1000fe9c:	7908      	ldrb	r0, [r1, #4]
1000fe9e:	021b      	lsls	r3, r3, #8
1000fea0:	4303      	orrs	r3, r0
1000fea2:	80d3      	strh	r3, [r2, #6]
1000fea4:	79cb      	ldrb	r3, [r1, #7]
1000fea6:	7989      	ldrb	r1, [r1, #6]
1000fea8:	021b      	lsls	r3, r3, #8
1000feaa:	430b      	orrs	r3, r1
1000feac:	2008      	movs	r0, #8
1000feae:	8113      	strh	r3, [r2, #8]
1000feb0:	4770      	bx	lr
	...

1000feb4 <gapc_dev_info_req_ind_handler>:
1000feb4:	b508      	push	{r3, lr}
1000feb6:	1c0b      	adds	r3, r1, #0
1000feb8:	0a01      	lsrs	r1, r0, #8
1000feba:	8011      	strh	r1, [r2, #0]
1000febc:	7818      	ldrb	r0, [r3, #0]
1000febe:	7090      	strb	r0, [r2, #2]
1000fec0:	2800      	cmp	r0, #0
1000fec2:	d104      	bne.n	1000fece <gapc_dev_info_req_ind_handler+0x1a>
1000fec4:	4b03      	ldr	r3, [pc, #12]	; (1000fed4 <gapc_dev_info_req_ind_handler+0x20>)
1000fec6:	33aa      	adds	r3, #170	; 0xaa
1000fec8:	881b      	ldrh	r3, [r3, #0]
1000feca:	2b00      	cmp	r3, #0
1000fecc:	d001      	beq.n	1000fed2 <gapc_dev_info_req_ind_handler+0x1e>
1000fece:	4b02      	ldr	r3, [pc, #8]	; (1000fed8 <gapc_dev_info_req_ind_handler+0x24>)
1000fed0:	4798      	blx	r3
1000fed2:	bd08      	pop	{r3, pc}
1000fed4:	1001e22a 	.word	0x1001e22a
1000fed8:	1000f585 	.word	0x1000f585

1000fedc <gapc_sec_req_ind>:
1000fedc:	0a00      	lsrs	r0, r0, #8
1000fede:	8010      	strh	r0, [r2, #0]
1000fee0:	7809      	ldrb	r1, [r1, #0]
1000fee2:	2301      	movs	r3, #1
1000fee4:	1c08      	adds	r0, r1, #0
1000fee6:	0889      	lsrs	r1, r1, #2
1000fee8:	4018      	ands	r0, r3
1000feea:	400b      	ands	r3, r1
1000feec:	70d0      	strb	r0, [r2, #3]
1000feee:	7113      	strb	r3, [r2, #4]
1000fef0:	4770      	bx	lr

1000fef2 <gapc_sign_counter_ind_handler>:
1000fef2:	0a00      	lsrs	r0, r0, #8
1000fef4:	8010      	strh	r0, [r2, #0]
1000fef6:	784b      	ldrb	r3, [r1, #1]
1000fef8:	0218      	lsls	r0, r3, #8
1000fefa:	788b      	ldrb	r3, [r1, #2]
1000fefc:	041b      	lsls	r3, r3, #16
1000fefe:	4303      	orrs	r3, r0
1000ff00:	7808      	ldrb	r0, [r1, #0]
1000ff02:	4303      	orrs	r3, r0
1000ff04:	78c8      	ldrb	r0, [r1, #3]
1000ff06:	0600      	lsls	r0, r0, #24
1000ff08:	4303      	orrs	r3, r0
1000ff0a:	6053      	str	r3, [r2, #4]
1000ff0c:	794b      	ldrb	r3, [r1, #5]
1000ff0e:	0218      	lsls	r0, r3, #8
1000ff10:	798b      	ldrb	r3, [r1, #6]
1000ff12:	041b      	lsls	r3, r3, #16
1000ff14:	4303      	orrs	r3, r0
1000ff16:	7908      	ldrb	r0, [r1, #4]
1000ff18:	79c9      	ldrb	r1, [r1, #7]
1000ff1a:	4303      	orrs	r3, r0
1000ff1c:	0609      	lsls	r1, r1, #24
1000ff1e:	430b      	orrs	r3, r1
1000ff20:	2000      	movs	r0, #0
1000ff22:	6093      	str	r3, [r2, #8]
1000ff24:	4770      	bx	lr
	...

1000ff28 <gapc_peer_att_info_ind_handler>:
1000ff28:	b510      	push	{r4, lr}
1000ff2a:	0a00      	lsrs	r0, r0, #8
1000ff2c:	8010      	strh	r0, [r2, #0]
1000ff2e:	7808      	ldrb	r0, [r1, #0]
1000ff30:	7090      	strb	r0, [r2, #2]
1000ff32:	788b      	ldrb	r3, [r1, #2]
1000ff34:	784c      	ldrb	r4, [r1, #1]
1000ff36:	021b      	lsls	r3, r3, #8
1000ff38:	4323      	orrs	r3, r4
1000ff3a:	8093      	strh	r3, [r2, #4]
1000ff3c:	2801      	cmp	r0, #1
1000ff3e:	d027      	beq.n	1000ff90 <gapc_peer_att_info_ind_handler+0x68>
1000ff40:	2800      	cmp	r0, #0
1000ff42:	d017      	beq.n	1000ff74 <gapc_peer_att_info_ind_handler+0x4c>
1000ff44:	2802      	cmp	r0, #2
1000ff46:	d12a      	bne.n	1000ff9e <gapc_peer_att_info_ind_handler+0x76>
1000ff48:	790b      	ldrb	r3, [r1, #4]
1000ff4a:	78c8      	ldrb	r0, [r1, #3]
1000ff4c:	021b      	lsls	r3, r3, #8
1000ff4e:	4303      	orrs	r3, r0
1000ff50:	8113      	strh	r3, [r2, #8]
1000ff52:	798b      	ldrb	r3, [r1, #6]
1000ff54:	7948      	ldrb	r0, [r1, #5]
1000ff56:	021b      	lsls	r3, r3, #8
1000ff58:	4303      	orrs	r3, r0
1000ff5a:	80d3      	strh	r3, [r2, #6]
1000ff5c:	7a0b      	ldrb	r3, [r1, #8]
1000ff5e:	79c8      	ldrb	r0, [r1, #7]
1000ff60:	021b      	lsls	r3, r3, #8
1000ff62:	4303      	orrs	r3, r0
1000ff64:	8193      	strh	r3, [r2, #12]
1000ff66:	7a8b      	ldrb	r3, [r1, #10]
1000ff68:	7a49      	ldrb	r1, [r1, #9]
1000ff6a:	021b      	lsls	r3, r3, #8
1000ff6c:	430b      	orrs	r3, r1
1000ff6e:	8153      	strh	r3, [r2, #10]
1000ff70:	2306      	movs	r3, #6
1000ff72:	e013      	b.n	1000ff9c <gapc_peer_att_info_ind_handler+0x74>
1000ff74:	1c14      	adds	r4, r2, #0
1000ff76:	1c20      	adds	r0, r4, #0
1000ff78:	790a      	ldrb	r2, [r1, #4]
1000ff7a:	78cb      	ldrb	r3, [r1, #3]
1000ff7c:	0212      	lsls	r2, r2, #8
1000ff7e:	431a      	orrs	r2, r3
1000ff80:	80e2      	strh	r2, [r4, #6]
1000ff82:	4b07      	ldr	r3, [pc, #28]	; (1000ffa0 <gapc_peer_att_info_ind_handler+0x78>)
1000ff84:	3008      	adds	r0, #8
1000ff86:	3105      	adds	r1, #5
1000ff88:	4798      	blx	r3
1000ff8a:	2302      	movs	r3, #2
1000ff8c:	70a3      	strb	r3, [r4, #2]
1000ff8e:	e006      	b.n	1000ff9e <gapc_peer_att_info_ind_handler+0x76>
1000ff90:	790b      	ldrb	r3, [r1, #4]
1000ff92:	78c9      	ldrb	r1, [r1, #3]
1000ff94:	021b      	lsls	r3, r3, #8
1000ff96:	430b      	orrs	r3, r1
1000ff98:	80d3      	strh	r3, [r2, #6]
1000ff9a:	2305      	movs	r3, #5
1000ff9c:	7093      	strb	r3, [r2, #2]
1000ff9e:	bd10      	pop	{r4, pc}
1000ffa0:	100182cf 	.word	0x100182cf

1000ffa4 <gapc_con_channel_map_ind_handler>:
1000ffa4:	b508      	push	{r3, lr}
1000ffa6:	2300      	movs	r3, #0
1000ffa8:	0a00      	lsrs	r0, r0, #8
1000ffaa:	7013      	strb	r3, [r2, #0]
1000ffac:	8050      	strh	r0, [r2, #2]
1000ffae:	4b02      	ldr	r3, [pc, #8]	; (1000ffb8 <gapc_con_channel_map_ind_handler+0x14>)
1000ffb0:	1d10      	adds	r0, r2, #4
1000ffb2:	2205      	movs	r2, #5
1000ffb4:	4798      	blx	r3
1000ffb6:	bd08      	pop	{r3, pc}
1000ffb8:	100182cf 	.word	0x100182cf

1000ffbc <gapc_lecb_connected>:
1000ffbc:	7843      	ldrb	r3, [r0, #1]
1000ffbe:	7802      	ldrb	r2, [r0, #0]
1000ffc0:	021b      	lsls	r3, r3, #8
1000ffc2:	4313      	orrs	r3, r2
1000ffc4:	800b      	strh	r3, [r1, #0]
1000ffc6:	78c3      	ldrb	r3, [r0, #3]
1000ffc8:	7882      	ldrb	r2, [r0, #2]
1000ffca:	021b      	lsls	r3, r3, #8
1000ffcc:	4313      	orrs	r3, r2
1000ffce:	804b      	strh	r3, [r1, #2]
1000ffd0:	7943      	ldrb	r3, [r0, #5]
1000ffd2:	7902      	ldrb	r2, [r0, #4]
1000ffd4:	021b      	lsls	r3, r3, #8
1000ffd6:	4313      	orrs	r3, r2
1000ffd8:	808b      	strh	r3, [r1, #4]
1000ffda:	79c3      	ldrb	r3, [r0, #7]
1000ffdc:	7982      	ldrb	r2, [r0, #6]
1000ffde:	021b      	lsls	r3, r3, #8
1000ffe0:	4313      	orrs	r3, r2
1000ffe2:	80cb      	strh	r3, [r1, #6]
1000ffe4:	2300      	movs	r3, #0
1000ffe6:	720b      	strb	r3, [r1, #8]
1000ffe8:	4770      	bx	lr

1000ffea <gapc_lecb_disconnected>:
1000ffea:	7843      	ldrb	r3, [r0, #1]
1000ffec:	7802      	ldrb	r2, [r0, #0]
1000ffee:	021b      	lsls	r3, r3, #8
1000fff0:	4313      	orrs	r3, r2
1000fff2:	800b      	strh	r3, [r1, #0]
1000fff4:	78c3      	ldrb	r3, [r0, #3]
1000fff6:	7882      	ldrb	r2, [r0, #2]
1000fff8:	021b      	lsls	r3, r3, #8
1000fffa:	4313      	orrs	r3, r2
1000fffc:	804b      	strh	r3, [r1, #2]
1000fffe:	4770      	bx	lr

10010000 <gapc_lecb_connect_req_ind>:
10010000:	7843      	ldrb	r3, [r0, #1]
10010002:	7802      	ldrb	r2, [r0, #0]
10010004:	021b      	lsls	r3, r3, #8
10010006:	4313      	orrs	r3, r2
10010008:	800b      	strh	r3, [r1, #0]
1001000a:	78c3      	ldrb	r3, [r0, #3]
1001000c:	7882      	ldrb	r2, [r0, #2]
1001000e:	021b      	lsls	r3, r3, #8
10010010:	4313      	orrs	r3, r2
10010012:	804b      	strh	r3, [r1, #2]
10010014:	7943      	ldrb	r3, [r0, #5]
10010016:	7902      	ldrb	r2, [r0, #4]
10010018:	021b      	lsls	r3, r3, #8
1001001a:	4313      	orrs	r3, r2
1001001c:	808b      	strh	r3, [r1, #4]
1001001e:	79c3      	ldrb	r3, [r0, #7]
10010020:	7982      	ldrb	r2, [r0, #6]
10010022:	021b      	lsls	r3, r3, #8
10010024:	4313      	orrs	r3, r2
10010026:	80cb      	strh	r3, [r1, #6]
10010028:	4770      	bx	lr

1001002a <gapc_lecb_add_credit_resp_handler>:
1001002a:	7843      	ldrb	r3, [r0, #1]
1001002c:	7802      	ldrb	r2, [r0, #0]
1001002e:	021b      	lsls	r3, r3, #8
10010030:	4313      	orrs	r3, r2
10010032:	800b      	strh	r3, [r1, #0]
10010034:	78c3      	ldrb	r3, [r0, #3]
10010036:	7882      	ldrb	r2, [r0, #2]
10010038:	021b      	lsls	r3, r3, #8
1001003a:	4313      	orrs	r3, r2
1001003c:	804b      	strh	r3, [r1, #2]
1001003e:	7943      	ldrb	r3, [r0, #5]
10010040:	7902      	ldrb	r2, [r0, #4]
10010042:	021b      	lsls	r3, r3, #8
10010044:	4313      	orrs	r3, r2
10010046:	808b      	strh	r3, [r1, #4]
10010048:	4770      	bx	lr
	...

1001004c <gapm_reset_req_handler>:
1001004c:	b573      	push	{r0, r1, r4, r5, r6, lr}
1001004e:	466b      	mov	r3, sp
10010050:	4915      	ldr	r1, [pc, #84]	; (100100a8 <gapm_reset_req_handler+0x5c>)
10010052:	4816      	ldr	r0, [pc, #88]	; (100100ac <gapm_reset_req_handler+0x60>)
10010054:	880c      	ldrh	r4, [r1, #0]
10010056:	8809      	ldrh	r1, [r1, #0]
10010058:	1ddd      	adds	r5, r3, #7
1001005a:	0a09      	lsrs	r1, r1, #8
1001005c:	2300      	movs	r3, #0
1001005e:	2202      	movs	r2, #2
10010060:	7141      	strb	r1, [r0, #5]
10010062:	26d0      	movs	r6, #208	; 0xd0
10010064:	2101      	movs	r1, #1
10010066:	7104      	strb	r4, [r0, #4]
10010068:	4c11      	ldr	r4, [pc, #68]	; (100100b0 <gapm_reset_req_handler+0x64>)
1001006a:	702b      	strb	r3, [r5, #0]
1001006c:	7002      	strb	r2, [r0, #0]
1001006e:	70c3      	strb	r3, [r0, #3]
10010070:	320b      	adds	r2, #11
10010072:	7201      	strb	r1, [r0, #8]
10010074:	7181      	strb	r1, [r0, #6]
10010076:	71c3      	strb	r3, [r0, #7]
10010078:	3108      	adds	r1, #8
1001007a:	4b0e      	ldr	r3, [pc, #56]	; (100100b4 <gapm_reset_req_handler+0x68>)
1001007c:	0136      	lsls	r6, r6, #4
1001007e:	7042      	strb	r2, [r0, #1]
10010080:	7082      	strb	r2, [r0, #2]
10010082:	80a2      	strh	r2, [r4, #4]
10010084:	8026      	strh	r6, [r4, #0]
10010086:	4798      	blx	r3
10010088:	1c28      	adds	r0, r5, #0
1001008a:	4b0b      	ldr	r3, [pc, #44]	; (100100b8 <gapm_reset_req_handler+0x6c>)
1001008c:	4798      	blx	r3
1001008e:	782b      	ldrb	r3, [r5, #0]
10010090:	20e2      	movs	r0, #226	; 0xe2
10010092:	2b00      	cmp	r3, #0
10010094:	d106      	bne.n	100100a4 <gapm_reset_req_handler+0x58>
10010096:	68a3      	ldr	r3, [r4, #8]
10010098:	20e2      	movs	r0, #226	; 0xe2
1001009a:	781a      	ldrb	r2, [r3, #0]
1001009c:	785b      	ldrb	r3, [r3, #1]
1001009e:	2a01      	cmp	r2, #1
100100a0:	d100      	bne.n	100100a4 <gapm_reset_req_handler+0x58>
100100a2:	1c18      	adds	r0, r3, #0
100100a4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
100100a6:	46c0      	nop			; (mov r8, r8)
100100a8:	1001e198 	.word	0x1001e198
100100ac:	1001e508 	.word	0x1001e508
100100b0:	1001e18c 	.word	0x1001e18c
100100b4:	1000f475 	.word	0x1000f475
100100b8:	1000f4d9 	.word	0x1000f4d9

100100bc <gapm_set_dev_config_cmd_handler>:
100100bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100100be:	b089      	sub	sp, #36	; 0x24
100100c0:	9303      	str	r3, [sp, #12]
100100c2:	ab0e      	add	r3, sp, #56	; 0x38
100100c4:	781b      	ldrb	r3, [r3, #0]
100100c6:	4c37      	ldr	r4, [pc, #220]	; (100101a4 <gapm_set_dev_config_cmd_handler+0xe8>)
100100c8:	9304      	str	r3, [sp, #16]
100100ca:	ab0f      	add	r3, sp, #60	; 0x3c
100100cc:	781b      	ldrb	r3, [r3, #0]
100100ce:	270d      	movs	r7, #13
100100d0:	9305      	str	r3, [sp, #20]
100100d2:	ab10      	add	r3, sp, #64	; 0x40
100100d4:	881b      	ldrh	r3, [r3, #0]
100100d6:	72a1      	strb	r1, [r4, #10]
100100d8:	9300      	str	r3, [sp, #0]
100100da:	ab11      	add	r3, sp, #68	; 0x44
100100dc:	881b      	ldrh	r3, [r3, #0]
100100de:	0a09      	lsrs	r1, r1, #8
100100e0:	9301      	str	r3, [sp, #4]
100100e2:	ab12      	add	r3, sp, #72	; 0x48
100100e4:	881b      	ldrh	r3, [r3, #0]
100100e6:	7260      	strb	r0, [r4, #9]
100100e8:	9302      	str	r3, [sp, #8]
100100ea:	ab06      	add	r3, sp, #24
100100ec:	1dde      	adds	r6, r3, #7
100100ee:	2300      	movs	r3, #0
100100f0:	7033      	strb	r3, [r6, #0]
100100f2:	2304      	movs	r3, #4
100100f4:	7023      	strb	r3, [r4, #0]
100100f6:	2300      	movs	r3, #0
100100f8:	70e3      	strb	r3, [r4, #3]
100100fa:	4b2b      	ldr	r3, [pc, #172]	; (100101a8 <gapm_set_dev_config_cmd_handler+0xec>)
100100fc:	72e1      	strb	r1, [r4, #11]
100100fe:	881d      	ldrh	r5, [r3, #0]
10010100:	881b      	ldrh	r3, [r3, #0]
10010102:	1c11      	adds	r1, r2, #0
10010104:	0a1b      	lsrs	r3, r3, #8
10010106:	7163      	strb	r3, [r4, #5]
10010108:	2303      	movs	r3, #3
1001010a:	7125      	strb	r5, [r4, #4]
1001010c:	2206      	movs	r2, #6
1001010e:	4d27      	ldr	r5, [pc, #156]	; (100101ac <gapm_set_dev_config_cmd_handler+0xf0>)
10010110:	4827      	ldr	r0, [pc, #156]	; (100101b0 <gapm_set_dev_config_cmd_handler+0xf4>)
10010112:	7223      	strb	r3, [r4, #8]
10010114:	7067      	strb	r7, [r4, #1]
10010116:	70a7      	strb	r7, [r4, #2]
10010118:	47a8      	blx	r5
1001011a:	9903      	ldr	r1, [sp, #12]
1001011c:	2210      	movs	r2, #16
1001011e:	4825      	ldr	r0, [pc, #148]	; (100101b4 <gapm_set_dev_config_cmd_handler+0xf8>)
10010120:	47a8      	blx	r5
10010122:	466a      	mov	r2, sp
10010124:	7c12      	ldrb	r2, [r2, #16]
10010126:	1ce3      	adds	r3, r4, #3
10010128:	77da      	strb	r2, [r3, #31]
1001012a:	466a      	mov	r2, sp
1001012c:	7d12      	ldrb	r2, [r2, #20]
1001012e:	1d23      	adds	r3, r4, #4
10010130:	77da      	strb	r2, [r3, #31]
10010132:	466a      	mov	r2, sp
10010134:	7812      	ldrb	r2, [r2, #0]
10010136:	1d63      	adds	r3, r4, #5
10010138:	77da      	strb	r2, [r3, #31]
1001013a:	9b00      	ldr	r3, [sp, #0]
1001013c:	1da2      	adds	r2, r4, #6
1001013e:	0a1b      	lsrs	r3, r3, #8
10010140:	77d3      	strb	r3, [r2, #31]
10010142:	466a      	mov	r2, sp
10010144:	7912      	ldrb	r2, [r2, #4]
10010146:	1de3      	adds	r3, r4, #7
10010148:	77da      	strb	r2, [r3, #31]
1001014a:	1c22      	adds	r2, r4, #0
1001014c:	9b01      	ldr	r3, [sp, #4]
1001014e:	3208      	adds	r2, #8
10010150:	0a1b      	lsrs	r3, r3, #8
10010152:	77d3      	strb	r3, [r2, #31]
10010154:	466a      	mov	r2, sp
10010156:	1c23      	adds	r3, r4, #0
10010158:	7a12      	ldrb	r2, [r2, #8]
1001015a:	3328      	adds	r3, #40	; 0x28
1001015c:	701a      	strb	r2, [r3, #0]
1001015e:	1c22      	adds	r2, r4, #0
10010160:	9b02      	ldr	r3, [sp, #8]
10010162:	3229      	adds	r2, #41	; 0x29
10010164:	0a1b      	lsrs	r3, r3, #8
10010166:	7013      	strb	r3, [r2, #0]
10010168:	23d0      	movs	r3, #208	; 0xd0
1001016a:	4d13      	ldr	r5, [pc, #76]	; (100101b8 <gapm_set_dev_config_cmd_handler+0xfc>)
1001016c:	011b      	lsls	r3, r3, #4
1001016e:	802b      	strh	r3, [r5, #0]
10010170:	2322      	movs	r3, #34	; 0x22
10010172:	71a3      	strb	r3, [r4, #6]
10010174:	2300      	movs	r3, #0
10010176:	212a      	movs	r1, #42	; 0x2a
10010178:	71e3      	strb	r3, [r4, #7]
1001017a:	1c20      	adds	r0, r4, #0
1001017c:	4b0f      	ldr	r3, [pc, #60]	; (100101bc <gapm_set_dev_config_cmd_handler+0x100>)
1001017e:	80af      	strh	r7, [r5, #4]
10010180:	4798      	blx	r3
10010182:	1c30      	adds	r0, r6, #0
10010184:	4b0e      	ldr	r3, [pc, #56]	; (100101c0 <gapm_set_dev_config_cmd_handler+0x104>)
10010186:	4798      	blx	r3
10010188:	7833      	ldrb	r3, [r6, #0]
1001018a:	20e2      	movs	r0, #226	; 0xe2
1001018c:	2b00      	cmp	r3, #0
1001018e:	d106      	bne.n	1001019e <gapm_set_dev_config_cmd_handler+0xe2>
10010190:	68ab      	ldr	r3, [r5, #8]
10010192:	20e2      	movs	r0, #226	; 0xe2
10010194:	781a      	ldrb	r2, [r3, #0]
10010196:	785b      	ldrb	r3, [r3, #1]
10010198:	2a03      	cmp	r2, #3
1001019a:	d100      	bne.n	1001019e <gapm_set_dev_config_cmd_handler+0xe2>
1001019c:	1c18      	adds	r0, r3, #0
1001019e:	b009      	add	sp, #36	; 0x24
100101a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100101a2:	46c0      	nop			; (mov r8, r8)
100101a4:	1001e508 	.word	0x1001e508
100101a8:	1001e198 	.word	0x1001e198
100101ac:	100182cf 	.word	0x100182cf
100101b0:	1001e514 	.word	0x1001e514
100101b4:	1001e51a 	.word	0x1001e51a
100101b8:	1001e18c 	.word	0x1001e18c
100101bc:	1000f475 	.word	0x1000f475
100101c0:	1000f4d9 	.word	0x1000f4d9

100101c4 <gapm_get_dev_config_cmd_handler>:
100101c4:	4684      	mov	ip, r0
100101c6:	4663      	mov	r3, ip
100101c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100101ca:	b085      	sub	sp, #20
100101cc:	9100      	str	r1, [sp, #0]
100101ce:	20cf      	movs	r0, #207	; 0xcf
100101d0:	2b01      	cmp	r3, #1
100101d2:	d854      	bhi.n	1001027e <gapm_get_dev_config_cmd_handler+0xba>
100101d4:	2900      	cmp	r1, #0
100101d6:	d052      	beq.n	1001027e <gapm_get_dev_config_cmd_handler+0xba>
100101d8:	2200      	movs	r2, #0
100101da:	492a      	ldr	r1, [pc, #168]	; (10010284 <gapm_get_dev_config_cmd_handler+0xc0>)
100101dc:	ab02      	add	r3, sp, #8
100101de:	880c      	ldrh	r4, [r1, #0]
100101e0:	8809      	ldrh	r1, [r1, #0]
100101e2:	1d9f      	adds	r7, r3, #6
100101e4:	719a      	strb	r2, [r3, #6]
100101e6:	4b28      	ldr	r3, [pc, #160]	; (10010288 <gapm_get_dev_config_cmd_handler+0xc4>)
100101e8:	0a09      	lsrs	r1, r1, #8
100101ea:	250d      	movs	r5, #13
100101ec:	2606      	movs	r6, #6
100101ee:	7159      	strb	r1, [r3, #5]
100101f0:	4661      	mov	r1, ip
100101f2:	701e      	strb	r6, [r3, #0]
100101f4:	705d      	strb	r5, [r3, #1]
100101f6:	709d      	strb	r5, [r3, #2]
100101f8:	70da      	strb	r2, [r3, #3]
100101fa:	711c      	strb	r4, [r3, #4]
100101fc:	2901      	cmp	r1, #1
100101fe:	d13e      	bne.n	1001027e <gapm_get_dev_config_cmd_handler+0xba>
10010200:	21d0      	movs	r1, #208	; 0xd0
10010202:	4c22      	ldr	r4, [pc, #136]	; (1001028c <gapm_get_dev_config_cmd_handler+0xc8>)
10010204:	0109      	lsls	r1, r1, #4
10010206:	8061      	strh	r1, [r4, #2]
10010208:	4921      	ldr	r1, [pc, #132]	; (10010290 <gapm_get_dev_config_cmd_handler+0xcc>)
1001020a:	71da      	strb	r2, [r3, #7]
1001020c:	8021      	strh	r1, [r4, #0]
1001020e:	4661      	mov	r1, ip
10010210:	721e      	strb	r6, [r3, #8]
10010212:	7199      	strb	r1, [r3, #6]
10010214:	1c18      	adds	r0, r3, #0
10010216:	2109      	movs	r1, #9
10010218:	4b1e      	ldr	r3, [pc, #120]	; (10010294 <gapm_get_dev_config_cmd_handler+0xd0>)
1001021a:	80a5      	strh	r5, [r4, #4]
1001021c:	4798      	blx	r3
1001021e:	1c38      	adds	r0, r7, #0
10010220:	4b1d      	ldr	r3, [pc, #116]	; (10010298 <gapm_get_dev_config_cmd_handler+0xd4>)
10010222:	4798      	blx	r3
10010224:	783b      	ldrb	r3, [r7, #0]
10010226:	20e2      	movs	r0, #226	; 0xe2
10010228:	9301      	str	r3, [sp, #4]
1001022a:	2b00      	cmp	r3, #0
1001022c:	d127      	bne.n	1001027e <gapm_get_dev_config_cmd_handler+0xba>
1001022e:	8821      	ldrh	r1, [r4, #0]
10010230:	4a1a      	ldr	r2, [pc, #104]	; (1001029c <gapm_get_dev_config_cmd_handler+0xd8>)
10010232:	68a7      	ldr	r7, [r4, #8]
10010234:	3b01      	subs	r3, #1
10010236:	4291      	cmp	r1, r2
10010238:	d001      	beq.n	1001023e <gapm_get_dev_config_cmd_handler+0x7a>
1001023a:	8023      	strh	r3, [r4, #0]
1001023c:	e01a      	b.n	10010274 <gapm_get_dev_config_cmd_handler+0xb0>
1001023e:	8063      	strh	r3, [r4, #2]
10010240:	9b00      	ldr	r3, [sp, #0]
10010242:	1c39      	adds	r1, r7, #0
10010244:	1c58      	adds	r0, r3, #1
10010246:	1c32      	adds	r2, r6, #0
10010248:	4b15      	ldr	r3, [pc, #84]	; (100102a0 <gapm_get_dev_config_cmd_handler+0xdc>)
1001024a:	4798      	blx	r3
1001024c:	79bb      	ldrb	r3, [r7, #6]
1001024e:	9a00      	ldr	r2, [sp, #0]
10010250:	7013      	strb	r3, [r2, #0]
10010252:	23d0      	movs	r3, #208	; 0xd0
10010254:	011b      	lsls	r3, r3, #4
10010256:	8023      	strh	r3, [r4, #0]
10010258:	ab02      	add	r3, sp, #8
1001025a:	80a5      	strh	r5, [r4, #4]
1001025c:	1ddd      	adds	r5, r3, #7
1001025e:	466b      	mov	r3, sp
10010260:	791b      	ldrb	r3, [r3, #4]
10010262:	1c28      	adds	r0, r5, #0
10010264:	702b      	strb	r3, [r5, #0]
10010266:	4b0c      	ldr	r3, [pc, #48]	; (10010298 <gapm_get_dev_config_cmd_handler+0xd4>)
10010268:	4798      	blx	r3
1001026a:	782b      	ldrb	r3, [r5, #0]
1001026c:	20d0      	movs	r0, #208	; 0xd0
1001026e:	2b00      	cmp	r3, #0
10010270:	d105      	bne.n	1001027e <gapm_get_dev_config_cmd_handler+0xba>
10010272:	68a7      	ldr	r7, [r4, #8]
10010274:	783b      	ldrb	r3, [r7, #0]
10010276:	7878      	ldrb	r0, [r7, #1]
10010278:	2b06      	cmp	r3, #6
1001027a:	d000      	beq.n	1001027e <gapm_get_dev_config_cmd_handler+0xba>
1001027c:	20e2      	movs	r0, #226	; 0xe2
1001027e:	b005      	add	sp, #20
10010280:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010282:	46c0      	nop			; (mov r8, r8)
10010284:	1001e198 	.word	0x1001e198
10010288:	1001e508 	.word	0x1001e508
1001028c:	1001e18c 	.word	0x1001e18c
10010290:	00000d08 	.word	0x00000d08
10010294:	1000f475 	.word	0x1000f475
10010298:	1000f4d9 	.word	0x1000f4d9
1001029c:	0000ffff 	.word	0x0000ffff
100102a0:	100182cf 	.word	0x100182cf

100102a4 <gapm_cancel_cmd_handler>:
100102a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
100102a6:	4916      	ldr	r1, [pc, #88]	; (10010300 <gapm_cancel_cmd_handler+0x5c>)
100102a8:	4816      	ldr	r0, [pc, #88]	; (10010304 <gapm_cancel_cmd_handler+0x60>)
100102aa:	880c      	ldrh	r4, [r1, #0]
100102ac:	8809      	ldrh	r1, [r1, #0]
100102ae:	466b      	mov	r3, sp
100102b0:	0a09      	lsrs	r1, r1, #8
100102b2:	7141      	strb	r1, [r0, #5]
100102b4:	2102      	movs	r1, #2
100102b6:	2203      	movs	r2, #3
100102b8:	7201      	strb	r1, [r0, #8]
100102ba:	21d0      	movs	r1, #208	; 0xd0
100102bc:	1ddd      	adds	r5, r3, #7
100102be:	2300      	movs	r3, #0
100102c0:	7104      	strb	r4, [r0, #4]
100102c2:	4c11      	ldr	r4, [pc, #68]	; (10010308 <gapm_cancel_cmd_handler+0x64>)
100102c4:	7002      	strb	r2, [r0, #0]
100102c6:	0109      	lsls	r1, r1, #4
100102c8:	320a      	adds	r2, #10
100102ca:	702b      	strb	r3, [r5, #0]
100102cc:	7042      	strb	r2, [r0, #1]
100102ce:	7082      	strb	r2, [r0, #2]
100102d0:	70c3      	strb	r3, [r0, #3]
100102d2:	8021      	strh	r1, [r4, #0]
100102d4:	80a2      	strh	r2, [r4, #4]
100102d6:	71c3      	strb	r3, [r0, #7]
100102d8:	3a0c      	subs	r2, #12
100102da:	2109      	movs	r1, #9
100102dc:	4b0b      	ldr	r3, [pc, #44]	; (1001030c <gapm_cancel_cmd_handler+0x68>)
100102de:	7182      	strb	r2, [r0, #6]
100102e0:	4798      	blx	r3
100102e2:	1c28      	adds	r0, r5, #0
100102e4:	4b0a      	ldr	r3, [pc, #40]	; (10010310 <gapm_cancel_cmd_handler+0x6c>)
100102e6:	4798      	blx	r3
100102e8:	7828      	ldrb	r0, [r5, #0]
100102ea:	2800      	cmp	r0, #0
100102ec:	d001      	beq.n	100102f2 <gapm_cancel_cmd_handler+0x4e>
100102ee:	20e2      	movs	r0, #226	; 0xe2
100102f0:	e004      	b.n	100102fc <gapm_cancel_cmd_handler+0x58>
100102f2:	68a3      	ldr	r3, [r4, #8]
100102f4:	785b      	ldrb	r3, [r3, #1]
100102f6:	2b44      	cmp	r3, #68	; 0x44
100102f8:	d000      	beq.n	100102fc <gapm_cancel_cmd_handler+0x58>
100102fa:	1c18      	adds	r0, r3, #0
100102fc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
100102fe:	46c0      	nop			; (mov r8, r8)
10010300:	1001e198 	.word	0x1001e198
10010304:	1001e508 	.word	0x1001e508
10010308:	1001e18c 	.word	0x1001e18c
1001030c:	1000f475 	.word	0x1000f475
10010310:	1000f4d9 	.word	0x1000f4d9

10010314 <gapm_dev_bdaddr_ind_handler>:
10010314:	b538      	push	{r3, r4, r5, lr}
10010316:	1c05      	adds	r5, r0, #0
10010318:	1c0c      	adds	r4, r1, #0
1001031a:	1c48      	adds	r0, r1, #1
1001031c:	2206      	movs	r2, #6
1001031e:	1c29      	adds	r1, r5, #0
10010320:	4b02      	ldr	r3, [pc, #8]	; (1001032c <gapm_dev_bdaddr_ind_handler+0x18>)
10010322:	4798      	blx	r3
10010324:	79ab      	ldrb	r3, [r5, #6]
10010326:	2000      	movs	r0, #0
10010328:	7023      	strb	r3, [r4, #0]
1001032a:	bd38      	pop	{r3, r4, r5, pc}
1001032c:	100182cf 	.word	0x100182cf

10010330 <gapm_cmp_evt>:
10010330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010332:	7803      	ldrb	r3, [r0, #0]
10010334:	7845      	ldrb	r5, [r0, #1]
10010336:	3b0c      	subs	r3, #12
10010338:	1e18      	subs	r0, r3, #0
1001033a:	280b      	cmp	r0, #11
1001033c:	d900      	bls.n	10010340 <gapm_cmp_evt+0x10>
1001033e:	e08d      	b.n	1001045c <gapm_cmp_evt+0x12c>
10010340:	1c0c      	adds	r4, r1, #0
10010342:	f004 fe2d 	bl	10014fa0 <__gnu_thumb1_case_uqi>
10010346:	1952      	.short	0x1952
10010348:	068b1919 	.word	0x068b1919
1001034c:	8b595906 	.word	0x8b595906
10010350:	0d8b      	.short	0x0d8b
10010352:	2300      	movs	r3, #0
10010354:	2d45      	cmp	r5, #69	; 0x45
10010356:	d000      	beq.n	1001035a <gapm_cmp_evt+0x2a>
10010358:	1c2b      	adds	r3, r5, #0
1001035a:	7023      	strb	r3, [r4, #0]
1001035c:	2002      	movs	r0, #2
1001035e:	e07e      	b.n	1001045e <gapm_cmp_evt+0x12e>
10010360:	203b      	movs	r0, #59	; 0x3b
10010362:	2d00      	cmp	r5, #0
10010364:	d100      	bne.n	10010368 <gapm_cmp_evt+0x38>
10010366:	e07a      	b.n	1001045e <gapm_cmp_evt+0x12e>
10010368:	700d      	strb	r5, [r1, #0]
1001036a:	1c48      	adds	r0, r1, #1
1001036c:	2210      	movs	r2, #16
1001036e:	2100      	movs	r1, #0
10010370:	4b3b      	ldr	r3, [pc, #236]	; (10010460 <gapm_cmp_evt+0x130>)
10010372:	4798      	blx	r3
10010374:	200f      	movs	r0, #15
10010376:	e072      	b.n	1001045e <gapm_cmp_evt+0x12e>
10010378:	2d00      	cmp	r5, #0
1001037a:	d134      	bne.n	100103e6 <gapm_cmp_evt+0xb6>
1001037c:	4b39      	ldr	r3, [pc, #228]	; (10010464 <gapm_cmp_evt+0x134>)
1001037e:	4798      	blx	r3
10010380:	1e43      	subs	r3, r0, #1
10010382:	b2db      	uxtb	r3, r3
10010384:	1c28      	adds	r0, r5, #0
10010386:	2b06      	cmp	r3, #6
10010388:	d869      	bhi.n	1001045e <gapm_cmp_evt+0x12e>
1001038a:	466b      	mov	r3, sp
1001038c:	4e36      	ldr	r6, [pc, #216]	; (10010468 <gapm_cmp_evt+0x138>)
1001038e:	1dd9      	adds	r1, r3, #7
10010390:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10010392:	4b36      	ldr	r3, [pc, #216]	; (1001046c <gapm_cmp_evt+0x13c>)
10010394:	4798      	blx	r3
10010396:	2312      	movs	r3, #18
10010398:	4358      	muls	r0, r3
1001039a:	4935      	ldr	r1, [pc, #212]	; (10010470 <gapm_cmp_evt+0x140>)
1001039c:	1809      	adds	r1, r1, r0
1001039e:	1c0b      	adds	r3, r1, #0
100103a0:	894a      	ldrh	r2, [r1, #10]
100103a2:	3308      	adds	r3, #8
100103a4:	8122      	strh	r2, [r4, #8]
100103a6:	784f      	ldrb	r7, [r1, #1]
100103a8:	72a5      	strb	r5, [r4, #10]
100103aa:	7027      	strb	r7, [r4, #0]
100103ac:	898a      	ldrh	r2, [r1, #12]
100103ae:	1c60      	adds	r0, r4, #1
100103b0:	81a2      	strh	r2, [r4, #12]
100103b2:	88db      	ldrh	r3, [r3, #6]
100103b4:	3102      	adds	r1, #2
100103b6:	81e3      	strh	r3, [r4, #14]
100103b8:	89cb      	ldrh	r3, [r1, #14]
100103ba:	2206      	movs	r2, #6
100103bc:	8223      	strh	r3, [r4, #16]
100103be:	4b2d      	ldr	r3, [pc, #180]	; (10010474 <gapm_cmp_evt+0x144>)
100103c0:	4798      	blx	r3
100103c2:	2f00      	cmp	r7, #0
100103c4:	d00a      	beq.n	100103dc <gapm_cmp_evt+0xac>
100103c6:	79a3      	ldrb	r3, [r4, #6]
100103c8:	223f      	movs	r2, #63	; 0x3f
100103ca:	1c19      	adds	r1, r3, #0
100103cc:	3501      	adds	r5, #1
100103ce:	4391      	bics	r1, r2
100103d0:	29c0      	cmp	r1, #192	; 0xc0
100103d2:	d003      	beq.n	100103dc <gapm_cmp_evt+0xac>
100103d4:	065b      	lsls	r3, r3, #25
100103d6:	0fdb      	lsrs	r3, r3, #31
100103d8:	3502      	adds	r5, #2
100103da:	1aed      	subs	r5, r5, r3
100103dc:	2301      	movs	r3, #1
100103de:	425b      	negs	r3, r3
100103e0:	7025      	strb	r5, [r4, #0]
100103e2:	85b3      	strh	r3, [r6, #44]	; 0x2c
100103e4:	e038      	b.n	10010458 <gapm_cmp_evt+0x128>
100103e6:	700d      	strb	r5, [r1, #0]
100103e8:	e004      	b.n	100103f4 <gapm_cmp_evt+0xc4>
100103ea:	2300      	movs	r3, #0
100103ec:	2d45      	cmp	r5, #69	; 0x45
100103ee:	d000      	beq.n	100103f2 <gapm_cmp_evt+0xc2>
100103f0:	1c2b      	adds	r3, r5, #0
100103f2:	7023      	strb	r3, [r4, #0]
100103f4:	2003      	movs	r0, #3
100103f6:	e032      	b.n	1001045e <gapm_cmp_evt+0x12e>
100103f8:	4e1b      	ldr	r6, [pc, #108]	; (10010468 <gapm_cmp_evt+0x138>)
100103fa:	2100      	movs	r1, #0
100103fc:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
100103fe:	4b1b      	ldr	r3, [pc, #108]	; (1001046c <gapm_cmp_evt+0x13c>)
10010400:	4798      	blx	r3
10010402:	2807      	cmp	r0, #7
10010404:	d818      	bhi.n	10010438 <gapm_cmp_evt+0x108>
10010406:	2301      	movs	r3, #1
10010408:	425b      	negs	r3, r3
1001040a:	85b3      	strh	r3, [r6, #44]	; 0x2c
1001040c:	3313      	adds	r3, #19
1001040e:	4358      	muls	r0, r3
10010410:	4917      	ldr	r1, [pc, #92]	; (10010470 <gapm_cmp_evt+0x140>)
10010412:	1809      	adds	r1, r1, r0
10010414:	1c0b      	adds	r3, r1, #0
10010416:	894a      	ldrh	r2, [r1, #10]
10010418:	3308      	adds	r3, #8
1001041a:	8122      	strh	r2, [r4, #8]
1001041c:	784a      	ldrb	r2, [r1, #1]
1001041e:	72a5      	strb	r5, [r4, #10]
10010420:	7022      	strb	r2, [r4, #0]
10010422:	898a      	ldrh	r2, [r1, #12]
10010424:	1c60      	adds	r0, r4, #1
10010426:	81a2      	strh	r2, [r4, #12]
10010428:	88db      	ldrh	r3, [r3, #6]
1001042a:	3102      	adds	r1, #2
1001042c:	81e3      	strh	r3, [r4, #14]
1001042e:	89cb      	ldrh	r3, [r1, #14]
10010430:	2206      	movs	r2, #6
10010432:	8223      	strh	r3, [r4, #16]
10010434:	4b0f      	ldr	r3, [pc, #60]	; (10010474 <gapm_cmp_evt+0x144>)
10010436:	4798      	blx	r3
10010438:	2200      	movs	r2, #0
1001043a:	7823      	ldrb	r3, [r4, #0]
1001043c:	4293      	cmp	r3, r2
1001043e:	d00a      	beq.n	10010456 <gapm_cmp_evt+0x126>
10010440:	79a3      	ldrb	r3, [r4, #6]
10010442:	323f      	adds	r2, #63	; 0x3f
10010444:	1c19      	adds	r1, r3, #0
10010446:	4391      	bics	r1, r2
10010448:	3a3e      	subs	r2, #62	; 0x3e
1001044a:	29c0      	cmp	r1, #192	; 0xc0
1001044c:	d003      	beq.n	10010456 <gapm_cmp_evt+0x126>
1001044e:	065b      	lsls	r3, r3, #25
10010450:	0fdb      	lsrs	r3, r3, #31
10010452:	3202      	adds	r2, #2
10010454:	1ad2      	subs	r2, r2, r3
10010456:	7022      	strb	r2, [r4, #0]
10010458:	2005      	movs	r0, #5
1001045a:	e000      	b.n	1001045e <gapm_cmp_evt+0x12e>
1001045c:	2000      	movs	r0, #0
1001045e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010460:	1001830b 	.word	0x1001830b
10010464:	1000f681 	.word	0x1000f681
10010468:	1001e22a 	.word	0x1001e22a
1001046c:	1000f645 	.word	0x1000f645
10010470:	1001e19a 	.word	0x1001e19a
10010474:	100182cf 	.word	0x100182cf

10010478 <gapm_adv_report_evt_handler>:
10010478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001047a:	7843      	ldrb	r3, [r0, #1]
1001047c:	1c05      	adds	r5, r0, #0
1001047e:	9301      	str	r3, [sp, #4]
10010480:	466b      	mov	r3, sp
10010482:	1c0c      	adds	r4, r1, #0
10010484:	791b      	ldrb	r3, [r3, #4]
10010486:	7806      	ldrb	r6, [r0, #0]
10010488:	2206      	movs	r2, #6
1001048a:	704b      	strb	r3, [r1, #1]
1001048c:	1c88      	adds	r0, r1, #2
1001048e:	4f1b      	ldr	r7, [pc, #108]	; (100104fc <gapm_adv_report_evt_handler+0x84>)
10010490:	1ca9      	adds	r1, r5, #2
10010492:	47b8      	blx	r7
10010494:	1c20      	adds	r0, r4, #0
10010496:	1c29      	adds	r1, r5, #0
10010498:	7a2a      	ldrb	r2, [r5, #8]
1001049a:	3008      	adds	r0, #8
1001049c:	77c2      	strb	r2, [r0, #31]
1001049e:	3109      	adds	r1, #9
100104a0:	3528      	adds	r5, #40	; 0x28
100104a2:	47b8      	blx	r7
100104a4:	782b      	ldrb	r3, [r5, #0]
100104a6:	b25a      	sxtb	r2, r3
100104a8:	2a00      	cmp	r2, #0
100104aa:	da01      	bge.n	100104b0 <gapm_adv_report_evt_handler+0x38>
100104ac:	3301      	adds	r3, #1
100104ae:	b2db      	uxtb	r3, r3
100104b0:	1c22      	adds	r2, r4, #0
100104b2:	3228      	adds	r2, #40	; 0x28
100104b4:	7013      	strb	r3, [r2, #0]
100104b6:	2200      	movs	r2, #0
100104b8:	9b01      	ldr	r3, [sp, #4]
100104ba:	4293      	cmp	r3, r2
100104bc:	d00a      	beq.n	100104d4 <gapm_adv_report_evt_handler+0x5c>
100104be:	79e3      	ldrb	r3, [r4, #7]
100104c0:	323f      	adds	r2, #63	; 0x3f
100104c2:	1c19      	adds	r1, r3, #0
100104c4:	4391      	bics	r1, r2
100104c6:	3a3e      	subs	r2, #62	; 0x3e
100104c8:	29c0      	cmp	r1, #192	; 0xc0
100104ca:	d003      	beq.n	100104d4 <gapm_adv_report_evt_handler+0x5c>
100104cc:	065b      	lsls	r3, r3, #25
100104ce:	0fdb      	lsrs	r3, r3, #31
100104d0:	3202      	adds	r2, #2
100104d2:	1ad2      	subs	r2, r2, r3
100104d4:	7062      	strb	r2, [r4, #1]
100104d6:	2e04      	cmp	r6, #4
100104d8:	d80f      	bhi.n	100104fa <gapm_adv_report_evt_handler+0x82>
100104da:	1c30      	adds	r0, r6, #0
100104dc:	f004 fd60 	bl	10014fa0 <__gnu_thumb1_case_uqi>
100104e0:	09070503 	.word	0x09070503
100104e4:	0b          	.byte	0x0b
100104e5:	00          	.byte	0x00
100104e6:	2300      	movs	r3, #0
100104e8:	e006      	b.n	100104f8 <gapm_adv_report_evt_handler+0x80>
100104ea:	2301      	movs	r3, #1
100104ec:	e004      	b.n	100104f8 <gapm_adv_report_evt_handler+0x80>
100104ee:	2302      	movs	r3, #2
100104f0:	e002      	b.n	100104f8 <gapm_adv_report_evt_handler+0x80>
100104f2:	2303      	movs	r3, #3
100104f4:	e000      	b.n	100104f8 <gapm_adv_report_evt_handler+0x80>
100104f6:	2305      	movs	r3, #5
100104f8:	7023      	strb	r3, [r4, #0]
100104fa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100104fc:	100182cf 	.word	0x100182cf

10010500 <gapm_resolv_addr_cmd_handler>:
10010500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010502:	2314      	movs	r3, #20
10010504:	4c12      	ldr	r4, [pc, #72]	; (10010550 <gapm_resolv_addr_cmd_handler+0x50>)
10010506:	1c17      	adds	r7, r2, #0
10010508:	7023      	strb	r3, [r4, #0]
1001050a:	3b07      	subs	r3, #7
1001050c:	7063      	strb	r3, [r4, #1]
1001050e:	70a3      	strb	r3, [r4, #2]
10010510:	2300      	movs	r3, #0
10010512:	70e3      	strb	r3, [r4, #3]
10010514:	4b0f      	ldr	r3, [pc, #60]	; (10010554 <gapm_resolv_addr_cmd_handler+0x54>)
10010516:	1c05      	adds	r5, r0, #0
10010518:	881a      	ldrh	r2, [r3, #0]
1001051a:	881b      	ldrh	r3, [r3, #0]
1001051c:	4e0e      	ldr	r6, [pc, #56]	; (10010558 <gapm_resolv_addr_cmd_handler+0x58>)
1001051e:	0a1b      	lsrs	r3, r3, #8
10010520:	7163      	strb	r3, [r4, #5]
10010522:	2317      	movs	r3, #23
10010524:	012d      	lsls	r5, r5, #4
10010526:	7122      	strb	r2, [r4, #4]
10010528:	7260      	strb	r0, [r4, #9]
1001052a:	2206      	movs	r2, #6
1001052c:	480b      	ldr	r0, [pc, #44]	; (1001055c <gapm_resolv_addr_cmd_handler+0x5c>)
1001052e:	7223      	strb	r3, [r4, #8]
10010530:	47b0      	blx	r6
10010532:	1c39      	adds	r1, r7, #0
10010534:	1c2a      	adds	r2, r5, #0
10010536:	480a      	ldr	r0, [pc, #40]	; (10010560 <gapm_resolv_addr_cmd_handler+0x60>)
10010538:	47b0      	blx	r6
1001053a:	1c29      	adds	r1, r5, #0
1001053c:	3110      	adds	r1, #16
1001053e:	1c0b      	adds	r3, r1, #0
10010540:	3b08      	subs	r3, #8
10010542:	71a3      	strb	r3, [r4, #6]
10010544:	121b      	asrs	r3, r3, #8
10010546:	71e3      	strb	r3, [r4, #7]
10010548:	1c20      	adds	r0, r4, #0
1001054a:	4b06      	ldr	r3, [pc, #24]	; (10010564 <gapm_resolv_addr_cmd_handler+0x64>)
1001054c:	4798      	blx	r3
1001054e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010550:	1001e508 	.word	0x1001e508
10010554:	1001e198 	.word	0x1001e198
10010558:	100182cf 	.word	0x100182cf
1001055c:	1001e512 	.word	0x1001e512
10010560:	1001e518 	.word	0x1001e518
10010564:	1000f475 	.word	0x1000f475

10010568 <gapm_addr_solved_ind_handler>:
10010568:	b570      	push	{r4, r5, r6, lr}
1001056a:	1c04      	adds	r4, r0, #0
1001056c:	1c08      	adds	r0, r1, #0
1001056e:	1c0d      	adds	r5, r1, #0
10010570:	4e05      	ldr	r6, [pc, #20]	; (10010588 <gapm_addr_solved_ind_handler+0x20>)
10010572:	1c21      	adds	r1, r4, #0
10010574:	2206      	movs	r2, #6
10010576:	3011      	adds	r0, #17
10010578:	47b0      	blx	r6
1001057a:	1c68      	adds	r0, r5, #1
1001057c:	1da1      	adds	r1, r4, #6
1001057e:	2210      	movs	r2, #16
10010580:	47b0      	blx	r6
10010582:	2300      	movs	r3, #0
10010584:	702b      	strb	r3, [r5, #0]
10010586:	bd70      	pop	{r4, r5, r6, pc}
10010588:	100182cf 	.word	0x100182cf

1001058c <gapm_profile_added_ind_handler>:
1001058c:	b510      	push	{r4, lr}
1001058e:	7843      	ldrb	r3, [r0, #1]
10010590:	7902      	ldrb	r2, [r0, #4]
10010592:	7944      	ldrb	r4, [r0, #5]
10010594:	7800      	ldrb	r0, [r0, #0]
10010596:	021b      	lsls	r3, r3, #8
10010598:	4303      	orrs	r3, r0
1001059a:	2b1b      	cmp	r3, #27
1001059c:	d104      	bne.n	100105a8 <gapm_profile_added_ind_handler+0x1c>
1001059e:	2300      	movs	r3, #0
100105a0:	700b      	strb	r3, [r1, #0]
100105a2:	0223      	lsls	r3, r4, #8
100105a4:	4313      	orrs	r3, r2
100105a6:	804b      	strh	r3, [r1, #2]
100105a8:	203b      	movs	r0, #59	; 0x3b
100105aa:	bd10      	pop	{r4, pc}

100105ac <gattc_read_req_ind_parser>:
100105ac:	7843      	ldrb	r3, [r0, #1]
100105ae:	7802      	ldrb	r2, [r0, #0]
100105b0:	021b      	lsls	r3, r3, #8
100105b2:	4313      	orrs	r3, r2
100105b4:	804b      	strh	r3, [r1, #2]
100105b6:	4770      	bx	lr

100105b8 <gattc_write_req_ind_parser>:
100105b8:	b508      	push	{r3, lr}
100105ba:	1c13      	adds	r3, r2, #0
100105bc:	0a00      	lsrs	r0, r0, #8
100105be:	8010      	strh	r0, [r2, #0]
100105c0:	784a      	ldrb	r2, [r1, #1]
100105c2:	7808      	ldrb	r0, [r1, #0]
100105c4:	0212      	lsls	r2, r2, #8
100105c6:	4302      	orrs	r2, r0
100105c8:	805a      	strh	r2, [r3, #2]
100105ca:	78ca      	ldrb	r2, [r1, #3]
100105cc:	7888      	ldrb	r0, [r1, #2]
100105ce:	0212      	lsls	r2, r2, #8
100105d0:	4302      	orrs	r2, r0
100105d2:	809a      	strh	r2, [r3, #4]
100105d4:	794a      	ldrb	r2, [r1, #5]
100105d6:	7908      	ldrb	r0, [r1, #4]
100105d8:	0212      	lsls	r2, r2, #8
100105da:	4302      	orrs	r2, r0
100105dc:	80da      	strh	r2, [r3, #6]
100105de:	3308      	adds	r3, #8
100105e0:	1c18      	adds	r0, r3, #0
100105e2:	3106      	adds	r1, #6
100105e4:	4b01      	ldr	r3, [pc, #4]	; (100105ec <gattc_write_req_ind_parser+0x34>)
100105e6:	4798      	blx	r3
100105e8:	bd08      	pop	{r3, pc}
100105ea:	46c0      	nop			; (mov r8, r8)
100105ec:	100182cf 	.word	0x100182cf

100105f0 <gattc_att_info_req_parser>:
100105f0:	7843      	ldrb	r3, [r0, #1]
100105f2:	7802      	ldrb	r2, [r0, #0]
100105f4:	021b      	lsls	r3, r3, #8
100105f6:	4313      	orrs	r3, r2
100105f8:	800b      	strh	r3, [r1, #0]
100105fa:	4770      	bx	lr

100105fc <gattc_read_cfm>:
100105fc:	b538      	push	{r3, r4, r5, lr}
100105fe:	2514      	movs	r5, #20
10010600:	1c1c      	adds	r4, r3, #0
10010602:	4b14      	ldr	r3, [pc, #80]	; (10010654 <gattc_read_cfm+0x58>)
10010604:	70d9      	strb	r1, [r3, #3]
10010606:	4914      	ldr	r1, [pc, #80]	; (10010658 <gattc_read_cfm+0x5c>)
10010608:	701d      	strb	r5, [r3, #0]
1001060a:	3d08      	subs	r5, #8
1001060c:	705d      	strb	r5, [r3, #1]
1001060e:	709d      	strb	r5, [r3, #2]
10010610:	880d      	ldrh	r5, [r1, #0]
10010612:	8809      	ldrh	r1, [r1, #0]
10010614:	7218      	strb	r0, [r3, #8]
10010616:	0a09      	lsrs	r1, r1, #8
10010618:	7159      	strb	r1, [r3, #5]
1001061a:	0a00      	lsrs	r0, r0, #8
1001061c:	0a21      	lsrs	r1, r4, #8
1001061e:	711d      	strb	r5, [r3, #4]
10010620:	7258      	strb	r0, [r3, #9]
10010622:	729c      	strb	r4, [r3, #10]
10010624:	72d9      	strb	r1, [r3, #11]
10010626:	731a      	strb	r2, [r3, #12]
10010628:	1c1d      	adds	r5, r3, #0
1001062a:	2c00      	cmp	r4, #0
1001062c:	d007      	beq.n	1001063e <gattc_read_cfm+0x42>
1001062e:	9904      	ldr	r1, [sp, #16]
10010630:	1c22      	adds	r2, r4, #0
10010632:	480a      	ldr	r0, [pc, #40]	; (1001065c <gattc_read_cfm+0x60>)
10010634:	4b0a      	ldr	r3, [pc, #40]	; (10010660 <gattc_read_cfm+0x64>)
10010636:	340d      	adds	r4, #13
10010638:	4798      	blx	r3
1001063a:	b2a1      	uxth	r1, r4
1001063c:	e001      	b.n	10010642 <gattc_read_cfm+0x46>
1001063e:	210e      	movs	r1, #14
10010640:	735c      	strb	r4, [r3, #13]
10010642:	1c0b      	adds	r3, r1, #0
10010644:	3b08      	subs	r3, #8
10010646:	71ab      	strb	r3, [r5, #6]
10010648:	121b      	asrs	r3, r3, #8
1001064a:	71eb      	strb	r3, [r5, #7]
1001064c:	1c28      	adds	r0, r5, #0
1001064e:	4b05      	ldr	r3, [pc, #20]	; (10010664 <gattc_read_cfm+0x68>)
10010650:	4798      	blx	r3
10010652:	bd38      	pop	{r3, r4, r5, pc}
10010654:	1001e508 	.word	0x1001e508
10010658:	1001e198 	.word	0x1001e198
1001065c:	1001e515 	.word	0x1001e515
10010660:	100182cf 	.word	0x100182cf
10010664:	1000f475 	.word	0x1000f475

10010668 <gattc_write_cfm>:
10010668:	4b0d      	ldr	r3, [pc, #52]	; (100106a0 <gattc_write_cfm+0x38>)
1001066a:	b510      	push	{r4, lr}
1001066c:	729a      	strb	r2, [r3, #10]
1001066e:	2203      	movs	r2, #3
10010670:	2416      	movs	r4, #22
10010672:	719a      	strb	r2, [r3, #6]
10010674:	2200      	movs	r2, #0
10010676:	70d9      	strb	r1, [r3, #3]
10010678:	490a      	ldr	r1, [pc, #40]	; (100106a4 <gattc_write_cfm+0x3c>)
1001067a:	701c      	strb	r4, [r3, #0]
1001067c:	3c0a      	subs	r4, #10
1001067e:	705c      	strb	r4, [r3, #1]
10010680:	709c      	strb	r4, [r3, #2]
10010682:	880c      	ldrh	r4, [r1, #0]
10010684:	8809      	ldrh	r1, [r1, #0]
10010686:	7218      	strb	r0, [r3, #8]
10010688:	0a09      	lsrs	r1, r1, #8
1001068a:	0a00      	lsrs	r0, r0, #8
1001068c:	711c      	strb	r4, [r3, #4]
1001068e:	7159      	strb	r1, [r3, #5]
10010690:	7258      	strb	r0, [r3, #9]
10010692:	71da      	strb	r2, [r3, #7]
10010694:	1c18      	adds	r0, r3, #0
10010696:	210b      	movs	r1, #11
10010698:	4b03      	ldr	r3, [pc, #12]	; (100106a8 <gattc_write_cfm+0x40>)
1001069a:	4798      	blx	r3
1001069c:	bd10      	pop	{r4, pc}
1001069e:	46c0      	nop			; (mov r8, r8)
100106a0:	1001e508 	.word	0x1001e508
100106a4:	1001e198 	.word	0x1001e198
100106a8:	1000f475 	.word	0x1000f475

100106ac <gattc_att_info_cfm>:
100106ac:	b538      	push	{r3, r4, r5, lr}
100106ae:	4c0e      	ldr	r4, [pc, #56]	; (100106e8 <gattc_att_info_cfm+0x3c>)
100106b0:	2518      	movs	r5, #24
100106b2:	7323      	strb	r3, [r4, #12]
100106b4:	2305      	movs	r3, #5
100106b6:	71a3      	strb	r3, [r4, #6]
100106b8:	2300      	movs	r3, #0
100106ba:	70e1      	strb	r1, [r4, #3]
100106bc:	490b      	ldr	r1, [pc, #44]	; (100106ec <gattc_att_info_cfm+0x40>)
100106be:	7025      	strb	r5, [r4, #0]
100106c0:	3d0c      	subs	r5, #12
100106c2:	7065      	strb	r5, [r4, #1]
100106c4:	70a5      	strb	r5, [r4, #2]
100106c6:	880d      	ldrh	r5, [r1, #0]
100106c8:	8809      	ldrh	r1, [r1, #0]
100106ca:	7220      	strb	r0, [r4, #8]
100106cc:	0a09      	lsrs	r1, r1, #8
100106ce:	0a00      	lsrs	r0, r0, #8
100106d0:	7161      	strb	r1, [r4, #5]
100106d2:	7260      	strb	r0, [r4, #9]
100106d4:	72a2      	strb	r2, [r4, #10]
100106d6:	71e3      	strb	r3, [r4, #7]
100106d8:	0a12      	lsrs	r2, r2, #8
100106da:	1c20      	adds	r0, r4, #0
100106dc:	210d      	movs	r1, #13
100106de:	4b04      	ldr	r3, [pc, #16]	; (100106f0 <gattc_att_info_cfm+0x44>)
100106e0:	7125      	strb	r5, [r4, #4]
100106e2:	72e2      	strb	r2, [r4, #11]
100106e4:	4798      	blx	r3
100106e6:	bd38      	pop	{r3, r4, r5, pc}
100106e8:	1001e508 	.word	0x1001e508
100106ec:	1001e198 	.word	0x1001e198
100106f0:	1000f475 	.word	0x1000f475

100106f4 <gattc_event_cfm_handler>:
100106f4:	220e      	movs	r2, #14
100106f6:	b508      	push	{r3, lr}
100106f8:	4b0b      	ldr	r3, [pc, #44]	; (10010728 <gattc_event_cfm_handler+0x34>)
100106fa:	701a      	strb	r2, [r3, #0]
100106fc:	3a02      	subs	r2, #2
100106fe:	705a      	strb	r2, [r3, #1]
10010700:	709a      	strb	r2, [r3, #2]
10010702:	4a0a      	ldr	r2, [pc, #40]	; (1001072c <gattc_event_cfm_handler+0x38>)
10010704:	70d8      	strb	r0, [r3, #3]
10010706:	8810      	ldrh	r0, [r2, #0]
10010708:	8812      	ldrh	r2, [r2, #0]
1001070a:	7219      	strb	r1, [r3, #8]
1001070c:	0a12      	lsrs	r2, r2, #8
1001070e:	715a      	strb	r2, [r3, #5]
10010710:	2202      	movs	r2, #2
10010712:	719a      	strb	r2, [r3, #6]
10010714:	2200      	movs	r2, #0
10010716:	0a09      	lsrs	r1, r1, #8
10010718:	7118      	strb	r0, [r3, #4]
1001071a:	7259      	strb	r1, [r3, #9]
1001071c:	71da      	strb	r2, [r3, #7]
1001071e:	1c18      	adds	r0, r3, #0
10010720:	210a      	movs	r1, #10
10010722:	4b03      	ldr	r3, [pc, #12]	; (10010730 <gattc_event_cfm_handler+0x3c>)
10010724:	4798      	blx	r3
10010726:	bd08      	pop	{r3, pc}
10010728:	1001e508 	.word	0x1001e508
1001072c:	1001e198 	.word	0x1001e198
10010730:	1000f475 	.word	0x1000f475

10010734 <gattc_disc_svc_ind_parser>:
10010734:	b570      	push	{r4, r5, r6, lr}
10010736:	1c15      	adds	r5, r2, #0
10010738:	0a00      	lsrs	r0, r0, #8
1001073a:	8010      	strh	r0, [r2, #0]
1001073c:	784b      	ldrb	r3, [r1, #1]
1001073e:	780a      	ldrb	r2, [r1, #0]
10010740:	021b      	lsls	r3, r3, #8
10010742:	4313      	orrs	r3, r2
10010744:	806b      	strh	r3, [r5, #2]
10010746:	78cb      	ldrb	r3, [r1, #3]
10010748:	788a      	ldrb	r2, [r1, #2]
1001074a:	021b      	lsls	r3, r3, #8
1001074c:	4313      	orrs	r3, r2
1001074e:	80ab      	strh	r3, [r5, #4]
10010750:	790e      	ldrb	r6, [r1, #4]
10010752:	4b05      	ldr	r3, [pc, #20]	; (10010768 <gattc_disc_svc_ind_parser+0x34>)
10010754:	1c30      	adds	r0, r6, #0
10010756:	1c0c      	adds	r4, r1, #0
10010758:	4798      	blx	r3
1001075a:	1c32      	adds	r2, r6, #0
1001075c:	71a8      	strb	r0, [r5, #6]
1001075e:	1d61      	adds	r1, r4, #5
10010760:	1de8      	adds	r0, r5, #7
10010762:	4b02      	ldr	r3, [pc, #8]	; (1001076c <gattc_disc_svc_ind_parser+0x38>)
10010764:	4798      	blx	r3
10010766:	bd70      	pop	{r4, r5, r6, pc}
10010768:	1000ee2d 	.word	0x1000ee2d
1001076c:	100182cf 	.word	0x100182cf

10010770 <gattc_disc_svc_incl_ind_parser>:
10010770:	b570      	push	{r4, r5, r6, lr}
10010772:	1c15      	adds	r5, r2, #0
10010774:	0a00      	lsrs	r0, r0, #8
10010776:	8010      	strh	r0, [r2, #0]
10010778:	784b      	ldrb	r3, [r1, #1]
1001077a:	780a      	ldrb	r2, [r1, #0]
1001077c:	021b      	lsls	r3, r3, #8
1001077e:	4313      	orrs	r3, r2
10010780:	806b      	strh	r3, [r5, #2]
10010782:	78cb      	ldrb	r3, [r1, #3]
10010784:	788a      	ldrb	r2, [r1, #2]
10010786:	021b      	lsls	r3, r3, #8
10010788:	4313      	orrs	r3, r2
1001078a:	80ab      	strh	r3, [r5, #4]
1001078c:	794b      	ldrb	r3, [r1, #5]
1001078e:	790a      	ldrb	r2, [r1, #4]
10010790:	021b      	lsls	r3, r3, #8
10010792:	4313      	orrs	r3, r2
10010794:	80eb      	strh	r3, [r5, #6]
10010796:	798e      	ldrb	r6, [r1, #6]
10010798:	4b05      	ldr	r3, [pc, #20]	; (100107b0 <gattc_disc_svc_incl_ind_parser+0x40>)
1001079a:	1c30      	adds	r0, r6, #0
1001079c:	1c0c      	adds	r4, r1, #0
1001079e:	4798      	blx	r3
100107a0:	7228      	strb	r0, [r5, #8]
100107a2:	1c28      	adds	r0, r5, #0
100107a4:	1c32      	adds	r2, r6, #0
100107a6:	1de1      	adds	r1, r4, #7
100107a8:	4b02      	ldr	r3, [pc, #8]	; (100107b4 <gattc_disc_svc_incl_ind_parser+0x44>)
100107aa:	3009      	adds	r0, #9
100107ac:	4798      	blx	r3
100107ae:	bd70      	pop	{r4, r5, r6, pc}
100107b0:	1000ee2d 	.word	0x1000ee2d
100107b4:	100182cf 	.word	0x100182cf

100107b8 <gattc_disc_char_ind_parser>:
100107b8:	b570      	push	{r4, r5, r6, lr}
100107ba:	1c15      	adds	r5, r2, #0
100107bc:	0a00      	lsrs	r0, r0, #8
100107be:	8010      	strh	r0, [r2, #0]
100107c0:	784b      	ldrb	r3, [r1, #1]
100107c2:	780a      	ldrb	r2, [r1, #0]
100107c4:	021b      	lsls	r3, r3, #8
100107c6:	4313      	orrs	r3, r2
100107c8:	806b      	strh	r3, [r5, #2]
100107ca:	78cb      	ldrb	r3, [r1, #3]
100107cc:	788a      	ldrb	r2, [r1, #2]
100107ce:	021b      	lsls	r3, r3, #8
100107d0:	4313      	orrs	r3, r2
100107d2:	80ab      	strh	r3, [r5, #4]
100107d4:	790b      	ldrb	r3, [r1, #4]
100107d6:	1c0c      	adds	r4, r1, #0
100107d8:	71ab      	strb	r3, [r5, #6]
100107da:	794e      	ldrb	r6, [r1, #5]
100107dc:	4b05      	ldr	r3, [pc, #20]	; (100107f4 <gattc_disc_char_ind_parser+0x3c>)
100107de:	1c30      	adds	r0, r6, #0
100107e0:	4798      	blx	r3
100107e2:	71e8      	strb	r0, [r5, #7]
100107e4:	1c28      	adds	r0, r5, #0
100107e6:	1c32      	adds	r2, r6, #0
100107e8:	1da1      	adds	r1, r4, #6
100107ea:	4b03      	ldr	r3, [pc, #12]	; (100107f8 <gattc_disc_char_ind_parser+0x40>)
100107ec:	3008      	adds	r0, #8
100107ee:	4798      	blx	r3
100107f0:	bd70      	pop	{r4, r5, r6, pc}
100107f2:	46c0      	nop			; (mov r8, r8)
100107f4:	1000ee2d 	.word	0x1000ee2d
100107f8:	100182cf 	.word	0x100182cf

100107fc <gattc_disc_char_desc_ind_parser>:
100107fc:	b570      	push	{r4, r5, r6, lr}
100107fe:	1c15      	adds	r5, r2, #0
10010800:	0a00      	lsrs	r0, r0, #8
10010802:	8010      	strh	r0, [r2, #0]
10010804:	784b      	ldrb	r3, [r1, #1]
10010806:	780a      	ldrb	r2, [r1, #0]
10010808:	021b      	lsls	r3, r3, #8
1001080a:	4313      	orrs	r3, r2
1001080c:	806b      	strh	r3, [r5, #2]
1001080e:	788e      	ldrb	r6, [r1, #2]
10010810:	4b05      	ldr	r3, [pc, #20]	; (10010828 <gattc_disc_char_desc_ind_parser+0x2c>)
10010812:	1c30      	adds	r0, r6, #0
10010814:	1c0c      	adds	r4, r1, #0
10010816:	4798      	blx	r3
10010818:	1c32      	adds	r2, r6, #0
1001081a:	7128      	strb	r0, [r5, #4]
1001081c:	1ce1      	adds	r1, r4, #3
1001081e:	1d68      	adds	r0, r5, #5
10010820:	4b02      	ldr	r3, [pc, #8]	; (1001082c <gattc_disc_char_desc_ind_parser+0x30>)
10010822:	4798      	blx	r3
10010824:	bd70      	pop	{r4, r5, r6, pc}
10010826:	46c0      	nop			; (mov r8, r8)
10010828:	1000ee2d 	.word	0x1000ee2d
1001082c:	100182cf 	.word	0x100182cf

10010830 <gattc_event_ind_and_notification_parser>:
10010830:	b510      	push	{r4, lr}
10010832:	780c      	ldrb	r4, [r1, #0]
10010834:	1c13      	adds	r3, r2, #0
10010836:	2c12      	cmp	r4, #18
10010838:	d10e      	bne.n	10010858 <gattc_event_ind_and_notification_parser+0x28>
1001083a:	0a00      	lsrs	r0, r0, #8
1001083c:	8010      	strh	r0, [r2, #0]
1001083e:	788a      	ldrb	r2, [r1, #2]
10010840:	709a      	strb	r2, [r3, #2]
10010842:	7948      	ldrb	r0, [r1, #5]
10010844:	790c      	ldrb	r4, [r1, #4]
10010846:	0200      	lsls	r0, r0, #8
10010848:	4320      	orrs	r0, r4
1001084a:	8098      	strh	r0, [r3, #4]
1001084c:	3106      	adds	r1, #6
1001084e:	1d98      	adds	r0, r3, #6
10010850:	4b0b      	ldr	r3, [pc, #44]	; (10010880 <gattc_event_ind_and_notification_parser+0x50>)
10010852:	4798      	blx	r3
10010854:	221b      	movs	r2, #27
10010856:	e010      	b.n	1001087a <gattc_event_ind_and_notification_parser+0x4a>
10010858:	2200      	movs	r2, #0
1001085a:	2c13      	cmp	r4, #19
1001085c:	d10d      	bne.n	1001087a <gattc_event_ind_and_notification_parser+0x4a>
1001085e:	0a00      	lsrs	r0, r0, #8
10010860:	8018      	strh	r0, [r3, #0]
10010862:	788a      	ldrb	r2, [r1, #2]
10010864:	709a      	strb	r2, [r3, #2]
10010866:	7908      	ldrb	r0, [r1, #4]
10010868:	78cc      	ldrb	r4, [r1, #3]
1001086a:	0200      	lsls	r0, r0, #8
1001086c:	4320      	orrs	r0, r4
1001086e:	8098      	strh	r0, [r3, #4]
10010870:	3106      	adds	r1, #6
10010872:	1d98      	adds	r0, r3, #6
10010874:	4b02      	ldr	r3, [pc, #8]	; (10010880 <gattc_event_ind_and_notification_parser+0x50>)
10010876:	4798      	blx	r3
10010878:	221c      	movs	r2, #28
1001087a:	1c10      	adds	r0, r2, #0
1001087c:	bd10      	pop	{r4, pc}
1001087e:	46c0      	nop			; (mov r8, r8)
10010880:	100182cf 	.word	0x100182cf

10010884 <gattc_complete_evt_handler>:
10010884:	b500      	push	{lr}
10010886:	0a00      	lsrs	r0, r0, #8
10010888:	8010      	strh	r0, [r2, #0]
1001088a:	7808      	ldrb	r0, [r1, #0]
1001088c:	7090      	strb	r0, [r2, #2]
1001088e:	784b      	ldrb	r3, [r1, #1]
10010890:	3801      	subs	r0, #1
10010892:	70d3      	strb	r3, [r2, #3]
10010894:	2813      	cmp	r0, #19
10010896:	d82c      	bhi.n	100108f2 <gattc_complete_evt_handler+0x6e>
10010898:	f004 fb82 	bl	10014fa0 <__gnu_thumb1_case_uqi>
1001089c:	0a0a0a0c 	.word	0x0a0a0a0c
100108a0:	210a0a0a 	.word	0x210a0a0a
100108a4:	111f2121 	.word	0x111f2121
100108a8:	2b111111 	.word	0x2b111111
100108ac:	2919132b 	.word	0x2919132b
100108b0:	2017      	movs	r0, #23
100108b2:	e01f      	b.n	100108f4 <gattc_complete_evt_handler+0x70>
100108b4:	2024      	movs	r0, #36	; 0x24
100108b6:	2b00      	cmp	r3, #0
100108b8:	d11c      	bne.n	100108f4 <gattc_complete_evt_handler+0x70>
100108ba:	3017      	adds	r0, #23
100108bc:	e01a      	b.n	100108f4 <gattc_complete_evt_handler+0x70>
100108be:	2025      	movs	r0, #37	; 0x25
100108c0:	e018      	b.n	100108f4 <gattc_complete_evt_handler+0x70>
100108c2:	4a0d      	ldr	r2, [pc, #52]	; (100108f8 <gattc_complete_evt_handler+0x74>)
100108c4:	201d      	movs	r0, #29
100108c6:	6813      	ldr	r3, [r2, #0]
100108c8:	3b01      	subs	r3, #1
100108ca:	6013      	str	r3, [r2, #0]
100108cc:	e012      	b.n	100108f4 <gattc_complete_evt_handler+0x70>
100108ce:	4a0a      	ldr	r2, [pc, #40]	; (100108f8 <gattc_complete_evt_handler+0x74>)
100108d0:	201e      	movs	r0, #30
100108d2:	6813      	ldr	r3, [r2, #0]
100108d4:	3b01      	subs	r3, #1
100108d6:	6013      	str	r3, [r2, #0]
100108d8:	e00c      	b.n	100108f4 <gattc_complete_evt_handler+0x70>
100108da:	2019      	movs	r0, #25
100108dc:	e00a      	b.n	100108f4 <gattc_complete_evt_handler+0x70>
100108de:	203b      	movs	r0, #59	; 0x3b
100108e0:	2b00      	cmp	r3, #0
100108e2:	d007      	beq.n	100108f4 <gattc_complete_evt_handler+0x70>
100108e4:	2182      	movs	r1, #130	; 0x82
100108e6:	0089      	lsls	r1, r1, #2
100108e8:	5453      	strb	r3, [r2, r1]
100108ea:	3823      	subs	r0, #35	; 0x23
100108ec:	e002      	b.n	100108f4 <gattc_complete_evt_handler+0x70>
100108ee:	2021      	movs	r0, #33	; 0x21
100108f0:	e000      	b.n	100108f4 <gattc_complete_evt_handler+0x70>
100108f2:	2000      	movs	r0, #0
100108f4:	bd00      	pop	{pc}
100108f6:	46c0      	nop			; (mov r8, r8)
100108f8:	1001d1cc 	.word	0x1001d1cc

100108fc <gattc_event_mtu_changed_ind_parser>:
100108fc:	0a00      	lsrs	r0, r0, #8
100108fe:	8010      	strh	r0, [r2, #0]
10010900:	784b      	ldrb	r3, [r1, #1]
10010902:	7809      	ldrb	r1, [r1, #0]
10010904:	021b      	lsls	r3, r3, #8
10010906:	430b      	orrs	r3, r1
10010908:	8053      	strh	r3, [r2, #2]
1001090a:	4770      	bx	lr

1001090c <gattc_read_ind_parser>:
1001090c:	0a00      	lsrs	r0, r0, #8
1001090e:	b508      	push	{r3, lr}
10010910:	8010      	strh	r0, [r2, #0]
10010912:	1c13      	adds	r3, r2, #0
10010914:	2282      	movs	r2, #130	; 0x82
10010916:	2000      	movs	r0, #0
10010918:	0092      	lsls	r2, r2, #2
1001091a:	5498      	strb	r0, [r3, r2]
1001091c:	784a      	ldrb	r2, [r1, #1]
1001091e:	7808      	ldrb	r0, [r1, #0]
10010920:	0212      	lsls	r2, r2, #8
10010922:	4302      	orrs	r2, r0
10010924:	805a      	strh	r2, [r3, #2]
10010926:	78ca      	ldrb	r2, [r1, #3]
10010928:	7888      	ldrb	r0, [r1, #2]
1001092a:	0212      	lsls	r2, r2, #8
1001092c:	4302      	orrs	r2, r0
1001092e:	80da      	strh	r2, [r3, #6]
10010930:	794a      	ldrb	r2, [r1, #5]
10010932:	7908      	ldrb	r0, [r1, #4]
10010934:	0212      	lsls	r2, r2, #8
10010936:	4302      	orrs	r2, r0
10010938:	809a      	strh	r2, [r3, #4]
1001093a:	3308      	adds	r3, #8
1001093c:	1c18      	adds	r0, r3, #0
1001093e:	3106      	adds	r1, #6
10010940:	4b01      	ldr	r3, [pc, #4]	; (10010948 <gattc_read_ind_parser+0x3c>)
10010942:	4798      	blx	r3
10010944:	bd08      	pop	{r3, pc}
10010946:	46c0      	nop			; (mov r8, r8)
10010948:	100182cf 	.word	0x100182cf

1001094c <gattc_svc_changed_cfg_ind_parser>:
1001094c:	0a00      	lsrs	r0, r0, #8
1001094e:	8010      	strh	r0, [r2, #0]
10010950:	784b      	ldrb	r3, [r1, #1]
10010952:	7809      	ldrb	r1, [r1, #0]
10010954:	021b      	lsls	r3, r3, #8
10010956:	430b      	orrs	r3, r1
10010958:	8053      	strh	r3, [r2, #2]
1001095a:	4770      	bx	lr

1001095c <init_gattc_task_module>:
1001095c:	2300      	movs	r3, #0
1001095e:	4a02      	ldr	r2, [pc, #8]	; (10010968 <init_gattc_task_module+0xc>)
10010960:	8013      	strh	r3, [r2, #0]
10010962:	4a02      	ldr	r2, [pc, #8]	; (1001096c <init_gattc_task_module+0x10>)
10010964:	8013      	strh	r3, [r2, #0]
10010966:	4770      	bx	lr
10010968:	1001d1c6 	.word	0x1001d1c6
1001096c:	1001d1c8 	.word	0x1001d1c8

10010970 <gattm_att_set_value_req_handler>:
10010970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010972:	466b      	mov	r3, sp
10010974:	1dde      	adds	r6, r3, #7
10010976:	2300      	movs	r3, #0
10010978:	1c0d      	adds	r5, r1, #0
1001097a:	210c      	movs	r1, #12
1001097c:	270b      	movs	r7, #11
1001097e:	4c17      	ldr	r4, [pc, #92]	; (100109dc <gattm_att_set_value_req_handler+0x6c>)
10010980:	7033      	strb	r3, [r6, #0]
10010982:	70e3      	strb	r3, [r4, #3]
10010984:	4b16      	ldr	r3, [pc, #88]	; (100109e0 <gattm_att_set_value_req_handler+0x70>)
10010986:	7021      	strb	r1, [r4, #0]
10010988:	8819      	ldrh	r1, [r3, #0]
1001098a:	881b      	ldrh	r3, [r3, #0]
1001098c:	7220      	strb	r0, [r4, #8]
1001098e:	0a1b      	lsrs	r3, r3, #8
10010990:	7163      	strb	r3, [r4, #5]
10010992:	0a00      	lsrs	r0, r0, #8
10010994:	0a2b      	lsrs	r3, r5, #8
10010996:	7121      	strb	r1, [r4, #4]
10010998:	7260      	strb	r0, [r4, #9]
1001099a:	1c11      	adds	r1, r2, #0
1001099c:	72a5      	strb	r5, [r4, #10]
1001099e:	1c2a      	adds	r2, r5, #0
100109a0:	72e3      	strb	r3, [r4, #11]
100109a2:	350c      	adds	r5, #12
100109a4:	4b0f      	ldr	r3, [pc, #60]	; (100109e4 <gattm_att_set_value_req_handler+0x74>)
100109a6:	4810      	ldr	r0, [pc, #64]	; (100109e8 <gattm_att_set_value_req_handler+0x78>)
100109a8:	7067      	strb	r7, [r4, #1]
100109aa:	70a7      	strb	r7, [r4, #2]
100109ac:	4798      	blx	r3
100109ae:	b2a9      	uxth	r1, r5
100109b0:	4b0e      	ldr	r3, [pc, #56]	; (100109ec <gattm_att_set_value_req_handler+0x7c>)
100109b2:	4d0f      	ldr	r5, [pc, #60]	; (100109f0 <gattm_att_set_value_req_handler+0x80>)
100109b4:	1c20      	adds	r0, r4, #0
100109b6:	802b      	strh	r3, [r5, #0]
100109b8:	1c0b      	adds	r3, r1, #0
100109ba:	3b08      	subs	r3, #8
100109bc:	71a3      	strb	r3, [r4, #6]
100109be:	121b      	asrs	r3, r3, #8
100109c0:	71e3      	strb	r3, [r4, #7]
100109c2:	4b0c      	ldr	r3, [pc, #48]	; (100109f4 <gattm_att_set_value_req_handler+0x84>)
100109c4:	80af      	strh	r7, [r5, #4]
100109c6:	4798      	blx	r3
100109c8:	1c30      	adds	r0, r6, #0
100109ca:	4b0b      	ldr	r3, [pc, #44]	; (100109f8 <gattm_att_set_value_req_handler+0x88>)
100109cc:	4798      	blx	r3
100109ce:	7833      	ldrb	r3, [r6, #0]
100109d0:	20e2      	movs	r0, #226	; 0xe2
100109d2:	2b00      	cmp	r3, #0
100109d4:	d101      	bne.n	100109da <gattm_att_set_value_req_handler+0x6a>
100109d6:	68ab      	ldr	r3, [r5, #8]
100109d8:	7898      	ldrb	r0, [r3, #2]
100109da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100109dc:	1001e508 	.word	0x1001e508
100109e0:	1001e198 	.word	0x1001e198
100109e4:	100182cf 	.word	0x100182cf
100109e8:	1001e514 	.word	0x1001e514
100109ec:	00000b0d 	.word	0x00000b0d
100109f0:	1001e18c 	.word	0x1001e18c
100109f4:	1000f475 	.word	0x1000f475
100109f8:	1000f4d9 	.word	0x1000f4d9

100109fc <gattm_att_get_value_req_handler>:
100109fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100109fe:	b085      	sub	sp, #20
10010a00:	9201      	str	r2, [sp, #4]
10010a02:	220a      	movs	r2, #10
10010a04:	1c04      	adds	r4, r0, #0
10010a06:	481d      	ldr	r0, [pc, #116]	; (10010a7c <gattm_att_get_value_req_handler+0x80>)
10010a08:	ab02      	add	r3, sp, #8
10010a0a:	1dde      	adds	r6, r3, #7
10010a0c:	7002      	strb	r2, [r0, #0]
10010a0e:	2300      	movs	r3, #0
10010a10:	220b      	movs	r2, #11
10010a12:	4d1b      	ldr	r5, [pc, #108]	; (10010a80 <gattm_att_get_value_req_handler+0x84>)
10010a14:	1c0f      	adds	r7, r1, #0
10010a16:	8829      	ldrh	r1, [r5, #0]
10010a18:	882d      	ldrh	r5, [r5, #0]
10010a1a:	7101      	strb	r1, [r0, #4]
10010a1c:	0a2d      	lsrs	r5, r5, #8
10010a1e:	7145      	strb	r5, [r0, #5]
10010a20:	0a25      	lsrs	r5, r4, #8
10010a22:	7245      	strb	r5, [r0, #9]
10010a24:	4917      	ldr	r1, [pc, #92]	; (10010a84 <gattm_att_get_value_req_handler+0x88>)
10010a26:	4d18      	ldr	r5, [pc, #96]	; (10010a88 <gattm_att_get_value_req_handler+0x8c>)
10010a28:	7033      	strb	r3, [r6, #0]
10010a2a:	7042      	strb	r2, [r0, #1]
10010a2c:	7082      	strb	r2, [r0, #2]
10010a2e:	70c3      	strb	r3, [r0, #3]
10010a30:	8029      	strh	r1, [r5, #0]
10010a32:	80aa      	strh	r2, [r5, #4]
10010a34:	71c3      	strb	r3, [r0, #7]
10010a36:	3a09      	subs	r2, #9
10010a38:	210a      	movs	r1, #10
10010a3a:	4b14      	ldr	r3, [pc, #80]	; (10010a8c <gattm_att_get_value_req_handler+0x90>)
10010a3c:	7182      	strb	r2, [r0, #6]
10010a3e:	7204      	strb	r4, [r0, #8]
10010a40:	4798      	blx	r3
10010a42:	1c30      	adds	r0, r6, #0
10010a44:	4b12      	ldr	r3, [pc, #72]	; (10010a90 <gattm_att_get_value_req_handler+0x94>)
10010a46:	4798      	blx	r3
10010a48:	7833      	ldrb	r3, [r6, #0]
10010a4a:	20e2      	movs	r0, #226	; 0xe2
10010a4c:	2b00      	cmp	r3, #0
10010a4e:	d112      	bne.n	10010a76 <gattm_att_get_value_req_handler+0x7a>
10010a50:	68a9      	ldr	r1, [r5, #8]
10010a52:	9801      	ldr	r0, [sp, #4]
10010a54:	784d      	ldrb	r5, [r1, #1]
10010a56:	780b      	ldrb	r3, [r1, #0]
10010a58:	78ca      	ldrb	r2, [r1, #3]
10010a5a:	022d      	lsls	r5, r5, #8
10010a5c:	431d      	orrs	r5, r3
10010a5e:	788b      	ldrb	r3, [r1, #2]
10010a60:	0212      	lsls	r2, r2, #8
10010a62:	431a      	orrs	r2, r3
10010a64:	803a      	strh	r2, [r7, #0]
10010a66:	790e      	ldrb	r6, [r1, #4]
10010a68:	4b0a      	ldr	r3, [pc, #40]	; (10010a94 <gattm_att_get_value_req_handler+0x98>)
10010a6a:	3105      	adds	r1, #5
10010a6c:	4798      	blx	r3
10010a6e:	20e2      	movs	r0, #226	; 0xe2
10010a70:	42ac      	cmp	r4, r5
10010a72:	d100      	bne.n	10010a76 <gattm_att_get_value_req_handler+0x7a>
10010a74:	1c30      	adds	r0, r6, #0
10010a76:	b005      	add	sp, #20
10010a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010a7a:	46c0      	nop			; (mov r8, r8)
10010a7c:	1001e508 	.word	0x1001e508
10010a80:	1001e198 	.word	0x1001e198
10010a84:	00000b0b 	.word	0x00000b0b
10010a88:	1001e18c 	.word	0x1001e18c
10010a8c:	1000f475 	.word	0x1000f475
10010a90:	1000f4d9 	.word	0x1000f4d9
10010a94:	100182cf 	.word	0x100182cf

10010a98 <htpt_enable_rsp_handler>:
10010a98:	780b      	ldrb	r3, [r1, #0]
10010a9a:	7013      	strb	r3, [r2, #0]
10010a9c:	784b      	ldrb	r3, [r1, #1]
10010a9e:	7053      	strb	r3, [r2, #1]
10010aa0:	4770      	bx	lr

10010aa2 <htpt_temp_send_rsp_handler>:
10010aa2:	780b      	ldrb	r3, [r1, #0]
10010aa4:	7013      	strb	r3, [r2, #0]
10010aa6:	4770      	bx	lr

10010aa8 <htpt_meas_intv_upd_rsp_handler>:
10010aa8:	780b      	ldrb	r3, [r1, #0]
10010aaa:	7013      	strb	r3, [r2, #0]
10010aac:	4770      	bx	lr

10010aae <htpt_meas_intv_chg_req_ind_handler>:
10010aae:	78cb      	ldrb	r3, [r1, #3]
10010ab0:	7889      	ldrb	r1, [r1, #2]
10010ab2:	021b      	lsls	r3, r3, #8
10010ab4:	430b      	orrs	r3, r1
10010ab6:	8013      	strh	r3, [r2, #0]
10010ab8:	4770      	bx	lr

10010aba <htpt_cfg_indntf_ind_handler>:
10010aba:	780b      	ldrb	r3, [r1, #0]
10010abc:	7013      	strb	r3, [r2, #0]
10010abe:	784b      	ldrb	r3, [r1, #1]
10010ac0:	7053      	strb	r3, [r2, #1]
10010ac2:	4770      	bx	lr

10010ac4 <atan2f>:
10010ac4:	b510      	push	{r4, lr}
10010ac6:	f000 f853 	bl	10010b70 <__ieee754_atan2f>
10010aca:	bd10      	pop	{r4, pc}

10010acc <sqrtf>:
10010acc:	b5f0      	push	{r4, r5, r6, r7, lr}
10010ace:	2600      	movs	r6, #0
10010ad0:	b08d      	sub	sp, #52	; 0x34
10010ad2:	1c04      	adds	r4, r0, #0
10010ad4:	f000 f8de 	bl	10010c94 <__ieee754_sqrtf>
10010ad8:	4b23      	ldr	r3, [pc, #140]	; (10010b68 <sqrtf+0x9c>)
10010ada:	1c05      	adds	r5, r0, #0
10010adc:	579e      	ldrsb	r6, [r3, r6]
10010ade:	1c73      	adds	r3, r6, #1
10010ae0:	d00b      	beq.n	10010afa <sqrtf+0x2e>
10010ae2:	1c21      	adds	r1, r4, #0
10010ae4:	1c20      	adds	r0, r4, #0
10010ae6:	f005 fb37 	bl	10016158 <__aeabi_fcmpun>
10010aea:	1e07      	subs	r7, r0, #0
10010aec:	d105      	bne.n	10010afa <sqrtf+0x2e>
10010aee:	2100      	movs	r1, #0
10010af0:	1c20      	adds	r0, r4, #0
10010af2:	f004 fc25 	bl	10015340 <__aeabi_fcmplt>
10010af6:	2800      	cmp	r0, #0
10010af8:	d102      	bne.n	10010b00 <sqrtf+0x34>
10010afa:	1c28      	adds	r0, r5, #0
10010afc:	b00d      	add	sp, #52	; 0x34
10010afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010b00:	2301      	movs	r3, #1
10010b02:	9302      	str	r3, [sp, #8]
10010b04:	4b19      	ldr	r3, [pc, #100]	; (10010b6c <sqrtf+0xa0>)
10010b06:	1c20      	adds	r0, r4, #0
10010b08:	9303      	str	r3, [sp, #12]
10010b0a:	970a      	str	r7, [sp, #40]	; 0x28
10010b0c:	f007 f9b2 	bl	10017e74 <__aeabi_f2d>
10010b10:	2200      	movs	r2, #0
10010b12:	9006      	str	r0, [sp, #24]
10010b14:	9107      	str	r1, [sp, #28]
10010b16:	9004      	str	r0, [sp, #16]
10010b18:	9105      	str	r1, [sp, #20]
10010b1a:	2300      	movs	r3, #0
10010b1c:	2e00      	cmp	r6, #0
10010b1e:	d014      	beq.n	10010b4a <sqrtf+0x7e>
10010b20:	0010      	movs	r0, r2
10010b22:	0019      	movs	r1, r3
10010b24:	f005 ff04 	bl	10016930 <__aeabi_ddiv>
10010b28:	9008      	str	r0, [sp, #32]
10010b2a:	9109      	str	r1, [sp, #36]	; 0x24
10010b2c:	2e02      	cmp	r6, #2
10010b2e:	d10e      	bne.n	10010b4e <sqrtf+0x82>
10010b30:	f007 fb88 	bl	10018244 <__errno>
10010b34:	2321      	movs	r3, #33	; 0x21
10010b36:	6003      	str	r3, [r0, #0]
10010b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10010b3a:	9301      	str	r3, [sp, #4]
10010b3c:	2b00      	cmp	r3, #0
10010b3e:	d10c      	bne.n	10010b5a <sqrtf+0x8e>
10010b40:	9808      	ldr	r0, [sp, #32]
10010b42:	9909      	ldr	r1, [sp, #36]	; 0x24
10010b44:	f007 f9ea 	bl	10017f1c <__aeabi_d2f>
10010b48:	e7d8      	b.n	10010afc <sqrtf+0x30>
10010b4a:	9208      	str	r2, [sp, #32]
10010b4c:	9309      	str	r3, [sp, #36]	; 0x24
10010b4e:	a802      	add	r0, sp, #8
10010b50:	f000 f8fc 	bl	10010d4c <matherr>
10010b54:	2800      	cmp	r0, #0
10010b56:	d1ef      	bne.n	10010b38 <sqrtf+0x6c>
10010b58:	e7ea      	b.n	10010b30 <sqrtf+0x64>
10010b5a:	f007 fb73 	bl	10018244 <__errno>
10010b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10010b60:	9301      	str	r3, [sp, #4]
10010b62:	6003      	str	r3, [r0, #0]
10010b64:	e7ec      	b.n	10010b40 <sqrtf+0x74>
10010b66:	46c0      	nop			; (mov r8, r8)
10010b68:	1001b628 	.word	0x1001b628
10010b6c:	1001afb0 	.word	0x1001afb0

10010b70 <__ieee754_atan2f>:
10010b70:	b5f0      	push	{r4, r5, r6, r7, lr}
10010b72:	004b      	lsls	r3, r1, #1
10010b74:	4647      	mov	r7, r8
10010b76:	1c0c      	adds	r4, r1, #0
10010b78:	21ff      	movs	r1, #255	; 0xff
10010b7a:	b480      	push	{r7}
10010b7c:	085b      	lsrs	r3, r3, #1
10010b7e:	05c9      	lsls	r1, r1, #23
10010b80:	428b      	cmp	r3, r1
10010b82:	dc15      	bgt.n	10010bb0 <__ieee754_atan2f+0x40>
10010b84:	0042      	lsls	r2, r0, #1
10010b86:	4680      	mov	r8, r0
10010b88:	0852      	lsrs	r2, r2, #1
10010b8a:	428a      	cmp	r2, r1
10010b8c:	dc10      	bgt.n	10010bb0 <__ieee754_atan2f+0x40>
10010b8e:	25fe      	movs	r5, #254	; 0xfe
10010b90:	05ad      	lsls	r5, r5, #22
10010b92:	42ac      	cmp	r4, r5
10010b94:	d03e      	beq.n	10010c14 <__ieee754_atan2f+0xa4>
10010b96:	2702      	movs	r7, #2
10010b98:	17a5      	asrs	r5, r4, #30
10010b9a:	403d      	ands	r5, r7
10010b9c:	0fc7      	lsrs	r7, r0, #31
10010b9e:	433d      	orrs	r5, r7
10010ba0:	2a00      	cmp	r2, #0
10010ba2:	d10c      	bne.n	10010bbe <__ieee754_atan2f+0x4e>
10010ba4:	2d02      	cmp	r5, #2
10010ba6:	d031      	beq.n	10010c0c <__ieee754_atan2f+0x9c>
10010ba8:	2d03      	cmp	r5, #3
10010baa:	d105      	bne.n	10010bb8 <__ieee754_atan2f+0x48>
10010bac:	4830      	ldr	r0, [pc, #192]	; (10010c70 <__ieee754_atan2f+0x100>)
10010bae:	e003      	b.n	10010bb8 <__ieee754_atan2f+0x48>
10010bb0:	1c01      	adds	r1, r0, #0
10010bb2:	1c20      	adds	r0, r4, #0
10010bb4:	f004 fcf6 	bl	100155a4 <__aeabi_fadd>
10010bb8:	bc04      	pop	{r2}
10010bba:	4690      	mov	r8, r2
10010bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010bbe:	2b00      	cmp	r3, #0
10010bc0:	d01d      	beq.n	10010bfe <__ieee754_atan2f+0x8e>
10010bc2:	428b      	cmp	r3, r1
10010bc4:	d029      	beq.n	10010c1a <__ieee754_atan2f+0xaa>
10010bc6:	428a      	cmp	r2, r1
10010bc8:	d019      	beq.n	10010bfe <__ieee754_atan2f+0x8e>
10010bca:	1ad3      	subs	r3, r2, r3
10010bcc:	15db      	asrs	r3, r3, #23
10010bce:	2b3c      	cmp	r3, #60	; 0x3c
10010bd0:	dc1a      	bgt.n	10010c08 <__ieee754_atan2f+0x98>
10010bd2:	2c00      	cmp	r4, #0
10010bd4:	db3a      	blt.n	10010c4c <__ieee754_atan2f+0xdc>
10010bd6:	1c21      	adds	r1, r4, #0
10010bd8:	f004 fe5a 	bl	10015890 <__aeabi_fdiv>
10010bdc:	f000 f9da 	bl	10010f94 <fabsf>
10010be0:	f000 f8bc 	bl	10010d5c <atanf>
10010be4:	2d01      	cmp	r5, #1
10010be6:	d02c      	beq.n	10010c42 <__ieee754_atan2f+0xd2>
10010be8:	2d02      	cmp	r5, #2
10010bea:	d022      	beq.n	10010c32 <__ieee754_atan2f+0xc2>
10010bec:	2d00      	cmp	r5, #0
10010bee:	d0e3      	beq.n	10010bb8 <__ieee754_atan2f+0x48>
10010bf0:	4920      	ldr	r1, [pc, #128]	; (10010c74 <__ieee754_atan2f+0x104>)
10010bf2:	f004 fcd7 	bl	100155a4 <__aeabi_fadd>
10010bf6:	4920      	ldr	r1, [pc, #128]	; (10010c78 <__ieee754_atan2f+0x108>)
10010bf8:	f005 f928 	bl	10015e4c <__aeabi_fsub>
10010bfc:	e7dc      	b.n	10010bb8 <__ieee754_atan2f+0x48>
10010bfe:	4643      	mov	r3, r8
10010c00:	2b00      	cmp	r3, #0
10010c02:	db05      	blt.n	10010c10 <__ieee754_atan2f+0xa0>
10010c04:	481d      	ldr	r0, [pc, #116]	; (10010c7c <__ieee754_atan2f+0x10c>)
10010c06:	e7d7      	b.n	10010bb8 <__ieee754_atan2f+0x48>
10010c08:	481c      	ldr	r0, [pc, #112]	; (10010c7c <__ieee754_atan2f+0x10c>)
10010c0a:	e7eb      	b.n	10010be4 <__ieee754_atan2f+0x74>
10010c0c:	481a      	ldr	r0, [pc, #104]	; (10010c78 <__ieee754_atan2f+0x108>)
10010c0e:	e7d3      	b.n	10010bb8 <__ieee754_atan2f+0x48>
10010c10:	481b      	ldr	r0, [pc, #108]	; (10010c80 <__ieee754_atan2f+0x110>)
10010c12:	e7d1      	b.n	10010bb8 <__ieee754_atan2f+0x48>
10010c14:	f000 f8a2 	bl	10010d5c <atanf>
10010c18:	e7ce      	b.n	10010bb8 <__ieee754_atan2f+0x48>
10010c1a:	429a      	cmp	r2, r3
10010c1c:	d01a      	beq.n	10010c54 <__ieee754_atan2f+0xe4>
10010c1e:	2d02      	cmp	r5, #2
10010c20:	d0f4      	beq.n	10010c0c <__ieee754_atan2f+0x9c>
10010c22:	2d03      	cmp	r5, #3
10010c24:	d0c2      	beq.n	10010bac <__ieee754_atan2f+0x3c>
10010c26:	2000      	movs	r0, #0
10010c28:	2d01      	cmp	r5, #1
10010c2a:	d1c5      	bne.n	10010bb8 <__ieee754_atan2f+0x48>
10010c2c:	2080      	movs	r0, #128	; 0x80
10010c2e:	0600      	lsls	r0, r0, #24
10010c30:	e7c2      	b.n	10010bb8 <__ieee754_atan2f+0x48>
10010c32:	4910      	ldr	r1, [pc, #64]	; (10010c74 <__ieee754_atan2f+0x104>)
10010c34:	f004 fcb6 	bl	100155a4 <__aeabi_fadd>
10010c38:	1c01      	adds	r1, r0, #0
10010c3a:	480f      	ldr	r0, [pc, #60]	; (10010c78 <__ieee754_atan2f+0x108>)
10010c3c:	f005 f906 	bl	10015e4c <__aeabi_fsub>
10010c40:	e7ba      	b.n	10010bb8 <__ieee754_atan2f+0x48>
10010c42:	2380      	movs	r3, #128	; 0x80
10010c44:	061b      	lsls	r3, r3, #24
10010c46:	469c      	mov	ip, r3
10010c48:	4460      	add	r0, ip
10010c4a:	e7b5      	b.n	10010bb8 <__ieee754_atan2f+0x48>
10010c4c:	333c      	adds	r3, #60	; 0x3c
10010c4e:	dac2      	bge.n	10010bd6 <__ieee754_atan2f+0x66>
10010c50:	2000      	movs	r0, #0
10010c52:	e7c7      	b.n	10010be4 <__ieee754_atan2f+0x74>
10010c54:	2d02      	cmp	r5, #2
10010c56:	d005      	beq.n	10010c64 <__ieee754_atan2f+0xf4>
10010c58:	2d03      	cmp	r5, #3
10010c5a:	d007      	beq.n	10010c6c <__ieee754_atan2f+0xfc>
10010c5c:	2d01      	cmp	r5, #1
10010c5e:	d003      	beq.n	10010c68 <__ieee754_atan2f+0xf8>
10010c60:	4808      	ldr	r0, [pc, #32]	; (10010c84 <__ieee754_atan2f+0x114>)
10010c62:	e7a9      	b.n	10010bb8 <__ieee754_atan2f+0x48>
10010c64:	4808      	ldr	r0, [pc, #32]	; (10010c88 <__ieee754_atan2f+0x118>)
10010c66:	e7a7      	b.n	10010bb8 <__ieee754_atan2f+0x48>
10010c68:	4808      	ldr	r0, [pc, #32]	; (10010c8c <__ieee754_atan2f+0x11c>)
10010c6a:	e7a5      	b.n	10010bb8 <__ieee754_atan2f+0x48>
10010c6c:	4808      	ldr	r0, [pc, #32]	; (10010c90 <__ieee754_atan2f+0x120>)
10010c6e:	e7a3      	b.n	10010bb8 <__ieee754_atan2f+0x48>
10010c70:	c0490fdb 	.word	0xc0490fdb
10010c74:	33bbbd2e 	.word	0x33bbbd2e
10010c78:	40490fdb 	.word	0x40490fdb
10010c7c:	3fc90fdb 	.word	0x3fc90fdb
10010c80:	bfc90fdb 	.word	0xbfc90fdb
10010c84:	3f490fdb 	.word	0x3f490fdb
10010c88:	4016cbe4 	.word	0x4016cbe4
10010c8c:	bf490fdb 	.word	0xbf490fdb
10010c90:	c016cbe4 	.word	0xc016cbe4

10010c94 <__ieee754_sqrtf>:
10010c94:	492b      	ldr	r1, [pc, #172]	; (10010d44 <__ieee754_sqrtf+0xb0>)
10010c96:	0042      	lsls	r2, r0, #1
10010c98:	b570      	push	{r4, r5, r6, lr}
10010c9a:	0003      	movs	r3, r0
10010c9c:	1c04      	adds	r4, r0, #0
10010c9e:	0852      	lsrs	r2, r2, #1
10010ca0:	428a      	cmp	r2, r1
10010ca2:	d83a      	bhi.n	10010d1a <__ieee754_sqrtf+0x86>
10010ca4:	2a00      	cmp	r2, #0
10010ca6:	d037      	beq.n	10010d18 <__ieee754_sqrtf+0x84>
10010ca8:	2800      	cmp	r0, #0
10010caa:	db3f      	blt.n	10010d2c <__ieee754_sqrtf+0x98>
10010cac:	4926      	ldr	r1, [pc, #152]	; (10010d48 <__ieee754_sqrtf+0xb4>)
10010cae:	15c0      	asrs	r0, r0, #23
10010cb0:	428a      	cmp	r2, r1
10010cb2:	d80b      	bhi.n	10010ccc <__ieee754_sqrtf+0x38>
10010cb4:	3101      	adds	r1, #1
10010cb6:	4221      	tst	r1, r4
10010cb8:	d13f      	bne.n	10010d3a <__ieee754_sqrtf+0xa6>
10010cba:	2200      	movs	r2, #0
10010cbc:	000c      	movs	r4, r1
10010cbe:	e000      	b.n	10010cc2 <__ieee754_sqrtf+0x2e>
10010cc0:	000a      	movs	r2, r1
10010cc2:	005b      	lsls	r3, r3, #1
10010cc4:	1c51      	adds	r1, r2, #1
10010cc6:	4223      	tst	r3, r4
10010cc8:	d0fa      	beq.n	10010cc0 <__ieee754_sqrtf+0x2c>
10010cca:	1a80      	subs	r0, r0, r2
10010ccc:	2280      	movs	r2, #128	; 0x80
10010cce:	025b      	lsls	r3, r3, #9
10010cd0:	0a5b      	lsrs	r3, r3, #9
10010cd2:	0412      	lsls	r2, r2, #16
10010cd4:	387f      	subs	r0, #127	; 0x7f
10010cd6:	4313      	orrs	r3, r2
10010cd8:	07c2      	lsls	r2, r0, #31
10010cda:	d425      	bmi.n	10010d28 <__ieee754_sqrtf+0x94>
10010cdc:	2280      	movs	r2, #128	; 0x80
10010cde:	2119      	movs	r1, #25
10010ce0:	2500      	movs	r5, #0
10010ce2:	2600      	movs	r6, #0
10010ce4:	1040      	asrs	r0, r0, #1
10010ce6:	005b      	lsls	r3, r3, #1
10010ce8:	0452      	lsls	r2, r2, #17
10010cea:	18b4      	adds	r4, r6, r2
10010cec:	429c      	cmp	r4, r3
10010cee:	dc02      	bgt.n	10010cf6 <__ieee754_sqrtf+0x62>
10010cf0:	18a6      	adds	r6, r4, r2
10010cf2:	1b1b      	subs	r3, r3, r4
10010cf4:	18ad      	adds	r5, r5, r2
10010cf6:	3901      	subs	r1, #1
10010cf8:	005b      	lsls	r3, r3, #1
10010cfa:	0852      	lsrs	r2, r2, #1
10010cfc:	2900      	cmp	r1, #0
10010cfe:	d1f4      	bne.n	10010cea <__ieee754_sqrtf+0x56>
10010d00:	2b00      	cmp	r3, #0
10010d02:	d002      	beq.n	10010d0a <__ieee754_sqrtf+0x76>
10010d04:	2301      	movs	r3, #1
10010d06:	402b      	ands	r3, r5
10010d08:	18ed      	adds	r5, r5, r3
10010d0a:	23fc      	movs	r3, #252	; 0xfc
10010d0c:	059b      	lsls	r3, r3, #22
10010d0e:	469c      	mov	ip, r3
10010d10:	106d      	asrs	r5, r5, #1
10010d12:	4465      	add	r5, ip
10010d14:	05c0      	lsls	r0, r0, #23
10010d16:	1940      	adds	r0, r0, r5
10010d18:	bd70      	pop	{r4, r5, r6, pc}
10010d1a:	1c01      	adds	r1, r0, #0
10010d1c:	f004 ff82 	bl	10015c24 <__aeabi_fmul>
10010d20:	1c21      	adds	r1, r4, #0
10010d22:	f004 fc3f 	bl	100155a4 <__aeabi_fadd>
10010d26:	e7f7      	b.n	10010d18 <__ieee754_sqrtf+0x84>
10010d28:	005b      	lsls	r3, r3, #1
10010d2a:	e7d7      	b.n	10010cdc <__ieee754_sqrtf+0x48>
10010d2c:	1c01      	adds	r1, r0, #0
10010d2e:	f005 f88d 	bl	10015e4c <__aeabi_fsub>
10010d32:	1c01      	adds	r1, r0, #0
10010d34:	f004 fdac 	bl	10015890 <__aeabi_fdiv>
10010d38:	e7ee      	b.n	10010d18 <__ieee754_sqrtf+0x84>
10010d3a:	2201      	movs	r2, #1
10010d3c:	4252      	negs	r2, r2
10010d3e:	1a80      	subs	r0, r0, r2
10010d40:	e7c4      	b.n	10010ccc <__ieee754_sqrtf+0x38>
10010d42:	46c0      	nop			; (mov r8, r8)
10010d44:	7f7fffff 	.word	0x7f7fffff
10010d48:	007fffff 	.word	0x007fffff

10010d4c <matherr>:
10010d4c:	2000      	movs	r0, #0
10010d4e:	4770      	bx	lr

10010d50 <nan>:
10010d50:	2000      	movs	r0, #0
10010d52:	4901      	ldr	r1, [pc, #4]	; (10010d58 <nan+0x8>)
10010d54:	4770      	bx	lr
10010d56:	46c0      	nop			; (mov r8, r8)
10010d58:	7ff80000 	.word	0x7ff80000

10010d5c <atanf>:
10010d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
10010d5e:	4647      	mov	r7, r8
10010d60:	4b75      	ldr	r3, [pc, #468]	; (10010f38 <atanf+0x1dc>)
10010d62:	0044      	lsls	r4, r0, #1
10010d64:	b480      	push	{r7}
10010d66:	1c05      	adds	r5, r0, #0
10010d68:	0007      	movs	r7, r0
10010d6a:	0864      	lsrs	r4, r4, #1
10010d6c:	429c      	cmp	r4, r3
10010d6e:	dd0b      	ble.n	10010d88 <atanf+0x2c>
10010d70:	23ff      	movs	r3, #255	; 0xff
10010d72:	05db      	lsls	r3, r3, #23
10010d74:	429c      	cmp	r4, r3
10010d76:	dd00      	ble.n	10010d7a <atanf+0x1e>
10010d78:	e072      	b.n	10010e60 <atanf+0x104>
10010d7a:	2800      	cmp	r0, #0
10010d7c:	dc00      	bgt.n	10010d80 <atanf+0x24>
10010d7e:	e09d      	b.n	10010ebc <atanf+0x160>
10010d80:	486e      	ldr	r0, [pc, #440]	; (10010f3c <atanf+0x1e0>)
10010d82:	bc04      	pop	{r2}
10010d84:	4690      	mov	r8, r2
10010d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010d88:	4b6d      	ldr	r3, [pc, #436]	; (10010f40 <atanf+0x1e4>)
10010d8a:	429c      	cmp	r4, r3
10010d8c:	dc79      	bgt.n	10010e82 <atanf+0x126>
10010d8e:	4b6d      	ldr	r3, [pc, #436]	; (10010f44 <atanf+0x1e8>)
10010d90:	429c      	cmp	r4, r3
10010d92:	dd69      	ble.n	10010e68 <atanf+0x10c>
10010d94:	2601      	movs	r6, #1
10010d96:	4276      	negs	r6, r6
10010d98:	1c29      	adds	r1, r5, #0
10010d9a:	1c28      	adds	r0, r5, #0
10010d9c:	f004 ff42 	bl	10015c24 <__aeabi_fmul>
10010da0:	1c01      	adds	r1, r0, #0
10010da2:	4680      	mov	r8, r0
10010da4:	f004 ff3e 	bl	10015c24 <__aeabi_fmul>
10010da8:	4967      	ldr	r1, [pc, #412]	; (10010f48 <atanf+0x1ec>)
10010daa:	1c04      	adds	r4, r0, #0
10010dac:	f004 ff3a 	bl	10015c24 <__aeabi_fmul>
10010db0:	4966      	ldr	r1, [pc, #408]	; (10010f4c <atanf+0x1f0>)
10010db2:	f004 fbf7 	bl	100155a4 <__aeabi_fadd>
10010db6:	1c21      	adds	r1, r4, #0
10010db8:	f004 ff34 	bl	10015c24 <__aeabi_fmul>
10010dbc:	4964      	ldr	r1, [pc, #400]	; (10010f50 <atanf+0x1f4>)
10010dbe:	f004 fbf1 	bl	100155a4 <__aeabi_fadd>
10010dc2:	1c21      	adds	r1, r4, #0
10010dc4:	f004 ff2e 	bl	10015c24 <__aeabi_fmul>
10010dc8:	4962      	ldr	r1, [pc, #392]	; (10010f54 <atanf+0x1f8>)
10010dca:	f004 fbeb 	bl	100155a4 <__aeabi_fadd>
10010dce:	1c21      	adds	r1, r4, #0
10010dd0:	f004 ff28 	bl	10015c24 <__aeabi_fmul>
10010dd4:	4960      	ldr	r1, [pc, #384]	; (10010f58 <atanf+0x1fc>)
10010dd6:	f004 fbe5 	bl	100155a4 <__aeabi_fadd>
10010dda:	1c21      	adds	r1, r4, #0
10010ddc:	f004 ff22 	bl	10015c24 <__aeabi_fmul>
10010de0:	495e      	ldr	r1, [pc, #376]	; (10010f5c <atanf+0x200>)
10010de2:	f004 fbdf 	bl	100155a4 <__aeabi_fadd>
10010de6:	4641      	mov	r1, r8
10010de8:	f004 ff1c 	bl	10015c24 <__aeabi_fmul>
10010dec:	495c      	ldr	r1, [pc, #368]	; (10010f60 <atanf+0x204>)
10010dee:	4680      	mov	r8, r0
10010df0:	1c20      	adds	r0, r4, #0
10010df2:	f004 ff17 	bl	10015c24 <__aeabi_fmul>
10010df6:	495b      	ldr	r1, [pc, #364]	; (10010f64 <atanf+0x208>)
10010df8:	f005 f828 	bl	10015e4c <__aeabi_fsub>
10010dfc:	1c21      	adds	r1, r4, #0
10010dfe:	f004 ff11 	bl	10015c24 <__aeabi_fmul>
10010e02:	4959      	ldr	r1, [pc, #356]	; (10010f68 <atanf+0x20c>)
10010e04:	f005 f822 	bl	10015e4c <__aeabi_fsub>
10010e08:	1c21      	adds	r1, r4, #0
10010e0a:	f004 ff0b 	bl	10015c24 <__aeabi_fmul>
10010e0e:	4957      	ldr	r1, [pc, #348]	; (10010f6c <atanf+0x210>)
10010e10:	f005 f81c 	bl	10015e4c <__aeabi_fsub>
10010e14:	1c21      	adds	r1, r4, #0
10010e16:	f004 ff05 	bl	10015c24 <__aeabi_fmul>
10010e1a:	4955      	ldr	r1, [pc, #340]	; (10010f70 <atanf+0x214>)
10010e1c:	f005 f816 	bl	10015e4c <__aeabi_fsub>
10010e20:	1c21      	adds	r1, r4, #0
10010e22:	f004 feff 	bl	10015c24 <__aeabi_fmul>
10010e26:	1c01      	adds	r1, r0, #0
10010e28:	1c73      	adds	r3, r6, #1
10010e2a:	d049      	beq.n	10010ec0 <atanf+0x164>
10010e2c:	4640      	mov	r0, r8
10010e2e:	f004 fbb9 	bl	100155a4 <__aeabi_fadd>
10010e32:	1c29      	adds	r1, r5, #0
10010e34:	f004 fef6 	bl	10015c24 <__aeabi_fmul>
10010e38:	4b4e      	ldr	r3, [pc, #312]	; (10010f74 <atanf+0x218>)
10010e3a:	00b6      	lsls	r6, r6, #2
10010e3c:	58f1      	ldr	r1, [r6, r3]
10010e3e:	f005 f805 	bl	10015e4c <__aeabi_fsub>
10010e42:	1c29      	adds	r1, r5, #0
10010e44:	f005 f802 	bl	10015e4c <__aeabi_fsub>
10010e48:	4b4b      	ldr	r3, [pc, #300]	; (10010f78 <atanf+0x21c>)
10010e4a:	1c01      	adds	r1, r0, #0
10010e4c:	58f0      	ldr	r0, [r6, r3]
10010e4e:	f004 fffd 	bl	10015e4c <__aeabi_fsub>
10010e52:	2f00      	cmp	r7, #0
10010e54:	da95      	bge.n	10010d82 <atanf+0x26>
10010e56:	2380      	movs	r3, #128	; 0x80
10010e58:	061b      	lsls	r3, r3, #24
10010e5a:	469c      	mov	ip, r3
10010e5c:	4460      	add	r0, ip
10010e5e:	e790      	b.n	10010d82 <atanf+0x26>
10010e60:	1c01      	adds	r1, r0, #0
10010e62:	f004 fb9f 	bl	100155a4 <__aeabi_fadd>
10010e66:	e78c      	b.n	10010d82 <atanf+0x26>
10010e68:	4944      	ldr	r1, [pc, #272]	; (10010f7c <atanf+0x220>)
10010e6a:	f004 fb9b 	bl	100155a4 <__aeabi_fadd>
10010e6e:	21fe      	movs	r1, #254	; 0xfe
10010e70:	0589      	lsls	r1, r1, #22
10010e72:	f004 fa79 	bl	10015368 <__aeabi_fcmpgt>
10010e76:	0003      	movs	r3, r0
10010e78:	1c28      	adds	r0, r5, #0
10010e7a:	2b00      	cmp	r3, #0
10010e7c:	d000      	beq.n	10010e80 <atanf+0x124>
10010e7e:	e780      	b.n	10010d82 <atanf+0x26>
10010e80:	e788      	b.n	10010d94 <atanf+0x38>
10010e82:	f000 f887 	bl	10010f94 <fabsf>
10010e86:	4b3e      	ldr	r3, [pc, #248]	; (10010f80 <atanf+0x224>)
10010e88:	1c05      	adds	r5, r0, #0
10010e8a:	429c      	cmp	r4, r3
10010e8c:	dc23      	bgt.n	10010ed6 <atanf+0x17a>
10010e8e:	4b3d      	ldr	r3, [pc, #244]	; (10010f84 <atanf+0x228>)
10010e90:	429c      	cmp	r4, r3
10010e92:	dc3f      	bgt.n	10010f14 <atanf+0x1b8>
10010e94:	1c01      	adds	r1, r0, #0
10010e96:	f004 fb85 	bl	100155a4 <__aeabi_fadd>
10010e9a:	21fe      	movs	r1, #254	; 0xfe
10010e9c:	0589      	lsls	r1, r1, #22
10010e9e:	f004 ffd5 	bl	10015e4c <__aeabi_fsub>
10010ea2:	2180      	movs	r1, #128	; 0x80
10010ea4:	1c04      	adds	r4, r0, #0
10010ea6:	05c9      	lsls	r1, r1, #23
10010ea8:	1c28      	adds	r0, r5, #0
10010eaa:	f004 fb7b 	bl	100155a4 <__aeabi_fadd>
10010eae:	1c01      	adds	r1, r0, #0
10010eb0:	1c20      	adds	r0, r4, #0
10010eb2:	f004 fced 	bl	10015890 <__aeabi_fdiv>
10010eb6:	2600      	movs	r6, #0
10010eb8:	1c05      	adds	r5, r0, #0
10010eba:	e76d      	b.n	10010d98 <atanf+0x3c>
10010ebc:	4832      	ldr	r0, [pc, #200]	; (10010f88 <atanf+0x22c>)
10010ebe:	e760      	b.n	10010d82 <atanf+0x26>
10010ec0:	4640      	mov	r0, r8
10010ec2:	f004 fb6f 	bl	100155a4 <__aeabi_fadd>
10010ec6:	1c29      	adds	r1, r5, #0
10010ec8:	f004 feac 	bl	10015c24 <__aeabi_fmul>
10010ecc:	1c01      	adds	r1, r0, #0
10010ece:	1c28      	adds	r0, r5, #0
10010ed0:	f004 ffbc 	bl	10015e4c <__aeabi_fsub>
10010ed4:	e755      	b.n	10010d82 <atanf+0x26>
10010ed6:	4b2d      	ldr	r3, [pc, #180]	; (10010f8c <atanf+0x230>)
10010ed8:	429c      	cmp	r4, r3
10010eda:	dc14      	bgt.n	10010f06 <atanf+0x1aa>
10010edc:	21ff      	movs	r1, #255	; 0xff
10010ede:	0589      	lsls	r1, r1, #22
10010ee0:	f004 ffb4 	bl	10015e4c <__aeabi_fsub>
10010ee4:	21ff      	movs	r1, #255	; 0xff
10010ee6:	1c04      	adds	r4, r0, #0
10010ee8:	0589      	lsls	r1, r1, #22
10010eea:	1c28      	adds	r0, r5, #0
10010eec:	f004 fe9a 	bl	10015c24 <__aeabi_fmul>
10010ef0:	21fe      	movs	r1, #254	; 0xfe
10010ef2:	0589      	lsls	r1, r1, #22
10010ef4:	f004 fb56 	bl	100155a4 <__aeabi_fadd>
10010ef8:	1c01      	adds	r1, r0, #0
10010efa:	1c20      	adds	r0, r4, #0
10010efc:	f004 fcc8 	bl	10015890 <__aeabi_fdiv>
10010f00:	2602      	movs	r6, #2
10010f02:	1c05      	adds	r5, r0, #0
10010f04:	e748      	b.n	10010d98 <atanf+0x3c>
10010f06:	1c01      	adds	r1, r0, #0
10010f08:	4821      	ldr	r0, [pc, #132]	; (10010f90 <atanf+0x234>)
10010f0a:	f004 fcc1 	bl	10015890 <__aeabi_fdiv>
10010f0e:	2603      	movs	r6, #3
10010f10:	1c05      	adds	r5, r0, #0
10010f12:	e741      	b.n	10010d98 <atanf+0x3c>
10010f14:	21fe      	movs	r1, #254	; 0xfe
10010f16:	0589      	lsls	r1, r1, #22
10010f18:	f004 ff98 	bl	10015e4c <__aeabi_fsub>
10010f1c:	21fe      	movs	r1, #254	; 0xfe
10010f1e:	1c04      	adds	r4, r0, #0
10010f20:	0589      	lsls	r1, r1, #22
10010f22:	1c28      	adds	r0, r5, #0
10010f24:	f004 fb3e 	bl	100155a4 <__aeabi_fadd>
10010f28:	1c01      	adds	r1, r0, #0
10010f2a:	1c20      	adds	r0, r4, #0
10010f2c:	f004 fcb0 	bl	10015890 <__aeabi_fdiv>
10010f30:	2601      	movs	r6, #1
10010f32:	1c05      	adds	r5, r0, #0
10010f34:	e730      	b.n	10010d98 <atanf+0x3c>
10010f36:	46c0      	nop			; (mov r8, r8)
10010f38:	507fffff 	.word	0x507fffff
10010f3c:	3fc90fdb 	.word	0x3fc90fdb
10010f40:	3edfffff 	.word	0x3edfffff
10010f44:	30ffffff 	.word	0x30ffffff
10010f48:	3c8569d7 	.word	0x3c8569d7
10010f4c:	3d4bda59 	.word	0x3d4bda59
10010f50:	3d886b35 	.word	0x3d886b35
10010f54:	3dba2e6e 	.word	0x3dba2e6e
10010f58:	3e124925 	.word	0x3e124925
10010f5c:	3eaaaaab 	.word	0x3eaaaaab
10010f60:	bd15a221 	.word	0xbd15a221
10010f64:	3d6ef16b 	.word	0x3d6ef16b
10010f68:	3d9d8795 	.word	0x3d9d8795
10010f6c:	3de38e38 	.word	0x3de38e38
10010f70:	3e4ccccd 	.word	0x3e4ccccd
10010f74:	1001afb8 	.word	0x1001afb8
10010f78:	1001afc8 	.word	0x1001afc8
10010f7c:	7149f2ca 	.word	0x7149f2ca
10010f80:	3f97ffff 	.word	0x3f97ffff
10010f84:	3f2fffff 	.word	0x3f2fffff
10010f88:	bfc90fdb 	.word	0xbfc90fdb
10010f8c:	401bffff 	.word	0x401bffff
10010f90:	bf800000 	.word	0xbf800000

10010f94 <fabsf>:
10010f94:	0040      	lsls	r0, r0, #1
10010f96:	0840      	lsrs	r0, r0, #1
10010f98:	4770      	bx	lr
10010f9a:	46c0      	nop			; (mov r8, r8)

10010f9c <inv_fast_nomot_parameter.part.3>:
10010f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
10010f9e:	2318      	movs	r3, #24
10010fa0:	4644      	mov	r4, r8
10010fa2:	4680      	mov	r8, r0
10010fa4:	4443      	add	r3, r8
10010fa6:	465f      	mov	r7, fp
10010fa8:	469b      	mov	fp, r3
10010faa:	2300      	movs	r3, #0
10010fac:	4656      	mov	r6, sl
10010fae:	464d      	mov	r5, r9
10010fb0:	469a      	mov	sl, r3
10010fb2:	4699      	mov	r9, r3
10010fb4:	b4f0      	push	{r4, r5, r6, r7}
10010fb6:	b08b      	sub	sp, #44	; 0x2c
10010fb8:	4643      	mov	r3, r8
10010fba:	681e      	ldr	r6, [r3, #0]
10010fbc:	685f      	ldr	r7, [r3, #4]
10010fbe:	69dc      	ldr	r4, [r3, #28]
10010fc0:	699b      	ldr	r3, [r3, #24]
10010fc2:	1c32      	adds	r2, r6, #0
10010fc4:	1c25      	adds	r5, r4, #0
10010fc6:	1c30      	adds	r0, r6, #0
10010fc8:	1c1c      	adds	r4, r3, #0
10010fca:	1c39      	adds	r1, r7, #0
10010fcc:	1c3b      	adds	r3, r7, #0
10010fce:	f004 fa03 	bl	100153d8 <__aeabi_lmul>
10010fd2:	1c22      	adds	r2, r4, #0
10010fd4:	9002      	str	r0, [sp, #8]
10010fd6:	9103      	str	r1, [sp, #12]
10010fd8:	1c2b      	adds	r3, r5, #0
10010fda:	1c20      	adds	r0, r4, #0
10010fdc:	1c29      	adds	r1, r5, #0
10010fde:	9408      	str	r4, [sp, #32]
10010fe0:	9509      	str	r5, [sp, #36]	; 0x24
10010fe2:	f004 f9f9 	bl	100153d8 <__aeabi_lmul>
10010fe6:	1c04      	adds	r4, r0, #0
10010fe8:	1c0d      	adds	r5, r1, #0
10010fea:	0f83      	lsrs	r3, r0, #30
10010fec:	0089      	lsls	r1, r1, #2
10010fee:	4319      	orrs	r1, r3
10010ff0:	9105      	str	r1, [sp, #20]
10010ff2:	0081      	lsls	r1, r0, #2
10010ff4:	9104      	str	r1, [sp, #16]
10010ff6:	9904      	ldr	r1, [sp, #16]
10010ff8:	9a05      	ldr	r2, [sp, #20]
10010ffa:	1a64      	subs	r4, r4, r1
10010ffc:	4195      	sbcs	r5, r2
10010ffe:	4641      	mov	r1, r8
10011000:	6cca      	ldr	r2, [r1, #76]	; 0x4c
10011002:	6c89      	ldr	r1, [r1, #72]	; 0x48
10011004:	1864      	adds	r4, r4, r1
10011006:	4155      	adcs	r5, r2
10011008:	9802      	ldr	r0, [sp, #8]
1001100a:	9903      	ldr	r1, [sp, #12]
1001100c:	1c02      	adds	r2, r0, #0
1001100e:	1c0b      	adds	r3, r1, #0
10011010:	1812      	adds	r2, r2, r0
10011012:	414b      	adcs	r3, r1
10011014:	1c30      	adds	r0, r6, #0
10011016:	1c39      	adds	r1, r7, #0
10011018:	f004 f9de 	bl	100153d8 <__aeabi_lmul>
1001101c:	1c02      	adds	r2, r0, #0
1001101e:	1c0b      	adds	r3, r1, #0
10011020:	1c30      	adds	r0, r6, #0
10011022:	1c39      	adds	r1, r7, #0
10011024:	f004 f9d8 	bl	100153d8 <__aeabi_lmul>
10011028:	9a08      	ldr	r2, [sp, #32]
1001102a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001102c:	1824      	adds	r4, r4, r0
1001102e:	414d      	adcs	r5, r1
10011030:	9802      	ldr	r0, [sp, #8]
10011032:	9903      	ldr	r1, [sp, #12]
10011034:	1a12      	subs	r2, r2, r0
10011036:	418b      	sbcs	r3, r1
10011038:	1c10      	adds	r0, r2, #0
1001103a:	1c19      	adds	r1, r3, #0
1001103c:	1880      	adds	r0, r0, r2
1001103e:	4159      	adcs	r1, r3
10011040:	1812      	adds	r2, r2, r0
10011042:	414b      	adcs	r3, r1
10011044:	9802      	ldr	r0, [sp, #8]
10011046:	9903      	ldr	r1, [sp, #12]
10011048:	1812      	adds	r2, r2, r0
1001104a:	414b      	adcs	r3, r1
1001104c:	1c30      	adds	r0, r6, #0
1001104e:	1c39      	adds	r1, r7, #0
10011050:	f004 f9c2 	bl	100153d8 <__aeabi_lmul>
10011054:	4643      	mov	r3, r8
10011056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
10011058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1001105a:	1a80      	subs	r0, r0, r2
1001105c:	4199      	sbcs	r1, r3
1001105e:	2204      	movs	r2, #4
10011060:	4252      	negs	r2, r2
10011062:	17d3      	asrs	r3, r2, #31
10011064:	f004 f9b8 	bl	100153d8 <__aeabi_lmul>
10011068:	1c02      	adds	r2, r0, #0
1001106a:	1c0b      	adds	r3, r1, #0
1001106c:	1c30      	adds	r0, r6, #0
1001106e:	1c39      	adds	r1, r7, #0
10011070:	f004 f9b2 	bl	100153d8 <__aeabi_lmul>
10011074:	1824      	adds	r4, r4, r0
10011076:	414d      	adcs	r5, r1
10011078:	17eb      	asrs	r3, r5, #31
1001107a:	9306      	str	r3, [sp, #24]
1001107c:	9307      	str	r3, [sp, #28]
1001107e:	9906      	ldr	r1, [sp, #24]
10011080:	9a07      	ldr	r2, [sp, #28]
10011082:	1c0b      	adds	r3, r1, #0
10011084:	4063      	eors	r3, r4
10011086:	9300      	str	r3, [sp, #0]
10011088:	1c13      	adds	r3, r2, #0
1001108a:	406b      	eors	r3, r5
1001108c:	9301      	str	r3, [sp, #4]
1001108e:	9b00      	ldr	r3, [sp, #0]
10011090:	9c01      	ldr	r4, [sp, #4]
10011092:	1a5b      	subs	r3, r3, r1
10011094:	4194      	sbcs	r4, r2
10011096:	9300      	str	r3, [sp, #0]
10011098:	9401      	str	r4, [sp, #4]
1001109a:	454c      	cmp	r4, r9
1001109c:	dc28      	bgt.n	100110f0 <inv_fast_nomot_parameter.part.3+0x154>
1001109e:	9b01      	ldr	r3, [sp, #4]
100110a0:	454b      	cmp	r3, r9
100110a2:	d022      	beq.n	100110ea <inv_fast_nomot_parameter.part.3+0x14e>
100110a4:	2308      	movs	r3, #8
100110a6:	469c      	mov	ip, r3
100110a8:	44e0      	add	r8, ip
100110aa:	45d8      	cmp	r8, fp
100110ac:	d000      	beq.n	100110b0 <inv_fast_nomot_parameter.part.3+0x114>
100110ae:	e783      	b.n	10010fb8 <inv_fast_nomot_parameter.part.3+0x1c>
100110b0:	4649      	mov	r1, r9
100110b2:	4650      	mov	r0, sl
100110b4:	f004 fa28 	bl	10015508 <__aeabi_l2f>
100110b8:	4b13      	ldr	r3, [pc, #76]	; (10011108 <inv_fast_nomot_parameter.part.3+0x16c>)
100110ba:	6b99      	ldr	r1, [r3, #56]	; 0x38
100110bc:	f004 fbe8 	bl	10015890 <__aeabi_fdiv>
100110c0:	f004 f9ec 	bl	1001549c <__aeabi_f2lz>
100110c4:	2383      	movs	r3, #131	; 0x83
100110c6:	4a11      	ldr	r2, [pc, #68]	; (1001110c <inv_fast_nomot_parameter.part.3+0x170>)
100110c8:	009b      	lsls	r3, r3, #2
100110ca:	58d3      	ldr	r3, [r2, r3]
100110cc:	2220      	movs	r2, #32
100110ce:	009b      	lsls	r3, r3, #2
100110d0:	4252      	negs	r2, r2
100110d2:	189a      	adds	r2, r3, r2
100110d4:	d411      	bmi.n	100110fa <inv_fast_nomot_parameter.part.3+0x15e>
100110d6:	1c08      	adds	r0, r1, #0
100110d8:	4110      	asrs	r0, r2
100110da:	4119      	asrs	r1, r3
100110dc:	b00b      	add	sp, #44	; 0x2c
100110de:	bc3c      	pop	{r2, r3, r4, r5}
100110e0:	4690      	mov	r8, r2
100110e2:	4699      	mov	r9, r3
100110e4:	46a2      	mov	sl, r4
100110e6:	46ab      	mov	fp, r5
100110e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100110ea:	9b00      	ldr	r3, [sp, #0]
100110ec:	4553      	cmp	r3, sl
100110ee:	d9d9      	bls.n	100110a4 <inv_fast_nomot_parameter.part.3+0x108>
100110f0:	9b00      	ldr	r3, [sp, #0]
100110f2:	9c01      	ldr	r4, [sp, #4]
100110f4:	469a      	mov	sl, r3
100110f6:	46a1      	mov	r9, r4
100110f8:	e7d4      	b.n	100110a4 <inv_fast_nomot_parameter.part.3+0x108>
100110fa:	2220      	movs	r2, #32
100110fc:	1c0c      	adds	r4, r1, #0
100110fe:	1ad2      	subs	r2, r2, r3
10011100:	4094      	lsls	r4, r2
10011102:	40d8      	lsrs	r0, r3
10011104:	4320      	orrs	r0, r4
10011106:	e7e8      	b.n	100110da <inv_fast_nomot_parameter.part.3+0x13e>
10011108:	1001d1d0 	.word	0x1001d1d0
1001110c:	1001e708 	.word	0x1001e708

10011110 <inv_init_maxmin>:
10011110:	07c3      	lsls	r3, r0, #31
10011112:	d50a      	bpl.n	1001112a <inv_init_maxmin+0x1a>
10011114:	22c0      	movs	r2, #192	; 0xc0
10011116:	4b19      	ldr	r3, [pc, #100]	; (1001117c <inv_init_maxmin+0x6c>)
10011118:	0612      	lsls	r2, r2, #24
1001111a:	669a      	str	r2, [r3, #104]	; 0x68
1001111c:	66da      	str	r2, [r3, #108]	; 0x6c
1001111e:	671a      	str	r2, [r3, #112]	; 0x70
10011120:	2280      	movs	r2, #128	; 0x80
10011122:	05d2      	lsls	r2, r2, #23
10011124:	675a      	str	r2, [r3, #116]	; 0x74
10011126:	679a      	str	r2, [r3, #120]	; 0x78
10011128:	67da      	str	r2, [r3, #124]	; 0x7c
1001112a:	0783      	lsls	r3, r0, #30
1001112c:	d511      	bpl.n	10011152 <inv_init_maxmin+0x42>
1001112e:	22c0      	movs	r2, #192	; 0xc0
10011130:	2180      	movs	r1, #128	; 0x80
10011132:	4b12      	ldr	r3, [pc, #72]	; (1001117c <inv_init_maxmin+0x6c>)
10011134:	0612      	lsls	r2, r2, #24
10011136:	0049      	lsls	r1, r1, #1
10011138:	505a      	str	r2, [r3, r1]
1001113a:	3104      	adds	r1, #4
1001113c:	505a      	str	r2, [r3, r1]
1001113e:	3104      	adds	r1, #4
10011140:	505a      	str	r2, [r3, r1]
10011142:	2280      	movs	r2, #128	; 0x80
10011144:	3104      	adds	r1, #4
10011146:	05d2      	lsls	r2, r2, #23
10011148:	505a      	str	r2, [r3, r1]
1001114a:	3104      	adds	r1, #4
1001114c:	505a      	str	r2, [r3, r1]
1001114e:	3104      	adds	r1, #4
10011150:	505a      	str	r2, [r3, r1]
10011152:	0743      	lsls	r3, r0, #29
10011154:	d511      	bpl.n	1001117a <inv_init_maxmin+0x6a>
10011156:	22c0      	movs	r2, #192	; 0xc0
10011158:	21cc      	movs	r1, #204	; 0xcc
1001115a:	4b08      	ldr	r3, [pc, #32]	; (1001117c <inv_init_maxmin+0x6c>)
1001115c:	0612      	lsls	r2, r2, #24
1001115e:	0049      	lsls	r1, r1, #1
10011160:	505a      	str	r2, [r3, r1]
10011162:	3104      	adds	r1, #4
10011164:	505a      	str	r2, [r3, r1]
10011166:	3104      	adds	r1, #4
10011168:	505a      	str	r2, [r3, r1]
1001116a:	2280      	movs	r2, #128	; 0x80
1001116c:	3104      	adds	r1, #4
1001116e:	05d2      	lsls	r2, r2, #23
10011170:	505a      	str	r2, [r3, r1]
10011172:	3104      	adds	r1, #4
10011174:	505a      	str	r2, [r3, r1]
10011176:	3104      	adds	r1, #4
10011178:	505a      	str	r2, [r3, r1]
1001117a:	4770      	bx	lr
1001117c:	1001e708 	.word	0x1001e708

10011180 <inv_reset_packet>:
10011180:	b510      	push	{r4, lr}
10011182:	4c08      	ldr	r4, [pc, #32]	; (100111a4 <inv_reset_packet+0x24>)
10011184:	2100      	movs	r1, #0
10011186:	1c20      	adds	r0, r4, #0
10011188:	2298      	movs	r2, #152	; 0x98
1001118a:	f007 f8be 	bl	1001830a <memset>
1001118e:	1c20      	adds	r0, r4, #0
10011190:	3031      	adds	r0, #49	; 0x31
10011192:	2100      	movs	r1, #0
10011194:	2298      	movs	r2, #152	; 0x98
10011196:	30ff      	adds	r0, #255	; 0xff
10011198:	f007 f8b7 	bl	1001830a <memset>
1001119c:	2005      	movs	r0, #5
1001119e:	f7ff ffb7 	bl	10011110 <inv_init_maxmin>
100111a2:	bd10      	pop	{r4, pc}
100111a4:	1001e710 	.word	0x1001e710

100111a8 <inv_start_fast_nomot>:
100111a8:	2298      	movs	r2, #152	; 0x98
100111aa:	b510      	push	{r4, lr}
100111ac:	4c0c      	ldr	r4, [pc, #48]	; (100111e0 <inv_start_fast_nomot+0x38>)
100111ae:	2100      	movs	r1, #0
100111b0:	0092      	lsls	r2, r2, #2
100111b2:	1c20      	adds	r0, r4, #0
100111b4:	f007 f8a9 	bl	1001830a <memset>
100111b8:	2007      	movs	r0, #7
100111ba:	f7ff ffa9 	bl	10011110 <inv_init_maxmin>
100111be:	22f2      	movs	r2, #242	; 0xf2
100111c0:	2301      	movs	r3, #1
100111c2:	0052      	lsls	r2, r2, #1
100111c4:	50a3      	str	r3, [r4, r2]
100111c6:	3204      	adds	r2, #4
100111c8:	54a3      	strb	r3, [r4, r2]
100111ca:	2001      	movs	r0, #1
100111cc:	2103      	movs	r1, #3
100111ce:	2200      	movs	r2, #0
100111d0:	f7f8 ffb6 	bl	1000a140 <inv_set_message>
100111d4:	2164      	movs	r1, #100	; 0x64
100111d6:	2207      	movs	r2, #7
100111d8:	4802      	ldr	r0, [pc, #8]	; (100111e4 <inv_start_fast_nomot+0x3c>)
100111da:	f7f8 fd69 	bl	10009cb0 <inv_register_data_cb>
100111de:	bd10      	pop	{r4, pc}
100111e0:	1001e708 	.word	0x1001e708
100111e4:	10011901 	.word	0x10011901

100111e8 <inv_fast_nomot_parameter>:
100111e8:	6f81      	ldr	r1, [r0, #120]	; 0x78
100111ea:	b508      	push	{r3, lr}
100111ec:	2200      	movs	r2, #0
100111ee:	2300      	movs	r3, #0
100111f0:	2900      	cmp	r1, #0
100111f2:	d003      	beq.n	100111fc <inv_fast_nomot_parameter+0x14>
100111f4:	f7ff fed2 	bl	10010f9c <inv_fast_nomot_parameter.part.3>
100111f8:	1c02      	adds	r2, r0, #0
100111fa:	1c0b      	adds	r3, r1, #0
100111fc:	1c10      	adds	r0, r2, #0
100111fe:	1c19      	adds	r1, r3, #0
10011200:	bd08      	pop	{r3, pc}
10011202:	46c0      	nop			; (mov r8, r8)

10011204 <inv_fast_nomot_parameter_3rd>:
10011204:	b5f0      	push	{r4, r5, r6, r7, lr}
10011206:	465f      	mov	r7, fp
10011208:	4656      	mov	r6, sl
1001120a:	464d      	mov	r5, r9
1001120c:	4644      	mov	r4, r8
1001120e:	b4f0      	push	{r4, r5, r6, r7}
10011210:	6f83      	ldr	r3, [r0, #120]	; 0x78
10011212:	b085      	sub	sp, #20
10011214:	2b00      	cmp	r3, #0
10011216:	d063      	beq.n	100112e0 <inv_fast_nomot_parameter_3rd+0xdc>
10011218:	4680      	mov	r8, r0
1001121a:	2318      	movs	r3, #24
1001121c:	4443      	add	r3, r8
1001121e:	469b      	mov	fp, r3
10011220:	2300      	movs	r3, #0
10011222:	469a      	mov	sl, r3
10011224:	4699      	mov	r9, r3
10011226:	4643      	mov	r3, r8
10011228:	681c      	ldr	r4, [r3, #0]
1001122a:	685d      	ldr	r5, [r3, #4]
1001122c:	1c22      	adds	r2, r4, #0
1001122e:	1c20      	adds	r0, r4, #0
10011230:	1c2b      	adds	r3, r5, #0
10011232:	1c29      	adds	r1, r5, #0
10011234:	f004 f8d0 	bl	100153d8 <__aeabi_lmul>
10011238:	4643      	mov	r3, r8
1001123a:	9002      	str	r0, [sp, #8]
1001123c:	9103      	str	r1, [sp, #12]
1001123e:	6998      	ldr	r0, [r3, #24]
10011240:	69d9      	ldr	r1, [r3, #28]
10011242:	9a02      	ldr	r2, [sp, #8]
10011244:	9b03      	ldr	r3, [sp, #12]
10011246:	1a80      	subs	r0, r0, r2
10011248:	4199      	sbcs	r1, r3
1001124a:	1c02      	adds	r2, r0, #0
1001124c:	1c0b      	adds	r3, r1, #0
1001124e:	1812      	adds	r2, r2, r0
10011250:	414b      	adcs	r3, r1
10011252:	1880      	adds	r0, r0, r2
10011254:	4159      	adcs	r1, r3
10011256:	9a02      	ldr	r2, [sp, #8]
10011258:	9b03      	ldr	r3, [sp, #12]
1001125a:	1880      	adds	r0, r0, r2
1001125c:	4159      	adcs	r1, r3
1001125e:	1c22      	adds	r2, r4, #0
10011260:	1c2b      	adds	r3, r5, #0
10011262:	f004 f8b9 	bl	100153d8 <__aeabi_lmul>
10011266:	4643      	mov	r3, r8
10011268:	6b5c      	ldr	r4, [r3, #52]	; 0x34
1001126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1001126c:	1ac0      	subs	r0, r0, r3
1001126e:	41a1      	sbcs	r1, r4
10011270:	17cb      	asrs	r3, r1, #31
10011272:	9300      	str	r3, [sp, #0]
10011274:	9301      	str	r3, [sp, #4]
10011276:	9b00      	ldr	r3, [sp, #0]
10011278:	9c01      	ldr	r4, [sp, #4]
1001127a:	1c1a      	adds	r2, r3, #0
1001127c:	4042      	eors	r2, r0
1001127e:	1c16      	adds	r6, r2, #0
10011280:	1c22      	adds	r2, r4, #0
10011282:	404a      	eors	r2, r1
10011284:	1c17      	adds	r7, r2, #0
10011286:	1af6      	subs	r6, r6, r3
10011288:	41a7      	sbcs	r7, r4
1001128a:	454f      	cmp	r7, r9
1001128c:	dc25      	bgt.n	100112da <inv_fast_nomot_parameter_3rd+0xd6>
1001128e:	d022      	beq.n	100112d6 <inv_fast_nomot_parameter_3rd+0xd2>
10011290:	2308      	movs	r3, #8
10011292:	469c      	mov	ip, r3
10011294:	44e0      	add	r8, ip
10011296:	45d8      	cmp	r8, fp
10011298:	d1c5      	bne.n	10011226 <inv_fast_nomot_parameter_3rd+0x22>
1001129a:	4649      	mov	r1, r9
1001129c:	4650      	mov	r0, sl
1001129e:	f004 f933 	bl	10015508 <__aeabi_l2f>
100112a2:	4b14      	ldr	r3, [pc, #80]	; (100112f4 <inv_fast_nomot_parameter_3rd+0xf0>)
100112a4:	6b99      	ldr	r1, [r3, #56]	; 0x38
100112a6:	f004 faf3 	bl	10015890 <__aeabi_fdiv>
100112aa:	f004 f8f7 	bl	1001549c <__aeabi_f2lz>
100112ae:	2383      	movs	r3, #131	; 0x83
100112b0:	4a11      	ldr	r2, [pc, #68]	; (100112f8 <inv_fast_nomot_parameter_3rd+0xf4>)
100112b2:	009b      	lsls	r3, r3, #2
100112b4:	58d3      	ldr	r3, [r2, r3]
100112b6:	005a      	lsls	r2, r3, #1
100112b8:	18d2      	adds	r2, r2, r3
100112ba:	2320      	movs	r3, #32
100112bc:	425b      	negs	r3, r3
100112be:	18d3      	adds	r3, r2, r3
100112c0:	d411      	bmi.n	100112e6 <inv_fast_nomot_parameter_3rd+0xe2>
100112c2:	1c08      	adds	r0, r1, #0
100112c4:	4118      	asrs	r0, r3
100112c6:	4111      	asrs	r1, r2
100112c8:	b005      	add	sp, #20
100112ca:	bc3c      	pop	{r2, r3, r4, r5}
100112cc:	4690      	mov	r8, r2
100112ce:	4699      	mov	r9, r3
100112d0:	46a2      	mov	sl, r4
100112d2:	46ab      	mov	fp, r5
100112d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100112d6:	4556      	cmp	r6, sl
100112d8:	d9da      	bls.n	10011290 <inv_fast_nomot_parameter_3rd+0x8c>
100112da:	46b2      	mov	sl, r6
100112dc:	46b9      	mov	r9, r7
100112de:	e7d7      	b.n	10011290 <inv_fast_nomot_parameter_3rd+0x8c>
100112e0:	2000      	movs	r0, #0
100112e2:	2100      	movs	r1, #0
100112e4:	e7f0      	b.n	100112c8 <inv_fast_nomot_parameter_3rd+0xc4>
100112e6:	2320      	movs	r3, #32
100112e8:	1c0c      	adds	r4, r1, #0
100112ea:	1a9b      	subs	r3, r3, r2
100112ec:	409c      	lsls	r4, r3
100112ee:	40d0      	lsrs	r0, r2
100112f0:	4320      	orrs	r0, r4
100112f2:	e7e8      	b.n	100112c6 <inv_fast_nomot_parameter_3rd+0xc2>
100112f4:	1001d1d0 	.word	0x1001d1d0
100112f8:	1001e708 	.word	0x1001e708

100112fc <inv_fast_nomot_set_gyro_bias>:
100112fc:	2384      	movs	r3, #132	; 0x84
100112fe:	b5f0      	push	{r4, r5, r6, r7, lr}
10011300:	4d2e      	ldr	r5, [pc, #184]	; (100113bc <inv_fast_nomot_set_gyro_bias+0xc0>)
10011302:	1c06      	adds	r6, r0, #0
10011304:	2100      	movs	r1, #0
10011306:	1c28      	adds	r0, r5, #0
10011308:	009b      	lsls	r3, r3, #2
1001130a:	b085      	sub	sp, #20
1001130c:	58ef      	ldr	r7, [r5, r3]
1001130e:	ac01      	add	r4, sp, #4
10011310:	1c0b      	adds	r3, r1, #0
10011312:	6882      	ldr	r2, [r0, #8]
10011314:	3384      	adds	r3, #132	; 0x84
10011316:	40ba      	lsls	r2, r7
10011318:	58eb      	ldr	r3, [r5, r3]
1001131a:	3008      	adds	r0, #8
1001131c:	041b      	lsls	r3, r3, #16
1001131e:	189b      	adds	r3, r3, r2
10011320:	5063      	str	r3, [r4, r1]
10011322:	3104      	adds	r1, #4
10011324:	290c      	cmp	r1, #12
10011326:	d1f3      	bne.n	10011310 <inv_fast_nomot_set_gyro_bias+0x14>
10011328:	4f25      	ldr	r7, [pc, #148]	; (100113c0 <inv_fast_nomot_set_gyro_bias+0xc4>)
1001132a:	2298      	movs	r2, #152	; 0x98
1001132c:	1c38      	adds	r0, r7, #0
1001132e:	2100      	movs	r1, #0
10011330:	f006 ffeb 	bl	1001830a <memset>
10011334:	2001      	movs	r0, #1
10011336:	f7ff feeb 	bl	10011110 <inv_init_maxmin>
1001133a:	23f4      	movs	r3, #244	; 0xf4
1001133c:	3f08      	subs	r7, #8
1001133e:	005b      	lsls	r3, r3, #1
10011340:	5cfa      	ldrb	r2, [r7, r3]
10011342:	2a04      	cmp	r2, #4
10011344:	d02f      	beq.n	100113a6 <inv_fast_nomot_set_gyro_bias+0xaa>
10011346:	4f1f      	ldr	r7, [pc, #124]	; (100113c4 <inv_fast_nomot_set_gyro_bias+0xc8>)
10011348:	9b01      	ldr	r3, [sp, #4]
1001134a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1001134c:	1a98      	subs	r0, r3, r2
1001134e:	6aba      	ldr	r2, [r7, #40]	; 0x28
10011350:	6863      	ldr	r3, [r4, #4]
10011352:	1a9b      	subs	r3, r3, r2
10011354:	17da      	asrs	r2, r3, #31
10011356:	189b      	adds	r3, r3, r2
10011358:	4053      	eors	r3, r2
1001135a:	17c2      	asrs	r2, r0, #31
1001135c:	1880      	adds	r0, r0, r2
1001135e:	4050      	eors	r0, r2
10011360:	4298      	cmp	r0, r3
10011362:	da00      	bge.n	10011366 <inv_fast_nomot_set_gyro_bias+0x6a>
10011364:	1c18      	adds	r0, r3, #0
10011366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10011368:	68a3      	ldr	r3, [r4, #8]
1001136a:	1a9b      	subs	r3, r3, r2
1001136c:	17da      	asrs	r2, r3, #31
1001136e:	189b      	adds	r3, r3, r2
10011370:	4053      	eors	r3, r2
10011372:	4298      	cmp	r0, r3
10011374:	da00      	bge.n	10011378 <inv_fast_nomot_set_gyro_bias+0x7c>
10011376:	1c18      	adds	r0, r3, #0
10011378:	6a71      	ldr	r1, [r6, #36]	; 0x24
1001137a:	f7f8 ff1f 	bl	1000a1bc <inv_q30_mult>
1001137e:	2386      	movs	r3, #134	; 0x86
10011380:	009b      	lsls	r3, r3, #2
10011382:	58eb      	ldr	r3, [r5, r3]
10011384:	4298      	cmp	r0, r3
10011386:	da06      	bge.n	10011396 <inv_fast_nomot_set_gyro_bias+0x9a>
10011388:	1c20      	adds	r0, r4, #0
1001138a:	2103      	movs	r1, #3
1001138c:	f7f8 fc22 	bl	10009bd4 <inv_set_gyro_bias>
10011390:	2002      	movs	r0, #2
10011392:	f7f9 fc51 	bl	1000ac38 <inv_set_motion_state>
10011396:	9b01      	ldr	r3, [sp, #4]
10011398:	627b      	str	r3, [r7, #36]	; 0x24
1001139a:	6863      	ldr	r3, [r4, #4]
1001139c:	62bb      	str	r3, [r7, #40]	; 0x28
1001139e:	68a3      	ldr	r3, [r4, #8]
100113a0:	62fb      	str	r3, [r7, #44]	; 0x2c
100113a2:	b005      	add	sp, #20
100113a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100113a6:	2286      	movs	r2, #134	; 0x86
100113a8:	0092      	lsls	r2, r2, #2
100113aa:	58b9      	ldr	r1, [r7, r2]
100113ac:	22a0      	movs	r2, #160	; 0xa0
100113ae:	0392      	lsls	r2, r2, #14
100113b0:	4291      	cmp	r1, r2
100113b2:	ddc8      	ble.n	10011346 <inv_fast_nomot_set_gyro_bias+0x4a>
100113b4:	2205      	movs	r2, #5
100113b6:	54fa      	strb	r2, [r7, r3]
100113b8:	e7c5      	b.n	10011346 <inv_fast_nomot_set_gyro_bias+0x4a>
100113ba:	46c0      	nop			; (mov r8, r8)
100113bc:	1001e708 	.word	0x1001e708
100113c0:	1001e710 	.word	0x1001e710
100113c4:	1001d1d0 	.word	0x1001d1d0

100113c8 <inv_set_fast_nomot_compass_threshold>:
100113c8:	4b01      	ldr	r3, [pc, #4]	; (100113d0 <inv_set_fast_nomot_compass_threshold+0x8>)
100113ca:	6098      	str	r0, [r3, #8]
100113cc:	60d9      	str	r1, [r3, #12]
100113ce:	4770      	bx	lr
100113d0:	1001d1d0 	.word	0x1001d1d0

100113d4 <int_set_fast_nomot_gyro_threshold>:
100113d4:	4b01      	ldr	r3, [pc, #4]	; (100113dc <int_set_fast_nomot_gyro_threshold+0x8>)
100113d6:	6198      	str	r0, [r3, #24]
100113d8:	61d9      	str	r1, [r3, #28]
100113da:	4770      	bx	lr
100113dc:	1001d1d0 	.word	0x1001d1d0

100113e0 <inv_set_fast_nomot_accel_threshold>:
100113e0:	4b01      	ldr	r3, [pc, #4]	; (100113e8 <inv_set_fast_nomot_accel_threshold+0x8>)
100113e2:	6118      	str	r0, [r3, #16]
100113e4:	6159      	str	r1, [r3, #20]
100113e6:	4770      	bx	lr
100113e8:	1001d1d0 	.word	0x1001d1d0

100113ec <inv_get_fast_nomot_compass_param>:
100113ec:	22f0      	movs	r2, #240	; 0xf0
100113ee:	4b05      	ldr	r3, [pc, #20]	; (10011404 <inv_get_fast_nomot_compass_param+0x18>)
100113f0:	0052      	lsls	r2, r2, #1
100113f2:	589a      	ldr	r2, [r3, r2]
100113f4:	33d1      	adds	r3, #209	; 0xd1
100113f6:	33ff      	adds	r3, #255	; 0xff
100113f8:	6002      	str	r2, [r0, #0]
100113fa:	681a      	ldr	r2, [r3, #0]
100113fc:	685b      	ldr	r3, [r3, #4]
100113fe:	600a      	str	r2, [r1, #0]
10011400:	604b      	str	r3, [r1, #4]
10011402:	4770      	bx	lr
10011404:	1001e708 	.word	0x1001e708

10011408 <inv_get_fast_nomot_accel_param>:
10011408:	22f0      	movs	r2, #240	; 0xf0
1001140a:	4b05      	ldr	r3, [pc, #20]	; (10011420 <inv_get_fast_nomot_accel_param+0x18>)
1001140c:	0052      	lsls	r2, r2, #1
1001140e:	589a      	ldr	r2, [r3, r2]
10011410:	33d9      	adds	r3, #217	; 0xd9
10011412:	33ff      	adds	r3, #255	; 0xff
10011414:	6002      	str	r2, [r0, #0]
10011416:	681a      	ldr	r2, [r3, #0]
10011418:	685b      	ldr	r3, [r3, #4]
1001141a:	600a      	str	r2, [r1, #0]
1001141c:	604b      	str	r3, [r1, #4]
1001141e:	4770      	bx	lr
10011420:	1001e708 	.word	0x1001e708

10011424 <inv_fast_nomot_store_data>:
10011424:	b5f0      	push	{r4, r5, r6, r7, lr}
10011426:	4656      	mov	r6, sl
10011428:	465f      	mov	r7, fp
1001142a:	464d      	mov	r5, r9
1001142c:	4644      	mov	r4, r8
1001142e:	b4f0      	push	{r4, r5, r6, r7}
10011430:	6f8b      	ldr	r3, [r1, #120]	; 0x78
10011432:	b083      	sub	sp, #12
10011434:	468b      	mov	fp, r1
10011436:	9300      	str	r3, [sp, #0]
10011438:	2360      	movs	r3, #96	; 0x60
1001143a:	445b      	add	r3, fp
1001143c:	4698      	mov	r8, r3
1001143e:	2318      	movs	r3, #24
10011440:	4682      	mov	sl, r0
10011442:	4645      	mov	r5, r8
10011444:	465e      	mov	r6, fp
10011446:	445b      	add	r3, fp
10011448:	9301      	str	r3, [sp, #4]
1001144a:	9b00      	ldr	r3, [sp, #0]
1001144c:	2b00      	cmp	r3, #0
1001144e:	d038      	beq.n	100114c2 <inv_fast_nomot_store_data+0x9e>
10011450:	4653      	mov	r3, sl
10011452:	2200      	movs	r2, #0
10011454:	5e9b      	ldrsh	r3, [r3, r2]
10011456:	69ea      	ldr	r2, [r5, #28]
10011458:	1a9b      	subs	r3, r3, r2
1001145a:	17da      	asrs	r2, r3, #31
1001145c:	4699      	mov	r9, r3
1001145e:	4690      	mov	r8, r2
10011460:	682a      	ldr	r2, [r5, #0]
10011462:	429a      	cmp	r2, r3
10011464:	da00      	bge.n	10011468 <inv_fast_nomot_store_data+0x44>
10011466:	602b      	str	r3, [r5, #0]
10011468:	68ea      	ldr	r2, [r5, #12]
1001146a:	429a      	cmp	r2, r3
1001146c:	dd00      	ble.n	10011470 <inv_fast_nomot_store_data+0x4c>
1001146e:	60eb      	str	r3, [r5, #12]
10011470:	1c37      	adds	r7, r6, #0
10011472:	1c34      	adds	r4, r6, #0
10011474:	2001      	movs	r0, #1
10011476:	2100      	movs	r1, #0
10011478:	3760      	adds	r7, #96	; 0x60
1001147a:	464a      	mov	r2, r9
1001147c:	4643      	mov	r3, r8
1001147e:	f003 ffab 	bl	100153d8 <__aeabi_lmul>
10011482:	6822      	ldr	r2, [r4, #0]
10011484:	6863      	ldr	r3, [r4, #4]
10011486:	1812      	adds	r2, r2, r0
10011488:	414b      	adcs	r3, r1
1001148a:	6022      	str	r2, [r4, #0]
1001148c:	6063      	str	r3, [r4, #4]
1001148e:	3418      	adds	r4, #24
10011490:	42a7      	cmp	r7, r4
10011492:	d1f2      	bne.n	1001147a <inv_fast_nomot_store_data+0x56>
10011494:	2302      	movs	r3, #2
10011496:	469c      	mov	ip, r3
10011498:	9b01      	ldr	r3, [sp, #4]
1001149a:	3608      	adds	r6, #8
1001149c:	3504      	adds	r5, #4
1001149e:	44e2      	add	sl, ip
100114a0:	429e      	cmp	r6, r3
100114a2:	d1d2      	bne.n	1001144a <inv_fast_nomot_store_data+0x26>
100114a4:	465a      	mov	r2, fp
100114a6:	9b00      	ldr	r3, [sp, #0]
100114a8:	4659      	mov	r1, fp
100114aa:	3301      	adds	r3, #1
100114ac:	6793      	str	r3, [r2, #120]	; 0x78
100114ae:	2201      	movs	r2, #1
100114b0:	2390      	movs	r3, #144	; 0x90
100114b2:	50ca      	str	r2, [r1, r3]
100114b4:	b003      	add	sp, #12
100114b6:	bc3c      	pop	{r2, r3, r4, r5}
100114b8:	4690      	mov	r8, r2
100114ba:	4699      	mov	r9, r3
100114bc:	46a2      	mov	sl, r4
100114be:	46ab      	mov	fp, r5
100114c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100114c2:	4653      	mov	r3, sl
100114c4:	2200      	movs	r2, #0
100114c6:	5e9b      	ldrsh	r3, [r3, r2]
100114c8:	61eb      	str	r3, [r5, #28]
100114ca:	2300      	movs	r3, #0
100114cc:	4699      	mov	r9, r3
100114ce:	4698      	mov	r8, r3
100114d0:	e7c6      	b.n	10011460 <inv_fast_nomot_store_data+0x3c>
100114d2:	46c0      	nop			; (mov r8, r8)

100114d4 <inv_fast_nomot_store_data_compass>:
100114d4:	6803      	ldr	r3, [r0, #0]
100114d6:	b570      	push	{r4, r5, r6, lr}
100114d8:	66d3      	str	r3, [r2, #108]	; 0x6c
100114da:	6843      	ldr	r3, [r0, #4]
100114dc:	6f94      	ldr	r4, [r2, #120]	; 0x78
100114de:	6713      	str	r3, [r2, #112]	; 0x70
100114e0:	6883      	ldr	r3, [r0, #8]
100114e2:	6753      	str	r3, [r2, #116]	; 0x74
100114e4:	2388      	movs	r3, #136	; 0x88
100114e6:	50d1      	str	r1, [r2, r3]
100114e8:	2c00      	cmp	r4, #0
100114ea:	d011      	beq.n	10011510 <inv_fast_nomot_store_data_compass+0x3c>
100114ec:	1c11      	adds	r1, r2, #0
100114ee:	1c15      	adds	r5, r2, #0
100114f0:	3160      	adds	r1, #96	; 0x60
100114f2:	356c      	adds	r5, #108	; 0x6c
100114f4:	69ce      	ldr	r6, [r1, #28]
100114f6:	6803      	ldr	r3, [r0, #0]
100114f8:	1b9b      	subs	r3, r3, r6
100114fa:	17de      	asrs	r6, r3, #31
100114fc:	199b      	adds	r3, r3, r6
100114fe:	4073      	eors	r3, r6
10011500:	680e      	ldr	r6, [r1, #0]
10011502:	42b3      	cmp	r3, r6
10011504:	dd00      	ble.n	10011508 <inv_fast_nomot_store_data_compass+0x34>
10011506:	600b      	str	r3, [r1, #0]
10011508:	3104      	adds	r1, #4
1001150a:	3004      	adds	r0, #4
1001150c:	42a9      	cmp	r1, r5
1001150e:	d1f1      	bne.n	100114f4 <inv_fast_nomot_store_data_compass+0x20>
10011510:	2101      	movs	r1, #1
10011512:	2390      	movs	r3, #144	; 0x90
10011514:	3401      	adds	r4, #1
10011516:	6794      	str	r4, [r2, #120]	; 0x78
10011518:	50d1      	str	r1, [r2, r3]
1001151a:	bd70      	pop	{r4, r5, r6, pc}

1001151c <inv_fast_nomot_reset_data_compass>:
1001151c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
1001151e:	2280      	movs	r2, #128	; 0x80
10011520:	67c3      	str	r3, [r0, #124]	; 0x7c
10011522:	2300      	movs	r3, #0
10011524:	6f01      	ldr	r1, [r0, #112]	; 0x70
10011526:	6603      	str	r3, [r0, #96]	; 0x60
10011528:	5081      	str	r1, [r0, r2]
1001152a:	6f41      	ldr	r1, [r0, #116]	; 0x74
1001152c:	3204      	adds	r2, #4
1001152e:	6643      	str	r3, [r0, #100]	; 0x64
10011530:	5081      	str	r1, [r0, r2]
10011532:	6683      	str	r3, [r0, #104]	; 0x68
10011534:	3204      	adds	r2, #4
10011536:	5881      	ldr	r1, [r0, r2]
10011538:	3204      	adds	r2, #4
1001153a:	5081      	str	r1, [r0, r2]
1001153c:	3204      	adds	r2, #4
1001153e:	6783      	str	r3, [r0, #120]	; 0x78
10011540:	5083      	str	r3, [r0, r2]
10011542:	4770      	bx	lr

10011544 <inv_fast_nomot_get_time_elaps>:
10011544:	228c      	movs	r2, #140	; 0x8c
10011546:	2388      	movs	r3, #136	; 0x88
10011548:	58c3      	ldr	r3, [r0, r3]
1001154a:	5880      	ldr	r0, [r0, r2]
1001154c:	1a18      	subs	r0, r3, r0
1001154e:	4770      	bx	lr

10011550 <inv_fast_nomot_parameter_compass>:
10011550:	6e02      	ldr	r2, [r0, #96]	; 0x60
10011552:	6e43      	ldr	r3, [r0, #100]	; 0x64
10011554:	4293      	cmp	r3, r2
10011556:	da00      	bge.n	1001155a <inv_fast_nomot_parameter_compass+0xa>
10011558:	1c13      	adds	r3, r2, #0
1001155a:	6e82      	ldr	r2, [r0, #104]	; 0x68
1001155c:	1e18      	subs	r0, r3, #0
1001155e:	4290      	cmp	r0, r2
10011560:	da00      	bge.n	10011564 <inv_fast_nomot_parameter_compass+0x14>
10011562:	1c10      	adds	r0, r2, #0
10011564:	4770      	bx	lr
10011566:	46c0      	nop			; (mov r8, r8)

10011568 <inv_get_right_shift_by_rounding>:
10011568:	b5f0      	push	{r4, r5, r6, r7, lr}
1001156a:	4647      	mov	r7, r8
1001156c:	b480      	push	{r7}
1001156e:	2701      	movs	r7, #1
10011570:	1e53      	subs	r3, r2, #1
10011572:	409f      	lsls	r7, r3
10011574:	2320      	movs	r3, #32
10011576:	2620      	movs	r6, #32
10011578:	425b      	negs	r3, r3
1001157a:	1ab6      	subs	r6, r6, r2
1001157c:	46b8      	mov	r8, r7
1001157e:	18d3      	adds	r3, r2, r3
10011580:	d434      	bmi.n	100115ec <inv_get_right_shift_by_rounding+0x84>
10011582:	1c0f      	adds	r7, r1, #0
10011584:	411f      	asrs	r7, r3
10011586:	1c3c      	adds	r4, r7, #0
10011588:	1c0b      	adds	r3, r1, #0
1001158a:	4113      	asrs	r3, r2
1001158c:	1c1d      	adds	r5, r3, #0
1001158e:	2320      	movs	r3, #32
10011590:	425b      	negs	r3, r3
10011592:	18f2      	adds	r2, r6, r3
10011594:	d422      	bmi.n	100115dc <inv_get_right_shift_by_rounding+0x74>
10011596:	1c03      	adds	r3, r0, #0
10011598:	4093      	lsls	r3, r2
1001159a:	40b0      	lsls	r0, r6
1001159c:	2a00      	cmp	r2, #0
1001159e:	db16      	blt.n	100115ce <inv_get_right_shift_by_rounding+0x66>
100115a0:	4113      	asrs	r3, r2
100115a2:	1c19      	adds	r1, r3, #0
100115a4:	4588      	cmp	r8, r1
100115a6:	db0d      	blt.n	100115c4 <inv_get_right_shift_by_rounding+0x5c>
100115a8:	4643      	mov	r3, r8
100115aa:	425f      	negs	r7, r3
100115ac:	42b9      	cmp	r1, r7
100115ae:	da04      	bge.n	100115ba <inv_get_right_shift_by_rounding+0x52>
100115b0:	2201      	movs	r2, #1
100115b2:	4252      	negs	r2, r2
100115b4:	17d3      	asrs	r3, r2, #31
100115b6:	18a4      	adds	r4, r4, r2
100115b8:	415d      	adcs	r5, r3
100115ba:	1c29      	adds	r1, r5, #0
100115bc:	1c20      	adds	r0, r4, #0
100115be:	bc04      	pop	{r2}
100115c0:	4690      	mov	r8, r2
100115c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100115c4:	2201      	movs	r2, #1
100115c6:	2300      	movs	r3, #0
100115c8:	18a4      	adds	r4, r4, r2
100115ca:	415d      	adcs	r5, r3
100115cc:	e7f5      	b.n	100115ba <inv_get_right_shift_by_rounding+0x52>
100115ce:	2120      	movs	r1, #32
100115d0:	1b89      	subs	r1, r1, r6
100115d2:	408b      	lsls	r3, r1
100115d4:	1c01      	adds	r1, r0, #0
100115d6:	40f1      	lsrs	r1, r6
100115d8:	4319      	orrs	r1, r3
100115da:	e7e3      	b.n	100115a4 <inv_get_right_shift_by_rounding+0x3c>
100115dc:	2320      	movs	r3, #32
100115de:	1c07      	adds	r7, r0, #0
100115e0:	1b9b      	subs	r3, r3, r6
100115e2:	40df      	lsrs	r7, r3
100115e4:	1c0b      	adds	r3, r1, #0
100115e6:	40b3      	lsls	r3, r6
100115e8:	433b      	orrs	r3, r7
100115ea:	e7d6      	b.n	1001159a <inv_get_right_shift_by_rounding+0x32>
100115ec:	1c03      	adds	r3, r0, #0
100115ee:	40d3      	lsrs	r3, r2
100115f0:	1c1c      	adds	r4, r3, #0
100115f2:	1c0b      	adds	r3, r1, #0
100115f4:	40b3      	lsls	r3, r6
100115f6:	431c      	orrs	r4, r3
100115f8:	e7c6      	b.n	10011588 <inv_get_right_shift_by_rounding+0x20>
100115fa:	46c0      	nop			; (mov r8, r8)

100115fc <inv_reset_min_max_gyro_accel_statistics>:
100115fc:	2300      	movs	r3, #0
100115fe:	4a09      	ldr	r2, [pc, #36]	; (10011624 <inv_reset_min_max_gyro_accel_statistics+0x28>)
10011600:	6013      	str	r3, [r2, #0]
10011602:	6053      	str	r3, [r2, #4]
10011604:	6093      	str	r3, [r2, #8]
10011606:	60d3      	str	r3, [r2, #12]
10011608:	6213      	str	r3, [r2, #32]
1001160a:	6253      	str	r3, [r2, #36]	; 0x24
1001160c:	6293      	str	r3, [r2, #40]	; 0x28
1001160e:	62d3      	str	r3, [r2, #44]	; 0x2c
10011610:	6113      	str	r3, [r2, #16]
10011612:	6153      	str	r3, [r2, #20]
10011614:	6193      	str	r3, [r2, #24]
10011616:	61d3      	str	r3, [r2, #28]
10011618:	6313      	str	r3, [r2, #48]	; 0x30
1001161a:	6353      	str	r3, [r2, #52]	; 0x34
1001161c:	6393      	str	r3, [r2, #56]	; 0x38
1001161e:	63d3      	str	r3, [r2, #60]	; 0x3c
10011620:	4770      	bx	lr
10011622:	46c0      	nop			; (mov r8, r8)
10011624:	1001e928 	.word	0x1001e928

10011628 <inv_record_max_moment_in_no_motion_gyro>:
10011628:	2392      	movs	r3, #146	; 0x92
1001162a:	4a0d      	ldr	r2, [pc, #52]	; (10011660 <inv_record_max_moment_in_no_motion_gyro+0x38>)
1001162c:	009b      	lsls	r3, r3, #2
1001162e:	58d3      	ldr	r3, [r2, r3]
10011630:	b530      	push	{r4, r5, lr}
10011632:	2b00      	cmp	r3, #0
10011634:	d005      	beq.n	10011642 <inv_record_max_moment_in_no_motion_gyro+0x1a>
10011636:	2490      	movs	r4, #144	; 0x90
10011638:	00a4      	lsls	r4, r4, #2
1001163a:	1915      	adds	r5, r2, r4
1001163c:	686c      	ldr	r4, [r5, #4]
1001163e:	428c      	cmp	r4, r1
10011640:	da08      	bge.n	10011654 <inv_record_max_moment_in_no_motion_gyro+0x2c>
10011642:	2490      	movs	r4, #144	; 0x90
10011644:	00a4      	lsls	r4, r4, #2
10011646:	1914      	adds	r4, r2, r4
10011648:	c403      	stmia	r4!, {r0, r1}
1001164a:	2192      	movs	r1, #146	; 0x92
1001164c:	3301      	adds	r3, #1
1001164e:	0089      	lsls	r1, r1, #2
10011650:	5053      	str	r3, [r2, r1]
10011652:	bd30      	pop	{r4, r5, pc}
10011654:	428c      	cmp	r4, r1
10011656:	d1f8      	bne.n	1001164a <inv_record_max_moment_in_no_motion_gyro+0x22>
10011658:	682c      	ldr	r4, [r5, #0]
1001165a:	4284      	cmp	r4, r0
1001165c:	d3f1      	bcc.n	10011642 <inv_record_max_moment_in_no_motion_gyro+0x1a>
1001165e:	e7f4      	b.n	1001164a <inv_record_max_moment_in_no_motion_gyro+0x22>
10011660:	1001e708 	.word	0x1001e708

10011664 <inv_record_max_moment_in_no_motion_accel>:
10011664:	2396      	movs	r3, #150	; 0x96
10011666:	4a0d      	ldr	r2, [pc, #52]	; (1001169c <inv_record_max_moment_in_no_motion_accel+0x38>)
10011668:	009b      	lsls	r3, r3, #2
1001166a:	58d3      	ldr	r3, [r2, r3]
1001166c:	b530      	push	{r4, r5, lr}
1001166e:	2b00      	cmp	r3, #0
10011670:	d005      	beq.n	1001167e <inv_record_max_moment_in_no_motion_accel+0x1a>
10011672:	2494      	movs	r4, #148	; 0x94
10011674:	00a4      	lsls	r4, r4, #2
10011676:	1915      	adds	r5, r2, r4
10011678:	686c      	ldr	r4, [r5, #4]
1001167a:	428c      	cmp	r4, r1
1001167c:	da08      	bge.n	10011690 <inv_record_max_moment_in_no_motion_accel+0x2c>
1001167e:	2494      	movs	r4, #148	; 0x94
10011680:	00a4      	lsls	r4, r4, #2
10011682:	1914      	adds	r4, r2, r4
10011684:	c403      	stmia	r4!, {r0, r1}
10011686:	2196      	movs	r1, #150	; 0x96
10011688:	3301      	adds	r3, #1
1001168a:	0089      	lsls	r1, r1, #2
1001168c:	5053      	str	r3, [r2, r1]
1001168e:	bd30      	pop	{r4, r5, pc}
10011690:	428c      	cmp	r4, r1
10011692:	d1f8      	bne.n	10011686 <inv_record_max_moment_in_no_motion_accel+0x22>
10011694:	682c      	ldr	r4, [r5, #0]
10011696:	4284      	cmp	r4, r0
10011698:	d3f1      	bcc.n	1001167e <inv_record_max_moment_in_no_motion_accel+0x1a>
1001169a:	e7f4      	b.n	10011686 <inv_record_max_moment_in_no_motion_accel+0x22>
1001169c:	1001e708 	.word	0x1001e708

100116a0 <inv_record_min_moment_in_motion_gyro>:
100116a0:	238a      	movs	r3, #138	; 0x8a
100116a2:	4a0d      	ldr	r2, [pc, #52]	; (100116d8 <inv_record_min_moment_in_motion_gyro+0x38>)
100116a4:	009b      	lsls	r3, r3, #2
100116a6:	58d3      	ldr	r3, [r2, r3]
100116a8:	b530      	push	{r4, r5, lr}
100116aa:	2b00      	cmp	r3, #0
100116ac:	d005      	beq.n	100116ba <inv_record_min_moment_in_motion_gyro+0x1a>
100116ae:	2488      	movs	r4, #136	; 0x88
100116b0:	00a4      	lsls	r4, r4, #2
100116b2:	1915      	adds	r5, r2, r4
100116b4:	686c      	ldr	r4, [r5, #4]
100116b6:	428c      	cmp	r4, r1
100116b8:	dd08      	ble.n	100116cc <inv_record_min_moment_in_motion_gyro+0x2c>
100116ba:	2488      	movs	r4, #136	; 0x88
100116bc:	00a4      	lsls	r4, r4, #2
100116be:	1914      	adds	r4, r2, r4
100116c0:	c403      	stmia	r4!, {r0, r1}
100116c2:	218a      	movs	r1, #138	; 0x8a
100116c4:	3301      	adds	r3, #1
100116c6:	0089      	lsls	r1, r1, #2
100116c8:	5053      	str	r3, [r2, r1]
100116ca:	bd30      	pop	{r4, r5, pc}
100116cc:	428c      	cmp	r4, r1
100116ce:	d1f8      	bne.n	100116c2 <inv_record_min_moment_in_motion_gyro+0x22>
100116d0:	682c      	ldr	r4, [r5, #0]
100116d2:	4284      	cmp	r4, r0
100116d4:	d8f1      	bhi.n	100116ba <inv_record_min_moment_in_motion_gyro+0x1a>
100116d6:	e7f4      	b.n	100116c2 <inv_record_min_moment_in_motion_gyro+0x22>
100116d8:	1001e708 	.word	0x1001e708

100116dc <inv_record_min_moment_in_motion_accel>:
100116dc:	238e      	movs	r3, #142	; 0x8e
100116de:	4a0d      	ldr	r2, [pc, #52]	; (10011714 <inv_record_min_moment_in_motion_accel+0x38>)
100116e0:	009b      	lsls	r3, r3, #2
100116e2:	58d3      	ldr	r3, [r2, r3]
100116e4:	b530      	push	{r4, r5, lr}
100116e6:	2b00      	cmp	r3, #0
100116e8:	d005      	beq.n	100116f6 <inv_record_min_moment_in_motion_accel+0x1a>
100116ea:	248c      	movs	r4, #140	; 0x8c
100116ec:	00a4      	lsls	r4, r4, #2
100116ee:	1915      	adds	r5, r2, r4
100116f0:	686c      	ldr	r4, [r5, #4]
100116f2:	428c      	cmp	r4, r1
100116f4:	dd08      	ble.n	10011708 <inv_record_min_moment_in_motion_accel+0x2c>
100116f6:	248c      	movs	r4, #140	; 0x8c
100116f8:	00a4      	lsls	r4, r4, #2
100116fa:	1914      	adds	r4, r2, r4
100116fc:	c403      	stmia	r4!, {r0, r1}
100116fe:	218e      	movs	r1, #142	; 0x8e
10011700:	3301      	adds	r3, #1
10011702:	0089      	lsls	r1, r1, #2
10011704:	5053      	str	r3, [r2, r1]
10011706:	bd30      	pop	{r4, r5, pc}
10011708:	428c      	cmp	r4, r1
1001170a:	d1f8      	bne.n	100116fe <inv_record_min_moment_in_motion_accel+0x22>
1001170c:	682c      	ldr	r4, [r5, #0]
1001170e:	4284      	cmp	r4, r0
10011710:	d8f1      	bhi.n	100116f6 <inv_record_min_moment_in_motion_accel+0x1a>
10011712:	e7f4      	b.n	100116fe <inv_record_min_moment_in_motion_accel+0x22>
10011714:	1001e708 	.word	0x1001e708

10011718 <inv_detect_motion_by_gyro_accel>:
10011718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001171a:	4c4f      	ldr	r4, [pc, #316]	; (10011858 <inv_detect_motion_by_gyro_accel+0x140>)
1001171c:	1c05      	adds	r5, r0, #0
1001171e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
10011720:	6f62      	ldr	r2, [r4, #116]	; 0x74
10011722:	4e4e      	ldr	r6, [pc, #312]	; (1001185c <inv_detect_motion_by_gyro_accel+0x144>)
10011724:	1a9a      	subs	r2, r3, r2
10011726:	6fa0      	ldr	r0, [r4, #120]	; 0x78
10011728:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
1001172a:	1c31      	adds	r1, r6, #0
1001172c:	1a1b      	subs	r3, r3, r0
1001172e:	4293      	cmp	r3, r2
10011730:	da00      	bge.n	10011734 <inv_detect_motion_by_gyro_accel+0x1c>
10011732:	1c13      	adds	r3, r2, #0
10011734:	6f22      	ldr	r2, [r4, #112]	; 0x70
10011736:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
10011738:	1a12      	subs	r2, r2, r0
1001173a:	4293      	cmp	r3, r2
1001173c:	da00      	bge.n	10011740 <inv_detect_motion_by_gyro_accel+0x28>
1001173e:	1c13      	adds	r3, r2, #0
10011740:	6bca      	ldr	r2, [r1, #60]	; 0x3c
10011742:	429a      	cmp	r2, r3
10011744:	db4b      	blt.n	100117de <inv_detect_motion_by_gyro_accel+0xc6>
10011746:	2380      	movs	r3, #128	; 0x80
10011748:	6b2a      	ldr	r2, [r5, #48]	; 0x30
1001174a:	005b      	lsls	r3, r3, #1
1001174c:	2002      	movs	r0, #2
1001174e:	421a      	tst	r2, r3
10011750:	d100      	bne.n	10011754 <inv_detect_motion_by_gyro_accel+0x3c>
10011752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011754:	2280      	movs	r2, #128	; 0x80
10011756:	6821      	ldr	r1, [r4, #0]
10011758:	58a2      	ldr	r2, [r4, r2]
1001175a:	428a      	cmp	r2, r1
1001175c:	dbf9      	blt.n	10011752 <inv_detect_motion_by_gyro_accel+0x3a>
1001175e:	6f6d      	ldr	r5, [r5, #116]	; 0x74
10011760:	421d      	tst	r5, r3
10011762:	d040      	beq.n	100117e6 <inv_detect_motion_by_gyro_accel+0xce>
10011764:	33b0      	adds	r3, #176	; 0xb0
10011766:	58e3      	ldr	r3, [r4, r3]
10011768:	4299      	cmp	r1, r3
1001176a:	dcf2      	bgt.n	10011752 <inv_detect_motion_by_gyro_accel+0x3a>
1001176c:	2b00      	cmp	r3, #0
1001176e:	d166      	bne.n	1001183e <inv_detect_motion_by_gyro_accel+0x126>
10011770:	2000      	movs	r0, #0
10011772:	2100      	movs	r1, #0
10011774:	1c23      	adds	r3, r4, #0
10011776:	33d9      	adds	r3, #217	; 0xd9
10011778:	33ff      	adds	r3, #255	; 0xff
1001177a:	c303      	stmia	r3!, {r0, r1}
1001177c:	6973      	ldr	r3, [r6, #20]
1001177e:	428b      	cmp	r3, r1
10011780:	db03      	blt.n	1001178a <inv_detect_motion_by_gyro_accel+0x72>
10011782:	d166      	bne.n	10011852 <inv_detect_motion_by_gyro_accel+0x13a>
10011784:	6933      	ldr	r3, [r6, #16]
10011786:	4283      	cmp	r3, r0
10011788:	d263      	bcs.n	10011852 <inv_detect_motion_by_gyro_accel+0x13a>
1001178a:	238e      	movs	r3, #142	; 0x8e
1001178c:	228c      	movs	r2, #140	; 0x8c
1001178e:	009b      	lsls	r3, r3, #2
10011790:	58e3      	ldr	r3, [r4, r3]
10011792:	0092      	lsls	r2, r2, #2
10011794:	2b00      	cmp	r3, #0
10011796:	d009      	beq.n	100117ac <inv_detect_motion_by_gyro_accel+0x94>
10011798:	18a5      	adds	r5, r4, r2
1001179a:	686a      	ldr	r2, [r5, #4]
1001179c:	428a      	cmp	r2, r1
1001179e:	dc03      	bgt.n	100117a8 <inv_detect_motion_by_gyro_accel+0x90>
100117a0:	d106      	bne.n	100117b0 <inv_detect_motion_by_gyro_accel+0x98>
100117a2:	682a      	ldr	r2, [r5, #0]
100117a4:	4282      	cmp	r2, r0
100117a6:	d903      	bls.n	100117b0 <inv_detect_motion_by_gyro_accel+0x98>
100117a8:	228c      	movs	r2, #140	; 0x8c
100117aa:	0092      	lsls	r2, r2, #2
100117ac:	18a2      	adds	r2, r4, r2
100117ae:	c203      	stmia	r2!, {r0, r1}
100117b0:	228e      	movs	r2, #142	; 0x8e
100117b2:	2500      	movs	r5, #0
100117b4:	3301      	adds	r3, #1
100117b6:	0092      	lsls	r2, r2, #2
100117b8:	50a3      	str	r3, [r4, r2]
100117ba:	4f29      	ldr	r7, [pc, #164]	; (10011860 <inv_detect_motion_by_gyro_accel+0x148>)
100117bc:	2298      	movs	r2, #152	; 0x98
100117be:	1c38      	adds	r0, r7, #0
100117c0:	2100      	movs	r1, #0
100117c2:	f006 fda2 	bl	1001830a <memset>
100117c6:	2004      	movs	r0, #4
100117c8:	f7ff fca2 	bl	10011110 <inv_init_maxmin>
100117cc:	2380      	movs	r3, #128	; 0x80
100117ce:	3f39      	subs	r7, #57	; 0x39
100117d0:	3fff      	subs	r7, #255	; 0xff
100117d2:	58fa      	ldr	r2, [r7, r3]
100117d4:	2a00      	cmp	r2, #0
100117d6:	d109      	bne.n	100117ec <inv_detect_motion_by_gyro_accel+0xd4>
100117d8:	2000      	movs	r0, #0
100117da:	2100      	movs	r1, #0
100117dc:	e009      	b.n	100117f2 <inv_detect_motion_by_gyro_accel+0xda>
100117de:	f7ff fccf 	bl	10011180 <inv_reset_packet>
100117e2:	2000      	movs	r0, #0
100117e4:	e7b5      	b.n	10011752 <inv_detect_motion_by_gyro_accel+0x3a>
100117e6:	2501      	movs	r5, #1
100117e8:	2a00      	cmp	r2, #0
100117ea:	d0f5      	beq.n	100117d8 <inv_detect_motion_by_gyro_accel+0xc0>
100117ec:	481d      	ldr	r0, [pc, #116]	; (10011864 <inv_detect_motion_by_gyro_accel+0x14c>)
100117ee:	f7ff fbd5 	bl	10010f9c <inv_fast_nomot_parameter.part.3>
100117f2:	1c23      	adds	r3, r4, #0
100117f4:	33f1      	adds	r3, #241	; 0xf1
100117f6:	33ff      	adds	r3, #255	; 0xff
100117f8:	c303      	stmia	r3!, {r0, r1}
100117fa:	69f3      	ldr	r3, [r6, #28]
100117fc:	428b      	cmp	r3, r1
100117fe:	db05      	blt.n	1001180c <inv_detect_motion_by_gyro_accel+0xf4>
10011800:	d001      	beq.n	10011806 <inv_detect_motion_by_gyro_accel+0xee>
10011802:	1c28      	adds	r0, r5, #0
10011804:	e7a5      	b.n	10011752 <inv_detect_motion_by_gyro_accel+0x3a>
10011806:	69b3      	ldr	r3, [r6, #24]
10011808:	4283      	cmp	r3, r0
1001180a:	d2fa      	bcs.n	10011802 <inv_detect_motion_by_gyro_accel+0xea>
1001180c:	238a      	movs	r3, #138	; 0x8a
1001180e:	2288      	movs	r2, #136	; 0x88
10011810:	009b      	lsls	r3, r3, #2
10011812:	58e3      	ldr	r3, [r4, r3]
10011814:	0092      	lsls	r2, r2, #2
10011816:	2b00      	cmp	r3, #0
10011818:	d009      	beq.n	1001182e <inv_detect_motion_by_gyro_accel+0x116>
1001181a:	18a5      	adds	r5, r4, r2
1001181c:	686a      	ldr	r2, [r5, #4]
1001181e:	428a      	cmp	r2, r1
10011820:	dc03      	bgt.n	1001182a <inv_detect_motion_by_gyro_accel+0x112>
10011822:	d106      	bne.n	10011832 <inv_detect_motion_by_gyro_accel+0x11a>
10011824:	682a      	ldr	r2, [r5, #0]
10011826:	4282      	cmp	r2, r0
10011828:	d903      	bls.n	10011832 <inv_detect_motion_by_gyro_accel+0x11a>
1001182a:	2288      	movs	r2, #136	; 0x88
1001182c:	0092      	lsls	r2, r2, #2
1001182e:	18a2      	adds	r2, r4, r2
10011830:	c203      	stmia	r2!, {r0, r1}
10011832:	228a      	movs	r2, #138	; 0x8a
10011834:	3301      	adds	r3, #1
10011836:	0092      	lsls	r2, r2, #2
10011838:	50a3      	str	r3, [r4, r2]
1001183a:	2000      	movs	r0, #0
1001183c:	e789      	b.n	10011752 <inv_detect_motion_by_gyro_accel+0x3a>
1001183e:	1c20      	adds	r0, r4, #0
10011840:	3039      	adds	r0, #57	; 0x39
10011842:	30ff      	adds	r0, #255	; 0xff
10011844:	f7ff fbaa 	bl	10010f9c <inv_fast_nomot_parameter.part.3>
10011848:	030b      	lsls	r3, r1, #12
1001184a:	0d00      	lsrs	r0, r0, #20
1001184c:	4318      	orrs	r0, r3
1001184e:	1509      	asrs	r1, r1, #20
10011850:	e790      	b.n	10011774 <inv_detect_motion_by_gyro_accel+0x5c>
10011852:	2501      	movs	r5, #1
10011854:	e7b1      	b.n	100117ba <inv_detect_motion_by_gyro_accel+0xa2>
10011856:	46c0      	nop			; (mov r8, r8)
10011858:	1001e708 	.word	0x1001e708
1001185c:	1001d1d0 	.word	0x1001d1d0
10011860:	1001e840 	.word	0x1001e840
10011864:	1001e710 	.word	0x1001e710

10011868 <inv_sensor_data_preprocess>:
10011868:	23c0      	movs	r3, #192	; 0xc0
1001186a:	b510      	push	{r4, lr}
1001186c:	6b02      	ldr	r2, [r0, #48]	; 0x30
1001186e:	b084      	sub	sp, #16
10011870:	1c04      	adds	r4, r0, #0
10011872:	4013      	ands	r3, r2
10011874:	2bc0      	cmp	r3, #192	; 0xc0
10011876:	d038      	beq.n	100118ea <inv_sensor_data_preprocess+0x82>
10011878:	23c0      	movs	r3, #192	; 0xc0
1001187a:	6f62      	ldr	r2, [r4, #116]	; 0x74
1001187c:	4013      	ands	r3, r2
1001187e:	2bc0      	cmp	r3, #192	; 0xc0
10011880:	d02d      	beq.n	100118de <inv_sensor_data_preprocess+0x76>
10011882:	21c0      	movs	r1, #192	; 0xc0
10011884:	23b8      	movs	r3, #184	; 0xb8
10011886:	1c0a      	adds	r2, r1, #0
10011888:	58e3      	ldr	r3, [r4, r3]
1001188a:	401a      	ands	r2, r3
1001188c:	2ac0      	cmp	r2, #192	; 0xc0
1001188e:	d017      	beq.n	100118c0 <inv_sensor_data_preprocess+0x58>
10011890:	2260      	movs	r2, #96	; 0x60
10011892:	4013      	ands	r3, r2
10011894:	2b60      	cmp	r3, #96	; 0x60
10011896:	d001      	beq.n	1001189c <inv_sensor_data_preprocess+0x34>
10011898:	b004      	add	sp, #16
1001189a:	bd10      	pop	{r4, pc}
1001189c:	3340      	adds	r3, #64	; 0x40
1001189e:	58e3      	ldr	r3, [r4, r3]
100118a0:	5861      	ldr	r1, [r4, r1]
100118a2:	139b      	asrs	r3, r3, #14
100118a4:	9301      	str	r3, [sp, #4]
100118a6:	23a4      	movs	r3, #164	; 0xa4
100118a8:	58e3      	ldr	r3, [r4, r3]
100118aa:	a801      	add	r0, sp, #4
100118ac:	139b      	asrs	r3, r3, #14
100118ae:	9302      	str	r3, [sp, #8]
100118b0:	23a8      	movs	r3, #168	; 0xa8
100118b2:	58e3      	ldr	r3, [r4, r3]
100118b4:	4a0f      	ldr	r2, [pc, #60]	; (100118f4 <inv_sensor_data_preprocess+0x8c>)
100118b6:	139b      	asrs	r3, r3, #14
100118b8:	9303      	str	r3, [sp, #12]
100118ba:	f7ff fe0b 	bl	100114d4 <inv_fast_nomot_store_data_compass>
100118be:	e7eb      	b.n	10011898 <inv_sensor_data_preprocess+0x30>
100118c0:	238c      	movs	r3, #140	; 0x8c
100118c2:	5ee3      	ldrsh	r3, [r4, r3]
100118c4:	a801      	add	r0, sp, #4
100118c6:	9301      	str	r3, [sp, #4]
100118c8:	238e      	movs	r3, #142	; 0x8e
100118ca:	5ee3      	ldrsh	r3, [r4, r3]
100118cc:	9302      	str	r3, [sp, #8]
100118ce:	2390      	movs	r3, #144	; 0x90
100118d0:	5ee3      	ldrsh	r3, [r4, r3]
100118d2:	58a1      	ldr	r1, [r4, r2]
100118d4:	4a07      	ldr	r2, [pc, #28]	; (100118f4 <inv_sensor_data_preprocess+0x8c>)
100118d6:	9303      	str	r3, [sp, #12]
100118d8:	f7ff fdfc 	bl	100114d4 <inv_fast_nomot_store_data_compass>
100118dc:	e7dc      	b.n	10011898 <inv_sensor_data_preprocess+0x30>
100118de:	1c20      	adds	r0, r4, #0
100118e0:	4905      	ldr	r1, [pc, #20]	; (100118f8 <inv_sensor_data_preprocess+0x90>)
100118e2:	3048      	adds	r0, #72	; 0x48
100118e4:	f7ff fd9e 	bl	10011424 <inv_fast_nomot_store_data>
100118e8:	e7cb      	b.n	10011882 <inv_sensor_data_preprocess+0x1a>
100118ea:	3004      	adds	r0, #4
100118ec:	4903      	ldr	r1, [pc, #12]	; (100118fc <inv_sensor_data_preprocess+0x94>)
100118ee:	f7ff fd99 	bl	10011424 <inv_fast_nomot_store_data>
100118f2:	e7c1      	b.n	10011878 <inv_sensor_data_preprocess+0x10>
100118f4:	1001e7a8 	.word	0x1001e7a8
100118f8:	1001e840 	.word	0x1001e840
100118fc:	1001e710 	.word	0x1001e710

10011900 <inv_generate_fast_nomot>:
10011900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011902:	6b03      	ldr	r3, [r0, #48]	; 0x30
10011904:	05da      	lsls	r2, r3, #23
10011906:	d400      	bmi.n	1001190a <inv_generate_fast_nomot+0xa>
10011908:	e0a0      	b.n	10011a4c <inv_generate_fast_nomot+0x14c>
1001190a:	2150      	movs	r1, #80	; 0x50
1001190c:	6f42      	ldr	r2, [r0, #116]	; 0x74
1001190e:	1c05      	adds	r5, r0, #0
10011910:	400a      	ands	r2, r1
10011912:	2a40      	cmp	r2, #64	; 0x40
10011914:	d100      	bne.n	10011918 <inv_generate_fast_nomot+0x18>
10011916:	e09b      	b.n	10011a50 <inv_generate_fast_nomot+0x150>
10011918:	22b8      	movs	r2, #184	; 0xb8
1001191a:	5882      	ldr	r2, [r0, r2]
1001191c:	400a      	ands	r2, r1
1001191e:	2a40      	cmp	r2, #64	; 0x40
10011920:	d100      	bne.n	10011924 <inv_generate_fast_nomot+0x24>
10011922:	e095      	b.n	10011a50 <inv_generate_fast_nomot+0x150>
10011924:	400b      	ands	r3, r1
10011926:	2b40      	cmp	r3, #64	; 0x40
10011928:	d100      	bne.n	1001192c <inv_generate_fast_nomot+0x2c>
1001192a:	e091      	b.n	10011a50 <inv_generate_fast_nomot+0x150>
1001192c:	4cc9      	ldr	r4, [pc, #804]	; (10011c54 <inv_generate_fast_nomot+0x354>)
1001192e:	2282      	movs	r2, #130	; 0x82
10011930:	0092      	lsls	r2, r2, #2
10011932:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
10011934:	58a1      	ldr	r1, [r4, r2]
10011936:	4299      	cmp	r1, r3
10011938:	d01b      	beq.n	10011972 <inv_generate_fast_nomot+0x72>
1001193a:	50a3      	str	r3, [r4, r2]
1001193c:	4ec6      	ldr	r6, [pc, #792]	; (10011c58 <inv_generate_fast_nomot+0x358>)
1001193e:	2b09      	cmp	r3, #9
10011940:	dc00      	bgt.n	10011944 <inv_generate_fast_nomot+0x44>
10011942:	e18d      	b.n	10011c60 <inv_generate_fast_nomot+0x360>
10011944:	6b33      	ldr	r3, [r6, #48]	; 0x30
10011946:	6b71      	ldr	r1, [r6, #52]	; 0x34
10011948:	6023      	str	r3, [r4, #0]
1001194a:	2383      	movs	r3, #131	; 0x83
1001194c:	1c08      	adds	r0, r1, #0
1001194e:	009b      	lsls	r3, r3, #2
10011950:	6bb2      	ldr	r2, [r6, #56]	; 0x38
10011952:	50e1      	str	r1, [r4, r3]
10011954:	3308      	adds	r3, #8
10011956:	50e2      	str	r2, [r4, r3]
10011958:	2210      	movs	r2, #16
1001195a:	1a52      	subs	r2, r2, r1
1001195c:	2184      	movs	r1, #132	; 0x84
1001195e:	2319      	movs	r3, #25
10011960:	0089      	lsls	r1, r1, #2
10011962:	5062      	str	r2, [r4, r1]
10011964:	2180      	movs	r1, #128	; 0x80
10011966:	2286      	movs	r2, #134	; 0x86
10011968:	4083      	lsls	r3, r0
1001196a:	01c9      	lsls	r1, r1, #7
1001196c:	0092      	lsls	r2, r2, #2
1001196e:	50a1      	str	r1, [r4, r2]
10011970:	63f3      	str	r3, [r6, #60]	; 0x3c
10011972:	1c28      	adds	r0, r5, #0
10011974:	f7ff ff78 	bl	10011868 <inv_sensor_data_preprocess>
10011978:	23f4      	movs	r3, #244	; 0xf4
1001197a:	005b      	lsls	r3, r3, #1
1001197c:	5ce3      	ldrb	r3, [r4, r3]
1001197e:	2b06      	cmp	r3, #6
10011980:	d864      	bhi.n	10011a4c <inv_generate_fast_nomot+0x14c>
10011982:	4ab6      	ldr	r2, [pc, #728]	; (10011c5c <inv_generate_fast_nomot+0x35c>)
10011984:	009b      	lsls	r3, r3, #2
10011986:	58d3      	ldr	r3, [r2, r3]
10011988:	469f      	mov	pc, r3
1001198a:	23b8      	movs	r3, #184	; 0xb8
1001198c:	58ea      	ldr	r2, [r5, r3]
1001198e:	3348      	adds	r3, #72	; 0x48
10011990:	421a      	tst	r2, r3
10011992:	d01b      	beq.n	100119cc <inv_generate_fast_nomot+0xcc>
10011994:	58e2      	ldr	r2, [r4, r3]
10011996:	3304      	adds	r3, #4
10011998:	58e3      	ldr	r3, [r4, r3]
1001199a:	4293      	cmp	r3, r2
1001199c:	da00      	bge.n	100119a0 <inv_generate_fast_nomot+0xa0>
1001199e:	1c13      	adds	r3, r2, #0
100119a0:	2284      	movs	r2, #132	; 0x84
100119a2:	0052      	lsls	r2, r2, #1
100119a4:	58a2      	ldr	r2, [r4, r2]
100119a6:	4293      	cmp	r3, r2
100119a8:	da00      	bge.n	100119ac <inv_generate_fast_nomot+0xac>
100119aa:	1c13      	adds	r3, r2, #0
100119ac:	1c21      	adds	r1, r4, #0
100119ae:	48aa      	ldr	r0, [pc, #680]	; (10011c58 <inv_generate_fast_nomot+0x358>)
100119b0:	31d1      	adds	r1, #209	; 0xd1
100119b2:	31ff      	adds	r1, #255	; 0xff
100119b4:	17da      	asrs	r2, r3, #31
100119b6:	600b      	str	r3, [r1, #0]
100119b8:	604a      	str	r2, [r1, #4]
100119ba:	68c1      	ldr	r1, [r0, #12]
100119bc:	4291      	cmp	r1, r2
100119be:	da00      	bge.n	100119c2 <inv_generate_fast_nomot+0xc2>
100119c0:	e143      	b.n	10011c4a <inv_generate_fast_nomot+0x34a>
100119c2:	d103      	bne.n	100119cc <inv_generate_fast_nomot+0xcc>
100119c4:	6882      	ldr	r2, [r0, #8]
100119c6:	429a      	cmp	r2, r3
100119c8:	d200      	bcs.n	100119cc <inv_generate_fast_nomot+0xcc>
100119ca:	e13e      	b.n	10011c4a <inv_generate_fast_nomot+0x34a>
100119cc:	1c28      	adds	r0, r5, #0
100119ce:	f7ff fea3 	bl	10011718 <inv_detect_motion_by_gyro_accel>
100119d2:	2800      	cmp	r0, #0
100119d4:	d100      	bne.n	100119d8 <inv_generate_fast_nomot+0xd8>
100119d6:	e138      	b.n	10011c4a <inv_generate_fast_nomot+0x34a>
100119d8:	2801      	cmp	r0, #1
100119da:	d137      	bne.n	10011a4c <inv_generate_fast_nomot+0x14c>
100119dc:	1c28      	adds	r0, r5, #0
100119de:	f7ff fc8d 	bl	100112fc <inv_fast_nomot_set_gyro_bias>
100119e2:	1c23      	adds	r3, r4, #0
100119e4:	33d9      	adds	r3, #217	; 0xd9
100119e6:	33ff      	adds	r3, #255	; 0xff
100119e8:	cb06      	ldmia	r3!, {r1, r2}
100119ea:	2396      	movs	r3, #150	; 0x96
100119ec:	2094      	movs	r0, #148	; 0x94
100119ee:	009b      	lsls	r3, r3, #2
100119f0:	58e3      	ldr	r3, [r4, r3]
100119f2:	0080      	lsls	r0, r0, #2
100119f4:	1820      	adds	r0, r4, r0
100119f6:	2b00      	cmp	r3, #0
100119f8:	d009      	beq.n	10011a0e <inv_generate_fast_nomot+0x10e>
100119fa:	6845      	ldr	r5, [r0, #4]
100119fc:	4295      	cmp	r5, r2
100119fe:	db03      	blt.n	10011a08 <inv_generate_fast_nomot+0x108>
10011a00:	d106      	bne.n	10011a10 <inv_generate_fast_nomot+0x110>
10011a02:	6800      	ldr	r0, [r0, #0]
10011a04:	4288      	cmp	r0, r1
10011a06:	d203      	bcs.n	10011a10 <inv_generate_fast_nomot+0x110>
10011a08:	2094      	movs	r0, #148	; 0x94
10011a0a:	0080      	lsls	r0, r0, #2
10011a0c:	1820      	adds	r0, r4, r0
10011a0e:	c006      	stmia	r0!, {r1, r2}
10011a10:	2296      	movs	r2, #150	; 0x96
10011a12:	3301      	adds	r3, #1
10011a14:	0092      	lsls	r2, r2, #2
10011a16:	50a3      	str	r3, [r4, r2]
10011a18:	1c23      	adds	r3, r4, #0
10011a1a:	33f1      	adds	r3, #241	; 0xf1
10011a1c:	33ff      	adds	r3, #255	; 0xff
10011a1e:	cb06      	ldmia	r3!, {r1, r2}
10011a20:	2392      	movs	r3, #146	; 0x92
10011a22:	2090      	movs	r0, #144	; 0x90
10011a24:	009b      	lsls	r3, r3, #2
10011a26:	58e3      	ldr	r3, [r4, r3]
10011a28:	0080      	lsls	r0, r0, #2
10011a2a:	1820      	adds	r0, r4, r0
10011a2c:	2b00      	cmp	r3, #0
10011a2e:	d100      	bne.n	10011a32 <inv_generate_fast_nomot+0x132>
10011a30:	e09b      	b.n	10011b6a <inv_generate_fast_nomot+0x26a>
10011a32:	6845      	ldr	r5, [r0, #4]
10011a34:	4295      	cmp	r5, r2
10011a36:	da00      	bge.n	10011a3a <inv_generate_fast_nomot+0x13a>
10011a38:	e094      	b.n	10011b64 <inv_generate_fast_nomot+0x264>
10011a3a:	d103      	bne.n	10011a44 <inv_generate_fast_nomot+0x144>
10011a3c:	6800      	ldr	r0, [r0, #0]
10011a3e:	4288      	cmp	r0, r1
10011a40:	d200      	bcs.n	10011a44 <inv_generate_fast_nomot+0x144>
10011a42:	e08f      	b.n	10011b64 <inv_generate_fast_nomot+0x264>
10011a44:	2292      	movs	r2, #146	; 0x92
10011a46:	3301      	adds	r3, #1
10011a48:	0092      	lsls	r2, r2, #2
10011a4a:	50a3      	str	r3, [r4, r2]
10011a4c:	2000      	movs	r0, #0
10011a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011a50:	f7ff fb96 	bl	10011180 <inv_reset_packet>
10011a54:	22f0      	movs	r2, #240	; 0xf0
10011a56:	2300      	movs	r3, #0
10011a58:	4c7e      	ldr	r4, [pc, #504]	; (10011c54 <inv_generate_fast_nomot+0x354>)
10011a5a:	0052      	lsls	r2, r2, #1
10011a5c:	50a3      	str	r3, [r4, r2]
10011a5e:	3208      	adds	r2, #8
10011a60:	54a3      	strb	r3, [r4, r2]
10011a62:	e764      	b.n	1001192e <inv_generate_fast_nomot+0x2e>
10011a64:	23f4      	movs	r3, #244	; 0xf4
10011a66:	2206      	movs	r2, #6
10011a68:	005b      	lsls	r3, r3, #1
10011a6a:	2001      	movs	r0, #1
10011a6c:	54e2      	strb	r2, [r4, r3]
10011a6e:	f7f9 f8e3 	bl	1000ac38 <inv_set_motion_state>
10011a72:	f7ff fb85 	bl	10011180 <inv_reset_packet>
10011a76:	2386      	movs	r3, #134	; 0x86
10011a78:	005b      	lsls	r3, r3, #1
10011a7a:	58e2      	ldr	r2, [r4, r3]
10011a7c:	3310      	adds	r3, #16
10011a7e:	50e2      	str	r2, [r4, r3]
10011a80:	2280      	movs	r2, #128	; 0x80
10011a82:	2300      	movs	r3, #0
10011a84:	0052      	lsls	r2, r2, #1
10011a86:	50a3      	str	r3, [r4, r2]
10011a88:	3210      	adds	r2, #16
10011a8a:	58a1      	ldr	r1, [r4, r2]
10011a8c:	3210      	adds	r2, #16
10011a8e:	50a1      	str	r1, [r4, r2]
10011a90:	3a1c      	subs	r2, #28
10011a92:	50a3      	str	r3, [r4, r2]
10011a94:	3210      	adds	r2, #16
10011a96:	58a1      	ldr	r1, [r4, r2]
10011a98:	3210      	adds	r2, #16
10011a9a:	50a1      	str	r1, [r4, r2]
10011a9c:	3a1c      	subs	r2, #28
10011a9e:	50a3      	str	r3, [r4, r2]
10011aa0:	3220      	adds	r2, #32
10011aa2:	58a1      	ldr	r1, [r4, r2]
10011aa4:	3204      	adds	r2, #4
10011aa6:	50a1      	str	r1, [r4, r2]
10011aa8:	3a14      	subs	r2, #20
10011aaa:	50a3      	str	r3, [r4, r2]
10011aac:	3218      	adds	r2, #24
10011aae:	50a3      	str	r3, [r4, r2]
10011ab0:	e7cc      	b.n	10011a4c <inv_generate_fast_nomot+0x14c>
10011ab2:	1c28      	adds	r0, r5, #0
10011ab4:	f7ff fe30 	bl	10011718 <inv_detect_motion_by_gyro_accel>
10011ab8:	2800      	cmp	r0, #0
10011aba:	d100      	bne.n	10011abe <inv_generate_fast_nomot+0x1be>
10011abc:	e0c5      	b.n	10011c4a <inv_generate_fast_nomot+0x34a>
10011abe:	2801      	cmp	r0, #1
10011ac0:	d1c4      	bne.n	10011a4c <inv_generate_fast_nomot+0x14c>
10011ac2:	23b8      	movs	r3, #184	; 0xb8
10011ac4:	58ea      	ldr	r2, [r5, r3]
10011ac6:	3348      	adds	r3, #72	; 0x48
10011ac8:	421a      	tst	r2, r3
10011aca:	d100      	bne.n	10011ace <inv_generate_fast_nomot+0x1ce>
10011acc:	e0f1      	b.n	10011cb2 <inv_generate_fast_nomot+0x3b2>
10011ace:	58e2      	ldr	r2, [r4, r3]
10011ad0:	3304      	adds	r3, #4
10011ad2:	58e3      	ldr	r3, [r4, r3]
10011ad4:	4293      	cmp	r3, r2
10011ad6:	da00      	bge.n	10011ada <inv_generate_fast_nomot+0x1da>
10011ad8:	1c13      	adds	r3, r2, #0
10011ada:	2284      	movs	r2, #132	; 0x84
10011adc:	0052      	lsls	r2, r2, #1
10011ade:	58a2      	ldr	r2, [r4, r2]
10011ae0:	4293      	cmp	r3, r2
10011ae2:	da00      	bge.n	10011ae6 <inv_generate_fast_nomot+0x1e6>
10011ae4:	1c13      	adds	r3, r2, #0
10011ae6:	1c21      	adds	r1, r4, #0
10011ae8:	4e5b      	ldr	r6, [pc, #364]	; (10011c58 <inv_generate_fast_nomot+0x358>)
10011aea:	31d1      	adds	r1, #209	; 0xd1
10011aec:	31ff      	adds	r1, #255	; 0xff
10011aee:	17da      	asrs	r2, r3, #31
10011af0:	600b      	str	r3, [r1, #0]
10011af2:	604a      	str	r2, [r1, #4]
10011af4:	68f1      	ldr	r1, [r6, #12]
10011af6:	4291      	cmp	r1, r2
10011af8:	db05      	blt.n	10011b06 <inv_generate_fast_nomot+0x206>
10011afa:	d000      	beq.n	10011afe <inv_generate_fast_nomot+0x1fe>
10011afc:	e0ce      	b.n	10011c9c <inv_generate_fast_nomot+0x39c>
10011afe:	68b2      	ldr	r2, [r6, #8]
10011b00:	429a      	cmp	r2, r3
10011b02:	d300      	bcc.n	10011b06 <inv_generate_fast_nomot+0x206>
10011b04:	e0ca      	b.n	10011c9c <inv_generate_fast_nomot+0x39c>
10011b06:	23f4      	movs	r3, #244	; 0xf4
10011b08:	2205      	movs	r2, #5
10011b0a:	005b      	lsls	r3, r3, #1
10011b0c:	54e2      	strb	r2, [r4, r3]
10011b0e:	1c23      	adds	r3, r4, #0
10011b10:	33d9      	adds	r3, #217	; 0xd9
10011b12:	33ff      	adds	r3, #255	; 0xff
10011b14:	cb06      	ldmia	r3!, {r1, r2}
10011b16:	2396      	movs	r3, #150	; 0x96
10011b18:	2094      	movs	r0, #148	; 0x94
10011b1a:	009b      	lsls	r3, r3, #2
10011b1c:	58e3      	ldr	r3, [r4, r3]
10011b1e:	0080      	lsls	r0, r0, #2
10011b20:	2b00      	cmp	r3, #0
10011b22:	d009      	beq.n	10011b38 <inv_generate_fast_nomot+0x238>
10011b24:	1825      	adds	r5, r4, r0
10011b26:	6868      	ldr	r0, [r5, #4]
10011b28:	4290      	cmp	r0, r2
10011b2a:	db03      	blt.n	10011b34 <inv_generate_fast_nomot+0x234>
10011b2c:	d106      	bne.n	10011b3c <inv_generate_fast_nomot+0x23c>
10011b2e:	6828      	ldr	r0, [r5, #0]
10011b30:	4288      	cmp	r0, r1
10011b32:	d203      	bcs.n	10011b3c <inv_generate_fast_nomot+0x23c>
10011b34:	2094      	movs	r0, #148	; 0x94
10011b36:	0080      	lsls	r0, r0, #2
10011b38:	1820      	adds	r0, r4, r0
10011b3a:	c006      	stmia	r0!, {r1, r2}
10011b3c:	2296      	movs	r2, #150	; 0x96
10011b3e:	3301      	adds	r3, #1
10011b40:	0092      	lsls	r2, r2, #2
10011b42:	50a3      	str	r3, [r4, r2]
10011b44:	1c23      	adds	r3, r4, #0
10011b46:	33f1      	adds	r3, #241	; 0xf1
10011b48:	33ff      	adds	r3, #255	; 0xff
10011b4a:	cb06      	ldmia	r3!, {r1, r2}
10011b4c:	2392      	movs	r3, #146	; 0x92
10011b4e:	2090      	movs	r0, #144	; 0x90
10011b50:	009b      	lsls	r3, r3, #2
10011b52:	58e3      	ldr	r3, [r4, r3]
10011b54:	0080      	lsls	r0, r0, #2
10011b56:	2b00      	cmp	r3, #0
10011b58:	d006      	beq.n	10011b68 <inv_generate_fast_nomot+0x268>
10011b5a:	1825      	adds	r5, r4, r0
10011b5c:	6868      	ldr	r0, [r5, #4]
10011b5e:	4290      	cmp	r0, r2
10011b60:	db00      	blt.n	10011b64 <inv_generate_fast_nomot+0x264>
10011b62:	e0ae      	b.n	10011cc2 <inv_generate_fast_nomot+0x3c2>
10011b64:	2090      	movs	r0, #144	; 0x90
10011b66:	0080      	lsls	r0, r0, #2
10011b68:	1820      	adds	r0, r4, r0
10011b6a:	c006      	stmia	r0!, {r1, r2}
10011b6c:	e76a      	b.n	10011a44 <inv_generate_fast_nomot+0x144>
10011b6e:	23f4      	movs	r3, #244	; 0xf4
10011b70:	2203      	movs	r2, #3
10011b72:	005b      	lsls	r3, r3, #1
10011b74:	1c28      	adds	r0, r5, #0
10011b76:	54e2      	strb	r2, [r4, r3]
10011b78:	f7ff fbc0 	bl	100112fc <inv_fast_nomot_set_gyro_bias>
10011b7c:	f7ff fb00 	bl	10011180 <inv_reset_packet>
10011b80:	e764      	b.n	10011a4c <inv_generate_fast_nomot+0x14c>
10011b82:	2398      	movs	r3, #152	; 0x98
10011b84:	58e3      	ldr	r3, [r4, r3]
10011b86:	2b01      	cmp	r3, #1
10011b88:	d000      	beq.n	10011b8c <inv_generate_fast_nomot+0x28c>
10011b8a:	e75f      	b.n	10011a4c <inv_generate_fast_nomot+0x14c>
10011b8c:	1c28      	adds	r0, r5, #0
10011b8e:	f7ff fdc3 	bl	10011718 <inv_detect_motion_by_gyro_accel>
10011b92:	2800      	cmp	r0, #0
10011b94:	d17b      	bne.n	10011c8e <inv_generate_fast_nomot+0x38e>
10011b96:	23f4      	movs	r3, #244	; 0xf4
10011b98:	2205      	movs	r2, #5
10011b9a:	005b      	lsls	r3, r3, #1
10011b9c:	54e2      	strb	r2, [r4, r3]
10011b9e:	2386      	movs	r3, #134	; 0x86
10011ba0:	005b      	lsls	r3, r3, #1
10011ba2:	58e2      	ldr	r2, [r4, r3]
10011ba4:	3310      	adds	r3, #16
10011ba6:	50e2      	str	r2, [r4, r3]
10011ba8:	2280      	movs	r2, #128	; 0x80
10011baa:	2300      	movs	r3, #0
10011bac:	0052      	lsls	r2, r2, #1
10011bae:	50a3      	str	r3, [r4, r2]
10011bb0:	3210      	adds	r2, #16
10011bb2:	58a1      	ldr	r1, [r4, r2]
10011bb4:	3210      	adds	r2, #16
10011bb6:	50a1      	str	r1, [r4, r2]
10011bb8:	3a1c      	subs	r2, #28
10011bba:	50a3      	str	r3, [r4, r2]
10011bbc:	3210      	adds	r2, #16
10011bbe:	58a1      	ldr	r1, [r4, r2]
10011bc0:	3210      	adds	r2, #16
10011bc2:	50a1      	str	r1, [r4, r2]
10011bc4:	3a1c      	subs	r2, #28
10011bc6:	50a3      	str	r3, [r4, r2]
10011bc8:	3220      	adds	r2, #32
10011bca:	58a1      	ldr	r1, [r4, r2]
10011bcc:	3204      	adds	r2, #4
10011bce:	50a1      	str	r1, [r4, r2]
10011bd0:	3a14      	subs	r2, #20
10011bd2:	50a3      	str	r3, [r4, r2]
10011bd4:	3218      	adds	r2, #24
10011bd6:	50a3      	str	r3, [r4, r2]
10011bd8:	f7ff fd10 	bl	100115fc <inv_reset_min_max_gyro_accel_statistics>
10011bdc:	e736      	b.n	10011a4c <inv_generate_fast_nomot+0x14c>
10011bde:	22f0      	movs	r2, #240	; 0xf0
10011be0:	0052      	lsls	r2, r2, #1
10011be2:	58a3      	ldr	r3, [r4, r2]
10011be4:	1c59      	adds	r1, r3, #1
10011be6:	50a1      	str	r1, [r4, r2]
10011be8:	2b09      	cmp	r3, #9
10011bea:	dc00      	bgt.n	10011bee <inv_generate_fast_nomot+0x2ee>
10011bec:	e72e      	b.n	10011a4c <inv_generate_fast_nomot+0x14c>
10011bee:	f7ff fac7 	bl	10011180 <inv_reset_packet>
10011bf2:	23f4      	movs	r3, #244	; 0xf4
10011bf4:	2201      	movs	r2, #1
10011bf6:	005b      	lsls	r3, r3, #1
10011bf8:	54e2      	strb	r2, [r4, r3]
10011bfa:	e727      	b.n	10011a4c <inv_generate_fast_nomot+0x14c>
10011bfc:	1c28      	adds	r0, r5, #0
10011bfe:	f7ff fd8b 	bl	10011718 <inv_detect_motion_by_gyro_accel>
10011c02:	1e05      	subs	r5, r0, #0
10011c04:	2d01      	cmp	r5, #1
10011c06:	d03d      	beq.n	10011c84 <inv_generate_fast_nomot+0x384>
10011c08:	2800      	cmp	r0, #0
10011c0a:	d000      	beq.n	10011c0e <inv_generate_fast_nomot+0x30e>
10011c0c:	e71e      	b.n	10011a4c <inv_generate_fast_nomot+0x14c>
10011c0e:	f7ff fab7 	bl	10011180 <inv_reset_packet>
10011c12:	2386      	movs	r3, #134	; 0x86
10011c14:	005b      	lsls	r3, r3, #1
10011c16:	58e2      	ldr	r2, [r4, r3]
10011c18:	3310      	adds	r3, #16
10011c1a:	50e2      	str	r2, [r4, r3]
10011c1c:	3b1c      	subs	r3, #28
10011c1e:	50e5      	str	r5, [r4, r3]
10011c20:	3310      	adds	r3, #16
10011c22:	58e2      	ldr	r2, [r4, r3]
10011c24:	3310      	adds	r3, #16
10011c26:	50e2      	str	r2, [r4, r3]
10011c28:	3b1c      	subs	r3, #28
10011c2a:	50e5      	str	r5, [r4, r3]
10011c2c:	3310      	adds	r3, #16
10011c2e:	58e2      	ldr	r2, [r4, r3]
10011c30:	3310      	adds	r3, #16
10011c32:	50e2      	str	r2, [r4, r3]
10011c34:	3b1c      	subs	r3, #28
10011c36:	50e5      	str	r5, [r4, r3]
10011c38:	3320      	adds	r3, #32
10011c3a:	58e2      	ldr	r2, [r4, r3]
10011c3c:	3304      	adds	r3, #4
10011c3e:	50e2      	str	r2, [r4, r3]
10011c40:	3b14      	subs	r3, #20
10011c42:	50e5      	str	r5, [r4, r3]
10011c44:	3318      	adds	r3, #24
10011c46:	50e5      	str	r5, [r4, r3]
10011c48:	e700      	b.n	10011a4c <inv_generate_fast_nomot+0x14c>
10011c4a:	23f4      	movs	r3, #244	; 0xf4
10011c4c:	2205      	movs	r2, #5
10011c4e:	005b      	lsls	r3, r3, #1
10011c50:	54e2      	strb	r2, [r4, r3]
10011c52:	e6fb      	b.n	10011a4c <inv_generate_fast_nomot+0x14c>
10011c54:	1001e708 	.word	0x1001e708
10011c58:	1001d1d0 	.word	0x1001d1d0
10011c5c:	1001afd8 	.word	0x1001afd8
10011c60:	2783      	movs	r7, #131	; 0x83
10011c62:	6b33      	ldr	r3, [r6, #48]	; 0x30
10011c64:	00bf      	lsls	r7, r7, #2
10011c66:	0058      	lsls	r0, r3, #1
10011c68:	6b73      	ldr	r3, [r6, #52]	; 0x34
10011c6a:	6020      	str	r0, [r4, #0]
10011c6c:	3301      	adds	r3, #1
10011c6e:	51e3      	str	r3, [r4, r7]
10011c70:	f004 faac 	bl	100161cc <__aeabi_i2f>
10011c74:	f7fe ff2a 	bl	10010acc <sqrtf>
10011c78:	2385      	movs	r3, #133	; 0x85
10011c7a:	009b      	lsls	r3, r3, #2
10011c7c:	50e0      	str	r0, [r4, r3]
10011c7e:	59e1      	ldr	r1, [r4, r7]
10011c80:	6b70      	ldr	r0, [r6, #52]	; 0x34
10011c82:	e669      	b.n	10011958 <inv_generate_fast_nomot+0x58>
10011c84:	23f4      	movs	r3, #244	; 0xf4
10011c86:	2202      	movs	r2, #2
10011c88:	005b      	lsls	r3, r3, #1
10011c8a:	54e2      	strb	r2, [r4, r3]
10011c8c:	e6de      	b.n	10011a4c <inv_generate_fast_nomot+0x14c>
10011c8e:	2801      	cmp	r0, #1
10011c90:	d185      	bne.n	10011b9e <inv_generate_fast_nomot+0x29e>
10011c92:	23f4      	movs	r3, #244	; 0xf4
10011c94:	2202      	movs	r2, #2
10011c96:	005b      	lsls	r3, r3, #1
10011c98:	54e2      	strb	r2, [r4, r3]
10011c9a:	e780      	b.n	10011b9e <inv_generate_fast_nomot+0x29e>
10011c9c:	2394      	movs	r3, #148	; 0x94
10011c9e:	2296      	movs	r2, #150	; 0x96
10011ca0:	005b      	lsls	r3, r3, #1
10011ca2:	0052      	lsls	r2, r2, #1
10011ca4:	58a2      	ldr	r2, [r4, r2]
10011ca6:	58e3      	ldr	r3, [r4, r3]
10011ca8:	1a9b      	subs	r3, r3, r2
10011caa:	6a32      	ldr	r2, [r6, #32]
10011cac:	4293      	cmp	r3, r2
10011cae:	d200      	bcs.n	10011cb2 <inv_generate_fast_nomot+0x3b2>
10011cb0:	e72d      	b.n	10011b0e <inv_generate_fast_nomot+0x20e>
10011cb2:	23f4      	movs	r3, #244	; 0xf4
10011cb4:	2204      	movs	r2, #4
10011cb6:	005b      	lsls	r3, r3, #1
10011cb8:	1c28      	adds	r0, r5, #0
10011cba:	54e2      	strb	r2, [r4, r3]
10011cbc:	f7ff fb1e 	bl	100112fc <inv_fast_nomot_set_gyro_bias>
10011cc0:	e725      	b.n	10011b0e <inv_generate_fast_nomot+0x20e>
10011cc2:	4290      	cmp	r0, r2
10011cc4:	d000      	beq.n	10011cc8 <inv_generate_fast_nomot+0x3c8>
10011cc6:	e6bd      	b.n	10011a44 <inv_generate_fast_nomot+0x144>
10011cc8:	6828      	ldr	r0, [r5, #0]
10011cca:	4288      	cmp	r0, r1
10011ccc:	d200      	bcs.n	10011cd0 <inv_generate_fast_nomot+0x3d0>
10011cce:	e749      	b.n	10011b64 <inv_generate_fast_nomot+0x264>
10011cd0:	e6b8      	b.n	10011a44 <inv_generate_fast_nomot+0x144>
10011cd2:	46c0      	nop			; (mov r8, r8)

10011cd4 <inv_set_default_number_of_samples>:
10011cd4:	2300      	movs	r3, #0
10011cd6:	b510      	push	{r4, lr}
10011cd8:	1040      	asrs	r0, r0, #1
10011cda:	d10f      	bne.n	10011cfc <inv_set_default_number_of_samples+0x28>
10011cdc:	2001      	movs	r0, #1
10011cde:	3301      	adds	r3, #1
10011ce0:	4098      	lsls	r0, r3
10011ce2:	4c08      	ldr	r4, [pc, #32]	; (10011d04 <inv_set_default_number_of_samples+0x30>)
10011ce4:	6363      	str	r3, [r4, #52]	; 0x34
10011ce6:	6320      	str	r0, [r4, #48]	; 0x30
10011ce8:	f004 fa70 	bl	100161cc <__aeabi_i2f>
10011cec:	f7fe feee 	bl	10010acc <sqrtf>
10011cf0:	2319      	movs	r3, #25
10011cf2:	6b62      	ldr	r2, [r4, #52]	; 0x34
10011cf4:	63a0      	str	r0, [r4, #56]	; 0x38
10011cf6:	4093      	lsls	r3, r2
10011cf8:	63e3      	str	r3, [r4, #60]	; 0x3c
10011cfa:	bd10      	pop	{r4, pc}
10011cfc:	3301      	adds	r3, #1
10011cfe:	2800      	cmp	r0, #0
10011d00:	dcea      	bgt.n	10011cd8 <inv_set_default_number_of_samples+0x4>
10011d02:	e7eb      	b.n	10011cdc <inv_set_default_number_of_samples+0x8>
10011d04:	1001d1d0 	.word	0x1001d1d0

10011d08 <inv_init_fast_nomot>:
10011d08:	2298      	movs	r2, #152	; 0x98
10011d0a:	b538      	push	{r3, r4, r5, lr}
10011d0c:	4d15      	ldr	r5, [pc, #84]	; (10011d64 <inv_init_fast_nomot+0x5c>)
10011d0e:	2100      	movs	r1, #0
10011d10:	1c28      	adds	r0, r5, #0
10011d12:	0092      	lsls	r2, r2, #2
10011d14:	f006 faf9 	bl	1001830a <memset>
10011d18:	4c13      	ldr	r4, [pc, #76]	; (10011d68 <inv_init_fast_nomot+0x60>)
10011d1a:	2100      	movs	r1, #0
10011d1c:	2240      	movs	r2, #64	; 0x40
10011d1e:	1c20      	adds	r0, r4, #0
10011d20:	f006 faf3 	bl	1001830a <memset>
10011d24:	2007      	movs	r0, #7
10011d26:	f7ff f9f3 	bl	10011110 <inv_init_maxmin>
10011d2a:	2300      	movs	r3, #0
10011d2c:	4a0f      	ldr	r2, [pc, #60]	; (10011d6c <inv_init_fast_nomot+0x64>)
10011d2e:	2019      	movs	r0, #25
10011d30:	61a2      	str	r2, [r4, #24]
10011d32:	61e3      	str	r3, [r4, #28]
10011d34:	2214      	movs	r2, #20
10011d36:	2300      	movs	r3, #0
10011d38:	60a2      	str	r2, [r4, #8]
10011d3a:	60e3      	str	r3, [r4, #12]
10011d3c:	2296      	movs	r2, #150	; 0x96
10011d3e:	2300      	movs	r3, #0
10011d40:	0092      	lsls	r2, r2, #2
10011d42:	6122      	str	r2, [r4, #16]
10011d44:	6163      	str	r3, [r4, #20]
10011d46:	4b0a      	ldr	r3, [pc, #40]	; (10011d70 <inv_init_fast_nomot+0x68>)
10011d48:	2201      	movs	r2, #1
10011d4a:	6223      	str	r3, [r4, #32]
10011d4c:	23f2      	movs	r3, #242	; 0xf2
10011d4e:	005b      	lsls	r3, r3, #1
10011d50:	50ea      	str	r2, [r5, r3]
10011d52:	f7ff ffbf 	bl	10011cd4 <inv_set_default_number_of_samples>
10011d56:	2382      	movs	r3, #130	; 0x82
10011d58:	2200      	movs	r2, #0
10011d5a:	009b      	lsls	r3, r3, #2
10011d5c:	50ea      	str	r2, [r5, r3]
10011d5e:	2000      	movs	r0, #0
10011d60:	bd38      	pop	{r3, r4, r5, pc}
10011d62:	46c0      	nop			; (mov r8, r8)
10011d64:	1001e708 	.word	0x1001e708
10011d68:	1001d1d0 	.word	0x1001d1d0
10011d6c:	000005dc 	.word	0x000005dc
10011d70:	2faf0800 	.word	0x2faf0800

10011d74 <inv_stop_fast_nomot>:
10011d74:	b508      	push	{r3, lr}
10011d76:	2001      	movs	r0, #1
10011d78:	f7f8 ff5e 	bl	1000ac38 <inv_set_motion_state>
10011d7c:	4801      	ldr	r0, [pc, #4]	; (10011d84 <inv_stop_fast_nomot+0x10>)
10011d7e:	f7f8 f815 	bl	10009dac <inv_unregister_data_cb>
10011d82:	bd08      	pop	{r3, pc}
10011d84:	10011901 	.word	0x10011901

10011d88 <inv_enable_fast_nomot>:
10011d88:	b508      	push	{r3, lr}
10011d8a:	f7ff ffbd 	bl	10011d08 <inv_init_fast_nomot>
10011d8e:	2800      	cmp	r0, #0
10011d90:	d102      	bne.n	10011d98 <inv_enable_fast_nomot+0x10>
10011d92:	4802      	ldr	r0, [pc, #8]	; (10011d9c <inv_enable_fast_nomot+0x14>)
10011d94:	f7f9 f852 	bl	1000ae3c <inv_register_mpl_start_notification>
10011d98:	bd08      	pop	{r3, pc}
10011d9a:	46c0      	nop			; (mov r8, r8)
10011d9c:	100111a9 	.word	0x100111a9

10011da0 <inv_disable_fast_nomot>:
10011da0:	b508      	push	{r3, lr}
10011da2:	f7ff ffe7 	bl	10011d74 <inv_stop_fast_nomot>
10011da6:	4802      	ldr	r0, [pc, #8]	; (10011db0 <inv_disable_fast_nomot+0x10>)
10011da8:	f7f9 f818 	bl	1000addc <inv_unregister_mpl_start_notification>
10011dac:	bd08      	pop	{r3, pc}
10011dae:	46c0      	nop			; (mov r8, r8)
10011db0:	100111a9 	.word	0x100111a9

10011db4 <inv_get_fnm_gyro_no_motion_param>:
10011db4:	4b02      	ldr	r3, [pc, #8]	; (10011dc0 <inv_get_fnm_gyro_no_motion_param+0xc>)
10011db6:	33f1      	adds	r3, #241	; 0xf1
10011db8:	33ff      	adds	r3, #255	; 0xff
10011dba:	6818      	ldr	r0, [r3, #0]
10011dbc:	6859      	ldr	r1, [r3, #4]
10011dbe:	4770      	bx	lr
10011dc0:	1001e708 	.word	0x1001e708

10011dc4 <inv_fnm_debug_print>:
10011dc4:	4770      	bx	lr
10011dc6:	46c0      	nop			; (mov r8, r8)

10011dc8 <inv_start_9x_sensor_fusion>:
10011dc8:	2196      	movs	r1, #150	; 0x96
10011dca:	b508      	push	{r3, lr}
10011dcc:	4802      	ldr	r0, [pc, #8]	; (10011dd8 <inv_start_9x_sensor_fusion+0x10>)
10011dce:	0089      	lsls	r1, r1, #2
10011dd0:	2204      	movs	r2, #4
10011dd2:	f7f7 ff6d 	bl	10009cb0 <inv_register_data_cb>
10011dd6:	bd08      	pop	{r3, pc}
10011dd8:	100123b1 	.word	0x100123b1

10011ddc <inv_filter_correction_angle>:
10011ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
10011dde:	4657      	mov	r7, sl
10011de0:	464e      	mov	r6, r9
10011de2:	4645      	mov	r5, r8
10011de4:	b4e0      	push	{r5, r6, r7}
10011de6:	1c1f      	adds	r7, r3, #0
10011de8:	6b43      	ldr	r3, [r0, #52]	; 0x34
10011dea:	1c0e      	adds	r6, r1, #0
10011dec:	4690      	mov	r8, r2
10011dee:	2b00      	cmp	r3, #0
10011df0:	da00      	bge.n	10011df4 <inv_filter_correction_angle+0x18>
10011df2:	e0b7      	b.n	10011f64 <inv_filter_correction_angle+0x188>
10011df4:	23bc      	movs	r3, #188	; 0xbc
10011df6:	58c3      	ldr	r3, [r0, r3]
10011df8:	3b03      	subs	r3, #3
10011dfa:	425a      	negs	r2, r3
10011dfc:	415a      	adcs	r2, r3
10011dfe:	4691      	mov	r9, r2
10011e00:	4c67      	ldr	r4, [pc, #412]	; (10011fa0 <inv_filter_correction_angle+0x1c4>)
10011e02:	2224      	movs	r2, #36	; 0x24
10011e04:	1d21      	adds	r1, r4, #4
10011e06:	1c20      	adds	r0, r4, #0
10011e08:	1c25      	adds	r5, r4, #0
10011e0a:	f006 fa69 	bl	100182e0 <memmove>
10011e0e:	2000      	movs	r0, #0
10011e10:	6266      	str	r6, [r4, #36]	; 0x24
10011e12:	3528      	adds	r5, #40	; 0x28
10011e14:	cc02      	ldmia	r4!, {r1}
10011e16:	f003 fbc5 	bl	100155a4 <__aeabi_fadd>
10011e1a:	42ac      	cmp	r4, r5
10011e1c:	d1fa      	bne.n	10011e14 <inv_filter_correction_angle+0x38>
10011e1e:	4961      	ldr	r1, [pc, #388]	; (10011fa4 <inv_filter_correction_angle+0x1c8>)
10011e20:	f003 fd36 	bl	10015890 <__aeabi_fdiv>
10011e24:	23e4      	movs	r3, #228	; 0xe4
10011e26:	4c60      	ldr	r4, [pc, #384]	; (10011fa8 <inv_filter_correction_angle+0x1cc>)
10011e28:	4682      	mov	sl, r0
10011e2a:	50e0      	str	r0, [r4, r3]
10011e2c:	4643      	mov	r3, r8
10011e2e:	2b31      	cmp	r3, #49	; 0x31
10011e30:	dd18      	ble.n	10011e64 <inv_filter_correction_angle+0x88>
10011e32:	238e      	movs	r3, #142	; 0x8e
10011e34:	22c8      	movs	r2, #200	; 0xc8
10011e36:	005b      	lsls	r3, r3, #1
10011e38:	50e2      	str	r2, [r4, r3]
10011e3a:	1c38      	adds	r0, r7, #0
10011e3c:	f004 f9c6 	bl	100161cc <__aeabi_i2f>
10011e40:	4b5a      	ldr	r3, [pc, #360]	; (10011fac <inv_filter_correction_angle+0x1d0>)
10011e42:	1c05      	adds	r5, r0, #0
10011e44:	1c30      	adds	r0, r6, #0
10011e46:	4598      	cmp	r8, r3
10011e48:	dc00      	bgt.n	10011e4c <inv_filter_correction_angle+0x70>
10011e4a:	e07a      	b.n	10011f42 <inv_filter_correction_angle+0x166>
10011e4c:	4958      	ldr	r1, [pc, #352]	; (10011fb0 <inv_filter_correction_angle+0x1d4>)
10011e4e:	f003 fd1f 	bl	10015890 <__aeabi_fdiv>
10011e52:	1c01      	adds	r1, r0, #0
10011e54:	1c28      	adds	r0, r5, #0
10011e56:	f003 fee5 	bl	10015c24 <__aeabi_fmul>
10011e5a:	4956      	ldr	r1, [pc, #344]	; (10011fb4 <inv_filter_correction_angle+0x1d8>)
10011e5c:	f003 fd18 	bl	10015890 <__aeabi_fdiv>
10011e60:	1c05      	adds	r5, r0, #0
10011e62:	e023      	b.n	10011eac <inv_filter_correction_angle+0xd0>
10011e64:	1c38      	adds	r0, r7, #0
10011e66:	4954      	ldr	r1, [pc, #336]	; (10011fb8 <inv_filter_correction_angle+0x1dc>)
10011e68:	f003 f92e 	bl	100150c8 <__aeabi_idiv>
10011e6c:	258e      	movs	r5, #142	; 0x8e
10011e6e:	0083      	lsls	r3, r0, #2
10011e70:	006d      	lsls	r5, r5, #1
10011e72:	1818      	adds	r0, r3, r0
10011e74:	5963      	ldr	r3, [r4, r5]
10011e76:	4698      	mov	r8, r3
10011e78:	4480      	add	r8, r0
10011e7a:	4643      	mov	r3, r8
10011e7c:	5163      	str	r3, [r4, r5]
10011e7e:	2b00      	cmp	r3, #0
10011e80:	da00      	bge.n	10011e84 <inv_filter_correction_angle+0xa8>
10011e82:	e072      	b.n	10011f6a <inv_filter_correction_angle+0x18e>
10011e84:	494d      	ldr	r1, [pc, #308]	; (10011fbc <inv_filter_correction_angle+0x1e0>)
10011e86:	1c30      	adds	r0, r6, #0
10011e88:	f003 fd02 	bl	10015890 <__aeabi_fdiv>
10011e8c:	1c05      	adds	r5, r0, #0
10011e8e:	1c38      	adds	r0, r7, #0
10011e90:	f004 f99c 	bl	100161cc <__aeabi_i2f>
10011e94:	1c01      	adds	r1, r0, #0
10011e96:	1c28      	adds	r0, r5, #0
10011e98:	f003 fec4 	bl	10015c24 <__aeabi_fmul>
10011e9c:	4945      	ldr	r1, [pc, #276]	; (10011fb4 <inv_filter_correction_angle+0x1d8>)
10011e9e:	f003 fcf7 	bl	10015890 <__aeabi_fdiv>
10011ea2:	4643      	mov	r3, r8
10011ea4:	1c05      	adds	r5, r0, #0
10011ea6:	2b00      	cmp	r3, #0
10011ea8:	d100      	bne.n	10011eac <inv_filter_correction_angle+0xd0>
10011eaa:	e070      	b.n	10011f8e <inv_filter_correction_angle+0x1b2>
10011eac:	2390      	movs	r3, #144	; 0x90
10011eae:	005b      	lsls	r3, r3, #1
10011eb0:	58e3      	ldr	r3, [r4, r3]
10011eb2:	2b00      	cmp	r3, #0
10011eb4:	d000      	beq.n	10011eb8 <inv_filter_correction_angle+0xdc>
10011eb6:	1c35      	adds	r5, r6, #0
10011eb8:	4b41      	ldr	r3, [pc, #260]	; (10011fc0 <inv_filter_correction_angle+0x1e4>)
10011eba:	429f      	cmp	r7, r3
10011ebc:	d050      	beq.n	10011f60 <inv_filter_correction_angle+0x184>
10011ebe:	1c28      	adds	r0, r5, #0
10011ec0:	2100      	movs	r1, #0
10011ec2:	f003 fa37 	bl	10015334 <__aeabi_fcmpeq>
10011ec6:	23e8      	movs	r3, #232	; 0xe8
10011ec8:	2800      	cmp	r0, #0
10011eca:	d045      	beq.n	10011f58 <inv_filter_correction_angle+0x17c>
10011ecc:	58e0      	ldr	r0, [r4, r3]
10011ece:	4651      	mov	r1, sl
10011ed0:	f003 ffbc 	bl	10015e4c <__aeabi_fsub>
10011ed4:	0040      	lsls	r0, r0, #1
10011ed6:	0840      	lsrs	r0, r0, #1
10011ed8:	f005 ffcc 	bl	10017e74 <__aeabi_f2d>
10011edc:	4a39      	ldr	r2, [pc, #228]	; (10011fc4 <inv_filter_correction_angle+0x1e8>)
10011ede:	4b3a      	ldr	r3, [pc, #232]	; (10011fc8 <inv_filter_correction_angle+0x1ec>)
10011ee0:	f003 fa08 	bl	100152f4 <__aeabi_dcmpgt>
10011ee4:	2800      	cmp	r0, #0
10011ee6:	d026      	beq.n	10011f36 <inv_filter_correction_angle+0x15a>
10011ee8:	23b8      	movs	r3, #184	; 0xb8
10011eea:	2100      	movs	r1, #0
10011eec:	58e0      	ldr	r0, [r4, r3]
10011eee:	f003 fa21 	bl	10015334 <__aeabi_fcmpeq>
10011ef2:	2800      	cmp	r0, #0
10011ef4:	d01f      	beq.n	10011f36 <inv_filter_correction_angle+0x15a>
10011ef6:	464b      	mov	r3, r9
10011ef8:	2b01      	cmp	r3, #1
10011efa:	d11c      	bne.n	10011f36 <inv_filter_correction_angle+0x15a>
10011efc:	22c8      	movs	r2, #200	; 0xc8
10011efe:	331c      	adds	r3, #28
10011f00:	33ff      	adds	r3, #255	; 0xff
10011f02:	50e2      	str	r2, [r4, r3]
10011f04:	1c30      	adds	r0, r6, #0
10011f06:	f005 ffb5 	bl	10017e74 <__aeabi_f2d>
10011f0a:	2200      	movs	r2, #0
10011f0c:	4b2f      	ldr	r3, [pc, #188]	; (10011fcc <inv_filter_correction_angle+0x1f0>)
10011f0e:	f004 fd0f 	bl	10016930 <__aeabi_ddiv>
10011f12:	1c04      	adds	r4, r0, #0
10011f14:	1c38      	adds	r0, r7, #0
10011f16:	1c0d      	adds	r5, r1, #0
10011f18:	f005 ff32 	bl	10017d80 <__aeabi_i2d>
10011f1c:	1c02      	adds	r2, r0, #0
10011f1e:	1c0b      	adds	r3, r1, #0
10011f20:	1c20      	adds	r0, r4, #0
10011f22:	1c29      	adds	r1, r5, #0
10011f24:	f005 f928 	bl	10017178 <__aeabi_dmul>
10011f28:	2200      	movs	r2, #0
10011f2a:	4b29      	ldr	r3, [pc, #164]	; (10011fd0 <inv_filter_correction_angle+0x1f4>)
10011f2c:	f004 fd00 	bl	10016930 <__aeabi_ddiv>
10011f30:	f005 fff4 	bl	10017f1c <__aeabi_d2f>
10011f34:	1c05      	adds	r5, r0, #0
10011f36:	1c28      	adds	r0, r5, #0
10011f38:	bc1c      	pop	{r2, r3, r4}
10011f3a:	4690      	mov	r8, r2
10011f3c:	4699      	mov	r9, r3
10011f3e:	46a2      	mov	sl, r4
10011f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011f42:	4924      	ldr	r1, [pc, #144]	; (10011fd4 <inv_filter_correction_angle+0x1f8>)
10011f44:	f003 fca4 	bl	10015890 <__aeabi_fdiv>
10011f48:	1c29      	adds	r1, r5, #0
10011f4a:	f003 fe6b 	bl	10015c24 <__aeabi_fmul>
10011f4e:	4919      	ldr	r1, [pc, #100]	; (10011fb4 <inv_filter_correction_angle+0x1d8>)
10011f50:	f003 fc9e 	bl	10015890 <__aeabi_fdiv>
10011f54:	1c05      	adds	r5, r0, #0
10011f56:	e7a9      	b.n	10011eac <inv_filter_correction_angle+0xd0>
10011f58:	4652      	mov	r2, sl
10011f5a:	4650      	mov	r0, sl
10011f5c:	50e2      	str	r2, [r4, r3]
10011f5e:	e7b6      	b.n	10011ece <inv_filter_correction_angle+0xf2>
10011f60:	1c35      	adds	r5, r6, #0
10011f62:	e7ac      	b.n	10011ebe <inv_filter_correction_angle+0xe2>
10011f64:	2300      	movs	r3, #0
10011f66:	4699      	mov	r9, r3
10011f68:	e74a      	b.n	10011e00 <inv_filter_correction_angle+0x24>
10011f6a:	2300      	movs	r3, #0
10011f6c:	4913      	ldr	r1, [pc, #76]	; (10011fbc <inv_filter_correction_angle+0x1e0>)
10011f6e:	5163      	str	r3, [r4, r5]
10011f70:	1c30      	adds	r0, r6, #0
10011f72:	f003 fc8d 	bl	10015890 <__aeabi_fdiv>
10011f76:	1c05      	adds	r5, r0, #0
10011f78:	1c38      	adds	r0, r7, #0
10011f7a:	f004 f927 	bl	100161cc <__aeabi_i2f>
10011f7e:	1c01      	adds	r1, r0, #0
10011f80:	1c28      	adds	r0, r5, #0
10011f82:	f003 fe4f 	bl	10015c24 <__aeabi_fmul>
10011f86:	490b      	ldr	r1, [pc, #44]	; (10011fb4 <inv_filter_correction_angle+0x1d8>)
10011f88:	f003 fc82 	bl	10015890 <__aeabi_fdiv>
10011f8c:	1c05      	adds	r5, r0, #0
10011f8e:	2394      	movs	r3, #148	; 0x94
10011f90:	005b      	lsls	r3, r3, #1
10011f92:	58e3      	ldr	r3, [r4, r3]
10011f94:	2b01      	cmp	r3, #1
10011f96:	d000      	beq.n	10011f9a <inv_filter_correction_angle+0x1be>
10011f98:	e788      	b.n	10011eac <inv_filter_correction_angle+0xd0>
10011f9a:	2500      	movs	r5, #0
10011f9c:	e786      	b.n	10011eac <inv_filter_correction_angle+0xd0>
10011f9e:	46c0      	nop			; (mov r8, r8)
10011fa0:	1001ea24 	.word	0x1001ea24
10011fa4:	41200000 	.word	0x41200000
10011fa8:	1001e968 	.word	0x1001e968
10011fac:	000003e7 	.word	0x000003e7
10011fb0:	42480000 	.word	0x42480000
10011fb4:	459c4000 	.word	0x459c4000
10011fb8:	ffffec78 	.word	0xffffec78
10011fbc:	43c80000 	.word	0x43c80000
10011fc0:	000f4240 	.word	0x000f4240
10011fc4:	cac08312 	.word	0xcac08312
10011fc8:	3fb645a1 	.word	0x3fb645a1
10011fcc:	40790000 	.word	0x40790000
10011fd0:	40b38800 	.word	0x40b38800
10011fd4:	43480000 	.word	0x43480000

10011fd8 <inv_perform_9x_fusion>:
10011fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
10011fda:	465f      	mov	r7, fp
10011fdc:	4656      	mov	r6, sl
10011fde:	464d      	mov	r5, r9
10011fe0:	4644      	mov	r4, r8
10011fe2:	2300      	movs	r3, #0
10011fe4:	b4f0      	push	{r4, r5, r6, r7}
10011fe6:	b0ab      	sub	sp, #172	; 0xac
10011fe8:	9303      	str	r3, [sp, #12]
10011fea:	9304      	str	r3, [sp, #16]
10011fec:	9305      	str	r3, [sp, #20]
10011fee:	4fd3      	ldr	r7, [pc, #844]	; (1001233c <inv_perform_9x_fusion+0x364>)
10011ff0:	3321      	adds	r3, #33	; 0x21
10011ff2:	33ff      	adds	r3, #255	; 0xff
10011ff4:	58fa      	ldr	r2, [r7, r3]
10011ff6:	2a03      	cmp	r2, #3
10011ff8:	d100      	bne.n	10011ffc <inv_perform_9x_fusion+0x24>
10011ffa:	e19b      	b.n	10012334 <inv_perform_9x_fusion+0x35c>
10011ffc:	2400      	movs	r4, #0
10011ffe:	9001      	str	r0, [sp, #4]
10012000:	1c23      	adds	r3, r4, #0
10012002:	33a8      	adds	r3, #168	; 0xa8
10012004:	58f8      	ldr	r0, [r7, r3]
10012006:	f004 f8e1 	bl	100161cc <__aeabi_i2f>
1001200a:	21c2      	movs	r1, #194	; 0xc2
1001200c:	0589      	lsls	r1, r1, #22
1001200e:	f003 fe09 	bl	10015c24 <__aeabi_fmul>
10012012:	221c      	movs	r2, #28
10012014:	ab02      	add	r3, sp, #8
10012016:	189b      	adds	r3, r3, r2
10012018:	5118      	str	r0, [r3, r4]
1001201a:	3404      	adds	r4, #4
1001201c:	2c10      	cmp	r4, #16
1001201e:	d1ef      	bne.n	10012000 <inv_perform_9x_fusion+0x28>
10012020:	ab1d      	add	r3, sp, #116	; 0x74
10012022:	1c18      	adds	r0, r3, #0
10012024:	ac06      	add	r4, sp, #24
10012026:	469b      	mov	fp, r3
10012028:	f7f8 fe7e 	bl	1000ad28 <inv_get_6axis_quaternion>
1001202c:	1c20      	adds	r0, r4, #0
1001202e:	f7f8 fe2f 	bl	1000ac90 <inv_get_gravity>
10012032:	1c39      	adds	r1, r7, #0
10012034:	223c      	movs	r2, #60	; 0x3c
10012036:	310c      	adds	r1, #12
10012038:	1c38      	adds	r0, r7, #0
1001203a:	f006 f951 	bl	100182e0 <memmove>
1001203e:	1c38      	adds	r0, r7, #0
10012040:	1c39      	adds	r1, r7, #0
10012042:	2250      	movs	r2, #80	; 0x50
10012044:	3158      	adds	r1, #88	; 0x58
10012046:	3048      	adds	r0, #72	; 0x48
10012048:	f006 f94a 	bl	100182e0 <memmove>
1001204c:	1c3b      	adds	r3, r7, #0
1001204e:	333c      	adds	r3, #60	; 0x3c
10012050:	cc07      	ldmia	r4!, {r0, r1, r2}
10012052:	c307      	stmia	r3!, {r0, r1, r2}
10012054:	1c3b      	adds	r3, r7, #0
10012056:	465a      	mov	r2, fp
10012058:	3398      	adds	r3, #152	; 0x98
1001205a:	ca13      	ldmia	r2!, {r0, r1, r4}
1001205c:	c313      	stmia	r3!, {r0, r1, r4}
1001205e:	6812      	ldr	r2, [r2, #0]
10012060:	601a      	str	r2, [r3, #0]
10012062:	2392      	movs	r3, #146	; 0x92
10012064:	005b      	lsls	r3, r3, #1
10012066:	58f9      	ldr	r1, [r7, r3]
10012068:	1c4a      	adds	r2, r1, #1
1001206a:	50fa      	str	r2, [r7, r3]
1001206c:	2a06      	cmp	r2, #6
1001206e:	dc00      	bgt.n	10012072 <inv_perform_9x_fusion+0x9a>
10012070:	e123      	b.n	100122ba <inv_perform_9x_fusion+0x2e2>
10012072:	2206      	movs	r2, #6
10012074:	2500      	movs	r5, #0
10012076:	50fa      	str	r2, [r7, r3]
10012078:	9b01      	ldr	r3, [sp, #4]
1001207a:	006c      	lsls	r4, r5, #1
1001207c:	33a0      	adds	r3, #160	; 0xa0
1001207e:	9300      	str	r3, [sp, #0]
10012080:	4baf      	ldr	r3, [pc, #700]	; (10012340 <inv_perform_9x_fusion+0x368>)
10012082:	012e      	lsls	r6, r5, #4
10012084:	469a      	mov	sl, r3
10012086:	ab21      	add	r3, sp, #132	; 0x84
10012088:	4699      	mov	r9, r3
1001208a:	1964      	adds	r4, r4, r5
1001208c:	3648      	adds	r6, #72	; 0x48
1001208e:	00a4      	lsls	r4, r4, #2
10012090:	19be      	adds	r6, r7, r6
10012092:	193c      	adds	r4, r7, r4
10012094:	48ab      	ldr	r0, [pc, #684]	; (10012344 <inv_perform_9x_fusion+0x36c>)
10012096:	1c31      	adds	r1, r6, #0
10012098:	464a      	mov	r2, r9
1001209a:	f7f8 f89b 	bl	1000a1d4 <inv_q_mult>
1001209e:	1c21      	adds	r1, r4, #0
100120a0:	9800      	ldr	r0, [sp, #0]
100120a2:	464a      	mov	r2, r9
100120a4:	f7f8 f95e 	bl	1000a364 <inv_compass_angle>
100120a8:	4653      	mov	r3, sl
100120aa:	4680      	mov	r8, r0
100120ac:	0059      	lsls	r1, r3, #1
100120ae:	0040      	lsls	r0, r0, #1
100120b0:	0840      	lsrs	r0, r0, #1
100120b2:	0849      	lsrs	r1, r1, #1
100120b4:	f003 f944 	bl	10015340 <__aeabi_fcmplt>
100120b8:	2800      	cmp	r0, #0
100120ba:	d000      	beq.n	100120be <inv_perform_9x_fusion+0xe6>
100120bc:	46c2      	mov	sl, r8
100120be:	3501      	adds	r5, #1
100120c0:	3610      	adds	r6, #16
100120c2:	340c      	adds	r4, #12
100120c4:	2d06      	cmp	r5, #6
100120c6:	d1e5      	bne.n	10012094 <inv_perform_9x_fusion+0xbc>
100120c8:	9801      	ldr	r0, [sp, #4]
100120ca:	3018      	adds	r0, #24
100120cc:	f7f8 f85e 	bl	1000a18c <inv_get_gyro_sum_of_sqr>
100120d0:	2398      	movs	r3, #152	; 0x98
100120d2:	005b      	lsls	r3, r3, #1
100120d4:	58fb      	ldr	r3, [r7, r3]
100120d6:	499c      	ldr	r1, [pc, #624]	; (10012348 <inv_perform_9x_fusion+0x370>)
100120d8:	0982      	lsrs	r2, r0, #6
100120da:	428b      	cmp	r3, r1
100120dc:	dd00      	ble.n	100120e0 <inv_perform_9x_fusion+0x108>
100120de:	1c0b      	adds	r3, r1, #0
100120e0:	4651      	mov	r1, sl
100120e2:	9801      	ldr	r0, [sp, #4]
100120e4:	f7ff fe7a 	bl	10011ddc <inv_filter_correction_angle>
100120e8:	23ec      	movs	r3, #236	; 0xec
100120ea:	58f9      	ldr	r1, [r7, r3]
100120ec:	f003 fd9a 	bl	10015c24 <__aeabi_fmul>
100120f0:	23b8      	movs	r3, #184	; 0xb8
100120f2:	1c3c      	adds	r4, r7, #0
100120f4:	50f8      	str	r0, [r7, r3]
100120f6:	a819      	add	r0, sp, #100	; 0x64
100120f8:	f7f8 fe16 	bl	1000ad28 <inv_get_6axis_quaternion>
100120fc:	34fc      	adds	r4, #252	; 0xfc
100120fe:	a819      	add	r0, sp, #100	; 0x64
10012100:	4649      	mov	r1, r9
10012102:	f7f8 fbab 	bl	1000a85c <inv_quaternion_to_rotation>
10012106:	1c20      	adds	r0, r4, #0
10012108:	a919      	add	r1, sp, #100	; 0x64
1001210a:	465a      	mov	r2, fp
1001210c:	f7f8 f862 	bl	1000a1d4 <inv_q_mult>
10012110:	a819      	add	r0, sp, #100	; 0x64
10012112:	1c21      	adds	r1, r4, #0
10012114:	f7f8 f9de 	bl	1000a4d4 <inv_q_invert>
10012118:	2300      	movs	r3, #0
1001211a:	469a      	mov	sl, r3
1001211c:	4653      	mov	r3, sl
1001211e:	005b      	lsls	r3, r3, #1
10012120:	4453      	add	r3, sl
10012122:	444b      	add	r3, r9
10012124:	4698      	mov	r8, r3
10012126:	2600      	movs	r6, #0
10012128:	2400      	movs	r4, #0
1001212a:	2500      	movs	r5, #0
1001212c:	4643      	mov	r3, r8
1001212e:	599b      	ldr	r3, [r3, r6]
10012130:	4640      	mov	r0, r8
10012132:	17d9      	asrs	r1, r3, #31
10012134:	465b      	mov	r3, fp
10012136:	199b      	adds	r3, r3, r6
10012138:	685a      	ldr	r2, [r3, #4]
1001213a:	5980      	ldr	r0, [r0, r6]
1001213c:	17d3      	asrs	r3, r2, #31
1001213e:	f003 f94b 	bl	100153d8 <__aeabi_lmul>
10012142:	3604      	adds	r6, #4
10012144:	1824      	adds	r4, r4, r0
10012146:	414d      	adcs	r5, r1
10012148:	2e0c      	cmp	r6, #12
1001214a:	d1ef      	bne.n	1001212c <inv_perform_9x_fusion+0x154>
1001214c:	4652      	mov	r2, sl
1001214e:	00ab      	lsls	r3, r5, #2
10012150:	0fa4      	lsrs	r4, r4, #30
10012152:	431c      	orrs	r4, r3
10012154:	ab03      	add	r3, sp, #12
10012156:	509c      	str	r4, [r3, r2]
10012158:	2304      	movs	r3, #4
1001215a:	469c      	mov	ip, r3
1001215c:	44e2      	add	sl, ip
1001215e:	4653      	mov	r3, sl
10012160:	2b0c      	cmp	r3, #12
10012162:	d1db      	bne.n	1001211c <inv_perform_9x_fusion+0x144>
10012164:	2390      	movs	r3, #144	; 0x90
10012166:	005b      	lsls	r3, r3, #1
10012168:	58fb      	ldr	r3, [r7, r3]
1001216a:	2b00      	cmp	r3, #0
1001216c:	d000      	beq.n	10012170 <inv_perform_9x_fusion+0x198>
1001216e:	e0ae      	b.n	100122ce <inv_perform_9x_fusion+0x2f6>
10012170:	9c05      	ldr	r4, [sp, #20]
10012172:	4260      	negs	r0, r4
10012174:	f004 f82a 	bl	100161cc <__aeabi_i2f>
10012178:	21c2      	movs	r1, #194	; 0xc2
1001217a:	0589      	lsls	r1, r1, #22
1001217c:	f003 fd52 	bl	10015c24 <__aeabi_fmul>
10012180:	1c06      	adds	r6, r0, #0
10012182:	f001 fdc5 	bl	10013d10 <cosf>
10012186:	1c05      	adds	r5, r0, #0
10012188:	1c30      	adds	r0, r6, #0
1001218a:	f001 fdff 	bl	10013d8c <sinf>
1001218e:	1c06      	adds	r6, r0, #0
10012190:	1c20      	adds	r0, r4, #0
10012192:	f004 f81b 	bl	100161cc <__aeabi_i2f>
10012196:	496d      	ldr	r1, [pc, #436]	; (1001234c <inv_perform_9x_fusion+0x374>)
10012198:	f003 fb7a 	bl	10015890 <__aeabi_fdiv>
1001219c:	4680      	mov	r8, r0
1001219e:	2398      	movs	r3, #152	; 0x98
100121a0:	9511      	str	r5, [sp, #68]	; 0x44
100121a2:	2500      	movs	r5, #0
100121a4:	005b      	lsls	r3, r3, #1
100121a6:	ac11      	add	r4, sp, #68	; 0x44
100121a8:	58f8      	ldr	r0, [r7, r3]
100121aa:	4969      	ldr	r1, [pc, #420]	; (10012350 <inv_perform_9x_fusion+0x378>)
100121ac:	6065      	str	r5, [r4, #4]
100121ae:	60a5      	str	r5, [r4, #8]
100121b0:	60e6      	str	r6, [r4, #12]
100121b2:	f002 ff89 	bl	100150c8 <__aeabi_idiv>
100121b6:	f004 f809 	bl	100161cc <__aeabi_i2f>
100121ba:	1c06      	adds	r6, r0, #0
100121bc:	1c31      	adds	r1, r6, #0
100121be:	4640      	mov	r0, r8
100121c0:	f003 fb66 	bl	10015890 <__aeabi_fdiv>
100121c4:	21fc      	movs	r1, #252	; 0xfc
100121c6:	0589      	lsls	r1, r1, #22
100121c8:	f003 fd2c 	bl	10015c24 <__aeabi_fmul>
100121cc:	f003 ffdc 	bl	10016188 <__aeabi_f2iz>
100121d0:	0040      	lsls	r0, r0, #1
100121d2:	f003 fffb 	bl	100161cc <__aeabi_i2f>
100121d6:	495d      	ldr	r1, [pc, #372]	; (1001234c <inv_perform_9x_fusion+0x374>)
100121d8:	f003 fd24 	bl	10015c24 <__aeabi_fmul>
100121dc:	1c01      	adds	r1, r0, #0
100121de:	1c30      	adds	r0, r6, #0
100121e0:	f003 fd20 	bl	10015c24 <__aeabi_fmul>
100121e4:	f003 ffd0 	bl	10016188 <__aeabi_f2iz>
100121e8:	f003 fff0 	bl	100161cc <__aeabi_i2f>
100121ec:	21c2      	movs	r1, #194	; 0xc2
100121ee:	0589      	lsls	r1, r1, #22
100121f0:	f003 fd18 	bl	10015c24 <__aeabi_fmul>
100121f4:	1c06      	adds	r6, r0, #0
100121f6:	f001 fd8b 	bl	10013d10 <cosf>
100121fa:	9015      	str	r0, [sp, #84]	; 0x54
100121fc:	1c30      	adds	r0, r6, #0
100121fe:	9516      	str	r5, [sp, #88]	; 0x58
10012200:	9517      	str	r5, [sp, #92]	; 0x5c
10012202:	f001 fdc3 	bl	10013d8c <sinf>
10012206:	1c21      	adds	r1, r4, #0
10012208:	9018      	str	r0, [sp, #96]	; 0x60
1001220a:	aa0d      	add	r2, sp, #52	; 0x34
1001220c:	a809      	add	r0, sp, #36	; 0x24
1001220e:	f7f8 f995 	bl	1000a53c <inv_q_multf>
10012212:	1c22      	adds	r2, r4, #0
10012214:	a80d      	add	r0, sp, #52	; 0x34
10012216:	a915      	add	r1, sp, #84	; 0x54
10012218:	f7f8 f990 	bl	1000a53c <inv_q_multf>
1001221c:	23bc      	movs	r3, #188	; 0xbc
1001221e:	9a01      	ldr	r2, [sp, #4]
10012220:	2500      	movs	r5, #0
10012222:	58d3      	ldr	r3, [r2, r3]
10012224:	4698      	mov	r8, r3
10012226:	2b00      	cmp	r3, #0
10012228:	dd16      	ble.n	10012258 <inv_perform_9x_fusion+0x280>
1001222a:	221c      	movs	r2, #28
1001222c:	219d      	movs	r1, #157	; 0x9d
1001222e:	ab02      	add	r3, sp, #8
10012230:	189b      	adds	r3, r3, r2
10012232:	5962      	ldr	r2, [r4, r5]
10012234:	1c2e      	adds	r6, r5, #0
10012236:	515a      	str	r2, [r3, r5]
10012238:	1c10      	adds	r0, r2, #0
1001223a:	05c9      	lsls	r1, r1, #23
1001223c:	f003 fcf2 	bl	10015c24 <__aeabi_fmul>
10012240:	f003 ffa2 	bl	10016188 <__aeabi_f2iz>
10012244:	36a8      	adds	r6, #168	; 0xa8
10012246:	19be      	adds	r6, r7, r6
10012248:	3504      	adds	r5, #4
1001224a:	6030      	str	r0, [r6, #0]
1001224c:	2d10      	cmp	r5, #16
1001224e:	d1ec      	bne.n	1001222a <inv_perform_9x_fusion+0x252>
10012250:	4643      	mov	r3, r8
10012252:	2b03      	cmp	r3, #3
10012254:	d100      	bne.n	10012258 <inv_perform_9x_fusion+0x280>
10012256:	e07d      	b.n	10012354 <inv_perform_9x_fusion+0x37c>
10012258:	23a8      	movs	r3, #168	; 0xa8
1001225a:	58f8      	ldr	r0, [r7, r3]
1001225c:	4698      	mov	r8, r3
1001225e:	f003 ffb5 	bl	100161cc <__aeabi_i2f>
10012262:	21c2      	movs	r1, #194	; 0xc2
10012264:	0589      	lsls	r1, r1, #22
10012266:	f003 fcdd 	bl	10015c24 <__aeabi_fmul>
1001226a:	26ac      	movs	r6, #172	; 0xac
1001226c:	900d      	str	r0, [sp, #52]	; 0x34
1001226e:	59b8      	ldr	r0, [r7, r6]
10012270:	f003 ffac 	bl	100161cc <__aeabi_i2f>
10012274:	21c2      	movs	r1, #194	; 0xc2
10012276:	0589      	lsls	r1, r1, #22
10012278:	f003 fcd4 	bl	10015c24 <__aeabi_fmul>
1001227c:	25b0      	movs	r5, #176	; 0xb0
1001227e:	900e      	str	r0, [sp, #56]	; 0x38
10012280:	5978      	ldr	r0, [r7, r5]
10012282:	f003 ffa3 	bl	100161cc <__aeabi_i2f>
10012286:	21c2      	movs	r1, #194	; 0xc2
10012288:	0589      	lsls	r1, r1, #22
1001228a:	f003 fccb 	bl	10015c24 <__aeabi_fmul>
1001228e:	24b4      	movs	r4, #180	; 0xb4
10012290:	900f      	str	r0, [sp, #60]	; 0x3c
10012292:	5938      	ldr	r0, [r7, r4]
10012294:	f003 ff9a 	bl	100161cc <__aeabi_i2f>
10012298:	21c2      	movs	r1, #194	; 0xc2
1001229a:	0589      	lsls	r1, r1, #22
1001229c:	f003 fcc2 	bl	10015c24 <__aeabi_fmul>
100122a0:	2390      	movs	r3, #144	; 0x90
100122a2:	005b      	lsls	r3, r3, #1
100122a4:	58fb      	ldr	r3, [r7, r3]
100122a6:	9010      	str	r0, [sp, #64]	; 0x40
100122a8:	2b00      	cmp	r3, #0
100122aa:	d116      	bne.n	100122da <inv_perform_9x_fusion+0x302>
100122ac:	b02b      	add	sp, #172	; 0xac
100122ae:	bc3c      	pop	{r2, r3, r4, r5}
100122b0:	4690      	mov	r8, r2
100122b2:	4699      	mov	r9, r3
100122b4:	46a2      	mov	sl, r4
100122b6:	46ab      	mov	fp, r5
100122b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100122ba:	2505      	movs	r5, #5
100122bc:	1a6d      	subs	r5, r5, r1
100122be:	2d05      	cmp	r5, #5
100122c0:	dc00      	bgt.n	100122c4 <inv_perform_9x_fusion+0x2ec>
100122c2:	e6d9      	b.n	10012078 <inv_perform_9x_fusion+0xa0>
100122c4:	4b1e      	ldr	r3, [pc, #120]	; (10012340 <inv_perform_9x_fusion+0x368>)
100122c6:	469a      	mov	sl, r3
100122c8:	ab21      	add	r3, sp, #132	; 0x84
100122ca:	4699      	mov	r9, r3
100122cc:	e6fc      	b.n	100120c8 <inv_perform_9x_fusion+0xf0>
100122ce:	2300      	movs	r3, #0
100122d0:	25fe      	movs	r5, #254	; 0xfe
100122d2:	4698      	mov	r8, r3
100122d4:	1c1e      	adds	r6, r3, #0
100122d6:	05ad      	lsls	r5, r5, #22
100122d8:	e761      	b.n	1001219e <inv_perform_9x_fusion+0x1c6>
100122da:	23b8      	movs	r3, #184	; 0xb8
100122dc:	21fc      	movs	r1, #252	; 0xfc
100122de:	58f8      	ldr	r0, [r7, r3]
100122e0:	0589      	lsls	r1, r1, #22
100122e2:	f003 fc9f 	bl	10015c24 <__aeabi_fmul>
100122e6:	4681      	mov	r9, r0
100122e8:	f001 fd12 	bl	10013d10 <cosf>
100122ec:	219d      	movs	r1, #157	; 0x9d
100122ee:	05c9      	lsls	r1, r1, #23
100122f0:	f003 fc98 	bl	10015c24 <__aeabi_fmul>
100122f4:	f003 ff48 	bl	10016188 <__aeabi_f2iz>
100122f8:	4643      	mov	r3, r8
100122fa:	50f8      	str	r0, [r7, r3]
100122fc:	2300      	movs	r3, #0
100122fe:	4648      	mov	r0, r9
10012300:	51bb      	str	r3, [r7, r6]
10012302:	517b      	str	r3, [r7, r5]
10012304:	f001 fd42 	bl	10013d8c <sinf>
10012308:	219d      	movs	r1, #157	; 0x9d
1001230a:	05c9      	lsls	r1, r1, #23
1001230c:	f003 fc8a 	bl	10015c24 <__aeabi_fmul>
10012310:	f003 ff3a 	bl	10016188 <__aeabi_f2iz>
10012314:	5138      	str	r0, [r7, r4]
10012316:	23c0      	movs	r3, #192	; 0xc0
10012318:	1c38      	adds	r0, r7, #0
1001231a:	9a01      	ldr	r2, [sp, #4]
1001231c:	30a8      	adds	r0, #168	; 0xa8
1001231e:	58d1      	ldr	r1, [r2, r3]
10012320:	f7f8 fc58 	bl	1000abd4 <inv_set_compass_correction>
10012324:	2290      	movs	r2, #144	; 0x90
10012326:	0052      	lsls	r2, r2, #1
10012328:	58bb      	ldr	r3, [r7, r2]
1001232a:	2b00      	cmp	r3, #0
1001232c:	d0be      	beq.n	100122ac <inv_perform_9x_fusion+0x2d4>
1001232e:	3b01      	subs	r3, #1
10012330:	50bb      	str	r3, [r7, r2]
10012332:	e7bb      	b.n	100122ac <inv_perform_9x_fusion+0x2d4>
10012334:	3a01      	subs	r2, #1
10012336:	50fa      	str	r2, [r7, r3]
10012338:	e7b8      	b.n	100122ac <inv_perform_9x_fusion+0x2d4>
1001233a:	46c0      	nop			; (mov r8, r8)
1001233c:	1001e968 	.word	0x1001e968
10012340:	49742400 	.word	0x49742400
10012344:	1001ea10 	.word	0x1001ea10
10012348:	000f4240 	.word	0x000f4240
1001234c:	473702e1 	.word	0x473702e1
10012350:	00001388 	.word	0x00001388
10012354:	f000 ff28 	bl	100131a8 <inv_get_magnetic_disturbance_state>
10012358:	2800      	cmp	r0, #0
1001235a:	d000      	beq.n	1001235e <inv_perform_9x_fusion+0x386>
1001235c:	e77c      	b.n	10012258 <inv_perform_9x_fusion+0x280>
1001235e:	23b8      	movs	r3, #184	; 0xb8
10012360:	21fc      	movs	r1, #252	; 0xfc
10012362:	58f8      	ldr	r0, [r7, r3]
10012364:	0589      	lsls	r1, r1, #22
10012366:	f003 fc5d 	bl	10015c24 <__aeabi_fmul>
1001236a:	1c05      	adds	r5, r0, #0
1001236c:	f001 fcd0 	bl	10013d10 <cosf>
10012370:	2300      	movs	r3, #0
10012372:	9015      	str	r0, [sp, #84]	; 0x54
10012374:	1c28      	adds	r0, r5, #0
10012376:	9316      	str	r3, [sp, #88]	; 0x58
10012378:	9317      	str	r3, [sp, #92]	; 0x5c
1001237a:	f001 fd07 	bl	10013d8c <sinf>
1001237e:	a915      	add	r1, sp, #84	; 0x54
10012380:	9018      	str	r0, [sp, #96]	; 0x60
10012382:	1c22      	adds	r2, r4, #0
10012384:	a809      	add	r0, sp, #36	; 0x24
10012386:	f7f8 f8d9 	bl	1000a53c <inv_q_multf>
1001238a:	1c20      	adds	r0, r4, #0
1001238c:	f7f8 f96e 	bl	1000a66c <inv_q_normalizef>
10012390:	2500      	movs	r5, #0
10012392:	219d      	movs	r1, #157	; 0x9d
10012394:	1c2e      	adds	r6, r5, #0
10012396:	5960      	ldr	r0, [r4, r5]
10012398:	05c9      	lsls	r1, r1, #23
1001239a:	f003 fc43 	bl	10015c24 <__aeabi_fmul>
1001239e:	f003 fef3 	bl	10016188 <__aeabi_f2iz>
100123a2:	36a8      	adds	r6, #168	; 0xa8
100123a4:	19be      	adds	r6, r7, r6
100123a6:	3504      	adds	r5, #4
100123a8:	6030      	str	r0, [r6, #0]
100123aa:	2d10      	cmp	r5, #16
100123ac:	d1f1      	bne.n	10012392 <inv_perform_9x_fusion+0x3ba>
100123ae:	e7b2      	b.n	10012316 <inv_perform_9x_fusion+0x33e>

100123b0 <inv_process_9x_sensor_fusion_cb>:
100123b0:	23b8      	movs	r3, #184	; 0xb8
100123b2:	58c2      	ldr	r2, [r0, r3]
100123b4:	3ba8      	subs	r3, #168	; 0xa8
100123b6:	b570      	push	{r4, r5, r6, lr}
100123b8:	4013      	ands	r3, r2
100123ba:	4d24      	ldr	r5, [pc, #144]	; (1001244c <inv_process_9x_sensor_fusion_cb+0x9c>)
100123bc:	d105      	bne.n	100123ca <inv_process_9x_sensor_fusion_cb+0x1a>
100123be:	2290      	movs	r2, #144	; 0x90
100123c0:	2103      	movs	r1, #3
100123c2:	0052      	lsls	r2, r2, #1
100123c4:	50a9      	str	r1, [r5, r2]
100123c6:	3204      	adds	r2, #4
100123c8:	50ab      	str	r3, [r5, r2]
100123ca:	2390      	movs	r3, #144	; 0x90
100123cc:	005b      	lsls	r3, r3, #1
100123ce:	58c2      	ldr	r2, [r0, r3]
100123d0:	3b20      	subs	r3, #32
100123d2:	421a      	tst	r2, r3
100123d4:	d105      	bne.n	100123e2 <inv_process_9x_sensor_fusion_cb+0x32>
100123d6:	6b02      	ldr	r2, [r0, #48]	; 0x30
100123d8:	421a      	tst	r2, r3
100123da:	d02b      	beq.n	10012434 <inv_process_9x_sensor_fusion_cb+0x84>
100123dc:	6f42      	ldr	r2, [r0, #116]	; 0x74
100123de:	421a      	tst	r2, r3
100123e0:	d028      	beq.n	10012434 <inv_process_9x_sensor_fusion_cb+0x84>
100123e2:	239a      	movs	r3, #154	; 0x9a
100123e4:	005b      	lsls	r3, r3, #1
100123e6:	58eb      	ldr	r3, [r5, r3]
100123e8:	1c04      	adds	r4, r0, #0
100123ea:	2b00      	cmp	r3, #0
100123ec:	d010      	beq.n	10012410 <inv_process_9x_sensor_fusion_cb+0x60>
100123ee:	22c4      	movs	r2, #196	; 0xc4
100123f0:	23c0      	movs	r3, #192	; 0xc0
100123f2:	21fa      	movs	r1, #250	; 0xfa
100123f4:	58c3      	ldr	r3, [r0, r3]
100123f6:	5880      	ldr	r0, [r0, r2]
100123f8:	0089      	lsls	r1, r1, #2
100123fa:	1a18      	subs	r0, r3, r0
100123fc:	f002 fdda 	bl	10014fb4 <__aeabi_uidiv>
10012400:	2398      	movs	r3, #152	; 0x98
10012402:	005b      	lsls	r3, r3, #1
10012404:	50e8      	str	r0, [r5, r3]
10012406:	1c20      	adds	r0, r4, #0
10012408:	f7ff fde6 	bl	10011fd8 <inv_perform_9x_fusion>
1001240c:	2000      	movs	r0, #0
1001240e:	bd70      	pop	{r4, r5, r6, pc}
10012410:	22b0      	movs	r2, #176	; 0xb0
10012412:	490f      	ldr	r1, [pc, #60]	; (10012450 <inv_process_9x_sensor_fusion_cb+0xa0>)
10012414:	5882      	ldr	r2, [r0, r2]
10012416:	428a      	cmp	r2, r1
10012418:	dc14      	bgt.n	10012444 <inv_process_9x_sensor_fusion_cb+0x94>
1001241a:	2096      	movs	r0, #150	; 0x96
1001241c:	0040      	lsls	r0, r0, #1
1001241e:	582e      	ldr	r6, [r5, r0]
10012420:	46b4      	mov	ip, r6
10012422:	4462      	add	r2, ip
10012424:	502a      	str	r2, [r5, r0]
10012426:	428a      	cmp	r2, r1
10012428:	ddf0      	ble.n	1001240c <inv_process_9x_sensor_fusion_cb+0x5c>
1001242a:	2198      	movs	r1, #152	; 0x98
1001242c:	0049      	lsls	r1, r1, #1
1001242e:	506a      	str	r2, [r5, r1]
10012430:	502b      	str	r3, [r5, r0]
10012432:	e7e8      	b.n	10012406 <inv_process_9x_sensor_fusion_cb+0x56>
10012434:	2390      	movs	r3, #144	; 0x90
10012436:	2203      	movs	r2, #3
10012438:	005b      	lsls	r3, r3, #1
1001243a:	50ea      	str	r2, [r5, r3]
1001243c:	2200      	movs	r2, #0
1001243e:	3304      	adds	r3, #4
10012440:	50ea      	str	r2, [r5, r3]
10012442:	e7e3      	b.n	1001240c <inv_process_9x_sensor_fusion_cb+0x5c>
10012444:	2398      	movs	r3, #152	; 0x98
10012446:	005b      	lsls	r3, r3, #1
10012448:	50ea      	str	r2, [r5, r3]
1001244a:	e7dc      	b.n	10012406 <inv_process_9x_sensor_fusion_cb+0x56>
1001244c:	1001e968 	.word	0x1001e968
10012450:	00004e1f 	.word	0x00004e1f

10012454 <inv_init_9x_fusion>:
10012454:	229c      	movs	r2, #156	; 0x9c
10012456:	b510      	push	{r4, lr}
10012458:	4c0d      	ldr	r4, [pc, #52]	; (10012490 <inv_init_9x_fusion+0x3c>)
1001245a:	2100      	movs	r1, #0
1001245c:	1c20      	adds	r0, r4, #0
1001245e:	0052      	lsls	r2, r2, #1
10012460:	f005 ff53 	bl	1001830a <memset>
10012464:	2380      	movs	r3, #128	; 0x80
10012466:	22fc      	movs	r2, #252	; 0xfc
10012468:	1c20      	adds	r0, r4, #0
1001246a:	05db      	lsls	r3, r3, #23
1001246c:	50a3      	str	r3, [r4, r2]
1001246e:	30a8      	adds	r0, #168	; 0xa8
10012470:	3a54      	subs	r2, #84	; 0x54
10012472:	2100      	movs	r1, #0
10012474:	50a3      	str	r3, [r4, r2]
10012476:	f7f8 fbad 	bl	1000abd4 <inv_set_compass_correction>
1001247a:	22fa      	movs	r2, #250	; 0xfa
1001247c:	238e      	movs	r3, #142	; 0x8e
1001247e:	0092      	lsls	r2, r2, #2
10012480:	005b      	lsls	r3, r3, #1
10012482:	50e2      	str	r2, [r4, r3]
10012484:	22fe      	movs	r2, #254	; 0xfe
10012486:	3b30      	subs	r3, #48	; 0x30
10012488:	0592      	lsls	r2, r2, #22
1001248a:	50e2      	str	r2, [r4, r3]
1001248c:	bd10      	pop	{r4, pc}
1001248e:	46c0      	nop			; (mov r8, r8)
10012490:	1001e968 	.word	0x1001e968

10012494 <inv_9x_fusion_set_mag_fb>:
10012494:	23ec      	movs	r3, #236	; 0xec
10012496:	4a02      	ldr	r2, [pc, #8]	; (100124a0 <inv_9x_fusion_set_mag_fb+0xc>)
10012498:	50d0      	str	r0, [r2, r3]
1001249a:	2000      	movs	r0, #0
1001249c:	4770      	bx	lr
1001249e:	46c0      	nop			; (mov r8, r8)
100124a0:	1001e968 	.word	0x1001e968

100124a4 <inv_9x_fusion_enable_jitter_reduction>:
100124a4:	2394      	movs	r3, #148	; 0x94
100124a6:	4a02      	ldr	r2, [pc, #8]	; (100124b0 <inv_9x_fusion_enable_jitter_reduction+0xc>)
100124a8:	005b      	lsls	r3, r3, #1
100124aa:	50d0      	str	r0, [r2, r3]
100124ac:	2000      	movs	r0, #0
100124ae:	4770      	bx	lr
100124b0:	1001e968 	.word	0x1001e968

100124b4 <inv_9x_fusion_use_timestamps>:
100124b4:	239a      	movs	r3, #154	; 0x9a
100124b6:	4a02      	ldr	r2, [pc, #8]	; (100124c0 <inv_9x_fusion_use_timestamps+0xc>)
100124b8:	005b      	lsls	r3, r3, #1
100124ba:	50d0      	str	r0, [r2, r3]
100124bc:	2000      	movs	r0, #0
100124be:	4770      	bx	lr
100124c0:	1001e968 	.word	0x1001e968

100124c4 <inv_stop_9x_sensor_fusion>:
100124c4:	b508      	push	{r3, lr}
100124c6:	4802      	ldr	r0, [pc, #8]	; (100124d0 <inv_stop_9x_sensor_fusion+0xc>)
100124c8:	f7f7 fc70 	bl	10009dac <inv_unregister_data_cb>
100124cc:	bd08      	pop	{r3, pc}
100124ce:	46c0      	nop			; (mov r8, r8)
100124d0:	100123b1 	.word	0x100123b1

100124d4 <inv_enable_9x_sensor_fusion>:
100124d4:	b508      	push	{r3, lr}
100124d6:	f7ff ffbd 	bl	10012454 <inv_init_9x_fusion>
100124da:	2194      	movs	r1, #148	; 0x94
100124dc:	2200      	movs	r2, #0
100124de:	4b04      	ldr	r3, [pc, #16]	; (100124f0 <inv_enable_9x_sensor_fusion+0x1c>)
100124e0:	0049      	lsls	r1, r1, #1
100124e2:	505a      	str	r2, [r3, r1]
100124e4:	4803      	ldr	r0, [pc, #12]	; (100124f4 <inv_enable_9x_sensor_fusion+0x20>)
100124e6:	310c      	adds	r1, #12
100124e8:	505a      	str	r2, [r3, r1]
100124ea:	f7f8 fca7 	bl	1000ae3c <inv_register_mpl_start_notification>
100124ee:	bd08      	pop	{r3, pc}
100124f0:	1001e968 	.word	0x1001e968
100124f4:	10011dc9 	.word	0x10011dc9

100124f8 <inv_disable_9x_sensor_fusion>:
100124f8:	b508      	push	{r3, lr}
100124fa:	4802      	ldr	r0, [pc, #8]	; (10012504 <inv_disable_9x_sensor_fusion+0xc>)
100124fc:	f7f8 fc6e 	bl	1000addc <inv_unregister_mpl_start_notification>
10012500:	bd08      	pop	{r3, pc}
10012502:	46c0      	nop			; (mov r8, r8)
10012504:	10011dc9 	.word	0x10011dc9

10012508 <inv_start_gyro_tc>:
10012508:	b508      	push	{r3, lr}
1001250a:	4803      	ldr	r0, [pc, #12]	; (10012518 <inv_start_gyro_tc+0x10>)
1001250c:	2196      	movs	r1, #150	; 0x96
1001250e:	2208      	movs	r2, #8
10012510:	f7f7 fbce 	bl	10009cb0 <inv_register_data_cb>
10012514:	bd08      	pop	{r3, pc}
10012516:	46c0      	nop			; (mov r8, r8)
10012518:	1001251d 	.word	0x1001251d

1001251c <inv_gtc_data_cb>:
1001251c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001251e:	4644      	mov	r4, r8
10012520:	465f      	mov	r7, fp
10012522:	4656      	mov	r6, sl
10012524:	464d      	mov	r5, r9
10012526:	b4f0      	push	{r4, r5, r6, r7}
10012528:	b0b9      	sub	sp, #228	; 0xe4
1001252a:	1c04      	adds	r4, r0, #0
1001252c:	a927      	add	r1, sp, #156	; 0x9c
1001252e:	a829      	add	r0, sp, #164	; 0xa4
10012530:	f7f7 fba8 	bl	10009c84 <inv_get_gyro_bias>
10012534:	a828      	add	r0, sp, #160	; 0xa0
10012536:	f7f8 fb77 	bl	1000ac28 <inv_get_motion_state>
1001253a:	2802      	cmp	r0, #2
1001253c:	d012      	beq.n	10012564 <inv_gtc_data_cb+0x48>
1001253e:	23e4      	movs	r3, #228	; 0xe4
10012540:	4db4      	ldr	r5, [pc, #720]	; (10012814 <inv_gtc_data_cb+0x2f8>)
10012542:	58e4      	ldr	r4, [r4, r3]
10012544:	33cc      	adds	r3, #204	; 0xcc
10012546:	5ceb      	ldrb	r3, [r5, r3]
10012548:	9a27      	ldr	r2, [sp, #156]	; 0x9c
1001254a:	2b00      	cmp	r3, #0
1001254c:	d002      	beq.n	10012554 <inv_gtc_data_cb+0x38>
1001254e:	1aa4      	subs	r4, r4, r2
10012550:	d000      	beq.n	10012554 <inv_gtc_data_cb+0x38>
10012552:	e128      	b.n	100127a6 <inv_gtc_data_cb+0x28a>
10012554:	2000      	movs	r0, #0
10012556:	b039      	add	sp, #228	; 0xe4
10012558:	bc3c      	pop	{r2, r3, r4, r5}
1001255a:	4690      	mov	r8, r2
1001255c:	4699      	mov	r9, r3
1001255e:	46a2      	mov	sl, r4
10012560:	46ab      	mov	fp, r5
10012562:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012564:	6b63      	ldr	r3, [r4, #52]	; 0x34
10012566:	2b03      	cmp	r3, #3
10012568:	d1f4      	bne.n	10012554 <inv_gtc_data_cb+0x38>
1001256a:	f7f7 fb7d 	bl	10009c68 <inv_get_gyro_bias_tc_set>
1001256e:	2800      	cmp	r0, #0
10012570:	d0f0      	beq.n	10012554 <inv_gtc_data_cb+0x38>
10012572:	4ba8      	ldr	r3, [pc, #672]	; (10012814 <inv_gtc_data_cb+0x2f8>)
10012574:	9e27      	ldr	r6, [sp, #156]	; 0x9c
10012576:	4698      	mov	r8, r3
10012578:	23da      	movs	r3, #218	; 0xda
1001257a:	4642      	mov	r2, r8
1001257c:	005b      	lsls	r3, r3, #1
1001257e:	58d0      	ldr	r0, [r2, r3]
10012580:	3304      	adds	r3, #4
10012582:	58d3      	ldr	r3, [r2, r3]
10012584:	1a34      	subs	r4, r6, r0
10012586:	2105      	movs	r1, #5
10012588:	1a18      	subs	r0, r3, r0
1001258a:	f002 fd9d 	bl	100150c8 <__aeabi_idiv>
1001258e:	1c01      	adds	r1, r0, #0
10012590:	1c20      	adds	r0, r4, #0
10012592:	f002 fd99 	bl	100150c8 <__aeabi_idiv>
10012596:	b2c3      	uxtb	r3, r0
10012598:	2b04      	cmp	r3, #4
1001259a:	d8db      	bhi.n	10012554 <inv_gtc_data_cb+0x38>
1001259c:	24ff      	movs	r4, #255	; 0xff
1001259e:	2554      	movs	r5, #84	; 0x54
100125a0:	4643      	mov	r3, r8
100125a2:	4004      	ands	r4, r0
100125a4:	4365      	muls	r5, r4
100125a6:	195f      	adds	r7, r3, r5
100125a8:	1c3a      	adds	r2, r7, #0
100125aa:	3250      	adds	r2, #80	; 0x50
100125ac:	7813      	ldrb	r3, [r2, #0]
100125ae:	2b05      	cmp	r3, #5
100125b0:	d100      	bne.n	100125b4 <inv_gtc_data_cb+0x98>
100125b2:	e1d3      	b.n	1001295c <inv_gtc_data_cb+0x440>
100125b4:	1c59      	adds	r1, r3, #1
100125b6:	7011      	strb	r1, [r2, #0]
100125b8:	0062      	lsls	r2, r4, #1
100125ba:	1914      	adds	r4, r2, r4
100125bc:	00e2      	lsls	r2, r4, #3
100125be:	1b14      	subs	r4, r2, r4
100125c0:	18e3      	adds	r3, r4, r3
100125c2:	1c1a      	adds	r2, r3, #0
100125c4:	4641      	mov	r1, r8
100125c6:	320e      	adds	r2, #14
100125c8:	0092      	lsls	r2, r2, #2
100125ca:	4442      	add	r2, r8
100125cc:	9829      	ldr	r0, [sp, #164]	; 0xa4
100125ce:	6056      	str	r6, [r2, #4]
100125d0:	009a      	lsls	r2, r3, #2
100125d2:	5088      	str	r0, [r1, r2]
100125d4:	1d1a      	adds	r2, r3, #4
100125d6:	992a      	ldr	r1, [sp, #168]	; 0xa8
100125d8:	0092      	lsls	r2, r2, #2
100125da:	4442      	add	r2, r8
100125dc:	6051      	str	r1, [r2, #4]
100125de:	4642      	mov	r2, r8
100125e0:	330a      	adds	r3, #10
100125e2:	992b      	ldr	r1, [sp, #172]	; 0xac
100125e4:	009b      	lsls	r3, r3, #2
100125e6:	50d1      	str	r1, [r2, r3]
100125e8:	2300      	movs	r3, #0
100125ea:	932c      	str	r3, [sp, #176]	; 0xb0
100125ec:	932d      	str	r3, [sp, #180]	; 0xb4
100125ee:	932e      	str	r3, [sp, #184]	; 0xb8
100125f0:	932f      	str	r3, [sp, #188]	; 0xbc
100125f2:	9330      	str	r3, [sp, #192]	; 0xc0
100125f4:	9331      	str	r3, [sp, #196]	; 0xc4
100125f6:	9332      	str	r3, [sp, #200]	; 0xc8
100125f8:	9333      	str	r3, [sp, #204]	; 0xcc
100125fa:	9334      	str	r3, [sp, #208]	; 0xd0
100125fc:	9335      	str	r3, [sp, #212]	; 0xd4
100125fe:	9336      	str	r3, [sp, #216]	; 0xd8
10012600:	9337      	str	r3, [sp, #220]	; 0xdc
10012602:	33c1      	adds	r3, #193	; 0xc1
10012604:	33ff      	adds	r3, #255	; 0xff
10012606:	5cd3      	ldrb	r3, [r2, r3]
10012608:	2b01      	cmp	r3, #1
1001260a:	d1a3      	bne.n	10012554 <inv_gtc_data_cb+0x38>
1001260c:	33b8      	adds	r3, #184	; 0xb8
1001260e:	33ff      	adds	r3, #255	; 0xff
10012610:	58d3      	ldr	r3, [r2, r3]
10012612:	921a      	str	r2, [sp, #104]	; 0x68
10012614:	469a      	mov	sl, r3
10012616:	23da      	movs	r3, #218	; 0xda
10012618:	005b      	lsls	r3, r3, #1
1001261a:	58d3      	ldr	r3, [r2, r3]
1001261c:	931c      	str	r3, [sp, #112]	; 0x70
1001261e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
10012620:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
10012622:	9312      	str	r3, [sp, #72]	; 0x48
10012624:	9413      	str	r4, [sp, #76]	; 0x4c
10012626:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
10012628:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
1001262a:	9310      	str	r3, [sp, #64]	; 0x40
1001262c:	9411      	str	r4, [sp, #68]	; 0x44
1001262e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
10012630:	9c31      	ldr	r4, [sp, #196]	; 0xc4
10012632:	930e      	str	r3, [sp, #56]	; 0x38
10012634:	940f      	str	r4, [sp, #60]	; 0x3c
10012636:	9b32      	ldr	r3, [sp, #200]	; 0xc8
10012638:	9c33      	ldr	r4, [sp, #204]	; 0xcc
1001263a:	9314      	str	r3, [sp, #80]	; 0x50
1001263c:	9415      	str	r4, [sp, #84]	; 0x54
1001263e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
10012640:	9c35      	ldr	r4, [sp, #212]	; 0xd4
10012642:	930c      	str	r3, [sp, #48]	; 0x30
10012644:	940d      	str	r4, [sp, #52]	; 0x34
10012646:	9b36      	ldr	r3, [sp, #216]	; 0xd8
10012648:	9c37      	ldr	r4, [sp, #220]	; 0xdc
1001264a:	930a      	str	r3, [sp, #40]	; 0x28
1001264c:	940b      	str	r4, [sp, #44]	; 0x2c
1001264e:	2300      	movs	r3, #0
10012650:	2400      	movs	r4, #0
10012652:	469b      	mov	fp, r3
10012654:	2300      	movs	r3, #0
10012656:	9316      	str	r3, [sp, #88]	; 0x58
10012658:	9417      	str	r4, [sp, #92]	; 0x5c
1001265a:	9324      	str	r3, [sp, #144]	; 0x90
1001265c:	9318      	str	r3, [sp, #96]	; 0x60
1001265e:	4653      	mov	r3, sl
10012660:	9319      	str	r3, [sp, #100]	; 0x64
10012662:	9b1a      	ldr	r3, [sp, #104]	; 0x68
10012664:	3350      	adds	r3, #80	; 0x50
10012666:	781b      	ldrb	r3, [r3, #0]
10012668:	931d      	str	r3, [sp, #116]	; 0x74
1001266a:	2b00      	cmp	r3, #0
1001266c:	d100      	bne.n	10012670 <inv_gtc_data_cb+0x154>
1001266e:	e0df      	b.n	10012830 <inv_gtc_data_cb+0x314>
10012670:	445b      	add	r3, fp
10012672:	009b      	lsls	r3, r3, #2
10012674:	4443      	add	r3, r8
10012676:	4699      	mov	r9, r3
10012678:	465b      	mov	r3, fp
1001267a:	9325      	str	r3, [sp, #148]	; 0x94
1001267c:	464b      	mov	r3, r9
1001267e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
10012680:	931b      	str	r3, [sp, #108]	; 0x6c
10012682:	46aa      	mov	sl, r5
10012684:	e00b      	b.n	1001269e <inv_gtc_data_cb+0x182>
10012686:	9b1c      	ldr	r3, [sp, #112]	; 0x70
10012688:	454b      	cmp	r3, r9
1001268a:	da01      	bge.n	10012690 <inv_gtc_data_cb+0x174>
1001268c:	464b      	mov	r3, r9
1001268e:	931c      	str	r3, [sp, #112]	; 0x70
10012690:	2304      	movs	r3, #4
10012692:	469c      	mov	ip, r3
10012694:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
10012696:	44e2      	add	sl, ip
10012698:	459a      	cmp	sl, r3
1001269a:	d100      	bne.n	1001269e <inv_gtc_data_cb+0x182>
1001269c:	e0bc      	b.n	10012818 <inv_gtc_data_cb+0x2fc>
1001269e:	4653      	mov	r3, sl
100126a0:	681b      	ldr	r3, [r3, #0]
100126a2:	9304      	str	r3, [sp, #16]
100126a4:	4653      	mov	r3, sl
100126a6:	681b      	ldr	r3, [r3, #0]
100126a8:	17db      	asrs	r3, r3, #31
100126aa:	9305      	str	r3, [sp, #20]
100126ac:	9804      	ldr	r0, [sp, #16]
100126ae:	9905      	ldr	r1, [sp, #20]
100126b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
100126b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
100126b4:	1812      	adds	r2, r2, r0
100126b6:	414b      	adcs	r3, r1
100126b8:	9212      	str	r2, [sp, #72]	; 0x48
100126ba:	9313      	str	r3, [sp, #76]	; 0x4c
100126bc:	4653      	mov	r3, sl
100126be:	695b      	ldr	r3, [r3, #20]
100126c0:	9306      	str	r3, [sp, #24]
100126c2:	4653      	mov	r3, sl
100126c4:	695b      	ldr	r3, [r3, #20]
100126c6:	17db      	asrs	r3, r3, #31
100126c8:	9307      	str	r3, [sp, #28]
100126ca:	9806      	ldr	r0, [sp, #24]
100126cc:	9907      	ldr	r1, [sp, #28]
100126ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
100126d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
100126d2:	1812      	adds	r2, r2, r0
100126d4:	414b      	adcs	r3, r1
100126d6:	9210      	str	r2, [sp, #64]	; 0x40
100126d8:	9311      	str	r3, [sp, #68]	; 0x44
100126da:	4653      	mov	r3, sl
100126dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100126de:	9308      	str	r3, [sp, #32]
100126e0:	4653      	mov	r3, sl
100126e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100126e4:	17db      	asrs	r3, r3, #31
100126e6:	9309      	str	r3, [sp, #36]	; 0x24
100126e8:	9808      	ldr	r0, [sp, #32]
100126ea:	9909      	ldr	r1, [sp, #36]	; 0x24
100126ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
100126ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100126f0:	1812      	adds	r2, r2, r0
100126f2:	414b      	adcs	r3, r1
100126f4:	9804      	ldr	r0, [sp, #16]
100126f6:	9905      	ldr	r1, [sp, #20]
100126f8:	920e      	str	r2, [sp, #56]	; 0x38
100126fa:	930f      	str	r3, [sp, #60]	; 0x3c
100126fc:	4653      	mov	r3, sl
100126fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10012700:	4699      	mov	r9, r3
10012702:	9b18      	ldr	r3, [sp, #96]	; 0x60
10012704:	464a      	mov	r2, r9
10012706:	444b      	add	r3, r9
10012708:	9318      	str	r3, [sp, #96]	; 0x60
1001270a:	464b      	mov	r3, r9
1001270c:	17db      	asrs	r3, r3, #31
1001270e:	469b      	mov	fp, r3
10012710:	f002 fe62 	bl	100153d8 <__aeabi_lmul>
10012714:	040b      	lsls	r3, r1, #16
10012716:	0c02      	lsrs	r2, r0, #16
10012718:	431a      	orrs	r2, r3
1001271a:	140b      	asrs	r3, r1, #16
1001271c:	9200      	str	r2, [sp, #0]
1001271e:	9301      	str	r3, [sp, #4]
10012720:	9800      	ldr	r0, [sp, #0]
10012722:	9901      	ldr	r1, [sp, #4]
10012724:	9a14      	ldr	r2, [sp, #80]	; 0x50
10012726:	9b15      	ldr	r3, [sp, #84]	; 0x54
10012728:	1812      	adds	r2, r2, r0
1001272a:	414b      	adcs	r3, r1
1001272c:	9806      	ldr	r0, [sp, #24]
1001272e:	9907      	ldr	r1, [sp, #28]
10012730:	9214      	str	r2, [sp, #80]	; 0x50
10012732:	9315      	str	r3, [sp, #84]	; 0x54
10012734:	464a      	mov	r2, r9
10012736:	465b      	mov	r3, fp
10012738:	f002 fe4e 	bl	100153d8 <__aeabi_lmul>
1001273c:	040b      	lsls	r3, r1, #16
1001273e:	0c02      	lsrs	r2, r0, #16
10012740:	431a      	orrs	r2, r3
10012742:	140b      	asrs	r3, r1, #16
10012744:	9202      	str	r2, [sp, #8]
10012746:	9303      	str	r3, [sp, #12]
10012748:	9802      	ldr	r0, [sp, #8]
1001274a:	9903      	ldr	r1, [sp, #12]
1001274c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1001274e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10012750:	1812      	adds	r2, r2, r0
10012752:	414b      	adcs	r3, r1
10012754:	9808      	ldr	r0, [sp, #32]
10012756:	9909      	ldr	r1, [sp, #36]	; 0x24
10012758:	920c      	str	r2, [sp, #48]	; 0x30
1001275a:	930d      	str	r3, [sp, #52]	; 0x34
1001275c:	464a      	mov	r2, r9
1001275e:	465b      	mov	r3, fp
10012760:	f002 fe3a 	bl	100153d8 <__aeabi_lmul>
10012764:	040b      	lsls	r3, r1, #16
10012766:	0c06      	lsrs	r6, r0, #16
10012768:	431e      	orrs	r6, r3
1001276a:	140f      	asrs	r7, r1, #16
1001276c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1001276e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10012770:	1992      	adds	r2, r2, r6
10012772:	417b      	adcs	r3, r7
10012774:	4648      	mov	r0, r9
10012776:	920a      	str	r2, [sp, #40]	; 0x28
10012778:	930b      	str	r3, [sp, #44]	; 0x2c
1001277a:	4659      	mov	r1, fp
1001277c:	464a      	mov	r2, r9
1001277e:	465b      	mov	r3, fp
10012780:	f002 fe2a 	bl	100153d8 <__aeabi_lmul>
10012784:	040b      	lsls	r3, r1, #16
10012786:	0c04      	lsrs	r4, r0, #16
10012788:	431c      	orrs	r4, r3
1001278a:	140d      	asrs	r5, r1, #16
1001278c:	9a16      	ldr	r2, [sp, #88]	; 0x58
1001278e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
10012790:	1912      	adds	r2, r2, r4
10012792:	416b      	adcs	r3, r5
10012794:	9216      	str	r2, [sp, #88]	; 0x58
10012796:	9317      	str	r3, [sp, #92]	; 0x5c
10012798:	9b19      	ldr	r3, [sp, #100]	; 0x64
1001279a:	4599      	cmp	r9, r3
1001279c:	db00      	blt.n	100127a0 <inv_gtc_data_cb+0x284>
1001279e:	e772      	b.n	10012686 <inv_gtc_data_cb+0x16a>
100127a0:	464b      	mov	r3, r9
100127a2:	9319      	str	r3, [sp, #100]	; 0x64
100127a4:	e774      	b.n	10012690 <inv_gtc_data_cb+0x174>
100127a6:	23d2      	movs	r3, #210	; 0xd2
100127a8:	005b      	lsls	r3, r3, #1
100127aa:	58ea      	ldr	r2, [r5, r3]
100127ac:	17e6      	asrs	r6, r4, #31
100127ae:	17d3      	asrs	r3, r2, #31
100127b0:	1c20      	adds	r0, r4, #0
100127b2:	1c31      	adds	r1, r6, #0
100127b4:	f002 fe10 	bl	100153d8 <__aeabi_lmul>
100127b8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
100127ba:	0409      	lsls	r1, r1, #16
100127bc:	469c      	mov	ip, r3
100127be:	9300      	str	r3, [sp, #0]
100127c0:	23d4      	movs	r3, #212	; 0xd4
100127c2:	0c00      	lsrs	r0, r0, #16
100127c4:	005b      	lsls	r3, r3, #1
100127c6:	58ea      	ldr	r2, [r5, r3]
100127c8:	4308      	orrs	r0, r1
100127ca:	4460      	add	r0, ip
100127cc:	9029      	str	r0, [sp, #164]	; 0xa4
100127ce:	17d3      	asrs	r3, r2, #31
100127d0:	1c20      	adds	r0, r4, #0
100127d2:	1c31      	adds	r1, r6, #0
100127d4:	f002 fe00 	bl	100153d8 <__aeabi_lmul>
100127d8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
100127da:	0409      	lsls	r1, r1, #16
100127dc:	469c      	mov	ip, r3
100127de:	9300      	str	r3, [sp, #0]
100127e0:	23d6      	movs	r3, #214	; 0xd6
100127e2:	0c00      	lsrs	r0, r0, #16
100127e4:	005b      	lsls	r3, r3, #1
100127e6:	58ea      	ldr	r2, [r5, r3]
100127e8:	4308      	orrs	r0, r1
100127ea:	4460      	add	r0, ip
100127ec:	902a      	str	r0, [sp, #168]	; 0xa8
100127ee:	17d3      	asrs	r3, r2, #31
100127f0:	1c20      	adds	r0, r4, #0
100127f2:	1c31      	adds	r1, r6, #0
100127f4:	f002 fdf0 	bl	100153d8 <__aeabi_lmul>
100127f8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
100127fa:	0409      	lsls	r1, r1, #16
100127fc:	469c      	mov	ip, r3
100127fe:	0c00      	lsrs	r0, r0, #16
10012800:	4308      	orrs	r0, r1
10012802:	4460      	add	r0, ip
10012804:	902b      	str	r0, [sp, #172]	; 0xac
10012806:	2103      	movs	r1, #3
10012808:	a829      	add	r0, sp, #164	; 0xa4
1001280a:	9300      	str	r3, [sp, #0]
1001280c:	f7f7 f9e2 	bl	10009bd4 <inv_set_gyro_bias>
10012810:	e6a0      	b.n	10012554 <inv_gtc_data_cb+0x38>
10012812:	46c0      	nop			; (mov r8, r8)
10012814:	1001d210 	.word	0x1001d210
10012818:	9a24      	ldr	r2, [sp, #144]	; 0x90
1001281a:	9b25      	ldr	r3, [sp, #148]	; 0x94
1001281c:	4694      	mov	ip, r2
1001281e:	469b      	mov	fp, r3
10012820:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10012822:	9620      	str	r6, [sp, #128]	; 0x80
10012824:	9721      	str	r7, [sp, #132]	; 0x84
10012826:	4463      	add	r3, ip
10012828:	9422      	str	r4, [sp, #136]	; 0x88
1001282a:	9523      	str	r5, [sp, #140]	; 0x8c
1001282c:	b2db      	uxtb	r3, r3
1001282e:	9324      	str	r3, [sp, #144]	; 0x90
10012830:	9b1a      	ldr	r3, [sp, #104]	; 0x68
10012832:	3354      	adds	r3, #84	; 0x54
10012834:	931a      	str	r3, [sp, #104]	; 0x68
10012836:	2315      	movs	r3, #21
10012838:	469c      	mov	ip, r3
1001283a:	44e3      	add	fp, ip
1001283c:	465b      	mov	r3, fp
1001283e:	2b69      	cmp	r3, #105	; 0x69
10012840:	d000      	beq.n	10012844 <inv_gtc_data_cb+0x328>
10012842:	e70e      	b.n	10012662 <inv_gtc_data_cb+0x146>
10012844:	9b18      	ldr	r3, [sp, #96]	; 0x60
10012846:	4641      	mov	r1, r8
10012848:	4699      	mov	r9, r3
1001284a:	9b19      	ldr	r3, [sp, #100]	; 0x64
1001284c:	469a      	mov	sl, r3
1001284e:	9b12      	ldr	r3, [sp, #72]	; 0x48
10012850:	9c13      	ldr	r4, [sp, #76]	; 0x4c
10012852:	4652      	mov	r2, sl
10012854:	932c      	str	r3, [sp, #176]	; 0xb0
10012856:	942d      	str	r4, [sp, #180]	; 0xb4
10012858:	9b10      	ldr	r3, [sp, #64]	; 0x40
1001285a:	9c11      	ldr	r4, [sp, #68]	; 0x44
1001285c:	932e      	str	r3, [sp, #184]	; 0xb8
1001285e:	942f      	str	r4, [sp, #188]	; 0xbc
10012860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10012862:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
10012864:	9330      	str	r3, [sp, #192]	; 0xc0
10012866:	9431      	str	r4, [sp, #196]	; 0xc4
10012868:	9b14      	ldr	r3, [sp, #80]	; 0x50
1001286a:	9c15      	ldr	r4, [sp, #84]	; 0x54
1001286c:	9332      	str	r3, [sp, #200]	; 0xc8
1001286e:	9433      	str	r4, [sp, #204]	; 0xcc
10012870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10012872:	9c0d      	ldr	r4, [sp, #52]	; 0x34
10012874:	9334      	str	r3, [sp, #208]	; 0xd0
10012876:	9435      	str	r4, [sp, #212]	; 0xd4
10012878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1001287a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
1001287c:	9336      	str	r3, [sp, #216]	; 0xd8
1001287e:	9437      	str	r4, [sp, #220]	; 0xdc
10012880:	9b1c      	ldr	r3, [sp, #112]	; 0x70
10012882:	1a9b      	subs	r3, r3, r2
10012884:	22de      	movs	r2, #222	; 0xde
10012886:	0052      	lsls	r2, r2, #1
10012888:	588a      	ldr	r2, [r1, r2]
1001288a:	4293      	cmp	r3, r2
1001288c:	da00      	bge.n	10012890 <inv_gtc_data_cb+0x374>
1001288e:	e661      	b.n	10012554 <inv_gtc_data_cb+0x38>
10012890:	9816      	ldr	r0, [sp, #88]	; 0x58
10012892:	9917      	ldr	r1, [sp, #92]	; 0x5c
10012894:	464b      	mov	r3, r9
10012896:	17db      	asrs	r3, r3, #31
10012898:	1c1e      	adds	r6, r3, #0
1001289a:	9304      	str	r3, [sp, #16]
1001289c:	9a24      	ldr	r2, [sp, #144]	; 0x90
1001289e:	2300      	movs	r3, #0
100128a0:	f002 fd9a 	bl	100153d8 <__aeabi_lmul>
100128a4:	1c04      	adds	r4, r0, #0
100128a6:	1c0d      	adds	r5, r1, #0
100128a8:	1c33      	adds	r3, r6, #0
100128aa:	1c31      	adds	r1, r6, #0
100128ac:	4648      	mov	r0, r9
100128ae:	464a      	mov	r2, r9
100128b0:	9400      	str	r4, [sp, #0]
100128b2:	9501      	str	r5, [sp, #4]
100128b4:	f002 fd90 	bl	100153d8 <__aeabi_lmul>
100128b8:	040b      	lsls	r3, r1, #16
100128ba:	0c06      	lsrs	r6, r0, #16
100128bc:	431e      	orrs	r6, r3
100128be:	23d2      	movs	r3, #210	; 0xd2
100128c0:	005b      	lsls	r3, r3, #1
100128c2:	4443      	add	r3, r8
100128c4:	469b      	mov	fp, r3
100128c6:	2300      	movs	r3, #0
100128c8:	469a      	mov	sl, r3
100128ca:	1c23      	adds	r3, r4, #0
100128cc:	1c2c      	adds	r4, r5, #0
100128ce:	140f      	asrs	r7, r1, #16
100128d0:	1b9b      	subs	r3, r3, r6
100128d2:	41bc      	sbcs	r4, r7
100128d4:	9602      	str	r6, [sp, #8]
100128d6:	9703      	str	r7, [sp, #12]
100128d8:	9306      	str	r3, [sp, #24]
100128da:	9407      	str	r4, [sp, #28]
100128dc:	ab32      	add	r3, sp, #200	; 0xc8
100128de:	4453      	add	r3, sl
100128e0:	6818      	ldr	r0, [r3, #0]
100128e2:	6859      	ldr	r1, [r3, #4]
100128e4:	ab2c      	add	r3, sp, #176	; 0xb0
100128e6:	4453      	add	r3, sl
100128e8:	681e      	ldr	r6, [r3, #0]
100128ea:	685f      	ldr	r7, [r3, #4]
100128ec:	9a02      	ldr	r2, [sp, #8]
100128ee:	9b00      	ldr	r3, [sp, #0]
100128f0:	4293      	cmp	r3, r2
100128f2:	d02e      	beq.n	10012952 <inv_gtc_data_cb+0x436>
100128f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
100128f6:	2300      	movs	r3, #0
100128f8:	f002 fd6e 	bl	100153d8 <__aeabi_lmul>
100128fc:	464a      	mov	r2, r9
100128fe:	1c04      	adds	r4, r0, #0
10012900:	1c0d      	adds	r5, r1, #0
10012902:	9b04      	ldr	r3, [sp, #16]
10012904:	1c30      	adds	r0, r6, #0
10012906:	1c39      	adds	r1, r7, #0
10012908:	f002 fd66 	bl	100153d8 <__aeabi_lmul>
1001290c:	040b      	lsls	r3, r1, #16
1001290e:	0c02      	lsrs	r2, r0, #16
10012910:	431a      	orrs	r2, r3
10012912:	140b      	asrs	r3, r1, #16
10012914:	921e      	str	r2, [sp, #120]	; 0x78
10012916:	931f      	str	r3, [sp, #124]	; 0x7c
10012918:	9a1e      	ldr	r2, [sp, #120]	; 0x78
1001291a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1001291c:	1aa4      	subs	r4, r4, r2
1001291e:	419d      	sbcs	r5, r3
10012920:	0c23      	lsrs	r3, r4, #16
10012922:	0429      	lsls	r1, r5, #16
10012924:	4319      	orrs	r1, r3
10012926:	0420      	lsls	r0, r4, #16
10012928:	9a06      	ldr	r2, [sp, #24]
1001292a:	9b07      	ldr	r3, [sp, #28]
1001292c:	f002 fd30 	bl	10015390 <__aeabi_ldivmod>
10012930:	465b      	mov	r3, fp
10012932:	6018      	str	r0, [r3, #0]
10012934:	2308      	movs	r3, #8
10012936:	469c      	mov	ip, r3
10012938:	3b04      	subs	r3, #4
1001293a:	44e2      	add	sl, ip
1001293c:	469c      	mov	ip, r3
1001293e:	4653      	mov	r3, sl
10012940:	44e3      	add	fp, ip
10012942:	2b18      	cmp	r3, #24
10012944:	d1ca      	bne.n	100128dc <inv_gtc_data_cb+0x3c0>
10012946:	2201      	movs	r2, #1
10012948:	4641      	mov	r1, r8
1001294a:	3399      	adds	r3, #153	; 0x99
1001294c:	33ff      	adds	r3, #255	; 0xff
1001294e:	54ca      	strb	r2, [r1, r3]
10012950:	e600      	b.n	10012554 <inv_gtc_data_cb+0x38>
10012952:	9b01      	ldr	r3, [sp, #4]
10012954:	9a03      	ldr	r2, [sp, #12]
10012956:	4293      	cmp	r3, r2
10012958:	d1cc      	bne.n	100128f4 <inv_gtc_data_cb+0x3d8>
1001295a:	e7eb      	b.n	10012934 <inv_gtc_data_cb+0x418>
1001295c:	4643      	mov	r3, r8
1001295e:	1958      	adds	r0, r3, r5
10012960:	1959      	adds	r1, r3, r5
10012962:	3140      	adds	r1, #64	; 0x40
10012964:	2210      	movs	r2, #16
10012966:	303c      	adds	r0, #60	; 0x3c
10012968:	f005 fcba 	bl	100182e0 <memmove>
1001296c:	1d29      	adds	r1, r5, #4
1001296e:	4441      	add	r1, r8
10012970:	2210      	movs	r2, #16
10012972:	1c38      	adds	r0, r7, #0
10012974:	f005 fcb4 	bl	100182e0 <memmove>
10012978:	4643      	mov	r3, r8
1001297a:	1958      	adds	r0, r3, r5
1001297c:	1959      	adds	r1, r3, r5
1001297e:	3118      	adds	r1, #24
10012980:	2210      	movs	r2, #16
10012982:	3014      	adds	r0, #20
10012984:	f005 fcac 	bl	100182e0 <memmove>
10012988:	1c28      	adds	r0, r5, #0
1001298a:	1c29      	adds	r1, r5, #0
1001298c:	3028      	adds	r0, #40	; 0x28
1001298e:	312c      	adds	r1, #44	; 0x2c
10012990:	4440      	add	r0, r8
10012992:	4441      	add	r1, r8
10012994:	2210      	movs	r2, #16
10012996:	f005 fca3 	bl	100182e0 <memmove>
1001299a:	2304      	movs	r3, #4
1001299c:	e60c      	b.n	100125b8 <inv_gtc_data_cb+0x9c>
1001299e:	46c0      	nop			; (mov r8, r8)

100129a0 <inv_gtc_store>:
100129a0:	b5f0      	push	{r4, r5, r6, r7, lr}
100129a2:	4a09      	ldr	r2, [pc, #36]	; (100129c8 <inv_gtc_store+0x28>)
100129a4:	b085      	sub	sp, #20
100129a6:	1c13      	adds	r3, r2, #0
100129a8:	466c      	mov	r4, sp
100129aa:	33a5      	adds	r3, #165	; 0xa5
100129ac:	33ff      	adds	r3, #255	; 0xff
100129ae:	cbe0      	ldmia	r3!, {r5, r6, r7}
100129b0:	c4e0      	stmia	r4!, {r5, r6, r7}
100129b2:	23d8      	movs	r3, #216	; 0xd8
100129b4:	4669      	mov	r1, sp
100129b6:	005b      	lsls	r3, r3, #1
100129b8:	5cd3      	ldrb	r3, [r2, r3]
100129ba:	2210      	movs	r2, #16
100129bc:	730b      	strb	r3, [r1, #12]
100129be:	f005 fc86 	bl	100182ce <memcpy>
100129c2:	2000      	movs	r0, #0
100129c4:	b005      	add	sp, #20
100129c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100129c8:	1001d210 	.word	0x1001d210

100129cc <inv_gtc_load>:
100129cc:	b570      	push	{r4, r5, r6, lr}
100129ce:	b084      	sub	sp, #16
100129d0:	1c01      	adds	r1, r0, #0
100129d2:	2210      	movs	r2, #16
100129d4:	4668      	mov	r0, sp
100129d6:	f005 fc7a 	bl	100182ce <memcpy>
100129da:	4a07      	ldr	r2, [pc, #28]	; (100129f8 <inv_gtc_load+0x2c>)
100129dc:	4669      	mov	r1, sp
100129de:	1c13      	adds	r3, r2, #0
100129e0:	33a5      	adds	r3, #165	; 0xa5
100129e2:	466c      	mov	r4, sp
100129e4:	33ff      	adds	r3, #255	; 0xff
100129e6:	c961      	ldmia	r1!, {r0, r5, r6}
100129e8:	c361      	stmia	r3!, {r0, r5, r6}
100129ea:	23d8      	movs	r3, #216	; 0xd8
100129ec:	2000      	movs	r0, #0
100129ee:	7b21      	ldrb	r1, [r4, #12]
100129f0:	005b      	lsls	r3, r3, #1
100129f2:	54d1      	strb	r1, [r2, r3]
100129f4:	b004      	add	sp, #16
100129f6:	bd70      	pop	{r4, r5, r6, pc}
100129f8:	1001d210 	.word	0x1001d210

100129fc <inv_init_gyro_ts>:
100129fc:	22e2      	movs	r2, #226	; 0xe2
100129fe:	b510      	push	{r4, lr}
10012a00:	4c0b      	ldr	r4, [pc, #44]	; (10012a30 <inv_init_gyro_ts+0x34>)
10012a02:	2100      	movs	r1, #0
10012a04:	1c20      	adds	r0, r4, #0
10012a06:	0052      	lsls	r2, r2, #1
10012a08:	f005 fc7f 	bl	1001830a <memset>
10012a0c:	23da      	movs	r3, #218	; 0xda
10012a0e:	4a09      	ldr	r2, [pc, #36]	; (10012a34 <inv_init_gyro_ts+0x38>)
10012a10:	005b      	lsls	r3, r3, #1
10012a12:	50e2      	str	r2, [r4, r3]
10012a14:	22aa      	movs	r2, #170	; 0xaa
10012a16:	3304      	adds	r3, #4
10012a18:	03d2      	lsls	r2, r2, #15
10012a1a:	50e2      	str	r2, [r4, r3]
10012a1c:	22a0      	movs	r2, #160	; 0xa0
10012a1e:	3304      	adds	r3, #4
10012a20:	02d2      	lsls	r2, r2, #11
10012a22:	50e2      	str	r2, [r4, r3]
10012a24:	2201      	movs	r2, #1
10012a26:	3304      	adds	r3, #4
10012a28:	2000      	movs	r0, #0
10012a2a:	54e2      	strb	r2, [r4, r3]
10012a2c:	bd10      	pop	{r4, pc}
10012a2e:	46c0      	nop			; (mov r8, r8)
10012a30:	1001d210 	.word	0x1001d210
10012a34:	ffd80000 	.word	0xffd80000

10012a38 <inv_set_gtc_max_temp>:
10012a38:	23dc      	movs	r3, #220	; 0xdc
10012a3a:	4a02      	ldr	r2, [pc, #8]	; (10012a44 <inv_set_gtc_max_temp+0xc>)
10012a3c:	005b      	lsls	r3, r3, #1
10012a3e:	50d0      	str	r0, [r2, r3]
10012a40:	2000      	movs	r0, #0
10012a42:	4770      	bx	lr
10012a44:	1001d210 	.word	0x1001d210

10012a48 <inv_set_gtc_min_temp>:
10012a48:	23da      	movs	r3, #218	; 0xda
10012a4a:	4a02      	ldr	r2, [pc, #8]	; (10012a54 <inv_set_gtc_min_temp+0xc>)
10012a4c:	005b      	lsls	r3, r3, #1
10012a4e:	50d0      	str	r0, [r2, r3]
10012a50:	2000      	movs	r0, #0
10012a52:	4770      	bx	lr
10012a54:	1001d210 	.word	0x1001d210

10012a58 <inv_set_gtc_min_diff>:
10012a58:	23de      	movs	r3, #222	; 0xde
10012a5a:	4a02      	ldr	r2, [pc, #8]	; (10012a64 <inv_set_gtc_min_diff+0xc>)
10012a5c:	005b      	lsls	r3, r3, #1
10012a5e:	50d0      	str	r0, [r2, r3]
10012a60:	2000      	movs	r0, #0
10012a62:	4770      	bx	lr
10012a64:	1001d210 	.word	0x1001d210

10012a68 <inv_get_gyro_ts>:
10012a68:	2800      	cmp	r0, #0
10012a6a:	d00e      	beq.n	10012a8a <inv_get_gyro_ts+0x22>
10012a6c:	22d2      	movs	r2, #210	; 0xd2
10012a6e:	4b08      	ldr	r3, [pc, #32]	; (10012a90 <inv_get_gyro_ts+0x28>)
10012a70:	0052      	lsls	r2, r2, #1
10012a72:	589a      	ldr	r2, [r3, r2]
10012a74:	6002      	str	r2, [r0, #0]
10012a76:	22d4      	movs	r2, #212	; 0xd4
10012a78:	0052      	lsls	r2, r2, #1
10012a7a:	589a      	ldr	r2, [r3, r2]
10012a7c:	6042      	str	r2, [r0, #4]
10012a7e:	22d6      	movs	r2, #214	; 0xd6
10012a80:	0052      	lsls	r2, r2, #1
10012a82:	589b      	ldr	r3, [r3, r2]
10012a84:	6083      	str	r3, [r0, #8]
10012a86:	2000      	movs	r0, #0
10012a88:	4770      	bx	lr
10012a8a:	2016      	movs	r0, #22
10012a8c:	e7fc      	b.n	10012a88 <inv_get_gyro_ts+0x20>
10012a8e:	46c0      	nop			; (mov r8, r8)
10012a90:	1001d210 	.word	0x1001d210

10012a94 <inv_set_gyro_ts>:
10012a94:	2024      	movs	r0, #36	; 0x24
10012a96:	4770      	bx	lr

10012a98 <inv_set_gtc_order>:
10012a98:	2324      	movs	r3, #36	; 0x24
10012a9a:	2800      	cmp	r0, #0
10012a9c:	d101      	bne.n	10012aa2 <inv_set_gtc_order+0xa>
10012a9e:	1c18      	adds	r0, r3, #0
10012aa0:	4770      	bx	lr
10012aa2:	339d      	adds	r3, #157	; 0x9d
10012aa4:	4a02      	ldr	r2, [pc, #8]	; (10012ab0 <inv_set_gtc_order+0x18>)
10012aa6:	33ff      	adds	r3, #255	; 0xff
10012aa8:	54d0      	strb	r0, [r2, r3]
10012aaa:	2300      	movs	r3, #0
10012aac:	e7f7      	b.n	10012a9e <inv_set_gtc_order+0x6>
10012aae:	46c0      	nop			; (mov r8, r8)
10012ab0:	1001d210 	.word	0x1001d210

10012ab4 <inv_print_gtc_data>:
10012ab4:	2000      	movs	r0, #0
10012ab6:	4770      	bx	lr

10012ab8 <inv_stop_gyro_tc>:
10012ab8:	b508      	push	{r3, lr}
10012aba:	4802      	ldr	r0, [pc, #8]	; (10012ac4 <inv_stop_gyro_tc+0xc>)
10012abc:	f7f7 f976 	bl	10009dac <inv_unregister_data_cb>
10012ac0:	bd08      	pop	{r3, pc}
10012ac2:	46c0      	nop			; (mov r8, r8)
10012ac4:	1001251d 	.word	0x1001251d

10012ac8 <inv_enable_gyro_tc>:
10012ac8:	b508      	push	{r3, lr}
10012aca:	f7ff ff97 	bl	100129fc <inv_init_gyro_ts>
10012ace:	239a      	movs	r3, #154	; 0x9a
10012ad0:	480a      	ldr	r0, [pc, #40]	; (10012afc <inv_enable_gyro_tc+0x34>)
10012ad2:	490b      	ldr	r1, [pc, #44]	; (10012b00 <inv_enable_gyro_tc+0x38>)
10012ad4:	2210      	movs	r2, #16
10012ad6:	005b      	lsls	r3, r3, #1
10012ad8:	f7f8 f9ea 	bl	1000aeb0 <inv_register_load_store>
10012adc:	2800      	cmp	r0, #0
10012ade:	d001      	beq.n	10012ae4 <inv_enable_gyro_tc+0x1c>
10012ae0:	2001      	movs	r0, #1
10012ae2:	bd08      	pop	{r3, pc}
10012ae4:	4807      	ldr	r0, [pc, #28]	; (10012b04 <inv_enable_gyro_tc+0x3c>)
10012ae6:	f7f8 f9a9 	bl	1000ae3c <inv_register_mpl_start_notification>
10012aea:	2800      	cmp	r0, #0
10012aec:	d1f8      	bne.n	10012ae0 <inv_enable_gyro_tc+0x18>
10012aee:	23b2      	movs	r3, #178	; 0xb2
10012af0:	2101      	movs	r1, #1
10012af2:	4a05      	ldr	r2, [pc, #20]	; (10012b08 <inv_enable_gyro_tc+0x40>)
10012af4:	33ff      	adds	r3, #255	; 0xff
10012af6:	54d1      	strb	r1, [r2, r3]
10012af8:	e7f3      	b.n	10012ae2 <inv_enable_gyro_tc+0x1a>
10012afa:	46c0      	nop			; (mov r8, r8)
10012afc:	100129cd 	.word	0x100129cd
10012b00:	100129a1 	.word	0x100129a1
10012b04:	10012509 	.word	0x10012509
10012b08:	1001d210 	.word	0x1001d210

10012b0c <inv_disable_gyro_tc>:
10012b0c:	b538      	push	{r3, r4, r5, lr}
10012b0e:	24b2      	movs	r4, #178	; 0xb2
10012b10:	4d09      	ldr	r5, [pc, #36]	; (10012b38 <inv_disable_gyro_tc+0x2c>)
10012b12:	34ff      	adds	r4, #255	; 0xff
10012b14:	5d2b      	ldrb	r3, [r5, r4]
10012b16:	2000      	movs	r0, #0
10012b18:	2b00      	cmp	r3, #0
10012b1a:	d100      	bne.n	10012b1e <inv_disable_gyro_tc+0x12>
10012b1c:	bd38      	pop	{r3, r4, r5, pc}
10012b1e:	4807      	ldr	r0, [pc, #28]	; (10012b3c <inv_disable_gyro_tc+0x30>)
10012b20:	f7f7 f944 	bl	10009dac <inv_unregister_data_cb>
10012b24:	4806      	ldr	r0, [pc, #24]	; (10012b40 <inv_disable_gyro_tc+0x34>)
10012b26:	f7f8 f959 	bl	1000addc <inv_unregister_mpl_start_notification>
10012b2a:	1c03      	adds	r3, r0, #0
10012b2c:	2001      	movs	r0, #1
10012b2e:	2b00      	cmp	r3, #0
10012b30:	d1f4      	bne.n	10012b1c <inv_disable_gyro_tc+0x10>
10012b32:	552b      	strb	r3, [r5, r4]
10012b34:	2000      	movs	r0, #0
10012b36:	e7f1      	b.n	10012b1c <inv_disable_gyro_tc+0x10>
10012b38:	1001d210 	.word	0x1001d210
10012b3c:	1001251d 	.word	0x1001251d
10012b40:	10012509 	.word	0x10012509

10012b44 <inv_start_magnetic_disturbance>:
10012b44:	2196      	movs	r1, #150	; 0x96
10012b46:	b508      	push	{r3, lr}
10012b48:	4802      	ldr	r0, [pc, #8]	; (10012b54 <inv_start_magnetic_disturbance+0x10>)
10012b4a:	0049      	lsls	r1, r1, #1
10012b4c:	2204      	movs	r2, #4
10012b4e:	f7f7 f8af 	bl	10009cb0 <inv_register_data_cb>
10012b52:	bd08      	pop	{r3, pc}
10012b54:	10013171 	.word	0x10013171

10012b58 <inv_set_magnetic_disturbance>:
10012b58:	2800      	cmp	r0, #0
10012b5a:	dd05      	ble.n	10012b68 <inv_set_magnetic_disturbance+0x10>
10012b5c:	2284      	movs	r2, #132	; 0x84
10012b5e:	2101      	movs	r1, #1
10012b60:	4b02      	ldr	r3, [pc, #8]	; (10012b6c <inv_set_magnetic_disturbance+0x14>)
10012b62:	5099      	str	r1, [r3, r2]
10012b64:	3a04      	subs	r2, #4
10012b66:	5098      	str	r0, [r3, r2]
10012b68:	2000      	movs	r0, #0
10012b6a:	4770      	bx	lr
10012b6c:	1001d3d4 	.word	0x1001d3d4

10012b70 <inv_init_magnetic_disturbance>:
10012b70:	b510      	push	{r4, lr}
10012b72:	4c0c      	ldr	r4, [pc, #48]	; (10012ba4 <inv_init_magnetic_disturbance+0x34>)
10012b74:	2100      	movs	r1, #0
10012b76:	1c20      	adds	r0, r4, #0
10012b78:	22b8      	movs	r2, #184	; 0xb8
10012b7a:	f005 fbc6 	bl	1001830a <memset>
10012b7e:	4b0a      	ldr	r3, [pc, #40]	; (10012ba8 <inv_init_magnetic_disturbance+0x38>)
10012b80:	4a0a      	ldr	r2, [pc, #40]	; (10012bac <inv_init_magnetic_disturbance+0x3c>)
10012b82:	60e3      	str	r3, [r4, #12]
10012b84:	4b0a      	ldr	r3, [pc, #40]	; (10012bb0 <inv_init_magnetic_disturbance+0x40>)
10012b86:	2000      	movs	r0, #0
10012b88:	60a3      	str	r3, [r4, #8]
10012b8a:	4b0a      	ldr	r3, [pc, #40]	; (10012bb4 <inv_init_magnetic_disturbance+0x44>)
10012b8c:	6023      	str	r3, [r4, #0]
10012b8e:	4b0a      	ldr	r3, [pc, #40]	; (10012bb8 <inv_init_magnetic_disturbance+0x48>)
10012b90:	6063      	str	r3, [r4, #4]
10012b92:	2380      	movs	r3, #128	; 0x80
10012b94:	05db      	lsls	r3, r3, #23
10012b96:	6663      	str	r3, [r4, #100]	; 0x64
10012b98:	23fa      	movs	r3, #250	; 0xfa
10012b9a:	00db      	lsls	r3, r3, #3
10012b9c:	67e3      	str	r3, [r4, #124]	; 0x7c
10012b9e:	239c      	movs	r3, #156	; 0x9c
10012ba0:	50e2      	str	r2, [r4, r3]
10012ba2:	bd10      	pop	{r4, pc}
10012ba4:	1001d3d4 	.word	0x1001d3d4
10012ba8:	42b40000 	.word	0x42b40000
10012bac:	3e2e147b 	.word	0x3e2e147b
10012bb0:	c2b40000 	.word	0xc2b40000
10012bb4:	42700000 	.word	0x42700000
10012bb8:	41f00000 	.word	0x41f00000

10012bbc <inv_stop_magnetic_disturbance>:
10012bbc:	b508      	push	{r3, lr}
10012bbe:	4802      	ldr	r0, [pc, #8]	; (10012bc8 <inv_stop_magnetic_disturbance+0xc>)
10012bc0:	f7f7 f8f4 	bl	10009dac <inv_unregister_data_cb>
10012bc4:	bd08      	pop	{r3, pc}
10012bc6:	46c0      	nop			; (mov r8, r8)
10012bc8:	10013171 	.word	0x10013171

10012bcc <inv_enable_magnetic_disturbance>:
10012bcc:	b508      	push	{r3, lr}
10012bce:	f7ff ffcf 	bl	10012b70 <inv_init_magnetic_disturbance>
10012bd2:	2800      	cmp	r0, #0
10012bd4:	d108      	bne.n	10012be8 <inv_enable_magnetic_disturbance+0x1c>
10012bd6:	228c      	movs	r2, #140	; 0x8c
10012bd8:	2101      	movs	r1, #1
10012bda:	4b04      	ldr	r3, [pc, #16]	; (10012bec <inv_enable_magnetic_disturbance+0x20>)
10012bdc:	5098      	str	r0, [r3, r2]
10012bde:	3a04      	subs	r2, #4
10012be0:	4803      	ldr	r0, [pc, #12]	; (10012bf0 <inv_enable_magnetic_disturbance+0x24>)
10012be2:	5099      	str	r1, [r3, r2]
10012be4:	f7f8 f92a 	bl	1000ae3c <inv_register_mpl_start_notification>
10012be8:	bd08      	pop	{r3, pc}
10012bea:	46c0      	nop			; (mov r8, r8)
10012bec:	1001d3d4 	.word	0x1001d3d4
10012bf0:	10012b45 	.word	0x10012b45

10012bf4 <inv_disable_magnetic_disturbance>:
10012bf4:	b510      	push	{r4, lr}
10012bf6:	4c04      	ldr	r4, [pc, #16]	; (10012c08 <inv_disable_magnetic_disturbance+0x14>)
10012bf8:	1c20      	adds	r0, r4, #0
10012bfa:	f7f7 f8d7 	bl	10009dac <inv_unregister_data_cb>
10012bfe:	1c20      	adds	r0, r4, #0
10012c00:	f7f7 f8d4 	bl	10009dac <inv_unregister_data_cb>
10012c04:	bd10      	pop	{r4, pc}
10012c06:	46c0      	nop			; (mov r8, r8)
10012c08:	10013171 	.word	0x10013171

10012c0c <inv_disable_dip_tracking>:
10012c0c:	2100      	movs	r1, #0
10012c0e:	238c      	movs	r3, #140	; 0x8c
10012c10:	4a01      	ldr	r2, [pc, #4]	; (10012c18 <inv_disable_dip_tracking+0xc>)
10012c12:	2000      	movs	r0, #0
10012c14:	50d1      	str	r1, [r2, r3]
10012c16:	4770      	bx	lr
10012c18:	1001d3d4 	.word	0x1001d3d4

10012c1c <inv_enable_dip_tracking>:
10012c1c:	2101      	movs	r1, #1
10012c1e:	238c      	movs	r3, #140	; 0x8c
10012c20:	4a01      	ldr	r2, [pc, #4]	; (10012c28 <inv_enable_dip_tracking+0xc>)
10012c22:	2000      	movs	r0, #0
10012c24:	50d1      	str	r1, [r2, r3]
10012c26:	4770      	bx	lr
10012c28:	1001d3d4 	.word	0x1001d3d4

10012c2c <inv_track_dip_angle>:
10012c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012c2e:	2800      	cmp	r0, #0
10012c30:	d00b      	beq.n	10012c4a <inv_track_dip_angle+0x1e>
10012c32:	2801      	cmp	r0, #1
10012c34:	d019      	beq.n	10012c6a <inv_track_dip_angle+0x3e>
10012c36:	2101      	movs	r1, #1
10012c38:	2298      	movs	r2, #152	; 0x98
10012c3a:	4b20      	ldr	r3, [pc, #128]	; (10012cbc <inv_track_dip_angle+0x90>)
10012c3c:	5099      	str	r1, [r3, r2]
10012c3e:	2200      	movs	r2, #0
10012c40:	318b      	adds	r1, #139	; 0x8b
10012c42:	505a      	str	r2, [r3, r1]
10012c44:	3104      	adds	r1, #4
10012c46:	505a      	str	r2, [r3, r1]
10012c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012c4a:	22a0      	movs	r2, #160	; 0xa0
10012c4c:	4b1b      	ldr	r3, [pc, #108]	; (10012cbc <inv_track_dip_angle+0x90>)
10012c4e:	5099      	str	r1, [r3, r2]
10012c50:	3204      	adds	r2, #4
10012c52:	5099      	str	r1, [r3, r2]
10012c54:	2100      	movs	r1, #0
10012c56:	3204      	adds	r2, #4
10012c58:	5099      	str	r1, [r3, r2]
10012c5a:	2101      	movs	r1, #1
10012c5c:	3a14      	subs	r2, #20
10012c5e:	5098      	str	r0, [r3, r2]
10012c60:	3a04      	subs	r2, #4
10012c62:	5099      	str	r1, [r3, r2]
10012c64:	3208      	adds	r2, #8
10012c66:	5098      	str	r0, [r3, r2]
10012c68:	e7ee      	b.n	10012c48 <inv_track_dip_angle+0x1c>
10012c6a:	23a0      	movs	r3, #160	; 0xa0
10012c6c:	4d13      	ldr	r5, [pc, #76]	; (10012cbc <inv_track_dip_angle+0x90>)
10012c6e:	1c08      	adds	r0, r1, #0
10012c70:	1c0c      	adds	r4, r1, #0
10012c72:	58e9      	ldr	r1, [r5, r3]
10012c74:	f003 f8ea 	bl	10015e4c <__aeabi_fsub>
10012c78:	239c      	movs	r3, #156	; 0x9c
10012c7a:	0040      	lsls	r0, r0, #1
10012c7c:	0840      	lsrs	r0, r0, #1
10012c7e:	58e9      	ldr	r1, [r5, r3]
10012c80:	f002 fb5e 	bl	10015340 <__aeabi_fcmplt>
10012c84:	2800      	cmp	r0, #0
10012c86:	d014      	beq.n	10012cb2 <inv_track_dip_angle+0x86>
10012c88:	2394      	movs	r3, #148	; 0x94
10012c8a:	27a4      	movs	r7, #164	; 0xa4
10012c8c:	58ea      	ldr	r2, [r5, r3]
10012c8e:	59e9      	ldr	r1, [r5, r7]
10012c90:	1c56      	adds	r6, r2, #1
10012c92:	50ee      	str	r6, [r5, r3]
10012c94:	1c20      	adds	r0, r4, #0
10012c96:	f002 fc85 	bl	100155a4 <__aeabi_fadd>
10012c9a:	51e8      	str	r0, [r5, r7]
10012c9c:	2e31      	cmp	r6, #49	; 0x31
10012c9e:	ddd3      	ble.n	10012c48 <inv_track_dip_angle+0x1c>
10012ca0:	2390      	movs	r3, #144	; 0x90
10012ca2:	2202      	movs	r2, #2
10012ca4:	4906      	ldr	r1, [pc, #24]	; (10012cc0 <inv_track_dip_angle+0x94>)
10012ca6:	50ea      	str	r2, [r5, r3]
10012ca8:	f002 fdf2 	bl	10015890 <__aeabi_fdiv>
10012cac:	23a8      	movs	r3, #168	; 0xa8
10012cae:	50e8      	str	r0, [r5, r3]
10012cb0:	e7ca      	b.n	10012c48 <inv_track_dip_angle+0x1c>
10012cb2:	2390      	movs	r3, #144	; 0x90
10012cb4:	50e8      	str	r0, [r5, r3]
10012cb6:	3304      	adds	r3, #4
10012cb8:	50e8      	str	r0, [r5, r3]
10012cba:	e7c5      	b.n	10012c48 <inv_track_dip_angle+0x1c>
10012cbc:	1001d3d4 	.word	0x1001d3d4
10012cc0:	42480000 	.word	0x42480000

10012cc4 <ComputeAngleVelocity>:
10012cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
10012cc6:	464f      	mov	r7, r9
10012cc8:	4646      	mov	r6, r8
10012cca:	1c04      	adds	r4, r0, #0
10012ccc:	1c0d      	adds	r5, r1, #0
10012cce:	b4c0      	push	{r6, r7}
10012cd0:	b08f      	sub	sp, #60	; 0x3c
10012cd2:	a905      	add	r1, sp, #20
10012cd4:	4691      	mov	r9, r2
10012cd6:	f7f7 fdc1 	bl	1000a85c <inv_quaternion_to_rotation>
10012cda:	1c28      	adds	r0, r5, #0
10012cdc:	1c21      	adds	r1, r4, #0
10012cde:	aa01      	add	r2, sp, #4
10012ce0:	f7f7 fa78 	bl	1000a1d4 <inv_q_mult>
10012ce4:	1c20      	adds	r0, r4, #0
10012ce6:	1c29      	adds	r1, r5, #0
10012ce8:	f7f7 fbf4 	bl	1000a4d4 <inv_q_invert>
10012cec:	2300      	movs	r3, #0
10012cee:	4698      	mov	r8, r3
10012cf0:	4643      	mov	r3, r8
10012cf2:	005d      	lsls	r5, r3, #1
10012cf4:	ab05      	add	r3, sp, #20
10012cf6:	469c      	mov	ip, r3
10012cf8:	2400      	movs	r4, #0
10012cfa:	2600      	movs	r6, #0
10012cfc:	2700      	movs	r7, #0
10012cfe:	4445      	add	r5, r8
10012d00:	4465      	add	r5, ip
10012d02:	592b      	ldr	r3, [r5, r4]
10012d04:	5928      	ldr	r0, [r5, r4]
10012d06:	17d9      	asrs	r1, r3, #31
10012d08:	ab01      	add	r3, sp, #4
10012d0a:	191b      	adds	r3, r3, r4
10012d0c:	685a      	ldr	r2, [r3, #4]
10012d0e:	3404      	adds	r4, #4
10012d10:	17d3      	asrs	r3, r2, #31
10012d12:	f002 fb61 	bl	100153d8 <__aeabi_lmul>
10012d16:	1836      	adds	r6, r6, r0
10012d18:	414f      	adcs	r7, r1
10012d1a:	2c0c      	cmp	r4, #12
10012d1c:	d1f1      	bne.n	10012d02 <ComputeAngleVelocity+0x3e>
10012d1e:	00bb      	lsls	r3, r7, #2
10012d20:	0fb6      	lsrs	r6, r6, #30
10012d22:	431e      	orrs	r6, r3
10012d24:	4642      	mov	r2, r8
10012d26:	464b      	mov	r3, r9
10012d28:	509e      	str	r6, [r3, r2]
10012d2a:	2304      	movs	r3, #4
10012d2c:	469c      	mov	ip, r3
10012d2e:	44e0      	add	r8, ip
10012d30:	4643      	mov	r3, r8
10012d32:	2b0c      	cmp	r3, #12
10012d34:	d1dc      	bne.n	10012cf0 <ComputeAngleVelocity+0x2c>
10012d36:	b00f      	add	sp, #60	; 0x3c
10012d38:	bc0c      	pop	{r2, r3}
10012d3a:	4690      	mov	r8, r2
10012d3c:	4699      	mov	r9, r3
10012d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10012d40 <Mag3ofNormalizedLong>:
10012d40:	b570      	push	{r4, r5, r6, lr}
10012d42:	1c04      	adds	r4, r0, #0
10012d44:	6800      	ldr	r0, [r0, #0]
10012d46:	f003 fa41 	bl	100161cc <__aeabi_i2f>
10012d4a:	1c06      	adds	r6, r0, #0
10012d4c:	6860      	ldr	r0, [r4, #4]
10012d4e:	f003 fa3d 	bl	100161cc <__aeabi_i2f>
10012d52:	1c05      	adds	r5, r0, #0
10012d54:	68a0      	ldr	r0, [r4, #8]
10012d56:	f003 fa39 	bl	100161cc <__aeabi_i2f>
10012d5a:	1c31      	adds	r1, r6, #0
10012d5c:	1c04      	adds	r4, r0, #0
10012d5e:	1c30      	adds	r0, r6, #0
10012d60:	f002 ff60 	bl	10015c24 <__aeabi_fmul>
10012d64:	1c29      	adds	r1, r5, #0
10012d66:	1c06      	adds	r6, r0, #0
10012d68:	1c28      	adds	r0, r5, #0
10012d6a:	f002 ff5b 	bl	10015c24 <__aeabi_fmul>
10012d6e:	1c01      	adds	r1, r0, #0
10012d70:	1c30      	adds	r0, r6, #0
10012d72:	f002 fc17 	bl	100155a4 <__aeabi_fadd>
10012d76:	1c21      	adds	r1, r4, #0
10012d78:	1c05      	adds	r5, r0, #0
10012d7a:	1c20      	adds	r0, r4, #0
10012d7c:	f002 ff52 	bl	10015c24 <__aeabi_fmul>
10012d80:	1c01      	adds	r1, r0, #0
10012d82:	1c28      	adds	r0, r5, #0
10012d84:	f002 fc0e 	bl	100155a4 <__aeabi_fadd>
10012d88:	f7fd fea0 	bl	10010acc <sqrtf>
10012d8c:	21de      	movs	r1, #222	; 0xde
10012d8e:	0589      	lsls	r1, r1, #22
10012d90:	f002 ff48 	bl	10015c24 <__aeabi_fmul>
10012d94:	bd70      	pop	{r4, r5, r6, pc}
10012d96:	46c0      	nop			; (mov r8, r8)

10012d98 <MagDisturbSetDisturbance>:
10012d98:	b570      	push	{r4, r5, r6, lr}
10012d9a:	4c1d      	ldr	r4, [pc, #116]	; (10012e10 <MagDisturbSetDisturbance+0x78>)
10012d9c:	1c05      	adds	r5, r0, #0
10012d9e:	1c0e      	adds	r6, r1, #0
10012da0:	6820      	ldr	r0, [r4, #0]
10012da2:	1c29      	adds	r1, r5, #0
10012da4:	f002 facc 	bl	10015340 <__aeabi_fcmplt>
10012da8:	2800      	cmp	r0, #0
10012daa:	d105      	bne.n	10012db8 <MagDisturbSetDisturbance+0x20>
10012dac:	1c28      	adds	r0, r5, #0
10012dae:	6861      	ldr	r1, [r4, #4]
10012db0:	f002 fac6 	bl	10015340 <__aeabi_fcmplt>
10012db4:	2800      	cmp	r0, #0
10012db6:	d00f      	beq.n	10012dd8 <MagDisturbSetDisturbance+0x40>
10012db8:	6f63      	ldr	r3, [r4, #116]	; 0x74
10012dba:	2b00      	cmp	r3, #0
10012dbc:	d011      	beq.n	10012de2 <MagDisturbSetDisturbance+0x4a>
10012dbe:	2301      	movs	r3, #1
10012dc0:	6763      	str	r3, [r4, #116]	; 0x74
10012dc2:	2300      	movs	r3, #0
10012dc4:	67a3      	str	r3, [r4, #120]	; 0x78
10012dc6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
10012dc8:	429a      	cmp	r2, r3
10012dca:	dc04      	bgt.n	10012dd6 <MagDisturbSetDisturbance+0x3e>
10012dcc:	6f63      	ldr	r3, [r4, #116]	; 0x74
10012dce:	2b01      	cmp	r3, #1
10012dd0:	d00d      	beq.n	10012dee <MagDisturbSetDisturbance+0x56>
10012dd2:	2300      	movs	r3, #0
10012dd4:	6763      	str	r3, [r4, #116]	; 0x74
10012dd6:	bd70      	pop	{r4, r5, r6, pc}
10012dd8:	6923      	ldr	r3, [r4, #16]
10012dda:	2b01      	cmp	r3, #1
10012ddc:	d00a      	beq.n	10012df4 <MagDisturbSetDisturbance+0x5c>
10012dde:	6fa3      	ldr	r3, [r4, #120]	; 0x78
10012de0:	e7f1      	b.n	10012dc6 <MagDisturbSetDisturbance+0x2e>
10012de2:	1c20      	adds	r0, r4, #0
10012de4:	6da1      	ldr	r1, [r4, #88]	; 0x58
10012de6:	3018      	adds	r0, #24
10012de8:	f7f7 fef4 	bl	1000abd4 <inv_set_compass_correction>
10012dec:	e7e7      	b.n	10012dbe <MagDisturbSetDisturbance+0x26>
10012dee:	2300      	movs	r3, #0
10012df0:	65e3      	str	r3, [r4, #92]	; 0x5c
10012df2:	e7ee      	b.n	10012dd2 <MagDisturbSetDisturbance+0x3a>
10012df4:	68e0      	ldr	r0, [r4, #12]
10012df6:	1c31      	adds	r1, r6, #0
10012df8:	f002 faa2 	bl	10015340 <__aeabi_fcmplt>
10012dfc:	2800      	cmp	r0, #0
10012dfe:	d1db      	bne.n	10012db8 <MagDisturbSetDisturbance+0x20>
10012e00:	1c30      	adds	r0, r6, #0
10012e02:	68a1      	ldr	r1, [r4, #8]
10012e04:	f002 fa9c 	bl	10015340 <__aeabi_fcmplt>
10012e08:	2800      	cmp	r0, #0
10012e0a:	d1d5      	bne.n	10012db8 <MagDisturbSetDisturbance+0x20>
10012e0c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
10012e0e:	e7da      	b.n	10012dc6 <MagDisturbSetDisturbance+0x2e>
10012e10:	1001d3d4 	.word	0x1001d3d4

10012e14 <MagDisturbCheckSettling>:
10012e14:	b538      	push	{r3, r4, r5, lr}
10012e16:	1c05      	adds	r5, r0, #0
10012e18:	1c0c      	adds	r4, r1, #0
10012e1a:	f7f7 feff 	bl	1000ac1c <inv_get_acc_state>
10012e1e:	2800      	cmp	r0, #0
10012e20:	d105      	bne.n	10012e2e <MagDisturbCheckSettling+0x1a>
10012e22:	1c28      	adds	r0, r5, #0
10012e24:	490d      	ldr	r1, [pc, #52]	; (10012e5c <MagDisturbCheckSettling+0x48>)
10012e26:	f002 fa9f 	bl	10015368 <__aeabi_fcmpgt>
10012e2a:	2800      	cmp	r0, #0
10012e2c:	d010      	beq.n	10012e50 <MagDisturbCheckSettling+0x3c>
10012e2e:	2200      	movs	r2, #0
10012e30:	4b0b      	ldr	r3, [pc, #44]	; (10012e60 <MagDisturbCheckSettling+0x4c>)
10012e32:	611a      	str	r2, [r3, #16]
10012e34:	615a      	str	r2, [r3, #20]
10012e36:	695a      	ldr	r2, [r3, #20]
10012e38:	18a1      	adds	r1, r4, r2
10012e3a:	22fa      	movs	r2, #250	; 0xfa
10012e3c:	6159      	str	r1, [r3, #20]
10012e3e:	0052      	lsls	r2, r2, #1
10012e40:	4291      	cmp	r1, r2
10012e42:	dd04      	ble.n	10012e4e <MagDisturbCheckSettling+0x3a>
10012e44:	3af4      	subs	r2, #244	; 0xf4
10012e46:	3aff      	subs	r2, #255	; 0xff
10012e48:	611a      	str	r2, [r3, #16]
10012e4a:	2200      	movs	r2, #0
10012e4c:	615a      	str	r2, [r3, #20]
10012e4e:	bd38      	pop	{r3, r4, r5, pc}
10012e50:	4b03      	ldr	r3, [pc, #12]	; (10012e60 <MagDisturbCheckSettling+0x4c>)
10012e52:	691a      	ldr	r2, [r3, #16]
10012e54:	2a00      	cmp	r2, #0
10012e56:	d1fa      	bne.n	10012e4e <MagDisturbCheckSettling+0x3a>
10012e58:	e7ed      	b.n	10012e36 <MagDisturbCheckSettling+0x22>
10012e5a:	46c0      	nop			; (mov r8, r8)
10012e5c:	461c4000 	.word	0x461c4000
10012e60:	1001d3d4 	.word	0x1001d3d4

10012e64 <inv_check_magnetic_disturbance>:
10012e64:	b5f0      	push	{r4, r5, r6, r7, lr}
10012e66:	465f      	mov	r7, fp
10012e68:	4644      	mov	r4, r8
10012e6a:	4656      	mov	r6, sl
10012e6c:	464d      	mov	r5, r9
10012e6e:	b4f0      	push	{r4, r5, r6, r7}
10012e70:	2400      	movs	r4, #0
10012e72:	2788      	movs	r7, #136	; 0x88
10012e74:	b08d      	sub	sp, #52	; 0x34
10012e76:	9406      	str	r4, [sp, #24]
10012e78:	9407      	str	r4, [sp, #28]
10012e7a:	9408      	str	r4, [sp, #32]
10012e7c:	4cb5      	ldr	r4, [pc, #724]	; (10013154 <inv_check_magnetic_disturbance+0x2f0>)
10012e7e:	59e7      	ldr	r7, [r4, r7]
10012e80:	2f00      	cmp	r7, #0
10012e82:	d107      	bne.n	10012e94 <inv_check_magnetic_disturbance+0x30>
10012e84:	2000      	movs	r0, #0
10012e86:	b00d      	add	sp, #52	; 0x34
10012e88:	bc3c      	pop	{r2, r3, r4, r5}
10012e8a:	4690      	mov	r8, r2
10012e8c:	4699      	mov	r9, r3
10012e8e:	46a2      	mov	sl, r4
10012e90:	46ab      	mov	fp, r5
10012e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012e94:	4699      	mov	r9, r3
10012e96:	4690      	mov	r8, r2
10012e98:	9101      	str	r1, [sp, #4]
10012e9a:	1c05      	adds	r5, r0, #0
10012e9c:	f7f6 fe44 	bl	10009b28 <inv_get_gyro_on>
10012ea0:	2800      	cmp	r0, #0
10012ea2:	d000      	beq.n	10012ea6 <inv_check_magnetic_disturbance+0x42>
10012ea4:	e120      	b.n	100130e8 <inv_check_magnetic_disturbance+0x284>
10012ea6:	2780      	movs	r7, #128	; 0x80
10012ea8:	59e3      	ldr	r3, [r4, r7]
10012eaa:	2b00      	cmp	r3, #0
10012eac:	dd0f      	ble.n	10012ece <inv_check_magnetic_disturbance+0x6a>
10012eae:	2201      	movs	r2, #1
10012eb0:	2384      	movs	r3, #132	; 0x84
10012eb2:	50e2      	str	r2, [r4, r3]
10012eb4:	f7f6 fe38 	bl	10009b28 <inv_get_gyro_on>
10012eb8:	2800      	cmp	r0, #0
10012eba:	d000      	beq.n	10012ebe <inv_check_magnetic_disturbance+0x5a>
10012ebc:	e0a9      	b.n	10013012 <inv_check_magnetic_disturbance+0x1ae>
10012ebe:	59e3      	ldr	r3, [r4, r7]
10012ec0:	1b5b      	subs	r3, r3, r5
10012ec2:	51e3      	str	r3, [r4, r7]
10012ec4:	2b00      	cmp	r3, #0
10012ec6:	dc02      	bgt.n	10012ece <inv_check_magnetic_disturbance+0x6a>
10012ec8:	2200      	movs	r2, #0
10012eca:	2384      	movs	r3, #132	; 0x84
10012ecc:	50e2      	str	r2, [r4, r3]
10012ece:	f7f7 ff61 	bl	1000ad94 <inv_got_compass_bias>
10012ed2:	2800      	cmp	r0, #0
10012ed4:	d0d6      	beq.n	10012e84 <inv_check_magnetic_disturbance+0x20>
10012ed6:	2600      	movs	r6, #0
10012ed8:	2700      	movs	r7, #0
10012eda:	4643      	mov	r3, r8
10012edc:	59d8      	ldr	r0, [r3, r7]
10012ede:	f003 f975 	bl	100161cc <__aeabi_i2f>
10012ee2:	21de      	movs	r1, #222	; 0xde
10012ee4:	0589      	lsls	r1, r1, #22
10012ee6:	f002 fe9d 	bl	10015c24 <__aeabi_fmul>
10012eea:	464b      	mov	r3, r9
10012eec:	4683      	mov	fp, r0
10012eee:	59d8      	ldr	r0, [r3, r7]
10012ef0:	f003 f96c 	bl	100161cc <__aeabi_i2f>
10012ef4:	1c01      	adds	r1, r0, #0
10012ef6:	4658      	mov	r0, fp
10012ef8:	f002 fe94 	bl	10015c24 <__aeabi_fmul>
10012efc:	21de      	movs	r1, #222	; 0xde
10012efe:	0589      	lsls	r1, r1, #22
10012f00:	f002 fe90 	bl	10015c24 <__aeabi_fmul>
10012f04:	1c01      	adds	r1, r0, #0
10012f06:	1c30      	adds	r0, r6, #0
10012f08:	f002 fb4c 	bl	100155a4 <__aeabi_fadd>
10012f0c:	3704      	adds	r7, #4
10012f0e:	1c06      	adds	r6, r0, #0
10012f10:	2f0c      	cmp	r7, #12
10012f12:	d1e2      	bne.n	10012eda <inv_check_magnetic_disturbance+0x76>
10012f14:	4640      	mov	r0, r8
10012f16:	f7ff ff13 	bl	10012d40 <Mag3ofNormalizedLong>
10012f1a:	9000      	str	r0, [sp, #0]
10012f1c:	9900      	ldr	r1, [sp, #0]
10012f1e:	1c30      	adds	r0, r6, #0
10012f20:	f002 fcb6 	bl	10015890 <__aeabi_fdiv>
10012f24:	21fe      	movs	r1, #254	; 0xfe
10012f26:	0589      	lsls	r1, r1, #22
10012f28:	1c06      	adds	r6, r0, #0
10012f2a:	f002 fa1d 	bl	10015368 <__aeabi_fcmpgt>
10012f2e:	2800      	cmp	r0, #0
10012f30:	d067      	beq.n	10013002 <inv_check_magnetic_disturbance+0x19e>
10012f32:	26fe      	movs	r6, #254	; 0xfe
10012f34:	05b6      	lsls	r6, r6, #22
10012f36:	1c30      	adds	r0, r6, #0
10012f38:	f000 ff66 	bl	10013e08 <acosf>
10012f3c:	238c      	movs	r3, #140	; 0x8c
10012f3e:	58e3      	ldr	r3, [r4, r3]
10012f40:	4680      	mov	r8, r0
10012f42:	2b00      	cmp	r3, #0
10012f44:	d00c      	beq.n	10012f60 <inv_check_magnetic_disturbance+0xfc>
10012f46:	9800      	ldr	r0, [sp, #0]
10012f48:	6821      	ldr	r1, [r4, #0]
10012f4a:	f002 f9f9 	bl	10015340 <__aeabi_fcmplt>
10012f4e:	2800      	cmp	r0, #0
10012f50:	d006      	beq.n	10012f60 <inv_check_magnetic_disturbance+0xfc>
10012f52:	9800      	ldr	r0, [sp, #0]
10012f54:	6861      	ldr	r1, [r4, #4]
10012f56:	f002 fa07 	bl	10015368 <__aeabi_fcmpgt>
10012f5a:	2800      	cmp	r0, #0
10012f5c:	d000      	beq.n	10012f60 <inv_check_magnetic_disturbance+0xfc>
10012f5e:	e0c7      	b.n	100130f0 <inv_check_magnetic_disturbance+0x28c>
10012f60:	ae09      	add	r6, sp, #36	; 0x24
10012f62:	1c30      	adds	r0, r6, #0
10012f64:	f7f7 fe88 	bl	1000ac78 <inv_get_local_field>
10012f68:	1c21      	adds	r1, r4, #0
10012f6a:	1c30      	adds	r0, r6, #0
10012f6c:	31ac      	adds	r1, #172	; 0xac
10012f6e:	220c      	movs	r2, #12
10012f70:	f005 f99e 	bl	100182b0 <memcmp>
10012f74:	2800      	cmp	r0, #0
10012f76:	d157      	bne.n	10013028 <inv_check_magnetic_disturbance+0x1c4>
10012f78:	2398      	movs	r3, #152	; 0x98
10012f7a:	58e3      	ldr	r3, [r4, r3]
10012f7c:	2b01      	cmp	r3, #1
10012f7e:	d053      	beq.n	10013028 <inv_check_magnetic_disturbance+0x1c4>
10012f80:	6de3      	ldr	r3, [r4, #92]	; 0x5c
10012f82:	2b00      	cmp	r3, #0
10012f84:	d10e      	bne.n	10012fa4 <inv_check_magnetic_disturbance+0x140>
10012f86:	2301      	movs	r3, #1
10012f88:	65e3      	str	r3, [r4, #92]	; 0x5c
10012f8a:	3357      	adds	r3, #87	; 0x57
10012f8c:	469a      	mov	sl, r3
10012f8e:	2600      	movs	r6, #0
10012f90:	44a2      	add	sl, r4
10012f92:	1c30      	adds	r0, r6, #0
10012f94:	3018      	adds	r0, #24
10012f96:	1820      	adds	r0, r4, r0
10012f98:	4651      	mov	r1, sl
10012f9a:	3610      	adds	r6, #16
10012f9c:	f7f7 fe2e 	bl	1000abfc <inv_get_compass_correction>
10012fa0:	2e40      	cmp	r6, #64	; 0x40
10012fa2:	d1f6      	bne.n	10012f92 <inv_check_magnetic_disturbance+0x12e>
10012fa4:	1c26      	adds	r6, r4, #0
10012fa6:	9f01      	ldr	r7, [sp, #4]
10012fa8:	3664      	adds	r6, #100	; 0x64
10012faa:	aa03      	add	r2, sp, #12
10012fac:	1c38      	adds	r0, r7, #0
10012fae:	1c31      	adds	r1, r6, #0
10012fb0:	f7ff fe88 	bl	10012cc4 <ComputeAngleVelocity>
10012fb4:	1c31      	adds	r1, r6, #0
10012fb6:	1c38      	adds	r0, r7, #0
10012fb8:	f7f7 fa8c 	bl	1000a4d4 <inv_q_invert>
10012fbc:	a806      	add	r0, sp, #24
10012fbe:	f7f7 f8e5 	bl	1000a18c <inv_get_gyro_sum_of_sqr>
10012fc2:	f003 f94b 	bl	1001625c <__aeabi_ui2f>
10012fc6:	21f2      	movs	r1, #242	; 0xf2
10012fc8:	0589      	lsls	r1, r1, #22
10012fca:	f002 fe2b 	bl	10015c24 <__aeabi_fmul>
10012fce:	1c29      	adds	r1, r5, #0
10012fd0:	f7ff ff20 	bl	10012e14 <MagDisturbCheckSettling>
10012fd4:	9800      	ldr	r0, [sp, #0]
10012fd6:	4641      	mov	r1, r8
10012fd8:	f7ff fede 	bl	10012d98 <MagDisturbSetDisturbance>
10012fdc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
10012fde:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
10012fe0:	4293      	cmp	r3, r2
10012fe2:	da01      	bge.n	10012fe8 <inv_check_magnetic_disturbance+0x184>
10012fe4:	18eb      	adds	r3, r5, r3
10012fe6:	67a3      	str	r3, [r4, #120]	; 0x78
10012fe8:	6f60      	ldr	r0, [r4, #116]	; 0x74
10012fea:	2800      	cmp	r0, #0
10012fec:	d000      	beq.n	10012ff0 <inv_check_magnetic_disturbance+0x18c>
10012fee:	e74a      	b.n	10012e86 <inv_check_magnetic_disturbance+0x22>
10012ff0:	6e23      	ldr	r3, [r4, #96]	; 0x60
10012ff2:	469c      	mov	ip, r3
10012ff4:	23fa      	movs	r3, #250	; 0xfa
10012ff6:	4465      	add	r5, ip
10012ff8:	009b      	lsls	r3, r3, #2
10012ffa:	429d      	cmp	r5, r3
10012ffc:	dc7e      	bgt.n	100130fc <inv_check_magnetic_disturbance+0x298>
10012ffe:	6625      	str	r5, [r4, #96]	; 0x60
10013000:	e741      	b.n	10012e86 <inv_check_magnetic_disturbance+0x22>
10013002:	1c30      	adds	r0, r6, #0
10013004:	4954      	ldr	r1, [pc, #336]	; (10013158 <inv_check_magnetic_disturbance+0x2f4>)
10013006:	f002 f99b 	bl	10015340 <__aeabi_fcmplt>
1001300a:	2800      	cmp	r0, #0
1001300c:	d093      	beq.n	10012f36 <inv_check_magnetic_disturbance+0xd2>
1001300e:	4e52      	ldr	r6, [pc, #328]	; (10013158 <inv_check_magnetic_disturbance+0x2f4>)
10013010:	e791      	b.n	10012f36 <inv_check_magnetic_disturbance+0xd2>
10013012:	a806      	add	r0, sp, #24
10013014:	f7f7 f8ba 	bl	1000a18c <inv_get_gyro_sum_of_sqr>
10013018:	2390      	movs	r3, #144	; 0x90
1001301a:	33ff      	adds	r3, #255	; 0xff
1001301c:	0980      	lsrs	r0, r0, #6
1001301e:	4298      	cmp	r0, r3
10013020:	d900      	bls.n	10013024 <inv_check_magnetic_disturbance+0x1c0>
10013022:	e74c      	b.n	10012ebe <inv_check_magnetic_disturbance+0x5a>
10013024:	59e3      	ldr	r3, [r4, r7]
10013026:	e74d      	b.n	10012ec4 <inv_check_magnetic_disturbance+0x60>
10013028:	1c23      	adds	r3, r4, #0
1001302a:	1c32      	adds	r2, r6, #0
1001302c:	33ac      	adds	r3, #172	; 0xac
1001302e:	ca83      	ldmia	r2!, {r0, r1, r7}
10013030:	c383      	stmia	r3!, {r0, r1, r7}
10013032:	9b09      	ldr	r3, [sp, #36]	; 0x24
10013034:	2b00      	cmp	r3, #0
10013036:	d113      	bne.n	10013060 <inv_check_magnetic_disturbance+0x1fc>
10013038:	6873      	ldr	r3, [r6, #4]
1001303a:	2b00      	cmp	r3, #0
1001303c:	d110      	bne.n	10013060 <inv_check_magnetic_disturbance+0x1fc>
1001303e:	68b3      	ldr	r3, [r6, #8]
10013040:	4699      	mov	r9, r3
10013042:	2b00      	cmp	r3, #0
10013044:	d10c      	bne.n	10013060 <inv_check_magnetic_disturbance+0x1fc>
10013046:	2698      	movs	r6, #152	; 0x98
10013048:	4b44      	ldr	r3, [pc, #272]	; (1001315c <inv_check_magnetic_disturbance+0x2f8>)
1001304a:	6023      	str	r3, [r4, #0]
1001304c:	4b44      	ldr	r3, [pc, #272]	; (10013160 <inv_check_magnetic_disturbance+0x2fc>)
1001304e:	6063      	str	r3, [r4, #4]
10013050:	59a3      	ldr	r3, [r4, r6]
10013052:	2b01      	cmp	r3, #1
10013054:	d06b      	beq.n	1001312e <inv_check_magnetic_disturbance+0x2ca>
10013056:	4b43      	ldr	r3, [pc, #268]	; (10013164 <inv_check_magnetic_disturbance+0x300>)
10013058:	60a3      	str	r3, [r4, #8]
1001305a:	4b43      	ldr	r3, [pc, #268]	; (10013168 <inv_check_magnetic_disturbance+0x304>)
1001305c:	60e3      	str	r3, [r4, #12]
1001305e:	e78f      	b.n	10012f80 <inv_check_magnetic_disturbance+0x11c>
10013060:	1c30      	adds	r0, r6, #0
10013062:	f7ff fe6d 	bl	10012d40 <Mag3ofNormalizedLong>
10013066:	2100      	movs	r1, #0
10013068:	4681      	mov	r9, r0
1001306a:	f002 f963 	bl	10015334 <__aeabi_fcmpeq>
1001306e:	2800      	cmp	r0, #0
10013070:	d186      	bne.n	10012f80 <inv_check_magnetic_disturbance+0x11c>
10013072:	4648      	mov	r0, r9
10013074:	493d      	ldr	r1, [pc, #244]	; (1001316c <inv_check_magnetic_disturbance+0x308>)
10013076:	f002 fee9 	bl	10015e4c <__aeabi_fsub>
1001307a:	1c01      	adds	r1, r0, #0
1001307c:	f002 fdd2 	bl	10015c24 <__aeabi_fmul>
10013080:	f7fd fd24 	bl	10010acc <sqrtf>
10013084:	4939      	ldr	r1, [pc, #228]	; (1001316c <inv_check_magnetic_disturbance+0x308>)
10013086:	6060      	str	r0, [r4, #4]
10013088:	4648      	mov	r0, r9
1001308a:	f002 fa8b 	bl	100155a4 <__aeabi_fadd>
1001308e:	1c01      	adds	r1, r0, #0
10013090:	f002 fdc8 	bl	10015c24 <__aeabi_fmul>
10013094:	f7fd fd1a 	bl	10010acc <sqrtf>
10013098:	6020      	str	r0, [r4, #0]
1001309a:	68b0      	ldr	r0, [r6, #8]
1001309c:	f003 f896 	bl	100161cc <__aeabi_i2f>
100130a0:	21de      	movs	r1, #222	; 0xde
100130a2:	0589      	lsls	r1, r1, #22
100130a4:	f002 fdbe 	bl	10015c24 <__aeabi_fmul>
100130a8:	4649      	mov	r1, r9
100130aa:	f002 fbf1 	bl	10015890 <__aeabi_fdiv>
100130ae:	21fe      	movs	r1, #254	; 0xfe
100130b0:	0589      	lsls	r1, r1, #22
100130b2:	4681      	mov	r9, r0
100130b4:	f002 f958 	bl	10015368 <__aeabi_fcmpgt>
100130b8:	2800      	cmp	r0, #0
100130ba:	d02f      	beq.n	1001311c <inv_check_magnetic_disturbance+0x2b8>
100130bc:	23fe      	movs	r3, #254	; 0xfe
100130be:	059b      	lsls	r3, r3, #22
100130c0:	4699      	mov	r9, r3
100130c2:	269c      	movs	r6, #156	; 0x9c
100130c4:	4648      	mov	r0, r9
100130c6:	f000 fe9f 	bl	10013e08 <acosf>
100130ca:	59a1      	ldr	r1, [r4, r6]
100130cc:	f002 febe 	bl	10015e4c <__aeabi_fsub>
100130d0:	60a0      	str	r0, [r4, #8]
100130d2:	4648      	mov	r0, r9
100130d4:	f000 fe98 	bl	10013e08 <acosf>
100130d8:	59a1      	ldr	r1, [r4, r6]
100130da:	f002 fa63 	bl	100155a4 <__aeabi_fadd>
100130de:	2200      	movs	r2, #0
100130e0:	238c      	movs	r3, #140	; 0x8c
100130e2:	60e0      	str	r0, [r4, #12]
100130e4:	50e2      	str	r2, [r4, r3]
100130e6:	e74b      	b.n	10012f80 <inv_check_magnetic_disturbance+0x11c>
100130e8:	a806      	add	r0, sp, #24
100130ea:	f7f6 ff55 	bl	10009f98 <inv_get_gyro>
100130ee:	e6da      	b.n	10012ea6 <inv_check_magnetic_disturbance+0x42>
100130f0:	2390      	movs	r3, #144	; 0x90
100130f2:	4641      	mov	r1, r8
100130f4:	58e0      	ldr	r0, [r4, r3]
100130f6:	f7ff fd99 	bl	10012c2c <inv_track_dip_angle>
100130fa:	e731      	b.n	10012f60 <inv_check_magnetic_disturbance+0xfc>
100130fc:	6620      	str	r0, [r4, #96]	; 0x60
100130fe:	1c21      	adds	r1, r4, #0
10013100:	1c20      	adds	r0, r4, #0
10013102:	3128      	adds	r1, #40	; 0x28
10013104:	2230      	movs	r2, #48	; 0x30
10013106:	3018      	adds	r0, #24
10013108:	f005 f8ea 	bl	100182e0 <memmove>
1001310c:	1c20      	adds	r0, r4, #0
1001310e:	1c21      	adds	r1, r4, #0
10013110:	3048      	adds	r0, #72	; 0x48
10013112:	3158      	adds	r1, #88	; 0x58
10013114:	f7f7 fd72 	bl	1000abfc <inv_get_compass_correction>
10013118:	6f60      	ldr	r0, [r4, #116]	; 0x74
1001311a:	e6b4      	b.n	10012e86 <inv_check_magnetic_disturbance+0x22>
1001311c:	4648      	mov	r0, r9
1001311e:	490e      	ldr	r1, [pc, #56]	; (10013158 <inv_check_magnetic_disturbance+0x2f4>)
10013120:	f002 f90e 	bl	10015340 <__aeabi_fcmplt>
10013124:	2800      	cmp	r0, #0
10013126:	d0cc      	beq.n	100130c2 <inv_check_magnetic_disturbance+0x25e>
10013128:	4b0b      	ldr	r3, [pc, #44]	; (10013158 <inv_check_magnetic_disturbance+0x2f4>)
1001312a:	4699      	mov	r9, r3
1001312c:	e7c9      	b.n	100130c2 <inv_check_magnetic_disturbance+0x25e>
1001312e:	33a7      	adds	r3, #167	; 0xa7
10013130:	58e3      	ldr	r3, [r4, r3]
10013132:	469b      	mov	fp, r3
10013134:	239c      	movs	r3, #156	; 0x9c
10013136:	58e3      	ldr	r3, [r4, r3]
10013138:	4658      	mov	r0, fp
1001313a:	1c19      	adds	r1, r3, #0
1001313c:	469a      	mov	sl, r3
1001313e:	f002 fe85 	bl	10015e4c <__aeabi_fsub>
10013142:	4651      	mov	r1, sl
10013144:	60a0      	str	r0, [r4, #8]
10013146:	4658      	mov	r0, fp
10013148:	f002 fa2c 	bl	100155a4 <__aeabi_fadd>
1001314c:	464b      	mov	r3, r9
1001314e:	60e0      	str	r0, [r4, #12]
10013150:	51a3      	str	r3, [r4, r6]
10013152:	e715      	b.n	10012f80 <inv_check_magnetic_disturbance+0x11c>
10013154:	1001d3d4 	.word	0x1001d3d4
10013158:	bf800000 	.word	0xbf800000
1001315c:	42700000 	.word	0x42700000
10013160:	41f00000 	.word	0x41f00000
10013164:	c2b40000 	.word	0xc2b40000
10013168:	42b40000 	.word	0x42b40000
1001316c:	41200000 	.word	0x41200000

10013170 <inv_magnetic_disturbance_process>:
10013170:	b570      	push	{r4, r5, r6, lr}
10013172:	b088      	sub	sp, #32
10013174:	1c04      	adds	r4, r0, #0
10013176:	a801      	add	r0, sp, #4
10013178:	f7f7 fd8a 	bl	1000ac90 <inv_get_gravity>
1001317c:	22c4      	movs	r2, #196	; 0xc4
1001317e:	23c0      	movs	r3, #192	; 0xc0
10013180:	58a5      	ldr	r5, [r4, r2]
10013182:	58e3      	ldr	r3, [r4, r3]
10013184:	a804      	add	r0, sp, #16
10013186:	1b5d      	subs	r5, r3, r5
10013188:	f7f7 fdce 	bl	1000ad28 <inv_get_6axis_quaternion>
1001318c:	1c22      	adds	r2, r4, #0
1001318e:	1c06      	adds	r6, r0, #0
10013190:	32a0      	adds	r2, #160	; 0xa0
10013192:	a904      	add	r1, sp, #16
10013194:	ab01      	add	r3, sp, #4
10013196:	1c28      	adds	r0, r5, #0
10013198:	f7ff fe64 	bl	10012e64 <inv_check_magnetic_disturbance>
1001319c:	f7f6 fd12 	bl	10009bc4 <inv_set_compass_disturbance>
100131a0:	1c30      	adds	r0, r6, #0
100131a2:	b008      	add	sp, #32
100131a4:	bd70      	pop	{r4, r5, r6, pc}
100131a6:	46c0      	nop			; (mov r8, r8)

100131a8 <inv_get_magnetic_disturbance_state>:
100131a8:	4b01      	ldr	r3, [pc, #4]	; (100131b0 <inv_get_magnetic_disturbance_state+0x8>)
100131aa:	6f58      	ldr	r0, [r3, #116]	; 0x74
100131ac:	4770      	bx	lr
100131ae:	46c0      	nop			; (mov r8, r8)
100131b0:	1001d3d4 	.word	0x1001d3d4

100131b4 <inv_normalize_quat>:
100131b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100131b6:	464f      	mov	r7, r9
100131b8:	4646      	mov	r6, r8
100131ba:	1c04      	adds	r4, r0, #0
100131bc:	b4c0      	push	{r6, r7}
100131be:	6800      	ldr	r0, [r0, #0]
100131c0:	1c0d      	adds	r5, r1, #0
100131c2:	f003 f803 	bl	100161cc <__aeabi_i2f>
100131c6:	4681      	mov	r9, r0
100131c8:	6860      	ldr	r0, [r4, #4]
100131ca:	f002 ffff 	bl	100161cc <__aeabi_i2f>
100131ce:	4680      	mov	r8, r0
100131d0:	68a0      	ldr	r0, [r4, #8]
100131d2:	f002 fffb 	bl	100161cc <__aeabi_i2f>
100131d6:	1c07      	adds	r7, r0, #0
100131d8:	68e0      	ldr	r0, [r4, #12]
100131da:	f002 fff7 	bl	100161cc <__aeabi_i2f>
100131de:	4649      	mov	r1, r9
100131e0:	1c06      	adds	r6, r0, #0
100131e2:	4648      	mov	r0, r9
100131e4:	f002 fd1e 	bl	10015c24 <__aeabi_fmul>
100131e8:	4641      	mov	r1, r8
100131ea:	4681      	mov	r9, r0
100131ec:	4640      	mov	r0, r8
100131ee:	f002 fd19 	bl	10015c24 <__aeabi_fmul>
100131f2:	1c01      	adds	r1, r0, #0
100131f4:	4648      	mov	r0, r9
100131f6:	f002 f9d5 	bl	100155a4 <__aeabi_fadd>
100131fa:	1c39      	adds	r1, r7, #0
100131fc:	4680      	mov	r8, r0
100131fe:	1c38      	adds	r0, r7, #0
10013200:	f002 fd10 	bl	10015c24 <__aeabi_fmul>
10013204:	1c01      	adds	r1, r0, #0
10013206:	4640      	mov	r0, r8
10013208:	f002 f9cc 	bl	100155a4 <__aeabi_fadd>
1001320c:	1c31      	adds	r1, r6, #0
1001320e:	1c07      	adds	r7, r0, #0
10013210:	1c30      	adds	r0, r6, #0
10013212:	f002 fd07 	bl	10015c24 <__aeabi_fmul>
10013216:	1c01      	adds	r1, r0, #0
10013218:	1c38      	adds	r0, r7, #0
1001321a:	f002 f9c3 	bl	100155a4 <__aeabi_fadd>
1001321e:	2100      	movs	r1, #0
10013220:	1c06      	adds	r6, r0, #0
10013222:	f002 f897 	bl	10015354 <__aeabi_fcmple>
10013226:	2800      	cmp	r0, #0
10013228:	d134      	bne.n	10013294 <inv_normalize_quat+0xe0>
1001322a:	1c30      	adds	r0, r6, #0
1001322c:	f7fd fc4e 	bl	10010acc <sqrtf>
10013230:	1c01      	adds	r1, r0, #0
10013232:	20fe      	movs	r0, #254	; 0xfe
10013234:	0580      	lsls	r0, r0, #22
10013236:	f002 fb2b 	bl	10015890 <__aeabi_fdiv>
1001323a:	219d      	movs	r1, #157	; 0x9d
1001323c:	05c9      	lsls	r1, r1, #23
1001323e:	f002 fcf1 	bl	10015c24 <__aeabi_fmul>
10013242:	1c06      	adds	r6, r0, #0
10013244:	6820      	ldr	r0, [r4, #0]
10013246:	f002 ffc1 	bl	100161cc <__aeabi_i2f>
1001324a:	1c31      	adds	r1, r6, #0
1001324c:	f002 fcea 	bl	10015c24 <__aeabi_fmul>
10013250:	f002 ff9a 	bl	10016188 <__aeabi_f2iz>
10013254:	6028      	str	r0, [r5, #0]
10013256:	6860      	ldr	r0, [r4, #4]
10013258:	f002 ffb8 	bl	100161cc <__aeabi_i2f>
1001325c:	1c31      	adds	r1, r6, #0
1001325e:	f002 fce1 	bl	10015c24 <__aeabi_fmul>
10013262:	f002 ff91 	bl	10016188 <__aeabi_f2iz>
10013266:	6068      	str	r0, [r5, #4]
10013268:	68a0      	ldr	r0, [r4, #8]
1001326a:	f002 ffaf 	bl	100161cc <__aeabi_i2f>
1001326e:	1c31      	adds	r1, r6, #0
10013270:	f002 fcd8 	bl	10015c24 <__aeabi_fmul>
10013274:	f002 ff88 	bl	10016188 <__aeabi_f2iz>
10013278:	60a8      	str	r0, [r5, #8]
1001327a:	68e0      	ldr	r0, [r4, #12]
1001327c:	f002 ffa6 	bl	100161cc <__aeabi_i2f>
10013280:	1c31      	adds	r1, r6, #0
10013282:	f002 fccf 	bl	10015c24 <__aeabi_fmul>
10013286:	f002 ff7f 	bl	10016188 <__aeabi_f2iz>
1001328a:	60e8      	str	r0, [r5, #12]
1001328c:	bc0c      	pop	{r2, r3}
1001328e:	4690      	mov	r8, r2
10013290:	4699      	mov	r9, r3
10013292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10013294:	2380      	movs	r3, #128	; 0x80
10013296:	05db      	lsls	r3, r3, #23
10013298:	602b      	str	r3, [r5, #0]
1001329a:	2300      	movs	r3, #0
1001329c:	606b      	str	r3, [r5, #4]
1001329e:	60ab      	str	r3, [r5, #8]
100132a0:	60eb      	str	r3, [r5, #12]
100132a2:	e7f3      	b.n	1001328c <inv_normalize_quat+0xd8>

100132a4 <inv_start_quaternion>:
100132a4:	b508      	push	{r3, lr}
100132a6:	4b08      	ldr	r3, [pc, #32]	; (100132c8 <inv_start_quaternion+0x24>)
100132a8:	4908      	ldr	r1, [pc, #32]	; (100132cc <inv_start_quaternion+0x28>)
100132aa:	6818      	ldr	r0, [r3, #0]
100132ac:	2208      	movs	r2, #8
100132ae:	f004 ffff 	bl	100182b0 <memcmp>
100132b2:	1c03      	adds	r3, r0, #0
100132b4:	2032      	movs	r0, #50	; 0x32
100132b6:	2b00      	cmp	r3, #0
100132b8:	d000      	beq.n	100132bc <inv_start_quaternion+0x18>
100132ba:	bd08      	pop	{r3, pc}
100132bc:	21c8      	movs	r1, #200	; 0xc8
100132be:	2213      	movs	r2, #19
100132c0:	4803      	ldr	r0, [pc, #12]	; (100132d0 <inv_start_quaternion+0x2c>)
100132c2:	f7f6 fcf5 	bl	10009cb0 <inv_register_data_cb>
100132c6:	e7f8      	b.n	100132ba <inv_start_quaternion+0x16>
100132c8:	1001b608 	.word	0x1001b608
100132cc:	1001af8c 	.word	0x1001af8c
100132d0:	10013c45 	.word	0x10013c45

100132d4 <inv_generate_gyro_quaternion.part.1>:
100132d4:	b570      	push	{r4, r5, r6, lr}
100132d6:	6986      	ldr	r6, [r0, #24]
100132d8:	b08a      	sub	sp, #40	; 0x28
100132da:	17f3      	asrs	r3, r6, #31
100132dc:	18f2      	adds	r2, r6, r3
100132de:	405a      	eors	r2, r3
100132e0:	4b42      	ldr	r3, [pc, #264]	; (100133ec <inv_generate_gyro_quaternion.part.1+0x118>)
100132e2:	429a      	cmp	r2, r3
100132e4:	dc5b      	bgt.n	1001339e <inv_generate_gyro_quaternion.part.1+0xca>
100132e6:	69c2      	ldr	r2, [r0, #28]
100132e8:	17d1      	asrs	r1, r2, #31
100132ea:	1852      	adds	r2, r2, r1
100132ec:	404a      	eors	r2, r1
100132ee:	429a      	cmp	r2, r3
100132f0:	dd5e      	ble.n	100133b0 <inv_generate_gyro_quaternion.part.1+0xdc>
100132f2:	23c8      	movs	r3, #200	; 0xc8
100132f4:	03db      	lsls	r3, r3, #15
100132f6:	429a      	cmp	r2, r3
100132f8:	dc00      	bgt.n	100132fc <inv_generate_gyro_quaternion.part.1+0x28>
100132fa:	e074      	b.n	100133e6 <inv_generate_gyro_quaternion.part.1+0x112>
100132fc:	2303      	movs	r3, #3
100132fe:	4c3c      	ldr	r4, [pc, #240]	; (100133f0 <inv_generate_gyro_quaternion.part.1+0x11c>)
10013300:	1c05      	adds	r5, r0, #0
10013302:	63a3      	str	r3, [r4, #56]	; 0x38
10013304:	6a80      	ldr	r0, [r0, #40]	; 0x28
10013306:	6b63      	ldr	r3, [r4, #52]	; 0x34
10013308:	4283      	cmp	r3, r0
1001330a:	d066      	beq.n	100133da <inv_generate_gyro_quaternion.part.1+0x106>
1001330c:	6360      	str	r0, [r4, #52]	; 0x34
1001330e:	f002 ff5d 	bl	100161cc <__aeabi_i2f>
10013312:	4938      	ldr	r1, [pc, #224]	; (100133f4 <inv_generate_gyro_quaternion.part.1+0x120>)
10013314:	f002 fabc 	bl	10015890 <__aeabi_fdiv>
10013318:	219c      	movs	r1, #156	; 0x9c
1001331a:	05c9      	lsls	r1, r1, #23
1001331c:	f002 fc82 	bl	10015c24 <__aeabi_fmul>
10013320:	f004 fda8 	bl	10017e74 <__aeabi_f2d>
10013324:	4a34      	ldr	r2, [pc, #208]	; (100133f8 <inv_generate_gyro_quaternion.part.1+0x124>)
10013326:	4b35      	ldr	r3, [pc, #212]	; (100133fc <inv_generate_gyro_quaternion.part.1+0x128>)
10013328:	f003 ff26 	bl	10017178 <__aeabi_dmul>
1001332c:	2200      	movs	r2, #0
1001332e:	4b34      	ldr	r3, [pc, #208]	; (10013400 <inv_generate_gyro_quaternion.part.1+0x12c>)
10013330:	f003 ff22 	bl	10017178 <__aeabi_dmul>
10013334:	2200      	movs	r2, #0
10013336:	4b33      	ldr	r3, [pc, #204]	; (10013404 <inv_generate_gyro_quaternion.part.1+0x130>)
10013338:	f003 fafa 	bl	10016930 <__aeabi_ddiv>
1001333c:	f004 fcea 	bl	10017d14 <__aeabi_d2iz>
10013340:	1c01      	adds	r1, r0, #0
10013342:	6320      	str	r0, [r4, #48]	; 0x30
10013344:	2300      	movs	r3, #0
10013346:	1c30      	adds	r0, r6, #0
10013348:	9302      	str	r3, [sp, #8]
1001334a:	f7f6 ff37 	bl	1000a1bc <inv_q30_mult>
1001334e:	6b21      	ldr	r1, [r4, #48]	; 0x30
10013350:	9003      	str	r0, [sp, #12]
10013352:	69e8      	ldr	r0, [r5, #28]
10013354:	f7f6 ff32 	bl	1000a1bc <inv_q30_mult>
10013358:	6b21      	ldr	r1, [r4, #48]	; 0x30
1001335a:	9004      	str	r0, [sp, #16]
1001335c:	6a28      	ldr	r0, [r5, #32]
1001335e:	f7f6 ff2d 	bl	1000a1bc <inv_q30_mult>
10013362:	a902      	add	r1, sp, #8
10013364:	9005      	str	r0, [sp, #20]
10013366:	aa06      	add	r2, sp, #24
10013368:	1c20      	adds	r0, r4, #0
1001336a:	f7f6 ff33 	bl	1000a1d4 <inv_q_mult>
1001336e:	9b06      	ldr	r3, [sp, #24]
10013370:	1c20      	adds	r0, r4, #0
10013372:	019b      	lsls	r3, r3, #6
10013374:	9306      	str	r3, [sp, #24]
10013376:	9b07      	ldr	r3, [sp, #28]
10013378:	a906      	add	r1, sp, #24
1001337a:	019b      	lsls	r3, r3, #6
1001337c:	9307      	str	r3, [sp, #28]
1001337e:	9b08      	ldr	r3, [sp, #32]
10013380:	1c22      	adds	r2, r4, #0
10013382:	019b      	lsls	r3, r3, #6
10013384:	9308      	str	r3, [sp, #32]
10013386:	9b09      	ldr	r3, [sp, #36]	; 0x24
10013388:	9301      	str	r3, [sp, #4]
1001338a:	019b      	lsls	r3, r3, #6
1001338c:	9309      	str	r3, [sp, #36]	; 0x24
1001338e:	f7f7 f889 	bl	1000a4a4 <inv_q_add>
10013392:	1c20      	adds	r0, r4, #0
10013394:	1c21      	adds	r1, r4, #0
10013396:	f7ff ff0d 	bl	100131b4 <inv_normalize_quat>
1001339a:	b00a      	add	sp, #40	; 0x28
1001339c:	bd70      	pop	{r4, r5, r6, pc}
1001339e:	23c8      	movs	r3, #200	; 0xc8
100133a0:	03db      	lsls	r3, r3, #15
100133a2:	429a      	cmp	r2, r3
100133a4:	dcaa      	bgt.n	100132fc <inv_generate_gyro_quaternion.part.1+0x28>
100133a6:	69c3      	ldr	r3, [r0, #28]
100133a8:	17d9      	asrs	r1, r3, #31
100133aa:	185a      	adds	r2, r3, r1
100133ac:	404a      	eors	r2, r1
100133ae:	e7a0      	b.n	100132f2 <inv_generate_gyro_quaternion.part.1+0x1e>
100133b0:	6a02      	ldr	r2, [r0, #32]
100133b2:	17d4      	asrs	r4, r2, #31
100133b4:	1911      	adds	r1, r2, r4
100133b6:	4061      	eors	r1, r4
100133b8:	4299      	cmp	r1, r3
100133ba:	dd10      	ble.n	100133de <inv_generate_gyro_quaternion.part.1+0x10a>
100133bc:	17d3      	asrs	r3, r2, #31
100133be:	18d2      	adds	r2, r2, r3
100133c0:	405a      	eors	r2, r3
100133c2:	23c8      	movs	r3, #200	; 0xc8
100133c4:	03db      	lsls	r3, r3, #15
100133c6:	429a      	cmp	r2, r3
100133c8:	dc98      	bgt.n	100132fc <inv_generate_gyro_quaternion.part.1+0x28>
100133ca:	2302      	movs	r3, #2
100133cc:	4c08      	ldr	r4, [pc, #32]	; (100133f0 <inv_generate_gyro_quaternion.part.1+0x11c>)
100133ce:	1c05      	adds	r5, r0, #0
100133d0:	63a3      	str	r3, [r4, #56]	; 0x38
100133d2:	6a80      	ldr	r0, [r0, #40]	; 0x28
100133d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
100133d6:	4283      	cmp	r3, r0
100133d8:	d198      	bne.n	1001330c <inv_generate_gyro_quaternion.part.1+0x38>
100133da:	6b21      	ldr	r1, [r4, #48]	; 0x30
100133dc:	e7b2      	b.n	10013344 <inv_generate_gyro_quaternion.part.1+0x70>
100133de:	2200      	movs	r2, #0
100133e0:	4b03      	ldr	r3, [pc, #12]	; (100133f0 <inv_generate_gyro_quaternion.part.1+0x11c>)
100133e2:	639a      	str	r2, [r3, #56]	; 0x38
100133e4:	e7d9      	b.n	1001339a <inv_generate_gyro_quaternion.part.1+0xc6>
100133e6:	6a02      	ldr	r2, [r0, #32]
100133e8:	e7e8      	b.n	100133bc <inv_generate_gyro_quaternion.part.1+0xe8>
100133ea:	46c0      	nop			; (mov r8, r8)
100133ec:	0000ffff 	.word	0x0000ffff
100133f0:	1001d48c 	.word	0x1001d48c
100133f4:	49742400 	.word	0x49742400
100133f8:	54442d18 	.word	0x54442d18
100133fc:	400921fb 	.word	0x400921fb
10013400:	40700000 	.word	0x40700000
10013404:	40668000 	.word	0x40668000

10013408 <inv_generate_gyro_quaternion>:
10013408:	b508      	push	{r3, lr}
1001340a:	6b03      	ldr	r3, [r0, #48]	; 0x30
1001340c:	065b      	lsls	r3, r3, #25
1001340e:	d501      	bpl.n	10013414 <inv_generate_gyro_quaternion+0xc>
10013410:	f7ff ff60 	bl	100132d4 <inv_generate_gyro_quaternion.part.1>
10013414:	bd08      	pop	{r3, pc}
10013416:	46c0      	nop			; (mov r8, r8)

10013418 <inv_set_quaternion>:
10013418:	b530      	push	{r4, r5, lr}
1001341a:	4c0a      	ldr	r4, [pc, #40]	; (10013444 <inv_set_quaternion+0x2c>)
1001341c:	b085      	sub	sp, #20
1001341e:	1c05      	adds	r5, r0, #0
10013420:	4669      	mov	r1, sp
10013422:	1c20      	adds	r0, r4, #0
10013424:	f7f7 f856 	bl	1000a4d4 <inv_q_invert>
10013428:	1c22      	adds	r2, r4, #0
1001342a:	1c28      	adds	r0, r5, #0
1001342c:	4669      	mov	r1, sp
1001342e:	3220      	adds	r2, #32
10013430:	f7f6 fed0 	bl	1000a1d4 <inv_q_mult>
10013434:	1c20      	adds	r0, r4, #0
10013436:	1c29      	adds	r1, r5, #0
10013438:	2210      	movs	r2, #16
1001343a:	3010      	adds	r0, #16
1001343c:	f004 ff47 	bl	100182ce <memcpy>
10013440:	b005      	add	sp, #20
10013442:	bd30      	pop	{r4, r5, pc}
10013444:	1001d48c 	.word	0x1001d48c

10013448 <inv_generate_accel_gyro_quaternion>:
10013448:	b5f0      	push	{r4, r5, r6, r7, lr}
1001344a:	4644      	mov	r4, r8
1001344c:	465f      	mov	r7, fp
1001344e:	4656      	mov	r6, sl
10013450:	464d      	mov	r5, r9
10013452:	2250      	movs	r2, #80	; 0x50
10013454:	b4f0      	push	{r4, r5, r6, r7}
10013456:	6f43      	ldr	r3, [r0, #116]	; 0x74
10013458:	b09f      	sub	sp, #124	; 0x7c
1001345a:	1c04      	adds	r4, r0, #0
1001345c:	4013      	ands	r3, r2
1001345e:	2b40      	cmp	r3, #64	; 0x40
10013460:	d100      	bne.n	10013464 <inv_generate_accel_gyro_quaternion+0x1c>
10013462:	e2c1      	b.n	100139e8 <inv_generate_accel_gyro_quaternion+0x5a0>
10013464:	2690      	movs	r6, #144	; 0x90
10013466:	0076      	lsls	r6, r6, #1
10013468:	5983      	ldr	r3, [r0, r6]
1001346a:	4dc2      	ldr	r5, [pc, #776]	; (10013774 <inv_generate_accel_gyro_quaternion+0x32c>)
1001346c:	401a      	ands	r2, r3
1001346e:	2a40      	cmp	r2, #64	; 0x40
10013470:	d100      	bne.n	10013474 <inv_generate_accel_gyro_quaternion+0x2c>
10013472:	e389      	b.n	10013b88 <inv_generate_accel_gyro_quaternion+0x740>
10013474:	05da      	lsls	r2, r3, #23
10013476:	d500      	bpl.n	1001347a <inv_generate_accel_gyro_quaternion+0x32>
10013478:	e18c      	b.n	10013794 <inv_generate_accel_gyro_quaternion+0x34c>
1001347a:	6b23      	ldr	r3, [r4, #48]	; 0x30
1001347c:	065b      	lsls	r3, r3, #25
1001347e:	d500      	bpl.n	10013482 <inv_generate_accel_gyro_quaternion+0x3a>
10013480:	e268      	b.n	10013954 <inv_generate_accel_gyro_quaternion+0x50c>
10013482:	1c2f      	adds	r7, r5, #0
10013484:	1c28      	adds	r0, r5, #0
10013486:	3710      	adds	r7, #16
10013488:	3020      	adds	r0, #32
1001348a:	1c29      	adds	r1, r5, #0
1001348c:	1c3a      	adds	r2, r7, #0
1001348e:	f7f6 fea1 	bl	1000a1d4 <inv_q_mult>
10013492:	6f63      	ldr	r3, [r4, #116]	; 0x74
10013494:	065b      	lsls	r3, r3, #25
10013496:	d572      	bpl.n	1001357e <inv_generate_accel_gyro_quaternion+0x136>
10013498:	2390      	movs	r3, #144	; 0x90
1001349a:	005b      	lsls	r3, r3, #1
1001349c:	58e3      	ldr	r3, [r4, r3]
1001349e:	6b22      	ldr	r2, [r4, #48]	; 0x30
100134a0:	4313      	orrs	r3, r2
100134a2:	05db      	lsls	r3, r3, #23
100134a4:	d400      	bmi.n	100134a8 <inv_generate_accel_gyro_quaternion+0x60>
100134a6:	e072      	b.n	1001358e <inv_generate_accel_gyro_quaternion+0x146>
100134a8:	1c21      	adds	r1, r4, #0
100134aa:	ae12      	add	r6, sp, #72	; 0x48
100134ac:	1c38      	adds	r0, r7, #0
100134ae:	315c      	adds	r1, #92	; 0x5c
100134b0:	1c32      	adds	r2, r6, #0
100134b2:	f7f7 f81b 	bl	1000a4ec <inv_q_rotate>
100134b6:	6e22      	ldr	r2, [r4, #96]	; 0x60
100134b8:	6e67      	ldr	r7, [r4, #100]	; 0x64
100134ba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
100134bc:	4690      	mov	r8, r2
100134be:	6de0      	ldr	r0, [r4, #92]	; 0x5c
100134c0:	17d2      	asrs	r2, r2, #31
100134c2:	17db      	asrs	r3, r3, #31
100134c4:	4692      	mov	sl, r2
100134c6:	17fa      	asrs	r2, r7, #31
100134c8:	4691      	mov	r9, r2
100134ca:	1c19      	adds	r1, r3, #0
100134cc:	1c02      	adds	r2, r0, #0
100134ce:	f001 ff83 	bl	100153d8 <__aeabi_lmul>
100134d2:	4642      	mov	r2, r8
100134d4:	9000      	str	r0, [sp, #0]
100134d6:	9101      	str	r1, [sp, #4]
100134d8:	4653      	mov	r3, sl
100134da:	4640      	mov	r0, r8
100134dc:	4651      	mov	r1, sl
100134de:	f001 ff7b 	bl	100153d8 <__aeabi_lmul>
100134e2:	9a00      	ldr	r2, [sp, #0]
100134e4:	9b01      	ldr	r3, [sp, #4]
100134e6:	1812      	adds	r2, r2, r0
100134e8:	414b      	adcs	r3, r1
100134ea:	1c38      	adds	r0, r7, #0
100134ec:	9200      	str	r2, [sp, #0]
100134ee:	9301      	str	r3, [sp, #4]
100134f0:	4649      	mov	r1, r9
100134f2:	1c3a      	adds	r2, r7, #0
100134f4:	464b      	mov	r3, r9
100134f6:	f001 ff6f 	bl	100153d8 <__aeabi_lmul>
100134fa:	9a00      	ldr	r2, [sp, #0]
100134fc:	9b01      	ldr	r3, [sp, #4]
100134fe:	1880      	adds	r0, r0, r2
10013500:	4159      	adcs	r1, r3
10013502:	2902      	cmp	r1, #2
10013504:	dd00      	ble.n	10013508 <inv_generate_accel_gyro_quaternion+0xc0>
10013506:	e22d      	b.n	10013964 <inv_generate_accel_gyro_quaternion+0x51c>
10013508:	d100      	bne.n	1001350c <inv_generate_accel_gyro_quaternion+0xc4>
1001350a:	e227      	b.n	1001395c <inv_generate_accel_gyro_quaternion+0x514>
1001350c:	6baf      	ldr	r7, [r5, #56]	; 0x38
1001350e:	2f04      	cmp	r7, #4
10013510:	d100      	bne.n	10013514 <inv_generate_accel_gyro_quaternion+0xcc>
10013512:	e25a      	b.n	100139ca <inv_generate_accel_gyro_quaternion+0x582>
10013514:	1ebb      	subs	r3, r7, #2
10013516:	2b01      	cmp	r3, #1
10013518:	d800      	bhi.n	1001351c <inv_generate_accel_gyro_quaternion+0xd4>
1001351a:	e258      	b.n	100139ce <inv_generate_accel_gyro_quaternion+0x586>
1001351c:	2001      	movs	r0, #1
1001351e:	2f01      	cmp	r7, #1
10013520:	d100      	bne.n	10013524 <inv_generate_accel_gyro_quaternion+0xdc>
10013522:	e36a      	b.n	10013bfa <inv_generate_accel_gyro_quaternion+0x7b2>
10013524:	0084      	lsls	r4, r0, #2
10013526:	4894      	ldr	r0, [pc, #592]	; (10013778 <inv_generate_accel_gyro_quaternion+0x330>)
10013528:	4344      	muls	r4, r0
1001352a:	2700      	movs	r7, #0
1001352c:	6870      	ldr	r0, [r6, #4]
1001352e:	1c21      	adds	r1, r4, #0
10013530:	0280      	lsls	r0, r0, #10
10013532:	9716      	str	r7, [sp, #88]	; 0x58
10013534:	f7f6 fe42 	bl	1000a1bc <inv_q30_mult>
10013538:	9b12      	ldr	r3, [sp, #72]	; 0x48
1001353a:	9017      	str	r0, [sp, #92]	; 0x5c
1001353c:	4258      	negs	r0, r3
1001353e:	1c21      	adds	r1, r4, #0
10013540:	0280      	lsls	r0, r0, #10
10013542:	1c2c      	adds	r4, r5, #0
10013544:	f7f6 fe3a 	bl	1000a1bc <inv_q30_mult>
10013548:	3410      	adds	r4, #16
1001354a:	9018      	str	r0, [sp, #96]	; 0x60
1001354c:	1c21      	adds	r1, r4, #0
1001354e:	a816      	add	r0, sp, #88	; 0x58
10013550:	aa1a      	add	r2, sp, #104	; 0x68
10013552:	9719      	str	r7, [sp, #100]	; 0x64
10013554:	f7f6 fe3e 	bl	1000a1d4 <inv_q_mult>
10013558:	1c22      	adds	r2, r4, #0
1001355a:	1c20      	adds	r0, r4, #0
1001355c:	a91a      	add	r1, sp, #104	; 0x68
1001355e:	f7f6 ffa1 	bl	1000a4a4 <inv_q_add>
10013562:	1c20      	adds	r0, r4, #0
10013564:	1c21      	adds	r1, r4, #0
10013566:	f7ff fe25 	bl	100131b4 <inv_normalize_quat>
1001356a:	1c28      	adds	r0, r5, #0
1001356c:	a902      	add	r1, sp, #8
1001356e:	f7f6 ffb1 	bl	1000a4d4 <inv_q_invert>
10013572:	1c2a      	adds	r2, r5, #0
10013574:	1c20      	adds	r0, r4, #0
10013576:	3220      	adds	r2, #32
10013578:	a902      	add	r1, sp, #8
1001357a:	f7f6 fe2b 	bl	1000a1d4 <inv_q_mult>
1001357e:	2000      	movs	r0, #0
10013580:	b01f      	add	sp, #124	; 0x7c
10013582:	bc3c      	pop	{r2, r3, r4, r5}
10013584:	4690      	mov	r8, r2
10013586:	4699      	mov	r9, r3
10013588:	46a2      	mov	sl, r4
1001358a:	46ab      	mov	fp, r5
1001358c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001358e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
10013590:	6de0      	ldr	r0, [r4, #92]	; 0x5c
10013592:	4698      	mov	r8, r3
10013594:	f002 fe1a 	bl	100161cc <__aeabi_i2f>
10013598:	4681      	mov	r9, r0
1001359a:	6e20      	ldr	r0, [r4, #96]	; 0x60
1001359c:	f002 fe16 	bl	100161cc <__aeabi_i2f>
100135a0:	1c07      	adds	r7, r0, #0
100135a2:	6e60      	ldr	r0, [r4, #100]	; 0x64
100135a4:	f002 fe12 	bl	100161cc <__aeabi_i2f>
100135a8:	4649      	mov	r1, r9
100135aa:	1c06      	adds	r6, r0, #0
100135ac:	4648      	mov	r0, r9
100135ae:	f002 fb39 	bl	10015c24 <__aeabi_fmul>
100135b2:	1c39      	adds	r1, r7, #0
100135b4:	4681      	mov	r9, r0
100135b6:	1c38      	adds	r0, r7, #0
100135b8:	f002 fb34 	bl	10015c24 <__aeabi_fmul>
100135bc:	1c01      	adds	r1, r0, #0
100135be:	4648      	mov	r0, r9
100135c0:	f001 fff0 	bl	100155a4 <__aeabi_fadd>
100135c4:	1c31      	adds	r1, r6, #0
100135c6:	1c07      	adds	r7, r0, #0
100135c8:	1c30      	adds	r0, r6, #0
100135ca:	f002 fb2b 	bl	10015c24 <__aeabi_fmul>
100135ce:	1c01      	adds	r1, r0, #0
100135d0:	1c38      	adds	r0, r7, #0
100135d2:	f001 ffe7 	bl	100155a4 <__aeabi_fadd>
100135d6:	f7fd fa79 	bl	10010acc <sqrtf>
100135da:	218d      	movs	r1, #141	; 0x8d
100135dc:	1c06      	adds	r6, r0, #0
100135de:	0040      	lsls	r0, r0, #1
100135e0:	0840      	lsrs	r0, r0, #1
100135e2:	05c9      	lsls	r1, r1, #23
100135e4:	f001 fec0 	bl	10015368 <__aeabi_fcmpgt>
100135e8:	2800      	cmp	r0, #0
100135ea:	d100      	bne.n	100135ee <inv_generate_accel_gyro_quaternion+0x1a6>
100135ec:	e0b5      	b.n	1001375a <inv_generate_accel_gyro_quaternion+0x312>
100135ee:	6928      	ldr	r0, [r5, #16]
100135f0:	f002 fdec 	bl	100161cc <__aeabi_i2f>
100135f4:	21c2      	movs	r1, #194	; 0xc2
100135f6:	0589      	lsls	r1, r1, #22
100135f8:	f002 fb14 	bl	10015c24 <__aeabi_fmul>
100135fc:	901a      	str	r0, [sp, #104]	; 0x68
100135fe:	6968      	ldr	r0, [r5, #20]
10013600:	f002 fde4 	bl	100161cc <__aeabi_i2f>
10013604:	21c2      	movs	r1, #194	; 0xc2
10013606:	0589      	lsls	r1, r1, #22
10013608:	f002 fb0c 	bl	10015c24 <__aeabi_fmul>
1001360c:	af1a      	add	r7, sp, #104	; 0x68
1001360e:	6078      	str	r0, [r7, #4]
10013610:	69a8      	ldr	r0, [r5, #24]
10013612:	f002 fddb 	bl	100161cc <__aeabi_i2f>
10013616:	21c2      	movs	r1, #194	; 0xc2
10013618:	0589      	lsls	r1, r1, #22
1001361a:	f002 fb03 	bl	10015c24 <__aeabi_fmul>
1001361e:	60b8      	str	r0, [r7, #8]
10013620:	69e8      	ldr	r0, [r5, #28]
10013622:	f002 fdd3 	bl	100161cc <__aeabi_i2f>
10013626:	21c2      	movs	r1, #194	; 0xc2
10013628:	0589      	lsls	r1, r1, #22
1001362a:	f002 fafb 	bl	10015c24 <__aeabi_fmul>
1001362e:	2300      	movs	r3, #0
10013630:	60f8      	str	r0, [r7, #12]
10013632:	6de0      	ldr	r0, [r4, #92]	; 0x5c
10013634:	9316      	str	r3, [sp, #88]	; 0x58
10013636:	f002 fdc9 	bl	100161cc <__aeabi_i2f>
1001363a:	1c31      	adds	r1, r6, #0
1001363c:	f002 f928 	bl	10015890 <__aeabi_fdiv>
10013640:	9017      	str	r0, [sp, #92]	; 0x5c
10013642:	6e20      	ldr	r0, [r4, #96]	; 0x60
10013644:	f002 fdc2 	bl	100161cc <__aeabi_i2f>
10013648:	1c31      	adds	r1, r6, #0
1001364a:	f002 f921 	bl	10015890 <__aeabi_fdiv>
1001364e:	9018      	str	r0, [sp, #96]	; 0x60
10013650:	6e60      	ldr	r0, [r4, #100]	; 0x64
10013652:	f002 fdbb 	bl	100161cc <__aeabi_i2f>
10013656:	1c31      	adds	r1, r6, #0
10013658:	f002 f91a 	bl	10015890 <__aeabi_fdiv>
1001365c:	aa06      	add	r2, sp, #24
1001365e:	9019      	str	r0, [sp, #100]	; 0x64
10013660:	a916      	add	r1, sp, #88	; 0x58
10013662:	1c38      	adds	r0, r7, #0
10013664:	f7f6 ff6a 	bl	1000a53c <inv_q_multf>
10013668:	1c38      	adds	r0, r7, #0
1001366a:	a90e      	add	r1, sp, #56	; 0x38
1001366c:	f7f7 f8e6 	bl	1000a83c <inv_q_invertf>
10013670:	aa0a      	add	r2, sp, #40	; 0x28
10013672:	a806      	add	r0, sp, #24
10013674:	a90e      	add	r1, sp, #56	; 0x38
10013676:	f7f6 ff61 	bl	1000a53c <inv_q_multf>
1001367a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1001367c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
1001367e:	1c31      	adds	r1, r6, #0
10013680:	1c30      	adds	r0, r6, #0
10013682:	f002 facf 	bl	10015c24 <__aeabi_fmul>
10013686:	1c21      	adds	r1, r4, #0
10013688:	4681      	mov	r9, r0
1001368a:	1c20      	adds	r0, r4, #0
1001368c:	f002 faca 	bl	10015c24 <__aeabi_fmul>
10013690:	1c01      	adds	r1, r0, #0
10013692:	4648      	mov	r0, r9
10013694:	f001 ff86 	bl	100155a4 <__aeabi_fadd>
10013698:	4938      	ldr	r1, [pc, #224]	; (1001377c <inv_generate_accel_gyro_quaternion+0x334>)
1001369a:	4681      	mov	r9, r0
1001369c:	f001 fe50 	bl	10015340 <__aeabi_fcmplt>
100136a0:	2800      	cmp	r0, #0
100136a2:	d110      	bne.n	100136c6 <inv_generate_accel_gyro_quaternion+0x27e>
100136a4:	4648      	mov	r0, r9
100136a6:	4936      	ldr	r1, [pc, #216]	; (10013780 <inv_generate_accel_gyro_quaternion+0x338>)
100136a8:	f001 fe4a 	bl	10015340 <__aeabi_fcmplt>
100136ac:	2800      	cmp	r0, #0
100136ae:	d000      	beq.n	100136b2 <inv_generate_accel_gyro_quaternion+0x26a>
100136b0:	e2b5      	b.n	10013c1e <inv_generate_accel_gyro_quaternion+0x7d6>
100136b2:	4648      	mov	r0, r9
100136b4:	4933      	ldr	r1, [pc, #204]	; (10013784 <inv_generate_accel_gyro_quaternion+0x33c>)
100136b6:	f001 fe43 	bl	10015340 <__aeabi_fcmplt>
100136ba:	2800      	cmp	r0, #0
100136bc:	d000      	beq.n	100136c0 <inv_generate_accel_gyro_quaternion+0x278>
100136be:	e28d      	b.n	10013bdc <inv_generate_accel_gyro_quaternion+0x794>
100136c0:	4b31      	ldr	r3, [pc, #196]	; (10013788 <inv_generate_accel_gyro_quaternion+0x340>)
100136c2:	4699      	mov	r9, r3
100136c4:	e001      	b.n	100136ca <inv_generate_accel_gyro_quaternion+0x282>
100136c6:	4b31      	ldr	r3, [pc, #196]	; (1001378c <inv_generate_accel_gyro_quaternion+0x344>)
100136c8:	4699      	mov	r9, r3
100136ca:	4640      	mov	r0, r8
100136cc:	f002 fd7e 	bl	100161cc <__aeabi_i2f>
100136d0:	492f      	ldr	r1, [pc, #188]	; (10013790 <inv_generate_accel_gyro_quaternion+0x348>)
100136d2:	f002 f8dd 	bl	10015890 <__aeabi_fdiv>
100136d6:	4649      	mov	r1, r9
100136d8:	f002 faa4 	bl	10015c24 <__aeabi_fmul>
100136dc:	4681      	mov	r9, r0
100136de:	2300      	movs	r3, #0
100136e0:	4649      	mov	r1, r9
100136e2:	1c30      	adds	r0, r6, #0
100136e4:	4698      	mov	r8, r3
100136e6:	9312      	str	r3, [sp, #72]	; 0x48
100136e8:	f002 fa9c 	bl	10015c24 <__aeabi_fmul>
100136ec:	2380      	movs	r3, #128	; 0x80
100136ee:	061b      	lsls	r3, r3, #24
100136f0:	18e1      	adds	r1, r4, r3
100136f2:	9013      	str	r0, [sp, #76]	; 0x4c
100136f4:	4648      	mov	r0, r9
100136f6:	f002 fa95 	bl	10015c24 <__aeabi_fmul>
100136fa:	4643      	mov	r3, r8
100136fc:	9014      	str	r0, [sp, #80]	; 0x50
100136fe:	1c39      	adds	r1, r7, #0
10013700:	a812      	add	r0, sp, #72	; 0x48
10013702:	aa0a      	add	r2, sp, #40	; 0x28
10013704:	9315      	str	r3, [sp, #84]	; 0x54
10013706:	f7f6 ff19 	bl	1000a53c <inv_q_multf>
1001370a:	a80a      	add	r0, sp, #40	; 0x28
1001370c:	1c02      	adds	r2, r0, #0
1001370e:	1c39      	adds	r1, r7, #0
10013710:	f7f6 ff94 	bl	1000a63c <inv_q_addf>
10013714:	a80a      	add	r0, sp, #40	; 0x28
10013716:	f7f7 f83b 	bl	1000a790 <inv_q_norm4>
1001371a:	219d      	movs	r1, #157	; 0x9d
1001371c:	980a      	ldr	r0, [sp, #40]	; 0x28
1001371e:	05c9      	lsls	r1, r1, #23
10013720:	f002 fa80 	bl	10015c24 <__aeabi_fmul>
10013724:	f002 fd30 	bl	10016188 <__aeabi_f2iz>
10013728:	219d      	movs	r1, #157	; 0x9d
1001372a:	6128      	str	r0, [r5, #16]
1001372c:	05c9      	lsls	r1, r1, #23
1001372e:	980b      	ldr	r0, [sp, #44]	; 0x2c
10013730:	f002 fa78 	bl	10015c24 <__aeabi_fmul>
10013734:	f002 fd28 	bl	10016188 <__aeabi_f2iz>
10013738:	219d      	movs	r1, #157	; 0x9d
1001373a:	6168      	str	r0, [r5, #20]
1001373c:	05c9      	lsls	r1, r1, #23
1001373e:	980c      	ldr	r0, [sp, #48]	; 0x30
10013740:	f002 fa70 	bl	10015c24 <__aeabi_fmul>
10013744:	f002 fd20 	bl	10016188 <__aeabi_f2iz>
10013748:	219d      	movs	r1, #157	; 0x9d
1001374a:	61a8      	str	r0, [r5, #24]
1001374c:	05c9      	lsls	r1, r1, #23
1001374e:	980d      	ldr	r0, [sp, #52]	; 0x34
10013750:	f002 fa68 	bl	10015c24 <__aeabi_fmul>
10013754:	f002 fd18 	bl	10016188 <__aeabi_f2iz>
10013758:	61e8      	str	r0, [r5, #28]
1001375a:	1c28      	adds	r0, r5, #0
1001375c:	a902      	add	r1, sp, #8
1001375e:	f7f6 feb9 	bl	1000a4d4 <inv_q_invert>
10013762:	1c28      	adds	r0, r5, #0
10013764:	1c2a      	adds	r2, r5, #0
10013766:	3010      	adds	r0, #16
10013768:	3220      	adds	r2, #32
1001376a:	a902      	add	r1, sp, #8
1001376c:	f7f6 fd32 	bl	1000a1d4 <inv_q_mult>
10013770:	e705      	b.n	1001357e <inv_generate_accel_gyro_quaternion+0x136>
10013772:	46c0      	nop			; (mov r8, r8)
10013774:	1001d48c 	.word	0x1001d48c
10013778:	00c49ba6 	.word	0x00c49ba6
1001377c:	3951b717 	.word	0x3951b717
10013780:	3c23d70a 	.word	0x3c23d70a
10013784:	3e4ccccd 	.word	0x3e4ccccd
10013788:	3ecccccd 	.word	0x3ecccccd
1001378c:	3bc49ba6 	.word	0x3bc49ba6
10013790:	47cd1400 	.word	0x47cd1400
10013794:	065a      	lsls	r2, r3, #25
10013796:	d400      	bmi.n	1001379a <inv_generate_accel_gyro_quaternion+0x352>
10013798:	e673      	b.n	10013482 <inv_generate_accel_gyro_quaternion+0x3a>
1001379a:	2288      	movs	r2, #136	; 0x88
1001379c:	0052      	lsls	r2, r2, #1
1001379e:	58a1      	ldr	r1, [r4, r2]
100137a0:	682a      	ldr	r2, [r5, #0]
100137a2:	1a89      	subs	r1, r1, r2
100137a4:	2296      	movs	r2, #150	; 0x96
100137a6:	0052      	lsls	r2, r2, #1
100137a8:	58a0      	ldr	r0, [r4, r2]
100137aa:	4aef      	ldr	r2, [pc, #956]	; (10013b68 <inv_generate_accel_gyro_quaternion+0x720>)
100137ac:	4342      	muls	r2, r0
100137ae:	4291      	cmp	r1, r2
100137b0:	dc00      	bgt.n	100137b4 <inv_generate_accel_gyro_quaternion+0x36c>
100137b2:	e1f4      	b.n	10013b9e <inv_generate_accel_gyro_quaternion+0x756>
100137b4:	2203      	movs	r2, #3
100137b6:	63aa      	str	r2, [r5, #56]	; 0x38
100137b8:	059b      	lsls	r3, r3, #22
100137ba:	d500      	bpl.n	100137be <inv_generate_accel_gyro_quaternion+0x376>
100137bc:	e1f2      	b.n	10013ba4 <inv_generate_accel_gyro_quaternion+0x75c>
100137be:	ae12      	add	r6, sp, #72	; 0x48
100137c0:	1c30      	adds	r0, r6, #0
100137c2:	2100      	movs	r1, #0
100137c4:	f7f6 fa5e 	bl	10009c84 <inv_get_gyro_bias>
100137c8:	1c29      	adds	r1, r5, #0
100137ca:	1c30      	adds	r0, r6, #0
100137cc:	313c      	adds	r1, #60	; 0x3c
100137ce:	220c      	movs	r2, #12
100137d0:	f004 fd6e 	bl	100182b0 <memcmp>
100137d4:	2800      	cmp	r0, #0
100137d6:	d107      	bne.n	100137e8 <inv_generate_accel_gyro_quaternion+0x3a0>
100137d8:	2394      	movs	r3, #148	; 0x94
100137da:	005b      	lsls	r3, r3, #1
100137dc:	58e3      	ldr	r3, [r4, r3]
100137de:	6daa      	ldr	r2, [r5, #88]	; 0x58
100137e0:	af1a      	add	r7, sp, #104	; 0x68
100137e2:	4293      	cmp	r3, r2
100137e4:	d100      	bne.n	100137e8 <inv_generate_accel_gyro_quaternion+0x3a0>
100137e6:	e096      	b.n	10013916 <inv_generate_accel_gyro_quaternion+0x4ce>
100137e8:	af1a      	add	r7, sp, #104	; 0x68
100137ea:	1c32      	adds	r2, r6, #0
100137ec:	1c3b      	adds	r3, r7, #0
100137ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
100137f0:	8820      	ldrh	r0, [r4, #0]
100137f2:	f7f7 f925 	bl	1000aa40 <inv_convert_to_body_with_scale>
100137f6:	981a      	ldr	r0, [sp, #104]	; 0x68
100137f8:	f002 fce8 	bl	100161cc <__aeabi_i2f>
100137fc:	4682      	mov	sl, r0
100137fe:	6878      	ldr	r0, [r7, #4]
10013800:	f002 fce4 	bl	100161cc <__aeabi_i2f>
10013804:	4681      	mov	r9, r0
10013806:	68b8      	ldr	r0, [r7, #8]
10013808:	f002 fce0 	bl	100161cc <__aeabi_i2f>
1001380c:	4651      	mov	r1, sl
1001380e:	4680      	mov	r8, r0
10013810:	4650      	mov	r0, sl
10013812:	f002 fa07 	bl	10015c24 <__aeabi_fmul>
10013816:	4649      	mov	r1, r9
10013818:	4682      	mov	sl, r0
1001381a:	4648      	mov	r0, r9
1001381c:	f002 fa02 	bl	10015c24 <__aeabi_fmul>
10013820:	1c01      	adds	r1, r0, #0
10013822:	4650      	mov	r0, sl
10013824:	f001 febe 	bl	100155a4 <__aeabi_fadd>
10013828:	4641      	mov	r1, r8
1001382a:	4681      	mov	r9, r0
1001382c:	4640      	mov	r0, r8
1001382e:	f002 f9f9 	bl	10015c24 <__aeabi_fmul>
10013832:	1c01      	adds	r1, r0, #0
10013834:	4648      	mov	r0, r9
10013836:	f001 feb5 	bl	100155a4 <__aeabi_fadd>
1001383a:	f7fd f947 	bl	10010acc <sqrtf>
1001383e:	2394      	movs	r3, #148	; 0x94
10013840:	005b      	lsls	r3, r3, #1
10013842:	58e3      	ldr	r3, [r4, r3]
10013844:	49c9      	ldr	r1, [pc, #804]	; (10013b6c <inv_generate_accel_gyro_quaternion+0x724>)
10013846:	4699      	mov	r9, r3
10013848:	4680      	mov	r8, r0
1001384a:	f002 f9eb 	bl	10015c24 <__aeabi_fmul>
1001384e:	49c8      	ldr	r1, [pc, #800]	; (10013b70 <inv_generate_accel_gyro_quaternion+0x728>)
10013850:	f002 f81e 	bl	10015890 <__aeabi_fdiv>
10013854:	21de      	movs	r1, #222	; 0xde
10013856:	0589      	lsls	r1, r1, #22
10013858:	f002 f9e4 	bl	10015c24 <__aeabi_fmul>
1001385c:	4682      	mov	sl, r0
1001385e:	4648      	mov	r0, r9
10013860:	f002 fcb4 	bl	100161cc <__aeabi_i2f>
10013864:	1c01      	adds	r1, r0, #0
10013866:	4650      	mov	r0, sl
10013868:	f002 f9dc 	bl	10015c24 <__aeabi_fmul>
1001386c:	49c1      	ldr	r1, [pc, #772]	; (10013b74 <inv_generate_accel_gyro_quaternion+0x72c>)
1001386e:	f002 f80f 	bl	10015890 <__aeabi_fdiv>
10013872:	21fc      	movs	r1, #252	; 0xfc
10013874:	0589      	lsls	r1, r1, #22
10013876:	f002 f9d5 	bl	10015c24 <__aeabi_fmul>
1001387a:	4682      	mov	sl, r0
1001387c:	f000 fa48 	bl	10013d10 <cosf>
10013880:	4683      	mov	fp, r0
10013882:	4650      	mov	r0, sl
10013884:	f000 fa82 	bl	10013d8c <sinf>
10013888:	2180      	movs	r1, #128	; 0x80
1001388a:	4682      	mov	sl, r0
1001388c:	05c9      	lsls	r1, r1, #23
1001388e:	4640      	mov	r0, r8
10013890:	f001 fd56 	bl	10015340 <__aeabi_fcmplt>
10013894:	2800      	cmp	r0, #0
10013896:	d000      	beq.n	1001389a <inv_generate_accel_gyro_quaternion+0x452>
10013898:	e18b      	b.n	10013bb2 <inv_generate_accel_gyro_quaternion+0x76a>
1001389a:	219d      	movs	r1, #157	; 0x9d
1001389c:	4658      	mov	r0, fp
1001389e:	05c9      	lsls	r1, r1, #23
100138a0:	f002 f9c0 	bl	10015c24 <__aeabi_fmul>
100138a4:	f002 fc70 	bl	10016188 <__aeabi_f2iz>
100138a8:	2380      	movs	r3, #128	; 0x80
100138aa:	219d      	movs	r1, #157	; 0x9d
100138ac:	061b      	lsls	r3, r3, #24
100138ae:	4453      	add	r3, sl
100138b0:	05c9      	lsls	r1, r1, #23
100138b2:	64a8      	str	r0, [r5, #72]	; 0x48
100138b4:	1c18      	adds	r0, r3, #0
100138b6:	f002 f9b5 	bl	10015c24 <__aeabi_fmul>
100138ba:	4682      	mov	sl, r0
100138bc:	981a      	ldr	r0, [sp, #104]	; 0x68
100138be:	f002 fc85 	bl	100161cc <__aeabi_i2f>
100138c2:	1c01      	adds	r1, r0, #0
100138c4:	4650      	mov	r0, sl
100138c6:	f002 f9ad 	bl	10015c24 <__aeabi_fmul>
100138ca:	4641      	mov	r1, r8
100138cc:	f001 ffe0 	bl	10015890 <__aeabi_fdiv>
100138d0:	f002 fc5a 	bl	10016188 <__aeabi_f2iz>
100138d4:	64e8      	str	r0, [r5, #76]	; 0x4c
100138d6:	6878      	ldr	r0, [r7, #4]
100138d8:	f002 fc78 	bl	100161cc <__aeabi_i2f>
100138dc:	1c01      	adds	r1, r0, #0
100138de:	4650      	mov	r0, sl
100138e0:	f002 f9a0 	bl	10015c24 <__aeabi_fmul>
100138e4:	4641      	mov	r1, r8
100138e6:	f001 ffd3 	bl	10015890 <__aeabi_fdiv>
100138ea:	f002 fc4d 	bl	10016188 <__aeabi_f2iz>
100138ee:	6528      	str	r0, [r5, #80]	; 0x50
100138f0:	68b8      	ldr	r0, [r7, #8]
100138f2:	f002 fc6b 	bl	100161cc <__aeabi_i2f>
100138f6:	1c01      	adds	r1, r0, #0
100138f8:	4650      	mov	r0, sl
100138fa:	f002 f993 	bl	10015c24 <__aeabi_fmul>
100138fe:	4641      	mov	r1, r8
10013900:	f001 ffc6 	bl	10015890 <__aeabi_fdiv>
10013904:	f002 fc40 	bl	10016188 <__aeabi_f2iz>
10013908:	6568      	str	r0, [r5, #84]	; 0x54
1001390a:	1c2b      	adds	r3, r5, #0
1001390c:	333c      	adds	r3, #60	; 0x3c
1001390e:	ce07      	ldmia	r6!, {r0, r1, r2}
10013910:	c307      	stmia	r3!, {r0, r1, r2}
10013912:	464b      	mov	r3, r9
10013914:	65ab      	str	r3, [r5, #88]	; 0x58
10013916:	1c26      	adds	r6, r4, #0
10013918:	1c29      	adds	r1, r5, #0
1001391a:	3611      	adds	r6, #17
1001391c:	36ff      	adds	r6, #255	; 0xff
1001391e:	1c30      	adds	r0, r6, #0
10013920:	1c3a      	adds	r2, r7, #0
10013922:	3148      	adds	r1, #72	; 0x48
10013924:	f7f6 fc56 	bl	1000a1d4 <inv_q_mult>
10013928:	235c      	movs	r3, #92	; 0x5c
1001392a:	4698      	mov	r8, r3
1001392c:	44a8      	add	r8, r5
1001392e:	aa16      	add	r2, sp, #88	; 0x58
10013930:	4640      	mov	r0, r8
10013932:	1c39      	adds	r1, r7, #0
10013934:	f7f6 fc4e 	bl	1000a1d4 <inv_q_mult>
10013938:	1c30      	adds	r0, r6, #0
1001393a:	4641      	mov	r1, r8
1001393c:	f7f6 fdca 	bl	1000a4d4 <inv_q_invert>
10013940:	1c28      	adds	r0, r5, #0
10013942:	a916      	add	r1, sp, #88	; 0x58
10013944:	1c3a      	adds	r2, r7, #0
10013946:	f7f6 fc45 	bl	1000a1d4 <inv_q_mult>
1001394a:	1c38      	adds	r0, r7, #0
1001394c:	1c29      	adds	r1, r5, #0
1001394e:	f7ff fc31 	bl	100131b4 <inv_normalize_quat>
10013952:	e596      	b.n	10013482 <inv_generate_accel_gyro_quaternion+0x3a>
10013954:	1c20      	adds	r0, r4, #0
10013956:	f7ff fcbd 	bl	100132d4 <inv_generate_gyro_quaternion.part.1>
1001395a:	e592      	b.n	10013482 <inv_generate_accel_gyro_quaternion+0x3a>
1001395c:	4b86      	ldr	r3, [pc, #536]	; (10013b78 <inv_generate_accel_gyro_quaternion+0x730>)
1001395e:	4298      	cmp	r0, r3
10013960:	d800      	bhi.n	10013964 <inv_generate_accel_gyro_quaternion+0x51c>
10013962:	e5d3      	b.n	1001350c <inv_generate_accel_gyro_quaternion+0xc4>
10013964:	a80e      	add	r0, sp, #56	; 0x38
10013966:	f7f7 fa21 	bl	1000adac <inv_get_linear_accel>
1001396a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1001396c:	9f10      	ldr	r7, [sp, #64]	; 0x40
1001396e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10013970:	4690      	mov	r8, r2
10013972:	980e      	ldr	r0, [sp, #56]	; 0x38
10013974:	17d2      	asrs	r2, r2, #31
10013976:	17db      	asrs	r3, r3, #31
10013978:	4692      	mov	sl, r2
1001397a:	17fa      	asrs	r2, r7, #31
1001397c:	4691      	mov	r9, r2
1001397e:	1c19      	adds	r1, r3, #0
10013980:	1c02      	adds	r2, r0, #0
10013982:	f001 fd29 	bl	100153d8 <__aeabi_lmul>
10013986:	4642      	mov	r2, r8
10013988:	9000      	str	r0, [sp, #0]
1001398a:	9101      	str	r1, [sp, #4]
1001398c:	4653      	mov	r3, sl
1001398e:	4640      	mov	r0, r8
10013990:	4651      	mov	r1, sl
10013992:	f001 fd21 	bl	100153d8 <__aeabi_lmul>
10013996:	9a00      	ldr	r2, [sp, #0]
10013998:	9b01      	ldr	r3, [sp, #4]
1001399a:	1812      	adds	r2, r2, r0
1001399c:	414b      	adcs	r3, r1
1001399e:	1c38      	adds	r0, r7, #0
100139a0:	9200      	str	r2, [sp, #0]
100139a2:	9301      	str	r3, [sp, #4]
100139a4:	4649      	mov	r1, r9
100139a6:	1c3a      	adds	r2, r7, #0
100139a8:	464b      	mov	r3, r9
100139aa:	f001 fd15 	bl	100153d8 <__aeabi_lmul>
100139ae:	9a00      	ldr	r2, [sp, #0]
100139b0:	9b01      	ldr	r3, [sp, #4]
100139b2:	1880      	adds	r0, r0, r2
100139b4:	4159      	adcs	r1, r3
100139b6:	2902      	cmp	r1, #2
100139b8:	dc05      	bgt.n	100139c6 <inv_generate_accel_gyro_quaternion+0x57e>
100139ba:	d000      	beq.n	100139be <inv_generate_accel_gyro_quaternion+0x576>
100139bc:	e5a6      	b.n	1001350c <inv_generate_accel_gyro_quaternion+0xc4>
100139be:	4b6e      	ldr	r3, [pc, #440]	; (10013b78 <inv_generate_accel_gyro_quaternion+0x730>)
100139c0:	4298      	cmp	r0, r3
100139c2:	d800      	bhi.n	100139c6 <inv_generate_accel_gyro_quaternion+0x57e>
100139c4:	e5a2      	b.n	1001350c <inv_generate_accel_gyro_quaternion+0xc4>
100139c6:	2304      	movs	r3, #4
100139c8:	63ab      	str	r3, [r5, #56]	; 0x38
100139ca:	2400      	movs	r4, #0
100139cc:	e5ad      	b.n	1001352a <inv_generate_accel_gyro_quaternion+0xe2>
100139ce:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
100139d0:	496a      	ldr	r1, [pc, #424]	; (10013b7c <inv_generate_accel_gyro_quaternion+0x734>)
100139d2:	f001 fb79 	bl	100150c8 <__aeabi_idiv>
100139d6:	2800      	cmp	r0, #0
100139d8:	dc00      	bgt.n	100139dc <inv_generate_accel_gyro_quaternion+0x594>
100139da:	e103      	b.n	10013be4 <inv_generate_accel_gyro_quaternion+0x79c>
100139dc:	2f03      	cmp	r7, #3
100139de:	d000      	beq.n	100139e2 <inv_generate_accel_gyro_quaternion+0x59a>
100139e0:	e5a0      	b.n	10013524 <inv_generate_accel_gyro_quaternion+0xdc>
100139e2:	4c67      	ldr	r4, [pc, #412]	; (10013b80 <inv_generate_accel_gyro_quaternion+0x738>)
100139e4:	4344      	muls	r4, r0
100139e6:	e5a0      	b.n	1001352a <inv_generate_accel_gyro_quaternion+0xe2>
100139e8:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
100139ea:	f002 fbef 	bl	100161cc <__aeabi_i2f>
100139ee:	1c07      	adds	r7, r0, #0
100139f0:	6e20      	ldr	r0, [r4, #96]	; 0x60
100139f2:	f002 fbeb 	bl	100161cc <__aeabi_i2f>
100139f6:	1c06      	adds	r6, r0, #0
100139f8:	6e60      	ldr	r0, [r4, #100]	; 0x64
100139fa:	f002 fbe7 	bl	100161cc <__aeabi_i2f>
100139fe:	1c39      	adds	r1, r7, #0
10013a00:	1c05      	adds	r5, r0, #0
10013a02:	1c38      	adds	r0, r7, #0
10013a04:	f002 f90e 	bl	10015c24 <__aeabi_fmul>
10013a08:	1c31      	adds	r1, r6, #0
10013a0a:	1c07      	adds	r7, r0, #0
10013a0c:	1c30      	adds	r0, r6, #0
10013a0e:	f002 f909 	bl	10015c24 <__aeabi_fmul>
10013a12:	1c01      	adds	r1, r0, #0
10013a14:	1c38      	adds	r0, r7, #0
10013a16:	f001 fdc5 	bl	100155a4 <__aeabi_fadd>
10013a1a:	1c29      	adds	r1, r5, #0
10013a1c:	1c06      	adds	r6, r0, #0
10013a1e:	1c28      	adds	r0, r5, #0
10013a20:	f002 f900 	bl	10015c24 <__aeabi_fmul>
10013a24:	1c01      	adds	r1, r0, #0
10013a26:	1c30      	adds	r0, r6, #0
10013a28:	f001 fdbc 	bl	100155a4 <__aeabi_fadd>
10013a2c:	f7fd f84e 	bl	10010acc <sqrtf>
10013a30:	21fe      	movs	r1, #254	; 0xfe
10013a32:	0589      	lsls	r1, r1, #22
10013a34:	1c05      	adds	r5, r0, #0
10013a36:	f001 fc8d 	bl	10015354 <__aeabi_fcmple>
10013a3a:	2800      	cmp	r0, #0
10013a3c:	d000      	beq.n	10013a40 <inv_generate_accel_gyro_quaternion+0x5f8>
10013a3e:	e0d3      	b.n	10013be8 <inv_generate_accel_gyro_quaternion+0x7a0>
10013a40:	6e60      	ldr	r0, [r4, #100]	; 0x64
10013a42:	f002 fbc3 	bl	100161cc <__aeabi_i2f>
10013a46:	1c29      	adds	r1, r5, #0
10013a48:	f001 ff22 	bl	10015890 <__aeabi_fdiv>
10013a4c:	1c05      	adds	r5, r0, #0
10013a4e:	20fe      	movs	r0, #254	; 0xfe
10013a50:	1c29      	adds	r1, r5, #0
10013a52:	0580      	lsls	r0, r0, #22
10013a54:	f002 f9fa 	bl	10015e4c <__aeabi_fsub>
10013a58:	2100      	movs	r1, #0
10013a5a:	1c06      	adds	r6, r0, #0
10013a5c:	f001 fc84 	bl	10015368 <__aeabi_fcmpgt>
10013a60:	2800      	cmp	r0, #0
10013a62:	d100      	bne.n	10013a66 <inv_generate_accel_gyro_quaternion+0x61e>
10013a64:	e0de      	b.n	10013c24 <inv_generate_accel_gyro_quaternion+0x7dc>
10013a66:	21fc      	movs	r1, #252	; 0xfc
10013a68:	1c30      	adds	r0, r6, #0
10013a6a:	0589      	lsls	r1, r1, #22
10013a6c:	f002 f8da 	bl	10015c24 <__aeabi_fmul>
10013a70:	f7fd f82c 	bl	10010acc <sqrtf>
10013a74:	21fe      	movs	r1, #254	; 0xfe
10013a76:	1c06      	adds	r6, r0, #0
10013a78:	0589      	lsls	r1, r1, #22
10013a7a:	1c28      	adds	r0, r5, #0
10013a7c:	f001 fd92 	bl	100155a4 <__aeabi_fadd>
10013a80:	2100      	movs	r1, #0
10013a82:	1c05      	adds	r5, r0, #0
10013a84:	f001 fc70 	bl	10015368 <__aeabi_fcmpgt>
10013a88:	2800      	cmp	r0, #0
10013a8a:	d100      	bne.n	10013a8e <inv_generate_accel_gyro_quaternion+0x646>
10013a8c:	e0cc      	b.n	10013c28 <inv_generate_accel_gyro_quaternion+0x7e0>
10013a8e:	21fc      	movs	r1, #252	; 0xfc
10013a90:	1c28      	adds	r0, r5, #0
10013a92:	0589      	lsls	r1, r1, #22
10013a94:	f002 f8c6 	bl	10015c24 <__aeabi_fmul>
10013a98:	f7fd f818 	bl	10010acc <sqrtf>
10013a9c:	4681      	mov	r9, r0
10013a9e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
10013aa0:	f002 fb94 	bl	100161cc <__aeabi_i2f>
10013aa4:	1c07      	adds	r7, r0, #0
10013aa6:	6e20      	ldr	r0, [r4, #96]	; 0x60
10013aa8:	f002 fb90 	bl	100161cc <__aeabi_i2f>
10013aac:	1c39      	adds	r1, r7, #0
10013aae:	1c05      	adds	r5, r0, #0
10013ab0:	1c38      	adds	r0, r7, #0
10013ab2:	f002 f8b7 	bl	10015c24 <__aeabi_fmul>
10013ab6:	1c29      	adds	r1, r5, #0
10013ab8:	1c07      	adds	r7, r0, #0
10013aba:	1c28      	adds	r0, r5, #0
10013abc:	f002 f8b2 	bl	10015c24 <__aeabi_fmul>
10013ac0:	1c01      	adds	r1, r0, #0
10013ac2:	1c38      	adds	r0, r7, #0
10013ac4:	f001 fd6e 	bl	100155a4 <__aeabi_fadd>
10013ac8:	f7fd f800 	bl	10010acc <sqrtf>
10013acc:	21fe      	movs	r1, #254	; 0xfe
10013ace:	0589      	lsls	r1, r1, #22
10013ad0:	1c07      	adds	r7, r0, #0
10013ad2:	f001 fc3f 	bl	10015354 <__aeabi_fcmple>
10013ad6:	4680      	mov	r8, r0
10013ad8:	2800      	cmp	r0, #0
10013ada:	d000      	beq.n	10013ade <inv_generate_accel_gyro_quaternion+0x696>
10013adc:	e084      	b.n	10013be8 <inv_generate_accel_gyro_quaternion+0x7a0>
10013ade:	219d      	movs	r1, #157	; 0x9d
10013ae0:	4648      	mov	r0, r9
10013ae2:	05c9      	lsls	r1, r1, #23
10013ae4:	f002 f89e 	bl	10015c24 <__aeabi_fmul>
10013ae8:	f002 fb4e 	bl	10016188 <__aeabi_f2iz>
10013aec:	4d25      	ldr	r5, [pc, #148]	; (10013b84 <inv_generate_accel_gyro_quaternion+0x73c>)
10013aee:	6128      	str	r0, [r5, #16]
10013af0:	6e20      	ldr	r0, [r4, #96]	; 0x60
10013af2:	f002 fb6b 	bl	100161cc <__aeabi_i2f>
10013af6:	1c39      	adds	r1, r7, #0
10013af8:	f001 feca 	bl	10015890 <__aeabi_fdiv>
10013afc:	1c01      	adds	r1, r0, #0
10013afe:	1c30      	adds	r0, r6, #0
10013b00:	f002 f890 	bl	10015c24 <__aeabi_fmul>
10013b04:	219d      	movs	r1, #157	; 0x9d
10013b06:	05c9      	lsls	r1, r1, #23
10013b08:	f002 f88c 	bl	10015c24 <__aeabi_fmul>
10013b0c:	f002 fb3c 	bl	10016188 <__aeabi_f2iz>
10013b10:	2380      	movs	r3, #128	; 0x80
10013b12:	061b      	lsls	r3, r3, #24
10013b14:	469c      	mov	ip, r3
10013b16:	6168      	str	r0, [r5, #20]
10013b18:	6de0      	ldr	r0, [r4, #92]	; 0x5c
10013b1a:	4466      	add	r6, ip
10013b1c:	f002 fb56 	bl	100161cc <__aeabi_i2f>
10013b20:	1c39      	adds	r1, r7, #0
10013b22:	f001 feb5 	bl	10015890 <__aeabi_fdiv>
10013b26:	1c01      	adds	r1, r0, #0
10013b28:	1c30      	adds	r0, r6, #0
10013b2a:	f002 f87b 	bl	10015c24 <__aeabi_fmul>
10013b2e:	219d      	movs	r1, #157	; 0x9d
10013b30:	05c9      	lsls	r1, r1, #23
10013b32:	f002 f877 	bl	10015c24 <__aeabi_fmul>
10013b36:	f002 fb27 	bl	10016188 <__aeabi_f2iz>
10013b3a:	4643      	mov	r3, r8
10013b3c:	61a8      	str	r0, [r5, #24]
10013b3e:	61eb      	str	r3, [r5, #28]
10013b40:	2390      	movs	r3, #144	; 0x90
10013b42:	005b      	lsls	r3, r3, #1
10013b44:	58e3      	ldr	r3, [r4, r3]
10013b46:	05db      	lsls	r3, r3, #23
10013b48:	d461      	bmi.n	10013c0e <inv_generate_accel_gyro_quaternion+0x7c6>
10013b4a:	1c28      	adds	r0, r5, #0
10013b4c:	a902      	add	r1, sp, #8
10013b4e:	f7f6 fcc1 	bl	1000a4d4 <inv_q_invert>
10013b52:	1c28      	adds	r0, r5, #0
10013b54:	1c2a      	adds	r2, r5, #0
10013b56:	3010      	adds	r0, #16
10013b58:	3220      	adds	r2, #32
10013b5a:	a902      	add	r1, sp, #8
10013b5c:	f7f6 fb3a 	bl	1000a1d4 <inv_q_mult>
10013b60:	2390      	movs	r3, #144	; 0x90
10013b62:	005b      	lsls	r3, r3, #1
10013b64:	58e3      	ldr	r3, [r4, r3]
10013b66:	e485      	b.n	10013474 <inv_generate_accel_gyro_quaternion+0x2c>
10013b68:	001c9871 	.word	0x001c9871
10013b6c:	40490fdb 	.word	0x40490fdb
10013b70:	43340000 	.word	0x43340000
10013b74:	49742400 	.word	0x49742400
10013b78:	3fffffff 	.word	0x3fffffff
10013b7c:	00001388 	.word	0x00001388
10013b80:	00c49ba6 	.word	0x00c49ba6
10013b84:	1001d48c 	.word	0x1001d48c
10013b88:	1c29      	adds	r1, r5, #0
10013b8a:	3011      	adds	r0, #17
10013b8c:	315c      	adds	r1, #92	; 0x5c
10013b8e:	30ff      	adds	r0, #255	; 0xff
10013b90:	f7f6 fca0 	bl	1000a4d4 <inv_q_invert>
10013b94:	6f63      	ldr	r3, [r4, #116]	; 0x74
10013b96:	05db      	lsls	r3, r3, #23
10013b98:	d413      	bmi.n	10013bc2 <inv_generate_accel_gyro_quaternion+0x77a>
10013b9a:	59a3      	ldr	r3, [r4, r6]
10013b9c:	e46a      	b.n	10013474 <inv_generate_accel_gyro_quaternion+0x2c>
10013b9e:	2202      	movs	r2, #2
10013ba0:	63aa      	str	r2, [r5, #56]	; 0x38
10013ba2:	e609      	b.n	100137b8 <inv_generate_accel_gyro_quaternion+0x370>
10013ba4:	1c20      	adds	r0, r4, #0
10013ba6:	3011      	adds	r0, #17
10013ba8:	30ff      	adds	r0, #255	; 0xff
10013baa:	1c29      	adds	r1, r5, #0
10013bac:	f7ff fb02 	bl	100131b4 <inv_normalize_quat>
10013bb0:	e467      	b.n	10013482 <inv_generate_accel_gyro_quaternion+0x3a>
10013bb2:	2380      	movs	r3, #128	; 0x80
10013bb4:	05db      	lsls	r3, r3, #23
10013bb6:	64ab      	str	r3, [r5, #72]	; 0x48
10013bb8:	2300      	movs	r3, #0
10013bba:	64eb      	str	r3, [r5, #76]	; 0x4c
10013bbc:	652b      	str	r3, [r5, #80]	; 0x50
10013bbe:	656b      	str	r3, [r5, #84]	; 0x54
10013bc0:	e6a3      	b.n	1001390a <inv_generate_accel_gyro_quaternion+0x4c2>
10013bc2:	1c28      	adds	r0, r5, #0
10013bc4:	a902      	add	r1, sp, #8
10013bc6:	f7f6 fc85 	bl	1000a4d4 <inv_q_invert>
10013bca:	1c28      	adds	r0, r5, #0
10013bcc:	1c2a      	adds	r2, r5, #0
10013bce:	3010      	adds	r0, #16
10013bd0:	3220      	adds	r2, #32
10013bd2:	a902      	add	r1, sp, #8
10013bd4:	f7f6 fafe 	bl	1000a1d4 <inv_q_mult>
10013bd8:	59a3      	ldr	r3, [r4, r6]
10013bda:	e44b      	b.n	10013474 <inv_generate_accel_gyro_quaternion+0x2c>
10013bdc:	23fa      	movs	r3, #250	; 0xfa
10013bde:	059b      	lsls	r3, r3, #22
10013be0:	4699      	mov	r9, r3
10013be2:	e572      	b.n	100136ca <inv_generate_accel_gyro_quaternion+0x282>
10013be4:	2001      	movs	r0, #1
10013be6:	e6f9      	b.n	100139dc <inv_generate_accel_gyro_quaternion+0x594>
10013be8:	2380      	movs	r3, #128	; 0x80
10013bea:	4d11      	ldr	r5, [pc, #68]	; (10013c30 <inv_generate_accel_gyro_quaternion+0x7e8>)
10013bec:	05db      	lsls	r3, r3, #23
10013bee:	612b      	str	r3, [r5, #16]
10013bf0:	2300      	movs	r3, #0
10013bf2:	616b      	str	r3, [r5, #20]
10013bf4:	61ab      	str	r3, [r5, #24]
10013bf6:	61eb      	str	r3, [r5, #28]
10013bf8:	e7a2      	b.n	10013b40 <inv_generate_accel_gyro_quaternion+0x6f8>
10013bfa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
10013bfc:	490d      	ldr	r1, [pc, #52]	; (10013c34 <inv_generate_accel_gyro_quaternion+0x7ec>)
10013bfe:	f001 fa63 	bl	100150c8 <__aeabi_idiv>
10013c02:	2800      	cmp	r0, #0
10013c04:	dd12      	ble.n	10013c2c <inv_generate_accel_gyro_quaternion+0x7e4>
10013c06:	4c0c      	ldr	r4, [pc, #48]	; (10013c38 <inv_generate_accel_gyro_quaternion+0x7f0>)
10013c08:	00c0      	lsls	r0, r0, #3
10013c0a:	4344      	muls	r4, r0
10013c0c:	e48d      	b.n	1001352a <inv_generate_accel_gyro_quaternion+0xe2>
10013c0e:	1c20      	adds	r0, r4, #0
10013c10:	1c29      	adds	r1, r5, #0
10013c12:	3011      	adds	r0, #17
10013c14:	315c      	adds	r1, #92	; 0x5c
10013c16:	30ff      	adds	r0, #255	; 0xff
10013c18:	f7f6 fc5c 	bl	1000a4d4 <inv_q_invert>
10013c1c:	e795      	b.n	10013b4a <inv_generate_accel_gyro_quaternion+0x702>
10013c1e:	4b07      	ldr	r3, [pc, #28]	; (10013c3c <inv_generate_accel_gyro_quaternion+0x7f4>)
10013c20:	4699      	mov	r9, r3
10013c22:	e552      	b.n	100136ca <inv_generate_accel_gyro_quaternion+0x282>
10013c24:	2000      	movs	r0, #0
10013c26:	e723      	b.n	10013a70 <inv_generate_accel_gyro_quaternion+0x628>
10013c28:	2000      	movs	r0, #0
10013c2a:	e735      	b.n	10013a98 <inv_generate_accel_gyro_quaternion+0x650>
10013c2c:	4c04      	ldr	r4, [pc, #16]	; (10013c40 <inv_generate_accel_gyro_quaternion+0x7f8>)
10013c2e:	e47c      	b.n	1001352a <inv_generate_accel_gyro_quaternion+0xe2>
10013c30:	1001d48c 	.word	0x1001d48c
10013c34:	00001388 	.word	0x00001388
10013c38:	00c49ba6 	.word	0x00c49ba6
10013c3c:	3d75c28f 	.word	0x3d75c28f
10013c40:	0624dd30 	.word	0x0624dd30

10013c44 <inv_generate_quaternion>:
10013c44:	2280      	movs	r2, #128	; 0x80
10013c46:	b538      	push	{r3, r4, r5, lr}
10013c48:	6b03      	ldr	r3, [r0, #48]	; 0x30
10013c4a:	0052      	lsls	r2, r2, #1
10013c4c:	4213      	tst	r3, r2
10013c4e:	d102      	bne.n	10013c56 <inv_generate_quaternion+0x12>
10013c50:	6f43      	ldr	r3, [r0, #116]	; 0x74
10013c52:	4213      	tst	r3, r2
10013c54:	d012      	beq.n	10013c7c <inv_generate_quaternion+0x38>
10013c56:	2390      	movs	r3, #144	; 0x90
10013c58:	22c0      	movs	r2, #192	; 0xc0
10013c5a:	005b      	lsls	r3, r3, #1
10013c5c:	58c3      	ldr	r3, [r0, r3]
10013c5e:	0092      	lsls	r2, r2, #2
10013c60:	1c04      	adds	r4, r0, #0
10013c62:	4013      	ands	r3, r2
10013c64:	4293      	cmp	r3, r2
10013c66:	d014      	beq.n	10013c92 <inv_generate_quaternion+0x4e>
10013c68:	f7ff fbee 	bl	10013448 <inv_generate_accel_gyro_quaternion>
10013c6c:	4d0e      	ldr	r5, [pc, #56]	; (10013ca8 <inv_generate_quaternion+0x64>)
10013c6e:	1c28      	adds	r0, r5, #0
10013c70:	6ba1      	ldr	r1, [r4, #56]	; 0x38
10013c72:	3010      	adds	r0, #16
10013c74:	f7f6 ff9a 	bl	1000abac <inv_store_gaming_quaternion>
10013c78:	2000      	movs	r0, #0
10013c7a:	bd38      	pop	{r3, r4, r5, pc}
10013c7c:	2390      	movs	r3, #144	; 0x90
10013c7e:	005b      	lsls	r3, r3, #1
10013c80:	58c3      	ldr	r3, [r0, r3]
10013c82:	4213      	tst	r3, r2
10013c84:	d0f8      	beq.n	10013c78 <inv_generate_quaternion+0x34>
10013c86:	22c0      	movs	r2, #192	; 0xc0
10013c88:	0092      	lsls	r2, r2, #2
10013c8a:	1c04      	adds	r4, r0, #0
10013c8c:	4013      	ands	r3, r2
10013c8e:	4293      	cmp	r3, r2
10013c90:	d1ea      	bne.n	10013c68 <inv_generate_quaternion+0x24>
10013c92:	4d05      	ldr	r5, [pc, #20]	; (10013ca8 <inv_generate_quaternion+0x64>)
10013c94:	1c21      	adds	r1, r4, #0
10013c96:	1c28      	adds	r0, r5, #0
10013c98:	3111      	adds	r1, #17
10013c9a:	31ff      	adds	r1, #255	; 0xff
10013c9c:	2210      	movs	r2, #16
10013c9e:	3010      	adds	r0, #16
10013ca0:	f004 fb15 	bl	100182ce <memcpy>
10013ca4:	e7e3      	b.n	10013c6e <inv_generate_quaternion+0x2a>
10013ca6:	46c0      	nop			; (mov r8, r8)
10013ca8:	1001d48c 	.word	0x1001d48c

10013cac <inv_stop_quaternion>:
10013cac:	b508      	push	{r3, lr}
10013cae:	4802      	ldr	r0, [pc, #8]	; (10013cb8 <inv_stop_quaternion+0xc>)
10013cb0:	f7f6 f87c 	bl	10009dac <inv_unregister_data_cb>
10013cb4:	bd08      	pop	{r3, pc}
10013cb6:	46c0      	nop			; (mov r8, r8)
10013cb8:	10013c45 	.word	0x10013c45

10013cbc <inv_init_quaternion>:
10013cbc:	b510      	push	{r4, lr}
10013cbe:	4c07      	ldr	r4, [pc, #28]	; (10013cdc <inv_init_quaternion+0x20>)
10013cc0:	2100      	movs	r1, #0
10013cc2:	1c20      	adds	r0, r4, #0
10013cc4:	226c      	movs	r2, #108	; 0x6c
10013cc6:	f004 fb20 	bl	1001830a <memset>
10013cca:	2380      	movs	r3, #128	; 0x80
10013ccc:	05db      	lsls	r3, r3, #23
10013cce:	2000      	movs	r0, #0
10013cd0:	6123      	str	r3, [r4, #16]
10013cd2:	6023      	str	r3, [r4, #0]
10013cd4:	6223      	str	r3, [r4, #32]
10013cd6:	63e3      	str	r3, [r4, #60]	; 0x3c
10013cd8:	65e3      	str	r3, [r4, #92]	; 0x5c
10013cda:	bd10      	pop	{r4, pc}
10013cdc:	1001d48c 	.word	0x1001d48c

10013ce0 <inv_enable_quaternion>:
10013ce0:	b508      	push	{r3, lr}
10013ce2:	f7ff ffeb 	bl	10013cbc <inv_init_quaternion>
10013ce6:	2800      	cmp	r0, #0
10013ce8:	d102      	bne.n	10013cf0 <inv_enable_quaternion+0x10>
10013cea:	4802      	ldr	r0, [pc, #8]	; (10013cf4 <inv_enable_quaternion+0x14>)
10013cec:	f7f7 f8a6 	bl	1000ae3c <inv_register_mpl_start_notification>
10013cf0:	bd08      	pop	{r3, pc}
10013cf2:	46c0      	nop			; (mov r8, r8)
10013cf4:	100132a5 	.word	0x100132a5

10013cf8 <inv_disable_quaternion>:
10013cf8:	b508      	push	{r3, lr}
10013cfa:	4803      	ldr	r0, [pc, #12]	; (10013d08 <inv_disable_quaternion+0x10>)
10013cfc:	f7f6 f856 	bl	10009dac <inv_unregister_data_cb>
10013d00:	4802      	ldr	r0, [pc, #8]	; (10013d0c <inv_disable_quaternion+0x14>)
10013d02:	f7f7 f86b 	bl	1000addc <inv_unregister_mpl_start_notification>
10013d06:	bd08      	pop	{r3, pc}
10013d08:	10013c45 	.word	0x10013c45
10013d0c:	100132a5 	.word	0x100132a5

10013d10 <cosf>:
10013d10:	b500      	push	{lr}
10013d12:	4a1c      	ldr	r2, [pc, #112]	; (10013d84 <cosf+0x74>)
10013d14:	0043      	lsls	r3, r0, #1
10013d16:	b083      	sub	sp, #12
10013d18:	085b      	lsrs	r3, r3, #1
10013d1a:	4293      	cmp	r3, r2
10013d1c:	dd18      	ble.n	10013d50 <cosf+0x40>
10013d1e:	4a1a      	ldr	r2, [pc, #104]	; (10013d88 <cosf+0x78>)
10013d20:	4293      	cmp	r3, r2
10013d22:	dd04      	ble.n	10013d2e <cosf+0x1e>
10013d24:	1c01      	adds	r1, r0, #0
10013d26:	f002 f891 	bl	10015e4c <__aeabi_fsub>
10013d2a:	b003      	add	sp, #12
10013d2c:	bd00      	pop	{pc}
10013d2e:	4669      	mov	r1, sp
10013d30:	f000 fa22 	bl	10014178 <__ieee754_rem_pio2f>
10013d34:	2303      	movs	r3, #3
10013d36:	9901      	ldr	r1, [sp, #4]
10013d38:	4018      	ands	r0, r3
10013d3a:	2801      	cmp	r0, #1
10013d3c:	d014      	beq.n	10013d68 <cosf+0x58>
10013d3e:	2802      	cmp	r0, #2
10013d40:	d00a      	beq.n	10013d58 <cosf+0x48>
10013d42:	2800      	cmp	r0, #0
10013d44:	d019      	beq.n	10013d7a <cosf+0x6a>
10013d46:	9800      	ldr	r0, [sp, #0]
10013d48:	2201      	movs	r2, #1
10013d4a:	f000 fff9 	bl	10014d40 <__kernel_sinf>
10013d4e:	e7ec      	b.n	10013d2a <cosf+0x1a>
10013d50:	2100      	movs	r1, #0
10013d52:	f000 fb99 	bl	10014488 <__kernel_cosf>
10013d56:	e7e8      	b.n	10013d2a <cosf+0x1a>
10013d58:	9800      	ldr	r0, [sp, #0]
10013d5a:	f000 fb95 	bl	10014488 <__kernel_cosf>
10013d5e:	2380      	movs	r3, #128	; 0x80
10013d60:	061b      	lsls	r3, r3, #24
10013d62:	469c      	mov	ip, r3
10013d64:	4460      	add	r0, ip
10013d66:	e7e0      	b.n	10013d2a <cosf+0x1a>
10013d68:	2201      	movs	r2, #1
10013d6a:	9800      	ldr	r0, [sp, #0]
10013d6c:	f000 ffe8 	bl	10014d40 <__kernel_sinf>
10013d70:	2380      	movs	r3, #128	; 0x80
10013d72:	061b      	lsls	r3, r3, #24
10013d74:	469c      	mov	ip, r3
10013d76:	4460      	add	r0, ip
10013d78:	e7d7      	b.n	10013d2a <cosf+0x1a>
10013d7a:	9800      	ldr	r0, [sp, #0]
10013d7c:	f000 fb84 	bl	10014488 <__kernel_cosf>
10013d80:	e7d3      	b.n	10013d2a <cosf+0x1a>
10013d82:	46c0      	nop			; (mov r8, r8)
10013d84:	3f490fd8 	.word	0x3f490fd8
10013d88:	7f7fffff 	.word	0x7f7fffff

10013d8c <sinf>:
10013d8c:	b500      	push	{lr}
10013d8e:	4a1c      	ldr	r2, [pc, #112]	; (10013e00 <sinf+0x74>)
10013d90:	0043      	lsls	r3, r0, #1
10013d92:	b083      	sub	sp, #12
10013d94:	085b      	lsrs	r3, r3, #1
10013d96:	4293      	cmp	r3, r2
10013d98:	dd1b      	ble.n	10013dd2 <sinf+0x46>
10013d9a:	4a1a      	ldr	r2, [pc, #104]	; (10013e04 <sinf+0x78>)
10013d9c:	4293      	cmp	r3, r2
10013d9e:	dd04      	ble.n	10013daa <sinf+0x1e>
10013da0:	1c01      	adds	r1, r0, #0
10013da2:	f002 f853 	bl	10015e4c <__aeabi_fsub>
10013da6:	b003      	add	sp, #12
10013da8:	bd00      	pop	{pc}
10013daa:	4669      	mov	r1, sp
10013dac:	f000 f9e4 	bl	10014178 <__ieee754_rem_pio2f>
10013db0:	2303      	movs	r3, #3
10013db2:	9901      	ldr	r1, [sp, #4]
10013db4:	4018      	ands	r0, r3
10013db6:	2801      	cmp	r0, #1
10013db8:	d019      	beq.n	10013dee <sinf+0x62>
10013dba:	2802      	cmp	r0, #2
10013dbc:	d00e      	beq.n	10013ddc <sinf+0x50>
10013dbe:	2800      	cmp	r0, #0
10013dc0:	d019      	beq.n	10013df6 <sinf+0x6a>
10013dc2:	9800      	ldr	r0, [sp, #0]
10013dc4:	f000 fb60 	bl	10014488 <__kernel_cosf>
10013dc8:	2380      	movs	r3, #128	; 0x80
10013dca:	061b      	lsls	r3, r3, #24
10013dcc:	469c      	mov	ip, r3
10013dce:	4460      	add	r0, ip
10013dd0:	e7e9      	b.n	10013da6 <sinf+0x1a>
10013dd2:	2200      	movs	r2, #0
10013dd4:	2100      	movs	r1, #0
10013dd6:	f000 ffb3 	bl	10014d40 <__kernel_sinf>
10013dda:	e7e4      	b.n	10013da6 <sinf+0x1a>
10013ddc:	9800      	ldr	r0, [sp, #0]
10013dde:	2201      	movs	r2, #1
10013de0:	f000 ffae 	bl	10014d40 <__kernel_sinf>
10013de4:	2380      	movs	r3, #128	; 0x80
10013de6:	061b      	lsls	r3, r3, #24
10013de8:	469c      	mov	ip, r3
10013dea:	4460      	add	r0, ip
10013dec:	e7db      	b.n	10013da6 <sinf+0x1a>
10013dee:	9800      	ldr	r0, [sp, #0]
10013df0:	f000 fb4a 	bl	10014488 <__kernel_cosf>
10013df4:	e7d7      	b.n	10013da6 <sinf+0x1a>
10013df6:	9800      	ldr	r0, [sp, #0]
10013df8:	2201      	movs	r2, #1
10013dfa:	f000 ffa1 	bl	10014d40 <__kernel_sinf>
10013dfe:	e7d2      	b.n	10013da6 <sinf+0x1a>
10013e00:	3f490fd8 	.word	0x3f490fd8
10013e04:	7f7fffff 	.word	0x7f7fffff

10013e08 <acosf>:
10013e08:	b5f0      	push	{r4, r5, r6, r7, lr}
10013e0a:	b08d      	sub	sp, #52	; 0x34
10013e0c:	1c04      	adds	r4, r0, #0
10013e0e:	f000 f84f 	bl	10013eb0 <__ieee754_acosf>
10013e12:	2300      	movs	r3, #0
10013e14:	4e23      	ldr	r6, [pc, #140]	; (10013ea4 <acosf+0x9c>)
10013e16:	1c05      	adds	r5, r0, #0
10013e18:	56f3      	ldrsb	r3, [r6, r3]
10013e1a:	3301      	adds	r3, #1
10013e1c:	d031      	beq.n	10013e82 <acosf+0x7a>
10013e1e:	1c21      	adds	r1, r4, #0
10013e20:	1c20      	adds	r0, r4, #0
10013e22:	f002 f999 	bl	10016158 <__aeabi_fcmpun>
10013e26:	1e07      	subs	r7, r0, #0
10013e28:	d12b      	bne.n	10013e82 <acosf+0x7a>
10013e2a:	1c20      	adds	r0, r4, #0
10013e2c:	f7fd f8b2 	bl	10010f94 <fabsf>
10013e30:	21fe      	movs	r1, #254	; 0xfe
10013e32:	0589      	lsls	r1, r1, #22
10013e34:	f001 fa98 	bl	10015368 <__aeabi_fcmpgt>
10013e38:	2800      	cmp	r0, #0
10013e3a:	d022      	beq.n	10013e82 <acosf+0x7a>
10013e3c:	2301      	movs	r3, #1
10013e3e:	9302      	str	r3, [sp, #8]
10013e40:	4b19      	ldr	r3, [pc, #100]	; (10013ea8 <acosf+0xa0>)
10013e42:	1c20      	adds	r0, r4, #0
10013e44:	9303      	str	r3, [sp, #12]
10013e46:	970a      	str	r7, [sp, #40]	; 0x28
10013e48:	f004 f814 	bl	10017e74 <__aeabi_f2d>
10013e4c:	9006      	str	r0, [sp, #24]
10013e4e:	9107      	str	r1, [sp, #28]
10013e50:	9004      	str	r0, [sp, #16]
10013e52:	9105      	str	r1, [sp, #20]
10013e54:	4815      	ldr	r0, [pc, #84]	; (10013eac <acosf+0xa4>)
10013e56:	f7fc ff7b 	bl	10010d50 <nan>
10013e5a:	2300      	movs	r3, #0
10013e5c:	56f3      	ldrsb	r3, [r6, r3]
10013e5e:	9008      	str	r0, [sp, #32]
10013e60:	9109      	str	r1, [sp, #36]	; 0x24
10013e62:	2b02      	cmp	r3, #2
10013e64:	d010      	beq.n	10013e88 <acosf+0x80>
10013e66:	a802      	add	r0, sp, #8
10013e68:	f7fc ff70 	bl	10010d4c <matherr>
10013e6c:	2800      	cmp	r0, #0
10013e6e:	d00b      	beq.n	10013e88 <acosf+0x80>
10013e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10013e72:	9301      	str	r3, [sp, #4]
10013e74:	2b00      	cmp	r3, #0
10013e76:	d10f      	bne.n	10013e98 <acosf+0x90>
10013e78:	9808      	ldr	r0, [sp, #32]
10013e7a:	9909      	ldr	r1, [sp, #36]	; 0x24
10013e7c:	f004 f84e 	bl	10017f1c <__aeabi_d2f>
10013e80:	e000      	b.n	10013e84 <acosf+0x7c>
10013e82:	1c28      	adds	r0, r5, #0
10013e84:	b00d      	add	sp, #52	; 0x34
10013e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013e88:	f004 f9dc 	bl	10018244 <__errno>
10013e8c:	2321      	movs	r3, #33	; 0x21
10013e8e:	6003      	str	r3, [r0, #0]
10013e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10013e92:	9301      	str	r3, [sp, #4]
10013e94:	2b00      	cmp	r3, #0
10013e96:	d0ef      	beq.n	10013e78 <acosf+0x70>
10013e98:	f004 f9d4 	bl	10018244 <__errno>
10013e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10013e9e:	9301      	str	r3, [sp, #4]
10013ea0:	6003      	str	r3, [r0, #0]
10013ea2:	e7e9      	b.n	10013e78 <acosf+0x70>
10013ea4:	1001b628 	.word	0x1001b628
10013ea8:	1001aff4 	.word	0x1001aff4
10013eac:	10019864 	.word	0x10019864

10013eb0 <__ieee754_acosf>:
10013eb0:	22fe      	movs	r2, #254	; 0xfe
10013eb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013eb4:	0043      	lsls	r3, r0, #1
10013eb6:	1c04      	adds	r4, r0, #0
10013eb8:	085b      	lsrs	r3, r3, #1
10013eba:	0592      	lsls	r2, r2, #22
10013ebc:	4293      	cmp	r3, r2
10013ebe:	d011      	beq.n	10013ee4 <__ieee754_acosf+0x34>
10013ec0:	dc09      	bgt.n	10013ed6 <__ieee754_acosf+0x26>
10013ec2:	4a9d      	ldr	r2, [pc, #628]	; (10014138 <__ieee754_acosf+0x288>)
10013ec4:	4293      	cmp	r3, r2
10013ec6:	dc12      	bgt.n	10013eee <__ieee754_acosf+0x3e>
10013ec8:	228c      	movs	r2, #140	; 0x8c
10013eca:	0592      	lsls	r2, r2, #22
10013ecc:	4293      	cmp	r3, r2
10013ece:	dd00      	ble.n	10013ed2 <__ieee754_acosf+0x22>
10013ed0:	e080      	b.n	10013fd4 <__ieee754_acosf+0x124>
10013ed2:	489a      	ldr	r0, [pc, #616]	; (1001413c <__ieee754_acosf+0x28c>)
10013ed4:	e005      	b.n	10013ee2 <__ieee754_acosf+0x32>
10013ed6:	1c01      	adds	r1, r0, #0
10013ed8:	f001 ffb8 	bl	10015e4c <__aeabi_fsub>
10013edc:	1c01      	adds	r1, r0, #0
10013ede:	f001 fcd7 	bl	10015890 <__aeabi_fdiv>
10013ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10013ee4:	2000      	movs	r0, #0
10013ee6:	2c00      	cmp	r4, #0
10013ee8:	dcfb      	bgt.n	10013ee2 <__ieee754_acosf+0x32>
10013eea:	4895      	ldr	r0, [pc, #596]	; (10014140 <__ieee754_acosf+0x290>)
10013eec:	e7f9      	b.n	10013ee2 <__ieee754_acosf+0x32>
10013eee:	2800      	cmp	r0, #0
10013ef0:	da00      	bge.n	10013ef4 <__ieee754_acosf+0x44>
10013ef2:	e0c3      	b.n	1001407c <__ieee754_acosf+0x1cc>
10013ef4:	1c01      	adds	r1, r0, #0
10013ef6:	20fe      	movs	r0, #254	; 0xfe
10013ef8:	0580      	lsls	r0, r0, #22
10013efa:	f001 ffa7 	bl	10015e4c <__aeabi_fsub>
10013efe:	21fc      	movs	r1, #252	; 0xfc
10013f00:	0589      	lsls	r1, r1, #22
10013f02:	f001 fe8f 	bl	10015c24 <__aeabi_fmul>
10013f06:	1c04      	adds	r4, r0, #0
10013f08:	f7fc fec4 	bl	10010c94 <__ieee754_sqrtf>
10013f0c:	498d      	ldr	r1, [pc, #564]	; (10014144 <__ieee754_acosf+0x294>)
10013f0e:	1c06      	adds	r6, r0, #0
10013f10:	0b05      	lsrs	r5, r0, #12
10013f12:	1c20      	adds	r0, r4, #0
10013f14:	f001 fe86 	bl	10015c24 <__aeabi_fmul>
10013f18:	498b      	ldr	r1, [pc, #556]	; (10014148 <__ieee754_acosf+0x298>)
10013f1a:	f001 fb43 	bl	100155a4 <__aeabi_fadd>
10013f1e:	1c21      	adds	r1, r4, #0
10013f20:	f001 fe80 	bl	10015c24 <__aeabi_fmul>
10013f24:	4989      	ldr	r1, [pc, #548]	; (1001414c <__ieee754_acosf+0x29c>)
10013f26:	f001 ff91 	bl	10015e4c <__aeabi_fsub>
10013f2a:	1c21      	adds	r1, r4, #0
10013f2c:	f001 fe7a 	bl	10015c24 <__aeabi_fmul>
10013f30:	4987      	ldr	r1, [pc, #540]	; (10014150 <__ieee754_acosf+0x2a0>)
10013f32:	f001 fb37 	bl	100155a4 <__aeabi_fadd>
10013f36:	1c21      	adds	r1, r4, #0
10013f38:	f001 fe74 	bl	10015c24 <__aeabi_fmul>
10013f3c:	4985      	ldr	r1, [pc, #532]	; (10014154 <__ieee754_acosf+0x2a4>)
10013f3e:	f001 ff85 	bl	10015e4c <__aeabi_fsub>
10013f42:	1c21      	adds	r1, r4, #0
10013f44:	f001 fe6e 	bl	10015c24 <__aeabi_fmul>
10013f48:	4983      	ldr	r1, [pc, #524]	; (10014158 <__ieee754_acosf+0x2a8>)
10013f4a:	f001 fb2b 	bl	100155a4 <__aeabi_fadd>
10013f4e:	1c21      	adds	r1, r4, #0
10013f50:	f001 fe68 	bl	10015c24 <__aeabi_fmul>
10013f54:	4981      	ldr	r1, [pc, #516]	; (1001415c <__ieee754_acosf+0x2ac>)
10013f56:	1c07      	adds	r7, r0, #0
10013f58:	1c20      	adds	r0, r4, #0
10013f5a:	f001 fe63 	bl	10015c24 <__aeabi_fmul>
10013f5e:	4980      	ldr	r1, [pc, #512]	; (10014160 <__ieee754_acosf+0x2b0>)
10013f60:	f001 ff74 	bl	10015e4c <__aeabi_fsub>
10013f64:	1c21      	adds	r1, r4, #0
10013f66:	f001 fe5d 	bl	10015c24 <__aeabi_fmul>
10013f6a:	497e      	ldr	r1, [pc, #504]	; (10014164 <__ieee754_acosf+0x2b4>)
10013f6c:	f001 fb1a 	bl	100155a4 <__aeabi_fadd>
10013f70:	1c21      	adds	r1, r4, #0
10013f72:	f001 fe57 	bl	10015c24 <__aeabi_fmul>
10013f76:	497c      	ldr	r1, [pc, #496]	; (10014168 <__ieee754_acosf+0x2b8>)
10013f78:	f001 ff68 	bl	10015e4c <__aeabi_fsub>
10013f7c:	1c21      	adds	r1, r4, #0
10013f7e:	f001 fe51 	bl	10015c24 <__aeabi_fmul>
10013f82:	21fe      	movs	r1, #254	; 0xfe
10013f84:	0589      	lsls	r1, r1, #22
10013f86:	f001 fb0d 	bl	100155a4 <__aeabi_fadd>
10013f8a:	1c01      	adds	r1, r0, #0
10013f8c:	1c38      	adds	r0, r7, #0
10013f8e:	f001 fc7f 	bl	10015890 <__aeabi_fdiv>
10013f92:	1c31      	adds	r1, r6, #0
10013f94:	f001 fe46 	bl	10015c24 <__aeabi_fmul>
10013f98:	032d      	lsls	r5, r5, #12
10013f9a:	1c07      	adds	r7, r0, #0
10013f9c:	1c29      	adds	r1, r5, #0
10013f9e:	1c28      	adds	r0, r5, #0
10013fa0:	f001 fe40 	bl	10015c24 <__aeabi_fmul>
10013fa4:	1c01      	adds	r1, r0, #0
10013fa6:	1c20      	adds	r0, r4, #0
10013fa8:	f001 ff50 	bl	10015e4c <__aeabi_fsub>
10013fac:	1c29      	adds	r1, r5, #0
10013fae:	1c04      	adds	r4, r0, #0
10013fb0:	1c30      	adds	r0, r6, #0
10013fb2:	f001 faf7 	bl	100155a4 <__aeabi_fadd>
10013fb6:	1c01      	adds	r1, r0, #0
10013fb8:	1c20      	adds	r0, r4, #0
10013fba:	f001 fc69 	bl	10015890 <__aeabi_fdiv>
10013fbe:	1c01      	adds	r1, r0, #0
10013fc0:	1c38      	adds	r0, r7, #0
10013fc2:	f001 faef 	bl	100155a4 <__aeabi_fadd>
10013fc6:	1c29      	adds	r1, r5, #0
10013fc8:	f001 faec 	bl	100155a4 <__aeabi_fadd>
10013fcc:	1c01      	adds	r1, r0, #0
10013fce:	f001 fae9 	bl	100155a4 <__aeabi_fadd>
10013fd2:	e786      	b.n	10013ee2 <__ieee754_acosf+0x32>
10013fd4:	1c01      	adds	r1, r0, #0
10013fd6:	f001 fe25 	bl	10015c24 <__aeabi_fmul>
10013fda:	495a      	ldr	r1, [pc, #360]	; (10014144 <__ieee754_acosf+0x294>)
10013fdc:	1c05      	adds	r5, r0, #0
10013fde:	f001 fe21 	bl	10015c24 <__aeabi_fmul>
10013fe2:	4959      	ldr	r1, [pc, #356]	; (10014148 <__ieee754_acosf+0x298>)
10013fe4:	f001 fade 	bl	100155a4 <__aeabi_fadd>
10013fe8:	1c29      	adds	r1, r5, #0
10013fea:	f001 fe1b 	bl	10015c24 <__aeabi_fmul>
10013fee:	4957      	ldr	r1, [pc, #348]	; (1001414c <__ieee754_acosf+0x29c>)
10013ff0:	f001 ff2c 	bl	10015e4c <__aeabi_fsub>
10013ff4:	1c29      	adds	r1, r5, #0
10013ff6:	f001 fe15 	bl	10015c24 <__aeabi_fmul>
10013ffa:	4955      	ldr	r1, [pc, #340]	; (10014150 <__ieee754_acosf+0x2a0>)
10013ffc:	f001 fad2 	bl	100155a4 <__aeabi_fadd>
10014000:	1c29      	adds	r1, r5, #0
10014002:	f001 fe0f 	bl	10015c24 <__aeabi_fmul>
10014006:	4953      	ldr	r1, [pc, #332]	; (10014154 <__ieee754_acosf+0x2a4>)
10014008:	f001 ff20 	bl	10015e4c <__aeabi_fsub>
1001400c:	1c29      	adds	r1, r5, #0
1001400e:	f001 fe09 	bl	10015c24 <__aeabi_fmul>
10014012:	4951      	ldr	r1, [pc, #324]	; (10014158 <__ieee754_acosf+0x2a8>)
10014014:	f001 fac6 	bl	100155a4 <__aeabi_fadd>
10014018:	1c29      	adds	r1, r5, #0
1001401a:	f001 fe03 	bl	10015c24 <__aeabi_fmul>
1001401e:	494f      	ldr	r1, [pc, #316]	; (1001415c <__ieee754_acosf+0x2ac>)
10014020:	1c06      	adds	r6, r0, #0
10014022:	1c28      	adds	r0, r5, #0
10014024:	f001 fdfe 	bl	10015c24 <__aeabi_fmul>
10014028:	494d      	ldr	r1, [pc, #308]	; (10014160 <__ieee754_acosf+0x2b0>)
1001402a:	f001 ff0f 	bl	10015e4c <__aeabi_fsub>
1001402e:	1c29      	adds	r1, r5, #0
10014030:	f001 fdf8 	bl	10015c24 <__aeabi_fmul>
10014034:	494b      	ldr	r1, [pc, #300]	; (10014164 <__ieee754_acosf+0x2b4>)
10014036:	f001 fab5 	bl	100155a4 <__aeabi_fadd>
1001403a:	1c29      	adds	r1, r5, #0
1001403c:	f001 fdf2 	bl	10015c24 <__aeabi_fmul>
10014040:	4949      	ldr	r1, [pc, #292]	; (10014168 <__ieee754_acosf+0x2b8>)
10014042:	f001 ff03 	bl	10015e4c <__aeabi_fsub>
10014046:	1c29      	adds	r1, r5, #0
10014048:	f001 fdec 	bl	10015c24 <__aeabi_fmul>
1001404c:	21fe      	movs	r1, #254	; 0xfe
1001404e:	0589      	lsls	r1, r1, #22
10014050:	f001 faa8 	bl	100155a4 <__aeabi_fadd>
10014054:	1c01      	adds	r1, r0, #0
10014056:	1c30      	adds	r0, r6, #0
10014058:	f001 fc1a 	bl	10015890 <__aeabi_fdiv>
1001405c:	1c21      	adds	r1, r4, #0
1001405e:	f001 fde1 	bl	10015c24 <__aeabi_fmul>
10014062:	1c01      	adds	r1, r0, #0
10014064:	4841      	ldr	r0, [pc, #260]	; (1001416c <__ieee754_acosf+0x2bc>)
10014066:	f001 fef1 	bl	10015e4c <__aeabi_fsub>
1001406a:	1c01      	adds	r1, r0, #0
1001406c:	1c20      	adds	r0, r4, #0
1001406e:	f001 feed 	bl	10015e4c <__aeabi_fsub>
10014072:	1c01      	adds	r1, r0, #0
10014074:	483e      	ldr	r0, [pc, #248]	; (10014170 <__ieee754_acosf+0x2c0>)
10014076:	f001 fee9 	bl	10015e4c <__aeabi_fsub>
1001407a:	e732      	b.n	10013ee2 <__ieee754_acosf+0x32>
1001407c:	21fe      	movs	r1, #254	; 0xfe
1001407e:	0589      	lsls	r1, r1, #22
10014080:	f001 fa90 	bl	100155a4 <__aeabi_fadd>
10014084:	21fc      	movs	r1, #252	; 0xfc
10014086:	0589      	lsls	r1, r1, #22
10014088:	f001 fdcc 	bl	10015c24 <__aeabi_fmul>
1001408c:	492d      	ldr	r1, [pc, #180]	; (10014144 <__ieee754_acosf+0x294>)
1001408e:	1c04      	adds	r4, r0, #0
10014090:	f001 fdc8 	bl	10015c24 <__aeabi_fmul>
10014094:	492c      	ldr	r1, [pc, #176]	; (10014148 <__ieee754_acosf+0x298>)
10014096:	f001 fa85 	bl	100155a4 <__aeabi_fadd>
1001409a:	1c21      	adds	r1, r4, #0
1001409c:	f001 fdc2 	bl	10015c24 <__aeabi_fmul>
100140a0:	492a      	ldr	r1, [pc, #168]	; (1001414c <__ieee754_acosf+0x29c>)
100140a2:	f001 fed3 	bl	10015e4c <__aeabi_fsub>
100140a6:	1c21      	adds	r1, r4, #0
100140a8:	f001 fdbc 	bl	10015c24 <__aeabi_fmul>
100140ac:	4928      	ldr	r1, [pc, #160]	; (10014150 <__ieee754_acosf+0x2a0>)
100140ae:	f001 fa79 	bl	100155a4 <__aeabi_fadd>
100140b2:	1c21      	adds	r1, r4, #0
100140b4:	f001 fdb6 	bl	10015c24 <__aeabi_fmul>
100140b8:	4926      	ldr	r1, [pc, #152]	; (10014154 <__ieee754_acosf+0x2a4>)
100140ba:	f001 fec7 	bl	10015e4c <__aeabi_fsub>
100140be:	1c21      	adds	r1, r4, #0
100140c0:	f001 fdb0 	bl	10015c24 <__aeabi_fmul>
100140c4:	4924      	ldr	r1, [pc, #144]	; (10014158 <__ieee754_acosf+0x2a8>)
100140c6:	f001 fa6d 	bl	100155a4 <__aeabi_fadd>
100140ca:	1c21      	adds	r1, r4, #0
100140cc:	f001 fdaa 	bl	10015c24 <__aeabi_fmul>
100140d0:	1c06      	adds	r6, r0, #0
100140d2:	1c20      	adds	r0, r4, #0
100140d4:	f7fc fdde 	bl	10010c94 <__ieee754_sqrtf>
100140d8:	4920      	ldr	r1, [pc, #128]	; (1001415c <__ieee754_acosf+0x2ac>)
100140da:	1c05      	adds	r5, r0, #0
100140dc:	1c20      	adds	r0, r4, #0
100140de:	f001 fda1 	bl	10015c24 <__aeabi_fmul>
100140e2:	491f      	ldr	r1, [pc, #124]	; (10014160 <__ieee754_acosf+0x2b0>)
100140e4:	f001 feb2 	bl	10015e4c <__aeabi_fsub>
100140e8:	1c21      	adds	r1, r4, #0
100140ea:	f001 fd9b 	bl	10015c24 <__aeabi_fmul>
100140ee:	491d      	ldr	r1, [pc, #116]	; (10014164 <__ieee754_acosf+0x2b4>)
100140f0:	f001 fa58 	bl	100155a4 <__aeabi_fadd>
100140f4:	1c21      	adds	r1, r4, #0
100140f6:	f001 fd95 	bl	10015c24 <__aeabi_fmul>
100140fa:	491b      	ldr	r1, [pc, #108]	; (10014168 <__ieee754_acosf+0x2b8>)
100140fc:	f001 fea6 	bl	10015e4c <__aeabi_fsub>
10014100:	1c21      	adds	r1, r4, #0
10014102:	f001 fd8f 	bl	10015c24 <__aeabi_fmul>
10014106:	21fe      	movs	r1, #254	; 0xfe
10014108:	0589      	lsls	r1, r1, #22
1001410a:	f001 fa4b 	bl	100155a4 <__aeabi_fadd>
1001410e:	1c01      	adds	r1, r0, #0
10014110:	1c30      	adds	r0, r6, #0
10014112:	f001 fbbd 	bl	10015890 <__aeabi_fdiv>
10014116:	1c29      	adds	r1, r5, #0
10014118:	f001 fd84 	bl	10015c24 <__aeabi_fmul>
1001411c:	4913      	ldr	r1, [pc, #76]	; (1001416c <__ieee754_acosf+0x2bc>)
1001411e:	f001 fe95 	bl	10015e4c <__aeabi_fsub>
10014122:	1c29      	adds	r1, r5, #0
10014124:	f001 fa3e 	bl	100155a4 <__aeabi_fadd>
10014128:	1c01      	adds	r1, r0, #0
1001412a:	f001 fa3b 	bl	100155a4 <__aeabi_fadd>
1001412e:	1c01      	adds	r1, r0, #0
10014130:	4810      	ldr	r0, [pc, #64]	; (10014174 <__ieee754_acosf+0x2c4>)
10014132:	f001 fe8b 	bl	10015e4c <__aeabi_fsub>
10014136:	e6d4      	b.n	10013ee2 <__ieee754_acosf+0x32>
10014138:	3effffff 	.word	0x3effffff
1001413c:	3fc90fdb 	.word	0x3fc90fdb
10014140:	40490fdb 	.word	0x40490fdb
10014144:	3811ef08 	.word	0x3811ef08
10014148:	3a4f7f04 	.word	0x3a4f7f04
1001414c:	3d241146 	.word	0x3d241146
10014150:	3e4e0aa8 	.word	0x3e4e0aa8
10014154:	3ea6b090 	.word	0x3ea6b090
10014158:	3e2aaaab 	.word	0x3e2aaaab
1001415c:	3d9dc62e 	.word	0x3d9dc62e
10014160:	3f303361 	.word	0x3f303361
10014164:	4001572d 	.word	0x4001572d
10014168:	4019d139 	.word	0x4019d139
1001416c:	33a22168 	.word	0x33a22168
10014170:	3fc90fda 	.word	0x3fc90fda
10014174:	40490fda 	.word	0x40490fda

10014178 <__ieee754_rem_pio2f>:
10014178:	b5f0      	push	{r4, r5, r6, r7, lr}
1001417a:	465f      	mov	r7, fp
1001417c:	4656      	mov	r6, sl
1001417e:	4644      	mov	r4, r8
10014180:	464d      	mov	r5, r9
10014182:	b4f0      	push	{r4, r5, r6, r7}
10014184:	0043      	lsls	r3, r0, #1
10014186:	085f      	lsrs	r7, r3, #1
10014188:	4bb1      	ldr	r3, [pc, #708]	; (10014450 <__ieee754_rem_pio2f+0x2d8>)
1001418a:	b089      	sub	sp, #36	; 0x24
1001418c:	000c      	movs	r4, r1
1001418e:	0006      	movs	r6, r0
10014190:	429f      	cmp	r7, r3
10014192:	dd6f      	ble.n	10014274 <__ieee754_rem_pio2f+0xfc>
10014194:	4baf      	ldr	r3, [pc, #700]	; (10014454 <__ieee754_rem_pio2f+0x2dc>)
10014196:	429f      	cmp	r7, r3
10014198:	dc1b      	bgt.n	100141d2 <__ieee754_rem_pio2f+0x5a>
1001419a:	49af      	ldr	r1, [pc, #700]	; (10014458 <__ieee754_rem_pio2f+0x2e0>)
1001419c:	2800      	cmp	r0, #0
1001419e:	dc00      	bgt.n	100141a2 <__ieee754_rem_pio2f+0x2a>
100141a0:	e10b      	b.n	100143ba <__ieee754_rem_pio2f+0x242>
100141a2:	f001 fe53 	bl	10015e4c <__aeabi_fsub>
100141a6:	230f      	movs	r3, #15
100141a8:	003a      	movs	r2, r7
100141aa:	439a      	bics	r2, r3
100141ac:	4bab      	ldr	r3, [pc, #684]	; (1001445c <__ieee754_rem_pio2f+0x2e4>)
100141ae:	1c05      	adds	r5, r0, #0
100141b0:	429a      	cmp	r2, r3
100141b2:	d100      	bne.n	100141b6 <__ieee754_rem_pio2f+0x3e>
100141b4:	e070      	b.n	10014298 <__ieee754_rem_pio2f+0x120>
100141b6:	49aa      	ldr	r1, [pc, #680]	; (10014460 <__ieee754_rem_pio2f+0x2e8>)
100141b8:	f001 fe48 	bl	10015e4c <__aeabi_fsub>
100141bc:	1c01      	adds	r1, r0, #0
100141be:	6020      	str	r0, [r4, #0]
100141c0:	1c28      	adds	r0, r5, #0
100141c2:	f001 fe43 	bl	10015e4c <__aeabi_fsub>
100141c6:	49a6      	ldr	r1, [pc, #664]	; (10014460 <__ieee754_rem_pio2f+0x2e8>)
100141c8:	f001 fe40 	bl	10015e4c <__aeabi_fsub>
100141cc:	6060      	str	r0, [r4, #4]
100141ce:	2001      	movs	r0, #1
100141d0:	e054      	b.n	1001427c <__ieee754_rem_pio2f+0x104>
100141d2:	4ba4      	ldr	r3, [pc, #656]	; (10014464 <__ieee754_rem_pio2f+0x2ec>)
100141d4:	429f      	cmp	r7, r3
100141d6:	dc00      	bgt.n	100141da <__ieee754_rem_pio2f+0x62>
100141d8:	e070      	b.n	100142bc <__ieee754_rem_pio2f+0x144>
100141da:	4ba3      	ldr	r3, [pc, #652]	; (10014468 <__ieee754_rem_pio2f+0x2f0>)
100141dc:	429f      	cmp	r7, r3
100141de:	dc54      	bgt.n	1001428a <__ieee754_rem_pio2f+0x112>
100141e0:	2286      	movs	r2, #134	; 0x86
100141e2:	4252      	negs	r2, r2
100141e4:	4691      	mov	r9, r2
100141e6:	15fb      	asrs	r3, r7, #23
100141e8:	4499      	add	r9, r3
100141ea:	464b      	mov	r3, r9
100141ec:	05dd      	lsls	r5, r3, #23
100141ee:	1b7d      	subs	r5, r7, r5
100141f0:	1c28      	adds	r0, r5, #0
100141f2:	f001 ffc9 	bl	10016188 <__aeabi_f2iz>
100141f6:	f001 ffe9 	bl	100161cc <__aeabi_i2f>
100141fa:	1c01      	adds	r1, r0, #0
100141fc:	9005      	str	r0, [sp, #20]
100141fe:	1c28      	adds	r0, r5, #0
10014200:	f001 fe24 	bl	10015e4c <__aeabi_fsub>
10014204:	2187      	movs	r1, #135	; 0x87
10014206:	05c9      	lsls	r1, r1, #23
10014208:	f001 fd0c 	bl	10015c24 <__aeabi_fmul>
1001420c:	4680      	mov	r8, r0
1001420e:	f001 ffbb 	bl	10016188 <__aeabi_f2iz>
10014212:	f001 ffdb 	bl	100161cc <__aeabi_i2f>
10014216:	1c01      	adds	r1, r0, #0
10014218:	9006      	str	r0, [sp, #24]
1001421a:	1c05      	adds	r5, r0, #0
1001421c:	4640      	mov	r0, r8
1001421e:	f001 fe15 	bl	10015e4c <__aeabi_fsub>
10014222:	2187      	movs	r1, #135	; 0x87
10014224:	05c9      	lsls	r1, r1, #23
10014226:	f001 fcfd 	bl	10015c24 <__aeabi_fmul>
1001422a:	2100      	movs	r1, #0
1001422c:	9007      	str	r0, [sp, #28]
1001422e:	f001 f881 	bl	10015334 <__aeabi_fcmpeq>
10014232:	2800      	cmp	r0, #0
10014234:	d100      	bne.n	10014238 <__ieee754_rem_pio2f+0xc0>
10014236:	e0d8      	b.n	100143ea <__ieee754_rem_pio2f+0x272>
10014238:	2100      	movs	r1, #0
1001423a:	1c28      	adds	r0, r5, #0
1001423c:	f001 f87a 	bl	10015334 <__aeabi_fcmpeq>
10014240:	2202      	movs	r2, #2
10014242:	1e43      	subs	r3, r0, #1
10014244:	4198      	sbcs	r0, r3
10014246:	1a13      	subs	r3, r2, r0
10014248:	4a88      	ldr	r2, [pc, #544]	; (1001446c <__ieee754_rem_pio2f+0x2f4>)
1001424a:	0021      	movs	r1, r4
1001424c:	9201      	str	r2, [sp, #4]
1001424e:	2202      	movs	r2, #2
10014250:	a805      	add	r0, sp, #20
10014252:	9200      	str	r2, [sp, #0]
10014254:	464a      	mov	r2, r9
10014256:	f000 f9e1 	bl	1001461c <__kernel_rem_pio2f>
1001425a:	2e00      	cmp	r6, #0
1001425c:	da0e      	bge.n	1001427c <__ieee754_rem_pio2f+0x104>
1001425e:	2280      	movs	r2, #128	; 0x80
10014260:	0612      	lsls	r2, r2, #24
10014262:	4694      	mov	ip, r2
10014264:	6823      	ldr	r3, [r4, #0]
10014266:	4240      	negs	r0, r0
10014268:	4463      	add	r3, ip
1001426a:	6023      	str	r3, [r4, #0]
1001426c:	6863      	ldr	r3, [r4, #4]
1001426e:	4463      	add	r3, ip
10014270:	6063      	str	r3, [r4, #4]
10014272:	e003      	b.n	1001427c <__ieee754_rem_pio2f+0x104>
10014274:	2300      	movs	r3, #0
10014276:	6008      	str	r0, [r1, #0]
10014278:	2000      	movs	r0, #0
1001427a:	604b      	str	r3, [r1, #4]
1001427c:	b009      	add	sp, #36	; 0x24
1001427e:	bc3c      	pop	{r2, r3, r4, r5}
10014280:	4690      	mov	r8, r2
10014282:	4699      	mov	r9, r3
10014284:	46a2      	mov	sl, r4
10014286:	46ab      	mov	fp, r5
10014288:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001428a:	1c01      	adds	r1, r0, #0
1001428c:	f001 fdde 	bl	10015e4c <__aeabi_fsub>
10014290:	6060      	str	r0, [r4, #4]
10014292:	6020      	str	r0, [r4, #0]
10014294:	2000      	movs	r0, #0
10014296:	e7f1      	b.n	1001427c <__ieee754_rem_pio2f+0x104>
10014298:	4975      	ldr	r1, [pc, #468]	; (10014470 <__ieee754_rem_pio2f+0x2f8>)
1001429a:	f001 fdd7 	bl	10015e4c <__aeabi_fsub>
1001429e:	4975      	ldr	r1, [pc, #468]	; (10014474 <__ieee754_rem_pio2f+0x2fc>)
100142a0:	1c05      	adds	r5, r0, #0
100142a2:	f001 fdd3 	bl	10015e4c <__aeabi_fsub>
100142a6:	1c01      	adds	r1, r0, #0
100142a8:	6020      	str	r0, [r4, #0]
100142aa:	1c28      	adds	r0, r5, #0
100142ac:	f001 fdce 	bl	10015e4c <__aeabi_fsub>
100142b0:	4970      	ldr	r1, [pc, #448]	; (10014474 <__ieee754_rem_pio2f+0x2fc>)
100142b2:	f001 fdcb 	bl	10015e4c <__aeabi_fsub>
100142b6:	6060      	str	r0, [r4, #4]
100142b8:	2001      	movs	r0, #1
100142ba:	e7df      	b.n	1001427c <__ieee754_rem_pio2f+0x104>
100142bc:	f7fc fe6a 	bl	10010f94 <fabsf>
100142c0:	496d      	ldr	r1, [pc, #436]	; (10014478 <__ieee754_rem_pio2f+0x300>)
100142c2:	4680      	mov	r8, r0
100142c4:	f001 fcae 	bl	10015c24 <__aeabi_fmul>
100142c8:	21fc      	movs	r1, #252	; 0xfc
100142ca:	0589      	lsls	r1, r1, #22
100142cc:	f001 f96a 	bl	100155a4 <__aeabi_fadd>
100142d0:	f001 ff5a 	bl	10016188 <__aeabi_f2iz>
100142d4:	0005      	movs	r5, r0
100142d6:	f001 ff79 	bl	100161cc <__aeabi_i2f>
100142da:	495f      	ldr	r1, [pc, #380]	; (10014458 <__ieee754_rem_pio2f+0x2e0>)
100142dc:	4681      	mov	r9, r0
100142de:	f001 fca1 	bl	10015c24 <__aeabi_fmul>
100142e2:	1c01      	adds	r1, r0, #0
100142e4:	4640      	mov	r0, r8
100142e6:	f001 fdb1 	bl	10015e4c <__aeabi_fsub>
100142ea:	495d      	ldr	r1, [pc, #372]	; (10014460 <__ieee754_rem_pio2f+0x2e8>)
100142ec:	4680      	mov	r8, r0
100142ee:	4648      	mov	r0, r9
100142f0:	f001 fc98 	bl	10015c24 <__aeabi_fmul>
100142f4:	4682      	mov	sl, r0
100142f6:	2d1f      	cmp	r5, #31
100142f8:	dc26      	bgt.n	10014348 <__ieee754_rem_pio2f+0x1d0>
100142fa:	23ff      	movs	r3, #255	; 0xff
100142fc:	003a      	movs	r2, r7
100142fe:	495f      	ldr	r1, [pc, #380]	; (1001447c <__ieee754_rem_pio2f+0x304>)
10014300:	439a      	bics	r2, r3
10014302:	1e6b      	subs	r3, r5, #1
10014304:	009b      	lsls	r3, r3, #2
10014306:	585b      	ldr	r3, [r3, r1]
10014308:	429a      	cmp	r2, r3
1001430a:	d01d      	beq.n	10014348 <__ieee754_rem_pio2f+0x1d0>
1001430c:	4651      	mov	r1, sl
1001430e:	4640      	mov	r0, r8
10014310:	f001 fd9c 	bl	10015e4c <__aeabi_fsub>
10014314:	4683      	mov	fp, r0
10014316:	465b      	mov	r3, fp
10014318:	6023      	str	r3, [r4, #0]
1001431a:	4659      	mov	r1, fp
1001431c:	4640      	mov	r0, r8
1001431e:	f001 fd95 	bl	10015e4c <__aeabi_fsub>
10014322:	4651      	mov	r1, sl
10014324:	f001 fd92 	bl	10015e4c <__aeabi_fsub>
10014328:	1c03      	adds	r3, r0, #0
1001432a:	6060      	str	r0, [r4, #4]
1001432c:	0028      	movs	r0, r5
1001432e:	2e00      	cmp	r6, #0
10014330:	daa4      	bge.n	1001427c <__ieee754_rem_pio2f+0x104>
10014332:	2280      	movs	r2, #128	; 0x80
10014334:	0612      	lsls	r2, r2, #24
10014336:	445a      	add	r2, fp
10014338:	6022      	str	r2, [r4, #0]
1001433a:	2280      	movs	r2, #128	; 0x80
1001433c:	0612      	lsls	r2, r2, #24
1001433e:	4694      	mov	ip, r2
10014340:	4463      	add	r3, ip
10014342:	6063      	str	r3, [r4, #4]
10014344:	4268      	negs	r0, r5
10014346:	e799      	b.n	1001427c <__ieee754_rem_pio2f+0x104>
10014348:	4651      	mov	r1, sl
1001434a:	4640      	mov	r0, r8
1001434c:	f001 fd7e 	bl	10015e4c <__aeabi_fsub>
10014350:	15fb      	asrs	r3, r7, #23
10014352:	21ff      	movs	r1, #255	; 0xff
10014354:	001a      	movs	r2, r3
10014356:	9302      	str	r3, [sp, #8]
10014358:	0dc3      	lsrs	r3, r0, #23
1001435a:	400b      	ands	r3, r1
1001435c:	4683      	mov	fp, r0
1001435e:	1ad3      	subs	r3, r2, r3
10014360:	2b08      	cmp	r3, #8
10014362:	ddd8      	ble.n	10014316 <__ieee754_rem_pio2f+0x19e>
10014364:	4942      	ldr	r1, [pc, #264]	; (10014470 <__ieee754_rem_pio2f+0x2f8>)
10014366:	4648      	mov	r0, r9
10014368:	f001 fc5c 	bl	10015c24 <__aeabi_fmul>
1001436c:	1c07      	adds	r7, r0, #0
1001436e:	1c01      	adds	r1, r0, #0
10014370:	4640      	mov	r0, r8
10014372:	f001 fd6b 	bl	10015e4c <__aeabi_fsub>
10014376:	4683      	mov	fp, r0
10014378:	1c01      	adds	r1, r0, #0
1001437a:	9003      	str	r0, [sp, #12]
1001437c:	4640      	mov	r0, r8
1001437e:	f001 fd65 	bl	10015e4c <__aeabi_fsub>
10014382:	1c39      	adds	r1, r7, #0
10014384:	f001 fd62 	bl	10015e4c <__aeabi_fsub>
10014388:	493a      	ldr	r1, [pc, #232]	; (10014474 <__ieee754_rem_pio2f+0x2fc>)
1001438a:	1c07      	adds	r7, r0, #0
1001438c:	4648      	mov	r0, r9
1001438e:	f001 fc49 	bl	10015c24 <__aeabi_fmul>
10014392:	1c39      	adds	r1, r7, #0
10014394:	f001 fd5a 	bl	10015e4c <__aeabi_fsub>
10014398:	1c01      	adds	r1, r0, #0
1001439a:	4682      	mov	sl, r0
1001439c:	4658      	mov	r0, fp
1001439e:	f001 fd55 	bl	10015e4c <__aeabi_fsub>
100143a2:	22ff      	movs	r2, #255	; 0xff
100143a4:	0dc3      	lsrs	r3, r0, #23
100143a6:	4013      	ands	r3, r2
100143a8:	9a02      	ldr	r2, [sp, #8]
100143aa:	465f      	mov	r7, fp
100143ac:	1ad3      	subs	r3, r2, r3
100143ae:	4683      	mov	fp, r0
100143b0:	2b19      	cmp	r3, #25
100143b2:	dc2f      	bgt.n	10014414 <__ieee754_rem_pio2f+0x29c>
100143b4:	6020      	str	r0, [r4, #0]
100143b6:	46b8      	mov	r8, r7
100143b8:	e7af      	b.n	1001431a <__ieee754_rem_pio2f+0x1a2>
100143ba:	f001 f8f3 	bl	100155a4 <__aeabi_fadd>
100143be:	230f      	movs	r3, #15
100143c0:	003a      	movs	r2, r7
100143c2:	439a      	bics	r2, r3
100143c4:	4b25      	ldr	r3, [pc, #148]	; (1001445c <__ieee754_rem_pio2f+0x2e4>)
100143c6:	1c05      	adds	r5, r0, #0
100143c8:	429a      	cmp	r2, r3
100143ca:	d010      	beq.n	100143ee <__ieee754_rem_pio2f+0x276>
100143cc:	4924      	ldr	r1, [pc, #144]	; (10014460 <__ieee754_rem_pio2f+0x2e8>)
100143ce:	f001 f8e9 	bl	100155a4 <__aeabi_fadd>
100143d2:	1c01      	adds	r1, r0, #0
100143d4:	6020      	str	r0, [r4, #0]
100143d6:	1c28      	adds	r0, r5, #0
100143d8:	f001 fd38 	bl	10015e4c <__aeabi_fsub>
100143dc:	4920      	ldr	r1, [pc, #128]	; (10014460 <__ieee754_rem_pio2f+0x2e8>)
100143de:	f001 f8e1 	bl	100155a4 <__aeabi_fadd>
100143e2:	6060      	str	r0, [r4, #4]
100143e4:	2001      	movs	r0, #1
100143e6:	4240      	negs	r0, r0
100143e8:	e748      	b.n	1001427c <__ieee754_rem_pio2f+0x104>
100143ea:	2303      	movs	r3, #3
100143ec:	e72c      	b.n	10014248 <__ieee754_rem_pio2f+0xd0>
100143ee:	4920      	ldr	r1, [pc, #128]	; (10014470 <__ieee754_rem_pio2f+0x2f8>)
100143f0:	f001 f8d8 	bl	100155a4 <__aeabi_fadd>
100143f4:	491f      	ldr	r1, [pc, #124]	; (10014474 <__ieee754_rem_pio2f+0x2fc>)
100143f6:	1c05      	adds	r5, r0, #0
100143f8:	f001 f8d4 	bl	100155a4 <__aeabi_fadd>
100143fc:	1c01      	adds	r1, r0, #0
100143fe:	6020      	str	r0, [r4, #0]
10014400:	1c28      	adds	r0, r5, #0
10014402:	f001 fd23 	bl	10015e4c <__aeabi_fsub>
10014406:	491b      	ldr	r1, [pc, #108]	; (10014474 <__ieee754_rem_pio2f+0x2fc>)
10014408:	f001 f8cc 	bl	100155a4 <__aeabi_fadd>
1001440c:	6060      	str	r0, [r4, #4]
1001440e:	2001      	movs	r0, #1
10014410:	4240      	negs	r0, r0
10014412:	e733      	b.n	1001427c <__ieee754_rem_pio2f+0x104>
10014414:	491a      	ldr	r1, [pc, #104]	; (10014480 <__ieee754_rem_pio2f+0x308>)
10014416:	4648      	mov	r0, r9
10014418:	f001 fc04 	bl	10015c24 <__aeabi_fmul>
1001441c:	9b03      	ldr	r3, [sp, #12]
1001441e:	1c07      	adds	r7, r0, #0
10014420:	1c01      	adds	r1, r0, #0
10014422:	1c18      	adds	r0, r3, #0
10014424:	469a      	mov	sl, r3
10014426:	f001 fd11 	bl	10015e4c <__aeabi_fsub>
1001442a:	1c01      	adds	r1, r0, #0
1001442c:	4680      	mov	r8, r0
1001442e:	4650      	mov	r0, sl
10014430:	f001 fd0c 	bl	10015e4c <__aeabi_fsub>
10014434:	1c39      	adds	r1, r7, #0
10014436:	f001 fd09 	bl	10015e4c <__aeabi_fsub>
1001443a:	4912      	ldr	r1, [pc, #72]	; (10014484 <__ieee754_rem_pio2f+0x30c>)
1001443c:	1c07      	adds	r7, r0, #0
1001443e:	4648      	mov	r0, r9
10014440:	f001 fbf0 	bl	10015c24 <__aeabi_fmul>
10014444:	1c39      	adds	r1, r7, #0
10014446:	f001 fd01 	bl	10015e4c <__aeabi_fsub>
1001444a:	4682      	mov	sl, r0
1001444c:	e75e      	b.n	1001430c <__ieee754_rem_pio2f+0x194>
1001444e:	46c0      	nop			; (mov r8, r8)
10014450:	3f490fd8 	.word	0x3f490fd8
10014454:	4016cbe3 	.word	0x4016cbe3
10014458:	3fc90f80 	.word	0x3fc90f80
1001445c:	3fc90fd0 	.word	0x3fc90fd0
10014460:	37354443 	.word	0x37354443
10014464:	43490f80 	.word	0x43490f80
10014468:	7f7fffff 	.word	0x7f7fffff
1001446c:	1001b07c 	.word	0x1001b07c
10014470:	37354400 	.word	0x37354400
10014474:	2e85a308 	.word	0x2e85a308
10014478:	3f22f984 	.word	0x3f22f984
1001447c:	1001affc 	.word	0x1001affc
10014480:	2e85a300 	.word	0x2e85a300
10014484:	248d3132 	.word	0x248d3132

10014488 <__kernel_cosf>:
10014488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001448a:	464f      	mov	r7, r9
1001448c:	4646      	mov	r6, r8
1001448e:	4b58      	ldr	r3, [pc, #352]	; (100145f0 <__kernel_cosf+0x168>)
10014490:	0045      	lsls	r5, r0, #1
10014492:	b4c0      	push	{r6, r7}
10014494:	086d      	lsrs	r5, r5, #1
10014496:	1c06      	adds	r6, r0, #0
10014498:	1c0f      	adds	r7, r1, #0
1001449a:	429d      	cmp	r5, r3
1001449c:	dc48      	bgt.n	10014530 <__kernel_cosf+0xa8>
1001449e:	f001 fe73 	bl	10016188 <__aeabi_f2iz>
100144a2:	2800      	cmp	r0, #0
100144a4:	d100      	bne.n	100144a8 <__kernel_cosf+0x20>
100144a6:	e09f      	b.n	100145e8 <__kernel_cosf+0x160>
100144a8:	1c31      	adds	r1, r6, #0
100144aa:	1c30      	adds	r0, r6, #0
100144ac:	f001 fbba 	bl	10015c24 <__aeabi_fmul>
100144b0:	4950      	ldr	r1, [pc, #320]	; (100145f4 <__kernel_cosf+0x16c>)
100144b2:	1c04      	adds	r4, r0, #0
100144b4:	f001 fbb6 	bl	10015c24 <__aeabi_fmul>
100144b8:	494f      	ldr	r1, [pc, #316]	; (100145f8 <__kernel_cosf+0x170>)
100144ba:	f001 f873 	bl	100155a4 <__aeabi_fadd>
100144be:	1c21      	adds	r1, r4, #0
100144c0:	f001 fbb0 	bl	10015c24 <__aeabi_fmul>
100144c4:	494d      	ldr	r1, [pc, #308]	; (100145fc <__kernel_cosf+0x174>)
100144c6:	f001 fcc1 	bl	10015e4c <__aeabi_fsub>
100144ca:	1c21      	adds	r1, r4, #0
100144cc:	f001 fbaa 	bl	10015c24 <__aeabi_fmul>
100144d0:	494b      	ldr	r1, [pc, #300]	; (10014600 <__kernel_cosf+0x178>)
100144d2:	f001 f867 	bl	100155a4 <__aeabi_fadd>
100144d6:	1c21      	adds	r1, r4, #0
100144d8:	f001 fba4 	bl	10015c24 <__aeabi_fmul>
100144dc:	4949      	ldr	r1, [pc, #292]	; (10014604 <__kernel_cosf+0x17c>)
100144de:	f001 fcb5 	bl	10015e4c <__aeabi_fsub>
100144e2:	1c21      	adds	r1, r4, #0
100144e4:	f001 fb9e 	bl	10015c24 <__aeabi_fmul>
100144e8:	4947      	ldr	r1, [pc, #284]	; (10014608 <__kernel_cosf+0x180>)
100144ea:	f001 f85b 	bl	100155a4 <__aeabi_fadd>
100144ee:	1c21      	adds	r1, r4, #0
100144f0:	f001 fb98 	bl	10015c24 <__aeabi_fmul>
100144f4:	4680      	mov	r8, r0
100144f6:	21fc      	movs	r1, #252	; 0xfc
100144f8:	1c20      	adds	r0, r4, #0
100144fa:	0589      	lsls	r1, r1, #22
100144fc:	f001 fb92 	bl	10015c24 <__aeabi_fmul>
10014500:	4641      	mov	r1, r8
10014502:	1c05      	adds	r5, r0, #0
10014504:	1c20      	adds	r0, r4, #0
10014506:	f001 fb8d 	bl	10015c24 <__aeabi_fmul>
1001450a:	1c39      	adds	r1, r7, #0
1001450c:	1c04      	adds	r4, r0, #0
1001450e:	1c30      	adds	r0, r6, #0
10014510:	f001 fb88 	bl	10015c24 <__aeabi_fmul>
10014514:	1c01      	adds	r1, r0, #0
10014516:	1c20      	adds	r0, r4, #0
10014518:	f001 fc98 	bl	10015e4c <__aeabi_fsub>
1001451c:	1c01      	adds	r1, r0, #0
1001451e:	1c28      	adds	r0, r5, #0
10014520:	f001 fc94 	bl	10015e4c <__aeabi_fsub>
10014524:	1c01      	adds	r1, r0, #0
10014526:	20fe      	movs	r0, #254	; 0xfe
10014528:	0580      	lsls	r0, r0, #22
1001452a:	f001 fc8f 	bl	10015e4c <__aeabi_fsub>
1001452e:	e053      	b.n	100145d8 <__kernel_cosf+0x150>
10014530:	1c01      	adds	r1, r0, #0
10014532:	f001 fb77 	bl	10015c24 <__aeabi_fmul>
10014536:	492f      	ldr	r1, [pc, #188]	; (100145f4 <__kernel_cosf+0x16c>)
10014538:	1c04      	adds	r4, r0, #0
1001453a:	f001 fb73 	bl	10015c24 <__aeabi_fmul>
1001453e:	492e      	ldr	r1, [pc, #184]	; (100145f8 <__kernel_cosf+0x170>)
10014540:	f001 f830 	bl	100155a4 <__aeabi_fadd>
10014544:	1c21      	adds	r1, r4, #0
10014546:	f001 fb6d 	bl	10015c24 <__aeabi_fmul>
1001454a:	492c      	ldr	r1, [pc, #176]	; (100145fc <__kernel_cosf+0x174>)
1001454c:	f001 fc7e 	bl	10015e4c <__aeabi_fsub>
10014550:	1c21      	adds	r1, r4, #0
10014552:	f001 fb67 	bl	10015c24 <__aeabi_fmul>
10014556:	492a      	ldr	r1, [pc, #168]	; (10014600 <__kernel_cosf+0x178>)
10014558:	f001 f824 	bl	100155a4 <__aeabi_fadd>
1001455c:	1c21      	adds	r1, r4, #0
1001455e:	f001 fb61 	bl	10015c24 <__aeabi_fmul>
10014562:	4928      	ldr	r1, [pc, #160]	; (10014604 <__kernel_cosf+0x17c>)
10014564:	f001 fc72 	bl	10015e4c <__aeabi_fsub>
10014568:	1c21      	adds	r1, r4, #0
1001456a:	f001 fb5b 	bl	10015c24 <__aeabi_fmul>
1001456e:	4926      	ldr	r1, [pc, #152]	; (10014608 <__kernel_cosf+0x180>)
10014570:	f001 f818 	bl	100155a4 <__aeabi_fadd>
10014574:	1c21      	adds	r1, r4, #0
10014576:	f001 fb55 	bl	10015c24 <__aeabi_fmul>
1001457a:	4b24      	ldr	r3, [pc, #144]	; (1001460c <__kernel_cosf+0x184>)
1001457c:	4680      	mov	r8, r0
1001457e:	429d      	cmp	r5, r3
10014580:	ddb9      	ble.n	100144f6 <__kernel_cosf+0x6e>
10014582:	4b23      	ldr	r3, [pc, #140]	; (10014610 <__kernel_cosf+0x188>)
10014584:	429d      	cmp	r5, r3
10014586:	dc2b      	bgt.n	100145e0 <__kernel_cosf+0x158>
10014588:	23ff      	movs	r3, #255	; 0xff
1001458a:	061b      	lsls	r3, r3, #24
1001458c:	469c      	mov	ip, r3
1001458e:	20fe      	movs	r0, #254	; 0xfe
10014590:	4465      	add	r5, ip
10014592:	1c29      	adds	r1, r5, #0
10014594:	0580      	lsls	r0, r0, #22
10014596:	f001 fc59 	bl	10015e4c <__aeabi_fsub>
1001459a:	4681      	mov	r9, r0
1001459c:	21fc      	movs	r1, #252	; 0xfc
1001459e:	1c20      	adds	r0, r4, #0
100145a0:	0589      	lsls	r1, r1, #22
100145a2:	f001 fb3f 	bl	10015c24 <__aeabi_fmul>
100145a6:	1c29      	adds	r1, r5, #0
100145a8:	f001 fc50 	bl	10015e4c <__aeabi_fsub>
100145ac:	4641      	mov	r1, r8
100145ae:	1c05      	adds	r5, r0, #0
100145b0:	1c20      	adds	r0, r4, #0
100145b2:	f001 fb37 	bl	10015c24 <__aeabi_fmul>
100145b6:	1c39      	adds	r1, r7, #0
100145b8:	1c04      	adds	r4, r0, #0
100145ba:	1c30      	adds	r0, r6, #0
100145bc:	f001 fb32 	bl	10015c24 <__aeabi_fmul>
100145c0:	1c01      	adds	r1, r0, #0
100145c2:	1c20      	adds	r0, r4, #0
100145c4:	f001 fc42 	bl	10015e4c <__aeabi_fsub>
100145c8:	1c01      	adds	r1, r0, #0
100145ca:	1c28      	adds	r0, r5, #0
100145cc:	f001 fc3e 	bl	10015e4c <__aeabi_fsub>
100145d0:	1c01      	adds	r1, r0, #0
100145d2:	4648      	mov	r0, r9
100145d4:	f001 fc3a 	bl	10015e4c <__aeabi_fsub>
100145d8:	bc0c      	pop	{r2, r3}
100145da:	4690      	mov	r8, r2
100145dc:	4699      	mov	r9, r3
100145de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100145e0:	4b0c      	ldr	r3, [pc, #48]	; (10014614 <__kernel_cosf+0x18c>)
100145e2:	4d0d      	ldr	r5, [pc, #52]	; (10014618 <__kernel_cosf+0x190>)
100145e4:	4699      	mov	r9, r3
100145e6:	e7d9      	b.n	1001459c <__kernel_cosf+0x114>
100145e8:	20fe      	movs	r0, #254	; 0xfe
100145ea:	0580      	lsls	r0, r0, #22
100145ec:	e7f4      	b.n	100145d8 <__kernel_cosf+0x150>
100145ee:	46c0      	nop			; (mov r8, r8)
100145f0:	31ffffff 	.word	0x31ffffff
100145f4:	ad47d74e 	.word	0xad47d74e
100145f8:	310f74f6 	.word	0x310f74f6
100145fc:	3493f27c 	.word	0x3493f27c
10014600:	37d00d01 	.word	0x37d00d01
10014604:	3ab60b61 	.word	0x3ab60b61
10014608:	3d2aaaab 	.word	0x3d2aaaab
1001460c:	3e999999 	.word	0x3e999999
10014610:	3f480000 	.word	0x3f480000
10014614:	3f380000 	.word	0x3f380000
10014618:	3e900000 	.word	0x3e900000

1001461c <__kernel_rem_pio2f>:
1001461c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001461e:	465f      	mov	r7, fp
10014620:	4656      	mov	r6, sl
10014622:	464d      	mov	r5, r9
10014624:	4644      	mov	r4, r8
10014626:	b4f0      	push	{r4, r5, r6, r7}
10014628:	b0dd      	sub	sp, #372	; 0x174
1001462a:	469b      	mov	fp, r3
1001462c:	9b66      	ldr	r3, [sp, #408]	; 0x198
1001462e:	9106      	str	r1, [sp, #24]
10014630:	0099      	lsls	r1, r3, #2
10014632:	4bca      	ldr	r3, [pc, #808]	; (1001495c <__kernel_rem_pio2f+0x340>)
10014634:	9000      	str	r0, [sp, #0]
10014636:	58cb      	ldr	r3, [r1, r3]
10014638:	2007      	movs	r0, #7
1001463a:	001c      	movs	r4, r3
1001463c:	9305      	str	r3, [sp, #20]
1001463e:	2301      	movs	r3, #1
10014640:	425b      	negs	r3, r3
10014642:	445b      	add	r3, fp
10014644:	4699      	mov	r9, r3
10014646:	1ed3      	subs	r3, r2, #3
10014648:	17d9      	asrs	r1, r3, #31
1001464a:	4001      	ands	r1, r0
1001464c:	18cb      	adds	r3, r1, r3
1001464e:	10db      	asrs	r3, r3, #3
10014650:	0019      	movs	r1, r3
10014652:	43db      	mvns	r3, r3
10014654:	17db      	asrs	r3, r3, #31
10014656:	4019      	ands	r1, r3
10014658:	000b      	movs	r3, r1
1001465a:	3301      	adds	r3, #1
1001465c:	930a      	str	r3, [sp, #40]	; 0x28
1001465e:	00db      	lsls	r3, r3, #3
10014660:	1ad3      	subs	r3, r2, r3
10014662:	464a      	mov	r2, r9
10014664:	9108      	str	r1, [sp, #32]
10014666:	9302      	str	r3, [sp, #8]
10014668:	1a8e      	subs	r6, r1, r2
1001466a:	18a7      	adds	r7, r4, r2
1001466c:	d419      	bmi.n	100146a2 <__kernel_rem_pio2f+0x86>
1001466e:	9a67      	ldr	r2, [sp, #412]	; 0x19c
10014670:	3701      	adds	r7, #1
10014672:	4690      	mov	r8, r2
10014674:	00b3      	lsls	r3, r6, #2
10014676:	00bf      	lsls	r7, r7, #2
10014678:	4498      	add	r8, r3
1001467a:	2400      	movs	r4, #0
1001467c:	ad20      	add	r5, sp, #128	; 0x80
1001467e:	e008      	b.n	10014692 <__kernel_rem_pio2f+0x76>
10014680:	4643      	mov	r3, r8
10014682:	5918      	ldr	r0, [r3, r4]
10014684:	f001 fda2 	bl	100161cc <__aeabi_i2f>
10014688:	5128      	str	r0, [r5, r4]
1001468a:	3404      	adds	r4, #4
1001468c:	3601      	adds	r6, #1
1001468e:	42bc      	cmp	r4, r7
10014690:	d007      	beq.n	100146a2 <__kernel_rem_pio2f+0x86>
10014692:	2e00      	cmp	r6, #0
10014694:	daf4      	bge.n	10014680 <__kernel_rem_pio2f+0x64>
10014696:	2000      	movs	r0, #0
10014698:	5128      	str	r0, [r5, r4]
1001469a:	3404      	adds	r4, #4
1001469c:	3601      	adds	r6, #1
1001469e:	42bc      	cmp	r4, r7
100146a0:	d1f7      	bne.n	10014692 <__kernel_rem_pio2f+0x76>
100146a2:	9b05      	ldr	r3, [sp, #20]
100146a4:	2b00      	cmp	r3, #0
100146a6:	da00      	bge.n	100146aa <__kernel_rem_pio2f+0x8e>
100146a8:	e33d      	b.n	10014d26 <__kernel_rem_pio2f+0x70a>
100146aa:	9b05      	ldr	r3, [sp, #20]
100146ac:	3301      	adds	r3, #1
100146ae:	009b      	lsls	r3, r3, #2
100146b0:	469a      	mov	sl, r3
100146b2:	465b      	mov	r3, fp
100146b4:	009b      	lsls	r3, r3, #2
100146b6:	469b      	mov	fp, r3
100146b8:	9b00      	ldr	r3, [sp, #0]
100146ba:	445b      	add	r3, fp
100146bc:	001f      	movs	r7, r3
100146be:	2300      	movs	r3, #0
100146c0:	4698      	mov	r8, r3
100146c2:	ab48      	add	r3, sp, #288	; 0x120
100146c4:	9304      	str	r3, [sp, #16]
100146c6:	465b      	mov	r3, fp
100146c8:	3b04      	subs	r3, #4
100146ca:	9301      	str	r3, [sp, #4]
100146cc:	464b      	mov	r3, r9
100146ce:	2b00      	cmp	r3, #0
100146d0:	da00      	bge.n	100146d4 <__kernel_rem_pio2f+0xb8>
100146d2:	e1b6      	b.n	10014a42 <__kernel_rem_pio2f+0x426>
100146d4:	9b01      	ldr	r3, [sp, #4]
100146d6:	2600      	movs	r6, #0
100146d8:	4443      	add	r3, r8
100146da:	001c      	movs	r4, r3
100146dc:	ab20      	add	r3, sp, #128	; 0x80
100146de:	469c      	mov	ip, r3
100146e0:	9d00      	ldr	r5, [sp, #0]
100146e2:	4464      	add	r4, ip
100146e4:	6821      	ldr	r1, [r4, #0]
100146e6:	cd01      	ldmia	r5!, {r0}
100146e8:	f001 fa9c 	bl	10015c24 <__aeabi_fmul>
100146ec:	1c01      	adds	r1, r0, #0
100146ee:	1c30      	adds	r0, r6, #0
100146f0:	f000 ff58 	bl	100155a4 <__aeabi_fadd>
100146f4:	3c04      	subs	r4, #4
100146f6:	1c06      	adds	r6, r0, #0
100146f8:	42bd      	cmp	r5, r7
100146fa:	d1f3      	bne.n	100146e4 <__kernel_rem_pio2f+0xc8>
100146fc:	4642      	mov	r2, r8
100146fe:	9b04      	ldr	r3, [sp, #16]
10014700:	509e      	str	r6, [r3, r2]
10014702:	2304      	movs	r3, #4
10014704:	469c      	mov	ip, r3
10014706:	44e0      	add	r8, ip
10014708:	45d0      	cmp	r8, sl
1001470a:	d1df      	bne.n	100146cc <__kernel_rem_pio2f+0xb0>
1001470c:	9a05      	ldr	r2, [sp, #20]
1001470e:	4994      	ldr	r1, [pc, #592]	; (10014960 <__kernel_rem_pio2f+0x344>)
10014710:	0013      	movs	r3, r2
10014712:	468c      	mov	ip, r1
10014714:	4463      	add	r3, ip
10014716:	009b      	lsls	r3, r3, #2
10014718:	a80c      	add	r0, sp, #48	; 0x30
1001471a:	0019      	movs	r1, r3
1001471c:	4684      	mov	ip, r0
1001471e:	4461      	add	r1, ip
10014720:	9107      	str	r1, [sp, #28]
10014722:	3304      	adds	r3, #4
10014724:	9900      	ldr	r1, [sp, #0]
10014726:	4463      	add	r3, ip
10014728:	4459      	add	r1, fp
1001472a:	9309      	str	r3, [sp, #36]	; 0x24
1001472c:	464b      	mov	r3, r9
1001472e:	000f      	movs	r7, r1
10014730:	4693      	mov	fp, r2
10014732:	9301      	str	r3, [sp, #4]
10014734:	465b      	mov	r3, fp
10014736:	009b      	lsls	r3, r3, #2
10014738:	469a      	mov	sl, r3
1001473a:	4652      	mov	r2, sl
1001473c:	9b04      	ldr	r3, [sp, #16]
1001473e:	589d      	ldr	r5, [r3, r2]
10014740:	465a      	mov	r2, fp
10014742:	2a00      	cmp	r2, #0
10014744:	dd26      	ble.n	10014794 <__kernel_rem_pio2f+0x178>
10014746:	aa0c      	add	r2, sp, #48	; 0x30
10014748:	469c      	mov	ip, r3
1001474a:	46b8      	mov	r8, r7
1001474c:	0017      	movs	r7, r2
1001474e:	4c85      	ldr	r4, [pc, #532]	; (10014964 <__kernel_rem_pio2f+0x348>)
10014750:	445c      	add	r4, fp
10014752:	00a4      	lsls	r4, r4, #2
10014754:	4464      	add	r4, ip
10014756:	21ee      	movs	r1, #238	; 0xee
10014758:	1c28      	adds	r0, r5, #0
1001475a:	0589      	lsls	r1, r1, #22
1001475c:	f001 fa62 	bl	10015c24 <__aeabi_fmul>
10014760:	f001 fd12 	bl	10016188 <__aeabi_f2iz>
10014764:	f001 fd32 	bl	100161cc <__aeabi_i2f>
10014768:	2187      	movs	r1, #135	; 0x87
1001476a:	05c9      	lsls	r1, r1, #23
1001476c:	1c06      	adds	r6, r0, #0
1001476e:	f001 fa59 	bl	10015c24 <__aeabi_fmul>
10014772:	1c01      	adds	r1, r0, #0
10014774:	1c28      	adds	r0, r5, #0
10014776:	f001 fb69 	bl	10015e4c <__aeabi_fsub>
1001477a:	f001 fd05 	bl	10016188 <__aeabi_f2iz>
1001477e:	6821      	ldr	r1, [r4, #0]
10014780:	c701      	stmia	r7!, {r0}
10014782:	1c30      	adds	r0, r6, #0
10014784:	f000 ff0e 	bl	100155a4 <__aeabi_fadd>
10014788:	3c04      	subs	r4, #4
1001478a:	ab47      	add	r3, sp, #284	; 0x11c
1001478c:	1c05      	adds	r5, r0, #0
1001478e:	429c      	cmp	r4, r3
10014790:	d1e1      	bne.n	10014756 <__kernel_rem_pio2f+0x13a>
10014792:	4647      	mov	r7, r8
10014794:	9b02      	ldr	r3, [sp, #8]
10014796:	1c28      	adds	r0, r5, #0
10014798:	0019      	movs	r1, r3
1001479a:	4698      	mov	r8, r3
1001479c:	f000 fb98 	bl	10014ed0 <scalbnf>
100147a0:	21f8      	movs	r1, #248	; 0xf8
100147a2:	0589      	lsls	r1, r1, #22
100147a4:	1c04      	adds	r4, r0, #0
100147a6:	f001 fa3d 	bl	10015c24 <__aeabi_fmul>
100147aa:	f000 fb43 	bl	10014e34 <floorf>
100147ae:	2182      	movs	r1, #130	; 0x82
100147b0:	05c9      	lsls	r1, r1, #23
100147b2:	f001 fa37 	bl	10015c24 <__aeabi_fmul>
100147b6:	1c01      	adds	r1, r0, #0
100147b8:	1c20      	adds	r0, r4, #0
100147ba:	f001 fb47 	bl	10015e4c <__aeabi_fsub>
100147be:	1c04      	adds	r4, r0, #0
100147c0:	f001 fce2 	bl	10016188 <__aeabi_f2iz>
100147c4:	0006      	movs	r6, r0
100147c6:	f001 fd01 	bl	100161cc <__aeabi_i2f>
100147ca:	1c01      	adds	r1, r0, #0
100147cc:	1c20      	adds	r0, r4, #0
100147ce:	f001 fb3d 	bl	10015e4c <__aeabi_fsub>
100147d2:	4644      	mov	r4, r8
100147d4:	1c05      	adds	r5, r0, #0
100147d6:	2c00      	cmp	r4, #0
100147d8:	dc00      	bgt.n	100147dc <__kernel_rem_pio2f+0x1c0>
100147da:	e112      	b.n	10014a02 <__kernel_rem_pio2f+0x3e6>
100147dc:	465b      	mov	r3, fp
100147de:	1e5a      	subs	r2, r3, #1
100147e0:	0092      	lsls	r2, r2, #2
100147e2:	ab0c      	add	r3, sp, #48	; 0x30
100147e4:	589b      	ldr	r3, [r3, r2]
100147e6:	2008      	movs	r0, #8
100147e8:	0019      	movs	r1, r3
100147ea:	1b00      	subs	r0, r0, r4
100147ec:	4101      	asrs	r1, r0
100147ee:	1876      	adds	r6, r6, r1
100147f0:	4081      	lsls	r1, r0
100147f2:	1a5b      	subs	r3, r3, r1
100147f4:	a90c      	add	r1, sp, #48	; 0x30
100147f6:	508b      	str	r3, [r1, r2]
100147f8:	2207      	movs	r2, #7
100147fa:	1b12      	subs	r2, r2, r4
100147fc:	4113      	asrs	r3, r2
100147fe:	9303      	str	r3, [sp, #12]
10014800:	9b03      	ldr	r3, [sp, #12]
10014802:	2b00      	cmp	r3, #0
10014804:	dd3a      	ble.n	1001487c <__kernel_rem_pio2f+0x260>
10014806:	465b      	mov	r3, fp
10014808:	3601      	adds	r6, #1
1001480a:	2b00      	cmp	r3, #0
1001480c:	dc00      	bgt.n	10014810 <__kernel_rem_pio2f+0x1f4>
1001480e:	e261      	b.n	10014cd4 <__kernel_rem_pio2f+0x6b8>
10014810:	2280      	movs	r2, #128	; 0x80
10014812:	0052      	lsls	r2, r2, #1
10014814:	46a8      	mov	r8, r5
10014816:	ab0c      	add	r3, sp, #48	; 0x30
10014818:	2100      	movs	r1, #0
1001481a:	2400      	movs	r4, #0
1001481c:	20ff      	movs	r0, #255	; 0xff
1001481e:	4694      	mov	ip, r2
10014820:	465d      	mov	r5, fp
10014822:	e009      	b.n	10014838 <__kernel_rem_pio2f+0x21c>
10014824:	2a00      	cmp	r2, #0
10014826:	d003      	beq.n	10014830 <__kernel_rem_pio2f+0x214>
10014828:	4664      	mov	r4, ip
1001482a:	1aa2      	subs	r2, r4, r2
1001482c:	2401      	movs	r4, #1
1001482e:	601a      	str	r2, [r3, #0]
10014830:	3101      	adds	r1, #1
10014832:	3304      	adds	r3, #4
10014834:	428d      	cmp	r5, r1
10014836:	dd09      	ble.n	1001484c <__kernel_rem_pio2f+0x230>
10014838:	681a      	ldr	r2, [r3, #0]
1001483a:	2c00      	cmp	r4, #0
1001483c:	d0f2      	beq.n	10014824 <__kernel_rem_pio2f+0x208>
1001483e:	1a82      	subs	r2, r0, r2
10014840:	3101      	adds	r1, #1
10014842:	601a      	str	r2, [r3, #0]
10014844:	2401      	movs	r4, #1
10014846:	3304      	adds	r3, #4
10014848:	428d      	cmp	r5, r1
1001484a:	dcf5      	bgt.n	10014838 <__kernel_rem_pio2f+0x21c>
1001484c:	46ab      	mov	fp, r5
1001484e:	4645      	mov	r5, r8
10014850:	9b02      	ldr	r3, [sp, #8]
10014852:	2b00      	cmp	r3, #0
10014854:	dd0f      	ble.n	10014876 <__kernel_rem_pio2f+0x25a>
10014856:	2b01      	cmp	r3, #1
10014858:	d100      	bne.n	1001485c <__kernel_rem_pio2f+0x240>
1001485a:	e0dd      	b.n	10014a18 <__kernel_rem_pio2f+0x3fc>
1001485c:	2b02      	cmp	r3, #2
1001485e:	d10a      	bne.n	10014876 <__kernel_rem_pio2f+0x25a>
10014860:	465b      	mov	r3, fp
10014862:	3b01      	subs	r3, #1
10014864:	009b      	lsls	r3, r3, #2
10014866:	aa0c      	add	r2, sp, #48	; 0x30
10014868:	58d2      	ldr	r2, [r2, r3]
1001486a:	920b      	str	r2, [sp, #44]	; 0x2c
1001486c:	223f      	movs	r2, #63	; 0x3f
1001486e:	990b      	ldr	r1, [sp, #44]	; 0x2c
10014870:	400a      	ands	r2, r1
10014872:	a90c      	add	r1, sp, #48	; 0x30
10014874:	50ca      	str	r2, [r1, r3]
10014876:	9b03      	ldr	r3, [sp, #12]
10014878:	2b02      	cmp	r3, #2
1001487a:	d075      	beq.n	10014968 <__kernel_rem_pio2f+0x34c>
1001487c:	2100      	movs	r1, #0
1001487e:	1c28      	adds	r0, r5, #0
10014880:	f000 fd58 	bl	10015334 <__aeabi_fcmpeq>
10014884:	2800      	cmp	r0, #0
10014886:	d100      	bne.n	1001488a <__kernel_rem_pio2f+0x26e>
10014888:	e088      	b.n	1001499c <__kernel_rem_pio2f+0x380>
1001488a:	465b      	mov	r3, fp
1001488c:	1e59      	subs	r1, r3, #1
1001488e:	9b05      	ldr	r3, [sp, #20]
10014890:	428b      	cmp	r3, r1
10014892:	dc0f      	bgt.n	100148b4 <__kernel_rem_pio2f+0x298>
10014894:	aa0c      	add	r2, sp, #48	; 0x30
10014896:	4694      	mov	ip, r2
10014898:	2200      	movs	r2, #0
1001489a:	4b32      	ldr	r3, [pc, #200]	; (10014964 <__kernel_rem_pio2f+0x348>)
1001489c:	9809      	ldr	r0, [sp, #36]	; 0x24
1001489e:	445b      	add	r3, fp
100148a0:	009b      	lsls	r3, r3, #2
100148a2:	4463      	add	r3, ip
100148a4:	681c      	ldr	r4, [r3, #0]
100148a6:	3b04      	subs	r3, #4
100148a8:	4322      	orrs	r2, r4
100148aa:	4283      	cmp	r3, r0
100148ac:	d1fa      	bne.n	100148a4 <__kernel_rem_pio2f+0x288>
100148ae:	2a00      	cmp	r2, #0
100148b0:	d000      	beq.n	100148b4 <__kernel_rem_pio2f+0x298>
100148b2:	e0df      	b.n	10014a74 <__kernel_rem_pio2f+0x458>
100148b4:	9b05      	ldr	r3, [sp, #20]
100148b6:	aa0c      	add	r2, sp, #48	; 0x30
100148b8:	3b01      	subs	r3, #1
100148ba:	009b      	lsls	r3, r3, #2
100148bc:	58d3      	ldr	r3, [r2, r3]
100148be:	2b00      	cmp	r3, #0
100148c0:	d000      	beq.n	100148c4 <__kernel_rem_pio2f+0x2a8>
100148c2:	e205      	b.n	10014cd0 <__kernel_rem_pio2f+0x6b4>
100148c4:	2201      	movs	r2, #1
100148c6:	9b07      	ldr	r3, [sp, #28]
100148c8:	3b04      	subs	r3, #4
100148ca:	6859      	ldr	r1, [r3, #4]
100148cc:	3201      	adds	r2, #1
100148ce:	2900      	cmp	r1, #0
100148d0:	d0fa      	beq.n	100148c8 <__kernel_rem_pio2f+0x2ac>
100148d2:	465b      	mov	r3, fp
100148d4:	445a      	add	r2, fp
100148d6:	3301      	adds	r3, #1
100148d8:	9203      	str	r2, [sp, #12]
100148da:	4293      	cmp	r3, r2
100148dc:	dc39      	bgt.n	10014952 <__kernel_rem_pio2f+0x336>
100148de:	9967      	ldr	r1, [sp, #412]	; 0x19c
100148e0:	9a08      	ldr	r2, [sp, #32]
100148e2:	4689      	mov	r9, r1
100148e4:	9904      	ldr	r1, [sp, #16]
100148e6:	189a      	adds	r2, r3, r2
100148e8:	468a      	mov	sl, r1
100148ea:	0092      	lsls	r2, r2, #2
100148ec:	4491      	add	r9, r2
100148ee:	009a      	lsls	r2, r3, #2
100148f0:	4492      	add	sl, r2
100148f2:	9a01      	ldr	r2, [sp, #4]
100148f4:	4694      	mov	ip, r2
100148f6:	aa20      	add	r2, sp, #128	; 0x80
100148f8:	4690      	mov	r8, r2
100148fa:	9a03      	ldr	r2, [sp, #12]
100148fc:	4463      	add	r3, ip
100148fe:	4694      	mov	ip, r2
10014900:	9a67      	ldr	r2, [sp, #412]	; 0x19c
10014902:	009b      	lsls	r3, r3, #2
10014904:	4693      	mov	fp, r2
10014906:	4498      	add	r8, r3
10014908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1001490a:	4463      	add	r3, ip
1001490c:	009b      	lsls	r3, r3, #2
1001490e:	449b      	add	fp, r3
10014910:	464b      	mov	r3, r9
10014912:	6818      	ldr	r0, [r3, #0]
10014914:	f001 fc5a 	bl	100161cc <__aeabi_i2f>
10014918:	4643      	mov	r3, r8
1001491a:	6018      	str	r0, [r3, #0]
1001491c:	9b01      	ldr	r3, [sp, #4]
1001491e:	2b00      	cmp	r3, #0
10014920:	db1a      	blt.n	10014958 <__kernel_rem_pio2f+0x33c>
10014922:	4644      	mov	r4, r8
10014924:	2600      	movs	r6, #0
10014926:	9d00      	ldr	r5, [sp, #0]
10014928:	6821      	ldr	r1, [r4, #0]
1001492a:	cd01      	ldmia	r5!, {r0}
1001492c:	f001 f97a 	bl	10015c24 <__aeabi_fmul>
10014930:	1c01      	adds	r1, r0, #0
10014932:	1c30      	adds	r0, r6, #0
10014934:	f000 fe36 	bl	100155a4 <__aeabi_fadd>
10014938:	3c04      	subs	r4, #4
1001493a:	1c06      	adds	r6, r0, #0
1001493c:	42bd      	cmp	r5, r7
1001493e:	d1f3      	bne.n	10014928 <__kernel_rem_pio2f+0x30c>
10014940:	4653      	mov	r3, sl
10014942:	c340      	stmia	r3!, {r6}
10014944:	469a      	mov	sl, r3
10014946:	2304      	movs	r3, #4
10014948:	469c      	mov	ip, r3
1001494a:	44e1      	add	r9, ip
1001494c:	44e0      	add	r8, ip
1001494e:	45d9      	cmp	r9, fp
10014950:	d1de      	bne.n	10014910 <__kernel_rem_pio2f+0x2f4>
10014952:	9b03      	ldr	r3, [sp, #12]
10014954:	469b      	mov	fp, r3
10014956:	e6ed      	b.n	10014734 <__kernel_rem_pio2f+0x118>
10014958:	2600      	movs	r6, #0
1001495a:	e7f1      	b.n	10014940 <__kernel_rem_pio2f+0x324>
1001495c:	1001b394 	.word	0x1001b394
10014960:	3ffffffe 	.word	0x3ffffffe
10014964:	3fffffff 	.word	0x3fffffff
10014968:	20fe      	movs	r0, #254	; 0xfe
1001496a:	1c29      	adds	r1, r5, #0
1001496c:	0580      	lsls	r0, r0, #22
1001496e:	f001 fa6d 	bl	10015e4c <__aeabi_fsub>
10014972:	1c05      	adds	r5, r0, #0
10014974:	2c00      	cmp	r4, #0
10014976:	d100      	bne.n	1001497a <__kernel_rem_pio2f+0x35e>
10014978:	e780      	b.n	1001487c <__kernel_rem_pio2f+0x260>
1001497a:	20fe      	movs	r0, #254	; 0xfe
1001497c:	9902      	ldr	r1, [sp, #8]
1001497e:	0580      	lsls	r0, r0, #22
10014980:	f000 faa6 	bl	10014ed0 <scalbnf>
10014984:	1c01      	adds	r1, r0, #0
10014986:	1c28      	adds	r0, r5, #0
10014988:	f001 fa60 	bl	10015e4c <__aeabi_fsub>
1001498c:	1c05      	adds	r5, r0, #0
1001498e:	2100      	movs	r1, #0
10014990:	1c28      	adds	r0, r5, #0
10014992:	f000 fccf 	bl	10015334 <__aeabi_fcmpeq>
10014996:	2800      	cmp	r0, #0
10014998:	d000      	beq.n	1001499c <__kernel_rem_pio2f+0x380>
1001499a:	e776      	b.n	1001488a <__kernel_rem_pio2f+0x26e>
1001499c:	9601      	str	r6, [sp, #4]
1001499e:	9e02      	ldr	r6, [sp, #8]
100149a0:	1c28      	adds	r0, r5, #0
100149a2:	4271      	negs	r1, r6
100149a4:	f000 fa94 	bl	10014ed0 <scalbnf>
100149a8:	2187      	movs	r1, #135	; 0x87
100149aa:	05c9      	lsls	r1, r1, #23
100149ac:	1c05      	adds	r5, r0, #0
100149ae:	f000 fce5 	bl	1001537c <__aeabi_fcmpge>
100149b2:	2800      	cmp	r0, #0
100149b4:	d100      	bne.n	100149b8 <__kernel_rem_pio2f+0x39c>
100149b6:	e199      	b.n	10014cec <__kernel_rem_pio2f+0x6d0>
100149b8:	21ee      	movs	r1, #238	; 0xee
100149ba:	1c28      	adds	r0, r5, #0
100149bc:	0589      	lsls	r1, r1, #22
100149be:	f001 f931 	bl	10015c24 <__aeabi_fmul>
100149c2:	f001 fbe1 	bl	10016188 <__aeabi_f2iz>
100149c6:	f001 fc01 	bl	100161cc <__aeabi_i2f>
100149ca:	2187      	movs	r1, #135	; 0x87
100149cc:	05c9      	lsls	r1, r1, #23
100149ce:	1c04      	adds	r4, r0, #0
100149d0:	f001 f928 	bl	10015c24 <__aeabi_fmul>
100149d4:	1c01      	adds	r1, r0, #0
100149d6:	1c28      	adds	r0, r5, #0
100149d8:	f001 fa38 	bl	10015e4c <__aeabi_fsub>
100149dc:	f001 fbd4 	bl	10016188 <__aeabi_f2iz>
100149e0:	4652      	mov	r2, sl
100149e2:	ab0c      	add	r3, sp, #48	; 0x30
100149e4:	5098      	str	r0, [r3, r2]
100149e6:	2301      	movs	r3, #1
100149e8:	445b      	add	r3, fp
100149ea:	469a      	mov	sl, r3
100149ec:	0033      	movs	r3, r6
100149ee:	3308      	adds	r3, #8
100149f0:	9302      	str	r3, [sp, #8]
100149f2:	4653      	mov	r3, sl
100149f4:	1c20      	adds	r0, r4, #0
100149f6:	009d      	lsls	r5, r3, #2
100149f8:	f001 fbc6 	bl	10016188 <__aeabi_f2iz>
100149fc:	ab0c      	add	r3, sp, #48	; 0x30
100149fe:	5158      	str	r0, [r3, r5]
10014a00:	e052      	b.n	10014aa8 <__kernel_rem_pio2f+0x48c>
10014a02:	9b02      	ldr	r3, [sp, #8]
10014a04:	2b00      	cmp	r3, #0
10014a06:	d113      	bne.n	10014a30 <__kernel_rem_pio2f+0x414>
10014a08:	465b      	mov	r3, fp
10014a0a:	3b01      	subs	r3, #1
10014a0c:	009b      	lsls	r3, r3, #2
10014a0e:	aa0c      	add	r2, sp, #48	; 0x30
10014a10:	58d3      	ldr	r3, [r2, r3]
10014a12:	121b      	asrs	r3, r3, #8
10014a14:	9303      	str	r3, [sp, #12]
10014a16:	e6f3      	b.n	10014800 <__kernel_rem_pio2f+0x1e4>
10014a18:	465b      	mov	r3, fp
10014a1a:	3b01      	subs	r3, #1
10014a1c:	009b      	lsls	r3, r3, #2
10014a1e:	aa0c      	add	r2, sp, #48	; 0x30
10014a20:	58d2      	ldr	r2, [r2, r3]
10014a22:	920b      	str	r2, [sp, #44]	; 0x2c
10014a24:	227f      	movs	r2, #127	; 0x7f
10014a26:	990b      	ldr	r1, [sp, #44]	; 0x2c
10014a28:	400a      	ands	r2, r1
10014a2a:	a90c      	add	r1, sp, #48	; 0x30
10014a2c:	50ca      	str	r2, [r1, r3]
10014a2e:	e722      	b.n	10014876 <__kernel_rem_pio2f+0x25a>
10014a30:	21fc      	movs	r1, #252	; 0xfc
10014a32:	0589      	lsls	r1, r1, #22
10014a34:	f000 fca2 	bl	1001537c <__aeabi_fcmpge>
10014a38:	2800      	cmp	r0, #0
10014a3a:	d10d      	bne.n	10014a58 <__kernel_rem_pio2f+0x43c>
10014a3c:	2300      	movs	r3, #0
10014a3e:	9303      	str	r3, [sp, #12]
10014a40:	e71c      	b.n	1001487c <__kernel_rem_pio2f+0x260>
10014a42:	4642      	mov	r2, r8
10014a44:	2600      	movs	r6, #0
10014a46:	9b04      	ldr	r3, [sp, #16]
10014a48:	509e      	str	r6, [r3, r2]
10014a4a:	2304      	movs	r3, #4
10014a4c:	469c      	mov	ip, r3
10014a4e:	44e0      	add	r8, ip
10014a50:	45d0      	cmp	r8, sl
10014a52:	d000      	beq.n	10014a56 <__kernel_rem_pio2f+0x43a>
10014a54:	e63a      	b.n	100146cc <__kernel_rem_pio2f+0xb0>
10014a56:	e659      	b.n	1001470c <__kernel_rem_pio2f+0xf0>
10014a58:	2302      	movs	r3, #2
10014a5a:	9303      	str	r3, [sp, #12]
10014a5c:	465b      	mov	r3, fp
10014a5e:	3601      	adds	r6, #1
10014a60:	2b00      	cmp	r3, #0
10014a62:	dd00      	ble.n	10014a66 <__kernel_rem_pio2f+0x44a>
10014a64:	e6d4      	b.n	10014810 <__kernel_rem_pio2f+0x1f4>
10014a66:	20fe      	movs	r0, #254	; 0xfe
10014a68:	1c29      	adds	r1, r5, #0
10014a6a:	0580      	lsls	r0, r0, #22
10014a6c:	f001 f9ee 	bl	10015e4c <__aeabi_fsub>
10014a70:	1c05      	adds	r5, r0, #0
10014a72:	e703      	b.n	1001487c <__kernel_rem_pio2f+0x260>
10014a74:	468a      	mov	sl, r1
10014a76:	9b02      	ldr	r3, [sp, #8]
10014a78:	aa0c      	add	r2, sp, #48	; 0x30
10014a7a:	3b08      	subs	r3, #8
10014a7c:	0019      	movs	r1, r3
10014a7e:	9302      	str	r3, [sp, #8]
10014a80:	4653      	mov	r3, sl
10014a82:	009b      	lsls	r3, r3, #2
10014a84:	58d3      	ldr	r3, [r2, r3]
10014a86:	9601      	str	r6, [sp, #4]
10014a88:	2b00      	cmp	r3, #0
10014a8a:	d10d      	bne.n	10014aa8 <__kernel_rem_pio2f+0x48c>
10014a8c:	4694      	mov	ip, r2
10014a8e:	4652      	mov	r2, sl
10014a90:	4ba8      	ldr	r3, [pc, #672]	; (10014d34 <__kernel_rem_pio2f+0x718>)
10014a92:	4453      	add	r3, sl
10014a94:	009b      	lsls	r3, r3, #2
10014a96:	4463      	add	r3, ip
10014a98:	3b04      	subs	r3, #4
10014a9a:	6858      	ldr	r0, [r3, #4]
10014a9c:	3a01      	subs	r2, #1
10014a9e:	3908      	subs	r1, #8
10014aa0:	2800      	cmp	r0, #0
10014aa2:	d0f9      	beq.n	10014a98 <__kernel_rem_pio2f+0x47c>
10014aa4:	4692      	mov	sl, r2
10014aa6:	9102      	str	r1, [sp, #8]
10014aa8:	20fe      	movs	r0, #254	; 0xfe
10014aaa:	9902      	ldr	r1, [sp, #8]
10014aac:	0580      	lsls	r0, r0, #22
10014aae:	f000 fa0f 	bl	10014ed0 <scalbnf>
10014ab2:	4653      	mov	r3, sl
10014ab4:	1c06      	adds	r6, r0, #0
10014ab6:	2b00      	cmp	r3, #0
10014ab8:	da00      	bge.n	10014abc <__kernel_rem_pio2f+0x4a0>
10014aba:	e10d      	b.n	10014cd8 <__kernel_rem_pio2f+0x6bc>
10014abc:	3301      	adds	r3, #1
10014abe:	009b      	lsls	r3, r3, #2
10014ac0:	425b      	negs	r3, r3
10014ac2:	4698      	mov	r8, r3
10014ac4:	4653      	mov	r3, sl
10014ac6:	009b      	lsls	r3, r3, #2
10014ac8:	001a      	movs	r2, r3
10014aca:	001c      	movs	r4, r3
10014acc:	9300      	str	r3, [sp, #0]
10014ace:	ab0c      	add	r3, sp, #48	; 0x30
10014ad0:	469c      	mov	ip, r3
10014ad2:	9b04      	ldr	r3, [sp, #16]
10014ad4:	4464      	add	r4, ip
10014ad6:	001f      	movs	r7, r3
10014ad8:	4694      	mov	ip, r2
10014ada:	2500      	movs	r5, #0
10014adc:	4467      	add	r7, ip
10014ade:	5960      	ldr	r0, [r4, r5]
10014ae0:	f001 fb74 	bl	100161cc <__aeabi_i2f>
10014ae4:	1c31      	adds	r1, r6, #0
10014ae6:	f001 f89d 	bl	10015c24 <__aeabi_fmul>
10014aea:	21ee      	movs	r1, #238	; 0xee
10014aec:	5178      	str	r0, [r7, r5]
10014aee:	0589      	lsls	r1, r1, #22
10014af0:	1c30      	adds	r0, r6, #0
10014af2:	f001 f897 	bl	10015c24 <__aeabi_fmul>
10014af6:	3d04      	subs	r5, #4
10014af8:	1c06      	adds	r6, r0, #0
10014afa:	4545      	cmp	r5, r8
10014afc:	d1ef      	bne.n	10014ade <__kernel_rem_pio2f+0x4c2>
10014afe:	2300      	movs	r3, #0
10014b00:	4698      	mov	r8, r3
10014b02:	ab34      	add	r3, sp, #208	; 0xd0
10014b04:	469b      	mov	fp, r3
10014b06:	4b8c      	ldr	r3, [pc, #560]	; (10014d38 <__kernel_rem_pio2f+0x71c>)
10014b08:	4699      	mov	r9, r3
10014b0a:	4653      	mov	r3, sl
10014b0c:	9302      	str	r3, [sp, #8]
10014b0e:	9b05      	ldr	r3, [sp, #20]
10014b10:	469a      	mov	sl, r3
10014b12:	4653      	mov	r3, sl
10014b14:	2600      	movs	r6, #0
10014b16:	2b00      	cmp	r3, #0
10014b18:	db14      	blt.n	10014b44 <__kernel_rem_pio2f+0x528>
10014b1a:	2500      	movs	r5, #0
10014b1c:	4887      	ldr	r0, [pc, #540]	; (10014d3c <__kernel_rem_pio2f+0x720>)
10014b1e:	2600      	movs	r6, #0
10014b20:	2400      	movs	r4, #0
10014b22:	e004      	b.n	10014b2e <__kernel_rem_pio2f+0x512>
10014b24:	3504      	adds	r5, #4
10014b26:	45a0      	cmp	r8, r4
10014b28:	db0c      	blt.n	10014b44 <__kernel_rem_pio2f+0x528>
10014b2a:	464b      	mov	r3, r9
10014b2c:	58e8      	ldr	r0, [r5, r3]
10014b2e:	5979      	ldr	r1, [r7, r5]
10014b30:	f001 f878 	bl	10015c24 <__aeabi_fmul>
10014b34:	1c01      	adds	r1, r0, #0
10014b36:	1c30      	adds	r0, r6, #0
10014b38:	f000 fd34 	bl	100155a4 <__aeabi_fadd>
10014b3c:	3401      	adds	r4, #1
10014b3e:	1c06      	adds	r6, r0, #0
10014b40:	45a2      	cmp	sl, r4
10014b42:	daef      	bge.n	10014b24 <__kernel_rem_pio2f+0x508>
10014b44:	4643      	mov	r3, r8
10014b46:	465a      	mov	r2, fp
10014b48:	009b      	lsls	r3, r3, #2
10014b4a:	50d6      	str	r6, [r2, r3]
10014b4c:	2301      	movs	r3, #1
10014b4e:	469c      	mov	ip, r3
10014b50:	3f04      	subs	r7, #4
10014b52:	ab47      	add	r3, sp, #284	; 0x11c
10014b54:	44e0      	add	r8, ip
10014b56:	42bb      	cmp	r3, r7
10014b58:	d1db      	bne.n	10014b12 <__kernel_rem_pio2f+0x4f6>
10014b5a:	9b02      	ldr	r3, [sp, #8]
10014b5c:	469a      	mov	sl, r3
10014b5e:	9b66      	ldr	r3, [sp, #408]	; 0x198
10014b60:	2b02      	cmp	r3, #2
10014b62:	dc59      	bgt.n	10014c18 <__kernel_rem_pio2f+0x5fc>
10014b64:	2b00      	cmp	r3, #0
10014b66:	dc1e      	bgt.n	10014ba6 <__kernel_rem_pio2f+0x58a>
10014b68:	d113      	bne.n	10014b92 <__kernel_rem_pio2f+0x576>
10014b6a:	9b00      	ldr	r3, [sp, #0]
10014b6c:	2000      	movs	r0, #0
10014b6e:	445b      	add	r3, fp
10014b70:	001c      	movs	r4, r3
10014b72:	4655      	mov	r5, sl
10014b74:	6821      	ldr	r1, [r4, #0]
10014b76:	f000 fd15 	bl	100155a4 <__aeabi_fadd>
10014b7a:	3c04      	subs	r4, #4
10014b7c:	3d01      	subs	r5, #1
10014b7e:	d2f9      	bcs.n	10014b74 <__kernel_rem_pio2f+0x558>
10014b80:	9b03      	ldr	r3, [sp, #12]
10014b82:	2b00      	cmp	r3, #0
10014b84:	d003      	beq.n	10014b8e <__kernel_rem_pio2f+0x572>
10014b86:	2380      	movs	r3, #128	; 0x80
10014b88:	061b      	lsls	r3, r3, #24
10014b8a:	469c      	mov	ip, r3
10014b8c:	4460      	add	r0, ip
10014b8e:	9b06      	ldr	r3, [sp, #24]
10014b90:	6018      	str	r0, [r3, #0]
10014b92:	2007      	movs	r0, #7
10014b94:	9b01      	ldr	r3, [sp, #4]
10014b96:	4018      	ands	r0, r3
10014b98:	b05d      	add	sp, #372	; 0x174
10014b9a:	bc3c      	pop	{r2, r3, r4, r5}
10014b9c:	4690      	mov	r8, r2
10014b9e:	4699      	mov	r9, r3
10014ba0:	46a2      	mov	sl, r4
10014ba2:	46ab      	mov	fp, r5
10014ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014ba6:	9b00      	ldr	r3, [sp, #0]
10014ba8:	2000      	movs	r0, #0
10014baa:	445b      	add	r3, fp
10014bac:	001c      	movs	r4, r3
10014bae:	ad33      	add	r5, sp, #204	; 0xcc
10014bb0:	6821      	ldr	r1, [r4, #0]
10014bb2:	3c04      	subs	r4, #4
10014bb4:	f000 fcf6 	bl	100155a4 <__aeabi_fadd>
10014bb8:	42ac      	cmp	r4, r5
10014bba:	d1f9      	bne.n	10014bb0 <__kernel_rem_pio2f+0x594>
10014bbc:	9b03      	ldr	r3, [sp, #12]
10014bbe:	2b00      	cmp	r3, #0
10014bc0:	d01e      	beq.n	10014c00 <__kernel_rem_pio2f+0x5e4>
10014bc2:	2380      	movs	r3, #128	; 0x80
10014bc4:	9a06      	ldr	r2, [sp, #24]
10014bc6:	061b      	lsls	r3, r3, #24
10014bc8:	18c3      	adds	r3, r0, r3
10014bca:	6013      	str	r3, [r2, #0]
10014bcc:	1c01      	adds	r1, r0, #0
10014bce:	9834      	ldr	r0, [sp, #208]	; 0xd0
10014bd0:	f001 f93c 	bl	10015e4c <__aeabi_fsub>
10014bd4:	4653      	mov	r3, sl
10014bd6:	2b00      	cmp	r3, #0
10014bd8:	dd0b      	ble.n	10014bf2 <__kernel_rem_pio2f+0x5d6>
10014bda:	2401      	movs	r4, #1
10014bdc:	4656      	mov	r6, sl
10014bde:	ad35      	add	r5, sp, #212	; 0xd4
10014be0:	cd02      	ldmia	r5!, {r1}
10014be2:	3401      	adds	r4, #1
10014be4:	f000 fcde 	bl	100155a4 <__aeabi_fadd>
10014be8:	42a6      	cmp	r6, r4
10014bea:	daf9      	bge.n	10014be0 <__kernel_rem_pio2f+0x5c4>
10014bec:	9b03      	ldr	r3, [sp, #12]
10014bee:	2b00      	cmp	r3, #0
10014bf0:	d003      	beq.n	10014bfa <__kernel_rem_pio2f+0x5de>
10014bf2:	2380      	movs	r3, #128	; 0x80
10014bf4:	061b      	lsls	r3, r3, #24
10014bf6:	469c      	mov	ip, r3
10014bf8:	4460      	add	r0, ip
10014bfa:	9b06      	ldr	r3, [sp, #24]
10014bfc:	6058      	str	r0, [r3, #4]
10014bfe:	e7c8      	b.n	10014b92 <__kernel_rem_pio2f+0x576>
10014c00:	9b06      	ldr	r3, [sp, #24]
10014c02:	1c01      	adds	r1, r0, #0
10014c04:	6018      	str	r0, [r3, #0]
10014c06:	9834      	ldr	r0, [sp, #208]	; 0xd0
10014c08:	f001 f920 	bl	10015e4c <__aeabi_fsub>
10014c0c:	4652      	mov	r2, sl
10014c0e:	2a00      	cmp	r2, #0
10014c10:	dce3      	bgt.n	10014bda <__kernel_rem_pio2f+0x5be>
10014c12:	9b06      	ldr	r3, [sp, #24]
10014c14:	6058      	str	r0, [r3, #4]
10014c16:	e7bc      	b.n	10014b92 <__kernel_rem_pio2f+0x576>
10014c18:	9b66      	ldr	r3, [sp, #408]	; 0x198
10014c1a:	2b03      	cmp	r3, #3
10014c1c:	d1b9      	bne.n	10014b92 <__kernel_rem_pio2f+0x576>
10014c1e:	4653      	mov	r3, sl
10014c20:	2b00      	cmp	r3, #0
10014c22:	dd73      	ble.n	10014d0c <__kernel_rem_pio2f+0x6f0>
10014c24:	465b      	mov	r3, fp
10014c26:	9a00      	ldr	r2, [sp, #0]
10014c28:	4c42      	ldr	r4, [pc, #264]	; (10014d34 <__kernel_rem_pio2f+0x718>)
10014c2a:	589e      	ldr	r6, [r3, r2]
10014c2c:	4454      	add	r4, sl
10014c2e:	ab33      	add	r3, sp, #204	; 0xcc
10014c30:	4699      	mov	r9, r3
10014c32:	46a0      	mov	r8, r4
10014c34:	00a5      	lsls	r5, r4, #2
10014c36:	445d      	add	r5, fp
10014c38:	682c      	ldr	r4, [r5, #0]
10014c3a:	1c31      	adds	r1, r6, #0
10014c3c:	1c20      	adds	r0, r4, #0
10014c3e:	f000 fcb1 	bl	100155a4 <__aeabi_fadd>
10014c42:	1c07      	adds	r7, r0, #0
10014c44:	1c01      	adds	r1, r0, #0
10014c46:	1c20      	adds	r0, r4, #0
10014c48:	f001 f900 	bl	10015e4c <__aeabi_fsub>
10014c4c:	1c31      	adds	r1, r6, #0
10014c4e:	f000 fca9 	bl	100155a4 <__aeabi_fadd>
10014c52:	3d04      	subs	r5, #4
10014c54:	60a8      	str	r0, [r5, #8]
10014c56:	606f      	str	r7, [r5, #4]
10014c58:	1c3e      	adds	r6, r7, #0
10014c5a:	45a9      	cmp	r9, r5
10014c5c:	d1ec      	bne.n	10014c38 <__kernel_rem_pio2f+0x61c>
10014c5e:	4653      	mov	r3, sl
10014c60:	4644      	mov	r4, r8
10014c62:	2b01      	cmp	r3, #1
10014c64:	dd52      	ble.n	10014d0c <__kernel_rem_pio2f+0x6f0>
10014c66:	465b      	mov	r3, fp
10014c68:	00a4      	lsls	r4, r4, #2
10014c6a:	46a0      	mov	r8, r4
10014c6c:	9a00      	ldr	r2, [sp, #0]
10014c6e:	191d      	adds	r5, r3, r4
10014c70:	589e      	ldr	r6, [r3, r2]
10014c72:	682c      	ldr	r4, [r5, #0]
10014c74:	1c30      	adds	r0, r6, #0
10014c76:	1c21      	adds	r1, r4, #0
10014c78:	f000 fc94 	bl	100155a4 <__aeabi_fadd>
10014c7c:	1c07      	adds	r7, r0, #0
10014c7e:	1c01      	adds	r1, r0, #0
10014c80:	1c20      	adds	r0, r4, #0
10014c82:	f001 f8e3 	bl	10015e4c <__aeabi_fsub>
10014c86:	1c31      	adds	r1, r6, #0
10014c88:	f000 fc8c 	bl	100155a4 <__aeabi_fadd>
10014c8c:	3d04      	subs	r5, #4
10014c8e:	60a8      	str	r0, [r5, #8]
10014c90:	606f      	str	r7, [r5, #4]
10014c92:	1c3e      	adds	r6, r7, #0
10014c94:	45ab      	cmp	fp, r5
10014c96:	d1ec      	bne.n	10014c72 <__kernel_rem_pio2f+0x656>
10014c98:	4644      	mov	r4, r8
10014c9a:	2000      	movs	r0, #0
10014c9c:	3404      	adds	r4, #4
10014c9e:	445c      	add	r4, fp
10014ca0:	ad35      	add	r5, sp, #212	; 0xd4
10014ca2:	6821      	ldr	r1, [r4, #0]
10014ca4:	3c04      	subs	r4, #4
10014ca6:	f000 fc7d 	bl	100155a4 <__aeabi_fadd>
10014caa:	42a5      	cmp	r5, r4
10014cac:	d1f9      	bne.n	10014ca2 <__kernel_rem_pio2f+0x686>
10014cae:	9b03      	ldr	r3, [sp, #12]
10014cb0:	2b00      	cmp	r3, #0
10014cb2:	d02f      	beq.n	10014d14 <__kernel_rem_pio2f+0x6f8>
10014cb4:	2280      	movs	r2, #128	; 0x80
10014cb6:	0612      	lsls	r2, r2, #24
10014cb8:	4694      	mov	ip, r2
10014cba:	9b34      	ldr	r3, [sp, #208]	; 0xd0
10014cbc:	9a06      	ldr	r2, [sp, #24]
10014cbe:	4463      	add	r3, ip
10014cc0:	6013      	str	r3, [r2, #0]
10014cc2:	465b      	mov	r3, fp
10014cc4:	685b      	ldr	r3, [r3, #4]
10014cc6:	4460      	add	r0, ip
10014cc8:	4463      	add	r3, ip
10014cca:	6053      	str	r3, [r2, #4]
10014ccc:	6090      	str	r0, [r2, #8]
10014cce:	e760      	b.n	10014b92 <__kernel_rem_pio2f+0x576>
10014cd0:	2201      	movs	r2, #1
10014cd2:	e5fe      	b.n	100148d2 <__kernel_rem_pio2f+0x2b6>
10014cd4:	2400      	movs	r4, #0
10014cd6:	e5bb      	b.n	10014850 <__kernel_rem_pio2f+0x234>
10014cd8:	9b66      	ldr	r3, [sp, #408]	; 0x198
10014cda:	2b02      	cmp	r3, #2
10014cdc:	dc10      	bgt.n	10014d00 <__kernel_rem_pio2f+0x6e4>
10014cde:	2b00      	cmp	r3, #0
10014ce0:	dc0c      	bgt.n	10014cfc <__kernel_rem_pio2f+0x6e0>
10014ce2:	2000      	movs	r0, #0
10014ce4:	2b00      	cmp	r3, #0
10014ce6:	d100      	bne.n	10014cea <__kernel_rem_pio2f+0x6ce>
10014ce8:	e74a      	b.n	10014b80 <__kernel_rem_pio2f+0x564>
10014cea:	e752      	b.n	10014b92 <__kernel_rem_pio2f+0x576>
10014cec:	1c28      	adds	r0, r5, #0
10014cee:	f001 fa4b 	bl	10016188 <__aeabi_f2iz>
10014cf2:	4652      	mov	r2, sl
10014cf4:	ab0c      	add	r3, sp, #48	; 0x30
10014cf6:	5098      	str	r0, [r3, r2]
10014cf8:	46da      	mov	sl, fp
10014cfa:	e6d5      	b.n	10014aa8 <__kernel_rem_pio2f+0x48c>
10014cfc:	2000      	movs	r0, #0
10014cfe:	e75d      	b.n	10014bbc <__kernel_rem_pio2f+0x5a0>
10014d00:	ab34      	add	r3, sp, #208	; 0xd0
10014d02:	469b      	mov	fp, r3
10014d04:	9b66      	ldr	r3, [sp, #408]	; 0x198
10014d06:	2b03      	cmp	r3, #3
10014d08:	d000      	beq.n	10014d0c <__kernel_rem_pio2f+0x6f0>
10014d0a:	e742      	b.n	10014b92 <__kernel_rem_pio2f+0x576>
10014d0c:	9b03      	ldr	r3, [sp, #12]
10014d0e:	2000      	movs	r0, #0
10014d10:	2b00      	cmp	r3, #0
10014d12:	d1cf      	bne.n	10014cb4 <__kernel_rem_pio2f+0x698>
10014d14:	9b06      	ldr	r3, [sp, #24]
10014d16:	9a34      	ldr	r2, [sp, #208]	; 0xd0
10014d18:	6098      	str	r0, [r3, #8]
10014d1a:	601a      	str	r2, [r3, #0]
10014d1c:	465a      	mov	r2, fp
10014d1e:	6852      	ldr	r2, [r2, #4]
10014d20:	9200      	str	r2, [sp, #0]
10014d22:	605a      	str	r2, [r3, #4]
10014d24:	e735      	b.n	10014b92 <__kernel_rem_pio2f+0x576>
10014d26:	ab48      	add	r3, sp, #288	; 0x120
10014d28:	9304      	str	r3, [sp, #16]
10014d2a:	465b      	mov	r3, fp
10014d2c:	009b      	lsls	r3, r3, #2
10014d2e:	469b      	mov	fp, r3
10014d30:	e4ec      	b.n	1001470c <__kernel_rem_pio2f+0xf0>
10014d32:	46c0      	nop			; (mov r8, r8)
10014d34:	3fffffff 	.word	0x3fffffff
10014d38:	1001b3a0 	.word	0x1001b3a0
10014d3c:	3fc90000 	.word	0x3fc90000

10014d40 <__kernel_sinf>:
10014d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10014d42:	464f      	mov	r7, r9
10014d44:	4646      	mov	r6, r8
10014d46:	4690      	mov	r8, r2
10014d48:	4a33      	ldr	r2, [pc, #204]	; (10014e18 <__kernel_sinf+0xd8>)
10014d4a:	0043      	lsls	r3, r0, #1
10014d4c:	b4c0      	push	{r6, r7}
10014d4e:	1c04      	adds	r4, r0, #0
10014d50:	1c0f      	adds	r7, r1, #0
10014d52:	085b      	lsrs	r3, r3, #1
10014d54:	4293      	cmp	r3, r2
10014d56:	dc05      	bgt.n	10014d64 <__kernel_sinf+0x24>
10014d58:	f001 fa16 	bl	10016188 <__aeabi_f2iz>
10014d5c:	0003      	movs	r3, r0
10014d5e:	1c20      	adds	r0, r4, #0
10014d60:	2b00      	cmp	r3, #0
10014d62:	d047      	beq.n	10014df4 <__kernel_sinf+0xb4>
10014d64:	1c21      	adds	r1, r4, #0
10014d66:	1c20      	adds	r0, r4, #0
10014d68:	f000 ff5c 	bl	10015c24 <__aeabi_fmul>
10014d6c:	1c05      	adds	r5, r0, #0
10014d6e:	1c01      	adds	r1, r0, #0
10014d70:	1c20      	adds	r0, r4, #0
10014d72:	f000 ff57 	bl	10015c24 <__aeabi_fmul>
10014d76:	4929      	ldr	r1, [pc, #164]	; (10014e1c <__kernel_sinf+0xdc>)
10014d78:	1c06      	adds	r6, r0, #0
10014d7a:	1c28      	adds	r0, r5, #0
10014d7c:	f000 ff52 	bl	10015c24 <__aeabi_fmul>
10014d80:	4927      	ldr	r1, [pc, #156]	; (10014e20 <__kernel_sinf+0xe0>)
10014d82:	f001 f863 	bl	10015e4c <__aeabi_fsub>
10014d86:	1c29      	adds	r1, r5, #0
10014d88:	f000 ff4c 	bl	10015c24 <__aeabi_fmul>
10014d8c:	4925      	ldr	r1, [pc, #148]	; (10014e24 <__kernel_sinf+0xe4>)
10014d8e:	f000 fc09 	bl	100155a4 <__aeabi_fadd>
10014d92:	1c29      	adds	r1, r5, #0
10014d94:	f000 ff46 	bl	10015c24 <__aeabi_fmul>
10014d98:	4923      	ldr	r1, [pc, #140]	; (10014e28 <__kernel_sinf+0xe8>)
10014d9a:	f001 f857 	bl	10015e4c <__aeabi_fsub>
10014d9e:	1c29      	adds	r1, r5, #0
10014da0:	f000 ff40 	bl	10015c24 <__aeabi_fmul>
10014da4:	4921      	ldr	r1, [pc, #132]	; (10014e2c <__kernel_sinf+0xec>)
10014da6:	f000 fbfd 	bl	100155a4 <__aeabi_fadd>
10014daa:	4643      	mov	r3, r8
10014dac:	4681      	mov	r9, r0
10014dae:	2b00      	cmp	r3, #0
10014db0:	d024      	beq.n	10014dfc <__kernel_sinf+0xbc>
10014db2:	21fc      	movs	r1, #252	; 0xfc
10014db4:	1c38      	adds	r0, r7, #0
10014db6:	0589      	lsls	r1, r1, #22
10014db8:	f000 ff34 	bl	10015c24 <__aeabi_fmul>
10014dbc:	4649      	mov	r1, r9
10014dbe:	4680      	mov	r8, r0
10014dc0:	1c30      	adds	r0, r6, #0
10014dc2:	f000 ff2f 	bl	10015c24 <__aeabi_fmul>
10014dc6:	1c01      	adds	r1, r0, #0
10014dc8:	4640      	mov	r0, r8
10014dca:	f001 f83f 	bl	10015e4c <__aeabi_fsub>
10014dce:	1c29      	adds	r1, r5, #0
10014dd0:	f000 ff28 	bl	10015c24 <__aeabi_fmul>
10014dd4:	1c39      	adds	r1, r7, #0
10014dd6:	f001 f839 	bl	10015e4c <__aeabi_fsub>
10014dda:	4915      	ldr	r1, [pc, #84]	; (10014e30 <__kernel_sinf+0xf0>)
10014ddc:	1c05      	adds	r5, r0, #0
10014dde:	1c30      	adds	r0, r6, #0
10014de0:	f000 ff20 	bl	10015c24 <__aeabi_fmul>
10014de4:	1c01      	adds	r1, r0, #0
10014de6:	1c28      	adds	r0, r5, #0
10014de8:	f000 fbdc 	bl	100155a4 <__aeabi_fadd>
10014dec:	1c01      	adds	r1, r0, #0
10014dee:	1c20      	adds	r0, r4, #0
10014df0:	f001 f82c 	bl	10015e4c <__aeabi_fsub>
10014df4:	bc0c      	pop	{r2, r3}
10014df6:	4690      	mov	r8, r2
10014df8:	4699      	mov	r9, r3
10014dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10014dfc:	1c01      	adds	r1, r0, #0
10014dfe:	1c28      	adds	r0, r5, #0
10014e00:	f000 ff10 	bl	10015c24 <__aeabi_fmul>
10014e04:	490a      	ldr	r1, [pc, #40]	; (10014e30 <__kernel_sinf+0xf0>)
10014e06:	f001 f821 	bl	10015e4c <__aeabi_fsub>
10014e0a:	1c31      	adds	r1, r6, #0
10014e0c:	f000 ff0a 	bl	10015c24 <__aeabi_fmul>
10014e10:	1c21      	adds	r1, r4, #0
10014e12:	f000 fbc7 	bl	100155a4 <__aeabi_fadd>
10014e16:	e7ed      	b.n	10014df4 <__kernel_sinf+0xb4>
10014e18:	31ffffff 	.word	0x31ffffff
10014e1c:	2f2ec9d3 	.word	0x2f2ec9d3
10014e20:	32d72f34 	.word	0x32d72f34
10014e24:	3638ef1b 	.word	0x3638ef1b
10014e28:	39500d01 	.word	0x39500d01
10014e2c:	3c088889 	.word	0x3c088889
10014e30:	3e2aaaab 	.word	0x3e2aaaab

10014e34 <floorf>:
10014e34:	b5f0      	push	{r4, r5, r6, r7, lr}
10014e36:	4647      	mov	r7, r8
10014e38:	0043      	lsls	r3, r0, #1
10014e3a:	b480      	push	{r7}
10014e3c:	085f      	lsrs	r7, r3, #1
10014e3e:	0e1b      	lsrs	r3, r3, #24
10014e40:	3b7f      	subs	r3, #127	; 0x7f
10014e42:	1c05      	adds	r5, r0, #0
10014e44:	1e1c      	subs	r4, r3, #0
10014e46:	2c16      	cmp	r4, #22
10014e48:	dc18      	bgt.n	10014e7c <floorf+0x48>
10014e4a:	4680      	mov	r8, r0
10014e4c:	2b00      	cmp	r3, #0
10014e4e:	db1e      	blt.n	10014e8e <floorf+0x5a>
10014e50:	4f1b      	ldr	r7, [pc, #108]	; (10014ec0 <floorf+0x8c>)
10014e52:	1c06      	adds	r6, r0, #0
10014e54:	411f      	asrs	r7, r3
10014e56:	4207      	tst	r7, r0
10014e58:	d00c      	beq.n	10014e74 <floorf+0x40>
10014e5a:	491a      	ldr	r1, [pc, #104]	; (10014ec4 <floorf+0x90>)
10014e5c:	f000 fba2 	bl	100155a4 <__aeabi_fadd>
10014e60:	2100      	movs	r1, #0
10014e62:	f000 fa81 	bl	10015368 <__aeabi_fcmpgt>
10014e66:	2800      	cmp	r0, #0
10014e68:	d004      	beq.n	10014e74 <floorf+0x40>
10014e6a:	2d00      	cmp	r5, #0
10014e6c:	db1d      	blt.n	10014eaa <floorf+0x76>
10014e6e:	4643      	mov	r3, r8
10014e70:	43bb      	bics	r3, r7
10014e72:	001e      	movs	r6, r3
10014e74:	1c30      	adds	r0, r6, #0
10014e76:	bc04      	pop	{r2}
10014e78:	4690      	mov	r8, r2
10014e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014e7c:	4b12      	ldr	r3, [pc, #72]	; (10014ec8 <floorf+0x94>)
10014e7e:	1c06      	adds	r6, r0, #0
10014e80:	429f      	cmp	r7, r3
10014e82:	d9f7      	bls.n	10014e74 <floorf+0x40>
10014e84:	1c01      	adds	r1, r0, #0
10014e86:	f000 fb8d 	bl	100155a4 <__aeabi_fadd>
10014e8a:	1c06      	adds	r6, r0, #0
10014e8c:	e7f2      	b.n	10014e74 <floorf+0x40>
10014e8e:	490d      	ldr	r1, [pc, #52]	; (10014ec4 <floorf+0x90>)
10014e90:	f000 fb88 	bl	100155a4 <__aeabi_fadd>
10014e94:	2100      	movs	r1, #0
10014e96:	f000 fa67 	bl	10015368 <__aeabi_fcmpgt>
10014e9a:	2800      	cmp	r0, #0
10014e9c:	d003      	beq.n	10014ea6 <floorf+0x72>
10014e9e:	2d00      	cmp	r5, #0
10014ea0:	db09      	blt.n	10014eb6 <floorf+0x82>
10014ea2:	2600      	movs	r6, #0
10014ea4:	e7e6      	b.n	10014e74 <floorf+0x40>
10014ea6:	1c2e      	adds	r6, r5, #0
10014ea8:	e7e4      	b.n	10014e74 <floorf+0x40>
10014eaa:	2380      	movs	r3, #128	; 0x80
10014eac:	041b      	lsls	r3, r3, #16
10014eae:	4123      	asrs	r3, r4
10014eb0:	4698      	mov	r8, r3
10014eb2:	44a8      	add	r8, r5
10014eb4:	e7db      	b.n	10014e6e <floorf+0x3a>
10014eb6:	2f00      	cmp	r7, #0
10014eb8:	d0f5      	beq.n	10014ea6 <floorf+0x72>
10014eba:	4e04      	ldr	r6, [pc, #16]	; (10014ecc <floorf+0x98>)
10014ebc:	e7da      	b.n	10014e74 <floorf+0x40>
10014ebe:	46c0      	nop			; (mov r8, r8)
10014ec0:	007fffff 	.word	0x007fffff
10014ec4:	7149f2ca 	.word	0x7149f2ca
10014ec8:	7f7fffff 	.word	0x7f7fffff
10014ecc:	bf800000 	.word	0xbf800000

10014ed0 <scalbnf>:
10014ed0:	0043      	lsls	r3, r0, #1
10014ed2:	b570      	push	{r4, r5, r6, lr}
10014ed4:	000d      	movs	r5, r1
10014ed6:	1c04      	adds	r4, r0, #0
10014ed8:	0859      	lsrs	r1, r3, #1
10014eda:	d010      	beq.n	10014efe <scalbnf+0x2e>
10014edc:	4e26      	ldr	r6, [pc, #152]	; (10014f78 <scalbnf+0xa8>)
10014ede:	42b1      	cmp	r1, r6
10014ee0:	d80e      	bhi.n	10014f00 <scalbnf+0x30>
10014ee2:	4826      	ldr	r0, [pc, #152]	; (10014f7c <scalbnf+0xac>)
10014ee4:	4281      	cmp	r1, r0
10014ee6:	d90f      	bls.n	10014f08 <scalbnf+0x38>
10014ee8:	0020      	movs	r0, r4
10014eea:	0e1b      	lsrs	r3, r3, #24
10014eec:	195b      	adds	r3, r3, r5
10014eee:	2bfe      	cmp	r3, #254	; 0xfe
10014ef0:	dc29      	bgt.n	10014f46 <scalbnf+0x76>
10014ef2:	2b00      	cmp	r3, #0
10014ef4:	dd15      	ble.n	10014f22 <scalbnf+0x52>
10014ef6:	4922      	ldr	r1, [pc, #136]	; (10014f80 <scalbnf+0xb0>)
10014ef8:	05db      	lsls	r3, r3, #23
10014efa:	4008      	ands	r0, r1
10014efc:	4318      	orrs	r0, r3
10014efe:	bd70      	pop	{r4, r5, r6, pc}
10014f00:	1c01      	adds	r1, r0, #0
10014f02:	f000 fb4f 	bl	100155a4 <__aeabi_fadd>
10014f06:	e7fa      	b.n	10014efe <scalbnf+0x2e>
10014f08:	2198      	movs	r1, #152	; 0x98
10014f0a:	1c20      	adds	r0, r4, #0
10014f0c:	05c9      	lsls	r1, r1, #23
10014f0e:	f000 fe89 	bl	10015c24 <__aeabi_fmul>
10014f12:	4b1c      	ldr	r3, [pc, #112]	; (10014f84 <scalbnf+0xb4>)
10014f14:	1c04      	adds	r4, r0, #0
10014f16:	429d      	cmp	r5, r3
10014f18:	db11      	blt.n	10014f3e <scalbnf+0x6e>
10014f1a:	0043      	lsls	r3, r0, #1
10014f1c:	0e1b      	lsrs	r3, r3, #24
10014f1e:	3b19      	subs	r3, #25
10014f20:	e7e4      	b.n	10014eec <scalbnf+0x1c>
10014f22:	001a      	movs	r2, r3
10014f24:	3216      	adds	r2, #22
10014f26:	da16      	bge.n	10014f56 <scalbnf+0x86>
10014f28:	4b17      	ldr	r3, [pc, #92]	; (10014f88 <scalbnf+0xb8>)
10014f2a:	1c21      	adds	r1, r4, #0
10014f2c:	429d      	cmp	r5, r3
10014f2e:	dd1c      	ble.n	10014f6a <scalbnf+0x9a>
10014f30:	4816      	ldr	r0, [pc, #88]	; (10014f8c <scalbnf+0xbc>)
10014f32:	f000 f82f 	bl	10014f94 <copysignf>
10014f36:	4915      	ldr	r1, [pc, #84]	; (10014f8c <scalbnf+0xbc>)
10014f38:	f000 fe74 	bl	10015c24 <__aeabi_fmul>
10014f3c:	e7df      	b.n	10014efe <scalbnf+0x2e>
10014f3e:	4914      	ldr	r1, [pc, #80]	; (10014f90 <scalbnf+0xc0>)
10014f40:	f000 fe70 	bl	10015c24 <__aeabi_fmul>
10014f44:	e7db      	b.n	10014efe <scalbnf+0x2e>
10014f46:	1c21      	adds	r1, r4, #0
10014f48:	4810      	ldr	r0, [pc, #64]	; (10014f8c <scalbnf+0xbc>)
10014f4a:	f000 f823 	bl	10014f94 <copysignf>
10014f4e:	490f      	ldr	r1, [pc, #60]	; (10014f8c <scalbnf+0xbc>)
10014f50:	f000 fe68 	bl	10015c24 <__aeabi_fmul>
10014f54:	e7d3      	b.n	10014efe <scalbnf+0x2e>
10014f56:	21cc      	movs	r1, #204	; 0xcc
10014f58:	3319      	adds	r3, #25
10014f5a:	05da      	lsls	r2, r3, #23
10014f5c:	4b08      	ldr	r3, [pc, #32]	; (10014f80 <scalbnf+0xb0>)
10014f5e:	0589      	lsls	r1, r1, #22
10014f60:	4018      	ands	r0, r3
10014f62:	4310      	orrs	r0, r2
10014f64:	f000 fe5e 	bl	10015c24 <__aeabi_fmul>
10014f68:	e7c9      	b.n	10014efe <scalbnf+0x2e>
10014f6a:	4809      	ldr	r0, [pc, #36]	; (10014f90 <scalbnf+0xc0>)
10014f6c:	f000 f812 	bl	10014f94 <copysignf>
10014f70:	4907      	ldr	r1, [pc, #28]	; (10014f90 <scalbnf+0xc0>)
10014f72:	f000 fe57 	bl	10015c24 <__aeabi_fmul>
10014f76:	e7c2      	b.n	10014efe <scalbnf+0x2e>
10014f78:	7f7fffff 	.word	0x7f7fffff
10014f7c:	007fffff 	.word	0x007fffff
10014f80:	807fffff 	.word	0x807fffff
10014f84:	ffff3cb0 	.word	0xffff3cb0
10014f88:	0000c350 	.word	0x0000c350
10014f8c:	7149f2ca 	.word	0x7149f2ca
10014f90:	0da24260 	.word	0x0da24260

10014f94 <copysignf>:
10014f94:	0040      	lsls	r0, r0, #1
10014f96:	0fc9      	lsrs	r1, r1, #31
10014f98:	07c9      	lsls	r1, r1, #31
10014f9a:	0840      	lsrs	r0, r0, #1
10014f9c:	4308      	orrs	r0, r1
10014f9e:	4770      	bx	lr

10014fa0 <__gnu_thumb1_case_uqi>:
10014fa0:	b402      	push	{r1}
10014fa2:	4671      	mov	r1, lr
10014fa4:	0849      	lsrs	r1, r1, #1
10014fa6:	0049      	lsls	r1, r1, #1
10014fa8:	5c09      	ldrb	r1, [r1, r0]
10014faa:	0049      	lsls	r1, r1, #1
10014fac:	448e      	add	lr, r1
10014fae:	bc02      	pop	{r1}
10014fb0:	4770      	bx	lr
10014fb2:	46c0      	nop			; (mov r8, r8)

10014fb4 <__aeabi_uidiv>:
10014fb4:	2200      	movs	r2, #0
10014fb6:	0843      	lsrs	r3, r0, #1
10014fb8:	428b      	cmp	r3, r1
10014fba:	d374      	bcc.n	100150a6 <__aeabi_uidiv+0xf2>
10014fbc:	0903      	lsrs	r3, r0, #4
10014fbe:	428b      	cmp	r3, r1
10014fc0:	d35f      	bcc.n	10015082 <__aeabi_uidiv+0xce>
10014fc2:	0a03      	lsrs	r3, r0, #8
10014fc4:	428b      	cmp	r3, r1
10014fc6:	d344      	bcc.n	10015052 <__aeabi_uidiv+0x9e>
10014fc8:	0b03      	lsrs	r3, r0, #12
10014fca:	428b      	cmp	r3, r1
10014fcc:	d328      	bcc.n	10015020 <__aeabi_uidiv+0x6c>
10014fce:	0c03      	lsrs	r3, r0, #16
10014fd0:	428b      	cmp	r3, r1
10014fd2:	d30d      	bcc.n	10014ff0 <__aeabi_uidiv+0x3c>
10014fd4:	22ff      	movs	r2, #255	; 0xff
10014fd6:	0209      	lsls	r1, r1, #8
10014fd8:	ba12      	rev	r2, r2
10014fda:	0c03      	lsrs	r3, r0, #16
10014fdc:	428b      	cmp	r3, r1
10014fde:	d302      	bcc.n	10014fe6 <__aeabi_uidiv+0x32>
10014fe0:	1212      	asrs	r2, r2, #8
10014fe2:	0209      	lsls	r1, r1, #8
10014fe4:	d065      	beq.n	100150b2 <__aeabi_uidiv+0xfe>
10014fe6:	0b03      	lsrs	r3, r0, #12
10014fe8:	428b      	cmp	r3, r1
10014fea:	d319      	bcc.n	10015020 <__aeabi_uidiv+0x6c>
10014fec:	e000      	b.n	10014ff0 <__aeabi_uidiv+0x3c>
10014fee:	0a09      	lsrs	r1, r1, #8
10014ff0:	0bc3      	lsrs	r3, r0, #15
10014ff2:	428b      	cmp	r3, r1
10014ff4:	d301      	bcc.n	10014ffa <__aeabi_uidiv+0x46>
10014ff6:	03cb      	lsls	r3, r1, #15
10014ff8:	1ac0      	subs	r0, r0, r3
10014ffa:	4152      	adcs	r2, r2
10014ffc:	0b83      	lsrs	r3, r0, #14
10014ffe:	428b      	cmp	r3, r1
10015000:	d301      	bcc.n	10015006 <__aeabi_uidiv+0x52>
10015002:	038b      	lsls	r3, r1, #14
10015004:	1ac0      	subs	r0, r0, r3
10015006:	4152      	adcs	r2, r2
10015008:	0b43      	lsrs	r3, r0, #13
1001500a:	428b      	cmp	r3, r1
1001500c:	d301      	bcc.n	10015012 <__aeabi_uidiv+0x5e>
1001500e:	034b      	lsls	r3, r1, #13
10015010:	1ac0      	subs	r0, r0, r3
10015012:	4152      	adcs	r2, r2
10015014:	0b03      	lsrs	r3, r0, #12
10015016:	428b      	cmp	r3, r1
10015018:	d301      	bcc.n	1001501e <__aeabi_uidiv+0x6a>
1001501a:	030b      	lsls	r3, r1, #12
1001501c:	1ac0      	subs	r0, r0, r3
1001501e:	4152      	adcs	r2, r2
10015020:	0ac3      	lsrs	r3, r0, #11
10015022:	428b      	cmp	r3, r1
10015024:	d301      	bcc.n	1001502a <__aeabi_uidiv+0x76>
10015026:	02cb      	lsls	r3, r1, #11
10015028:	1ac0      	subs	r0, r0, r3
1001502a:	4152      	adcs	r2, r2
1001502c:	0a83      	lsrs	r3, r0, #10
1001502e:	428b      	cmp	r3, r1
10015030:	d301      	bcc.n	10015036 <__aeabi_uidiv+0x82>
10015032:	028b      	lsls	r3, r1, #10
10015034:	1ac0      	subs	r0, r0, r3
10015036:	4152      	adcs	r2, r2
10015038:	0a43      	lsrs	r3, r0, #9
1001503a:	428b      	cmp	r3, r1
1001503c:	d301      	bcc.n	10015042 <__aeabi_uidiv+0x8e>
1001503e:	024b      	lsls	r3, r1, #9
10015040:	1ac0      	subs	r0, r0, r3
10015042:	4152      	adcs	r2, r2
10015044:	0a03      	lsrs	r3, r0, #8
10015046:	428b      	cmp	r3, r1
10015048:	d301      	bcc.n	1001504e <__aeabi_uidiv+0x9a>
1001504a:	020b      	lsls	r3, r1, #8
1001504c:	1ac0      	subs	r0, r0, r3
1001504e:	4152      	adcs	r2, r2
10015050:	d2cd      	bcs.n	10014fee <__aeabi_uidiv+0x3a>
10015052:	09c3      	lsrs	r3, r0, #7
10015054:	428b      	cmp	r3, r1
10015056:	d301      	bcc.n	1001505c <__aeabi_uidiv+0xa8>
10015058:	01cb      	lsls	r3, r1, #7
1001505a:	1ac0      	subs	r0, r0, r3
1001505c:	4152      	adcs	r2, r2
1001505e:	0983      	lsrs	r3, r0, #6
10015060:	428b      	cmp	r3, r1
10015062:	d301      	bcc.n	10015068 <__aeabi_uidiv+0xb4>
10015064:	018b      	lsls	r3, r1, #6
10015066:	1ac0      	subs	r0, r0, r3
10015068:	4152      	adcs	r2, r2
1001506a:	0943      	lsrs	r3, r0, #5
1001506c:	428b      	cmp	r3, r1
1001506e:	d301      	bcc.n	10015074 <__aeabi_uidiv+0xc0>
10015070:	014b      	lsls	r3, r1, #5
10015072:	1ac0      	subs	r0, r0, r3
10015074:	4152      	adcs	r2, r2
10015076:	0903      	lsrs	r3, r0, #4
10015078:	428b      	cmp	r3, r1
1001507a:	d301      	bcc.n	10015080 <__aeabi_uidiv+0xcc>
1001507c:	010b      	lsls	r3, r1, #4
1001507e:	1ac0      	subs	r0, r0, r3
10015080:	4152      	adcs	r2, r2
10015082:	08c3      	lsrs	r3, r0, #3
10015084:	428b      	cmp	r3, r1
10015086:	d301      	bcc.n	1001508c <__aeabi_uidiv+0xd8>
10015088:	00cb      	lsls	r3, r1, #3
1001508a:	1ac0      	subs	r0, r0, r3
1001508c:	4152      	adcs	r2, r2
1001508e:	0883      	lsrs	r3, r0, #2
10015090:	428b      	cmp	r3, r1
10015092:	d301      	bcc.n	10015098 <__aeabi_uidiv+0xe4>
10015094:	008b      	lsls	r3, r1, #2
10015096:	1ac0      	subs	r0, r0, r3
10015098:	4152      	adcs	r2, r2
1001509a:	0843      	lsrs	r3, r0, #1
1001509c:	428b      	cmp	r3, r1
1001509e:	d301      	bcc.n	100150a4 <__aeabi_uidiv+0xf0>
100150a0:	004b      	lsls	r3, r1, #1
100150a2:	1ac0      	subs	r0, r0, r3
100150a4:	4152      	adcs	r2, r2
100150a6:	1a41      	subs	r1, r0, r1
100150a8:	d200      	bcs.n	100150ac <__aeabi_uidiv+0xf8>
100150aa:	4601      	mov	r1, r0
100150ac:	4152      	adcs	r2, r2
100150ae:	4610      	mov	r0, r2
100150b0:	4770      	bx	lr
100150b2:	e7ff      	b.n	100150b4 <__aeabi_uidiv+0x100>
100150b4:	b501      	push	{r0, lr}
100150b6:	2000      	movs	r0, #0
100150b8:	f000 f8f0 	bl	1001529c <__aeabi_idiv0>
100150bc:	bd02      	pop	{r1, pc}
100150be:	46c0      	nop			; (mov r8, r8)

100150c0 <__aeabi_uidivmod>:
100150c0:	2900      	cmp	r1, #0
100150c2:	d0f7      	beq.n	100150b4 <__aeabi_uidiv+0x100>
100150c4:	e776      	b.n	10014fb4 <__aeabi_uidiv>
100150c6:	4770      	bx	lr

100150c8 <__aeabi_idiv>:
100150c8:	4603      	mov	r3, r0
100150ca:	430b      	orrs	r3, r1
100150cc:	d47f      	bmi.n	100151ce <__aeabi_idiv+0x106>
100150ce:	2200      	movs	r2, #0
100150d0:	0843      	lsrs	r3, r0, #1
100150d2:	428b      	cmp	r3, r1
100150d4:	d374      	bcc.n	100151c0 <__aeabi_idiv+0xf8>
100150d6:	0903      	lsrs	r3, r0, #4
100150d8:	428b      	cmp	r3, r1
100150da:	d35f      	bcc.n	1001519c <__aeabi_idiv+0xd4>
100150dc:	0a03      	lsrs	r3, r0, #8
100150de:	428b      	cmp	r3, r1
100150e0:	d344      	bcc.n	1001516c <__aeabi_idiv+0xa4>
100150e2:	0b03      	lsrs	r3, r0, #12
100150e4:	428b      	cmp	r3, r1
100150e6:	d328      	bcc.n	1001513a <__aeabi_idiv+0x72>
100150e8:	0c03      	lsrs	r3, r0, #16
100150ea:	428b      	cmp	r3, r1
100150ec:	d30d      	bcc.n	1001510a <__aeabi_idiv+0x42>
100150ee:	22ff      	movs	r2, #255	; 0xff
100150f0:	0209      	lsls	r1, r1, #8
100150f2:	ba12      	rev	r2, r2
100150f4:	0c03      	lsrs	r3, r0, #16
100150f6:	428b      	cmp	r3, r1
100150f8:	d302      	bcc.n	10015100 <__aeabi_idiv+0x38>
100150fa:	1212      	asrs	r2, r2, #8
100150fc:	0209      	lsls	r1, r1, #8
100150fe:	d065      	beq.n	100151cc <__aeabi_idiv+0x104>
10015100:	0b03      	lsrs	r3, r0, #12
10015102:	428b      	cmp	r3, r1
10015104:	d319      	bcc.n	1001513a <__aeabi_idiv+0x72>
10015106:	e000      	b.n	1001510a <__aeabi_idiv+0x42>
10015108:	0a09      	lsrs	r1, r1, #8
1001510a:	0bc3      	lsrs	r3, r0, #15
1001510c:	428b      	cmp	r3, r1
1001510e:	d301      	bcc.n	10015114 <__aeabi_idiv+0x4c>
10015110:	03cb      	lsls	r3, r1, #15
10015112:	1ac0      	subs	r0, r0, r3
10015114:	4152      	adcs	r2, r2
10015116:	0b83      	lsrs	r3, r0, #14
10015118:	428b      	cmp	r3, r1
1001511a:	d301      	bcc.n	10015120 <__aeabi_idiv+0x58>
1001511c:	038b      	lsls	r3, r1, #14
1001511e:	1ac0      	subs	r0, r0, r3
10015120:	4152      	adcs	r2, r2
10015122:	0b43      	lsrs	r3, r0, #13
10015124:	428b      	cmp	r3, r1
10015126:	d301      	bcc.n	1001512c <__aeabi_idiv+0x64>
10015128:	034b      	lsls	r3, r1, #13
1001512a:	1ac0      	subs	r0, r0, r3
1001512c:	4152      	adcs	r2, r2
1001512e:	0b03      	lsrs	r3, r0, #12
10015130:	428b      	cmp	r3, r1
10015132:	d301      	bcc.n	10015138 <__aeabi_idiv+0x70>
10015134:	030b      	lsls	r3, r1, #12
10015136:	1ac0      	subs	r0, r0, r3
10015138:	4152      	adcs	r2, r2
1001513a:	0ac3      	lsrs	r3, r0, #11
1001513c:	428b      	cmp	r3, r1
1001513e:	d301      	bcc.n	10015144 <__aeabi_idiv+0x7c>
10015140:	02cb      	lsls	r3, r1, #11
10015142:	1ac0      	subs	r0, r0, r3
10015144:	4152      	adcs	r2, r2
10015146:	0a83      	lsrs	r3, r0, #10
10015148:	428b      	cmp	r3, r1
1001514a:	d301      	bcc.n	10015150 <__aeabi_idiv+0x88>
1001514c:	028b      	lsls	r3, r1, #10
1001514e:	1ac0      	subs	r0, r0, r3
10015150:	4152      	adcs	r2, r2
10015152:	0a43      	lsrs	r3, r0, #9
10015154:	428b      	cmp	r3, r1
10015156:	d301      	bcc.n	1001515c <__aeabi_idiv+0x94>
10015158:	024b      	lsls	r3, r1, #9
1001515a:	1ac0      	subs	r0, r0, r3
1001515c:	4152      	adcs	r2, r2
1001515e:	0a03      	lsrs	r3, r0, #8
10015160:	428b      	cmp	r3, r1
10015162:	d301      	bcc.n	10015168 <__aeabi_idiv+0xa0>
10015164:	020b      	lsls	r3, r1, #8
10015166:	1ac0      	subs	r0, r0, r3
10015168:	4152      	adcs	r2, r2
1001516a:	d2cd      	bcs.n	10015108 <__aeabi_idiv+0x40>
1001516c:	09c3      	lsrs	r3, r0, #7
1001516e:	428b      	cmp	r3, r1
10015170:	d301      	bcc.n	10015176 <__aeabi_idiv+0xae>
10015172:	01cb      	lsls	r3, r1, #7
10015174:	1ac0      	subs	r0, r0, r3
10015176:	4152      	adcs	r2, r2
10015178:	0983      	lsrs	r3, r0, #6
1001517a:	428b      	cmp	r3, r1
1001517c:	d301      	bcc.n	10015182 <__aeabi_idiv+0xba>
1001517e:	018b      	lsls	r3, r1, #6
10015180:	1ac0      	subs	r0, r0, r3
10015182:	4152      	adcs	r2, r2
10015184:	0943      	lsrs	r3, r0, #5
10015186:	428b      	cmp	r3, r1
10015188:	d301      	bcc.n	1001518e <__aeabi_idiv+0xc6>
1001518a:	014b      	lsls	r3, r1, #5
1001518c:	1ac0      	subs	r0, r0, r3
1001518e:	4152      	adcs	r2, r2
10015190:	0903      	lsrs	r3, r0, #4
10015192:	428b      	cmp	r3, r1
10015194:	d301      	bcc.n	1001519a <__aeabi_idiv+0xd2>
10015196:	010b      	lsls	r3, r1, #4
10015198:	1ac0      	subs	r0, r0, r3
1001519a:	4152      	adcs	r2, r2
1001519c:	08c3      	lsrs	r3, r0, #3
1001519e:	428b      	cmp	r3, r1
100151a0:	d301      	bcc.n	100151a6 <__aeabi_idiv+0xde>
100151a2:	00cb      	lsls	r3, r1, #3
100151a4:	1ac0      	subs	r0, r0, r3
100151a6:	4152      	adcs	r2, r2
100151a8:	0883      	lsrs	r3, r0, #2
100151aa:	428b      	cmp	r3, r1
100151ac:	d301      	bcc.n	100151b2 <__aeabi_idiv+0xea>
100151ae:	008b      	lsls	r3, r1, #2
100151b0:	1ac0      	subs	r0, r0, r3
100151b2:	4152      	adcs	r2, r2
100151b4:	0843      	lsrs	r3, r0, #1
100151b6:	428b      	cmp	r3, r1
100151b8:	d301      	bcc.n	100151be <__aeabi_idiv+0xf6>
100151ba:	004b      	lsls	r3, r1, #1
100151bc:	1ac0      	subs	r0, r0, r3
100151be:	4152      	adcs	r2, r2
100151c0:	1a41      	subs	r1, r0, r1
100151c2:	d200      	bcs.n	100151c6 <__aeabi_idiv+0xfe>
100151c4:	4601      	mov	r1, r0
100151c6:	4152      	adcs	r2, r2
100151c8:	4610      	mov	r0, r2
100151ca:	4770      	bx	lr
100151cc:	e05d      	b.n	1001528a <__aeabi_idiv+0x1c2>
100151ce:	0fca      	lsrs	r2, r1, #31
100151d0:	d000      	beq.n	100151d4 <__aeabi_idiv+0x10c>
100151d2:	4249      	negs	r1, r1
100151d4:	1003      	asrs	r3, r0, #32
100151d6:	d300      	bcc.n	100151da <__aeabi_idiv+0x112>
100151d8:	4240      	negs	r0, r0
100151da:	4053      	eors	r3, r2
100151dc:	2200      	movs	r2, #0
100151de:	469c      	mov	ip, r3
100151e0:	0903      	lsrs	r3, r0, #4
100151e2:	428b      	cmp	r3, r1
100151e4:	d32d      	bcc.n	10015242 <__aeabi_idiv+0x17a>
100151e6:	0a03      	lsrs	r3, r0, #8
100151e8:	428b      	cmp	r3, r1
100151ea:	d312      	bcc.n	10015212 <__aeabi_idiv+0x14a>
100151ec:	22fc      	movs	r2, #252	; 0xfc
100151ee:	0189      	lsls	r1, r1, #6
100151f0:	ba12      	rev	r2, r2
100151f2:	0a03      	lsrs	r3, r0, #8
100151f4:	428b      	cmp	r3, r1
100151f6:	d30c      	bcc.n	10015212 <__aeabi_idiv+0x14a>
100151f8:	0189      	lsls	r1, r1, #6
100151fa:	1192      	asrs	r2, r2, #6
100151fc:	428b      	cmp	r3, r1
100151fe:	d308      	bcc.n	10015212 <__aeabi_idiv+0x14a>
10015200:	0189      	lsls	r1, r1, #6
10015202:	1192      	asrs	r2, r2, #6
10015204:	428b      	cmp	r3, r1
10015206:	d304      	bcc.n	10015212 <__aeabi_idiv+0x14a>
10015208:	0189      	lsls	r1, r1, #6
1001520a:	d03a      	beq.n	10015282 <__aeabi_idiv+0x1ba>
1001520c:	1192      	asrs	r2, r2, #6
1001520e:	e000      	b.n	10015212 <__aeabi_idiv+0x14a>
10015210:	0989      	lsrs	r1, r1, #6
10015212:	09c3      	lsrs	r3, r0, #7
10015214:	428b      	cmp	r3, r1
10015216:	d301      	bcc.n	1001521c <__aeabi_idiv+0x154>
10015218:	01cb      	lsls	r3, r1, #7
1001521a:	1ac0      	subs	r0, r0, r3
1001521c:	4152      	adcs	r2, r2
1001521e:	0983      	lsrs	r3, r0, #6
10015220:	428b      	cmp	r3, r1
10015222:	d301      	bcc.n	10015228 <__aeabi_idiv+0x160>
10015224:	018b      	lsls	r3, r1, #6
10015226:	1ac0      	subs	r0, r0, r3
10015228:	4152      	adcs	r2, r2
1001522a:	0943      	lsrs	r3, r0, #5
1001522c:	428b      	cmp	r3, r1
1001522e:	d301      	bcc.n	10015234 <__aeabi_idiv+0x16c>
10015230:	014b      	lsls	r3, r1, #5
10015232:	1ac0      	subs	r0, r0, r3
10015234:	4152      	adcs	r2, r2
10015236:	0903      	lsrs	r3, r0, #4
10015238:	428b      	cmp	r3, r1
1001523a:	d301      	bcc.n	10015240 <__aeabi_idiv+0x178>
1001523c:	010b      	lsls	r3, r1, #4
1001523e:	1ac0      	subs	r0, r0, r3
10015240:	4152      	adcs	r2, r2
10015242:	08c3      	lsrs	r3, r0, #3
10015244:	428b      	cmp	r3, r1
10015246:	d301      	bcc.n	1001524c <__aeabi_idiv+0x184>
10015248:	00cb      	lsls	r3, r1, #3
1001524a:	1ac0      	subs	r0, r0, r3
1001524c:	4152      	adcs	r2, r2
1001524e:	0883      	lsrs	r3, r0, #2
10015250:	428b      	cmp	r3, r1
10015252:	d301      	bcc.n	10015258 <__aeabi_idiv+0x190>
10015254:	008b      	lsls	r3, r1, #2
10015256:	1ac0      	subs	r0, r0, r3
10015258:	4152      	adcs	r2, r2
1001525a:	d2d9      	bcs.n	10015210 <__aeabi_idiv+0x148>
1001525c:	0843      	lsrs	r3, r0, #1
1001525e:	428b      	cmp	r3, r1
10015260:	d301      	bcc.n	10015266 <__aeabi_idiv+0x19e>
10015262:	004b      	lsls	r3, r1, #1
10015264:	1ac0      	subs	r0, r0, r3
10015266:	4152      	adcs	r2, r2
10015268:	1a41      	subs	r1, r0, r1
1001526a:	d200      	bcs.n	1001526e <__aeabi_idiv+0x1a6>
1001526c:	4601      	mov	r1, r0
1001526e:	4663      	mov	r3, ip
10015270:	4152      	adcs	r2, r2
10015272:	105b      	asrs	r3, r3, #1
10015274:	4610      	mov	r0, r2
10015276:	d301      	bcc.n	1001527c <__aeabi_idiv+0x1b4>
10015278:	4240      	negs	r0, r0
1001527a:	2b00      	cmp	r3, #0
1001527c:	d500      	bpl.n	10015280 <__aeabi_idiv+0x1b8>
1001527e:	4249      	negs	r1, r1
10015280:	4770      	bx	lr
10015282:	4663      	mov	r3, ip
10015284:	105b      	asrs	r3, r3, #1
10015286:	d300      	bcc.n	1001528a <__aeabi_idiv+0x1c2>
10015288:	4240      	negs	r0, r0
1001528a:	b501      	push	{r0, lr}
1001528c:	2000      	movs	r0, #0
1001528e:	f000 f805 	bl	1001529c <__aeabi_idiv0>
10015292:	bd02      	pop	{r1, pc}

10015294 <__aeabi_idivmod>:
10015294:	2900      	cmp	r1, #0
10015296:	d0f8      	beq.n	1001528a <__aeabi_idiv+0x1c2>
10015298:	e716      	b.n	100150c8 <__aeabi_idiv>
1001529a:	4770      	bx	lr

1001529c <__aeabi_idiv0>:
1001529c:	4770      	bx	lr
1001529e:	46c0      	nop			; (mov r8, r8)

100152a0 <__aeabi_cdrcmple>:
100152a0:	4684      	mov	ip, r0
100152a2:	1c10      	adds	r0, r2, #0
100152a4:	4662      	mov	r2, ip
100152a6:	468c      	mov	ip, r1
100152a8:	1c19      	adds	r1, r3, #0
100152aa:	4663      	mov	r3, ip
100152ac:	e000      	b.n	100152b0 <__aeabi_cdcmpeq>
100152ae:	46c0      	nop			; (mov r8, r8)

100152b0 <__aeabi_cdcmpeq>:
100152b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100152b2:	f001 fef7 	bl	100170a4 <__ledf2>
100152b6:	2800      	cmp	r0, #0
100152b8:	d401      	bmi.n	100152be <__aeabi_cdcmpeq+0xe>
100152ba:	2100      	movs	r1, #0
100152bc:	42c8      	cmn	r0, r1
100152be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

100152c0 <__aeabi_dcmpeq>:
100152c0:	b510      	push	{r4, lr}
100152c2:	f001 fe4b 	bl	10016f5c <__eqdf2>
100152c6:	4240      	negs	r0, r0
100152c8:	3001      	adds	r0, #1
100152ca:	bd10      	pop	{r4, pc}

100152cc <__aeabi_dcmplt>:
100152cc:	b510      	push	{r4, lr}
100152ce:	f001 fee9 	bl	100170a4 <__ledf2>
100152d2:	2800      	cmp	r0, #0
100152d4:	db01      	blt.n	100152da <__aeabi_dcmplt+0xe>
100152d6:	2000      	movs	r0, #0
100152d8:	bd10      	pop	{r4, pc}
100152da:	2001      	movs	r0, #1
100152dc:	bd10      	pop	{r4, pc}
100152de:	46c0      	nop			; (mov r8, r8)

100152e0 <__aeabi_dcmple>:
100152e0:	b510      	push	{r4, lr}
100152e2:	f001 fedf 	bl	100170a4 <__ledf2>
100152e6:	2800      	cmp	r0, #0
100152e8:	dd01      	ble.n	100152ee <__aeabi_dcmple+0xe>
100152ea:	2000      	movs	r0, #0
100152ec:	bd10      	pop	{r4, pc}
100152ee:	2001      	movs	r0, #1
100152f0:	bd10      	pop	{r4, pc}
100152f2:	46c0      	nop			; (mov r8, r8)

100152f4 <__aeabi_dcmpgt>:
100152f4:	b510      	push	{r4, lr}
100152f6:	f001 fe71 	bl	10016fdc <__gedf2>
100152fa:	2800      	cmp	r0, #0
100152fc:	dc01      	bgt.n	10015302 <__aeabi_dcmpgt+0xe>
100152fe:	2000      	movs	r0, #0
10015300:	bd10      	pop	{r4, pc}
10015302:	2001      	movs	r0, #1
10015304:	bd10      	pop	{r4, pc}
10015306:	46c0      	nop			; (mov r8, r8)

10015308 <__aeabi_dcmpge>:
10015308:	b510      	push	{r4, lr}
1001530a:	f001 fe67 	bl	10016fdc <__gedf2>
1001530e:	2800      	cmp	r0, #0
10015310:	da01      	bge.n	10015316 <__aeabi_dcmpge+0xe>
10015312:	2000      	movs	r0, #0
10015314:	bd10      	pop	{r4, pc}
10015316:	2001      	movs	r0, #1
10015318:	bd10      	pop	{r4, pc}
1001531a:	46c0      	nop			; (mov r8, r8)

1001531c <__aeabi_cfrcmple>:
1001531c:	4684      	mov	ip, r0
1001531e:	1c08      	adds	r0, r1, #0
10015320:	4661      	mov	r1, ip
10015322:	e7ff      	b.n	10015324 <__aeabi_cfcmpeq>

10015324 <__aeabi_cfcmpeq>:
10015324:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10015326:	f000 fc39 	bl	10015b9c <__lesf2>
1001532a:	2800      	cmp	r0, #0
1001532c:	d401      	bmi.n	10015332 <__aeabi_cfcmpeq+0xe>
1001532e:	2100      	movs	r1, #0
10015330:	42c8      	cmn	r0, r1
10015332:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10015334 <__aeabi_fcmpeq>:
10015334:	b510      	push	{r4, lr}
10015336:	f000 fbc5 	bl	10015ac4 <__eqsf2>
1001533a:	4240      	negs	r0, r0
1001533c:	3001      	adds	r0, #1
1001533e:	bd10      	pop	{r4, pc}

10015340 <__aeabi_fcmplt>:
10015340:	b510      	push	{r4, lr}
10015342:	f000 fc2b 	bl	10015b9c <__lesf2>
10015346:	2800      	cmp	r0, #0
10015348:	db01      	blt.n	1001534e <__aeabi_fcmplt+0xe>
1001534a:	2000      	movs	r0, #0
1001534c:	bd10      	pop	{r4, pc}
1001534e:	2001      	movs	r0, #1
10015350:	bd10      	pop	{r4, pc}
10015352:	46c0      	nop			; (mov r8, r8)

10015354 <__aeabi_fcmple>:
10015354:	b510      	push	{r4, lr}
10015356:	f000 fc21 	bl	10015b9c <__lesf2>
1001535a:	2800      	cmp	r0, #0
1001535c:	dd01      	ble.n	10015362 <__aeabi_fcmple+0xe>
1001535e:	2000      	movs	r0, #0
10015360:	bd10      	pop	{r4, pc}
10015362:	2001      	movs	r0, #1
10015364:	bd10      	pop	{r4, pc}
10015366:	46c0      	nop			; (mov r8, r8)

10015368 <__aeabi_fcmpgt>:
10015368:	b510      	push	{r4, lr}
1001536a:	f000 fbd3 	bl	10015b14 <__gesf2>
1001536e:	2800      	cmp	r0, #0
10015370:	dc01      	bgt.n	10015376 <__aeabi_fcmpgt+0xe>
10015372:	2000      	movs	r0, #0
10015374:	bd10      	pop	{r4, pc}
10015376:	2001      	movs	r0, #1
10015378:	bd10      	pop	{r4, pc}
1001537a:	46c0      	nop			; (mov r8, r8)

1001537c <__aeabi_fcmpge>:
1001537c:	b510      	push	{r4, lr}
1001537e:	f000 fbc9 	bl	10015b14 <__gesf2>
10015382:	2800      	cmp	r0, #0
10015384:	da01      	bge.n	1001538a <__aeabi_fcmpge+0xe>
10015386:	2000      	movs	r0, #0
10015388:	bd10      	pop	{r4, pc}
1001538a:	2001      	movs	r0, #1
1001538c:	bd10      	pop	{r4, pc}
1001538e:	46c0      	nop			; (mov r8, r8)

10015390 <__aeabi_ldivmod>:
10015390:	2b00      	cmp	r3, #0
10015392:	d115      	bne.n	100153c0 <__aeabi_ldivmod+0x30>
10015394:	2a00      	cmp	r2, #0
10015396:	d113      	bne.n	100153c0 <__aeabi_ldivmod+0x30>
10015398:	2900      	cmp	r1, #0
1001539a:	db06      	blt.n	100153aa <__aeabi_ldivmod+0x1a>
1001539c:	dc01      	bgt.n	100153a2 <__aeabi_ldivmod+0x12>
1001539e:	2800      	cmp	r0, #0
100153a0:	d006      	beq.n	100153b0 <__aeabi_ldivmod+0x20>
100153a2:	2000      	movs	r0, #0
100153a4:	43c0      	mvns	r0, r0
100153a6:	0841      	lsrs	r1, r0, #1
100153a8:	e002      	b.n	100153b0 <__aeabi_ldivmod+0x20>
100153aa:	2180      	movs	r1, #128	; 0x80
100153ac:	0609      	lsls	r1, r1, #24
100153ae:	2000      	movs	r0, #0
100153b0:	b407      	push	{r0, r1, r2}
100153b2:	4802      	ldr	r0, [pc, #8]	; (100153bc <__aeabi_ldivmod+0x2c>)
100153b4:	a101      	add	r1, pc, #4	; (adr r1, 100153bc <__aeabi_ldivmod+0x2c>)
100153b6:	1840      	adds	r0, r0, r1
100153b8:	9002      	str	r0, [sp, #8]
100153ba:	bd03      	pop	{r0, r1, pc}
100153bc:	fffffee1 	.word	0xfffffee1
100153c0:	b403      	push	{r0, r1}
100153c2:	4668      	mov	r0, sp
100153c4:	b501      	push	{r0, lr}
100153c6:	9802      	ldr	r0, [sp, #8]
100153c8:	f000 f8d0 	bl	1001556c <__gnu_ldivmod_helper>
100153cc:	9b01      	ldr	r3, [sp, #4]
100153ce:	469e      	mov	lr, r3
100153d0:	b002      	add	sp, #8
100153d2:	bc0c      	pop	{r2, r3}
100153d4:	4770      	bx	lr
100153d6:	46c0      	nop			; (mov r8, r8)

100153d8 <__aeabi_lmul>:
100153d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100153da:	464f      	mov	r7, r9
100153dc:	4646      	mov	r6, r8
100153de:	b4c0      	push	{r6, r7}
100153e0:	0416      	lsls	r6, r2, #16
100153e2:	0c36      	lsrs	r6, r6, #16
100153e4:	4699      	mov	r9, r3
100153e6:	0033      	movs	r3, r6
100153e8:	0405      	lsls	r5, r0, #16
100153ea:	0c2c      	lsrs	r4, r5, #16
100153ec:	0c07      	lsrs	r7, r0, #16
100153ee:	0c15      	lsrs	r5, r2, #16
100153f0:	4363      	muls	r3, r4
100153f2:	437e      	muls	r6, r7
100153f4:	436f      	muls	r7, r5
100153f6:	4365      	muls	r5, r4
100153f8:	0c1c      	lsrs	r4, r3, #16
100153fa:	19ad      	adds	r5, r5, r6
100153fc:	1964      	adds	r4, r4, r5
100153fe:	469c      	mov	ip, r3
10015400:	42a6      	cmp	r6, r4
10015402:	d903      	bls.n	1001540c <__aeabi_lmul+0x34>
10015404:	2380      	movs	r3, #128	; 0x80
10015406:	025b      	lsls	r3, r3, #9
10015408:	4698      	mov	r8, r3
1001540a:	4447      	add	r7, r8
1001540c:	4663      	mov	r3, ip
1001540e:	0c25      	lsrs	r5, r4, #16
10015410:	19ef      	adds	r7, r5, r7
10015412:	041d      	lsls	r5, r3, #16
10015414:	464b      	mov	r3, r9
10015416:	434a      	muls	r2, r1
10015418:	4343      	muls	r3, r0
1001541a:	0c2d      	lsrs	r5, r5, #16
1001541c:	0424      	lsls	r4, r4, #16
1001541e:	1964      	adds	r4, r4, r5
10015420:	1899      	adds	r1, r3, r2
10015422:	19c9      	adds	r1, r1, r7
10015424:	0020      	movs	r0, r4
10015426:	bc0c      	pop	{r2, r3}
10015428:	4690      	mov	r8, r2
1001542a:	4699      	mov	r9, r3
1001542c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001542e:	46c0      	nop			; (mov r8, r8)

10015430 <__aeabi_f2uiz>:
10015430:	219e      	movs	r1, #158	; 0x9e
10015432:	b510      	push	{r4, lr}
10015434:	05c9      	lsls	r1, r1, #23
10015436:	1c04      	adds	r4, r0, #0
10015438:	f7ff ffa0 	bl	1001537c <__aeabi_fcmpge>
1001543c:	2800      	cmp	r0, #0
1001543e:	d103      	bne.n	10015448 <__aeabi_f2uiz+0x18>
10015440:	1c20      	adds	r0, r4, #0
10015442:	f000 fea1 	bl	10016188 <__aeabi_f2iz>
10015446:	bd10      	pop	{r4, pc}
10015448:	219e      	movs	r1, #158	; 0x9e
1001544a:	1c20      	adds	r0, r4, #0
1001544c:	05c9      	lsls	r1, r1, #23
1001544e:	f000 fcfd 	bl	10015e4c <__aeabi_fsub>
10015452:	f000 fe99 	bl	10016188 <__aeabi_f2iz>
10015456:	2380      	movs	r3, #128	; 0x80
10015458:	061b      	lsls	r3, r3, #24
1001545a:	469c      	mov	ip, r3
1001545c:	4460      	add	r0, ip
1001545e:	e7f2      	b.n	10015446 <__aeabi_f2uiz+0x16>

10015460 <__aeabi_d2uiz>:
10015460:	b570      	push	{r4, r5, r6, lr}
10015462:	2200      	movs	r2, #0
10015464:	4b0c      	ldr	r3, [pc, #48]	; (10015498 <__aeabi_d2uiz+0x38>)
10015466:	0004      	movs	r4, r0
10015468:	000d      	movs	r5, r1
1001546a:	f7ff ff4d 	bl	10015308 <__aeabi_dcmpge>
1001546e:	2800      	cmp	r0, #0
10015470:	d104      	bne.n	1001547c <__aeabi_d2uiz+0x1c>
10015472:	0020      	movs	r0, r4
10015474:	0029      	movs	r1, r5
10015476:	f002 fc4d 	bl	10017d14 <__aeabi_d2iz>
1001547a:	bd70      	pop	{r4, r5, r6, pc}
1001547c:	4b06      	ldr	r3, [pc, #24]	; (10015498 <__aeabi_d2uiz+0x38>)
1001547e:	2200      	movs	r2, #0
10015480:	0020      	movs	r0, r4
10015482:	0029      	movs	r1, r5
10015484:	f002 f8f2 	bl	1001766c <__aeabi_dsub>
10015488:	f002 fc44 	bl	10017d14 <__aeabi_d2iz>
1001548c:	2380      	movs	r3, #128	; 0x80
1001548e:	061b      	lsls	r3, r3, #24
10015490:	469c      	mov	ip, r3
10015492:	4460      	add	r0, ip
10015494:	e7f1      	b.n	1001547a <__aeabi_d2uiz+0x1a>
10015496:	46c0      	nop			; (mov r8, r8)
10015498:	41e00000 	.word	0x41e00000

1001549c <__aeabi_f2lz>:
1001549c:	b510      	push	{r4, lr}
1001549e:	2100      	movs	r1, #0
100154a0:	1c04      	adds	r4, r0, #0
100154a2:	f7ff ff4d 	bl	10015340 <__aeabi_fcmplt>
100154a6:	2800      	cmp	r0, #0
100154a8:	d103      	bne.n	100154b2 <__aeabi_f2lz+0x16>
100154aa:	1c20      	adds	r0, r4, #0
100154ac:	f000 f80c 	bl	100154c8 <__aeabi_f2ulz>
100154b0:	bd10      	pop	{r4, pc}
100154b2:	2380      	movs	r3, #128	; 0x80
100154b4:	061b      	lsls	r3, r3, #24
100154b6:	18e0      	adds	r0, r4, r3
100154b8:	f000 f806 	bl	100154c8 <__aeabi_f2ulz>
100154bc:	0002      	movs	r2, r0
100154be:	000b      	movs	r3, r1
100154c0:	2100      	movs	r1, #0
100154c2:	4250      	negs	r0, r2
100154c4:	4199      	sbcs	r1, r3
100154c6:	e7f3      	b.n	100154b0 <__aeabi_f2lz+0x14>

100154c8 <__aeabi_f2ulz>:
100154c8:	b570      	push	{r4, r5, r6, lr}
100154ca:	f002 fcd3 	bl	10017e74 <__aeabi_f2d>
100154ce:	2200      	movs	r2, #0
100154d0:	4b0b      	ldr	r3, [pc, #44]	; (10015500 <__aeabi_f2ulz+0x38>)
100154d2:	000d      	movs	r5, r1
100154d4:	0004      	movs	r4, r0
100154d6:	f001 fe4f 	bl	10017178 <__aeabi_dmul>
100154da:	f7ff ffc1 	bl	10015460 <__aeabi_d2uiz>
100154de:	0006      	movs	r6, r0
100154e0:	f002 fc90 	bl	10017e04 <__aeabi_ui2d>
100154e4:	2200      	movs	r2, #0
100154e6:	4b07      	ldr	r3, [pc, #28]	; (10015504 <__aeabi_f2ulz+0x3c>)
100154e8:	f001 fe46 	bl	10017178 <__aeabi_dmul>
100154ec:	0002      	movs	r2, r0
100154ee:	000b      	movs	r3, r1
100154f0:	0020      	movs	r0, r4
100154f2:	0029      	movs	r1, r5
100154f4:	f002 f8ba 	bl	1001766c <__aeabi_dsub>
100154f8:	f7ff ffb2 	bl	10015460 <__aeabi_d2uiz>
100154fc:	0031      	movs	r1, r6
100154fe:	bd70      	pop	{r4, r5, r6, pc}
10015500:	3df00000 	.word	0x3df00000
10015504:	41f00000 	.word	0x41f00000

10015508 <__aeabi_l2f>:
10015508:	b5d0      	push	{r4, r6, r7, lr}
1001550a:	2601      	movs	r6, #1
1001550c:	0002      	movs	r2, r0
1001550e:	000b      	movs	r3, r1
10015510:	4f13      	ldr	r7, [pc, #76]	; (10015560 <__aeabi_l2f+0x58>)
10015512:	4276      	negs	r6, r6
10015514:	18b6      	adds	r6, r6, r2
10015516:	415f      	adcs	r7, r3
10015518:	0004      	movs	r4, r0
1001551a:	4812      	ldr	r0, [pc, #72]	; (10015564 <__aeabi_l2f+0x5c>)
1001551c:	4287      	cmp	r7, r0
1001551e:	d919      	bls.n	10015554 <__aeabi_l2f+0x4c>
10015520:	0552      	lsls	r2, r2, #21
10015522:	d004      	beq.n	1001552e <__aeabi_l2f+0x26>
10015524:	2380      	movs	r3, #128	; 0x80
10015526:	0ae4      	lsrs	r4, r4, #11
10015528:	02e4      	lsls	r4, r4, #11
1001552a:	011b      	lsls	r3, r3, #4
1001552c:	431c      	orrs	r4, r3
1001552e:	0008      	movs	r0, r1
10015530:	f002 fc26 	bl	10017d80 <__aeabi_i2d>
10015534:	2200      	movs	r2, #0
10015536:	4b0c      	ldr	r3, [pc, #48]	; (10015568 <__aeabi_l2f+0x60>)
10015538:	f001 fe1e 	bl	10017178 <__aeabi_dmul>
1001553c:	0006      	movs	r6, r0
1001553e:	000f      	movs	r7, r1
10015540:	0020      	movs	r0, r4
10015542:	f002 fc5f 	bl	10017e04 <__aeabi_ui2d>
10015546:	0032      	movs	r2, r6
10015548:	003b      	movs	r3, r7
1001554a:	f000 fec5 	bl	100162d8 <__aeabi_dadd>
1001554e:	f002 fce5 	bl	10017f1c <__aeabi_d2f>
10015552:	bdd0      	pop	{r4, r6, r7, pc}
10015554:	4287      	cmp	r7, r0
10015556:	d1ea      	bne.n	1001552e <__aeabi_l2f+0x26>
10015558:	1cb0      	adds	r0, r6, #2
1001555a:	d8e1      	bhi.n	10015520 <__aeabi_l2f+0x18>
1001555c:	e7e7      	b.n	1001552e <__aeabi_l2f+0x26>
1001555e:	46c0      	nop			; (mov r8, r8)
10015560:	001fffff 	.word	0x001fffff
10015564:	003fffff 	.word	0x003fffff
10015568:	41f00000 	.word	0x41f00000

1001556c <__gnu_ldivmod_helper>:
1001556c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001556e:	b083      	sub	sp, #12
10015570:	0016      	movs	r6, r2
10015572:	001f      	movs	r7, r3
10015574:	9000      	str	r0, [sp, #0]
10015576:	9101      	str	r1, [sp, #4]
10015578:	f002 fd7a 	bl	10018070 <__divdi3>
1001557c:	0004      	movs	r4, r0
1001557e:	000d      	movs	r5, r1
10015580:	0002      	movs	r2, r0
10015582:	000b      	movs	r3, r1
10015584:	0030      	movs	r0, r6
10015586:	0039      	movs	r1, r7
10015588:	f7ff ff26 	bl	100153d8 <__aeabi_lmul>
1001558c:	9a00      	ldr	r2, [sp, #0]
1001558e:	9b01      	ldr	r3, [sp, #4]
10015590:	1a12      	subs	r2, r2, r0
10015592:	418b      	sbcs	r3, r1
10015594:	9908      	ldr	r1, [sp, #32]
10015596:	0020      	movs	r0, r4
10015598:	600a      	str	r2, [r1, #0]
1001559a:	604b      	str	r3, [r1, #4]
1001559c:	0029      	movs	r1, r5
1001559e:	b003      	add	sp, #12
100155a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100155a2:	46c0      	nop			; (mov r8, r8)

100155a4 <__aeabi_fadd>:
100155a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100155a6:	024a      	lsls	r2, r1, #9
100155a8:	0243      	lsls	r3, r0, #9
100155aa:	0044      	lsls	r4, r0, #1
100155ac:	004e      	lsls	r6, r1, #1
100155ae:	0fc5      	lsrs	r5, r0, #31
100155b0:	0e24      	lsrs	r4, r4, #24
100155b2:	0028      	movs	r0, r5
100155b4:	099b      	lsrs	r3, r3, #6
100155b6:	0e36      	lsrs	r6, r6, #24
100155b8:	0fc9      	lsrs	r1, r1, #31
100155ba:	0992      	lsrs	r2, r2, #6
100155bc:	428d      	cmp	r5, r1
100155be:	d059      	beq.n	10015674 <__aeabi_fadd+0xd0>
100155c0:	1ba0      	subs	r0, r4, r6
100155c2:	2800      	cmp	r0, #0
100155c4:	dc00      	bgt.n	100155c8 <__aeabi_fadd+0x24>
100155c6:	e08d      	b.n	100156e4 <__aeabi_fadd+0x140>
100155c8:	2e00      	cmp	r6, #0
100155ca:	d11a      	bne.n	10015602 <__aeabi_fadd+0x5e>
100155cc:	2a00      	cmp	r2, #0
100155ce:	d000      	beq.n	100155d2 <__aeabi_fadd+0x2e>
100155d0:	e079      	b.n	100156c6 <__aeabi_fadd+0x122>
100155d2:	075a      	lsls	r2, r3, #29
100155d4:	d004      	beq.n	100155e0 <__aeabi_fadd+0x3c>
100155d6:	220f      	movs	r2, #15
100155d8:	401a      	ands	r2, r3
100155da:	2a04      	cmp	r2, #4
100155dc:	d000      	beq.n	100155e0 <__aeabi_fadd+0x3c>
100155de:	3304      	adds	r3, #4
100155e0:	015a      	lsls	r2, r3, #5
100155e2:	d538      	bpl.n	10015656 <__aeabi_fadd+0xb2>
100155e4:	3401      	adds	r4, #1
100155e6:	2cff      	cmp	r4, #255	; 0xff
100155e8:	d100      	bne.n	100155ec <__aeabi_fadd+0x48>
100155ea:	e089      	b.n	10015700 <__aeabi_fadd+0x15c>
100155ec:	0028      	movs	r0, r5
100155ee:	019b      	lsls	r3, r3, #6
100155f0:	0a5b      	lsrs	r3, r3, #9
100155f2:	b2e4      	uxtb	r4, r4
100155f4:	025b      	lsls	r3, r3, #9
100155f6:	05e4      	lsls	r4, r4, #23
100155f8:	0a5b      	lsrs	r3, r3, #9
100155fa:	4323      	orrs	r3, r4
100155fc:	07c0      	lsls	r0, r0, #31
100155fe:	4318      	orrs	r0, r3
10015600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015602:	2cff      	cmp	r4, #255	; 0xff
10015604:	d0e5      	beq.n	100155d2 <__aeabi_fadd+0x2e>
10015606:	2180      	movs	r1, #128	; 0x80
10015608:	04c9      	lsls	r1, r1, #19
1001560a:	430a      	orrs	r2, r1
1001560c:	281b      	cmp	r0, #27
1001560e:	dd00      	ble.n	10015612 <__aeabi_fadd+0x6e>
10015610:	e089      	b.n	10015726 <__aeabi_fadd+0x182>
10015612:	0016      	movs	r6, r2
10015614:	2120      	movs	r1, #32
10015616:	40c6      	lsrs	r6, r0
10015618:	1a08      	subs	r0, r1, r0
1001561a:	4082      	lsls	r2, r0
1001561c:	1e51      	subs	r1, r2, #1
1001561e:	418a      	sbcs	r2, r1
10015620:	4332      	orrs	r2, r6
10015622:	1a9b      	subs	r3, r3, r2
10015624:	015a      	lsls	r2, r3, #5
10015626:	d514      	bpl.n	10015652 <__aeabi_fadd+0xae>
10015628:	019b      	lsls	r3, r3, #6
1001562a:	099e      	lsrs	r6, r3, #6
1001562c:	0030      	movs	r0, r6
1001562e:	f002 fd01 	bl	10018034 <__clzsi2>
10015632:	3805      	subs	r0, #5
10015634:	4086      	lsls	r6, r0
10015636:	4284      	cmp	r4, r0
10015638:	dc65      	bgt.n	10015706 <__aeabi_fadd+0x162>
1001563a:	1b04      	subs	r4, r0, r4
1001563c:	0033      	movs	r3, r6
1001563e:	2020      	movs	r0, #32
10015640:	3401      	adds	r4, #1
10015642:	40e3      	lsrs	r3, r4
10015644:	1b04      	subs	r4, r0, r4
10015646:	40a6      	lsls	r6, r4
10015648:	1e72      	subs	r2, r6, #1
1001564a:	4196      	sbcs	r6, r2
1001564c:	2400      	movs	r4, #0
1001564e:	4333      	orrs	r3, r6
10015650:	e7bf      	b.n	100155d2 <__aeabi_fadd+0x2e>
10015652:	075a      	lsls	r2, r3, #29
10015654:	d1bf      	bne.n	100155d6 <__aeabi_fadd+0x32>
10015656:	08df      	lsrs	r7, r3, #3
10015658:	0028      	movs	r0, r5
1001565a:	2cff      	cmp	r4, #255	; 0xff
1001565c:	d12f      	bne.n	100156be <__aeabi_fadd+0x11a>
1001565e:	2f00      	cmp	r7, #0
10015660:	d100      	bne.n	10015664 <__aeabi_fadd+0xc0>
10015662:	e087      	b.n	10015774 <__aeabi_fadd+0x1d0>
10015664:	2280      	movs	r2, #128	; 0x80
10015666:	03d2      	lsls	r2, r2, #15
10015668:	0013      	movs	r3, r2
1001566a:	433b      	orrs	r3, r7
1001566c:	025b      	lsls	r3, r3, #9
1001566e:	0a5b      	lsrs	r3, r3, #9
10015670:	24ff      	movs	r4, #255	; 0xff
10015672:	e7bf      	b.n	100155f4 <__aeabi_fadd+0x50>
10015674:	1ba1      	subs	r1, r4, r6
10015676:	2900      	cmp	r1, #0
10015678:	dd49      	ble.n	1001570e <__aeabi_fadd+0x16a>
1001567a:	2e00      	cmp	r6, #0
1001567c:	d029      	beq.n	100156d2 <__aeabi_fadd+0x12e>
1001567e:	2cff      	cmp	r4, #255	; 0xff
10015680:	d0a7      	beq.n	100155d2 <__aeabi_fadd+0x2e>
10015682:	2680      	movs	r6, #128	; 0x80
10015684:	04f6      	lsls	r6, r6, #19
10015686:	4332      	orrs	r2, r6
10015688:	291b      	cmp	r1, #27
1001568a:	dd00      	ble.n	1001568e <__aeabi_fadd+0xea>
1001568c:	e08d      	b.n	100157aa <__aeabi_fadd+0x206>
1001568e:	0017      	movs	r7, r2
10015690:	2620      	movs	r6, #32
10015692:	40cf      	lsrs	r7, r1
10015694:	1a71      	subs	r1, r6, r1
10015696:	408a      	lsls	r2, r1
10015698:	1e51      	subs	r1, r2, #1
1001569a:	418a      	sbcs	r2, r1
1001569c:	433a      	orrs	r2, r7
1001569e:	189b      	adds	r3, r3, r2
100156a0:	015a      	lsls	r2, r3, #5
100156a2:	d5d6      	bpl.n	10015652 <__aeabi_fadd+0xae>
100156a4:	3401      	adds	r4, #1
100156a6:	2cff      	cmp	r4, #255	; 0xff
100156a8:	d064      	beq.n	10015774 <__aeabi_fadd+0x1d0>
100156aa:	2201      	movs	r2, #1
100156ac:	4976      	ldr	r1, [pc, #472]	; (10015888 <__aeabi_fadd+0x2e4>)
100156ae:	401a      	ands	r2, r3
100156b0:	085b      	lsrs	r3, r3, #1
100156b2:	400b      	ands	r3, r1
100156b4:	4313      	orrs	r3, r2
100156b6:	e78c      	b.n	100155d2 <__aeabi_fadd+0x2e>
100156b8:	1e03      	subs	r3, r0, #0
100156ba:	d1ca      	bne.n	10015652 <__aeabi_fadd+0xae>
100156bc:	2000      	movs	r0, #0
100156be:	027b      	lsls	r3, r7, #9
100156c0:	0a5b      	lsrs	r3, r3, #9
100156c2:	b2e4      	uxtb	r4, r4
100156c4:	e796      	b.n	100155f4 <__aeabi_fadd+0x50>
100156c6:	3801      	subs	r0, #1
100156c8:	2800      	cmp	r0, #0
100156ca:	d0aa      	beq.n	10015622 <__aeabi_fadd+0x7e>
100156cc:	2cff      	cmp	r4, #255	; 0xff
100156ce:	d19d      	bne.n	1001560c <__aeabi_fadd+0x68>
100156d0:	e77f      	b.n	100155d2 <__aeabi_fadd+0x2e>
100156d2:	2a00      	cmp	r2, #0
100156d4:	d100      	bne.n	100156d8 <__aeabi_fadd+0x134>
100156d6:	e77c      	b.n	100155d2 <__aeabi_fadd+0x2e>
100156d8:	3901      	subs	r1, #1
100156da:	2900      	cmp	r1, #0
100156dc:	d0df      	beq.n	1001569e <__aeabi_fadd+0xfa>
100156de:	2cff      	cmp	r4, #255	; 0xff
100156e0:	d1d2      	bne.n	10015688 <__aeabi_fadd+0xe4>
100156e2:	e776      	b.n	100155d2 <__aeabi_fadd+0x2e>
100156e4:	2800      	cmp	r0, #0
100156e6:	d120      	bne.n	1001572a <__aeabi_fadd+0x186>
100156e8:	1c60      	adds	r0, r4, #1
100156ea:	b2c0      	uxtb	r0, r0
100156ec:	2801      	cmp	r0, #1
100156ee:	dd53      	ble.n	10015798 <__aeabi_fadd+0x1f4>
100156f0:	2780      	movs	r7, #128	; 0x80
100156f2:	1a9e      	subs	r6, r3, r2
100156f4:	04ff      	lsls	r7, r7, #19
100156f6:	4037      	ands	r7, r6
100156f8:	d02f      	beq.n	1001575a <__aeabi_fadd+0x1b6>
100156fa:	1ad6      	subs	r6, r2, r3
100156fc:	000d      	movs	r5, r1
100156fe:	e795      	b.n	1001562c <__aeabi_fadd+0x88>
10015700:	0028      	movs	r0, r5
10015702:	2300      	movs	r3, #0
10015704:	e776      	b.n	100155f4 <__aeabi_fadd+0x50>
10015706:	4b61      	ldr	r3, [pc, #388]	; (1001588c <__aeabi_fadd+0x2e8>)
10015708:	1a24      	subs	r4, r4, r0
1001570a:	4033      	ands	r3, r6
1001570c:	e761      	b.n	100155d2 <__aeabi_fadd+0x2e>
1001570e:	2900      	cmp	r1, #0
10015710:	d14d      	bne.n	100157ae <__aeabi_fadd+0x20a>
10015712:	1c61      	adds	r1, r4, #1
10015714:	b2ce      	uxtb	r6, r1
10015716:	2e01      	cmp	r6, #1
10015718:	dd2f      	ble.n	1001577a <__aeabi_fadd+0x1d6>
1001571a:	29ff      	cmp	r1, #255	; 0xff
1001571c:	d02a      	beq.n	10015774 <__aeabi_fadd+0x1d0>
1001571e:	189b      	adds	r3, r3, r2
10015720:	085b      	lsrs	r3, r3, #1
10015722:	000c      	movs	r4, r1
10015724:	e755      	b.n	100155d2 <__aeabi_fadd+0x2e>
10015726:	2201      	movs	r2, #1
10015728:	e77b      	b.n	10015622 <__aeabi_fadd+0x7e>
1001572a:	2c00      	cmp	r4, #0
1001572c:	d11b      	bne.n	10015766 <__aeabi_fadd+0x1c2>
1001572e:	2b00      	cmp	r3, #0
10015730:	d05b      	beq.n	100157ea <__aeabi_fadd+0x246>
10015732:	43c0      	mvns	r0, r0
10015734:	2800      	cmp	r0, #0
10015736:	d00c      	beq.n	10015752 <__aeabi_fadd+0x1ae>
10015738:	2eff      	cmp	r6, #255	; 0xff
1001573a:	d07e      	beq.n	1001583a <__aeabi_fadd+0x296>
1001573c:	281b      	cmp	r0, #27
1001573e:	dd00      	ble.n	10015742 <__aeabi_fadd+0x19e>
10015740:	e092      	b.n	10015868 <__aeabi_fadd+0x2c4>
10015742:	001d      	movs	r5, r3
10015744:	2420      	movs	r4, #32
10015746:	40c5      	lsrs	r5, r0
10015748:	1a20      	subs	r0, r4, r0
1001574a:	4083      	lsls	r3, r0
1001574c:	1e58      	subs	r0, r3, #1
1001574e:	4183      	sbcs	r3, r0
10015750:	432b      	orrs	r3, r5
10015752:	1ad3      	subs	r3, r2, r3
10015754:	0034      	movs	r4, r6
10015756:	000d      	movs	r5, r1
10015758:	e764      	b.n	10015624 <__aeabi_fadd+0x80>
1001575a:	2e00      	cmp	r6, #0
1001575c:	d000      	beq.n	10015760 <__aeabi_fadd+0x1bc>
1001575e:	e765      	b.n	1001562c <__aeabi_fadd+0x88>
10015760:	2000      	movs	r0, #0
10015762:	2400      	movs	r4, #0
10015764:	e7ab      	b.n	100156be <__aeabi_fadd+0x11a>
10015766:	2eff      	cmp	r6, #255	; 0xff
10015768:	d067      	beq.n	1001583a <__aeabi_fadd+0x296>
1001576a:	2480      	movs	r4, #128	; 0x80
1001576c:	04e4      	lsls	r4, r4, #19
1001576e:	4240      	negs	r0, r0
10015770:	4323      	orrs	r3, r4
10015772:	e7e3      	b.n	1001573c <__aeabi_fadd+0x198>
10015774:	24ff      	movs	r4, #255	; 0xff
10015776:	2300      	movs	r3, #0
10015778:	e73c      	b.n	100155f4 <__aeabi_fadd+0x50>
1001577a:	2c00      	cmp	r4, #0
1001577c:	d161      	bne.n	10015842 <__aeabi_fadd+0x29e>
1001577e:	2b00      	cmp	r3, #0
10015780:	d07e      	beq.n	10015880 <__aeabi_fadd+0x2dc>
10015782:	2a00      	cmp	r2, #0
10015784:	d100      	bne.n	10015788 <__aeabi_fadd+0x1e4>
10015786:	e724      	b.n	100155d2 <__aeabi_fadd+0x2e>
10015788:	189b      	adds	r3, r3, r2
1001578a:	015a      	lsls	r2, r3, #5
1001578c:	d400      	bmi.n	10015790 <__aeabi_fadd+0x1ec>
1001578e:	e760      	b.n	10015652 <__aeabi_fadd+0xae>
10015790:	4a3e      	ldr	r2, [pc, #248]	; (1001588c <__aeabi_fadd+0x2e8>)
10015792:	000c      	movs	r4, r1
10015794:	4013      	ands	r3, r2
10015796:	e71c      	b.n	100155d2 <__aeabi_fadd+0x2e>
10015798:	2c00      	cmp	r4, #0
1001579a:	d11e      	bne.n	100157da <__aeabi_fadd+0x236>
1001579c:	2b00      	cmp	r3, #0
1001579e:	d12f      	bne.n	10015800 <__aeabi_fadd+0x25c>
100157a0:	2a00      	cmp	r2, #0
100157a2:	d066      	beq.n	10015872 <__aeabi_fadd+0x2ce>
100157a4:	0013      	movs	r3, r2
100157a6:	000d      	movs	r5, r1
100157a8:	e713      	b.n	100155d2 <__aeabi_fadd+0x2e>
100157aa:	2201      	movs	r2, #1
100157ac:	e777      	b.n	1001569e <__aeabi_fadd+0xfa>
100157ae:	2c00      	cmp	r4, #0
100157b0:	d11f      	bne.n	100157f2 <__aeabi_fadd+0x24e>
100157b2:	2b00      	cmp	r3, #0
100157b4:	d05a      	beq.n	1001586c <__aeabi_fadd+0x2c8>
100157b6:	43c9      	mvns	r1, r1
100157b8:	2900      	cmp	r1, #0
100157ba:	d00b      	beq.n	100157d4 <__aeabi_fadd+0x230>
100157bc:	2eff      	cmp	r6, #255	; 0xff
100157be:	d050      	beq.n	10015862 <__aeabi_fadd+0x2be>
100157c0:	291b      	cmp	r1, #27
100157c2:	dc5f      	bgt.n	10015884 <__aeabi_fadd+0x2e0>
100157c4:	001f      	movs	r7, r3
100157c6:	2420      	movs	r4, #32
100157c8:	40cf      	lsrs	r7, r1
100157ca:	1a61      	subs	r1, r4, r1
100157cc:	408b      	lsls	r3, r1
100157ce:	1e59      	subs	r1, r3, #1
100157d0:	418b      	sbcs	r3, r1
100157d2:	433b      	orrs	r3, r7
100157d4:	189b      	adds	r3, r3, r2
100157d6:	0034      	movs	r4, r6
100157d8:	e762      	b.n	100156a0 <__aeabi_fadd+0xfc>
100157da:	2b00      	cmp	r3, #0
100157dc:	d11c      	bne.n	10015818 <__aeabi_fadd+0x274>
100157de:	2a00      	cmp	r2, #0
100157e0:	d04a      	beq.n	10015878 <__aeabi_fadd+0x2d4>
100157e2:	0013      	movs	r3, r2
100157e4:	000d      	movs	r5, r1
100157e6:	24ff      	movs	r4, #255	; 0xff
100157e8:	e6f3      	b.n	100155d2 <__aeabi_fadd+0x2e>
100157ea:	0013      	movs	r3, r2
100157ec:	0034      	movs	r4, r6
100157ee:	000d      	movs	r5, r1
100157f0:	e6ef      	b.n	100155d2 <__aeabi_fadd+0x2e>
100157f2:	2eff      	cmp	r6, #255	; 0xff
100157f4:	d035      	beq.n	10015862 <__aeabi_fadd+0x2be>
100157f6:	2480      	movs	r4, #128	; 0x80
100157f8:	04e4      	lsls	r4, r4, #19
100157fa:	4249      	negs	r1, r1
100157fc:	4323      	orrs	r3, r4
100157fe:	e7df      	b.n	100157c0 <__aeabi_fadd+0x21c>
10015800:	2a00      	cmp	r2, #0
10015802:	d100      	bne.n	10015806 <__aeabi_fadd+0x262>
10015804:	e6e5      	b.n	100155d2 <__aeabi_fadd+0x2e>
10015806:	2780      	movs	r7, #128	; 0x80
10015808:	1a98      	subs	r0, r3, r2
1001580a:	04ff      	lsls	r7, r7, #19
1001580c:	4007      	ands	r7, r0
1001580e:	d100      	bne.n	10015812 <__aeabi_fadd+0x26e>
10015810:	e752      	b.n	100156b8 <__aeabi_fadd+0x114>
10015812:	1ad3      	subs	r3, r2, r3
10015814:	000d      	movs	r5, r1
10015816:	e6dc      	b.n	100155d2 <__aeabi_fadd+0x2e>
10015818:	24ff      	movs	r4, #255	; 0xff
1001581a:	2a00      	cmp	r2, #0
1001581c:	d100      	bne.n	10015820 <__aeabi_fadd+0x27c>
1001581e:	e6d8      	b.n	100155d2 <__aeabi_fadd+0x2e>
10015820:	2080      	movs	r0, #128	; 0x80
10015822:	08db      	lsrs	r3, r3, #3
10015824:	03c0      	lsls	r0, r0, #15
10015826:	4203      	tst	r3, r0
10015828:	d004      	beq.n	10015834 <__aeabi_fadd+0x290>
1001582a:	08d2      	lsrs	r2, r2, #3
1001582c:	4202      	tst	r2, r0
1001582e:	d101      	bne.n	10015834 <__aeabi_fadd+0x290>
10015830:	0013      	movs	r3, r2
10015832:	000d      	movs	r5, r1
10015834:	00db      	lsls	r3, r3, #3
10015836:	24ff      	movs	r4, #255	; 0xff
10015838:	e6cb      	b.n	100155d2 <__aeabi_fadd+0x2e>
1001583a:	0013      	movs	r3, r2
1001583c:	24ff      	movs	r4, #255	; 0xff
1001583e:	000d      	movs	r5, r1
10015840:	e6c7      	b.n	100155d2 <__aeabi_fadd+0x2e>
10015842:	2b00      	cmp	r3, #0
10015844:	d00d      	beq.n	10015862 <__aeabi_fadd+0x2be>
10015846:	24ff      	movs	r4, #255	; 0xff
10015848:	2a00      	cmp	r2, #0
1001584a:	d100      	bne.n	1001584e <__aeabi_fadd+0x2aa>
1001584c:	e6c1      	b.n	100155d2 <__aeabi_fadd+0x2e>
1001584e:	2180      	movs	r1, #128	; 0x80
10015850:	08db      	lsrs	r3, r3, #3
10015852:	03c9      	lsls	r1, r1, #15
10015854:	420b      	tst	r3, r1
10015856:	d0ed      	beq.n	10015834 <__aeabi_fadd+0x290>
10015858:	08d2      	lsrs	r2, r2, #3
1001585a:	420a      	tst	r2, r1
1001585c:	d1ea      	bne.n	10015834 <__aeabi_fadd+0x290>
1001585e:	0013      	movs	r3, r2
10015860:	e7e8      	b.n	10015834 <__aeabi_fadd+0x290>
10015862:	0013      	movs	r3, r2
10015864:	24ff      	movs	r4, #255	; 0xff
10015866:	e6b4      	b.n	100155d2 <__aeabi_fadd+0x2e>
10015868:	2301      	movs	r3, #1
1001586a:	e772      	b.n	10015752 <__aeabi_fadd+0x1ae>
1001586c:	0013      	movs	r3, r2
1001586e:	0034      	movs	r4, r6
10015870:	e6af      	b.n	100155d2 <__aeabi_fadd+0x2e>
10015872:	2700      	movs	r7, #0
10015874:	2000      	movs	r0, #0
10015876:	e722      	b.n	100156be <__aeabi_fadd+0x11a>
10015878:	2780      	movs	r7, #128	; 0x80
1001587a:	2000      	movs	r0, #0
1001587c:	03ff      	lsls	r7, r7, #15
1001587e:	e6f1      	b.n	10015664 <__aeabi_fadd+0xc0>
10015880:	0013      	movs	r3, r2
10015882:	e6a6      	b.n	100155d2 <__aeabi_fadd+0x2e>
10015884:	2301      	movs	r3, #1
10015886:	e7a5      	b.n	100157d4 <__aeabi_fadd+0x230>
10015888:	7dffffff 	.word	0x7dffffff
1001588c:	fbffffff 	.word	0xfbffffff

10015890 <__aeabi_fdiv>:
10015890:	b5f0      	push	{r4, r5, r6, r7, lr}
10015892:	4656      	mov	r6, sl
10015894:	4644      	mov	r4, r8
10015896:	465f      	mov	r7, fp
10015898:	464d      	mov	r5, r9
1001589a:	b4f0      	push	{r4, r5, r6, r7}
1001589c:	0244      	lsls	r4, r0, #9
1001589e:	0046      	lsls	r6, r0, #1
100158a0:	0fc7      	lsrs	r7, r0, #31
100158a2:	b083      	sub	sp, #12
100158a4:	4688      	mov	r8, r1
100158a6:	0a65      	lsrs	r5, r4, #9
100158a8:	0e36      	lsrs	r6, r6, #24
100158aa:	46ba      	mov	sl, r7
100158ac:	d03d      	beq.n	1001592a <__aeabi_fdiv+0x9a>
100158ae:	2eff      	cmp	r6, #255	; 0xff
100158b0:	d022      	beq.n	100158f8 <__aeabi_fdiv+0x68>
100158b2:	2300      	movs	r3, #0
100158b4:	00ec      	lsls	r4, r5, #3
100158b6:	2580      	movs	r5, #128	; 0x80
100158b8:	4699      	mov	r9, r3
100158ba:	469b      	mov	fp, r3
100158bc:	04ed      	lsls	r5, r5, #19
100158be:	4325      	orrs	r5, r4
100158c0:	3e7f      	subs	r6, #127	; 0x7f
100158c2:	4643      	mov	r3, r8
100158c4:	025c      	lsls	r4, r3, #9
100158c6:	0058      	lsls	r0, r3, #1
100158c8:	0fdb      	lsrs	r3, r3, #31
100158ca:	0a64      	lsrs	r4, r4, #9
100158cc:	0e00      	lsrs	r0, r0, #24
100158ce:	4698      	mov	r8, r3
100158d0:	d036      	beq.n	10015940 <__aeabi_fdiv+0xb0>
100158d2:	28ff      	cmp	r0, #255	; 0xff
100158d4:	d030      	beq.n	10015938 <__aeabi_fdiv+0xa8>
100158d6:	2380      	movs	r3, #128	; 0x80
100158d8:	2100      	movs	r1, #0
100158da:	00e4      	lsls	r4, r4, #3
100158dc:	04db      	lsls	r3, r3, #19
100158de:	431c      	orrs	r4, r3
100158e0:	387f      	subs	r0, #127	; 0x7f
100158e2:	1a30      	subs	r0, r6, r0
100158e4:	9001      	str	r0, [sp, #4]
100158e6:	4648      	mov	r0, r9
100158e8:	4642      	mov	r2, r8
100158ea:	4308      	orrs	r0, r1
100158ec:	4e72      	ldr	r6, [pc, #456]	; (10015ab8 <__aeabi_fdiv+0x228>)
100158ee:	0080      	lsls	r0, r0, #2
100158f0:	5830      	ldr	r0, [r6, r0]
100158f2:	407a      	eors	r2, r7
100158f4:	0013      	movs	r3, r2
100158f6:	4687      	mov	pc, r0
100158f8:	2d00      	cmp	r5, #0
100158fa:	d144      	bne.n	10015986 <__aeabi_fdiv+0xf6>
100158fc:	2308      	movs	r3, #8
100158fe:	4699      	mov	r9, r3
10015900:	3b06      	subs	r3, #6
10015902:	469b      	mov	fp, r3
10015904:	e7dd      	b.n	100158c2 <__aeabi_fdiv+0x32>
10015906:	2201      	movs	r2, #1
10015908:	20ff      	movs	r0, #255	; 0xff
1001590a:	2400      	movs	r4, #0
1001590c:	401a      	ands	r2, r3
1001590e:	0264      	lsls	r4, r4, #9
10015910:	05c3      	lsls	r3, r0, #23
10015912:	0a64      	lsrs	r4, r4, #9
10015914:	07d2      	lsls	r2, r2, #31
10015916:	431c      	orrs	r4, r3
10015918:	4314      	orrs	r4, r2
1001591a:	0020      	movs	r0, r4
1001591c:	b003      	add	sp, #12
1001591e:	bc3c      	pop	{r2, r3, r4, r5}
10015920:	4690      	mov	r8, r2
10015922:	4699      	mov	r9, r3
10015924:	46a2      	mov	sl, r4
10015926:	46ab      	mov	fp, r5
10015928:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001592a:	2d00      	cmp	r5, #0
1001592c:	d120      	bne.n	10015970 <__aeabi_fdiv+0xe0>
1001592e:	2304      	movs	r3, #4
10015930:	4699      	mov	r9, r3
10015932:	3b03      	subs	r3, #3
10015934:	469b      	mov	fp, r3
10015936:	e7c4      	b.n	100158c2 <__aeabi_fdiv+0x32>
10015938:	2c00      	cmp	r4, #0
1001593a:	d117      	bne.n	1001596c <__aeabi_fdiv+0xdc>
1001593c:	2102      	movs	r1, #2
1001593e:	e002      	b.n	10015946 <__aeabi_fdiv+0xb6>
10015940:	2c00      	cmp	r4, #0
10015942:	d10a      	bne.n	1001595a <__aeabi_fdiv+0xca>
10015944:	2101      	movs	r1, #1
10015946:	1a32      	subs	r2, r6, r0
10015948:	9201      	str	r2, [sp, #4]
1001594a:	464a      	mov	r2, r9
1001594c:	4643      	mov	r3, r8
1001594e:	430a      	orrs	r2, r1
10015950:	485a      	ldr	r0, [pc, #360]	; (10015abc <__aeabi_fdiv+0x22c>)
10015952:	0092      	lsls	r2, r2, #2
10015954:	5882      	ldr	r2, [r0, r2]
10015956:	407b      	eors	r3, r7
10015958:	4697      	mov	pc, r2
1001595a:	0020      	movs	r0, r4
1001595c:	f002 fb6a 	bl	10018034 <__clzsi2>
10015960:	1f43      	subs	r3, r0, #5
10015962:	3076      	adds	r0, #118	; 0x76
10015964:	409c      	lsls	r4, r3
10015966:	4240      	negs	r0, r0
10015968:	2100      	movs	r1, #0
1001596a:	e7ba      	b.n	100158e2 <__aeabi_fdiv+0x52>
1001596c:	2103      	movs	r1, #3
1001596e:	e7b8      	b.n	100158e2 <__aeabi_fdiv+0x52>
10015970:	0028      	movs	r0, r5
10015972:	f002 fb5f 	bl	10018034 <__clzsi2>
10015976:	1f43      	subs	r3, r0, #5
10015978:	409d      	lsls	r5, r3
1001597a:	2300      	movs	r3, #0
1001597c:	3076      	adds	r0, #118	; 0x76
1001597e:	4246      	negs	r6, r0
10015980:	4699      	mov	r9, r3
10015982:	469b      	mov	fp, r3
10015984:	e79d      	b.n	100158c2 <__aeabi_fdiv+0x32>
10015986:	230c      	movs	r3, #12
10015988:	4699      	mov	r9, r3
1001598a:	3b09      	subs	r3, #9
1001598c:	469b      	mov	fp, r3
1001598e:	e798      	b.n	100158c2 <__aeabi_fdiv+0x32>
10015990:	2480      	movs	r4, #128	; 0x80
10015992:	2200      	movs	r2, #0
10015994:	03e4      	lsls	r4, r4, #15
10015996:	20ff      	movs	r0, #255	; 0xff
10015998:	e7b9      	b.n	1001590e <__aeabi_fdiv+0x7e>
1001599a:	2400      	movs	r4, #0
1001599c:	46c2      	mov	sl, r8
1001599e:	468b      	mov	fp, r1
100159a0:	465a      	mov	r2, fp
100159a2:	4653      	mov	r3, sl
100159a4:	2a02      	cmp	r2, #2
100159a6:	d0ae      	beq.n	10015906 <__aeabi_fdiv+0x76>
100159a8:	2a03      	cmp	r2, #3
100159aa:	d07d      	beq.n	10015aa8 <__aeabi_fdiv+0x218>
100159ac:	2a01      	cmp	r2, #1
100159ae:	d131      	bne.n	10015a14 <__aeabi_fdiv+0x184>
100159b0:	2201      	movs	r2, #1
100159b2:	2000      	movs	r0, #0
100159b4:	401a      	ands	r2, r3
100159b6:	2400      	movs	r4, #0
100159b8:	e7a9      	b.n	1001590e <__aeabi_fdiv+0x7e>
100159ba:	2201      	movs	r2, #1
100159bc:	1a10      	subs	r0, r2, r0
100159be:	281b      	cmp	r0, #27
100159c0:	dd56      	ble.n	10015a70 <__aeabi_fdiv+0x1e0>
100159c2:	401a      	ands	r2, r3
100159c4:	2000      	movs	r0, #0
100159c6:	2400      	movs	r4, #0
100159c8:	e7a1      	b.n	1001590e <__aeabi_fdiv+0x7e>
100159ca:	2380      	movs	r3, #128	; 0x80
100159cc:	03db      	lsls	r3, r3, #15
100159ce:	421d      	tst	r5, r3
100159d0:	d14b      	bne.n	10015a6a <__aeabi_fdiv+0x1da>
100159d2:	2380      	movs	r3, #128	; 0x80
100159d4:	03db      	lsls	r3, r3, #15
100159d6:	432b      	orrs	r3, r5
100159d8:	025c      	lsls	r4, r3, #9
100159da:	0a64      	lsrs	r4, r4, #9
100159dc:	003a      	movs	r2, r7
100159de:	20ff      	movs	r0, #255	; 0xff
100159e0:	e795      	b.n	1001590e <__aeabi_fdiv+0x7e>
100159e2:	016d      	lsls	r5, r5, #5
100159e4:	0160      	lsls	r0, r4, #5
100159e6:	4285      	cmp	r5, r0
100159e8:	d230      	bcs.n	10015a4c <__aeabi_fdiv+0x1bc>
100159ea:	9a01      	ldr	r2, [sp, #4]
100159ec:	2400      	movs	r4, #0
100159ee:	3a01      	subs	r2, #1
100159f0:	9201      	str	r2, [sp, #4]
100159f2:	221b      	movs	r2, #27
100159f4:	2701      	movs	r7, #1
100159f6:	0029      	movs	r1, r5
100159f8:	0064      	lsls	r4, r4, #1
100159fa:	006d      	lsls	r5, r5, #1
100159fc:	2900      	cmp	r1, #0
100159fe:	db01      	blt.n	10015a04 <__aeabi_fdiv+0x174>
10015a00:	42a8      	cmp	r0, r5
10015a02:	d801      	bhi.n	10015a08 <__aeabi_fdiv+0x178>
10015a04:	1a2d      	subs	r5, r5, r0
10015a06:	433c      	orrs	r4, r7
10015a08:	3a01      	subs	r2, #1
10015a0a:	2a00      	cmp	r2, #0
10015a0c:	d1f3      	bne.n	100159f6 <__aeabi_fdiv+0x166>
10015a0e:	1e6a      	subs	r2, r5, #1
10015a10:	4195      	sbcs	r5, r2
10015a12:	432c      	orrs	r4, r5
10015a14:	9801      	ldr	r0, [sp, #4]
10015a16:	307f      	adds	r0, #127	; 0x7f
10015a18:	2800      	cmp	r0, #0
10015a1a:	ddce      	ble.n	100159ba <__aeabi_fdiv+0x12a>
10015a1c:	0762      	lsls	r2, r4, #29
10015a1e:	d004      	beq.n	10015a2a <__aeabi_fdiv+0x19a>
10015a20:	220f      	movs	r2, #15
10015a22:	4022      	ands	r2, r4
10015a24:	2a04      	cmp	r2, #4
10015a26:	d000      	beq.n	10015a2a <__aeabi_fdiv+0x19a>
10015a28:	3404      	adds	r4, #4
10015a2a:	0122      	lsls	r2, r4, #4
10015a2c:	d503      	bpl.n	10015a36 <__aeabi_fdiv+0x1a6>
10015a2e:	4a24      	ldr	r2, [pc, #144]	; (10015ac0 <__aeabi_fdiv+0x230>)
10015a30:	9801      	ldr	r0, [sp, #4]
10015a32:	4014      	ands	r4, r2
10015a34:	3080      	adds	r0, #128	; 0x80
10015a36:	28fe      	cmp	r0, #254	; 0xfe
10015a38:	dd00      	ble.n	10015a3c <__aeabi_fdiv+0x1ac>
10015a3a:	e764      	b.n	10015906 <__aeabi_fdiv+0x76>
10015a3c:	2201      	movs	r2, #1
10015a3e:	01a4      	lsls	r4, r4, #6
10015a40:	0a64      	lsrs	r4, r4, #9
10015a42:	b2c0      	uxtb	r0, r0
10015a44:	401a      	ands	r2, r3
10015a46:	e762      	b.n	1001590e <__aeabi_fdiv+0x7e>
10015a48:	002c      	movs	r4, r5
10015a4a:	e7a9      	b.n	100159a0 <__aeabi_fdiv+0x110>
10015a4c:	1a2d      	subs	r5, r5, r0
10015a4e:	221a      	movs	r2, #26
10015a50:	2401      	movs	r4, #1
10015a52:	e7cf      	b.n	100159f4 <__aeabi_fdiv+0x164>
10015a54:	026b      	lsls	r3, r5, #9
10015a56:	d5bc      	bpl.n	100159d2 <__aeabi_fdiv+0x142>
10015a58:	2400      	movs	r4, #0
10015a5a:	2380      	movs	r3, #128	; 0x80
10015a5c:	03db      	lsls	r3, r3, #15
10015a5e:	431c      	orrs	r4, r3
10015a60:	0264      	lsls	r4, r4, #9
10015a62:	0a64      	lsrs	r4, r4, #9
10015a64:	4642      	mov	r2, r8
10015a66:	20ff      	movs	r0, #255	; 0xff
10015a68:	e751      	b.n	1001590e <__aeabi_fdiv+0x7e>
10015a6a:	421c      	tst	r4, r3
10015a6c:	d1b3      	bne.n	100159d6 <__aeabi_fdiv+0x146>
10015a6e:	e7f4      	b.n	10015a5a <__aeabi_fdiv+0x1ca>
10015a70:	0021      	movs	r1, r4
10015a72:	2220      	movs	r2, #32
10015a74:	40c1      	lsrs	r1, r0
10015a76:	1a10      	subs	r0, r2, r0
10015a78:	4084      	lsls	r4, r0
10015a7a:	1e62      	subs	r2, r4, #1
10015a7c:	4194      	sbcs	r4, r2
10015a7e:	430c      	orrs	r4, r1
10015a80:	0762      	lsls	r2, r4, #29
10015a82:	d004      	beq.n	10015a8e <__aeabi_fdiv+0x1fe>
10015a84:	220f      	movs	r2, #15
10015a86:	4022      	ands	r2, r4
10015a88:	2a04      	cmp	r2, #4
10015a8a:	d000      	beq.n	10015a8e <__aeabi_fdiv+0x1fe>
10015a8c:	3404      	adds	r4, #4
10015a8e:	0162      	lsls	r2, r4, #5
10015a90:	d504      	bpl.n	10015a9c <__aeabi_fdiv+0x20c>
10015a92:	2201      	movs	r2, #1
10015a94:	2001      	movs	r0, #1
10015a96:	401a      	ands	r2, r3
10015a98:	2400      	movs	r4, #0
10015a9a:	e738      	b.n	1001590e <__aeabi_fdiv+0x7e>
10015a9c:	2201      	movs	r2, #1
10015a9e:	01a4      	lsls	r4, r4, #6
10015aa0:	0a64      	lsrs	r4, r4, #9
10015aa2:	401a      	ands	r2, r3
10015aa4:	2000      	movs	r0, #0
10015aa6:	e732      	b.n	1001590e <__aeabi_fdiv+0x7e>
10015aa8:	2380      	movs	r3, #128	; 0x80
10015aaa:	03db      	lsls	r3, r3, #15
10015aac:	431c      	orrs	r4, r3
10015aae:	0264      	lsls	r4, r4, #9
10015ab0:	0a64      	lsrs	r4, r4, #9
10015ab2:	4652      	mov	r2, sl
10015ab4:	20ff      	movs	r0, #255	; 0xff
10015ab6:	e72a      	b.n	1001590e <__aeabi_fdiv+0x7e>
10015ab8:	1001b3cc 	.word	0x1001b3cc
10015abc:	1001b40c 	.word	0x1001b40c
10015ac0:	f7ffffff 	.word	0xf7ffffff

10015ac4 <__eqsf2>:
10015ac4:	0243      	lsls	r3, r0, #9
10015ac6:	b570      	push	{r4, r5, r6, lr}
10015ac8:	0042      	lsls	r2, r0, #1
10015aca:	004c      	lsls	r4, r1, #1
10015acc:	0a5d      	lsrs	r5, r3, #9
10015ace:	0fc3      	lsrs	r3, r0, #31
10015ad0:	0248      	lsls	r0, r1, #9
10015ad2:	0e12      	lsrs	r2, r2, #24
10015ad4:	0a46      	lsrs	r6, r0, #9
10015ad6:	0e24      	lsrs	r4, r4, #24
10015ad8:	0fc9      	lsrs	r1, r1, #31
10015ada:	2aff      	cmp	r2, #255	; 0xff
10015adc:	d00f      	beq.n	10015afe <__eqsf2+0x3a>
10015ade:	2cff      	cmp	r4, #255	; 0xff
10015ae0:	d011      	beq.n	10015b06 <__eqsf2+0x42>
10015ae2:	2001      	movs	r0, #1
10015ae4:	42a2      	cmp	r2, r4
10015ae6:	d000      	beq.n	10015aea <__eqsf2+0x26>
10015ae8:	bd70      	pop	{r4, r5, r6, pc}
10015aea:	42b5      	cmp	r5, r6
10015aec:	d1fc      	bne.n	10015ae8 <__eqsf2+0x24>
10015aee:	428b      	cmp	r3, r1
10015af0:	d00d      	beq.n	10015b0e <__eqsf2+0x4a>
10015af2:	2a00      	cmp	r2, #0
10015af4:	d1f8      	bne.n	10015ae8 <__eqsf2+0x24>
10015af6:	0028      	movs	r0, r5
10015af8:	1e43      	subs	r3, r0, #1
10015afa:	4198      	sbcs	r0, r3
10015afc:	e7f4      	b.n	10015ae8 <__eqsf2+0x24>
10015afe:	2001      	movs	r0, #1
10015b00:	2d00      	cmp	r5, #0
10015b02:	d1f1      	bne.n	10015ae8 <__eqsf2+0x24>
10015b04:	e7eb      	b.n	10015ade <__eqsf2+0x1a>
10015b06:	2001      	movs	r0, #1
10015b08:	2e00      	cmp	r6, #0
10015b0a:	d1ed      	bne.n	10015ae8 <__eqsf2+0x24>
10015b0c:	e7e9      	b.n	10015ae2 <__eqsf2+0x1e>
10015b0e:	2000      	movs	r0, #0
10015b10:	e7ea      	b.n	10015ae8 <__eqsf2+0x24>
10015b12:	46c0      	nop			; (mov r8, r8)

10015b14 <__gesf2>:
10015b14:	0243      	lsls	r3, r0, #9
10015b16:	b5f0      	push	{r4, r5, r6, r7, lr}
10015b18:	0042      	lsls	r2, r0, #1
10015b1a:	0a5d      	lsrs	r5, r3, #9
10015b1c:	0fc3      	lsrs	r3, r0, #31
10015b1e:	0248      	lsls	r0, r1, #9
10015b20:	0a44      	lsrs	r4, r0, #9
10015b22:	0048      	lsls	r0, r1, #1
10015b24:	0e12      	lsrs	r2, r2, #24
10015b26:	0e00      	lsrs	r0, r0, #24
10015b28:	0fc9      	lsrs	r1, r1, #31
10015b2a:	2aff      	cmp	r2, #255	; 0xff
10015b2c:	d01f      	beq.n	10015b6e <__gesf2+0x5a>
10015b2e:	28ff      	cmp	r0, #255	; 0xff
10015b30:	d022      	beq.n	10015b78 <__gesf2+0x64>
10015b32:	2a00      	cmp	r2, #0
10015b34:	d109      	bne.n	10015b4a <__gesf2+0x36>
10015b36:	426e      	negs	r6, r5
10015b38:	416e      	adcs	r6, r5
10015b3a:	2800      	cmp	r0, #0
10015b3c:	d10f      	bne.n	10015b5e <__gesf2+0x4a>
10015b3e:	2c00      	cmp	r4, #0
10015b40:	d10d      	bne.n	10015b5e <__gesf2+0x4a>
10015b42:	2000      	movs	r0, #0
10015b44:	2d00      	cmp	r5, #0
10015b46:	d009      	beq.n	10015b5c <__gesf2+0x48>
10015b48:	e005      	b.n	10015b56 <__gesf2+0x42>
10015b4a:	2800      	cmp	r0, #0
10015b4c:	d101      	bne.n	10015b52 <__gesf2+0x3e>
10015b4e:	2c00      	cmp	r4, #0
10015b50:	d001      	beq.n	10015b56 <__gesf2+0x42>
10015b52:	428b      	cmp	r3, r1
10015b54:	d013      	beq.n	10015b7e <__gesf2+0x6a>
10015b56:	4258      	negs	r0, r3
10015b58:	2301      	movs	r3, #1
10015b5a:	4318      	orrs	r0, r3
10015b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015b5e:	2e00      	cmp	r6, #0
10015b60:	d0f7      	beq.n	10015b52 <__gesf2+0x3e>
10015b62:	4248      	negs	r0, r1
10015b64:	4141      	adcs	r1, r0
10015b66:	2001      	movs	r0, #1
10015b68:	4249      	negs	r1, r1
10015b6a:	4308      	orrs	r0, r1
10015b6c:	e7f6      	b.n	10015b5c <__gesf2+0x48>
10015b6e:	2d00      	cmp	r5, #0
10015b70:	d0dd      	beq.n	10015b2e <__gesf2+0x1a>
10015b72:	2002      	movs	r0, #2
10015b74:	4240      	negs	r0, r0
10015b76:	e7f1      	b.n	10015b5c <__gesf2+0x48>
10015b78:	2c00      	cmp	r4, #0
10015b7a:	d0da      	beq.n	10015b32 <__gesf2+0x1e>
10015b7c:	e7f9      	b.n	10015b72 <__gesf2+0x5e>
10015b7e:	4282      	cmp	r2, r0
10015b80:	dce9      	bgt.n	10015b56 <__gesf2+0x42>
10015b82:	db04      	blt.n	10015b8e <__gesf2+0x7a>
10015b84:	42a5      	cmp	r5, r4
10015b86:	d8e6      	bhi.n	10015b56 <__gesf2+0x42>
10015b88:	2000      	movs	r0, #0
10015b8a:	42a5      	cmp	r5, r4
10015b8c:	d2e6      	bcs.n	10015b5c <__gesf2+0x48>
10015b8e:	4258      	negs	r0, r3
10015b90:	4143      	adcs	r3, r0
10015b92:	2001      	movs	r0, #1
10015b94:	425b      	negs	r3, r3
10015b96:	4318      	orrs	r0, r3
10015b98:	e7e0      	b.n	10015b5c <__gesf2+0x48>
10015b9a:	46c0      	nop			; (mov r8, r8)

10015b9c <__lesf2>:
10015b9c:	0243      	lsls	r3, r0, #9
10015b9e:	b5f0      	push	{r4, r5, r6, r7, lr}
10015ba0:	0042      	lsls	r2, r0, #1
10015ba2:	004c      	lsls	r4, r1, #1
10015ba4:	0a5e      	lsrs	r6, r3, #9
10015ba6:	0fc3      	lsrs	r3, r0, #31
10015ba8:	0248      	lsls	r0, r1, #9
10015baa:	0e12      	lsrs	r2, r2, #24
10015bac:	0a45      	lsrs	r5, r0, #9
10015bae:	0e24      	lsrs	r4, r4, #24
10015bb0:	0fc9      	lsrs	r1, r1, #31
10015bb2:	2aff      	cmp	r2, #255	; 0xff
10015bb4:	d017      	beq.n	10015be6 <__lesf2+0x4a>
10015bb6:	2cff      	cmp	r4, #255	; 0xff
10015bb8:	d019      	beq.n	10015bee <__lesf2+0x52>
10015bba:	2a00      	cmp	r2, #0
10015bbc:	d10b      	bne.n	10015bd6 <__lesf2+0x3a>
10015bbe:	4270      	negs	r0, r6
10015bc0:	4170      	adcs	r0, r6
10015bc2:	2c00      	cmp	r4, #0
10015bc4:	d017      	beq.n	10015bf6 <__lesf2+0x5a>
10015bc6:	2800      	cmp	r0, #0
10015bc8:	d007      	beq.n	10015bda <__lesf2+0x3e>
10015bca:	4248      	negs	r0, r1
10015bcc:	4141      	adcs	r1, r0
10015bce:	2001      	movs	r0, #1
10015bd0:	4249      	negs	r1, r1
10015bd2:	4308      	orrs	r0, r1
10015bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015bd6:	2c00      	cmp	r4, #0
10015bd8:	d013      	beq.n	10015c02 <__lesf2+0x66>
10015bda:	428b      	cmp	r3, r1
10015bdc:	d014      	beq.n	10015c08 <__lesf2+0x6c>
10015bde:	4258      	negs	r0, r3
10015be0:	2301      	movs	r3, #1
10015be2:	4318      	orrs	r0, r3
10015be4:	e7f6      	b.n	10015bd4 <__lesf2+0x38>
10015be6:	2002      	movs	r0, #2
10015be8:	2e00      	cmp	r6, #0
10015bea:	d1f3      	bne.n	10015bd4 <__lesf2+0x38>
10015bec:	e7e3      	b.n	10015bb6 <__lesf2+0x1a>
10015bee:	2002      	movs	r0, #2
10015bf0:	2d00      	cmp	r5, #0
10015bf2:	d1ef      	bne.n	10015bd4 <__lesf2+0x38>
10015bf4:	e7e1      	b.n	10015bba <__lesf2+0x1e>
10015bf6:	2d00      	cmp	r5, #0
10015bf8:	d1e5      	bne.n	10015bc6 <__lesf2+0x2a>
10015bfa:	2000      	movs	r0, #0
10015bfc:	2e00      	cmp	r6, #0
10015bfe:	d0e9      	beq.n	10015bd4 <__lesf2+0x38>
10015c00:	e7ed      	b.n	10015bde <__lesf2+0x42>
10015c02:	2d00      	cmp	r5, #0
10015c04:	d1e9      	bne.n	10015bda <__lesf2+0x3e>
10015c06:	e7ea      	b.n	10015bde <__lesf2+0x42>
10015c08:	42a2      	cmp	r2, r4
10015c0a:	dce8      	bgt.n	10015bde <__lesf2+0x42>
10015c0c:	db04      	blt.n	10015c18 <__lesf2+0x7c>
10015c0e:	42ae      	cmp	r6, r5
10015c10:	d8e5      	bhi.n	10015bde <__lesf2+0x42>
10015c12:	2000      	movs	r0, #0
10015c14:	42ae      	cmp	r6, r5
10015c16:	d2dd      	bcs.n	10015bd4 <__lesf2+0x38>
10015c18:	4258      	negs	r0, r3
10015c1a:	4143      	adcs	r3, r0
10015c1c:	2001      	movs	r0, #1
10015c1e:	425b      	negs	r3, r3
10015c20:	4318      	orrs	r0, r3
10015c22:	e7d7      	b.n	10015bd4 <__lesf2+0x38>

10015c24 <__aeabi_fmul>:
10015c24:	b5f0      	push	{r4, r5, r6, r7, lr}
10015c26:	4657      	mov	r7, sl
10015c28:	464e      	mov	r6, r9
10015c2a:	4645      	mov	r5, r8
10015c2c:	0043      	lsls	r3, r0, #1
10015c2e:	b4e0      	push	{r5, r6, r7}
10015c30:	0246      	lsls	r6, r0, #9
10015c32:	4688      	mov	r8, r1
10015c34:	0a76      	lsrs	r6, r6, #9
10015c36:	0e1f      	lsrs	r7, r3, #24
10015c38:	0fc4      	lsrs	r4, r0, #31
10015c3a:	2f00      	cmp	r7, #0
10015c3c:	d047      	beq.n	10015cce <__aeabi_fmul+0xaa>
10015c3e:	2fff      	cmp	r7, #255	; 0xff
10015c40:	d025      	beq.n	10015c8e <__aeabi_fmul+0x6a>
10015c42:	2300      	movs	r3, #0
10015c44:	2580      	movs	r5, #128	; 0x80
10015c46:	469a      	mov	sl, r3
10015c48:	4699      	mov	r9, r3
10015c4a:	00f6      	lsls	r6, r6, #3
10015c4c:	04ed      	lsls	r5, r5, #19
10015c4e:	432e      	orrs	r6, r5
10015c50:	3f7f      	subs	r7, #127	; 0x7f
10015c52:	4643      	mov	r3, r8
10015c54:	4642      	mov	r2, r8
10015c56:	025d      	lsls	r5, r3, #9
10015c58:	0fd2      	lsrs	r2, r2, #31
10015c5a:	005b      	lsls	r3, r3, #1
10015c5c:	0a6d      	lsrs	r5, r5, #9
10015c5e:	0e1b      	lsrs	r3, r3, #24
10015c60:	4690      	mov	r8, r2
10015c62:	d040      	beq.n	10015ce6 <__aeabi_fmul+0xc2>
10015c64:	2bff      	cmp	r3, #255	; 0xff
10015c66:	d039      	beq.n	10015cdc <__aeabi_fmul+0xb8>
10015c68:	2280      	movs	r2, #128	; 0x80
10015c6a:	2000      	movs	r0, #0
10015c6c:	00ed      	lsls	r5, r5, #3
10015c6e:	04d2      	lsls	r2, r2, #19
10015c70:	4315      	orrs	r5, r2
10015c72:	3b7f      	subs	r3, #127	; 0x7f
10015c74:	18fb      	adds	r3, r7, r3
10015c76:	4642      	mov	r2, r8
10015c78:	4657      	mov	r7, sl
10015c7a:	1c59      	adds	r1, r3, #1
10015c7c:	4062      	eors	r2, r4
10015c7e:	468c      	mov	ip, r1
10015c80:	4307      	orrs	r7, r0
10015c82:	2f0f      	cmp	r7, #15
10015c84:	d85c      	bhi.n	10015d40 <__aeabi_fmul+0x11c>
10015c86:	496f      	ldr	r1, [pc, #444]	; (10015e44 <__aeabi_fmul+0x220>)
10015c88:	00bf      	lsls	r7, r7, #2
10015c8a:	59c9      	ldr	r1, [r1, r7]
10015c8c:	468f      	mov	pc, r1
10015c8e:	2e00      	cmp	r6, #0
10015c90:	d145      	bne.n	10015d1e <__aeabi_fmul+0xfa>
10015c92:	2308      	movs	r3, #8
10015c94:	469a      	mov	sl, r3
10015c96:	3b06      	subs	r3, #6
10015c98:	4699      	mov	r9, r3
10015c9a:	e7da      	b.n	10015c52 <__aeabi_fmul+0x2e>
10015c9c:	4642      	mov	r2, r8
10015c9e:	2802      	cmp	r0, #2
10015ca0:	d02d      	beq.n	10015cfe <__aeabi_fmul+0xda>
10015ca2:	2803      	cmp	r0, #3
10015ca4:	d100      	bne.n	10015ca8 <__aeabi_fmul+0x84>
10015ca6:	e0c3      	b.n	10015e30 <__aeabi_fmul+0x20c>
10015ca8:	2801      	cmp	r0, #1
10015caa:	d000      	beq.n	10015cae <__aeabi_fmul+0x8a>
10015cac:	e0a2      	b.n	10015df4 <__aeabi_fmul+0x1d0>
10015cae:	2500      	movs	r5, #0
10015cb0:	2600      	movs	r6, #0
10015cb2:	4002      	ands	r2, r0
10015cb4:	b2d4      	uxtb	r4, r2
10015cb6:	0276      	lsls	r6, r6, #9
10015cb8:	05ed      	lsls	r5, r5, #23
10015cba:	0a76      	lsrs	r6, r6, #9
10015cbc:	432e      	orrs	r6, r5
10015cbe:	07e4      	lsls	r4, r4, #31
10015cc0:	4326      	orrs	r6, r4
10015cc2:	0030      	movs	r0, r6
10015cc4:	bc1c      	pop	{r2, r3, r4}
10015cc6:	4690      	mov	r8, r2
10015cc8:	4699      	mov	r9, r3
10015cca:	46a2      	mov	sl, r4
10015ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015cce:	2e00      	cmp	r6, #0
10015cd0:	d11a      	bne.n	10015d08 <__aeabi_fmul+0xe4>
10015cd2:	2304      	movs	r3, #4
10015cd4:	469a      	mov	sl, r3
10015cd6:	3b03      	subs	r3, #3
10015cd8:	4699      	mov	r9, r3
10015cda:	e7ba      	b.n	10015c52 <__aeabi_fmul+0x2e>
10015cdc:	002a      	movs	r2, r5
10015cde:	1e51      	subs	r1, r2, #1
10015ce0:	418a      	sbcs	r2, r1
10015ce2:	1c90      	adds	r0, r2, #2
10015ce4:	e7c6      	b.n	10015c74 <__aeabi_fmul+0x50>
10015ce6:	2001      	movs	r0, #1
10015ce8:	2d00      	cmp	r5, #0
10015cea:	d0c3      	beq.n	10015c74 <__aeabi_fmul+0x50>
10015cec:	0028      	movs	r0, r5
10015cee:	f002 f9a1 	bl	10018034 <__clzsi2>
10015cf2:	1f43      	subs	r3, r0, #5
10015cf4:	3076      	adds	r0, #118	; 0x76
10015cf6:	409d      	lsls	r5, r3
10015cf8:	4243      	negs	r3, r0
10015cfa:	2000      	movs	r0, #0
10015cfc:	e7ba      	b.n	10015c74 <__aeabi_fmul+0x50>
10015cfe:	2401      	movs	r4, #1
10015d00:	25ff      	movs	r5, #255	; 0xff
10015d02:	4014      	ands	r4, r2
10015d04:	2600      	movs	r6, #0
10015d06:	e7d6      	b.n	10015cb6 <__aeabi_fmul+0x92>
10015d08:	0030      	movs	r0, r6
10015d0a:	f002 f993 	bl	10018034 <__clzsi2>
10015d0e:	1f43      	subs	r3, r0, #5
10015d10:	409e      	lsls	r6, r3
10015d12:	2300      	movs	r3, #0
10015d14:	3076      	adds	r0, #118	; 0x76
10015d16:	4247      	negs	r7, r0
10015d18:	469a      	mov	sl, r3
10015d1a:	4699      	mov	r9, r3
10015d1c:	e799      	b.n	10015c52 <__aeabi_fmul+0x2e>
10015d1e:	230c      	movs	r3, #12
10015d20:	469a      	mov	sl, r3
10015d22:	3b09      	subs	r3, #9
10015d24:	4699      	mov	r9, r3
10015d26:	e794      	b.n	10015c52 <__aeabi_fmul+0x2e>
10015d28:	2680      	movs	r6, #128	; 0x80
10015d2a:	2400      	movs	r4, #0
10015d2c:	03f6      	lsls	r6, r6, #15
10015d2e:	25ff      	movs	r5, #255	; 0xff
10015d30:	e7c1      	b.n	10015cb6 <__aeabi_fmul+0x92>
10015d32:	0035      	movs	r5, r6
10015d34:	4648      	mov	r0, r9
10015d36:	e7b2      	b.n	10015c9e <__aeabi_fmul+0x7a>
10015d38:	0035      	movs	r5, r6
10015d3a:	0022      	movs	r2, r4
10015d3c:	4648      	mov	r0, r9
10015d3e:	e7ae      	b.n	10015c9e <__aeabi_fmul+0x7a>
10015d40:	0429      	lsls	r1, r5, #16
10015d42:	0c09      	lsrs	r1, r1, #16
10015d44:	0008      	movs	r0, r1
10015d46:	0c37      	lsrs	r7, r6, #16
10015d48:	0436      	lsls	r6, r6, #16
10015d4a:	0c36      	lsrs	r6, r6, #16
10015d4c:	0c2c      	lsrs	r4, r5, #16
10015d4e:	4379      	muls	r1, r7
10015d50:	4370      	muls	r0, r6
10015d52:	4367      	muls	r7, r4
10015d54:	4374      	muls	r4, r6
10015d56:	0c06      	lsrs	r6, r0, #16
10015d58:	1864      	adds	r4, r4, r1
10015d5a:	1936      	adds	r6, r6, r4
10015d5c:	42b1      	cmp	r1, r6
10015d5e:	d903      	bls.n	10015d68 <__aeabi_fmul+0x144>
10015d60:	2180      	movs	r1, #128	; 0x80
10015d62:	0249      	lsls	r1, r1, #9
10015d64:	4688      	mov	r8, r1
10015d66:	4447      	add	r7, r8
10015d68:	0400      	lsls	r0, r0, #16
10015d6a:	0c00      	lsrs	r0, r0, #16
10015d6c:	0431      	lsls	r1, r6, #16
10015d6e:	1809      	adds	r1, r1, r0
10015d70:	018d      	lsls	r5, r1, #6
10015d72:	1e68      	subs	r0, r5, #1
10015d74:	4185      	sbcs	r5, r0
10015d76:	0e89      	lsrs	r1, r1, #26
10015d78:	4329      	orrs	r1, r5
10015d7a:	0c35      	lsrs	r5, r6, #16
10015d7c:	19ed      	adds	r5, r5, r7
10015d7e:	01ad      	lsls	r5, r5, #6
10015d80:	430d      	orrs	r5, r1
10015d82:	0129      	lsls	r1, r5, #4
10015d84:	d504      	bpl.n	10015d90 <__aeabi_fmul+0x16c>
10015d86:	2301      	movs	r3, #1
10015d88:	0869      	lsrs	r1, r5, #1
10015d8a:	401d      	ands	r5, r3
10015d8c:	4663      	mov	r3, ip
10015d8e:	430d      	orrs	r5, r1
10015d90:	0019      	movs	r1, r3
10015d92:	317f      	adds	r1, #127	; 0x7f
10015d94:	2900      	cmp	r1, #0
10015d96:	dd25      	ble.n	10015de4 <__aeabi_fmul+0x1c0>
10015d98:	0768      	lsls	r0, r5, #29
10015d9a:	d004      	beq.n	10015da6 <__aeabi_fmul+0x182>
10015d9c:	200f      	movs	r0, #15
10015d9e:	4028      	ands	r0, r5
10015da0:	2804      	cmp	r0, #4
10015da2:	d000      	beq.n	10015da6 <__aeabi_fmul+0x182>
10015da4:	3504      	adds	r5, #4
10015da6:	0128      	lsls	r0, r5, #4
10015da8:	d503      	bpl.n	10015db2 <__aeabi_fmul+0x18e>
10015daa:	4927      	ldr	r1, [pc, #156]	; (10015e48 <__aeabi_fmul+0x224>)
10015dac:	3380      	adds	r3, #128	; 0x80
10015dae:	400d      	ands	r5, r1
10015db0:	0019      	movs	r1, r3
10015db2:	29fe      	cmp	r1, #254	; 0xfe
10015db4:	dca3      	bgt.n	10015cfe <__aeabi_fmul+0xda>
10015db6:	2401      	movs	r4, #1
10015db8:	01ad      	lsls	r5, r5, #6
10015dba:	0a6e      	lsrs	r6, r5, #9
10015dbc:	4014      	ands	r4, r2
10015dbe:	b2cd      	uxtb	r5, r1
10015dc0:	e779      	b.n	10015cb6 <__aeabi_fmul+0x92>
10015dc2:	2080      	movs	r0, #128	; 0x80
10015dc4:	03c0      	lsls	r0, r0, #15
10015dc6:	4206      	tst	r6, r0
10015dc8:	d007      	beq.n	10015dda <__aeabi_fmul+0x1b6>
10015dca:	4205      	tst	r5, r0
10015dcc:	d105      	bne.n	10015dda <__aeabi_fmul+0x1b6>
10015dce:	4328      	orrs	r0, r5
10015dd0:	0246      	lsls	r6, r0, #9
10015dd2:	0a76      	lsrs	r6, r6, #9
10015dd4:	4644      	mov	r4, r8
10015dd6:	25ff      	movs	r5, #255	; 0xff
10015dd8:	e76d      	b.n	10015cb6 <__aeabi_fmul+0x92>
10015dda:	4306      	orrs	r6, r0
10015ddc:	0276      	lsls	r6, r6, #9
10015dde:	0a76      	lsrs	r6, r6, #9
10015de0:	25ff      	movs	r5, #255	; 0xff
10015de2:	e768      	b.n	10015cb6 <__aeabi_fmul+0x92>
10015de4:	2401      	movs	r4, #1
10015de6:	1a61      	subs	r1, r4, r1
10015de8:	291b      	cmp	r1, #27
10015dea:	dd05      	ble.n	10015df8 <__aeabi_fmul+0x1d4>
10015dec:	4014      	ands	r4, r2
10015dee:	2500      	movs	r5, #0
10015df0:	2600      	movs	r6, #0
10015df2:	e760      	b.n	10015cb6 <__aeabi_fmul+0x92>
10015df4:	4663      	mov	r3, ip
10015df6:	e7cb      	b.n	10015d90 <__aeabi_fmul+0x16c>
10015df8:	002e      	movs	r6, r5
10015dfa:	2320      	movs	r3, #32
10015dfc:	40ce      	lsrs	r6, r1
10015dfe:	1a59      	subs	r1, r3, r1
10015e00:	408d      	lsls	r5, r1
10015e02:	1e6b      	subs	r3, r5, #1
10015e04:	419d      	sbcs	r5, r3
10015e06:	432e      	orrs	r6, r5
10015e08:	0773      	lsls	r3, r6, #29
10015e0a:	d004      	beq.n	10015e16 <__aeabi_fmul+0x1f2>
10015e0c:	230f      	movs	r3, #15
10015e0e:	4033      	ands	r3, r6
10015e10:	2b04      	cmp	r3, #4
10015e12:	d000      	beq.n	10015e16 <__aeabi_fmul+0x1f2>
10015e14:	3604      	adds	r6, #4
10015e16:	0173      	lsls	r3, r6, #5
10015e18:	d504      	bpl.n	10015e24 <__aeabi_fmul+0x200>
10015e1a:	2401      	movs	r4, #1
10015e1c:	2501      	movs	r5, #1
10015e1e:	4014      	ands	r4, r2
10015e20:	2600      	movs	r6, #0
10015e22:	e748      	b.n	10015cb6 <__aeabi_fmul+0x92>
10015e24:	2401      	movs	r4, #1
10015e26:	01b6      	lsls	r6, r6, #6
10015e28:	0a76      	lsrs	r6, r6, #9
10015e2a:	4014      	ands	r4, r2
10015e2c:	2500      	movs	r5, #0
10015e2e:	e742      	b.n	10015cb6 <__aeabi_fmul+0x92>
10015e30:	2680      	movs	r6, #128	; 0x80
10015e32:	2401      	movs	r4, #1
10015e34:	03f6      	lsls	r6, r6, #15
10015e36:	432e      	orrs	r6, r5
10015e38:	0276      	lsls	r6, r6, #9
10015e3a:	0a76      	lsrs	r6, r6, #9
10015e3c:	4014      	ands	r4, r2
10015e3e:	25ff      	movs	r5, #255	; 0xff
10015e40:	e739      	b.n	10015cb6 <__aeabi_fmul+0x92>
10015e42:	46c0      	nop			; (mov r8, r8)
10015e44:	1001b44c 	.word	0x1001b44c
10015e48:	f7ffffff 	.word	0xf7ffffff

10015e4c <__aeabi_fsub>:
10015e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015e4e:	024a      	lsls	r2, r1, #9
10015e50:	004e      	lsls	r6, r1, #1
10015e52:	0243      	lsls	r3, r0, #9
10015e54:	0044      	lsls	r4, r0, #1
10015e56:	0e24      	lsrs	r4, r4, #24
10015e58:	0fc5      	lsrs	r5, r0, #31
10015e5a:	099b      	lsrs	r3, r3, #6
10015e5c:	0e36      	lsrs	r6, r6, #24
10015e5e:	0fc9      	lsrs	r1, r1, #31
10015e60:	0992      	lsrs	r2, r2, #6
10015e62:	2eff      	cmp	r6, #255	; 0xff
10015e64:	d100      	bne.n	10015e68 <__aeabi_fsub+0x1c>
10015e66:	e083      	b.n	10015f70 <__aeabi_fsub+0x124>
10015e68:	2001      	movs	r0, #1
10015e6a:	4041      	eors	r1, r0
10015e6c:	1ba0      	subs	r0, r4, r6
10015e6e:	42a9      	cmp	r1, r5
10015e70:	d05c      	beq.n	10015f2c <__aeabi_fsub+0xe0>
10015e72:	2800      	cmp	r0, #0
10015e74:	dc00      	bgt.n	10015e78 <__aeabi_fsub+0x2c>
10015e76:	e095      	b.n	10015fa4 <__aeabi_fsub+0x158>
10015e78:	2e00      	cmp	r6, #0
10015e7a:	d11c      	bne.n	10015eb6 <__aeabi_fsub+0x6a>
10015e7c:	2a00      	cmp	r2, #0
10015e7e:	d000      	beq.n	10015e82 <__aeabi_fsub+0x36>
10015e80:	e081      	b.n	10015f86 <__aeabi_fsub+0x13a>
10015e82:	075a      	lsls	r2, r3, #29
10015e84:	d004      	beq.n	10015e90 <__aeabi_fsub+0x44>
10015e86:	220f      	movs	r2, #15
10015e88:	401a      	ands	r2, r3
10015e8a:	2a04      	cmp	r2, #4
10015e8c:	d000      	beq.n	10015e90 <__aeabi_fsub+0x44>
10015e8e:	3304      	adds	r3, #4
10015e90:	015a      	lsls	r2, r3, #5
10015e92:	d53b      	bpl.n	10015f0c <__aeabi_fsub+0xc0>
10015e94:	3401      	adds	r4, #1
10015e96:	2cff      	cmp	r4, #255	; 0xff
10015e98:	d100      	bne.n	10015e9c <__aeabi_fsub+0x50>
10015e9a:	e091      	b.n	10015fc0 <__aeabi_fsub+0x174>
10015e9c:	2001      	movs	r0, #1
10015e9e:	019b      	lsls	r3, r3, #6
10015ea0:	0a5b      	lsrs	r3, r3, #9
10015ea2:	b2e4      	uxtb	r4, r4
10015ea4:	4005      	ands	r5, r0
10015ea6:	025b      	lsls	r3, r3, #9
10015ea8:	05e4      	lsls	r4, r4, #23
10015eaa:	0a5b      	lsrs	r3, r3, #9
10015eac:	07ed      	lsls	r5, r5, #31
10015eae:	4323      	orrs	r3, r4
10015eb0:	432b      	orrs	r3, r5
10015eb2:	0018      	movs	r0, r3
10015eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015eb6:	2cff      	cmp	r4, #255	; 0xff
10015eb8:	d0e3      	beq.n	10015e82 <__aeabi_fsub+0x36>
10015eba:	2180      	movs	r1, #128	; 0x80
10015ebc:	04c9      	lsls	r1, r1, #19
10015ebe:	430a      	orrs	r2, r1
10015ec0:	281b      	cmp	r0, #27
10015ec2:	dd00      	ble.n	10015ec6 <__aeabi_fsub+0x7a>
10015ec4:	e090      	b.n	10015fe8 <__aeabi_fsub+0x19c>
10015ec6:	0016      	movs	r6, r2
10015ec8:	2120      	movs	r1, #32
10015eca:	40c6      	lsrs	r6, r0
10015ecc:	1a08      	subs	r0, r1, r0
10015ece:	4082      	lsls	r2, r0
10015ed0:	1e51      	subs	r1, r2, #1
10015ed2:	418a      	sbcs	r2, r1
10015ed4:	4332      	orrs	r2, r6
10015ed6:	1a9b      	subs	r3, r3, r2
10015ed8:	015a      	lsls	r2, r3, #5
10015eda:	d515      	bpl.n	10015f08 <__aeabi_fsub+0xbc>
10015edc:	019b      	lsls	r3, r3, #6
10015ede:	099e      	lsrs	r6, r3, #6
10015ee0:	0030      	movs	r0, r6
10015ee2:	f002 f8a7 	bl	10018034 <__clzsi2>
10015ee6:	3805      	subs	r0, #5
10015ee8:	4086      	lsls	r6, r0
10015eea:	4284      	cmp	r4, r0
10015eec:	dc6c      	bgt.n	10015fc8 <__aeabi_fsub+0x17c>
10015eee:	1b04      	subs	r4, r0, r4
10015ef0:	0033      	movs	r3, r6
10015ef2:	2020      	movs	r0, #32
10015ef4:	3401      	adds	r4, #1
10015ef6:	40e3      	lsrs	r3, r4
10015ef8:	1b04      	subs	r4, r0, r4
10015efa:	40a6      	lsls	r6, r4
10015efc:	1e72      	subs	r2, r6, #1
10015efe:	4196      	sbcs	r6, r2
10015f00:	2400      	movs	r4, #0
10015f02:	4333      	orrs	r3, r6
10015f04:	e7bd      	b.n	10015e82 <__aeabi_fsub+0x36>
10015f06:	000d      	movs	r5, r1
10015f08:	075a      	lsls	r2, r3, #29
10015f0a:	d1bc      	bne.n	10015e86 <__aeabi_fsub+0x3a>
10015f0c:	08df      	lsrs	r7, r3, #3
10015f0e:	2301      	movs	r3, #1
10015f10:	401d      	ands	r5, r3
10015f12:	2cff      	cmp	r4, #255	; 0xff
10015f14:	d133      	bne.n	10015f7e <__aeabi_fsub+0x132>
10015f16:	2f00      	cmp	r7, #0
10015f18:	d100      	bne.n	10015f1c <__aeabi_fsub+0xd0>
10015f1a:	e090      	b.n	1001603e <__aeabi_fsub+0x1f2>
10015f1c:	2280      	movs	r2, #128	; 0x80
10015f1e:	03d2      	lsls	r2, r2, #15
10015f20:	0013      	movs	r3, r2
10015f22:	433b      	orrs	r3, r7
10015f24:	025b      	lsls	r3, r3, #9
10015f26:	0a5b      	lsrs	r3, r3, #9
10015f28:	24ff      	movs	r4, #255	; 0xff
10015f2a:	e7bc      	b.n	10015ea6 <__aeabi_fsub+0x5a>
10015f2c:	2800      	cmp	r0, #0
10015f2e:	dd4f      	ble.n	10015fd0 <__aeabi_fsub+0x184>
10015f30:	2e00      	cmp	r6, #0
10015f32:	d02e      	beq.n	10015f92 <__aeabi_fsub+0x146>
10015f34:	2cff      	cmp	r4, #255	; 0xff
10015f36:	d0a4      	beq.n	10015e82 <__aeabi_fsub+0x36>
10015f38:	2580      	movs	r5, #128	; 0x80
10015f3a:	04ed      	lsls	r5, r5, #19
10015f3c:	432a      	orrs	r2, r5
10015f3e:	281b      	cmp	r0, #27
10015f40:	dd00      	ble.n	10015f44 <__aeabi_fsub+0xf8>
10015f42:	e097      	b.n	10016074 <__aeabi_fsub+0x228>
10015f44:	0016      	movs	r6, r2
10015f46:	2520      	movs	r5, #32
10015f48:	40c6      	lsrs	r6, r0
10015f4a:	1a28      	subs	r0, r5, r0
10015f4c:	4082      	lsls	r2, r0
10015f4e:	1e50      	subs	r0, r2, #1
10015f50:	4182      	sbcs	r2, r0
10015f52:	4332      	orrs	r2, r6
10015f54:	189b      	adds	r3, r3, r2
10015f56:	015a      	lsls	r2, r3, #5
10015f58:	d5d5      	bpl.n	10015f06 <__aeabi_fsub+0xba>
10015f5a:	3401      	adds	r4, #1
10015f5c:	2cff      	cmp	r4, #255	; 0xff
10015f5e:	d06d      	beq.n	1001603c <__aeabi_fsub+0x1f0>
10015f60:	2201      	movs	r2, #1
10015f62:	487b      	ldr	r0, [pc, #492]	; (10016150 <__aeabi_fsub+0x304>)
10015f64:	401a      	ands	r2, r3
10015f66:	085b      	lsrs	r3, r3, #1
10015f68:	4003      	ands	r3, r0
10015f6a:	4313      	orrs	r3, r2
10015f6c:	000d      	movs	r5, r1
10015f6e:	e788      	b.n	10015e82 <__aeabi_fsub+0x36>
10015f70:	2a00      	cmp	r2, #0
10015f72:	d000      	beq.n	10015f76 <__aeabi_fsub+0x12a>
10015f74:	e77a      	b.n	10015e6c <__aeabi_fsub+0x20>
10015f76:	e777      	b.n	10015e68 <__aeabi_fsub+0x1c>
10015f78:	1e03      	subs	r3, r0, #0
10015f7a:	d1c5      	bne.n	10015f08 <__aeabi_fsub+0xbc>
10015f7c:	2500      	movs	r5, #0
10015f7e:	027b      	lsls	r3, r7, #9
10015f80:	0a5b      	lsrs	r3, r3, #9
10015f82:	b2e4      	uxtb	r4, r4
10015f84:	e78f      	b.n	10015ea6 <__aeabi_fsub+0x5a>
10015f86:	3801      	subs	r0, #1
10015f88:	2800      	cmp	r0, #0
10015f8a:	d0a4      	beq.n	10015ed6 <__aeabi_fsub+0x8a>
10015f8c:	2cff      	cmp	r4, #255	; 0xff
10015f8e:	d197      	bne.n	10015ec0 <__aeabi_fsub+0x74>
10015f90:	e777      	b.n	10015e82 <__aeabi_fsub+0x36>
10015f92:	2a00      	cmp	r2, #0
10015f94:	d100      	bne.n	10015f98 <__aeabi_fsub+0x14c>
10015f96:	e774      	b.n	10015e82 <__aeabi_fsub+0x36>
10015f98:	3801      	subs	r0, #1
10015f9a:	2800      	cmp	r0, #0
10015f9c:	d0da      	beq.n	10015f54 <__aeabi_fsub+0x108>
10015f9e:	2cff      	cmp	r4, #255	; 0xff
10015fa0:	d1cd      	bne.n	10015f3e <__aeabi_fsub+0xf2>
10015fa2:	e76e      	b.n	10015e82 <__aeabi_fsub+0x36>
10015fa4:	2800      	cmp	r0, #0
10015fa6:	d121      	bne.n	10015fec <__aeabi_fsub+0x1a0>
10015fa8:	1c60      	adds	r0, r4, #1
10015faa:	b2c0      	uxtb	r0, r0
10015fac:	2801      	cmp	r0, #1
10015fae:	dd58      	ble.n	10016062 <__aeabi_fsub+0x216>
10015fb0:	2780      	movs	r7, #128	; 0x80
10015fb2:	1a9e      	subs	r6, r3, r2
10015fb4:	04ff      	lsls	r7, r7, #19
10015fb6:	4037      	ands	r7, r6
10015fb8:	d02f      	beq.n	1001601a <__aeabi_fsub+0x1ce>
10015fba:	1ad6      	subs	r6, r2, r3
10015fbc:	000d      	movs	r5, r1
10015fbe:	e78f      	b.n	10015ee0 <__aeabi_fsub+0x94>
10015fc0:	2301      	movs	r3, #1
10015fc2:	401d      	ands	r5, r3
10015fc4:	2300      	movs	r3, #0
10015fc6:	e76e      	b.n	10015ea6 <__aeabi_fsub+0x5a>
10015fc8:	4b62      	ldr	r3, [pc, #392]	; (10016154 <__aeabi_fsub+0x308>)
10015fca:	1a24      	subs	r4, r4, r0
10015fcc:	4033      	ands	r3, r6
10015fce:	e758      	b.n	10015e82 <__aeabi_fsub+0x36>
10015fd0:	2800      	cmp	r0, #0
10015fd2:	d151      	bne.n	10016078 <__aeabi_fsub+0x22c>
10015fd4:	1c60      	adds	r0, r4, #1
10015fd6:	b2c6      	uxtb	r6, r0
10015fd8:	2e01      	cmp	r6, #1
10015fda:	dd33      	ble.n	10016044 <__aeabi_fsub+0x1f8>
10015fdc:	28ff      	cmp	r0, #255	; 0xff
10015fde:	d02d      	beq.n	1001603c <__aeabi_fsub+0x1f0>
10015fe0:	189b      	adds	r3, r3, r2
10015fe2:	085b      	lsrs	r3, r3, #1
10015fe4:	0004      	movs	r4, r0
10015fe6:	e74c      	b.n	10015e82 <__aeabi_fsub+0x36>
10015fe8:	2201      	movs	r2, #1
10015fea:	e774      	b.n	10015ed6 <__aeabi_fsub+0x8a>
10015fec:	2c00      	cmp	r4, #0
10015fee:	d01a      	beq.n	10016026 <__aeabi_fsub+0x1da>
10015ff0:	2eff      	cmp	r6, #255	; 0xff
10015ff2:	d01f      	beq.n	10016034 <__aeabi_fsub+0x1e8>
10015ff4:	2480      	movs	r4, #128	; 0x80
10015ff6:	04e4      	lsls	r4, r4, #19
10015ff8:	4240      	negs	r0, r0
10015ffa:	4323      	orrs	r3, r4
10015ffc:	281b      	cmp	r0, #27
10015ffe:	dd00      	ble.n	10016002 <__aeabi_fsub+0x1b6>
10016000:	e096      	b.n	10016130 <__aeabi_fsub+0x2e4>
10016002:	001d      	movs	r5, r3
10016004:	2420      	movs	r4, #32
10016006:	40c5      	lsrs	r5, r0
10016008:	1a20      	subs	r0, r4, r0
1001600a:	4083      	lsls	r3, r0
1001600c:	1e58      	subs	r0, r3, #1
1001600e:	4183      	sbcs	r3, r0
10016010:	432b      	orrs	r3, r5
10016012:	1ad3      	subs	r3, r2, r3
10016014:	0034      	movs	r4, r6
10016016:	000d      	movs	r5, r1
10016018:	e75e      	b.n	10015ed8 <__aeabi_fsub+0x8c>
1001601a:	2e00      	cmp	r6, #0
1001601c:	d000      	beq.n	10016020 <__aeabi_fsub+0x1d4>
1001601e:	e75f      	b.n	10015ee0 <__aeabi_fsub+0x94>
10016020:	2500      	movs	r5, #0
10016022:	2400      	movs	r4, #0
10016024:	e7ab      	b.n	10015f7e <__aeabi_fsub+0x132>
10016026:	2b00      	cmp	r3, #0
10016028:	d044      	beq.n	100160b4 <__aeabi_fsub+0x268>
1001602a:	43c0      	mvns	r0, r0
1001602c:	2800      	cmp	r0, #0
1001602e:	d0f0      	beq.n	10016012 <__aeabi_fsub+0x1c6>
10016030:	2eff      	cmp	r6, #255	; 0xff
10016032:	d1e3      	bne.n	10015ffc <__aeabi_fsub+0x1b0>
10016034:	0013      	movs	r3, r2
10016036:	24ff      	movs	r4, #255	; 0xff
10016038:	000d      	movs	r5, r1
1001603a:	e722      	b.n	10015e82 <__aeabi_fsub+0x36>
1001603c:	000d      	movs	r5, r1
1001603e:	24ff      	movs	r4, #255	; 0xff
10016040:	2300      	movs	r3, #0
10016042:	e730      	b.n	10015ea6 <__aeabi_fsub+0x5a>
10016044:	2c00      	cmp	r4, #0
10016046:	d15d      	bne.n	10016104 <__aeabi_fsub+0x2b8>
10016048:	2b00      	cmp	r3, #0
1001604a:	d07d      	beq.n	10016148 <__aeabi_fsub+0x2fc>
1001604c:	2a00      	cmp	r2, #0
1001604e:	d100      	bne.n	10016052 <__aeabi_fsub+0x206>
10016050:	e717      	b.n	10015e82 <__aeabi_fsub+0x36>
10016052:	189b      	adds	r3, r3, r2
10016054:	015a      	lsls	r2, r3, #5
10016056:	d400      	bmi.n	1001605a <__aeabi_fsub+0x20e>
10016058:	e756      	b.n	10015f08 <__aeabi_fsub+0xbc>
1001605a:	4a3e      	ldr	r2, [pc, #248]	; (10016154 <__aeabi_fsub+0x308>)
1001605c:	0004      	movs	r4, r0
1001605e:	4013      	ands	r3, r2
10016060:	e70f      	b.n	10015e82 <__aeabi_fsub+0x36>
10016062:	2c00      	cmp	r4, #0
10016064:	d11e      	bne.n	100160a4 <__aeabi_fsub+0x258>
10016066:	2b00      	cmp	r3, #0
10016068:	d12f      	bne.n	100160ca <__aeabi_fsub+0x27e>
1001606a:	2a00      	cmp	r2, #0
1001606c:	d065      	beq.n	1001613a <__aeabi_fsub+0x2ee>
1001606e:	0013      	movs	r3, r2
10016070:	000d      	movs	r5, r1
10016072:	e706      	b.n	10015e82 <__aeabi_fsub+0x36>
10016074:	2201      	movs	r2, #1
10016076:	e76d      	b.n	10015f54 <__aeabi_fsub+0x108>
10016078:	2c00      	cmp	r4, #0
1001607a:	d11f      	bne.n	100160bc <__aeabi_fsub+0x270>
1001607c:	2b00      	cmp	r3, #0
1001607e:	d059      	beq.n	10016134 <__aeabi_fsub+0x2e8>
10016080:	43c0      	mvns	r0, r0
10016082:	2800      	cmp	r0, #0
10016084:	d00b      	beq.n	1001609e <__aeabi_fsub+0x252>
10016086:	2eff      	cmp	r6, #255	; 0xff
10016088:	d04f      	beq.n	1001612a <__aeabi_fsub+0x2de>
1001608a:	281b      	cmp	r0, #27
1001608c:	dc5e      	bgt.n	1001614c <__aeabi_fsub+0x300>
1001608e:	001d      	movs	r5, r3
10016090:	2420      	movs	r4, #32
10016092:	40c5      	lsrs	r5, r0
10016094:	1a20      	subs	r0, r4, r0
10016096:	4083      	lsls	r3, r0
10016098:	1e58      	subs	r0, r3, #1
1001609a:	4183      	sbcs	r3, r0
1001609c:	432b      	orrs	r3, r5
1001609e:	189b      	adds	r3, r3, r2
100160a0:	0034      	movs	r4, r6
100160a2:	e758      	b.n	10015f56 <__aeabi_fsub+0x10a>
100160a4:	2b00      	cmp	r3, #0
100160a6:	d11c      	bne.n	100160e2 <__aeabi_fsub+0x296>
100160a8:	2a00      	cmp	r2, #0
100160aa:	d049      	beq.n	10016140 <__aeabi_fsub+0x2f4>
100160ac:	0013      	movs	r3, r2
100160ae:	000d      	movs	r5, r1
100160b0:	24ff      	movs	r4, #255	; 0xff
100160b2:	e6e6      	b.n	10015e82 <__aeabi_fsub+0x36>
100160b4:	0013      	movs	r3, r2
100160b6:	0034      	movs	r4, r6
100160b8:	000d      	movs	r5, r1
100160ba:	e6e2      	b.n	10015e82 <__aeabi_fsub+0x36>
100160bc:	2eff      	cmp	r6, #255	; 0xff
100160be:	d034      	beq.n	1001612a <__aeabi_fsub+0x2de>
100160c0:	2480      	movs	r4, #128	; 0x80
100160c2:	04e4      	lsls	r4, r4, #19
100160c4:	4240      	negs	r0, r0
100160c6:	4323      	orrs	r3, r4
100160c8:	e7df      	b.n	1001608a <__aeabi_fsub+0x23e>
100160ca:	2a00      	cmp	r2, #0
100160cc:	d100      	bne.n	100160d0 <__aeabi_fsub+0x284>
100160ce:	e6d8      	b.n	10015e82 <__aeabi_fsub+0x36>
100160d0:	2780      	movs	r7, #128	; 0x80
100160d2:	1a98      	subs	r0, r3, r2
100160d4:	04ff      	lsls	r7, r7, #19
100160d6:	4007      	ands	r7, r0
100160d8:	d100      	bne.n	100160dc <__aeabi_fsub+0x290>
100160da:	e74d      	b.n	10015f78 <__aeabi_fsub+0x12c>
100160dc:	1ad3      	subs	r3, r2, r3
100160de:	000d      	movs	r5, r1
100160e0:	e6cf      	b.n	10015e82 <__aeabi_fsub+0x36>
100160e2:	24ff      	movs	r4, #255	; 0xff
100160e4:	2a00      	cmp	r2, #0
100160e6:	d100      	bne.n	100160ea <__aeabi_fsub+0x29e>
100160e8:	e6cb      	b.n	10015e82 <__aeabi_fsub+0x36>
100160ea:	2080      	movs	r0, #128	; 0x80
100160ec:	08db      	lsrs	r3, r3, #3
100160ee:	03c0      	lsls	r0, r0, #15
100160f0:	4203      	tst	r3, r0
100160f2:	d004      	beq.n	100160fe <__aeabi_fsub+0x2b2>
100160f4:	08d2      	lsrs	r2, r2, #3
100160f6:	4202      	tst	r2, r0
100160f8:	d101      	bne.n	100160fe <__aeabi_fsub+0x2b2>
100160fa:	0013      	movs	r3, r2
100160fc:	000d      	movs	r5, r1
100160fe:	00db      	lsls	r3, r3, #3
10016100:	24ff      	movs	r4, #255	; 0xff
10016102:	e6be      	b.n	10015e82 <__aeabi_fsub+0x36>
10016104:	2b00      	cmp	r3, #0
10016106:	d010      	beq.n	1001612a <__aeabi_fsub+0x2de>
10016108:	24ff      	movs	r4, #255	; 0xff
1001610a:	2a00      	cmp	r2, #0
1001610c:	d100      	bne.n	10016110 <__aeabi_fsub+0x2c4>
1001610e:	e6b8      	b.n	10015e82 <__aeabi_fsub+0x36>
10016110:	2080      	movs	r0, #128	; 0x80
10016112:	08db      	lsrs	r3, r3, #3
10016114:	03c0      	lsls	r0, r0, #15
10016116:	4203      	tst	r3, r0
10016118:	d003      	beq.n	10016122 <__aeabi_fsub+0x2d6>
1001611a:	08d2      	lsrs	r2, r2, #3
1001611c:	4202      	tst	r2, r0
1001611e:	d100      	bne.n	10016122 <__aeabi_fsub+0x2d6>
10016120:	0013      	movs	r3, r2
10016122:	00db      	lsls	r3, r3, #3
10016124:	000d      	movs	r5, r1
10016126:	24ff      	movs	r4, #255	; 0xff
10016128:	e6ab      	b.n	10015e82 <__aeabi_fsub+0x36>
1001612a:	0013      	movs	r3, r2
1001612c:	24ff      	movs	r4, #255	; 0xff
1001612e:	e6a8      	b.n	10015e82 <__aeabi_fsub+0x36>
10016130:	2301      	movs	r3, #1
10016132:	e76e      	b.n	10016012 <__aeabi_fsub+0x1c6>
10016134:	0013      	movs	r3, r2
10016136:	0034      	movs	r4, r6
10016138:	e6a3      	b.n	10015e82 <__aeabi_fsub+0x36>
1001613a:	2700      	movs	r7, #0
1001613c:	2500      	movs	r5, #0
1001613e:	e71e      	b.n	10015f7e <__aeabi_fsub+0x132>
10016140:	2780      	movs	r7, #128	; 0x80
10016142:	2500      	movs	r5, #0
10016144:	03ff      	lsls	r7, r7, #15
10016146:	e6e9      	b.n	10015f1c <__aeabi_fsub+0xd0>
10016148:	0013      	movs	r3, r2
1001614a:	e69a      	b.n	10015e82 <__aeabi_fsub+0x36>
1001614c:	2301      	movs	r3, #1
1001614e:	e7a6      	b.n	1001609e <__aeabi_fsub+0x252>
10016150:	7dffffff 	.word	0x7dffffff
10016154:	fbffffff 	.word	0xfbffffff

10016158 <__aeabi_fcmpun>:
10016158:	0243      	lsls	r3, r0, #9
1001615a:	0a5a      	lsrs	r2, r3, #9
1001615c:	0040      	lsls	r0, r0, #1
1001615e:	024b      	lsls	r3, r1, #9
10016160:	0049      	lsls	r1, r1, #1
10016162:	0e00      	lsrs	r0, r0, #24
10016164:	0a5b      	lsrs	r3, r3, #9
10016166:	0e09      	lsrs	r1, r1, #24
10016168:	28ff      	cmp	r0, #255	; 0xff
1001616a:	d003      	beq.n	10016174 <__aeabi_fcmpun+0x1c>
1001616c:	2000      	movs	r0, #0
1001616e:	29ff      	cmp	r1, #255	; 0xff
10016170:	d006      	beq.n	10016180 <__aeabi_fcmpun+0x28>
10016172:	4770      	bx	lr
10016174:	38fe      	subs	r0, #254	; 0xfe
10016176:	2a00      	cmp	r2, #0
10016178:	d1fb      	bne.n	10016172 <__aeabi_fcmpun+0x1a>
1001617a:	2000      	movs	r0, #0
1001617c:	29ff      	cmp	r1, #255	; 0xff
1001617e:	d1f8      	bne.n	10016172 <__aeabi_fcmpun+0x1a>
10016180:	0018      	movs	r0, r3
10016182:	1e43      	subs	r3, r0, #1
10016184:	4198      	sbcs	r0, r3
10016186:	e7f4      	b.n	10016172 <__aeabi_fcmpun+0x1a>

10016188 <__aeabi_f2iz>:
10016188:	0243      	lsls	r3, r0, #9
1001618a:	0a59      	lsrs	r1, r3, #9
1001618c:	0043      	lsls	r3, r0, #1
1001618e:	0fc2      	lsrs	r2, r0, #31
10016190:	0e1b      	lsrs	r3, r3, #24
10016192:	2000      	movs	r0, #0
10016194:	2b7e      	cmp	r3, #126	; 0x7e
10016196:	dd0e      	ble.n	100161b6 <__aeabi_f2iz+0x2e>
10016198:	2b9d      	cmp	r3, #157	; 0x9d
1001619a:	dc0d      	bgt.n	100161b8 <__aeabi_f2iz+0x30>
1001619c:	2080      	movs	r0, #128	; 0x80
1001619e:	0400      	lsls	r0, r0, #16
100161a0:	4301      	orrs	r1, r0
100161a2:	2b95      	cmp	r3, #149	; 0x95
100161a4:	dc0b      	bgt.n	100161be <__aeabi_f2iz+0x36>
100161a6:	2096      	movs	r0, #150	; 0x96
100161a8:	1ac3      	subs	r3, r0, r3
100161aa:	40d9      	lsrs	r1, r3
100161ac:	000b      	movs	r3, r1
100161ae:	4258      	negs	r0, r3
100161b0:	2a00      	cmp	r2, #0
100161b2:	d100      	bne.n	100161b6 <__aeabi_f2iz+0x2e>
100161b4:	0018      	movs	r0, r3
100161b6:	4770      	bx	lr
100161b8:	4b03      	ldr	r3, [pc, #12]	; (100161c8 <__aeabi_f2iz+0x40>)
100161ba:	18d0      	adds	r0, r2, r3
100161bc:	e7fb      	b.n	100161b6 <__aeabi_f2iz+0x2e>
100161be:	3b96      	subs	r3, #150	; 0x96
100161c0:	4099      	lsls	r1, r3
100161c2:	000b      	movs	r3, r1
100161c4:	e7f3      	b.n	100161ae <__aeabi_f2iz+0x26>
100161c6:	46c0      	nop			; (mov r8, r8)
100161c8:	7fffffff 	.word	0x7fffffff

100161cc <__aeabi_i2f>:
100161cc:	b570      	push	{r4, r5, r6, lr}
100161ce:	2800      	cmp	r0, #0
100161d0:	d030      	beq.n	10016234 <__aeabi_i2f+0x68>
100161d2:	17c3      	asrs	r3, r0, #31
100161d4:	18c5      	adds	r5, r0, r3
100161d6:	405d      	eors	r5, r3
100161d8:	0fc4      	lsrs	r4, r0, #31
100161da:	0028      	movs	r0, r5
100161dc:	f001 ff2a 	bl	10018034 <__clzsi2>
100161e0:	239e      	movs	r3, #158	; 0x9e
100161e2:	1a1b      	subs	r3, r3, r0
100161e4:	2b96      	cmp	r3, #150	; 0x96
100161e6:	dc0d      	bgt.n	10016204 <__aeabi_i2f+0x38>
100161e8:	2296      	movs	r2, #150	; 0x96
100161ea:	1ad2      	subs	r2, r2, r3
100161ec:	4095      	lsls	r5, r2
100161ee:	026a      	lsls	r2, r5, #9
100161f0:	0a52      	lsrs	r2, r2, #9
100161f2:	b2d8      	uxtb	r0, r3
100161f4:	0252      	lsls	r2, r2, #9
100161f6:	05c0      	lsls	r0, r0, #23
100161f8:	0a52      	lsrs	r2, r2, #9
100161fa:	07e4      	lsls	r4, r4, #31
100161fc:	4302      	orrs	r2, r0
100161fe:	4322      	orrs	r2, r4
10016200:	0010      	movs	r0, r2
10016202:	bd70      	pop	{r4, r5, r6, pc}
10016204:	2b99      	cmp	r3, #153	; 0x99
10016206:	dc19      	bgt.n	1001623c <__aeabi_i2f+0x70>
10016208:	2299      	movs	r2, #153	; 0x99
1001620a:	1ad2      	subs	r2, r2, r3
1001620c:	4095      	lsls	r5, r2
1001620e:	4a12      	ldr	r2, [pc, #72]	; (10016258 <__aeabi_i2f+0x8c>)
10016210:	402a      	ands	r2, r5
10016212:	0769      	lsls	r1, r5, #29
10016214:	d004      	beq.n	10016220 <__aeabi_i2f+0x54>
10016216:	210f      	movs	r1, #15
10016218:	400d      	ands	r5, r1
1001621a:	2d04      	cmp	r5, #4
1001621c:	d000      	beq.n	10016220 <__aeabi_i2f+0x54>
1001621e:	3204      	adds	r2, #4
10016220:	0151      	lsls	r1, r2, #5
10016222:	d503      	bpl.n	1001622c <__aeabi_i2f+0x60>
10016224:	4b0c      	ldr	r3, [pc, #48]	; (10016258 <__aeabi_i2f+0x8c>)
10016226:	401a      	ands	r2, r3
10016228:	239f      	movs	r3, #159	; 0x9f
1001622a:	1a1b      	subs	r3, r3, r0
1001622c:	0192      	lsls	r2, r2, #6
1001622e:	0a52      	lsrs	r2, r2, #9
10016230:	b2d8      	uxtb	r0, r3
10016232:	e7df      	b.n	100161f4 <__aeabi_i2f+0x28>
10016234:	2400      	movs	r4, #0
10016236:	2000      	movs	r0, #0
10016238:	2200      	movs	r2, #0
1001623a:	e7db      	b.n	100161f4 <__aeabi_i2f+0x28>
1001623c:	2205      	movs	r2, #5
1001623e:	002e      	movs	r6, r5
10016240:	1a12      	subs	r2, r2, r0
10016242:	21b9      	movs	r1, #185	; 0xb9
10016244:	40d6      	lsrs	r6, r2
10016246:	002a      	movs	r2, r5
10016248:	1ac9      	subs	r1, r1, r3
1001624a:	408a      	lsls	r2, r1
1001624c:	1e55      	subs	r5, r2, #1
1001624e:	41aa      	sbcs	r2, r5
10016250:	0035      	movs	r5, r6
10016252:	4315      	orrs	r5, r2
10016254:	e7db      	b.n	1001620e <__aeabi_i2f+0x42>
10016256:	46c0      	nop			; (mov r8, r8)
10016258:	fbffffff 	.word	0xfbffffff

1001625c <__aeabi_ui2f>:
1001625c:	b570      	push	{r4, r5, r6, lr}
1001625e:	1e04      	subs	r4, r0, #0
10016260:	d028      	beq.n	100162b4 <__aeabi_ui2f+0x58>
10016262:	f001 fee7 	bl	10018034 <__clzsi2>
10016266:	239e      	movs	r3, #158	; 0x9e
10016268:	1a1b      	subs	r3, r3, r0
1001626a:	2b96      	cmp	r3, #150	; 0x96
1001626c:	dc0a      	bgt.n	10016284 <__aeabi_ui2f+0x28>
1001626e:	2296      	movs	r2, #150	; 0x96
10016270:	1ad2      	subs	r2, r2, r3
10016272:	4094      	lsls	r4, r2
10016274:	0262      	lsls	r2, r4, #9
10016276:	0a52      	lsrs	r2, r2, #9
10016278:	b2d8      	uxtb	r0, r3
1001627a:	0252      	lsls	r2, r2, #9
1001627c:	0a52      	lsrs	r2, r2, #9
1001627e:	05c0      	lsls	r0, r0, #23
10016280:	4310      	orrs	r0, r2
10016282:	bd70      	pop	{r4, r5, r6, pc}
10016284:	2b99      	cmp	r3, #153	; 0x99
10016286:	dc18      	bgt.n	100162ba <__aeabi_ui2f+0x5e>
10016288:	2299      	movs	r2, #153	; 0x99
1001628a:	1ad2      	subs	r2, r2, r3
1001628c:	4094      	lsls	r4, r2
1001628e:	4a11      	ldr	r2, [pc, #68]	; (100162d4 <__aeabi_ui2f+0x78>)
10016290:	4022      	ands	r2, r4
10016292:	0761      	lsls	r1, r4, #29
10016294:	d004      	beq.n	100162a0 <__aeabi_ui2f+0x44>
10016296:	210f      	movs	r1, #15
10016298:	400c      	ands	r4, r1
1001629a:	2c04      	cmp	r4, #4
1001629c:	d000      	beq.n	100162a0 <__aeabi_ui2f+0x44>
1001629e:	3204      	adds	r2, #4
100162a0:	0151      	lsls	r1, r2, #5
100162a2:	d503      	bpl.n	100162ac <__aeabi_ui2f+0x50>
100162a4:	4b0b      	ldr	r3, [pc, #44]	; (100162d4 <__aeabi_ui2f+0x78>)
100162a6:	401a      	ands	r2, r3
100162a8:	239f      	movs	r3, #159	; 0x9f
100162aa:	1a1b      	subs	r3, r3, r0
100162ac:	0192      	lsls	r2, r2, #6
100162ae:	0a52      	lsrs	r2, r2, #9
100162b0:	b2d8      	uxtb	r0, r3
100162b2:	e7e2      	b.n	1001627a <__aeabi_ui2f+0x1e>
100162b4:	2000      	movs	r0, #0
100162b6:	2200      	movs	r2, #0
100162b8:	e7df      	b.n	1001627a <__aeabi_ui2f+0x1e>
100162ba:	2205      	movs	r2, #5
100162bc:	0025      	movs	r5, r4
100162be:	1a12      	subs	r2, r2, r0
100162c0:	21b9      	movs	r1, #185	; 0xb9
100162c2:	40d5      	lsrs	r5, r2
100162c4:	0022      	movs	r2, r4
100162c6:	1ac9      	subs	r1, r1, r3
100162c8:	408a      	lsls	r2, r1
100162ca:	1e54      	subs	r4, r2, #1
100162cc:	41a2      	sbcs	r2, r4
100162ce:	002c      	movs	r4, r5
100162d0:	4314      	orrs	r4, r2
100162d2:	e7dc      	b.n	1001628e <__aeabi_ui2f+0x32>
100162d4:	fbffffff 	.word	0xfbffffff

100162d8 <__aeabi_dadd>:
100162d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100162da:	4656      	mov	r6, sl
100162dc:	465f      	mov	r7, fp
100162de:	464d      	mov	r5, r9
100162e0:	4644      	mov	r4, r8
100162e2:	b4f0      	push	{r4, r5, r6, r7}
100162e4:	000f      	movs	r7, r1
100162e6:	0ffd      	lsrs	r5, r7, #31
100162e8:	46aa      	mov	sl, r5
100162ea:	0309      	lsls	r1, r1, #12
100162ec:	007c      	lsls	r4, r7, #1
100162ee:	002e      	movs	r6, r5
100162f0:	005f      	lsls	r7, r3, #1
100162f2:	0f45      	lsrs	r5, r0, #29
100162f4:	0a49      	lsrs	r1, r1, #9
100162f6:	0d7f      	lsrs	r7, r7, #21
100162f8:	4329      	orrs	r1, r5
100162fa:	00c5      	lsls	r5, r0, #3
100162fc:	0318      	lsls	r0, r3, #12
100162fe:	46bc      	mov	ip, r7
10016300:	0a40      	lsrs	r0, r0, #9
10016302:	0f57      	lsrs	r7, r2, #29
10016304:	0d64      	lsrs	r4, r4, #21
10016306:	0fdb      	lsrs	r3, r3, #31
10016308:	4338      	orrs	r0, r7
1001630a:	00d2      	lsls	r2, r2, #3
1001630c:	459a      	cmp	sl, r3
1001630e:	d100      	bne.n	10016312 <__aeabi_dadd+0x3a>
10016310:	e0aa      	b.n	10016468 <__aeabi_dadd+0x190>
10016312:	4666      	mov	r6, ip
10016314:	1ba6      	subs	r6, r4, r6
10016316:	2e00      	cmp	r6, #0
10016318:	dc00      	bgt.n	1001631c <__aeabi_dadd+0x44>
1001631a:	e0ff      	b.n	1001651c <__aeabi_dadd+0x244>
1001631c:	4663      	mov	r3, ip
1001631e:	2b00      	cmp	r3, #0
10016320:	d139      	bne.n	10016396 <__aeabi_dadd+0xbe>
10016322:	0003      	movs	r3, r0
10016324:	4313      	orrs	r3, r2
10016326:	d000      	beq.n	1001632a <__aeabi_dadd+0x52>
10016328:	e0d9      	b.n	100164de <__aeabi_dadd+0x206>
1001632a:	076b      	lsls	r3, r5, #29
1001632c:	d009      	beq.n	10016342 <__aeabi_dadd+0x6a>
1001632e:	230f      	movs	r3, #15
10016330:	402b      	ands	r3, r5
10016332:	2b04      	cmp	r3, #4
10016334:	d005      	beq.n	10016342 <__aeabi_dadd+0x6a>
10016336:	1d2b      	adds	r3, r5, #4
10016338:	42ab      	cmp	r3, r5
1001633a:	41ad      	sbcs	r5, r5
1001633c:	426d      	negs	r5, r5
1001633e:	1949      	adds	r1, r1, r5
10016340:	001d      	movs	r5, r3
10016342:	020b      	lsls	r3, r1, #8
10016344:	d400      	bmi.n	10016348 <__aeabi_dadd+0x70>
10016346:	e082      	b.n	1001644e <__aeabi_dadd+0x176>
10016348:	4bca      	ldr	r3, [pc, #808]	; (10016674 <__aeabi_dadd+0x39c>)
1001634a:	3401      	adds	r4, #1
1001634c:	429c      	cmp	r4, r3
1001634e:	d100      	bne.n	10016352 <__aeabi_dadd+0x7a>
10016350:	e0fe      	b.n	10016550 <__aeabi_dadd+0x278>
10016352:	000a      	movs	r2, r1
10016354:	4656      	mov	r6, sl
10016356:	4bc8      	ldr	r3, [pc, #800]	; (10016678 <__aeabi_dadd+0x3a0>)
10016358:	08ed      	lsrs	r5, r5, #3
1001635a:	401a      	ands	r2, r3
1001635c:	0750      	lsls	r0, r2, #29
1001635e:	0564      	lsls	r4, r4, #21
10016360:	0252      	lsls	r2, r2, #9
10016362:	4305      	orrs	r5, r0
10016364:	0b12      	lsrs	r2, r2, #12
10016366:	0d64      	lsrs	r4, r4, #21
10016368:	2100      	movs	r1, #0
1001636a:	0312      	lsls	r2, r2, #12
1001636c:	0d0b      	lsrs	r3, r1, #20
1001636e:	051b      	lsls	r3, r3, #20
10016370:	0564      	lsls	r4, r4, #21
10016372:	0b12      	lsrs	r2, r2, #12
10016374:	431a      	orrs	r2, r3
10016376:	0863      	lsrs	r3, r4, #1
10016378:	4cc0      	ldr	r4, [pc, #768]	; (1001667c <__aeabi_dadd+0x3a4>)
1001637a:	07f6      	lsls	r6, r6, #31
1001637c:	4014      	ands	r4, r2
1001637e:	431c      	orrs	r4, r3
10016380:	0064      	lsls	r4, r4, #1
10016382:	0864      	lsrs	r4, r4, #1
10016384:	4334      	orrs	r4, r6
10016386:	0028      	movs	r0, r5
10016388:	0021      	movs	r1, r4
1001638a:	bc3c      	pop	{r2, r3, r4, r5}
1001638c:	4690      	mov	r8, r2
1001638e:	4699      	mov	r9, r3
10016390:	46a2      	mov	sl, r4
10016392:	46ab      	mov	fp, r5
10016394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10016396:	4bb7      	ldr	r3, [pc, #732]	; (10016674 <__aeabi_dadd+0x39c>)
10016398:	429c      	cmp	r4, r3
1001639a:	d0c6      	beq.n	1001632a <__aeabi_dadd+0x52>
1001639c:	2380      	movs	r3, #128	; 0x80
1001639e:	041b      	lsls	r3, r3, #16
100163a0:	4318      	orrs	r0, r3
100163a2:	2e38      	cmp	r6, #56	; 0x38
100163a4:	dd00      	ble.n	100163a8 <__aeabi_dadd+0xd0>
100163a6:	e0eb      	b.n	10016580 <__aeabi_dadd+0x2a8>
100163a8:	2e1f      	cmp	r6, #31
100163aa:	dd00      	ble.n	100163ae <__aeabi_dadd+0xd6>
100163ac:	e11e      	b.n	100165ec <__aeabi_dadd+0x314>
100163ae:	2320      	movs	r3, #32
100163b0:	1b9b      	subs	r3, r3, r6
100163b2:	469c      	mov	ip, r3
100163b4:	0003      	movs	r3, r0
100163b6:	4667      	mov	r7, ip
100163b8:	40bb      	lsls	r3, r7
100163ba:	4698      	mov	r8, r3
100163bc:	0013      	movs	r3, r2
100163be:	4647      	mov	r7, r8
100163c0:	40f3      	lsrs	r3, r6
100163c2:	433b      	orrs	r3, r7
100163c4:	4667      	mov	r7, ip
100163c6:	40ba      	lsls	r2, r7
100163c8:	1e57      	subs	r7, r2, #1
100163ca:	41ba      	sbcs	r2, r7
100163cc:	4313      	orrs	r3, r2
100163ce:	0002      	movs	r2, r0
100163d0:	40f2      	lsrs	r2, r6
100163d2:	1aeb      	subs	r3, r5, r3
100163d4:	429d      	cmp	r5, r3
100163d6:	41b6      	sbcs	r6, r6
100163d8:	001d      	movs	r5, r3
100163da:	1a8a      	subs	r2, r1, r2
100163dc:	4276      	negs	r6, r6
100163de:	1b91      	subs	r1, r2, r6
100163e0:	020b      	lsls	r3, r1, #8
100163e2:	d531      	bpl.n	10016448 <__aeabi_dadd+0x170>
100163e4:	024a      	lsls	r2, r1, #9
100163e6:	0a56      	lsrs	r6, r2, #9
100163e8:	2e00      	cmp	r6, #0
100163ea:	d100      	bne.n	100163ee <__aeabi_dadd+0x116>
100163ec:	e0b4      	b.n	10016558 <__aeabi_dadd+0x280>
100163ee:	0030      	movs	r0, r6
100163f0:	f001 fe20 	bl	10018034 <__clzsi2>
100163f4:	0003      	movs	r3, r0
100163f6:	3b08      	subs	r3, #8
100163f8:	2b1f      	cmp	r3, #31
100163fa:	dd00      	ble.n	100163fe <__aeabi_dadd+0x126>
100163fc:	e0b5      	b.n	1001656a <__aeabi_dadd+0x292>
100163fe:	2220      	movs	r2, #32
10016400:	0029      	movs	r1, r5
10016402:	1ad2      	subs	r2, r2, r3
10016404:	40d1      	lsrs	r1, r2
10016406:	409e      	lsls	r6, r3
10016408:	000a      	movs	r2, r1
1001640a:	409d      	lsls	r5, r3
1001640c:	4332      	orrs	r2, r6
1001640e:	429c      	cmp	r4, r3
10016410:	dd00      	ble.n	10016414 <__aeabi_dadd+0x13c>
10016412:	e0b1      	b.n	10016578 <__aeabi_dadd+0x2a0>
10016414:	1b1c      	subs	r4, r3, r4
10016416:	1c63      	adds	r3, r4, #1
10016418:	2b1f      	cmp	r3, #31
1001641a:	dd00      	ble.n	1001641e <__aeabi_dadd+0x146>
1001641c:	e0d5      	b.n	100165ca <__aeabi_dadd+0x2f2>
1001641e:	2120      	movs	r1, #32
10016420:	0014      	movs	r4, r2
10016422:	0028      	movs	r0, r5
10016424:	1ac9      	subs	r1, r1, r3
10016426:	408c      	lsls	r4, r1
10016428:	40d8      	lsrs	r0, r3
1001642a:	408d      	lsls	r5, r1
1001642c:	4304      	orrs	r4, r0
1001642e:	40da      	lsrs	r2, r3
10016430:	1e68      	subs	r0, r5, #1
10016432:	4185      	sbcs	r5, r0
10016434:	0011      	movs	r1, r2
10016436:	4325      	orrs	r5, r4
10016438:	2400      	movs	r4, #0
1001643a:	e776      	b.n	1001632a <__aeabi_dadd+0x52>
1001643c:	4641      	mov	r1, r8
1001643e:	4331      	orrs	r1, r6
10016440:	d100      	bne.n	10016444 <__aeabi_dadd+0x16c>
10016442:	e234      	b.n	100168ae <__aeabi_dadd+0x5d6>
10016444:	0031      	movs	r1, r6
10016446:	4645      	mov	r5, r8
10016448:	076b      	lsls	r3, r5, #29
1001644a:	d000      	beq.n	1001644e <__aeabi_dadd+0x176>
1001644c:	e76f      	b.n	1001632e <__aeabi_dadd+0x56>
1001644e:	4656      	mov	r6, sl
10016450:	0748      	lsls	r0, r1, #29
10016452:	08ed      	lsrs	r5, r5, #3
10016454:	08c9      	lsrs	r1, r1, #3
10016456:	4305      	orrs	r5, r0
10016458:	4b86      	ldr	r3, [pc, #536]	; (10016674 <__aeabi_dadd+0x39c>)
1001645a:	429c      	cmp	r4, r3
1001645c:	d035      	beq.n	100164ca <__aeabi_dadd+0x1f2>
1001645e:	030a      	lsls	r2, r1, #12
10016460:	0564      	lsls	r4, r4, #21
10016462:	0b12      	lsrs	r2, r2, #12
10016464:	0d64      	lsrs	r4, r4, #21
10016466:	e77f      	b.n	10016368 <__aeabi_dadd+0x90>
10016468:	4663      	mov	r3, ip
1001646a:	1ae3      	subs	r3, r4, r3
1001646c:	469b      	mov	fp, r3
1001646e:	2b00      	cmp	r3, #0
10016470:	dc00      	bgt.n	10016474 <__aeabi_dadd+0x19c>
10016472:	e08b      	b.n	1001658c <__aeabi_dadd+0x2b4>
10016474:	4667      	mov	r7, ip
10016476:	2f00      	cmp	r7, #0
10016478:	d03c      	beq.n	100164f4 <__aeabi_dadd+0x21c>
1001647a:	4f7e      	ldr	r7, [pc, #504]	; (10016674 <__aeabi_dadd+0x39c>)
1001647c:	42bc      	cmp	r4, r7
1001647e:	d100      	bne.n	10016482 <__aeabi_dadd+0x1aa>
10016480:	e753      	b.n	1001632a <__aeabi_dadd+0x52>
10016482:	2780      	movs	r7, #128	; 0x80
10016484:	043f      	lsls	r7, r7, #16
10016486:	4338      	orrs	r0, r7
10016488:	465b      	mov	r3, fp
1001648a:	2b38      	cmp	r3, #56	; 0x38
1001648c:	dc00      	bgt.n	10016490 <__aeabi_dadd+0x1b8>
1001648e:	e0f7      	b.n	10016680 <__aeabi_dadd+0x3a8>
10016490:	4302      	orrs	r2, r0
10016492:	1e50      	subs	r0, r2, #1
10016494:	4182      	sbcs	r2, r0
10016496:	2000      	movs	r0, #0
10016498:	b2d2      	uxtb	r2, r2
1001649a:	1953      	adds	r3, r2, r5
1001649c:	1842      	adds	r2, r0, r1
1001649e:	42ab      	cmp	r3, r5
100164a0:	4189      	sbcs	r1, r1
100164a2:	001d      	movs	r5, r3
100164a4:	4249      	negs	r1, r1
100164a6:	1889      	adds	r1, r1, r2
100164a8:	020b      	lsls	r3, r1, #8
100164aa:	d5cd      	bpl.n	10016448 <__aeabi_dadd+0x170>
100164ac:	4b71      	ldr	r3, [pc, #452]	; (10016674 <__aeabi_dadd+0x39c>)
100164ae:	3401      	adds	r4, #1
100164b0:	429c      	cmp	r4, r3
100164b2:	d100      	bne.n	100164b6 <__aeabi_dadd+0x1de>
100164b4:	e13d      	b.n	10016732 <__aeabi_dadd+0x45a>
100164b6:	2001      	movs	r0, #1
100164b8:	4a6f      	ldr	r2, [pc, #444]	; (10016678 <__aeabi_dadd+0x3a0>)
100164ba:	086b      	lsrs	r3, r5, #1
100164bc:	400a      	ands	r2, r1
100164be:	4028      	ands	r0, r5
100164c0:	4318      	orrs	r0, r3
100164c2:	07d5      	lsls	r5, r2, #31
100164c4:	4305      	orrs	r5, r0
100164c6:	0851      	lsrs	r1, r2, #1
100164c8:	e72f      	b.n	1001632a <__aeabi_dadd+0x52>
100164ca:	002b      	movs	r3, r5
100164cc:	430b      	orrs	r3, r1
100164ce:	d100      	bne.n	100164d2 <__aeabi_dadd+0x1fa>
100164d0:	e1cb      	b.n	1001686a <__aeabi_dadd+0x592>
100164d2:	2380      	movs	r3, #128	; 0x80
100164d4:	031b      	lsls	r3, r3, #12
100164d6:	430b      	orrs	r3, r1
100164d8:	031a      	lsls	r2, r3, #12
100164da:	0b12      	lsrs	r2, r2, #12
100164dc:	e744      	b.n	10016368 <__aeabi_dadd+0x90>
100164de:	3e01      	subs	r6, #1
100164e0:	2e00      	cmp	r6, #0
100164e2:	d16d      	bne.n	100165c0 <__aeabi_dadd+0x2e8>
100164e4:	1aae      	subs	r6, r5, r2
100164e6:	42b5      	cmp	r5, r6
100164e8:	419b      	sbcs	r3, r3
100164ea:	1a09      	subs	r1, r1, r0
100164ec:	425b      	negs	r3, r3
100164ee:	1ac9      	subs	r1, r1, r3
100164f0:	0035      	movs	r5, r6
100164f2:	e775      	b.n	100163e0 <__aeabi_dadd+0x108>
100164f4:	0007      	movs	r7, r0
100164f6:	4317      	orrs	r7, r2
100164f8:	d100      	bne.n	100164fc <__aeabi_dadd+0x224>
100164fa:	e716      	b.n	1001632a <__aeabi_dadd+0x52>
100164fc:	2301      	movs	r3, #1
100164fe:	425b      	negs	r3, r3
10016500:	469c      	mov	ip, r3
10016502:	44e3      	add	fp, ip
10016504:	465b      	mov	r3, fp
10016506:	2b00      	cmp	r3, #0
10016508:	d000      	beq.n	1001650c <__aeabi_dadd+0x234>
1001650a:	e0e0      	b.n	100166ce <__aeabi_dadd+0x3f6>
1001650c:	18aa      	adds	r2, r5, r2
1001650e:	42aa      	cmp	r2, r5
10016510:	419b      	sbcs	r3, r3
10016512:	1809      	adds	r1, r1, r0
10016514:	425b      	negs	r3, r3
10016516:	1859      	adds	r1, r3, r1
10016518:	0015      	movs	r5, r2
1001651a:	e7c5      	b.n	100164a8 <__aeabi_dadd+0x1d0>
1001651c:	2e00      	cmp	r6, #0
1001651e:	d175      	bne.n	1001660c <__aeabi_dadd+0x334>
10016520:	1c66      	adds	r6, r4, #1
10016522:	0576      	lsls	r6, r6, #21
10016524:	0d76      	lsrs	r6, r6, #21
10016526:	2e01      	cmp	r6, #1
10016528:	dc00      	bgt.n	1001652c <__aeabi_dadd+0x254>
1001652a:	e0f3      	b.n	10016714 <__aeabi_dadd+0x43c>
1001652c:	1aae      	subs	r6, r5, r2
1001652e:	46b0      	mov	r8, r6
10016530:	4545      	cmp	r5, r8
10016532:	41bf      	sbcs	r7, r7
10016534:	1a0e      	subs	r6, r1, r0
10016536:	427f      	negs	r7, r7
10016538:	1bf6      	subs	r6, r6, r7
1001653a:	0237      	lsls	r7, r6, #8
1001653c:	d400      	bmi.n	10016540 <__aeabi_dadd+0x268>
1001653e:	e08f      	b.n	10016660 <__aeabi_dadd+0x388>
10016540:	1b55      	subs	r5, r2, r5
10016542:	42aa      	cmp	r2, r5
10016544:	41b6      	sbcs	r6, r6
10016546:	1a41      	subs	r1, r0, r1
10016548:	4276      	negs	r6, r6
1001654a:	1b8e      	subs	r6, r1, r6
1001654c:	469a      	mov	sl, r3
1001654e:	e74b      	b.n	100163e8 <__aeabi_dadd+0x110>
10016550:	4656      	mov	r6, sl
10016552:	2200      	movs	r2, #0
10016554:	2500      	movs	r5, #0
10016556:	e707      	b.n	10016368 <__aeabi_dadd+0x90>
10016558:	0028      	movs	r0, r5
1001655a:	f001 fd6b 	bl	10018034 <__clzsi2>
1001655e:	3020      	adds	r0, #32
10016560:	0003      	movs	r3, r0
10016562:	3b08      	subs	r3, #8
10016564:	2b1f      	cmp	r3, #31
10016566:	dc00      	bgt.n	1001656a <__aeabi_dadd+0x292>
10016568:	e749      	b.n	100163fe <__aeabi_dadd+0x126>
1001656a:	002a      	movs	r2, r5
1001656c:	3828      	subs	r0, #40	; 0x28
1001656e:	4082      	lsls	r2, r0
10016570:	2500      	movs	r5, #0
10016572:	429c      	cmp	r4, r3
10016574:	dc00      	bgt.n	10016578 <__aeabi_dadd+0x2a0>
10016576:	e74d      	b.n	10016414 <__aeabi_dadd+0x13c>
10016578:	493f      	ldr	r1, [pc, #252]	; (10016678 <__aeabi_dadd+0x3a0>)
1001657a:	1ae4      	subs	r4, r4, r3
1001657c:	4011      	ands	r1, r2
1001657e:	e6d4      	b.n	1001632a <__aeabi_dadd+0x52>
10016580:	4302      	orrs	r2, r0
10016582:	1e50      	subs	r0, r2, #1
10016584:	4182      	sbcs	r2, r0
10016586:	b2d3      	uxtb	r3, r2
10016588:	2200      	movs	r2, #0
1001658a:	e722      	b.n	100163d2 <__aeabi_dadd+0xfa>
1001658c:	2b00      	cmp	r3, #0
1001658e:	d000      	beq.n	10016592 <__aeabi_dadd+0x2ba>
10016590:	e0f3      	b.n	1001677a <__aeabi_dadd+0x4a2>
10016592:	1c63      	adds	r3, r4, #1
10016594:	469c      	mov	ip, r3
10016596:	055b      	lsls	r3, r3, #21
10016598:	0d5b      	lsrs	r3, r3, #21
1001659a:	2b01      	cmp	r3, #1
1001659c:	dc00      	bgt.n	100165a0 <__aeabi_dadd+0x2c8>
1001659e:	e09f      	b.n	100166e0 <__aeabi_dadd+0x408>
100165a0:	4b34      	ldr	r3, [pc, #208]	; (10016674 <__aeabi_dadd+0x39c>)
100165a2:	459c      	cmp	ip, r3
100165a4:	d100      	bne.n	100165a8 <__aeabi_dadd+0x2d0>
100165a6:	e0c3      	b.n	10016730 <__aeabi_dadd+0x458>
100165a8:	18aa      	adds	r2, r5, r2
100165aa:	1809      	adds	r1, r1, r0
100165ac:	42aa      	cmp	r2, r5
100165ae:	4180      	sbcs	r0, r0
100165b0:	4240      	negs	r0, r0
100165b2:	1841      	adds	r1, r0, r1
100165b4:	07cd      	lsls	r5, r1, #31
100165b6:	0852      	lsrs	r2, r2, #1
100165b8:	4315      	orrs	r5, r2
100165ba:	0849      	lsrs	r1, r1, #1
100165bc:	4664      	mov	r4, ip
100165be:	e6b4      	b.n	1001632a <__aeabi_dadd+0x52>
100165c0:	4b2c      	ldr	r3, [pc, #176]	; (10016674 <__aeabi_dadd+0x39c>)
100165c2:	429c      	cmp	r4, r3
100165c4:	d000      	beq.n	100165c8 <__aeabi_dadd+0x2f0>
100165c6:	e6ec      	b.n	100163a2 <__aeabi_dadd+0xca>
100165c8:	e6af      	b.n	1001632a <__aeabi_dadd+0x52>
100165ca:	0011      	movs	r1, r2
100165cc:	3c1f      	subs	r4, #31
100165ce:	40e1      	lsrs	r1, r4
100165d0:	000c      	movs	r4, r1
100165d2:	2b20      	cmp	r3, #32
100165d4:	d100      	bne.n	100165d8 <__aeabi_dadd+0x300>
100165d6:	e07f      	b.n	100166d8 <__aeabi_dadd+0x400>
100165d8:	2140      	movs	r1, #64	; 0x40
100165da:	1acb      	subs	r3, r1, r3
100165dc:	409a      	lsls	r2, r3
100165de:	4315      	orrs	r5, r2
100165e0:	1e6a      	subs	r2, r5, #1
100165e2:	4195      	sbcs	r5, r2
100165e4:	2100      	movs	r1, #0
100165e6:	4325      	orrs	r5, r4
100165e8:	2400      	movs	r4, #0
100165ea:	e72d      	b.n	10016448 <__aeabi_dadd+0x170>
100165ec:	0033      	movs	r3, r6
100165ee:	0007      	movs	r7, r0
100165f0:	3b20      	subs	r3, #32
100165f2:	40df      	lsrs	r7, r3
100165f4:	003b      	movs	r3, r7
100165f6:	2e20      	cmp	r6, #32
100165f8:	d070      	beq.n	100166dc <__aeabi_dadd+0x404>
100165fa:	2740      	movs	r7, #64	; 0x40
100165fc:	1bbe      	subs	r6, r7, r6
100165fe:	40b0      	lsls	r0, r6
10016600:	4302      	orrs	r2, r0
10016602:	1e50      	subs	r0, r2, #1
10016604:	4182      	sbcs	r2, r0
10016606:	4313      	orrs	r3, r2
10016608:	2200      	movs	r2, #0
1001660a:	e6e2      	b.n	100163d2 <__aeabi_dadd+0xfa>
1001660c:	2c00      	cmp	r4, #0
1001660e:	d04f      	beq.n	100166b0 <__aeabi_dadd+0x3d8>
10016610:	4c18      	ldr	r4, [pc, #96]	; (10016674 <__aeabi_dadd+0x39c>)
10016612:	45a4      	cmp	ip, r4
10016614:	d100      	bne.n	10016618 <__aeabi_dadd+0x340>
10016616:	e0ab      	b.n	10016770 <__aeabi_dadd+0x498>
10016618:	2480      	movs	r4, #128	; 0x80
1001661a:	0424      	lsls	r4, r4, #16
1001661c:	4276      	negs	r6, r6
1001661e:	4321      	orrs	r1, r4
10016620:	2e38      	cmp	r6, #56	; 0x38
10016622:	dd00      	ble.n	10016626 <__aeabi_dadd+0x34e>
10016624:	e0df      	b.n	100167e6 <__aeabi_dadd+0x50e>
10016626:	2e1f      	cmp	r6, #31
10016628:	dd00      	ble.n	1001662c <__aeabi_dadd+0x354>
1001662a:	e143      	b.n	100168b4 <__aeabi_dadd+0x5dc>
1001662c:	2720      	movs	r7, #32
1001662e:	1bbc      	subs	r4, r7, r6
10016630:	46a1      	mov	r9, r4
10016632:	000c      	movs	r4, r1
10016634:	464f      	mov	r7, r9
10016636:	40bc      	lsls	r4, r7
10016638:	46a0      	mov	r8, r4
1001663a:	002c      	movs	r4, r5
1001663c:	4647      	mov	r7, r8
1001663e:	40f4      	lsrs	r4, r6
10016640:	433c      	orrs	r4, r7
10016642:	464f      	mov	r7, r9
10016644:	40bd      	lsls	r5, r7
10016646:	1e6f      	subs	r7, r5, #1
10016648:	41bd      	sbcs	r5, r7
1001664a:	40f1      	lsrs	r1, r6
1001664c:	432c      	orrs	r4, r5
1001664e:	1b15      	subs	r5, r2, r4
10016650:	42aa      	cmp	r2, r5
10016652:	4192      	sbcs	r2, r2
10016654:	1a41      	subs	r1, r0, r1
10016656:	4252      	negs	r2, r2
10016658:	1a89      	subs	r1, r1, r2
1001665a:	4664      	mov	r4, ip
1001665c:	469a      	mov	sl, r3
1001665e:	e6bf      	b.n	100163e0 <__aeabi_dadd+0x108>
10016660:	4641      	mov	r1, r8
10016662:	4645      	mov	r5, r8
10016664:	4331      	orrs	r1, r6
10016666:	d000      	beq.n	1001666a <__aeabi_dadd+0x392>
10016668:	e6be      	b.n	100163e8 <__aeabi_dadd+0x110>
1001666a:	2600      	movs	r6, #0
1001666c:	2400      	movs	r4, #0
1001666e:	2500      	movs	r5, #0
10016670:	e6f2      	b.n	10016458 <__aeabi_dadd+0x180>
10016672:	46c0      	nop			; (mov r8, r8)
10016674:	000007ff 	.word	0x000007ff
10016678:	ff7fffff 	.word	0xff7fffff
1001667c:	800fffff 	.word	0x800fffff
10016680:	2b1f      	cmp	r3, #31
10016682:	dc59      	bgt.n	10016738 <__aeabi_dadd+0x460>
10016684:	2720      	movs	r7, #32
10016686:	1aff      	subs	r7, r7, r3
10016688:	46bc      	mov	ip, r7
1001668a:	0007      	movs	r7, r0
1001668c:	4663      	mov	r3, ip
1001668e:	409f      	lsls	r7, r3
10016690:	465b      	mov	r3, fp
10016692:	46b9      	mov	r9, r7
10016694:	0017      	movs	r7, r2
10016696:	40df      	lsrs	r7, r3
10016698:	46b8      	mov	r8, r7
1001669a:	464f      	mov	r7, r9
1001669c:	4643      	mov	r3, r8
1001669e:	431f      	orrs	r7, r3
100166a0:	4663      	mov	r3, ip
100166a2:	409a      	lsls	r2, r3
100166a4:	1e53      	subs	r3, r2, #1
100166a6:	419a      	sbcs	r2, r3
100166a8:	465b      	mov	r3, fp
100166aa:	433a      	orrs	r2, r7
100166ac:	40d8      	lsrs	r0, r3
100166ae:	e6f4      	b.n	1001649a <__aeabi_dadd+0x1c2>
100166b0:	000c      	movs	r4, r1
100166b2:	432c      	orrs	r4, r5
100166b4:	d05c      	beq.n	10016770 <__aeabi_dadd+0x498>
100166b6:	43f6      	mvns	r6, r6
100166b8:	2e00      	cmp	r6, #0
100166ba:	d155      	bne.n	10016768 <__aeabi_dadd+0x490>
100166bc:	1b55      	subs	r5, r2, r5
100166be:	42aa      	cmp	r2, r5
100166c0:	41a4      	sbcs	r4, r4
100166c2:	1a41      	subs	r1, r0, r1
100166c4:	4264      	negs	r4, r4
100166c6:	1b09      	subs	r1, r1, r4
100166c8:	469a      	mov	sl, r3
100166ca:	4664      	mov	r4, ip
100166cc:	e688      	b.n	100163e0 <__aeabi_dadd+0x108>
100166ce:	4f96      	ldr	r7, [pc, #600]	; (10016928 <__aeabi_dadd+0x650>)
100166d0:	42bc      	cmp	r4, r7
100166d2:	d000      	beq.n	100166d6 <__aeabi_dadd+0x3fe>
100166d4:	e6d8      	b.n	10016488 <__aeabi_dadd+0x1b0>
100166d6:	e628      	b.n	1001632a <__aeabi_dadd+0x52>
100166d8:	2200      	movs	r2, #0
100166da:	e780      	b.n	100165de <__aeabi_dadd+0x306>
100166dc:	2000      	movs	r0, #0
100166de:	e78f      	b.n	10016600 <__aeabi_dadd+0x328>
100166e0:	000b      	movs	r3, r1
100166e2:	432b      	orrs	r3, r5
100166e4:	2c00      	cmp	r4, #0
100166e6:	d000      	beq.n	100166ea <__aeabi_dadd+0x412>
100166e8:	e0c2      	b.n	10016870 <__aeabi_dadd+0x598>
100166ea:	2b00      	cmp	r3, #0
100166ec:	d100      	bne.n	100166f0 <__aeabi_dadd+0x418>
100166ee:	e101      	b.n	100168f4 <__aeabi_dadd+0x61c>
100166f0:	0003      	movs	r3, r0
100166f2:	4313      	orrs	r3, r2
100166f4:	d100      	bne.n	100166f8 <__aeabi_dadd+0x420>
100166f6:	e618      	b.n	1001632a <__aeabi_dadd+0x52>
100166f8:	18ab      	adds	r3, r5, r2
100166fa:	42ab      	cmp	r3, r5
100166fc:	41b6      	sbcs	r6, r6
100166fe:	1809      	adds	r1, r1, r0
10016700:	4276      	negs	r6, r6
10016702:	1871      	adds	r1, r6, r1
10016704:	020a      	lsls	r2, r1, #8
10016706:	d400      	bmi.n	1001670a <__aeabi_dadd+0x432>
10016708:	e109      	b.n	1001691e <__aeabi_dadd+0x646>
1001670a:	4a88      	ldr	r2, [pc, #544]	; (1001692c <__aeabi_dadd+0x654>)
1001670c:	001d      	movs	r5, r3
1001670e:	4011      	ands	r1, r2
10016710:	4664      	mov	r4, ip
10016712:	e60a      	b.n	1001632a <__aeabi_dadd+0x52>
10016714:	2c00      	cmp	r4, #0
10016716:	d15b      	bne.n	100167d0 <__aeabi_dadd+0x4f8>
10016718:	000e      	movs	r6, r1
1001671a:	432e      	orrs	r6, r5
1001671c:	d000      	beq.n	10016720 <__aeabi_dadd+0x448>
1001671e:	e08a      	b.n	10016836 <__aeabi_dadd+0x55e>
10016720:	0001      	movs	r1, r0
10016722:	4311      	orrs	r1, r2
10016724:	d100      	bne.n	10016728 <__aeabi_dadd+0x450>
10016726:	e0c2      	b.n	100168ae <__aeabi_dadd+0x5d6>
10016728:	0001      	movs	r1, r0
1001672a:	0015      	movs	r5, r2
1001672c:	469a      	mov	sl, r3
1001672e:	e5fc      	b.n	1001632a <__aeabi_dadd+0x52>
10016730:	4664      	mov	r4, ip
10016732:	2100      	movs	r1, #0
10016734:	2500      	movs	r5, #0
10016736:	e68f      	b.n	10016458 <__aeabi_dadd+0x180>
10016738:	2320      	movs	r3, #32
1001673a:	425b      	negs	r3, r3
1001673c:	469c      	mov	ip, r3
1001673e:	44dc      	add	ip, fp
10016740:	4663      	mov	r3, ip
10016742:	0007      	movs	r7, r0
10016744:	40df      	lsrs	r7, r3
10016746:	465b      	mov	r3, fp
10016748:	46bc      	mov	ip, r7
1001674a:	2b20      	cmp	r3, #32
1001674c:	d100      	bne.n	10016750 <__aeabi_dadd+0x478>
1001674e:	e0ac      	b.n	100168aa <__aeabi_dadd+0x5d2>
10016750:	2340      	movs	r3, #64	; 0x40
10016752:	465f      	mov	r7, fp
10016754:	1bdb      	subs	r3, r3, r7
10016756:	4098      	lsls	r0, r3
10016758:	4302      	orrs	r2, r0
1001675a:	1e50      	subs	r0, r2, #1
1001675c:	4182      	sbcs	r2, r0
1001675e:	4663      	mov	r3, ip
10016760:	4313      	orrs	r3, r2
10016762:	001a      	movs	r2, r3
10016764:	2000      	movs	r0, #0
10016766:	e698      	b.n	1001649a <__aeabi_dadd+0x1c2>
10016768:	4c6f      	ldr	r4, [pc, #444]	; (10016928 <__aeabi_dadd+0x650>)
1001676a:	45a4      	cmp	ip, r4
1001676c:	d000      	beq.n	10016770 <__aeabi_dadd+0x498>
1001676e:	e757      	b.n	10016620 <__aeabi_dadd+0x348>
10016770:	0001      	movs	r1, r0
10016772:	0015      	movs	r5, r2
10016774:	4664      	mov	r4, ip
10016776:	469a      	mov	sl, r3
10016778:	e5d7      	b.n	1001632a <__aeabi_dadd+0x52>
1001677a:	2c00      	cmp	r4, #0
1001677c:	d139      	bne.n	100167f2 <__aeabi_dadd+0x51a>
1001677e:	000c      	movs	r4, r1
10016780:	432c      	orrs	r4, r5
10016782:	d06e      	beq.n	10016862 <__aeabi_dadd+0x58a>
10016784:	43db      	mvns	r3, r3
10016786:	2b00      	cmp	r3, #0
10016788:	d01a      	beq.n	100167c0 <__aeabi_dadd+0x4e8>
1001678a:	4c67      	ldr	r4, [pc, #412]	; (10016928 <__aeabi_dadd+0x650>)
1001678c:	45a4      	cmp	ip, r4
1001678e:	d068      	beq.n	10016862 <__aeabi_dadd+0x58a>
10016790:	2b38      	cmp	r3, #56	; 0x38
10016792:	dd00      	ble.n	10016796 <__aeabi_dadd+0x4be>
10016794:	e0a4      	b.n	100168e0 <__aeabi_dadd+0x608>
10016796:	2b1f      	cmp	r3, #31
10016798:	dd00      	ble.n	1001679c <__aeabi_dadd+0x4c4>
1001679a:	e0ae      	b.n	100168fa <__aeabi_dadd+0x622>
1001679c:	2420      	movs	r4, #32
1001679e:	000f      	movs	r7, r1
100167a0:	1ae4      	subs	r4, r4, r3
100167a2:	40a7      	lsls	r7, r4
100167a4:	46b9      	mov	r9, r7
100167a6:	002f      	movs	r7, r5
100167a8:	40df      	lsrs	r7, r3
100167aa:	46b8      	mov	r8, r7
100167ac:	46a3      	mov	fp, r4
100167ae:	464f      	mov	r7, r9
100167b0:	4644      	mov	r4, r8
100167b2:	4327      	orrs	r7, r4
100167b4:	465c      	mov	r4, fp
100167b6:	40a5      	lsls	r5, r4
100167b8:	1e6c      	subs	r4, r5, #1
100167ba:	41a5      	sbcs	r5, r4
100167bc:	40d9      	lsrs	r1, r3
100167be:	433d      	orrs	r5, r7
100167c0:	18ad      	adds	r5, r5, r2
100167c2:	4295      	cmp	r5, r2
100167c4:	419b      	sbcs	r3, r3
100167c6:	1809      	adds	r1, r1, r0
100167c8:	425b      	negs	r3, r3
100167ca:	1859      	adds	r1, r3, r1
100167cc:	4664      	mov	r4, ip
100167ce:	e66b      	b.n	100164a8 <__aeabi_dadd+0x1d0>
100167d0:	000c      	movs	r4, r1
100167d2:	432c      	orrs	r4, r5
100167d4:	d115      	bne.n	10016802 <__aeabi_dadd+0x52a>
100167d6:	0001      	movs	r1, r0
100167d8:	4311      	orrs	r1, r2
100167da:	d07b      	beq.n	100168d4 <__aeabi_dadd+0x5fc>
100167dc:	0001      	movs	r1, r0
100167de:	0015      	movs	r5, r2
100167e0:	469a      	mov	sl, r3
100167e2:	4c51      	ldr	r4, [pc, #324]	; (10016928 <__aeabi_dadd+0x650>)
100167e4:	e5a1      	b.n	1001632a <__aeabi_dadd+0x52>
100167e6:	430d      	orrs	r5, r1
100167e8:	1e69      	subs	r1, r5, #1
100167ea:	418d      	sbcs	r5, r1
100167ec:	2100      	movs	r1, #0
100167ee:	b2ec      	uxtb	r4, r5
100167f0:	e72d      	b.n	1001664e <__aeabi_dadd+0x376>
100167f2:	4c4d      	ldr	r4, [pc, #308]	; (10016928 <__aeabi_dadd+0x650>)
100167f4:	45a4      	cmp	ip, r4
100167f6:	d034      	beq.n	10016862 <__aeabi_dadd+0x58a>
100167f8:	2480      	movs	r4, #128	; 0x80
100167fa:	0424      	lsls	r4, r4, #16
100167fc:	425b      	negs	r3, r3
100167fe:	4321      	orrs	r1, r4
10016800:	e7c6      	b.n	10016790 <__aeabi_dadd+0x4b8>
10016802:	0004      	movs	r4, r0
10016804:	4314      	orrs	r4, r2
10016806:	d04e      	beq.n	100168a6 <__aeabi_dadd+0x5ce>
10016808:	08ed      	lsrs	r5, r5, #3
1001680a:	074c      	lsls	r4, r1, #29
1001680c:	432c      	orrs	r4, r5
1001680e:	2580      	movs	r5, #128	; 0x80
10016810:	08c9      	lsrs	r1, r1, #3
10016812:	032d      	lsls	r5, r5, #12
10016814:	4229      	tst	r1, r5
10016816:	d008      	beq.n	1001682a <__aeabi_dadd+0x552>
10016818:	08c6      	lsrs	r6, r0, #3
1001681a:	422e      	tst	r6, r5
1001681c:	d105      	bne.n	1001682a <__aeabi_dadd+0x552>
1001681e:	08d2      	lsrs	r2, r2, #3
10016820:	0741      	lsls	r1, r0, #29
10016822:	4311      	orrs	r1, r2
10016824:	000c      	movs	r4, r1
10016826:	469a      	mov	sl, r3
10016828:	0031      	movs	r1, r6
1001682a:	0f62      	lsrs	r2, r4, #29
1001682c:	00c9      	lsls	r1, r1, #3
1001682e:	00e5      	lsls	r5, r4, #3
10016830:	4311      	orrs	r1, r2
10016832:	4c3d      	ldr	r4, [pc, #244]	; (10016928 <__aeabi_dadd+0x650>)
10016834:	e579      	b.n	1001632a <__aeabi_dadd+0x52>
10016836:	0006      	movs	r6, r0
10016838:	4316      	orrs	r6, r2
1001683a:	d100      	bne.n	1001683e <__aeabi_dadd+0x566>
1001683c:	e575      	b.n	1001632a <__aeabi_dadd+0x52>
1001683e:	1aae      	subs	r6, r5, r2
10016840:	46b0      	mov	r8, r6
10016842:	4545      	cmp	r5, r8
10016844:	41bf      	sbcs	r7, r7
10016846:	1a0e      	subs	r6, r1, r0
10016848:	427f      	negs	r7, r7
1001684a:	1bf6      	subs	r6, r6, r7
1001684c:	0237      	lsls	r7, r6, #8
1001684e:	d400      	bmi.n	10016852 <__aeabi_dadd+0x57a>
10016850:	e5f4      	b.n	1001643c <__aeabi_dadd+0x164>
10016852:	1b55      	subs	r5, r2, r5
10016854:	42aa      	cmp	r2, r5
10016856:	41b6      	sbcs	r6, r6
10016858:	1a41      	subs	r1, r0, r1
1001685a:	4276      	negs	r6, r6
1001685c:	1b89      	subs	r1, r1, r6
1001685e:	469a      	mov	sl, r3
10016860:	e563      	b.n	1001632a <__aeabi_dadd+0x52>
10016862:	0001      	movs	r1, r0
10016864:	0015      	movs	r5, r2
10016866:	4664      	mov	r4, ip
10016868:	e55f      	b.n	1001632a <__aeabi_dadd+0x52>
1001686a:	2200      	movs	r2, #0
1001686c:	2500      	movs	r5, #0
1001686e:	e57b      	b.n	10016368 <__aeabi_dadd+0x90>
10016870:	2b00      	cmp	r3, #0
10016872:	d03b      	beq.n	100168ec <__aeabi_dadd+0x614>
10016874:	0003      	movs	r3, r0
10016876:	4313      	orrs	r3, r2
10016878:	d015      	beq.n	100168a6 <__aeabi_dadd+0x5ce>
1001687a:	08ed      	lsrs	r5, r5, #3
1001687c:	074b      	lsls	r3, r1, #29
1001687e:	432b      	orrs	r3, r5
10016880:	2580      	movs	r5, #128	; 0x80
10016882:	08c9      	lsrs	r1, r1, #3
10016884:	032d      	lsls	r5, r5, #12
10016886:	4229      	tst	r1, r5
10016888:	d007      	beq.n	1001689a <__aeabi_dadd+0x5c2>
1001688a:	08c4      	lsrs	r4, r0, #3
1001688c:	422c      	tst	r4, r5
1001688e:	d104      	bne.n	1001689a <__aeabi_dadd+0x5c2>
10016890:	0741      	lsls	r1, r0, #29
10016892:	000b      	movs	r3, r1
10016894:	0021      	movs	r1, r4
10016896:	08d2      	lsrs	r2, r2, #3
10016898:	4313      	orrs	r3, r2
1001689a:	00c9      	lsls	r1, r1, #3
1001689c:	0f5a      	lsrs	r2, r3, #29
1001689e:	4311      	orrs	r1, r2
100168a0:	00dd      	lsls	r5, r3, #3
100168a2:	4c21      	ldr	r4, [pc, #132]	; (10016928 <__aeabi_dadd+0x650>)
100168a4:	e541      	b.n	1001632a <__aeabi_dadd+0x52>
100168a6:	4c20      	ldr	r4, [pc, #128]	; (10016928 <__aeabi_dadd+0x650>)
100168a8:	e53f      	b.n	1001632a <__aeabi_dadd+0x52>
100168aa:	2000      	movs	r0, #0
100168ac:	e754      	b.n	10016758 <__aeabi_dadd+0x480>
100168ae:	2600      	movs	r6, #0
100168b0:	2500      	movs	r5, #0
100168b2:	e5d1      	b.n	10016458 <__aeabi_dadd+0x180>
100168b4:	0034      	movs	r4, r6
100168b6:	000f      	movs	r7, r1
100168b8:	3c20      	subs	r4, #32
100168ba:	40e7      	lsrs	r7, r4
100168bc:	003c      	movs	r4, r7
100168be:	2e20      	cmp	r6, #32
100168c0:	d02b      	beq.n	1001691a <__aeabi_dadd+0x642>
100168c2:	2740      	movs	r7, #64	; 0x40
100168c4:	1bbe      	subs	r6, r7, r6
100168c6:	40b1      	lsls	r1, r6
100168c8:	430d      	orrs	r5, r1
100168ca:	1e69      	subs	r1, r5, #1
100168cc:	418d      	sbcs	r5, r1
100168ce:	2100      	movs	r1, #0
100168d0:	432c      	orrs	r4, r5
100168d2:	e6bc      	b.n	1001664e <__aeabi_dadd+0x376>
100168d4:	2180      	movs	r1, #128	; 0x80
100168d6:	2600      	movs	r6, #0
100168d8:	0309      	lsls	r1, r1, #12
100168da:	4c13      	ldr	r4, [pc, #76]	; (10016928 <__aeabi_dadd+0x650>)
100168dc:	2500      	movs	r5, #0
100168de:	e5bb      	b.n	10016458 <__aeabi_dadd+0x180>
100168e0:	430d      	orrs	r5, r1
100168e2:	1e69      	subs	r1, r5, #1
100168e4:	418d      	sbcs	r5, r1
100168e6:	2100      	movs	r1, #0
100168e8:	b2ed      	uxtb	r5, r5
100168ea:	e769      	b.n	100167c0 <__aeabi_dadd+0x4e8>
100168ec:	0001      	movs	r1, r0
100168ee:	0015      	movs	r5, r2
100168f0:	4c0d      	ldr	r4, [pc, #52]	; (10016928 <__aeabi_dadd+0x650>)
100168f2:	e51a      	b.n	1001632a <__aeabi_dadd+0x52>
100168f4:	0001      	movs	r1, r0
100168f6:	0015      	movs	r5, r2
100168f8:	e517      	b.n	1001632a <__aeabi_dadd+0x52>
100168fa:	001c      	movs	r4, r3
100168fc:	000f      	movs	r7, r1
100168fe:	3c20      	subs	r4, #32
10016900:	40e7      	lsrs	r7, r4
10016902:	003c      	movs	r4, r7
10016904:	2b20      	cmp	r3, #32
10016906:	d00c      	beq.n	10016922 <__aeabi_dadd+0x64a>
10016908:	2740      	movs	r7, #64	; 0x40
1001690a:	1afb      	subs	r3, r7, r3
1001690c:	4099      	lsls	r1, r3
1001690e:	430d      	orrs	r5, r1
10016910:	1e69      	subs	r1, r5, #1
10016912:	418d      	sbcs	r5, r1
10016914:	2100      	movs	r1, #0
10016916:	4325      	orrs	r5, r4
10016918:	e752      	b.n	100167c0 <__aeabi_dadd+0x4e8>
1001691a:	2100      	movs	r1, #0
1001691c:	e7d4      	b.n	100168c8 <__aeabi_dadd+0x5f0>
1001691e:	001d      	movs	r5, r3
10016920:	e592      	b.n	10016448 <__aeabi_dadd+0x170>
10016922:	2100      	movs	r1, #0
10016924:	e7f3      	b.n	1001690e <__aeabi_dadd+0x636>
10016926:	46c0      	nop			; (mov r8, r8)
10016928:	000007ff 	.word	0x000007ff
1001692c:	ff7fffff 	.word	0xff7fffff

10016930 <__aeabi_ddiv>:
10016930:	b5f0      	push	{r4, r5, r6, r7, lr}
10016932:	4656      	mov	r6, sl
10016934:	464d      	mov	r5, r9
10016936:	4644      	mov	r4, r8
10016938:	465f      	mov	r7, fp
1001693a:	b4f0      	push	{r4, r5, r6, r7}
1001693c:	001d      	movs	r5, r3
1001693e:	030e      	lsls	r6, r1, #12
10016940:	004c      	lsls	r4, r1, #1
10016942:	0fcb      	lsrs	r3, r1, #31
10016944:	b087      	sub	sp, #28
10016946:	0007      	movs	r7, r0
10016948:	4692      	mov	sl, r2
1001694a:	4681      	mov	r9, r0
1001694c:	0b36      	lsrs	r6, r6, #12
1001694e:	0d64      	lsrs	r4, r4, #21
10016950:	4698      	mov	r8, r3
10016952:	d06a      	beq.n	10016a2a <__aeabi_ddiv+0xfa>
10016954:	4b6d      	ldr	r3, [pc, #436]	; (10016b0c <__aeabi_ddiv+0x1dc>)
10016956:	429c      	cmp	r4, r3
10016958:	d035      	beq.n	100169c6 <__aeabi_ddiv+0x96>
1001695a:	2280      	movs	r2, #128	; 0x80
1001695c:	0f43      	lsrs	r3, r0, #29
1001695e:	0412      	lsls	r2, r2, #16
10016960:	4313      	orrs	r3, r2
10016962:	00f6      	lsls	r6, r6, #3
10016964:	431e      	orrs	r6, r3
10016966:	00c3      	lsls	r3, r0, #3
10016968:	4699      	mov	r9, r3
1001696a:	4b69      	ldr	r3, [pc, #420]	; (10016b10 <__aeabi_ddiv+0x1e0>)
1001696c:	2700      	movs	r7, #0
1001696e:	469c      	mov	ip, r3
10016970:	2300      	movs	r3, #0
10016972:	4464      	add	r4, ip
10016974:	9302      	str	r3, [sp, #8]
10016976:	032b      	lsls	r3, r5, #12
10016978:	0068      	lsls	r0, r5, #1
1001697a:	0b1b      	lsrs	r3, r3, #12
1001697c:	0fed      	lsrs	r5, r5, #31
1001697e:	4651      	mov	r1, sl
10016980:	469b      	mov	fp, r3
10016982:	0d40      	lsrs	r0, r0, #21
10016984:	9500      	str	r5, [sp, #0]
10016986:	d100      	bne.n	1001698a <__aeabi_ddiv+0x5a>
10016988:	e078      	b.n	10016a7c <__aeabi_ddiv+0x14c>
1001698a:	4b60      	ldr	r3, [pc, #384]	; (10016b0c <__aeabi_ddiv+0x1dc>)
1001698c:	4298      	cmp	r0, r3
1001698e:	d06c      	beq.n	10016a6a <__aeabi_ddiv+0x13a>
10016990:	465b      	mov	r3, fp
10016992:	00da      	lsls	r2, r3, #3
10016994:	0f4b      	lsrs	r3, r1, #29
10016996:	2180      	movs	r1, #128	; 0x80
10016998:	0409      	lsls	r1, r1, #16
1001699a:	430b      	orrs	r3, r1
1001699c:	4313      	orrs	r3, r2
1001699e:	469b      	mov	fp, r3
100169a0:	4653      	mov	r3, sl
100169a2:	00d9      	lsls	r1, r3, #3
100169a4:	4b5a      	ldr	r3, [pc, #360]	; (10016b10 <__aeabi_ddiv+0x1e0>)
100169a6:	469c      	mov	ip, r3
100169a8:	2300      	movs	r3, #0
100169aa:	4460      	add	r0, ip
100169ac:	4642      	mov	r2, r8
100169ae:	1a20      	subs	r0, r4, r0
100169b0:	406a      	eors	r2, r5
100169b2:	4692      	mov	sl, r2
100169b4:	9001      	str	r0, [sp, #4]
100169b6:	431f      	orrs	r7, r3
100169b8:	2f0f      	cmp	r7, #15
100169ba:	d900      	bls.n	100169be <__aeabi_ddiv+0x8e>
100169bc:	e0b0      	b.n	10016b20 <__aeabi_ddiv+0x1f0>
100169be:	4855      	ldr	r0, [pc, #340]	; (10016b14 <__aeabi_ddiv+0x1e4>)
100169c0:	00bf      	lsls	r7, r7, #2
100169c2:	59c0      	ldr	r0, [r0, r7]
100169c4:	4687      	mov	pc, r0
100169c6:	4337      	orrs	r7, r6
100169c8:	d000      	beq.n	100169cc <__aeabi_ddiv+0x9c>
100169ca:	e088      	b.n	10016ade <__aeabi_ddiv+0x1ae>
100169cc:	2300      	movs	r3, #0
100169ce:	4699      	mov	r9, r3
100169d0:	3302      	adds	r3, #2
100169d2:	2708      	movs	r7, #8
100169d4:	2600      	movs	r6, #0
100169d6:	9302      	str	r3, [sp, #8]
100169d8:	e7cd      	b.n	10016976 <__aeabi_ddiv+0x46>
100169da:	4643      	mov	r3, r8
100169dc:	46b3      	mov	fp, r6
100169de:	4649      	mov	r1, r9
100169e0:	9300      	str	r3, [sp, #0]
100169e2:	9b02      	ldr	r3, [sp, #8]
100169e4:	9a00      	ldr	r2, [sp, #0]
100169e6:	4692      	mov	sl, r2
100169e8:	2b02      	cmp	r3, #2
100169ea:	d000      	beq.n	100169ee <__aeabi_ddiv+0xbe>
100169ec:	e1bf      	b.n	10016d6e <__aeabi_ddiv+0x43e>
100169ee:	2100      	movs	r1, #0
100169f0:	4653      	mov	r3, sl
100169f2:	2201      	movs	r2, #1
100169f4:	2600      	movs	r6, #0
100169f6:	4689      	mov	r9, r1
100169f8:	401a      	ands	r2, r3
100169fa:	4b44      	ldr	r3, [pc, #272]	; (10016b0c <__aeabi_ddiv+0x1dc>)
100169fc:	2100      	movs	r1, #0
100169fe:	0336      	lsls	r6, r6, #12
10016a00:	0d0c      	lsrs	r4, r1, #20
10016a02:	0524      	lsls	r4, r4, #20
10016a04:	0b36      	lsrs	r6, r6, #12
10016a06:	4326      	orrs	r6, r4
10016a08:	4c43      	ldr	r4, [pc, #268]	; (10016b18 <__aeabi_ddiv+0x1e8>)
10016a0a:	051b      	lsls	r3, r3, #20
10016a0c:	4026      	ands	r6, r4
10016a0e:	431e      	orrs	r6, r3
10016a10:	0076      	lsls	r6, r6, #1
10016a12:	07d2      	lsls	r2, r2, #31
10016a14:	0876      	lsrs	r6, r6, #1
10016a16:	4316      	orrs	r6, r2
10016a18:	4648      	mov	r0, r9
10016a1a:	0031      	movs	r1, r6
10016a1c:	b007      	add	sp, #28
10016a1e:	bc3c      	pop	{r2, r3, r4, r5}
10016a20:	4690      	mov	r8, r2
10016a22:	4699      	mov	r9, r3
10016a24:	46a2      	mov	sl, r4
10016a26:	46ab      	mov	fp, r5
10016a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
10016a2a:	0033      	movs	r3, r6
10016a2c:	4303      	orrs	r3, r0
10016a2e:	d04f      	beq.n	10016ad0 <__aeabi_ddiv+0x1a0>
10016a30:	2e00      	cmp	r6, #0
10016a32:	d100      	bne.n	10016a36 <__aeabi_ddiv+0x106>
10016a34:	e1bc      	b.n	10016db0 <__aeabi_ddiv+0x480>
10016a36:	0030      	movs	r0, r6
10016a38:	f001 fafc 	bl	10018034 <__clzsi2>
10016a3c:	0003      	movs	r3, r0
10016a3e:	3b0b      	subs	r3, #11
10016a40:	2b1c      	cmp	r3, #28
10016a42:	dd00      	ble.n	10016a46 <__aeabi_ddiv+0x116>
10016a44:	e1ad      	b.n	10016da2 <__aeabi_ddiv+0x472>
10016a46:	221d      	movs	r2, #29
10016a48:	0001      	movs	r1, r0
10016a4a:	1ad3      	subs	r3, r2, r3
10016a4c:	3908      	subs	r1, #8
10016a4e:	003a      	movs	r2, r7
10016a50:	408f      	lsls	r7, r1
10016a52:	408e      	lsls	r6, r1
10016a54:	40da      	lsrs	r2, r3
10016a56:	46b9      	mov	r9, r7
10016a58:	4316      	orrs	r6, r2
10016a5a:	4b30      	ldr	r3, [pc, #192]	; (10016b1c <__aeabi_ddiv+0x1ec>)
10016a5c:	2700      	movs	r7, #0
10016a5e:	469c      	mov	ip, r3
10016a60:	2300      	movs	r3, #0
10016a62:	4460      	add	r0, ip
10016a64:	4244      	negs	r4, r0
10016a66:	9302      	str	r3, [sp, #8]
10016a68:	e785      	b.n	10016976 <__aeabi_ddiv+0x46>
10016a6a:	4653      	mov	r3, sl
10016a6c:	465a      	mov	r2, fp
10016a6e:	4313      	orrs	r3, r2
10016a70:	d12c      	bne.n	10016acc <__aeabi_ddiv+0x19c>
10016a72:	2300      	movs	r3, #0
10016a74:	2100      	movs	r1, #0
10016a76:	469b      	mov	fp, r3
10016a78:	3302      	adds	r3, #2
10016a7a:	e797      	b.n	100169ac <__aeabi_ddiv+0x7c>
10016a7c:	430b      	orrs	r3, r1
10016a7e:	d020      	beq.n	10016ac2 <__aeabi_ddiv+0x192>
10016a80:	465b      	mov	r3, fp
10016a82:	2b00      	cmp	r3, #0
10016a84:	d100      	bne.n	10016a88 <__aeabi_ddiv+0x158>
10016a86:	e19e      	b.n	10016dc6 <__aeabi_ddiv+0x496>
10016a88:	4658      	mov	r0, fp
10016a8a:	f001 fad3 	bl	10018034 <__clzsi2>
10016a8e:	0003      	movs	r3, r0
10016a90:	3b0b      	subs	r3, #11
10016a92:	2b1c      	cmp	r3, #28
10016a94:	dd00      	ble.n	10016a98 <__aeabi_ddiv+0x168>
10016a96:	e18f      	b.n	10016db8 <__aeabi_ddiv+0x488>
10016a98:	0002      	movs	r2, r0
10016a9a:	4659      	mov	r1, fp
10016a9c:	3a08      	subs	r2, #8
10016a9e:	4091      	lsls	r1, r2
10016aa0:	468b      	mov	fp, r1
10016aa2:	211d      	movs	r1, #29
10016aa4:	1acb      	subs	r3, r1, r3
10016aa6:	4651      	mov	r1, sl
10016aa8:	40d9      	lsrs	r1, r3
10016aaa:	000b      	movs	r3, r1
10016aac:	4659      	mov	r1, fp
10016aae:	430b      	orrs	r3, r1
10016ab0:	4651      	mov	r1, sl
10016ab2:	469b      	mov	fp, r3
10016ab4:	4091      	lsls	r1, r2
10016ab6:	4b19      	ldr	r3, [pc, #100]	; (10016b1c <__aeabi_ddiv+0x1ec>)
10016ab8:	469c      	mov	ip, r3
10016aba:	4460      	add	r0, ip
10016abc:	4240      	negs	r0, r0
10016abe:	2300      	movs	r3, #0
10016ac0:	e774      	b.n	100169ac <__aeabi_ddiv+0x7c>
10016ac2:	2300      	movs	r3, #0
10016ac4:	2100      	movs	r1, #0
10016ac6:	469b      	mov	fp, r3
10016ac8:	3301      	adds	r3, #1
10016aca:	e76f      	b.n	100169ac <__aeabi_ddiv+0x7c>
10016acc:	2303      	movs	r3, #3
10016ace:	e76d      	b.n	100169ac <__aeabi_ddiv+0x7c>
10016ad0:	2300      	movs	r3, #0
10016ad2:	4699      	mov	r9, r3
10016ad4:	3301      	adds	r3, #1
10016ad6:	2704      	movs	r7, #4
10016ad8:	2600      	movs	r6, #0
10016ada:	9302      	str	r3, [sp, #8]
10016adc:	e74b      	b.n	10016976 <__aeabi_ddiv+0x46>
10016ade:	2303      	movs	r3, #3
10016ae0:	270c      	movs	r7, #12
10016ae2:	9302      	str	r3, [sp, #8]
10016ae4:	e747      	b.n	10016976 <__aeabi_ddiv+0x46>
10016ae6:	2201      	movs	r2, #1
10016ae8:	1ad5      	subs	r5, r2, r3
10016aea:	2d38      	cmp	r5, #56	; 0x38
10016aec:	dc00      	bgt.n	10016af0 <__aeabi_ddiv+0x1c0>
10016aee:	e1b0      	b.n	10016e52 <__aeabi_ddiv+0x522>
10016af0:	4653      	mov	r3, sl
10016af2:	401a      	ands	r2, r3
10016af4:	2100      	movs	r1, #0
10016af6:	2300      	movs	r3, #0
10016af8:	2600      	movs	r6, #0
10016afa:	4689      	mov	r9, r1
10016afc:	e77e      	b.n	100169fc <__aeabi_ddiv+0xcc>
10016afe:	2300      	movs	r3, #0
10016b00:	2680      	movs	r6, #128	; 0x80
10016b02:	4699      	mov	r9, r3
10016b04:	2200      	movs	r2, #0
10016b06:	0336      	lsls	r6, r6, #12
10016b08:	4b00      	ldr	r3, [pc, #0]	; (10016b0c <__aeabi_ddiv+0x1dc>)
10016b0a:	e777      	b.n	100169fc <__aeabi_ddiv+0xcc>
10016b0c:	000007ff 	.word	0x000007ff
10016b10:	fffffc01 	.word	0xfffffc01
10016b14:	1001b48c 	.word	0x1001b48c
10016b18:	800fffff 	.word	0x800fffff
10016b1c:	000003f3 	.word	0x000003f3
10016b20:	455e      	cmp	r6, fp
10016b22:	d900      	bls.n	10016b26 <__aeabi_ddiv+0x1f6>
10016b24:	e172      	b.n	10016e0c <__aeabi_ddiv+0x4dc>
10016b26:	d100      	bne.n	10016b2a <__aeabi_ddiv+0x1fa>
10016b28:	e16d      	b.n	10016e06 <__aeabi_ddiv+0x4d6>
10016b2a:	9b01      	ldr	r3, [sp, #4]
10016b2c:	464d      	mov	r5, r9
10016b2e:	3b01      	subs	r3, #1
10016b30:	9301      	str	r3, [sp, #4]
10016b32:	2300      	movs	r3, #0
10016b34:	0034      	movs	r4, r6
10016b36:	9302      	str	r3, [sp, #8]
10016b38:	465b      	mov	r3, fp
10016b3a:	021e      	lsls	r6, r3, #8
10016b3c:	0e0b      	lsrs	r3, r1, #24
10016b3e:	431e      	orrs	r6, r3
10016b40:	020b      	lsls	r3, r1, #8
10016b42:	9303      	str	r3, [sp, #12]
10016b44:	0c33      	lsrs	r3, r6, #16
10016b46:	4699      	mov	r9, r3
10016b48:	0433      	lsls	r3, r6, #16
10016b4a:	0c1b      	lsrs	r3, r3, #16
10016b4c:	4649      	mov	r1, r9
10016b4e:	0020      	movs	r0, r4
10016b50:	9300      	str	r3, [sp, #0]
10016b52:	f7fe fa2f 	bl	10014fb4 <__aeabi_uidiv>
10016b56:	9b00      	ldr	r3, [sp, #0]
10016b58:	0037      	movs	r7, r6
10016b5a:	4343      	muls	r3, r0
10016b5c:	0006      	movs	r6, r0
10016b5e:	4649      	mov	r1, r9
10016b60:	0020      	movs	r0, r4
10016b62:	4698      	mov	r8, r3
10016b64:	f7fe faac 	bl	100150c0 <__aeabi_uidivmod>
10016b68:	0c2c      	lsrs	r4, r5, #16
10016b6a:	0409      	lsls	r1, r1, #16
10016b6c:	430c      	orrs	r4, r1
10016b6e:	45a0      	cmp	r8, r4
10016b70:	d909      	bls.n	10016b86 <__aeabi_ddiv+0x256>
10016b72:	19e4      	adds	r4, r4, r7
10016b74:	1e73      	subs	r3, r6, #1
10016b76:	42a7      	cmp	r7, r4
10016b78:	d900      	bls.n	10016b7c <__aeabi_ddiv+0x24c>
10016b7a:	e15c      	b.n	10016e36 <__aeabi_ddiv+0x506>
10016b7c:	45a0      	cmp	r8, r4
10016b7e:	d800      	bhi.n	10016b82 <__aeabi_ddiv+0x252>
10016b80:	e159      	b.n	10016e36 <__aeabi_ddiv+0x506>
10016b82:	3e02      	subs	r6, #2
10016b84:	19e4      	adds	r4, r4, r7
10016b86:	4643      	mov	r3, r8
10016b88:	1ae4      	subs	r4, r4, r3
10016b8a:	4649      	mov	r1, r9
10016b8c:	0020      	movs	r0, r4
10016b8e:	f7fe fa11 	bl	10014fb4 <__aeabi_uidiv>
10016b92:	0003      	movs	r3, r0
10016b94:	9a00      	ldr	r2, [sp, #0]
10016b96:	4680      	mov	r8, r0
10016b98:	4353      	muls	r3, r2
10016b9a:	4649      	mov	r1, r9
10016b9c:	0020      	movs	r0, r4
10016b9e:	469b      	mov	fp, r3
10016ba0:	f7fe fa8e 	bl	100150c0 <__aeabi_uidivmod>
10016ba4:	042a      	lsls	r2, r5, #16
10016ba6:	0409      	lsls	r1, r1, #16
10016ba8:	0c12      	lsrs	r2, r2, #16
10016baa:	430a      	orrs	r2, r1
10016bac:	4593      	cmp	fp, r2
10016bae:	d90d      	bls.n	10016bcc <__aeabi_ddiv+0x29c>
10016bb0:	4643      	mov	r3, r8
10016bb2:	19d2      	adds	r2, r2, r7
10016bb4:	3b01      	subs	r3, #1
10016bb6:	4297      	cmp	r7, r2
10016bb8:	d900      	bls.n	10016bbc <__aeabi_ddiv+0x28c>
10016bba:	e13a      	b.n	10016e32 <__aeabi_ddiv+0x502>
10016bbc:	4593      	cmp	fp, r2
10016bbe:	d800      	bhi.n	10016bc2 <__aeabi_ddiv+0x292>
10016bc0:	e137      	b.n	10016e32 <__aeabi_ddiv+0x502>
10016bc2:	2302      	movs	r3, #2
10016bc4:	425b      	negs	r3, r3
10016bc6:	469c      	mov	ip, r3
10016bc8:	19d2      	adds	r2, r2, r7
10016bca:	44e0      	add	r8, ip
10016bcc:	465b      	mov	r3, fp
10016bce:	1ad2      	subs	r2, r2, r3
10016bd0:	4643      	mov	r3, r8
10016bd2:	0436      	lsls	r6, r6, #16
10016bd4:	4333      	orrs	r3, r6
10016bd6:	469b      	mov	fp, r3
10016bd8:	9903      	ldr	r1, [sp, #12]
10016bda:	0c18      	lsrs	r0, r3, #16
10016bdc:	0c0b      	lsrs	r3, r1, #16
10016bde:	001d      	movs	r5, r3
10016be0:	9305      	str	r3, [sp, #20]
10016be2:	0409      	lsls	r1, r1, #16
10016be4:	465b      	mov	r3, fp
10016be6:	0c09      	lsrs	r1, r1, #16
10016be8:	000c      	movs	r4, r1
10016bea:	041b      	lsls	r3, r3, #16
10016bec:	0c1b      	lsrs	r3, r3, #16
10016bee:	4344      	muls	r4, r0
10016bf0:	9104      	str	r1, [sp, #16]
10016bf2:	4359      	muls	r1, r3
10016bf4:	436b      	muls	r3, r5
10016bf6:	4368      	muls	r0, r5
10016bf8:	191b      	adds	r3, r3, r4
10016bfa:	0c0d      	lsrs	r5, r1, #16
10016bfc:	18eb      	adds	r3, r5, r3
10016bfe:	429c      	cmp	r4, r3
10016c00:	d903      	bls.n	10016c0a <__aeabi_ddiv+0x2da>
10016c02:	2480      	movs	r4, #128	; 0x80
10016c04:	0264      	lsls	r4, r4, #9
10016c06:	46a4      	mov	ip, r4
10016c08:	4460      	add	r0, ip
10016c0a:	0c1c      	lsrs	r4, r3, #16
10016c0c:	0409      	lsls	r1, r1, #16
10016c0e:	041b      	lsls	r3, r3, #16
10016c10:	0c09      	lsrs	r1, r1, #16
10016c12:	1820      	adds	r0, r4, r0
10016c14:	185d      	adds	r5, r3, r1
10016c16:	4282      	cmp	r2, r0
10016c18:	d200      	bcs.n	10016c1c <__aeabi_ddiv+0x2ec>
10016c1a:	e0de      	b.n	10016dda <__aeabi_ddiv+0x4aa>
10016c1c:	d100      	bne.n	10016c20 <__aeabi_ddiv+0x2f0>
10016c1e:	e0d7      	b.n	10016dd0 <__aeabi_ddiv+0x4a0>
10016c20:	1a16      	subs	r6, r2, r0
10016c22:	9b02      	ldr	r3, [sp, #8]
10016c24:	469c      	mov	ip, r3
10016c26:	1b5d      	subs	r5, r3, r5
10016c28:	45ac      	cmp	ip, r5
10016c2a:	419b      	sbcs	r3, r3
10016c2c:	425b      	negs	r3, r3
10016c2e:	1af6      	subs	r6, r6, r3
10016c30:	42b7      	cmp	r7, r6
10016c32:	d100      	bne.n	10016c36 <__aeabi_ddiv+0x306>
10016c34:	e106      	b.n	10016e44 <__aeabi_ddiv+0x514>
10016c36:	4649      	mov	r1, r9
10016c38:	0030      	movs	r0, r6
10016c3a:	f7fe f9bb 	bl	10014fb4 <__aeabi_uidiv>
10016c3e:	9b00      	ldr	r3, [sp, #0]
10016c40:	0004      	movs	r4, r0
10016c42:	4343      	muls	r3, r0
10016c44:	4649      	mov	r1, r9
10016c46:	0030      	movs	r0, r6
10016c48:	4698      	mov	r8, r3
10016c4a:	f7fe fa39 	bl	100150c0 <__aeabi_uidivmod>
10016c4e:	0c2e      	lsrs	r6, r5, #16
10016c50:	0409      	lsls	r1, r1, #16
10016c52:	430e      	orrs	r6, r1
10016c54:	45b0      	cmp	r8, r6
10016c56:	d909      	bls.n	10016c6c <__aeabi_ddiv+0x33c>
10016c58:	19f6      	adds	r6, r6, r7
10016c5a:	1e63      	subs	r3, r4, #1
10016c5c:	42b7      	cmp	r7, r6
10016c5e:	d900      	bls.n	10016c62 <__aeabi_ddiv+0x332>
10016c60:	e0f3      	b.n	10016e4a <__aeabi_ddiv+0x51a>
10016c62:	45b0      	cmp	r8, r6
10016c64:	d800      	bhi.n	10016c68 <__aeabi_ddiv+0x338>
10016c66:	e0f0      	b.n	10016e4a <__aeabi_ddiv+0x51a>
10016c68:	3c02      	subs	r4, #2
10016c6a:	19f6      	adds	r6, r6, r7
10016c6c:	4643      	mov	r3, r8
10016c6e:	1af3      	subs	r3, r6, r3
10016c70:	4649      	mov	r1, r9
10016c72:	0018      	movs	r0, r3
10016c74:	9302      	str	r3, [sp, #8]
10016c76:	f7fe f99d 	bl	10014fb4 <__aeabi_uidiv>
10016c7a:	9b00      	ldr	r3, [sp, #0]
10016c7c:	0006      	movs	r6, r0
10016c7e:	4343      	muls	r3, r0
10016c80:	4649      	mov	r1, r9
10016c82:	9802      	ldr	r0, [sp, #8]
10016c84:	4698      	mov	r8, r3
10016c86:	f7fe fa1b 	bl	100150c0 <__aeabi_uidivmod>
10016c8a:	042d      	lsls	r5, r5, #16
10016c8c:	0409      	lsls	r1, r1, #16
10016c8e:	0c2d      	lsrs	r5, r5, #16
10016c90:	430d      	orrs	r5, r1
10016c92:	45a8      	cmp	r8, r5
10016c94:	d909      	bls.n	10016caa <__aeabi_ddiv+0x37a>
10016c96:	19ed      	adds	r5, r5, r7
10016c98:	1e73      	subs	r3, r6, #1
10016c9a:	42af      	cmp	r7, r5
10016c9c:	d900      	bls.n	10016ca0 <__aeabi_ddiv+0x370>
10016c9e:	e0d6      	b.n	10016e4e <__aeabi_ddiv+0x51e>
10016ca0:	45a8      	cmp	r8, r5
10016ca2:	d800      	bhi.n	10016ca6 <__aeabi_ddiv+0x376>
10016ca4:	e0d3      	b.n	10016e4e <__aeabi_ddiv+0x51e>
10016ca6:	3e02      	subs	r6, #2
10016ca8:	19ed      	adds	r5, r5, r7
10016caa:	0424      	lsls	r4, r4, #16
10016cac:	0021      	movs	r1, r4
10016cae:	4643      	mov	r3, r8
10016cb0:	4331      	orrs	r1, r6
10016cb2:	9e04      	ldr	r6, [sp, #16]
10016cb4:	9a05      	ldr	r2, [sp, #20]
10016cb6:	0030      	movs	r0, r6
10016cb8:	1aed      	subs	r5, r5, r3
10016cba:	040b      	lsls	r3, r1, #16
10016cbc:	0c0c      	lsrs	r4, r1, #16
10016cbe:	0c1b      	lsrs	r3, r3, #16
10016cc0:	4358      	muls	r0, r3
10016cc2:	4366      	muls	r6, r4
10016cc4:	4353      	muls	r3, r2
10016cc6:	4354      	muls	r4, r2
10016cc8:	199a      	adds	r2, r3, r6
10016cca:	0c03      	lsrs	r3, r0, #16
10016ccc:	189b      	adds	r3, r3, r2
10016cce:	429e      	cmp	r6, r3
10016cd0:	d903      	bls.n	10016cda <__aeabi_ddiv+0x3aa>
10016cd2:	2280      	movs	r2, #128	; 0x80
10016cd4:	0252      	lsls	r2, r2, #9
10016cd6:	4694      	mov	ip, r2
10016cd8:	4464      	add	r4, ip
10016cda:	0c1a      	lsrs	r2, r3, #16
10016cdc:	0400      	lsls	r0, r0, #16
10016cde:	041b      	lsls	r3, r3, #16
10016ce0:	0c00      	lsrs	r0, r0, #16
10016ce2:	1914      	adds	r4, r2, r4
10016ce4:	181b      	adds	r3, r3, r0
10016ce6:	42a5      	cmp	r5, r4
10016ce8:	d350      	bcc.n	10016d8c <__aeabi_ddiv+0x45c>
10016cea:	d04d      	beq.n	10016d88 <__aeabi_ddiv+0x458>
10016cec:	2301      	movs	r3, #1
10016cee:	4319      	orrs	r1, r3
10016cf0:	4a96      	ldr	r2, [pc, #600]	; (10016f4c <__aeabi_ddiv+0x61c>)
10016cf2:	9b01      	ldr	r3, [sp, #4]
10016cf4:	4694      	mov	ip, r2
10016cf6:	4463      	add	r3, ip
10016cf8:	2b00      	cmp	r3, #0
10016cfa:	dc00      	bgt.n	10016cfe <__aeabi_ddiv+0x3ce>
10016cfc:	e6f3      	b.n	10016ae6 <__aeabi_ddiv+0x1b6>
10016cfe:	074a      	lsls	r2, r1, #29
10016d00:	d009      	beq.n	10016d16 <__aeabi_ddiv+0x3e6>
10016d02:	220f      	movs	r2, #15
10016d04:	400a      	ands	r2, r1
10016d06:	2a04      	cmp	r2, #4
10016d08:	d005      	beq.n	10016d16 <__aeabi_ddiv+0x3e6>
10016d0a:	1d0a      	adds	r2, r1, #4
10016d0c:	428a      	cmp	r2, r1
10016d0e:	4189      	sbcs	r1, r1
10016d10:	4249      	negs	r1, r1
10016d12:	448b      	add	fp, r1
10016d14:	0011      	movs	r1, r2
10016d16:	465a      	mov	r2, fp
10016d18:	01d2      	lsls	r2, r2, #7
10016d1a:	d508      	bpl.n	10016d2e <__aeabi_ddiv+0x3fe>
10016d1c:	465a      	mov	r2, fp
10016d1e:	4b8c      	ldr	r3, [pc, #560]	; (10016f50 <__aeabi_ddiv+0x620>)
10016d20:	401a      	ands	r2, r3
10016d22:	4693      	mov	fp, r2
10016d24:	2280      	movs	r2, #128	; 0x80
10016d26:	00d2      	lsls	r2, r2, #3
10016d28:	4694      	mov	ip, r2
10016d2a:	9b01      	ldr	r3, [sp, #4]
10016d2c:	4463      	add	r3, ip
10016d2e:	4a89      	ldr	r2, [pc, #548]	; (10016f54 <__aeabi_ddiv+0x624>)
10016d30:	4293      	cmp	r3, r2
10016d32:	dd00      	ble.n	10016d36 <__aeabi_ddiv+0x406>
10016d34:	e65b      	b.n	100169ee <__aeabi_ddiv+0xbe>
10016d36:	465a      	mov	r2, fp
10016d38:	08c9      	lsrs	r1, r1, #3
10016d3a:	0750      	lsls	r0, r2, #29
10016d3c:	4308      	orrs	r0, r1
10016d3e:	0256      	lsls	r6, r2, #9
10016d40:	4651      	mov	r1, sl
10016d42:	2201      	movs	r2, #1
10016d44:	055b      	lsls	r3, r3, #21
10016d46:	4681      	mov	r9, r0
10016d48:	0b36      	lsrs	r6, r6, #12
10016d4a:	0d5b      	lsrs	r3, r3, #21
10016d4c:	400a      	ands	r2, r1
10016d4e:	e655      	b.n	100169fc <__aeabi_ddiv+0xcc>
10016d50:	2380      	movs	r3, #128	; 0x80
10016d52:	031b      	lsls	r3, r3, #12
10016d54:	421e      	tst	r6, r3
10016d56:	d011      	beq.n	10016d7c <__aeabi_ddiv+0x44c>
10016d58:	465a      	mov	r2, fp
10016d5a:	421a      	tst	r2, r3
10016d5c:	d10e      	bne.n	10016d7c <__aeabi_ddiv+0x44c>
10016d5e:	465e      	mov	r6, fp
10016d60:	431e      	orrs	r6, r3
10016d62:	0336      	lsls	r6, r6, #12
10016d64:	0b36      	lsrs	r6, r6, #12
10016d66:	002a      	movs	r2, r5
10016d68:	4689      	mov	r9, r1
10016d6a:	4b7b      	ldr	r3, [pc, #492]	; (10016f58 <__aeabi_ddiv+0x628>)
10016d6c:	e646      	b.n	100169fc <__aeabi_ddiv+0xcc>
10016d6e:	2b03      	cmp	r3, #3
10016d70:	d100      	bne.n	10016d74 <__aeabi_ddiv+0x444>
10016d72:	e0e1      	b.n	10016f38 <__aeabi_ddiv+0x608>
10016d74:	2b01      	cmp	r3, #1
10016d76:	d1bb      	bne.n	10016cf0 <__aeabi_ddiv+0x3c0>
10016d78:	401a      	ands	r2, r3
10016d7a:	e6bb      	b.n	10016af4 <__aeabi_ddiv+0x1c4>
10016d7c:	431e      	orrs	r6, r3
10016d7e:	0336      	lsls	r6, r6, #12
10016d80:	0b36      	lsrs	r6, r6, #12
10016d82:	4642      	mov	r2, r8
10016d84:	4b74      	ldr	r3, [pc, #464]	; (10016f58 <__aeabi_ddiv+0x628>)
10016d86:	e639      	b.n	100169fc <__aeabi_ddiv+0xcc>
10016d88:	2b00      	cmp	r3, #0
10016d8a:	d0b1      	beq.n	10016cf0 <__aeabi_ddiv+0x3c0>
10016d8c:	197d      	adds	r5, r7, r5
10016d8e:	1e4a      	subs	r2, r1, #1
10016d90:	42af      	cmp	r7, r5
10016d92:	d952      	bls.n	10016e3a <__aeabi_ddiv+0x50a>
10016d94:	0011      	movs	r1, r2
10016d96:	42a5      	cmp	r5, r4
10016d98:	d1a8      	bne.n	10016cec <__aeabi_ddiv+0x3bc>
10016d9a:	9a03      	ldr	r2, [sp, #12]
10016d9c:	429a      	cmp	r2, r3
10016d9e:	d1a5      	bne.n	10016cec <__aeabi_ddiv+0x3bc>
10016da0:	e7a6      	b.n	10016cf0 <__aeabi_ddiv+0x3c0>
10016da2:	0003      	movs	r3, r0
10016da4:	003e      	movs	r6, r7
10016da6:	3b28      	subs	r3, #40	; 0x28
10016da8:	409e      	lsls	r6, r3
10016daa:	2300      	movs	r3, #0
10016dac:	4699      	mov	r9, r3
10016dae:	e654      	b.n	10016a5a <__aeabi_ddiv+0x12a>
10016db0:	f001 f940 	bl	10018034 <__clzsi2>
10016db4:	3020      	adds	r0, #32
10016db6:	e641      	b.n	10016a3c <__aeabi_ddiv+0x10c>
10016db8:	0003      	movs	r3, r0
10016dba:	4652      	mov	r2, sl
10016dbc:	3b28      	subs	r3, #40	; 0x28
10016dbe:	409a      	lsls	r2, r3
10016dc0:	2100      	movs	r1, #0
10016dc2:	4693      	mov	fp, r2
10016dc4:	e677      	b.n	10016ab6 <__aeabi_ddiv+0x186>
10016dc6:	4650      	mov	r0, sl
10016dc8:	f001 f934 	bl	10018034 <__clzsi2>
10016dcc:	3020      	adds	r0, #32
10016dce:	e65e      	b.n	10016a8e <__aeabi_ddiv+0x15e>
10016dd0:	9b02      	ldr	r3, [sp, #8]
10016dd2:	2600      	movs	r6, #0
10016dd4:	42ab      	cmp	r3, r5
10016dd6:	d300      	bcc.n	10016dda <__aeabi_ddiv+0x4aa>
10016dd8:	e723      	b.n	10016c22 <__aeabi_ddiv+0x2f2>
10016dda:	9e03      	ldr	r6, [sp, #12]
10016ddc:	9902      	ldr	r1, [sp, #8]
10016dde:	46b4      	mov	ip, r6
10016de0:	4461      	add	r1, ip
10016de2:	4688      	mov	r8, r1
10016de4:	45b0      	cmp	r8, r6
10016de6:	41b6      	sbcs	r6, r6
10016de8:	465b      	mov	r3, fp
10016dea:	4276      	negs	r6, r6
10016dec:	19f6      	adds	r6, r6, r7
10016dee:	18b2      	adds	r2, r6, r2
10016df0:	3b01      	subs	r3, #1
10016df2:	9102      	str	r1, [sp, #8]
10016df4:	4297      	cmp	r7, r2
10016df6:	d213      	bcs.n	10016e20 <__aeabi_ddiv+0x4f0>
10016df8:	4290      	cmp	r0, r2
10016dfa:	d84f      	bhi.n	10016e9c <__aeabi_ddiv+0x56c>
10016dfc:	d100      	bne.n	10016e00 <__aeabi_ddiv+0x4d0>
10016dfe:	e08e      	b.n	10016f1e <__aeabi_ddiv+0x5ee>
10016e00:	1a16      	subs	r6, r2, r0
10016e02:	469b      	mov	fp, r3
10016e04:	e70d      	b.n	10016c22 <__aeabi_ddiv+0x2f2>
10016e06:	4589      	cmp	r9, r1
10016e08:	d200      	bcs.n	10016e0c <__aeabi_ddiv+0x4dc>
10016e0a:	e68e      	b.n	10016b2a <__aeabi_ddiv+0x1fa>
10016e0c:	0874      	lsrs	r4, r6, #1
10016e0e:	464b      	mov	r3, r9
10016e10:	07f6      	lsls	r6, r6, #31
10016e12:	0035      	movs	r5, r6
10016e14:	085b      	lsrs	r3, r3, #1
10016e16:	431d      	orrs	r5, r3
10016e18:	464b      	mov	r3, r9
10016e1a:	07db      	lsls	r3, r3, #31
10016e1c:	9302      	str	r3, [sp, #8]
10016e1e:	e68b      	b.n	10016b38 <__aeabi_ddiv+0x208>
10016e20:	4297      	cmp	r7, r2
10016e22:	d1ed      	bne.n	10016e00 <__aeabi_ddiv+0x4d0>
10016e24:	9903      	ldr	r1, [sp, #12]
10016e26:	9c02      	ldr	r4, [sp, #8]
10016e28:	42a1      	cmp	r1, r4
10016e2a:	d9e5      	bls.n	10016df8 <__aeabi_ddiv+0x4c8>
10016e2c:	1a3e      	subs	r6, r7, r0
10016e2e:	469b      	mov	fp, r3
10016e30:	e6f7      	b.n	10016c22 <__aeabi_ddiv+0x2f2>
10016e32:	4698      	mov	r8, r3
10016e34:	e6ca      	b.n	10016bcc <__aeabi_ddiv+0x29c>
10016e36:	001e      	movs	r6, r3
10016e38:	e6a5      	b.n	10016b86 <__aeabi_ddiv+0x256>
10016e3a:	42ac      	cmp	r4, r5
10016e3c:	d83e      	bhi.n	10016ebc <__aeabi_ddiv+0x58c>
10016e3e:	d074      	beq.n	10016f2a <__aeabi_ddiv+0x5fa>
10016e40:	0011      	movs	r1, r2
10016e42:	e753      	b.n	10016cec <__aeabi_ddiv+0x3bc>
10016e44:	2101      	movs	r1, #1
10016e46:	4249      	negs	r1, r1
10016e48:	e752      	b.n	10016cf0 <__aeabi_ddiv+0x3c0>
10016e4a:	001c      	movs	r4, r3
10016e4c:	e70e      	b.n	10016c6c <__aeabi_ddiv+0x33c>
10016e4e:	001e      	movs	r6, r3
10016e50:	e72b      	b.n	10016caa <__aeabi_ddiv+0x37a>
10016e52:	2d1f      	cmp	r5, #31
10016e54:	dc3c      	bgt.n	10016ed0 <__aeabi_ddiv+0x5a0>
10016e56:	2320      	movs	r3, #32
10016e58:	000a      	movs	r2, r1
10016e5a:	4658      	mov	r0, fp
10016e5c:	1b5b      	subs	r3, r3, r5
10016e5e:	4098      	lsls	r0, r3
10016e60:	40ea      	lsrs	r2, r5
10016e62:	4099      	lsls	r1, r3
10016e64:	4302      	orrs	r2, r0
10016e66:	1e48      	subs	r0, r1, #1
10016e68:	4181      	sbcs	r1, r0
10016e6a:	465e      	mov	r6, fp
10016e6c:	4311      	orrs	r1, r2
10016e6e:	40ee      	lsrs	r6, r5
10016e70:	074b      	lsls	r3, r1, #29
10016e72:	d009      	beq.n	10016e88 <__aeabi_ddiv+0x558>
10016e74:	230f      	movs	r3, #15
10016e76:	400b      	ands	r3, r1
10016e78:	2b04      	cmp	r3, #4
10016e7a:	d005      	beq.n	10016e88 <__aeabi_ddiv+0x558>
10016e7c:	000b      	movs	r3, r1
10016e7e:	1d19      	adds	r1, r3, #4
10016e80:	4299      	cmp	r1, r3
10016e82:	419b      	sbcs	r3, r3
10016e84:	425b      	negs	r3, r3
10016e86:	18f6      	adds	r6, r6, r3
10016e88:	0233      	lsls	r3, r6, #8
10016e8a:	d53c      	bpl.n	10016f06 <__aeabi_ddiv+0x5d6>
10016e8c:	4653      	mov	r3, sl
10016e8e:	2201      	movs	r2, #1
10016e90:	2100      	movs	r1, #0
10016e92:	401a      	ands	r2, r3
10016e94:	2600      	movs	r6, #0
10016e96:	2301      	movs	r3, #1
10016e98:	4689      	mov	r9, r1
10016e9a:	e5af      	b.n	100169fc <__aeabi_ddiv+0xcc>
10016e9c:	2302      	movs	r3, #2
10016e9e:	425b      	negs	r3, r3
10016ea0:	469c      	mov	ip, r3
10016ea2:	9c03      	ldr	r4, [sp, #12]
10016ea4:	44e3      	add	fp, ip
10016ea6:	46a4      	mov	ip, r4
10016ea8:	9b02      	ldr	r3, [sp, #8]
10016eaa:	4463      	add	r3, ip
10016eac:	4698      	mov	r8, r3
10016eae:	45a0      	cmp	r8, r4
10016eb0:	41b6      	sbcs	r6, r6
10016eb2:	4276      	negs	r6, r6
10016eb4:	19f6      	adds	r6, r6, r7
10016eb6:	9302      	str	r3, [sp, #8]
10016eb8:	18b2      	adds	r2, r6, r2
10016eba:	e6b1      	b.n	10016c20 <__aeabi_ddiv+0x2f0>
10016ebc:	9803      	ldr	r0, [sp, #12]
10016ebe:	1e8a      	subs	r2, r1, #2
10016ec0:	0041      	lsls	r1, r0, #1
10016ec2:	4281      	cmp	r1, r0
10016ec4:	41b6      	sbcs	r6, r6
10016ec6:	4276      	negs	r6, r6
10016ec8:	19f6      	adds	r6, r6, r7
10016eca:	19ad      	adds	r5, r5, r6
10016ecc:	9103      	str	r1, [sp, #12]
10016ece:	e761      	b.n	10016d94 <__aeabi_ddiv+0x464>
10016ed0:	221f      	movs	r2, #31
10016ed2:	4252      	negs	r2, r2
10016ed4:	1ad3      	subs	r3, r2, r3
10016ed6:	465a      	mov	r2, fp
10016ed8:	40da      	lsrs	r2, r3
10016eda:	0013      	movs	r3, r2
10016edc:	2d20      	cmp	r5, #32
10016ede:	d029      	beq.n	10016f34 <__aeabi_ddiv+0x604>
10016ee0:	2240      	movs	r2, #64	; 0x40
10016ee2:	4658      	mov	r0, fp
10016ee4:	1b55      	subs	r5, r2, r5
10016ee6:	40a8      	lsls	r0, r5
10016ee8:	4301      	orrs	r1, r0
10016eea:	1e48      	subs	r0, r1, #1
10016eec:	4181      	sbcs	r1, r0
10016eee:	2007      	movs	r0, #7
10016ef0:	430b      	orrs	r3, r1
10016ef2:	4018      	ands	r0, r3
10016ef4:	2600      	movs	r6, #0
10016ef6:	2800      	cmp	r0, #0
10016ef8:	d009      	beq.n	10016f0e <__aeabi_ddiv+0x5de>
10016efa:	220f      	movs	r2, #15
10016efc:	2600      	movs	r6, #0
10016efe:	401a      	ands	r2, r3
10016f00:	0019      	movs	r1, r3
10016f02:	2a04      	cmp	r2, #4
10016f04:	d1bb      	bne.n	10016e7e <__aeabi_ddiv+0x54e>
10016f06:	000b      	movs	r3, r1
10016f08:	0770      	lsls	r0, r6, #29
10016f0a:	0276      	lsls	r6, r6, #9
10016f0c:	0b36      	lsrs	r6, r6, #12
10016f0e:	08db      	lsrs	r3, r3, #3
10016f10:	4303      	orrs	r3, r0
10016f12:	4699      	mov	r9, r3
10016f14:	2201      	movs	r2, #1
10016f16:	4653      	mov	r3, sl
10016f18:	401a      	ands	r2, r3
10016f1a:	2300      	movs	r3, #0
10016f1c:	e56e      	b.n	100169fc <__aeabi_ddiv+0xcc>
10016f1e:	9902      	ldr	r1, [sp, #8]
10016f20:	428d      	cmp	r5, r1
10016f22:	d8bb      	bhi.n	10016e9c <__aeabi_ddiv+0x56c>
10016f24:	469b      	mov	fp, r3
10016f26:	2600      	movs	r6, #0
10016f28:	e67b      	b.n	10016c22 <__aeabi_ddiv+0x2f2>
10016f2a:	9803      	ldr	r0, [sp, #12]
10016f2c:	4298      	cmp	r0, r3
10016f2e:	d3c5      	bcc.n	10016ebc <__aeabi_ddiv+0x58c>
10016f30:	0011      	movs	r1, r2
10016f32:	e732      	b.n	10016d9a <__aeabi_ddiv+0x46a>
10016f34:	2000      	movs	r0, #0
10016f36:	e7d7      	b.n	10016ee8 <__aeabi_ddiv+0x5b8>
10016f38:	2680      	movs	r6, #128	; 0x80
10016f3a:	465b      	mov	r3, fp
10016f3c:	0336      	lsls	r6, r6, #12
10016f3e:	431e      	orrs	r6, r3
10016f40:	0336      	lsls	r6, r6, #12
10016f42:	0b36      	lsrs	r6, r6, #12
10016f44:	9a00      	ldr	r2, [sp, #0]
10016f46:	4689      	mov	r9, r1
10016f48:	4b03      	ldr	r3, [pc, #12]	; (10016f58 <__aeabi_ddiv+0x628>)
10016f4a:	e557      	b.n	100169fc <__aeabi_ddiv+0xcc>
10016f4c:	000003ff 	.word	0x000003ff
10016f50:	feffffff 	.word	0xfeffffff
10016f54:	000007fe 	.word	0x000007fe
10016f58:	000007ff 	.word	0x000007ff

10016f5c <__eqdf2>:
10016f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
10016f5e:	465f      	mov	r7, fp
10016f60:	4656      	mov	r6, sl
10016f62:	464d      	mov	r5, r9
10016f64:	4644      	mov	r4, r8
10016f66:	b4f0      	push	{r4, r5, r6, r7}
10016f68:	031f      	lsls	r7, r3, #12
10016f6a:	005c      	lsls	r4, r3, #1
10016f6c:	0fdb      	lsrs	r3, r3, #31
10016f6e:	469a      	mov	sl, r3
10016f70:	4b19      	ldr	r3, [pc, #100]	; (10016fd8 <__eqdf2+0x7c>)
10016f72:	030e      	lsls	r6, r1, #12
10016f74:	004d      	lsls	r5, r1, #1
10016f76:	0fc9      	lsrs	r1, r1, #31
10016f78:	4680      	mov	r8, r0
10016f7a:	0b36      	lsrs	r6, r6, #12
10016f7c:	0d6d      	lsrs	r5, r5, #21
10016f7e:	468b      	mov	fp, r1
10016f80:	4691      	mov	r9, r2
10016f82:	0b3f      	lsrs	r7, r7, #12
10016f84:	0d64      	lsrs	r4, r4, #21
10016f86:	429d      	cmp	r5, r3
10016f88:	d019      	beq.n	10016fbe <__eqdf2+0x62>
10016f8a:	4b13      	ldr	r3, [pc, #76]	; (10016fd8 <__eqdf2+0x7c>)
10016f8c:	429c      	cmp	r4, r3
10016f8e:	d01b      	beq.n	10016fc8 <__eqdf2+0x6c>
10016f90:	2301      	movs	r3, #1
10016f92:	42a5      	cmp	r5, r4
10016f94:	d006      	beq.n	10016fa4 <__eqdf2+0x48>
10016f96:	0018      	movs	r0, r3
10016f98:	bc3c      	pop	{r2, r3, r4, r5}
10016f9a:	4690      	mov	r8, r2
10016f9c:	4699      	mov	r9, r3
10016f9e:	46a2      	mov	sl, r4
10016fa0:	46ab      	mov	fp, r5
10016fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10016fa4:	42be      	cmp	r6, r7
10016fa6:	d1f6      	bne.n	10016f96 <__eqdf2+0x3a>
10016fa8:	45c8      	cmp	r8, r9
10016faa:	d1f4      	bne.n	10016f96 <__eqdf2+0x3a>
10016fac:	45d3      	cmp	fp, sl
10016fae:	d010      	beq.n	10016fd2 <__eqdf2+0x76>
10016fb0:	2d00      	cmp	r5, #0
10016fb2:	d1f0      	bne.n	10016f96 <__eqdf2+0x3a>
10016fb4:	4330      	orrs	r0, r6
10016fb6:	0003      	movs	r3, r0
10016fb8:	1e5a      	subs	r2, r3, #1
10016fba:	4193      	sbcs	r3, r2
10016fbc:	e7eb      	b.n	10016f96 <__eqdf2+0x3a>
10016fbe:	0031      	movs	r1, r6
10016fc0:	2301      	movs	r3, #1
10016fc2:	4301      	orrs	r1, r0
10016fc4:	d1e7      	bne.n	10016f96 <__eqdf2+0x3a>
10016fc6:	e7e0      	b.n	10016f8a <__eqdf2+0x2e>
10016fc8:	433a      	orrs	r2, r7
10016fca:	2301      	movs	r3, #1
10016fcc:	2a00      	cmp	r2, #0
10016fce:	d1e2      	bne.n	10016f96 <__eqdf2+0x3a>
10016fd0:	e7de      	b.n	10016f90 <__eqdf2+0x34>
10016fd2:	2300      	movs	r3, #0
10016fd4:	e7df      	b.n	10016f96 <__eqdf2+0x3a>
10016fd6:	46c0      	nop			; (mov r8, r8)
10016fd8:	000007ff 	.word	0x000007ff

10016fdc <__gedf2>:
10016fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
10016fde:	465f      	mov	r7, fp
10016fe0:	4644      	mov	r4, r8
10016fe2:	4656      	mov	r6, sl
10016fe4:	464d      	mov	r5, r9
10016fe6:	b4f0      	push	{r4, r5, r6, r7}
10016fe8:	031f      	lsls	r7, r3, #12
10016fea:	0b3c      	lsrs	r4, r7, #12
10016fec:	4f2c      	ldr	r7, [pc, #176]	; (100170a0 <__gedf2+0xc4>)
10016fee:	030e      	lsls	r6, r1, #12
10016ff0:	004d      	lsls	r5, r1, #1
10016ff2:	46a3      	mov	fp, r4
10016ff4:	005c      	lsls	r4, r3, #1
10016ff6:	4684      	mov	ip, r0
10016ff8:	0b36      	lsrs	r6, r6, #12
10016ffa:	0d6d      	lsrs	r5, r5, #21
10016ffc:	0fc9      	lsrs	r1, r1, #31
10016ffe:	4690      	mov	r8, r2
10017000:	0d64      	lsrs	r4, r4, #21
10017002:	0fdb      	lsrs	r3, r3, #31
10017004:	42bd      	cmp	r5, r7
10017006:	d02b      	beq.n	10017060 <__gedf2+0x84>
10017008:	4f25      	ldr	r7, [pc, #148]	; (100170a0 <__gedf2+0xc4>)
1001700a:	42bc      	cmp	r4, r7
1001700c:	d02e      	beq.n	1001706c <__gedf2+0x90>
1001700e:	2d00      	cmp	r5, #0
10017010:	d10e      	bne.n	10017030 <__gedf2+0x54>
10017012:	4330      	orrs	r0, r6
10017014:	0007      	movs	r7, r0
10017016:	4681      	mov	r9, r0
10017018:	4278      	negs	r0, r7
1001701a:	4178      	adcs	r0, r7
1001701c:	2c00      	cmp	r4, #0
1001701e:	d117      	bne.n	10017050 <__gedf2+0x74>
10017020:	465f      	mov	r7, fp
10017022:	433a      	orrs	r2, r7
10017024:	d114      	bne.n	10017050 <__gedf2+0x74>
10017026:	464b      	mov	r3, r9
10017028:	2000      	movs	r0, #0
1001702a:	2b00      	cmp	r3, #0
1001702c:	d00a      	beq.n	10017044 <__gedf2+0x68>
1001702e:	e006      	b.n	1001703e <__gedf2+0x62>
10017030:	2c00      	cmp	r4, #0
10017032:	d102      	bne.n	1001703a <__gedf2+0x5e>
10017034:	4658      	mov	r0, fp
10017036:	4302      	orrs	r2, r0
10017038:	d001      	beq.n	1001703e <__gedf2+0x62>
1001703a:	4299      	cmp	r1, r3
1001703c:	d01a      	beq.n	10017074 <__gedf2+0x98>
1001703e:	2301      	movs	r3, #1
10017040:	4248      	negs	r0, r1
10017042:	4318      	orrs	r0, r3
10017044:	bc3c      	pop	{r2, r3, r4, r5}
10017046:	4690      	mov	r8, r2
10017048:	4699      	mov	r9, r3
1001704a:	46a2      	mov	sl, r4
1001704c:	46ab      	mov	fp, r5
1001704e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10017050:	2800      	cmp	r0, #0
10017052:	d0f2      	beq.n	1001703a <__gedf2+0x5e>
10017054:	4258      	negs	r0, r3
10017056:	4158      	adcs	r0, r3
10017058:	2201      	movs	r2, #1
1001705a:	4240      	negs	r0, r0
1001705c:	4310      	orrs	r0, r2
1001705e:	e7f1      	b.n	10017044 <__gedf2+0x68>
10017060:	0037      	movs	r7, r6
10017062:	4307      	orrs	r7, r0
10017064:	d0d0      	beq.n	10017008 <__gedf2+0x2c>
10017066:	2002      	movs	r0, #2
10017068:	4240      	negs	r0, r0
1001706a:	e7eb      	b.n	10017044 <__gedf2+0x68>
1001706c:	465f      	mov	r7, fp
1001706e:	4317      	orrs	r7, r2
10017070:	d0cd      	beq.n	1001700e <__gedf2+0x32>
10017072:	e7f8      	b.n	10017066 <__gedf2+0x8a>
10017074:	42a5      	cmp	r5, r4
10017076:	dce2      	bgt.n	1001703e <__gedf2+0x62>
10017078:	db05      	blt.n	10017086 <__gedf2+0xaa>
1001707a:	455e      	cmp	r6, fp
1001707c:	d8df      	bhi.n	1001703e <__gedf2+0x62>
1001707e:	d008      	beq.n	10017092 <__gedf2+0xb6>
10017080:	2000      	movs	r0, #0
10017082:	455e      	cmp	r6, fp
10017084:	d2de      	bcs.n	10017044 <__gedf2+0x68>
10017086:	4248      	negs	r0, r1
10017088:	4148      	adcs	r0, r1
1001708a:	2301      	movs	r3, #1
1001708c:	4240      	negs	r0, r0
1001708e:	4318      	orrs	r0, r3
10017090:	e7d8      	b.n	10017044 <__gedf2+0x68>
10017092:	45c4      	cmp	ip, r8
10017094:	d8d3      	bhi.n	1001703e <__gedf2+0x62>
10017096:	2000      	movs	r0, #0
10017098:	45c4      	cmp	ip, r8
1001709a:	d3f4      	bcc.n	10017086 <__gedf2+0xaa>
1001709c:	e7d2      	b.n	10017044 <__gedf2+0x68>
1001709e:	46c0      	nop			; (mov r8, r8)
100170a0:	000007ff 	.word	0x000007ff

100170a4 <__ledf2>:
100170a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100170a6:	465f      	mov	r7, fp
100170a8:	464d      	mov	r5, r9
100170aa:	4644      	mov	r4, r8
100170ac:	4656      	mov	r6, sl
100170ae:	b4f0      	push	{r4, r5, r6, r7}
100170b0:	031c      	lsls	r4, r3, #12
100170b2:	0b24      	lsrs	r4, r4, #12
100170b4:	46a4      	mov	ip, r4
100170b6:	4c2f      	ldr	r4, [pc, #188]	; (10017174 <__ledf2+0xd0>)
100170b8:	030f      	lsls	r7, r1, #12
100170ba:	004d      	lsls	r5, r1, #1
100170bc:	005e      	lsls	r6, r3, #1
100170be:	0fc9      	lsrs	r1, r1, #31
100170c0:	4680      	mov	r8, r0
100170c2:	0b3f      	lsrs	r7, r7, #12
100170c4:	0d6d      	lsrs	r5, r5, #21
100170c6:	468b      	mov	fp, r1
100170c8:	4691      	mov	r9, r2
100170ca:	0d76      	lsrs	r6, r6, #21
100170cc:	0fdb      	lsrs	r3, r3, #31
100170ce:	42a5      	cmp	r5, r4
100170d0:	d020      	beq.n	10017114 <__ledf2+0x70>
100170d2:	4c28      	ldr	r4, [pc, #160]	; (10017174 <__ledf2+0xd0>)
100170d4:	42a6      	cmp	r6, r4
100170d6:	d022      	beq.n	1001711e <__ledf2+0x7a>
100170d8:	2d00      	cmp	r5, #0
100170da:	d112      	bne.n	10017102 <__ledf2+0x5e>
100170dc:	4338      	orrs	r0, r7
100170de:	4244      	negs	r4, r0
100170e0:	4144      	adcs	r4, r0
100170e2:	2e00      	cmp	r6, #0
100170e4:	d020      	beq.n	10017128 <__ledf2+0x84>
100170e6:	2c00      	cmp	r4, #0
100170e8:	d00d      	beq.n	10017106 <__ledf2+0x62>
100170ea:	425c      	negs	r4, r3
100170ec:	4163      	adcs	r3, r4
100170ee:	2401      	movs	r4, #1
100170f0:	425b      	negs	r3, r3
100170f2:	431c      	orrs	r4, r3
100170f4:	0020      	movs	r0, r4
100170f6:	bc3c      	pop	{r2, r3, r4, r5}
100170f8:	4690      	mov	r8, r2
100170fa:	4699      	mov	r9, r3
100170fc:	46a2      	mov	sl, r4
100170fe:	46ab      	mov	fp, r5
10017100:	bdf0      	pop	{r4, r5, r6, r7, pc}
10017102:	2e00      	cmp	r6, #0
10017104:	d017      	beq.n	10017136 <__ledf2+0x92>
10017106:	455b      	cmp	r3, fp
10017108:	d019      	beq.n	1001713e <__ledf2+0x9a>
1001710a:	465b      	mov	r3, fp
1001710c:	425c      	negs	r4, r3
1001710e:	2301      	movs	r3, #1
10017110:	431c      	orrs	r4, r3
10017112:	e7ef      	b.n	100170f4 <__ledf2+0x50>
10017114:	0039      	movs	r1, r7
10017116:	2402      	movs	r4, #2
10017118:	4301      	orrs	r1, r0
1001711a:	d1eb      	bne.n	100170f4 <__ledf2+0x50>
1001711c:	e7d9      	b.n	100170d2 <__ledf2+0x2e>
1001711e:	4661      	mov	r1, ip
10017120:	2402      	movs	r4, #2
10017122:	4311      	orrs	r1, r2
10017124:	d1e6      	bne.n	100170f4 <__ledf2+0x50>
10017126:	e7d7      	b.n	100170d8 <__ledf2+0x34>
10017128:	4661      	mov	r1, ip
1001712a:	430a      	orrs	r2, r1
1001712c:	d1db      	bne.n	100170e6 <__ledf2+0x42>
1001712e:	2400      	movs	r4, #0
10017130:	2800      	cmp	r0, #0
10017132:	d0df      	beq.n	100170f4 <__ledf2+0x50>
10017134:	e7e9      	b.n	1001710a <__ledf2+0x66>
10017136:	4661      	mov	r1, ip
10017138:	430a      	orrs	r2, r1
1001713a:	d1e4      	bne.n	10017106 <__ledf2+0x62>
1001713c:	e7e5      	b.n	1001710a <__ledf2+0x66>
1001713e:	42b5      	cmp	r5, r6
10017140:	dd03      	ble.n	1001714a <__ledf2+0xa6>
10017142:	2201      	movs	r2, #1
10017144:	425c      	negs	r4, r3
10017146:	4314      	orrs	r4, r2
10017148:	e7d4      	b.n	100170f4 <__ledf2+0x50>
1001714a:	42b5      	cmp	r5, r6
1001714c:	dbcd      	blt.n	100170ea <__ledf2+0x46>
1001714e:	4567      	cmp	r7, ip
10017150:	d8db      	bhi.n	1001710a <__ledf2+0x66>
10017152:	d009      	beq.n	10017168 <__ledf2+0xc4>
10017154:	2400      	movs	r4, #0
10017156:	4567      	cmp	r7, ip
10017158:	d2cc      	bcs.n	100170f4 <__ledf2+0x50>
1001715a:	4659      	mov	r1, fp
1001715c:	424c      	negs	r4, r1
1001715e:	4161      	adcs	r1, r4
10017160:	2401      	movs	r4, #1
10017162:	4249      	negs	r1, r1
10017164:	430c      	orrs	r4, r1
10017166:	e7c5      	b.n	100170f4 <__ledf2+0x50>
10017168:	45c8      	cmp	r8, r9
1001716a:	d8ce      	bhi.n	1001710a <__ledf2+0x66>
1001716c:	2400      	movs	r4, #0
1001716e:	45c8      	cmp	r8, r9
10017170:	d3f3      	bcc.n	1001715a <__ledf2+0xb6>
10017172:	e7bf      	b.n	100170f4 <__ledf2+0x50>
10017174:	000007ff 	.word	0x000007ff

10017178 <__aeabi_dmul>:
10017178:	b5f0      	push	{r4, r5, r6, r7, lr}
1001717a:	465f      	mov	r7, fp
1001717c:	4656      	mov	r6, sl
1001717e:	464d      	mov	r5, r9
10017180:	4644      	mov	r4, r8
10017182:	b4f0      	push	{r4, r5, r6, r7}
10017184:	030d      	lsls	r5, r1, #12
10017186:	4699      	mov	r9, r3
10017188:	004e      	lsls	r6, r1, #1
1001718a:	0b2b      	lsrs	r3, r5, #12
1001718c:	b087      	sub	sp, #28
1001718e:	0007      	movs	r7, r0
10017190:	4692      	mov	sl, r2
10017192:	4680      	mov	r8, r0
10017194:	469b      	mov	fp, r3
10017196:	0d76      	lsrs	r6, r6, #21
10017198:	0fcc      	lsrs	r4, r1, #31
1001719a:	2e00      	cmp	r6, #0
1001719c:	d069      	beq.n	10017272 <__aeabi_dmul+0xfa>
1001719e:	4b6d      	ldr	r3, [pc, #436]	; (10017354 <__aeabi_dmul+0x1dc>)
100171a0:	429e      	cmp	r6, r3
100171a2:	d035      	beq.n	10017210 <__aeabi_dmul+0x98>
100171a4:	465b      	mov	r3, fp
100171a6:	2280      	movs	r2, #128	; 0x80
100171a8:	00dd      	lsls	r5, r3, #3
100171aa:	0412      	lsls	r2, r2, #16
100171ac:	0f43      	lsrs	r3, r0, #29
100171ae:	4313      	orrs	r3, r2
100171b0:	432b      	orrs	r3, r5
100171b2:	469b      	mov	fp, r3
100171b4:	00c3      	lsls	r3, r0, #3
100171b6:	4698      	mov	r8, r3
100171b8:	4b67      	ldr	r3, [pc, #412]	; (10017358 <__aeabi_dmul+0x1e0>)
100171ba:	2700      	movs	r7, #0
100171bc:	469c      	mov	ip, r3
100171be:	2300      	movs	r3, #0
100171c0:	4466      	add	r6, ip
100171c2:	9301      	str	r3, [sp, #4]
100171c4:	464a      	mov	r2, r9
100171c6:	0315      	lsls	r5, r2, #12
100171c8:	0050      	lsls	r0, r2, #1
100171ca:	0fd2      	lsrs	r2, r2, #31
100171cc:	4653      	mov	r3, sl
100171ce:	0b2d      	lsrs	r5, r5, #12
100171d0:	0d40      	lsrs	r0, r0, #21
100171d2:	4691      	mov	r9, r2
100171d4:	d100      	bne.n	100171d8 <__aeabi_dmul+0x60>
100171d6:	e076      	b.n	100172c6 <__aeabi_dmul+0x14e>
100171d8:	4a5e      	ldr	r2, [pc, #376]	; (10017354 <__aeabi_dmul+0x1dc>)
100171da:	4290      	cmp	r0, r2
100171dc:	d06c      	beq.n	100172b8 <__aeabi_dmul+0x140>
100171de:	2280      	movs	r2, #128	; 0x80
100171e0:	0f5b      	lsrs	r3, r3, #29
100171e2:	0412      	lsls	r2, r2, #16
100171e4:	4313      	orrs	r3, r2
100171e6:	4a5c      	ldr	r2, [pc, #368]	; (10017358 <__aeabi_dmul+0x1e0>)
100171e8:	00ed      	lsls	r5, r5, #3
100171ea:	4694      	mov	ip, r2
100171ec:	431d      	orrs	r5, r3
100171ee:	4653      	mov	r3, sl
100171f0:	2200      	movs	r2, #0
100171f2:	00db      	lsls	r3, r3, #3
100171f4:	4460      	add	r0, ip
100171f6:	4649      	mov	r1, r9
100171f8:	1836      	adds	r6, r6, r0
100171fa:	1c70      	adds	r0, r6, #1
100171fc:	4061      	eors	r1, r4
100171fe:	9002      	str	r0, [sp, #8]
10017200:	4317      	orrs	r7, r2
10017202:	2f0f      	cmp	r7, #15
10017204:	d900      	bls.n	10017208 <__aeabi_dmul+0x90>
10017206:	e0af      	b.n	10017368 <__aeabi_dmul+0x1f0>
10017208:	4854      	ldr	r0, [pc, #336]	; (1001735c <__aeabi_dmul+0x1e4>)
1001720a:	00bf      	lsls	r7, r7, #2
1001720c:	59c7      	ldr	r7, [r0, r7]
1001720e:	46bf      	mov	pc, r7
10017210:	465b      	mov	r3, fp
10017212:	431f      	orrs	r7, r3
10017214:	d000      	beq.n	10017218 <__aeabi_dmul+0xa0>
10017216:	e088      	b.n	1001732a <__aeabi_dmul+0x1b2>
10017218:	2300      	movs	r3, #0
1001721a:	469b      	mov	fp, r3
1001721c:	4698      	mov	r8, r3
1001721e:	3302      	adds	r3, #2
10017220:	2708      	movs	r7, #8
10017222:	9301      	str	r3, [sp, #4]
10017224:	e7ce      	b.n	100171c4 <__aeabi_dmul+0x4c>
10017226:	4649      	mov	r1, r9
10017228:	2a02      	cmp	r2, #2
1001722a:	d06a      	beq.n	10017302 <__aeabi_dmul+0x18a>
1001722c:	2a03      	cmp	r2, #3
1001722e:	d100      	bne.n	10017232 <__aeabi_dmul+0xba>
10017230:	e209      	b.n	10017646 <__aeabi_dmul+0x4ce>
10017232:	2a01      	cmp	r2, #1
10017234:	d000      	beq.n	10017238 <__aeabi_dmul+0xc0>
10017236:	e1bb      	b.n	100175b0 <__aeabi_dmul+0x438>
10017238:	4011      	ands	r1, r2
1001723a:	2200      	movs	r2, #0
1001723c:	2300      	movs	r3, #0
1001723e:	2500      	movs	r5, #0
10017240:	4690      	mov	r8, r2
10017242:	b2cc      	uxtb	r4, r1
10017244:	2100      	movs	r1, #0
10017246:	032d      	lsls	r5, r5, #12
10017248:	0d0a      	lsrs	r2, r1, #20
1001724a:	0512      	lsls	r2, r2, #20
1001724c:	0b2d      	lsrs	r5, r5, #12
1001724e:	4315      	orrs	r5, r2
10017250:	4a43      	ldr	r2, [pc, #268]	; (10017360 <__aeabi_dmul+0x1e8>)
10017252:	051b      	lsls	r3, r3, #20
10017254:	4015      	ands	r5, r2
10017256:	431d      	orrs	r5, r3
10017258:	006d      	lsls	r5, r5, #1
1001725a:	07e4      	lsls	r4, r4, #31
1001725c:	086d      	lsrs	r5, r5, #1
1001725e:	4325      	orrs	r5, r4
10017260:	4640      	mov	r0, r8
10017262:	0029      	movs	r1, r5
10017264:	b007      	add	sp, #28
10017266:	bc3c      	pop	{r2, r3, r4, r5}
10017268:	4690      	mov	r8, r2
1001726a:	4699      	mov	r9, r3
1001726c:	46a2      	mov	sl, r4
1001726e:	46ab      	mov	fp, r5
10017270:	bdf0      	pop	{r4, r5, r6, r7, pc}
10017272:	4303      	orrs	r3, r0
10017274:	d052      	beq.n	1001731c <__aeabi_dmul+0x1a4>
10017276:	465b      	mov	r3, fp
10017278:	2b00      	cmp	r3, #0
1001727a:	d100      	bne.n	1001727e <__aeabi_dmul+0x106>
1001727c:	e18a      	b.n	10017594 <__aeabi_dmul+0x41c>
1001727e:	4658      	mov	r0, fp
10017280:	f000 fed8 	bl	10018034 <__clzsi2>
10017284:	0003      	movs	r3, r0
10017286:	3b0b      	subs	r3, #11
10017288:	2b1c      	cmp	r3, #28
1001728a:	dd00      	ble.n	1001728e <__aeabi_dmul+0x116>
1001728c:	e17b      	b.n	10017586 <__aeabi_dmul+0x40e>
1001728e:	221d      	movs	r2, #29
10017290:	1ad3      	subs	r3, r2, r3
10017292:	003a      	movs	r2, r7
10017294:	0001      	movs	r1, r0
10017296:	465d      	mov	r5, fp
10017298:	40da      	lsrs	r2, r3
1001729a:	3908      	subs	r1, #8
1001729c:	408d      	lsls	r5, r1
1001729e:	0013      	movs	r3, r2
100172a0:	408f      	lsls	r7, r1
100172a2:	432b      	orrs	r3, r5
100172a4:	469b      	mov	fp, r3
100172a6:	46b8      	mov	r8, r7
100172a8:	4b2e      	ldr	r3, [pc, #184]	; (10017364 <__aeabi_dmul+0x1ec>)
100172aa:	2700      	movs	r7, #0
100172ac:	469c      	mov	ip, r3
100172ae:	2300      	movs	r3, #0
100172b0:	4460      	add	r0, ip
100172b2:	4246      	negs	r6, r0
100172b4:	9301      	str	r3, [sp, #4]
100172b6:	e785      	b.n	100171c4 <__aeabi_dmul+0x4c>
100172b8:	4652      	mov	r2, sl
100172ba:	432a      	orrs	r2, r5
100172bc:	d12c      	bne.n	10017318 <__aeabi_dmul+0x1a0>
100172be:	2500      	movs	r5, #0
100172c0:	2300      	movs	r3, #0
100172c2:	2202      	movs	r2, #2
100172c4:	e797      	b.n	100171f6 <__aeabi_dmul+0x7e>
100172c6:	4652      	mov	r2, sl
100172c8:	432a      	orrs	r2, r5
100172ca:	d021      	beq.n	10017310 <__aeabi_dmul+0x198>
100172cc:	2d00      	cmp	r5, #0
100172ce:	d100      	bne.n	100172d2 <__aeabi_dmul+0x15a>
100172d0:	e154      	b.n	1001757c <__aeabi_dmul+0x404>
100172d2:	0028      	movs	r0, r5
100172d4:	f000 feae 	bl	10018034 <__clzsi2>
100172d8:	0003      	movs	r3, r0
100172da:	3b0b      	subs	r3, #11
100172dc:	2b1c      	cmp	r3, #28
100172de:	dd00      	ble.n	100172e2 <__aeabi_dmul+0x16a>
100172e0:	e146      	b.n	10017570 <__aeabi_dmul+0x3f8>
100172e2:	211d      	movs	r1, #29
100172e4:	1acb      	subs	r3, r1, r3
100172e6:	4651      	mov	r1, sl
100172e8:	0002      	movs	r2, r0
100172ea:	40d9      	lsrs	r1, r3
100172ec:	4653      	mov	r3, sl
100172ee:	3a08      	subs	r2, #8
100172f0:	4095      	lsls	r5, r2
100172f2:	4093      	lsls	r3, r2
100172f4:	430d      	orrs	r5, r1
100172f6:	4a1b      	ldr	r2, [pc, #108]	; (10017364 <__aeabi_dmul+0x1ec>)
100172f8:	4694      	mov	ip, r2
100172fa:	4460      	add	r0, ip
100172fc:	4240      	negs	r0, r0
100172fe:	2200      	movs	r2, #0
10017300:	e779      	b.n	100171f6 <__aeabi_dmul+0x7e>
10017302:	2401      	movs	r4, #1
10017304:	2200      	movs	r2, #0
10017306:	400c      	ands	r4, r1
10017308:	4b12      	ldr	r3, [pc, #72]	; (10017354 <__aeabi_dmul+0x1dc>)
1001730a:	2500      	movs	r5, #0
1001730c:	4690      	mov	r8, r2
1001730e:	e799      	b.n	10017244 <__aeabi_dmul+0xcc>
10017310:	2500      	movs	r5, #0
10017312:	2300      	movs	r3, #0
10017314:	2201      	movs	r2, #1
10017316:	e76e      	b.n	100171f6 <__aeabi_dmul+0x7e>
10017318:	2203      	movs	r2, #3
1001731a:	e76c      	b.n	100171f6 <__aeabi_dmul+0x7e>
1001731c:	2300      	movs	r3, #0
1001731e:	469b      	mov	fp, r3
10017320:	4698      	mov	r8, r3
10017322:	3301      	adds	r3, #1
10017324:	2704      	movs	r7, #4
10017326:	9301      	str	r3, [sp, #4]
10017328:	e74c      	b.n	100171c4 <__aeabi_dmul+0x4c>
1001732a:	2303      	movs	r3, #3
1001732c:	270c      	movs	r7, #12
1001732e:	9301      	str	r3, [sp, #4]
10017330:	e748      	b.n	100171c4 <__aeabi_dmul+0x4c>
10017332:	2300      	movs	r3, #0
10017334:	2580      	movs	r5, #128	; 0x80
10017336:	4698      	mov	r8, r3
10017338:	2400      	movs	r4, #0
1001733a:	032d      	lsls	r5, r5, #12
1001733c:	4b05      	ldr	r3, [pc, #20]	; (10017354 <__aeabi_dmul+0x1dc>)
1001733e:	e781      	b.n	10017244 <__aeabi_dmul+0xcc>
10017340:	465d      	mov	r5, fp
10017342:	4643      	mov	r3, r8
10017344:	9a01      	ldr	r2, [sp, #4]
10017346:	e76f      	b.n	10017228 <__aeabi_dmul+0xb0>
10017348:	465d      	mov	r5, fp
1001734a:	4643      	mov	r3, r8
1001734c:	0021      	movs	r1, r4
1001734e:	9a01      	ldr	r2, [sp, #4]
10017350:	e76a      	b.n	10017228 <__aeabi_dmul+0xb0>
10017352:	46c0      	nop			; (mov r8, r8)
10017354:	000007ff 	.word	0x000007ff
10017358:	fffffc01 	.word	0xfffffc01
1001735c:	1001b4cc 	.word	0x1001b4cc
10017360:	800fffff 	.word	0x800fffff
10017364:	000003f3 	.word	0x000003f3
10017368:	4642      	mov	r2, r8
1001736a:	0c12      	lsrs	r2, r2, #16
1001736c:	4691      	mov	r9, r2
1001736e:	0c1a      	lsrs	r2, r3, #16
10017370:	4694      	mov	ip, r2
10017372:	4642      	mov	r2, r8
10017374:	0417      	lsls	r7, r2, #16
10017376:	464a      	mov	r2, r9
10017378:	041b      	lsls	r3, r3, #16
1001737a:	0c1b      	lsrs	r3, r3, #16
1001737c:	435a      	muls	r2, r3
1001737e:	4660      	mov	r0, ip
10017380:	4690      	mov	r8, r2
10017382:	464a      	mov	r2, r9
10017384:	4342      	muls	r2, r0
10017386:	0010      	movs	r0, r2
10017388:	9203      	str	r2, [sp, #12]
1001738a:	4662      	mov	r2, ip
1001738c:	001c      	movs	r4, r3
1001738e:	0c3f      	lsrs	r7, r7, #16
10017390:	437a      	muls	r2, r7
10017392:	437c      	muls	r4, r7
10017394:	4442      	add	r2, r8
10017396:	9201      	str	r2, [sp, #4]
10017398:	0c22      	lsrs	r2, r4, #16
1001739a:	4692      	mov	sl, r2
1001739c:	9a01      	ldr	r2, [sp, #4]
1001739e:	4452      	add	r2, sl
100173a0:	4590      	cmp	r8, r2
100173a2:	d906      	bls.n	100173b2 <__aeabi_dmul+0x23a>
100173a4:	4682      	mov	sl, r0
100173a6:	2080      	movs	r0, #128	; 0x80
100173a8:	0240      	lsls	r0, r0, #9
100173aa:	4680      	mov	r8, r0
100173ac:	44c2      	add	sl, r8
100173ae:	4650      	mov	r0, sl
100173b0:	9003      	str	r0, [sp, #12]
100173b2:	0c10      	lsrs	r0, r2, #16
100173b4:	9004      	str	r0, [sp, #16]
100173b6:	4648      	mov	r0, r9
100173b8:	0424      	lsls	r4, r4, #16
100173ba:	0c24      	lsrs	r4, r4, #16
100173bc:	0412      	lsls	r2, r2, #16
100173be:	1912      	adds	r2, r2, r4
100173c0:	9205      	str	r2, [sp, #20]
100173c2:	0c2a      	lsrs	r2, r5, #16
100173c4:	042d      	lsls	r5, r5, #16
100173c6:	0c2d      	lsrs	r5, r5, #16
100173c8:	4368      	muls	r0, r5
100173ca:	002c      	movs	r4, r5
100173cc:	4682      	mov	sl, r0
100173ce:	4648      	mov	r0, r9
100173d0:	437c      	muls	r4, r7
100173d2:	4350      	muls	r0, r2
100173d4:	4681      	mov	r9, r0
100173d6:	0c20      	lsrs	r0, r4, #16
100173d8:	4680      	mov	r8, r0
100173da:	4357      	muls	r7, r2
100173dc:	4457      	add	r7, sl
100173de:	4447      	add	r7, r8
100173e0:	45ba      	cmp	sl, r7
100173e2:	d903      	bls.n	100173ec <__aeabi_dmul+0x274>
100173e4:	2080      	movs	r0, #128	; 0x80
100173e6:	0240      	lsls	r0, r0, #9
100173e8:	4680      	mov	r8, r0
100173ea:	44c1      	add	r9, r8
100173ec:	0c38      	lsrs	r0, r7, #16
100173ee:	043f      	lsls	r7, r7, #16
100173f0:	46b8      	mov	r8, r7
100173f2:	4448      	add	r0, r9
100173f4:	0424      	lsls	r4, r4, #16
100173f6:	0c24      	lsrs	r4, r4, #16
100173f8:	9001      	str	r0, [sp, #4]
100173fa:	9804      	ldr	r0, [sp, #16]
100173fc:	44a0      	add	r8, r4
100173fe:	4440      	add	r0, r8
10017400:	9004      	str	r0, [sp, #16]
10017402:	4658      	mov	r0, fp
10017404:	0c00      	lsrs	r0, r0, #16
10017406:	4681      	mov	r9, r0
10017408:	4658      	mov	r0, fp
1001740a:	0404      	lsls	r4, r0, #16
1001740c:	0c20      	lsrs	r0, r4, #16
1001740e:	4682      	mov	sl, r0
10017410:	0007      	movs	r7, r0
10017412:	4648      	mov	r0, r9
10017414:	435f      	muls	r7, r3
10017416:	464c      	mov	r4, r9
10017418:	4343      	muls	r3, r0
1001741a:	4660      	mov	r0, ip
1001741c:	4360      	muls	r0, r4
1001741e:	4664      	mov	r4, ip
10017420:	4683      	mov	fp, r0
10017422:	4650      	mov	r0, sl
10017424:	4344      	muls	r4, r0
10017426:	0c38      	lsrs	r0, r7, #16
10017428:	4684      	mov	ip, r0
1001742a:	18e4      	adds	r4, r4, r3
1001742c:	4464      	add	r4, ip
1001742e:	42a3      	cmp	r3, r4
10017430:	d903      	bls.n	1001743a <__aeabi_dmul+0x2c2>
10017432:	2380      	movs	r3, #128	; 0x80
10017434:	025b      	lsls	r3, r3, #9
10017436:	469c      	mov	ip, r3
10017438:	44e3      	add	fp, ip
1001743a:	4648      	mov	r0, r9
1001743c:	043f      	lsls	r7, r7, #16
1001743e:	0c23      	lsrs	r3, r4, #16
10017440:	0c3f      	lsrs	r7, r7, #16
10017442:	0424      	lsls	r4, r4, #16
10017444:	19e4      	adds	r4, r4, r7
10017446:	4657      	mov	r7, sl
10017448:	4368      	muls	r0, r5
1001744a:	436f      	muls	r7, r5
1001744c:	4684      	mov	ip, r0
1001744e:	464d      	mov	r5, r9
10017450:	4650      	mov	r0, sl
10017452:	4355      	muls	r5, r2
10017454:	4342      	muls	r2, r0
10017456:	0c38      	lsrs	r0, r7, #16
10017458:	4681      	mov	r9, r0
1001745a:	4462      	add	r2, ip
1001745c:	444a      	add	r2, r9
1001745e:	445b      	add	r3, fp
10017460:	4594      	cmp	ip, r2
10017462:	d903      	bls.n	1001746c <__aeabi_dmul+0x2f4>
10017464:	2080      	movs	r0, #128	; 0x80
10017466:	0240      	lsls	r0, r0, #9
10017468:	4684      	mov	ip, r0
1001746a:	4465      	add	r5, ip
1001746c:	9803      	ldr	r0, [sp, #12]
1001746e:	043f      	lsls	r7, r7, #16
10017470:	4683      	mov	fp, r0
10017472:	9804      	ldr	r0, [sp, #16]
10017474:	0c3f      	lsrs	r7, r7, #16
10017476:	4684      	mov	ip, r0
10017478:	44e3      	add	fp, ip
1001747a:	45c3      	cmp	fp, r8
1001747c:	4180      	sbcs	r0, r0
1001747e:	4240      	negs	r0, r0
10017480:	4682      	mov	sl, r0
10017482:	0410      	lsls	r0, r2, #16
10017484:	4684      	mov	ip, r0
10017486:	9801      	ldr	r0, [sp, #4]
10017488:	4467      	add	r7, ip
1001748a:	4684      	mov	ip, r0
1001748c:	4467      	add	r7, ip
1001748e:	44a3      	add	fp, r4
10017490:	46bc      	mov	ip, r7
10017492:	45a3      	cmp	fp, r4
10017494:	41a4      	sbcs	r4, r4
10017496:	4699      	mov	r9, r3
10017498:	44d4      	add	ip, sl
1001749a:	4264      	negs	r4, r4
1001749c:	4287      	cmp	r7, r0
1001749e:	41bf      	sbcs	r7, r7
100174a0:	45d4      	cmp	ip, sl
100174a2:	4180      	sbcs	r0, r0
100174a4:	44e1      	add	r9, ip
100174a6:	46a0      	mov	r8, r4
100174a8:	4599      	cmp	r9, r3
100174aa:	419b      	sbcs	r3, r3
100174ac:	427f      	negs	r7, r7
100174ae:	4240      	negs	r0, r0
100174b0:	44c8      	add	r8, r9
100174b2:	4307      	orrs	r7, r0
100174b4:	0c12      	lsrs	r2, r2, #16
100174b6:	18ba      	adds	r2, r7, r2
100174b8:	45a0      	cmp	r8, r4
100174ba:	41a4      	sbcs	r4, r4
100174bc:	425f      	negs	r7, r3
100174be:	003b      	movs	r3, r7
100174c0:	4264      	negs	r4, r4
100174c2:	4323      	orrs	r3, r4
100174c4:	18d7      	adds	r7, r2, r3
100174c6:	4643      	mov	r3, r8
100174c8:	197d      	adds	r5, r7, r5
100174ca:	0ddb      	lsrs	r3, r3, #23
100174cc:	026d      	lsls	r5, r5, #9
100174ce:	431d      	orrs	r5, r3
100174d0:	465b      	mov	r3, fp
100174d2:	025a      	lsls	r2, r3, #9
100174d4:	9b05      	ldr	r3, [sp, #20]
100174d6:	431a      	orrs	r2, r3
100174d8:	1e53      	subs	r3, r2, #1
100174da:	419a      	sbcs	r2, r3
100174dc:	465b      	mov	r3, fp
100174de:	0ddb      	lsrs	r3, r3, #23
100174e0:	431a      	orrs	r2, r3
100174e2:	4643      	mov	r3, r8
100174e4:	025b      	lsls	r3, r3, #9
100174e6:	4313      	orrs	r3, r2
100174e8:	01ea      	lsls	r2, r5, #7
100174ea:	d507      	bpl.n	100174fc <__aeabi_dmul+0x384>
100174ec:	2201      	movs	r2, #1
100174ee:	085c      	lsrs	r4, r3, #1
100174f0:	4013      	ands	r3, r2
100174f2:	4323      	orrs	r3, r4
100174f4:	07ea      	lsls	r2, r5, #31
100174f6:	9e02      	ldr	r6, [sp, #8]
100174f8:	4313      	orrs	r3, r2
100174fa:	086d      	lsrs	r5, r5, #1
100174fc:	4a57      	ldr	r2, [pc, #348]	; (1001765c <__aeabi_dmul+0x4e4>)
100174fe:	18b2      	adds	r2, r6, r2
10017500:	2a00      	cmp	r2, #0
10017502:	dd4b      	ble.n	1001759c <__aeabi_dmul+0x424>
10017504:	0758      	lsls	r0, r3, #29
10017506:	d009      	beq.n	1001751c <__aeabi_dmul+0x3a4>
10017508:	200f      	movs	r0, #15
1001750a:	4018      	ands	r0, r3
1001750c:	2804      	cmp	r0, #4
1001750e:	d005      	beq.n	1001751c <__aeabi_dmul+0x3a4>
10017510:	1d18      	adds	r0, r3, #4
10017512:	4298      	cmp	r0, r3
10017514:	419b      	sbcs	r3, r3
10017516:	425b      	negs	r3, r3
10017518:	18ed      	adds	r5, r5, r3
1001751a:	0003      	movs	r3, r0
1001751c:	01e8      	lsls	r0, r5, #7
1001751e:	d504      	bpl.n	1001752a <__aeabi_dmul+0x3b2>
10017520:	4a4f      	ldr	r2, [pc, #316]	; (10017660 <__aeabi_dmul+0x4e8>)
10017522:	4015      	ands	r5, r2
10017524:	2280      	movs	r2, #128	; 0x80
10017526:	00d2      	lsls	r2, r2, #3
10017528:	18b2      	adds	r2, r6, r2
1001752a:	484e      	ldr	r0, [pc, #312]	; (10017664 <__aeabi_dmul+0x4ec>)
1001752c:	4282      	cmp	r2, r0
1001752e:	dd00      	ble.n	10017532 <__aeabi_dmul+0x3ba>
10017530:	e6e7      	b.n	10017302 <__aeabi_dmul+0x18a>
10017532:	2401      	movs	r4, #1
10017534:	08db      	lsrs	r3, r3, #3
10017536:	0768      	lsls	r0, r5, #29
10017538:	4318      	orrs	r0, r3
1001753a:	026d      	lsls	r5, r5, #9
1001753c:	0553      	lsls	r3, r2, #21
1001753e:	4680      	mov	r8, r0
10017540:	0b2d      	lsrs	r5, r5, #12
10017542:	0d5b      	lsrs	r3, r3, #21
10017544:	400c      	ands	r4, r1
10017546:	e67d      	b.n	10017244 <__aeabi_dmul+0xcc>
10017548:	2280      	movs	r2, #128	; 0x80
1001754a:	4659      	mov	r1, fp
1001754c:	0312      	lsls	r2, r2, #12
1001754e:	4211      	tst	r1, r2
10017550:	d008      	beq.n	10017564 <__aeabi_dmul+0x3ec>
10017552:	4215      	tst	r5, r2
10017554:	d106      	bne.n	10017564 <__aeabi_dmul+0x3ec>
10017556:	4315      	orrs	r5, r2
10017558:	032d      	lsls	r5, r5, #12
1001755a:	4698      	mov	r8, r3
1001755c:	0b2d      	lsrs	r5, r5, #12
1001755e:	464c      	mov	r4, r9
10017560:	4b41      	ldr	r3, [pc, #260]	; (10017668 <__aeabi_dmul+0x4f0>)
10017562:	e66f      	b.n	10017244 <__aeabi_dmul+0xcc>
10017564:	465d      	mov	r5, fp
10017566:	4315      	orrs	r5, r2
10017568:	032d      	lsls	r5, r5, #12
1001756a:	0b2d      	lsrs	r5, r5, #12
1001756c:	4b3e      	ldr	r3, [pc, #248]	; (10017668 <__aeabi_dmul+0x4f0>)
1001756e:	e669      	b.n	10017244 <__aeabi_dmul+0xcc>
10017570:	0003      	movs	r3, r0
10017572:	4655      	mov	r5, sl
10017574:	3b28      	subs	r3, #40	; 0x28
10017576:	409d      	lsls	r5, r3
10017578:	2300      	movs	r3, #0
1001757a:	e6bc      	b.n	100172f6 <__aeabi_dmul+0x17e>
1001757c:	4650      	mov	r0, sl
1001757e:	f000 fd59 	bl	10018034 <__clzsi2>
10017582:	3020      	adds	r0, #32
10017584:	e6a8      	b.n	100172d8 <__aeabi_dmul+0x160>
10017586:	0003      	movs	r3, r0
10017588:	3b28      	subs	r3, #40	; 0x28
1001758a:	409f      	lsls	r7, r3
1001758c:	2300      	movs	r3, #0
1001758e:	46bb      	mov	fp, r7
10017590:	4698      	mov	r8, r3
10017592:	e689      	b.n	100172a8 <__aeabi_dmul+0x130>
10017594:	f000 fd4e 	bl	10018034 <__clzsi2>
10017598:	3020      	adds	r0, #32
1001759a:	e673      	b.n	10017284 <__aeabi_dmul+0x10c>
1001759c:	2401      	movs	r4, #1
1001759e:	1aa6      	subs	r6, r4, r2
100175a0:	2e38      	cmp	r6, #56	; 0x38
100175a2:	dd07      	ble.n	100175b4 <__aeabi_dmul+0x43c>
100175a4:	2200      	movs	r2, #0
100175a6:	400c      	ands	r4, r1
100175a8:	2300      	movs	r3, #0
100175aa:	2500      	movs	r5, #0
100175ac:	4690      	mov	r8, r2
100175ae:	e649      	b.n	10017244 <__aeabi_dmul+0xcc>
100175b0:	9e02      	ldr	r6, [sp, #8]
100175b2:	e7a3      	b.n	100174fc <__aeabi_dmul+0x384>
100175b4:	2e1f      	cmp	r6, #31
100175b6:	dc20      	bgt.n	100175fa <__aeabi_dmul+0x482>
100175b8:	2220      	movs	r2, #32
100175ba:	002c      	movs	r4, r5
100175bc:	0018      	movs	r0, r3
100175be:	1b92      	subs	r2, r2, r6
100175c0:	40f0      	lsrs	r0, r6
100175c2:	4094      	lsls	r4, r2
100175c4:	4093      	lsls	r3, r2
100175c6:	4304      	orrs	r4, r0
100175c8:	1e58      	subs	r0, r3, #1
100175ca:	4183      	sbcs	r3, r0
100175cc:	431c      	orrs	r4, r3
100175ce:	40f5      	lsrs	r5, r6
100175d0:	0763      	lsls	r3, r4, #29
100175d2:	d009      	beq.n	100175e8 <__aeabi_dmul+0x470>
100175d4:	230f      	movs	r3, #15
100175d6:	4023      	ands	r3, r4
100175d8:	2b04      	cmp	r3, #4
100175da:	d005      	beq.n	100175e8 <__aeabi_dmul+0x470>
100175dc:	0023      	movs	r3, r4
100175de:	1d1c      	adds	r4, r3, #4
100175e0:	429c      	cmp	r4, r3
100175e2:	4192      	sbcs	r2, r2
100175e4:	4252      	negs	r2, r2
100175e6:	18ad      	adds	r5, r5, r2
100175e8:	022b      	lsls	r3, r5, #8
100175ea:	d51f      	bpl.n	1001762c <__aeabi_dmul+0x4b4>
100175ec:	2401      	movs	r4, #1
100175ee:	2200      	movs	r2, #0
100175f0:	400c      	ands	r4, r1
100175f2:	2301      	movs	r3, #1
100175f4:	2500      	movs	r5, #0
100175f6:	4690      	mov	r8, r2
100175f8:	e624      	b.n	10017244 <__aeabi_dmul+0xcc>
100175fa:	201f      	movs	r0, #31
100175fc:	002c      	movs	r4, r5
100175fe:	4240      	negs	r0, r0
10017600:	1a82      	subs	r2, r0, r2
10017602:	40d4      	lsrs	r4, r2
10017604:	2e20      	cmp	r6, #32
10017606:	d01c      	beq.n	10017642 <__aeabi_dmul+0x4ca>
10017608:	2240      	movs	r2, #64	; 0x40
1001760a:	1b96      	subs	r6, r2, r6
1001760c:	40b5      	lsls	r5, r6
1001760e:	432b      	orrs	r3, r5
10017610:	1e58      	subs	r0, r3, #1
10017612:	4183      	sbcs	r3, r0
10017614:	2007      	movs	r0, #7
10017616:	4323      	orrs	r3, r4
10017618:	4018      	ands	r0, r3
1001761a:	2500      	movs	r5, #0
1001761c:	2800      	cmp	r0, #0
1001761e:	d009      	beq.n	10017634 <__aeabi_dmul+0x4bc>
10017620:	220f      	movs	r2, #15
10017622:	2500      	movs	r5, #0
10017624:	401a      	ands	r2, r3
10017626:	001c      	movs	r4, r3
10017628:	2a04      	cmp	r2, #4
1001762a:	d1d8      	bne.n	100175de <__aeabi_dmul+0x466>
1001762c:	0023      	movs	r3, r4
1001762e:	0768      	lsls	r0, r5, #29
10017630:	026d      	lsls	r5, r5, #9
10017632:	0b2d      	lsrs	r5, r5, #12
10017634:	2401      	movs	r4, #1
10017636:	08db      	lsrs	r3, r3, #3
10017638:	4303      	orrs	r3, r0
1001763a:	4698      	mov	r8, r3
1001763c:	400c      	ands	r4, r1
1001763e:	2300      	movs	r3, #0
10017640:	e600      	b.n	10017244 <__aeabi_dmul+0xcc>
10017642:	2500      	movs	r5, #0
10017644:	e7e3      	b.n	1001760e <__aeabi_dmul+0x496>
10017646:	2280      	movs	r2, #128	; 0x80
10017648:	2401      	movs	r4, #1
1001764a:	0312      	lsls	r2, r2, #12
1001764c:	4315      	orrs	r5, r2
1001764e:	032d      	lsls	r5, r5, #12
10017650:	4698      	mov	r8, r3
10017652:	0b2d      	lsrs	r5, r5, #12
10017654:	400c      	ands	r4, r1
10017656:	4b04      	ldr	r3, [pc, #16]	; (10017668 <__aeabi_dmul+0x4f0>)
10017658:	e5f4      	b.n	10017244 <__aeabi_dmul+0xcc>
1001765a:	46c0      	nop			; (mov r8, r8)
1001765c:	000003ff 	.word	0x000003ff
10017660:	feffffff 	.word	0xfeffffff
10017664:	000007fe 	.word	0x000007fe
10017668:	000007ff 	.word	0x000007ff

1001766c <__aeabi_dsub>:
1001766c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001766e:	4657      	mov	r7, sl
10017670:	464e      	mov	r6, r9
10017672:	4645      	mov	r5, r8
10017674:	b4e0      	push	{r5, r6, r7}
10017676:	000e      	movs	r6, r1
10017678:	0011      	movs	r1, r2
1001767a:	0ff2      	lsrs	r2, r6, #31
1001767c:	4692      	mov	sl, r2
1001767e:	00c5      	lsls	r5, r0, #3
10017680:	0f42      	lsrs	r2, r0, #29
10017682:	0318      	lsls	r0, r3, #12
10017684:	0337      	lsls	r7, r6, #12
10017686:	0074      	lsls	r4, r6, #1
10017688:	0a40      	lsrs	r0, r0, #9
1001768a:	0f4e      	lsrs	r6, r1, #29
1001768c:	0a7f      	lsrs	r7, r7, #9
1001768e:	4330      	orrs	r0, r6
10017690:	4ecf      	ldr	r6, [pc, #828]	; (100179d0 <__aeabi_dsub+0x364>)
10017692:	4317      	orrs	r7, r2
10017694:	005a      	lsls	r2, r3, #1
10017696:	0d64      	lsrs	r4, r4, #21
10017698:	0d52      	lsrs	r2, r2, #21
1001769a:	0fdb      	lsrs	r3, r3, #31
1001769c:	00c9      	lsls	r1, r1, #3
1001769e:	42b2      	cmp	r2, r6
100176a0:	d100      	bne.n	100176a4 <__aeabi_dsub+0x38>
100176a2:	e0e5      	b.n	10017870 <__aeabi_dsub+0x204>
100176a4:	2601      	movs	r6, #1
100176a6:	4073      	eors	r3, r6
100176a8:	1aa6      	subs	r6, r4, r2
100176aa:	46b4      	mov	ip, r6
100176ac:	4553      	cmp	r3, sl
100176ae:	d100      	bne.n	100176b2 <__aeabi_dsub+0x46>
100176b0:	e0af      	b.n	10017812 <__aeabi_dsub+0x1a6>
100176b2:	2e00      	cmp	r6, #0
100176b4:	dc00      	bgt.n	100176b8 <__aeabi_dsub+0x4c>
100176b6:	e10d      	b.n	100178d4 <__aeabi_dsub+0x268>
100176b8:	2a00      	cmp	r2, #0
100176ba:	d13a      	bne.n	10017732 <__aeabi_dsub+0xc6>
100176bc:	0003      	movs	r3, r0
100176be:	430b      	orrs	r3, r1
100176c0:	d000      	beq.n	100176c4 <__aeabi_dsub+0x58>
100176c2:	e0e4      	b.n	1001788e <__aeabi_dsub+0x222>
100176c4:	076b      	lsls	r3, r5, #29
100176c6:	d009      	beq.n	100176dc <__aeabi_dsub+0x70>
100176c8:	230f      	movs	r3, #15
100176ca:	402b      	ands	r3, r5
100176cc:	2b04      	cmp	r3, #4
100176ce:	d005      	beq.n	100176dc <__aeabi_dsub+0x70>
100176d0:	1d2b      	adds	r3, r5, #4
100176d2:	42ab      	cmp	r3, r5
100176d4:	41ad      	sbcs	r5, r5
100176d6:	426d      	negs	r5, r5
100176d8:	197f      	adds	r7, r7, r5
100176da:	001d      	movs	r5, r3
100176dc:	023b      	lsls	r3, r7, #8
100176de:	d400      	bmi.n	100176e2 <__aeabi_dsub+0x76>
100176e0:	e088      	b.n	100177f4 <__aeabi_dsub+0x188>
100176e2:	4bbb      	ldr	r3, [pc, #748]	; (100179d0 <__aeabi_dsub+0x364>)
100176e4:	3401      	adds	r4, #1
100176e6:	429c      	cmp	r4, r3
100176e8:	d100      	bne.n	100176ec <__aeabi_dsub+0x80>
100176ea:	e110      	b.n	1001790e <__aeabi_dsub+0x2a2>
100176ec:	003a      	movs	r2, r7
100176ee:	4bb9      	ldr	r3, [pc, #740]	; (100179d4 <__aeabi_dsub+0x368>)
100176f0:	4651      	mov	r1, sl
100176f2:	401a      	ands	r2, r3
100176f4:	2301      	movs	r3, #1
100176f6:	0750      	lsls	r0, r2, #29
100176f8:	08ed      	lsrs	r5, r5, #3
100176fa:	0252      	lsls	r2, r2, #9
100176fc:	0564      	lsls	r4, r4, #21
100176fe:	4305      	orrs	r5, r0
10017700:	0b12      	lsrs	r2, r2, #12
10017702:	0d64      	lsrs	r4, r4, #21
10017704:	400b      	ands	r3, r1
10017706:	2100      	movs	r1, #0
10017708:	0028      	movs	r0, r5
1001770a:	0312      	lsls	r2, r2, #12
1001770c:	0d0d      	lsrs	r5, r1, #20
1001770e:	0b12      	lsrs	r2, r2, #12
10017710:	0564      	lsls	r4, r4, #21
10017712:	052d      	lsls	r5, r5, #20
10017714:	4315      	orrs	r5, r2
10017716:	0862      	lsrs	r2, r4, #1
10017718:	4caf      	ldr	r4, [pc, #700]	; (100179d8 <__aeabi_dsub+0x36c>)
1001771a:	07db      	lsls	r3, r3, #31
1001771c:	402c      	ands	r4, r5
1001771e:	4314      	orrs	r4, r2
10017720:	0064      	lsls	r4, r4, #1
10017722:	0864      	lsrs	r4, r4, #1
10017724:	431c      	orrs	r4, r3
10017726:	0021      	movs	r1, r4
10017728:	bc1c      	pop	{r2, r3, r4}
1001772a:	4690      	mov	r8, r2
1001772c:	4699      	mov	r9, r3
1001772e:	46a2      	mov	sl, r4
10017730:	bdf0      	pop	{r4, r5, r6, r7, pc}
10017732:	4ba7      	ldr	r3, [pc, #668]	; (100179d0 <__aeabi_dsub+0x364>)
10017734:	429c      	cmp	r4, r3
10017736:	d0c5      	beq.n	100176c4 <__aeabi_dsub+0x58>
10017738:	2380      	movs	r3, #128	; 0x80
1001773a:	041b      	lsls	r3, r3, #16
1001773c:	4318      	orrs	r0, r3
1001773e:	4663      	mov	r3, ip
10017740:	2b38      	cmp	r3, #56	; 0x38
10017742:	dd00      	ble.n	10017746 <__aeabi_dsub+0xda>
10017744:	e0fd      	b.n	10017942 <__aeabi_dsub+0x2d6>
10017746:	2b1f      	cmp	r3, #31
10017748:	dd00      	ble.n	1001774c <__aeabi_dsub+0xe0>
1001774a:	e130      	b.n	100179ae <__aeabi_dsub+0x342>
1001774c:	4662      	mov	r2, ip
1001774e:	2320      	movs	r3, #32
10017750:	1a9b      	subs	r3, r3, r2
10017752:	0002      	movs	r2, r0
10017754:	409a      	lsls	r2, r3
10017756:	4666      	mov	r6, ip
10017758:	4690      	mov	r8, r2
1001775a:	000a      	movs	r2, r1
1001775c:	4099      	lsls	r1, r3
1001775e:	40f2      	lsrs	r2, r6
10017760:	4646      	mov	r6, r8
10017762:	1e4b      	subs	r3, r1, #1
10017764:	4199      	sbcs	r1, r3
10017766:	4332      	orrs	r2, r6
10017768:	4311      	orrs	r1, r2
1001776a:	4663      	mov	r3, ip
1001776c:	0002      	movs	r2, r0
1001776e:	40da      	lsrs	r2, r3
10017770:	1a69      	subs	r1, r5, r1
10017772:	428d      	cmp	r5, r1
10017774:	419b      	sbcs	r3, r3
10017776:	000d      	movs	r5, r1
10017778:	1aba      	subs	r2, r7, r2
1001777a:	425b      	negs	r3, r3
1001777c:	1ad7      	subs	r7, r2, r3
1001777e:	023b      	lsls	r3, r7, #8
10017780:	d535      	bpl.n	100177ee <__aeabi_dsub+0x182>
10017782:	027a      	lsls	r2, r7, #9
10017784:	0a53      	lsrs	r3, r2, #9
10017786:	4698      	mov	r8, r3
10017788:	4643      	mov	r3, r8
1001778a:	2b00      	cmp	r3, #0
1001778c:	d100      	bne.n	10017790 <__aeabi_dsub+0x124>
1001778e:	e0c4      	b.n	1001791a <__aeabi_dsub+0x2ae>
10017790:	4640      	mov	r0, r8
10017792:	f000 fc4f 	bl	10018034 <__clzsi2>
10017796:	0003      	movs	r3, r0
10017798:	3b08      	subs	r3, #8
1001779a:	2b1f      	cmp	r3, #31
1001779c:	dd00      	ble.n	100177a0 <__aeabi_dsub+0x134>
1001779e:	e0c5      	b.n	1001792c <__aeabi_dsub+0x2c0>
100177a0:	2220      	movs	r2, #32
100177a2:	0029      	movs	r1, r5
100177a4:	1ad2      	subs	r2, r2, r3
100177a6:	4647      	mov	r7, r8
100177a8:	40d1      	lsrs	r1, r2
100177aa:	409f      	lsls	r7, r3
100177ac:	000a      	movs	r2, r1
100177ae:	409d      	lsls	r5, r3
100177b0:	433a      	orrs	r2, r7
100177b2:	429c      	cmp	r4, r3
100177b4:	dd00      	ble.n	100177b8 <__aeabi_dsub+0x14c>
100177b6:	e0c0      	b.n	1001793a <__aeabi_dsub+0x2ce>
100177b8:	1b1c      	subs	r4, r3, r4
100177ba:	1c63      	adds	r3, r4, #1
100177bc:	2b1f      	cmp	r3, #31
100177be:	dd00      	ble.n	100177c2 <__aeabi_dsub+0x156>
100177c0:	e0e4      	b.n	1001798c <__aeabi_dsub+0x320>
100177c2:	2120      	movs	r1, #32
100177c4:	0014      	movs	r4, r2
100177c6:	0028      	movs	r0, r5
100177c8:	1ac9      	subs	r1, r1, r3
100177ca:	40d8      	lsrs	r0, r3
100177cc:	408c      	lsls	r4, r1
100177ce:	408d      	lsls	r5, r1
100177d0:	4304      	orrs	r4, r0
100177d2:	40da      	lsrs	r2, r3
100177d4:	1e68      	subs	r0, r5, #1
100177d6:	4185      	sbcs	r5, r0
100177d8:	0017      	movs	r7, r2
100177da:	4325      	orrs	r5, r4
100177dc:	2400      	movs	r4, #0
100177de:	e771      	b.n	100176c4 <__aeabi_dsub+0x58>
100177e0:	4642      	mov	r2, r8
100177e2:	4663      	mov	r3, ip
100177e4:	431a      	orrs	r2, r3
100177e6:	d100      	bne.n	100177ea <__aeabi_dsub+0x17e>
100177e8:	e24c      	b.n	10017c84 <__aeabi_dsub+0x618>
100177ea:	4667      	mov	r7, ip
100177ec:	4645      	mov	r5, r8
100177ee:	076b      	lsls	r3, r5, #29
100177f0:	d000      	beq.n	100177f4 <__aeabi_dsub+0x188>
100177f2:	e769      	b.n	100176c8 <__aeabi_dsub+0x5c>
100177f4:	2301      	movs	r3, #1
100177f6:	4651      	mov	r1, sl
100177f8:	0778      	lsls	r0, r7, #29
100177fa:	08ed      	lsrs	r5, r5, #3
100177fc:	08fa      	lsrs	r2, r7, #3
100177fe:	400b      	ands	r3, r1
10017800:	4305      	orrs	r5, r0
10017802:	4973      	ldr	r1, [pc, #460]	; (100179d0 <__aeabi_dsub+0x364>)
10017804:	428c      	cmp	r4, r1
10017806:	d038      	beq.n	1001787a <__aeabi_dsub+0x20e>
10017808:	0312      	lsls	r2, r2, #12
1001780a:	0564      	lsls	r4, r4, #21
1001780c:	0b12      	lsrs	r2, r2, #12
1001780e:	0d64      	lsrs	r4, r4, #21
10017810:	e779      	b.n	10017706 <__aeabi_dsub+0x9a>
10017812:	2e00      	cmp	r6, #0
10017814:	dc00      	bgt.n	10017818 <__aeabi_dsub+0x1ac>
10017816:	e09a      	b.n	1001794e <__aeabi_dsub+0x2e2>
10017818:	2a00      	cmp	r2, #0
1001781a:	d047      	beq.n	100178ac <__aeabi_dsub+0x240>
1001781c:	4a6c      	ldr	r2, [pc, #432]	; (100179d0 <__aeabi_dsub+0x364>)
1001781e:	4294      	cmp	r4, r2
10017820:	d100      	bne.n	10017824 <__aeabi_dsub+0x1b8>
10017822:	e74f      	b.n	100176c4 <__aeabi_dsub+0x58>
10017824:	2280      	movs	r2, #128	; 0x80
10017826:	0412      	lsls	r2, r2, #16
10017828:	4310      	orrs	r0, r2
1001782a:	4662      	mov	r2, ip
1001782c:	2a38      	cmp	r2, #56	; 0x38
1001782e:	dc00      	bgt.n	10017832 <__aeabi_dsub+0x1c6>
10017830:	e108      	b.n	10017a44 <__aeabi_dsub+0x3d8>
10017832:	4301      	orrs	r1, r0
10017834:	1e48      	subs	r0, r1, #1
10017836:	4181      	sbcs	r1, r0
10017838:	2200      	movs	r2, #0
1001783a:	b2c9      	uxtb	r1, r1
1001783c:	1949      	adds	r1, r1, r5
1001783e:	19d2      	adds	r2, r2, r7
10017840:	42a9      	cmp	r1, r5
10017842:	41bf      	sbcs	r7, r7
10017844:	000d      	movs	r5, r1
10017846:	427f      	negs	r7, r7
10017848:	18bf      	adds	r7, r7, r2
1001784a:	023a      	lsls	r2, r7, #8
1001784c:	d400      	bmi.n	10017850 <__aeabi_dsub+0x1e4>
1001784e:	e142      	b.n	10017ad6 <__aeabi_dsub+0x46a>
10017850:	4a5f      	ldr	r2, [pc, #380]	; (100179d0 <__aeabi_dsub+0x364>)
10017852:	3401      	adds	r4, #1
10017854:	4294      	cmp	r4, r2
10017856:	d100      	bne.n	1001785a <__aeabi_dsub+0x1ee>
10017858:	e14e      	b.n	10017af8 <__aeabi_dsub+0x48c>
1001785a:	2001      	movs	r0, #1
1001785c:	4a5d      	ldr	r2, [pc, #372]	; (100179d4 <__aeabi_dsub+0x368>)
1001785e:	0869      	lsrs	r1, r5, #1
10017860:	403a      	ands	r2, r7
10017862:	4028      	ands	r0, r5
10017864:	4308      	orrs	r0, r1
10017866:	07d5      	lsls	r5, r2, #31
10017868:	4305      	orrs	r5, r0
1001786a:	0857      	lsrs	r7, r2, #1
1001786c:	469a      	mov	sl, r3
1001786e:	e729      	b.n	100176c4 <__aeabi_dsub+0x58>
10017870:	0006      	movs	r6, r0
10017872:	430e      	orrs	r6, r1
10017874:	d000      	beq.n	10017878 <__aeabi_dsub+0x20c>
10017876:	e717      	b.n	100176a8 <__aeabi_dsub+0x3c>
10017878:	e714      	b.n	100176a4 <__aeabi_dsub+0x38>
1001787a:	0029      	movs	r1, r5
1001787c:	4311      	orrs	r1, r2
1001787e:	d100      	bne.n	10017882 <__aeabi_dsub+0x216>
10017880:	e1f9      	b.n	10017c76 <__aeabi_dsub+0x60a>
10017882:	2180      	movs	r1, #128	; 0x80
10017884:	0309      	lsls	r1, r1, #12
10017886:	430a      	orrs	r2, r1
10017888:	0312      	lsls	r2, r2, #12
1001788a:	0b12      	lsrs	r2, r2, #12
1001788c:	e73b      	b.n	10017706 <__aeabi_dsub+0x9a>
1001788e:	2301      	movs	r3, #1
10017890:	425b      	negs	r3, r3
10017892:	4698      	mov	r8, r3
10017894:	44c4      	add	ip, r8
10017896:	4663      	mov	r3, ip
10017898:	2b00      	cmp	r3, #0
1001789a:	d172      	bne.n	10017982 <__aeabi_dsub+0x316>
1001789c:	1a69      	subs	r1, r5, r1
1001789e:	428d      	cmp	r5, r1
100178a0:	419b      	sbcs	r3, r3
100178a2:	1a3f      	subs	r7, r7, r0
100178a4:	425b      	negs	r3, r3
100178a6:	1aff      	subs	r7, r7, r3
100178a8:	000d      	movs	r5, r1
100178aa:	e768      	b.n	1001777e <__aeabi_dsub+0x112>
100178ac:	0002      	movs	r2, r0
100178ae:	430a      	orrs	r2, r1
100178b0:	d100      	bne.n	100178b4 <__aeabi_dsub+0x248>
100178b2:	e707      	b.n	100176c4 <__aeabi_dsub+0x58>
100178b4:	2201      	movs	r2, #1
100178b6:	4252      	negs	r2, r2
100178b8:	4690      	mov	r8, r2
100178ba:	44c4      	add	ip, r8
100178bc:	4662      	mov	r2, ip
100178be:	2a00      	cmp	r2, #0
100178c0:	d000      	beq.n	100178c4 <__aeabi_dsub+0x258>
100178c2:	e0e6      	b.n	10017a92 <__aeabi_dsub+0x426>
100178c4:	1869      	adds	r1, r5, r1
100178c6:	42a9      	cmp	r1, r5
100178c8:	41b6      	sbcs	r6, r6
100178ca:	183f      	adds	r7, r7, r0
100178cc:	4276      	negs	r6, r6
100178ce:	19f7      	adds	r7, r6, r7
100178d0:	000d      	movs	r5, r1
100178d2:	e7ba      	b.n	1001784a <__aeabi_dsub+0x1de>
100178d4:	2e00      	cmp	r6, #0
100178d6:	d000      	beq.n	100178da <__aeabi_dsub+0x26e>
100178d8:	e080      	b.n	100179dc <__aeabi_dsub+0x370>
100178da:	1c62      	adds	r2, r4, #1
100178dc:	0552      	lsls	r2, r2, #21
100178de:	0d52      	lsrs	r2, r2, #21
100178e0:	2a01      	cmp	r2, #1
100178e2:	dc00      	bgt.n	100178e6 <__aeabi_dsub+0x27a>
100178e4:	e0f9      	b.n	10017ada <__aeabi_dsub+0x46e>
100178e6:	1a6a      	subs	r2, r5, r1
100178e8:	4691      	mov	r9, r2
100178ea:	454d      	cmp	r5, r9
100178ec:	41b6      	sbcs	r6, r6
100178ee:	1a3a      	subs	r2, r7, r0
100178f0:	4276      	negs	r6, r6
100178f2:	1b92      	subs	r2, r2, r6
100178f4:	4690      	mov	r8, r2
100178f6:	0212      	lsls	r2, r2, #8
100178f8:	d400      	bmi.n	100178fc <__aeabi_dsub+0x290>
100178fa:	e099      	b.n	10017a30 <__aeabi_dsub+0x3c4>
100178fc:	1b4d      	subs	r5, r1, r5
100178fe:	42a9      	cmp	r1, r5
10017900:	4189      	sbcs	r1, r1
10017902:	1bc7      	subs	r7, r0, r7
10017904:	4249      	negs	r1, r1
10017906:	1a7a      	subs	r2, r7, r1
10017908:	4690      	mov	r8, r2
1001790a:	469a      	mov	sl, r3
1001790c:	e73c      	b.n	10017788 <__aeabi_dsub+0x11c>
1001790e:	4652      	mov	r2, sl
10017910:	2301      	movs	r3, #1
10017912:	2500      	movs	r5, #0
10017914:	4013      	ands	r3, r2
10017916:	2200      	movs	r2, #0
10017918:	e6f5      	b.n	10017706 <__aeabi_dsub+0x9a>
1001791a:	0028      	movs	r0, r5
1001791c:	f000 fb8a 	bl	10018034 <__clzsi2>
10017920:	3020      	adds	r0, #32
10017922:	0003      	movs	r3, r0
10017924:	3b08      	subs	r3, #8
10017926:	2b1f      	cmp	r3, #31
10017928:	dc00      	bgt.n	1001792c <__aeabi_dsub+0x2c0>
1001792a:	e739      	b.n	100177a0 <__aeabi_dsub+0x134>
1001792c:	002a      	movs	r2, r5
1001792e:	3828      	subs	r0, #40	; 0x28
10017930:	4082      	lsls	r2, r0
10017932:	2500      	movs	r5, #0
10017934:	429c      	cmp	r4, r3
10017936:	dc00      	bgt.n	1001793a <__aeabi_dsub+0x2ce>
10017938:	e73e      	b.n	100177b8 <__aeabi_dsub+0x14c>
1001793a:	4f26      	ldr	r7, [pc, #152]	; (100179d4 <__aeabi_dsub+0x368>)
1001793c:	1ae4      	subs	r4, r4, r3
1001793e:	4017      	ands	r7, r2
10017940:	e6c0      	b.n	100176c4 <__aeabi_dsub+0x58>
10017942:	4301      	orrs	r1, r0
10017944:	1e48      	subs	r0, r1, #1
10017946:	4181      	sbcs	r1, r0
10017948:	2200      	movs	r2, #0
1001794a:	b2c9      	uxtb	r1, r1
1001794c:	e710      	b.n	10017770 <__aeabi_dsub+0x104>
1001794e:	2e00      	cmp	r6, #0
10017950:	d000      	beq.n	10017954 <__aeabi_dsub+0x2e8>
10017952:	e0f1      	b.n	10017b38 <__aeabi_dsub+0x4cc>
10017954:	1c62      	adds	r2, r4, #1
10017956:	4694      	mov	ip, r2
10017958:	0552      	lsls	r2, r2, #21
1001795a:	0d52      	lsrs	r2, r2, #21
1001795c:	2a01      	cmp	r2, #1
1001795e:	dc00      	bgt.n	10017962 <__aeabi_dsub+0x2f6>
10017960:	e0a0      	b.n	10017aa4 <__aeabi_dsub+0x438>
10017962:	4a1b      	ldr	r2, [pc, #108]	; (100179d0 <__aeabi_dsub+0x364>)
10017964:	4594      	cmp	ip, r2
10017966:	d100      	bne.n	1001796a <__aeabi_dsub+0x2fe>
10017968:	e0c5      	b.n	10017af6 <__aeabi_dsub+0x48a>
1001796a:	1869      	adds	r1, r5, r1
1001796c:	42a9      	cmp	r1, r5
1001796e:	4192      	sbcs	r2, r2
10017970:	183f      	adds	r7, r7, r0
10017972:	4252      	negs	r2, r2
10017974:	19d2      	adds	r2, r2, r7
10017976:	0849      	lsrs	r1, r1, #1
10017978:	07d5      	lsls	r5, r2, #31
1001797a:	430d      	orrs	r5, r1
1001797c:	0857      	lsrs	r7, r2, #1
1001797e:	4664      	mov	r4, ip
10017980:	e6a0      	b.n	100176c4 <__aeabi_dsub+0x58>
10017982:	4b13      	ldr	r3, [pc, #76]	; (100179d0 <__aeabi_dsub+0x364>)
10017984:	429c      	cmp	r4, r3
10017986:	d000      	beq.n	1001798a <__aeabi_dsub+0x31e>
10017988:	e6d9      	b.n	1001773e <__aeabi_dsub+0xd2>
1001798a:	e69b      	b.n	100176c4 <__aeabi_dsub+0x58>
1001798c:	0011      	movs	r1, r2
1001798e:	3c1f      	subs	r4, #31
10017990:	40e1      	lsrs	r1, r4
10017992:	000c      	movs	r4, r1
10017994:	2b20      	cmp	r3, #32
10017996:	d100      	bne.n	1001799a <__aeabi_dsub+0x32e>
10017998:	e080      	b.n	10017a9c <__aeabi_dsub+0x430>
1001799a:	2140      	movs	r1, #64	; 0x40
1001799c:	1acb      	subs	r3, r1, r3
1001799e:	409a      	lsls	r2, r3
100179a0:	4315      	orrs	r5, r2
100179a2:	1e6a      	subs	r2, r5, #1
100179a4:	4195      	sbcs	r5, r2
100179a6:	2700      	movs	r7, #0
100179a8:	4325      	orrs	r5, r4
100179aa:	2400      	movs	r4, #0
100179ac:	e71f      	b.n	100177ee <__aeabi_dsub+0x182>
100179ae:	4663      	mov	r3, ip
100179b0:	0002      	movs	r2, r0
100179b2:	3b20      	subs	r3, #32
100179b4:	40da      	lsrs	r2, r3
100179b6:	4663      	mov	r3, ip
100179b8:	2b20      	cmp	r3, #32
100179ba:	d071      	beq.n	10017aa0 <__aeabi_dsub+0x434>
100179bc:	2340      	movs	r3, #64	; 0x40
100179be:	4666      	mov	r6, ip
100179c0:	1b9b      	subs	r3, r3, r6
100179c2:	4098      	lsls	r0, r3
100179c4:	4301      	orrs	r1, r0
100179c6:	1e48      	subs	r0, r1, #1
100179c8:	4181      	sbcs	r1, r0
100179ca:	4311      	orrs	r1, r2
100179cc:	2200      	movs	r2, #0
100179ce:	e6cf      	b.n	10017770 <__aeabi_dsub+0x104>
100179d0:	000007ff 	.word	0x000007ff
100179d4:	ff7fffff 	.word	0xff7fffff
100179d8:	800fffff 	.word	0x800fffff
100179dc:	2c00      	cmp	r4, #0
100179de:	d048      	beq.n	10017a72 <__aeabi_dsub+0x406>
100179e0:	4cca      	ldr	r4, [pc, #808]	; (10017d0c <__aeabi_dsub+0x6a0>)
100179e2:	42a2      	cmp	r2, r4
100179e4:	d100      	bne.n	100179e8 <__aeabi_dsub+0x37c>
100179e6:	e0a2      	b.n	10017b2e <__aeabi_dsub+0x4c2>
100179e8:	4274      	negs	r4, r6
100179ea:	46a1      	mov	r9, r4
100179ec:	2480      	movs	r4, #128	; 0x80
100179ee:	0424      	lsls	r4, r4, #16
100179f0:	4327      	orrs	r7, r4
100179f2:	464c      	mov	r4, r9
100179f4:	2c38      	cmp	r4, #56	; 0x38
100179f6:	dd00      	ble.n	100179fa <__aeabi_dsub+0x38e>
100179f8:	e0db      	b.n	10017bb2 <__aeabi_dsub+0x546>
100179fa:	2c1f      	cmp	r4, #31
100179fc:	dd00      	ble.n	10017a00 <__aeabi_dsub+0x394>
100179fe:	e144      	b.n	10017c8a <__aeabi_dsub+0x61e>
10017a00:	464e      	mov	r6, r9
10017a02:	2420      	movs	r4, #32
10017a04:	1ba4      	subs	r4, r4, r6
10017a06:	003e      	movs	r6, r7
10017a08:	40a6      	lsls	r6, r4
10017a0a:	46a2      	mov	sl, r4
10017a0c:	46b0      	mov	r8, r6
10017a0e:	464c      	mov	r4, r9
10017a10:	002e      	movs	r6, r5
10017a12:	40e6      	lsrs	r6, r4
10017a14:	46b4      	mov	ip, r6
10017a16:	4646      	mov	r6, r8
10017a18:	4664      	mov	r4, ip
10017a1a:	4326      	orrs	r6, r4
10017a1c:	4654      	mov	r4, sl
10017a1e:	40a5      	lsls	r5, r4
10017a20:	1e6c      	subs	r4, r5, #1
10017a22:	41a5      	sbcs	r5, r4
10017a24:	0034      	movs	r4, r6
10017a26:	432c      	orrs	r4, r5
10017a28:	464d      	mov	r5, r9
10017a2a:	40ef      	lsrs	r7, r5
10017a2c:	1b0d      	subs	r5, r1, r4
10017a2e:	e028      	b.n	10017a82 <__aeabi_dsub+0x416>
10017a30:	464a      	mov	r2, r9
10017a32:	4643      	mov	r3, r8
10017a34:	464d      	mov	r5, r9
10017a36:	431a      	orrs	r2, r3
10017a38:	d000      	beq.n	10017a3c <__aeabi_dsub+0x3d0>
10017a3a:	e6a5      	b.n	10017788 <__aeabi_dsub+0x11c>
10017a3c:	2300      	movs	r3, #0
10017a3e:	2400      	movs	r4, #0
10017a40:	2500      	movs	r5, #0
10017a42:	e6de      	b.n	10017802 <__aeabi_dsub+0x196>
10017a44:	2a1f      	cmp	r2, #31
10017a46:	dc5a      	bgt.n	10017afe <__aeabi_dsub+0x492>
10017a48:	4666      	mov	r6, ip
10017a4a:	2220      	movs	r2, #32
10017a4c:	1b92      	subs	r2, r2, r6
10017a4e:	0006      	movs	r6, r0
10017a50:	4096      	lsls	r6, r2
10017a52:	4691      	mov	r9, r2
10017a54:	46b0      	mov	r8, r6
10017a56:	4662      	mov	r2, ip
10017a58:	000e      	movs	r6, r1
10017a5a:	40d6      	lsrs	r6, r2
10017a5c:	4642      	mov	r2, r8
10017a5e:	4316      	orrs	r6, r2
10017a60:	464a      	mov	r2, r9
10017a62:	4091      	lsls	r1, r2
10017a64:	1e4a      	subs	r2, r1, #1
10017a66:	4191      	sbcs	r1, r2
10017a68:	0002      	movs	r2, r0
10017a6a:	4660      	mov	r0, ip
10017a6c:	4331      	orrs	r1, r6
10017a6e:	40c2      	lsrs	r2, r0
10017a70:	e6e4      	b.n	1001783c <__aeabi_dsub+0x1d0>
10017a72:	003c      	movs	r4, r7
10017a74:	432c      	orrs	r4, r5
10017a76:	d05a      	beq.n	10017b2e <__aeabi_dsub+0x4c2>
10017a78:	43f4      	mvns	r4, r6
10017a7a:	46a1      	mov	r9, r4
10017a7c:	2c00      	cmp	r4, #0
10017a7e:	d152      	bne.n	10017b26 <__aeabi_dsub+0x4ba>
10017a80:	1b4d      	subs	r5, r1, r5
10017a82:	42a9      	cmp	r1, r5
10017a84:	4189      	sbcs	r1, r1
10017a86:	1bc7      	subs	r7, r0, r7
10017a88:	4249      	negs	r1, r1
10017a8a:	1a7f      	subs	r7, r7, r1
10017a8c:	0014      	movs	r4, r2
10017a8e:	469a      	mov	sl, r3
10017a90:	e675      	b.n	1001777e <__aeabi_dsub+0x112>
10017a92:	4a9e      	ldr	r2, [pc, #632]	; (10017d0c <__aeabi_dsub+0x6a0>)
10017a94:	4294      	cmp	r4, r2
10017a96:	d000      	beq.n	10017a9a <__aeabi_dsub+0x42e>
10017a98:	e6c7      	b.n	1001782a <__aeabi_dsub+0x1be>
10017a9a:	e613      	b.n	100176c4 <__aeabi_dsub+0x58>
10017a9c:	2200      	movs	r2, #0
10017a9e:	e77f      	b.n	100179a0 <__aeabi_dsub+0x334>
10017aa0:	2000      	movs	r0, #0
10017aa2:	e78f      	b.n	100179c4 <__aeabi_dsub+0x358>
10017aa4:	2c00      	cmp	r4, #0
10017aa6:	d000      	beq.n	10017aaa <__aeabi_dsub+0x43e>
10017aa8:	e0c8      	b.n	10017c3c <__aeabi_dsub+0x5d0>
10017aaa:	003b      	movs	r3, r7
10017aac:	432b      	orrs	r3, r5
10017aae:	d100      	bne.n	10017ab2 <__aeabi_dsub+0x446>
10017ab0:	e10f      	b.n	10017cd2 <__aeabi_dsub+0x666>
10017ab2:	0003      	movs	r3, r0
10017ab4:	430b      	orrs	r3, r1
10017ab6:	d100      	bne.n	10017aba <__aeabi_dsub+0x44e>
10017ab8:	e604      	b.n	100176c4 <__aeabi_dsub+0x58>
10017aba:	1869      	adds	r1, r5, r1
10017abc:	42a9      	cmp	r1, r5
10017abe:	419b      	sbcs	r3, r3
10017ac0:	183f      	adds	r7, r7, r0
10017ac2:	425b      	negs	r3, r3
10017ac4:	19df      	adds	r7, r3, r7
10017ac6:	023b      	lsls	r3, r7, #8
10017ac8:	d400      	bmi.n	10017acc <__aeabi_dsub+0x460>
10017aca:	e11a      	b.n	10017d02 <__aeabi_dsub+0x696>
10017acc:	4b90      	ldr	r3, [pc, #576]	; (10017d10 <__aeabi_dsub+0x6a4>)
10017ace:	000d      	movs	r5, r1
10017ad0:	401f      	ands	r7, r3
10017ad2:	4664      	mov	r4, ip
10017ad4:	e5f6      	b.n	100176c4 <__aeabi_dsub+0x58>
10017ad6:	469a      	mov	sl, r3
10017ad8:	e689      	b.n	100177ee <__aeabi_dsub+0x182>
10017ada:	003a      	movs	r2, r7
10017adc:	432a      	orrs	r2, r5
10017ade:	2c00      	cmp	r4, #0
10017ae0:	d15c      	bne.n	10017b9c <__aeabi_dsub+0x530>
10017ae2:	2a00      	cmp	r2, #0
10017ae4:	d175      	bne.n	10017bd2 <__aeabi_dsub+0x566>
10017ae6:	0002      	movs	r2, r0
10017ae8:	430a      	orrs	r2, r1
10017aea:	d100      	bne.n	10017aee <__aeabi_dsub+0x482>
10017aec:	e0ca      	b.n	10017c84 <__aeabi_dsub+0x618>
10017aee:	0007      	movs	r7, r0
10017af0:	000d      	movs	r5, r1
10017af2:	469a      	mov	sl, r3
10017af4:	e5e6      	b.n	100176c4 <__aeabi_dsub+0x58>
10017af6:	4664      	mov	r4, ip
10017af8:	2200      	movs	r2, #0
10017afa:	2500      	movs	r5, #0
10017afc:	e681      	b.n	10017802 <__aeabi_dsub+0x196>
10017afe:	4662      	mov	r2, ip
10017b00:	0006      	movs	r6, r0
10017b02:	3a20      	subs	r2, #32
10017b04:	40d6      	lsrs	r6, r2
10017b06:	4662      	mov	r2, ip
10017b08:	46b0      	mov	r8, r6
10017b0a:	2a20      	cmp	r2, #32
10017b0c:	d100      	bne.n	10017b10 <__aeabi_dsub+0x4a4>
10017b0e:	e0b7      	b.n	10017c80 <__aeabi_dsub+0x614>
10017b10:	2240      	movs	r2, #64	; 0x40
10017b12:	4666      	mov	r6, ip
10017b14:	1b92      	subs	r2, r2, r6
10017b16:	4090      	lsls	r0, r2
10017b18:	4301      	orrs	r1, r0
10017b1a:	4642      	mov	r2, r8
10017b1c:	1e48      	subs	r0, r1, #1
10017b1e:	4181      	sbcs	r1, r0
10017b20:	4311      	orrs	r1, r2
10017b22:	2200      	movs	r2, #0
10017b24:	e68a      	b.n	1001783c <__aeabi_dsub+0x1d0>
10017b26:	4c79      	ldr	r4, [pc, #484]	; (10017d0c <__aeabi_dsub+0x6a0>)
10017b28:	42a2      	cmp	r2, r4
10017b2a:	d000      	beq.n	10017b2e <__aeabi_dsub+0x4c2>
10017b2c:	e761      	b.n	100179f2 <__aeabi_dsub+0x386>
10017b2e:	0007      	movs	r7, r0
10017b30:	000d      	movs	r5, r1
10017b32:	0014      	movs	r4, r2
10017b34:	469a      	mov	sl, r3
10017b36:	e5c5      	b.n	100176c4 <__aeabi_dsub+0x58>
10017b38:	2c00      	cmp	r4, #0
10017b3a:	d141      	bne.n	10017bc0 <__aeabi_dsub+0x554>
10017b3c:	003c      	movs	r4, r7
10017b3e:	432c      	orrs	r4, r5
10017b40:	d078      	beq.n	10017c34 <__aeabi_dsub+0x5c8>
10017b42:	43f4      	mvns	r4, r6
10017b44:	46a1      	mov	r9, r4
10017b46:	2c00      	cmp	r4, #0
10017b48:	d020      	beq.n	10017b8c <__aeabi_dsub+0x520>
10017b4a:	4c70      	ldr	r4, [pc, #448]	; (10017d0c <__aeabi_dsub+0x6a0>)
10017b4c:	42a2      	cmp	r2, r4
10017b4e:	d071      	beq.n	10017c34 <__aeabi_dsub+0x5c8>
10017b50:	464c      	mov	r4, r9
10017b52:	2c38      	cmp	r4, #56	; 0x38
10017b54:	dd00      	ble.n	10017b58 <__aeabi_dsub+0x4ec>
10017b56:	e0b2      	b.n	10017cbe <__aeabi_dsub+0x652>
10017b58:	2c1f      	cmp	r4, #31
10017b5a:	dd00      	ble.n	10017b5e <__aeabi_dsub+0x4f2>
10017b5c:	e0bc      	b.n	10017cd8 <__aeabi_dsub+0x66c>
10017b5e:	2620      	movs	r6, #32
10017b60:	1b34      	subs	r4, r6, r4
10017b62:	46a2      	mov	sl, r4
10017b64:	003c      	movs	r4, r7
10017b66:	4656      	mov	r6, sl
10017b68:	40b4      	lsls	r4, r6
10017b6a:	464e      	mov	r6, r9
10017b6c:	46a0      	mov	r8, r4
10017b6e:	002c      	movs	r4, r5
10017b70:	40f4      	lsrs	r4, r6
10017b72:	46a4      	mov	ip, r4
10017b74:	4644      	mov	r4, r8
10017b76:	4666      	mov	r6, ip
10017b78:	4334      	orrs	r4, r6
10017b7a:	46a4      	mov	ip, r4
10017b7c:	4654      	mov	r4, sl
10017b7e:	40a5      	lsls	r5, r4
10017b80:	4664      	mov	r4, ip
10017b82:	1e6e      	subs	r6, r5, #1
10017b84:	41b5      	sbcs	r5, r6
10017b86:	4325      	orrs	r5, r4
10017b88:	464c      	mov	r4, r9
10017b8a:	40e7      	lsrs	r7, r4
10017b8c:	186d      	adds	r5, r5, r1
10017b8e:	428d      	cmp	r5, r1
10017b90:	4189      	sbcs	r1, r1
10017b92:	183f      	adds	r7, r7, r0
10017b94:	4249      	negs	r1, r1
10017b96:	19cf      	adds	r7, r1, r7
10017b98:	0014      	movs	r4, r2
10017b9a:	e656      	b.n	1001784a <__aeabi_dsub+0x1de>
10017b9c:	2a00      	cmp	r2, #0
10017b9e:	d12f      	bne.n	10017c00 <__aeabi_dsub+0x594>
10017ba0:	0002      	movs	r2, r0
10017ba2:	430a      	orrs	r2, r1
10017ba4:	d100      	bne.n	10017ba8 <__aeabi_dsub+0x53c>
10017ba6:	e084      	b.n	10017cb2 <__aeabi_dsub+0x646>
10017ba8:	0007      	movs	r7, r0
10017baa:	000d      	movs	r5, r1
10017bac:	469a      	mov	sl, r3
10017bae:	4c57      	ldr	r4, [pc, #348]	; (10017d0c <__aeabi_dsub+0x6a0>)
10017bb0:	e588      	b.n	100176c4 <__aeabi_dsub+0x58>
10017bb2:	433d      	orrs	r5, r7
10017bb4:	1e6f      	subs	r7, r5, #1
10017bb6:	41bd      	sbcs	r5, r7
10017bb8:	b2ec      	uxtb	r4, r5
10017bba:	2700      	movs	r7, #0
10017bbc:	1b0d      	subs	r5, r1, r4
10017bbe:	e760      	b.n	10017a82 <__aeabi_dsub+0x416>
10017bc0:	4c52      	ldr	r4, [pc, #328]	; (10017d0c <__aeabi_dsub+0x6a0>)
10017bc2:	42a2      	cmp	r2, r4
10017bc4:	d036      	beq.n	10017c34 <__aeabi_dsub+0x5c8>
10017bc6:	4274      	negs	r4, r6
10017bc8:	2680      	movs	r6, #128	; 0x80
10017bca:	0436      	lsls	r6, r6, #16
10017bcc:	46a1      	mov	r9, r4
10017bce:	4337      	orrs	r7, r6
10017bd0:	e7be      	b.n	10017b50 <__aeabi_dsub+0x4e4>
10017bd2:	0002      	movs	r2, r0
10017bd4:	430a      	orrs	r2, r1
10017bd6:	d100      	bne.n	10017bda <__aeabi_dsub+0x56e>
10017bd8:	e574      	b.n	100176c4 <__aeabi_dsub+0x58>
10017bda:	1a6a      	subs	r2, r5, r1
10017bdc:	4690      	mov	r8, r2
10017bde:	4545      	cmp	r5, r8
10017be0:	41b6      	sbcs	r6, r6
10017be2:	1a3a      	subs	r2, r7, r0
10017be4:	4276      	negs	r6, r6
10017be6:	1b92      	subs	r2, r2, r6
10017be8:	4694      	mov	ip, r2
10017bea:	0212      	lsls	r2, r2, #8
10017bec:	d400      	bmi.n	10017bf0 <__aeabi_dsub+0x584>
10017bee:	e5f7      	b.n	100177e0 <__aeabi_dsub+0x174>
10017bf0:	1b4d      	subs	r5, r1, r5
10017bf2:	42a9      	cmp	r1, r5
10017bf4:	4189      	sbcs	r1, r1
10017bf6:	1bc7      	subs	r7, r0, r7
10017bf8:	4249      	negs	r1, r1
10017bfa:	1a7f      	subs	r7, r7, r1
10017bfc:	469a      	mov	sl, r3
10017bfe:	e561      	b.n	100176c4 <__aeabi_dsub+0x58>
10017c00:	0002      	movs	r2, r0
10017c02:	430a      	orrs	r2, r1
10017c04:	d03a      	beq.n	10017c7c <__aeabi_dsub+0x610>
10017c06:	08ed      	lsrs	r5, r5, #3
10017c08:	077c      	lsls	r4, r7, #29
10017c0a:	432c      	orrs	r4, r5
10017c0c:	2580      	movs	r5, #128	; 0x80
10017c0e:	08fa      	lsrs	r2, r7, #3
10017c10:	032d      	lsls	r5, r5, #12
10017c12:	422a      	tst	r2, r5
10017c14:	d008      	beq.n	10017c28 <__aeabi_dsub+0x5bc>
10017c16:	08c7      	lsrs	r7, r0, #3
10017c18:	422f      	tst	r7, r5
10017c1a:	d105      	bne.n	10017c28 <__aeabi_dsub+0x5bc>
10017c1c:	0745      	lsls	r5, r0, #29
10017c1e:	002c      	movs	r4, r5
10017c20:	003a      	movs	r2, r7
10017c22:	469a      	mov	sl, r3
10017c24:	08c9      	lsrs	r1, r1, #3
10017c26:	430c      	orrs	r4, r1
10017c28:	0f67      	lsrs	r7, r4, #29
10017c2a:	00d2      	lsls	r2, r2, #3
10017c2c:	00e5      	lsls	r5, r4, #3
10017c2e:	4317      	orrs	r7, r2
10017c30:	4c36      	ldr	r4, [pc, #216]	; (10017d0c <__aeabi_dsub+0x6a0>)
10017c32:	e547      	b.n	100176c4 <__aeabi_dsub+0x58>
10017c34:	0007      	movs	r7, r0
10017c36:	000d      	movs	r5, r1
10017c38:	0014      	movs	r4, r2
10017c3a:	e543      	b.n	100176c4 <__aeabi_dsub+0x58>
10017c3c:	003a      	movs	r2, r7
10017c3e:	432a      	orrs	r2, r5
10017c40:	d043      	beq.n	10017cca <__aeabi_dsub+0x65e>
10017c42:	0002      	movs	r2, r0
10017c44:	430a      	orrs	r2, r1
10017c46:	d019      	beq.n	10017c7c <__aeabi_dsub+0x610>
10017c48:	08ed      	lsrs	r5, r5, #3
10017c4a:	077c      	lsls	r4, r7, #29
10017c4c:	432c      	orrs	r4, r5
10017c4e:	2580      	movs	r5, #128	; 0x80
10017c50:	08fa      	lsrs	r2, r7, #3
10017c52:	032d      	lsls	r5, r5, #12
10017c54:	422a      	tst	r2, r5
10017c56:	d007      	beq.n	10017c68 <__aeabi_dsub+0x5fc>
10017c58:	08c6      	lsrs	r6, r0, #3
10017c5a:	422e      	tst	r6, r5
10017c5c:	d104      	bne.n	10017c68 <__aeabi_dsub+0x5fc>
10017c5e:	0747      	lsls	r7, r0, #29
10017c60:	003c      	movs	r4, r7
10017c62:	0032      	movs	r2, r6
10017c64:	08c9      	lsrs	r1, r1, #3
10017c66:	430c      	orrs	r4, r1
10017c68:	00d7      	lsls	r7, r2, #3
10017c6a:	0f62      	lsrs	r2, r4, #29
10017c6c:	00e5      	lsls	r5, r4, #3
10017c6e:	4317      	orrs	r7, r2
10017c70:	469a      	mov	sl, r3
10017c72:	4c26      	ldr	r4, [pc, #152]	; (10017d0c <__aeabi_dsub+0x6a0>)
10017c74:	e526      	b.n	100176c4 <__aeabi_dsub+0x58>
10017c76:	2200      	movs	r2, #0
10017c78:	2500      	movs	r5, #0
10017c7a:	e544      	b.n	10017706 <__aeabi_dsub+0x9a>
10017c7c:	4c23      	ldr	r4, [pc, #140]	; (10017d0c <__aeabi_dsub+0x6a0>)
10017c7e:	e521      	b.n	100176c4 <__aeabi_dsub+0x58>
10017c80:	2000      	movs	r0, #0
10017c82:	e749      	b.n	10017b18 <__aeabi_dsub+0x4ac>
10017c84:	2300      	movs	r3, #0
10017c86:	2500      	movs	r5, #0
10017c88:	e5bb      	b.n	10017802 <__aeabi_dsub+0x196>
10017c8a:	464c      	mov	r4, r9
10017c8c:	003e      	movs	r6, r7
10017c8e:	3c20      	subs	r4, #32
10017c90:	40e6      	lsrs	r6, r4
10017c92:	464c      	mov	r4, r9
10017c94:	46b4      	mov	ip, r6
10017c96:	2c20      	cmp	r4, #32
10017c98:	d031      	beq.n	10017cfe <__aeabi_dsub+0x692>
10017c9a:	2440      	movs	r4, #64	; 0x40
10017c9c:	464e      	mov	r6, r9
10017c9e:	1ba6      	subs	r6, r4, r6
10017ca0:	40b7      	lsls	r7, r6
10017ca2:	433d      	orrs	r5, r7
10017ca4:	1e6c      	subs	r4, r5, #1
10017ca6:	41a5      	sbcs	r5, r4
10017ca8:	4664      	mov	r4, ip
10017caa:	432c      	orrs	r4, r5
10017cac:	2700      	movs	r7, #0
10017cae:	1b0d      	subs	r5, r1, r4
10017cb0:	e6e7      	b.n	10017a82 <__aeabi_dsub+0x416>
10017cb2:	2280      	movs	r2, #128	; 0x80
10017cb4:	2300      	movs	r3, #0
10017cb6:	0312      	lsls	r2, r2, #12
10017cb8:	4c14      	ldr	r4, [pc, #80]	; (10017d0c <__aeabi_dsub+0x6a0>)
10017cba:	2500      	movs	r5, #0
10017cbc:	e5a1      	b.n	10017802 <__aeabi_dsub+0x196>
10017cbe:	433d      	orrs	r5, r7
10017cc0:	1e6f      	subs	r7, r5, #1
10017cc2:	41bd      	sbcs	r5, r7
10017cc4:	2700      	movs	r7, #0
10017cc6:	b2ed      	uxtb	r5, r5
10017cc8:	e760      	b.n	10017b8c <__aeabi_dsub+0x520>
10017cca:	0007      	movs	r7, r0
10017ccc:	000d      	movs	r5, r1
10017cce:	4c0f      	ldr	r4, [pc, #60]	; (10017d0c <__aeabi_dsub+0x6a0>)
10017cd0:	e4f8      	b.n	100176c4 <__aeabi_dsub+0x58>
10017cd2:	0007      	movs	r7, r0
10017cd4:	000d      	movs	r5, r1
10017cd6:	e4f5      	b.n	100176c4 <__aeabi_dsub+0x58>
10017cd8:	464e      	mov	r6, r9
10017cda:	003c      	movs	r4, r7
10017cdc:	3e20      	subs	r6, #32
10017cde:	40f4      	lsrs	r4, r6
10017ce0:	46a0      	mov	r8, r4
10017ce2:	464c      	mov	r4, r9
10017ce4:	2c20      	cmp	r4, #32
10017ce6:	d00e      	beq.n	10017d06 <__aeabi_dsub+0x69a>
10017ce8:	2440      	movs	r4, #64	; 0x40
10017cea:	464e      	mov	r6, r9
10017cec:	1ba4      	subs	r4, r4, r6
10017cee:	40a7      	lsls	r7, r4
10017cf0:	433d      	orrs	r5, r7
10017cf2:	1e6f      	subs	r7, r5, #1
10017cf4:	41bd      	sbcs	r5, r7
10017cf6:	4644      	mov	r4, r8
10017cf8:	2700      	movs	r7, #0
10017cfa:	4325      	orrs	r5, r4
10017cfc:	e746      	b.n	10017b8c <__aeabi_dsub+0x520>
10017cfe:	2700      	movs	r7, #0
10017d00:	e7cf      	b.n	10017ca2 <__aeabi_dsub+0x636>
10017d02:	000d      	movs	r5, r1
10017d04:	e573      	b.n	100177ee <__aeabi_dsub+0x182>
10017d06:	2700      	movs	r7, #0
10017d08:	e7f2      	b.n	10017cf0 <__aeabi_dsub+0x684>
10017d0a:	46c0      	nop			; (mov r8, r8)
10017d0c:	000007ff 	.word	0x000007ff
10017d10:	ff7fffff 	.word	0xff7fffff

10017d14 <__aeabi_d2iz>:
10017d14:	030b      	lsls	r3, r1, #12
10017d16:	b530      	push	{r4, r5, lr}
10017d18:	4d13      	ldr	r5, [pc, #76]	; (10017d68 <__aeabi_d2iz+0x54>)
10017d1a:	0b1a      	lsrs	r2, r3, #12
10017d1c:	004b      	lsls	r3, r1, #1
10017d1e:	0d5b      	lsrs	r3, r3, #21
10017d20:	0fc9      	lsrs	r1, r1, #31
10017d22:	2400      	movs	r4, #0
10017d24:	42ab      	cmp	r3, r5
10017d26:	dd11      	ble.n	10017d4c <__aeabi_d2iz+0x38>
10017d28:	4c10      	ldr	r4, [pc, #64]	; (10017d6c <__aeabi_d2iz+0x58>)
10017d2a:	42a3      	cmp	r3, r4
10017d2c:	dc10      	bgt.n	10017d50 <__aeabi_d2iz+0x3c>
10017d2e:	2480      	movs	r4, #128	; 0x80
10017d30:	0364      	lsls	r4, r4, #13
10017d32:	4322      	orrs	r2, r4
10017d34:	4c0e      	ldr	r4, [pc, #56]	; (10017d70 <__aeabi_d2iz+0x5c>)
10017d36:	1ae4      	subs	r4, r4, r3
10017d38:	2c1f      	cmp	r4, #31
10017d3a:	dd0c      	ble.n	10017d56 <__aeabi_d2iz+0x42>
10017d3c:	480d      	ldr	r0, [pc, #52]	; (10017d74 <__aeabi_d2iz+0x60>)
10017d3e:	1ac3      	subs	r3, r0, r3
10017d40:	40da      	lsrs	r2, r3
10017d42:	0013      	movs	r3, r2
10017d44:	425c      	negs	r4, r3
10017d46:	2900      	cmp	r1, #0
10017d48:	d100      	bne.n	10017d4c <__aeabi_d2iz+0x38>
10017d4a:	001c      	movs	r4, r3
10017d4c:	0020      	movs	r0, r4
10017d4e:	bd30      	pop	{r4, r5, pc}
10017d50:	4b09      	ldr	r3, [pc, #36]	; (10017d78 <__aeabi_d2iz+0x64>)
10017d52:	18cc      	adds	r4, r1, r3
10017d54:	e7fa      	b.n	10017d4c <__aeabi_d2iz+0x38>
10017d56:	40e0      	lsrs	r0, r4
10017d58:	4c08      	ldr	r4, [pc, #32]	; (10017d7c <__aeabi_d2iz+0x68>)
10017d5a:	46a4      	mov	ip, r4
10017d5c:	4463      	add	r3, ip
10017d5e:	409a      	lsls	r2, r3
10017d60:	0013      	movs	r3, r2
10017d62:	4303      	orrs	r3, r0
10017d64:	e7ee      	b.n	10017d44 <__aeabi_d2iz+0x30>
10017d66:	46c0      	nop			; (mov r8, r8)
10017d68:	000003fe 	.word	0x000003fe
10017d6c:	0000041d 	.word	0x0000041d
10017d70:	00000433 	.word	0x00000433
10017d74:	00000413 	.word	0x00000413
10017d78:	7fffffff 	.word	0x7fffffff
10017d7c:	fffffbed 	.word	0xfffffbed

10017d80 <__aeabi_i2d>:
10017d80:	b570      	push	{r4, r5, r6, lr}
10017d82:	2800      	cmp	r0, #0
10017d84:	d030      	beq.n	10017de8 <__aeabi_i2d+0x68>
10017d86:	17c3      	asrs	r3, r0, #31
10017d88:	18c4      	adds	r4, r0, r3
10017d8a:	405c      	eors	r4, r3
10017d8c:	0fc5      	lsrs	r5, r0, #31
10017d8e:	0020      	movs	r0, r4
10017d90:	f000 f950 	bl	10018034 <__clzsi2>
10017d94:	4b17      	ldr	r3, [pc, #92]	; (10017df4 <__aeabi_i2d+0x74>)
10017d96:	4a18      	ldr	r2, [pc, #96]	; (10017df8 <__aeabi_i2d+0x78>)
10017d98:	1a1b      	subs	r3, r3, r0
10017d9a:	1ad2      	subs	r2, r2, r3
10017d9c:	2a1f      	cmp	r2, #31
10017d9e:	dd18      	ble.n	10017dd2 <__aeabi_i2d+0x52>
10017da0:	4a16      	ldr	r2, [pc, #88]	; (10017dfc <__aeabi_i2d+0x7c>)
10017da2:	1ad2      	subs	r2, r2, r3
10017da4:	4094      	lsls	r4, r2
10017da6:	2200      	movs	r2, #0
10017da8:	0324      	lsls	r4, r4, #12
10017daa:	055b      	lsls	r3, r3, #21
10017dac:	0b24      	lsrs	r4, r4, #12
10017dae:	0d5b      	lsrs	r3, r3, #21
10017db0:	2100      	movs	r1, #0
10017db2:	0010      	movs	r0, r2
10017db4:	0324      	lsls	r4, r4, #12
10017db6:	0d0a      	lsrs	r2, r1, #20
10017db8:	0512      	lsls	r2, r2, #20
10017dba:	0b24      	lsrs	r4, r4, #12
10017dbc:	4314      	orrs	r4, r2
10017dbe:	4a10      	ldr	r2, [pc, #64]	; (10017e00 <__aeabi_i2d+0x80>)
10017dc0:	051b      	lsls	r3, r3, #20
10017dc2:	4014      	ands	r4, r2
10017dc4:	431c      	orrs	r4, r3
10017dc6:	0064      	lsls	r4, r4, #1
10017dc8:	07ed      	lsls	r5, r5, #31
10017dca:	0864      	lsrs	r4, r4, #1
10017dcc:	432c      	orrs	r4, r5
10017dce:	0021      	movs	r1, r4
10017dd0:	bd70      	pop	{r4, r5, r6, pc}
10017dd2:	0021      	movs	r1, r4
10017dd4:	4091      	lsls	r1, r2
10017dd6:	000a      	movs	r2, r1
10017dd8:	210b      	movs	r1, #11
10017dda:	1a08      	subs	r0, r1, r0
10017ddc:	40c4      	lsrs	r4, r0
10017dde:	055b      	lsls	r3, r3, #21
10017de0:	0324      	lsls	r4, r4, #12
10017de2:	0b24      	lsrs	r4, r4, #12
10017de4:	0d5b      	lsrs	r3, r3, #21
10017de6:	e7e3      	b.n	10017db0 <__aeabi_i2d+0x30>
10017de8:	2500      	movs	r5, #0
10017dea:	2300      	movs	r3, #0
10017dec:	2400      	movs	r4, #0
10017dee:	2200      	movs	r2, #0
10017df0:	e7de      	b.n	10017db0 <__aeabi_i2d+0x30>
10017df2:	46c0      	nop			; (mov r8, r8)
10017df4:	0000041e 	.word	0x0000041e
10017df8:	00000433 	.word	0x00000433
10017dfc:	00000413 	.word	0x00000413
10017e00:	800fffff 	.word	0x800fffff

10017e04 <__aeabi_ui2d>:
10017e04:	b570      	push	{r4, r5, r6, lr}
10017e06:	1e05      	subs	r5, r0, #0
10017e08:	d028      	beq.n	10017e5c <__aeabi_ui2d+0x58>
10017e0a:	f000 f913 	bl	10018034 <__clzsi2>
10017e0e:	4b15      	ldr	r3, [pc, #84]	; (10017e64 <__aeabi_ui2d+0x60>)
10017e10:	4a15      	ldr	r2, [pc, #84]	; (10017e68 <__aeabi_ui2d+0x64>)
10017e12:	1a1b      	subs	r3, r3, r0
10017e14:	1ad2      	subs	r2, r2, r3
10017e16:	2a1f      	cmp	r2, #31
10017e18:	dd16      	ble.n	10017e48 <__aeabi_ui2d+0x44>
10017e1a:	002c      	movs	r4, r5
10017e1c:	4a13      	ldr	r2, [pc, #76]	; (10017e6c <__aeabi_ui2d+0x68>)
10017e1e:	2500      	movs	r5, #0
10017e20:	1ad2      	subs	r2, r2, r3
10017e22:	4094      	lsls	r4, r2
10017e24:	055a      	lsls	r2, r3, #21
10017e26:	0324      	lsls	r4, r4, #12
10017e28:	0b24      	lsrs	r4, r4, #12
10017e2a:	0d52      	lsrs	r2, r2, #21
10017e2c:	2100      	movs	r1, #0
10017e2e:	0324      	lsls	r4, r4, #12
10017e30:	0d0b      	lsrs	r3, r1, #20
10017e32:	0b24      	lsrs	r4, r4, #12
10017e34:	051b      	lsls	r3, r3, #20
10017e36:	4323      	orrs	r3, r4
10017e38:	4c0d      	ldr	r4, [pc, #52]	; (10017e70 <__aeabi_ui2d+0x6c>)
10017e3a:	0512      	lsls	r2, r2, #20
10017e3c:	4023      	ands	r3, r4
10017e3e:	4313      	orrs	r3, r2
10017e40:	005b      	lsls	r3, r3, #1
10017e42:	0028      	movs	r0, r5
10017e44:	0859      	lsrs	r1, r3, #1
10017e46:	bd70      	pop	{r4, r5, r6, pc}
10017e48:	210b      	movs	r1, #11
10017e4a:	002c      	movs	r4, r5
10017e4c:	1a08      	subs	r0, r1, r0
10017e4e:	40c4      	lsrs	r4, r0
10017e50:	4095      	lsls	r5, r2
10017e52:	0324      	lsls	r4, r4, #12
10017e54:	055a      	lsls	r2, r3, #21
10017e56:	0b24      	lsrs	r4, r4, #12
10017e58:	0d52      	lsrs	r2, r2, #21
10017e5a:	e7e7      	b.n	10017e2c <__aeabi_ui2d+0x28>
10017e5c:	2200      	movs	r2, #0
10017e5e:	2400      	movs	r4, #0
10017e60:	e7e4      	b.n	10017e2c <__aeabi_ui2d+0x28>
10017e62:	46c0      	nop			; (mov r8, r8)
10017e64:	0000041e 	.word	0x0000041e
10017e68:	00000433 	.word	0x00000433
10017e6c:	00000413 	.word	0x00000413
10017e70:	800fffff 	.word	0x800fffff

10017e74 <__aeabi_f2d>:
10017e74:	0042      	lsls	r2, r0, #1
10017e76:	0e12      	lsrs	r2, r2, #24
10017e78:	1c51      	adds	r1, r2, #1
10017e7a:	0243      	lsls	r3, r0, #9
10017e7c:	b2c9      	uxtb	r1, r1
10017e7e:	b570      	push	{r4, r5, r6, lr}
10017e80:	0a5d      	lsrs	r5, r3, #9
10017e82:	0fc4      	lsrs	r4, r0, #31
10017e84:	2901      	cmp	r1, #1
10017e86:	dd15      	ble.n	10017eb4 <__aeabi_f2d+0x40>
10017e88:	21e0      	movs	r1, #224	; 0xe0
10017e8a:	0089      	lsls	r1, r1, #2
10017e8c:	468c      	mov	ip, r1
10017e8e:	076d      	lsls	r5, r5, #29
10017e90:	0b1b      	lsrs	r3, r3, #12
10017e92:	4462      	add	r2, ip
10017e94:	2100      	movs	r1, #0
10017e96:	0028      	movs	r0, r5
10017e98:	0d0d      	lsrs	r5, r1, #20
10017e9a:	052d      	lsls	r5, r5, #20
10017e9c:	432b      	orrs	r3, r5
10017e9e:	4d1c      	ldr	r5, [pc, #112]	; (10017f10 <__aeabi_f2d+0x9c>)
10017ea0:	0552      	lsls	r2, r2, #21
10017ea2:	402b      	ands	r3, r5
10017ea4:	0852      	lsrs	r2, r2, #1
10017ea6:	4313      	orrs	r3, r2
10017ea8:	005b      	lsls	r3, r3, #1
10017eaa:	07e4      	lsls	r4, r4, #31
10017eac:	085b      	lsrs	r3, r3, #1
10017eae:	4323      	orrs	r3, r4
10017eb0:	0019      	movs	r1, r3
10017eb2:	bd70      	pop	{r4, r5, r6, pc}
10017eb4:	2a00      	cmp	r2, #0
10017eb6:	d115      	bne.n	10017ee4 <__aeabi_f2d+0x70>
10017eb8:	2d00      	cmp	r5, #0
10017eba:	d01f      	beq.n	10017efc <__aeabi_f2d+0x88>
10017ebc:	0028      	movs	r0, r5
10017ebe:	f000 f8b9 	bl	10018034 <__clzsi2>
10017ec2:	280a      	cmp	r0, #10
10017ec4:	dc1d      	bgt.n	10017f02 <__aeabi_f2d+0x8e>
10017ec6:	230b      	movs	r3, #11
10017ec8:	002a      	movs	r2, r5
10017eca:	1a1b      	subs	r3, r3, r0
10017ecc:	40da      	lsrs	r2, r3
10017ece:	0013      	movs	r3, r2
10017ed0:	0002      	movs	r2, r0
10017ed2:	3215      	adds	r2, #21
10017ed4:	4095      	lsls	r5, r2
10017ed6:	4a0f      	ldr	r2, [pc, #60]	; (10017f14 <__aeabi_f2d+0xa0>)
10017ed8:	031b      	lsls	r3, r3, #12
10017eda:	1a12      	subs	r2, r2, r0
10017edc:	0552      	lsls	r2, r2, #21
10017ede:	0b1b      	lsrs	r3, r3, #12
10017ee0:	0d52      	lsrs	r2, r2, #21
10017ee2:	e7d7      	b.n	10017e94 <__aeabi_f2d+0x20>
10017ee4:	2d00      	cmp	r5, #0
10017ee6:	d006      	beq.n	10017ef6 <__aeabi_f2d+0x82>
10017ee8:	2280      	movs	r2, #128	; 0x80
10017eea:	0b1b      	lsrs	r3, r3, #12
10017eec:	0312      	lsls	r2, r2, #12
10017eee:	4313      	orrs	r3, r2
10017ef0:	076d      	lsls	r5, r5, #29
10017ef2:	4a09      	ldr	r2, [pc, #36]	; (10017f18 <__aeabi_f2d+0xa4>)
10017ef4:	e7ce      	b.n	10017e94 <__aeabi_f2d+0x20>
10017ef6:	4a08      	ldr	r2, [pc, #32]	; (10017f18 <__aeabi_f2d+0xa4>)
10017ef8:	2300      	movs	r3, #0
10017efa:	e7cb      	b.n	10017e94 <__aeabi_f2d+0x20>
10017efc:	2200      	movs	r2, #0
10017efe:	2300      	movs	r3, #0
10017f00:	e7c8      	b.n	10017e94 <__aeabi_f2d+0x20>
10017f02:	0003      	movs	r3, r0
10017f04:	3b0b      	subs	r3, #11
10017f06:	409d      	lsls	r5, r3
10017f08:	002b      	movs	r3, r5
10017f0a:	2500      	movs	r5, #0
10017f0c:	e7e3      	b.n	10017ed6 <__aeabi_f2d+0x62>
10017f0e:	46c0      	nop			; (mov r8, r8)
10017f10:	800fffff 	.word	0x800fffff
10017f14:	00000389 	.word	0x00000389
10017f18:	000007ff 	.word	0x000007ff

10017f1c <__aeabi_d2f>:
10017f1c:	004b      	lsls	r3, r1, #1
10017f1e:	b570      	push	{r4, r5, r6, lr}
10017f20:	0d5e      	lsrs	r6, r3, #21
10017f22:	030c      	lsls	r4, r1, #12
10017f24:	1c75      	adds	r5, r6, #1
10017f26:	0a64      	lsrs	r4, r4, #9
10017f28:	0f42      	lsrs	r2, r0, #29
10017f2a:	056d      	lsls	r5, r5, #21
10017f2c:	4322      	orrs	r2, r4
10017f2e:	0fc9      	lsrs	r1, r1, #31
10017f30:	00c4      	lsls	r4, r0, #3
10017f32:	0d6d      	lsrs	r5, r5, #21
10017f34:	2d01      	cmp	r5, #1
10017f36:	dd2a      	ble.n	10017f8e <__aeabi_d2f+0x72>
10017f38:	4b3b      	ldr	r3, [pc, #236]	; (10018028 <__aeabi_d2f+0x10c>)
10017f3a:	18f3      	adds	r3, r6, r3
10017f3c:	2bfe      	cmp	r3, #254	; 0xfe
10017f3e:	dc1a      	bgt.n	10017f76 <__aeabi_d2f+0x5a>
10017f40:	2b00      	cmp	r3, #0
10017f42:	dd42      	ble.n	10017fca <__aeabi_d2f+0xae>
10017f44:	0180      	lsls	r0, r0, #6
10017f46:	1e45      	subs	r5, r0, #1
10017f48:	41a8      	sbcs	r0, r5
10017f4a:	00d2      	lsls	r2, r2, #3
10017f4c:	4310      	orrs	r0, r2
10017f4e:	0f62      	lsrs	r2, r4, #29
10017f50:	4302      	orrs	r2, r0
10017f52:	0750      	lsls	r0, r2, #29
10017f54:	d004      	beq.n	10017f60 <__aeabi_d2f+0x44>
10017f56:	200f      	movs	r0, #15
10017f58:	4010      	ands	r0, r2
10017f5a:	2804      	cmp	r0, #4
10017f5c:	d000      	beq.n	10017f60 <__aeabi_d2f+0x44>
10017f5e:	3204      	adds	r2, #4
10017f60:	2080      	movs	r0, #128	; 0x80
10017f62:	04c0      	lsls	r0, r0, #19
10017f64:	4010      	ands	r0, r2
10017f66:	d021      	beq.n	10017fac <__aeabi_d2f+0x90>
10017f68:	3301      	adds	r3, #1
10017f6a:	2bff      	cmp	r3, #255	; 0xff
10017f6c:	d003      	beq.n	10017f76 <__aeabi_d2f+0x5a>
10017f6e:	0192      	lsls	r2, r2, #6
10017f70:	0a52      	lsrs	r2, r2, #9
10017f72:	b2db      	uxtb	r3, r3
10017f74:	e001      	b.n	10017f7a <__aeabi_d2f+0x5e>
10017f76:	23ff      	movs	r3, #255	; 0xff
10017f78:	2200      	movs	r2, #0
10017f7a:	0252      	lsls	r2, r2, #9
10017f7c:	0a52      	lsrs	r2, r2, #9
10017f7e:	05db      	lsls	r3, r3, #23
10017f80:	4313      	orrs	r3, r2
10017f82:	005b      	lsls	r3, r3, #1
10017f84:	07c9      	lsls	r1, r1, #31
10017f86:	085b      	lsrs	r3, r3, #1
10017f88:	430b      	orrs	r3, r1
10017f8a:	0018      	movs	r0, r3
10017f8c:	bd70      	pop	{r4, r5, r6, pc}
10017f8e:	2e00      	cmp	r6, #0
10017f90:	d007      	beq.n	10017fa2 <__aeabi_d2f+0x86>
10017f92:	4314      	orrs	r4, r2
10017f94:	d0ef      	beq.n	10017f76 <__aeabi_d2f+0x5a>
10017f96:	2080      	movs	r0, #128	; 0x80
10017f98:	00d2      	lsls	r2, r2, #3
10017f9a:	0480      	lsls	r0, r0, #18
10017f9c:	4302      	orrs	r2, r0
10017f9e:	23ff      	movs	r3, #255	; 0xff
10017fa0:	e7d7      	b.n	10017f52 <__aeabi_d2f+0x36>
10017fa2:	4322      	orrs	r2, r4
10017fa4:	2300      	movs	r3, #0
10017fa6:	2a00      	cmp	r2, #0
10017fa8:	d003      	beq.n	10017fb2 <__aeabi_d2f+0x96>
10017faa:	2205      	movs	r2, #5
10017fac:	08d2      	lsrs	r2, r2, #3
10017fae:	2bff      	cmp	r3, #255	; 0xff
10017fb0:	d003      	beq.n	10017fba <__aeabi_d2f+0x9e>
10017fb2:	0252      	lsls	r2, r2, #9
10017fb4:	0a52      	lsrs	r2, r2, #9
10017fb6:	b2db      	uxtb	r3, r3
10017fb8:	e7df      	b.n	10017f7a <__aeabi_d2f+0x5e>
10017fba:	2a00      	cmp	r2, #0
10017fbc:	d032      	beq.n	10018024 <__aeabi_d2f+0x108>
10017fbe:	2080      	movs	r0, #128	; 0x80
10017fc0:	03c0      	lsls	r0, r0, #15
10017fc2:	4302      	orrs	r2, r0
10017fc4:	0252      	lsls	r2, r2, #9
10017fc6:	0a52      	lsrs	r2, r2, #9
10017fc8:	e7d7      	b.n	10017f7a <__aeabi_d2f+0x5e>
10017fca:	0018      	movs	r0, r3
10017fcc:	3017      	adds	r0, #23
10017fce:	db14      	blt.n	10017ffa <__aeabi_d2f+0xde>
10017fd0:	2080      	movs	r0, #128	; 0x80
10017fd2:	0400      	lsls	r0, r0, #16
10017fd4:	4302      	orrs	r2, r0
10017fd6:	201e      	movs	r0, #30
10017fd8:	1ac0      	subs	r0, r0, r3
10017fda:	281f      	cmp	r0, #31
10017fdc:	dc0f      	bgt.n	10017ffe <__aeabi_d2f+0xe2>
10017fde:	0025      	movs	r5, r4
10017fe0:	4b12      	ldr	r3, [pc, #72]	; (1001802c <__aeabi_d2f+0x110>)
10017fe2:	18f3      	adds	r3, r6, r3
10017fe4:	409d      	lsls	r5, r3
10017fe6:	1e6e      	subs	r6, r5, #1
10017fe8:	41b5      	sbcs	r5, r6
10017fea:	409a      	lsls	r2, r3
10017fec:	002b      	movs	r3, r5
10017fee:	4313      	orrs	r3, r2
10017ff0:	0022      	movs	r2, r4
10017ff2:	40c2      	lsrs	r2, r0
10017ff4:	431a      	orrs	r2, r3
10017ff6:	2300      	movs	r3, #0
10017ff8:	e7ab      	b.n	10017f52 <__aeabi_d2f+0x36>
10017ffa:	2300      	movs	r3, #0
10017ffc:	e7d5      	b.n	10017faa <__aeabi_d2f+0x8e>
10017ffe:	2502      	movs	r5, #2
10018000:	426d      	negs	r5, r5
10018002:	1aeb      	subs	r3, r5, r3
10018004:	0015      	movs	r5, r2
10018006:	40dd      	lsrs	r5, r3
10018008:	2820      	cmp	r0, #32
1001800a:	d009      	beq.n	10018020 <__aeabi_d2f+0x104>
1001800c:	4b08      	ldr	r3, [pc, #32]	; (10018030 <__aeabi_d2f+0x114>)
1001800e:	18f3      	adds	r3, r6, r3
10018010:	409a      	lsls	r2, r3
10018012:	4314      	orrs	r4, r2
10018014:	1e62      	subs	r2, r4, #1
10018016:	4194      	sbcs	r4, r2
10018018:	0022      	movs	r2, r4
1001801a:	2300      	movs	r3, #0
1001801c:	432a      	orrs	r2, r5
1001801e:	e798      	b.n	10017f52 <__aeabi_d2f+0x36>
10018020:	2200      	movs	r2, #0
10018022:	e7f6      	b.n	10018012 <__aeabi_d2f+0xf6>
10018024:	2200      	movs	r2, #0
10018026:	e7a8      	b.n	10017f7a <__aeabi_d2f+0x5e>
10018028:	fffffc80 	.word	0xfffffc80
1001802c:	fffffc82 	.word	0xfffffc82
10018030:	fffffca2 	.word	0xfffffca2

10018034 <__clzsi2>:
10018034:	211c      	movs	r1, #28
10018036:	2301      	movs	r3, #1
10018038:	041b      	lsls	r3, r3, #16
1001803a:	4298      	cmp	r0, r3
1001803c:	d301      	bcc.n	10018042 <__clzsi2+0xe>
1001803e:	0c00      	lsrs	r0, r0, #16
10018040:	3910      	subs	r1, #16
10018042:	0a1b      	lsrs	r3, r3, #8
10018044:	4298      	cmp	r0, r3
10018046:	d301      	bcc.n	1001804c <__clzsi2+0x18>
10018048:	0a00      	lsrs	r0, r0, #8
1001804a:	3908      	subs	r1, #8
1001804c:	091b      	lsrs	r3, r3, #4
1001804e:	4298      	cmp	r0, r3
10018050:	d301      	bcc.n	10018056 <__clzsi2+0x22>
10018052:	0900      	lsrs	r0, r0, #4
10018054:	3904      	subs	r1, #4
10018056:	a202      	add	r2, pc, #8	; (adr r2, 10018060 <__clzsi2+0x2c>)
10018058:	5c10      	ldrb	r0, [r2, r0]
1001805a:	1840      	adds	r0, r0, r1
1001805c:	4770      	bx	lr
1001805e:	46c0      	nop			; (mov r8, r8)
10018060:	02020304 	.word	0x02020304
10018064:	01010101 	.word	0x01010101
	...

10018070 <__divdi3>:
10018070:	b5f0      	push	{r4, r5, r6, r7, lr}
10018072:	4644      	mov	r4, r8
10018074:	465f      	mov	r7, fp
10018076:	4656      	mov	r6, sl
10018078:	464d      	mov	r5, r9
1001807a:	b4f0      	push	{r4, r5, r6, r7}
1001807c:	001c      	movs	r4, r3
1001807e:	b083      	sub	sp, #12
10018080:	2900      	cmp	r1, #0
10018082:	da00      	bge.n	10018086 <__divdi3+0x16>
10018084:	e092      	b.n	100181ac <__divdi3+0x13c>
10018086:	000f      	movs	r7, r1
10018088:	2100      	movs	r1, #0
1001808a:	0006      	movs	r6, r0
1001808c:	468a      	mov	sl, r1
1001808e:	0010      	movs	r0, r2
10018090:	0019      	movs	r1, r3
10018092:	2c00      	cmp	r4, #0
10018094:	da00      	bge.n	10018098 <__divdi3+0x28>
10018096:	e080      	b.n	1001819a <__divdi3+0x12a>
10018098:	0034      	movs	r4, r6
1001809a:	003d      	movs	r5, r7
1001809c:	4681      	mov	r9, r0
1001809e:	4688      	mov	r8, r1
100180a0:	42b9      	cmp	r1, r7
100180a2:	d869      	bhi.n	10018178 <__divdi3+0x108>
100180a4:	d066      	beq.n	10018174 <__divdi3+0x104>
100180a6:	4641      	mov	r1, r8
100180a8:	4648      	mov	r0, r9
100180aa:	f000 f8bf 	bl	1001822c <__clzdi2>
100180ae:	4683      	mov	fp, r0
100180b0:	0039      	movs	r1, r7
100180b2:	0030      	movs	r0, r6
100180b4:	f000 f8ba 	bl	1001822c <__clzdi2>
100180b8:	465b      	mov	r3, fp
100180ba:	1a1b      	subs	r3, r3, r0
100180bc:	469c      	mov	ip, r3
100180be:	3b20      	subs	r3, #32
100180c0:	469b      	mov	fp, r3
100180c2:	d500      	bpl.n	100180c6 <__divdi3+0x56>
100180c4:	e086      	b.n	100181d4 <__divdi3+0x164>
100180c6:	4649      	mov	r1, r9
100180c8:	4658      	mov	r0, fp
100180ca:	4081      	lsls	r1, r0
100180cc:	000b      	movs	r3, r1
100180ce:	4649      	mov	r1, r9
100180d0:	4660      	mov	r0, ip
100180d2:	4081      	lsls	r1, r0
100180d4:	000a      	movs	r2, r1
100180d6:	42bb      	cmp	r3, r7
100180d8:	d900      	bls.n	100180dc <__divdi3+0x6c>
100180da:	e071      	b.n	100181c0 <__divdi3+0x150>
100180dc:	d06d      	beq.n	100181ba <__divdi3+0x14a>
100180de:	0034      	movs	r4, r6
100180e0:	003d      	movs	r5, r7
100180e2:	4659      	mov	r1, fp
100180e4:	1aa4      	subs	r4, r4, r2
100180e6:	419d      	sbcs	r5, r3
100180e8:	2900      	cmp	r1, #0
100180ea:	da00      	bge.n	100180ee <__divdi3+0x7e>
100180ec:	e089      	b.n	10018202 <__divdi3+0x192>
100180ee:	2100      	movs	r1, #0
100180f0:	2000      	movs	r0, #0
100180f2:	2601      	movs	r6, #1
100180f4:	9000      	str	r0, [sp, #0]
100180f6:	9101      	str	r1, [sp, #4]
100180f8:	4659      	mov	r1, fp
100180fa:	408e      	lsls	r6, r1
100180fc:	9601      	str	r6, [sp, #4]
100180fe:	4661      	mov	r1, ip
10018100:	2601      	movs	r6, #1
10018102:	408e      	lsls	r6, r1
10018104:	4661      	mov	r1, ip
10018106:	9600      	str	r6, [sp, #0]
10018108:	2900      	cmp	r1, #0
1001810a:	d060      	beq.n	100181ce <__divdi3+0x15e>
1001810c:	07d9      	lsls	r1, r3, #31
1001810e:	0856      	lsrs	r6, r2, #1
10018110:	430e      	orrs	r6, r1
10018112:	085f      	lsrs	r7, r3, #1
10018114:	4661      	mov	r1, ip
10018116:	2201      	movs	r2, #1
10018118:	2300      	movs	r3, #0
1001811a:	e00c      	b.n	10018136 <__divdi3+0xc6>
1001811c:	42af      	cmp	r7, r5
1001811e:	d101      	bne.n	10018124 <__divdi3+0xb4>
10018120:	42a6      	cmp	r6, r4
10018122:	d80a      	bhi.n	1001813a <__divdi3+0xca>
10018124:	1ba4      	subs	r4, r4, r6
10018126:	41bd      	sbcs	r5, r7
10018128:	1924      	adds	r4, r4, r4
1001812a:	416d      	adcs	r5, r5
1001812c:	3901      	subs	r1, #1
1001812e:	18a4      	adds	r4, r4, r2
10018130:	415d      	adcs	r5, r3
10018132:	2900      	cmp	r1, #0
10018134:	d006      	beq.n	10018144 <__divdi3+0xd4>
10018136:	42af      	cmp	r7, r5
10018138:	d9f0      	bls.n	1001811c <__divdi3+0xac>
1001813a:	3901      	subs	r1, #1
1001813c:	1924      	adds	r4, r4, r4
1001813e:	416d      	adcs	r5, r5
10018140:	2900      	cmp	r1, #0
10018142:	d1f8      	bne.n	10018136 <__divdi3+0xc6>
10018144:	465b      	mov	r3, fp
10018146:	9800      	ldr	r0, [sp, #0]
10018148:	9901      	ldr	r1, [sp, #4]
1001814a:	1900      	adds	r0, r0, r4
1001814c:	4169      	adcs	r1, r5
1001814e:	2b00      	cmp	r3, #0
10018150:	db4c      	blt.n	100181ec <__divdi3+0x17c>
10018152:	002e      	movs	r6, r5
10018154:	40de      	lsrs	r6, r3
10018156:	4663      	mov	r3, ip
10018158:	002c      	movs	r4, r5
1001815a:	40dc      	lsrs	r4, r3
1001815c:	465b      	mov	r3, fp
1001815e:	2b00      	cmp	r3, #0
10018160:	db5a      	blt.n	10018218 <__divdi3+0x1a8>
10018162:	0034      	movs	r4, r6
10018164:	409c      	lsls	r4, r3
10018166:	0023      	movs	r3, r4
10018168:	4664      	mov	r4, ip
1001816a:	40a6      	lsls	r6, r4
1001816c:	0032      	movs	r2, r6
1001816e:	1a80      	subs	r0, r0, r2
10018170:	4199      	sbcs	r1, r3
10018172:	e003      	b.n	1001817c <__divdi3+0x10c>
10018174:	42b0      	cmp	r0, r6
10018176:	d996      	bls.n	100180a6 <__divdi3+0x36>
10018178:	2000      	movs	r0, #0
1001817a:	2100      	movs	r1, #0
1001817c:	4653      	mov	r3, sl
1001817e:	2b00      	cmp	r3, #0
10018180:	d004      	beq.n	1001818c <__divdi3+0x11c>
10018182:	0003      	movs	r3, r0
10018184:	000c      	movs	r4, r1
10018186:	2100      	movs	r1, #0
10018188:	4258      	negs	r0, r3
1001818a:	41a1      	sbcs	r1, r4
1001818c:	b003      	add	sp, #12
1001818e:	bc3c      	pop	{r2, r3, r4, r5}
10018190:	4690      	mov	r8, r2
10018192:	4699      	mov	r9, r3
10018194:	46a2      	mov	sl, r4
10018196:	46ab      	mov	fp, r5
10018198:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001819a:	4653      	mov	r3, sl
1001819c:	43db      	mvns	r3, r3
1001819e:	000c      	movs	r4, r1
100181a0:	469a      	mov	sl, r3
100181a2:	0013      	movs	r3, r2
100181a4:	2100      	movs	r1, #0
100181a6:	4258      	negs	r0, r3
100181a8:	41a1      	sbcs	r1, r4
100181aa:	e775      	b.n	10018098 <__divdi3+0x28>
100181ac:	2700      	movs	r7, #0
100181ae:	4246      	negs	r6, r0
100181b0:	418f      	sbcs	r7, r1
100181b2:	2101      	movs	r1, #1
100181b4:	4249      	negs	r1, r1
100181b6:	468a      	mov	sl, r1
100181b8:	e769      	b.n	1001808e <__divdi3+0x1e>
100181ba:	42b1      	cmp	r1, r6
100181bc:	d800      	bhi.n	100181c0 <__divdi3+0x150>
100181be:	e78e      	b.n	100180de <__divdi3+0x6e>
100181c0:	2100      	movs	r1, #0
100181c2:	2000      	movs	r0, #0
100181c4:	9000      	str	r0, [sp, #0]
100181c6:	9101      	str	r1, [sp, #4]
100181c8:	4661      	mov	r1, ip
100181ca:	2900      	cmp	r1, #0
100181cc:	d19e      	bne.n	1001810c <__divdi3+0x9c>
100181ce:	9800      	ldr	r0, [sp, #0]
100181d0:	9901      	ldr	r1, [sp, #4]
100181d2:	e7d3      	b.n	1001817c <__divdi3+0x10c>
100181d4:	4662      	mov	r2, ip
100181d6:	4640      	mov	r0, r8
100181d8:	2320      	movs	r3, #32
100181da:	4649      	mov	r1, r9
100181dc:	4090      	lsls	r0, r2
100181de:	1a9b      	subs	r3, r3, r2
100181e0:	40d9      	lsrs	r1, r3
100181e2:	0003      	movs	r3, r0
100181e4:	9100      	str	r1, [sp, #0]
100181e6:	9900      	ldr	r1, [sp, #0]
100181e8:	430b      	orrs	r3, r1
100181ea:	e770      	b.n	100180ce <__divdi3+0x5e>
100181ec:	4662      	mov	r2, ip
100181ee:	2320      	movs	r3, #32
100181f0:	1a9b      	subs	r3, r3, r2
100181f2:	002a      	movs	r2, r5
100181f4:	409a      	lsls	r2, r3
100181f6:	0026      	movs	r6, r4
100181f8:	0013      	movs	r3, r2
100181fa:	4662      	mov	r2, ip
100181fc:	40d6      	lsrs	r6, r2
100181fe:	431e      	orrs	r6, r3
10018200:	e7a9      	b.n	10018156 <__divdi3+0xe6>
10018202:	4661      	mov	r1, ip
10018204:	2620      	movs	r6, #32
10018206:	2701      	movs	r7, #1
10018208:	1a76      	subs	r6, r6, r1
1001820a:	2000      	movs	r0, #0
1001820c:	2100      	movs	r1, #0
1001820e:	40f7      	lsrs	r7, r6
10018210:	9000      	str	r0, [sp, #0]
10018212:	9101      	str	r1, [sp, #4]
10018214:	9701      	str	r7, [sp, #4]
10018216:	e772      	b.n	100180fe <__divdi3+0x8e>
10018218:	4662      	mov	r2, ip
1001821a:	2320      	movs	r3, #32
1001821c:	0035      	movs	r5, r6
1001821e:	4094      	lsls	r4, r2
10018220:	1a9b      	subs	r3, r3, r2
10018222:	40dd      	lsrs	r5, r3
10018224:	0023      	movs	r3, r4
10018226:	432b      	orrs	r3, r5
10018228:	e79e      	b.n	10018168 <__divdi3+0xf8>
1001822a:	46c0      	nop			; (mov r8, r8)

1001822c <__clzdi2>:
1001822c:	b510      	push	{r4, lr}
1001822e:	2900      	cmp	r1, #0
10018230:	d103      	bne.n	1001823a <__clzdi2+0xe>
10018232:	f7ff feff 	bl	10018034 <__clzsi2>
10018236:	3020      	adds	r0, #32
10018238:	e002      	b.n	10018240 <__clzdi2+0x14>
1001823a:	1c08      	adds	r0, r1, #0
1001823c:	f7ff fefa 	bl	10018034 <__clzsi2>
10018240:	bd10      	pop	{r4, pc}
10018242:	46c0      	nop			; (mov r8, r8)

10018244 <__errno>:
10018244:	4b01      	ldr	r3, [pc, #4]	; (1001824c <__errno+0x8>)
10018246:	6818      	ldr	r0, [r3, #0]
10018248:	4770      	bx	lr
1001824a:	46c0      	nop			; (mov r8, r8)
1001824c:	1001b68c 	.word	0x1001b68c

10018250 <__libc_init_array>:
10018250:	4b0e      	ldr	r3, [pc, #56]	; (1001828c <__libc_init_array+0x3c>)
10018252:	b570      	push	{r4, r5, r6, lr}
10018254:	2500      	movs	r5, #0
10018256:	001e      	movs	r6, r3
10018258:	4c0d      	ldr	r4, [pc, #52]	; (10018290 <__libc_init_array+0x40>)
1001825a:	1ae4      	subs	r4, r4, r3
1001825c:	10a4      	asrs	r4, r4, #2
1001825e:	42a5      	cmp	r5, r4
10018260:	d004      	beq.n	1001826c <__libc_init_array+0x1c>
10018262:	00ab      	lsls	r3, r5, #2
10018264:	58f3      	ldr	r3, [r6, r3]
10018266:	4798      	blx	r3
10018268:	3501      	adds	r5, #1
1001826a:	e7f8      	b.n	1001825e <__libc_init_array+0xe>
1001826c:	f003 f99c 	bl	1001b5a8 <_init>
10018270:	4b08      	ldr	r3, [pc, #32]	; (10018294 <__libc_init_array+0x44>)
10018272:	2500      	movs	r5, #0
10018274:	001e      	movs	r6, r3
10018276:	4c08      	ldr	r4, [pc, #32]	; (10018298 <__libc_init_array+0x48>)
10018278:	1ae4      	subs	r4, r4, r3
1001827a:	10a4      	asrs	r4, r4, #2
1001827c:	42a5      	cmp	r5, r4
1001827e:	d004      	beq.n	1001828a <__libc_init_array+0x3a>
10018280:	00ab      	lsls	r3, r5, #2
10018282:	58f3      	ldr	r3, [r6, r3]
10018284:	4798      	blx	r3
10018286:	3501      	adds	r5, #1
10018288:	e7f8      	b.n	1001827c <__libc_init_array+0x2c>
1001828a:	bd70      	pop	{r4, r5, r6, pc}
1001828c:	1001b5b4 	.word	0x1001b5b4
10018290:	1001b5b4 	.word	0x1001b5b4
10018294:	1001b5b4 	.word	0x1001b5b4
10018298:	1001b5b8 	.word	0x1001b5b8

1001829c <malloc>:
1001829c:	b510      	push	{r4, lr}
1001829e:	4b03      	ldr	r3, [pc, #12]	; (100182ac <malloc+0x10>)
100182a0:	0001      	movs	r1, r0
100182a2:	6818      	ldr	r0, [r3, #0]
100182a4:	f000 f880 	bl	100183a8 <_malloc_r>
100182a8:	bd10      	pop	{r4, pc}
100182aa:	46c0      	nop			; (mov r8, r8)
100182ac:	1001b68c 	.word	0x1001b68c

100182b0 <memcmp>:
100182b0:	b530      	push	{r4, r5, lr}
100182b2:	2400      	movs	r4, #0
100182b4:	42a2      	cmp	r2, r4
100182b6:	d008      	beq.n	100182ca <memcmp+0x1a>
100182b8:	5d03      	ldrb	r3, [r0, r4]
100182ba:	1c65      	adds	r5, r4, #1
100182bc:	5d0c      	ldrb	r4, [r1, r4]
100182be:	42a3      	cmp	r3, r4
100182c0:	d001      	beq.n	100182c6 <memcmp+0x16>
100182c2:	1b18      	subs	r0, r3, r4
100182c4:	e002      	b.n	100182cc <memcmp+0x1c>
100182c6:	002c      	movs	r4, r5
100182c8:	e7f4      	b.n	100182b4 <memcmp+0x4>
100182ca:	2000      	movs	r0, #0
100182cc:	bd30      	pop	{r4, r5, pc}

100182ce <memcpy>:
100182ce:	2300      	movs	r3, #0
100182d0:	b510      	push	{r4, lr}
100182d2:	429a      	cmp	r2, r3
100182d4:	d003      	beq.n	100182de <memcpy+0x10>
100182d6:	5ccc      	ldrb	r4, [r1, r3]
100182d8:	54c4      	strb	r4, [r0, r3]
100182da:	3301      	adds	r3, #1
100182dc:	e7f9      	b.n	100182d2 <memcpy+0x4>
100182de:	bd10      	pop	{r4, pc}

100182e0 <memmove>:
100182e0:	b510      	push	{r4, lr}
100182e2:	4288      	cmp	r0, r1
100182e4:	d902      	bls.n	100182ec <memmove+0xc>
100182e6:	188b      	adds	r3, r1, r2
100182e8:	4298      	cmp	r0, r3
100182ea:	d301      	bcc.n	100182f0 <memmove+0x10>
100182ec:	2300      	movs	r3, #0
100182ee:	e005      	b.n	100182fc <memmove+0x1c>
100182f0:	1a9b      	subs	r3, r3, r2
100182f2:	3a01      	subs	r2, #1
100182f4:	d308      	bcc.n	10018308 <memmove+0x28>
100182f6:	5c99      	ldrb	r1, [r3, r2]
100182f8:	5481      	strb	r1, [r0, r2]
100182fa:	e7fa      	b.n	100182f2 <memmove+0x12>
100182fc:	4293      	cmp	r3, r2
100182fe:	d003      	beq.n	10018308 <memmove+0x28>
10018300:	5ccc      	ldrb	r4, [r1, r3]
10018302:	54c4      	strb	r4, [r0, r3]
10018304:	3301      	adds	r3, #1
10018306:	e7f9      	b.n	100182fc <memmove+0x1c>
10018308:	bd10      	pop	{r4, pc}

1001830a <memset>:
1001830a:	0003      	movs	r3, r0
1001830c:	1882      	adds	r2, r0, r2
1001830e:	4293      	cmp	r3, r2
10018310:	d002      	beq.n	10018318 <memset+0xe>
10018312:	7019      	strb	r1, [r3, #0]
10018314:	3301      	adds	r3, #1
10018316:	e7fa      	b.n	1001830e <memset+0x4>
10018318:	4770      	bx	lr
	...

1001831c <_free_r>:
1001831c:	b530      	push	{r4, r5, lr}
1001831e:	2900      	cmp	r1, #0
10018320:	d03e      	beq.n	100183a0 <_free_r+0x84>
10018322:	3904      	subs	r1, #4
10018324:	680b      	ldr	r3, [r1, #0]
10018326:	2b00      	cmp	r3, #0
10018328:	da00      	bge.n	1001832c <_free_r+0x10>
1001832a:	18c9      	adds	r1, r1, r3
1001832c:	4a1d      	ldr	r2, [pc, #116]	; (100183a4 <_free_r+0x88>)
1001832e:	6813      	ldr	r3, [r2, #0]
10018330:	0014      	movs	r4, r2
10018332:	2b00      	cmp	r3, #0
10018334:	d102      	bne.n	1001833c <_free_r+0x20>
10018336:	604b      	str	r3, [r1, #4]
10018338:	6011      	str	r1, [r2, #0]
1001833a:	e031      	b.n	100183a0 <_free_r+0x84>
1001833c:	428b      	cmp	r3, r1
1001833e:	d90d      	bls.n	1001835c <_free_r+0x40>
10018340:	680a      	ldr	r2, [r1, #0]
10018342:	1888      	adds	r0, r1, r2
10018344:	4283      	cmp	r3, r0
10018346:	d103      	bne.n	10018350 <_free_r+0x34>
10018348:	6818      	ldr	r0, [r3, #0]
1001834a:	685b      	ldr	r3, [r3, #4]
1001834c:	1882      	adds	r2, r0, r2
1001834e:	600a      	str	r2, [r1, #0]
10018350:	604b      	str	r3, [r1, #4]
10018352:	6021      	str	r1, [r4, #0]
10018354:	e024      	b.n	100183a0 <_free_r+0x84>
10018356:	428a      	cmp	r2, r1
10018358:	d803      	bhi.n	10018362 <_free_r+0x46>
1001835a:	0013      	movs	r3, r2
1001835c:	685a      	ldr	r2, [r3, #4]
1001835e:	2a00      	cmp	r2, #0
10018360:	d1f9      	bne.n	10018356 <_free_r+0x3a>
10018362:	681d      	ldr	r5, [r3, #0]
10018364:	195c      	adds	r4, r3, r5
10018366:	428c      	cmp	r4, r1
10018368:	d10b      	bne.n	10018382 <_free_r+0x66>
1001836a:	6809      	ldr	r1, [r1, #0]
1001836c:	1869      	adds	r1, r5, r1
1001836e:	1858      	adds	r0, r3, r1
10018370:	6019      	str	r1, [r3, #0]
10018372:	4282      	cmp	r2, r0
10018374:	d114      	bne.n	100183a0 <_free_r+0x84>
10018376:	6810      	ldr	r0, [r2, #0]
10018378:	6852      	ldr	r2, [r2, #4]
1001837a:	1841      	adds	r1, r0, r1
1001837c:	6019      	str	r1, [r3, #0]
1001837e:	605a      	str	r2, [r3, #4]
10018380:	e00e      	b.n	100183a0 <_free_r+0x84>
10018382:	428c      	cmp	r4, r1
10018384:	d902      	bls.n	1001838c <_free_r+0x70>
10018386:	230c      	movs	r3, #12
10018388:	6003      	str	r3, [r0, #0]
1001838a:	e009      	b.n	100183a0 <_free_r+0x84>
1001838c:	6808      	ldr	r0, [r1, #0]
1001838e:	180c      	adds	r4, r1, r0
10018390:	42a2      	cmp	r2, r4
10018392:	d103      	bne.n	1001839c <_free_r+0x80>
10018394:	6814      	ldr	r4, [r2, #0]
10018396:	6852      	ldr	r2, [r2, #4]
10018398:	1820      	adds	r0, r4, r0
1001839a:	6008      	str	r0, [r1, #0]
1001839c:	604a      	str	r2, [r1, #4]
1001839e:	6059      	str	r1, [r3, #4]
100183a0:	bd30      	pop	{r4, r5, pc}
100183a2:	46c0      	nop			; (mov r8, r8)
100183a4:	1001d4fc 	.word	0x1001d4fc

100183a8 <_malloc_r>:
100183a8:	2303      	movs	r3, #3
100183aa:	b570      	push	{r4, r5, r6, lr}
100183ac:	1ccd      	adds	r5, r1, #3
100183ae:	439d      	bics	r5, r3
100183b0:	3508      	adds	r5, #8
100183b2:	0006      	movs	r6, r0
100183b4:	2d0c      	cmp	r5, #12
100183b6:	d201      	bcs.n	100183bc <_malloc_r+0x14>
100183b8:	250c      	movs	r5, #12
100183ba:	e005      	b.n	100183c8 <_malloc_r+0x20>
100183bc:	2d00      	cmp	r5, #0
100183be:	da03      	bge.n	100183c8 <_malloc_r+0x20>
100183c0:	230c      	movs	r3, #12
100183c2:	2000      	movs	r0, #0
100183c4:	6033      	str	r3, [r6, #0]
100183c6:	e040      	b.n	1001844a <_malloc_r+0xa2>
100183c8:	42a9      	cmp	r1, r5
100183ca:	d8f9      	bhi.n	100183c0 <_malloc_r+0x18>
100183cc:	4b1f      	ldr	r3, [pc, #124]	; (1001844c <_malloc_r+0xa4>)
100183ce:	681c      	ldr	r4, [r3, #0]
100183d0:	001a      	movs	r2, r3
100183d2:	0021      	movs	r1, r4
100183d4:	2900      	cmp	r1, #0
100183d6:	d013      	beq.n	10018400 <_malloc_r+0x58>
100183d8:	680b      	ldr	r3, [r1, #0]
100183da:	1b5b      	subs	r3, r3, r5
100183dc:	d40d      	bmi.n	100183fa <_malloc_r+0x52>
100183de:	2b0b      	cmp	r3, #11
100183e0:	d902      	bls.n	100183e8 <_malloc_r+0x40>
100183e2:	600b      	str	r3, [r1, #0]
100183e4:	18cc      	adds	r4, r1, r3
100183e6:	e01e      	b.n	10018426 <_malloc_r+0x7e>
100183e8:	428c      	cmp	r4, r1
100183ea:	d102      	bne.n	100183f2 <_malloc_r+0x4a>
100183ec:	6863      	ldr	r3, [r4, #4]
100183ee:	6013      	str	r3, [r2, #0]
100183f0:	e01a      	b.n	10018428 <_malloc_r+0x80>
100183f2:	684b      	ldr	r3, [r1, #4]
100183f4:	6063      	str	r3, [r4, #4]
100183f6:	000c      	movs	r4, r1
100183f8:	e016      	b.n	10018428 <_malloc_r+0x80>
100183fa:	000c      	movs	r4, r1
100183fc:	6849      	ldr	r1, [r1, #4]
100183fe:	e7e9      	b.n	100183d4 <_malloc_r+0x2c>
10018400:	4c13      	ldr	r4, [pc, #76]	; (10018450 <_malloc_r+0xa8>)
10018402:	6823      	ldr	r3, [r4, #0]
10018404:	2b00      	cmp	r3, #0
10018406:	d103      	bne.n	10018410 <_malloc_r+0x68>
10018408:	0030      	movs	r0, r6
1001840a:	f000 f8f9 	bl	10018600 <_sbrk_r>
1001840e:	6020      	str	r0, [r4, #0]
10018410:	0029      	movs	r1, r5
10018412:	0030      	movs	r0, r6
10018414:	f000 f8f4 	bl	10018600 <_sbrk_r>
10018418:	1c43      	adds	r3, r0, #1
1001841a:	d0d1      	beq.n	100183c0 <_malloc_r+0x18>
1001841c:	2303      	movs	r3, #3
1001841e:	1cc4      	adds	r4, r0, #3
10018420:	439c      	bics	r4, r3
10018422:	42a0      	cmp	r0, r4
10018424:	d10a      	bne.n	1001843c <_malloc_r+0x94>
10018426:	6025      	str	r5, [r4, #0]
10018428:	0020      	movs	r0, r4
1001842a:	2207      	movs	r2, #7
1001842c:	300b      	adds	r0, #11
1001842e:	1d23      	adds	r3, r4, #4
10018430:	4390      	bics	r0, r2
10018432:	1ac3      	subs	r3, r0, r3
10018434:	d009      	beq.n	1001844a <_malloc_r+0xa2>
10018436:	425a      	negs	r2, r3
10018438:	50e2      	str	r2, [r4, r3]
1001843a:	e006      	b.n	1001844a <_malloc_r+0xa2>
1001843c:	1a21      	subs	r1, r4, r0
1001843e:	0030      	movs	r0, r6
10018440:	f000 f8de 	bl	10018600 <_sbrk_r>
10018444:	1c43      	adds	r3, r0, #1
10018446:	d1ee      	bne.n	10018426 <_malloc_r+0x7e>
10018448:	e7ba      	b.n	100183c0 <_malloc_r+0x18>
1001844a:	bd70      	pop	{r4, r5, r6, pc}
1001844c:	1001d4fc 	.word	0x1001d4fc
10018450:	1001d4f8 	.word	0x1001d4f8

10018454 <iprintf>:
10018454:	b40f      	push	{r0, r1, r2, r3}
10018456:	4b0b      	ldr	r3, [pc, #44]	; (10018484 <iprintf+0x30>)
10018458:	b513      	push	{r0, r1, r4, lr}
1001845a:	681c      	ldr	r4, [r3, #0]
1001845c:	2c00      	cmp	r4, #0
1001845e:	d005      	beq.n	1001846c <iprintf+0x18>
10018460:	69a3      	ldr	r3, [r4, #24]
10018462:	2b00      	cmp	r3, #0
10018464:	d102      	bne.n	1001846c <iprintf+0x18>
10018466:	0020      	movs	r0, r4
10018468:	f000 fb58 	bl	10018b1c <__sinit>
1001846c:	ab05      	add	r3, sp, #20
1001846e:	9a04      	ldr	r2, [sp, #16]
10018470:	68a1      	ldr	r1, [r4, #8]
10018472:	0020      	movs	r0, r4
10018474:	9301      	str	r3, [sp, #4]
10018476:	f000 fc71 	bl	10018d5c <_vfiprintf_r>
1001847a:	bc16      	pop	{r1, r2, r4}
1001847c:	bc08      	pop	{r3}
1001847e:	b004      	add	sp, #16
10018480:	4718      	bx	r3
10018482:	46c0      	nop			; (mov r8, r8)
10018484:	1001b68c 	.word	0x1001b68c

10018488 <putchar>:
10018488:	4b08      	ldr	r3, [pc, #32]	; (100184ac <putchar+0x24>)
1001848a:	b570      	push	{r4, r5, r6, lr}
1001848c:	681c      	ldr	r4, [r3, #0]
1001848e:	0005      	movs	r5, r0
10018490:	2c00      	cmp	r4, #0
10018492:	d005      	beq.n	100184a0 <putchar+0x18>
10018494:	69a3      	ldr	r3, [r4, #24]
10018496:	2b00      	cmp	r3, #0
10018498:	d102      	bne.n	100184a0 <putchar+0x18>
1001849a:	0020      	movs	r0, r4
1001849c:	f000 fb3e 	bl	10018b1c <__sinit>
100184a0:	0029      	movs	r1, r5
100184a2:	68a2      	ldr	r2, [r4, #8]
100184a4:	0020      	movs	r0, r4
100184a6:	f000 ff05 	bl	100192b4 <_putc_r>
100184aa:	bd70      	pop	{r4, r5, r6, pc}
100184ac:	1001b68c 	.word	0x1001b68c

100184b0 <_puts_r>:
100184b0:	b570      	push	{r4, r5, r6, lr}
100184b2:	0005      	movs	r5, r0
100184b4:	000e      	movs	r6, r1
100184b6:	2800      	cmp	r0, #0
100184b8:	d004      	beq.n	100184c4 <_puts_r+0x14>
100184ba:	6983      	ldr	r3, [r0, #24]
100184bc:	2b00      	cmp	r3, #0
100184be:	d101      	bne.n	100184c4 <_puts_r+0x14>
100184c0:	f000 fb2c 	bl	10018b1c <__sinit>
100184c4:	69ab      	ldr	r3, [r5, #24]
100184c6:	68ac      	ldr	r4, [r5, #8]
100184c8:	2b00      	cmp	r3, #0
100184ca:	d102      	bne.n	100184d2 <_puts_r+0x22>
100184cc:	0028      	movs	r0, r5
100184ce:	f000 fb25 	bl	10018b1c <__sinit>
100184d2:	4b25      	ldr	r3, [pc, #148]	; (10018568 <_puts_r+0xb8>)
100184d4:	429c      	cmp	r4, r3
100184d6:	d101      	bne.n	100184dc <_puts_r+0x2c>
100184d8:	686c      	ldr	r4, [r5, #4]
100184da:	e008      	b.n	100184ee <_puts_r+0x3e>
100184dc:	4b23      	ldr	r3, [pc, #140]	; (1001856c <_puts_r+0xbc>)
100184de:	429c      	cmp	r4, r3
100184e0:	d101      	bne.n	100184e6 <_puts_r+0x36>
100184e2:	68ac      	ldr	r4, [r5, #8]
100184e4:	e003      	b.n	100184ee <_puts_r+0x3e>
100184e6:	4b22      	ldr	r3, [pc, #136]	; (10018570 <_puts_r+0xc0>)
100184e8:	429c      	cmp	r4, r3
100184ea:	d100      	bne.n	100184ee <_puts_r+0x3e>
100184ec:	68ec      	ldr	r4, [r5, #12]
100184ee:	89a3      	ldrh	r3, [r4, #12]
100184f0:	071b      	lsls	r3, r3, #28
100184f2:	d502      	bpl.n	100184fa <_puts_r+0x4a>
100184f4:	6923      	ldr	r3, [r4, #16]
100184f6:	2b00      	cmp	r3, #0
100184f8:	d111      	bne.n	1001851e <_puts_r+0x6e>
100184fa:	0021      	movs	r1, r4
100184fc:	0028      	movs	r0, r5
100184fe:	f000 f9a3 	bl	10018848 <__swsetup_r>
10018502:	2800      	cmp	r0, #0
10018504:	d00b      	beq.n	1001851e <_puts_r+0x6e>
10018506:	2001      	movs	r0, #1
10018508:	4240      	negs	r0, r0
1001850a:	e02b      	b.n	10018564 <_puts_r+0xb4>
1001850c:	3b01      	subs	r3, #1
1001850e:	3601      	adds	r6, #1
10018510:	60a3      	str	r3, [r4, #8]
10018512:	2b00      	cmp	r3, #0
10018514:	db08      	blt.n	10018528 <_puts_r+0x78>
10018516:	6823      	ldr	r3, [r4, #0]
10018518:	1c5a      	adds	r2, r3, #1
1001851a:	6022      	str	r2, [r4, #0]
1001851c:	7019      	strb	r1, [r3, #0]
1001851e:	7831      	ldrb	r1, [r6, #0]
10018520:	68a3      	ldr	r3, [r4, #8]
10018522:	2900      	cmp	r1, #0
10018524:	d1f2      	bne.n	1001850c <_puts_r+0x5c>
10018526:	e00b      	b.n	10018540 <_puts_r+0x90>
10018528:	69a2      	ldr	r2, [r4, #24]
1001852a:	4293      	cmp	r3, r2
1001852c:	db01      	blt.n	10018532 <_puts_r+0x82>
1001852e:	290a      	cmp	r1, #10
10018530:	d1f1      	bne.n	10018516 <_puts_r+0x66>
10018532:	0022      	movs	r2, r4
10018534:	0028      	movs	r0, r5
10018536:	f000 f92f 	bl	10018798 <__swbuf_r>
1001853a:	1c43      	adds	r3, r0, #1
1001853c:	d1ef      	bne.n	1001851e <_puts_r+0x6e>
1001853e:	e7e2      	b.n	10018506 <_puts_r+0x56>
10018540:	3b01      	subs	r3, #1
10018542:	60a3      	str	r3, [r4, #8]
10018544:	2b00      	cmp	r3, #0
10018546:	da08      	bge.n	1001855a <_puts_r+0xaa>
10018548:	0022      	movs	r2, r4
1001854a:	310a      	adds	r1, #10
1001854c:	0028      	movs	r0, r5
1001854e:	f000 f923 	bl	10018798 <__swbuf_r>
10018552:	1c43      	adds	r3, r0, #1
10018554:	d0d7      	beq.n	10018506 <_puts_r+0x56>
10018556:	200a      	movs	r0, #10
10018558:	e004      	b.n	10018564 <_puts_r+0xb4>
1001855a:	200a      	movs	r0, #10
1001855c:	6823      	ldr	r3, [r4, #0]
1001855e:	1c5a      	adds	r2, r3, #1
10018560:	6022      	str	r2, [r4, #0]
10018562:	7018      	strb	r0, [r3, #0]
10018564:	bd70      	pop	{r4, r5, r6, pc}
10018566:	46c0      	nop			; (mov r8, r8)
10018568:	1001b514 	.word	0x1001b514
1001856c:	1001b534 	.word	0x1001b534
10018570:	1001b554 	.word	0x1001b554

10018574 <puts>:
10018574:	b510      	push	{r4, lr}
10018576:	4b03      	ldr	r3, [pc, #12]	; (10018584 <puts+0x10>)
10018578:	0001      	movs	r1, r0
1001857a:	6818      	ldr	r0, [r3, #0]
1001857c:	f7ff ff98 	bl	100184b0 <_puts_r>
10018580:	bd10      	pop	{r4, pc}
10018582:	46c0      	nop			; (mov r8, r8)
10018584:	1001b68c 	.word	0x1001b68c

10018588 <rand>:
10018588:	4b15      	ldr	r3, [pc, #84]	; (100185e0 <rand+0x58>)
1001858a:	b510      	push	{r4, lr}
1001858c:	681c      	ldr	r4, [r3, #0]
1001858e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10018590:	2b00      	cmp	r3, #0
10018592:	d115      	bne.n	100185c0 <rand+0x38>
10018594:	2018      	movs	r0, #24
10018596:	f7ff fe81 	bl	1001829c <malloc>
1001859a:	4b12      	ldr	r3, [pc, #72]	; (100185e4 <rand+0x5c>)
1001859c:	63a0      	str	r0, [r4, #56]	; 0x38
1001859e:	8003      	strh	r3, [r0, #0]
100185a0:	4b11      	ldr	r3, [pc, #68]	; (100185e8 <rand+0x60>)
100185a2:	2201      	movs	r2, #1
100185a4:	8043      	strh	r3, [r0, #2]
100185a6:	4b11      	ldr	r3, [pc, #68]	; (100185ec <rand+0x64>)
100185a8:	8083      	strh	r3, [r0, #4]
100185aa:	4b11      	ldr	r3, [pc, #68]	; (100185f0 <rand+0x68>)
100185ac:	80c3      	strh	r3, [r0, #6]
100185ae:	4b11      	ldr	r3, [pc, #68]	; (100185f4 <rand+0x6c>)
100185b0:	8103      	strh	r3, [r0, #8]
100185b2:	2305      	movs	r3, #5
100185b4:	8143      	strh	r3, [r0, #10]
100185b6:	3306      	adds	r3, #6
100185b8:	8183      	strh	r3, [r0, #12]
100185ba:	2300      	movs	r3, #0
100185bc:	6102      	str	r2, [r0, #16]
100185be:	6143      	str	r3, [r0, #20]
100185c0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
100185c2:	4a0d      	ldr	r2, [pc, #52]	; (100185f8 <rand+0x70>)
100185c4:	6920      	ldr	r0, [r4, #16]
100185c6:	6961      	ldr	r1, [r4, #20]
100185c8:	4b0c      	ldr	r3, [pc, #48]	; (100185fc <rand+0x74>)
100185ca:	f7fc ff05 	bl	100153d8 <__aeabi_lmul>
100185ce:	2201      	movs	r2, #1
100185d0:	2300      	movs	r3, #0
100185d2:	1880      	adds	r0, r0, r2
100185d4:	4159      	adcs	r1, r3
100185d6:	6120      	str	r0, [r4, #16]
100185d8:	6161      	str	r1, [r4, #20]
100185da:	0048      	lsls	r0, r1, #1
100185dc:	0840      	lsrs	r0, r0, #1
100185de:	bd10      	pop	{r4, pc}
100185e0:	1001b68c 	.word	0x1001b68c
100185e4:	0000330e 	.word	0x0000330e
100185e8:	ffffabcd 	.word	0xffffabcd
100185ec:	00001234 	.word	0x00001234
100185f0:	ffffe66d 	.word	0xffffe66d
100185f4:	ffffdeec 	.word	0xffffdeec
100185f8:	4c957f2d 	.word	0x4c957f2d
100185fc:	5851f42d 	.word	0x5851f42d

10018600 <_sbrk_r>:
10018600:	2300      	movs	r3, #0
10018602:	b570      	push	{r4, r5, r6, lr}
10018604:	4c06      	ldr	r4, [pc, #24]	; (10018620 <_sbrk_r+0x20>)
10018606:	0005      	movs	r5, r0
10018608:	0008      	movs	r0, r1
1001860a:	6023      	str	r3, [r4, #0]
1001860c:	f7f5 fbd2 	bl	1000ddb4 <_sbrk>
10018610:	1c43      	adds	r3, r0, #1
10018612:	d103      	bne.n	1001861c <_sbrk_r+0x1c>
10018614:	6823      	ldr	r3, [r4, #0]
10018616:	2b00      	cmp	r3, #0
10018618:	d000      	beq.n	1001861c <_sbrk_r+0x1c>
1001861a:	602b      	str	r3, [r5, #0]
1001861c:	bd70      	pop	{r4, r5, r6, pc}
1001861e:	46c0      	nop			; (mov r8, r8)
10018620:	1001eaa0 	.word	0x1001eaa0

10018624 <setbuf>:
10018624:	424a      	negs	r2, r1
10018626:	414a      	adcs	r2, r1
10018628:	2380      	movs	r3, #128	; 0x80
1001862a:	b510      	push	{r4, lr}
1001862c:	0052      	lsls	r2, r2, #1
1001862e:	00db      	lsls	r3, r3, #3
10018630:	f000 f802 	bl	10018638 <setvbuf>
10018634:	bd10      	pop	{r4, pc}
	...

10018638 <setvbuf>:
10018638:	b5f0      	push	{r4, r5, r6, r7, lr}
1001863a:	001d      	movs	r5, r3
1001863c:	4b51      	ldr	r3, [pc, #324]	; (10018784 <setvbuf+0x14c>)
1001863e:	b085      	sub	sp, #20
10018640:	681e      	ldr	r6, [r3, #0]
10018642:	0004      	movs	r4, r0
10018644:	000f      	movs	r7, r1
10018646:	9200      	str	r2, [sp, #0]
10018648:	2e00      	cmp	r6, #0
1001864a:	d005      	beq.n	10018658 <setvbuf+0x20>
1001864c:	69b3      	ldr	r3, [r6, #24]
1001864e:	2b00      	cmp	r3, #0
10018650:	d102      	bne.n	10018658 <setvbuf+0x20>
10018652:	0030      	movs	r0, r6
10018654:	f000 fa62 	bl	10018b1c <__sinit>
10018658:	4b4b      	ldr	r3, [pc, #300]	; (10018788 <setvbuf+0x150>)
1001865a:	429c      	cmp	r4, r3
1001865c:	d101      	bne.n	10018662 <setvbuf+0x2a>
1001865e:	6874      	ldr	r4, [r6, #4]
10018660:	e008      	b.n	10018674 <setvbuf+0x3c>
10018662:	4b4a      	ldr	r3, [pc, #296]	; (1001878c <setvbuf+0x154>)
10018664:	429c      	cmp	r4, r3
10018666:	d101      	bne.n	1001866c <setvbuf+0x34>
10018668:	68b4      	ldr	r4, [r6, #8]
1001866a:	e003      	b.n	10018674 <setvbuf+0x3c>
1001866c:	4b48      	ldr	r3, [pc, #288]	; (10018790 <setvbuf+0x158>)
1001866e:	429c      	cmp	r4, r3
10018670:	d100      	bne.n	10018674 <setvbuf+0x3c>
10018672:	68f4      	ldr	r4, [r6, #12]
10018674:	9b00      	ldr	r3, [sp, #0]
10018676:	2b02      	cmp	r3, #2
10018678:	d005      	beq.n	10018686 <setvbuf+0x4e>
1001867a:	2b01      	cmp	r3, #1
1001867c:	d900      	bls.n	10018680 <setvbuf+0x48>
1001867e:	e07c      	b.n	1001877a <setvbuf+0x142>
10018680:	2d00      	cmp	r5, #0
10018682:	da00      	bge.n	10018686 <setvbuf+0x4e>
10018684:	e079      	b.n	1001877a <setvbuf+0x142>
10018686:	0021      	movs	r1, r4
10018688:	0030      	movs	r0, r6
1001868a:	f000 f9d9 	bl	10018a40 <_fflush_r>
1001868e:	6b61      	ldr	r1, [r4, #52]	; 0x34
10018690:	2900      	cmp	r1, #0
10018692:	d008      	beq.n	100186a6 <setvbuf+0x6e>
10018694:	0023      	movs	r3, r4
10018696:	3344      	adds	r3, #68	; 0x44
10018698:	4299      	cmp	r1, r3
1001869a:	d002      	beq.n	100186a2 <setvbuf+0x6a>
1001869c:	0030      	movs	r0, r6
1001869e:	f7ff fe3d 	bl	1001831c <_free_r>
100186a2:	2300      	movs	r3, #0
100186a4:	6363      	str	r3, [r4, #52]	; 0x34
100186a6:	2300      	movs	r3, #0
100186a8:	61a3      	str	r3, [r4, #24]
100186aa:	6063      	str	r3, [r4, #4]
100186ac:	89a3      	ldrh	r3, [r4, #12]
100186ae:	061b      	lsls	r3, r3, #24
100186b0:	d503      	bpl.n	100186ba <setvbuf+0x82>
100186b2:	6921      	ldr	r1, [r4, #16]
100186b4:	0030      	movs	r0, r6
100186b6:	f7ff fe31 	bl	1001831c <_free_r>
100186ba:	89a2      	ldrh	r2, [r4, #12]
100186bc:	4b35      	ldr	r3, [pc, #212]	; (10018794 <setvbuf+0x15c>)
100186be:	4013      	ands	r3, r2
100186c0:	81a3      	strh	r3, [r4, #12]
100186c2:	9b00      	ldr	r3, [sp, #0]
100186c4:	2b02      	cmp	r3, #2
100186c6:	d021      	beq.n	1001870c <setvbuf+0xd4>
100186c8:	ab03      	add	r3, sp, #12
100186ca:	aa02      	add	r2, sp, #8
100186cc:	0021      	movs	r1, r4
100186ce:	0030      	movs	r0, r6
100186d0:	f000 fab8 	bl	10018c44 <__swhatbuf_r>
100186d4:	89a3      	ldrh	r3, [r4, #12]
100186d6:	4318      	orrs	r0, r3
100186d8:	81a0      	strh	r0, [r4, #12]
100186da:	2d00      	cmp	r5, #0
100186dc:	d101      	bne.n	100186e2 <setvbuf+0xaa>
100186de:	9d02      	ldr	r5, [sp, #8]
100186e0:	e001      	b.n	100186e6 <setvbuf+0xae>
100186e2:	2f00      	cmp	r7, #0
100186e4:	d125      	bne.n	10018732 <setvbuf+0xfa>
100186e6:	0028      	movs	r0, r5
100186e8:	f7ff fdd8 	bl	1001829c <malloc>
100186ec:	9501      	str	r5, [sp, #4]
100186ee:	1e07      	subs	r7, r0, #0
100186f0:	d11a      	bne.n	10018728 <setvbuf+0xf0>
100186f2:	9b02      	ldr	r3, [sp, #8]
100186f4:	9301      	str	r3, [sp, #4]
100186f6:	42ab      	cmp	r3, r5
100186f8:	d102      	bne.n	10018700 <setvbuf+0xc8>
100186fa:	2001      	movs	r0, #1
100186fc:	4240      	negs	r0, r0
100186fe:	e006      	b.n	1001870e <setvbuf+0xd6>
10018700:	9801      	ldr	r0, [sp, #4]
10018702:	f7ff fdcb 	bl	1001829c <malloc>
10018706:	1e07      	subs	r7, r0, #0
10018708:	d10e      	bne.n	10018728 <setvbuf+0xf0>
1001870a:	e7f6      	b.n	100186fa <setvbuf+0xc2>
1001870c:	2000      	movs	r0, #0
1001870e:	2202      	movs	r2, #2
10018710:	89a3      	ldrh	r3, [r4, #12]
10018712:	4313      	orrs	r3, r2
10018714:	81a3      	strh	r3, [r4, #12]
10018716:	2300      	movs	r3, #0
10018718:	60a3      	str	r3, [r4, #8]
1001871a:	0023      	movs	r3, r4
1001871c:	3347      	adds	r3, #71	; 0x47
1001871e:	6023      	str	r3, [r4, #0]
10018720:	6123      	str	r3, [r4, #16]
10018722:	2301      	movs	r3, #1
10018724:	6163      	str	r3, [r4, #20]
10018726:	e02a      	b.n	1001877e <setvbuf+0x146>
10018728:	2280      	movs	r2, #128	; 0x80
1001872a:	89a3      	ldrh	r3, [r4, #12]
1001872c:	9d01      	ldr	r5, [sp, #4]
1001872e:	4313      	orrs	r3, r2
10018730:	81a3      	strh	r3, [r4, #12]
10018732:	69b3      	ldr	r3, [r6, #24]
10018734:	2b00      	cmp	r3, #0
10018736:	d102      	bne.n	1001873e <setvbuf+0x106>
10018738:	0030      	movs	r0, r6
1001873a:	f000 f9ef 	bl	10018b1c <__sinit>
1001873e:	9b00      	ldr	r3, [sp, #0]
10018740:	2b01      	cmp	r3, #1
10018742:	d103      	bne.n	1001874c <setvbuf+0x114>
10018744:	89a3      	ldrh	r3, [r4, #12]
10018746:	9a00      	ldr	r2, [sp, #0]
10018748:	431a      	orrs	r2, r3
1001874a:	81a2      	strh	r2, [r4, #12]
1001874c:	2308      	movs	r3, #8
1001874e:	89a2      	ldrh	r2, [r4, #12]
10018750:	6027      	str	r7, [r4, #0]
10018752:	4013      	ands	r3, r2
10018754:	6127      	str	r7, [r4, #16]
10018756:	6165      	str	r5, [r4, #20]
10018758:	1e18      	subs	r0, r3, #0
1001875a:	d00c      	beq.n	10018776 <setvbuf+0x13e>
1001875c:	2301      	movs	r3, #1
1001875e:	401a      	ands	r2, r3
10018760:	2300      	movs	r3, #0
10018762:	1e10      	subs	r0, r2, #0
10018764:	4298      	cmp	r0, r3
10018766:	d004      	beq.n	10018772 <setvbuf+0x13a>
10018768:	426d      	negs	r5, r5
1001876a:	60a3      	str	r3, [r4, #8]
1001876c:	61a5      	str	r5, [r4, #24]
1001876e:	0018      	movs	r0, r3
10018770:	e005      	b.n	1001877e <setvbuf+0x146>
10018772:	60a5      	str	r5, [r4, #8]
10018774:	e003      	b.n	1001877e <setvbuf+0x146>
10018776:	60a3      	str	r3, [r4, #8]
10018778:	e001      	b.n	1001877e <setvbuf+0x146>
1001877a:	2001      	movs	r0, #1
1001877c:	4240      	negs	r0, r0
1001877e:	b005      	add	sp, #20
10018780:	bdf0      	pop	{r4, r5, r6, r7, pc}
10018782:	46c0      	nop			; (mov r8, r8)
10018784:	1001b68c 	.word	0x1001b68c
10018788:	1001b514 	.word	0x1001b514
1001878c:	1001b534 	.word	0x1001b534
10018790:	1001b554 	.word	0x1001b554
10018794:	fffff35c 	.word	0xfffff35c

10018798 <__swbuf_r>:
10018798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001879a:	0005      	movs	r5, r0
1001879c:	000f      	movs	r7, r1
1001879e:	0014      	movs	r4, r2
100187a0:	2800      	cmp	r0, #0
100187a2:	d004      	beq.n	100187ae <__swbuf_r+0x16>
100187a4:	6983      	ldr	r3, [r0, #24]
100187a6:	2b00      	cmp	r3, #0
100187a8:	d101      	bne.n	100187ae <__swbuf_r+0x16>
100187aa:	f000 f9b7 	bl	10018b1c <__sinit>
100187ae:	4b23      	ldr	r3, [pc, #140]	; (1001883c <__swbuf_r+0xa4>)
100187b0:	429c      	cmp	r4, r3
100187b2:	d101      	bne.n	100187b8 <__swbuf_r+0x20>
100187b4:	686c      	ldr	r4, [r5, #4]
100187b6:	e008      	b.n	100187ca <__swbuf_r+0x32>
100187b8:	4b21      	ldr	r3, [pc, #132]	; (10018840 <__swbuf_r+0xa8>)
100187ba:	429c      	cmp	r4, r3
100187bc:	d101      	bne.n	100187c2 <__swbuf_r+0x2a>
100187be:	68ac      	ldr	r4, [r5, #8]
100187c0:	e003      	b.n	100187ca <__swbuf_r+0x32>
100187c2:	4b20      	ldr	r3, [pc, #128]	; (10018844 <__swbuf_r+0xac>)
100187c4:	429c      	cmp	r4, r3
100187c6:	d100      	bne.n	100187ca <__swbuf_r+0x32>
100187c8:	68ec      	ldr	r4, [r5, #12]
100187ca:	69a3      	ldr	r3, [r4, #24]
100187cc:	60a3      	str	r3, [r4, #8]
100187ce:	89a3      	ldrh	r3, [r4, #12]
100187d0:	071b      	lsls	r3, r3, #28
100187d2:	d50a      	bpl.n	100187ea <__swbuf_r+0x52>
100187d4:	6923      	ldr	r3, [r4, #16]
100187d6:	2b00      	cmp	r3, #0
100187d8:	d007      	beq.n	100187ea <__swbuf_r+0x52>
100187da:	6823      	ldr	r3, [r4, #0]
100187dc:	6922      	ldr	r2, [r4, #16]
100187de:	b2fe      	uxtb	r6, r7
100187e0:	1a98      	subs	r0, r3, r2
100187e2:	6963      	ldr	r3, [r4, #20]
100187e4:	4298      	cmp	r0, r3
100187e6:	db0f      	blt.n	10018808 <__swbuf_r+0x70>
100187e8:	e008      	b.n	100187fc <__swbuf_r+0x64>
100187ea:	0021      	movs	r1, r4
100187ec:	0028      	movs	r0, r5
100187ee:	f000 f82b 	bl	10018848 <__swsetup_r>
100187f2:	2800      	cmp	r0, #0
100187f4:	d0f1      	beq.n	100187da <__swbuf_r+0x42>
100187f6:	2001      	movs	r0, #1
100187f8:	4240      	negs	r0, r0
100187fa:	e01d      	b.n	10018838 <__swbuf_r+0xa0>
100187fc:	0021      	movs	r1, r4
100187fe:	0028      	movs	r0, r5
10018800:	f000 f91e 	bl	10018a40 <_fflush_r>
10018804:	2800      	cmp	r0, #0
10018806:	d1f6      	bne.n	100187f6 <__swbuf_r+0x5e>
10018808:	68a3      	ldr	r3, [r4, #8]
1001880a:	3001      	adds	r0, #1
1001880c:	3b01      	subs	r3, #1
1001880e:	60a3      	str	r3, [r4, #8]
10018810:	6823      	ldr	r3, [r4, #0]
10018812:	1c5a      	adds	r2, r3, #1
10018814:	6022      	str	r2, [r4, #0]
10018816:	701f      	strb	r7, [r3, #0]
10018818:	6963      	ldr	r3, [r4, #20]
1001881a:	4298      	cmp	r0, r3
1001881c:	d005      	beq.n	1001882a <__swbuf_r+0x92>
1001881e:	89a3      	ldrh	r3, [r4, #12]
10018820:	0030      	movs	r0, r6
10018822:	07db      	lsls	r3, r3, #31
10018824:	d508      	bpl.n	10018838 <__swbuf_r+0xa0>
10018826:	2e0a      	cmp	r6, #10
10018828:	d106      	bne.n	10018838 <__swbuf_r+0xa0>
1001882a:	0021      	movs	r1, r4
1001882c:	0028      	movs	r0, r5
1001882e:	f000 f907 	bl	10018a40 <_fflush_r>
10018832:	2800      	cmp	r0, #0
10018834:	d1df      	bne.n	100187f6 <__swbuf_r+0x5e>
10018836:	0030      	movs	r0, r6
10018838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001883a:	46c0      	nop			; (mov r8, r8)
1001883c:	1001b514 	.word	0x1001b514
10018840:	1001b534 	.word	0x1001b534
10018844:	1001b554 	.word	0x1001b554

10018848 <__swsetup_r>:
10018848:	4b36      	ldr	r3, [pc, #216]	; (10018924 <__swsetup_r+0xdc>)
1001884a:	b570      	push	{r4, r5, r6, lr}
1001884c:	681d      	ldr	r5, [r3, #0]
1001884e:	0006      	movs	r6, r0
10018850:	000c      	movs	r4, r1
10018852:	2d00      	cmp	r5, #0
10018854:	d005      	beq.n	10018862 <__swsetup_r+0x1a>
10018856:	69ab      	ldr	r3, [r5, #24]
10018858:	2b00      	cmp	r3, #0
1001885a:	d102      	bne.n	10018862 <__swsetup_r+0x1a>
1001885c:	0028      	movs	r0, r5
1001885e:	f000 f95d 	bl	10018b1c <__sinit>
10018862:	4b31      	ldr	r3, [pc, #196]	; (10018928 <__swsetup_r+0xe0>)
10018864:	429c      	cmp	r4, r3
10018866:	d101      	bne.n	1001886c <__swsetup_r+0x24>
10018868:	686c      	ldr	r4, [r5, #4]
1001886a:	e008      	b.n	1001887e <__swsetup_r+0x36>
1001886c:	4b2f      	ldr	r3, [pc, #188]	; (1001892c <__swsetup_r+0xe4>)
1001886e:	429c      	cmp	r4, r3
10018870:	d101      	bne.n	10018876 <__swsetup_r+0x2e>
10018872:	68ac      	ldr	r4, [r5, #8]
10018874:	e003      	b.n	1001887e <__swsetup_r+0x36>
10018876:	4b2e      	ldr	r3, [pc, #184]	; (10018930 <__swsetup_r+0xe8>)
10018878:	429c      	cmp	r4, r3
1001887a:	d100      	bne.n	1001887e <__swsetup_r+0x36>
1001887c:	68ec      	ldr	r4, [r5, #12]
1001887e:	220c      	movs	r2, #12
10018880:	5ea3      	ldrsh	r3, [r4, r2]
10018882:	b29a      	uxth	r2, r3
10018884:	0711      	lsls	r1, r2, #28
10018886:	d423      	bmi.n	100188d0 <__swsetup_r+0x88>
10018888:	06d1      	lsls	r1, r2, #27
1001888a:	d407      	bmi.n	1001889c <__swsetup_r+0x54>
1001888c:	2209      	movs	r2, #9
1001888e:	2001      	movs	r0, #1
10018890:	6032      	str	r2, [r6, #0]
10018892:	3237      	adds	r2, #55	; 0x37
10018894:	4313      	orrs	r3, r2
10018896:	81a3      	strh	r3, [r4, #12]
10018898:	4240      	negs	r0, r0
1001889a:	e042      	b.n	10018922 <__swsetup_r+0xda>
1001889c:	0753      	lsls	r3, r2, #29
1001889e:	d513      	bpl.n	100188c8 <__swsetup_r+0x80>
100188a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
100188a2:	2900      	cmp	r1, #0
100188a4:	d008      	beq.n	100188b8 <__swsetup_r+0x70>
100188a6:	0023      	movs	r3, r4
100188a8:	3344      	adds	r3, #68	; 0x44
100188aa:	4299      	cmp	r1, r3
100188ac:	d002      	beq.n	100188b4 <__swsetup_r+0x6c>
100188ae:	0030      	movs	r0, r6
100188b0:	f7ff fd34 	bl	1001831c <_free_r>
100188b4:	2300      	movs	r3, #0
100188b6:	6363      	str	r3, [r4, #52]	; 0x34
100188b8:	2224      	movs	r2, #36	; 0x24
100188ba:	89a3      	ldrh	r3, [r4, #12]
100188bc:	4393      	bics	r3, r2
100188be:	81a3      	strh	r3, [r4, #12]
100188c0:	2300      	movs	r3, #0
100188c2:	6063      	str	r3, [r4, #4]
100188c4:	6923      	ldr	r3, [r4, #16]
100188c6:	6023      	str	r3, [r4, #0]
100188c8:	2208      	movs	r2, #8
100188ca:	89a3      	ldrh	r3, [r4, #12]
100188cc:	4313      	orrs	r3, r2
100188ce:	81a3      	strh	r3, [r4, #12]
100188d0:	6923      	ldr	r3, [r4, #16]
100188d2:	2b00      	cmp	r3, #0
100188d4:	d10b      	bne.n	100188ee <__swsetup_r+0xa6>
100188d6:	23a0      	movs	r3, #160	; 0xa0
100188d8:	89a2      	ldrh	r2, [r4, #12]
100188da:	009b      	lsls	r3, r3, #2
100188dc:	4013      	ands	r3, r2
100188de:	2280      	movs	r2, #128	; 0x80
100188e0:	0092      	lsls	r2, r2, #2
100188e2:	4293      	cmp	r3, r2
100188e4:	d003      	beq.n	100188ee <__swsetup_r+0xa6>
100188e6:	0021      	movs	r1, r4
100188e8:	0030      	movs	r0, r6
100188ea:	f000 f9d1 	bl	10018c90 <__smakebuf_r>
100188ee:	2301      	movs	r3, #1
100188f0:	89a2      	ldrh	r2, [r4, #12]
100188f2:	4013      	ands	r3, r2
100188f4:	d005      	beq.n	10018902 <__swsetup_r+0xba>
100188f6:	2300      	movs	r3, #0
100188f8:	60a3      	str	r3, [r4, #8]
100188fa:	6963      	ldr	r3, [r4, #20]
100188fc:	425b      	negs	r3, r3
100188fe:	61a3      	str	r3, [r4, #24]
10018900:	e003      	b.n	1001890a <__swsetup_r+0xc2>
10018902:	0792      	lsls	r2, r2, #30
10018904:	d400      	bmi.n	10018908 <__swsetup_r+0xc0>
10018906:	6963      	ldr	r3, [r4, #20]
10018908:	60a3      	str	r3, [r4, #8]
1001890a:	2000      	movs	r0, #0
1001890c:	6923      	ldr	r3, [r4, #16]
1001890e:	4283      	cmp	r3, r0
10018910:	d107      	bne.n	10018922 <__swsetup_r+0xda>
10018912:	220c      	movs	r2, #12
10018914:	5ea3      	ldrsh	r3, [r4, r2]
10018916:	061a      	lsls	r2, r3, #24
10018918:	d503      	bpl.n	10018922 <__swsetup_r+0xda>
1001891a:	2240      	movs	r2, #64	; 0x40
1001891c:	4313      	orrs	r3, r2
1001891e:	81a3      	strh	r3, [r4, #12]
10018920:	3801      	subs	r0, #1
10018922:	bd70      	pop	{r4, r5, r6, pc}
10018924:	1001b68c 	.word	0x1001b68c
10018928:	1001b514 	.word	0x1001b514
1001892c:	1001b534 	.word	0x1001b534
10018930:	1001b554 	.word	0x1001b554

10018934 <__sflush_r>:
10018934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10018936:	898a      	ldrh	r2, [r1, #12]
10018938:	0005      	movs	r5, r0
1001893a:	000c      	movs	r4, r1
1001893c:	0713      	lsls	r3, r2, #28
1001893e:	d45a      	bmi.n	100189f6 <__sflush_r+0xc2>
10018940:	684b      	ldr	r3, [r1, #4]
10018942:	2b00      	cmp	r3, #0
10018944:	dc02      	bgt.n	1001894c <__sflush_r+0x18>
10018946:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10018948:	2b00      	cmp	r3, #0
1001894a:	dd19      	ble.n	10018980 <__sflush_r+0x4c>
1001894c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1001894e:	2f00      	cmp	r7, #0
10018950:	d016      	beq.n	10018980 <__sflush_r+0x4c>
10018952:	2300      	movs	r3, #0
10018954:	682e      	ldr	r6, [r5, #0]
10018956:	602b      	str	r3, [r5, #0]
10018958:	2380      	movs	r3, #128	; 0x80
1001895a:	015b      	lsls	r3, r3, #5
1001895c:	401a      	ands	r2, r3
1001895e:	d001      	beq.n	10018964 <__sflush_r+0x30>
10018960:	6d60      	ldr	r0, [r4, #84]	; 0x54
10018962:	e014      	b.n	1001898e <__sflush_r+0x5a>
10018964:	2301      	movs	r3, #1
10018966:	6a21      	ldr	r1, [r4, #32]
10018968:	0028      	movs	r0, r5
1001896a:	47b8      	blx	r7
1001896c:	1c43      	adds	r3, r0, #1
1001896e:	d10e      	bne.n	1001898e <__sflush_r+0x5a>
10018970:	682b      	ldr	r3, [r5, #0]
10018972:	2b00      	cmp	r3, #0
10018974:	d00b      	beq.n	1001898e <__sflush_r+0x5a>
10018976:	2b1d      	cmp	r3, #29
10018978:	d001      	beq.n	1001897e <__sflush_r+0x4a>
1001897a:	2b16      	cmp	r3, #22
1001897c:	d102      	bne.n	10018984 <__sflush_r+0x50>
1001897e:	602e      	str	r6, [r5, #0]
10018980:	2000      	movs	r0, #0
10018982:	e05a      	b.n	10018a3a <__sflush_r+0x106>
10018984:	2240      	movs	r2, #64	; 0x40
10018986:	89a3      	ldrh	r3, [r4, #12]
10018988:	4313      	orrs	r3, r2
1001898a:	81a3      	strh	r3, [r4, #12]
1001898c:	e055      	b.n	10018a3a <__sflush_r+0x106>
1001898e:	89a3      	ldrh	r3, [r4, #12]
10018990:	075b      	lsls	r3, r3, #29
10018992:	d506      	bpl.n	100189a2 <__sflush_r+0x6e>
10018994:	6863      	ldr	r3, [r4, #4]
10018996:	1ac0      	subs	r0, r0, r3
10018998:	6b63      	ldr	r3, [r4, #52]	; 0x34
1001899a:	2b00      	cmp	r3, #0
1001899c:	d001      	beq.n	100189a2 <__sflush_r+0x6e>
1001899e:	6c23      	ldr	r3, [r4, #64]	; 0x40
100189a0:	1ac0      	subs	r0, r0, r3
100189a2:	2300      	movs	r3, #0
100189a4:	0002      	movs	r2, r0
100189a6:	6a21      	ldr	r1, [r4, #32]
100189a8:	0028      	movs	r0, r5
100189aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
100189ac:	47b8      	blx	r7
100189ae:	89a3      	ldrh	r3, [r4, #12]
100189b0:	1c42      	adds	r2, r0, #1
100189b2:	d106      	bne.n	100189c2 <__sflush_r+0x8e>
100189b4:	6829      	ldr	r1, [r5, #0]
100189b6:	291d      	cmp	r1, #29
100189b8:	d83a      	bhi.n	10018a30 <__sflush_r+0xfc>
100189ba:	4a20      	ldr	r2, [pc, #128]	; (10018a3c <__sflush_r+0x108>)
100189bc:	40ca      	lsrs	r2, r1
100189be:	07d2      	lsls	r2, r2, #31
100189c0:	d536      	bpl.n	10018a30 <__sflush_r+0xfc>
100189c2:	2200      	movs	r2, #0
100189c4:	6062      	str	r2, [r4, #4]
100189c6:	6922      	ldr	r2, [r4, #16]
100189c8:	6022      	str	r2, [r4, #0]
100189ca:	04db      	lsls	r3, r3, #19
100189cc:	d505      	bpl.n	100189da <__sflush_r+0xa6>
100189ce:	1c43      	adds	r3, r0, #1
100189d0:	d102      	bne.n	100189d8 <__sflush_r+0xa4>
100189d2:	682b      	ldr	r3, [r5, #0]
100189d4:	2b00      	cmp	r3, #0
100189d6:	d100      	bne.n	100189da <__sflush_r+0xa6>
100189d8:	6560      	str	r0, [r4, #84]	; 0x54
100189da:	6b61      	ldr	r1, [r4, #52]	; 0x34
100189dc:	602e      	str	r6, [r5, #0]
100189de:	2900      	cmp	r1, #0
100189e0:	d0ce      	beq.n	10018980 <__sflush_r+0x4c>
100189e2:	0023      	movs	r3, r4
100189e4:	3344      	adds	r3, #68	; 0x44
100189e6:	4299      	cmp	r1, r3
100189e8:	d002      	beq.n	100189f0 <__sflush_r+0xbc>
100189ea:	0028      	movs	r0, r5
100189ec:	f7ff fc96 	bl	1001831c <_free_r>
100189f0:	2000      	movs	r0, #0
100189f2:	6360      	str	r0, [r4, #52]	; 0x34
100189f4:	e021      	b.n	10018a3a <__sflush_r+0x106>
100189f6:	690f      	ldr	r7, [r1, #16]
100189f8:	2f00      	cmp	r7, #0
100189fa:	d0c1      	beq.n	10018980 <__sflush_r+0x4c>
100189fc:	680b      	ldr	r3, [r1, #0]
100189fe:	600f      	str	r7, [r1, #0]
10018a00:	1bdb      	subs	r3, r3, r7
10018a02:	9301      	str	r3, [sp, #4]
10018a04:	2300      	movs	r3, #0
10018a06:	0792      	lsls	r2, r2, #30
10018a08:	d100      	bne.n	10018a0c <__sflush_r+0xd8>
10018a0a:	694b      	ldr	r3, [r1, #20]
10018a0c:	60a3      	str	r3, [r4, #8]
10018a0e:	e003      	b.n	10018a18 <__sflush_r+0xe4>
10018a10:	9b01      	ldr	r3, [sp, #4]
10018a12:	183f      	adds	r7, r7, r0
10018a14:	1a1b      	subs	r3, r3, r0
10018a16:	9301      	str	r3, [sp, #4]
10018a18:	9b01      	ldr	r3, [sp, #4]
10018a1a:	2b00      	cmp	r3, #0
10018a1c:	ddb0      	ble.n	10018980 <__sflush_r+0x4c>
10018a1e:	9b01      	ldr	r3, [sp, #4]
10018a20:	003a      	movs	r2, r7
10018a22:	6a21      	ldr	r1, [r4, #32]
10018a24:	0028      	movs	r0, r5
10018a26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10018a28:	47b0      	blx	r6
10018a2a:	2800      	cmp	r0, #0
10018a2c:	dcf0      	bgt.n	10018a10 <__sflush_r+0xdc>
10018a2e:	89a3      	ldrh	r3, [r4, #12]
10018a30:	2240      	movs	r2, #64	; 0x40
10018a32:	2001      	movs	r0, #1
10018a34:	4313      	orrs	r3, r2
10018a36:	81a3      	strh	r3, [r4, #12]
10018a38:	4240      	negs	r0, r0
10018a3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10018a3c:	20400001 	.word	0x20400001

10018a40 <_fflush_r>:
10018a40:	690b      	ldr	r3, [r1, #16]
10018a42:	b570      	push	{r4, r5, r6, lr}
10018a44:	0005      	movs	r5, r0
10018a46:	000c      	movs	r4, r1
10018a48:	2b00      	cmp	r3, #0
10018a4a:	d101      	bne.n	10018a50 <_fflush_r+0x10>
10018a4c:	2000      	movs	r0, #0
10018a4e:	e01c      	b.n	10018a8a <_fflush_r+0x4a>
10018a50:	2800      	cmp	r0, #0
10018a52:	d004      	beq.n	10018a5e <_fflush_r+0x1e>
10018a54:	6983      	ldr	r3, [r0, #24]
10018a56:	2b00      	cmp	r3, #0
10018a58:	d101      	bne.n	10018a5e <_fflush_r+0x1e>
10018a5a:	f000 f85f 	bl	10018b1c <__sinit>
10018a5e:	4b0b      	ldr	r3, [pc, #44]	; (10018a8c <_fflush_r+0x4c>)
10018a60:	429c      	cmp	r4, r3
10018a62:	d101      	bne.n	10018a68 <_fflush_r+0x28>
10018a64:	686c      	ldr	r4, [r5, #4]
10018a66:	e008      	b.n	10018a7a <_fflush_r+0x3a>
10018a68:	4b09      	ldr	r3, [pc, #36]	; (10018a90 <_fflush_r+0x50>)
10018a6a:	429c      	cmp	r4, r3
10018a6c:	d101      	bne.n	10018a72 <_fflush_r+0x32>
10018a6e:	68ac      	ldr	r4, [r5, #8]
10018a70:	e003      	b.n	10018a7a <_fflush_r+0x3a>
10018a72:	4b08      	ldr	r3, [pc, #32]	; (10018a94 <_fflush_r+0x54>)
10018a74:	429c      	cmp	r4, r3
10018a76:	d100      	bne.n	10018a7a <_fflush_r+0x3a>
10018a78:	68ec      	ldr	r4, [r5, #12]
10018a7a:	220c      	movs	r2, #12
10018a7c:	5ea3      	ldrsh	r3, [r4, r2]
10018a7e:	2b00      	cmp	r3, #0
10018a80:	d0e4      	beq.n	10018a4c <_fflush_r+0xc>
10018a82:	0021      	movs	r1, r4
10018a84:	0028      	movs	r0, r5
10018a86:	f7ff ff55 	bl	10018934 <__sflush_r>
10018a8a:	bd70      	pop	{r4, r5, r6, pc}
10018a8c:	1001b514 	.word	0x1001b514
10018a90:	1001b534 	.word	0x1001b534
10018a94:	1001b554 	.word	0x1001b554

10018a98 <_cleanup_r>:
10018a98:	b510      	push	{r4, lr}
10018a9a:	4902      	ldr	r1, [pc, #8]	; (10018aa4 <_cleanup_r+0xc>)
10018a9c:	f000 f8b0 	bl	10018c00 <_fwalk_reent>
10018aa0:	bd10      	pop	{r4, pc}
10018aa2:	46c0      	nop			; (mov r8, r8)
10018aa4:	10018a41 	.word	0x10018a41

10018aa8 <std.isra.0>:
10018aa8:	2300      	movs	r3, #0
10018aaa:	b510      	push	{r4, lr}
10018aac:	0004      	movs	r4, r0
10018aae:	6003      	str	r3, [r0, #0]
10018ab0:	6043      	str	r3, [r0, #4]
10018ab2:	6083      	str	r3, [r0, #8]
10018ab4:	8181      	strh	r1, [r0, #12]
10018ab6:	6643      	str	r3, [r0, #100]	; 0x64
10018ab8:	81c2      	strh	r2, [r0, #14]
10018aba:	6103      	str	r3, [r0, #16]
10018abc:	6143      	str	r3, [r0, #20]
10018abe:	6183      	str	r3, [r0, #24]
10018ac0:	0019      	movs	r1, r3
10018ac2:	2208      	movs	r2, #8
10018ac4:	305c      	adds	r0, #92	; 0x5c
10018ac6:	f7ff fc20 	bl	1001830a <memset>
10018aca:	4b05      	ldr	r3, [pc, #20]	; (10018ae0 <std.isra.0+0x38>)
10018acc:	6224      	str	r4, [r4, #32]
10018ace:	6263      	str	r3, [r4, #36]	; 0x24
10018ad0:	4b04      	ldr	r3, [pc, #16]	; (10018ae4 <std.isra.0+0x3c>)
10018ad2:	62a3      	str	r3, [r4, #40]	; 0x28
10018ad4:	4b04      	ldr	r3, [pc, #16]	; (10018ae8 <std.isra.0+0x40>)
10018ad6:	62e3      	str	r3, [r4, #44]	; 0x2c
10018ad8:	4b04      	ldr	r3, [pc, #16]	; (10018aec <std.isra.0+0x44>)
10018ada:	6323      	str	r3, [r4, #48]	; 0x30
10018adc:	bd10      	pop	{r4, pc}
10018ade:	46c0      	nop			; (mov r8, r8)
10018ae0:	10019321 	.word	0x10019321
10018ae4:	10019349 	.word	0x10019349
10018ae8:	10019381 	.word	0x10019381
10018aec:	100193ad 	.word	0x100193ad

10018af0 <__sfmoreglue>:
10018af0:	b570      	push	{r4, r5, r6, lr}
10018af2:	2568      	movs	r5, #104	; 0x68
10018af4:	1e4b      	subs	r3, r1, #1
10018af6:	435d      	muls	r5, r3
10018af8:	000e      	movs	r6, r1
10018afa:	0029      	movs	r1, r5
10018afc:	3174      	adds	r1, #116	; 0x74
10018afe:	f7ff fc53 	bl	100183a8 <_malloc_r>
10018b02:	1e04      	subs	r4, r0, #0
10018b04:	d008      	beq.n	10018b18 <__sfmoreglue+0x28>
10018b06:	2100      	movs	r1, #0
10018b08:	002a      	movs	r2, r5
10018b0a:	6001      	str	r1, [r0, #0]
10018b0c:	6046      	str	r6, [r0, #4]
10018b0e:	300c      	adds	r0, #12
10018b10:	60a0      	str	r0, [r4, #8]
10018b12:	3268      	adds	r2, #104	; 0x68
10018b14:	f7ff fbf9 	bl	1001830a <memset>
10018b18:	0020      	movs	r0, r4
10018b1a:	bd70      	pop	{r4, r5, r6, pc}

10018b1c <__sinit>:
10018b1c:	6983      	ldr	r3, [r0, #24]
10018b1e:	b513      	push	{r0, r1, r4, lr}
10018b20:	0004      	movs	r4, r0
10018b22:	2b00      	cmp	r3, #0
10018b24:	d128      	bne.n	10018b78 <__sinit+0x5c>
10018b26:	6483      	str	r3, [r0, #72]	; 0x48
10018b28:	64c3      	str	r3, [r0, #76]	; 0x4c
10018b2a:	6503      	str	r3, [r0, #80]	; 0x50
10018b2c:	4b13      	ldr	r3, [pc, #76]	; (10018b7c <__sinit+0x60>)
10018b2e:	4a14      	ldr	r2, [pc, #80]	; (10018b80 <__sinit+0x64>)
10018b30:	681b      	ldr	r3, [r3, #0]
10018b32:	6282      	str	r2, [r0, #40]	; 0x28
10018b34:	9301      	str	r3, [sp, #4]
10018b36:	4298      	cmp	r0, r3
10018b38:	d101      	bne.n	10018b3e <__sinit+0x22>
10018b3a:	2301      	movs	r3, #1
10018b3c:	6183      	str	r3, [r0, #24]
10018b3e:	0020      	movs	r0, r4
10018b40:	f000 f820 	bl	10018b84 <__sfp>
10018b44:	6060      	str	r0, [r4, #4]
10018b46:	0020      	movs	r0, r4
10018b48:	f000 f81c 	bl	10018b84 <__sfp>
10018b4c:	60a0      	str	r0, [r4, #8]
10018b4e:	0020      	movs	r0, r4
10018b50:	f000 f818 	bl	10018b84 <__sfp>
10018b54:	2200      	movs	r2, #0
10018b56:	60e0      	str	r0, [r4, #12]
10018b58:	2104      	movs	r1, #4
10018b5a:	6860      	ldr	r0, [r4, #4]
10018b5c:	f7ff ffa4 	bl	10018aa8 <std.isra.0>
10018b60:	2201      	movs	r2, #1
10018b62:	2109      	movs	r1, #9
10018b64:	68a0      	ldr	r0, [r4, #8]
10018b66:	f7ff ff9f 	bl	10018aa8 <std.isra.0>
10018b6a:	2202      	movs	r2, #2
10018b6c:	2112      	movs	r1, #18
10018b6e:	68e0      	ldr	r0, [r4, #12]
10018b70:	f7ff ff9a 	bl	10018aa8 <std.isra.0>
10018b74:	2301      	movs	r3, #1
10018b76:	61a3      	str	r3, [r4, #24]
10018b78:	bd13      	pop	{r0, r1, r4, pc}
10018b7a:	46c0      	nop			; (mov r8, r8)
10018b7c:	1001b510 	.word	0x1001b510
10018b80:	10018a99 	.word	0x10018a99

10018b84 <__sfp>:
10018b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10018b86:	4b1d      	ldr	r3, [pc, #116]	; (10018bfc <__sfp+0x78>)
10018b88:	0006      	movs	r6, r0
10018b8a:	681d      	ldr	r5, [r3, #0]
10018b8c:	69ab      	ldr	r3, [r5, #24]
10018b8e:	2b00      	cmp	r3, #0
10018b90:	d102      	bne.n	10018b98 <__sfp+0x14>
10018b92:	0028      	movs	r0, r5
10018b94:	f7ff ffc2 	bl	10018b1c <__sinit>
10018b98:	3548      	adds	r5, #72	; 0x48
10018b9a:	68ac      	ldr	r4, [r5, #8]
10018b9c:	686b      	ldr	r3, [r5, #4]
10018b9e:	3b01      	subs	r3, #1
10018ba0:	d405      	bmi.n	10018bae <__sfp+0x2a>
10018ba2:	220c      	movs	r2, #12
10018ba4:	5ea7      	ldrsh	r7, [r4, r2]
10018ba6:	2f00      	cmp	r7, #0
10018ba8:	d010      	beq.n	10018bcc <__sfp+0x48>
10018baa:	3468      	adds	r4, #104	; 0x68
10018bac:	e7f7      	b.n	10018b9e <__sfp+0x1a>
10018bae:	682b      	ldr	r3, [r5, #0]
10018bb0:	2b00      	cmp	r3, #0
10018bb2:	d001      	beq.n	10018bb8 <__sfp+0x34>
10018bb4:	682d      	ldr	r5, [r5, #0]
10018bb6:	e7f0      	b.n	10018b9a <__sfp+0x16>
10018bb8:	2104      	movs	r1, #4
10018bba:	0030      	movs	r0, r6
10018bbc:	f7ff ff98 	bl	10018af0 <__sfmoreglue>
10018bc0:	6028      	str	r0, [r5, #0]
10018bc2:	2800      	cmp	r0, #0
10018bc4:	d1f6      	bne.n	10018bb4 <__sfp+0x30>
10018bc6:	230c      	movs	r3, #12
10018bc8:	6033      	str	r3, [r6, #0]
10018bca:	e016      	b.n	10018bfa <__sfp+0x76>
10018bcc:	2301      	movs	r3, #1
10018bce:	0020      	movs	r0, r4
10018bd0:	425b      	negs	r3, r3
10018bd2:	81e3      	strh	r3, [r4, #14]
10018bd4:	3302      	adds	r3, #2
10018bd6:	81a3      	strh	r3, [r4, #12]
10018bd8:	6667      	str	r7, [r4, #100]	; 0x64
10018bda:	6027      	str	r7, [r4, #0]
10018bdc:	60a7      	str	r7, [r4, #8]
10018bde:	6067      	str	r7, [r4, #4]
10018be0:	6127      	str	r7, [r4, #16]
10018be2:	6167      	str	r7, [r4, #20]
10018be4:	61a7      	str	r7, [r4, #24]
10018be6:	305c      	adds	r0, #92	; 0x5c
10018be8:	2208      	movs	r2, #8
10018bea:	0039      	movs	r1, r7
10018bec:	f7ff fb8d 	bl	1001830a <memset>
10018bf0:	0020      	movs	r0, r4
10018bf2:	6367      	str	r7, [r4, #52]	; 0x34
10018bf4:	63a7      	str	r7, [r4, #56]	; 0x38
10018bf6:	64a7      	str	r7, [r4, #72]	; 0x48
10018bf8:	64e7      	str	r7, [r4, #76]	; 0x4c
10018bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10018bfc:	1001b510 	.word	0x1001b510

10018c00 <_fwalk_reent>:
10018c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10018c02:	0004      	movs	r4, r0
10018c04:	0007      	movs	r7, r0
10018c06:	2600      	movs	r6, #0
10018c08:	9101      	str	r1, [sp, #4]
10018c0a:	3448      	adds	r4, #72	; 0x48
10018c0c:	2c00      	cmp	r4, #0
10018c0e:	d016      	beq.n	10018c3e <_fwalk_reent+0x3e>
10018c10:	6863      	ldr	r3, [r4, #4]
10018c12:	68a5      	ldr	r5, [r4, #8]
10018c14:	9300      	str	r3, [sp, #0]
10018c16:	9b00      	ldr	r3, [sp, #0]
10018c18:	3b01      	subs	r3, #1
10018c1a:	9300      	str	r3, [sp, #0]
10018c1c:	d40d      	bmi.n	10018c3a <_fwalk_reent+0x3a>
10018c1e:	89ab      	ldrh	r3, [r5, #12]
10018c20:	2b01      	cmp	r3, #1
10018c22:	d908      	bls.n	10018c36 <_fwalk_reent+0x36>
10018c24:	220e      	movs	r2, #14
10018c26:	5eab      	ldrsh	r3, [r5, r2]
10018c28:	3301      	adds	r3, #1
10018c2a:	d004      	beq.n	10018c36 <_fwalk_reent+0x36>
10018c2c:	0029      	movs	r1, r5
10018c2e:	0038      	movs	r0, r7
10018c30:	9b01      	ldr	r3, [sp, #4]
10018c32:	4798      	blx	r3
10018c34:	4306      	orrs	r6, r0
10018c36:	3568      	adds	r5, #104	; 0x68
10018c38:	e7ed      	b.n	10018c16 <_fwalk_reent+0x16>
10018c3a:	6824      	ldr	r4, [r4, #0]
10018c3c:	e7e6      	b.n	10018c0c <_fwalk_reent+0xc>
10018c3e:	0030      	movs	r0, r6
10018c40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10018c44 <__swhatbuf_r>:
10018c44:	b570      	push	{r4, r5, r6, lr}
10018c46:	000e      	movs	r6, r1
10018c48:	001d      	movs	r5, r3
10018c4a:	230e      	movs	r3, #14
10018c4c:	5ec9      	ldrsh	r1, [r1, r3]
10018c4e:	b090      	sub	sp, #64	; 0x40
10018c50:	0014      	movs	r4, r2
10018c52:	2900      	cmp	r1, #0
10018c54:	da06      	bge.n	10018c64 <__swhatbuf_r+0x20>
10018c56:	2300      	movs	r3, #0
10018c58:	602b      	str	r3, [r5, #0]
10018c5a:	89b3      	ldrh	r3, [r6, #12]
10018c5c:	061b      	lsls	r3, r3, #24
10018c5e:	d50f      	bpl.n	10018c80 <__swhatbuf_r+0x3c>
10018c60:	2340      	movs	r3, #64	; 0x40
10018c62:	e00f      	b.n	10018c84 <__swhatbuf_r+0x40>
10018c64:	aa01      	add	r2, sp, #4
10018c66:	f000 fbcd 	bl	10019404 <_fstat_r>
10018c6a:	2800      	cmp	r0, #0
10018c6c:	dbf3      	blt.n	10018c56 <__swhatbuf_r+0x12>
10018c6e:	23f0      	movs	r3, #240	; 0xf0
10018c70:	9a02      	ldr	r2, [sp, #8]
10018c72:	021b      	lsls	r3, r3, #8
10018c74:	4013      	ands	r3, r2
10018c76:	4a05      	ldr	r2, [pc, #20]	; (10018c8c <__swhatbuf_r+0x48>)
10018c78:	189b      	adds	r3, r3, r2
10018c7a:	425a      	negs	r2, r3
10018c7c:	4153      	adcs	r3, r2
10018c7e:	602b      	str	r3, [r5, #0]
10018c80:	2380      	movs	r3, #128	; 0x80
10018c82:	00db      	lsls	r3, r3, #3
10018c84:	2000      	movs	r0, #0
10018c86:	6023      	str	r3, [r4, #0]
10018c88:	b010      	add	sp, #64	; 0x40
10018c8a:	bd70      	pop	{r4, r5, r6, pc}
10018c8c:	ffffe000 	.word	0xffffe000

10018c90 <__smakebuf_r>:
10018c90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10018c92:	2602      	movs	r6, #2
10018c94:	898b      	ldrh	r3, [r1, #12]
10018c96:	0005      	movs	r5, r0
10018c98:	000c      	movs	r4, r1
10018c9a:	4233      	tst	r3, r6
10018c9c:	d110      	bne.n	10018cc0 <__smakebuf_r+0x30>
10018c9e:	ab01      	add	r3, sp, #4
10018ca0:	466a      	mov	r2, sp
10018ca2:	f7ff ffcf 	bl	10018c44 <__swhatbuf_r>
10018ca6:	9900      	ldr	r1, [sp, #0]
10018ca8:	0007      	movs	r7, r0
10018caa:	0028      	movs	r0, r5
10018cac:	f7ff fb7c 	bl	100183a8 <_malloc_r>
10018cb0:	2800      	cmp	r0, #0
10018cb2:	d10c      	bne.n	10018cce <__smakebuf_r+0x3e>
10018cb4:	220c      	movs	r2, #12
10018cb6:	5ea3      	ldrsh	r3, [r4, r2]
10018cb8:	059a      	lsls	r2, r3, #22
10018cba:	d423      	bmi.n	10018d04 <__smakebuf_r+0x74>
10018cbc:	4333      	orrs	r3, r6
10018cbe:	81a3      	strh	r3, [r4, #12]
10018cc0:	0023      	movs	r3, r4
10018cc2:	3347      	adds	r3, #71	; 0x47
10018cc4:	6023      	str	r3, [r4, #0]
10018cc6:	6123      	str	r3, [r4, #16]
10018cc8:	2301      	movs	r3, #1
10018cca:	6163      	str	r3, [r4, #20]
10018ccc:	e01a      	b.n	10018d04 <__smakebuf_r+0x74>
10018cce:	2280      	movs	r2, #128	; 0x80
10018cd0:	4b0d      	ldr	r3, [pc, #52]	; (10018d08 <__smakebuf_r+0x78>)
10018cd2:	62ab      	str	r3, [r5, #40]	; 0x28
10018cd4:	89a3      	ldrh	r3, [r4, #12]
10018cd6:	6020      	str	r0, [r4, #0]
10018cd8:	4313      	orrs	r3, r2
10018cda:	81a3      	strh	r3, [r4, #12]
10018cdc:	9b00      	ldr	r3, [sp, #0]
10018cde:	6120      	str	r0, [r4, #16]
10018ce0:	6163      	str	r3, [r4, #20]
10018ce2:	9b01      	ldr	r3, [sp, #4]
10018ce4:	2b00      	cmp	r3, #0
10018ce6:	d00a      	beq.n	10018cfe <__smakebuf_r+0x6e>
10018ce8:	230e      	movs	r3, #14
10018cea:	5ee1      	ldrsh	r1, [r4, r3]
10018cec:	0028      	movs	r0, r5
10018cee:	f000 fb9b 	bl	10019428 <_isatty_r>
10018cf2:	2800      	cmp	r0, #0
10018cf4:	d003      	beq.n	10018cfe <__smakebuf_r+0x6e>
10018cf6:	2201      	movs	r2, #1
10018cf8:	89a3      	ldrh	r3, [r4, #12]
10018cfa:	4313      	orrs	r3, r2
10018cfc:	81a3      	strh	r3, [r4, #12]
10018cfe:	89a3      	ldrh	r3, [r4, #12]
10018d00:	431f      	orrs	r7, r3
10018d02:	81a7      	strh	r7, [r4, #12]
10018d04:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10018d06:	46c0      	nop			; (mov r8, r8)
10018d08:	10018a99 	.word	0x10018a99

10018d0c <__sfputc_r>:
10018d0c:	6893      	ldr	r3, [r2, #8]
10018d0e:	b510      	push	{r4, lr}
10018d10:	3b01      	subs	r3, #1
10018d12:	6093      	str	r3, [r2, #8]
10018d14:	2b00      	cmp	r3, #0
10018d16:	da05      	bge.n	10018d24 <__sfputc_r+0x18>
10018d18:	6994      	ldr	r4, [r2, #24]
10018d1a:	42a3      	cmp	r3, r4
10018d1c:	db08      	blt.n	10018d30 <__sfputc_r+0x24>
10018d1e:	b2cb      	uxtb	r3, r1
10018d20:	2b0a      	cmp	r3, #10
10018d22:	d005      	beq.n	10018d30 <__sfputc_r+0x24>
10018d24:	6813      	ldr	r3, [r2, #0]
10018d26:	1c58      	adds	r0, r3, #1
10018d28:	6010      	str	r0, [r2, #0]
10018d2a:	7019      	strb	r1, [r3, #0]
10018d2c:	b2c8      	uxtb	r0, r1
10018d2e:	e001      	b.n	10018d34 <__sfputc_r+0x28>
10018d30:	f7ff fd32 	bl	10018798 <__swbuf_r>
10018d34:	bd10      	pop	{r4, pc}

10018d36 <__sfputs_r>:
10018d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10018d38:	0006      	movs	r6, r0
10018d3a:	000f      	movs	r7, r1
10018d3c:	0014      	movs	r4, r2
10018d3e:	18d5      	adds	r5, r2, r3
10018d40:	42ac      	cmp	r4, r5
10018d42:	d008      	beq.n	10018d56 <__sfputs_r+0x20>
10018d44:	7821      	ldrb	r1, [r4, #0]
10018d46:	003a      	movs	r2, r7
10018d48:	0030      	movs	r0, r6
10018d4a:	f7ff ffdf 	bl	10018d0c <__sfputc_r>
10018d4e:	3401      	adds	r4, #1
10018d50:	1c43      	adds	r3, r0, #1
10018d52:	d1f5      	bne.n	10018d40 <__sfputs_r+0xa>
10018d54:	e000      	b.n	10018d58 <__sfputs_r+0x22>
10018d56:	2000      	movs	r0, #0
10018d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10018d5c <_vfiprintf_r>:
10018d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
10018d5e:	b09f      	sub	sp, #124	; 0x7c
10018d60:	0006      	movs	r6, r0
10018d62:	000f      	movs	r7, r1
10018d64:	9202      	str	r2, [sp, #8]
10018d66:	9305      	str	r3, [sp, #20]
10018d68:	2800      	cmp	r0, #0
10018d6a:	d004      	beq.n	10018d76 <_vfiprintf_r+0x1a>
10018d6c:	6983      	ldr	r3, [r0, #24]
10018d6e:	2b00      	cmp	r3, #0
10018d70:	d101      	bne.n	10018d76 <_vfiprintf_r+0x1a>
10018d72:	f7ff fed3 	bl	10018b1c <__sinit>
10018d76:	4b7f      	ldr	r3, [pc, #508]	; (10018f74 <_vfiprintf_r+0x218>)
10018d78:	429f      	cmp	r7, r3
10018d7a:	d101      	bne.n	10018d80 <_vfiprintf_r+0x24>
10018d7c:	6877      	ldr	r7, [r6, #4]
10018d7e:	e008      	b.n	10018d92 <_vfiprintf_r+0x36>
10018d80:	4b7d      	ldr	r3, [pc, #500]	; (10018f78 <_vfiprintf_r+0x21c>)
10018d82:	429f      	cmp	r7, r3
10018d84:	d101      	bne.n	10018d8a <_vfiprintf_r+0x2e>
10018d86:	68b7      	ldr	r7, [r6, #8]
10018d88:	e003      	b.n	10018d92 <_vfiprintf_r+0x36>
10018d8a:	4b7c      	ldr	r3, [pc, #496]	; (10018f7c <_vfiprintf_r+0x220>)
10018d8c:	429f      	cmp	r7, r3
10018d8e:	d100      	bne.n	10018d92 <_vfiprintf_r+0x36>
10018d90:	68f7      	ldr	r7, [r6, #12]
10018d92:	89bb      	ldrh	r3, [r7, #12]
10018d94:	071b      	lsls	r3, r3, #28
10018d96:	d50a      	bpl.n	10018dae <_vfiprintf_r+0x52>
10018d98:	693b      	ldr	r3, [r7, #16]
10018d9a:	2b00      	cmp	r3, #0
10018d9c:	d007      	beq.n	10018dae <_vfiprintf_r+0x52>
10018d9e:	2300      	movs	r3, #0
10018da0:	ad06      	add	r5, sp, #24
10018da2:	616b      	str	r3, [r5, #20]
10018da4:	3320      	adds	r3, #32
10018da6:	766b      	strb	r3, [r5, #25]
10018da8:	3310      	adds	r3, #16
10018daa:	76ab      	strb	r3, [r5, #26]
10018dac:	e03d      	b.n	10018e2a <_vfiprintf_r+0xce>
10018dae:	0039      	movs	r1, r7
10018db0:	0030      	movs	r0, r6
10018db2:	f7ff fd49 	bl	10018848 <__swsetup_r>
10018db6:	2800      	cmp	r0, #0
10018db8:	d0f1      	beq.n	10018d9e <_vfiprintf_r+0x42>
10018dba:	2001      	movs	r0, #1
10018dbc:	4240      	negs	r0, r0
10018dbe:	e0d6      	b.n	10018f6e <_vfiprintf_r+0x212>
10018dc0:	9a05      	ldr	r2, [sp, #20]
10018dc2:	1d11      	adds	r1, r2, #4
10018dc4:	6812      	ldr	r2, [r2, #0]
10018dc6:	9105      	str	r1, [sp, #20]
10018dc8:	2a00      	cmp	r2, #0
10018dca:	da00      	bge.n	10018dce <_vfiprintf_r+0x72>
10018dcc:	e07f      	b.n	10018ece <_vfiprintf_r+0x172>
10018dce:	9209      	str	r2, [sp, #36]	; 0x24
10018dd0:	3401      	adds	r4, #1
10018dd2:	7823      	ldrb	r3, [r4, #0]
10018dd4:	2b2e      	cmp	r3, #46	; 0x2e
10018dd6:	d100      	bne.n	10018dda <_vfiprintf_r+0x7e>
10018dd8:	e08d      	b.n	10018ef6 <_vfiprintf_r+0x19a>
10018dda:	7821      	ldrb	r1, [r4, #0]
10018ddc:	2203      	movs	r2, #3
10018dde:	4868      	ldr	r0, [pc, #416]	; (10018f80 <_vfiprintf_r+0x224>)
10018de0:	f000 fb48 	bl	10019474 <memchr>
10018de4:	2800      	cmp	r0, #0
10018de6:	d007      	beq.n	10018df8 <_vfiprintf_r+0x9c>
10018de8:	4b65      	ldr	r3, [pc, #404]	; (10018f80 <_vfiprintf_r+0x224>)
10018dea:	682a      	ldr	r2, [r5, #0]
10018dec:	1ac0      	subs	r0, r0, r3
10018dee:	2340      	movs	r3, #64	; 0x40
10018df0:	4083      	lsls	r3, r0
10018df2:	4313      	orrs	r3, r2
10018df4:	602b      	str	r3, [r5, #0]
10018df6:	3401      	adds	r4, #1
10018df8:	7821      	ldrb	r1, [r4, #0]
10018dfa:	1c63      	adds	r3, r4, #1
10018dfc:	2206      	movs	r2, #6
10018dfe:	4861      	ldr	r0, [pc, #388]	; (10018f84 <_vfiprintf_r+0x228>)
10018e00:	9302      	str	r3, [sp, #8]
10018e02:	7629      	strb	r1, [r5, #24]
10018e04:	f000 fb36 	bl	10019474 <memchr>
10018e08:	2800      	cmp	r0, #0
10018e0a:	d100      	bne.n	10018e0e <_vfiprintf_r+0xb2>
10018e0c:	e09d      	b.n	10018f4a <_vfiprintf_r+0x1ee>
10018e0e:	4b5e      	ldr	r3, [pc, #376]	; (10018f88 <_vfiprintf_r+0x22c>)
10018e10:	2b00      	cmp	r3, #0
10018e12:	d000      	beq.n	10018e16 <_vfiprintf_r+0xba>
10018e14:	e090      	b.n	10018f38 <_vfiprintf_r+0x1dc>
10018e16:	2207      	movs	r2, #7
10018e18:	9b05      	ldr	r3, [sp, #20]
10018e1a:	3307      	adds	r3, #7
10018e1c:	4393      	bics	r3, r2
10018e1e:	3308      	adds	r3, #8
10018e20:	9305      	str	r3, [sp, #20]
10018e22:	696b      	ldr	r3, [r5, #20]
10018e24:	9a03      	ldr	r2, [sp, #12]
10018e26:	189b      	adds	r3, r3, r2
10018e28:	616b      	str	r3, [r5, #20]
10018e2a:	9c02      	ldr	r4, [sp, #8]
10018e2c:	7823      	ldrb	r3, [r4, #0]
10018e2e:	2b00      	cmp	r3, #0
10018e30:	d104      	bne.n	10018e3c <_vfiprintf_r+0xe0>
10018e32:	9b02      	ldr	r3, [sp, #8]
10018e34:	1ae3      	subs	r3, r4, r3
10018e36:	9304      	str	r3, [sp, #16]
10018e38:	d012      	beq.n	10018e60 <_vfiprintf_r+0x104>
10018e3a:	e003      	b.n	10018e44 <_vfiprintf_r+0xe8>
10018e3c:	2b25      	cmp	r3, #37	; 0x25
10018e3e:	d0f8      	beq.n	10018e32 <_vfiprintf_r+0xd6>
10018e40:	3401      	adds	r4, #1
10018e42:	e7f3      	b.n	10018e2c <_vfiprintf_r+0xd0>
10018e44:	9b04      	ldr	r3, [sp, #16]
10018e46:	9a02      	ldr	r2, [sp, #8]
10018e48:	0039      	movs	r1, r7
10018e4a:	0030      	movs	r0, r6
10018e4c:	f7ff ff73 	bl	10018d36 <__sfputs_r>
10018e50:	1c43      	adds	r3, r0, #1
10018e52:	d100      	bne.n	10018e56 <_vfiprintf_r+0xfa>
10018e54:	e086      	b.n	10018f64 <_vfiprintf_r+0x208>
10018e56:	696a      	ldr	r2, [r5, #20]
10018e58:	9b04      	ldr	r3, [sp, #16]
10018e5a:	4694      	mov	ip, r2
10018e5c:	4463      	add	r3, ip
10018e5e:	616b      	str	r3, [r5, #20]
10018e60:	7823      	ldrb	r3, [r4, #0]
10018e62:	2b00      	cmp	r3, #0
10018e64:	d07e      	beq.n	10018f64 <_vfiprintf_r+0x208>
10018e66:	2201      	movs	r2, #1
10018e68:	2300      	movs	r3, #0
10018e6a:	4252      	negs	r2, r2
10018e6c:	606a      	str	r2, [r5, #4]
10018e6e:	a902      	add	r1, sp, #8
10018e70:	3254      	adds	r2, #84	; 0x54
10018e72:	1852      	adds	r2, r2, r1
10018e74:	3401      	adds	r4, #1
10018e76:	602b      	str	r3, [r5, #0]
10018e78:	60eb      	str	r3, [r5, #12]
10018e7a:	60ab      	str	r3, [r5, #8]
10018e7c:	7013      	strb	r3, [r2, #0]
10018e7e:	65ab      	str	r3, [r5, #88]	; 0x58
10018e80:	7821      	ldrb	r1, [r4, #0]
10018e82:	2205      	movs	r2, #5
10018e84:	4841      	ldr	r0, [pc, #260]	; (10018f8c <_vfiprintf_r+0x230>)
10018e86:	f000 faf5 	bl	10019474 <memchr>
10018e8a:	2800      	cmp	r0, #0
10018e8c:	d008      	beq.n	10018ea0 <_vfiprintf_r+0x144>
10018e8e:	4b3f      	ldr	r3, [pc, #252]	; (10018f8c <_vfiprintf_r+0x230>)
10018e90:	682a      	ldr	r2, [r5, #0]
10018e92:	1ac0      	subs	r0, r0, r3
10018e94:	2301      	movs	r3, #1
10018e96:	4083      	lsls	r3, r0
10018e98:	4313      	orrs	r3, r2
10018e9a:	602b      	str	r3, [r5, #0]
10018e9c:	3401      	adds	r4, #1
10018e9e:	e7ef      	b.n	10018e80 <_vfiprintf_r+0x124>
10018ea0:	682b      	ldr	r3, [r5, #0]
10018ea2:	06da      	lsls	r2, r3, #27
10018ea4:	d504      	bpl.n	10018eb0 <_vfiprintf_r+0x154>
10018ea6:	2253      	movs	r2, #83	; 0x53
10018ea8:	2120      	movs	r1, #32
10018eaa:	a802      	add	r0, sp, #8
10018eac:	1812      	adds	r2, r2, r0
10018eae:	7011      	strb	r1, [r2, #0]
10018eb0:	071a      	lsls	r2, r3, #28
10018eb2:	d504      	bpl.n	10018ebe <_vfiprintf_r+0x162>
10018eb4:	2253      	movs	r2, #83	; 0x53
10018eb6:	212b      	movs	r1, #43	; 0x2b
10018eb8:	a802      	add	r0, sp, #8
10018eba:	1812      	adds	r2, r2, r0
10018ebc:	7011      	strb	r1, [r2, #0]
10018ebe:	7822      	ldrb	r2, [r4, #0]
10018ec0:	2a2a      	cmp	r2, #42	; 0x2a
10018ec2:	d100      	bne.n	10018ec6 <_vfiprintf_r+0x16a>
10018ec4:	e77c      	b.n	10018dc0 <_vfiprintf_r+0x64>
10018ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
10018ec8:	2000      	movs	r0, #0
10018eca:	210a      	movs	r1, #10
10018ecc:	e005      	b.n	10018eda <_vfiprintf_r+0x17e>
10018ece:	4252      	negs	r2, r2
10018ed0:	60ea      	str	r2, [r5, #12]
10018ed2:	2202      	movs	r2, #2
10018ed4:	4313      	orrs	r3, r2
10018ed6:	602b      	str	r3, [r5, #0]
10018ed8:	e77a      	b.n	10018dd0 <_vfiprintf_r+0x74>
10018eda:	7822      	ldrb	r2, [r4, #0]
10018edc:	3a30      	subs	r2, #48	; 0x30
10018ede:	2a09      	cmp	r2, #9
10018ee0:	d804      	bhi.n	10018eec <_vfiprintf_r+0x190>
10018ee2:	434b      	muls	r3, r1
10018ee4:	3401      	adds	r4, #1
10018ee6:	189b      	adds	r3, r3, r2
10018ee8:	2001      	movs	r0, #1
10018eea:	e7f6      	b.n	10018eda <_vfiprintf_r+0x17e>
10018eec:	2800      	cmp	r0, #0
10018eee:	d100      	bne.n	10018ef2 <_vfiprintf_r+0x196>
10018ef0:	e76f      	b.n	10018dd2 <_vfiprintf_r+0x76>
10018ef2:	9309      	str	r3, [sp, #36]	; 0x24
10018ef4:	e76d      	b.n	10018dd2 <_vfiprintf_r+0x76>
10018ef6:	7863      	ldrb	r3, [r4, #1]
10018ef8:	2b2a      	cmp	r3, #42	; 0x2a
10018efa:	d10a      	bne.n	10018f12 <_vfiprintf_r+0x1b6>
10018efc:	9b05      	ldr	r3, [sp, #20]
10018efe:	3402      	adds	r4, #2
10018f00:	1d1a      	adds	r2, r3, #4
10018f02:	681b      	ldr	r3, [r3, #0]
10018f04:	9205      	str	r2, [sp, #20]
10018f06:	2b00      	cmp	r3, #0
10018f08:	da01      	bge.n	10018f0e <_vfiprintf_r+0x1b2>
10018f0a:	2301      	movs	r3, #1
10018f0c:	425b      	negs	r3, r3
10018f0e:	9307      	str	r3, [sp, #28]
10018f10:	e763      	b.n	10018dda <_vfiprintf_r+0x7e>
10018f12:	2300      	movs	r3, #0
10018f14:	200a      	movs	r0, #10
10018f16:	001a      	movs	r2, r3
10018f18:	3401      	adds	r4, #1
10018f1a:	606b      	str	r3, [r5, #4]
10018f1c:	7821      	ldrb	r1, [r4, #0]
10018f1e:	3930      	subs	r1, #48	; 0x30
10018f20:	2909      	cmp	r1, #9
10018f22:	d804      	bhi.n	10018f2e <_vfiprintf_r+0x1d2>
10018f24:	4342      	muls	r2, r0
10018f26:	3401      	adds	r4, #1
10018f28:	1852      	adds	r2, r2, r1
10018f2a:	2301      	movs	r3, #1
10018f2c:	e7f6      	b.n	10018f1c <_vfiprintf_r+0x1c0>
10018f2e:	2b00      	cmp	r3, #0
10018f30:	d100      	bne.n	10018f34 <_vfiprintf_r+0x1d8>
10018f32:	e752      	b.n	10018dda <_vfiprintf_r+0x7e>
10018f34:	9207      	str	r2, [sp, #28]
10018f36:	e750      	b.n	10018dda <_vfiprintf_r+0x7e>
10018f38:	ab05      	add	r3, sp, #20
10018f3a:	9300      	str	r3, [sp, #0]
10018f3c:	003a      	movs	r2, r7
10018f3e:	4b14      	ldr	r3, [pc, #80]	; (10018f90 <_vfiprintf_r+0x234>)
10018f40:	0029      	movs	r1, r5
10018f42:	0030      	movs	r0, r6
10018f44:	e000      	b.n	10018f48 <_vfiprintf_r+0x1ec>
10018f46:	bf00      	nop
10018f48:	e007      	b.n	10018f5a <_vfiprintf_r+0x1fe>
10018f4a:	ab05      	add	r3, sp, #20
10018f4c:	9300      	str	r3, [sp, #0]
10018f4e:	003a      	movs	r2, r7
10018f50:	4b0f      	ldr	r3, [pc, #60]	; (10018f90 <_vfiprintf_r+0x234>)
10018f52:	0029      	movs	r1, r5
10018f54:	0030      	movs	r0, r6
10018f56:	f000 f88b 	bl	10019070 <_printf_i>
10018f5a:	9003      	str	r0, [sp, #12]
10018f5c:	9b03      	ldr	r3, [sp, #12]
10018f5e:	3301      	adds	r3, #1
10018f60:	d000      	beq.n	10018f64 <_vfiprintf_r+0x208>
10018f62:	e75e      	b.n	10018e22 <_vfiprintf_r+0xc6>
10018f64:	89bb      	ldrh	r3, [r7, #12]
10018f66:	065b      	lsls	r3, r3, #25
10018f68:	d500      	bpl.n	10018f6c <_vfiprintf_r+0x210>
10018f6a:	e726      	b.n	10018dba <_vfiprintf_r+0x5e>
10018f6c:	980b      	ldr	r0, [sp, #44]	; 0x2c
10018f6e:	b01f      	add	sp, #124	; 0x7c
10018f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
10018f72:	46c0      	nop			; (mov r8, r8)
10018f74:	1001b514 	.word	0x1001b514
10018f78:	1001b534 	.word	0x1001b534
10018f7c:	1001b554 	.word	0x1001b554
10018f80:	1001b57a 	.word	0x1001b57a
10018f84:	1001b57e 	.word	0x1001b57e
10018f88:	00000000 	.word	0x00000000
10018f8c:	1001b574 	.word	0x1001b574
10018f90:	10018d37 	.word	0x10018d37

10018f94 <_printf_common>:
10018f94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10018f96:	0017      	movs	r7, r2
10018f98:	9301      	str	r3, [sp, #4]
10018f9a:	688a      	ldr	r2, [r1, #8]
10018f9c:	690b      	ldr	r3, [r1, #16]
10018f9e:	9000      	str	r0, [sp, #0]
10018fa0:	000c      	movs	r4, r1
10018fa2:	4293      	cmp	r3, r2
10018fa4:	da00      	bge.n	10018fa8 <_printf_common+0x14>
10018fa6:	0013      	movs	r3, r2
10018fa8:	0022      	movs	r2, r4
10018faa:	603b      	str	r3, [r7, #0]
10018fac:	3243      	adds	r2, #67	; 0x43
10018fae:	7812      	ldrb	r2, [r2, #0]
10018fb0:	2a00      	cmp	r2, #0
10018fb2:	d001      	beq.n	10018fb8 <_printf_common+0x24>
10018fb4:	3301      	adds	r3, #1
10018fb6:	603b      	str	r3, [r7, #0]
10018fb8:	6823      	ldr	r3, [r4, #0]
10018fba:	069b      	lsls	r3, r3, #26
10018fbc:	d502      	bpl.n	10018fc4 <_printf_common+0x30>
10018fbe:	683b      	ldr	r3, [r7, #0]
10018fc0:	3302      	adds	r3, #2
10018fc2:	603b      	str	r3, [r7, #0]
10018fc4:	2506      	movs	r5, #6
10018fc6:	6823      	ldr	r3, [r4, #0]
10018fc8:	401d      	ands	r5, r3
10018fca:	d01e      	beq.n	1001900a <_printf_common+0x76>
10018fcc:	0023      	movs	r3, r4
10018fce:	3343      	adds	r3, #67	; 0x43
10018fd0:	781b      	ldrb	r3, [r3, #0]
10018fd2:	1e5a      	subs	r2, r3, #1
10018fd4:	4193      	sbcs	r3, r2
10018fd6:	6822      	ldr	r2, [r4, #0]
10018fd8:	0692      	lsls	r2, r2, #26
10018fda:	d51c      	bpl.n	10019016 <_printf_common+0x82>
10018fdc:	2030      	movs	r0, #48	; 0x30
10018fde:	18e1      	adds	r1, r4, r3
10018fe0:	3143      	adds	r1, #67	; 0x43
10018fe2:	7008      	strb	r0, [r1, #0]
10018fe4:	0021      	movs	r1, r4
10018fe6:	1c5a      	adds	r2, r3, #1
10018fe8:	3145      	adds	r1, #69	; 0x45
10018fea:	7809      	ldrb	r1, [r1, #0]
10018fec:	18a2      	adds	r2, r4, r2
10018fee:	3243      	adds	r2, #67	; 0x43
10018ff0:	3302      	adds	r3, #2
10018ff2:	7011      	strb	r1, [r2, #0]
10018ff4:	e00f      	b.n	10019016 <_printf_common+0x82>
10018ff6:	0022      	movs	r2, r4
10018ff8:	2301      	movs	r3, #1
10018ffa:	3219      	adds	r2, #25
10018ffc:	9901      	ldr	r1, [sp, #4]
10018ffe:	9800      	ldr	r0, [sp, #0]
10019000:	9e08      	ldr	r6, [sp, #32]
10019002:	47b0      	blx	r6
10019004:	1c43      	adds	r3, r0, #1
10019006:	d00e      	beq.n	10019026 <_printf_common+0x92>
10019008:	3501      	adds	r5, #1
1001900a:	68e3      	ldr	r3, [r4, #12]
1001900c:	683a      	ldr	r2, [r7, #0]
1001900e:	1a9b      	subs	r3, r3, r2
10019010:	429d      	cmp	r5, r3
10019012:	dbf0      	blt.n	10018ff6 <_printf_common+0x62>
10019014:	e7da      	b.n	10018fcc <_printf_common+0x38>
10019016:	0022      	movs	r2, r4
10019018:	9901      	ldr	r1, [sp, #4]
1001901a:	3243      	adds	r2, #67	; 0x43
1001901c:	9800      	ldr	r0, [sp, #0]
1001901e:	9d08      	ldr	r5, [sp, #32]
10019020:	47a8      	blx	r5
10019022:	1c43      	adds	r3, r0, #1
10019024:	d102      	bne.n	1001902c <_printf_common+0x98>
10019026:	2001      	movs	r0, #1
10019028:	4240      	negs	r0, r0
1001902a:	e020      	b.n	1001906e <_printf_common+0xda>
1001902c:	2306      	movs	r3, #6
1001902e:	6820      	ldr	r0, [r4, #0]
10019030:	68e1      	ldr	r1, [r4, #12]
10019032:	683a      	ldr	r2, [r7, #0]
10019034:	4003      	ands	r3, r0
10019036:	2500      	movs	r5, #0
10019038:	2b04      	cmp	r3, #4
1001903a:	d103      	bne.n	10019044 <_printf_common+0xb0>
1001903c:	1a8d      	subs	r5, r1, r2
1001903e:	43eb      	mvns	r3, r5
10019040:	17db      	asrs	r3, r3, #31
10019042:	401d      	ands	r5, r3
10019044:	68a3      	ldr	r3, [r4, #8]
10019046:	6922      	ldr	r2, [r4, #16]
10019048:	4293      	cmp	r3, r2
1001904a:	dd01      	ble.n	10019050 <_printf_common+0xbc>
1001904c:	1a9b      	subs	r3, r3, r2
1001904e:	18ed      	adds	r5, r5, r3
10019050:	2700      	movs	r7, #0
10019052:	42bd      	cmp	r5, r7
10019054:	d00a      	beq.n	1001906c <_printf_common+0xd8>
10019056:	0022      	movs	r2, r4
10019058:	2301      	movs	r3, #1
1001905a:	321a      	adds	r2, #26
1001905c:	9901      	ldr	r1, [sp, #4]
1001905e:	9800      	ldr	r0, [sp, #0]
10019060:	9e08      	ldr	r6, [sp, #32]
10019062:	47b0      	blx	r6
10019064:	1c43      	adds	r3, r0, #1
10019066:	d0de      	beq.n	10019026 <_printf_common+0x92>
10019068:	3701      	adds	r7, #1
1001906a:	e7f2      	b.n	10019052 <_printf_common+0xbe>
1001906c:	2000      	movs	r0, #0
1001906e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10019070 <_printf_i>:
10019070:	b5f0      	push	{r4, r5, r6, r7, lr}
10019072:	b08b      	sub	sp, #44	; 0x2c
10019074:	9206      	str	r2, [sp, #24]
10019076:	000a      	movs	r2, r1
10019078:	3243      	adds	r2, #67	; 0x43
1001907a:	9307      	str	r3, [sp, #28]
1001907c:	9005      	str	r0, [sp, #20]
1001907e:	9204      	str	r2, [sp, #16]
10019080:	7e0a      	ldrb	r2, [r1, #24]
10019082:	000c      	movs	r4, r1
10019084:	9b10      	ldr	r3, [sp, #64]	; 0x40
10019086:	2a6e      	cmp	r2, #110	; 0x6e
10019088:	d100      	bne.n	1001908c <_printf_i+0x1c>
1001908a:	e0ab      	b.n	100191e4 <_printf_i+0x174>
1001908c:	d811      	bhi.n	100190b2 <_printf_i+0x42>
1001908e:	2a63      	cmp	r2, #99	; 0x63
10019090:	d022      	beq.n	100190d8 <_printf_i+0x68>
10019092:	d809      	bhi.n	100190a8 <_printf_i+0x38>
10019094:	2a00      	cmp	r2, #0
10019096:	d100      	bne.n	1001909a <_printf_i+0x2a>
10019098:	e0b5      	b.n	10019206 <_printf_i+0x196>
1001909a:	2a58      	cmp	r2, #88	; 0x58
1001909c:	d000      	beq.n	100190a0 <_printf_i+0x30>
1001909e:	e0c5      	b.n	1001922c <_printf_i+0x1bc>
100190a0:	3145      	adds	r1, #69	; 0x45
100190a2:	700a      	strb	r2, [r1, #0]
100190a4:	4a81      	ldr	r2, [pc, #516]	; (100192ac <_printf_i+0x23c>)
100190a6:	e04f      	b.n	10019148 <_printf_i+0xd8>
100190a8:	2a64      	cmp	r2, #100	; 0x64
100190aa:	d01d      	beq.n	100190e8 <_printf_i+0x78>
100190ac:	2a69      	cmp	r2, #105	; 0x69
100190ae:	d01b      	beq.n	100190e8 <_printf_i+0x78>
100190b0:	e0bc      	b.n	1001922c <_printf_i+0x1bc>
100190b2:	2a73      	cmp	r2, #115	; 0x73
100190b4:	d100      	bne.n	100190b8 <_printf_i+0x48>
100190b6:	e0aa      	b.n	1001920e <_printf_i+0x19e>
100190b8:	d809      	bhi.n	100190ce <_printf_i+0x5e>
100190ba:	2a6f      	cmp	r2, #111	; 0x6f
100190bc:	d029      	beq.n	10019112 <_printf_i+0xa2>
100190be:	2a70      	cmp	r2, #112	; 0x70
100190c0:	d000      	beq.n	100190c4 <_printf_i+0x54>
100190c2:	e0b3      	b.n	1001922c <_printf_i+0x1bc>
100190c4:	2220      	movs	r2, #32
100190c6:	6809      	ldr	r1, [r1, #0]
100190c8:	430a      	orrs	r2, r1
100190ca:	6022      	str	r2, [r4, #0]
100190cc:	e037      	b.n	1001913e <_printf_i+0xce>
100190ce:	2a75      	cmp	r2, #117	; 0x75
100190d0:	d01f      	beq.n	10019112 <_printf_i+0xa2>
100190d2:	2a78      	cmp	r2, #120	; 0x78
100190d4:	d033      	beq.n	1001913e <_printf_i+0xce>
100190d6:	e0a9      	b.n	1001922c <_printf_i+0x1bc>
100190d8:	000e      	movs	r6, r1
100190da:	681a      	ldr	r2, [r3, #0]
100190dc:	3642      	adds	r6, #66	; 0x42
100190de:	1d11      	adds	r1, r2, #4
100190e0:	6019      	str	r1, [r3, #0]
100190e2:	6813      	ldr	r3, [r2, #0]
100190e4:	7033      	strb	r3, [r6, #0]
100190e6:	e0a4      	b.n	10019232 <_printf_i+0x1c2>
100190e8:	6821      	ldr	r1, [r4, #0]
100190ea:	681a      	ldr	r2, [r3, #0]
100190ec:	0608      	lsls	r0, r1, #24
100190ee:	d406      	bmi.n	100190fe <_printf_i+0x8e>
100190f0:	0649      	lsls	r1, r1, #25
100190f2:	d504      	bpl.n	100190fe <_printf_i+0x8e>
100190f4:	1d11      	adds	r1, r2, #4
100190f6:	6019      	str	r1, [r3, #0]
100190f8:	2300      	movs	r3, #0
100190fa:	5ed5      	ldrsh	r5, [r2, r3]
100190fc:	e002      	b.n	10019104 <_printf_i+0x94>
100190fe:	1d11      	adds	r1, r2, #4
10019100:	6019      	str	r1, [r3, #0]
10019102:	6815      	ldr	r5, [r2, #0]
10019104:	2d00      	cmp	r5, #0
10019106:	da3b      	bge.n	10019180 <_printf_i+0x110>
10019108:	232d      	movs	r3, #45	; 0x2d
1001910a:	9a04      	ldr	r2, [sp, #16]
1001910c:	426d      	negs	r5, r5
1001910e:	7013      	strb	r3, [r2, #0]
10019110:	e036      	b.n	10019180 <_printf_i+0x110>
10019112:	6821      	ldr	r1, [r4, #0]
10019114:	681a      	ldr	r2, [r3, #0]
10019116:	0608      	lsls	r0, r1, #24
10019118:	d406      	bmi.n	10019128 <_printf_i+0xb8>
1001911a:	0649      	lsls	r1, r1, #25
1001911c:	d504      	bpl.n	10019128 <_printf_i+0xb8>
1001911e:	6815      	ldr	r5, [r2, #0]
10019120:	1d11      	adds	r1, r2, #4
10019122:	6019      	str	r1, [r3, #0]
10019124:	b2ad      	uxth	r5, r5
10019126:	e002      	b.n	1001912e <_printf_i+0xbe>
10019128:	1d11      	adds	r1, r2, #4
1001912a:	6019      	str	r1, [r3, #0]
1001912c:	6815      	ldr	r5, [r2, #0]
1001912e:	4b5f      	ldr	r3, [pc, #380]	; (100192ac <_printf_i+0x23c>)
10019130:	7e22      	ldrb	r2, [r4, #24]
10019132:	9303      	str	r3, [sp, #12]
10019134:	2708      	movs	r7, #8
10019136:	2a6f      	cmp	r2, #111	; 0x6f
10019138:	d01d      	beq.n	10019176 <_printf_i+0x106>
1001913a:	270a      	movs	r7, #10
1001913c:	e01b      	b.n	10019176 <_printf_i+0x106>
1001913e:	0022      	movs	r2, r4
10019140:	2178      	movs	r1, #120	; 0x78
10019142:	3245      	adds	r2, #69	; 0x45
10019144:	7011      	strb	r1, [r2, #0]
10019146:	4a5a      	ldr	r2, [pc, #360]	; (100192b0 <_printf_i+0x240>)
10019148:	6819      	ldr	r1, [r3, #0]
1001914a:	9203      	str	r2, [sp, #12]
1001914c:	1d08      	adds	r0, r1, #4
1001914e:	6822      	ldr	r2, [r4, #0]
10019150:	6018      	str	r0, [r3, #0]
10019152:	680d      	ldr	r5, [r1, #0]
10019154:	0610      	lsls	r0, r2, #24
10019156:	d402      	bmi.n	1001915e <_printf_i+0xee>
10019158:	0650      	lsls	r0, r2, #25
1001915a:	d500      	bpl.n	1001915e <_printf_i+0xee>
1001915c:	b2ad      	uxth	r5, r5
1001915e:	07d3      	lsls	r3, r2, #31
10019160:	d502      	bpl.n	10019168 <_printf_i+0xf8>
10019162:	2320      	movs	r3, #32
10019164:	431a      	orrs	r2, r3
10019166:	6022      	str	r2, [r4, #0]
10019168:	2710      	movs	r7, #16
1001916a:	2d00      	cmp	r5, #0
1001916c:	d103      	bne.n	10019176 <_printf_i+0x106>
1001916e:	2320      	movs	r3, #32
10019170:	6822      	ldr	r2, [r4, #0]
10019172:	439a      	bics	r2, r3
10019174:	6022      	str	r2, [r4, #0]
10019176:	0023      	movs	r3, r4
10019178:	2200      	movs	r2, #0
1001917a:	3343      	adds	r3, #67	; 0x43
1001917c:	701a      	strb	r2, [r3, #0]
1001917e:	e002      	b.n	10019186 <_printf_i+0x116>
10019180:	270a      	movs	r7, #10
10019182:	4b4a      	ldr	r3, [pc, #296]	; (100192ac <_printf_i+0x23c>)
10019184:	9303      	str	r3, [sp, #12]
10019186:	6863      	ldr	r3, [r4, #4]
10019188:	60a3      	str	r3, [r4, #8]
1001918a:	2b00      	cmp	r3, #0
1001918c:	db09      	blt.n	100191a2 <_printf_i+0x132>
1001918e:	2204      	movs	r2, #4
10019190:	6821      	ldr	r1, [r4, #0]
10019192:	4391      	bics	r1, r2
10019194:	6021      	str	r1, [r4, #0]
10019196:	2d00      	cmp	r5, #0
10019198:	d105      	bne.n	100191a6 <_printf_i+0x136>
1001919a:	9e04      	ldr	r6, [sp, #16]
1001919c:	2b00      	cmp	r3, #0
1001919e:	d011      	beq.n	100191c4 <_printf_i+0x154>
100191a0:	e07b      	b.n	1001929a <_printf_i+0x22a>
100191a2:	2d00      	cmp	r5, #0
100191a4:	d079      	beq.n	1001929a <_printf_i+0x22a>
100191a6:	9e04      	ldr	r6, [sp, #16]
100191a8:	0028      	movs	r0, r5
100191aa:	0039      	movs	r1, r7
100191ac:	f7fb ff88 	bl	100150c0 <__aeabi_uidivmod>
100191b0:	9b03      	ldr	r3, [sp, #12]
100191b2:	3e01      	subs	r6, #1
100191b4:	5c5b      	ldrb	r3, [r3, r1]
100191b6:	0028      	movs	r0, r5
100191b8:	7033      	strb	r3, [r6, #0]
100191ba:	0039      	movs	r1, r7
100191bc:	f7fb fefa 	bl	10014fb4 <__aeabi_uidiv>
100191c0:	1e05      	subs	r5, r0, #0
100191c2:	d1f1      	bne.n	100191a8 <_printf_i+0x138>
100191c4:	2f08      	cmp	r7, #8
100191c6:	d109      	bne.n	100191dc <_printf_i+0x16c>
100191c8:	6823      	ldr	r3, [r4, #0]
100191ca:	07db      	lsls	r3, r3, #31
100191cc:	d506      	bpl.n	100191dc <_printf_i+0x16c>
100191ce:	6863      	ldr	r3, [r4, #4]
100191d0:	6922      	ldr	r2, [r4, #16]
100191d2:	4293      	cmp	r3, r2
100191d4:	dc02      	bgt.n	100191dc <_printf_i+0x16c>
100191d6:	2330      	movs	r3, #48	; 0x30
100191d8:	3e01      	subs	r6, #1
100191da:	7033      	strb	r3, [r6, #0]
100191dc:	9b04      	ldr	r3, [sp, #16]
100191de:	1b9b      	subs	r3, r3, r6
100191e0:	6123      	str	r3, [r4, #16]
100191e2:	e02b      	b.n	1001923c <_printf_i+0x1cc>
100191e4:	6809      	ldr	r1, [r1, #0]
100191e6:	681a      	ldr	r2, [r3, #0]
100191e8:	0608      	lsls	r0, r1, #24
100191ea:	d407      	bmi.n	100191fc <_printf_i+0x18c>
100191ec:	0649      	lsls	r1, r1, #25
100191ee:	d505      	bpl.n	100191fc <_printf_i+0x18c>
100191f0:	1d11      	adds	r1, r2, #4
100191f2:	6019      	str	r1, [r3, #0]
100191f4:	6813      	ldr	r3, [r2, #0]
100191f6:	8aa2      	ldrh	r2, [r4, #20]
100191f8:	801a      	strh	r2, [r3, #0]
100191fa:	e004      	b.n	10019206 <_printf_i+0x196>
100191fc:	1d11      	adds	r1, r2, #4
100191fe:	6019      	str	r1, [r3, #0]
10019200:	6813      	ldr	r3, [r2, #0]
10019202:	6962      	ldr	r2, [r4, #20]
10019204:	601a      	str	r2, [r3, #0]
10019206:	2300      	movs	r3, #0
10019208:	9e04      	ldr	r6, [sp, #16]
1001920a:	6123      	str	r3, [r4, #16]
1001920c:	e016      	b.n	1001923c <_printf_i+0x1cc>
1001920e:	681a      	ldr	r2, [r3, #0]
10019210:	1d11      	adds	r1, r2, #4
10019212:	6019      	str	r1, [r3, #0]
10019214:	6816      	ldr	r6, [r2, #0]
10019216:	2100      	movs	r1, #0
10019218:	6862      	ldr	r2, [r4, #4]
1001921a:	0030      	movs	r0, r6
1001921c:	f000 f92a 	bl	10019474 <memchr>
10019220:	2800      	cmp	r0, #0
10019222:	d001      	beq.n	10019228 <_printf_i+0x1b8>
10019224:	1b80      	subs	r0, r0, r6
10019226:	6060      	str	r0, [r4, #4]
10019228:	6863      	ldr	r3, [r4, #4]
1001922a:	e003      	b.n	10019234 <_printf_i+0x1c4>
1001922c:	0026      	movs	r6, r4
1001922e:	3642      	adds	r6, #66	; 0x42
10019230:	7032      	strb	r2, [r6, #0]
10019232:	2301      	movs	r3, #1
10019234:	6123      	str	r3, [r4, #16]
10019236:	2300      	movs	r3, #0
10019238:	9a04      	ldr	r2, [sp, #16]
1001923a:	7013      	strb	r3, [r2, #0]
1001923c:	9b07      	ldr	r3, [sp, #28]
1001923e:	aa09      	add	r2, sp, #36	; 0x24
10019240:	9300      	str	r3, [sp, #0]
10019242:	0021      	movs	r1, r4
10019244:	9b06      	ldr	r3, [sp, #24]
10019246:	9805      	ldr	r0, [sp, #20]
10019248:	f7ff fea4 	bl	10018f94 <_printf_common>
1001924c:	1c43      	adds	r3, r0, #1
1001924e:	d102      	bne.n	10019256 <_printf_i+0x1e6>
10019250:	2001      	movs	r0, #1
10019252:	4240      	negs	r0, r0
10019254:	e027      	b.n	100192a6 <_printf_i+0x236>
10019256:	6923      	ldr	r3, [r4, #16]
10019258:	0032      	movs	r2, r6
1001925a:	9906      	ldr	r1, [sp, #24]
1001925c:	9805      	ldr	r0, [sp, #20]
1001925e:	9d07      	ldr	r5, [sp, #28]
10019260:	47a8      	blx	r5
10019262:	1c43      	adds	r3, r0, #1
10019264:	d0f4      	beq.n	10019250 <_printf_i+0x1e0>
10019266:	6823      	ldr	r3, [r4, #0]
10019268:	2500      	movs	r5, #0
1001926a:	079b      	lsls	r3, r3, #30
1001926c:	d40f      	bmi.n	1001928e <_printf_i+0x21e>
1001926e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10019270:	68e0      	ldr	r0, [r4, #12]
10019272:	4298      	cmp	r0, r3
10019274:	da17      	bge.n	100192a6 <_printf_i+0x236>
10019276:	0018      	movs	r0, r3
10019278:	e015      	b.n	100192a6 <_printf_i+0x236>
1001927a:	0022      	movs	r2, r4
1001927c:	2301      	movs	r3, #1
1001927e:	3219      	adds	r2, #25
10019280:	9906      	ldr	r1, [sp, #24]
10019282:	9805      	ldr	r0, [sp, #20]
10019284:	9e07      	ldr	r6, [sp, #28]
10019286:	47b0      	blx	r6
10019288:	1c43      	adds	r3, r0, #1
1001928a:	d0e1      	beq.n	10019250 <_printf_i+0x1e0>
1001928c:	3501      	adds	r5, #1
1001928e:	68e3      	ldr	r3, [r4, #12]
10019290:	9a09      	ldr	r2, [sp, #36]	; 0x24
10019292:	1a9b      	subs	r3, r3, r2
10019294:	429d      	cmp	r5, r3
10019296:	dbf0      	blt.n	1001927a <_printf_i+0x20a>
10019298:	e7e9      	b.n	1001926e <_printf_i+0x1fe>
1001929a:	0026      	movs	r6, r4
1001929c:	9b03      	ldr	r3, [sp, #12]
1001929e:	3642      	adds	r6, #66	; 0x42
100192a0:	781b      	ldrb	r3, [r3, #0]
100192a2:	7033      	strb	r3, [r6, #0]
100192a4:	e78e      	b.n	100191c4 <_printf_i+0x154>
100192a6:	b00b      	add	sp, #44	; 0x2c
100192a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100192aa:	46c0      	nop			; (mov r8, r8)
100192ac:	1001b585 	.word	0x1001b585
100192b0:	1001b596 	.word	0x1001b596

100192b4 <_putc_r>:
100192b4:	b570      	push	{r4, r5, r6, lr}
100192b6:	0006      	movs	r6, r0
100192b8:	000d      	movs	r5, r1
100192ba:	0014      	movs	r4, r2
100192bc:	2800      	cmp	r0, #0
100192be:	d004      	beq.n	100192ca <_putc_r+0x16>
100192c0:	6983      	ldr	r3, [r0, #24]
100192c2:	2b00      	cmp	r3, #0
100192c4:	d101      	bne.n	100192ca <_putc_r+0x16>
100192c6:	f7ff fc29 	bl	10018b1c <__sinit>
100192ca:	4b12      	ldr	r3, [pc, #72]	; (10019314 <_putc_r+0x60>)
100192cc:	429c      	cmp	r4, r3
100192ce:	d101      	bne.n	100192d4 <_putc_r+0x20>
100192d0:	6874      	ldr	r4, [r6, #4]
100192d2:	e008      	b.n	100192e6 <_putc_r+0x32>
100192d4:	4b10      	ldr	r3, [pc, #64]	; (10019318 <_putc_r+0x64>)
100192d6:	429c      	cmp	r4, r3
100192d8:	d101      	bne.n	100192de <_putc_r+0x2a>
100192da:	68b4      	ldr	r4, [r6, #8]
100192dc:	e003      	b.n	100192e6 <_putc_r+0x32>
100192de:	4b0f      	ldr	r3, [pc, #60]	; (1001931c <_putc_r+0x68>)
100192e0:	429c      	cmp	r4, r3
100192e2:	d100      	bne.n	100192e6 <_putc_r+0x32>
100192e4:	68f4      	ldr	r4, [r6, #12]
100192e6:	68a3      	ldr	r3, [r4, #8]
100192e8:	3b01      	subs	r3, #1
100192ea:	60a3      	str	r3, [r4, #8]
100192ec:	2b00      	cmp	r3, #0
100192ee:	da05      	bge.n	100192fc <_putc_r+0x48>
100192f0:	69a2      	ldr	r2, [r4, #24]
100192f2:	4293      	cmp	r3, r2
100192f4:	db08      	blt.n	10019308 <_putc_r+0x54>
100192f6:	b2eb      	uxtb	r3, r5
100192f8:	2b0a      	cmp	r3, #10
100192fa:	d005      	beq.n	10019308 <_putc_r+0x54>
100192fc:	6823      	ldr	r3, [r4, #0]
100192fe:	b2e8      	uxtb	r0, r5
10019300:	1c5a      	adds	r2, r3, #1
10019302:	6022      	str	r2, [r4, #0]
10019304:	701d      	strb	r5, [r3, #0]
10019306:	e004      	b.n	10019312 <_putc_r+0x5e>
10019308:	0022      	movs	r2, r4
1001930a:	0029      	movs	r1, r5
1001930c:	0030      	movs	r0, r6
1001930e:	f7ff fa43 	bl	10018798 <__swbuf_r>
10019312:	bd70      	pop	{r4, r5, r6, pc}
10019314:	1001b514 	.word	0x1001b514
10019318:	1001b534 	.word	0x1001b534
1001931c:	1001b554 	.word	0x1001b554

10019320 <__sread>:
10019320:	b570      	push	{r4, r5, r6, lr}
10019322:	000c      	movs	r4, r1
10019324:	250e      	movs	r5, #14
10019326:	5f49      	ldrsh	r1, [r1, r5]
10019328:	f000 f8b0 	bl	1001948c <_read_r>
1001932c:	2800      	cmp	r0, #0
1001932e:	db03      	blt.n	10019338 <__sread+0x18>
10019330:	6d63      	ldr	r3, [r4, #84]	; 0x54
10019332:	181b      	adds	r3, r3, r0
10019334:	6563      	str	r3, [r4, #84]	; 0x54
10019336:	e003      	b.n	10019340 <__sread+0x20>
10019338:	89a2      	ldrh	r2, [r4, #12]
1001933a:	4b02      	ldr	r3, [pc, #8]	; (10019344 <__sread+0x24>)
1001933c:	4013      	ands	r3, r2
1001933e:	81a3      	strh	r3, [r4, #12]
10019340:	bd70      	pop	{r4, r5, r6, pc}
10019342:	46c0      	nop			; (mov r8, r8)
10019344:	ffffefff 	.word	0xffffefff

10019348 <__swrite>:
10019348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001934a:	001f      	movs	r7, r3
1001934c:	898b      	ldrh	r3, [r1, #12]
1001934e:	0005      	movs	r5, r0
10019350:	000c      	movs	r4, r1
10019352:	0016      	movs	r6, r2
10019354:	05db      	lsls	r3, r3, #23
10019356:	d505      	bpl.n	10019364 <__swrite+0x1c>
10019358:	230e      	movs	r3, #14
1001935a:	5ec9      	ldrsh	r1, [r1, r3]
1001935c:	2200      	movs	r2, #0
1001935e:	2302      	movs	r3, #2
10019360:	f000 f874 	bl	1001944c <_lseek_r>
10019364:	89a2      	ldrh	r2, [r4, #12]
10019366:	4b05      	ldr	r3, [pc, #20]	; (1001937c <__swrite+0x34>)
10019368:	0028      	movs	r0, r5
1001936a:	4013      	ands	r3, r2
1001936c:	81a3      	strh	r3, [r4, #12]
1001936e:	0032      	movs	r2, r6
10019370:	230e      	movs	r3, #14
10019372:	5ee1      	ldrsh	r1, [r4, r3]
10019374:	003b      	movs	r3, r7
10019376:	f000 f81f 	bl	100193b8 <_write_r>
1001937a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001937c:	ffffefff 	.word	0xffffefff

10019380 <__sseek>:
10019380:	b570      	push	{r4, r5, r6, lr}
10019382:	000c      	movs	r4, r1
10019384:	250e      	movs	r5, #14
10019386:	5f49      	ldrsh	r1, [r1, r5]
10019388:	f000 f860 	bl	1001944c <_lseek_r>
1001938c:	89a3      	ldrh	r3, [r4, #12]
1001938e:	1c42      	adds	r2, r0, #1
10019390:	d103      	bne.n	1001939a <__sseek+0x1a>
10019392:	4a05      	ldr	r2, [pc, #20]	; (100193a8 <__sseek+0x28>)
10019394:	4013      	ands	r3, r2
10019396:	81a3      	strh	r3, [r4, #12]
10019398:	e004      	b.n	100193a4 <__sseek+0x24>
1001939a:	2280      	movs	r2, #128	; 0x80
1001939c:	0152      	lsls	r2, r2, #5
1001939e:	4313      	orrs	r3, r2
100193a0:	81a3      	strh	r3, [r4, #12]
100193a2:	6560      	str	r0, [r4, #84]	; 0x54
100193a4:	bd70      	pop	{r4, r5, r6, pc}
100193a6:	46c0      	nop			; (mov r8, r8)
100193a8:	ffffefff 	.word	0xffffefff

100193ac <__sclose>:
100193ac:	b510      	push	{r4, lr}
100193ae:	230e      	movs	r3, #14
100193b0:	5ec9      	ldrsh	r1, [r1, r3]
100193b2:	f000 f815 	bl	100193e0 <_close_r>
100193b6:	bd10      	pop	{r4, pc}

100193b8 <_write_r>:
100193b8:	b570      	push	{r4, r5, r6, lr}
100193ba:	0005      	movs	r5, r0
100193bc:	0008      	movs	r0, r1
100193be:	0011      	movs	r1, r2
100193c0:	2200      	movs	r2, #0
100193c2:	4c06      	ldr	r4, [pc, #24]	; (100193dc <_write_r+0x24>)
100193c4:	6022      	str	r2, [r4, #0]
100193c6:	001a      	movs	r2, r3
100193c8:	f7f3 fb00 	bl	1000c9cc <_write>
100193cc:	1c43      	adds	r3, r0, #1
100193ce:	d103      	bne.n	100193d8 <_write_r+0x20>
100193d0:	6823      	ldr	r3, [r4, #0]
100193d2:	2b00      	cmp	r3, #0
100193d4:	d000      	beq.n	100193d8 <_write_r+0x20>
100193d6:	602b      	str	r3, [r5, #0]
100193d8:	bd70      	pop	{r4, r5, r6, pc}
100193da:	46c0      	nop			; (mov r8, r8)
100193dc:	1001eaa0 	.word	0x1001eaa0

100193e0 <_close_r>:
100193e0:	2300      	movs	r3, #0
100193e2:	b570      	push	{r4, r5, r6, lr}
100193e4:	4c06      	ldr	r4, [pc, #24]	; (10019400 <_close_r+0x20>)
100193e6:	0005      	movs	r5, r0
100193e8:	0008      	movs	r0, r1
100193ea:	6023      	str	r3, [r4, #0]
100193ec:	f7f4 fcf0 	bl	1000ddd0 <_close>
100193f0:	1c43      	adds	r3, r0, #1
100193f2:	d103      	bne.n	100193fc <_close_r+0x1c>
100193f4:	6823      	ldr	r3, [r4, #0]
100193f6:	2b00      	cmp	r3, #0
100193f8:	d000      	beq.n	100193fc <_close_r+0x1c>
100193fa:	602b      	str	r3, [r5, #0]
100193fc:	bd70      	pop	{r4, r5, r6, pc}
100193fe:	46c0      	nop			; (mov r8, r8)
10019400:	1001eaa0 	.word	0x1001eaa0

10019404 <_fstat_r>:
10019404:	2300      	movs	r3, #0
10019406:	b570      	push	{r4, r5, r6, lr}
10019408:	4c06      	ldr	r4, [pc, #24]	; (10019424 <_fstat_r+0x20>)
1001940a:	0005      	movs	r5, r0
1001940c:	0008      	movs	r0, r1
1001940e:	0011      	movs	r1, r2
10019410:	6023      	str	r3, [r4, #0]
10019412:	f7f4 fce1 	bl	1000ddd8 <_fstat>
10019416:	1c43      	adds	r3, r0, #1
10019418:	d103      	bne.n	10019422 <_fstat_r+0x1e>
1001941a:	6823      	ldr	r3, [r4, #0]
1001941c:	2b00      	cmp	r3, #0
1001941e:	d000      	beq.n	10019422 <_fstat_r+0x1e>
10019420:	602b      	str	r3, [r5, #0]
10019422:	bd70      	pop	{r4, r5, r6, pc}
10019424:	1001eaa0 	.word	0x1001eaa0

10019428 <_isatty_r>:
10019428:	2300      	movs	r3, #0
1001942a:	b570      	push	{r4, r5, r6, lr}
1001942c:	4c06      	ldr	r4, [pc, #24]	; (10019448 <_isatty_r+0x20>)
1001942e:	0005      	movs	r5, r0
10019430:	0008      	movs	r0, r1
10019432:	6023      	str	r3, [r4, #0]
10019434:	f7f4 fcd6 	bl	1000dde4 <_isatty>
10019438:	1c43      	adds	r3, r0, #1
1001943a:	d103      	bne.n	10019444 <_isatty_r+0x1c>
1001943c:	6823      	ldr	r3, [r4, #0]
1001943e:	2b00      	cmp	r3, #0
10019440:	d000      	beq.n	10019444 <_isatty_r+0x1c>
10019442:	602b      	str	r3, [r5, #0]
10019444:	bd70      	pop	{r4, r5, r6, pc}
10019446:	46c0      	nop			; (mov r8, r8)
10019448:	1001eaa0 	.word	0x1001eaa0

1001944c <_lseek_r>:
1001944c:	b570      	push	{r4, r5, r6, lr}
1001944e:	0005      	movs	r5, r0
10019450:	0008      	movs	r0, r1
10019452:	0011      	movs	r1, r2
10019454:	2200      	movs	r2, #0
10019456:	4c06      	ldr	r4, [pc, #24]	; (10019470 <_lseek_r+0x24>)
10019458:	6022      	str	r2, [r4, #0]
1001945a:	001a      	movs	r2, r3
1001945c:	f7f4 fcc4 	bl	1000dde8 <_lseek>
10019460:	1c43      	adds	r3, r0, #1
10019462:	d103      	bne.n	1001946c <_lseek_r+0x20>
10019464:	6823      	ldr	r3, [r4, #0]
10019466:	2b00      	cmp	r3, #0
10019468:	d000      	beq.n	1001946c <_lseek_r+0x20>
1001946a:	602b      	str	r3, [r5, #0]
1001946c:	bd70      	pop	{r4, r5, r6, pc}
1001946e:	46c0      	nop			; (mov r8, r8)
10019470:	1001eaa0 	.word	0x1001eaa0

10019474 <memchr>:
10019474:	b2c9      	uxtb	r1, r1
10019476:	1882      	adds	r2, r0, r2
10019478:	4290      	cmp	r0, r2
1001947a:	d004      	beq.n	10019486 <memchr+0x12>
1001947c:	7803      	ldrb	r3, [r0, #0]
1001947e:	428b      	cmp	r3, r1
10019480:	d002      	beq.n	10019488 <memchr+0x14>
10019482:	3001      	adds	r0, #1
10019484:	e7f8      	b.n	10019478 <memchr+0x4>
10019486:	2000      	movs	r0, #0
10019488:	4770      	bx	lr
	...

1001948c <_read_r>:
1001948c:	b570      	push	{r4, r5, r6, lr}
1001948e:	0005      	movs	r5, r0
10019490:	0008      	movs	r0, r1
10019492:	0011      	movs	r1, r2
10019494:	2200      	movs	r2, #0
10019496:	4c06      	ldr	r4, [pc, #24]	; (100194b0 <_read_r+0x24>)
10019498:	6022      	str	r2, [r4, #0]
1001949a:	001a      	movs	r2, r3
1001949c:	f7f3 fa76 	bl	1000c98c <_read>
100194a0:	1c43      	adds	r3, r0, #1
100194a2:	d103      	bne.n	100194ac <_read_r+0x20>
100194a4:	6823      	ldr	r3, [r4, #0]
100194a6:	2b00      	cmp	r3, #0
100194a8:	d000      	beq.n	100194ac <_read_r+0x20>
100194aa:	602b      	str	r3, [r5, #0]
100194ac:	bd70      	pop	{r4, r5, r6, pc}
100194ae:	46c0      	nop			; (mov r8, r8)
100194b0:	1001eaa0 	.word	0x1001eaa0

100194b4 <test>:
100194b4:	00000083 00004000 00000200 00c800c8     .....@..........
100194c4:	41a00000 42700000 3f000000 3e666666     ...A..pB...?fff>
100194d4:	3f2ccccd 3f000000 3f000000 0000000a     ..,?...?...?....
100194e4:	72617453 676e6974 61694220 6f4c2073     Starting Bias Lo
100194f4:	5220706f 73646165 00000000 706d6153     op Reads....Samp
10019504:	3a73656c 0a642520 00000000 65636341     les: %d.....Acce
10019514:	666f206c 74657366 74616420 57482061     l offset data HW
10019524:	62205453 253d7469 25203a64 66342e37     ST bit=%d: %7.4f
10019534:	2e372520 25206634 66342e37 00000a0d      %7.4f %7.4f....
10019544:	6f727947 66666f20 20746573 61746164     Gyro offset data
10019554:	53574820 69622054 64253d74 3725203a      HWST bit=%d: %7
10019564:	2066342e 342e3725 37252066 0d66342e     .4f %7.4f %7.4f.
10019574:	0000000a 78352325 2325203a 0a0d7835     ....%#5x: %#5x..
10019584:	00000000 706d6f43 20737361 20746f6e     ....Compass not 
10019594:	6e756f66 00002e64 72617453 676e6974     found...Starting
100195a4:	55504d20 30303536 53574820 000d2154      MPU6500 HWST!..
100195b4:	72746552 69766569 4220676e 65736169     Retrieving Biase
100195c4:	00000d73 72746552 69766569 4220676e     s...Retrieving B
100195d4:	65736169 72452073 20726f72 6f70202d     iases Error - po
100195e4:	62697373 4920656c 65204332 726f7272     ssible I2C error
100195f4:	00000000 72746552 69766569 5320676e     ....Retrieving S
10019604:	69422054 73657361 00000000 72746552     T Biases....Retr
10019614:	69766569 5320676e 69422054 73657361     ieving ST Biases
10019624:	72724520 2d20726f 736f7020 6c626973      Error - possibl
10019634:	32492065 72652043 00726f72 64616552     e I2C error.Read
10019644:	20676e69 2050544f 69676552 72657473     ing OTP Register
10019654:	72724520 002e726f 65636341 544f206c      Error..Accel OT
10019664:	64253a50 6425202c 6425202c 0000000a     P:%d, %d, %d....
10019674:	45434341 52433a4c 52455449 41204149     ACCEL:CRITERIA A
10019684:	00000000 73616942 6968535f 253d7466     ....Bias_Shift=%
10019694:	66342e37 6942202c 525f7361 253d6765     7.4f, Bias_Reg=%
100196a4:	66342e37 6942202c 485f7361 3d545357     7.4f, Bias_HWST=
100196b4:	342e3725 000a0d66 2050544f 756c6176     %7.4f...OTP valu
100196c4:	25203a65 66342e37 00000a0d 69746172     e: %7.4f....rati
100196d4:	37253d6f 2c66342e 72687420 6f687365     o=%7.4f, thresho
100196e4:	253d646c 66342e37 00000a0d 45434341     ld=%7.4f....ACCE
100196f4:	6146204c 41206c69 20736978 6425203d     L Fail Axis = %d
10019704:	0000000a 45434341 52433a4c 52455449     ....ACCEL:CRITER
10019714:	42204149 0000000d 206e694d 203a474d     IA B....Min MG: 
10019724:	342e3725 000a0d66 2078614d 203a474d     %7.4f...Max MG: 
10019734:	342e3725 000a0d66 73616942 6968735f     %7.4f...Bias_shi
10019744:	253d7466 66342e37 7473202c 2e37253d     ft=%7.4f, st=%7.
10019754:	202c6634 3d676572 342e3725 00000a66     4f, reg=%7.4f...
10019764:	65636341 4146206c 61204c49 3a736978     Accel FAIL axis:
10019774:	3c206425 3232203d 20676d35 3e20726f     %d <= 225mg or >
10019784:	3736203d 0a676d35 00000000 65636341     = 675mg.....Acce
10019794:	52433a6c 52455449 43204149 6962203a     l:CRITERIA C: bi
100197a4:	6c207361 20737365 6e616874 2e372520     as less than %7.
100197b4:	000a6634 4c494146 203a4445 65636341     4f..FAILED: Acce
100197c4:	7861206c 253a7369 203d2064 20646c25     l axis:%d = %ld 
100197d4:	3035203e 0a676d30 00000000 65636341     > 500mg.....Acce
100197e4:	6553206c 5420666c 20747365 75736552     l Self Test Resu
100197f4:	3a73746c 0a642520 00000000 6f727947     lts: %d.....Gyro
10019804:	50544f20 2c64253a 2c642520 0d642520      OTP:%d, %d, %d.
10019814:	0000000a 4f525947 4952433a 49524554     ....GYRO:CRITERI
10019824:	00412041 6f727947 69614620 7841206c     A A.Gyro Fail Ax
10019834:	3d207369 0a642520 00000000 4f525947     is = %d.....GYRO
10019844:	4952433a 49524554 0d422041 00000000     :CRITERIA B.....
10019854:	2078614d 3a535044 2e372520 0a0d6634     Max DPS: %7.4f..
10019864:	00000000 4f525947 49414620 7861204c     ....GYRO FAIL ax
10019874:	253a7369 72672064 65746165 68742072     is:%d greater th
10019884:	36206e61 73706430 0000000a 6f727947     an 60dps....Gyro
10019894:	4952433a 49524554 3a432041 61696220     :CRITERIA C: bia
100198a4:	656c2073 74207373 206e6168 342e3725     s less than %7.4
100198b4:	00000a66 4c494146 203a4445 6f727947     f...FAILED: Gyro
100198c4:	69786120 64253a73 25203d20 3e20646c      axis:%d = %ld >
100198d4:	64303220 000a7370 6f727947 6c655320      20dps..Gyro Sel
100198e4:	65542066 52207473 6c757365 203a7374     f Test Results: 
100198f4:	000a6425 706d6f43 20737361 666c6553     %d..Compass Self
10019904:	73655420 65522074 746c7573 25203a73      Test Results: %
10019914:	00000a64 74697845 20676e69 54535748     d...Exiting HWST
10019924:	00000000                                ....

10019928 <reg>:
10019928:	0c1a1975 1c1b236a 201f1e1d 3b437472     u...j#..... rtC;
10019938:	3a393841 376c6b69 6d24776f 2625706e     A89:ikl7ow$mnp%&
10019948:	2a292827 67646334 00000049              '()*4cdgI...

10019954 <hw>:
10019954:	04000069 01410080 01000000 00001333     i.....A.....3...
10019964:	8db3aab8 350d98b4 0000005d 006ccd4c     .......5]...L.l.
10019974:	002cc90c 00765636 00664626 c4abf2fe     ..,.6Vv.&Ff.....
10019984:	dfdff1aa dfdfafbb aaaaaab8 c5c388b0     ................
10019994:	000000c7 f3b9b1d8 b691a38b 00d9b409     ................
100199a4:	f3b9b1da b691a38b 00dab4da              ............

100199b0 <dmp_memory>:
100199b0:	00700000 24000000 02000000 00000300     ..p....$........
100199c0:	54006500 0000efff 0b0080fa 01008212     .e.T............
100199d0:	c3300c03 e98c8c0e 0240d514 8e0f7113     ..0.......@..q..
100199e0:	83f88338 83f80030 83f88e25 83f80030     8...0...%...0...
100199f0:	ffffffff d6a9fe0f 00040024 a179821a     ........$.....y.
10019a00:	3c000000 0000ffff 00001000 a26f8338     ...<........8.o.
10019a10:	30033e00 00000040 09e3ca02 0000803e     .>.0@.......>...
10019a20:	00000020 00000000 00000040 00000060      .......@...`...
10019a30:	00000c00 6e180c00 92060000 dfc0160a     .......n........
10019a40:	5602ffff 77d38cfd 96c4e1ff aabec5e0     ...V...w........
10019a50:	00000000 2b0bffff 57160000 59030000     .......+...W...Y
10019a60:	00000040 fa1d0000 1d6c0200 00000000     @.........l.....
10019a70:	ebdfff3f b6b33e00 78220d00 3c2f0000     ?....>...."x../<
10019a80:	00000000 b5421900 a2390000 65b30000     ......B...9....e
10019a90:	c99f0ed9 344ccf1d 00000030 00000050     ......L40...P...
10019aa0:	e87ab63b 00006400 0000c800 00000000     ;.z..d..........
10019ab0:	00000010 92fa0010 5e220010 9f220d00     .........."^..".
10019ac0:	00000100 00003200 000046ff 0000d463     .....2...F..c...
10019ad0:	00000010 0000d604 0000cc04 0000cc04     ................
10019ae0:	72100000 40000000 00000000 00000000     ...r...@........
10019af0:	02000600 07000500 00000000 00006400     .............d..
10019b00:	00000000 05000000 64000500 00002000     ...........d. ..
	...
10019b18:	00400000 00030000 32000000 000098f8     ..@........2....
10019b28:	000065ff 00000f83 00fc9bff 00000000     .e..............
	...
10019b5c:	00100000 00000040 06000000 6ab20000     ....@..........j
10019b6c:	00000200 83fb0100 00006800 00fcd900     .........h......
10019b7c:	83fff17c 00000000 00006500 e8036400     |........e...d..
10019b8c:	28006400 25000000 00000000 0000a016     .d.(...%........
10019b9c:	00100000 00100000 00002f00 f4010000     ........./......
10019bac:	00100000 00002800 8145ffff 72faffff     .....(....E....r
	...
10019bc4:	05004400 c6ba0500 a2784700 01000000     .D.......Gx.....
10019bd4:	00000000 00060000 14000000 4d250000     ..............%M
10019be4:	6d702f00 ae050000 d0020c00 00000000     ./pm............
	...
10019c00:	00001b00 00000000 00000000 00000000     ................
10019c10:	00006400 00000800 00000000 00000000     .d..............
	...
10019c70:	00001b00 00000000 00000000 0e000e00     ................
10019c80:	c70a0000 00000400 32000000 9cffffff     ...........2....
10019c90:	2b0b0000 02000000 01000000 64000000     ...+...........d
10019ca0:	0000e5ff 00000000 00000000 00000000     ................
10019cb0:	01000000 00000000 00000100 00000000     ................
10019cc0:	00800100 00800100 00800100 d3262400     .............$&.
	...
10019cd8:	10000600 3c009600 00000000 00000000     .......<........
	...
10019cf0:	684e0a0c 0977cfcd 59671650 82ce19c6     ..Nh..w.P.gY....
	...
10019d18:	0084d717 00000003 00000000 00000000     ................
10019d28:	9d8f93c7 191c1b1e 00000000 00000000     ................
	...
10019d48:	85180302 00400000 03000000 03000000     ......@.........
	...
10019d60:	00000040 00000000 00000000 00000000     @...............
	...
10019d94:	7edf7d67 552e9072 88e6f64c 00000000     g}.~r..UL.......
	...
10019db0:	b8b4dcd8 abb9d8b0 b3faf8f3 9e8ebbb7     ................
10019dc0:	f532f1ae b8b4f11b f19780b0 dfdfdfa9     ..2.............
10019dd0:	dfdfdfaa cdc5aaf2 c90ca9c7 a9f1972c     ............,...
10019de0:	66462689 a99989b2 b07d552d 96a88ab0     .&Ff....-U}.....
10019df0:	f1765636 b2b4a3ba a8b8c080 83b21197     6Vv.............
10019e00:	f0a3ba98 10440824 b9b21864 f18398b4     ....$.D.d.......
10019e10:	7d5529a3 a3b1b5ba 00f09383 b2f55028     .)U}........(P..
10019e20:	9383aab6 f17c5428 9382a3b9 daa2ba61     ....(T|.....a...
10019e30:	81dbdfde f5aeb99a f1706860 dfa2bada     ........`hp.....
10019e40:	faa2bad9 9282a3b9 a2ba31db f8a2bad9     .........1......
10019e50:	d0a485df 83adbbc1 b8c7c5c2 dfdfdfa2     ................
10019e60:	dfdfa0ba f1d8d8df 8db3aab8 350d98b4     ...............5
10019e70:	bab6b25d 19968caf 0ea79f8f 9ab41e16     ]...............
10019e80:	2c87aab8 a4ba7c54 91b68ab0 b2765632     ...,T|......2Vv.
10019e90:	c8a49484 b8d8cd08 99f1b0b4 552da882     ..............-U
10019ea0:	0ea8987d 2ca21e16 a4927c54 78502cf0     }......,T|...,Px
10019eb0:	98a884f1 d8fccdc4 fca8db0d bad9f32d     ............-...
10019ec0:	badaf8a6 bad8dea6 9686b6b2 c8f3d0a6     ................
10019ed0:	c8a6da41 b4b0d8f8 92a882b8 88542cf5     A............,T.
10019ee0:	d935f198 f1d818f4 f9f8d0a2 c7d984a8     ..5.............
10019ef0:	83f8f8df 69dfdac5 d8c183df f11401f4     .......i........
10019f00:	a84e82a8 d111f384 92d9f582 f1889728     ..N.........(...
10019f10:	1c1cf409 f3a884d8 d9d1f9c0 29f18297     ...............)
10019f20:	f3d80df4 d9d1f9f9 03c2f482 1adfded8     ................
10019f30:	faa2f1d8 9884a8f9 f8dfc7d9 c783f8f8     ................
10019f40:	df69dfda d8c383f8 f11401f4 2e82a898     ..i.............
10019f50:	11f384a8 d9f582d1 88975092 1cf409f1     .........P......
10019f60:	f3a884d8 d1f9f8c0 f18297d9 d80df449     ............I...
10019f70:	d1f9f9f3 c4f482d9 dfded803 88adf1d8     ................
10019f80:	09a8cc98 9282d9f9 f17cf5a8 94cf3a88     ..........|..:..
10019f90:	db986e4a adda3169 d8f9def2 f2a89587     Jn..i1..........
10019fa0:	a5dad121 d917f4f9 d08eaef1 82aec3c0     !...............
10019fb0:	a8c384c6 a5c89585 f1c0f288 f10e01f4     ................
10019fc0:	c6a89e8e 54f5563e f47288f1 98f11501     ....>V.T..r.....
10019fd0:	f56e8545 88049e8e 5a9842f1 88069e8e     E.n......B.Z....
10019fe0:	1c01f469 111e98f1 04f5d008 02971ef1     i...............
10019ff0:	25369802 85d9f9db dac1f3a5 dff3a585     ..6%............
1001a000:	a89585d8 a5da09f3 9282d8fa f178f5a8     ..............x.
1001a010:	9f841a88 21988826 f31df4da 399f87d8     ....&..!.......9
1001a020:	dfd9afd1 f4f9fbdf fad8f30c f9daf8d0     ................
1001a030:	d9dfd0f9 0bf4d8f9 9f87f3d8 d9afd139     ............9...
1001a040:	1df4dfdf fcfad8f3 f9f969a8 dedad0af     .........i......
1001a050:	8ff8d9fa ccf1a89f 45db98f3 d0dfafd9     ...........E....
1001a060:	8ff1d8f8 f3caa89f afda0988 d8f8cb8f     ................
1001a070:	8d97adf2 dfa5d90c f3a6baf9 f212f4fa     ................
1001a080:	d10d95d8 f3a6bad9 f2a5dafa f3a6bac1     ................
1001a090:	baf1d8df 9686b6b2 f3cad0a6 cba6da49     ............I...
1001a0a0:	b4b0d8f8 84add8b8 f1dfc0f2 a8c3cb8f     ................
1001a0b0:	9686b6b2 c3cbc1c8 88b4b0f3 db21a898     ..............!.
1001a0c0:	719d8d71 d9219585 d8faf2ad 28a89785     q..q..!........(
1001a0d0:	d808f4d9 da298df2 f2d905f4 f2c2a485     ......).........
1001a0e0:	948da8d8 f4d9d101 87d8f211 0af4d821     ............!...
1001a0f0:	9884f2d8 d101c8a8 d811f4d9 bbc8a4f3     ................
1001a100:	def2d0af f8f8f8f8 f8f8f8f8 f6b8f1d8     ................
1001a110:	8ab0b9b5 3cdea395 d8f8d9a3 f8d9a35c     .......<....\...
1001a120:	d9a37cd8 f9f8d8f8 dfd9a5d1 b1d8fada     .|..............
1001a130:	d9f73085 30f8d8de d8dedaad 998cb4f2     .0.....0........
1001a140:	7d552da3 dfdf83a0 a091b5df fbd929f6     .-U}.........)..
1001a150:	29fca0d8 a0d8fad9 f8d951d0 d951fcd8     ...).....Q....Q.
1001a160:	d979d8f9 d0a0d8fb fad979fc f9f9a1d8     ..y......y......
1001a170:	a0f9f9f9 dfdfdfda f8f8a1d8 acf8f8f8     ................
1001a180:	deadf8de 2cac9383 a8f17c54 f6dfdfdf     .......,T|......
1001a190:	a0da2c9d dbfad9df a8d8f82d d0a0da50     .,......-...P...
1001a1a0:	f8d0d9de 55dbf8f8 78a8d8f8 dfd0a0da     .......U...x....
1001a1b0:	f8fad0d9 dbf8f8f8 9cd8f87d 30f58ca8     ........}......0
1001a1c0:	d0d938db d0a0dfde a8d8dfde d958db48     .8..........H.X.
1001a1d0:	a0ded0df d8ded0df 70db68a8 a0dfdfd9     .........h.p....
1001a1e0:	f1d8dfdf 2c9088a8 a8987c54 d1385cd0     .......,T|...\8.
1001a1f0:	8caef2da b0d8f9df c1c1a887 c6a888b1     ................
1001a200:	36daf9f9 daf9a8d8 f9a8d836 a8d836da     ...6....6....6..
1001a210:	d836daf9 36daf9a8 9d8df7d8 da18f8ad     ..6....6........
1001a220:	d8dfaef2 30faadf7 f9dea4d9 deaef2d8     .......0........
1001a230:	a783f9fa c7c5c3d9 a79b88f1 def7ad7a     ............z...
1001a240:	84f8a4df 97a70894 f2ae00f3 88a41998     ................
1001a250:	8894a3c6 f2df32f6 09db9383 dfaaf2d9     .....2..........
1001a260:	f8aed8d8 f3dad1f9 f1a7dea4 d87a9b88     ..............z.
1001a270:	ae9484f3 aadaf919 a8d8dff1 c5c3c081     ................
1001a280:	8392a3c7 dead28f6 a3d8f8d9 f8d9ad50     .....(......P...
1001a290:	ad78a3d8 f8d8f8d9 daa1d1f9 c7c5c3de     ..x.............
1001a2a0:	9481a1d8 b0f218f8 c5c3ac89 b8d8f1c7     ................
1001a2b0:	8697b0b4 069b31a8 97ab0799 f09b8828     .....1......(...
1001a2c0:	4014200c f0b8b4b0 289a8aa8 9bb77850     . .@.......(Px..
1001a2d0:	795129a8 44597024 48643869 abbbf131     .)Qy$pYDi8dH1...
1001a2e0:	542c0088 8bb3f07c 2804a8b8 b0f17850     ..,T|......(Px..
1001a2f0:	2697b488 bb9859a8 028bb3ab b0664626     ...&.Y......&Ff.
1001a300:	9c8af0b8 795129a8 7951298b 5970248a     .....)Qy.)Qy.$pY
1001a310:	7158208b 3869448a 6840398b 3148648a     . Xq.Di8.9@h.dH1
1001a320:	6049308b 00acf188 f07c542c 2804a88c     .0I`....,T|....(
1001a330:	88f17850 59a82697 028cac98 f0664626     Px...&.Y....&Ff.
1001a340:	29a89c89 70247951 38694459 a9314864     ...)Qy$pYDi8dH1.
1001a350:	59200988 3811ab70 19a86940 8c604831     .. Yp..8@i..1H`.
1001a360:	5c413ca8 f1007c20 86199887 7e766ea8     .<A\ |.......nv~
1001a370:	2d8899a9 b1d87d55 dfa3b9b5 d0aedfdf     ...-U}..........
1001a380:	ded0aadf f9f8abf2 c487b0d9 dfdff1aa     ................
1001a390:	dfdfafbb f1b1d8b9 608e97a3 f284b0df     ...........`....
1001a3a0:	d9f9f8c8 8593d8de 83b14af1 83b508a3     .........J......
1001a3b0:	b710089a f1d8109f b0aebab0 b6b2c28a     ................
1001a3c0:	fbf19e8e d81df4d9 f10cd9f9 adf8f8d8     ................
1001a3d0:	fbaed961 f10cf4d8 adf8f8d8 fbaed919     a...............
1001a3e0:	16f4d8df adf8d8f1 f4d9618d 9cf5acf4     .........a......
1001a3f0:	2bdf8d9c faaeb6ba d80bf4f8 f8d0aef1     ...+............
1001a400:	aeda51ad d8f1f8fa a3b6b1b9 b9089c83     .Q..............
1001a410:	b59a83b1 30fdc0aa 109fb783 f2938bb5     .......0........
1001a420:	abd10202 f1d8deda abba80b0 84b2c3c0     ................
1001a430:	b1d8c3c1 a38bf3b9 b409b691 b0deabd9     ................
1001a440:	a3b99c87 8bb3f1dd 8b8b8b8b a3a387b0     ................
1001a450:	8bb2a3a3 a3f29bb6 a3a3a3a3 a3a3a3a3     ................
1001a460:	87b0f1a3 f3a39ab5 dca3a39b b9dfacba     ................
1001a470:	a3a3a3a3 a3a3a3a3 a3a3a3a3 a3a3a3a3     ................
1001a480:	bbd8d8d8 aaf1b7b3 d9ffdaf9 28aa9a80     ...............(
1001a490:	a79880b4 8797b720 f08866a8 90f15179     .... ....f..yQ..
1001a4a0:	a70c872c 93629781 607171f0 29019485     ,.....b..qq`...)
1001a4b0:	a5907951 6c4c28f1 18950c87 83a37885     Qy...(Ll.....x..
1001a4c0:	6c4c2890 f3d86c88 f20082a2 1992a810     .(Ll.l..........
1001a4d0:	d9f2a280 88f1d826 48d94da8 39a896d8     ....&....M.H...9
1001a4e0:	d83cd980 39a88095 d99886a6 a787da2c     ..<....9....,...
1001a4f0:	89a8d82c 80a91995 a8d838d9 80a93989     ,........8...9..
1001a500:	a8d83cda 9039a82e a8d80cd9 d9983195     .<....9......1..
1001a510:	09a8d80c 01d8ffd9 95d8ffda 26daa939     ............9..&
1001a520:	a890d8ff a899890d 21988010 89d82eda     ...........!....
1001a530:	8031a899 a8d82eda 80319686 a8d82eda     ..1.......1.....
1001a540:	da803187 82a8d82e 8041f392 d82ed9f1     .1........A.....
1001a550:	19f382a8 2ed9f180 f3ac82d8 2280a2c0     ..............."
1001a560:	a72ea6f1 9822a92e acda29a8 a2d8ffde     ......"..)......
1001a570:	a9f12af2 a892822e a68031f2 00d9f196     .*.......1......
1001a580:	0c9c8cac d0deac30 8cd8ffde 10d0ac9c     ....0...........
1001a590:	9280deac 824cf2a2 f2caf1a8 8896f135     ......L.....5...
1001a5a0:	d800d9a6 0000fff1 1000bd9e 1000bd9e     ................
1001a5b0:	1000bd9e 1000bd9e 1000bd9e 1000bd9e     ................
1001a5c0:	1000bd9e 1000bd9e 1000bd9e 1000bd9e     ................
1001a5d0:	1000bd9e 1000bd9e 1000bd9e 1000bd9e     ................
1001a5e0:	1000bd9e 1000bd9e 1000bd9e 1000bd9e     ................
1001a5f0:	1000bd9e 1000bdba 1000bdba 1000bdba     ................
1001a600:	1000bdba 1000bdba 1000bdba 1000bdba     ................
1001a610:	1000bdba 1000bdba 1000bdba 1000bddc     ................
1001a620:	1000bddc 1000bddc 1000bddc 1000bddc     ................
1001a630:	1000bddc 1000bddc 1000bddc 1000bddc     ................
1001a640:	1000bddc 1000bdfe 1000bdfe 1000bdfe     ................
1001a650:	1000bdfe 1000bdfe 1000bdfe 1000be0c     ................
1001a660:	1000be0c 1000be0c 1000be0c 1000be0c     ................
1001a670:	1000be0c 1000be0c 1000be0c 1000be0c     ................
1001a680:	1000be1a 1000be1a 1000bd78 1000bd78     ........x...x...
1001a690:	1000bd92 1000bd78 34333231 00003635     ....x...123456..
1001a6a0:	efcdab00 00efcdab b2d60600 f8f005f0     ................
1001a6b0:	00000000                                ....

1001a6b4 <ble_mgr_gatt_server_handle>:
	...
1001a6cc:	1000b7b1 1000b651 1000af2d 00000000     ....Q...-.......
1001a6dc:	69766544 64206563 6f637369 63656e6e     Device disconnec
1001a6ec:	20646574 73616552 303a6e6f 32302578     ted Reason:0x%02
1001a6fc:	61482078 656c646e 2578303d 00000078     x Handle=0x%x...
1001a70c:	72696150 20676e69 6c696166 2e2e6465     Pairing failed..
1001a71c:	7369442e 6e6e6f63 69746365 0000676e     .Disconnecting..
1001a72c:	63736944 656e6e6f 52207463 65757165     Disconnect Reque
1001a73c:	46207473 656c6961 00000064 72696150     st Failed...Pair
1001a74c:	20676e69 636f7270 72756465 6f632065     ing procedure co
1001a75c:	656c706d 20646574 63637573 66737365     mpleted successf
1001a76c:	796c6c75 00000000 20454c42 69766544     ully....BLE Devi
1001a77c:	6e206563 6620746f 646e756f 206f7420     ce not found to 
1001a78c:	726f7473 68742065 61702065 6e697269     store the pairin
1001a79c:	6e692067 00006f66 72636e45 69747079     g info..Encrypti
1001a7ac:	4e206e6f 7320746f 74726174 00006465     on Not started..
1001a7bc:	76616c53 65532065 69727563 52207974     Slave Security R
1001a7cc:	2d207165 74754120 746e6568 74616369     eq - Authenticat
1001a7dc:	206e6f69 6c696146 00006465 72696150     ion Failed..Pair
1001a7ec:	71655220 74736575 41202d20 65687475      Request - Authe
1001a7fc:	6369746e 6f697461 6146206e 64656c69     ntication Failed
1001a80c:	00000000 65746e45 68742072 61502065     ....Enter the Pa
1001a81c:	656b7373 2d362879 69676944 69202974     sskey(6-Digit) i
1001a82c:	6554206e 6e696d72 003a6c61 206e6950     n Terminal:.Pin 
1001a83c:	656d6954 0074756f 63736944 656e6e6f     Timeout.Disconne
1001a84c:	6e697463 2e2e2067 0000002e 61656c50     cting ......Plea
1001a85c:	45206573 7265746e 65687420 6c6f6620     se Enter the fol
1001a86c:	69776f6c 5020676e 2d737361 65646f63     lowing Pass-code
1001a87c:	206e6f28 6568746f 65442072 65636976     (on other Device
1001a88c:	00003a29 72696150 79656b2d 70657220     ):..Pair-key rep
1001a89c:	6620796c 656c6961 00000064 20424f4f     ly failed...OOB 
1001a8ac:	74616546 20657275 20746f4e 70707573     Feature Not supp
1001a8bc:	6574726f 00000064 65746e45 20646572     orted...Entered 
1001a8cc:	73736150 646f632d 00003a65 72696150     Pass-code:..Pair
1001a8dc:	20676e69 6f666e69 74616d72 206e6f69     ing information 
1001a8ec:	7020666f 20726565 69766564 69206563     of peer device i
1001a8fc:	6f6e2073 76612074 616c6961 2e656c62     s not available.
1001a90c:	00000000 61656c50 75206573 6961706e     ....Please unpai
1001a91c:	68742072 65642065 65636976 6f726620     r the device fro
1001a92c:	6570206d 64207265 63697665 6f6d2865     m peer device(mo
1001a93c:	656c6962 65732029 6e697474 6d207367     bile) settings m
1001a94c:	20756e65 20646e61 72617473 61702074     enu and start pa
1001a95c:	6e697269 67612067 006e6961 72636e45     iring again.Encr
1001a96c:	69747079 52206e6f 65757165 52207473     yption Request R
1001a97c:	796c7065 69614620 0064656c 6e616353     eply Failed.Scan
1001a98c:	676e696e 61662020 64656c69 00000000     ning  failed....
1001a99c:	2055544d 6e616843 46206567 656c6961     MTU Change Faile
1001a9ac:	43202c64 656e6e6f 6f697463 6148206e     d, Connection Ha
1001a9bc:	656c646e 2c64253a 65704f20 69746172     ndle:%d, Operati
1001a9cc:	253a6e6f 00000064 72636e45 69747079     on:%d...Encrypti
1001a9dc:	66206e6f 656c6961 00000064 72636e45     on failed...Encr
1001a9ec:	69747079 63206e6f 6c706d6f 64657465     yption completed
1001a9fc:	63757320 73736563 6c6c7566 00000079      successfully...
1001aa0c:	20454c42 69766544 6e206563 6620746f     BLE Device not f
1001aa1c:	646e756f 636e6520 74707972 206e6f69     ound encryption 
1001aa2c:	6f666e69 00000000 6f666e49 78616d3a     info....Info:max
1001aa3c:	6d756d69 2e6f6e20 7320666f 206e6163     imum no.of scan 
1001aa4c:	69766564 72206563 68636165 2e2e6465     device reached..
1001aa5c:	6f74532e 6e697070 63532067 00006e61     .Stopping Scan..
1001aa6c:	6c696146 74206465 7473206f 7320706f     Failed to stop s
1001aa7c:	6e6e6163 00676e69 74696e49 696c6169     canning.Initiali
1001aa8c:	676e697a 4d415320 00313142 424d4153     zing SAMB11.SAMB
1001aa9c:	49203131 6974696e 7a696c61 6f697461     11 Initializatio
1001aaac:	6166206e 64656c69 00000000 61656c50     n failed....Plea
1001aabc:	63206573 6b636568 65687420 776f7020     se check the pow
1001aacc:	61207265 6320646e 656e6e6f 6f697463     er and connectio
1001aadc:	202f206e 64726168 65726177 6e6f6320     n / hardware con
1001aaec:	7463656e 0000726f 454d5441 4c422d4c     nector..ATMEL-BL
1001aafc:	00000045 69766544 6e206563 20656d61     E...Device name 
1001ab0c:	20746573 6c696166 00006465 61204442     set failed..BD a
1001ab1c:	65726464 67207373 66207465 656c6961     ddress get faile
1001ab2c:	00000064 41204442 65726464 303a7373     d...BD Address:0
1001ab3c:	32302578 32302558 32302558 32302558     x%02X%02X%02X%02
1001ab4c:	32302558 32302558 41202c58 65726464     X%02X%02X, Addre
1001ab5c:	54207373 3a657079 00006425 20746553     ss Type:%d..Set 
1001ab6c:	20454c42 69766544 63206563 69666e6f     BLE Device confi
1001ab7c:	61727567 6e6f6974 69616620 0064656c     guration failed.
1001ab8c:	20746553 20454c42 69766544 41206563     Set BLE Device A
1001ab9c:	65726464 66207373 656c6961 00000064     ddress failed...
1001abac:	6e616353 676e696e 502e2e2e 7361656c     Scanning...Pleas
1001abbc:	61772065 2e2e7469 0000002e 76616c53     e wait......Slav
1001abcc:	65732065 69727563 72207974 65757165     e security reque
1001abdc:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
1001abec:	65746365 6f742064 65657020 65642072     ected to peer de
1001abfc:	65636976 74697720 64612068 73657264     vice with addres
1001ac0c:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
1001ac1c:	78323025 78323025 78323025 00000000     %02x%02x%02x....
1001ac2c:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
1001ac3c:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
1001ac4c:	61522067 6d6f646e 64646120 73736572     g Random address
1001ac5c:	69616620 2a64656c 0000002a 2078614d      failed**...Max 
1001ac6c:	626d756e 6f207265 6f632066 63656e6e     number of connec
1001ac7c:	6e6f6974 61657220 64656863 6425203a     tion reached: %d
1001ac8c:	3d3d3d20 7369443e 6e6e6f63 69746365      ===>Disconnecti
1001ac9c:	2e2e676e 0000002e 69766544 43206563     ng......Device C
1001acac:	656e6e6f 6f697463 6146206e 64656c69     onnection Failed
1001acbc:	53202d20 75746174 25203a73 00000064      - Status: %d...
1001accc:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
1001acdc:	61642074 73206174 66207465 656c6961     t data set faile
1001acec:	00000064                                d...

1001acf0 <ble_mgr_gap_handle>:
1001acf0:	1000b7b5 1000b735 1000b629 00000000     ....5...).......
1001ad00:	00000000 1000baad 1000af3d 1000af39     ........=...9...
1001ad10:	1000b0d9 1000afd9 1000b2bd 1000b0f1     ................
1001ad20:	1000b3f9 1000b555 1000b681 1000bcb9     ....U...........
	...
1001ad3c:	00002121 1000d950 1000d944 1000d938     !!..P...D...8...
1001ad4c:	1000d92c 1000d920 1000d914 1000d906     ,... ...........
1001ad5c:	1000d8f8 1000d8ea 1000d8dc 1000d8ce     ................
1001ad6c:	1000d8c0 1000d8b2 1000d8a4 1000d896     ................
1001ad7c:	1000d888 1000d87a 1000d86c 1000d85e     ....z...l...^...
1001ad8c:	1000d850 1000d842 1000d834 1000d826     P...B...4...&...
1001ad9c:	1000d818 1000d80a 1000d7fc 1000d7ee     ................
1001adac:	1000d7e2 1000d7d6 1000d7ca 1000d7be     ................
1001adbc:	1000d7b2 1000d7a6 1000d79a 1000d78e     ................
1001adcc:	1000d780 1000d772 1000d764 1000d756     ....r...d...V...
1001addc:	1000d748 1000d73a 1000d72c 1000d71e     H...:...,.......
1001adec:	1000d710 1000d702 1000d6f4 1000d6e6     ................
1001adfc:	1000d6d8 1000d6ca 1000d6bc 1000d6ae     ................
1001ae0c:	1000d6a2 1000d696 1000d95c 1000dd8e     ........\.......
1001ae1c:	1000dd86 1000dd7e 1000dd66 1000dd50     ....~...f...P...
1001ae2c:	1000dcd2 1000dcba 1000dca2 1000dc8a     ................
1001ae3c:	1000dc72 1000dc5a 1000dc42 1000dc2a     r...Z...B...*...
1001ae4c:	1000dc12 1000dd96 1000dd96 1000dd96     ................
1001ae5c:	1000dd96 1000dd96 1000dd96 1000dd96     ................
1001ae6c:	1000dd96 1000dbfa 1000dbe2 1000dbca     ................
1001ae7c:	1000dbb4 1000db9c 1000dd96 1000dd96     ................
1001ae8c:	1000dd96 1000dd96 1000dd96 1000dd96     ................
1001ae9c:	1000db84 1000db6c 1000db54 1000db3c     ....l...T...<...
1001aeac:	1000dd96 1000db24 1000db0c 1000dd96     ....$...........
1001aebc:	1000dd96 1000daf6 1000dae0 1000daca     ................
1001aecc:	1000dab4 1000dd96 1000dd96 1000dd96     ................
1001aedc:	1000dd96 1000dd96 1000dd96 1000dd96     ................
1001aeec:	1000dd96 1000daac 1000daa4 1000da9c     ................
1001aefc:	1000da88 1000da70 1000da58 1000da40     ....p...X...@...
1001af0c:	1000da28 1000da10 1000d9f8 1000d9e2     (...............
1001af1c:	1000d9cc 1000d9b4 1000d99c 4f464946     ............FIFO
1001af2c:	6425203a 20642520 202c6425 25206425     : %d %d %d, %d %
1001af3c:	64252064 6c25202c 6c252064 6c252064     d %d, %ld %ld %l
1001af4c:	6c252064 00000064 20746f4e 68747561     d %ld...Not auth
1001af5c:	7a69726f 002e6465 656d6954 6d617473     orized..Timestam
1001af6c:	25203a70 0000646c 706d6f43 3a737361     p: %ld..Compass:
1001af7c:	646c2520 646c2520 646c2520 00000000      %ld %ld %ld....
1001af8c:	4c504d65 312e3520 6d744100 43206c65     eMPL 5.1.Atmel C
1001af9c:	2e70726f                                orp.

1001afa0 <CSWTCH.47>:
1001afa0:	03010300 03030303 03030303 00020303     ................
1001afb0:	74727173 00000066                       sqrtf...

1001afb8 <atanlo>:
1001afb8:	31ac3769 33222168 33140fb4 33a22168     i7.1h!"3...3h!.3

1001afc8 <atanhi>:
1001afc8:	3eed6338 3f490fda 3f7b985e 3fc90fda     8c.>..I?^.{?...?
1001afd8:	10011bde 10011b82 10011b6e 10011ab2     ........n.......
1001afe8:	1001198a 10011a64 10011bfc 736f6361     ....d.......acos
1001aff8:	00000066                                f...

1001affc <npio2_hw>:
1001affc:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
1001b00c:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
1001b01c:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
1001b02c:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
1001b03c:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
1001b04c:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
1001b05c:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
1001b06c:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

1001b07c <two_over_pi>:
1001b07c:	000000a2 000000f9 00000083 0000006e     ............n...
1001b08c:	0000004e 00000044 00000015 00000029     N...D.......)...
1001b09c:	000000fc 00000027 00000057 000000d1     ....'...W.......
1001b0ac:	000000f5 00000034 000000dd 000000c0     ....4...........
1001b0bc:	000000db 00000062 00000095 00000099     ....b...........
1001b0cc:	0000003c 00000043 00000090 00000041     <...C.......A...
1001b0dc:	000000fe 00000051 00000063 000000ab     ....Q...c.......
1001b0ec:	000000de 000000bb 000000c5 00000061     ............a...
1001b0fc:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
1001b10c:	00000042 0000004d 000000d2 000000e0     B...M...........
1001b11c:	00000006 00000049 0000002e 000000ea     ....I...........
1001b12c:	00000009 000000d1 00000092 0000001c     ................
1001b13c:	000000fe 0000001d 000000eb 0000001c     ................
1001b14c:	000000b1 00000029 000000a7 0000003e     ....).......>...
1001b15c:	000000e8 00000082 00000035 000000f5     ........5.......
1001b16c:	0000002e 000000bb 00000044 00000084     ........D.......
1001b17c:	000000e9 0000009c 00000070 00000026     ........p...&...
1001b18c:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
1001b19c:	00000039 00000091 000000d6 00000039     9...........9...
1001b1ac:	00000083 00000053 00000039 000000f4     ....S...9.......
1001b1bc:	0000009c 00000084 0000005f 0000008b     ........_.......
1001b1cc:	000000bd 000000f9 00000028 0000003b     ........(...;...
1001b1dc:	0000001f 000000f8 00000097 000000ff     ................
1001b1ec:	000000de 00000005 00000098 0000000f     ................
1001b1fc:	000000ef 0000002f 00000011 0000008b     ..../...........
1001b20c:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
1001b21c:	0000006d 00000036 0000007e 000000cf     m...6...~.......
1001b22c:	00000027 000000cb 00000009 000000b7     '...............
1001b23c:	0000004f 00000046 0000003f 00000066     O...F...?...f...
1001b24c:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
1001b25c:	00000075 00000027 000000ba 000000c7     u...'...........
1001b26c:	000000eb 000000e5 000000f1 0000007b     ............{...
1001b27c:	0000003d 00000007 00000039 000000f7     =.......9.......
1001b28c:	0000008a 00000052 00000092 000000ea     ....R...........
1001b29c:	0000006b 000000fb 0000005f 000000b1     k......._.......
1001b2ac:	0000001f 0000008d 0000005d 00000008     ........].......
1001b2bc:	00000056 00000003 00000030 00000046     V.......0...F...
1001b2cc:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
1001b2dc:	000000f0 000000cf 000000bc 00000020     ............ ...
1001b2ec:	0000009a 000000f4 00000036 0000001d     ........6.......
1001b2fc:	000000a9 000000e3 00000091 00000061     ............a...
1001b30c:	0000005e 000000e6 0000001b 00000008     ^...............
1001b31c:	00000065 00000099 00000085 0000005f     e..........._...
1001b32c:	00000014 000000a0 00000068 00000040     ........h...@...
1001b33c:	0000008d 000000ff 000000d8 00000080     ................
1001b34c:	0000004d 00000073 00000027 00000031     M...s...'...1...
1001b35c:	00000006 00000006 00000015 00000056     ............V...
1001b36c:	000000ca 00000073 000000a8 000000c9     ....s...........
1001b37c:	00000060 000000e2 0000007b 000000c0     `.......{.......
1001b38c:	0000008c 0000006b                       ....k...

1001b394 <init_jk>:
1001b394:	00000004 00000007 00000009              ............

1001b3a0 <PIo2>:
1001b3a0:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
1001b3b0:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
1001b3c0:	1fc40000 1bc60000 17440000 100159e2     ..........D..Y..
1001b3d0:	10015906 100159c4 1001599c 100159c4     .Y...Y...Y...Y..
1001b3e0:	10015990 100159c4 1001599c 10015906     .Y...Y...Y...Y..
1001b3f0:	10015906 10015990 1001599c 10015a48     .Y...Y...Y..HZ..
1001b400:	10015a48 10015a48 100159ca 10015906     HZ..HZ...Y...Y..
1001b410:	10015906 100159b0 1001599a 100159b0     .Y...Y...Y...Y..
1001b420:	10015990 100159b0 1001599a 10015906     .Y...Y...Y...Y..
1001b430:	10015906 10015990 1001599a 10015a48     .Y...Y...Y..HZ..
1001b440:	10015a48 10015a48 10015a54 10015d40     HZ..HZ..TZ..@]..
1001b450:	10015c9e 10015c9e 10015c9c 10015d32     .\...\...\..2]..
1001b460:	10015d32 10015d28 10015c9c 10015d32     2]..(]...\..2]..
1001b470:	10015d28 10015d32 10015c9c 10015d38     (]..2]...\..8]..
1001b480:	10015d38 10015d38 10015dc2 10016b20     8]..8]...].. k..
1001b490:	100169ee 10016af4 100169e4 10016af4     .i...j...i...j..
1001b4a0:	10016afe 10016af4 100169e4 100169ee     .j...j...i...i..
1001b4b0:	100169ee 10016afe 100169e4 100169da     .i...j...i...i..
1001b4c0:	100169da 100169da 10016d50 10017368     .i...i..Pm..hs..
1001b4d0:	10017228 10017228 10017226 10017340     (r..(r..&r..@s..
1001b4e0:	10017340 10017332 10017226 10017340     @s..2s..&r..@s..
1001b4f0:	10017332 10017340 10017226 10017348     2s..@s..&r..Hs..
1001b500:	10017348 10017348 10017548 00000043     Hs..Hs..Hu..C...

1001b510 <_global_impure_ptr>:
1001b510:	1001b62c                                ,...

1001b514 <__sf_fake_stdin>:
	...

1001b534 <__sf_fake_stdout>:
	...

1001b554 <__sf_fake_stderr>:
	...
1001b574:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
1001b584:	32313000 36353433 41393837 45444342     .0123456789ABCDE
1001b594:	31300046 35343332 39383736 64636261     F.0123456789abcd
1001b5a4:	00006665                                ef..

1001b5a8 <_init>:
1001b5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001b5aa:	46c0      	nop			; (mov r8, r8)
1001b5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001b5ae:	bc08      	pop	{r3}
1001b5b0:	469e      	mov	lr, r3
1001b5b2:	4770      	bx	lr

1001b5b4 <__init_array_start>:
1001b5b4:	10008095 	.word	0x10008095

1001b5b8 <_fini>:
1001b5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001b5ba:	46c0      	nop			; (mov r8, r8)
1001b5bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001b5be:	bc08      	pop	{r3}
1001b5c0:	469e      	mov	lr, r3
1001b5c2:	4770      	bx	lr

1001b5c4 <__fini_array_start>:
1001b5c4:	1000806d 	.word	0x1000806d
