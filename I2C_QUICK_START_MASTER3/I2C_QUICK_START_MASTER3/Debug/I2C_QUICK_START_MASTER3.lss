
I2C_QUICK_START_MASTER3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a0b4  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000ac  100120b4  100120b4  000120b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002cc0  10012160  10012160  00012160  2**2
                  ALLOC
  3 .stack        00000800  10014e20  10014e20  00012160  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00012160  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00012188  2**0
                  CONTENTS, READONLY
  6 .debug_info   00026cf1  00000000  00000000  0001223c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e86  00000000  00000000  00038f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000083fa  00000000  00000000  0003bdb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000878  00000000  00000000  000441ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000998  00000000  00000000  00044a25  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021d24  00000000  00000000  000453bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c1a4  00000000  00000000  000670e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0013ec1b  00000000  00000000  00073285  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000020ec  00000000  00000000  001b1ea0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	100120b4 	.word	0x100120b4
10008068:	100120b4 	.word	0x100120b4
1000806c:	10012160 	.word	0x10012160
10008070:	10014e20 	.word	0x10014e20
10008074:	10012160 	.word	0x10012160
10008078:	100120b8 	.word	0x100120b8
1000807c:	10012164 	.word	0x10012164
10008080:	1000ff41 	.word	0x1000ff41
10008084:	1000c359 	.word	0x1000c359

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10012160 	.word	0x10012160
100080a8:	00000000 	.word	0x00000000
100080ac:	100120b4 	.word	0x100120b4

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10012164 	.word	0x10012164
100080dc:	100120b4 	.word	0x100120b4
100080e0:	100120b4 	.word	0x100120b4
100080e4:	00000000 	.word	0x00000000

100080e8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
100080e8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_clock_get_value();
100080ea:	4b09      	ldr	r3, [pc, #36]	; (10008110 <delay_init+0x28>)
100080ec:	4798      	blx	r3
100080ee:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
100080f0:	4c08      	ldr	r4, [pc, #32]	; (10008114 <delay_init+0x2c>)
100080f2:	21fa      	movs	r1, #250	; 0xfa
100080f4:	0089      	lsls	r1, r1, #2
100080f6:	47a0      	blx	r4
100080f8:	4b07      	ldr	r3, [pc, #28]	; (10008118 <delay_init+0x30>)
100080fa:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
100080fc:	4907      	ldr	r1, [pc, #28]	; (1000811c <delay_init+0x34>)
100080fe:	0028      	movs	r0, r5
10008100:	47a0      	blx	r4
10008102:	4b07      	ldr	r3, [pc, #28]	; (10008120 <delay_init+0x38>)
10008104:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
10008106:	2205      	movs	r2, #5
10008108:	4b06      	ldr	r3, [pc, #24]	; (10008124 <delay_init+0x3c>)
1000810a:	601a      	str	r2, [r3, #0]
}
1000810c:	bd70      	pop	{r4, r5, r6, pc}
1000810e:	46c0      	nop			; (mov r8, r8)
10008110:	1000ba85 	.word	0x1000ba85
10008114:	1000ec75 	.word	0x1000ec75
10008118:	100120b8 	.word	0x100120b8
1000811c:	000f4240 	.word	0x000f4240
10008120:	100120b4 	.word	0x100120b4
10008124:	e000e010 	.word	0xe000e010

10008128 <delay_cycles_ms>:
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
10008128:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
1000812a:	4b08      	ldr	r3, [pc, #32]	; (1000814c <delay_cycles_ms+0x24>)
1000812c:	681c      	ldr	r4, [r3, #0]
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
1000812e:	4a08      	ldr	r2, [pc, #32]	; (10008150 <delay_cycles_ms+0x28>)
        SysTick->VAL = 0;
10008130:	2500      	movs	r5, #0
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008132:	2180      	movs	r1, #128	; 0x80
10008134:	0249      	lsls	r1, r1, #9
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
10008136:	e006      	b.n	10008146 <delay_cycles_ms+0x1e>
 *
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
10008138:	2c00      	cmp	r4, #0
1000813a:	d004      	beq.n	10008146 <delay_cycles_ms+0x1e>
        SysTick->LOAD = n;
1000813c:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
1000813e:	6095      	str	r5, [r2, #8]
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008140:	6813      	ldr	r3, [r2, #0]
10008142:	420b      	tst	r3, r1
10008144:	d0fc      	beq.n	10008140 <delay_cycles_ms+0x18>
10008146:	3801      	subs	r0, #1
10008148:	d2f6      	bcs.n	10008138 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
1000814a:	bd30      	pop	{r4, r5, pc}
1000814c:	100120b8 	.word	0x100120b8
10008150:	e000e010 	.word	0xe000e010

10008154 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
10008154:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
10008156:	4b0d      	ldr	r3, [pc, #52]	; (1000818c <dualtimer_isr_handler+0x38>)
10008158:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000815a:	2b00      	cmp	r3, #0
1000815c:	d007      	beq.n	1000816e <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000815e:	2201      	movs	r2, #1
10008160:	4b0a      	ldr	r3, [pc, #40]	; (1000818c <dualtimer_isr_handler+0x38>)
10008162:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
10008164:	4b0a      	ldr	r3, [pc, #40]	; (10008190 <dualtimer_isr_handler+0x3c>)
10008166:	681b      	ldr	r3, [r3, #0]
10008168:	2b00      	cmp	r3, #0
1000816a:	d000      	beq.n	1000816e <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000816c:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000816e:	2334      	movs	r3, #52	; 0x34
10008170:	4a06      	ldr	r2, [pc, #24]	; (1000818c <dualtimer_isr_handler+0x38>)
10008172:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
10008174:	2b00      	cmp	r3, #0
10008176:	d007      	beq.n	10008188 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
10008178:	2101      	movs	r1, #1
1000817a:	232c      	movs	r3, #44	; 0x2c
1000817c:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000817e:	4b05      	ldr	r3, [pc, #20]	; (10008194 <dualtimer_isr_handler+0x40>)
10008180:	681b      	ldr	r3, [r3, #0]
10008182:	2b00      	cmp	r3, #0
10008184:	d000      	beq.n	10008188 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
10008186:	4798      	blx	r3
	}
}
10008188:	bd10      	pop	{r4, pc}
1000818a:	46c0      	nop			; (mov r8, r8)
1000818c:	40001000 	.word	0x40001000
10008190:	1001217c 	.word	0x1001217c
10008194:	10012180 	.word	0x10012180

10008198 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
10008198:	2301      	movs	r3, #1
1000819a:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000819c:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000819e:	2202      	movs	r2, #2
100081a0:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
100081a2:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
100081a4:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
100081a6:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
100081a8:	2200      	movs	r2, #0
100081aa:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
100081ac:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
100081ae:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
100081b0:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
100081b2:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
100081b4:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
100081b6:	7602      	strb	r2, [r0, #24]
}
100081b8:	4770      	bx	lr
100081ba:	46c0      	nop			; (mov r8, r8)

100081bc <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
100081bc:	2800      	cmp	r0, #0
100081be:	d105      	bne.n	100081cc <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
100081c0:	4a06      	ldr	r2, [pc, #24]	; (100081dc <dualtimer_enable+0x20>)
100081c2:	7a11      	ldrb	r1, [r2, #8]
100081c4:	2380      	movs	r3, #128	; 0x80
100081c6:	430b      	orrs	r3, r1
100081c8:	7213      	strb	r3, [r2, #8]
100081ca:	e005      	b.n	100081d8 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
100081cc:	4903      	ldr	r1, [pc, #12]	; (100081dc <dualtimer_enable+0x20>)
100081ce:	2228      	movs	r2, #40	; 0x28
100081d0:	5c88      	ldrb	r0, [r1, r2]
100081d2:	2380      	movs	r3, #128	; 0x80
100081d4:	4303      	orrs	r3, r0
100081d6:	548b      	strb	r3, [r1, r2]
	}
}
100081d8:	4770      	bx	lr
100081da:	46c0      	nop			; (mov r8, r8)
100081dc:	40001000 	.word	0x40001000

100081e0 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
100081e0:	2800      	cmp	r0, #0
100081e2:	d105      	bne.n	100081f0 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
100081e4:	4a06      	ldr	r2, [pc, #24]	; (10008200 <dualtimer_disable+0x20>)
100081e6:	7a11      	ldrb	r1, [r2, #8]
100081e8:	237f      	movs	r3, #127	; 0x7f
100081ea:	400b      	ands	r3, r1
100081ec:	7213      	strb	r3, [r2, #8]
100081ee:	e005      	b.n	100081fc <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
100081f0:	4903      	ldr	r1, [pc, #12]	; (10008200 <dualtimer_disable+0x20>)
100081f2:	2228      	movs	r2, #40	; 0x28
100081f4:	5c88      	ldrb	r0, [r1, r2]
100081f6:	237f      	movs	r3, #127	; 0x7f
100081f8:	4003      	ands	r3, r0
100081fa:	548b      	strb	r3, [r1, r2]
	}
}
100081fc:	4770      	bx	lr
100081fe:	46c0      	nop			; (mov r8, r8)
10008200:	40001000 	.word	0x40001000

10008204 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
10008204:	b570      	push	{r4, r5, r6, lr}
10008206:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
10008208:	2004      	movs	r0, #4
1000820a:	4b39      	ldr	r3, [pc, #228]	; (100082f0 <dualtimer_init+0xec>)
1000820c:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000820e:	7823      	ldrb	r3, [r4, #0]
10008210:	2b00      	cmp	r3, #0
10008212:	d102      	bne.n	1000821a <dualtimer_init+0x16>
10008214:	7b23      	ldrb	r3, [r4, #12]
10008216:	2b00      	cmp	r3, #0
10008218:	d065      	beq.n	100082e6 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000821a:	4936      	ldr	r1, [pc, #216]	; (100082f4 <dualtimer_init+0xf0>)
1000821c:	68ca      	ldr	r2, [r1, #12]
1000821e:	2320      	movs	r3, #32
10008220:	4313      	orrs	r3, r2
10008222:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
10008224:	7e22      	ldrb	r2, [r4, #24]
10008226:	698b      	ldr	r3, [r1, #24]
10008228:	2003      	movs	r0, #3
1000822a:	4002      	ands	r2, r0
1000822c:	0112      	lsls	r2, r2, #4
1000822e:	302d      	adds	r0, #45	; 0x2d
10008230:	4383      	bics	r3, r0
10008232:	4313      	orrs	r3, r2
10008234:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
10008236:	7823      	ldrb	r3, [r4, #0]
10008238:	2b00      	cmp	r3, #0
1000823a:	d026      	beq.n	1000828a <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000823c:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000823e:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008240:	2b00      	cmp	r3, #0
10008242:	d003      	beq.n	1000824c <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
10008244:	3b02      	subs	r3, #2
10008246:	425d      	negs	r5, r3
10008248:	415d      	adcs	r5, r3
1000824a:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000824c:	78a2      	ldrb	r2, [r4, #2]
1000824e:	0052      	lsls	r2, r2, #1
10008250:	2502      	movs	r5, #2
10008252:	402a      	ands	r2, r5
10008254:	78e3      	ldrb	r3, [r4, #3]
10008256:	009b      	lsls	r3, r3, #2
10008258:	350a      	adds	r5, #10
1000825a:	402b      	ands	r3, r5
1000825c:	431a      	orrs	r2, r3
1000825e:	0015      	movs	r5, r2
10008260:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
10008262:	7923      	ldrb	r3, [r4, #4]
10008264:	2b00      	cmp	r3, #0
10008266:	d001      	beq.n	1000826c <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
10008268:	2320      	movs	r3, #32
1000826a:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000826c:	4b22      	ldr	r3, [pc, #136]	; (100082f8 <dualtimer_init+0xf4>)
1000826e:	68a2      	ldr	r2, [r4, #8]
10008270:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
10008272:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10008274:	491f      	ldr	r1, [pc, #124]	; (100082f4 <dualtimer_init+0xf0>)
10008276:	22c4      	movs	r2, #196	; 0xc4
10008278:	0052      	lsls	r2, r2, #1
1000827a:	5c88      	ldrb	r0, [r1, r2]
1000827c:	2301      	movs	r3, #1
1000827e:	4303      	orrs	r3, r0
10008280:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
10008282:	2000      	movs	r0, #0
10008284:	4b1d      	ldr	r3, [pc, #116]	; (100082fc <dualtimer_init+0xf8>)
10008286:	4798      	blx	r3
10008288:	e000      	b.n	1000828c <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000828a:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000828c:	7b23      	ldrb	r3, [r4, #12]
1000828e:	2b00      	cmp	r3, #0
10008290:	d029      	beq.n	100082e6 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008292:	7b63      	ldrb	r3, [r4, #13]
10008294:	2b00      	cmp	r3, #0
10008296:	d005      	beq.n	100082a4 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
10008298:	2b01      	cmp	r3, #1
1000829a:	d005      	beq.n	100082a8 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000829c:	2b02      	cmp	r3, #2
1000829e:	d104      	bne.n	100082aa <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
100082a0:	2540      	movs	r5, #64	; 0x40
100082a2:	e002      	b.n	100082aa <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
100082a4:	2501      	movs	r5, #1
100082a6:	e000      	b.n	100082aa <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
100082a8:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
100082aa:	7ba3      	ldrb	r3, [r4, #14]
100082ac:	005b      	lsls	r3, r3, #1
100082ae:	2102      	movs	r1, #2
100082b0:	4019      	ands	r1, r3
100082b2:	7be2      	ldrb	r2, [r4, #15]
100082b4:	0092      	lsls	r2, r2, #2
100082b6:	230c      	movs	r3, #12
100082b8:	4013      	ands	r3, r2
100082ba:	430b      	orrs	r3, r1
100082bc:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
100082be:	7c23      	ldrb	r3, [r4, #16]
100082c0:	2b00      	cmp	r3, #0
100082c2:	d001      	beq.n	100082c8 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
100082c4:	2320      	movs	r3, #32
100082c6:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
100082c8:	6962      	ldr	r2, [r4, #20]
100082ca:	4b0b      	ldr	r3, [pc, #44]	; (100082f8 <dualtimer_init+0xf4>)
100082cc:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
100082ce:	2228      	movs	r2, #40	; 0x28
100082d0:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
100082d2:	4908      	ldr	r1, [pc, #32]	; (100082f4 <dualtimer_init+0xf0>)
100082d4:	3261      	adds	r2, #97	; 0x61
100082d6:	32ff      	adds	r2, #255	; 0xff
100082d8:	5c88      	ldrb	r0, [r1, r2]
100082da:	2302      	movs	r3, #2
100082dc:	4303      	orrs	r3, r0
100082de:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
100082e0:	2001      	movs	r0, #1
100082e2:	4b06      	ldr	r3, [pc, #24]	; (100082fc <dualtimer_init+0xf8>)
100082e4:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
100082e6:	4906      	ldr	r1, [pc, #24]	; (10008300 <dualtimer_init+0xfc>)
100082e8:	201e      	movs	r0, #30
100082ea:	4b06      	ldr	r3, [pc, #24]	; (10008304 <dualtimer_init+0x100>)
100082ec:	4798      	blx	r3
}
100082ee:	bd70      	pop	{r4, r5, r6, pc}
100082f0:	1000bded 	.word	0x1000bded
100082f4:	4000b000 	.word	0x4000b000
100082f8:	40001000 	.word	0x40001000
100082fc:	100081bd 	.word	0x100081bd
10008300:	10008155 	.word	0x10008155
10008304:	1000c255 	.word	0x1000c255

10008308 <i2c_read>:
        }
    }
    return 0;
}
static int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
10008308:	b5f0      	push	{r4, r5, r6, r7, lr}
1000830a:	b087      	sub	sp, #28
1000830c:	0004      	movs	r4, r0
1000830e:	000d      	movs	r5, r1
10008310:	0016      	movs	r6, r2
10008312:	001f      	movs	r7, r3
    DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
10008314:	4829      	ldr	r0, [pc, #164]	; (100083bc <i2c_read+0xb4>)
10008316:	4b2a      	ldr	r3, [pc, #168]	; (100083c0 <i2c_read+0xb8>)
10008318:	4798      	blx	r3
1000831a:	002a      	movs	r2, r5
1000831c:	0021      	movs	r1, r4
1000831e:	4829      	ldr	r0, [pc, #164]	; (100083c4 <i2c_read+0xbc>)
10008320:	4b29      	ldr	r3, [pc, #164]	; (100083c8 <i2c_read+0xc0>)
10008322:	4798      	blx	r3
    volatile uint16_t timeout;
    struct i2c_master_packet w_packet, r_packet;
    w_packet.address = (uint8_t)slave_addr;
10008324:	b2a4      	uxth	r4, r4
10008326:	ab03      	add	r3, sp, #12
10008328:	801c      	strh	r4, [r3, #0]
    w_packet.data_length = 1;
1000832a:	2201      	movs	r2, #1
1000832c:	805a      	strh	r2, [r3, #2]
    w_packet.data[0] = (uint8_t)reg_addr;
1000832e:	9b04      	ldr	r3, [sp, #16]
10008330:	701d      	strb	r5, [r3, #0]
    r_packet.address = (uint8_t)slave_addr;
10008332:	ab01      	add	r3, sp, #4
10008334:	801c      	strh	r4, [r3, #0]
    r_packet.data_length = (uint8_t)data_len;
10008336:	805e      	strh	r6, [r3, #2]
    
    timeout = 0;
10008338:	2200      	movs	r2, #0
1000833a:	2316      	movs	r3, #22
1000833c:	446b      	add	r3, sp
1000833e:	801a      	strh	r2, [r3, #0]
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &w_packet) != STATUS_OK) {
10008340:	4c22      	ldr	r4, [pc, #136]	; (100083cc <i2c_read+0xc4>)
10008342:	4d23      	ldr	r5, [pc, #140]	; (100083d0 <i2c_read+0xc8>)
10008344:	e009      	b.n	1000835a <i2c_read+0x52>
        if(timeout++ >= I2C_TIMEOUT) {
10008346:	2116      	movs	r1, #22
10008348:	4469      	add	r1, sp
1000834a:	880b      	ldrh	r3, [r1, #0]
1000834c:	b29b      	uxth	r3, r3
1000834e:	1c5a      	adds	r2, r3, #1
10008350:	b292      	uxth	r2, r2
10008352:	800a      	strh	r2, [r1, #0]
10008354:	4a1f      	ldr	r2, [pc, #124]	; (100083d4 <i2c_read+0xcc>)
10008356:	4293      	cmp	r3, r2
10008358:	d826      	bhi.n	100083a8 <i2c_read+0xa0>
    w_packet.data[0] = (uint8_t)reg_addr;
    r_packet.address = (uint8_t)slave_addr;
    r_packet.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &w_packet) != STATUS_OK) {
1000835a:	a903      	add	r1, sp, #12
1000835c:	0020      	movs	r0, r4
1000835e:	47a8      	blx	r5
10008360:	2800      	cmp	r0, #0
10008362:	d1f0      	bne.n	10008346 <i2c_read+0x3e>
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    
    timeout = 0;
10008364:	2200      	movs	r2, #0
10008366:	2316      	movs	r3, #22
10008368:	446b      	add	r3, sp
1000836a:	801a      	strh	r2, [r3, #0]
    while(i2c_master_read_packet_wait(&i2c_master_instance, &r_packet) != STATUS_OK) {
1000836c:	4c17      	ldr	r4, [pc, #92]	; (100083cc <i2c_read+0xc4>)
1000836e:	4d1a      	ldr	r5, [pc, #104]	; (100083d8 <i2c_read+0xd0>)
10008370:	e009      	b.n	10008386 <i2c_read+0x7e>
        if(timeout++ >= I2C_TIMEOUT) {
10008372:	2116      	movs	r1, #22
10008374:	4469      	add	r1, sp
10008376:	880b      	ldrh	r3, [r1, #0]
10008378:	b29b      	uxth	r3, r3
1000837a:	1c5a      	adds	r2, r3, #1
1000837c:	b292      	uxth	r2, r2
1000837e:	800a      	strh	r2, [r1, #0]
10008380:	4a14      	ldr	r2, [pc, #80]	; (100083d4 <i2c_read+0xcc>)
10008382:	4293      	cmp	r3, r2
10008384:	d813      	bhi.n	100083ae <i2c_read+0xa6>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &r_packet) != STATUS_OK) {
10008386:	a901      	add	r1, sp, #4
10008388:	0020      	movs	r0, r4
1000838a:	47a8      	blx	r5
1000838c:	2800      	cmp	r0, #0
1000838e:	d1f0      	bne.n	10008372 <i2c_read+0x6a>
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
10008390:	2e00      	cmp	r6, #0
10008392:	d00f      	beq.n	100083b4 <i2c_read+0xac>
        data[i] = r_packet.data[i];
10008394:	9902      	ldr	r1, [sp, #8]
10008396:	2300      	movs	r3, #0
10008398:	5cca      	ldrb	r2, [r1, r3]
1000839a:	54fa      	strb	r2, [r7, r3]
1000839c:	3301      	adds	r3, #1
    while(i2c_master_read_packet_wait(&i2c_master_instance, &r_packet) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000839e:	b2da      	uxtb	r2, r3
100083a0:	42b2      	cmp	r2, r6
100083a2:	d3f9      	bcc.n	10008398 <i2c_read+0x90>
        data[i] = r_packet.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
100083a4:	2000      	movs	r0, #0
100083a6:	e006      	b.n	100083b6 <i2c_read+0xae>
    r_packet.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &w_packet) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
100083a8:	2001      	movs	r0, #1
100083aa:	4240      	negs	r0, r0
100083ac:	e003      	b.n	100083b6 <i2c_read+0xae>
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &r_packet) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
100083ae:	2001      	movs	r0, #1
100083b0:	4240      	negs	r0, r0
100083b2:	e000      	b.n	100083b6 <i2c_read+0xae>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = r_packet.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
100083b4:	2000      	movs	r0, #0
}
100083b6:	b007      	add	sp, #28
100083b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100083ba:	46c0      	nop			; (mov r8, r8)
100083bc:	100112b0 	.word	0x100112b0
100083c0:	100100ed 	.word	0x100100ed
100083c4:	100111ac 	.word	0x100111ac
100083c8:	1000ffcd 	.word	0x1000ffcd
100083cc:	10014898 	.word	0x10014898
100083d0:	1000b9dd 	.word	0x1000b9dd
100083d4:	000003e7 	.word	0x000003e7
100083d8:	1000b985 	.word	0x1000b985

100083dc <i2c_write>:
* labs(long x)
* fabsf(float x)
* min(int a, int b)
*/
static int i2c_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
100083dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100083de:	b085      	sub	sp, #20
100083e0:	0007      	movs	r7, r0
100083e2:	000e      	movs	r6, r1
100083e4:	0014      	movs	r4, r2
100083e6:	001d      	movs	r5, r3
    DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
100083e8:	481a      	ldr	r0, [pc, #104]	; (10008454 <i2c_write+0x78>)
100083ea:	4b1b      	ldr	r3, [pc, #108]	; (10008458 <i2c_write+0x7c>)
100083ec:	4798      	blx	r3
100083ee:	0032      	movs	r2, r6
100083f0:	0039      	movs	r1, r7
100083f2:	481a      	ldr	r0, [pc, #104]	; (1000845c <i2c_write+0x80>)
100083f4:	4b1a      	ldr	r3, [pc, #104]	; (10008460 <i2c_write+0x84>)
100083f6:	4798      	blx	r3
    volatile uint16_t timeout = 0;
100083f8:	2200      	movs	r2, #0
100083fa:	230e      	movs	r3, #14
100083fc:	446b      	add	r3, sp
100083fe:	801a      	strh	r2, [r3, #0]
    struct i2c_master_packet packet;
    packet.address = (uint8_t)slave_addr;
10008400:	ab01      	add	r3, sp, #4
10008402:	801f      	strh	r7, [r3, #0]
    packet.data_length = (uint8_t)(data_len + 1);
10008404:	1c62      	adds	r2, r4, #1
10008406:	b2d2      	uxtb	r2, r2
10008408:	805a      	strh	r2, [r3, #2]
    packet.data[0] = (uint8_t)reg_addr;
1000840a:	9b02      	ldr	r3, [sp, #8]
1000840c:	701e      	strb	r6, [r3, #0]
    for(uint8_t i = 0; i < data_len; i++) {
1000840e:	2c00      	cmp	r4, #0
10008410:	d008      	beq.n	10008424 <i2c_write+0x48>
10008412:	2200      	movs	r2, #0
10008414:	1c53      	adds	r3, r2, #1
        packet.data[i+1] = (uint8_t)data[i];
10008416:	5caa      	ldrb	r2, [r5, r2]
10008418:	9902      	ldr	r1, [sp, #8]
1000841a:	54ca      	strb	r2, [r1, r3]
1000841c:	001a      	movs	r2, r3
    volatile uint16_t timeout = 0;
    struct i2c_master_packet packet;
    packet.address = (uint8_t)slave_addr;
    packet.data_length = (uint8_t)(data_len + 1);
    packet.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
1000841e:	b2db      	uxtb	r3, r3
10008420:	429c      	cmp	r4, r3
10008422:	d8f7      	bhi.n	10008414 <i2c_write+0x38>
        packet.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) != STATUS_OK) {
10008424:	4c0f      	ldr	r4, [pc, #60]	; (10008464 <i2c_write+0x88>)
10008426:	4d10      	ldr	r5, [pc, #64]	; (10008468 <i2c_write+0x8c>)
10008428:	e009      	b.n	1000843e <i2c_write+0x62>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
1000842a:	210e      	movs	r1, #14
1000842c:	4469      	add	r1, sp
1000842e:	880b      	ldrh	r3, [r1, #0]
10008430:	b29b      	uxth	r3, r3
10008432:	1c5a      	adds	r2, r3, #1
10008434:	b292      	uxth	r2, r2
10008436:	800a      	strh	r2, [r1, #0]
10008438:	4a0c      	ldr	r2, [pc, #48]	; (1000846c <i2c_write+0x90>)
1000843a:	4293      	cmp	r3, r2
1000843c:	d805      	bhi.n	1000844a <i2c_write+0x6e>
    packet.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
        packet.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) != STATUS_OK) {
1000843e:	a901      	add	r1, sp, #4
10008440:	0020      	movs	r0, r4
10008442:	47a8      	blx	r5
10008444:	2800      	cmp	r0, #0
10008446:	d1f0      	bne.n	1000842a <i2c_write+0x4e>
10008448:	e001      	b.n	1000844e <i2c_write+0x72>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
1000844a:	2001      	movs	r0, #1
1000844c:	4240      	negs	r0, r0
        }
    }
    return 0;
}
1000844e:	b005      	add	sp, #20
10008450:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008452:	46c0      	nop			; (mov r8, r8)
10008454:	100112b0 	.word	0x100112b0
10008458:	100100ed 	.word	0x100100ed
1000845c:	100111d8 	.word	0x100111d8
10008460:	1000ffcd 	.word	0x1000ffcd
10008464:	10014898 	.word	0x10014898
10008468:	1000b9a9 	.word	0x1000b9a9
1000846c:	000003e7 	.word	0x000003e7

10008470 <set_int_enable>:
*  interrupt is used.
*  @param[in]  enable      1 to enable interrupt.
*  @return     0 if successful.
*/
static int set_int_enable(unsigned char enable)
{
10008470:	b510      	push	{r4, lr}
10008472:	b082      	sub	sp, #8
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
10008474:	2324      	movs	r3, #36	; 0x24
10008476:	4a25      	ldr	r2, [pc, #148]	; (1000850c <set_int_enable+0x9c>)
10008478:	5cd3      	ldrb	r3, [r2, r3]
1000847a:	2b00      	cmp	r3, #0
1000847c:	d019      	beq.n	100084b2 <set_int_enable+0x42>
        if (enable)
1000847e:	2800      	cmp	r0, #0
10008480:	d003      	beq.n	1000848a <set_int_enable+0x1a>
        tmp = BIT_DMP_INT_EN;
10008482:	2202      	movs	r2, #2
10008484:	466b      	mov	r3, sp
10008486:	71da      	strb	r2, [r3, #7]
10008488:	e002      	b.n	10008490 <set_int_enable+0x20>
        else
        tmp = 0x00;
1000848a:	2200      	movs	r2, #0
1000848c:	466b      	mov	r3, sp
1000848e:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
10008490:	4b1e      	ldr	r3, [pc, #120]	; (1000850c <set_int_enable+0x9c>)
10008492:	681a      	ldr	r2, [r3, #0]
10008494:	7c51      	ldrb	r1, [r2, #17]
10008496:	685b      	ldr	r3, [r3, #4]
10008498:	7818      	ldrb	r0, [r3, #0]
1000849a:	466b      	mov	r3, sp
1000849c:	3307      	adds	r3, #7
1000849e:	2201      	movs	r2, #1
100084a0:	4c1b      	ldr	r4, [pc, #108]	; (10008510 <set_int_enable+0xa0>)
100084a2:	47a0      	blx	r4
100084a4:	2800      	cmp	r0, #0
100084a6:	d127      	bne.n	100084f8 <set_int_enable+0x88>
        return -1;
        st.chip_cfg.int_enable = tmp;
100084a8:	466b      	mov	r3, sp
100084aa:	79da      	ldrb	r2, [r3, #7]
100084ac:	4b17      	ldr	r3, [pc, #92]	; (1000850c <set_int_enable+0x9c>)
100084ae:	745a      	strb	r2, [r3, #17]
100084b0:	e02a      	b.n	10008508 <set_int_enable+0x98>
        } else {
        if (!st.chip_cfg.sensors)
100084b2:	4b16      	ldr	r3, [pc, #88]	; (1000850c <set_int_enable+0x9c>)
100084b4:	7a9b      	ldrb	r3, [r3, #10]
100084b6:	2b00      	cmp	r3, #0
100084b8:	d021      	beq.n	100084fe <set_int_enable+0x8e>
        return -1;
        if (enable && st.chip_cfg.int_enable)
100084ba:	2800      	cmp	r0, #0
100084bc:	d008      	beq.n	100084d0 <set_int_enable+0x60>
100084be:	4b13      	ldr	r3, [pc, #76]	; (1000850c <set_int_enable+0x9c>)
100084c0:	7c5b      	ldrb	r3, [r3, #17]
        return 0;
100084c2:	2000      	movs	r0, #0
        return -1;
        st.chip_cfg.int_enable = tmp;
        } else {
        if (!st.chip_cfg.sensors)
        return -1;
        if (enable && st.chip_cfg.int_enable)
100084c4:	2b00      	cmp	r3, #0
100084c6:	d11f      	bne.n	10008508 <set_int_enable+0x98>
        return 0;
        if (enable)
        tmp = BIT_DATA_RDY_EN;
100084c8:	2201      	movs	r2, #1
100084ca:	466b      	mov	r3, sp
100084cc:	71da      	strb	r2, [r3, #7]
100084ce:	e002      	b.n	100084d6 <set_int_enable+0x66>
        else
        tmp = 0x00;
100084d0:	2200      	movs	r2, #0
100084d2:	466b      	mov	r3, sp
100084d4:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
100084d6:	4b0d      	ldr	r3, [pc, #52]	; (1000850c <set_int_enable+0x9c>)
100084d8:	681a      	ldr	r2, [r3, #0]
100084da:	7c51      	ldrb	r1, [r2, #17]
100084dc:	685b      	ldr	r3, [r3, #4]
100084de:	7818      	ldrb	r0, [r3, #0]
100084e0:	466b      	mov	r3, sp
100084e2:	3307      	adds	r3, #7
100084e4:	2201      	movs	r2, #1
100084e6:	4c0a      	ldr	r4, [pc, #40]	; (10008510 <set_int_enable+0xa0>)
100084e8:	47a0      	blx	r4
100084ea:	2800      	cmp	r0, #0
100084ec:	d10a      	bne.n	10008504 <set_int_enable+0x94>
        return -1;
        st.chip_cfg.int_enable = tmp;
100084ee:	466b      	mov	r3, sp
100084f0:	79da      	ldrb	r2, [r3, #7]
100084f2:	4b06      	ldr	r3, [pc, #24]	; (1000850c <set_int_enable+0x9c>)
100084f4:	745a      	strb	r2, [r3, #17]
100084f6:	e007      	b.n	10008508 <set_int_enable+0x98>
        if (enable)
        tmp = BIT_DMP_INT_EN;
        else
        tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
        return -1;
100084f8:	2001      	movs	r0, #1
100084fa:	4240      	negs	r0, r0
100084fc:	e004      	b.n	10008508 <set_int_enable+0x98>
        st.chip_cfg.int_enable = tmp;
        } else {
        if (!st.chip_cfg.sensors)
        return -1;
100084fe:	2001      	movs	r0, #1
10008500:	4240      	negs	r0, r0
10008502:	e001      	b.n	10008508 <set_int_enable+0x98>
        if (enable)
        tmp = BIT_DATA_RDY_EN;
        else
        tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
        return -1;
10008504:	2001      	movs	r0, #1
10008506:	4240      	negs	r0, r0
        st.chip_cfg.int_enable = tmp;
    }
    return 0;
}
10008508:	b002      	add	sp, #8
1000850a:	bd10      	pop	{r4, pc}
1000850c:	100120bc 	.word	0x100120bc
10008510:	100083dd 	.word	0x100083dd

10008514 <mpu_reset_fifo>:
/**
*  @brief  Reset FIFO read/write pointers.
*  @return 0 if successful.
*/
int mpu_reset_fifo(void)
{
10008514:	b510      	push	{r4, lr}
10008516:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008518:	4b79      	ldr	r3, [pc, #484]	; (10008700 <mpu_reset_fifo+0x1ec>)
1000851a:	7a9b      	ldrb	r3, [r3, #10]
1000851c:	2b00      	cmp	r3, #0
1000851e:	d100      	bne.n	10008522 <mpu_reset_fifo+0xe>
10008520:	e0ce      	b.n	100086c0 <mpu_reset_fifo+0x1ac>
    return -1;

    data = 0;
10008522:	466b      	mov	r3, sp
10008524:	3307      	adds	r3, #7
10008526:	2200      	movs	r2, #0
10008528:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1000852a:	4a75      	ldr	r2, [pc, #468]	; (10008700 <mpu_reset_fifo+0x1ec>)
1000852c:	6811      	ldr	r1, [r2, #0]
1000852e:	7c49      	ldrb	r1, [r1, #17]
10008530:	6852      	ldr	r2, [r2, #4]
10008532:	7810      	ldrb	r0, [r2, #0]
10008534:	2201      	movs	r2, #1
10008536:	4c73      	ldr	r4, [pc, #460]	; (10008704 <mpu_reset_fifo+0x1f0>)
10008538:	47a0      	blx	r4
1000853a:	2800      	cmp	r0, #0
1000853c:	d000      	beq.n	10008540 <mpu_reset_fifo+0x2c>
1000853e:	e0c2      	b.n	100086c6 <mpu_reset_fifo+0x1b2>
    return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
10008540:	4b6f      	ldr	r3, [pc, #444]	; (10008700 <mpu_reset_fifo+0x1ec>)
10008542:	681a      	ldr	r2, [r3, #0]
10008544:	7951      	ldrb	r1, [r2, #5]
10008546:	685b      	ldr	r3, [r3, #4]
10008548:	7818      	ldrb	r0, [r3, #0]
1000854a:	466b      	mov	r3, sp
1000854c:	3307      	adds	r3, #7
1000854e:	2201      	movs	r2, #1
10008550:	4c6c      	ldr	r4, [pc, #432]	; (10008704 <mpu_reset_fifo+0x1f0>)
10008552:	47a0      	blx	r4
10008554:	2800      	cmp	r0, #0
10008556:	d000      	beq.n	1000855a <mpu_reset_fifo+0x46>
10008558:	e0b8      	b.n	100086cc <mpu_reset_fifo+0x1b8>
    return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000855a:	4b69      	ldr	r3, [pc, #420]	; (10008700 <mpu_reset_fifo+0x1ec>)
1000855c:	681a      	ldr	r2, [r3, #0]
1000855e:	7911      	ldrb	r1, [r2, #4]
10008560:	685b      	ldr	r3, [r3, #4]
10008562:	7818      	ldrb	r0, [r3, #0]
10008564:	466b      	mov	r3, sp
10008566:	3307      	adds	r3, #7
10008568:	2201      	movs	r2, #1
1000856a:	4c66      	ldr	r4, [pc, #408]	; (10008704 <mpu_reset_fifo+0x1f0>)
1000856c:	47a0      	blx	r4
1000856e:	2800      	cmp	r0, #0
10008570:	d000      	beq.n	10008574 <mpu_reset_fifo+0x60>
10008572:	e0ae      	b.n	100086d2 <mpu_reset_fifo+0x1be>
    return -1;

    if (st.chip_cfg.dmp_on) {
10008574:	2324      	movs	r3, #36	; 0x24
10008576:	4a62      	ldr	r2, [pc, #392]	; (10008700 <mpu_reset_fifo+0x1ec>)
10008578:	5cd3      	ldrb	r3, [r2, r3]
1000857a:	2b00      	cmp	r3, #0
1000857c:	d04f      	beq.n	1000861e <mpu_reset_fifo+0x10a>
        data = BIT_FIFO_RST | BIT_DMP_RST;
1000857e:	466b      	mov	r3, sp
10008580:	3307      	adds	r3, #7
10008582:	220c      	movs	r2, #12
10008584:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008586:	4a5e      	ldr	r2, [pc, #376]	; (10008700 <mpu_reset_fifo+0x1ec>)
10008588:	6811      	ldr	r1, [r2, #0]
1000858a:	7909      	ldrb	r1, [r1, #4]
1000858c:	6852      	ldr	r2, [r2, #4]
1000858e:	7810      	ldrb	r0, [r2, #0]
10008590:	2201      	movs	r2, #1
10008592:	4c5c      	ldr	r4, [pc, #368]	; (10008704 <mpu_reset_fifo+0x1f0>)
10008594:	47a0      	blx	r4
10008596:	2800      	cmp	r0, #0
10008598:	d000      	beq.n	1000859c <mpu_reset_fifo+0x88>
1000859a:	e09d      	b.n	100086d8 <mpu_reset_fifo+0x1c4>
        return -1;
        delay_ms(50);
1000859c:	3032      	adds	r0, #50	; 0x32
1000859e:	4b5a      	ldr	r3, [pc, #360]	; (10008708 <mpu_reset_fifo+0x1f4>)
100085a0:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
100085a2:	22c0      	movs	r2, #192	; 0xc0
100085a4:	466b      	mov	r3, sp
100085a6:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
100085a8:	4b55      	ldr	r3, [pc, #340]	; (10008700 <mpu_reset_fifo+0x1ec>)
100085aa:	7a9b      	ldrb	r3, [r3, #10]
100085ac:	07db      	lsls	r3, r3, #31
100085ae:	d502      	bpl.n	100085b6 <mpu_reset_fifo+0xa2>
        data |= BIT_AUX_IF_EN;
100085b0:	3220      	adds	r2, #32
100085b2:	466b      	mov	r3, sp
100085b4:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100085b6:	4b52      	ldr	r3, [pc, #328]	; (10008700 <mpu_reset_fifo+0x1ec>)
100085b8:	681a      	ldr	r2, [r3, #0]
100085ba:	7911      	ldrb	r1, [r2, #4]
100085bc:	685b      	ldr	r3, [r3, #4]
100085be:	7818      	ldrb	r0, [r3, #0]
100085c0:	466b      	mov	r3, sp
100085c2:	3307      	adds	r3, #7
100085c4:	2201      	movs	r2, #1
100085c6:	4c4f      	ldr	r4, [pc, #316]	; (10008704 <mpu_reset_fifo+0x1f0>)
100085c8:	47a0      	blx	r4
100085ca:	2800      	cmp	r0, #0
100085cc:	d000      	beq.n	100085d0 <mpu_reset_fifo+0xbc>
100085ce:	e086      	b.n	100086de <mpu_reset_fifo+0x1ca>
        return -1;
        if (st.chip_cfg.int_enable)
100085d0:	4b4b      	ldr	r3, [pc, #300]	; (10008700 <mpu_reset_fifo+0x1ec>)
100085d2:	7c5b      	ldrb	r3, [r3, #17]
100085d4:	2b00      	cmp	r3, #0
100085d6:	d003      	beq.n	100085e0 <mpu_reset_fifo+0xcc>
        data = BIT_DMP_INT_EN;
100085d8:	2202      	movs	r2, #2
100085da:	466b      	mov	r3, sp
100085dc:	71da      	strb	r2, [r3, #7]
100085de:	e002      	b.n	100085e6 <mpu_reset_fifo+0xd2>
        else
        data = 0;
100085e0:	2200      	movs	r2, #0
100085e2:	466b      	mov	r3, sp
100085e4:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
100085e6:	4b46      	ldr	r3, [pc, #280]	; (10008700 <mpu_reset_fifo+0x1ec>)
100085e8:	681a      	ldr	r2, [r3, #0]
100085ea:	7c51      	ldrb	r1, [r2, #17]
100085ec:	685b      	ldr	r3, [r3, #4]
100085ee:	7818      	ldrb	r0, [r3, #0]
100085f0:	466b      	mov	r3, sp
100085f2:	3307      	adds	r3, #7
100085f4:	2201      	movs	r2, #1
100085f6:	4c43      	ldr	r4, [pc, #268]	; (10008704 <mpu_reset_fifo+0x1f0>)
100085f8:	47a0      	blx	r4
100085fa:	2800      	cmp	r0, #0
100085fc:	d172      	bne.n	100086e4 <mpu_reset_fifo+0x1d0>
        return -1;
        data = 0;
100085fe:	466b      	mov	r3, sp
10008600:	3307      	adds	r3, #7
10008602:	2200      	movs	r2, #0
10008604:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
10008606:	4a3e      	ldr	r2, [pc, #248]	; (10008700 <mpu_reset_fifo+0x1ec>)
10008608:	6811      	ldr	r1, [r2, #0]
1000860a:	7949      	ldrb	r1, [r1, #5]
1000860c:	6852      	ldr	r2, [r2, #4]
1000860e:	7810      	ldrb	r0, [r2, #0]
10008610:	2201      	movs	r2, #1
10008612:	4c3c      	ldr	r4, [pc, #240]	; (10008704 <mpu_reset_fifo+0x1f0>)
10008614:	47a0      	blx	r4
10008616:	1e43      	subs	r3, r0, #1
10008618:	4198      	sbcs	r0, r3
1000861a:	4240      	negs	r0, r0
1000861c:	e06d      	b.n	100086fa <mpu_reset_fifo+0x1e6>
        return -1;
        } else {
        data = BIT_FIFO_RST;
1000861e:	466b      	mov	r3, sp
10008620:	3307      	adds	r3, #7
10008622:	2204      	movs	r2, #4
10008624:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008626:	4a36      	ldr	r2, [pc, #216]	; (10008700 <mpu_reset_fifo+0x1ec>)
10008628:	6811      	ldr	r1, [r2, #0]
1000862a:	7909      	ldrb	r1, [r1, #4]
1000862c:	6852      	ldr	r2, [r2, #4]
1000862e:	7810      	ldrb	r0, [r2, #0]
10008630:	2201      	movs	r2, #1
10008632:	4c34      	ldr	r4, [pc, #208]	; (10008704 <mpu_reset_fifo+0x1f0>)
10008634:	47a0      	blx	r4
10008636:	2800      	cmp	r0, #0
10008638:	d157      	bne.n	100086ea <mpu_reset_fifo+0x1d6>
        return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
1000863a:	4b31      	ldr	r3, [pc, #196]	; (10008700 <mpu_reset_fifo+0x1ec>)
1000863c:	7c9b      	ldrb	r3, [r3, #18]
1000863e:	2b00      	cmp	r3, #0
10008640:	d103      	bne.n	1000864a <mpu_reset_fifo+0x136>
10008642:	4b2f      	ldr	r3, [pc, #188]	; (10008700 <mpu_reset_fifo+0x1ec>)
10008644:	7a9b      	ldrb	r3, [r3, #10]
10008646:	07db      	lsls	r3, r3, #31
10008648:	d403      	bmi.n	10008652 <mpu_reset_fifo+0x13e>
        data = BIT_FIFO_EN;
1000864a:	2240      	movs	r2, #64	; 0x40
1000864c:	466b      	mov	r3, sp
1000864e:	71da      	strb	r2, [r3, #7]
10008650:	e002      	b.n	10008658 <mpu_reset_fifo+0x144>
        else
        data = BIT_FIFO_EN | BIT_AUX_IF_EN;
10008652:	2260      	movs	r2, #96	; 0x60
10008654:	466b      	mov	r3, sp
10008656:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008658:	4b29      	ldr	r3, [pc, #164]	; (10008700 <mpu_reset_fifo+0x1ec>)
1000865a:	681a      	ldr	r2, [r3, #0]
1000865c:	7911      	ldrb	r1, [r2, #4]
1000865e:	685b      	ldr	r3, [r3, #4]
10008660:	7818      	ldrb	r0, [r3, #0]
10008662:	466b      	mov	r3, sp
10008664:	3307      	adds	r3, #7
10008666:	2201      	movs	r2, #1
10008668:	4c26      	ldr	r4, [pc, #152]	; (10008704 <mpu_reset_fifo+0x1f0>)
1000866a:	47a0      	blx	r4
1000866c:	2800      	cmp	r0, #0
1000866e:	d13f      	bne.n	100086f0 <mpu_reset_fifo+0x1dc>
        return -1;
        delay_ms(50);
10008670:	3032      	adds	r0, #50	; 0x32
10008672:	4b25      	ldr	r3, [pc, #148]	; (10008708 <mpu_reset_fifo+0x1f4>)
10008674:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
10008676:	4b22      	ldr	r3, [pc, #136]	; (10008700 <mpu_reset_fifo+0x1ec>)
10008678:	7c5b      	ldrb	r3, [r3, #17]
1000867a:	2b00      	cmp	r3, #0
1000867c:	d003      	beq.n	10008686 <mpu_reset_fifo+0x172>
        data = BIT_DATA_RDY_EN;
1000867e:	2201      	movs	r2, #1
10008680:	466b      	mov	r3, sp
10008682:	71da      	strb	r2, [r3, #7]
10008684:	e002      	b.n	1000868c <mpu_reset_fifo+0x178>
        else
        data = 0;
10008686:	2200      	movs	r2, #0
10008688:	466b      	mov	r3, sp
1000868a:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1000868c:	4b1c      	ldr	r3, [pc, #112]	; (10008700 <mpu_reset_fifo+0x1ec>)
1000868e:	681a      	ldr	r2, [r3, #0]
10008690:	7c51      	ldrb	r1, [r2, #17]
10008692:	685b      	ldr	r3, [r3, #4]
10008694:	7818      	ldrb	r0, [r3, #0]
10008696:	466b      	mov	r3, sp
10008698:	3307      	adds	r3, #7
1000869a:	2201      	movs	r2, #1
1000869c:	4c19      	ldr	r4, [pc, #100]	; (10008704 <mpu_reset_fifo+0x1f0>)
1000869e:	47a0      	blx	r4
100086a0:	2800      	cmp	r0, #0
100086a2:	d128      	bne.n	100086f6 <mpu_reset_fifo+0x1e2>
        return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
100086a4:	4a16      	ldr	r2, [pc, #88]	; (10008700 <mpu_reset_fifo+0x1ec>)
100086a6:	0013      	movs	r3, r2
100086a8:	3310      	adds	r3, #16
100086aa:	6811      	ldr	r1, [r2, #0]
100086ac:	7949      	ldrb	r1, [r1, #5]
100086ae:	6852      	ldr	r2, [r2, #4]
100086b0:	7810      	ldrb	r0, [r2, #0]
100086b2:	2201      	movs	r2, #1
100086b4:	4c13      	ldr	r4, [pc, #76]	; (10008704 <mpu_reset_fifo+0x1f0>)
100086b6:	47a0      	blx	r4
100086b8:	1e43      	subs	r3, r0, #1
100086ba:	4198      	sbcs	r0, r3
100086bc:	4240      	negs	r0, r0
100086be:	e01c      	b.n	100086fa <mpu_reset_fifo+0x1e6>
int mpu_reset_fifo(void)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
    return -1;
100086c0:	2001      	movs	r0, #1
100086c2:	4240      	negs	r0, r0
100086c4:	e019      	b.n	100086fa <mpu_reset_fifo+0x1e6>

    data = 0;
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
    return -1;
100086c6:	2001      	movs	r0, #1
100086c8:	4240      	negs	r0, r0
100086ca:	e016      	b.n	100086fa <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
    return -1;
100086cc:	2001      	movs	r0, #1
100086ce:	4240      	negs	r0, r0
100086d0:	e013      	b.n	100086fa <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
    return -1;
100086d2:	2001      	movs	r0, #1
100086d4:	4240      	negs	r0, r0
100086d6:	e010      	b.n	100086fa <mpu_reset_fifo+0x1e6>

    if (st.chip_cfg.dmp_on) {
        data = BIT_FIFO_RST | BIT_DMP_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
        return -1;
100086d8:	2001      	movs	r0, #1
100086da:	4240      	negs	r0, r0
100086dc:	e00d      	b.n	100086fa <mpu_reset_fifo+0x1e6>
        delay_ms(50);
        data = BIT_DMP_EN | BIT_FIFO_EN;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
        data |= BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
        return -1;
100086de:	2001      	movs	r0, #1
100086e0:	4240      	negs	r0, r0
100086e2:	e00a      	b.n	100086fa <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
        data = BIT_DMP_INT_EN;
        else
        data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
        return -1;
100086e4:	2001      	movs	r0, #1
100086e6:	4240      	negs	r0, r0
100086e8:	e007      	b.n	100086fa <mpu_reset_fifo+0x1e6>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
        return -1;
        } else {
        data = BIT_FIFO_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
        return -1;
100086ea:	2001      	movs	r0, #1
100086ec:	4240      	negs	r0, r0
100086ee:	e004      	b.n	100086fa <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
        data = BIT_FIFO_EN;
        else
        data = BIT_FIFO_EN | BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
        return -1;
100086f0:	2001      	movs	r0, #1
100086f2:	4240      	negs	r0, r0
100086f4:	e001      	b.n	100086fa <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
        data = BIT_DATA_RDY_EN;
        else
        data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
        return -1;
100086f6:	2001      	movs	r0, #1
100086f8:	4240      	negs	r0, r0
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
        return -1;
    }
    return 0;
}
100086fa:	b002      	add	sp, #8
100086fc:	bd10      	pop	{r4, pc}
100086fe:	46c0      	nop			; (mov r8, r8)
10008700:	100120bc 	.word	0x100120bc
10008704:	100083dd 	.word	0x100083dd
10008708:	10008129 	.word	0x10008129

1000870c <mpu_set_gyro_fsr>:
*  @brief      Set the gyro full-scale range.
*  @param[in]  fsr Desired full-scale range.
*  @return     0 if successful.
*/
int mpu_set_gyro_fsr(unsigned short fsr)
{
1000870c:	b510      	push	{r4, lr}
1000870e:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008710:	4b24      	ldr	r3, [pc, #144]	; (100087a4 <mpu_set_gyro_fsr+0x98>)
10008712:	7a9b      	ldrb	r3, [r3, #10]
10008714:	2b00      	cmp	r3, #0
10008716:	d03b      	beq.n	10008790 <mpu_set_gyro_fsr+0x84>
    return -1;

    switch (fsr) {
10008718:	23fa      	movs	r3, #250	; 0xfa
1000871a:	005b      	lsls	r3, r3, #1
1000871c:	4298      	cmp	r0, r3
1000871e:	d010      	beq.n	10008742 <mpu_set_gyro_fsr+0x36>
10008720:	d802      	bhi.n	10008728 <mpu_set_gyro_fsr+0x1c>
10008722:	28fa      	cmp	r0, #250	; 0xfa
10008724:	d009      	beq.n	1000873a <mpu_set_gyro_fsr+0x2e>
10008726:	e036      	b.n	10008796 <mpu_set_gyro_fsr+0x8a>
10008728:	23fa      	movs	r3, #250	; 0xfa
1000872a:	009b      	lsls	r3, r3, #2
1000872c:	4298      	cmp	r0, r3
1000872e:	d00c      	beq.n	1000874a <mpu_set_gyro_fsr+0x3e>
10008730:	23fa      	movs	r3, #250	; 0xfa
10008732:	00db      	lsls	r3, r3, #3
10008734:	4298      	cmp	r0, r3
10008736:	d00c      	beq.n	10008752 <mpu_set_gyro_fsr+0x46>
10008738:	e02d      	b.n	10008796 <mpu_set_gyro_fsr+0x8a>
        case 250:
        data = INV_FSR_250DPS << 3;
1000873a:	2200      	movs	r2, #0
1000873c:	466b      	mov	r3, sp
1000873e:	71da      	strb	r2, [r3, #7]
        break;
10008740:	e00a      	b.n	10008758 <mpu_set_gyro_fsr+0x4c>
        case 500:
        data = INV_FSR_500DPS << 3;
10008742:	2208      	movs	r2, #8
10008744:	466b      	mov	r3, sp
10008746:	71da      	strb	r2, [r3, #7]
        break;
10008748:	e006      	b.n	10008758 <mpu_set_gyro_fsr+0x4c>
        case 1000:
        data = INV_FSR_1000DPS << 3;
1000874a:	2210      	movs	r2, #16
1000874c:	466b      	mov	r3, sp
1000874e:	71da      	strb	r2, [r3, #7]
        break;
10008750:	e002      	b.n	10008758 <mpu_set_gyro_fsr+0x4c>
        case 2000:
        data = INV_FSR_2000DPS << 3;
10008752:	2218      	movs	r2, #24
10008754:	466b      	mov	r3, sp
10008756:	71da      	strb	r2, [r3, #7]
        break;
        default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008758:	466b      	mov	r3, sp
1000875a:	3307      	adds	r3, #7
1000875c:	781b      	ldrb	r3, [r3, #0]
1000875e:	4a11      	ldr	r2, [pc, #68]	; (100087a4 <mpu_set_gyro_fsr+0x98>)
10008760:	7a12      	ldrb	r2, [r2, #8]
10008762:	08db      	lsrs	r3, r3, #3
    return 0;
10008764:	2000      	movs	r0, #0
        break;
        default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008766:	429a      	cmp	r2, r3
10008768:	d01a      	beq.n	100087a0 <mpu_set_gyro_fsr+0x94>
    return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
1000876a:	4b0e      	ldr	r3, [pc, #56]	; (100087a4 <mpu_set_gyro_fsr+0x98>)
1000876c:	681a      	ldr	r2, [r3, #0]
1000876e:	7991      	ldrb	r1, [r2, #6]
10008770:	685b      	ldr	r3, [r3, #4]
10008772:	7818      	ldrb	r0, [r3, #0]
10008774:	466b      	mov	r3, sp
10008776:	3307      	adds	r3, #7
10008778:	2201      	movs	r2, #1
1000877a:	4c0b      	ldr	r4, [pc, #44]	; (100087a8 <mpu_set_gyro_fsr+0x9c>)
1000877c:	47a0      	blx	r4
1000877e:	2800      	cmp	r0, #0
10008780:	d10c      	bne.n	1000879c <mpu_set_gyro_fsr+0x90>
    return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
10008782:	466b      	mov	r3, sp
10008784:	3307      	adds	r3, #7
10008786:	781b      	ldrb	r3, [r3, #0]
10008788:	08db      	lsrs	r3, r3, #3
1000878a:	4a06      	ldr	r2, [pc, #24]	; (100087a4 <mpu_set_gyro_fsr+0x98>)
1000878c:	7213      	strb	r3, [r2, #8]
    return 0;
1000878e:	e007      	b.n	100087a0 <mpu_set_gyro_fsr+0x94>
int mpu_set_gyro_fsr(unsigned short fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
    return -1;
10008790:	2001      	movs	r0, #1
10008792:	4240      	negs	r0, r0
10008794:	e004      	b.n	100087a0 <mpu_set_gyro_fsr+0x94>
        break;
        case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
        default:
        return -1;
10008796:	2001      	movs	r0, #1
10008798:	4240      	negs	r0, r0
1000879a:	e001      	b.n	100087a0 <mpu_set_gyro_fsr+0x94>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
    return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
    return -1;
1000879c:	2001      	movs	r0, #1
1000879e:	4240      	negs	r0, r0
    st.chip_cfg.gyro_fsr = data >> 3;
    return 0;
}
100087a0:	b002      	add	sp, #8
100087a2:	bd10      	pop	{r4, pc}
100087a4:	100120bc 	.word	0x100120bc
100087a8:	100083dd 	.word	0x100083dd

100087ac <mpu_set_accel_fsr>:
*  @brief      Set the accel full-scale range.
*  @param[in]  fsr Desired full-scale range.
*  @return     0 if successful.
*/
int mpu_set_accel_fsr(unsigned char fsr)
{
100087ac:	b510      	push	{r4, lr}
100087ae:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100087b0:	4b21      	ldr	r3, [pc, #132]	; (10008838 <mpu_set_accel_fsr+0x8c>)
100087b2:	7a9b      	ldrb	r3, [r3, #10]
100087b4:	2b00      	cmp	r3, #0
100087b6:	d035      	beq.n	10008824 <mpu_set_accel_fsr+0x78>
    return -1;

    switch (fsr) {
100087b8:	2804      	cmp	r0, #4
100087ba:	d00c      	beq.n	100087d6 <mpu_set_accel_fsr+0x2a>
100087bc:	d802      	bhi.n	100087c4 <mpu_set_accel_fsr+0x18>
100087be:	2802      	cmp	r0, #2
100087c0:	d005      	beq.n	100087ce <mpu_set_accel_fsr+0x22>
100087c2:	e032      	b.n	1000882a <mpu_set_accel_fsr+0x7e>
100087c4:	2808      	cmp	r0, #8
100087c6:	d00a      	beq.n	100087de <mpu_set_accel_fsr+0x32>
100087c8:	2810      	cmp	r0, #16
100087ca:	d00c      	beq.n	100087e6 <mpu_set_accel_fsr+0x3a>
100087cc:	e02d      	b.n	1000882a <mpu_set_accel_fsr+0x7e>
        case 2:
        data = INV_FSR_2G << 3;
100087ce:	2200      	movs	r2, #0
100087d0:	466b      	mov	r3, sp
100087d2:	71da      	strb	r2, [r3, #7]
        break;
100087d4:	e00a      	b.n	100087ec <mpu_set_accel_fsr+0x40>
        case 4:
        data = INV_FSR_4G << 3;
100087d6:	2208      	movs	r2, #8
100087d8:	466b      	mov	r3, sp
100087da:	71da      	strb	r2, [r3, #7]
        break;
100087dc:	e006      	b.n	100087ec <mpu_set_accel_fsr+0x40>
        case 8:
        data = INV_FSR_8G << 3;
100087de:	2210      	movs	r2, #16
100087e0:	466b      	mov	r3, sp
100087e2:	71da      	strb	r2, [r3, #7]
        break;
100087e4:	e002      	b.n	100087ec <mpu_set_accel_fsr+0x40>
        case 16:
        data = INV_FSR_16G << 3;
100087e6:	2218      	movs	r2, #24
100087e8:	466b      	mov	r3, sp
100087ea:	71da      	strb	r2, [r3, #7]
        break;
        default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
100087ec:	466b      	mov	r3, sp
100087ee:	3307      	adds	r3, #7
100087f0:	781b      	ldrb	r3, [r3, #0]
100087f2:	4a11      	ldr	r2, [pc, #68]	; (10008838 <mpu_set_accel_fsr+0x8c>)
100087f4:	7a52      	ldrb	r2, [r2, #9]
100087f6:	08db      	lsrs	r3, r3, #3
    return 0;
100087f8:	2000      	movs	r0, #0
        break;
        default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
100087fa:	429a      	cmp	r2, r3
100087fc:	d01a      	beq.n	10008834 <mpu_set_accel_fsr+0x88>
    return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
100087fe:	4b0e      	ldr	r3, [pc, #56]	; (10008838 <mpu_set_accel_fsr+0x8c>)
10008800:	681a      	ldr	r2, [r3, #0]
10008802:	79d1      	ldrb	r1, [r2, #7]
10008804:	685b      	ldr	r3, [r3, #4]
10008806:	7818      	ldrb	r0, [r3, #0]
10008808:	466b      	mov	r3, sp
1000880a:	3307      	adds	r3, #7
1000880c:	2201      	movs	r2, #1
1000880e:	4c0b      	ldr	r4, [pc, #44]	; (1000883c <mpu_set_accel_fsr+0x90>)
10008810:	47a0      	blx	r4
10008812:	2800      	cmp	r0, #0
10008814:	d10c      	bne.n	10008830 <mpu_set_accel_fsr+0x84>
    return -1;
    st.chip_cfg.accel_fsr = data >> 3;
10008816:	466b      	mov	r3, sp
10008818:	3307      	adds	r3, #7
1000881a:	781b      	ldrb	r3, [r3, #0]
1000881c:	08db      	lsrs	r3, r3, #3
1000881e:	4a06      	ldr	r2, [pc, #24]	; (10008838 <mpu_set_accel_fsr+0x8c>)
10008820:	7253      	strb	r3, [r2, #9]
    return 0;
10008822:	e007      	b.n	10008834 <mpu_set_accel_fsr+0x88>
int mpu_set_accel_fsr(unsigned char fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
    return -1;
10008824:	2001      	movs	r0, #1
10008826:	4240      	negs	r0, r0
10008828:	e004      	b.n	10008834 <mpu_set_accel_fsr+0x88>
        break;
        case 16:
        data = INV_FSR_16G << 3;
        break;
        default:
        return -1;
1000882a:	2001      	movs	r0, #1
1000882c:	4240      	negs	r0, r0
1000882e:	e001      	b.n	10008834 <mpu_set_accel_fsr+0x88>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
    return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
    return -1;
10008830:	2001      	movs	r0, #1
10008832:	4240      	negs	r0, r0
    st.chip_cfg.accel_fsr = data >> 3;
    return 0;
}
10008834:	b002      	add	sp, #8
10008836:	bd10      	pop	{r4, pc}
10008838:	100120bc 	.word	0x100120bc
1000883c:	100083dd 	.word	0x100083dd

10008840 <mpu_set_lpf>:
*  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
*  @param[in]  lpf Desired LPF setting.
*  @return     0 if successful.
*/
int mpu_set_lpf(unsigned short lpf)
{
10008840:	b510      	push	{r4, lr}
10008842:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008844:	4b22      	ldr	r3, [pc, #136]	; (100088d0 <mpu_set_lpf+0x90>)
10008846:	7a9b      	ldrb	r3, [r3, #10]
10008848:	2b00      	cmp	r3, #0
1000884a:	d039      	beq.n	100088c0 <mpu_set_lpf+0x80>
    return -1;

    if (lpf >= 188)
1000884c:	28bb      	cmp	r0, #187	; 0xbb
1000884e:	d903      	bls.n	10008858 <mpu_set_lpf+0x18>
    data = INV_FILTER_188HZ;
10008850:	2201      	movs	r2, #1
10008852:	466b      	mov	r3, sp
10008854:	71da      	strb	r2, [r3, #7]
10008856:	e01a      	b.n	1000888e <mpu_set_lpf+0x4e>
    else if (lpf >= 98)
10008858:	2861      	cmp	r0, #97	; 0x61
1000885a:	d903      	bls.n	10008864 <mpu_set_lpf+0x24>
    data = INV_FILTER_98HZ;
1000885c:	2202      	movs	r2, #2
1000885e:	466b      	mov	r3, sp
10008860:	71da      	strb	r2, [r3, #7]
10008862:	e014      	b.n	1000888e <mpu_set_lpf+0x4e>
    else if (lpf >= 42)
10008864:	2829      	cmp	r0, #41	; 0x29
10008866:	d903      	bls.n	10008870 <mpu_set_lpf+0x30>
    data = INV_FILTER_42HZ;
10008868:	2203      	movs	r2, #3
1000886a:	466b      	mov	r3, sp
1000886c:	71da      	strb	r2, [r3, #7]
1000886e:	e00e      	b.n	1000888e <mpu_set_lpf+0x4e>
    else if (lpf >= 20)
10008870:	2813      	cmp	r0, #19
10008872:	d903      	bls.n	1000887c <mpu_set_lpf+0x3c>
    data = INV_FILTER_20HZ;
10008874:	2204      	movs	r2, #4
10008876:	466b      	mov	r3, sp
10008878:	71da      	strb	r2, [r3, #7]
1000887a:	e008      	b.n	1000888e <mpu_set_lpf+0x4e>
    else if (lpf >= 10)
1000887c:	2809      	cmp	r0, #9
1000887e:	d903      	bls.n	10008888 <mpu_set_lpf+0x48>
    data = INV_FILTER_10HZ;
10008880:	2205      	movs	r2, #5
10008882:	466b      	mov	r3, sp
10008884:	71da      	strb	r2, [r3, #7]
10008886:	e002      	b.n	1000888e <mpu_set_lpf+0x4e>
    else
    data = INV_FILTER_5HZ;
10008888:	2206      	movs	r2, #6
1000888a:	466b      	mov	r3, sp
1000888c:	71da      	strb	r2, [r3, #7]

    if (st.chip_cfg.lpf == data)
1000888e:	4b10      	ldr	r3, [pc, #64]	; (100088d0 <mpu_set_lpf+0x90>)
10008890:	7ada      	ldrb	r2, [r3, #11]
10008892:	466b      	mov	r3, sp
10008894:	3307      	adds	r3, #7
10008896:	781b      	ldrb	r3, [r3, #0]
    return 0;
10008898:	2000      	movs	r0, #0
    else if (lpf >= 10)
    data = INV_FILTER_10HZ;
    else
    data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
1000889a:	429a      	cmp	r2, r3
1000889c:	d015      	beq.n	100088ca <mpu_set_lpf+0x8a>
    return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
1000889e:	4b0c      	ldr	r3, [pc, #48]	; (100088d0 <mpu_set_lpf+0x90>)
100088a0:	681a      	ldr	r2, [r3, #0]
100088a2:	7891      	ldrb	r1, [r2, #2]
100088a4:	685b      	ldr	r3, [r3, #4]
100088a6:	7818      	ldrb	r0, [r3, #0]
100088a8:	466b      	mov	r3, sp
100088aa:	3307      	adds	r3, #7
100088ac:	2201      	movs	r2, #1
100088ae:	4c09      	ldr	r4, [pc, #36]	; (100088d4 <mpu_set_lpf+0x94>)
100088b0:	47a0      	blx	r4
100088b2:	2800      	cmp	r0, #0
100088b4:	d107      	bne.n	100088c6 <mpu_set_lpf+0x86>
    return -1;
    st.chip_cfg.lpf = data;
100088b6:	466b      	mov	r3, sp
100088b8:	79da      	ldrb	r2, [r3, #7]
100088ba:	4b05      	ldr	r3, [pc, #20]	; (100088d0 <mpu_set_lpf+0x90>)
100088bc:	72da      	strb	r2, [r3, #11]
    return 0;
100088be:	e004      	b.n	100088ca <mpu_set_lpf+0x8a>
int mpu_set_lpf(unsigned short lpf)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
    return -1;
100088c0:	2001      	movs	r0, #1
100088c2:	4240      	negs	r0, r0
100088c4:	e001      	b.n	100088ca <mpu_set_lpf+0x8a>
    data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
    return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
    return -1;
100088c6:	2001      	movs	r0, #1
100088c8:	4240      	negs	r0, r0
    st.chip_cfg.lpf = data;
    return 0;
}
100088ca:	b002      	add	sp, #8
100088cc:	bd10      	pop	{r4, pc}
100088ce:	46c0      	nop			; (mov r8, r8)
100088d0:	100120bc 	.word	0x100120bc
100088d4:	100083dd 	.word	0x100083dd

100088d8 <mpu_set_compass_sample_rate>:
*  mpu_get_compass_sample_rate to check the actual setting.
*  @param[in]  rate    Desired compass sampling rate (Hz).
*  @return     0 if successful.
*/
int mpu_set_compass_sample_rate(unsigned short rate)
{
100088d8:	b530      	push	{r4, r5, lr}
100088da:	b083      	sub	sp, #12
100088dc:	1e01      	subs	r1, r0, #0
    #ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
100088de:	d020      	beq.n	10008922 <mpu_set_compass_sample_rate+0x4a>
100088e0:	4b17      	ldr	r3, [pc, #92]	; (10008940 <mpu_set_compass_sample_rate+0x68>)
100088e2:	89d8      	ldrh	r0, [r3, #14]
100088e4:	4281      	cmp	r1, r0
100088e6:	d81f      	bhi.n	10008928 <mpu_set_compass_sample_rate+0x50>
100088e8:	2964      	cmp	r1, #100	; 0x64
100088ea:	d820      	bhi.n	1000892e <mpu_set_compass_sample_rate+0x56>
    return -1;

    div = st.chip_cfg.sample_rate / rate - 1;
100088ec:	466b      	mov	r3, sp
100088ee:	1ddc      	adds	r4, r3, #7
100088f0:	4b14      	ldr	r3, [pc, #80]	; (10008944 <mpu_set_compass_sample_rate+0x6c>)
100088f2:	4798      	blx	r3
100088f4:	3801      	subs	r0, #1
100088f6:	7020      	strb	r0, [r4, #0]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
100088f8:	4b11      	ldr	r3, [pc, #68]	; (10008940 <mpu_set_compass_sample_rate+0x68>)
100088fa:	2224      	movs	r2, #36	; 0x24
100088fc:	6819      	ldr	r1, [r3, #0]
100088fe:	5c89      	ldrb	r1, [r1, r2]
10008900:	685b      	ldr	r3, [r3, #4]
10008902:	7818      	ldrb	r0, [r3, #0]
10008904:	0023      	movs	r3, r4
10008906:	3a23      	subs	r2, #35	; 0x23
10008908:	4c0f      	ldr	r4, [pc, #60]	; (10008948 <mpu_set_compass_sample_rate+0x70>)
1000890a:	47a0      	blx	r4
1000890c:	1e04      	subs	r4, r0, #0
1000890e:	d111      	bne.n	10008934 <mpu_set_compass_sample_rate+0x5c>
    return -1;
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
10008910:	4d0b      	ldr	r5, [pc, #44]	; (10008940 <mpu_set_compass_sample_rate+0x68>)
10008912:	89e8      	ldrh	r0, [r5, #14]
10008914:	466b      	mov	r3, sp
10008916:	79d9      	ldrb	r1, [r3, #7]
10008918:	3101      	adds	r1, #1
1000891a:	4b0c      	ldr	r3, [pc, #48]	; (1000894c <mpu_set_compass_sample_rate+0x74>)
1000891c:	4798      	blx	r3
1000891e:	8528      	strh	r0, [r5, #40]	; 0x28
    return 0;
10008920:	e00a      	b.n	10008938 <mpu_set_compass_sample_rate+0x60>
int mpu_set_compass_sample_rate(unsigned short rate)
{
    #ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
    return -1;
10008922:	2401      	movs	r4, #1
10008924:	4264      	negs	r4, r4
10008926:	e007      	b.n	10008938 <mpu_set_compass_sample_rate+0x60>
10008928:	2401      	movs	r4, #1
1000892a:	4264      	negs	r4, r4
1000892c:	e004      	b.n	10008938 <mpu_set_compass_sample_rate+0x60>
1000892e:	2401      	movs	r4, #1
10008930:	4264      	negs	r4, r4
10008932:	e001      	b.n	10008938 <mpu_set_compass_sample_rate+0x60>

    div = st.chip_cfg.sample_rate / rate - 1;
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
    return -1;
10008934:	2401      	movs	r4, #1
10008936:	4264      	negs	r4, r4
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
    return 0;
    #else
    return -1;
    #endif
}
10008938:	0020      	movs	r0, r4
1000893a:	b003      	add	sp, #12
1000893c:	bd30      	pop	{r4, r5, pc}
1000893e:	46c0      	nop			; (mov r8, r8)
10008940:	100120bc 	.word	0x100120bc
10008944:	1000ec75 	.word	0x1000ec75
10008948:	100083dd 	.word	0x100083dd
1000894c:	1000ed89 	.word	0x1000ed89

10008950 <mpu_configure_fifo>:
*  \n INV_XYZ_ACCEL
*  @param[in]  sensors Mask of sensors to push to FIFO.
*  @return     0 if successful.
*/
int mpu_configure_fifo(unsigned char sensors)
{
10008950:	b570      	push	{r4, r5, r6, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008952:	2324      	movs	r3, #36	; 0x24
10008954:	4a16      	ldr	r2, [pc, #88]	; (100089b0 <mpu_configure_fifo+0x60>)
10008956:	5cd3      	ldrb	r3, [r2, r3]
    return 0;
10008958:	2400      	movs	r4, #0
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
1000895a:	2b00      	cmp	r3, #0
1000895c:	d126      	bne.n	100089ac <mpu_configure_fifo+0x5c>
    return 0;
    else {
        if (!(st.chip_cfg.sensors))
1000895e:	7a94      	ldrb	r4, [r2, #10]
10008960:	2c00      	cmp	r4, #0
10008962:	d015      	beq.n	10008990 <mpu_configure_fifo+0x40>
{
    unsigned char prev;
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
10008964:	2301      	movs	r3, #1
10008966:	4398      	bics	r0, r3
    if (st.chip_cfg.dmp_on)
    return 0;
    else {
        if (!(st.chip_cfg.sensors))
        return -1;
        prev = st.chip_cfg.fifo_enable;
10008968:	7c15      	ldrb	r5, [r2, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
1000896a:	4004      	ands	r4, r0
1000896c:	7414      	strb	r4, [r2, #16]
        if (st.chip_cfg.fifo_enable != sensors)
1000896e:	1b04      	subs	r4, r0, r4
10008970:	1e63      	subs	r3, r4, #1
10008972:	419c      	sbcs	r4, r3
10008974:	4264      	negs	r4, r4
        * asleep.
        */
        result = -1;
        else
        result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
10008976:	2800      	cmp	r0, #0
10008978:	d10d      	bne.n	10008996 <mpu_configure_fifo+0x46>
1000897a:	7d13      	ldrb	r3, [r2, #20]
1000897c:	2b00      	cmp	r3, #0
1000897e:	d112      	bne.n	100089a6 <mpu_configure_fifo+0x56>
        set_int_enable(1);
        else
        set_int_enable(0);
10008980:	4b0c      	ldr	r3, [pc, #48]	; (100089b4 <mpu_configure_fifo+0x64>)
10008982:	4798      	blx	r3
10008984:	e012      	b.n	100089ac <mpu_configure_fifo+0x5c>
        if (sensors) {
            if (mpu_reset_fifo()) {
                st.chip_cfg.fifo_enable = prev;
10008986:	4b0a      	ldr	r3, [pc, #40]	; (100089b0 <mpu_configure_fifo+0x60>)
10008988:	741d      	strb	r5, [r3, #16]
                return -1;
1000898a:	2401      	movs	r4, #1
1000898c:	4264      	negs	r4, r4
1000898e:	e00d      	b.n	100089ac <mpu_configure_fifo+0x5c>

    if (st.chip_cfg.dmp_on)
    return 0;
    else {
        if (!(st.chip_cfg.sensors))
        return -1;
10008990:	2401      	movs	r4, #1
10008992:	4264      	negs	r4, r4
10008994:	e00a      	b.n	100089ac <mpu_configure_fifo+0x5c>
        */
        result = -1;
        else
        result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
        set_int_enable(1);
10008996:	2001      	movs	r0, #1
10008998:	4b06      	ldr	r3, [pc, #24]	; (100089b4 <mpu_configure_fifo+0x64>)
1000899a:	4798      	blx	r3
        else
        set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
1000899c:	4b06      	ldr	r3, [pc, #24]	; (100089b8 <mpu_configure_fifo+0x68>)
1000899e:	4798      	blx	r3
100089a0:	2800      	cmp	r0, #0
100089a2:	d003      	beq.n	100089ac <mpu_configure_fifo+0x5c>
100089a4:	e7ef      	b.n	10008986 <mpu_configure_fifo+0x36>
        */
        result = -1;
        else
        result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
        set_int_enable(1);
100089a6:	2001      	movs	r0, #1
100089a8:	4b02      	ldr	r3, [pc, #8]	; (100089b4 <mpu_configure_fifo+0x64>)
100089aa:	4798      	blx	r3
            }
        }
    }

    return result;
}
100089ac:	0020      	movs	r0, r4
100089ae:	bd70      	pop	{r4, r5, r6, pc}
100089b0:	100120bc 	.word	0x100120bc
100089b4:	10008471 	.word	0x10008471
100089b8:	10008515 	.word	0x10008515

100089bc <mpu_set_bypass>:
*  @brief      Set device to bypass mode.
*  @param[in]  bypass_on   1 to enable bypass mode.
*  @return     0 if successful.
*/
int mpu_set_bypass(unsigned char bypass_on)
{
100089bc:	b530      	push	{r4, r5, lr}
100089be:	b083      	sub	sp, #12
100089c0:	0004      	movs	r4, r0
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
100089c2:	4b59      	ldr	r3, [pc, #356]	; (10008b28 <mpu_set_bypass+0x16c>)
100089c4:	7c9b      	ldrb	r3, [r3, #18]
100089c6:	4283      	cmp	r3, r0
100089c8:	d100      	bne.n	100089cc <mpu_set_bypass+0x10>
100089ca:	e097      	b.n	10008afc <mpu_set_bypass+0x140>
    return 0;

    if (bypass_on) {
100089cc:	2800      	cmp	r0, #0
100089ce:	d042      	beq.n	10008a56 <mpu_set_bypass+0x9a>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
100089d0:	4b55      	ldr	r3, [pc, #340]	; (10008b28 <mpu_set_bypass+0x16c>)
100089d2:	681a      	ldr	r2, [r3, #0]
100089d4:	7911      	ldrb	r1, [r2, #4]
100089d6:	685b      	ldr	r3, [r3, #4]
100089d8:	7818      	ldrb	r0, [r3, #0]
100089da:	466b      	mov	r3, sp
100089dc:	3307      	adds	r3, #7
100089de:	2201      	movs	r2, #1
100089e0:	4d52      	ldr	r5, [pc, #328]	; (10008b2c <mpu_set_bypass+0x170>)
100089e2:	47a8      	blx	r5
100089e4:	2800      	cmp	r0, #0
100089e6:	d000      	beq.n	100089ea <mpu_set_bypass+0x2e>
100089e8:	e08a      	b.n	10008b00 <mpu_set_bypass+0x144>
        return -1;
        tmp &= ~BIT_AUX_IF_EN;
100089ea:	466b      	mov	r3, sp
100089ec:	3307      	adds	r3, #7
100089ee:	781a      	ldrb	r2, [r3, #0]
100089f0:	2120      	movs	r1, #32
100089f2:	438a      	bics	r2, r1
100089f4:	701a      	strb	r2, [r3, #0]
        //if(st.chip_cfg.spi_mode)
        //tmp |= 0x10;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
100089f6:	4a4c      	ldr	r2, [pc, #304]	; (10008b28 <mpu_set_bypass+0x16c>)
100089f8:	6811      	ldr	r1, [r2, #0]
100089fa:	7909      	ldrb	r1, [r1, #4]
100089fc:	6852      	ldr	r2, [r2, #4]
100089fe:	7810      	ldrb	r0, [r2, #0]
10008a00:	2201      	movs	r2, #1
10008a02:	4d4b      	ldr	r5, [pc, #300]	; (10008b30 <mpu_set_bypass+0x174>)
10008a04:	47a8      	blx	r5
10008a06:	2800      	cmp	r0, #0
10008a08:	d17d      	bne.n	10008b06 <mpu_set_bypass+0x14a>
        return -1;
        delay_ms(3);
10008a0a:	3003      	adds	r0, #3
10008a0c:	4b49      	ldr	r3, [pc, #292]	; (10008b34 <mpu_set_bypass+0x178>)
10008a0e:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
10008a10:	2202      	movs	r2, #2
10008a12:	466b      	mov	r3, sp
10008a14:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.active_low_int)
10008a16:	2322      	movs	r3, #34	; 0x22
10008a18:	4a43      	ldr	r2, [pc, #268]	; (10008b28 <mpu_set_bypass+0x16c>)
10008a1a:	5cd3      	ldrb	r3, [r2, r3]
10008a1c:	2b00      	cmp	r3, #0
10008a1e:	d002      	beq.n	10008a26 <mpu_set_bypass+0x6a>
        tmp |= BIT_ACTL;
10008a20:	2282      	movs	r2, #130	; 0x82
10008a22:	466b      	mov	r3, sp
10008a24:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008a26:	2323      	movs	r3, #35	; 0x23
10008a28:	4a3f      	ldr	r2, [pc, #252]	; (10008b28 <mpu_set_bypass+0x16c>)
10008a2a:	5cd3      	ldrb	r3, [r2, r3]
10008a2c:	2b00      	cmp	r3, #0
10008a2e:	d005      	beq.n	10008a3c <mpu_set_bypass+0x80>
        tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008a30:	466b      	mov	r3, sp
10008a32:	1dda      	adds	r2, r3, #7
10008a34:	79d9      	ldrb	r1, [r3, #7]
10008a36:	2330      	movs	r3, #48	; 0x30
10008a38:	430b      	orrs	r3, r1
10008a3a:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008a3c:	4b3a      	ldr	r3, [pc, #232]	; (10008b28 <mpu_set_bypass+0x16c>)
10008a3e:	681a      	ldr	r2, [r3, #0]
10008a40:	7dd1      	ldrb	r1, [r2, #23]
10008a42:	685b      	ldr	r3, [r3, #4]
10008a44:	7818      	ldrb	r0, [r3, #0]
10008a46:	466b      	mov	r3, sp
10008a48:	3307      	adds	r3, #7
10008a4a:	2201      	movs	r2, #1
10008a4c:	4d38      	ldr	r5, [pc, #224]	; (10008b30 <mpu_set_bypass+0x174>)
10008a4e:	47a8      	blx	r5
10008a50:	2800      	cmp	r0, #0
10008a52:	d04f      	beq.n	10008af4 <mpu_set_bypass+0x138>
10008a54:	e05a      	b.n	10008b0c <mpu_set_bypass+0x150>
        return -1;
    }
    else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008a56:	4b34      	ldr	r3, [pc, #208]	; (10008b28 <mpu_set_bypass+0x16c>)
10008a58:	681a      	ldr	r2, [r3, #0]
10008a5a:	7911      	ldrb	r1, [r2, #4]
10008a5c:	685b      	ldr	r3, [r3, #4]
10008a5e:	7818      	ldrb	r0, [r3, #0]
10008a60:	466b      	mov	r3, sp
10008a62:	3307      	adds	r3, #7
10008a64:	2201      	movs	r2, #1
10008a66:	4d31      	ldr	r5, [pc, #196]	; (10008b2c <mpu_set_bypass+0x170>)
10008a68:	47a8      	blx	r5
10008a6a:	2800      	cmp	r0, #0
10008a6c:	d151      	bne.n	10008b12 <mpu_set_bypass+0x156>
        return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008a6e:	4b2e      	ldr	r3, [pc, #184]	; (10008b28 <mpu_set_bypass+0x16c>)
10008a70:	7a9b      	ldrb	r3, [r3, #10]
10008a72:	07db      	lsls	r3, r3, #31
10008a74:	d506      	bpl.n	10008a84 <mpu_set_bypass+0xc8>
        tmp |= BIT_AUX_IF_EN;
10008a76:	466b      	mov	r3, sp
10008a78:	1dda      	adds	r2, r3, #7
10008a7a:	79d9      	ldrb	r1, [r3, #7]
10008a7c:	2320      	movs	r3, #32
10008a7e:	430b      	orrs	r3, r1
10008a80:	7013      	strb	r3, [r2, #0]
10008a82:	e005      	b.n	10008a90 <mpu_set_bypass+0xd4>
        else
        tmp &= ~BIT_AUX_IF_EN;
10008a84:	466b      	mov	r3, sp
10008a86:	1dda      	adds	r2, r3, #7
10008a88:	79db      	ldrb	r3, [r3, #7]
10008a8a:	2120      	movs	r1, #32
10008a8c:	438b      	bics	r3, r1
10008a8e:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008a90:	4b25      	ldr	r3, [pc, #148]	; (10008b28 <mpu_set_bypass+0x16c>)
10008a92:	681a      	ldr	r2, [r3, #0]
10008a94:	7911      	ldrb	r1, [r2, #4]
10008a96:	685b      	ldr	r3, [r3, #4]
10008a98:	7818      	ldrb	r0, [r3, #0]
10008a9a:	466b      	mov	r3, sp
10008a9c:	3307      	adds	r3, #7
10008a9e:	2201      	movs	r2, #1
10008aa0:	4d23      	ldr	r5, [pc, #140]	; (10008b30 <mpu_set_bypass+0x174>)
10008aa2:	47a8      	blx	r5
10008aa4:	2800      	cmp	r0, #0
10008aa6:	d137      	bne.n	10008b18 <mpu_set_bypass+0x15c>
        return -1;
        delay_ms(3);
10008aa8:	3003      	adds	r0, #3
10008aaa:	4b22      	ldr	r3, [pc, #136]	; (10008b34 <mpu_set_bypass+0x178>)
10008aac:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
10008aae:	2322      	movs	r3, #34	; 0x22
10008ab0:	4a1d      	ldr	r2, [pc, #116]	; (10008b28 <mpu_set_bypass+0x16c>)
10008ab2:	5cd3      	ldrb	r3, [r2, r3]
10008ab4:	2b00      	cmp	r3, #0
10008ab6:	d003      	beq.n	10008ac0 <mpu_set_bypass+0x104>
        tmp = BIT_ACTL;
10008ab8:	2280      	movs	r2, #128	; 0x80
10008aba:	466b      	mov	r3, sp
10008abc:	71da      	strb	r2, [r3, #7]
10008abe:	e002      	b.n	10008ac6 <mpu_set_bypass+0x10a>
        else
        tmp = 0;
10008ac0:	2200      	movs	r2, #0
10008ac2:	466b      	mov	r3, sp
10008ac4:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008ac6:	2323      	movs	r3, #35	; 0x23
10008ac8:	4a17      	ldr	r2, [pc, #92]	; (10008b28 <mpu_set_bypass+0x16c>)
10008aca:	5cd3      	ldrb	r3, [r2, r3]
10008acc:	2b00      	cmp	r3, #0
10008ace:	d005      	beq.n	10008adc <mpu_set_bypass+0x120>
        tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008ad0:	466b      	mov	r3, sp
10008ad2:	1dda      	adds	r2, r3, #7
10008ad4:	79d9      	ldrb	r1, [r3, #7]
10008ad6:	2330      	movs	r3, #48	; 0x30
10008ad8:	430b      	orrs	r3, r1
10008ada:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008adc:	4b12      	ldr	r3, [pc, #72]	; (10008b28 <mpu_set_bypass+0x16c>)
10008ade:	681a      	ldr	r2, [r3, #0]
10008ae0:	7dd1      	ldrb	r1, [r2, #23]
10008ae2:	685b      	ldr	r3, [r3, #4]
10008ae4:	7818      	ldrb	r0, [r3, #0]
10008ae6:	466b      	mov	r3, sp
10008ae8:	3307      	adds	r3, #7
10008aea:	2201      	movs	r2, #1
10008aec:	4d10      	ldr	r5, [pc, #64]	; (10008b30 <mpu_set_bypass+0x174>)
10008aee:	47a8      	blx	r5
10008af0:	2800      	cmp	r0, #0
10008af2:	d114      	bne.n	10008b1e <mpu_set_bypass+0x162>
        return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
10008af4:	4b0c      	ldr	r3, [pc, #48]	; (10008b28 <mpu_set_bypass+0x16c>)
10008af6:	749c      	strb	r4, [r3, #18]
    return 0;
10008af8:	2000      	movs	r0, #0
10008afa:	e012      	b.n	10008b22 <mpu_set_bypass+0x166>
int mpu_set_bypass(unsigned char bypass_on)
{
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
    return 0;
10008afc:	2000      	movs	r0, #0
10008afe:	e010      	b.n	10008b22 <mpu_set_bypass+0x166>

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
        return -1;
10008b00:	2001      	movs	r0, #1
10008b02:	4240      	negs	r0, r0
10008b04:	e00d      	b.n	10008b22 <mpu_set_bypass+0x166>
        tmp &= ~BIT_AUX_IF_EN;
        //if(st.chip_cfg.spi_mode)
        //tmp |= 0x10;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
        return -1;
10008b06:	2001      	movs	r0, #1
10008b08:	4240      	negs	r0, r0
10008b0a:	e00a      	b.n	10008b22 <mpu_set_bypass+0x166>
        if (st.chip_cfg.active_low_int)
        tmp |= BIT_ACTL;
        if (st.chip_cfg.latched_int)
        tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
        return -1;
10008b0c:	2001      	movs	r0, #1
10008b0e:	4240      	negs	r0, r0
10008b10:	e007      	b.n	10008b22 <mpu_set_bypass+0x166>
    }
    else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
        return -1;
10008b12:	2001      	movs	r0, #1
10008b14:	4240      	negs	r0, r0
10008b16:	e004      	b.n	10008b22 <mpu_set_bypass+0x166>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
        tmp |= BIT_AUX_IF_EN;
        else
        tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
        return -1;
10008b18:	2001      	movs	r0, #1
10008b1a:	4240      	negs	r0, r0
10008b1c:	e001      	b.n	10008b22 <mpu_set_bypass+0x166>
        else
        tmp = 0;
        if (st.chip_cfg.latched_int)
        tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
        return -1;
10008b1e:	2001      	movs	r0, #1
10008b20:	4240      	negs	r0, r0
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
}
10008b22:	b003      	add	sp, #12
10008b24:	bd30      	pop	{r4, r5, pc}
10008b26:	46c0      	nop			; (mov r8, r8)
10008b28:	100120bc 	.word	0x100120bc
10008b2c:	10008309 	.word	0x10008309
10008b30:	100083dd 	.word	0x100083dd
10008b34:	10008129 	.word	0x10008129

10008b38 <mpu_set_int_latched>:
*  Any MPU register will clear the interrupt.
*  @param[in]  enable  1 to enable, 0 to disable.
*  @return     0 if successful.
*/
int mpu_set_int_latched(unsigned char enable)
{
10008b38:	b530      	push	{r4, r5, lr}
10008b3a:	b083      	sub	sp, #12
10008b3c:	0004      	movs	r4, r0
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008b3e:	2323      	movs	r3, #35	; 0x23
10008b40:	4a1c      	ldr	r2, [pc, #112]	; (10008bb4 <mpu_set_int_latched+0x7c>)
10008b42:	5cd3      	ldrb	r3, [r2, r3]
10008b44:	4283      	cmp	r3, r0
10008b46:	d02e      	beq.n	10008ba6 <mpu_set_int_latched+0x6e>
    return 0;

    if (enable)
10008b48:	2800      	cmp	r0, #0
10008b4a:	d003      	beq.n	10008b54 <mpu_set_int_latched+0x1c>
    tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008b4c:	2230      	movs	r2, #48	; 0x30
10008b4e:	466b      	mov	r3, sp
10008b50:	71da      	strb	r2, [r3, #7]
10008b52:	e002      	b.n	10008b5a <mpu_set_int_latched+0x22>
    else
    tmp = 0;
10008b54:	2200      	movs	r2, #0
10008b56:	466b      	mov	r3, sp
10008b58:	71da      	strb	r2, [r3, #7]
    if (st.chip_cfg.bypass_mode)
10008b5a:	4b16      	ldr	r3, [pc, #88]	; (10008bb4 <mpu_set_int_latched+0x7c>)
10008b5c:	7c9b      	ldrb	r3, [r3, #18]
10008b5e:	2b00      	cmp	r3, #0
10008b60:	d005      	beq.n	10008b6e <mpu_set_int_latched+0x36>
    tmp |= BIT_BYPASS_EN;
10008b62:	466b      	mov	r3, sp
10008b64:	1dda      	adds	r2, r3, #7
10008b66:	79d9      	ldrb	r1, [r3, #7]
10008b68:	2302      	movs	r3, #2
10008b6a:	430b      	orrs	r3, r1
10008b6c:	7013      	strb	r3, [r2, #0]
    if (st.chip_cfg.active_low_int)
10008b6e:	2322      	movs	r3, #34	; 0x22
10008b70:	4a10      	ldr	r2, [pc, #64]	; (10008bb4 <mpu_set_int_latched+0x7c>)
10008b72:	5cd3      	ldrb	r3, [r2, r3]
10008b74:	2b00      	cmp	r3, #0
10008b76:	d006      	beq.n	10008b86 <mpu_set_int_latched+0x4e>
    tmp |= BIT_ACTL;
10008b78:	466b      	mov	r3, sp
10008b7a:	1dda      	adds	r2, r3, #7
10008b7c:	79db      	ldrb	r3, [r3, #7]
10008b7e:	2180      	movs	r1, #128	; 0x80
10008b80:	4249      	negs	r1, r1
10008b82:	430b      	orrs	r3, r1
10008b84:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008b86:	4b0b      	ldr	r3, [pc, #44]	; (10008bb4 <mpu_set_int_latched+0x7c>)
10008b88:	681a      	ldr	r2, [r3, #0]
10008b8a:	7dd1      	ldrb	r1, [r2, #23]
10008b8c:	685b      	ldr	r3, [r3, #4]
10008b8e:	7818      	ldrb	r0, [r3, #0]
10008b90:	466b      	mov	r3, sp
10008b92:	3307      	adds	r3, #7
10008b94:	2201      	movs	r2, #1
10008b96:	4d08      	ldr	r5, [pc, #32]	; (10008bb8 <mpu_set_int_latched+0x80>)
10008b98:	47a8      	blx	r5
10008b9a:	2800      	cmp	r0, #0
10008b9c:	d105      	bne.n	10008baa <mpu_set_int_latched+0x72>
    return -1;
    st.chip_cfg.latched_int = enable;
10008b9e:	2323      	movs	r3, #35	; 0x23
10008ba0:	4a04      	ldr	r2, [pc, #16]	; (10008bb4 <mpu_set_int_latched+0x7c>)
10008ba2:	54d4      	strb	r4, [r2, r3]
    return 0;
10008ba4:	e003      	b.n	10008bae <mpu_set_int_latched+0x76>
*/
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
    return 0;
10008ba6:	2000      	movs	r0, #0
10008ba8:	e001      	b.n	10008bae <mpu_set_int_latched+0x76>
    if (st.chip_cfg.bypass_mode)
    tmp |= BIT_BYPASS_EN;
    if (st.chip_cfg.active_low_int)
    tmp |= BIT_ACTL;
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
    return -1;
10008baa:	2001      	movs	r0, #1
10008bac:	4240      	negs	r0, r0
    st.chip_cfg.latched_int = enable;
    return 0;
}
10008bae:	b003      	add	sp, #12
10008bb0:	bd30      	pop	{r4, r5, pc}
10008bb2:	46c0      	nop			; (mov r8, r8)
10008bb4:	100120bc 	.word	0x100120bc
10008bb8:	100083dd 	.word	0x100083dd

10008bbc <mpu_lp_accel_mode>:
*  @param[in]  rate        Minimum sampling rate, or zero to disable LP
*                          accel mode.
*  @return     0 if successful.
*/
int mpu_lp_accel_mode(unsigned short rate)
{
10008bbc:	b510      	push	{r4, lr}
10008bbe:	b082      	sub	sp, #8
    unsigned char tmp[2];

    if (rate > 40)
10008bc0:	2828      	cmp	r0, #40	; 0x28
10008bc2:	d825      	bhi.n	10008c10 <mpu_lp_accel_mode+0x54>
    return -1;

    if (!rate) {
10008bc4:	2800      	cmp	r0, #0
10008bc6:	d114      	bne.n	10008bf2 <mpu_lp_accel_mode+0x36>
        mpu_set_int_latched(0);
10008bc8:	4b15      	ldr	r3, [pc, #84]	; (10008c20 <mpu_lp_accel_mode+0x64>)
10008bca:	4798      	blx	r3
        tmp[0] = 0;
10008bcc:	ab01      	add	r3, sp, #4
10008bce:	2200      	movs	r2, #0
10008bd0:	701a      	strb	r2, [r3, #0]
        tmp[1] = BIT_STBY_XYZG;
10008bd2:	3207      	adds	r2, #7
10008bd4:	705a      	strb	r2, [r3, #1]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008bd6:	4a13      	ldr	r2, [pc, #76]	; (10008c24 <mpu_lp_accel_mode+0x68>)
10008bd8:	6811      	ldr	r1, [r2, #0]
10008bda:	7d49      	ldrb	r1, [r1, #21]
10008bdc:	6852      	ldr	r2, [r2, #4]
10008bde:	7810      	ldrb	r0, [r2, #0]
10008be0:	2202      	movs	r2, #2
10008be2:	4c11      	ldr	r4, [pc, #68]	; (10008c28 <mpu_lp_accel_mode+0x6c>)
10008be4:	47a0      	blx	r4
10008be6:	2800      	cmp	r0, #0
10008be8:	d115      	bne.n	10008c16 <mpu_lp_accel_mode+0x5a>
        return -1;
        st.chip_cfg.lp_accel_mode = 0;
10008bea:	2200      	movs	r2, #0
10008bec:	4b0d      	ldr	r3, [pc, #52]	; (10008c24 <mpu_lp_accel_mode+0x68>)
10008bee:	751a      	strb	r2, [r3, #20]
        return 0;
10008bf0:	e013      	b.n	10008c1a <mpu_lp_accel_mode+0x5e>
    * it gets a chance to deassert the interrupt pin; therefore, we shift this
    * responsibility over to the MCU.
    *
    * Any register read will clear the interrupt.
    */
    mpu_set_int_latched(1);
10008bf2:	2001      	movs	r0, #1
10008bf4:	4b0a      	ldr	r3, [pc, #40]	; (10008c20 <mpu_lp_accel_mode+0x64>)
10008bf6:	4798      	blx	r3
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
10008bf8:	4b0a      	ldr	r3, [pc, #40]	; (10008c24 <mpu_lp_accel_mode+0x68>)
10008bfa:	2208      	movs	r2, #8
10008bfc:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
10008bfe:	2200      	movs	r2, #0
10008c00:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
10008c02:	3201      	adds	r2, #1
10008c04:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
10008c06:	2000      	movs	r0, #0
10008c08:	4b08      	ldr	r3, [pc, #32]	; (10008c2c <mpu_lp_accel_mode+0x70>)
10008c0a:	4798      	blx	r3

    return 0;
10008c0c:	2000      	movs	r0, #0
10008c0e:	e004      	b.n	10008c1a <mpu_lp_accel_mode+0x5e>
int mpu_lp_accel_mode(unsigned short rate)
{
    unsigned char tmp[2];

    if (rate > 40)
    return -1;
10008c10:	2001      	movs	r0, #1
10008c12:	4240      	negs	r0, r0
10008c14:	e001      	b.n	10008c1a <mpu_lp_accel_mode+0x5e>
    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
10008c16:	2001      	movs	r0, #1
10008c18:	4240      	negs	r0, r0
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
    mpu_configure_fifo(0);

    return 0;
}
10008c1a:	b002      	add	sp, #8
10008c1c:	bd10      	pop	{r4, pc}
10008c1e:	46c0      	nop			; (mov r8, r8)
10008c20:	10008b39 	.word	0x10008b39
10008c24:	100120bc 	.word	0x100120bc
10008c28:	100083dd 	.word	0x100083dd
10008c2c:	10008951 	.word	0x10008951

10008c30 <mpu_set_sample_rate>:
*  Sampling rate must be between 4Hz and 1kHz.
*  @param[in]  rate    Desired sampling rate (Hz).
*  @return     0 if successful.
*/
int mpu_set_sample_rate(unsigned short rate)
{
10008c30:	b530      	push	{r4, r5, lr}
10008c32:	b083      	sub	sp, #12
10008c34:	0004      	movs	r4, r0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008c36:	4b32      	ldr	r3, [pc, #200]	; (10008d00 <mpu_set_sample_rate+0xd0>)
10008c38:	7a9b      	ldrb	r3, [r3, #10]
10008c3a:	2b00      	cmp	r3, #0
10008c3c:	d057      	beq.n	10008cee <mpu_set_sample_rate+0xbe>
    return -1;

    if (st.chip_cfg.dmp_on) {
10008c3e:	2324      	movs	r3, #36	; 0x24
10008c40:	4a2f      	ldr	r2, [pc, #188]	; (10008d00 <mpu_set_sample_rate+0xd0>)
10008c42:	5cd3      	ldrb	r3, [r2, r3]
10008c44:	2b00      	cmp	r3, #0
10008c46:	d155      	bne.n	10008cf4 <mpu_set_sample_rate+0xc4>
        return -1;
    }        
    else {
        if (st.chip_cfg.lp_accel_mode) {
10008c48:	7d13      	ldrb	r3, [r2, #20]
10008c4a:	2b00      	cmp	r3, #0
10008c4c:	d00a      	beq.n	10008c64 <mpu_set_sample_rate+0x34>
            if (rate && (rate <= 40)) {
10008c4e:	1e43      	subs	r3, r0, #1
10008c50:	b29b      	uxth	r3, r3
10008c52:	2b27      	cmp	r3, #39	; 0x27
10008c54:	d803      	bhi.n	10008c5e <mpu_set_sample_rate+0x2e>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
10008c56:	4b2b      	ldr	r3, [pc, #172]	; (10008d04 <mpu_set_sample_rate+0xd4>)
10008c58:	4798      	blx	r3
                return 0;
10008c5a:	2400      	movs	r4, #0
10008c5c:	e04c      	b.n	10008cf8 <mpu_set_sample_rate+0xc8>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode, switch back to full-power mode */
            mpu_lp_accel_mode(0);
10008c5e:	2000      	movs	r0, #0
10008c60:	4b28      	ldr	r3, [pc, #160]	; (10008d04 <mpu_set_sample_rate+0xd4>)
10008c62:	4798      	blx	r3
        }
        if (rate < 4)
        rate = 4;
10008c64:	2104      	movs	r1, #4
                return 0;
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode, switch back to full-power mode */
            mpu_lp_accel_mode(0);
        }
        if (rate < 4)
10008c66:	2c03      	cmp	r4, #3
10008c68:	d907      	bls.n	10008c7a <mpu_set_sample_rate+0x4a>
10008c6a:	1c21      	adds	r1, r4, #0
10008c6c:	23fa      	movs	r3, #250	; 0xfa
10008c6e:	009b      	lsls	r3, r3, #2
10008c70:	429c      	cmp	r4, r3
10008c72:	d901      	bls.n	10008c78 <mpu_set_sample_rate+0x48>
10008c74:	4b24      	ldr	r3, [pc, #144]	; (10008d08 <mpu_set_sample_rate+0xd8>)
10008c76:	8819      	ldrh	r1, [r3, #0]
10008c78:	b289      	uxth	r1, r1
        rate = 4;
        else if (rate > 1000)
        rate = 1000;

        data = 1000 / rate - 1;
10008c7a:	466b      	mov	r3, sp
10008c7c:	1ddc      	adds	r4, r3, #7
10008c7e:	20fa      	movs	r0, #250	; 0xfa
10008c80:	0080      	lsls	r0, r0, #2
10008c82:	4b22      	ldr	r3, [pc, #136]	; (10008d0c <mpu_set_sample_rate+0xdc>)
10008c84:	4798      	blx	r3
10008c86:	3801      	subs	r0, #1
10008c88:	7020      	strb	r0, [r4, #0]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data)) {
10008c8a:	4b1d      	ldr	r3, [pc, #116]	; (10008d00 <mpu_set_sample_rate+0xd0>)
10008c8c:	681a      	ldr	r2, [r3, #0]
10008c8e:	7851      	ldrb	r1, [r2, #1]
10008c90:	685b      	ldr	r3, [r3, #4]
10008c92:	7818      	ldrb	r0, [r3, #0]
10008c94:	0023      	movs	r3, r4
10008c96:	2201      	movs	r2, #1
10008c98:	4c1d      	ldr	r4, [pc, #116]	; (10008d10 <mpu_set_sample_rate+0xe0>)
10008c9a:	47a0      	blx	r4
10008c9c:	1e04      	subs	r4, r0, #0
10008c9e:	d008      	beq.n	10008cb2 <mpu_set_sample_rate+0x82>
            DBG_LOG("-1...");
10008ca0:	481c      	ldr	r0, [pc, #112]	; (10008d14 <mpu_set_sample_rate+0xe4>)
10008ca2:	4b1d      	ldr	r3, [pc, #116]	; (10008d18 <mpu_set_sample_rate+0xe8>)
10008ca4:	4798      	blx	r3
10008ca6:	481d      	ldr	r0, [pc, #116]	; (10008d1c <mpu_set_sample_rate+0xec>)
10008ca8:	4b1d      	ldr	r3, [pc, #116]	; (10008d20 <mpu_set_sample_rate+0xf0>)
10008caa:	4798      	blx	r3
            return -1;
10008cac:	2401      	movs	r4, #1
10008cae:	4264      	negs	r4, r4
10008cb0:	e022      	b.n	10008cf8 <mpu_set_sample_rate+0xc8>
        }            

        st.chip_cfg.sample_rate = 1000 / (1 + data);
10008cb2:	4d13      	ldr	r5, [pc, #76]	; (10008d00 <mpu_set_sample_rate+0xd0>)
10008cb4:	466b      	mov	r3, sp
10008cb6:	79d9      	ldrb	r1, [r3, #7]
10008cb8:	3101      	adds	r1, #1
10008cba:	20fa      	movs	r0, #250	; 0xfa
10008cbc:	0080      	lsls	r0, r0, #2
10008cbe:	4b13      	ldr	r3, [pc, #76]	; (10008d0c <mpu_set_sample_rate+0xdc>)
10008cc0:	4798      	blx	r3
10008cc2:	81e8      	strh	r0, [r5, #14]

        #ifdef AK89xx_SECONDARY
        DBG_LOG("Compass sample rate");
10008cc4:	4813      	ldr	r0, [pc, #76]	; (10008d14 <mpu_set_sample_rate+0xe4>)
10008cc6:	4b14      	ldr	r3, [pc, #80]	; (10008d18 <mpu_set_sample_rate+0xe8>)
10008cc8:	4798      	blx	r3
10008cca:	4816      	ldr	r0, [pc, #88]	; (10008d24 <mpu_set_sample_rate+0xf4>)
10008ccc:	4b14      	ldr	r3, [pc, #80]	; (10008d20 <mpu_set_sample_rate+0xf0>)
10008cce:	4798      	blx	r3
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10008cd0:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
10008cd2:	1c18      	adds	r0, r3, #0
10008cd4:	b29b      	uxth	r3, r3
10008cd6:	2b64      	cmp	r3, #100	; 0x64
10008cd8:	d900      	bls.n	10008cdc <mpu_set_sample_rate+0xac>
10008cda:	2064      	movs	r0, #100	; 0x64
10008cdc:	b280      	uxth	r0, r0
10008cde:	4b12      	ldr	r3, [pc, #72]	; (10008d28 <mpu_set_sample_rate+0xf8>)
10008ce0:	4798      	blx	r3
        #endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
10008ce2:	4b07      	ldr	r3, [pc, #28]	; (10008d00 <mpu_set_sample_rate+0xd0>)
10008ce4:	89d8      	ldrh	r0, [r3, #14]
10008ce6:	0840      	lsrs	r0, r0, #1
10008ce8:	4b10      	ldr	r3, [pc, #64]	; (10008d2c <mpu_set_sample_rate+0xfc>)
10008cea:	4798      	blx	r3
        return 0;
10008cec:	e004      	b.n	10008cf8 <mpu_set_sample_rate+0xc8>
int mpu_set_sample_rate(unsigned short rate)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
    return -1;
10008cee:	2401      	movs	r4, #1
10008cf0:	4264      	negs	r4, r4
10008cf2:	e001      	b.n	10008cf8 <mpu_set_sample_rate+0xc8>

    if (st.chip_cfg.dmp_on) {
        return -1;
10008cf4:	2401      	movs	r4, #1
10008cf6:	4264      	negs	r4, r4

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
        return 0;
    }
}
10008cf8:	0020      	movs	r0, r4
10008cfa:	b003      	add	sp, #12
10008cfc:	bd30      	pop	{r4, r5, pc}
10008cfe:	46c0      	nop			; (mov r8, r8)
10008d00:	100120bc 	.word	0x100120bc
10008d04:	10008bbd 	.word	0x10008bbd
10008d08:	10011178 	.word	0x10011178
10008d0c:	1000ed89 	.word	0x1000ed89
10008d10:	100083dd 	.word	0x100083dd
10008d14:	100112b0 	.word	0x100112b0
10008d18:	100100ed 	.word	0x100100ed
10008d1c:	100112c0 	.word	0x100112c0
10008d20:	1000ffcd 	.word	0x1000ffcd
10008d24:	100112c8 	.word	0x100112c8
10008d28:	100088d9 	.word	0x100088d9
10008d2c:	10008841 	.word	0x10008841

10008d30 <mpu_set_sensors>:
*  \n INV_XYZ_COMPASS
*  @param[in]  sensors    Mask of sensors to wake.
*  @return     0 if successful.
*/
int mpu_set_sensors(unsigned char sensors)
{
10008d30:	b530      	push	{r4, r5, lr}
10008d32:	b083      	sub	sp, #12
10008d34:	0004      	movs	r4, r0
    unsigned char data;
    #ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
    #endif

    if (sensors & INV_XYZ_GYRO)
10008d36:	2370      	movs	r3, #112	; 0x70
10008d38:	4203      	tst	r3, r0
10008d3a:	d003      	beq.n	10008d44 <mpu_set_sensors+0x14>
    data = INV_CLK_PLL;
10008d3c:	2201      	movs	r2, #1
10008d3e:	466b      	mov	r3, sp
10008d40:	71da      	strb	r2, [r3, #7]
10008d42:	e015      	b.n	10008d70 <mpu_set_sensors+0x40>
    else if (sensors)
10008d44:	2800      	cmp	r0, #0
10008d46:	d003      	beq.n	10008d50 <mpu_set_sensors+0x20>
    data = 0;
10008d48:	2200      	movs	r2, #0
10008d4a:	466b      	mov	r3, sp
10008d4c:	71da      	strb	r2, [r3, #7]
10008d4e:	e00f      	b.n	10008d70 <mpu_set_sensors+0x40>
    else
    data = BIT_SLEEP;
10008d50:	466b      	mov	r3, sp
10008d52:	3307      	adds	r3, #7
10008d54:	2240      	movs	r2, #64	; 0x40
10008d56:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10008d58:	4a6a      	ldr	r2, [pc, #424]	; (10008f04 <mpu_set_sensors+0x1d4>)
10008d5a:	6811      	ldr	r1, [r2, #0]
10008d5c:	7d49      	ldrb	r1, [r1, #21]
10008d5e:	6852      	ldr	r2, [r2, #4]
10008d60:	7810      	ldrb	r0, [r2, #0]
10008d62:	2201      	movs	r2, #1
10008d64:	4d68      	ldr	r5, [pc, #416]	; (10008f08 <mpu_set_sensors+0x1d8>)
10008d66:	47a8      	blx	r5
10008d68:	2800      	cmp	r0, #0
10008d6a:	d100      	bne.n	10008d6e <mpu_set_sensors+0x3e>
10008d6c:	e0b2      	b.n	10008ed4 <mpu_set_sensors+0x1a4>
10008d6e:	e00b      	b.n	10008d88 <mpu_set_sensors+0x58>
10008d70:	4b64      	ldr	r3, [pc, #400]	; (10008f04 <mpu_set_sensors+0x1d4>)
10008d72:	681a      	ldr	r2, [r3, #0]
10008d74:	7d51      	ldrb	r1, [r2, #21]
10008d76:	685b      	ldr	r3, [r3, #4]
10008d78:	7818      	ldrb	r0, [r3, #0]
10008d7a:	466b      	mov	r3, sp
10008d7c:	3307      	adds	r3, #7
10008d7e:	2201      	movs	r2, #1
10008d80:	4d61      	ldr	r5, [pc, #388]	; (10008f08 <mpu_set_sensors+0x1d8>)
10008d82:	47a8      	blx	r5
10008d84:	2800      	cmp	r0, #0
10008d86:	d005      	beq.n	10008d94 <mpu_set_sensors+0x64>
        st.chip_cfg.sensors = 0;
10008d88:	2200      	movs	r2, #0
10008d8a:	4b5e      	ldr	r3, [pc, #376]	; (10008f04 <mpu_set_sensors+0x1d4>)
10008d8c:	729a      	strb	r2, [r3, #10]
        return -1;
10008d8e:	2501      	movs	r5, #1
10008d90:	426d      	negs	r5, r5
10008d92:	e0b4      	b.n	10008efe <mpu_set_sensors+0x1ce>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008d94:	466b      	mov	r3, sp
10008d96:	1dda      	adds	r2, r3, #7
10008d98:	79db      	ldrb	r3, [r3, #7]
10008d9a:	2140      	movs	r1, #64	; 0x40
10008d9c:	438b      	bics	r3, r1
10008d9e:	4959      	ldr	r1, [pc, #356]	; (10008f04 <mpu_set_sensors+0x1d4>)
10008da0:	730b      	strb	r3, [r1, #12]

    data = 0;
10008da2:	2300      	movs	r3, #0
10008da4:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_X_GYRO))
10008da6:	0663      	lsls	r3, r4, #25
10008da8:	d402      	bmi.n	10008db0 <mpu_set_sensors+0x80>
    data |= BIT_STBY_XG;
10008daa:	2204      	movs	r2, #4
10008dac:	466b      	mov	r3, sp
10008dae:	71da      	strb	r2, [r3, #7]
    if (!(sensors & INV_Y_GYRO))
10008db0:	06a3      	lsls	r3, r4, #26
10008db2:	d405      	bmi.n	10008dc0 <mpu_set_sensors+0x90>
    data |= BIT_STBY_YG;
10008db4:	466b      	mov	r3, sp
10008db6:	1dda      	adds	r2, r3, #7
10008db8:	79d9      	ldrb	r1, [r3, #7]
10008dba:	2302      	movs	r3, #2
10008dbc:	430b      	orrs	r3, r1
10008dbe:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_Z_GYRO))
10008dc0:	06e3      	lsls	r3, r4, #27
10008dc2:	d405      	bmi.n	10008dd0 <mpu_set_sensors+0xa0>
    data |= BIT_STBY_ZG;
10008dc4:	466b      	mov	r3, sp
10008dc6:	1dda      	adds	r2, r3, #7
10008dc8:	79d9      	ldrb	r1, [r3, #7]
10008dca:	2301      	movs	r3, #1
10008dcc:	430b      	orrs	r3, r1
10008dce:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_XYZ_ACCEL))
10008dd0:	0723      	lsls	r3, r4, #28
10008dd2:	d405      	bmi.n	10008de0 <mpu_set_sensors+0xb0>
    data |= BIT_STBY_XYZA;
10008dd4:	466b      	mov	r3, sp
10008dd6:	1dda      	adds	r2, r3, #7
10008dd8:	79d9      	ldrb	r1, [r3, #7]
10008dda:	2338      	movs	r3, #56	; 0x38
10008ddc:	430b      	orrs	r3, r1
10008dde:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
10008de0:	4b48      	ldr	r3, [pc, #288]	; (10008f04 <mpu_set_sensors+0x1d4>)
10008de2:	681a      	ldr	r2, [r3, #0]
10008de4:	7d91      	ldrb	r1, [r2, #22]
10008de6:	685b      	ldr	r3, [r3, #4]
10008de8:	7818      	ldrb	r0, [r3, #0]
10008dea:	466b      	mov	r3, sp
10008dec:	3307      	adds	r3, #7
10008dee:	2201      	movs	r2, #1
10008df0:	4d45      	ldr	r5, [pc, #276]	; (10008f08 <mpu_set_sensors+0x1d8>)
10008df2:	47a8      	blx	r5
10008df4:	2800      	cmp	r0, #0
10008df6:	d005      	beq.n	10008e04 <mpu_set_sensors+0xd4>
        st.chip_cfg.sensors = 0;
10008df8:	2200      	movs	r2, #0
10008dfa:	4b42      	ldr	r3, [pc, #264]	; (10008f04 <mpu_set_sensors+0x1d4>)
10008dfc:	729a      	strb	r2, [r3, #10]
        return -1;
10008dfe:	2501      	movs	r5, #1
10008e00:	426d      	negs	r5, r5
10008e02:	e07c      	b.n	10008efe <mpu_set_sensors+0x1ce>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
10008e04:	2308      	movs	r3, #8
10008e06:	0022      	movs	r2, r4
10008e08:	439a      	bics	r2, r3
10008e0a:	d06b      	beq.n	10008ee4 <mpu_set_sensors+0x1b4>
    /* Latched interrupts only used in LP accel mode. */
    mpu_set_int_latched(0);
10008e0c:	2000      	movs	r0, #0
10008e0e:	4b3f      	ldr	r3, [pc, #252]	; (10008f0c <mpu_set_sensors+0x1dc>)
10008e10:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
    mpu_set_bypass(1);
    else
    mpu_set_bypass(0);
    #else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008e12:	4b3c      	ldr	r3, [pc, #240]	; (10008f04 <mpu_set_sensors+0x1d4>)
10008e14:	681a      	ldr	r2, [r3, #0]
10008e16:	7911      	ldrb	r1, [r2, #4]
10008e18:	685b      	ldr	r3, [r3, #4]
10008e1a:	7818      	ldrb	r0, [r3, #0]
10008e1c:	466b      	mov	r3, sp
10008e1e:	3306      	adds	r3, #6
10008e20:	2201      	movs	r2, #1
10008e22:	4d3b      	ldr	r5, [pc, #236]	; (10008f10 <mpu_set_sensors+0x1e0>)
10008e24:	47a8      	blx	r5
10008e26:	2800      	cmp	r0, #0
10008e28:	d148      	bne.n	10008ebc <mpu_set_sensors+0x18c>
    return -1;
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
10008e2a:	07e3      	lsls	r3, r4, #31
10008e2c:	d509      	bpl.n	10008e42 <mpu_set_sensors+0x112>
        data = AKM_SINGLE_MEASUREMENT;
10008e2e:	2211      	movs	r2, #17
10008e30:	466b      	mov	r3, sp
10008e32:	71da      	strb	r2, [r3, #7]
        user_ctrl |= BIT_AUX_IF_EN;
10008e34:	466b      	mov	r3, sp
10008e36:	1d9a      	adds	r2, r3, #6
10008e38:	7999      	ldrb	r1, [r3, #6]
10008e3a:	2320      	movs	r3, #32
10008e3c:	430b      	orrs	r3, r1
10008e3e:	7013      	strb	r3, [r2, #0]
10008e40:	e008      	b.n	10008e54 <mpu_set_sensors+0x124>
        } else {
        data = AKM_POWER_DOWN;
10008e42:	2210      	movs	r2, #16
10008e44:	466b      	mov	r3, sp
10008e46:	71da      	strb	r2, [r3, #7]
        user_ctrl &= ~BIT_AUX_IF_EN;
10008e48:	466b      	mov	r3, sp
10008e4a:	1d9a      	adds	r2, r3, #6
10008e4c:	799b      	ldrb	r3, [r3, #6]
10008e4e:	2120      	movs	r1, #32
10008e50:	438b      	bics	r3, r1
10008e52:	7013      	strb	r3, [r2, #0]
    }
    if (st.chip_cfg.dmp_on)
10008e54:	2324      	movs	r3, #36	; 0x24
10008e56:	4a2b      	ldr	r2, [pc, #172]	; (10008f04 <mpu_set_sensors+0x1d4>)
10008e58:	5cd3      	ldrb	r3, [r2, r3]
10008e5a:	2b00      	cmp	r3, #0
10008e5c:	d007      	beq.n	10008e6e <mpu_set_sensors+0x13e>
    user_ctrl |= BIT_DMP_EN;
10008e5e:	466b      	mov	r3, sp
10008e60:	1d9a      	adds	r2, r3, #6
10008e62:	799b      	ldrb	r3, [r3, #6]
10008e64:	2180      	movs	r1, #128	; 0x80
10008e66:	4249      	negs	r1, r1
10008e68:	430b      	orrs	r3, r1
10008e6a:	7013      	strb	r3, [r2, #0]
10008e6c:	e005      	b.n	10008e7a <mpu_set_sensors+0x14a>
    else
    user_ctrl &= ~BIT_DMP_EN;
10008e6e:	466b      	mov	r3, sp
10008e70:	1d9a      	adds	r2, r3, #6
10008e72:	799b      	ldrb	r3, [r3, #6]
10008e74:	217f      	movs	r1, #127	; 0x7f
10008e76:	400b      	ands	r3, r1
10008e78:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
10008e7a:	4b22      	ldr	r3, [pc, #136]	; (10008f04 <mpu_set_sensors+0x1d4>)
10008e7c:	2226      	movs	r2, #38	; 0x26
10008e7e:	6819      	ldr	r1, [r3, #0]
10008e80:	5c89      	ldrb	r1, [r1, r2]
10008e82:	685b      	ldr	r3, [r3, #4]
10008e84:	7818      	ldrb	r0, [r3, #0]
10008e86:	466b      	mov	r3, sp
10008e88:	3307      	adds	r3, #7
10008e8a:	3a25      	subs	r2, #37	; 0x25
10008e8c:	4d1e      	ldr	r5, [pc, #120]	; (10008f08 <mpu_set_sensors+0x1d8>)
10008e8e:	47a8      	blx	r5
10008e90:	2800      	cmp	r0, #0
10008e92:	d116      	bne.n	10008ec2 <mpu_set_sensors+0x192>
    return -1;
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008e94:	4b1b      	ldr	r3, [pc, #108]	; (10008f04 <mpu_set_sensors+0x1d4>)
10008e96:	681a      	ldr	r2, [r3, #0]
10008e98:	7911      	ldrb	r1, [r2, #4]
10008e9a:	685b      	ldr	r3, [r3, #4]
10008e9c:	7818      	ldrb	r0, [r3, #0]
10008e9e:	466b      	mov	r3, sp
10008ea0:	3306      	adds	r3, #6
10008ea2:	2201      	movs	r2, #1
10008ea4:	4d18      	ldr	r5, [pc, #96]	; (10008f08 <mpu_set_sensors+0x1d8>)
10008ea6:	47a8      	blx	r5
10008ea8:	1e05      	subs	r5, r0, #0
10008eaa:	d10d      	bne.n	10008ec8 <mpu_set_sensors+0x198>
    return -1;
    #endif
    #endif

    st.chip_cfg.sensors = sensors;
10008eac:	4b15      	ldr	r3, [pc, #84]	; (10008f04 <mpu_set_sensors+0x1d4>)
10008eae:	729c      	strb	r4, [r3, #10]
    st.chip_cfg.lp_accel_mode = 0;
10008eb0:	2200      	movs	r2, #0
10008eb2:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
10008eb4:	2032      	movs	r0, #50	; 0x32
10008eb6:	4b17      	ldr	r3, [pc, #92]	; (10008f14 <mpu_set_sensors+0x1e4>)
10008eb8:	4798      	blx	r3
    return 0;
10008eba:	e020      	b.n	10008efe <mpu_set_sensors+0x1ce>
    mpu_set_bypass(1);
    else
    mpu_set_bypass(0);
    #else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
    return -1;
10008ebc:	2501      	movs	r5, #1
10008ebe:	426d      	negs	r5, r5
10008ec0:	e01d      	b.n	10008efe <mpu_set_sensors+0x1ce>
    if (st.chip_cfg.dmp_on)
    user_ctrl |= BIT_DMP_EN;
    else
    user_ctrl &= ~BIT_DMP_EN;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
    return -1;
10008ec2:	2501      	movs	r5, #1
10008ec4:	426d      	negs	r5, r5
10008ec6:	e01a      	b.n	10008efe <mpu_set_sensors+0x1ce>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
    return -1;
10008ec8:	2501      	movs	r5, #1
10008eca:	426d      	negs	r5, r5
10008ecc:	e017      	b.n	10008efe <mpu_set_sensors+0x1ce>
    mpu_set_bypass(1);
    else
    mpu_set_bypass(0);
    #else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
    return -1;
10008ece:	2501      	movs	r5, #1
10008ed0:	426d      	negs	r5, r5
10008ed2:	e014      	b.n	10008efe <mpu_set_sensors+0x1ce>
    data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008ed4:	466b      	mov	r3, sp
10008ed6:	3307      	adds	r3, #7
10008ed8:	781b      	ldrb	r3, [r3, #0]
10008eda:	2240      	movs	r2, #64	; 0x40
10008edc:	4393      	bics	r3, r2
10008ede:	4a09      	ldr	r2, [pc, #36]	; (10008f04 <mpu_set_sensors+0x1d4>)
10008ee0:	7313      	strb	r3, [r2, #12]
10008ee2:	e762      	b.n	10008daa <mpu_set_sensors+0x7a>
    if (sensors & INV_XYZ_COMPASS)
    mpu_set_bypass(1);
    else
    mpu_set_bypass(0);
    #else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008ee4:	4b07      	ldr	r3, [pc, #28]	; (10008f04 <mpu_set_sensors+0x1d4>)
10008ee6:	681a      	ldr	r2, [r3, #0]
10008ee8:	7911      	ldrb	r1, [r2, #4]
10008eea:	685b      	ldr	r3, [r3, #4]
10008eec:	7818      	ldrb	r0, [r3, #0]
10008eee:	466b      	mov	r3, sp
10008ef0:	3306      	adds	r3, #6
10008ef2:	2201      	movs	r2, #1
10008ef4:	4d06      	ldr	r5, [pc, #24]	; (10008f10 <mpu_set_sensors+0x1e0>)
10008ef6:	47a8      	blx	r5
10008ef8:	2800      	cmp	r0, #0
10008efa:	d0a2      	beq.n	10008e42 <mpu_set_sensors+0x112>
10008efc:	e7e7      	b.n	10008ece <mpu_set_sensors+0x19e>

    st.chip_cfg.sensors = sensors;
    st.chip_cfg.lp_accel_mode = 0;
    delay_ms(50);
    return 0;
}
10008efe:	0028      	movs	r0, r5
10008f00:	b003      	add	sp, #12
10008f02:	bd30      	pop	{r4, r5, pc}
10008f04:	100120bc 	.word	0x100120bc
10008f08:	100083dd 	.word	0x100083dd
10008f0c:	10008b39 	.word	0x10008b39
10008f10:	10008309 	.word	0x10008309
10008f14:	10008129 	.word	0x10008129

10008f18 <mpu_init>:
*  Data ready interrupt: Disabled, active HIGH, unlatched.
*  @param[in]  int_param   Platform-specific parameters to interrupt API.
*  @return     0 if successful.
*/
int mpu_init(struct int_param_s *int_param)
{
10008f18:	b570      	push	{r4, r5, r6, lr}
10008f1a:	b084      	sub	sp, #16
10008f1c:	0006      	movs	r6, r0
    unsigned char data[6];

    DBG_LOG("Entering mpu_init...");
10008f1e:	48c0      	ldr	r0, [pc, #768]	; (10009220 <mpu_init+0x308>)
10008f20:	4bc0      	ldr	r3, [pc, #768]	; (10009224 <mpu_init+0x30c>)
10008f22:	4798      	blx	r3
10008f24:	48c0      	ldr	r0, [pc, #768]	; (10009228 <mpu_init+0x310>)
10008f26:	4bc1      	ldr	r3, [pc, #772]	; (1000922c <mpu_init+0x314>)
10008f28:	4798      	blx	r3
    
    /* Reset device. */
    data[0] = BIT_RESET;
10008f2a:	ab02      	add	r3, sp, #8
10008f2c:	2280      	movs	r2, #128	; 0x80
10008f2e:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10008f30:	4abf      	ldr	r2, [pc, #764]	; (10009230 <mpu_init+0x318>)
10008f32:	6811      	ldr	r1, [r2, #0]
10008f34:	7d49      	ldrb	r1, [r1, #21]
10008f36:	6852      	ldr	r2, [r2, #4]
10008f38:	7810      	ldrb	r0, [r2, #0]
10008f3a:	2201      	movs	r2, #1
10008f3c:	4cbd      	ldr	r4, [pc, #756]	; (10009234 <mpu_init+0x31c>)
10008f3e:	47a0      	blx	r4
10008f40:	2800      	cmp	r0, #0
10008f42:	d000      	beq.n	10008f46 <mpu_init+0x2e>
10008f44:	e14f      	b.n	100091e6 <mpu_init+0x2ce>
    return -1;
    delay_ms(100);
10008f46:	3064      	adds	r0, #100	; 0x64
10008f48:	4bbb      	ldr	r3, [pc, #748]	; (10009238 <mpu_init+0x320>)
10008f4a:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
10008f4c:	ab02      	add	r3, sp, #8
10008f4e:	2200      	movs	r2, #0
10008f50:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10008f52:	4ab7      	ldr	r2, [pc, #732]	; (10009230 <mpu_init+0x318>)
10008f54:	6811      	ldr	r1, [r2, #0]
10008f56:	7d49      	ldrb	r1, [r1, #21]
10008f58:	6852      	ldr	r2, [r2, #4]
10008f5a:	7810      	ldrb	r0, [r2, #0]
10008f5c:	2201      	movs	r2, #1
10008f5e:	4cb5      	ldr	r4, [pc, #724]	; (10009234 <mpu_init+0x31c>)
10008f60:	47a0      	blx	r4
10008f62:	2800      	cmp	r0, #0
10008f64:	d000      	beq.n	10008f68 <mpu_init+0x50>
10008f66:	e141      	b.n	100091ec <mpu_init+0x2d4>
    return -1;

    st.chip_cfg.accel_half = 0;
10008f68:	4ab1      	ldr	r2, [pc, #708]	; (10009230 <mpu_init+0x318>)
10008f6a:	2300      	movs	r3, #0
10008f6c:	74d3      	strb	r3, [r2, #19]

    #ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
    * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
    */
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
10008f6e:	ab02      	add	r3, sp, #8
10008f70:	2148      	movs	r1, #72	; 0x48
10008f72:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
10008f74:	6811      	ldr	r1, [r2, #0]
10008f76:	7a09      	ldrb	r1, [r1, #8]
10008f78:	6852      	ldr	r2, [r2, #4]
10008f7a:	7810      	ldrb	r0, [r2, #0]
10008f7c:	2201      	movs	r2, #1
10008f7e:	4cad      	ldr	r4, [pc, #692]	; (10009234 <mpu_init+0x31c>)
10008f80:	47a0      	blx	r4
10008f82:	2800      	cmp	r0, #0
10008f84:	d000      	beq.n	10008f88 <mpu_init+0x70>
10008f86:	e134      	b.n	100091f2 <mpu_init+0x2da>
    return -1;
    #endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
10008f88:	4ca9      	ldr	r4, [pc, #676]	; (10009230 <mpu_init+0x318>)
10008f8a:	23ff      	movs	r3, #255	; 0xff
10008f8c:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
10008f8e:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
10008f90:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
10008f92:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
10008f94:	2201      	movs	r2, #1
10008f96:	4252      	negs	r2, r2
10008f98:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
10008f9a:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
10008f9c:	74a3      	strb	r3, [r4, #18]
    #ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
10008f9e:	8522      	strh	r2, [r4, #40]	; 0x28
    #endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
10008fa0:	3bfe      	subs	r3, #254	; 0xfe
10008fa2:	7323      	strb	r3, [r4, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0;
10008fa4:	2500      	movs	r5, #0
10008fa6:	3321      	adds	r3, #33	; 0x21
10008fa8:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.latched_int = 0;
10008faa:	3301      	adds	r3, #1
10008fac:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.int_motion_only = 0;
10008fae:	7565      	strb	r5, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
10008fb0:	7525      	strb	r5, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
10008fb2:	0020      	movs	r0, r4
10008fb4:	3016      	adds	r0, #22
10008fb6:	320d      	adds	r2, #13
10008fb8:	2100      	movs	r1, #0
10008fba:	4ba0      	ldr	r3, [pc, #640]	; (1000923c <mpu_init+0x324>)
10008fbc:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
10008fbe:	2324      	movs	r3, #36	; 0x24
10008fc0:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_loaded = 0;
10008fc2:	3301      	adds	r3, #1
10008fc4:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_sample_rate = 0;
10008fc6:	84e5      	strh	r5, [r4, #38]	; 0x26
    mpu_set_int_level(0); // 0 --> active low disabled => active high

    if (mpu_set_gyro_fsr(250)) return -1; // 1B
10008fc8:	20fa      	movs	r0, #250	; 0xfa
10008fca:	4b9d      	ldr	r3, [pc, #628]	; (10009240 <mpu_init+0x328>)
10008fcc:	4798      	blx	r3
10008fce:	2800      	cmp	r0, #0
10008fd0:	d000      	beq.n	10008fd4 <mpu_init+0xbc>
10008fd2:	e111      	b.n	100091f8 <mpu_init+0x2e0>
    if (mpu_set_accel_fsr(4)) return -1; // 1B
10008fd4:	3004      	adds	r0, #4
10008fd6:	4b9b      	ldr	r3, [pc, #620]	; (10009244 <mpu_init+0x32c>)
10008fd8:	4798      	blx	r3
10008fda:	2800      	cmp	r0, #0
10008fdc:	d000      	beq.n	10008fe0 <mpu_init+0xc8>
10008fde:	e10e      	b.n	100091fe <mpu_init+0x2e6>
    if (mpu_set_lpf(42)) return -1; // 1B
10008fe0:	302a      	adds	r0, #42	; 0x2a
10008fe2:	4b99      	ldr	r3, [pc, #612]	; (10009248 <mpu_init+0x330>)
10008fe4:	4798      	blx	r3
10008fe6:	2800      	cmp	r0, #0
10008fe8:	d000      	beq.n	10008fec <mpu_init+0xd4>
10008fea:	e10b      	b.n	10009204 <mpu_init+0x2ec>
    if (mpu_set_sample_rate(50)) return -1;
10008fec:	3032      	adds	r0, #50	; 0x32
10008fee:	4b97      	ldr	r3, [pc, #604]	; (1000924c <mpu_init+0x334>)
10008ff0:	4798      	blx	r3
10008ff2:	2800      	cmp	r0, #0
10008ff4:	d000      	beq.n	10008ff8 <mpu_init+0xe0>
10008ff6:	e108      	b.n	1000920a <mpu_init+0x2f2>
    if (mpu_configure_fifo(0)) return -1;
10008ff8:	4b95      	ldr	r3, [pc, #596]	; (10009250 <mpu_init+0x338>)
10008ffa:	4798      	blx	r3
10008ffc:	2800      	cmp	r0, #0
10008ffe:	d000      	beq.n	10009002 <mpu_init+0xea>
10009000:	e106      	b.n	10009210 <mpu_init+0x2f8>

    #ifndef EMPL_TARGET_STM32F4
    if (int_param)
10009002:	2e00      	cmp	r6, #0
10009004:	d004      	beq.n	10009010 <mpu_init+0xf8>
    uint32_t load = (uint32_t)(26000 - dualtimer_get_value(DUALTIMER_TIMER2));
    count = (uint32_t *)(load / 26000);
}
static inline int reg_int_cb(struct int_param_s *int_param)
{
    gpio_register_callback(PIN_AO_GPIO_2, interrupt_cb, GPIO_CALLBACK_RISING);
10009006:	2202      	movs	r2, #2
10009008:	4992      	ldr	r1, [pc, #584]	; (10009254 <mpu_init+0x33c>)
1000900a:	301d      	adds	r0, #29
1000900c:	4b92      	ldr	r3, [pc, #584]	; (10009258 <mpu_init+0x340>)
1000900e:	4798      	blx	r3
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    uint8_t data[4], akm_addr;

    mpu_set_bypass(1);
10009010:	2001      	movs	r0, #1
10009012:	4b92      	ldr	r3, [pc, #584]	; (1000925c <mpu_init+0x344>)
10009014:	4798      	blx	r3

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
10009016:	240c      	movs	r4, #12
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
10009018:	4d91      	ldr	r5, [pc, #580]	; (10009260 <mpu_init+0x348>)
1000901a:	ab01      	add	r3, sp, #4
1000901c:	2201      	movs	r2, #1
1000901e:	2100      	movs	r1, #0
10009020:	0020      	movs	r0, r4
10009022:	47a8      	blx	r5
        if (!result && (data[0] == AKM_WHOAMI))
10009024:	2800      	cmp	r0, #0
10009026:	d103      	bne.n	10009030 <mpu_init+0x118>
10009028:	466b      	mov	r3, sp
1000902a:	791b      	ldrb	r3, [r3, #4]
1000902c:	2b48      	cmp	r3, #72	; 0x48
1000902e:	d004      	beq.n	1000903a <mpu_init+0x122>
    uint8_t data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
10009030:	3401      	adds	r4, #1
10009032:	b2e4      	uxtb	r4, r4
10009034:	2c10      	cmp	r4, #16
10009036:	d1f0      	bne.n	1000901a <mpu_init+0x102>
10009038:	e001      	b.n	1000903e <mpu_init+0x126>
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
        if (!result && (data[0] == AKM_WHOAMI))
        break;
    }

    if (akm_addr > 0x0F) {
1000903a:	2c0f      	cmp	r4, #15
1000903c:	d905      	bls.n	1000904a <mpu_init+0x132>
        /* TODO: Handle this case in all compass-related functions. */
        DBG_LOG("Compass not found.\n");
1000903e:	4878      	ldr	r0, [pc, #480]	; (10009220 <mpu_init+0x308>)
10009040:	4c78      	ldr	r4, [pc, #480]	; (10009224 <mpu_init+0x30c>)
10009042:	47a0      	blx	r4
10009044:	4887      	ldr	r0, [pc, #540]	; (10009264 <mpu_init+0x34c>)
10009046:	47a0      	blx	r4
10009048:	e0c4      	b.n	100091d4 <mpu_init+0x2bc>
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;
1000904a:	232a      	movs	r3, #42	; 0x2a
1000904c:	4a78      	ldr	r2, [pc, #480]	; (10009230 <mpu_init+0x318>)
1000904e:	54d4      	strb	r4, [r2, r3]

    data[0] = AKM_POWER_DOWN;
10009050:	ab01      	add	r3, sp, #4
10009052:	2210      	movs	r2, #16
10009054:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009056:	3a0f      	subs	r2, #15
10009058:	210a      	movs	r1, #10
1000905a:	0020      	movs	r0, r4
1000905c:	4c75      	ldr	r4, [pc, #468]	; (10009234 <mpu_init+0x31c>)
1000905e:	47a0      	blx	r4
10009060:	2800      	cmp	r0, #0
10009062:	d000      	beq.n	10009066 <mpu_init+0x14e>
10009064:	e0b6      	b.n	100091d4 <mpu_init+0x2bc>
    return -1;
    delay_ms(1);
10009066:	3001      	adds	r0, #1
10009068:	4b73      	ldr	r3, [pc, #460]	; (10009238 <mpu_init+0x320>)
1000906a:	4798      	blx	r3

    data[0] = AKM_FUSE_ROM_ACCESS;
1000906c:	ab01      	add	r3, sp, #4
1000906e:	221f      	movs	r2, #31
10009070:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009072:	320b      	adds	r2, #11
10009074:	496e      	ldr	r1, [pc, #440]	; (10009230 <mpu_init+0x318>)
10009076:	5c88      	ldrb	r0, [r1, r2]
10009078:	3a29      	subs	r2, #41	; 0x29
1000907a:	210a      	movs	r1, #10
1000907c:	4c6d      	ldr	r4, [pc, #436]	; (10009234 <mpu_init+0x31c>)
1000907e:	47a0      	blx	r4
10009080:	2800      	cmp	r0, #0
10009082:	d000      	beq.n	10009086 <mpu_init+0x16e>
10009084:	e0a6      	b.n	100091d4 <mpu_init+0x2bc>
    return -1;
    delay_ms(1);
10009086:	3001      	adds	r0, #1
10009088:	4b6b      	ldr	r3, [pc, #428]	; (10009238 <mpu_init+0x320>)
1000908a:	4798      	blx	r3

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
1000908c:	232a      	movs	r3, #42	; 0x2a
1000908e:	4a68      	ldr	r2, [pc, #416]	; (10009230 <mpu_init+0x318>)
10009090:	5cd0      	ldrb	r0, [r2, r3]
10009092:	ab01      	add	r3, sp, #4
10009094:	2203      	movs	r2, #3
10009096:	2110      	movs	r1, #16
10009098:	4c71      	ldr	r4, [pc, #452]	; (10009260 <mpu_init+0x348>)
1000909a:	47a0      	blx	r4
1000909c:	2800      	cmp	r0, #0
1000909e:	d000      	beq.n	100090a2 <mpu_init+0x18a>
100090a0:	e098      	b.n	100091d4 <mpu_init+0x2bc>
    return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
100090a2:	4a63      	ldr	r2, [pc, #396]	; (10009230 <mpu_init+0x318>)
100090a4:	ab01      	add	r3, sp, #4
100090a6:	7819      	ldrb	r1, [r3, #0]
100090a8:	3180      	adds	r1, #128	; 0x80
100090aa:	8591      	strh	r1, [r2, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
100090ac:	7859      	ldrb	r1, [r3, #1]
100090ae:	3180      	adds	r1, #128	; 0x80
100090b0:	85d1      	strh	r1, [r2, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
100090b2:	7899      	ldrb	r1, [r3, #2]
100090b4:	3180      	adds	r1, #128	; 0x80
100090b6:	8611      	strh	r1, [r2, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
100090b8:	2110      	movs	r1, #16
100090ba:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100090bc:	311a      	adds	r1, #26
100090be:	5c50      	ldrb	r0, [r2, r1]
100090c0:	2201      	movs	r2, #1
100090c2:	3920      	subs	r1, #32
100090c4:	4c5b      	ldr	r4, [pc, #364]	; (10009234 <mpu_init+0x31c>)
100090c6:	47a0      	blx	r4
100090c8:	2800      	cmp	r0, #0
100090ca:	d000      	beq.n	100090ce <mpu_init+0x1b6>
100090cc:	e082      	b.n	100091d4 <mpu_init+0x2bc>
    return -1;
    delay_ms(1);
100090ce:	3001      	adds	r0, #1
100090d0:	4b59      	ldr	r3, [pc, #356]	; (10009238 <mpu_init+0x320>)
100090d2:	4798      	blx	r3

    mpu_set_bypass(0);
100090d4:	2000      	movs	r0, #0
100090d6:	4b61      	ldr	r3, [pc, #388]	; (1000925c <mpu_init+0x344>)
100090d8:	4798      	blx	r3

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
100090da:	ab01      	add	r3, sp, #4
100090dc:	2240      	movs	r2, #64	; 0x40
100090de:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
100090e0:	4a53      	ldr	r2, [pc, #332]	; (10009230 <mpu_init+0x318>)
100090e2:	6811      	ldr	r1, [r2, #0]
100090e4:	7e89      	ldrb	r1, [r1, #26]
100090e6:	6852      	ldr	r2, [r2, #4]
100090e8:	7810      	ldrb	r0, [r2, #0]
100090ea:	2201      	movs	r2, #1
100090ec:	4c51      	ldr	r4, [pc, #324]	; (10009234 <mpu_init+0x31c>)
100090ee:	47a0      	blx	r4
100090f0:	2800      	cmp	r0, #0
100090f2:	d16f      	bne.n	100091d4 <mpu_init+0x2bc>
    return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
100090f4:	ab01      	add	r3, sp, #4
100090f6:	4a4e      	ldr	r2, [pc, #312]	; (10009230 <mpu_init+0x318>)
100090f8:	212a      	movs	r1, #42	; 0x2a
100090fa:	5c51      	ldrb	r1, [r2, r1]
100090fc:	3880      	subs	r0, #128	; 0x80
100090fe:	4301      	orrs	r1, r0
10009100:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
10009102:	6811      	ldr	r1, [r2, #0]
10009104:	7f89      	ldrb	r1, [r1, #30]
10009106:	6852      	ldr	r2, [r2, #4]
10009108:	7810      	ldrb	r0, [r2, #0]
1000910a:	2201      	movs	r2, #1
1000910c:	4c49      	ldr	r4, [pc, #292]	; (10009234 <mpu_init+0x31c>)
1000910e:	47a0      	blx	r4
10009110:	2800      	cmp	r0, #0
10009112:	d15f      	bne.n	100091d4 <mpu_init+0x2bc>
    return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
10009114:	ab01      	add	r3, sp, #4
10009116:	2202      	movs	r2, #2
10009118:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
1000911a:	4a45      	ldr	r2, [pc, #276]	; (10009230 <mpu_init+0x318>)
1000911c:	6811      	ldr	r1, [r2, #0]
1000911e:	7fc9      	ldrb	r1, [r1, #31]
10009120:	6852      	ldr	r2, [r2, #4]
10009122:	7810      	ldrb	r0, [r2, #0]
10009124:	2201      	movs	r2, #1
10009126:	4c43      	ldr	r4, [pc, #268]	; (10009234 <mpu_init+0x31c>)
10009128:	47a0      	blx	r4
1000912a:	2800      	cmp	r0, #0
1000912c:	d152      	bne.n	100091d4 <mpu_init+0x2bc>
    return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
1000912e:	ab01      	add	r3, sp, #4
10009130:	2288      	movs	r2, #136	; 0x88
10009132:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
10009134:	4a3e      	ldr	r2, [pc, #248]	; (10009230 <mpu_init+0x318>)
10009136:	2120      	movs	r1, #32
10009138:	6810      	ldr	r0, [r2, #0]
1000913a:	5c41      	ldrb	r1, [r0, r1]
1000913c:	6852      	ldr	r2, [r2, #4]
1000913e:	7810      	ldrb	r0, [r2, #0]
10009140:	2201      	movs	r2, #1
10009142:	4c3c      	ldr	r4, [pc, #240]	; (10009234 <mpu_init+0x31c>)
10009144:	47a0      	blx	r4
10009146:	2800      	cmp	r0, #0
10009148:	d144      	bne.n	100091d4 <mpu_init+0x2bc>
    return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
1000914a:	ab01      	add	r3, sp, #4
1000914c:	4a38      	ldr	r2, [pc, #224]	; (10009230 <mpu_init+0x318>)
1000914e:	212a      	movs	r1, #42	; 0x2a
10009150:	5c51      	ldrb	r1, [r2, r1]
10009152:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
10009154:	2121      	movs	r1, #33	; 0x21
10009156:	6810      	ldr	r0, [r2, #0]
10009158:	5c41      	ldrb	r1, [r0, r1]
1000915a:	6852      	ldr	r2, [r2, #4]
1000915c:	7810      	ldrb	r0, [r2, #0]
1000915e:	2201      	movs	r2, #1
10009160:	4c34      	ldr	r4, [pc, #208]	; (10009234 <mpu_init+0x31c>)
10009162:	47a0      	blx	r4
10009164:	2800      	cmp	r0, #0
10009166:	d135      	bne.n	100091d4 <mpu_init+0x2bc>
    return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
10009168:	ab01      	add	r3, sp, #4
1000916a:	220a      	movs	r2, #10
1000916c:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
1000916e:	4a30      	ldr	r2, [pc, #192]	; (10009230 <mpu_init+0x318>)
10009170:	2122      	movs	r1, #34	; 0x22
10009172:	6810      	ldr	r0, [r2, #0]
10009174:	5c41      	ldrb	r1, [r0, r1]
10009176:	6852      	ldr	r2, [r2, #4]
10009178:	7810      	ldrb	r0, [r2, #0]
1000917a:	2201      	movs	r2, #1
1000917c:	4c2d      	ldr	r4, [pc, #180]	; (10009234 <mpu_init+0x31c>)
1000917e:	47a0      	blx	r4
10009180:	2800      	cmp	r0, #0
10009182:	d127      	bne.n	100091d4 <mpu_init+0x2bc>
    return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
10009184:	ab01      	add	r3, sp, #4
10009186:	2281      	movs	r2, #129	; 0x81
10009188:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
1000918a:	4a29      	ldr	r2, [pc, #164]	; (10009230 <mpu_init+0x318>)
1000918c:	2123      	movs	r1, #35	; 0x23
1000918e:	6810      	ldr	r0, [r2, #0]
10009190:	5c41      	ldrb	r1, [r0, r1]
10009192:	6852      	ldr	r2, [r2, #4]
10009194:	7810      	ldrb	r0, [r2, #0]
10009196:	2201      	movs	r2, #1
10009198:	4c26      	ldr	r4, [pc, #152]	; (10009234 <mpu_init+0x31c>)
1000919a:	47a0      	blx	r4
1000919c:	2800      	cmp	r0, #0
1000919e:	d119      	bne.n	100091d4 <mpu_init+0x2bc>
    return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
100091a0:	ab01      	add	r3, sp, #4
100091a2:	2211      	movs	r2, #17
100091a4:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
100091a6:	4a22      	ldr	r2, [pc, #136]	; (10009230 <mpu_init+0x318>)
100091a8:	2126      	movs	r1, #38	; 0x26
100091aa:	6810      	ldr	r0, [r2, #0]
100091ac:	5c41      	ldrb	r1, [r0, r1]
100091ae:	6852      	ldr	r2, [r2, #4]
100091b0:	7810      	ldrb	r0, [r2, #0]
100091b2:	2201      	movs	r2, #1
100091b4:	4c1f      	ldr	r4, [pc, #124]	; (10009234 <mpu_init+0x31c>)
100091b6:	47a0      	blx	r4
100091b8:	2800      	cmp	r0, #0
100091ba:	d10b      	bne.n	100091d4 <mpu_init+0x2bc>
    return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
100091bc:	ab01      	add	r3, sp, #4
100091be:	2203      	movs	r2, #3
100091c0:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
100091c2:	4a1b      	ldr	r2, [pc, #108]	; (10009230 <mpu_init+0x318>)
100091c4:	2127      	movs	r1, #39	; 0x27
100091c6:	6810      	ldr	r0, [r2, #0]
100091c8:	5c41      	ldrb	r1, [r0, r1]
100091ca:	6852      	ldr	r2, [r2, #4]
100091cc:	7810      	ldrb	r0, [r2, #0]
100091ce:	2201      	movs	r2, #1
100091d0:	4c18      	ldr	r4, [pc, #96]	; (10009234 <mpu_init+0x31c>)
100091d2:	47a0      	blx	r4
    if (int_param)
    reg_int_cb(int_param);
    #endif

    setup_compass();
    if (mpu_set_compass_sample_rate(10)) return -1;
100091d4:	200a      	movs	r0, #10
100091d6:	4b24      	ldr	r3, [pc, #144]	; (10009268 <mpu_init+0x350>)
100091d8:	4798      	blx	r3
100091da:	1e04      	subs	r4, r0, #0
100091dc:	d11b      	bne.n	10009216 <mpu_init+0x2fe>

    mpu_set_sensors(0);
100091de:	2000      	movs	r0, #0
100091e0:	4b22      	ldr	r3, [pc, #136]	; (1000926c <mpu_init+0x354>)
100091e2:	4798      	blx	r3
    
    return 0;
100091e4:	e019      	b.n	1000921a <mpu_init+0x302>
    DBG_LOG("Entering mpu_init...");
    
    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
    return -1;
100091e6:	2401      	movs	r4, #1
100091e8:	4264      	negs	r4, r4
100091ea:	e016      	b.n	1000921a <mpu_init+0x302>
    delay_ms(100);

    /* Wake up chip. */
    data[0] = 0x00;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
    return -1;
100091ec:	2401      	movs	r4, #1
100091ee:	4264      	negs	r4, r4
100091f0:	e013      	b.n	1000921a <mpu_init+0x302>
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
    * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
    */
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
    return -1;
100091f2:	2401      	movs	r4, #1
100091f4:	4264      	negs	r4, r4
100091f6:	e010      	b.n	1000921a <mpu_init+0x302>
    st.chip_cfg.dmp_on = 0;
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;
    mpu_set_int_level(0); // 0 --> active low disabled => active high

    if (mpu_set_gyro_fsr(250)) return -1; // 1B
100091f8:	2401      	movs	r4, #1
100091fa:	4264      	negs	r4, r4
100091fc:	e00d      	b.n	1000921a <mpu_init+0x302>
    if (mpu_set_accel_fsr(4)) return -1; // 1B
100091fe:	2401      	movs	r4, #1
10009200:	4264      	negs	r4, r4
10009202:	e00a      	b.n	1000921a <mpu_init+0x302>
    if (mpu_set_lpf(42)) return -1; // 1B
10009204:	2401      	movs	r4, #1
10009206:	4264      	negs	r4, r4
10009208:	e007      	b.n	1000921a <mpu_init+0x302>
    if (mpu_set_sample_rate(50)) return -1;
1000920a:	2401      	movs	r4, #1
1000920c:	4264      	negs	r4, r4
1000920e:	e004      	b.n	1000921a <mpu_init+0x302>
    if (mpu_configure_fifo(0)) return -1;
10009210:	2401      	movs	r4, #1
10009212:	4264      	negs	r4, r4
10009214:	e001      	b.n	1000921a <mpu_init+0x302>
    if (int_param)
    reg_int_cb(int_param);
    #endif

    setup_compass();
    if (mpu_set_compass_sample_rate(10)) return -1;
10009216:	2401      	movs	r4, #1
10009218:	4264      	negs	r4, r4

    mpu_set_sensors(0);
    
    return 0;
}
1000921a:	0020      	movs	r0, r4
1000921c:	b004      	add	sp, #16
1000921e:	bd70      	pop	{r4, r5, r6, pc}
10009220:	100112b0 	.word	0x100112b0
10009224:	100100ed 	.word	0x100100ed
10009228:	100112dc 	.word	0x100112dc
1000922c:	1000ffcd 	.word	0x1000ffcd
10009230:	100120bc 	.word	0x100120bc
10009234:	100083dd 	.word	0x100083dd
10009238:	10008129 	.word	0x10008129
1000923c:	1000ffbd 	.word	0x1000ffbd
10009240:	1000870d 	.word	0x1000870d
10009244:	100087ad 	.word	0x100087ad
10009248:	10008841 	.word	0x10008841
1000924c:	10008c31 	.word	0x10008c31
10009250:	10008951 	.word	0x10008951
10009254:	1000c2a5 	.word	0x1000c2a5
10009258:	1000b685 	.word	0x1000b685
1000925c:	100089bd 	.word	0x100089bd
10009260:	10008309 	.word	0x10008309
10009264:	100112f4 	.word	0x100112f4
10009268:	100088d9 	.word	0x100088d9
1000926c:	10008d31 	.word	0x10008d31

10009270 <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
10009270:	2000      	movs	r0, #0
10009272:	4770      	bx	lr

10009274 <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
10009274:	2000      	movs	r0, #0
10009276:	4770      	bx	lr

10009278 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10009278:	78c0      	ldrb	r0, [r0, #3]
1000927a:	2800      	cmp	r0, #0
1000927c:	d000      	beq.n	10009280 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000927e:	20e2      	movs	r0, #226	; 0xe2
}
10009280:	4770      	bx	lr
10009282:	46c0      	nop			; (mov r8, r8)

10009284 <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
10009284:	2000      	movs	r0, #0
10009286:	4770      	bx	lr

10009288 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
10009288:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000928a:	7800      	ldrb	r0, [r0, #0]
1000928c:	2800      	cmp	r0, #0
1000928e:	d006      	beq.n	1000929e <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
10009290:	4803      	ldr	r0, [pc, #12]	; (100092a0 <ble_scan_report_handler+0x18>)
10009292:	4b04      	ldr	r3, [pc, #16]	; (100092a4 <ble_scan_report_handler+0x1c>)
10009294:	4798      	blx	r3
10009296:	4804      	ldr	r0, [pc, #16]	; (100092a8 <ble_scan_report_handler+0x20>)
10009298:	4b04      	ldr	r3, [pc, #16]	; (100092ac <ble_scan_report_handler+0x24>)
1000929a:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000929c:	20e2      	movs	r0, #226	; 0xe2
}
1000929e:	bd10      	pop	{r4, pc}
100092a0:	100112b0 	.word	0x100112b0
100092a4:	100100ed 	.word	0x100100ed
100092a8:	10011750 	.word	0x10011750
100092ac:	1000ffcd 	.word	0x1000ffcd

100092b0 <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
100092b0:	b510      	push	{r4, lr}
100092b2:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
100092b4:	78c0      	ldrb	r0, [r0, #3]
100092b6:	2800      	cmp	r0, #0
100092b8:	d008      	beq.n	100092cc <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
100092ba:	4805      	ldr	r0, [pc, #20]	; (100092d0 <ble_mtu_changed_cmd_complete_handler+0x20>)
100092bc:	4b05      	ldr	r3, [pc, #20]	; (100092d4 <ble_mtu_changed_cmd_complete_handler+0x24>)
100092be:	4798      	blx	r3
100092c0:	78a2      	ldrb	r2, [r4, #2]
100092c2:	8821      	ldrh	r1, [r4, #0]
100092c4:	4804      	ldr	r0, [pc, #16]	; (100092d8 <ble_mtu_changed_cmd_complete_handler+0x28>)
100092c6:	4b05      	ldr	r3, [pc, #20]	; (100092dc <ble_mtu_changed_cmd_complete_handler+0x2c>)
100092c8:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
100092ca:	20e2      	movs	r0, #226	; 0xe2
}
100092cc:	bd10      	pop	{r4, pc}
100092ce:	46c0      	nop			; (mov r8, r8)
100092d0:	100112b0 	.word	0x100112b0
100092d4:	100100ed 	.word	0x100100ed
100092d8:	10011764 	.word	0x10011764
100092dc:	1000ffcd 	.word	0x1000ffcd

100092e0 <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
100092e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100092e2:	0004      	movs	r4, r0
100092e4:	4b19      	ldr	r3, [pc, #100]	; (1000934c <ble_disconnected_state_handler+0x6c>)
100092e6:	229b      	movs	r2, #155	; 0x9b
100092e8:	0092      	lsls	r2, r2, #2
100092ea:	189d      	adds	r5, r3, r2
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
100092ec:	2701      	movs	r7, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
100092ee:	2600      	movs	r6, #0
100092f0:	0018      	movs	r0, r3
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
100092f2:	001a      	movs	r2, r3
100092f4:	3a56      	subs	r2, #86	; 0x56
100092f6:	8811      	ldrh	r1, [r2, #0]
100092f8:	8822      	ldrh	r2, [r4, #0]
100092fa:	4291      	cmp	r1, r2
100092fc:	d119      	bne.n	10009332 <ble_disconnected_state_handler+0x52>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
100092fe:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009300:	2a05      	cmp	r2, #5
10009302:	d001      	beq.n	10009308 <ble_disconnected_state_handler+0x28>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
10009304:	2a08      	cmp	r2, #8
10009306:	d101      	bne.n	1000930c <ble_disconnected_state_handler+0x2c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
10009308:	7007      	strb	r7, [r0, #0]
1000930a:	e012      	b.n	10009332 <ble_disconnected_state_handler+0x52>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000930c:	2a07      	cmp	r2, #7
1000930e:	d80f      	bhi.n	10009330 <ble_disconnected_state_handler+0x50>
10009310:	0092      	lsls	r2, r2, #2
10009312:	490f      	ldr	r1, [pc, #60]	; (10009350 <ble_disconnected_state_handler+0x70>)
10009314:	588a      	ldr	r2, [r1, r2]
10009316:	4697      	mov	pc, r2
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009318:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
1000931a:	4a0e      	ldr	r2, [pc, #56]	; (10009354 <ble_disconnected_state_handler+0x74>)
1000931c:	7812      	ldrb	r2, [r2, #0]
1000931e:	2a00      	cmp	r2, #0
10009320:	d007      	beq.n	10009332 <ble_disconnected_state_handler+0x52>
					{
						ble_device_count--;
10009322:	4a0c      	ldr	r2, [pc, #48]	; (10009354 <ble_disconnected_state_handler+0x74>)
10009324:	7812      	ldrb	r2, [r2, #0]
10009326:	3a01      	subs	r2, #1
10009328:	b2d2      	uxtb	r2, r2
1000932a:	490a      	ldr	r1, [pc, #40]	; (10009354 <ble_disconnected_state_handler+0x74>)
1000932c:	700a      	strb	r2, [r1, #0]
1000932e:	e000      	b.n	10009332 <ble_disconnected_state_handler+0x52>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009330:	7006      	strb	r6, [r0, #0]
10009332:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009334:	42ab      	cmp	r3, r5
10009336:	d1db      	bne.n	100092f0 <ble_disconnected_state_handler+0x10>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
10009338:	4807      	ldr	r0, [pc, #28]	; (10009358 <ble_disconnected_state_handler+0x78>)
1000933a:	4b08      	ldr	r3, [pc, #32]	; (1000935c <ble_disconnected_state_handler+0x7c>)
1000933c:	4798      	blx	r3
1000933e:	8822      	ldrh	r2, [r4, #0]
10009340:	78a1      	ldrb	r1, [r4, #2]
10009342:	4807      	ldr	r0, [pc, #28]	; (10009360 <ble_disconnected_state_handler+0x80>)
10009344:	4b07      	ldr	r3, [pc, #28]	; (10009364 <ble_disconnected_state_handler+0x84>)
10009346:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
10009348:	2000      	movs	r0, #0
1000934a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000934c:	10013c9a 	.word	0x10013c9a
10009350:	100116d0 	.word	0x100116d0
10009354:	10013ea8 	.word	0x10013ea8
10009358:	100112b0 	.word	0x100112b0
1000935c:	100100ed 	.word	0x100100ed
10009360:	1001179c 	.word	0x1001179c
10009364:	1000ffcd 	.word	0x1000ffcd

10009368 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
10009368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000936a:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000936c:	8801      	ldrh	r1, [r0, #0]
1000936e:	4b28      	ldr	r3, [pc, #160]	; (10009410 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009370:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
10009372:	891a      	ldrh	r2, [r3, #8]
10009374:	428a      	cmp	r2, r1
10009376:	d104      	bne.n	10009382 <ble_encryption_status_change_handler+0x1a>
10009378:	001a      	movs	r2, r3
1000937a:	325e      	adds	r2, #94	; 0x5e
1000937c:	7812      	ldrb	r2, [r2, #0]
1000937e:	2a06      	cmp	r2, #6
10009380:	d02e      	beq.n	100093e0 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009382:	3401      	adds	r4, #1
10009384:	b2e4      	uxtb	r4, r4
10009386:	337c      	adds	r3, #124	; 0x7c
10009388:	2c05      	cmp	r4, #5
1000938a:	d1f2      	bne.n	10009372 <ble_encryption_status_change_handler+0xa>
1000938c:	e039      	b.n	10009402 <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000938e:	4920      	ldr	r1, [pc, #128]	; (10009410 <ble_encryption_status_change_handler+0xa8>)
10009390:	0163      	lsls	r3, r4, #5
10009392:	1b1a      	subs	r2, r3, r4
10009394:	0092      	lsls	r2, r2, #2
10009396:	188a      	adds	r2, r1, r2
10009398:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000939a:	0014      	movs	r4, r2
1000939c:	345e      	adds	r4, #94	; 0x5e
1000939e:	2307      	movs	r3, #7
100093a0:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
100093a2:	481c      	ldr	r0, [pc, #112]	; (10009414 <ble_encryption_status_change_handler+0xac>)
100093a4:	4b1c      	ldr	r3, [pc, #112]	; (10009418 <ble_encryption_status_change_handler+0xb0>)
100093a6:	4798      	blx	r3
100093a8:	481c      	ldr	r0, [pc, #112]	; (1000941c <ble_encryption_status_change_handler+0xb4>)
100093aa:	4b1d      	ldr	r3, [pc, #116]	; (10009420 <ble_encryption_status_change_handler+0xb8>)
100093ac:	4798      	blx	r3
		return AT_BLE_FAILURE;
100093ae:	25e2      	movs	r5, #226	; 0xe2
100093b0:	e02b      	b.n	1000940a <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
100093b2:	4818      	ldr	r0, [pc, #96]	; (10009414 <ble_encryption_status_change_handler+0xac>)
100093b4:	4b18      	ldr	r3, [pc, #96]	; (10009418 <ble_encryption_status_change_handler+0xb0>)
100093b6:	4798      	blx	r3
100093b8:	481a      	ldr	r0, [pc, #104]	; (10009424 <ble_encryption_status_change_handler+0xbc>)
100093ba:	4b19      	ldr	r3, [pc, #100]	; (10009420 <ble_encryption_status_change_handler+0xb8>)
100093bc:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
100093be:	4914      	ldr	r1, [pc, #80]	; (10009410 <ble_encryption_status_change_handler+0xa8>)
100093c0:	0163      	lsls	r3, r4, #5
100093c2:	1b1a      	subs	r2, r3, r4
100093c4:	0092      	lsls	r2, r2, #2
100093c6:	188a      	adds	r2, r1, r2
100093c8:	0010      	movs	r0, r2
100093ca:	305e      	adds	r0, #94	; 0x5e
100093cc:	2708      	movs	r7, #8
100093ce:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
100093d0:	78f0      	ldrb	r0, [r6, #3]
100093d2:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
100093d4:	78b2      	ldrb	r2, [r6, #2]
100093d6:	1b1c      	subs	r4, r3, r4
100093d8:	00a4      	lsls	r4, r4, #2
100093da:	190c      	adds	r4, r1, r4
100093dc:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
100093de:	e014      	b.n	1000940a <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
100093e0:	78b5      	ldrb	r5, [r6, #2]
100093e2:	2d00      	cmp	r5, #0
100093e4:	d0e5      	beq.n	100093b2 <ble_encryption_status_change_handler+0x4a>
100093e6:	e7d2      	b.n	1000938e <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
100093e8:	4e0a      	ldr	r6, [pc, #40]	; (10009414 <ble_encryption_status_change_handler+0xac>)
100093ea:	0030      	movs	r0, r6
100093ec:	4d0a      	ldr	r5, [pc, #40]	; (10009418 <ble_encryption_status_change_handler+0xb0>)
100093ee:	47a8      	blx	r5
100093f0:	480c      	ldr	r0, [pc, #48]	; (10009424 <ble_encryption_status_change_handler+0xbc>)
100093f2:	4c0b      	ldr	r4, [pc, #44]	; (10009420 <ble_encryption_status_change_handler+0xb8>)
100093f4:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
100093f6:	0030      	movs	r0, r6
100093f8:	47a8      	blx	r5
100093fa:	480b      	ldr	r0, [pc, #44]	; (10009428 <ble_encryption_status_change_handler+0xc0>)
100093fc:	47a0      	blx	r4
			return AT_BLE_FAILURE;
100093fe:	25e2      	movs	r5, #226	; 0xe2
10009400:	e003      	b.n	1000940a <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
10009402:	78b5      	ldrb	r5, [r6, #2]
10009404:	2d00      	cmp	r5, #0
10009406:	d1c2      	bne.n	1000938e <ble_encryption_status_change_handler+0x26>
10009408:	e7ee      	b.n	100093e8 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000940a:	0028      	movs	r0, r5
1000940c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000940e:	46c0      	nop			; (mov r8, r8)
10009410:	10013c3c 	.word	0x10013c3c
10009414:	100112b0 	.word	0x100112b0
10009418:	100100ed 	.word	0x100100ed
1000941c:	100117cc 	.word	0x100117cc
10009420:	1000ffcd 	.word	0x1000ffcd
10009424:	100117e0 	.word	0x100117e0
10009428:	10011804 	.word	0x10011804

1000942c <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000942c:	b510      	push	{r4, lr}
1000942e:	0001      	movs	r1, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
10009430:	4b15      	ldr	r3, [pc, #84]	; (10009488 <ble_scan_info_handler+0x5c>)
10009432:	781b      	ldrb	r3, [r3, #0]
10009434:	b2db      	uxtb	r3, r3
10009436:	2b13      	cmp	r3, #19
10009438:	d812      	bhi.n	10009460 <ble_scan_info_handler+0x34>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000943a:	4c13      	ldr	r4, [pc, #76]	; (10009488 <ble_scan_info_handler+0x5c>)
1000943c:	7823      	ldrb	r3, [r4, #0]
1000943e:	b2db      	uxtb	r3, r3
10009440:	0098      	lsls	r0, r3, #2
10009442:	18c0      	adds	r0, r0, r3
10009444:	00c0      	lsls	r0, r0, #3
10009446:	18c3      	adds	r3, r0, r3
10009448:	4810      	ldr	r0, [pc, #64]	; (1000948c <ble_scan_info_handler+0x60>)
1000944a:	1818      	adds	r0, r3, r0
1000944c:	2229      	movs	r2, #41	; 0x29
1000944e:	4b10      	ldr	r3, [pc, #64]	; (10009490 <ble_scan_info_handler+0x64>)
10009450:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
10009452:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
10009454:	7823      	ldrb	r3, [r4, #0]
10009456:	3301      	adds	r3, #1
10009458:	b2db      	uxtb	r3, r3
1000945a:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
1000945c:	2300      	movs	r3, #0
1000945e:	e011      	b.n	10009484 <ble_scan_info_handler+0x58>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
10009460:	480c      	ldr	r0, [pc, #48]	; (10009494 <ble_scan_info_handler+0x68>)
10009462:	4b0d      	ldr	r3, [pc, #52]	; (10009498 <ble_scan_info_handler+0x6c>)
10009464:	4798      	blx	r3
10009466:	480d      	ldr	r0, [pc, #52]	; (1000949c <ble_scan_info_handler+0x70>)
10009468:	4b0d      	ldr	r3, [pc, #52]	; (100094a0 <ble_scan_info_handler+0x74>)
1000946a:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000946c:	4b0d      	ldr	r3, [pc, #52]	; (100094a4 <ble_scan_info_handler+0x78>)
1000946e:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
10009470:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
10009472:	2800      	cmp	r0, #0
10009474:	d006      	beq.n	10009484 <ble_scan_info_handler+0x58>
		{
			DBG_LOG("Failed to stop scanning");
10009476:	4807      	ldr	r0, [pc, #28]	; (10009494 <ble_scan_info_handler+0x68>)
10009478:	4b07      	ldr	r3, [pc, #28]	; (10009498 <ble_scan_info_handler+0x6c>)
1000947a:	4798      	blx	r3
1000947c:	480a      	ldr	r0, [pc, #40]	; (100094a8 <ble_scan_info_handler+0x7c>)
1000947e:	4b08      	ldr	r3, [pc, #32]	; (100094a0 <ble_scan_info_handler+0x74>)
10009480:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
10009482:	23e2      	movs	r3, #226	; 0xe2
	}
}
10009484:	0018      	movs	r0, r3
10009486:	bd10      	pop	{r4, pc}
10009488:	10012a68 	.word	0x10012a68
1000948c:	10013f20 	.word	0x10013f20
10009490:	1000ffab 	.word	0x1000ffab
10009494:	100112b0 	.word	0x100112b0
10009498:	100100ed 	.word	0x100100ed
1000949c:	1001182c 	.word	0x1001182c
100094a0:	1000ffcd 	.word	0x1000ffcd
100094a4:	1000cf55 	.word	0x1000cf55
100094a8:	10011864 	.word	0x10011864

100094ac <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
100094ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100094ae:	464f      	mov	r7, r9
100094b0:	4646      	mov	r6, r8
100094b2:	b4c0      	push	{r6, r7}
100094b4:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
100094b6:	8841      	ldrh	r1, [r0, #2]
100094b8:	4b3a      	ldr	r3, [pc, #232]	; (100095a4 <ble_pair_done_handler+0xf8>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100094ba:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
100094bc:	891a      	ldrh	r2, [r3, #8]
100094be:	428a      	cmp	r2, r1
100094c0:	d104      	bne.n	100094cc <ble_pair_done_handler+0x20>
100094c2:	001a      	movs	r2, r3
100094c4:	325e      	adds	r2, #94	; 0x5e
100094c6:	7812      	ldrb	r2, [r2, #0]
100094c8:	2a03      	cmp	r2, #3
100094ca:	d062      	beq.n	10009592 <ble_pair_done_handler+0xe6>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100094cc:	3401      	adds	r4, #1
100094ce:	b2e4      	uxtb	r4, r4
100094d0:	337c      	adds	r3, #124	; 0x7c
100094d2:	2c05      	cmp	r4, #5
100094d4:	d1f2      	bne.n	100094bc <ble_pair_done_handler+0x10>
100094d6:	e02b      	b.n	10009530 <ble_pair_done_handler+0x84>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
100094d8:	0163      	lsls	r3, r4, #5
100094da:	1b1c      	subs	r4, r3, r4
100094dc:	00a4      	lsls	r4, r4, #2
100094de:	4b31      	ldr	r3, [pc, #196]	; (100095a4 <ble_pair_done_handler+0xf8>)
100094e0:	191c      	adds	r4, r3, r4
100094e2:	345e      	adds	r4, #94	; 0x5e
100094e4:	7823      	ldrb	r3, [r4, #0]
100094e6:	2b01      	cmp	r3, #1
100094e8:	d913      	bls.n	10009512 <ble_pair_done_handler+0x66>
			DBG_LOG("Pairing failed...Disconnecting");
100094ea:	482f      	ldr	r0, [pc, #188]	; (100095a8 <ble_pair_done_handler+0xfc>)
100094ec:	4b2f      	ldr	r3, [pc, #188]	; (100095ac <ble_pair_done_handler+0x100>)
100094ee:	4798      	blx	r3
100094f0:	482f      	ldr	r0, [pc, #188]	; (100095b0 <ble_pair_done_handler+0x104>)
100094f2:	4b30      	ldr	r3, [pc, #192]	; (100095b4 <ble_pair_done_handler+0x108>)
100094f4:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
100094f6:	8868      	ldrh	r0, [r5, #2]
100094f8:	2113      	movs	r1, #19
100094fa:	4b2f      	ldr	r3, [pc, #188]	; (100095b8 <ble_pair_done_handler+0x10c>)
100094fc:	4798      	blx	r3
100094fe:	1e06      	subs	r6, r0, #0
10009500:	d04b      	beq.n	1000959a <ble_pair_done_handler+0xee>
			{
				DBG_LOG("Disconnect Request Failed");
10009502:	4829      	ldr	r0, [pc, #164]	; (100095a8 <ble_pair_done_handler+0xfc>)
10009504:	4b29      	ldr	r3, [pc, #164]	; (100095ac <ble_pair_done_handler+0x100>)
10009506:	4798      	blx	r3
10009508:	482c      	ldr	r0, [pc, #176]	; (100095bc <ble_pair_done_handler+0x110>)
1000950a:	4b2a      	ldr	r3, [pc, #168]	; (100095b4 <ble_pair_done_handler+0x108>)
1000950c:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000950e:	26e2      	movs	r6, #226	; 0xe2
10009510:	e043      	b.n	1000959a <ble_pair_done_handler+0xee>
			}
		}
	}
	return AT_BLE_SUCCESS;
10009512:	2600      	movs	r6, #0
10009514:	e041      	b.n	1000959a <ble_pair_done_handler+0xee>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
10009516:	4e24      	ldr	r6, [pc, #144]	; (100095a8 <ble_pair_done_handler+0xfc>)
10009518:	0030      	movs	r0, r6
1000951a:	4d24      	ldr	r5, [pc, #144]	; (100095ac <ble_pair_done_handler+0x100>)
1000951c:	47a8      	blx	r5
1000951e:	4828      	ldr	r0, [pc, #160]	; (100095c0 <ble_pair_done_handler+0x114>)
10009520:	4c24      	ldr	r4, [pc, #144]	; (100095b4 <ble_pair_done_handler+0x108>)
10009522:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
10009524:	0030      	movs	r0, r6
10009526:	47a8      	blx	r5
10009528:	4826      	ldr	r0, [pc, #152]	; (100095c4 <ble_pair_done_handler+0x118>)
1000952a:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000952c:	26e2      	movs	r6, #226	; 0xe2
1000952e:	e034      	b.n	1000959a <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
10009530:	792b      	ldrb	r3, [r5, #4]
10009532:	2b00      	cmp	r3, #0
10009534:	d1d0      	bne.n	100094d8 <ble_pair_done_handler+0x2c>
10009536:	e7ee      	b.n	10009516 <ble_pair_done_handler+0x6a>
	{
		DBG_LOG("Pairing procedure completed successfully");
10009538:	481b      	ldr	r0, [pc, #108]	; (100095a8 <ble_pair_done_handler+0xfc>)
1000953a:	4b1c      	ldr	r3, [pc, #112]	; (100095ac <ble_pair_done_handler+0x100>)
1000953c:	4798      	blx	r3
1000953e:	4820      	ldr	r0, [pc, #128]	; (100095c0 <ble_pair_done_handler+0x114>)
10009540:	4b1c      	ldr	r3, [pc, #112]	; (100095b4 <ble_pair_done_handler+0x108>)
10009542:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
10009544:	782a      	ldrb	r2, [r5, #0]
10009546:	4b17      	ldr	r3, [pc, #92]	; (100095a4 <ble_pair_done_handler+0xf8>)
10009548:	4699      	mov	r9, r3
1000954a:	0167      	lsls	r7, r4, #5
1000954c:	1b3b      	subs	r3, r7, r4
1000954e:	009b      	lsls	r3, r3, #2
10009550:	444b      	add	r3, r9
10009552:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
10009554:	792a      	ldrb	r2, [r5, #4]
10009556:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
10009558:	335e      	adds	r3, #94	; 0x5e
1000955a:	2205      	movs	r2, #5
1000955c:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000955e:	1b38      	subs	r0, r7, r4
10009560:	0080      	lsls	r0, r0, #2
10009562:	4448      	add	r0, r9
10009564:	3036      	adds	r0, #54	; 0x36
10009566:	0029      	movs	r1, r5
10009568:	3122      	adds	r1, #34	; 0x22
1000956a:	320b      	adds	r2, #11
1000956c:	4b16      	ldr	r3, [pc, #88]	; (100095c8 <ble_pair_done_handler+0x11c>)
1000956e:	4698      	mov	r8, r3
10009570:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
10009572:	1b38      	subs	r0, r7, r4
10009574:	0080      	lsls	r0, r0, #2
10009576:	4448      	add	r0, r9
10009578:	3046      	adds	r0, #70	; 0x46
1000957a:	0029      	movs	r1, r5
1000957c:	3132      	adds	r1, #50	; 0x32
1000957e:	2217      	movs	r2, #23
10009580:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
10009582:	1b38      	subs	r0, r7, r4
10009584:	0080      	lsls	r0, r0, #2
10009586:	4448      	add	r0, r9
10009588:	301a      	adds	r0, #26
1000958a:	1da9      	adds	r1, r5, #6
1000958c:	221c      	movs	r2, #28
1000958e:	47c0      	blx	r8
10009590:	e003      	b.n	1000959a <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
10009592:	792e      	ldrb	r6, [r5, #4]
10009594:	2e00      	cmp	r6, #0
10009596:	d0cf      	beq.n	10009538 <ble_pair_done_handler+0x8c>
10009598:	e79e      	b.n	100094d8 <ble_pair_done_handler+0x2c>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000959a:	0030      	movs	r0, r6
1000959c:	bc0c      	pop	{r2, r3}
1000959e:	4690      	mov	r8, r2
100095a0:	4699      	mov	r9, r3
100095a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100095a4:	10013c3c 	.word	0x10013c3c
100095a8:	100112b0 	.word	0x100112b0
100095ac:	100100ed 	.word	0x100100ed
100095b0:	1001187c 	.word	0x1001187c
100095b4:	1000ffcd 	.word	0x1000ffcd
100095b8:	1000cf75 	.word	0x1000cf75
100095bc:	1001189c 	.word	0x1001189c
100095c0:	100118b8 	.word	0x100118b8
100095c4:	100118e4 	.word	0x100118e4
100095c8:	1000ffab 	.word	0x1000ffab

100095cc <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
100095cc:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
100095ce:	8800      	ldrh	r0, [r0, #0]
100095d0:	2378      	movs	r3, #120	; 0x78
100095d2:	2201      	movs	r2, #1
100095d4:	2101      	movs	r1, #1
100095d6:	4c02      	ldr	r4, [pc, #8]	; (100095e0 <ble_conn_param_update_req+0x14>)
100095d8:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
100095da:	2000      	movs	r0, #0
100095dc:	bd10      	pop	{r4, pc}
100095de:	46c0      	nop			; (mov r8, r8)
100095e0:	1000cf95 	.word	0x1000cf95

100095e4 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
100095e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100095e6:	4657      	mov	r7, sl
100095e8:	464e      	mov	r6, r9
100095ea:	4645      	mov	r5, r8
100095ec:	b4e0      	push	{r5, r6, r7}
100095ee:	b084      	sub	sp, #16
100095f0:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
100095f2:	2209      	movs	r2, #9
100095f4:	2100      	movs	r1, #0
100095f6:	a801      	add	r0, sp, #4
100095f8:	4b6b      	ldr	r3, [pc, #428]	; (100097a8 <ble_slave_security_request_handler+0x1c4>)
100095fa:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
100095fc:	8825      	ldrh	r5, [r4, #0]
100095fe:	496b      	ldr	r1, [pc, #428]	; (100097ac <ble_slave_security_request_handler+0x1c8>)
10009600:	000a      	movs	r2, r1
10009602:	2300      	movs	r3, #0
10009604:	8910      	ldrh	r0, [r2, #8]
10009606:	42a8      	cmp	r0, r5
10009608:	d116      	bne.n	10009638 <ble_slave_security_request_handler+0x54>
1000960a:	0010      	movs	r0, r2
1000960c:	305e      	adds	r0, #94	; 0x5e
1000960e:	7800      	ldrb	r0, [r0, #0]
10009610:	2802      	cmp	r0, #2
10009612:	d111      	bne.n	10009638 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
10009614:	4865      	ldr	r0, [pc, #404]	; (100097ac <ble_slave_security_request_handler+0x1c8>)
10009616:	015a      	lsls	r2, r3, #5
10009618:	1ad6      	subs	r6, r2, r3
1000961a:	00b6      	lsls	r6, r6, #2
1000961c:	1986      	adds	r6, r0, r6
1000961e:	365e      	adds	r6, #94	; 0x5e
10009620:	2206      	movs	r2, #6
10009622:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
10009624:	32f9      	adds	r2, #249	; 0xf9
10009626:	4013      	ands	r3, r2
10009628:	015a      	lsls	r2, r3, #5
1000962a:	1ad2      	subs	r2, r2, r3
1000962c:	0092      	lsls	r2, r2, #2
1000962e:	1882      	adds	r2, r0, r2
10009630:	7d12      	ldrb	r2, [r2, #20]
10009632:	07d0      	lsls	r0, r2, #31
10009634:	d405      	bmi.n	10009642 <ble_slave_security_request_handler+0x5e>
10009636:	e01b      	b.n	10009670 <ble_slave_security_request_handler+0x8c>
10009638:	3301      	adds	r3, #1
1000963a:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000963c:	2b05      	cmp	r3, #5
1000963e:	d1e1      	bne.n	10009604 <ble_slave_security_request_handler+0x20>
10009640:	e01e      	b.n	10009680 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
10009642:	78e0      	ldrb	r0, [r4, #3]
10009644:	2800      	cmp	r0, #0
10009646:	d013      	beq.n	10009670 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
10009648:	0159      	lsls	r1, r3, #5
1000964a:	1ac9      	subs	r1, r1, r3
1000964c:	008b      	lsls	r3, r1, #2
1000964e:	4957      	ldr	r1, [pc, #348]	; (100097ac <ble_slave_security_request_handler+0x1c8>)
10009650:	18c9      	adds	r1, r1, r3
10009652:	311a      	adds	r1, #26
10009654:	8820      	ldrh	r0, [r4, #0]
10009656:	4b56      	ldr	r3, [pc, #344]	; (100097b0 <ble_slave_security_request_handler+0x1cc>)
10009658:	4798      	blx	r3
1000965a:	2800      	cmp	r0, #0
1000965c:	d100      	bne.n	10009660 <ble_slave_security_request_handler+0x7c>
1000965e:	e09d      	b.n	1000979c <ble_slave_security_request_handler+0x1b8>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
10009660:	4854      	ldr	r0, [pc, #336]	; (100097b4 <ble_slave_security_request_handler+0x1d0>)
10009662:	4b55      	ldr	r3, [pc, #340]	; (100097b8 <ble_slave_security_request_handler+0x1d4>)
10009664:	4798      	blx	r3
10009666:	4855      	ldr	r0, [pc, #340]	; (100097bc <ble_slave_security_request_handler+0x1d8>)
10009668:	4b55      	ldr	r3, [pc, #340]	; (100097c0 <ble_slave_security_request_handler+0x1dc>)
1000966a:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000966c:	20e2      	movs	r0, #226	; 0xe2
1000966e:	e095      	b.n	1000979c <ble_slave_security_request_handler+0x1b8>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
10009670:	015a      	lsls	r2, r3, #5
10009672:	1ad3      	subs	r3, r2, r3
10009674:	009b      	lsls	r3, r3, #2
10009676:	4a4d      	ldr	r2, [pc, #308]	; (100097ac <ble_slave_security_request_handler+0x1c8>)
10009678:	18d3      	adds	r3, r2, r3
1000967a:	335e      	adds	r3, #94	; 0x5e
1000967c:	2202      	movs	r2, #2
1000967e:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009680:	8825      	ldrh	r5, [r4, #0]
10009682:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009684:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009686:	0016      	movs	r6, r2
10009688:	8908      	ldrh	r0, [r1, #8]
1000968a:	42a8      	cmp	r0, r5
1000968c:	d10d      	bne.n	100096aa <ble_slave_security_request_handler+0xc6>
1000968e:	0008      	movs	r0, r1
10009690:	305e      	adds	r0, #94	; 0x5e
10009692:	7800      	ldrb	r0, [r0, #0]
10009694:	2802      	cmp	r0, #2
10009696:	d108      	bne.n	100096aa <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
10009698:	0152      	lsls	r2, r2, #5
1000969a:	1b92      	subs	r2, r2, r6
1000969c:	0096      	lsls	r6, r2, #2
1000969e:	4a43      	ldr	r2, [pc, #268]	; (100097ac <ble_slave_security_request_handler+0x1c8>)
100096a0:	1992      	adds	r2, r2, r6
100096a2:	325e      	adds	r2, #94	; 0x5e
100096a4:	2103      	movs	r1, #3
100096a6:	7011      	strb	r1, [r2, #0]
			break;
100096a8:	e005      	b.n	100096b6 <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100096aa:	3301      	adds	r3, #1
100096ac:	b2db      	uxtb	r3, r3
100096ae:	3201      	adds	r2, #1
100096b0:	317c      	adds	r1, #124	; 0x7c
100096b2:	2b05      	cmp	r3, #5
100096b4:	d1e7      	bne.n	10009686 <ble_slave_security_request_handler+0xa2>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
100096b6:	aa01      	add	r2, sp, #4
100096b8:	2102      	movs	r1, #2
100096ba:	7211      	strb	r1, [r2, #8]
	features.bond = slave_sec_req->bond;
100096bc:	78e1      	ldrb	r1, [r4, #3]
100096be:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
100096c0:	2101      	movs	r1, #1
100096c2:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
100096c4:	3103      	adds	r1, #3
100096c6:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
100096c8:	001f      	movs	r7, r3
100096ca:	015a      	lsls	r2, r3, #5
100096cc:	1ad2      	subs	r2, r2, r3
100096ce:	0092      	lsls	r2, r2, #2
100096d0:	4936      	ldr	r1, [pc, #216]	; (100097ac <ble_slave_security_request_handler+0x1c8>)
100096d2:	5c52      	ldrb	r2, [r2, r1]
100096d4:	2a02      	cmp	r2, #2
100096d6:	d104      	bne.n	100096e2 <ble_slave_security_request_handler+0xfe>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
100096d8:	aa01      	add	r2, sp, #4
100096da:	2103      	movs	r1, #3
100096dc:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
100096de:	71d1      	strb	r1, [r2, #7]
100096e0:	e003      	b.n	100096ea <ble_slave_security_request_handler+0x106>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
100096e2:	aa01      	add	r2, sp, #4
100096e4:	2101      	movs	r1, #1
100096e6:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
100096e8:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
100096ea:	aa01      	add	r2, sp, #4
100096ec:	2110      	movs	r1, #16
100096ee:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
100096f0:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
100096f2:	017a      	lsls	r2, r7, #5
100096f4:	1bd2      	subs	r2, r2, r7
100096f6:	0092      	lsls	r2, r2, #2
100096f8:	492c      	ldr	r1, [pc, #176]	; (100097ac <ble_slave_security_request_handler+0x1c8>)
100096fa:	188a      	adds	r2, r1, r2
100096fc:	7e12      	ldrb	r2, [r2, #24]
100096fe:	2a40      	cmp	r2, #64	; 0x40
10009700:	d134      	bne.n	1000976c <ble_slave_security_request_handler+0x188>
10009702:	015a      	lsls	r2, r3, #5
10009704:	1ad3      	subs	r3, r2, r3
10009706:	009b      	lsls	r3, r3, #2
10009708:	469a      	mov	sl, r3
1000970a:	001e      	movs	r6, r3
1000970c:	3660      	adds	r6, #96	; 0x60
1000970e:	1876      	adds	r6, r6, r1
10009710:	4655      	mov	r5, sl
10009712:	3568      	adds	r5, #104	; 0x68
10009714:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009716:	4b2b      	ldr	r3, [pc, #172]	; (100097c4 <ble_slave_security_request_handler+0x1e0>)
10009718:	4699      	mov	r9, r3
1000971a:	230f      	movs	r3, #15
1000971c:	4698      	mov	r8, r3
1000971e:	47c8      	blx	r9
10009720:	4643      	mov	r3, r8
10009722:	4018      	ands	r0, r3
10009724:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
10009726:	47c8      	blx	r9
10009728:	4643      	mov	r3, r8
1000972a:	4018      	ands	r0, r3
1000972c:	74b0      	strb	r0, [r6, #18]
1000972e:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
10009730:	42ae      	cmp	r6, r5
10009732:	d1f4      	bne.n	1000971e <ble_slave_security_request_handler+0x13a>
10009734:	4656      	mov	r6, sl
10009736:	3670      	adds	r6, #112	; 0x70
10009738:	4a1c      	ldr	r2, [pc, #112]	; (100097ac <ble_slave_security_request_handler+0x1c8>)
1000973a:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000973c:	4b21      	ldr	r3, [pc, #132]	; (100097c4 <ble_slave_security_request_handler+0x1e0>)
1000973e:	4699      	mov	r9, r3
10009740:	230f      	movs	r3, #15
10009742:	4698      	mov	r8, r3
10009744:	47c8      	blx	r9
10009746:	4643      	mov	r3, r8
10009748:	4018      	ands	r0, r3
1000974a:	7028      	strb	r0, [r5, #0]
1000974c:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000974e:	42b5      	cmp	r5, r6
10009750:	d1f8      	bne.n	10009744 <ble_slave_security_request_handler+0x160>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
10009752:	4b1c      	ldr	r3, [pc, #112]	; (100097c4 <ble_slave_security_request_handler+0x1e0>)
10009754:	4798      	blx	r3
10009756:	017b      	lsls	r3, r7, #5
10009758:	1bdb      	subs	r3, r3, r7
1000975a:	009b      	lsls	r3, r3, #2
1000975c:	4a13      	ldr	r2, [pc, #76]	; (100097ac <ble_slave_security_request_handler+0x1c8>)
1000975e:	18d3      	adds	r3, r2, r3
10009760:	001a      	movs	r2, r3
10009762:	3270      	adds	r2, #112	; 0x70
10009764:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
10009766:	337a      	adds	r3, #122	; 0x7a
10009768:	2210      	movs	r2, #16
1000976a:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000976c:	017a      	lsls	r2, r7, #5
1000976e:	1bd7      	subs	r7, r2, r7
10009770:	00bf      	lsls	r7, r7, #2
10009772:	3760      	adds	r7, #96	; 0x60
10009774:	4a0d      	ldr	r2, [pc, #52]	; (100097ac <ble_slave_security_request_handler+0x1c8>)
10009776:	18ba      	adds	r2, r7, r2
10009778:	8820      	ldrh	r0, [r4, #0]
1000977a:	2300      	movs	r3, #0
1000977c:	a901      	add	r1, sp, #4
1000977e:	4c12      	ldr	r4, [pc, #72]	; (100097c8 <ble_slave_security_request_handler+0x1e4>)
10009780:	47a0      	blx	r4
10009782:	2800      	cmp	r0, #0
10009784:	d00a      	beq.n	1000979c <ble_slave_security_request_handler+0x1b8>
	{
		features.bond = false;
10009786:	ab01      	add	r3, sp, #4
10009788:	2200      	movs	r2, #0
1000978a:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000978c:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000978e:	4809      	ldr	r0, [pc, #36]	; (100097b4 <ble_slave_security_request_handler+0x1d0>)
10009790:	4b09      	ldr	r3, [pc, #36]	; (100097b8 <ble_slave_security_request_handler+0x1d4>)
10009792:	4798      	blx	r3
10009794:	480d      	ldr	r0, [pc, #52]	; (100097cc <ble_slave_security_request_handler+0x1e8>)
10009796:	4b0a      	ldr	r3, [pc, #40]	; (100097c0 <ble_slave_security_request_handler+0x1dc>)
10009798:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000979a:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000979c:	b004      	add	sp, #16
1000979e:	bc1c      	pop	{r2, r3, r4}
100097a0:	4690      	mov	r8, r2
100097a2:	4699      	mov	r9, r3
100097a4:	46a2      	mov	sl, r4
100097a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100097a8:	1000ffbd 	.word	0x1000ffbd
100097ac:	10013c3c 	.word	0x10013c3c
100097b0:	1000d4cd 	.word	0x1000d4cd
100097b4:	100112b0 	.word	0x100112b0
100097b8:	100100ed 	.word	0x100100ed
100097bc:	10011914 	.word	0x10011914
100097c0:	1000ffcd 	.word	0x1000ffcd
100097c4:	10010101 	.word	0x10010101
100097c8:	1000d2e1 	.word	0x1000d2e1
100097cc:	1001192c 	.word	0x1001192c

100097d0 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
100097d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100097d2:	465f      	mov	r7, fp
100097d4:	4656      	mov	r6, sl
100097d6:	464d      	mov	r5, r9
100097d8:	4644      	mov	r4, r8
100097da:	b4f0      	push	{r4, r5, r6, r7}
100097dc:	b085      	sub	sp, #20
100097de:	4683      	mov	fp, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
100097e0:	8804      	ldrh	r4, [r0, #0]
100097e2:	4a49      	ldr	r2, [pc, #292]	; (10009908 <ble_pair_request_handler+0x138>)
100097e4:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100097e6:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
100097e8:	8910      	ldrh	r0, [r2, #8]
100097ea:	42a0      	cmp	r0, r4
100097ec:	d10d      	bne.n	1000980a <ble_pair_request_handler+0x3a>
100097ee:	0010      	movs	r0, r2
100097f0:	305e      	adds	r0, #94	; 0x5e
100097f2:	7800      	ldrb	r0, [r0, #0]
100097f4:	2802      	cmp	r0, #2
100097f6:	d108      	bne.n	1000980a <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
100097f8:	014a      	lsls	r2, r1, #5
100097fa:	1a52      	subs	r2, r2, r1
100097fc:	0095      	lsls	r5, r2, #2
100097fe:	4a42      	ldr	r2, [pc, #264]	; (10009908 <ble_pair_request_handler+0x138>)
10009800:	1952      	adds	r2, r2, r5
10009802:	325e      	adds	r2, #94	; 0x5e
10009804:	2103      	movs	r1, #3
10009806:	7011      	strb	r1, [r2, #0]
			break;
10009808:	e005      	b.n	10009816 <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000980a:	3301      	adds	r3, #1
1000980c:	b2db      	uxtb	r3, r3
1000980e:	3101      	adds	r1, #1
10009810:	327c      	adds	r2, #124	; 0x7c
10009812:	2b05      	cmp	r3, #5
10009814:	d1e8      	bne.n	100097e8 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
10009816:	aa01      	add	r2, sp, #4
10009818:	2102      	movs	r1, #2
1000981a:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000981c:	3901      	subs	r1, #1
1000981e:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
10009820:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
10009822:	2100      	movs	r1, #0
10009824:	7011      	strb	r1, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
10009826:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
10009828:	001f      	movs	r7, r3
1000982a:	015a      	lsls	r2, r3, #5
1000982c:	1ad2      	subs	r2, r2, r3
1000982e:	0092      	lsls	r2, r2, #2
10009830:	4935      	ldr	r1, [pc, #212]	; (10009908 <ble_pair_request_handler+0x138>)
10009832:	5c52      	ldrb	r2, [r2, r1]
10009834:	2a02      	cmp	r2, #2
10009836:	d104      	bne.n	10009842 <ble_pair_request_handler+0x72>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009838:	aa01      	add	r2, sp, #4
1000983a:	2103      	movs	r1, #3
1000983c:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000983e:	71d1      	strb	r1, [r2, #7]
10009840:	e003      	b.n	1000984a <ble_pair_request_handler+0x7a>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
10009842:	aa01      	add	r2, sp, #4
10009844:	2101      	movs	r1, #1
10009846:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
10009848:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000984a:	aa01      	add	r2, sp, #4
1000984c:	2110      	movs	r1, #16
1000984e:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
10009850:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
10009852:	017a      	lsls	r2, r7, #5
10009854:	1bd2      	subs	r2, r2, r7
10009856:	0092      	lsls	r2, r2, #2
10009858:	492b      	ldr	r1, [pc, #172]	; (10009908 <ble_pair_request_handler+0x138>)
1000985a:	188a      	adds	r2, r1, r2
1000985c:	7e12      	ldrb	r2, [r2, #24]
1000985e:	2a40      	cmp	r2, #64	; 0x40
10009860:	d131      	bne.n	100098c6 <ble_pair_request_handler+0xf6>
10009862:	015a      	lsls	r2, r3, #5
10009864:	1ad3      	subs	r3, r2, r3
10009866:	009b      	lsls	r3, r3, #2
10009868:	469a      	mov	sl, r3
1000986a:	001d      	movs	r5, r3
1000986c:	3560      	adds	r5, #96	; 0x60
1000986e:	186d      	adds	r5, r5, r1
10009870:	4654      	mov	r4, sl
10009872:	3468      	adds	r4, #104	; 0x68
10009874:	1864      	adds	r4, r4, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009876:	4b25      	ldr	r3, [pc, #148]	; (1000990c <ble_pair_request_handler+0x13c>)
10009878:	4699      	mov	r9, r3
1000987a:	260f      	movs	r6, #15
1000987c:	47c8      	blx	r9
1000987e:	4030      	ands	r0, r6
10009880:	7028      	strb	r0, [r5, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
10009882:	47c8      	blx	r9
10009884:	4030      	ands	r0, r6
10009886:	74a8      	strb	r0, [r5, #18]
10009888:	3501      	adds	r5, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000988a:	42a5      	cmp	r5, r4
1000988c:	d1f6      	bne.n	1000987c <ble_pair_request_handler+0xac>
1000988e:	4655      	mov	r5, sl
10009890:	3570      	adds	r5, #112	; 0x70
10009892:	4a1d      	ldr	r2, [pc, #116]	; (10009908 <ble_pair_request_handler+0x138>)
10009894:	18ad      	adds	r5, r5, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009896:	4b1d      	ldr	r3, [pc, #116]	; (1000990c <ble_pair_request_handler+0x13c>)
10009898:	4699      	mov	r9, r3
1000989a:	230f      	movs	r3, #15
1000989c:	4698      	mov	r8, r3
1000989e:	47c8      	blx	r9
100098a0:	4643      	mov	r3, r8
100098a2:	4018      	ands	r0, r3
100098a4:	7020      	strb	r0, [r4, #0]
100098a6:	3401      	adds	r4, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
100098a8:	42ac      	cmp	r4, r5
100098aa:	d1f8      	bne.n	1000989e <ble_pair_request_handler+0xce>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
100098ac:	4b17      	ldr	r3, [pc, #92]	; (1000990c <ble_pair_request_handler+0x13c>)
100098ae:	4798      	blx	r3
100098b0:	017b      	lsls	r3, r7, #5
100098b2:	1bdb      	subs	r3, r3, r7
100098b4:	009b      	lsls	r3, r3, #2
100098b6:	4a14      	ldr	r2, [pc, #80]	; (10009908 <ble_pair_request_handler+0x138>)
100098b8:	18d3      	adds	r3, r2, r3
100098ba:	001a      	movs	r2, r3
100098bc:	3270      	adds	r2, #112	; 0x70
100098be:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
100098c0:	337a      	adds	r3, #122	; 0x7a
100098c2:	2210      	movs	r2, #16
100098c4:	701a      	strb	r2, [r3, #0]
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
100098c6:	017a      	lsls	r2, r7, #5
100098c8:	1bd7      	subs	r7, r2, r7
100098ca:	00bf      	lsls	r7, r7, #2
100098cc:	3760      	adds	r7, #96	; 0x60
100098ce:	4a0e      	ldr	r2, [pc, #56]	; (10009908 <ble_pair_request_handler+0x138>)
100098d0:	18ba      	adds	r2, r7, r2
100098d2:	465b      	mov	r3, fp
100098d4:	8818      	ldrh	r0, [r3, #0]
100098d6:	2300      	movs	r3, #0
100098d8:	a901      	add	r1, sp, #4
100098da:	4c0d      	ldr	r4, [pc, #52]	; (10009910 <ble_pair_request_handler+0x140>)
100098dc:	47a0      	blx	r4
100098de:	2800      	cmp	r0, #0
100098e0:	d00a      	beq.n	100098f8 <ble_pair_request_handler+0x128>
	{
		features.bond = false;
100098e2:	ab01      	add	r3, sp, #4
100098e4:	2200      	movs	r2, #0
100098e6:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
100098e8:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
100098ea:	480a      	ldr	r0, [pc, #40]	; (10009914 <ble_pair_request_handler+0x144>)
100098ec:	4b0a      	ldr	r3, [pc, #40]	; (10009918 <ble_pair_request_handler+0x148>)
100098ee:	4798      	blx	r3
100098f0:	480a      	ldr	r0, [pc, #40]	; (1000991c <ble_pair_request_handler+0x14c>)
100098f2:	4b0b      	ldr	r3, [pc, #44]	; (10009920 <ble_pair_request_handler+0x150>)
100098f4:	4798      	blx	r3
		return AT_BLE_FAILURE;
100098f6:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
100098f8:	b005      	add	sp, #20
100098fa:	bc3c      	pop	{r2, r3, r4, r5}
100098fc:	4690      	mov	r8, r2
100098fe:	4699      	mov	r9, r3
10009900:	46a2      	mov	sl, r4
10009902:	46ab      	mov	fp, r5
10009904:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009906:	46c0      	nop			; (mov r8, r8)
10009908:	10013c3c 	.word	0x10013c3c
1000990c:	10010101 	.word	0x10010101
10009910:	1000d2e1 	.word	0x1000d2e1
10009914:	100112b0 	.word	0x100112b0
10009918:	100100ed 	.word	0x100100ed
1000991c:	10011958 	.word	0x10011958
10009920:	1000ffcd 	.word	0x1000ffcd

10009924 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
10009924:	b5f0      	push	{r4, r5, r6, r7, lr}
10009926:	b085      	sub	sp, #20
10009928:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000992a:	2206      	movs	r2, #6
1000992c:	493d      	ldr	r1, [pc, #244]	; (10009a24 <ble_pair_key_request_handler+0x100>)
1000992e:	a802      	add	r0, sp, #8
10009930:	4e3d      	ldr	r6, [pc, #244]	; (10009a28 <ble_pair_key_request_handler+0x104>)
10009932:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
10009934:	ac01      	add	r4, sp, #4
10009936:	2204      	movs	r2, #4
10009938:	0029      	movs	r1, r5
1000993a:	0020      	movs	r0, r4
1000993c:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000993e:	78e3      	ldrb	r3, [r4, #3]
10009940:	2b00      	cmp	r3, #0
10009942:	d162      	bne.n	10009a0a <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
10009944:	4839      	ldr	r0, [pc, #228]	; (10009a2c <ble_pair_key_request_handler+0x108>)
10009946:	4b3a      	ldr	r3, [pc, #232]	; (10009a30 <ble_pair_key_request_handler+0x10c>)
10009948:	4798      	blx	r3
1000994a:	483a      	ldr	r0, [pc, #232]	; (10009a34 <ble_pair_key_request_handler+0x110>)
1000994c:	4b3a      	ldr	r3, [pc, #232]	; (10009a38 <ble_pair_key_request_handler+0x114>)
1000994e:	4798      	blx	r3
10009950:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
10009952:	4c3a      	ldr	r4, [pc, #232]	; (10009a3c <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
10009954:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
10009956:	201e      	movs	r0, #30
10009958:	47a0      	blx	r4
1000995a:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000995c:	2b00      	cmp	r3, #0
1000995e:	d11a      	bne.n	10009996 <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
10009960:	4f32      	ldr	r7, [pc, #200]	; (10009a2c <ble_pair_key_request_handler+0x108>)
10009962:	0038      	movs	r0, r7
10009964:	4e32      	ldr	r6, [pc, #200]	; (10009a30 <ble_pair_key_request_handler+0x10c>)
10009966:	47b0      	blx	r6
10009968:	4835      	ldr	r0, [pc, #212]	; (10009a40 <ble_pair_key_request_handler+0x11c>)
1000996a:	4c33      	ldr	r4, [pc, #204]	; (10009a38 <ble_pair_key_request_handler+0x114>)
1000996c:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000996e:	0038      	movs	r0, r7
10009970:	47b0      	blx	r6
10009972:	4834      	ldr	r0, [pc, #208]	; (10009a44 <ble_pair_key_request_handler+0x120>)
10009974:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
10009976:	8828      	ldrh	r0, [r5, #0]
10009978:	2113      	movs	r1, #19
1000997a:	4b33      	ldr	r3, [pc, #204]	; (10009a48 <ble_pair_key_request_handler+0x124>)
1000997c:	4798      	blx	r3
1000997e:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
10009980:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
10009982:	2b00      	cmp	r3, #0
10009984:	d04c      	beq.n	10009a20 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
10009986:	4829      	ldr	r0, [pc, #164]	; (10009a2c <ble_pair_key_request_handler+0x108>)
10009988:	4b29      	ldr	r3, [pc, #164]	; (10009a30 <ble_pair_key_request_handler+0x10c>)
1000998a:	4798      	blx	r3
1000998c:	482f      	ldr	r0, [pc, #188]	; (10009a4c <ble_pair_key_request_handler+0x128>)
1000998e:	4b2a      	ldr	r3, [pc, #168]	; (10009a38 <ble_pair_key_request_handler+0x114>)
10009990:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
10009992:	20e2      	movs	r0, #226	; 0xe2
10009994:	e044      	b.n	10009a20 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
10009996:	001a      	movs	r2, r3
10009998:	3a30      	subs	r2, #48	; 0x30
1000999a:	2a09      	cmp	r2, #9
1000999c:	d8db      	bhi.n	10009956 <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000999e:	aa02      	add	r2, sp, #8
100099a0:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
100099a2:	4038      	ands	r0, r7
100099a4:	4b2a      	ldr	r3, [pc, #168]	; (10009a50 <ble_pair_key_request_handler+0x12c>)
100099a6:	4798      	blx	r3
100099a8:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
100099aa:	2e06      	cmp	r6, #6
100099ac:	d026      	beq.n	100099fc <ble_pair_key_request_handler+0xd8>
100099ae:	e7d2      	b.n	10009956 <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
100099b0:	481e      	ldr	r0, [pc, #120]	; (10009a2c <ble_pair_key_request_handler+0x108>)
100099b2:	4b1f      	ldr	r3, [pc, #124]	; (10009a30 <ble_pair_key_request_handler+0x10c>)
100099b4:	4798      	blx	r3
100099b6:	4827      	ldr	r0, [pc, #156]	; (10009a54 <ble_pair_key_request_handler+0x130>)
100099b8:	4b1f      	ldr	r3, [pc, #124]	; (10009a38 <ble_pair_key_request_handler+0x114>)
100099ba:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
100099bc:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
100099be:	4e24      	ldr	r6, [pc, #144]	; (10009a50 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
100099c0:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
100099c2:	5ce0      	ldrb	r0, [r4, r3]
100099c4:	47b0      	blx	r6
100099c6:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
100099c8:	2c06      	cmp	r4, #6
100099ca:	d1f9      	bne.n	100099c0 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
100099cc:	ab01      	add	r3, sp, #4
100099ce:	7899      	ldrb	r1, [r3, #2]
100099d0:	8828      	ldrh	r0, [r5, #0]
100099d2:	aa02      	add	r2, sp, #8
100099d4:	4b20      	ldr	r3, [pc, #128]	; (10009a58 <ble_pair_key_request_handler+0x134>)
100099d6:	4798      	blx	r3
100099d8:	2800      	cmp	r0, #0
100099da:	d021      	beq.n	10009a20 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
100099dc:	4813      	ldr	r0, [pc, #76]	; (10009a2c <ble_pair_key_request_handler+0x108>)
100099de:	4b14      	ldr	r3, [pc, #80]	; (10009a30 <ble_pair_key_request_handler+0x10c>)
100099e0:	4798      	blx	r3
100099e2:	481e      	ldr	r0, [pc, #120]	; (10009a5c <ble_pair_key_request_handler+0x138>)
100099e4:	4b14      	ldr	r3, [pc, #80]	; (10009a38 <ble_pair_key_request_handler+0x114>)
100099e6:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
100099e8:	2000      	movs	r0, #0
100099ea:	e019      	b.n	10009a20 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
100099ec:	480f      	ldr	r0, [pc, #60]	; (10009a2c <ble_pair_key_request_handler+0x108>)
100099ee:	4b10      	ldr	r3, [pc, #64]	; (10009a30 <ble_pair_key_request_handler+0x10c>)
100099f0:	4798      	blx	r3
100099f2:	481b      	ldr	r0, [pc, #108]	; (10009a60 <ble_pair_key_request_handler+0x13c>)
100099f4:	4b10      	ldr	r3, [pc, #64]	; (10009a38 <ble_pair_key_request_handler+0x114>)
100099f6:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
100099f8:	2000      	movs	r0, #0
100099fa:	e011      	b.n	10009a20 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
100099fc:	480b      	ldr	r0, [pc, #44]	; (10009a2c <ble_pair_key_request_handler+0x108>)
100099fe:	4b0c      	ldr	r3, [pc, #48]	; (10009a30 <ble_pair_key_request_handler+0x10c>)
10009a00:	4798      	blx	r3
10009a02:	4818      	ldr	r0, [pc, #96]	; (10009a64 <ble_pair_key_request_handler+0x140>)
10009a04:	4b0c      	ldr	r3, [pc, #48]	; (10009a38 <ble_pair_key_request_handler+0x114>)
10009a06:	4798      	blx	r3
10009a08:	e7d8      	b.n	100099bc <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
10009a0a:	ab01      	add	r3, sp, #4
10009a0c:	885a      	ldrh	r2, [r3, #2]
10009a0e:	2380      	movs	r3, #128	; 0x80
10009a10:	005b      	lsls	r3, r3, #1
10009a12:	429a      	cmp	r2, r3
10009a14:	d0cc      	beq.n	100099b0 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
10009a16:	ab01      	add	r3, sp, #4
10009a18:	789b      	ldrb	r3, [r3, #2]
10009a1a:	2b01      	cmp	r3, #1
10009a1c:	d0e6      	beq.n	100099ec <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
10009a1e:	2000      	movs	r0, #0
}
10009a20:	b005      	add	sp, #20
10009a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009a24:	1001170c 	.word	0x1001170c
10009a28:	1000ffab 	.word	0x1000ffab
10009a2c:	100112b0 	.word	0x100112b0
10009a30:	100100ed 	.word	0x100100ed
10009a34:	10011980 	.word	0x10011980
10009a38:	1000ffcd 	.word	0x1000ffcd
10009a3c:	1000a3d5 	.word	0x1000a3d5
10009a40:	100119a8 	.word	0x100119a8
10009a44:	100119b4 	.word	0x100119b4
10009a48:	1000cf75 	.word	0x1000cf75
10009a4c:	1001189c 	.word	0x1001189c
10009a50:	10010001 	.word	0x10010001
10009a54:	100119c8 	.word	0x100119c8
10009a58:	1000d411 	.word	0x1000d411
10009a5c:	10011a00 	.word	0x10011a00
10009a60:	10011a18 	.word	0x10011a18
10009a64:	10011a34 	.word	0x10011a34

10009a68 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
10009a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009a6a:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
10009a6c:	8805      	ldrh	r5, [r0, #0]
10009a6e:	4b2f      	ldr	r3, [pc, #188]	; (10009b2c <ble_encryption_request_handler+0xc4>)
10009a70:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009a72:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
10009a74:	0010      	movs	r0, r2
10009a76:	8919      	ldrh	r1, [r3, #8]
10009a78:	42a9      	cmp	r1, r5
10009a7a:	d116      	bne.n	10009aaa <ble_encryption_request_handler+0x42>
10009a7c:	0019      	movs	r1, r3
10009a7e:	315e      	adds	r1, #94	; 0x5e
10009a80:	7809      	ldrb	r1, [r1, #0]
10009a82:	2901      	cmp	r1, #1
10009a84:	d911      	bls.n	10009aaa <ble_encryption_request_handler+0x42>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
10009a86:	4929      	ldr	r1, [pc, #164]	; (10009b2c <ble_encryption_request_handler+0xc4>)
10009a88:	0152      	lsls	r2, r2, #5
10009a8a:	1a10      	subs	r0, r2, r0
10009a8c:	0080      	lsls	r0, r0, #2
10009a8e:	1808      	adds	r0, r1, r0
10009a90:	305e      	adds	r0, #94	; 0x5e
10009a92:	2306      	movs	r3, #6
10009a94:	7003      	strb	r3, [r0, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
10009a96:	0162      	lsls	r2, r4, #5
10009a98:	1b13      	subs	r3, r2, r4
10009a9a:	009b      	lsls	r3, r3, #2
10009a9c:	18cb      	adds	r3, r1, r3
10009a9e:	3370      	adds	r3, #112	; 0x70
10009aa0:	881a      	ldrh	r2, [r3, #0]
10009aa2:	8873      	ldrh	r3, [r6, #2]
10009aa4:	429a      	cmp	r2, r3
10009aa6:	d113      	bne.n	10009ad0 <ble_encryption_request_handler+0x68>
10009aa8:	e006      	b.n	10009ab8 <ble_encryption_request_handler+0x50>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009aaa:	3401      	adds	r4, #1
10009aac:	b2e4      	uxtb	r4, r4
10009aae:	3201      	adds	r2, #1
10009ab0:	337c      	adds	r3, #124	; 0x7c
10009ab2:	2c05      	cmp	r4, #5
10009ab4:	d1de      	bne.n	10009a74 <ble_encryption_request_handler+0xc>
10009ab6:	e00b      	b.n	10009ad0 <ble_encryption_request_handler+0x68>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
10009ab8:	0161      	lsls	r1, r4, #5
10009aba:	1b09      	subs	r1, r1, r4
10009abc:	0089      	lsls	r1, r1, #2
10009abe:	4b1b      	ldr	r3, [pc, #108]	; (10009b2c <ble_encryption_request_handler+0xc4>)
10009ac0:	1859      	adds	r1, r3, r1
10009ac2:	3172      	adds	r1, #114	; 0x72
10009ac4:	1d30      	adds	r0, r6, #4
10009ac6:	2208      	movs	r2, #8
10009ac8:	4b19      	ldr	r3, [pc, #100]	; (10009b30 <ble_encryption_request_handler+0xc8>)
10009aca:	4798      	blx	r3
			DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
10009acc:	2800      	cmp	r0, #0
10009ace:	d015      	beq.n	10009afc <ble_encryption_request_handler+0x94>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
10009ad0:	4f18      	ldr	r7, [pc, #96]	; (10009b34 <ble_encryption_request_handler+0xcc>)
10009ad2:	0038      	movs	r0, r7
10009ad4:	4e18      	ldr	r6, [pc, #96]	; (10009b38 <ble_encryption_request_handler+0xd0>)
10009ad6:	47b0      	blx	r6
10009ad8:	4818      	ldr	r0, [pc, #96]	; (10009b3c <ble_encryption_request_handler+0xd4>)
10009ada:	4d19      	ldr	r5, [pc, #100]	; (10009b40 <ble_encryption_request_handler+0xd8>)
10009adc:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
10009ade:	0038      	movs	r0, r7
10009ae0:	47b0      	blx	r6
10009ae2:	4818      	ldr	r0, [pc, #96]	; (10009b44 <ble_encryption_request_handler+0xdc>)
10009ae4:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
10009ae6:	0163      	lsls	r3, r4, #5
10009ae8:	1b1c      	subs	r4, r3, r4
10009aea:	00a4      	lsls	r4, r4, #2
10009aec:	4b0f      	ldr	r3, [pc, #60]	; (10009b2c <ble_encryption_request_handler+0xc4>)
10009aee:	191c      	adds	r4, r3, r4
10009af0:	8920      	ldrh	r0, [r4, #8]
10009af2:	2105      	movs	r1, #5
10009af4:	4b14      	ldr	r3, [pc, #80]	; (10009b48 <ble_encryption_request_handler+0xe0>)
10009af6:	4798      	blx	r3
		return AT_BLE_FAILURE;
10009af8:	20e2      	movs	r0, #226	; 0xe2
10009afa:	e016      	b.n	10009b2a <ble_encryption_request_handler+0xc2>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
10009afc:	0162      	lsls	r2, r4, #5
10009afe:	1b13      	subs	r3, r2, r4
10009b00:	009b      	lsls	r3, r3, #2
10009b02:	3360      	adds	r3, #96	; 0x60
10009b04:	4909      	ldr	r1, [pc, #36]	; (10009b2c <ble_encryption_request_handler+0xc4>)
10009b06:	185b      	adds	r3, r3, r1
10009b08:	1b14      	subs	r4, r2, r4
10009b0a:	00a4      	lsls	r4, r4, #2
10009b0c:	190c      	adds	r4, r1, r4
10009b0e:	7d21      	ldrb	r1, [r4, #20]
10009b10:	8830      	ldrh	r0, [r6, #0]
10009b12:	2201      	movs	r2, #1
10009b14:	4c0d      	ldr	r4, [pc, #52]	; (10009b4c <ble_encryption_request_handler+0xe4>)
10009b16:	47a0      	blx	r4
10009b18:	2800      	cmp	r0, #0
10009b1a:	d006      	beq.n	10009b2a <ble_encryption_request_handler+0xc2>
	{
		DBG_LOG("Encryption Request Reply Failed");
10009b1c:	4805      	ldr	r0, [pc, #20]	; (10009b34 <ble_encryption_request_handler+0xcc>)
10009b1e:	4b06      	ldr	r3, [pc, #24]	; (10009b38 <ble_encryption_request_handler+0xd0>)
10009b20:	4798      	blx	r3
10009b22:	480b      	ldr	r0, [pc, #44]	; (10009b50 <ble_encryption_request_handler+0xe8>)
10009b24:	4b06      	ldr	r3, [pc, #24]	; (10009b40 <ble_encryption_request_handler+0xd8>)
10009b26:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
10009b28:	2000      	movs	r0, #0
}
10009b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009b2c:	10013c3c 	.word	0x10013c3c
10009b30:	1000ff8d 	.word	0x1000ff8d
10009b34:	100112b0 	.word	0x100112b0
10009b38:	100100ed 	.word	0x100100ed
10009b3c:	10011a48 	.word	0x10011a48
10009b40:	1000ffcd 	.word	0x1000ffcd
10009b44:	10011a80 	.word	0x10011a80
10009b48:	1000cf75 	.word	0x1000cf75
10009b4c:	1000d545 	.word	0x1000d545
10009b50:	10011ad8 	.word	0x10011ad8

10009b54 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
10009b54:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
10009b56:	2a00      	cmp	r2, #0
10009b58:	d047      	beq.n	10009bea <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
10009b5a:	2906      	cmp	r1, #6
10009b5c:	d847      	bhi.n	10009bee <ble_mgr_events_callback_handler+0x9a>
10009b5e:	0089      	lsls	r1, r1, #2
10009b60:	4b28      	ldr	r3, [pc, #160]	; (10009c04 <ble_mgr_events_callback_handler+0xb0>)
10009b62:	585b      	ldr	r3, [r3, r1]
10009b64:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
10009b66:	4b28      	ldr	r3, [pc, #160]	; (10009c08 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
10009b68:	2405      	movs	r4, #5
10009b6a:	e00a      	b.n	10009b82 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
10009b6c:	4b27      	ldr	r3, [pc, #156]	; (10009c0c <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
10009b6e:	2401      	movs	r4, #1
			}
			break;
10009b70:	e007      	b.n	10009b82 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
10009b72:	4b27      	ldr	r3, [pc, #156]	; (10009c10 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
10009b74:	2405      	movs	r4, #5
			}
			break;
10009b76:	e004      	b.n	10009b82 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
10009b78:	4b26      	ldr	r3, [pc, #152]	; (10009c14 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
10009b7a:	2401      	movs	r4, #1
			}
			break;
10009b7c:	e001      	b.n	10009b82 <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
10009b7e:	4b26      	ldr	r3, [pc, #152]	; (10009c18 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
10009b80:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
10009b82:	2800      	cmp	r0, #0
10009b84:	d116      	bne.n	10009bb4 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
10009b86:	6819      	ldr	r1, [r3, #0]
10009b88:	2900      	cmp	r1, #0
10009b8a:	d10b      	bne.n	10009ba4 <ble_mgr_events_callback_handler+0x50>
10009b8c:	e006      	b.n	10009b9c <ble_mgr_events_callback_handler+0x48>
10009b8e:	001d      	movs	r5, r3
10009b90:	3304      	adds	r3, #4
10009b92:	1f18      	subs	r0, r3, #4
10009b94:	6800      	ldr	r0, [r0, #0]
10009b96:	2800      	cmp	r0, #0
10009b98:	d106      	bne.n	10009ba8 <ble_mgr_events_callback_handler+0x54>
10009b9a:	e000      	b.n	10009b9e <ble_mgr_events_callback_handler+0x4a>
10009b9c:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
10009b9e:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
10009ba0:	2101      	movs	r1, #1
						break;
10009ba2:	e02c      	b.n	10009bfe <ble_mgr_events_callback_handler+0xaa>
10009ba4:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
10009ba6:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
10009ba8:	3101      	adds	r1, #1
10009baa:	b2c9      	uxtb	r1, r1
10009bac:	42a1      	cmp	r1, r4
10009bae:	d3ee      	bcc.n	10009b8e <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
10009bb0:	2100      	movs	r1, #0
10009bb2:	e024      	b.n	10009bfe <ble_mgr_events_callback_handler+0xaa>
10009bb4:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
10009bb6:	2801      	cmp	r0, #1
10009bb8:	d121      	bne.n	10009bfe <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
10009bba:	6819      	ldr	r1, [r3, #0]
10009bbc:	428a      	cmp	r2, r1
10009bbe:	d10c      	bne.n	10009bda <ble_mgr_events_callback_handler+0x86>
10009bc0:	e006      	b.n	10009bd0 <ble_mgr_events_callback_handler+0x7c>
10009bc2:	001d      	movs	r5, r3
10009bc4:	3304      	adds	r3, #4
10009bc6:	1f18      	subs	r0, r3, #4
10009bc8:	6800      	ldr	r0, [r0, #0]
10009bca:	4282      	cmp	r2, r0
10009bcc:	d107      	bne.n	10009bde <ble_mgr_events_callback_handler+0x8a>
10009bce:	e000      	b.n	10009bd2 <ble_mgr_events_callback_handler+0x7e>
10009bd0:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
10009bd2:	2300      	movs	r3, #0
10009bd4:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
10009bd6:	2101      	movs	r1, #1
						break;
10009bd8:	e011      	b.n	10009bfe <ble_mgr_events_callback_handler+0xaa>
10009bda:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
10009bdc:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
10009bde:	3101      	adds	r1, #1
10009be0:	b2c9      	uxtb	r1, r1
10009be2:	42a1      	cmp	r1, r4
10009be4:	d3ed      	bcc.n	10009bc2 <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
10009be6:	2100      	movs	r1, #0
10009be8:	e009      	b.n	10009bfe <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
10009bea:	2100      	movs	r1, #0
10009bec:	e007      	b.n	10009bfe <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
10009bee:	2100      	movs	r1, #0
10009bf0:	e005      	b.n	10009bfe <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
10009bf2:	4b0a      	ldr	r3, [pc, #40]	; (10009c1c <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
10009bf4:	2405      	movs	r4, #5
10009bf6:	e7c4      	b.n	10009b82 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
10009bf8:	4b09      	ldr	r3, [pc, #36]	; (10009c20 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
10009bfa:	2401      	movs	r4, #1
10009bfc:	e7c1      	b.n	10009b82 <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
10009bfe:	0008      	movs	r0, r1
10009c00:	bd30      	pop	{r4, r5, pc}
10009c02:	46c0      	nop			; (mov r8, r8)
10009c04:	100116f0 	.word	0x100116f0
10009c08:	10013c28 	.word	0x10013c28
10009c0c:	10013c24 	.word	0x10013c24
10009c10:	10013eac 	.word	0x10013eac
10009c14:	10014460 	.word	0x10014460
10009c18:	10013ec0 	.word	0x10013ec0
10009c1c:	10013ed4 	.word	0x10013ed4
10009c20:	10013f1c 	.word	0x10013f1c

10009c24 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
10009c24:	b5f0      	push	{r4, r5, r6, r7, lr}
10009c26:	465f      	mov	r7, fp
10009c28:	4656      	mov	r6, sl
10009c2a:	464d      	mov	r5, r9
10009c2c:	4644      	mov	r4, r8
10009c2e:	b4f0      	push	{r4, r5, r6, r7}
10009c30:	b091      	sub	sp, #68	; 0x44
10009c32:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
10009c34:	2400      	movs	r4, #0
10009c36:	4b7e      	ldr	r3, [pc, #504]	; (10009e30 <ble_device_init+0x20c>)
10009c38:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
10009c3a:	2207      	movs	r2, #7
10009c3c:	2100      	movs	r1, #0
10009c3e:	487d      	ldr	r0, [pc, #500]	; (10009e34 <ble_device_init+0x210>)
10009c40:	4e7d      	ldr	r6, [pc, #500]	; (10009e38 <ble_device_init+0x214>)
10009c42:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
10009c44:	2212      	movs	r2, #18
10009c46:	2100      	movs	r1, #0
10009c48:	487c      	ldr	r0, [pc, #496]	; (10009e3c <ble_device_init+0x218>)
10009c4a:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
10009c4c:	4a7c      	ldr	r2, [pc, #496]	; (10009e40 <ble_device_init+0x21c>)
10009c4e:	2100      	movs	r1, #0
10009c50:	487c      	ldr	r0, [pc, #496]	; (10009e44 <ble_device_init+0x220>)
10009c52:	47b0      	blx	r6
#endif

	scan_response_count = 0;
10009c54:	4b7c      	ldr	r3, [pc, #496]	; (10009e48 <ble_device_init+0x224>)
10009c56:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
10009c58:	22cd      	movs	r2, #205	; 0xcd
10009c5a:	0092      	lsls	r2, r2, #2
10009c5c:	2100      	movs	r1, #0
10009c5e:	487b      	ldr	r0, [pc, #492]	; (10009e4c <ble_device_init+0x228>)
10009c60:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
10009c62:	4b7b      	ldr	r3, [pc, #492]	; (10009e50 <ble_device_init+0x22c>)
10009c64:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
10009c66:	2283      	movs	r2, #131	; 0x83
10009c68:	0092      	lsls	r2, r2, #2
10009c6a:	2100      	movs	r1, #0
10009c6c:	4879      	ldr	r0, [pc, #484]	; (10009e54 <ble_device_init+0x230>)
10009c6e:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
10009c70:	4b79      	ldr	r3, [pc, #484]	; (10009e58 <ble_device_init+0x234>)
10009c72:	469b      	mov	fp, r3
10009c74:	2380      	movs	r3, #128	; 0x80
10009c76:	00db      	lsls	r3, r3, #3
10009c78:	469a      	mov	sl, r3
10009c7a:	001a      	movs	r2, r3
10009c7c:	2100      	movs	r1, #0
10009c7e:	4658      	mov	r0, fp
10009c80:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
10009c82:	4b76      	ldr	r3, [pc, #472]	; (10009e5c <ble_device_init+0x238>)
10009c84:	4699      	mov	r9, r3
10009c86:	2380      	movs	r3, #128	; 0x80
10009c88:	015b      	lsls	r3, r3, #5
10009c8a:	4698      	mov	r8, r3
10009c8c:	001a      	movs	r2, r3
10009c8e:	2100      	movs	r1, #0
10009c90:	4648      	mov	r0, r9
10009c92:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
10009c94:	4f72      	ldr	r7, [pc, #456]	; (10009e60 <ble_device_init+0x23c>)
10009c96:	221c      	movs	r2, #28
10009c98:	2100      	movs	r1, #0
10009c9a:	0038      	movs	r0, r7
10009c9c:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
10009c9e:	465b      	mov	r3, fp
10009ca0:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
10009ca2:	4653      	mov	r3, sl
10009ca4:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
10009ca6:	464b      	mov	r3, r9
10009ca8:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
10009caa:	4643      	mov	r3, r8
10009cac:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
10009cae:	4b6d      	ldr	r3, [pc, #436]	; (10009e64 <ble_device_init+0x240>)
10009cb0:	601c      	str	r4, [r3, #0]
10009cb2:	605c      	str	r4, [r3, #4]
10009cb4:	609c      	str	r4, [r3, #8]
10009cb6:	60dc      	str	r4, [r3, #12]
10009cb8:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
10009cba:	4b6b      	ldr	r3, [pc, #428]	; (10009e68 <ble_device_init+0x244>)
10009cbc:	601c      	str	r4, [r3, #0]
10009cbe:	605c      	str	r4, [r3, #4]
10009cc0:	609c      	str	r4, [r3, #8]
10009cc2:	60dc      	str	r4, [r3, #12]
10009cc4:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
10009cc6:	4b69      	ldr	r3, [pc, #420]	; (10009e6c <ble_device_init+0x248>)
10009cc8:	601c      	str	r4, [r3, #0]
10009cca:	605c      	str	r4, [r3, #4]
10009ccc:	609c      	str	r4, [r3, #8]
10009cce:	60dc      	str	r4, [r3, #12]
10009cd0:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
10009cd2:	4b67      	ldr	r3, [pc, #412]	; (10009e70 <ble_device_init+0x24c>)
10009cd4:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
10009cd6:	4b67      	ldr	r3, [pc, #412]	; (10009e74 <ble_device_init+0x250>)
10009cd8:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
10009cda:	4b67      	ldr	r3, [pc, #412]	; (10009e78 <ble_device_init+0x254>)
10009cdc:	601c      	str	r4, [r3, #0]
10009cde:	605c      	str	r4, [r3, #4]
10009ce0:	609c      	str	r4, [r3, #8]
10009ce2:	60dc      	str	r4, [r3, #12]
10009ce4:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
10009ce6:	4b65      	ldr	r3, [pc, #404]	; (10009e7c <ble_device_init+0x258>)
10009ce8:	601c      	str	r4, [r3, #0]
10009cea:	4c65      	ldr	r4, [pc, #404]	; (10009e80 <ble_device_init+0x25c>)
10009cec:	239b      	movs	r3, #155	; 0x9b
10009cee:	009b      	lsls	r3, r3, #2
10009cf0:	4698      	mov	r8, r3
10009cf2:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
10009cf4:	4f50      	ldr	r7, [pc, #320]	; (10009e38 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
10009cf6:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
10009cf8:	227c      	movs	r2, #124	; 0x7c
10009cfa:	2100      	movs	r1, #0
10009cfc:	0020      	movs	r0, r4
10009cfe:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009d00:	0023      	movs	r3, r4
10009d02:	335e      	adds	r3, #94	; 0x5e
10009d04:	2200      	movs	r2, #0
10009d06:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
10009d08:	7626      	strb	r6, [r4, #24]
10009d0a:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009d0c:	45a0      	cmp	r8, r4
10009d0e:	d1f3      	bne.n	10009cf8 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
10009d10:	4b5c      	ldr	r3, [pc, #368]	; (10009e84 <ble_device_init+0x260>)
10009d12:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
10009d14:	4c52      	ldr	r4, [pc, #328]	; (10009e60 <ble_device_init+0x23c>)
10009d16:	4b4a      	ldr	r3, [pc, #296]	; (10009e40 <ble_device_init+0x21c>)
10009d18:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
10009d1a:	4b4a      	ldr	r3, [pc, #296]	; (10009e44 <ble_device_init+0x220>)
10009d1c:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing SAMB11");
10009d1e:	485a      	ldr	r0, [pc, #360]	; (10009e88 <ble_device_init+0x264>)
10009d20:	4b5a      	ldr	r3, [pc, #360]	; (10009e8c <ble_device_init+0x268>)
10009d22:	4798      	blx	r3
10009d24:	485a      	ldr	r0, [pc, #360]	; (10009e90 <ble_device_init+0x26c>)
10009d26:	4b5b      	ldr	r3, [pc, #364]	; (10009e94 <ble_device_init+0x270>)
10009d28:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
10009d2a:	0020      	movs	r0, r4
10009d2c:	4b5a      	ldr	r3, [pc, #360]	; (10009e98 <ble_device_init+0x274>)
10009d2e:	4798      	blx	r3
10009d30:	2800      	cmp	r0, #0
10009d32:	d00b      	beq.n	10009d4c <ble_device_init+0x128>
	{
		DBG_LOG("SAMB11 Initialization failed");
10009d34:	4e54      	ldr	r6, [pc, #336]	; (10009e88 <ble_device_init+0x264>)
10009d36:	0030      	movs	r0, r6
10009d38:	4d54      	ldr	r5, [pc, #336]	; (10009e8c <ble_device_init+0x268>)
10009d3a:	47a8      	blx	r5
10009d3c:	4857      	ldr	r0, [pc, #348]	; (10009e9c <ble_device_init+0x278>)
10009d3e:	4c55      	ldr	r4, [pc, #340]	; (10009e94 <ble_device_init+0x270>)
10009d40:	47a0      	blx	r4
		DBG_LOG("Please check the power and connection / hardware connector");	
10009d42:	0030      	movs	r0, r6
10009d44:	47a8      	blx	r5
10009d46:	4856      	ldr	r0, [pc, #344]	; (10009ea0 <ble_device_init+0x27c>)
10009d48:	47a0      	blx	r4
10009d4a:	e7fe      	b.n	10009d4a <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
10009d4c:	4a55      	ldr	r2, [pc, #340]	; (10009ea4 <ble_device_init+0x280>)
10009d4e:	2100      	movs	r1, #0
10009d50:	2000      	movs	r0, #0
10009d52:	4c55      	ldr	r4, [pc, #340]	; (10009ea8 <ble_device_init+0x284>)
10009d54:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
10009d56:	4a55      	ldr	r2, [pc, #340]	; (10009eac <ble_device_init+0x288>)
10009d58:	2102      	movs	r1, #2
10009d5a:	2000      	movs	r0, #0
10009d5c:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
10009d5e:	2109      	movs	r1, #9
10009d60:	4853      	ldr	r0, [pc, #332]	; (10009eb0 <ble_device_init+0x28c>)
10009d62:	4b54      	ldr	r3, [pc, #336]	; (10009eb4 <ble_device_init+0x290>)
10009d64:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
10009d66:	2800      	cmp	r0, #0
10009d68:	d005      	beq.n	10009d76 <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
10009d6a:	4847      	ldr	r0, [pc, #284]	; (10009e88 <ble_device_init+0x264>)
10009d6c:	4b47      	ldr	r3, [pc, #284]	; (10009e8c <ble_device_init+0x268>)
10009d6e:	4798      	blx	r3
10009d70:	4851      	ldr	r0, [pc, #324]	; (10009eb8 <ble_device_init+0x294>)
10009d72:	4b48      	ldr	r3, [pc, #288]	; (10009e94 <ble_device_init+0x270>)
10009d74:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
10009d76:	2207      	movs	r2, #7
10009d78:	4950      	ldr	r1, [pc, #320]	; (10009ebc <ble_device_init+0x298>)
10009d7a:	3108      	adds	r1, #8
10009d7c:	a804      	add	r0, sp, #16
10009d7e:	4b50      	ldr	r3, [pc, #320]	; (10009ec0 <ble_device_init+0x29c>)
10009d80:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
10009d82:	2226      	movs	r2, #38	; 0x26
10009d84:	2100      	movs	r1, #0
10009d86:	a806      	add	r0, sp, #24
10009d88:	4b2b      	ldr	r3, [pc, #172]	; (10009e38 <ble_device_init+0x214>)
10009d8a:	4798      	blx	r3
	
	if (addr == NULL)
10009d8c:	2d00      	cmp	r5, #0
10009d8e:	d10c      	bne.n	10009daa <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
10009d90:	a804      	add	r0, sp, #16
10009d92:	4b4c      	ldr	r3, [pc, #304]	; (10009ec4 <ble_device_init+0x2a0>)
10009d94:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
10009d96:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
10009d98:	2800      	cmp	r0, #0
10009d9a:	d006      	beq.n	10009daa <ble_device_init+0x186>
		{
			DBG_LOG("BD address get failed");
10009d9c:	483a      	ldr	r0, [pc, #232]	; (10009e88 <ble_device_init+0x264>)
10009d9e:	4b3b      	ldr	r3, [pc, #236]	; (10009e8c <ble_device_init+0x268>)
10009da0:	4798      	blx	r3
10009da2:	4849      	ldr	r0, [pc, #292]	; (10009ec8 <ble_device_init+0x2a4>)
10009da4:	4b3b      	ldr	r3, [pc, #236]	; (10009e94 <ble_device_init+0x270>)
10009da6:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
10009da8:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
10009daa:	4837      	ldr	r0, [pc, #220]	; (10009e88 <ble_device_init+0x264>)
10009dac:	4b37      	ldr	r3, [pc, #220]	; (10009e8c <ble_device_init+0x268>)
10009dae:	4798      	blx	r3
10009db0:	792b      	ldrb	r3, [r5, #4]
10009db2:	796a      	ldrb	r2, [r5, #5]
10009db4:	79a9      	ldrb	r1, [r5, #6]
10009db6:	7828      	ldrb	r0, [r5, #0]
10009db8:	9003      	str	r0, [sp, #12]
10009dba:	7868      	ldrb	r0, [r5, #1]
10009dbc:	9002      	str	r0, [sp, #8]
10009dbe:	78a8      	ldrb	r0, [r5, #2]
10009dc0:	9001      	str	r0, [sp, #4]
10009dc2:	78e8      	ldrb	r0, [r5, #3]
10009dc4:	9000      	str	r0, [sp, #0]
10009dc6:	4841      	ldr	r0, [pc, #260]	; (10009ecc <ble_device_init+0x2a8>)
10009dc8:	4c32      	ldr	r4, [pc, #200]	; (10009e94 <ble_device_init+0x270>)
10009dca:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
10009dcc:	ac06      	add	r4, sp, #24
10009dce:	230f      	movs	r3, #15
10009dd0:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
10009dd2:	4b3f      	ldr	r3, [pc, #252]	; (10009ed0 <ble_device_init+0x2ac>)
10009dd4:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
10009dd6:	2207      	movs	r2, #7
10009dd8:	0029      	movs	r1, r5
10009dda:	a807      	add	r0, sp, #28
10009ddc:	4b38      	ldr	r3, [pc, #224]	; (10009ec0 <ble_device_init+0x29c>)
10009dde:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
10009de0:	2300      	movs	r3, #0
10009de2:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
10009de4:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
10009de6:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
10009de8:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
10009dea:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
10009dec:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
10009dee:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
10009df0:	2380      	movs	r3, #128	; 0x80
10009df2:	009b      	lsls	r3, r3, #2
10009df4:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
10009df6:	0020      	movs	r0, r4
10009df8:	4b36      	ldr	r3, [pc, #216]	; (10009ed4 <ble_device_init+0x2b0>)
10009dfa:	4798      	blx	r3
10009dfc:	2800      	cmp	r0, #0
10009dfe:	d005      	beq.n	10009e0c <ble_device_init+0x1e8>
	{
		DBG_LOG("Set BLE Device configuration failed");
10009e00:	4821      	ldr	r0, [pc, #132]	; (10009e88 <ble_device_init+0x264>)
10009e02:	4b22      	ldr	r3, [pc, #136]	; (10009e8c <ble_device_init+0x268>)
10009e04:	4798      	blx	r3
10009e06:	4834      	ldr	r0, [pc, #208]	; (10009ed8 <ble_device_init+0x2b4>)
10009e08:	4b22      	ldr	r3, [pc, #136]	; (10009e94 <ble_device_init+0x270>)
10009e0a:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
10009e0c:	0028      	movs	r0, r5
10009e0e:	4b33      	ldr	r3, [pc, #204]	; (10009edc <ble_device_init+0x2b8>)
10009e10:	4798      	blx	r3
10009e12:	2800      	cmp	r0, #0
10009e14:	d005      	beq.n	10009e22 <ble_device_init+0x1fe>
	{
		DBG_LOG("Set BLE Device Address failed");
10009e16:	481c      	ldr	r0, [pc, #112]	; (10009e88 <ble_device_init+0x264>)
10009e18:	4b1c      	ldr	r3, [pc, #112]	; (10009e8c <ble_device_init+0x268>)
10009e1a:	4798      	blx	r3
10009e1c:	4830      	ldr	r0, [pc, #192]	; (10009ee0 <ble_device_init+0x2bc>)
10009e1e:	4b1d      	ldr	r3, [pc, #116]	; (10009e94 <ble_device_init+0x270>)
10009e20:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
10009e22:	b011      	add	sp, #68	; 0x44
10009e24:	bc3c      	pop	{r2, r3, r4, r5}
10009e26:	4690      	mov	r8, r2
10009e28:	4699      	mov	r9, r3
10009e2a:	46a2      	mov	sl, r4
10009e2c:	46ab      	mov	fp, r5
10009e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009e30:	10012a64 	.word	0x10012a64
10009e34:	10012a6c 	.word	0x10012a6c
10009e38:	1000ffbd 	.word	0x1000ffbd
10009e3c:	10013ee8 	.word	0x10013ee8
10009e40:	000004e2 	.word	0x000004e2
10009e44:	10012584 	.word	0x10012584
10009e48:	10012a68 	.word	0x10012a68
10009e4c:	10013f20 	.word	0x10013f20
10009e50:	10013f18 	.word	0x10013f18
10009e54:	10014254 	.word	0x10014254
10009e58:	10012184 	.word	0x10012184
10009e5c:	10012a74 	.word	0x10012a74
10009e60:	10013efc 	.word	0x10013efc
10009e64:	10013ec0 	.word	0x10013ec0
10009e68:	10013ed4 	.word	0x10013ed4
10009e6c:	10013c28 	.word	0x10013c28
10009e70:	10013f1c 	.word	0x10013f1c
10009e74:	10013c24 	.word	0x10013c24
10009e78:	10013eac 	.word	0x10013eac
10009e7c:	10014460 	.word	0x10014460
10009e80:	10013c3c 	.word	0x10013c3c
10009e84:	10013ea8 	.word	0x10013ea8
10009e88:	100112b0 	.word	0x100112b0
10009e8c:	100100ed 	.word	0x100100ed
10009e90:	10011af8 	.word	0x10011af8
10009e94:	1000ffcd 	.word	0x1000ffcd
10009e98:	1000cd4d 	.word	0x1000cd4d
10009e9c:	10011b0c 	.word	0x10011b0c
10009ea0:	10011b2c 	.word	0x10011b2c
10009ea4:	10011d64 	.word	0x10011d64
10009ea8:	10009b55 	.word	0x10009b55
10009eac:	10011728 	.word	0x10011728
10009eb0:	10011b68 	.word	0x10011b68
10009eb4:	1000cc65 	.word	0x1000cc65
10009eb8:	10011b74 	.word	0x10011b74
10009ebc:	1001170c 	.word	0x1001170c
10009ec0:	1000ffab 	.word	0x1000ffab
10009ec4:	1000cc99 	.word	0x1000cc99
10009ec8:	10011b8c 	.word	0x10011b8c
10009ecc:	10011ba4 	.word	0x10011ba4
10009ed0:	00003a98 	.word	0x00003a98
10009ed4:	1000ccbd 	.word	0x1000ccbd
10009ed8:	10011bdc 	.word	0x10011bdc
10009edc:	1000cf01 	.word	0x1000cf01
10009ee0:	10011c00 	.word	0x10011c00

10009ee4 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
10009ee4:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
10009ee6:	2201      	movs	r2, #1
10009ee8:	2101      	movs	r1, #1
10009eea:	4b06      	ldr	r3, [pc, #24]	; (10009f04 <ble_send_slave_sec_request+0x20>)
10009eec:	4798      	blx	r3
10009eee:	2800      	cmp	r0, #0
10009ef0:	d006      	beq.n	10009f00 <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
10009ef2:	4805      	ldr	r0, [pc, #20]	; (10009f08 <ble_send_slave_sec_request+0x24>)
10009ef4:	4b05      	ldr	r3, [pc, #20]	; (10009f0c <ble_send_slave_sec_request+0x28>)
10009ef6:	4798      	blx	r3
10009ef8:	4805      	ldr	r0, [pc, #20]	; (10009f10 <ble_send_slave_sec_request+0x2c>)
10009efa:	4b06      	ldr	r3, [pc, #24]	; (10009f14 <ble_send_slave_sec_request+0x30>)
10009efc:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
10009efe:	20e2      	movs	r0, #226	; 0xe2
}
10009f00:	bd10      	pop	{r4, pc}
10009f02:	46c0      	nop			; (mov r8, r8)
10009f04:	1000d48d 	.word	0x1000d48d
10009f08:	100112b0 	.word	0x100112b0
10009f0c:	100100ed 	.word	0x100100ed
10009f10:	10011c3c 	.word	0x10011c3c
10009f14:	1000ffcd 	.word	0x1000ffcd

10009f18 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
10009f18:	b5f0      	push	{r4, r5, r6, r7, lr}
10009f1a:	465f      	mov	r7, fp
10009f1c:	464e      	mov	r6, r9
10009f1e:	4645      	mov	r5, r8
10009f20:	b4e0      	push	{r5, r6, r7}
10009f22:	b09a      	sub	sp, #104	; 0x68
10009f24:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
10009f26:	7a86      	ldrb	r6, [r0, #10]
10009f28:	2e00      	cmp	r6, #0
10009f2a:	d000      	beq.n	10009f2e <ble_connected_state_handler+0x16>
10009f2c:	e0c6      	b.n	1000a0bc <ble_connected_state_handler+0x1a4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
10009f2e:	4875      	ldr	r0, [pc, #468]	; (1000a104 <ble_connected_state_handler+0x1ec>)
10009f30:	4f75      	ldr	r7, [pc, #468]	; (1000a108 <ble_connected_state_handler+0x1f0>)
10009f32:	47b8      	blx	r7
10009f34:	792b      	ldrb	r3, [r5, #4]
10009f36:	796a      	ldrb	r2, [r5, #5]
10009f38:	79a9      	ldrb	r1, [r5, #6]
10009f3a:	7868      	ldrb	r0, [r5, #1]
10009f3c:	9002      	str	r0, [sp, #8]
10009f3e:	78a8      	ldrb	r0, [r5, #2]
10009f40:	9001      	str	r0, [sp, #4]
10009f42:	78e8      	ldrb	r0, [r5, #3]
10009f44:	9000      	str	r0, [sp, #0]
10009f46:	4871      	ldr	r0, [pc, #452]	; (1000a10c <ble_connected_state_handler+0x1f4>)
10009f48:	4c71      	ldr	r4, [pc, #452]	; (1000a110 <ble_connected_state_handler+0x1f8>)
10009f4a:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
10009f4c:	486d      	ldr	r0, [pc, #436]	; (1000a104 <ble_connected_state_handler+0x1ec>)
10009f4e:	47b8      	blx	r7
10009f50:	8929      	ldrh	r1, [r5, #8]
10009f52:	4870      	ldr	r0, [pc, #448]	; (1000a114 <ble_connected_state_handler+0x1fc>)
10009f54:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
10009f56:	2212      	movs	r2, #18
10009f58:	0029      	movs	r1, r5
10009f5a:	486f      	ldr	r0, [pc, #444]	; (1000a118 <ble_connected_state_handler+0x200>)
10009f5c:	4b6f      	ldr	r3, [pc, #444]	; (1000a11c <ble_connected_state_handler+0x204>)
10009f5e:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
10009f60:	9504      	str	r5, [sp, #16]
10009f62:	2207      	movs	r2, #7
10009f64:	0029      	movs	r1, r5
10009f66:	486e      	ldr	r0, [pc, #440]	; (1000a120 <ble_connected_state_handler+0x208>)
10009f68:	4b6e      	ldr	r3, [pc, #440]	; (1000a124 <ble_connected_state_handler+0x20c>)
10009f6a:	4798      	blx	r3
10009f6c:	2800      	cmp	r0, #0
10009f6e:	d100      	bne.n	10009f72 <ble_connected_state_handler+0x5a>
10009f70:	e0ad      	b.n	1000a0ce <ble_connected_state_handler+0x1b6>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
10009f72:	782b      	ldrb	r3, [r5, #0]
10009f74:	2b02      	cmp	r3, #2
10009f76:	d000      	beq.n	10009f7a <ble_connected_state_handler+0x62>
10009f78:	e0a9      	b.n	1000a0ce <ble_connected_state_handler+0x1b6>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
10009f7a:	2250      	movs	r2, #80	; 0x50
10009f7c:	2100      	movs	r1, #0
10009f7e:	a806      	add	r0, sp, #24
10009f80:	4b69      	ldr	r3, [pc, #420]	; (1000a128 <ble_connected_state_handler+0x210>)
10009f82:	4798      	blx	r3
10009f84:	4f69      	ldr	r7, [pc, #420]	; (1000a12c <ble_connected_state_handler+0x214>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
10009f86:	2300      	movs	r3, #0
10009f88:	e00b      	b.n	10009fa2 <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
10009f8a:	1c59      	adds	r1, r3, #1
10009f8c:	7814      	ldrb	r4, [r2, #0]
10009f8e:	a806      	add	r0, sp, #24
10009f90:	54c4      	strb	r4, [r0, r3]
10009f92:	3201      	adds	r2, #1
10009f94:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
10009f96:	42b3      	cmp	r3, r6
10009f98:	d1f7      	bne.n	10009f8a <ble_connected_state_handler+0x72>
10009f9a:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
10009f9c:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
10009f9e:	2b50      	cmp	r3, #80	; 0x50
10009fa0:	d004      	beq.n	10009fac <ble_connected_state_handler+0x94>
10009fa2:	001e      	movs	r6, r3
10009fa4:	3610      	adds	r6, #16
10009fa6:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
10009fa8:	003a      	movs	r2, r7
10009faa:	e7ee      	b.n	10009f8a <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
10009fac:	aa06      	add	r2, sp, #24
10009fae:	0029      	movs	r1, r5
10009fb0:	2005      	movs	r0, #5
10009fb2:	4b5f      	ldr	r3, [pc, #380]	; (1000a130 <ble_connected_state_handler+0x218>)
10009fb4:	4798      	blx	r3
10009fb6:	1e06      	subs	r6, r0, #0
10009fb8:	d100      	bne.n	10009fbc <ble_connected_state_handler+0xa4>
10009fba:	e09c      	b.n	1000a0f6 <ble_connected_state_handler+0x1de>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
10009fbc:	4851      	ldr	r0, [pc, #324]	; (1000a104 <ble_connected_state_handler+0x1ec>)
10009fbe:	4b52      	ldr	r3, [pc, #328]	; (1000a108 <ble_connected_state_handler+0x1f0>)
10009fc0:	4798      	blx	r3
10009fc2:	485c      	ldr	r0, [pc, #368]	; (1000a134 <ble_connected_state_handler+0x21c>)
10009fc4:	4b52      	ldr	r3, [pc, #328]	; (1000a110 <ble_connected_state_handler+0x1f8>)
10009fc6:	4798      	blx	r3
						return AT_BLE_FAILURE;
10009fc8:	26e2      	movs	r6, #226	; 0xe2
10009fca:	e094      	b.n	1000a0f6 <ble_connected_state_handler+0x1de>
10009fcc:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
10009fce:	9405      	str	r4, [sp, #20]
10009fd0:	2207      	movs	r2, #7
10009fd2:	9904      	ldr	r1, [sp, #16]
10009fd4:	4648      	mov	r0, r9
10009fd6:	47d8      	blx	fp
10009fd8:	2800      	cmp	r0, #0
10009fda:	d109      	bne.n	10009ff0 <ble_connected_state_handler+0xd8>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
10009fdc:	9a05      	ldr	r2, [sp, #20]
10009fde:	0153      	lsls	r3, r2, #5
10009fe0:	1a9b      	subs	r3, r3, r2
10009fe2:	009a      	lsls	r2, r3, #2
10009fe4:	4b54      	ldr	r3, [pc, #336]	; (1000a138 <ble_connected_state_handler+0x220>)
10009fe6:	189b      	adds	r3, r3, r2
10009fe8:	335e      	adds	r3, #94	; 0x5e
10009fea:	2202      	movs	r2, #2
10009fec:	701a      	strb	r2, [r3, #0]
10009fee:	e02b      	b.n	1000a048 <ble_connected_state_handler+0x130>
10009ff0:	3401      	adds	r4, #1
10009ff2:	237c      	movs	r3, #124	; 0x7c
10009ff4:	469c      	mov	ip, r3
10009ff6:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009ff8:	2c05      	cmp	r4, #5
10009ffa:	d1e7      	bne.n	10009fcc <ble_connected_state_handler+0xb4>
10009ffc:	e072      	b.n	1000a0e4 <ble_connected_state_handler+0x1cc>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
10009ffe:	001c      	movs	r4, r3
1000a000:	7811      	ldrb	r1, [r2, #0]
1000a002:	2900      	cmp	r1, #0
1000a004:	d11a      	bne.n	1000a03c <ble_connected_state_handler+0x124>
1000a006:	e001      	b.n	1000a00c <ble_connected_state_handler+0xf4>
1000a008:	2400      	movs	r4, #0
1000a00a:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000a00c:	0163      	lsls	r3, r4, #5
1000a00e:	4699      	mov	r9, r3
1000a010:	1b18      	subs	r0, r3, r4
1000a012:	0080      	lsls	r0, r0, #2
1000a014:	4b48      	ldr	r3, [pc, #288]	; (1000a138 <ble_connected_state_handler+0x220>)
1000a016:	4698      	mov	r8, r3
1000a018:	4440      	add	r0, r8
1000a01a:	2212      	movs	r2, #18
1000a01c:	0029      	movs	r1, r5
1000a01e:	4b3f      	ldr	r3, [pc, #252]	; (1000a11c <ble_connected_state_handler+0x204>)
1000a020:	4798      	blx	r3
						ble_device_count++;
1000a022:	4a46      	ldr	r2, [pc, #280]	; (1000a13c <ble_connected_state_handler+0x224>)
1000a024:	7813      	ldrb	r3, [r2, #0]
1000a026:	3301      	adds	r3, #1
1000a028:	b2db      	uxtb	r3, r3
1000a02a:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a02c:	464b      	mov	r3, r9
1000a02e:	1b1b      	subs	r3, r3, r4
1000a030:	009b      	lsls	r3, r3, #2
1000a032:	4443      	add	r3, r8
1000a034:	335e      	adds	r3, #94	; 0x5e
1000a036:	2202      	movs	r2, #2
1000a038:	701a      	strb	r2, [r3, #0]
						break;
1000a03a:	e005      	b.n	1000a048 <ble_connected_state_handler+0x130>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a03c:	1c79      	adds	r1, r7, #1
1000a03e:	b2cf      	uxtb	r7, r1
1000a040:	3301      	adds	r3, #1
1000a042:	327c      	adds	r2, #124	; 0x7c
1000a044:	2f05      	cmp	r7, #5
1000a046:	d1da      	bne.n	10009ffe <ble_connected_state_handler+0xe6>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a048:	2207      	movs	r2, #7
1000a04a:	0029      	movs	r1, r5
1000a04c:	4834      	ldr	r0, [pc, #208]	; (1000a120 <ble_connected_state_handler+0x208>)
1000a04e:	4b35      	ldr	r3, [pc, #212]	; (1000a124 <ble_connected_state_handler+0x20c>)
1000a050:	4798      	blx	r3
1000a052:	2800      	cmp	r0, #0
1000a054:	d10c      	bne.n	1000a070 <ble_connected_state_handler+0x158>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000a056:	017b      	lsls	r3, r7, #5
1000a058:	1bdb      	subs	r3, r3, r7
1000a05a:	009b      	lsls	r3, r3, #2
1000a05c:	4a36      	ldr	r2, [pc, #216]	; (1000a138 <ble_connected_state_handler+0x220>)
1000a05e:	18d3      	adds	r3, r2, r3
1000a060:	2205      	movs	r2, #5
1000a062:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a064:	3202      	adds	r2, #2
1000a066:	2100      	movs	r1, #0
1000a068:	482d      	ldr	r0, [pc, #180]	; (1000a120 <ble_connected_state_handler+0x208>)
1000a06a:	4b2f      	ldr	r3, [pc, #188]	; (1000a128 <ble_connected_state_handler+0x210>)
1000a06c:	4798      	blx	r3
1000a06e:	e042      	b.n	1000a0f6 <ble_connected_state_handler+0x1de>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a070:	4b31      	ldr	r3, [pc, #196]	; (1000a138 <ble_connected_state_handler+0x220>)
1000a072:	4698      	mov	r8, r3
1000a074:	017c      	lsls	r4, r7, #5
1000a076:	1be3      	subs	r3, r4, r7
1000a078:	009b      	lsls	r3, r3, #2
1000a07a:	4443      	add	r3, r8
1000a07c:	220a      	movs	r2, #10
1000a07e:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a080:	3a03      	subs	r2, #3
1000a082:	2100      	movs	r1, #0
1000a084:	4826      	ldr	r0, [pc, #152]	; (1000a120 <ble_connected_state_handler+0x208>)
1000a086:	4b28      	ldr	r3, [pc, #160]	; (1000a128 <ble_connected_state_handler+0x210>)
1000a088:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000a08a:	1be4      	subs	r4, r4, r7
1000a08c:	00a4      	lsls	r4, r4, #2
1000a08e:	4444      	add	r4, r8
1000a090:	7ca3      	ldrb	r3, [r4, #18]
1000a092:	2b0a      	cmp	r3, #10
1000a094:	d12f      	bne.n	1000a0f6 <ble_connected_state_handler+0x1de>
1000a096:	e00d      	b.n	1000a0b4 <ble_connected_state_handler+0x19c>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000a098:	481a      	ldr	r0, [pc, #104]	; (1000a104 <ble_connected_state_handler+0x1ec>)
1000a09a:	4b1b      	ldr	r3, [pc, #108]	; (1000a108 <ble_connected_state_handler+0x1f0>)
1000a09c:	4798      	blx	r3
1000a09e:	4b27      	ldr	r3, [pc, #156]	; (1000a13c <ble_connected_state_handler+0x224>)
1000a0a0:	7819      	ldrb	r1, [r3, #0]
1000a0a2:	b2c9      	uxtb	r1, r1
1000a0a4:	4826      	ldr	r0, [pc, #152]	; (1000a140 <ble_connected_state_handler+0x228>)
1000a0a6:	4b1a      	ldr	r3, [pc, #104]	; (1000a110 <ble_connected_state_handler+0x1f8>)
1000a0a8:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000a0aa:	8928      	ldrh	r0, [r5, #8]
1000a0ac:	2113      	movs	r1, #19
1000a0ae:	4b25      	ldr	r3, [pc, #148]	; (1000a144 <ble_connected_state_handler+0x22c>)
1000a0b0:	4798      	blx	r3
1000a0b2:	e020      	b.n	1000a0f6 <ble_connected_state_handler+0x1de>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000a0b4:	8928      	ldrh	r0, [r5, #8]
1000a0b6:	4b24      	ldr	r3, [pc, #144]	; (1000a148 <ble_connected_state_handler+0x230>)
1000a0b8:	4798      	blx	r3
1000a0ba:	e01c      	b.n	1000a0f6 <ble_connected_state_handler+0x1de>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000a0bc:	4811      	ldr	r0, [pc, #68]	; (1000a104 <ble_connected_state_handler+0x1ec>)
1000a0be:	4b12      	ldr	r3, [pc, #72]	; (1000a108 <ble_connected_state_handler+0x1f0>)
1000a0c0:	4798      	blx	r3
1000a0c2:	7aa9      	ldrb	r1, [r5, #10]
1000a0c4:	4821      	ldr	r0, [pc, #132]	; (1000a14c <ble_connected_state_handler+0x234>)
1000a0c6:	4b12      	ldr	r3, [pc, #72]	; (1000a110 <ble_connected_state_handler+0x1f8>)
1000a0c8:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000a0ca:	2600      	movs	r6, #0
1000a0cc:	e013      	b.n	1000a0f6 <ble_connected_state_handler+0x1de>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000a0ce:	4b1b      	ldr	r3, [pc, #108]	; (1000a13c <ble_connected_state_handler+0x224>)
1000a0d0:	781b      	ldrb	r3, [r3, #0]
1000a0d2:	b2db      	uxtb	r3, r3
1000a0d4:	2b04      	cmp	r3, #4
1000a0d6:	d8df      	bhi.n	1000a098 <ble_connected_state_handler+0x180>
1000a0d8:	4b17      	ldr	r3, [pc, #92]	; (1000a138 <ble_connected_state_handler+0x220>)
1000a0da:	4699      	mov	r9, r3
1000a0dc:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a0de:	4b11      	ldr	r3, [pc, #68]	; (1000a124 <ble_connected_state_handler+0x20c>)
1000a0e0:	469b      	mov	fp, r3
1000a0e2:	e773      	b.n	10009fcc <ble_connected_state_handler+0xb4>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a0e4:	235e      	movs	r3, #94	; 0x5e
1000a0e6:	4a14      	ldr	r2, [pc, #80]	; (1000a138 <ble_connected_state_handler+0x220>)
1000a0e8:	5cd3      	ldrb	r3, [r2, r3]
1000a0ea:	2b00      	cmp	r3, #0
1000a0ec:	d08c      	beq.n	1000a008 <ble_connected_state_handler+0xf0>
1000a0ee:	4a18      	ldr	r2, [pc, #96]	; (1000a150 <ble_connected_state_handler+0x238>)
1000a0f0:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a0f2:	2701      	movs	r7, #1
1000a0f4:	e783      	b.n	10009ffe <ble_connected_state_handler+0xe6>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000a0f6:	0030      	movs	r0, r6
1000a0f8:	b01a      	add	sp, #104	; 0x68
1000a0fa:	bc1c      	pop	{r2, r3, r4}
1000a0fc:	4690      	mov	r8, r2
1000a0fe:	4699      	mov	r9, r3
1000a100:	46a3      	mov	fp, r4
1000a102:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a104:	100112b0 	.word	0x100112b0
1000a108:	100100ed 	.word	0x100100ed
1000a10c:	10011c5c 	.word	0x10011c5c
1000a110:	1000ffcd 	.word	0x1000ffcd
1000a114:	10011ca0 	.word	0x10011ca0
1000a118:	10013ee8 	.word	0x10013ee8
1000a11c:	1000ffab 	.word	0x1000ffab
1000a120:	10012a6c 	.word	0x10012a6c
1000a124:	1000ff8d 	.word	0x1000ff8d
1000a128:	1000ffbd 	.word	0x1000ffbd
1000a12c:	10013c82 	.word	0x10013c82
1000a130:	1000cfa1 	.word	0x1000cfa1
1000a134:	10011cb8 	.word	0x10011cb8
1000a138:	10013c3c 	.word	0x10013c3c
1000a13c:	10013ea8 	.word	0x10013ea8
1000a140:	10011cdc 	.word	0x10011cdc
1000a144:	1000cf75 	.word	0x1000cf75
1000a148:	10009ee5 	.word	0x10009ee5
1000a14c:	10011d18 	.word	0x10011d18
1000a150:	10013d16 	.word	0x10013d16

1000a154 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000a154:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a156:	4647      	mov	r7, r8
1000a158:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000a15a:	7803      	ldrb	r3, [r0, #0]
1000a15c:	2b00      	cmp	r3, #0
1000a15e:	d141      	bne.n	1000a1e4 <ble_resolv_rand_addr_handler+0x90>
1000a160:	4d2f      	ldr	r5, [pc, #188]	; (1000a220 <ble_resolv_rand_addr_handler+0xcc>)
1000a162:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000a164:	1c46      	adds	r6, r0, #1
1000a166:	4f2f      	ldr	r7, [pc, #188]	; (1000a224 <ble_resolv_rand_addr_handler+0xd0>)
1000a168:	2210      	movs	r2, #16
1000a16a:	0029      	movs	r1, r5
1000a16c:	0030      	movs	r0, r6
1000a16e:	47b8      	blx	r7
1000a170:	2800      	cmp	r0, #0
1000a172:	d03f      	beq.n	1000a1f4 <ble_resolv_rand_addr_handler+0xa0>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a174:	3401      	adds	r4, #1
1000a176:	b2e4      	uxtb	r4, r4
1000a178:	357c      	adds	r5, #124	; 0x7c
1000a17a:	2c05      	cmp	r4, #5
1000a17c:	d1f4      	bne.n	1000a168 <ble_resolv_rand_addr_handler+0x14>
1000a17e:	e031      	b.n	1000a1e4 <ble_resolv_rand_addr_handler+0x90>
1000a180:	b2dd      	uxtb	r5, r3
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a182:	001c      	movs	r4, r3
1000a184:	7811      	ldrb	r1, [r2, #0]
1000a186:	2900      	cmp	r1, #0
1000a188:	d122      	bne.n	1000a1d0 <ble_resolv_rand_addr_handler+0x7c>
1000a18a:	e001      	b.n	1000a190 <ble_resolv_rand_addr_handler+0x3c>
1000a18c:	2400      	movs	r4, #0
1000a18e:	2500      	movs	r5, #0
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000a190:	4b25      	ldr	r3, [pc, #148]	; (1000a228 <ble_resolv_rand_addr_handler+0xd4>)
1000a192:	4698      	mov	r8, r3
1000a194:	0166      	lsls	r6, r4, #5
1000a196:	1b37      	subs	r7, r6, r4
1000a198:	00bf      	lsls	r7, r7, #2
1000a19a:	4447      	add	r7, r8
1000a19c:	2212      	movs	r2, #18
1000a19e:	4923      	ldr	r1, [pc, #140]	; (1000a22c <ble_resolv_rand_addr_handler+0xd8>)
1000a1a0:	0038      	movs	r0, r7
1000a1a2:	4b23      	ldr	r3, [pc, #140]	; (1000a230 <ble_resolv_rand_addr_handler+0xdc>)
1000a1a4:	4798      	blx	r3
				ble_device_count++;
1000a1a6:	4a23      	ldr	r2, [pc, #140]	; (1000a234 <ble_resolv_rand_addr_handler+0xe0>)
1000a1a8:	7813      	ldrb	r3, [r2, #0]
1000a1aa:	3301      	adds	r3, #1
1000a1ac:	b2db      	uxtb	r3, r3
1000a1ae:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a1b0:	375e      	adds	r7, #94	; 0x5e
1000a1b2:	2302      	movs	r3, #2
1000a1b4:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a1b6:	1b34      	subs	r4, r6, r4
1000a1b8:	00a4      	lsls	r4, r4, #2
1000a1ba:	4444      	add	r4, r8
1000a1bc:	3308      	adds	r3, #8
1000a1be:	74a3      	strb	r3, [r4, #18]
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000a1c0:	016b      	lsls	r3, r5, #5
1000a1c2:	1b5d      	subs	r5, r3, r5
1000a1c4:	00ad      	lsls	r5, r5, #2
1000a1c6:	4445      	add	r5, r8
1000a1c8:	7cab      	ldrb	r3, [r5, #18]
1000a1ca:	2b0a      	cmp	r3, #10
1000a1cc:	d123      	bne.n	1000a216 <ble_resolv_rand_addr_handler+0xc2>
1000a1ce:	e004      	b.n	1000a1da <ble_resolv_rand_addr_handler+0x86>
1000a1d0:	3301      	adds	r3, #1
1000a1d2:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a1d4:	2b05      	cmp	r3, #5
1000a1d6:	d1d3      	bne.n	1000a180 <ble_resolv_rand_addr_handler+0x2c>
1000a1d8:	e01d      	b.n	1000a216 <ble_resolv_rand_addr_handler+0xc2>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000a1da:	4b14      	ldr	r3, [pc, #80]	; (1000a22c <ble_resolv_rand_addr_handler+0xd8>)
1000a1dc:	8918      	ldrh	r0, [r3, #8]
1000a1de:	4b16      	ldr	r3, [pc, #88]	; (1000a238 <ble_resolv_rand_addr_handler+0xe4>)
1000a1e0:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000a1e2:	e018      	b.n	1000a216 <ble_resolv_rand_addr_handler+0xc2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a1e4:	235e      	movs	r3, #94	; 0x5e
1000a1e6:	4a10      	ldr	r2, [pc, #64]	; (1000a228 <ble_resolv_rand_addr_handler+0xd4>)
1000a1e8:	5cd3      	ldrb	r3, [r2, r3]
1000a1ea:	2b00      	cmp	r3, #0
1000a1ec:	d0ce      	beq.n	1000a18c <ble_resolv_rand_addr_handler+0x38>
1000a1ee:	4a13      	ldr	r2, [pc, #76]	; (1000a23c <ble_resolv_rand_addr_handler+0xe8>)
1000a1f0:	2301      	movs	r3, #1
1000a1f2:	e7c5      	b.n	1000a180 <ble_resolv_rand_addr_handler+0x2c>
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a1f4:	480c      	ldr	r0, [pc, #48]	; (1000a228 <ble_resolv_rand_addr_handler+0xd4>)
1000a1f6:	0163      	lsls	r3, r4, #5
1000a1f8:	1b1a      	subs	r2, r3, r4
1000a1fa:	0092      	lsls	r2, r2, #2
1000a1fc:	1882      	adds	r2, r0, r2
1000a1fe:	0011      	movs	r1, r2
1000a200:	315e      	adds	r1, #94	; 0x5e
1000a202:	2502      	movs	r5, #2
1000a204:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a206:	210a      	movs	r1, #10
1000a208:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000a20a:	0010      	movs	r0, r2
1000a20c:	2212      	movs	r2, #18
1000a20e:	4907      	ldr	r1, [pc, #28]	; (1000a22c <ble_resolv_rand_addr_handler+0xd8>)
1000a210:	4b07      	ldr	r3, [pc, #28]	; (1000a230 <ble_resolv_rand_addr_handler+0xdc>)
1000a212:	4798      	blx	r3
1000a214:	e7e1      	b.n	1000a1da <ble_resolv_rand_addr_handler+0x86>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000a216:	2000      	movs	r0, #0
1000a218:	bc04      	pop	{r2}
1000a21a:	4690      	mov	r8, r2
1000a21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a21e:	46c0      	nop			; (mov r8, r8)
1000a220:	10013c82 	.word	0x10013c82
1000a224:	1000ff8d 	.word	0x1000ff8d
1000a228:	10013c3c 	.word	0x10013c3c
1000a22c:	10013ee8 	.word	0x10013ee8
1000a230:	1000ffab 	.word	0x1000ffab
1000a234:	10013ea8 	.word	0x10013ea8
1000a238:	10009ee5 	.word	0x10009ee5
1000a23c:	10013d16 	.word	0x10013d16

1000a240 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000a240:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000a242:	4b0e      	ldr	r3, [pc, #56]	; (1000a27c <uart_read_complete_callback+0x3c>)
1000a244:	781b      	ldrb	r3, [r3, #0]
1000a246:	2b01      	cmp	r3, #1
1000a248:	d10b      	bne.n	1000a262 <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000a24a:	2202      	movs	r2, #2
1000a24c:	4b0b      	ldr	r3, [pc, #44]	; (1000a27c <uart_read_complete_callback+0x3c>)
1000a24e:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000a250:	4b0b      	ldr	r3, [pc, #44]	; (1000a280 <uart_read_complete_callback+0x40>)
1000a252:	681b      	ldr	r3, [r3, #0]
1000a254:	2b00      	cmp	r3, #0
1000a256:	d110      	bne.n	1000a27a <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000a258:	2102      	movs	r1, #2
1000a25a:	480a      	ldr	r0, [pc, #40]	; (1000a284 <uart_read_complete_callback+0x44>)
1000a25c:	4b0a      	ldr	r3, [pc, #40]	; (1000a288 <uart_read_complete_callback+0x48>)
1000a25e:	4798      	blx	r3
1000a260:	e00b      	b.n	1000a27a <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000a262:	4b07      	ldr	r3, [pc, #28]	; (1000a280 <uart_read_complete_callback+0x40>)
1000a264:	681b      	ldr	r3, [r3, #0]
1000a266:	2b00      	cmp	r3, #0
1000a268:	d007      	beq.n	1000a27a <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000a26a:	4c08      	ldr	r4, [pc, #32]	; (1000a28c <uart_read_complete_callback+0x4c>)
1000a26c:	7820      	ldrb	r0, [r4, #0]
1000a26e:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000a270:	2201      	movs	r2, #1
1000a272:	0021      	movs	r1, r4
1000a274:	4803      	ldr	r0, [pc, #12]	; (1000a284 <uart_read_complete_callback+0x44>)
1000a276:	4b06      	ldr	r3, [pc, #24]	; (1000a290 <uart_read_complete_callback+0x50>)
1000a278:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000a27a:	bd10      	pop	{r4, pc}
1000a27c:	10013a78 	.word	0x10013a78
1000a280:	10013a80 	.word	0x10013a80
1000a284:	10014464 	.word	0x10014464
1000a288:	1000b201 	.word	0x1000b201
1000a28c:	10013a7c 	.word	0x10013a7c
1000a290:	1000b1a5 	.word	0x1000b1a5

1000a294 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000a294:	b570      	push	{r4, r5, r6, lr}
1000a296:	0006      	movs	r6, r0
1000a298:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000a29a:	4c03      	ldr	r4, [pc, #12]	; (1000a2a8 <usart_serial_getchar+0x14>)
1000a29c:	0029      	movs	r1, r5
1000a29e:	0030      	movs	r0, r6
1000a2a0:	47a0      	blx	r4
1000a2a2:	2800      	cmp	r0, #0
1000a2a4:	d1fa      	bne.n	1000a29c <usart_serial_getchar+0x8>
}
1000a2a6:	bd70      	pop	{r4, r5, r6, pc}
1000a2a8:	1000b191 	.word	0x1000b191

1000a2ac <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000a2ac:	b570      	push	{r4, r5, r6, lr}
1000a2ae:	0006      	movs	r6, r0
1000a2b0:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000a2b2:	4c03      	ldr	r4, [pc, #12]	; (1000a2c0 <usart_serial_putchar+0x14>)
1000a2b4:	0029      	movs	r1, r5
1000a2b6:	0030      	movs	r0, r6
1000a2b8:	47a0      	blx	r4
1000a2ba:	2800      	cmp	r0, #0
1000a2bc:	d1fa      	bne.n	1000a2b4 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000a2be:	bd70      	pop	{r4, r5, r6, pc}
1000a2c0:	1000b181 	.word	0x1000b181

1000a2c4 <serial_console_init>:

void serial_console_init(void)
{
1000a2c4:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000a2c6:	2100      	movs	r1, #0
1000a2c8:	2000      	movs	r0, #0
1000a2ca:	4b19      	ldr	r3, [pc, #100]	; (1000a330 <serial_console_init+0x6c>)
1000a2cc:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000a2ce:	4c19      	ldr	r4, [pc, #100]	; (1000a334 <serial_console_init+0x70>)
1000a2d0:	0020      	movs	r0, r4
1000a2d2:	4b19      	ldr	r3, [pc, #100]	; (1000a338 <serial_console_init+0x74>)
1000a2d4:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000a2d6:	23e1      	movs	r3, #225	; 0xe1
1000a2d8:	025b      	lsls	r3, r3, #9
1000a2da:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000a2dc:	2302      	movs	r3, #2
1000a2de:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000a2e0:	2203      	movs	r2, #3
1000a2e2:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000a2e4:	3201      	adds	r2, #1
1000a2e6:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000a2e8:	3201      	adds	r2, #1
1000a2ea:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000a2ec:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000a2ee:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000a2f0:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000a2f2:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000a2f4:	4d11      	ldr	r5, [pc, #68]	; (1000a33c <serial_console_init+0x78>)
1000a2f6:	4b12      	ldr	r3, [pc, #72]	; (1000a340 <serial_console_init+0x7c>)
1000a2f8:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000a2fa:	4a12      	ldr	r2, [pc, #72]	; (1000a344 <serial_console_init+0x80>)
1000a2fc:	4b12      	ldr	r3, [pc, #72]	; (1000a348 <serial_console_init+0x84>)
1000a2fe:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000a300:	4a12      	ldr	r2, [pc, #72]	; (1000a34c <serial_console_init+0x88>)
1000a302:	4b13      	ldr	r3, [pc, #76]	; (1000a350 <serial_console_init+0x8c>)
1000a304:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000a306:	0022      	movs	r2, r4
1000a308:	4912      	ldr	r1, [pc, #72]	; (1000a354 <serial_console_init+0x90>)
1000a30a:	0028      	movs	r0, r5
1000a30c:	4b12      	ldr	r3, [pc, #72]	; (1000a358 <serial_console_init+0x94>)
1000a30e:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000a310:	4e12      	ldr	r6, [pc, #72]	; (1000a35c <serial_console_init+0x98>)
1000a312:	6833      	ldr	r3, [r6, #0]
1000a314:	6898      	ldr	r0, [r3, #8]
1000a316:	2100      	movs	r1, #0
1000a318:	4c11      	ldr	r4, [pc, #68]	; (1000a360 <serial_console_init+0x9c>)
1000a31a:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000a31c:	6833      	ldr	r3, [r6, #0]
1000a31e:	6858      	ldr	r0, [r3, #4]
1000a320:	2100      	movs	r1, #0
1000a322:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000a324:	2202      	movs	r2, #2
1000a326:	490f      	ldr	r1, [pc, #60]	; (1000a364 <serial_console_init+0xa0>)
1000a328:	0028      	movs	r0, r5
1000a32a:	4b0f      	ldr	r3, [pc, #60]	; (1000a368 <serial_console_init+0xa4>)
1000a32c:	4798      	blx	r3
}
1000a32e:	bd70      	pop	{r4, r5, r6, pc}
1000a330:	1000ba01 	.word	0x1000ba01
1000a334:	10014488 	.word	0x10014488
1000a338:	1000af99 	.word	0x1000af99
1000a33c:	10014464 	.word	0x10014464
1000a340:	100147b0 	.word	0x100147b0
1000a344:	1000a2ad 	.word	0x1000a2ad
1000a348:	100147ac 	.word	0x100147ac
1000a34c:	1000a295 	.word	0x1000a295
1000a350:	100147a8 	.word	0x100147a8
1000a354:	40004000 	.word	0x40004000
1000a358:	1000afc5 	.word	0x1000afc5
1000a35c:	1001215c 	.word	0x1001215c
1000a360:	10010179 	.word	0x10010179
1000a364:	1000a241 	.word	0x1000a241
1000a368:	1000b1cd 	.word	0x1000b1cd

1000a36c <_time_start>:

void _time_start(unsigned int sec)
{
1000a36c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a36e:	b083      	sub	sp, #12
1000a370:	0005      	movs	r5, r0
	system_clock_get_value();
1000a372:	4c0d      	ldr	r4, [pc, #52]	; (1000a3a8 <_time_start+0x3c>)
1000a374:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000a376:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000a378:	4f0c      	ldr	r7, [pc, #48]	; (1000a3ac <_time_start+0x40>)
1000a37a:	47b8      	blx	r7
1000a37c:	4e0c      	ldr	r6, [pc, #48]	; (1000a3b0 <_time_start+0x44>)
1000a37e:	4a0d      	ldr	r2, [pc, #52]	; (1000a3b4 <_time_start+0x48>)
1000a380:	4b0d      	ldr	r3, [pc, #52]	; (1000a3b8 <_time_start+0x4c>)
1000a382:	47b0      	blx	r6
1000a384:	9000      	str	r0, [sp, #0]
1000a386:	9101      	str	r1, [sp, #4]
1000a388:	20fa      	movs	r0, #250	; 0xfa
1000a38a:	0080      	lsls	r0, r0, #2
1000a38c:	4368      	muls	r0, r5
1000a38e:	47b8      	blx	r7
1000a390:	0002      	movs	r2, r0
1000a392:	000b      	movs	r3, r1
1000a394:	9800      	ldr	r0, [sp, #0]
1000a396:	9901      	ldr	r1, [sp, #4]
1000a398:	47b0      	blx	r6
1000a39a:	4b08      	ldr	r3, [pc, #32]	; (1000a3bc <_time_start+0x50>)
1000a39c:	4798      	blx	r3
1000a39e:	4b08      	ldr	r3, [pc, #32]	; (1000a3c0 <_time_start+0x54>)
1000a3a0:	6018      	str	r0, [r3, #0]
}
1000a3a2:	b003      	add	sp, #12
1000a3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a3a6:	46c0      	nop			; (mov r8, r8)
1000a3a8:	1000ba85 	.word	0x1000ba85
1000a3ac:	1000fe3d 	.word	0x1000fe3d
1000a3b0:	1000f235 	.word	0x1000f235
1000a3b4:	19feaec7 	.word	0x19feaec7
1000a3b8:	3f09d8ef 	.word	0x3f09d8ef
1000a3bc:	1000efdd 	.word	0x1000efdd
1000a3c0:	10013a74 	.word	0x10013a74

1000a3c4 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000a3c4:	4b02      	ldr	r3, [pc, #8]	; (1000a3d0 <_time_done+0xc>)
1000a3c6:	681a      	ldr	r2, [r3, #0]
1000a3c8:	1e50      	subs	r0, r2, #1
1000a3ca:	6018      	str	r0, [r3, #0]
}
1000a3cc:	4770      	bx	lr
1000a3ce:	46c0      	nop			; (mov r8, r8)
1000a3d0:	10013a74 	.word	0x10013a74

1000a3d4 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000a3d4:	b570      	push	{r4, r5, r6, lr}
1000a3d6:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000a3d8:	2201      	movs	r2, #1
1000a3da:	4b11      	ldr	r3, [pc, #68]	; (1000a420 <getchar_b11_timeout+0x4c>)
1000a3dc:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000a3de:	4b11      	ldr	r3, [pc, #68]	; (1000a424 <getchar_b11_timeout+0x50>)
1000a3e0:	681b      	ldr	r3, [r3, #0]
1000a3e2:	2b00      	cmp	r3, #0
1000a3e4:	d103      	bne.n	1000a3ee <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000a3e6:	2102      	movs	r1, #2
1000a3e8:	480f      	ldr	r0, [pc, #60]	; (1000a428 <getchar_b11_timeout+0x54>)
1000a3ea:	4b10      	ldr	r3, [pc, #64]	; (1000a42c <getchar_b11_timeout+0x58>)
1000a3ec:	4798      	blx	r3

	_time_start(sec);
1000a3ee:	0020      	movs	r0, r4
1000a3f0:	4b0f      	ldr	r3, [pc, #60]	; (1000a430 <getchar_b11_timeout+0x5c>)
1000a3f2:	4798      	blx	r3
	
	string_input[0] = 0;
1000a3f4:	490f      	ldr	r1, [pc, #60]	; (1000a434 <getchar_b11_timeout+0x60>)
1000a3f6:	2300      	movs	r3, #0
1000a3f8:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000a3fa:	2201      	movs	r2, #1
1000a3fc:	480a      	ldr	r0, [pc, #40]	; (1000a428 <getchar_b11_timeout+0x54>)
1000a3fe:	4b0e      	ldr	r3, [pc, #56]	; (1000a438 <getchar_b11_timeout+0x64>)
1000a400:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000a402:	4c07      	ldr	r4, [pc, #28]	; (1000a420 <getchar_b11_timeout+0x4c>)
1000a404:	4d0d      	ldr	r5, [pc, #52]	; (1000a43c <getchar_b11_timeout+0x68>)
1000a406:	7823      	ldrb	r3, [r4, #0]
1000a408:	2b02      	cmp	r3, #2
1000a40a:	d002      	beq.n	1000a412 <getchar_b11_timeout+0x3e>
1000a40c:	47a8      	blx	r5
1000a40e:	2800      	cmp	r0, #0
1000a410:	d1f9      	bne.n	1000a406 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000a412:	2200      	movs	r2, #0
1000a414:	4b02      	ldr	r3, [pc, #8]	; (1000a420 <getchar_b11_timeout+0x4c>)
1000a416:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000a418:	4b06      	ldr	r3, [pc, #24]	; (1000a434 <getchar_b11_timeout+0x60>)
1000a41a:	7818      	ldrb	r0, [r3, #0]
}
1000a41c:	bd70      	pop	{r4, r5, r6, pc}
1000a41e:	46c0      	nop			; (mov r8, r8)
1000a420:	10013a78 	.word	0x10013a78
1000a424:	10013a80 	.word	0x10013a80
1000a428:	10014464 	.word	0x10014464
1000a42c:	1000b1e1 	.word	0x1000b1e1
1000a430:	1000a36d 	.word	0x1000a36d
1000a434:	10013a7c 	.word	0x10013a7c
1000a438:	1000b1a5 	.word	0x1000b1a5
1000a43c:	1000a3c5 	.word	0x1000a3c5

1000a440 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000a440:	4b02      	ldr	r3, [pc, #8]	; (1000a44c <platform_event_free+0xc>)
1000a442:	681a      	ldr	r2, [r3, #0]
1000a444:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000a446:	6018      	str	r0, [r3, #0]
}
1000a448:	4770      	bx	lr
1000a44a:	46c0      	nop			; (mov r8, r8)
1000a44c:	10013a88 	.word	0x10013a88

1000a450 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000a450:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000a452:	4b0b      	ldr	r3, [pc, #44]	; (1000a480 <platform_event_post+0x30>)
1000a454:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000a456:	2c00      	cmp	r4, #0
1000a458:	d011      	beq.n	1000a47e <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000a45a:	6825      	ldr	r5, [r4, #0]
1000a45c:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000a45e:	2300      	movs	r3, #0
1000a460:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000a462:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000a464:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000a466:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000a468:	4b06      	ldr	r3, [pc, #24]	; (1000a484 <platform_event_post+0x34>)
1000a46a:	681a      	ldr	r2, [r3, #0]
1000a46c:	2a00      	cmp	r2, #0
1000a46e:	d102      	bne.n	1000a476 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000a470:	601c      	str	r4, [r3, #0]
1000a472:	e004      	b.n	1000a47e <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000a474:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000a476:	6813      	ldr	r3, [r2, #0]
1000a478:	2b00      	cmp	r3, #0
1000a47a:	d1fb      	bne.n	1000a474 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000a47c:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000a47e:	bd30      	pop	{r4, r5, pc}
1000a480:	10013a88 	.word	0x10013a88
1000a484:	10013a84 	.word	0x10013a84

1000a488 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000a488:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000a48a:	2300      	movs	r3, #0
1000a48c:	4a06      	ldr	r2, [pc, #24]	; (1000a4a8 <platform_event_init+0x20>)
1000a48e:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000a490:	4a06      	ldr	r2, [pc, #24]	; (1000a4ac <platform_event_init+0x24>)
1000a492:	6013      	str	r3, [r2, #0]
1000a494:	4c06      	ldr	r4, [pc, #24]	; (1000a4b0 <platform_event_init+0x28>)
1000a496:	0026      	movs	r6, r4
1000a498:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000a49a:	4d06      	ldr	r5, [pc, #24]	; (1000a4b4 <platform_event_init+0x2c>)
1000a49c:	0020      	movs	r0, r4
1000a49e:	47a8      	blx	r5
1000a4a0:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000a4a2:	42b4      	cmp	r4, r6
1000a4a4:	d1fa      	bne.n	1000a49c <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000a4a6:	bd70      	pop	{r4, r5, r6, pc}
1000a4a8:	10013a88 	.word	0x10013a88
1000a4ac:	10013a84 	.word	0x10013a84
1000a4b0:	10013a8c 	.word	0x10013a8c
1000a4b4:	1000a441 	.word	0x1000a441

1000a4b8 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000a4b8:	b570      	push	{r4, r5, r6, lr}
1000a4ba:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000a4bc:	4b13      	ldr	r3, [pc, #76]	; (1000a50c <at_ke_msg_send+0x54>)
1000a4be:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000a4c0:	4b13      	ldr	r3, [pc, #76]	; (1000a510 <at_ke_msg_send+0x58>)
1000a4c2:	681b      	ldr	r3, [r3, #0]
1000a4c4:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000a4c6:	2c0c      	cmp	r4, #12
1000a4c8:	d01f      	beq.n	1000a50a <at_ke_msg_send+0x52>
1000a4ca:	3c0c      	subs	r4, #12
1000a4cc:	88e3      	ldrh	r3, [r4, #6]
1000a4ce:	2b05      	cmp	r3, #5
1000a4d0:	d01b      	beq.n	1000a50a <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000a4d2:	07eb      	lsls	r3, r5, #31
1000a4d4:	d414      	bmi.n	1000a500 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000a4d6:	4b0f      	ldr	r3, [pc, #60]	; (1000a514 <at_ke_msg_send+0x5c>)
1000a4d8:	681b      	ldr	r3, [r3, #0]
1000a4da:	2002      	movs	r0, #2
1000a4dc:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000a4de:	4b0e      	ldr	r3, [pc, #56]	; (1000a518 <at_ke_msg_send+0x60>)
1000a4e0:	681b      	ldr	r3, [r3, #0]
1000a4e2:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000a4e4:	4c0d      	ldr	r4, [pc, #52]	; (1000a51c <at_ke_msg_send+0x64>)
1000a4e6:	2003      	movs	r0, #3
1000a4e8:	6823      	ldr	r3, [r4, #0]
1000a4ea:	4798      	blx	r3
1000a4ec:	2800      	cmp	r0, #0
1000a4ee:	d1fa      	bne.n	1000a4e6 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000a4f0:	4b0b      	ldr	r3, [pc, #44]	; (1000a520 <at_ke_msg_send+0x68>)
1000a4f2:	681b      	ldr	r3, [r3, #0]
1000a4f4:	3002      	adds	r0, #2
1000a4f6:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000a4f8:	2201      	movs	r2, #1
1000a4fa:	4b0a      	ldr	r3, [pc, #40]	; (1000a524 <at_ke_msg_send+0x6c>)
1000a4fc:	601a      	str	r2, [r3, #0]
1000a4fe:	e004      	b.n	1000a50a <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000a500:	4b09      	ldr	r3, [pc, #36]	; (1000a528 <at_ke_msg_send+0x70>)
1000a502:	6818      	ldr	r0, [r3, #0]
1000a504:	4b09      	ldr	r3, [pc, #36]	; (1000a52c <at_ke_msg_send+0x74>)
1000a506:	681b      	ldr	r3, [r3, #0]
1000a508:	4798      	blx	r3
		}
	}
}
1000a50a:	bd70      	pop	{r4, r5, r6, pc}
1000a50c:	4000b1ec 	.word	0x4000b1ec
1000a510:	10013b34 	.word	0x10013b34
1000a514:	10013b2c 	.word	0x10013b2c
1000a518:	10013b3c 	.word	0x10013b3c
1000a51c:	10013b18 	.word	0x10013b18
1000a520:	10013b20 	.word	0x10013b20
1000a524:	4000b020 	.word	0x4000b020
1000a528:	10013b24 	.word	0x10013b24
1000a52c:	10013b14 	.word	0x10013b14

1000a530 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000a530:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000a532:	4b06      	ldr	r3, [pc, #24]	; (1000a54c <samb11_plf_resume_callback+0x1c>)
1000a534:	4a06      	ldr	r2, [pc, #24]	; (1000a550 <samb11_plf_resume_callback+0x20>)
1000a536:	6819      	ldr	r1, [r3, #0]
1000a538:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000a53a:	685a      	ldr	r2, [r3, #4]
1000a53c:	4b05      	ldr	r3, [pc, #20]	; (1000a554 <samb11_plf_resume_callback+0x24>)
1000a53e:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000a540:	4b05      	ldr	r3, [pc, #20]	; (1000a558 <samb11_plf_resume_callback+0x28>)
1000a542:	681b      	ldr	r3, [r3, #0]
1000a544:	2b00      	cmp	r3, #0
1000a546:	d000      	beq.n	1000a54a <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000a548:	4798      	blx	r3
	}
}
1000a54a:	bd10      	pop	{r4, pc}
1000a54c:	100144b0 	.word	0x100144b0
1000a550:	4000b00c 	.word	0x4000b00c
1000a554:	4000b010 	.word	0x4000b010
1000a558:	1001478c 	.word	0x1001478c

1000a55c <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000a55c:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000a55e:	2232      	movs	r2, #50	; 0x32
1000a560:	2100      	movs	r1, #0
1000a562:	480d      	ldr	r0, [pc, #52]	; (1000a598 <init_port_list+0x3c>)
1000a564:	4b0d      	ldr	r3, [pc, #52]	; (1000a59c <init_port_list+0x40>)
1000a566:	4798      	blx	r3
1000a568:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000a56a:	480b      	ldr	r0, [pc, #44]	; (1000a598 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000a56c:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000a56e:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000a570:	004a      	lsls	r2, r1, #1
1000a572:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000a574:	1882      	adds	r2, r0, r2
1000a576:	7853      	ldrb	r3, [r2, #1]
1000a578:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000a57a:	b2db      	uxtb	r3, r3
1000a57c:	43a3      	bics	r3, r4
1000a57e:	7053      	strb	r3, [r2, #1]
1000a580:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000a582:	2919      	cmp	r1, #25
1000a584:	d1f4      	bne.n	1000a570 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000a586:	4b04      	ldr	r3, [pc, #16]	; (1000a598 <init_port_list+0x3c>)
1000a588:	785a      	ldrb	r2, [r3, #1]
1000a58a:	3918      	subs	r1, #24
1000a58c:	438a      	bics	r2, r1
1000a58e:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000a590:	78da      	ldrb	r2, [r3, #3]
1000a592:	438a      	bics	r2, r1
1000a594:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000a596:	bd70      	pop	{r4, r5, r6, pc}
1000a598:	100144cc 	.word	0x100144cc
1000a59c:	1000ffbd 	.word	0x1000ffbd

1000a5a0 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000a5a0:	4a06      	ldr	r2, [pc, #24]	; (1000a5bc <init_clock+0x1c>)
1000a5a2:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000a5a4:	4b06      	ldr	r3, [pc, #24]	; (1000a5c0 <init_clock+0x20>)
1000a5a6:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000a5a8:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000a5aa:	4a06      	ldr	r2, [pc, #24]	; (1000a5c4 <init_clock+0x24>)
1000a5ac:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000a5ae:	4906      	ldr	r1, [pc, #24]	; (1000a5c8 <init_clock+0x28>)
1000a5b0:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000a5b2:	4b06      	ldr	r3, [pc, #24]	; (1000a5cc <init_clock+0x2c>)
1000a5b4:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000a5b6:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000a5b8:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000a5ba:	4770      	bx	lr
1000a5bc:	4000b00c 	.word	0x4000b00c
1000a5c0:	fffe0fd3 	.word	0xfffe0fd3
1000a5c4:	100144b0 	.word	0x100144b0
1000a5c8:	4000b010 	.word	0x4000b010
1000a5cc:	ffffe7c0 	.word	0xffffe7c0

1000a5d0 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000a5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a5d2:	4657      	mov	r7, sl
1000a5d4:	464e      	mov	r6, r9
1000a5d6:	4645      	mov	r5, r8
1000a5d8:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000a5da:	4b4f      	ldr	r3, [pc, #316]	; (1000a718 <platform_driver_init+0x148>)
1000a5dc:	781b      	ldrb	r3, [r3, #0]
1000a5de:	2b00      	cmp	r3, #0
1000a5e0:	d004      	beq.n	1000a5ec <platform_driver_init+0x1c>
1000a5e2:	4b4d      	ldr	r3, [pc, #308]	; (1000a718 <platform_driver_init+0x148>)
1000a5e4:	781b      	ldrb	r3, [r3, #0]
1000a5e6:	2b01      	cmp	r3, #1
1000a5e8:	d100      	bne.n	1000a5ec <platform_driver_init+0x1c>
1000a5ea:	e08c      	b.n	1000a706 <platform_driver_init+0x136>
		init_port_list();
1000a5ec:	4b4b      	ldr	r3, [pc, #300]	; (1000a71c <platform_driver_init+0x14c>)
1000a5ee:	4798      	blx	r3
		init_clock();
1000a5f0:	4b4b      	ldr	r3, [pc, #300]	; (1000a720 <platform_driver_init+0x150>)
1000a5f2:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000a5f4:	2300      	movs	r3, #0
1000a5f6:	4698      	mov	r8, r3
1000a5f8:	4b4a      	ldr	r3, [pc, #296]	; (1000a724 <platform_driver_init+0x154>)
1000a5fa:	4642      	mov	r2, r8
1000a5fc:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a5fe:	4c4a      	ldr	r4, [pc, #296]	; (1000a728 <platform_driver_init+0x158>)
1000a600:	2380      	movs	r3, #128	; 0x80
1000a602:	2280      	movs	r2, #128	; 0x80
1000a604:	0412      	lsls	r2, r2, #16
1000a606:	4692      	mov	sl, r2
1000a608:	50e2      	str	r2, [r4, r3]
1000a60a:	2280      	movs	r2, #128	; 0x80
1000a60c:	0452      	lsls	r2, r2, #17
1000a60e:	4691      	mov	r9, r2
1000a610:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000a612:	4d46      	ldr	r5, [pc, #280]	; (1000a72c <platform_driver_init+0x15c>)
1000a614:	4b46      	ldr	r3, [pc, #280]	; (1000a730 <platform_driver_init+0x160>)
1000a616:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000a618:	4b46      	ldr	r3, [pc, #280]	; (1000a734 <platform_driver_init+0x164>)
1000a61a:	4a47      	ldr	r2, [pc, #284]	; (1000a738 <platform_driver_init+0x168>)
1000a61c:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000a61e:	4947      	ldr	r1, [pc, #284]	; (1000a73c <platform_driver_init+0x16c>)
1000a620:	4a47      	ldr	r2, [pc, #284]	; (1000a740 <platform_driver_init+0x170>)
1000a622:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000a624:	4a47      	ldr	r2, [pc, #284]	; (1000a744 <platform_driver_init+0x174>)
1000a626:	6811      	ldr	r1, [r2, #0]
1000a628:	4a47      	ldr	r2, [pc, #284]	; (1000a748 <platform_driver_init+0x178>)
1000a62a:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000a62c:	4a47      	ldr	r2, [pc, #284]	; (1000a74c <platform_driver_init+0x17c>)
1000a62e:	6811      	ldr	r1, [r2, #0]
1000a630:	4a47      	ldr	r2, [pc, #284]	; (1000a750 <platform_driver_init+0x180>)
1000a632:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000a634:	4947      	ldr	r1, [pc, #284]	; (1000a754 <platform_driver_init+0x184>)
1000a636:	4a48      	ldr	r2, [pc, #288]	; (1000a758 <platform_driver_init+0x188>)
1000a638:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000a63a:	4948      	ldr	r1, [pc, #288]	; (1000a75c <platform_driver_init+0x18c>)
1000a63c:	4a48      	ldr	r2, [pc, #288]	; (1000a760 <platform_driver_init+0x190>)
1000a63e:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000a640:	4f48      	ldr	r7, [pc, #288]	; (1000a764 <platform_driver_init+0x194>)
1000a642:	4a49      	ldr	r2, [pc, #292]	; (1000a768 <platform_driver_init+0x198>)
1000a644:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000a646:	4949      	ldr	r1, [pc, #292]	; (1000a76c <platform_driver_init+0x19c>)
1000a648:	4a49      	ldr	r2, [pc, #292]	; (1000a770 <platform_driver_init+0x1a0>)
1000a64a:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000a64c:	4949      	ldr	r1, [pc, #292]	; (1000a774 <platform_driver_init+0x1a4>)
1000a64e:	4a4a      	ldr	r2, [pc, #296]	; (1000a778 <platform_driver_init+0x1a8>)
1000a650:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000a652:	4e4a      	ldr	r6, [pc, #296]	; (1000a77c <platform_driver_init+0x1ac>)
1000a654:	4a4a      	ldr	r2, [pc, #296]	; (1000a780 <platform_driver_init+0x1b0>)
1000a656:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000a658:	494a      	ldr	r1, [pc, #296]	; (1000a784 <platform_driver_init+0x1b4>)
1000a65a:	4a4b      	ldr	r2, [pc, #300]	; (1000a788 <platform_driver_init+0x1b8>)
1000a65c:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000a65e:	494b      	ldr	r1, [pc, #300]	; (1000a78c <platform_driver_init+0x1bc>)
1000a660:	4a4b      	ldr	r2, [pc, #300]	; (1000a790 <platform_driver_init+0x1c0>)
1000a662:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000a664:	494b      	ldr	r1, [pc, #300]	; (1000a794 <platform_driver_init+0x1c4>)
1000a666:	4a4c      	ldr	r2, [pc, #304]	; (1000a798 <platform_driver_init+0x1c8>)
1000a668:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000a66a:	494c      	ldr	r1, [pc, #304]	; (1000a79c <platform_driver_init+0x1cc>)
1000a66c:	4a4c      	ldr	r2, [pc, #304]	; (1000a7a0 <platform_driver_init+0x1d0>)
1000a66e:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000a670:	494c      	ldr	r1, [pc, #304]	; (1000a7a4 <platform_driver_init+0x1d4>)
1000a672:	4a4d      	ldr	r2, [pc, #308]	; (1000a7a8 <platform_driver_init+0x1d8>)
1000a674:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000a676:	2028      	movs	r0, #40	; 0x28
1000a678:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000a67a:	494c      	ldr	r1, [pc, #304]	; (1000a7ac <platform_driver_init+0x1dc>)
1000a67c:	2028      	movs	r0, #40	; 0x28
1000a67e:	682b      	ldr	r3, [r5, #0]
1000a680:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000a682:	682b      	ldr	r3, [r5, #0]
1000a684:	494a      	ldr	r1, [pc, #296]	; (1000a7b0 <platform_driver_init+0x1e0>)
1000a686:	2027      	movs	r0, #39	; 0x27
1000a688:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000a68a:	4b4a      	ldr	r3, [pc, #296]	; (1000a7b4 <platform_driver_init+0x1e4>)
1000a68c:	681a      	ldr	r2, [r3, #0]
1000a68e:	4b4a      	ldr	r3, [pc, #296]	; (1000a7b8 <platform_driver_init+0x1e8>)
1000a690:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000a692:	4a4a      	ldr	r2, [pc, #296]	; (1000a7bc <platform_driver_init+0x1ec>)
1000a694:	4b4a      	ldr	r3, [pc, #296]	; (1000a7c0 <platform_driver_init+0x1f0>)
1000a696:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000a698:	4a4a      	ldr	r2, [pc, #296]	; (1000a7c4 <platform_driver_init+0x1f4>)
1000a69a:	4b4b      	ldr	r3, [pc, #300]	; (1000a7c8 <platform_driver_init+0x1f8>)
1000a69c:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000a69e:	4a4b      	ldr	r2, [pc, #300]	; (1000a7cc <platform_driver_init+0x1fc>)
1000a6a0:	4b4b      	ldr	r3, [pc, #300]	; (1000a7d0 <platform_driver_init+0x200>)
1000a6a2:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000a6a4:	4a4b      	ldr	r2, [pc, #300]	; (1000a7d4 <platform_driver_init+0x204>)
1000a6a6:	4b4c      	ldr	r3, [pc, #304]	; (1000a7d8 <platform_driver_init+0x208>)
1000a6a8:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000a6aa:	4a4c      	ldr	r2, [pc, #304]	; (1000a7dc <platform_driver_init+0x20c>)
1000a6ac:	4b4c      	ldr	r3, [pc, #304]	; (1000a7e0 <platform_driver_init+0x210>)
1000a6ae:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000a6b0:	4a4c      	ldr	r2, [pc, #304]	; (1000a7e4 <platform_driver_init+0x214>)
1000a6b2:	4b4d      	ldr	r3, [pc, #308]	; (1000a7e8 <platform_driver_init+0x218>)
1000a6b4:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000a6b6:	4a4d      	ldr	r2, [pc, #308]	; (1000a7ec <platform_driver_init+0x21c>)
1000a6b8:	4b4d      	ldr	r3, [pc, #308]	; (1000a7f0 <platform_driver_init+0x220>)
1000a6ba:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000a6bc:	22a0      	movs	r2, #160	; 0xa0
1000a6be:	0092      	lsls	r2, r2, #2
1000a6c0:	2100      	movs	r1, #0
1000a6c2:	484c      	ldr	r0, [pc, #304]	; (1000a7f4 <platform_driver_init+0x224>)
1000a6c4:	4b4c      	ldr	r3, [pc, #304]	; (1000a7f8 <platform_driver_init+0x228>)
1000a6c6:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000a6c8:	2280      	movs	r2, #128	; 0x80
1000a6ca:	0092      	lsls	r2, r2, #2
1000a6cc:	4b4b      	ldr	r3, [pc, #300]	; (1000a7fc <platform_driver_init+0x22c>)
1000a6ce:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000a6d0:	4b4b      	ldr	r3, [pc, #300]	; (1000a800 <platform_driver_init+0x230>)
1000a6d2:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a6d4:	4653      	mov	r3, sl
1000a6d6:	6023      	str	r3, [r4, #0]
1000a6d8:	464b      	mov	r3, r9
1000a6da:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000a6dc:	4b49      	ldr	r3, [pc, #292]	; (1000a804 <platform_driver_init+0x234>)
1000a6de:	4642      	mov	r2, r8
1000a6e0:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000a6e2:	683b      	ldr	r3, [r7, #0]
1000a6e4:	4a48      	ldr	r2, [pc, #288]	; (1000a808 <platform_driver_init+0x238>)
1000a6e6:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000a6e8:	6833      	ldr	r3, [r6, #0]
1000a6ea:	4a48      	ldr	r2, [pc, #288]	; (1000a80c <platform_driver_init+0x23c>)
1000a6ec:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000a6ee:	2000      	movs	r0, #0
1000a6f0:	4c47      	ldr	r4, [pc, #284]	; (1000a810 <platform_driver_init+0x240>)
1000a6f2:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000a6f4:	2001      	movs	r0, #1
1000a6f6:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000a6f8:	2002      	movs	r0, #2
1000a6fa:	47a0      	blx	r4
		platform_initialized = 1;
1000a6fc:	2201      	movs	r2, #1
1000a6fe:	4b06      	ldr	r3, [pc, #24]	; (1000a718 <platform_driver_init+0x148>)
1000a700:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000a702:	2000      	movs	r0, #0
1000a704:	e003      	b.n	1000a70e <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000a706:	2201      	movs	r2, #1
1000a708:	4b03      	ldr	r3, [pc, #12]	; (1000a718 <platform_driver_init+0x148>)
1000a70a:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000a70c:	2001      	movs	r0, #1
	}
	return status;
}
1000a70e:	bc1c      	pop	{r2, r3, r4}
1000a710:	4690      	mov	r8, r2
1000a712:	4699      	mov	r9, r3
1000a714:	46a2      	mov	sl, r4
1000a716:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a718:	10013b1c 	.word	0x10013b1c
1000a71c:	1000a55d 	.word	0x1000a55d
1000a720:	1000a5a1 	.word	0x1000a5a1
1000a724:	10013b38 	.word	0x10013b38
1000a728:	e000e100 	.word	0xe000e100
1000a72c:	10014780 	.word	0x10014780
1000a730:	000007d7 	.word	0x000007d7
1000a734:	000007bd 	.word	0x000007bd
1000a738:	100144bc 	.word	0x100144bc
1000a73c:	0001bc51 	.word	0x0001bc51
1000a740:	10014784 	.word	0x10014784
1000a744:	100400bc 	.word	0x100400bc
1000a748:	10013b10 	.word	0x10013b10
1000a74c:	100400b8 	.word	0x100400b8
1000a750:	10013b0c 	.word	0x10013b0c
1000a754:	0001b99f 	.word	0x0001b99f
1000a758:	100144b8 	.word	0x100144b8
1000a75c:	0001b9db 	.word	0x0001b9db
1000a760:	100144c4 	.word	0x100144c4
1000a764:	10014794 	.word	0x10014794
1000a768:	1004003c 	.word	0x1004003c
1000a76c:	10041fc0 	.word	0x10041fc0
1000a770:	100144c8 	.word	0x100144c8
1000a774:	10041fc4 	.word	0x10041fc4
1000a778:	10014790 	.word	0x10014790
1000a77c:	10014788 	.word	0x10014788
1000a780:	10041fd4 	.word	0x10041fd4
1000a784:	10041fd8 	.word	0x10041fd8
1000a788:	100144c0 	.word	0x100144c0
1000a78c:	0001cbe9 	.word	0x0001cbe9
1000a790:	10013b2c 	.word	0x10013b2c
1000a794:	0001cd8f 	.word	0x0001cd8f
1000a798:	10013b20 	.word	0x10013b20
1000a79c:	0001cea3 	.word	0x0001cea3
1000a7a0:	10013b3c 	.word	0x10013b3c
1000a7a4:	0001cbcf 	.word	0x0001cbcf
1000a7a8:	10013b18 	.word	0x10013b18
1000a7ac:	1000ac29 	.word	0x1000ac29
1000a7b0:	1000abbd 	.word	0x1000abbd
1000a7b4:	100400e4 	.word	0x100400e4
1000a7b8:	10013b34 	.word	0x10013b34
1000a7bc:	00019fe9 	.word	0x00019fe9
1000a7c0:	10013b44 	.word	0x10013b44
1000a7c4:	0001dbdd 	.word	0x0001dbdd
1000a7c8:	10013b14 	.word	0x10013b14
1000a7cc:	0001dc5b 	.word	0x0001dc5b
1000a7d0:	10013b28 	.word	0x10013b28
1000a7d4:	100405ec 	.word	0x100405ec
1000a7d8:	10013b24 	.word	0x10013b24
1000a7dc:	0001d5e3 	.word	0x0001d5e3
1000a7e0:	10013b30 	.word	0x10013b30
1000a7e4:	10040c20 	.word	0x10040c20
1000a7e8:	10013b48 	.word	0x10013b48
1000a7ec:	00019f09 	.word	0x00019f09
1000a7f0:	10013b08 	.word	0x10013b08
1000a7f4:	10014500 	.word	0x10014500
1000a7f8:	1000ffbd 	.word	0x1000ffbd
1000a7fc:	10014798 	.word	0x10014798
1000a800:	1000a489 	.word	0x1000a489
1000a804:	1001478c 	.word	0x1001478c
1000a808:	1000a531 	.word	0x1000a531
1000a80c:	1000ac85 	.word	0x1000ac85
1000a810:	1000ac6d 	.word	0x1000ac6d

1000a814 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000a814:	4b04      	ldr	r3, [pc, #16]	; (1000a828 <platform_register_ble_msg_handler+0x14>)
1000a816:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000a818:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000a81a:	2a01      	cmp	r2, #1
1000a81c:	d102      	bne.n	1000a824 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000a81e:	4b03      	ldr	r3, [pc, #12]	; (1000a82c <platform_register_ble_msg_handler+0x18>)
1000a820:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000a822:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000a824:	0018      	movs	r0, r3
1000a826:	4770      	bx	lr
1000a828:	10013b1c 	.word	0x10013b1c
1000a82c:	10013b38 	.word	0x10013b38

1000a830 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000a830:	b570      	push	{r4, r5, r6, lr}
1000a832:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000a834:	4b0e      	ldr	r3, [pc, #56]	; (1000a870 <platform_interface_send+0x40>)
1000a836:	681b      	ldr	r3, [r3, #0]
1000a838:	2b00      	cmp	r3, #0
1000a83a:	d002      	beq.n	1000a842 <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000a83c:	8840      	ldrh	r0, [r0, #2]
1000a83e:	4798      	blx	r3
1000a840:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000a842:	88e3      	ldrh	r3, [r4, #6]
1000a844:	88a2      	ldrh	r2, [r4, #4]
1000a846:	8861      	ldrh	r1, [r4, #2]
1000a848:	8820      	ldrh	r0, [r4, #0]
1000a84a:	4d0a      	ldr	r5, [pc, #40]	; (1000a874 <platform_interface_send+0x44>)
1000a84c:	682d      	ldr	r5, [r5, #0]
1000a84e:	47a8      	blx	r5
1000a850:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000a852:	88e2      	ldrh	r2, [r4, #6]
1000a854:	2a00      	cmp	r2, #0
1000a856:	d102      	bne.n	1000a85e <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000a858:	4b07      	ldr	r3, [pc, #28]	; (1000a878 <platform_interface_send+0x48>)
1000a85a:	4798      	blx	r3
1000a85c:	e006      	b.n	1000a86c <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000a85e:	0021      	movs	r1, r4
1000a860:	3108      	adds	r1, #8
1000a862:	4b06      	ldr	r3, [pc, #24]	; (1000a87c <platform_interface_send+0x4c>)
1000a864:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000a866:	0028      	movs	r0, r5
1000a868:	4b03      	ldr	r3, [pc, #12]	; (1000a878 <platform_interface_send+0x48>)
1000a86a:	4798      	blx	r3
	}
}
1000a86c:	bd70      	pop	{r4, r5, r6, pc}
1000a86e:	46c0      	nop			; (mov r8, r8)
1000a870:	10013b10 	.word	0x10013b10
1000a874:	10013b44 	.word	0x10013b44
1000a878:	1000a4b9 	.word	0x1000a4b9
1000a87c:	1000ffab 	.word	0x1000ffab

1000a880 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000a880:	b570      	push	{r4, r5, r6, lr}
1000a882:	0015      	movs	r5, r2
1000a884:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000a886:	020a      	lsls	r2, r1, #8
1000a888:	4302      	orrs	r2, r0
1000a88a:	4b0a      	ldr	r3, [pc, #40]	; (1000a8b4 <send_plf_int_msg_ind+0x34>)
1000a88c:	681e      	ldr	r6, [r3, #0]
1000a88e:	0023      	movs	r3, r4
1000a890:	2105      	movs	r1, #5
1000a892:	20a0      	movs	r0, #160	; 0xa0
1000a894:	00c0      	lsls	r0, r0, #3
1000a896:	47b0      	blx	r6
1000a898:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000a89a:	d00a      	beq.n	1000a8b2 <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000a89c:	2c00      	cmp	r4, #0
1000a89e:	d005      	beq.n	1000a8ac <send_plf_int_msg_ind+0x2c>
1000a8a0:	2d00      	cmp	r5, #0
1000a8a2:	d003      	beq.n	1000a8ac <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000a8a4:	0022      	movs	r2, r4
1000a8a6:	0029      	movs	r1, r5
1000a8a8:	4b03      	ldr	r3, [pc, #12]	; (1000a8b8 <send_plf_int_msg_ind+0x38>)
1000a8aa:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000a8ac:	0030      	movs	r0, r6
1000a8ae:	4b03      	ldr	r3, [pc, #12]	; (1000a8bc <send_plf_int_msg_ind+0x3c>)
1000a8b0:	4798      	blx	r3
	}
}
1000a8b2:	bd70      	pop	{r4, r5, r6, pc}
1000a8b4:	10013b44 	.word	0x10013b44
1000a8b8:	1000ffab 	.word	0x1000ffab
1000a8bc:	1000a4b9 	.word	0x1000a4b9

1000a8c0 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000a8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a8c2:	465f      	mov	r7, fp
1000a8c4:	4656      	mov	r6, sl
1000a8c6:	464d      	mov	r5, r9
1000a8c8:	4644      	mov	r4, r8
1000a8ca:	b4f0      	push	{r4, r5, r6, r7}
1000a8cc:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000a8ce:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000a8d0:	2300      	movs	r3, #0
1000a8d2:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000a8d4:	1ce3      	adds	r3, r4, #3
1000a8d6:	d81c      	bhi.n	1000a912 <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000a8d8:	220d      	movs	r2, #13
1000a8da:	2100      	movs	r1, #0
1000a8dc:	a802      	add	r0, sp, #8
1000a8de:	4b82      	ldr	r3, [pc, #520]	; (1000aae8 <platform_event_wait+0x228>)
1000a8e0:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000a8e2:	2333      	movs	r3, #51	; 0x33
1000a8e4:	aa02      	add	r2, sp, #8
1000a8e6:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000a8e8:	3b30      	subs	r3, #48	; 0x30
1000a8ea:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000a8ec:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000a8ee:	3302      	adds	r3, #2
1000a8f0:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000a8f2:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000a8f4:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000a8f6:	0a23      	lsrs	r3, r4, #8
1000a8f8:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000a8fa:	0c23      	lsrs	r3, r4, #16
1000a8fc:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000a8fe:	0e24      	lsrs	r4, r4, #24
1000a900:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000a902:	2301      	movs	r3, #1
1000a904:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000a906:	210d      	movs	r1, #13
1000a908:	0010      	movs	r0, r2
1000a90a:	4b78      	ldr	r3, [pc, #480]	; (1000aaec <platform_event_wait+0x22c>)
1000a90c:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000a90e:	2301      	movs	r3, #1
1000a910:	4699      	mov	r9, r3
1000a912:	2400      	movs	r4, #0
1000a914:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000a916:	4f76      	ldr	r7, [pc, #472]	; (1000aaf0 <platform_event_wait+0x230>)
1000a918:	4e76      	ldr	r6, [pc, #472]	; (1000aaf4 <platform_event_wait+0x234>)
1000a91a:	4977      	ldr	r1, [pc, #476]	; (1000aaf8 <platform_event_wait+0x238>)
1000a91c:	6838      	ldr	r0, [r7, #0]
1000a91e:	6833      	ldr	r3, [r6, #0]
1000a920:	4798      	blx	r3
1000a922:	2800      	cmp	r0, #0
1000a924:	d000      	beq.n	1000a928 <platform_event_wait+0x68>
1000a926:	e088      	b.n	1000aa3a <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000a928:	4b73      	ldr	r3, [pc, #460]	; (1000aaf8 <platform_event_wait+0x238>)
1000a92a:	681c      	ldr	r4, [r3, #0]
1000a92c:	88a3      	ldrh	r3, [r4, #4]
1000a92e:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000a930:	23cd      	movs	r3, #205	; 0xcd
1000a932:	009b      	lsls	r3, r3, #2
1000a934:	459a      	cmp	sl, r3
1000a936:	d100      	bne.n	1000a93a <platform_event_wait+0x7a>
1000a938:	e0c7      	b.n	1000aaca <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000a93a:	8923      	ldrh	r3, [r4, #8]
1000a93c:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000a93e:	8963      	ldrh	r3, [r4, #10]
1000a940:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000a942:	464b      	mov	r3, r9
1000a944:	2b00      	cmp	r3, #0
1000a946:	d011      	beq.n	1000a96c <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000a948:	220d      	movs	r2, #13
1000a94a:	2100      	movs	r1, #0
1000a94c:	a802      	add	r0, sp, #8
1000a94e:	4b66      	ldr	r3, [pc, #408]	; (1000aae8 <platform_event_wait+0x228>)
1000a950:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000a952:	2333      	movs	r3, #51	; 0x33
1000a954:	aa02      	add	r2, sp, #8
1000a956:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000a958:	3b30      	subs	r3, #48	; 0x30
1000a95a:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000a95c:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000a95e:	3302      	adds	r3, #2
1000a960:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000a962:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000a964:	210d      	movs	r1, #13
1000a966:	0010      	movs	r0, r2
1000a968:	4b60      	ldr	r3, [pc, #384]	; (1000aaec <platform_event_wait+0x22c>)
1000a96a:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000a96c:	23a0      	movs	r3, #160	; 0xa0
1000a96e:	00db      	lsls	r3, r3, #3
1000a970:	459a      	cmp	sl, r3
1000a972:	d121      	bne.n	1000a9b8 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000a974:	4b61      	ldr	r3, [pc, #388]	; (1000aafc <platform_event_wait+0x23c>)
1000a976:	881b      	ldrh	r3, [r3, #0]
1000a978:	4443      	add	r3, r8
1000a97a:	22a0      	movs	r2, #160	; 0xa0
1000a97c:	0092      	lsls	r2, r2, #2
1000a97e:	4293      	cmp	r3, r2
1000a980:	dd02      	ble.n	1000a988 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000a982:	3a80      	subs	r2, #128	; 0x80
1000a984:	4b5d      	ldr	r3, [pc, #372]	; (1000aafc <platform_event_wait+0x23c>)
1000a986:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000a988:	4b5c      	ldr	r3, [pc, #368]	; (1000aafc <platform_event_wait+0x23c>)
1000a98a:	469a      	mov	sl, r3
1000a98c:	881d      	ldrh	r5, [r3, #0]
1000a98e:	4b5c      	ldr	r3, [pc, #368]	; (1000ab00 <platform_event_wait+0x240>)
1000a990:	18ed      	adds	r5, r5, r3
1000a992:	0021      	movs	r1, r4
1000a994:	310c      	adds	r1, #12
1000a996:	4642      	mov	r2, r8
1000a998:	0028      	movs	r0, r5
1000a99a:	4b5a      	ldr	r3, [pc, #360]	; (1000ab04 <platform_event_wait+0x244>)
1000a99c:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000a99e:	4642      	mov	r2, r8
1000a9a0:	0029      	movs	r1, r5
1000a9a2:	4658      	mov	r0, fp
1000a9a4:	4b58      	ldr	r3, [pc, #352]	; (1000ab08 <platform_event_wait+0x248>)
1000a9a6:	4798      	blx	r3
				plf_event_buff_index += len;
1000a9a8:	4653      	mov	r3, sl
1000a9aa:	881b      	ldrh	r3, [r3, #0]
1000a9ac:	4443      	add	r3, r8
1000a9ae:	4652      	mov	r2, sl
1000a9b0:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000a9b2:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000a9b4:	2502      	movs	r5, #2
1000a9b6:	e03a      	b.n	1000aa2e <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000a9b8:	4b54      	ldr	r3, [pc, #336]	; (1000ab0c <platform_event_wait+0x24c>)
1000a9ba:	681b      	ldr	r3, [r3, #0]
1000a9bc:	2b00      	cmp	r3, #0
1000a9be:	d032      	beq.n	1000aa26 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000a9c0:	4b4d      	ldr	r3, [pc, #308]	; (1000aaf8 <platform_event_wait+0x238>)
1000a9c2:	681a      	ldr	r2, [r3, #0]
1000a9c4:	8893      	ldrh	r3, [r2, #4]
1000a9c6:	21cd      	movs	r1, #205	; 0xcd
1000a9c8:	0089      	lsls	r1, r1, #2
1000a9ca:	428b      	cmp	r3, r1
1000a9cc:	d104      	bne.n	1000a9d8 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000a9ce:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000a9d0:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000a9d2:	2b00      	cmp	r3, #0
1000a9d4:	d02b      	beq.n	1000aa2e <platform_event_wait+0x16e>
1000a9d6:	e028      	b.n	1000aa2a <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000a9d8:	4c4d      	ldr	r4, [pc, #308]	; (1000ab10 <platform_event_wait+0x250>)
1000a9da:	4d49      	ldr	r5, [pc, #292]	; (1000ab00 <platform_event_wait+0x240>)
1000a9dc:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000a9de:	702b      	strb	r3, [r5, #0]
1000a9e0:	0a1b      	lsrs	r3, r3, #8
1000a9e2:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000a9e4:	8910      	ldrh	r0, [r2, #8]
1000a9e6:	4b4b      	ldr	r3, [pc, #300]	; (1000ab14 <platform_event_wait+0x254>)
1000a9e8:	681b      	ldr	r3, [r3, #0]
1000a9ea:	4798      	blx	r3
1000a9ec:	7128      	strb	r0, [r5, #4]
1000a9ee:	0a00      	lsrs	r0, r0, #8
1000a9f0:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000a9f2:	6820      	ldr	r0, [r4, #0]
1000a9f4:	4b40      	ldr	r3, [pc, #256]	; (1000aaf8 <platform_event_wait+0x238>)
1000a9f6:	681a      	ldr	r2, [r3, #0]
1000a9f8:	88d2      	ldrh	r2, [r2, #6]
1000a9fa:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000a9fc:	681d      	ldr	r5, [r3, #0]
1000a9fe:	896b      	ldrh	r3, [r5, #10]
1000aa00:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000aa02:	3008      	adds	r0, #8
1000aa04:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000aa06:	896a      	ldrh	r2, [r5, #10]
1000aa08:	2a00      	cmp	r2, #0
1000aa0a:	d003      	beq.n	1000aa14 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000aa0c:	0029      	movs	r1, r5
1000aa0e:	310c      	adds	r1, #12
1000aa10:	4b3c      	ldr	r3, [pc, #240]	; (1000ab04 <platform_event_wait+0x244>)
1000aa12:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000aa14:	8969      	ldrh	r1, [r5, #10]
1000aa16:	3108      	adds	r1, #8
1000aa18:	4b3c      	ldr	r3, [pc, #240]	; (1000ab0c <platform_event_wait+0x24c>)
1000aa1a:	681b      	ldr	r3, [r3, #0]
1000aa1c:	4838      	ldr	r0, [pc, #224]	; (1000ab00 <platform_event_wait+0x240>)
1000aa1e:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000aa20:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000aa22:	2503      	movs	r5, #3
1000aa24:	e003      	b.n	1000aa2e <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000aa26:	2400      	movs	r4, #0
1000aa28:	e001      	b.n	1000aa2e <platform_event_wait+0x16e>
1000aa2a:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000aa2c:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000aa2e:	4b32      	ldr	r3, [pc, #200]	; (1000aaf8 <platform_event_wait+0x238>)
1000aa30:	6818      	ldr	r0, [r3, #0]
1000aa32:	4b39      	ldr	r3, [pc, #228]	; (1000ab18 <platform_event_wait+0x258>)
1000aa34:	681b      	ldr	r3, [r3, #0]
1000aa36:	4798      	blx	r3
1000aa38:	e000      	b.n	1000aa3c <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000aa3a:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000aa3c:	2c00      	cmp	r4, #0
1000aa3e:	d000      	beq.n	1000aa42 <platform_event_wait+0x182>
1000aa40:	e76b      	b.n	1000a91a <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000aa42:	464b      	mov	r3, r9
1000aa44:	2b00      	cmp	r3, #0
1000aa46:	d046      	beq.n	1000aad6 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000aa48:	4b29      	ldr	r3, [pc, #164]	; (1000aaf0 <platform_event_wait+0x230>)
1000aa4a:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000aa4c:	2e00      	cmp	r6, #0
1000aa4e:	d104      	bne.n	1000aa5a <platform_event_wait+0x19a>
1000aa50:	2300      	movs	r3, #0
1000aa52:	6a1c      	ldr	r4, [r3, #32]
1000aa54:	2c00      	cmp	r4, #0
1000aa56:	d131      	bne.n	1000aabc <platform_event_wait+0x1fc>
1000aa58:	e03d      	b.n	1000aad6 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000aa5a:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000aa5c:	2314      	movs	r3, #20
1000aa5e:	469c      	mov	ip, r3
1000aa60:	44b4      	add	ip, r6
1000aa62:	4663      	mov	r3, ip
1000aa64:	4660      	mov	r0, ip
1000aa66:	9300      	str	r3, [sp, #0]
1000aa68:	4b2c      	ldr	r3, [pc, #176]	; (1000ab1c <platform_event_wait+0x25c>)
1000aa6a:	681b      	ldr	r3, [r3, #0]
1000aa6c:	4798      	blx	r3
	while(NULL != current)
1000aa6e:	2c00      	cmp	r4, #0
1000aa70:	d01f      	beq.n	1000aab2 <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000aa72:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000aa74:	23cd      	movs	r3, #205	; 0xcd
1000aa76:	009b      	lsls	r3, r3, #2
1000aa78:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000aa7a:	4b27      	ldr	r3, [pc, #156]	; (1000ab18 <platform_event_wait+0x258>)
1000aa7c:	469a      	mov	sl, r3
1000aa7e:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000aa80:	6803      	ldr	r3, [r0, #0]
1000aa82:	889b      	ldrh	r3, [r3, #4]
1000aa84:	4543      	cmp	r3, r8
1000aa86:	d110      	bne.n	1000aaaa <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000aa88:	2f00      	cmp	r7, #0
1000aa8a:	d006      	beq.n	1000aa9a <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000aa8c:	6883      	ldr	r3, [r0, #8]
1000aa8e:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000aa90:	4653      	mov	r3, sl
1000aa92:	681b      	ldr	r3, [r3, #0]
1000aa94:	4798      	blx	r3
				current = prev->pstrNext;
1000aa96:	68b8      	ldr	r0, [r7, #8]
1000aa98:	e009      	b.n	1000aaae <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000aa9a:	6883      	ldr	r3, [r0, #8]
1000aa9c:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000aa9e:	4b1e      	ldr	r3, [pc, #120]	; (1000ab18 <platform_event_wait+0x258>)
1000aaa0:	681b      	ldr	r3, [r3, #0]
1000aaa2:	9301      	str	r3, [sp, #4]
1000aaa4:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000aaa6:	6a30      	ldr	r0, [r6, #32]
1000aaa8:	e001      	b.n	1000aaae <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000aaaa:	0007      	movs	r7, r0
1000aaac:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000aaae:	2800      	cmp	r0, #0
1000aab0:	d1e6      	bne.n	1000aa80 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000aab2:	4b1b      	ldr	r3, [pc, #108]	; (1000ab20 <platform_event_wait+0x260>)
1000aab4:	681b      	ldr	r3, [r3, #0]
1000aab6:	9800      	ldr	r0, [sp, #0]
1000aab8:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000aaba:	e00c      	b.n	1000aad6 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000aabc:	2314      	movs	r3, #20
1000aabe:	9300      	str	r3, [sp, #0]
1000aac0:	4b16      	ldr	r3, [pc, #88]	; (1000ab1c <platform_event_wait+0x25c>)
1000aac2:	681b      	ldr	r3, [r3, #0]
1000aac4:	2014      	movs	r0, #20
1000aac6:	4798      	blx	r3
1000aac8:	e7d3      	b.n	1000aa72 <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000aaca:	4b10      	ldr	r3, [pc, #64]	; (1000ab0c <platform_event_wait+0x24c>)
1000aacc:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000aace:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000aad0:	2b00      	cmp	r3, #0
1000aad2:	d0ac      	beq.n	1000aa2e <platform_event_wait+0x16e>
1000aad4:	e77b      	b.n	1000a9ce <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000aad6:	0028      	movs	r0, r5
1000aad8:	b007      	add	sp, #28
1000aada:	bc3c      	pop	{r2, r3, r4, r5}
1000aadc:	4690      	mov	r8, r2
1000aade:	4699      	mov	r9, r3
1000aae0:	46a2      	mov	sl, r4
1000aae2:	46ab      	mov	fp, r5
1000aae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000aae6:	46c0      	nop			; (mov r8, r8)
1000aae8:	1000ffbd 	.word	0x1000ffbd
1000aaec:	1000a831 	.word	0x1000a831
1000aaf0:	10013b48 	.word	0x10013b48
1000aaf4:	10013b30 	.word	0x10013b30
1000aaf8:	10013b04 	.word	0x10013b04
1000aafc:	10014798 	.word	0x10014798
1000ab00:	10014500 	.word	0x10014500
1000ab04:	1000ffab 	.word	0x1000ffab
1000ab08:	1000a451 	.word	0x1000a451
1000ab0c:	10013b38 	.word	0x10013b38
1000ab10:	10013b40 	.word	0x10013b40
1000ab14:	10013b0c 	.word	0x10013b0c
1000ab18:	10013b08 	.word	0x10013b08
1000ab1c:	10013b28 	.word	0x10013b28
1000ab20:	10013b14 	.word	0x10013b14

1000ab24 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000ab24:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000ab26:	4b03      	ldr	r3, [pc, #12]	; (1000ab34 <acquire_sleep_lock+0x10>)
1000ab28:	681b      	ldr	r3, [r3, #0]
1000ab2a:	2080      	movs	r0, #128	; 0x80
1000ab2c:	0200      	lsls	r0, r0, #8
1000ab2e:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000ab30:	2008      	movs	r0, #8
1000ab32:	bd10      	pop	{r4, pc}
1000ab34:	100144b8 	.word	0x100144b8

1000ab38 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000ab38:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000ab3a:	4b03      	ldr	r3, [pc, #12]	; (1000ab48 <release_message_lock+0x10>)
1000ab3c:	681b      	ldr	r3, [r3, #0]
1000ab3e:	2080      	movs	r0, #128	; 0x80
1000ab40:	01c0      	lsls	r0, r0, #7
1000ab42:	4798      	blx	r3
	return status;
}
1000ab44:	2000      	movs	r0, #0
1000ab46:	bd10      	pop	{r4, pc}
1000ab48:	100144c4 	.word	0x100144c4

1000ab4c <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000ab4c:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000ab4e:	4a18      	ldr	r2, [pc, #96]	; (1000abb0 <gpio1_combined_isr_handler+0x64>)
1000ab50:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000ab52:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000ab54:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000ab56:	2180      	movs	r1, #128	; 0x80
1000ab58:	0209      	lsls	r1, r1, #8
1000ab5a:	4301      	orrs	r1, r0
1000ab5c:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000ab5e:	0010      	movs	r0, r2
1000ab60:	4d14      	ldr	r5, [pc, #80]	; (1000abb4 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000ab62:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000ab64:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000ab66:	05db      	lsls	r3, r3, #23
1000ab68:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000ab6a:	d011      	beq.n	1000ab90 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000ab6c:	b2db      	uxtb	r3, r3
1000ab6e:	4259      	negs	r1, r3
1000ab70:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000ab72:	2b01      	cmp	r3, #1
1000ab74:	d006      	beq.n	1000ab84 <gpio1_combined_isr_handler+0x38>
1000ab76:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000ab78:	085b      	lsrs	r3, r3, #1
				index++;
1000ab7a:	3101      	adds	r1, #1
1000ab7c:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000ab7e:	2b01      	cmp	r3, #1
1000ab80:	d1fa      	bne.n	1000ab78 <gpio1_combined_isr_handler+0x2c>
1000ab82:	e000      	b.n	1000ab86 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000ab84:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000ab86:	0023      	movs	r3, r4
1000ab88:	408b      	lsls	r3, r1
1000ab8a:	b29b      	uxth	r3, r3
1000ab8c:	8703      	strh	r3, [r0, #56]	; 0x38
1000ab8e:	e003      	b.n	1000ab98 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000ab90:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000ab92:	432b      	orrs	r3, r5
1000ab94:	b29b      	uxth	r3, r3
1000ab96:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000ab98:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000ab9a:	05db      	lsls	r3, r3, #23
1000ab9c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000ab9e:	d1e2      	bne.n	1000ab66 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000aba0:	2180      	movs	r1, #128	; 0x80
1000aba2:	0049      	lsls	r1, r1, #1
1000aba4:	3381      	adds	r3, #129	; 0x81
1000aba6:	33ff      	adds	r3, #255	; 0xff
1000aba8:	4a03      	ldr	r2, [pc, #12]	; (1000abb8 <gpio1_combined_isr_handler+0x6c>)
1000abaa:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000abac:	bd30      	pop	{r4, r5, pc}
1000abae:	46c0      	nop			; (mov r8, r8)
1000abb0:	40011000 	.word	0x40011000
1000abb4:	ffff8000 	.word	0xffff8000
1000abb8:	e000e100 	.word	0xe000e100

1000abbc <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000abbc:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000abbe:	4a17      	ldr	r2, [pc, #92]	; (1000ac1c <gpio0_combined_isr_handler+0x60>)
1000abc0:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000abc2:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000abc4:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000abc6:	2180      	movs	r1, #128	; 0x80
1000abc8:	0209      	lsls	r1, r1, #8
1000abca:	4301      	orrs	r1, r0
1000abcc:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000abce:	0010      	movs	r0, r2
1000abd0:	4d13      	ldr	r5, [pc, #76]	; (1000ac20 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000abd2:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000abd4:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000abd6:	05db      	lsls	r3, r3, #23
1000abd8:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000abda:	d011      	beq.n	1000ac00 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000abdc:	b2db      	uxtb	r3, r3
1000abde:	4259      	negs	r1, r3
1000abe0:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000abe2:	2b01      	cmp	r3, #1
1000abe4:	d006      	beq.n	1000abf4 <gpio0_combined_isr_handler+0x38>
1000abe6:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000abe8:	085b      	lsrs	r3, r3, #1
				index++;
1000abea:	3101      	adds	r1, #1
1000abec:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000abee:	2b01      	cmp	r3, #1
1000abf0:	d1fa      	bne.n	1000abe8 <gpio0_combined_isr_handler+0x2c>
1000abf2:	e000      	b.n	1000abf6 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000abf4:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000abf6:	0023      	movs	r3, r4
1000abf8:	408b      	lsls	r3, r1
1000abfa:	b29b      	uxth	r3, r3
1000abfc:	8703      	strh	r3, [r0, #56]	; 0x38
1000abfe:	e003      	b.n	1000ac08 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000ac00:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000ac02:	432b      	orrs	r3, r5
1000ac04:	b29b      	uxth	r3, r3
1000ac06:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000ac08:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000ac0a:	05db      	lsls	r3, r3, #23
1000ac0c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000ac0e:	d1e2      	bne.n	1000abd6 <gpio0_combined_isr_handler+0x1a>
1000ac10:	2180      	movs	r1, #128	; 0x80
1000ac12:	3381      	adds	r3, #129	; 0x81
1000ac14:	33ff      	adds	r3, #255	; 0xff
1000ac16:	4a03      	ldr	r2, [pc, #12]	; (1000ac24 <gpio0_combined_isr_handler+0x68>)
1000ac18:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000ac1a:	bd30      	pop	{r4, r5, pc}
1000ac1c:	40010000 	.word	0x40010000
1000ac20:	ffff8000 	.word	0xffff8000
1000ac24:	e000e100 	.word	0xe000e100

1000ac28 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000ac28:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000ac2a:	4b0c      	ldr	r3, [pc, #48]	; (1000ac5c <PORT1_COMB_Handler+0x34>)
1000ac2c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000ac2e:	0b5b      	lsrs	r3, r3, #13
1000ac30:	d010      	beq.n	1000ac54 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000ac32:	4b0b      	ldr	r3, [pc, #44]	; (1000ac60 <PORT1_COMB_Handler+0x38>)
1000ac34:	681b      	ldr	r3, [r3, #0]
1000ac36:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000ac38:	4a08      	ldr	r2, [pc, #32]	; (1000ac5c <PORT1_COMB_Handler+0x34>)
1000ac3a:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000ac3c:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000ac3e:	0b5b      	lsrs	r3, r3, #13
1000ac40:	035b      	lsls	r3, r3, #13
1000ac42:	430b      	orrs	r3, r1
1000ac44:	8713      	strh	r3, [r2, #56]	; 0x38
1000ac46:	2180      	movs	r1, #128	; 0x80
1000ac48:	0049      	lsls	r1, r1, #1
1000ac4a:	23c0      	movs	r3, #192	; 0xc0
1000ac4c:	005b      	lsls	r3, r3, #1
1000ac4e:	4a05      	ldr	r2, [pc, #20]	; (1000ac64 <PORT1_COMB_Handler+0x3c>)
1000ac50:	50d1      	str	r1, [r2, r3]
1000ac52:	e001      	b.n	1000ac58 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000ac54:	4b04      	ldr	r3, [pc, #16]	; (1000ac68 <PORT1_COMB_Handler+0x40>)
1000ac56:	4798      	blx	r3
	}
}
1000ac58:	bd10      	pop	{r4, pc}
1000ac5a:	46c0      	nop			; (mov r8, r8)
1000ac5c:	40011000 	.word	0x40011000
1000ac60:	10014784 	.word	0x10014784
1000ac64:	e000e100 	.word	0xe000e100
1000ac68:	1000ab4d 	.word	0x1000ab4d

1000ac6c <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000ac6c:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000ac6e:	2802      	cmp	r0, #2
1000ac70:	d804      	bhi.n	1000ac7c <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000ac72:	0080      	lsls	r0, r0, #2
1000ac74:	2200      	movs	r2, #0
1000ac76:	4b02      	ldr	r3, [pc, #8]	; (1000ac80 <wakeup_int_unregister_callback+0x14>)
1000ac78:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000ac7a:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000ac7c:	0018      	movs	r0, r3
1000ac7e:	4770      	bx	lr
1000ac80:	1001479c 	.word	0x1001479c

1000ac84 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000ac84:	b510      	push	{r4, lr}
1000ac86:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000ac88:	7803      	ldrb	r3, [r0, #0]
1000ac8a:	2b01      	cmp	r3, #1
1000ac8c:	d108      	bne.n	1000aca0 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000ac8e:	4b11      	ldr	r3, [pc, #68]	; (1000acd4 <wakeup_active_event_callback+0x50>)
1000ac90:	681b      	ldr	r3, [r3, #0]
1000ac92:	2b00      	cmp	r3, #0
1000ac94:	d000      	beq.n	1000ac98 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000ac96:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000ac98:	23ff      	movs	r3, #255	; 0xff
1000ac9a:	6822      	ldr	r2, [r4, #0]
1000ac9c:	439a      	bics	r2, r3
1000ac9e:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000aca0:	7863      	ldrb	r3, [r4, #1]
1000aca2:	2b01      	cmp	r3, #1
1000aca4:	d108      	bne.n	1000acb8 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000aca6:	4b0b      	ldr	r3, [pc, #44]	; (1000acd4 <wakeup_active_event_callback+0x50>)
1000aca8:	685b      	ldr	r3, [r3, #4]
1000acaa:	2b00      	cmp	r3, #0
1000acac:	d000      	beq.n	1000acb0 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000acae:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000acb0:	4b09      	ldr	r3, [pc, #36]	; (1000acd8 <wakeup_active_event_callback+0x54>)
1000acb2:	6822      	ldr	r2, [r4, #0]
1000acb4:	4013      	ands	r3, r2
1000acb6:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000acb8:	78a3      	ldrb	r3, [r4, #2]
1000acba:	2b01      	cmp	r3, #1
1000acbc:	d108      	bne.n	1000acd0 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000acbe:	4b05      	ldr	r3, [pc, #20]	; (1000acd4 <wakeup_active_event_callback+0x50>)
1000acc0:	689b      	ldr	r3, [r3, #8]
1000acc2:	2b00      	cmp	r3, #0
1000acc4:	d000      	beq.n	1000acc8 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000acc6:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000acc8:	4b04      	ldr	r3, [pc, #16]	; (1000acdc <wakeup_active_event_callback+0x58>)
1000acca:	6822      	ldr	r2, [r4, #0]
1000accc:	4013      	ands	r3, r2
1000acce:	6023      	str	r3, [r4, #0]
	}
}
1000acd0:	bd10      	pop	{r4, pc}
1000acd2:	46c0      	nop			; (mov r8, r8)
1000acd4:	1001479c 	.word	0x1001479c
1000acd8:	ffff00ff 	.word	0xffff00ff
1000acdc:	ff00ffff 	.word	0xff00ffff

1000ace0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000ace0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ace2:	4647      	mov	r7, r8
1000ace4:	b480      	push	{r7}
1000ace6:	000c      	movs	r4, r1
1000ace8:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000acea:	2800      	cmp	r0, #0
1000acec:	d10d      	bne.n	1000ad0a <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000acee:	2a00      	cmp	r2, #0
1000acf0:	dd0e      	ble.n	1000ad10 <_read+0x30>
1000acf2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000acf4:	4e08      	ldr	r6, [pc, #32]	; (1000ad18 <_read+0x38>)
1000acf6:	4d09      	ldr	r5, [pc, #36]	; (1000ad1c <_read+0x3c>)
1000acf8:	6830      	ldr	r0, [r6, #0]
1000acfa:	0021      	movs	r1, r4
1000acfc:	682b      	ldr	r3, [r5, #0]
1000acfe:	4798      	blx	r3
		ptr++;
1000ad00:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000ad02:	42a7      	cmp	r7, r4
1000ad04:	d1f8      	bne.n	1000acf8 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000ad06:	4640      	mov	r0, r8
1000ad08:	e003      	b.n	1000ad12 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000ad0a:	2001      	movs	r0, #1
1000ad0c:	4240      	negs	r0, r0
1000ad0e:	e000      	b.n	1000ad12 <_read+0x32>
	}

	for (; len > 0; --len) {
1000ad10:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000ad12:	bc04      	pop	{r2}
1000ad14:	4690      	mov	r8, r2
1000ad16:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ad18:	100147b0 	.word	0x100147b0
1000ad1c:	100147a8 	.word	0x100147a8

1000ad20 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000ad20:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ad22:	4647      	mov	r7, r8
1000ad24:	b480      	push	{r7}
1000ad26:	000e      	movs	r6, r1
1000ad28:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000ad2a:	3801      	subs	r0, #1
1000ad2c:	2802      	cmp	r0, #2
1000ad2e:	d811      	bhi.n	1000ad54 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000ad30:	2a00      	cmp	r2, #0
1000ad32:	d012      	beq.n	1000ad5a <_write+0x3a>
1000ad34:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000ad36:	4b0c      	ldr	r3, [pc, #48]	; (1000ad68 <_write+0x48>)
1000ad38:	4698      	mov	r8, r3
1000ad3a:	4f0c      	ldr	r7, [pc, #48]	; (1000ad6c <_write+0x4c>)
1000ad3c:	4643      	mov	r3, r8
1000ad3e:	6818      	ldr	r0, [r3, #0]
1000ad40:	5d31      	ldrb	r1, [r6, r4]
1000ad42:	683b      	ldr	r3, [r7, #0]
1000ad44:	4798      	blx	r3
1000ad46:	2800      	cmp	r0, #0
1000ad48:	db09      	blt.n	1000ad5e <_write+0x3e>
			return -1;
		}
		++nChars;
1000ad4a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000ad4c:	42a5      	cmp	r5, r4
1000ad4e:	d1f5      	bne.n	1000ad3c <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000ad50:	0020      	movs	r0, r4
1000ad52:	e006      	b.n	1000ad62 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000ad54:	2001      	movs	r0, #1
1000ad56:	4240      	negs	r0, r0
1000ad58:	e003      	b.n	1000ad62 <_write+0x42>
	}

	for (; len != 0; --len) {
1000ad5a:	2000      	movs	r0, #0
1000ad5c:	e001      	b.n	1000ad62 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000ad5e:	2001      	movs	r0, #1
1000ad60:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000ad62:	bc04      	pop	{r2}
1000ad64:	4690      	mov	r8, r2
1000ad66:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ad68:	100147b0 	.word	0x100147b0
1000ad6c:	100147ac 	.word	0x100147ac

1000ad70 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000ad70:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000ad72:	4b20      	ldr	r3, [pc, #128]	; (1000adf4 <uart_rx0_isr_handler+0x84>)
1000ad74:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000ad76:	6823      	ldr	r3, [r4, #0]
1000ad78:	7d1d      	ldrb	r5, [r3, #20]
1000ad7a:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000ad7c:	066a      	lsls	r2, r5, #25
1000ad7e:	d513      	bpl.n	1000ada8 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000ad80:	211e      	movs	r1, #30
1000ad82:	2222      	movs	r2, #34	; 0x22
1000ad84:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000ad86:	7e1a      	ldrb	r2, [r3, #24]
1000ad88:	3123      	adds	r1, #35	; 0x23
1000ad8a:	438a      	bics	r2, r1
1000ad8c:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000ad8e:	2321      	movs	r3, #33	; 0x21
1000ad90:	5ce3      	ldrb	r3, [r4, r3]
1000ad92:	071b      	lsls	r3, r3, #28
1000ad94:	d506      	bpl.n	1000ada4 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000ad96:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000ad98:	5ce3      	ldrb	r3, [r4, r3]
1000ad9a:	071b      	lsls	r3, r3, #28
1000ad9c:	d502      	bpl.n	1000ada4 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000ad9e:	0020      	movs	r0, r4
1000ada0:	6923      	ldr	r3, [r4, #16]
1000ada2:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000ada4:	6823      	ldr	r3, [r4, #0]
1000ada6:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000ada8:	07eb      	lsls	r3, r5, #31
1000adaa:	d522      	bpl.n	1000adf2 <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000adac:	6823      	ldr	r3, [r4, #0]
1000adae:	7c1b      	ldrb	r3, [r3, #16]
1000adb0:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000adb2:	6962      	ldr	r2, [r4, #20]
1000adb4:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000adb6:	6963      	ldr	r3, [r4, #20]
1000adb8:	3301      	adds	r3, #1
1000adba:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000adbc:	8ba3      	ldrh	r3, [r4, #28]
1000adbe:	3b01      	subs	r3, #1
1000adc0:	b29b      	uxth	r3, r3
1000adc2:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000adc4:	8ba3      	ldrh	r3, [r4, #28]
1000adc6:	b29b      	uxth	r3, r3
1000adc8:	2b00      	cmp	r3, #0
1000adca:	d112      	bne.n	1000adf2 <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000adcc:	3321      	adds	r3, #33	; 0x21
1000adce:	5ce3      	ldrb	r3, [r4, r3]
1000add0:	075b      	lsls	r3, r3, #29
1000add2:	d50e      	bpl.n	1000adf2 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000add4:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000add6:	5ce3      	ldrb	r3, [r4, r3]
1000add8:	075b      	lsls	r3, r3, #29
1000adda:	d50a      	bpl.n	1000adf2 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000addc:	2200      	movs	r2, #0
1000adde:	2322      	movs	r3, #34	; 0x22
1000ade0:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000ade2:	6822      	ldr	r2, [r4, #0]
1000ade4:	7e13      	ldrb	r3, [r2, #24]
1000ade6:	2101      	movs	r1, #1
1000ade8:	438b      	bics	r3, r1
1000adea:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000adec:	68e3      	ldr	r3, [r4, #12]
1000adee:	0020      	movs	r0, r4
1000adf0:	4798      	blx	r3
			}
		}
	}
}
1000adf2:	bd70      	pop	{r4, r5, r6, pc}
1000adf4:	100147b4 	.word	0x100147b4

1000adf8 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000adf8:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000adfa:	4b21      	ldr	r3, [pc, #132]	; (1000ae80 <uart_tx0_isr_handler+0x88>)
1000adfc:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000adfe:	6823      	ldr	r3, [r4, #0]
1000ae00:	791d      	ldrb	r5, [r3, #4]
1000ae02:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000ae04:	07ea      	lsls	r2, r5, #31
1000ae06:	d517      	bpl.n	1000ae38 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000ae08:	69a2      	ldr	r2, [r4, #24]
1000ae0a:	7811      	ldrb	r1, [r2, #0]
1000ae0c:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000ae0e:	3201      	adds	r2, #1
1000ae10:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000ae12:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000ae14:	8be3      	ldrh	r3, [r4, #30]
1000ae16:	3b01      	subs	r3, #1
1000ae18:	b29b      	uxth	r3, r3
1000ae1a:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000ae1c:	8be3      	ldrh	r3, [r4, #30]
1000ae1e:	b29b      	uxth	r3, r3
1000ae20:	2b00      	cmp	r3, #0
1000ae22:	d109      	bne.n	1000ae38 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000ae24:	6822      	ldr	r2, [r4, #0]
1000ae26:	7a13      	ldrb	r3, [r2, #8]
1000ae28:	2101      	movs	r1, #1
1000ae2a:	438b      	bics	r3, r1
1000ae2c:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000ae2e:	6822      	ldr	r2, [r4, #0]
1000ae30:	7a11      	ldrb	r1, [r2, #8]
1000ae32:	2310      	movs	r3, #16
1000ae34:	430b      	orrs	r3, r1
1000ae36:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000ae38:	06eb      	lsls	r3, r5, #27
1000ae3a:	d512      	bpl.n	1000ae62 <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000ae3c:	2321      	movs	r3, #33	; 0x21
1000ae3e:	5ce3      	ldrb	r3, [r4, r3]
1000ae40:	07db      	lsls	r3, r3, #31
1000ae42:	d50e      	bpl.n	1000ae62 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000ae44:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000ae46:	5ce3      	ldrb	r3, [r4, r3]
1000ae48:	07db      	lsls	r3, r3, #31
1000ae4a:	d50a      	bpl.n	1000ae62 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000ae4c:	2200      	movs	r2, #0
1000ae4e:	2322      	movs	r3, #34	; 0x22
1000ae50:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000ae52:	6822      	ldr	r2, [r4, #0]
1000ae54:	7a13      	ldrb	r3, [r2, #8]
1000ae56:	2110      	movs	r1, #16
1000ae58:	438b      	bics	r3, r1
1000ae5a:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000ae5c:	0020      	movs	r0, r4
1000ae5e:	6863      	ldr	r3, [r4, #4]
1000ae60:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000ae62:	06ab      	lsls	r3, r5, #26
1000ae64:	d50a      	bpl.n	1000ae7c <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000ae66:	2321      	movs	r3, #33	; 0x21
1000ae68:	5ce3      	ldrb	r3, [r4, r3]
1000ae6a:	079b      	lsls	r3, r3, #30
1000ae6c:	d506      	bpl.n	1000ae7c <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000ae6e:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000ae70:	5ce3      	ldrb	r3, [r4, r3]
1000ae72:	079b      	lsls	r3, r3, #30
1000ae74:	d502      	bpl.n	1000ae7c <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000ae76:	68a3      	ldr	r3, [r4, #8]
1000ae78:	0020      	movs	r0, r4
1000ae7a:	4798      	blx	r3
		}

	}
}
1000ae7c:	bd70      	pop	{r4, r5, r6, pc}
1000ae7e:	46c0      	nop			; (mov r8, r8)
1000ae80:	100147b4 	.word	0x100147b4

1000ae84 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000ae84:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000ae86:	4b20      	ldr	r3, [pc, #128]	; (1000af08 <uart_rx1_isr_handler+0x84>)
1000ae88:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000ae8a:	6823      	ldr	r3, [r4, #0]
1000ae8c:	7d1d      	ldrb	r5, [r3, #20]
1000ae8e:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000ae90:	066a      	lsls	r2, r5, #25
1000ae92:	d513      	bpl.n	1000aebc <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000ae94:	211e      	movs	r1, #30
1000ae96:	2222      	movs	r2, #34	; 0x22
1000ae98:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000ae9a:	7e1a      	ldrb	r2, [r3, #24]
1000ae9c:	3123      	adds	r1, #35	; 0x23
1000ae9e:	438a      	bics	r2, r1
1000aea0:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000aea2:	2321      	movs	r3, #33	; 0x21
1000aea4:	5ce3      	ldrb	r3, [r4, r3]
1000aea6:	071b      	lsls	r3, r3, #28
1000aea8:	d506      	bpl.n	1000aeb8 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000aeaa:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000aeac:	5ce3      	ldrb	r3, [r4, r3]
1000aeae:	071b      	lsls	r3, r3, #28
1000aeb0:	d502      	bpl.n	1000aeb8 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000aeb2:	0020      	movs	r0, r4
1000aeb4:	6923      	ldr	r3, [r4, #16]
1000aeb6:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000aeb8:	6823      	ldr	r3, [r4, #0]
1000aeba:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000aebc:	07eb      	lsls	r3, r5, #31
1000aebe:	d522      	bpl.n	1000af06 <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000aec0:	6823      	ldr	r3, [r4, #0]
1000aec2:	7c1b      	ldrb	r3, [r3, #16]
1000aec4:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000aec6:	6962      	ldr	r2, [r4, #20]
1000aec8:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000aeca:	6963      	ldr	r3, [r4, #20]
1000aecc:	3301      	adds	r3, #1
1000aece:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000aed0:	8ba3      	ldrh	r3, [r4, #28]
1000aed2:	3b01      	subs	r3, #1
1000aed4:	b29b      	uxth	r3, r3
1000aed6:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000aed8:	8ba3      	ldrh	r3, [r4, #28]
1000aeda:	b29b      	uxth	r3, r3
1000aedc:	2b00      	cmp	r3, #0
1000aede:	d112      	bne.n	1000af06 <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000aee0:	3321      	adds	r3, #33	; 0x21
1000aee2:	5ce3      	ldrb	r3, [r4, r3]
1000aee4:	075b      	lsls	r3, r3, #29
1000aee6:	d50e      	bpl.n	1000af06 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000aee8:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000aeea:	5ce3      	ldrb	r3, [r4, r3]
1000aeec:	075b      	lsls	r3, r3, #29
1000aeee:	d50a      	bpl.n	1000af06 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000aef0:	2200      	movs	r2, #0
1000aef2:	2322      	movs	r3, #34	; 0x22
1000aef4:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000aef6:	6822      	ldr	r2, [r4, #0]
1000aef8:	7e13      	ldrb	r3, [r2, #24]
1000aefa:	2101      	movs	r1, #1
1000aefc:	438b      	bics	r3, r1
1000aefe:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000af00:	68e3      	ldr	r3, [r4, #12]
1000af02:	0020      	movs	r0, r4
1000af04:	4798      	blx	r3
			}
		}
	}
}
1000af06:	bd70      	pop	{r4, r5, r6, pc}
1000af08:	100147b4 	.word	0x100147b4

1000af0c <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000af0c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000af0e:	4b21      	ldr	r3, [pc, #132]	; (1000af94 <uart_tx1_isr_handler+0x88>)
1000af10:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000af12:	6823      	ldr	r3, [r4, #0]
1000af14:	791d      	ldrb	r5, [r3, #4]
1000af16:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000af18:	07ea      	lsls	r2, r5, #31
1000af1a:	d517      	bpl.n	1000af4c <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000af1c:	69a2      	ldr	r2, [r4, #24]
1000af1e:	7811      	ldrb	r1, [r2, #0]
1000af20:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000af22:	3201      	adds	r2, #1
1000af24:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000af26:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000af28:	8be3      	ldrh	r3, [r4, #30]
1000af2a:	3b01      	subs	r3, #1
1000af2c:	b29b      	uxth	r3, r3
1000af2e:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000af30:	8be3      	ldrh	r3, [r4, #30]
1000af32:	b29b      	uxth	r3, r3
1000af34:	2b00      	cmp	r3, #0
1000af36:	d109      	bne.n	1000af4c <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000af38:	6822      	ldr	r2, [r4, #0]
1000af3a:	7a13      	ldrb	r3, [r2, #8]
1000af3c:	2101      	movs	r1, #1
1000af3e:	438b      	bics	r3, r1
1000af40:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000af42:	6822      	ldr	r2, [r4, #0]
1000af44:	7a11      	ldrb	r1, [r2, #8]
1000af46:	2310      	movs	r3, #16
1000af48:	430b      	orrs	r3, r1
1000af4a:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000af4c:	06eb      	lsls	r3, r5, #27
1000af4e:	d512      	bpl.n	1000af76 <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000af50:	2321      	movs	r3, #33	; 0x21
1000af52:	5ce3      	ldrb	r3, [r4, r3]
1000af54:	07db      	lsls	r3, r3, #31
1000af56:	d50e      	bpl.n	1000af76 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000af58:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000af5a:	5ce3      	ldrb	r3, [r4, r3]
1000af5c:	07db      	lsls	r3, r3, #31
1000af5e:	d50a      	bpl.n	1000af76 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000af60:	2200      	movs	r2, #0
1000af62:	2322      	movs	r3, #34	; 0x22
1000af64:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000af66:	6822      	ldr	r2, [r4, #0]
1000af68:	7a13      	ldrb	r3, [r2, #8]
1000af6a:	2110      	movs	r1, #16
1000af6c:	438b      	bics	r3, r1
1000af6e:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000af70:	0020      	movs	r0, r4
1000af72:	6863      	ldr	r3, [r4, #4]
1000af74:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000af76:	06ab      	lsls	r3, r5, #26
1000af78:	d50a      	bpl.n	1000af90 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000af7a:	2321      	movs	r3, #33	; 0x21
1000af7c:	5ce3      	ldrb	r3, [r4, r3]
1000af7e:	079b      	lsls	r3, r3, #30
1000af80:	d506      	bpl.n	1000af90 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000af82:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000af84:	5ce3      	ldrb	r3, [r4, r3]
1000af86:	079b      	lsls	r3, r3, #30
1000af88:	d502      	bpl.n	1000af90 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000af8a:	68a3      	ldr	r3, [r4, #8]
1000af8c:	0020      	movs	r0, r4
1000af8e:	4798      	blx	r3
		}

	}
}
1000af90:	bd70      	pop	{r4, r5, r6, pc}
1000af92:	46c0      	nop			; (mov r8, r8)
1000af94:	100147b4 	.word	0x100147b4

1000af98 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000af98:	23e1      	movs	r3, #225	; 0xe1
1000af9a:	025b      	lsls	r3, r3, #9
1000af9c:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000af9e:	2300      	movs	r3, #0
1000afa0:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000afa2:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000afa4:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000afa6:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000afa8:	3302      	adds	r3, #2
1000afaa:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000afac:	2203      	movs	r2, #3
1000afae:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000afb0:	3201      	adds	r2, #1
1000afb2:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000afb4:	3201      	adds	r2, #1
1000afb6:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000afb8:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000afba:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000afbc:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000afbe:	6243      	str	r3, [r0, #36]	; 0x24
}
1000afc0:	4770      	bx	lr
1000afc2:	46c0      	nop			; (mov r8, r8)

1000afc4 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000afc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000afc6:	464f      	mov	r7, r9
1000afc8:	4646      	mov	r6, r8
1000afca:	b4c0      	push	{r6, r7}
1000afcc:	0005      	movs	r5, r0
1000afce:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000afd0:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000afd2:	2300      	movs	r3, #0
1000afd4:	6043      	str	r3, [r0, #4]
1000afd6:	6083      	str	r3, [r0, #8]
1000afd8:	60c3      	str	r3, [r0, #12]
1000afda:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000afdc:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000afde:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000afe0:	2200      	movs	r2, #0
1000afe2:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000afe4:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000afe6:	3320      	adds	r3, #32
1000afe8:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000afea:	3301      	adds	r3, #1
1000afec:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000afee:	3301      	adds	r3, #1
1000aff0:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000aff2:	4b55      	ldr	r3, [pc, #340]	; (1000b148 <uart_init+0x184>)
1000aff4:	4299      	cmp	r1, r3
1000aff6:	d118      	bne.n	1000b02a <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000aff8:	2009      	movs	r0, #9
1000affa:	4c54      	ldr	r4, [pc, #336]	; (1000b14c <uart_init+0x188>)
1000affc:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000affe:	200a      	movs	r0, #10
1000b000:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000b002:	2009      	movs	r0, #9
1000b004:	4c52      	ldr	r4, [pc, #328]	; (1000b150 <uart_init+0x18c>)
1000b006:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000b008:	200a      	movs	r0, #10
1000b00a:	47a0      	blx	r4
		_uart_instances[0] = module;
1000b00c:	4b51      	ldr	r3, [pc, #324]	; (1000b154 <uart_init+0x190>)
1000b00e:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000b010:	4951      	ldr	r1, [pc, #324]	; (1000b158 <uart_init+0x194>)
1000b012:	2010      	movs	r0, #16
1000b014:	4c51      	ldr	r4, [pc, #324]	; (1000b15c <uart_init+0x198>)
1000b016:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000b018:	4951      	ldr	r1, [pc, #324]	; (1000b160 <uart_init+0x19c>)
1000b01a:	2011      	movs	r0, #17
1000b01c:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b01e:	4b51      	ldr	r3, [pc, #324]	; (1000b164 <uart_init+0x1a0>)
1000b020:	2201      	movs	r2, #1
1000b022:	601a      	str	r2, [r3, #0]
1000b024:	3201      	adds	r2, #1
1000b026:	601a      	str	r2, [r3, #0]
1000b028:	e01a      	b.n	1000b060 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000b02a:	4b4f      	ldr	r3, [pc, #316]	; (1000b168 <uart_init+0x1a4>)
1000b02c:	4299      	cmp	r1, r3
1000b02e:	d117      	bne.n	1000b060 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000b030:	200b      	movs	r0, #11
1000b032:	4c46      	ldr	r4, [pc, #280]	; (1000b14c <uart_init+0x188>)
1000b034:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000b036:	200c      	movs	r0, #12
1000b038:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000b03a:	200b      	movs	r0, #11
1000b03c:	4c44      	ldr	r4, [pc, #272]	; (1000b150 <uart_init+0x18c>)
1000b03e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000b040:	200c      	movs	r0, #12
1000b042:	47a0      	blx	r4
		_uart_instances[1] = module;
1000b044:	4b43      	ldr	r3, [pc, #268]	; (1000b154 <uart_init+0x190>)
1000b046:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000b048:	4948      	ldr	r1, [pc, #288]	; (1000b16c <uart_init+0x1a8>)
1000b04a:	2012      	movs	r0, #18
1000b04c:	4c43      	ldr	r4, [pc, #268]	; (1000b15c <uart_init+0x198>)
1000b04e:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000b050:	4947      	ldr	r1, [pc, #284]	; (1000b170 <uart_init+0x1ac>)
1000b052:	2013      	movs	r0, #19
1000b054:	47a0      	blx	r4
1000b056:	4b43      	ldr	r3, [pc, #268]	; (1000b164 <uart_init+0x1a0>)
1000b058:	2204      	movs	r2, #4
1000b05a:	601a      	str	r2, [r3, #0]
1000b05c:	3204      	adds	r2, #4
1000b05e:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000b060:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000b062:	2204      	movs	r2, #4
1000b064:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000b066:	2b00      	cmp	r3, #0
1000b068:	d152      	bne.n	1000b110 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000b06a:	3302      	adds	r3, #2
1000b06c:	4698      	mov	r8, r3
1000b06e:	e04f      	b.n	1000b110 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000b070:	8a31      	ldrh	r1, [r6, #16]
1000b072:	ce01      	ldmia	r6!, {r0}
1000b074:	b2c0      	uxtb	r0, r0
1000b076:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000b078:	3401      	adds	r4, #1
1000b07a:	b2e4      	uxtb	r4, r4
1000b07c:	4544      	cmp	r4, r8
1000b07e:	d3f7      	bcc.n	1000b070 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b080:	682b      	ldr	r3, [r5, #0]
1000b082:	7d1a      	ldrb	r2, [r3, #20]
1000b084:	07d2      	lsls	r2, r2, #31
1000b086:	d504      	bpl.n	1000b092 <uart_init+0xce>
1000b088:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000b08a:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b08c:	7d1a      	ldrb	r2, [r3, #20]
1000b08e:	420a      	tst	r2, r1
1000b090:	d1fb      	bne.n	1000b08a <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000b092:	2100      	movs	r1, #0
1000b094:	2220      	movs	r2, #32
1000b096:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000b098:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000b09a:	1e59      	subs	r1, r3, #1
1000b09c:	418b      	sbcs	r3, r1
1000b09e:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000b0a0:	793b      	ldrb	r3, [r7, #4]
1000b0a2:	797a      	ldrb	r2, [r7, #5]
1000b0a4:	4313      	orrs	r3, r2
1000b0a6:	430b      	orrs	r3, r1
	switch(config->parity) {
1000b0a8:	79ba      	ldrb	r2, [r7, #6]
1000b0aa:	2a02      	cmp	r2, #2
1000b0ac:	d00d      	beq.n	1000b0ca <uart_init+0x106>
1000b0ae:	b2d1      	uxtb	r1, r2
1000b0b0:	2902      	cmp	r1, #2
1000b0b2:	d802      	bhi.n	1000b0ba <uart_init+0xf6>
1000b0b4:	2a01      	cmp	r2, #1
1000b0b6:	d005      	beq.n	1000b0c4 <uart_init+0x100>
1000b0b8:	e00f      	b.n	1000b0da <uart_init+0x116>
1000b0ba:	2a03      	cmp	r2, #3
1000b0bc:	d008      	beq.n	1000b0d0 <uart_init+0x10c>
1000b0be:	2a04      	cmp	r2, #4
1000b0c0:	d009      	beq.n	1000b0d6 <uart_init+0x112>
1000b0c2:	e00a      	b.n	1000b0da <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000b0c4:	2202      	movs	r2, #2
1000b0c6:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000b0c8:	e007      	b.n	1000b0da <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000b0ca:	2206      	movs	r2, #6
1000b0cc:	4313      	orrs	r3, r2
			break;
1000b0ce:	e004      	b.n	1000b0da <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000b0d0:	220a      	movs	r2, #10
1000b0d2:	4313      	orrs	r3, r2
			break;
1000b0d4:	e001      	b.n	1000b0da <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000b0d6:	220e      	movs	r2, #14
1000b0d8:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000b0da:	2220      	movs	r2, #32
1000b0dc:	6829      	ldr	r1, [r5, #0]
1000b0de:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000b0e0:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000b0e2:	4b24      	ldr	r3, [pc, #144]	; (1000b174 <uart_init+0x1b0>)
1000b0e4:	4798      	blx	r3
1000b0e6:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000b0e8:	0031      	movs	r1, r6
1000b0ea:	4b23      	ldr	r3, [pc, #140]	; (1000b178 <uart_init+0x1b4>)
1000b0ec:	4798      	blx	r3
1000b0ee:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000b0f0:	0400      	lsls	r0, r0, #16
1000b0f2:	0c00      	lsrs	r0, r0, #16
1000b0f4:	4370      	muls	r0, r6
1000b0f6:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000b0f8:	0931      	lsrs	r1, r6, #4
1000b0fa:	4288      	cmp	r0, r1
1000b0fc:	d906      	bls.n	1000b10c <uart_init+0x148>
1000b0fe:	2300      	movs	r3, #0
		i++;
1000b100:	3301      	adds	r3, #1
1000b102:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000b104:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000b106:	4288      	cmp	r0, r1
1000b108:	d8fa      	bhi.n	1000b100 <uart_init+0x13c>
1000b10a:	e007      	b.n	1000b11c <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000b10c:	2300      	movs	r3, #0
1000b10e:	e005      	b.n	1000b11c <uart_init+0x158>
1000b110:	003e      	movs	r6, r7
1000b112:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000b114:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000b116:	4b19      	ldr	r3, [pc, #100]	; (1000b17c <uart_init+0x1b8>)
1000b118:	4699      	mov	r9, r3
1000b11a:	e7a9      	b.n	1000b070 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000b11c:	2100      	movs	r1, #0
1000b11e:	2028      	movs	r0, #40	; 0x28
1000b120:	682c      	ldr	r4, [r5, #0]
1000b122:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000b124:	3301      	adds	r3, #1
1000b126:	071b      	lsls	r3, r3, #28
1000b128:	0f5b      	lsrs	r3, r3, #29
1000b12a:	00d2      	lsls	r2, r2, #3
1000b12c:	4313      	orrs	r3, r2
1000b12e:	b29b      	uxth	r3, r3
1000b130:	682a      	ldr	r2, [r5, #0]
1000b132:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000b134:	682b      	ldr	r3, [r5, #0]
1000b136:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000b138:	682b      	ldr	r3, [r5, #0]
1000b13a:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000b13c:	2000      	movs	r0, #0
1000b13e:	bc0c      	pop	{r2, r3}
1000b140:	4690      	mov	r8, r2
1000b142:	4699      	mov	r9, r3
1000b144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b146:	46c0      	nop			; (mov r8, r8)
1000b148:	40004000 	.word	0x40004000
1000b14c:	1000bded 	.word	0x1000bded
1000b150:	1000ba91 	.word	0x1000ba91
1000b154:	100147b4 	.word	0x100147b4
1000b158:	1000ad71 	.word	0x1000ad71
1000b15c:	1000c255 	.word	0x1000c255
1000b160:	1000adf9 	.word	0x1000adf9
1000b164:	e000e100 	.word	0xe000e100
1000b168:	40005000 	.word	0x40005000
1000b16c:	1000ae85 	.word	0x1000ae85
1000b170:	1000af0d 	.word	0x1000af0d
1000b174:	1000ba85 	.word	0x1000ba85
1000b178:	1000ec75 	.word	0x1000ec75
1000b17c:	1000b539 	.word	0x1000b539

1000b180 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000b180:	6802      	ldr	r2, [r0, #0]
1000b182:	2001      	movs	r0, #1
1000b184:	7913      	ldrb	r3, [r2, #4]
1000b186:	4203      	tst	r3, r0
1000b188:	d0fc      	beq.n	1000b184 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000b18a:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000b18c:	2000      	movs	r0, #0
1000b18e:	4770      	bx	lr

1000b190 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000b190:	6802      	ldr	r2, [r0, #0]
1000b192:	2001      	movs	r0, #1
1000b194:	7d13      	ldrb	r3, [r2, #20]
1000b196:	4203      	tst	r3, r0
1000b198:	d0fc      	beq.n	1000b194 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000b19a:	7c13      	ldrb	r3, [r2, #16]
1000b19c:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000b19e:	2000      	movs	r0, #0
1000b1a0:	4770      	bx	lr
1000b1a2:	46c0      	nop			; (mov r8, r8)

1000b1a4 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000b1a4:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000b1a6:	2a00      	cmp	r2, #0
1000b1a8:	d00d      	beq.n	1000b1c6 <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000b1aa:	330b      	adds	r3, #11
1000b1ac:	5cc3      	ldrb	r3, [r0, r3]
1000b1ae:	b2db      	uxtb	r3, r3
1000b1b0:	2b05      	cmp	r3, #5
1000b1b2:	d008      	beq.n	1000b1c6 <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000b1b4:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000b1b6:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000b1b8:	2205      	movs	r2, #5
1000b1ba:	2322      	movs	r3, #34	; 0x22
1000b1bc:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000b1be:	6803      	ldr	r3, [r0, #0]
1000b1c0:	3a04      	subs	r2, #4
1000b1c2:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000b1c4:	2300      	movs	r3, #0
}
1000b1c6:	0018      	movs	r0, r3
1000b1c8:	4770      	bx	lr
1000b1ca:	46c0      	nop			; (mov r8, r8)

1000b1cc <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000b1cc:	0093      	lsls	r3, r2, #2
1000b1ce:	18c3      	adds	r3, r0, r3
1000b1d0:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000b1d2:	2120      	movs	r1, #32
1000b1d4:	2301      	movs	r3, #1
1000b1d6:	4093      	lsls	r3, r2
1000b1d8:	5c42      	ldrb	r2, [r0, r1]
1000b1da:	4313      	orrs	r3, r2
1000b1dc:	5443      	strb	r3, [r0, r1]
}
1000b1de:	4770      	bx	lr

1000b1e0 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000b1e0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000b1e2:	2221      	movs	r2, #33	; 0x21
1000b1e4:	2301      	movs	r3, #1
1000b1e6:	408b      	lsls	r3, r1
1000b1e8:	5c84      	ldrb	r4, [r0, r2]
1000b1ea:	4323      	orrs	r3, r4
1000b1ec:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000b1ee:	2901      	cmp	r1, #1
1000b1f0:	d104      	bne.n	1000b1fc <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000b1f2:	6802      	ldr	r2, [r0, #0]
1000b1f4:	7a11      	ldrb	r1, [r2, #8]
1000b1f6:	2320      	movs	r3, #32
1000b1f8:	430b      	orrs	r3, r1
1000b1fa:	7213      	strb	r3, [r2, #8]
	}
}
1000b1fc:	bd10      	pop	{r4, pc}
1000b1fe:	46c0      	nop			; (mov r8, r8)

1000b200 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000b200:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000b202:	2201      	movs	r2, #1
1000b204:	408a      	lsls	r2, r1
1000b206:	2421      	movs	r4, #33	; 0x21
1000b208:	5d03      	ldrb	r3, [r0, r4]
1000b20a:	4393      	bics	r3, r2
1000b20c:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000b20e:	2901      	cmp	r1, #1
1000b210:	d104      	bne.n	1000b21c <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000b212:	6802      	ldr	r2, [r0, #0]
1000b214:	7a13      	ldrb	r3, [r2, #8]
1000b216:	311f      	adds	r1, #31
1000b218:	438b      	bics	r3, r1
1000b21a:	7213      	strb	r3, [r2, #8]
	}

}
1000b21c:	bd10      	pop	{r4, pc}
1000b21e:	46c0      	nop			; (mov r8, r8)

1000b220 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000b220:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000b222:	4b16      	ldr	r3, [pc, #88]	; (1000b27c <gpio_port0_isr_handler+0x5c>)
1000b224:	681d      	ldr	r5, [r3, #0]
1000b226:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000b228:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000b22a:	07cb      	lsls	r3, r1, #31
1000b22c:	d407      	bmi.n	1000b23e <gpio_port0_isr_handler+0x1e>
1000b22e:	2301      	movs	r3, #1
1000b230:	2401      	movs	r4, #1
1000b232:	0018      	movs	r0, r3
1000b234:	0022      	movs	r2, r4
1000b236:	409a      	lsls	r2, r3
1000b238:	4211      	tst	r1, r2
1000b23a:	d014      	beq.n	1000b266 <gpio_port0_isr_handler+0x46>
1000b23c:	e001      	b.n	1000b242 <gpio_port0_isr_handler+0x22>
1000b23e:	2201      	movs	r2, #1
1000b240:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b242:	b292      	uxth	r2, r2
1000b244:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000b246:	2346      	movs	r3, #70	; 0x46
1000b248:	4a0c      	ldr	r2, [pc, #48]	; (1000b27c <gpio_port0_isr_handler+0x5c>)
1000b24a:	5ad3      	ldrh	r3, [r2, r3]
1000b24c:	4103      	asrs	r3, r0
1000b24e:	07db      	lsls	r3, r3, #31
1000b250:	d50c      	bpl.n	1000b26c <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000b252:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000b254:	5ad3      	ldrh	r3, [r2, r3]
1000b256:	4103      	asrs	r3, r0
1000b258:	07db      	lsls	r3, r3, #31
1000b25a:	d507      	bpl.n	1000b26c <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000b25c:	0080      	lsls	r0, r0, #2
1000b25e:	1810      	adds	r0, r2, r0
1000b260:	6843      	ldr	r3, [r0, #4]
1000b262:	4798      	blx	r3
1000b264:	e002      	b.n	1000b26c <gpio_port0_isr_handler+0x4c>
1000b266:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000b268:	2b10      	cmp	r3, #16
1000b26a:	d1e2      	bne.n	1000b232 <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000b26c:	2180      	movs	r1, #128	; 0x80
1000b26e:	0409      	lsls	r1, r1, #16
1000b270:	23c0      	movs	r3, #192	; 0xc0
1000b272:	005b      	lsls	r3, r3, #1
1000b274:	4a02      	ldr	r2, [pc, #8]	; (1000b280 <gpio_port0_isr_handler+0x60>)
1000b276:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000b278:	bd70      	pop	{r4, r5, r6, pc}
1000b27a:	46c0      	nop			; (mov r8, r8)
1000b27c:	100147bc 	.word	0x100147bc
1000b280:	e000e100 	.word	0xe000e100

1000b284 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000b284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000b286:	4b18      	ldr	r3, [pc, #96]	; (1000b2e8 <gpio_port1_isr_handler+0x64>)
1000b288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000b28a:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000b28c:	b2b6      	uxth	r6, r6
1000b28e:	0037      	movs	r7, r6
1000b290:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000b292:	0b76      	lsrs	r6, r6, #13
1000b294:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b296:	4d14      	ldr	r5, [pc, #80]	; (1000b2e8 <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000b298:	2e00      	cmp	r6, #0
1000b29a:	d001      	beq.n	1000b2a0 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000b29c:	4b13      	ldr	r3, [pc, #76]	; (1000b2ec <gpio_port1_isr_handler+0x68>)
1000b29e:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000b2a0:	0022      	movs	r2, r4
1000b2a2:	2301      	movs	r3, #1
1000b2a4:	40a3      	lsls	r3, r4
1000b2a6:	421f      	tst	r7, r3
1000b2a8:	d013      	beq.n	1000b2d2 <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b2aa:	b29b      	uxth	r3, r3
1000b2ac:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000b2ae:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000b2b0:	238e      	movs	r3, #142	; 0x8e
1000b2b2:	5aeb      	ldrh	r3, [r5, r3]
1000b2b4:	4123      	asrs	r3, r4
1000b2b6:	07db      	lsls	r3, r3, #31
1000b2b8:	d50b      	bpl.n	1000b2d2 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000b2ba:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000b2bc:	490a      	ldr	r1, [pc, #40]	; (1000b2e8 <gpio_port1_isr_handler+0x64>)
1000b2be:	5acb      	ldrh	r3, [r1, r3]
1000b2c0:	4123      	asrs	r3, r4
1000b2c2:	07db      	lsls	r3, r3, #31
1000b2c4:	d505      	bpl.n	1000b2d2 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000b2c6:	3212      	adds	r2, #18
1000b2c8:	0092      	lsls	r2, r2, #2
1000b2ca:	188a      	adds	r2, r1, r2
1000b2cc:	6853      	ldr	r3, [r2, #4]
1000b2ce:	4798      	blx	r3
				break;
1000b2d0:	e002      	b.n	1000b2d8 <gpio_port1_isr_handler+0x54>
1000b2d2:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000b2d4:	2c10      	cmp	r4, #16
1000b2d6:	d1df      	bne.n	1000b298 <gpio_port1_isr_handler+0x14>
1000b2d8:	2180      	movs	r1, #128	; 0x80
1000b2da:	0449      	lsls	r1, r1, #17
1000b2dc:	23c0      	movs	r3, #192	; 0xc0
1000b2de:	005b      	lsls	r3, r3, #1
1000b2e0:	4a03      	ldr	r2, [pc, #12]	; (1000b2f0 <gpio_port1_isr_handler+0x6c>)
1000b2e2:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000b2e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b2e6:	46c0      	nop			; (mov r8, r8)
1000b2e8:	100147bc 	.word	0x100147bc
1000b2ec:	0001bc51 	.word	0x0001bc51
1000b2f0:	e000e100 	.word	0xe000e100

1000b2f4 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000b2f4:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000b2f6:	2390      	movs	r3, #144	; 0x90
1000b2f8:	4a1b      	ldr	r2, [pc, #108]	; (1000b368 <gpio_port2_isr_handler+0x74>)
1000b2fa:	58d2      	ldr	r2, [r2, r3]
1000b2fc:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b2fe:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000b300:	04d9      	lsls	r1, r3, #19
1000b302:	d414      	bmi.n	1000b32e <gpio_port2_isr_handler+0x3a>
1000b304:	0499      	lsls	r1, r3, #18
1000b306:	d40a      	bmi.n	1000b31e <gpio_port2_isr_handler+0x2a>
1000b308:	0459      	lsls	r1, r3, #17
1000b30a:	d40c      	bmi.n	1000b326 <gpio_port2_isr_handler+0x32>
1000b30c:	0bdb      	lsrs	r3, r3, #15
1000b30e:	03db      	lsls	r3, r3, #15
1000b310:	b29b      	uxth	r3, r3
1000b312:	2b00      	cmp	r3, #0
1000b314:	d020      	beq.n	1000b358 <gpio_port2_isr_handler+0x64>
1000b316:	2380      	movs	r3, #128	; 0x80
1000b318:	021b      	lsls	r3, r3, #8
1000b31a:	210f      	movs	r1, #15
1000b31c:	e00a      	b.n	1000b334 <gpio_port2_isr_handler+0x40>
1000b31e:	2380      	movs	r3, #128	; 0x80
1000b320:	019b      	lsls	r3, r3, #6
1000b322:	210d      	movs	r1, #13
1000b324:	e006      	b.n	1000b334 <gpio_port2_isr_handler+0x40>
1000b326:	2380      	movs	r3, #128	; 0x80
1000b328:	01db      	lsls	r3, r3, #7
1000b32a:	210e      	movs	r1, #14
1000b32c:	e002      	b.n	1000b334 <gpio_port2_isr_handler+0x40>
1000b32e:	2380      	movs	r3, #128	; 0x80
1000b330:	015b      	lsls	r3, r3, #5
1000b332:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b334:	b29b      	uxth	r3, r3
1000b336:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000b338:	23d6      	movs	r3, #214	; 0xd6
1000b33a:	4a0b      	ldr	r2, [pc, #44]	; (1000b368 <gpio_port2_isr_handler+0x74>)
1000b33c:	5ad3      	ldrh	r3, [r2, r3]
1000b33e:	410b      	asrs	r3, r1
1000b340:	07db      	lsls	r3, r3, #31
1000b342:	d509      	bpl.n	1000b358 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000b344:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000b346:	5ad3      	ldrh	r3, [r2, r3]
1000b348:	410b      	asrs	r3, r1
1000b34a:	07db      	lsls	r3, r3, #31
1000b34c:	d504      	bpl.n	1000b358 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000b34e:	3124      	adds	r1, #36	; 0x24
1000b350:	0089      	lsls	r1, r1, #2
1000b352:	1851      	adds	r1, r2, r1
1000b354:	684b      	ldr	r3, [r1, #4]
1000b356:	4798      	blx	r3
1000b358:	2180      	movs	r1, #128	; 0x80
1000b35a:	0489      	lsls	r1, r1, #18
1000b35c:	23c0      	movs	r3, #192	; 0xc0
1000b35e:	005b      	lsls	r3, r3, #1
1000b360:	4a02      	ldr	r2, [pc, #8]	; (1000b36c <gpio_port2_isr_handler+0x78>)
1000b362:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000b364:	bd10      	pop	{r4, pc}
1000b366:	46c0      	nop			; (mov r8, r8)
1000b368:	100147bc 	.word	0x100147bc
1000b36c:	e000e100 	.word	0xe000e100

1000b370 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000b370:	2300      	movs	r3, #0
1000b372:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000b374:	2201      	movs	r2, #1
1000b376:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000b378:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000b37a:	70c3      	strb	r3, [r0, #3]
}
1000b37c:	4770      	bx	lr
1000b37e:	46c0      	nop			; (mov r8, r8)

1000b380 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000b380:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000b382:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000b384:	2801      	cmp	r0, #1
1000b386:	d800      	bhi.n	1000b38a <gpio_pin_set_config+0xa>
1000b388:	e0c8      	b.n	1000b51c <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000b38a:	2807      	cmp	r0, #7
1000b38c:	d809      	bhi.n	1000b3a2 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b38e:	4d64      	ldr	r5, [pc, #400]	; (1000b520 <gpio_pin_set_config+0x1a0>)
1000b390:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000b392:	3b10      	subs	r3, #16
1000b394:	4003      	ands	r3, r0
1000b396:	009b      	lsls	r3, r3, #2
1000b398:	2407      	movs	r4, #7
1000b39a:	409c      	lsls	r4, r3
1000b39c:	43a2      	bics	r2, r4
1000b39e:	646a      	str	r2, [r5, #68]	; 0x44
1000b3a0:	e029      	b.n	1000b3f6 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000b3a2:	280f      	cmp	r0, #15
1000b3a4:	d809      	bhi.n	1000b3ba <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b3a6:	4d5e      	ldr	r5, [pc, #376]	; (1000b520 <gpio_pin_set_config+0x1a0>)
1000b3a8:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000b3aa:	2307      	movs	r3, #7
1000b3ac:	4003      	ands	r3, r0
1000b3ae:	009b      	lsls	r3, r3, #2
1000b3b0:	2407      	movs	r4, #7
1000b3b2:	409c      	lsls	r4, r3
1000b3b4:	43a2      	bics	r2, r4
1000b3b6:	64aa      	str	r2, [r5, #72]	; 0x48
1000b3b8:	e01d      	b.n	1000b3f6 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000b3ba:	2817      	cmp	r0, #23
1000b3bc:	d809      	bhi.n	1000b3d2 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b3be:	4d58      	ldr	r5, [pc, #352]	; (1000b520 <gpio_pin_set_config+0x1a0>)
1000b3c0:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000b3c2:	2307      	movs	r3, #7
1000b3c4:	4003      	ands	r3, r0
1000b3c6:	009b      	lsls	r3, r3, #2
1000b3c8:	2407      	movs	r4, #7
1000b3ca:	409c      	lsls	r4, r3
1000b3cc:	43a2      	bics	r2, r4
1000b3ce:	64ea      	str	r2, [r5, #76]	; 0x4c
1000b3d0:	e011      	b.n	1000b3f6 <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000b3d2:	0003      	movs	r3, r0
1000b3d4:	3b2c      	subs	r3, #44	; 0x2c
1000b3d6:	2b03      	cmp	r3, #3
1000b3d8:	d80d      	bhi.n	1000b3f6 <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000b3da:	4d52      	ldr	r5, [pc, #328]	; (1000b524 <gpio_pin_set_config+0x1a4>)
1000b3dc:	2482      	movs	r4, #130	; 0x82
1000b3de:	00e4      	lsls	r4, r4, #3
1000b3e0:	5d2a      	ldrb	r2, [r5, r4]
1000b3e2:	0712      	lsls	r2, r2, #28
1000b3e4:	2601      	movs	r6, #1
1000b3e6:	409e      	lsls	r6, r3
1000b3e8:	0f12      	lsrs	r2, r2, #28
1000b3ea:	5d2b      	ldrb	r3, [r5, r4]
1000b3ec:	43b2      	bics	r2, r6
1000b3ee:	260f      	movs	r6, #15
1000b3f0:	43b3      	bics	r3, r6
1000b3f2:	4313      	orrs	r3, r2
1000b3f4:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000b3f6:	0003      	movs	r3, r0
1000b3f8:	3b1d      	subs	r3, #29
1000b3fa:	2b02      	cmp	r3, #2
1000b3fc:	d829      	bhi.n	1000b452 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000b3fe:	784b      	ldrb	r3, [r1, #1]
1000b400:	2b01      	cmp	r3, #1
1000b402:	d108      	bne.n	1000b416 <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000b404:	4d47      	ldr	r5, [pc, #284]	; (1000b524 <gpio_pin_set_config+0x1a4>)
1000b406:	7d2b      	ldrb	r3, [r5, #20]
1000b408:	241f      	movs	r4, #31
1000b40a:	1a24      	subs	r4, r4, r0
1000b40c:	2201      	movs	r2, #1
1000b40e:	40a2      	lsls	r2, r4
1000b410:	4393      	bics	r3, r2
1000b412:	752b      	strb	r3, [r5, #20]
1000b414:	e008      	b.n	1000b428 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000b416:	4c43      	ldr	r4, [pc, #268]	; (1000b524 <gpio_pin_set_config+0x1a4>)
1000b418:	7d25      	ldrb	r5, [r4, #20]
1000b41a:	221f      	movs	r2, #31
1000b41c:	1a12      	subs	r2, r2, r0
1000b41e:	2301      	movs	r3, #1
1000b420:	4093      	lsls	r3, r2
1000b422:	432b      	orrs	r3, r5
1000b424:	b2db      	uxtb	r3, r3
1000b426:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000b428:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b42a:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000b42c:	2a00      	cmp	r2, #0
1000b42e:	d075      	beq.n	1000b51c <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000b430:	493c      	ldr	r1, [pc, #240]	; (1000b524 <gpio_pin_set_config+0x1a4>)
1000b432:	880c      	ldrh	r4, [r1, #0]
1000b434:	221f      	movs	r2, #31
1000b436:	1a10      	subs	r0, r2, r0
1000b438:	0080      	lsls	r0, r0, #2
1000b43a:	3301      	adds	r3, #1
1000b43c:	4083      	lsls	r3, r0
1000b43e:	4323      	orrs	r3, r4
1000b440:	b29b      	uxth	r3, r3
1000b442:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000b444:	4a38      	ldr	r2, [pc, #224]	; (1000b528 <gpio_pin_set_config+0x1a8>)
1000b446:	7811      	ldrb	r1, [r2, #0]
1000b448:	2302      	movs	r3, #2
1000b44a:	430b      	orrs	r3, r1
1000b44c:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b44e:	2300      	movs	r3, #0
1000b450:	e064      	b.n	1000b51c <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000b452:	780a      	ldrb	r2, [r1, #0]
1000b454:	2a00      	cmp	r2, #0
1000b456:	d140      	bne.n	1000b4da <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000b458:	280f      	cmp	r0, #15
1000b45a:	d808      	bhi.n	1000b46e <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000b45c:	2301      	movs	r3, #1
1000b45e:	4083      	lsls	r3, r0
1000b460:	b29b      	uxth	r3, r3
1000b462:	4a32      	ldr	r2, [pc, #200]	; (1000b52c <gpio_pin_set_config+0x1ac>)
1000b464:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b466:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000b468:	281f      	cmp	r0, #31
1000b46a:	d857      	bhi.n	1000b51c <gpio_pin_set_config+0x19c>
1000b46c:	e012      	b.n	1000b494 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000b46e:	281f      	cmp	r0, #31
1000b470:	d807      	bhi.n	1000b482 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000b472:	220f      	movs	r2, #15
1000b474:	4002      	ands	r2, r0
1000b476:	2301      	movs	r3, #1
1000b478:	4093      	lsls	r3, r2
1000b47a:	b29b      	uxth	r3, r3
1000b47c:	4a2c      	ldr	r2, [pc, #176]	; (1000b530 <gpio_pin_set_config+0x1b0>)
1000b47e:	8293      	strh	r3, [r2, #20]
1000b480:	e008      	b.n	1000b494 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000b482:	230f      	movs	r3, #15
1000b484:	4018      	ands	r0, r3
1000b486:	3b0e      	subs	r3, #14
1000b488:	4083      	lsls	r3, r0
1000b48a:	b29b      	uxth	r3, r3
1000b48c:	4a29      	ldr	r2, [pc, #164]	; (1000b534 <gpio_pin_set_config+0x1b4>)
1000b48e:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b490:	2300      	movs	r3, #0
1000b492:	e043      	b.n	1000b51c <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000b494:	784b      	ldrb	r3, [r1, #1]
1000b496:	2b01      	cmp	r3, #1
1000b498:	d00c      	beq.n	1000b4b4 <gpio_pin_set_config+0x134>
1000b49a:	2b00      	cmp	r3, #0
1000b49c:	d002      	beq.n	1000b4a4 <gpio_pin_set_config+0x124>
1000b49e:	2b02      	cmp	r3, #2
1000b4a0:	d010      	beq.n	1000b4c4 <gpio_pin_set_config+0x144>
1000b4a2:	e03a      	b.n	1000b51a <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000b4a4:	491e      	ldr	r1, [pc, #120]	; (1000b520 <gpio_pin_set_config+0x1a0>)
1000b4a6:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000b4a8:	2301      	movs	r3, #1
1000b4aa:	4083      	lsls	r3, r0
1000b4ac:	4313      	orrs	r3, r2
1000b4ae:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b4b0:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000b4b2:	e033      	b.n	1000b51c <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000b4b4:	491a      	ldr	r1, [pc, #104]	; (1000b520 <gpio_pin_set_config+0x1a0>)
1000b4b6:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000b4b8:	2201      	movs	r2, #1
1000b4ba:	4082      	lsls	r2, r0
1000b4bc:	4393      	bics	r3, r2
1000b4be:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b4c0:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000b4c2:	e02b      	b.n	1000b51c <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000b4c4:	4b16      	ldr	r3, [pc, #88]	; (1000b520 <gpio_pin_set_config+0x1a0>)
1000b4c6:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000b4c8:	2201      	movs	r2, #1
1000b4ca:	4082      	lsls	r2, r0
1000b4cc:	4311      	orrs	r1, r2
1000b4ce:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000b4d0:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000b4d2:	4391      	bics	r1, r2
1000b4d4:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b4d6:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000b4d8:	e020      	b.n	1000b51c <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b4da:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000b4dc:	2a01      	cmp	r2, #1
1000b4de:	d11d      	bne.n	1000b51c <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000b4e0:	280f      	cmp	r0, #15
1000b4e2:	d806      	bhi.n	1000b4f2 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000b4e4:	3301      	adds	r3, #1
1000b4e6:	4083      	lsls	r3, r0
1000b4e8:	b29b      	uxth	r3, r3
1000b4ea:	4a10      	ldr	r2, [pc, #64]	; (1000b52c <gpio_pin_set_config+0x1ac>)
1000b4ec:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b4ee:	2300      	movs	r3, #0
1000b4f0:	e014      	b.n	1000b51c <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000b4f2:	281f      	cmp	r0, #31
1000b4f4:	d808      	bhi.n	1000b508 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000b4f6:	230f      	movs	r3, #15
1000b4f8:	4018      	ands	r0, r3
1000b4fa:	3b0e      	subs	r3, #14
1000b4fc:	4083      	lsls	r3, r0
1000b4fe:	b29b      	uxth	r3, r3
1000b500:	4a0b      	ldr	r2, [pc, #44]	; (1000b530 <gpio_pin_set_config+0x1b0>)
1000b502:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b504:	2300      	movs	r3, #0
1000b506:	e009      	b.n	1000b51c <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000b508:	230f      	movs	r3, #15
1000b50a:	4018      	ands	r0, r3
1000b50c:	3b0e      	subs	r3, #14
1000b50e:	4083      	lsls	r3, r0
1000b510:	b29b      	uxth	r3, r3
1000b512:	4a08      	ldr	r2, [pc, #32]	; (1000b534 <gpio_pin_set_config+0x1b4>)
1000b514:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b516:	2300      	movs	r3, #0
1000b518:	e000      	b.n	1000b51c <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000b51a:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000b51c:	0018      	movs	r0, r3
1000b51e:	bd70      	pop	{r4, r5, r6, pc}
1000b520:	4000b000 	.word	0x4000b000
1000b524:	4000f000 	.word	0x4000f000
1000b528:	4000e000 	.word	0x4000e000
1000b52c:	40010000 	.word	0x40010000
1000b530:	40011000 	.word	0x40011000
1000b534:	40013000 	.word	0x40013000

1000b538 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000b538:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000b53a:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000b53c:	23ff      	movs	r3, #255	; 0xff
1000b53e:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000b540:	2807      	cmp	r0, #7
1000b542:	d833      	bhi.n	1000b5ac <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b544:	4a4e      	ldr	r2, [pc, #312]	; (1000b680 <gpio_pinmux_cofiguration+0x148>)
1000b546:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000b548:	3bf8      	subs	r3, #248	; 0xf8
1000b54a:	4003      	ands	r3, r0
1000b54c:	009b      	lsls	r3, r3, #2
1000b54e:	2607      	movs	r6, #7
1000b550:	409e      	lsls	r6, r3
1000b552:	43b4      	bics	r4, r6
1000b554:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000b556:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000b558:	000e      	movs	r6, r1
1000b55a:	409e      	lsls	r6, r3
1000b55c:	0033      	movs	r3, r6
1000b55e:	4323      	orrs	r3, r4
1000b560:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000b562:	2901      	cmp	r1, #1
1000b564:	d000      	beq.n	1000b568 <gpio_pinmux_cofiguration+0x30>
1000b566:	e08a      	b.n	1000b67e <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000b568:	2803      	cmp	r0, #3
1000b56a:	d80f      	bhi.n	1000b58c <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b56c:	0011      	movs	r1, r2
1000b56e:	22d0      	movs	r2, #208	; 0xd0
1000b570:	0052      	lsls	r2, r2, #1
1000b572:	588c      	ldr	r4, [r1, r2]
1000b574:	2303      	movs	r3, #3
1000b576:	4018      	ands	r0, r3
1000b578:	00c0      	lsls	r0, r0, #3
1000b57a:	333c      	adds	r3, #60	; 0x3c
1000b57c:	4083      	lsls	r3, r0
1000b57e:	439c      	bics	r4, r3
1000b580:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b582:	588b      	ldr	r3, [r1, r2]
1000b584:	4085      	lsls	r5, r0
1000b586:	431d      	orrs	r5, r3
1000b588:	508d      	str	r5, [r1, r2]
1000b58a:	e078      	b.n	1000b67e <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b58c:	493c      	ldr	r1, [pc, #240]	; (1000b680 <gpio_pinmux_cofiguration+0x148>)
1000b58e:	22d2      	movs	r2, #210	; 0xd2
1000b590:	0052      	lsls	r2, r2, #1
1000b592:	588c      	ldr	r4, [r1, r2]
1000b594:	2303      	movs	r3, #3
1000b596:	4018      	ands	r0, r3
1000b598:	00c0      	lsls	r0, r0, #3
1000b59a:	333c      	adds	r3, #60	; 0x3c
1000b59c:	4083      	lsls	r3, r0
1000b59e:	439c      	bics	r4, r3
1000b5a0:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b5a2:	588b      	ldr	r3, [r1, r2]
1000b5a4:	4085      	lsls	r5, r0
1000b5a6:	431d      	orrs	r5, r3
1000b5a8:	508d      	str	r5, [r1, r2]
1000b5aa:	e068      	b.n	1000b67e <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000b5ac:	280f      	cmp	r0, #15
1000b5ae:	d832      	bhi.n	1000b616 <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b5b0:	4a33      	ldr	r2, [pc, #204]	; (1000b680 <gpio_pinmux_cofiguration+0x148>)
1000b5b2:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000b5b4:	2307      	movs	r3, #7
1000b5b6:	4003      	ands	r3, r0
1000b5b8:	009b      	lsls	r3, r3, #2
1000b5ba:	2607      	movs	r6, #7
1000b5bc:	409e      	lsls	r6, r3
1000b5be:	43b4      	bics	r4, r6
1000b5c0:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000b5c2:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000b5c4:	000e      	movs	r6, r1
1000b5c6:	409e      	lsls	r6, r3
1000b5c8:	0033      	movs	r3, r6
1000b5ca:	4323      	orrs	r3, r4
1000b5cc:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000b5ce:	2901      	cmp	r1, #1
1000b5d0:	d155      	bne.n	1000b67e <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000b5d2:	280b      	cmp	r0, #11
1000b5d4:	d80f      	bhi.n	1000b5f6 <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b5d6:	0011      	movs	r1, r2
1000b5d8:	22d4      	movs	r2, #212	; 0xd4
1000b5da:	0052      	lsls	r2, r2, #1
1000b5dc:	588c      	ldr	r4, [r1, r2]
1000b5de:	2303      	movs	r3, #3
1000b5e0:	4018      	ands	r0, r3
1000b5e2:	00c0      	lsls	r0, r0, #3
1000b5e4:	333c      	adds	r3, #60	; 0x3c
1000b5e6:	4083      	lsls	r3, r0
1000b5e8:	439c      	bics	r4, r3
1000b5ea:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b5ec:	588b      	ldr	r3, [r1, r2]
1000b5ee:	4085      	lsls	r5, r0
1000b5f0:	431d      	orrs	r5, r3
1000b5f2:	508d      	str	r5, [r1, r2]
1000b5f4:	e043      	b.n	1000b67e <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b5f6:	4922      	ldr	r1, [pc, #136]	; (1000b680 <gpio_pinmux_cofiguration+0x148>)
1000b5f8:	22d6      	movs	r2, #214	; 0xd6
1000b5fa:	0052      	lsls	r2, r2, #1
1000b5fc:	588c      	ldr	r4, [r1, r2]
1000b5fe:	2303      	movs	r3, #3
1000b600:	4018      	ands	r0, r3
1000b602:	00c0      	lsls	r0, r0, #3
1000b604:	333c      	adds	r3, #60	; 0x3c
1000b606:	4083      	lsls	r3, r0
1000b608:	439c      	bics	r4, r3
1000b60a:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b60c:	588b      	ldr	r3, [r1, r2]
1000b60e:	4085      	lsls	r5, r0
1000b610:	431d      	orrs	r5, r3
1000b612:	508d      	str	r5, [r1, r2]
1000b614:	e033      	b.n	1000b67e <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000b616:	2817      	cmp	r0, #23
1000b618:	d831      	bhi.n	1000b67e <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b61a:	4a19      	ldr	r2, [pc, #100]	; (1000b680 <gpio_pinmux_cofiguration+0x148>)
1000b61c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000b61e:	2307      	movs	r3, #7
1000b620:	4003      	ands	r3, r0
1000b622:	009b      	lsls	r3, r3, #2
1000b624:	2607      	movs	r6, #7
1000b626:	409e      	lsls	r6, r3
1000b628:	43b4      	bics	r4, r6
1000b62a:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000b62c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000b62e:	000e      	movs	r6, r1
1000b630:	409e      	lsls	r6, r3
1000b632:	0033      	movs	r3, r6
1000b634:	4323      	orrs	r3, r4
1000b636:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000b638:	2901      	cmp	r1, #1
1000b63a:	d120      	bne.n	1000b67e <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000b63c:	2813      	cmp	r0, #19
1000b63e:	d80f      	bhi.n	1000b660 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b640:	0011      	movs	r1, r2
1000b642:	22d8      	movs	r2, #216	; 0xd8
1000b644:	0052      	lsls	r2, r2, #1
1000b646:	588c      	ldr	r4, [r1, r2]
1000b648:	2303      	movs	r3, #3
1000b64a:	4018      	ands	r0, r3
1000b64c:	00c0      	lsls	r0, r0, #3
1000b64e:	333c      	adds	r3, #60	; 0x3c
1000b650:	4083      	lsls	r3, r0
1000b652:	439c      	bics	r4, r3
1000b654:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b656:	588b      	ldr	r3, [r1, r2]
1000b658:	4085      	lsls	r5, r0
1000b65a:	431d      	orrs	r5, r3
1000b65c:	508d      	str	r5, [r1, r2]
1000b65e:	e00e      	b.n	1000b67e <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b660:	4a07      	ldr	r2, [pc, #28]	; (1000b680 <gpio_pinmux_cofiguration+0x148>)
1000b662:	23da      	movs	r3, #218	; 0xda
1000b664:	005b      	lsls	r3, r3, #1
1000b666:	58d1      	ldr	r1, [r2, r3]
1000b668:	2403      	movs	r4, #3
1000b66a:	4020      	ands	r0, r4
1000b66c:	00c0      	lsls	r0, r0, #3
1000b66e:	343c      	adds	r4, #60	; 0x3c
1000b670:	4084      	lsls	r4, r0
1000b672:	43a1      	bics	r1, r4
1000b674:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b676:	58d1      	ldr	r1, [r2, r3]
1000b678:	4085      	lsls	r5, r0
1000b67a:	430d      	orrs	r5, r1
1000b67c:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000b67e:	bd70      	pop	{r4, r5, r6, pc}
1000b680:	4000b000 	.word	0x4000b000

1000b684 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000b684:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000b686:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000b688:	280f      	cmp	r0, #15
1000b68a:	d904      	bls.n	1000b696 <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000b68c:	241f      	movs	r4, #31
1000b68e:	4284      	cmp	r4, r0
1000b690:	415b      	adcs	r3, r3
1000b692:	3c1d      	subs	r4, #29
1000b694:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000b696:	2a01      	cmp	r2, #1
1000b698:	d016      	beq.n	1000b6c8 <gpio_register_callback+0x44>
1000b69a:	2a00      	cmp	r2, #0
1000b69c:	d004      	beq.n	1000b6a8 <gpio_register_callback+0x24>
1000b69e:	2a02      	cmp	r2, #2
1000b6a0:	d022      	beq.n	1000b6e8 <gpio_register_callback+0x64>
1000b6a2:	2a03      	cmp	r2, #3
1000b6a4:	d030      	beq.n	1000b708 <gpio_register_callback+0x84>
1000b6a6:	e03e      	b.n	1000b726 <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000b6a8:	4e29      	ldr	r6, [pc, #164]	; (1000b750 <gpio_register_callback+0xcc>)
1000b6aa:	00dc      	lsls	r4, r3, #3
1000b6ac:	18e2      	adds	r2, r4, r3
1000b6ae:	00d2      	lsls	r2, r2, #3
1000b6b0:	5997      	ldr	r7, [r2, r6]
1000b6b2:	250f      	movs	r5, #15
1000b6b4:	4005      	ands	r5, r0
1000b6b6:	2201      	movs	r2, #1
1000b6b8:	40aa      	lsls	r2, r5
1000b6ba:	b292      	uxth	r2, r2
1000b6bc:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000b6be:	18e4      	adds	r4, r4, r3
1000b6c0:	00e4      	lsls	r4, r4, #3
1000b6c2:	59a4      	ldr	r4, [r4, r6]
1000b6c4:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000b6c6:	e02e      	b.n	1000b726 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000b6c8:	4e21      	ldr	r6, [pc, #132]	; (1000b750 <gpio_register_callback+0xcc>)
1000b6ca:	00dc      	lsls	r4, r3, #3
1000b6cc:	18e2      	adds	r2, r4, r3
1000b6ce:	00d2      	lsls	r2, r2, #3
1000b6d0:	5997      	ldr	r7, [r2, r6]
1000b6d2:	250f      	movs	r5, #15
1000b6d4:	4005      	ands	r5, r0
1000b6d6:	2201      	movs	r2, #1
1000b6d8:	40aa      	lsls	r2, r5
1000b6da:	b292      	uxth	r2, r2
1000b6dc:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000b6de:	18e4      	adds	r4, r4, r3
1000b6e0:	00e4      	lsls	r4, r4, #3
1000b6e2:	59a4      	ldr	r4, [r4, r6]
1000b6e4:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000b6e6:	e01e      	b.n	1000b726 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000b6e8:	4e19      	ldr	r6, [pc, #100]	; (1000b750 <gpio_register_callback+0xcc>)
1000b6ea:	00dc      	lsls	r4, r3, #3
1000b6ec:	18e2      	adds	r2, r4, r3
1000b6ee:	00d2      	lsls	r2, r2, #3
1000b6f0:	5997      	ldr	r7, [r2, r6]
1000b6f2:	250f      	movs	r5, #15
1000b6f4:	4005      	ands	r5, r0
1000b6f6:	2201      	movs	r2, #1
1000b6f8:	40aa      	lsls	r2, r5
1000b6fa:	b292      	uxth	r2, r2
1000b6fc:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000b6fe:	18e4      	adds	r4, r4, r3
1000b700:	00e4      	lsls	r4, r4, #3
1000b702:	59a4      	ldr	r4, [r4, r6]
1000b704:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000b706:	e00e      	b.n	1000b726 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000b708:	4e11      	ldr	r6, [pc, #68]	; (1000b750 <gpio_register_callback+0xcc>)
1000b70a:	00dc      	lsls	r4, r3, #3
1000b70c:	18e2      	adds	r2, r4, r3
1000b70e:	00d2      	lsls	r2, r2, #3
1000b710:	5997      	ldr	r7, [r2, r6]
1000b712:	250f      	movs	r5, #15
1000b714:	4005      	ands	r5, r0
1000b716:	2201      	movs	r2, #1
1000b718:	40aa      	lsls	r2, r5
1000b71a:	b292      	uxth	r2, r2
1000b71c:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000b71e:	18e4      	adds	r4, r4, r3
1000b720:	00e4      	lsls	r4, r4, #3
1000b722:	59a4      	ldr	r4, [r4, r6]
1000b724:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000b726:	220f      	movs	r2, #15
1000b728:	4010      	ands	r0, r2
1000b72a:	4c09      	ldr	r4, [pc, #36]	; (1000b750 <gpio_register_callback+0xcc>)
1000b72c:	00dd      	lsls	r5, r3, #3
1000b72e:	18ea      	adds	r2, r5, r3
1000b730:	0052      	lsls	r2, r2, #1
1000b732:	1812      	adds	r2, r2, r0
1000b734:	0092      	lsls	r2, r2, #2
1000b736:	18a2      	adds	r2, r4, r2
1000b738:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000b73a:	18ea      	adds	r2, r5, r3
1000b73c:	00d2      	lsls	r2, r2, #3
1000b73e:	18a2      	adds	r2, r4, r2
1000b740:	3244      	adds	r2, #68	; 0x44
1000b742:	2101      	movs	r1, #1
1000b744:	4081      	lsls	r1, r0
1000b746:	8813      	ldrh	r3, [r2, #0]
1000b748:	430b      	orrs	r3, r1
1000b74a:	8013      	strh	r3, [r2, #0]
}
1000b74c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b74e:	46c0      	nop			; (mov r8, r8)
1000b750:	100147bc 	.word	0x100147bc

1000b754 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000b754:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000b756:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000b758:	280f      	cmp	r0, #15
1000b75a:	d904      	bls.n	1000b766 <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000b75c:	221f      	movs	r2, #31
1000b75e:	4282      	cmp	r2, r0
1000b760:	415b      	adcs	r3, r3
1000b762:	3a1d      	subs	r2, #29
1000b764:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000b766:	220f      	movs	r2, #15
1000b768:	4010      	ands	r0, r2
1000b76a:	2101      	movs	r1, #1
1000b76c:	4081      	lsls	r1, r0
1000b76e:	4c07      	ldr	r4, [pc, #28]	; (1000b78c <gpio_disable_callback+0x38>)
1000b770:	00dd      	lsls	r5, r3, #3
1000b772:	18ea      	adds	r2, r5, r3
1000b774:	00d2      	lsls	r2, r2, #3
1000b776:	18a2      	adds	r2, r4, r2
1000b778:	3246      	adds	r2, #70	; 0x46
1000b77a:	8810      	ldrh	r0, [r2, #0]
1000b77c:	4388      	bics	r0, r1
1000b77e:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000b780:	18eb      	adds	r3, r5, r3
1000b782:	00db      	lsls	r3, r3, #3
1000b784:	591b      	ldr	r3, [r3, r4]
1000b786:	b289      	uxth	r1, r1
1000b788:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000b78a:	bd30      	pop	{r4, r5, pc}
1000b78c:	100147bc 	.word	0x100147bc

1000b790 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000b790:	b510      	push	{r4, lr}
1000b792:	4a11      	ldr	r2, [pc, #68]	; (1000b7d8 <gpio_init+0x48>)
1000b794:	0010      	movs	r0, r2
1000b796:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000b798:	2100      	movs	r1, #0
1000b79a:	e007      	b.n	1000b7ac <gpio_init+0x1c>
1000b79c:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000b79e:	4293      	cmp	r3, r2
1000b7a0:	d1fc      	bne.n	1000b79c <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000b7a2:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000b7a4:	8011      	strh	r1, [r2, #0]
1000b7a6:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000b7a8:	4282      	cmp	r2, r0
1000b7aa:	d002      	beq.n	1000b7b2 <gpio_init+0x22>
1000b7ac:	0013      	movs	r3, r2
1000b7ae:	3b40      	subs	r3, #64	; 0x40
1000b7b0:	e7f4      	b.n	1000b79c <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000b7b2:	4b0a      	ldr	r3, [pc, #40]	; (1000b7dc <gpio_init+0x4c>)
1000b7b4:	4a0a      	ldr	r2, [pc, #40]	; (1000b7e0 <gpio_init+0x50>)
1000b7b6:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000b7b8:	4a0a      	ldr	r2, [pc, #40]	; (1000b7e4 <gpio_init+0x54>)
1000b7ba:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000b7bc:	490a      	ldr	r1, [pc, #40]	; (1000b7e8 <gpio_init+0x58>)
1000b7be:	2290      	movs	r2, #144	; 0x90
1000b7c0:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000b7c2:	490a      	ldr	r1, [pc, #40]	; (1000b7ec <gpio_init+0x5c>)
1000b7c4:	2027      	movs	r0, #39	; 0x27
1000b7c6:	4c0a      	ldr	r4, [pc, #40]	; (1000b7f0 <gpio_init+0x60>)
1000b7c8:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000b7ca:	490a      	ldr	r1, [pc, #40]	; (1000b7f4 <gpio_init+0x64>)
1000b7cc:	2028      	movs	r0, #40	; 0x28
1000b7ce:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000b7d0:	4909      	ldr	r1, [pc, #36]	; (1000b7f8 <gpio_init+0x68>)
1000b7d2:	2029      	movs	r0, #41	; 0x29
1000b7d4:	47a0      	blx	r4
}
1000b7d6:	bd10      	pop	{r4, pc}
1000b7d8:	10014800 	.word	0x10014800
1000b7dc:	100147bc 	.word	0x100147bc
1000b7e0:	40010000 	.word	0x40010000
1000b7e4:	40011000 	.word	0x40011000
1000b7e8:	40013000 	.word	0x40013000
1000b7ec:	1000b221 	.word	0x1000b221
1000b7f0:	1000c255 	.word	0x1000c255
1000b7f4:	1000b285 	.word	0x1000b285
1000b7f8:	1000b2f5 	.word	0x1000b2f5

1000b7fc <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000b7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b7fe:	464f      	mov	r7, r9
1000b800:	4646      	mov	r6, r8
1000b802:	b4c0      	push	{r6, r7}
1000b804:	4681      	mov	r9, r0
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
1000b806:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000b808:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
1000b80a:	2d00      	cmp	r5, #0
1000b80c:	d02f      	beq.n	1000b86e <_i2c_master_read_packet+0x72>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000b80e:	6802      	ldr	r2, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000b810:	2428      	movs	r4, #40	; 0x28
1000b812:	5d13      	ldrb	r3, [r2, r4]
1000b814:	07db      	lsls	r3, r3, #31
1000b816:	d4fc      	bmi.n	1000b812 <_i2c_master_read_packet+0x16>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
1000b818:	2301      	movs	r3, #1
1000b81a:	2434      	movs	r4, #52	; 0x34
1000b81c:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000b81e:	3c14      	subs	r4, #20
1000b820:	5513      	strb	r3, [r2, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
1000b822:	880b      	ldrh	r3, [r1, #0]
1000b824:	005b      	lsls	r3, r3, #1
1000b826:	2402      	movs	r4, #2
1000b828:	34ff      	adds	r4, #255	; 0xff
1000b82a:	4323      	orrs	r3, r4
1000b82c:	b29b      	uxth	r3, r3
1000b82e:	8013      	strh	r3, [r2, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
1000b830:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
1000b832:	2301      	movs	r3, #1
1000b834:	4698      	mov	r8, r3
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
1000b836:	7b13      	ldrb	r3, [r2, #12]
1000b838:	b2db      	uxtb	r3, r3
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
1000b83a:	4640      	mov	r0, r8
1000b83c:	4218      	tst	r0, r3
1000b83e:	d006      	beq.n	1000b84e <_i2c_master_read_packet+0x52>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
1000b840:	1c67      	adds	r7, r4, #1
1000b842:	7910      	ldrb	r0, [r2, #4]
1000b844:	4684      	mov	ip, r0
1000b846:	6848      	ldr	r0, [r1, #4]
1000b848:	4666      	mov	r6, ip
1000b84a:	5506      	strb	r6, [r0, r4]
1000b84c:	b2bc      	uxth	r4, r7
	} while (counter < length); 
1000b84e:	42ac      	cmp	r4, r5
1000b850:	d3f1      	bcc.n	1000b836 <_i2c_master_read_packet+0x3a>

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000b852:	06db      	lsls	r3, r3, #27
1000b854:	d403      	bmi.n	1000b85e <_i2c_master_read_packet+0x62>
1000b856:	2110      	movs	r1, #16
		status = i2c_module->TRANSMIT_STATUS.reg;
1000b858:	7a13      	ldrb	r3, [r2, #8]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000b85a:	420b      	tst	r3, r1
1000b85c:	d0fc      	beq.n	1000b858 <_i2c_master_read_packet+0x5c>
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
1000b85e:	464b      	mov	r3, r9
1000b860:	7959      	ldrb	r1, [r3, #5]
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
1000b862:	2300      	movs	r3, #0
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
1000b864:	2900      	cmp	r1, #0
1000b866:	d102      	bne.n	1000b86e <_i2c_master_read_packet+0x72>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000b868:	3320      	adds	r3, #32
1000b86a:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
1000b86c:	2300      	movs	r3, #0
}
1000b86e:	0018      	movs	r0, r3
1000b870:	bc0c      	pop	{r2, r3}
1000b872:	4690      	mov	r8, r2
1000b874:	4699      	mov	r9, r3
1000b876:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000b878 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000b878:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b87a:	4657      	mov	r7, sl
1000b87c:	464e      	mov	r6, r9
1000b87e:	4645      	mov	r5, r8
1000b880:	b4e0      	push	{r5, r6, r7}
1000b882:	4682      	mov	sl, r0
1000b884:	4689      	mov	r9, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
1000b886:	6804      	ldr	r4, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
1000b888:	884b      	ldrh	r3, [r1, #2]
1000b88a:	4698      	mov	r8, r3
1000b88c:	2228      	movs	r2, #40	; 0x28
1000b88e:	5ca3      	ldrb	r3, [r4, r2]
1000b890:	07db      	lsls	r3, r3, #31
1000b892:	d4fc      	bmi.n	1000b88e <_i2c_master_write_packet+0x16>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
1000b894:	2301      	movs	r3, #1
1000b896:	2234      	movs	r2, #52	; 0x34
1000b898:	54a3      	strb	r3, [r4, r2]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000b89a:	3a14      	subs	r2, #20
1000b89c:	54a3      	strb	r3, [r4, r2]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
1000b89e:	464b      	mov	r3, r9
1000b8a0:	881b      	ldrh	r3, [r3, #0]
1000b8a2:	005b      	lsls	r3, r3, #1
1000b8a4:	32e0      	adds	r2, #224	; 0xe0
1000b8a6:	4313      	orrs	r3, r2
1000b8a8:	b29b      	uxth	r3, r3
1000b8aa:	8023      	strh	r3, [r4, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
1000b8ac:	2500      	movs	r5, #0

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
        printf(".");
1000b8ae:	4f11      	ldr	r7, [pc, #68]	; (1000b8f4 <_i2c_master_write_packet+0x7c>)
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
1000b8b0:	2601      	movs	r6, #1

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
        printf(".");
1000b8b2:	202e      	movs	r0, #46	; 0x2e
1000b8b4:	47b8      	blx	r7
		status = i2c_module->TRANSMIT_STATUS.reg;
1000b8b6:	7a23      	ldrb	r3, [r4, #8]
1000b8b8:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
1000b8ba:	421e      	tst	r6, r3
1000b8bc:	d005      	beq.n	1000b8ca <_i2c_master_write_packet+0x52>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
1000b8be:	1c6a      	adds	r2, r5, #1
1000b8c0:	4649      	mov	r1, r9
1000b8c2:	6849      	ldr	r1, [r1, #4]
1000b8c4:	5d49      	ldrb	r1, [r1, r5]
1000b8c6:	8021      	strh	r1, [r4, #0]
1000b8c8:	b295      	uxth	r5, r2
		}
	} while (counter < length); 
1000b8ca:	4545      	cmp	r5, r8
1000b8cc:	d3f1      	bcc.n	1000b8b2 <_i2c_master_write_packet+0x3a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000b8ce:	06db      	lsls	r3, r3, #27
1000b8d0:	d403      	bmi.n	1000b8da <_i2c_master_write_packet+0x62>
1000b8d2:	2210      	movs	r2, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
1000b8d4:	7a23      	ldrb	r3, [r4, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000b8d6:	4213      	tst	r3, r2
1000b8d8:	d0fc      	beq.n	1000b8d4 <_i2c_master_write_packet+0x5c>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
1000b8da:	4653      	mov	r3, sl
1000b8dc:	795b      	ldrb	r3, [r3, #5]
1000b8de:	2b00      	cmp	r3, #0
1000b8e0:	d102      	bne.n	1000b8e8 <_i2c_master_write_packet+0x70>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000b8e2:	2200      	movs	r2, #0
1000b8e4:	3320      	adds	r3, #32
1000b8e6:	54e2      	strb	r2, [r4, r3]
	}

	return STATUS_OK;
}
1000b8e8:	2000      	movs	r0, #0
1000b8ea:	bc1c      	pop	{r2, r3, r4}
1000b8ec:	4690      	mov	r8, r2
1000b8ee:	4699      	mov	r9, r3
1000b8f0:	46a2      	mov	sl, r4
1000b8f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b8f4:	10010001 	.word	0x10010001

1000b8f8 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
1000b8f8:	2303      	movs	r3, #3
1000b8fa:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
1000b8fc:	330d      	adds	r3, #13
1000b8fe:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
1000b900:	3b08      	subs	r3, #8
1000b902:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
1000b904:	3301      	adds	r3, #1
1000b906:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
1000b908:	3b07      	subs	r3, #7
1000b90a:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
1000b90c:	6103      	str	r3, [r0, #16]
}
1000b90e:	4770      	bx	lr

1000b910 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
1000b910:	b570      	push	{r4, r5, r6, lr}
1000b912:	0004      	movs	r4, r0
1000b914:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
1000b916:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
1000b918:	2800      	cmp	r0, #0
1000b91a:	d026      	beq.n	1000b96a <i2c_master_init+0x5a>
1000b91c:	2a00      	cmp	r2, #0
1000b91e:	d026      	beq.n	1000b96e <i2c_master_init+0x5e>
1000b920:	2228      	movs	r2, #40	; 0x28
1000b922:	5c8b      	ldrb	r3, [r1, r2]
1000b924:	07db      	lsls	r3, r3, #31
1000b926:	d4fc      	bmi.n	1000b922 <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
1000b928:	2300      	movs	r3, #0
1000b92a:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
1000b92c:	6823      	ldr	r3, [r4, #0]
1000b92e:	4a11      	ldr	r2, [pc, #68]	; (1000b974 <i2c_master_init+0x64>)
1000b930:	4293      	cmp	r3, r2
1000b932:	d103      	bne.n	1000b93c <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
1000b934:	2003      	movs	r0, #3
1000b936:	4b10      	ldr	r3, [pc, #64]	; (1000b978 <i2c_master_init+0x68>)
1000b938:	4798      	blx	r3
1000b93a:	e006      	b.n	1000b94a <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
1000b93c:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
1000b93e:	4a0f      	ldr	r2, [pc, #60]	; (1000b97c <i2c_master_init+0x6c>)
1000b940:	4293      	cmp	r3, r2
1000b942:	d115      	bne.n	1000b970 <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
1000b944:	3002      	adds	r0, #2
1000b946:	4b0c      	ldr	r3, [pc, #48]	; (1000b978 <i2c_master_init+0x68>)
1000b948:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
1000b94a:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
1000b94c:	8929      	ldrh	r1, [r5, #8]
1000b94e:	7928      	ldrb	r0, [r5, #4]
1000b950:	4e0b      	ldr	r6, [pc, #44]	; (1000b980 <i2c_master_init+0x70>)
1000b952:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
1000b954:	8a29      	ldrh	r1, [r5, #16]
1000b956:	7b28      	ldrb	r0, [r5, #12]
1000b958:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000b95a:	782b      	ldrb	r3, [r5, #0]
1000b95c:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000b95e:	886b      	ldrh	r3, [r5, #2]
1000b960:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
1000b962:	2301      	movs	r3, #1
1000b964:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
1000b966:	2000      	movs	r0, #0
1000b968:	e002      	b.n	1000b970 <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
1000b96a:	2017      	movs	r0, #23
1000b96c:	e000      	b.n	1000b970 <i2c_master_init+0x60>
1000b96e:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
1000b970:	bd70      	pop	{r4, r5, r6, pc}
1000b972:	46c0      	nop			; (mov r8, r8)
1000b974:	40003000 	.word	0x40003000
1000b978:	1000bded 	.word	0x1000bded
1000b97c:	40003400 	.word	0x40003400
1000b980:	1000b539 	.word	0x1000b539

1000b984 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000b984:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
1000b986:	2800      	cmp	r0, #0
1000b988:	d008      	beq.n	1000b99c <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
1000b98a:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
1000b98c:	2900      	cmp	r1, #0
1000b98e:	d006      	beq.n	1000b99e <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000b990:	2300      	movs	r3, #0
1000b992:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
1000b994:	4b03      	ldr	r3, [pc, #12]	; (1000b9a4 <i2c_master_read_packet_wait+0x20>)
1000b996:	4798      	blx	r3
1000b998:	0003      	movs	r3, r0
1000b99a:	e000      	b.n	1000b99e <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
1000b99c:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
1000b99e:	0018      	movs	r0, r3
1000b9a0:	bd10      	pop	{r4, pc}
1000b9a2:	46c0      	nop			; (mov r8, r8)
1000b9a4:	1000b7fd 	.word	0x1000b7fd

1000b9a8 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000b9a8:	b570      	push	{r4, r5, r6, lr}
1000b9aa:	0004      	movs	r4, r0
1000b9ac:	000d      	movs	r5, r1
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000b9ae:	2800      	cmp	r0, #0
1000b9b0:	d00c      	beq.n	1000b9cc <i2c_master_write_packet_wait+0x24>
		return STATUS_ERR_INVALID_ARG;
1000b9b2:	2017      	movs	r0, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000b9b4:	2900      	cmp	r1, #0
1000b9b6:	d00a      	beq.n	1000b9ce <i2c_master_write_packet_wait+0x26>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000b9b8:	2300      	movs	r3, #0
1000b9ba:	7163      	strb	r3, [r4, #5]

    printf("!!");
1000b9bc:	4804      	ldr	r0, [pc, #16]	; (1000b9d0 <i2c_master_write_packet_wait+0x28>)
1000b9be:	4b05      	ldr	r3, [pc, #20]	; (1000b9d4 <i2c_master_write_packet_wait+0x2c>)
1000b9c0:	4798      	blx	r3
	return _i2c_master_write_packet(module, packet);
1000b9c2:	0029      	movs	r1, r5
1000b9c4:	0020      	movs	r0, r4
1000b9c6:	4b04      	ldr	r3, [pc, #16]	; (1000b9d8 <i2c_master_write_packet_wait+0x30>)
1000b9c8:	4798      	blx	r3
1000b9ca:	e000      	b.n	1000b9ce <i2c_master_write_packet_wait+0x26>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
1000b9cc:	2017      	movs	r0, #23

	module->no_stop = false;

    printf("!!");
	return _i2c_master_write_packet(module, packet);
}
1000b9ce:	bd70      	pop	{r4, r5, r6, pc}
1000b9d0:	10011db0 	.word	0x10011db0
1000b9d4:	1000ffcd 	.word	0x1000ffcd
1000b9d8:	1000b879 	.word	0x1000b879

1000b9dc <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000b9dc:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
1000b9de:	2800      	cmp	r0, #0
1000b9e0:	d008      	beq.n	1000b9f4 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
1000b9e2:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
1000b9e4:	2900      	cmp	r1, #0
1000b9e6:	d006      	beq.n	1000b9f6 <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
1000b9e8:	3b16      	subs	r3, #22
1000b9ea:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
1000b9ec:	4b03      	ldr	r3, [pc, #12]	; (1000b9fc <i2c_master_write_packet_wait_no_stop+0x20>)
1000b9ee:	4798      	blx	r3
1000b9f0:	0003      	movs	r3, r0
1000b9f2:	e000      	b.n	1000b9f6 <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
1000b9f4:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
1000b9f6:	0018      	movs	r0, r3
1000b9f8:	bd10      	pop	{r4, pc}
1000b9fa:	46c0      	nop			; (mov r8, r8)
1000b9fc:	1000b879 	.word	0x1000b879

1000ba00 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000ba00:	2801      	cmp	r0, #1
1000ba02:	d00d      	beq.n	1000ba20 <system_clock_config+0x20>
1000ba04:	2800      	cmp	r0, #0
1000ba06:	d002      	beq.n	1000ba0e <system_clock_config+0xe>
1000ba08:	2802      	cmp	r0, #2
1000ba0a:	d01c      	beq.n	1000ba46 <system_clock_config+0x46>
1000ba0c:	e02e      	b.n	1000ba6c <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000ba0e:	4a18      	ldr	r2, [pc, #96]	; (1000ba70 <system_clock_config+0x70>)
1000ba10:	6990      	ldr	r0, [r2, #24]
1000ba12:	230c      	movs	r3, #12
1000ba14:	4303      	orrs	r3, r0
1000ba16:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000ba18:	4a16      	ldr	r2, [pc, #88]	; (1000ba74 <system_clock_config+0x74>)
1000ba1a:	4b17      	ldr	r3, [pc, #92]	; (1000ba78 <system_clock_config+0x78>)
1000ba1c:	601a      	str	r2, [r3, #0]
			break;
1000ba1e:	e01a      	b.n	1000ba56 <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000ba20:	4b13      	ldr	r3, [pc, #76]	; (1000ba70 <system_clock_config+0x70>)
1000ba22:	6998      	ldr	r0, [r3, #24]
1000ba24:	2208      	movs	r2, #8
1000ba26:	4302      	orrs	r2, r0
1000ba28:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000ba2a:	699a      	ldr	r2, [r3, #24]
1000ba2c:	2004      	movs	r0, #4
1000ba2e:	4382      	bics	r2, r0
1000ba30:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000ba32:	4a12      	ldr	r2, [pc, #72]	; (1000ba7c <system_clock_config+0x7c>)
1000ba34:	6853      	ldr	r3, [r2, #4]
1000ba36:	2080      	movs	r0, #128	; 0x80
1000ba38:	0300      	lsls	r0, r0, #12
1000ba3a:	4303      	orrs	r3, r0
1000ba3c:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000ba3e:	4a10      	ldr	r2, [pc, #64]	; (1000ba80 <system_clock_config+0x80>)
1000ba40:	4b0d      	ldr	r3, [pc, #52]	; (1000ba78 <system_clock_config+0x78>)
1000ba42:	601a      	str	r2, [r3, #0]
			break;
1000ba44:	e007      	b.n	1000ba56 <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000ba46:	4a0a      	ldr	r2, [pc, #40]	; (1000ba70 <system_clock_config+0x70>)
1000ba48:	6993      	ldr	r3, [r2, #24]
1000ba4a:	200c      	movs	r0, #12
1000ba4c:	4383      	bics	r3, r0
1000ba4e:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000ba50:	4a08      	ldr	r2, [pc, #32]	; (1000ba74 <system_clock_config+0x74>)
1000ba52:	4b09      	ldr	r3, [pc, #36]	; (1000ba78 <system_clock_config+0x78>)
1000ba54:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000ba56:	4b06      	ldr	r3, [pc, #24]	; (1000ba70 <system_clock_config+0x70>)
1000ba58:	699a      	ldr	r2, [r3, #24]
1000ba5a:	2003      	movs	r0, #3
1000ba5c:	4382      	bics	r2, r0
1000ba5e:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000ba60:	699a      	ldr	r2, [r3, #24]
1000ba62:	4001      	ands	r1, r0
1000ba64:	4311      	orrs	r1, r2
1000ba66:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000ba68:	2000      	movs	r0, #0
1000ba6a:	e000      	b.n	1000ba6e <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000ba6c:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000ba6e:	4770      	bx	lr
1000ba70:	4000b000 	.word	0x4000b000
1000ba74:	018cba80 	.word	0x018cba80
1000ba78:	10014894 	.word	0x10014894
1000ba7c:	4000f000 	.word	0x4000f000
1000ba80:	001e8480 	.word	0x001e8480

1000ba84 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000ba84:	4b01      	ldr	r3, [pc, #4]	; (1000ba8c <system_clock_get_value+0x8>)
1000ba86:	6818      	ldr	r0, [r3, #0]
}
1000ba88:	4770      	bx	lr
1000ba8a:	46c0      	nop			; (mov r8, r8)
1000ba8c:	10014894 	.word	0x10014894

1000ba90 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000ba90:	b500      	push	{lr}
	switch (peripheral) {
1000ba92:	2835      	cmp	r0, #53	; 0x35
1000ba94:	d900      	bls.n	1000ba98 <system_clock_peripheral_enable+0x8>
1000ba96:	e1a2      	b.n	1000bdde <system_clock_peripheral_enable+0x34e>
1000ba98:	0080      	lsls	r0, r0, #2
1000ba9a:	4bd2      	ldr	r3, [pc, #840]	; (1000bde4 <system_clock_peripheral_enable+0x354>)
1000ba9c:	581b      	ldr	r3, [r3, r0]
1000ba9e:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000baa0:	4ad1      	ldr	r2, [pc, #836]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000baa2:	68d1      	ldr	r1, [r2, #12]
1000baa4:	2302      	movs	r3, #2
1000baa6:	430b      	orrs	r3, r1
1000baa8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000baaa:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000baac:	e198      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000baae:	4ace      	ldr	r2, [pc, #824]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bab0:	68d1      	ldr	r1, [r2, #12]
1000bab2:	2304      	movs	r3, #4
1000bab4:	430b      	orrs	r3, r1
1000bab6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bab8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000baba:	e191      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000babc:	4aca      	ldr	r2, [pc, #808]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000babe:	68d1      	ldr	r1, [r2, #12]
1000bac0:	2308      	movs	r3, #8
1000bac2:	430b      	orrs	r3, r1
1000bac4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bac6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000bac8:	e18a      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000baca:	4ac7      	ldr	r2, [pc, #796]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bacc:	68d1      	ldr	r1, [r2, #12]
1000bace:	2310      	movs	r3, #16
1000bad0:	430b      	orrs	r3, r1
1000bad2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bad4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000bad6:	e183      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bad8:	4ac3      	ldr	r2, [pc, #780]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bada:	68d1      	ldr	r1, [r2, #12]
1000badc:	2320      	movs	r3, #32
1000bade:	430b      	orrs	r3, r1
1000bae0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bae2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000bae4:	e17c      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bae6:	4ac0      	ldr	r2, [pc, #768]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bae8:	68d1      	ldr	r1, [r2, #12]
1000baea:	2380      	movs	r3, #128	; 0x80
1000baec:	430b      	orrs	r3, r1
1000baee:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000baf0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000baf2:	e175      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000baf4:	4abc      	ldr	r2, [pc, #752]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000baf6:	68d3      	ldr	r3, [r2, #12]
1000baf8:	2180      	movs	r1, #128	; 0x80
1000bafa:	0049      	lsls	r1, r1, #1
1000bafc:	430b      	orrs	r3, r1
1000bafe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb00:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000bb02:	e16d      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bb04:	4ab8      	ldr	r2, [pc, #736]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bb06:	68d3      	ldr	r3, [r2, #12]
1000bb08:	2180      	movs	r1, #128	; 0x80
1000bb0a:	0109      	lsls	r1, r1, #4
1000bb0c:	430b      	orrs	r3, r1
1000bb0e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb10:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000bb12:	e165      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bb14:	4ab4      	ldr	r2, [pc, #720]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bb16:	68d3      	ldr	r3, [r2, #12]
1000bb18:	2180      	movs	r1, #128	; 0x80
1000bb1a:	0149      	lsls	r1, r1, #5
1000bb1c:	430b      	orrs	r3, r1
1000bb1e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb20:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000bb22:	e15d      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bb24:	4ab0      	ldr	r2, [pc, #704]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bb26:	68d3      	ldr	r3, [r2, #12]
1000bb28:	2180      	movs	r1, #128	; 0x80
1000bb2a:	0189      	lsls	r1, r1, #6
1000bb2c:	430b      	orrs	r3, r1
1000bb2e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000bb32:	e155      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bb34:	4aac      	ldr	r2, [pc, #688]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bb36:	68d3      	ldr	r3, [r2, #12]
1000bb38:	2180      	movs	r1, #128	; 0x80
1000bb3a:	01c9      	lsls	r1, r1, #7
1000bb3c:	430b      	orrs	r3, r1
1000bb3e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb40:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000bb42:	e14d      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bb44:	4aa8      	ldr	r2, [pc, #672]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bb46:	68d3      	ldr	r3, [r2, #12]
1000bb48:	2180      	movs	r1, #128	; 0x80
1000bb4a:	0209      	lsls	r1, r1, #8
1000bb4c:	430b      	orrs	r3, r1
1000bb4e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb50:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000bb52:	e145      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bb54:	4aa4      	ldr	r2, [pc, #656]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bb56:	68d3      	ldr	r3, [r2, #12]
1000bb58:	2180      	movs	r1, #128	; 0x80
1000bb5a:	0249      	lsls	r1, r1, #9
1000bb5c:	430b      	orrs	r3, r1
1000bb5e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb60:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000bb62:	e13d      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bb64:	4aa0      	ldr	r2, [pc, #640]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bb66:	68d3      	ldr	r3, [r2, #12]
1000bb68:	2180      	movs	r1, #128	; 0x80
1000bb6a:	0289      	lsls	r1, r1, #10
1000bb6c:	430b      	orrs	r3, r1
1000bb6e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb70:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000bb72:	e135      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bb74:	4a9c      	ldr	r2, [pc, #624]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bb76:	68d3      	ldr	r3, [r2, #12]
1000bb78:	2180      	movs	r1, #128	; 0x80
1000bb7a:	02c9      	lsls	r1, r1, #11
1000bb7c:	430b      	orrs	r3, r1
1000bb7e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb80:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000bb82:	e12d      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bb84:	4a98      	ldr	r2, [pc, #608]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bb86:	68d3      	ldr	r3, [r2, #12]
1000bb88:	2180      	movs	r1, #128	; 0x80
1000bb8a:	0309      	lsls	r1, r1, #12
1000bb8c:	430b      	orrs	r3, r1
1000bb8e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb90:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000bb92:	e125      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bb94:	4a94      	ldr	r2, [pc, #592]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bb96:	68d3      	ldr	r3, [r2, #12]
1000bb98:	2180      	movs	r1, #128	; 0x80
1000bb9a:	0349      	lsls	r1, r1, #13
1000bb9c:	430b      	orrs	r3, r1
1000bb9e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bba0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000bba2:	e11d      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bba4:	4a90      	ldr	r2, [pc, #576]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bba6:	68d3      	ldr	r3, [r2, #12]
1000bba8:	2180      	movs	r1, #128	; 0x80
1000bbaa:	0389      	lsls	r1, r1, #14
1000bbac:	430b      	orrs	r3, r1
1000bbae:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbb0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000bbb2:	e115      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bbb4:	4a8c      	ldr	r2, [pc, #560]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bbb6:	68d3      	ldr	r3, [r2, #12]
1000bbb8:	2180      	movs	r1, #128	; 0x80
1000bbba:	03c9      	lsls	r1, r1, #15
1000bbbc:	430b      	orrs	r3, r1
1000bbbe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbc0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000bbc2:	e10d      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bbc4:	4a88      	ldr	r2, [pc, #544]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bbc6:	68d3      	ldr	r3, [r2, #12]
1000bbc8:	2180      	movs	r1, #128	; 0x80
1000bbca:	0409      	lsls	r1, r1, #16
1000bbcc:	430b      	orrs	r3, r1
1000bbce:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbd0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000bbd2:	e105      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bbd4:	4a84      	ldr	r2, [pc, #528]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bbd6:	68d3      	ldr	r3, [r2, #12]
1000bbd8:	2180      	movs	r1, #128	; 0x80
1000bbda:	0449      	lsls	r1, r1, #17
1000bbdc:	430b      	orrs	r3, r1
1000bbde:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbe0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000bbe2:	e0fd      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bbe4:	4a80      	ldr	r2, [pc, #512]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bbe6:	68d3      	ldr	r3, [r2, #12]
1000bbe8:	2180      	movs	r1, #128	; 0x80
1000bbea:	0489      	lsls	r1, r1, #18
1000bbec:	430b      	orrs	r3, r1
1000bbee:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbf0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000bbf2:	e0f5      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bbf4:	4a7c      	ldr	r2, [pc, #496]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bbf6:	68d3      	ldr	r3, [r2, #12]
1000bbf8:	2180      	movs	r1, #128	; 0x80
1000bbfa:	04c9      	lsls	r1, r1, #19
1000bbfc:	430b      	orrs	r3, r1
1000bbfe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc00:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000bc02:	e0ed      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bc04:	4a78      	ldr	r2, [pc, #480]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bc06:	68d3      	ldr	r3, [r2, #12]
1000bc08:	2180      	movs	r1, #128	; 0x80
1000bc0a:	0509      	lsls	r1, r1, #20
1000bc0c:	430b      	orrs	r3, r1
1000bc0e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc10:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000bc12:	e0e5      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bc14:	4a74      	ldr	r2, [pc, #464]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bc16:	68d3      	ldr	r3, [r2, #12]
1000bc18:	2180      	movs	r1, #128	; 0x80
1000bc1a:	0549      	lsls	r1, r1, #21
1000bc1c:	430b      	orrs	r3, r1
1000bc1e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc20:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000bc22:	e0dd      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bc24:	4a70      	ldr	r2, [pc, #448]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bc26:	68d3      	ldr	r3, [r2, #12]
1000bc28:	2180      	movs	r1, #128	; 0x80
1000bc2a:	0589      	lsls	r1, r1, #22
1000bc2c:	430b      	orrs	r3, r1
1000bc2e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000bc32:	e0d5      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bc34:	4a6c      	ldr	r2, [pc, #432]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bc36:	68d3      	ldr	r3, [r2, #12]
1000bc38:	2180      	movs	r1, #128	; 0x80
1000bc3a:	05c9      	lsls	r1, r1, #23
1000bc3c:	430b      	orrs	r3, r1
1000bc3e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc40:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000bc42:	e0cd      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bc44:	4a68      	ldr	r2, [pc, #416]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bc46:	6911      	ldr	r1, [r2, #16]
1000bc48:	2301      	movs	r3, #1
1000bc4a:	430b      	orrs	r3, r1
1000bc4c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc4e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000bc50:	e0c6      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bc52:	4a65      	ldr	r2, [pc, #404]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bc54:	6911      	ldr	r1, [r2, #16]
1000bc56:	2302      	movs	r3, #2
1000bc58:	430b      	orrs	r3, r1
1000bc5a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc5c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000bc5e:	e0bf      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bc60:	4a61      	ldr	r2, [pc, #388]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bc62:	6911      	ldr	r1, [r2, #16]
1000bc64:	2304      	movs	r3, #4
1000bc66:	430b      	orrs	r3, r1
1000bc68:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc6a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000bc6c:	e0b8      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bc6e:	4a5e      	ldr	r2, [pc, #376]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bc70:	6911      	ldr	r1, [r2, #16]
1000bc72:	2308      	movs	r3, #8
1000bc74:	430b      	orrs	r3, r1
1000bc76:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc78:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000bc7a:	e0b1      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bc7c:	4a5a      	ldr	r2, [pc, #360]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bc7e:	6911      	ldr	r1, [r2, #16]
1000bc80:	2310      	movs	r3, #16
1000bc82:	430b      	orrs	r3, r1
1000bc84:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc86:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000bc88:	e0aa      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bc8a:	4a57      	ldr	r2, [pc, #348]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bc8c:	6911      	ldr	r1, [r2, #16]
1000bc8e:	2320      	movs	r3, #32
1000bc90:	430b      	orrs	r3, r1
1000bc92:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc94:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000bc96:	e0a3      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bc98:	4a53      	ldr	r2, [pc, #332]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bc9a:	6911      	ldr	r1, [r2, #16]
1000bc9c:	2340      	movs	r3, #64	; 0x40
1000bc9e:	430b      	orrs	r3, r1
1000bca0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bca2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000bca4:	e09c      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bca6:	4a50      	ldr	r2, [pc, #320]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bca8:	6911      	ldr	r1, [r2, #16]
1000bcaa:	2380      	movs	r3, #128	; 0x80
1000bcac:	430b      	orrs	r3, r1
1000bcae:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcb0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000bcb2:	e095      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bcb4:	4a4c      	ldr	r2, [pc, #304]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bcb6:	6913      	ldr	r3, [r2, #16]
1000bcb8:	2180      	movs	r1, #128	; 0x80
1000bcba:	0049      	lsls	r1, r1, #1
1000bcbc:	430b      	orrs	r3, r1
1000bcbe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcc0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000bcc2:	e08d      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bcc4:	4a48      	ldr	r2, [pc, #288]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bcc6:	6913      	ldr	r3, [r2, #16]
1000bcc8:	2180      	movs	r1, #128	; 0x80
1000bcca:	0089      	lsls	r1, r1, #2
1000bccc:	430b      	orrs	r3, r1
1000bcce:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcd0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000bcd2:	e085      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bcd4:	4a44      	ldr	r2, [pc, #272]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bcd6:	6913      	ldr	r3, [r2, #16]
1000bcd8:	2180      	movs	r1, #128	; 0x80
1000bcda:	00c9      	lsls	r1, r1, #3
1000bcdc:	430b      	orrs	r3, r1
1000bcde:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bce0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000bce2:	e07d      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bce4:	4a40      	ldr	r2, [pc, #256]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bce6:	6913      	ldr	r3, [r2, #16]
1000bce8:	2180      	movs	r1, #128	; 0x80
1000bcea:	0109      	lsls	r1, r1, #4
1000bcec:	430b      	orrs	r3, r1
1000bcee:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcf0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000bcf2:	e075      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bcf4:	4a3c      	ldr	r2, [pc, #240]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bcf6:	6913      	ldr	r3, [r2, #16]
1000bcf8:	2180      	movs	r1, #128	; 0x80
1000bcfa:	0149      	lsls	r1, r1, #5
1000bcfc:	430b      	orrs	r3, r1
1000bcfe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd00:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000bd02:	e06d      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bd04:	4a38      	ldr	r2, [pc, #224]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bd06:	6913      	ldr	r3, [r2, #16]
1000bd08:	2180      	movs	r1, #128	; 0x80
1000bd0a:	0189      	lsls	r1, r1, #6
1000bd0c:	430b      	orrs	r3, r1
1000bd0e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd10:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000bd12:	e065      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bd14:	4a34      	ldr	r2, [pc, #208]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bd16:	6913      	ldr	r3, [r2, #16]
1000bd18:	2180      	movs	r1, #128	; 0x80
1000bd1a:	01c9      	lsls	r1, r1, #7
1000bd1c:	430b      	orrs	r3, r1
1000bd1e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd20:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000bd22:	e05d      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bd24:	4a30      	ldr	r2, [pc, #192]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bd26:	6913      	ldr	r3, [r2, #16]
1000bd28:	2180      	movs	r1, #128	; 0x80
1000bd2a:	0209      	lsls	r1, r1, #8
1000bd2c:	430b      	orrs	r3, r1
1000bd2e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000bd32:	e055      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bd34:	4a2c      	ldr	r2, [pc, #176]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bd36:	6913      	ldr	r3, [r2, #16]
1000bd38:	2180      	movs	r1, #128	; 0x80
1000bd3a:	0249      	lsls	r1, r1, #9
1000bd3c:	430b      	orrs	r3, r1
1000bd3e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd40:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000bd42:	e04d      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bd44:	4a28      	ldr	r2, [pc, #160]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bd46:	6913      	ldr	r3, [r2, #16]
1000bd48:	2180      	movs	r1, #128	; 0x80
1000bd4a:	0289      	lsls	r1, r1, #10
1000bd4c:	430b      	orrs	r3, r1
1000bd4e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd50:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000bd52:	e045      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bd54:	4a24      	ldr	r2, [pc, #144]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bd56:	6913      	ldr	r3, [r2, #16]
1000bd58:	2180      	movs	r1, #128	; 0x80
1000bd5a:	02c9      	lsls	r1, r1, #11
1000bd5c:	430b      	orrs	r3, r1
1000bd5e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd60:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000bd62:	e03d      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bd64:	4a20      	ldr	r2, [pc, #128]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bd66:	6913      	ldr	r3, [r2, #16]
1000bd68:	2180      	movs	r1, #128	; 0x80
1000bd6a:	0309      	lsls	r1, r1, #12
1000bd6c:	430b      	orrs	r3, r1
1000bd6e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd70:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000bd72:	e035      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bd74:	4a1c      	ldr	r2, [pc, #112]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bd76:	6913      	ldr	r3, [r2, #16]
1000bd78:	2180      	movs	r1, #128	; 0x80
1000bd7a:	0349      	lsls	r1, r1, #13
1000bd7c:	430b      	orrs	r3, r1
1000bd7e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd80:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000bd82:	e02d      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bd84:	4a18      	ldr	r2, [pc, #96]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bd86:	6913      	ldr	r3, [r2, #16]
1000bd88:	2180      	movs	r1, #128	; 0x80
1000bd8a:	0389      	lsls	r1, r1, #14
1000bd8c:	430b      	orrs	r3, r1
1000bd8e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd90:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000bd92:	e025      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bd94:	4a14      	ldr	r2, [pc, #80]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bd96:	6913      	ldr	r3, [r2, #16]
1000bd98:	2180      	movs	r1, #128	; 0x80
1000bd9a:	03c9      	lsls	r1, r1, #15
1000bd9c:	430b      	orrs	r3, r1
1000bd9e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bda0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000bda2:	e01d      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bda4:	4a10      	ldr	r2, [pc, #64]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bda6:	6913      	ldr	r3, [r2, #16]
1000bda8:	2180      	movs	r1, #128	; 0x80
1000bdaa:	0409      	lsls	r1, r1, #16
1000bdac:	430b      	orrs	r3, r1
1000bdae:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdb0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000bdb2:	e015      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000bdb4:	4a0c      	ldr	r2, [pc, #48]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bdb6:	7d11      	ldrb	r1, [r2, #20]
1000bdb8:	2301      	movs	r3, #1
1000bdba:	430b      	orrs	r3, r1
1000bdbc:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdbe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000bdc0:	e00e      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000bdc2:	4a09      	ldr	r2, [pc, #36]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bdc4:	7d11      	ldrb	r1, [r2, #20]
1000bdc6:	2302      	movs	r3, #2
1000bdc8:	430b      	orrs	r3, r1
1000bdca:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdcc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000bdce:	e007      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000bdd0:	4a05      	ldr	r2, [pc, #20]	; (1000bde8 <system_clock_peripheral_enable+0x358>)
1000bdd2:	7d11      	ldrb	r1, [r2, #20]
1000bdd4:	2304      	movs	r3, #4
1000bdd6:	430b      	orrs	r3, r1
1000bdd8:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdda:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000bddc:	e000      	b.n	1000bde0 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000bdde:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000bde0:	bd00      	pop	{pc}
1000bde2:	46c0      	nop			; (mov r8, r8)
1000bde4:	10011db4 	.word	0x10011db4
1000bde8:	4000b000 	.word	0x4000b000

1000bdec <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000bdec:	b500      	push	{lr}
	switch (peripheral) {
1000bdee:	2843      	cmp	r0, #67	; 0x43
1000bdf0:	d900      	bls.n	1000bdf4 <system_peripheral_reset+0x8>
1000bdf2:	e223      	b.n	1000c23c <system_peripheral_reset+0x450>
1000bdf4:	0080      	lsls	r0, r0, #2
1000bdf6:	4be0      	ldr	r3, [pc, #896]	; (1000c178 <system_peripheral_reset+0x38c>)
1000bdf8:	581b      	ldr	r3, [r3, r0]
1000bdfa:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bdfc:	4bdf      	ldr	r3, [pc, #892]	; (1000c17c <system_peripheral_reset+0x390>)
1000bdfe:	6859      	ldr	r1, [r3, #4]
1000be00:	2202      	movs	r2, #2
1000be02:	4391      	bics	r1, r2
1000be04:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000be06:	6859      	ldr	r1, [r3, #4]
1000be08:	430a      	orrs	r2, r1
1000be0a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be0c:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000be0e:	e216      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000be10:	4bda      	ldr	r3, [pc, #872]	; (1000c17c <system_peripheral_reset+0x390>)
1000be12:	6859      	ldr	r1, [r3, #4]
1000be14:	2204      	movs	r2, #4
1000be16:	4391      	bics	r1, r2
1000be18:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000be1a:	6859      	ldr	r1, [r3, #4]
1000be1c:	430a      	orrs	r2, r1
1000be1e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be20:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000be22:	e20c      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000be24:	4bd5      	ldr	r3, [pc, #852]	; (1000c17c <system_peripheral_reset+0x390>)
1000be26:	6859      	ldr	r1, [r3, #4]
1000be28:	2208      	movs	r2, #8
1000be2a:	4391      	bics	r1, r2
1000be2c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000be2e:	6859      	ldr	r1, [r3, #4]
1000be30:	430a      	orrs	r2, r1
1000be32:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be34:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000be36:	e202      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000be38:	4bd0      	ldr	r3, [pc, #832]	; (1000c17c <system_peripheral_reset+0x390>)
1000be3a:	6859      	ldr	r1, [r3, #4]
1000be3c:	2210      	movs	r2, #16
1000be3e:	4391      	bics	r1, r2
1000be40:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000be42:	6859      	ldr	r1, [r3, #4]
1000be44:	430a      	orrs	r2, r1
1000be46:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be48:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000be4a:	e1f8      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000be4c:	4bcb      	ldr	r3, [pc, #812]	; (1000c17c <system_peripheral_reset+0x390>)
1000be4e:	6859      	ldr	r1, [r3, #4]
1000be50:	2220      	movs	r2, #32
1000be52:	4391      	bics	r1, r2
1000be54:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000be56:	6859      	ldr	r1, [r3, #4]
1000be58:	430a      	orrs	r2, r1
1000be5a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be5c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000be5e:	e1ee      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000be60:	4bc6      	ldr	r3, [pc, #792]	; (1000c17c <system_peripheral_reset+0x390>)
1000be62:	6859      	ldr	r1, [r3, #4]
1000be64:	2240      	movs	r2, #64	; 0x40
1000be66:	4391      	bics	r1, r2
1000be68:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000be6a:	6859      	ldr	r1, [r3, #4]
1000be6c:	430a      	orrs	r2, r1
1000be6e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be70:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000be72:	e1e4      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000be74:	4bc1      	ldr	r3, [pc, #772]	; (1000c17c <system_peripheral_reset+0x390>)
1000be76:	6859      	ldr	r1, [r3, #4]
1000be78:	2280      	movs	r2, #128	; 0x80
1000be7a:	4391      	bics	r1, r2
1000be7c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000be7e:	6859      	ldr	r1, [r3, #4]
1000be80:	430a      	orrs	r2, r1
1000be82:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be84:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000be86:	e1da      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000be88:	4bbc      	ldr	r3, [pc, #752]	; (1000c17c <system_peripheral_reset+0x390>)
1000be8a:	6859      	ldr	r1, [r3, #4]
1000be8c:	4abc      	ldr	r2, [pc, #752]	; (1000c180 <system_peripheral_reset+0x394>)
1000be8e:	400a      	ands	r2, r1
1000be90:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000be92:	685a      	ldr	r2, [r3, #4]
1000be94:	2180      	movs	r1, #128	; 0x80
1000be96:	0049      	lsls	r1, r1, #1
1000be98:	430a      	orrs	r2, r1
1000be9a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be9c:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000be9e:	e1ce      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bea0:	4bb6      	ldr	r3, [pc, #728]	; (1000c17c <system_peripheral_reset+0x390>)
1000bea2:	6859      	ldr	r1, [r3, #4]
1000bea4:	4ab7      	ldr	r2, [pc, #732]	; (1000c184 <system_peripheral_reset+0x398>)
1000bea6:	400a      	ands	r2, r1
1000bea8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000beaa:	685a      	ldr	r2, [r3, #4]
1000beac:	2180      	movs	r1, #128	; 0x80
1000beae:	0089      	lsls	r1, r1, #2
1000beb0:	430a      	orrs	r2, r1
1000beb2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000beb4:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000beb6:	e1c2      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000beb8:	4bb0      	ldr	r3, [pc, #704]	; (1000c17c <system_peripheral_reset+0x390>)
1000beba:	6859      	ldr	r1, [r3, #4]
1000bebc:	4ab2      	ldr	r2, [pc, #712]	; (1000c188 <system_peripheral_reset+0x39c>)
1000bebe:	400a      	ands	r2, r1
1000bec0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bec2:	685a      	ldr	r2, [r3, #4]
1000bec4:	2180      	movs	r1, #128	; 0x80
1000bec6:	00c9      	lsls	r1, r1, #3
1000bec8:	430a      	orrs	r2, r1
1000beca:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000becc:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000bece:	e1b6      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bed0:	4baa      	ldr	r3, [pc, #680]	; (1000c17c <system_peripheral_reset+0x390>)
1000bed2:	6859      	ldr	r1, [r3, #4]
1000bed4:	4aad      	ldr	r2, [pc, #692]	; (1000c18c <system_peripheral_reset+0x3a0>)
1000bed6:	400a      	ands	r2, r1
1000bed8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000beda:	685a      	ldr	r2, [r3, #4]
1000bedc:	2180      	movs	r1, #128	; 0x80
1000bede:	0109      	lsls	r1, r1, #4
1000bee0:	430a      	orrs	r2, r1
1000bee2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bee4:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000bee6:	e1aa      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bee8:	4ba4      	ldr	r3, [pc, #656]	; (1000c17c <system_peripheral_reset+0x390>)
1000beea:	6859      	ldr	r1, [r3, #4]
1000beec:	4aa8      	ldr	r2, [pc, #672]	; (1000c190 <system_peripheral_reset+0x3a4>)
1000beee:	400a      	ands	r2, r1
1000bef0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bef2:	685a      	ldr	r2, [r3, #4]
1000bef4:	2180      	movs	r1, #128	; 0x80
1000bef6:	0149      	lsls	r1, r1, #5
1000bef8:	430a      	orrs	r2, r1
1000befa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000befc:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000befe:	e19e      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bf00:	4b9e      	ldr	r3, [pc, #632]	; (1000c17c <system_peripheral_reset+0x390>)
1000bf02:	6859      	ldr	r1, [r3, #4]
1000bf04:	4aa3      	ldr	r2, [pc, #652]	; (1000c194 <system_peripheral_reset+0x3a8>)
1000bf06:	400a      	ands	r2, r1
1000bf08:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bf0a:	685a      	ldr	r2, [r3, #4]
1000bf0c:	2180      	movs	r1, #128	; 0x80
1000bf0e:	0189      	lsls	r1, r1, #6
1000bf10:	430a      	orrs	r2, r1
1000bf12:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf14:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000bf16:	e192      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bf18:	4b98      	ldr	r3, [pc, #608]	; (1000c17c <system_peripheral_reset+0x390>)
1000bf1a:	6859      	ldr	r1, [r3, #4]
1000bf1c:	4a9e      	ldr	r2, [pc, #632]	; (1000c198 <system_peripheral_reset+0x3ac>)
1000bf1e:	400a      	ands	r2, r1
1000bf20:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bf22:	685a      	ldr	r2, [r3, #4]
1000bf24:	2180      	movs	r1, #128	; 0x80
1000bf26:	01c9      	lsls	r1, r1, #7
1000bf28:	430a      	orrs	r2, r1
1000bf2a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf2c:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000bf2e:	e186      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bf30:	4b92      	ldr	r3, [pc, #584]	; (1000c17c <system_peripheral_reset+0x390>)
1000bf32:	6859      	ldr	r1, [r3, #4]
1000bf34:	4a99      	ldr	r2, [pc, #612]	; (1000c19c <system_peripheral_reset+0x3b0>)
1000bf36:	400a      	ands	r2, r1
1000bf38:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bf3a:	685a      	ldr	r2, [r3, #4]
1000bf3c:	2180      	movs	r1, #128	; 0x80
1000bf3e:	0209      	lsls	r1, r1, #8
1000bf40:	430a      	orrs	r2, r1
1000bf42:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf44:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000bf46:	e17a      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bf48:	4b8c      	ldr	r3, [pc, #560]	; (1000c17c <system_peripheral_reset+0x390>)
1000bf4a:	6859      	ldr	r1, [r3, #4]
1000bf4c:	4a94      	ldr	r2, [pc, #592]	; (1000c1a0 <system_peripheral_reset+0x3b4>)
1000bf4e:	400a      	ands	r2, r1
1000bf50:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bf52:	685a      	ldr	r2, [r3, #4]
1000bf54:	2180      	movs	r1, #128	; 0x80
1000bf56:	0249      	lsls	r1, r1, #9
1000bf58:	430a      	orrs	r2, r1
1000bf5a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf5c:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000bf5e:	e16e      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bf60:	4b86      	ldr	r3, [pc, #536]	; (1000c17c <system_peripheral_reset+0x390>)
1000bf62:	6859      	ldr	r1, [r3, #4]
1000bf64:	4a8f      	ldr	r2, [pc, #572]	; (1000c1a4 <system_peripheral_reset+0x3b8>)
1000bf66:	400a      	ands	r2, r1
1000bf68:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bf6a:	685a      	ldr	r2, [r3, #4]
1000bf6c:	2180      	movs	r1, #128	; 0x80
1000bf6e:	0289      	lsls	r1, r1, #10
1000bf70:	430a      	orrs	r2, r1
1000bf72:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf74:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000bf76:	e162      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bf78:	4b80      	ldr	r3, [pc, #512]	; (1000c17c <system_peripheral_reset+0x390>)
1000bf7a:	6859      	ldr	r1, [r3, #4]
1000bf7c:	4a8a      	ldr	r2, [pc, #552]	; (1000c1a8 <system_peripheral_reset+0x3bc>)
1000bf7e:	400a      	ands	r2, r1
1000bf80:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bf82:	685a      	ldr	r2, [r3, #4]
1000bf84:	2180      	movs	r1, #128	; 0x80
1000bf86:	02c9      	lsls	r1, r1, #11
1000bf88:	430a      	orrs	r2, r1
1000bf8a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf8c:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000bf8e:	e156      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bf90:	4b7a      	ldr	r3, [pc, #488]	; (1000c17c <system_peripheral_reset+0x390>)
1000bf92:	6859      	ldr	r1, [r3, #4]
1000bf94:	4a85      	ldr	r2, [pc, #532]	; (1000c1ac <system_peripheral_reset+0x3c0>)
1000bf96:	400a      	ands	r2, r1
1000bf98:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bf9a:	685a      	ldr	r2, [r3, #4]
1000bf9c:	2180      	movs	r1, #128	; 0x80
1000bf9e:	0309      	lsls	r1, r1, #12
1000bfa0:	430a      	orrs	r2, r1
1000bfa2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfa4:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000bfa6:	e14a      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bfa8:	4b74      	ldr	r3, [pc, #464]	; (1000c17c <system_peripheral_reset+0x390>)
1000bfaa:	6859      	ldr	r1, [r3, #4]
1000bfac:	4a80      	ldr	r2, [pc, #512]	; (1000c1b0 <system_peripheral_reset+0x3c4>)
1000bfae:	400a      	ands	r2, r1
1000bfb0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bfb2:	685a      	ldr	r2, [r3, #4]
1000bfb4:	2180      	movs	r1, #128	; 0x80
1000bfb6:	0349      	lsls	r1, r1, #13
1000bfb8:	430a      	orrs	r2, r1
1000bfba:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfbc:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000bfbe:	e13e      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bfc0:	4b6e      	ldr	r3, [pc, #440]	; (1000c17c <system_peripheral_reset+0x390>)
1000bfc2:	6859      	ldr	r1, [r3, #4]
1000bfc4:	4a7b      	ldr	r2, [pc, #492]	; (1000c1b4 <system_peripheral_reset+0x3c8>)
1000bfc6:	400a      	ands	r2, r1
1000bfc8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bfca:	685a      	ldr	r2, [r3, #4]
1000bfcc:	2180      	movs	r1, #128	; 0x80
1000bfce:	0389      	lsls	r1, r1, #14
1000bfd0:	430a      	orrs	r2, r1
1000bfd2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfd4:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000bfd6:	e132      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bfd8:	4b68      	ldr	r3, [pc, #416]	; (1000c17c <system_peripheral_reset+0x390>)
1000bfda:	6859      	ldr	r1, [r3, #4]
1000bfdc:	4a76      	ldr	r2, [pc, #472]	; (1000c1b8 <system_peripheral_reset+0x3cc>)
1000bfde:	400a      	ands	r2, r1
1000bfe0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bfe2:	685a      	ldr	r2, [r3, #4]
1000bfe4:	2180      	movs	r1, #128	; 0x80
1000bfe6:	03c9      	lsls	r1, r1, #15
1000bfe8:	430a      	orrs	r2, r1
1000bfea:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfec:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000bfee:	e126      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bff0:	4b62      	ldr	r3, [pc, #392]	; (1000c17c <system_peripheral_reset+0x390>)
1000bff2:	6859      	ldr	r1, [r3, #4]
1000bff4:	4a71      	ldr	r2, [pc, #452]	; (1000c1bc <system_peripheral_reset+0x3d0>)
1000bff6:	400a      	ands	r2, r1
1000bff8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bffa:	685a      	ldr	r2, [r3, #4]
1000bffc:	2180      	movs	r1, #128	; 0x80
1000bffe:	0409      	lsls	r1, r1, #16
1000c000:	430a      	orrs	r2, r1
1000c002:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c004:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000c006:	e11a      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c008:	4b5c      	ldr	r3, [pc, #368]	; (1000c17c <system_peripheral_reset+0x390>)
1000c00a:	6859      	ldr	r1, [r3, #4]
1000c00c:	4a6c      	ldr	r2, [pc, #432]	; (1000c1c0 <system_peripheral_reset+0x3d4>)
1000c00e:	400a      	ands	r2, r1
1000c010:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c012:	685a      	ldr	r2, [r3, #4]
1000c014:	2180      	movs	r1, #128	; 0x80
1000c016:	0449      	lsls	r1, r1, #17
1000c018:	430a      	orrs	r2, r1
1000c01a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c01c:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000c01e:	e10e      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c020:	4b56      	ldr	r3, [pc, #344]	; (1000c17c <system_peripheral_reset+0x390>)
1000c022:	6859      	ldr	r1, [r3, #4]
1000c024:	4a67      	ldr	r2, [pc, #412]	; (1000c1c4 <system_peripheral_reset+0x3d8>)
1000c026:	400a      	ands	r2, r1
1000c028:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c02a:	685a      	ldr	r2, [r3, #4]
1000c02c:	2180      	movs	r1, #128	; 0x80
1000c02e:	0489      	lsls	r1, r1, #18
1000c030:	430a      	orrs	r2, r1
1000c032:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c034:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000c036:	e102      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c038:	4b50      	ldr	r3, [pc, #320]	; (1000c17c <system_peripheral_reset+0x390>)
1000c03a:	6859      	ldr	r1, [r3, #4]
1000c03c:	4a62      	ldr	r2, [pc, #392]	; (1000c1c8 <system_peripheral_reset+0x3dc>)
1000c03e:	400a      	ands	r2, r1
1000c040:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c042:	685a      	ldr	r2, [r3, #4]
1000c044:	2180      	movs	r1, #128	; 0x80
1000c046:	04c9      	lsls	r1, r1, #19
1000c048:	430a      	orrs	r2, r1
1000c04a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c04c:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000c04e:	e0f6      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c050:	4b4a      	ldr	r3, [pc, #296]	; (1000c17c <system_peripheral_reset+0x390>)
1000c052:	6859      	ldr	r1, [r3, #4]
1000c054:	4a5d      	ldr	r2, [pc, #372]	; (1000c1cc <system_peripheral_reset+0x3e0>)
1000c056:	400a      	ands	r2, r1
1000c058:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c05a:	685a      	ldr	r2, [r3, #4]
1000c05c:	2180      	movs	r1, #128	; 0x80
1000c05e:	0509      	lsls	r1, r1, #20
1000c060:	430a      	orrs	r2, r1
1000c062:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c064:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000c066:	e0ea      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c068:	4b44      	ldr	r3, [pc, #272]	; (1000c17c <system_peripheral_reset+0x390>)
1000c06a:	6859      	ldr	r1, [r3, #4]
1000c06c:	4a58      	ldr	r2, [pc, #352]	; (1000c1d0 <system_peripheral_reset+0x3e4>)
1000c06e:	400a      	ands	r2, r1
1000c070:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c072:	685a      	ldr	r2, [r3, #4]
1000c074:	2180      	movs	r1, #128	; 0x80
1000c076:	0549      	lsls	r1, r1, #21
1000c078:	430a      	orrs	r2, r1
1000c07a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c07c:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000c07e:	e0de      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c080:	4b3e      	ldr	r3, [pc, #248]	; (1000c17c <system_peripheral_reset+0x390>)
1000c082:	6859      	ldr	r1, [r3, #4]
1000c084:	4a53      	ldr	r2, [pc, #332]	; (1000c1d4 <system_peripheral_reset+0x3e8>)
1000c086:	400a      	ands	r2, r1
1000c088:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c08a:	685a      	ldr	r2, [r3, #4]
1000c08c:	2180      	movs	r1, #128	; 0x80
1000c08e:	0589      	lsls	r1, r1, #22
1000c090:	430a      	orrs	r2, r1
1000c092:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c094:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000c096:	e0d2      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c098:	4b38      	ldr	r3, [pc, #224]	; (1000c17c <system_peripheral_reset+0x390>)
1000c09a:	6859      	ldr	r1, [r3, #4]
1000c09c:	4a4e      	ldr	r2, [pc, #312]	; (1000c1d8 <system_peripheral_reset+0x3ec>)
1000c09e:	400a      	ands	r2, r1
1000c0a0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c0a2:	685a      	ldr	r2, [r3, #4]
1000c0a4:	2180      	movs	r1, #128	; 0x80
1000c0a6:	05c9      	lsls	r1, r1, #23
1000c0a8:	430a      	orrs	r2, r1
1000c0aa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0ac:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000c0ae:	e0c6      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c0b0:	4a32      	ldr	r2, [pc, #200]	; (1000c17c <system_peripheral_reset+0x390>)
1000c0b2:	6853      	ldr	r3, [r2, #4]
1000c0b4:	005b      	lsls	r3, r3, #1
1000c0b6:	085b      	lsrs	r3, r3, #1
1000c0b8:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c0ba:	6853      	ldr	r3, [r2, #4]
1000c0bc:	2180      	movs	r1, #128	; 0x80
1000c0be:	0609      	lsls	r1, r1, #24
1000c0c0:	430b      	orrs	r3, r1
1000c0c2:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0c4:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000c0c6:	e0ba      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c0c8:	4b2c      	ldr	r3, [pc, #176]	; (1000c17c <system_peripheral_reset+0x390>)
1000c0ca:	891a      	ldrh	r2, [r3, #8]
1000c0cc:	2101      	movs	r1, #1
1000c0ce:	438a      	bics	r2, r1
1000c0d0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c0d2:	8919      	ldrh	r1, [r3, #8]
1000c0d4:	2201      	movs	r2, #1
1000c0d6:	430a      	orrs	r2, r1
1000c0d8:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0da:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000c0dc:	e0af      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c0de:	4b27      	ldr	r3, [pc, #156]	; (1000c17c <system_peripheral_reset+0x390>)
1000c0e0:	891a      	ldrh	r2, [r3, #8]
1000c0e2:	2102      	movs	r1, #2
1000c0e4:	438a      	bics	r2, r1
1000c0e6:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c0e8:	8919      	ldrh	r1, [r3, #8]
1000c0ea:	2202      	movs	r2, #2
1000c0ec:	430a      	orrs	r2, r1
1000c0ee:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0f0:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000c0f2:	e0a4      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c0f4:	4b21      	ldr	r3, [pc, #132]	; (1000c17c <system_peripheral_reset+0x390>)
1000c0f6:	891a      	ldrh	r2, [r3, #8]
1000c0f8:	2104      	movs	r1, #4
1000c0fa:	438a      	bics	r2, r1
1000c0fc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c0fe:	8919      	ldrh	r1, [r3, #8]
1000c100:	2204      	movs	r2, #4
1000c102:	430a      	orrs	r2, r1
1000c104:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c106:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000c108:	e099      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c10a:	4b1c      	ldr	r3, [pc, #112]	; (1000c17c <system_peripheral_reset+0x390>)
1000c10c:	891a      	ldrh	r2, [r3, #8]
1000c10e:	2108      	movs	r1, #8
1000c110:	438a      	bics	r2, r1
1000c112:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c114:	8919      	ldrh	r1, [r3, #8]
1000c116:	2208      	movs	r2, #8
1000c118:	430a      	orrs	r2, r1
1000c11a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c11c:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000c11e:	e08e      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c120:	4b16      	ldr	r3, [pc, #88]	; (1000c17c <system_peripheral_reset+0x390>)
1000c122:	891a      	ldrh	r2, [r3, #8]
1000c124:	2110      	movs	r1, #16
1000c126:	438a      	bics	r2, r1
1000c128:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c12a:	8919      	ldrh	r1, [r3, #8]
1000c12c:	2210      	movs	r2, #16
1000c12e:	430a      	orrs	r2, r1
1000c130:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c132:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000c134:	e083      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c136:	4b11      	ldr	r3, [pc, #68]	; (1000c17c <system_peripheral_reset+0x390>)
1000c138:	891a      	ldrh	r2, [r3, #8]
1000c13a:	2120      	movs	r1, #32
1000c13c:	438a      	bics	r2, r1
1000c13e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c140:	8919      	ldrh	r1, [r3, #8]
1000c142:	2220      	movs	r2, #32
1000c144:	430a      	orrs	r2, r1
1000c146:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c148:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000c14a:	e078      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c14c:	4b0b      	ldr	r3, [pc, #44]	; (1000c17c <system_peripheral_reset+0x390>)
1000c14e:	891a      	ldrh	r2, [r3, #8]
1000c150:	2140      	movs	r1, #64	; 0x40
1000c152:	438a      	bics	r2, r1
1000c154:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c156:	8919      	ldrh	r1, [r3, #8]
1000c158:	2240      	movs	r2, #64	; 0x40
1000c15a:	430a      	orrs	r2, r1
1000c15c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c15e:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000c160:	e06d      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c162:	4b06      	ldr	r3, [pc, #24]	; (1000c17c <system_peripheral_reset+0x390>)
1000c164:	891a      	ldrh	r2, [r3, #8]
1000c166:	2180      	movs	r1, #128	; 0x80
1000c168:	438a      	bics	r2, r1
1000c16a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c16c:	8919      	ldrh	r1, [r3, #8]
1000c16e:	2280      	movs	r2, #128	; 0x80
1000c170:	430a      	orrs	r2, r1
1000c172:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c174:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000c176:	e062      	b.n	1000c23e <system_peripheral_reset+0x452>
1000c178:	10011e8c 	.word	0x10011e8c
1000c17c:	4000b000 	.word	0x4000b000
1000c180:	fffffeff 	.word	0xfffffeff
1000c184:	fffffdff 	.word	0xfffffdff
1000c188:	fffffbff 	.word	0xfffffbff
1000c18c:	fffff7ff 	.word	0xfffff7ff
1000c190:	ffffefff 	.word	0xffffefff
1000c194:	ffffdfff 	.word	0xffffdfff
1000c198:	ffffbfff 	.word	0xffffbfff
1000c19c:	ffff7fff 	.word	0xffff7fff
1000c1a0:	fffeffff 	.word	0xfffeffff
1000c1a4:	fffdffff 	.word	0xfffdffff
1000c1a8:	fffbffff 	.word	0xfffbffff
1000c1ac:	fff7ffff 	.word	0xfff7ffff
1000c1b0:	ffefffff 	.word	0xffefffff
1000c1b4:	ffdfffff 	.word	0xffdfffff
1000c1b8:	ffbfffff 	.word	0xffbfffff
1000c1bc:	ff7fffff 	.word	0xff7fffff
1000c1c0:	feffffff 	.word	0xfeffffff
1000c1c4:	fdffffff 	.word	0xfdffffff
1000c1c8:	fbffffff 	.word	0xfbffffff
1000c1cc:	f7ffffff 	.word	0xf7ffffff
1000c1d0:	efffffff 	.word	0xefffffff
1000c1d4:	dfffffff 	.word	0xdfffffff
1000c1d8:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c1dc:	4b18      	ldr	r3, [pc, #96]	; (1000c240 <system_peripheral_reset+0x454>)
1000c1de:	8919      	ldrh	r1, [r3, #8]
1000c1e0:	4a18      	ldr	r2, [pc, #96]	; (1000c244 <system_peripheral_reset+0x458>)
1000c1e2:	400a      	ands	r2, r1
1000c1e4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c1e6:	8919      	ldrh	r1, [r3, #8]
1000c1e8:	2280      	movs	r2, #128	; 0x80
1000c1ea:	0052      	lsls	r2, r2, #1
1000c1ec:	430a      	orrs	r2, r1
1000c1ee:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1f0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000c1f2:	e024      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c1f4:	4b12      	ldr	r3, [pc, #72]	; (1000c240 <system_peripheral_reset+0x454>)
1000c1f6:	8919      	ldrh	r1, [r3, #8]
1000c1f8:	4a13      	ldr	r2, [pc, #76]	; (1000c248 <system_peripheral_reset+0x45c>)
1000c1fa:	400a      	ands	r2, r1
1000c1fc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c1fe:	8919      	ldrh	r1, [r3, #8]
1000c200:	2280      	movs	r2, #128	; 0x80
1000c202:	0092      	lsls	r2, r2, #2
1000c204:	430a      	orrs	r2, r1
1000c206:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c208:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000c20a:	e018      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c20c:	4b0c      	ldr	r3, [pc, #48]	; (1000c240 <system_peripheral_reset+0x454>)
1000c20e:	8919      	ldrh	r1, [r3, #8]
1000c210:	4a0e      	ldr	r2, [pc, #56]	; (1000c24c <system_peripheral_reset+0x460>)
1000c212:	400a      	ands	r2, r1
1000c214:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c216:	8919      	ldrh	r1, [r3, #8]
1000c218:	2280      	movs	r2, #128	; 0x80
1000c21a:	00d2      	lsls	r2, r2, #3
1000c21c:	430a      	orrs	r2, r1
1000c21e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c220:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000c222:	e00c      	b.n	1000c23e <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c224:	4b06      	ldr	r3, [pc, #24]	; (1000c240 <system_peripheral_reset+0x454>)
1000c226:	8919      	ldrh	r1, [r3, #8]
1000c228:	4a09      	ldr	r2, [pc, #36]	; (1000c250 <system_peripheral_reset+0x464>)
1000c22a:	400a      	ands	r2, r1
1000c22c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c22e:	8919      	ldrh	r1, [r3, #8]
1000c230:	2280      	movs	r2, #128	; 0x80
1000c232:	0112      	lsls	r2, r2, #4
1000c234:	430a      	orrs	r2, r1
1000c236:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c238:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000c23a:	e000      	b.n	1000c23e <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c23c:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000c23e:	bd00      	pop	{pc}
1000c240:	4000b000 	.word	0x4000b000
1000c244:	fffffeff 	.word	0xfffffeff
1000c248:	fffffdff 	.word	0xfffffdff
1000c24c:	fffffbff 	.word	0xfffffbff
1000c250:	fffff7ff 	.word	0xfffff7ff

1000c254 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000c254:	2380      	movs	r3, #128	; 0x80
1000c256:	04db      	lsls	r3, r3, #19
1000c258:	469c      	mov	ip, r3
1000c25a:	4460      	add	r0, ip
1000c25c:	0080      	lsls	r0, r0, #2
1000c25e:	6001      	str	r1, [r0, #0]
}
1000c260:	4770      	bx	lr
1000c262:	46c0      	nop			; (mov r8, r8)

1000c264 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
1000c264:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000c266:	4a06      	ldr	r2, [pc, #24]	; (1000c280 <_sbrk+0x1c>)
1000c268:	6812      	ldr	r2, [r2, #0]
1000c26a:	2a00      	cmp	r2, #0
1000c26c:	d102      	bne.n	1000c274 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
1000c26e:	4905      	ldr	r1, [pc, #20]	; (1000c284 <_sbrk+0x20>)
1000c270:	4a03      	ldr	r2, [pc, #12]	; (1000c280 <_sbrk+0x1c>)
1000c272:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000c274:	4a02      	ldr	r2, [pc, #8]	; (1000c280 <_sbrk+0x1c>)
1000c276:	6810      	ldr	r0, [r2, #0]

	heap += incr;
1000c278:	18c3      	adds	r3, r0, r3
1000c27a:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
1000c27c:	4770      	bx	lr
1000c27e:	46c0      	nop			; (mov r8, r8)
1000c280:	10013b4c 	.word	0x10013b4c
1000c284:	10015620 	.word	0x10015620

1000c288 <_close>:
}

extern int _close(int file)
{
	return -1;
}
1000c288:	2001      	movs	r0, #1
1000c28a:	4240      	negs	r0, r0
1000c28c:	4770      	bx	lr
1000c28e:	46c0      	nop			; (mov r8, r8)

1000c290 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000c290:	2380      	movs	r3, #128	; 0x80
1000c292:	019b      	lsls	r3, r3, #6
1000c294:	604b      	str	r3, [r1, #4]

	return 0;
}
1000c296:	2000      	movs	r0, #0
1000c298:	4770      	bx	lr
1000c29a:	46c0      	nop			; (mov r8, r8)

1000c29c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000c29c:	2001      	movs	r0, #1
1000c29e:	4770      	bx	lr

1000c2a0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
1000c2a0:	2000      	movs	r0, #0
1000c2a2:	4770      	bx	lr

1000c2a4 <interrupt_cb>:
    dualtimer_init(&config_dualtimer);
    dualtimer_disable(DUALTIMER_TIMER1);
    dualtimer_disable(DUALTIMER_TIMER2);
}
void interrupt_cb(void)
{
1000c2a4:	b510      	push	{r4, lr}
    gpio_disable_callback(PIN_AO_GPIO_2);
1000c2a6:	201d      	movs	r0, #29
1000c2a8:	4b05      	ldr	r3, [pc, #20]	; (1000c2c0 <interrupt_cb+0x1c>)
1000c2aa:	4798      	blx	r3
    imu_interrupt = true;
1000c2ac:	2201      	movs	r2, #1
1000c2ae:	4b05      	ldr	r3, [pc, #20]	; (1000c2c4 <interrupt_cb+0x20>)
1000c2b0:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(PIN_AO_GPIO_2, GPIO_CALLBACK_RISING, NULL, 0);
1000c2b2:	2300      	movs	r3, #0
1000c2b4:	2200      	movs	r2, #0
1000c2b6:	2102      	movs	r1, #2
1000c2b8:	201d      	movs	r0, #29
1000c2ba:	4c03      	ldr	r4, [pc, #12]	; (1000c2c8 <interrupt_cb+0x24>)
1000c2bc:	47a0      	blx	r4
}
1000c2be:	bd10      	pop	{r4, pc}
1000c2c0:	1000b755 	.word	0x1000b755
1000c2c4:	10013b50 	.word	0x10013b50
1000c2c8:	1000a881 	.word	0x1000a881

1000c2cc <configure_i2c_master>:
struct i2c_master_module i2c_master_instance;
volatile bool imu_interrupt = false;
//! [dev_inst]

void configure_i2c_master(void)
{
1000c2cc:	b530      	push	{r4, r5, lr}
1000c2ce:	b087      	sub	sp, #28
	/* Initialize config structure and software module. */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
1000c2d0:	ac01      	add	r4, sp, #4
1000c2d2:	0020      	movs	r0, r4
1000c2d4:	4b0f      	ldr	r3, [pc, #60]	; (1000c314 <configure_i2c_master+0x48>)
1000c2d6:	4798      	blx	r3
    config_i2c_master.clock_source = I2C_CLK_INPUT_0;
1000c2d8:	2300      	movs	r3, #0
1000c2da:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = 65; // 26 MHz / 65 = 400000
1000c2dc:	3341      	adds	r3, #65	; 0x41
1000c2de:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = PIN_LP_GPIO_8;
1000c2e0:	3b39      	subs	r3, #57	; 0x39
1000c2e2:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = PIN_LP_GPIO_9;
1000c2e4:	3301      	adds	r3, #1
1000c2e6:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
1000c2e8:	3b07      	subs	r3, #7
1000c2ea:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
1000c2ec:	6123      	str	r3, [r4, #16]
	/* Initialize and enable device with config, and enable i2c. */
	while(i2c_master_init(&i2c_master_instance, I2C0, &config_i2c_master) != STATUS_OK);
1000c2ee:	4d0a      	ldr	r5, [pc, #40]	; (1000c318 <configure_i2c_master+0x4c>)
1000c2f0:	4c0a      	ldr	r4, [pc, #40]	; (1000c31c <configure_i2c_master+0x50>)
1000c2f2:	aa01      	add	r2, sp, #4
1000c2f4:	490a      	ldr	r1, [pc, #40]	; (1000c320 <configure_i2c_master+0x54>)
1000c2f6:	0028      	movs	r0, r5
1000c2f8:	47a0      	blx	r4
1000c2fa:	2800      	cmp	r0, #0
1000c2fc:	d1f9      	bne.n	1000c2f2 <configure_i2c_master+0x26>
	
	i2c_enable(i2c_master_instance.hw);
1000c2fe:	4b06      	ldr	r3, [pc, #24]	; (1000c318 <configure_i2c_master+0x4c>)
1000c300:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000c302:	2128      	movs	r1, #40	; 0x28
1000c304:	5c53      	ldrb	r3, [r2, r1]
1000c306:	07db      	lsls	r3, r3, #31
1000c308:	d4fc      	bmi.n	1000c304 <configure_i2c_master+0x38>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
1000c30a:	2301      	movs	r3, #1
1000c30c:	7513      	strb	r3, [r2, #20]
}
1000c30e:	b007      	add	sp, #28
1000c310:	bd30      	pop	{r4, r5, pc}
1000c312:	46c0      	nop			; (mov r8, r8)
1000c314:	1000b8f9 	.word	0x1000b8f9
1000c318:	10014898 	.word	0x10014898
1000c31c:	1000b911 	.word	0x1000b911
1000c320:	40003000 	.word	0x40003000

1000c324 <init_dualtimer>:

void init_dualtimer(void)
{
1000c324:	b510      	push	{r4, lr}
1000c326:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000c328:	a801      	add	r0, sp, #4
1000c32a:	4b07      	ldr	r3, [pc, #28]	; (1000c348 <init_dualtimer+0x24>)
1000c32c:	4798      	blx	r3
    
    config_dualtimer.timer1.load_value = 26000;
1000c32e:	4b07      	ldr	r3, [pc, #28]	; (1000c34c <init_dualtimer+0x28>)
1000c330:	9303      	str	r3, [sp, #12]
    config_dualtimer.timer2.load_value = 26000;
1000c332:	9306      	str	r3, [sp, #24]
    
    dualtimer_init(&config_dualtimer);
1000c334:	a801      	add	r0, sp, #4
1000c336:	4b06      	ldr	r3, [pc, #24]	; (1000c350 <init_dualtimer+0x2c>)
1000c338:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000c33a:	2000      	movs	r0, #0
1000c33c:	4c05      	ldr	r4, [pc, #20]	; (1000c354 <init_dualtimer+0x30>)
1000c33e:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
1000c340:	2001      	movs	r0, #1
1000c342:	47a0      	blx	r4
}
1000c344:	b008      	add	sp, #32
1000c346:	bd10      	pop	{r4, pc}
1000c348:	10008199 	.word	0x10008199
1000c34c:	00006590 	.word	0x00006590
1000c350:	10008205 	.word	0x10008205
1000c354:	100081e1 	.word	0x100081e1

1000c358 <main>:
    int_param.pin = PIN_AO_GPIO_0;
    mpu_init(&int_param);
}

int main(void)
{
1000c358:	b500      	push	{lr}
1000c35a:	b083      	sub	sp, #12
	//system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
 	//! [init]
    platform_driver_init();
1000c35c:	4b13      	ldr	r3, [pc, #76]	; (1000c3ac <main+0x54>)
1000c35e:	4798      	blx	r3
    gpio_init();
1000c360:	4b13      	ldr	r3, [pc, #76]	; (1000c3b0 <main+0x58>)
1000c362:	4798      	blx	r3
    acquire_sleep_lock();
1000c364:	4b13      	ldr	r3, [pc, #76]	; (1000c3b4 <main+0x5c>)
1000c366:	4798      	blx	r3
    serial_console_init();
1000c368:	4b13      	ldr	r3, [pc, #76]	; (1000c3b8 <main+0x60>)
1000c36a:	4798      	blx	r3
    ble_device_init(NULL);
1000c36c:	2000      	movs	r0, #0
1000c36e:	4b13      	ldr	r3, [pc, #76]	; (1000c3bc <main+0x64>)
1000c370:	4798      	blx	r3

    init_dualtimer();
1000c372:	4b13      	ldr	r3, [pc, #76]	; (1000c3c0 <main+0x68>)
1000c374:	4798      	blx	r3
    delay_init();
1000c376:	4b13      	ldr	r3, [pc, #76]	; (1000c3c4 <main+0x6c>)
1000c378:	4798      	blx	r3
}

static void configure_imu_gpio(void)
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000c37a:	4668      	mov	r0, sp
1000c37c:	4b12      	ldr	r3, [pc, #72]	; (1000c3c8 <main+0x70>)
1000c37e:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000c380:	2300      	movs	r3, #0
1000c382:	466a      	mov	r2, sp
1000c384:	7013      	strb	r3, [r2, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000c386:	3302      	adds	r3, #2
1000c388:	7053      	strb	r3, [r2, #1]
    config_gpio_pin.aon_wakeup = true;
1000c38a:	3b01      	subs	r3, #1
1000c38c:	70d3      	strb	r3, [r2, #3]
    gpio_pin_set_config(PIN_AO_GPIO_2, &config_gpio_pin);
1000c38e:	4669      	mov	r1, sp
1000c390:	201d      	movs	r0, #29
1000c392:	4b0e      	ldr	r3, [pc, #56]	; (1000c3cc <main+0x74>)
1000c394:	4798      	blx	r3
    init_dualtimer();
    delay_init();
	//! [init]
	//! [config]
    configure_imu_gpio();
	configure_i2c_master();
1000c396:	4b0e      	ldr	r3, [pc, #56]	; (1000c3d0 <main+0x78>)
1000c398:	4798      	blx	r3
    gpio_pin_set_config(PIN_AO_GPIO_2, &config_gpio_pin);
}
static void init_imu(void)
{
    struct int_param_s int_param;
    int_param.cb = interrupt_cb;
1000c39a:	4b0e      	ldr	r3, [pc, #56]	; (1000c3d4 <main+0x7c>)
1000c39c:	9300      	str	r3, [sp, #0]
    int_param.pin = PIN_AO_GPIO_0;
1000c39e:	231f      	movs	r3, #31
1000c3a0:	9301      	str	r3, [sp, #4]
    mpu_init(&int_param);
1000c3a2:	4668      	mov	r0, sp
1000c3a4:	4b0c      	ldr	r3, [pc, #48]	; (1000c3d8 <main+0x80>)
1000c3a6:	4798      	blx	r3
1000c3a8:	e7fe      	b.n	1000c3a8 <main+0x50>
1000c3aa:	46c0      	nop			; (mov r8, r8)
1000c3ac:	1000a5d1 	.word	0x1000a5d1
1000c3b0:	1000b791 	.word	0x1000b791
1000c3b4:	1000ab25 	.word	0x1000ab25
1000c3b8:	1000a2c5 	.word	0x1000a2c5
1000c3bc:	10009c25 	.word	0x10009c25
1000c3c0:	1000c325 	.word	0x1000c325
1000c3c4:	100080e9 	.word	0x100080e9
1000c3c8:	1000b371 	.word	0x1000b371
1000c3cc:	1000b381 	.word	0x1000b381
1000c3d0:	1000c2cd 	.word	0x1000c2cd
1000c3d4:	1000c2a5 	.word	0x1000c2a5
1000c3d8:	10008f19 	.word	0x10008f19

1000c3dc <internal_event_post>:
1000c3dc:	b570      	push	{r4, r5, r6, lr}
1000c3de:	4d12      	ldr	r5, [pc, #72]	; (1000c428 <internal_event_post+0x4c>)
1000c3e0:	682c      	ldr	r4, [r5, #0]
1000c3e2:	2c00      	cmp	r4, #0
1000c3e4:	d014      	beq.n	1000c410 <internal_event_post+0x34>
1000c3e6:	6826      	ldr	r6, [r4, #0]
1000c3e8:	60e2      	str	r2, [r4, #12]
1000c3ea:	602e      	str	r6, [r5, #0]
1000c3ec:	2500      	movs	r5, #0
1000c3ee:	4a0f      	ldr	r2, [pc, #60]	; (1000c42c <internal_event_post+0x50>)
1000c3f0:	8123      	strh	r3, [r4, #8]
1000c3f2:	6813      	ldr	r3, [r2, #0]
1000c3f4:	6025      	str	r5, [r4, #0]
1000c3f6:	80a0      	strh	r0, [r4, #4]
1000c3f8:	80e1      	strh	r1, [r4, #6]
1000c3fa:	42ab      	cmp	r3, r5
1000c3fc:	d101      	bne.n	1000c402 <internal_event_post+0x26>
1000c3fe:	6014      	str	r4, [r2, #0]
1000c400:	e011      	b.n	1000c426 <internal_event_post+0x4a>
1000c402:	681a      	ldr	r2, [r3, #0]
1000c404:	2a00      	cmp	r2, #0
1000c406:	d001      	beq.n	1000c40c <internal_event_post+0x30>
1000c408:	1c13      	adds	r3, r2, #0
1000c40a:	e7fa      	b.n	1000c402 <internal_event_post+0x26>
1000c40c:	601c      	str	r4, [r3, #0]
1000c40e:	e00a      	b.n	1000c426 <internal_event_post+0x4a>
1000c410:	b2c4      	uxtb	r4, r0
1000c412:	2c00      	cmp	r4, #0
1000c414:	d107      	bne.n	1000c426 <internal_event_post+0x4a>
1000c416:	4c06      	ldr	r4, [pc, #24]	; (1000c430 <internal_event_post+0x54>)
1000c418:	60e2      	str	r2, [r4, #12]
1000c41a:	2201      	movs	r2, #1
1000c41c:	8123      	strh	r3, [r4, #8]
1000c41e:	4b05      	ldr	r3, [pc, #20]	; (1000c434 <internal_event_post+0x58>)
1000c420:	80a0      	strh	r0, [r4, #4]
1000c422:	80e1      	strh	r1, [r4, #6]
1000c424:	701a      	strb	r2, [r3, #0]
1000c426:	bd70      	pop	{r4, r5, r6, pc}
1000c428:	10013b6c 	.word	0x10013b6c
1000c42c:	10013b68 	.word	0x10013b68
1000c430:	10013b54 	.word	0x10013b54
1000c434:	10013b64 	.word	0x10013b64

1000c438 <internal_event_init>:
1000c438:	b510      	push	{r4, lr}
1000c43a:	4b08      	ldr	r3, [pc, #32]	; (1000c45c <internal_event_init+0x24>)
1000c43c:	0900      	lsrs	r0, r0, #4
1000c43e:	0100      	lsls	r0, r0, #4
1000c440:	681a      	ldr	r2, [r3, #0]
1000c442:	1808      	adds	r0, r1, r0
1000c444:	4281      	cmp	r1, r0
1000c446:	d003      	beq.n	1000c450 <internal_event_init+0x18>
1000c448:	600a      	str	r2, [r1, #0]
1000c44a:	1c0a      	adds	r2, r1, #0
1000c44c:	3110      	adds	r1, #16
1000c44e:	e7f9      	b.n	1000c444 <internal_event_init+0xc>
1000c450:	601a      	str	r2, [r3, #0]
1000c452:	2200      	movs	r2, #0
1000c454:	4b02      	ldr	r3, [pc, #8]	; (1000c460 <internal_event_init+0x28>)
1000c456:	601a      	str	r2, [r3, #0]
1000c458:	bd10      	pop	{r4, pc}
1000c45a:	46c0      	nop			; (mov r8, r8)
1000c45c:	10013b6c 	.word	0x10013b6c
1000c460:	10013b68 	.word	0x10013b68

1000c464 <special_events_handler>:
1000c464:	b538      	push	{r3, r4, r5, lr}
1000c466:	4c1b      	ldr	r4, [pc, #108]	; (1000c4d4 <special_events_handler+0x70>)
1000c468:	1c03      	adds	r3, r0, #0
1000c46a:	8825      	ldrh	r5, [r4, #0]
1000c46c:	1c08      	adds	r0, r1, #0
1000c46e:	1c21      	adds	r1, r4, #0
1000c470:	429d      	cmp	r5, r3
1000c472:	d107      	bne.n	1000c484 <special_events_handler+0x20>
1000c474:	88a5      	ldrh	r5, [r4, #4]
1000c476:	4285      	cmp	r5, r0
1000c478:	d104      	bne.n	1000c484 <special_events_handler+0x20>
1000c47a:	2301      	movs	r3, #1
1000c47c:	425b      	negs	r3, r3
1000c47e:	8023      	strh	r3, [r4, #0]
1000c480:	60a2      	str	r2, [r4, #8]
1000c482:	e009      	b.n	1000c498 <special_events_handler+0x34>
1000c484:	884c      	ldrh	r4, [r1, #2]
1000c486:	429c      	cmp	r4, r3
1000c488:	d10a      	bne.n	1000c4a0 <special_events_handler+0x3c>
1000c48a:	888c      	ldrh	r4, [r1, #4]
1000c48c:	4284      	cmp	r4, r0
1000c48e:	d107      	bne.n	1000c4a0 <special_events_handler+0x3c>
1000c490:	2301      	movs	r3, #1
1000c492:	425b      	negs	r3, r3
1000c494:	804b      	strh	r3, [r1, #2]
1000c496:	608a      	str	r2, [r1, #8]
1000c498:	4b0f      	ldr	r3, [pc, #60]	; (1000c4d8 <special_events_handler+0x74>)
1000c49a:	4798      	blx	r3
1000c49c:	2001      	movs	r0, #1
1000c49e:	e017      	b.n	1000c4d0 <special_events_handler+0x6c>
1000c4a0:	490e      	ldr	r1, [pc, #56]	; (1000c4dc <special_events_handler+0x78>)
1000c4a2:	428b      	cmp	r3, r1
1000c4a4:	d00e      	beq.n	1000c4c4 <special_events_handler+0x60>
1000c4a6:	490e      	ldr	r1, [pc, #56]	; (1000c4e0 <special_events_handler+0x7c>)
1000c4a8:	428b      	cmp	r3, r1
1000c4aa:	d007      	beq.n	1000c4bc <special_events_handler+0x58>
1000c4ac:	490d      	ldr	r1, [pc, #52]	; (1000c4e4 <special_events_handler+0x80>)
1000c4ae:	2000      	movs	r0, #0
1000c4b0:	428b      	cmp	r3, r1
1000c4b2:	d10d      	bne.n	1000c4d0 <special_events_handler+0x6c>
1000c4b4:	1c10      	adds	r0, r2, #0
1000c4b6:	4b0c      	ldr	r3, [pc, #48]	; (1000c4e8 <special_events_handler+0x84>)
1000c4b8:	4798      	blx	r3
1000c4ba:	e7ef      	b.n	1000c49c <special_events_handler+0x38>
1000c4bc:	1c11      	adds	r1, r2, #0
1000c4be:	4b0b      	ldr	r3, [pc, #44]	; (1000c4ec <special_events_handler+0x88>)
1000c4c0:	2200      	movs	r2, #0
1000c4c2:	e002      	b.n	1000c4ca <special_events_handler+0x66>
1000c4c4:	1c11      	adds	r1, r2, #0
1000c4c6:	2200      	movs	r2, #0
1000c4c8:	4b09      	ldr	r3, [pc, #36]	; (1000c4f0 <special_events_handler+0x8c>)
1000c4ca:	4798      	blx	r3
1000c4cc:	4243      	negs	r3, r0
1000c4ce:	4158      	adcs	r0, r3
1000c4d0:	bd38      	pop	{r3, r4, r5, pc}
1000c4d2:	46c0      	nop			; (mov r8, r8)
1000c4d4:	100148a0 	.word	0x100148a0
1000c4d8:	1000d669 	.word	0x1000d669
1000c4dc:	00000e13 	.word	0x00000e13
1000c4e0:	00000e15 	.word	0x00000e15
1000c4e4:	00000e01 	.word	0x00000e01
1000c4e8:	1000d9d9 	.word	0x1000d9d9
1000c4ec:	1000db99 	.word	0x1000db99
1000c4f0:	1000dc71 	.word	0x1000dc71

1000c4f4 <at_ble_event_get>:
1000c4f4:	2300      	movs	r3, #0
1000c4f6:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c4f8:	b087      	sub	sp, #28
1000c4fa:	9204      	str	r2, [sp, #16]
1000c4fc:	7003      	strb	r3, [r0, #0]
1000c4fe:	9b04      	ldr	r3, [sp, #16]
1000c500:	9003      	str	r0, [sp, #12]
1000c502:	3b01      	subs	r3, #1
1000c504:	1c0d      	adds	r5, r1, #0
1000c506:	9305      	str	r3, [sp, #20]
1000c508:	3303      	adds	r3, #3
1000c50a:	d802      	bhi.n	1000c512 <at_ble_event_get+0x1e>
1000c50c:	9804      	ldr	r0, [sp, #16]
1000c50e:	4bae      	ldr	r3, [pc, #696]	; (1000c7c8 <at_ble_event_get+0x2d4>)
1000c510:	4798      	blx	r3
1000c512:	9b05      	ldr	r3, [sp, #20]
1000c514:	4cad      	ldr	r4, [pc, #692]	; (1000c7cc <at_ble_event_get+0x2d8>)
1000c516:	3303      	adds	r3, #3
1000c518:	d902      	bls.n	1000c520 <at_ble_event_get+0x2c>
1000c51a:	2300      	movs	r3, #0
1000c51c:	9302      	str	r3, [sp, #8]
1000c51e:	e015      	b.n	1000c54c <at_ble_event_get+0x58>
1000c520:	2300      	movs	r3, #0
1000c522:	9302      	str	r3, [sp, #8]
1000c524:	6823      	ldr	r3, [r4, #0]
1000c526:	2b00      	cmp	r3, #0
1000c528:	d113      	bne.n	1000c552 <at_ble_event_get+0x5e>
1000c52a:	9b02      	ldr	r3, [sp, #8]
1000c52c:	2bd0      	cmp	r3, #208	; 0xd0
1000c52e:	d100      	bne.n	1000c532 <at_ble_event_get+0x3e>
1000c530:	e2da      	b.n	1000cae8 <at_ble_event_get+0x5f4>
1000c532:	9804      	ldr	r0, [sp, #16]
1000c534:	4ba6      	ldr	r3, [pc, #664]	; (1000c7d0 <at_ble_event_get+0x2dc>)
1000c536:	4798      	blx	r3
1000c538:	9002      	str	r0, [sp, #8]
1000c53a:	2802      	cmp	r0, #2
1000c53c:	d1f2      	bne.n	1000c524 <at_ble_event_get+0x30>
1000c53e:	e03f      	b.n	1000c5c0 <at_ble_event_get+0xcc>
1000c540:	9804      	ldr	r0, [sp, #16]
1000c542:	4ba3      	ldr	r3, [pc, #652]	; (1000c7d0 <at_ble_event_get+0x2dc>)
1000c544:	4798      	blx	r3
1000c546:	9002      	str	r0, [sp, #8]
1000c548:	2802      	cmp	r0, #2
1000c54a:	d039      	beq.n	1000c5c0 <at_ble_event_get+0xcc>
1000c54c:	6823      	ldr	r3, [r4, #0]
1000c54e:	2b00      	cmp	r3, #0
1000c550:	d0f6      	beq.n	1000c540 <at_ble_event_get+0x4c>
1000c552:	9b02      	ldr	r3, [sp, #8]
1000c554:	2bd0      	cmp	r3, #208	; 0xd0
1000c556:	d100      	bne.n	1000c55a <at_ble_event_get+0x66>
1000c558:	e2c6      	b.n	1000cae8 <at_ble_event_get+0x5f4>
1000c55a:	9b02      	ldr	r3, [sp, #8]
1000c55c:	3b03      	subs	r3, #3
1000c55e:	1e5a      	subs	r2, r3, #1
1000c560:	4193      	sbcs	r3, r2
1000c562:	9a02      	ldr	r2, [sp, #8]
1000c564:	425b      	negs	r3, r3
1000c566:	401a      	ands	r2, r3
1000c568:	6823      	ldr	r3, [r4, #0]
1000c56a:	9202      	str	r2, [sp, #8]
1000c56c:	2b00      	cmp	r3, #0
1000c56e:	d100      	bne.n	1000c572 <at_ble_event_get+0x7e>
1000c570:	e2c2      	b.n	1000caf8 <at_ble_event_get+0x604>
1000c572:	681a      	ldr	r2, [r3, #0]
1000c574:	68de      	ldr	r6, [r3, #12]
1000c576:	6022      	str	r2, [r4, #0]
1000c578:	88da      	ldrh	r2, [r3, #6]
1000c57a:	9201      	str	r2, [sp, #4]
1000c57c:	4a95      	ldr	r2, [pc, #596]	; (1000c7d4 <at_ble_event_get+0x2e0>)
1000c57e:	889c      	ldrh	r4, [r3, #4]
1000c580:	6811      	ldr	r1, [r2, #0]
1000c582:	6013      	str	r3, [r2, #0]
1000c584:	6019      	str	r1, [r3, #0]
1000c586:	4b94      	ldr	r3, [pc, #592]	; (1000c7d8 <at_ble_event_get+0x2e4>)
1000c588:	781b      	ldrb	r3, [r3, #0]
1000c58a:	2b01      	cmp	r3, #1
1000c58c:	d10f      	bne.n	1000c5ae <at_ble_event_get+0xba>
1000c58e:	4b93      	ldr	r3, [pc, #588]	; (1000c7dc <at_ble_event_get+0x2e8>)
1000c590:	4a92      	ldr	r2, [pc, #584]	; (1000c7dc <at_ble_event_get+0x2e8>)
1000c592:	8898      	ldrh	r0, [r3, #4]
1000c594:	88d9      	ldrh	r1, [r3, #6]
1000c596:	68d2      	ldr	r2, [r2, #12]
1000c598:	891b      	ldrh	r3, [r3, #8]
1000c59a:	4f91      	ldr	r7, [pc, #580]	; (1000c7e0 <at_ble_event_get+0x2ec>)
1000c59c:	47b8      	blx	r7
1000c59e:	2210      	movs	r2, #16
1000c5a0:	4b90      	ldr	r3, [pc, #576]	; (1000c7e4 <at_ble_event_get+0x2f0>)
1000c5a2:	488e      	ldr	r0, [pc, #568]	; (1000c7dc <at_ble_event_get+0x2e8>)
1000c5a4:	2100      	movs	r1, #0
1000c5a6:	4798      	blx	r3
1000c5a8:	2300      	movs	r3, #0
1000c5aa:	4a8b      	ldr	r2, [pc, #556]	; (1000c7d8 <at_ble_event_get+0x2e4>)
1000c5ac:	7013      	strb	r3, [r2, #0]
1000c5ae:	9b02      	ldr	r3, [sp, #8]
1000c5b0:	2b00      	cmp	r3, #0
1000c5b2:	d114      	bne.n	1000c5de <at_ble_event_get+0xea>
1000c5b4:	4b8c      	ldr	r3, [pc, #560]	; (1000c7e8 <at_ble_event_get+0x2f4>)
1000c5b6:	429c      	cmp	r4, r3
1000c5b8:	d009      	beq.n	1000c5ce <at_ble_event_get+0xda>
1000c5ba:	4b8c      	ldr	r3, [pc, #560]	; (1000c7ec <at_ble_event_get+0x2f8>)
1000c5bc:	429c      	cmp	r4, r3
1000c5be:	d127      	bne.n	1000c610 <at_ble_event_get+0x11c>
1000c5c0:	233a      	movs	r3, #58	; 0x3a
1000c5c2:	9a03      	ldr	r2, [sp, #12]
1000c5c4:	7013      	strb	r3, [r2, #0]
1000c5c6:	2300      	movs	r3, #0
1000c5c8:	9302      	str	r3, [sp, #8]
1000c5ca:	1c1d      	adds	r5, r3, #0
1000c5cc:	e007      	b.n	1000c5de <at_ble_event_get+0xea>
1000c5ce:	9b01      	ldr	r3, [sp, #4]
1000c5d0:	42a3      	cmp	r3, r4
1000c5d2:	d000      	beq.n	1000c5d6 <at_ble_event_get+0xe2>
1000c5d4:	e28a      	b.n	1000caec <at_ble_event_get+0x5f8>
1000c5d6:	2338      	movs	r3, #56	; 0x38
1000c5d8:	9a03      	ldr	r2, [sp, #12]
1000c5da:	7013      	strb	r3, [r2, #0]
1000c5dc:	602e      	str	r6, [r5, #0]
1000c5de:	9b03      	ldr	r3, [sp, #12]
1000c5e0:	781b      	ldrb	r3, [r3, #0]
1000c5e2:	2b3b      	cmp	r3, #59	; 0x3b
1000c5e4:	d101      	bne.n	1000c5ea <at_ble_event_get+0xf6>
1000c5e6:	4b82      	ldr	r3, [pc, #520]	; (1000c7f0 <at_ble_event_get+0x2fc>)
1000c5e8:	4798      	blx	r3
1000c5ea:	9b03      	ldr	r3, [sp, #12]
1000c5ec:	781b      	ldrb	r3, [r3, #0]
1000c5ee:	2b3b      	cmp	r3, #59	; 0x3b
1000c5f0:	d003      	beq.n	1000c5fa <at_ble_event_get+0x106>
1000c5f2:	9b05      	ldr	r3, [sp, #20]
1000c5f4:	3303      	adds	r3, #3
1000c5f6:	d904      	bls.n	1000c602 <at_ble_event_get+0x10e>
1000c5f8:	e283      	b.n	1000cb02 <at_ble_event_get+0x60e>
1000c5fa:	9b02      	ldr	r3, [sp, #8]
1000c5fc:	2b00      	cmp	r3, #0
1000c5fe:	d088      	beq.n	1000c512 <at_ble_event_get+0x1e>
1000c600:	e7f7      	b.n	1000c5f2 <at_ble_event_get+0xfe>
1000c602:	9b02      	ldr	r3, [sp, #8]
1000c604:	2bd0      	cmp	r3, #208	; 0xd0
1000c606:	d100      	bne.n	1000c60a <at_ble_event_get+0x116>
1000c608:	e27b      	b.n	1000cb02 <at_ble_event_get+0x60e>
1000c60a:	4b7a      	ldr	r3, [pc, #488]	; (1000c7f4 <at_ble_event_get+0x300>)
1000c60c:	4798      	blx	r3
1000c60e:	e278      	b.n	1000cb02 <at_ble_event_get+0x60e>
1000c610:	9b01      	ldr	r3, [sp, #4]
1000c612:	2bbb      	cmp	r3, #187	; 0xbb
1000c614:	d125      	bne.n	1000c662 <at_ble_event_get+0x16e>
1000c616:	2cbb      	cmp	r4, #187	; 0xbb
1000c618:	d123      	bne.n	1000c662 <at_ble_event_get+0x16e>
1000c61a:	466b      	mov	r3, sp
1000c61c:	891b      	ldrh	r3, [r3, #8]
1000c61e:	80ab      	strh	r3, [r5, #4]
1000c620:	78b3      	ldrb	r3, [r6, #2]
1000c622:	7872      	ldrb	r2, [r6, #1]
1000c624:	78f0      	ldrb	r0, [r6, #3]
1000c626:	021b      	lsls	r3, r3, #8
1000c628:	4313      	orrs	r3, r2
1000c62a:	7971      	ldrb	r1, [r6, #5]
1000c62c:	7932      	ldrb	r2, [r6, #4]
1000c62e:	70a8      	strb	r0, [r5, #2]
1000c630:	4871      	ldr	r0, [pc, #452]	; (1000c7f8 <at_ble_event_get+0x304>)
1000c632:	802b      	strh	r3, [r5, #0]
1000c634:	4283      	cmp	r3, r0
1000c636:	d806      	bhi.n	1000c646 <at_ble_event_get+0x152>
1000c638:	4a70      	ldr	r2, [pc, #448]	; (1000c7fc <at_ble_event_get+0x308>)
1000c63a:	4293      	cmp	r3, r2
1000c63c:	d20b      	bcs.n	1000c656 <at_ble_event_get+0x162>
1000c63e:	4a70      	ldr	r2, [pc, #448]	; (1000c800 <at_ble_event_get+0x30c>)
1000c640:	4293      	cmp	r3, r2
1000c642:	d008      	beq.n	1000c656 <at_ble_event_get+0x162>
1000c644:	e009      	b.n	1000c65a <at_ble_event_get+0x166>
1000c646:	486f      	ldr	r0, [pc, #444]	; (1000c804 <at_ble_event_get+0x310>)
1000c648:	4283      	cmp	r3, r0
1000c64a:	d106      	bne.n	1000c65a <at_ble_event_get+0x166>
1000c64c:	020b      	lsls	r3, r1, #8
1000c64e:	4313      	orrs	r3, r2
1000c650:	80ab      	strh	r3, [r5, #4]
1000c652:	2337      	movs	r3, #55	; 0x37
1000c654:	e002      	b.n	1000c65c <at_ble_event_get+0x168>
1000c656:	2336      	movs	r3, #54	; 0x36
1000c658:	e000      	b.n	1000c65c <at_ble_event_get+0x168>
1000c65a:	2300      	movs	r3, #0
1000c65c:	9a03      	ldr	r2, [sp, #12]
1000c65e:	7013      	strb	r3, [r2, #0]
1000c660:	e7bd      	b.n	1000c5de <at_ble_event_get+0xea>
1000c662:	4b69      	ldr	r3, [pc, #420]	; (1000c808 <at_ble_event_get+0x314>)
1000c664:	429c      	cmp	r4, r3
1000c666:	d100      	bne.n	1000c66a <at_ble_event_get+0x176>
1000c668:	e144      	b.n	1000c8f4 <at_ble_event_get+0x400>
1000c66a:	d865      	bhi.n	1000c738 <at_ble_event_get+0x244>
1000c66c:	4b67      	ldr	r3, [pc, #412]	; (1000c80c <at_ble_event_get+0x318>)
1000c66e:	429c      	cmp	r4, r3
1000c670:	d100      	bne.n	1000c674 <at_ble_event_get+0x180>
1000c672:	e1d5      	b.n	1000ca20 <at_ble_event_get+0x52c>
1000c674:	d82f      	bhi.n	1000c6d6 <at_ble_event_get+0x1e2>
1000c676:	4b66      	ldr	r3, [pc, #408]	; (1000c810 <at_ble_event_get+0x31c>)
1000c678:	429c      	cmp	r4, r3
1000c67a:	d100      	bne.n	1000c67e <at_ble_event_get+0x18a>
1000c67c:	e1e0      	b.n	1000ca40 <at_ble_event_get+0x54c>
1000c67e:	d813      	bhi.n	1000c6a8 <at_ble_event_get+0x1b4>
1000c680:	4b64      	ldr	r3, [pc, #400]	; (1000c814 <at_ble_event_get+0x320>)
1000c682:	429c      	cmp	r4, r3
1000c684:	d100      	bne.n	1000c688 <at_ble_event_get+0x194>
1000c686:	e1a3      	b.n	1000c9d0 <at_ble_event_get+0x4dc>
1000c688:	d804      	bhi.n	1000c694 <at_ble_event_get+0x1a0>
1000c68a:	2638      	movs	r6, #56	; 0x38
1000c68c:	42b4      	cmp	r4, r6
1000c68e:	d100      	bne.n	1000c692 <at_ble_event_get+0x19e>
1000c690:	e225      	b.n	1000cade <at_ble_event_get+0x5ea>
1000c692:	e117      	b.n	1000c8c4 <at_ble_event_get+0x3d0>
1000c694:	4b60      	ldr	r3, [pc, #384]	; (1000c818 <at_ble_event_get+0x324>)
1000c696:	429c      	cmp	r4, r3
1000c698:	d100      	bne.n	1000c69c <at_ble_event_get+0x1a8>
1000c69a:	e19f      	b.n	1000c9dc <at_ble_event_get+0x4e8>
1000c69c:	33fe      	adds	r3, #254	; 0xfe
1000c69e:	33ff      	adds	r3, #255	; 0xff
1000c6a0:	429c      	cmp	r4, r3
1000c6a2:	d100      	bne.n	1000c6a6 <at_ble_event_get+0x1b2>
1000c6a4:	e1d3      	b.n	1000ca4e <at_ble_event_get+0x55a>
1000c6a6:	e10d      	b.n	1000c8c4 <at_ble_event_get+0x3d0>
1000c6a8:	4b5c      	ldr	r3, [pc, #368]	; (1000c81c <at_ble_event_get+0x328>)
1000c6aa:	429c      	cmp	r4, r3
1000c6ac:	d100      	bne.n	1000c6b0 <at_ble_event_get+0x1bc>
1000c6ae:	e1a9      	b.n	1000ca04 <at_ble_event_get+0x510>
1000c6b0:	d808      	bhi.n	1000c6c4 <at_ble_event_get+0x1d0>
1000c6b2:	4b5b      	ldr	r3, [pc, #364]	; (1000c820 <at_ble_event_get+0x32c>)
1000c6b4:	429c      	cmp	r4, r3
1000c6b6:	d100      	bne.n	1000c6ba <at_ble_event_get+0x1c6>
1000c6b8:	e196      	b.n	1000c9e8 <at_ble_event_get+0x4f4>
1000c6ba:	4b5a      	ldr	r3, [pc, #360]	; (1000c824 <at_ble_event_get+0x330>)
1000c6bc:	429c      	cmp	r4, r3
1000c6be:	d100      	bne.n	1000c6c2 <at_ble_event_get+0x1ce>
1000c6c0:	e199      	b.n	1000c9f6 <at_ble_event_get+0x502>
1000c6c2:	e0ff      	b.n	1000c8c4 <at_ble_event_get+0x3d0>
1000c6c4:	4b58      	ldr	r3, [pc, #352]	; (1000c828 <at_ble_event_get+0x334>)
1000c6c6:	429c      	cmp	r4, r3
1000c6c8:	d100      	bne.n	1000c6cc <at_ble_event_get+0x1d8>
1000c6ca:	e1a2      	b.n	1000ca12 <at_ble_event_get+0x51e>
1000c6cc:	4b57      	ldr	r3, [pc, #348]	; (1000c82c <at_ble_event_get+0x338>)
1000c6ce:	429c      	cmp	r4, r3
1000c6d0:	d100      	bne.n	1000c6d4 <at_ble_event_get+0x1e0>
1000c6d2:	e1d4      	b.n	1000ca7e <at_ble_event_get+0x58a>
1000c6d4:	e0f6      	b.n	1000c8c4 <at_ble_event_get+0x3d0>
1000c6d6:	4b56      	ldr	r3, [pc, #344]	; (1000c830 <at_ble_event_get+0x33c>)
1000c6d8:	429c      	cmp	r4, r3
1000c6da:	d100      	bne.n	1000c6de <at_ble_event_get+0x1ea>
1000c6dc:	e1c8      	b.n	1000ca70 <at_ble_event_get+0x57c>
1000c6de:	d812      	bhi.n	1000c706 <at_ble_event_get+0x212>
1000c6e0:	4b54      	ldr	r3, [pc, #336]	; (1000c834 <at_ble_event_get+0x340>)
1000c6e2:	429c      	cmp	r4, r3
1000c6e4:	d100      	bne.n	1000c6e8 <at_ble_event_get+0x1f4>
1000c6e6:	e1d1      	b.n	1000ca8c <at_ble_event_get+0x598>
1000c6e8:	d804      	bhi.n	1000c6f4 <at_ble_event_get+0x200>
1000c6ea:	4b53      	ldr	r3, [pc, #332]	; (1000c838 <at_ble_event_get+0x344>)
1000c6ec:	429c      	cmp	r4, r3
1000c6ee:	d100      	bne.n	1000c6f2 <at_ble_event_get+0x1fe>
1000c6f0:	e19b      	b.n	1000ca2a <at_ble_event_get+0x536>
1000c6f2:	e0e7      	b.n	1000c8c4 <at_ble_event_get+0x3d0>
1000c6f4:	4b51      	ldr	r3, [pc, #324]	; (1000c83c <at_ble_event_get+0x348>)
1000c6f6:	429c      	cmp	r4, r3
1000c6f8:	d100      	bne.n	1000c6fc <at_ble_event_get+0x208>
1000c6fa:	e1ad      	b.n	1000ca58 <at_ble_event_get+0x564>
1000c6fc:	4b50      	ldr	r3, [pc, #320]	; (1000c840 <at_ble_event_get+0x34c>)
1000c6fe:	429c      	cmp	r4, r3
1000c700:	d100      	bne.n	1000c704 <at_ble_event_get+0x210>
1000c702:	e1b0      	b.n	1000ca66 <at_ble_event_get+0x572>
1000c704:	e0de      	b.n	1000c8c4 <at_ble_event_get+0x3d0>
1000c706:	4b4f      	ldr	r3, [pc, #316]	; (1000c844 <at_ble_event_get+0x350>)
1000c708:	429c      	cmp	r4, r3
1000c70a:	d100      	bne.n	1000c70e <at_ble_event_get+0x21a>
1000c70c:	e0e0      	b.n	1000c8d0 <at_ble_event_get+0x3dc>
1000c70e:	d809      	bhi.n	1000c724 <at_ble_event_get+0x230>
1000c710:	3b08      	subs	r3, #8
1000c712:	429c      	cmp	r4, r3
1000c714:	d100      	bne.n	1000c718 <at_ble_event_get+0x224>
1000c716:	e0d7      	b.n	1000c8c8 <at_ble_event_get+0x3d4>
1000c718:	4b4b      	ldr	r3, [pc, #300]	; (1000c848 <at_ble_event_get+0x354>)
1000c71a:	2639      	movs	r6, #57	; 0x39
1000c71c:	429c      	cmp	r4, r3
1000c71e:	d100      	bne.n	1000c722 <at_ble_event_get+0x22e>
1000c720:	e1dd      	b.n	1000cade <at_ble_event_get+0x5ea>
1000c722:	e0cf      	b.n	1000c8c4 <at_ble_event_get+0x3d0>
1000c724:	23d1      	movs	r3, #209	; 0xd1
1000c726:	011b      	lsls	r3, r3, #4
1000c728:	429c      	cmp	r4, r3
1000c72a:	d100      	bne.n	1000c72e <at_ble_event_get+0x23a>
1000c72c:	e0d6      	b.n	1000c8dc <at_ble_event_get+0x3e8>
1000c72e:	4b47      	ldr	r3, [pc, #284]	; (1000c84c <at_ble_event_get+0x358>)
1000c730:	429c      	cmp	r4, r3
1000c732:	d100      	bne.n	1000c736 <at_ble_event_get+0x242>
1000c734:	e0d8      	b.n	1000c8e8 <at_ble_event_get+0x3f4>
1000c736:	e0c5      	b.n	1000c8c4 <at_ble_event_get+0x3d0>
1000c738:	4b45      	ldr	r3, [pc, #276]	; (1000c850 <at_ble_event_get+0x35c>)
1000c73a:	429c      	cmp	r4, r3
1000c73c:	d100      	bne.n	1000c740 <at_ble_event_get+0x24c>
1000c73e:	e117      	b.n	1000c970 <at_ble_event_get+0x47c>
1000c740:	d82e      	bhi.n	1000c7a0 <at_ble_event_get+0x2ac>
1000c742:	4b44      	ldr	r3, [pc, #272]	; (1000c854 <at_ble_event_get+0x360>)
1000c744:	429c      	cmp	r4, r3
1000c746:	d100      	bne.n	1000c74a <at_ble_event_get+0x256>
1000c748:	e13d      	b.n	1000c9c6 <at_ble_event_get+0x4d2>
1000c74a:	d812      	bhi.n	1000c772 <at_ble_event_get+0x27e>
1000c74c:	4b42      	ldr	r3, [pc, #264]	; (1000c858 <at_ble_event_get+0x364>)
1000c74e:	429c      	cmp	r4, r3
1000c750:	d100      	bne.n	1000c754 <at_ble_event_get+0x260>
1000c752:	e0e8      	b.n	1000c926 <at_ble_event_get+0x432>
1000c754:	d804      	bhi.n	1000c760 <at_ble_event_get+0x26c>
1000c756:	3b03      	subs	r3, #3
1000c758:	429c      	cmp	r4, r3
1000c75a:	d100      	bne.n	1000c75e <at_ble_event_get+0x26a>
1000c75c:	e0d0      	b.n	1000c900 <at_ble_event_get+0x40c>
1000c75e:	e0b1      	b.n	1000c8c4 <at_ble_event_get+0x3d0>
1000c760:	4b3e      	ldr	r3, [pc, #248]	; (1000c85c <at_ble_event_get+0x368>)
1000c762:	429c      	cmp	r4, r3
1000c764:	d100      	bne.n	1000c768 <at_ble_event_get+0x274>
1000c766:	e0d0      	b.n	1000c90a <at_ble_event_get+0x416>
1000c768:	4b3d      	ldr	r3, [pc, #244]	; (1000c860 <at_ble_event_get+0x36c>)
1000c76a:	429c      	cmp	r4, r3
1000c76c:	d100      	bne.n	1000c770 <at_ble_event_get+0x27c>
1000c76e:	e0f9      	b.n	1000c964 <at_ble_event_get+0x470>
1000c770:	e0a8      	b.n	1000c8c4 <at_ble_event_get+0x3d0>
1000c772:	4b3c      	ldr	r3, [pc, #240]	; (1000c864 <at_ble_event_get+0x370>)
1000c774:	429c      	cmp	r4, r3
1000c776:	d100      	bne.n	1000c77a <at_ble_event_get+0x286>
1000c778:	e0db      	b.n	1000c932 <at_ble_event_get+0x43e>
1000c77a:	d808      	bhi.n	1000c78e <at_ble_event_get+0x29a>
1000c77c:	4b3a      	ldr	r3, [pc, #232]	; (1000c868 <at_ble_event_get+0x374>)
1000c77e:	429c      	cmp	r4, r3
1000c780:	d100      	bne.n	1000c784 <at_ble_event_get+0x290>
1000c782:	e11b      	b.n	1000c9bc <at_ble_event_get+0x4c8>
1000c784:	4b39      	ldr	r3, [pc, #228]	; (1000c86c <at_ble_event_get+0x378>)
1000c786:	429c      	cmp	r4, r3
1000c788:	d100      	bne.n	1000c78c <at_ble_event_get+0x298>
1000c78a:	e0d8      	b.n	1000c93e <at_ble_event_get+0x44a>
1000c78c:	e09a      	b.n	1000c8c4 <at_ble_event_get+0x3d0>
1000c78e:	4b38      	ldr	r3, [pc, #224]	; (1000c870 <at_ble_event_get+0x37c>)
1000c790:	429c      	cmp	r4, r3
1000c792:	d100      	bne.n	1000c796 <at_ble_event_get+0x2a2>
1000c794:	e0d8      	b.n	1000c948 <at_ble_event_get+0x454>
1000c796:	4b37      	ldr	r3, [pc, #220]	; (1000c874 <at_ble_event_get+0x380>)
1000c798:	429c      	cmp	r4, r3
1000c79a:	d100      	bne.n	1000c79e <at_ble_event_get+0x2aa>
1000c79c:	e0db      	b.n	1000c956 <at_ble_event_get+0x462>
1000c79e:	e091      	b.n	1000c8c4 <at_ble_event_get+0x3d0>
1000c7a0:	4b35      	ldr	r3, [pc, #212]	; (1000c878 <at_ble_event_get+0x384>)
1000c7a2:	429c      	cmp	r4, r3
1000c7a4:	d100      	bne.n	1000c7a8 <at_ble_event_get+0x2b4>
1000c7a6:	e0f7      	b.n	1000c998 <at_ble_event_get+0x4a4>
1000c7a8:	d876      	bhi.n	1000c898 <at_ble_event_get+0x3a4>
1000c7aa:	4b34      	ldr	r3, [pc, #208]	; (1000c87c <at_ble_event_get+0x388>)
1000c7ac:	429c      	cmp	r4, r3
1000c7ae:	d100      	bne.n	1000c7b2 <at_ble_event_get+0x2be>
1000c7b0:	e0f8      	b.n	1000c9a4 <at_ble_event_get+0x4b0>
1000c7b2:	d869      	bhi.n	1000c888 <at_ble_event_get+0x394>
1000c7b4:	4b32      	ldr	r3, [pc, #200]	; (1000c880 <at_ble_event_get+0x38c>)
1000c7b6:	429c      	cmp	r4, r3
1000c7b8:	d100      	bne.n	1000c7bc <at_ble_event_get+0x2c8>
1000c7ba:	e0e0      	b.n	1000c97e <at_ble_event_get+0x48a>
1000c7bc:	4b31      	ldr	r3, [pc, #196]	; (1000c884 <at_ble_event_get+0x390>)
1000c7be:	429c      	cmp	r4, r3
1000c7c0:	d100      	bne.n	1000c7c4 <at_ble_event_get+0x2d0>
1000c7c2:	e0a9      	b.n	1000c918 <at_ble_event_get+0x424>
1000c7c4:	e07e      	b.n	1000c8c4 <at_ble_event_get+0x3d0>
1000c7c6:	46c0      	nop			; (mov r8, r8)
1000c7c8:	1000d6a1 	.word	0x1000d6a1
1000c7cc:	10013b68 	.word	0x10013b68
1000c7d0:	1000a8c1 	.word	0x1000a8c1
1000c7d4:	10013b6c 	.word	0x10013b6c
1000c7d8:	10013b64 	.word	0x10013b64
1000c7dc:	10013b54 	.word	0x10013b54
1000c7e0:	1000c3dd 	.word	0x1000c3dd
1000c7e4:	1000ffbd 	.word	0x1000ffbd
1000c7e8:	0000ffff 	.word	0x0000ffff
1000c7ec:	0000fffe 	.word	0x0000fffe
1000c7f0:	1000ab39 	.word	0x1000ab39
1000c7f4:	1000d6a3 	.word	0x1000d6a3
1000c7f8:	0000201e 	.word	0x0000201e
1000c7fc:	0000201d 	.word	0x0000201d
1000c800:	00000c03 	.word	0x00000c03
1000c804:	0000201f 	.word	0x0000201f
1000c808:	00000d1c 	.word	0x00000d1c
1000c80c:	00000c0c 	.word	0x00000c0c
1000c810:	00000c02 	.word	0x00000c02
1000c814:	00000a02 	.word	0x00000a02
1000c818:	00000a03 	.word	0x00000a03
1000c81c:	00000c06 	.word	0x00000c06
1000c820:	00000c04 	.word	0x00000c04
1000c824:	00000c05 	.word	0x00000c05
1000c828:	00000c07 	.word	0x00000c07
1000c82c:	00000c09 	.word	0x00000c09
1000c830:	00000c17 	.word	0x00000c17
1000c834:	00000c12 	.word	0x00000c12
1000c838:	00000c0d 	.word	0x00000c0d
1000c83c:	00000c13 	.word	0x00000c13
1000c840:	00000c15 	.word	0x00000c15
1000c844:	00000d08 	.word	0x00000d08
1000c848:	00000d01 	.word	0x00000d01
1000c84c:	00000d15 	.word	0x00000d15
1000c850:	00000e1b 	.word	0x00000e1b
1000c854:	00000e0f 	.word	0x00000e0f
1000c858:	00000e03 	.word	0x00000e03
1000c85c:	00000e06 	.word	0x00000e06
1000c860:	00000e0a 	.word	0x00000e0a
1000c864:	00000e15 	.word	0x00000e15
1000c868:	00000e11 	.word	0x00000e11
1000c86c:	00000e13 	.word	0x00000e13
1000c870:	00000e17 	.word	0x00000e17
1000c874:	00000e19 	.word	0x00000e19
1000c878:	00000e27 	.word	0x00000e27
1000c87c:	00000e21 	.word	0x00000e21
1000c880:	00000e1c 	.word	0x00000e1c
1000c884:	00000e1d 	.word	0x00000e1d
1000c888:	4b9f      	ldr	r3, [pc, #636]	; (1000cb08 <at_ble_event_get+0x614>)
1000c88a:	429c      	cmp	r4, r3
1000c88c:	d07e      	beq.n	1000c98c <at_ble_event_get+0x498>
1000c88e:	4b9f      	ldr	r3, [pc, #636]	; (1000cb0c <at_ble_event_get+0x618>)
1000c890:	429c      	cmp	r4, r3
1000c892:	d100      	bne.n	1000c896 <at_ble_event_get+0x3a2>
1000c894:	e08c      	b.n	1000c9b0 <at_ble_event_get+0x4bc>
1000c896:	e015      	b.n	1000c8c4 <at_ble_event_get+0x3d0>
1000c898:	4b9d      	ldr	r3, [pc, #628]	; (1000cb10 <at_ble_event_get+0x61c>)
1000c89a:	429c      	cmp	r4, r3
1000c89c:	d100      	bne.n	1000c8a0 <at_ble_event_get+0x3ac>
1000c89e:	e10a      	b.n	1000cab6 <at_ble_event_get+0x5c2>
1000c8a0:	d808      	bhi.n	1000c8b4 <at_ble_event_get+0x3c0>
1000c8a2:	4b9c      	ldr	r3, [pc, #624]	; (1000cb14 <at_ble_event_get+0x620>)
1000c8a4:	429c      	cmp	r4, r3
1000c8a6:	d100      	bne.n	1000c8aa <at_ble_event_get+0x3b6>
1000c8a8:	e0f7      	b.n	1000ca9a <at_ble_event_get+0x5a6>
1000c8aa:	4b9b      	ldr	r3, [pc, #620]	; (1000cb18 <at_ble_event_get+0x624>)
1000c8ac:	429c      	cmp	r4, r3
1000c8ae:	d100      	bne.n	1000c8b2 <at_ble_event_get+0x3be>
1000c8b0:	e0fa      	b.n	1000caa8 <at_ble_event_get+0x5b4>
1000c8b2:	e007      	b.n	1000c8c4 <at_ble_event_get+0x3d0>
1000c8b4:	4b99      	ldr	r3, [pc, #612]	; (1000cb1c <at_ble_event_get+0x628>)
1000c8b6:	429c      	cmp	r4, r3
1000c8b8:	d100      	bne.n	1000c8bc <at_ble_event_get+0x3c8>
1000c8ba:	e103      	b.n	1000cac4 <at_ble_event_get+0x5d0>
1000c8bc:	4b98      	ldr	r3, [pc, #608]	; (1000cb20 <at_ble_event_get+0x62c>)
1000c8be:	429c      	cmp	r4, r3
1000c8c0:	d100      	bne.n	1000c8c4 <at_ble_event_get+0x3d0>
1000c8c2:	e106      	b.n	1000cad2 <at_ble_event_get+0x5de>
1000c8c4:	2600      	movs	r6, #0
1000c8c6:	e10a      	b.n	1000cade <at_ble_event_get+0x5ea>
1000c8c8:	1c30      	adds	r0, r6, #0
1000c8ca:	1c29      	adds	r1, r5, #0
1000c8cc:	4b95      	ldr	r3, [pc, #596]	; (1000cb24 <at_ble_event_get+0x630>)
1000c8ce:	e014      	b.n	1000c8fa <at_ble_event_get+0x406>
1000c8d0:	1c30      	adds	r0, r6, #0
1000c8d2:	1c29      	adds	r1, r5, #0
1000c8d4:	4b94      	ldr	r3, [pc, #592]	; (1000cb28 <at_ble_event_get+0x634>)
1000c8d6:	4798      	blx	r3
1000c8d8:	2604      	movs	r6, #4
1000c8da:	e100      	b.n	1000cade <at_ble_event_get+0x5ea>
1000c8dc:	1c30      	adds	r0, r6, #0
1000c8de:	1c29      	adds	r1, r5, #0
1000c8e0:	4b92      	ldr	r3, [pc, #584]	; (1000cb2c <at_ble_event_get+0x638>)
1000c8e2:	4798      	blx	r3
1000c8e4:	2601      	movs	r6, #1
1000c8e6:	e0fa      	b.n	1000cade <at_ble_event_get+0x5ea>
1000c8e8:	1c30      	adds	r0, r6, #0
1000c8ea:	1c29      	adds	r1, r5, #0
1000c8ec:	4b90      	ldr	r3, [pc, #576]	; (1000cb30 <at_ble_event_get+0x63c>)
1000c8ee:	4798      	blx	r3
1000c8f0:	260f      	movs	r6, #15
1000c8f2:	e0f4      	b.n	1000cade <at_ble_event_get+0x5ea>
1000c8f4:	1c30      	adds	r0, r6, #0
1000c8f6:	1c29      	adds	r1, r5, #0
1000c8f8:	4b8e      	ldr	r3, [pc, #568]	; (1000cb34 <at_ble_event_get+0x640>)
1000c8fa:	4798      	blx	r3
1000c8fc:	1c06      	adds	r6, r0, #0
1000c8fe:	e0ee      	b.n	1000cade <at_ble_event_get+0x5ea>
1000c900:	9801      	ldr	r0, [sp, #4]
1000c902:	1c31      	adds	r1, r6, #0
1000c904:	1c2a      	adds	r2, r5, #0
1000c906:	4b8c      	ldr	r3, [pc, #560]	; (1000cb38 <at_ble_event_get+0x644>)
1000c908:	e017      	b.n	1000c93a <at_ble_event_get+0x446>
1000c90a:	1c31      	adds	r1, r6, #0
1000c90c:	9801      	ldr	r0, [sp, #4]
1000c90e:	1c2a      	adds	r2, r5, #0
1000c910:	4b8a      	ldr	r3, [pc, #552]	; (1000cb3c <at_ble_event_get+0x648>)
1000c912:	4798      	blx	r3
1000c914:	2611      	movs	r6, #17
1000c916:	e0e2      	b.n	1000cade <at_ble_event_get+0x5ea>
1000c918:	1c31      	adds	r1, r6, #0
1000c91a:	9801      	ldr	r0, [sp, #4]
1000c91c:	1c2a      	adds	r2, r5, #0
1000c91e:	4b88      	ldr	r3, [pc, #544]	; (1000cb40 <at_ble_event_get+0x64c>)
1000c920:	4798      	blx	r3
1000c922:	2612      	movs	r6, #18
1000c924:	e0db      	b.n	1000cade <at_ble_event_get+0x5ea>
1000c926:	1c30      	adds	r0, r6, #0
1000c928:	1c29      	adds	r1, r5, #0
1000c92a:	4b86      	ldr	r3, [pc, #536]	; (1000cb44 <at_ble_event_get+0x650>)
1000c92c:	4798      	blx	r3
1000c92e:	2606      	movs	r6, #6
1000c930:	e0d5      	b.n	1000cade <at_ble_event_get+0x5ea>
1000c932:	1c31      	adds	r1, r6, #0
1000c934:	1c2a      	adds	r2, r5, #0
1000c936:	9801      	ldr	r0, [sp, #4]
1000c938:	4b83      	ldr	r3, [pc, #524]	; (1000cb48 <at_ble_event_get+0x654>)
1000c93a:	4798      	blx	r3
1000c93c:	e7de      	b.n	1000c8fc <at_ble_event_get+0x408>
1000c93e:	9801      	ldr	r0, [sp, #4]
1000c940:	1c31      	adds	r1, r6, #0
1000c942:	1c2a      	adds	r2, r5, #0
1000c944:	4b81      	ldr	r3, [pc, #516]	; (1000cb4c <at_ble_event_get+0x658>)
1000c946:	e7f8      	b.n	1000c93a <at_ble_event_get+0x446>
1000c948:	1c31      	adds	r1, r6, #0
1000c94a:	9801      	ldr	r0, [sp, #4]
1000c94c:	1c2a      	adds	r2, r5, #0
1000c94e:	4b80      	ldr	r3, [pc, #512]	; (1000cb50 <at_ble_event_get+0x65c>)
1000c950:	4798      	blx	r3
1000c952:	260d      	movs	r6, #13
1000c954:	e0c3      	b.n	1000cade <at_ble_event_get+0x5ea>
1000c956:	1c31      	adds	r1, r6, #0
1000c958:	9801      	ldr	r0, [sp, #4]
1000c95a:	1c2a      	adds	r2, r5, #0
1000c95c:	4b7d      	ldr	r3, [pc, #500]	; (1000cb54 <at_ble_event_get+0x660>)
1000c95e:	4798      	blx	r3
1000c960:	260e      	movs	r6, #14
1000c962:	e0bc      	b.n	1000cade <at_ble_event_get+0x5ea>
1000c964:	9801      	ldr	r0, [sp, #4]
1000c966:	1c31      	adds	r1, r6, #0
1000c968:	1c2a      	adds	r2, r5, #0
1000c96a:	4b7b      	ldr	r3, [pc, #492]	; (1000cb58 <at_ble_event_get+0x664>)
1000c96c:	4798      	blx	r3
1000c96e:	e084      	b.n	1000ca7a <at_ble_event_get+0x586>
1000c970:	1c31      	adds	r1, r6, #0
1000c972:	9801      	ldr	r0, [sp, #4]
1000c974:	1c2a      	adds	r2, r5, #0
1000c976:	4b79      	ldr	r3, [pc, #484]	; (1000cb5c <at_ble_event_get+0x668>)
1000c978:	4798      	blx	r3
1000c97a:	260b      	movs	r6, #11
1000c97c:	e0af      	b.n	1000cade <at_ble_event_get+0x5ea>
1000c97e:	1c31      	adds	r1, r6, #0
1000c980:	9801      	ldr	r0, [sp, #4]
1000c982:	1c2a      	adds	r2, r5, #0
1000c984:	4b76      	ldr	r3, [pc, #472]	; (1000cb60 <at_ble_event_get+0x66c>)
1000c986:	4798      	blx	r3
1000c988:	2610      	movs	r6, #16
1000c98a:	e0a8      	b.n	1000cade <at_ble_event_get+0x5ea>
1000c98c:	1c30      	adds	r0, r6, #0
1000c98e:	1c29      	adds	r1, r5, #0
1000c990:	4b74      	ldr	r3, [pc, #464]	; (1000cb64 <at_ble_event_get+0x670>)
1000c992:	4798      	blx	r3
1000c994:	2628      	movs	r6, #40	; 0x28
1000c996:	e0a2      	b.n	1000cade <at_ble_event_get+0x5ea>
1000c998:	1c30      	adds	r0, r6, #0
1000c99a:	1c29      	adds	r1, r5, #0
1000c99c:	4b72      	ldr	r3, [pc, #456]	; (1000cb68 <at_ble_event_get+0x674>)
1000c99e:	4798      	blx	r3
1000c9a0:	2629      	movs	r6, #41	; 0x29
1000c9a2:	e09c      	b.n	1000cade <at_ble_event_get+0x5ea>
1000c9a4:	1c30      	adds	r0, r6, #0
1000c9a6:	1c29      	adds	r1, r5, #0
1000c9a8:	4b70      	ldr	r3, [pc, #448]	; (1000cb6c <at_ble_event_get+0x678>)
1000c9aa:	4798      	blx	r3
1000c9ac:	2627      	movs	r6, #39	; 0x27
1000c9ae:	e096      	b.n	1000cade <at_ble_event_get+0x5ea>
1000c9b0:	1c30      	adds	r0, r6, #0
1000c9b2:	1c29      	adds	r1, r5, #0
1000c9b4:	4b6e      	ldr	r3, [pc, #440]	; (1000cb70 <at_ble_event_get+0x67c>)
1000c9b6:	4798      	blx	r3
1000c9b8:	262a      	movs	r6, #42	; 0x2a
1000c9ba:	e090      	b.n	1000cade <at_ble_event_get+0x5ea>
1000c9bc:	9801      	ldr	r0, [sp, #4]
1000c9be:	1c31      	adds	r1, r6, #0
1000c9c0:	1c2a      	adds	r2, r5, #0
1000c9c2:	4b6c      	ldr	r3, [pc, #432]	; (1000cb74 <at_ble_event_get+0x680>)
1000c9c4:	e7b9      	b.n	1000c93a <at_ble_event_get+0x446>
1000c9c6:	9801      	ldr	r0, [sp, #4]
1000c9c8:	1c31      	adds	r1, r6, #0
1000c9ca:	1c2a      	adds	r2, r5, #0
1000c9cc:	4b6a      	ldr	r3, [pc, #424]	; (1000cb78 <at_ble_event_get+0x684>)
1000c9ce:	e7b4      	b.n	1000c93a <at_ble_event_get+0x446>
1000c9d0:	1c30      	adds	r0, r6, #0
1000c9d2:	1c29      	adds	r1, r5, #0
1000c9d4:	4b69      	ldr	r3, [pc, #420]	; (1000cb7c <at_ble_event_get+0x688>)
1000c9d6:	4798      	blx	r3
1000c9d8:	262b      	movs	r6, #43	; 0x2b
1000c9da:	e080      	b.n	1000cade <at_ble_event_get+0x5ea>
1000c9dc:	1c30      	adds	r0, r6, #0
1000c9de:	1c29      	adds	r1, r5, #0
1000c9e0:	4b67      	ldr	r3, [pc, #412]	; (1000cb80 <at_ble_event_get+0x68c>)
1000c9e2:	4798      	blx	r3
1000c9e4:	262c      	movs	r6, #44	; 0x2c
1000c9e6:	e07a      	b.n	1000cade <at_ble_event_get+0x5ea>
1000c9e8:	1c31      	adds	r1, r6, #0
1000c9ea:	9801      	ldr	r0, [sp, #4]
1000c9ec:	1c2a      	adds	r2, r5, #0
1000c9ee:	4b65      	ldr	r3, [pc, #404]	; (1000cb84 <at_ble_event_get+0x690>)
1000c9f0:	4798      	blx	r3
1000c9f2:	2613      	movs	r6, #19
1000c9f4:	e073      	b.n	1000cade <at_ble_event_get+0x5ea>
1000c9f6:	1c31      	adds	r1, r6, #0
1000c9f8:	9801      	ldr	r0, [sp, #4]
1000c9fa:	1c2a      	adds	r2, r5, #0
1000c9fc:	4b62      	ldr	r3, [pc, #392]	; (1000cb88 <at_ble_event_get+0x694>)
1000c9fe:	4798      	blx	r3
1000ca00:	2614      	movs	r6, #20
1000ca02:	e06c      	b.n	1000cade <at_ble_event_get+0x5ea>
1000ca04:	1c31      	adds	r1, r6, #0
1000ca06:	9801      	ldr	r0, [sp, #4]
1000ca08:	1c2a      	adds	r2, r5, #0
1000ca0a:	4b60      	ldr	r3, [pc, #384]	; (1000cb8c <at_ble_event_get+0x698>)
1000ca0c:	4798      	blx	r3
1000ca0e:	2615      	movs	r6, #21
1000ca10:	e065      	b.n	1000cade <at_ble_event_get+0x5ea>
1000ca12:	1c31      	adds	r1, r6, #0
1000ca14:	9801      	ldr	r0, [sp, #4]
1000ca16:	1c2a      	adds	r2, r5, #0
1000ca18:	4b5d      	ldr	r3, [pc, #372]	; (1000cb90 <at_ble_event_get+0x69c>)
1000ca1a:	4798      	blx	r3
1000ca1c:	2616      	movs	r6, #22
1000ca1e:	e05e      	b.n	1000cade <at_ble_event_get+0x5ea>
1000ca20:	9801      	ldr	r0, [sp, #4]
1000ca22:	1c31      	adds	r1, r6, #0
1000ca24:	1c2a      	adds	r2, r5, #0
1000ca26:	4b5b      	ldr	r3, [pc, #364]	; (1000cb94 <at_ble_event_get+0x6a0>)
1000ca28:	e787      	b.n	1000c93a <at_ble_event_get+0x446>
1000ca2a:	1c31      	adds	r1, r6, #0
1000ca2c:	9801      	ldr	r0, [sp, #4]
1000ca2e:	1c2a      	adds	r2, r5, #0
1000ca30:	4b58      	ldr	r3, [pc, #352]	; (1000cb94 <at_ble_event_get+0x6a0>)
1000ca32:	4798      	blx	r3
1000ca34:	88a9      	ldrh	r1, [r5, #4]
1000ca36:	1c06      	adds	r6, r0, #0
1000ca38:	4b57      	ldr	r3, [pc, #348]	; (1000cb98 <at_ble_event_get+0x6a4>)
1000ca3a:	8828      	ldrh	r0, [r5, #0]
1000ca3c:	4798      	blx	r3
1000ca3e:	e04e      	b.n	1000cade <at_ble_event_get+0x5ea>
1000ca40:	1c31      	adds	r1, r6, #0
1000ca42:	9801      	ldr	r0, [sp, #4]
1000ca44:	1c2a      	adds	r2, r5, #0
1000ca46:	4b55      	ldr	r3, [pc, #340]	; (1000cb9c <at_ble_event_get+0x6a8>)
1000ca48:	4798      	blx	r3
1000ca4a:	2623      	movs	r6, #35	; 0x23
1000ca4c:	e047      	b.n	1000cade <at_ble_event_get+0x5ea>
1000ca4e:	9801      	ldr	r0, [sp, #4]
1000ca50:	1c31      	adds	r1, r6, #0
1000ca52:	1c2a      	adds	r2, r5, #0
1000ca54:	4b52      	ldr	r3, [pc, #328]	; (1000cba0 <at_ble_event_get+0x6ac>)
1000ca56:	e770      	b.n	1000c93a <at_ble_event_get+0x446>
1000ca58:	9b01      	ldr	r3, [sp, #4]
1000ca5a:	1c30      	adds	r0, r6, #0
1000ca5c:	0a1f      	lsrs	r7, r3, #8
1000ca5e:	802f      	strh	r7, [r5, #0]
1000ca60:	1c29      	adds	r1, r5, #0
1000ca62:	4b50      	ldr	r3, [pc, #320]	; (1000cba4 <at_ble_event_get+0x6b0>)
1000ca64:	e749      	b.n	1000c8fa <at_ble_event_get+0x406>
1000ca66:	9801      	ldr	r0, [sp, #4]
1000ca68:	1c31      	adds	r1, r6, #0
1000ca6a:	1c2a      	adds	r2, r5, #0
1000ca6c:	4b4e      	ldr	r3, [pc, #312]	; (1000cba8 <at_ble_event_get+0x6b4>)
1000ca6e:	e764      	b.n	1000c93a <at_ble_event_get+0x446>
1000ca70:	1c30      	adds	r0, r6, #0
1000ca72:	1c29      	adds	r1, r5, #0
1000ca74:	9a01      	ldr	r2, [sp, #4]
1000ca76:	4b4d      	ldr	r3, [pc, #308]	; (1000cbac <at_ble_event_get+0x6b8>)
1000ca78:	4798      	blx	r3
1000ca7a:	263b      	movs	r6, #59	; 0x3b
1000ca7c:	e02f      	b.n	1000cade <at_ble_event_get+0x5ea>
1000ca7e:	1c31      	adds	r1, r6, #0
1000ca80:	9801      	ldr	r0, [sp, #4]
1000ca82:	1c2a      	adds	r2, r5, #0
1000ca84:	4b4a      	ldr	r3, [pc, #296]	; (1000cbb0 <at_ble_event_get+0x6bc>)
1000ca86:	4798      	blx	r3
1000ca88:	2618      	movs	r6, #24
1000ca8a:	e028      	b.n	1000cade <at_ble_event_get+0x5ea>
1000ca8c:	1c31      	adds	r1, r6, #0
1000ca8e:	9801      	ldr	r0, [sp, #4]
1000ca90:	1c2a      	adds	r2, r5, #0
1000ca92:	4b48      	ldr	r3, [pc, #288]	; (1000cbb4 <at_ble_event_get+0x6c0>)
1000ca94:	4798      	blx	r3
1000ca96:	2620      	movs	r6, #32
1000ca98:	e021      	b.n	1000cade <at_ble_event_get+0x5ea>
1000ca9a:	1c31      	adds	r1, r6, #0
1000ca9c:	9801      	ldr	r0, [sp, #4]
1000ca9e:	1c2a      	adds	r2, r5, #0
1000caa0:	4b45      	ldr	r3, [pc, #276]	; (1000cbb8 <at_ble_event_get+0x6c4>)
1000caa2:	4798      	blx	r3
1000caa4:	2633      	movs	r6, #51	; 0x33
1000caa6:	e01a      	b.n	1000cade <at_ble_event_get+0x5ea>
1000caa8:	1c31      	adds	r1, r6, #0
1000caaa:	9801      	ldr	r0, [sp, #4]
1000caac:	1c2a      	adds	r2, r5, #0
1000caae:	4b43      	ldr	r3, [pc, #268]	; (1000cbbc <at_ble_event_get+0x6c8>)
1000cab0:	4798      	blx	r3
1000cab2:	2630      	movs	r6, #48	; 0x30
1000cab4:	e013      	b.n	1000cade <at_ble_event_get+0x5ea>
1000cab6:	1c31      	adds	r1, r6, #0
1000cab8:	9801      	ldr	r0, [sp, #4]
1000caba:	1c2a      	adds	r2, r5, #0
1000cabc:	4b40      	ldr	r3, [pc, #256]	; (1000cbc0 <at_ble_event_get+0x6cc>)
1000cabe:	4798      	blx	r3
1000cac0:	2634      	movs	r6, #52	; 0x34
1000cac2:	e00c      	b.n	1000cade <at_ble_event_get+0x5ea>
1000cac4:	1c31      	adds	r1, r6, #0
1000cac6:	9801      	ldr	r0, [sp, #4]
1000cac8:	1c2a      	adds	r2, r5, #0
1000caca:	4b3e      	ldr	r3, [pc, #248]	; (1000cbc4 <at_ble_event_get+0x6d0>)
1000cacc:	4798      	blx	r3
1000cace:	2635      	movs	r6, #53	; 0x35
1000cad0:	e005      	b.n	1000cade <at_ble_event_get+0x5ea>
1000cad2:	1c31      	adds	r1, r6, #0
1000cad4:	9801      	ldr	r0, [sp, #4]
1000cad6:	1c2a      	adds	r2, r5, #0
1000cad8:	4b3b      	ldr	r3, [pc, #236]	; (1000cbc8 <at_ble_event_get+0x6d4>)
1000cada:	4798      	blx	r3
1000cadc:	2632      	movs	r6, #50	; 0x32
1000cade:	9b03      	ldr	r3, [sp, #12]
1000cae0:	701e      	strb	r6, [r3, #0]
1000cae2:	2300      	movs	r3, #0
1000cae4:	9302      	str	r3, [sp, #8]
1000cae6:	e57a      	b.n	1000c5de <at_ble_event_get+0xea>
1000cae8:	23d0      	movs	r3, #208	; 0xd0
1000caea:	e7fb      	b.n	1000cae4 <at_ble_event_get+0x5f0>
1000caec:	9b01      	ldr	r3, [sp, #4]
1000caee:	9e02      	ldr	r6, [sp, #8]
1000caf0:	2bbb      	cmp	r3, #187	; 0xbb
1000caf2:	d000      	beq.n	1000caf6 <at_ble_event_get+0x602>
1000caf4:	e6e6      	b.n	1000c8c4 <at_ble_event_get+0x3d0>
1000caf6:	e7f2      	b.n	1000cade <at_ble_event_get+0x5ea>
1000caf8:	9b02      	ldr	r3, [sp, #8]
1000cafa:	2b00      	cmp	r3, #0
1000cafc:	d000      	beq.n	1000cb00 <at_ble_event_get+0x60c>
1000cafe:	e56e      	b.n	1000c5de <at_ble_event_get+0xea>
1000cb00:	e6e0      	b.n	1000c8c4 <at_ble_event_get+0x3d0>
1000cb02:	9802      	ldr	r0, [sp, #8]
1000cb04:	b007      	add	sp, #28
1000cb06:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cb08:	00000e22 	.word	0x00000e22
1000cb0c:	00000e25 	.word	0x00000e25
1000cb10:	00001b05 	.word	0x00001b05
1000cb14:	00001b01 	.word	0x00001b01
1000cb18:	00001b03 	.word	0x00001b03
1000cb1c:	00001b06 	.word	0x00001b06
1000cb20:	00001b08 	.word	0x00001b08
1000cb24:	1000e4cd 	.word	0x1000e4cd
1000cb28:	1000e4b1 	.word	0x1000e4b1
1000cb2c:	1000e615 	.word	0x1000e615
1000cb30:	1000e705 	.word	0x1000e705
1000cb34:	1000e729 	.word	0x1000e729
1000cb38:	1000d845 	.word	0x1000d845
1000cb3c:	1000e0c5 	.word	0x1000e0c5
1000cb40:	1000e141 	.word	0x1000e141
1000cb44:	1000dafd 	.word	0x1000dafd
1000cb48:	1000db99 	.word	0x1000db99
1000cb4c:	1000dc71 	.word	0x1000dc71
1000cb50:	1000def9 	.word	0x1000def9
1000cb54:	1000df99 	.word	0x1000df99
1000cb58:	1000e051 	.word	0x1000e051
1000cb5c:	1000e079 	.word	0x1000e079
1000cb60:	1000e08f 	.word	0x1000e08f
1000cb64:	1000e159 	.word	0x1000e159
1000cb68:	1000e187 	.word	0x1000e187
1000cb6c:	1000e19d 	.word	0x1000e19d
1000cb70:	1000e1c7 	.word	0x1000e1c7
1000cb74:	1000dff5 	.word	0x1000dff5
1000cb78:	1000e01f 	.word	0x1000e01f
1000cb7c:	1000d285 	.word	0x1000d285
1000cb80:	1000d2b1 	.word	0x1000d2b1
1000cb84:	1000e8d1 	.word	0x1000e8d1
1000cb88:	1000e90d 	.word	0x1000e90d
1000cb8c:	1000e955 	.word	0x1000e955
1000cb90:	1000e999 	.word	0x1000e999
1000cb94:	1000e9cd 	.word	0x1000e9cd
1000cb98:	1000e891 	.word	0x1000e891
1000cb9c:	1000ea99 	.word	0x1000ea99
1000cba0:	1000ea21 	.word	0x1000ea21
1000cba4:	1000d1dd 	.word	0x1000d1dd
1000cba8:	1000d249 	.word	0x1000d249
1000cbac:	1000d20d 	.word	0x1000d20d
1000cbb0:	1000eaa9 	.word	0x1000eaa9
1000cbb4:	1000eae9 	.word	0x1000eae9
1000cbb8:	1000ec35 	.word	0x1000ec35
1000cbbc:	1000ec3f 	.word	0x1000ec3f
1000cbc0:	1000ec45 	.word	0x1000ec45
1000cbc4:	1000ec4b 	.word	0x1000ec4b
1000cbc8:	1000ec57 	.word	0x1000ec57

1000cbcc <internal_event_flush>:
1000cbcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000cbce:	490e      	ldr	r1, [pc, #56]	; (1000cc08 <internal_event_flush+0x3c>)
1000cbd0:	2400      	movs	r4, #0
1000cbd2:	680b      	ldr	r3, [r1, #0]
1000cbd4:	1c0f      	adds	r7, r1, #0
1000cbd6:	1c1e      	adds	r6, r3, #0
1000cbd8:	4a0c      	ldr	r2, [pc, #48]	; (1000cc0c <internal_event_flush+0x40>)
1000cbda:	6815      	ldr	r5, [r2, #0]
1000cbdc:	9201      	str	r2, [sp, #4]
1000cbde:	2b00      	cmp	r3, #0
1000cbe0:	d00e      	beq.n	1000cc00 <internal_event_flush+0x34>
1000cbe2:	889a      	ldrh	r2, [r3, #4]
1000cbe4:	6819      	ldr	r1, [r3, #0]
1000cbe6:	4282      	cmp	r2, r0
1000cbe8:	d107      	bne.n	1000cbfa <internal_event_flush+0x2e>
1000cbea:	2c00      	cmp	r4, #0
1000cbec:	d001      	beq.n	1000cbf2 <internal_event_flush+0x26>
1000cbee:	6021      	str	r1, [r4, #0]
1000cbf0:	e000      	b.n	1000cbf4 <internal_event_flush+0x28>
1000cbf2:	1c0e      	adds	r6, r1, #0
1000cbf4:	601d      	str	r5, [r3, #0]
1000cbf6:	1c1d      	adds	r5, r3, #0
1000cbf8:	1c23      	adds	r3, r4, #0
1000cbfa:	1c1c      	adds	r4, r3, #0
1000cbfc:	1c0b      	adds	r3, r1, #0
1000cbfe:	e7ee      	b.n	1000cbde <internal_event_flush+0x12>
1000cc00:	9b01      	ldr	r3, [sp, #4]
1000cc02:	603e      	str	r6, [r7, #0]
1000cc04:	601d      	str	r5, [r3, #0]
1000cc06:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000cc08:	10013b68 	.word	0x10013b68
1000cc0c:	10013b6c 	.word	0x10013b6c

1000cc10 <internal_conn_flush>:
1000cc10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000cc12:	4a12      	ldr	r2, [pc, #72]	; (1000cc5c <internal_conn_flush+0x4c>)
1000cc14:	9000      	str	r0, [sp, #0]
1000cc16:	6813      	ldr	r3, [r2, #0]
1000cc18:	4811      	ldr	r0, [pc, #68]	; (1000cc60 <internal_conn_flush+0x50>)
1000cc1a:	1c1f      	adds	r7, r3, #0
1000cc1c:	2100      	movs	r1, #0
1000cc1e:	4684      	mov	ip, r0
1000cc20:	6804      	ldr	r4, [r0, #0]
1000cc22:	9201      	str	r2, [sp, #4]
1000cc24:	2b00      	cmp	r3, #0
1000cc26:	d014      	beq.n	1000cc52 <internal_conn_flush+0x42>
1000cc28:	88d8      	ldrh	r0, [r3, #6]
1000cc2a:	9a00      	ldr	r2, [sp, #0]
1000cc2c:	681d      	ldr	r5, [r3, #0]
1000cc2e:	0a06      	lsrs	r6, r0, #8
1000cc30:	4296      	cmp	r6, r2
1000cc32:	d10b      	bne.n	1000cc4c <internal_conn_flush+0x3c>
1000cc34:	26fd      	movs	r6, #253	; 0xfd
1000cc36:	4006      	ands	r6, r0
1000cc38:	2e0c      	cmp	r6, #12
1000cc3a:	d107      	bne.n	1000cc4c <internal_conn_flush+0x3c>
1000cc3c:	2900      	cmp	r1, #0
1000cc3e:	d001      	beq.n	1000cc44 <internal_conn_flush+0x34>
1000cc40:	600d      	str	r5, [r1, #0]
1000cc42:	e000      	b.n	1000cc46 <internal_conn_flush+0x36>
1000cc44:	1c2f      	adds	r7, r5, #0
1000cc46:	601c      	str	r4, [r3, #0]
1000cc48:	1c1c      	adds	r4, r3, #0
1000cc4a:	1c0b      	adds	r3, r1, #0
1000cc4c:	1c19      	adds	r1, r3, #0
1000cc4e:	1c2b      	adds	r3, r5, #0
1000cc50:	e7e8      	b.n	1000cc24 <internal_conn_flush+0x14>
1000cc52:	9b01      	ldr	r3, [sp, #4]
1000cc54:	601f      	str	r7, [r3, #0]
1000cc56:	4663      	mov	r3, ip
1000cc58:	601c      	str	r4, [r3, #0]
1000cc5a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000cc5c:	10013b68 	.word	0x10013b68
1000cc60:	10013b6c 	.word	0x10013b6c

1000cc64 <at_ble_device_name_set>:
1000cc64:	b530      	push	{r4, r5, lr}
1000cc66:	23cf      	movs	r3, #207	; 0xcf
1000cc68:	2800      	cmp	r0, #0
1000cc6a:	d010      	beq.n	1000cc8e <at_ble_device_name_set+0x2a>
1000cc6c:	1e4a      	subs	r2, r1, #1
1000cc6e:	2a1f      	cmp	r2, #31
1000cc70:	d80d      	bhi.n	1000cc8e <at_ble_device_name_set+0x2a>
1000cc72:	4a08      	ldr	r2, [pc, #32]	; (1000cc94 <at_ble_device_name_set+0x30>)
1000cc74:	1c13      	adds	r3, r2, #0
1000cc76:	33aa      	adds	r3, #170	; 0xaa
1000cc78:	8019      	strh	r1, [r3, #0]
1000cc7a:	2300      	movs	r3, #0
1000cc7c:	1c1c      	adds	r4, r3, #0
1000cc7e:	5cc5      	ldrb	r5, [r0, r3]
1000cc80:	34ac      	adds	r4, #172	; 0xac
1000cc82:	3301      	adds	r3, #1
1000cc84:	5515      	strb	r5, [r2, r4]
1000cc86:	b2dc      	uxtb	r4, r3
1000cc88:	428c      	cmp	r4, r1
1000cc8a:	d3f7      	bcc.n	1000cc7c <at_ble_device_name_set+0x18>
1000cc8c:	2300      	movs	r3, #0
1000cc8e:	1c18      	adds	r0, r3, #0
1000cc90:	bd30      	pop	{r4, r5, pc}
1000cc92:	46c0      	nop			; (mov r8, r8)
1000cc94:	1001493e 	.word	0x1001493e

1000cc98 <at_ble_addr_get>:
1000cc98:	b510      	push	{r4, lr}
1000cc9a:	1c04      	adds	r4, r0, #0
1000cc9c:	20cf      	movs	r0, #207	; 0xcf
1000cc9e:	2c00      	cmp	r4, #0
1000cca0:	d006      	beq.n	1000ccb0 <at_ble_addr_get+0x18>
1000cca2:	4b04      	ldr	r3, [pc, #16]	; (1000ccb4 <at_ble_addr_get+0x1c>)
1000cca4:	38ce      	subs	r0, #206	; 0xce
1000cca6:	1c21      	adds	r1, r4, #0
1000cca8:	4798      	blx	r3
1000ccaa:	4b03      	ldr	r3, [pc, #12]	; (1000ccb8 <at_ble_addr_get+0x20>)
1000ccac:	791b      	ldrb	r3, [r3, #4]
1000ccae:	7023      	strb	r3, [r4, #0]
1000ccb0:	bd10      	pop	{r4, pc}
1000ccb2:	46c0      	nop			; (mov r8, r8)
1000ccb4:	1000e361 	.word	0x1000e361
1000ccb8:	1001493e 	.word	0x1001493e

1000ccbc <at_ble_set_dev_config>:
1000ccbc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ccbe:	7906      	ldrb	r6, [r0, #4]
1000ccc0:	b089      	sub	sp, #36	; 0x24
1000ccc2:	25cf      	movs	r5, #207	; 0xcf
1000ccc4:	2e03      	cmp	r6, #3
1000ccc6:	d838      	bhi.n	1000cd3a <at_ble_set_dev_config+0x7e>
1000ccc8:	7803      	ldrb	r3, [r0, #0]
1000ccca:	3511      	adds	r5, #17
1000cccc:	2b0f      	cmp	r3, #15
1000ccce:	d834      	bhi.n	1000cd3a <at_ble_set_dev_config+0x7e>
1000ccd0:	2380      	movs	r3, #128	; 0x80
1000ccd2:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000ccd4:	3d11      	subs	r5, #17
1000ccd6:	009b      	lsls	r3, r3, #2
1000ccd8:	429f      	cmp	r7, r3
1000ccda:	d82e      	bhi.n	1000cd3a <at_ble_set_dev_config+0x7e>
1000ccdc:	7fc5      	ldrb	r5, [r0, #31]
1000ccde:	7f83      	ldrb	r3, [r0, #30]
1000cce0:	01ad      	lsls	r5, r5, #6
1000cce2:	015b      	lsls	r3, r3, #5
1000cce4:	431d      	orrs	r5, r3
1000cce6:	7ec3      	ldrb	r3, [r0, #27]
1000cce8:	431d      	orrs	r5, r3
1000ccea:	7f43      	ldrb	r3, [r0, #29]
1000ccec:	011b      	lsls	r3, r3, #4
1000ccee:	431d      	orrs	r5, r3
1000ccf0:	7f03      	ldrb	r3, [r0, #28]
1000ccf2:	009b      	lsls	r3, r3, #2
1000ccf4:	431d      	orrs	r5, r3
1000ccf6:	4b12      	ldr	r3, [pc, #72]	; (1000cd40 <at_ble_set_dev_config+0x84>)
1000ccf8:	b2ed      	uxtb	r5, r5
1000ccfa:	711e      	strb	r6, [r3, #4]
1000ccfc:	7903      	ldrb	r3, [r0, #4]
1000ccfe:	3b02      	subs	r3, #2
1000cd00:	2b01      	cmp	r3, #1
1000cd02:	d801      	bhi.n	1000cd08 <at_ble_set_dev_config+0x4c>
1000cd04:	2302      	movs	r3, #2
1000cd06:	7103      	strb	r3, [r0, #4]
1000cd08:	1c04      	adds	r4, r0, #0
1000cd0a:	1c23      	adds	r3, r4, #0
1000cd0c:	330b      	adds	r3, #11
1000cd0e:	8861      	ldrh	r1, [r4, #2]
1000cd10:	9307      	str	r3, [sp, #28]
1000cd12:	7923      	ldrb	r3, [r4, #4]
1000cd14:	7800      	ldrb	r0, [r0, #0]
1000cd16:	9300      	str	r3, [sp, #0]
1000cd18:	9501      	str	r5, [sp, #4]
1000cd1a:	8c25      	ldrh	r5, [r4, #32]
1000cd1c:	1d62      	adds	r2, r4, #5
1000cd1e:	9502      	str	r5, [sp, #8]
1000cd20:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000cd22:	9b07      	ldr	r3, [sp, #28]
1000cd24:	9503      	str	r5, [sp, #12]
1000cd26:	9704      	str	r7, [sp, #16]
1000cd28:	4d06      	ldr	r5, [pc, #24]	; (1000cd44 <at_ble_set_dev_config+0x88>)
1000cd2a:	47a8      	blx	r5
1000cd2c:	7126      	strb	r6, [r4, #4]
1000cd2e:	1c05      	adds	r5, r0, #0
1000cd30:	1c21      	adds	r1, r4, #0
1000cd32:	4803      	ldr	r0, [pc, #12]	; (1000cd40 <at_ble_set_dev_config+0x84>)
1000cd34:	2226      	movs	r2, #38	; 0x26
1000cd36:	4b04      	ldr	r3, [pc, #16]	; (1000cd48 <at_ble_set_dev_config+0x8c>)
1000cd38:	4798      	blx	r3
1000cd3a:	1c28      	adds	r0, r5, #0
1000cd3c:	b009      	add	sp, #36	; 0x24
1000cd3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cd40:	1001493e 	.word	0x1001493e
1000cd44:	1000e259 	.word	0x1000e259
1000cd48:	1000ffab 	.word	0x1000ffab

1000cd4c <at_ble_init>:
1000cd4c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cd4e:	b087      	sub	sp, #28
1000cd50:	af03      	add	r7, sp, #12
1000cd52:	4954      	ldr	r1, [pc, #336]	; (1000cea4 <at_ble_init+0x158>)
1000cd54:	220b      	movs	r2, #11
1000cd56:	4b54      	ldr	r3, [pc, #336]	; (1000cea8 <at_ble_init+0x15c>)
1000cd58:	1c04      	adds	r4, r0, #0
1000cd5a:	1c38      	adds	r0, r7, #0
1000cd5c:	4798      	blx	r3
1000cd5e:	2205      	movs	r2, #5
1000cd60:	4b52      	ldr	r3, [pc, #328]	; (1000ceac <at_ble_init+0x160>)
1000cd62:	2640      	movs	r6, #64	; 0x40
1000cd64:	801a      	strh	r2, [r3, #0]
1000cd66:	2300      	movs	r3, #0
1000cd68:	4a51      	ldr	r2, [pc, #324]	; (1000ceb0 <at_ble_init+0x164>)
1000cd6a:	6013      	str	r3, [r2, #0]
1000cd6c:	4a51      	ldr	r2, [pc, #324]	; (1000ceb4 <at_ble_init+0x168>)
1000cd6e:	7013      	strb	r3, [r2, #0]
1000cd70:	4a51      	ldr	r2, [pc, #324]	; (1000ceb8 <at_ble_init+0x16c>)
1000cd72:	7013      	strb	r3, [r2, #0]
1000cd74:	4b51      	ldr	r3, [pc, #324]	; (1000cebc <at_ble_init+0x170>)
1000cd76:	4798      	blx	r3
1000cd78:	4b51      	ldr	r3, [pc, #324]	; (1000cec0 <at_ble_init+0x174>)
1000cd7a:	4798      	blx	r3
1000cd7c:	4b51      	ldr	r3, [pc, #324]	; (1000cec4 <at_ble_init+0x178>)
1000cd7e:	4798      	blx	r3
1000cd80:	4b51      	ldr	r3, [pc, #324]	; (1000cec8 <at_ble_init+0x17c>)
1000cd82:	4798      	blx	r3
1000cd84:	2c00      	cmp	r4, #0
1000cd86:	d100      	bne.n	1000cd8a <at_ble_init+0x3e>
1000cd88:	e089      	b.n	1000ce9e <at_ble_init+0x152>
1000cd8a:	68a3      	ldr	r3, [r4, #8]
1000cd8c:	2b00      	cmp	r3, #0
1000cd8e:	d100      	bne.n	1000cd92 <at_ble_init+0x46>
1000cd90:	e085      	b.n	1000ce9e <at_ble_init+0x152>
1000cd92:	6923      	ldr	r3, [r4, #16]
1000cd94:	2b00      	cmp	r3, #0
1000cd96:	d100      	bne.n	1000cd9a <at_ble_init+0x4e>
1000cd98:	e081      	b.n	1000ce9e <at_ble_init+0x152>
1000cd9a:	6820      	ldr	r0, [r4, #0]
1000cd9c:	2800      	cmp	r0, #0
1000cd9e:	d102      	bne.n	1000cda6 <at_ble_init+0x5a>
1000cda0:	6863      	ldr	r3, [r4, #4]
1000cda2:	2b00      	cmp	r3, #0
1000cda4:	d17b      	bne.n	1000ce9e <at_ble_init+0x152>
1000cda6:	4b49      	ldr	r3, [pc, #292]	; (1000cecc <at_ble_init+0x180>)
1000cda8:	6861      	ldr	r1, [r4, #4]
1000cdaa:	4798      	blx	r3
1000cdac:	4b48      	ldr	r3, [pc, #288]	; (1000ced0 <at_ble_init+0x184>)
1000cdae:	4798      	blx	r3
1000cdb0:	2801      	cmp	r0, #1
1000cdb2:	d901      	bls.n	1000cdb8 <at_ble_init+0x6c>
1000cdb4:	26e2      	movs	r6, #226	; 0xe2
1000cdb6:	e072      	b.n	1000ce9e <at_ble_init+0x152>
1000cdb8:	4846      	ldr	r0, [pc, #280]	; (1000ced4 <at_ble_init+0x188>)
1000cdba:	4b47      	ldr	r3, [pc, #284]	; (1000ced8 <at_ble_init+0x18c>)
1000cdbc:	4798      	blx	r3
1000cdbe:	2800      	cmp	r0, #0
1000cdc0:	d1f8      	bne.n	1000cdb4 <at_ble_init+0x68>
1000cdc2:	1c20      	adds	r0, r4, #0
1000cdc4:	4b45      	ldr	r3, [pc, #276]	; (1000cedc <at_ble_init+0x190>)
1000cdc6:	4798      	blx	r3
1000cdc8:	68e0      	ldr	r0, [r4, #12]
1000cdca:	68a1      	ldr	r1, [r4, #8]
1000cdcc:	4b44      	ldr	r3, [pc, #272]	; (1000cee0 <at_ble_init+0x194>)
1000cdce:	4798      	blx	r3
1000cdd0:	466b      	mov	r3, sp
1000cdd2:	2201      	movs	r2, #1
1000cdd4:	1cdc      	adds	r4, r3, #3
1000cdd6:	1c20      	adds	r0, r4, #0
1000cdd8:	a901      	add	r1, sp, #4
1000cdda:	4252      	negs	r2, r2
1000cddc:	4b41      	ldr	r3, [pc, #260]	; (1000cee4 <at_ble_init+0x198>)
1000cdde:	4798      	blx	r3
1000cde0:	2800      	cmp	r0, #0
1000cde2:	d102      	bne.n	1000cdea <at_ble_init+0x9e>
1000cde4:	7823      	ldrb	r3, [r4, #0]
1000cde6:	2b39      	cmp	r3, #57	; 0x39
1000cde8:	d1f2      	bne.n	1000cdd0 <at_ble_init+0x84>
1000cdea:	4b3f      	ldr	r3, [pc, #252]	; (1000cee8 <at_ble_init+0x19c>)
1000cdec:	4798      	blx	r3
1000cdee:	1e06      	subs	r6, r0, #0
1000cdf0:	d155      	bne.n	1000ce9e <at_ble_init+0x152>
1000cdf2:	1c03      	adds	r3, r0, #0
1000cdf4:	2101      	movs	r1, #1
1000cdf6:	4a3d      	ldr	r2, [pc, #244]	; (1000ceec <at_ble_init+0x1a0>)
1000cdf8:	4249      	negs	r1, r1
1000cdfa:	189a      	adds	r2, r3, r2
1000cdfc:	3312      	adds	r3, #18
1000cdfe:	8151      	strh	r1, [r2, #10]
1000ce00:	2b90      	cmp	r3, #144	; 0x90
1000ce02:	d1f7      	bne.n	1000cdf4 <at_ble_init+0xa8>
1000ce04:	4c3a      	ldr	r4, [pc, #232]	; (1000cef0 <at_ble_init+0x1a4>)
1000ce06:	3b81      	subs	r3, #129	; 0x81
1000ce08:	7023      	strb	r3, [r4, #0]
1000ce0a:	4b3a      	ldr	r3, [pc, #232]	; (1000cef4 <at_ble_init+0x1a8>)
1000ce0c:	4a3a      	ldr	r2, [pc, #232]	; (1000cef8 <at_ble_init+0x1ac>)
1000ce0e:	8063      	strh	r3, [r4, #2]
1000ce10:	2300      	movs	r3, #0
1000ce12:	7123      	strb	r3, [r4, #4]
1000ce14:	3301      	adds	r3, #1
1000ce16:	1e58      	subs	r0, r3, #1
1000ce18:	0119      	lsls	r1, r3, #4
1000ce1a:	4301      	orrs	r1, r0
1000ce1c:	3302      	adds	r3, #2
1000ce1e:	7011      	strb	r1, [r2, #0]
1000ce20:	3201      	adds	r2, #1
1000ce22:	2b21      	cmp	r3, #33	; 0x21
1000ce24:	d1f7      	bne.n	1000ce16 <at_ble_init+0xca>
1000ce26:	33e0      	adds	r3, #224	; 0xe0
1000ce28:	33ff      	adds	r3, #255	; 0xff
1000ce2a:	84a3      	strh	r3, [r4, #36]	; 0x24
1000ce2c:	1c23      	adds	r3, r4, #0
1000ce2e:	2500      	movs	r5, #0
1000ce30:	3373      	adds	r3, #115	; 0x73
1000ce32:	701d      	strb	r5, [r3, #0]
1000ce34:	1c23      	adds	r3, r4, #0
1000ce36:	3372      	adds	r3, #114	; 0x72
1000ce38:	701d      	strb	r5, [r3, #0]
1000ce3a:	1c23      	adds	r3, r4, #0
1000ce3c:	3376      	adds	r3, #118	; 0x76
1000ce3e:	701d      	strb	r5, [r3, #0]
1000ce40:	1c23      	adds	r3, r4, #0
1000ce42:	33cc      	adds	r3, #204	; 0xcc
1000ce44:	801d      	strh	r5, [r3, #0]
1000ce46:	1c22      	adds	r2, r4, #0
1000ce48:	23a0      	movs	r3, #160	; 0xa0
1000ce4a:	32d0      	adds	r2, #208	; 0xd0
1000ce4c:	005b      	lsls	r3, r3, #1
1000ce4e:	8013      	strh	r3, [r2, #0]
1000ce50:	1c22      	adds	r2, r4, #0
1000ce52:	32ce      	adds	r2, #206	; 0xce
1000ce54:	8013      	strh	r3, [r2, #0]
1000ce56:	1c23      	adds	r3, r4, #0
1000ce58:	33d2      	adds	r3, #210	; 0xd2
1000ce5a:	801d      	strh	r5, [r3, #0]
1000ce5c:	22fa      	movs	r2, #250	; 0xfa
1000ce5e:	1c23      	adds	r3, r4, #0
1000ce60:	0052      	lsls	r2, r2, #1
1000ce62:	33d4      	adds	r3, #212	; 0xd4
1000ce64:	801a      	strh	r2, [r3, #0]
1000ce66:	1c23      	adds	r3, r4, #0
1000ce68:	33d6      	adds	r3, #214	; 0xd6
1000ce6a:	701d      	strb	r5, [r3, #0]
1000ce6c:	1c20      	adds	r0, r4, #0
1000ce6e:	4b23      	ldr	r3, [pc, #140]	; (1000cefc <at_ble_init+0x1b0>)
1000ce70:	76e5      	strb	r5, [r4, #27]
1000ce72:	7725      	strb	r5, [r4, #28]
1000ce74:	7765      	strb	r5, [r4, #29]
1000ce76:	77a5      	strb	r5, [r4, #30]
1000ce78:	77e5      	strb	r5, [r4, #31]
1000ce7a:	8425      	strh	r5, [r4, #32]
1000ce7c:	8465      	strh	r5, [r4, #34]	; 0x22
1000ce7e:	4798      	blx	r3
1000ce80:	1c23      	adds	r3, r4, #0
1000ce82:	2207      	movs	r2, #7
1000ce84:	3374      	adds	r3, #116	; 0x74
1000ce86:	701a      	strb	r2, [r3, #0]
1000ce88:	1c23      	adds	r3, r4, #0
1000ce8a:	3204      	adds	r2, #4
1000ce8c:	33aa      	adds	r3, #170	; 0xaa
1000ce8e:	801a      	strh	r2, [r3, #0]
1000ce90:	1c2b      	adds	r3, r5, #0
1000ce92:	5d7a      	ldrb	r2, [r7, r5]
1000ce94:	33ac      	adds	r3, #172	; 0xac
1000ce96:	3501      	adds	r5, #1
1000ce98:	54e2      	strb	r2, [r4, r3]
1000ce9a:	2d0b      	cmp	r5, #11
1000ce9c:	d1f8      	bne.n	1000ce90 <at_ble_init+0x144>
1000ce9e:	1c30      	adds	r0, r6, #0
1000cea0:	b007      	add	sp, #28
1000cea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cea4:	10011f9c 	.word	0x10011f9c
1000cea8:	1000ffab 	.word	0x1000ffab
1000ceac:	100148ac 	.word	0x100148ac
1000ceb0:	10013c18 	.word	0x10013c18
1000ceb4:	10013b78 	.word	0x10013b78
1000ceb8:	100120f4 	.word	0x100120f4
1000cebc:	1000eaf9 	.word	0x1000eaf9
1000cec0:	1000cfdd 	.word	0x1000cfdd
1000cec4:	1000d059 	.word	0x1000d059
1000cec8:	1000d279 	.word	0x1000d279
1000cecc:	1000d095 	.word	0x1000d095
1000ced0:	1000a5d1 	.word	0x1000a5d1
1000ced4:	1000d579 	.word	0x1000d579
1000ced8:	1000a815 	.word	0x1000a815
1000cedc:	1000d621 	.word	0x1000d621
1000cee0:	1000c439 	.word	0x1000c439
1000cee4:	1000c4f5 	.word	0x1000c4f5
1000cee8:	1000e1e9 	.word	0x1000e1e9
1000ceec:	100148ae 	.word	0x100148ae
1000cef0:	1001493e 	.word	0x1001493e
1000cef4:	00003a98 	.word	0x00003a98
1000cef8:	10014949 	.word	0x10014949
1000cefc:	1000ccbd 	.word	0x1000ccbd

1000cf00 <at_ble_addr_set>:
1000cf00:	b538      	push	{r3, r4, r5, lr}
1000cf02:	1c45      	adds	r5, r0, #1
1000cf04:	1c03      	adds	r3, r0, #0
1000cf06:	20cf      	movs	r0, #207	; 0xcf
1000cf08:	2d00      	cmp	r5, #0
1000cf0a:	d018      	beq.n	1000cf3e <at_ble_addr_set+0x3e>
1000cf0c:	781a      	ldrb	r2, [r3, #0]
1000cf0e:	2a03      	cmp	r2, #3
1000cf10:	d815      	bhi.n	1000cf3e <at_ble_addr_set+0x3e>
1000cf12:	2a01      	cmp	r2, #1
1000cf14:	d102      	bne.n	1000cf1c <at_ble_addr_set+0x1c>
1000cf16:	785a      	ldrb	r2, [r3, #1]
1000cf18:	2a00      	cmp	r2, #0
1000cf1a:	d010      	beq.n	1000cf3e <at_ble_addr_set+0x3e>
1000cf1c:	1c1c      	adds	r4, r3, #0
1000cf1e:	1c29      	adds	r1, r5, #0
1000cf20:	2206      	movs	r2, #6
1000cf22:	4b07      	ldr	r3, [pc, #28]	; (1000cf40 <at_ble_addr_set+0x40>)
1000cf24:	4807      	ldr	r0, [pc, #28]	; (1000cf44 <at_ble_addr_set+0x44>)
1000cf26:	4798      	blx	r3
1000cf28:	7823      	ldrb	r3, [r4, #0]
1000cf2a:	4807      	ldr	r0, [pc, #28]	; (1000cf48 <at_ble_addr_set+0x48>)
1000cf2c:	7103      	strb	r3, [r0, #4]
1000cf2e:	4b07      	ldr	r3, [pc, #28]	; (1000cf4c <at_ble_addr_set+0x4c>)
1000cf30:	4798      	blx	r3
1000cf32:	7823      	ldrb	r3, [r4, #0]
1000cf34:	2b00      	cmp	r3, #0
1000cf36:	d102      	bne.n	1000cf3e <at_ble_addr_set+0x3e>
1000cf38:	1c28      	adds	r0, r5, #0
1000cf3a:	4b05      	ldr	r3, [pc, #20]	; (1000cf50 <at_ble_addr_set+0x50>)
1000cf3c:	4798      	blx	r3
1000cf3e:	bd38      	pop	{r3, r4, r5, pc}
1000cf40:	1000ffab 	.word	0x1000ffab
1000cf44:	10014943 	.word	0x10014943
1000cf48:	1001493e 	.word	0x1001493e
1000cf4c:	1000ccbd 	.word	0x1000ccbd
1000cf50:	1000d6a5 	.word	0x1000d6a5

1000cf54 <at_ble_scan_stop>:
1000cf54:	b510      	push	{r4, lr}
1000cf56:	4b05      	ldr	r3, [pc, #20]	; (1000cf6c <at_ble_scan_stop+0x18>)
1000cf58:	4798      	blx	r3
1000cf5a:	1e04      	subs	r4, r0, #0
1000cf5c:	d103      	bne.n	1000cf66 <at_ble_scan_stop+0x12>
1000cf5e:	20d1      	movs	r0, #209	; 0xd1
1000cf60:	4b03      	ldr	r3, [pc, #12]	; (1000cf70 <at_ble_scan_stop+0x1c>)
1000cf62:	0100      	lsls	r0, r0, #4
1000cf64:	4798      	blx	r3
1000cf66:	1c20      	adds	r0, r4, #0
1000cf68:	bd10      	pop	{r4, pc}
1000cf6a:	46c0      	nop			; (mov r8, r8)
1000cf6c:	1000e441 	.word	0x1000e441
1000cf70:	1000cbcd 	.word	0x1000cbcd

1000cf74 <at_ble_disconnect>:
1000cf74:	b538      	push	{r3, r4, r5, lr}
1000cf76:	1c04      	adds	r4, r0, #0
1000cf78:	4b04      	ldr	r3, [pc, #16]	; (1000cf8c <at_ble_disconnect+0x18>)
1000cf7a:	1c08      	adds	r0, r1, #0
1000cf7c:	1c21      	adds	r1, r4, #0
1000cf7e:	4798      	blx	r3
1000cf80:	1c05      	adds	r5, r0, #0
1000cf82:	4b03      	ldr	r3, [pc, #12]	; (1000cf90 <at_ble_disconnect+0x1c>)
1000cf84:	1c20      	adds	r0, r4, #0
1000cf86:	4798      	blx	r3
1000cf88:	1c28      	adds	r0, r5, #0
1000cf8a:	bd38      	pop	{r3, r4, r5, pc}
1000cf8c:	1000dab9 	.word	0x1000dab9
1000cf90:	1000cc11 	.word	0x1000cc11

1000cf94 <at_ble_conn_update_reply>:
1000cf94:	b510      	push	{r4, lr}
1000cf96:	4c01      	ldr	r4, [pc, #4]	; (1000cf9c <at_ble_conn_update_reply+0x8>)
1000cf98:	47a0      	blx	r4
1000cf9a:	bd10      	pop	{r4, pc}
1000cf9c:	1000dfa9 	.word	0x1000dfa9

1000cfa0 <at_ble_random_address_resolve>:
1000cfa0:	b510      	push	{r4, lr}
1000cfa2:	23cf      	movs	r3, #207	; 0xcf
1000cfa4:	2800      	cmp	r0, #0
1000cfa6:	d00a      	beq.n	1000cfbe <at_ble_random_address_resolve+0x1e>
1000cfa8:	2900      	cmp	r1, #0
1000cfaa:	d008      	beq.n	1000cfbe <at_ble_random_address_resolve+0x1e>
1000cfac:	2a00      	cmp	r2, #0
1000cfae:	d006      	beq.n	1000cfbe <at_ble_random_address_resolve+0x1e>
1000cfb0:	780c      	ldrb	r4, [r1, #0]
1000cfb2:	2c02      	cmp	r4, #2
1000cfb4:	d103      	bne.n	1000cfbe <at_ble_random_address_resolve+0x1e>
1000cfb6:	4b03      	ldr	r3, [pc, #12]	; (1000cfc4 <at_ble_random_address_resolve+0x24>)
1000cfb8:	3101      	adds	r1, #1
1000cfba:	4798      	blx	r3
1000cfbc:	2300      	movs	r3, #0
1000cfbe:	1c18      	adds	r0, r3, #0
1000cfc0:	bd10      	pop	{r4, pc}
1000cfc2:	46c0      	nop			; (mov r8, r8)
1000cfc4:	1000e69d 	.word	0x1000e69d

1000cfc8 <at_ble_uuid_len2type>:
1000cfc8:	1e83      	subs	r3, r0, #2
1000cfca:	b2db      	uxtb	r3, r3
1000cfcc:	2003      	movs	r0, #3
1000cfce:	2b0e      	cmp	r3, #14
1000cfd0:	d801      	bhi.n	1000cfd6 <at_ble_uuid_len2type+0xe>
1000cfd2:	4a01      	ldr	r2, [pc, #4]	; (1000cfd8 <at_ble_uuid_len2type+0x10>)
1000cfd4:	5cd0      	ldrb	r0, [r2, r3]
1000cfd6:	4770      	bx	lr
1000cfd8:	10011fa7 	.word	0x10011fa7

1000cfdc <init_gatt_client_module>:
1000cfdc:	2200      	movs	r2, #0
1000cfde:	4b01      	ldr	r3, [pc, #4]	; (1000cfe4 <init_gatt_client_module+0x8>)
1000cfe0:	801a      	strh	r2, [r3, #0]
1000cfe2:	4770      	bx	lr
1000cfe4:	10013b70 	.word	0x10013b70

1000cfe8 <db_searchATT>:
1000cfe8:	b570      	push	{r4, r5, r6, lr}
1000cfea:	1c05      	adds	r5, r0, #0
1000cfec:	2400      	movs	r4, #0
1000cfee:	4b0c      	ldr	r3, [pc, #48]	; (1000d020 <db_searchATT+0x38>)
1000cff0:	6819      	ldr	r1, [r3, #0]
1000cff2:	4b0c      	ldr	r3, [pc, #48]	; (1000d024 <db_searchATT+0x3c>)
1000cff4:	681e      	ldr	r6, [r3, #0]
1000cff6:	428c      	cmp	r4, r1
1000cff8:	dc10      	bgt.n	1000d01c <db_searchATT+0x34>
1000cffa:	200c      	movs	r0, #12
1000cffc:	1863      	adds	r3, r4, r1
1000cffe:	0fda      	lsrs	r2, r3, #31
1000d000:	18d3      	adds	r3, r2, r3
1000d002:	1c02      	adds	r2, r0, #0
1000d004:	105b      	asrs	r3, r3, #1
1000d006:	435a      	muls	r2, r3
1000d008:	18b0      	adds	r0, r6, r2
1000d00a:	8802      	ldrh	r2, [r0, #0]
1000d00c:	42aa      	cmp	r2, r5
1000d00e:	d201      	bcs.n	1000d014 <db_searchATT+0x2c>
1000d010:	1e59      	subs	r1, r3, #1
1000d012:	e7f0      	b.n	1000cff6 <db_searchATT+0xe>
1000d014:	42aa      	cmp	r2, r5
1000d016:	d902      	bls.n	1000d01e <db_searchATT+0x36>
1000d018:	1c5c      	adds	r4, r3, #1
1000d01a:	e7ec      	b.n	1000cff6 <db_searchATT+0xe>
1000d01c:	2000      	movs	r0, #0
1000d01e:	bd70      	pop	{r4, r5, r6, pc}
1000d020:	10013b84 	.word	0x10013b84
1000d024:	10013b7c 	.word	0x10013b7c

1000d028 <at_ble_read_authorize_reply.part.1>:
1000d028:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000d02a:	4b09      	ldr	r3, [pc, #36]	; (1000d050 <at_ble_read_authorize_reply.part.1+0x28>)
1000d02c:	1c05      	adds	r5, r0, #0
1000d02e:	1c08      	adds	r0, r1, #0
1000d030:	1c0c      	adds	r4, r1, #0
1000d032:	4798      	blx	r3
1000d034:	2800      	cmp	r0, #0
1000d036:	d009      	beq.n	1000d04c <at_ble_read_authorize_reply.part.1+0x24>
1000d038:	6882      	ldr	r2, [r0, #8]
1000d03a:	2a00      	cmp	r2, #0
1000d03c:	d006      	beq.n	1000d04c <at_ble_read_authorize_reply.part.1+0x24>
1000d03e:	8883      	ldrh	r3, [r0, #4]
1000d040:	1c29      	adds	r1, r5, #0
1000d042:	9200      	str	r2, [sp, #0]
1000d044:	1c20      	adds	r0, r4, #0
1000d046:	2200      	movs	r2, #0
1000d048:	4c02      	ldr	r4, [pc, #8]	; (1000d054 <at_ble_read_authorize_reply.part.1+0x2c>)
1000d04a:	47a0      	blx	r4
1000d04c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000d04e:	46c0      	nop			; (mov r8, r8)
1000d050:	1000cfe9 	.word	0x1000cfe9
1000d054:	1000e799 	.word	0x1000e799

1000d058 <initi_gatt_server_module>:
1000d058:	2300      	movs	r3, #0
1000d05a:	4a07      	ldr	r2, [pc, #28]	; (1000d078 <initi_gatt_server_module+0x20>)
1000d05c:	7013      	strb	r3, [r2, #0]
1000d05e:	4a07      	ldr	r2, [pc, #28]	; (1000d07c <initi_gatt_server_module+0x24>)
1000d060:	6013      	str	r3, [r2, #0]
1000d062:	4a07      	ldr	r2, [pc, #28]	; (1000d080 <initi_gatt_server_module+0x28>)
1000d064:	6013      	str	r3, [r2, #0]
1000d066:	4a07      	ldr	r2, [pc, #28]	; (1000d084 <initi_gatt_server_module+0x2c>)
1000d068:	6013      	str	r3, [r2, #0]
1000d06a:	4a07      	ldr	r2, [pc, #28]	; (1000d088 <initi_gatt_server_module+0x30>)
1000d06c:	6013      	str	r3, [r2, #0]
1000d06e:	4a07      	ldr	r2, [pc, #28]	; (1000d08c <initi_gatt_server_module+0x34>)
1000d070:	6013      	str	r3, [r2, #0]
1000d072:	4a07      	ldr	r2, [pc, #28]	; (1000d090 <initi_gatt_server_module+0x38>)
1000d074:	6013      	str	r3, [r2, #0]
1000d076:	4770      	bx	lr
1000d078:	10013b78 	.word	0x10013b78
1000d07c:	10013b88 	.word	0x10013b88
1000d080:	10013b84 	.word	0x10013b84
1000d084:	10013b74 	.word	0x10013b74
1000d088:	10013b80 	.word	0x10013b80
1000d08c:	10013b7c 	.word	0x10013b7c
1000d090:	10013b8c 	.word	0x10013b8c

1000d094 <db_init>:
1000d094:	4b0a      	ldr	r3, [pc, #40]	; (1000d0c0 <db_init+0x2c>)
1000d096:	4a0b      	ldr	r2, [pc, #44]	; (1000d0c4 <db_init+0x30>)
1000d098:	6018      	str	r0, [r3, #0]
1000d09a:	084b      	lsrs	r3, r1, #1
1000d09c:	6013      	str	r3, [r2, #0]
1000d09e:	4a0a      	ldr	r2, [pc, #40]	; (1000d0c8 <db_init+0x34>)
1000d0a0:	18c3      	adds	r3, r0, r3
1000d0a2:	6013      	str	r3, [r2, #0]
1000d0a4:	4a09      	ldr	r2, [pc, #36]	; (1000d0cc <db_init+0x38>)
1000d0a6:	1841      	adds	r1, r0, r1
1000d0a8:	6013      	str	r3, [r2, #0]
1000d0aa:	2303      	movs	r3, #3
1000d0ac:	2200      	movs	r2, #0
1000d0ae:	3103      	adds	r1, #3
1000d0b0:	4399      	bics	r1, r3
1000d0b2:	4b07      	ldr	r3, [pc, #28]	; (1000d0d0 <db_init+0x3c>)
1000d0b4:	3904      	subs	r1, #4
1000d0b6:	6019      	str	r1, [r3, #0]
1000d0b8:	4b06      	ldr	r3, [pc, #24]	; (1000d0d4 <db_init+0x40>)
1000d0ba:	601a      	str	r2, [r3, #0]
1000d0bc:	4770      	bx	lr
1000d0be:	46c0      	nop			; (mov r8, r8)
1000d0c0:	10013b8c 	.word	0x10013b8c
1000d0c4:	10013b88 	.word	0x10013b88
1000d0c8:	10013b74 	.word	0x10013b74
1000d0cc:	10013b80 	.word	0x10013b80
1000d0d0:	10013b7c 	.word	0x10013b7c
1000d0d4:	10013b84 	.word	0x10013b84

1000d0d8 <at_ble_characteristic_value_set>:
1000d0d8:	b570      	push	{r4, r5, r6, lr}
1000d0da:	4b0b      	ldr	r3, [pc, #44]	; (1000d108 <at_ble_characteristic_value_set+0x30>)
1000d0dc:	1c06      	adds	r6, r0, #0
1000d0de:	1c0c      	adds	r4, r1, #0
1000d0e0:	1c15      	adds	r5, r2, #0
1000d0e2:	4798      	blx	r3
1000d0e4:	2800      	cmp	r0, #0
1000d0e6:	d008      	beq.n	1000d0fa <at_ble_characteristic_value_set+0x22>
1000d0e8:	6880      	ldr	r0, [r0, #8]
1000d0ea:	2800      	cmp	r0, #0
1000d0ec:	d005      	beq.n	1000d0fa <at_ble_characteristic_value_set+0x22>
1000d0ee:	1c21      	adds	r1, r4, #0
1000d0f0:	1c2a      	adds	r2, r5, #0
1000d0f2:	4b06      	ldr	r3, [pc, #24]	; (1000d10c <at_ble_characteristic_value_set+0x34>)
1000d0f4:	4798      	blx	r3
1000d0f6:	2000      	movs	r0, #0
1000d0f8:	e004      	b.n	1000d104 <at_ble_characteristic_value_set+0x2c>
1000d0fa:	1c30      	adds	r0, r6, #0
1000d0fc:	1c29      	adds	r1, r5, #0
1000d0fe:	1c22      	adds	r2, r4, #0
1000d100:	4b03      	ldr	r3, [pc, #12]	; (1000d110 <at_ble_characteristic_value_set+0x38>)
1000d102:	4798      	blx	r3
1000d104:	bd70      	pop	{r4, r5, r6, pc}
1000d106:	46c0      	nop			; (mov r8, r8)
1000d108:	1000cfe9 	.word	0x1000cfe9
1000d10c:	1000ffab 	.word	0x1000ffab
1000d110:	1000eb0d 	.word	0x1000eb0d

1000d114 <at_ble_characteristic_value_get>:
1000d114:	b570      	push	{r4, r5, r6, lr}
1000d116:	4b0c      	ldr	r3, [pc, #48]	; (1000d148 <at_ble_characteristic_value_get+0x34>)
1000d118:	1c06      	adds	r6, r0, #0
1000d11a:	1c0c      	adds	r4, r1, #0
1000d11c:	1c15      	adds	r5, r2, #0
1000d11e:	4798      	blx	r3
1000d120:	2800      	cmp	r0, #0
1000d122:	d00b      	beq.n	1000d13c <at_ble_characteristic_value_get+0x28>
1000d124:	6883      	ldr	r3, [r0, #8]
1000d126:	2b00      	cmp	r3, #0
1000d128:	d008      	beq.n	1000d13c <at_ble_characteristic_value_get+0x28>
1000d12a:	8883      	ldrh	r3, [r0, #4]
1000d12c:	802b      	strh	r3, [r5, #0]
1000d12e:	8882      	ldrh	r2, [r0, #4]
1000d130:	6881      	ldr	r1, [r0, #8]
1000d132:	4b06      	ldr	r3, [pc, #24]	; (1000d14c <at_ble_characteristic_value_get+0x38>)
1000d134:	1c20      	adds	r0, r4, #0
1000d136:	4798      	blx	r3
1000d138:	2000      	movs	r0, #0
1000d13a:	e004      	b.n	1000d146 <at_ble_characteristic_value_get+0x32>
1000d13c:	1c30      	adds	r0, r6, #0
1000d13e:	1c29      	adds	r1, r5, #0
1000d140:	1c22      	adds	r2, r4, #0
1000d142:	4b03      	ldr	r3, [pc, #12]	; (1000d150 <at_ble_characteristic_value_get+0x3c>)
1000d144:	4798      	blx	r3
1000d146:	bd70      	pop	{r4, r5, r6, pc}
1000d148:	1000cfe9 	.word	0x1000cfe9
1000d14c:	1000ffab 	.word	0x1000ffab
1000d150:	1000eb99 	.word	0x1000eb99

1000d154 <at_ble_write_authorize_reply>:
1000d154:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d156:	b085      	sub	sp, #20
1000d158:	1c04      	adds	r4, r0, #0
1000d15a:	9101      	str	r1, [sp, #4]
1000d15c:	2900      	cmp	r1, #0
1000d15e:	d128      	bne.n	1000d1b2 <at_ble_write_authorize_reply+0x5e>
1000d160:	8843      	ldrh	r3, [r0, #2]
1000d162:	1c27      	adds	r7, r4, #0
1000d164:	9300      	str	r3, [sp, #0]
1000d166:	1c18      	adds	r0, r3, #0
1000d168:	4b16      	ldr	r3, [pc, #88]	; (1000d1c4 <at_ble_write_authorize_reply+0x70>)
1000d16a:	4798      	blx	r3
1000d16c:	3708      	adds	r7, #8
1000d16e:	2800      	cmp	r0, #0
1000d170:	d009      	beq.n	1000d186 <at_ble_write_authorize_reply+0x32>
1000d172:	6880      	ldr	r0, [r0, #8]
1000d174:	2800      	cmp	r0, #0
1000d176:	d006      	beq.n	1000d186 <at_ble_write_authorize_reply+0x32>
1000d178:	88a3      	ldrh	r3, [r4, #4]
1000d17a:	88e2      	ldrh	r2, [r4, #6]
1000d17c:	18c0      	adds	r0, r0, r3
1000d17e:	1c39      	adds	r1, r7, #0
1000d180:	4b11      	ldr	r3, [pc, #68]	; (1000d1c8 <at_ble_write_authorize_reply+0x74>)
1000d182:	4798      	blx	r3
1000d184:	e015      	b.n	1000d1b2 <at_ble_write_authorize_reply+0x5e>
1000d186:	ab02      	add	r3, sp, #8
1000d188:	1d9e      	adds	r6, r3, #6
1000d18a:	2300      	movs	r3, #0
1000d18c:	4d0f      	ldr	r5, [pc, #60]	; (1000d1cc <at_ble_write_authorize_reply+0x78>)
1000d18e:	8033      	strh	r3, [r6, #0]
1000d190:	6829      	ldr	r1, [r5, #0]
1000d192:	1c32      	adds	r2, r6, #0
1000d194:	4b0e      	ldr	r3, [pc, #56]	; (1000d1d0 <at_ble_write_authorize_reply+0x7c>)
1000d196:	9800      	ldr	r0, [sp, #0]
1000d198:	4798      	blx	r3
1000d19a:	682b      	ldr	r3, [r5, #0]
1000d19c:	88a0      	ldrh	r0, [r4, #4]
1000d19e:	88e2      	ldrh	r2, [r4, #6]
1000d1a0:	1818      	adds	r0, r3, r0
1000d1a2:	1c39      	adds	r1, r7, #0
1000d1a4:	4b08      	ldr	r3, [pc, #32]	; (1000d1c8 <at_ble_write_authorize_reply+0x74>)
1000d1a6:	4798      	blx	r3
1000d1a8:	8860      	ldrh	r0, [r4, #2]
1000d1aa:	8832      	ldrh	r2, [r6, #0]
1000d1ac:	6829      	ldr	r1, [r5, #0]
1000d1ae:	4b09      	ldr	r3, [pc, #36]	; (1000d1d4 <at_ble_write_authorize_reply+0x80>)
1000d1b0:	4798      	blx	r3
1000d1b2:	8860      	ldrh	r0, [r4, #2]
1000d1b4:	8821      	ldrh	r1, [r4, #0]
1000d1b6:	9a01      	ldr	r2, [sp, #4]
1000d1b8:	4b07      	ldr	r3, [pc, #28]	; (1000d1d8 <at_ble_write_authorize_reply+0x84>)
1000d1ba:	4798      	blx	r3
1000d1bc:	2000      	movs	r0, #0
1000d1be:	b005      	add	sp, #20
1000d1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d1c2:	46c0      	nop			; (mov r8, r8)
1000d1c4:	1000cfe9 	.word	0x1000cfe9
1000d1c8:	1000ffab 	.word	0x1000ffab
1000d1cc:	100120f8 	.word	0x100120f8
1000d1d0:	1000d115 	.word	0x1000d115
1000d1d4:	1000d0d9 	.word	0x1000d0d9
1000d1d8:	1000e805 	.word	0x1000e805

1000d1dc <gatts_handle_read_req>:
1000d1dc:	b538      	push	{r3, r4, r5, lr}
1000d1de:	1c0c      	adds	r4, r1, #0
1000d1e0:	4b07      	ldr	r3, [pc, #28]	; (1000d200 <gatts_handle_read_req+0x24>)
1000d1e2:	4798      	blx	r3
1000d1e4:	8865      	ldrh	r5, [r4, #2]
1000d1e6:	4b07      	ldr	r3, [pc, #28]	; (1000d204 <gatts_handle_read_req+0x28>)
1000d1e8:	1c28      	adds	r0, r5, #0
1000d1ea:	4798      	blx	r3
1000d1ec:	7883      	ldrb	r3, [r0, #2]
1000d1ee:	2026      	movs	r0, #38	; 0x26
1000d1f0:	07db      	lsls	r3, r3, #31
1000d1f2:	d404      	bmi.n	1000d1fe <gatts_handle_read_req+0x22>
1000d1f4:	8820      	ldrh	r0, [r4, #0]
1000d1f6:	1c29      	adds	r1, r5, #0
1000d1f8:	4b03      	ldr	r3, [pc, #12]	; (1000d208 <gatts_handle_read_req+0x2c>)
1000d1fa:	4798      	blx	r3
1000d1fc:	203b      	movs	r0, #59	; 0x3b
1000d1fe:	bd38      	pop	{r3, r4, r5, pc}
1000d200:	1000e749 	.word	0x1000e749
1000d204:	1000cfe9 	.word	0x1000cfe9
1000d208:	1000d029 	.word	0x1000d029

1000d20c <gatts_handle_att_info_req>:
1000d20c:	b538      	push	{r3, r4, r5, lr}
1000d20e:	1c0d      	adds	r5, r1, #0
1000d210:	4b0a      	ldr	r3, [pc, #40]	; (1000d23c <gatts_handle_att_info_req+0x30>)
1000d212:	1c14      	adds	r4, r2, #0
1000d214:	4798      	blx	r3
1000d216:	882d      	ldrh	r5, [r5, #0]
1000d218:	4b09      	ldr	r3, [pc, #36]	; (1000d240 <gatts_handle_att_info_req+0x34>)
1000d21a:	1c28      	adds	r0, r5, #0
1000d21c:	4798      	blx	r3
1000d21e:	0a22      	lsrs	r2, r4, #8
1000d220:	1c03      	adds	r3, r0, #0
1000d222:	4c08      	ldr	r4, [pc, #32]	; (1000d244 <gatts_handle_att_info_req+0x38>)
1000d224:	b291      	uxth	r1, r2
1000d226:	2800      	cmp	r0, #0
1000d228:	d003      	beq.n	1000d232 <gatts_handle_att_info_req+0x26>
1000d22a:	8882      	ldrh	r2, [r0, #4]
1000d22c:	2300      	movs	r3, #0
1000d22e:	1c28      	adds	r0, r5, #0
1000d230:	e001      	b.n	1000d236 <gatts_handle_att_info_req+0x2a>
1000d232:	1c28      	adds	r0, r5, #0
1000d234:	2201      	movs	r2, #1
1000d236:	47a0      	blx	r4
1000d238:	203b      	movs	r0, #59	; 0x3b
1000d23a:	bd38      	pop	{r3, r4, r5, pc}
1000d23c:	1000e78d 	.word	0x1000e78d
1000d240:	1000cfe9 	.word	0x1000cfe9
1000d244:	1000e849 	.word	0x1000e849

1000d248 <gatts_handle_write_req>:
1000d248:	b510      	push	{r4, lr}
1000d24a:	1c14      	adds	r4, r2, #0
1000d24c:	4b07      	ldr	r3, [pc, #28]	; (1000d26c <gatts_handle_write_req+0x24>)
1000d24e:	4798      	blx	r3
1000d250:	4b07      	ldr	r3, [pc, #28]	; (1000d270 <gatts_handle_write_req+0x28>)
1000d252:	8860      	ldrh	r0, [r4, #2]
1000d254:	4798      	blx	r3
1000d256:	2302      	movs	r3, #2
1000d258:	7881      	ldrb	r1, [r0, #2]
1000d25a:	2022      	movs	r0, #34	; 0x22
1000d25c:	4019      	ands	r1, r3
1000d25e:	d103      	bne.n	1000d268 <gatts_handle_write_req+0x20>
1000d260:	1c20      	adds	r0, r4, #0
1000d262:	4b04      	ldr	r3, [pc, #16]	; (1000d274 <gatts_handle_write_req+0x2c>)
1000d264:	4798      	blx	r3
1000d266:	201f      	movs	r0, #31
1000d268:	bd10      	pop	{r4, pc}
1000d26a:	46c0      	nop			; (mov r8, r8)
1000d26c:	1000e755 	.word	0x1000e755
1000d270:	1000cfe9 	.word	0x1000cfe9
1000d274:	1000d155 	.word	0x1000d155

1000d278 <init_l2cc_task_module>:
1000d278:	220a      	movs	r2, #10
1000d27a:	4b01      	ldr	r3, [pc, #4]	; (1000d280 <init_l2cc_task_module+0x8>)
1000d27c:	701a      	strb	r2, [r3, #0]
1000d27e:	4770      	bx	lr
1000d280:	100120f4 	.word	0x100120f4

1000d284 <l2cc_data_send_rsp_handler>:
1000d284:	b510      	push	{r4, lr}
1000d286:	7802      	ldrb	r2, [r0, #0]
1000d288:	700a      	strb	r2, [r1, #0]
1000d28a:	7883      	ldrb	r3, [r0, #2]
1000d28c:	7844      	ldrb	r4, [r0, #1]
1000d28e:	021b      	lsls	r3, r3, #8
1000d290:	4323      	orrs	r3, r4
1000d292:	804b      	strh	r3, [r1, #2]
1000d294:	7903      	ldrb	r3, [r0, #4]
1000d296:	78c0      	ldrb	r0, [r0, #3]
1000d298:	021b      	lsls	r3, r3, #8
1000d29a:	4303      	orrs	r3, r0
1000d29c:	808b      	strh	r3, [r1, #4]
1000d29e:	2a00      	cmp	r2, #0
1000d2a0:	d103      	bne.n	1000d2aa <l2cc_data_send_rsp_handler+0x26>
1000d2a2:	4a02      	ldr	r2, [pc, #8]	; (1000d2ac <l2cc_data_send_rsp_handler+0x28>)
1000d2a4:	7813      	ldrb	r3, [r2, #0]
1000d2a6:	3301      	adds	r3, #1
1000d2a8:	7013      	strb	r3, [r2, #0]
1000d2aa:	bd10      	pop	{r4, pc}
1000d2ac:	100120f4 	.word	0x100120f4

1000d2b0 <l2cc_data_received_handler>:
1000d2b0:	b508      	push	{r3, lr}
1000d2b2:	1c03      	adds	r3, r0, #0
1000d2b4:	7842      	ldrb	r2, [r0, #1]
1000d2b6:	7800      	ldrb	r0, [r0, #0]
1000d2b8:	0212      	lsls	r2, r2, #8
1000d2ba:	4302      	orrs	r2, r0
1000d2bc:	800a      	strh	r2, [r1, #0]
1000d2be:	78da      	ldrb	r2, [r3, #3]
1000d2c0:	7898      	ldrb	r0, [r3, #2]
1000d2c2:	0212      	lsls	r2, r2, #8
1000d2c4:	4302      	orrs	r2, r0
1000d2c6:	804a      	strh	r2, [r1, #2]
1000d2c8:	795a      	ldrb	r2, [r3, #5]
1000d2ca:	7918      	ldrb	r0, [r3, #4]
1000d2cc:	0212      	lsls	r2, r2, #8
1000d2ce:	4302      	orrs	r2, r0
1000d2d0:	808a      	strh	r2, [r1, #4]
1000d2d2:	1d88      	adds	r0, r1, #6
1000d2d4:	1d99      	adds	r1, r3, #6
1000d2d6:	4b01      	ldr	r3, [pc, #4]	; (1000d2dc <l2cc_data_received_handler+0x2c>)
1000d2d8:	4798      	blx	r3
1000d2da:	bd08      	pop	{r3, pc}
1000d2dc:	1000ffab 	.word	0x1000ffab

1000d2e0 <at_ble_authenticate>:
1000d2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d2e2:	1c0c      	adds	r4, r1, #0
1000d2e4:	211f      	movs	r1, #31
1000d2e6:	b08b      	sub	sp, #44	; 0x2c
1000d2e8:	9307      	str	r3, [sp, #28]
1000d2ea:	ab02      	add	r3, sp, #8
1000d2ec:	18c9      	adds	r1, r1, r3
1000d2ee:	230f      	movs	r3, #15
1000d2f0:	700b      	strb	r3, [r1, #0]
1000d2f2:	4b40      	ldr	r3, [pc, #256]	; (1000d3f4 <at_ble_authenticate+0x114>)
1000d2f4:	1c05      	adds	r5, r0, #0
1000d2f6:	1c16      	adds	r6, r2, #0
1000d2f8:	4798      	blx	r3
1000d2fa:	1c07      	adds	r7, r0, #0
1000d2fc:	2001      	movs	r0, #1
1000d2fe:	2f07      	cmp	r7, #7
1000d300:	d875      	bhi.n	1000d3ee <at_ble_authenticate+0x10e>
1000d302:	2c00      	cmp	r4, #0
1000d304:	d113      	bne.n	1000d32e <at_ble_authenticate+0x4e>
1000d306:	2312      	movs	r3, #18
1000d308:	435f      	muls	r7, r3
1000d30a:	4b3b      	ldr	r3, [pc, #236]	; (1000d3f8 <at_ble_authenticate+0x118>)
1000d30c:	5cfb      	ldrb	r3, [r7, r3]
1000d30e:	4283      	cmp	r3, r0
1000d310:	d001      	beq.n	1000d316 <at_ble_authenticate+0x36>
1000d312:	20cf      	movs	r0, #207	; 0xcf
1000d314:	e06b      	b.n	1000d3ee <at_ble_authenticate+0x10e>
1000d316:	9504      	str	r5, [sp, #16]
1000d318:	9400      	str	r4, [sp, #0]
1000d31a:	9401      	str	r4, [sp, #4]
1000d31c:	9402      	str	r4, [sp, #8]
1000d31e:	9403      	str	r4, [sp, #12]
1000d320:	1c20      	adds	r0, r4, #0
1000d322:	1c21      	adds	r1, r4, #0
1000d324:	1c22      	adds	r2, r4, #0
1000d326:	1c23      	adds	r3, r4, #0
1000d328:	4d34      	ldr	r5, [pc, #208]	; (1000d3fc <at_ble_authenticate+0x11c>)
1000d32a:	47a8      	blx	r5
1000d32c:	e05e      	b.n	1000d3ec <at_ble_authenticate+0x10c>
1000d32e:	7922      	ldrb	r2, [r4, #4]
1000d330:	2a06      	cmp	r2, #6
1000d332:	d9ee      	bls.n	1000d312 <at_ble_authenticate+0x32>
1000d334:	7963      	ldrb	r3, [r4, #5]
1000d336:	2b10      	cmp	r3, #16
1000d338:	d8eb      	bhi.n	1000d312 <at_ble_authenticate+0x32>
1000d33a:	429a      	cmp	r2, r3
1000d33c:	d8e9      	bhi.n	1000d312 <at_ble_authenticate+0x32>
1000d33e:	7a23      	ldrb	r3, [r4, #8]
1000d340:	2b04      	cmp	r3, #4
1000d342:	d8e6      	bhi.n	1000d312 <at_ble_authenticate+0x32>
1000d344:	79a3      	ldrb	r3, [r4, #6]
1000d346:	2b07      	cmp	r3, #7
1000d348:	d8e3      	bhi.n	1000d312 <at_ble_authenticate+0x32>
1000d34a:	79e3      	ldrb	r3, [r4, #7]
1000d34c:	2b07      	cmp	r3, #7
1000d34e:	d8e0      	bhi.n	1000d312 <at_ble_authenticate+0x32>
1000d350:	78a3      	ldrb	r3, [r4, #2]
1000d352:	2b00      	cmp	r3, #0
1000d354:	d006      	beq.n	1000d364 <at_ble_authenticate+0x84>
1000d356:	2e00      	cmp	r6, #0
1000d358:	d0db      	beq.n	1000d312 <at_ble_authenticate+0x32>
1000d35a:	4829      	ldr	r0, [pc, #164]	; (1000d400 <at_ble_authenticate+0x120>)
1000d35c:	1c31      	adds	r1, r6, #0
1000d35e:	221c      	movs	r2, #28
1000d360:	4b28      	ldr	r3, [pc, #160]	; (1000d404 <at_ble_authenticate+0x124>)
1000d362:	4798      	blx	r3
1000d364:	9b07      	ldr	r3, [sp, #28]
1000d366:	2b00      	cmp	r3, #0
1000d368:	d005      	beq.n	1000d376 <at_ble_authenticate+0x96>
1000d36a:	4827      	ldr	r0, [pc, #156]	; (1000d408 <at_ble_authenticate+0x128>)
1000d36c:	1c19      	adds	r1, r3, #0
1000d36e:	309a      	adds	r0, #154	; 0x9a
1000d370:	2210      	movs	r2, #16
1000d372:	4b24      	ldr	r3, [pc, #144]	; (1000d404 <at_ble_authenticate+0x124>)
1000d374:	4798      	blx	r3
1000d376:	7863      	ldrb	r3, [r4, #1]
1000d378:	78a2      	ldrb	r2, [r4, #2]
1000d37a:	009b      	lsls	r3, r3, #2
1000d37c:	4313      	orrs	r3, r2
1000d37e:	2212      	movs	r2, #18
1000d380:	4357      	muls	r7, r2
1000d382:	4a1d      	ldr	r2, [pc, #116]	; (1000d3f8 <at_ble_authenticate+0x118>)
1000d384:	b2db      	uxtb	r3, r3
1000d386:	5cba      	ldrb	r2, [r7, r2]
1000d388:	2a00      	cmp	r2, #0
1000d38a:	d116      	bne.n	1000d3ba <at_ble_authenticate+0xda>
1000d38c:	79a0      	ldrb	r0, [r4, #6]
1000d38e:	0742      	lsls	r2, r0, #29
1000d390:	d502      	bpl.n	1000d398 <at_ble_authenticate+0xb8>
1000d392:	9a07      	ldr	r2, [sp, #28]
1000d394:	2a00      	cmp	r2, #0
1000d396:	d0bc      	beq.n	1000d312 <at_ble_authenticate+0x32>
1000d398:	07c2      	lsls	r2, r0, #31
1000d39a:	d501      	bpl.n	1000d3a0 <at_ble_authenticate+0xc0>
1000d39c:	2e00      	cmp	r6, #0
1000d39e:	d0b8      	beq.n	1000d312 <at_ble_authenticate+0x32>
1000d3a0:	7966      	ldrb	r6, [r4, #5]
1000d3a2:	7821      	ldrb	r1, [r4, #0]
1000d3a4:	78e2      	ldrb	r2, [r4, #3]
1000d3a6:	9600      	str	r6, [sp, #0]
1000d3a8:	9001      	str	r0, [sp, #4]
1000d3aa:	79e0      	ldrb	r0, [r4, #7]
1000d3ac:	9002      	str	r0, [sp, #8]
1000d3ae:	7a20      	ldrb	r0, [r4, #8]
1000d3b0:	4c16      	ldr	r4, [pc, #88]	; (1000d40c <at_ble_authenticate+0x12c>)
1000d3b2:	9003      	str	r0, [sp, #12]
1000d3b4:	1c28      	adds	r0, r5, #0
1000d3b6:	47a0      	blx	r4
1000d3b8:	e018      	b.n	1000d3ec <at_ble_authenticate+0x10c>
1000d3ba:	2a01      	cmp	r2, #1
1000d3bc:	d1a9      	bne.n	1000d312 <at_ble_authenticate+0x32>
1000d3be:	79e0      	ldrb	r0, [r4, #7]
1000d3c0:	0742      	lsls	r2, r0, #29
1000d3c2:	d502      	bpl.n	1000d3ca <at_ble_authenticate+0xea>
1000d3c4:	9a07      	ldr	r2, [sp, #28]
1000d3c6:	2a00      	cmp	r2, #0
1000d3c8:	d0a3      	beq.n	1000d312 <at_ble_authenticate+0x32>
1000d3ca:	07c2      	lsls	r2, r0, #31
1000d3cc:	d501      	bpl.n	1000d3d2 <at_ble_authenticate+0xf2>
1000d3ce:	2e00      	cmp	r6, #0
1000d3d0:	d09f      	beq.n	1000d312 <at_ble_authenticate+0x32>
1000d3d2:	7966      	ldrb	r6, [r4, #5]
1000d3d4:	7821      	ldrb	r1, [r4, #0]
1000d3d6:	78e2      	ldrb	r2, [r4, #3]
1000d3d8:	9600      	str	r6, [sp, #0]
1000d3da:	79a6      	ldrb	r6, [r4, #6]
1000d3dc:	9002      	str	r0, [sp, #8]
1000d3de:	9601      	str	r6, [sp, #4]
1000d3e0:	7a20      	ldrb	r0, [r4, #8]
1000d3e2:	9504      	str	r5, [sp, #16]
1000d3e4:	9003      	str	r0, [sp, #12]
1000d3e6:	4c05      	ldr	r4, [pc, #20]	; (1000d3fc <at_ble_authenticate+0x11c>)
1000d3e8:	2001      	movs	r0, #1
1000d3ea:	47a0      	blx	r4
1000d3ec:	2000      	movs	r0, #0
1000d3ee:	b00b      	add	sp, #44	; 0x2c
1000d3f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d3f2:	46c0      	nop			; (mov r8, r8)
1000d3f4:	1000d7e1 	.word	0x1000d7e1
1000d3f8:	100148ae 	.word	0x100148ae
1000d3fc:	1000dd51 	.word	0x1000dd51
1000d400:	100149bc 	.word	0x100149bc
1000d404:	1000ffab 	.word	0x1000ffab
1000d408:	1001493e 	.word	0x1001493e
1000d40c:	1000db31 	.word	0x1000db31

1000d410 <at_ble_pair_key_reply>:
1000d410:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d412:	b085      	sub	sp, #20
1000d414:	1c05      	adds	r5, r0, #0
1000d416:	1c0c      	adds	r4, r1, #0
1000d418:	1c16      	adds	r6, r2, #0
1000d41a:	2100      	movs	r1, #0
1000d41c:	4668      	mov	r0, sp
1000d41e:	2210      	movs	r2, #16
1000d420:	4b18      	ldr	r3, [pc, #96]	; (1000d484 <at_ble_pair_key_reply+0x74>)
1000d422:	4798      	blx	r3
1000d424:	2101      	movs	r1, #1
1000d426:	2e00      	cmp	r6, #0
1000d428:	d101      	bne.n	1000d42e <at_ble_pair_key_reply+0x1e>
1000d42a:	1c31      	adds	r1, r6, #0
1000d42c:	466e      	mov	r6, sp
1000d42e:	2c00      	cmp	r4, #0
1000d430:	d116      	bne.n	1000d460 <at_ble_pair_key_reply+0x50>
1000d432:	2701      	movs	r7, #1
1000d434:	1c23      	adds	r3, r4, #0
1000d436:	1d70      	adds	r0, r6, #5
1000d438:	3e01      	subs	r6, #1
1000d43a:	7802      	ldrb	r2, [r0, #0]
1000d43c:	3801      	subs	r0, #1
1000d43e:	3a30      	subs	r2, #48	; 0x30
1000d440:	437a      	muls	r2, r7
1000d442:	189b      	adds	r3, r3, r2
1000d444:	220a      	movs	r2, #10
1000d446:	4357      	muls	r7, r2
1000d448:	42b0      	cmp	r0, r6
1000d44a:	d1f6      	bne.n	1000d43a <at_ble_pair_key_reply+0x2a>
1000d44c:	466a      	mov	r2, sp
1000d44e:	4668      	mov	r0, sp
1000d450:	7013      	strb	r3, [r2, #0]
1000d452:	0a1a      	lsrs	r2, r3, #8
1000d454:	7042      	strb	r2, [r0, #1]
1000d456:	0c1a      	lsrs	r2, r3, #16
1000d458:	0e1b      	lsrs	r3, r3, #24
1000d45a:	7082      	strb	r2, [r0, #2]
1000d45c:	70c3      	strb	r3, [r0, #3]
1000d45e:	e009      	b.n	1000d474 <at_ble_pair_key_reply+0x64>
1000d460:	20cf      	movs	r0, #207	; 0xcf
1000d462:	2c01      	cmp	r4, #1
1000d464:	d10c      	bne.n	1000d480 <at_ble_pair_key_reply+0x70>
1000d466:	2300      	movs	r3, #0
1000d468:	4668      	mov	r0, sp
1000d46a:	5cf2      	ldrb	r2, [r6, r3]
1000d46c:	54c2      	strb	r2, [r0, r3]
1000d46e:	3301      	adds	r3, #1
1000d470:	2b10      	cmp	r3, #16
1000d472:	d1f9      	bne.n	1000d468 <at_ble_pair_key_reply+0x58>
1000d474:	2004      	movs	r0, #4
1000d476:	466a      	mov	r2, sp
1000d478:	1c2b      	adds	r3, r5, #0
1000d47a:	4c03      	ldr	r4, [pc, #12]	; (1000d488 <at_ble_pair_key_reply+0x78>)
1000d47c:	47a0      	blx	r4
1000d47e:	2000      	movs	r0, #0
1000d480:	b005      	add	sp, #20
1000d482:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d484:	1000ffbd 	.word	0x1000ffbd
1000d488:	1000ddcd 	.word	0x1000ddcd

1000d48c <at_ble_send_slave_sec_request>:
1000d48c:	b570      	push	{r4, r5, r6, lr}
1000d48e:	4b0c      	ldr	r3, [pc, #48]	; (1000d4c0 <at_ble_send_slave_sec_request+0x34>)
1000d490:	1c0e      	adds	r6, r1, #0
1000d492:	2100      	movs	r1, #0
1000d494:	1c05      	adds	r5, r0, #0
1000d496:	1c14      	adds	r4, r2, #0
1000d498:	4798      	blx	r3
1000d49a:	2301      	movs	r3, #1
1000d49c:	2807      	cmp	r0, #7
1000d49e:	d80d      	bhi.n	1000d4bc <at_ble_send_slave_sec_request+0x30>
1000d4a0:	3311      	adds	r3, #17
1000d4a2:	4358      	muls	r0, r3
1000d4a4:	4b07      	ldr	r3, [pc, #28]	; (1000d4c4 <at_ble_send_slave_sec_request+0x38>)
1000d4a6:	5cc2      	ldrb	r2, [r0, r3]
1000d4a8:	23e0      	movs	r3, #224	; 0xe0
1000d4aa:	2a01      	cmp	r2, #1
1000d4ac:	d106      	bne.n	1000d4bc <at_ble_send_slave_sec_request+0x30>
1000d4ae:	00b1      	lsls	r1, r6, #2
1000d4b0:	430c      	orrs	r4, r1
1000d4b2:	4b05      	ldr	r3, [pc, #20]	; (1000d4c8 <at_ble_send_slave_sec_request+0x3c>)
1000d4b4:	b2e1      	uxtb	r1, r4
1000d4b6:	1c28      	adds	r0, r5, #0
1000d4b8:	4798      	blx	r3
1000d4ba:	2300      	movs	r3, #0
1000d4bc:	1c18      	adds	r0, r3, #0
1000d4be:	bd70      	pop	{r4, r5, r6, pc}
1000d4c0:	1000d7e1 	.word	0x1000d7e1
1000d4c4:	100148ae 	.word	0x100148ae
1000d4c8:	1000de1d 	.word	0x1000de1d

1000d4cc <at_ble_encryption_start>:
1000d4cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d4ce:	23cf      	movs	r3, #207	; 0xcf
1000d4d0:	2900      	cmp	r1, #0
1000d4d2:	d02b      	beq.n	1000d52c <at_ble_encryption_start+0x60>
1000d4d4:	2a05      	cmp	r2, #5
1000d4d6:	d829      	bhi.n	1000d52c <at_ble_encryption_start+0x60>
1000d4d8:	2701      	movs	r7, #1
1000d4da:	1c3d      	adds	r5, r7, #0
1000d4dc:	2433      	movs	r4, #51	; 0x33
1000d4de:	4095      	lsls	r5, r2
1000d4e0:	4225      	tst	r5, r4
1000d4e2:	d023      	beq.n	1000d52c <at_ble_encryption_start+0x60>
1000d4e4:	7e8c      	ldrb	r4, [r1, #26]
1000d4e6:	3c07      	subs	r4, #7
1000d4e8:	2c09      	cmp	r4, #9
1000d4ea:	d81f      	bhi.n	1000d52c <at_ble_encryption_start+0x60>
1000d4ec:	4b10      	ldr	r3, [pc, #64]	; (1000d530 <at_ble_encryption_start+0x64>)
1000d4ee:	1c0c      	adds	r4, r1, #0
1000d4f0:	2100      	movs	r1, #0
1000d4f2:	1c15      	adds	r5, r2, #0
1000d4f4:	1c06      	adds	r6, r0, #0
1000d4f6:	4798      	blx	r3
1000d4f8:	1c3b      	adds	r3, r7, #0
1000d4fa:	2807      	cmp	r0, #7
1000d4fc:	d816      	bhi.n	1000d52c <at_ble_encryption_start+0x60>
1000d4fe:	2312      	movs	r3, #18
1000d500:	4358      	muls	r0, r3
1000d502:	4b0c      	ldr	r3, [pc, #48]	; (1000d534 <at_ble_encryption_start+0x68>)
1000d504:	5cc7      	ldrb	r7, [r0, r3]
1000d506:	23e0      	movs	r3, #224	; 0xe0
1000d508:	2f00      	cmp	r7, #0
1000d50a:	d10f      	bne.n	1000d52c <at_ble_encryption_start+0x60>
1000d50c:	1c21      	adds	r1, r4, #0
1000d50e:	221c      	movs	r2, #28
1000d510:	4b09      	ldr	r3, [pc, #36]	; (1000d538 <at_ble_encryption_start+0x6c>)
1000d512:	480a      	ldr	r0, [pc, #40]	; (1000d53c <at_ble_encryption_start+0x70>)
1000d514:	4798      	blx	r3
1000d516:	1c23      	adds	r3, r4, #0
1000d518:	7ea1      	ldrb	r1, [r4, #26]
1000d51a:	8a22      	ldrh	r2, [r4, #16]
1000d51c:	3312      	adds	r3, #18
1000d51e:	9100      	str	r1, [sp, #0]
1000d520:	9501      	str	r5, [sp, #4]
1000d522:	1c21      	adds	r1, r4, #0
1000d524:	1c30      	adds	r0, r6, #0
1000d526:	4c06      	ldr	r4, [pc, #24]	; (1000d540 <at_ble_encryption_start+0x74>)
1000d528:	47a0      	blx	r4
1000d52a:	1c3b      	adds	r3, r7, #0
1000d52c:	1c18      	adds	r0, r3, #0
1000d52e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d530:	1000d7e1 	.word	0x1000d7e1
1000d534:	100148ae 	.word	0x100148ae
1000d538:	1000ffab 	.word	0x1000ffab
1000d53c:	100149bc 	.word	0x100149bc
1000d540:	1000de5d 	.word	0x1000de5d

1000d544 <at_ble_encryption_request_reply>:
1000d544:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000d546:	24cf      	movs	r4, #207	; 0xcf
1000d548:	2b00      	cmp	r3, #0
1000d54a:	d011      	beq.n	1000d570 <at_ble_encryption_request_reply+0x2c>
1000d54c:	2a00      	cmp	r2, #0
1000d54e:	d00a      	beq.n	1000d566 <at_ble_encryption_request_reply+0x22>
1000d550:	2905      	cmp	r1, #5
1000d552:	d80d      	bhi.n	1000d570 <at_ble_encryption_request_reply+0x2c>
1000d554:	2501      	movs	r5, #1
1000d556:	2633      	movs	r6, #51	; 0x33
1000d558:	408d      	lsls	r5, r1
1000d55a:	4235      	tst	r5, r6
1000d55c:	d008      	beq.n	1000d570 <at_ble_encryption_request_reply+0x2c>
1000d55e:	7e9d      	ldrb	r5, [r3, #26]
1000d560:	3d07      	subs	r5, #7
1000d562:	2d09      	cmp	r5, #9
1000d564:	d804      	bhi.n	1000d570 <at_ble_encryption_request_reply+0x2c>
1000d566:	7e9c      	ldrb	r4, [r3, #26]
1000d568:	9400      	str	r4, [sp, #0]
1000d56a:	4c02      	ldr	r4, [pc, #8]	; (1000d574 <at_ble_encryption_request_reply+0x30>)
1000d56c:	47a0      	blx	r4
1000d56e:	2400      	movs	r4, #0
1000d570:	1c20      	adds	r0, r4, #0
1000d572:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000d574:	1000df19 	.word	0x1000df19

1000d578 <rx_callback>:
1000d578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d57a:	8883      	ldrh	r3, [r0, #4]
1000d57c:	1c01      	adds	r1, r0, #0
1000d57e:	9301      	str	r3, [sp, #4]
1000d580:	88c5      	ldrh	r5, [r0, #6]
1000d582:	8806      	ldrh	r6, [r0, #0]
1000d584:	2d00      	cmp	r5, #0
1000d586:	d10f      	bne.n	1000d5a8 <rx_callback+0x30>
1000d588:	1c19      	adds	r1, r3, #0
1000d58a:	1c30      	adds	r0, r6, #0
1000d58c:	4b19      	ldr	r3, [pc, #100]	; (1000d5f4 <rx_callback+0x7c>)
1000d58e:	1c2a      	adds	r2, r5, #0
1000d590:	4798      	blx	r3
1000d592:	1e03      	subs	r3, r0, #0
1000d594:	d105      	bne.n	1000d5a2 <rx_callback+0x2a>
1000d596:	1c30      	adds	r0, r6, #0
1000d598:	9901      	ldr	r1, [sp, #4]
1000d59a:	1c1a      	adds	r2, r3, #0
1000d59c:	4c16      	ldr	r4, [pc, #88]	; (1000d5f8 <rx_callback+0x80>)
1000d59e:	47a0      	blx	r4
1000d5a0:	e027      	b.n	1000d5f2 <rx_callback+0x7a>
1000d5a2:	4b16      	ldr	r3, [pc, #88]	; (1000d5fc <rx_callback+0x84>)
1000d5a4:	4798      	blx	r3
1000d5a6:	e024      	b.n	1000d5f2 <rx_callback+0x7a>
1000d5a8:	4c15      	ldr	r4, [pc, #84]	; (1000d600 <rx_callback+0x88>)
1000d5aa:	4a16      	ldr	r2, [pc, #88]	; (1000d604 <rx_callback+0x8c>)
1000d5ac:	6823      	ldr	r3, [r4, #0]
1000d5ae:	6812      	ldr	r2, [r2, #0]
1000d5b0:	18eb      	adds	r3, r5, r3
1000d5b2:	4293      	cmp	r3, r2
1000d5b4:	d901      	bls.n	1000d5ba <rx_callback+0x42>
1000d5b6:	2300      	movs	r3, #0
1000d5b8:	6023      	str	r3, [r4, #0]
1000d5ba:	4f13      	ldr	r7, [pc, #76]	; (1000d608 <rx_callback+0x90>)
1000d5bc:	6822      	ldr	r2, [r4, #0]
1000d5be:	683b      	ldr	r3, [r7, #0]
1000d5c0:	3108      	adds	r1, #8
1000d5c2:	1898      	adds	r0, r3, r2
1000d5c4:	1c2a      	adds	r2, r5, #0
1000d5c6:	4b11      	ldr	r3, [pc, #68]	; (1000d60c <rx_callback+0x94>)
1000d5c8:	4798      	blx	r3
1000d5ca:	683b      	ldr	r3, [r7, #0]
1000d5cc:	6822      	ldr	r2, [r4, #0]
1000d5ce:	1c30      	adds	r0, r6, #0
1000d5d0:	189a      	adds	r2, r3, r2
1000d5d2:	9901      	ldr	r1, [sp, #4]
1000d5d4:	4b07      	ldr	r3, [pc, #28]	; (1000d5f4 <rx_callback+0x7c>)
1000d5d6:	4798      	blx	r3
1000d5d8:	2800      	cmp	r0, #0
1000d5da:	d1e2      	bne.n	1000d5a2 <rx_callback+0x2a>
1000d5dc:	6823      	ldr	r3, [r4, #0]
1000d5de:	683a      	ldr	r2, [r7, #0]
1000d5e0:	1c30      	adds	r0, r6, #0
1000d5e2:	18d2      	adds	r2, r2, r3
1000d5e4:	9901      	ldr	r1, [sp, #4]
1000d5e6:	1c2b      	adds	r3, r5, #0
1000d5e8:	4e03      	ldr	r6, [pc, #12]	; (1000d5f8 <rx_callback+0x80>)
1000d5ea:	47b0      	blx	r6
1000d5ec:	6823      	ldr	r3, [r4, #0]
1000d5ee:	18ed      	adds	r5, r5, r3
1000d5f0:	6025      	str	r5, [r4, #0]
1000d5f2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d5f4:	1000c465 	.word	0x1000c465
1000d5f8:	1000c3dd 	.word	0x1000c3dd
1000d5fc:	1000ab39 	.word	0x1000ab39
1000d600:	10014a18 	.word	0x10014a18
1000d604:	10013b94 	.word	0x10013b94
1000d608:	10013b90 	.word	0x10013b90
1000d60c:	1000ffab 	.word	0x1000ffab

1000d610 <interface_send>:
1000d610:	b508      	push	{r3, lr}
1000d612:	4b02      	ldr	r3, [pc, #8]	; (1000d61c <interface_send+0xc>)
1000d614:	4798      	blx	r3
1000d616:	2000      	movs	r0, #0
1000d618:	bd08      	pop	{r3, pc}
1000d61a:	46c0      	nop			; (mov r8, r8)
1000d61c:	1000a831 	.word	0x1000a831

1000d620 <interface_init>:
1000d620:	2280      	movs	r2, #128	; 0x80
1000d622:	b510      	push	{r4, lr}
1000d624:	2100      	movs	r1, #0
1000d626:	1c04      	adds	r4, r0, #0
1000d628:	0092      	lsls	r2, r2, #2
1000d62a:	4b08      	ldr	r3, [pc, #32]	; (1000d64c <interface_init+0x2c>)
1000d62c:	4808      	ldr	r0, [pc, #32]	; (1000d650 <interface_init+0x30>)
1000d62e:	4798      	blx	r3
1000d630:	2200      	movs	r2, #0
1000d632:	4b08      	ldr	r3, [pc, #32]	; (1000d654 <interface_init+0x34>)
1000d634:	601a      	str	r2, [r3, #0]
1000d636:	4a08      	ldr	r2, [pc, #32]	; (1000d658 <interface_init+0x38>)
1000d638:	4b08      	ldr	r3, [pc, #32]	; (1000d65c <interface_init+0x3c>)
1000d63a:	601a      	str	r2, [r3, #0]
1000d63c:	4b08      	ldr	r3, [pc, #32]	; (1000d660 <interface_init+0x40>)
1000d63e:	6922      	ldr	r2, [r4, #16]
1000d640:	601a      	str	r2, [r3, #0]
1000d642:	6962      	ldr	r2, [r4, #20]
1000d644:	4b07      	ldr	r3, [pc, #28]	; (1000d664 <interface_init+0x44>)
1000d646:	601a      	str	r2, [r3, #0]
1000d648:	bd10      	pop	{r4, pc}
1000d64a:	46c0      	nop			; (mov r8, r8)
1000d64c:	1000ffbd 	.word	0x1000ffbd
1000d650:	10014c1c 	.word	0x10014c1c
1000d654:	10014a18 	.word	0x10014a18
1000d658:	10014a1c 	.word	0x10014a1c
1000d65c:	100120f8 	.word	0x100120f8
1000d660:	10013b90 	.word	0x10013b90
1000d664:	10013b94 	.word	0x10013b94

1000d668 <platform_cmd_cmpl_signal>:
1000d668:	2201      	movs	r2, #1
1000d66a:	4b01      	ldr	r3, [pc, #4]	; (1000d670 <platform_cmd_cmpl_signal+0x8>)
1000d66c:	601a      	str	r2, [r3, #0]
1000d66e:	4770      	bx	lr
1000d670:	10013b98 	.word	0x10013b98

1000d674 <platform_cmd_cmpl_wait>:
1000d674:	b510      	push	{r4, lr}
1000d676:	1c04      	adds	r4, r0, #0
1000d678:	4b07      	ldr	r3, [pc, #28]	; (1000d698 <platform_cmd_cmpl_wait+0x24>)
1000d67a:	681a      	ldr	r2, [r3, #0]
1000d67c:	2a01      	cmp	r2, #1
1000d67e:	d003      	beq.n	1000d688 <platform_cmd_cmpl_wait+0x14>
1000d680:	4b06      	ldr	r3, [pc, #24]	; (1000d69c <platform_cmd_cmpl_wait+0x28>)
1000d682:	2000      	movs	r0, #0
1000d684:	4798      	blx	r3
1000d686:	e7f7      	b.n	1000d678 <platform_cmd_cmpl_wait+0x4>
1000d688:	6819      	ldr	r1, [r3, #0]
1000d68a:	2901      	cmp	r1, #1
1000d68c:	d102      	bne.n	1000d694 <platform_cmd_cmpl_wait+0x20>
1000d68e:	2200      	movs	r2, #0
1000d690:	601a      	str	r2, [r3, #0]
1000d692:	e000      	b.n	1000d696 <platform_cmd_cmpl_wait+0x22>
1000d694:	7022      	strb	r2, [r4, #0]
1000d696:	bd10      	pop	{r4, pc}
1000d698:	10013b98 	.word	0x10013b98
1000d69c:	1000a8c1 	.word	0x1000a8c1

1000d6a0 <start_timer>:
1000d6a0:	4770      	bx	lr

1000d6a2 <stop_timer>:
1000d6a2:	4770      	bx	lr

1000d6a4 <dbg_le_set_bd_addr_req_handler>:
1000d6a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d6a6:	466b      	mov	r3, sp
1000d6a8:	1dde      	adds	r6, r3, #7
1000d6aa:	2300      	movs	r3, #0
1000d6ac:	7033      	strb	r3, [r6, #0]
1000d6ae:	230f      	movs	r3, #15
1000d6b0:	4c13      	ldr	r4, [pc, #76]	; (1000d700 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000d6b2:	2703      	movs	r7, #3
1000d6b4:	7023      	strb	r3, [r4, #0]
1000d6b6:	2300      	movs	r3, #0
1000d6b8:	70e3      	strb	r3, [r4, #3]
1000d6ba:	4b12      	ldr	r3, [pc, #72]	; (1000d704 <dbg_le_set_bd_addr_req_handler+0x60>)
1000d6bc:	1c01      	adds	r1, r0, #0
1000d6be:	881a      	ldrh	r2, [r3, #0]
1000d6c0:	881b      	ldrh	r3, [r3, #0]
1000d6c2:	7122      	strb	r2, [r4, #4]
1000d6c4:	0a1b      	lsrs	r3, r3, #8
1000d6c6:	2206      	movs	r2, #6
1000d6c8:	7163      	strb	r3, [r4, #5]
1000d6ca:	480f      	ldr	r0, [pc, #60]	; (1000d708 <dbg_le_set_bd_addr_req_handler+0x64>)
1000d6cc:	4b0f      	ldr	r3, [pc, #60]	; (1000d70c <dbg_le_set_bd_addr_req_handler+0x68>)
1000d6ce:	7067      	strb	r7, [r4, #1]
1000d6d0:	70a7      	strb	r7, [r4, #2]
1000d6d2:	4798      	blx	r3
1000d6d4:	4d0e      	ldr	r5, [pc, #56]	; (1000d710 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000d6d6:	4b0f      	ldr	r3, [pc, #60]	; (1000d714 <dbg_le_set_bd_addr_req_handler+0x70>)
1000d6d8:	210e      	movs	r1, #14
1000d6da:	802b      	strh	r3, [r5, #0]
1000d6dc:	2306      	movs	r3, #6
1000d6de:	71a3      	strb	r3, [r4, #6]
1000d6e0:	2300      	movs	r3, #0
1000d6e2:	1c20      	adds	r0, r4, #0
1000d6e4:	71e3      	strb	r3, [r4, #7]
1000d6e6:	4b0c      	ldr	r3, [pc, #48]	; (1000d718 <dbg_le_set_bd_addr_req_handler+0x74>)
1000d6e8:	80af      	strh	r7, [r5, #4]
1000d6ea:	4798      	blx	r3
1000d6ec:	1c30      	adds	r0, r6, #0
1000d6ee:	4b0b      	ldr	r3, [pc, #44]	; (1000d71c <dbg_le_set_bd_addr_req_handler+0x78>)
1000d6f0:	4798      	blx	r3
1000d6f2:	7833      	ldrb	r3, [r6, #0]
1000d6f4:	20e2      	movs	r0, #226	; 0xe2
1000d6f6:	2b00      	cmp	r3, #0
1000d6f8:	d101      	bne.n	1000d6fe <dbg_le_set_bd_addr_req_handler+0x5a>
1000d6fa:	68ab      	ldr	r3, [r5, #8]
1000d6fc:	7818      	ldrb	r0, [r3, #0]
1000d6fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d700:	10014c1c 	.word	0x10014c1c
1000d704:	100148ac 	.word	0x100148ac
1000d708:	10014c24 	.word	0x10014c24
1000d70c:	1000ffab 	.word	0x1000ffab
1000d710:	100148a0 	.word	0x100148a0
1000d714:	00000329 	.word	0x00000329
1000d718:	1000d611 	.word	0x1000d611
1000d71c:	1000d675 	.word	0x1000d675

1000d720 <gapc_get_dev_info_cfm.constprop.1>:
1000d720:	b538      	push	{r3, r4, r5, lr}
1000d722:	230b      	movs	r3, #11
1000d724:	4c27      	ldr	r4, [pc, #156]	; (1000d7c4 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000d726:	7023      	strb	r3, [r4, #0]
1000d728:	3303      	adds	r3, #3
1000d72a:	7063      	strb	r3, [r4, #1]
1000d72c:	3329      	adds	r3, #41	; 0x29
1000d72e:	70a3      	strb	r3, [r4, #2]
1000d730:	4b25      	ldr	r3, [pc, #148]	; (1000d7c8 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000d732:	70e1      	strb	r1, [r4, #3]
1000d734:	881a      	ldrh	r2, [r3, #0]
1000d736:	881b      	ldrh	r3, [r3, #0]
1000d738:	7122      	strb	r2, [r4, #4]
1000d73a:	0a1b      	lsrs	r3, r3, #8
1000d73c:	7163      	strb	r3, [r4, #5]
1000d73e:	2300      	movs	r3, #0
1000d740:	7220      	strb	r0, [r4, #8]
1000d742:	7263      	strb	r3, [r4, #9]
1000d744:	2801      	cmp	r0, #1
1000d746:	d02b      	beq.n	1000d7a0 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000d748:	4298      	cmp	r0, r3
1000d74a:	d01b      	beq.n	1000d784 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000d74c:	2802      	cmp	r0, #2
1000d74e:	d12f      	bne.n	1000d7b0 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000d750:	4b1e      	ldr	r3, [pc, #120]	; (1000d7cc <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000d752:	2112      	movs	r1, #18
1000d754:	1c1a      	adds	r2, r3, #0
1000d756:	32ce      	adds	r2, #206	; 0xce
1000d758:	8812      	ldrh	r2, [r2, #0]
1000d75a:	72a2      	strb	r2, [r4, #10]
1000d75c:	0a12      	lsrs	r2, r2, #8
1000d75e:	72e2      	strb	r2, [r4, #11]
1000d760:	1c1a      	adds	r2, r3, #0
1000d762:	32d0      	adds	r2, #208	; 0xd0
1000d764:	8812      	ldrh	r2, [r2, #0]
1000d766:	7322      	strb	r2, [r4, #12]
1000d768:	0a12      	lsrs	r2, r2, #8
1000d76a:	7362      	strb	r2, [r4, #13]
1000d76c:	1c1a      	adds	r2, r3, #0
1000d76e:	32d2      	adds	r2, #210	; 0xd2
1000d770:	8812      	ldrh	r2, [r2, #0]
1000d772:	33d4      	adds	r3, #212	; 0xd4
1000d774:	73a2      	strb	r2, [r4, #14]
1000d776:	0a12      	lsrs	r2, r2, #8
1000d778:	73e2      	strb	r2, [r4, #15]
1000d77a:	881b      	ldrh	r3, [r3, #0]
1000d77c:	7423      	strb	r3, [r4, #16]
1000d77e:	0a1b      	lsrs	r3, r3, #8
1000d780:	7463      	strb	r3, [r4, #17]
1000d782:	e016      	b.n	1000d7b2 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000d784:	4b11      	ldr	r3, [pc, #68]	; (1000d7cc <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000d786:	4912      	ldr	r1, [pc, #72]	; (1000d7d0 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000d788:	33aa      	adds	r3, #170	; 0xaa
1000d78a:	881d      	ldrh	r5, [r3, #0]
1000d78c:	4811      	ldr	r0, [pc, #68]	; (1000d7d4 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000d78e:	0a2b      	lsrs	r3, r5, #8
1000d790:	72a5      	strb	r5, [r4, #10]
1000d792:	72e3      	strb	r3, [r4, #11]
1000d794:	1c2a      	adds	r2, r5, #0
1000d796:	4b10      	ldr	r3, [pc, #64]	; (1000d7d8 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000d798:	350c      	adds	r5, #12
1000d79a:	4798      	blx	r3
1000d79c:	b2a9      	uxth	r1, r5
1000d79e:	e008      	b.n	1000d7b2 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000d7a0:	4b0a      	ldr	r3, [pc, #40]	; (1000d7cc <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000d7a2:	210c      	movs	r1, #12
1000d7a4:	33cc      	adds	r3, #204	; 0xcc
1000d7a6:	881b      	ldrh	r3, [r3, #0]
1000d7a8:	72a3      	strb	r3, [r4, #10]
1000d7aa:	0a1b      	lsrs	r3, r3, #8
1000d7ac:	72e3      	strb	r3, [r4, #11]
1000d7ae:	e000      	b.n	1000d7b2 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000d7b0:	210a      	movs	r1, #10
1000d7b2:	1c0b      	adds	r3, r1, #0
1000d7b4:	3b08      	subs	r3, #8
1000d7b6:	71a3      	strb	r3, [r4, #6]
1000d7b8:	121b      	asrs	r3, r3, #8
1000d7ba:	71e3      	strb	r3, [r4, #7]
1000d7bc:	1c20      	adds	r0, r4, #0
1000d7be:	4b07      	ldr	r3, [pc, #28]	; (1000d7dc <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000d7c0:	4798      	blx	r3
1000d7c2:	bd38      	pop	{r3, r4, r5, pc}
1000d7c4:	10014c1c 	.word	0x10014c1c
1000d7c8:	100148ac 	.word	0x100148ac
1000d7cc:	1001493e 	.word	0x1001493e
1000d7d0:	100149ea 	.word	0x100149ea
1000d7d4:	10014c28 	.word	0x10014c28
1000d7d8:	1000ffab 	.word	0x1000ffab
1000d7dc:	1000d611 	.word	0x1000d611

1000d7e0 <check_ConnData_idx_role>:
1000d7e0:	4b0c      	ldr	r3, [pc, #48]	; (1000d814 <check_ConnData_idx_role+0x34>)
1000d7e2:	b570      	push	{r4, r5, r6, lr}
1000d7e4:	1c04      	adds	r4, r0, #0
1000d7e6:	2008      	movs	r0, #8
1000d7e8:	429c      	cmp	r4, r3
1000d7ea:	d011      	beq.n	1000d810 <check_ConnData_idx_role+0x30>
1000d7ec:	2300      	movs	r3, #0
1000d7ee:	2212      	movs	r2, #18
1000d7f0:	435a      	muls	r2, r3
1000d7f2:	4d09      	ldr	r5, [pc, #36]	; (1000d818 <check_ConnData_idx_role+0x38>)
1000d7f4:	b2d8      	uxtb	r0, r3
1000d7f6:	1956      	adds	r6, r2, r5
1000d7f8:	8976      	ldrh	r6, [r6, #10]
1000d7fa:	42a6      	cmp	r6, r4
1000d7fc:	d104      	bne.n	1000d808 <check_ConnData_idx_role+0x28>
1000d7fe:	2900      	cmp	r1, #0
1000d800:	d006      	beq.n	1000d810 <check_ConnData_idx_role+0x30>
1000d802:	5d53      	ldrb	r3, [r2, r5]
1000d804:	700b      	strb	r3, [r1, #0]
1000d806:	e003      	b.n	1000d810 <check_ConnData_idx_role+0x30>
1000d808:	3301      	adds	r3, #1
1000d80a:	2b08      	cmp	r3, #8
1000d80c:	d1ef      	bne.n	1000d7ee <check_ConnData_idx_role+0xe>
1000d80e:	1c18      	adds	r0, r3, #0
1000d810:	bd70      	pop	{r4, r5, r6, pc}
1000d812:	46c0      	nop			; (mov r8, r8)
1000d814:	0000ffff 	.word	0x0000ffff
1000d818:	100148ae 	.word	0x100148ae

1000d81c <check_ConnData_emptyEntry>:
1000d81c:	2300      	movs	r3, #0
1000d81e:	2212      	movs	r2, #18
1000d820:	435a      	muls	r2, r3
1000d822:	4906      	ldr	r1, [pc, #24]	; (1000d83c <check_ConnData_emptyEntry+0x20>)
1000d824:	b2d8      	uxtb	r0, r3
1000d826:	1852      	adds	r2, r2, r1
1000d828:	8951      	ldrh	r1, [r2, #10]
1000d82a:	4a05      	ldr	r2, [pc, #20]	; (1000d840 <check_ConnData_emptyEntry+0x24>)
1000d82c:	4291      	cmp	r1, r2
1000d82e:	d003      	beq.n	1000d838 <check_ConnData_emptyEntry+0x1c>
1000d830:	3301      	adds	r3, #1
1000d832:	2b08      	cmp	r3, #8
1000d834:	d1f3      	bne.n	1000d81e <check_ConnData_emptyEntry+0x2>
1000d836:	1c18      	adds	r0, r3, #0
1000d838:	4770      	bx	lr
1000d83a:	46c0      	nop			; (mov r8, r8)
1000d83c:	100148ae 	.word	0x100148ae
1000d840:	0000ffff 	.word	0x0000ffff

1000d844 <gapc_cmp_evt>:
1000d844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d846:	780b      	ldrb	r3, [r1, #0]
1000d848:	1c05      	adds	r5, r0, #0
1000d84a:	1e58      	subs	r0, r3, #1
1000d84c:	784e      	ldrb	r6, [r1, #1]
1000d84e:	280f      	cmp	r0, #15
1000d850:	d85a      	bhi.n	1000d908 <gapc_cmp_evt+0xc4>
1000d852:	1c14      	adds	r4, r2, #0
1000d854:	f001 fa04 	bl	1000ec60 <__gnu_thumb1_case_uqi>
1000d858:	5858440a 	.word	0x5858440a
1000d85c:	4b584444 	.word	0x4b584444
1000d860:	0825122d 	.word	0x0825122d
1000d864:	3e395858 	.word	0x3e395858
1000d868:	203b      	movs	r0, #59	; 0x3b
1000d86a:	e04e      	b.n	1000d90a <gapc_cmp_evt+0xc6>
1000d86c:	203b      	movs	r0, #59	; 0x3b
1000d86e:	2e00      	cmp	r6, #0
1000d870:	d04b      	beq.n	1000d90a <gapc_cmp_evt+0xc6>
1000d872:	0a2d      	lsrs	r5, r5, #8
1000d874:	8015      	strh	r5, [r2, #0]
1000d876:	7096      	strb	r6, [r2, #2]
1000d878:	3835      	subs	r0, #53	; 0x35
1000d87a:	e046      	b.n	1000d90a <gapc_cmp_evt+0xc6>
1000d87c:	466b      	mov	r3, sp
1000d87e:	1ddf      	adds	r7, r3, #7
1000d880:	2301      	movs	r3, #1
1000d882:	0a2d      	lsrs	r5, r5, #8
1000d884:	703b      	strb	r3, [r7, #0]
1000d886:	1c28      	adds	r0, r5, #0
1000d888:	1c39      	adds	r1, r7, #0
1000d88a:	4b20      	ldr	r3, [pc, #128]	; (1000d90c <gapc_cmp_evt+0xc8>)
1000d88c:	4798      	blx	r3
1000d88e:	2807      	cmp	r0, #7
1000d890:	d803      	bhi.n	1000d89a <gapc_cmp_evt+0x56>
1000d892:	783b      	ldrb	r3, [r7, #0]
1000d894:	203b      	movs	r0, #59	; 0x3b
1000d896:	2b00      	cmp	r3, #0
1000d898:	d037      	beq.n	1000d90a <gapc_cmp_evt+0xc6>
1000d89a:	8065      	strh	r5, [r4, #2]
1000d89c:	7126      	strb	r6, [r4, #4]
1000d89e:	2009      	movs	r0, #9
1000d8a0:	e033      	b.n	1000d90a <gapc_cmp_evt+0xc6>
1000d8a2:	203b      	movs	r0, #59	; 0x3b
1000d8a4:	2e00      	cmp	r6, #0
1000d8a6:	d030      	beq.n	1000d90a <gapc_cmp_evt+0xc6>
1000d8a8:	0a2d      	lsrs	r5, r5, #8
1000d8aa:	8015      	strh	r5, [r2, #0]
1000d8ac:	7096      	strb	r6, [r2, #2]
1000d8ae:	382d      	subs	r0, #45	; 0x2d
1000d8b0:	e02b      	b.n	1000d90a <gapc_cmp_evt+0xc6>
1000d8b2:	203b      	movs	r0, #59	; 0x3b
1000d8b4:	2e00      	cmp	r6, #0
1000d8b6:	d028      	beq.n	1000d90a <gapc_cmp_evt+0xc6>
1000d8b8:	2300      	movs	r3, #0
1000d8ba:	0a2d      	lsrs	r5, r5, #8
1000d8bc:	8015      	strh	r5, [r2, #0]
1000d8be:	7096      	strb	r6, [r2, #2]
1000d8c0:	8093      	strh	r3, [r2, #4]
1000d8c2:	80d3      	strh	r3, [r2, #6]
1000d8c4:	8113      	strh	r3, [r2, #8]
1000d8c6:	3834      	subs	r0, #52	; 0x34
1000d8c8:	e01f      	b.n	1000d90a <gapc_cmp_evt+0xc6>
1000d8ca:	203b      	movs	r0, #59	; 0x3b
1000d8cc:	2e00      	cmp	r6, #0
1000d8ce:	d01c      	beq.n	1000d90a <gapc_cmp_evt+0xc6>
1000d8d0:	7216      	strb	r6, [r2, #8]
1000d8d2:	e003      	b.n	1000d8dc <gapc_cmp_evt+0x98>
1000d8d4:	203b      	movs	r0, #59	; 0x3b
1000d8d6:	2e00      	cmp	r6, #0
1000d8d8:	d017      	beq.n	1000d90a <gapc_cmp_evt+0xc6>
1000d8da:	7116      	strb	r6, [r2, #4]
1000d8dc:	3812      	subs	r0, #18
1000d8de:	e014      	b.n	1000d90a <gapc_cmp_evt+0xc6>
1000d8e0:	203b      	movs	r0, #59	; 0x3b
1000d8e2:	2e00      	cmp	r6, #0
1000d8e4:	d011      	beq.n	1000d90a <gapc_cmp_evt+0xc6>
1000d8e6:	7093      	strb	r3, [r2, #2]
1000d8e8:	70d6      	strb	r6, [r2, #3]
1000d8ea:	382a      	subs	r0, #42	; 0x2a
1000d8ec:	e00d      	b.n	1000d90a <gapc_cmp_evt+0xc6>
1000d8ee:	203b      	movs	r0, #59	; 0x3b
1000d8f0:	2e00      	cmp	r6, #0
1000d8f2:	d00a      	beq.n	1000d90a <gapc_cmp_evt+0xc6>
1000d8f4:	0a2d      	lsrs	r5, r5, #8
1000d8f6:	7016      	strb	r6, [r2, #0]
1000d8f8:	8055      	strh	r5, [r2, #2]
1000d8fa:	1d10      	adds	r0, r2, #4
1000d8fc:	2100      	movs	r1, #0
1000d8fe:	2205      	movs	r2, #5
1000d900:	4b03      	ldr	r3, [pc, #12]	; (1000d910 <gapc_cmp_evt+0xcc>)
1000d902:	4798      	blx	r3
1000d904:	2012      	movs	r0, #18
1000d906:	e000      	b.n	1000d90a <gapc_cmp_evt+0xc6>
1000d908:	2000      	movs	r0, #0
1000d90a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d90c:	1000d7e1 	.word	0x1000d7e1
1000d910:	1000ffbd 	.word	0x1000ffbd

1000d914 <gapc_connection_cfm_handler>:
1000d914:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d916:	b085      	sub	sp, #20
1000d918:	1c1d      	adds	r5, r3, #0
1000d91a:	ab0a      	add	r3, sp, #40	; 0x28
1000d91c:	781b      	ldrb	r3, [r3, #0]
1000d91e:	9201      	str	r2, [sp, #4]
1000d920:	9302      	str	r3, [sp, #8]
1000d922:	ab0b      	add	r3, sp, #44	; 0x2c
1000d924:	781b      	ldrb	r3, [r3, #0]
1000d926:	1c07      	adds	r7, r0, #0
1000d928:	9303      	str	r3, [sp, #12]
1000d92a:	ab0c      	add	r3, sp, #48	; 0x30
1000d92c:	881a      	ldrh	r2, [r3, #0]
1000d92e:	2302      	movs	r3, #2
1000d930:	1c0e      	adds	r6, r1, #0
1000d932:	4c23      	ldr	r4, [pc, #140]	; (1000d9c0 <gapc_connection_cfm_handler+0xac>)
1000d934:	1c39      	adds	r1, r7, #0
1000d936:	7023      	strb	r3, [r4, #0]
1000d938:	330c      	adds	r3, #12
1000d93a:	7063      	strb	r3, [r4, #1]
1000d93c:	70a3      	strb	r3, [r4, #2]
1000d93e:	4b21      	ldr	r3, [pc, #132]	; (1000d9c4 <gapc_connection_cfm_handler+0xb0>)
1000d940:	70e2      	strb	r2, [r4, #3]
1000d942:	881a      	ldrh	r2, [r3, #0]
1000d944:	881b      	ldrh	r3, [r3, #0]
1000d946:	7122      	strb	r2, [r4, #4]
1000d948:	0a1b      	lsrs	r3, r3, #8
1000d94a:	4f1f      	ldr	r7, [pc, #124]	; (1000d9c8 <gapc_connection_cfm_handler+0xb4>)
1000d94c:	2210      	movs	r2, #16
1000d94e:	481f      	ldr	r0, [pc, #124]	; (1000d9cc <gapc_connection_cfm_handler+0xb8>)
1000d950:	7163      	strb	r3, [r4, #5]
1000d952:	47b8      	blx	r7
1000d954:	0a33      	lsrs	r3, r6, #8
1000d956:	7626      	strb	r6, [r4, #24]
1000d958:	7663      	strb	r3, [r4, #25]
1000d95a:	9901      	ldr	r1, [sp, #4]
1000d95c:	0c33      	lsrs	r3, r6, #16
1000d95e:	2210      	movs	r2, #16
1000d960:	0e36      	lsrs	r6, r6, #24
1000d962:	481b      	ldr	r0, [pc, #108]	; (1000d9d0 <gapc_connection_cfm_handler+0xbc>)
1000d964:	76a3      	strb	r3, [r4, #26]
1000d966:	76e6      	strb	r6, [r4, #27]
1000d968:	47b8      	blx	r7
1000d96a:	1c23      	adds	r3, r4, #0
1000d96c:	332c      	adds	r3, #44	; 0x2c
1000d96e:	701d      	strb	r5, [r3, #0]
1000d970:	1c23      	adds	r3, r4, #0
1000d972:	0a2a      	lsrs	r2, r5, #8
1000d974:	332d      	adds	r3, #45	; 0x2d
1000d976:	701a      	strb	r2, [r3, #0]
1000d978:	1c23      	adds	r3, r4, #0
1000d97a:	0c2a      	lsrs	r2, r5, #16
1000d97c:	332e      	adds	r3, #46	; 0x2e
1000d97e:	701a      	strb	r2, [r3, #0]
1000d980:	1c23      	adds	r3, r4, #0
1000d982:	0e2d      	lsrs	r5, r5, #24
1000d984:	332f      	adds	r3, #47	; 0x2f
1000d986:	466a      	mov	r2, sp
1000d988:	701d      	strb	r5, [r3, #0]
1000d98a:	1c23      	adds	r3, r4, #0
1000d98c:	7a12      	ldrb	r2, [r2, #8]
1000d98e:	3330      	adds	r3, #48	; 0x30
1000d990:	701a      	strb	r2, [r3, #0]
1000d992:	1c23      	adds	r3, r4, #0
1000d994:	2500      	movs	r5, #0
1000d996:	3331      	adds	r3, #49	; 0x31
1000d998:	466a      	mov	r2, sp
1000d99a:	701d      	strb	r5, [r3, #0]
1000d99c:	1c23      	adds	r3, r4, #0
1000d99e:	7b12      	ldrb	r2, [r2, #12]
1000d9a0:	3332      	adds	r3, #50	; 0x32
1000d9a2:	701a      	strb	r2, [r3, #0]
1000d9a4:	1c23      	adds	r3, r4, #0
1000d9a6:	3333      	adds	r3, #51	; 0x33
1000d9a8:	701d      	strb	r5, [r3, #0]
1000d9aa:	232c      	movs	r3, #44	; 0x2c
1000d9ac:	1c20      	adds	r0, r4, #0
1000d9ae:	71a3      	strb	r3, [r4, #6]
1000d9b0:	2134      	movs	r1, #52	; 0x34
1000d9b2:	4b08      	ldr	r3, [pc, #32]	; (1000d9d4 <gapc_connection_cfm_handler+0xc0>)
1000d9b4:	71e5      	strb	r5, [r4, #7]
1000d9b6:	4798      	blx	r3
1000d9b8:	1c28      	adds	r0, r5, #0
1000d9ba:	b005      	add	sp, #20
1000d9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d9be:	46c0      	nop			; (mov r8, r8)
1000d9c0:	10014c1c 	.word	0x10014c1c
1000d9c4:	100148ac 	.word	0x100148ac
1000d9c8:	1000ffab 	.word	0x1000ffab
1000d9cc:	10014c24 	.word	0x10014c24
1000d9d0:	10014c38 	.word	0x10014c38
1000d9d4:	1000d611 	.word	0x1000d611

1000d9d8 <gapc_con_req_ind>:
1000d9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d9da:	7845      	ldrb	r5, [r0, #1]
1000d9dc:	7803      	ldrb	r3, [r0, #0]
1000d9de:	4c30      	ldr	r4, [pc, #192]	; (1000daa0 <gapc_con_req_ind+0xc8>)
1000d9e0:	022d      	lsls	r5, r5, #8
1000d9e2:	431d      	orrs	r5, r3
1000d9e4:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000d9e6:	78c3      	ldrb	r3, [r0, #3]
1000d9e8:	7882      	ldrb	r2, [r0, #2]
1000d9ea:	b08b      	sub	sp, #44	; 0x2c
1000d9ec:	021b      	lsls	r3, r3, #8
1000d9ee:	431a      	orrs	r2, r3
1000d9f0:	466b      	mov	r3, sp
1000d9f2:	9205      	str	r2, [sp, #20]
1000d9f4:	8a9b      	ldrh	r3, [r3, #20]
1000d9f6:	2120      	movs	r1, #32
1000d9f8:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000d9fa:	7943      	ldrb	r3, [r0, #5]
1000d9fc:	7902      	ldrb	r2, [r0, #4]
1000d9fe:	021b      	lsls	r3, r3, #8
1000da00:	431a      	orrs	r2, r3
1000da02:	466b      	mov	r3, sp
1000da04:	9206      	str	r2, [sp, #24]
1000da06:	8b1b      	ldrh	r3, [r3, #24]
1000da08:	1c06      	adds	r6, r0, #0
1000da0a:	8623      	strh	r3, [r4, #48]	; 0x30
1000da0c:	79c3      	ldrb	r3, [r0, #7]
1000da0e:	7982      	ldrb	r2, [r0, #6]
1000da10:	021b      	lsls	r3, r3, #8
1000da12:	431a      	orrs	r2, r3
1000da14:	466b      	mov	r3, sp
1000da16:	9207      	str	r2, [sp, #28]
1000da18:	466a      	mov	r2, sp
1000da1a:	8b9b      	ldrh	r3, [r3, #28]
1000da1c:	1852      	adds	r2, r2, r1
1000da1e:	8663      	strh	r3, [r4, #50]	; 0x32
1000da20:	7a43      	ldrb	r3, [r0, #9]
1000da22:	1c01      	adds	r1, r0, #0
1000da24:	9308      	str	r3, [sp, #32]
1000da26:	1c23      	adds	r3, r4, #0
1000da28:	7812      	ldrb	r2, [r2, #0]
1000da2a:	3377      	adds	r3, #119	; 0x77
1000da2c:	3478      	adds	r4, #120	; 0x78
1000da2e:	701a      	strb	r2, [r3, #0]
1000da30:	310a      	adds	r1, #10
1000da32:	2206      	movs	r2, #6
1000da34:	4b1b      	ldr	r3, [pc, #108]	; (1000daa4 <gapc_con_req_ind+0xcc>)
1000da36:	1c20      	adds	r0, r4, #0
1000da38:	4798      	blx	r3
1000da3a:	7c33      	ldrb	r3, [r6, #16]
1000da3c:	9309      	str	r3, [sp, #36]	; 0x24
1000da3e:	4b1a      	ldr	r3, [pc, #104]	; (1000daa8 <gapc_con_req_ind+0xd0>)
1000da40:	4798      	blx	r3
1000da42:	4e1a      	ldr	r6, [pc, #104]	; (1000daac <gapc_con_req_ind+0xd4>)
1000da44:	1e07      	subs	r7, r0, #0
1000da46:	2f07      	cmp	r7, #7
1000da48:	d81b      	bhi.n	1000da82 <gapc_con_req_ind+0xaa>
1000da4a:	2312      	movs	r3, #18
1000da4c:	4343      	muls	r3, r0
1000da4e:	18f0      	adds	r0, r6, r3
1000da50:	8145      	strh	r5, [r0, #10]
1000da52:	4669      	mov	r1, sp
1000da54:	2524      	movs	r5, #36	; 0x24
1000da56:	1949      	adds	r1, r1, r5
1000da58:	7809      	ldrb	r1, [r1, #0]
1000da5a:	2206      	movs	r2, #6
1000da5c:	54f1      	strb	r1, [r6, r3]
1000da5e:	2120      	movs	r1, #32
1000da60:	466b      	mov	r3, sp
1000da62:	185b      	adds	r3, r3, r1
1000da64:	781b      	ldrb	r3, [r3, #0]
1000da66:	1c21      	adds	r1, r4, #0
1000da68:	7043      	strb	r3, [r0, #1]
1000da6a:	466b      	mov	r3, sp
1000da6c:	8a9b      	ldrh	r3, [r3, #20]
1000da6e:	3002      	adds	r0, #2
1000da70:	8143      	strh	r3, [r0, #10]
1000da72:	466b      	mov	r3, sp
1000da74:	8b1b      	ldrh	r3, [r3, #24]
1000da76:	8183      	strh	r3, [r0, #12]
1000da78:	466b      	mov	r3, sp
1000da7a:	8b9b      	ldrh	r3, [r3, #28]
1000da7c:	81c3      	strh	r3, [r0, #14]
1000da7e:	4b09      	ldr	r3, [pc, #36]	; (1000daa4 <gapc_con_req_ind+0xcc>)
1000da80:	4798      	blx	r3
1000da82:	2112      	movs	r1, #18
1000da84:	2300      	movs	r3, #0
1000da86:	434f      	muls	r7, r1
1000da88:	9300      	str	r3, [sp, #0]
1000da8a:	9301      	str	r3, [sp, #4]
1000da8c:	19f6      	adds	r6, r6, r7
1000da8e:	8971      	ldrh	r1, [r6, #10]
1000da90:	4a07      	ldr	r2, [pc, #28]	; (1000dab0 <gapc_con_req_ind+0xd8>)
1000da92:	9102      	str	r1, [sp, #8]
1000da94:	1c10      	adds	r0, r2, #0
1000da96:	1c19      	adds	r1, r3, #0
1000da98:	4c06      	ldr	r4, [pc, #24]	; (1000dab4 <gapc_con_req_ind+0xdc>)
1000da9a:	47a0      	blx	r4
1000da9c:	b00b      	add	sp, #44	; 0x2c
1000da9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000daa0:	1001493e 	.word	0x1001493e
1000daa4:	1000ffab 	.word	0x1000ffab
1000daa8:	1000d81d 	.word	0x1000d81d
1000daac:	100148ae 	.word	0x100148ae
1000dab0:	10013b9c 	.word	0x10013b9c
1000dab4:	1000d915 	.word	0x1000d915

1000dab8 <gapc_disconnect_cmd_handler>:
1000dab8:	2204      	movs	r2, #4
1000daba:	b510      	push	{r4, lr}
1000dabc:	4b0c      	ldr	r3, [pc, #48]	; (1000daf0 <gapc_disconnect_cmd_handler+0x38>)
1000dabe:	2400      	movs	r4, #0
1000dac0:	701a      	strb	r2, [r3, #0]
1000dac2:	320a      	adds	r2, #10
1000dac4:	705a      	strb	r2, [r3, #1]
1000dac6:	709a      	strb	r2, [r3, #2]
1000dac8:	4a0a      	ldr	r2, [pc, #40]	; (1000daf4 <gapc_disconnect_cmd_handler+0x3c>)
1000daca:	70d9      	strb	r1, [r3, #3]
1000dacc:	8811      	ldrh	r1, [r2, #0]
1000dace:	8812      	ldrh	r2, [r2, #0]
1000dad0:	7119      	strb	r1, [r3, #4]
1000dad2:	0a12      	lsrs	r2, r2, #8
1000dad4:	715a      	strb	r2, [r3, #5]
1000dad6:	2201      	movs	r2, #1
1000dad8:	721a      	strb	r2, [r3, #8]
1000dada:	1892      	adds	r2, r2, r2
1000dadc:	7258      	strb	r0, [r3, #9]
1000dade:	719a      	strb	r2, [r3, #6]
1000dae0:	71dc      	strb	r4, [r3, #7]
1000dae2:	1c18      	adds	r0, r3, #0
1000dae4:	210a      	movs	r1, #10
1000dae6:	4b04      	ldr	r3, [pc, #16]	; (1000daf8 <gapc_disconnect_cmd_handler+0x40>)
1000dae8:	4798      	blx	r3
1000daea:	1c20      	adds	r0, r4, #0
1000daec:	bd10      	pop	{r4, pc}
1000daee:	46c0      	nop			; (mov r8, r8)
1000daf0:	10014c1c 	.word	0x10014c1c
1000daf4:	100148ac 	.word	0x100148ac
1000daf8:	1000d611 	.word	0x1000d611

1000dafc <gapc_disconnect_ind>:
1000dafc:	1c02      	adds	r2, r0, #0
1000dafe:	b508      	push	{r3, lr}
1000db00:	7843      	ldrb	r3, [r0, #1]
1000db02:	7800      	ldrb	r0, [r0, #0]
1000db04:	021b      	lsls	r3, r3, #8
1000db06:	4318      	orrs	r0, r3
1000db08:	8008      	strh	r0, [r1, #0]
1000db0a:	7893      	ldrb	r3, [r2, #2]
1000db0c:	708b      	strb	r3, [r1, #2]
1000db0e:	2100      	movs	r1, #0
1000db10:	4b05      	ldr	r3, [pc, #20]	; (1000db28 <gapc_disconnect_ind+0x2c>)
1000db12:	4798      	blx	r3
1000db14:	2807      	cmp	r0, #7
1000db16:	d806      	bhi.n	1000db26 <gapc_disconnect_ind+0x2a>
1000db18:	2312      	movs	r3, #18
1000db1a:	4358      	muls	r0, r3
1000db1c:	4b03      	ldr	r3, [pc, #12]	; (1000db2c <gapc_disconnect_ind+0x30>)
1000db1e:	1818      	adds	r0, r3, r0
1000db20:	2301      	movs	r3, #1
1000db22:	425b      	negs	r3, r3
1000db24:	8143      	strh	r3, [r0, #10]
1000db26:	bd08      	pop	{r3, pc}
1000db28:	1000d7e1 	.word	0x1000d7e1
1000db2c:	100148ae 	.word	0x100148ae

1000db30 <gapc_bond_cmd_handler>:
1000db30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000db32:	9300      	str	r3, [sp, #0]
1000db34:	2312      	movs	r3, #18
1000db36:	1c04      	adds	r4, r0, #0
1000db38:	a808      	add	r0, sp, #32
1000db3a:	7807      	ldrb	r7, [r0, #0]
1000db3c:	a809      	add	r0, sp, #36	; 0x24
1000db3e:	7806      	ldrb	r6, [r0, #0]
1000db40:	a80a      	add	r0, sp, #40	; 0x28
1000db42:	7805      	ldrb	r5, [r0, #0]
1000db44:	a80b      	add	r0, sp, #44	; 0x2c
1000db46:	7800      	ldrb	r0, [r0, #0]
1000db48:	9001      	str	r0, [sp, #4]
1000db4a:	4810      	ldr	r0, [pc, #64]	; (1000db8c <gapc_bond_cmd_handler+0x5c>)
1000db4c:	7003      	strb	r3, [r0, #0]
1000db4e:	230e      	movs	r3, #14
1000db50:	70c4      	strb	r4, [r0, #3]
1000db52:	4c0f      	ldr	r4, [pc, #60]	; (1000db90 <gapc_bond_cmd_handler+0x60>)
1000db54:	7043      	strb	r3, [r0, #1]
1000db56:	7083      	strb	r3, [r0, #2]
1000db58:	8823      	ldrh	r3, [r4, #0]
1000db5a:	8824      	ldrh	r4, [r4, #0]
1000db5c:	7103      	strb	r3, [r0, #4]
1000db5e:	466b      	mov	r3, sp
1000db60:	781b      	ldrb	r3, [r3, #0]
1000db62:	0a24      	lsrs	r4, r4, #8
1000db64:	72c3      	strb	r3, [r0, #11]
1000db66:	466b      	mov	r3, sp
1000db68:	791b      	ldrb	r3, [r3, #4]
1000db6a:	7144      	strb	r4, [r0, #5]
1000db6c:	73c3      	strb	r3, [r0, #15]
1000db6e:	2308      	movs	r3, #8
1000db70:	7183      	strb	r3, [r0, #6]
1000db72:	2300      	movs	r3, #0
1000db74:	240a      	movs	r4, #10
1000db76:	7241      	strb	r1, [r0, #9]
1000db78:	71c3      	strb	r3, [r0, #7]
1000db7a:	2110      	movs	r1, #16
1000db7c:	4b05      	ldr	r3, [pc, #20]	; (1000db94 <gapc_bond_cmd_handler+0x64>)
1000db7e:	7307      	strb	r7, [r0, #12]
1000db80:	7346      	strb	r6, [r0, #13]
1000db82:	7385      	strb	r5, [r0, #14]
1000db84:	7204      	strb	r4, [r0, #8]
1000db86:	7282      	strb	r2, [r0, #10]
1000db88:	4798      	blx	r3
1000db8a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000db8c:	10014c1c 	.word	0x10014c1c
1000db90:	100148ac 	.word	0x100148ac
1000db94:	1000d611 	.word	0x1000d611

1000db98 <gapc_bond_ind>:
1000db98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000db9a:	780e      	ldrb	r6, [r1, #0]
1000db9c:	1c03      	adds	r3, r0, #0
1000db9e:	1eb0      	subs	r0, r6, #2
1000dba0:	2805      	cmp	r0, #5
1000dba2:	d85d      	bhi.n	1000dc60 <gapc_bond_ind+0xc8>
1000dba4:	1c15      	adds	r5, r2, #0
1000dba6:	1c0c      	adds	r4, r1, #0
1000dba8:	f001 f85a 	bl	1000ec60 <__gnu_thumb1_case_uqi>
1000dbac:	2f5a030d 	.word	0x2f5a030d
1000dbb0:	4740      	.short	0x4740
1000dbb2:	2009      	movs	r0, #9
1000dbb4:	2a00      	cmp	r2, #0
1000dbb6:	d054      	beq.n	1000dc62 <gapc_bond_ind+0xca>
1000dbb8:	0a1b      	lsrs	r3, r3, #8
1000dbba:	8053      	strh	r3, [r2, #2]
1000dbbc:	788b      	ldrb	r3, [r1, #2]
1000dbbe:	4829      	ldr	r0, [pc, #164]	; (1000dc64 <gapc_bond_ind+0xcc>)
1000dbc0:	7113      	strb	r3, [r2, #4]
1000dbc2:	2100      	movs	r1, #0
1000dbc4:	e01c      	b.n	1000dc00 <gapc_bond_ind+0x68>
1000dbc6:	2009      	movs	r0, #9
1000dbc8:	2a00      	cmp	r2, #0
1000dbca:	d04a      	beq.n	1000dc62 <gapc_bond_ind+0xca>
1000dbcc:	4c25      	ldr	r4, [pc, #148]	; (1000dc64 <gapc_bond_ind+0xcc>)
1000dbce:	0a1b      	lsrs	r3, r3, #8
1000dbd0:	8053      	strh	r3, [r2, #2]
1000dbd2:	788b      	ldrb	r3, [r1, #2]
1000dbd4:	2700      	movs	r7, #0
1000dbd6:	1c10      	adds	r0, r2, #0
1000dbd8:	1c21      	adds	r1, r4, #0
1000dbda:	7013      	strb	r3, [r2, #0]
1000dbdc:	4e22      	ldr	r6, [pc, #136]	; (1000dc68 <gapc_bond_ind+0xd0>)
1000dbde:	7117      	strb	r7, [r2, #4]
1000dbe0:	312e      	adds	r1, #46	; 0x2e
1000dbe2:	2217      	movs	r2, #23
1000dbe4:	3032      	adds	r0, #50	; 0x32
1000dbe6:	47b0      	blx	r6
1000dbe8:	1c28      	adds	r0, r5, #0
1000dbea:	1c21      	adds	r1, r4, #0
1000dbec:	2210      	movs	r2, #16
1000dbee:	311e      	adds	r1, #30
1000dbf0:	3022      	adds	r0, #34	; 0x22
1000dbf2:	47b0      	blx	r6
1000dbf4:	1ca1      	adds	r1, r4, #2
1000dbf6:	1da8      	adds	r0, r5, #6
1000dbf8:	221c      	movs	r2, #28
1000dbfa:	47b0      	blx	r6
1000dbfc:	1c20      	adds	r0, r4, #0
1000dbfe:	1c39      	adds	r1, r7, #0
1000dc00:	2246      	movs	r2, #70	; 0x46
1000dc02:	4b1a      	ldr	r3, [pc, #104]	; (1000dc6c <gapc_bond_ind+0xd4>)
1000dc04:	4798      	blx	r3
1000dc06:	2009      	movs	r0, #9
1000dc08:	e02b      	b.n	1000dc62 <gapc_bond_ind+0xca>
1000dc0a:	4d16      	ldr	r5, [pc, #88]	; (1000dc64 <gapc_bond_ind+0xcc>)
1000dc0c:	3102      	adds	r1, #2
1000dc0e:	1c28      	adds	r0, r5, #0
1000dc10:	2210      	movs	r2, #16
1000dc12:	4e15      	ldr	r6, [pc, #84]	; (1000dc68 <gapc_bond_ind+0xd0>)
1000dc14:	302e      	adds	r0, #46	; 0x2e
1000dc16:	47b0      	blx	r6
1000dc18:	1c28      	adds	r0, r5, #0
1000dc1a:	1c21      	adds	r1, r4, #0
1000dc1c:	303f      	adds	r0, #63	; 0x3f
1000dc1e:	3112      	adds	r1, #18
1000dc20:	2206      	movs	r2, #6
1000dc22:	47b0      	blx	r6
1000dc24:	7e23      	ldrb	r3, [r4, #24]
1000dc26:	353e      	adds	r5, #62	; 0x3e
1000dc28:	702b      	strb	r3, [r5, #0]
1000dc2a:	e019      	b.n	1000dc60 <gapc_bond_ind+0xc8>
1000dc2c:	480d      	ldr	r0, [pc, #52]	; (1000dc64 <gapc_bond_ind+0xcc>)
1000dc2e:	3102      	adds	r1, #2
1000dc30:	2210      	movs	r2, #16
1000dc32:	4b0d      	ldr	r3, [pc, #52]	; (1000dc68 <gapc_bond_ind+0xd0>)
1000dc34:	301e      	adds	r0, #30
1000dc36:	4798      	blx	r3
1000dc38:	e012      	b.n	1000dc60 <gapc_bond_ind+0xc8>
1000dc3a:	4d0a      	ldr	r5, [pc, #40]	; (1000dc64 <gapc_bond_ind+0xcc>)
1000dc3c:	3102      	adds	r1, #2
1000dc3e:	2210      	movs	r2, #16
1000dc40:	4e09      	ldr	r6, [pc, #36]	; (1000dc68 <gapc_bond_ind+0xd0>)
1000dc42:	1ca8      	adds	r0, r5, #2
1000dc44:	47b0      	blx	r6
1000dc46:	1c28      	adds	r0, r5, #0
1000dc48:	1c21      	adds	r1, r4, #0
1000dc4a:	7ce3      	ldrb	r3, [r4, #19]
1000dc4c:	7ca2      	ldrb	r2, [r4, #18]
1000dc4e:	021b      	lsls	r3, r3, #8
1000dc50:	4313      	orrs	r3, r2
1000dc52:	3014      	adds	r0, #20
1000dc54:	3114      	adds	r1, #20
1000dc56:	2208      	movs	r2, #8
1000dc58:	826b      	strh	r3, [r5, #18]
1000dc5a:	47b0      	blx	r6
1000dc5c:	7f23      	ldrb	r3, [r4, #28]
1000dc5e:	772b      	strb	r3, [r5, #28]
1000dc60:	2000      	movs	r0, #0
1000dc62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000dc64:	10013bcc 	.word	0x10013bcc
1000dc68:	1000ffab 	.word	0x1000ffab
1000dc6c:	1000ffbd 	.word	0x1000ffbd

1000dc70 <gapc_bond_req_ind>:
1000dc70:	b570      	push	{r4, r5, r6, lr}
1000dc72:	780c      	ldrb	r4, [r1, #0]
1000dc74:	1c03      	adds	r3, r0, #0
1000dc76:	7849      	ldrb	r1, [r1, #1]
1000dc78:	2c07      	cmp	r4, #7
1000dc7a:	d85c      	bhi.n	1000dd36 <gapc_bond_req_ind+0xc6>
1000dc7c:	1c20      	adds	r0, r4, #0
1000dc7e:	f000 ffef 	bl	1000ec60 <__gnu_thumb1_case_uqi>
1000dc82:	5a04      	.short	0x5a04
1000dc84:	5a0b5a5a 	.word	0x5a0b5a5a
1000dc88:	1f1f      	.short	0x1f1f
1000dc8a:	200a      	movs	r0, #10
1000dc8c:	2a00      	cmp	r2, #0
1000dc8e:	d053      	beq.n	1000dd38 <gapc_bond_req_ind+0xc8>
1000dc90:	0a1b      	lsrs	r3, r3, #8
1000dc92:	8013      	strh	r3, [r2, #0]
1000dc94:	7091      	strb	r1, [r2, #2]
1000dc96:	e04f      	b.n	1000dd38 <gapc_bond_req_ind+0xc8>
1000dc98:	2a00      	cmp	r2, #0
1000dc9a:	d00b      	beq.n	1000dcb4 <gapc_bond_req_ind+0x44>
1000dc9c:	0a1b      	lsrs	r3, r3, #8
1000dc9e:	8013      	strh	r3, [r2, #0]
1000dca0:	2900      	cmp	r1, #0
1000dca2:	d102      	bne.n	1000dcaa <gapc_bond_req_ind+0x3a>
1000dca4:	2301      	movs	r3, #1
1000dca6:	7093      	strb	r3, [r2, #2]
1000dca8:	e004      	b.n	1000dcb4 <gapc_bond_req_ind+0x44>
1000dcaa:	2300      	movs	r3, #0
1000dcac:	7093      	strb	r3, [r2, #2]
1000dcae:	2902      	cmp	r1, #2
1000dcb0:	d102      	bne.n	1000dcb8 <gapc_bond_req_ind+0x48>
1000dcb2:	70d3      	strb	r3, [r2, #3]
1000dcb4:	200c      	movs	r0, #12
1000dcb6:	e03f      	b.n	1000dd38 <gapc_bond_req_ind+0xc8>
1000dcb8:	2901      	cmp	r1, #1
1000dcba:	d1fb      	bne.n	1000dcb4 <gapc_bond_req_ind+0x44>
1000dcbc:	70d1      	strb	r1, [r2, #3]
1000dcbe:	e7f9      	b.n	1000dcb4 <gapc_bond_req_ind+0x44>
1000dcc0:	2214      	movs	r2, #20
1000dcc2:	481e      	ldr	r0, [pc, #120]	; (1000dd3c <gapc_bond_req_ind+0xcc>)
1000dcc4:	0a1b      	lsrs	r3, r3, #8
1000dcc6:	70c3      	strb	r3, [r0, #3]
1000dcc8:	4b1d      	ldr	r3, [pc, #116]	; (1000dd40 <gapc_bond_req_ind+0xd0>)
1000dcca:	7002      	strb	r2, [r0, #0]
1000dccc:	3a06      	subs	r2, #6
1000dcce:	7042      	strb	r2, [r0, #1]
1000dcd0:	7082      	strb	r2, [r0, #2]
1000dcd2:	881a      	ldrh	r2, [r3, #0]
1000dcd4:	881b      	ldrh	r3, [r3, #0]
1000dcd6:	4e1b      	ldr	r6, [pc, #108]	; (1000dd44 <gapc_bond_req_ind+0xd4>)
1000dcd8:	0a1b      	lsrs	r3, r3, #8
1000dcda:	7143      	strb	r3, [r0, #5]
1000dcdc:	2301      	movs	r3, #1
1000dcde:	7102      	strb	r2, [r0, #4]
1000dce0:	7204      	strb	r4, [r0, #8]
1000dce2:	7243      	strb	r3, [r0, #9]
1000dce4:	1c05      	adds	r5, r0, #0
1000dce6:	1c31      	adds	r1, r6, #0
1000dce8:	300a      	adds	r0, #10
1000dcea:	2c07      	cmp	r4, #7
1000dcec:	d116      	bne.n	1000dd1c <gapc_bond_req_ind+0xac>
1000dcee:	317e      	adds	r1, #126	; 0x7e
1000dcf0:	2210      	movs	r2, #16
1000dcf2:	4c15      	ldr	r4, [pc, #84]	; (1000dd48 <gapc_bond_req_ind+0xd8>)
1000dcf4:	47a0      	blx	r4
1000dcf6:	1c33      	adds	r3, r6, #0
1000dcf8:	1c31      	adds	r1, r6, #0
1000dcfa:	1c28      	adds	r0, r5, #0
1000dcfc:	338e      	adds	r3, #142	; 0x8e
1000dcfe:	881b      	ldrh	r3, [r3, #0]
1000dd00:	3190      	adds	r1, #144	; 0x90
1000dd02:	76ab      	strb	r3, [r5, #26]
1000dd04:	2208      	movs	r2, #8
1000dd06:	0a1b      	lsrs	r3, r3, #8
1000dd08:	301c      	adds	r0, #28
1000dd0a:	76eb      	strb	r3, [r5, #27]
1000dd0c:	47a0      	blx	r4
1000dd0e:	1c31      	adds	r1, r6, #0
1000dd10:	3198      	adds	r1, #152	; 0x98
1000dd12:	780a      	ldrb	r2, [r1, #0]
1000dd14:	1d6b      	adds	r3, r5, #5
1000dd16:	77da      	strb	r2, [r3, #31]
1000dd18:	2125      	movs	r1, #37	; 0x25
1000dd1a:	e004      	b.n	1000dd26 <gapc_bond_req_ind+0xb6>
1000dd1c:	319a      	adds	r1, #154	; 0x9a
1000dd1e:	2210      	movs	r2, #16
1000dd20:	4b09      	ldr	r3, [pc, #36]	; (1000dd48 <gapc_bond_req_ind+0xd8>)
1000dd22:	4798      	blx	r3
1000dd24:	211a      	movs	r1, #26
1000dd26:	1c0b      	adds	r3, r1, #0
1000dd28:	2400      	movs	r4, #0
1000dd2a:	3b08      	subs	r3, #8
1000dd2c:	71ab      	strb	r3, [r5, #6]
1000dd2e:	1c28      	adds	r0, r5, #0
1000dd30:	4b06      	ldr	r3, [pc, #24]	; (1000dd4c <gapc_bond_req_ind+0xdc>)
1000dd32:	71ec      	strb	r4, [r5, #7]
1000dd34:	4798      	blx	r3
1000dd36:	2000      	movs	r0, #0
1000dd38:	bd70      	pop	{r4, r5, r6, pc}
1000dd3a:	46c0      	nop			; (mov r8, r8)
1000dd3c:	10014c1c 	.word	0x10014c1c
1000dd40:	100148ac 	.word	0x100148ac
1000dd44:	1001493e 	.word	0x1001493e
1000dd48:	1000ffab 	.word	0x1000ffab
1000dd4c:	1000d611 	.word	0x1000d611

1000dd50 <gapc_bond_cfm_handler_pair_resp>:
1000dd50:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dd52:	b085      	sub	sp, #20
1000dd54:	1c07      	adds	r7, r0, #0
1000dd56:	a80a      	add	r0, sp, #40	; 0x28
1000dd58:	7806      	ldrb	r6, [r0, #0]
1000dd5a:	a80b      	add	r0, sp, #44	; 0x2c
1000dd5c:	7805      	ldrb	r5, [r0, #0]
1000dd5e:	a80c      	add	r0, sp, #48	; 0x30
1000dd60:	7800      	ldrb	r0, [r0, #0]
1000dd62:	2414      	movs	r4, #20
1000dd64:	9002      	str	r0, [sp, #8]
1000dd66:	a80d      	add	r0, sp, #52	; 0x34
1000dd68:	7800      	ldrb	r0, [r0, #0]
1000dd6a:	9301      	str	r3, [sp, #4]
1000dd6c:	9003      	str	r0, [sp, #12]
1000dd6e:	a80e      	add	r0, sp, #56	; 0x38
1000dd70:	8800      	ldrh	r0, [r0, #0]
1000dd72:	4684      	mov	ip, r0
1000dd74:	4812      	ldr	r0, [pc, #72]	; (1000ddc0 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000dd76:	7004      	strb	r4, [r0, #0]
1000dd78:	3c06      	subs	r4, #6
1000dd7a:	7044      	strb	r4, [r0, #1]
1000dd7c:	7084      	strb	r4, [r0, #2]
1000dd7e:	4664      	mov	r4, ip
1000dd80:	70c4      	strb	r4, [r0, #3]
1000dd82:	4c10      	ldr	r4, [pc, #64]	; (1000ddc4 <gapc_bond_cfm_handler_pair_resp+0x74>)
1000dd84:	7247      	strb	r7, [r0, #9]
1000dd86:	8823      	ldrh	r3, [r4, #0]
1000dd88:	8824      	ldrh	r4, [r4, #0]
1000dd8a:	7103      	strb	r3, [r0, #4]
1000dd8c:	466b      	mov	r3, sp
1000dd8e:	791b      	ldrb	r3, [r3, #4]
1000dd90:	0a24      	lsrs	r4, r4, #8
1000dd92:	7303      	strb	r3, [r0, #12]
1000dd94:	466b      	mov	r3, sp
1000dd96:	7a1b      	ldrb	r3, [r3, #8]
1000dd98:	7144      	strb	r4, [r0, #5]
1000dd9a:	73c3      	strb	r3, [r0, #15]
1000dd9c:	466b      	mov	r3, sp
1000dd9e:	7b1b      	ldrb	r3, [r3, #12]
1000dda0:	2401      	movs	r4, #1
1000dda2:	7403      	strb	r3, [r0, #16]
1000dda4:	2309      	movs	r3, #9
1000dda6:	7183      	strb	r3, [r0, #6]
1000dda8:	2300      	movs	r3, #0
1000ddaa:	7204      	strb	r4, [r0, #8]
1000ddac:	7281      	strb	r1, [r0, #10]
1000ddae:	72c2      	strb	r2, [r0, #11]
1000ddb0:	7346      	strb	r6, [r0, #13]
1000ddb2:	7385      	strb	r5, [r0, #14]
1000ddb4:	71c3      	strb	r3, [r0, #7]
1000ddb6:	2111      	movs	r1, #17
1000ddb8:	4b03      	ldr	r3, [pc, #12]	; (1000ddc8 <gapc_bond_cfm_handler_pair_resp+0x78>)
1000ddba:	4798      	blx	r3
1000ddbc:	b005      	add	sp, #20
1000ddbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ddc0:	10014c1c 	.word	0x10014c1c
1000ddc4:	100148ac 	.word	0x100148ac
1000ddc8:	1000d611 	.word	0x1000d611

1000ddcc <gapc_bond_cfm_handler_key_exch>:
1000ddcc:	b538      	push	{r3, r4, r5, lr}
1000ddce:	2514      	movs	r5, #20
1000ddd0:	4c0d      	ldr	r4, [pc, #52]	; (1000de08 <gapc_bond_cfm_handler_key_exch+0x3c>)
1000ddd2:	70e3      	strb	r3, [r4, #3]
1000ddd4:	4b0d      	ldr	r3, [pc, #52]	; (1000de0c <gapc_bond_cfm_handler_key_exch+0x40>)
1000ddd6:	7025      	strb	r5, [r4, #0]
1000ddd8:	3d06      	subs	r5, #6
1000ddda:	7065      	strb	r5, [r4, #1]
1000dddc:	70a5      	strb	r5, [r4, #2]
1000ddde:	881d      	ldrh	r5, [r3, #0]
1000dde0:	881b      	ldrh	r3, [r3, #0]
1000dde2:	7220      	strb	r0, [r4, #8]
1000dde4:	0a1b      	lsrs	r3, r3, #8
1000dde6:	7163      	strb	r3, [r4, #5]
1000dde8:	7261      	strb	r1, [r4, #9]
1000ddea:	4b09      	ldr	r3, [pc, #36]	; (1000de10 <gapc_bond_cfm_handler_key_exch+0x44>)
1000ddec:	1c11      	adds	r1, r2, #0
1000ddee:	4809      	ldr	r0, [pc, #36]	; (1000de14 <gapc_bond_cfm_handler_key_exch+0x48>)
1000ddf0:	2210      	movs	r2, #16
1000ddf2:	7125      	strb	r5, [r4, #4]
1000ddf4:	4798      	blx	r3
1000ddf6:	2312      	movs	r3, #18
1000ddf8:	71a3      	strb	r3, [r4, #6]
1000ddfa:	2300      	movs	r3, #0
1000ddfc:	1c20      	adds	r0, r4, #0
1000ddfe:	71e3      	strb	r3, [r4, #7]
1000de00:	211a      	movs	r1, #26
1000de02:	4b05      	ldr	r3, [pc, #20]	; (1000de18 <gapc_bond_cfm_handler_key_exch+0x4c>)
1000de04:	4798      	blx	r3
1000de06:	bd38      	pop	{r3, r4, r5, pc}
1000de08:	10014c1c 	.word	0x10014c1c
1000de0c:	100148ac 	.word	0x100148ac
1000de10:	1000ffab 	.word	0x1000ffab
1000de14:	10014c26 	.word	0x10014c26
1000de18:	1000d611 	.word	0x1000d611

1000de1c <gapc_security_cmd_handler>:
1000de1c:	221a      	movs	r2, #26
1000de1e:	b508      	push	{r3, lr}
1000de20:	4b0b      	ldr	r3, [pc, #44]	; (1000de50 <gapc_security_cmd_handler+0x34>)
1000de22:	701a      	strb	r2, [r3, #0]
1000de24:	3a0c      	subs	r2, #12
1000de26:	705a      	strb	r2, [r3, #1]
1000de28:	709a      	strb	r2, [r3, #2]
1000de2a:	4a0a      	ldr	r2, [pc, #40]	; (1000de54 <gapc_security_cmd_handler+0x38>)
1000de2c:	70d8      	strb	r0, [r3, #3]
1000de2e:	8810      	ldrh	r0, [r2, #0]
1000de30:	8812      	ldrh	r2, [r2, #0]
1000de32:	7118      	strb	r0, [r3, #4]
1000de34:	0a12      	lsrs	r2, r2, #8
1000de36:	715a      	strb	r2, [r3, #5]
1000de38:	220c      	movs	r2, #12
1000de3a:	721a      	strb	r2, [r3, #8]
1000de3c:	3a0a      	subs	r2, #10
1000de3e:	719a      	strb	r2, [r3, #6]
1000de40:	2200      	movs	r2, #0
1000de42:	7259      	strb	r1, [r3, #9]
1000de44:	71da      	strb	r2, [r3, #7]
1000de46:	1c18      	adds	r0, r3, #0
1000de48:	210a      	movs	r1, #10
1000de4a:	4b03      	ldr	r3, [pc, #12]	; (1000de58 <gapc_security_cmd_handler+0x3c>)
1000de4c:	4798      	blx	r3
1000de4e:	bd08      	pop	{r3, pc}
1000de50:	10014c1c 	.word	0x10014c1c
1000de54:	100148ac 	.word	0x100148ac
1000de58:	1000d611 	.word	0x1000d611

1000de5c <gapc_encrypt_cmd_handler>:
1000de5c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000de5e:	2500      	movs	r5, #0
1000de60:	b089      	sub	sp, #36	; 0x24
1000de62:	9306      	str	r3, [sp, #24]
1000de64:	ab0e      	add	r3, sp, #56	; 0x38
1000de66:	781b      	ldrb	r3, [r3, #0]
1000de68:	1c17      	adds	r7, r2, #0
1000de6a:	9307      	str	r3, [sp, #28]
1000de6c:	ab0f      	add	r3, sp, #60	; 0x3c
1000de6e:	781b      	ldrb	r3, [r3, #0]
1000de70:	4a19      	ldr	r2, [pc, #100]	; (1000ded8 <gapc_encrypt_cmd_handler+0x7c>)
1000de72:	1c06      	adds	r6, r0, #0
1000de74:	9105      	str	r1, [sp, #20]
1000de76:	9300      	str	r3, [sp, #0]
1000de78:	9002      	str	r0, [sp, #8]
1000de7a:	1c29      	adds	r1, r5, #0
1000de7c:	1c2b      	adds	r3, r5, #0
1000de7e:	9501      	str	r5, [sp, #4]
1000de80:	1c10      	adds	r0, r2, #0
1000de82:	4c16      	ldr	r4, [pc, #88]	; (1000dedc <gapc_encrypt_cmd_handler+0x80>)
1000de84:	47a0      	blx	r4
1000de86:	2316      	movs	r3, #22
1000de88:	4c15      	ldr	r4, [pc, #84]	; (1000dee0 <gapc_encrypt_cmd_handler+0x84>)
1000de8a:	9905      	ldr	r1, [sp, #20]
1000de8c:	7023      	strb	r3, [r4, #0]
1000de8e:	3b08      	subs	r3, #8
1000de90:	7063      	strb	r3, [r4, #1]
1000de92:	70a3      	strb	r3, [r4, #2]
1000de94:	4b13      	ldr	r3, [pc, #76]	; (1000dee4 <gapc_encrypt_cmd_handler+0x88>)
1000de96:	70e6      	strb	r6, [r4, #3]
1000de98:	881a      	ldrh	r2, [r3, #0]
1000de9a:	881b      	ldrh	r3, [r3, #0]
1000de9c:	7122      	strb	r2, [r4, #4]
1000de9e:	0a1b      	lsrs	r3, r3, #8
1000dea0:	7163      	strb	r3, [r4, #5]
1000dea2:	230b      	movs	r3, #11
1000dea4:	4e10      	ldr	r6, [pc, #64]	; (1000dee8 <gapc_encrypt_cmd_handler+0x8c>)
1000dea6:	2210      	movs	r2, #16
1000dea8:	4810      	ldr	r0, [pc, #64]	; (1000deec <gapc_encrypt_cmd_handler+0x90>)
1000deaa:	7223      	strb	r3, [r4, #8]
1000deac:	7265      	strb	r5, [r4, #9]
1000deae:	47b0      	blx	r6
1000deb0:	0a3b      	lsrs	r3, r7, #8
1000deb2:	9906      	ldr	r1, [sp, #24]
1000deb4:	2208      	movs	r2, #8
1000deb6:	480e      	ldr	r0, [pc, #56]	; (1000def0 <gapc_encrypt_cmd_handler+0x94>)
1000deb8:	76e3      	strb	r3, [r4, #27]
1000deba:	76a7      	strb	r7, [r4, #26]
1000debc:	47b0      	blx	r6
1000debe:	466a      	mov	r2, sp
1000dec0:	7f12      	ldrb	r2, [r2, #28]
1000dec2:	1d63      	adds	r3, r4, #5
1000dec4:	77da      	strb	r2, [r3, #31]
1000dec6:	231d      	movs	r3, #29
1000dec8:	1c20      	adds	r0, r4, #0
1000deca:	71a3      	strb	r3, [r4, #6]
1000decc:	2125      	movs	r1, #37	; 0x25
1000dece:	4b09      	ldr	r3, [pc, #36]	; (1000def4 <gapc_encrypt_cmd_handler+0x98>)
1000ded0:	71e5      	strb	r5, [r4, #7]
1000ded2:	4798      	blx	r3
1000ded4:	b009      	add	sp, #36	; 0x24
1000ded6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ded8:	10013bac 	.word	0x10013bac
1000dedc:	1000d915 	.word	0x1000d915
1000dee0:	10014c1c 	.word	0x10014c1c
1000dee4:	100148ac 	.word	0x100148ac
1000dee8:	1000ffab 	.word	0x1000ffab
1000deec:	10014c26 	.word	0x10014c26
1000def0:	10014c38 	.word	0x10014c38
1000def4:	1000d611 	.word	0x1000d611

1000def8 <gapc_encrypt_req_ind>:
1000def8:	b508      	push	{r3, lr}
1000defa:	0a00      	lsrs	r0, r0, #8
1000defc:	8010      	strh	r0, [r2, #0]
1000defe:	784b      	ldrb	r3, [r1, #1]
1000df00:	7808      	ldrb	r0, [r1, #0]
1000df02:	021b      	lsls	r3, r3, #8
1000df04:	4303      	orrs	r3, r0
1000df06:	8053      	strh	r3, [r2, #2]
1000df08:	1d10      	adds	r0, r2, #4
1000df0a:	3102      	adds	r1, #2
1000df0c:	2208      	movs	r2, #8
1000df0e:	4b01      	ldr	r3, [pc, #4]	; (1000df14 <gapc_encrypt_req_ind+0x1c>)
1000df10:	4798      	blx	r3
1000df12:	bd08      	pop	{r3, pc}
1000df14:	1000ffab 	.word	0x1000ffab

1000df18 <gapc_encrypt_cfm_handler>:
1000df18:	b5f0      	push	{r4, r5, r6, r7, lr}
1000df1a:	2500      	movs	r5, #0
1000df1c:	b087      	sub	sp, #28
1000df1e:	9304      	str	r3, [sp, #16]
1000df20:	ab0c      	add	r3, sp, #48	; 0x30
1000df22:	781b      	ldrb	r3, [r3, #0]
1000df24:	1c17      	adds	r7, r2, #0
1000df26:	4a15      	ldr	r2, [pc, #84]	; (1000df7c <gapc_encrypt_cfm_handler+0x64>)
1000df28:	1c06      	adds	r6, r0, #0
1000df2a:	9305      	str	r3, [sp, #20]
1000df2c:	9100      	str	r1, [sp, #0]
1000df2e:	9002      	str	r0, [sp, #8]
1000df30:	1c29      	adds	r1, r5, #0
1000df32:	1c2b      	adds	r3, r5, #0
1000df34:	9501      	str	r5, [sp, #4]
1000df36:	1c10      	adds	r0, r2, #0
1000df38:	4c11      	ldr	r4, [pc, #68]	; (1000df80 <gapc_encrypt_cfm_handler+0x68>)
1000df3a:	47a0      	blx	r4
1000df3c:	2318      	movs	r3, #24
1000df3e:	4c11      	ldr	r4, [pc, #68]	; (1000df84 <gapc_encrypt_cfm_handler+0x6c>)
1000df40:	9904      	ldr	r1, [sp, #16]
1000df42:	7023      	strb	r3, [r4, #0]
1000df44:	3b0a      	subs	r3, #10
1000df46:	7063      	strb	r3, [r4, #1]
1000df48:	70a3      	strb	r3, [r4, #2]
1000df4a:	4b0f      	ldr	r3, [pc, #60]	; (1000df88 <gapc_encrypt_cfm_handler+0x70>)
1000df4c:	480f      	ldr	r0, [pc, #60]	; (1000df8c <gapc_encrypt_cfm_handler+0x74>)
1000df4e:	881a      	ldrh	r2, [r3, #0]
1000df50:	881b      	ldrh	r3, [r3, #0]
1000df52:	7122      	strb	r2, [r4, #4]
1000df54:	0a1b      	lsrs	r3, r3, #8
1000df56:	7163      	strb	r3, [r4, #5]
1000df58:	2210      	movs	r2, #16
1000df5a:	4b0d      	ldr	r3, [pc, #52]	; (1000df90 <gapc_encrypt_cfm_handler+0x78>)
1000df5c:	70e6      	strb	r6, [r4, #3]
1000df5e:	7227      	strb	r7, [r4, #8]
1000df60:	4798      	blx	r3
1000df62:	466b      	mov	r3, sp
1000df64:	7d1b      	ldrb	r3, [r3, #20]
1000df66:	1c20      	adds	r0, r4, #0
1000df68:	7663      	strb	r3, [r4, #25]
1000df6a:	2312      	movs	r3, #18
1000df6c:	211a      	movs	r1, #26
1000df6e:	71a3      	strb	r3, [r4, #6]
1000df70:	4b08      	ldr	r3, [pc, #32]	; (1000df94 <gapc_encrypt_cfm_handler+0x7c>)
1000df72:	71e5      	strb	r5, [r4, #7]
1000df74:	4798      	blx	r3
1000df76:	b007      	add	sp, #28
1000df78:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000df7a:	46c0      	nop			; (mov r8, r8)
1000df7c:	10013bbc 	.word	0x10013bbc
1000df80:	1000d915 	.word	0x1000d915
1000df84:	10014c1c 	.word	0x10014c1c
1000df88:	100148ac 	.word	0x100148ac
1000df8c:	10014c25 	.word	0x10014c25
1000df90:	1000ffab 	.word	0x1000ffab
1000df94:	1000d611 	.word	0x1000d611

1000df98 <gapc_encrypt_ind>:
1000df98:	780b      	ldrb	r3, [r1, #0]
1000df9a:	0a00      	lsrs	r0, r0, #8
1000df9c:	70d3      	strb	r3, [r2, #3]
1000df9e:	2300      	movs	r3, #0
1000dfa0:	8010      	strh	r0, [r2, #0]
1000dfa2:	7093      	strb	r3, [r2, #2]
1000dfa4:	4770      	bx	lr
	...

1000dfa8 <gapc_param_update_cfm_handler>:
1000dfa8:	b538      	push	{r3, r4, r5, lr}
1000dfaa:	2410      	movs	r4, #16
1000dfac:	1c05      	adds	r5, r0, #0
1000dfae:	480e      	ldr	r0, [pc, #56]	; (1000dfe8 <gapc_param_update_cfm_handler+0x40>)
1000dfb0:	7004      	strb	r4, [r0, #0]
1000dfb2:	3c02      	subs	r4, #2
1000dfb4:	7044      	strb	r4, [r0, #1]
1000dfb6:	7084      	strb	r4, [r0, #2]
1000dfb8:	4c0c      	ldr	r4, [pc, #48]	; (1000dfec <gapc_param_update_cfm_handler+0x44>)
1000dfba:	70c5      	strb	r5, [r0, #3]
1000dfbc:	8825      	ldrh	r5, [r4, #0]
1000dfbe:	8824      	ldrh	r4, [r4, #0]
1000dfc0:	72c3      	strb	r3, [r0, #11]
1000dfc2:	0a1b      	lsrs	r3, r3, #8
1000dfc4:	0a24      	lsrs	r4, r4, #8
1000dfc6:	7303      	strb	r3, [r0, #12]
1000dfc8:	2305      	movs	r3, #5
1000dfca:	7144      	strb	r4, [r0, #5]
1000dfcc:	2400      	movs	r4, #0
1000dfce:	7201      	strb	r1, [r0, #8]
1000dfd0:	7242      	strb	r2, [r0, #9]
1000dfd2:	7183      	strb	r3, [r0, #6]
1000dfd4:	0a12      	lsrs	r2, r2, #8
1000dfd6:	210d      	movs	r1, #13
1000dfd8:	4b05      	ldr	r3, [pc, #20]	; (1000dff0 <gapc_param_update_cfm_handler+0x48>)
1000dfda:	7105      	strb	r5, [r0, #4]
1000dfdc:	7282      	strb	r2, [r0, #10]
1000dfde:	71c4      	strb	r4, [r0, #7]
1000dfe0:	4798      	blx	r3
1000dfe2:	1c20      	adds	r0, r4, #0
1000dfe4:	bd38      	pop	{r3, r4, r5, pc}
1000dfe6:	46c0      	nop			; (mov r8, r8)
1000dfe8:	10014c1c 	.word	0x10014c1c
1000dfec:	100148ac 	.word	0x100148ac
1000dff0:	1000d611 	.word	0x1000d611

1000dff4 <gapc_param_updated_ind>:
1000dff4:	2300      	movs	r3, #0
1000dff6:	0a00      	lsrs	r0, r0, #8
1000dff8:	8010      	strh	r0, [r2, #0]
1000dffa:	7093      	strb	r3, [r2, #2]
1000dffc:	784b      	ldrb	r3, [r1, #1]
1000dffe:	7808      	ldrb	r0, [r1, #0]
1000e000:	021b      	lsls	r3, r3, #8
1000e002:	4303      	orrs	r3, r0
1000e004:	8093      	strh	r3, [r2, #4]
1000e006:	78cb      	ldrb	r3, [r1, #3]
1000e008:	7888      	ldrb	r0, [r1, #2]
1000e00a:	021b      	lsls	r3, r3, #8
1000e00c:	4303      	orrs	r3, r0
1000e00e:	80d3      	strh	r3, [r2, #6]
1000e010:	794b      	ldrb	r3, [r1, #5]
1000e012:	7909      	ldrb	r1, [r1, #4]
1000e014:	021b      	lsls	r3, r3, #8
1000e016:	430b      	orrs	r3, r1
1000e018:	2007      	movs	r0, #7
1000e01a:	8113      	strh	r3, [r2, #8]
1000e01c:	4770      	bx	lr

1000e01e <gapc_param_updated_req_ind>:
1000e01e:	0a00      	lsrs	r0, r0, #8
1000e020:	8010      	strh	r0, [r2, #0]
1000e022:	784b      	ldrb	r3, [r1, #1]
1000e024:	7808      	ldrb	r0, [r1, #0]
1000e026:	021b      	lsls	r3, r3, #8
1000e028:	4303      	orrs	r3, r0
1000e02a:	8053      	strh	r3, [r2, #2]
1000e02c:	78cb      	ldrb	r3, [r1, #3]
1000e02e:	7888      	ldrb	r0, [r1, #2]
1000e030:	021b      	lsls	r3, r3, #8
1000e032:	4303      	orrs	r3, r0
1000e034:	8093      	strh	r3, [r2, #4]
1000e036:	794b      	ldrb	r3, [r1, #5]
1000e038:	7908      	ldrb	r0, [r1, #4]
1000e03a:	021b      	lsls	r3, r3, #8
1000e03c:	4303      	orrs	r3, r0
1000e03e:	80d3      	strh	r3, [r2, #6]
1000e040:	79cb      	ldrb	r3, [r1, #7]
1000e042:	7989      	ldrb	r1, [r1, #6]
1000e044:	021b      	lsls	r3, r3, #8
1000e046:	430b      	orrs	r3, r1
1000e048:	2008      	movs	r0, #8
1000e04a:	8113      	strh	r3, [r2, #8]
1000e04c:	4770      	bx	lr
	...

1000e050 <gapc_dev_info_req_ind_handler>:
1000e050:	b508      	push	{r3, lr}
1000e052:	1c0b      	adds	r3, r1, #0
1000e054:	0a01      	lsrs	r1, r0, #8
1000e056:	8011      	strh	r1, [r2, #0]
1000e058:	7818      	ldrb	r0, [r3, #0]
1000e05a:	7090      	strb	r0, [r2, #2]
1000e05c:	2800      	cmp	r0, #0
1000e05e:	d104      	bne.n	1000e06a <gapc_dev_info_req_ind_handler+0x1a>
1000e060:	4b03      	ldr	r3, [pc, #12]	; (1000e070 <gapc_dev_info_req_ind_handler+0x20>)
1000e062:	33aa      	adds	r3, #170	; 0xaa
1000e064:	881b      	ldrh	r3, [r3, #0]
1000e066:	2b00      	cmp	r3, #0
1000e068:	d001      	beq.n	1000e06e <gapc_dev_info_req_ind_handler+0x1e>
1000e06a:	4b02      	ldr	r3, [pc, #8]	; (1000e074 <gapc_dev_info_req_ind_handler+0x24>)
1000e06c:	4798      	blx	r3
1000e06e:	bd08      	pop	{r3, pc}
1000e070:	1001493e 	.word	0x1001493e
1000e074:	1000d721 	.word	0x1000d721

1000e078 <gapc_sec_req_ind>:
1000e078:	0a00      	lsrs	r0, r0, #8
1000e07a:	8010      	strh	r0, [r2, #0]
1000e07c:	7809      	ldrb	r1, [r1, #0]
1000e07e:	2301      	movs	r3, #1
1000e080:	1c08      	adds	r0, r1, #0
1000e082:	0889      	lsrs	r1, r1, #2
1000e084:	4018      	ands	r0, r3
1000e086:	400b      	ands	r3, r1
1000e088:	70d0      	strb	r0, [r2, #3]
1000e08a:	7113      	strb	r3, [r2, #4]
1000e08c:	4770      	bx	lr

1000e08e <gapc_sign_counter_ind_handler>:
1000e08e:	0a00      	lsrs	r0, r0, #8
1000e090:	8010      	strh	r0, [r2, #0]
1000e092:	784b      	ldrb	r3, [r1, #1]
1000e094:	0218      	lsls	r0, r3, #8
1000e096:	788b      	ldrb	r3, [r1, #2]
1000e098:	041b      	lsls	r3, r3, #16
1000e09a:	4303      	orrs	r3, r0
1000e09c:	7808      	ldrb	r0, [r1, #0]
1000e09e:	4303      	orrs	r3, r0
1000e0a0:	78c8      	ldrb	r0, [r1, #3]
1000e0a2:	0600      	lsls	r0, r0, #24
1000e0a4:	4303      	orrs	r3, r0
1000e0a6:	6053      	str	r3, [r2, #4]
1000e0a8:	794b      	ldrb	r3, [r1, #5]
1000e0aa:	0218      	lsls	r0, r3, #8
1000e0ac:	798b      	ldrb	r3, [r1, #6]
1000e0ae:	041b      	lsls	r3, r3, #16
1000e0b0:	4303      	orrs	r3, r0
1000e0b2:	7908      	ldrb	r0, [r1, #4]
1000e0b4:	79c9      	ldrb	r1, [r1, #7]
1000e0b6:	4303      	orrs	r3, r0
1000e0b8:	0609      	lsls	r1, r1, #24
1000e0ba:	430b      	orrs	r3, r1
1000e0bc:	2000      	movs	r0, #0
1000e0be:	6093      	str	r3, [r2, #8]
1000e0c0:	4770      	bx	lr
	...

1000e0c4 <gapc_peer_att_info_ind_handler>:
1000e0c4:	b510      	push	{r4, lr}
1000e0c6:	0a00      	lsrs	r0, r0, #8
1000e0c8:	8010      	strh	r0, [r2, #0]
1000e0ca:	7808      	ldrb	r0, [r1, #0]
1000e0cc:	7090      	strb	r0, [r2, #2]
1000e0ce:	788b      	ldrb	r3, [r1, #2]
1000e0d0:	784c      	ldrb	r4, [r1, #1]
1000e0d2:	021b      	lsls	r3, r3, #8
1000e0d4:	4323      	orrs	r3, r4
1000e0d6:	8093      	strh	r3, [r2, #4]
1000e0d8:	2801      	cmp	r0, #1
1000e0da:	d027      	beq.n	1000e12c <gapc_peer_att_info_ind_handler+0x68>
1000e0dc:	2800      	cmp	r0, #0
1000e0de:	d017      	beq.n	1000e110 <gapc_peer_att_info_ind_handler+0x4c>
1000e0e0:	2802      	cmp	r0, #2
1000e0e2:	d12a      	bne.n	1000e13a <gapc_peer_att_info_ind_handler+0x76>
1000e0e4:	790b      	ldrb	r3, [r1, #4]
1000e0e6:	78c8      	ldrb	r0, [r1, #3]
1000e0e8:	021b      	lsls	r3, r3, #8
1000e0ea:	4303      	orrs	r3, r0
1000e0ec:	8113      	strh	r3, [r2, #8]
1000e0ee:	798b      	ldrb	r3, [r1, #6]
1000e0f0:	7948      	ldrb	r0, [r1, #5]
1000e0f2:	021b      	lsls	r3, r3, #8
1000e0f4:	4303      	orrs	r3, r0
1000e0f6:	80d3      	strh	r3, [r2, #6]
1000e0f8:	7a0b      	ldrb	r3, [r1, #8]
1000e0fa:	79c8      	ldrb	r0, [r1, #7]
1000e0fc:	021b      	lsls	r3, r3, #8
1000e0fe:	4303      	orrs	r3, r0
1000e100:	8193      	strh	r3, [r2, #12]
1000e102:	7a8b      	ldrb	r3, [r1, #10]
1000e104:	7a49      	ldrb	r1, [r1, #9]
1000e106:	021b      	lsls	r3, r3, #8
1000e108:	430b      	orrs	r3, r1
1000e10a:	8153      	strh	r3, [r2, #10]
1000e10c:	2306      	movs	r3, #6
1000e10e:	e013      	b.n	1000e138 <gapc_peer_att_info_ind_handler+0x74>
1000e110:	1c14      	adds	r4, r2, #0
1000e112:	1c20      	adds	r0, r4, #0
1000e114:	790a      	ldrb	r2, [r1, #4]
1000e116:	78cb      	ldrb	r3, [r1, #3]
1000e118:	0212      	lsls	r2, r2, #8
1000e11a:	431a      	orrs	r2, r3
1000e11c:	80e2      	strh	r2, [r4, #6]
1000e11e:	4b07      	ldr	r3, [pc, #28]	; (1000e13c <gapc_peer_att_info_ind_handler+0x78>)
1000e120:	3008      	adds	r0, #8
1000e122:	3105      	adds	r1, #5
1000e124:	4798      	blx	r3
1000e126:	2302      	movs	r3, #2
1000e128:	70a3      	strb	r3, [r4, #2]
1000e12a:	e006      	b.n	1000e13a <gapc_peer_att_info_ind_handler+0x76>
1000e12c:	790b      	ldrb	r3, [r1, #4]
1000e12e:	78c9      	ldrb	r1, [r1, #3]
1000e130:	021b      	lsls	r3, r3, #8
1000e132:	430b      	orrs	r3, r1
1000e134:	80d3      	strh	r3, [r2, #6]
1000e136:	2305      	movs	r3, #5
1000e138:	7093      	strb	r3, [r2, #2]
1000e13a:	bd10      	pop	{r4, pc}
1000e13c:	1000ffab 	.word	0x1000ffab

1000e140 <gapc_con_channel_map_ind_handler>:
1000e140:	b508      	push	{r3, lr}
1000e142:	2300      	movs	r3, #0
1000e144:	0a00      	lsrs	r0, r0, #8
1000e146:	7013      	strb	r3, [r2, #0]
1000e148:	8050      	strh	r0, [r2, #2]
1000e14a:	4b02      	ldr	r3, [pc, #8]	; (1000e154 <gapc_con_channel_map_ind_handler+0x14>)
1000e14c:	1d10      	adds	r0, r2, #4
1000e14e:	2205      	movs	r2, #5
1000e150:	4798      	blx	r3
1000e152:	bd08      	pop	{r3, pc}
1000e154:	1000ffab 	.word	0x1000ffab

1000e158 <gapc_lecb_connected>:
1000e158:	7843      	ldrb	r3, [r0, #1]
1000e15a:	7802      	ldrb	r2, [r0, #0]
1000e15c:	021b      	lsls	r3, r3, #8
1000e15e:	4313      	orrs	r3, r2
1000e160:	800b      	strh	r3, [r1, #0]
1000e162:	78c3      	ldrb	r3, [r0, #3]
1000e164:	7882      	ldrb	r2, [r0, #2]
1000e166:	021b      	lsls	r3, r3, #8
1000e168:	4313      	orrs	r3, r2
1000e16a:	804b      	strh	r3, [r1, #2]
1000e16c:	7943      	ldrb	r3, [r0, #5]
1000e16e:	7902      	ldrb	r2, [r0, #4]
1000e170:	021b      	lsls	r3, r3, #8
1000e172:	4313      	orrs	r3, r2
1000e174:	808b      	strh	r3, [r1, #4]
1000e176:	79c3      	ldrb	r3, [r0, #7]
1000e178:	7982      	ldrb	r2, [r0, #6]
1000e17a:	021b      	lsls	r3, r3, #8
1000e17c:	4313      	orrs	r3, r2
1000e17e:	80cb      	strh	r3, [r1, #6]
1000e180:	2300      	movs	r3, #0
1000e182:	720b      	strb	r3, [r1, #8]
1000e184:	4770      	bx	lr

1000e186 <gapc_lecb_disconnected>:
1000e186:	7843      	ldrb	r3, [r0, #1]
1000e188:	7802      	ldrb	r2, [r0, #0]
1000e18a:	021b      	lsls	r3, r3, #8
1000e18c:	4313      	orrs	r3, r2
1000e18e:	800b      	strh	r3, [r1, #0]
1000e190:	78c3      	ldrb	r3, [r0, #3]
1000e192:	7882      	ldrb	r2, [r0, #2]
1000e194:	021b      	lsls	r3, r3, #8
1000e196:	4313      	orrs	r3, r2
1000e198:	804b      	strh	r3, [r1, #2]
1000e19a:	4770      	bx	lr

1000e19c <gapc_lecb_connect_req_ind>:
1000e19c:	7843      	ldrb	r3, [r0, #1]
1000e19e:	7802      	ldrb	r2, [r0, #0]
1000e1a0:	021b      	lsls	r3, r3, #8
1000e1a2:	4313      	orrs	r3, r2
1000e1a4:	800b      	strh	r3, [r1, #0]
1000e1a6:	78c3      	ldrb	r3, [r0, #3]
1000e1a8:	7882      	ldrb	r2, [r0, #2]
1000e1aa:	021b      	lsls	r3, r3, #8
1000e1ac:	4313      	orrs	r3, r2
1000e1ae:	804b      	strh	r3, [r1, #2]
1000e1b0:	7943      	ldrb	r3, [r0, #5]
1000e1b2:	7902      	ldrb	r2, [r0, #4]
1000e1b4:	021b      	lsls	r3, r3, #8
1000e1b6:	4313      	orrs	r3, r2
1000e1b8:	808b      	strh	r3, [r1, #4]
1000e1ba:	79c3      	ldrb	r3, [r0, #7]
1000e1bc:	7982      	ldrb	r2, [r0, #6]
1000e1be:	021b      	lsls	r3, r3, #8
1000e1c0:	4313      	orrs	r3, r2
1000e1c2:	80cb      	strh	r3, [r1, #6]
1000e1c4:	4770      	bx	lr

1000e1c6 <gapc_lecb_add_credit_resp_handler>:
1000e1c6:	7843      	ldrb	r3, [r0, #1]
1000e1c8:	7802      	ldrb	r2, [r0, #0]
1000e1ca:	021b      	lsls	r3, r3, #8
1000e1cc:	4313      	orrs	r3, r2
1000e1ce:	800b      	strh	r3, [r1, #0]
1000e1d0:	78c3      	ldrb	r3, [r0, #3]
1000e1d2:	7882      	ldrb	r2, [r0, #2]
1000e1d4:	021b      	lsls	r3, r3, #8
1000e1d6:	4313      	orrs	r3, r2
1000e1d8:	804b      	strh	r3, [r1, #2]
1000e1da:	7943      	ldrb	r3, [r0, #5]
1000e1dc:	7902      	ldrb	r2, [r0, #4]
1000e1de:	021b      	lsls	r3, r3, #8
1000e1e0:	4313      	orrs	r3, r2
1000e1e2:	808b      	strh	r3, [r1, #4]
1000e1e4:	4770      	bx	lr
	...

1000e1e8 <gapm_reset_req_handler>:
1000e1e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000e1ea:	466b      	mov	r3, sp
1000e1ec:	4915      	ldr	r1, [pc, #84]	; (1000e244 <gapm_reset_req_handler+0x5c>)
1000e1ee:	4816      	ldr	r0, [pc, #88]	; (1000e248 <gapm_reset_req_handler+0x60>)
1000e1f0:	880c      	ldrh	r4, [r1, #0]
1000e1f2:	8809      	ldrh	r1, [r1, #0]
1000e1f4:	1ddd      	adds	r5, r3, #7
1000e1f6:	0a09      	lsrs	r1, r1, #8
1000e1f8:	2300      	movs	r3, #0
1000e1fa:	2202      	movs	r2, #2
1000e1fc:	7141      	strb	r1, [r0, #5]
1000e1fe:	26d0      	movs	r6, #208	; 0xd0
1000e200:	2101      	movs	r1, #1
1000e202:	7104      	strb	r4, [r0, #4]
1000e204:	4c11      	ldr	r4, [pc, #68]	; (1000e24c <gapm_reset_req_handler+0x64>)
1000e206:	702b      	strb	r3, [r5, #0]
1000e208:	7002      	strb	r2, [r0, #0]
1000e20a:	70c3      	strb	r3, [r0, #3]
1000e20c:	320b      	adds	r2, #11
1000e20e:	7201      	strb	r1, [r0, #8]
1000e210:	7181      	strb	r1, [r0, #6]
1000e212:	71c3      	strb	r3, [r0, #7]
1000e214:	3108      	adds	r1, #8
1000e216:	4b0e      	ldr	r3, [pc, #56]	; (1000e250 <gapm_reset_req_handler+0x68>)
1000e218:	0136      	lsls	r6, r6, #4
1000e21a:	7042      	strb	r2, [r0, #1]
1000e21c:	7082      	strb	r2, [r0, #2]
1000e21e:	80a2      	strh	r2, [r4, #4]
1000e220:	8026      	strh	r6, [r4, #0]
1000e222:	4798      	blx	r3
1000e224:	1c28      	adds	r0, r5, #0
1000e226:	4b0b      	ldr	r3, [pc, #44]	; (1000e254 <gapm_reset_req_handler+0x6c>)
1000e228:	4798      	blx	r3
1000e22a:	782b      	ldrb	r3, [r5, #0]
1000e22c:	20e2      	movs	r0, #226	; 0xe2
1000e22e:	2b00      	cmp	r3, #0
1000e230:	d106      	bne.n	1000e240 <gapm_reset_req_handler+0x58>
1000e232:	68a3      	ldr	r3, [r4, #8]
1000e234:	20e2      	movs	r0, #226	; 0xe2
1000e236:	781a      	ldrb	r2, [r3, #0]
1000e238:	785b      	ldrb	r3, [r3, #1]
1000e23a:	2a01      	cmp	r2, #1
1000e23c:	d100      	bne.n	1000e240 <gapm_reset_req_handler+0x58>
1000e23e:	1c18      	adds	r0, r3, #0
1000e240:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000e242:	46c0      	nop			; (mov r8, r8)
1000e244:	100148ac 	.word	0x100148ac
1000e248:	10014c1c 	.word	0x10014c1c
1000e24c:	100148a0 	.word	0x100148a0
1000e250:	1000d611 	.word	0x1000d611
1000e254:	1000d675 	.word	0x1000d675

1000e258 <gapm_set_dev_config_cmd_handler>:
1000e258:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e25a:	b089      	sub	sp, #36	; 0x24
1000e25c:	9303      	str	r3, [sp, #12]
1000e25e:	ab0e      	add	r3, sp, #56	; 0x38
1000e260:	781b      	ldrb	r3, [r3, #0]
1000e262:	4c37      	ldr	r4, [pc, #220]	; (1000e340 <gapm_set_dev_config_cmd_handler+0xe8>)
1000e264:	9304      	str	r3, [sp, #16]
1000e266:	ab0f      	add	r3, sp, #60	; 0x3c
1000e268:	781b      	ldrb	r3, [r3, #0]
1000e26a:	270d      	movs	r7, #13
1000e26c:	9305      	str	r3, [sp, #20]
1000e26e:	ab10      	add	r3, sp, #64	; 0x40
1000e270:	881b      	ldrh	r3, [r3, #0]
1000e272:	72a1      	strb	r1, [r4, #10]
1000e274:	9300      	str	r3, [sp, #0]
1000e276:	ab11      	add	r3, sp, #68	; 0x44
1000e278:	881b      	ldrh	r3, [r3, #0]
1000e27a:	0a09      	lsrs	r1, r1, #8
1000e27c:	9301      	str	r3, [sp, #4]
1000e27e:	ab12      	add	r3, sp, #72	; 0x48
1000e280:	881b      	ldrh	r3, [r3, #0]
1000e282:	7260      	strb	r0, [r4, #9]
1000e284:	9302      	str	r3, [sp, #8]
1000e286:	ab06      	add	r3, sp, #24
1000e288:	1dde      	adds	r6, r3, #7
1000e28a:	2300      	movs	r3, #0
1000e28c:	7033      	strb	r3, [r6, #0]
1000e28e:	2304      	movs	r3, #4
1000e290:	7023      	strb	r3, [r4, #0]
1000e292:	2300      	movs	r3, #0
1000e294:	70e3      	strb	r3, [r4, #3]
1000e296:	4b2b      	ldr	r3, [pc, #172]	; (1000e344 <gapm_set_dev_config_cmd_handler+0xec>)
1000e298:	72e1      	strb	r1, [r4, #11]
1000e29a:	881d      	ldrh	r5, [r3, #0]
1000e29c:	881b      	ldrh	r3, [r3, #0]
1000e29e:	1c11      	adds	r1, r2, #0
1000e2a0:	0a1b      	lsrs	r3, r3, #8
1000e2a2:	7163      	strb	r3, [r4, #5]
1000e2a4:	2303      	movs	r3, #3
1000e2a6:	7125      	strb	r5, [r4, #4]
1000e2a8:	2206      	movs	r2, #6
1000e2aa:	4d27      	ldr	r5, [pc, #156]	; (1000e348 <gapm_set_dev_config_cmd_handler+0xf0>)
1000e2ac:	4827      	ldr	r0, [pc, #156]	; (1000e34c <gapm_set_dev_config_cmd_handler+0xf4>)
1000e2ae:	7223      	strb	r3, [r4, #8]
1000e2b0:	7067      	strb	r7, [r4, #1]
1000e2b2:	70a7      	strb	r7, [r4, #2]
1000e2b4:	47a8      	blx	r5
1000e2b6:	9903      	ldr	r1, [sp, #12]
1000e2b8:	2210      	movs	r2, #16
1000e2ba:	4825      	ldr	r0, [pc, #148]	; (1000e350 <gapm_set_dev_config_cmd_handler+0xf8>)
1000e2bc:	47a8      	blx	r5
1000e2be:	466a      	mov	r2, sp
1000e2c0:	7c12      	ldrb	r2, [r2, #16]
1000e2c2:	1ce3      	adds	r3, r4, #3
1000e2c4:	77da      	strb	r2, [r3, #31]
1000e2c6:	466a      	mov	r2, sp
1000e2c8:	7d12      	ldrb	r2, [r2, #20]
1000e2ca:	1d23      	adds	r3, r4, #4
1000e2cc:	77da      	strb	r2, [r3, #31]
1000e2ce:	466a      	mov	r2, sp
1000e2d0:	7812      	ldrb	r2, [r2, #0]
1000e2d2:	1d63      	adds	r3, r4, #5
1000e2d4:	77da      	strb	r2, [r3, #31]
1000e2d6:	9b00      	ldr	r3, [sp, #0]
1000e2d8:	1da2      	adds	r2, r4, #6
1000e2da:	0a1b      	lsrs	r3, r3, #8
1000e2dc:	77d3      	strb	r3, [r2, #31]
1000e2de:	466a      	mov	r2, sp
1000e2e0:	7912      	ldrb	r2, [r2, #4]
1000e2e2:	1de3      	adds	r3, r4, #7
1000e2e4:	77da      	strb	r2, [r3, #31]
1000e2e6:	1c22      	adds	r2, r4, #0
1000e2e8:	9b01      	ldr	r3, [sp, #4]
1000e2ea:	3208      	adds	r2, #8
1000e2ec:	0a1b      	lsrs	r3, r3, #8
1000e2ee:	77d3      	strb	r3, [r2, #31]
1000e2f0:	466a      	mov	r2, sp
1000e2f2:	1c23      	adds	r3, r4, #0
1000e2f4:	7a12      	ldrb	r2, [r2, #8]
1000e2f6:	3328      	adds	r3, #40	; 0x28
1000e2f8:	701a      	strb	r2, [r3, #0]
1000e2fa:	1c22      	adds	r2, r4, #0
1000e2fc:	9b02      	ldr	r3, [sp, #8]
1000e2fe:	3229      	adds	r2, #41	; 0x29
1000e300:	0a1b      	lsrs	r3, r3, #8
1000e302:	7013      	strb	r3, [r2, #0]
1000e304:	23d0      	movs	r3, #208	; 0xd0
1000e306:	4d13      	ldr	r5, [pc, #76]	; (1000e354 <gapm_set_dev_config_cmd_handler+0xfc>)
1000e308:	011b      	lsls	r3, r3, #4
1000e30a:	802b      	strh	r3, [r5, #0]
1000e30c:	2322      	movs	r3, #34	; 0x22
1000e30e:	71a3      	strb	r3, [r4, #6]
1000e310:	2300      	movs	r3, #0
1000e312:	212a      	movs	r1, #42	; 0x2a
1000e314:	71e3      	strb	r3, [r4, #7]
1000e316:	1c20      	adds	r0, r4, #0
1000e318:	4b0f      	ldr	r3, [pc, #60]	; (1000e358 <gapm_set_dev_config_cmd_handler+0x100>)
1000e31a:	80af      	strh	r7, [r5, #4]
1000e31c:	4798      	blx	r3
1000e31e:	1c30      	adds	r0, r6, #0
1000e320:	4b0e      	ldr	r3, [pc, #56]	; (1000e35c <gapm_set_dev_config_cmd_handler+0x104>)
1000e322:	4798      	blx	r3
1000e324:	7833      	ldrb	r3, [r6, #0]
1000e326:	20e2      	movs	r0, #226	; 0xe2
1000e328:	2b00      	cmp	r3, #0
1000e32a:	d106      	bne.n	1000e33a <gapm_set_dev_config_cmd_handler+0xe2>
1000e32c:	68ab      	ldr	r3, [r5, #8]
1000e32e:	20e2      	movs	r0, #226	; 0xe2
1000e330:	781a      	ldrb	r2, [r3, #0]
1000e332:	785b      	ldrb	r3, [r3, #1]
1000e334:	2a03      	cmp	r2, #3
1000e336:	d100      	bne.n	1000e33a <gapm_set_dev_config_cmd_handler+0xe2>
1000e338:	1c18      	adds	r0, r3, #0
1000e33a:	b009      	add	sp, #36	; 0x24
1000e33c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e33e:	46c0      	nop			; (mov r8, r8)
1000e340:	10014c1c 	.word	0x10014c1c
1000e344:	100148ac 	.word	0x100148ac
1000e348:	1000ffab 	.word	0x1000ffab
1000e34c:	10014c28 	.word	0x10014c28
1000e350:	10014c2e 	.word	0x10014c2e
1000e354:	100148a0 	.word	0x100148a0
1000e358:	1000d611 	.word	0x1000d611
1000e35c:	1000d675 	.word	0x1000d675

1000e360 <gapm_get_dev_config_cmd_handler>:
1000e360:	4684      	mov	ip, r0
1000e362:	4663      	mov	r3, ip
1000e364:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e366:	b085      	sub	sp, #20
1000e368:	9100      	str	r1, [sp, #0]
1000e36a:	20cf      	movs	r0, #207	; 0xcf
1000e36c:	2b01      	cmp	r3, #1
1000e36e:	d854      	bhi.n	1000e41a <gapm_get_dev_config_cmd_handler+0xba>
1000e370:	2900      	cmp	r1, #0
1000e372:	d052      	beq.n	1000e41a <gapm_get_dev_config_cmd_handler+0xba>
1000e374:	2200      	movs	r2, #0
1000e376:	492a      	ldr	r1, [pc, #168]	; (1000e420 <gapm_get_dev_config_cmd_handler+0xc0>)
1000e378:	ab02      	add	r3, sp, #8
1000e37a:	880c      	ldrh	r4, [r1, #0]
1000e37c:	8809      	ldrh	r1, [r1, #0]
1000e37e:	1d9f      	adds	r7, r3, #6
1000e380:	719a      	strb	r2, [r3, #6]
1000e382:	4b28      	ldr	r3, [pc, #160]	; (1000e424 <gapm_get_dev_config_cmd_handler+0xc4>)
1000e384:	0a09      	lsrs	r1, r1, #8
1000e386:	250d      	movs	r5, #13
1000e388:	2606      	movs	r6, #6
1000e38a:	7159      	strb	r1, [r3, #5]
1000e38c:	4661      	mov	r1, ip
1000e38e:	701e      	strb	r6, [r3, #0]
1000e390:	705d      	strb	r5, [r3, #1]
1000e392:	709d      	strb	r5, [r3, #2]
1000e394:	70da      	strb	r2, [r3, #3]
1000e396:	711c      	strb	r4, [r3, #4]
1000e398:	2901      	cmp	r1, #1
1000e39a:	d13e      	bne.n	1000e41a <gapm_get_dev_config_cmd_handler+0xba>
1000e39c:	21d0      	movs	r1, #208	; 0xd0
1000e39e:	4c22      	ldr	r4, [pc, #136]	; (1000e428 <gapm_get_dev_config_cmd_handler+0xc8>)
1000e3a0:	0109      	lsls	r1, r1, #4
1000e3a2:	8061      	strh	r1, [r4, #2]
1000e3a4:	4921      	ldr	r1, [pc, #132]	; (1000e42c <gapm_get_dev_config_cmd_handler+0xcc>)
1000e3a6:	71da      	strb	r2, [r3, #7]
1000e3a8:	8021      	strh	r1, [r4, #0]
1000e3aa:	4661      	mov	r1, ip
1000e3ac:	721e      	strb	r6, [r3, #8]
1000e3ae:	7199      	strb	r1, [r3, #6]
1000e3b0:	1c18      	adds	r0, r3, #0
1000e3b2:	2109      	movs	r1, #9
1000e3b4:	4b1e      	ldr	r3, [pc, #120]	; (1000e430 <gapm_get_dev_config_cmd_handler+0xd0>)
1000e3b6:	80a5      	strh	r5, [r4, #4]
1000e3b8:	4798      	blx	r3
1000e3ba:	1c38      	adds	r0, r7, #0
1000e3bc:	4b1d      	ldr	r3, [pc, #116]	; (1000e434 <gapm_get_dev_config_cmd_handler+0xd4>)
1000e3be:	4798      	blx	r3
1000e3c0:	783b      	ldrb	r3, [r7, #0]
1000e3c2:	20e2      	movs	r0, #226	; 0xe2
1000e3c4:	9301      	str	r3, [sp, #4]
1000e3c6:	2b00      	cmp	r3, #0
1000e3c8:	d127      	bne.n	1000e41a <gapm_get_dev_config_cmd_handler+0xba>
1000e3ca:	8821      	ldrh	r1, [r4, #0]
1000e3cc:	4a1a      	ldr	r2, [pc, #104]	; (1000e438 <gapm_get_dev_config_cmd_handler+0xd8>)
1000e3ce:	68a7      	ldr	r7, [r4, #8]
1000e3d0:	3b01      	subs	r3, #1
1000e3d2:	4291      	cmp	r1, r2
1000e3d4:	d001      	beq.n	1000e3da <gapm_get_dev_config_cmd_handler+0x7a>
1000e3d6:	8023      	strh	r3, [r4, #0]
1000e3d8:	e01a      	b.n	1000e410 <gapm_get_dev_config_cmd_handler+0xb0>
1000e3da:	8063      	strh	r3, [r4, #2]
1000e3dc:	9b00      	ldr	r3, [sp, #0]
1000e3de:	1c39      	adds	r1, r7, #0
1000e3e0:	1c58      	adds	r0, r3, #1
1000e3e2:	1c32      	adds	r2, r6, #0
1000e3e4:	4b15      	ldr	r3, [pc, #84]	; (1000e43c <gapm_get_dev_config_cmd_handler+0xdc>)
1000e3e6:	4798      	blx	r3
1000e3e8:	79bb      	ldrb	r3, [r7, #6]
1000e3ea:	9a00      	ldr	r2, [sp, #0]
1000e3ec:	7013      	strb	r3, [r2, #0]
1000e3ee:	23d0      	movs	r3, #208	; 0xd0
1000e3f0:	011b      	lsls	r3, r3, #4
1000e3f2:	8023      	strh	r3, [r4, #0]
1000e3f4:	ab02      	add	r3, sp, #8
1000e3f6:	80a5      	strh	r5, [r4, #4]
1000e3f8:	1ddd      	adds	r5, r3, #7
1000e3fa:	466b      	mov	r3, sp
1000e3fc:	791b      	ldrb	r3, [r3, #4]
1000e3fe:	1c28      	adds	r0, r5, #0
1000e400:	702b      	strb	r3, [r5, #0]
1000e402:	4b0c      	ldr	r3, [pc, #48]	; (1000e434 <gapm_get_dev_config_cmd_handler+0xd4>)
1000e404:	4798      	blx	r3
1000e406:	782b      	ldrb	r3, [r5, #0]
1000e408:	20d0      	movs	r0, #208	; 0xd0
1000e40a:	2b00      	cmp	r3, #0
1000e40c:	d105      	bne.n	1000e41a <gapm_get_dev_config_cmd_handler+0xba>
1000e40e:	68a7      	ldr	r7, [r4, #8]
1000e410:	783b      	ldrb	r3, [r7, #0]
1000e412:	7878      	ldrb	r0, [r7, #1]
1000e414:	2b06      	cmp	r3, #6
1000e416:	d000      	beq.n	1000e41a <gapm_get_dev_config_cmd_handler+0xba>
1000e418:	20e2      	movs	r0, #226	; 0xe2
1000e41a:	b005      	add	sp, #20
1000e41c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e41e:	46c0      	nop			; (mov r8, r8)
1000e420:	100148ac 	.word	0x100148ac
1000e424:	10014c1c 	.word	0x10014c1c
1000e428:	100148a0 	.word	0x100148a0
1000e42c:	00000d08 	.word	0x00000d08
1000e430:	1000d611 	.word	0x1000d611
1000e434:	1000d675 	.word	0x1000d675
1000e438:	0000ffff 	.word	0x0000ffff
1000e43c:	1000ffab 	.word	0x1000ffab

1000e440 <gapm_cancel_cmd_handler>:
1000e440:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000e442:	4916      	ldr	r1, [pc, #88]	; (1000e49c <gapm_cancel_cmd_handler+0x5c>)
1000e444:	4816      	ldr	r0, [pc, #88]	; (1000e4a0 <gapm_cancel_cmd_handler+0x60>)
1000e446:	880c      	ldrh	r4, [r1, #0]
1000e448:	8809      	ldrh	r1, [r1, #0]
1000e44a:	466b      	mov	r3, sp
1000e44c:	0a09      	lsrs	r1, r1, #8
1000e44e:	7141      	strb	r1, [r0, #5]
1000e450:	2102      	movs	r1, #2
1000e452:	2203      	movs	r2, #3
1000e454:	7201      	strb	r1, [r0, #8]
1000e456:	21d0      	movs	r1, #208	; 0xd0
1000e458:	1ddd      	adds	r5, r3, #7
1000e45a:	2300      	movs	r3, #0
1000e45c:	7104      	strb	r4, [r0, #4]
1000e45e:	4c11      	ldr	r4, [pc, #68]	; (1000e4a4 <gapm_cancel_cmd_handler+0x64>)
1000e460:	7002      	strb	r2, [r0, #0]
1000e462:	0109      	lsls	r1, r1, #4
1000e464:	320a      	adds	r2, #10
1000e466:	702b      	strb	r3, [r5, #0]
1000e468:	7042      	strb	r2, [r0, #1]
1000e46a:	7082      	strb	r2, [r0, #2]
1000e46c:	70c3      	strb	r3, [r0, #3]
1000e46e:	8021      	strh	r1, [r4, #0]
1000e470:	80a2      	strh	r2, [r4, #4]
1000e472:	71c3      	strb	r3, [r0, #7]
1000e474:	3a0c      	subs	r2, #12
1000e476:	2109      	movs	r1, #9
1000e478:	4b0b      	ldr	r3, [pc, #44]	; (1000e4a8 <gapm_cancel_cmd_handler+0x68>)
1000e47a:	7182      	strb	r2, [r0, #6]
1000e47c:	4798      	blx	r3
1000e47e:	1c28      	adds	r0, r5, #0
1000e480:	4b0a      	ldr	r3, [pc, #40]	; (1000e4ac <gapm_cancel_cmd_handler+0x6c>)
1000e482:	4798      	blx	r3
1000e484:	7828      	ldrb	r0, [r5, #0]
1000e486:	2800      	cmp	r0, #0
1000e488:	d001      	beq.n	1000e48e <gapm_cancel_cmd_handler+0x4e>
1000e48a:	20e2      	movs	r0, #226	; 0xe2
1000e48c:	e004      	b.n	1000e498 <gapm_cancel_cmd_handler+0x58>
1000e48e:	68a3      	ldr	r3, [r4, #8]
1000e490:	785b      	ldrb	r3, [r3, #1]
1000e492:	2b44      	cmp	r3, #68	; 0x44
1000e494:	d000      	beq.n	1000e498 <gapm_cancel_cmd_handler+0x58>
1000e496:	1c18      	adds	r0, r3, #0
1000e498:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000e49a:	46c0      	nop			; (mov r8, r8)
1000e49c:	100148ac 	.word	0x100148ac
1000e4a0:	10014c1c 	.word	0x10014c1c
1000e4a4:	100148a0 	.word	0x100148a0
1000e4a8:	1000d611 	.word	0x1000d611
1000e4ac:	1000d675 	.word	0x1000d675

1000e4b0 <gapm_dev_bdaddr_ind_handler>:
1000e4b0:	b538      	push	{r3, r4, r5, lr}
1000e4b2:	1c05      	adds	r5, r0, #0
1000e4b4:	1c0c      	adds	r4, r1, #0
1000e4b6:	1c48      	adds	r0, r1, #1
1000e4b8:	2206      	movs	r2, #6
1000e4ba:	1c29      	adds	r1, r5, #0
1000e4bc:	4b02      	ldr	r3, [pc, #8]	; (1000e4c8 <gapm_dev_bdaddr_ind_handler+0x18>)
1000e4be:	4798      	blx	r3
1000e4c0:	79ab      	ldrb	r3, [r5, #6]
1000e4c2:	2000      	movs	r0, #0
1000e4c4:	7023      	strb	r3, [r4, #0]
1000e4c6:	bd38      	pop	{r3, r4, r5, pc}
1000e4c8:	1000ffab 	.word	0x1000ffab

1000e4cc <gapm_cmp_evt>:
1000e4cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e4ce:	7803      	ldrb	r3, [r0, #0]
1000e4d0:	7845      	ldrb	r5, [r0, #1]
1000e4d2:	3b0c      	subs	r3, #12
1000e4d4:	1e18      	subs	r0, r3, #0
1000e4d6:	280b      	cmp	r0, #11
1000e4d8:	d900      	bls.n	1000e4dc <gapm_cmp_evt+0x10>
1000e4da:	e08d      	b.n	1000e5f8 <gapm_cmp_evt+0x12c>
1000e4dc:	1c0c      	adds	r4, r1, #0
1000e4de:	f000 fbbf 	bl	1000ec60 <__gnu_thumb1_case_uqi>
1000e4e2:	1952      	.short	0x1952
1000e4e4:	068b1919 	.word	0x068b1919
1000e4e8:	8b595906 	.word	0x8b595906
1000e4ec:	0d8b      	.short	0x0d8b
1000e4ee:	2300      	movs	r3, #0
1000e4f0:	2d45      	cmp	r5, #69	; 0x45
1000e4f2:	d000      	beq.n	1000e4f6 <gapm_cmp_evt+0x2a>
1000e4f4:	1c2b      	adds	r3, r5, #0
1000e4f6:	7023      	strb	r3, [r4, #0]
1000e4f8:	2002      	movs	r0, #2
1000e4fa:	e07e      	b.n	1000e5fa <gapm_cmp_evt+0x12e>
1000e4fc:	203b      	movs	r0, #59	; 0x3b
1000e4fe:	2d00      	cmp	r5, #0
1000e500:	d100      	bne.n	1000e504 <gapm_cmp_evt+0x38>
1000e502:	e07a      	b.n	1000e5fa <gapm_cmp_evt+0x12e>
1000e504:	700d      	strb	r5, [r1, #0]
1000e506:	1c48      	adds	r0, r1, #1
1000e508:	2210      	movs	r2, #16
1000e50a:	2100      	movs	r1, #0
1000e50c:	4b3b      	ldr	r3, [pc, #236]	; (1000e5fc <gapm_cmp_evt+0x130>)
1000e50e:	4798      	blx	r3
1000e510:	200f      	movs	r0, #15
1000e512:	e072      	b.n	1000e5fa <gapm_cmp_evt+0x12e>
1000e514:	2d00      	cmp	r5, #0
1000e516:	d134      	bne.n	1000e582 <gapm_cmp_evt+0xb6>
1000e518:	4b39      	ldr	r3, [pc, #228]	; (1000e600 <gapm_cmp_evt+0x134>)
1000e51a:	4798      	blx	r3
1000e51c:	1e43      	subs	r3, r0, #1
1000e51e:	b2db      	uxtb	r3, r3
1000e520:	1c28      	adds	r0, r5, #0
1000e522:	2b06      	cmp	r3, #6
1000e524:	d869      	bhi.n	1000e5fa <gapm_cmp_evt+0x12e>
1000e526:	466b      	mov	r3, sp
1000e528:	4e36      	ldr	r6, [pc, #216]	; (1000e604 <gapm_cmp_evt+0x138>)
1000e52a:	1dd9      	adds	r1, r3, #7
1000e52c:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000e52e:	4b36      	ldr	r3, [pc, #216]	; (1000e608 <gapm_cmp_evt+0x13c>)
1000e530:	4798      	blx	r3
1000e532:	2312      	movs	r3, #18
1000e534:	4358      	muls	r0, r3
1000e536:	4935      	ldr	r1, [pc, #212]	; (1000e60c <gapm_cmp_evt+0x140>)
1000e538:	1809      	adds	r1, r1, r0
1000e53a:	1c0b      	adds	r3, r1, #0
1000e53c:	894a      	ldrh	r2, [r1, #10]
1000e53e:	3308      	adds	r3, #8
1000e540:	8122      	strh	r2, [r4, #8]
1000e542:	784f      	ldrb	r7, [r1, #1]
1000e544:	72a5      	strb	r5, [r4, #10]
1000e546:	7027      	strb	r7, [r4, #0]
1000e548:	898a      	ldrh	r2, [r1, #12]
1000e54a:	1c60      	adds	r0, r4, #1
1000e54c:	81a2      	strh	r2, [r4, #12]
1000e54e:	88db      	ldrh	r3, [r3, #6]
1000e550:	3102      	adds	r1, #2
1000e552:	81e3      	strh	r3, [r4, #14]
1000e554:	89cb      	ldrh	r3, [r1, #14]
1000e556:	2206      	movs	r2, #6
1000e558:	8223      	strh	r3, [r4, #16]
1000e55a:	4b2d      	ldr	r3, [pc, #180]	; (1000e610 <gapm_cmp_evt+0x144>)
1000e55c:	4798      	blx	r3
1000e55e:	2f00      	cmp	r7, #0
1000e560:	d00a      	beq.n	1000e578 <gapm_cmp_evt+0xac>
1000e562:	79a3      	ldrb	r3, [r4, #6]
1000e564:	223f      	movs	r2, #63	; 0x3f
1000e566:	1c19      	adds	r1, r3, #0
1000e568:	3501      	adds	r5, #1
1000e56a:	4391      	bics	r1, r2
1000e56c:	29c0      	cmp	r1, #192	; 0xc0
1000e56e:	d003      	beq.n	1000e578 <gapm_cmp_evt+0xac>
1000e570:	065b      	lsls	r3, r3, #25
1000e572:	0fdb      	lsrs	r3, r3, #31
1000e574:	3502      	adds	r5, #2
1000e576:	1aed      	subs	r5, r5, r3
1000e578:	2301      	movs	r3, #1
1000e57a:	425b      	negs	r3, r3
1000e57c:	7025      	strb	r5, [r4, #0]
1000e57e:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000e580:	e038      	b.n	1000e5f4 <gapm_cmp_evt+0x128>
1000e582:	700d      	strb	r5, [r1, #0]
1000e584:	e004      	b.n	1000e590 <gapm_cmp_evt+0xc4>
1000e586:	2300      	movs	r3, #0
1000e588:	2d45      	cmp	r5, #69	; 0x45
1000e58a:	d000      	beq.n	1000e58e <gapm_cmp_evt+0xc2>
1000e58c:	1c2b      	adds	r3, r5, #0
1000e58e:	7023      	strb	r3, [r4, #0]
1000e590:	2003      	movs	r0, #3
1000e592:	e032      	b.n	1000e5fa <gapm_cmp_evt+0x12e>
1000e594:	4e1b      	ldr	r6, [pc, #108]	; (1000e604 <gapm_cmp_evt+0x138>)
1000e596:	2100      	movs	r1, #0
1000e598:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000e59a:	4b1b      	ldr	r3, [pc, #108]	; (1000e608 <gapm_cmp_evt+0x13c>)
1000e59c:	4798      	blx	r3
1000e59e:	2807      	cmp	r0, #7
1000e5a0:	d818      	bhi.n	1000e5d4 <gapm_cmp_evt+0x108>
1000e5a2:	2301      	movs	r3, #1
1000e5a4:	425b      	negs	r3, r3
1000e5a6:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000e5a8:	3313      	adds	r3, #19
1000e5aa:	4358      	muls	r0, r3
1000e5ac:	4917      	ldr	r1, [pc, #92]	; (1000e60c <gapm_cmp_evt+0x140>)
1000e5ae:	1809      	adds	r1, r1, r0
1000e5b0:	1c0b      	adds	r3, r1, #0
1000e5b2:	894a      	ldrh	r2, [r1, #10]
1000e5b4:	3308      	adds	r3, #8
1000e5b6:	8122      	strh	r2, [r4, #8]
1000e5b8:	784a      	ldrb	r2, [r1, #1]
1000e5ba:	72a5      	strb	r5, [r4, #10]
1000e5bc:	7022      	strb	r2, [r4, #0]
1000e5be:	898a      	ldrh	r2, [r1, #12]
1000e5c0:	1c60      	adds	r0, r4, #1
1000e5c2:	81a2      	strh	r2, [r4, #12]
1000e5c4:	88db      	ldrh	r3, [r3, #6]
1000e5c6:	3102      	adds	r1, #2
1000e5c8:	81e3      	strh	r3, [r4, #14]
1000e5ca:	89cb      	ldrh	r3, [r1, #14]
1000e5cc:	2206      	movs	r2, #6
1000e5ce:	8223      	strh	r3, [r4, #16]
1000e5d0:	4b0f      	ldr	r3, [pc, #60]	; (1000e610 <gapm_cmp_evt+0x144>)
1000e5d2:	4798      	blx	r3
1000e5d4:	2200      	movs	r2, #0
1000e5d6:	7823      	ldrb	r3, [r4, #0]
1000e5d8:	4293      	cmp	r3, r2
1000e5da:	d00a      	beq.n	1000e5f2 <gapm_cmp_evt+0x126>
1000e5dc:	79a3      	ldrb	r3, [r4, #6]
1000e5de:	323f      	adds	r2, #63	; 0x3f
1000e5e0:	1c19      	adds	r1, r3, #0
1000e5e2:	4391      	bics	r1, r2
1000e5e4:	3a3e      	subs	r2, #62	; 0x3e
1000e5e6:	29c0      	cmp	r1, #192	; 0xc0
1000e5e8:	d003      	beq.n	1000e5f2 <gapm_cmp_evt+0x126>
1000e5ea:	065b      	lsls	r3, r3, #25
1000e5ec:	0fdb      	lsrs	r3, r3, #31
1000e5ee:	3202      	adds	r2, #2
1000e5f0:	1ad2      	subs	r2, r2, r3
1000e5f2:	7022      	strb	r2, [r4, #0]
1000e5f4:	2005      	movs	r0, #5
1000e5f6:	e000      	b.n	1000e5fa <gapm_cmp_evt+0x12e>
1000e5f8:	2000      	movs	r0, #0
1000e5fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e5fc:	1000ffbd 	.word	0x1000ffbd
1000e600:	1000d81d 	.word	0x1000d81d
1000e604:	1001493e 	.word	0x1001493e
1000e608:	1000d7e1 	.word	0x1000d7e1
1000e60c:	100148ae 	.word	0x100148ae
1000e610:	1000ffab 	.word	0x1000ffab

1000e614 <gapm_adv_report_evt_handler>:
1000e614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e616:	7843      	ldrb	r3, [r0, #1]
1000e618:	1c05      	adds	r5, r0, #0
1000e61a:	9301      	str	r3, [sp, #4]
1000e61c:	466b      	mov	r3, sp
1000e61e:	1c0c      	adds	r4, r1, #0
1000e620:	791b      	ldrb	r3, [r3, #4]
1000e622:	7806      	ldrb	r6, [r0, #0]
1000e624:	2206      	movs	r2, #6
1000e626:	704b      	strb	r3, [r1, #1]
1000e628:	1c88      	adds	r0, r1, #2
1000e62a:	4f1b      	ldr	r7, [pc, #108]	; (1000e698 <gapm_adv_report_evt_handler+0x84>)
1000e62c:	1ca9      	adds	r1, r5, #2
1000e62e:	47b8      	blx	r7
1000e630:	1c20      	adds	r0, r4, #0
1000e632:	1c29      	adds	r1, r5, #0
1000e634:	7a2a      	ldrb	r2, [r5, #8]
1000e636:	3008      	adds	r0, #8
1000e638:	77c2      	strb	r2, [r0, #31]
1000e63a:	3109      	adds	r1, #9
1000e63c:	3528      	adds	r5, #40	; 0x28
1000e63e:	47b8      	blx	r7
1000e640:	782b      	ldrb	r3, [r5, #0]
1000e642:	b25a      	sxtb	r2, r3
1000e644:	2a00      	cmp	r2, #0
1000e646:	da01      	bge.n	1000e64c <gapm_adv_report_evt_handler+0x38>
1000e648:	3301      	adds	r3, #1
1000e64a:	b2db      	uxtb	r3, r3
1000e64c:	1c22      	adds	r2, r4, #0
1000e64e:	3228      	adds	r2, #40	; 0x28
1000e650:	7013      	strb	r3, [r2, #0]
1000e652:	2200      	movs	r2, #0
1000e654:	9b01      	ldr	r3, [sp, #4]
1000e656:	4293      	cmp	r3, r2
1000e658:	d00a      	beq.n	1000e670 <gapm_adv_report_evt_handler+0x5c>
1000e65a:	79e3      	ldrb	r3, [r4, #7]
1000e65c:	323f      	adds	r2, #63	; 0x3f
1000e65e:	1c19      	adds	r1, r3, #0
1000e660:	4391      	bics	r1, r2
1000e662:	3a3e      	subs	r2, #62	; 0x3e
1000e664:	29c0      	cmp	r1, #192	; 0xc0
1000e666:	d003      	beq.n	1000e670 <gapm_adv_report_evt_handler+0x5c>
1000e668:	065b      	lsls	r3, r3, #25
1000e66a:	0fdb      	lsrs	r3, r3, #31
1000e66c:	3202      	adds	r2, #2
1000e66e:	1ad2      	subs	r2, r2, r3
1000e670:	7062      	strb	r2, [r4, #1]
1000e672:	2e04      	cmp	r6, #4
1000e674:	d80f      	bhi.n	1000e696 <gapm_adv_report_evt_handler+0x82>
1000e676:	1c30      	adds	r0, r6, #0
1000e678:	f000 faf2 	bl	1000ec60 <__gnu_thumb1_case_uqi>
1000e67c:	09070503 	.word	0x09070503
1000e680:	0b          	.byte	0x0b
1000e681:	00          	.byte	0x00
1000e682:	2300      	movs	r3, #0
1000e684:	e006      	b.n	1000e694 <gapm_adv_report_evt_handler+0x80>
1000e686:	2301      	movs	r3, #1
1000e688:	e004      	b.n	1000e694 <gapm_adv_report_evt_handler+0x80>
1000e68a:	2302      	movs	r3, #2
1000e68c:	e002      	b.n	1000e694 <gapm_adv_report_evt_handler+0x80>
1000e68e:	2303      	movs	r3, #3
1000e690:	e000      	b.n	1000e694 <gapm_adv_report_evt_handler+0x80>
1000e692:	2305      	movs	r3, #5
1000e694:	7023      	strb	r3, [r4, #0]
1000e696:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e698:	1000ffab 	.word	0x1000ffab

1000e69c <gapm_resolv_addr_cmd_handler>:
1000e69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e69e:	2314      	movs	r3, #20
1000e6a0:	4c12      	ldr	r4, [pc, #72]	; (1000e6ec <gapm_resolv_addr_cmd_handler+0x50>)
1000e6a2:	1c17      	adds	r7, r2, #0
1000e6a4:	7023      	strb	r3, [r4, #0]
1000e6a6:	3b07      	subs	r3, #7
1000e6a8:	7063      	strb	r3, [r4, #1]
1000e6aa:	70a3      	strb	r3, [r4, #2]
1000e6ac:	2300      	movs	r3, #0
1000e6ae:	70e3      	strb	r3, [r4, #3]
1000e6b0:	4b0f      	ldr	r3, [pc, #60]	; (1000e6f0 <gapm_resolv_addr_cmd_handler+0x54>)
1000e6b2:	1c05      	adds	r5, r0, #0
1000e6b4:	881a      	ldrh	r2, [r3, #0]
1000e6b6:	881b      	ldrh	r3, [r3, #0]
1000e6b8:	4e0e      	ldr	r6, [pc, #56]	; (1000e6f4 <gapm_resolv_addr_cmd_handler+0x58>)
1000e6ba:	0a1b      	lsrs	r3, r3, #8
1000e6bc:	7163      	strb	r3, [r4, #5]
1000e6be:	2317      	movs	r3, #23
1000e6c0:	012d      	lsls	r5, r5, #4
1000e6c2:	7122      	strb	r2, [r4, #4]
1000e6c4:	7260      	strb	r0, [r4, #9]
1000e6c6:	2206      	movs	r2, #6
1000e6c8:	480b      	ldr	r0, [pc, #44]	; (1000e6f8 <gapm_resolv_addr_cmd_handler+0x5c>)
1000e6ca:	7223      	strb	r3, [r4, #8]
1000e6cc:	47b0      	blx	r6
1000e6ce:	1c39      	adds	r1, r7, #0
1000e6d0:	1c2a      	adds	r2, r5, #0
1000e6d2:	480a      	ldr	r0, [pc, #40]	; (1000e6fc <gapm_resolv_addr_cmd_handler+0x60>)
1000e6d4:	47b0      	blx	r6
1000e6d6:	1c29      	adds	r1, r5, #0
1000e6d8:	3110      	adds	r1, #16
1000e6da:	1c0b      	adds	r3, r1, #0
1000e6dc:	3b08      	subs	r3, #8
1000e6de:	71a3      	strb	r3, [r4, #6]
1000e6e0:	121b      	asrs	r3, r3, #8
1000e6e2:	71e3      	strb	r3, [r4, #7]
1000e6e4:	1c20      	adds	r0, r4, #0
1000e6e6:	4b06      	ldr	r3, [pc, #24]	; (1000e700 <gapm_resolv_addr_cmd_handler+0x64>)
1000e6e8:	4798      	blx	r3
1000e6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e6ec:	10014c1c 	.word	0x10014c1c
1000e6f0:	100148ac 	.word	0x100148ac
1000e6f4:	1000ffab 	.word	0x1000ffab
1000e6f8:	10014c26 	.word	0x10014c26
1000e6fc:	10014c2c 	.word	0x10014c2c
1000e700:	1000d611 	.word	0x1000d611

1000e704 <gapm_addr_solved_ind_handler>:
1000e704:	b570      	push	{r4, r5, r6, lr}
1000e706:	1c04      	adds	r4, r0, #0
1000e708:	1c08      	adds	r0, r1, #0
1000e70a:	1c0d      	adds	r5, r1, #0
1000e70c:	4e05      	ldr	r6, [pc, #20]	; (1000e724 <gapm_addr_solved_ind_handler+0x20>)
1000e70e:	1c21      	adds	r1, r4, #0
1000e710:	2206      	movs	r2, #6
1000e712:	3011      	adds	r0, #17
1000e714:	47b0      	blx	r6
1000e716:	1c68      	adds	r0, r5, #1
1000e718:	1da1      	adds	r1, r4, #6
1000e71a:	2210      	movs	r2, #16
1000e71c:	47b0      	blx	r6
1000e71e:	2300      	movs	r3, #0
1000e720:	702b      	strb	r3, [r5, #0]
1000e722:	bd70      	pop	{r4, r5, r6, pc}
1000e724:	1000ffab 	.word	0x1000ffab

1000e728 <gapm_profile_added_ind_handler>:
1000e728:	b510      	push	{r4, lr}
1000e72a:	7843      	ldrb	r3, [r0, #1]
1000e72c:	7902      	ldrb	r2, [r0, #4]
1000e72e:	7944      	ldrb	r4, [r0, #5]
1000e730:	7800      	ldrb	r0, [r0, #0]
1000e732:	021b      	lsls	r3, r3, #8
1000e734:	4303      	orrs	r3, r0
1000e736:	2b1b      	cmp	r3, #27
1000e738:	d104      	bne.n	1000e744 <gapm_profile_added_ind_handler+0x1c>
1000e73a:	2300      	movs	r3, #0
1000e73c:	700b      	strb	r3, [r1, #0]
1000e73e:	0223      	lsls	r3, r4, #8
1000e740:	4313      	orrs	r3, r2
1000e742:	804b      	strh	r3, [r1, #2]
1000e744:	203b      	movs	r0, #59	; 0x3b
1000e746:	bd10      	pop	{r4, pc}

1000e748 <gattc_read_req_ind_parser>:
1000e748:	7843      	ldrb	r3, [r0, #1]
1000e74a:	7802      	ldrb	r2, [r0, #0]
1000e74c:	021b      	lsls	r3, r3, #8
1000e74e:	4313      	orrs	r3, r2
1000e750:	804b      	strh	r3, [r1, #2]
1000e752:	4770      	bx	lr

1000e754 <gattc_write_req_ind_parser>:
1000e754:	b508      	push	{r3, lr}
1000e756:	1c13      	adds	r3, r2, #0
1000e758:	0a00      	lsrs	r0, r0, #8
1000e75a:	8010      	strh	r0, [r2, #0]
1000e75c:	784a      	ldrb	r2, [r1, #1]
1000e75e:	7808      	ldrb	r0, [r1, #0]
1000e760:	0212      	lsls	r2, r2, #8
1000e762:	4302      	orrs	r2, r0
1000e764:	805a      	strh	r2, [r3, #2]
1000e766:	78ca      	ldrb	r2, [r1, #3]
1000e768:	7888      	ldrb	r0, [r1, #2]
1000e76a:	0212      	lsls	r2, r2, #8
1000e76c:	4302      	orrs	r2, r0
1000e76e:	809a      	strh	r2, [r3, #4]
1000e770:	794a      	ldrb	r2, [r1, #5]
1000e772:	7908      	ldrb	r0, [r1, #4]
1000e774:	0212      	lsls	r2, r2, #8
1000e776:	4302      	orrs	r2, r0
1000e778:	80da      	strh	r2, [r3, #6]
1000e77a:	3308      	adds	r3, #8
1000e77c:	1c18      	adds	r0, r3, #0
1000e77e:	3106      	adds	r1, #6
1000e780:	4b01      	ldr	r3, [pc, #4]	; (1000e788 <gattc_write_req_ind_parser+0x34>)
1000e782:	4798      	blx	r3
1000e784:	bd08      	pop	{r3, pc}
1000e786:	46c0      	nop			; (mov r8, r8)
1000e788:	1000ffab 	.word	0x1000ffab

1000e78c <gattc_att_info_req_parser>:
1000e78c:	7843      	ldrb	r3, [r0, #1]
1000e78e:	7802      	ldrb	r2, [r0, #0]
1000e790:	021b      	lsls	r3, r3, #8
1000e792:	4313      	orrs	r3, r2
1000e794:	800b      	strh	r3, [r1, #0]
1000e796:	4770      	bx	lr

1000e798 <gattc_read_cfm>:
1000e798:	b538      	push	{r3, r4, r5, lr}
1000e79a:	2514      	movs	r5, #20
1000e79c:	1c1c      	adds	r4, r3, #0
1000e79e:	4b14      	ldr	r3, [pc, #80]	; (1000e7f0 <gattc_read_cfm+0x58>)
1000e7a0:	70d9      	strb	r1, [r3, #3]
1000e7a2:	4914      	ldr	r1, [pc, #80]	; (1000e7f4 <gattc_read_cfm+0x5c>)
1000e7a4:	701d      	strb	r5, [r3, #0]
1000e7a6:	3d08      	subs	r5, #8
1000e7a8:	705d      	strb	r5, [r3, #1]
1000e7aa:	709d      	strb	r5, [r3, #2]
1000e7ac:	880d      	ldrh	r5, [r1, #0]
1000e7ae:	8809      	ldrh	r1, [r1, #0]
1000e7b0:	7218      	strb	r0, [r3, #8]
1000e7b2:	0a09      	lsrs	r1, r1, #8
1000e7b4:	7159      	strb	r1, [r3, #5]
1000e7b6:	0a00      	lsrs	r0, r0, #8
1000e7b8:	0a21      	lsrs	r1, r4, #8
1000e7ba:	711d      	strb	r5, [r3, #4]
1000e7bc:	7258      	strb	r0, [r3, #9]
1000e7be:	729c      	strb	r4, [r3, #10]
1000e7c0:	72d9      	strb	r1, [r3, #11]
1000e7c2:	731a      	strb	r2, [r3, #12]
1000e7c4:	1c1d      	adds	r5, r3, #0
1000e7c6:	2c00      	cmp	r4, #0
1000e7c8:	d007      	beq.n	1000e7da <gattc_read_cfm+0x42>
1000e7ca:	9904      	ldr	r1, [sp, #16]
1000e7cc:	1c22      	adds	r2, r4, #0
1000e7ce:	480a      	ldr	r0, [pc, #40]	; (1000e7f8 <gattc_read_cfm+0x60>)
1000e7d0:	4b0a      	ldr	r3, [pc, #40]	; (1000e7fc <gattc_read_cfm+0x64>)
1000e7d2:	340d      	adds	r4, #13
1000e7d4:	4798      	blx	r3
1000e7d6:	b2a1      	uxth	r1, r4
1000e7d8:	e001      	b.n	1000e7de <gattc_read_cfm+0x46>
1000e7da:	210e      	movs	r1, #14
1000e7dc:	735c      	strb	r4, [r3, #13]
1000e7de:	1c0b      	adds	r3, r1, #0
1000e7e0:	3b08      	subs	r3, #8
1000e7e2:	71ab      	strb	r3, [r5, #6]
1000e7e4:	121b      	asrs	r3, r3, #8
1000e7e6:	71eb      	strb	r3, [r5, #7]
1000e7e8:	1c28      	adds	r0, r5, #0
1000e7ea:	4b05      	ldr	r3, [pc, #20]	; (1000e800 <gattc_read_cfm+0x68>)
1000e7ec:	4798      	blx	r3
1000e7ee:	bd38      	pop	{r3, r4, r5, pc}
1000e7f0:	10014c1c 	.word	0x10014c1c
1000e7f4:	100148ac 	.word	0x100148ac
1000e7f8:	10014c29 	.word	0x10014c29
1000e7fc:	1000ffab 	.word	0x1000ffab
1000e800:	1000d611 	.word	0x1000d611

1000e804 <gattc_write_cfm>:
1000e804:	4b0d      	ldr	r3, [pc, #52]	; (1000e83c <gattc_write_cfm+0x38>)
1000e806:	b510      	push	{r4, lr}
1000e808:	729a      	strb	r2, [r3, #10]
1000e80a:	2203      	movs	r2, #3
1000e80c:	2416      	movs	r4, #22
1000e80e:	719a      	strb	r2, [r3, #6]
1000e810:	2200      	movs	r2, #0
1000e812:	70d9      	strb	r1, [r3, #3]
1000e814:	490a      	ldr	r1, [pc, #40]	; (1000e840 <gattc_write_cfm+0x3c>)
1000e816:	701c      	strb	r4, [r3, #0]
1000e818:	3c0a      	subs	r4, #10
1000e81a:	705c      	strb	r4, [r3, #1]
1000e81c:	709c      	strb	r4, [r3, #2]
1000e81e:	880c      	ldrh	r4, [r1, #0]
1000e820:	8809      	ldrh	r1, [r1, #0]
1000e822:	7218      	strb	r0, [r3, #8]
1000e824:	0a09      	lsrs	r1, r1, #8
1000e826:	0a00      	lsrs	r0, r0, #8
1000e828:	711c      	strb	r4, [r3, #4]
1000e82a:	7159      	strb	r1, [r3, #5]
1000e82c:	7258      	strb	r0, [r3, #9]
1000e82e:	71da      	strb	r2, [r3, #7]
1000e830:	1c18      	adds	r0, r3, #0
1000e832:	210b      	movs	r1, #11
1000e834:	4b03      	ldr	r3, [pc, #12]	; (1000e844 <gattc_write_cfm+0x40>)
1000e836:	4798      	blx	r3
1000e838:	bd10      	pop	{r4, pc}
1000e83a:	46c0      	nop			; (mov r8, r8)
1000e83c:	10014c1c 	.word	0x10014c1c
1000e840:	100148ac 	.word	0x100148ac
1000e844:	1000d611 	.word	0x1000d611

1000e848 <gattc_att_info_cfm>:
1000e848:	b538      	push	{r3, r4, r5, lr}
1000e84a:	4c0e      	ldr	r4, [pc, #56]	; (1000e884 <gattc_att_info_cfm+0x3c>)
1000e84c:	2518      	movs	r5, #24
1000e84e:	7323      	strb	r3, [r4, #12]
1000e850:	2305      	movs	r3, #5
1000e852:	71a3      	strb	r3, [r4, #6]
1000e854:	2300      	movs	r3, #0
1000e856:	70e1      	strb	r1, [r4, #3]
1000e858:	490b      	ldr	r1, [pc, #44]	; (1000e888 <gattc_att_info_cfm+0x40>)
1000e85a:	7025      	strb	r5, [r4, #0]
1000e85c:	3d0c      	subs	r5, #12
1000e85e:	7065      	strb	r5, [r4, #1]
1000e860:	70a5      	strb	r5, [r4, #2]
1000e862:	880d      	ldrh	r5, [r1, #0]
1000e864:	8809      	ldrh	r1, [r1, #0]
1000e866:	7220      	strb	r0, [r4, #8]
1000e868:	0a09      	lsrs	r1, r1, #8
1000e86a:	0a00      	lsrs	r0, r0, #8
1000e86c:	7161      	strb	r1, [r4, #5]
1000e86e:	7260      	strb	r0, [r4, #9]
1000e870:	72a2      	strb	r2, [r4, #10]
1000e872:	71e3      	strb	r3, [r4, #7]
1000e874:	0a12      	lsrs	r2, r2, #8
1000e876:	1c20      	adds	r0, r4, #0
1000e878:	210d      	movs	r1, #13
1000e87a:	4b04      	ldr	r3, [pc, #16]	; (1000e88c <gattc_att_info_cfm+0x44>)
1000e87c:	7125      	strb	r5, [r4, #4]
1000e87e:	72e2      	strb	r2, [r4, #11]
1000e880:	4798      	blx	r3
1000e882:	bd38      	pop	{r3, r4, r5, pc}
1000e884:	10014c1c 	.word	0x10014c1c
1000e888:	100148ac 	.word	0x100148ac
1000e88c:	1000d611 	.word	0x1000d611

1000e890 <gattc_event_cfm_handler>:
1000e890:	220e      	movs	r2, #14
1000e892:	b508      	push	{r3, lr}
1000e894:	4b0b      	ldr	r3, [pc, #44]	; (1000e8c4 <gattc_event_cfm_handler+0x34>)
1000e896:	701a      	strb	r2, [r3, #0]
1000e898:	3a02      	subs	r2, #2
1000e89a:	705a      	strb	r2, [r3, #1]
1000e89c:	709a      	strb	r2, [r3, #2]
1000e89e:	4a0a      	ldr	r2, [pc, #40]	; (1000e8c8 <gattc_event_cfm_handler+0x38>)
1000e8a0:	70d8      	strb	r0, [r3, #3]
1000e8a2:	8810      	ldrh	r0, [r2, #0]
1000e8a4:	8812      	ldrh	r2, [r2, #0]
1000e8a6:	7219      	strb	r1, [r3, #8]
1000e8a8:	0a12      	lsrs	r2, r2, #8
1000e8aa:	715a      	strb	r2, [r3, #5]
1000e8ac:	2202      	movs	r2, #2
1000e8ae:	719a      	strb	r2, [r3, #6]
1000e8b0:	2200      	movs	r2, #0
1000e8b2:	0a09      	lsrs	r1, r1, #8
1000e8b4:	7118      	strb	r0, [r3, #4]
1000e8b6:	7259      	strb	r1, [r3, #9]
1000e8b8:	71da      	strb	r2, [r3, #7]
1000e8ba:	1c18      	adds	r0, r3, #0
1000e8bc:	210a      	movs	r1, #10
1000e8be:	4b03      	ldr	r3, [pc, #12]	; (1000e8cc <gattc_event_cfm_handler+0x3c>)
1000e8c0:	4798      	blx	r3
1000e8c2:	bd08      	pop	{r3, pc}
1000e8c4:	10014c1c 	.word	0x10014c1c
1000e8c8:	100148ac 	.word	0x100148ac
1000e8cc:	1000d611 	.word	0x1000d611

1000e8d0 <gattc_disc_svc_ind_parser>:
1000e8d0:	b570      	push	{r4, r5, r6, lr}
1000e8d2:	1c15      	adds	r5, r2, #0
1000e8d4:	0a00      	lsrs	r0, r0, #8
1000e8d6:	8010      	strh	r0, [r2, #0]
1000e8d8:	784b      	ldrb	r3, [r1, #1]
1000e8da:	780a      	ldrb	r2, [r1, #0]
1000e8dc:	021b      	lsls	r3, r3, #8
1000e8de:	4313      	orrs	r3, r2
1000e8e0:	806b      	strh	r3, [r5, #2]
1000e8e2:	78cb      	ldrb	r3, [r1, #3]
1000e8e4:	788a      	ldrb	r2, [r1, #2]
1000e8e6:	021b      	lsls	r3, r3, #8
1000e8e8:	4313      	orrs	r3, r2
1000e8ea:	80ab      	strh	r3, [r5, #4]
1000e8ec:	790e      	ldrb	r6, [r1, #4]
1000e8ee:	4b05      	ldr	r3, [pc, #20]	; (1000e904 <gattc_disc_svc_ind_parser+0x34>)
1000e8f0:	1c30      	adds	r0, r6, #0
1000e8f2:	1c0c      	adds	r4, r1, #0
1000e8f4:	4798      	blx	r3
1000e8f6:	1c32      	adds	r2, r6, #0
1000e8f8:	71a8      	strb	r0, [r5, #6]
1000e8fa:	1d61      	adds	r1, r4, #5
1000e8fc:	1de8      	adds	r0, r5, #7
1000e8fe:	4b02      	ldr	r3, [pc, #8]	; (1000e908 <gattc_disc_svc_ind_parser+0x38>)
1000e900:	4798      	blx	r3
1000e902:	bd70      	pop	{r4, r5, r6, pc}
1000e904:	1000cfc9 	.word	0x1000cfc9
1000e908:	1000ffab 	.word	0x1000ffab

1000e90c <gattc_disc_svc_incl_ind_parser>:
1000e90c:	b570      	push	{r4, r5, r6, lr}
1000e90e:	1c15      	adds	r5, r2, #0
1000e910:	0a00      	lsrs	r0, r0, #8
1000e912:	8010      	strh	r0, [r2, #0]
1000e914:	784b      	ldrb	r3, [r1, #1]
1000e916:	780a      	ldrb	r2, [r1, #0]
1000e918:	021b      	lsls	r3, r3, #8
1000e91a:	4313      	orrs	r3, r2
1000e91c:	806b      	strh	r3, [r5, #2]
1000e91e:	78cb      	ldrb	r3, [r1, #3]
1000e920:	788a      	ldrb	r2, [r1, #2]
1000e922:	021b      	lsls	r3, r3, #8
1000e924:	4313      	orrs	r3, r2
1000e926:	80ab      	strh	r3, [r5, #4]
1000e928:	794b      	ldrb	r3, [r1, #5]
1000e92a:	790a      	ldrb	r2, [r1, #4]
1000e92c:	021b      	lsls	r3, r3, #8
1000e92e:	4313      	orrs	r3, r2
1000e930:	80eb      	strh	r3, [r5, #6]
1000e932:	798e      	ldrb	r6, [r1, #6]
1000e934:	4b05      	ldr	r3, [pc, #20]	; (1000e94c <gattc_disc_svc_incl_ind_parser+0x40>)
1000e936:	1c30      	adds	r0, r6, #0
1000e938:	1c0c      	adds	r4, r1, #0
1000e93a:	4798      	blx	r3
1000e93c:	7228      	strb	r0, [r5, #8]
1000e93e:	1c28      	adds	r0, r5, #0
1000e940:	1c32      	adds	r2, r6, #0
1000e942:	1de1      	adds	r1, r4, #7
1000e944:	4b02      	ldr	r3, [pc, #8]	; (1000e950 <gattc_disc_svc_incl_ind_parser+0x44>)
1000e946:	3009      	adds	r0, #9
1000e948:	4798      	blx	r3
1000e94a:	bd70      	pop	{r4, r5, r6, pc}
1000e94c:	1000cfc9 	.word	0x1000cfc9
1000e950:	1000ffab 	.word	0x1000ffab

1000e954 <gattc_disc_char_ind_parser>:
1000e954:	b570      	push	{r4, r5, r6, lr}
1000e956:	1c15      	adds	r5, r2, #0
1000e958:	0a00      	lsrs	r0, r0, #8
1000e95a:	8010      	strh	r0, [r2, #0]
1000e95c:	784b      	ldrb	r3, [r1, #1]
1000e95e:	780a      	ldrb	r2, [r1, #0]
1000e960:	021b      	lsls	r3, r3, #8
1000e962:	4313      	orrs	r3, r2
1000e964:	806b      	strh	r3, [r5, #2]
1000e966:	78cb      	ldrb	r3, [r1, #3]
1000e968:	788a      	ldrb	r2, [r1, #2]
1000e96a:	021b      	lsls	r3, r3, #8
1000e96c:	4313      	orrs	r3, r2
1000e96e:	80ab      	strh	r3, [r5, #4]
1000e970:	790b      	ldrb	r3, [r1, #4]
1000e972:	1c0c      	adds	r4, r1, #0
1000e974:	71ab      	strb	r3, [r5, #6]
1000e976:	794e      	ldrb	r6, [r1, #5]
1000e978:	4b05      	ldr	r3, [pc, #20]	; (1000e990 <gattc_disc_char_ind_parser+0x3c>)
1000e97a:	1c30      	adds	r0, r6, #0
1000e97c:	4798      	blx	r3
1000e97e:	71e8      	strb	r0, [r5, #7]
1000e980:	1c28      	adds	r0, r5, #0
1000e982:	1c32      	adds	r2, r6, #0
1000e984:	1da1      	adds	r1, r4, #6
1000e986:	4b03      	ldr	r3, [pc, #12]	; (1000e994 <gattc_disc_char_ind_parser+0x40>)
1000e988:	3008      	adds	r0, #8
1000e98a:	4798      	blx	r3
1000e98c:	bd70      	pop	{r4, r5, r6, pc}
1000e98e:	46c0      	nop			; (mov r8, r8)
1000e990:	1000cfc9 	.word	0x1000cfc9
1000e994:	1000ffab 	.word	0x1000ffab

1000e998 <gattc_disc_char_desc_ind_parser>:
1000e998:	b570      	push	{r4, r5, r6, lr}
1000e99a:	1c15      	adds	r5, r2, #0
1000e99c:	0a00      	lsrs	r0, r0, #8
1000e99e:	8010      	strh	r0, [r2, #0]
1000e9a0:	784b      	ldrb	r3, [r1, #1]
1000e9a2:	780a      	ldrb	r2, [r1, #0]
1000e9a4:	021b      	lsls	r3, r3, #8
1000e9a6:	4313      	orrs	r3, r2
1000e9a8:	806b      	strh	r3, [r5, #2]
1000e9aa:	788e      	ldrb	r6, [r1, #2]
1000e9ac:	4b05      	ldr	r3, [pc, #20]	; (1000e9c4 <gattc_disc_char_desc_ind_parser+0x2c>)
1000e9ae:	1c30      	adds	r0, r6, #0
1000e9b0:	1c0c      	adds	r4, r1, #0
1000e9b2:	4798      	blx	r3
1000e9b4:	1c32      	adds	r2, r6, #0
1000e9b6:	7128      	strb	r0, [r5, #4]
1000e9b8:	1ce1      	adds	r1, r4, #3
1000e9ba:	1d68      	adds	r0, r5, #5
1000e9bc:	4b02      	ldr	r3, [pc, #8]	; (1000e9c8 <gattc_disc_char_desc_ind_parser+0x30>)
1000e9be:	4798      	blx	r3
1000e9c0:	bd70      	pop	{r4, r5, r6, pc}
1000e9c2:	46c0      	nop			; (mov r8, r8)
1000e9c4:	1000cfc9 	.word	0x1000cfc9
1000e9c8:	1000ffab 	.word	0x1000ffab

1000e9cc <gattc_event_ind_and_notification_parser>:
1000e9cc:	b510      	push	{r4, lr}
1000e9ce:	780c      	ldrb	r4, [r1, #0]
1000e9d0:	1c13      	adds	r3, r2, #0
1000e9d2:	2c12      	cmp	r4, #18
1000e9d4:	d10e      	bne.n	1000e9f4 <gattc_event_ind_and_notification_parser+0x28>
1000e9d6:	0a00      	lsrs	r0, r0, #8
1000e9d8:	8010      	strh	r0, [r2, #0]
1000e9da:	788a      	ldrb	r2, [r1, #2]
1000e9dc:	709a      	strb	r2, [r3, #2]
1000e9de:	7948      	ldrb	r0, [r1, #5]
1000e9e0:	790c      	ldrb	r4, [r1, #4]
1000e9e2:	0200      	lsls	r0, r0, #8
1000e9e4:	4320      	orrs	r0, r4
1000e9e6:	8098      	strh	r0, [r3, #4]
1000e9e8:	3106      	adds	r1, #6
1000e9ea:	1d98      	adds	r0, r3, #6
1000e9ec:	4b0b      	ldr	r3, [pc, #44]	; (1000ea1c <gattc_event_ind_and_notification_parser+0x50>)
1000e9ee:	4798      	blx	r3
1000e9f0:	221b      	movs	r2, #27
1000e9f2:	e010      	b.n	1000ea16 <gattc_event_ind_and_notification_parser+0x4a>
1000e9f4:	2200      	movs	r2, #0
1000e9f6:	2c13      	cmp	r4, #19
1000e9f8:	d10d      	bne.n	1000ea16 <gattc_event_ind_and_notification_parser+0x4a>
1000e9fa:	0a00      	lsrs	r0, r0, #8
1000e9fc:	8018      	strh	r0, [r3, #0]
1000e9fe:	788a      	ldrb	r2, [r1, #2]
1000ea00:	709a      	strb	r2, [r3, #2]
1000ea02:	7908      	ldrb	r0, [r1, #4]
1000ea04:	78cc      	ldrb	r4, [r1, #3]
1000ea06:	0200      	lsls	r0, r0, #8
1000ea08:	4320      	orrs	r0, r4
1000ea0a:	8098      	strh	r0, [r3, #4]
1000ea0c:	3106      	adds	r1, #6
1000ea0e:	1d98      	adds	r0, r3, #6
1000ea10:	4b02      	ldr	r3, [pc, #8]	; (1000ea1c <gattc_event_ind_and_notification_parser+0x50>)
1000ea12:	4798      	blx	r3
1000ea14:	221c      	movs	r2, #28
1000ea16:	1c10      	adds	r0, r2, #0
1000ea18:	bd10      	pop	{r4, pc}
1000ea1a:	46c0      	nop			; (mov r8, r8)
1000ea1c:	1000ffab 	.word	0x1000ffab

1000ea20 <gattc_complete_evt_handler>:
1000ea20:	b500      	push	{lr}
1000ea22:	0a00      	lsrs	r0, r0, #8
1000ea24:	8010      	strh	r0, [r2, #0]
1000ea26:	7808      	ldrb	r0, [r1, #0]
1000ea28:	7090      	strb	r0, [r2, #2]
1000ea2a:	784b      	ldrb	r3, [r1, #1]
1000ea2c:	3801      	subs	r0, #1
1000ea2e:	70d3      	strb	r3, [r2, #3]
1000ea30:	2813      	cmp	r0, #19
1000ea32:	d82c      	bhi.n	1000ea8e <gattc_complete_evt_handler+0x6e>
1000ea34:	f000 f914 	bl	1000ec60 <__gnu_thumb1_case_uqi>
1000ea38:	0a0a0a0c 	.word	0x0a0a0a0c
1000ea3c:	210a0a0a 	.word	0x210a0a0a
1000ea40:	111f2121 	.word	0x111f2121
1000ea44:	2b111111 	.word	0x2b111111
1000ea48:	2919132b 	.word	0x2919132b
1000ea4c:	2017      	movs	r0, #23
1000ea4e:	e01f      	b.n	1000ea90 <gattc_complete_evt_handler+0x70>
1000ea50:	2024      	movs	r0, #36	; 0x24
1000ea52:	2b00      	cmp	r3, #0
1000ea54:	d11c      	bne.n	1000ea90 <gattc_complete_evt_handler+0x70>
1000ea56:	3017      	adds	r0, #23
1000ea58:	e01a      	b.n	1000ea90 <gattc_complete_evt_handler+0x70>
1000ea5a:	2025      	movs	r0, #37	; 0x25
1000ea5c:	e018      	b.n	1000ea90 <gattc_complete_evt_handler+0x70>
1000ea5e:	4a0d      	ldr	r2, [pc, #52]	; (1000ea94 <gattc_complete_evt_handler+0x74>)
1000ea60:	201d      	movs	r0, #29
1000ea62:	6813      	ldr	r3, [r2, #0]
1000ea64:	3b01      	subs	r3, #1
1000ea66:	6013      	str	r3, [r2, #0]
1000ea68:	e012      	b.n	1000ea90 <gattc_complete_evt_handler+0x70>
1000ea6a:	4a0a      	ldr	r2, [pc, #40]	; (1000ea94 <gattc_complete_evt_handler+0x74>)
1000ea6c:	201e      	movs	r0, #30
1000ea6e:	6813      	ldr	r3, [r2, #0]
1000ea70:	3b01      	subs	r3, #1
1000ea72:	6013      	str	r3, [r2, #0]
1000ea74:	e00c      	b.n	1000ea90 <gattc_complete_evt_handler+0x70>
1000ea76:	2019      	movs	r0, #25
1000ea78:	e00a      	b.n	1000ea90 <gattc_complete_evt_handler+0x70>
1000ea7a:	203b      	movs	r0, #59	; 0x3b
1000ea7c:	2b00      	cmp	r3, #0
1000ea7e:	d007      	beq.n	1000ea90 <gattc_complete_evt_handler+0x70>
1000ea80:	2182      	movs	r1, #130	; 0x82
1000ea82:	0089      	lsls	r1, r1, #2
1000ea84:	5453      	strb	r3, [r2, r1]
1000ea86:	3823      	subs	r0, #35	; 0x23
1000ea88:	e002      	b.n	1000ea90 <gattc_complete_evt_handler+0x70>
1000ea8a:	2021      	movs	r0, #33	; 0x21
1000ea8c:	e000      	b.n	1000ea90 <gattc_complete_evt_handler+0x70>
1000ea8e:	2000      	movs	r0, #0
1000ea90:	bd00      	pop	{pc}
1000ea92:	46c0      	nop			; (mov r8, r8)
1000ea94:	10013c18 	.word	0x10013c18

1000ea98 <gattc_event_mtu_changed_ind_parser>:
1000ea98:	0a00      	lsrs	r0, r0, #8
1000ea9a:	8010      	strh	r0, [r2, #0]
1000ea9c:	784b      	ldrb	r3, [r1, #1]
1000ea9e:	7809      	ldrb	r1, [r1, #0]
1000eaa0:	021b      	lsls	r3, r3, #8
1000eaa2:	430b      	orrs	r3, r1
1000eaa4:	8053      	strh	r3, [r2, #2]
1000eaa6:	4770      	bx	lr

1000eaa8 <gattc_read_ind_parser>:
1000eaa8:	0a00      	lsrs	r0, r0, #8
1000eaaa:	b508      	push	{r3, lr}
1000eaac:	8010      	strh	r0, [r2, #0]
1000eaae:	1c13      	adds	r3, r2, #0
1000eab0:	2282      	movs	r2, #130	; 0x82
1000eab2:	2000      	movs	r0, #0
1000eab4:	0092      	lsls	r2, r2, #2
1000eab6:	5498      	strb	r0, [r3, r2]
1000eab8:	784a      	ldrb	r2, [r1, #1]
1000eaba:	7808      	ldrb	r0, [r1, #0]
1000eabc:	0212      	lsls	r2, r2, #8
1000eabe:	4302      	orrs	r2, r0
1000eac0:	805a      	strh	r2, [r3, #2]
1000eac2:	78ca      	ldrb	r2, [r1, #3]
1000eac4:	7888      	ldrb	r0, [r1, #2]
1000eac6:	0212      	lsls	r2, r2, #8
1000eac8:	4302      	orrs	r2, r0
1000eaca:	80da      	strh	r2, [r3, #6]
1000eacc:	794a      	ldrb	r2, [r1, #5]
1000eace:	7908      	ldrb	r0, [r1, #4]
1000ead0:	0212      	lsls	r2, r2, #8
1000ead2:	4302      	orrs	r2, r0
1000ead4:	809a      	strh	r2, [r3, #4]
1000ead6:	3308      	adds	r3, #8
1000ead8:	1c18      	adds	r0, r3, #0
1000eada:	3106      	adds	r1, #6
1000eadc:	4b01      	ldr	r3, [pc, #4]	; (1000eae4 <gattc_read_ind_parser+0x3c>)
1000eade:	4798      	blx	r3
1000eae0:	bd08      	pop	{r3, pc}
1000eae2:	46c0      	nop			; (mov r8, r8)
1000eae4:	1000ffab 	.word	0x1000ffab

1000eae8 <gattc_svc_changed_cfg_ind_parser>:
1000eae8:	0a00      	lsrs	r0, r0, #8
1000eaea:	8010      	strh	r0, [r2, #0]
1000eaec:	784b      	ldrb	r3, [r1, #1]
1000eaee:	7809      	ldrb	r1, [r1, #0]
1000eaf0:	021b      	lsls	r3, r3, #8
1000eaf2:	430b      	orrs	r3, r1
1000eaf4:	8053      	strh	r3, [r2, #2]
1000eaf6:	4770      	bx	lr

1000eaf8 <init_gattc_task_module>:
1000eaf8:	2300      	movs	r3, #0
1000eafa:	4a02      	ldr	r2, [pc, #8]	; (1000eb04 <init_gattc_task_module+0xc>)
1000eafc:	8013      	strh	r3, [r2, #0]
1000eafe:	4a02      	ldr	r2, [pc, #8]	; (1000eb08 <init_gattc_task_module+0x10>)
1000eb00:	8013      	strh	r3, [r2, #0]
1000eb02:	4770      	bx	lr
1000eb04:	10013c12 	.word	0x10013c12
1000eb08:	10013c14 	.word	0x10013c14

1000eb0c <gattm_att_set_value_req_handler>:
1000eb0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000eb0e:	466b      	mov	r3, sp
1000eb10:	1dde      	adds	r6, r3, #7
1000eb12:	2300      	movs	r3, #0
1000eb14:	1c0d      	adds	r5, r1, #0
1000eb16:	210c      	movs	r1, #12
1000eb18:	270b      	movs	r7, #11
1000eb1a:	4c17      	ldr	r4, [pc, #92]	; (1000eb78 <gattm_att_set_value_req_handler+0x6c>)
1000eb1c:	7033      	strb	r3, [r6, #0]
1000eb1e:	70e3      	strb	r3, [r4, #3]
1000eb20:	4b16      	ldr	r3, [pc, #88]	; (1000eb7c <gattm_att_set_value_req_handler+0x70>)
1000eb22:	7021      	strb	r1, [r4, #0]
1000eb24:	8819      	ldrh	r1, [r3, #0]
1000eb26:	881b      	ldrh	r3, [r3, #0]
1000eb28:	7220      	strb	r0, [r4, #8]
1000eb2a:	0a1b      	lsrs	r3, r3, #8
1000eb2c:	7163      	strb	r3, [r4, #5]
1000eb2e:	0a00      	lsrs	r0, r0, #8
1000eb30:	0a2b      	lsrs	r3, r5, #8
1000eb32:	7121      	strb	r1, [r4, #4]
1000eb34:	7260      	strb	r0, [r4, #9]
1000eb36:	1c11      	adds	r1, r2, #0
1000eb38:	72a5      	strb	r5, [r4, #10]
1000eb3a:	1c2a      	adds	r2, r5, #0
1000eb3c:	72e3      	strb	r3, [r4, #11]
1000eb3e:	350c      	adds	r5, #12
1000eb40:	4b0f      	ldr	r3, [pc, #60]	; (1000eb80 <gattm_att_set_value_req_handler+0x74>)
1000eb42:	4810      	ldr	r0, [pc, #64]	; (1000eb84 <gattm_att_set_value_req_handler+0x78>)
1000eb44:	7067      	strb	r7, [r4, #1]
1000eb46:	70a7      	strb	r7, [r4, #2]
1000eb48:	4798      	blx	r3
1000eb4a:	b2a9      	uxth	r1, r5
1000eb4c:	4b0e      	ldr	r3, [pc, #56]	; (1000eb88 <gattm_att_set_value_req_handler+0x7c>)
1000eb4e:	4d0f      	ldr	r5, [pc, #60]	; (1000eb8c <gattm_att_set_value_req_handler+0x80>)
1000eb50:	1c20      	adds	r0, r4, #0
1000eb52:	802b      	strh	r3, [r5, #0]
1000eb54:	1c0b      	adds	r3, r1, #0
1000eb56:	3b08      	subs	r3, #8
1000eb58:	71a3      	strb	r3, [r4, #6]
1000eb5a:	121b      	asrs	r3, r3, #8
1000eb5c:	71e3      	strb	r3, [r4, #7]
1000eb5e:	4b0c      	ldr	r3, [pc, #48]	; (1000eb90 <gattm_att_set_value_req_handler+0x84>)
1000eb60:	80af      	strh	r7, [r5, #4]
1000eb62:	4798      	blx	r3
1000eb64:	1c30      	adds	r0, r6, #0
1000eb66:	4b0b      	ldr	r3, [pc, #44]	; (1000eb94 <gattm_att_set_value_req_handler+0x88>)
1000eb68:	4798      	blx	r3
1000eb6a:	7833      	ldrb	r3, [r6, #0]
1000eb6c:	20e2      	movs	r0, #226	; 0xe2
1000eb6e:	2b00      	cmp	r3, #0
1000eb70:	d101      	bne.n	1000eb76 <gattm_att_set_value_req_handler+0x6a>
1000eb72:	68ab      	ldr	r3, [r5, #8]
1000eb74:	7898      	ldrb	r0, [r3, #2]
1000eb76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000eb78:	10014c1c 	.word	0x10014c1c
1000eb7c:	100148ac 	.word	0x100148ac
1000eb80:	1000ffab 	.word	0x1000ffab
1000eb84:	10014c28 	.word	0x10014c28
1000eb88:	00000b0d 	.word	0x00000b0d
1000eb8c:	100148a0 	.word	0x100148a0
1000eb90:	1000d611 	.word	0x1000d611
1000eb94:	1000d675 	.word	0x1000d675

1000eb98 <gattm_att_get_value_req_handler>:
1000eb98:	b5f0      	push	{r4, r5, r6, r7, lr}
1000eb9a:	b085      	sub	sp, #20
1000eb9c:	9201      	str	r2, [sp, #4]
1000eb9e:	220a      	movs	r2, #10
1000eba0:	1c04      	adds	r4, r0, #0
1000eba2:	481d      	ldr	r0, [pc, #116]	; (1000ec18 <gattm_att_get_value_req_handler+0x80>)
1000eba4:	ab02      	add	r3, sp, #8
1000eba6:	1dde      	adds	r6, r3, #7
1000eba8:	7002      	strb	r2, [r0, #0]
1000ebaa:	2300      	movs	r3, #0
1000ebac:	220b      	movs	r2, #11
1000ebae:	4d1b      	ldr	r5, [pc, #108]	; (1000ec1c <gattm_att_get_value_req_handler+0x84>)
1000ebb0:	1c0f      	adds	r7, r1, #0
1000ebb2:	8829      	ldrh	r1, [r5, #0]
1000ebb4:	882d      	ldrh	r5, [r5, #0]
1000ebb6:	7101      	strb	r1, [r0, #4]
1000ebb8:	0a2d      	lsrs	r5, r5, #8
1000ebba:	7145      	strb	r5, [r0, #5]
1000ebbc:	0a25      	lsrs	r5, r4, #8
1000ebbe:	7245      	strb	r5, [r0, #9]
1000ebc0:	4917      	ldr	r1, [pc, #92]	; (1000ec20 <gattm_att_get_value_req_handler+0x88>)
1000ebc2:	4d18      	ldr	r5, [pc, #96]	; (1000ec24 <gattm_att_get_value_req_handler+0x8c>)
1000ebc4:	7033      	strb	r3, [r6, #0]
1000ebc6:	7042      	strb	r2, [r0, #1]
1000ebc8:	7082      	strb	r2, [r0, #2]
1000ebca:	70c3      	strb	r3, [r0, #3]
1000ebcc:	8029      	strh	r1, [r5, #0]
1000ebce:	80aa      	strh	r2, [r5, #4]
1000ebd0:	71c3      	strb	r3, [r0, #7]
1000ebd2:	3a09      	subs	r2, #9
1000ebd4:	210a      	movs	r1, #10
1000ebd6:	4b14      	ldr	r3, [pc, #80]	; (1000ec28 <gattm_att_get_value_req_handler+0x90>)
1000ebd8:	7182      	strb	r2, [r0, #6]
1000ebda:	7204      	strb	r4, [r0, #8]
1000ebdc:	4798      	blx	r3
1000ebde:	1c30      	adds	r0, r6, #0
1000ebe0:	4b12      	ldr	r3, [pc, #72]	; (1000ec2c <gattm_att_get_value_req_handler+0x94>)
1000ebe2:	4798      	blx	r3
1000ebe4:	7833      	ldrb	r3, [r6, #0]
1000ebe6:	20e2      	movs	r0, #226	; 0xe2
1000ebe8:	2b00      	cmp	r3, #0
1000ebea:	d112      	bne.n	1000ec12 <gattm_att_get_value_req_handler+0x7a>
1000ebec:	68a9      	ldr	r1, [r5, #8]
1000ebee:	9801      	ldr	r0, [sp, #4]
1000ebf0:	784d      	ldrb	r5, [r1, #1]
1000ebf2:	780b      	ldrb	r3, [r1, #0]
1000ebf4:	78ca      	ldrb	r2, [r1, #3]
1000ebf6:	022d      	lsls	r5, r5, #8
1000ebf8:	431d      	orrs	r5, r3
1000ebfa:	788b      	ldrb	r3, [r1, #2]
1000ebfc:	0212      	lsls	r2, r2, #8
1000ebfe:	431a      	orrs	r2, r3
1000ec00:	803a      	strh	r2, [r7, #0]
1000ec02:	790e      	ldrb	r6, [r1, #4]
1000ec04:	4b0a      	ldr	r3, [pc, #40]	; (1000ec30 <gattm_att_get_value_req_handler+0x98>)
1000ec06:	3105      	adds	r1, #5
1000ec08:	4798      	blx	r3
1000ec0a:	20e2      	movs	r0, #226	; 0xe2
1000ec0c:	42ac      	cmp	r4, r5
1000ec0e:	d100      	bne.n	1000ec12 <gattm_att_get_value_req_handler+0x7a>
1000ec10:	1c30      	adds	r0, r6, #0
1000ec12:	b005      	add	sp, #20
1000ec14:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ec16:	46c0      	nop			; (mov r8, r8)
1000ec18:	10014c1c 	.word	0x10014c1c
1000ec1c:	100148ac 	.word	0x100148ac
1000ec20:	00000b0b 	.word	0x00000b0b
1000ec24:	100148a0 	.word	0x100148a0
1000ec28:	1000d611 	.word	0x1000d611
1000ec2c:	1000d675 	.word	0x1000d675
1000ec30:	1000ffab 	.word	0x1000ffab

1000ec34 <htpt_enable_rsp_handler>:
1000ec34:	780b      	ldrb	r3, [r1, #0]
1000ec36:	7013      	strb	r3, [r2, #0]
1000ec38:	784b      	ldrb	r3, [r1, #1]
1000ec3a:	7053      	strb	r3, [r2, #1]
1000ec3c:	4770      	bx	lr

1000ec3e <htpt_temp_send_rsp_handler>:
1000ec3e:	780b      	ldrb	r3, [r1, #0]
1000ec40:	7013      	strb	r3, [r2, #0]
1000ec42:	4770      	bx	lr

1000ec44 <htpt_meas_intv_upd_rsp_handler>:
1000ec44:	780b      	ldrb	r3, [r1, #0]
1000ec46:	7013      	strb	r3, [r2, #0]
1000ec48:	4770      	bx	lr

1000ec4a <htpt_meas_intv_chg_req_ind_handler>:
1000ec4a:	78cb      	ldrb	r3, [r1, #3]
1000ec4c:	7889      	ldrb	r1, [r1, #2]
1000ec4e:	021b      	lsls	r3, r3, #8
1000ec50:	430b      	orrs	r3, r1
1000ec52:	8013      	strh	r3, [r2, #0]
1000ec54:	4770      	bx	lr

1000ec56 <htpt_cfg_indntf_ind_handler>:
1000ec56:	780b      	ldrb	r3, [r1, #0]
1000ec58:	7013      	strb	r3, [r2, #0]
1000ec5a:	784b      	ldrb	r3, [r1, #1]
1000ec5c:	7053      	strb	r3, [r2, #1]
1000ec5e:	4770      	bx	lr

1000ec60 <__gnu_thumb1_case_uqi>:
1000ec60:	b402      	push	{r1}
1000ec62:	4671      	mov	r1, lr
1000ec64:	0849      	lsrs	r1, r1, #1
1000ec66:	0049      	lsls	r1, r1, #1
1000ec68:	5c09      	ldrb	r1, [r1, r0]
1000ec6a:	0049      	lsls	r1, r1, #1
1000ec6c:	448e      	add	lr, r1
1000ec6e:	bc02      	pop	{r1}
1000ec70:	4770      	bx	lr
1000ec72:	46c0      	nop			; (mov r8, r8)

1000ec74 <__aeabi_uidiv>:
1000ec74:	2200      	movs	r2, #0
1000ec76:	0843      	lsrs	r3, r0, #1
1000ec78:	428b      	cmp	r3, r1
1000ec7a:	d374      	bcc.n	1000ed66 <__aeabi_uidiv+0xf2>
1000ec7c:	0903      	lsrs	r3, r0, #4
1000ec7e:	428b      	cmp	r3, r1
1000ec80:	d35f      	bcc.n	1000ed42 <__aeabi_uidiv+0xce>
1000ec82:	0a03      	lsrs	r3, r0, #8
1000ec84:	428b      	cmp	r3, r1
1000ec86:	d344      	bcc.n	1000ed12 <__aeabi_uidiv+0x9e>
1000ec88:	0b03      	lsrs	r3, r0, #12
1000ec8a:	428b      	cmp	r3, r1
1000ec8c:	d328      	bcc.n	1000ece0 <__aeabi_uidiv+0x6c>
1000ec8e:	0c03      	lsrs	r3, r0, #16
1000ec90:	428b      	cmp	r3, r1
1000ec92:	d30d      	bcc.n	1000ecb0 <__aeabi_uidiv+0x3c>
1000ec94:	22ff      	movs	r2, #255	; 0xff
1000ec96:	0209      	lsls	r1, r1, #8
1000ec98:	ba12      	rev	r2, r2
1000ec9a:	0c03      	lsrs	r3, r0, #16
1000ec9c:	428b      	cmp	r3, r1
1000ec9e:	d302      	bcc.n	1000eca6 <__aeabi_uidiv+0x32>
1000eca0:	1212      	asrs	r2, r2, #8
1000eca2:	0209      	lsls	r1, r1, #8
1000eca4:	d065      	beq.n	1000ed72 <__aeabi_uidiv+0xfe>
1000eca6:	0b03      	lsrs	r3, r0, #12
1000eca8:	428b      	cmp	r3, r1
1000ecaa:	d319      	bcc.n	1000ece0 <__aeabi_uidiv+0x6c>
1000ecac:	e000      	b.n	1000ecb0 <__aeabi_uidiv+0x3c>
1000ecae:	0a09      	lsrs	r1, r1, #8
1000ecb0:	0bc3      	lsrs	r3, r0, #15
1000ecb2:	428b      	cmp	r3, r1
1000ecb4:	d301      	bcc.n	1000ecba <__aeabi_uidiv+0x46>
1000ecb6:	03cb      	lsls	r3, r1, #15
1000ecb8:	1ac0      	subs	r0, r0, r3
1000ecba:	4152      	adcs	r2, r2
1000ecbc:	0b83      	lsrs	r3, r0, #14
1000ecbe:	428b      	cmp	r3, r1
1000ecc0:	d301      	bcc.n	1000ecc6 <__aeabi_uidiv+0x52>
1000ecc2:	038b      	lsls	r3, r1, #14
1000ecc4:	1ac0      	subs	r0, r0, r3
1000ecc6:	4152      	adcs	r2, r2
1000ecc8:	0b43      	lsrs	r3, r0, #13
1000ecca:	428b      	cmp	r3, r1
1000eccc:	d301      	bcc.n	1000ecd2 <__aeabi_uidiv+0x5e>
1000ecce:	034b      	lsls	r3, r1, #13
1000ecd0:	1ac0      	subs	r0, r0, r3
1000ecd2:	4152      	adcs	r2, r2
1000ecd4:	0b03      	lsrs	r3, r0, #12
1000ecd6:	428b      	cmp	r3, r1
1000ecd8:	d301      	bcc.n	1000ecde <__aeabi_uidiv+0x6a>
1000ecda:	030b      	lsls	r3, r1, #12
1000ecdc:	1ac0      	subs	r0, r0, r3
1000ecde:	4152      	adcs	r2, r2
1000ece0:	0ac3      	lsrs	r3, r0, #11
1000ece2:	428b      	cmp	r3, r1
1000ece4:	d301      	bcc.n	1000ecea <__aeabi_uidiv+0x76>
1000ece6:	02cb      	lsls	r3, r1, #11
1000ece8:	1ac0      	subs	r0, r0, r3
1000ecea:	4152      	adcs	r2, r2
1000ecec:	0a83      	lsrs	r3, r0, #10
1000ecee:	428b      	cmp	r3, r1
1000ecf0:	d301      	bcc.n	1000ecf6 <__aeabi_uidiv+0x82>
1000ecf2:	028b      	lsls	r3, r1, #10
1000ecf4:	1ac0      	subs	r0, r0, r3
1000ecf6:	4152      	adcs	r2, r2
1000ecf8:	0a43      	lsrs	r3, r0, #9
1000ecfa:	428b      	cmp	r3, r1
1000ecfc:	d301      	bcc.n	1000ed02 <__aeabi_uidiv+0x8e>
1000ecfe:	024b      	lsls	r3, r1, #9
1000ed00:	1ac0      	subs	r0, r0, r3
1000ed02:	4152      	adcs	r2, r2
1000ed04:	0a03      	lsrs	r3, r0, #8
1000ed06:	428b      	cmp	r3, r1
1000ed08:	d301      	bcc.n	1000ed0e <__aeabi_uidiv+0x9a>
1000ed0a:	020b      	lsls	r3, r1, #8
1000ed0c:	1ac0      	subs	r0, r0, r3
1000ed0e:	4152      	adcs	r2, r2
1000ed10:	d2cd      	bcs.n	1000ecae <__aeabi_uidiv+0x3a>
1000ed12:	09c3      	lsrs	r3, r0, #7
1000ed14:	428b      	cmp	r3, r1
1000ed16:	d301      	bcc.n	1000ed1c <__aeabi_uidiv+0xa8>
1000ed18:	01cb      	lsls	r3, r1, #7
1000ed1a:	1ac0      	subs	r0, r0, r3
1000ed1c:	4152      	adcs	r2, r2
1000ed1e:	0983      	lsrs	r3, r0, #6
1000ed20:	428b      	cmp	r3, r1
1000ed22:	d301      	bcc.n	1000ed28 <__aeabi_uidiv+0xb4>
1000ed24:	018b      	lsls	r3, r1, #6
1000ed26:	1ac0      	subs	r0, r0, r3
1000ed28:	4152      	adcs	r2, r2
1000ed2a:	0943      	lsrs	r3, r0, #5
1000ed2c:	428b      	cmp	r3, r1
1000ed2e:	d301      	bcc.n	1000ed34 <__aeabi_uidiv+0xc0>
1000ed30:	014b      	lsls	r3, r1, #5
1000ed32:	1ac0      	subs	r0, r0, r3
1000ed34:	4152      	adcs	r2, r2
1000ed36:	0903      	lsrs	r3, r0, #4
1000ed38:	428b      	cmp	r3, r1
1000ed3a:	d301      	bcc.n	1000ed40 <__aeabi_uidiv+0xcc>
1000ed3c:	010b      	lsls	r3, r1, #4
1000ed3e:	1ac0      	subs	r0, r0, r3
1000ed40:	4152      	adcs	r2, r2
1000ed42:	08c3      	lsrs	r3, r0, #3
1000ed44:	428b      	cmp	r3, r1
1000ed46:	d301      	bcc.n	1000ed4c <__aeabi_uidiv+0xd8>
1000ed48:	00cb      	lsls	r3, r1, #3
1000ed4a:	1ac0      	subs	r0, r0, r3
1000ed4c:	4152      	adcs	r2, r2
1000ed4e:	0883      	lsrs	r3, r0, #2
1000ed50:	428b      	cmp	r3, r1
1000ed52:	d301      	bcc.n	1000ed58 <__aeabi_uidiv+0xe4>
1000ed54:	008b      	lsls	r3, r1, #2
1000ed56:	1ac0      	subs	r0, r0, r3
1000ed58:	4152      	adcs	r2, r2
1000ed5a:	0843      	lsrs	r3, r0, #1
1000ed5c:	428b      	cmp	r3, r1
1000ed5e:	d301      	bcc.n	1000ed64 <__aeabi_uidiv+0xf0>
1000ed60:	004b      	lsls	r3, r1, #1
1000ed62:	1ac0      	subs	r0, r0, r3
1000ed64:	4152      	adcs	r2, r2
1000ed66:	1a41      	subs	r1, r0, r1
1000ed68:	d200      	bcs.n	1000ed6c <__aeabi_uidiv+0xf8>
1000ed6a:	4601      	mov	r1, r0
1000ed6c:	4152      	adcs	r2, r2
1000ed6e:	4610      	mov	r0, r2
1000ed70:	4770      	bx	lr
1000ed72:	e7ff      	b.n	1000ed74 <__aeabi_uidiv+0x100>
1000ed74:	b501      	push	{r0, lr}
1000ed76:	2000      	movs	r0, #0
1000ed78:	f000 f8f0 	bl	1000ef5c <__aeabi_idiv0>
1000ed7c:	bd02      	pop	{r1, pc}
1000ed7e:	46c0      	nop			; (mov r8, r8)

1000ed80 <__aeabi_uidivmod>:
1000ed80:	2900      	cmp	r1, #0
1000ed82:	d0f7      	beq.n	1000ed74 <__aeabi_uidiv+0x100>
1000ed84:	e776      	b.n	1000ec74 <__aeabi_uidiv>
1000ed86:	4770      	bx	lr

1000ed88 <__aeabi_idiv>:
1000ed88:	4603      	mov	r3, r0
1000ed8a:	430b      	orrs	r3, r1
1000ed8c:	d47f      	bmi.n	1000ee8e <__aeabi_idiv+0x106>
1000ed8e:	2200      	movs	r2, #0
1000ed90:	0843      	lsrs	r3, r0, #1
1000ed92:	428b      	cmp	r3, r1
1000ed94:	d374      	bcc.n	1000ee80 <__aeabi_idiv+0xf8>
1000ed96:	0903      	lsrs	r3, r0, #4
1000ed98:	428b      	cmp	r3, r1
1000ed9a:	d35f      	bcc.n	1000ee5c <__aeabi_idiv+0xd4>
1000ed9c:	0a03      	lsrs	r3, r0, #8
1000ed9e:	428b      	cmp	r3, r1
1000eda0:	d344      	bcc.n	1000ee2c <__aeabi_idiv+0xa4>
1000eda2:	0b03      	lsrs	r3, r0, #12
1000eda4:	428b      	cmp	r3, r1
1000eda6:	d328      	bcc.n	1000edfa <__aeabi_idiv+0x72>
1000eda8:	0c03      	lsrs	r3, r0, #16
1000edaa:	428b      	cmp	r3, r1
1000edac:	d30d      	bcc.n	1000edca <__aeabi_idiv+0x42>
1000edae:	22ff      	movs	r2, #255	; 0xff
1000edb0:	0209      	lsls	r1, r1, #8
1000edb2:	ba12      	rev	r2, r2
1000edb4:	0c03      	lsrs	r3, r0, #16
1000edb6:	428b      	cmp	r3, r1
1000edb8:	d302      	bcc.n	1000edc0 <__aeabi_idiv+0x38>
1000edba:	1212      	asrs	r2, r2, #8
1000edbc:	0209      	lsls	r1, r1, #8
1000edbe:	d065      	beq.n	1000ee8c <__aeabi_idiv+0x104>
1000edc0:	0b03      	lsrs	r3, r0, #12
1000edc2:	428b      	cmp	r3, r1
1000edc4:	d319      	bcc.n	1000edfa <__aeabi_idiv+0x72>
1000edc6:	e000      	b.n	1000edca <__aeabi_idiv+0x42>
1000edc8:	0a09      	lsrs	r1, r1, #8
1000edca:	0bc3      	lsrs	r3, r0, #15
1000edcc:	428b      	cmp	r3, r1
1000edce:	d301      	bcc.n	1000edd4 <__aeabi_idiv+0x4c>
1000edd0:	03cb      	lsls	r3, r1, #15
1000edd2:	1ac0      	subs	r0, r0, r3
1000edd4:	4152      	adcs	r2, r2
1000edd6:	0b83      	lsrs	r3, r0, #14
1000edd8:	428b      	cmp	r3, r1
1000edda:	d301      	bcc.n	1000ede0 <__aeabi_idiv+0x58>
1000eddc:	038b      	lsls	r3, r1, #14
1000edde:	1ac0      	subs	r0, r0, r3
1000ede0:	4152      	adcs	r2, r2
1000ede2:	0b43      	lsrs	r3, r0, #13
1000ede4:	428b      	cmp	r3, r1
1000ede6:	d301      	bcc.n	1000edec <__aeabi_idiv+0x64>
1000ede8:	034b      	lsls	r3, r1, #13
1000edea:	1ac0      	subs	r0, r0, r3
1000edec:	4152      	adcs	r2, r2
1000edee:	0b03      	lsrs	r3, r0, #12
1000edf0:	428b      	cmp	r3, r1
1000edf2:	d301      	bcc.n	1000edf8 <__aeabi_idiv+0x70>
1000edf4:	030b      	lsls	r3, r1, #12
1000edf6:	1ac0      	subs	r0, r0, r3
1000edf8:	4152      	adcs	r2, r2
1000edfa:	0ac3      	lsrs	r3, r0, #11
1000edfc:	428b      	cmp	r3, r1
1000edfe:	d301      	bcc.n	1000ee04 <__aeabi_idiv+0x7c>
1000ee00:	02cb      	lsls	r3, r1, #11
1000ee02:	1ac0      	subs	r0, r0, r3
1000ee04:	4152      	adcs	r2, r2
1000ee06:	0a83      	lsrs	r3, r0, #10
1000ee08:	428b      	cmp	r3, r1
1000ee0a:	d301      	bcc.n	1000ee10 <__aeabi_idiv+0x88>
1000ee0c:	028b      	lsls	r3, r1, #10
1000ee0e:	1ac0      	subs	r0, r0, r3
1000ee10:	4152      	adcs	r2, r2
1000ee12:	0a43      	lsrs	r3, r0, #9
1000ee14:	428b      	cmp	r3, r1
1000ee16:	d301      	bcc.n	1000ee1c <__aeabi_idiv+0x94>
1000ee18:	024b      	lsls	r3, r1, #9
1000ee1a:	1ac0      	subs	r0, r0, r3
1000ee1c:	4152      	adcs	r2, r2
1000ee1e:	0a03      	lsrs	r3, r0, #8
1000ee20:	428b      	cmp	r3, r1
1000ee22:	d301      	bcc.n	1000ee28 <__aeabi_idiv+0xa0>
1000ee24:	020b      	lsls	r3, r1, #8
1000ee26:	1ac0      	subs	r0, r0, r3
1000ee28:	4152      	adcs	r2, r2
1000ee2a:	d2cd      	bcs.n	1000edc8 <__aeabi_idiv+0x40>
1000ee2c:	09c3      	lsrs	r3, r0, #7
1000ee2e:	428b      	cmp	r3, r1
1000ee30:	d301      	bcc.n	1000ee36 <__aeabi_idiv+0xae>
1000ee32:	01cb      	lsls	r3, r1, #7
1000ee34:	1ac0      	subs	r0, r0, r3
1000ee36:	4152      	adcs	r2, r2
1000ee38:	0983      	lsrs	r3, r0, #6
1000ee3a:	428b      	cmp	r3, r1
1000ee3c:	d301      	bcc.n	1000ee42 <__aeabi_idiv+0xba>
1000ee3e:	018b      	lsls	r3, r1, #6
1000ee40:	1ac0      	subs	r0, r0, r3
1000ee42:	4152      	adcs	r2, r2
1000ee44:	0943      	lsrs	r3, r0, #5
1000ee46:	428b      	cmp	r3, r1
1000ee48:	d301      	bcc.n	1000ee4e <__aeabi_idiv+0xc6>
1000ee4a:	014b      	lsls	r3, r1, #5
1000ee4c:	1ac0      	subs	r0, r0, r3
1000ee4e:	4152      	adcs	r2, r2
1000ee50:	0903      	lsrs	r3, r0, #4
1000ee52:	428b      	cmp	r3, r1
1000ee54:	d301      	bcc.n	1000ee5a <__aeabi_idiv+0xd2>
1000ee56:	010b      	lsls	r3, r1, #4
1000ee58:	1ac0      	subs	r0, r0, r3
1000ee5a:	4152      	adcs	r2, r2
1000ee5c:	08c3      	lsrs	r3, r0, #3
1000ee5e:	428b      	cmp	r3, r1
1000ee60:	d301      	bcc.n	1000ee66 <__aeabi_idiv+0xde>
1000ee62:	00cb      	lsls	r3, r1, #3
1000ee64:	1ac0      	subs	r0, r0, r3
1000ee66:	4152      	adcs	r2, r2
1000ee68:	0883      	lsrs	r3, r0, #2
1000ee6a:	428b      	cmp	r3, r1
1000ee6c:	d301      	bcc.n	1000ee72 <__aeabi_idiv+0xea>
1000ee6e:	008b      	lsls	r3, r1, #2
1000ee70:	1ac0      	subs	r0, r0, r3
1000ee72:	4152      	adcs	r2, r2
1000ee74:	0843      	lsrs	r3, r0, #1
1000ee76:	428b      	cmp	r3, r1
1000ee78:	d301      	bcc.n	1000ee7e <__aeabi_idiv+0xf6>
1000ee7a:	004b      	lsls	r3, r1, #1
1000ee7c:	1ac0      	subs	r0, r0, r3
1000ee7e:	4152      	adcs	r2, r2
1000ee80:	1a41      	subs	r1, r0, r1
1000ee82:	d200      	bcs.n	1000ee86 <__aeabi_idiv+0xfe>
1000ee84:	4601      	mov	r1, r0
1000ee86:	4152      	adcs	r2, r2
1000ee88:	4610      	mov	r0, r2
1000ee8a:	4770      	bx	lr
1000ee8c:	e05d      	b.n	1000ef4a <__aeabi_idiv+0x1c2>
1000ee8e:	0fca      	lsrs	r2, r1, #31
1000ee90:	d000      	beq.n	1000ee94 <__aeabi_idiv+0x10c>
1000ee92:	4249      	negs	r1, r1
1000ee94:	1003      	asrs	r3, r0, #32
1000ee96:	d300      	bcc.n	1000ee9a <__aeabi_idiv+0x112>
1000ee98:	4240      	negs	r0, r0
1000ee9a:	4053      	eors	r3, r2
1000ee9c:	2200      	movs	r2, #0
1000ee9e:	469c      	mov	ip, r3
1000eea0:	0903      	lsrs	r3, r0, #4
1000eea2:	428b      	cmp	r3, r1
1000eea4:	d32d      	bcc.n	1000ef02 <__aeabi_idiv+0x17a>
1000eea6:	0a03      	lsrs	r3, r0, #8
1000eea8:	428b      	cmp	r3, r1
1000eeaa:	d312      	bcc.n	1000eed2 <__aeabi_idiv+0x14a>
1000eeac:	22fc      	movs	r2, #252	; 0xfc
1000eeae:	0189      	lsls	r1, r1, #6
1000eeb0:	ba12      	rev	r2, r2
1000eeb2:	0a03      	lsrs	r3, r0, #8
1000eeb4:	428b      	cmp	r3, r1
1000eeb6:	d30c      	bcc.n	1000eed2 <__aeabi_idiv+0x14a>
1000eeb8:	0189      	lsls	r1, r1, #6
1000eeba:	1192      	asrs	r2, r2, #6
1000eebc:	428b      	cmp	r3, r1
1000eebe:	d308      	bcc.n	1000eed2 <__aeabi_idiv+0x14a>
1000eec0:	0189      	lsls	r1, r1, #6
1000eec2:	1192      	asrs	r2, r2, #6
1000eec4:	428b      	cmp	r3, r1
1000eec6:	d304      	bcc.n	1000eed2 <__aeabi_idiv+0x14a>
1000eec8:	0189      	lsls	r1, r1, #6
1000eeca:	d03a      	beq.n	1000ef42 <__aeabi_idiv+0x1ba>
1000eecc:	1192      	asrs	r2, r2, #6
1000eece:	e000      	b.n	1000eed2 <__aeabi_idiv+0x14a>
1000eed0:	0989      	lsrs	r1, r1, #6
1000eed2:	09c3      	lsrs	r3, r0, #7
1000eed4:	428b      	cmp	r3, r1
1000eed6:	d301      	bcc.n	1000eedc <__aeabi_idiv+0x154>
1000eed8:	01cb      	lsls	r3, r1, #7
1000eeda:	1ac0      	subs	r0, r0, r3
1000eedc:	4152      	adcs	r2, r2
1000eede:	0983      	lsrs	r3, r0, #6
1000eee0:	428b      	cmp	r3, r1
1000eee2:	d301      	bcc.n	1000eee8 <__aeabi_idiv+0x160>
1000eee4:	018b      	lsls	r3, r1, #6
1000eee6:	1ac0      	subs	r0, r0, r3
1000eee8:	4152      	adcs	r2, r2
1000eeea:	0943      	lsrs	r3, r0, #5
1000eeec:	428b      	cmp	r3, r1
1000eeee:	d301      	bcc.n	1000eef4 <__aeabi_idiv+0x16c>
1000eef0:	014b      	lsls	r3, r1, #5
1000eef2:	1ac0      	subs	r0, r0, r3
1000eef4:	4152      	adcs	r2, r2
1000eef6:	0903      	lsrs	r3, r0, #4
1000eef8:	428b      	cmp	r3, r1
1000eefa:	d301      	bcc.n	1000ef00 <__aeabi_idiv+0x178>
1000eefc:	010b      	lsls	r3, r1, #4
1000eefe:	1ac0      	subs	r0, r0, r3
1000ef00:	4152      	adcs	r2, r2
1000ef02:	08c3      	lsrs	r3, r0, #3
1000ef04:	428b      	cmp	r3, r1
1000ef06:	d301      	bcc.n	1000ef0c <__aeabi_idiv+0x184>
1000ef08:	00cb      	lsls	r3, r1, #3
1000ef0a:	1ac0      	subs	r0, r0, r3
1000ef0c:	4152      	adcs	r2, r2
1000ef0e:	0883      	lsrs	r3, r0, #2
1000ef10:	428b      	cmp	r3, r1
1000ef12:	d301      	bcc.n	1000ef18 <__aeabi_idiv+0x190>
1000ef14:	008b      	lsls	r3, r1, #2
1000ef16:	1ac0      	subs	r0, r0, r3
1000ef18:	4152      	adcs	r2, r2
1000ef1a:	d2d9      	bcs.n	1000eed0 <__aeabi_idiv+0x148>
1000ef1c:	0843      	lsrs	r3, r0, #1
1000ef1e:	428b      	cmp	r3, r1
1000ef20:	d301      	bcc.n	1000ef26 <__aeabi_idiv+0x19e>
1000ef22:	004b      	lsls	r3, r1, #1
1000ef24:	1ac0      	subs	r0, r0, r3
1000ef26:	4152      	adcs	r2, r2
1000ef28:	1a41      	subs	r1, r0, r1
1000ef2a:	d200      	bcs.n	1000ef2e <__aeabi_idiv+0x1a6>
1000ef2c:	4601      	mov	r1, r0
1000ef2e:	4663      	mov	r3, ip
1000ef30:	4152      	adcs	r2, r2
1000ef32:	105b      	asrs	r3, r3, #1
1000ef34:	4610      	mov	r0, r2
1000ef36:	d301      	bcc.n	1000ef3c <__aeabi_idiv+0x1b4>
1000ef38:	4240      	negs	r0, r0
1000ef3a:	2b00      	cmp	r3, #0
1000ef3c:	d500      	bpl.n	1000ef40 <__aeabi_idiv+0x1b8>
1000ef3e:	4249      	negs	r1, r1
1000ef40:	4770      	bx	lr
1000ef42:	4663      	mov	r3, ip
1000ef44:	105b      	asrs	r3, r3, #1
1000ef46:	d300      	bcc.n	1000ef4a <__aeabi_idiv+0x1c2>
1000ef48:	4240      	negs	r0, r0
1000ef4a:	b501      	push	{r0, lr}
1000ef4c:	2000      	movs	r0, #0
1000ef4e:	f000 f805 	bl	1000ef5c <__aeabi_idiv0>
1000ef52:	bd02      	pop	{r1, pc}

1000ef54 <__aeabi_idivmod>:
1000ef54:	2900      	cmp	r1, #0
1000ef56:	d0f8      	beq.n	1000ef4a <__aeabi_idiv+0x1c2>
1000ef58:	e716      	b.n	1000ed88 <__aeabi_idiv>
1000ef5a:	4770      	bx	lr

1000ef5c <__aeabi_idiv0>:
1000ef5c:	4770      	bx	lr
1000ef5e:	46c0      	nop			; (mov r8, r8)

1000ef60 <__aeabi_cdrcmple>:
1000ef60:	4684      	mov	ip, r0
1000ef62:	1c10      	adds	r0, r2, #0
1000ef64:	4662      	mov	r2, ip
1000ef66:	468c      	mov	ip, r1
1000ef68:	1c19      	adds	r1, r3, #0
1000ef6a:	4663      	mov	r3, ip
1000ef6c:	e000      	b.n	1000ef70 <__aeabi_cdcmpeq>
1000ef6e:	46c0      	nop			; (mov r8, r8)

1000ef70 <__aeabi_cdcmpeq>:
1000ef70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000ef72:	f000 f8f5 	bl	1000f160 <__ledf2>
1000ef76:	2800      	cmp	r0, #0
1000ef78:	d401      	bmi.n	1000ef7e <__aeabi_cdcmpeq+0xe>
1000ef7a:	2100      	movs	r1, #0
1000ef7c:	42c8      	cmn	r0, r1
1000ef7e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1000ef80 <__aeabi_dcmpeq>:
1000ef80:	b510      	push	{r4, lr}
1000ef82:	f000 f849 	bl	1000f018 <__eqdf2>
1000ef86:	4240      	negs	r0, r0
1000ef88:	3001      	adds	r0, #1
1000ef8a:	bd10      	pop	{r4, pc}

1000ef8c <__aeabi_dcmplt>:
1000ef8c:	b510      	push	{r4, lr}
1000ef8e:	f000 f8e7 	bl	1000f160 <__ledf2>
1000ef92:	2800      	cmp	r0, #0
1000ef94:	db01      	blt.n	1000ef9a <__aeabi_dcmplt+0xe>
1000ef96:	2000      	movs	r0, #0
1000ef98:	bd10      	pop	{r4, pc}
1000ef9a:	2001      	movs	r0, #1
1000ef9c:	bd10      	pop	{r4, pc}
1000ef9e:	46c0      	nop			; (mov r8, r8)

1000efa0 <__aeabi_dcmple>:
1000efa0:	b510      	push	{r4, lr}
1000efa2:	f000 f8dd 	bl	1000f160 <__ledf2>
1000efa6:	2800      	cmp	r0, #0
1000efa8:	dd01      	ble.n	1000efae <__aeabi_dcmple+0xe>
1000efaa:	2000      	movs	r0, #0
1000efac:	bd10      	pop	{r4, pc}
1000efae:	2001      	movs	r0, #1
1000efb0:	bd10      	pop	{r4, pc}
1000efb2:	46c0      	nop			; (mov r8, r8)

1000efb4 <__aeabi_dcmpgt>:
1000efb4:	b510      	push	{r4, lr}
1000efb6:	f000 f86f 	bl	1000f098 <__gedf2>
1000efba:	2800      	cmp	r0, #0
1000efbc:	dc01      	bgt.n	1000efc2 <__aeabi_dcmpgt+0xe>
1000efbe:	2000      	movs	r0, #0
1000efc0:	bd10      	pop	{r4, pc}
1000efc2:	2001      	movs	r0, #1
1000efc4:	bd10      	pop	{r4, pc}
1000efc6:	46c0      	nop			; (mov r8, r8)

1000efc8 <__aeabi_dcmpge>:
1000efc8:	b510      	push	{r4, lr}
1000efca:	f000 f865 	bl	1000f098 <__gedf2>
1000efce:	2800      	cmp	r0, #0
1000efd0:	da01      	bge.n	1000efd6 <__aeabi_dcmpge+0xe>
1000efd2:	2000      	movs	r0, #0
1000efd4:	bd10      	pop	{r4, pc}
1000efd6:	2001      	movs	r0, #1
1000efd8:	bd10      	pop	{r4, pc}
1000efda:	46c0      	nop			; (mov r8, r8)

1000efdc <__aeabi_d2uiz>:
1000efdc:	b570      	push	{r4, r5, r6, lr}
1000efde:	2200      	movs	r2, #0
1000efe0:	4b0c      	ldr	r3, [pc, #48]	; (1000f014 <__aeabi_d2uiz+0x38>)
1000efe2:	0004      	movs	r4, r0
1000efe4:	000d      	movs	r5, r1
1000efe6:	f7ff ffef 	bl	1000efc8 <__aeabi_dcmpge>
1000efea:	2800      	cmp	r0, #0
1000efec:	d104      	bne.n	1000eff8 <__aeabi_d2uiz+0x1c>
1000efee:	0020      	movs	r0, r4
1000eff0:	0029      	movs	r1, r5
1000eff2:	f000 feed 	bl	1000fdd0 <__aeabi_d2iz>
1000eff6:	bd70      	pop	{r4, r5, r6, pc}
1000eff8:	4b06      	ldr	r3, [pc, #24]	; (1000f014 <__aeabi_d2uiz+0x38>)
1000effa:	2200      	movs	r2, #0
1000effc:	0020      	movs	r0, r4
1000effe:	0029      	movs	r1, r5
1000f000:	f000 fb92 	bl	1000f728 <__aeabi_dsub>
1000f004:	f000 fee4 	bl	1000fdd0 <__aeabi_d2iz>
1000f008:	2380      	movs	r3, #128	; 0x80
1000f00a:	061b      	lsls	r3, r3, #24
1000f00c:	469c      	mov	ip, r3
1000f00e:	4460      	add	r0, ip
1000f010:	e7f1      	b.n	1000eff6 <__aeabi_d2uiz+0x1a>
1000f012:	46c0      	nop			; (mov r8, r8)
1000f014:	41e00000 	.word	0x41e00000

1000f018 <__eqdf2>:
1000f018:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f01a:	465f      	mov	r7, fp
1000f01c:	4656      	mov	r6, sl
1000f01e:	464d      	mov	r5, r9
1000f020:	4644      	mov	r4, r8
1000f022:	b4f0      	push	{r4, r5, r6, r7}
1000f024:	031f      	lsls	r7, r3, #12
1000f026:	005c      	lsls	r4, r3, #1
1000f028:	0fdb      	lsrs	r3, r3, #31
1000f02a:	469a      	mov	sl, r3
1000f02c:	4b19      	ldr	r3, [pc, #100]	; (1000f094 <__eqdf2+0x7c>)
1000f02e:	030e      	lsls	r6, r1, #12
1000f030:	004d      	lsls	r5, r1, #1
1000f032:	0fc9      	lsrs	r1, r1, #31
1000f034:	4680      	mov	r8, r0
1000f036:	0b36      	lsrs	r6, r6, #12
1000f038:	0d6d      	lsrs	r5, r5, #21
1000f03a:	468b      	mov	fp, r1
1000f03c:	4691      	mov	r9, r2
1000f03e:	0b3f      	lsrs	r7, r7, #12
1000f040:	0d64      	lsrs	r4, r4, #21
1000f042:	429d      	cmp	r5, r3
1000f044:	d019      	beq.n	1000f07a <__eqdf2+0x62>
1000f046:	4b13      	ldr	r3, [pc, #76]	; (1000f094 <__eqdf2+0x7c>)
1000f048:	429c      	cmp	r4, r3
1000f04a:	d01b      	beq.n	1000f084 <__eqdf2+0x6c>
1000f04c:	2301      	movs	r3, #1
1000f04e:	42a5      	cmp	r5, r4
1000f050:	d006      	beq.n	1000f060 <__eqdf2+0x48>
1000f052:	0018      	movs	r0, r3
1000f054:	bc3c      	pop	{r2, r3, r4, r5}
1000f056:	4690      	mov	r8, r2
1000f058:	4699      	mov	r9, r3
1000f05a:	46a2      	mov	sl, r4
1000f05c:	46ab      	mov	fp, r5
1000f05e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f060:	42be      	cmp	r6, r7
1000f062:	d1f6      	bne.n	1000f052 <__eqdf2+0x3a>
1000f064:	45c8      	cmp	r8, r9
1000f066:	d1f4      	bne.n	1000f052 <__eqdf2+0x3a>
1000f068:	45d3      	cmp	fp, sl
1000f06a:	d010      	beq.n	1000f08e <__eqdf2+0x76>
1000f06c:	2d00      	cmp	r5, #0
1000f06e:	d1f0      	bne.n	1000f052 <__eqdf2+0x3a>
1000f070:	4330      	orrs	r0, r6
1000f072:	0003      	movs	r3, r0
1000f074:	1e5a      	subs	r2, r3, #1
1000f076:	4193      	sbcs	r3, r2
1000f078:	e7eb      	b.n	1000f052 <__eqdf2+0x3a>
1000f07a:	0031      	movs	r1, r6
1000f07c:	2301      	movs	r3, #1
1000f07e:	4301      	orrs	r1, r0
1000f080:	d1e7      	bne.n	1000f052 <__eqdf2+0x3a>
1000f082:	e7e0      	b.n	1000f046 <__eqdf2+0x2e>
1000f084:	433a      	orrs	r2, r7
1000f086:	2301      	movs	r3, #1
1000f088:	2a00      	cmp	r2, #0
1000f08a:	d1e2      	bne.n	1000f052 <__eqdf2+0x3a>
1000f08c:	e7de      	b.n	1000f04c <__eqdf2+0x34>
1000f08e:	2300      	movs	r3, #0
1000f090:	e7df      	b.n	1000f052 <__eqdf2+0x3a>
1000f092:	46c0      	nop			; (mov r8, r8)
1000f094:	000007ff 	.word	0x000007ff

1000f098 <__gedf2>:
1000f098:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f09a:	465f      	mov	r7, fp
1000f09c:	4644      	mov	r4, r8
1000f09e:	4656      	mov	r6, sl
1000f0a0:	464d      	mov	r5, r9
1000f0a2:	b4f0      	push	{r4, r5, r6, r7}
1000f0a4:	031f      	lsls	r7, r3, #12
1000f0a6:	0b3c      	lsrs	r4, r7, #12
1000f0a8:	4f2c      	ldr	r7, [pc, #176]	; (1000f15c <__gedf2+0xc4>)
1000f0aa:	030e      	lsls	r6, r1, #12
1000f0ac:	004d      	lsls	r5, r1, #1
1000f0ae:	46a3      	mov	fp, r4
1000f0b0:	005c      	lsls	r4, r3, #1
1000f0b2:	4684      	mov	ip, r0
1000f0b4:	0b36      	lsrs	r6, r6, #12
1000f0b6:	0d6d      	lsrs	r5, r5, #21
1000f0b8:	0fc9      	lsrs	r1, r1, #31
1000f0ba:	4690      	mov	r8, r2
1000f0bc:	0d64      	lsrs	r4, r4, #21
1000f0be:	0fdb      	lsrs	r3, r3, #31
1000f0c0:	42bd      	cmp	r5, r7
1000f0c2:	d02b      	beq.n	1000f11c <__gedf2+0x84>
1000f0c4:	4f25      	ldr	r7, [pc, #148]	; (1000f15c <__gedf2+0xc4>)
1000f0c6:	42bc      	cmp	r4, r7
1000f0c8:	d02e      	beq.n	1000f128 <__gedf2+0x90>
1000f0ca:	2d00      	cmp	r5, #0
1000f0cc:	d10e      	bne.n	1000f0ec <__gedf2+0x54>
1000f0ce:	4330      	orrs	r0, r6
1000f0d0:	0007      	movs	r7, r0
1000f0d2:	4681      	mov	r9, r0
1000f0d4:	4278      	negs	r0, r7
1000f0d6:	4178      	adcs	r0, r7
1000f0d8:	2c00      	cmp	r4, #0
1000f0da:	d117      	bne.n	1000f10c <__gedf2+0x74>
1000f0dc:	465f      	mov	r7, fp
1000f0de:	433a      	orrs	r2, r7
1000f0e0:	d114      	bne.n	1000f10c <__gedf2+0x74>
1000f0e2:	464b      	mov	r3, r9
1000f0e4:	2000      	movs	r0, #0
1000f0e6:	2b00      	cmp	r3, #0
1000f0e8:	d00a      	beq.n	1000f100 <__gedf2+0x68>
1000f0ea:	e006      	b.n	1000f0fa <__gedf2+0x62>
1000f0ec:	2c00      	cmp	r4, #0
1000f0ee:	d102      	bne.n	1000f0f6 <__gedf2+0x5e>
1000f0f0:	4658      	mov	r0, fp
1000f0f2:	4302      	orrs	r2, r0
1000f0f4:	d001      	beq.n	1000f0fa <__gedf2+0x62>
1000f0f6:	4299      	cmp	r1, r3
1000f0f8:	d01a      	beq.n	1000f130 <__gedf2+0x98>
1000f0fa:	2301      	movs	r3, #1
1000f0fc:	4248      	negs	r0, r1
1000f0fe:	4318      	orrs	r0, r3
1000f100:	bc3c      	pop	{r2, r3, r4, r5}
1000f102:	4690      	mov	r8, r2
1000f104:	4699      	mov	r9, r3
1000f106:	46a2      	mov	sl, r4
1000f108:	46ab      	mov	fp, r5
1000f10a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f10c:	2800      	cmp	r0, #0
1000f10e:	d0f2      	beq.n	1000f0f6 <__gedf2+0x5e>
1000f110:	4258      	negs	r0, r3
1000f112:	4158      	adcs	r0, r3
1000f114:	2201      	movs	r2, #1
1000f116:	4240      	negs	r0, r0
1000f118:	4310      	orrs	r0, r2
1000f11a:	e7f1      	b.n	1000f100 <__gedf2+0x68>
1000f11c:	0037      	movs	r7, r6
1000f11e:	4307      	orrs	r7, r0
1000f120:	d0d0      	beq.n	1000f0c4 <__gedf2+0x2c>
1000f122:	2002      	movs	r0, #2
1000f124:	4240      	negs	r0, r0
1000f126:	e7eb      	b.n	1000f100 <__gedf2+0x68>
1000f128:	465f      	mov	r7, fp
1000f12a:	4317      	orrs	r7, r2
1000f12c:	d0cd      	beq.n	1000f0ca <__gedf2+0x32>
1000f12e:	e7f8      	b.n	1000f122 <__gedf2+0x8a>
1000f130:	42a5      	cmp	r5, r4
1000f132:	dce2      	bgt.n	1000f0fa <__gedf2+0x62>
1000f134:	db05      	blt.n	1000f142 <__gedf2+0xaa>
1000f136:	455e      	cmp	r6, fp
1000f138:	d8df      	bhi.n	1000f0fa <__gedf2+0x62>
1000f13a:	d008      	beq.n	1000f14e <__gedf2+0xb6>
1000f13c:	2000      	movs	r0, #0
1000f13e:	455e      	cmp	r6, fp
1000f140:	d2de      	bcs.n	1000f100 <__gedf2+0x68>
1000f142:	4248      	negs	r0, r1
1000f144:	4148      	adcs	r0, r1
1000f146:	2301      	movs	r3, #1
1000f148:	4240      	negs	r0, r0
1000f14a:	4318      	orrs	r0, r3
1000f14c:	e7d8      	b.n	1000f100 <__gedf2+0x68>
1000f14e:	45c4      	cmp	ip, r8
1000f150:	d8d3      	bhi.n	1000f0fa <__gedf2+0x62>
1000f152:	2000      	movs	r0, #0
1000f154:	45c4      	cmp	ip, r8
1000f156:	d3f4      	bcc.n	1000f142 <__gedf2+0xaa>
1000f158:	e7d2      	b.n	1000f100 <__gedf2+0x68>
1000f15a:	46c0      	nop			; (mov r8, r8)
1000f15c:	000007ff 	.word	0x000007ff

1000f160 <__ledf2>:
1000f160:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f162:	465f      	mov	r7, fp
1000f164:	464d      	mov	r5, r9
1000f166:	4644      	mov	r4, r8
1000f168:	4656      	mov	r6, sl
1000f16a:	b4f0      	push	{r4, r5, r6, r7}
1000f16c:	031c      	lsls	r4, r3, #12
1000f16e:	0b24      	lsrs	r4, r4, #12
1000f170:	46a4      	mov	ip, r4
1000f172:	4c2f      	ldr	r4, [pc, #188]	; (1000f230 <__ledf2+0xd0>)
1000f174:	030f      	lsls	r7, r1, #12
1000f176:	004d      	lsls	r5, r1, #1
1000f178:	005e      	lsls	r6, r3, #1
1000f17a:	0fc9      	lsrs	r1, r1, #31
1000f17c:	4680      	mov	r8, r0
1000f17e:	0b3f      	lsrs	r7, r7, #12
1000f180:	0d6d      	lsrs	r5, r5, #21
1000f182:	468b      	mov	fp, r1
1000f184:	4691      	mov	r9, r2
1000f186:	0d76      	lsrs	r6, r6, #21
1000f188:	0fdb      	lsrs	r3, r3, #31
1000f18a:	42a5      	cmp	r5, r4
1000f18c:	d020      	beq.n	1000f1d0 <__ledf2+0x70>
1000f18e:	4c28      	ldr	r4, [pc, #160]	; (1000f230 <__ledf2+0xd0>)
1000f190:	42a6      	cmp	r6, r4
1000f192:	d022      	beq.n	1000f1da <__ledf2+0x7a>
1000f194:	2d00      	cmp	r5, #0
1000f196:	d112      	bne.n	1000f1be <__ledf2+0x5e>
1000f198:	4338      	orrs	r0, r7
1000f19a:	4244      	negs	r4, r0
1000f19c:	4144      	adcs	r4, r0
1000f19e:	2e00      	cmp	r6, #0
1000f1a0:	d020      	beq.n	1000f1e4 <__ledf2+0x84>
1000f1a2:	2c00      	cmp	r4, #0
1000f1a4:	d00d      	beq.n	1000f1c2 <__ledf2+0x62>
1000f1a6:	425c      	negs	r4, r3
1000f1a8:	4163      	adcs	r3, r4
1000f1aa:	2401      	movs	r4, #1
1000f1ac:	425b      	negs	r3, r3
1000f1ae:	431c      	orrs	r4, r3
1000f1b0:	0020      	movs	r0, r4
1000f1b2:	bc3c      	pop	{r2, r3, r4, r5}
1000f1b4:	4690      	mov	r8, r2
1000f1b6:	4699      	mov	r9, r3
1000f1b8:	46a2      	mov	sl, r4
1000f1ba:	46ab      	mov	fp, r5
1000f1bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f1be:	2e00      	cmp	r6, #0
1000f1c0:	d017      	beq.n	1000f1f2 <__ledf2+0x92>
1000f1c2:	455b      	cmp	r3, fp
1000f1c4:	d019      	beq.n	1000f1fa <__ledf2+0x9a>
1000f1c6:	465b      	mov	r3, fp
1000f1c8:	425c      	negs	r4, r3
1000f1ca:	2301      	movs	r3, #1
1000f1cc:	431c      	orrs	r4, r3
1000f1ce:	e7ef      	b.n	1000f1b0 <__ledf2+0x50>
1000f1d0:	0039      	movs	r1, r7
1000f1d2:	2402      	movs	r4, #2
1000f1d4:	4301      	orrs	r1, r0
1000f1d6:	d1eb      	bne.n	1000f1b0 <__ledf2+0x50>
1000f1d8:	e7d9      	b.n	1000f18e <__ledf2+0x2e>
1000f1da:	4661      	mov	r1, ip
1000f1dc:	2402      	movs	r4, #2
1000f1de:	4311      	orrs	r1, r2
1000f1e0:	d1e6      	bne.n	1000f1b0 <__ledf2+0x50>
1000f1e2:	e7d7      	b.n	1000f194 <__ledf2+0x34>
1000f1e4:	4661      	mov	r1, ip
1000f1e6:	430a      	orrs	r2, r1
1000f1e8:	d1db      	bne.n	1000f1a2 <__ledf2+0x42>
1000f1ea:	2400      	movs	r4, #0
1000f1ec:	2800      	cmp	r0, #0
1000f1ee:	d0df      	beq.n	1000f1b0 <__ledf2+0x50>
1000f1f0:	e7e9      	b.n	1000f1c6 <__ledf2+0x66>
1000f1f2:	4661      	mov	r1, ip
1000f1f4:	430a      	orrs	r2, r1
1000f1f6:	d1e4      	bne.n	1000f1c2 <__ledf2+0x62>
1000f1f8:	e7e5      	b.n	1000f1c6 <__ledf2+0x66>
1000f1fa:	42b5      	cmp	r5, r6
1000f1fc:	dd03      	ble.n	1000f206 <__ledf2+0xa6>
1000f1fe:	2201      	movs	r2, #1
1000f200:	425c      	negs	r4, r3
1000f202:	4314      	orrs	r4, r2
1000f204:	e7d4      	b.n	1000f1b0 <__ledf2+0x50>
1000f206:	42b5      	cmp	r5, r6
1000f208:	dbcd      	blt.n	1000f1a6 <__ledf2+0x46>
1000f20a:	4567      	cmp	r7, ip
1000f20c:	d8db      	bhi.n	1000f1c6 <__ledf2+0x66>
1000f20e:	d009      	beq.n	1000f224 <__ledf2+0xc4>
1000f210:	2400      	movs	r4, #0
1000f212:	4567      	cmp	r7, ip
1000f214:	d2cc      	bcs.n	1000f1b0 <__ledf2+0x50>
1000f216:	4659      	mov	r1, fp
1000f218:	424c      	negs	r4, r1
1000f21a:	4161      	adcs	r1, r4
1000f21c:	2401      	movs	r4, #1
1000f21e:	4249      	negs	r1, r1
1000f220:	430c      	orrs	r4, r1
1000f222:	e7c5      	b.n	1000f1b0 <__ledf2+0x50>
1000f224:	45c8      	cmp	r8, r9
1000f226:	d8ce      	bhi.n	1000f1c6 <__ledf2+0x66>
1000f228:	2400      	movs	r4, #0
1000f22a:	45c8      	cmp	r8, r9
1000f22c:	d3f3      	bcc.n	1000f216 <__ledf2+0xb6>
1000f22e:	e7bf      	b.n	1000f1b0 <__ledf2+0x50>
1000f230:	000007ff 	.word	0x000007ff

1000f234 <__aeabi_dmul>:
1000f234:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f236:	465f      	mov	r7, fp
1000f238:	4656      	mov	r6, sl
1000f23a:	464d      	mov	r5, r9
1000f23c:	4644      	mov	r4, r8
1000f23e:	b4f0      	push	{r4, r5, r6, r7}
1000f240:	030d      	lsls	r5, r1, #12
1000f242:	4699      	mov	r9, r3
1000f244:	004e      	lsls	r6, r1, #1
1000f246:	0b2b      	lsrs	r3, r5, #12
1000f248:	b087      	sub	sp, #28
1000f24a:	0007      	movs	r7, r0
1000f24c:	4692      	mov	sl, r2
1000f24e:	4680      	mov	r8, r0
1000f250:	469b      	mov	fp, r3
1000f252:	0d76      	lsrs	r6, r6, #21
1000f254:	0fcc      	lsrs	r4, r1, #31
1000f256:	2e00      	cmp	r6, #0
1000f258:	d069      	beq.n	1000f32e <__aeabi_dmul+0xfa>
1000f25a:	4b6d      	ldr	r3, [pc, #436]	; (1000f410 <__aeabi_dmul+0x1dc>)
1000f25c:	429e      	cmp	r6, r3
1000f25e:	d035      	beq.n	1000f2cc <__aeabi_dmul+0x98>
1000f260:	465b      	mov	r3, fp
1000f262:	2280      	movs	r2, #128	; 0x80
1000f264:	00dd      	lsls	r5, r3, #3
1000f266:	0412      	lsls	r2, r2, #16
1000f268:	0f43      	lsrs	r3, r0, #29
1000f26a:	4313      	orrs	r3, r2
1000f26c:	432b      	orrs	r3, r5
1000f26e:	469b      	mov	fp, r3
1000f270:	00c3      	lsls	r3, r0, #3
1000f272:	4698      	mov	r8, r3
1000f274:	4b67      	ldr	r3, [pc, #412]	; (1000f414 <__aeabi_dmul+0x1e0>)
1000f276:	2700      	movs	r7, #0
1000f278:	469c      	mov	ip, r3
1000f27a:	2300      	movs	r3, #0
1000f27c:	4466      	add	r6, ip
1000f27e:	9301      	str	r3, [sp, #4]
1000f280:	464a      	mov	r2, r9
1000f282:	0315      	lsls	r5, r2, #12
1000f284:	0050      	lsls	r0, r2, #1
1000f286:	0fd2      	lsrs	r2, r2, #31
1000f288:	4653      	mov	r3, sl
1000f28a:	0b2d      	lsrs	r5, r5, #12
1000f28c:	0d40      	lsrs	r0, r0, #21
1000f28e:	4691      	mov	r9, r2
1000f290:	d100      	bne.n	1000f294 <__aeabi_dmul+0x60>
1000f292:	e076      	b.n	1000f382 <__aeabi_dmul+0x14e>
1000f294:	4a5e      	ldr	r2, [pc, #376]	; (1000f410 <__aeabi_dmul+0x1dc>)
1000f296:	4290      	cmp	r0, r2
1000f298:	d06c      	beq.n	1000f374 <__aeabi_dmul+0x140>
1000f29a:	2280      	movs	r2, #128	; 0x80
1000f29c:	0f5b      	lsrs	r3, r3, #29
1000f29e:	0412      	lsls	r2, r2, #16
1000f2a0:	4313      	orrs	r3, r2
1000f2a2:	4a5c      	ldr	r2, [pc, #368]	; (1000f414 <__aeabi_dmul+0x1e0>)
1000f2a4:	00ed      	lsls	r5, r5, #3
1000f2a6:	4694      	mov	ip, r2
1000f2a8:	431d      	orrs	r5, r3
1000f2aa:	4653      	mov	r3, sl
1000f2ac:	2200      	movs	r2, #0
1000f2ae:	00db      	lsls	r3, r3, #3
1000f2b0:	4460      	add	r0, ip
1000f2b2:	4649      	mov	r1, r9
1000f2b4:	1836      	adds	r6, r6, r0
1000f2b6:	1c70      	adds	r0, r6, #1
1000f2b8:	4061      	eors	r1, r4
1000f2ba:	9002      	str	r0, [sp, #8]
1000f2bc:	4317      	orrs	r7, r2
1000f2be:	2f0f      	cmp	r7, #15
1000f2c0:	d900      	bls.n	1000f2c4 <__aeabi_dmul+0x90>
1000f2c2:	e0af      	b.n	1000f424 <__aeabi_dmul+0x1f0>
1000f2c4:	4854      	ldr	r0, [pc, #336]	; (1000f418 <__aeabi_dmul+0x1e4>)
1000f2c6:	00bf      	lsls	r7, r7, #2
1000f2c8:	59c7      	ldr	r7, [r0, r7]
1000f2ca:	46bf      	mov	pc, r7
1000f2cc:	465b      	mov	r3, fp
1000f2ce:	431f      	orrs	r7, r3
1000f2d0:	d000      	beq.n	1000f2d4 <__aeabi_dmul+0xa0>
1000f2d2:	e088      	b.n	1000f3e6 <__aeabi_dmul+0x1b2>
1000f2d4:	2300      	movs	r3, #0
1000f2d6:	469b      	mov	fp, r3
1000f2d8:	4698      	mov	r8, r3
1000f2da:	3302      	adds	r3, #2
1000f2dc:	2708      	movs	r7, #8
1000f2de:	9301      	str	r3, [sp, #4]
1000f2e0:	e7ce      	b.n	1000f280 <__aeabi_dmul+0x4c>
1000f2e2:	4649      	mov	r1, r9
1000f2e4:	2a02      	cmp	r2, #2
1000f2e6:	d06a      	beq.n	1000f3be <__aeabi_dmul+0x18a>
1000f2e8:	2a03      	cmp	r2, #3
1000f2ea:	d100      	bne.n	1000f2ee <__aeabi_dmul+0xba>
1000f2ec:	e209      	b.n	1000f702 <__aeabi_dmul+0x4ce>
1000f2ee:	2a01      	cmp	r2, #1
1000f2f0:	d000      	beq.n	1000f2f4 <__aeabi_dmul+0xc0>
1000f2f2:	e1bb      	b.n	1000f66c <__aeabi_dmul+0x438>
1000f2f4:	4011      	ands	r1, r2
1000f2f6:	2200      	movs	r2, #0
1000f2f8:	2300      	movs	r3, #0
1000f2fa:	2500      	movs	r5, #0
1000f2fc:	4690      	mov	r8, r2
1000f2fe:	b2cc      	uxtb	r4, r1
1000f300:	2100      	movs	r1, #0
1000f302:	032d      	lsls	r5, r5, #12
1000f304:	0d0a      	lsrs	r2, r1, #20
1000f306:	0512      	lsls	r2, r2, #20
1000f308:	0b2d      	lsrs	r5, r5, #12
1000f30a:	4315      	orrs	r5, r2
1000f30c:	4a43      	ldr	r2, [pc, #268]	; (1000f41c <__aeabi_dmul+0x1e8>)
1000f30e:	051b      	lsls	r3, r3, #20
1000f310:	4015      	ands	r5, r2
1000f312:	431d      	orrs	r5, r3
1000f314:	006d      	lsls	r5, r5, #1
1000f316:	07e4      	lsls	r4, r4, #31
1000f318:	086d      	lsrs	r5, r5, #1
1000f31a:	4325      	orrs	r5, r4
1000f31c:	4640      	mov	r0, r8
1000f31e:	0029      	movs	r1, r5
1000f320:	b007      	add	sp, #28
1000f322:	bc3c      	pop	{r2, r3, r4, r5}
1000f324:	4690      	mov	r8, r2
1000f326:	4699      	mov	r9, r3
1000f328:	46a2      	mov	sl, r4
1000f32a:	46ab      	mov	fp, r5
1000f32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f32e:	4303      	orrs	r3, r0
1000f330:	d052      	beq.n	1000f3d8 <__aeabi_dmul+0x1a4>
1000f332:	465b      	mov	r3, fp
1000f334:	2b00      	cmp	r3, #0
1000f336:	d100      	bne.n	1000f33a <__aeabi_dmul+0x106>
1000f338:	e18a      	b.n	1000f650 <__aeabi_dmul+0x41c>
1000f33a:	4658      	mov	r0, fp
1000f33c:	f000 fdb6 	bl	1000feac <__clzsi2>
1000f340:	0003      	movs	r3, r0
1000f342:	3b0b      	subs	r3, #11
1000f344:	2b1c      	cmp	r3, #28
1000f346:	dd00      	ble.n	1000f34a <__aeabi_dmul+0x116>
1000f348:	e17b      	b.n	1000f642 <__aeabi_dmul+0x40e>
1000f34a:	221d      	movs	r2, #29
1000f34c:	1ad3      	subs	r3, r2, r3
1000f34e:	003a      	movs	r2, r7
1000f350:	0001      	movs	r1, r0
1000f352:	465d      	mov	r5, fp
1000f354:	40da      	lsrs	r2, r3
1000f356:	3908      	subs	r1, #8
1000f358:	408d      	lsls	r5, r1
1000f35a:	0013      	movs	r3, r2
1000f35c:	408f      	lsls	r7, r1
1000f35e:	432b      	orrs	r3, r5
1000f360:	469b      	mov	fp, r3
1000f362:	46b8      	mov	r8, r7
1000f364:	4b2e      	ldr	r3, [pc, #184]	; (1000f420 <__aeabi_dmul+0x1ec>)
1000f366:	2700      	movs	r7, #0
1000f368:	469c      	mov	ip, r3
1000f36a:	2300      	movs	r3, #0
1000f36c:	4460      	add	r0, ip
1000f36e:	4246      	negs	r6, r0
1000f370:	9301      	str	r3, [sp, #4]
1000f372:	e785      	b.n	1000f280 <__aeabi_dmul+0x4c>
1000f374:	4652      	mov	r2, sl
1000f376:	432a      	orrs	r2, r5
1000f378:	d12c      	bne.n	1000f3d4 <__aeabi_dmul+0x1a0>
1000f37a:	2500      	movs	r5, #0
1000f37c:	2300      	movs	r3, #0
1000f37e:	2202      	movs	r2, #2
1000f380:	e797      	b.n	1000f2b2 <__aeabi_dmul+0x7e>
1000f382:	4652      	mov	r2, sl
1000f384:	432a      	orrs	r2, r5
1000f386:	d021      	beq.n	1000f3cc <__aeabi_dmul+0x198>
1000f388:	2d00      	cmp	r5, #0
1000f38a:	d100      	bne.n	1000f38e <__aeabi_dmul+0x15a>
1000f38c:	e154      	b.n	1000f638 <__aeabi_dmul+0x404>
1000f38e:	0028      	movs	r0, r5
1000f390:	f000 fd8c 	bl	1000feac <__clzsi2>
1000f394:	0003      	movs	r3, r0
1000f396:	3b0b      	subs	r3, #11
1000f398:	2b1c      	cmp	r3, #28
1000f39a:	dd00      	ble.n	1000f39e <__aeabi_dmul+0x16a>
1000f39c:	e146      	b.n	1000f62c <__aeabi_dmul+0x3f8>
1000f39e:	211d      	movs	r1, #29
1000f3a0:	1acb      	subs	r3, r1, r3
1000f3a2:	4651      	mov	r1, sl
1000f3a4:	0002      	movs	r2, r0
1000f3a6:	40d9      	lsrs	r1, r3
1000f3a8:	4653      	mov	r3, sl
1000f3aa:	3a08      	subs	r2, #8
1000f3ac:	4095      	lsls	r5, r2
1000f3ae:	4093      	lsls	r3, r2
1000f3b0:	430d      	orrs	r5, r1
1000f3b2:	4a1b      	ldr	r2, [pc, #108]	; (1000f420 <__aeabi_dmul+0x1ec>)
1000f3b4:	4694      	mov	ip, r2
1000f3b6:	4460      	add	r0, ip
1000f3b8:	4240      	negs	r0, r0
1000f3ba:	2200      	movs	r2, #0
1000f3bc:	e779      	b.n	1000f2b2 <__aeabi_dmul+0x7e>
1000f3be:	2401      	movs	r4, #1
1000f3c0:	2200      	movs	r2, #0
1000f3c2:	400c      	ands	r4, r1
1000f3c4:	4b12      	ldr	r3, [pc, #72]	; (1000f410 <__aeabi_dmul+0x1dc>)
1000f3c6:	2500      	movs	r5, #0
1000f3c8:	4690      	mov	r8, r2
1000f3ca:	e799      	b.n	1000f300 <__aeabi_dmul+0xcc>
1000f3cc:	2500      	movs	r5, #0
1000f3ce:	2300      	movs	r3, #0
1000f3d0:	2201      	movs	r2, #1
1000f3d2:	e76e      	b.n	1000f2b2 <__aeabi_dmul+0x7e>
1000f3d4:	2203      	movs	r2, #3
1000f3d6:	e76c      	b.n	1000f2b2 <__aeabi_dmul+0x7e>
1000f3d8:	2300      	movs	r3, #0
1000f3da:	469b      	mov	fp, r3
1000f3dc:	4698      	mov	r8, r3
1000f3de:	3301      	adds	r3, #1
1000f3e0:	2704      	movs	r7, #4
1000f3e2:	9301      	str	r3, [sp, #4]
1000f3e4:	e74c      	b.n	1000f280 <__aeabi_dmul+0x4c>
1000f3e6:	2303      	movs	r3, #3
1000f3e8:	270c      	movs	r7, #12
1000f3ea:	9301      	str	r3, [sp, #4]
1000f3ec:	e748      	b.n	1000f280 <__aeabi_dmul+0x4c>
1000f3ee:	2300      	movs	r3, #0
1000f3f0:	2580      	movs	r5, #128	; 0x80
1000f3f2:	4698      	mov	r8, r3
1000f3f4:	2400      	movs	r4, #0
1000f3f6:	032d      	lsls	r5, r5, #12
1000f3f8:	4b05      	ldr	r3, [pc, #20]	; (1000f410 <__aeabi_dmul+0x1dc>)
1000f3fa:	e781      	b.n	1000f300 <__aeabi_dmul+0xcc>
1000f3fc:	465d      	mov	r5, fp
1000f3fe:	4643      	mov	r3, r8
1000f400:	9a01      	ldr	r2, [sp, #4]
1000f402:	e76f      	b.n	1000f2e4 <__aeabi_dmul+0xb0>
1000f404:	465d      	mov	r5, fp
1000f406:	4643      	mov	r3, r8
1000f408:	0021      	movs	r1, r4
1000f40a:	9a01      	ldr	r2, [sp, #4]
1000f40c:	e76a      	b.n	1000f2e4 <__aeabi_dmul+0xb0>
1000f40e:	46c0      	nop			; (mov r8, r8)
1000f410:	000007ff 	.word	0x000007ff
1000f414:	fffffc01 	.word	0xfffffc01
1000f418:	10011fb8 	.word	0x10011fb8
1000f41c:	800fffff 	.word	0x800fffff
1000f420:	000003f3 	.word	0x000003f3
1000f424:	4642      	mov	r2, r8
1000f426:	0c12      	lsrs	r2, r2, #16
1000f428:	4691      	mov	r9, r2
1000f42a:	0c1a      	lsrs	r2, r3, #16
1000f42c:	4694      	mov	ip, r2
1000f42e:	4642      	mov	r2, r8
1000f430:	0417      	lsls	r7, r2, #16
1000f432:	464a      	mov	r2, r9
1000f434:	041b      	lsls	r3, r3, #16
1000f436:	0c1b      	lsrs	r3, r3, #16
1000f438:	435a      	muls	r2, r3
1000f43a:	4660      	mov	r0, ip
1000f43c:	4690      	mov	r8, r2
1000f43e:	464a      	mov	r2, r9
1000f440:	4342      	muls	r2, r0
1000f442:	0010      	movs	r0, r2
1000f444:	9203      	str	r2, [sp, #12]
1000f446:	4662      	mov	r2, ip
1000f448:	001c      	movs	r4, r3
1000f44a:	0c3f      	lsrs	r7, r7, #16
1000f44c:	437a      	muls	r2, r7
1000f44e:	437c      	muls	r4, r7
1000f450:	4442      	add	r2, r8
1000f452:	9201      	str	r2, [sp, #4]
1000f454:	0c22      	lsrs	r2, r4, #16
1000f456:	4692      	mov	sl, r2
1000f458:	9a01      	ldr	r2, [sp, #4]
1000f45a:	4452      	add	r2, sl
1000f45c:	4590      	cmp	r8, r2
1000f45e:	d906      	bls.n	1000f46e <__aeabi_dmul+0x23a>
1000f460:	4682      	mov	sl, r0
1000f462:	2080      	movs	r0, #128	; 0x80
1000f464:	0240      	lsls	r0, r0, #9
1000f466:	4680      	mov	r8, r0
1000f468:	44c2      	add	sl, r8
1000f46a:	4650      	mov	r0, sl
1000f46c:	9003      	str	r0, [sp, #12]
1000f46e:	0c10      	lsrs	r0, r2, #16
1000f470:	9004      	str	r0, [sp, #16]
1000f472:	4648      	mov	r0, r9
1000f474:	0424      	lsls	r4, r4, #16
1000f476:	0c24      	lsrs	r4, r4, #16
1000f478:	0412      	lsls	r2, r2, #16
1000f47a:	1912      	adds	r2, r2, r4
1000f47c:	9205      	str	r2, [sp, #20]
1000f47e:	0c2a      	lsrs	r2, r5, #16
1000f480:	042d      	lsls	r5, r5, #16
1000f482:	0c2d      	lsrs	r5, r5, #16
1000f484:	4368      	muls	r0, r5
1000f486:	002c      	movs	r4, r5
1000f488:	4682      	mov	sl, r0
1000f48a:	4648      	mov	r0, r9
1000f48c:	437c      	muls	r4, r7
1000f48e:	4350      	muls	r0, r2
1000f490:	4681      	mov	r9, r0
1000f492:	0c20      	lsrs	r0, r4, #16
1000f494:	4680      	mov	r8, r0
1000f496:	4357      	muls	r7, r2
1000f498:	4457      	add	r7, sl
1000f49a:	4447      	add	r7, r8
1000f49c:	45ba      	cmp	sl, r7
1000f49e:	d903      	bls.n	1000f4a8 <__aeabi_dmul+0x274>
1000f4a0:	2080      	movs	r0, #128	; 0x80
1000f4a2:	0240      	lsls	r0, r0, #9
1000f4a4:	4680      	mov	r8, r0
1000f4a6:	44c1      	add	r9, r8
1000f4a8:	0c38      	lsrs	r0, r7, #16
1000f4aa:	043f      	lsls	r7, r7, #16
1000f4ac:	46b8      	mov	r8, r7
1000f4ae:	4448      	add	r0, r9
1000f4b0:	0424      	lsls	r4, r4, #16
1000f4b2:	0c24      	lsrs	r4, r4, #16
1000f4b4:	9001      	str	r0, [sp, #4]
1000f4b6:	9804      	ldr	r0, [sp, #16]
1000f4b8:	44a0      	add	r8, r4
1000f4ba:	4440      	add	r0, r8
1000f4bc:	9004      	str	r0, [sp, #16]
1000f4be:	4658      	mov	r0, fp
1000f4c0:	0c00      	lsrs	r0, r0, #16
1000f4c2:	4681      	mov	r9, r0
1000f4c4:	4658      	mov	r0, fp
1000f4c6:	0404      	lsls	r4, r0, #16
1000f4c8:	0c20      	lsrs	r0, r4, #16
1000f4ca:	4682      	mov	sl, r0
1000f4cc:	0007      	movs	r7, r0
1000f4ce:	4648      	mov	r0, r9
1000f4d0:	435f      	muls	r7, r3
1000f4d2:	464c      	mov	r4, r9
1000f4d4:	4343      	muls	r3, r0
1000f4d6:	4660      	mov	r0, ip
1000f4d8:	4360      	muls	r0, r4
1000f4da:	4664      	mov	r4, ip
1000f4dc:	4683      	mov	fp, r0
1000f4de:	4650      	mov	r0, sl
1000f4e0:	4344      	muls	r4, r0
1000f4e2:	0c38      	lsrs	r0, r7, #16
1000f4e4:	4684      	mov	ip, r0
1000f4e6:	18e4      	adds	r4, r4, r3
1000f4e8:	4464      	add	r4, ip
1000f4ea:	42a3      	cmp	r3, r4
1000f4ec:	d903      	bls.n	1000f4f6 <__aeabi_dmul+0x2c2>
1000f4ee:	2380      	movs	r3, #128	; 0x80
1000f4f0:	025b      	lsls	r3, r3, #9
1000f4f2:	469c      	mov	ip, r3
1000f4f4:	44e3      	add	fp, ip
1000f4f6:	4648      	mov	r0, r9
1000f4f8:	043f      	lsls	r7, r7, #16
1000f4fa:	0c23      	lsrs	r3, r4, #16
1000f4fc:	0c3f      	lsrs	r7, r7, #16
1000f4fe:	0424      	lsls	r4, r4, #16
1000f500:	19e4      	adds	r4, r4, r7
1000f502:	4657      	mov	r7, sl
1000f504:	4368      	muls	r0, r5
1000f506:	436f      	muls	r7, r5
1000f508:	4684      	mov	ip, r0
1000f50a:	464d      	mov	r5, r9
1000f50c:	4650      	mov	r0, sl
1000f50e:	4355      	muls	r5, r2
1000f510:	4342      	muls	r2, r0
1000f512:	0c38      	lsrs	r0, r7, #16
1000f514:	4681      	mov	r9, r0
1000f516:	4462      	add	r2, ip
1000f518:	444a      	add	r2, r9
1000f51a:	445b      	add	r3, fp
1000f51c:	4594      	cmp	ip, r2
1000f51e:	d903      	bls.n	1000f528 <__aeabi_dmul+0x2f4>
1000f520:	2080      	movs	r0, #128	; 0x80
1000f522:	0240      	lsls	r0, r0, #9
1000f524:	4684      	mov	ip, r0
1000f526:	4465      	add	r5, ip
1000f528:	9803      	ldr	r0, [sp, #12]
1000f52a:	043f      	lsls	r7, r7, #16
1000f52c:	4683      	mov	fp, r0
1000f52e:	9804      	ldr	r0, [sp, #16]
1000f530:	0c3f      	lsrs	r7, r7, #16
1000f532:	4684      	mov	ip, r0
1000f534:	44e3      	add	fp, ip
1000f536:	45c3      	cmp	fp, r8
1000f538:	4180      	sbcs	r0, r0
1000f53a:	4240      	negs	r0, r0
1000f53c:	4682      	mov	sl, r0
1000f53e:	0410      	lsls	r0, r2, #16
1000f540:	4684      	mov	ip, r0
1000f542:	9801      	ldr	r0, [sp, #4]
1000f544:	4467      	add	r7, ip
1000f546:	4684      	mov	ip, r0
1000f548:	4467      	add	r7, ip
1000f54a:	44a3      	add	fp, r4
1000f54c:	46bc      	mov	ip, r7
1000f54e:	45a3      	cmp	fp, r4
1000f550:	41a4      	sbcs	r4, r4
1000f552:	4699      	mov	r9, r3
1000f554:	44d4      	add	ip, sl
1000f556:	4264      	negs	r4, r4
1000f558:	4287      	cmp	r7, r0
1000f55a:	41bf      	sbcs	r7, r7
1000f55c:	45d4      	cmp	ip, sl
1000f55e:	4180      	sbcs	r0, r0
1000f560:	44e1      	add	r9, ip
1000f562:	46a0      	mov	r8, r4
1000f564:	4599      	cmp	r9, r3
1000f566:	419b      	sbcs	r3, r3
1000f568:	427f      	negs	r7, r7
1000f56a:	4240      	negs	r0, r0
1000f56c:	44c8      	add	r8, r9
1000f56e:	4307      	orrs	r7, r0
1000f570:	0c12      	lsrs	r2, r2, #16
1000f572:	18ba      	adds	r2, r7, r2
1000f574:	45a0      	cmp	r8, r4
1000f576:	41a4      	sbcs	r4, r4
1000f578:	425f      	negs	r7, r3
1000f57a:	003b      	movs	r3, r7
1000f57c:	4264      	negs	r4, r4
1000f57e:	4323      	orrs	r3, r4
1000f580:	18d7      	adds	r7, r2, r3
1000f582:	4643      	mov	r3, r8
1000f584:	197d      	adds	r5, r7, r5
1000f586:	0ddb      	lsrs	r3, r3, #23
1000f588:	026d      	lsls	r5, r5, #9
1000f58a:	431d      	orrs	r5, r3
1000f58c:	465b      	mov	r3, fp
1000f58e:	025a      	lsls	r2, r3, #9
1000f590:	9b05      	ldr	r3, [sp, #20]
1000f592:	431a      	orrs	r2, r3
1000f594:	1e53      	subs	r3, r2, #1
1000f596:	419a      	sbcs	r2, r3
1000f598:	465b      	mov	r3, fp
1000f59a:	0ddb      	lsrs	r3, r3, #23
1000f59c:	431a      	orrs	r2, r3
1000f59e:	4643      	mov	r3, r8
1000f5a0:	025b      	lsls	r3, r3, #9
1000f5a2:	4313      	orrs	r3, r2
1000f5a4:	01ea      	lsls	r2, r5, #7
1000f5a6:	d507      	bpl.n	1000f5b8 <__aeabi_dmul+0x384>
1000f5a8:	2201      	movs	r2, #1
1000f5aa:	085c      	lsrs	r4, r3, #1
1000f5ac:	4013      	ands	r3, r2
1000f5ae:	4323      	orrs	r3, r4
1000f5b0:	07ea      	lsls	r2, r5, #31
1000f5b2:	9e02      	ldr	r6, [sp, #8]
1000f5b4:	4313      	orrs	r3, r2
1000f5b6:	086d      	lsrs	r5, r5, #1
1000f5b8:	4a57      	ldr	r2, [pc, #348]	; (1000f718 <__aeabi_dmul+0x4e4>)
1000f5ba:	18b2      	adds	r2, r6, r2
1000f5bc:	2a00      	cmp	r2, #0
1000f5be:	dd4b      	ble.n	1000f658 <__aeabi_dmul+0x424>
1000f5c0:	0758      	lsls	r0, r3, #29
1000f5c2:	d009      	beq.n	1000f5d8 <__aeabi_dmul+0x3a4>
1000f5c4:	200f      	movs	r0, #15
1000f5c6:	4018      	ands	r0, r3
1000f5c8:	2804      	cmp	r0, #4
1000f5ca:	d005      	beq.n	1000f5d8 <__aeabi_dmul+0x3a4>
1000f5cc:	1d18      	adds	r0, r3, #4
1000f5ce:	4298      	cmp	r0, r3
1000f5d0:	419b      	sbcs	r3, r3
1000f5d2:	425b      	negs	r3, r3
1000f5d4:	18ed      	adds	r5, r5, r3
1000f5d6:	0003      	movs	r3, r0
1000f5d8:	01e8      	lsls	r0, r5, #7
1000f5da:	d504      	bpl.n	1000f5e6 <__aeabi_dmul+0x3b2>
1000f5dc:	4a4f      	ldr	r2, [pc, #316]	; (1000f71c <__aeabi_dmul+0x4e8>)
1000f5de:	4015      	ands	r5, r2
1000f5e0:	2280      	movs	r2, #128	; 0x80
1000f5e2:	00d2      	lsls	r2, r2, #3
1000f5e4:	18b2      	adds	r2, r6, r2
1000f5e6:	484e      	ldr	r0, [pc, #312]	; (1000f720 <__aeabi_dmul+0x4ec>)
1000f5e8:	4282      	cmp	r2, r0
1000f5ea:	dd00      	ble.n	1000f5ee <__aeabi_dmul+0x3ba>
1000f5ec:	e6e7      	b.n	1000f3be <__aeabi_dmul+0x18a>
1000f5ee:	2401      	movs	r4, #1
1000f5f0:	08db      	lsrs	r3, r3, #3
1000f5f2:	0768      	lsls	r0, r5, #29
1000f5f4:	4318      	orrs	r0, r3
1000f5f6:	026d      	lsls	r5, r5, #9
1000f5f8:	0553      	lsls	r3, r2, #21
1000f5fa:	4680      	mov	r8, r0
1000f5fc:	0b2d      	lsrs	r5, r5, #12
1000f5fe:	0d5b      	lsrs	r3, r3, #21
1000f600:	400c      	ands	r4, r1
1000f602:	e67d      	b.n	1000f300 <__aeabi_dmul+0xcc>
1000f604:	2280      	movs	r2, #128	; 0x80
1000f606:	4659      	mov	r1, fp
1000f608:	0312      	lsls	r2, r2, #12
1000f60a:	4211      	tst	r1, r2
1000f60c:	d008      	beq.n	1000f620 <__aeabi_dmul+0x3ec>
1000f60e:	4215      	tst	r5, r2
1000f610:	d106      	bne.n	1000f620 <__aeabi_dmul+0x3ec>
1000f612:	4315      	orrs	r5, r2
1000f614:	032d      	lsls	r5, r5, #12
1000f616:	4698      	mov	r8, r3
1000f618:	0b2d      	lsrs	r5, r5, #12
1000f61a:	464c      	mov	r4, r9
1000f61c:	4b41      	ldr	r3, [pc, #260]	; (1000f724 <__aeabi_dmul+0x4f0>)
1000f61e:	e66f      	b.n	1000f300 <__aeabi_dmul+0xcc>
1000f620:	465d      	mov	r5, fp
1000f622:	4315      	orrs	r5, r2
1000f624:	032d      	lsls	r5, r5, #12
1000f626:	0b2d      	lsrs	r5, r5, #12
1000f628:	4b3e      	ldr	r3, [pc, #248]	; (1000f724 <__aeabi_dmul+0x4f0>)
1000f62a:	e669      	b.n	1000f300 <__aeabi_dmul+0xcc>
1000f62c:	0003      	movs	r3, r0
1000f62e:	4655      	mov	r5, sl
1000f630:	3b28      	subs	r3, #40	; 0x28
1000f632:	409d      	lsls	r5, r3
1000f634:	2300      	movs	r3, #0
1000f636:	e6bc      	b.n	1000f3b2 <__aeabi_dmul+0x17e>
1000f638:	4650      	mov	r0, sl
1000f63a:	f000 fc37 	bl	1000feac <__clzsi2>
1000f63e:	3020      	adds	r0, #32
1000f640:	e6a8      	b.n	1000f394 <__aeabi_dmul+0x160>
1000f642:	0003      	movs	r3, r0
1000f644:	3b28      	subs	r3, #40	; 0x28
1000f646:	409f      	lsls	r7, r3
1000f648:	2300      	movs	r3, #0
1000f64a:	46bb      	mov	fp, r7
1000f64c:	4698      	mov	r8, r3
1000f64e:	e689      	b.n	1000f364 <__aeabi_dmul+0x130>
1000f650:	f000 fc2c 	bl	1000feac <__clzsi2>
1000f654:	3020      	adds	r0, #32
1000f656:	e673      	b.n	1000f340 <__aeabi_dmul+0x10c>
1000f658:	2401      	movs	r4, #1
1000f65a:	1aa6      	subs	r6, r4, r2
1000f65c:	2e38      	cmp	r6, #56	; 0x38
1000f65e:	dd07      	ble.n	1000f670 <__aeabi_dmul+0x43c>
1000f660:	2200      	movs	r2, #0
1000f662:	400c      	ands	r4, r1
1000f664:	2300      	movs	r3, #0
1000f666:	2500      	movs	r5, #0
1000f668:	4690      	mov	r8, r2
1000f66a:	e649      	b.n	1000f300 <__aeabi_dmul+0xcc>
1000f66c:	9e02      	ldr	r6, [sp, #8]
1000f66e:	e7a3      	b.n	1000f5b8 <__aeabi_dmul+0x384>
1000f670:	2e1f      	cmp	r6, #31
1000f672:	dc20      	bgt.n	1000f6b6 <__aeabi_dmul+0x482>
1000f674:	2220      	movs	r2, #32
1000f676:	002c      	movs	r4, r5
1000f678:	0018      	movs	r0, r3
1000f67a:	1b92      	subs	r2, r2, r6
1000f67c:	40f0      	lsrs	r0, r6
1000f67e:	4094      	lsls	r4, r2
1000f680:	4093      	lsls	r3, r2
1000f682:	4304      	orrs	r4, r0
1000f684:	1e58      	subs	r0, r3, #1
1000f686:	4183      	sbcs	r3, r0
1000f688:	431c      	orrs	r4, r3
1000f68a:	40f5      	lsrs	r5, r6
1000f68c:	0763      	lsls	r3, r4, #29
1000f68e:	d009      	beq.n	1000f6a4 <__aeabi_dmul+0x470>
1000f690:	230f      	movs	r3, #15
1000f692:	4023      	ands	r3, r4
1000f694:	2b04      	cmp	r3, #4
1000f696:	d005      	beq.n	1000f6a4 <__aeabi_dmul+0x470>
1000f698:	0023      	movs	r3, r4
1000f69a:	1d1c      	adds	r4, r3, #4
1000f69c:	429c      	cmp	r4, r3
1000f69e:	4192      	sbcs	r2, r2
1000f6a0:	4252      	negs	r2, r2
1000f6a2:	18ad      	adds	r5, r5, r2
1000f6a4:	022b      	lsls	r3, r5, #8
1000f6a6:	d51f      	bpl.n	1000f6e8 <__aeabi_dmul+0x4b4>
1000f6a8:	2401      	movs	r4, #1
1000f6aa:	2200      	movs	r2, #0
1000f6ac:	400c      	ands	r4, r1
1000f6ae:	2301      	movs	r3, #1
1000f6b0:	2500      	movs	r5, #0
1000f6b2:	4690      	mov	r8, r2
1000f6b4:	e624      	b.n	1000f300 <__aeabi_dmul+0xcc>
1000f6b6:	201f      	movs	r0, #31
1000f6b8:	002c      	movs	r4, r5
1000f6ba:	4240      	negs	r0, r0
1000f6bc:	1a82      	subs	r2, r0, r2
1000f6be:	40d4      	lsrs	r4, r2
1000f6c0:	2e20      	cmp	r6, #32
1000f6c2:	d01c      	beq.n	1000f6fe <__aeabi_dmul+0x4ca>
1000f6c4:	2240      	movs	r2, #64	; 0x40
1000f6c6:	1b96      	subs	r6, r2, r6
1000f6c8:	40b5      	lsls	r5, r6
1000f6ca:	432b      	orrs	r3, r5
1000f6cc:	1e58      	subs	r0, r3, #1
1000f6ce:	4183      	sbcs	r3, r0
1000f6d0:	2007      	movs	r0, #7
1000f6d2:	4323      	orrs	r3, r4
1000f6d4:	4018      	ands	r0, r3
1000f6d6:	2500      	movs	r5, #0
1000f6d8:	2800      	cmp	r0, #0
1000f6da:	d009      	beq.n	1000f6f0 <__aeabi_dmul+0x4bc>
1000f6dc:	220f      	movs	r2, #15
1000f6de:	2500      	movs	r5, #0
1000f6e0:	401a      	ands	r2, r3
1000f6e2:	001c      	movs	r4, r3
1000f6e4:	2a04      	cmp	r2, #4
1000f6e6:	d1d8      	bne.n	1000f69a <__aeabi_dmul+0x466>
1000f6e8:	0023      	movs	r3, r4
1000f6ea:	0768      	lsls	r0, r5, #29
1000f6ec:	026d      	lsls	r5, r5, #9
1000f6ee:	0b2d      	lsrs	r5, r5, #12
1000f6f0:	2401      	movs	r4, #1
1000f6f2:	08db      	lsrs	r3, r3, #3
1000f6f4:	4303      	orrs	r3, r0
1000f6f6:	4698      	mov	r8, r3
1000f6f8:	400c      	ands	r4, r1
1000f6fa:	2300      	movs	r3, #0
1000f6fc:	e600      	b.n	1000f300 <__aeabi_dmul+0xcc>
1000f6fe:	2500      	movs	r5, #0
1000f700:	e7e3      	b.n	1000f6ca <__aeabi_dmul+0x496>
1000f702:	2280      	movs	r2, #128	; 0x80
1000f704:	2401      	movs	r4, #1
1000f706:	0312      	lsls	r2, r2, #12
1000f708:	4315      	orrs	r5, r2
1000f70a:	032d      	lsls	r5, r5, #12
1000f70c:	4698      	mov	r8, r3
1000f70e:	0b2d      	lsrs	r5, r5, #12
1000f710:	400c      	ands	r4, r1
1000f712:	4b04      	ldr	r3, [pc, #16]	; (1000f724 <__aeabi_dmul+0x4f0>)
1000f714:	e5f4      	b.n	1000f300 <__aeabi_dmul+0xcc>
1000f716:	46c0      	nop			; (mov r8, r8)
1000f718:	000003ff 	.word	0x000003ff
1000f71c:	feffffff 	.word	0xfeffffff
1000f720:	000007fe 	.word	0x000007fe
1000f724:	000007ff 	.word	0x000007ff

1000f728 <__aeabi_dsub>:
1000f728:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f72a:	4657      	mov	r7, sl
1000f72c:	464e      	mov	r6, r9
1000f72e:	4645      	mov	r5, r8
1000f730:	b4e0      	push	{r5, r6, r7}
1000f732:	000e      	movs	r6, r1
1000f734:	0011      	movs	r1, r2
1000f736:	0ff2      	lsrs	r2, r6, #31
1000f738:	4692      	mov	sl, r2
1000f73a:	00c5      	lsls	r5, r0, #3
1000f73c:	0f42      	lsrs	r2, r0, #29
1000f73e:	0318      	lsls	r0, r3, #12
1000f740:	0337      	lsls	r7, r6, #12
1000f742:	0074      	lsls	r4, r6, #1
1000f744:	0a40      	lsrs	r0, r0, #9
1000f746:	0f4e      	lsrs	r6, r1, #29
1000f748:	0a7f      	lsrs	r7, r7, #9
1000f74a:	4330      	orrs	r0, r6
1000f74c:	4ecf      	ldr	r6, [pc, #828]	; (1000fa8c <__aeabi_dsub+0x364>)
1000f74e:	4317      	orrs	r7, r2
1000f750:	005a      	lsls	r2, r3, #1
1000f752:	0d64      	lsrs	r4, r4, #21
1000f754:	0d52      	lsrs	r2, r2, #21
1000f756:	0fdb      	lsrs	r3, r3, #31
1000f758:	00c9      	lsls	r1, r1, #3
1000f75a:	42b2      	cmp	r2, r6
1000f75c:	d100      	bne.n	1000f760 <__aeabi_dsub+0x38>
1000f75e:	e0e5      	b.n	1000f92c <__aeabi_dsub+0x204>
1000f760:	2601      	movs	r6, #1
1000f762:	4073      	eors	r3, r6
1000f764:	1aa6      	subs	r6, r4, r2
1000f766:	46b4      	mov	ip, r6
1000f768:	4553      	cmp	r3, sl
1000f76a:	d100      	bne.n	1000f76e <__aeabi_dsub+0x46>
1000f76c:	e0af      	b.n	1000f8ce <__aeabi_dsub+0x1a6>
1000f76e:	2e00      	cmp	r6, #0
1000f770:	dc00      	bgt.n	1000f774 <__aeabi_dsub+0x4c>
1000f772:	e10d      	b.n	1000f990 <__aeabi_dsub+0x268>
1000f774:	2a00      	cmp	r2, #0
1000f776:	d13a      	bne.n	1000f7ee <__aeabi_dsub+0xc6>
1000f778:	0003      	movs	r3, r0
1000f77a:	430b      	orrs	r3, r1
1000f77c:	d000      	beq.n	1000f780 <__aeabi_dsub+0x58>
1000f77e:	e0e4      	b.n	1000f94a <__aeabi_dsub+0x222>
1000f780:	076b      	lsls	r3, r5, #29
1000f782:	d009      	beq.n	1000f798 <__aeabi_dsub+0x70>
1000f784:	230f      	movs	r3, #15
1000f786:	402b      	ands	r3, r5
1000f788:	2b04      	cmp	r3, #4
1000f78a:	d005      	beq.n	1000f798 <__aeabi_dsub+0x70>
1000f78c:	1d2b      	adds	r3, r5, #4
1000f78e:	42ab      	cmp	r3, r5
1000f790:	41ad      	sbcs	r5, r5
1000f792:	426d      	negs	r5, r5
1000f794:	197f      	adds	r7, r7, r5
1000f796:	001d      	movs	r5, r3
1000f798:	023b      	lsls	r3, r7, #8
1000f79a:	d400      	bmi.n	1000f79e <__aeabi_dsub+0x76>
1000f79c:	e088      	b.n	1000f8b0 <__aeabi_dsub+0x188>
1000f79e:	4bbb      	ldr	r3, [pc, #748]	; (1000fa8c <__aeabi_dsub+0x364>)
1000f7a0:	3401      	adds	r4, #1
1000f7a2:	429c      	cmp	r4, r3
1000f7a4:	d100      	bne.n	1000f7a8 <__aeabi_dsub+0x80>
1000f7a6:	e110      	b.n	1000f9ca <__aeabi_dsub+0x2a2>
1000f7a8:	003a      	movs	r2, r7
1000f7aa:	4bb9      	ldr	r3, [pc, #740]	; (1000fa90 <__aeabi_dsub+0x368>)
1000f7ac:	4651      	mov	r1, sl
1000f7ae:	401a      	ands	r2, r3
1000f7b0:	2301      	movs	r3, #1
1000f7b2:	0750      	lsls	r0, r2, #29
1000f7b4:	08ed      	lsrs	r5, r5, #3
1000f7b6:	0252      	lsls	r2, r2, #9
1000f7b8:	0564      	lsls	r4, r4, #21
1000f7ba:	4305      	orrs	r5, r0
1000f7bc:	0b12      	lsrs	r2, r2, #12
1000f7be:	0d64      	lsrs	r4, r4, #21
1000f7c0:	400b      	ands	r3, r1
1000f7c2:	2100      	movs	r1, #0
1000f7c4:	0028      	movs	r0, r5
1000f7c6:	0312      	lsls	r2, r2, #12
1000f7c8:	0d0d      	lsrs	r5, r1, #20
1000f7ca:	0b12      	lsrs	r2, r2, #12
1000f7cc:	0564      	lsls	r4, r4, #21
1000f7ce:	052d      	lsls	r5, r5, #20
1000f7d0:	4315      	orrs	r5, r2
1000f7d2:	0862      	lsrs	r2, r4, #1
1000f7d4:	4caf      	ldr	r4, [pc, #700]	; (1000fa94 <__aeabi_dsub+0x36c>)
1000f7d6:	07db      	lsls	r3, r3, #31
1000f7d8:	402c      	ands	r4, r5
1000f7da:	4314      	orrs	r4, r2
1000f7dc:	0064      	lsls	r4, r4, #1
1000f7de:	0864      	lsrs	r4, r4, #1
1000f7e0:	431c      	orrs	r4, r3
1000f7e2:	0021      	movs	r1, r4
1000f7e4:	bc1c      	pop	{r2, r3, r4}
1000f7e6:	4690      	mov	r8, r2
1000f7e8:	4699      	mov	r9, r3
1000f7ea:	46a2      	mov	sl, r4
1000f7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f7ee:	4ba7      	ldr	r3, [pc, #668]	; (1000fa8c <__aeabi_dsub+0x364>)
1000f7f0:	429c      	cmp	r4, r3
1000f7f2:	d0c5      	beq.n	1000f780 <__aeabi_dsub+0x58>
1000f7f4:	2380      	movs	r3, #128	; 0x80
1000f7f6:	041b      	lsls	r3, r3, #16
1000f7f8:	4318      	orrs	r0, r3
1000f7fa:	4663      	mov	r3, ip
1000f7fc:	2b38      	cmp	r3, #56	; 0x38
1000f7fe:	dd00      	ble.n	1000f802 <__aeabi_dsub+0xda>
1000f800:	e0fd      	b.n	1000f9fe <__aeabi_dsub+0x2d6>
1000f802:	2b1f      	cmp	r3, #31
1000f804:	dd00      	ble.n	1000f808 <__aeabi_dsub+0xe0>
1000f806:	e130      	b.n	1000fa6a <__aeabi_dsub+0x342>
1000f808:	4662      	mov	r2, ip
1000f80a:	2320      	movs	r3, #32
1000f80c:	1a9b      	subs	r3, r3, r2
1000f80e:	0002      	movs	r2, r0
1000f810:	409a      	lsls	r2, r3
1000f812:	4666      	mov	r6, ip
1000f814:	4690      	mov	r8, r2
1000f816:	000a      	movs	r2, r1
1000f818:	4099      	lsls	r1, r3
1000f81a:	40f2      	lsrs	r2, r6
1000f81c:	4646      	mov	r6, r8
1000f81e:	1e4b      	subs	r3, r1, #1
1000f820:	4199      	sbcs	r1, r3
1000f822:	4332      	orrs	r2, r6
1000f824:	4311      	orrs	r1, r2
1000f826:	4663      	mov	r3, ip
1000f828:	0002      	movs	r2, r0
1000f82a:	40da      	lsrs	r2, r3
1000f82c:	1a69      	subs	r1, r5, r1
1000f82e:	428d      	cmp	r5, r1
1000f830:	419b      	sbcs	r3, r3
1000f832:	000d      	movs	r5, r1
1000f834:	1aba      	subs	r2, r7, r2
1000f836:	425b      	negs	r3, r3
1000f838:	1ad7      	subs	r7, r2, r3
1000f83a:	023b      	lsls	r3, r7, #8
1000f83c:	d535      	bpl.n	1000f8aa <__aeabi_dsub+0x182>
1000f83e:	027a      	lsls	r2, r7, #9
1000f840:	0a53      	lsrs	r3, r2, #9
1000f842:	4698      	mov	r8, r3
1000f844:	4643      	mov	r3, r8
1000f846:	2b00      	cmp	r3, #0
1000f848:	d100      	bne.n	1000f84c <__aeabi_dsub+0x124>
1000f84a:	e0c4      	b.n	1000f9d6 <__aeabi_dsub+0x2ae>
1000f84c:	4640      	mov	r0, r8
1000f84e:	f000 fb2d 	bl	1000feac <__clzsi2>
1000f852:	0003      	movs	r3, r0
1000f854:	3b08      	subs	r3, #8
1000f856:	2b1f      	cmp	r3, #31
1000f858:	dd00      	ble.n	1000f85c <__aeabi_dsub+0x134>
1000f85a:	e0c5      	b.n	1000f9e8 <__aeabi_dsub+0x2c0>
1000f85c:	2220      	movs	r2, #32
1000f85e:	0029      	movs	r1, r5
1000f860:	1ad2      	subs	r2, r2, r3
1000f862:	4647      	mov	r7, r8
1000f864:	40d1      	lsrs	r1, r2
1000f866:	409f      	lsls	r7, r3
1000f868:	000a      	movs	r2, r1
1000f86a:	409d      	lsls	r5, r3
1000f86c:	433a      	orrs	r2, r7
1000f86e:	429c      	cmp	r4, r3
1000f870:	dd00      	ble.n	1000f874 <__aeabi_dsub+0x14c>
1000f872:	e0c0      	b.n	1000f9f6 <__aeabi_dsub+0x2ce>
1000f874:	1b1c      	subs	r4, r3, r4
1000f876:	1c63      	adds	r3, r4, #1
1000f878:	2b1f      	cmp	r3, #31
1000f87a:	dd00      	ble.n	1000f87e <__aeabi_dsub+0x156>
1000f87c:	e0e4      	b.n	1000fa48 <__aeabi_dsub+0x320>
1000f87e:	2120      	movs	r1, #32
1000f880:	0014      	movs	r4, r2
1000f882:	0028      	movs	r0, r5
1000f884:	1ac9      	subs	r1, r1, r3
1000f886:	40d8      	lsrs	r0, r3
1000f888:	408c      	lsls	r4, r1
1000f88a:	408d      	lsls	r5, r1
1000f88c:	4304      	orrs	r4, r0
1000f88e:	40da      	lsrs	r2, r3
1000f890:	1e68      	subs	r0, r5, #1
1000f892:	4185      	sbcs	r5, r0
1000f894:	0017      	movs	r7, r2
1000f896:	4325      	orrs	r5, r4
1000f898:	2400      	movs	r4, #0
1000f89a:	e771      	b.n	1000f780 <__aeabi_dsub+0x58>
1000f89c:	4642      	mov	r2, r8
1000f89e:	4663      	mov	r3, ip
1000f8a0:	431a      	orrs	r2, r3
1000f8a2:	d100      	bne.n	1000f8a6 <__aeabi_dsub+0x17e>
1000f8a4:	e24c      	b.n	1000fd40 <__aeabi_dsub+0x618>
1000f8a6:	4667      	mov	r7, ip
1000f8a8:	4645      	mov	r5, r8
1000f8aa:	076b      	lsls	r3, r5, #29
1000f8ac:	d000      	beq.n	1000f8b0 <__aeabi_dsub+0x188>
1000f8ae:	e769      	b.n	1000f784 <__aeabi_dsub+0x5c>
1000f8b0:	2301      	movs	r3, #1
1000f8b2:	4651      	mov	r1, sl
1000f8b4:	0778      	lsls	r0, r7, #29
1000f8b6:	08ed      	lsrs	r5, r5, #3
1000f8b8:	08fa      	lsrs	r2, r7, #3
1000f8ba:	400b      	ands	r3, r1
1000f8bc:	4305      	orrs	r5, r0
1000f8be:	4973      	ldr	r1, [pc, #460]	; (1000fa8c <__aeabi_dsub+0x364>)
1000f8c0:	428c      	cmp	r4, r1
1000f8c2:	d038      	beq.n	1000f936 <__aeabi_dsub+0x20e>
1000f8c4:	0312      	lsls	r2, r2, #12
1000f8c6:	0564      	lsls	r4, r4, #21
1000f8c8:	0b12      	lsrs	r2, r2, #12
1000f8ca:	0d64      	lsrs	r4, r4, #21
1000f8cc:	e779      	b.n	1000f7c2 <__aeabi_dsub+0x9a>
1000f8ce:	2e00      	cmp	r6, #0
1000f8d0:	dc00      	bgt.n	1000f8d4 <__aeabi_dsub+0x1ac>
1000f8d2:	e09a      	b.n	1000fa0a <__aeabi_dsub+0x2e2>
1000f8d4:	2a00      	cmp	r2, #0
1000f8d6:	d047      	beq.n	1000f968 <__aeabi_dsub+0x240>
1000f8d8:	4a6c      	ldr	r2, [pc, #432]	; (1000fa8c <__aeabi_dsub+0x364>)
1000f8da:	4294      	cmp	r4, r2
1000f8dc:	d100      	bne.n	1000f8e0 <__aeabi_dsub+0x1b8>
1000f8de:	e74f      	b.n	1000f780 <__aeabi_dsub+0x58>
1000f8e0:	2280      	movs	r2, #128	; 0x80
1000f8e2:	0412      	lsls	r2, r2, #16
1000f8e4:	4310      	orrs	r0, r2
1000f8e6:	4662      	mov	r2, ip
1000f8e8:	2a38      	cmp	r2, #56	; 0x38
1000f8ea:	dc00      	bgt.n	1000f8ee <__aeabi_dsub+0x1c6>
1000f8ec:	e108      	b.n	1000fb00 <__aeabi_dsub+0x3d8>
1000f8ee:	4301      	orrs	r1, r0
1000f8f0:	1e48      	subs	r0, r1, #1
1000f8f2:	4181      	sbcs	r1, r0
1000f8f4:	2200      	movs	r2, #0
1000f8f6:	b2c9      	uxtb	r1, r1
1000f8f8:	1949      	adds	r1, r1, r5
1000f8fa:	19d2      	adds	r2, r2, r7
1000f8fc:	42a9      	cmp	r1, r5
1000f8fe:	41bf      	sbcs	r7, r7
1000f900:	000d      	movs	r5, r1
1000f902:	427f      	negs	r7, r7
1000f904:	18bf      	adds	r7, r7, r2
1000f906:	023a      	lsls	r2, r7, #8
1000f908:	d400      	bmi.n	1000f90c <__aeabi_dsub+0x1e4>
1000f90a:	e142      	b.n	1000fb92 <__aeabi_dsub+0x46a>
1000f90c:	4a5f      	ldr	r2, [pc, #380]	; (1000fa8c <__aeabi_dsub+0x364>)
1000f90e:	3401      	adds	r4, #1
1000f910:	4294      	cmp	r4, r2
1000f912:	d100      	bne.n	1000f916 <__aeabi_dsub+0x1ee>
1000f914:	e14e      	b.n	1000fbb4 <__aeabi_dsub+0x48c>
1000f916:	2001      	movs	r0, #1
1000f918:	4a5d      	ldr	r2, [pc, #372]	; (1000fa90 <__aeabi_dsub+0x368>)
1000f91a:	0869      	lsrs	r1, r5, #1
1000f91c:	403a      	ands	r2, r7
1000f91e:	4028      	ands	r0, r5
1000f920:	4308      	orrs	r0, r1
1000f922:	07d5      	lsls	r5, r2, #31
1000f924:	4305      	orrs	r5, r0
1000f926:	0857      	lsrs	r7, r2, #1
1000f928:	469a      	mov	sl, r3
1000f92a:	e729      	b.n	1000f780 <__aeabi_dsub+0x58>
1000f92c:	0006      	movs	r6, r0
1000f92e:	430e      	orrs	r6, r1
1000f930:	d000      	beq.n	1000f934 <__aeabi_dsub+0x20c>
1000f932:	e717      	b.n	1000f764 <__aeabi_dsub+0x3c>
1000f934:	e714      	b.n	1000f760 <__aeabi_dsub+0x38>
1000f936:	0029      	movs	r1, r5
1000f938:	4311      	orrs	r1, r2
1000f93a:	d100      	bne.n	1000f93e <__aeabi_dsub+0x216>
1000f93c:	e1f9      	b.n	1000fd32 <__aeabi_dsub+0x60a>
1000f93e:	2180      	movs	r1, #128	; 0x80
1000f940:	0309      	lsls	r1, r1, #12
1000f942:	430a      	orrs	r2, r1
1000f944:	0312      	lsls	r2, r2, #12
1000f946:	0b12      	lsrs	r2, r2, #12
1000f948:	e73b      	b.n	1000f7c2 <__aeabi_dsub+0x9a>
1000f94a:	2301      	movs	r3, #1
1000f94c:	425b      	negs	r3, r3
1000f94e:	4698      	mov	r8, r3
1000f950:	44c4      	add	ip, r8
1000f952:	4663      	mov	r3, ip
1000f954:	2b00      	cmp	r3, #0
1000f956:	d172      	bne.n	1000fa3e <__aeabi_dsub+0x316>
1000f958:	1a69      	subs	r1, r5, r1
1000f95a:	428d      	cmp	r5, r1
1000f95c:	419b      	sbcs	r3, r3
1000f95e:	1a3f      	subs	r7, r7, r0
1000f960:	425b      	negs	r3, r3
1000f962:	1aff      	subs	r7, r7, r3
1000f964:	000d      	movs	r5, r1
1000f966:	e768      	b.n	1000f83a <__aeabi_dsub+0x112>
1000f968:	0002      	movs	r2, r0
1000f96a:	430a      	orrs	r2, r1
1000f96c:	d100      	bne.n	1000f970 <__aeabi_dsub+0x248>
1000f96e:	e707      	b.n	1000f780 <__aeabi_dsub+0x58>
1000f970:	2201      	movs	r2, #1
1000f972:	4252      	negs	r2, r2
1000f974:	4690      	mov	r8, r2
1000f976:	44c4      	add	ip, r8
1000f978:	4662      	mov	r2, ip
1000f97a:	2a00      	cmp	r2, #0
1000f97c:	d000      	beq.n	1000f980 <__aeabi_dsub+0x258>
1000f97e:	e0e6      	b.n	1000fb4e <__aeabi_dsub+0x426>
1000f980:	1869      	adds	r1, r5, r1
1000f982:	42a9      	cmp	r1, r5
1000f984:	41b6      	sbcs	r6, r6
1000f986:	183f      	adds	r7, r7, r0
1000f988:	4276      	negs	r6, r6
1000f98a:	19f7      	adds	r7, r6, r7
1000f98c:	000d      	movs	r5, r1
1000f98e:	e7ba      	b.n	1000f906 <__aeabi_dsub+0x1de>
1000f990:	2e00      	cmp	r6, #0
1000f992:	d000      	beq.n	1000f996 <__aeabi_dsub+0x26e>
1000f994:	e080      	b.n	1000fa98 <__aeabi_dsub+0x370>
1000f996:	1c62      	adds	r2, r4, #1
1000f998:	0552      	lsls	r2, r2, #21
1000f99a:	0d52      	lsrs	r2, r2, #21
1000f99c:	2a01      	cmp	r2, #1
1000f99e:	dc00      	bgt.n	1000f9a2 <__aeabi_dsub+0x27a>
1000f9a0:	e0f9      	b.n	1000fb96 <__aeabi_dsub+0x46e>
1000f9a2:	1a6a      	subs	r2, r5, r1
1000f9a4:	4691      	mov	r9, r2
1000f9a6:	454d      	cmp	r5, r9
1000f9a8:	41b6      	sbcs	r6, r6
1000f9aa:	1a3a      	subs	r2, r7, r0
1000f9ac:	4276      	negs	r6, r6
1000f9ae:	1b92      	subs	r2, r2, r6
1000f9b0:	4690      	mov	r8, r2
1000f9b2:	0212      	lsls	r2, r2, #8
1000f9b4:	d400      	bmi.n	1000f9b8 <__aeabi_dsub+0x290>
1000f9b6:	e099      	b.n	1000faec <__aeabi_dsub+0x3c4>
1000f9b8:	1b4d      	subs	r5, r1, r5
1000f9ba:	42a9      	cmp	r1, r5
1000f9bc:	4189      	sbcs	r1, r1
1000f9be:	1bc7      	subs	r7, r0, r7
1000f9c0:	4249      	negs	r1, r1
1000f9c2:	1a7a      	subs	r2, r7, r1
1000f9c4:	4690      	mov	r8, r2
1000f9c6:	469a      	mov	sl, r3
1000f9c8:	e73c      	b.n	1000f844 <__aeabi_dsub+0x11c>
1000f9ca:	4652      	mov	r2, sl
1000f9cc:	2301      	movs	r3, #1
1000f9ce:	2500      	movs	r5, #0
1000f9d0:	4013      	ands	r3, r2
1000f9d2:	2200      	movs	r2, #0
1000f9d4:	e6f5      	b.n	1000f7c2 <__aeabi_dsub+0x9a>
1000f9d6:	0028      	movs	r0, r5
1000f9d8:	f000 fa68 	bl	1000feac <__clzsi2>
1000f9dc:	3020      	adds	r0, #32
1000f9de:	0003      	movs	r3, r0
1000f9e0:	3b08      	subs	r3, #8
1000f9e2:	2b1f      	cmp	r3, #31
1000f9e4:	dc00      	bgt.n	1000f9e8 <__aeabi_dsub+0x2c0>
1000f9e6:	e739      	b.n	1000f85c <__aeabi_dsub+0x134>
1000f9e8:	002a      	movs	r2, r5
1000f9ea:	3828      	subs	r0, #40	; 0x28
1000f9ec:	4082      	lsls	r2, r0
1000f9ee:	2500      	movs	r5, #0
1000f9f0:	429c      	cmp	r4, r3
1000f9f2:	dc00      	bgt.n	1000f9f6 <__aeabi_dsub+0x2ce>
1000f9f4:	e73e      	b.n	1000f874 <__aeabi_dsub+0x14c>
1000f9f6:	4f26      	ldr	r7, [pc, #152]	; (1000fa90 <__aeabi_dsub+0x368>)
1000f9f8:	1ae4      	subs	r4, r4, r3
1000f9fa:	4017      	ands	r7, r2
1000f9fc:	e6c0      	b.n	1000f780 <__aeabi_dsub+0x58>
1000f9fe:	4301      	orrs	r1, r0
1000fa00:	1e48      	subs	r0, r1, #1
1000fa02:	4181      	sbcs	r1, r0
1000fa04:	2200      	movs	r2, #0
1000fa06:	b2c9      	uxtb	r1, r1
1000fa08:	e710      	b.n	1000f82c <__aeabi_dsub+0x104>
1000fa0a:	2e00      	cmp	r6, #0
1000fa0c:	d000      	beq.n	1000fa10 <__aeabi_dsub+0x2e8>
1000fa0e:	e0f1      	b.n	1000fbf4 <__aeabi_dsub+0x4cc>
1000fa10:	1c62      	adds	r2, r4, #1
1000fa12:	4694      	mov	ip, r2
1000fa14:	0552      	lsls	r2, r2, #21
1000fa16:	0d52      	lsrs	r2, r2, #21
1000fa18:	2a01      	cmp	r2, #1
1000fa1a:	dc00      	bgt.n	1000fa1e <__aeabi_dsub+0x2f6>
1000fa1c:	e0a0      	b.n	1000fb60 <__aeabi_dsub+0x438>
1000fa1e:	4a1b      	ldr	r2, [pc, #108]	; (1000fa8c <__aeabi_dsub+0x364>)
1000fa20:	4594      	cmp	ip, r2
1000fa22:	d100      	bne.n	1000fa26 <__aeabi_dsub+0x2fe>
1000fa24:	e0c5      	b.n	1000fbb2 <__aeabi_dsub+0x48a>
1000fa26:	1869      	adds	r1, r5, r1
1000fa28:	42a9      	cmp	r1, r5
1000fa2a:	4192      	sbcs	r2, r2
1000fa2c:	183f      	adds	r7, r7, r0
1000fa2e:	4252      	negs	r2, r2
1000fa30:	19d2      	adds	r2, r2, r7
1000fa32:	0849      	lsrs	r1, r1, #1
1000fa34:	07d5      	lsls	r5, r2, #31
1000fa36:	430d      	orrs	r5, r1
1000fa38:	0857      	lsrs	r7, r2, #1
1000fa3a:	4664      	mov	r4, ip
1000fa3c:	e6a0      	b.n	1000f780 <__aeabi_dsub+0x58>
1000fa3e:	4b13      	ldr	r3, [pc, #76]	; (1000fa8c <__aeabi_dsub+0x364>)
1000fa40:	429c      	cmp	r4, r3
1000fa42:	d000      	beq.n	1000fa46 <__aeabi_dsub+0x31e>
1000fa44:	e6d9      	b.n	1000f7fa <__aeabi_dsub+0xd2>
1000fa46:	e69b      	b.n	1000f780 <__aeabi_dsub+0x58>
1000fa48:	0011      	movs	r1, r2
1000fa4a:	3c1f      	subs	r4, #31
1000fa4c:	40e1      	lsrs	r1, r4
1000fa4e:	000c      	movs	r4, r1
1000fa50:	2b20      	cmp	r3, #32
1000fa52:	d100      	bne.n	1000fa56 <__aeabi_dsub+0x32e>
1000fa54:	e080      	b.n	1000fb58 <__aeabi_dsub+0x430>
1000fa56:	2140      	movs	r1, #64	; 0x40
1000fa58:	1acb      	subs	r3, r1, r3
1000fa5a:	409a      	lsls	r2, r3
1000fa5c:	4315      	orrs	r5, r2
1000fa5e:	1e6a      	subs	r2, r5, #1
1000fa60:	4195      	sbcs	r5, r2
1000fa62:	2700      	movs	r7, #0
1000fa64:	4325      	orrs	r5, r4
1000fa66:	2400      	movs	r4, #0
1000fa68:	e71f      	b.n	1000f8aa <__aeabi_dsub+0x182>
1000fa6a:	4663      	mov	r3, ip
1000fa6c:	0002      	movs	r2, r0
1000fa6e:	3b20      	subs	r3, #32
1000fa70:	40da      	lsrs	r2, r3
1000fa72:	4663      	mov	r3, ip
1000fa74:	2b20      	cmp	r3, #32
1000fa76:	d071      	beq.n	1000fb5c <__aeabi_dsub+0x434>
1000fa78:	2340      	movs	r3, #64	; 0x40
1000fa7a:	4666      	mov	r6, ip
1000fa7c:	1b9b      	subs	r3, r3, r6
1000fa7e:	4098      	lsls	r0, r3
1000fa80:	4301      	orrs	r1, r0
1000fa82:	1e48      	subs	r0, r1, #1
1000fa84:	4181      	sbcs	r1, r0
1000fa86:	4311      	orrs	r1, r2
1000fa88:	2200      	movs	r2, #0
1000fa8a:	e6cf      	b.n	1000f82c <__aeabi_dsub+0x104>
1000fa8c:	000007ff 	.word	0x000007ff
1000fa90:	ff7fffff 	.word	0xff7fffff
1000fa94:	800fffff 	.word	0x800fffff
1000fa98:	2c00      	cmp	r4, #0
1000fa9a:	d048      	beq.n	1000fb2e <__aeabi_dsub+0x406>
1000fa9c:	4cca      	ldr	r4, [pc, #808]	; (1000fdc8 <__aeabi_dsub+0x6a0>)
1000fa9e:	42a2      	cmp	r2, r4
1000faa0:	d100      	bne.n	1000faa4 <__aeabi_dsub+0x37c>
1000faa2:	e0a2      	b.n	1000fbea <__aeabi_dsub+0x4c2>
1000faa4:	4274      	negs	r4, r6
1000faa6:	46a1      	mov	r9, r4
1000faa8:	2480      	movs	r4, #128	; 0x80
1000faaa:	0424      	lsls	r4, r4, #16
1000faac:	4327      	orrs	r7, r4
1000faae:	464c      	mov	r4, r9
1000fab0:	2c38      	cmp	r4, #56	; 0x38
1000fab2:	dd00      	ble.n	1000fab6 <__aeabi_dsub+0x38e>
1000fab4:	e0db      	b.n	1000fc6e <__aeabi_dsub+0x546>
1000fab6:	2c1f      	cmp	r4, #31
1000fab8:	dd00      	ble.n	1000fabc <__aeabi_dsub+0x394>
1000faba:	e144      	b.n	1000fd46 <__aeabi_dsub+0x61e>
1000fabc:	464e      	mov	r6, r9
1000fabe:	2420      	movs	r4, #32
1000fac0:	1ba4      	subs	r4, r4, r6
1000fac2:	003e      	movs	r6, r7
1000fac4:	40a6      	lsls	r6, r4
1000fac6:	46a2      	mov	sl, r4
1000fac8:	46b0      	mov	r8, r6
1000faca:	464c      	mov	r4, r9
1000facc:	002e      	movs	r6, r5
1000face:	40e6      	lsrs	r6, r4
1000fad0:	46b4      	mov	ip, r6
1000fad2:	4646      	mov	r6, r8
1000fad4:	4664      	mov	r4, ip
1000fad6:	4326      	orrs	r6, r4
1000fad8:	4654      	mov	r4, sl
1000fada:	40a5      	lsls	r5, r4
1000fadc:	1e6c      	subs	r4, r5, #1
1000fade:	41a5      	sbcs	r5, r4
1000fae0:	0034      	movs	r4, r6
1000fae2:	432c      	orrs	r4, r5
1000fae4:	464d      	mov	r5, r9
1000fae6:	40ef      	lsrs	r7, r5
1000fae8:	1b0d      	subs	r5, r1, r4
1000faea:	e028      	b.n	1000fb3e <__aeabi_dsub+0x416>
1000faec:	464a      	mov	r2, r9
1000faee:	4643      	mov	r3, r8
1000faf0:	464d      	mov	r5, r9
1000faf2:	431a      	orrs	r2, r3
1000faf4:	d000      	beq.n	1000faf8 <__aeabi_dsub+0x3d0>
1000faf6:	e6a5      	b.n	1000f844 <__aeabi_dsub+0x11c>
1000faf8:	2300      	movs	r3, #0
1000fafa:	2400      	movs	r4, #0
1000fafc:	2500      	movs	r5, #0
1000fafe:	e6de      	b.n	1000f8be <__aeabi_dsub+0x196>
1000fb00:	2a1f      	cmp	r2, #31
1000fb02:	dc5a      	bgt.n	1000fbba <__aeabi_dsub+0x492>
1000fb04:	4666      	mov	r6, ip
1000fb06:	2220      	movs	r2, #32
1000fb08:	1b92      	subs	r2, r2, r6
1000fb0a:	0006      	movs	r6, r0
1000fb0c:	4096      	lsls	r6, r2
1000fb0e:	4691      	mov	r9, r2
1000fb10:	46b0      	mov	r8, r6
1000fb12:	4662      	mov	r2, ip
1000fb14:	000e      	movs	r6, r1
1000fb16:	40d6      	lsrs	r6, r2
1000fb18:	4642      	mov	r2, r8
1000fb1a:	4316      	orrs	r6, r2
1000fb1c:	464a      	mov	r2, r9
1000fb1e:	4091      	lsls	r1, r2
1000fb20:	1e4a      	subs	r2, r1, #1
1000fb22:	4191      	sbcs	r1, r2
1000fb24:	0002      	movs	r2, r0
1000fb26:	4660      	mov	r0, ip
1000fb28:	4331      	orrs	r1, r6
1000fb2a:	40c2      	lsrs	r2, r0
1000fb2c:	e6e4      	b.n	1000f8f8 <__aeabi_dsub+0x1d0>
1000fb2e:	003c      	movs	r4, r7
1000fb30:	432c      	orrs	r4, r5
1000fb32:	d05a      	beq.n	1000fbea <__aeabi_dsub+0x4c2>
1000fb34:	43f4      	mvns	r4, r6
1000fb36:	46a1      	mov	r9, r4
1000fb38:	2c00      	cmp	r4, #0
1000fb3a:	d152      	bne.n	1000fbe2 <__aeabi_dsub+0x4ba>
1000fb3c:	1b4d      	subs	r5, r1, r5
1000fb3e:	42a9      	cmp	r1, r5
1000fb40:	4189      	sbcs	r1, r1
1000fb42:	1bc7      	subs	r7, r0, r7
1000fb44:	4249      	negs	r1, r1
1000fb46:	1a7f      	subs	r7, r7, r1
1000fb48:	0014      	movs	r4, r2
1000fb4a:	469a      	mov	sl, r3
1000fb4c:	e675      	b.n	1000f83a <__aeabi_dsub+0x112>
1000fb4e:	4a9e      	ldr	r2, [pc, #632]	; (1000fdc8 <__aeabi_dsub+0x6a0>)
1000fb50:	4294      	cmp	r4, r2
1000fb52:	d000      	beq.n	1000fb56 <__aeabi_dsub+0x42e>
1000fb54:	e6c7      	b.n	1000f8e6 <__aeabi_dsub+0x1be>
1000fb56:	e613      	b.n	1000f780 <__aeabi_dsub+0x58>
1000fb58:	2200      	movs	r2, #0
1000fb5a:	e77f      	b.n	1000fa5c <__aeabi_dsub+0x334>
1000fb5c:	2000      	movs	r0, #0
1000fb5e:	e78f      	b.n	1000fa80 <__aeabi_dsub+0x358>
1000fb60:	2c00      	cmp	r4, #0
1000fb62:	d000      	beq.n	1000fb66 <__aeabi_dsub+0x43e>
1000fb64:	e0c8      	b.n	1000fcf8 <__aeabi_dsub+0x5d0>
1000fb66:	003b      	movs	r3, r7
1000fb68:	432b      	orrs	r3, r5
1000fb6a:	d100      	bne.n	1000fb6e <__aeabi_dsub+0x446>
1000fb6c:	e10f      	b.n	1000fd8e <__aeabi_dsub+0x666>
1000fb6e:	0003      	movs	r3, r0
1000fb70:	430b      	orrs	r3, r1
1000fb72:	d100      	bne.n	1000fb76 <__aeabi_dsub+0x44e>
1000fb74:	e604      	b.n	1000f780 <__aeabi_dsub+0x58>
1000fb76:	1869      	adds	r1, r5, r1
1000fb78:	42a9      	cmp	r1, r5
1000fb7a:	419b      	sbcs	r3, r3
1000fb7c:	183f      	adds	r7, r7, r0
1000fb7e:	425b      	negs	r3, r3
1000fb80:	19df      	adds	r7, r3, r7
1000fb82:	023b      	lsls	r3, r7, #8
1000fb84:	d400      	bmi.n	1000fb88 <__aeabi_dsub+0x460>
1000fb86:	e11a      	b.n	1000fdbe <__aeabi_dsub+0x696>
1000fb88:	4b90      	ldr	r3, [pc, #576]	; (1000fdcc <__aeabi_dsub+0x6a4>)
1000fb8a:	000d      	movs	r5, r1
1000fb8c:	401f      	ands	r7, r3
1000fb8e:	4664      	mov	r4, ip
1000fb90:	e5f6      	b.n	1000f780 <__aeabi_dsub+0x58>
1000fb92:	469a      	mov	sl, r3
1000fb94:	e689      	b.n	1000f8aa <__aeabi_dsub+0x182>
1000fb96:	003a      	movs	r2, r7
1000fb98:	432a      	orrs	r2, r5
1000fb9a:	2c00      	cmp	r4, #0
1000fb9c:	d15c      	bne.n	1000fc58 <__aeabi_dsub+0x530>
1000fb9e:	2a00      	cmp	r2, #0
1000fba0:	d175      	bne.n	1000fc8e <__aeabi_dsub+0x566>
1000fba2:	0002      	movs	r2, r0
1000fba4:	430a      	orrs	r2, r1
1000fba6:	d100      	bne.n	1000fbaa <__aeabi_dsub+0x482>
1000fba8:	e0ca      	b.n	1000fd40 <__aeabi_dsub+0x618>
1000fbaa:	0007      	movs	r7, r0
1000fbac:	000d      	movs	r5, r1
1000fbae:	469a      	mov	sl, r3
1000fbb0:	e5e6      	b.n	1000f780 <__aeabi_dsub+0x58>
1000fbb2:	4664      	mov	r4, ip
1000fbb4:	2200      	movs	r2, #0
1000fbb6:	2500      	movs	r5, #0
1000fbb8:	e681      	b.n	1000f8be <__aeabi_dsub+0x196>
1000fbba:	4662      	mov	r2, ip
1000fbbc:	0006      	movs	r6, r0
1000fbbe:	3a20      	subs	r2, #32
1000fbc0:	40d6      	lsrs	r6, r2
1000fbc2:	4662      	mov	r2, ip
1000fbc4:	46b0      	mov	r8, r6
1000fbc6:	2a20      	cmp	r2, #32
1000fbc8:	d100      	bne.n	1000fbcc <__aeabi_dsub+0x4a4>
1000fbca:	e0b7      	b.n	1000fd3c <__aeabi_dsub+0x614>
1000fbcc:	2240      	movs	r2, #64	; 0x40
1000fbce:	4666      	mov	r6, ip
1000fbd0:	1b92      	subs	r2, r2, r6
1000fbd2:	4090      	lsls	r0, r2
1000fbd4:	4301      	orrs	r1, r0
1000fbd6:	4642      	mov	r2, r8
1000fbd8:	1e48      	subs	r0, r1, #1
1000fbda:	4181      	sbcs	r1, r0
1000fbdc:	4311      	orrs	r1, r2
1000fbde:	2200      	movs	r2, #0
1000fbe0:	e68a      	b.n	1000f8f8 <__aeabi_dsub+0x1d0>
1000fbe2:	4c79      	ldr	r4, [pc, #484]	; (1000fdc8 <__aeabi_dsub+0x6a0>)
1000fbe4:	42a2      	cmp	r2, r4
1000fbe6:	d000      	beq.n	1000fbea <__aeabi_dsub+0x4c2>
1000fbe8:	e761      	b.n	1000faae <__aeabi_dsub+0x386>
1000fbea:	0007      	movs	r7, r0
1000fbec:	000d      	movs	r5, r1
1000fbee:	0014      	movs	r4, r2
1000fbf0:	469a      	mov	sl, r3
1000fbf2:	e5c5      	b.n	1000f780 <__aeabi_dsub+0x58>
1000fbf4:	2c00      	cmp	r4, #0
1000fbf6:	d141      	bne.n	1000fc7c <__aeabi_dsub+0x554>
1000fbf8:	003c      	movs	r4, r7
1000fbfa:	432c      	orrs	r4, r5
1000fbfc:	d078      	beq.n	1000fcf0 <__aeabi_dsub+0x5c8>
1000fbfe:	43f4      	mvns	r4, r6
1000fc00:	46a1      	mov	r9, r4
1000fc02:	2c00      	cmp	r4, #0
1000fc04:	d020      	beq.n	1000fc48 <__aeabi_dsub+0x520>
1000fc06:	4c70      	ldr	r4, [pc, #448]	; (1000fdc8 <__aeabi_dsub+0x6a0>)
1000fc08:	42a2      	cmp	r2, r4
1000fc0a:	d071      	beq.n	1000fcf0 <__aeabi_dsub+0x5c8>
1000fc0c:	464c      	mov	r4, r9
1000fc0e:	2c38      	cmp	r4, #56	; 0x38
1000fc10:	dd00      	ble.n	1000fc14 <__aeabi_dsub+0x4ec>
1000fc12:	e0b2      	b.n	1000fd7a <__aeabi_dsub+0x652>
1000fc14:	2c1f      	cmp	r4, #31
1000fc16:	dd00      	ble.n	1000fc1a <__aeabi_dsub+0x4f2>
1000fc18:	e0bc      	b.n	1000fd94 <__aeabi_dsub+0x66c>
1000fc1a:	2620      	movs	r6, #32
1000fc1c:	1b34      	subs	r4, r6, r4
1000fc1e:	46a2      	mov	sl, r4
1000fc20:	003c      	movs	r4, r7
1000fc22:	4656      	mov	r6, sl
1000fc24:	40b4      	lsls	r4, r6
1000fc26:	464e      	mov	r6, r9
1000fc28:	46a0      	mov	r8, r4
1000fc2a:	002c      	movs	r4, r5
1000fc2c:	40f4      	lsrs	r4, r6
1000fc2e:	46a4      	mov	ip, r4
1000fc30:	4644      	mov	r4, r8
1000fc32:	4666      	mov	r6, ip
1000fc34:	4334      	orrs	r4, r6
1000fc36:	46a4      	mov	ip, r4
1000fc38:	4654      	mov	r4, sl
1000fc3a:	40a5      	lsls	r5, r4
1000fc3c:	4664      	mov	r4, ip
1000fc3e:	1e6e      	subs	r6, r5, #1
1000fc40:	41b5      	sbcs	r5, r6
1000fc42:	4325      	orrs	r5, r4
1000fc44:	464c      	mov	r4, r9
1000fc46:	40e7      	lsrs	r7, r4
1000fc48:	186d      	adds	r5, r5, r1
1000fc4a:	428d      	cmp	r5, r1
1000fc4c:	4189      	sbcs	r1, r1
1000fc4e:	183f      	adds	r7, r7, r0
1000fc50:	4249      	negs	r1, r1
1000fc52:	19cf      	adds	r7, r1, r7
1000fc54:	0014      	movs	r4, r2
1000fc56:	e656      	b.n	1000f906 <__aeabi_dsub+0x1de>
1000fc58:	2a00      	cmp	r2, #0
1000fc5a:	d12f      	bne.n	1000fcbc <__aeabi_dsub+0x594>
1000fc5c:	0002      	movs	r2, r0
1000fc5e:	430a      	orrs	r2, r1
1000fc60:	d100      	bne.n	1000fc64 <__aeabi_dsub+0x53c>
1000fc62:	e084      	b.n	1000fd6e <__aeabi_dsub+0x646>
1000fc64:	0007      	movs	r7, r0
1000fc66:	000d      	movs	r5, r1
1000fc68:	469a      	mov	sl, r3
1000fc6a:	4c57      	ldr	r4, [pc, #348]	; (1000fdc8 <__aeabi_dsub+0x6a0>)
1000fc6c:	e588      	b.n	1000f780 <__aeabi_dsub+0x58>
1000fc6e:	433d      	orrs	r5, r7
1000fc70:	1e6f      	subs	r7, r5, #1
1000fc72:	41bd      	sbcs	r5, r7
1000fc74:	b2ec      	uxtb	r4, r5
1000fc76:	2700      	movs	r7, #0
1000fc78:	1b0d      	subs	r5, r1, r4
1000fc7a:	e760      	b.n	1000fb3e <__aeabi_dsub+0x416>
1000fc7c:	4c52      	ldr	r4, [pc, #328]	; (1000fdc8 <__aeabi_dsub+0x6a0>)
1000fc7e:	42a2      	cmp	r2, r4
1000fc80:	d036      	beq.n	1000fcf0 <__aeabi_dsub+0x5c8>
1000fc82:	4274      	negs	r4, r6
1000fc84:	2680      	movs	r6, #128	; 0x80
1000fc86:	0436      	lsls	r6, r6, #16
1000fc88:	46a1      	mov	r9, r4
1000fc8a:	4337      	orrs	r7, r6
1000fc8c:	e7be      	b.n	1000fc0c <__aeabi_dsub+0x4e4>
1000fc8e:	0002      	movs	r2, r0
1000fc90:	430a      	orrs	r2, r1
1000fc92:	d100      	bne.n	1000fc96 <__aeabi_dsub+0x56e>
1000fc94:	e574      	b.n	1000f780 <__aeabi_dsub+0x58>
1000fc96:	1a6a      	subs	r2, r5, r1
1000fc98:	4690      	mov	r8, r2
1000fc9a:	4545      	cmp	r5, r8
1000fc9c:	41b6      	sbcs	r6, r6
1000fc9e:	1a3a      	subs	r2, r7, r0
1000fca0:	4276      	negs	r6, r6
1000fca2:	1b92      	subs	r2, r2, r6
1000fca4:	4694      	mov	ip, r2
1000fca6:	0212      	lsls	r2, r2, #8
1000fca8:	d400      	bmi.n	1000fcac <__aeabi_dsub+0x584>
1000fcaa:	e5f7      	b.n	1000f89c <__aeabi_dsub+0x174>
1000fcac:	1b4d      	subs	r5, r1, r5
1000fcae:	42a9      	cmp	r1, r5
1000fcb0:	4189      	sbcs	r1, r1
1000fcb2:	1bc7      	subs	r7, r0, r7
1000fcb4:	4249      	negs	r1, r1
1000fcb6:	1a7f      	subs	r7, r7, r1
1000fcb8:	469a      	mov	sl, r3
1000fcba:	e561      	b.n	1000f780 <__aeabi_dsub+0x58>
1000fcbc:	0002      	movs	r2, r0
1000fcbe:	430a      	orrs	r2, r1
1000fcc0:	d03a      	beq.n	1000fd38 <__aeabi_dsub+0x610>
1000fcc2:	08ed      	lsrs	r5, r5, #3
1000fcc4:	077c      	lsls	r4, r7, #29
1000fcc6:	432c      	orrs	r4, r5
1000fcc8:	2580      	movs	r5, #128	; 0x80
1000fcca:	08fa      	lsrs	r2, r7, #3
1000fccc:	032d      	lsls	r5, r5, #12
1000fcce:	422a      	tst	r2, r5
1000fcd0:	d008      	beq.n	1000fce4 <__aeabi_dsub+0x5bc>
1000fcd2:	08c7      	lsrs	r7, r0, #3
1000fcd4:	422f      	tst	r7, r5
1000fcd6:	d105      	bne.n	1000fce4 <__aeabi_dsub+0x5bc>
1000fcd8:	0745      	lsls	r5, r0, #29
1000fcda:	002c      	movs	r4, r5
1000fcdc:	003a      	movs	r2, r7
1000fcde:	469a      	mov	sl, r3
1000fce0:	08c9      	lsrs	r1, r1, #3
1000fce2:	430c      	orrs	r4, r1
1000fce4:	0f67      	lsrs	r7, r4, #29
1000fce6:	00d2      	lsls	r2, r2, #3
1000fce8:	00e5      	lsls	r5, r4, #3
1000fcea:	4317      	orrs	r7, r2
1000fcec:	4c36      	ldr	r4, [pc, #216]	; (1000fdc8 <__aeabi_dsub+0x6a0>)
1000fcee:	e547      	b.n	1000f780 <__aeabi_dsub+0x58>
1000fcf0:	0007      	movs	r7, r0
1000fcf2:	000d      	movs	r5, r1
1000fcf4:	0014      	movs	r4, r2
1000fcf6:	e543      	b.n	1000f780 <__aeabi_dsub+0x58>
1000fcf8:	003a      	movs	r2, r7
1000fcfa:	432a      	orrs	r2, r5
1000fcfc:	d043      	beq.n	1000fd86 <__aeabi_dsub+0x65e>
1000fcfe:	0002      	movs	r2, r0
1000fd00:	430a      	orrs	r2, r1
1000fd02:	d019      	beq.n	1000fd38 <__aeabi_dsub+0x610>
1000fd04:	08ed      	lsrs	r5, r5, #3
1000fd06:	077c      	lsls	r4, r7, #29
1000fd08:	432c      	orrs	r4, r5
1000fd0a:	2580      	movs	r5, #128	; 0x80
1000fd0c:	08fa      	lsrs	r2, r7, #3
1000fd0e:	032d      	lsls	r5, r5, #12
1000fd10:	422a      	tst	r2, r5
1000fd12:	d007      	beq.n	1000fd24 <__aeabi_dsub+0x5fc>
1000fd14:	08c6      	lsrs	r6, r0, #3
1000fd16:	422e      	tst	r6, r5
1000fd18:	d104      	bne.n	1000fd24 <__aeabi_dsub+0x5fc>
1000fd1a:	0747      	lsls	r7, r0, #29
1000fd1c:	003c      	movs	r4, r7
1000fd1e:	0032      	movs	r2, r6
1000fd20:	08c9      	lsrs	r1, r1, #3
1000fd22:	430c      	orrs	r4, r1
1000fd24:	00d7      	lsls	r7, r2, #3
1000fd26:	0f62      	lsrs	r2, r4, #29
1000fd28:	00e5      	lsls	r5, r4, #3
1000fd2a:	4317      	orrs	r7, r2
1000fd2c:	469a      	mov	sl, r3
1000fd2e:	4c26      	ldr	r4, [pc, #152]	; (1000fdc8 <__aeabi_dsub+0x6a0>)
1000fd30:	e526      	b.n	1000f780 <__aeabi_dsub+0x58>
1000fd32:	2200      	movs	r2, #0
1000fd34:	2500      	movs	r5, #0
1000fd36:	e544      	b.n	1000f7c2 <__aeabi_dsub+0x9a>
1000fd38:	4c23      	ldr	r4, [pc, #140]	; (1000fdc8 <__aeabi_dsub+0x6a0>)
1000fd3a:	e521      	b.n	1000f780 <__aeabi_dsub+0x58>
1000fd3c:	2000      	movs	r0, #0
1000fd3e:	e749      	b.n	1000fbd4 <__aeabi_dsub+0x4ac>
1000fd40:	2300      	movs	r3, #0
1000fd42:	2500      	movs	r5, #0
1000fd44:	e5bb      	b.n	1000f8be <__aeabi_dsub+0x196>
1000fd46:	464c      	mov	r4, r9
1000fd48:	003e      	movs	r6, r7
1000fd4a:	3c20      	subs	r4, #32
1000fd4c:	40e6      	lsrs	r6, r4
1000fd4e:	464c      	mov	r4, r9
1000fd50:	46b4      	mov	ip, r6
1000fd52:	2c20      	cmp	r4, #32
1000fd54:	d031      	beq.n	1000fdba <__aeabi_dsub+0x692>
1000fd56:	2440      	movs	r4, #64	; 0x40
1000fd58:	464e      	mov	r6, r9
1000fd5a:	1ba6      	subs	r6, r4, r6
1000fd5c:	40b7      	lsls	r7, r6
1000fd5e:	433d      	orrs	r5, r7
1000fd60:	1e6c      	subs	r4, r5, #1
1000fd62:	41a5      	sbcs	r5, r4
1000fd64:	4664      	mov	r4, ip
1000fd66:	432c      	orrs	r4, r5
1000fd68:	2700      	movs	r7, #0
1000fd6a:	1b0d      	subs	r5, r1, r4
1000fd6c:	e6e7      	b.n	1000fb3e <__aeabi_dsub+0x416>
1000fd6e:	2280      	movs	r2, #128	; 0x80
1000fd70:	2300      	movs	r3, #0
1000fd72:	0312      	lsls	r2, r2, #12
1000fd74:	4c14      	ldr	r4, [pc, #80]	; (1000fdc8 <__aeabi_dsub+0x6a0>)
1000fd76:	2500      	movs	r5, #0
1000fd78:	e5a1      	b.n	1000f8be <__aeabi_dsub+0x196>
1000fd7a:	433d      	orrs	r5, r7
1000fd7c:	1e6f      	subs	r7, r5, #1
1000fd7e:	41bd      	sbcs	r5, r7
1000fd80:	2700      	movs	r7, #0
1000fd82:	b2ed      	uxtb	r5, r5
1000fd84:	e760      	b.n	1000fc48 <__aeabi_dsub+0x520>
1000fd86:	0007      	movs	r7, r0
1000fd88:	000d      	movs	r5, r1
1000fd8a:	4c0f      	ldr	r4, [pc, #60]	; (1000fdc8 <__aeabi_dsub+0x6a0>)
1000fd8c:	e4f8      	b.n	1000f780 <__aeabi_dsub+0x58>
1000fd8e:	0007      	movs	r7, r0
1000fd90:	000d      	movs	r5, r1
1000fd92:	e4f5      	b.n	1000f780 <__aeabi_dsub+0x58>
1000fd94:	464e      	mov	r6, r9
1000fd96:	003c      	movs	r4, r7
1000fd98:	3e20      	subs	r6, #32
1000fd9a:	40f4      	lsrs	r4, r6
1000fd9c:	46a0      	mov	r8, r4
1000fd9e:	464c      	mov	r4, r9
1000fda0:	2c20      	cmp	r4, #32
1000fda2:	d00e      	beq.n	1000fdc2 <__aeabi_dsub+0x69a>
1000fda4:	2440      	movs	r4, #64	; 0x40
1000fda6:	464e      	mov	r6, r9
1000fda8:	1ba4      	subs	r4, r4, r6
1000fdaa:	40a7      	lsls	r7, r4
1000fdac:	433d      	orrs	r5, r7
1000fdae:	1e6f      	subs	r7, r5, #1
1000fdb0:	41bd      	sbcs	r5, r7
1000fdb2:	4644      	mov	r4, r8
1000fdb4:	2700      	movs	r7, #0
1000fdb6:	4325      	orrs	r5, r4
1000fdb8:	e746      	b.n	1000fc48 <__aeabi_dsub+0x520>
1000fdba:	2700      	movs	r7, #0
1000fdbc:	e7cf      	b.n	1000fd5e <__aeabi_dsub+0x636>
1000fdbe:	000d      	movs	r5, r1
1000fdc0:	e573      	b.n	1000f8aa <__aeabi_dsub+0x182>
1000fdc2:	2700      	movs	r7, #0
1000fdc4:	e7f2      	b.n	1000fdac <__aeabi_dsub+0x684>
1000fdc6:	46c0      	nop			; (mov r8, r8)
1000fdc8:	000007ff 	.word	0x000007ff
1000fdcc:	ff7fffff 	.word	0xff7fffff

1000fdd0 <__aeabi_d2iz>:
1000fdd0:	030b      	lsls	r3, r1, #12
1000fdd2:	b530      	push	{r4, r5, lr}
1000fdd4:	4d13      	ldr	r5, [pc, #76]	; (1000fe24 <__aeabi_d2iz+0x54>)
1000fdd6:	0b1a      	lsrs	r2, r3, #12
1000fdd8:	004b      	lsls	r3, r1, #1
1000fdda:	0d5b      	lsrs	r3, r3, #21
1000fddc:	0fc9      	lsrs	r1, r1, #31
1000fdde:	2400      	movs	r4, #0
1000fde0:	42ab      	cmp	r3, r5
1000fde2:	dd11      	ble.n	1000fe08 <__aeabi_d2iz+0x38>
1000fde4:	4c10      	ldr	r4, [pc, #64]	; (1000fe28 <__aeabi_d2iz+0x58>)
1000fde6:	42a3      	cmp	r3, r4
1000fde8:	dc10      	bgt.n	1000fe0c <__aeabi_d2iz+0x3c>
1000fdea:	2480      	movs	r4, #128	; 0x80
1000fdec:	0364      	lsls	r4, r4, #13
1000fdee:	4322      	orrs	r2, r4
1000fdf0:	4c0e      	ldr	r4, [pc, #56]	; (1000fe2c <__aeabi_d2iz+0x5c>)
1000fdf2:	1ae4      	subs	r4, r4, r3
1000fdf4:	2c1f      	cmp	r4, #31
1000fdf6:	dd0c      	ble.n	1000fe12 <__aeabi_d2iz+0x42>
1000fdf8:	480d      	ldr	r0, [pc, #52]	; (1000fe30 <__aeabi_d2iz+0x60>)
1000fdfa:	1ac3      	subs	r3, r0, r3
1000fdfc:	40da      	lsrs	r2, r3
1000fdfe:	0013      	movs	r3, r2
1000fe00:	425c      	negs	r4, r3
1000fe02:	2900      	cmp	r1, #0
1000fe04:	d100      	bne.n	1000fe08 <__aeabi_d2iz+0x38>
1000fe06:	001c      	movs	r4, r3
1000fe08:	0020      	movs	r0, r4
1000fe0a:	bd30      	pop	{r4, r5, pc}
1000fe0c:	4b09      	ldr	r3, [pc, #36]	; (1000fe34 <__aeabi_d2iz+0x64>)
1000fe0e:	18cc      	adds	r4, r1, r3
1000fe10:	e7fa      	b.n	1000fe08 <__aeabi_d2iz+0x38>
1000fe12:	40e0      	lsrs	r0, r4
1000fe14:	4c08      	ldr	r4, [pc, #32]	; (1000fe38 <__aeabi_d2iz+0x68>)
1000fe16:	46a4      	mov	ip, r4
1000fe18:	4463      	add	r3, ip
1000fe1a:	409a      	lsls	r2, r3
1000fe1c:	0013      	movs	r3, r2
1000fe1e:	4303      	orrs	r3, r0
1000fe20:	e7ee      	b.n	1000fe00 <__aeabi_d2iz+0x30>
1000fe22:	46c0      	nop			; (mov r8, r8)
1000fe24:	000003fe 	.word	0x000003fe
1000fe28:	0000041d 	.word	0x0000041d
1000fe2c:	00000433 	.word	0x00000433
1000fe30:	00000413 	.word	0x00000413
1000fe34:	7fffffff 	.word	0x7fffffff
1000fe38:	fffffbed 	.word	0xfffffbed

1000fe3c <__aeabi_ui2d>:
1000fe3c:	b570      	push	{r4, r5, r6, lr}
1000fe3e:	1e05      	subs	r5, r0, #0
1000fe40:	d028      	beq.n	1000fe94 <__aeabi_ui2d+0x58>
1000fe42:	f000 f833 	bl	1000feac <__clzsi2>
1000fe46:	4b15      	ldr	r3, [pc, #84]	; (1000fe9c <__aeabi_ui2d+0x60>)
1000fe48:	4a15      	ldr	r2, [pc, #84]	; (1000fea0 <__aeabi_ui2d+0x64>)
1000fe4a:	1a1b      	subs	r3, r3, r0
1000fe4c:	1ad2      	subs	r2, r2, r3
1000fe4e:	2a1f      	cmp	r2, #31
1000fe50:	dd16      	ble.n	1000fe80 <__aeabi_ui2d+0x44>
1000fe52:	002c      	movs	r4, r5
1000fe54:	4a13      	ldr	r2, [pc, #76]	; (1000fea4 <__aeabi_ui2d+0x68>)
1000fe56:	2500      	movs	r5, #0
1000fe58:	1ad2      	subs	r2, r2, r3
1000fe5a:	4094      	lsls	r4, r2
1000fe5c:	055a      	lsls	r2, r3, #21
1000fe5e:	0324      	lsls	r4, r4, #12
1000fe60:	0b24      	lsrs	r4, r4, #12
1000fe62:	0d52      	lsrs	r2, r2, #21
1000fe64:	2100      	movs	r1, #0
1000fe66:	0324      	lsls	r4, r4, #12
1000fe68:	0d0b      	lsrs	r3, r1, #20
1000fe6a:	0b24      	lsrs	r4, r4, #12
1000fe6c:	051b      	lsls	r3, r3, #20
1000fe6e:	4323      	orrs	r3, r4
1000fe70:	4c0d      	ldr	r4, [pc, #52]	; (1000fea8 <__aeabi_ui2d+0x6c>)
1000fe72:	0512      	lsls	r2, r2, #20
1000fe74:	4023      	ands	r3, r4
1000fe76:	4313      	orrs	r3, r2
1000fe78:	005b      	lsls	r3, r3, #1
1000fe7a:	0028      	movs	r0, r5
1000fe7c:	0859      	lsrs	r1, r3, #1
1000fe7e:	bd70      	pop	{r4, r5, r6, pc}
1000fe80:	210b      	movs	r1, #11
1000fe82:	002c      	movs	r4, r5
1000fe84:	1a08      	subs	r0, r1, r0
1000fe86:	40c4      	lsrs	r4, r0
1000fe88:	4095      	lsls	r5, r2
1000fe8a:	0324      	lsls	r4, r4, #12
1000fe8c:	055a      	lsls	r2, r3, #21
1000fe8e:	0b24      	lsrs	r4, r4, #12
1000fe90:	0d52      	lsrs	r2, r2, #21
1000fe92:	e7e7      	b.n	1000fe64 <__aeabi_ui2d+0x28>
1000fe94:	2200      	movs	r2, #0
1000fe96:	2400      	movs	r4, #0
1000fe98:	e7e4      	b.n	1000fe64 <__aeabi_ui2d+0x28>
1000fe9a:	46c0      	nop			; (mov r8, r8)
1000fe9c:	0000041e 	.word	0x0000041e
1000fea0:	00000433 	.word	0x00000433
1000fea4:	00000413 	.word	0x00000413
1000fea8:	800fffff 	.word	0x800fffff

1000feac <__clzsi2>:
1000feac:	211c      	movs	r1, #28
1000feae:	2301      	movs	r3, #1
1000feb0:	041b      	lsls	r3, r3, #16
1000feb2:	4298      	cmp	r0, r3
1000feb4:	d301      	bcc.n	1000feba <__clzsi2+0xe>
1000feb6:	0c00      	lsrs	r0, r0, #16
1000feb8:	3910      	subs	r1, #16
1000feba:	0a1b      	lsrs	r3, r3, #8
1000febc:	4298      	cmp	r0, r3
1000febe:	d301      	bcc.n	1000fec4 <__clzsi2+0x18>
1000fec0:	0a00      	lsrs	r0, r0, #8
1000fec2:	3908      	subs	r1, #8
1000fec4:	091b      	lsrs	r3, r3, #4
1000fec6:	4298      	cmp	r0, r3
1000fec8:	d301      	bcc.n	1000fece <__clzsi2+0x22>
1000feca:	0900      	lsrs	r0, r0, #4
1000fecc:	3904      	subs	r1, #4
1000fece:	a202      	add	r2, pc, #8	; (adr r2, 1000fed8 <__clzsi2+0x2c>)
1000fed0:	5c10      	ldrb	r0, [r2, r0]
1000fed2:	1840      	adds	r0, r0, r1
1000fed4:	4770      	bx	lr
1000fed6:	46c0      	nop			; (mov r8, r8)
1000fed8:	02020304 	.word	0x02020304
1000fedc:	01010101 	.word	0x01010101
	...

1000fee8 <__aeabi_lmul>:
1000fee8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000feea:	464f      	mov	r7, r9
1000feec:	4646      	mov	r6, r8
1000feee:	b4c0      	push	{r6, r7}
1000fef0:	0416      	lsls	r6, r2, #16
1000fef2:	0c36      	lsrs	r6, r6, #16
1000fef4:	4699      	mov	r9, r3
1000fef6:	0033      	movs	r3, r6
1000fef8:	0405      	lsls	r5, r0, #16
1000fefa:	0c2c      	lsrs	r4, r5, #16
1000fefc:	0c07      	lsrs	r7, r0, #16
1000fefe:	0c15      	lsrs	r5, r2, #16
1000ff00:	4363      	muls	r3, r4
1000ff02:	437e      	muls	r6, r7
1000ff04:	436f      	muls	r7, r5
1000ff06:	4365      	muls	r5, r4
1000ff08:	0c1c      	lsrs	r4, r3, #16
1000ff0a:	19ad      	adds	r5, r5, r6
1000ff0c:	1964      	adds	r4, r4, r5
1000ff0e:	469c      	mov	ip, r3
1000ff10:	42a6      	cmp	r6, r4
1000ff12:	d903      	bls.n	1000ff1c <__aeabi_lmul+0x34>
1000ff14:	2380      	movs	r3, #128	; 0x80
1000ff16:	025b      	lsls	r3, r3, #9
1000ff18:	4698      	mov	r8, r3
1000ff1a:	4447      	add	r7, r8
1000ff1c:	4663      	mov	r3, ip
1000ff1e:	0c25      	lsrs	r5, r4, #16
1000ff20:	19ef      	adds	r7, r5, r7
1000ff22:	041d      	lsls	r5, r3, #16
1000ff24:	464b      	mov	r3, r9
1000ff26:	434a      	muls	r2, r1
1000ff28:	4343      	muls	r3, r0
1000ff2a:	0c2d      	lsrs	r5, r5, #16
1000ff2c:	0424      	lsls	r4, r4, #16
1000ff2e:	1964      	adds	r4, r4, r5
1000ff30:	1899      	adds	r1, r3, r2
1000ff32:	19c9      	adds	r1, r1, r7
1000ff34:	0020      	movs	r0, r4
1000ff36:	bc0c      	pop	{r2, r3}
1000ff38:	4690      	mov	r8, r2
1000ff3a:	4699      	mov	r9, r3
1000ff3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ff3e:	46c0      	nop			; (mov r8, r8)

1000ff40 <__libc_init_array>:
1000ff40:	4b0e      	ldr	r3, [pc, #56]	; (1000ff7c <__libc_init_array+0x3c>)
1000ff42:	b570      	push	{r4, r5, r6, lr}
1000ff44:	2500      	movs	r5, #0
1000ff46:	001e      	movs	r6, r3
1000ff48:	4c0d      	ldr	r4, [pc, #52]	; (1000ff80 <__libc_init_array+0x40>)
1000ff4a:	1ae4      	subs	r4, r4, r3
1000ff4c:	10a4      	asrs	r4, r4, #2
1000ff4e:	42a5      	cmp	r5, r4
1000ff50:	d004      	beq.n	1000ff5c <__libc_init_array+0x1c>
1000ff52:	00ab      	lsls	r3, r5, #2
1000ff54:	58f3      	ldr	r3, [r6, r3]
1000ff56:	4798      	blx	r3
1000ff58:	3501      	adds	r5, #1
1000ff5a:	e7f8      	b.n	1000ff4e <__libc_init_array+0xe>
1000ff5c:	f002 f89a 	bl	10012094 <_init>
1000ff60:	4b08      	ldr	r3, [pc, #32]	; (1000ff84 <__libc_init_array+0x44>)
1000ff62:	2500      	movs	r5, #0
1000ff64:	001e      	movs	r6, r3
1000ff66:	4c08      	ldr	r4, [pc, #32]	; (1000ff88 <__libc_init_array+0x48>)
1000ff68:	1ae4      	subs	r4, r4, r3
1000ff6a:	10a4      	asrs	r4, r4, #2
1000ff6c:	42a5      	cmp	r5, r4
1000ff6e:	d004      	beq.n	1000ff7a <__libc_init_array+0x3a>
1000ff70:	00ab      	lsls	r3, r5, #2
1000ff72:	58f3      	ldr	r3, [r6, r3]
1000ff74:	4798      	blx	r3
1000ff76:	3501      	adds	r5, #1
1000ff78:	e7f8      	b.n	1000ff6c <__libc_init_array+0x2c>
1000ff7a:	bd70      	pop	{r4, r5, r6, pc}
1000ff7c:	100120a0 	.word	0x100120a0
1000ff80:	100120a0 	.word	0x100120a0
1000ff84:	100120a0 	.word	0x100120a0
1000ff88:	100120a4 	.word	0x100120a4

1000ff8c <memcmp>:
1000ff8c:	b530      	push	{r4, r5, lr}
1000ff8e:	2400      	movs	r4, #0
1000ff90:	42a2      	cmp	r2, r4
1000ff92:	d008      	beq.n	1000ffa6 <memcmp+0x1a>
1000ff94:	5d03      	ldrb	r3, [r0, r4]
1000ff96:	1c65      	adds	r5, r4, #1
1000ff98:	5d0c      	ldrb	r4, [r1, r4]
1000ff9a:	42a3      	cmp	r3, r4
1000ff9c:	d001      	beq.n	1000ffa2 <memcmp+0x16>
1000ff9e:	1b18      	subs	r0, r3, r4
1000ffa0:	e002      	b.n	1000ffa8 <memcmp+0x1c>
1000ffa2:	002c      	movs	r4, r5
1000ffa4:	e7f4      	b.n	1000ff90 <memcmp+0x4>
1000ffa6:	2000      	movs	r0, #0
1000ffa8:	bd30      	pop	{r4, r5, pc}

1000ffaa <memcpy>:
1000ffaa:	2300      	movs	r3, #0
1000ffac:	b510      	push	{r4, lr}
1000ffae:	429a      	cmp	r2, r3
1000ffb0:	d003      	beq.n	1000ffba <memcpy+0x10>
1000ffb2:	5ccc      	ldrb	r4, [r1, r3]
1000ffb4:	54c4      	strb	r4, [r0, r3]
1000ffb6:	3301      	adds	r3, #1
1000ffb8:	e7f9      	b.n	1000ffae <memcpy+0x4>
1000ffba:	bd10      	pop	{r4, pc}

1000ffbc <memset>:
1000ffbc:	0003      	movs	r3, r0
1000ffbe:	1882      	adds	r2, r0, r2
1000ffc0:	4293      	cmp	r3, r2
1000ffc2:	d002      	beq.n	1000ffca <memset+0xe>
1000ffc4:	7019      	strb	r1, [r3, #0]
1000ffc6:	3301      	adds	r3, #1
1000ffc8:	e7fa      	b.n	1000ffc0 <memset+0x4>
1000ffca:	4770      	bx	lr

1000ffcc <iprintf>:
1000ffcc:	b40f      	push	{r0, r1, r2, r3}
1000ffce:	4b0b      	ldr	r3, [pc, #44]	; (1000fffc <iprintf+0x30>)
1000ffd0:	b513      	push	{r0, r1, r4, lr}
1000ffd2:	681c      	ldr	r4, [r3, #0]
1000ffd4:	2c00      	cmp	r4, #0
1000ffd6:	d005      	beq.n	1000ffe4 <iprintf+0x18>
1000ffd8:	69a3      	ldr	r3, [r4, #24]
1000ffda:	2b00      	cmp	r3, #0
1000ffdc:	d102      	bne.n	1000ffe4 <iprintf+0x18>
1000ffde:	0020      	movs	r0, r4
1000ffe0:	f000 fb46 	bl	10010670 <__sinit>
1000ffe4:	ab05      	add	r3, sp, #20
1000ffe6:	9a04      	ldr	r2, [sp, #16]
1000ffe8:	68a1      	ldr	r1, [r4, #8]
1000ffea:	0020      	movs	r0, r4
1000ffec:	9301      	str	r3, [sp, #4]
1000ffee:	f000 fd05 	bl	100109fc <_vfiprintf_r>
1000fff2:	bc16      	pop	{r1, r2, r4}
1000fff4:	bc08      	pop	{r3}
1000fff6:	b004      	add	sp, #16
1000fff8:	4718      	bx	r3
1000fffa:	46c0      	nop			; (mov r8, r8)
1000fffc:	1001215c 	.word	0x1001215c

10010000 <putchar>:
10010000:	4b08      	ldr	r3, [pc, #32]	; (10010024 <putchar+0x24>)
10010002:	b570      	push	{r4, r5, r6, lr}
10010004:	681c      	ldr	r4, [r3, #0]
10010006:	0005      	movs	r5, r0
10010008:	2c00      	cmp	r4, #0
1001000a:	d005      	beq.n	10010018 <putchar+0x18>
1001000c:	69a3      	ldr	r3, [r4, #24]
1001000e:	2b00      	cmp	r3, #0
10010010:	d102      	bne.n	10010018 <putchar+0x18>
10010012:	0020      	movs	r0, r4
10010014:	f000 fb2c 	bl	10010670 <__sinit>
10010018:	0029      	movs	r1, r5
1001001a:	68a2      	ldr	r2, [r4, #8]
1001001c:	0020      	movs	r0, r4
1001001e:	f000 ff99 	bl	10010f54 <_putc_r>
10010022:	bd70      	pop	{r4, r5, r6, pc}
10010024:	1001215c 	.word	0x1001215c

10010028 <_puts_r>:
10010028:	b570      	push	{r4, r5, r6, lr}
1001002a:	0005      	movs	r5, r0
1001002c:	000e      	movs	r6, r1
1001002e:	2800      	cmp	r0, #0
10010030:	d004      	beq.n	1001003c <_puts_r+0x14>
10010032:	6983      	ldr	r3, [r0, #24]
10010034:	2b00      	cmp	r3, #0
10010036:	d101      	bne.n	1001003c <_puts_r+0x14>
10010038:	f000 fb1a 	bl	10010670 <__sinit>
1001003c:	69ab      	ldr	r3, [r5, #24]
1001003e:	68ac      	ldr	r4, [r5, #8]
10010040:	2b00      	cmp	r3, #0
10010042:	d102      	bne.n	1001004a <_puts_r+0x22>
10010044:	0028      	movs	r0, r5
10010046:	f000 fb13 	bl	10010670 <__sinit>
1001004a:	4b25      	ldr	r3, [pc, #148]	; (100100e0 <_puts_r+0xb8>)
1001004c:	429c      	cmp	r4, r3
1001004e:	d101      	bne.n	10010054 <_puts_r+0x2c>
10010050:	686c      	ldr	r4, [r5, #4]
10010052:	e008      	b.n	10010066 <_puts_r+0x3e>
10010054:	4b23      	ldr	r3, [pc, #140]	; (100100e4 <_puts_r+0xbc>)
10010056:	429c      	cmp	r4, r3
10010058:	d101      	bne.n	1001005e <_puts_r+0x36>
1001005a:	68ac      	ldr	r4, [r5, #8]
1001005c:	e003      	b.n	10010066 <_puts_r+0x3e>
1001005e:	4b22      	ldr	r3, [pc, #136]	; (100100e8 <_puts_r+0xc0>)
10010060:	429c      	cmp	r4, r3
10010062:	d100      	bne.n	10010066 <_puts_r+0x3e>
10010064:	68ec      	ldr	r4, [r5, #12]
10010066:	89a3      	ldrh	r3, [r4, #12]
10010068:	071b      	lsls	r3, r3, #28
1001006a:	d502      	bpl.n	10010072 <_puts_r+0x4a>
1001006c:	6923      	ldr	r3, [r4, #16]
1001006e:	2b00      	cmp	r3, #0
10010070:	d111      	bne.n	10010096 <_puts_r+0x6e>
10010072:	0021      	movs	r1, r4
10010074:	0028      	movs	r0, r5
10010076:	f000 f991 	bl	1001039c <__swsetup_r>
1001007a:	2800      	cmp	r0, #0
1001007c:	d00b      	beq.n	10010096 <_puts_r+0x6e>
1001007e:	2001      	movs	r0, #1
10010080:	4240      	negs	r0, r0
10010082:	e02b      	b.n	100100dc <_puts_r+0xb4>
10010084:	3b01      	subs	r3, #1
10010086:	3601      	adds	r6, #1
10010088:	60a3      	str	r3, [r4, #8]
1001008a:	2b00      	cmp	r3, #0
1001008c:	db08      	blt.n	100100a0 <_puts_r+0x78>
1001008e:	6823      	ldr	r3, [r4, #0]
10010090:	1c5a      	adds	r2, r3, #1
10010092:	6022      	str	r2, [r4, #0]
10010094:	7019      	strb	r1, [r3, #0]
10010096:	7831      	ldrb	r1, [r6, #0]
10010098:	68a3      	ldr	r3, [r4, #8]
1001009a:	2900      	cmp	r1, #0
1001009c:	d1f2      	bne.n	10010084 <_puts_r+0x5c>
1001009e:	e00b      	b.n	100100b8 <_puts_r+0x90>
100100a0:	69a2      	ldr	r2, [r4, #24]
100100a2:	4293      	cmp	r3, r2
100100a4:	db01      	blt.n	100100aa <_puts_r+0x82>
100100a6:	290a      	cmp	r1, #10
100100a8:	d1f1      	bne.n	1001008e <_puts_r+0x66>
100100aa:	0022      	movs	r2, r4
100100ac:	0028      	movs	r0, r5
100100ae:	f000 f91d 	bl	100102ec <__swbuf_r>
100100b2:	1c43      	adds	r3, r0, #1
100100b4:	d1ef      	bne.n	10010096 <_puts_r+0x6e>
100100b6:	e7e2      	b.n	1001007e <_puts_r+0x56>
100100b8:	3b01      	subs	r3, #1
100100ba:	60a3      	str	r3, [r4, #8]
100100bc:	2b00      	cmp	r3, #0
100100be:	da08      	bge.n	100100d2 <_puts_r+0xaa>
100100c0:	0022      	movs	r2, r4
100100c2:	310a      	adds	r1, #10
100100c4:	0028      	movs	r0, r5
100100c6:	f000 f911 	bl	100102ec <__swbuf_r>
100100ca:	1c43      	adds	r3, r0, #1
100100cc:	d0d7      	beq.n	1001007e <_puts_r+0x56>
100100ce:	200a      	movs	r0, #10
100100d0:	e004      	b.n	100100dc <_puts_r+0xb4>
100100d2:	200a      	movs	r0, #10
100100d4:	6823      	ldr	r3, [r4, #0]
100100d6:	1c5a      	adds	r2, r3, #1
100100d8:	6022      	str	r2, [r4, #0]
100100da:	7018      	strb	r0, [r3, #0]
100100dc:	bd70      	pop	{r4, r5, r6, pc}
100100de:	46c0      	nop			; (mov r8, r8)
100100e0:	10012000 	.word	0x10012000
100100e4:	10012020 	.word	0x10012020
100100e8:	10012040 	.word	0x10012040

100100ec <puts>:
100100ec:	b510      	push	{r4, lr}
100100ee:	4b03      	ldr	r3, [pc, #12]	; (100100fc <puts+0x10>)
100100f0:	0001      	movs	r1, r0
100100f2:	6818      	ldr	r0, [r3, #0]
100100f4:	f7ff ff98 	bl	10010028 <_puts_r>
100100f8:	bd10      	pop	{r4, pc}
100100fa:	46c0      	nop			; (mov r8, r8)
100100fc:	1001215c 	.word	0x1001215c

10010100 <rand>:
10010100:	4b15      	ldr	r3, [pc, #84]	; (10010158 <rand+0x58>)
10010102:	b510      	push	{r4, lr}
10010104:	681c      	ldr	r4, [r3, #0]
10010106:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10010108:	2b00      	cmp	r3, #0
1001010a:	d115      	bne.n	10010138 <rand+0x38>
1001010c:	2018      	movs	r0, #24
1001010e:	f000 fba7 	bl	10010860 <malloc>
10010112:	4b12      	ldr	r3, [pc, #72]	; (1001015c <rand+0x5c>)
10010114:	63a0      	str	r0, [r4, #56]	; 0x38
10010116:	8003      	strh	r3, [r0, #0]
10010118:	4b11      	ldr	r3, [pc, #68]	; (10010160 <rand+0x60>)
1001011a:	2201      	movs	r2, #1
1001011c:	8043      	strh	r3, [r0, #2]
1001011e:	4b11      	ldr	r3, [pc, #68]	; (10010164 <rand+0x64>)
10010120:	8083      	strh	r3, [r0, #4]
10010122:	4b11      	ldr	r3, [pc, #68]	; (10010168 <rand+0x68>)
10010124:	80c3      	strh	r3, [r0, #6]
10010126:	4b11      	ldr	r3, [pc, #68]	; (1001016c <rand+0x6c>)
10010128:	8103      	strh	r3, [r0, #8]
1001012a:	2305      	movs	r3, #5
1001012c:	8143      	strh	r3, [r0, #10]
1001012e:	3306      	adds	r3, #6
10010130:	8183      	strh	r3, [r0, #12]
10010132:	2300      	movs	r3, #0
10010134:	6102      	str	r2, [r0, #16]
10010136:	6143      	str	r3, [r0, #20]
10010138:	6ba4      	ldr	r4, [r4, #56]	; 0x38
1001013a:	4a0d      	ldr	r2, [pc, #52]	; (10010170 <rand+0x70>)
1001013c:	6920      	ldr	r0, [r4, #16]
1001013e:	6961      	ldr	r1, [r4, #20]
10010140:	4b0c      	ldr	r3, [pc, #48]	; (10010174 <rand+0x74>)
10010142:	f7ff fed1 	bl	1000fee8 <__aeabi_lmul>
10010146:	2201      	movs	r2, #1
10010148:	2300      	movs	r3, #0
1001014a:	1880      	adds	r0, r0, r2
1001014c:	4159      	adcs	r1, r3
1001014e:	6120      	str	r0, [r4, #16]
10010150:	6161      	str	r1, [r4, #20]
10010152:	0048      	lsls	r0, r1, #1
10010154:	0840      	lsrs	r0, r0, #1
10010156:	bd10      	pop	{r4, pc}
10010158:	1001215c 	.word	0x1001215c
1001015c:	0000330e 	.word	0x0000330e
10010160:	ffffabcd 	.word	0xffffabcd
10010164:	00001234 	.word	0x00001234
10010168:	ffffe66d 	.word	0xffffe66d
1001016c:	ffffdeec 	.word	0xffffdeec
10010170:	4c957f2d 	.word	0x4c957f2d
10010174:	5851f42d 	.word	0x5851f42d

10010178 <setbuf>:
10010178:	424a      	negs	r2, r1
1001017a:	414a      	adcs	r2, r1
1001017c:	2380      	movs	r3, #128	; 0x80
1001017e:	b510      	push	{r4, lr}
10010180:	0052      	lsls	r2, r2, #1
10010182:	00db      	lsls	r3, r3, #3
10010184:	f000 f802 	bl	1001018c <setvbuf>
10010188:	bd10      	pop	{r4, pc}
	...

1001018c <setvbuf>:
1001018c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001018e:	001d      	movs	r5, r3
10010190:	4b51      	ldr	r3, [pc, #324]	; (100102d8 <setvbuf+0x14c>)
10010192:	b085      	sub	sp, #20
10010194:	681e      	ldr	r6, [r3, #0]
10010196:	0004      	movs	r4, r0
10010198:	000f      	movs	r7, r1
1001019a:	9200      	str	r2, [sp, #0]
1001019c:	2e00      	cmp	r6, #0
1001019e:	d005      	beq.n	100101ac <setvbuf+0x20>
100101a0:	69b3      	ldr	r3, [r6, #24]
100101a2:	2b00      	cmp	r3, #0
100101a4:	d102      	bne.n	100101ac <setvbuf+0x20>
100101a6:	0030      	movs	r0, r6
100101a8:	f000 fa62 	bl	10010670 <__sinit>
100101ac:	4b4b      	ldr	r3, [pc, #300]	; (100102dc <setvbuf+0x150>)
100101ae:	429c      	cmp	r4, r3
100101b0:	d101      	bne.n	100101b6 <setvbuf+0x2a>
100101b2:	6874      	ldr	r4, [r6, #4]
100101b4:	e008      	b.n	100101c8 <setvbuf+0x3c>
100101b6:	4b4a      	ldr	r3, [pc, #296]	; (100102e0 <setvbuf+0x154>)
100101b8:	429c      	cmp	r4, r3
100101ba:	d101      	bne.n	100101c0 <setvbuf+0x34>
100101bc:	68b4      	ldr	r4, [r6, #8]
100101be:	e003      	b.n	100101c8 <setvbuf+0x3c>
100101c0:	4b48      	ldr	r3, [pc, #288]	; (100102e4 <setvbuf+0x158>)
100101c2:	429c      	cmp	r4, r3
100101c4:	d100      	bne.n	100101c8 <setvbuf+0x3c>
100101c6:	68f4      	ldr	r4, [r6, #12]
100101c8:	9b00      	ldr	r3, [sp, #0]
100101ca:	2b02      	cmp	r3, #2
100101cc:	d005      	beq.n	100101da <setvbuf+0x4e>
100101ce:	2b01      	cmp	r3, #1
100101d0:	d900      	bls.n	100101d4 <setvbuf+0x48>
100101d2:	e07c      	b.n	100102ce <setvbuf+0x142>
100101d4:	2d00      	cmp	r5, #0
100101d6:	da00      	bge.n	100101da <setvbuf+0x4e>
100101d8:	e079      	b.n	100102ce <setvbuf+0x142>
100101da:	0021      	movs	r1, r4
100101dc:	0030      	movs	r0, r6
100101de:	f000 f9d9 	bl	10010594 <_fflush_r>
100101e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
100101e4:	2900      	cmp	r1, #0
100101e6:	d008      	beq.n	100101fa <setvbuf+0x6e>
100101e8:	0023      	movs	r3, r4
100101ea:	3344      	adds	r3, #68	; 0x44
100101ec:	4299      	cmp	r1, r3
100101ee:	d002      	beq.n	100101f6 <setvbuf+0x6a>
100101f0:	0030      	movs	r0, r6
100101f2:	f000 fb3f 	bl	10010874 <_free_r>
100101f6:	2300      	movs	r3, #0
100101f8:	6363      	str	r3, [r4, #52]	; 0x34
100101fa:	2300      	movs	r3, #0
100101fc:	61a3      	str	r3, [r4, #24]
100101fe:	6063      	str	r3, [r4, #4]
10010200:	89a3      	ldrh	r3, [r4, #12]
10010202:	061b      	lsls	r3, r3, #24
10010204:	d503      	bpl.n	1001020e <setvbuf+0x82>
10010206:	6921      	ldr	r1, [r4, #16]
10010208:	0030      	movs	r0, r6
1001020a:	f000 fb33 	bl	10010874 <_free_r>
1001020e:	89a2      	ldrh	r2, [r4, #12]
10010210:	4b35      	ldr	r3, [pc, #212]	; (100102e8 <setvbuf+0x15c>)
10010212:	4013      	ands	r3, r2
10010214:	81a3      	strh	r3, [r4, #12]
10010216:	9b00      	ldr	r3, [sp, #0]
10010218:	2b02      	cmp	r3, #2
1001021a:	d021      	beq.n	10010260 <setvbuf+0xd4>
1001021c:	ab03      	add	r3, sp, #12
1001021e:	aa02      	add	r2, sp, #8
10010220:	0021      	movs	r1, r4
10010222:	0030      	movs	r0, r6
10010224:	f000 fab8 	bl	10010798 <__swhatbuf_r>
10010228:	89a3      	ldrh	r3, [r4, #12]
1001022a:	4318      	orrs	r0, r3
1001022c:	81a0      	strh	r0, [r4, #12]
1001022e:	2d00      	cmp	r5, #0
10010230:	d101      	bne.n	10010236 <setvbuf+0xaa>
10010232:	9d02      	ldr	r5, [sp, #8]
10010234:	e001      	b.n	1001023a <setvbuf+0xae>
10010236:	2f00      	cmp	r7, #0
10010238:	d125      	bne.n	10010286 <setvbuf+0xfa>
1001023a:	0028      	movs	r0, r5
1001023c:	f000 fb10 	bl	10010860 <malloc>
10010240:	9501      	str	r5, [sp, #4]
10010242:	1e07      	subs	r7, r0, #0
10010244:	d11a      	bne.n	1001027c <setvbuf+0xf0>
10010246:	9b02      	ldr	r3, [sp, #8]
10010248:	9301      	str	r3, [sp, #4]
1001024a:	42ab      	cmp	r3, r5
1001024c:	d102      	bne.n	10010254 <setvbuf+0xc8>
1001024e:	2001      	movs	r0, #1
10010250:	4240      	negs	r0, r0
10010252:	e006      	b.n	10010262 <setvbuf+0xd6>
10010254:	9801      	ldr	r0, [sp, #4]
10010256:	f000 fb03 	bl	10010860 <malloc>
1001025a:	1e07      	subs	r7, r0, #0
1001025c:	d10e      	bne.n	1001027c <setvbuf+0xf0>
1001025e:	e7f6      	b.n	1001024e <setvbuf+0xc2>
10010260:	2000      	movs	r0, #0
10010262:	2202      	movs	r2, #2
10010264:	89a3      	ldrh	r3, [r4, #12]
10010266:	4313      	orrs	r3, r2
10010268:	81a3      	strh	r3, [r4, #12]
1001026a:	2300      	movs	r3, #0
1001026c:	60a3      	str	r3, [r4, #8]
1001026e:	0023      	movs	r3, r4
10010270:	3347      	adds	r3, #71	; 0x47
10010272:	6023      	str	r3, [r4, #0]
10010274:	6123      	str	r3, [r4, #16]
10010276:	2301      	movs	r3, #1
10010278:	6163      	str	r3, [r4, #20]
1001027a:	e02a      	b.n	100102d2 <setvbuf+0x146>
1001027c:	2280      	movs	r2, #128	; 0x80
1001027e:	89a3      	ldrh	r3, [r4, #12]
10010280:	9d01      	ldr	r5, [sp, #4]
10010282:	4313      	orrs	r3, r2
10010284:	81a3      	strh	r3, [r4, #12]
10010286:	69b3      	ldr	r3, [r6, #24]
10010288:	2b00      	cmp	r3, #0
1001028a:	d102      	bne.n	10010292 <setvbuf+0x106>
1001028c:	0030      	movs	r0, r6
1001028e:	f000 f9ef 	bl	10010670 <__sinit>
10010292:	9b00      	ldr	r3, [sp, #0]
10010294:	2b01      	cmp	r3, #1
10010296:	d103      	bne.n	100102a0 <setvbuf+0x114>
10010298:	89a3      	ldrh	r3, [r4, #12]
1001029a:	9a00      	ldr	r2, [sp, #0]
1001029c:	431a      	orrs	r2, r3
1001029e:	81a2      	strh	r2, [r4, #12]
100102a0:	2308      	movs	r3, #8
100102a2:	89a2      	ldrh	r2, [r4, #12]
100102a4:	6027      	str	r7, [r4, #0]
100102a6:	4013      	ands	r3, r2
100102a8:	6127      	str	r7, [r4, #16]
100102aa:	6165      	str	r5, [r4, #20]
100102ac:	1e18      	subs	r0, r3, #0
100102ae:	d00c      	beq.n	100102ca <setvbuf+0x13e>
100102b0:	2301      	movs	r3, #1
100102b2:	401a      	ands	r2, r3
100102b4:	2300      	movs	r3, #0
100102b6:	1e10      	subs	r0, r2, #0
100102b8:	4298      	cmp	r0, r3
100102ba:	d004      	beq.n	100102c6 <setvbuf+0x13a>
100102bc:	426d      	negs	r5, r5
100102be:	60a3      	str	r3, [r4, #8]
100102c0:	61a5      	str	r5, [r4, #24]
100102c2:	0018      	movs	r0, r3
100102c4:	e005      	b.n	100102d2 <setvbuf+0x146>
100102c6:	60a5      	str	r5, [r4, #8]
100102c8:	e003      	b.n	100102d2 <setvbuf+0x146>
100102ca:	60a3      	str	r3, [r4, #8]
100102cc:	e001      	b.n	100102d2 <setvbuf+0x146>
100102ce:	2001      	movs	r0, #1
100102d0:	4240      	negs	r0, r0
100102d2:	b005      	add	sp, #20
100102d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100102d6:	46c0      	nop			; (mov r8, r8)
100102d8:	1001215c 	.word	0x1001215c
100102dc:	10012000 	.word	0x10012000
100102e0:	10012020 	.word	0x10012020
100102e4:	10012040 	.word	0x10012040
100102e8:	fffff35c 	.word	0xfffff35c

100102ec <__swbuf_r>:
100102ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100102ee:	0005      	movs	r5, r0
100102f0:	000f      	movs	r7, r1
100102f2:	0014      	movs	r4, r2
100102f4:	2800      	cmp	r0, #0
100102f6:	d004      	beq.n	10010302 <__swbuf_r+0x16>
100102f8:	6983      	ldr	r3, [r0, #24]
100102fa:	2b00      	cmp	r3, #0
100102fc:	d101      	bne.n	10010302 <__swbuf_r+0x16>
100102fe:	f000 f9b7 	bl	10010670 <__sinit>
10010302:	4b23      	ldr	r3, [pc, #140]	; (10010390 <__swbuf_r+0xa4>)
10010304:	429c      	cmp	r4, r3
10010306:	d101      	bne.n	1001030c <__swbuf_r+0x20>
10010308:	686c      	ldr	r4, [r5, #4]
1001030a:	e008      	b.n	1001031e <__swbuf_r+0x32>
1001030c:	4b21      	ldr	r3, [pc, #132]	; (10010394 <__swbuf_r+0xa8>)
1001030e:	429c      	cmp	r4, r3
10010310:	d101      	bne.n	10010316 <__swbuf_r+0x2a>
10010312:	68ac      	ldr	r4, [r5, #8]
10010314:	e003      	b.n	1001031e <__swbuf_r+0x32>
10010316:	4b20      	ldr	r3, [pc, #128]	; (10010398 <__swbuf_r+0xac>)
10010318:	429c      	cmp	r4, r3
1001031a:	d100      	bne.n	1001031e <__swbuf_r+0x32>
1001031c:	68ec      	ldr	r4, [r5, #12]
1001031e:	69a3      	ldr	r3, [r4, #24]
10010320:	60a3      	str	r3, [r4, #8]
10010322:	89a3      	ldrh	r3, [r4, #12]
10010324:	071b      	lsls	r3, r3, #28
10010326:	d50a      	bpl.n	1001033e <__swbuf_r+0x52>
10010328:	6923      	ldr	r3, [r4, #16]
1001032a:	2b00      	cmp	r3, #0
1001032c:	d007      	beq.n	1001033e <__swbuf_r+0x52>
1001032e:	6823      	ldr	r3, [r4, #0]
10010330:	6922      	ldr	r2, [r4, #16]
10010332:	b2fe      	uxtb	r6, r7
10010334:	1a98      	subs	r0, r3, r2
10010336:	6963      	ldr	r3, [r4, #20]
10010338:	4298      	cmp	r0, r3
1001033a:	db0f      	blt.n	1001035c <__swbuf_r+0x70>
1001033c:	e008      	b.n	10010350 <__swbuf_r+0x64>
1001033e:	0021      	movs	r1, r4
10010340:	0028      	movs	r0, r5
10010342:	f000 f82b 	bl	1001039c <__swsetup_r>
10010346:	2800      	cmp	r0, #0
10010348:	d0f1      	beq.n	1001032e <__swbuf_r+0x42>
1001034a:	2001      	movs	r0, #1
1001034c:	4240      	negs	r0, r0
1001034e:	e01d      	b.n	1001038c <__swbuf_r+0xa0>
10010350:	0021      	movs	r1, r4
10010352:	0028      	movs	r0, r5
10010354:	f000 f91e 	bl	10010594 <_fflush_r>
10010358:	2800      	cmp	r0, #0
1001035a:	d1f6      	bne.n	1001034a <__swbuf_r+0x5e>
1001035c:	68a3      	ldr	r3, [r4, #8]
1001035e:	3001      	adds	r0, #1
10010360:	3b01      	subs	r3, #1
10010362:	60a3      	str	r3, [r4, #8]
10010364:	6823      	ldr	r3, [r4, #0]
10010366:	1c5a      	adds	r2, r3, #1
10010368:	6022      	str	r2, [r4, #0]
1001036a:	701f      	strb	r7, [r3, #0]
1001036c:	6963      	ldr	r3, [r4, #20]
1001036e:	4298      	cmp	r0, r3
10010370:	d005      	beq.n	1001037e <__swbuf_r+0x92>
10010372:	89a3      	ldrh	r3, [r4, #12]
10010374:	0030      	movs	r0, r6
10010376:	07db      	lsls	r3, r3, #31
10010378:	d508      	bpl.n	1001038c <__swbuf_r+0xa0>
1001037a:	2e0a      	cmp	r6, #10
1001037c:	d106      	bne.n	1001038c <__swbuf_r+0xa0>
1001037e:	0021      	movs	r1, r4
10010380:	0028      	movs	r0, r5
10010382:	f000 f907 	bl	10010594 <_fflush_r>
10010386:	2800      	cmp	r0, #0
10010388:	d1df      	bne.n	1001034a <__swbuf_r+0x5e>
1001038a:	0030      	movs	r0, r6
1001038c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001038e:	46c0      	nop			; (mov r8, r8)
10010390:	10012000 	.word	0x10012000
10010394:	10012020 	.word	0x10012020
10010398:	10012040 	.word	0x10012040

1001039c <__swsetup_r>:
1001039c:	4b36      	ldr	r3, [pc, #216]	; (10010478 <__swsetup_r+0xdc>)
1001039e:	b570      	push	{r4, r5, r6, lr}
100103a0:	681d      	ldr	r5, [r3, #0]
100103a2:	0006      	movs	r6, r0
100103a4:	000c      	movs	r4, r1
100103a6:	2d00      	cmp	r5, #0
100103a8:	d005      	beq.n	100103b6 <__swsetup_r+0x1a>
100103aa:	69ab      	ldr	r3, [r5, #24]
100103ac:	2b00      	cmp	r3, #0
100103ae:	d102      	bne.n	100103b6 <__swsetup_r+0x1a>
100103b0:	0028      	movs	r0, r5
100103b2:	f000 f95d 	bl	10010670 <__sinit>
100103b6:	4b31      	ldr	r3, [pc, #196]	; (1001047c <__swsetup_r+0xe0>)
100103b8:	429c      	cmp	r4, r3
100103ba:	d101      	bne.n	100103c0 <__swsetup_r+0x24>
100103bc:	686c      	ldr	r4, [r5, #4]
100103be:	e008      	b.n	100103d2 <__swsetup_r+0x36>
100103c0:	4b2f      	ldr	r3, [pc, #188]	; (10010480 <__swsetup_r+0xe4>)
100103c2:	429c      	cmp	r4, r3
100103c4:	d101      	bne.n	100103ca <__swsetup_r+0x2e>
100103c6:	68ac      	ldr	r4, [r5, #8]
100103c8:	e003      	b.n	100103d2 <__swsetup_r+0x36>
100103ca:	4b2e      	ldr	r3, [pc, #184]	; (10010484 <__swsetup_r+0xe8>)
100103cc:	429c      	cmp	r4, r3
100103ce:	d100      	bne.n	100103d2 <__swsetup_r+0x36>
100103d0:	68ec      	ldr	r4, [r5, #12]
100103d2:	220c      	movs	r2, #12
100103d4:	5ea3      	ldrsh	r3, [r4, r2]
100103d6:	b29a      	uxth	r2, r3
100103d8:	0711      	lsls	r1, r2, #28
100103da:	d423      	bmi.n	10010424 <__swsetup_r+0x88>
100103dc:	06d1      	lsls	r1, r2, #27
100103de:	d407      	bmi.n	100103f0 <__swsetup_r+0x54>
100103e0:	2209      	movs	r2, #9
100103e2:	2001      	movs	r0, #1
100103e4:	6032      	str	r2, [r6, #0]
100103e6:	3237      	adds	r2, #55	; 0x37
100103e8:	4313      	orrs	r3, r2
100103ea:	81a3      	strh	r3, [r4, #12]
100103ec:	4240      	negs	r0, r0
100103ee:	e042      	b.n	10010476 <__swsetup_r+0xda>
100103f0:	0753      	lsls	r3, r2, #29
100103f2:	d513      	bpl.n	1001041c <__swsetup_r+0x80>
100103f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
100103f6:	2900      	cmp	r1, #0
100103f8:	d008      	beq.n	1001040c <__swsetup_r+0x70>
100103fa:	0023      	movs	r3, r4
100103fc:	3344      	adds	r3, #68	; 0x44
100103fe:	4299      	cmp	r1, r3
10010400:	d002      	beq.n	10010408 <__swsetup_r+0x6c>
10010402:	0030      	movs	r0, r6
10010404:	f000 fa36 	bl	10010874 <_free_r>
10010408:	2300      	movs	r3, #0
1001040a:	6363      	str	r3, [r4, #52]	; 0x34
1001040c:	2224      	movs	r2, #36	; 0x24
1001040e:	89a3      	ldrh	r3, [r4, #12]
10010410:	4393      	bics	r3, r2
10010412:	81a3      	strh	r3, [r4, #12]
10010414:	2300      	movs	r3, #0
10010416:	6063      	str	r3, [r4, #4]
10010418:	6923      	ldr	r3, [r4, #16]
1001041a:	6023      	str	r3, [r4, #0]
1001041c:	2208      	movs	r2, #8
1001041e:	89a3      	ldrh	r3, [r4, #12]
10010420:	4313      	orrs	r3, r2
10010422:	81a3      	strh	r3, [r4, #12]
10010424:	6923      	ldr	r3, [r4, #16]
10010426:	2b00      	cmp	r3, #0
10010428:	d10b      	bne.n	10010442 <__swsetup_r+0xa6>
1001042a:	23a0      	movs	r3, #160	; 0xa0
1001042c:	89a2      	ldrh	r2, [r4, #12]
1001042e:	009b      	lsls	r3, r3, #2
10010430:	4013      	ands	r3, r2
10010432:	2280      	movs	r2, #128	; 0x80
10010434:	0092      	lsls	r2, r2, #2
10010436:	4293      	cmp	r3, r2
10010438:	d003      	beq.n	10010442 <__swsetup_r+0xa6>
1001043a:	0021      	movs	r1, r4
1001043c:	0030      	movs	r0, r6
1001043e:	f000 f9d1 	bl	100107e4 <__smakebuf_r>
10010442:	2301      	movs	r3, #1
10010444:	89a2      	ldrh	r2, [r4, #12]
10010446:	4013      	ands	r3, r2
10010448:	d005      	beq.n	10010456 <__swsetup_r+0xba>
1001044a:	2300      	movs	r3, #0
1001044c:	60a3      	str	r3, [r4, #8]
1001044e:	6963      	ldr	r3, [r4, #20]
10010450:	425b      	negs	r3, r3
10010452:	61a3      	str	r3, [r4, #24]
10010454:	e003      	b.n	1001045e <__swsetup_r+0xc2>
10010456:	0792      	lsls	r2, r2, #30
10010458:	d400      	bmi.n	1001045c <__swsetup_r+0xc0>
1001045a:	6963      	ldr	r3, [r4, #20]
1001045c:	60a3      	str	r3, [r4, #8]
1001045e:	2000      	movs	r0, #0
10010460:	6923      	ldr	r3, [r4, #16]
10010462:	4283      	cmp	r3, r0
10010464:	d107      	bne.n	10010476 <__swsetup_r+0xda>
10010466:	220c      	movs	r2, #12
10010468:	5ea3      	ldrsh	r3, [r4, r2]
1001046a:	061a      	lsls	r2, r3, #24
1001046c:	d503      	bpl.n	10010476 <__swsetup_r+0xda>
1001046e:	2240      	movs	r2, #64	; 0x40
10010470:	4313      	orrs	r3, r2
10010472:	81a3      	strh	r3, [r4, #12]
10010474:	3801      	subs	r0, #1
10010476:	bd70      	pop	{r4, r5, r6, pc}
10010478:	1001215c 	.word	0x1001215c
1001047c:	10012000 	.word	0x10012000
10010480:	10012020 	.word	0x10012020
10010484:	10012040 	.word	0x10012040

10010488 <__sflush_r>:
10010488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001048a:	898a      	ldrh	r2, [r1, #12]
1001048c:	0005      	movs	r5, r0
1001048e:	000c      	movs	r4, r1
10010490:	0713      	lsls	r3, r2, #28
10010492:	d45a      	bmi.n	1001054a <__sflush_r+0xc2>
10010494:	684b      	ldr	r3, [r1, #4]
10010496:	2b00      	cmp	r3, #0
10010498:	dc02      	bgt.n	100104a0 <__sflush_r+0x18>
1001049a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1001049c:	2b00      	cmp	r3, #0
1001049e:	dd19      	ble.n	100104d4 <__sflush_r+0x4c>
100104a0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
100104a2:	2f00      	cmp	r7, #0
100104a4:	d016      	beq.n	100104d4 <__sflush_r+0x4c>
100104a6:	2300      	movs	r3, #0
100104a8:	682e      	ldr	r6, [r5, #0]
100104aa:	602b      	str	r3, [r5, #0]
100104ac:	2380      	movs	r3, #128	; 0x80
100104ae:	015b      	lsls	r3, r3, #5
100104b0:	401a      	ands	r2, r3
100104b2:	d001      	beq.n	100104b8 <__sflush_r+0x30>
100104b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
100104b6:	e014      	b.n	100104e2 <__sflush_r+0x5a>
100104b8:	2301      	movs	r3, #1
100104ba:	6a21      	ldr	r1, [r4, #32]
100104bc:	0028      	movs	r0, r5
100104be:	47b8      	blx	r7
100104c0:	1c43      	adds	r3, r0, #1
100104c2:	d10e      	bne.n	100104e2 <__sflush_r+0x5a>
100104c4:	682b      	ldr	r3, [r5, #0]
100104c6:	2b00      	cmp	r3, #0
100104c8:	d00b      	beq.n	100104e2 <__sflush_r+0x5a>
100104ca:	2b1d      	cmp	r3, #29
100104cc:	d001      	beq.n	100104d2 <__sflush_r+0x4a>
100104ce:	2b16      	cmp	r3, #22
100104d0:	d102      	bne.n	100104d8 <__sflush_r+0x50>
100104d2:	602e      	str	r6, [r5, #0]
100104d4:	2000      	movs	r0, #0
100104d6:	e05a      	b.n	1001058e <__sflush_r+0x106>
100104d8:	2240      	movs	r2, #64	; 0x40
100104da:	89a3      	ldrh	r3, [r4, #12]
100104dc:	4313      	orrs	r3, r2
100104de:	81a3      	strh	r3, [r4, #12]
100104e0:	e055      	b.n	1001058e <__sflush_r+0x106>
100104e2:	89a3      	ldrh	r3, [r4, #12]
100104e4:	075b      	lsls	r3, r3, #29
100104e6:	d506      	bpl.n	100104f6 <__sflush_r+0x6e>
100104e8:	6863      	ldr	r3, [r4, #4]
100104ea:	1ac0      	subs	r0, r0, r3
100104ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
100104ee:	2b00      	cmp	r3, #0
100104f0:	d001      	beq.n	100104f6 <__sflush_r+0x6e>
100104f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
100104f4:	1ac0      	subs	r0, r0, r3
100104f6:	2300      	movs	r3, #0
100104f8:	0002      	movs	r2, r0
100104fa:	6a21      	ldr	r1, [r4, #32]
100104fc:	0028      	movs	r0, r5
100104fe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10010500:	47b8      	blx	r7
10010502:	89a3      	ldrh	r3, [r4, #12]
10010504:	1c42      	adds	r2, r0, #1
10010506:	d106      	bne.n	10010516 <__sflush_r+0x8e>
10010508:	6829      	ldr	r1, [r5, #0]
1001050a:	291d      	cmp	r1, #29
1001050c:	d83a      	bhi.n	10010584 <__sflush_r+0xfc>
1001050e:	4a20      	ldr	r2, [pc, #128]	; (10010590 <__sflush_r+0x108>)
10010510:	40ca      	lsrs	r2, r1
10010512:	07d2      	lsls	r2, r2, #31
10010514:	d536      	bpl.n	10010584 <__sflush_r+0xfc>
10010516:	2200      	movs	r2, #0
10010518:	6062      	str	r2, [r4, #4]
1001051a:	6922      	ldr	r2, [r4, #16]
1001051c:	6022      	str	r2, [r4, #0]
1001051e:	04db      	lsls	r3, r3, #19
10010520:	d505      	bpl.n	1001052e <__sflush_r+0xa6>
10010522:	1c43      	adds	r3, r0, #1
10010524:	d102      	bne.n	1001052c <__sflush_r+0xa4>
10010526:	682b      	ldr	r3, [r5, #0]
10010528:	2b00      	cmp	r3, #0
1001052a:	d100      	bne.n	1001052e <__sflush_r+0xa6>
1001052c:	6560      	str	r0, [r4, #84]	; 0x54
1001052e:	6b61      	ldr	r1, [r4, #52]	; 0x34
10010530:	602e      	str	r6, [r5, #0]
10010532:	2900      	cmp	r1, #0
10010534:	d0ce      	beq.n	100104d4 <__sflush_r+0x4c>
10010536:	0023      	movs	r3, r4
10010538:	3344      	adds	r3, #68	; 0x44
1001053a:	4299      	cmp	r1, r3
1001053c:	d002      	beq.n	10010544 <__sflush_r+0xbc>
1001053e:	0028      	movs	r0, r5
10010540:	f000 f998 	bl	10010874 <_free_r>
10010544:	2000      	movs	r0, #0
10010546:	6360      	str	r0, [r4, #52]	; 0x34
10010548:	e021      	b.n	1001058e <__sflush_r+0x106>
1001054a:	690f      	ldr	r7, [r1, #16]
1001054c:	2f00      	cmp	r7, #0
1001054e:	d0c1      	beq.n	100104d4 <__sflush_r+0x4c>
10010550:	680b      	ldr	r3, [r1, #0]
10010552:	600f      	str	r7, [r1, #0]
10010554:	1bdb      	subs	r3, r3, r7
10010556:	9301      	str	r3, [sp, #4]
10010558:	2300      	movs	r3, #0
1001055a:	0792      	lsls	r2, r2, #30
1001055c:	d100      	bne.n	10010560 <__sflush_r+0xd8>
1001055e:	694b      	ldr	r3, [r1, #20]
10010560:	60a3      	str	r3, [r4, #8]
10010562:	e003      	b.n	1001056c <__sflush_r+0xe4>
10010564:	9b01      	ldr	r3, [sp, #4]
10010566:	183f      	adds	r7, r7, r0
10010568:	1a1b      	subs	r3, r3, r0
1001056a:	9301      	str	r3, [sp, #4]
1001056c:	9b01      	ldr	r3, [sp, #4]
1001056e:	2b00      	cmp	r3, #0
10010570:	ddb0      	ble.n	100104d4 <__sflush_r+0x4c>
10010572:	9b01      	ldr	r3, [sp, #4]
10010574:	003a      	movs	r2, r7
10010576:	6a21      	ldr	r1, [r4, #32]
10010578:	0028      	movs	r0, r5
1001057a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1001057c:	47b0      	blx	r6
1001057e:	2800      	cmp	r0, #0
10010580:	dcf0      	bgt.n	10010564 <__sflush_r+0xdc>
10010582:	89a3      	ldrh	r3, [r4, #12]
10010584:	2240      	movs	r2, #64	; 0x40
10010586:	2001      	movs	r0, #1
10010588:	4313      	orrs	r3, r2
1001058a:	81a3      	strh	r3, [r4, #12]
1001058c:	4240      	negs	r0, r0
1001058e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010590:	20400001 	.word	0x20400001

10010594 <_fflush_r>:
10010594:	690b      	ldr	r3, [r1, #16]
10010596:	b570      	push	{r4, r5, r6, lr}
10010598:	0005      	movs	r5, r0
1001059a:	000c      	movs	r4, r1
1001059c:	2b00      	cmp	r3, #0
1001059e:	d101      	bne.n	100105a4 <_fflush_r+0x10>
100105a0:	2000      	movs	r0, #0
100105a2:	e01c      	b.n	100105de <_fflush_r+0x4a>
100105a4:	2800      	cmp	r0, #0
100105a6:	d004      	beq.n	100105b2 <_fflush_r+0x1e>
100105a8:	6983      	ldr	r3, [r0, #24]
100105aa:	2b00      	cmp	r3, #0
100105ac:	d101      	bne.n	100105b2 <_fflush_r+0x1e>
100105ae:	f000 f85f 	bl	10010670 <__sinit>
100105b2:	4b0b      	ldr	r3, [pc, #44]	; (100105e0 <_fflush_r+0x4c>)
100105b4:	429c      	cmp	r4, r3
100105b6:	d101      	bne.n	100105bc <_fflush_r+0x28>
100105b8:	686c      	ldr	r4, [r5, #4]
100105ba:	e008      	b.n	100105ce <_fflush_r+0x3a>
100105bc:	4b09      	ldr	r3, [pc, #36]	; (100105e4 <_fflush_r+0x50>)
100105be:	429c      	cmp	r4, r3
100105c0:	d101      	bne.n	100105c6 <_fflush_r+0x32>
100105c2:	68ac      	ldr	r4, [r5, #8]
100105c4:	e003      	b.n	100105ce <_fflush_r+0x3a>
100105c6:	4b08      	ldr	r3, [pc, #32]	; (100105e8 <_fflush_r+0x54>)
100105c8:	429c      	cmp	r4, r3
100105ca:	d100      	bne.n	100105ce <_fflush_r+0x3a>
100105cc:	68ec      	ldr	r4, [r5, #12]
100105ce:	220c      	movs	r2, #12
100105d0:	5ea3      	ldrsh	r3, [r4, r2]
100105d2:	2b00      	cmp	r3, #0
100105d4:	d0e4      	beq.n	100105a0 <_fflush_r+0xc>
100105d6:	0021      	movs	r1, r4
100105d8:	0028      	movs	r0, r5
100105da:	f7ff ff55 	bl	10010488 <__sflush_r>
100105de:	bd70      	pop	{r4, r5, r6, pc}
100105e0:	10012000 	.word	0x10012000
100105e4:	10012020 	.word	0x10012020
100105e8:	10012040 	.word	0x10012040

100105ec <_cleanup_r>:
100105ec:	b510      	push	{r4, lr}
100105ee:	4902      	ldr	r1, [pc, #8]	; (100105f8 <_cleanup_r+0xc>)
100105f0:	f000 f8b0 	bl	10010754 <_fwalk_reent>
100105f4:	bd10      	pop	{r4, pc}
100105f6:	46c0      	nop			; (mov r8, r8)
100105f8:	10010595 	.word	0x10010595

100105fc <std.isra.0>:
100105fc:	2300      	movs	r3, #0
100105fe:	b510      	push	{r4, lr}
10010600:	0004      	movs	r4, r0
10010602:	6003      	str	r3, [r0, #0]
10010604:	6043      	str	r3, [r0, #4]
10010606:	6083      	str	r3, [r0, #8]
10010608:	8181      	strh	r1, [r0, #12]
1001060a:	6643      	str	r3, [r0, #100]	; 0x64
1001060c:	81c2      	strh	r2, [r0, #14]
1001060e:	6103      	str	r3, [r0, #16]
10010610:	6143      	str	r3, [r0, #20]
10010612:	6183      	str	r3, [r0, #24]
10010614:	0019      	movs	r1, r3
10010616:	2208      	movs	r2, #8
10010618:	305c      	adds	r0, #92	; 0x5c
1001061a:	f7ff fccf 	bl	1000ffbc <memset>
1001061e:	4b05      	ldr	r3, [pc, #20]	; (10010634 <std.isra.0+0x38>)
10010620:	6224      	str	r4, [r4, #32]
10010622:	6263      	str	r3, [r4, #36]	; 0x24
10010624:	4b04      	ldr	r3, [pc, #16]	; (10010638 <std.isra.0+0x3c>)
10010626:	62a3      	str	r3, [r4, #40]	; 0x28
10010628:	4b04      	ldr	r3, [pc, #16]	; (1001063c <std.isra.0+0x40>)
1001062a:	62e3      	str	r3, [r4, #44]	; 0x2c
1001062c:	4b04      	ldr	r3, [pc, #16]	; (10010640 <std.isra.0+0x44>)
1001062e:	6323      	str	r3, [r4, #48]	; 0x30
10010630:	bd10      	pop	{r4, pc}
10010632:	46c0      	nop			; (mov r8, r8)
10010634:	10010fe5 	.word	0x10010fe5
10010638:	1001100d 	.word	0x1001100d
1001063c:	10011045 	.word	0x10011045
10010640:	10011071 	.word	0x10011071

10010644 <__sfmoreglue>:
10010644:	b570      	push	{r4, r5, r6, lr}
10010646:	2568      	movs	r5, #104	; 0x68
10010648:	1e4b      	subs	r3, r1, #1
1001064a:	435d      	muls	r5, r3
1001064c:	000e      	movs	r6, r1
1001064e:	0029      	movs	r1, r5
10010650:	3174      	adds	r1, #116	; 0x74
10010652:	f000 f955 	bl	10010900 <_malloc_r>
10010656:	1e04      	subs	r4, r0, #0
10010658:	d008      	beq.n	1001066c <__sfmoreglue+0x28>
1001065a:	2100      	movs	r1, #0
1001065c:	002a      	movs	r2, r5
1001065e:	6001      	str	r1, [r0, #0]
10010660:	6046      	str	r6, [r0, #4]
10010662:	300c      	adds	r0, #12
10010664:	60a0      	str	r0, [r4, #8]
10010666:	3268      	adds	r2, #104	; 0x68
10010668:	f7ff fca8 	bl	1000ffbc <memset>
1001066c:	0020      	movs	r0, r4
1001066e:	bd70      	pop	{r4, r5, r6, pc}

10010670 <__sinit>:
10010670:	6983      	ldr	r3, [r0, #24]
10010672:	b513      	push	{r0, r1, r4, lr}
10010674:	0004      	movs	r4, r0
10010676:	2b00      	cmp	r3, #0
10010678:	d128      	bne.n	100106cc <__sinit+0x5c>
1001067a:	6483      	str	r3, [r0, #72]	; 0x48
1001067c:	64c3      	str	r3, [r0, #76]	; 0x4c
1001067e:	6503      	str	r3, [r0, #80]	; 0x50
10010680:	4b13      	ldr	r3, [pc, #76]	; (100106d0 <__sinit+0x60>)
10010682:	4a14      	ldr	r2, [pc, #80]	; (100106d4 <__sinit+0x64>)
10010684:	681b      	ldr	r3, [r3, #0]
10010686:	6282      	str	r2, [r0, #40]	; 0x28
10010688:	9301      	str	r3, [sp, #4]
1001068a:	4298      	cmp	r0, r3
1001068c:	d101      	bne.n	10010692 <__sinit+0x22>
1001068e:	2301      	movs	r3, #1
10010690:	6183      	str	r3, [r0, #24]
10010692:	0020      	movs	r0, r4
10010694:	f000 f820 	bl	100106d8 <__sfp>
10010698:	6060      	str	r0, [r4, #4]
1001069a:	0020      	movs	r0, r4
1001069c:	f000 f81c 	bl	100106d8 <__sfp>
100106a0:	60a0      	str	r0, [r4, #8]
100106a2:	0020      	movs	r0, r4
100106a4:	f000 f818 	bl	100106d8 <__sfp>
100106a8:	2200      	movs	r2, #0
100106aa:	60e0      	str	r0, [r4, #12]
100106ac:	2104      	movs	r1, #4
100106ae:	6860      	ldr	r0, [r4, #4]
100106b0:	f7ff ffa4 	bl	100105fc <std.isra.0>
100106b4:	2201      	movs	r2, #1
100106b6:	2109      	movs	r1, #9
100106b8:	68a0      	ldr	r0, [r4, #8]
100106ba:	f7ff ff9f 	bl	100105fc <std.isra.0>
100106be:	2202      	movs	r2, #2
100106c0:	2112      	movs	r1, #18
100106c2:	68e0      	ldr	r0, [r4, #12]
100106c4:	f7ff ff9a 	bl	100105fc <std.isra.0>
100106c8:	2301      	movs	r3, #1
100106ca:	61a3      	str	r3, [r4, #24]
100106cc:	bd13      	pop	{r0, r1, r4, pc}
100106ce:	46c0      	nop			; (mov r8, r8)
100106d0:	10011ffc 	.word	0x10011ffc
100106d4:	100105ed 	.word	0x100105ed

100106d8 <__sfp>:
100106d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100106da:	4b1d      	ldr	r3, [pc, #116]	; (10010750 <__sfp+0x78>)
100106dc:	0006      	movs	r6, r0
100106de:	681d      	ldr	r5, [r3, #0]
100106e0:	69ab      	ldr	r3, [r5, #24]
100106e2:	2b00      	cmp	r3, #0
100106e4:	d102      	bne.n	100106ec <__sfp+0x14>
100106e6:	0028      	movs	r0, r5
100106e8:	f7ff ffc2 	bl	10010670 <__sinit>
100106ec:	3548      	adds	r5, #72	; 0x48
100106ee:	68ac      	ldr	r4, [r5, #8]
100106f0:	686b      	ldr	r3, [r5, #4]
100106f2:	3b01      	subs	r3, #1
100106f4:	d405      	bmi.n	10010702 <__sfp+0x2a>
100106f6:	220c      	movs	r2, #12
100106f8:	5ea7      	ldrsh	r7, [r4, r2]
100106fa:	2f00      	cmp	r7, #0
100106fc:	d010      	beq.n	10010720 <__sfp+0x48>
100106fe:	3468      	adds	r4, #104	; 0x68
10010700:	e7f7      	b.n	100106f2 <__sfp+0x1a>
10010702:	682b      	ldr	r3, [r5, #0]
10010704:	2b00      	cmp	r3, #0
10010706:	d001      	beq.n	1001070c <__sfp+0x34>
10010708:	682d      	ldr	r5, [r5, #0]
1001070a:	e7f0      	b.n	100106ee <__sfp+0x16>
1001070c:	2104      	movs	r1, #4
1001070e:	0030      	movs	r0, r6
10010710:	f7ff ff98 	bl	10010644 <__sfmoreglue>
10010714:	6028      	str	r0, [r5, #0]
10010716:	2800      	cmp	r0, #0
10010718:	d1f6      	bne.n	10010708 <__sfp+0x30>
1001071a:	230c      	movs	r3, #12
1001071c:	6033      	str	r3, [r6, #0]
1001071e:	e016      	b.n	1001074e <__sfp+0x76>
10010720:	2301      	movs	r3, #1
10010722:	0020      	movs	r0, r4
10010724:	425b      	negs	r3, r3
10010726:	81e3      	strh	r3, [r4, #14]
10010728:	3302      	adds	r3, #2
1001072a:	81a3      	strh	r3, [r4, #12]
1001072c:	6667      	str	r7, [r4, #100]	; 0x64
1001072e:	6027      	str	r7, [r4, #0]
10010730:	60a7      	str	r7, [r4, #8]
10010732:	6067      	str	r7, [r4, #4]
10010734:	6127      	str	r7, [r4, #16]
10010736:	6167      	str	r7, [r4, #20]
10010738:	61a7      	str	r7, [r4, #24]
1001073a:	305c      	adds	r0, #92	; 0x5c
1001073c:	2208      	movs	r2, #8
1001073e:	0039      	movs	r1, r7
10010740:	f7ff fc3c 	bl	1000ffbc <memset>
10010744:	0020      	movs	r0, r4
10010746:	6367      	str	r7, [r4, #52]	; 0x34
10010748:	63a7      	str	r7, [r4, #56]	; 0x38
1001074a:	64a7      	str	r7, [r4, #72]	; 0x48
1001074c:	64e7      	str	r7, [r4, #76]	; 0x4c
1001074e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010750:	10011ffc 	.word	0x10011ffc

10010754 <_fwalk_reent>:
10010754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010756:	0004      	movs	r4, r0
10010758:	0007      	movs	r7, r0
1001075a:	2600      	movs	r6, #0
1001075c:	9101      	str	r1, [sp, #4]
1001075e:	3448      	adds	r4, #72	; 0x48
10010760:	2c00      	cmp	r4, #0
10010762:	d016      	beq.n	10010792 <_fwalk_reent+0x3e>
10010764:	6863      	ldr	r3, [r4, #4]
10010766:	68a5      	ldr	r5, [r4, #8]
10010768:	9300      	str	r3, [sp, #0]
1001076a:	9b00      	ldr	r3, [sp, #0]
1001076c:	3b01      	subs	r3, #1
1001076e:	9300      	str	r3, [sp, #0]
10010770:	d40d      	bmi.n	1001078e <_fwalk_reent+0x3a>
10010772:	89ab      	ldrh	r3, [r5, #12]
10010774:	2b01      	cmp	r3, #1
10010776:	d908      	bls.n	1001078a <_fwalk_reent+0x36>
10010778:	220e      	movs	r2, #14
1001077a:	5eab      	ldrsh	r3, [r5, r2]
1001077c:	3301      	adds	r3, #1
1001077e:	d004      	beq.n	1001078a <_fwalk_reent+0x36>
10010780:	0029      	movs	r1, r5
10010782:	0038      	movs	r0, r7
10010784:	9b01      	ldr	r3, [sp, #4]
10010786:	4798      	blx	r3
10010788:	4306      	orrs	r6, r0
1001078a:	3568      	adds	r5, #104	; 0x68
1001078c:	e7ed      	b.n	1001076a <_fwalk_reent+0x16>
1001078e:	6824      	ldr	r4, [r4, #0]
10010790:	e7e6      	b.n	10010760 <_fwalk_reent+0xc>
10010792:	0030      	movs	r0, r6
10010794:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10010798 <__swhatbuf_r>:
10010798:	b570      	push	{r4, r5, r6, lr}
1001079a:	000e      	movs	r6, r1
1001079c:	001d      	movs	r5, r3
1001079e:	230e      	movs	r3, #14
100107a0:	5ec9      	ldrsh	r1, [r1, r3]
100107a2:	b090      	sub	sp, #64	; 0x40
100107a4:	0014      	movs	r4, r2
100107a6:	2900      	cmp	r1, #0
100107a8:	da06      	bge.n	100107b8 <__swhatbuf_r+0x20>
100107aa:	2300      	movs	r3, #0
100107ac:	602b      	str	r3, [r5, #0]
100107ae:	89b3      	ldrh	r3, [r6, #12]
100107b0:	061b      	lsls	r3, r3, #24
100107b2:	d50f      	bpl.n	100107d4 <__swhatbuf_r+0x3c>
100107b4:	2340      	movs	r3, #64	; 0x40
100107b6:	e00f      	b.n	100107d8 <__swhatbuf_r+0x40>
100107b8:	aa01      	add	r2, sp, #4
100107ba:	f000 fc85 	bl	100110c8 <_fstat_r>
100107be:	2800      	cmp	r0, #0
100107c0:	dbf3      	blt.n	100107aa <__swhatbuf_r+0x12>
100107c2:	23f0      	movs	r3, #240	; 0xf0
100107c4:	9a02      	ldr	r2, [sp, #8]
100107c6:	021b      	lsls	r3, r3, #8
100107c8:	4013      	ands	r3, r2
100107ca:	4a05      	ldr	r2, [pc, #20]	; (100107e0 <__swhatbuf_r+0x48>)
100107cc:	189b      	adds	r3, r3, r2
100107ce:	425a      	negs	r2, r3
100107d0:	4153      	adcs	r3, r2
100107d2:	602b      	str	r3, [r5, #0]
100107d4:	2380      	movs	r3, #128	; 0x80
100107d6:	00db      	lsls	r3, r3, #3
100107d8:	2000      	movs	r0, #0
100107da:	6023      	str	r3, [r4, #0]
100107dc:	b010      	add	sp, #64	; 0x40
100107de:	bd70      	pop	{r4, r5, r6, pc}
100107e0:	ffffe000 	.word	0xffffe000

100107e4 <__smakebuf_r>:
100107e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100107e6:	2602      	movs	r6, #2
100107e8:	898b      	ldrh	r3, [r1, #12]
100107ea:	0005      	movs	r5, r0
100107ec:	000c      	movs	r4, r1
100107ee:	4233      	tst	r3, r6
100107f0:	d110      	bne.n	10010814 <__smakebuf_r+0x30>
100107f2:	ab01      	add	r3, sp, #4
100107f4:	466a      	mov	r2, sp
100107f6:	f7ff ffcf 	bl	10010798 <__swhatbuf_r>
100107fa:	9900      	ldr	r1, [sp, #0]
100107fc:	0007      	movs	r7, r0
100107fe:	0028      	movs	r0, r5
10010800:	f000 f87e 	bl	10010900 <_malloc_r>
10010804:	2800      	cmp	r0, #0
10010806:	d10c      	bne.n	10010822 <__smakebuf_r+0x3e>
10010808:	220c      	movs	r2, #12
1001080a:	5ea3      	ldrsh	r3, [r4, r2]
1001080c:	059a      	lsls	r2, r3, #22
1001080e:	d423      	bmi.n	10010858 <__smakebuf_r+0x74>
10010810:	4333      	orrs	r3, r6
10010812:	81a3      	strh	r3, [r4, #12]
10010814:	0023      	movs	r3, r4
10010816:	3347      	adds	r3, #71	; 0x47
10010818:	6023      	str	r3, [r4, #0]
1001081a:	6123      	str	r3, [r4, #16]
1001081c:	2301      	movs	r3, #1
1001081e:	6163      	str	r3, [r4, #20]
10010820:	e01a      	b.n	10010858 <__smakebuf_r+0x74>
10010822:	2280      	movs	r2, #128	; 0x80
10010824:	4b0d      	ldr	r3, [pc, #52]	; (1001085c <__smakebuf_r+0x78>)
10010826:	62ab      	str	r3, [r5, #40]	; 0x28
10010828:	89a3      	ldrh	r3, [r4, #12]
1001082a:	6020      	str	r0, [r4, #0]
1001082c:	4313      	orrs	r3, r2
1001082e:	81a3      	strh	r3, [r4, #12]
10010830:	9b00      	ldr	r3, [sp, #0]
10010832:	6120      	str	r0, [r4, #16]
10010834:	6163      	str	r3, [r4, #20]
10010836:	9b01      	ldr	r3, [sp, #4]
10010838:	2b00      	cmp	r3, #0
1001083a:	d00a      	beq.n	10010852 <__smakebuf_r+0x6e>
1001083c:	230e      	movs	r3, #14
1001083e:	5ee1      	ldrsh	r1, [r4, r3]
10010840:	0028      	movs	r0, r5
10010842:	f000 fc53 	bl	100110ec <_isatty_r>
10010846:	2800      	cmp	r0, #0
10010848:	d003      	beq.n	10010852 <__smakebuf_r+0x6e>
1001084a:	2201      	movs	r2, #1
1001084c:	89a3      	ldrh	r3, [r4, #12]
1001084e:	4313      	orrs	r3, r2
10010850:	81a3      	strh	r3, [r4, #12]
10010852:	89a3      	ldrh	r3, [r4, #12]
10010854:	431f      	orrs	r7, r3
10010856:	81a7      	strh	r7, [r4, #12]
10010858:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1001085a:	46c0      	nop			; (mov r8, r8)
1001085c:	100105ed 	.word	0x100105ed

10010860 <malloc>:
10010860:	b510      	push	{r4, lr}
10010862:	4b03      	ldr	r3, [pc, #12]	; (10010870 <malloc+0x10>)
10010864:	0001      	movs	r1, r0
10010866:	6818      	ldr	r0, [r3, #0]
10010868:	f000 f84a 	bl	10010900 <_malloc_r>
1001086c:	bd10      	pop	{r4, pc}
1001086e:	46c0      	nop			; (mov r8, r8)
10010870:	1001215c 	.word	0x1001215c

10010874 <_free_r>:
10010874:	b530      	push	{r4, r5, lr}
10010876:	2900      	cmp	r1, #0
10010878:	d03e      	beq.n	100108f8 <_free_r+0x84>
1001087a:	3904      	subs	r1, #4
1001087c:	680b      	ldr	r3, [r1, #0]
1001087e:	2b00      	cmp	r3, #0
10010880:	da00      	bge.n	10010884 <_free_r+0x10>
10010882:	18c9      	adds	r1, r1, r3
10010884:	4a1d      	ldr	r2, [pc, #116]	; (100108fc <_free_r+0x88>)
10010886:	6813      	ldr	r3, [r2, #0]
10010888:	0014      	movs	r4, r2
1001088a:	2b00      	cmp	r3, #0
1001088c:	d102      	bne.n	10010894 <_free_r+0x20>
1001088e:	604b      	str	r3, [r1, #4]
10010890:	6011      	str	r1, [r2, #0]
10010892:	e031      	b.n	100108f8 <_free_r+0x84>
10010894:	428b      	cmp	r3, r1
10010896:	d90d      	bls.n	100108b4 <_free_r+0x40>
10010898:	680a      	ldr	r2, [r1, #0]
1001089a:	1888      	adds	r0, r1, r2
1001089c:	4283      	cmp	r3, r0
1001089e:	d103      	bne.n	100108a8 <_free_r+0x34>
100108a0:	6818      	ldr	r0, [r3, #0]
100108a2:	685b      	ldr	r3, [r3, #4]
100108a4:	1882      	adds	r2, r0, r2
100108a6:	600a      	str	r2, [r1, #0]
100108a8:	604b      	str	r3, [r1, #4]
100108aa:	6021      	str	r1, [r4, #0]
100108ac:	e024      	b.n	100108f8 <_free_r+0x84>
100108ae:	428a      	cmp	r2, r1
100108b0:	d803      	bhi.n	100108ba <_free_r+0x46>
100108b2:	0013      	movs	r3, r2
100108b4:	685a      	ldr	r2, [r3, #4]
100108b6:	2a00      	cmp	r2, #0
100108b8:	d1f9      	bne.n	100108ae <_free_r+0x3a>
100108ba:	681d      	ldr	r5, [r3, #0]
100108bc:	195c      	adds	r4, r3, r5
100108be:	428c      	cmp	r4, r1
100108c0:	d10b      	bne.n	100108da <_free_r+0x66>
100108c2:	6809      	ldr	r1, [r1, #0]
100108c4:	1869      	adds	r1, r5, r1
100108c6:	1858      	adds	r0, r3, r1
100108c8:	6019      	str	r1, [r3, #0]
100108ca:	4282      	cmp	r2, r0
100108cc:	d114      	bne.n	100108f8 <_free_r+0x84>
100108ce:	6810      	ldr	r0, [r2, #0]
100108d0:	6852      	ldr	r2, [r2, #4]
100108d2:	1841      	adds	r1, r0, r1
100108d4:	6019      	str	r1, [r3, #0]
100108d6:	605a      	str	r2, [r3, #4]
100108d8:	e00e      	b.n	100108f8 <_free_r+0x84>
100108da:	428c      	cmp	r4, r1
100108dc:	d902      	bls.n	100108e4 <_free_r+0x70>
100108de:	230c      	movs	r3, #12
100108e0:	6003      	str	r3, [r0, #0]
100108e2:	e009      	b.n	100108f8 <_free_r+0x84>
100108e4:	6808      	ldr	r0, [r1, #0]
100108e6:	180c      	adds	r4, r1, r0
100108e8:	42a2      	cmp	r2, r4
100108ea:	d103      	bne.n	100108f4 <_free_r+0x80>
100108ec:	6814      	ldr	r4, [r2, #0]
100108ee:	6852      	ldr	r2, [r2, #4]
100108f0:	1820      	adds	r0, r4, r0
100108f2:	6008      	str	r0, [r1, #0]
100108f4:	604a      	str	r2, [r1, #4]
100108f6:	6059      	str	r1, [r3, #4]
100108f8:	bd30      	pop	{r4, r5, pc}
100108fa:	46c0      	nop			; (mov r8, r8)
100108fc:	10013c20 	.word	0x10013c20

10010900 <_malloc_r>:
10010900:	2303      	movs	r3, #3
10010902:	b570      	push	{r4, r5, r6, lr}
10010904:	1ccd      	adds	r5, r1, #3
10010906:	439d      	bics	r5, r3
10010908:	3508      	adds	r5, #8
1001090a:	0006      	movs	r6, r0
1001090c:	2d0c      	cmp	r5, #12
1001090e:	d201      	bcs.n	10010914 <_malloc_r+0x14>
10010910:	250c      	movs	r5, #12
10010912:	e005      	b.n	10010920 <_malloc_r+0x20>
10010914:	2d00      	cmp	r5, #0
10010916:	da03      	bge.n	10010920 <_malloc_r+0x20>
10010918:	230c      	movs	r3, #12
1001091a:	2000      	movs	r0, #0
1001091c:	6033      	str	r3, [r6, #0]
1001091e:	e040      	b.n	100109a2 <_malloc_r+0xa2>
10010920:	42a9      	cmp	r1, r5
10010922:	d8f9      	bhi.n	10010918 <_malloc_r+0x18>
10010924:	4b1f      	ldr	r3, [pc, #124]	; (100109a4 <_malloc_r+0xa4>)
10010926:	681c      	ldr	r4, [r3, #0]
10010928:	001a      	movs	r2, r3
1001092a:	0021      	movs	r1, r4
1001092c:	2900      	cmp	r1, #0
1001092e:	d013      	beq.n	10010958 <_malloc_r+0x58>
10010930:	680b      	ldr	r3, [r1, #0]
10010932:	1b5b      	subs	r3, r3, r5
10010934:	d40d      	bmi.n	10010952 <_malloc_r+0x52>
10010936:	2b0b      	cmp	r3, #11
10010938:	d902      	bls.n	10010940 <_malloc_r+0x40>
1001093a:	600b      	str	r3, [r1, #0]
1001093c:	18cc      	adds	r4, r1, r3
1001093e:	e01e      	b.n	1001097e <_malloc_r+0x7e>
10010940:	428c      	cmp	r4, r1
10010942:	d102      	bne.n	1001094a <_malloc_r+0x4a>
10010944:	6863      	ldr	r3, [r4, #4]
10010946:	6013      	str	r3, [r2, #0]
10010948:	e01a      	b.n	10010980 <_malloc_r+0x80>
1001094a:	684b      	ldr	r3, [r1, #4]
1001094c:	6063      	str	r3, [r4, #4]
1001094e:	000c      	movs	r4, r1
10010950:	e016      	b.n	10010980 <_malloc_r+0x80>
10010952:	000c      	movs	r4, r1
10010954:	6849      	ldr	r1, [r1, #4]
10010956:	e7e9      	b.n	1001092c <_malloc_r+0x2c>
10010958:	4c13      	ldr	r4, [pc, #76]	; (100109a8 <_malloc_r+0xa8>)
1001095a:	6823      	ldr	r3, [r4, #0]
1001095c:	2b00      	cmp	r3, #0
1001095e:	d103      	bne.n	10010968 <_malloc_r+0x68>
10010960:	0030      	movs	r0, r6
10010962:	f000 fb2d 	bl	10010fc0 <_sbrk_r>
10010966:	6020      	str	r0, [r4, #0]
10010968:	0029      	movs	r1, r5
1001096a:	0030      	movs	r0, r6
1001096c:	f000 fb28 	bl	10010fc0 <_sbrk_r>
10010970:	1c43      	adds	r3, r0, #1
10010972:	d0d1      	beq.n	10010918 <_malloc_r+0x18>
10010974:	2303      	movs	r3, #3
10010976:	1cc4      	adds	r4, r0, #3
10010978:	439c      	bics	r4, r3
1001097a:	42a0      	cmp	r0, r4
1001097c:	d10a      	bne.n	10010994 <_malloc_r+0x94>
1001097e:	6025      	str	r5, [r4, #0]
10010980:	0020      	movs	r0, r4
10010982:	2207      	movs	r2, #7
10010984:	300b      	adds	r0, #11
10010986:	1d23      	adds	r3, r4, #4
10010988:	4390      	bics	r0, r2
1001098a:	1ac3      	subs	r3, r0, r3
1001098c:	d009      	beq.n	100109a2 <_malloc_r+0xa2>
1001098e:	425a      	negs	r2, r3
10010990:	50e2      	str	r2, [r4, r3]
10010992:	e006      	b.n	100109a2 <_malloc_r+0xa2>
10010994:	1a21      	subs	r1, r4, r0
10010996:	0030      	movs	r0, r6
10010998:	f000 fb12 	bl	10010fc0 <_sbrk_r>
1001099c:	1c43      	adds	r3, r0, #1
1001099e:	d1ee      	bne.n	1001097e <_malloc_r+0x7e>
100109a0:	e7ba      	b.n	10010918 <_malloc_r+0x18>
100109a2:	bd70      	pop	{r4, r5, r6, pc}
100109a4:	10013c20 	.word	0x10013c20
100109a8:	10013c1c 	.word	0x10013c1c

100109ac <__sfputc_r>:
100109ac:	6893      	ldr	r3, [r2, #8]
100109ae:	b510      	push	{r4, lr}
100109b0:	3b01      	subs	r3, #1
100109b2:	6093      	str	r3, [r2, #8]
100109b4:	2b00      	cmp	r3, #0
100109b6:	da05      	bge.n	100109c4 <__sfputc_r+0x18>
100109b8:	6994      	ldr	r4, [r2, #24]
100109ba:	42a3      	cmp	r3, r4
100109bc:	db08      	blt.n	100109d0 <__sfputc_r+0x24>
100109be:	b2cb      	uxtb	r3, r1
100109c0:	2b0a      	cmp	r3, #10
100109c2:	d005      	beq.n	100109d0 <__sfputc_r+0x24>
100109c4:	6813      	ldr	r3, [r2, #0]
100109c6:	1c58      	adds	r0, r3, #1
100109c8:	6010      	str	r0, [r2, #0]
100109ca:	7019      	strb	r1, [r3, #0]
100109cc:	b2c8      	uxtb	r0, r1
100109ce:	e001      	b.n	100109d4 <__sfputc_r+0x28>
100109d0:	f7ff fc8c 	bl	100102ec <__swbuf_r>
100109d4:	bd10      	pop	{r4, pc}

100109d6 <__sfputs_r>:
100109d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100109d8:	0006      	movs	r6, r0
100109da:	000f      	movs	r7, r1
100109dc:	0014      	movs	r4, r2
100109de:	18d5      	adds	r5, r2, r3
100109e0:	42ac      	cmp	r4, r5
100109e2:	d008      	beq.n	100109f6 <__sfputs_r+0x20>
100109e4:	7821      	ldrb	r1, [r4, #0]
100109e6:	003a      	movs	r2, r7
100109e8:	0030      	movs	r0, r6
100109ea:	f7ff ffdf 	bl	100109ac <__sfputc_r>
100109ee:	3401      	adds	r4, #1
100109f0:	1c43      	adds	r3, r0, #1
100109f2:	d1f5      	bne.n	100109e0 <__sfputs_r+0xa>
100109f4:	e000      	b.n	100109f8 <__sfputs_r+0x22>
100109f6:	2000      	movs	r0, #0
100109f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

100109fc <_vfiprintf_r>:
100109fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100109fe:	b09f      	sub	sp, #124	; 0x7c
10010a00:	0006      	movs	r6, r0
10010a02:	000f      	movs	r7, r1
10010a04:	9202      	str	r2, [sp, #8]
10010a06:	9305      	str	r3, [sp, #20]
10010a08:	2800      	cmp	r0, #0
10010a0a:	d004      	beq.n	10010a16 <_vfiprintf_r+0x1a>
10010a0c:	6983      	ldr	r3, [r0, #24]
10010a0e:	2b00      	cmp	r3, #0
10010a10:	d101      	bne.n	10010a16 <_vfiprintf_r+0x1a>
10010a12:	f7ff fe2d 	bl	10010670 <__sinit>
10010a16:	4b7f      	ldr	r3, [pc, #508]	; (10010c14 <_vfiprintf_r+0x218>)
10010a18:	429f      	cmp	r7, r3
10010a1a:	d101      	bne.n	10010a20 <_vfiprintf_r+0x24>
10010a1c:	6877      	ldr	r7, [r6, #4]
10010a1e:	e008      	b.n	10010a32 <_vfiprintf_r+0x36>
10010a20:	4b7d      	ldr	r3, [pc, #500]	; (10010c18 <_vfiprintf_r+0x21c>)
10010a22:	429f      	cmp	r7, r3
10010a24:	d101      	bne.n	10010a2a <_vfiprintf_r+0x2e>
10010a26:	68b7      	ldr	r7, [r6, #8]
10010a28:	e003      	b.n	10010a32 <_vfiprintf_r+0x36>
10010a2a:	4b7c      	ldr	r3, [pc, #496]	; (10010c1c <_vfiprintf_r+0x220>)
10010a2c:	429f      	cmp	r7, r3
10010a2e:	d100      	bne.n	10010a32 <_vfiprintf_r+0x36>
10010a30:	68f7      	ldr	r7, [r6, #12]
10010a32:	89bb      	ldrh	r3, [r7, #12]
10010a34:	071b      	lsls	r3, r3, #28
10010a36:	d50a      	bpl.n	10010a4e <_vfiprintf_r+0x52>
10010a38:	693b      	ldr	r3, [r7, #16]
10010a3a:	2b00      	cmp	r3, #0
10010a3c:	d007      	beq.n	10010a4e <_vfiprintf_r+0x52>
10010a3e:	2300      	movs	r3, #0
10010a40:	ad06      	add	r5, sp, #24
10010a42:	616b      	str	r3, [r5, #20]
10010a44:	3320      	adds	r3, #32
10010a46:	766b      	strb	r3, [r5, #25]
10010a48:	3310      	adds	r3, #16
10010a4a:	76ab      	strb	r3, [r5, #26]
10010a4c:	e03d      	b.n	10010aca <_vfiprintf_r+0xce>
10010a4e:	0039      	movs	r1, r7
10010a50:	0030      	movs	r0, r6
10010a52:	f7ff fca3 	bl	1001039c <__swsetup_r>
10010a56:	2800      	cmp	r0, #0
10010a58:	d0f1      	beq.n	10010a3e <_vfiprintf_r+0x42>
10010a5a:	2001      	movs	r0, #1
10010a5c:	4240      	negs	r0, r0
10010a5e:	e0d6      	b.n	10010c0e <_vfiprintf_r+0x212>
10010a60:	9a05      	ldr	r2, [sp, #20]
10010a62:	1d11      	adds	r1, r2, #4
10010a64:	6812      	ldr	r2, [r2, #0]
10010a66:	9105      	str	r1, [sp, #20]
10010a68:	2a00      	cmp	r2, #0
10010a6a:	da00      	bge.n	10010a6e <_vfiprintf_r+0x72>
10010a6c:	e07f      	b.n	10010b6e <_vfiprintf_r+0x172>
10010a6e:	9209      	str	r2, [sp, #36]	; 0x24
10010a70:	3401      	adds	r4, #1
10010a72:	7823      	ldrb	r3, [r4, #0]
10010a74:	2b2e      	cmp	r3, #46	; 0x2e
10010a76:	d100      	bne.n	10010a7a <_vfiprintf_r+0x7e>
10010a78:	e08d      	b.n	10010b96 <_vfiprintf_r+0x19a>
10010a7a:	7821      	ldrb	r1, [r4, #0]
10010a7c:	2203      	movs	r2, #3
10010a7e:	4868      	ldr	r0, [pc, #416]	; (10010c20 <_vfiprintf_r+0x224>)
10010a80:	f000 fb5a 	bl	10011138 <memchr>
10010a84:	2800      	cmp	r0, #0
10010a86:	d007      	beq.n	10010a98 <_vfiprintf_r+0x9c>
10010a88:	4b65      	ldr	r3, [pc, #404]	; (10010c20 <_vfiprintf_r+0x224>)
10010a8a:	682a      	ldr	r2, [r5, #0]
10010a8c:	1ac0      	subs	r0, r0, r3
10010a8e:	2340      	movs	r3, #64	; 0x40
10010a90:	4083      	lsls	r3, r0
10010a92:	4313      	orrs	r3, r2
10010a94:	602b      	str	r3, [r5, #0]
10010a96:	3401      	adds	r4, #1
10010a98:	7821      	ldrb	r1, [r4, #0]
10010a9a:	1c63      	adds	r3, r4, #1
10010a9c:	2206      	movs	r2, #6
10010a9e:	4861      	ldr	r0, [pc, #388]	; (10010c24 <_vfiprintf_r+0x228>)
10010aa0:	9302      	str	r3, [sp, #8]
10010aa2:	7629      	strb	r1, [r5, #24]
10010aa4:	f000 fb48 	bl	10011138 <memchr>
10010aa8:	2800      	cmp	r0, #0
10010aaa:	d100      	bne.n	10010aae <_vfiprintf_r+0xb2>
10010aac:	e09d      	b.n	10010bea <_vfiprintf_r+0x1ee>
10010aae:	4b5e      	ldr	r3, [pc, #376]	; (10010c28 <_vfiprintf_r+0x22c>)
10010ab0:	2b00      	cmp	r3, #0
10010ab2:	d000      	beq.n	10010ab6 <_vfiprintf_r+0xba>
10010ab4:	e090      	b.n	10010bd8 <_vfiprintf_r+0x1dc>
10010ab6:	2207      	movs	r2, #7
10010ab8:	9b05      	ldr	r3, [sp, #20]
10010aba:	3307      	adds	r3, #7
10010abc:	4393      	bics	r3, r2
10010abe:	3308      	adds	r3, #8
10010ac0:	9305      	str	r3, [sp, #20]
10010ac2:	696b      	ldr	r3, [r5, #20]
10010ac4:	9a03      	ldr	r2, [sp, #12]
10010ac6:	189b      	adds	r3, r3, r2
10010ac8:	616b      	str	r3, [r5, #20]
10010aca:	9c02      	ldr	r4, [sp, #8]
10010acc:	7823      	ldrb	r3, [r4, #0]
10010ace:	2b00      	cmp	r3, #0
10010ad0:	d104      	bne.n	10010adc <_vfiprintf_r+0xe0>
10010ad2:	9b02      	ldr	r3, [sp, #8]
10010ad4:	1ae3      	subs	r3, r4, r3
10010ad6:	9304      	str	r3, [sp, #16]
10010ad8:	d012      	beq.n	10010b00 <_vfiprintf_r+0x104>
10010ada:	e003      	b.n	10010ae4 <_vfiprintf_r+0xe8>
10010adc:	2b25      	cmp	r3, #37	; 0x25
10010ade:	d0f8      	beq.n	10010ad2 <_vfiprintf_r+0xd6>
10010ae0:	3401      	adds	r4, #1
10010ae2:	e7f3      	b.n	10010acc <_vfiprintf_r+0xd0>
10010ae4:	9b04      	ldr	r3, [sp, #16]
10010ae6:	9a02      	ldr	r2, [sp, #8]
10010ae8:	0039      	movs	r1, r7
10010aea:	0030      	movs	r0, r6
10010aec:	f7ff ff73 	bl	100109d6 <__sfputs_r>
10010af0:	1c43      	adds	r3, r0, #1
10010af2:	d100      	bne.n	10010af6 <_vfiprintf_r+0xfa>
10010af4:	e086      	b.n	10010c04 <_vfiprintf_r+0x208>
10010af6:	696a      	ldr	r2, [r5, #20]
10010af8:	9b04      	ldr	r3, [sp, #16]
10010afa:	4694      	mov	ip, r2
10010afc:	4463      	add	r3, ip
10010afe:	616b      	str	r3, [r5, #20]
10010b00:	7823      	ldrb	r3, [r4, #0]
10010b02:	2b00      	cmp	r3, #0
10010b04:	d07e      	beq.n	10010c04 <_vfiprintf_r+0x208>
10010b06:	2201      	movs	r2, #1
10010b08:	2300      	movs	r3, #0
10010b0a:	4252      	negs	r2, r2
10010b0c:	606a      	str	r2, [r5, #4]
10010b0e:	a902      	add	r1, sp, #8
10010b10:	3254      	adds	r2, #84	; 0x54
10010b12:	1852      	adds	r2, r2, r1
10010b14:	3401      	adds	r4, #1
10010b16:	602b      	str	r3, [r5, #0]
10010b18:	60eb      	str	r3, [r5, #12]
10010b1a:	60ab      	str	r3, [r5, #8]
10010b1c:	7013      	strb	r3, [r2, #0]
10010b1e:	65ab      	str	r3, [r5, #88]	; 0x58
10010b20:	7821      	ldrb	r1, [r4, #0]
10010b22:	2205      	movs	r2, #5
10010b24:	4841      	ldr	r0, [pc, #260]	; (10010c2c <_vfiprintf_r+0x230>)
10010b26:	f000 fb07 	bl	10011138 <memchr>
10010b2a:	2800      	cmp	r0, #0
10010b2c:	d008      	beq.n	10010b40 <_vfiprintf_r+0x144>
10010b2e:	4b3f      	ldr	r3, [pc, #252]	; (10010c2c <_vfiprintf_r+0x230>)
10010b30:	682a      	ldr	r2, [r5, #0]
10010b32:	1ac0      	subs	r0, r0, r3
10010b34:	2301      	movs	r3, #1
10010b36:	4083      	lsls	r3, r0
10010b38:	4313      	orrs	r3, r2
10010b3a:	602b      	str	r3, [r5, #0]
10010b3c:	3401      	adds	r4, #1
10010b3e:	e7ef      	b.n	10010b20 <_vfiprintf_r+0x124>
10010b40:	682b      	ldr	r3, [r5, #0]
10010b42:	06da      	lsls	r2, r3, #27
10010b44:	d504      	bpl.n	10010b50 <_vfiprintf_r+0x154>
10010b46:	2253      	movs	r2, #83	; 0x53
10010b48:	2120      	movs	r1, #32
10010b4a:	a802      	add	r0, sp, #8
10010b4c:	1812      	adds	r2, r2, r0
10010b4e:	7011      	strb	r1, [r2, #0]
10010b50:	071a      	lsls	r2, r3, #28
10010b52:	d504      	bpl.n	10010b5e <_vfiprintf_r+0x162>
10010b54:	2253      	movs	r2, #83	; 0x53
10010b56:	212b      	movs	r1, #43	; 0x2b
10010b58:	a802      	add	r0, sp, #8
10010b5a:	1812      	adds	r2, r2, r0
10010b5c:	7011      	strb	r1, [r2, #0]
10010b5e:	7822      	ldrb	r2, [r4, #0]
10010b60:	2a2a      	cmp	r2, #42	; 0x2a
10010b62:	d100      	bne.n	10010b66 <_vfiprintf_r+0x16a>
10010b64:	e77c      	b.n	10010a60 <_vfiprintf_r+0x64>
10010b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
10010b68:	2000      	movs	r0, #0
10010b6a:	210a      	movs	r1, #10
10010b6c:	e005      	b.n	10010b7a <_vfiprintf_r+0x17e>
10010b6e:	4252      	negs	r2, r2
10010b70:	60ea      	str	r2, [r5, #12]
10010b72:	2202      	movs	r2, #2
10010b74:	4313      	orrs	r3, r2
10010b76:	602b      	str	r3, [r5, #0]
10010b78:	e77a      	b.n	10010a70 <_vfiprintf_r+0x74>
10010b7a:	7822      	ldrb	r2, [r4, #0]
10010b7c:	3a30      	subs	r2, #48	; 0x30
10010b7e:	2a09      	cmp	r2, #9
10010b80:	d804      	bhi.n	10010b8c <_vfiprintf_r+0x190>
10010b82:	434b      	muls	r3, r1
10010b84:	3401      	adds	r4, #1
10010b86:	189b      	adds	r3, r3, r2
10010b88:	2001      	movs	r0, #1
10010b8a:	e7f6      	b.n	10010b7a <_vfiprintf_r+0x17e>
10010b8c:	2800      	cmp	r0, #0
10010b8e:	d100      	bne.n	10010b92 <_vfiprintf_r+0x196>
10010b90:	e76f      	b.n	10010a72 <_vfiprintf_r+0x76>
10010b92:	9309      	str	r3, [sp, #36]	; 0x24
10010b94:	e76d      	b.n	10010a72 <_vfiprintf_r+0x76>
10010b96:	7863      	ldrb	r3, [r4, #1]
10010b98:	2b2a      	cmp	r3, #42	; 0x2a
10010b9a:	d10a      	bne.n	10010bb2 <_vfiprintf_r+0x1b6>
10010b9c:	9b05      	ldr	r3, [sp, #20]
10010b9e:	3402      	adds	r4, #2
10010ba0:	1d1a      	adds	r2, r3, #4
10010ba2:	681b      	ldr	r3, [r3, #0]
10010ba4:	9205      	str	r2, [sp, #20]
10010ba6:	2b00      	cmp	r3, #0
10010ba8:	da01      	bge.n	10010bae <_vfiprintf_r+0x1b2>
10010baa:	2301      	movs	r3, #1
10010bac:	425b      	negs	r3, r3
10010bae:	9307      	str	r3, [sp, #28]
10010bb0:	e763      	b.n	10010a7a <_vfiprintf_r+0x7e>
10010bb2:	2300      	movs	r3, #0
10010bb4:	200a      	movs	r0, #10
10010bb6:	001a      	movs	r2, r3
10010bb8:	3401      	adds	r4, #1
10010bba:	606b      	str	r3, [r5, #4]
10010bbc:	7821      	ldrb	r1, [r4, #0]
10010bbe:	3930      	subs	r1, #48	; 0x30
10010bc0:	2909      	cmp	r1, #9
10010bc2:	d804      	bhi.n	10010bce <_vfiprintf_r+0x1d2>
10010bc4:	4342      	muls	r2, r0
10010bc6:	3401      	adds	r4, #1
10010bc8:	1852      	adds	r2, r2, r1
10010bca:	2301      	movs	r3, #1
10010bcc:	e7f6      	b.n	10010bbc <_vfiprintf_r+0x1c0>
10010bce:	2b00      	cmp	r3, #0
10010bd0:	d100      	bne.n	10010bd4 <_vfiprintf_r+0x1d8>
10010bd2:	e752      	b.n	10010a7a <_vfiprintf_r+0x7e>
10010bd4:	9207      	str	r2, [sp, #28]
10010bd6:	e750      	b.n	10010a7a <_vfiprintf_r+0x7e>
10010bd8:	ab05      	add	r3, sp, #20
10010bda:	9300      	str	r3, [sp, #0]
10010bdc:	003a      	movs	r2, r7
10010bde:	4b14      	ldr	r3, [pc, #80]	; (10010c30 <_vfiprintf_r+0x234>)
10010be0:	0029      	movs	r1, r5
10010be2:	0030      	movs	r0, r6
10010be4:	e000      	b.n	10010be8 <_vfiprintf_r+0x1ec>
10010be6:	bf00      	nop
10010be8:	e007      	b.n	10010bfa <_vfiprintf_r+0x1fe>
10010bea:	ab05      	add	r3, sp, #20
10010bec:	9300      	str	r3, [sp, #0]
10010bee:	003a      	movs	r2, r7
10010bf0:	4b0f      	ldr	r3, [pc, #60]	; (10010c30 <_vfiprintf_r+0x234>)
10010bf2:	0029      	movs	r1, r5
10010bf4:	0030      	movs	r0, r6
10010bf6:	f000 f88b 	bl	10010d10 <_printf_i>
10010bfa:	9003      	str	r0, [sp, #12]
10010bfc:	9b03      	ldr	r3, [sp, #12]
10010bfe:	3301      	adds	r3, #1
10010c00:	d000      	beq.n	10010c04 <_vfiprintf_r+0x208>
10010c02:	e75e      	b.n	10010ac2 <_vfiprintf_r+0xc6>
10010c04:	89bb      	ldrh	r3, [r7, #12]
10010c06:	065b      	lsls	r3, r3, #25
10010c08:	d500      	bpl.n	10010c0c <_vfiprintf_r+0x210>
10010c0a:	e726      	b.n	10010a5a <_vfiprintf_r+0x5e>
10010c0c:	980b      	ldr	r0, [sp, #44]	; 0x2c
10010c0e:	b01f      	add	sp, #124	; 0x7c
10010c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010c12:	46c0      	nop			; (mov r8, r8)
10010c14:	10012000 	.word	0x10012000
10010c18:	10012020 	.word	0x10012020
10010c1c:	10012040 	.word	0x10012040
10010c20:	10012066 	.word	0x10012066
10010c24:	1001206a 	.word	0x1001206a
10010c28:	00000000 	.word	0x00000000
10010c2c:	10012060 	.word	0x10012060
10010c30:	100109d7 	.word	0x100109d7

10010c34 <_printf_common>:
10010c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010c36:	0017      	movs	r7, r2
10010c38:	9301      	str	r3, [sp, #4]
10010c3a:	688a      	ldr	r2, [r1, #8]
10010c3c:	690b      	ldr	r3, [r1, #16]
10010c3e:	9000      	str	r0, [sp, #0]
10010c40:	000c      	movs	r4, r1
10010c42:	4293      	cmp	r3, r2
10010c44:	da00      	bge.n	10010c48 <_printf_common+0x14>
10010c46:	0013      	movs	r3, r2
10010c48:	0022      	movs	r2, r4
10010c4a:	603b      	str	r3, [r7, #0]
10010c4c:	3243      	adds	r2, #67	; 0x43
10010c4e:	7812      	ldrb	r2, [r2, #0]
10010c50:	2a00      	cmp	r2, #0
10010c52:	d001      	beq.n	10010c58 <_printf_common+0x24>
10010c54:	3301      	adds	r3, #1
10010c56:	603b      	str	r3, [r7, #0]
10010c58:	6823      	ldr	r3, [r4, #0]
10010c5a:	069b      	lsls	r3, r3, #26
10010c5c:	d502      	bpl.n	10010c64 <_printf_common+0x30>
10010c5e:	683b      	ldr	r3, [r7, #0]
10010c60:	3302      	adds	r3, #2
10010c62:	603b      	str	r3, [r7, #0]
10010c64:	2506      	movs	r5, #6
10010c66:	6823      	ldr	r3, [r4, #0]
10010c68:	401d      	ands	r5, r3
10010c6a:	d01e      	beq.n	10010caa <_printf_common+0x76>
10010c6c:	0023      	movs	r3, r4
10010c6e:	3343      	adds	r3, #67	; 0x43
10010c70:	781b      	ldrb	r3, [r3, #0]
10010c72:	1e5a      	subs	r2, r3, #1
10010c74:	4193      	sbcs	r3, r2
10010c76:	6822      	ldr	r2, [r4, #0]
10010c78:	0692      	lsls	r2, r2, #26
10010c7a:	d51c      	bpl.n	10010cb6 <_printf_common+0x82>
10010c7c:	2030      	movs	r0, #48	; 0x30
10010c7e:	18e1      	adds	r1, r4, r3
10010c80:	3143      	adds	r1, #67	; 0x43
10010c82:	7008      	strb	r0, [r1, #0]
10010c84:	0021      	movs	r1, r4
10010c86:	1c5a      	adds	r2, r3, #1
10010c88:	3145      	adds	r1, #69	; 0x45
10010c8a:	7809      	ldrb	r1, [r1, #0]
10010c8c:	18a2      	adds	r2, r4, r2
10010c8e:	3243      	adds	r2, #67	; 0x43
10010c90:	3302      	adds	r3, #2
10010c92:	7011      	strb	r1, [r2, #0]
10010c94:	e00f      	b.n	10010cb6 <_printf_common+0x82>
10010c96:	0022      	movs	r2, r4
10010c98:	2301      	movs	r3, #1
10010c9a:	3219      	adds	r2, #25
10010c9c:	9901      	ldr	r1, [sp, #4]
10010c9e:	9800      	ldr	r0, [sp, #0]
10010ca0:	9e08      	ldr	r6, [sp, #32]
10010ca2:	47b0      	blx	r6
10010ca4:	1c43      	adds	r3, r0, #1
10010ca6:	d00e      	beq.n	10010cc6 <_printf_common+0x92>
10010ca8:	3501      	adds	r5, #1
10010caa:	68e3      	ldr	r3, [r4, #12]
10010cac:	683a      	ldr	r2, [r7, #0]
10010cae:	1a9b      	subs	r3, r3, r2
10010cb0:	429d      	cmp	r5, r3
10010cb2:	dbf0      	blt.n	10010c96 <_printf_common+0x62>
10010cb4:	e7da      	b.n	10010c6c <_printf_common+0x38>
10010cb6:	0022      	movs	r2, r4
10010cb8:	9901      	ldr	r1, [sp, #4]
10010cba:	3243      	adds	r2, #67	; 0x43
10010cbc:	9800      	ldr	r0, [sp, #0]
10010cbe:	9d08      	ldr	r5, [sp, #32]
10010cc0:	47a8      	blx	r5
10010cc2:	1c43      	adds	r3, r0, #1
10010cc4:	d102      	bne.n	10010ccc <_printf_common+0x98>
10010cc6:	2001      	movs	r0, #1
10010cc8:	4240      	negs	r0, r0
10010cca:	e020      	b.n	10010d0e <_printf_common+0xda>
10010ccc:	2306      	movs	r3, #6
10010cce:	6820      	ldr	r0, [r4, #0]
10010cd0:	68e1      	ldr	r1, [r4, #12]
10010cd2:	683a      	ldr	r2, [r7, #0]
10010cd4:	4003      	ands	r3, r0
10010cd6:	2500      	movs	r5, #0
10010cd8:	2b04      	cmp	r3, #4
10010cda:	d103      	bne.n	10010ce4 <_printf_common+0xb0>
10010cdc:	1a8d      	subs	r5, r1, r2
10010cde:	43eb      	mvns	r3, r5
10010ce0:	17db      	asrs	r3, r3, #31
10010ce2:	401d      	ands	r5, r3
10010ce4:	68a3      	ldr	r3, [r4, #8]
10010ce6:	6922      	ldr	r2, [r4, #16]
10010ce8:	4293      	cmp	r3, r2
10010cea:	dd01      	ble.n	10010cf0 <_printf_common+0xbc>
10010cec:	1a9b      	subs	r3, r3, r2
10010cee:	18ed      	adds	r5, r5, r3
10010cf0:	2700      	movs	r7, #0
10010cf2:	42bd      	cmp	r5, r7
10010cf4:	d00a      	beq.n	10010d0c <_printf_common+0xd8>
10010cf6:	0022      	movs	r2, r4
10010cf8:	2301      	movs	r3, #1
10010cfa:	321a      	adds	r2, #26
10010cfc:	9901      	ldr	r1, [sp, #4]
10010cfe:	9800      	ldr	r0, [sp, #0]
10010d00:	9e08      	ldr	r6, [sp, #32]
10010d02:	47b0      	blx	r6
10010d04:	1c43      	adds	r3, r0, #1
10010d06:	d0de      	beq.n	10010cc6 <_printf_common+0x92>
10010d08:	3701      	adds	r7, #1
10010d0a:	e7f2      	b.n	10010cf2 <_printf_common+0xbe>
10010d0c:	2000      	movs	r0, #0
10010d0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10010d10 <_printf_i>:
10010d10:	b5f0      	push	{r4, r5, r6, r7, lr}
10010d12:	b08b      	sub	sp, #44	; 0x2c
10010d14:	9206      	str	r2, [sp, #24]
10010d16:	000a      	movs	r2, r1
10010d18:	3243      	adds	r2, #67	; 0x43
10010d1a:	9307      	str	r3, [sp, #28]
10010d1c:	9005      	str	r0, [sp, #20]
10010d1e:	9204      	str	r2, [sp, #16]
10010d20:	7e0a      	ldrb	r2, [r1, #24]
10010d22:	000c      	movs	r4, r1
10010d24:	9b10      	ldr	r3, [sp, #64]	; 0x40
10010d26:	2a6e      	cmp	r2, #110	; 0x6e
10010d28:	d100      	bne.n	10010d2c <_printf_i+0x1c>
10010d2a:	e0ab      	b.n	10010e84 <_printf_i+0x174>
10010d2c:	d811      	bhi.n	10010d52 <_printf_i+0x42>
10010d2e:	2a63      	cmp	r2, #99	; 0x63
10010d30:	d022      	beq.n	10010d78 <_printf_i+0x68>
10010d32:	d809      	bhi.n	10010d48 <_printf_i+0x38>
10010d34:	2a00      	cmp	r2, #0
10010d36:	d100      	bne.n	10010d3a <_printf_i+0x2a>
10010d38:	e0b5      	b.n	10010ea6 <_printf_i+0x196>
10010d3a:	2a58      	cmp	r2, #88	; 0x58
10010d3c:	d000      	beq.n	10010d40 <_printf_i+0x30>
10010d3e:	e0c5      	b.n	10010ecc <_printf_i+0x1bc>
10010d40:	3145      	adds	r1, #69	; 0x45
10010d42:	700a      	strb	r2, [r1, #0]
10010d44:	4a81      	ldr	r2, [pc, #516]	; (10010f4c <_printf_i+0x23c>)
10010d46:	e04f      	b.n	10010de8 <_printf_i+0xd8>
10010d48:	2a64      	cmp	r2, #100	; 0x64
10010d4a:	d01d      	beq.n	10010d88 <_printf_i+0x78>
10010d4c:	2a69      	cmp	r2, #105	; 0x69
10010d4e:	d01b      	beq.n	10010d88 <_printf_i+0x78>
10010d50:	e0bc      	b.n	10010ecc <_printf_i+0x1bc>
10010d52:	2a73      	cmp	r2, #115	; 0x73
10010d54:	d100      	bne.n	10010d58 <_printf_i+0x48>
10010d56:	e0aa      	b.n	10010eae <_printf_i+0x19e>
10010d58:	d809      	bhi.n	10010d6e <_printf_i+0x5e>
10010d5a:	2a6f      	cmp	r2, #111	; 0x6f
10010d5c:	d029      	beq.n	10010db2 <_printf_i+0xa2>
10010d5e:	2a70      	cmp	r2, #112	; 0x70
10010d60:	d000      	beq.n	10010d64 <_printf_i+0x54>
10010d62:	e0b3      	b.n	10010ecc <_printf_i+0x1bc>
10010d64:	2220      	movs	r2, #32
10010d66:	6809      	ldr	r1, [r1, #0]
10010d68:	430a      	orrs	r2, r1
10010d6a:	6022      	str	r2, [r4, #0]
10010d6c:	e037      	b.n	10010dde <_printf_i+0xce>
10010d6e:	2a75      	cmp	r2, #117	; 0x75
10010d70:	d01f      	beq.n	10010db2 <_printf_i+0xa2>
10010d72:	2a78      	cmp	r2, #120	; 0x78
10010d74:	d033      	beq.n	10010dde <_printf_i+0xce>
10010d76:	e0a9      	b.n	10010ecc <_printf_i+0x1bc>
10010d78:	000e      	movs	r6, r1
10010d7a:	681a      	ldr	r2, [r3, #0]
10010d7c:	3642      	adds	r6, #66	; 0x42
10010d7e:	1d11      	adds	r1, r2, #4
10010d80:	6019      	str	r1, [r3, #0]
10010d82:	6813      	ldr	r3, [r2, #0]
10010d84:	7033      	strb	r3, [r6, #0]
10010d86:	e0a4      	b.n	10010ed2 <_printf_i+0x1c2>
10010d88:	6821      	ldr	r1, [r4, #0]
10010d8a:	681a      	ldr	r2, [r3, #0]
10010d8c:	0608      	lsls	r0, r1, #24
10010d8e:	d406      	bmi.n	10010d9e <_printf_i+0x8e>
10010d90:	0649      	lsls	r1, r1, #25
10010d92:	d504      	bpl.n	10010d9e <_printf_i+0x8e>
10010d94:	1d11      	adds	r1, r2, #4
10010d96:	6019      	str	r1, [r3, #0]
10010d98:	2300      	movs	r3, #0
10010d9a:	5ed5      	ldrsh	r5, [r2, r3]
10010d9c:	e002      	b.n	10010da4 <_printf_i+0x94>
10010d9e:	1d11      	adds	r1, r2, #4
10010da0:	6019      	str	r1, [r3, #0]
10010da2:	6815      	ldr	r5, [r2, #0]
10010da4:	2d00      	cmp	r5, #0
10010da6:	da3b      	bge.n	10010e20 <_printf_i+0x110>
10010da8:	232d      	movs	r3, #45	; 0x2d
10010daa:	9a04      	ldr	r2, [sp, #16]
10010dac:	426d      	negs	r5, r5
10010dae:	7013      	strb	r3, [r2, #0]
10010db0:	e036      	b.n	10010e20 <_printf_i+0x110>
10010db2:	6821      	ldr	r1, [r4, #0]
10010db4:	681a      	ldr	r2, [r3, #0]
10010db6:	0608      	lsls	r0, r1, #24
10010db8:	d406      	bmi.n	10010dc8 <_printf_i+0xb8>
10010dba:	0649      	lsls	r1, r1, #25
10010dbc:	d504      	bpl.n	10010dc8 <_printf_i+0xb8>
10010dbe:	6815      	ldr	r5, [r2, #0]
10010dc0:	1d11      	adds	r1, r2, #4
10010dc2:	6019      	str	r1, [r3, #0]
10010dc4:	b2ad      	uxth	r5, r5
10010dc6:	e002      	b.n	10010dce <_printf_i+0xbe>
10010dc8:	1d11      	adds	r1, r2, #4
10010dca:	6019      	str	r1, [r3, #0]
10010dcc:	6815      	ldr	r5, [r2, #0]
10010dce:	4b5f      	ldr	r3, [pc, #380]	; (10010f4c <_printf_i+0x23c>)
10010dd0:	7e22      	ldrb	r2, [r4, #24]
10010dd2:	9303      	str	r3, [sp, #12]
10010dd4:	2708      	movs	r7, #8
10010dd6:	2a6f      	cmp	r2, #111	; 0x6f
10010dd8:	d01d      	beq.n	10010e16 <_printf_i+0x106>
10010dda:	270a      	movs	r7, #10
10010ddc:	e01b      	b.n	10010e16 <_printf_i+0x106>
10010dde:	0022      	movs	r2, r4
10010de0:	2178      	movs	r1, #120	; 0x78
10010de2:	3245      	adds	r2, #69	; 0x45
10010de4:	7011      	strb	r1, [r2, #0]
10010de6:	4a5a      	ldr	r2, [pc, #360]	; (10010f50 <_printf_i+0x240>)
10010de8:	6819      	ldr	r1, [r3, #0]
10010dea:	9203      	str	r2, [sp, #12]
10010dec:	1d08      	adds	r0, r1, #4
10010dee:	6822      	ldr	r2, [r4, #0]
10010df0:	6018      	str	r0, [r3, #0]
10010df2:	680d      	ldr	r5, [r1, #0]
10010df4:	0610      	lsls	r0, r2, #24
10010df6:	d402      	bmi.n	10010dfe <_printf_i+0xee>
10010df8:	0650      	lsls	r0, r2, #25
10010dfa:	d500      	bpl.n	10010dfe <_printf_i+0xee>
10010dfc:	b2ad      	uxth	r5, r5
10010dfe:	07d3      	lsls	r3, r2, #31
10010e00:	d502      	bpl.n	10010e08 <_printf_i+0xf8>
10010e02:	2320      	movs	r3, #32
10010e04:	431a      	orrs	r2, r3
10010e06:	6022      	str	r2, [r4, #0]
10010e08:	2710      	movs	r7, #16
10010e0a:	2d00      	cmp	r5, #0
10010e0c:	d103      	bne.n	10010e16 <_printf_i+0x106>
10010e0e:	2320      	movs	r3, #32
10010e10:	6822      	ldr	r2, [r4, #0]
10010e12:	439a      	bics	r2, r3
10010e14:	6022      	str	r2, [r4, #0]
10010e16:	0023      	movs	r3, r4
10010e18:	2200      	movs	r2, #0
10010e1a:	3343      	adds	r3, #67	; 0x43
10010e1c:	701a      	strb	r2, [r3, #0]
10010e1e:	e002      	b.n	10010e26 <_printf_i+0x116>
10010e20:	270a      	movs	r7, #10
10010e22:	4b4a      	ldr	r3, [pc, #296]	; (10010f4c <_printf_i+0x23c>)
10010e24:	9303      	str	r3, [sp, #12]
10010e26:	6863      	ldr	r3, [r4, #4]
10010e28:	60a3      	str	r3, [r4, #8]
10010e2a:	2b00      	cmp	r3, #0
10010e2c:	db09      	blt.n	10010e42 <_printf_i+0x132>
10010e2e:	2204      	movs	r2, #4
10010e30:	6821      	ldr	r1, [r4, #0]
10010e32:	4391      	bics	r1, r2
10010e34:	6021      	str	r1, [r4, #0]
10010e36:	2d00      	cmp	r5, #0
10010e38:	d105      	bne.n	10010e46 <_printf_i+0x136>
10010e3a:	9e04      	ldr	r6, [sp, #16]
10010e3c:	2b00      	cmp	r3, #0
10010e3e:	d011      	beq.n	10010e64 <_printf_i+0x154>
10010e40:	e07b      	b.n	10010f3a <_printf_i+0x22a>
10010e42:	2d00      	cmp	r5, #0
10010e44:	d079      	beq.n	10010f3a <_printf_i+0x22a>
10010e46:	9e04      	ldr	r6, [sp, #16]
10010e48:	0028      	movs	r0, r5
10010e4a:	0039      	movs	r1, r7
10010e4c:	f7fd ff98 	bl	1000ed80 <__aeabi_uidivmod>
10010e50:	9b03      	ldr	r3, [sp, #12]
10010e52:	3e01      	subs	r6, #1
10010e54:	5c5b      	ldrb	r3, [r3, r1]
10010e56:	0028      	movs	r0, r5
10010e58:	7033      	strb	r3, [r6, #0]
10010e5a:	0039      	movs	r1, r7
10010e5c:	f7fd ff0a 	bl	1000ec74 <__aeabi_uidiv>
10010e60:	1e05      	subs	r5, r0, #0
10010e62:	d1f1      	bne.n	10010e48 <_printf_i+0x138>
10010e64:	2f08      	cmp	r7, #8
10010e66:	d109      	bne.n	10010e7c <_printf_i+0x16c>
10010e68:	6823      	ldr	r3, [r4, #0]
10010e6a:	07db      	lsls	r3, r3, #31
10010e6c:	d506      	bpl.n	10010e7c <_printf_i+0x16c>
10010e6e:	6863      	ldr	r3, [r4, #4]
10010e70:	6922      	ldr	r2, [r4, #16]
10010e72:	4293      	cmp	r3, r2
10010e74:	dc02      	bgt.n	10010e7c <_printf_i+0x16c>
10010e76:	2330      	movs	r3, #48	; 0x30
10010e78:	3e01      	subs	r6, #1
10010e7a:	7033      	strb	r3, [r6, #0]
10010e7c:	9b04      	ldr	r3, [sp, #16]
10010e7e:	1b9b      	subs	r3, r3, r6
10010e80:	6123      	str	r3, [r4, #16]
10010e82:	e02b      	b.n	10010edc <_printf_i+0x1cc>
10010e84:	6809      	ldr	r1, [r1, #0]
10010e86:	681a      	ldr	r2, [r3, #0]
10010e88:	0608      	lsls	r0, r1, #24
10010e8a:	d407      	bmi.n	10010e9c <_printf_i+0x18c>
10010e8c:	0649      	lsls	r1, r1, #25
10010e8e:	d505      	bpl.n	10010e9c <_printf_i+0x18c>
10010e90:	1d11      	adds	r1, r2, #4
10010e92:	6019      	str	r1, [r3, #0]
10010e94:	6813      	ldr	r3, [r2, #0]
10010e96:	8aa2      	ldrh	r2, [r4, #20]
10010e98:	801a      	strh	r2, [r3, #0]
10010e9a:	e004      	b.n	10010ea6 <_printf_i+0x196>
10010e9c:	1d11      	adds	r1, r2, #4
10010e9e:	6019      	str	r1, [r3, #0]
10010ea0:	6813      	ldr	r3, [r2, #0]
10010ea2:	6962      	ldr	r2, [r4, #20]
10010ea4:	601a      	str	r2, [r3, #0]
10010ea6:	2300      	movs	r3, #0
10010ea8:	9e04      	ldr	r6, [sp, #16]
10010eaa:	6123      	str	r3, [r4, #16]
10010eac:	e016      	b.n	10010edc <_printf_i+0x1cc>
10010eae:	681a      	ldr	r2, [r3, #0]
10010eb0:	1d11      	adds	r1, r2, #4
10010eb2:	6019      	str	r1, [r3, #0]
10010eb4:	6816      	ldr	r6, [r2, #0]
10010eb6:	2100      	movs	r1, #0
10010eb8:	6862      	ldr	r2, [r4, #4]
10010eba:	0030      	movs	r0, r6
10010ebc:	f000 f93c 	bl	10011138 <memchr>
10010ec0:	2800      	cmp	r0, #0
10010ec2:	d001      	beq.n	10010ec8 <_printf_i+0x1b8>
10010ec4:	1b80      	subs	r0, r0, r6
10010ec6:	6060      	str	r0, [r4, #4]
10010ec8:	6863      	ldr	r3, [r4, #4]
10010eca:	e003      	b.n	10010ed4 <_printf_i+0x1c4>
10010ecc:	0026      	movs	r6, r4
10010ece:	3642      	adds	r6, #66	; 0x42
10010ed0:	7032      	strb	r2, [r6, #0]
10010ed2:	2301      	movs	r3, #1
10010ed4:	6123      	str	r3, [r4, #16]
10010ed6:	2300      	movs	r3, #0
10010ed8:	9a04      	ldr	r2, [sp, #16]
10010eda:	7013      	strb	r3, [r2, #0]
10010edc:	9b07      	ldr	r3, [sp, #28]
10010ede:	aa09      	add	r2, sp, #36	; 0x24
10010ee0:	9300      	str	r3, [sp, #0]
10010ee2:	0021      	movs	r1, r4
10010ee4:	9b06      	ldr	r3, [sp, #24]
10010ee6:	9805      	ldr	r0, [sp, #20]
10010ee8:	f7ff fea4 	bl	10010c34 <_printf_common>
10010eec:	1c43      	adds	r3, r0, #1
10010eee:	d102      	bne.n	10010ef6 <_printf_i+0x1e6>
10010ef0:	2001      	movs	r0, #1
10010ef2:	4240      	negs	r0, r0
10010ef4:	e027      	b.n	10010f46 <_printf_i+0x236>
10010ef6:	6923      	ldr	r3, [r4, #16]
10010ef8:	0032      	movs	r2, r6
10010efa:	9906      	ldr	r1, [sp, #24]
10010efc:	9805      	ldr	r0, [sp, #20]
10010efe:	9d07      	ldr	r5, [sp, #28]
10010f00:	47a8      	blx	r5
10010f02:	1c43      	adds	r3, r0, #1
10010f04:	d0f4      	beq.n	10010ef0 <_printf_i+0x1e0>
10010f06:	6823      	ldr	r3, [r4, #0]
10010f08:	2500      	movs	r5, #0
10010f0a:	079b      	lsls	r3, r3, #30
10010f0c:	d40f      	bmi.n	10010f2e <_printf_i+0x21e>
10010f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10010f10:	68e0      	ldr	r0, [r4, #12]
10010f12:	4298      	cmp	r0, r3
10010f14:	da17      	bge.n	10010f46 <_printf_i+0x236>
10010f16:	0018      	movs	r0, r3
10010f18:	e015      	b.n	10010f46 <_printf_i+0x236>
10010f1a:	0022      	movs	r2, r4
10010f1c:	2301      	movs	r3, #1
10010f1e:	3219      	adds	r2, #25
10010f20:	9906      	ldr	r1, [sp, #24]
10010f22:	9805      	ldr	r0, [sp, #20]
10010f24:	9e07      	ldr	r6, [sp, #28]
10010f26:	47b0      	blx	r6
10010f28:	1c43      	adds	r3, r0, #1
10010f2a:	d0e1      	beq.n	10010ef0 <_printf_i+0x1e0>
10010f2c:	3501      	adds	r5, #1
10010f2e:	68e3      	ldr	r3, [r4, #12]
10010f30:	9a09      	ldr	r2, [sp, #36]	; 0x24
10010f32:	1a9b      	subs	r3, r3, r2
10010f34:	429d      	cmp	r5, r3
10010f36:	dbf0      	blt.n	10010f1a <_printf_i+0x20a>
10010f38:	e7e9      	b.n	10010f0e <_printf_i+0x1fe>
10010f3a:	0026      	movs	r6, r4
10010f3c:	9b03      	ldr	r3, [sp, #12]
10010f3e:	3642      	adds	r6, #66	; 0x42
10010f40:	781b      	ldrb	r3, [r3, #0]
10010f42:	7033      	strb	r3, [r6, #0]
10010f44:	e78e      	b.n	10010e64 <_printf_i+0x154>
10010f46:	b00b      	add	sp, #44	; 0x2c
10010f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010f4a:	46c0      	nop			; (mov r8, r8)
10010f4c:	10012071 	.word	0x10012071
10010f50:	10012082 	.word	0x10012082

10010f54 <_putc_r>:
10010f54:	b570      	push	{r4, r5, r6, lr}
10010f56:	0006      	movs	r6, r0
10010f58:	000d      	movs	r5, r1
10010f5a:	0014      	movs	r4, r2
10010f5c:	2800      	cmp	r0, #0
10010f5e:	d004      	beq.n	10010f6a <_putc_r+0x16>
10010f60:	6983      	ldr	r3, [r0, #24]
10010f62:	2b00      	cmp	r3, #0
10010f64:	d101      	bne.n	10010f6a <_putc_r+0x16>
10010f66:	f7ff fb83 	bl	10010670 <__sinit>
10010f6a:	4b12      	ldr	r3, [pc, #72]	; (10010fb4 <_putc_r+0x60>)
10010f6c:	429c      	cmp	r4, r3
10010f6e:	d101      	bne.n	10010f74 <_putc_r+0x20>
10010f70:	6874      	ldr	r4, [r6, #4]
10010f72:	e008      	b.n	10010f86 <_putc_r+0x32>
10010f74:	4b10      	ldr	r3, [pc, #64]	; (10010fb8 <_putc_r+0x64>)
10010f76:	429c      	cmp	r4, r3
10010f78:	d101      	bne.n	10010f7e <_putc_r+0x2a>
10010f7a:	68b4      	ldr	r4, [r6, #8]
10010f7c:	e003      	b.n	10010f86 <_putc_r+0x32>
10010f7e:	4b0f      	ldr	r3, [pc, #60]	; (10010fbc <_putc_r+0x68>)
10010f80:	429c      	cmp	r4, r3
10010f82:	d100      	bne.n	10010f86 <_putc_r+0x32>
10010f84:	68f4      	ldr	r4, [r6, #12]
10010f86:	68a3      	ldr	r3, [r4, #8]
10010f88:	3b01      	subs	r3, #1
10010f8a:	60a3      	str	r3, [r4, #8]
10010f8c:	2b00      	cmp	r3, #0
10010f8e:	da05      	bge.n	10010f9c <_putc_r+0x48>
10010f90:	69a2      	ldr	r2, [r4, #24]
10010f92:	4293      	cmp	r3, r2
10010f94:	db08      	blt.n	10010fa8 <_putc_r+0x54>
10010f96:	b2eb      	uxtb	r3, r5
10010f98:	2b0a      	cmp	r3, #10
10010f9a:	d005      	beq.n	10010fa8 <_putc_r+0x54>
10010f9c:	6823      	ldr	r3, [r4, #0]
10010f9e:	b2e8      	uxtb	r0, r5
10010fa0:	1c5a      	adds	r2, r3, #1
10010fa2:	6022      	str	r2, [r4, #0]
10010fa4:	701d      	strb	r5, [r3, #0]
10010fa6:	e004      	b.n	10010fb2 <_putc_r+0x5e>
10010fa8:	0022      	movs	r2, r4
10010faa:	0029      	movs	r1, r5
10010fac:	0030      	movs	r0, r6
10010fae:	f7ff f99d 	bl	100102ec <__swbuf_r>
10010fb2:	bd70      	pop	{r4, r5, r6, pc}
10010fb4:	10012000 	.word	0x10012000
10010fb8:	10012020 	.word	0x10012020
10010fbc:	10012040 	.word	0x10012040

10010fc0 <_sbrk_r>:
10010fc0:	2300      	movs	r3, #0
10010fc2:	b570      	push	{r4, r5, r6, lr}
10010fc4:	4c06      	ldr	r4, [pc, #24]	; (10010fe0 <_sbrk_r+0x20>)
10010fc6:	0005      	movs	r5, r0
10010fc8:	0008      	movs	r0, r1
10010fca:	6023      	str	r3, [r4, #0]
10010fcc:	f7fb f94a 	bl	1000c264 <_sbrk>
10010fd0:	1c43      	adds	r3, r0, #1
10010fd2:	d103      	bne.n	10010fdc <_sbrk_r+0x1c>
10010fd4:	6823      	ldr	r3, [r4, #0]
10010fd6:	2b00      	cmp	r3, #0
10010fd8:	d000      	beq.n	10010fdc <_sbrk_r+0x1c>
10010fda:	602b      	str	r3, [r5, #0]
10010fdc:	bd70      	pop	{r4, r5, r6, pc}
10010fde:	46c0      	nop			; (mov r8, r8)
10010fe0:	10014e1c 	.word	0x10014e1c

10010fe4 <__sread>:
10010fe4:	b570      	push	{r4, r5, r6, lr}
10010fe6:	000c      	movs	r4, r1
10010fe8:	250e      	movs	r5, #14
10010fea:	5f49      	ldrsh	r1, [r1, r5]
10010fec:	f000 f8b0 	bl	10011150 <_read_r>
10010ff0:	2800      	cmp	r0, #0
10010ff2:	db03      	blt.n	10010ffc <__sread+0x18>
10010ff4:	6d63      	ldr	r3, [r4, #84]	; 0x54
10010ff6:	181b      	adds	r3, r3, r0
10010ff8:	6563      	str	r3, [r4, #84]	; 0x54
10010ffa:	e003      	b.n	10011004 <__sread+0x20>
10010ffc:	89a2      	ldrh	r2, [r4, #12]
10010ffe:	4b02      	ldr	r3, [pc, #8]	; (10011008 <__sread+0x24>)
10011000:	4013      	ands	r3, r2
10011002:	81a3      	strh	r3, [r4, #12]
10011004:	bd70      	pop	{r4, r5, r6, pc}
10011006:	46c0      	nop			; (mov r8, r8)
10011008:	ffffefff 	.word	0xffffefff

1001100c <__swrite>:
1001100c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001100e:	001f      	movs	r7, r3
10011010:	898b      	ldrh	r3, [r1, #12]
10011012:	0005      	movs	r5, r0
10011014:	000c      	movs	r4, r1
10011016:	0016      	movs	r6, r2
10011018:	05db      	lsls	r3, r3, #23
1001101a:	d505      	bpl.n	10011028 <__swrite+0x1c>
1001101c:	230e      	movs	r3, #14
1001101e:	5ec9      	ldrsh	r1, [r1, r3]
10011020:	2200      	movs	r2, #0
10011022:	2302      	movs	r3, #2
10011024:	f000 f874 	bl	10011110 <_lseek_r>
10011028:	89a2      	ldrh	r2, [r4, #12]
1001102a:	4b05      	ldr	r3, [pc, #20]	; (10011040 <__swrite+0x34>)
1001102c:	0028      	movs	r0, r5
1001102e:	4013      	ands	r3, r2
10011030:	81a3      	strh	r3, [r4, #12]
10011032:	0032      	movs	r2, r6
10011034:	230e      	movs	r3, #14
10011036:	5ee1      	ldrsh	r1, [r4, r3]
10011038:	003b      	movs	r3, r7
1001103a:	f000 f81f 	bl	1001107c <_write_r>
1001103e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011040:	ffffefff 	.word	0xffffefff

10011044 <__sseek>:
10011044:	b570      	push	{r4, r5, r6, lr}
10011046:	000c      	movs	r4, r1
10011048:	250e      	movs	r5, #14
1001104a:	5f49      	ldrsh	r1, [r1, r5]
1001104c:	f000 f860 	bl	10011110 <_lseek_r>
10011050:	89a3      	ldrh	r3, [r4, #12]
10011052:	1c42      	adds	r2, r0, #1
10011054:	d103      	bne.n	1001105e <__sseek+0x1a>
10011056:	4a05      	ldr	r2, [pc, #20]	; (1001106c <__sseek+0x28>)
10011058:	4013      	ands	r3, r2
1001105a:	81a3      	strh	r3, [r4, #12]
1001105c:	e004      	b.n	10011068 <__sseek+0x24>
1001105e:	2280      	movs	r2, #128	; 0x80
10011060:	0152      	lsls	r2, r2, #5
10011062:	4313      	orrs	r3, r2
10011064:	81a3      	strh	r3, [r4, #12]
10011066:	6560      	str	r0, [r4, #84]	; 0x54
10011068:	bd70      	pop	{r4, r5, r6, pc}
1001106a:	46c0      	nop			; (mov r8, r8)
1001106c:	ffffefff 	.word	0xffffefff

10011070 <__sclose>:
10011070:	b510      	push	{r4, lr}
10011072:	230e      	movs	r3, #14
10011074:	5ec9      	ldrsh	r1, [r1, r3]
10011076:	f000 f815 	bl	100110a4 <_close_r>
1001107a:	bd10      	pop	{r4, pc}

1001107c <_write_r>:
1001107c:	b570      	push	{r4, r5, r6, lr}
1001107e:	0005      	movs	r5, r0
10011080:	0008      	movs	r0, r1
10011082:	0011      	movs	r1, r2
10011084:	2200      	movs	r2, #0
10011086:	4c06      	ldr	r4, [pc, #24]	; (100110a0 <_write_r+0x24>)
10011088:	6022      	str	r2, [r4, #0]
1001108a:	001a      	movs	r2, r3
1001108c:	f7f9 fe48 	bl	1000ad20 <_write>
10011090:	1c43      	adds	r3, r0, #1
10011092:	d103      	bne.n	1001109c <_write_r+0x20>
10011094:	6823      	ldr	r3, [r4, #0]
10011096:	2b00      	cmp	r3, #0
10011098:	d000      	beq.n	1001109c <_write_r+0x20>
1001109a:	602b      	str	r3, [r5, #0]
1001109c:	bd70      	pop	{r4, r5, r6, pc}
1001109e:	46c0      	nop			; (mov r8, r8)
100110a0:	10014e1c 	.word	0x10014e1c

100110a4 <_close_r>:
100110a4:	2300      	movs	r3, #0
100110a6:	b570      	push	{r4, r5, r6, lr}
100110a8:	4c06      	ldr	r4, [pc, #24]	; (100110c4 <_close_r+0x20>)
100110aa:	0005      	movs	r5, r0
100110ac:	0008      	movs	r0, r1
100110ae:	6023      	str	r3, [r4, #0]
100110b0:	f7fb f8ea 	bl	1000c288 <_close>
100110b4:	1c43      	adds	r3, r0, #1
100110b6:	d103      	bne.n	100110c0 <_close_r+0x1c>
100110b8:	6823      	ldr	r3, [r4, #0]
100110ba:	2b00      	cmp	r3, #0
100110bc:	d000      	beq.n	100110c0 <_close_r+0x1c>
100110be:	602b      	str	r3, [r5, #0]
100110c0:	bd70      	pop	{r4, r5, r6, pc}
100110c2:	46c0      	nop			; (mov r8, r8)
100110c4:	10014e1c 	.word	0x10014e1c

100110c8 <_fstat_r>:
100110c8:	2300      	movs	r3, #0
100110ca:	b570      	push	{r4, r5, r6, lr}
100110cc:	4c06      	ldr	r4, [pc, #24]	; (100110e8 <_fstat_r+0x20>)
100110ce:	0005      	movs	r5, r0
100110d0:	0008      	movs	r0, r1
100110d2:	0011      	movs	r1, r2
100110d4:	6023      	str	r3, [r4, #0]
100110d6:	f7fb f8db 	bl	1000c290 <_fstat>
100110da:	1c43      	adds	r3, r0, #1
100110dc:	d103      	bne.n	100110e6 <_fstat_r+0x1e>
100110de:	6823      	ldr	r3, [r4, #0]
100110e0:	2b00      	cmp	r3, #0
100110e2:	d000      	beq.n	100110e6 <_fstat_r+0x1e>
100110e4:	602b      	str	r3, [r5, #0]
100110e6:	bd70      	pop	{r4, r5, r6, pc}
100110e8:	10014e1c 	.word	0x10014e1c

100110ec <_isatty_r>:
100110ec:	2300      	movs	r3, #0
100110ee:	b570      	push	{r4, r5, r6, lr}
100110f0:	4c06      	ldr	r4, [pc, #24]	; (1001110c <_isatty_r+0x20>)
100110f2:	0005      	movs	r5, r0
100110f4:	0008      	movs	r0, r1
100110f6:	6023      	str	r3, [r4, #0]
100110f8:	f7fb f8d0 	bl	1000c29c <_isatty>
100110fc:	1c43      	adds	r3, r0, #1
100110fe:	d103      	bne.n	10011108 <_isatty_r+0x1c>
10011100:	6823      	ldr	r3, [r4, #0]
10011102:	2b00      	cmp	r3, #0
10011104:	d000      	beq.n	10011108 <_isatty_r+0x1c>
10011106:	602b      	str	r3, [r5, #0]
10011108:	bd70      	pop	{r4, r5, r6, pc}
1001110a:	46c0      	nop			; (mov r8, r8)
1001110c:	10014e1c 	.word	0x10014e1c

10011110 <_lseek_r>:
10011110:	b570      	push	{r4, r5, r6, lr}
10011112:	0005      	movs	r5, r0
10011114:	0008      	movs	r0, r1
10011116:	0011      	movs	r1, r2
10011118:	2200      	movs	r2, #0
1001111a:	4c06      	ldr	r4, [pc, #24]	; (10011134 <_lseek_r+0x24>)
1001111c:	6022      	str	r2, [r4, #0]
1001111e:	001a      	movs	r2, r3
10011120:	f7fb f8be 	bl	1000c2a0 <_lseek>
10011124:	1c43      	adds	r3, r0, #1
10011126:	d103      	bne.n	10011130 <_lseek_r+0x20>
10011128:	6823      	ldr	r3, [r4, #0]
1001112a:	2b00      	cmp	r3, #0
1001112c:	d000      	beq.n	10011130 <_lseek_r+0x20>
1001112e:	602b      	str	r3, [r5, #0]
10011130:	bd70      	pop	{r4, r5, r6, pc}
10011132:	46c0      	nop			; (mov r8, r8)
10011134:	10014e1c 	.word	0x10014e1c

10011138 <memchr>:
10011138:	b2c9      	uxtb	r1, r1
1001113a:	1882      	adds	r2, r0, r2
1001113c:	4290      	cmp	r0, r2
1001113e:	d004      	beq.n	1001114a <memchr+0x12>
10011140:	7803      	ldrb	r3, [r0, #0]
10011142:	428b      	cmp	r3, r1
10011144:	d002      	beq.n	1001114c <memchr+0x14>
10011146:	3001      	adds	r0, #1
10011148:	e7f8      	b.n	1001113c <memchr+0x4>
1001114a:	2000      	movs	r0, #0
1001114c:	4770      	bx	lr
	...

10011150 <_read_r>:
10011150:	b570      	push	{r4, r5, r6, lr}
10011152:	0005      	movs	r5, r0
10011154:	0008      	movs	r0, r1
10011156:	0011      	movs	r1, r2
10011158:	2200      	movs	r2, #0
1001115a:	4c06      	ldr	r4, [pc, #24]	; (10011174 <_read_r+0x24>)
1001115c:	6022      	str	r2, [r4, #0]
1001115e:	001a      	movs	r2, r3
10011160:	f7f9 fdbe 	bl	1000ace0 <_read>
10011164:	1c43      	adds	r3, r0, #1
10011166:	d103      	bne.n	10011170 <_read_r+0x20>
10011168:	6823      	ldr	r3, [r4, #0]
1001116a:	2b00      	cmp	r3, #0
1001116c:	d000      	beq.n	10011170 <_read_r+0x20>
1001116e:	602b      	str	r3, [r5, #0]
10011170:	bd70      	pop	{r4, r5, r6, pc}
10011172:	46c0      	nop			; (mov r8, r8)
10011174:	10014e1c 	.word	0x10014e1c
10011178:	000003e8 	.word	0x000003e8

1001117c <test>:
1001117c:	00000083 00004000 00000200 00c800c8     .....@..........
1001118c:	41a00000 42700000 3f000000 3e666666     ...A..pB...?fff>
1001119c:	3f2ccccd 3f000000 3f000000 0000000a     ..,?...?...?....
100111ac:	20633269 64616572 20676e69 6d6f7266     i2c reading from
100111bc:	25783020 20783230 30207461 32302578      0x%02x at 0x%02
100111cc:	2e2e2e78 74616420 00203a61 20633269     x... data: .i2c 
100111dc:	74697277 20676e69 30206f74 32302578     writing to 0x%02
100111ec:	74612078 25783020 2e783230 64202e2e     x at 0x%02x... d
100111fc:	3a617461 00000020 72617453 676e6974     ata: ...Starting
1001120c:	61694220 6f4c2073 5220706f 73646165      Bias Loop Reads
1001121c:	00000000 706d6153 3a73656c 0a642520     ....Samples: %d.
1001122c:	00000000 65636341 666f206c 74657366     ....Accel offset
1001123c:	74616420 57482061 62205453 253d7469      data HWST bit=%
1001124c:	25203a64 66342e37 2e372520 25206634     d: %7.4f %7.4f %
1001125c:	66342e37 00000a0d 6f727947 66666f20     7.4f....Gyro off
1001126c:	20746573 61746164 53574820 69622054     set data HWST bi
1001127c:	64253d74 3725203a 2066342e 342e3725     t=%d: %7.4f %7.4
1001128c:	37252066 0d66342e 0000000a 78352325     f %7.4f.....%#5x
1001129c:	2325203a 0a0d7835 00000000 5f504d44     : %#5x......DMP_
100112ac:	0a214e4f 0000000d 534e4553 2153524f     ON!.....SENSORS!
100112bc:	00000d0a 2e2e312d 0000002e 706d6f43     ....-1......Comp
100112cc:	20737361 706d6173 7220656c 00657461     ass sample rate.
100112dc:	65746e45 676e6972 75706d20 696e695f     Entering mpu_ini
100112ec:	2e2e2e74 00000000 706d6f43 20737361     t.......Compass 
100112fc:	20746f6e 6e756f66 00002e64 72617453     not found...Star
1001130c:	676e6974 55504d20 30303536 53574820     ting MPU6500 HWS
1001131c:	000d2154 72746552 69766569 4220676e     T!..Retrieving B
1001132c:	65736169 00000d73 72746552 69766569     iases...Retrievi
1001133c:	4220676e 65736169 72452073 20726f72     ng Biases Error 
1001134c:	6f70202d 62697373 4920656c 65204332     - possible I2C e
1001135c:	726f7272 00000000 72746552 69766569     rror....Retrievi
1001136c:	5320676e 69422054 73657361 00000000     ng ST Biases....
1001137c:	72746552 69766569 5320676e 69422054     Retrieving ST Bi
1001138c:	73657361 72724520 2d20726f 736f7020     ases Error - pos
1001139c:	6c626973 32492065 72652043 00726f72     sible I2C error.
100113ac:	64616552 20676e69 2050544f 69676552     Reading OTP Regi
100113bc:	72657473 72724520 002e726f 65636341     ster Error..Acce
100113cc:	544f206c 64253a50 6425202c 6425202c     l OTP:%d, %d, %d
100113dc:	0000000a 45434341 52433a4c 52455449     ....ACCEL:CRITER
100113ec:	41204149 00000000 73616942 6968535f     IA A....Bias_Shi
100113fc:	253d7466 66342e37 6942202c 525f7361     ft=%7.4f, Bias_R
1001140c:	253d6765 66342e37 6942202c 485f7361     eg=%7.4f, Bias_H
1001141c:	3d545357 342e3725 000a0d66 2050544f     WST=%7.4f...OTP 
1001142c:	756c6176 25203a65 66342e37 00000a0d     value: %7.4f....
1001143c:	69746172 37253d6f 2c66342e 72687420     ratio=%7.4f, thr
1001144c:	6f687365 253d646c 66342e37 00000a0d     eshold=%7.4f....
1001145c:	45434341 6146204c 41206c69 20736978     ACCEL Fail Axis 
1001146c:	6425203d 0000000a 45434341 52433a4c     = %d....ACCEL:CR
1001147c:	52455449 42204149 0000000d 206e694d     ITERIA B....Min 
1001148c:	203a474d 342e3725 000a0d66 2078614d     MG: %7.4f...Max 
1001149c:	203a474d 342e3725 000a0d66 73616942     MG: %7.4f...Bias
100114ac:	6968735f 253d7466 66342e37 7473202c     _shift=%7.4f, st
100114bc:	2e37253d 202c6634 3d676572 342e3725     =%7.4f, reg=%7.4
100114cc:	00000a66 65636341 4146206c 61204c49     f...Accel FAIL a
100114dc:	3a736978 3c206425 3232203d 20676d35     xis:%d <= 225mg 
100114ec:	3e20726f 3736203d 0a676d35 00000000     or >= 675mg.....
100114fc:	65636341 52433a6c 52455449 43204149     Accel:CRITERIA C
1001150c:	6962203a 6c207361 20737365 6e616874     : bias less than
1001151c:	2e372520 000a6634 4c494146 203a4445      %7.4f..FAILED: 
1001152c:	65636341 7861206c 253a7369 203d2064     Accel axis:%d = 
1001153c:	20646c25 3035203e 0a676d30 00000000     %ld > 500mg.....
1001154c:	65636341 6553206c 5420666c 20747365     Accel Self Test 
1001155c:	75736552 3a73746c 0a642520 00000000     Results: %d.....
1001156c:	6f727947 50544f20 2c64253a 2c642520     Gyro OTP:%d, %d,
1001157c:	0d642520 0000000a 4f525947 4952433a      %d.....GYRO:CRI
1001158c:	49524554 00412041 6f727947 69614620     TERIA A.Gyro Fai
1001159c:	7841206c 3d207369 0a642520 00000000     l Axis = %d.....
100115ac:	4f525947 4952433a 49524554 0d422041     GYRO:CRITERIA B.
100115bc:	00000000 2078614d 3a535044 2e372520     ....Max DPS: %7.
100115cc:	0a0d6634 00000000 4f525947 49414620     4f......GYRO FAI
100115dc:	7861204c 253a7369 72672064 65746165     L axis:%d greate
100115ec:	68742072 36206e61 73706430 0000000a     r than 60dps....
100115fc:	6f727947 4952433a 49524554 3a432041     Gyro:CRITERIA C:
1001160c:	61696220 656c2073 74207373 206e6168      bias less than 
1001161c:	342e3725 00000a66 4c494146 203a4445     %7.4f...FAILED: 
1001162c:	6f727947 69786120 64253a73 25203d20     Gyro axis:%d = %
1001163c:	3e20646c 64303220 000a7370 6f727947     ld > 20dps..Gyro
1001164c:	6c655320 65542066 52207473 6c757365      Self Test Resul
1001165c:	203a7374 000a6425 706d6f43 20737361     ts: %d..Compass 
1001166c:	666c6553 73655420 65522074 746c7573     Self Test Result
1001167c:	25203a73 00000a64 74697845 20676e69     s: %d...Exiting 
1001168c:	54535748 00000000                       HWST....

10011694 <hw>:
10011694:	04000069 01410080 01000000 00001333     i.....A.....3...

100116a4 <reg>:
100116a4:	0c1a1975 1c1b236a 201f1e1d 3b437472     u...j#..... rtC;
100116b4:	3a393841 376c6b69 6d24776f 2625706e     A89:ikl7ow$mnp%&
100116c4:	2a292827 67646334 00000049 10009330     '()*4cdgI...0...
100116d4:	10009332 10009318 10009318 10009318     2...............
100116e4:	10009330 10009318 10009318 10009b7e     0...........~...
100116f4:	10009bf2 10009b66 10009bf8 10009b6c     ....f.......l...
10011704:	10009b72 10009b78 34333231 00003635     r...x...123456..
10011714:	efcdab00 00efcdab b2d60600 f8f005f0     ................
10011724:	00000000                                ....

10011728 <ble_mgr_gatt_server_handle>:
	...
10011740:	10009275 100092b1 10009279 00000000     u.......y.......
10011750:	6e616353 676e696e 61662020 64656c69     Scanning  failed
10011760:	00000000 2055544d 6e616843 46206567     ....MTU Change F
10011770:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
10011780:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
10011790:	69746172 253a6e6f 00000064 69766544     ration:%d...Devi
100117a0:	64206563 6f637369 63656e6e 20646574     ce disconnected 
100117b0:	73616552 303a6e6f 32302578 61482078     Reason:0x%02x Ha
100117c0:	656c646e 2578303d 00000078 72636e45     ndle=0x%x...Encr
100117d0:	69747079 66206e6f 656c6961 00000064     yption failed...
100117e0:	72636e45 69747079 63206e6f 6c706d6f     Encryption compl
100117f0:	64657465 63757320 73736563 6c6c7566     eted successfull
10011800:	00000079 20454c42 69766544 6e206563     y...BLE Device n
10011810:	6620746f 646e756f 636e6520 74707972     ot found encrypt
10011820:	206e6f69 6f666e69 00000000 6f666e49     ion info....Info
10011830:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
10011840:	206e6163 69766564 72206563 68636165     can device reach
10011850:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
10011860:	00006e61 6c696146 74206465 7473206f     an..Failed to st
10011870:	7320706f 6e6e6163 00676e69 72696150     op scanning.Pair
10011880:	20676e69 6c696166 2e2e6465 7369442e     ing failed...Dis
10011890:	6e6e6f63 69746365 0000676e 63736944     connecting..Disc
100118a0:	656e6e6f 52207463 65757165 46207473     onnect Request F
100118b0:	656c6961 00000064 72696150 20676e69     ailed...Pairing 
100118c0:	636f7270 72756465 6f632065 656c706d     procedure comple
100118d0:	20646574 63637573 66737365 796c6c75     ted successfully
100118e0:	00000000 20454c42 69766544 6e206563     ....BLE Device n
100118f0:	6620746f 646e756f 206f7420 726f7473     ot found to stor
10011900:	68742065 61702065 6e697269 6e692067     e the pairing in
10011910:	00006f66 72636e45 69747079 4e206e6f     fo..Encryption N
10011920:	7320746f 74726174 00006465 76616c53     ot started..Slav
10011930:	65532065 69727563 52207974 2d207165     e Security Req -
10011940:	74754120 746e6568 74616369 206e6f69      Authentication 
10011950:	6c696146 00006465 72696150 71655220     Failed..Pair Req
10011960:	74736575 41202d20 65687475 6369746e     uest - Authentic
10011970:	6f697461 6146206e 64656c69 00000000     ation Failed....
10011980:	65746e45 68742072 61502065 656b7373     Enter the Passke
10011990:	2d362879 69676944 69202974 6554206e     y(6-Digit) in Te
100119a0:	6e696d72 003a6c61 206e6950 656d6954     rminal:.Pin Time
100119b0:	0074756f 63736944 656e6e6f 6e697463     out.Disconnectin
100119c0:	2e2e2067 0000002e 61656c50 45206573     g ......Please E
100119d0:	7265746e 65687420 6c6f6620 69776f6c     nter the followi
100119e0:	5020676e 2d737361 65646f63 206e6f28     ng Pass-code(on 
100119f0:	6568746f 65442072 65636976 00003a29     other Device):..
10011a00:	72696150 79656b2d 70657220 6620796c     Pair-key reply f
10011a10:	656c6961 00000064 20424f4f 74616546     ailed...OOB Feat
10011a20:	20657275 20746f4e 70707573 6574726f     ure Not supporte
10011a30:	00000064 65746e45 20646572 73736150     d...Entered Pass
10011a40:	646f632d 00003a65 72696150 20676e69     -code:..Pairing 
10011a50:	6f666e69 74616d72 206e6f69 7020666f     information of p
10011a60:	20726565 69766564 69206563 6f6e2073     eer device is no
10011a70:	76612074 616c6961 2e656c62 00000000     t available.....
10011a80:	61656c50 75206573 6961706e 68742072     Please unpair th
10011a90:	65642065 65636976 6f726620 6570206d     e device from pe
10011aa0:	64207265 63697665 6f6d2865 656c6962     er device(mobile
10011ab0:	65732029 6e697474 6d207367 20756e65     ) settings menu 
10011ac0:	20646e61 72617473 61702074 6e697269     and start pairin
10011ad0:	67612067 006e6961 72636e45 69747079     g again.Encrypti
10011ae0:	52206e6f 65757165 52207473 796c7065     on Request Reply
10011af0:	69614620 0064656c 74696e49 696c6169      Failed.Initiali
10011b00:	676e697a 4d415320 00313142 424d4153     zing SAMB11.SAMB
10011b10:	49203131 6974696e 7a696c61 6f697461     11 Initializatio
10011b20:	6166206e 64656c69 00000000 61656c50     n failed....Plea
10011b30:	63206573 6b636568 65687420 776f7020     se check the pow
10011b40:	61207265 6320646e 656e6e6f 6f697463     er and connectio
10011b50:	202f206e 64726168 65726177 6e6f6320     n / hardware con
10011b60:	7463656e 0000726f 454d5441 4c422d4c     nector..ATMEL-BL
10011b70:	00000045 69766544 6e206563 20656d61     E...Device name 
10011b80:	20746573 6c696166 00006465 61204442     set failed..BD a
10011b90:	65726464 67207373 66207465 656c6961     ddress get faile
10011ba0:	00000064 41204442 65726464 303a7373     d...BD Address:0
10011bb0:	32302578 32302558 32302558 32302558     x%02X%02X%02X%02
10011bc0:	32302558 32302558 41202c58 65726464     X%02X%02X, Addre
10011bd0:	54207373 3a657079 00006425 20746553     ss Type:%d..Set 
10011be0:	20454c42 69766544 63206563 69666e6f     BLE Device confi
10011bf0:	61727567 6e6f6974 69616620 0064656c     guration failed.
10011c00:	20746553 20454c42 69766544 41206563     Set BLE Device A
10011c10:	65726464 66207373 656c6961 00000064     ddress failed...
10011c20:	6e616353 676e696e 502e2e2e 7361656c     Scanning...Pleas
10011c30:	61772065 2e2e7469 0000002e 76616c53     e wait......Slav
10011c40:	65732065 69727563 72207974 65757165     e security reque
10011c50:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10011c60:	65746365 6f742064 65657020 65642072     ected to peer de
10011c70:	65636976 74697720 64612068 73657264     vice with addres
10011c80:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
10011c90:	78323025 78323025 78323025 00000000     %02x%02x%02x....
10011ca0:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
10011cb0:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
10011cc0:	61522067 6d6f646e 64646120 73736572     g Random address
10011cd0:	69616620 2a64656c 0000002a 2078614d      failed**...Max 
10011ce0:	626d756e 6f207265 6f632066 63656e6e     number of connec
10011cf0:	6e6f6974 61657220 64656863 6425203a     tion reached: %d
10011d00:	3d3d3d20 7369443e 6e6e6f63 69746365      ===>Disconnecti
10011d10:	2e2e676e 0000002e 69766544 43206563     ng......Device C
10011d20:	656e6e6f 6f697463 6146206e 64656c69     onnection Failed
10011d30:	53202d20 75746174 25203a73 00000064      - Status: %d...
10011d40:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
10011d50:	61642074 73206174 66207465 656c6961     t data set faile
10011d60:	00000064                                d...

10011d64 <ble_mgr_gap_handle>:
10011d64:	10009271 1000942d 10009289 00000000     q...-...........
10011d74:	00000000 10009f19 100092e1 10009285     ................
10011d84:	100095cd 100094ad 100097d1 100095e5     ................
10011d94:	10009925 10009a69 10009369 1000a155     %...i...i...U...
	...
10011db0:	00002121 1000baa0 1000baae 1000babc     !!..............
10011dc0:	1000baca 1000bad8 1000bae6 1000baf4     ................
10011dd0:	1000bb04 1000bb14 1000bb24 1000bb34     ........$...4...
10011de0:	1000bb44 1000bb54 1000bb64 1000bb74     D...T...d...t...
10011df0:	1000bb84 1000bb94 1000bba4 1000bbb4     ................
10011e00:	1000bbc4 1000bbd4 1000bbe4 1000bbf4     ................
10011e10:	1000bc04 1000bc14 1000bc24 1000bc34     ........$...4...
10011e20:	1000bc44 1000bc52 1000bc60 1000bc6e     D...R...`...n...
10011e30:	1000bc7c 1000bc8a 1000bc98 1000bca6     |...............
10011e40:	1000bcb4 1000bcc4 1000bcd4 1000bce4     ................
10011e50:	1000bcf4 1000bd04 1000bd14 1000bd24     ............$...
10011e60:	1000bd34 1000bd44 1000bd54 1000bd64     4...D...T...d...
10011e70:	1000bd74 1000bd84 1000bd94 1000bda4     t...............
10011e80:	1000bdb4 1000bdc2 1000bdd0 1000be10     ................
10011e90:	1000be38 1000be60 1000be88 1000c0c8     8...`...........
10011ea0:	1000beb8 1000bed0 1000bf48 1000bf60     ........H...`...
10011eb0:	1000bee8 1000bf00 1000bf18 1000bf30     ............0...
10011ec0:	1000bf78 1000c23c 1000c23c 1000c23c     x...<...<...<...
10011ed0:	1000c23c 1000c23c 1000c23c 1000c23c     <...<...<...<...
10011ee0:	1000c23c 1000c020 1000c038 1000c050     <... ...8...P...
10011ef0:	1000c0de 1000bfa8 1000c23c 1000c23c     ........<...<...
10011f00:	1000c23c 1000c23c 1000c23c 1000c23c     <...<...<...<...
10011f10:	1000c068 1000c080 1000c098 1000c0b0     h...............
10011f20:	1000c23c 1000c1f4 1000c20c 1000c23c     <...........<...
10011f30:	1000c23c 1000c10a 1000c120 1000c136     <....... ...6...
10011f40:	1000c14c 1000c23c 1000c23c 1000c23c     L...<...<...<...
10011f50:	1000c23c 1000c23c 1000c23c 1000c23c     <...<...<...<...
10011f60:	1000c23c 1000bdfc 1000be24 1000be4c     <.......$...L...
10011f70:	1000be74 1000bea0 1000bf90 1000bfc0     t...............
10011f80:	1000bfd8 1000bff0 1000c008 1000c0f4     ................
10011f90:	1000c162 1000c1dc 1000c224 656d7441     b.......$...Atme
10011fa0:	6f43206c 002e7072                                l Corp.

10011fa7 <CSWTCH.47>:
10011fa7:	03010300 03030303 03030303 00020303     ................
10011fb7:	00f42400 00f2e410 00f2e410 00f2e210     .$..............
10011fc7:	00f3fc10 00f3fc10 00f3ee10 00f2e210     ................
10011fd7:	00f3fc10 00f3ee10 00f3fc10 00f2e210     ................
10011fe7:	00f40410 00f40410 00f40410 00f60410     ................
10011ff7:	00004310 0120fc00                                .C...

10011ffc <_global_impure_ptr>:
10011ffc:	100120fc                                . ..

10012000 <__sf_fake_stdin>:
	...

10012020 <__sf_fake_stdout>:
	...

10012040 <__sf_fake_stderr>:
	...
10012060:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10012070:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10012080:	31300046 35343332 39383736 64636261     F.0123456789abcd
10012090:	00006665                                ef..

10012094 <_init>:
10012094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012096:	46c0      	nop			; (mov r8, r8)
10012098:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001209a:	bc08      	pop	{r3}
1001209c:	469e      	mov	lr, r3
1001209e:	4770      	bx	lr

100120a0 <__init_array_start>:
100120a0:	100080b1 	.word	0x100080b1

100120a4 <_fini>:
100120a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100120a6:	46c0      	nop			; (mov r8, r8)
100120a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
100120aa:	bc08      	pop	{r3}
100120ac:	469e      	mov	lr, r3
100120ae:	4770      	bx	lr

100120b0 <__fini_array_start>:
100120b0:	10008089 	.word	0x10008089
