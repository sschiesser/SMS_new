
I2C_QUICK_START_MASTER3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a3fc  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000ac  100123fc  100123fc  000123fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000027f0  100124a8  100124a8  000124a8  2**2
                  ALLOC
  3 .stack        00000800  10014c98  10014c98  000124a8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000124a8  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  000124d0  2**0
                  CONTENTS, READONLY
  6 .debug_info   000274e9  00000000  00000000  00012584  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f38  00000000  00000000  00039a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000084b5  00000000  00000000  0003c9a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000888  00000000  00000000  00044e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000009a8  00000000  00000000  000456e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021d9d  00000000  00000000  0004608a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c2dd  00000000  00000000  00067e27  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0013ee07  00000000  00000000  00074104  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002128  00000000  00000000  001b2f0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	100123fc 	.word	0x100123fc
10008068:	100123fc 	.word	0x100123fc
1000806c:	100124a8 	.word	0x100124a8
10008070:	10014c98 	.word	0x10014c98
10008074:	100124a8 	.word	0x100124a8
10008078:	10012400 	.word	0x10012400
1000807c:	100124ac 	.word	0x100124ac
10008080:	100101e1 	.word	0x100101e1
10008084:	1000c5b5 	.word	0x1000c5b5

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	100124a8 	.word	0x100124a8
100080a8:	00000000 	.word	0x00000000
100080ac:	100123fc 	.word	0x100123fc

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	100124ac 	.word	0x100124ac
100080dc:	100123fc 	.word	0x100123fc
100080e0:	100123fc 	.word	0x100123fc
100080e4:	00000000 	.word	0x00000000

100080e8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
100080e8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_clock_get_value();
100080ea:	4b09      	ldr	r3, [pc, #36]	; (10008110 <delay_init+0x28>)
100080ec:	4798      	blx	r3
100080ee:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
100080f0:	4c08      	ldr	r4, [pc, #32]	; (10008114 <delay_init+0x2c>)
100080f2:	21fa      	movs	r1, #250	; 0xfa
100080f4:	0089      	lsls	r1, r1, #2
100080f6:	47a0      	blx	r4
100080f8:	4b07      	ldr	r3, [pc, #28]	; (10008118 <delay_init+0x30>)
100080fa:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
100080fc:	4907      	ldr	r1, [pc, #28]	; (1000811c <delay_init+0x34>)
100080fe:	0028      	movs	r0, r5
10008100:	47a0      	blx	r4
10008102:	4b07      	ldr	r3, [pc, #28]	; (10008120 <delay_init+0x38>)
10008104:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
10008106:	2205      	movs	r2, #5
10008108:	4b06      	ldr	r3, [pc, #24]	; (10008124 <delay_init+0x3c>)
1000810a:	601a      	str	r2, [r3, #0]
}
1000810c:	bd70      	pop	{r4, r5, r6, pc}
1000810e:	46c0      	nop			; (mov r8, r8)
10008110:	1000bc7d 	.word	0x1000bc7d
10008114:	1000ef15 	.word	0x1000ef15
10008118:	10012400 	.word	0x10012400
1000811c:	000f4240 	.word	0x000f4240
10008120:	100123fc 	.word	0x100123fc
10008124:	e000e010 	.word	0xe000e010

10008128 <delay_cycles_ms>:
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
10008128:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
1000812a:	4b08      	ldr	r3, [pc, #32]	; (1000814c <delay_cycles_ms+0x24>)
1000812c:	681c      	ldr	r4, [r3, #0]
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
1000812e:	4a08      	ldr	r2, [pc, #32]	; (10008150 <delay_cycles_ms+0x28>)
        SysTick->VAL = 0;
10008130:	2500      	movs	r5, #0
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008132:	2180      	movs	r1, #128	; 0x80
10008134:	0249      	lsls	r1, r1, #9
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
10008136:	e006      	b.n	10008146 <delay_cycles_ms+0x1e>
 *
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
10008138:	2c00      	cmp	r4, #0
1000813a:	d004      	beq.n	10008146 <delay_cycles_ms+0x1e>
        SysTick->LOAD = n;
1000813c:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
1000813e:	6095      	str	r5, [r2, #8]
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008140:	6813      	ldr	r3, [r2, #0]
10008142:	420b      	tst	r3, r1
10008144:	d0fc      	beq.n	10008140 <delay_cycles_ms+0x18>
10008146:	3801      	subs	r0, #1
10008148:	d2f6      	bcs.n	10008138 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
1000814a:	bd30      	pop	{r4, r5, pc}
1000814c:	10012400 	.word	0x10012400
10008150:	e000e010 	.word	0xe000e010

10008154 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
10008154:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
10008156:	4b0d      	ldr	r3, [pc, #52]	; (1000818c <dualtimer_isr_handler+0x38>)
10008158:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000815a:	2b00      	cmp	r3, #0
1000815c:	d007      	beq.n	1000816e <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000815e:	2201      	movs	r2, #1
10008160:	4b0a      	ldr	r3, [pc, #40]	; (1000818c <dualtimer_isr_handler+0x38>)
10008162:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
10008164:	4b0a      	ldr	r3, [pc, #40]	; (10008190 <dualtimer_isr_handler+0x3c>)
10008166:	681b      	ldr	r3, [r3, #0]
10008168:	2b00      	cmp	r3, #0
1000816a:	d000      	beq.n	1000816e <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000816c:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000816e:	2334      	movs	r3, #52	; 0x34
10008170:	4a06      	ldr	r2, [pc, #24]	; (1000818c <dualtimer_isr_handler+0x38>)
10008172:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
10008174:	2b00      	cmp	r3, #0
10008176:	d007      	beq.n	10008188 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
10008178:	2101      	movs	r1, #1
1000817a:	232c      	movs	r3, #44	; 0x2c
1000817c:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000817e:	4b05      	ldr	r3, [pc, #20]	; (10008194 <dualtimer_isr_handler+0x40>)
10008180:	681b      	ldr	r3, [r3, #0]
10008182:	2b00      	cmp	r3, #0
10008184:	d000      	beq.n	10008188 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
10008186:	4798      	blx	r3
	}
}
10008188:	bd10      	pop	{r4, pc}
1000818a:	46c0      	nop			; (mov r8, r8)
1000818c:	40001000 	.word	0x40001000
10008190:	100124c4 	.word	0x100124c4
10008194:	100124c8 	.word	0x100124c8

10008198 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
10008198:	2301      	movs	r3, #1
1000819a:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000819c:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000819e:	2202      	movs	r2, #2
100081a0:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
100081a2:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
100081a4:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
100081a6:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
100081a8:	2200      	movs	r2, #0
100081aa:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
100081ac:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
100081ae:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
100081b0:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
100081b2:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
100081b4:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
100081b6:	7602      	strb	r2, [r0, #24]
}
100081b8:	4770      	bx	lr
100081ba:	46c0      	nop			; (mov r8, r8)

100081bc <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
100081bc:	2800      	cmp	r0, #0
100081be:	d105      	bne.n	100081cc <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
100081c0:	4a06      	ldr	r2, [pc, #24]	; (100081dc <dualtimer_enable+0x20>)
100081c2:	7a11      	ldrb	r1, [r2, #8]
100081c4:	2380      	movs	r3, #128	; 0x80
100081c6:	430b      	orrs	r3, r1
100081c8:	7213      	strb	r3, [r2, #8]
100081ca:	e005      	b.n	100081d8 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
100081cc:	4903      	ldr	r1, [pc, #12]	; (100081dc <dualtimer_enable+0x20>)
100081ce:	2228      	movs	r2, #40	; 0x28
100081d0:	5c88      	ldrb	r0, [r1, r2]
100081d2:	2380      	movs	r3, #128	; 0x80
100081d4:	4303      	orrs	r3, r0
100081d6:	548b      	strb	r3, [r1, r2]
	}
}
100081d8:	4770      	bx	lr
100081da:	46c0      	nop			; (mov r8, r8)
100081dc:	40001000 	.word	0x40001000

100081e0 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
100081e0:	b570      	push	{r4, r5, r6, lr}
100081e2:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
100081e4:	2004      	movs	r0, #4
100081e6:	4b39      	ldr	r3, [pc, #228]	; (100082cc <dualtimer_init+0xec>)
100081e8:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
100081ea:	7823      	ldrb	r3, [r4, #0]
100081ec:	2b00      	cmp	r3, #0
100081ee:	d102      	bne.n	100081f6 <dualtimer_init+0x16>
100081f0:	7b23      	ldrb	r3, [r4, #12]
100081f2:	2b00      	cmp	r3, #0
100081f4:	d065      	beq.n	100082c2 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
100081f6:	4936      	ldr	r1, [pc, #216]	; (100082d0 <dualtimer_init+0xf0>)
100081f8:	68ca      	ldr	r2, [r1, #12]
100081fa:	2320      	movs	r3, #32
100081fc:	4313      	orrs	r3, r2
100081fe:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
10008200:	7e22      	ldrb	r2, [r4, #24]
10008202:	698b      	ldr	r3, [r1, #24]
10008204:	2003      	movs	r0, #3
10008206:	4002      	ands	r2, r0
10008208:	0112      	lsls	r2, r2, #4
1000820a:	302d      	adds	r0, #45	; 0x2d
1000820c:	4383      	bics	r3, r0
1000820e:	4313      	orrs	r3, r2
10008210:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
10008212:	7823      	ldrb	r3, [r4, #0]
10008214:	2b00      	cmp	r3, #0
10008216:	d026      	beq.n	10008266 <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008218:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000821a:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000821c:	2b00      	cmp	r3, #0
1000821e:	d003      	beq.n	10008228 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
10008220:	3b02      	subs	r3, #2
10008222:	425d      	negs	r5, r3
10008224:	415d      	adcs	r5, r3
10008226:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
10008228:	78a2      	ldrb	r2, [r4, #2]
1000822a:	0052      	lsls	r2, r2, #1
1000822c:	2502      	movs	r5, #2
1000822e:	402a      	ands	r2, r5
10008230:	78e3      	ldrb	r3, [r4, #3]
10008232:	009b      	lsls	r3, r3, #2
10008234:	350a      	adds	r5, #10
10008236:	402b      	ands	r3, r5
10008238:	431a      	orrs	r2, r3
1000823a:	0015      	movs	r5, r2
1000823c:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000823e:	7923      	ldrb	r3, [r4, #4]
10008240:	2b00      	cmp	r3, #0
10008242:	d001      	beq.n	10008248 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
10008244:	2320      	movs	r3, #32
10008246:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
10008248:	4b22      	ldr	r3, [pc, #136]	; (100082d4 <dualtimer_init+0xf4>)
1000824a:	68a2      	ldr	r2, [r4, #8]
1000824c:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000824e:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10008250:	491f      	ldr	r1, [pc, #124]	; (100082d0 <dualtimer_init+0xf0>)
10008252:	22c4      	movs	r2, #196	; 0xc4
10008254:	0052      	lsls	r2, r2, #1
10008256:	5c88      	ldrb	r0, [r1, r2]
10008258:	2301      	movs	r3, #1
1000825a:	4303      	orrs	r3, r0
1000825c:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000825e:	2000      	movs	r0, #0
10008260:	4b1d      	ldr	r3, [pc, #116]	; (100082d8 <dualtimer_init+0xf8>)
10008262:	4798      	blx	r3
10008264:	e000      	b.n	10008268 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
10008266:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
10008268:	7b23      	ldrb	r3, [r4, #12]
1000826a:	2b00      	cmp	r3, #0
1000826c:	d029      	beq.n	100082c2 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000826e:	7b63      	ldrb	r3, [r4, #13]
10008270:	2b00      	cmp	r3, #0
10008272:	d005      	beq.n	10008280 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
10008274:	2b01      	cmp	r3, #1
10008276:	d005      	beq.n	10008284 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
10008278:	2b02      	cmp	r3, #2
1000827a:	d104      	bne.n	10008286 <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000827c:	2540      	movs	r5, #64	; 0x40
1000827e:	e002      	b.n	10008286 <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
10008280:	2501      	movs	r5, #1
10008282:	e000      	b.n	10008286 <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
10008284:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
10008286:	7ba3      	ldrb	r3, [r4, #14]
10008288:	005b      	lsls	r3, r3, #1
1000828a:	2102      	movs	r1, #2
1000828c:	4019      	ands	r1, r3
1000828e:	7be2      	ldrb	r2, [r4, #15]
10008290:	0092      	lsls	r2, r2, #2
10008292:	230c      	movs	r3, #12
10008294:	4013      	ands	r3, r2
10008296:	430b      	orrs	r3, r1
10008298:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000829a:	7c23      	ldrb	r3, [r4, #16]
1000829c:	2b00      	cmp	r3, #0
1000829e:	d001      	beq.n	100082a4 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
100082a0:	2320      	movs	r3, #32
100082a2:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
100082a4:	6962      	ldr	r2, [r4, #20]
100082a6:	4b0b      	ldr	r3, [pc, #44]	; (100082d4 <dualtimer_init+0xf4>)
100082a8:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
100082aa:	2228      	movs	r2, #40	; 0x28
100082ac:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
100082ae:	4908      	ldr	r1, [pc, #32]	; (100082d0 <dualtimer_init+0xf0>)
100082b0:	3261      	adds	r2, #97	; 0x61
100082b2:	32ff      	adds	r2, #255	; 0xff
100082b4:	5c88      	ldrb	r0, [r1, r2]
100082b6:	2302      	movs	r3, #2
100082b8:	4303      	orrs	r3, r0
100082ba:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
100082bc:	2001      	movs	r0, #1
100082be:	4b06      	ldr	r3, [pc, #24]	; (100082d8 <dualtimer_init+0xf8>)
100082c0:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
100082c2:	4906      	ldr	r1, [pc, #24]	; (100082dc <dualtimer_init+0xfc>)
100082c4:	201e      	movs	r0, #30
100082c6:	4b06      	ldr	r3, [pc, #24]	; (100082e0 <dualtimer_init+0x100>)
100082c8:	4798      	blx	r3
}
100082ca:	bd70      	pop	{r4, r5, r6, pc}
100082cc:	1000bfe5 	.word	0x1000bfe5
100082d0:	4000b000 	.word	0x4000b000
100082d4:	40001000 	.word	0x40001000
100082d8:	100081bd 	.word	0x100081bd
100082dc:	10008155 	.word	0x10008155
100082e0:	1000c44d 	.word	0x1000c44d

100082e4 <i2c_read>:
        }
    }
    return 0;
}
static int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
100082e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100082e6:	4647      	mov	r7, r8
100082e8:	b480      	push	{r7}
100082ea:	b082      	sub	sp, #8
100082ec:	0017      	movs	r7, r2
100082ee:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    volatile uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
100082f0:	b280      	uxth	r0, r0
100082f2:	4b27      	ldr	r3, [pc, #156]	; (10008390 <i2c_read+0xac>)
100082f4:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
100082f6:	2201      	movs	r2, #1
100082f8:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
100082fa:	685b      	ldr	r3, [r3, #4]
100082fc:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
100082fe:	4b25      	ldr	r3, [pc, #148]	; (10008394 <i2c_read+0xb0>)
10008300:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
10008302:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
10008304:	2200      	movs	r2, #0
10008306:	466b      	mov	r3, sp
10008308:	80da      	strh	r2, [r3, #6]
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000830a:	4d21      	ldr	r5, [pc, #132]	; (10008390 <i2c_read+0xac>)
1000830c:	4c22      	ldr	r4, [pc, #136]	; (10008398 <i2c_read+0xb4>)
1000830e:	4e23      	ldr	r6, [pc, #140]	; (1000839c <i2c_read+0xb8>)
10008310:	e009      	b.n	10008326 <i2c_read+0x42>
        if(timeout++ >= I2C_TIMEOUT) {
10008312:	466b      	mov	r3, sp
10008314:	1d9a      	adds	r2, r3, #6
10008316:	88db      	ldrh	r3, [r3, #6]
10008318:	b29b      	uxth	r3, r3
1000831a:	1c59      	adds	r1, r3, #1
1000831c:	b289      	uxth	r1, r1
1000831e:	8011      	strh	r1, [r2, #0]
10008320:	4a1f      	ldr	r2, [pc, #124]	; (100083a0 <i2c_read+0xbc>)
10008322:	4293      	cmp	r3, r2
10008324:	d828      	bhi.n	10008378 <i2c_read+0x94>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008326:	0029      	movs	r1, r5
10008328:	0020      	movs	r0, r4
1000832a:	47b0      	blx	r6
1000832c:	2800      	cmp	r0, #0
1000832e:	d1f0      	bne.n	10008312 <i2c_read+0x2e>
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    
    timeout = 0;
10008330:	2200      	movs	r2, #0
10008332:	466b      	mov	r3, sp
10008334:	80da      	strh	r2, [r3, #6]
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
10008336:	4d17      	ldr	r5, [pc, #92]	; (10008394 <i2c_read+0xb0>)
10008338:	4c17      	ldr	r4, [pc, #92]	; (10008398 <i2c_read+0xb4>)
1000833a:	4e1a      	ldr	r6, [pc, #104]	; (100083a4 <i2c_read+0xc0>)
1000833c:	e009      	b.n	10008352 <i2c_read+0x6e>
        if(timeout++ >= I2C_TIMEOUT) {
1000833e:	466b      	mov	r3, sp
10008340:	1d9a      	adds	r2, r3, #6
10008342:	88db      	ldrh	r3, [r3, #6]
10008344:	b29b      	uxth	r3, r3
10008346:	1c59      	adds	r1, r3, #1
10008348:	b289      	uxth	r1, r1
1000834a:	8011      	strh	r1, [r2, #0]
1000834c:	4a14      	ldr	r2, [pc, #80]	; (100083a0 <i2c_read+0xbc>)
1000834e:	4293      	cmp	r3, r2
10008350:	d815      	bhi.n	1000837e <i2c_read+0x9a>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
10008352:	0029      	movs	r1, r5
10008354:	0020      	movs	r0, r4
10008356:	47b0      	blx	r6
10008358:	2800      	cmp	r0, #0
1000835a:	d1f0      	bne.n	1000833e <i2c_read+0x5a>
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000835c:	2f00      	cmp	r7, #0
1000835e:	d011      	beq.n	10008384 <i2c_read+0xa0>
10008360:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
10008362:	490c      	ldr	r1, [pc, #48]	; (10008394 <i2c_read+0xb0>)
10008364:	684a      	ldr	r2, [r1, #4]
10008366:	5cd2      	ldrb	r2, [r2, r3]
10008368:	4640      	mov	r0, r8
1000836a:	54c2      	strb	r2, [r0, r3]
1000836c:	3301      	adds	r3, #1
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
1000836e:	b2da      	uxtb	r2, r3
10008370:	42ba      	cmp	r2, r7
10008372:	d3f7      	bcc.n	10008364 <i2c_read+0x80>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
10008374:	2000      	movs	r0, #0
10008376:	e006      	b.n	10008386 <i2c_read+0xa2>
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
10008378:	2001      	movs	r0, #1
1000837a:	4240      	negs	r0, r0
1000837c:	e003      	b.n	10008386 <i2c_read+0xa2>
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000837e:	2001      	movs	r0, #1
10008380:	4240      	negs	r0, r0
10008382:	e000      	b.n	10008386 <i2c_read+0xa2>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
10008384:	2000      	movs	r0, #0
}
10008386:	b002      	add	sp, #8
10008388:	bc04      	pop	{r2}
1000838a:	4690      	mov	r8, r2
1000838c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000838e:	46c0      	nop			; (mov r8, r8)
10008390:	10013a94 	.word	0x10013a94
10008394:	10013a8c 	.word	0x10013a8c
10008398:	10014710 	.word	0x10014710
1000839c:	1000bbd5 	.word	0x1000bbd5
100083a0:	000003e7 	.word	0x000003e7
100083a4:	1000bb7d 	.word	0x1000bb7d

100083a8 <i2c_write>:
* labs(long x)
* fabsf(float x)
* min(int a, int b)
*/
static int i2c_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
100083a8:	b570      	push	{r4, r5, r6, lr}
100083aa:	b082      	sub	sp, #8
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    volatile uint16_t timeout = 0;
100083ac:	2500      	movs	r5, #0
100083ae:	466c      	mov	r4, sp
100083b0:	80e5      	strh	r5, [r4, #6]
    i2c_wpacket.address = (uint8_t)slave_addr;
100083b2:	4c15      	ldr	r4, [pc, #84]	; (10008408 <i2c_write+0x60>)
100083b4:	8020      	strh	r0, [r4, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
100083b6:	1c50      	adds	r0, r2, #1
100083b8:	b2c0      	uxtb	r0, r0
100083ba:	8060      	strh	r0, [r4, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
100083bc:	6860      	ldr	r0, [r4, #4]
100083be:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
100083c0:	2a00      	cmp	r2, #0
100083c2:	d008      	beq.n	100083d6 <i2c_write+0x2e>
100083c4:	2000      	movs	r0, #0
100083c6:	1c41      	adds	r1, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
100083c8:	5c18      	ldrb	r0, [r3, r0]
100083ca:	6865      	ldr	r5, [r4, #4]
100083cc:	5468      	strb	r0, [r5, r1]
100083ce:	0008      	movs	r0, r1
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    volatile uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
100083d0:	b2c9      	uxtb	r1, r1
100083d2:	428a      	cmp	r2, r1
100083d4:	d8f7      	bhi.n	100083c6 <i2c_write+0x1e>
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
100083d6:	4d0c      	ldr	r5, [pc, #48]	; (10008408 <i2c_write+0x60>)
100083d8:	4c0c      	ldr	r4, [pc, #48]	; (1000840c <i2c_write+0x64>)
100083da:	4e0d      	ldr	r6, [pc, #52]	; (10008410 <i2c_write+0x68>)
100083dc:	e009      	b.n	100083f2 <i2c_write+0x4a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
100083de:	466b      	mov	r3, sp
100083e0:	1d99      	adds	r1, r3, #6
100083e2:	88db      	ldrh	r3, [r3, #6]
100083e4:	b29b      	uxth	r3, r3
100083e6:	1c5a      	adds	r2, r3, #1
100083e8:	b292      	uxth	r2, r2
100083ea:	800a      	strh	r2, [r1, #0]
100083ec:	4a09      	ldr	r2, [pc, #36]	; (10008414 <i2c_write+0x6c>)
100083ee:	4293      	cmp	r3, r2
100083f0:	d805      	bhi.n	100083fe <i2c_write+0x56>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
100083f2:	0029      	movs	r1, r5
100083f4:	0020      	movs	r0, r4
100083f6:	47b0      	blx	r6
100083f8:	2800      	cmp	r0, #0
100083fa:	d1f0      	bne.n	100083de <i2c_write+0x36>
100083fc:	e001      	b.n	10008402 <i2c_write+0x5a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
100083fe:	2001      	movs	r0, #1
10008400:	4240      	negs	r0, r0
        }
    }
    return 0;
}
10008402:	b002      	add	sp, #8
10008404:	bd70      	pop	{r4, r5, r6, pc}
10008406:	46c0      	nop			; (mov r8, r8)
10008408:	10013a94 	.word	0x10013a94
1000840c:	10014710 	.word	0x10014710
10008410:	1000bba1 	.word	0x1000bba1
10008414:	000003e7 	.word	0x000003e7

10008418 <set_int_enable>:
*  interrupt is used.
*  @param[in]  enable      1 to enable interrupt.
*  @return     0 if successful.
*/
static int set_int_enable(unsigned char enable)
{
10008418:	b510      	push	{r4, lr}
1000841a:	b082      	sub	sp, #8
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
1000841c:	2324      	movs	r3, #36	; 0x24
1000841e:	4a25      	ldr	r2, [pc, #148]	; (100084b4 <set_int_enable+0x9c>)
10008420:	5cd3      	ldrb	r3, [r2, r3]
10008422:	2b00      	cmp	r3, #0
10008424:	d019      	beq.n	1000845a <set_int_enable+0x42>
        if (enable)
10008426:	2800      	cmp	r0, #0
10008428:	d003      	beq.n	10008432 <set_int_enable+0x1a>
        tmp = BIT_DMP_INT_EN;
1000842a:	2202      	movs	r2, #2
1000842c:	466b      	mov	r3, sp
1000842e:	71da      	strb	r2, [r3, #7]
10008430:	e002      	b.n	10008438 <set_int_enable+0x20>
        else
        tmp = 0x00;
10008432:	2200      	movs	r2, #0
10008434:	466b      	mov	r3, sp
10008436:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
10008438:	4b1e      	ldr	r3, [pc, #120]	; (100084b4 <set_int_enable+0x9c>)
1000843a:	681a      	ldr	r2, [r3, #0]
1000843c:	7c51      	ldrb	r1, [r2, #17]
1000843e:	685b      	ldr	r3, [r3, #4]
10008440:	7818      	ldrb	r0, [r3, #0]
10008442:	466b      	mov	r3, sp
10008444:	3307      	adds	r3, #7
10008446:	2201      	movs	r2, #1
10008448:	4c1b      	ldr	r4, [pc, #108]	; (100084b8 <set_int_enable+0xa0>)
1000844a:	47a0      	blx	r4
1000844c:	2800      	cmp	r0, #0
1000844e:	d127      	bne.n	100084a0 <set_int_enable+0x88>
        return -1;
        st.chip_cfg.int_enable = tmp;
10008450:	466b      	mov	r3, sp
10008452:	79da      	ldrb	r2, [r3, #7]
10008454:	4b17      	ldr	r3, [pc, #92]	; (100084b4 <set_int_enable+0x9c>)
10008456:	745a      	strb	r2, [r3, #17]
10008458:	e02a      	b.n	100084b0 <set_int_enable+0x98>
        } else {
        if (!st.chip_cfg.sensors)
1000845a:	4b16      	ldr	r3, [pc, #88]	; (100084b4 <set_int_enable+0x9c>)
1000845c:	7a9b      	ldrb	r3, [r3, #10]
1000845e:	2b00      	cmp	r3, #0
10008460:	d021      	beq.n	100084a6 <set_int_enable+0x8e>
        return -1;
        if (enable && st.chip_cfg.int_enable)
10008462:	2800      	cmp	r0, #0
10008464:	d008      	beq.n	10008478 <set_int_enable+0x60>
10008466:	4b13      	ldr	r3, [pc, #76]	; (100084b4 <set_int_enable+0x9c>)
10008468:	7c5b      	ldrb	r3, [r3, #17]
        return 0;
1000846a:	2000      	movs	r0, #0
        return -1;
        st.chip_cfg.int_enable = tmp;
        } else {
        if (!st.chip_cfg.sensors)
        return -1;
        if (enable && st.chip_cfg.int_enable)
1000846c:	2b00      	cmp	r3, #0
1000846e:	d11f      	bne.n	100084b0 <set_int_enable+0x98>
        return 0;
        if (enable)
        tmp = BIT_DATA_RDY_EN;
10008470:	2201      	movs	r2, #1
10008472:	466b      	mov	r3, sp
10008474:	71da      	strb	r2, [r3, #7]
10008476:	e002      	b.n	1000847e <set_int_enable+0x66>
        else
        tmp = 0x00;
10008478:	2200      	movs	r2, #0
1000847a:	466b      	mov	r3, sp
1000847c:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
1000847e:	4b0d      	ldr	r3, [pc, #52]	; (100084b4 <set_int_enable+0x9c>)
10008480:	681a      	ldr	r2, [r3, #0]
10008482:	7c51      	ldrb	r1, [r2, #17]
10008484:	685b      	ldr	r3, [r3, #4]
10008486:	7818      	ldrb	r0, [r3, #0]
10008488:	466b      	mov	r3, sp
1000848a:	3307      	adds	r3, #7
1000848c:	2201      	movs	r2, #1
1000848e:	4c0a      	ldr	r4, [pc, #40]	; (100084b8 <set_int_enable+0xa0>)
10008490:	47a0      	blx	r4
10008492:	2800      	cmp	r0, #0
10008494:	d10a      	bne.n	100084ac <set_int_enable+0x94>
        return -1;
        st.chip_cfg.int_enable = tmp;
10008496:	466b      	mov	r3, sp
10008498:	79da      	ldrb	r2, [r3, #7]
1000849a:	4b06      	ldr	r3, [pc, #24]	; (100084b4 <set_int_enable+0x9c>)
1000849c:	745a      	strb	r2, [r3, #17]
1000849e:	e007      	b.n	100084b0 <set_int_enable+0x98>
        if (enable)
        tmp = BIT_DMP_INT_EN;
        else
        tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
        return -1;
100084a0:	2001      	movs	r0, #1
100084a2:	4240      	negs	r0, r0
100084a4:	e004      	b.n	100084b0 <set_int_enable+0x98>
        st.chip_cfg.int_enable = tmp;
        } else {
        if (!st.chip_cfg.sensors)
        return -1;
100084a6:	2001      	movs	r0, #1
100084a8:	4240      	negs	r0, r0
100084aa:	e001      	b.n	100084b0 <set_int_enable+0x98>
        if (enable)
        tmp = BIT_DATA_RDY_EN;
        else
        tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
        return -1;
100084ac:	2001      	movs	r0, #1
100084ae:	4240      	negs	r0, r0
        st.chip_cfg.int_enable = tmp;
    }
    return 0;
}
100084b0:	b002      	add	sp, #8
100084b2:	bd10      	pop	{r4, pc}
100084b4:	10012404 	.word	0x10012404
100084b8:	100083a9 	.word	0x100083a9

100084bc <mpu_reset_fifo>:
/**
*  @brief  Reset FIFO read/write pointers.
*  @return 0 if successful.
*/
int mpu_reset_fifo(void)
{
100084bc:	b510      	push	{r4, lr}
100084be:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100084c0:	4b79      	ldr	r3, [pc, #484]	; (100086a8 <mpu_reset_fifo+0x1ec>)
100084c2:	7a9b      	ldrb	r3, [r3, #10]
100084c4:	2b00      	cmp	r3, #0
100084c6:	d100      	bne.n	100084ca <mpu_reset_fifo+0xe>
100084c8:	e0ce      	b.n	10008668 <mpu_reset_fifo+0x1ac>
    return -1;

    data = 0;
100084ca:	466b      	mov	r3, sp
100084cc:	3307      	adds	r3, #7
100084ce:	2200      	movs	r2, #0
100084d0:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
100084d2:	4a75      	ldr	r2, [pc, #468]	; (100086a8 <mpu_reset_fifo+0x1ec>)
100084d4:	6811      	ldr	r1, [r2, #0]
100084d6:	7c49      	ldrb	r1, [r1, #17]
100084d8:	6852      	ldr	r2, [r2, #4]
100084da:	7810      	ldrb	r0, [r2, #0]
100084dc:	2201      	movs	r2, #1
100084de:	4c73      	ldr	r4, [pc, #460]	; (100086ac <mpu_reset_fifo+0x1f0>)
100084e0:	47a0      	blx	r4
100084e2:	2800      	cmp	r0, #0
100084e4:	d000      	beq.n	100084e8 <mpu_reset_fifo+0x2c>
100084e6:	e0c2      	b.n	1000866e <mpu_reset_fifo+0x1b2>
    return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100084e8:	4b6f      	ldr	r3, [pc, #444]	; (100086a8 <mpu_reset_fifo+0x1ec>)
100084ea:	681a      	ldr	r2, [r3, #0]
100084ec:	7951      	ldrb	r1, [r2, #5]
100084ee:	685b      	ldr	r3, [r3, #4]
100084f0:	7818      	ldrb	r0, [r3, #0]
100084f2:	466b      	mov	r3, sp
100084f4:	3307      	adds	r3, #7
100084f6:	2201      	movs	r2, #1
100084f8:	4c6c      	ldr	r4, [pc, #432]	; (100086ac <mpu_reset_fifo+0x1f0>)
100084fa:	47a0      	blx	r4
100084fc:	2800      	cmp	r0, #0
100084fe:	d000      	beq.n	10008502 <mpu_reset_fifo+0x46>
10008500:	e0b8      	b.n	10008674 <mpu_reset_fifo+0x1b8>
    return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008502:	4b69      	ldr	r3, [pc, #420]	; (100086a8 <mpu_reset_fifo+0x1ec>)
10008504:	681a      	ldr	r2, [r3, #0]
10008506:	7911      	ldrb	r1, [r2, #4]
10008508:	685b      	ldr	r3, [r3, #4]
1000850a:	7818      	ldrb	r0, [r3, #0]
1000850c:	466b      	mov	r3, sp
1000850e:	3307      	adds	r3, #7
10008510:	2201      	movs	r2, #1
10008512:	4c66      	ldr	r4, [pc, #408]	; (100086ac <mpu_reset_fifo+0x1f0>)
10008514:	47a0      	blx	r4
10008516:	2800      	cmp	r0, #0
10008518:	d000      	beq.n	1000851c <mpu_reset_fifo+0x60>
1000851a:	e0ae      	b.n	1000867a <mpu_reset_fifo+0x1be>
    return -1;

    if (st.chip_cfg.dmp_on) {
1000851c:	2324      	movs	r3, #36	; 0x24
1000851e:	4a62      	ldr	r2, [pc, #392]	; (100086a8 <mpu_reset_fifo+0x1ec>)
10008520:	5cd3      	ldrb	r3, [r2, r3]
10008522:	2b00      	cmp	r3, #0
10008524:	d04f      	beq.n	100085c6 <mpu_reset_fifo+0x10a>
        data = BIT_FIFO_RST | BIT_DMP_RST;
10008526:	466b      	mov	r3, sp
10008528:	3307      	adds	r3, #7
1000852a:	220c      	movs	r2, #12
1000852c:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000852e:	4a5e      	ldr	r2, [pc, #376]	; (100086a8 <mpu_reset_fifo+0x1ec>)
10008530:	6811      	ldr	r1, [r2, #0]
10008532:	7909      	ldrb	r1, [r1, #4]
10008534:	6852      	ldr	r2, [r2, #4]
10008536:	7810      	ldrb	r0, [r2, #0]
10008538:	2201      	movs	r2, #1
1000853a:	4c5c      	ldr	r4, [pc, #368]	; (100086ac <mpu_reset_fifo+0x1f0>)
1000853c:	47a0      	blx	r4
1000853e:	2800      	cmp	r0, #0
10008540:	d000      	beq.n	10008544 <mpu_reset_fifo+0x88>
10008542:	e09d      	b.n	10008680 <mpu_reset_fifo+0x1c4>
        return -1;
        delay_ms(50);
10008544:	3032      	adds	r0, #50	; 0x32
10008546:	4b5a      	ldr	r3, [pc, #360]	; (100086b0 <mpu_reset_fifo+0x1f4>)
10008548:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
1000854a:	22c0      	movs	r2, #192	; 0xc0
1000854c:	466b      	mov	r3, sp
1000854e:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008550:	4b55      	ldr	r3, [pc, #340]	; (100086a8 <mpu_reset_fifo+0x1ec>)
10008552:	7a9b      	ldrb	r3, [r3, #10]
10008554:	07db      	lsls	r3, r3, #31
10008556:	d502      	bpl.n	1000855e <mpu_reset_fifo+0xa2>
        data |= BIT_AUX_IF_EN;
10008558:	3220      	adds	r2, #32
1000855a:	466b      	mov	r3, sp
1000855c:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
1000855e:	4b52      	ldr	r3, [pc, #328]	; (100086a8 <mpu_reset_fifo+0x1ec>)
10008560:	681a      	ldr	r2, [r3, #0]
10008562:	7911      	ldrb	r1, [r2, #4]
10008564:	685b      	ldr	r3, [r3, #4]
10008566:	7818      	ldrb	r0, [r3, #0]
10008568:	466b      	mov	r3, sp
1000856a:	3307      	adds	r3, #7
1000856c:	2201      	movs	r2, #1
1000856e:	4c4f      	ldr	r4, [pc, #316]	; (100086ac <mpu_reset_fifo+0x1f0>)
10008570:	47a0      	blx	r4
10008572:	2800      	cmp	r0, #0
10008574:	d000      	beq.n	10008578 <mpu_reset_fifo+0xbc>
10008576:	e086      	b.n	10008686 <mpu_reset_fifo+0x1ca>
        return -1;
        if (st.chip_cfg.int_enable)
10008578:	4b4b      	ldr	r3, [pc, #300]	; (100086a8 <mpu_reset_fifo+0x1ec>)
1000857a:	7c5b      	ldrb	r3, [r3, #17]
1000857c:	2b00      	cmp	r3, #0
1000857e:	d003      	beq.n	10008588 <mpu_reset_fifo+0xcc>
        data = BIT_DMP_INT_EN;
10008580:	2202      	movs	r2, #2
10008582:	466b      	mov	r3, sp
10008584:	71da      	strb	r2, [r3, #7]
10008586:	e002      	b.n	1000858e <mpu_reset_fifo+0xd2>
        else
        data = 0;
10008588:	2200      	movs	r2, #0
1000858a:	466b      	mov	r3, sp
1000858c:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1000858e:	4b46      	ldr	r3, [pc, #280]	; (100086a8 <mpu_reset_fifo+0x1ec>)
10008590:	681a      	ldr	r2, [r3, #0]
10008592:	7c51      	ldrb	r1, [r2, #17]
10008594:	685b      	ldr	r3, [r3, #4]
10008596:	7818      	ldrb	r0, [r3, #0]
10008598:	466b      	mov	r3, sp
1000859a:	3307      	adds	r3, #7
1000859c:	2201      	movs	r2, #1
1000859e:	4c43      	ldr	r4, [pc, #268]	; (100086ac <mpu_reset_fifo+0x1f0>)
100085a0:	47a0      	blx	r4
100085a2:	2800      	cmp	r0, #0
100085a4:	d172      	bne.n	1000868c <mpu_reset_fifo+0x1d0>
        return -1;
        data = 0;
100085a6:	466b      	mov	r3, sp
100085a8:	3307      	adds	r3, #7
100085aa:	2200      	movs	r2, #0
100085ac:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100085ae:	4a3e      	ldr	r2, [pc, #248]	; (100086a8 <mpu_reset_fifo+0x1ec>)
100085b0:	6811      	ldr	r1, [r2, #0]
100085b2:	7949      	ldrb	r1, [r1, #5]
100085b4:	6852      	ldr	r2, [r2, #4]
100085b6:	7810      	ldrb	r0, [r2, #0]
100085b8:	2201      	movs	r2, #1
100085ba:	4c3c      	ldr	r4, [pc, #240]	; (100086ac <mpu_reset_fifo+0x1f0>)
100085bc:	47a0      	blx	r4
100085be:	1e43      	subs	r3, r0, #1
100085c0:	4198      	sbcs	r0, r3
100085c2:	4240      	negs	r0, r0
100085c4:	e06d      	b.n	100086a2 <mpu_reset_fifo+0x1e6>
        return -1;
        } else {
        data = BIT_FIFO_RST;
100085c6:	466b      	mov	r3, sp
100085c8:	3307      	adds	r3, #7
100085ca:	2204      	movs	r2, #4
100085cc:	701a      	strb	r2, [r3, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100085ce:	4a36      	ldr	r2, [pc, #216]	; (100086a8 <mpu_reset_fifo+0x1ec>)
100085d0:	6811      	ldr	r1, [r2, #0]
100085d2:	7909      	ldrb	r1, [r1, #4]
100085d4:	6852      	ldr	r2, [r2, #4]
100085d6:	7810      	ldrb	r0, [r2, #0]
100085d8:	2201      	movs	r2, #1
100085da:	4c34      	ldr	r4, [pc, #208]	; (100086ac <mpu_reset_fifo+0x1f0>)
100085dc:	47a0      	blx	r4
100085de:	2800      	cmp	r0, #0
100085e0:	d157      	bne.n	10008692 <mpu_reset_fifo+0x1d6>
        return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
100085e2:	4b31      	ldr	r3, [pc, #196]	; (100086a8 <mpu_reset_fifo+0x1ec>)
100085e4:	7c9b      	ldrb	r3, [r3, #18]
100085e6:	2b00      	cmp	r3, #0
100085e8:	d103      	bne.n	100085f2 <mpu_reset_fifo+0x136>
100085ea:	4b2f      	ldr	r3, [pc, #188]	; (100086a8 <mpu_reset_fifo+0x1ec>)
100085ec:	7a9b      	ldrb	r3, [r3, #10]
100085ee:	07db      	lsls	r3, r3, #31
100085f0:	d403      	bmi.n	100085fa <mpu_reset_fifo+0x13e>
        data = BIT_FIFO_EN;
100085f2:	2240      	movs	r2, #64	; 0x40
100085f4:	466b      	mov	r3, sp
100085f6:	71da      	strb	r2, [r3, #7]
100085f8:	e002      	b.n	10008600 <mpu_reset_fifo+0x144>
        else
        data = BIT_FIFO_EN | BIT_AUX_IF_EN;
100085fa:	2260      	movs	r2, #96	; 0x60
100085fc:	466b      	mov	r3, sp
100085fe:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008600:	4b29      	ldr	r3, [pc, #164]	; (100086a8 <mpu_reset_fifo+0x1ec>)
10008602:	681a      	ldr	r2, [r3, #0]
10008604:	7911      	ldrb	r1, [r2, #4]
10008606:	685b      	ldr	r3, [r3, #4]
10008608:	7818      	ldrb	r0, [r3, #0]
1000860a:	466b      	mov	r3, sp
1000860c:	3307      	adds	r3, #7
1000860e:	2201      	movs	r2, #1
10008610:	4c26      	ldr	r4, [pc, #152]	; (100086ac <mpu_reset_fifo+0x1f0>)
10008612:	47a0      	blx	r4
10008614:	2800      	cmp	r0, #0
10008616:	d13f      	bne.n	10008698 <mpu_reset_fifo+0x1dc>
        return -1;
        delay_ms(50);
10008618:	3032      	adds	r0, #50	; 0x32
1000861a:	4b25      	ldr	r3, [pc, #148]	; (100086b0 <mpu_reset_fifo+0x1f4>)
1000861c:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
1000861e:	4b22      	ldr	r3, [pc, #136]	; (100086a8 <mpu_reset_fifo+0x1ec>)
10008620:	7c5b      	ldrb	r3, [r3, #17]
10008622:	2b00      	cmp	r3, #0
10008624:	d003      	beq.n	1000862e <mpu_reset_fifo+0x172>
        data = BIT_DATA_RDY_EN;
10008626:	2201      	movs	r2, #1
10008628:	466b      	mov	r3, sp
1000862a:	71da      	strb	r2, [r3, #7]
1000862c:	e002      	b.n	10008634 <mpu_reset_fifo+0x178>
        else
        data = 0;
1000862e:	2200      	movs	r2, #0
10008630:	466b      	mov	r3, sp
10008632:	71da      	strb	r2, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
10008634:	4b1c      	ldr	r3, [pc, #112]	; (100086a8 <mpu_reset_fifo+0x1ec>)
10008636:	681a      	ldr	r2, [r3, #0]
10008638:	7c51      	ldrb	r1, [r2, #17]
1000863a:	685b      	ldr	r3, [r3, #4]
1000863c:	7818      	ldrb	r0, [r3, #0]
1000863e:	466b      	mov	r3, sp
10008640:	3307      	adds	r3, #7
10008642:	2201      	movs	r2, #1
10008644:	4c19      	ldr	r4, [pc, #100]	; (100086ac <mpu_reset_fifo+0x1f0>)
10008646:	47a0      	blx	r4
10008648:	2800      	cmp	r0, #0
1000864a:	d128      	bne.n	1000869e <mpu_reset_fifo+0x1e2>
        return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
1000864c:	4a16      	ldr	r2, [pc, #88]	; (100086a8 <mpu_reset_fifo+0x1ec>)
1000864e:	0013      	movs	r3, r2
10008650:	3310      	adds	r3, #16
10008652:	6811      	ldr	r1, [r2, #0]
10008654:	7949      	ldrb	r1, [r1, #5]
10008656:	6852      	ldr	r2, [r2, #4]
10008658:	7810      	ldrb	r0, [r2, #0]
1000865a:	2201      	movs	r2, #1
1000865c:	4c13      	ldr	r4, [pc, #76]	; (100086ac <mpu_reset_fifo+0x1f0>)
1000865e:	47a0      	blx	r4
10008660:	1e43      	subs	r3, r0, #1
10008662:	4198      	sbcs	r0, r3
10008664:	4240      	negs	r0, r0
10008666:	e01c      	b.n	100086a2 <mpu_reset_fifo+0x1e6>
int mpu_reset_fifo(void)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
    return -1;
10008668:	2001      	movs	r0, #1
1000866a:	4240      	negs	r0, r0
1000866c:	e019      	b.n	100086a2 <mpu_reset_fifo+0x1e6>

    data = 0;
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
    return -1;
1000866e:	2001      	movs	r0, #1
10008670:	4240      	negs	r0, r0
10008672:	e016      	b.n	100086a2 <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
    return -1;
10008674:	2001      	movs	r0, #1
10008676:	4240      	negs	r0, r0
10008678:	e013      	b.n	100086a2 <mpu_reset_fifo+0x1e6>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
    return -1;
1000867a:	2001      	movs	r0, #1
1000867c:	4240      	negs	r0, r0
1000867e:	e010      	b.n	100086a2 <mpu_reset_fifo+0x1e6>

    if (st.chip_cfg.dmp_on) {
        data = BIT_FIFO_RST | BIT_DMP_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
        return -1;
10008680:	2001      	movs	r0, #1
10008682:	4240      	negs	r0, r0
10008684:	e00d      	b.n	100086a2 <mpu_reset_fifo+0x1e6>
        delay_ms(50);
        data = BIT_DMP_EN | BIT_FIFO_EN;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
        data |= BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
        return -1;
10008686:	2001      	movs	r0, #1
10008688:	4240      	negs	r0, r0
1000868a:	e00a      	b.n	100086a2 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
        data = BIT_DMP_INT_EN;
        else
        data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
        return -1;
1000868c:	2001      	movs	r0, #1
1000868e:	4240      	negs	r0, r0
10008690:	e007      	b.n	100086a2 <mpu_reset_fifo+0x1e6>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
        return -1;
        } else {
        data = BIT_FIFO_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
        return -1;
10008692:	2001      	movs	r0, #1
10008694:	4240      	negs	r0, r0
10008696:	e004      	b.n	100086a2 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
        data = BIT_FIFO_EN;
        else
        data = BIT_FIFO_EN | BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
        return -1;
10008698:	2001      	movs	r0, #1
1000869a:	4240      	negs	r0, r0
1000869c:	e001      	b.n	100086a2 <mpu_reset_fifo+0x1e6>
        if (st.chip_cfg.int_enable)
        data = BIT_DATA_RDY_EN;
        else
        data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
        return -1;
1000869e:	2001      	movs	r0, #1
100086a0:	4240      	negs	r0, r0
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
        return -1;
    }
    return 0;
}
100086a2:	b002      	add	sp, #8
100086a4:	bd10      	pop	{r4, pc}
100086a6:	46c0      	nop			; (mov r8, r8)
100086a8:	10012404 	.word	0x10012404
100086ac:	100083a9 	.word	0x100083a9
100086b0:	10008129 	.word	0x10008129

100086b4 <mpu_set_gyro_fsr>:
*  @brief      Set the gyro full-scale range.
*  @param[in]  fsr Desired full-scale range.
*  @return     0 if successful.
*/
int mpu_set_gyro_fsr(unsigned short fsr)
{
100086b4:	b510      	push	{r4, lr}
100086b6:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100086b8:	4b24      	ldr	r3, [pc, #144]	; (1000874c <mpu_set_gyro_fsr+0x98>)
100086ba:	7a9b      	ldrb	r3, [r3, #10]
100086bc:	2b00      	cmp	r3, #0
100086be:	d03b      	beq.n	10008738 <mpu_set_gyro_fsr+0x84>
    return -1;

    switch (fsr) {
100086c0:	23fa      	movs	r3, #250	; 0xfa
100086c2:	005b      	lsls	r3, r3, #1
100086c4:	4298      	cmp	r0, r3
100086c6:	d010      	beq.n	100086ea <mpu_set_gyro_fsr+0x36>
100086c8:	d802      	bhi.n	100086d0 <mpu_set_gyro_fsr+0x1c>
100086ca:	28fa      	cmp	r0, #250	; 0xfa
100086cc:	d009      	beq.n	100086e2 <mpu_set_gyro_fsr+0x2e>
100086ce:	e036      	b.n	1000873e <mpu_set_gyro_fsr+0x8a>
100086d0:	23fa      	movs	r3, #250	; 0xfa
100086d2:	009b      	lsls	r3, r3, #2
100086d4:	4298      	cmp	r0, r3
100086d6:	d00c      	beq.n	100086f2 <mpu_set_gyro_fsr+0x3e>
100086d8:	23fa      	movs	r3, #250	; 0xfa
100086da:	00db      	lsls	r3, r3, #3
100086dc:	4298      	cmp	r0, r3
100086de:	d00c      	beq.n	100086fa <mpu_set_gyro_fsr+0x46>
100086e0:	e02d      	b.n	1000873e <mpu_set_gyro_fsr+0x8a>
        case 250:
        data = INV_FSR_250DPS << 3;
100086e2:	2200      	movs	r2, #0
100086e4:	466b      	mov	r3, sp
100086e6:	71da      	strb	r2, [r3, #7]
        break;
100086e8:	e00a      	b.n	10008700 <mpu_set_gyro_fsr+0x4c>
        case 500:
        data = INV_FSR_500DPS << 3;
100086ea:	2208      	movs	r2, #8
100086ec:	466b      	mov	r3, sp
100086ee:	71da      	strb	r2, [r3, #7]
        break;
100086f0:	e006      	b.n	10008700 <mpu_set_gyro_fsr+0x4c>
        case 1000:
        data = INV_FSR_1000DPS << 3;
100086f2:	2210      	movs	r2, #16
100086f4:	466b      	mov	r3, sp
100086f6:	71da      	strb	r2, [r3, #7]
        break;
100086f8:	e002      	b.n	10008700 <mpu_set_gyro_fsr+0x4c>
        case 2000:
        data = INV_FSR_2000DPS << 3;
100086fa:	2218      	movs	r2, #24
100086fc:	466b      	mov	r3, sp
100086fe:	71da      	strb	r2, [r3, #7]
        break;
        default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008700:	466b      	mov	r3, sp
10008702:	3307      	adds	r3, #7
10008704:	781b      	ldrb	r3, [r3, #0]
10008706:	4a11      	ldr	r2, [pc, #68]	; (1000874c <mpu_set_gyro_fsr+0x98>)
10008708:	7a12      	ldrb	r2, [r2, #8]
1000870a:	08db      	lsrs	r3, r3, #3
    return 0;
1000870c:	2000      	movs	r0, #0
        break;
        default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
1000870e:	429a      	cmp	r2, r3
10008710:	d01a      	beq.n	10008748 <mpu_set_gyro_fsr+0x94>
    return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
10008712:	4b0e      	ldr	r3, [pc, #56]	; (1000874c <mpu_set_gyro_fsr+0x98>)
10008714:	681a      	ldr	r2, [r3, #0]
10008716:	7991      	ldrb	r1, [r2, #6]
10008718:	685b      	ldr	r3, [r3, #4]
1000871a:	7818      	ldrb	r0, [r3, #0]
1000871c:	466b      	mov	r3, sp
1000871e:	3307      	adds	r3, #7
10008720:	2201      	movs	r2, #1
10008722:	4c0b      	ldr	r4, [pc, #44]	; (10008750 <mpu_set_gyro_fsr+0x9c>)
10008724:	47a0      	blx	r4
10008726:	2800      	cmp	r0, #0
10008728:	d10c      	bne.n	10008744 <mpu_set_gyro_fsr+0x90>
    return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
1000872a:	466b      	mov	r3, sp
1000872c:	3307      	adds	r3, #7
1000872e:	781b      	ldrb	r3, [r3, #0]
10008730:	08db      	lsrs	r3, r3, #3
10008732:	4a06      	ldr	r2, [pc, #24]	; (1000874c <mpu_set_gyro_fsr+0x98>)
10008734:	7213      	strb	r3, [r2, #8]
    return 0;
10008736:	e007      	b.n	10008748 <mpu_set_gyro_fsr+0x94>
int mpu_set_gyro_fsr(unsigned short fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
    return -1;
10008738:	2001      	movs	r0, #1
1000873a:	4240      	negs	r0, r0
1000873c:	e004      	b.n	10008748 <mpu_set_gyro_fsr+0x94>
        break;
        case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
        default:
        return -1;
1000873e:	2001      	movs	r0, #1
10008740:	4240      	negs	r0, r0
10008742:	e001      	b.n	10008748 <mpu_set_gyro_fsr+0x94>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
    return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
    return -1;
10008744:	2001      	movs	r0, #1
10008746:	4240      	negs	r0, r0
    st.chip_cfg.gyro_fsr = data >> 3;
    return 0;
}
10008748:	b002      	add	sp, #8
1000874a:	bd10      	pop	{r4, pc}
1000874c:	10012404 	.word	0x10012404
10008750:	100083a9 	.word	0x100083a9

10008754 <mpu_set_accel_fsr>:
*  @brief      Set the accel full-scale range.
*  @param[in]  fsr Desired full-scale range.
*  @return     0 if successful.
*/
int mpu_set_accel_fsr(unsigned char fsr)
{
10008754:	b510      	push	{r4, lr}
10008756:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008758:	4b21      	ldr	r3, [pc, #132]	; (100087e0 <mpu_set_accel_fsr+0x8c>)
1000875a:	7a9b      	ldrb	r3, [r3, #10]
1000875c:	2b00      	cmp	r3, #0
1000875e:	d035      	beq.n	100087cc <mpu_set_accel_fsr+0x78>
    return -1;

    switch (fsr) {
10008760:	2804      	cmp	r0, #4
10008762:	d00c      	beq.n	1000877e <mpu_set_accel_fsr+0x2a>
10008764:	d802      	bhi.n	1000876c <mpu_set_accel_fsr+0x18>
10008766:	2802      	cmp	r0, #2
10008768:	d005      	beq.n	10008776 <mpu_set_accel_fsr+0x22>
1000876a:	e032      	b.n	100087d2 <mpu_set_accel_fsr+0x7e>
1000876c:	2808      	cmp	r0, #8
1000876e:	d00a      	beq.n	10008786 <mpu_set_accel_fsr+0x32>
10008770:	2810      	cmp	r0, #16
10008772:	d00c      	beq.n	1000878e <mpu_set_accel_fsr+0x3a>
10008774:	e02d      	b.n	100087d2 <mpu_set_accel_fsr+0x7e>
        case 2:
        data = INV_FSR_2G << 3;
10008776:	2200      	movs	r2, #0
10008778:	466b      	mov	r3, sp
1000877a:	71da      	strb	r2, [r3, #7]
        break;
1000877c:	e00a      	b.n	10008794 <mpu_set_accel_fsr+0x40>
        case 4:
        data = INV_FSR_4G << 3;
1000877e:	2208      	movs	r2, #8
10008780:	466b      	mov	r3, sp
10008782:	71da      	strb	r2, [r3, #7]
        break;
10008784:	e006      	b.n	10008794 <mpu_set_accel_fsr+0x40>
        case 8:
        data = INV_FSR_8G << 3;
10008786:	2210      	movs	r2, #16
10008788:	466b      	mov	r3, sp
1000878a:	71da      	strb	r2, [r3, #7]
        break;
1000878c:	e002      	b.n	10008794 <mpu_set_accel_fsr+0x40>
        case 16:
        data = INV_FSR_16G << 3;
1000878e:	2218      	movs	r2, #24
10008790:	466b      	mov	r3, sp
10008792:	71da      	strb	r2, [r3, #7]
        break;
        default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
10008794:	466b      	mov	r3, sp
10008796:	3307      	adds	r3, #7
10008798:	781b      	ldrb	r3, [r3, #0]
1000879a:	4a11      	ldr	r2, [pc, #68]	; (100087e0 <mpu_set_accel_fsr+0x8c>)
1000879c:	7a52      	ldrb	r2, [r2, #9]
1000879e:	08db      	lsrs	r3, r3, #3
    return 0;
100087a0:	2000      	movs	r0, #0
        break;
        default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
100087a2:	429a      	cmp	r2, r3
100087a4:	d01a      	beq.n	100087dc <mpu_set_accel_fsr+0x88>
    return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
100087a6:	4b0e      	ldr	r3, [pc, #56]	; (100087e0 <mpu_set_accel_fsr+0x8c>)
100087a8:	681a      	ldr	r2, [r3, #0]
100087aa:	79d1      	ldrb	r1, [r2, #7]
100087ac:	685b      	ldr	r3, [r3, #4]
100087ae:	7818      	ldrb	r0, [r3, #0]
100087b0:	466b      	mov	r3, sp
100087b2:	3307      	adds	r3, #7
100087b4:	2201      	movs	r2, #1
100087b6:	4c0b      	ldr	r4, [pc, #44]	; (100087e4 <mpu_set_accel_fsr+0x90>)
100087b8:	47a0      	blx	r4
100087ba:	2800      	cmp	r0, #0
100087bc:	d10c      	bne.n	100087d8 <mpu_set_accel_fsr+0x84>
    return -1;
    st.chip_cfg.accel_fsr = data >> 3;
100087be:	466b      	mov	r3, sp
100087c0:	3307      	adds	r3, #7
100087c2:	781b      	ldrb	r3, [r3, #0]
100087c4:	08db      	lsrs	r3, r3, #3
100087c6:	4a06      	ldr	r2, [pc, #24]	; (100087e0 <mpu_set_accel_fsr+0x8c>)
100087c8:	7253      	strb	r3, [r2, #9]
    return 0;
100087ca:	e007      	b.n	100087dc <mpu_set_accel_fsr+0x88>
int mpu_set_accel_fsr(unsigned char fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
    return -1;
100087cc:	2001      	movs	r0, #1
100087ce:	4240      	negs	r0, r0
100087d0:	e004      	b.n	100087dc <mpu_set_accel_fsr+0x88>
        break;
        case 16:
        data = INV_FSR_16G << 3;
        break;
        default:
        return -1;
100087d2:	2001      	movs	r0, #1
100087d4:	4240      	negs	r0, r0
100087d6:	e001      	b.n	100087dc <mpu_set_accel_fsr+0x88>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
    return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
    return -1;
100087d8:	2001      	movs	r0, #1
100087da:	4240      	negs	r0, r0
    st.chip_cfg.accel_fsr = data >> 3;
    return 0;
}
100087dc:	b002      	add	sp, #8
100087de:	bd10      	pop	{r4, pc}
100087e0:	10012404 	.word	0x10012404
100087e4:	100083a9 	.word	0x100083a9

100087e8 <mpu_set_lpf>:
*  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
*  @param[in]  lpf Desired LPF setting.
*  @return     0 if successful.
*/
int mpu_set_lpf(unsigned short lpf)
{
100087e8:	b510      	push	{r4, lr}
100087ea:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100087ec:	4b22      	ldr	r3, [pc, #136]	; (10008878 <mpu_set_lpf+0x90>)
100087ee:	7a9b      	ldrb	r3, [r3, #10]
100087f0:	2b00      	cmp	r3, #0
100087f2:	d039      	beq.n	10008868 <mpu_set_lpf+0x80>
    return -1;

    if (lpf >= 188)
100087f4:	28bb      	cmp	r0, #187	; 0xbb
100087f6:	d903      	bls.n	10008800 <mpu_set_lpf+0x18>
    data = INV_FILTER_188HZ;
100087f8:	2201      	movs	r2, #1
100087fa:	466b      	mov	r3, sp
100087fc:	71da      	strb	r2, [r3, #7]
100087fe:	e01a      	b.n	10008836 <mpu_set_lpf+0x4e>
    else if (lpf >= 98)
10008800:	2861      	cmp	r0, #97	; 0x61
10008802:	d903      	bls.n	1000880c <mpu_set_lpf+0x24>
    data = INV_FILTER_98HZ;
10008804:	2202      	movs	r2, #2
10008806:	466b      	mov	r3, sp
10008808:	71da      	strb	r2, [r3, #7]
1000880a:	e014      	b.n	10008836 <mpu_set_lpf+0x4e>
    else if (lpf >= 42)
1000880c:	2829      	cmp	r0, #41	; 0x29
1000880e:	d903      	bls.n	10008818 <mpu_set_lpf+0x30>
    data = INV_FILTER_42HZ;
10008810:	2203      	movs	r2, #3
10008812:	466b      	mov	r3, sp
10008814:	71da      	strb	r2, [r3, #7]
10008816:	e00e      	b.n	10008836 <mpu_set_lpf+0x4e>
    else if (lpf >= 20)
10008818:	2813      	cmp	r0, #19
1000881a:	d903      	bls.n	10008824 <mpu_set_lpf+0x3c>
    data = INV_FILTER_20HZ;
1000881c:	2204      	movs	r2, #4
1000881e:	466b      	mov	r3, sp
10008820:	71da      	strb	r2, [r3, #7]
10008822:	e008      	b.n	10008836 <mpu_set_lpf+0x4e>
    else if (lpf >= 10)
10008824:	2809      	cmp	r0, #9
10008826:	d903      	bls.n	10008830 <mpu_set_lpf+0x48>
    data = INV_FILTER_10HZ;
10008828:	2205      	movs	r2, #5
1000882a:	466b      	mov	r3, sp
1000882c:	71da      	strb	r2, [r3, #7]
1000882e:	e002      	b.n	10008836 <mpu_set_lpf+0x4e>
    else
    data = INV_FILTER_5HZ;
10008830:	2206      	movs	r2, #6
10008832:	466b      	mov	r3, sp
10008834:	71da      	strb	r2, [r3, #7]

    if (st.chip_cfg.lpf == data)
10008836:	4b10      	ldr	r3, [pc, #64]	; (10008878 <mpu_set_lpf+0x90>)
10008838:	7ada      	ldrb	r2, [r3, #11]
1000883a:	466b      	mov	r3, sp
1000883c:	3307      	adds	r3, #7
1000883e:	781b      	ldrb	r3, [r3, #0]
    return 0;
10008840:	2000      	movs	r0, #0
    else if (lpf >= 10)
    data = INV_FILTER_10HZ;
    else
    data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
10008842:	429a      	cmp	r2, r3
10008844:	d015      	beq.n	10008872 <mpu_set_lpf+0x8a>
    return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
10008846:	4b0c      	ldr	r3, [pc, #48]	; (10008878 <mpu_set_lpf+0x90>)
10008848:	681a      	ldr	r2, [r3, #0]
1000884a:	7891      	ldrb	r1, [r2, #2]
1000884c:	685b      	ldr	r3, [r3, #4]
1000884e:	7818      	ldrb	r0, [r3, #0]
10008850:	466b      	mov	r3, sp
10008852:	3307      	adds	r3, #7
10008854:	2201      	movs	r2, #1
10008856:	4c09      	ldr	r4, [pc, #36]	; (1000887c <mpu_set_lpf+0x94>)
10008858:	47a0      	blx	r4
1000885a:	2800      	cmp	r0, #0
1000885c:	d107      	bne.n	1000886e <mpu_set_lpf+0x86>
    return -1;
    st.chip_cfg.lpf = data;
1000885e:	466b      	mov	r3, sp
10008860:	79da      	ldrb	r2, [r3, #7]
10008862:	4b05      	ldr	r3, [pc, #20]	; (10008878 <mpu_set_lpf+0x90>)
10008864:	72da      	strb	r2, [r3, #11]
    return 0;
10008866:	e004      	b.n	10008872 <mpu_set_lpf+0x8a>
int mpu_set_lpf(unsigned short lpf)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
    return -1;
10008868:	2001      	movs	r0, #1
1000886a:	4240      	negs	r0, r0
1000886c:	e001      	b.n	10008872 <mpu_set_lpf+0x8a>
    data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
    return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
    return -1;
1000886e:	2001      	movs	r0, #1
10008870:	4240      	negs	r0, r0
    st.chip_cfg.lpf = data;
    return 0;
}
10008872:	b002      	add	sp, #8
10008874:	bd10      	pop	{r4, pc}
10008876:	46c0      	nop			; (mov r8, r8)
10008878:	10012404 	.word	0x10012404
1000887c:	100083a9 	.word	0x100083a9

10008880 <mpu_set_compass_sample_rate>:
*  mpu_get_compass_sample_rate to check the actual setting.
*  @param[in]  rate    Desired compass sampling rate (Hz).
*  @return     0 if successful.
*/
int mpu_set_compass_sample_rate(unsigned short rate)
{
10008880:	b530      	push	{r4, r5, lr}
10008882:	b083      	sub	sp, #12
10008884:	1e01      	subs	r1, r0, #0
    #ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
10008886:	d020      	beq.n	100088ca <mpu_set_compass_sample_rate+0x4a>
10008888:	4b17      	ldr	r3, [pc, #92]	; (100088e8 <mpu_set_compass_sample_rate+0x68>)
1000888a:	89d8      	ldrh	r0, [r3, #14]
1000888c:	4281      	cmp	r1, r0
1000888e:	d81f      	bhi.n	100088d0 <mpu_set_compass_sample_rate+0x50>
10008890:	2964      	cmp	r1, #100	; 0x64
10008892:	d820      	bhi.n	100088d6 <mpu_set_compass_sample_rate+0x56>
    return -1;

    div = st.chip_cfg.sample_rate / rate - 1;
10008894:	466b      	mov	r3, sp
10008896:	1ddc      	adds	r4, r3, #7
10008898:	4b14      	ldr	r3, [pc, #80]	; (100088ec <mpu_set_compass_sample_rate+0x6c>)
1000889a:	4798      	blx	r3
1000889c:	3801      	subs	r0, #1
1000889e:	7020      	strb	r0, [r4, #0]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
100088a0:	4b11      	ldr	r3, [pc, #68]	; (100088e8 <mpu_set_compass_sample_rate+0x68>)
100088a2:	2224      	movs	r2, #36	; 0x24
100088a4:	6819      	ldr	r1, [r3, #0]
100088a6:	5c89      	ldrb	r1, [r1, r2]
100088a8:	685b      	ldr	r3, [r3, #4]
100088aa:	7818      	ldrb	r0, [r3, #0]
100088ac:	0023      	movs	r3, r4
100088ae:	3a23      	subs	r2, #35	; 0x23
100088b0:	4c0f      	ldr	r4, [pc, #60]	; (100088f0 <mpu_set_compass_sample_rate+0x70>)
100088b2:	47a0      	blx	r4
100088b4:	1e04      	subs	r4, r0, #0
100088b6:	d111      	bne.n	100088dc <mpu_set_compass_sample_rate+0x5c>
    return -1;
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
100088b8:	4d0b      	ldr	r5, [pc, #44]	; (100088e8 <mpu_set_compass_sample_rate+0x68>)
100088ba:	89e8      	ldrh	r0, [r5, #14]
100088bc:	466b      	mov	r3, sp
100088be:	79d9      	ldrb	r1, [r3, #7]
100088c0:	3101      	adds	r1, #1
100088c2:	4b0c      	ldr	r3, [pc, #48]	; (100088f4 <mpu_set_compass_sample_rate+0x74>)
100088c4:	4798      	blx	r3
100088c6:	8528      	strh	r0, [r5, #40]	; 0x28
    return 0;
100088c8:	e00a      	b.n	100088e0 <mpu_set_compass_sample_rate+0x60>
int mpu_set_compass_sample_rate(unsigned short rate)
{
    #ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
    return -1;
100088ca:	2401      	movs	r4, #1
100088cc:	4264      	negs	r4, r4
100088ce:	e007      	b.n	100088e0 <mpu_set_compass_sample_rate+0x60>
100088d0:	2401      	movs	r4, #1
100088d2:	4264      	negs	r4, r4
100088d4:	e004      	b.n	100088e0 <mpu_set_compass_sample_rate+0x60>
100088d6:	2401      	movs	r4, #1
100088d8:	4264      	negs	r4, r4
100088da:	e001      	b.n	100088e0 <mpu_set_compass_sample_rate+0x60>

    div = st.chip_cfg.sample_rate / rate - 1;
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
    return -1;
100088dc:	2401      	movs	r4, #1
100088de:	4264      	negs	r4, r4
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
    return 0;
    #else
    return -1;
    #endif
}
100088e0:	0020      	movs	r0, r4
100088e2:	b003      	add	sp, #12
100088e4:	bd30      	pop	{r4, r5, pc}
100088e6:	46c0      	nop			; (mov r8, r8)
100088e8:	10012404 	.word	0x10012404
100088ec:	1000ef15 	.word	0x1000ef15
100088f0:	100083a9 	.word	0x100083a9
100088f4:	1000f029 	.word	0x1000f029

100088f8 <mpu_configure_fifo>:
*  \n INV_XYZ_ACCEL
*  @param[in]  sensors Mask of sensors to push to FIFO.
*  @return     0 if successful.
*/
int mpu_configure_fifo(unsigned char sensors)
{
100088f8:	b570      	push	{r4, r5, r6, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
100088fa:	2324      	movs	r3, #36	; 0x24
100088fc:	4a16      	ldr	r2, [pc, #88]	; (10008958 <mpu_configure_fifo+0x60>)
100088fe:	5cd3      	ldrb	r3, [r2, r3]
    return 0;
10008900:	2400      	movs	r4, #0
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008902:	2b00      	cmp	r3, #0
10008904:	d126      	bne.n	10008954 <mpu_configure_fifo+0x5c>
    return 0;
    else {
        if (!(st.chip_cfg.sensors))
10008906:	7a94      	ldrb	r4, [r2, #10]
10008908:	2c00      	cmp	r4, #0
1000890a:	d015      	beq.n	10008938 <mpu_configure_fifo+0x40>
{
    unsigned char prev;
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
1000890c:	2301      	movs	r3, #1
1000890e:	4398      	bics	r0, r3
    if (st.chip_cfg.dmp_on)
    return 0;
    else {
        if (!(st.chip_cfg.sensors))
        return -1;
        prev = st.chip_cfg.fifo_enable;
10008910:	7c15      	ldrb	r5, [r2, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
10008912:	4004      	ands	r4, r0
10008914:	7414      	strb	r4, [r2, #16]
        if (st.chip_cfg.fifo_enable != sensors)
10008916:	1b04      	subs	r4, r0, r4
10008918:	1e63      	subs	r3, r4, #1
1000891a:	419c      	sbcs	r4, r3
1000891c:	4264      	negs	r4, r4
        * asleep.
        */
        result = -1;
        else
        result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
1000891e:	2800      	cmp	r0, #0
10008920:	d10d      	bne.n	1000893e <mpu_configure_fifo+0x46>
10008922:	7d13      	ldrb	r3, [r2, #20]
10008924:	2b00      	cmp	r3, #0
10008926:	d112      	bne.n	1000894e <mpu_configure_fifo+0x56>
        set_int_enable(1);
        else
        set_int_enable(0);
10008928:	4b0c      	ldr	r3, [pc, #48]	; (1000895c <mpu_configure_fifo+0x64>)
1000892a:	4798      	blx	r3
1000892c:	e012      	b.n	10008954 <mpu_configure_fifo+0x5c>
        if (sensors) {
            if (mpu_reset_fifo()) {
                st.chip_cfg.fifo_enable = prev;
1000892e:	4b0a      	ldr	r3, [pc, #40]	; (10008958 <mpu_configure_fifo+0x60>)
10008930:	741d      	strb	r5, [r3, #16]
                return -1;
10008932:	2401      	movs	r4, #1
10008934:	4264      	negs	r4, r4
10008936:	e00d      	b.n	10008954 <mpu_configure_fifo+0x5c>

    if (st.chip_cfg.dmp_on)
    return 0;
    else {
        if (!(st.chip_cfg.sensors))
        return -1;
10008938:	2401      	movs	r4, #1
1000893a:	4264      	negs	r4, r4
1000893c:	e00a      	b.n	10008954 <mpu_configure_fifo+0x5c>
        */
        result = -1;
        else
        result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
        set_int_enable(1);
1000893e:	2001      	movs	r0, #1
10008940:	4b06      	ldr	r3, [pc, #24]	; (1000895c <mpu_configure_fifo+0x64>)
10008942:	4798      	blx	r3
        else
        set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
10008944:	4b06      	ldr	r3, [pc, #24]	; (10008960 <mpu_configure_fifo+0x68>)
10008946:	4798      	blx	r3
10008948:	2800      	cmp	r0, #0
1000894a:	d003      	beq.n	10008954 <mpu_configure_fifo+0x5c>
1000894c:	e7ef      	b.n	1000892e <mpu_configure_fifo+0x36>
        */
        result = -1;
        else
        result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
        set_int_enable(1);
1000894e:	2001      	movs	r0, #1
10008950:	4b02      	ldr	r3, [pc, #8]	; (1000895c <mpu_configure_fifo+0x64>)
10008952:	4798      	blx	r3
            }
        }
    }

    return result;
}
10008954:	0020      	movs	r0, r4
10008956:	bd70      	pop	{r4, r5, r6, pc}
10008958:	10012404 	.word	0x10012404
1000895c:	10008419 	.word	0x10008419
10008960:	100084bd 	.word	0x100084bd

10008964 <mpu_read_fifo_stream>:
*  @param[in]  data    FIFO packet.
*  @param[in]  more    Number of remaining packets.
*/
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
unsigned char *more)
{
10008964:	b5f0      	push	{r4, r5, r6, r7, lr}
10008966:	b085      	sub	sp, #20
10008968:	0005      	movs	r5, r0
1000896a:	9101      	str	r1, [sp, #4]
1000896c:	0017      	movs	r7, r2
    //DBG_LOG_DEV("[mpu_read_fifo_stream] IN");
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on) {
1000896e:	2324      	movs	r3, #36	; 0x24
10008970:	4a30      	ldr	r2, [pc, #192]	; (10008a34 <mpu_read_fifo_stream+0xd0>)
10008972:	5cd3      	ldrb	r3, [r2, r3]
10008974:	2b00      	cmp	r3, #0
10008976:	d105      	bne.n	10008984 <mpu_read_fifo_stream+0x20>
        printf("DMP_ON!\n\r");
10008978:	482f      	ldr	r0, [pc, #188]	; (10008a38 <mpu_read_fifo_stream+0xd4>)
1000897a:	4b30      	ldr	r3, [pc, #192]	; (10008a3c <mpu_read_fifo_stream+0xd8>)
1000897c:	4798      	blx	r3
        return -1;
1000897e:	2601      	movs	r6, #1
10008980:	4276      	negs	r6, r6
10008982:	e053      	b.n	10008a2c <mpu_read_fifo_stream+0xc8>
    }
    if (!st.chip_cfg.sensors) {
10008984:	4b2b      	ldr	r3, [pc, #172]	; (10008a34 <mpu_read_fifo_stream+0xd0>)
10008986:	7a9b      	ldrb	r3, [r3, #10]
10008988:	2b00      	cmp	r3, #0
1000898a:	d105      	bne.n	10008998 <mpu_read_fifo_stream+0x34>
        printf("SENSORS!\n\r");
1000898c:	482c      	ldr	r0, [pc, #176]	; (10008a40 <mpu_read_fifo_stream+0xdc>)
1000898e:	4b2b      	ldr	r3, [pc, #172]	; (10008a3c <mpu_read_fifo_stream+0xd8>)
10008990:	4798      	blx	r3
        return -1;
10008992:	2601      	movs	r6, #1
10008994:	4276      	negs	r6, r6
10008996:	e049      	b.n	10008a2c <mpu_read_fifo_stream+0xc8>
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp)) return -1;
10008998:	4b26      	ldr	r3, [pc, #152]	; (10008a34 <mpu_read_fifo_stream+0xd0>)
1000899a:	681a      	ldr	r2, [r3, #0]
1000899c:	7b11      	ldrb	r1, [r2, #12]
1000899e:	685b      	ldr	r3, [r3, #4]
100089a0:	7818      	ldrb	r0, [r3, #0]
100089a2:	ab03      	add	r3, sp, #12
100089a4:	2202      	movs	r2, #2
100089a6:	4c27      	ldr	r4, [pc, #156]	; (10008a44 <mpu_read_fifo_stream+0xe0>)
100089a8:	47a0      	blx	r4
100089aa:	2800      	cmp	r0, #0
100089ac:	d136      	bne.n	10008a1c <mpu_read_fifo_stream+0xb8>
    fifo_count = (tmp[0] << 8) | tmp[1];
100089ae:	ab03      	add	r3, sp, #12
100089b0:	781c      	ldrb	r4, [r3, #0]
100089b2:	0224      	lsls	r4, r4, #8
100089b4:	785b      	ldrb	r3, [r3, #1]
100089b6:	431c      	orrs	r4, r3
    //DBG_LOG_DEV("[mpu_read_fifo_stream]\n\r  length: %d, fifo count: %d", length, fifo_count);
    if (fifo_count < length) {
100089b8:	42ac      	cmp	r4, r5
100089ba:	d204      	bcs.n	100089c6 <mpu_read_fifo_stream+0x62>
        more[0] = 0;
100089bc:	2300      	movs	r3, #0
100089be:	703b      	strb	r3, [r7, #0]
        return -1;
100089c0:	2601      	movs	r6, #1
100089c2:	4276      	negs	r6, r6
100089c4:	e032      	b.n	10008a2c <mpu_read_fifo_stream+0xc8>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
100089c6:	4b1b      	ldr	r3, [pc, #108]	; (10008a34 <mpu_read_fifo_stream+0xd0>)
100089c8:	685a      	ldr	r2, [r3, #4]
100089ca:	8853      	ldrh	r3, [r2, #2]
100089cc:	085b      	lsrs	r3, r3, #1
100089ce:	429c      	cmp	r4, r3
100089d0:	d912      	bls.n	100089f8 <mpu_read_fifo_stream+0x94>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp)) return -1;
100089d2:	4b18      	ldr	r3, [pc, #96]	; (10008a34 <mpu_read_fifo_stream+0xd0>)
100089d4:	681b      	ldr	r3, [r3, #0]
100089d6:	7cd9      	ldrb	r1, [r3, #19]
100089d8:	7810      	ldrb	r0, [r2, #0]
100089da:	ab03      	add	r3, sp, #12
100089dc:	2201      	movs	r2, #1
100089de:	4e19      	ldr	r6, [pc, #100]	; (10008a44 <mpu_read_fifo_stream+0xe0>)
100089e0:	47b0      	blx	r6
100089e2:	2800      	cmp	r0, #0
100089e4:	d11d      	bne.n	10008a22 <mpu_read_fifo_stream+0xbe>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
100089e6:	ab03      	add	r3, sp, #12
100089e8:	781b      	ldrb	r3, [r3, #0]
100089ea:	06db      	lsls	r3, r3, #27
100089ec:	d504      	bpl.n	100089f8 <mpu_read_fifo_stream+0x94>
            mpu_reset_fifo();
100089ee:	4b16      	ldr	r3, [pc, #88]	; (10008a48 <mpu_read_fifo_stream+0xe4>)
100089f0:	4798      	blx	r3
            return -2;
100089f2:	2602      	movs	r6, #2
100089f4:	4276      	negs	r6, r6
100089f6:	e019      	b.n	10008a2c <mpu_read_fifo_stream+0xc8>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data)) return -1;
100089f8:	b2ea      	uxtb	r2, r5
100089fa:	4b0e      	ldr	r3, [pc, #56]	; (10008a34 <mpu_read_fifo_stream+0xd0>)
100089fc:	6819      	ldr	r1, [r3, #0]
100089fe:	7b49      	ldrb	r1, [r1, #13]
10008a00:	685b      	ldr	r3, [r3, #4]
10008a02:	7818      	ldrb	r0, [r3, #0]
10008a04:	9b01      	ldr	r3, [sp, #4]
10008a06:	4e0f      	ldr	r6, [pc, #60]	; (10008a44 <mpu_read_fifo_stream+0xe0>)
10008a08:	47b0      	blx	r6
10008a0a:	1e06      	subs	r6, r0, #0
10008a0c:	d10c      	bne.n	10008a28 <mpu_read_fifo_stream+0xc4>
    more[0] = fifo_count / length - 1;
10008a0e:	0029      	movs	r1, r5
10008a10:	0020      	movs	r0, r4
10008a12:	4b0e      	ldr	r3, [pc, #56]	; (10008a4c <mpu_read_fifo_stream+0xe8>)
10008a14:	4798      	blx	r3
10008a16:	3801      	subs	r0, #1
10008a18:	7038      	strb	r0, [r7, #0]
    //DBG_LOG_DEV("[mpu_read_fifo_stream] OUT");
    return 0;
10008a1a:	e007      	b.n	10008a2c <mpu_read_fifo_stream+0xc8>
    if (!st.chip_cfg.sensors) {
        printf("SENSORS!\n\r");
        return -1;
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp)) return -1;
10008a1c:	2601      	movs	r6, #1
10008a1e:	4276      	negs	r6, r6
10008a20:	e004      	b.n	10008a2c <mpu_read_fifo_stream+0xc8>
        more[0] = 0;
        return -1;
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp)) return -1;
10008a22:	2601      	movs	r6, #1
10008a24:	4276      	negs	r6, r6
10008a26:	e001      	b.n	10008a2c <mpu_read_fifo_stream+0xc8>
            mpu_reset_fifo();
            return -2;
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data)) return -1;
10008a28:	2601      	movs	r6, #1
10008a2a:	4276      	negs	r6, r6
    more[0] = fifo_count / length - 1;
    //DBG_LOG_DEV("[mpu_read_fifo_stream] OUT");
    return 0;
}
10008a2c:	0030      	movs	r0, r6
10008a2e:	b005      	add	sp, #20
10008a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008a32:	46c0      	nop			; (mov r8, r8)
10008a34:	10012404 	.word	0x10012404
10008a38:	100114f0 	.word	0x100114f0
10008a3c:	100103b9 	.word	0x100103b9
10008a40:	100114fc 	.word	0x100114fc
10008a44:	100082e5 	.word	0x100082e5
10008a48:	100084bd 	.word	0x100084bd
10008a4c:	1000ef15 	.word	0x1000ef15

10008a50 <mpu_set_bypass>:
*  @brief      Set device to bypass mode.
*  @param[in]  bypass_on   1 to enable bypass mode.
*  @return     0 if successful.
*/
int mpu_set_bypass(unsigned char bypass_on)
{
10008a50:	b530      	push	{r4, r5, lr}
10008a52:	b083      	sub	sp, #12
10008a54:	0004      	movs	r4, r0
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008a56:	4b59      	ldr	r3, [pc, #356]	; (10008bbc <mpu_set_bypass+0x16c>)
10008a58:	7c9b      	ldrb	r3, [r3, #18]
10008a5a:	4283      	cmp	r3, r0
10008a5c:	d100      	bne.n	10008a60 <mpu_set_bypass+0x10>
10008a5e:	e097      	b.n	10008b90 <mpu_set_bypass+0x140>
    return 0;

    if (bypass_on) {
10008a60:	2800      	cmp	r0, #0
10008a62:	d042      	beq.n	10008aea <mpu_set_bypass+0x9a>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008a64:	4b55      	ldr	r3, [pc, #340]	; (10008bbc <mpu_set_bypass+0x16c>)
10008a66:	681a      	ldr	r2, [r3, #0]
10008a68:	7911      	ldrb	r1, [r2, #4]
10008a6a:	685b      	ldr	r3, [r3, #4]
10008a6c:	7818      	ldrb	r0, [r3, #0]
10008a6e:	466b      	mov	r3, sp
10008a70:	3307      	adds	r3, #7
10008a72:	2201      	movs	r2, #1
10008a74:	4d52      	ldr	r5, [pc, #328]	; (10008bc0 <mpu_set_bypass+0x170>)
10008a76:	47a8      	blx	r5
10008a78:	2800      	cmp	r0, #0
10008a7a:	d000      	beq.n	10008a7e <mpu_set_bypass+0x2e>
10008a7c:	e08a      	b.n	10008b94 <mpu_set_bypass+0x144>
        return -1;
        tmp &= ~BIT_AUX_IF_EN;
10008a7e:	466b      	mov	r3, sp
10008a80:	3307      	adds	r3, #7
10008a82:	781a      	ldrb	r2, [r3, #0]
10008a84:	2120      	movs	r1, #32
10008a86:	438a      	bics	r2, r1
10008a88:	701a      	strb	r2, [r3, #0]
        //if(st.chip_cfg.spi_mode)
        //tmp |= 0x10;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008a8a:	4a4c      	ldr	r2, [pc, #304]	; (10008bbc <mpu_set_bypass+0x16c>)
10008a8c:	6811      	ldr	r1, [r2, #0]
10008a8e:	7909      	ldrb	r1, [r1, #4]
10008a90:	6852      	ldr	r2, [r2, #4]
10008a92:	7810      	ldrb	r0, [r2, #0]
10008a94:	2201      	movs	r2, #1
10008a96:	4d4b      	ldr	r5, [pc, #300]	; (10008bc4 <mpu_set_bypass+0x174>)
10008a98:	47a8      	blx	r5
10008a9a:	2800      	cmp	r0, #0
10008a9c:	d17d      	bne.n	10008b9a <mpu_set_bypass+0x14a>
        return -1;
        delay_ms(3);
10008a9e:	3003      	adds	r0, #3
10008aa0:	4b49      	ldr	r3, [pc, #292]	; (10008bc8 <mpu_set_bypass+0x178>)
10008aa2:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
10008aa4:	2202      	movs	r2, #2
10008aa6:	466b      	mov	r3, sp
10008aa8:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.active_low_int)
10008aaa:	2322      	movs	r3, #34	; 0x22
10008aac:	4a43      	ldr	r2, [pc, #268]	; (10008bbc <mpu_set_bypass+0x16c>)
10008aae:	5cd3      	ldrb	r3, [r2, r3]
10008ab0:	2b00      	cmp	r3, #0
10008ab2:	d002      	beq.n	10008aba <mpu_set_bypass+0x6a>
        tmp |= BIT_ACTL;
10008ab4:	2282      	movs	r2, #130	; 0x82
10008ab6:	466b      	mov	r3, sp
10008ab8:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008aba:	2323      	movs	r3, #35	; 0x23
10008abc:	4a3f      	ldr	r2, [pc, #252]	; (10008bbc <mpu_set_bypass+0x16c>)
10008abe:	5cd3      	ldrb	r3, [r2, r3]
10008ac0:	2b00      	cmp	r3, #0
10008ac2:	d005      	beq.n	10008ad0 <mpu_set_bypass+0x80>
        tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008ac4:	466b      	mov	r3, sp
10008ac6:	1dda      	adds	r2, r3, #7
10008ac8:	79d9      	ldrb	r1, [r3, #7]
10008aca:	2330      	movs	r3, #48	; 0x30
10008acc:	430b      	orrs	r3, r1
10008ace:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008ad0:	4b3a      	ldr	r3, [pc, #232]	; (10008bbc <mpu_set_bypass+0x16c>)
10008ad2:	681a      	ldr	r2, [r3, #0]
10008ad4:	7dd1      	ldrb	r1, [r2, #23]
10008ad6:	685b      	ldr	r3, [r3, #4]
10008ad8:	7818      	ldrb	r0, [r3, #0]
10008ada:	466b      	mov	r3, sp
10008adc:	3307      	adds	r3, #7
10008ade:	2201      	movs	r2, #1
10008ae0:	4d38      	ldr	r5, [pc, #224]	; (10008bc4 <mpu_set_bypass+0x174>)
10008ae2:	47a8      	blx	r5
10008ae4:	2800      	cmp	r0, #0
10008ae6:	d04f      	beq.n	10008b88 <mpu_set_bypass+0x138>
10008ae8:	e05a      	b.n	10008ba0 <mpu_set_bypass+0x150>
        return -1;
    }
    else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008aea:	4b34      	ldr	r3, [pc, #208]	; (10008bbc <mpu_set_bypass+0x16c>)
10008aec:	681a      	ldr	r2, [r3, #0]
10008aee:	7911      	ldrb	r1, [r2, #4]
10008af0:	685b      	ldr	r3, [r3, #4]
10008af2:	7818      	ldrb	r0, [r3, #0]
10008af4:	466b      	mov	r3, sp
10008af6:	3307      	adds	r3, #7
10008af8:	2201      	movs	r2, #1
10008afa:	4d31      	ldr	r5, [pc, #196]	; (10008bc0 <mpu_set_bypass+0x170>)
10008afc:	47a8      	blx	r5
10008afe:	2800      	cmp	r0, #0
10008b00:	d151      	bne.n	10008ba6 <mpu_set_bypass+0x156>
        return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008b02:	4b2e      	ldr	r3, [pc, #184]	; (10008bbc <mpu_set_bypass+0x16c>)
10008b04:	7a9b      	ldrb	r3, [r3, #10]
10008b06:	07db      	lsls	r3, r3, #31
10008b08:	d506      	bpl.n	10008b18 <mpu_set_bypass+0xc8>
        tmp |= BIT_AUX_IF_EN;
10008b0a:	466b      	mov	r3, sp
10008b0c:	1dda      	adds	r2, r3, #7
10008b0e:	79d9      	ldrb	r1, [r3, #7]
10008b10:	2320      	movs	r3, #32
10008b12:	430b      	orrs	r3, r1
10008b14:	7013      	strb	r3, [r2, #0]
10008b16:	e005      	b.n	10008b24 <mpu_set_bypass+0xd4>
        else
        tmp &= ~BIT_AUX_IF_EN;
10008b18:	466b      	mov	r3, sp
10008b1a:	1dda      	adds	r2, r3, #7
10008b1c:	79db      	ldrb	r3, [r3, #7]
10008b1e:	2120      	movs	r1, #32
10008b20:	438b      	bics	r3, r1
10008b22:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008b24:	4b25      	ldr	r3, [pc, #148]	; (10008bbc <mpu_set_bypass+0x16c>)
10008b26:	681a      	ldr	r2, [r3, #0]
10008b28:	7911      	ldrb	r1, [r2, #4]
10008b2a:	685b      	ldr	r3, [r3, #4]
10008b2c:	7818      	ldrb	r0, [r3, #0]
10008b2e:	466b      	mov	r3, sp
10008b30:	3307      	adds	r3, #7
10008b32:	2201      	movs	r2, #1
10008b34:	4d23      	ldr	r5, [pc, #140]	; (10008bc4 <mpu_set_bypass+0x174>)
10008b36:	47a8      	blx	r5
10008b38:	2800      	cmp	r0, #0
10008b3a:	d137      	bne.n	10008bac <mpu_set_bypass+0x15c>
        return -1;
        delay_ms(3);
10008b3c:	3003      	adds	r0, #3
10008b3e:	4b22      	ldr	r3, [pc, #136]	; (10008bc8 <mpu_set_bypass+0x178>)
10008b40:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
10008b42:	2322      	movs	r3, #34	; 0x22
10008b44:	4a1d      	ldr	r2, [pc, #116]	; (10008bbc <mpu_set_bypass+0x16c>)
10008b46:	5cd3      	ldrb	r3, [r2, r3]
10008b48:	2b00      	cmp	r3, #0
10008b4a:	d003      	beq.n	10008b54 <mpu_set_bypass+0x104>
        tmp = BIT_ACTL;
10008b4c:	2280      	movs	r2, #128	; 0x80
10008b4e:	466b      	mov	r3, sp
10008b50:	71da      	strb	r2, [r3, #7]
10008b52:	e002      	b.n	10008b5a <mpu_set_bypass+0x10a>
        else
        tmp = 0;
10008b54:	2200      	movs	r2, #0
10008b56:	466b      	mov	r3, sp
10008b58:	71da      	strb	r2, [r3, #7]
        if (st.chip_cfg.latched_int)
10008b5a:	2323      	movs	r3, #35	; 0x23
10008b5c:	4a17      	ldr	r2, [pc, #92]	; (10008bbc <mpu_set_bypass+0x16c>)
10008b5e:	5cd3      	ldrb	r3, [r2, r3]
10008b60:	2b00      	cmp	r3, #0
10008b62:	d005      	beq.n	10008b70 <mpu_set_bypass+0x120>
        tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008b64:	466b      	mov	r3, sp
10008b66:	1dda      	adds	r2, r3, #7
10008b68:	79d9      	ldrb	r1, [r3, #7]
10008b6a:	2330      	movs	r3, #48	; 0x30
10008b6c:	430b      	orrs	r3, r1
10008b6e:	7013      	strb	r3, [r2, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008b70:	4b12      	ldr	r3, [pc, #72]	; (10008bbc <mpu_set_bypass+0x16c>)
10008b72:	681a      	ldr	r2, [r3, #0]
10008b74:	7dd1      	ldrb	r1, [r2, #23]
10008b76:	685b      	ldr	r3, [r3, #4]
10008b78:	7818      	ldrb	r0, [r3, #0]
10008b7a:	466b      	mov	r3, sp
10008b7c:	3307      	adds	r3, #7
10008b7e:	2201      	movs	r2, #1
10008b80:	4d10      	ldr	r5, [pc, #64]	; (10008bc4 <mpu_set_bypass+0x174>)
10008b82:	47a8      	blx	r5
10008b84:	2800      	cmp	r0, #0
10008b86:	d114      	bne.n	10008bb2 <mpu_set_bypass+0x162>
        return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
10008b88:	4b0c      	ldr	r3, [pc, #48]	; (10008bbc <mpu_set_bypass+0x16c>)
10008b8a:	749c      	strb	r4, [r3, #18]
    return 0;
10008b8c:	2000      	movs	r0, #0
10008b8e:	e012      	b.n	10008bb6 <mpu_set_bypass+0x166>
int mpu_set_bypass(unsigned char bypass_on)
{
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
    return 0;
10008b90:	2000      	movs	r0, #0
10008b92:	e010      	b.n	10008bb6 <mpu_set_bypass+0x166>

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
        return -1;
10008b94:	2001      	movs	r0, #1
10008b96:	4240      	negs	r0, r0
10008b98:	e00d      	b.n	10008bb6 <mpu_set_bypass+0x166>
        tmp &= ~BIT_AUX_IF_EN;
        //if(st.chip_cfg.spi_mode)
        //tmp |= 0x10;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
        return -1;
10008b9a:	2001      	movs	r0, #1
10008b9c:	4240      	negs	r0, r0
10008b9e:	e00a      	b.n	10008bb6 <mpu_set_bypass+0x166>
        if (st.chip_cfg.active_low_int)
        tmp |= BIT_ACTL;
        if (st.chip_cfg.latched_int)
        tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
        return -1;
10008ba0:	2001      	movs	r0, #1
10008ba2:	4240      	negs	r0, r0
10008ba4:	e007      	b.n	10008bb6 <mpu_set_bypass+0x166>
    }
    else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
        return -1;
10008ba6:	2001      	movs	r0, #1
10008ba8:	4240      	negs	r0, r0
10008baa:	e004      	b.n	10008bb6 <mpu_set_bypass+0x166>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
        tmp |= BIT_AUX_IF_EN;
        else
        tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
        return -1;
10008bac:	2001      	movs	r0, #1
10008bae:	4240      	negs	r0, r0
10008bb0:	e001      	b.n	10008bb6 <mpu_set_bypass+0x166>
        else
        tmp = 0;
        if (st.chip_cfg.latched_int)
        tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
        return -1;
10008bb2:	2001      	movs	r0, #1
10008bb4:	4240      	negs	r0, r0
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
}
10008bb6:	b003      	add	sp, #12
10008bb8:	bd30      	pop	{r4, r5, pc}
10008bba:	46c0      	nop			; (mov r8, r8)
10008bbc:	10012404 	.word	0x10012404
10008bc0:	100082e5 	.word	0x100082e5
10008bc4:	100083a9 	.word	0x100083a9
10008bc8:	10008129 	.word	0x10008129

10008bcc <mpu_set_int_latched>:
*  Any MPU register will clear the interrupt.
*  @param[in]  enable  1 to enable, 0 to disable.
*  @return     0 if successful.
*/
int mpu_set_int_latched(unsigned char enable)
{
10008bcc:	b530      	push	{r4, r5, lr}
10008bce:	b083      	sub	sp, #12
10008bd0:	0004      	movs	r4, r0
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008bd2:	2323      	movs	r3, #35	; 0x23
10008bd4:	4a1c      	ldr	r2, [pc, #112]	; (10008c48 <mpu_set_int_latched+0x7c>)
10008bd6:	5cd3      	ldrb	r3, [r2, r3]
10008bd8:	4283      	cmp	r3, r0
10008bda:	d02e      	beq.n	10008c3a <mpu_set_int_latched+0x6e>
    return 0;

    if (enable)
10008bdc:	2800      	cmp	r0, #0
10008bde:	d003      	beq.n	10008be8 <mpu_set_int_latched+0x1c>
    tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008be0:	2230      	movs	r2, #48	; 0x30
10008be2:	466b      	mov	r3, sp
10008be4:	71da      	strb	r2, [r3, #7]
10008be6:	e002      	b.n	10008bee <mpu_set_int_latched+0x22>
    else
    tmp = 0;
10008be8:	2200      	movs	r2, #0
10008bea:	466b      	mov	r3, sp
10008bec:	71da      	strb	r2, [r3, #7]
    if (st.chip_cfg.bypass_mode)
10008bee:	4b16      	ldr	r3, [pc, #88]	; (10008c48 <mpu_set_int_latched+0x7c>)
10008bf0:	7c9b      	ldrb	r3, [r3, #18]
10008bf2:	2b00      	cmp	r3, #0
10008bf4:	d005      	beq.n	10008c02 <mpu_set_int_latched+0x36>
    tmp |= BIT_BYPASS_EN;
10008bf6:	466b      	mov	r3, sp
10008bf8:	1dda      	adds	r2, r3, #7
10008bfa:	79d9      	ldrb	r1, [r3, #7]
10008bfc:	2302      	movs	r3, #2
10008bfe:	430b      	orrs	r3, r1
10008c00:	7013      	strb	r3, [r2, #0]
    if (st.chip_cfg.active_low_int)
10008c02:	2322      	movs	r3, #34	; 0x22
10008c04:	4a10      	ldr	r2, [pc, #64]	; (10008c48 <mpu_set_int_latched+0x7c>)
10008c06:	5cd3      	ldrb	r3, [r2, r3]
10008c08:	2b00      	cmp	r3, #0
10008c0a:	d006      	beq.n	10008c1a <mpu_set_int_latched+0x4e>
    tmp |= BIT_ACTL;
10008c0c:	466b      	mov	r3, sp
10008c0e:	1dda      	adds	r2, r3, #7
10008c10:	79db      	ldrb	r3, [r3, #7]
10008c12:	2180      	movs	r1, #128	; 0x80
10008c14:	4249      	negs	r1, r1
10008c16:	430b      	orrs	r3, r1
10008c18:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008c1a:	4b0b      	ldr	r3, [pc, #44]	; (10008c48 <mpu_set_int_latched+0x7c>)
10008c1c:	681a      	ldr	r2, [r3, #0]
10008c1e:	7dd1      	ldrb	r1, [r2, #23]
10008c20:	685b      	ldr	r3, [r3, #4]
10008c22:	7818      	ldrb	r0, [r3, #0]
10008c24:	466b      	mov	r3, sp
10008c26:	3307      	adds	r3, #7
10008c28:	2201      	movs	r2, #1
10008c2a:	4d08      	ldr	r5, [pc, #32]	; (10008c4c <mpu_set_int_latched+0x80>)
10008c2c:	47a8      	blx	r5
10008c2e:	2800      	cmp	r0, #0
10008c30:	d105      	bne.n	10008c3e <mpu_set_int_latched+0x72>
    return -1;
    st.chip_cfg.latched_int = enable;
10008c32:	2323      	movs	r3, #35	; 0x23
10008c34:	4a04      	ldr	r2, [pc, #16]	; (10008c48 <mpu_set_int_latched+0x7c>)
10008c36:	54d4      	strb	r4, [r2, r3]
    return 0;
10008c38:	e003      	b.n	10008c42 <mpu_set_int_latched+0x76>
*/
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
    return 0;
10008c3a:	2000      	movs	r0, #0
10008c3c:	e001      	b.n	10008c42 <mpu_set_int_latched+0x76>
    if (st.chip_cfg.bypass_mode)
    tmp |= BIT_BYPASS_EN;
    if (st.chip_cfg.active_low_int)
    tmp |= BIT_ACTL;
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
    return -1;
10008c3e:	2001      	movs	r0, #1
10008c40:	4240      	negs	r0, r0
    st.chip_cfg.latched_int = enable;
    return 0;
}
10008c42:	b003      	add	sp, #12
10008c44:	bd30      	pop	{r4, r5, pc}
10008c46:	46c0      	nop			; (mov r8, r8)
10008c48:	10012404 	.word	0x10012404
10008c4c:	100083a9 	.word	0x100083a9

10008c50 <mpu_lp_accel_mode>:
*  @param[in]  rate        Minimum sampling rate, or zero to disable LP
*                          accel mode.
*  @return     0 if successful.
*/
int mpu_lp_accel_mode(unsigned short rate)
{
10008c50:	b510      	push	{r4, lr}
10008c52:	b082      	sub	sp, #8
    unsigned char tmp[2];

    if (rate > 40)
10008c54:	2828      	cmp	r0, #40	; 0x28
10008c56:	d825      	bhi.n	10008ca4 <mpu_lp_accel_mode+0x54>
    return -1;

    if (!rate) {
10008c58:	2800      	cmp	r0, #0
10008c5a:	d114      	bne.n	10008c86 <mpu_lp_accel_mode+0x36>
        mpu_set_int_latched(0);
10008c5c:	4b15      	ldr	r3, [pc, #84]	; (10008cb4 <mpu_lp_accel_mode+0x64>)
10008c5e:	4798      	blx	r3
        tmp[0] = 0;
10008c60:	ab01      	add	r3, sp, #4
10008c62:	2200      	movs	r2, #0
10008c64:	701a      	strb	r2, [r3, #0]
        tmp[1] = BIT_STBY_XYZG;
10008c66:	3207      	adds	r2, #7
10008c68:	705a      	strb	r2, [r3, #1]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008c6a:	4a13      	ldr	r2, [pc, #76]	; (10008cb8 <mpu_lp_accel_mode+0x68>)
10008c6c:	6811      	ldr	r1, [r2, #0]
10008c6e:	7d49      	ldrb	r1, [r1, #21]
10008c70:	6852      	ldr	r2, [r2, #4]
10008c72:	7810      	ldrb	r0, [r2, #0]
10008c74:	2202      	movs	r2, #2
10008c76:	4c11      	ldr	r4, [pc, #68]	; (10008cbc <mpu_lp_accel_mode+0x6c>)
10008c78:	47a0      	blx	r4
10008c7a:	2800      	cmp	r0, #0
10008c7c:	d115      	bne.n	10008caa <mpu_lp_accel_mode+0x5a>
        return -1;
        st.chip_cfg.lp_accel_mode = 0;
10008c7e:	2200      	movs	r2, #0
10008c80:	4b0d      	ldr	r3, [pc, #52]	; (10008cb8 <mpu_lp_accel_mode+0x68>)
10008c82:	751a      	strb	r2, [r3, #20]
        return 0;
10008c84:	e013      	b.n	10008cae <mpu_lp_accel_mode+0x5e>
    * it gets a chance to deassert the interrupt pin; therefore, we shift this
    * responsibility over to the MCU.
    *
    * Any register read will clear the interrupt.
    */
    mpu_set_int_latched(1);
10008c86:	2001      	movs	r0, #1
10008c88:	4b0a      	ldr	r3, [pc, #40]	; (10008cb4 <mpu_lp_accel_mode+0x64>)
10008c8a:	4798      	blx	r3
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
10008c8c:	4b0a      	ldr	r3, [pc, #40]	; (10008cb8 <mpu_lp_accel_mode+0x68>)
10008c8e:	2208      	movs	r2, #8
10008c90:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
10008c92:	2200      	movs	r2, #0
10008c94:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
10008c96:	3201      	adds	r2, #1
10008c98:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
10008c9a:	2000      	movs	r0, #0
10008c9c:	4b08      	ldr	r3, [pc, #32]	; (10008cc0 <mpu_lp_accel_mode+0x70>)
10008c9e:	4798      	blx	r3

    return 0;
10008ca0:	2000      	movs	r0, #0
10008ca2:	e004      	b.n	10008cae <mpu_lp_accel_mode+0x5e>
int mpu_lp_accel_mode(unsigned short rate)
{
    unsigned char tmp[2];

    if (rate > 40)
    return -1;
10008ca4:	2001      	movs	r0, #1
10008ca6:	4240      	negs	r0, r0
10008ca8:	e001      	b.n	10008cae <mpu_lp_accel_mode+0x5e>
    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
10008caa:	2001      	movs	r0, #1
10008cac:	4240      	negs	r0, r0
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
    mpu_configure_fifo(0);

    return 0;
}
10008cae:	b002      	add	sp, #8
10008cb0:	bd10      	pop	{r4, pc}
10008cb2:	46c0      	nop			; (mov r8, r8)
10008cb4:	10008bcd 	.word	0x10008bcd
10008cb8:	10012404 	.word	0x10012404
10008cbc:	100083a9 	.word	0x100083a9
10008cc0:	100088f9 	.word	0x100088f9

10008cc4 <mpu_set_sample_rate>:
*  Sampling rate must be between 4Hz and 1kHz.
*  @param[in]  rate    Desired sampling rate (Hz).
*  @return     0 if successful.
*/
int mpu_set_sample_rate(unsigned short rate)
{
10008cc4:	b530      	push	{r4, r5, lr}
10008cc6:	b083      	sub	sp, #12
10008cc8:	0004      	movs	r4, r0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008cca:	4b32      	ldr	r3, [pc, #200]	; (10008d94 <mpu_set_sample_rate+0xd0>)
10008ccc:	7a9b      	ldrb	r3, [r3, #10]
10008cce:	2b00      	cmp	r3, #0
10008cd0:	d057      	beq.n	10008d82 <mpu_set_sample_rate+0xbe>
    return -1;

    if (st.chip_cfg.dmp_on) {
10008cd2:	2324      	movs	r3, #36	; 0x24
10008cd4:	4a2f      	ldr	r2, [pc, #188]	; (10008d94 <mpu_set_sample_rate+0xd0>)
10008cd6:	5cd3      	ldrb	r3, [r2, r3]
10008cd8:	2b00      	cmp	r3, #0
10008cda:	d155      	bne.n	10008d88 <mpu_set_sample_rate+0xc4>
        return -1;
    }        
    else {
        if (st.chip_cfg.lp_accel_mode) {
10008cdc:	7d13      	ldrb	r3, [r2, #20]
10008cde:	2b00      	cmp	r3, #0
10008ce0:	d00a      	beq.n	10008cf8 <mpu_set_sample_rate+0x34>
            if (rate && (rate <= 40)) {
10008ce2:	1e43      	subs	r3, r0, #1
10008ce4:	b29b      	uxth	r3, r3
10008ce6:	2b27      	cmp	r3, #39	; 0x27
10008ce8:	d803      	bhi.n	10008cf2 <mpu_set_sample_rate+0x2e>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
10008cea:	4b2b      	ldr	r3, [pc, #172]	; (10008d98 <mpu_set_sample_rate+0xd4>)
10008cec:	4798      	blx	r3
                return 0;
10008cee:	2400      	movs	r4, #0
10008cf0:	e04c      	b.n	10008d8c <mpu_set_sample_rate+0xc8>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode, switch back to full-power mode */
            mpu_lp_accel_mode(0);
10008cf2:	2000      	movs	r0, #0
10008cf4:	4b28      	ldr	r3, [pc, #160]	; (10008d98 <mpu_set_sample_rate+0xd4>)
10008cf6:	4798      	blx	r3
        }
        if (rate < 4)
        rate = 4;
10008cf8:	2104      	movs	r1, #4
                return 0;
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode, switch back to full-power mode */
            mpu_lp_accel_mode(0);
        }
        if (rate < 4)
10008cfa:	2c03      	cmp	r4, #3
10008cfc:	d907      	bls.n	10008d0e <mpu_set_sample_rate+0x4a>
10008cfe:	1c21      	adds	r1, r4, #0
10008d00:	23fa      	movs	r3, #250	; 0xfa
10008d02:	009b      	lsls	r3, r3, #2
10008d04:	429c      	cmp	r4, r3
10008d06:	d901      	bls.n	10008d0c <mpu_set_sample_rate+0x48>
10008d08:	4b24      	ldr	r3, [pc, #144]	; (10008d9c <mpu_set_sample_rate+0xd8>)
10008d0a:	8819      	ldrh	r1, [r3, #0]
10008d0c:	b289      	uxth	r1, r1
        rate = 4;
        else if (rate > 1000)
        rate = 1000;

        data = 1000 / rate - 1;
10008d0e:	466b      	mov	r3, sp
10008d10:	1ddc      	adds	r4, r3, #7
10008d12:	20fa      	movs	r0, #250	; 0xfa
10008d14:	0080      	lsls	r0, r0, #2
10008d16:	4b22      	ldr	r3, [pc, #136]	; (10008da0 <mpu_set_sample_rate+0xdc>)
10008d18:	4798      	blx	r3
10008d1a:	3801      	subs	r0, #1
10008d1c:	7020      	strb	r0, [r4, #0]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data)) {
10008d1e:	4b1d      	ldr	r3, [pc, #116]	; (10008d94 <mpu_set_sample_rate+0xd0>)
10008d20:	681a      	ldr	r2, [r3, #0]
10008d22:	7851      	ldrb	r1, [r2, #1]
10008d24:	685b      	ldr	r3, [r3, #4]
10008d26:	7818      	ldrb	r0, [r3, #0]
10008d28:	0023      	movs	r3, r4
10008d2a:	2201      	movs	r2, #1
10008d2c:	4c1d      	ldr	r4, [pc, #116]	; (10008da4 <mpu_set_sample_rate+0xe0>)
10008d2e:	47a0      	blx	r4
10008d30:	1e04      	subs	r4, r0, #0
10008d32:	d008      	beq.n	10008d46 <mpu_set_sample_rate+0x82>
            DBG_LOG("-1...");
10008d34:	481c      	ldr	r0, [pc, #112]	; (10008da8 <mpu_set_sample_rate+0xe4>)
10008d36:	4b1d      	ldr	r3, [pc, #116]	; (10008dac <mpu_set_sample_rate+0xe8>)
10008d38:	4798      	blx	r3
10008d3a:	481d      	ldr	r0, [pc, #116]	; (10008db0 <mpu_set_sample_rate+0xec>)
10008d3c:	4b1d      	ldr	r3, [pc, #116]	; (10008db4 <mpu_set_sample_rate+0xf0>)
10008d3e:	4798      	blx	r3
            return -1;
10008d40:	2401      	movs	r4, #1
10008d42:	4264      	negs	r4, r4
10008d44:	e022      	b.n	10008d8c <mpu_set_sample_rate+0xc8>
        }            

        st.chip_cfg.sample_rate = 1000 / (1 + data);
10008d46:	4d13      	ldr	r5, [pc, #76]	; (10008d94 <mpu_set_sample_rate+0xd0>)
10008d48:	466b      	mov	r3, sp
10008d4a:	79d9      	ldrb	r1, [r3, #7]
10008d4c:	3101      	adds	r1, #1
10008d4e:	20fa      	movs	r0, #250	; 0xfa
10008d50:	0080      	lsls	r0, r0, #2
10008d52:	4b13      	ldr	r3, [pc, #76]	; (10008da0 <mpu_set_sample_rate+0xdc>)
10008d54:	4798      	blx	r3
10008d56:	81e8      	strh	r0, [r5, #14]

        #ifdef AK89xx_SECONDARY
        DBG_LOG("Compass sample rate");
10008d58:	4813      	ldr	r0, [pc, #76]	; (10008da8 <mpu_set_sample_rate+0xe4>)
10008d5a:	4b14      	ldr	r3, [pc, #80]	; (10008dac <mpu_set_sample_rate+0xe8>)
10008d5c:	4798      	blx	r3
10008d5e:	4816      	ldr	r0, [pc, #88]	; (10008db8 <mpu_set_sample_rate+0xf4>)
10008d60:	4b14      	ldr	r3, [pc, #80]	; (10008db4 <mpu_set_sample_rate+0xf0>)
10008d62:	4798      	blx	r3
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10008d64:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
10008d66:	1c18      	adds	r0, r3, #0
10008d68:	b29b      	uxth	r3, r3
10008d6a:	2b64      	cmp	r3, #100	; 0x64
10008d6c:	d900      	bls.n	10008d70 <mpu_set_sample_rate+0xac>
10008d6e:	2064      	movs	r0, #100	; 0x64
10008d70:	b280      	uxth	r0, r0
10008d72:	4b12      	ldr	r3, [pc, #72]	; (10008dbc <mpu_set_sample_rate+0xf8>)
10008d74:	4798      	blx	r3
        #endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
10008d76:	4b07      	ldr	r3, [pc, #28]	; (10008d94 <mpu_set_sample_rate+0xd0>)
10008d78:	89d8      	ldrh	r0, [r3, #14]
10008d7a:	0840      	lsrs	r0, r0, #1
10008d7c:	4b10      	ldr	r3, [pc, #64]	; (10008dc0 <mpu_set_sample_rate+0xfc>)
10008d7e:	4798      	blx	r3
        return 0;
10008d80:	e004      	b.n	10008d8c <mpu_set_sample_rate+0xc8>
int mpu_set_sample_rate(unsigned short rate)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
    return -1;
10008d82:	2401      	movs	r4, #1
10008d84:	4264      	negs	r4, r4
10008d86:	e001      	b.n	10008d8c <mpu_set_sample_rate+0xc8>

    if (st.chip_cfg.dmp_on) {
        return -1;
10008d88:	2401      	movs	r4, #1
10008d8a:	4264      	negs	r4, r4

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
        return 0;
    }
}
10008d8c:	0020      	movs	r0, r4
10008d8e:	b003      	add	sp, #12
10008d90:	bd30      	pop	{r4, r5, pc}
10008d92:	46c0      	nop			; (mov r8, r8)
10008d94:	10012404 	.word	0x10012404
10008d98:	10008c51 	.word	0x10008c51
10008d9c:	10011418 	.word	0x10011418
10008da0:	1000f029 	.word	0x1000f029
10008da4:	100083a9 	.word	0x100083a9
10008da8:	100114f8 	.word	0x100114f8
10008dac:	100104d9 	.word	0x100104d9
10008db0:	10011508 	.word	0x10011508
10008db4:	100103b9 	.word	0x100103b9
10008db8:	10011510 	.word	0x10011510
10008dbc:	10008881 	.word	0x10008881
10008dc0:	100087e9 	.word	0x100087e9

10008dc4 <mpu_set_sensors>:
*  \n INV_XYZ_COMPASS
*  @param[in]  sensors    Mask of sensors to wake.
*  @return     0 if successful.
*/
int mpu_set_sensors(unsigned char sensors)
{
10008dc4:	b530      	push	{r4, r5, lr}
10008dc6:	b083      	sub	sp, #12
10008dc8:	0004      	movs	r4, r0
    unsigned char data;
    #ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
    #endif

    if (sensors & INV_XYZ_GYRO)
10008dca:	2370      	movs	r3, #112	; 0x70
10008dcc:	4203      	tst	r3, r0
10008dce:	d003      	beq.n	10008dd8 <mpu_set_sensors+0x14>
    data = INV_CLK_PLL;
10008dd0:	2201      	movs	r2, #1
10008dd2:	466b      	mov	r3, sp
10008dd4:	71da      	strb	r2, [r3, #7]
10008dd6:	e015      	b.n	10008e04 <mpu_set_sensors+0x40>
    else if (sensors)
10008dd8:	2800      	cmp	r0, #0
10008dda:	d003      	beq.n	10008de4 <mpu_set_sensors+0x20>
    data = 0;
10008ddc:	2200      	movs	r2, #0
10008dde:	466b      	mov	r3, sp
10008de0:	71da      	strb	r2, [r3, #7]
10008de2:	e00f      	b.n	10008e04 <mpu_set_sensors+0x40>
    else
    data = BIT_SLEEP;
10008de4:	466b      	mov	r3, sp
10008de6:	3307      	adds	r3, #7
10008de8:	2240      	movs	r2, #64	; 0x40
10008dea:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10008dec:	4a6a      	ldr	r2, [pc, #424]	; (10008f98 <mpu_set_sensors+0x1d4>)
10008dee:	6811      	ldr	r1, [r2, #0]
10008df0:	7d49      	ldrb	r1, [r1, #21]
10008df2:	6852      	ldr	r2, [r2, #4]
10008df4:	7810      	ldrb	r0, [r2, #0]
10008df6:	2201      	movs	r2, #1
10008df8:	4d68      	ldr	r5, [pc, #416]	; (10008f9c <mpu_set_sensors+0x1d8>)
10008dfa:	47a8      	blx	r5
10008dfc:	2800      	cmp	r0, #0
10008dfe:	d100      	bne.n	10008e02 <mpu_set_sensors+0x3e>
10008e00:	e0b2      	b.n	10008f68 <mpu_set_sensors+0x1a4>
10008e02:	e00b      	b.n	10008e1c <mpu_set_sensors+0x58>
10008e04:	4b64      	ldr	r3, [pc, #400]	; (10008f98 <mpu_set_sensors+0x1d4>)
10008e06:	681a      	ldr	r2, [r3, #0]
10008e08:	7d51      	ldrb	r1, [r2, #21]
10008e0a:	685b      	ldr	r3, [r3, #4]
10008e0c:	7818      	ldrb	r0, [r3, #0]
10008e0e:	466b      	mov	r3, sp
10008e10:	3307      	adds	r3, #7
10008e12:	2201      	movs	r2, #1
10008e14:	4d61      	ldr	r5, [pc, #388]	; (10008f9c <mpu_set_sensors+0x1d8>)
10008e16:	47a8      	blx	r5
10008e18:	2800      	cmp	r0, #0
10008e1a:	d005      	beq.n	10008e28 <mpu_set_sensors+0x64>
        st.chip_cfg.sensors = 0;
10008e1c:	2200      	movs	r2, #0
10008e1e:	4b5e      	ldr	r3, [pc, #376]	; (10008f98 <mpu_set_sensors+0x1d4>)
10008e20:	729a      	strb	r2, [r3, #10]
        return -1;
10008e22:	2501      	movs	r5, #1
10008e24:	426d      	negs	r5, r5
10008e26:	e0b4      	b.n	10008f92 <mpu_set_sensors+0x1ce>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008e28:	466b      	mov	r3, sp
10008e2a:	1dda      	adds	r2, r3, #7
10008e2c:	79db      	ldrb	r3, [r3, #7]
10008e2e:	2140      	movs	r1, #64	; 0x40
10008e30:	438b      	bics	r3, r1
10008e32:	4959      	ldr	r1, [pc, #356]	; (10008f98 <mpu_set_sensors+0x1d4>)
10008e34:	730b      	strb	r3, [r1, #12]

    data = 0;
10008e36:	2300      	movs	r3, #0
10008e38:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_X_GYRO))
10008e3a:	0663      	lsls	r3, r4, #25
10008e3c:	d402      	bmi.n	10008e44 <mpu_set_sensors+0x80>
    data |= BIT_STBY_XG;
10008e3e:	2204      	movs	r2, #4
10008e40:	466b      	mov	r3, sp
10008e42:	71da      	strb	r2, [r3, #7]
    if (!(sensors & INV_Y_GYRO))
10008e44:	06a3      	lsls	r3, r4, #26
10008e46:	d405      	bmi.n	10008e54 <mpu_set_sensors+0x90>
    data |= BIT_STBY_YG;
10008e48:	466b      	mov	r3, sp
10008e4a:	1dda      	adds	r2, r3, #7
10008e4c:	79d9      	ldrb	r1, [r3, #7]
10008e4e:	2302      	movs	r3, #2
10008e50:	430b      	orrs	r3, r1
10008e52:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_Z_GYRO))
10008e54:	06e3      	lsls	r3, r4, #27
10008e56:	d405      	bmi.n	10008e64 <mpu_set_sensors+0xa0>
    data |= BIT_STBY_ZG;
10008e58:	466b      	mov	r3, sp
10008e5a:	1dda      	adds	r2, r3, #7
10008e5c:	79d9      	ldrb	r1, [r3, #7]
10008e5e:	2301      	movs	r3, #1
10008e60:	430b      	orrs	r3, r1
10008e62:	7013      	strb	r3, [r2, #0]
    if (!(sensors & INV_XYZ_ACCEL))
10008e64:	0723      	lsls	r3, r4, #28
10008e66:	d405      	bmi.n	10008e74 <mpu_set_sensors+0xb0>
    data |= BIT_STBY_XYZA;
10008e68:	466b      	mov	r3, sp
10008e6a:	1dda      	adds	r2, r3, #7
10008e6c:	79d9      	ldrb	r1, [r3, #7]
10008e6e:	2338      	movs	r3, #56	; 0x38
10008e70:	430b      	orrs	r3, r1
10008e72:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
10008e74:	4b48      	ldr	r3, [pc, #288]	; (10008f98 <mpu_set_sensors+0x1d4>)
10008e76:	681a      	ldr	r2, [r3, #0]
10008e78:	7d91      	ldrb	r1, [r2, #22]
10008e7a:	685b      	ldr	r3, [r3, #4]
10008e7c:	7818      	ldrb	r0, [r3, #0]
10008e7e:	466b      	mov	r3, sp
10008e80:	3307      	adds	r3, #7
10008e82:	2201      	movs	r2, #1
10008e84:	4d45      	ldr	r5, [pc, #276]	; (10008f9c <mpu_set_sensors+0x1d8>)
10008e86:	47a8      	blx	r5
10008e88:	2800      	cmp	r0, #0
10008e8a:	d005      	beq.n	10008e98 <mpu_set_sensors+0xd4>
        st.chip_cfg.sensors = 0;
10008e8c:	2200      	movs	r2, #0
10008e8e:	4b42      	ldr	r3, [pc, #264]	; (10008f98 <mpu_set_sensors+0x1d4>)
10008e90:	729a      	strb	r2, [r3, #10]
        return -1;
10008e92:	2501      	movs	r5, #1
10008e94:	426d      	negs	r5, r5
10008e96:	e07c      	b.n	10008f92 <mpu_set_sensors+0x1ce>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
10008e98:	2308      	movs	r3, #8
10008e9a:	0022      	movs	r2, r4
10008e9c:	439a      	bics	r2, r3
10008e9e:	d06b      	beq.n	10008f78 <mpu_set_sensors+0x1b4>
    /* Latched interrupts only used in LP accel mode. */
    mpu_set_int_latched(0);
10008ea0:	2000      	movs	r0, #0
10008ea2:	4b3f      	ldr	r3, [pc, #252]	; (10008fa0 <mpu_set_sensors+0x1dc>)
10008ea4:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
    mpu_set_bypass(1);
    else
    mpu_set_bypass(0);
    #else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008ea6:	4b3c      	ldr	r3, [pc, #240]	; (10008f98 <mpu_set_sensors+0x1d4>)
10008ea8:	681a      	ldr	r2, [r3, #0]
10008eaa:	7911      	ldrb	r1, [r2, #4]
10008eac:	685b      	ldr	r3, [r3, #4]
10008eae:	7818      	ldrb	r0, [r3, #0]
10008eb0:	466b      	mov	r3, sp
10008eb2:	3306      	adds	r3, #6
10008eb4:	2201      	movs	r2, #1
10008eb6:	4d3b      	ldr	r5, [pc, #236]	; (10008fa4 <mpu_set_sensors+0x1e0>)
10008eb8:	47a8      	blx	r5
10008eba:	2800      	cmp	r0, #0
10008ebc:	d148      	bne.n	10008f50 <mpu_set_sensors+0x18c>
    return -1;
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
10008ebe:	07e3      	lsls	r3, r4, #31
10008ec0:	d509      	bpl.n	10008ed6 <mpu_set_sensors+0x112>
        data = AKM_SINGLE_MEASUREMENT;
10008ec2:	2211      	movs	r2, #17
10008ec4:	466b      	mov	r3, sp
10008ec6:	71da      	strb	r2, [r3, #7]
        user_ctrl |= BIT_AUX_IF_EN;
10008ec8:	466b      	mov	r3, sp
10008eca:	1d9a      	adds	r2, r3, #6
10008ecc:	7999      	ldrb	r1, [r3, #6]
10008ece:	2320      	movs	r3, #32
10008ed0:	430b      	orrs	r3, r1
10008ed2:	7013      	strb	r3, [r2, #0]
10008ed4:	e008      	b.n	10008ee8 <mpu_set_sensors+0x124>
        } else {
        data = AKM_POWER_DOWN;
10008ed6:	2210      	movs	r2, #16
10008ed8:	466b      	mov	r3, sp
10008eda:	71da      	strb	r2, [r3, #7]
        user_ctrl &= ~BIT_AUX_IF_EN;
10008edc:	466b      	mov	r3, sp
10008ede:	1d9a      	adds	r2, r3, #6
10008ee0:	799b      	ldrb	r3, [r3, #6]
10008ee2:	2120      	movs	r1, #32
10008ee4:	438b      	bics	r3, r1
10008ee6:	7013      	strb	r3, [r2, #0]
    }
    if (st.chip_cfg.dmp_on)
10008ee8:	2324      	movs	r3, #36	; 0x24
10008eea:	4a2b      	ldr	r2, [pc, #172]	; (10008f98 <mpu_set_sensors+0x1d4>)
10008eec:	5cd3      	ldrb	r3, [r2, r3]
10008eee:	2b00      	cmp	r3, #0
10008ef0:	d007      	beq.n	10008f02 <mpu_set_sensors+0x13e>
    user_ctrl |= BIT_DMP_EN;
10008ef2:	466b      	mov	r3, sp
10008ef4:	1d9a      	adds	r2, r3, #6
10008ef6:	799b      	ldrb	r3, [r3, #6]
10008ef8:	2180      	movs	r1, #128	; 0x80
10008efa:	4249      	negs	r1, r1
10008efc:	430b      	orrs	r3, r1
10008efe:	7013      	strb	r3, [r2, #0]
10008f00:	e005      	b.n	10008f0e <mpu_set_sensors+0x14a>
    else
    user_ctrl &= ~BIT_DMP_EN;
10008f02:	466b      	mov	r3, sp
10008f04:	1d9a      	adds	r2, r3, #6
10008f06:	799b      	ldrb	r3, [r3, #6]
10008f08:	217f      	movs	r1, #127	; 0x7f
10008f0a:	400b      	ands	r3, r1
10008f0c:	7013      	strb	r3, [r2, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
10008f0e:	4b22      	ldr	r3, [pc, #136]	; (10008f98 <mpu_set_sensors+0x1d4>)
10008f10:	2226      	movs	r2, #38	; 0x26
10008f12:	6819      	ldr	r1, [r3, #0]
10008f14:	5c89      	ldrb	r1, [r1, r2]
10008f16:	685b      	ldr	r3, [r3, #4]
10008f18:	7818      	ldrb	r0, [r3, #0]
10008f1a:	466b      	mov	r3, sp
10008f1c:	3307      	adds	r3, #7
10008f1e:	3a25      	subs	r2, #37	; 0x25
10008f20:	4d1e      	ldr	r5, [pc, #120]	; (10008f9c <mpu_set_sensors+0x1d8>)
10008f22:	47a8      	blx	r5
10008f24:	2800      	cmp	r0, #0
10008f26:	d116      	bne.n	10008f56 <mpu_set_sensors+0x192>
    return -1;
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008f28:	4b1b      	ldr	r3, [pc, #108]	; (10008f98 <mpu_set_sensors+0x1d4>)
10008f2a:	681a      	ldr	r2, [r3, #0]
10008f2c:	7911      	ldrb	r1, [r2, #4]
10008f2e:	685b      	ldr	r3, [r3, #4]
10008f30:	7818      	ldrb	r0, [r3, #0]
10008f32:	466b      	mov	r3, sp
10008f34:	3306      	adds	r3, #6
10008f36:	2201      	movs	r2, #1
10008f38:	4d18      	ldr	r5, [pc, #96]	; (10008f9c <mpu_set_sensors+0x1d8>)
10008f3a:	47a8      	blx	r5
10008f3c:	1e05      	subs	r5, r0, #0
10008f3e:	d10d      	bne.n	10008f5c <mpu_set_sensors+0x198>
    return -1;
    #endif
    #endif

    st.chip_cfg.sensors = sensors;
10008f40:	4b15      	ldr	r3, [pc, #84]	; (10008f98 <mpu_set_sensors+0x1d4>)
10008f42:	729c      	strb	r4, [r3, #10]
    st.chip_cfg.lp_accel_mode = 0;
10008f44:	2200      	movs	r2, #0
10008f46:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
10008f48:	2032      	movs	r0, #50	; 0x32
10008f4a:	4b17      	ldr	r3, [pc, #92]	; (10008fa8 <mpu_set_sensors+0x1e4>)
10008f4c:	4798      	blx	r3
    return 0;
10008f4e:	e020      	b.n	10008f92 <mpu_set_sensors+0x1ce>
    mpu_set_bypass(1);
    else
    mpu_set_bypass(0);
    #else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
    return -1;
10008f50:	2501      	movs	r5, #1
10008f52:	426d      	negs	r5, r5
10008f54:	e01d      	b.n	10008f92 <mpu_set_sensors+0x1ce>
    if (st.chip_cfg.dmp_on)
    user_ctrl |= BIT_DMP_EN;
    else
    user_ctrl &= ~BIT_DMP_EN;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
    return -1;
10008f56:	2501      	movs	r5, #1
10008f58:	426d      	negs	r5, r5
10008f5a:	e01a      	b.n	10008f92 <mpu_set_sensors+0x1ce>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
    return -1;
10008f5c:	2501      	movs	r5, #1
10008f5e:	426d      	negs	r5, r5
10008f60:	e017      	b.n	10008f92 <mpu_set_sensors+0x1ce>
    mpu_set_bypass(1);
    else
    mpu_set_bypass(0);
    #else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
    return -1;
10008f62:	2501      	movs	r5, #1
10008f64:	426d      	negs	r5, r5
10008f66:	e014      	b.n	10008f92 <mpu_set_sensors+0x1ce>
    data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008f68:	466b      	mov	r3, sp
10008f6a:	3307      	adds	r3, #7
10008f6c:	781b      	ldrb	r3, [r3, #0]
10008f6e:	2240      	movs	r2, #64	; 0x40
10008f70:	4393      	bics	r3, r2
10008f72:	4a09      	ldr	r2, [pc, #36]	; (10008f98 <mpu_set_sensors+0x1d4>)
10008f74:	7313      	strb	r3, [r2, #12]
10008f76:	e762      	b.n	10008e3e <mpu_set_sensors+0x7a>
    if (sensors & INV_XYZ_COMPASS)
    mpu_set_bypass(1);
    else
    mpu_set_bypass(0);
    #else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008f78:	4b07      	ldr	r3, [pc, #28]	; (10008f98 <mpu_set_sensors+0x1d4>)
10008f7a:	681a      	ldr	r2, [r3, #0]
10008f7c:	7911      	ldrb	r1, [r2, #4]
10008f7e:	685b      	ldr	r3, [r3, #4]
10008f80:	7818      	ldrb	r0, [r3, #0]
10008f82:	466b      	mov	r3, sp
10008f84:	3306      	adds	r3, #6
10008f86:	2201      	movs	r2, #1
10008f88:	4d06      	ldr	r5, [pc, #24]	; (10008fa4 <mpu_set_sensors+0x1e0>)
10008f8a:	47a8      	blx	r5
10008f8c:	2800      	cmp	r0, #0
10008f8e:	d0a2      	beq.n	10008ed6 <mpu_set_sensors+0x112>
10008f90:	e7e7      	b.n	10008f62 <mpu_set_sensors+0x19e>

    st.chip_cfg.sensors = sensors;
    st.chip_cfg.lp_accel_mode = 0;
    delay_ms(50);
    return 0;
}
10008f92:	0028      	movs	r0, r5
10008f94:	b003      	add	sp, #12
10008f96:	bd30      	pop	{r4, r5, pc}
10008f98:	10012404 	.word	0x10012404
10008f9c:	100083a9 	.word	0x100083a9
10008fa0:	10008bcd 	.word	0x10008bcd
10008fa4:	100082e5 	.word	0x100082e5
10008fa8:	10008129 	.word	0x10008129

10008fac <mpu_init>:
*  Data ready interrupt: Disabled, active HIGH, unlatched.
*  @param[in]  int_param   Platform-specific parameters to interrupt API.
*  @return     0 if successful.
*/
int mpu_init(struct int_param_s *int_param)
{
10008fac:	b570      	push	{r4, r5, r6, lr}
10008fae:	b084      	sub	sp, #16
10008fb0:	0006      	movs	r6, r0
    unsigned char data[6];

    DBG_LOG("Entering mpu_init...");
10008fb2:	48c0      	ldr	r0, [pc, #768]	; (100092b4 <mpu_init+0x308>)
10008fb4:	4bc0      	ldr	r3, [pc, #768]	; (100092b8 <mpu_init+0x30c>)
10008fb6:	4798      	blx	r3
10008fb8:	48c0      	ldr	r0, [pc, #768]	; (100092bc <mpu_init+0x310>)
10008fba:	4bc1      	ldr	r3, [pc, #772]	; (100092c0 <mpu_init+0x314>)
10008fbc:	4798      	blx	r3
    
    /* Reset device. */
    data[0] = BIT_RESET;
10008fbe:	ab02      	add	r3, sp, #8
10008fc0:	2280      	movs	r2, #128	; 0x80
10008fc2:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10008fc4:	4abf      	ldr	r2, [pc, #764]	; (100092c4 <mpu_init+0x318>)
10008fc6:	6811      	ldr	r1, [r2, #0]
10008fc8:	7d49      	ldrb	r1, [r1, #21]
10008fca:	6852      	ldr	r2, [r2, #4]
10008fcc:	7810      	ldrb	r0, [r2, #0]
10008fce:	2201      	movs	r2, #1
10008fd0:	4cbd      	ldr	r4, [pc, #756]	; (100092c8 <mpu_init+0x31c>)
10008fd2:	47a0      	blx	r4
10008fd4:	2800      	cmp	r0, #0
10008fd6:	d000      	beq.n	10008fda <mpu_init+0x2e>
10008fd8:	e14f      	b.n	1000927a <mpu_init+0x2ce>
    return -1;
    delay_ms(100);
10008fda:	3064      	adds	r0, #100	; 0x64
10008fdc:	4bbb      	ldr	r3, [pc, #748]	; (100092cc <mpu_init+0x320>)
10008fde:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
10008fe0:	ab02      	add	r3, sp, #8
10008fe2:	2200      	movs	r2, #0
10008fe4:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10008fe6:	4ab7      	ldr	r2, [pc, #732]	; (100092c4 <mpu_init+0x318>)
10008fe8:	6811      	ldr	r1, [r2, #0]
10008fea:	7d49      	ldrb	r1, [r1, #21]
10008fec:	6852      	ldr	r2, [r2, #4]
10008fee:	7810      	ldrb	r0, [r2, #0]
10008ff0:	2201      	movs	r2, #1
10008ff2:	4cb5      	ldr	r4, [pc, #724]	; (100092c8 <mpu_init+0x31c>)
10008ff4:	47a0      	blx	r4
10008ff6:	2800      	cmp	r0, #0
10008ff8:	d000      	beq.n	10008ffc <mpu_init+0x50>
10008ffa:	e141      	b.n	10009280 <mpu_init+0x2d4>
    return -1;

    st.chip_cfg.accel_half = 0;
10008ffc:	4ab1      	ldr	r2, [pc, #708]	; (100092c4 <mpu_init+0x318>)
10008ffe:	2300      	movs	r3, #0
10009000:	74d3      	strb	r3, [r2, #19]

    #ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
    * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
    */
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
10009002:	ab02      	add	r3, sp, #8
10009004:	2148      	movs	r1, #72	; 0x48
10009006:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
10009008:	6811      	ldr	r1, [r2, #0]
1000900a:	7a09      	ldrb	r1, [r1, #8]
1000900c:	6852      	ldr	r2, [r2, #4]
1000900e:	7810      	ldrb	r0, [r2, #0]
10009010:	2201      	movs	r2, #1
10009012:	4cad      	ldr	r4, [pc, #692]	; (100092c8 <mpu_init+0x31c>)
10009014:	47a0      	blx	r4
10009016:	2800      	cmp	r0, #0
10009018:	d000      	beq.n	1000901c <mpu_init+0x70>
1000901a:	e134      	b.n	10009286 <mpu_init+0x2da>
    return -1;
    #endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
1000901c:	4ca9      	ldr	r4, [pc, #676]	; (100092c4 <mpu_init+0x318>)
1000901e:	23ff      	movs	r3, #255	; 0xff
10009020:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
10009022:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
10009024:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
10009026:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
10009028:	2201      	movs	r2, #1
1000902a:	4252      	negs	r2, r2
1000902c:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
1000902e:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
10009030:	74a3      	strb	r3, [r4, #18]
    #ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
10009032:	8522      	strh	r2, [r4, #40]	; 0x28
    #endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
10009034:	3bfe      	subs	r3, #254	; 0xfe
10009036:	7323      	strb	r3, [r4, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0;
10009038:	2500      	movs	r5, #0
1000903a:	3321      	adds	r3, #33	; 0x21
1000903c:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.latched_int = 0;
1000903e:	3301      	adds	r3, #1
10009040:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.int_motion_only = 0;
10009042:	7565      	strb	r5, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
10009044:	7525      	strb	r5, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
10009046:	0020      	movs	r0, r4
10009048:	3016      	adds	r0, #22
1000904a:	320d      	adds	r2, #13
1000904c:	2100      	movs	r1, #0
1000904e:	4ba0      	ldr	r3, [pc, #640]	; (100092d0 <mpu_init+0x324>)
10009050:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
10009052:	2324      	movs	r3, #36	; 0x24
10009054:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_loaded = 0;
10009056:	3301      	adds	r3, #1
10009058:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_sample_rate = 0;
1000905a:	84e5      	strh	r5, [r4, #38]	; 0x26
    mpu_set_int_level(0); // 0 --> active low disabled => active high

    if (mpu_set_gyro_fsr(250)) return -1; // 1B
1000905c:	20fa      	movs	r0, #250	; 0xfa
1000905e:	4b9d      	ldr	r3, [pc, #628]	; (100092d4 <mpu_init+0x328>)
10009060:	4798      	blx	r3
10009062:	2800      	cmp	r0, #0
10009064:	d000      	beq.n	10009068 <mpu_init+0xbc>
10009066:	e111      	b.n	1000928c <mpu_init+0x2e0>
    if (mpu_set_accel_fsr(4)) return -1; // 1B
10009068:	3004      	adds	r0, #4
1000906a:	4b9b      	ldr	r3, [pc, #620]	; (100092d8 <mpu_init+0x32c>)
1000906c:	4798      	blx	r3
1000906e:	2800      	cmp	r0, #0
10009070:	d000      	beq.n	10009074 <mpu_init+0xc8>
10009072:	e10e      	b.n	10009292 <mpu_init+0x2e6>
    if (mpu_set_lpf(42)) return -1; // 1B
10009074:	302a      	adds	r0, #42	; 0x2a
10009076:	4b99      	ldr	r3, [pc, #612]	; (100092dc <mpu_init+0x330>)
10009078:	4798      	blx	r3
1000907a:	2800      	cmp	r0, #0
1000907c:	d000      	beq.n	10009080 <mpu_init+0xd4>
1000907e:	e10b      	b.n	10009298 <mpu_init+0x2ec>
    if (mpu_set_sample_rate(50)) return -1;
10009080:	3032      	adds	r0, #50	; 0x32
10009082:	4b97      	ldr	r3, [pc, #604]	; (100092e0 <mpu_init+0x334>)
10009084:	4798      	blx	r3
10009086:	2800      	cmp	r0, #0
10009088:	d000      	beq.n	1000908c <mpu_init+0xe0>
1000908a:	e108      	b.n	1000929e <mpu_init+0x2f2>
    if (mpu_configure_fifo(0)) return -1;
1000908c:	4b95      	ldr	r3, [pc, #596]	; (100092e4 <mpu_init+0x338>)
1000908e:	4798      	blx	r3
10009090:	2800      	cmp	r0, #0
10009092:	d000      	beq.n	10009096 <mpu_init+0xea>
10009094:	e106      	b.n	100092a4 <mpu_init+0x2f8>

    #ifndef EMPL_TARGET_STM32F4
    if (int_param)
10009096:	2e00      	cmp	r6, #0
10009098:	d004      	beq.n	100090a4 <mpu_init+0xf8>
    uint32_t load = (uint32_t)(26000 - dualtimer_get_value(DUALTIMER_TIMER2));
    count = (uint32_t *)(load / 26000);
}
static inline int reg_int_cb(struct int_param_s *int_param)
{
    gpio_register_callback(PIN_AO_GPIO_2, interrupt_cb, GPIO_CALLBACK_RISING);
1000909a:	2202      	movs	r2, #2
1000909c:	4992      	ldr	r1, [pc, #584]	; (100092e8 <mpu_init+0x33c>)
1000909e:	301d      	adds	r0, #29
100090a0:	4b92      	ldr	r3, [pc, #584]	; (100092ec <mpu_init+0x340>)
100090a2:	4798      	blx	r3
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    uint8_t data[4], akm_addr;

    mpu_set_bypass(1);
100090a4:	2001      	movs	r0, #1
100090a6:	4b92      	ldr	r3, [pc, #584]	; (100092f0 <mpu_init+0x344>)
100090a8:	4798      	blx	r3

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
100090aa:	240c      	movs	r4, #12
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
100090ac:	4d91      	ldr	r5, [pc, #580]	; (100092f4 <mpu_init+0x348>)
100090ae:	ab01      	add	r3, sp, #4
100090b0:	2201      	movs	r2, #1
100090b2:	2100      	movs	r1, #0
100090b4:	0020      	movs	r0, r4
100090b6:	47a8      	blx	r5
        if (!result && (data[0] == AKM_WHOAMI))
100090b8:	2800      	cmp	r0, #0
100090ba:	d103      	bne.n	100090c4 <mpu_init+0x118>
100090bc:	466b      	mov	r3, sp
100090be:	791b      	ldrb	r3, [r3, #4]
100090c0:	2b48      	cmp	r3, #72	; 0x48
100090c2:	d004      	beq.n	100090ce <mpu_init+0x122>
    uint8_t data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
100090c4:	3401      	adds	r4, #1
100090c6:	b2e4      	uxtb	r4, r4
100090c8:	2c10      	cmp	r4, #16
100090ca:	d1f0      	bne.n	100090ae <mpu_init+0x102>
100090cc:	e001      	b.n	100090d2 <mpu_init+0x126>
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
        if (!result && (data[0] == AKM_WHOAMI))
        break;
    }

    if (akm_addr > 0x0F) {
100090ce:	2c0f      	cmp	r4, #15
100090d0:	d905      	bls.n	100090de <mpu_init+0x132>
        /* TODO: Handle this case in all compass-related functions. */
        DBG_LOG("Compass not found.\n");
100090d2:	4878      	ldr	r0, [pc, #480]	; (100092b4 <mpu_init+0x308>)
100090d4:	4c78      	ldr	r4, [pc, #480]	; (100092b8 <mpu_init+0x30c>)
100090d6:	47a0      	blx	r4
100090d8:	4887      	ldr	r0, [pc, #540]	; (100092f8 <mpu_init+0x34c>)
100090da:	47a0      	blx	r4
100090dc:	e0c4      	b.n	10009268 <mpu_init+0x2bc>
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;
100090de:	232a      	movs	r3, #42	; 0x2a
100090e0:	4a78      	ldr	r2, [pc, #480]	; (100092c4 <mpu_init+0x318>)
100090e2:	54d4      	strb	r4, [r2, r3]

    data[0] = AKM_POWER_DOWN;
100090e4:	ab01      	add	r3, sp, #4
100090e6:	2210      	movs	r2, #16
100090e8:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100090ea:	3a0f      	subs	r2, #15
100090ec:	210a      	movs	r1, #10
100090ee:	0020      	movs	r0, r4
100090f0:	4c75      	ldr	r4, [pc, #468]	; (100092c8 <mpu_init+0x31c>)
100090f2:	47a0      	blx	r4
100090f4:	2800      	cmp	r0, #0
100090f6:	d000      	beq.n	100090fa <mpu_init+0x14e>
100090f8:	e0b6      	b.n	10009268 <mpu_init+0x2bc>
    return -1;
    delay_ms(1);
100090fa:	3001      	adds	r0, #1
100090fc:	4b73      	ldr	r3, [pc, #460]	; (100092cc <mpu_init+0x320>)
100090fe:	4798      	blx	r3

    data[0] = AKM_FUSE_ROM_ACCESS;
10009100:	ab01      	add	r3, sp, #4
10009102:	221f      	movs	r2, #31
10009104:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009106:	320b      	adds	r2, #11
10009108:	496e      	ldr	r1, [pc, #440]	; (100092c4 <mpu_init+0x318>)
1000910a:	5c88      	ldrb	r0, [r1, r2]
1000910c:	3a29      	subs	r2, #41	; 0x29
1000910e:	210a      	movs	r1, #10
10009110:	4c6d      	ldr	r4, [pc, #436]	; (100092c8 <mpu_init+0x31c>)
10009112:	47a0      	blx	r4
10009114:	2800      	cmp	r0, #0
10009116:	d000      	beq.n	1000911a <mpu_init+0x16e>
10009118:	e0a6      	b.n	10009268 <mpu_init+0x2bc>
    return -1;
    delay_ms(1);
1000911a:	3001      	adds	r0, #1
1000911c:	4b6b      	ldr	r3, [pc, #428]	; (100092cc <mpu_init+0x320>)
1000911e:	4798      	blx	r3

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
10009120:	232a      	movs	r3, #42	; 0x2a
10009122:	4a68      	ldr	r2, [pc, #416]	; (100092c4 <mpu_init+0x318>)
10009124:	5cd0      	ldrb	r0, [r2, r3]
10009126:	ab01      	add	r3, sp, #4
10009128:	2203      	movs	r2, #3
1000912a:	2110      	movs	r1, #16
1000912c:	4c71      	ldr	r4, [pc, #452]	; (100092f4 <mpu_init+0x348>)
1000912e:	47a0      	blx	r4
10009130:	2800      	cmp	r0, #0
10009132:	d000      	beq.n	10009136 <mpu_init+0x18a>
10009134:	e098      	b.n	10009268 <mpu_init+0x2bc>
    return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
10009136:	4a63      	ldr	r2, [pc, #396]	; (100092c4 <mpu_init+0x318>)
10009138:	ab01      	add	r3, sp, #4
1000913a:	7819      	ldrb	r1, [r3, #0]
1000913c:	3180      	adds	r1, #128	; 0x80
1000913e:	8591      	strh	r1, [r2, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
10009140:	7859      	ldrb	r1, [r3, #1]
10009142:	3180      	adds	r1, #128	; 0x80
10009144:	85d1      	strh	r1, [r2, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
10009146:	7899      	ldrb	r1, [r3, #2]
10009148:	3180      	adds	r1, #128	; 0x80
1000914a:	8611      	strh	r1, [r2, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
1000914c:	2110      	movs	r1, #16
1000914e:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009150:	311a      	adds	r1, #26
10009152:	5c50      	ldrb	r0, [r2, r1]
10009154:	2201      	movs	r2, #1
10009156:	3920      	subs	r1, #32
10009158:	4c5b      	ldr	r4, [pc, #364]	; (100092c8 <mpu_init+0x31c>)
1000915a:	47a0      	blx	r4
1000915c:	2800      	cmp	r0, #0
1000915e:	d000      	beq.n	10009162 <mpu_init+0x1b6>
10009160:	e082      	b.n	10009268 <mpu_init+0x2bc>
    return -1;
    delay_ms(1);
10009162:	3001      	adds	r0, #1
10009164:	4b59      	ldr	r3, [pc, #356]	; (100092cc <mpu_init+0x320>)
10009166:	4798      	blx	r3

    mpu_set_bypass(0);
10009168:	2000      	movs	r0, #0
1000916a:	4b61      	ldr	r3, [pc, #388]	; (100092f0 <mpu_init+0x344>)
1000916c:	4798      	blx	r3

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
1000916e:	ab01      	add	r3, sp, #4
10009170:	2240      	movs	r2, #64	; 0x40
10009172:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
10009174:	4a53      	ldr	r2, [pc, #332]	; (100092c4 <mpu_init+0x318>)
10009176:	6811      	ldr	r1, [r2, #0]
10009178:	7e89      	ldrb	r1, [r1, #26]
1000917a:	6852      	ldr	r2, [r2, #4]
1000917c:	7810      	ldrb	r0, [r2, #0]
1000917e:	2201      	movs	r2, #1
10009180:	4c51      	ldr	r4, [pc, #324]	; (100092c8 <mpu_init+0x31c>)
10009182:	47a0      	blx	r4
10009184:	2800      	cmp	r0, #0
10009186:	d16f      	bne.n	10009268 <mpu_init+0x2bc>
    return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
10009188:	ab01      	add	r3, sp, #4
1000918a:	4a4e      	ldr	r2, [pc, #312]	; (100092c4 <mpu_init+0x318>)
1000918c:	212a      	movs	r1, #42	; 0x2a
1000918e:	5c51      	ldrb	r1, [r2, r1]
10009190:	3880      	subs	r0, #128	; 0x80
10009192:	4301      	orrs	r1, r0
10009194:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
10009196:	6811      	ldr	r1, [r2, #0]
10009198:	7f89      	ldrb	r1, [r1, #30]
1000919a:	6852      	ldr	r2, [r2, #4]
1000919c:	7810      	ldrb	r0, [r2, #0]
1000919e:	2201      	movs	r2, #1
100091a0:	4c49      	ldr	r4, [pc, #292]	; (100092c8 <mpu_init+0x31c>)
100091a2:	47a0      	blx	r4
100091a4:	2800      	cmp	r0, #0
100091a6:	d15f      	bne.n	10009268 <mpu_init+0x2bc>
    return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
100091a8:	ab01      	add	r3, sp, #4
100091aa:	2202      	movs	r2, #2
100091ac:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
100091ae:	4a45      	ldr	r2, [pc, #276]	; (100092c4 <mpu_init+0x318>)
100091b0:	6811      	ldr	r1, [r2, #0]
100091b2:	7fc9      	ldrb	r1, [r1, #31]
100091b4:	6852      	ldr	r2, [r2, #4]
100091b6:	7810      	ldrb	r0, [r2, #0]
100091b8:	2201      	movs	r2, #1
100091ba:	4c43      	ldr	r4, [pc, #268]	; (100092c8 <mpu_init+0x31c>)
100091bc:	47a0      	blx	r4
100091be:	2800      	cmp	r0, #0
100091c0:	d152      	bne.n	10009268 <mpu_init+0x2bc>
    return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
100091c2:	ab01      	add	r3, sp, #4
100091c4:	2288      	movs	r2, #136	; 0x88
100091c6:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
100091c8:	4a3e      	ldr	r2, [pc, #248]	; (100092c4 <mpu_init+0x318>)
100091ca:	2120      	movs	r1, #32
100091cc:	6810      	ldr	r0, [r2, #0]
100091ce:	5c41      	ldrb	r1, [r0, r1]
100091d0:	6852      	ldr	r2, [r2, #4]
100091d2:	7810      	ldrb	r0, [r2, #0]
100091d4:	2201      	movs	r2, #1
100091d6:	4c3c      	ldr	r4, [pc, #240]	; (100092c8 <mpu_init+0x31c>)
100091d8:	47a0      	blx	r4
100091da:	2800      	cmp	r0, #0
100091dc:	d144      	bne.n	10009268 <mpu_init+0x2bc>
    return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
100091de:	ab01      	add	r3, sp, #4
100091e0:	4a38      	ldr	r2, [pc, #224]	; (100092c4 <mpu_init+0x318>)
100091e2:	212a      	movs	r1, #42	; 0x2a
100091e4:	5c51      	ldrb	r1, [r2, r1]
100091e6:	7019      	strb	r1, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
100091e8:	2121      	movs	r1, #33	; 0x21
100091ea:	6810      	ldr	r0, [r2, #0]
100091ec:	5c41      	ldrb	r1, [r0, r1]
100091ee:	6852      	ldr	r2, [r2, #4]
100091f0:	7810      	ldrb	r0, [r2, #0]
100091f2:	2201      	movs	r2, #1
100091f4:	4c34      	ldr	r4, [pc, #208]	; (100092c8 <mpu_init+0x31c>)
100091f6:	47a0      	blx	r4
100091f8:	2800      	cmp	r0, #0
100091fa:	d135      	bne.n	10009268 <mpu_init+0x2bc>
    return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
100091fc:	ab01      	add	r3, sp, #4
100091fe:	220a      	movs	r2, #10
10009200:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
10009202:	4a30      	ldr	r2, [pc, #192]	; (100092c4 <mpu_init+0x318>)
10009204:	2122      	movs	r1, #34	; 0x22
10009206:	6810      	ldr	r0, [r2, #0]
10009208:	5c41      	ldrb	r1, [r0, r1]
1000920a:	6852      	ldr	r2, [r2, #4]
1000920c:	7810      	ldrb	r0, [r2, #0]
1000920e:	2201      	movs	r2, #1
10009210:	4c2d      	ldr	r4, [pc, #180]	; (100092c8 <mpu_init+0x31c>)
10009212:	47a0      	blx	r4
10009214:	2800      	cmp	r0, #0
10009216:	d127      	bne.n	10009268 <mpu_init+0x2bc>
    return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
10009218:	ab01      	add	r3, sp, #4
1000921a:	2281      	movs	r2, #129	; 0x81
1000921c:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
1000921e:	4a29      	ldr	r2, [pc, #164]	; (100092c4 <mpu_init+0x318>)
10009220:	2123      	movs	r1, #35	; 0x23
10009222:	6810      	ldr	r0, [r2, #0]
10009224:	5c41      	ldrb	r1, [r0, r1]
10009226:	6852      	ldr	r2, [r2, #4]
10009228:	7810      	ldrb	r0, [r2, #0]
1000922a:	2201      	movs	r2, #1
1000922c:	4c26      	ldr	r4, [pc, #152]	; (100092c8 <mpu_init+0x31c>)
1000922e:	47a0      	blx	r4
10009230:	2800      	cmp	r0, #0
10009232:	d119      	bne.n	10009268 <mpu_init+0x2bc>
    return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
10009234:	ab01      	add	r3, sp, #4
10009236:	2211      	movs	r2, #17
10009238:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
1000923a:	4a22      	ldr	r2, [pc, #136]	; (100092c4 <mpu_init+0x318>)
1000923c:	2126      	movs	r1, #38	; 0x26
1000923e:	6810      	ldr	r0, [r2, #0]
10009240:	5c41      	ldrb	r1, [r0, r1]
10009242:	6852      	ldr	r2, [r2, #4]
10009244:	7810      	ldrb	r0, [r2, #0]
10009246:	2201      	movs	r2, #1
10009248:	4c1f      	ldr	r4, [pc, #124]	; (100092c8 <mpu_init+0x31c>)
1000924a:	47a0      	blx	r4
1000924c:	2800      	cmp	r0, #0
1000924e:	d10b      	bne.n	10009268 <mpu_init+0x2bc>
    return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
10009250:	ab01      	add	r3, sp, #4
10009252:	2203      	movs	r2, #3
10009254:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
10009256:	4a1b      	ldr	r2, [pc, #108]	; (100092c4 <mpu_init+0x318>)
10009258:	2127      	movs	r1, #39	; 0x27
1000925a:	6810      	ldr	r0, [r2, #0]
1000925c:	5c41      	ldrb	r1, [r0, r1]
1000925e:	6852      	ldr	r2, [r2, #4]
10009260:	7810      	ldrb	r0, [r2, #0]
10009262:	2201      	movs	r2, #1
10009264:	4c18      	ldr	r4, [pc, #96]	; (100092c8 <mpu_init+0x31c>)
10009266:	47a0      	blx	r4
    if (int_param)
    reg_int_cb(int_param);
    #endif

    setup_compass();
    if (mpu_set_compass_sample_rate(10)) return -1;
10009268:	200a      	movs	r0, #10
1000926a:	4b24      	ldr	r3, [pc, #144]	; (100092fc <mpu_init+0x350>)
1000926c:	4798      	blx	r3
1000926e:	1e04      	subs	r4, r0, #0
10009270:	d11b      	bne.n	100092aa <mpu_init+0x2fe>

    mpu_set_sensors(0);
10009272:	2000      	movs	r0, #0
10009274:	4b22      	ldr	r3, [pc, #136]	; (10009300 <mpu_init+0x354>)
10009276:	4798      	blx	r3
    
    return 0;
10009278:	e019      	b.n	100092ae <mpu_init+0x302>
    DBG_LOG("Entering mpu_init...");
    
    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
    return -1;
1000927a:	2401      	movs	r4, #1
1000927c:	4264      	negs	r4, r4
1000927e:	e016      	b.n	100092ae <mpu_init+0x302>
    delay_ms(100);

    /* Wake up chip. */
    data[0] = 0x00;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
    return -1;
10009280:	2401      	movs	r4, #1
10009282:	4264      	negs	r4, r4
10009284:	e013      	b.n	100092ae <mpu_init+0x302>
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
    * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
    */
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
    return -1;
10009286:	2401      	movs	r4, #1
10009288:	4264      	negs	r4, r4
1000928a:	e010      	b.n	100092ae <mpu_init+0x302>
    st.chip_cfg.dmp_on = 0;
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;
    mpu_set_int_level(0); // 0 --> active low disabled => active high

    if (mpu_set_gyro_fsr(250)) return -1; // 1B
1000928c:	2401      	movs	r4, #1
1000928e:	4264      	negs	r4, r4
10009290:	e00d      	b.n	100092ae <mpu_init+0x302>
    if (mpu_set_accel_fsr(4)) return -1; // 1B
10009292:	2401      	movs	r4, #1
10009294:	4264      	negs	r4, r4
10009296:	e00a      	b.n	100092ae <mpu_init+0x302>
    if (mpu_set_lpf(42)) return -1; // 1B
10009298:	2401      	movs	r4, #1
1000929a:	4264      	negs	r4, r4
1000929c:	e007      	b.n	100092ae <mpu_init+0x302>
    if (mpu_set_sample_rate(50)) return -1;
1000929e:	2401      	movs	r4, #1
100092a0:	4264      	negs	r4, r4
100092a2:	e004      	b.n	100092ae <mpu_init+0x302>
    if (mpu_configure_fifo(0)) return -1;
100092a4:	2401      	movs	r4, #1
100092a6:	4264      	negs	r4, r4
100092a8:	e001      	b.n	100092ae <mpu_init+0x302>
    if (int_param)
    reg_int_cb(int_param);
    #endif

    setup_compass();
    if (mpu_set_compass_sample_rate(10)) return -1;
100092aa:	2401      	movs	r4, #1
100092ac:	4264      	negs	r4, r4

    mpu_set_sensors(0);
    
    return 0;
}
100092ae:	0020      	movs	r0, r4
100092b0:	b004      	add	sp, #16
100092b2:	bd70      	pop	{r4, r5, r6, pc}
100092b4:	100114f8 	.word	0x100114f8
100092b8:	100104d9 	.word	0x100104d9
100092bc:	10011524 	.word	0x10011524
100092c0:	100103b9 	.word	0x100103b9
100092c4:	10012404 	.word	0x10012404
100092c8:	100083a9 	.word	0x100083a9
100092cc:	10008129 	.word	0x10008129
100092d0:	10010271 	.word	0x10010271
100092d4:	100086b5 	.word	0x100086b5
100092d8:	10008755 	.word	0x10008755
100092dc:	100087e9 	.word	0x100087e9
100092e0:	10008cc5 	.word	0x10008cc5
100092e4:	100088f9 	.word	0x100088f9
100092e8:	1000c49d 	.word	0x1000c49d
100092ec:	1000b89d 	.word	0x1000b89d
100092f0:	10008a51 	.word	0x10008a51
100092f4:	100082e5 	.word	0x100082e5
100092f8:	1001153c 	.word	0x1001153c
100092fc:	10008881 	.word	0x10008881
10009300:	10008dc5 	.word	0x10008dc5

10009304 <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
10009304:	2000      	movs	r0, #0
10009306:	4770      	bx	lr

10009308 <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
10009308:	2000      	movs	r0, #0
1000930a:	4770      	bx	lr

1000930c <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000930c:	78c0      	ldrb	r0, [r0, #3]
1000930e:	2800      	cmp	r0, #0
10009310:	d000      	beq.n	10009314 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
10009312:	20e2      	movs	r0, #226	; 0xe2
}
10009314:	4770      	bx	lr
10009316:	46c0      	nop			; (mov r8, r8)

10009318 <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
10009318:	2000      	movs	r0, #0
1000931a:	4770      	bx	lr

1000931c <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000931c:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000931e:	7800      	ldrb	r0, [r0, #0]
10009320:	2800      	cmp	r0, #0
10009322:	d006      	beq.n	10009332 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
10009324:	4803      	ldr	r0, [pc, #12]	; (10009334 <ble_scan_report_handler+0x18>)
10009326:	4b04      	ldr	r3, [pc, #16]	; (10009338 <ble_scan_report_handler+0x1c>)
10009328:	4798      	blx	r3
1000932a:	4804      	ldr	r0, [pc, #16]	; (1000933c <ble_scan_report_handler+0x20>)
1000932c:	4b04      	ldr	r3, [pc, #16]	; (10009340 <ble_scan_report_handler+0x24>)
1000932e:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
10009330:	20e2      	movs	r0, #226	; 0xe2
}
10009332:	bd10      	pop	{r4, pc}
10009334:	100114f8 	.word	0x100114f8
10009338:	100104d9 	.word	0x100104d9
1000933c:	10011a88 	.word	0x10011a88
10009340:	100103b9 	.word	0x100103b9

10009344 <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
10009344:	b510      	push	{r4, lr}
10009346:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10009348:	78c0      	ldrb	r0, [r0, #3]
1000934a:	2800      	cmp	r0, #0
1000934c:	d008      	beq.n	10009360 <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000934e:	4805      	ldr	r0, [pc, #20]	; (10009364 <ble_mtu_changed_cmd_complete_handler+0x20>)
10009350:	4b05      	ldr	r3, [pc, #20]	; (10009368 <ble_mtu_changed_cmd_complete_handler+0x24>)
10009352:	4798      	blx	r3
10009354:	78a2      	ldrb	r2, [r4, #2]
10009356:	8821      	ldrh	r1, [r4, #0]
10009358:	4804      	ldr	r0, [pc, #16]	; (1000936c <ble_mtu_changed_cmd_complete_handler+0x28>)
1000935a:	4b05      	ldr	r3, [pc, #20]	; (10009370 <ble_mtu_changed_cmd_complete_handler+0x2c>)
1000935c:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000935e:	20e2      	movs	r0, #226	; 0xe2
}
10009360:	bd10      	pop	{r4, pc}
10009362:	46c0      	nop			; (mov r8, r8)
10009364:	100114f8 	.word	0x100114f8
10009368:	100104d9 	.word	0x100104d9
1000936c:	10011a9c 	.word	0x10011a9c
10009370:	100103b9 	.word	0x100103b9

10009374 <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
10009374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009376:	0004      	movs	r4, r0
10009378:	4b19      	ldr	r3, [pc, #100]	; (100093e0 <ble_disconnected_state_handler+0x6c>)
1000937a:	229b      	movs	r2, #155	; 0x9b
1000937c:	0092      	lsls	r2, r2, #2
1000937e:	189d      	adds	r5, r3, r2
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
10009380:	2701      	movs	r7, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009382:	2600      	movs	r6, #0
10009384:	0018      	movs	r0, r3
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009386:	001a      	movs	r2, r3
10009388:	3a56      	subs	r2, #86	; 0x56
1000938a:	8811      	ldrh	r1, [r2, #0]
1000938c:	8822      	ldrh	r2, [r4, #0]
1000938e:	4291      	cmp	r1, r2
10009390:	d119      	bne.n	100093c6 <ble_disconnected_state_handler+0x52>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
10009392:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009394:	2a05      	cmp	r2, #5
10009396:	d001      	beq.n	1000939c <ble_disconnected_state_handler+0x28>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
10009398:	2a08      	cmp	r2, #8
1000939a:	d101      	bne.n	100093a0 <ble_disconnected_state_handler+0x2c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000939c:	7007      	strb	r7, [r0, #0]
1000939e:	e012      	b.n	100093c6 <ble_disconnected_state_handler+0x52>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
100093a0:	2a07      	cmp	r2, #7
100093a2:	d80f      	bhi.n	100093c4 <ble_disconnected_state_handler+0x50>
100093a4:	0092      	lsls	r2, r2, #2
100093a6:	490f      	ldr	r1, [pc, #60]	; (100093e4 <ble_disconnected_state_handler+0x70>)
100093a8:	588a      	ldr	r2, [r1, r2]
100093aa:	4697      	mov	pc, r2
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
100093ac:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
100093ae:	4a0e      	ldr	r2, [pc, #56]	; (100093e8 <ble_disconnected_state_handler+0x74>)
100093b0:	7812      	ldrb	r2, [r2, #0]
100093b2:	2a00      	cmp	r2, #0
100093b4:	d007      	beq.n	100093c6 <ble_disconnected_state_handler+0x52>
					{
						ble_device_count--;
100093b6:	4a0c      	ldr	r2, [pc, #48]	; (100093e8 <ble_disconnected_state_handler+0x74>)
100093b8:	7812      	ldrb	r2, [r2, #0]
100093ba:	3a01      	subs	r2, #1
100093bc:	b2d2      	uxtb	r2, r2
100093be:	490a      	ldr	r1, [pc, #40]	; (100093e8 <ble_disconnected_state_handler+0x74>)
100093c0:	700a      	strb	r2, [r1, #0]
100093c2:	e000      	b.n	100093c6 <ble_disconnected_state_handler+0x52>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
100093c4:	7006      	strb	r6, [r0, #0]
100093c6:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100093c8:	42ab      	cmp	r3, r5
100093ca:	d1db      	bne.n	10009384 <ble_disconnected_state_handler+0x10>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
100093cc:	4807      	ldr	r0, [pc, #28]	; (100093ec <ble_disconnected_state_handler+0x78>)
100093ce:	4b08      	ldr	r3, [pc, #32]	; (100093f0 <ble_disconnected_state_handler+0x7c>)
100093d0:	4798      	blx	r3
100093d2:	8822      	ldrh	r2, [r4, #0]
100093d4:	78a1      	ldrb	r1, [r4, #2]
100093d6:	4807      	ldr	r0, [pc, #28]	; (100093f4 <ble_disconnected_state_handler+0x80>)
100093d8:	4b07      	ldr	r3, [pc, #28]	; (100093f8 <ble_disconnected_state_handler+0x84>)
100093da:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
100093dc:	2000      	movs	r0, #0
100093de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100093e0:	10013b12 	.word	0x10013b12
100093e4:	10011918 	.word	0x10011918
100093e8:	10013d20 	.word	0x10013d20
100093ec:	100114f8 	.word	0x100114f8
100093f0:	100104d9 	.word	0x100104d9
100093f4:	10011ad4 	.word	0x10011ad4
100093f8:	100103b9 	.word	0x100103b9

100093fc <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
100093fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100093fe:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
10009400:	8801      	ldrh	r1, [r0, #0]
10009402:	4b28      	ldr	r3, [pc, #160]	; (100094a4 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009404:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
10009406:	891a      	ldrh	r2, [r3, #8]
10009408:	428a      	cmp	r2, r1
1000940a:	d104      	bne.n	10009416 <ble_encryption_status_change_handler+0x1a>
1000940c:	001a      	movs	r2, r3
1000940e:	325e      	adds	r2, #94	; 0x5e
10009410:	7812      	ldrb	r2, [r2, #0]
10009412:	2a06      	cmp	r2, #6
10009414:	d02e      	beq.n	10009474 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009416:	3401      	adds	r4, #1
10009418:	b2e4      	uxtb	r4, r4
1000941a:	337c      	adds	r3, #124	; 0x7c
1000941c:	2c05      	cmp	r4, #5
1000941e:	d1f2      	bne.n	10009406 <ble_encryption_status_change_handler+0xa>
10009420:	e039      	b.n	10009496 <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
10009422:	4920      	ldr	r1, [pc, #128]	; (100094a4 <ble_encryption_status_change_handler+0xa8>)
10009424:	0163      	lsls	r3, r4, #5
10009426:	1b1a      	subs	r2, r3, r4
10009428:	0092      	lsls	r2, r2, #2
1000942a:	188a      	adds	r2, r1, r2
1000942c:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000942e:	0014      	movs	r4, r2
10009430:	345e      	adds	r4, #94	; 0x5e
10009432:	2307      	movs	r3, #7
10009434:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
10009436:	481c      	ldr	r0, [pc, #112]	; (100094a8 <ble_encryption_status_change_handler+0xac>)
10009438:	4b1c      	ldr	r3, [pc, #112]	; (100094ac <ble_encryption_status_change_handler+0xb0>)
1000943a:	4798      	blx	r3
1000943c:	481c      	ldr	r0, [pc, #112]	; (100094b0 <ble_encryption_status_change_handler+0xb4>)
1000943e:	4b1d      	ldr	r3, [pc, #116]	; (100094b4 <ble_encryption_status_change_handler+0xb8>)
10009440:	4798      	blx	r3
		return AT_BLE_FAILURE;
10009442:	25e2      	movs	r5, #226	; 0xe2
10009444:	e02b      	b.n	1000949e <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
10009446:	4818      	ldr	r0, [pc, #96]	; (100094a8 <ble_encryption_status_change_handler+0xac>)
10009448:	4b18      	ldr	r3, [pc, #96]	; (100094ac <ble_encryption_status_change_handler+0xb0>)
1000944a:	4798      	blx	r3
1000944c:	481a      	ldr	r0, [pc, #104]	; (100094b8 <ble_encryption_status_change_handler+0xbc>)
1000944e:	4b19      	ldr	r3, [pc, #100]	; (100094b4 <ble_encryption_status_change_handler+0xb8>)
10009450:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
10009452:	4914      	ldr	r1, [pc, #80]	; (100094a4 <ble_encryption_status_change_handler+0xa8>)
10009454:	0163      	lsls	r3, r4, #5
10009456:	1b1a      	subs	r2, r3, r4
10009458:	0092      	lsls	r2, r2, #2
1000945a:	188a      	adds	r2, r1, r2
1000945c:	0010      	movs	r0, r2
1000945e:	305e      	adds	r0, #94	; 0x5e
10009460:	2708      	movs	r7, #8
10009462:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
10009464:	78f0      	ldrb	r0, [r6, #3]
10009466:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
10009468:	78b2      	ldrb	r2, [r6, #2]
1000946a:	1b1c      	subs	r4, r3, r4
1000946c:	00a4      	lsls	r4, r4, #2
1000946e:	190c      	adds	r4, r1, r4
10009470:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
10009472:	e014      	b.n	1000949e <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
10009474:	78b5      	ldrb	r5, [r6, #2]
10009476:	2d00      	cmp	r5, #0
10009478:	d0e5      	beq.n	10009446 <ble_encryption_status_change_handler+0x4a>
1000947a:	e7d2      	b.n	10009422 <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000947c:	4e0a      	ldr	r6, [pc, #40]	; (100094a8 <ble_encryption_status_change_handler+0xac>)
1000947e:	0030      	movs	r0, r6
10009480:	4d0a      	ldr	r5, [pc, #40]	; (100094ac <ble_encryption_status_change_handler+0xb0>)
10009482:	47a8      	blx	r5
10009484:	480c      	ldr	r0, [pc, #48]	; (100094b8 <ble_encryption_status_change_handler+0xbc>)
10009486:	4c0b      	ldr	r4, [pc, #44]	; (100094b4 <ble_encryption_status_change_handler+0xb8>)
10009488:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000948a:	0030      	movs	r0, r6
1000948c:	47a8      	blx	r5
1000948e:	480b      	ldr	r0, [pc, #44]	; (100094bc <ble_encryption_status_change_handler+0xc0>)
10009490:	47a0      	blx	r4
			return AT_BLE_FAILURE;
10009492:	25e2      	movs	r5, #226	; 0xe2
10009494:	e003      	b.n	1000949e <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
10009496:	78b5      	ldrb	r5, [r6, #2]
10009498:	2d00      	cmp	r5, #0
1000949a:	d1c2      	bne.n	10009422 <ble_encryption_status_change_handler+0x26>
1000949c:	e7ee      	b.n	1000947c <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000949e:	0028      	movs	r0, r5
100094a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100094a2:	46c0      	nop			; (mov r8, r8)
100094a4:	10013ab4 	.word	0x10013ab4
100094a8:	100114f8 	.word	0x100114f8
100094ac:	100104d9 	.word	0x100104d9
100094b0:	10011b04 	.word	0x10011b04
100094b4:	100103b9 	.word	0x100103b9
100094b8:	10011b18 	.word	0x10011b18
100094bc:	10011b3c 	.word	0x10011b3c

100094c0 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
100094c0:	b510      	push	{r4, lr}
100094c2:	0001      	movs	r1, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
100094c4:	4b15      	ldr	r3, [pc, #84]	; (1000951c <ble_scan_info_handler+0x5c>)
100094c6:	781b      	ldrb	r3, [r3, #0]
100094c8:	b2db      	uxtb	r3, r3
100094ca:	2b13      	cmp	r3, #19
100094cc:	d812      	bhi.n	100094f4 <ble_scan_info_handler+0x34>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
100094ce:	4c13      	ldr	r4, [pc, #76]	; (1000951c <ble_scan_info_handler+0x5c>)
100094d0:	7823      	ldrb	r3, [r4, #0]
100094d2:	b2db      	uxtb	r3, r3
100094d4:	0098      	lsls	r0, r3, #2
100094d6:	18c0      	adds	r0, r0, r3
100094d8:	00c0      	lsls	r0, r0, #3
100094da:	18c3      	adds	r3, r0, r3
100094dc:	4810      	ldr	r0, [pc, #64]	; (10009520 <ble_scan_info_handler+0x60>)
100094de:	1818      	adds	r0, r3, r0
100094e0:	2229      	movs	r2, #41	; 0x29
100094e2:	4b10      	ldr	r3, [pc, #64]	; (10009524 <ble_scan_info_handler+0x64>)
100094e4:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
100094e6:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
100094e8:	7823      	ldrb	r3, [r4, #0]
100094ea:	3301      	adds	r3, #1
100094ec:	b2db      	uxtb	r3, r3
100094ee:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
100094f0:	2300      	movs	r3, #0
100094f2:	e011      	b.n	10009518 <ble_scan_info_handler+0x58>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
100094f4:	480c      	ldr	r0, [pc, #48]	; (10009528 <ble_scan_info_handler+0x68>)
100094f6:	4b0d      	ldr	r3, [pc, #52]	; (1000952c <ble_scan_info_handler+0x6c>)
100094f8:	4798      	blx	r3
100094fa:	480d      	ldr	r0, [pc, #52]	; (10009530 <ble_scan_info_handler+0x70>)
100094fc:	4b0d      	ldr	r3, [pc, #52]	; (10009534 <ble_scan_info_handler+0x74>)
100094fe:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
10009500:	4b0d      	ldr	r3, [pc, #52]	; (10009538 <ble_scan_info_handler+0x78>)
10009502:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
10009504:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
10009506:	2800      	cmp	r0, #0
10009508:	d006      	beq.n	10009518 <ble_scan_info_handler+0x58>
		{
			DBG_LOG("Failed to stop scanning");
1000950a:	4807      	ldr	r0, [pc, #28]	; (10009528 <ble_scan_info_handler+0x68>)
1000950c:	4b07      	ldr	r3, [pc, #28]	; (1000952c <ble_scan_info_handler+0x6c>)
1000950e:	4798      	blx	r3
10009510:	480a      	ldr	r0, [pc, #40]	; (1000953c <ble_scan_info_handler+0x7c>)
10009512:	4b08      	ldr	r3, [pc, #32]	; (10009534 <ble_scan_info_handler+0x74>)
10009514:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
10009516:	23e2      	movs	r3, #226	; 0xe2
	}
}
10009518:	0018      	movs	r0, r3
1000951a:	bd10      	pop	{r4, pc}
1000951c:	100138d0 	.word	0x100138d0
10009520:	10013d98 	.word	0x10013d98
10009524:	1001025f 	.word	0x1001025f
10009528:	100114f8 	.word	0x100114f8
1000952c:	100104d9 	.word	0x100104d9
10009530:	10011b64 	.word	0x10011b64
10009534:	100103b9 	.word	0x100103b9
10009538:	1000d1f5 	.word	0x1000d1f5
1000953c:	10011b9c 	.word	0x10011b9c

10009540 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
10009540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009542:	464f      	mov	r7, r9
10009544:	4646      	mov	r6, r8
10009546:	b4c0      	push	{r6, r7}
10009548:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000954a:	8841      	ldrh	r1, [r0, #2]
1000954c:	4b3a      	ldr	r3, [pc, #232]	; (10009638 <ble_pair_done_handler+0xf8>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000954e:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
10009550:	891a      	ldrh	r2, [r3, #8]
10009552:	428a      	cmp	r2, r1
10009554:	d104      	bne.n	10009560 <ble_pair_done_handler+0x20>
10009556:	001a      	movs	r2, r3
10009558:	325e      	adds	r2, #94	; 0x5e
1000955a:	7812      	ldrb	r2, [r2, #0]
1000955c:	2a03      	cmp	r2, #3
1000955e:	d062      	beq.n	10009626 <ble_pair_done_handler+0xe6>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009560:	3401      	adds	r4, #1
10009562:	b2e4      	uxtb	r4, r4
10009564:	337c      	adds	r3, #124	; 0x7c
10009566:	2c05      	cmp	r4, #5
10009568:	d1f2      	bne.n	10009550 <ble_pair_done_handler+0x10>
1000956a:	e02b      	b.n	100095c4 <ble_pair_done_handler+0x84>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000956c:	0163      	lsls	r3, r4, #5
1000956e:	1b1c      	subs	r4, r3, r4
10009570:	00a4      	lsls	r4, r4, #2
10009572:	4b31      	ldr	r3, [pc, #196]	; (10009638 <ble_pair_done_handler+0xf8>)
10009574:	191c      	adds	r4, r3, r4
10009576:	345e      	adds	r4, #94	; 0x5e
10009578:	7823      	ldrb	r3, [r4, #0]
1000957a:	2b01      	cmp	r3, #1
1000957c:	d913      	bls.n	100095a6 <ble_pair_done_handler+0x66>
			DBG_LOG("Pairing failed...Disconnecting");
1000957e:	482f      	ldr	r0, [pc, #188]	; (1000963c <ble_pair_done_handler+0xfc>)
10009580:	4b2f      	ldr	r3, [pc, #188]	; (10009640 <ble_pair_done_handler+0x100>)
10009582:	4798      	blx	r3
10009584:	482f      	ldr	r0, [pc, #188]	; (10009644 <ble_pair_done_handler+0x104>)
10009586:	4b30      	ldr	r3, [pc, #192]	; (10009648 <ble_pair_done_handler+0x108>)
10009588:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000958a:	8868      	ldrh	r0, [r5, #2]
1000958c:	2113      	movs	r1, #19
1000958e:	4b2f      	ldr	r3, [pc, #188]	; (1000964c <ble_pair_done_handler+0x10c>)
10009590:	4798      	blx	r3
10009592:	1e06      	subs	r6, r0, #0
10009594:	d04b      	beq.n	1000962e <ble_pair_done_handler+0xee>
			{
				DBG_LOG("Disconnect Request Failed");
10009596:	4829      	ldr	r0, [pc, #164]	; (1000963c <ble_pair_done_handler+0xfc>)
10009598:	4b29      	ldr	r3, [pc, #164]	; (10009640 <ble_pair_done_handler+0x100>)
1000959a:	4798      	blx	r3
1000959c:	482c      	ldr	r0, [pc, #176]	; (10009650 <ble_pair_done_handler+0x110>)
1000959e:	4b2a      	ldr	r3, [pc, #168]	; (10009648 <ble_pair_done_handler+0x108>)
100095a0:	4798      	blx	r3
				return AT_BLE_FAILURE;
100095a2:	26e2      	movs	r6, #226	; 0xe2
100095a4:	e043      	b.n	1000962e <ble_pair_done_handler+0xee>
			}
		}
	}
	return AT_BLE_SUCCESS;
100095a6:	2600      	movs	r6, #0
100095a8:	e041      	b.n	1000962e <ble_pair_done_handler+0xee>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
100095aa:	4e24      	ldr	r6, [pc, #144]	; (1000963c <ble_pair_done_handler+0xfc>)
100095ac:	0030      	movs	r0, r6
100095ae:	4d24      	ldr	r5, [pc, #144]	; (10009640 <ble_pair_done_handler+0x100>)
100095b0:	47a8      	blx	r5
100095b2:	4828      	ldr	r0, [pc, #160]	; (10009654 <ble_pair_done_handler+0x114>)
100095b4:	4c24      	ldr	r4, [pc, #144]	; (10009648 <ble_pair_done_handler+0x108>)
100095b6:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
100095b8:	0030      	movs	r0, r6
100095ba:	47a8      	blx	r5
100095bc:	4826      	ldr	r0, [pc, #152]	; (10009658 <ble_pair_done_handler+0x118>)
100095be:	47a0      	blx	r4
			return AT_BLE_FAILURE;
100095c0:	26e2      	movs	r6, #226	; 0xe2
100095c2:	e034      	b.n	1000962e <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
100095c4:	792b      	ldrb	r3, [r5, #4]
100095c6:	2b00      	cmp	r3, #0
100095c8:	d1d0      	bne.n	1000956c <ble_pair_done_handler+0x2c>
100095ca:	e7ee      	b.n	100095aa <ble_pair_done_handler+0x6a>
	{
		DBG_LOG("Pairing procedure completed successfully");
100095cc:	481b      	ldr	r0, [pc, #108]	; (1000963c <ble_pair_done_handler+0xfc>)
100095ce:	4b1c      	ldr	r3, [pc, #112]	; (10009640 <ble_pair_done_handler+0x100>)
100095d0:	4798      	blx	r3
100095d2:	4820      	ldr	r0, [pc, #128]	; (10009654 <ble_pair_done_handler+0x114>)
100095d4:	4b1c      	ldr	r3, [pc, #112]	; (10009648 <ble_pair_done_handler+0x108>)
100095d6:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
100095d8:	782a      	ldrb	r2, [r5, #0]
100095da:	4b17      	ldr	r3, [pc, #92]	; (10009638 <ble_pair_done_handler+0xf8>)
100095dc:	4699      	mov	r9, r3
100095de:	0167      	lsls	r7, r4, #5
100095e0:	1b3b      	subs	r3, r7, r4
100095e2:	009b      	lsls	r3, r3, #2
100095e4:	444b      	add	r3, r9
100095e6:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
100095e8:	792a      	ldrb	r2, [r5, #4]
100095ea:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
100095ec:	335e      	adds	r3, #94	; 0x5e
100095ee:	2205      	movs	r2, #5
100095f0:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
100095f2:	1b38      	subs	r0, r7, r4
100095f4:	0080      	lsls	r0, r0, #2
100095f6:	4448      	add	r0, r9
100095f8:	3036      	adds	r0, #54	; 0x36
100095fa:	0029      	movs	r1, r5
100095fc:	3122      	adds	r1, #34	; 0x22
100095fe:	320b      	adds	r2, #11
10009600:	4b16      	ldr	r3, [pc, #88]	; (1000965c <ble_pair_done_handler+0x11c>)
10009602:	4698      	mov	r8, r3
10009604:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
10009606:	1b38      	subs	r0, r7, r4
10009608:	0080      	lsls	r0, r0, #2
1000960a:	4448      	add	r0, r9
1000960c:	3046      	adds	r0, #70	; 0x46
1000960e:	0029      	movs	r1, r5
10009610:	3132      	adds	r1, #50	; 0x32
10009612:	2217      	movs	r2, #23
10009614:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
10009616:	1b38      	subs	r0, r7, r4
10009618:	0080      	lsls	r0, r0, #2
1000961a:	4448      	add	r0, r9
1000961c:	301a      	adds	r0, #26
1000961e:	1da9      	adds	r1, r5, #6
10009620:	221c      	movs	r2, #28
10009622:	47c0      	blx	r8
10009624:	e003      	b.n	1000962e <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
10009626:	792e      	ldrb	r6, [r5, #4]
10009628:	2e00      	cmp	r6, #0
1000962a:	d0cf      	beq.n	100095cc <ble_pair_done_handler+0x8c>
1000962c:	e79e      	b.n	1000956c <ble_pair_done_handler+0x2c>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000962e:	0030      	movs	r0, r6
10009630:	bc0c      	pop	{r2, r3}
10009632:	4690      	mov	r8, r2
10009634:	4699      	mov	r9, r3
10009636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009638:	10013ab4 	.word	0x10013ab4
1000963c:	100114f8 	.word	0x100114f8
10009640:	100104d9 	.word	0x100104d9
10009644:	10011bb4 	.word	0x10011bb4
10009648:	100103b9 	.word	0x100103b9
1000964c:	1000d215 	.word	0x1000d215
10009650:	10011bd4 	.word	0x10011bd4
10009654:	10011bf0 	.word	0x10011bf0
10009658:	10011c1c 	.word	0x10011c1c
1000965c:	1001025f 	.word	0x1001025f

10009660 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
10009660:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
10009662:	8800      	ldrh	r0, [r0, #0]
10009664:	2378      	movs	r3, #120	; 0x78
10009666:	2201      	movs	r2, #1
10009668:	2101      	movs	r1, #1
1000966a:	4c02      	ldr	r4, [pc, #8]	; (10009674 <ble_conn_param_update_req+0x14>)
1000966c:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000966e:	2000      	movs	r0, #0
10009670:	bd10      	pop	{r4, pc}
10009672:	46c0      	nop			; (mov r8, r8)
10009674:	1000d235 	.word	0x1000d235

10009678 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
10009678:	b5f0      	push	{r4, r5, r6, r7, lr}
1000967a:	4657      	mov	r7, sl
1000967c:	464e      	mov	r6, r9
1000967e:	4645      	mov	r5, r8
10009680:	b4e0      	push	{r5, r6, r7}
10009682:	b084      	sub	sp, #16
10009684:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
10009686:	2209      	movs	r2, #9
10009688:	2100      	movs	r1, #0
1000968a:	a801      	add	r0, sp, #4
1000968c:	4b6b      	ldr	r3, [pc, #428]	; (1000983c <ble_slave_security_request_handler+0x1c4>)
1000968e:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009690:	8825      	ldrh	r5, [r4, #0]
10009692:	496b      	ldr	r1, [pc, #428]	; (10009840 <ble_slave_security_request_handler+0x1c8>)
10009694:	000a      	movs	r2, r1
10009696:	2300      	movs	r3, #0
10009698:	8910      	ldrh	r0, [r2, #8]
1000969a:	42a8      	cmp	r0, r5
1000969c:	d116      	bne.n	100096cc <ble_slave_security_request_handler+0x54>
1000969e:	0010      	movs	r0, r2
100096a0:	305e      	adds	r0, #94	; 0x5e
100096a2:	7800      	ldrb	r0, [r0, #0]
100096a4:	2802      	cmp	r0, #2
100096a6:	d111      	bne.n	100096cc <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
100096a8:	4865      	ldr	r0, [pc, #404]	; (10009840 <ble_slave_security_request_handler+0x1c8>)
100096aa:	015a      	lsls	r2, r3, #5
100096ac:	1ad6      	subs	r6, r2, r3
100096ae:	00b6      	lsls	r6, r6, #2
100096b0:	1986      	adds	r6, r0, r6
100096b2:	365e      	adds	r6, #94	; 0x5e
100096b4:	2206      	movs	r2, #6
100096b6:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
100096b8:	32f9      	adds	r2, #249	; 0xf9
100096ba:	4013      	ands	r3, r2
100096bc:	015a      	lsls	r2, r3, #5
100096be:	1ad2      	subs	r2, r2, r3
100096c0:	0092      	lsls	r2, r2, #2
100096c2:	1882      	adds	r2, r0, r2
100096c4:	7d12      	ldrb	r2, [r2, #20]
100096c6:	07d0      	lsls	r0, r2, #31
100096c8:	d405      	bmi.n	100096d6 <ble_slave_security_request_handler+0x5e>
100096ca:	e01b      	b.n	10009704 <ble_slave_security_request_handler+0x8c>
100096cc:	3301      	adds	r3, #1
100096ce:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100096d0:	2b05      	cmp	r3, #5
100096d2:	d1e1      	bne.n	10009698 <ble_slave_security_request_handler+0x20>
100096d4:	e01e      	b.n	10009714 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
100096d6:	78e0      	ldrb	r0, [r4, #3]
100096d8:	2800      	cmp	r0, #0
100096da:	d013      	beq.n	10009704 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
100096dc:	0159      	lsls	r1, r3, #5
100096de:	1ac9      	subs	r1, r1, r3
100096e0:	008b      	lsls	r3, r1, #2
100096e2:	4957      	ldr	r1, [pc, #348]	; (10009840 <ble_slave_security_request_handler+0x1c8>)
100096e4:	18c9      	adds	r1, r1, r3
100096e6:	311a      	adds	r1, #26
100096e8:	8820      	ldrh	r0, [r4, #0]
100096ea:	4b56      	ldr	r3, [pc, #344]	; (10009844 <ble_slave_security_request_handler+0x1cc>)
100096ec:	4798      	blx	r3
100096ee:	2800      	cmp	r0, #0
100096f0:	d100      	bne.n	100096f4 <ble_slave_security_request_handler+0x7c>
100096f2:	e09d      	b.n	10009830 <ble_slave_security_request_handler+0x1b8>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
100096f4:	4854      	ldr	r0, [pc, #336]	; (10009848 <ble_slave_security_request_handler+0x1d0>)
100096f6:	4b55      	ldr	r3, [pc, #340]	; (1000984c <ble_slave_security_request_handler+0x1d4>)
100096f8:	4798      	blx	r3
100096fa:	4855      	ldr	r0, [pc, #340]	; (10009850 <ble_slave_security_request_handler+0x1d8>)
100096fc:	4b55      	ldr	r3, [pc, #340]	; (10009854 <ble_slave_security_request_handler+0x1dc>)
100096fe:	4798      	blx	r3
				return AT_BLE_FAILURE;
10009700:	20e2      	movs	r0, #226	; 0xe2
10009702:	e095      	b.n	10009830 <ble_slave_security_request_handler+0x1b8>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
10009704:	015a      	lsls	r2, r3, #5
10009706:	1ad3      	subs	r3, r2, r3
10009708:	009b      	lsls	r3, r3, #2
1000970a:	4a4d      	ldr	r2, [pc, #308]	; (10009840 <ble_slave_security_request_handler+0x1c8>)
1000970c:	18d3      	adds	r3, r2, r3
1000970e:	335e      	adds	r3, #94	; 0x5e
10009710:	2202      	movs	r2, #2
10009712:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009714:	8825      	ldrh	r5, [r4, #0]
10009716:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009718:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000971a:	0016      	movs	r6, r2
1000971c:	8908      	ldrh	r0, [r1, #8]
1000971e:	42a8      	cmp	r0, r5
10009720:	d10d      	bne.n	1000973e <ble_slave_security_request_handler+0xc6>
10009722:	0008      	movs	r0, r1
10009724:	305e      	adds	r0, #94	; 0x5e
10009726:	7800      	ldrb	r0, [r0, #0]
10009728:	2802      	cmp	r0, #2
1000972a:	d108      	bne.n	1000973e <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000972c:	0152      	lsls	r2, r2, #5
1000972e:	1b92      	subs	r2, r2, r6
10009730:	0096      	lsls	r6, r2, #2
10009732:	4a43      	ldr	r2, [pc, #268]	; (10009840 <ble_slave_security_request_handler+0x1c8>)
10009734:	1992      	adds	r2, r2, r6
10009736:	325e      	adds	r2, #94	; 0x5e
10009738:	2103      	movs	r1, #3
1000973a:	7011      	strb	r1, [r2, #0]
			break;
1000973c:	e005      	b.n	1000974a <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000973e:	3301      	adds	r3, #1
10009740:	b2db      	uxtb	r3, r3
10009742:	3201      	adds	r2, #1
10009744:	317c      	adds	r1, #124	; 0x7c
10009746:	2b05      	cmp	r3, #5
10009748:	d1e7      	bne.n	1000971a <ble_slave_security_request_handler+0xa2>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000974a:	aa01      	add	r2, sp, #4
1000974c:	2102      	movs	r1, #2
1000974e:	7211      	strb	r1, [r2, #8]
	features.bond = slave_sec_req->bond;
10009750:	78e1      	ldrb	r1, [r4, #3]
10009752:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
10009754:	2101      	movs	r1, #1
10009756:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
10009758:	3103      	adds	r1, #3
1000975a:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000975c:	001f      	movs	r7, r3
1000975e:	015a      	lsls	r2, r3, #5
10009760:	1ad2      	subs	r2, r2, r3
10009762:	0092      	lsls	r2, r2, #2
10009764:	4936      	ldr	r1, [pc, #216]	; (10009840 <ble_slave_security_request_handler+0x1c8>)
10009766:	5c52      	ldrb	r2, [r2, r1]
10009768:	2a02      	cmp	r2, #2
1000976a:	d104      	bne.n	10009776 <ble_slave_security_request_handler+0xfe>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000976c:	aa01      	add	r2, sp, #4
1000976e:	2103      	movs	r1, #3
10009770:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009772:	71d1      	strb	r1, [r2, #7]
10009774:	e003      	b.n	1000977e <ble_slave_security_request_handler+0x106>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
10009776:	aa01      	add	r2, sp, #4
10009778:	2101      	movs	r1, #1
1000977a:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000977c:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000977e:	aa01      	add	r2, sp, #4
10009780:	2110      	movs	r1, #16
10009782:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
10009784:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
10009786:	017a      	lsls	r2, r7, #5
10009788:	1bd2      	subs	r2, r2, r7
1000978a:	0092      	lsls	r2, r2, #2
1000978c:	492c      	ldr	r1, [pc, #176]	; (10009840 <ble_slave_security_request_handler+0x1c8>)
1000978e:	188a      	adds	r2, r1, r2
10009790:	7e12      	ldrb	r2, [r2, #24]
10009792:	2a40      	cmp	r2, #64	; 0x40
10009794:	d134      	bne.n	10009800 <ble_slave_security_request_handler+0x188>
10009796:	015a      	lsls	r2, r3, #5
10009798:	1ad3      	subs	r3, r2, r3
1000979a:	009b      	lsls	r3, r3, #2
1000979c:	469a      	mov	sl, r3
1000979e:	001e      	movs	r6, r3
100097a0:	3660      	adds	r6, #96	; 0x60
100097a2:	1876      	adds	r6, r6, r1
100097a4:	4655      	mov	r5, sl
100097a6:	3568      	adds	r5, #104	; 0x68
100097a8:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
100097aa:	4b2b      	ldr	r3, [pc, #172]	; (10009858 <ble_slave_security_request_handler+0x1e0>)
100097ac:	4699      	mov	r9, r3
100097ae:	230f      	movs	r3, #15
100097b0:	4698      	mov	r8, r3
100097b2:	47c8      	blx	r9
100097b4:	4643      	mov	r3, r8
100097b6:	4018      	ands	r0, r3
100097b8:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
100097ba:	47c8      	blx	r9
100097bc:	4643      	mov	r3, r8
100097be:	4018      	ands	r0, r3
100097c0:	74b0      	strb	r0, [r6, #18]
100097c2:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
100097c4:	42ae      	cmp	r6, r5
100097c6:	d1f4      	bne.n	100097b2 <ble_slave_security_request_handler+0x13a>
100097c8:	4656      	mov	r6, sl
100097ca:	3670      	adds	r6, #112	; 0x70
100097cc:	4a1c      	ldr	r2, [pc, #112]	; (10009840 <ble_slave_security_request_handler+0x1c8>)
100097ce:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
100097d0:	4b21      	ldr	r3, [pc, #132]	; (10009858 <ble_slave_security_request_handler+0x1e0>)
100097d2:	4699      	mov	r9, r3
100097d4:	230f      	movs	r3, #15
100097d6:	4698      	mov	r8, r3
100097d8:	47c8      	blx	r9
100097da:	4643      	mov	r3, r8
100097dc:	4018      	ands	r0, r3
100097de:	7028      	strb	r0, [r5, #0]
100097e0:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
100097e2:	42b5      	cmp	r5, r6
100097e4:	d1f8      	bne.n	100097d8 <ble_slave_security_request_handler+0x160>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
100097e6:	4b1c      	ldr	r3, [pc, #112]	; (10009858 <ble_slave_security_request_handler+0x1e0>)
100097e8:	4798      	blx	r3
100097ea:	017b      	lsls	r3, r7, #5
100097ec:	1bdb      	subs	r3, r3, r7
100097ee:	009b      	lsls	r3, r3, #2
100097f0:	4a13      	ldr	r2, [pc, #76]	; (10009840 <ble_slave_security_request_handler+0x1c8>)
100097f2:	18d3      	adds	r3, r2, r3
100097f4:	001a      	movs	r2, r3
100097f6:	3270      	adds	r2, #112	; 0x70
100097f8:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
100097fa:	337a      	adds	r3, #122	; 0x7a
100097fc:	2210      	movs	r2, #16
100097fe:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
10009800:	017a      	lsls	r2, r7, #5
10009802:	1bd7      	subs	r7, r2, r7
10009804:	00bf      	lsls	r7, r7, #2
10009806:	3760      	adds	r7, #96	; 0x60
10009808:	4a0d      	ldr	r2, [pc, #52]	; (10009840 <ble_slave_security_request_handler+0x1c8>)
1000980a:	18ba      	adds	r2, r7, r2
1000980c:	8820      	ldrh	r0, [r4, #0]
1000980e:	2300      	movs	r3, #0
10009810:	a901      	add	r1, sp, #4
10009812:	4c12      	ldr	r4, [pc, #72]	; (1000985c <ble_slave_security_request_handler+0x1e4>)
10009814:	47a0      	blx	r4
10009816:	2800      	cmp	r0, #0
10009818:	d00a      	beq.n	10009830 <ble_slave_security_request_handler+0x1b8>
	{
		features.bond = false;
1000981a:	ab01      	add	r3, sp, #4
1000981c:	2200      	movs	r2, #0
1000981e:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
10009820:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
10009822:	4809      	ldr	r0, [pc, #36]	; (10009848 <ble_slave_security_request_handler+0x1d0>)
10009824:	4b09      	ldr	r3, [pc, #36]	; (1000984c <ble_slave_security_request_handler+0x1d4>)
10009826:	4798      	blx	r3
10009828:	480d      	ldr	r0, [pc, #52]	; (10009860 <ble_slave_security_request_handler+0x1e8>)
1000982a:	4b0a      	ldr	r3, [pc, #40]	; (10009854 <ble_slave_security_request_handler+0x1dc>)
1000982c:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000982e:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
10009830:	b004      	add	sp, #16
10009832:	bc1c      	pop	{r2, r3, r4}
10009834:	4690      	mov	r8, r2
10009836:	4699      	mov	r9, r3
10009838:	46a2      	mov	sl, r4
1000983a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000983c:	10010271 	.word	0x10010271
10009840:	10013ab4 	.word	0x10013ab4
10009844:	1000d76d 	.word	0x1000d76d
10009848:	100114f8 	.word	0x100114f8
1000984c:	100104d9 	.word	0x100104d9
10009850:	10011c4c 	.word	0x10011c4c
10009854:	100103b9 	.word	0x100103b9
10009858:	100104ed 	.word	0x100104ed
1000985c:	1000d581 	.word	0x1000d581
10009860:	10011c64 	.word	0x10011c64

10009864 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
10009864:	b5f0      	push	{r4, r5, r6, r7, lr}
10009866:	465f      	mov	r7, fp
10009868:	4656      	mov	r6, sl
1000986a:	464d      	mov	r5, r9
1000986c:	4644      	mov	r4, r8
1000986e:	b4f0      	push	{r4, r5, r6, r7}
10009870:	b085      	sub	sp, #20
10009872:	4683      	mov	fp, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009874:	8804      	ldrh	r4, [r0, #0]
10009876:	4a49      	ldr	r2, [pc, #292]	; (1000999c <ble_pair_request_handler+0x138>)
10009878:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000987a:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000987c:	8910      	ldrh	r0, [r2, #8]
1000987e:	42a0      	cmp	r0, r4
10009880:	d10d      	bne.n	1000989e <ble_pair_request_handler+0x3a>
10009882:	0010      	movs	r0, r2
10009884:	305e      	adds	r0, #94	; 0x5e
10009886:	7800      	ldrb	r0, [r0, #0]
10009888:	2802      	cmp	r0, #2
1000988a:	d108      	bne.n	1000989e <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000988c:	014a      	lsls	r2, r1, #5
1000988e:	1a52      	subs	r2, r2, r1
10009890:	0095      	lsls	r5, r2, #2
10009892:	4a42      	ldr	r2, [pc, #264]	; (1000999c <ble_pair_request_handler+0x138>)
10009894:	1952      	adds	r2, r2, r5
10009896:	325e      	adds	r2, #94	; 0x5e
10009898:	2103      	movs	r1, #3
1000989a:	7011      	strb	r1, [r2, #0]
			break;
1000989c:	e005      	b.n	100098aa <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000989e:	3301      	adds	r3, #1
100098a0:	b2db      	uxtb	r3, r3
100098a2:	3101      	adds	r1, #1
100098a4:	327c      	adds	r2, #124	; 0x7c
100098a6:	2b05      	cmp	r3, #5
100098a8:	d1e8      	bne.n	1000987c <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
100098aa:	aa01      	add	r2, sp, #4
100098ac:	2102      	movs	r1, #2
100098ae:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
100098b0:	3901      	subs	r1, #1
100098b2:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
100098b4:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
100098b6:	2100      	movs	r1, #0
100098b8:	7011      	strb	r1, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
100098ba:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
100098bc:	001f      	movs	r7, r3
100098be:	015a      	lsls	r2, r3, #5
100098c0:	1ad2      	subs	r2, r2, r3
100098c2:	0092      	lsls	r2, r2, #2
100098c4:	4935      	ldr	r1, [pc, #212]	; (1000999c <ble_pair_request_handler+0x138>)
100098c6:	5c52      	ldrb	r2, [r2, r1]
100098c8:	2a02      	cmp	r2, #2
100098ca:	d104      	bne.n	100098d6 <ble_pair_request_handler+0x72>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
100098cc:	aa01      	add	r2, sp, #4
100098ce:	2103      	movs	r1, #3
100098d0:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
100098d2:	71d1      	strb	r1, [r2, #7]
100098d4:	e003      	b.n	100098de <ble_pair_request_handler+0x7a>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
100098d6:	aa01      	add	r2, sp, #4
100098d8:	2101      	movs	r1, #1
100098da:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
100098dc:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
100098de:	aa01      	add	r2, sp, #4
100098e0:	2110      	movs	r1, #16
100098e2:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
100098e4:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
100098e6:	017a      	lsls	r2, r7, #5
100098e8:	1bd2      	subs	r2, r2, r7
100098ea:	0092      	lsls	r2, r2, #2
100098ec:	492b      	ldr	r1, [pc, #172]	; (1000999c <ble_pair_request_handler+0x138>)
100098ee:	188a      	adds	r2, r1, r2
100098f0:	7e12      	ldrb	r2, [r2, #24]
100098f2:	2a40      	cmp	r2, #64	; 0x40
100098f4:	d131      	bne.n	1000995a <ble_pair_request_handler+0xf6>
100098f6:	015a      	lsls	r2, r3, #5
100098f8:	1ad3      	subs	r3, r2, r3
100098fa:	009b      	lsls	r3, r3, #2
100098fc:	469a      	mov	sl, r3
100098fe:	001d      	movs	r5, r3
10009900:	3560      	adds	r5, #96	; 0x60
10009902:	186d      	adds	r5, r5, r1
10009904:	4654      	mov	r4, sl
10009906:	3468      	adds	r4, #104	; 0x68
10009908:	1864      	adds	r4, r4, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000990a:	4b25      	ldr	r3, [pc, #148]	; (100099a0 <ble_pair_request_handler+0x13c>)
1000990c:	4699      	mov	r9, r3
1000990e:	260f      	movs	r6, #15
10009910:	47c8      	blx	r9
10009912:	4030      	ands	r0, r6
10009914:	7028      	strb	r0, [r5, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
10009916:	47c8      	blx	r9
10009918:	4030      	ands	r0, r6
1000991a:	74a8      	strb	r0, [r5, #18]
1000991c:	3501      	adds	r5, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000991e:	42a5      	cmp	r5, r4
10009920:	d1f6      	bne.n	10009910 <ble_pair_request_handler+0xac>
10009922:	4655      	mov	r5, sl
10009924:	3570      	adds	r5, #112	; 0x70
10009926:	4a1d      	ldr	r2, [pc, #116]	; (1000999c <ble_pair_request_handler+0x138>)
10009928:	18ad      	adds	r5, r5, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000992a:	4b1d      	ldr	r3, [pc, #116]	; (100099a0 <ble_pair_request_handler+0x13c>)
1000992c:	4699      	mov	r9, r3
1000992e:	230f      	movs	r3, #15
10009930:	4698      	mov	r8, r3
10009932:	47c8      	blx	r9
10009934:	4643      	mov	r3, r8
10009936:	4018      	ands	r0, r3
10009938:	7020      	strb	r0, [r4, #0]
1000993a:	3401      	adds	r4, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000993c:	42ac      	cmp	r4, r5
1000993e:	d1f8      	bne.n	10009932 <ble_pair_request_handler+0xce>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
10009940:	4b17      	ldr	r3, [pc, #92]	; (100099a0 <ble_pair_request_handler+0x13c>)
10009942:	4798      	blx	r3
10009944:	017b      	lsls	r3, r7, #5
10009946:	1bdb      	subs	r3, r3, r7
10009948:	009b      	lsls	r3, r3, #2
1000994a:	4a14      	ldr	r2, [pc, #80]	; (1000999c <ble_pair_request_handler+0x138>)
1000994c:	18d3      	adds	r3, r2, r3
1000994e:	001a      	movs	r2, r3
10009950:	3270      	adds	r2, #112	; 0x70
10009952:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
10009954:	337a      	adds	r3, #122	; 0x7a
10009956:	2210      	movs	r2, #16
10009958:	701a      	strb	r2, [r3, #0]
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000995a:	017a      	lsls	r2, r7, #5
1000995c:	1bd7      	subs	r7, r2, r7
1000995e:	00bf      	lsls	r7, r7, #2
10009960:	3760      	adds	r7, #96	; 0x60
10009962:	4a0e      	ldr	r2, [pc, #56]	; (1000999c <ble_pair_request_handler+0x138>)
10009964:	18ba      	adds	r2, r7, r2
10009966:	465b      	mov	r3, fp
10009968:	8818      	ldrh	r0, [r3, #0]
1000996a:	2300      	movs	r3, #0
1000996c:	a901      	add	r1, sp, #4
1000996e:	4c0d      	ldr	r4, [pc, #52]	; (100099a4 <ble_pair_request_handler+0x140>)
10009970:	47a0      	blx	r4
10009972:	2800      	cmp	r0, #0
10009974:	d00a      	beq.n	1000998c <ble_pair_request_handler+0x128>
	{
		features.bond = false;
10009976:	ab01      	add	r3, sp, #4
10009978:	2200      	movs	r2, #0
1000997a:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000997c:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000997e:	480a      	ldr	r0, [pc, #40]	; (100099a8 <ble_pair_request_handler+0x144>)
10009980:	4b0a      	ldr	r3, [pc, #40]	; (100099ac <ble_pair_request_handler+0x148>)
10009982:	4798      	blx	r3
10009984:	480a      	ldr	r0, [pc, #40]	; (100099b0 <ble_pair_request_handler+0x14c>)
10009986:	4b0b      	ldr	r3, [pc, #44]	; (100099b4 <ble_pair_request_handler+0x150>)
10009988:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000998a:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000998c:	b005      	add	sp, #20
1000998e:	bc3c      	pop	{r2, r3, r4, r5}
10009990:	4690      	mov	r8, r2
10009992:	4699      	mov	r9, r3
10009994:	46a2      	mov	sl, r4
10009996:	46ab      	mov	fp, r5
10009998:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000999a:	46c0      	nop			; (mov r8, r8)
1000999c:	10013ab4 	.word	0x10013ab4
100099a0:	100104ed 	.word	0x100104ed
100099a4:	1000d581 	.word	0x1000d581
100099a8:	100114f8 	.word	0x100114f8
100099ac:	100104d9 	.word	0x100104d9
100099b0:	10011c90 	.word	0x10011c90
100099b4:	100103b9 	.word	0x100103b9

100099b8 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
100099b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100099ba:	b085      	sub	sp, #20
100099bc:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
100099be:	2206      	movs	r2, #6
100099c0:	493d      	ldr	r1, [pc, #244]	; (10009ab8 <ble_pair_key_request_handler+0x100>)
100099c2:	a802      	add	r0, sp, #8
100099c4:	4e3d      	ldr	r6, [pc, #244]	; (10009abc <ble_pair_key_request_handler+0x104>)
100099c6:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
100099c8:	ac01      	add	r4, sp, #4
100099ca:	2204      	movs	r2, #4
100099cc:	0029      	movs	r1, r5
100099ce:	0020      	movs	r0, r4
100099d0:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
100099d2:	78e3      	ldrb	r3, [r4, #3]
100099d4:	2b00      	cmp	r3, #0
100099d6:	d162      	bne.n	10009a9e <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
100099d8:	4839      	ldr	r0, [pc, #228]	; (10009ac0 <ble_pair_key_request_handler+0x108>)
100099da:	4b3a      	ldr	r3, [pc, #232]	; (10009ac4 <ble_pair_key_request_handler+0x10c>)
100099dc:	4798      	blx	r3
100099de:	483a      	ldr	r0, [pc, #232]	; (10009ac8 <ble_pair_key_request_handler+0x110>)
100099e0:	4b3a      	ldr	r3, [pc, #232]	; (10009acc <ble_pair_key_request_handler+0x114>)
100099e2:	4798      	blx	r3
100099e4:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
100099e6:	4c3a      	ldr	r4, [pc, #232]	; (10009ad0 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
100099e8:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
100099ea:	201e      	movs	r0, #30
100099ec:	47a0      	blx	r4
100099ee:	b2c3      	uxtb	r3, r0

			if (!pin) {
100099f0:	2b00      	cmp	r3, #0
100099f2:	d11a      	bne.n	10009a2a <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
100099f4:	4f32      	ldr	r7, [pc, #200]	; (10009ac0 <ble_pair_key_request_handler+0x108>)
100099f6:	0038      	movs	r0, r7
100099f8:	4e32      	ldr	r6, [pc, #200]	; (10009ac4 <ble_pair_key_request_handler+0x10c>)
100099fa:	47b0      	blx	r6
100099fc:	4835      	ldr	r0, [pc, #212]	; (10009ad4 <ble_pair_key_request_handler+0x11c>)
100099fe:	4c33      	ldr	r4, [pc, #204]	; (10009acc <ble_pair_key_request_handler+0x114>)
10009a00:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
10009a02:	0038      	movs	r0, r7
10009a04:	47b0      	blx	r6
10009a06:	4834      	ldr	r0, [pc, #208]	; (10009ad8 <ble_pair_key_request_handler+0x120>)
10009a08:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
10009a0a:	8828      	ldrh	r0, [r5, #0]
10009a0c:	2113      	movs	r1, #19
10009a0e:	4b33      	ldr	r3, [pc, #204]	; (10009adc <ble_pair_key_request_handler+0x124>)
10009a10:	4798      	blx	r3
10009a12:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
10009a14:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
10009a16:	2b00      	cmp	r3, #0
10009a18:	d04c      	beq.n	10009ab4 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
10009a1a:	4829      	ldr	r0, [pc, #164]	; (10009ac0 <ble_pair_key_request_handler+0x108>)
10009a1c:	4b29      	ldr	r3, [pc, #164]	; (10009ac4 <ble_pair_key_request_handler+0x10c>)
10009a1e:	4798      	blx	r3
10009a20:	482f      	ldr	r0, [pc, #188]	; (10009ae0 <ble_pair_key_request_handler+0x128>)
10009a22:	4b2a      	ldr	r3, [pc, #168]	; (10009acc <ble_pair_key_request_handler+0x114>)
10009a24:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
10009a26:	20e2      	movs	r0, #226	; 0xe2
10009a28:	e044      	b.n	10009ab4 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
10009a2a:	001a      	movs	r2, r3
10009a2c:	3a30      	subs	r2, #48	; 0x30
10009a2e:	2a09      	cmp	r2, #9
10009a30:	d8db      	bhi.n	100099ea <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
10009a32:	aa02      	add	r2, sp, #8
10009a34:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
10009a36:	4038      	ands	r0, r7
10009a38:	4b2a      	ldr	r3, [pc, #168]	; (10009ae4 <ble_pair_key_request_handler+0x12c>)
10009a3a:	4798      	blx	r3
10009a3c:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
10009a3e:	2e06      	cmp	r6, #6
10009a40:	d026      	beq.n	10009a90 <ble_pair_key_request_handler+0xd8>
10009a42:	e7d2      	b.n	100099ea <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
10009a44:	481e      	ldr	r0, [pc, #120]	; (10009ac0 <ble_pair_key_request_handler+0x108>)
10009a46:	4b1f      	ldr	r3, [pc, #124]	; (10009ac4 <ble_pair_key_request_handler+0x10c>)
10009a48:	4798      	blx	r3
10009a4a:	4827      	ldr	r0, [pc, #156]	; (10009ae8 <ble_pair_key_request_handler+0x130>)
10009a4c:	4b1f      	ldr	r3, [pc, #124]	; (10009acc <ble_pair_key_request_handler+0x114>)
10009a4e:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
10009a50:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
10009a52:	4e24      	ldr	r6, [pc, #144]	; (10009ae4 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
10009a54:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
10009a56:	5ce0      	ldrb	r0, [r4, r3]
10009a58:	47b0      	blx	r6
10009a5a:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
10009a5c:	2c06      	cmp	r4, #6
10009a5e:	d1f9      	bne.n	10009a54 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
10009a60:	ab01      	add	r3, sp, #4
10009a62:	7899      	ldrb	r1, [r3, #2]
10009a64:	8828      	ldrh	r0, [r5, #0]
10009a66:	aa02      	add	r2, sp, #8
10009a68:	4b20      	ldr	r3, [pc, #128]	; (10009aec <ble_pair_key_request_handler+0x134>)
10009a6a:	4798      	blx	r3
10009a6c:	2800      	cmp	r0, #0
10009a6e:	d021      	beq.n	10009ab4 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
10009a70:	4813      	ldr	r0, [pc, #76]	; (10009ac0 <ble_pair_key_request_handler+0x108>)
10009a72:	4b14      	ldr	r3, [pc, #80]	; (10009ac4 <ble_pair_key_request_handler+0x10c>)
10009a74:	4798      	blx	r3
10009a76:	481e      	ldr	r0, [pc, #120]	; (10009af0 <ble_pair_key_request_handler+0x138>)
10009a78:	4b14      	ldr	r3, [pc, #80]	; (10009acc <ble_pair_key_request_handler+0x114>)
10009a7a:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
10009a7c:	2000      	movs	r0, #0
10009a7e:	e019      	b.n	10009ab4 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
10009a80:	480f      	ldr	r0, [pc, #60]	; (10009ac0 <ble_pair_key_request_handler+0x108>)
10009a82:	4b10      	ldr	r3, [pc, #64]	; (10009ac4 <ble_pair_key_request_handler+0x10c>)
10009a84:	4798      	blx	r3
10009a86:	481b      	ldr	r0, [pc, #108]	; (10009af4 <ble_pair_key_request_handler+0x13c>)
10009a88:	4b10      	ldr	r3, [pc, #64]	; (10009acc <ble_pair_key_request_handler+0x114>)
10009a8a:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
10009a8c:	2000      	movs	r0, #0
10009a8e:	e011      	b.n	10009ab4 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
10009a90:	480b      	ldr	r0, [pc, #44]	; (10009ac0 <ble_pair_key_request_handler+0x108>)
10009a92:	4b0c      	ldr	r3, [pc, #48]	; (10009ac4 <ble_pair_key_request_handler+0x10c>)
10009a94:	4798      	blx	r3
10009a96:	4818      	ldr	r0, [pc, #96]	; (10009af8 <ble_pair_key_request_handler+0x140>)
10009a98:	4b0c      	ldr	r3, [pc, #48]	; (10009acc <ble_pair_key_request_handler+0x114>)
10009a9a:	4798      	blx	r3
10009a9c:	e7d8      	b.n	10009a50 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
10009a9e:	ab01      	add	r3, sp, #4
10009aa0:	885a      	ldrh	r2, [r3, #2]
10009aa2:	2380      	movs	r3, #128	; 0x80
10009aa4:	005b      	lsls	r3, r3, #1
10009aa6:	429a      	cmp	r2, r3
10009aa8:	d0cc      	beq.n	10009a44 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
10009aaa:	ab01      	add	r3, sp, #4
10009aac:	789b      	ldrb	r3, [r3, #2]
10009aae:	2b01      	cmp	r3, #1
10009ab0:	d0e6      	beq.n	10009a80 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
10009ab2:	2000      	movs	r0, #0
}
10009ab4:	b005      	add	sp, #20
10009ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009ab8:	10011a44 	.word	0x10011a44
10009abc:	1001025f 	.word	0x1001025f
10009ac0:	100114f8 	.word	0x100114f8
10009ac4:	100104d9 	.word	0x100104d9
10009ac8:	10011cb8 	.word	0x10011cb8
10009acc:	100103b9 	.word	0x100103b9
10009ad0:	1000a5d1 	.word	0x1000a5d1
10009ad4:	10011ce0 	.word	0x10011ce0
10009ad8:	10011cec 	.word	0x10011cec
10009adc:	1000d215 	.word	0x1000d215
10009ae0:	10011bd4 	.word	0x10011bd4
10009ae4:	100103ed 	.word	0x100103ed
10009ae8:	10011d00 	.word	0x10011d00
10009aec:	1000d6b1 	.word	0x1000d6b1
10009af0:	10011d38 	.word	0x10011d38
10009af4:	10011d50 	.word	0x10011d50
10009af8:	10011d6c 	.word	0x10011d6c

10009afc <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
10009afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009afe:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
10009b00:	8805      	ldrh	r5, [r0, #0]
10009b02:	4b2f      	ldr	r3, [pc, #188]	; (10009bc0 <ble_encryption_request_handler+0xc4>)
10009b04:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009b06:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
10009b08:	0010      	movs	r0, r2
10009b0a:	8919      	ldrh	r1, [r3, #8]
10009b0c:	42a9      	cmp	r1, r5
10009b0e:	d116      	bne.n	10009b3e <ble_encryption_request_handler+0x42>
10009b10:	0019      	movs	r1, r3
10009b12:	315e      	adds	r1, #94	; 0x5e
10009b14:	7809      	ldrb	r1, [r1, #0]
10009b16:	2901      	cmp	r1, #1
10009b18:	d911      	bls.n	10009b3e <ble_encryption_request_handler+0x42>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
10009b1a:	4929      	ldr	r1, [pc, #164]	; (10009bc0 <ble_encryption_request_handler+0xc4>)
10009b1c:	0152      	lsls	r2, r2, #5
10009b1e:	1a10      	subs	r0, r2, r0
10009b20:	0080      	lsls	r0, r0, #2
10009b22:	1808      	adds	r0, r1, r0
10009b24:	305e      	adds	r0, #94	; 0x5e
10009b26:	2306      	movs	r3, #6
10009b28:	7003      	strb	r3, [r0, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
10009b2a:	0162      	lsls	r2, r4, #5
10009b2c:	1b13      	subs	r3, r2, r4
10009b2e:	009b      	lsls	r3, r3, #2
10009b30:	18cb      	adds	r3, r1, r3
10009b32:	3370      	adds	r3, #112	; 0x70
10009b34:	881a      	ldrh	r2, [r3, #0]
10009b36:	8873      	ldrh	r3, [r6, #2]
10009b38:	429a      	cmp	r2, r3
10009b3a:	d113      	bne.n	10009b64 <ble_encryption_request_handler+0x68>
10009b3c:	e006      	b.n	10009b4c <ble_encryption_request_handler+0x50>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009b3e:	3401      	adds	r4, #1
10009b40:	b2e4      	uxtb	r4, r4
10009b42:	3201      	adds	r2, #1
10009b44:	337c      	adds	r3, #124	; 0x7c
10009b46:	2c05      	cmp	r4, #5
10009b48:	d1de      	bne.n	10009b08 <ble_encryption_request_handler+0xc>
10009b4a:	e00b      	b.n	10009b64 <ble_encryption_request_handler+0x68>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
10009b4c:	0161      	lsls	r1, r4, #5
10009b4e:	1b09      	subs	r1, r1, r4
10009b50:	0089      	lsls	r1, r1, #2
10009b52:	4b1b      	ldr	r3, [pc, #108]	; (10009bc0 <ble_encryption_request_handler+0xc4>)
10009b54:	1859      	adds	r1, r3, r1
10009b56:	3172      	adds	r1, #114	; 0x72
10009b58:	1d30      	adds	r0, r6, #4
10009b5a:	2208      	movs	r2, #8
10009b5c:	4b19      	ldr	r3, [pc, #100]	; (10009bc4 <ble_encryption_request_handler+0xc8>)
10009b5e:	4798      	blx	r3
			DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
10009b60:	2800      	cmp	r0, #0
10009b62:	d015      	beq.n	10009b90 <ble_encryption_request_handler+0x94>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
10009b64:	4f18      	ldr	r7, [pc, #96]	; (10009bc8 <ble_encryption_request_handler+0xcc>)
10009b66:	0038      	movs	r0, r7
10009b68:	4e18      	ldr	r6, [pc, #96]	; (10009bcc <ble_encryption_request_handler+0xd0>)
10009b6a:	47b0      	blx	r6
10009b6c:	4818      	ldr	r0, [pc, #96]	; (10009bd0 <ble_encryption_request_handler+0xd4>)
10009b6e:	4d19      	ldr	r5, [pc, #100]	; (10009bd4 <ble_encryption_request_handler+0xd8>)
10009b70:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
10009b72:	0038      	movs	r0, r7
10009b74:	47b0      	blx	r6
10009b76:	4818      	ldr	r0, [pc, #96]	; (10009bd8 <ble_encryption_request_handler+0xdc>)
10009b78:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
10009b7a:	0163      	lsls	r3, r4, #5
10009b7c:	1b1c      	subs	r4, r3, r4
10009b7e:	00a4      	lsls	r4, r4, #2
10009b80:	4b0f      	ldr	r3, [pc, #60]	; (10009bc0 <ble_encryption_request_handler+0xc4>)
10009b82:	191c      	adds	r4, r3, r4
10009b84:	8920      	ldrh	r0, [r4, #8]
10009b86:	2105      	movs	r1, #5
10009b88:	4b14      	ldr	r3, [pc, #80]	; (10009bdc <ble_encryption_request_handler+0xe0>)
10009b8a:	4798      	blx	r3
		return AT_BLE_FAILURE;
10009b8c:	20e2      	movs	r0, #226	; 0xe2
10009b8e:	e016      	b.n	10009bbe <ble_encryption_request_handler+0xc2>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
10009b90:	0162      	lsls	r2, r4, #5
10009b92:	1b13      	subs	r3, r2, r4
10009b94:	009b      	lsls	r3, r3, #2
10009b96:	3360      	adds	r3, #96	; 0x60
10009b98:	4909      	ldr	r1, [pc, #36]	; (10009bc0 <ble_encryption_request_handler+0xc4>)
10009b9a:	185b      	adds	r3, r3, r1
10009b9c:	1b14      	subs	r4, r2, r4
10009b9e:	00a4      	lsls	r4, r4, #2
10009ba0:	190c      	adds	r4, r1, r4
10009ba2:	7d21      	ldrb	r1, [r4, #20]
10009ba4:	8830      	ldrh	r0, [r6, #0]
10009ba6:	2201      	movs	r2, #1
10009ba8:	4c0d      	ldr	r4, [pc, #52]	; (10009be0 <ble_encryption_request_handler+0xe4>)
10009baa:	47a0      	blx	r4
10009bac:	2800      	cmp	r0, #0
10009bae:	d006      	beq.n	10009bbe <ble_encryption_request_handler+0xc2>
	{
		DBG_LOG("Encryption Request Reply Failed");
10009bb0:	4805      	ldr	r0, [pc, #20]	; (10009bc8 <ble_encryption_request_handler+0xcc>)
10009bb2:	4b06      	ldr	r3, [pc, #24]	; (10009bcc <ble_encryption_request_handler+0xd0>)
10009bb4:	4798      	blx	r3
10009bb6:	480b      	ldr	r0, [pc, #44]	; (10009be4 <ble_encryption_request_handler+0xe8>)
10009bb8:	4b06      	ldr	r3, [pc, #24]	; (10009bd4 <ble_encryption_request_handler+0xd8>)
10009bba:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
10009bbc:	2000      	movs	r0, #0
}
10009bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009bc0:	10013ab4 	.word	0x10013ab4
10009bc4:	10010241 	.word	0x10010241
10009bc8:	100114f8 	.word	0x100114f8
10009bcc:	100104d9 	.word	0x100104d9
10009bd0:	10011d80 	.word	0x10011d80
10009bd4:	100103b9 	.word	0x100103b9
10009bd8:	10011db8 	.word	0x10011db8
10009bdc:	1000d215 	.word	0x1000d215
10009be0:	1000d7e5 	.word	0x1000d7e5
10009be4:	10011e10 	.word	0x10011e10

10009be8 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
10009be8:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
10009bea:	2a00      	cmp	r2, #0
10009bec:	d047      	beq.n	10009c7e <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
10009bee:	2906      	cmp	r1, #6
10009bf0:	d847      	bhi.n	10009c82 <ble_mgr_events_callback_handler+0x9a>
10009bf2:	0089      	lsls	r1, r1, #2
10009bf4:	4b28      	ldr	r3, [pc, #160]	; (10009c98 <ble_mgr_events_callback_handler+0xb0>)
10009bf6:	585b      	ldr	r3, [r3, r1]
10009bf8:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
10009bfa:	4b28      	ldr	r3, [pc, #160]	; (10009c9c <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
10009bfc:	2405      	movs	r4, #5
10009bfe:	e00a      	b.n	10009c16 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
10009c00:	4b27      	ldr	r3, [pc, #156]	; (10009ca0 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
10009c02:	2401      	movs	r4, #1
			}
			break;
10009c04:	e007      	b.n	10009c16 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
10009c06:	4b27      	ldr	r3, [pc, #156]	; (10009ca4 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
10009c08:	2405      	movs	r4, #5
			}
			break;
10009c0a:	e004      	b.n	10009c16 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
10009c0c:	4b26      	ldr	r3, [pc, #152]	; (10009ca8 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
10009c0e:	2401      	movs	r4, #1
			}
			break;
10009c10:	e001      	b.n	10009c16 <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
10009c12:	4b26      	ldr	r3, [pc, #152]	; (10009cac <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
10009c14:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
10009c16:	2800      	cmp	r0, #0
10009c18:	d116      	bne.n	10009c48 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
10009c1a:	6819      	ldr	r1, [r3, #0]
10009c1c:	2900      	cmp	r1, #0
10009c1e:	d10b      	bne.n	10009c38 <ble_mgr_events_callback_handler+0x50>
10009c20:	e006      	b.n	10009c30 <ble_mgr_events_callback_handler+0x48>
10009c22:	001d      	movs	r5, r3
10009c24:	3304      	adds	r3, #4
10009c26:	1f18      	subs	r0, r3, #4
10009c28:	6800      	ldr	r0, [r0, #0]
10009c2a:	2800      	cmp	r0, #0
10009c2c:	d106      	bne.n	10009c3c <ble_mgr_events_callback_handler+0x54>
10009c2e:	e000      	b.n	10009c32 <ble_mgr_events_callback_handler+0x4a>
10009c30:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
10009c32:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
10009c34:	2101      	movs	r1, #1
						break;
10009c36:	e02c      	b.n	10009c92 <ble_mgr_events_callback_handler+0xaa>
10009c38:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
10009c3a:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
10009c3c:	3101      	adds	r1, #1
10009c3e:	b2c9      	uxtb	r1, r1
10009c40:	42a1      	cmp	r1, r4
10009c42:	d3ee      	bcc.n	10009c22 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
10009c44:	2100      	movs	r1, #0
10009c46:	e024      	b.n	10009c92 <ble_mgr_events_callback_handler+0xaa>
10009c48:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
10009c4a:	2801      	cmp	r0, #1
10009c4c:	d121      	bne.n	10009c92 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
10009c4e:	6819      	ldr	r1, [r3, #0]
10009c50:	428a      	cmp	r2, r1
10009c52:	d10c      	bne.n	10009c6e <ble_mgr_events_callback_handler+0x86>
10009c54:	e006      	b.n	10009c64 <ble_mgr_events_callback_handler+0x7c>
10009c56:	001d      	movs	r5, r3
10009c58:	3304      	adds	r3, #4
10009c5a:	1f18      	subs	r0, r3, #4
10009c5c:	6800      	ldr	r0, [r0, #0]
10009c5e:	4282      	cmp	r2, r0
10009c60:	d107      	bne.n	10009c72 <ble_mgr_events_callback_handler+0x8a>
10009c62:	e000      	b.n	10009c66 <ble_mgr_events_callback_handler+0x7e>
10009c64:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
10009c66:	2300      	movs	r3, #0
10009c68:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
10009c6a:	2101      	movs	r1, #1
						break;
10009c6c:	e011      	b.n	10009c92 <ble_mgr_events_callback_handler+0xaa>
10009c6e:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
10009c70:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
10009c72:	3101      	adds	r1, #1
10009c74:	b2c9      	uxtb	r1, r1
10009c76:	42a1      	cmp	r1, r4
10009c78:	d3ed      	bcc.n	10009c56 <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
10009c7a:	2100      	movs	r1, #0
10009c7c:	e009      	b.n	10009c92 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
10009c7e:	2100      	movs	r1, #0
10009c80:	e007      	b.n	10009c92 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
10009c82:	2100      	movs	r1, #0
10009c84:	e005      	b.n	10009c92 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
10009c86:	4b0a      	ldr	r3, [pc, #40]	; (10009cb0 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
10009c88:	2405      	movs	r4, #5
10009c8a:	e7c4      	b.n	10009c16 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
10009c8c:	4b09      	ldr	r3, [pc, #36]	; (10009cb4 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
10009c8e:	2401      	movs	r4, #1
10009c90:	e7c1      	b.n	10009c16 <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
10009c92:	0008      	movs	r0, r1
10009c94:	bd30      	pop	{r4, r5, pc}
10009c96:	46c0      	nop			; (mov r8, r8)
10009c98:	10011938 	.word	0x10011938
10009c9c:	10013aa0 	.word	0x10013aa0
10009ca0:	10013a9c 	.word	0x10013a9c
10009ca4:	10013d24 	.word	0x10013d24
10009ca8:	100142d8 	.word	0x100142d8
10009cac:	10013d38 	.word	0x10013d38
10009cb0:	10013d4c 	.word	0x10013d4c
10009cb4:	10013d94 	.word	0x10013d94

10009cb8 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
10009cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
10009cba:	465f      	mov	r7, fp
10009cbc:	4656      	mov	r6, sl
10009cbe:	464d      	mov	r5, r9
10009cc0:	4644      	mov	r4, r8
10009cc2:	b4f0      	push	{r4, r5, r6, r7}
10009cc4:	b091      	sub	sp, #68	; 0x44
10009cc6:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
10009cc8:	2400      	movs	r4, #0
10009cca:	4b7a      	ldr	r3, [pc, #488]	; (10009eb4 <ble_device_init+0x1fc>)
10009ccc:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
10009cce:	2207      	movs	r2, #7
10009cd0:	2100      	movs	r1, #0
10009cd2:	4879      	ldr	r0, [pc, #484]	; (10009eb8 <ble_device_init+0x200>)
10009cd4:	4e79      	ldr	r6, [pc, #484]	; (10009ebc <ble_device_init+0x204>)
10009cd6:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
10009cd8:	2212      	movs	r2, #18
10009cda:	2100      	movs	r1, #0
10009cdc:	4878      	ldr	r0, [pc, #480]	; (10009ec0 <ble_device_init+0x208>)
10009cde:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
#endif

	scan_response_count = 0;
10009ce0:	4b78      	ldr	r3, [pc, #480]	; (10009ec4 <ble_device_init+0x20c>)
10009ce2:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
10009ce4:	22cd      	movs	r2, #205	; 0xcd
10009ce6:	0092      	lsls	r2, r2, #2
10009ce8:	2100      	movs	r1, #0
10009cea:	4877      	ldr	r0, [pc, #476]	; (10009ec8 <ble_device_init+0x210>)
10009cec:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
10009cee:	4b77      	ldr	r3, [pc, #476]	; (10009ecc <ble_device_init+0x214>)
10009cf0:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
10009cf2:	2283      	movs	r2, #131	; 0x83
10009cf4:	0092      	lsls	r2, r2, #2
10009cf6:	2100      	movs	r1, #0
10009cf8:	4875      	ldr	r0, [pc, #468]	; (10009ed0 <ble_device_init+0x218>)
10009cfa:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
10009cfc:	4b75      	ldr	r3, [pc, #468]	; (10009ed4 <ble_device_init+0x21c>)
10009cfe:	469b      	mov	fp, r3
10009d00:	2380      	movs	r3, #128	; 0x80
10009d02:	00db      	lsls	r3, r3, #3
10009d04:	469a      	mov	sl, r3
10009d06:	001a      	movs	r2, r3
10009d08:	2100      	movs	r1, #0
10009d0a:	4658      	mov	r0, fp
10009d0c:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
10009d0e:	4b72      	ldr	r3, [pc, #456]	; (10009ed8 <ble_device_init+0x220>)
10009d10:	4699      	mov	r9, r3
10009d12:	2380      	movs	r3, #128	; 0x80
10009d14:	015b      	lsls	r3, r3, #5
10009d16:	4698      	mov	r8, r3
10009d18:	001a      	movs	r2, r3
10009d1a:	2100      	movs	r1, #0
10009d1c:	4648      	mov	r0, r9
10009d1e:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
10009d20:	4f6e      	ldr	r7, [pc, #440]	; (10009edc <ble_device_init+0x224>)
10009d22:	221c      	movs	r2, #28
10009d24:	2100      	movs	r1, #0
10009d26:	0038      	movs	r0, r7
10009d28:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
10009d2a:	465b      	mov	r3, fp
10009d2c:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
10009d2e:	4653      	mov	r3, sl
10009d30:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
10009d32:	464b      	mov	r3, r9
10009d34:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
10009d36:	4643      	mov	r3, r8
10009d38:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
10009d3a:	4b69      	ldr	r3, [pc, #420]	; (10009ee0 <ble_device_init+0x228>)
10009d3c:	601c      	str	r4, [r3, #0]
10009d3e:	605c      	str	r4, [r3, #4]
10009d40:	609c      	str	r4, [r3, #8]
10009d42:	60dc      	str	r4, [r3, #12]
10009d44:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
10009d46:	4b67      	ldr	r3, [pc, #412]	; (10009ee4 <ble_device_init+0x22c>)
10009d48:	601c      	str	r4, [r3, #0]
10009d4a:	605c      	str	r4, [r3, #4]
10009d4c:	609c      	str	r4, [r3, #8]
10009d4e:	60dc      	str	r4, [r3, #12]
10009d50:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
10009d52:	4b65      	ldr	r3, [pc, #404]	; (10009ee8 <ble_device_init+0x230>)
10009d54:	601c      	str	r4, [r3, #0]
10009d56:	605c      	str	r4, [r3, #4]
10009d58:	609c      	str	r4, [r3, #8]
10009d5a:	60dc      	str	r4, [r3, #12]
10009d5c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
10009d5e:	4b63      	ldr	r3, [pc, #396]	; (10009eec <ble_device_init+0x234>)
10009d60:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
10009d62:	4b63      	ldr	r3, [pc, #396]	; (10009ef0 <ble_device_init+0x238>)
10009d64:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
10009d66:	4b63      	ldr	r3, [pc, #396]	; (10009ef4 <ble_device_init+0x23c>)
10009d68:	601c      	str	r4, [r3, #0]
10009d6a:	605c      	str	r4, [r3, #4]
10009d6c:	609c      	str	r4, [r3, #8]
10009d6e:	60dc      	str	r4, [r3, #12]
10009d70:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
10009d72:	4b61      	ldr	r3, [pc, #388]	; (10009ef8 <ble_device_init+0x240>)
10009d74:	601c      	str	r4, [r3, #0]
10009d76:	4c61      	ldr	r4, [pc, #388]	; (10009efc <ble_device_init+0x244>)
10009d78:	239b      	movs	r3, #155	; 0x9b
10009d7a:	009b      	lsls	r3, r3, #2
10009d7c:	4698      	mov	r8, r3
10009d7e:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
10009d80:	4f4e      	ldr	r7, [pc, #312]	; (10009ebc <ble_device_init+0x204>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
10009d82:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
10009d84:	227c      	movs	r2, #124	; 0x7c
10009d86:	2100      	movs	r1, #0
10009d88:	0020      	movs	r0, r4
10009d8a:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009d8c:	0023      	movs	r3, r4
10009d8e:	335e      	adds	r3, #94	; 0x5e
10009d90:	2200      	movs	r2, #0
10009d92:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
10009d94:	7626      	strb	r6, [r4, #24]
10009d96:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009d98:	45a0      	cmp	r8, r4
10009d9a:	d1f3      	bne.n	10009d84 <ble_device_init+0xcc>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
10009d9c:	4b58      	ldr	r3, [pc, #352]	; (10009f00 <ble_device_init+0x248>)
10009d9e:	701a      	strb	r2, [r3, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing SAMB11");
10009da0:	4858      	ldr	r0, [pc, #352]	; (10009f04 <ble_device_init+0x24c>)
10009da2:	4b59      	ldr	r3, [pc, #356]	; (10009f08 <ble_device_init+0x250>)
10009da4:	4798      	blx	r3
10009da6:	4859      	ldr	r0, [pc, #356]	; (10009f0c <ble_device_init+0x254>)
10009da8:	4b59      	ldr	r3, [pc, #356]	; (10009f10 <ble_device_init+0x258>)
10009daa:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
10009dac:	484b      	ldr	r0, [pc, #300]	; (10009edc <ble_device_init+0x224>)
10009dae:	4b59      	ldr	r3, [pc, #356]	; (10009f14 <ble_device_init+0x25c>)
10009db0:	4798      	blx	r3
10009db2:	2800      	cmp	r0, #0
10009db4:	d00b      	beq.n	10009dce <ble_device_init+0x116>
	{
		DBG_LOG("SAMB11 Initialization failed");
10009db6:	4e53      	ldr	r6, [pc, #332]	; (10009f04 <ble_device_init+0x24c>)
10009db8:	0030      	movs	r0, r6
10009dba:	4d53      	ldr	r5, [pc, #332]	; (10009f08 <ble_device_init+0x250>)
10009dbc:	47a8      	blx	r5
10009dbe:	4856      	ldr	r0, [pc, #344]	; (10009f18 <ble_device_init+0x260>)
10009dc0:	4c53      	ldr	r4, [pc, #332]	; (10009f10 <ble_device_init+0x258>)
10009dc2:	47a0      	blx	r4
		DBG_LOG("Please check the power and connection / hardware connector");	
10009dc4:	0030      	movs	r0, r6
10009dc6:	47a8      	blx	r5
10009dc8:	4854      	ldr	r0, [pc, #336]	; (10009f1c <ble_device_init+0x264>)
10009dca:	47a0      	blx	r4
10009dcc:	e7fe      	b.n	10009dcc <ble_device_init+0x114>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
10009dce:	4a54      	ldr	r2, [pc, #336]	; (10009f20 <ble_device_init+0x268>)
10009dd0:	2100      	movs	r1, #0
10009dd2:	2000      	movs	r0, #0
10009dd4:	4c53      	ldr	r4, [pc, #332]	; (10009f24 <ble_device_init+0x26c>)
10009dd6:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
10009dd8:	4a53      	ldr	r2, [pc, #332]	; (10009f28 <ble_device_init+0x270>)
10009dda:	2102      	movs	r1, #2
10009ddc:	2000      	movs	r0, #0
10009dde:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
10009de0:	2109      	movs	r1, #9
10009de2:	4852      	ldr	r0, [pc, #328]	; (10009f2c <ble_device_init+0x274>)
10009de4:	4b52      	ldr	r3, [pc, #328]	; (10009f30 <ble_device_init+0x278>)
10009de6:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
10009de8:	2800      	cmp	r0, #0
10009dea:	d005      	beq.n	10009df8 <ble_device_init+0x140>
	{
		DBG_LOG("Device name set failed");
10009dec:	4845      	ldr	r0, [pc, #276]	; (10009f04 <ble_device_init+0x24c>)
10009dee:	4b46      	ldr	r3, [pc, #280]	; (10009f08 <ble_device_init+0x250>)
10009df0:	4798      	blx	r3
10009df2:	4850      	ldr	r0, [pc, #320]	; (10009f34 <ble_device_init+0x27c>)
10009df4:	4b46      	ldr	r3, [pc, #280]	; (10009f10 <ble_device_init+0x258>)
10009df6:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
10009df8:	2207      	movs	r2, #7
10009dfa:	494f      	ldr	r1, [pc, #316]	; (10009f38 <ble_device_init+0x280>)
10009dfc:	3108      	adds	r1, #8
10009dfe:	a804      	add	r0, sp, #16
10009e00:	4b4e      	ldr	r3, [pc, #312]	; (10009f3c <ble_device_init+0x284>)
10009e02:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
10009e04:	2226      	movs	r2, #38	; 0x26
10009e06:	2100      	movs	r1, #0
10009e08:	a806      	add	r0, sp, #24
10009e0a:	4b2c      	ldr	r3, [pc, #176]	; (10009ebc <ble_device_init+0x204>)
10009e0c:	4798      	blx	r3
	
	if (addr == NULL)
10009e0e:	2d00      	cmp	r5, #0
10009e10:	d10c      	bne.n	10009e2c <ble_device_init+0x174>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
10009e12:	a804      	add	r0, sp, #16
10009e14:	4b4a      	ldr	r3, [pc, #296]	; (10009f40 <ble_device_init+0x288>)
10009e16:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
10009e18:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
10009e1a:	2800      	cmp	r0, #0
10009e1c:	d006      	beq.n	10009e2c <ble_device_init+0x174>
		{
			DBG_LOG("BD address get failed");
10009e1e:	4839      	ldr	r0, [pc, #228]	; (10009f04 <ble_device_init+0x24c>)
10009e20:	4b39      	ldr	r3, [pc, #228]	; (10009f08 <ble_device_init+0x250>)
10009e22:	4798      	blx	r3
10009e24:	4847      	ldr	r0, [pc, #284]	; (10009f44 <ble_device_init+0x28c>)
10009e26:	4b3a      	ldr	r3, [pc, #232]	; (10009f10 <ble_device_init+0x258>)
10009e28:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
10009e2a:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
10009e2c:	4835      	ldr	r0, [pc, #212]	; (10009f04 <ble_device_init+0x24c>)
10009e2e:	4b36      	ldr	r3, [pc, #216]	; (10009f08 <ble_device_init+0x250>)
10009e30:	4798      	blx	r3
10009e32:	792b      	ldrb	r3, [r5, #4]
10009e34:	796a      	ldrb	r2, [r5, #5]
10009e36:	79a9      	ldrb	r1, [r5, #6]
10009e38:	7828      	ldrb	r0, [r5, #0]
10009e3a:	9003      	str	r0, [sp, #12]
10009e3c:	7868      	ldrb	r0, [r5, #1]
10009e3e:	9002      	str	r0, [sp, #8]
10009e40:	78a8      	ldrb	r0, [r5, #2]
10009e42:	9001      	str	r0, [sp, #4]
10009e44:	78e8      	ldrb	r0, [r5, #3]
10009e46:	9000      	str	r0, [sp, #0]
10009e48:	483f      	ldr	r0, [pc, #252]	; (10009f48 <ble_device_init+0x290>)
10009e4a:	4c31      	ldr	r4, [pc, #196]	; (10009f10 <ble_device_init+0x258>)
10009e4c:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
10009e4e:	ac06      	add	r4, sp, #24
10009e50:	230a      	movs	r3, #10
10009e52:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
10009e54:	4b3d      	ldr	r3, [pc, #244]	; (10009f4c <ble_device_init+0x294>)
10009e56:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
10009e58:	2207      	movs	r2, #7
10009e5a:	0029      	movs	r1, r5
10009e5c:	a807      	add	r0, sp, #28
10009e5e:	4b37      	ldr	r3, [pc, #220]	; (10009f3c <ble_device_init+0x284>)
10009e60:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
10009e62:	2300      	movs	r3, #0
10009e64:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
10009e66:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
10009e68:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
10009e6a:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
10009e6c:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
10009e6e:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
10009e70:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
10009e72:	2380      	movs	r3, #128	; 0x80
10009e74:	009b      	lsls	r3, r3, #2
10009e76:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
10009e78:	0020      	movs	r0, r4
10009e7a:	4b35      	ldr	r3, [pc, #212]	; (10009f50 <ble_device_init+0x298>)
10009e7c:	4798      	blx	r3
10009e7e:	2800      	cmp	r0, #0
10009e80:	d005      	beq.n	10009e8e <ble_device_init+0x1d6>
	{
		DBG_LOG("Set BLE Device configuration failed");
10009e82:	4820      	ldr	r0, [pc, #128]	; (10009f04 <ble_device_init+0x24c>)
10009e84:	4b20      	ldr	r3, [pc, #128]	; (10009f08 <ble_device_init+0x250>)
10009e86:	4798      	blx	r3
10009e88:	4832      	ldr	r0, [pc, #200]	; (10009f54 <ble_device_init+0x29c>)
10009e8a:	4b21      	ldr	r3, [pc, #132]	; (10009f10 <ble_device_init+0x258>)
10009e8c:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
10009e8e:	0028      	movs	r0, r5
10009e90:	4b31      	ldr	r3, [pc, #196]	; (10009f58 <ble_device_init+0x2a0>)
10009e92:	4798      	blx	r3
10009e94:	2800      	cmp	r0, #0
10009e96:	d005      	beq.n	10009ea4 <ble_device_init+0x1ec>
	{
		DBG_LOG("Set BLE Device Address failed");
10009e98:	481a      	ldr	r0, [pc, #104]	; (10009f04 <ble_device_init+0x24c>)
10009e9a:	4b1b      	ldr	r3, [pc, #108]	; (10009f08 <ble_device_init+0x250>)
10009e9c:	4798      	blx	r3
10009e9e:	482f      	ldr	r0, [pc, #188]	; (10009f5c <ble_device_init+0x2a4>)
10009ea0:	4b1b      	ldr	r3, [pc, #108]	; (10009f10 <ble_device_init+0x258>)
10009ea2:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
10009ea4:	b011      	add	sp, #68	; 0x44
10009ea6:	bc3c      	pop	{r2, r3, r4, r5}
10009ea8:	4690      	mov	r8, r2
10009eaa:	4699      	mov	r9, r3
10009eac:	46a2      	mov	sl, r4
10009eae:	46ab      	mov	fp, r5
10009eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009eb2:	46c0      	nop			; (mov r8, r8)
10009eb4:	100138cc 	.word	0x100138cc
10009eb8:	100138d4 	.word	0x100138d4
10009ebc:	10010271 	.word	0x10010271
10009ec0:	10013d60 	.word	0x10013d60
10009ec4:	100138d0 	.word	0x100138d0
10009ec8:	10013d98 	.word	0x10013d98
10009ecc:	10013d90 	.word	0x10013d90
10009ed0:	100140cc 	.word	0x100140cc
10009ed4:	100124cc 	.word	0x100124cc
10009ed8:	100128cc 	.word	0x100128cc
10009edc:	10013d74 	.word	0x10013d74
10009ee0:	10013d38 	.word	0x10013d38
10009ee4:	10013d4c 	.word	0x10013d4c
10009ee8:	10013aa0 	.word	0x10013aa0
10009eec:	10013d94 	.word	0x10013d94
10009ef0:	10013a9c 	.word	0x10013a9c
10009ef4:	10013d24 	.word	0x10013d24
10009ef8:	100142d8 	.word	0x100142d8
10009efc:	10013ab4 	.word	0x10013ab4
10009f00:	10013d20 	.word	0x10013d20
10009f04:	100114f8 	.word	0x100114f8
10009f08:	100104d9 	.word	0x100104d9
10009f0c:	10011e30 	.word	0x10011e30
10009f10:	100103b9 	.word	0x100103b9
10009f14:	1000cfed 	.word	0x1000cfed
10009f18:	10011e44 	.word	0x10011e44
10009f1c:	10011e64 	.word	0x10011e64
10009f20:	1001209c 	.word	0x1001209c
10009f24:	10009be9 	.word	0x10009be9
10009f28:	10011a60 	.word	0x10011a60
10009f2c:	10011ea0 	.word	0x10011ea0
10009f30:	1000cf05 	.word	0x1000cf05
10009f34:	10011eac 	.word	0x10011eac
10009f38:	10011a44 	.word	0x10011a44
10009f3c:	1001025f 	.word	0x1001025f
10009f40:	1000cf39 	.word	0x1000cf39
10009f44:	10011ec4 	.word	0x10011ec4
10009f48:	10011edc 	.word	0x10011edc
10009f4c:	00003a98 	.word	0x00003a98
10009f50:	1000cf5d 	.word	0x1000cf5d
10009f54:	10011f14 	.word	0x10011f14
10009f58:	1000d1a1 	.word	0x1000d1a1
10009f5c:	10011f38 	.word	0x10011f38

10009f60 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
10009f60:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
10009f62:	2201      	movs	r2, #1
10009f64:	2101      	movs	r1, #1
10009f66:	4b06      	ldr	r3, [pc, #24]	; (10009f80 <ble_send_slave_sec_request+0x20>)
10009f68:	4798      	blx	r3
10009f6a:	2800      	cmp	r0, #0
10009f6c:	d006      	beq.n	10009f7c <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
10009f6e:	4805      	ldr	r0, [pc, #20]	; (10009f84 <ble_send_slave_sec_request+0x24>)
10009f70:	4b05      	ldr	r3, [pc, #20]	; (10009f88 <ble_send_slave_sec_request+0x28>)
10009f72:	4798      	blx	r3
10009f74:	4805      	ldr	r0, [pc, #20]	; (10009f8c <ble_send_slave_sec_request+0x2c>)
10009f76:	4b06      	ldr	r3, [pc, #24]	; (10009f90 <ble_send_slave_sec_request+0x30>)
10009f78:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
10009f7a:	20e2      	movs	r0, #226	; 0xe2
}
10009f7c:	bd10      	pop	{r4, pc}
10009f7e:	46c0      	nop			; (mov r8, r8)
10009f80:	1000d72d 	.word	0x1000d72d
10009f84:	100114f8 	.word	0x100114f8
10009f88:	100104d9 	.word	0x100104d9
10009f8c:	10011f74 	.word	0x10011f74
10009f90:	100103b9 	.word	0x100103b9

10009f94 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
10009f94:	b5f0      	push	{r4, r5, r6, r7, lr}
10009f96:	465f      	mov	r7, fp
10009f98:	464e      	mov	r6, r9
10009f9a:	4645      	mov	r5, r8
10009f9c:	b4e0      	push	{r5, r6, r7}
10009f9e:	b09a      	sub	sp, #104	; 0x68
10009fa0:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
10009fa2:	7a86      	ldrb	r6, [r0, #10]
10009fa4:	2e00      	cmp	r6, #0
10009fa6:	d000      	beq.n	10009faa <ble_connected_state_handler+0x16>
10009fa8:	e0c6      	b.n	1000a138 <ble_connected_state_handler+0x1a4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
10009faa:	4875      	ldr	r0, [pc, #468]	; (1000a180 <ble_connected_state_handler+0x1ec>)
10009fac:	4f75      	ldr	r7, [pc, #468]	; (1000a184 <ble_connected_state_handler+0x1f0>)
10009fae:	47b8      	blx	r7
10009fb0:	792b      	ldrb	r3, [r5, #4]
10009fb2:	796a      	ldrb	r2, [r5, #5]
10009fb4:	79a9      	ldrb	r1, [r5, #6]
10009fb6:	7868      	ldrb	r0, [r5, #1]
10009fb8:	9002      	str	r0, [sp, #8]
10009fba:	78a8      	ldrb	r0, [r5, #2]
10009fbc:	9001      	str	r0, [sp, #4]
10009fbe:	78e8      	ldrb	r0, [r5, #3]
10009fc0:	9000      	str	r0, [sp, #0]
10009fc2:	4871      	ldr	r0, [pc, #452]	; (1000a188 <ble_connected_state_handler+0x1f4>)
10009fc4:	4c71      	ldr	r4, [pc, #452]	; (1000a18c <ble_connected_state_handler+0x1f8>)
10009fc6:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
10009fc8:	486d      	ldr	r0, [pc, #436]	; (1000a180 <ble_connected_state_handler+0x1ec>)
10009fca:	47b8      	blx	r7
10009fcc:	8929      	ldrh	r1, [r5, #8]
10009fce:	4870      	ldr	r0, [pc, #448]	; (1000a190 <ble_connected_state_handler+0x1fc>)
10009fd0:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
10009fd2:	2212      	movs	r2, #18
10009fd4:	0029      	movs	r1, r5
10009fd6:	486f      	ldr	r0, [pc, #444]	; (1000a194 <ble_connected_state_handler+0x200>)
10009fd8:	4b6f      	ldr	r3, [pc, #444]	; (1000a198 <ble_connected_state_handler+0x204>)
10009fda:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
10009fdc:	9504      	str	r5, [sp, #16]
10009fde:	2207      	movs	r2, #7
10009fe0:	0029      	movs	r1, r5
10009fe2:	486e      	ldr	r0, [pc, #440]	; (1000a19c <ble_connected_state_handler+0x208>)
10009fe4:	4b6e      	ldr	r3, [pc, #440]	; (1000a1a0 <ble_connected_state_handler+0x20c>)
10009fe6:	4798      	blx	r3
10009fe8:	2800      	cmp	r0, #0
10009fea:	d100      	bne.n	10009fee <ble_connected_state_handler+0x5a>
10009fec:	e0ad      	b.n	1000a14a <ble_connected_state_handler+0x1b6>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
10009fee:	782b      	ldrb	r3, [r5, #0]
10009ff0:	2b02      	cmp	r3, #2
10009ff2:	d000      	beq.n	10009ff6 <ble_connected_state_handler+0x62>
10009ff4:	e0a9      	b.n	1000a14a <ble_connected_state_handler+0x1b6>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
10009ff6:	2250      	movs	r2, #80	; 0x50
10009ff8:	2100      	movs	r1, #0
10009ffa:	a806      	add	r0, sp, #24
10009ffc:	4b69      	ldr	r3, [pc, #420]	; (1000a1a4 <ble_connected_state_handler+0x210>)
10009ffe:	4798      	blx	r3
1000a000:	4f69      	ldr	r7, [pc, #420]	; (1000a1a8 <ble_connected_state_handler+0x214>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000a002:	2300      	movs	r3, #0
1000a004:	e00b      	b.n	1000a01e <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000a006:	1c59      	adds	r1, r3, #1
1000a008:	7814      	ldrb	r4, [r2, #0]
1000a00a:	a806      	add	r0, sp, #24
1000a00c:	54c4      	strb	r4, [r0, r3]
1000a00e:	3201      	adds	r2, #1
1000a010:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000a012:	42b3      	cmp	r3, r6
1000a014:	d1f7      	bne.n	1000a006 <ble_connected_state_handler+0x72>
1000a016:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000a018:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000a01a:	2b50      	cmp	r3, #80	; 0x50
1000a01c:	d004      	beq.n	1000a028 <ble_connected_state_handler+0x94>
1000a01e:	001e      	movs	r6, r3
1000a020:	3610      	adds	r6, #16
1000a022:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000a024:	003a      	movs	r2, r7
1000a026:	e7ee      	b.n	1000a006 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000a028:	aa06      	add	r2, sp, #24
1000a02a:	0029      	movs	r1, r5
1000a02c:	2005      	movs	r0, #5
1000a02e:	4b5f      	ldr	r3, [pc, #380]	; (1000a1ac <ble_connected_state_handler+0x218>)
1000a030:	4798      	blx	r3
1000a032:	1e06      	subs	r6, r0, #0
1000a034:	d100      	bne.n	1000a038 <ble_connected_state_handler+0xa4>
1000a036:	e09c      	b.n	1000a172 <ble_connected_state_handler+0x1de>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000a038:	4851      	ldr	r0, [pc, #324]	; (1000a180 <ble_connected_state_handler+0x1ec>)
1000a03a:	4b52      	ldr	r3, [pc, #328]	; (1000a184 <ble_connected_state_handler+0x1f0>)
1000a03c:	4798      	blx	r3
1000a03e:	485c      	ldr	r0, [pc, #368]	; (1000a1b0 <ble_connected_state_handler+0x21c>)
1000a040:	4b52      	ldr	r3, [pc, #328]	; (1000a18c <ble_connected_state_handler+0x1f8>)
1000a042:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000a044:	26e2      	movs	r6, #226	; 0xe2
1000a046:	e094      	b.n	1000a172 <ble_connected_state_handler+0x1de>
1000a048:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a04a:	9405      	str	r4, [sp, #20]
1000a04c:	2207      	movs	r2, #7
1000a04e:	9904      	ldr	r1, [sp, #16]
1000a050:	4648      	mov	r0, r9
1000a052:	47d8      	blx	fp
1000a054:	2800      	cmp	r0, #0
1000a056:	d109      	bne.n	1000a06c <ble_connected_state_handler+0xd8>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a058:	9a05      	ldr	r2, [sp, #20]
1000a05a:	0153      	lsls	r3, r2, #5
1000a05c:	1a9b      	subs	r3, r3, r2
1000a05e:	009a      	lsls	r2, r3, #2
1000a060:	4b54      	ldr	r3, [pc, #336]	; (1000a1b4 <ble_connected_state_handler+0x220>)
1000a062:	189b      	adds	r3, r3, r2
1000a064:	335e      	adds	r3, #94	; 0x5e
1000a066:	2202      	movs	r2, #2
1000a068:	701a      	strb	r2, [r3, #0]
1000a06a:	e02b      	b.n	1000a0c4 <ble_connected_state_handler+0x130>
1000a06c:	3401      	adds	r4, #1
1000a06e:	237c      	movs	r3, #124	; 0x7c
1000a070:	469c      	mov	ip, r3
1000a072:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a074:	2c05      	cmp	r4, #5
1000a076:	d1e7      	bne.n	1000a048 <ble_connected_state_handler+0xb4>
1000a078:	e072      	b.n	1000a160 <ble_connected_state_handler+0x1cc>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a07a:	001c      	movs	r4, r3
1000a07c:	7811      	ldrb	r1, [r2, #0]
1000a07e:	2900      	cmp	r1, #0
1000a080:	d11a      	bne.n	1000a0b8 <ble_connected_state_handler+0x124>
1000a082:	e001      	b.n	1000a088 <ble_connected_state_handler+0xf4>
1000a084:	2400      	movs	r4, #0
1000a086:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000a088:	0163      	lsls	r3, r4, #5
1000a08a:	4699      	mov	r9, r3
1000a08c:	1b18      	subs	r0, r3, r4
1000a08e:	0080      	lsls	r0, r0, #2
1000a090:	4b48      	ldr	r3, [pc, #288]	; (1000a1b4 <ble_connected_state_handler+0x220>)
1000a092:	4698      	mov	r8, r3
1000a094:	4440      	add	r0, r8
1000a096:	2212      	movs	r2, #18
1000a098:	0029      	movs	r1, r5
1000a09a:	4b3f      	ldr	r3, [pc, #252]	; (1000a198 <ble_connected_state_handler+0x204>)
1000a09c:	4798      	blx	r3
						ble_device_count++;
1000a09e:	4a46      	ldr	r2, [pc, #280]	; (1000a1b8 <ble_connected_state_handler+0x224>)
1000a0a0:	7813      	ldrb	r3, [r2, #0]
1000a0a2:	3301      	adds	r3, #1
1000a0a4:	b2db      	uxtb	r3, r3
1000a0a6:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a0a8:	464b      	mov	r3, r9
1000a0aa:	1b1b      	subs	r3, r3, r4
1000a0ac:	009b      	lsls	r3, r3, #2
1000a0ae:	4443      	add	r3, r8
1000a0b0:	335e      	adds	r3, #94	; 0x5e
1000a0b2:	2202      	movs	r2, #2
1000a0b4:	701a      	strb	r2, [r3, #0]
						break;
1000a0b6:	e005      	b.n	1000a0c4 <ble_connected_state_handler+0x130>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a0b8:	1c79      	adds	r1, r7, #1
1000a0ba:	b2cf      	uxtb	r7, r1
1000a0bc:	3301      	adds	r3, #1
1000a0be:	327c      	adds	r2, #124	; 0x7c
1000a0c0:	2f05      	cmp	r7, #5
1000a0c2:	d1da      	bne.n	1000a07a <ble_connected_state_handler+0xe6>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a0c4:	2207      	movs	r2, #7
1000a0c6:	0029      	movs	r1, r5
1000a0c8:	4834      	ldr	r0, [pc, #208]	; (1000a19c <ble_connected_state_handler+0x208>)
1000a0ca:	4b35      	ldr	r3, [pc, #212]	; (1000a1a0 <ble_connected_state_handler+0x20c>)
1000a0cc:	4798      	blx	r3
1000a0ce:	2800      	cmp	r0, #0
1000a0d0:	d10c      	bne.n	1000a0ec <ble_connected_state_handler+0x158>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000a0d2:	017b      	lsls	r3, r7, #5
1000a0d4:	1bdb      	subs	r3, r3, r7
1000a0d6:	009b      	lsls	r3, r3, #2
1000a0d8:	4a36      	ldr	r2, [pc, #216]	; (1000a1b4 <ble_connected_state_handler+0x220>)
1000a0da:	18d3      	adds	r3, r2, r3
1000a0dc:	2205      	movs	r2, #5
1000a0de:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a0e0:	3202      	adds	r2, #2
1000a0e2:	2100      	movs	r1, #0
1000a0e4:	482d      	ldr	r0, [pc, #180]	; (1000a19c <ble_connected_state_handler+0x208>)
1000a0e6:	4b2f      	ldr	r3, [pc, #188]	; (1000a1a4 <ble_connected_state_handler+0x210>)
1000a0e8:	4798      	blx	r3
1000a0ea:	e042      	b.n	1000a172 <ble_connected_state_handler+0x1de>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a0ec:	4b31      	ldr	r3, [pc, #196]	; (1000a1b4 <ble_connected_state_handler+0x220>)
1000a0ee:	4698      	mov	r8, r3
1000a0f0:	017c      	lsls	r4, r7, #5
1000a0f2:	1be3      	subs	r3, r4, r7
1000a0f4:	009b      	lsls	r3, r3, #2
1000a0f6:	4443      	add	r3, r8
1000a0f8:	220a      	movs	r2, #10
1000a0fa:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a0fc:	3a03      	subs	r2, #3
1000a0fe:	2100      	movs	r1, #0
1000a100:	4826      	ldr	r0, [pc, #152]	; (1000a19c <ble_connected_state_handler+0x208>)
1000a102:	4b28      	ldr	r3, [pc, #160]	; (1000a1a4 <ble_connected_state_handler+0x210>)
1000a104:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000a106:	1be4      	subs	r4, r4, r7
1000a108:	00a4      	lsls	r4, r4, #2
1000a10a:	4444      	add	r4, r8
1000a10c:	7ca3      	ldrb	r3, [r4, #18]
1000a10e:	2b0a      	cmp	r3, #10
1000a110:	d12f      	bne.n	1000a172 <ble_connected_state_handler+0x1de>
1000a112:	e00d      	b.n	1000a130 <ble_connected_state_handler+0x19c>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000a114:	481a      	ldr	r0, [pc, #104]	; (1000a180 <ble_connected_state_handler+0x1ec>)
1000a116:	4b1b      	ldr	r3, [pc, #108]	; (1000a184 <ble_connected_state_handler+0x1f0>)
1000a118:	4798      	blx	r3
1000a11a:	4b27      	ldr	r3, [pc, #156]	; (1000a1b8 <ble_connected_state_handler+0x224>)
1000a11c:	7819      	ldrb	r1, [r3, #0]
1000a11e:	b2c9      	uxtb	r1, r1
1000a120:	4826      	ldr	r0, [pc, #152]	; (1000a1bc <ble_connected_state_handler+0x228>)
1000a122:	4b1a      	ldr	r3, [pc, #104]	; (1000a18c <ble_connected_state_handler+0x1f8>)
1000a124:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000a126:	8928      	ldrh	r0, [r5, #8]
1000a128:	2113      	movs	r1, #19
1000a12a:	4b25      	ldr	r3, [pc, #148]	; (1000a1c0 <ble_connected_state_handler+0x22c>)
1000a12c:	4798      	blx	r3
1000a12e:	e020      	b.n	1000a172 <ble_connected_state_handler+0x1de>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000a130:	8928      	ldrh	r0, [r5, #8]
1000a132:	4b24      	ldr	r3, [pc, #144]	; (1000a1c4 <ble_connected_state_handler+0x230>)
1000a134:	4798      	blx	r3
1000a136:	e01c      	b.n	1000a172 <ble_connected_state_handler+0x1de>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000a138:	4811      	ldr	r0, [pc, #68]	; (1000a180 <ble_connected_state_handler+0x1ec>)
1000a13a:	4b12      	ldr	r3, [pc, #72]	; (1000a184 <ble_connected_state_handler+0x1f0>)
1000a13c:	4798      	blx	r3
1000a13e:	7aa9      	ldrb	r1, [r5, #10]
1000a140:	4821      	ldr	r0, [pc, #132]	; (1000a1c8 <ble_connected_state_handler+0x234>)
1000a142:	4b12      	ldr	r3, [pc, #72]	; (1000a18c <ble_connected_state_handler+0x1f8>)
1000a144:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000a146:	2600      	movs	r6, #0
1000a148:	e013      	b.n	1000a172 <ble_connected_state_handler+0x1de>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000a14a:	4b1b      	ldr	r3, [pc, #108]	; (1000a1b8 <ble_connected_state_handler+0x224>)
1000a14c:	781b      	ldrb	r3, [r3, #0]
1000a14e:	b2db      	uxtb	r3, r3
1000a150:	2b04      	cmp	r3, #4
1000a152:	d8df      	bhi.n	1000a114 <ble_connected_state_handler+0x180>
1000a154:	4b17      	ldr	r3, [pc, #92]	; (1000a1b4 <ble_connected_state_handler+0x220>)
1000a156:	4699      	mov	r9, r3
1000a158:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a15a:	4b11      	ldr	r3, [pc, #68]	; (1000a1a0 <ble_connected_state_handler+0x20c>)
1000a15c:	469b      	mov	fp, r3
1000a15e:	e773      	b.n	1000a048 <ble_connected_state_handler+0xb4>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a160:	235e      	movs	r3, #94	; 0x5e
1000a162:	4a14      	ldr	r2, [pc, #80]	; (1000a1b4 <ble_connected_state_handler+0x220>)
1000a164:	5cd3      	ldrb	r3, [r2, r3]
1000a166:	2b00      	cmp	r3, #0
1000a168:	d08c      	beq.n	1000a084 <ble_connected_state_handler+0xf0>
1000a16a:	4a18      	ldr	r2, [pc, #96]	; (1000a1cc <ble_connected_state_handler+0x238>)
1000a16c:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a16e:	2701      	movs	r7, #1
1000a170:	e783      	b.n	1000a07a <ble_connected_state_handler+0xe6>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000a172:	0030      	movs	r0, r6
1000a174:	b01a      	add	sp, #104	; 0x68
1000a176:	bc1c      	pop	{r2, r3, r4}
1000a178:	4690      	mov	r8, r2
1000a17a:	4699      	mov	r9, r3
1000a17c:	46a3      	mov	fp, r4
1000a17e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a180:	100114f8 	.word	0x100114f8
1000a184:	100104d9 	.word	0x100104d9
1000a188:	10011f94 	.word	0x10011f94
1000a18c:	100103b9 	.word	0x100103b9
1000a190:	10011fd8 	.word	0x10011fd8
1000a194:	10013d60 	.word	0x10013d60
1000a198:	1001025f 	.word	0x1001025f
1000a19c:	100138d4 	.word	0x100138d4
1000a1a0:	10010241 	.word	0x10010241
1000a1a4:	10010271 	.word	0x10010271
1000a1a8:	10013afa 	.word	0x10013afa
1000a1ac:	1000d241 	.word	0x1000d241
1000a1b0:	10011ff0 	.word	0x10011ff0
1000a1b4:	10013ab4 	.word	0x10013ab4
1000a1b8:	10013d20 	.word	0x10013d20
1000a1bc:	10012014 	.word	0x10012014
1000a1c0:	1000d215 	.word	0x1000d215
1000a1c4:	10009f61 	.word	0x10009f61
1000a1c8:	10012050 	.word	0x10012050
1000a1cc:	10013b8e 	.word	0x10013b8e

1000a1d0 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000a1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a1d2:	4647      	mov	r7, r8
1000a1d4:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000a1d6:	7803      	ldrb	r3, [r0, #0]
1000a1d8:	2b00      	cmp	r3, #0
1000a1da:	d141      	bne.n	1000a260 <ble_resolv_rand_addr_handler+0x90>
1000a1dc:	4d2f      	ldr	r5, [pc, #188]	; (1000a29c <ble_resolv_rand_addr_handler+0xcc>)
1000a1de:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000a1e0:	1c46      	adds	r6, r0, #1
1000a1e2:	4f2f      	ldr	r7, [pc, #188]	; (1000a2a0 <ble_resolv_rand_addr_handler+0xd0>)
1000a1e4:	2210      	movs	r2, #16
1000a1e6:	0029      	movs	r1, r5
1000a1e8:	0030      	movs	r0, r6
1000a1ea:	47b8      	blx	r7
1000a1ec:	2800      	cmp	r0, #0
1000a1ee:	d03f      	beq.n	1000a270 <ble_resolv_rand_addr_handler+0xa0>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a1f0:	3401      	adds	r4, #1
1000a1f2:	b2e4      	uxtb	r4, r4
1000a1f4:	357c      	adds	r5, #124	; 0x7c
1000a1f6:	2c05      	cmp	r4, #5
1000a1f8:	d1f4      	bne.n	1000a1e4 <ble_resolv_rand_addr_handler+0x14>
1000a1fa:	e031      	b.n	1000a260 <ble_resolv_rand_addr_handler+0x90>
1000a1fc:	b2dd      	uxtb	r5, r3
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a1fe:	001c      	movs	r4, r3
1000a200:	7811      	ldrb	r1, [r2, #0]
1000a202:	2900      	cmp	r1, #0
1000a204:	d122      	bne.n	1000a24c <ble_resolv_rand_addr_handler+0x7c>
1000a206:	e001      	b.n	1000a20c <ble_resolv_rand_addr_handler+0x3c>
1000a208:	2400      	movs	r4, #0
1000a20a:	2500      	movs	r5, #0
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000a20c:	4b25      	ldr	r3, [pc, #148]	; (1000a2a4 <ble_resolv_rand_addr_handler+0xd4>)
1000a20e:	4698      	mov	r8, r3
1000a210:	0166      	lsls	r6, r4, #5
1000a212:	1b37      	subs	r7, r6, r4
1000a214:	00bf      	lsls	r7, r7, #2
1000a216:	4447      	add	r7, r8
1000a218:	2212      	movs	r2, #18
1000a21a:	4923      	ldr	r1, [pc, #140]	; (1000a2a8 <ble_resolv_rand_addr_handler+0xd8>)
1000a21c:	0038      	movs	r0, r7
1000a21e:	4b23      	ldr	r3, [pc, #140]	; (1000a2ac <ble_resolv_rand_addr_handler+0xdc>)
1000a220:	4798      	blx	r3
				ble_device_count++;
1000a222:	4a23      	ldr	r2, [pc, #140]	; (1000a2b0 <ble_resolv_rand_addr_handler+0xe0>)
1000a224:	7813      	ldrb	r3, [r2, #0]
1000a226:	3301      	adds	r3, #1
1000a228:	b2db      	uxtb	r3, r3
1000a22a:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a22c:	375e      	adds	r7, #94	; 0x5e
1000a22e:	2302      	movs	r3, #2
1000a230:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a232:	1b34      	subs	r4, r6, r4
1000a234:	00a4      	lsls	r4, r4, #2
1000a236:	4444      	add	r4, r8
1000a238:	3308      	adds	r3, #8
1000a23a:	74a3      	strb	r3, [r4, #18]
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000a23c:	016b      	lsls	r3, r5, #5
1000a23e:	1b5d      	subs	r5, r3, r5
1000a240:	00ad      	lsls	r5, r5, #2
1000a242:	4445      	add	r5, r8
1000a244:	7cab      	ldrb	r3, [r5, #18]
1000a246:	2b0a      	cmp	r3, #10
1000a248:	d123      	bne.n	1000a292 <ble_resolv_rand_addr_handler+0xc2>
1000a24a:	e004      	b.n	1000a256 <ble_resolv_rand_addr_handler+0x86>
1000a24c:	3301      	adds	r3, #1
1000a24e:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a250:	2b05      	cmp	r3, #5
1000a252:	d1d3      	bne.n	1000a1fc <ble_resolv_rand_addr_handler+0x2c>
1000a254:	e01d      	b.n	1000a292 <ble_resolv_rand_addr_handler+0xc2>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000a256:	4b14      	ldr	r3, [pc, #80]	; (1000a2a8 <ble_resolv_rand_addr_handler+0xd8>)
1000a258:	8918      	ldrh	r0, [r3, #8]
1000a25a:	4b16      	ldr	r3, [pc, #88]	; (1000a2b4 <ble_resolv_rand_addr_handler+0xe4>)
1000a25c:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000a25e:	e018      	b.n	1000a292 <ble_resolv_rand_addr_handler+0xc2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a260:	235e      	movs	r3, #94	; 0x5e
1000a262:	4a10      	ldr	r2, [pc, #64]	; (1000a2a4 <ble_resolv_rand_addr_handler+0xd4>)
1000a264:	5cd3      	ldrb	r3, [r2, r3]
1000a266:	2b00      	cmp	r3, #0
1000a268:	d0ce      	beq.n	1000a208 <ble_resolv_rand_addr_handler+0x38>
1000a26a:	4a13      	ldr	r2, [pc, #76]	; (1000a2b8 <ble_resolv_rand_addr_handler+0xe8>)
1000a26c:	2301      	movs	r3, #1
1000a26e:	e7c5      	b.n	1000a1fc <ble_resolv_rand_addr_handler+0x2c>
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a270:	480c      	ldr	r0, [pc, #48]	; (1000a2a4 <ble_resolv_rand_addr_handler+0xd4>)
1000a272:	0163      	lsls	r3, r4, #5
1000a274:	1b1a      	subs	r2, r3, r4
1000a276:	0092      	lsls	r2, r2, #2
1000a278:	1882      	adds	r2, r0, r2
1000a27a:	0011      	movs	r1, r2
1000a27c:	315e      	adds	r1, #94	; 0x5e
1000a27e:	2502      	movs	r5, #2
1000a280:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a282:	210a      	movs	r1, #10
1000a284:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000a286:	0010      	movs	r0, r2
1000a288:	2212      	movs	r2, #18
1000a28a:	4907      	ldr	r1, [pc, #28]	; (1000a2a8 <ble_resolv_rand_addr_handler+0xd8>)
1000a28c:	4b07      	ldr	r3, [pc, #28]	; (1000a2ac <ble_resolv_rand_addr_handler+0xdc>)
1000a28e:	4798      	blx	r3
1000a290:	e7e1      	b.n	1000a256 <ble_resolv_rand_addr_handler+0x86>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000a292:	2000      	movs	r0, #0
1000a294:	bc04      	pop	{r2}
1000a296:	4690      	mov	r8, r2
1000a298:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a29a:	46c0      	nop			; (mov r8, r8)
1000a29c:	10013afa 	.word	0x10013afa
1000a2a0:	10010241 	.word	0x10010241
1000a2a4:	10013ab4 	.word	0x10013ab4
1000a2a8:	10013d60 	.word	0x10013d60
1000a2ac:	1001025f 	.word	0x1001025f
1000a2b0:	10013d20 	.word	0x10013d20
1000a2b4:	10009f61 	.word	0x10009f61
1000a2b8:	10013b8e 	.word	0x10013b8e

1000a2bc <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000a2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a2be:	000d      	movs	r5, r1
	DBG_LOG_DEV("BLE-Event:%d", events);
	switch(events)
1000a2c0:	283b      	cmp	r0, #59	; 0x3b
1000a2c2:	d872      	bhi.n	1000a3aa <ble_event_manager+0xee>
1000a2c4:	0083      	lsls	r3, r0, #2
1000a2c6:	4a3c      	ldr	r2, [pc, #240]	; (1000a3b8 <ble_event_manager+0xfc>)
1000a2c8:	58d3      	ldr	r3, [r2, r3]
1000a2ca:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a2cc:	0084      	lsls	r4, r0, #2
1000a2ce:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000a2d0:	4f3a      	ldr	r7, [pc, #232]	; (1000a3bc <ble_event_manager+0x100>)
1000a2d2:	59bb      	ldr	r3, [r7, r6]
1000a2d4:	2b00      	cmp	r3, #0
1000a2d6:	d004      	beq.n	1000a2e2 <ble_event_manager+0x26>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a2d8:	591b      	ldr	r3, [r3, r4]
1000a2da:	2b00      	cmp	r3, #0
1000a2dc:	d001      	beq.n	1000a2e2 <ble_event_manager+0x26>
				{
					event_cb_fn[events](event_params);		
1000a2de:	0028      	movs	r0, r5
1000a2e0:	4798      	blx	r3
1000a2e2:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000a2e4:	2e14      	cmp	r6, #20
1000a2e6:	d1f4      	bne.n	1000a2d2 <ble_event_manager+0x16>
1000a2e8:	e065      	b.n	1000a3b6 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a2ea:	3813      	subs	r0, #19
1000a2ec:	b2c4      	uxtb	r4, r0
1000a2ee:	00a4      	lsls	r4, r4, #2
1000a2f0:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000a2f2:	4f33      	ldr	r7, [pc, #204]	; (1000a3c0 <ble_event_manager+0x104>)
1000a2f4:	59bb      	ldr	r3, [r7, r6]
1000a2f6:	2b00      	cmp	r3, #0
1000a2f8:	d004      	beq.n	1000a304 <ble_event_manager+0x48>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a2fa:	591b      	ldr	r3, [r3, r4]
1000a2fc:	2b00      	cmp	r3, #0
1000a2fe:	d001      	beq.n	1000a304 <ble_event_manager+0x48>
				{
					event_cb_fn[events](event_params);
1000a300:	0028      	movs	r0, r5
1000a302:	4798      	blx	r3
1000a304:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000a306:	2e14      	cmp	r6, #20
1000a308:	d1f4      	bne.n	1000a2f4 <ble_event_manager+0x38>
1000a30a:	e054      	b.n	1000a3b6 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a30c:	381d      	subs	r0, #29
1000a30e:	b2c4      	uxtb	r4, r0
1000a310:	00a4      	lsls	r4, r4, #2
1000a312:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000a314:	4f2b      	ldr	r7, [pc, #172]	; (1000a3c4 <ble_event_manager+0x108>)
1000a316:	59bb      	ldr	r3, [r7, r6]
1000a318:	2b00      	cmp	r3, #0
1000a31a:	d004      	beq.n	1000a326 <ble_event_manager+0x6a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a31c:	591b      	ldr	r3, [r3, r4]
1000a31e:	2b00      	cmp	r3, #0
1000a320:	d001      	beq.n	1000a326 <ble_event_manager+0x6a>
				{
					event_cb_fn[events](event_params);
1000a322:	0028      	movs	r0, r5
1000a324:	4798      	blx	r3
1000a326:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000a328:	2e14      	cmp	r6, #20
1000a32a:	d1f4      	bne.n	1000a316 <ble_event_manager+0x5a>
1000a32c:	e043      	b.n	1000a3b6 <ble_event_manager+0xfa>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000a32e:	3827      	subs	r0, #39	; 0x27
1000a330:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000a332:	4b25      	ldr	r3, [pc, #148]	; (1000a3c8 <ble_event_manager+0x10c>)
1000a334:	681b      	ldr	r3, [r3, #0]
1000a336:	2b00      	cmp	r3, #0
1000a338:	d03d      	beq.n	1000a3b6 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a33a:	0080      	lsls	r0, r0, #2
1000a33c:	58c3      	ldr	r3, [r0, r3]
1000a33e:	2b00      	cmp	r3, #0
1000a340:	d039      	beq.n	1000a3b6 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000a342:	0008      	movs	r0, r1
1000a344:	4798      	blx	r3
1000a346:	e036      	b.n	1000a3b6 <ble_event_manager+0xfa>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000a348:	382d      	subs	r0, #45	; 0x2d
1000a34a:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000a34c:	4b1f      	ldr	r3, [pc, #124]	; (1000a3cc <ble_event_manager+0x110>)
1000a34e:	681b      	ldr	r3, [r3, #0]
1000a350:	2b00      	cmp	r3, #0
1000a352:	d030      	beq.n	1000a3b6 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a354:	0080      	lsls	r0, r0, #2
1000a356:	58c3      	ldr	r3, [r0, r3]
1000a358:	2b00      	cmp	r3, #0
1000a35a:	d02c      	beq.n	1000a3b6 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000a35c:	0008      	movs	r0, r1
1000a35e:	4798      	blx	r3
1000a360:	e029      	b.n	1000a3b6 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a362:	3836      	subs	r0, #54	; 0x36
1000a364:	b2c4      	uxtb	r4, r0
1000a366:	00a4      	lsls	r4, r4, #2
1000a368:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000a36a:	4f19      	ldr	r7, [pc, #100]	; (1000a3d0 <ble_event_manager+0x114>)
1000a36c:	59bb      	ldr	r3, [r7, r6]
1000a36e:	2b00      	cmp	r3, #0
1000a370:	d004      	beq.n	1000a37c <ble_event_manager+0xc0>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a372:	591b      	ldr	r3, [r3, r4]
1000a374:	2b00      	cmp	r3, #0
1000a376:	d001      	beq.n	1000a37c <ble_event_manager+0xc0>
				{
					event_cb_fn[events](event_params);
1000a378:	0028      	movs	r0, r5
1000a37a:	4798      	blx	r3
1000a37c:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000a37e:	2e14      	cmp	r6, #20
1000a380:	d1f4      	bne.n	1000a36c <ble_event_manager+0xb0>
1000a382:	e018      	b.n	1000a3b6 <ble_event_manager+0xfa>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000a384:	3838      	subs	r0, #56	; 0x38
1000a386:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000a388:	4b12      	ldr	r3, [pc, #72]	; (1000a3d4 <ble_event_manager+0x118>)
1000a38a:	681b      	ldr	r3, [r3, #0]
1000a38c:	2b00      	cmp	r3, #0
1000a38e:	d012      	beq.n	1000a3b6 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a390:	0080      	lsls	r0, r0, #2
1000a392:	58c3      	ldr	r3, [r0, r3]
1000a394:	2b00      	cmp	r3, #0
1000a396:	d00e      	beq.n	1000a3b6 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000a398:	0008      	movs	r0, r1
1000a39a:	4798      	blx	r3
1000a39c:	e00b      	b.n	1000a3b6 <ble_event_manager+0xfa>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000a39e:	4b0e      	ldr	r3, [pc, #56]	; (1000a3d8 <ble_event_manager+0x11c>)
1000a3a0:	681b      	ldr	r3, [r3, #0]
1000a3a2:	2b00      	cmp	r3, #0
1000a3a4:	d007      	beq.n	1000a3b6 <ble_event_manager+0xfa>
			ble_user_event_cb();
1000a3a6:	4798      	blx	r3
1000a3a8:	e005      	b.n	1000a3b6 <ble_event_manager+0xfa>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000a3aa:	4d0c      	ldr	r5, [pc, #48]	; (1000a3dc <ble_event_manager+0x120>)
1000a3ac:	0028      	movs	r0, r5
1000a3ae:	4c0c      	ldr	r4, [pc, #48]	; (1000a3e0 <ble_event_manager+0x124>)
1000a3b0:	47a0      	blx	r4
1000a3b2:	0028      	movs	r0, r5
1000a3b4:	47a0      	blx	r4
	}
	break;		
	}
}
1000a3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a3b8:	10011954 	.word	0x10011954
1000a3bc:	10013d38 	.word	0x10013d38
1000a3c0:	10013d4c 	.word	0x10013d4c
1000a3c4:	10013aa0 	.word	0x10013aa0
1000a3c8:	10013d94 	.word	0x10013d94
1000a3cc:	10013a9c 	.word	0x10013a9c
1000a3d0:	10013d24 	.word	0x10013d24
1000a3d4:	100142d8 	.word	0x100142d8
1000a3d8:	100138cc 	.word	0x100138cc
1000a3dc:	100114f8 	.word	0x100114f8
1000a3e0:	100104d9 	.word	0x100104d9

1000a3e4 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000a3e4:	b570      	push	{r4, r5, r6, lr}
1000a3e6:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000a3e8:	4b0d      	ldr	r3, [pc, #52]	; (1000a420 <ble_event_task+0x3c>)
1000a3ea:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000a3ec:	2b01      	cmp	r3, #1
1000a3ee:	d101      	bne.n	1000a3f4 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000a3f0:	4b0c      	ldr	r3, [pc, #48]	; (1000a424 <ble_event_task+0x40>)
1000a3f2:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000a3f4:	0022      	movs	r2, r4
1000a3f6:	490c      	ldr	r1, [pc, #48]	; (1000a428 <ble_event_task+0x44>)
1000a3f8:	480c      	ldr	r0, [pc, #48]	; (1000a42c <ble_event_task+0x48>)
1000a3fa:	4b0d      	ldr	r3, [pc, #52]	; (1000a430 <ble_event_task+0x4c>)
1000a3fc:	4798      	blx	r3
1000a3fe:	0004      	movs	r4, r0
1000a400:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000a402:	4b07      	ldr	r3, [pc, #28]	; (1000a420 <ble_event_task+0x3c>)
1000a404:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000a406:	2b01      	cmp	r3, #1
1000a408:	d101      	bne.n	1000a40e <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000a40a:	4b0a      	ldr	r3, [pc, #40]	; (1000a434 <ble_event_task+0x50>)
1000a40c:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000a40e:	2d00      	cmp	r5, #0
1000a410:	d104      	bne.n	1000a41c <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000a412:	4b06      	ldr	r3, [pc, #24]	; (1000a42c <ble_event_task+0x48>)
1000a414:	7818      	ldrb	r0, [r3, #0]
1000a416:	4904      	ldr	r1, [pc, #16]	; (1000a428 <ble_event_task+0x44>)
1000a418:	4b07      	ldr	r3, [pc, #28]	; (1000a438 <ble_event_task+0x54>)
1000a41a:	4798      	blx	r3
    }
    
    return status;
}
1000a41c:	0020      	movs	r0, r4
1000a41e:	bd70      	pop	{r4, r5, r6, pc}
1000a420:	100138db 	.word	0x100138db
1000a424:	1000ad49 	.word	0x1000ad49
1000a428:	100140cc 	.word	0x100140cc
1000a42c:	10013d90 	.word	0x10013d90
1000a430:	1000c795 	.word	0x1000c795
1000a434:	1000ad21 	.word	0x1000ad21
1000a438:	1000a2bd 	.word	0x1000a2bd

1000a43c <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000a43c:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000a43e:	4b0e      	ldr	r3, [pc, #56]	; (1000a478 <uart_read_complete_callback+0x3c>)
1000a440:	781b      	ldrb	r3, [r3, #0]
1000a442:	2b01      	cmp	r3, #1
1000a444:	d10b      	bne.n	1000a45e <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000a446:	2202      	movs	r2, #2
1000a448:	4b0b      	ldr	r3, [pc, #44]	; (1000a478 <uart_read_complete_callback+0x3c>)
1000a44a:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000a44c:	4b0b      	ldr	r3, [pc, #44]	; (1000a47c <uart_read_complete_callback+0x40>)
1000a44e:	681b      	ldr	r3, [r3, #0]
1000a450:	2b00      	cmp	r3, #0
1000a452:	d110      	bne.n	1000a476 <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000a454:	2102      	movs	r1, #2
1000a456:	480a      	ldr	r0, [pc, #40]	; (1000a480 <uart_read_complete_callback+0x44>)
1000a458:	4b0a      	ldr	r3, [pc, #40]	; (1000a484 <uart_read_complete_callback+0x48>)
1000a45a:	4798      	blx	r3
1000a45c:	e00b      	b.n	1000a476 <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000a45e:	4b07      	ldr	r3, [pc, #28]	; (1000a47c <uart_read_complete_callback+0x40>)
1000a460:	681b      	ldr	r3, [r3, #0]
1000a462:	2b00      	cmp	r3, #0
1000a464:	d007      	beq.n	1000a476 <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000a466:	4c08      	ldr	r4, [pc, #32]	; (1000a488 <uart_read_complete_callback+0x4c>)
1000a468:	7820      	ldrb	r0, [r4, #0]
1000a46a:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000a46c:	2201      	movs	r2, #1
1000a46e:	0021      	movs	r1, r4
1000a470:	4803      	ldr	r0, [pc, #12]	; (1000a480 <uart_read_complete_callback+0x44>)
1000a472:	4b06      	ldr	r3, [pc, #24]	; (1000a48c <uart_read_complete_callback+0x50>)
1000a474:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000a476:	bd10      	pop	{r4, pc}
1000a478:	100138e0 	.word	0x100138e0
1000a47c:	100138e8 	.word	0x100138e8
1000a480:	100142dc 	.word	0x100142dc
1000a484:	1000b419 	.word	0x1000b419
1000a488:	100138e4 	.word	0x100138e4
1000a48c:	1000b3bd 	.word	0x1000b3bd

1000a490 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000a490:	b570      	push	{r4, r5, r6, lr}
1000a492:	0006      	movs	r6, r0
1000a494:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000a496:	4c03      	ldr	r4, [pc, #12]	; (1000a4a4 <usart_serial_getchar+0x14>)
1000a498:	0029      	movs	r1, r5
1000a49a:	0030      	movs	r0, r6
1000a49c:	47a0      	blx	r4
1000a49e:	2800      	cmp	r0, #0
1000a4a0:	d1fa      	bne.n	1000a498 <usart_serial_getchar+0x8>
}
1000a4a2:	bd70      	pop	{r4, r5, r6, pc}
1000a4a4:	1000b3a9 	.word	0x1000b3a9

1000a4a8 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000a4a8:	b570      	push	{r4, r5, r6, lr}
1000a4aa:	0006      	movs	r6, r0
1000a4ac:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000a4ae:	4c03      	ldr	r4, [pc, #12]	; (1000a4bc <usart_serial_putchar+0x14>)
1000a4b0:	0029      	movs	r1, r5
1000a4b2:	0030      	movs	r0, r6
1000a4b4:	47a0      	blx	r4
1000a4b6:	2800      	cmp	r0, #0
1000a4b8:	d1fa      	bne.n	1000a4b0 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000a4ba:	bd70      	pop	{r4, r5, r6, pc}
1000a4bc:	1000b399 	.word	0x1000b399

1000a4c0 <serial_console_init>:

void serial_console_init(void)
{
1000a4c0:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000a4c2:	2100      	movs	r1, #0
1000a4c4:	2000      	movs	r0, #0
1000a4c6:	4b19      	ldr	r3, [pc, #100]	; (1000a52c <serial_console_init+0x6c>)
1000a4c8:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000a4ca:	4c19      	ldr	r4, [pc, #100]	; (1000a530 <serial_console_init+0x70>)
1000a4cc:	0020      	movs	r0, r4
1000a4ce:	4b19      	ldr	r3, [pc, #100]	; (1000a534 <serial_console_init+0x74>)
1000a4d0:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000a4d2:	23e1      	movs	r3, #225	; 0xe1
1000a4d4:	025b      	lsls	r3, r3, #9
1000a4d6:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000a4d8:	2302      	movs	r3, #2
1000a4da:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000a4dc:	2203      	movs	r2, #3
1000a4de:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000a4e0:	3201      	adds	r2, #1
1000a4e2:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000a4e4:	3201      	adds	r2, #1
1000a4e6:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000a4e8:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000a4ea:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000a4ec:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000a4ee:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000a4f0:	4d11      	ldr	r5, [pc, #68]	; (1000a538 <serial_console_init+0x78>)
1000a4f2:	4b12      	ldr	r3, [pc, #72]	; (1000a53c <serial_console_init+0x7c>)
1000a4f4:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000a4f6:	4a12      	ldr	r2, [pc, #72]	; (1000a540 <serial_console_init+0x80>)
1000a4f8:	4b12      	ldr	r3, [pc, #72]	; (1000a544 <serial_console_init+0x84>)
1000a4fa:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000a4fc:	4a12      	ldr	r2, [pc, #72]	; (1000a548 <serial_console_init+0x88>)
1000a4fe:	4b13      	ldr	r3, [pc, #76]	; (1000a54c <serial_console_init+0x8c>)
1000a500:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000a502:	0022      	movs	r2, r4
1000a504:	4912      	ldr	r1, [pc, #72]	; (1000a550 <serial_console_init+0x90>)
1000a506:	0028      	movs	r0, r5
1000a508:	4b12      	ldr	r3, [pc, #72]	; (1000a554 <serial_console_init+0x94>)
1000a50a:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000a50c:	4e12      	ldr	r6, [pc, #72]	; (1000a558 <serial_console_init+0x98>)
1000a50e:	6833      	ldr	r3, [r6, #0]
1000a510:	6898      	ldr	r0, [r3, #8]
1000a512:	2100      	movs	r1, #0
1000a514:	4c11      	ldr	r4, [pc, #68]	; (1000a55c <serial_console_init+0x9c>)
1000a516:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000a518:	6833      	ldr	r3, [r6, #0]
1000a51a:	6858      	ldr	r0, [r3, #4]
1000a51c:	2100      	movs	r1, #0
1000a51e:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000a520:	2202      	movs	r2, #2
1000a522:	490f      	ldr	r1, [pc, #60]	; (1000a560 <serial_console_init+0xa0>)
1000a524:	0028      	movs	r0, r5
1000a526:	4b0f      	ldr	r3, [pc, #60]	; (1000a564 <serial_console_init+0xa4>)
1000a528:	4798      	blx	r3
}
1000a52a:	bd70      	pop	{r4, r5, r6, pc}
1000a52c:	1000bbf9 	.word	0x1000bbf9
1000a530:	10014300 	.word	0x10014300
1000a534:	1000b1b1 	.word	0x1000b1b1
1000a538:	100142dc 	.word	0x100142dc
1000a53c:	10014628 	.word	0x10014628
1000a540:	1000a4a9 	.word	0x1000a4a9
1000a544:	10014624 	.word	0x10014624
1000a548:	1000a491 	.word	0x1000a491
1000a54c:	10014620 	.word	0x10014620
1000a550:	40004000 	.word	0x40004000
1000a554:	1000b1dd 	.word	0x1000b1dd
1000a558:	100124a4 	.word	0x100124a4
1000a55c:	10010589 	.word	0x10010589
1000a560:	1000a43d 	.word	0x1000a43d
1000a564:	1000b3e5 	.word	0x1000b3e5

1000a568 <_time_start>:

void _time_start(unsigned int sec)
{
1000a568:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a56a:	b083      	sub	sp, #12
1000a56c:	0005      	movs	r5, r0
	system_clock_get_value();
1000a56e:	4c0d      	ldr	r4, [pc, #52]	; (1000a5a4 <_time_start+0x3c>)
1000a570:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000a572:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000a574:	4f0c      	ldr	r7, [pc, #48]	; (1000a5a8 <_time_start+0x40>)
1000a576:	47b8      	blx	r7
1000a578:	4e0c      	ldr	r6, [pc, #48]	; (1000a5ac <_time_start+0x44>)
1000a57a:	4a0d      	ldr	r2, [pc, #52]	; (1000a5b0 <_time_start+0x48>)
1000a57c:	4b0d      	ldr	r3, [pc, #52]	; (1000a5b4 <_time_start+0x4c>)
1000a57e:	47b0      	blx	r6
1000a580:	9000      	str	r0, [sp, #0]
1000a582:	9101      	str	r1, [sp, #4]
1000a584:	20fa      	movs	r0, #250	; 0xfa
1000a586:	0080      	lsls	r0, r0, #2
1000a588:	4368      	muls	r0, r5
1000a58a:	47b8      	blx	r7
1000a58c:	0002      	movs	r2, r0
1000a58e:	000b      	movs	r3, r1
1000a590:	9800      	ldr	r0, [sp, #0]
1000a592:	9901      	ldr	r1, [sp, #4]
1000a594:	47b0      	blx	r6
1000a596:	4b08      	ldr	r3, [pc, #32]	; (1000a5b8 <_time_start+0x50>)
1000a598:	4798      	blx	r3
1000a59a:	4b08      	ldr	r3, [pc, #32]	; (1000a5bc <_time_start+0x54>)
1000a59c:	6018      	str	r0, [r3, #0]
}
1000a59e:	b003      	add	sp, #12
1000a5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a5a2:	46c0      	nop			; (mov r8, r8)
1000a5a4:	1000bc7d 	.word	0x1000bc7d
1000a5a8:	100100dd 	.word	0x100100dd
1000a5ac:	1000f4d5 	.word	0x1000f4d5
1000a5b0:	19feaec7 	.word	0x19feaec7
1000a5b4:	3f09d8ef 	.word	0x3f09d8ef
1000a5b8:	1000f27d 	.word	0x1000f27d
1000a5bc:	100138dc 	.word	0x100138dc

1000a5c0 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000a5c0:	4b02      	ldr	r3, [pc, #8]	; (1000a5cc <_time_done+0xc>)
1000a5c2:	681a      	ldr	r2, [r3, #0]
1000a5c4:	1e50      	subs	r0, r2, #1
1000a5c6:	6018      	str	r0, [r3, #0]
}
1000a5c8:	4770      	bx	lr
1000a5ca:	46c0      	nop			; (mov r8, r8)
1000a5cc:	100138dc 	.word	0x100138dc

1000a5d0 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000a5d0:	b570      	push	{r4, r5, r6, lr}
1000a5d2:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000a5d4:	2201      	movs	r2, #1
1000a5d6:	4b11      	ldr	r3, [pc, #68]	; (1000a61c <getchar_b11_timeout+0x4c>)
1000a5d8:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000a5da:	4b11      	ldr	r3, [pc, #68]	; (1000a620 <getchar_b11_timeout+0x50>)
1000a5dc:	681b      	ldr	r3, [r3, #0]
1000a5de:	2b00      	cmp	r3, #0
1000a5e0:	d103      	bne.n	1000a5ea <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000a5e2:	2102      	movs	r1, #2
1000a5e4:	480f      	ldr	r0, [pc, #60]	; (1000a624 <getchar_b11_timeout+0x54>)
1000a5e6:	4b10      	ldr	r3, [pc, #64]	; (1000a628 <getchar_b11_timeout+0x58>)
1000a5e8:	4798      	blx	r3

	_time_start(sec);
1000a5ea:	0020      	movs	r0, r4
1000a5ec:	4b0f      	ldr	r3, [pc, #60]	; (1000a62c <getchar_b11_timeout+0x5c>)
1000a5ee:	4798      	blx	r3
	
	string_input[0] = 0;
1000a5f0:	490f      	ldr	r1, [pc, #60]	; (1000a630 <getchar_b11_timeout+0x60>)
1000a5f2:	2300      	movs	r3, #0
1000a5f4:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000a5f6:	2201      	movs	r2, #1
1000a5f8:	480a      	ldr	r0, [pc, #40]	; (1000a624 <getchar_b11_timeout+0x54>)
1000a5fa:	4b0e      	ldr	r3, [pc, #56]	; (1000a634 <getchar_b11_timeout+0x64>)
1000a5fc:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000a5fe:	4c07      	ldr	r4, [pc, #28]	; (1000a61c <getchar_b11_timeout+0x4c>)
1000a600:	4d0d      	ldr	r5, [pc, #52]	; (1000a638 <getchar_b11_timeout+0x68>)
1000a602:	7823      	ldrb	r3, [r4, #0]
1000a604:	2b02      	cmp	r3, #2
1000a606:	d002      	beq.n	1000a60e <getchar_b11_timeout+0x3e>
1000a608:	47a8      	blx	r5
1000a60a:	2800      	cmp	r0, #0
1000a60c:	d1f9      	bne.n	1000a602 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000a60e:	2200      	movs	r2, #0
1000a610:	4b02      	ldr	r3, [pc, #8]	; (1000a61c <getchar_b11_timeout+0x4c>)
1000a612:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000a614:	4b06      	ldr	r3, [pc, #24]	; (1000a630 <getchar_b11_timeout+0x60>)
1000a616:	7818      	ldrb	r0, [r3, #0]
}
1000a618:	bd70      	pop	{r4, r5, r6, pc}
1000a61a:	46c0      	nop			; (mov r8, r8)
1000a61c:	100138e0 	.word	0x100138e0
1000a620:	100138e8 	.word	0x100138e8
1000a624:	100142dc 	.word	0x100142dc
1000a628:	1000b3f9 	.word	0x1000b3f9
1000a62c:	1000a569 	.word	0x1000a569
1000a630:	100138e4 	.word	0x100138e4
1000a634:	1000b3bd 	.word	0x1000b3bd
1000a638:	1000a5c1 	.word	0x1000a5c1

1000a63c <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000a63c:	4b02      	ldr	r3, [pc, #8]	; (1000a648 <platform_event_free+0xc>)
1000a63e:	681a      	ldr	r2, [r3, #0]
1000a640:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000a642:	6018      	str	r0, [r3, #0]
}
1000a644:	4770      	bx	lr
1000a646:	46c0      	nop			; (mov r8, r8)
1000a648:	100138f0 	.word	0x100138f0

1000a64c <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000a64c:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000a64e:	4b0b      	ldr	r3, [pc, #44]	; (1000a67c <platform_event_post+0x30>)
1000a650:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000a652:	2c00      	cmp	r4, #0
1000a654:	d011      	beq.n	1000a67a <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000a656:	6825      	ldr	r5, [r4, #0]
1000a658:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000a65a:	2300      	movs	r3, #0
1000a65c:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000a65e:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000a660:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000a662:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000a664:	4b06      	ldr	r3, [pc, #24]	; (1000a680 <platform_event_post+0x34>)
1000a666:	681a      	ldr	r2, [r3, #0]
1000a668:	2a00      	cmp	r2, #0
1000a66a:	d102      	bne.n	1000a672 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000a66c:	601c      	str	r4, [r3, #0]
1000a66e:	e004      	b.n	1000a67a <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000a670:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000a672:	6813      	ldr	r3, [r2, #0]
1000a674:	2b00      	cmp	r3, #0
1000a676:	d1fb      	bne.n	1000a670 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000a678:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000a67a:	bd30      	pop	{r4, r5, pc}
1000a67c:	100138f0 	.word	0x100138f0
1000a680:	100138ec 	.word	0x100138ec

1000a684 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000a684:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000a686:	2300      	movs	r3, #0
1000a688:	4a06      	ldr	r2, [pc, #24]	; (1000a6a4 <platform_event_init+0x20>)
1000a68a:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000a68c:	4a06      	ldr	r2, [pc, #24]	; (1000a6a8 <platform_event_init+0x24>)
1000a68e:	6013      	str	r3, [r2, #0]
1000a690:	4c06      	ldr	r4, [pc, #24]	; (1000a6ac <platform_event_init+0x28>)
1000a692:	0026      	movs	r6, r4
1000a694:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000a696:	4d06      	ldr	r5, [pc, #24]	; (1000a6b0 <platform_event_init+0x2c>)
1000a698:	0020      	movs	r0, r4
1000a69a:	47a8      	blx	r5
1000a69c:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000a69e:	42b4      	cmp	r4, r6
1000a6a0:	d1fa      	bne.n	1000a698 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000a6a2:	bd70      	pop	{r4, r5, r6, pc}
1000a6a4:	100138f0 	.word	0x100138f0
1000a6a8:	100138ec 	.word	0x100138ec
1000a6ac:	100138f4 	.word	0x100138f4
1000a6b0:	1000a63d 	.word	0x1000a63d

1000a6b4 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000a6b4:	b570      	push	{r4, r5, r6, lr}
1000a6b6:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000a6b8:	4b13      	ldr	r3, [pc, #76]	; (1000a708 <at_ke_msg_send+0x54>)
1000a6ba:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000a6bc:	4b13      	ldr	r3, [pc, #76]	; (1000a70c <at_ke_msg_send+0x58>)
1000a6be:	681b      	ldr	r3, [r3, #0]
1000a6c0:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000a6c2:	2c0c      	cmp	r4, #12
1000a6c4:	d01f      	beq.n	1000a706 <at_ke_msg_send+0x52>
1000a6c6:	3c0c      	subs	r4, #12
1000a6c8:	88e3      	ldrh	r3, [r4, #6]
1000a6ca:	2b05      	cmp	r3, #5
1000a6cc:	d01b      	beq.n	1000a706 <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000a6ce:	07eb      	lsls	r3, r5, #31
1000a6d0:	d414      	bmi.n	1000a6fc <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000a6d2:	4b0f      	ldr	r3, [pc, #60]	; (1000a710 <at_ke_msg_send+0x5c>)
1000a6d4:	681b      	ldr	r3, [r3, #0]
1000a6d6:	2002      	movs	r0, #2
1000a6d8:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000a6da:	4b0e      	ldr	r3, [pc, #56]	; (1000a714 <at_ke_msg_send+0x60>)
1000a6dc:	681b      	ldr	r3, [r3, #0]
1000a6de:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000a6e0:	4c0d      	ldr	r4, [pc, #52]	; (1000a718 <at_ke_msg_send+0x64>)
1000a6e2:	2003      	movs	r0, #3
1000a6e4:	6823      	ldr	r3, [r4, #0]
1000a6e6:	4798      	blx	r3
1000a6e8:	2800      	cmp	r0, #0
1000a6ea:	d1fa      	bne.n	1000a6e2 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000a6ec:	4b0b      	ldr	r3, [pc, #44]	; (1000a71c <at_ke_msg_send+0x68>)
1000a6ee:	681b      	ldr	r3, [r3, #0]
1000a6f0:	3002      	adds	r0, #2
1000a6f2:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000a6f4:	2201      	movs	r2, #1
1000a6f6:	4b0a      	ldr	r3, [pc, #40]	; (1000a720 <at_ke_msg_send+0x6c>)
1000a6f8:	601a      	str	r2, [r3, #0]
1000a6fa:	e004      	b.n	1000a706 <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000a6fc:	4b09      	ldr	r3, [pc, #36]	; (1000a724 <at_ke_msg_send+0x70>)
1000a6fe:	6818      	ldr	r0, [r3, #0]
1000a700:	4b09      	ldr	r3, [pc, #36]	; (1000a728 <at_ke_msg_send+0x74>)
1000a702:	681b      	ldr	r3, [r3, #0]
1000a704:	4798      	blx	r3
		}
	}
}
1000a706:	bd70      	pop	{r4, r5, r6, pc}
1000a708:	4000b1ec 	.word	0x4000b1ec
1000a70c:	1001399c 	.word	0x1001399c
1000a710:	10013994 	.word	0x10013994
1000a714:	100139a4 	.word	0x100139a4
1000a718:	10013980 	.word	0x10013980
1000a71c:	10013988 	.word	0x10013988
1000a720:	4000b020 	.word	0x4000b020
1000a724:	1001398c 	.word	0x1001398c
1000a728:	1001397c 	.word	0x1001397c

1000a72c <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000a72c:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000a72e:	4b06      	ldr	r3, [pc, #24]	; (1000a748 <samb11_plf_resume_callback+0x1c>)
1000a730:	4a06      	ldr	r2, [pc, #24]	; (1000a74c <samb11_plf_resume_callback+0x20>)
1000a732:	6819      	ldr	r1, [r3, #0]
1000a734:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000a736:	685a      	ldr	r2, [r3, #4]
1000a738:	4b05      	ldr	r3, [pc, #20]	; (1000a750 <samb11_plf_resume_callback+0x24>)
1000a73a:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000a73c:	4b05      	ldr	r3, [pc, #20]	; (1000a754 <samb11_plf_resume_callback+0x28>)
1000a73e:	681b      	ldr	r3, [r3, #0]
1000a740:	2b00      	cmp	r3, #0
1000a742:	d000      	beq.n	1000a746 <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000a744:	4798      	blx	r3
	}
}
1000a746:	bd10      	pop	{r4, pc}
1000a748:	10014328 	.word	0x10014328
1000a74c:	4000b00c 	.word	0x4000b00c
1000a750:	4000b010 	.word	0x4000b010
1000a754:	10014604 	.word	0x10014604

1000a758 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000a758:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000a75a:	2232      	movs	r2, #50	; 0x32
1000a75c:	2100      	movs	r1, #0
1000a75e:	480d      	ldr	r0, [pc, #52]	; (1000a794 <init_port_list+0x3c>)
1000a760:	4b0d      	ldr	r3, [pc, #52]	; (1000a798 <init_port_list+0x40>)
1000a762:	4798      	blx	r3
1000a764:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000a766:	480b      	ldr	r0, [pc, #44]	; (1000a794 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000a768:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000a76a:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000a76c:	004a      	lsls	r2, r1, #1
1000a76e:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000a770:	1882      	adds	r2, r0, r2
1000a772:	7853      	ldrb	r3, [r2, #1]
1000a774:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000a776:	b2db      	uxtb	r3, r3
1000a778:	43a3      	bics	r3, r4
1000a77a:	7053      	strb	r3, [r2, #1]
1000a77c:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000a77e:	2919      	cmp	r1, #25
1000a780:	d1f4      	bne.n	1000a76c <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000a782:	4b04      	ldr	r3, [pc, #16]	; (1000a794 <init_port_list+0x3c>)
1000a784:	785a      	ldrb	r2, [r3, #1]
1000a786:	3918      	subs	r1, #24
1000a788:	438a      	bics	r2, r1
1000a78a:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000a78c:	78da      	ldrb	r2, [r3, #3]
1000a78e:	438a      	bics	r2, r1
1000a790:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000a792:	bd70      	pop	{r4, r5, r6, pc}
1000a794:	10014344 	.word	0x10014344
1000a798:	10010271 	.word	0x10010271

1000a79c <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000a79c:	4a06      	ldr	r2, [pc, #24]	; (1000a7b8 <init_clock+0x1c>)
1000a79e:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000a7a0:	4b06      	ldr	r3, [pc, #24]	; (1000a7bc <init_clock+0x20>)
1000a7a2:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000a7a4:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000a7a6:	4a06      	ldr	r2, [pc, #24]	; (1000a7c0 <init_clock+0x24>)
1000a7a8:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000a7aa:	4906      	ldr	r1, [pc, #24]	; (1000a7c4 <init_clock+0x28>)
1000a7ac:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000a7ae:	4b06      	ldr	r3, [pc, #24]	; (1000a7c8 <init_clock+0x2c>)
1000a7b0:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000a7b2:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000a7b4:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000a7b6:	4770      	bx	lr
1000a7b8:	4000b00c 	.word	0x4000b00c
1000a7bc:	fffe0fd3 	.word	0xfffe0fd3
1000a7c0:	10014328 	.word	0x10014328
1000a7c4:	4000b010 	.word	0x4000b010
1000a7c8:	ffffe7c0 	.word	0xffffe7c0

1000a7cc <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000a7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a7ce:	4657      	mov	r7, sl
1000a7d0:	464e      	mov	r6, r9
1000a7d2:	4645      	mov	r5, r8
1000a7d4:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000a7d6:	4b4f      	ldr	r3, [pc, #316]	; (1000a914 <platform_driver_init+0x148>)
1000a7d8:	781b      	ldrb	r3, [r3, #0]
1000a7da:	2b00      	cmp	r3, #0
1000a7dc:	d004      	beq.n	1000a7e8 <platform_driver_init+0x1c>
1000a7de:	4b4d      	ldr	r3, [pc, #308]	; (1000a914 <platform_driver_init+0x148>)
1000a7e0:	781b      	ldrb	r3, [r3, #0]
1000a7e2:	2b01      	cmp	r3, #1
1000a7e4:	d100      	bne.n	1000a7e8 <platform_driver_init+0x1c>
1000a7e6:	e08c      	b.n	1000a902 <platform_driver_init+0x136>
		init_port_list();
1000a7e8:	4b4b      	ldr	r3, [pc, #300]	; (1000a918 <platform_driver_init+0x14c>)
1000a7ea:	4798      	blx	r3
		init_clock();
1000a7ec:	4b4b      	ldr	r3, [pc, #300]	; (1000a91c <platform_driver_init+0x150>)
1000a7ee:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000a7f0:	2300      	movs	r3, #0
1000a7f2:	4698      	mov	r8, r3
1000a7f4:	4b4a      	ldr	r3, [pc, #296]	; (1000a920 <platform_driver_init+0x154>)
1000a7f6:	4642      	mov	r2, r8
1000a7f8:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a7fa:	4c4a      	ldr	r4, [pc, #296]	; (1000a924 <platform_driver_init+0x158>)
1000a7fc:	2380      	movs	r3, #128	; 0x80
1000a7fe:	2280      	movs	r2, #128	; 0x80
1000a800:	0412      	lsls	r2, r2, #16
1000a802:	4692      	mov	sl, r2
1000a804:	50e2      	str	r2, [r4, r3]
1000a806:	2280      	movs	r2, #128	; 0x80
1000a808:	0452      	lsls	r2, r2, #17
1000a80a:	4691      	mov	r9, r2
1000a80c:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000a80e:	4d46      	ldr	r5, [pc, #280]	; (1000a928 <platform_driver_init+0x15c>)
1000a810:	4b46      	ldr	r3, [pc, #280]	; (1000a92c <platform_driver_init+0x160>)
1000a812:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000a814:	4b46      	ldr	r3, [pc, #280]	; (1000a930 <platform_driver_init+0x164>)
1000a816:	4a47      	ldr	r2, [pc, #284]	; (1000a934 <platform_driver_init+0x168>)
1000a818:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000a81a:	4947      	ldr	r1, [pc, #284]	; (1000a938 <platform_driver_init+0x16c>)
1000a81c:	4a47      	ldr	r2, [pc, #284]	; (1000a93c <platform_driver_init+0x170>)
1000a81e:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000a820:	4a47      	ldr	r2, [pc, #284]	; (1000a940 <platform_driver_init+0x174>)
1000a822:	6811      	ldr	r1, [r2, #0]
1000a824:	4a47      	ldr	r2, [pc, #284]	; (1000a944 <platform_driver_init+0x178>)
1000a826:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000a828:	4a47      	ldr	r2, [pc, #284]	; (1000a948 <platform_driver_init+0x17c>)
1000a82a:	6811      	ldr	r1, [r2, #0]
1000a82c:	4a47      	ldr	r2, [pc, #284]	; (1000a94c <platform_driver_init+0x180>)
1000a82e:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000a830:	4947      	ldr	r1, [pc, #284]	; (1000a950 <platform_driver_init+0x184>)
1000a832:	4a48      	ldr	r2, [pc, #288]	; (1000a954 <platform_driver_init+0x188>)
1000a834:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000a836:	4948      	ldr	r1, [pc, #288]	; (1000a958 <platform_driver_init+0x18c>)
1000a838:	4a48      	ldr	r2, [pc, #288]	; (1000a95c <platform_driver_init+0x190>)
1000a83a:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000a83c:	4f48      	ldr	r7, [pc, #288]	; (1000a960 <platform_driver_init+0x194>)
1000a83e:	4a49      	ldr	r2, [pc, #292]	; (1000a964 <platform_driver_init+0x198>)
1000a840:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000a842:	4949      	ldr	r1, [pc, #292]	; (1000a968 <platform_driver_init+0x19c>)
1000a844:	4a49      	ldr	r2, [pc, #292]	; (1000a96c <platform_driver_init+0x1a0>)
1000a846:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000a848:	4949      	ldr	r1, [pc, #292]	; (1000a970 <platform_driver_init+0x1a4>)
1000a84a:	4a4a      	ldr	r2, [pc, #296]	; (1000a974 <platform_driver_init+0x1a8>)
1000a84c:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000a84e:	4e4a      	ldr	r6, [pc, #296]	; (1000a978 <platform_driver_init+0x1ac>)
1000a850:	4a4a      	ldr	r2, [pc, #296]	; (1000a97c <platform_driver_init+0x1b0>)
1000a852:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000a854:	494a      	ldr	r1, [pc, #296]	; (1000a980 <platform_driver_init+0x1b4>)
1000a856:	4a4b      	ldr	r2, [pc, #300]	; (1000a984 <platform_driver_init+0x1b8>)
1000a858:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000a85a:	494b      	ldr	r1, [pc, #300]	; (1000a988 <platform_driver_init+0x1bc>)
1000a85c:	4a4b      	ldr	r2, [pc, #300]	; (1000a98c <platform_driver_init+0x1c0>)
1000a85e:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000a860:	494b      	ldr	r1, [pc, #300]	; (1000a990 <platform_driver_init+0x1c4>)
1000a862:	4a4c      	ldr	r2, [pc, #304]	; (1000a994 <platform_driver_init+0x1c8>)
1000a864:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000a866:	494c      	ldr	r1, [pc, #304]	; (1000a998 <platform_driver_init+0x1cc>)
1000a868:	4a4c      	ldr	r2, [pc, #304]	; (1000a99c <platform_driver_init+0x1d0>)
1000a86a:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000a86c:	494c      	ldr	r1, [pc, #304]	; (1000a9a0 <platform_driver_init+0x1d4>)
1000a86e:	4a4d      	ldr	r2, [pc, #308]	; (1000a9a4 <platform_driver_init+0x1d8>)
1000a870:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000a872:	2028      	movs	r0, #40	; 0x28
1000a874:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000a876:	494c      	ldr	r1, [pc, #304]	; (1000a9a8 <platform_driver_init+0x1dc>)
1000a878:	2028      	movs	r0, #40	; 0x28
1000a87a:	682b      	ldr	r3, [r5, #0]
1000a87c:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000a87e:	682b      	ldr	r3, [r5, #0]
1000a880:	494a      	ldr	r1, [pc, #296]	; (1000a9ac <platform_driver_init+0x1e0>)
1000a882:	2027      	movs	r0, #39	; 0x27
1000a884:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000a886:	4b4a      	ldr	r3, [pc, #296]	; (1000a9b0 <platform_driver_init+0x1e4>)
1000a888:	681a      	ldr	r2, [r3, #0]
1000a88a:	4b4a      	ldr	r3, [pc, #296]	; (1000a9b4 <platform_driver_init+0x1e8>)
1000a88c:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000a88e:	4a4a      	ldr	r2, [pc, #296]	; (1000a9b8 <platform_driver_init+0x1ec>)
1000a890:	4b4a      	ldr	r3, [pc, #296]	; (1000a9bc <platform_driver_init+0x1f0>)
1000a892:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000a894:	4a4a      	ldr	r2, [pc, #296]	; (1000a9c0 <platform_driver_init+0x1f4>)
1000a896:	4b4b      	ldr	r3, [pc, #300]	; (1000a9c4 <platform_driver_init+0x1f8>)
1000a898:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000a89a:	4a4b      	ldr	r2, [pc, #300]	; (1000a9c8 <platform_driver_init+0x1fc>)
1000a89c:	4b4b      	ldr	r3, [pc, #300]	; (1000a9cc <platform_driver_init+0x200>)
1000a89e:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000a8a0:	4a4b      	ldr	r2, [pc, #300]	; (1000a9d0 <platform_driver_init+0x204>)
1000a8a2:	4b4c      	ldr	r3, [pc, #304]	; (1000a9d4 <platform_driver_init+0x208>)
1000a8a4:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000a8a6:	4a4c      	ldr	r2, [pc, #304]	; (1000a9d8 <platform_driver_init+0x20c>)
1000a8a8:	4b4c      	ldr	r3, [pc, #304]	; (1000a9dc <platform_driver_init+0x210>)
1000a8aa:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000a8ac:	4a4c      	ldr	r2, [pc, #304]	; (1000a9e0 <platform_driver_init+0x214>)
1000a8ae:	4b4d      	ldr	r3, [pc, #308]	; (1000a9e4 <platform_driver_init+0x218>)
1000a8b0:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000a8b2:	4a4d      	ldr	r2, [pc, #308]	; (1000a9e8 <platform_driver_init+0x21c>)
1000a8b4:	4b4d      	ldr	r3, [pc, #308]	; (1000a9ec <platform_driver_init+0x220>)
1000a8b6:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000a8b8:	22a0      	movs	r2, #160	; 0xa0
1000a8ba:	0092      	lsls	r2, r2, #2
1000a8bc:	2100      	movs	r1, #0
1000a8be:	484c      	ldr	r0, [pc, #304]	; (1000a9f0 <platform_driver_init+0x224>)
1000a8c0:	4b4c      	ldr	r3, [pc, #304]	; (1000a9f4 <platform_driver_init+0x228>)
1000a8c2:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000a8c4:	2280      	movs	r2, #128	; 0x80
1000a8c6:	0092      	lsls	r2, r2, #2
1000a8c8:	4b4b      	ldr	r3, [pc, #300]	; (1000a9f8 <platform_driver_init+0x22c>)
1000a8ca:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000a8cc:	4b4b      	ldr	r3, [pc, #300]	; (1000a9fc <platform_driver_init+0x230>)
1000a8ce:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a8d0:	4653      	mov	r3, sl
1000a8d2:	6023      	str	r3, [r4, #0]
1000a8d4:	464b      	mov	r3, r9
1000a8d6:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000a8d8:	4b49      	ldr	r3, [pc, #292]	; (1000aa00 <platform_driver_init+0x234>)
1000a8da:	4642      	mov	r2, r8
1000a8dc:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000a8de:	683b      	ldr	r3, [r7, #0]
1000a8e0:	4a48      	ldr	r2, [pc, #288]	; (1000aa04 <platform_driver_init+0x238>)
1000a8e2:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000a8e4:	6833      	ldr	r3, [r6, #0]
1000a8e6:	4a48      	ldr	r2, [pc, #288]	; (1000aa08 <platform_driver_init+0x23c>)
1000a8e8:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000a8ea:	2000      	movs	r0, #0
1000a8ec:	4c47      	ldr	r4, [pc, #284]	; (1000aa0c <platform_driver_init+0x240>)
1000a8ee:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000a8f0:	2001      	movs	r0, #1
1000a8f2:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000a8f4:	2002      	movs	r0, #2
1000a8f6:	47a0      	blx	r4
		platform_initialized = 1;
1000a8f8:	2201      	movs	r2, #1
1000a8fa:	4b06      	ldr	r3, [pc, #24]	; (1000a914 <platform_driver_init+0x148>)
1000a8fc:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000a8fe:	2000      	movs	r0, #0
1000a900:	e003      	b.n	1000a90a <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000a902:	2201      	movs	r2, #1
1000a904:	4b03      	ldr	r3, [pc, #12]	; (1000a914 <platform_driver_init+0x148>)
1000a906:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000a908:	2001      	movs	r0, #1
	}
	return status;
}
1000a90a:	bc1c      	pop	{r2, r3, r4}
1000a90c:	4690      	mov	r8, r2
1000a90e:	4699      	mov	r9, r3
1000a910:	46a2      	mov	sl, r4
1000a912:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a914:	10013984 	.word	0x10013984
1000a918:	1000a759 	.word	0x1000a759
1000a91c:	1000a79d 	.word	0x1000a79d
1000a920:	100139a0 	.word	0x100139a0
1000a924:	e000e100 	.word	0xe000e100
1000a928:	100145f8 	.word	0x100145f8
1000a92c:	000007d7 	.word	0x000007d7
1000a930:	000007bd 	.word	0x000007bd
1000a934:	10014334 	.word	0x10014334
1000a938:	0001bc51 	.word	0x0001bc51
1000a93c:	100145fc 	.word	0x100145fc
1000a940:	100400bc 	.word	0x100400bc
1000a944:	10013978 	.word	0x10013978
1000a948:	100400b8 	.word	0x100400b8
1000a94c:	10013974 	.word	0x10013974
1000a950:	0001b99f 	.word	0x0001b99f
1000a954:	10014330 	.word	0x10014330
1000a958:	0001b9db 	.word	0x0001b9db
1000a95c:	1001433c 	.word	0x1001433c
1000a960:	1001460c 	.word	0x1001460c
1000a964:	1004003c 	.word	0x1004003c
1000a968:	10041fc0 	.word	0x10041fc0
1000a96c:	10014340 	.word	0x10014340
1000a970:	10041fc4 	.word	0x10041fc4
1000a974:	10014608 	.word	0x10014608
1000a978:	10014600 	.word	0x10014600
1000a97c:	10041fd4 	.word	0x10041fd4
1000a980:	10041fd8 	.word	0x10041fd8
1000a984:	10014338 	.word	0x10014338
1000a988:	0001cbe9 	.word	0x0001cbe9
1000a98c:	10013994 	.word	0x10013994
1000a990:	0001cd8f 	.word	0x0001cd8f
1000a994:	10013988 	.word	0x10013988
1000a998:	0001cea3 	.word	0x0001cea3
1000a99c:	100139a4 	.word	0x100139a4
1000a9a0:	0001cbcf 	.word	0x0001cbcf
1000a9a4:	10013980 	.word	0x10013980
1000a9a8:	1000ae41 	.word	0x1000ae41
1000a9ac:	1000add5 	.word	0x1000add5
1000a9b0:	100400e4 	.word	0x100400e4
1000a9b4:	1001399c 	.word	0x1001399c
1000a9b8:	00019fe9 	.word	0x00019fe9
1000a9bc:	100139ac 	.word	0x100139ac
1000a9c0:	0001dbdd 	.word	0x0001dbdd
1000a9c4:	1001397c 	.word	0x1001397c
1000a9c8:	0001dc5b 	.word	0x0001dc5b
1000a9cc:	10013990 	.word	0x10013990
1000a9d0:	100405ec 	.word	0x100405ec
1000a9d4:	1001398c 	.word	0x1001398c
1000a9d8:	0001d5e3 	.word	0x0001d5e3
1000a9dc:	10013998 	.word	0x10013998
1000a9e0:	10040c20 	.word	0x10040c20
1000a9e4:	100139b0 	.word	0x100139b0
1000a9e8:	00019f09 	.word	0x00019f09
1000a9ec:	10013970 	.word	0x10013970
1000a9f0:	10014378 	.word	0x10014378
1000a9f4:	10010271 	.word	0x10010271
1000a9f8:	10014610 	.word	0x10014610
1000a9fc:	1000a685 	.word	0x1000a685
1000aa00:	10014604 	.word	0x10014604
1000aa04:	1000a72d 	.word	0x1000a72d
1000aa08:	1000ae9d 	.word	0x1000ae9d
1000aa0c:	1000ae85 	.word	0x1000ae85

1000aa10 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000aa10:	4b04      	ldr	r3, [pc, #16]	; (1000aa24 <platform_register_ble_msg_handler+0x14>)
1000aa12:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000aa14:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000aa16:	2a01      	cmp	r2, #1
1000aa18:	d102      	bne.n	1000aa20 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000aa1a:	4b03      	ldr	r3, [pc, #12]	; (1000aa28 <platform_register_ble_msg_handler+0x18>)
1000aa1c:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000aa1e:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000aa20:	0018      	movs	r0, r3
1000aa22:	4770      	bx	lr
1000aa24:	10013984 	.word	0x10013984
1000aa28:	100139a0 	.word	0x100139a0

1000aa2c <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000aa2c:	b570      	push	{r4, r5, r6, lr}
1000aa2e:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000aa30:	4b0e      	ldr	r3, [pc, #56]	; (1000aa6c <platform_interface_send+0x40>)
1000aa32:	681b      	ldr	r3, [r3, #0]
1000aa34:	2b00      	cmp	r3, #0
1000aa36:	d002      	beq.n	1000aa3e <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000aa38:	8840      	ldrh	r0, [r0, #2]
1000aa3a:	4798      	blx	r3
1000aa3c:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000aa3e:	88e3      	ldrh	r3, [r4, #6]
1000aa40:	88a2      	ldrh	r2, [r4, #4]
1000aa42:	8861      	ldrh	r1, [r4, #2]
1000aa44:	8820      	ldrh	r0, [r4, #0]
1000aa46:	4d0a      	ldr	r5, [pc, #40]	; (1000aa70 <platform_interface_send+0x44>)
1000aa48:	682d      	ldr	r5, [r5, #0]
1000aa4a:	47a8      	blx	r5
1000aa4c:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000aa4e:	88e2      	ldrh	r2, [r4, #6]
1000aa50:	2a00      	cmp	r2, #0
1000aa52:	d102      	bne.n	1000aa5a <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000aa54:	4b07      	ldr	r3, [pc, #28]	; (1000aa74 <platform_interface_send+0x48>)
1000aa56:	4798      	blx	r3
1000aa58:	e006      	b.n	1000aa68 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000aa5a:	0021      	movs	r1, r4
1000aa5c:	3108      	adds	r1, #8
1000aa5e:	4b06      	ldr	r3, [pc, #24]	; (1000aa78 <platform_interface_send+0x4c>)
1000aa60:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000aa62:	0028      	movs	r0, r5
1000aa64:	4b03      	ldr	r3, [pc, #12]	; (1000aa74 <platform_interface_send+0x48>)
1000aa66:	4798      	blx	r3
	}
}
1000aa68:	bd70      	pop	{r4, r5, r6, pc}
1000aa6a:	46c0      	nop			; (mov r8, r8)
1000aa6c:	10013978 	.word	0x10013978
1000aa70:	100139ac 	.word	0x100139ac
1000aa74:	1000a6b5 	.word	0x1000a6b5
1000aa78:	1001025f 	.word	0x1001025f

1000aa7c <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000aa7c:	b570      	push	{r4, r5, r6, lr}
1000aa7e:	0015      	movs	r5, r2
1000aa80:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000aa82:	020a      	lsls	r2, r1, #8
1000aa84:	4302      	orrs	r2, r0
1000aa86:	4b0a      	ldr	r3, [pc, #40]	; (1000aab0 <send_plf_int_msg_ind+0x34>)
1000aa88:	681e      	ldr	r6, [r3, #0]
1000aa8a:	0023      	movs	r3, r4
1000aa8c:	2105      	movs	r1, #5
1000aa8e:	20a0      	movs	r0, #160	; 0xa0
1000aa90:	00c0      	lsls	r0, r0, #3
1000aa92:	47b0      	blx	r6
1000aa94:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000aa96:	d00a      	beq.n	1000aaae <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000aa98:	2c00      	cmp	r4, #0
1000aa9a:	d005      	beq.n	1000aaa8 <send_plf_int_msg_ind+0x2c>
1000aa9c:	2d00      	cmp	r5, #0
1000aa9e:	d003      	beq.n	1000aaa8 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000aaa0:	0022      	movs	r2, r4
1000aaa2:	0029      	movs	r1, r5
1000aaa4:	4b03      	ldr	r3, [pc, #12]	; (1000aab4 <send_plf_int_msg_ind+0x38>)
1000aaa6:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000aaa8:	0030      	movs	r0, r6
1000aaaa:	4b03      	ldr	r3, [pc, #12]	; (1000aab8 <send_plf_int_msg_ind+0x3c>)
1000aaac:	4798      	blx	r3
	}
}
1000aaae:	bd70      	pop	{r4, r5, r6, pc}
1000aab0:	100139ac 	.word	0x100139ac
1000aab4:	1001025f 	.word	0x1001025f
1000aab8:	1000a6b5 	.word	0x1000a6b5

1000aabc <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000aabc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000aabe:	465f      	mov	r7, fp
1000aac0:	4656      	mov	r6, sl
1000aac2:	464d      	mov	r5, r9
1000aac4:	4644      	mov	r4, r8
1000aac6:	b4f0      	push	{r4, r5, r6, r7}
1000aac8:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000aaca:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000aacc:	2300      	movs	r3, #0
1000aace:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000aad0:	1ce3      	adds	r3, r4, #3
1000aad2:	d81c      	bhi.n	1000ab0e <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000aad4:	220d      	movs	r2, #13
1000aad6:	2100      	movs	r1, #0
1000aad8:	a802      	add	r0, sp, #8
1000aada:	4b82      	ldr	r3, [pc, #520]	; (1000ace4 <platform_event_wait+0x228>)
1000aadc:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000aade:	2333      	movs	r3, #51	; 0x33
1000aae0:	aa02      	add	r2, sp, #8
1000aae2:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000aae4:	3b30      	subs	r3, #48	; 0x30
1000aae6:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000aae8:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000aaea:	3302      	adds	r3, #2
1000aaec:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000aaee:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000aaf0:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000aaf2:	0a23      	lsrs	r3, r4, #8
1000aaf4:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000aaf6:	0c23      	lsrs	r3, r4, #16
1000aaf8:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000aafa:	0e24      	lsrs	r4, r4, #24
1000aafc:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000aafe:	2301      	movs	r3, #1
1000ab00:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000ab02:	210d      	movs	r1, #13
1000ab04:	0010      	movs	r0, r2
1000ab06:	4b78      	ldr	r3, [pc, #480]	; (1000ace8 <platform_event_wait+0x22c>)
1000ab08:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000ab0a:	2301      	movs	r3, #1
1000ab0c:	4699      	mov	r9, r3
1000ab0e:	2400      	movs	r4, #0
1000ab10:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000ab12:	4f76      	ldr	r7, [pc, #472]	; (1000acec <platform_event_wait+0x230>)
1000ab14:	4e76      	ldr	r6, [pc, #472]	; (1000acf0 <platform_event_wait+0x234>)
1000ab16:	4977      	ldr	r1, [pc, #476]	; (1000acf4 <platform_event_wait+0x238>)
1000ab18:	6838      	ldr	r0, [r7, #0]
1000ab1a:	6833      	ldr	r3, [r6, #0]
1000ab1c:	4798      	blx	r3
1000ab1e:	2800      	cmp	r0, #0
1000ab20:	d000      	beq.n	1000ab24 <platform_event_wait+0x68>
1000ab22:	e088      	b.n	1000ac36 <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000ab24:	4b73      	ldr	r3, [pc, #460]	; (1000acf4 <platform_event_wait+0x238>)
1000ab26:	681c      	ldr	r4, [r3, #0]
1000ab28:	88a3      	ldrh	r3, [r4, #4]
1000ab2a:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000ab2c:	23cd      	movs	r3, #205	; 0xcd
1000ab2e:	009b      	lsls	r3, r3, #2
1000ab30:	459a      	cmp	sl, r3
1000ab32:	d100      	bne.n	1000ab36 <platform_event_wait+0x7a>
1000ab34:	e0c7      	b.n	1000acc6 <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000ab36:	8923      	ldrh	r3, [r4, #8]
1000ab38:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000ab3a:	8963      	ldrh	r3, [r4, #10]
1000ab3c:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000ab3e:	464b      	mov	r3, r9
1000ab40:	2b00      	cmp	r3, #0
1000ab42:	d011      	beq.n	1000ab68 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000ab44:	220d      	movs	r2, #13
1000ab46:	2100      	movs	r1, #0
1000ab48:	a802      	add	r0, sp, #8
1000ab4a:	4b66      	ldr	r3, [pc, #408]	; (1000ace4 <platform_event_wait+0x228>)
1000ab4c:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000ab4e:	2333      	movs	r3, #51	; 0x33
1000ab50:	aa02      	add	r2, sp, #8
1000ab52:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000ab54:	3b30      	subs	r3, #48	; 0x30
1000ab56:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000ab58:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000ab5a:	3302      	adds	r3, #2
1000ab5c:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000ab5e:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000ab60:	210d      	movs	r1, #13
1000ab62:	0010      	movs	r0, r2
1000ab64:	4b60      	ldr	r3, [pc, #384]	; (1000ace8 <platform_event_wait+0x22c>)
1000ab66:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000ab68:	23a0      	movs	r3, #160	; 0xa0
1000ab6a:	00db      	lsls	r3, r3, #3
1000ab6c:	459a      	cmp	sl, r3
1000ab6e:	d121      	bne.n	1000abb4 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000ab70:	4b61      	ldr	r3, [pc, #388]	; (1000acf8 <platform_event_wait+0x23c>)
1000ab72:	881b      	ldrh	r3, [r3, #0]
1000ab74:	4443      	add	r3, r8
1000ab76:	22a0      	movs	r2, #160	; 0xa0
1000ab78:	0092      	lsls	r2, r2, #2
1000ab7a:	4293      	cmp	r3, r2
1000ab7c:	dd02      	ble.n	1000ab84 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000ab7e:	3a80      	subs	r2, #128	; 0x80
1000ab80:	4b5d      	ldr	r3, [pc, #372]	; (1000acf8 <platform_event_wait+0x23c>)
1000ab82:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000ab84:	4b5c      	ldr	r3, [pc, #368]	; (1000acf8 <platform_event_wait+0x23c>)
1000ab86:	469a      	mov	sl, r3
1000ab88:	881d      	ldrh	r5, [r3, #0]
1000ab8a:	4b5c      	ldr	r3, [pc, #368]	; (1000acfc <platform_event_wait+0x240>)
1000ab8c:	18ed      	adds	r5, r5, r3
1000ab8e:	0021      	movs	r1, r4
1000ab90:	310c      	adds	r1, #12
1000ab92:	4642      	mov	r2, r8
1000ab94:	0028      	movs	r0, r5
1000ab96:	4b5a      	ldr	r3, [pc, #360]	; (1000ad00 <platform_event_wait+0x244>)
1000ab98:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000ab9a:	4642      	mov	r2, r8
1000ab9c:	0029      	movs	r1, r5
1000ab9e:	4658      	mov	r0, fp
1000aba0:	4b58      	ldr	r3, [pc, #352]	; (1000ad04 <platform_event_wait+0x248>)
1000aba2:	4798      	blx	r3
				plf_event_buff_index += len;
1000aba4:	4653      	mov	r3, sl
1000aba6:	881b      	ldrh	r3, [r3, #0]
1000aba8:	4443      	add	r3, r8
1000abaa:	4652      	mov	r2, sl
1000abac:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000abae:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000abb0:	2502      	movs	r5, #2
1000abb2:	e03a      	b.n	1000ac2a <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000abb4:	4b54      	ldr	r3, [pc, #336]	; (1000ad08 <platform_event_wait+0x24c>)
1000abb6:	681b      	ldr	r3, [r3, #0]
1000abb8:	2b00      	cmp	r3, #0
1000abba:	d032      	beq.n	1000ac22 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000abbc:	4b4d      	ldr	r3, [pc, #308]	; (1000acf4 <platform_event_wait+0x238>)
1000abbe:	681a      	ldr	r2, [r3, #0]
1000abc0:	8893      	ldrh	r3, [r2, #4]
1000abc2:	21cd      	movs	r1, #205	; 0xcd
1000abc4:	0089      	lsls	r1, r1, #2
1000abc6:	428b      	cmp	r3, r1
1000abc8:	d104      	bne.n	1000abd4 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000abca:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000abcc:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000abce:	2b00      	cmp	r3, #0
1000abd0:	d02b      	beq.n	1000ac2a <platform_event_wait+0x16e>
1000abd2:	e028      	b.n	1000ac26 <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000abd4:	4c4d      	ldr	r4, [pc, #308]	; (1000ad0c <platform_event_wait+0x250>)
1000abd6:	4d49      	ldr	r5, [pc, #292]	; (1000acfc <platform_event_wait+0x240>)
1000abd8:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000abda:	702b      	strb	r3, [r5, #0]
1000abdc:	0a1b      	lsrs	r3, r3, #8
1000abde:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000abe0:	8910      	ldrh	r0, [r2, #8]
1000abe2:	4b4b      	ldr	r3, [pc, #300]	; (1000ad10 <platform_event_wait+0x254>)
1000abe4:	681b      	ldr	r3, [r3, #0]
1000abe6:	4798      	blx	r3
1000abe8:	7128      	strb	r0, [r5, #4]
1000abea:	0a00      	lsrs	r0, r0, #8
1000abec:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000abee:	6820      	ldr	r0, [r4, #0]
1000abf0:	4b40      	ldr	r3, [pc, #256]	; (1000acf4 <platform_event_wait+0x238>)
1000abf2:	681a      	ldr	r2, [r3, #0]
1000abf4:	88d2      	ldrh	r2, [r2, #6]
1000abf6:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000abf8:	681d      	ldr	r5, [r3, #0]
1000abfa:	896b      	ldrh	r3, [r5, #10]
1000abfc:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000abfe:	3008      	adds	r0, #8
1000ac00:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000ac02:	896a      	ldrh	r2, [r5, #10]
1000ac04:	2a00      	cmp	r2, #0
1000ac06:	d003      	beq.n	1000ac10 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000ac08:	0029      	movs	r1, r5
1000ac0a:	310c      	adds	r1, #12
1000ac0c:	4b3c      	ldr	r3, [pc, #240]	; (1000ad00 <platform_event_wait+0x244>)
1000ac0e:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000ac10:	8969      	ldrh	r1, [r5, #10]
1000ac12:	3108      	adds	r1, #8
1000ac14:	4b3c      	ldr	r3, [pc, #240]	; (1000ad08 <platform_event_wait+0x24c>)
1000ac16:	681b      	ldr	r3, [r3, #0]
1000ac18:	4838      	ldr	r0, [pc, #224]	; (1000acfc <platform_event_wait+0x240>)
1000ac1a:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000ac1c:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000ac1e:	2503      	movs	r5, #3
1000ac20:	e003      	b.n	1000ac2a <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000ac22:	2400      	movs	r4, #0
1000ac24:	e001      	b.n	1000ac2a <platform_event_wait+0x16e>
1000ac26:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000ac28:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000ac2a:	4b32      	ldr	r3, [pc, #200]	; (1000acf4 <platform_event_wait+0x238>)
1000ac2c:	6818      	ldr	r0, [r3, #0]
1000ac2e:	4b39      	ldr	r3, [pc, #228]	; (1000ad14 <platform_event_wait+0x258>)
1000ac30:	681b      	ldr	r3, [r3, #0]
1000ac32:	4798      	blx	r3
1000ac34:	e000      	b.n	1000ac38 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000ac36:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000ac38:	2c00      	cmp	r4, #0
1000ac3a:	d000      	beq.n	1000ac3e <platform_event_wait+0x182>
1000ac3c:	e76b      	b.n	1000ab16 <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000ac3e:	464b      	mov	r3, r9
1000ac40:	2b00      	cmp	r3, #0
1000ac42:	d046      	beq.n	1000acd2 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000ac44:	4b29      	ldr	r3, [pc, #164]	; (1000acec <platform_event_wait+0x230>)
1000ac46:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000ac48:	2e00      	cmp	r6, #0
1000ac4a:	d104      	bne.n	1000ac56 <platform_event_wait+0x19a>
1000ac4c:	2300      	movs	r3, #0
1000ac4e:	6a1c      	ldr	r4, [r3, #32]
1000ac50:	2c00      	cmp	r4, #0
1000ac52:	d131      	bne.n	1000acb8 <platform_event_wait+0x1fc>
1000ac54:	e03d      	b.n	1000acd2 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000ac56:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000ac58:	2314      	movs	r3, #20
1000ac5a:	469c      	mov	ip, r3
1000ac5c:	44b4      	add	ip, r6
1000ac5e:	4663      	mov	r3, ip
1000ac60:	4660      	mov	r0, ip
1000ac62:	9300      	str	r3, [sp, #0]
1000ac64:	4b2c      	ldr	r3, [pc, #176]	; (1000ad18 <platform_event_wait+0x25c>)
1000ac66:	681b      	ldr	r3, [r3, #0]
1000ac68:	4798      	blx	r3
	while(NULL != current)
1000ac6a:	2c00      	cmp	r4, #0
1000ac6c:	d01f      	beq.n	1000acae <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000ac6e:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000ac70:	23cd      	movs	r3, #205	; 0xcd
1000ac72:	009b      	lsls	r3, r3, #2
1000ac74:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000ac76:	4b27      	ldr	r3, [pc, #156]	; (1000ad14 <platform_event_wait+0x258>)
1000ac78:	469a      	mov	sl, r3
1000ac7a:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000ac7c:	6803      	ldr	r3, [r0, #0]
1000ac7e:	889b      	ldrh	r3, [r3, #4]
1000ac80:	4543      	cmp	r3, r8
1000ac82:	d110      	bne.n	1000aca6 <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000ac84:	2f00      	cmp	r7, #0
1000ac86:	d006      	beq.n	1000ac96 <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000ac88:	6883      	ldr	r3, [r0, #8]
1000ac8a:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000ac8c:	4653      	mov	r3, sl
1000ac8e:	681b      	ldr	r3, [r3, #0]
1000ac90:	4798      	blx	r3
				current = prev->pstrNext;
1000ac92:	68b8      	ldr	r0, [r7, #8]
1000ac94:	e009      	b.n	1000acaa <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000ac96:	6883      	ldr	r3, [r0, #8]
1000ac98:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000ac9a:	4b1e      	ldr	r3, [pc, #120]	; (1000ad14 <platform_event_wait+0x258>)
1000ac9c:	681b      	ldr	r3, [r3, #0]
1000ac9e:	9301      	str	r3, [sp, #4]
1000aca0:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000aca2:	6a30      	ldr	r0, [r6, #32]
1000aca4:	e001      	b.n	1000acaa <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000aca6:	0007      	movs	r7, r0
1000aca8:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000acaa:	2800      	cmp	r0, #0
1000acac:	d1e6      	bne.n	1000ac7c <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000acae:	4b1b      	ldr	r3, [pc, #108]	; (1000ad1c <platform_event_wait+0x260>)
1000acb0:	681b      	ldr	r3, [r3, #0]
1000acb2:	9800      	ldr	r0, [sp, #0]
1000acb4:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000acb6:	e00c      	b.n	1000acd2 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000acb8:	2314      	movs	r3, #20
1000acba:	9300      	str	r3, [sp, #0]
1000acbc:	4b16      	ldr	r3, [pc, #88]	; (1000ad18 <platform_event_wait+0x25c>)
1000acbe:	681b      	ldr	r3, [r3, #0]
1000acc0:	2014      	movs	r0, #20
1000acc2:	4798      	blx	r3
1000acc4:	e7d3      	b.n	1000ac6e <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000acc6:	4b10      	ldr	r3, [pc, #64]	; (1000ad08 <platform_event_wait+0x24c>)
1000acc8:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000acca:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000accc:	2b00      	cmp	r3, #0
1000acce:	d0ac      	beq.n	1000ac2a <platform_event_wait+0x16e>
1000acd0:	e77b      	b.n	1000abca <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000acd2:	0028      	movs	r0, r5
1000acd4:	b007      	add	sp, #28
1000acd6:	bc3c      	pop	{r2, r3, r4, r5}
1000acd8:	4690      	mov	r8, r2
1000acda:	4699      	mov	r9, r3
1000acdc:	46a2      	mov	sl, r4
1000acde:	46ab      	mov	fp, r5
1000ace0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ace2:	46c0      	nop			; (mov r8, r8)
1000ace4:	10010271 	.word	0x10010271
1000ace8:	1000aa2d 	.word	0x1000aa2d
1000acec:	100139b0 	.word	0x100139b0
1000acf0:	10013998 	.word	0x10013998
1000acf4:	1001396c 	.word	0x1001396c
1000acf8:	10014610 	.word	0x10014610
1000acfc:	10014378 	.word	0x10014378
1000ad00:	1001025f 	.word	0x1001025f
1000ad04:	1000a64d 	.word	0x1000a64d
1000ad08:	100139a0 	.word	0x100139a0
1000ad0c:	100139a8 	.word	0x100139a8
1000ad10:	10013974 	.word	0x10013974
1000ad14:	10013970 	.word	0x10013970
1000ad18:	10013990 	.word	0x10013990
1000ad1c:	1001397c 	.word	0x1001397c

1000ad20 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000ad20:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000ad22:	4b03      	ldr	r3, [pc, #12]	; (1000ad30 <acquire_sleep_lock+0x10>)
1000ad24:	681b      	ldr	r3, [r3, #0]
1000ad26:	2080      	movs	r0, #128	; 0x80
1000ad28:	0200      	lsls	r0, r0, #8
1000ad2a:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000ad2c:	2008      	movs	r0, #8
1000ad2e:	bd10      	pop	{r4, pc}
1000ad30:	10014330 	.word	0x10014330

1000ad34 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000ad34:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000ad36:	4b03      	ldr	r3, [pc, #12]	; (1000ad44 <release_message_lock+0x10>)
1000ad38:	681b      	ldr	r3, [r3, #0]
1000ad3a:	2080      	movs	r0, #128	; 0x80
1000ad3c:	01c0      	lsls	r0, r0, #7
1000ad3e:	4798      	blx	r3
	return status;
}
1000ad40:	2000      	movs	r0, #0
1000ad42:	bd10      	pop	{r4, pc}
1000ad44:	1001433c 	.word	0x1001433c

1000ad48 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000ad48:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000ad4a:	4c05      	ldr	r4, [pc, #20]	; (1000ad60 <release_sleep_lock+0x18>)
1000ad4c:	2080      	movs	r0, #128	; 0x80
1000ad4e:	01c0      	lsls	r0, r0, #7
1000ad50:	6823      	ldr	r3, [r4, #0]
1000ad52:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000ad54:	6823      	ldr	r3, [r4, #0]
1000ad56:	2080      	movs	r0, #128	; 0x80
1000ad58:	0200      	lsls	r0, r0, #8
1000ad5a:	4798      	blx	r3
	return status;
}
1000ad5c:	2000      	movs	r0, #0
1000ad5e:	bd10      	pop	{r4, pc}
1000ad60:	1001433c 	.word	0x1001433c

1000ad64 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000ad64:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000ad66:	4a18      	ldr	r2, [pc, #96]	; (1000adc8 <gpio1_combined_isr_handler+0x64>)
1000ad68:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000ad6a:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000ad6c:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000ad6e:	2180      	movs	r1, #128	; 0x80
1000ad70:	0209      	lsls	r1, r1, #8
1000ad72:	4301      	orrs	r1, r0
1000ad74:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000ad76:	0010      	movs	r0, r2
1000ad78:	4d14      	ldr	r5, [pc, #80]	; (1000adcc <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000ad7a:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000ad7c:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000ad7e:	05db      	lsls	r3, r3, #23
1000ad80:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000ad82:	d011      	beq.n	1000ada8 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000ad84:	b2db      	uxtb	r3, r3
1000ad86:	4259      	negs	r1, r3
1000ad88:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000ad8a:	2b01      	cmp	r3, #1
1000ad8c:	d006      	beq.n	1000ad9c <gpio1_combined_isr_handler+0x38>
1000ad8e:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000ad90:	085b      	lsrs	r3, r3, #1
				index++;
1000ad92:	3101      	adds	r1, #1
1000ad94:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000ad96:	2b01      	cmp	r3, #1
1000ad98:	d1fa      	bne.n	1000ad90 <gpio1_combined_isr_handler+0x2c>
1000ad9a:	e000      	b.n	1000ad9e <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000ad9c:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000ad9e:	0023      	movs	r3, r4
1000ada0:	408b      	lsls	r3, r1
1000ada2:	b29b      	uxth	r3, r3
1000ada4:	8703      	strh	r3, [r0, #56]	; 0x38
1000ada6:	e003      	b.n	1000adb0 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000ada8:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000adaa:	432b      	orrs	r3, r5
1000adac:	b29b      	uxth	r3, r3
1000adae:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000adb0:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000adb2:	05db      	lsls	r3, r3, #23
1000adb4:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000adb6:	d1e2      	bne.n	1000ad7e <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000adb8:	2180      	movs	r1, #128	; 0x80
1000adba:	0049      	lsls	r1, r1, #1
1000adbc:	3381      	adds	r3, #129	; 0x81
1000adbe:	33ff      	adds	r3, #255	; 0xff
1000adc0:	4a03      	ldr	r2, [pc, #12]	; (1000add0 <gpio1_combined_isr_handler+0x6c>)
1000adc2:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000adc4:	bd30      	pop	{r4, r5, pc}
1000adc6:	46c0      	nop			; (mov r8, r8)
1000adc8:	40011000 	.word	0x40011000
1000adcc:	ffff8000 	.word	0xffff8000
1000add0:	e000e100 	.word	0xe000e100

1000add4 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000add4:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000add6:	4a17      	ldr	r2, [pc, #92]	; (1000ae34 <gpio0_combined_isr_handler+0x60>)
1000add8:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000adda:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000addc:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000adde:	2180      	movs	r1, #128	; 0x80
1000ade0:	0209      	lsls	r1, r1, #8
1000ade2:	4301      	orrs	r1, r0
1000ade4:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000ade6:	0010      	movs	r0, r2
1000ade8:	4d13      	ldr	r5, [pc, #76]	; (1000ae38 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000adea:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000adec:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000adee:	05db      	lsls	r3, r3, #23
1000adf0:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000adf2:	d011      	beq.n	1000ae18 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000adf4:	b2db      	uxtb	r3, r3
1000adf6:	4259      	negs	r1, r3
1000adf8:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000adfa:	2b01      	cmp	r3, #1
1000adfc:	d006      	beq.n	1000ae0c <gpio0_combined_isr_handler+0x38>
1000adfe:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000ae00:	085b      	lsrs	r3, r3, #1
				index++;
1000ae02:	3101      	adds	r1, #1
1000ae04:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000ae06:	2b01      	cmp	r3, #1
1000ae08:	d1fa      	bne.n	1000ae00 <gpio0_combined_isr_handler+0x2c>
1000ae0a:	e000      	b.n	1000ae0e <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000ae0c:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000ae0e:	0023      	movs	r3, r4
1000ae10:	408b      	lsls	r3, r1
1000ae12:	b29b      	uxth	r3, r3
1000ae14:	8703      	strh	r3, [r0, #56]	; 0x38
1000ae16:	e003      	b.n	1000ae20 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000ae18:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000ae1a:	432b      	orrs	r3, r5
1000ae1c:	b29b      	uxth	r3, r3
1000ae1e:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000ae20:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000ae22:	05db      	lsls	r3, r3, #23
1000ae24:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000ae26:	d1e2      	bne.n	1000adee <gpio0_combined_isr_handler+0x1a>
1000ae28:	2180      	movs	r1, #128	; 0x80
1000ae2a:	3381      	adds	r3, #129	; 0x81
1000ae2c:	33ff      	adds	r3, #255	; 0xff
1000ae2e:	4a03      	ldr	r2, [pc, #12]	; (1000ae3c <gpio0_combined_isr_handler+0x68>)
1000ae30:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000ae32:	bd30      	pop	{r4, r5, pc}
1000ae34:	40010000 	.word	0x40010000
1000ae38:	ffff8000 	.word	0xffff8000
1000ae3c:	e000e100 	.word	0xe000e100

1000ae40 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000ae40:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000ae42:	4b0c      	ldr	r3, [pc, #48]	; (1000ae74 <PORT1_COMB_Handler+0x34>)
1000ae44:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000ae46:	0b5b      	lsrs	r3, r3, #13
1000ae48:	d010      	beq.n	1000ae6c <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000ae4a:	4b0b      	ldr	r3, [pc, #44]	; (1000ae78 <PORT1_COMB_Handler+0x38>)
1000ae4c:	681b      	ldr	r3, [r3, #0]
1000ae4e:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000ae50:	4a08      	ldr	r2, [pc, #32]	; (1000ae74 <PORT1_COMB_Handler+0x34>)
1000ae52:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000ae54:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000ae56:	0b5b      	lsrs	r3, r3, #13
1000ae58:	035b      	lsls	r3, r3, #13
1000ae5a:	430b      	orrs	r3, r1
1000ae5c:	8713      	strh	r3, [r2, #56]	; 0x38
1000ae5e:	2180      	movs	r1, #128	; 0x80
1000ae60:	0049      	lsls	r1, r1, #1
1000ae62:	23c0      	movs	r3, #192	; 0xc0
1000ae64:	005b      	lsls	r3, r3, #1
1000ae66:	4a05      	ldr	r2, [pc, #20]	; (1000ae7c <PORT1_COMB_Handler+0x3c>)
1000ae68:	50d1      	str	r1, [r2, r3]
1000ae6a:	e001      	b.n	1000ae70 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000ae6c:	4b04      	ldr	r3, [pc, #16]	; (1000ae80 <PORT1_COMB_Handler+0x40>)
1000ae6e:	4798      	blx	r3
	}
}
1000ae70:	bd10      	pop	{r4, pc}
1000ae72:	46c0      	nop			; (mov r8, r8)
1000ae74:	40011000 	.word	0x40011000
1000ae78:	100145fc 	.word	0x100145fc
1000ae7c:	e000e100 	.word	0xe000e100
1000ae80:	1000ad65 	.word	0x1000ad65

1000ae84 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000ae84:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000ae86:	2802      	cmp	r0, #2
1000ae88:	d804      	bhi.n	1000ae94 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000ae8a:	0080      	lsls	r0, r0, #2
1000ae8c:	2200      	movs	r2, #0
1000ae8e:	4b02      	ldr	r3, [pc, #8]	; (1000ae98 <wakeup_int_unregister_callback+0x14>)
1000ae90:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000ae92:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000ae94:	0018      	movs	r0, r3
1000ae96:	4770      	bx	lr
1000ae98:	10014614 	.word	0x10014614

1000ae9c <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000ae9c:	b510      	push	{r4, lr}
1000ae9e:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000aea0:	7803      	ldrb	r3, [r0, #0]
1000aea2:	2b01      	cmp	r3, #1
1000aea4:	d108      	bne.n	1000aeb8 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000aea6:	4b11      	ldr	r3, [pc, #68]	; (1000aeec <wakeup_active_event_callback+0x50>)
1000aea8:	681b      	ldr	r3, [r3, #0]
1000aeaa:	2b00      	cmp	r3, #0
1000aeac:	d000      	beq.n	1000aeb0 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000aeae:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000aeb0:	23ff      	movs	r3, #255	; 0xff
1000aeb2:	6822      	ldr	r2, [r4, #0]
1000aeb4:	439a      	bics	r2, r3
1000aeb6:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000aeb8:	7863      	ldrb	r3, [r4, #1]
1000aeba:	2b01      	cmp	r3, #1
1000aebc:	d108      	bne.n	1000aed0 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000aebe:	4b0b      	ldr	r3, [pc, #44]	; (1000aeec <wakeup_active_event_callback+0x50>)
1000aec0:	685b      	ldr	r3, [r3, #4]
1000aec2:	2b00      	cmp	r3, #0
1000aec4:	d000      	beq.n	1000aec8 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000aec6:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000aec8:	4b09      	ldr	r3, [pc, #36]	; (1000aef0 <wakeup_active_event_callback+0x54>)
1000aeca:	6822      	ldr	r2, [r4, #0]
1000aecc:	4013      	ands	r3, r2
1000aece:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000aed0:	78a3      	ldrb	r3, [r4, #2]
1000aed2:	2b01      	cmp	r3, #1
1000aed4:	d108      	bne.n	1000aee8 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000aed6:	4b05      	ldr	r3, [pc, #20]	; (1000aeec <wakeup_active_event_callback+0x50>)
1000aed8:	689b      	ldr	r3, [r3, #8]
1000aeda:	2b00      	cmp	r3, #0
1000aedc:	d000      	beq.n	1000aee0 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000aede:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000aee0:	4b04      	ldr	r3, [pc, #16]	; (1000aef4 <wakeup_active_event_callback+0x58>)
1000aee2:	6822      	ldr	r2, [r4, #0]
1000aee4:	4013      	ands	r3, r2
1000aee6:	6023      	str	r3, [r4, #0]
	}
}
1000aee8:	bd10      	pop	{r4, pc}
1000aeea:	46c0      	nop			; (mov r8, r8)
1000aeec:	10014614 	.word	0x10014614
1000aef0:	ffff00ff 	.word	0xffff00ff
1000aef4:	ff00ffff 	.word	0xff00ffff

1000aef8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000aef8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000aefa:	4647      	mov	r7, r8
1000aefc:	b480      	push	{r7}
1000aefe:	000c      	movs	r4, r1
1000af00:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000af02:	2800      	cmp	r0, #0
1000af04:	d10d      	bne.n	1000af22 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000af06:	2a00      	cmp	r2, #0
1000af08:	dd0e      	ble.n	1000af28 <_read+0x30>
1000af0a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000af0c:	4e08      	ldr	r6, [pc, #32]	; (1000af30 <_read+0x38>)
1000af0e:	4d09      	ldr	r5, [pc, #36]	; (1000af34 <_read+0x3c>)
1000af10:	6830      	ldr	r0, [r6, #0]
1000af12:	0021      	movs	r1, r4
1000af14:	682b      	ldr	r3, [r5, #0]
1000af16:	4798      	blx	r3
		ptr++;
1000af18:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000af1a:	42a7      	cmp	r7, r4
1000af1c:	d1f8      	bne.n	1000af10 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000af1e:	4640      	mov	r0, r8
1000af20:	e003      	b.n	1000af2a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000af22:	2001      	movs	r0, #1
1000af24:	4240      	negs	r0, r0
1000af26:	e000      	b.n	1000af2a <_read+0x32>
	}

	for (; len > 0; --len) {
1000af28:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000af2a:	bc04      	pop	{r2}
1000af2c:	4690      	mov	r8, r2
1000af2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000af30:	10014628 	.word	0x10014628
1000af34:	10014620 	.word	0x10014620

1000af38 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000af38:	b5f0      	push	{r4, r5, r6, r7, lr}
1000af3a:	4647      	mov	r7, r8
1000af3c:	b480      	push	{r7}
1000af3e:	000e      	movs	r6, r1
1000af40:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000af42:	3801      	subs	r0, #1
1000af44:	2802      	cmp	r0, #2
1000af46:	d811      	bhi.n	1000af6c <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000af48:	2a00      	cmp	r2, #0
1000af4a:	d012      	beq.n	1000af72 <_write+0x3a>
1000af4c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000af4e:	4b0c      	ldr	r3, [pc, #48]	; (1000af80 <_write+0x48>)
1000af50:	4698      	mov	r8, r3
1000af52:	4f0c      	ldr	r7, [pc, #48]	; (1000af84 <_write+0x4c>)
1000af54:	4643      	mov	r3, r8
1000af56:	6818      	ldr	r0, [r3, #0]
1000af58:	5d31      	ldrb	r1, [r6, r4]
1000af5a:	683b      	ldr	r3, [r7, #0]
1000af5c:	4798      	blx	r3
1000af5e:	2800      	cmp	r0, #0
1000af60:	db09      	blt.n	1000af76 <_write+0x3e>
			return -1;
		}
		++nChars;
1000af62:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000af64:	42a5      	cmp	r5, r4
1000af66:	d1f5      	bne.n	1000af54 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000af68:	0020      	movs	r0, r4
1000af6a:	e006      	b.n	1000af7a <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000af6c:	2001      	movs	r0, #1
1000af6e:	4240      	negs	r0, r0
1000af70:	e003      	b.n	1000af7a <_write+0x42>
	}

	for (; len != 0; --len) {
1000af72:	2000      	movs	r0, #0
1000af74:	e001      	b.n	1000af7a <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000af76:	2001      	movs	r0, #1
1000af78:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000af7a:	bc04      	pop	{r2}
1000af7c:	4690      	mov	r8, r2
1000af7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000af80:	10014628 	.word	0x10014628
1000af84:	10014624 	.word	0x10014624

1000af88 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000af88:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000af8a:	4b20      	ldr	r3, [pc, #128]	; (1000b00c <uart_rx0_isr_handler+0x84>)
1000af8c:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000af8e:	6823      	ldr	r3, [r4, #0]
1000af90:	7d1d      	ldrb	r5, [r3, #20]
1000af92:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000af94:	066a      	lsls	r2, r5, #25
1000af96:	d513      	bpl.n	1000afc0 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000af98:	211e      	movs	r1, #30
1000af9a:	2222      	movs	r2, #34	; 0x22
1000af9c:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000af9e:	7e1a      	ldrb	r2, [r3, #24]
1000afa0:	3123      	adds	r1, #35	; 0x23
1000afa2:	438a      	bics	r2, r1
1000afa4:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000afa6:	2321      	movs	r3, #33	; 0x21
1000afa8:	5ce3      	ldrb	r3, [r4, r3]
1000afaa:	071b      	lsls	r3, r3, #28
1000afac:	d506      	bpl.n	1000afbc <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000afae:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000afb0:	5ce3      	ldrb	r3, [r4, r3]
1000afb2:	071b      	lsls	r3, r3, #28
1000afb4:	d502      	bpl.n	1000afbc <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000afb6:	0020      	movs	r0, r4
1000afb8:	6923      	ldr	r3, [r4, #16]
1000afba:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000afbc:	6823      	ldr	r3, [r4, #0]
1000afbe:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000afc0:	07eb      	lsls	r3, r5, #31
1000afc2:	d522      	bpl.n	1000b00a <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000afc4:	6823      	ldr	r3, [r4, #0]
1000afc6:	7c1b      	ldrb	r3, [r3, #16]
1000afc8:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000afca:	6962      	ldr	r2, [r4, #20]
1000afcc:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000afce:	6963      	ldr	r3, [r4, #20]
1000afd0:	3301      	adds	r3, #1
1000afd2:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000afd4:	8ba3      	ldrh	r3, [r4, #28]
1000afd6:	3b01      	subs	r3, #1
1000afd8:	b29b      	uxth	r3, r3
1000afda:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000afdc:	8ba3      	ldrh	r3, [r4, #28]
1000afde:	b29b      	uxth	r3, r3
1000afe0:	2b00      	cmp	r3, #0
1000afe2:	d112      	bne.n	1000b00a <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000afe4:	3321      	adds	r3, #33	; 0x21
1000afe6:	5ce3      	ldrb	r3, [r4, r3]
1000afe8:	075b      	lsls	r3, r3, #29
1000afea:	d50e      	bpl.n	1000b00a <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000afec:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000afee:	5ce3      	ldrb	r3, [r4, r3]
1000aff0:	075b      	lsls	r3, r3, #29
1000aff2:	d50a      	bpl.n	1000b00a <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000aff4:	2200      	movs	r2, #0
1000aff6:	2322      	movs	r3, #34	; 0x22
1000aff8:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000affa:	6822      	ldr	r2, [r4, #0]
1000affc:	7e13      	ldrb	r3, [r2, #24]
1000affe:	2101      	movs	r1, #1
1000b000:	438b      	bics	r3, r1
1000b002:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000b004:	68e3      	ldr	r3, [r4, #12]
1000b006:	0020      	movs	r0, r4
1000b008:	4798      	blx	r3
			}
		}
	}
}
1000b00a:	bd70      	pop	{r4, r5, r6, pc}
1000b00c:	1001462c 	.word	0x1001462c

1000b010 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000b010:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000b012:	4b21      	ldr	r3, [pc, #132]	; (1000b098 <uart_tx0_isr_handler+0x88>)
1000b014:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000b016:	6823      	ldr	r3, [r4, #0]
1000b018:	791d      	ldrb	r5, [r3, #4]
1000b01a:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000b01c:	07ea      	lsls	r2, r5, #31
1000b01e:	d517      	bpl.n	1000b050 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000b020:	69a2      	ldr	r2, [r4, #24]
1000b022:	7811      	ldrb	r1, [r2, #0]
1000b024:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000b026:	3201      	adds	r2, #1
1000b028:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000b02a:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000b02c:	8be3      	ldrh	r3, [r4, #30]
1000b02e:	3b01      	subs	r3, #1
1000b030:	b29b      	uxth	r3, r3
1000b032:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000b034:	8be3      	ldrh	r3, [r4, #30]
1000b036:	b29b      	uxth	r3, r3
1000b038:	2b00      	cmp	r3, #0
1000b03a:	d109      	bne.n	1000b050 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b03c:	6822      	ldr	r2, [r4, #0]
1000b03e:	7a13      	ldrb	r3, [r2, #8]
1000b040:	2101      	movs	r1, #1
1000b042:	438b      	bics	r3, r1
1000b044:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000b046:	6822      	ldr	r2, [r4, #0]
1000b048:	7a11      	ldrb	r1, [r2, #8]
1000b04a:	2310      	movs	r3, #16
1000b04c:	430b      	orrs	r3, r1
1000b04e:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000b050:	06eb      	lsls	r3, r5, #27
1000b052:	d512      	bpl.n	1000b07a <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b054:	2321      	movs	r3, #33	; 0x21
1000b056:	5ce3      	ldrb	r3, [r4, r3]
1000b058:	07db      	lsls	r3, r3, #31
1000b05a:	d50e      	bpl.n	1000b07a <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000b05c:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b05e:	5ce3      	ldrb	r3, [r4, r3]
1000b060:	07db      	lsls	r3, r3, #31
1000b062:	d50a      	bpl.n	1000b07a <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000b064:	2200      	movs	r2, #0
1000b066:	2322      	movs	r3, #34	; 0x22
1000b068:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b06a:	6822      	ldr	r2, [r4, #0]
1000b06c:	7a13      	ldrb	r3, [r2, #8]
1000b06e:	2110      	movs	r1, #16
1000b070:	438b      	bics	r3, r1
1000b072:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000b074:	0020      	movs	r0, r4
1000b076:	6863      	ldr	r3, [r4, #4]
1000b078:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000b07a:	06ab      	lsls	r3, r5, #26
1000b07c:	d50a      	bpl.n	1000b094 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b07e:	2321      	movs	r3, #33	; 0x21
1000b080:	5ce3      	ldrb	r3, [r4, r3]
1000b082:	079b      	lsls	r3, r3, #30
1000b084:	d506      	bpl.n	1000b094 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000b086:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b088:	5ce3      	ldrb	r3, [r4, r3]
1000b08a:	079b      	lsls	r3, r3, #30
1000b08c:	d502      	bpl.n	1000b094 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000b08e:	68a3      	ldr	r3, [r4, #8]
1000b090:	0020      	movs	r0, r4
1000b092:	4798      	blx	r3
		}

	}
}
1000b094:	bd70      	pop	{r4, r5, r6, pc}
1000b096:	46c0      	nop			; (mov r8, r8)
1000b098:	1001462c 	.word	0x1001462c

1000b09c <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000b09c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000b09e:	4b20      	ldr	r3, [pc, #128]	; (1000b120 <uart_rx1_isr_handler+0x84>)
1000b0a0:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000b0a2:	6823      	ldr	r3, [r4, #0]
1000b0a4:	7d1d      	ldrb	r5, [r3, #20]
1000b0a6:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000b0a8:	066a      	lsls	r2, r5, #25
1000b0aa:	d513      	bpl.n	1000b0d4 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000b0ac:	211e      	movs	r1, #30
1000b0ae:	2222      	movs	r2, #34	; 0x22
1000b0b0:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000b0b2:	7e1a      	ldrb	r2, [r3, #24]
1000b0b4:	3123      	adds	r1, #35	; 0x23
1000b0b6:	438a      	bics	r2, r1
1000b0b8:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b0ba:	2321      	movs	r3, #33	; 0x21
1000b0bc:	5ce3      	ldrb	r3, [r4, r3]
1000b0be:	071b      	lsls	r3, r3, #28
1000b0c0:	d506      	bpl.n	1000b0d0 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000b0c2:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b0c4:	5ce3      	ldrb	r3, [r4, r3]
1000b0c6:	071b      	lsls	r3, r3, #28
1000b0c8:	d502      	bpl.n	1000b0d0 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000b0ca:	0020      	movs	r0, r4
1000b0cc:	6923      	ldr	r3, [r4, #16]
1000b0ce:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000b0d0:	6823      	ldr	r3, [r4, #0]
1000b0d2:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b0d4:	07eb      	lsls	r3, r5, #31
1000b0d6:	d522      	bpl.n	1000b11e <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000b0d8:	6823      	ldr	r3, [r4, #0]
1000b0da:	7c1b      	ldrb	r3, [r3, #16]
1000b0dc:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000b0de:	6962      	ldr	r2, [r4, #20]
1000b0e0:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000b0e2:	6963      	ldr	r3, [r4, #20]
1000b0e4:	3301      	adds	r3, #1
1000b0e6:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000b0e8:	8ba3      	ldrh	r3, [r4, #28]
1000b0ea:	3b01      	subs	r3, #1
1000b0ec:	b29b      	uxth	r3, r3
1000b0ee:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000b0f0:	8ba3      	ldrh	r3, [r4, #28]
1000b0f2:	b29b      	uxth	r3, r3
1000b0f4:	2b00      	cmp	r3, #0
1000b0f6:	d112      	bne.n	1000b11e <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b0f8:	3321      	adds	r3, #33	; 0x21
1000b0fa:	5ce3      	ldrb	r3, [r4, r3]
1000b0fc:	075b      	lsls	r3, r3, #29
1000b0fe:	d50e      	bpl.n	1000b11e <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000b100:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b102:	5ce3      	ldrb	r3, [r4, r3]
1000b104:	075b      	lsls	r3, r3, #29
1000b106:	d50a      	bpl.n	1000b11e <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000b108:	2200      	movs	r2, #0
1000b10a:	2322      	movs	r3, #34	; 0x22
1000b10c:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000b10e:	6822      	ldr	r2, [r4, #0]
1000b110:	7e13      	ldrb	r3, [r2, #24]
1000b112:	2101      	movs	r1, #1
1000b114:	438b      	bics	r3, r1
1000b116:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000b118:	68e3      	ldr	r3, [r4, #12]
1000b11a:	0020      	movs	r0, r4
1000b11c:	4798      	blx	r3
			}
		}
	}
}
1000b11e:	bd70      	pop	{r4, r5, r6, pc}
1000b120:	1001462c 	.word	0x1001462c

1000b124 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000b124:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000b126:	4b21      	ldr	r3, [pc, #132]	; (1000b1ac <uart_tx1_isr_handler+0x88>)
1000b128:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000b12a:	6823      	ldr	r3, [r4, #0]
1000b12c:	791d      	ldrb	r5, [r3, #4]
1000b12e:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000b130:	07ea      	lsls	r2, r5, #31
1000b132:	d517      	bpl.n	1000b164 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000b134:	69a2      	ldr	r2, [r4, #24]
1000b136:	7811      	ldrb	r1, [r2, #0]
1000b138:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000b13a:	3201      	adds	r2, #1
1000b13c:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000b13e:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000b140:	8be3      	ldrh	r3, [r4, #30]
1000b142:	3b01      	subs	r3, #1
1000b144:	b29b      	uxth	r3, r3
1000b146:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000b148:	8be3      	ldrh	r3, [r4, #30]
1000b14a:	b29b      	uxth	r3, r3
1000b14c:	2b00      	cmp	r3, #0
1000b14e:	d109      	bne.n	1000b164 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b150:	6822      	ldr	r2, [r4, #0]
1000b152:	7a13      	ldrb	r3, [r2, #8]
1000b154:	2101      	movs	r1, #1
1000b156:	438b      	bics	r3, r1
1000b158:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000b15a:	6822      	ldr	r2, [r4, #0]
1000b15c:	7a11      	ldrb	r1, [r2, #8]
1000b15e:	2310      	movs	r3, #16
1000b160:	430b      	orrs	r3, r1
1000b162:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000b164:	06eb      	lsls	r3, r5, #27
1000b166:	d512      	bpl.n	1000b18e <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b168:	2321      	movs	r3, #33	; 0x21
1000b16a:	5ce3      	ldrb	r3, [r4, r3]
1000b16c:	07db      	lsls	r3, r3, #31
1000b16e:	d50e      	bpl.n	1000b18e <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000b170:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b172:	5ce3      	ldrb	r3, [r4, r3]
1000b174:	07db      	lsls	r3, r3, #31
1000b176:	d50a      	bpl.n	1000b18e <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000b178:	2200      	movs	r2, #0
1000b17a:	2322      	movs	r3, #34	; 0x22
1000b17c:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b17e:	6822      	ldr	r2, [r4, #0]
1000b180:	7a13      	ldrb	r3, [r2, #8]
1000b182:	2110      	movs	r1, #16
1000b184:	438b      	bics	r3, r1
1000b186:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000b188:	0020      	movs	r0, r4
1000b18a:	6863      	ldr	r3, [r4, #4]
1000b18c:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000b18e:	06ab      	lsls	r3, r5, #26
1000b190:	d50a      	bpl.n	1000b1a8 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b192:	2321      	movs	r3, #33	; 0x21
1000b194:	5ce3      	ldrb	r3, [r4, r3]
1000b196:	079b      	lsls	r3, r3, #30
1000b198:	d506      	bpl.n	1000b1a8 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000b19a:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b19c:	5ce3      	ldrb	r3, [r4, r3]
1000b19e:	079b      	lsls	r3, r3, #30
1000b1a0:	d502      	bpl.n	1000b1a8 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000b1a2:	68a3      	ldr	r3, [r4, #8]
1000b1a4:	0020      	movs	r0, r4
1000b1a6:	4798      	blx	r3
		}

	}
}
1000b1a8:	bd70      	pop	{r4, r5, r6, pc}
1000b1aa:	46c0      	nop			; (mov r8, r8)
1000b1ac:	1001462c 	.word	0x1001462c

1000b1b0 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000b1b0:	23e1      	movs	r3, #225	; 0xe1
1000b1b2:	025b      	lsls	r3, r3, #9
1000b1b4:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000b1b6:	2300      	movs	r3, #0
1000b1b8:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000b1ba:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000b1bc:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000b1be:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000b1c0:	3302      	adds	r3, #2
1000b1c2:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000b1c4:	2203      	movs	r2, #3
1000b1c6:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000b1c8:	3201      	adds	r2, #1
1000b1ca:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000b1cc:	3201      	adds	r2, #1
1000b1ce:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000b1d0:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000b1d2:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000b1d4:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000b1d6:	6243      	str	r3, [r0, #36]	; 0x24
}
1000b1d8:	4770      	bx	lr
1000b1da:	46c0      	nop			; (mov r8, r8)

1000b1dc <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000b1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b1de:	464f      	mov	r7, r9
1000b1e0:	4646      	mov	r6, r8
1000b1e2:	b4c0      	push	{r6, r7}
1000b1e4:	0005      	movs	r5, r0
1000b1e6:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000b1e8:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000b1ea:	2300      	movs	r3, #0
1000b1ec:	6043      	str	r3, [r0, #4]
1000b1ee:	6083      	str	r3, [r0, #8]
1000b1f0:	60c3      	str	r3, [r0, #12]
1000b1f2:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000b1f4:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000b1f6:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000b1f8:	2200      	movs	r2, #0
1000b1fa:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000b1fc:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000b1fe:	3320      	adds	r3, #32
1000b200:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000b202:	3301      	adds	r3, #1
1000b204:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000b206:	3301      	adds	r3, #1
1000b208:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000b20a:	4b55      	ldr	r3, [pc, #340]	; (1000b360 <uart_init+0x184>)
1000b20c:	4299      	cmp	r1, r3
1000b20e:	d118      	bne.n	1000b242 <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000b210:	2009      	movs	r0, #9
1000b212:	4c54      	ldr	r4, [pc, #336]	; (1000b364 <uart_init+0x188>)
1000b214:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000b216:	200a      	movs	r0, #10
1000b218:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000b21a:	2009      	movs	r0, #9
1000b21c:	4c52      	ldr	r4, [pc, #328]	; (1000b368 <uart_init+0x18c>)
1000b21e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000b220:	200a      	movs	r0, #10
1000b222:	47a0      	blx	r4
		_uart_instances[0] = module;
1000b224:	4b51      	ldr	r3, [pc, #324]	; (1000b36c <uart_init+0x190>)
1000b226:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000b228:	4951      	ldr	r1, [pc, #324]	; (1000b370 <uart_init+0x194>)
1000b22a:	2010      	movs	r0, #16
1000b22c:	4c51      	ldr	r4, [pc, #324]	; (1000b374 <uart_init+0x198>)
1000b22e:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000b230:	4951      	ldr	r1, [pc, #324]	; (1000b378 <uart_init+0x19c>)
1000b232:	2011      	movs	r0, #17
1000b234:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b236:	4b51      	ldr	r3, [pc, #324]	; (1000b37c <uart_init+0x1a0>)
1000b238:	2201      	movs	r2, #1
1000b23a:	601a      	str	r2, [r3, #0]
1000b23c:	3201      	adds	r2, #1
1000b23e:	601a      	str	r2, [r3, #0]
1000b240:	e01a      	b.n	1000b278 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000b242:	4b4f      	ldr	r3, [pc, #316]	; (1000b380 <uart_init+0x1a4>)
1000b244:	4299      	cmp	r1, r3
1000b246:	d117      	bne.n	1000b278 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000b248:	200b      	movs	r0, #11
1000b24a:	4c46      	ldr	r4, [pc, #280]	; (1000b364 <uart_init+0x188>)
1000b24c:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000b24e:	200c      	movs	r0, #12
1000b250:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000b252:	200b      	movs	r0, #11
1000b254:	4c44      	ldr	r4, [pc, #272]	; (1000b368 <uart_init+0x18c>)
1000b256:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000b258:	200c      	movs	r0, #12
1000b25a:	47a0      	blx	r4
		_uart_instances[1] = module;
1000b25c:	4b43      	ldr	r3, [pc, #268]	; (1000b36c <uart_init+0x190>)
1000b25e:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000b260:	4948      	ldr	r1, [pc, #288]	; (1000b384 <uart_init+0x1a8>)
1000b262:	2012      	movs	r0, #18
1000b264:	4c43      	ldr	r4, [pc, #268]	; (1000b374 <uart_init+0x198>)
1000b266:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000b268:	4947      	ldr	r1, [pc, #284]	; (1000b388 <uart_init+0x1ac>)
1000b26a:	2013      	movs	r0, #19
1000b26c:	47a0      	blx	r4
1000b26e:	4b43      	ldr	r3, [pc, #268]	; (1000b37c <uart_init+0x1a0>)
1000b270:	2204      	movs	r2, #4
1000b272:	601a      	str	r2, [r3, #0]
1000b274:	3204      	adds	r2, #4
1000b276:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000b278:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000b27a:	2204      	movs	r2, #4
1000b27c:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000b27e:	2b00      	cmp	r3, #0
1000b280:	d152      	bne.n	1000b328 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000b282:	3302      	adds	r3, #2
1000b284:	4698      	mov	r8, r3
1000b286:	e04f      	b.n	1000b328 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000b288:	8a31      	ldrh	r1, [r6, #16]
1000b28a:	ce01      	ldmia	r6!, {r0}
1000b28c:	b2c0      	uxtb	r0, r0
1000b28e:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000b290:	3401      	adds	r4, #1
1000b292:	b2e4      	uxtb	r4, r4
1000b294:	4544      	cmp	r4, r8
1000b296:	d3f7      	bcc.n	1000b288 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b298:	682b      	ldr	r3, [r5, #0]
1000b29a:	7d1a      	ldrb	r2, [r3, #20]
1000b29c:	07d2      	lsls	r2, r2, #31
1000b29e:	d504      	bpl.n	1000b2aa <uart_init+0xce>
1000b2a0:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000b2a2:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b2a4:	7d1a      	ldrb	r2, [r3, #20]
1000b2a6:	420a      	tst	r2, r1
1000b2a8:	d1fb      	bne.n	1000b2a2 <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000b2aa:	2100      	movs	r1, #0
1000b2ac:	2220      	movs	r2, #32
1000b2ae:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000b2b0:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000b2b2:	1e59      	subs	r1, r3, #1
1000b2b4:	418b      	sbcs	r3, r1
1000b2b6:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000b2b8:	793b      	ldrb	r3, [r7, #4]
1000b2ba:	797a      	ldrb	r2, [r7, #5]
1000b2bc:	4313      	orrs	r3, r2
1000b2be:	430b      	orrs	r3, r1
	switch(config->parity) {
1000b2c0:	79ba      	ldrb	r2, [r7, #6]
1000b2c2:	2a02      	cmp	r2, #2
1000b2c4:	d00d      	beq.n	1000b2e2 <uart_init+0x106>
1000b2c6:	b2d1      	uxtb	r1, r2
1000b2c8:	2902      	cmp	r1, #2
1000b2ca:	d802      	bhi.n	1000b2d2 <uart_init+0xf6>
1000b2cc:	2a01      	cmp	r2, #1
1000b2ce:	d005      	beq.n	1000b2dc <uart_init+0x100>
1000b2d0:	e00f      	b.n	1000b2f2 <uart_init+0x116>
1000b2d2:	2a03      	cmp	r2, #3
1000b2d4:	d008      	beq.n	1000b2e8 <uart_init+0x10c>
1000b2d6:	2a04      	cmp	r2, #4
1000b2d8:	d009      	beq.n	1000b2ee <uart_init+0x112>
1000b2da:	e00a      	b.n	1000b2f2 <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000b2dc:	2202      	movs	r2, #2
1000b2de:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000b2e0:	e007      	b.n	1000b2f2 <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000b2e2:	2206      	movs	r2, #6
1000b2e4:	4313      	orrs	r3, r2
			break;
1000b2e6:	e004      	b.n	1000b2f2 <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000b2e8:	220a      	movs	r2, #10
1000b2ea:	4313      	orrs	r3, r2
			break;
1000b2ec:	e001      	b.n	1000b2f2 <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000b2ee:	220e      	movs	r2, #14
1000b2f0:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000b2f2:	2220      	movs	r2, #32
1000b2f4:	6829      	ldr	r1, [r5, #0]
1000b2f6:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000b2f8:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000b2fa:	4b24      	ldr	r3, [pc, #144]	; (1000b38c <uart_init+0x1b0>)
1000b2fc:	4798      	blx	r3
1000b2fe:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000b300:	0031      	movs	r1, r6
1000b302:	4b23      	ldr	r3, [pc, #140]	; (1000b390 <uart_init+0x1b4>)
1000b304:	4798      	blx	r3
1000b306:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000b308:	0400      	lsls	r0, r0, #16
1000b30a:	0c00      	lsrs	r0, r0, #16
1000b30c:	4370      	muls	r0, r6
1000b30e:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000b310:	0931      	lsrs	r1, r6, #4
1000b312:	4288      	cmp	r0, r1
1000b314:	d906      	bls.n	1000b324 <uart_init+0x148>
1000b316:	2300      	movs	r3, #0
		i++;
1000b318:	3301      	adds	r3, #1
1000b31a:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000b31c:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000b31e:	4288      	cmp	r0, r1
1000b320:	d8fa      	bhi.n	1000b318 <uart_init+0x13c>
1000b322:	e007      	b.n	1000b334 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000b324:	2300      	movs	r3, #0
1000b326:	e005      	b.n	1000b334 <uart_init+0x158>
1000b328:	003e      	movs	r6, r7
1000b32a:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000b32c:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000b32e:	4b19      	ldr	r3, [pc, #100]	; (1000b394 <uart_init+0x1b8>)
1000b330:	4699      	mov	r9, r3
1000b332:	e7a9      	b.n	1000b288 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000b334:	2100      	movs	r1, #0
1000b336:	2028      	movs	r0, #40	; 0x28
1000b338:	682c      	ldr	r4, [r5, #0]
1000b33a:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000b33c:	3301      	adds	r3, #1
1000b33e:	071b      	lsls	r3, r3, #28
1000b340:	0f5b      	lsrs	r3, r3, #29
1000b342:	00d2      	lsls	r2, r2, #3
1000b344:	4313      	orrs	r3, r2
1000b346:	b29b      	uxth	r3, r3
1000b348:	682a      	ldr	r2, [r5, #0]
1000b34a:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000b34c:	682b      	ldr	r3, [r5, #0]
1000b34e:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000b350:	682b      	ldr	r3, [r5, #0]
1000b352:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000b354:	2000      	movs	r0, #0
1000b356:	bc0c      	pop	{r2, r3}
1000b358:	4690      	mov	r8, r2
1000b35a:	4699      	mov	r9, r3
1000b35c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b35e:	46c0      	nop			; (mov r8, r8)
1000b360:	40004000 	.word	0x40004000
1000b364:	1000bfe5 	.word	0x1000bfe5
1000b368:	1000bc89 	.word	0x1000bc89
1000b36c:	1001462c 	.word	0x1001462c
1000b370:	1000af89 	.word	0x1000af89
1000b374:	1000c44d 	.word	0x1000c44d
1000b378:	1000b011 	.word	0x1000b011
1000b37c:	e000e100 	.word	0xe000e100
1000b380:	40005000 	.word	0x40005000
1000b384:	1000b09d 	.word	0x1000b09d
1000b388:	1000b125 	.word	0x1000b125
1000b38c:	1000bc7d 	.word	0x1000bc7d
1000b390:	1000ef15 	.word	0x1000ef15
1000b394:	1000b751 	.word	0x1000b751

1000b398 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000b398:	6802      	ldr	r2, [r0, #0]
1000b39a:	2001      	movs	r0, #1
1000b39c:	7913      	ldrb	r3, [r2, #4]
1000b39e:	4203      	tst	r3, r0
1000b3a0:	d0fc      	beq.n	1000b39c <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000b3a2:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000b3a4:	2000      	movs	r0, #0
1000b3a6:	4770      	bx	lr

1000b3a8 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000b3a8:	6802      	ldr	r2, [r0, #0]
1000b3aa:	2001      	movs	r0, #1
1000b3ac:	7d13      	ldrb	r3, [r2, #20]
1000b3ae:	4203      	tst	r3, r0
1000b3b0:	d0fc      	beq.n	1000b3ac <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000b3b2:	7c13      	ldrb	r3, [r2, #16]
1000b3b4:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000b3b6:	2000      	movs	r0, #0
1000b3b8:	4770      	bx	lr
1000b3ba:	46c0      	nop			; (mov r8, r8)

1000b3bc <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000b3bc:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000b3be:	2a00      	cmp	r2, #0
1000b3c0:	d00d      	beq.n	1000b3de <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000b3c2:	330b      	adds	r3, #11
1000b3c4:	5cc3      	ldrb	r3, [r0, r3]
1000b3c6:	b2db      	uxtb	r3, r3
1000b3c8:	2b05      	cmp	r3, #5
1000b3ca:	d008      	beq.n	1000b3de <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000b3cc:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000b3ce:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000b3d0:	2205      	movs	r2, #5
1000b3d2:	2322      	movs	r3, #34	; 0x22
1000b3d4:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000b3d6:	6803      	ldr	r3, [r0, #0]
1000b3d8:	3a04      	subs	r2, #4
1000b3da:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000b3dc:	2300      	movs	r3, #0
}
1000b3de:	0018      	movs	r0, r3
1000b3e0:	4770      	bx	lr
1000b3e2:	46c0      	nop			; (mov r8, r8)

1000b3e4 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000b3e4:	0093      	lsls	r3, r2, #2
1000b3e6:	18c3      	adds	r3, r0, r3
1000b3e8:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000b3ea:	2120      	movs	r1, #32
1000b3ec:	2301      	movs	r3, #1
1000b3ee:	4093      	lsls	r3, r2
1000b3f0:	5c42      	ldrb	r2, [r0, r1]
1000b3f2:	4313      	orrs	r3, r2
1000b3f4:	5443      	strb	r3, [r0, r1]
}
1000b3f6:	4770      	bx	lr

1000b3f8 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000b3f8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000b3fa:	2221      	movs	r2, #33	; 0x21
1000b3fc:	2301      	movs	r3, #1
1000b3fe:	408b      	lsls	r3, r1
1000b400:	5c84      	ldrb	r4, [r0, r2]
1000b402:	4323      	orrs	r3, r4
1000b404:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000b406:	2901      	cmp	r1, #1
1000b408:	d104      	bne.n	1000b414 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000b40a:	6802      	ldr	r2, [r0, #0]
1000b40c:	7a11      	ldrb	r1, [r2, #8]
1000b40e:	2320      	movs	r3, #32
1000b410:	430b      	orrs	r3, r1
1000b412:	7213      	strb	r3, [r2, #8]
	}
}
1000b414:	bd10      	pop	{r4, pc}
1000b416:	46c0      	nop			; (mov r8, r8)

1000b418 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000b418:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000b41a:	2201      	movs	r2, #1
1000b41c:	408a      	lsls	r2, r1
1000b41e:	2421      	movs	r4, #33	; 0x21
1000b420:	5d03      	ldrb	r3, [r0, r4]
1000b422:	4393      	bics	r3, r2
1000b424:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000b426:	2901      	cmp	r1, #1
1000b428:	d104      	bne.n	1000b434 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000b42a:	6802      	ldr	r2, [r0, #0]
1000b42c:	7a13      	ldrb	r3, [r2, #8]
1000b42e:	311f      	adds	r1, #31
1000b430:	438b      	bics	r3, r1
1000b432:	7213      	strb	r3, [r2, #8]
	}

}
1000b434:	bd10      	pop	{r4, pc}
1000b436:	46c0      	nop			; (mov r8, r8)

1000b438 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000b438:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000b43a:	4b16      	ldr	r3, [pc, #88]	; (1000b494 <gpio_port0_isr_handler+0x5c>)
1000b43c:	681d      	ldr	r5, [r3, #0]
1000b43e:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000b440:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000b442:	07cb      	lsls	r3, r1, #31
1000b444:	d407      	bmi.n	1000b456 <gpio_port0_isr_handler+0x1e>
1000b446:	2301      	movs	r3, #1
1000b448:	2401      	movs	r4, #1
1000b44a:	0018      	movs	r0, r3
1000b44c:	0022      	movs	r2, r4
1000b44e:	409a      	lsls	r2, r3
1000b450:	4211      	tst	r1, r2
1000b452:	d014      	beq.n	1000b47e <gpio_port0_isr_handler+0x46>
1000b454:	e001      	b.n	1000b45a <gpio_port0_isr_handler+0x22>
1000b456:	2201      	movs	r2, #1
1000b458:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b45a:	b292      	uxth	r2, r2
1000b45c:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000b45e:	2346      	movs	r3, #70	; 0x46
1000b460:	4a0c      	ldr	r2, [pc, #48]	; (1000b494 <gpio_port0_isr_handler+0x5c>)
1000b462:	5ad3      	ldrh	r3, [r2, r3]
1000b464:	4103      	asrs	r3, r0
1000b466:	07db      	lsls	r3, r3, #31
1000b468:	d50c      	bpl.n	1000b484 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000b46a:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000b46c:	5ad3      	ldrh	r3, [r2, r3]
1000b46e:	4103      	asrs	r3, r0
1000b470:	07db      	lsls	r3, r3, #31
1000b472:	d507      	bpl.n	1000b484 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000b474:	0080      	lsls	r0, r0, #2
1000b476:	1810      	adds	r0, r2, r0
1000b478:	6843      	ldr	r3, [r0, #4]
1000b47a:	4798      	blx	r3
1000b47c:	e002      	b.n	1000b484 <gpio_port0_isr_handler+0x4c>
1000b47e:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000b480:	2b10      	cmp	r3, #16
1000b482:	d1e2      	bne.n	1000b44a <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000b484:	2180      	movs	r1, #128	; 0x80
1000b486:	0409      	lsls	r1, r1, #16
1000b488:	23c0      	movs	r3, #192	; 0xc0
1000b48a:	005b      	lsls	r3, r3, #1
1000b48c:	4a02      	ldr	r2, [pc, #8]	; (1000b498 <gpio_port0_isr_handler+0x60>)
1000b48e:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000b490:	bd70      	pop	{r4, r5, r6, pc}
1000b492:	46c0      	nop			; (mov r8, r8)
1000b494:	10014634 	.word	0x10014634
1000b498:	e000e100 	.word	0xe000e100

1000b49c <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000b49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000b49e:	4b18      	ldr	r3, [pc, #96]	; (1000b500 <gpio_port1_isr_handler+0x64>)
1000b4a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000b4a2:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000b4a4:	b2b6      	uxth	r6, r6
1000b4a6:	0037      	movs	r7, r6
1000b4a8:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000b4aa:	0b76      	lsrs	r6, r6, #13
1000b4ac:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b4ae:	4d14      	ldr	r5, [pc, #80]	; (1000b500 <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000b4b0:	2e00      	cmp	r6, #0
1000b4b2:	d001      	beq.n	1000b4b8 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000b4b4:	4b13      	ldr	r3, [pc, #76]	; (1000b504 <gpio_port1_isr_handler+0x68>)
1000b4b6:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000b4b8:	0022      	movs	r2, r4
1000b4ba:	2301      	movs	r3, #1
1000b4bc:	40a3      	lsls	r3, r4
1000b4be:	421f      	tst	r7, r3
1000b4c0:	d013      	beq.n	1000b4ea <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b4c2:	b29b      	uxth	r3, r3
1000b4c4:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000b4c6:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000b4c8:	238e      	movs	r3, #142	; 0x8e
1000b4ca:	5aeb      	ldrh	r3, [r5, r3]
1000b4cc:	4123      	asrs	r3, r4
1000b4ce:	07db      	lsls	r3, r3, #31
1000b4d0:	d50b      	bpl.n	1000b4ea <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000b4d2:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000b4d4:	490a      	ldr	r1, [pc, #40]	; (1000b500 <gpio_port1_isr_handler+0x64>)
1000b4d6:	5acb      	ldrh	r3, [r1, r3]
1000b4d8:	4123      	asrs	r3, r4
1000b4da:	07db      	lsls	r3, r3, #31
1000b4dc:	d505      	bpl.n	1000b4ea <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000b4de:	3212      	adds	r2, #18
1000b4e0:	0092      	lsls	r2, r2, #2
1000b4e2:	188a      	adds	r2, r1, r2
1000b4e4:	6853      	ldr	r3, [r2, #4]
1000b4e6:	4798      	blx	r3
				break;
1000b4e8:	e002      	b.n	1000b4f0 <gpio_port1_isr_handler+0x54>
1000b4ea:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000b4ec:	2c10      	cmp	r4, #16
1000b4ee:	d1df      	bne.n	1000b4b0 <gpio_port1_isr_handler+0x14>
1000b4f0:	2180      	movs	r1, #128	; 0x80
1000b4f2:	0449      	lsls	r1, r1, #17
1000b4f4:	23c0      	movs	r3, #192	; 0xc0
1000b4f6:	005b      	lsls	r3, r3, #1
1000b4f8:	4a03      	ldr	r2, [pc, #12]	; (1000b508 <gpio_port1_isr_handler+0x6c>)
1000b4fa:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000b4fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b4fe:	46c0      	nop			; (mov r8, r8)
1000b500:	10014634 	.word	0x10014634
1000b504:	0001bc51 	.word	0x0001bc51
1000b508:	e000e100 	.word	0xe000e100

1000b50c <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000b50c:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000b50e:	2390      	movs	r3, #144	; 0x90
1000b510:	4a1b      	ldr	r2, [pc, #108]	; (1000b580 <gpio_port2_isr_handler+0x74>)
1000b512:	58d2      	ldr	r2, [r2, r3]
1000b514:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b516:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000b518:	04d9      	lsls	r1, r3, #19
1000b51a:	d414      	bmi.n	1000b546 <gpio_port2_isr_handler+0x3a>
1000b51c:	0499      	lsls	r1, r3, #18
1000b51e:	d40a      	bmi.n	1000b536 <gpio_port2_isr_handler+0x2a>
1000b520:	0459      	lsls	r1, r3, #17
1000b522:	d40c      	bmi.n	1000b53e <gpio_port2_isr_handler+0x32>
1000b524:	0bdb      	lsrs	r3, r3, #15
1000b526:	03db      	lsls	r3, r3, #15
1000b528:	b29b      	uxth	r3, r3
1000b52a:	2b00      	cmp	r3, #0
1000b52c:	d020      	beq.n	1000b570 <gpio_port2_isr_handler+0x64>
1000b52e:	2380      	movs	r3, #128	; 0x80
1000b530:	021b      	lsls	r3, r3, #8
1000b532:	210f      	movs	r1, #15
1000b534:	e00a      	b.n	1000b54c <gpio_port2_isr_handler+0x40>
1000b536:	2380      	movs	r3, #128	; 0x80
1000b538:	019b      	lsls	r3, r3, #6
1000b53a:	210d      	movs	r1, #13
1000b53c:	e006      	b.n	1000b54c <gpio_port2_isr_handler+0x40>
1000b53e:	2380      	movs	r3, #128	; 0x80
1000b540:	01db      	lsls	r3, r3, #7
1000b542:	210e      	movs	r1, #14
1000b544:	e002      	b.n	1000b54c <gpio_port2_isr_handler+0x40>
1000b546:	2380      	movs	r3, #128	; 0x80
1000b548:	015b      	lsls	r3, r3, #5
1000b54a:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b54c:	b29b      	uxth	r3, r3
1000b54e:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000b550:	23d6      	movs	r3, #214	; 0xd6
1000b552:	4a0b      	ldr	r2, [pc, #44]	; (1000b580 <gpio_port2_isr_handler+0x74>)
1000b554:	5ad3      	ldrh	r3, [r2, r3]
1000b556:	410b      	asrs	r3, r1
1000b558:	07db      	lsls	r3, r3, #31
1000b55a:	d509      	bpl.n	1000b570 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000b55c:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000b55e:	5ad3      	ldrh	r3, [r2, r3]
1000b560:	410b      	asrs	r3, r1
1000b562:	07db      	lsls	r3, r3, #31
1000b564:	d504      	bpl.n	1000b570 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000b566:	3124      	adds	r1, #36	; 0x24
1000b568:	0089      	lsls	r1, r1, #2
1000b56a:	1851      	adds	r1, r2, r1
1000b56c:	684b      	ldr	r3, [r1, #4]
1000b56e:	4798      	blx	r3
1000b570:	2180      	movs	r1, #128	; 0x80
1000b572:	0489      	lsls	r1, r1, #18
1000b574:	23c0      	movs	r3, #192	; 0xc0
1000b576:	005b      	lsls	r3, r3, #1
1000b578:	4a02      	ldr	r2, [pc, #8]	; (1000b584 <gpio_port2_isr_handler+0x78>)
1000b57a:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000b57c:	bd10      	pop	{r4, pc}
1000b57e:	46c0      	nop			; (mov r8, r8)
1000b580:	10014634 	.word	0x10014634
1000b584:	e000e100 	.word	0xe000e100

1000b588 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000b588:	2300      	movs	r3, #0
1000b58a:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000b58c:	2201      	movs	r2, #1
1000b58e:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000b590:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000b592:	70c3      	strb	r3, [r0, #3]
}
1000b594:	4770      	bx	lr
1000b596:	46c0      	nop			; (mov r8, r8)

1000b598 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000b598:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000b59a:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000b59c:	2801      	cmp	r0, #1
1000b59e:	d800      	bhi.n	1000b5a2 <gpio_pin_set_config+0xa>
1000b5a0:	e0c8      	b.n	1000b734 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000b5a2:	2807      	cmp	r0, #7
1000b5a4:	d809      	bhi.n	1000b5ba <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b5a6:	4d64      	ldr	r5, [pc, #400]	; (1000b738 <gpio_pin_set_config+0x1a0>)
1000b5a8:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000b5aa:	3b10      	subs	r3, #16
1000b5ac:	4003      	ands	r3, r0
1000b5ae:	009b      	lsls	r3, r3, #2
1000b5b0:	2407      	movs	r4, #7
1000b5b2:	409c      	lsls	r4, r3
1000b5b4:	43a2      	bics	r2, r4
1000b5b6:	646a      	str	r2, [r5, #68]	; 0x44
1000b5b8:	e029      	b.n	1000b60e <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000b5ba:	280f      	cmp	r0, #15
1000b5bc:	d809      	bhi.n	1000b5d2 <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b5be:	4d5e      	ldr	r5, [pc, #376]	; (1000b738 <gpio_pin_set_config+0x1a0>)
1000b5c0:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000b5c2:	2307      	movs	r3, #7
1000b5c4:	4003      	ands	r3, r0
1000b5c6:	009b      	lsls	r3, r3, #2
1000b5c8:	2407      	movs	r4, #7
1000b5ca:	409c      	lsls	r4, r3
1000b5cc:	43a2      	bics	r2, r4
1000b5ce:	64aa      	str	r2, [r5, #72]	; 0x48
1000b5d0:	e01d      	b.n	1000b60e <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000b5d2:	2817      	cmp	r0, #23
1000b5d4:	d809      	bhi.n	1000b5ea <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b5d6:	4d58      	ldr	r5, [pc, #352]	; (1000b738 <gpio_pin_set_config+0x1a0>)
1000b5d8:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000b5da:	2307      	movs	r3, #7
1000b5dc:	4003      	ands	r3, r0
1000b5de:	009b      	lsls	r3, r3, #2
1000b5e0:	2407      	movs	r4, #7
1000b5e2:	409c      	lsls	r4, r3
1000b5e4:	43a2      	bics	r2, r4
1000b5e6:	64ea      	str	r2, [r5, #76]	; 0x4c
1000b5e8:	e011      	b.n	1000b60e <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000b5ea:	0003      	movs	r3, r0
1000b5ec:	3b2c      	subs	r3, #44	; 0x2c
1000b5ee:	2b03      	cmp	r3, #3
1000b5f0:	d80d      	bhi.n	1000b60e <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000b5f2:	4d52      	ldr	r5, [pc, #328]	; (1000b73c <gpio_pin_set_config+0x1a4>)
1000b5f4:	2482      	movs	r4, #130	; 0x82
1000b5f6:	00e4      	lsls	r4, r4, #3
1000b5f8:	5d2a      	ldrb	r2, [r5, r4]
1000b5fa:	0712      	lsls	r2, r2, #28
1000b5fc:	2601      	movs	r6, #1
1000b5fe:	409e      	lsls	r6, r3
1000b600:	0f12      	lsrs	r2, r2, #28
1000b602:	5d2b      	ldrb	r3, [r5, r4]
1000b604:	43b2      	bics	r2, r6
1000b606:	260f      	movs	r6, #15
1000b608:	43b3      	bics	r3, r6
1000b60a:	4313      	orrs	r3, r2
1000b60c:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000b60e:	0003      	movs	r3, r0
1000b610:	3b1d      	subs	r3, #29
1000b612:	2b02      	cmp	r3, #2
1000b614:	d829      	bhi.n	1000b66a <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000b616:	784b      	ldrb	r3, [r1, #1]
1000b618:	2b01      	cmp	r3, #1
1000b61a:	d108      	bne.n	1000b62e <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000b61c:	4d47      	ldr	r5, [pc, #284]	; (1000b73c <gpio_pin_set_config+0x1a4>)
1000b61e:	7d2b      	ldrb	r3, [r5, #20]
1000b620:	241f      	movs	r4, #31
1000b622:	1a24      	subs	r4, r4, r0
1000b624:	2201      	movs	r2, #1
1000b626:	40a2      	lsls	r2, r4
1000b628:	4393      	bics	r3, r2
1000b62a:	752b      	strb	r3, [r5, #20]
1000b62c:	e008      	b.n	1000b640 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000b62e:	4c43      	ldr	r4, [pc, #268]	; (1000b73c <gpio_pin_set_config+0x1a4>)
1000b630:	7d25      	ldrb	r5, [r4, #20]
1000b632:	221f      	movs	r2, #31
1000b634:	1a12      	subs	r2, r2, r0
1000b636:	2301      	movs	r3, #1
1000b638:	4093      	lsls	r3, r2
1000b63a:	432b      	orrs	r3, r5
1000b63c:	b2db      	uxtb	r3, r3
1000b63e:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000b640:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b642:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000b644:	2a00      	cmp	r2, #0
1000b646:	d075      	beq.n	1000b734 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000b648:	493c      	ldr	r1, [pc, #240]	; (1000b73c <gpio_pin_set_config+0x1a4>)
1000b64a:	880c      	ldrh	r4, [r1, #0]
1000b64c:	221f      	movs	r2, #31
1000b64e:	1a10      	subs	r0, r2, r0
1000b650:	0080      	lsls	r0, r0, #2
1000b652:	3301      	adds	r3, #1
1000b654:	4083      	lsls	r3, r0
1000b656:	4323      	orrs	r3, r4
1000b658:	b29b      	uxth	r3, r3
1000b65a:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000b65c:	4a38      	ldr	r2, [pc, #224]	; (1000b740 <gpio_pin_set_config+0x1a8>)
1000b65e:	7811      	ldrb	r1, [r2, #0]
1000b660:	2302      	movs	r3, #2
1000b662:	430b      	orrs	r3, r1
1000b664:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b666:	2300      	movs	r3, #0
1000b668:	e064      	b.n	1000b734 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000b66a:	780a      	ldrb	r2, [r1, #0]
1000b66c:	2a00      	cmp	r2, #0
1000b66e:	d140      	bne.n	1000b6f2 <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000b670:	280f      	cmp	r0, #15
1000b672:	d808      	bhi.n	1000b686 <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000b674:	2301      	movs	r3, #1
1000b676:	4083      	lsls	r3, r0
1000b678:	b29b      	uxth	r3, r3
1000b67a:	4a32      	ldr	r2, [pc, #200]	; (1000b744 <gpio_pin_set_config+0x1ac>)
1000b67c:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b67e:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000b680:	281f      	cmp	r0, #31
1000b682:	d857      	bhi.n	1000b734 <gpio_pin_set_config+0x19c>
1000b684:	e012      	b.n	1000b6ac <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000b686:	281f      	cmp	r0, #31
1000b688:	d807      	bhi.n	1000b69a <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000b68a:	220f      	movs	r2, #15
1000b68c:	4002      	ands	r2, r0
1000b68e:	2301      	movs	r3, #1
1000b690:	4093      	lsls	r3, r2
1000b692:	b29b      	uxth	r3, r3
1000b694:	4a2c      	ldr	r2, [pc, #176]	; (1000b748 <gpio_pin_set_config+0x1b0>)
1000b696:	8293      	strh	r3, [r2, #20]
1000b698:	e008      	b.n	1000b6ac <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000b69a:	230f      	movs	r3, #15
1000b69c:	4018      	ands	r0, r3
1000b69e:	3b0e      	subs	r3, #14
1000b6a0:	4083      	lsls	r3, r0
1000b6a2:	b29b      	uxth	r3, r3
1000b6a4:	4a29      	ldr	r2, [pc, #164]	; (1000b74c <gpio_pin_set_config+0x1b4>)
1000b6a6:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b6a8:	2300      	movs	r3, #0
1000b6aa:	e043      	b.n	1000b734 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000b6ac:	784b      	ldrb	r3, [r1, #1]
1000b6ae:	2b01      	cmp	r3, #1
1000b6b0:	d00c      	beq.n	1000b6cc <gpio_pin_set_config+0x134>
1000b6b2:	2b00      	cmp	r3, #0
1000b6b4:	d002      	beq.n	1000b6bc <gpio_pin_set_config+0x124>
1000b6b6:	2b02      	cmp	r3, #2
1000b6b8:	d010      	beq.n	1000b6dc <gpio_pin_set_config+0x144>
1000b6ba:	e03a      	b.n	1000b732 <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000b6bc:	491e      	ldr	r1, [pc, #120]	; (1000b738 <gpio_pin_set_config+0x1a0>)
1000b6be:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000b6c0:	2301      	movs	r3, #1
1000b6c2:	4083      	lsls	r3, r0
1000b6c4:	4313      	orrs	r3, r2
1000b6c6:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b6c8:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000b6ca:	e033      	b.n	1000b734 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000b6cc:	491a      	ldr	r1, [pc, #104]	; (1000b738 <gpio_pin_set_config+0x1a0>)
1000b6ce:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000b6d0:	2201      	movs	r2, #1
1000b6d2:	4082      	lsls	r2, r0
1000b6d4:	4393      	bics	r3, r2
1000b6d6:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b6d8:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000b6da:	e02b      	b.n	1000b734 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000b6dc:	4b16      	ldr	r3, [pc, #88]	; (1000b738 <gpio_pin_set_config+0x1a0>)
1000b6de:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000b6e0:	2201      	movs	r2, #1
1000b6e2:	4082      	lsls	r2, r0
1000b6e4:	4311      	orrs	r1, r2
1000b6e6:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000b6e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000b6ea:	4391      	bics	r1, r2
1000b6ec:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b6ee:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000b6f0:	e020      	b.n	1000b734 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b6f2:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000b6f4:	2a01      	cmp	r2, #1
1000b6f6:	d11d      	bne.n	1000b734 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000b6f8:	280f      	cmp	r0, #15
1000b6fa:	d806      	bhi.n	1000b70a <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000b6fc:	3301      	adds	r3, #1
1000b6fe:	4083      	lsls	r3, r0
1000b700:	b29b      	uxth	r3, r3
1000b702:	4a10      	ldr	r2, [pc, #64]	; (1000b744 <gpio_pin_set_config+0x1ac>)
1000b704:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b706:	2300      	movs	r3, #0
1000b708:	e014      	b.n	1000b734 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000b70a:	281f      	cmp	r0, #31
1000b70c:	d808      	bhi.n	1000b720 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000b70e:	230f      	movs	r3, #15
1000b710:	4018      	ands	r0, r3
1000b712:	3b0e      	subs	r3, #14
1000b714:	4083      	lsls	r3, r0
1000b716:	b29b      	uxth	r3, r3
1000b718:	4a0b      	ldr	r2, [pc, #44]	; (1000b748 <gpio_pin_set_config+0x1b0>)
1000b71a:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b71c:	2300      	movs	r3, #0
1000b71e:	e009      	b.n	1000b734 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000b720:	230f      	movs	r3, #15
1000b722:	4018      	ands	r0, r3
1000b724:	3b0e      	subs	r3, #14
1000b726:	4083      	lsls	r3, r0
1000b728:	b29b      	uxth	r3, r3
1000b72a:	4a08      	ldr	r2, [pc, #32]	; (1000b74c <gpio_pin_set_config+0x1b4>)
1000b72c:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b72e:	2300      	movs	r3, #0
1000b730:	e000      	b.n	1000b734 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000b732:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000b734:	0018      	movs	r0, r3
1000b736:	bd70      	pop	{r4, r5, r6, pc}
1000b738:	4000b000 	.word	0x4000b000
1000b73c:	4000f000 	.word	0x4000f000
1000b740:	4000e000 	.word	0x4000e000
1000b744:	40010000 	.word	0x40010000
1000b748:	40011000 	.word	0x40011000
1000b74c:	40013000 	.word	0x40013000

1000b750 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000b750:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000b752:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000b754:	23ff      	movs	r3, #255	; 0xff
1000b756:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000b758:	2807      	cmp	r0, #7
1000b75a:	d833      	bhi.n	1000b7c4 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b75c:	4a4e      	ldr	r2, [pc, #312]	; (1000b898 <gpio_pinmux_cofiguration+0x148>)
1000b75e:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000b760:	3bf8      	subs	r3, #248	; 0xf8
1000b762:	4003      	ands	r3, r0
1000b764:	009b      	lsls	r3, r3, #2
1000b766:	2607      	movs	r6, #7
1000b768:	409e      	lsls	r6, r3
1000b76a:	43b4      	bics	r4, r6
1000b76c:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000b76e:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000b770:	000e      	movs	r6, r1
1000b772:	409e      	lsls	r6, r3
1000b774:	0033      	movs	r3, r6
1000b776:	4323      	orrs	r3, r4
1000b778:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000b77a:	2901      	cmp	r1, #1
1000b77c:	d000      	beq.n	1000b780 <gpio_pinmux_cofiguration+0x30>
1000b77e:	e08a      	b.n	1000b896 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000b780:	2803      	cmp	r0, #3
1000b782:	d80f      	bhi.n	1000b7a4 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b784:	0011      	movs	r1, r2
1000b786:	22d0      	movs	r2, #208	; 0xd0
1000b788:	0052      	lsls	r2, r2, #1
1000b78a:	588c      	ldr	r4, [r1, r2]
1000b78c:	2303      	movs	r3, #3
1000b78e:	4018      	ands	r0, r3
1000b790:	00c0      	lsls	r0, r0, #3
1000b792:	333c      	adds	r3, #60	; 0x3c
1000b794:	4083      	lsls	r3, r0
1000b796:	439c      	bics	r4, r3
1000b798:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b79a:	588b      	ldr	r3, [r1, r2]
1000b79c:	4085      	lsls	r5, r0
1000b79e:	431d      	orrs	r5, r3
1000b7a0:	508d      	str	r5, [r1, r2]
1000b7a2:	e078      	b.n	1000b896 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b7a4:	493c      	ldr	r1, [pc, #240]	; (1000b898 <gpio_pinmux_cofiguration+0x148>)
1000b7a6:	22d2      	movs	r2, #210	; 0xd2
1000b7a8:	0052      	lsls	r2, r2, #1
1000b7aa:	588c      	ldr	r4, [r1, r2]
1000b7ac:	2303      	movs	r3, #3
1000b7ae:	4018      	ands	r0, r3
1000b7b0:	00c0      	lsls	r0, r0, #3
1000b7b2:	333c      	adds	r3, #60	; 0x3c
1000b7b4:	4083      	lsls	r3, r0
1000b7b6:	439c      	bics	r4, r3
1000b7b8:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b7ba:	588b      	ldr	r3, [r1, r2]
1000b7bc:	4085      	lsls	r5, r0
1000b7be:	431d      	orrs	r5, r3
1000b7c0:	508d      	str	r5, [r1, r2]
1000b7c2:	e068      	b.n	1000b896 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000b7c4:	280f      	cmp	r0, #15
1000b7c6:	d832      	bhi.n	1000b82e <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b7c8:	4a33      	ldr	r2, [pc, #204]	; (1000b898 <gpio_pinmux_cofiguration+0x148>)
1000b7ca:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000b7cc:	2307      	movs	r3, #7
1000b7ce:	4003      	ands	r3, r0
1000b7d0:	009b      	lsls	r3, r3, #2
1000b7d2:	2607      	movs	r6, #7
1000b7d4:	409e      	lsls	r6, r3
1000b7d6:	43b4      	bics	r4, r6
1000b7d8:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000b7da:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000b7dc:	000e      	movs	r6, r1
1000b7de:	409e      	lsls	r6, r3
1000b7e0:	0033      	movs	r3, r6
1000b7e2:	4323      	orrs	r3, r4
1000b7e4:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000b7e6:	2901      	cmp	r1, #1
1000b7e8:	d155      	bne.n	1000b896 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000b7ea:	280b      	cmp	r0, #11
1000b7ec:	d80f      	bhi.n	1000b80e <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b7ee:	0011      	movs	r1, r2
1000b7f0:	22d4      	movs	r2, #212	; 0xd4
1000b7f2:	0052      	lsls	r2, r2, #1
1000b7f4:	588c      	ldr	r4, [r1, r2]
1000b7f6:	2303      	movs	r3, #3
1000b7f8:	4018      	ands	r0, r3
1000b7fa:	00c0      	lsls	r0, r0, #3
1000b7fc:	333c      	adds	r3, #60	; 0x3c
1000b7fe:	4083      	lsls	r3, r0
1000b800:	439c      	bics	r4, r3
1000b802:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b804:	588b      	ldr	r3, [r1, r2]
1000b806:	4085      	lsls	r5, r0
1000b808:	431d      	orrs	r5, r3
1000b80a:	508d      	str	r5, [r1, r2]
1000b80c:	e043      	b.n	1000b896 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b80e:	4922      	ldr	r1, [pc, #136]	; (1000b898 <gpio_pinmux_cofiguration+0x148>)
1000b810:	22d6      	movs	r2, #214	; 0xd6
1000b812:	0052      	lsls	r2, r2, #1
1000b814:	588c      	ldr	r4, [r1, r2]
1000b816:	2303      	movs	r3, #3
1000b818:	4018      	ands	r0, r3
1000b81a:	00c0      	lsls	r0, r0, #3
1000b81c:	333c      	adds	r3, #60	; 0x3c
1000b81e:	4083      	lsls	r3, r0
1000b820:	439c      	bics	r4, r3
1000b822:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b824:	588b      	ldr	r3, [r1, r2]
1000b826:	4085      	lsls	r5, r0
1000b828:	431d      	orrs	r5, r3
1000b82a:	508d      	str	r5, [r1, r2]
1000b82c:	e033      	b.n	1000b896 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000b82e:	2817      	cmp	r0, #23
1000b830:	d831      	bhi.n	1000b896 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b832:	4a19      	ldr	r2, [pc, #100]	; (1000b898 <gpio_pinmux_cofiguration+0x148>)
1000b834:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000b836:	2307      	movs	r3, #7
1000b838:	4003      	ands	r3, r0
1000b83a:	009b      	lsls	r3, r3, #2
1000b83c:	2607      	movs	r6, #7
1000b83e:	409e      	lsls	r6, r3
1000b840:	43b4      	bics	r4, r6
1000b842:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000b844:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000b846:	000e      	movs	r6, r1
1000b848:	409e      	lsls	r6, r3
1000b84a:	0033      	movs	r3, r6
1000b84c:	4323      	orrs	r3, r4
1000b84e:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000b850:	2901      	cmp	r1, #1
1000b852:	d120      	bne.n	1000b896 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000b854:	2813      	cmp	r0, #19
1000b856:	d80f      	bhi.n	1000b878 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b858:	0011      	movs	r1, r2
1000b85a:	22d8      	movs	r2, #216	; 0xd8
1000b85c:	0052      	lsls	r2, r2, #1
1000b85e:	588c      	ldr	r4, [r1, r2]
1000b860:	2303      	movs	r3, #3
1000b862:	4018      	ands	r0, r3
1000b864:	00c0      	lsls	r0, r0, #3
1000b866:	333c      	adds	r3, #60	; 0x3c
1000b868:	4083      	lsls	r3, r0
1000b86a:	439c      	bics	r4, r3
1000b86c:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b86e:	588b      	ldr	r3, [r1, r2]
1000b870:	4085      	lsls	r5, r0
1000b872:	431d      	orrs	r5, r3
1000b874:	508d      	str	r5, [r1, r2]
1000b876:	e00e      	b.n	1000b896 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b878:	4a07      	ldr	r2, [pc, #28]	; (1000b898 <gpio_pinmux_cofiguration+0x148>)
1000b87a:	23da      	movs	r3, #218	; 0xda
1000b87c:	005b      	lsls	r3, r3, #1
1000b87e:	58d1      	ldr	r1, [r2, r3]
1000b880:	2403      	movs	r4, #3
1000b882:	4020      	ands	r0, r4
1000b884:	00c0      	lsls	r0, r0, #3
1000b886:	343c      	adds	r4, #60	; 0x3c
1000b888:	4084      	lsls	r4, r0
1000b88a:	43a1      	bics	r1, r4
1000b88c:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b88e:	58d1      	ldr	r1, [r2, r3]
1000b890:	4085      	lsls	r5, r0
1000b892:	430d      	orrs	r5, r1
1000b894:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000b896:	bd70      	pop	{r4, r5, r6, pc}
1000b898:	4000b000 	.word	0x4000b000

1000b89c <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000b89c:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000b89e:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000b8a0:	280f      	cmp	r0, #15
1000b8a2:	d904      	bls.n	1000b8ae <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000b8a4:	241f      	movs	r4, #31
1000b8a6:	4284      	cmp	r4, r0
1000b8a8:	415b      	adcs	r3, r3
1000b8aa:	3c1d      	subs	r4, #29
1000b8ac:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000b8ae:	2a01      	cmp	r2, #1
1000b8b0:	d016      	beq.n	1000b8e0 <gpio_register_callback+0x44>
1000b8b2:	2a00      	cmp	r2, #0
1000b8b4:	d004      	beq.n	1000b8c0 <gpio_register_callback+0x24>
1000b8b6:	2a02      	cmp	r2, #2
1000b8b8:	d022      	beq.n	1000b900 <gpio_register_callback+0x64>
1000b8ba:	2a03      	cmp	r2, #3
1000b8bc:	d030      	beq.n	1000b920 <gpio_register_callback+0x84>
1000b8be:	e03e      	b.n	1000b93e <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000b8c0:	4e29      	ldr	r6, [pc, #164]	; (1000b968 <gpio_register_callback+0xcc>)
1000b8c2:	00dc      	lsls	r4, r3, #3
1000b8c4:	18e2      	adds	r2, r4, r3
1000b8c6:	00d2      	lsls	r2, r2, #3
1000b8c8:	5997      	ldr	r7, [r2, r6]
1000b8ca:	250f      	movs	r5, #15
1000b8cc:	4005      	ands	r5, r0
1000b8ce:	2201      	movs	r2, #1
1000b8d0:	40aa      	lsls	r2, r5
1000b8d2:	b292      	uxth	r2, r2
1000b8d4:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000b8d6:	18e4      	adds	r4, r4, r3
1000b8d8:	00e4      	lsls	r4, r4, #3
1000b8da:	59a4      	ldr	r4, [r4, r6]
1000b8dc:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000b8de:	e02e      	b.n	1000b93e <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000b8e0:	4e21      	ldr	r6, [pc, #132]	; (1000b968 <gpio_register_callback+0xcc>)
1000b8e2:	00dc      	lsls	r4, r3, #3
1000b8e4:	18e2      	adds	r2, r4, r3
1000b8e6:	00d2      	lsls	r2, r2, #3
1000b8e8:	5997      	ldr	r7, [r2, r6]
1000b8ea:	250f      	movs	r5, #15
1000b8ec:	4005      	ands	r5, r0
1000b8ee:	2201      	movs	r2, #1
1000b8f0:	40aa      	lsls	r2, r5
1000b8f2:	b292      	uxth	r2, r2
1000b8f4:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000b8f6:	18e4      	adds	r4, r4, r3
1000b8f8:	00e4      	lsls	r4, r4, #3
1000b8fa:	59a4      	ldr	r4, [r4, r6]
1000b8fc:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000b8fe:	e01e      	b.n	1000b93e <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000b900:	4e19      	ldr	r6, [pc, #100]	; (1000b968 <gpio_register_callback+0xcc>)
1000b902:	00dc      	lsls	r4, r3, #3
1000b904:	18e2      	adds	r2, r4, r3
1000b906:	00d2      	lsls	r2, r2, #3
1000b908:	5997      	ldr	r7, [r2, r6]
1000b90a:	250f      	movs	r5, #15
1000b90c:	4005      	ands	r5, r0
1000b90e:	2201      	movs	r2, #1
1000b910:	40aa      	lsls	r2, r5
1000b912:	b292      	uxth	r2, r2
1000b914:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000b916:	18e4      	adds	r4, r4, r3
1000b918:	00e4      	lsls	r4, r4, #3
1000b91a:	59a4      	ldr	r4, [r4, r6]
1000b91c:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000b91e:	e00e      	b.n	1000b93e <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000b920:	4e11      	ldr	r6, [pc, #68]	; (1000b968 <gpio_register_callback+0xcc>)
1000b922:	00dc      	lsls	r4, r3, #3
1000b924:	18e2      	adds	r2, r4, r3
1000b926:	00d2      	lsls	r2, r2, #3
1000b928:	5997      	ldr	r7, [r2, r6]
1000b92a:	250f      	movs	r5, #15
1000b92c:	4005      	ands	r5, r0
1000b92e:	2201      	movs	r2, #1
1000b930:	40aa      	lsls	r2, r5
1000b932:	b292      	uxth	r2, r2
1000b934:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000b936:	18e4      	adds	r4, r4, r3
1000b938:	00e4      	lsls	r4, r4, #3
1000b93a:	59a4      	ldr	r4, [r4, r6]
1000b93c:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000b93e:	220f      	movs	r2, #15
1000b940:	4010      	ands	r0, r2
1000b942:	4c09      	ldr	r4, [pc, #36]	; (1000b968 <gpio_register_callback+0xcc>)
1000b944:	00dd      	lsls	r5, r3, #3
1000b946:	18ea      	adds	r2, r5, r3
1000b948:	0052      	lsls	r2, r2, #1
1000b94a:	1812      	adds	r2, r2, r0
1000b94c:	0092      	lsls	r2, r2, #2
1000b94e:	18a2      	adds	r2, r4, r2
1000b950:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000b952:	18ea      	adds	r2, r5, r3
1000b954:	00d2      	lsls	r2, r2, #3
1000b956:	18a2      	adds	r2, r4, r2
1000b958:	3244      	adds	r2, #68	; 0x44
1000b95a:	2101      	movs	r1, #1
1000b95c:	4081      	lsls	r1, r0
1000b95e:	8813      	ldrh	r3, [r2, #0]
1000b960:	430b      	orrs	r3, r1
1000b962:	8013      	strh	r3, [r2, #0]
}
1000b964:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b966:	46c0      	nop			; (mov r8, r8)
1000b968:	10014634 	.word	0x10014634

1000b96c <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000b96c:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000b96e:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000b970:	280f      	cmp	r0, #15
1000b972:	d904      	bls.n	1000b97e <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000b974:	221f      	movs	r2, #31
1000b976:	4282      	cmp	r2, r0
1000b978:	415b      	adcs	r3, r3
1000b97a:	3a1d      	subs	r2, #29
1000b97c:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000b97e:	220f      	movs	r2, #15
1000b980:	4010      	ands	r0, r2
1000b982:	2101      	movs	r1, #1
1000b984:	4081      	lsls	r1, r0
1000b986:	4c07      	ldr	r4, [pc, #28]	; (1000b9a4 <gpio_disable_callback+0x38>)
1000b988:	00dd      	lsls	r5, r3, #3
1000b98a:	18ea      	adds	r2, r5, r3
1000b98c:	00d2      	lsls	r2, r2, #3
1000b98e:	18a2      	adds	r2, r4, r2
1000b990:	3246      	adds	r2, #70	; 0x46
1000b992:	8810      	ldrh	r0, [r2, #0]
1000b994:	4388      	bics	r0, r1
1000b996:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000b998:	18eb      	adds	r3, r5, r3
1000b99a:	00db      	lsls	r3, r3, #3
1000b99c:	591b      	ldr	r3, [r3, r4]
1000b99e:	b289      	uxth	r1, r1
1000b9a0:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000b9a2:	bd30      	pop	{r4, r5, pc}
1000b9a4:	10014634 	.word	0x10014634

1000b9a8 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000b9a8:	b510      	push	{r4, lr}
1000b9aa:	4a11      	ldr	r2, [pc, #68]	; (1000b9f0 <gpio_init+0x48>)
1000b9ac:	0010      	movs	r0, r2
1000b9ae:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000b9b0:	2100      	movs	r1, #0
1000b9b2:	e007      	b.n	1000b9c4 <gpio_init+0x1c>
1000b9b4:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000b9b6:	4293      	cmp	r3, r2
1000b9b8:	d1fc      	bne.n	1000b9b4 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000b9ba:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000b9bc:	8011      	strh	r1, [r2, #0]
1000b9be:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000b9c0:	4282      	cmp	r2, r0
1000b9c2:	d002      	beq.n	1000b9ca <gpio_init+0x22>
1000b9c4:	0013      	movs	r3, r2
1000b9c6:	3b40      	subs	r3, #64	; 0x40
1000b9c8:	e7f4      	b.n	1000b9b4 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000b9ca:	4b0a      	ldr	r3, [pc, #40]	; (1000b9f4 <gpio_init+0x4c>)
1000b9cc:	4a0a      	ldr	r2, [pc, #40]	; (1000b9f8 <gpio_init+0x50>)
1000b9ce:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000b9d0:	4a0a      	ldr	r2, [pc, #40]	; (1000b9fc <gpio_init+0x54>)
1000b9d2:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000b9d4:	490a      	ldr	r1, [pc, #40]	; (1000ba00 <gpio_init+0x58>)
1000b9d6:	2290      	movs	r2, #144	; 0x90
1000b9d8:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000b9da:	490a      	ldr	r1, [pc, #40]	; (1000ba04 <gpio_init+0x5c>)
1000b9dc:	2027      	movs	r0, #39	; 0x27
1000b9de:	4c0a      	ldr	r4, [pc, #40]	; (1000ba08 <gpio_init+0x60>)
1000b9e0:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000b9e2:	490a      	ldr	r1, [pc, #40]	; (1000ba0c <gpio_init+0x64>)
1000b9e4:	2028      	movs	r0, #40	; 0x28
1000b9e6:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000b9e8:	4909      	ldr	r1, [pc, #36]	; (1000ba10 <gpio_init+0x68>)
1000b9ea:	2029      	movs	r0, #41	; 0x29
1000b9ec:	47a0      	blx	r4
}
1000b9ee:	bd10      	pop	{r4, pc}
1000b9f0:	10014678 	.word	0x10014678
1000b9f4:	10014634 	.word	0x10014634
1000b9f8:	40010000 	.word	0x40010000
1000b9fc:	40011000 	.word	0x40011000
1000ba00:	40013000 	.word	0x40013000
1000ba04:	1000b439 	.word	0x1000b439
1000ba08:	1000c44d 	.word	0x1000c44d
1000ba0c:	1000b49d 	.word	0x1000b49d
1000ba10:	1000b50d 	.word	0x1000b50d

1000ba14 <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000ba14:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ba16:	464f      	mov	r7, r9
1000ba18:	4646      	mov	r6, r8
1000ba1a:	b4c0      	push	{r6, r7}
1000ba1c:	4681      	mov	r9, r0
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
1000ba1e:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000ba20:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
1000ba22:	2d00      	cmp	r5, #0
1000ba24:	d02f      	beq.n	1000ba86 <_i2c_master_read_packet+0x72>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000ba26:	6802      	ldr	r2, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000ba28:	2428      	movs	r4, #40	; 0x28
1000ba2a:	5d13      	ldrb	r3, [r2, r4]
1000ba2c:	07db      	lsls	r3, r3, #31
1000ba2e:	d4fc      	bmi.n	1000ba2a <_i2c_master_read_packet+0x16>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
1000ba30:	2301      	movs	r3, #1
1000ba32:	2434      	movs	r4, #52	; 0x34
1000ba34:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000ba36:	3c14      	subs	r4, #20
1000ba38:	5513      	strb	r3, [r2, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
1000ba3a:	880b      	ldrh	r3, [r1, #0]
1000ba3c:	005b      	lsls	r3, r3, #1
1000ba3e:	2402      	movs	r4, #2
1000ba40:	34ff      	adds	r4, #255	; 0xff
1000ba42:	4323      	orrs	r3, r4
1000ba44:	b29b      	uxth	r3, r3
1000ba46:	8013      	strh	r3, [r2, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
1000ba48:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
1000ba4a:	2301      	movs	r3, #1
1000ba4c:	4698      	mov	r8, r3
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
1000ba4e:	7b13      	ldrb	r3, [r2, #12]
1000ba50:	b2db      	uxtb	r3, r3
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
1000ba52:	4640      	mov	r0, r8
1000ba54:	4218      	tst	r0, r3
1000ba56:	d006      	beq.n	1000ba66 <_i2c_master_read_packet+0x52>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
1000ba58:	1c67      	adds	r7, r4, #1
1000ba5a:	7910      	ldrb	r0, [r2, #4]
1000ba5c:	4684      	mov	ip, r0
1000ba5e:	6848      	ldr	r0, [r1, #4]
1000ba60:	4666      	mov	r6, ip
1000ba62:	5506      	strb	r6, [r0, r4]
1000ba64:	b2bc      	uxth	r4, r7
	} while (counter < length); 
1000ba66:	42ac      	cmp	r4, r5
1000ba68:	d3f1      	bcc.n	1000ba4e <_i2c_master_read_packet+0x3a>

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000ba6a:	06db      	lsls	r3, r3, #27
1000ba6c:	d403      	bmi.n	1000ba76 <_i2c_master_read_packet+0x62>
1000ba6e:	2110      	movs	r1, #16
		status = i2c_module->TRANSMIT_STATUS.reg;
1000ba70:	7a13      	ldrb	r3, [r2, #8]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000ba72:	420b      	tst	r3, r1
1000ba74:	d0fc      	beq.n	1000ba70 <_i2c_master_read_packet+0x5c>
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
1000ba76:	464b      	mov	r3, r9
1000ba78:	7959      	ldrb	r1, [r3, #5]
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
1000ba7a:	2300      	movs	r3, #0
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
1000ba7c:	2900      	cmp	r1, #0
1000ba7e:	d102      	bne.n	1000ba86 <_i2c_master_read_packet+0x72>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000ba80:	3320      	adds	r3, #32
1000ba82:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
1000ba84:	2300      	movs	r3, #0
}
1000ba86:	0018      	movs	r0, r3
1000ba88:	bc0c      	pop	{r2, r3}
1000ba8a:	4690      	mov	r8, r2
1000ba8c:	4699      	mov	r9, r3
1000ba8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000ba90 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000ba90:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ba92:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
1000ba94:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
1000ba96:	884e      	ldrh	r6, [r1, #2]
1000ba98:	2428      	movs	r4, #40	; 0x28
1000ba9a:	5d13      	ldrb	r3, [r2, r4]
1000ba9c:	07db      	lsls	r3, r3, #31
1000ba9e:	d4fc      	bmi.n	1000ba9a <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
1000baa0:	2301      	movs	r3, #1
1000baa2:	2434      	movs	r4, #52	; 0x34
1000baa4:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000baa6:	3c14      	subs	r4, #20
1000baa8:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
1000baaa:	880b      	ldrh	r3, [r1, #0]
1000baac:	005b      	lsls	r3, r3, #1
1000baae:	34e0      	adds	r4, #224	; 0xe0
1000bab0:	4323      	orrs	r3, r4
1000bab2:	b29b      	uxth	r3, r3
1000bab4:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
1000bab6:	2400      	movs	r4, #0
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
        //printf(".");
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
1000bab8:	2501      	movs	r5, #1
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
        //printf(".");
		status = i2c_module->TRANSMIT_STATUS.reg;
1000baba:	7a13      	ldrb	r3, [r2, #8]
1000babc:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
1000babe:	421d      	tst	r5, r3
1000bac0:	d004      	beq.n	1000bacc <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
1000bac2:	1c67      	adds	r7, r4, #1
1000bac4:	6848      	ldr	r0, [r1, #4]
1000bac6:	5d04      	ldrb	r4, [r0, r4]
1000bac8:	8014      	strh	r4, [r2, #0]
1000baca:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
1000bacc:	42b4      	cmp	r4, r6
1000bace:	d3f4      	bcc.n	1000baba <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000bad0:	06db      	lsls	r3, r3, #27
1000bad2:	d403      	bmi.n	1000badc <_i2c_master_write_packet+0x4c>
1000bad4:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
1000bad6:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000bad8:	420b      	tst	r3, r1
1000bada:	d0fc      	beq.n	1000bad6 <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
1000badc:	4663      	mov	r3, ip
1000bade:	795b      	ldrb	r3, [r3, #5]
1000bae0:	2b00      	cmp	r3, #0
1000bae2:	d102      	bne.n	1000baea <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000bae4:	2100      	movs	r1, #0
1000bae6:	3320      	adds	r3, #32
1000bae8:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
1000baea:	2000      	movs	r0, #0
1000baec:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000baee:	46c0      	nop			; (mov r8, r8)

1000baf0 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
1000baf0:	2303      	movs	r3, #3
1000baf2:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
1000baf4:	330d      	adds	r3, #13
1000baf6:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
1000baf8:	3b08      	subs	r3, #8
1000bafa:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
1000bafc:	3301      	adds	r3, #1
1000bafe:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
1000bb00:	3b07      	subs	r3, #7
1000bb02:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
1000bb04:	6103      	str	r3, [r0, #16]
}
1000bb06:	4770      	bx	lr

1000bb08 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
1000bb08:	b570      	push	{r4, r5, r6, lr}
1000bb0a:	0004      	movs	r4, r0
1000bb0c:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
1000bb0e:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
1000bb10:	2800      	cmp	r0, #0
1000bb12:	d026      	beq.n	1000bb62 <i2c_master_init+0x5a>
1000bb14:	2a00      	cmp	r2, #0
1000bb16:	d026      	beq.n	1000bb66 <i2c_master_init+0x5e>
1000bb18:	2228      	movs	r2, #40	; 0x28
1000bb1a:	5c8b      	ldrb	r3, [r1, r2]
1000bb1c:	07db      	lsls	r3, r3, #31
1000bb1e:	d4fc      	bmi.n	1000bb1a <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
1000bb20:	2300      	movs	r3, #0
1000bb22:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
1000bb24:	6823      	ldr	r3, [r4, #0]
1000bb26:	4a11      	ldr	r2, [pc, #68]	; (1000bb6c <i2c_master_init+0x64>)
1000bb28:	4293      	cmp	r3, r2
1000bb2a:	d103      	bne.n	1000bb34 <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
1000bb2c:	2003      	movs	r0, #3
1000bb2e:	4b10      	ldr	r3, [pc, #64]	; (1000bb70 <i2c_master_init+0x68>)
1000bb30:	4798      	blx	r3
1000bb32:	e006      	b.n	1000bb42 <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
1000bb34:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
1000bb36:	4a0f      	ldr	r2, [pc, #60]	; (1000bb74 <i2c_master_init+0x6c>)
1000bb38:	4293      	cmp	r3, r2
1000bb3a:	d115      	bne.n	1000bb68 <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
1000bb3c:	3002      	adds	r0, #2
1000bb3e:	4b0c      	ldr	r3, [pc, #48]	; (1000bb70 <i2c_master_init+0x68>)
1000bb40:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
1000bb42:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
1000bb44:	8929      	ldrh	r1, [r5, #8]
1000bb46:	7928      	ldrb	r0, [r5, #4]
1000bb48:	4e0b      	ldr	r6, [pc, #44]	; (1000bb78 <i2c_master_init+0x70>)
1000bb4a:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
1000bb4c:	8a29      	ldrh	r1, [r5, #16]
1000bb4e:	7b28      	ldrb	r0, [r5, #12]
1000bb50:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000bb52:	782b      	ldrb	r3, [r5, #0]
1000bb54:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000bb56:	886b      	ldrh	r3, [r5, #2]
1000bb58:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
1000bb5a:	2301      	movs	r3, #1
1000bb5c:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
1000bb5e:	2000      	movs	r0, #0
1000bb60:	e002      	b.n	1000bb68 <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
1000bb62:	2017      	movs	r0, #23
1000bb64:	e000      	b.n	1000bb68 <i2c_master_init+0x60>
1000bb66:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
1000bb68:	bd70      	pop	{r4, r5, r6, pc}
1000bb6a:	46c0      	nop			; (mov r8, r8)
1000bb6c:	40003000 	.word	0x40003000
1000bb70:	1000bfe5 	.word	0x1000bfe5
1000bb74:	40003400 	.word	0x40003400
1000bb78:	1000b751 	.word	0x1000b751

1000bb7c <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000bb7c:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
1000bb7e:	2800      	cmp	r0, #0
1000bb80:	d008      	beq.n	1000bb94 <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
1000bb82:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
1000bb84:	2900      	cmp	r1, #0
1000bb86:	d006      	beq.n	1000bb96 <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000bb88:	2300      	movs	r3, #0
1000bb8a:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
1000bb8c:	4b03      	ldr	r3, [pc, #12]	; (1000bb9c <i2c_master_read_packet_wait+0x20>)
1000bb8e:	4798      	blx	r3
1000bb90:	0003      	movs	r3, r0
1000bb92:	e000      	b.n	1000bb96 <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
1000bb94:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
1000bb96:	0018      	movs	r0, r3
1000bb98:	bd10      	pop	{r4, pc}
1000bb9a:	46c0      	nop			; (mov r8, r8)
1000bb9c:	1000ba15 	.word	0x1000ba15

1000bba0 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000bba0:	b570      	push	{r4, r5, r6, lr}
1000bba2:	0004      	movs	r4, r0
1000bba4:	000d      	movs	r5, r1
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000bba6:	2800      	cmp	r0, #0
1000bba8:	d00c      	beq.n	1000bbc4 <i2c_master_write_packet_wait+0x24>
		return STATUS_ERR_INVALID_ARG;
1000bbaa:	2017      	movs	r0, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000bbac:	2900      	cmp	r1, #0
1000bbae:	d00a      	beq.n	1000bbc6 <i2c_master_write_packet_wait+0x26>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000bbb0:	2300      	movs	r3, #0
1000bbb2:	7163      	strb	r3, [r4, #5]

    printf("!!");
1000bbb4:	4804      	ldr	r0, [pc, #16]	; (1000bbc8 <i2c_master_write_packet_wait+0x28>)
1000bbb6:	4b05      	ldr	r3, [pc, #20]	; (1000bbcc <i2c_master_write_packet_wait+0x2c>)
1000bbb8:	4798      	blx	r3
	return _i2c_master_write_packet(module, packet);
1000bbba:	0029      	movs	r1, r5
1000bbbc:	0020      	movs	r0, r4
1000bbbe:	4b04      	ldr	r3, [pc, #16]	; (1000bbd0 <i2c_master_write_packet_wait+0x30>)
1000bbc0:	4798      	blx	r3
1000bbc2:	e000      	b.n	1000bbc6 <i2c_master_write_packet_wait+0x26>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
1000bbc4:	2017      	movs	r0, #23

	module->no_stop = false;

    printf("!!");
	return _i2c_master_write_packet(module, packet);
}
1000bbc6:	bd70      	pop	{r4, r5, r6, pc}
1000bbc8:	100120e8 	.word	0x100120e8
1000bbcc:	100103b9 	.word	0x100103b9
1000bbd0:	1000ba91 	.word	0x1000ba91

1000bbd4 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000bbd4:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
1000bbd6:	2800      	cmp	r0, #0
1000bbd8:	d008      	beq.n	1000bbec <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
1000bbda:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
1000bbdc:	2900      	cmp	r1, #0
1000bbde:	d006      	beq.n	1000bbee <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
1000bbe0:	3b16      	subs	r3, #22
1000bbe2:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
1000bbe4:	4b03      	ldr	r3, [pc, #12]	; (1000bbf4 <i2c_master_write_packet_wait_no_stop+0x20>)
1000bbe6:	4798      	blx	r3
1000bbe8:	0003      	movs	r3, r0
1000bbea:	e000      	b.n	1000bbee <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
1000bbec:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
1000bbee:	0018      	movs	r0, r3
1000bbf0:	bd10      	pop	{r4, pc}
1000bbf2:	46c0      	nop			; (mov r8, r8)
1000bbf4:	1000ba91 	.word	0x1000ba91

1000bbf8 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000bbf8:	2801      	cmp	r0, #1
1000bbfa:	d00d      	beq.n	1000bc18 <system_clock_config+0x20>
1000bbfc:	2800      	cmp	r0, #0
1000bbfe:	d002      	beq.n	1000bc06 <system_clock_config+0xe>
1000bc00:	2802      	cmp	r0, #2
1000bc02:	d01c      	beq.n	1000bc3e <system_clock_config+0x46>
1000bc04:	e02e      	b.n	1000bc64 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000bc06:	4a18      	ldr	r2, [pc, #96]	; (1000bc68 <system_clock_config+0x70>)
1000bc08:	6990      	ldr	r0, [r2, #24]
1000bc0a:	230c      	movs	r3, #12
1000bc0c:	4303      	orrs	r3, r0
1000bc0e:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000bc10:	4a16      	ldr	r2, [pc, #88]	; (1000bc6c <system_clock_config+0x74>)
1000bc12:	4b17      	ldr	r3, [pc, #92]	; (1000bc70 <system_clock_config+0x78>)
1000bc14:	601a      	str	r2, [r3, #0]
			break;
1000bc16:	e01a      	b.n	1000bc4e <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000bc18:	4b13      	ldr	r3, [pc, #76]	; (1000bc68 <system_clock_config+0x70>)
1000bc1a:	6998      	ldr	r0, [r3, #24]
1000bc1c:	2208      	movs	r2, #8
1000bc1e:	4302      	orrs	r2, r0
1000bc20:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000bc22:	699a      	ldr	r2, [r3, #24]
1000bc24:	2004      	movs	r0, #4
1000bc26:	4382      	bics	r2, r0
1000bc28:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000bc2a:	4a12      	ldr	r2, [pc, #72]	; (1000bc74 <system_clock_config+0x7c>)
1000bc2c:	6853      	ldr	r3, [r2, #4]
1000bc2e:	2080      	movs	r0, #128	; 0x80
1000bc30:	0300      	lsls	r0, r0, #12
1000bc32:	4303      	orrs	r3, r0
1000bc34:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000bc36:	4a10      	ldr	r2, [pc, #64]	; (1000bc78 <system_clock_config+0x80>)
1000bc38:	4b0d      	ldr	r3, [pc, #52]	; (1000bc70 <system_clock_config+0x78>)
1000bc3a:	601a      	str	r2, [r3, #0]
			break;
1000bc3c:	e007      	b.n	1000bc4e <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000bc3e:	4a0a      	ldr	r2, [pc, #40]	; (1000bc68 <system_clock_config+0x70>)
1000bc40:	6993      	ldr	r3, [r2, #24]
1000bc42:	200c      	movs	r0, #12
1000bc44:	4383      	bics	r3, r0
1000bc46:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000bc48:	4a08      	ldr	r2, [pc, #32]	; (1000bc6c <system_clock_config+0x74>)
1000bc4a:	4b09      	ldr	r3, [pc, #36]	; (1000bc70 <system_clock_config+0x78>)
1000bc4c:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000bc4e:	4b06      	ldr	r3, [pc, #24]	; (1000bc68 <system_clock_config+0x70>)
1000bc50:	699a      	ldr	r2, [r3, #24]
1000bc52:	2003      	movs	r0, #3
1000bc54:	4382      	bics	r2, r0
1000bc56:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000bc58:	699a      	ldr	r2, [r3, #24]
1000bc5a:	4001      	ands	r1, r0
1000bc5c:	4311      	orrs	r1, r2
1000bc5e:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000bc60:	2000      	movs	r0, #0
1000bc62:	e000      	b.n	1000bc66 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000bc64:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000bc66:	4770      	bx	lr
1000bc68:	4000b000 	.word	0x4000b000
1000bc6c:	018cba80 	.word	0x018cba80
1000bc70:	1001470c 	.word	0x1001470c
1000bc74:	4000f000 	.word	0x4000f000
1000bc78:	001e8480 	.word	0x001e8480

1000bc7c <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000bc7c:	4b01      	ldr	r3, [pc, #4]	; (1000bc84 <system_clock_get_value+0x8>)
1000bc7e:	6818      	ldr	r0, [r3, #0]
}
1000bc80:	4770      	bx	lr
1000bc82:	46c0      	nop			; (mov r8, r8)
1000bc84:	1001470c 	.word	0x1001470c

1000bc88 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000bc88:	b500      	push	{lr}
	switch (peripheral) {
1000bc8a:	2835      	cmp	r0, #53	; 0x35
1000bc8c:	d900      	bls.n	1000bc90 <system_clock_peripheral_enable+0x8>
1000bc8e:	e1a2      	b.n	1000bfd6 <system_clock_peripheral_enable+0x34e>
1000bc90:	0080      	lsls	r0, r0, #2
1000bc92:	4bd2      	ldr	r3, [pc, #840]	; (1000bfdc <system_clock_peripheral_enable+0x354>)
1000bc94:	581b      	ldr	r3, [r3, r0]
1000bc96:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bc98:	4ad1      	ldr	r2, [pc, #836]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bc9a:	68d1      	ldr	r1, [r2, #12]
1000bc9c:	2302      	movs	r3, #2
1000bc9e:	430b      	orrs	r3, r1
1000bca0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bca2:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000bca4:	e198      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bca6:	4ace      	ldr	r2, [pc, #824]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bca8:	68d1      	ldr	r1, [r2, #12]
1000bcaa:	2304      	movs	r3, #4
1000bcac:	430b      	orrs	r3, r1
1000bcae:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcb0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000bcb2:	e191      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bcb4:	4aca      	ldr	r2, [pc, #808]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bcb6:	68d1      	ldr	r1, [r2, #12]
1000bcb8:	2308      	movs	r3, #8
1000bcba:	430b      	orrs	r3, r1
1000bcbc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcbe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000bcc0:	e18a      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bcc2:	4ac7      	ldr	r2, [pc, #796]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bcc4:	68d1      	ldr	r1, [r2, #12]
1000bcc6:	2310      	movs	r3, #16
1000bcc8:	430b      	orrs	r3, r1
1000bcca:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bccc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000bcce:	e183      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bcd0:	4ac3      	ldr	r2, [pc, #780]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bcd2:	68d1      	ldr	r1, [r2, #12]
1000bcd4:	2320      	movs	r3, #32
1000bcd6:	430b      	orrs	r3, r1
1000bcd8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcda:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000bcdc:	e17c      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bcde:	4ac0      	ldr	r2, [pc, #768]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bce0:	68d1      	ldr	r1, [r2, #12]
1000bce2:	2380      	movs	r3, #128	; 0x80
1000bce4:	430b      	orrs	r3, r1
1000bce6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bce8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000bcea:	e175      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bcec:	4abc      	ldr	r2, [pc, #752]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bcee:	68d3      	ldr	r3, [r2, #12]
1000bcf0:	2180      	movs	r1, #128	; 0x80
1000bcf2:	0049      	lsls	r1, r1, #1
1000bcf4:	430b      	orrs	r3, r1
1000bcf6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcf8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000bcfa:	e16d      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bcfc:	4ab8      	ldr	r2, [pc, #736]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bcfe:	68d3      	ldr	r3, [r2, #12]
1000bd00:	2180      	movs	r1, #128	; 0x80
1000bd02:	0109      	lsls	r1, r1, #4
1000bd04:	430b      	orrs	r3, r1
1000bd06:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd08:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000bd0a:	e165      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd0c:	4ab4      	ldr	r2, [pc, #720]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bd0e:	68d3      	ldr	r3, [r2, #12]
1000bd10:	2180      	movs	r1, #128	; 0x80
1000bd12:	0149      	lsls	r1, r1, #5
1000bd14:	430b      	orrs	r3, r1
1000bd16:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd18:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000bd1a:	e15d      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd1c:	4ab0      	ldr	r2, [pc, #704]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bd1e:	68d3      	ldr	r3, [r2, #12]
1000bd20:	2180      	movs	r1, #128	; 0x80
1000bd22:	0189      	lsls	r1, r1, #6
1000bd24:	430b      	orrs	r3, r1
1000bd26:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd28:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000bd2a:	e155      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd2c:	4aac      	ldr	r2, [pc, #688]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bd2e:	68d3      	ldr	r3, [r2, #12]
1000bd30:	2180      	movs	r1, #128	; 0x80
1000bd32:	01c9      	lsls	r1, r1, #7
1000bd34:	430b      	orrs	r3, r1
1000bd36:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd38:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000bd3a:	e14d      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd3c:	4aa8      	ldr	r2, [pc, #672]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bd3e:	68d3      	ldr	r3, [r2, #12]
1000bd40:	2180      	movs	r1, #128	; 0x80
1000bd42:	0209      	lsls	r1, r1, #8
1000bd44:	430b      	orrs	r3, r1
1000bd46:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd48:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000bd4a:	e145      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd4c:	4aa4      	ldr	r2, [pc, #656]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bd4e:	68d3      	ldr	r3, [r2, #12]
1000bd50:	2180      	movs	r1, #128	; 0x80
1000bd52:	0249      	lsls	r1, r1, #9
1000bd54:	430b      	orrs	r3, r1
1000bd56:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd58:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000bd5a:	e13d      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd5c:	4aa0      	ldr	r2, [pc, #640]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bd5e:	68d3      	ldr	r3, [r2, #12]
1000bd60:	2180      	movs	r1, #128	; 0x80
1000bd62:	0289      	lsls	r1, r1, #10
1000bd64:	430b      	orrs	r3, r1
1000bd66:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd68:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000bd6a:	e135      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd6c:	4a9c      	ldr	r2, [pc, #624]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bd6e:	68d3      	ldr	r3, [r2, #12]
1000bd70:	2180      	movs	r1, #128	; 0x80
1000bd72:	02c9      	lsls	r1, r1, #11
1000bd74:	430b      	orrs	r3, r1
1000bd76:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd78:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000bd7a:	e12d      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd7c:	4a98      	ldr	r2, [pc, #608]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bd7e:	68d3      	ldr	r3, [r2, #12]
1000bd80:	2180      	movs	r1, #128	; 0x80
1000bd82:	0309      	lsls	r1, r1, #12
1000bd84:	430b      	orrs	r3, r1
1000bd86:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd88:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000bd8a:	e125      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd8c:	4a94      	ldr	r2, [pc, #592]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bd8e:	68d3      	ldr	r3, [r2, #12]
1000bd90:	2180      	movs	r1, #128	; 0x80
1000bd92:	0349      	lsls	r1, r1, #13
1000bd94:	430b      	orrs	r3, r1
1000bd96:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd98:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000bd9a:	e11d      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd9c:	4a90      	ldr	r2, [pc, #576]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bd9e:	68d3      	ldr	r3, [r2, #12]
1000bda0:	2180      	movs	r1, #128	; 0x80
1000bda2:	0389      	lsls	r1, r1, #14
1000bda4:	430b      	orrs	r3, r1
1000bda6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bda8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000bdaa:	e115      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bdac:	4a8c      	ldr	r2, [pc, #560]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bdae:	68d3      	ldr	r3, [r2, #12]
1000bdb0:	2180      	movs	r1, #128	; 0x80
1000bdb2:	03c9      	lsls	r1, r1, #15
1000bdb4:	430b      	orrs	r3, r1
1000bdb6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdb8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000bdba:	e10d      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bdbc:	4a88      	ldr	r2, [pc, #544]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bdbe:	68d3      	ldr	r3, [r2, #12]
1000bdc0:	2180      	movs	r1, #128	; 0x80
1000bdc2:	0409      	lsls	r1, r1, #16
1000bdc4:	430b      	orrs	r3, r1
1000bdc6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdc8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000bdca:	e105      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bdcc:	4a84      	ldr	r2, [pc, #528]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bdce:	68d3      	ldr	r3, [r2, #12]
1000bdd0:	2180      	movs	r1, #128	; 0x80
1000bdd2:	0449      	lsls	r1, r1, #17
1000bdd4:	430b      	orrs	r3, r1
1000bdd6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdd8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000bdda:	e0fd      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bddc:	4a80      	ldr	r2, [pc, #512]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bdde:	68d3      	ldr	r3, [r2, #12]
1000bde0:	2180      	movs	r1, #128	; 0x80
1000bde2:	0489      	lsls	r1, r1, #18
1000bde4:	430b      	orrs	r3, r1
1000bde6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bde8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000bdea:	e0f5      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bdec:	4a7c      	ldr	r2, [pc, #496]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bdee:	68d3      	ldr	r3, [r2, #12]
1000bdf0:	2180      	movs	r1, #128	; 0x80
1000bdf2:	04c9      	lsls	r1, r1, #19
1000bdf4:	430b      	orrs	r3, r1
1000bdf6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdf8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000bdfa:	e0ed      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bdfc:	4a78      	ldr	r2, [pc, #480]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bdfe:	68d3      	ldr	r3, [r2, #12]
1000be00:	2180      	movs	r1, #128	; 0x80
1000be02:	0509      	lsls	r1, r1, #20
1000be04:	430b      	orrs	r3, r1
1000be06:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be08:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000be0a:	e0e5      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be0c:	4a74      	ldr	r2, [pc, #464]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000be0e:	68d3      	ldr	r3, [r2, #12]
1000be10:	2180      	movs	r1, #128	; 0x80
1000be12:	0549      	lsls	r1, r1, #21
1000be14:	430b      	orrs	r3, r1
1000be16:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be18:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000be1a:	e0dd      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be1c:	4a70      	ldr	r2, [pc, #448]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000be1e:	68d3      	ldr	r3, [r2, #12]
1000be20:	2180      	movs	r1, #128	; 0x80
1000be22:	0589      	lsls	r1, r1, #22
1000be24:	430b      	orrs	r3, r1
1000be26:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be28:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000be2a:	e0d5      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be2c:	4a6c      	ldr	r2, [pc, #432]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000be2e:	68d3      	ldr	r3, [r2, #12]
1000be30:	2180      	movs	r1, #128	; 0x80
1000be32:	05c9      	lsls	r1, r1, #23
1000be34:	430b      	orrs	r3, r1
1000be36:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be38:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000be3a:	e0cd      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000be3c:	4a68      	ldr	r2, [pc, #416]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000be3e:	6911      	ldr	r1, [r2, #16]
1000be40:	2301      	movs	r3, #1
1000be42:	430b      	orrs	r3, r1
1000be44:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be46:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000be48:	e0c6      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000be4a:	4a65      	ldr	r2, [pc, #404]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000be4c:	6911      	ldr	r1, [r2, #16]
1000be4e:	2302      	movs	r3, #2
1000be50:	430b      	orrs	r3, r1
1000be52:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be54:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000be56:	e0bf      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000be58:	4a61      	ldr	r2, [pc, #388]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000be5a:	6911      	ldr	r1, [r2, #16]
1000be5c:	2304      	movs	r3, #4
1000be5e:	430b      	orrs	r3, r1
1000be60:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be62:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000be64:	e0b8      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000be66:	4a5e      	ldr	r2, [pc, #376]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000be68:	6911      	ldr	r1, [r2, #16]
1000be6a:	2308      	movs	r3, #8
1000be6c:	430b      	orrs	r3, r1
1000be6e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be70:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000be72:	e0b1      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000be74:	4a5a      	ldr	r2, [pc, #360]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000be76:	6911      	ldr	r1, [r2, #16]
1000be78:	2310      	movs	r3, #16
1000be7a:	430b      	orrs	r3, r1
1000be7c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be7e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000be80:	e0aa      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000be82:	4a57      	ldr	r2, [pc, #348]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000be84:	6911      	ldr	r1, [r2, #16]
1000be86:	2320      	movs	r3, #32
1000be88:	430b      	orrs	r3, r1
1000be8a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be8c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000be8e:	e0a3      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000be90:	4a53      	ldr	r2, [pc, #332]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000be92:	6911      	ldr	r1, [r2, #16]
1000be94:	2340      	movs	r3, #64	; 0x40
1000be96:	430b      	orrs	r3, r1
1000be98:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be9a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000be9c:	e09c      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000be9e:	4a50      	ldr	r2, [pc, #320]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bea0:	6911      	ldr	r1, [r2, #16]
1000bea2:	2380      	movs	r3, #128	; 0x80
1000bea4:	430b      	orrs	r3, r1
1000bea6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bea8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000beaa:	e095      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000beac:	4a4c      	ldr	r2, [pc, #304]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000beae:	6913      	ldr	r3, [r2, #16]
1000beb0:	2180      	movs	r1, #128	; 0x80
1000beb2:	0049      	lsls	r1, r1, #1
1000beb4:	430b      	orrs	r3, r1
1000beb6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000beb8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000beba:	e08d      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bebc:	4a48      	ldr	r2, [pc, #288]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bebe:	6913      	ldr	r3, [r2, #16]
1000bec0:	2180      	movs	r1, #128	; 0x80
1000bec2:	0089      	lsls	r1, r1, #2
1000bec4:	430b      	orrs	r3, r1
1000bec6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bec8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000beca:	e085      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000becc:	4a44      	ldr	r2, [pc, #272]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bece:	6913      	ldr	r3, [r2, #16]
1000bed0:	2180      	movs	r1, #128	; 0x80
1000bed2:	00c9      	lsls	r1, r1, #3
1000bed4:	430b      	orrs	r3, r1
1000bed6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bed8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000beda:	e07d      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bedc:	4a40      	ldr	r2, [pc, #256]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bede:	6913      	ldr	r3, [r2, #16]
1000bee0:	2180      	movs	r1, #128	; 0x80
1000bee2:	0109      	lsls	r1, r1, #4
1000bee4:	430b      	orrs	r3, r1
1000bee6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bee8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000beea:	e075      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000beec:	4a3c      	ldr	r2, [pc, #240]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000beee:	6913      	ldr	r3, [r2, #16]
1000bef0:	2180      	movs	r1, #128	; 0x80
1000bef2:	0149      	lsls	r1, r1, #5
1000bef4:	430b      	orrs	r3, r1
1000bef6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bef8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000befa:	e06d      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000befc:	4a38      	ldr	r2, [pc, #224]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000befe:	6913      	ldr	r3, [r2, #16]
1000bf00:	2180      	movs	r1, #128	; 0x80
1000bf02:	0189      	lsls	r1, r1, #6
1000bf04:	430b      	orrs	r3, r1
1000bf06:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf08:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000bf0a:	e065      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf0c:	4a34      	ldr	r2, [pc, #208]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bf0e:	6913      	ldr	r3, [r2, #16]
1000bf10:	2180      	movs	r1, #128	; 0x80
1000bf12:	01c9      	lsls	r1, r1, #7
1000bf14:	430b      	orrs	r3, r1
1000bf16:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf18:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000bf1a:	e05d      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf1c:	4a30      	ldr	r2, [pc, #192]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bf1e:	6913      	ldr	r3, [r2, #16]
1000bf20:	2180      	movs	r1, #128	; 0x80
1000bf22:	0209      	lsls	r1, r1, #8
1000bf24:	430b      	orrs	r3, r1
1000bf26:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf28:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000bf2a:	e055      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf2c:	4a2c      	ldr	r2, [pc, #176]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bf2e:	6913      	ldr	r3, [r2, #16]
1000bf30:	2180      	movs	r1, #128	; 0x80
1000bf32:	0249      	lsls	r1, r1, #9
1000bf34:	430b      	orrs	r3, r1
1000bf36:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf38:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000bf3a:	e04d      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf3c:	4a28      	ldr	r2, [pc, #160]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bf3e:	6913      	ldr	r3, [r2, #16]
1000bf40:	2180      	movs	r1, #128	; 0x80
1000bf42:	0289      	lsls	r1, r1, #10
1000bf44:	430b      	orrs	r3, r1
1000bf46:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf48:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000bf4a:	e045      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf4c:	4a24      	ldr	r2, [pc, #144]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bf4e:	6913      	ldr	r3, [r2, #16]
1000bf50:	2180      	movs	r1, #128	; 0x80
1000bf52:	02c9      	lsls	r1, r1, #11
1000bf54:	430b      	orrs	r3, r1
1000bf56:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf58:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000bf5a:	e03d      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf5c:	4a20      	ldr	r2, [pc, #128]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bf5e:	6913      	ldr	r3, [r2, #16]
1000bf60:	2180      	movs	r1, #128	; 0x80
1000bf62:	0309      	lsls	r1, r1, #12
1000bf64:	430b      	orrs	r3, r1
1000bf66:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf68:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000bf6a:	e035      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf6c:	4a1c      	ldr	r2, [pc, #112]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bf6e:	6913      	ldr	r3, [r2, #16]
1000bf70:	2180      	movs	r1, #128	; 0x80
1000bf72:	0349      	lsls	r1, r1, #13
1000bf74:	430b      	orrs	r3, r1
1000bf76:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf78:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000bf7a:	e02d      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf7c:	4a18      	ldr	r2, [pc, #96]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bf7e:	6913      	ldr	r3, [r2, #16]
1000bf80:	2180      	movs	r1, #128	; 0x80
1000bf82:	0389      	lsls	r1, r1, #14
1000bf84:	430b      	orrs	r3, r1
1000bf86:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf88:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000bf8a:	e025      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf8c:	4a14      	ldr	r2, [pc, #80]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bf8e:	6913      	ldr	r3, [r2, #16]
1000bf90:	2180      	movs	r1, #128	; 0x80
1000bf92:	03c9      	lsls	r1, r1, #15
1000bf94:	430b      	orrs	r3, r1
1000bf96:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf98:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000bf9a:	e01d      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf9c:	4a10      	ldr	r2, [pc, #64]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bf9e:	6913      	ldr	r3, [r2, #16]
1000bfa0:	2180      	movs	r1, #128	; 0x80
1000bfa2:	0409      	lsls	r1, r1, #16
1000bfa4:	430b      	orrs	r3, r1
1000bfa6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfa8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000bfaa:	e015      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000bfac:	4a0c      	ldr	r2, [pc, #48]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bfae:	7d11      	ldrb	r1, [r2, #20]
1000bfb0:	2301      	movs	r3, #1
1000bfb2:	430b      	orrs	r3, r1
1000bfb4:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfb6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000bfb8:	e00e      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000bfba:	4a09      	ldr	r2, [pc, #36]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bfbc:	7d11      	ldrb	r1, [r2, #20]
1000bfbe:	2302      	movs	r3, #2
1000bfc0:	430b      	orrs	r3, r1
1000bfc2:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfc4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000bfc6:	e007      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000bfc8:	4a05      	ldr	r2, [pc, #20]	; (1000bfe0 <system_clock_peripheral_enable+0x358>)
1000bfca:	7d11      	ldrb	r1, [r2, #20]
1000bfcc:	2304      	movs	r3, #4
1000bfce:	430b      	orrs	r3, r1
1000bfd0:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfd2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000bfd4:	e000      	b.n	1000bfd8 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000bfd6:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000bfd8:	bd00      	pop	{pc}
1000bfda:	46c0      	nop			; (mov r8, r8)
1000bfdc:	100120ec 	.word	0x100120ec
1000bfe0:	4000b000 	.word	0x4000b000

1000bfe4 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000bfe4:	b500      	push	{lr}
	switch (peripheral) {
1000bfe6:	2843      	cmp	r0, #67	; 0x43
1000bfe8:	d900      	bls.n	1000bfec <system_peripheral_reset+0x8>
1000bfea:	e223      	b.n	1000c434 <system_peripheral_reset+0x450>
1000bfec:	0080      	lsls	r0, r0, #2
1000bfee:	4be0      	ldr	r3, [pc, #896]	; (1000c370 <system_peripheral_reset+0x38c>)
1000bff0:	581b      	ldr	r3, [r3, r0]
1000bff2:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000bff4:	4bdf      	ldr	r3, [pc, #892]	; (1000c374 <system_peripheral_reset+0x390>)
1000bff6:	6859      	ldr	r1, [r3, #4]
1000bff8:	2202      	movs	r2, #2
1000bffa:	4391      	bics	r1, r2
1000bffc:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000bffe:	6859      	ldr	r1, [r3, #4]
1000c000:	430a      	orrs	r2, r1
1000c002:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c004:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000c006:	e216      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c008:	4bda      	ldr	r3, [pc, #872]	; (1000c374 <system_peripheral_reset+0x390>)
1000c00a:	6859      	ldr	r1, [r3, #4]
1000c00c:	2204      	movs	r2, #4
1000c00e:	4391      	bics	r1, r2
1000c010:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c012:	6859      	ldr	r1, [r3, #4]
1000c014:	430a      	orrs	r2, r1
1000c016:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c018:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000c01a:	e20c      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c01c:	4bd5      	ldr	r3, [pc, #852]	; (1000c374 <system_peripheral_reset+0x390>)
1000c01e:	6859      	ldr	r1, [r3, #4]
1000c020:	2208      	movs	r2, #8
1000c022:	4391      	bics	r1, r2
1000c024:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c026:	6859      	ldr	r1, [r3, #4]
1000c028:	430a      	orrs	r2, r1
1000c02a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c02c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000c02e:	e202      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c030:	4bd0      	ldr	r3, [pc, #832]	; (1000c374 <system_peripheral_reset+0x390>)
1000c032:	6859      	ldr	r1, [r3, #4]
1000c034:	2210      	movs	r2, #16
1000c036:	4391      	bics	r1, r2
1000c038:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c03a:	6859      	ldr	r1, [r3, #4]
1000c03c:	430a      	orrs	r2, r1
1000c03e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c040:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000c042:	e1f8      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c044:	4bcb      	ldr	r3, [pc, #812]	; (1000c374 <system_peripheral_reset+0x390>)
1000c046:	6859      	ldr	r1, [r3, #4]
1000c048:	2220      	movs	r2, #32
1000c04a:	4391      	bics	r1, r2
1000c04c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c04e:	6859      	ldr	r1, [r3, #4]
1000c050:	430a      	orrs	r2, r1
1000c052:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c054:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000c056:	e1ee      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c058:	4bc6      	ldr	r3, [pc, #792]	; (1000c374 <system_peripheral_reset+0x390>)
1000c05a:	6859      	ldr	r1, [r3, #4]
1000c05c:	2240      	movs	r2, #64	; 0x40
1000c05e:	4391      	bics	r1, r2
1000c060:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c062:	6859      	ldr	r1, [r3, #4]
1000c064:	430a      	orrs	r2, r1
1000c066:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c068:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000c06a:	e1e4      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c06c:	4bc1      	ldr	r3, [pc, #772]	; (1000c374 <system_peripheral_reset+0x390>)
1000c06e:	6859      	ldr	r1, [r3, #4]
1000c070:	2280      	movs	r2, #128	; 0x80
1000c072:	4391      	bics	r1, r2
1000c074:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c076:	6859      	ldr	r1, [r3, #4]
1000c078:	430a      	orrs	r2, r1
1000c07a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c07c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000c07e:	e1da      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c080:	4bbc      	ldr	r3, [pc, #752]	; (1000c374 <system_peripheral_reset+0x390>)
1000c082:	6859      	ldr	r1, [r3, #4]
1000c084:	4abc      	ldr	r2, [pc, #752]	; (1000c378 <system_peripheral_reset+0x394>)
1000c086:	400a      	ands	r2, r1
1000c088:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c08a:	685a      	ldr	r2, [r3, #4]
1000c08c:	2180      	movs	r1, #128	; 0x80
1000c08e:	0049      	lsls	r1, r1, #1
1000c090:	430a      	orrs	r2, r1
1000c092:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c094:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000c096:	e1ce      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c098:	4bb6      	ldr	r3, [pc, #728]	; (1000c374 <system_peripheral_reset+0x390>)
1000c09a:	6859      	ldr	r1, [r3, #4]
1000c09c:	4ab7      	ldr	r2, [pc, #732]	; (1000c37c <system_peripheral_reset+0x398>)
1000c09e:	400a      	ands	r2, r1
1000c0a0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c0a2:	685a      	ldr	r2, [r3, #4]
1000c0a4:	2180      	movs	r1, #128	; 0x80
1000c0a6:	0089      	lsls	r1, r1, #2
1000c0a8:	430a      	orrs	r2, r1
1000c0aa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0ac:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000c0ae:	e1c2      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c0b0:	4bb0      	ldr	r3, [pc, #704]	; (1000c374 <system_peripheral_reset+0x390>)
1000c0b2:	6859      	ldr	r1, [r3, #4]
1000c0b4:	4ab2      	ldr	r2, [pc, #712]	; (1000c380 <system_peripheral_reset+0x39c>)
1000c0b6:	400a      	ands	r2, r1
1000c0b8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c0ba:	685a      	ldr	r2, [r3, #4]
1000c0bc:	2180      	movs	r1, #128	; 0x80
1000c0be:	00c9      	lsls	r1, r1, #3
1000c0c0:	430a      	orrs	r2, r1
1000c0c2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0c4:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000c0c6:	e1b6      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c0c8:	4baa      	ldr	r3, [pc, #680]	; (1000c374 <system_peripheral_reset+0x390>)
1000c0ca:	6859      	ldr	r1, [r3, #4]
1000c0cc:	4aad      	ldr	r2, [pc, #692]	; (1000c384 <system_peripheral_reset+0x3a0>)
1000c0ce:	400a      	ands	r2, r1
1000c0d0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c0d2:	685a      	ldr	r2, [r3, #4]
1000c0d4:	2180      	movs	r1, #128	; 0x80
1000c0d6:	0109      	lsls	r1, r1, #4
1000c0d8:	430a      	orrs	r2, r1
1000c0da:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0dc:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000c0de:	e1aa      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c0e0:	4ba4      	ldr	r3, [pc, #656]	; (1000c374 <system_peripheral_reset+0x390>)
1000c0e2:	6859      	ldr	r1, [r3, #4]
1000c0e4:	4aa8      	ldr	r2, [pc, #672]	; (1000c388 <system_peripheral_reset+0x3a4>)
1000c0e6:	400a      	ands	r2, r1
1000c0e8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c0ea:	685a      	ldr	r2, [r3, #4]
1000c0ec:	2180      	movs	r1, #128	; 0x80
1000c0ee:	0149      	lsls	r1, r1, #5
1000c0f0:	430a      	orrs	r2, r1
1000c0f2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0f4:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000c0f6:	e19e      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c0f8:	4b9e      	ldr	r3, [pc, #632]	; (1000c374 <system_peripheral_reset+0x390>)
1000c0fa:	6859      	ldr	r1, [r3, #4]
1000c0fc:	4aa3      	ldr	r2, [pc, #652]	; (1000c38c <system_peripheral_reset+0x3a8>)
1000c0fe:	400a      	ands	r2, r1
1000c100:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c102:	685a      	ldr	r2, [r3, #4]
1000c104:	2180      	movs	r1, #128	; 0x80
1000c106:	0189      	lsls	r1, r1, #6
1000c108:	430a      	orrs	r2, r1
1000c10a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c10c:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000c10e:	e192      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c110:	4b98      	ldr	r3, [pc, #608]	; (1000c374 <system_peripheral_reset+0x390>)
1000c112:	6859      	ldr	r1, [r3, #4]
1000c114:	4a9e      	ldr	r2, [pc, #632]	; (1000c390 <system_peripheral_reset+0x3ac>)
1000c116:	400a      	ands	r2, r1
1000c118:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c11a:	685a      	ldr	r2, [r3, #4]
1000c11c:	2180      	movs	r1, #128	; 0x80
1000c11e:	01c9      	lsls	r1, r1, #7
1000c120:	430a      	orrs	r2, r1
1000c122:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c124:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000c126:	e186      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c128:	4b92      	ldr	r3, [pc, #584]	; (1000c374 <system_peripheral_reset+0x390>)
1000c12a:	6859      	ldr	r1, [r3, #4]
1000c12c:	4a99      	ldr	r2, [pc, #612]	; (1000c394 <system_peripheral_reset+0x3b0>)
1000c12e:	400a      	ands	r2, r1
1000c130:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c132:	685a      	ldr	r2, [r3, #4]
1000c134:	2180      	movs	r1, #128	; 0x80
1000c136:	0209      	lsls	r1, r1, #8
1000c138:	430a      	orrs	r2, r1
1000c13a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c13c:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000c13e:	e17a      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c140:	4b8c      	ldr	r3, [pc, #560]	; (1000c374 <system_peripheral_reset+0x390>)
1000c142:	6859      	ldr	r1, [r3, #4]
1000c144:	4a94      	ldr	r2, [pc, #592]	; (1000c398 <system_peripheral_reset+0x3b4>)
1000c146:	400a      	ands	r2, r1
1000c148:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c14a:	685a      	ldr	r2, [r3, #4]
1000c14c:	2180      	movs	r1, #128	; 0x80
1000c14e:	0249      	lsls	r1, r1, #9
1000c150:	430a      	orrs	r2, r1
1000c152:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c154:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000c156:	e16e      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c158:	4b86      	ldr	r3, [pc, #536]	; (1000c374 <system_peripheral_reset+0x390>)
1000c15a:	6859      	ldr	r1, [r3, #4]
1000c15c:	4a8f      	ldr	r2, [pc, #572]	; (1000c39c <system_peripheral_reset+0x3b8>)
1000c15e:	400a      	ands	r2, r1
1000c160:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c162:	685a      	ldr	r2, [r3, #4]
1000c164:	2180      	movs	r1, #128	; 0x80
1000c166:	0289      	lsls	r1, r1, #10
1000c168:	430a      	orrs	r2, r1
1000c16a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c16c:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000c16e:	e162      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c170:	4b80      	ldr	r3, [pc, #512]	; (1000c374 <system_peripheral_reset+0x390>)
1000c172:	6859      	ldr	r1, [r3, #4]
1000c174:	4a8a      	ldr	r2, [pc, #552]	; (1000c3a0 <system_peripheral_reset+0x3bc>)
1000c176:	400a      	ands	r2, r1
1000c178:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c17a:	685a      	ldr	r2, [r3, #4]
1000c17c:	2180      	movs	r1, #128	; 0x80
1000c17e:	02c9      	lsls	r1, r1, #11
1000c180:	430a      	orrs	r2, r1
1000c182:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c184:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000c186:	e156      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c188:	4b7a      	ldr	r3, [pc, #488]	; (1000c374 <system_peripheral_reset+0x390>)
1000c18a:	6859      	ldr	r1, [r3, #4]
1000c18c:	4a85      	ldr	r2, [pc, #532]	; (1000c3a4 <system_peripheral_reset+0x3c0>)
1000c18e:	400a      	ands	r2, r1
1000c190:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c192:	685a      	ldr	r2, [r3, #4]
1000c194:	2180      	movs	r1, #128	; 0x80
1000c196:	0309      	lsls	r1, r1, #12
1000c198:	430a      	orrs	r2, r1
1000c19a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c19c:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000c19e:	e14a      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c1a0:	4b74      	ldr	r3, [pc, #464]	; (1000c374 <system_peripheral_reset+0x390>)
1000c1a2:	6859      	ldr	r1, [r3, #4]
1000c1a4:	4a80      	ldr	r2, [pc, #512]	; (1000c3a8 <system_peripheral_reset+0x3c4>)
1000c1a6:	400a      	ands	r2, r1
1000c1a8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c1aa:	685a      	ldr	r2, [r3, #4]
1000c1ac:	2180      	movs	r1, #128	; 0x80
1000c1ae:	0349      	lsls	r1, r1, #13
1000c1b0:	430a      	orrs	r2, r1
1000c1b2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1b4:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000c1b6:	e13e      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c1b8:	4b6e      	ldr	r3, [pc, #440]	; (1000c374 <system_peripheral_reset+0x390>)
1000c1ba:	6859      	ldr	r1, [r3, #4]
1000c1bc:	4a7b      	ldr	r2, [pc, #492]	; (1000c3ac <system_peripheral_reset+0x3c8>)
1000c1be:	400a      	ands	r2, r1
1000c1c0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c1c2:	685a      	ldr	r2, [r3, #4]
1000c1c4:	2180      	movs	r1, #128	; 0x80
1000c1c6:	0389      	lsls	r1, r1, #14
1000c1c8:	430a      	orrs	r2, r1
1000c1ca:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1cc:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000c1ce:	e132      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c1d0:	4b68      	ldr	r3, [pc, #416]	; (1000c374 <system_peripheral_reset+0x390>)
1000c1d2:	6859      	ldr	r1, [r3, #4]
1000c1d4:	4a76      	ldr	r2, [pc, #472]	; (1000c3b0 <system_peripheral_reset+0x3cc>)
1000c1d6:	400a      	ands	r2, r1
1000c1d8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c1da:	685a      	ldr	r2, [r3, #4]
1000c1dc:	2180      	movs	r1, #128	; 0x80
1000c1de:	03c9      	lsls	r1, r1, #15
1000c1e0:	430a      	orrs	r2, r1
1000c1e2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1e4:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000c1e6:	e126      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c1e8:	4b62      	ldr	r3, [pc, #392]	; (1000c374 <system_peripheral_reset+0x390>)
1000c1ea:	6859      	ldr	r1, [r3, #4]
1000c1ec:	4a71      	ldr	r2, [pc, #452]	; (1000c3b4 <system_peripheral_reset+0x3d0>)
1000c1ee:	400a      	ands	r2, r1
1000c1f0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c1f2:	685a      	ldr	r2, [r3, #4]
1000c1f4:	2180      	movs	r1, #128	; 0x80
1000c1f6:	0409      	lsls	r1, r1, #16
1000c1f8:	430a      	orrs	r2, r1
1000c1fa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1fc:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000c1fe:	e11a      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c200:	4b5c      	ldr	r3, [pc, #368]	; (1000c374 <system_peripheral_reset+0x390>)
1000c202:	6859      	ldr	r1, [r3, #4]
1000c204:	4a6c      	ldr	r2, [pc, #432]	; (1000c3b8 <system_peripheral_reset+0x3d4>)
1000c206:	400a      	ands	r2, r1
1000c208:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c20a:	685a      	ldr	r2, [r3, #4]
1000c20c:	2180      	movs	r1, #128	; 0x80
1000c20e:	0449      	lsls	r1, r1, #17
1000c210:	430a      	orrs	r2, r1
1000c212:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c214:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000c216:	e10e      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c218:	4b56      	ldr	r3, [pc, #344]	; (1000c374 <system_peripheral_reset+0x390>)
1000c21a:	6859      	ldr	r1, [r3, #4]
1000c21c:	4a67      	ldr	r2, [pc, #412]	; (1000c3bc <system_peripheral_reset+0x3d8>)
1000c21e:	400a      	ands	r2, r1
1000c220:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c222:	685a      	ldr	r2, [r3, #4]
1000c224:	2180      	movs	r1, #128	; 0x80
1000c226:	0489      	lsls	r1, r1, #18
1000c228:	430a      	orrs	r2, r1
1000c22a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c22c:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000c22e:	e102      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c230:	4b50      	ldr	r3, [pc, #320]	; (1000c374 <system_peripheral_reset+0x390>)
1000c232:	6859      	ldr	r1, [r3, #4]
1000c234:	4a62      	ldr	r2, [pc, #392]	; (1000c3c0 <system_peripheral_reset+0x3dc>)
1000c236:	400a      	ands	r2, r1
1000c238:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c23a:	685a      	ldr	r2, [r3, #4]
1000c23c:	2180      	movs	r1, #128	; 0x80
1000c23e:	04c9      	lsls	r1, r1, #19
1000c240:	430a      	orrs	r2, r1
1000c242:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c244:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000c246:	e0f6      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c248:	4b4a      	ldr	r3, [pc, #296]	; (1000c374 <system_peripheral_reset+0x390>)
1000c24a:	6859      	ldr	r1, [r3, #4]
1000c24c:	4a5d      	ldr	r2, [pc, #372]	; (1000c3c4 <system_peripheral_reset+0x3e0>)
1000c24e:	400a      	ands	r2, r1
1000c250:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c252:	685a      	ldr	r2, [r3, #4]
1000c254:	2180      	movs	r1, #128	; 0x80
1000c256:	0509      	lsls	r1, r1, #20
1000c258:	430a      	orrs	r2, r1
1000c25a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c25c:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000c25e:	e0ea      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c260:	4b44      	ldr	r3, [pc, #272]	; (1000c374 <system_peripheral_reset+0x390>)
1000c262:	6859      	ldr	r1, [r3, #4]
1000c264:	4a58      	ldr	r2, [pc, #352]	; (1000c3c8 <system_peripheral_reset+0x3e4>)
1000c266:	400a      	ands	r2, r1
1000c268:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c26a:	685a      	ldr	r2, [r3, #4]
1000c26c:	2180      	movs	r1, #128	; 0x80
1000c26e:	0549      	lsls	r1, r1, #21
1000c270:	430a      	orrs	r2, r1
1000c272:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c274:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000c276:	e0de      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c278:	4b3e      	ldr	r3, [pc, #248]	; (1000c374 <system_peripheral_reset+0x390>)
1000c27a:	6859      	ldr	r1, [r3, #4]
1000c27c:	4a53      	ldr	r2, [pc, #332]	; (1000c3cc <system_peripheral_reset+0x3e8>)
1000c27e:	400a      	ands	r2, r1
1000c280:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c282:	685a      	ldr	r2, [r3, #4]
1000c284:	2180      	movs	r1, #128	; 0x80
1000c286:	0589      	lsls	r1, r1, #22
1000c288:	430a      	orrs	r2, r1
1000c28a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c28c:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000c28e:	e0d2      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c290:	4b38      	ldr	r3, [pc, #224]	; (1000c374 <system_peripheral_reset+0x390>)
1000c292:	6859      	ldr	r1, [r3, #4]
1000c294:	4a4e      	ldr	r2, [pc, #312]	; (1000c3d0 <system_peripheral_reset+0x3ec>)
1000c296:	400a      	ands	r2, r1
1000c298:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c29a:	685a      	ldr	r2, [r3, #4]
1000c29c:	2180      	movs	r1, #128	; 0x80
1000c29e:	05c9      	lsls	r1, r1, #23
1000c2a0:	430a      	orrs	r2, r1
1000c2a2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2a4:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000c2a6:	e0c6      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c2a8:	4a32      	ldr	r2, [pc, #200]	; (1000c374 <system_peripheral_reset+0x390>)
1000c2aa:	6853      	ldr	r3, [r2, #4]
1000c2ac:	005b      	lsls	r3, r3, #1
1000c2ae:	085b      	lsrs	r3, r3, #1
1000c2b0:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c2b2:	6853      	ldr	r3, [r2, #4]
1000c2b4:	2180      	movs	r1, #128	; 0x80
1000c2b6:	0609      	lsls	r1, r1, #24
1000c2b8:	430b      	orrs	r3, r1
1000c2ba:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2bc:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000c2be:	e0ba      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c2c0:	4b2c      	ldr	r3, [pc, #176]	; (1000c374 <system_peripheral_reset+0x390>)
1000c2c2:	891a      	ldrh	r2, [r3, #8]
1000c2c4:	2101      	movs	r1, #1
1000c2c6:	438a      	bics	r2, r1
1000c2c8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c2ca:	8919      	ldrh	r1, [r3, #8]
1000c2cc:	2201      	movs	r2, #1
1000c2ce:	430a      	orrs	r2, r1
1000c2d0:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2d2:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000c2d4:	e0af      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c2d6:	4b27      	ldr	r3, [pc, #156]	; (1000c374 <system_peripheral_reset+0x390>)
1000c2d8:	891a      	ldrh	r2, [r3, #8]
1000c2da:	2102      	movs	r1, #2
1000c2dc:	438a      	bics	r2, r1
1000c2de:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c2e0:	8919      	ldrh	r1, [r3, #8]
1000c2e2:	2202      	movs	r2, #2
1000c2e4:	430a      	orrs	r2, r1
1000c2e6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2e8:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000c2ea:	e0a4      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c2ec:	4b21      	ldr	r3, [pc, #132]	; (1000c374 <system_peripheral_reset+0x390>)
1000c2ee:	891a      	ldrh	r2, [r3, #8]
1000c2f0:	2104      	movs	r1, #4
1000c2f2:	438a      	bics	r2, r1
1000c2f4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c2f6:	8919      	ldrh	r1, [r3, #8]
1000c2f8:	2204      	movs	r2, #4
1000c2fa:	430a      	orrs	r2, r1
1000c2fc:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2fe:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000c300:	e099      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c302:	4b1c      	ldr	r3, [pc, #112]	; (1000c374 <system_peripheral_reset+0x390>)
1000c304:	891a      	ldrh	r2, [r3, #8]
1000c306:	2108      	movs	r1, #8
1000c308:	438a      	bics	r2, r1
1000c30a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c30c:	8919      	ldrh	r1, [r3, #8]
1000c30e:	2208      	movs	r2, #8
1000c310:	430a      	orrs	r2, r1
1000c312:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c314:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000c316:	e08e      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c318:	4b16      	ldr	r3, [pc, #88]	; (1000c374 <system_peripheral_reset+0x390>)
1000c31a:	891a      	ldrh	r2, [r3, #8]
1000c31c:	2110      	movs	r1, #16
1000c31e:	438a      	bics	r2, r1
1000c320:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c322:	8919      	ldrh	r1, [r3, #8]
1000c324:	2210      	movs	r2, #16
1000c326:	430a      	orrs	r2, r1
1000c328:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c32a:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000c32c:	e083      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c32e:	4b11      	ldr	r3, [pc, #68]	; (1000c374 <system_peripheral_reset+0x390>)
1000c330:	891a      	ldrh	r2, [r3, #8]
1000c332:	2120      	movs	r1, #32
1000c334:	438a      	bics	r2, r1
1000c336:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c338:	8919      	ldrh	r1, [r3, #8]
1000c33a:	2220      	movs	r2, #32
1000c33c:	430a      	orrs	r2, r1
1000c33e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c340:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000c342:	e078      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c344:	4b0b      	ldr	r3, [pc, #44]	; (1000c374 <system_peripheral_reset+0x390>)
1000c346:	891a      	ldrh	r2, [r3, #8]
1000c348:	2140      	movs	r1, #64	; 0x40
1000c34a:	438a      	bics	r2, r1
1000c34c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c34e:	8919      	ldrh	r1, [r3, #8]
1000c350:	2240      	movs	r2, #64	; 0x40
1000c352:	430a      	orrs	r2, r1
1000c354:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c356:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000c358:	e06d      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c35a:	4b06      	ldr	r3, [pc, #24]	; (1000c374 <system_peripheral_reset+0x390>)
1000c35c:	891a      	ldrh	r2, [r3, #8]
1000c35e:	2180      	movs	r1, #128	; 0x80
1000c360:	438a      	bics	r2, r1
1000c362:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c364:	8919      	ldrh	r1, [r3, #8]
1000c366:	2280      	movs	r2, #128	; 0x80
1000c368:	430a      	orrs	r2, r1
1000c36a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c36c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000c36e:	e062      	b.n	1000c436 <system_peripheral_reset+0x452>
1000c370:	100121c4 	.word	0x100121c4
1000c374:	4000b000 	.word	0x4000b000
1000c378:	fffffeff 	.word	0xfffffeff
1000c37c:	fffffdff 	.word	0xfffffdff
1000c380:	fffffbff 	.word	0xfffffbff
1000c384:	fffff7ff 	.word	0xfffff7ff
1000c388:	ffffefff 	.word	0xffffefff
1000c38c:	ffffdfff 	.word	0xffffdfff
1000c390:	ffffbfff 	.word	0xffffbfff
1000c394:	ffff7fff 	.word	0xffff7fff
1000c398:	fffeffff 	.word	0xfffeffff
1000c39c:	fffdffff 	.word	0xfffdffff
1000c3a0:	fffbffff 	.word	0xfffbffff
1000c3a4:	fff7ffff 	.word	0xfff7ffff
1000c3a8:	ffefffff 	.word	0xffefffff
1000c3ac:	ffdfffff 	.word	0xffdfffff
1000c3b0:	ffbfffff 	.word	0xffbfffff
1000c3b4:	ff7fffff 	.word	0xff7fffff
1000c3b8:	feffffff 	.word	0xfeffffff
1000c3bc:	fdffffff 	.word	0xfdffffff
1000c3c0:	fbffffff 	.word	0xfbffffff
1000c3c4:	f7ffffff 	.word	0xf7ffffff
1000c3c8:	efffffff 	.word	0xefffffff
1000c3cc:	dfffffff 	.word	0xdfffffff
1000c3d0:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c3d4:	4b18      	ldr	r3, [pc, #96]	; (1000c438 <system_peripheral_reset+0x454>)
1000c3d6:	8919      	ldrh	r1, [r3, #8]
1000c3d8:	4a18      	ldr	r2, [pc, #96]	; (1000c43c <system_peripheral_reset+0x458>)
1000c3da:	400a      	ands	r2, r1
1000c3dc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c3de:	8919      	ldrh	r1, [r3, #8]
1000c3e0:	2280      	movs	r2, #128	; 0x80
1000c3e2:	0052      	lsls	r2, r2, #1
1000c3e4:	430a      	orrs	r2, r1
1000c3e6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3e8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000c3ea:	e024      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c3ec:	4b12      	ldr	r3, [pc, #72]	; (1000c438 <system_peripheral_reset+0x454>)
1000c3ee:	8919      	ldrh	r1, [r3, #8]
1000c3f0:	4a13      	ldr	r2, [pc, #76]	; (1000c440 <system_peripheral_reset+0x45c>)
1000c3f2:	400a      	ands	r2, r1
1000c3f4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c3f6:	8919      	ldrh	r1, [r3, #8]
1000c3f8:	2280      	movs	r2, #128	; 0x80
1000c3fa:	0092      	lsls	r2, r2, #2
1000c3fc:	430a      	orrs	r2, r1
1000c3fe:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c400:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000c402:	e018      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c404:	4b0c      	ldr	r3, [pc, #48]	; (1000c438 <system_peripheral_reset+0x454>)
1000c406:	8919      	ldrh	r1, [r3, #8]
1000c408:	4a0e      	ldr	r2, [pc, #56]	; (1000c444 <system_peripheral_reset+0x460>)
1000c40a:	400a      	ands	r2, r1
1000c40c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c40e:	8919      	ldrh	r1, [r3, #8]
1000c410:	2280      	movs	r2, #128	; 0x80
1000c412:	00d2      	lsls	r2, r2, #3
1000c414:	430a      	orrs	r2, r1
1000c416:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c418:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000c41a:	e00c      	b.n	1000c436 <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c41c:	4b06      	ldr	r3, [pc, #24]	; (1000c438 <system_peripheral_reset+0x454>)
1000c41e:	8919      	ldrh	r1, [r3, #8]
1000c420:	4a09      	ldr	r2, [pc, #36]	; (1000c448 <system_peripheral_reset+0x464>)
1000c422:	400a      	ands	r2, r1
1000c424:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c426:	8919      	ldrh	r1, [r3, #8]
1000c428:	2280      	movs	r2, #128	; 0x80
1000c42a:	0112      	lsls	r2, r2, #4
1000c42c:	430a      	orrs	r2, r1
1000c42e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c430:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000c432:	e000      	b.n	1000c436 <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c434:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000c436:	bd00      	pop	{pc}
1000c438:	4000b000 	.word	0x4000b000
1000c43c:	fffffeff 	.word	0xfffffeff
1000c440:	fffffdff 	.word	0xfffffdff
1000c444:	fffffbff 	.word	0xfffffbff
1000c448:	fffff7ff 	.word	0xfffff7ff

1000c44c <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000c44c:	2380      	movs	r3, #128	; 0x80
1000c44e:	04db      	lsls	r3, r3, #19
1000c450:	469c      	mov	ip, r3
1000c452:	4460      	add	r0, ip
1000c454:	0080      	lsls	r0, r0, #2
1000c456:	6001      	str	r1, [r0, #0]
}
1000c458:	4770      	bx	lr
1000c45a:	46c0      	nop			; (mov r8, r8)

1000c45c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
1000c45c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000c45e:	4a06      	ldr	r2, [pc, #24]	; (1000c478 <_sbrk+0x1c>)
1000c460:	6812      	ldr	r2, [r2, #0]
1000c462:	2a00      	cmp	r2, #0
1000c464:	d102      	bne.n	1000c46c <_sbrk+0x10>
		heap = (unsigned char *)&_end;
1000c466:	4905      	ldr	r1, [pc, #20]	; (1000c47c <_sbrk+0x20>)
1000c468:	4a03      	ldr	r2, [pc, #12]	; (1000c478 <_sbrk+0x1c>)
1000c46a:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000c46c:	4a02      	ldr	r2, [pc, #8]	; (1000c478 <_sbrk+0x1c>)
1000c46e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
1000c470:	18c3      	adds	r3, r0, r3
1000c472:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
1000c474:	4770      	bx	lr
1000c476:	46c0      	nop			; (mov r8, r8)
1000c478:	100139b4 	.word	0x100139b4
1000c47c:	10015498 	.word	0x10015498

1000c480 <_close>:
}

extern int _close(int file)
{
	return -1;
}
1000c480:	2001      	movs	r0, #1
1000c482:	4240      	negs	r0, r0
1000c484:	4770      	bx	lr
1000c486:	46c0      	nop			; (mov r8, r8)

1000c488 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000c488:	2380      	movs	r3, #128	; 0x80
1000c48a:	019b      	lsls	r3, r3, #6
1000c48c:	604b      	str	r3, [r1, #4]

	return 0;
}
1000c48e:	2000      	movs	r0, #0
1000c490:	4770      	bx	lr
1000c492:	46c0      	nop			; (mov r8, r8)

1000c494 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000c494:	2001      	movs	r0, #1
1000c496:	4770      	bx	lr

1000c498 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
1000c498:	2000      	movs	r0, #0
1000c49a:	4770      	bx	lr

1000c49c <interrupt_cb>:
    dualtimer_init(&config_dualtimer);
    //dualtimer_disable(DUALTIMER_TIMER1);
    //dualtimer_disable(DUALTIMER_TIMER2);
}
void interrupt_cb(void)
{
1000c49c:	b510      	push	{r4, lr}
    gpio_disable_callback(PIN_AO_GPIO_2);
1000c49e:	201d      	movs	r0, #29
1000c4a0:	4b05      	ldr	r3, [pc, #20]	; (1000c4b8 <interrupt_cb+0x1c>)
1000c4a2:	4798      	blx	r3
    imu_interrupt = true;
1000c4a4:	2201      	movs	r2, #1
1000c4a6:	4b05      	ldr	r3, [pc, #20]	; (1000c4bc <interrupt_cb+0x20>)
1000c4a8:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(PIN_AO_GPIO_2, GPIO_CALLBACK_RISING, NULL, 0);
1000c4aa:	2300      	movs	r3, #0
1000c4ac:	2200      	movs	r2, #0
1000c4ae:	2102      	movs	r1, #2
1000c4b0:	201d      	movs	r0, #29
1000c4b2:	4c03      	ldr	r4, [pc, #12]	; (1000c4c0 <interrupt_cb+0x24>)
1000c4b4:	47a0      	blx	r4
}
1000c4b6:	bd10      	pop	{r4, pc}
1000c4b8:	1000b96d 	.word	0x1000b96d
1000c4bc:	100139b8 	.word	0x100139b8
1000c4c0:	1000aa7d 	.word	0x1000aa7d

1000c4c4 <configure_i2c_master>:
};

//! [dev_inst]

void configure_i2c_master(void)
{
1000c4c4:	b530      	push	{r4, r5, lr}
1000c4c6:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(16 * sizeof(uint8_t));
1000c4c8:	2010      	movs	r0, #16
1000c4ca:	4c14      	ldr	r4, [pc, #80]	; (1000c51c <configure_i2c_master+0x58>)
1000c4cc:	47a0      	blx	r4
1000c4ce:	4b14      	ldr	r3, [pc, #80]	; (1000c520 <configure_i2c_master+0x5c>)
1000c4d0:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(16 * sizeof(uint8_t));
1000c4d2:	2010      	movs	r0, #16
1000c4d4:	47a0      	blx	r4
1000c4d6:	4b13      	ldr	r3, [pc, #76]	; (1000c524 <configure_i2c_master+0x60>)
1000c4d8:	6058      	str	r0, [r3, #4]
    
	/* Initialize config structure and software module. */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
1000c4da:	ac01      	add	r4, sp, #4
1000c4dc:	0020      	movs	r0, r4
1000c4de:	4b12      	ldr	r3, [pc, #72]	; (1000c528 <configure_i2c_master+0x64>)
1000c4e0:	4798      	blx	r3
    config_i2c_master.clock_source = I2C_CLK_INPUT_0;
1000c4e2:	2300      	movs	r3, #0
1000c4e4:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = 65; // 26 MHz / 65 = 400000
1000c4e6:	3341      	adds	r3, #65	; 0x41
1000c4e8:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = PIN_LP_GPIO_8;
1000c4ea:	3b39      	subs	r3, #57	; 0x39
1000c4ec:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = PIN_LP_GPIO_9;
1000c4ee:	3301      	adds	r3, #1
1000c4f0:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
1000c4f2:	3b07      	subs	r3, #7
1000c4f4:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
1000c4f6:	6123      	str	r3, [r4, #16]
	/* Initialize and enable device with config, and enable i2c. */
	while(i2c_master_init(&i2c_master_instance, I2C0, &config_i2c_master) != STATUS_OK);
1000c4f8:	4d0c      	ldr	r5, [pc, #48]	; (1000c52c <configure_i2c_master+0x68>)
1000c4fa:	4c0d      	ldr	r4, [pc, #52]	; (1000c530 <configure_i2c_master+0x6c>)
1000c4fc:	aa01      	add	r2, sp, #4
1000c4fe:	490d      	ldr	r1, [pc, #52]	; (1000c534 <configure_i2c_master+0x70>)
1000c500:	0028      	movs	r0, r5
1000c502:	47a0      	blx	r4
1000c504:	2800      	cmp	r0, #0
1000c506:	d1f9      	bne.n	1000c4fc <configure_i2c_master+0x38>
	
	i2c_enable(i2c_master_instance.hw);
1000c508:	4b08      	ldr	r3, [pc, #32]	; (1000c52c <configure_i2c_master+0x68>)
1000c50a:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000c50c:	2128      	movs	r1, #40	; 0x28
1000c50e:	5c53      	ldrb	r3, [r2, r1]
1000c510:	07db      	lsls	r3, r3, #31
1000c512:	d4fc      	bmi.n	1000c50e <configure_i2c_master+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
1000c514:	2301      	movs	r3, #1
1000c516:	7513      	strb	r3, [r2, #20]
}
1000c518:	b007      	add	sp, #28
1000c51a:	bd30      	pop	{r4, r5, pc}
1000c51c:	1001022d 	.word	0x1001022d
1000c520:	10013a94 	.word	0x10013a94
1000c524:	10013a8c 	.word	0x10013a8c
1000c528:	1000baf1 	.word	0x1000baf1
1000c52c:	10014710 	.word	0x10014710
1000c530:	1000bb09 	.word	0x1000bb09
1000c534:	40003000 	.word	0x40003000

1000c538 <init_dualtimer>:

void init_dualtimer(void)
{
1000c538:	b510      	push	{r4, lr}
1000c53a:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000c53c:	ac01      	add	r4, sp, #4
1000c53e:	0020      	movs	r0, r4
1000c540:	4b06      	ldr	r3, [pc, #24]	; (1000c55c <init_dualtimer+0x24>)
1000c542:	4798      	blx	r3
    
    config_dualtimer.timer1.load_value = 26000;
1000c544:	4b06      	ldr	r3, [pc, #24]	; (1000c560 <init_dualtimer+0x28>)
1000c546:	60a3      	str	r3, [r4, #8]
    config_dualtimer.timer2.load_value = 26000;
1000c548:	6163      	str	r3, [r4, #20]
    config_dualtimer.timer1.timer_enable = false;
1000c54a:	2300      	movs	r3, #0
1000c54c:	7023      	strb	r3, [r4, #0]
    config_dualtimer.timer2.timer_enable = false;
1000c54e:	7323      	strb	r3, [r4, #12]
    
    dualtimer_init(&config_dualtimer);
1000c550:	0020      	movs	r0, r4
1000c552:	4b04      	ldr	r3, [pc, #16]	; (1000c564 <init_dualtimer+0x2c>)
1000c554:	4798      	blx	r3
    //dualtimer_disable(DUALTIMER_TIMER1);
    //dualtimer_disable(DUALTIMER_TIMER2);
}
1000c556:	b008      	add	sp, #32
1000c558:	bd10      	pop	{r4, pc}
1000c55a:	46c0      	nop			; (mov r8, r8)
1000c55c:	10008199 	.word	0x10008199
1000c560:	00006590 	.word	0x00006590
1000c564:	100081e1 	.word	0x100081e1

1000c568 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
1000c568:	b500      	push	{lr}
1000c56a:	b089      	sub	sp, #36	; 0x24
    unsigned char ii = 0;

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
1000c56c:	2300      	movs	r3, #0
1000c56e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000c570:	8013      	strh	r3, [r2, #0]

    /* Get a packet. */
    int res;
    if ((res = mpu_read_fifo_stream(dmp.packet_length, fifo_data, more)) != 0) {
1000c572:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000c574:	4669      	mov	r1, sp
1000c576:	2000      	movs	r0, #0
1000c578:	4b01      	ldr	r3, [pc, #4]	; (1000c580 <dmp_read_fifo+0x18>)
1000c57a:	4798      	blx	r3
    //
    //DBG_LOG_DEV("[dmp_read_fifo] get_ms IN");
    //get_ms(timestamp);
    //DBG_LOG_DEV("[dmp_read_fifo] get_ms OUT");
    return 0;
}
1000c57c:	b009      	add	sp, #36	; 0x24
1000c57e:	bd00      	pop	{pc}
1000c580:	10008965 	.word	0x10008965

1000c584 <imu_poll_data>:

void imu_poll_data(void)
{
1000c584:	b510      	push	{r4, lr}
1000c586:	b08c      	sub	sp, #48	; 0x30
    st.chip_cfg.dmp_on = 1;
1000c588:	2101      	movs	r1, #1
1000c58a:	2324      	movs	r3, #36	; 0x24
1000c58c:	4a07      	ldr	r2, [pc, #28]	; (1000c5ac <imu_poll_data+0x28>)
1000c58e:	54d1      	strb	r1, [r2, r3]
    short gyro[3], accel_short[3], sensors;
    unsigned char more;
    long accel[3], quaternion[4];
    unsigned long *timestamp;
    int res;
    res = dmp_read_fifo(gyro, accel_short, quaternion, &timestamp, &sensors, &more);
1000c590:	3b07      	subs	r3, #7
1000c592:	446b      	add	r3, sp
1000c594:	9301      	str	r3, [sp, #4]
1000c596:	231e      	movs	r3, #30
1000c598:	446b      	add	r3, sp
1000c59a:	9300      	str	r3, [sp, #0]
1000c59c:	ab02      	add	r3, sp, #8
1000c59e:	aa03      	add	r2, sp, #12
1000c5a0:	a908      	add	r1, sp, #32
1000c5a2:	a80a      	add	r0, sp, #40	; 0x28
1000c5a4:	4c02      	ldr	r4, [pc, #8]	; (1000c5b0 <imu_poll_data+0x2c>)
1000c5a6:	47a0      	blx	r4
}
1000c5a8:	b00c      	add	sp, #48	; 0x30
1000c5aa:	bd10      	pop	{r4, pc}
1000c5ac:	10012404 	.word	0x10012404
1000c5b0:	1000c569 	.word	0x1000c569

1000c5b4 <main>:

int main(void)
{
1000c5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c5b6:	b083      	sub	sp, #12
	//system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
 	//! [init]
    platform_driver_init();
1000c5b8:	4b1d      	ldr	r3, [pc, #116]	; (1000c630 <main+0x7c>)
1000c5ba:	4798      	blx	r3
    gpio_init();
1000c5bc:	4b1d      	ldr	r3, [pc, #116]	; (1000c634 <main+0x80>)
1000c5be:	4798      	blx	r3
    acquire_sleep_lock();
1000c5c0:	4b1d      	ldr	r3, [pc, #116]	; (1000c638 <main+0x84>)
1000c5c2:	4798      	blx	r3
    serial_console_init();
1000c5c4:	4b1d      	ldr	r3, [pc, #116]	; (1000c63c <main+0x88>)
1000c5c6:	4798      	blx	r3
    ble_device_init(NULL);
1000c5c8:	2000      	movs	r0, #0
1000c5ca:	4b1d      	ldr	r3, [pc, #116]	; (1000c640 <main+0x8c>)
1000c5cc:	4798      	blx	r3

    init_dualtimer();
1000c5ce:	4b1d      	ldr	r3, [pc, #116]	; (1000c644 <main+0x90>)
1000c5d0:	4798      	blx	r3
    delay_init();
1000c5d2:	4b1d      	ldr	r3, [pc, #116]	; (1000c648 <main+0x94>)
1000c5d4:	4798      	blx	r3
}

static void configure_imu_gpio(void)
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000c5d6:	4668      	mov	r0, sp
1000c5d8:	4b1c      	ldr	r3, [pc, #112]	; (1000c64c <main+0x98>)
1000c5da:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000c5dc:	2300      	movs	r3, #0
1000c5de:	466a      	mov	r2, sp
1000c5e0:	7013      	strb	r3, [r2, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000c5e2:	3302      	adds	r3, #2
1000c5e4:	7053      	strb	r3, [r2, #1]
    config_gpio_pin.aon_wakeup = true;
1000c5e6:	3b01      	subs	r3, #1
1000c5e8:	70d3      	strb	r3, [r2, #3]
    gpio_pin_set_config(PIN_AO_GPIO_2, &config_gpio_pin);
1000c5ea:	4669      	mov	r1, sp
1000c5ec:	201d      	movs	r0, #29
1000c5ee:	4b18      	ldr	r3, [pc, #96]	; (1000c650 <main+0x9c>)
1000c5f0:	4798      	blx	r3
    init_dualtimer();
    delay_init();
	//! [init]
	//! [config]
    configure_imu_gpio();
	configure_i2c_master();
1000c5f2:	4b18      	ldr	r3, [pc, #96]	; (1000c654 <main+0xa0>)
1000c5f4:	4798      	blx	r3
    gpio_pin_set_config(PIN_AO_GPIO_2, &config_gpio_pin);
}
static void init_imu(void)
{
    struct int_param_s int_param;
    int_param.cb = interrupt_cb;
1000c5f6:	4b18      	ldr	r3, [pc, #96]	; (1000c658 <main+0xa4>)
1000c5f8:	9300      	str	r3, [sp, #0]
    int_param.pin = PIN_AO_GPIO_2;
1000c5fa:	231d      	movs	r3, #29
1000c5fc:	9301      	str	r3, [sp, #4]
    mpu_init(&int_param);
1000c5fe:	4668      	mov	r0, sp
1000c600:	4b16      	ldr	r3, [pc, #88]	; (1000c65c <main+0xa8>)
1000c602:	4798      	blx	r3
    //while(1){}


	//! [main_loop]
	while (true) {
		ble_event_task(BLE_EVENT_TIMEOUT);
1000c604:	4f16      	ldr	r7, [pc, #88]	; (1000c660 <main+0xac>)
        if(imu_interrupt) {
1000c606:	4d17      	ldr	r5, [pc, #92]	; (1000c664 <main+0xb0>)
            DBG_LOG("IMU INTERRUPT!");
1000c608:	4e17      	ldr	r6, [pc, #92]	; (1000c668 <main+0xb4>)
    //while(1){}


	//! [main_loop]
	while (true) {
		ble_event_task(BLE_EVENT_TIMEOUT);
1000c60a:	2401      	movs	r4, #1
1000c60c:	4264      	negs	r4, r4
1000c60e:	0020      	movs	r0, r4
1000c610:	47b8      	blx	r7
        if(imu_interrupt) {
1000c612:	782b      	ldrb	r3, [r5, #0]
1000c614:	2b00      	cmp	r3, #0
1000c616:	d0fa      	beq.n	1000c60e <main+0x5a>
            DBG_LOG("IMU INTERRUPT!");
1000c618:	0030      	movs	r0, r6
1000c61a:	4b14      	ldr	r3, [pc, #80]	; (1000c66c <main+0xb8>)
1000c61c:	4798      	blx	r3
1000c61e:	4814      	ldr	r0, [pc, #80]	; (1000c670 <main+0xbc>)
1000c620:	4b14      	ldr	r3, [pc, #80]	; (1000c674 <main+0xc0>)
1000c622:	4798      	blx	r3
            imu_poll_data();
1000c624:	4b14      	ldr	r3, [pc, #80]	; (1000c678 <main+0xc4>)
1000c626:	4798      	blx	r3
            imu_interrupt = false;
1000c628:	2200      	movs	r2, #0
1000c62a:	4b0e      	ldr	r3, [pc, #56]	; (1000c664 <main+0xb0>)
1000c62c:	701a      	strb	r2, [r3, #0]
1000c62e:	e7ec      	b.n	1000c60a <main+0x56>
1000c630:	1000a7cd 	.word	0x1000a7cd
1000c634:	1000b9a9 	.word	0x1000b9a9
1000c638:	1000ad21 	.word	0x1000ad21
1000c63c:	1000a4c1 	.word	0x1000a4c1
1000c640:	10009cb9 	.word	0x10009cb9
1000c644:	1000c539 	.word	0x1000c539
1000c648:	100080e9 	.word	0x100080e9
1000c64c:	1000b589 	.word	0x1000b589
1000c650:	1000b599 	.word	0x1000b599
1000c654:	1000c4c5 	.word	0x1000c4c5
1000c658:	1000c49d 	.word	0x1000c49d
1000c65c:	10008fad 	.word	0x10008fad
1000c660:	1000a3e5 	.word	0x1000a3e5
1000c664:	100139b8 	.word	0x100139b8
1000c668:	100114f8 	.word	0x100114f8
1000c66c:	100104d9 	.word	0x100104d9
1000c670:	100122d4 	.word	0x100122d4
1000c674:	100103b9 	.word	0x100103b9
1000c678:	1000c585 	.word	0x1000c585

1000c67c <internal_event_post>:
1000c67c:	b570      	push	{r4, r5, r6, lr}
1000c67e:	4d12      	ldr	r5, [pc, #72]	; (1000c6c8 <internal_event_post+0x4c>)
1000c680:	682c      	ldr	r4, [r5, #0]
1000c682:	2c00      	cmp	r4, #0
1000c684:	d014      	beq.n	1000c6b0 <internal_event_post+0x34>
1000c686:	6826      	ldr	r6, [r4, #0]
1000c688:	60e2      	str	r2, [r4, #12]
1000c68a:	602e      	str	r6, [r5, #0]
1000c68c:	2500      	movs	r5, #0
1000c68e:	4a0f      	ldr	r2, [pc, #60]	; (1000c6cc <internal_event_post+0x50>)
1000c690:	8123      	strh	r3, [r4, #8]
1000c692:	6813      	ldr	r3, [r2, #0]
1000c694:	6025      	str	r5, [r4, #0]
1000c696:	80a0      	strh	r0, [r4, #4]
1000c698:	80e1      	strh	r1, [r4, #6]
1000c69a:	42ab      	cmp	r3, r5
1000c69c:	d101      	bne.n	1000c6a2 <internal_event_post+0x26>
1000c69e:	6014      	str	r4, [r2, #0]
1000c6a0:	e011      	b.n	1000c6c6 <internal_event_post+0x4a>
1000c6a2:	681a      	ldr	r2, [r3, #0]
1000c6a4:	2a00      	cmp	r2, #0
1000c6a6:	d001      	beq.n	1000c6ac <internal_event_post+0x30>
1000c6a8:	1c13      	adds	r3, r2, #0
1000c6aa:	e7fa      	b.n	1000c6a2 <internal_event_post+0x26>
1000c6ac:	601c      	str	r4, [r3, #0]
1000c6ae:	e00a      	b.n	1000c6c6 <internal_event_post+0x4a>
1000c6b0:	b2c4      	uxtb	r4, r0
1000c6b2:	2c00      	cmp	r4, #0
1000c6b4:	d107      	bne.n	1000c6c6 <internal_event_post+0x4a>
1000c6b6:	4c06      	ldr	r4, [pc, #24]	; (1000c6d0 <internal_event_post+0x54>)
1000c6b8:	60e2      	str	r2, [r4, #12]
1000c6ba:	2201      	movs	r2, #1
1000c6bc:	8123      	strh	r3, [r4, #8]
1000c6be:	4b05      	ldr	r3, [pc, #20]	; (1000c6d4 <internal_event_post+0x58>)
1000c6c0:	80a0      	strh	r0, [r4, #4]
1000c6c2:	80e1      	strh	r1, [r4, #6]
1000c6c4:	701a      	strb	r2, [r3, #0]
1000c6c6:	bd70      	pop	{r4, r5, r6, pc}
1000c6c8:	100139d4 	.word	0x100139d4
1000c6cc:	100139d0 	.word	0x100139d0
1000c6d0:	100139bc 	.word	0x100139bc
1000c6d4:	100139cc 	.word	0x100139cc

1000c6d8 <internal_event_init>:
1000c6d8:	b510      	push	{r4, lr}
1000c6da:	4b08      	ldr	r3, [pc, #32]	; (1000c6fc <internal_event_init+0x24>)
1000c6dc:	0900      	lsrs	r0, r0, #4
1000c6de:	0100      	lsls	r0, r0, #4
1000c6e0:	681a      	ldr	r2, [r3, #0]
1000c6e2:	1808      	adds	r0, r1, r0
1000c6e4:	4281      	cmp	r1, r0
1000c6e6:	d003      	beq.n	1000c6f0 <internal_event_init+0x18>
1000c6e8:	600a      	str	r2, [r1, #0]
1000c6ea:	1c0a      	adds	r2, r1, #0
1000c6ec:	3110      	adds	r1, #16
1000c6ee:	e7f9      	b.n	1000c6e4 <internal_event_init+0xc>
1000c6f0:	601a      	str	r2, [r3, #0]
1000c6f2:	2200      	movs	r2, #0
1000c6f4:	4b02      	ldr	r3, [pc, #8]	; (1000c700 <internal_event_init+0x28>)
1000c6f6:	601a      	str	r2, [r3, #0]
1000c6f8:	bd10      	pop	{r4, pc}
1000c6fa:	46c0      	nop			; (mov r8, r8)
1000c6fc:	100139d4 	.word	0x100139d4
1000c700:	100139d0 	.word	0x100139d0

1000c704 <special_events_handler>:
1000c704:	b538      	push	{r3, r4, r5, lr}
1000c706:	4c1b      	ldr	r4, [pc, #108]	; (1000c774 <special_events_handler+0x70>)
1000c708:	1c03      	adds	r3, r0, #0
1000c70a:	8825      	ldrh	r5, [r4, #0]
1000c70c:	1c08      	adds	r0, r1, #0
1000c70e:	1c21      	adds	r1, r4, #0
1000c710:	429d      	cmp	r5, r3
1000c712:	d107      	bne.n	1000c724 <special_events_handler+0x20>
1000c714:	88a5      	ldrh	r5, [r4, #4]
1000c716:	4285      	cmp	r5, r0
1000c718:	d104      	bne.n	1000c724 <special_events_handler+0x20>
1000c71a:	2301      	movs	r3, #1
1000c71c:	425b      	negs	r3, r3
1000c71e:	8023      	strh	r3, [r4, #0]
1000c720:	60a2      	str	r2, [r4, #8]
1000c722:	e009      	b.n	1000c738 <special_events_handler+0x34>
1000c724:	884c      	ldrh	r4, [r1, #2]
1000c726:	429c      	cmp	r4, r3
1000c728:	d10a      	bne.n	1000c740 <special_events_handler+0x3c>
1000c72a:	888c      	ldrh	r4, [r1, #4]
1000c72c:	4284      	cmp	r4, r0
1000c72e:	d107      	bne.n	1000c740 <special_events_handler+0x3c>
1000c730:	2301      	movs	r3, #1
1000c732:	425b      	negs	r3, r3
1000c734:	804b      	strh	r3, [r1, #2]
1000c736:	608a      	str	r2, [r1, #8]
1000c738:	4b0f      	ldr	r3, [pc, #60]	; (1000c778 <special_events_handler+0x74>)
1000c73a:	4798      	blx	r3
1000c73c:	2001      	movs	r0, #1
1000c73e:	e017      	b.n	1000c770 <special_events_handler+0x6c>
1000c740:	490e      	ldr	r1, [pc, #56]	; (1000c77c <special_events_handler+0x78>)
1000c742:	428b      	cmp	r3, r1
1000c744:	d00e      	beq.n	1000c764 <special_events_handler+0x60>
1000c746:	490e      	ldr	r1, [pc, #56]	; (1000c780 <special_events_handler+0x7c>)
1000c748:	428b      	cmp	r3, r1
1000c74a:	d007      	beq.n	1000c75c <special_events_handler+0x58>
1000c74c:	490d      	ldr	r1, [pc, #52]	; (1000c784 <special_events_handler+0x80>)
1000c74e:	2000      	movs	r0, #0
1000c750:	428b      	cmp	r3, r1
1000c752:	d10d      	bne.n	1000c770 <special_events_handler+0x6c>
1000c754:	1c10      	adds	r0, r2, #0
1000c756:	4b0c      	ldr	r3, [pc, #48]	; (1000c788 <special_events_handler+0x84>)
1000c758:	4798      	blx	r3
1000c75a:	e7ef      	b.n	1000c73c <special_events_handler+0x38>
1000c75c:	1c11      	adds	r1, r2, #0
1000c75e:	4b0b      	ldr	r3, [pc, #44]	; (1000c78c <special_events_handler+0x88>)
1000c760:	2200      	movs	r2, #0
1000c762:	e002      	b.n	1000c76a <special_events_handler+0x66>
1000c764:	1c11      	adds	r1, r2, #0
1000c766:	2200      	movs	r2, #0
1000c768:	4b09      	ldr	r3, [pc, #36]	; (1000c790 <special_events_handler+0x8c>)
1000c76a:	4798      	blx	r3
1000c76c:	4243      	negs	r3, r0
1000c76e:	4158      	adcs	r0, r3
1000c770:	bd38      	pop	{r3, r4, r5, pc}
1000c772:	46c0      	nop			; (mov r8, r8)
1000c774:	10014718 	.word	0x10014718
1000c778:	1000d909 	.word	0x1000d909
1000c77c:	00000e13 	.word	0x00000e13
1000c780:	00000e15 	.word	0x00000e15
1000c784:	00000e01 	.word	0x00000e01
1000c788:	1000dc79 	.word	0x1000dc79
1000c78c:	1000de39 	.word	0x1000de39
1000c790:	1000df11 	.word	0x1000df11

1000c794 <at_ble_event_get>:
1000c794:	2300      	movs	r3, #0
1000c796:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c798:	b087      	sub	sp, #28
1000c79a:	9204      	str	r2, [sp, #16]
1000c79c:	7003      	strb	r3, [r0, #0]
1000c79e:	9b04      	ldr	r3, [sp, #16]
1000c7a0:	9003      	str	r0, [sp, #12]
1000c7a2:	3b01      	subs	r3, #1
1000c7a4:	1c0d      	adds	r5, r1, #0
1000c7a6:	9305      	str	r3, [sp, #20]
1000c7a8:	3303      	adds	r3, #3
1000c7aa:	d802      	bhi.n	1000c7b2 <at_ble_event_get+0x1e>
1000c7ac:	9804      	ldr	r0, [sp, #16]
1000c7ae:	4bae      	ldr	r3, [pc, #696]	; (1000ca68 <at_ble_event_get+0x2d4>)
1000c7b0:	4798      	blx	r3
1000c7b2:	9b05      	ldr	r3, [sp, #20]
1000c7b4:	4cad      	ldr	r4, [pc, #692]	; (1000ca6c <at_ble_event_get+0x2d8>)
1000c7b6:	3303      	adds	r3, #3
1000c7b8:	d902      	bls.n	1000c7c0 <at_ble_event_get+0x2c>
1000c7ba:	2300      	movs	r3, #0
1000c7bc:	9302      	str	r3, [sp, #8]
1000c7be:	e015      	b.n	1000c7ec <at_ble_event_get+0x58>
1000c7c0:	2300      	movs	r3, #0
1000c7c2:	9302      	str	r3, [sp, #8]
1000c7c4:	6823      	ldr	r3, [r4, #0]
1000c7c6:	2b00      	cmp	r3, #0
1000c7c8:	d113      	bne.n	1000c7f2 <at_ble_event_get+0x5e>
1000c7ca:	9b02      	ldr	r3, [sp, #8]
1000c7cc:	2bd0      	cmp	r3, #208	; 0xd0
1000c7ce:	d100      	bne.n	1000c7d2 <at_ble_event_get+0x3e>
1000c7d0:	e2da      	b.n	1000cd88 <at_ble_event_get+0x5f4>
1000c7d2:	9804      	ldr	r0, [sp, #16]
1000c7d4:	4ba6      	ldr	r3, [pc, #664]	; (1000ca70 <at_ble_event_get+0x2dc>)
1000c7d6:	4798      	blx	r3
1000c7d8:	9002      	str	r0, [sp, #8]
1000c7da:	2802      	cmp	r0, #2
1000c7dc:	d1f2      	bne.n	1000c7c4 <at_ble_event_get+0x30>
1000c7de:	e03f      	b.n	1000c860 <at_ble_event_get+0xcc>
1000c7e0:	9804      	ldr	r0, [sp, #16]
1000c7e2:	4ba3      	ldr	r3, [pc, #652]	; (1000ca70 <at_ble_event_get+0x2dc>)
1000c7e4:	4798      	blx	r3
1000c7e6:	9002      	str	r0, [sp, #8]
1000c7e8:	2802      	cmp	r0, #2
1000c7ea:	d039      	beq.n	1000c860 <at_ble_event_get+0xcc>
1000c7ec:	6823      	ldr	r3, [r4, #0]
1000c7ee:	2b00      	cmp	r3, #0
1000c7f0:	d0f6      	beq.n	1000c7e0 <at_ble_event_get+0x4c>
1000c7f2:	9b02      	ldr	r3, [sp, #8]
1000c7f4:	2bd0      	cmp	r3, #208	; 0xd0
1000c7f6:	d100      	bne.n	1000c7fa <at_ble_event_get+0x66>
1000c7f8:	e2c6      	b.n	1000cd88 <at_ble_event_get+0x5f4>
1000c7fa:	9b02      	ldr	r3, [sp, #8]
1000c7fc:	3b03      	subs	r3, #3
1000c7fe:	1e5a      	subs	r2, r3, #1
1000c800:	4193      	sbcs	r3, r2
1000c802:	9a02      	ldr	r2, [sp, #8]
1000c804:	425b      	negs	r3, r3
1000c806:	401a      	ands	r2, r3
1000c808:	6823      	ldr	r3, [r4, #0]
1000c80a:	9202      	str	r2, [sp, #8]
1000c80c:	2b00      	cmp	r3, #0
1000c80e:	d100      	bne.n	1000c812 <at_ble_event_get+0x7e>
1000c810:	e2c2      	b.n	1000cd98 <at_ble_event_get+0x604>
1000c812:	681a      	ldr	r2, [r3, #0]
1000c814:	68de      	ldr	r6, [r3, #12]
1000c816:	6022      	str	r2, [r4, #0]
1000c818:	88da      	ldrh	r2, [r3, #6]
1000c81a:	9201      	str	r2, [sp, #4]
1000c81c:	4a95      	ldr	r2, [pc, #596]	; (1000ca74 <at_ble_event_get+0x2e0>)
1000c81e:	889c      	ldrh	r4, [r3, #4]
1000c820:	6811      	ldr	r1, [r2, #0]
1000c822:	6013      	str	r3, [r2, #0]
1000c824:	6019      	str	r1, [r3, #0]
1000c826:	4b94      	ldr	r3, [pc, #592]	; (1000ca78 <at_ble_event_get+0x2e4>)
1000c828:	781b      	ldrb	r3, [r3, #0]
1000c82a:	2b01      	cmp	r3, #1
1000c82c:	d10f      	bne.n	1000c84e <at_ble_event_get+0xba>
1000c82e:	4b93      	ldr	r3, [pc, #588]	; (1000ca7c <at_ble_event_get+0x2e8>)
1000c830:	4a92      	ldr	r2, [pc, #584]	; (1000ca7c <at_ble_event_get+0x2e8>)
1000c832:	8898      	ldrh	r0, [r3, #4]
1000c834:	88d9      	ldrh	r1, [r3, #6]
1000c836:	68d2      	ldr	r2, [r2, #12]
1000c838:	891b      	ldrh	r3, [r3, #8]
1000c83a:	4f91      	ldr	r7, [pc, #580]	; (1000ca80 <at_ble_event_get+0x2ec>)
1000c83c:	47b8      	blx	r7
1000c83e:	2210      	movs	r2, #16
1000c840:	4b90      	ldr	r3, [pc, #576]	; (1000ca84 <at_ble_event_get+0x2f0>)
1000c842:	488e      	ldr	r0, [pc, #568]	; (1000ca7c <at_ble_event_get+0x2e8>)
1000c844:	2100      	movs	r1, #0
1000c846:	4798      	blx	r3
1000c848:	2300      	movs	r3, #0
1000c84a:	4a8b      	ldr	r2, [pc, #556]	; (1000ca78 <at_ble_event_get+0x2e4>)
1000c84c:	7013      	strb	r3, [r2, #0]
1000c84e:	9b02      	ldr	r3, [sp, #8]
1000c850:	2b00      	cmp	r3, #0
1000c852:	d114      	bne.n	1000c87e <at_ble_event_get+0xea>
1000c854:	4b8c      	ldr	r3, [pc, #560]	; (1000ca88 <at_ble_event_get+0x2f4>)
1000c856:	429c      	cmp	r4, r3
1000c858:	d009      	beq.n	1000c86e <at_ble_event_get+0xda>
1000c85a:	4b8c      	ldr	r3, [pc, #560]	; (1000ca8c <at_ble_event_get+0x2f8>)
1000c85c:	429c      	cmp	r4, r3
1000c85e:	d127      	bne.n	1000c8b0 <at_ble_event_get+0x11c>
1000c860:	233a      	movs	r3, #58	; 0x3a
1000c862:	9a03      	ldr	r2, [sp, #12]
1000c864:	7013      	strb	r3, [r2, #0]
1000c866:	2300      	movs	r3, #0
1000c868:	9302      	str	r3, [sp, #8]
1000c86a:	1c1d      	adds	r5, r3, #0
1000c86c:	e007      	b.n	1000c87e <at_ble_event_get+0xea>
1000c86e:	9b01      	ldr	r3, [sp, #4]
1000c870:	42a3      	cmp	r3, r4
1000c872:	d000      	beq.n	1000c876 <at_ble_event_get+0xe2>
1000c874:	e28a      	b.n	1000cd8c <at_ble_event_get+0x5f8>
1000c876:	2338      	movs	r3, #56	; 0x38
1000c878:	9a03      	ldr	r2, [sp, #12]
1000c87a:	7013      	strb	r3, [r2, #0]
1000c87c:	602e      	str	r6, [r5, #0]
1000c87e:	9b03      	ldr	r3, [sp, #12]
1000c880:	781b      	ldrb	r3, [r3, #0]
1000c882:	2b3b      	cmp	r3, #59	; 0x3b
1000c884:	d101      	bne.n	1000c88a <at_ble_event_get+0xf6>
1000c886:	4b82      	ldr	r3, [pc, #520]	; (1000ca90 <at_ble_event_get+0x2fc>)
1000c888:	4798      	blx	r3
1000c88a:	9b03      	ldr	r3, [sp, #12]
1000c88c:	781b      	ldrb	r3, [r3, #0]
1000c88e:	2b3b      	cmp	r3, #59	; 0x3b
1000c890:	d003      	beq.n	1000c89a <at_ble_event_get+0x106>
1000c892:	9b05      	ldr	r3, [sp, #20]
1000c894:	3303      	adds	r3, #3
1000c896:	d904      	bls.n	1000c8a2 <at_ble_event_get+0x10e>
1000c898:	e283      	b.n	1000cda2 <at_ble_event_get+0x60e>
1000c89a:	9b02      	ldr	r3, [sp, #8]
1000c89c:	2b00      	cmp	r3, #0
1000c89e:	d088      	beq.n	1000c7b2 <at_ble_event_get+0x1e>
1000c8a0:	e7f7      	b.n	1000c892 <at_ble_event_get+0xfe>
1000c8a2:	9b02      	ldr	r3, [sp, #8]
1000c8a4:	2bd0      	cmp	r3, #208	; 0xd0
1000c8a6:	d100      	bne.n	1000c8aa <at_ble_event_get+0x116>
1000c8a8:	e27b      	b.n	1000cda2 <at_ble_event_get+0x60e>
1000c8aa:	4b7a      	ldr	r3, [pc, #488]	; (1000ca94 <at_ble_event_get+0x300>)
1000c8ac:	4798      	blx	r3
1000c8ae:	e278      	b.n	1000cda2 <at_ble_event_get+0x60e>
1000c8b0:	9b01      	ldr	r3, [sp, #4]
1000c8b2:	2bbb      	cmp	r3, #187	; 0xbb
1000c8b4:	d125      	bne.n	1000c902 <at_ble_event_get+0x16e>
1000c8b6:	2cbb      	cmp	r4, #187	; 0xbb
1000c8b8:	d123      	bne.n	1000c902 <at_ble_event_get+0x16e>
1000c8ba:	466b      	mov	r3, sp
1000c8bc:	891b      	ldrh	r3, [r3, #8]
1000c8be:	80ab      	strh	r3, [r5, #4]
1000c8c0:	78b3      	ldrb	r3, [r6, #2]
1000c8c2:	7872      	ldrb	r2, [r6, #1]
1000c8c4:	78f0      	ldrb	r0, [r6, #3]
1000c8c6:	021b      	lsls	r3, r3, #8
1000c8c8:	4313      	orrs	r3, r2
1000c8ca:	7971      	ldrb	r1, [r6, #5]
1000c8cc:	7932      	ldrb	r2, [r6, #4]
1000c8ce:	70a8      	strb	r0, [r5, #2]
1000c8d0:	4871      	ldr	r0, [pc, #452]	; (1000ca98 <at_ble_event_get+0x304>)
1000c8d2:	802b      	strh	r3, [r5, #0]
1000c8d4:	4283      	cmp	r3, r0
1000c8d6:	d806      	bhi.n	1000c8e6 <at_ble_event_get+0x152>
1000c8d8:	4a70      	ldr	r2, [pc, #448]	; (1000ca9c <at_ble_event_get+0x308>)
1000c8da:	4293      	cmp	r3, r2
1000c8dc:	d20b      	bcs.n	1000c8f6 <at_ble_event_get+0x162>
1000c8de:	4a70      	ldr	r2, [pc, #448]	; (1000caa0 <at_ble_event_get+0x30c>)
1000c8e0:	4293      	cmp	r3, r2
1000c8e2:	d008      	beq.n	1000c8f6 <at_ble_event_get+0x162>
1000c8e4:	e009      	b.n	1000c8fa <at_ble_event_get+0x166>
1000c8e6:	486f      	ldr	r0, [pc, #444]	; (1000caa4 <at_ble_event_get+0x310>)
1000c8e8:	4283      	cmp	r3, r0
1000c8ea:	d106      	bne.n	1000c8fa <at_ble_event_get+0x166>
1000c8ec:	020b      	lsls	r3, r1, #8
1000c8ee:	4313      	orrs	r3, r2
1000c8f0:	80ab      	strh	r3, [r5, #4]
1000c8f2:	2337      	movs	r3, #55	; 0x37
1000c8f4:	e002      	b.n	1000c8fc <at_ble_event_get+0x168>
1000c8f6:	2336      	movs	r3, #54	; 0x36
1000c8f8:	e000      	b.n	1000c8fc <at_ble_event_get+0x168>
1000c8fa:	2300      	movs	r3, #0
1000c8fc:	9a03      	ldr	r2, [sp, #12]
1000c8fe:	7013      	strb	r3, [r2, #0]
1000c900:	e7bd      	b.n	1000c87e <at_ble_event_get+0xea>
1000c902:	4b69      	ldr	r3, [pc, #420]	; (1000caa8 <at_ble_event_get+0x314>)
1000c904:	429c      	cmp	r4, r3
1000c906:	d100      	bne.n	1000c90a <at_ble_event_get+0x176>
1000c908:	e144      	b.n	1000cb94 <at_ble_event_get+0x400>
1000c90a:	d865      	bhi.n	1000c9d8 <at_ble_event_get+0x244>
1000c90c:	4b67      	ldr	r3, [pc, #412]	; (1000caac <at_ble_event_get+0x318>)
1000c90e:	429c      	cmp	r4, r3
1000c910:	d100      	bne.n	1000c914 <at_ble_event_get+0x180>
1000c912:	e1d5      	b.n	1000ccc0 <at_ble_event_get+0x52c>
1000c914:	d82f      	bhi.n	1000c976 <at_ble_event_get+0x1e2>
1000c916:	4b66      	ldr	r3, [pc, #408]	; (1000cab0 <at_ble_event_get+0x31c>)
1000c918:	429c      	cmp	r4, r3
1000c91a:	d100      	bne.n	1000c91e <at_ble_event_get+0x18a>
1000c91c:	e1e0      	b.n	1000cce0 <at_ble_event_get+0x54c>
1000c91e:	d813      	bhi.n	1000c948 <at_ble_event_get+0x1b4>
1000c920:	4b64      	ldr	r3, [pc, #400]	; (1000cab4 <at_ble_event_get+0x320>)
1000c922:	429c      	cmp	r4, r3
1000c924:	d100      	bne.n	1000c928 <at_ble_event_get+0x194>
1000c926:	e1a3      	b.n	1000cc70 <at_ble_event_get+0x4dc>
1000c928:	d804      	bhi.n	1000c934 <at_ble_event_get+0x1a0>
1000c92a:	2638      	movs	r6, #56	; 0x38
1000c92c:	42b4      	cmp	r4, r6
1000c92e:	d100      	bne.n	1000c932 <at_ble_event_get+0x19e>
1000c930:	e225      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000c932:	e117      	b.n	1000cb64 <at_ble_event_get+0x3d0>
1000c934:	4b60      	ldr	r3, [pc, #384]	; (1000cab8 <at_ble_event_get+0x324>)
1000c936:	429c      	cmp	r4, r3
1000c938:	d100      	bne.n	1000c93c <at_ble_event_get+0x1a8>
1000c93a:	e19f      	b.n	1000cc7c <at_ble_event_get+0x4e8>
1000c93c:	33fe      	adds	r3, #254	; 0xfe
1000c93e:	33ff      	adds	r3, #255	; 0xff
1000c940:	429c      	cmp	r4, r3
1000c942:	d100      	bne.n	1000c946 <at_ble_event_get+0x1b2>
1000c944:	e1d3      	b.n	1000ccee <at_ble_event_get+0x55a>
1000c946:	e10d      	b.n	1000cb64 <at_ble_event_get+0x3d0>
1000c948:	4b5c      	ldr	r3, [pc, #368]	; (1000cabc <at_ble_event_get+0x328>)
1000c94a:	429c      	cmp	r4, r3
1000c94c:	d100      	bne.n	1000c950 <at_ble_event_get+0x1bc>
1000c94e:	e1a9      	b.n	1000cca4 <at_ble_event_get+0x510>
1000c950:	d808      	bhi.n	1000c964 <at_ble_event_get+0x1d0>
1000c952:	4b5b      	ldr	r3, [pc, #364]	; (1000cac0 <at_ble_event_get+0x32c>)
1000c954:	429c      	cmp	r4, r3
1000c956:	d100      	bne.n	1000c95a <at_ble_event_get+0x1c6>
1000c958:	e196      	b.n	1000cc88 <at_ble_event_get+0x4f4>
1000c95a:	4b5a      	ldr	r3, [pc, #360]	; (1000cac4 <at_ble_event_get+0x330>)
1000c95c:	429c      	cmp	r4, r3
1000c95e:	d100      	bne.n	1000c962 <at_ble_event_get+0x1ce>
1000c960:	e199      	b.n	1000cc96 <at_ble_event_get+0x502>
1000c962:	e0ff      	b.n	1000cb64 <at_ble_event_get+0x3d0>
1000c964:	4b58      	ldr	r3, [pc, #352]	; (1000cac8 <at_ble_event_get+0x334>)
1000c966:	429c      	cmp	r4, r3
1000c968:	d100      	bne.n	1000c96c <at_ble_event_get+0x1d8>
1000c96a:	e1a2      	b.n	1000ccb2 <at_ble_event_get+0x51e>
1000c96c:	4b57      	ldr	r3, [pc, #348]	; (1000cacc <at_ble_event_get+0x338>)
1000c96e:	429c      	cmp	r4, r3
1000c970:	d100      	bne.n	1000c974 <at_ble_event_get+0x1e0>
1000c972:	e1d4      	b.n	1000cd1e <at_ble_event_get+0x58a>
1000c974:	e0f6      	b.n	1000cb64 <at_ble_event_get+0x3d0>
1000c976:	4b56      	ldr	r3, [pc, #344]	; (1000cad0 <at_ble_event_get+0x33c>)
1000c978:	429c      	cmp	r4, r3
1000c97a:	d100      	bne.n	1000c97e <at_ble_event_get+0x1ea>
1000c97c:	e1c8      	b.n	1000cd10 <at_ble_event_get+0x57c>
1000c97e:	d812      	bhi.n	1000c9a6 <at_ble_event_get+0x212>
1000c980:	4b54      	ldr	r3, [pc, #336]	; (1000cad4 <at_ble_event_get+0x340>)
1000c982:	429c      	cmp	r4, r3
1000c984:	d100      	bne.n	1000c988 <at_ble_event_get+0x1f4>
1000c986:	e1d1      	b.n	1000cd2c <at_ble_event_get+0x598>
1000c988:	d804      	bhi.n	1000c994 <at_ble_event_get+0x200>
1000c98a:	4b53      	ldr	r3, [pc, #332]	; (1000cad8 <at_ble_event_get+0x344>)
1000c98c:	429c      	cmp	r4, r3
1000c98e:	d100      	bne.n	1000c992 <at_ble_event_get+0x1fe>
1000c990:	e19b      	b.n	1000ccca <at_ble_event_get+0x536>
1000c992:	e0e7      	b.n	1000cb64 <at_ble_event_get+0x3d0>
1000c994:	4b51      	ldr	r3, [pc, #324]	; (1000cadc <at_ble_event_get+0x348>)
1000c996:	429c      	cmp	r4, r3
1000c998:	d100      	bne.n	1000c99c <at_ble_event_get+0x208>
1000c99a:	e1ad      	b.n	1000ccf8 <at_ble_event_get+0x564>
1000c99c:	4b50      	ldr	r3, [pc, #320]	; (1000cae0 <at_ble_event_get+0x34c>)
1000c99e:	429c      	cmp	r4, r3
1000c9a0:	d100      	bne.n	1000c9a4 <at_ble_event_get+0x210>
1000c9a2:	e1b0      	b.n	1000cd06 <at_ble_event_get+0x572>
1000c9a4:	e0de      	b.n	1000cb64 <at_ble_event_get+0x3d0>
1000c9a6:	4b4f      	ldr	r3, [pc, #316]	; (1000cae4 <at_ble_event_get+0x350>)
1000c9a8:	429c      	cmp	r4, r3
1000c9aa:	d100      	bne.n	1000c9ae <at_ble_event_get+0x21a>
1000c9ac:	e0e0      	b.n	1000cb70 <at_ble_event_get+0x3dc>
1000c9ae:	d809      	bhi.n	1000c9c4 <at_ble_event_get+0x230>
1000c9b0:	3b08      	subs	r3, #8
1000c9b2:	429c      	cmp	r4, r3
1000c9b4:	d100      	bne.n	1000c9b8 <at_ble_event_get+0x224>
1000c9b6:	e0d7      	b.n	1000cb68 <at_ble_event_get+0x3d4>
1000c9b8:	4b4b      	ldr	r3, [pc, #300]	; (1000cae8 <at_ble_event_get+0x354>)
1000c9ba:	2639      	movs	r6, #57	; 0x39
1000c9bc:	429c      	cmp	r4, r3
1000c9be:	d100      	bne.n	1000c9c2 <at_ble_event_get+0x22e>
1000c9c0:	e1dd      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000c9c2:	e0cf      	b.n	1000cb64 <at_ble_event_get+0x3d0>
1000c9c4:	23d1      	movs	r3, #209	; 0xd1
1000c9c6:	011b      	lsls	r3, r3, #4
1000c9c8:	429c      	cmp	r4, r3
1000c9ca:	d100      	bne.n	1000c9ce <at_ble_event_get+0x23a>
1000c9cc:	e0d6      	b.n	1000cb7c <at_ble_event_get+0x3e8>
1000c9ce:	4b47      	ldr	r3, [pc, #284]	; (1000caec <at_ble_event_get+0x358>)
1000c9d0:	429c      	cmp	r4, r3
1000c9d2:	d100      	bne.n	1000c9d6 <at_ble_event_get+0x242>
1000c9d4:	e0d8      	b.n	1000cb88 <at_ble_event_get+0x3f4>
1000c9d6:	e0c5      	b.n	1000cb64 <at_ble_event_get+0x3d0>
1000c9d8:	4b45      	ldr	r3, [pc, #276]	; (1000caf0 <at_ble_event_get+0x35c>)
1000c9da:	429c      	cmp	r4, r3
1000c9dc:	d100      	bne.n	1000c9e0 <at_ble_event_get+0x24c>
1000c9de:	e117      	b.n	1000cc10 <at_ble_event_get+0x47c>
1000c9e0:	d82e      	bhi.n	1000ca40 <at_ble_event_get+0x2ac>
1000c9e2:	4b44      	ldr	r3, [pc, #272]	; (1000caf4 <at_ble_event_get+0x360>)
1000c9e4:	429c      	cmp	r4, r3
1000c9e6:	d100      	bne.n	1000c9ea <at_ble_event_get+0x256>
1000c9e8:	e13d      	b.n	1000cc66 <at_ble_event_get+0x4d2>
1000c9ea:	d812      	bhi.n	1000ca12 <at_ble_event_get+0x27e>
1000c9ec:	4b42      	ldr	r3, [pc, #264]	; (1000caf8 <at_ble_event_get+0x364>)
1000c9ee:	429c      	cmp	r4, r3
1000c9f0:	d100      	bne.n	1000c9f4 <at_ble_event_get+0x260>
1000c9f2:	e0e8      	b.n	1000cbc6 <at_ble_event_get+0x432>
1000c9f4:	d804      	bhi.n	1000ca00 <at_ble_event_get+0x26c>
1000c9f6:	3b03      	subs	r3, #3
1000c9f8:	429c      	cmp	r4, r3
1000c9fa:	d100      	bne.n	1000c9fe <at_ble_event_get+0x26a>
1000c9fc:	e0d0      	b.n	1000cba0 <at_ble_event_get+0x40c>
1000c9fe:	e0b1      	b.n	1000cb64 <at_ble_event_get+0x3d0>
1000ca00:	4b3e      	ldr	r3, [pc, #248]	; (1000cafc <at_ble_event_get+0x368>)
1000ca02:	429c      	cmp	r4, r3
1000ca04:	d100      	bne.n	1000ca08 <at_ble_event_get+0x274>
1000ca06:	e0d0      	b.n	1000cbaa <at_ble_event_get+0x416>
1000ca08:	4b3d      	ldr	r3, [pc, #244]	; (1000cb00 <at_ble_event_get+0x36c>)
1000ca0a:	429c      	cmp	r4, r3
1000ca0c:	d100      	bne.n	1000ca10 <at_ble_event_get+0x27c>
1000ca0e:	e0f9      	b.n	1000cc04 <at_ble_event_get+0x470>
1000ca10:	e0a8      	b.n	1000cb64 <at_ble_event_get+0x3d0>
1000ca12:	4b3c      	ldr	r3, [pc, #240]	; (1000cb04 <at_ble_event_get+0x370>)
1000ca14:	429c      	cmp	r4, r3
1000ca16:	d100      	bne.n	1000ca1a <at_ble_event_get+0x286>
1000ca18:	e0db      	b.n	1000cbd2 <at_ble_event_get+0x43e>
1000ca1a:	d808      	bhi.n	1000ca2e <at_ble_event_get+0x29a>
1000ca1c:	4b3a      	ldr	r3, [pc, #232]	; (1000cb08 <at_ble_event_get+0x374>)
1000ca1e:	429c      	cmp	r4, r3
1000ca20:	d100      	bne.n	1000ca24 <at_ble_event_get+0x290>
1000ca22:	e11b      	b.n	1000cc5c <at_ble_event_get+0x4c8>
1000ca24:	4b39      	ldr	r3, [pc, #228]	; (1000cb0c <at_ble_event_get+0x378>)
1000ca26:	429c      	cmp	r4, r3
1000ca28:	d100      	bne.n	1000ca2c <at_ble_event_get+0x298>
1000ca2a:	e0d8      	b.n	1000cbde <at_ble_event_get+0x44a>
1000ca2c:	e09a      	b.n	1000cb64 <at_ble_event_get+0x3d0>
1000ca2e:	4b38      	ldr	r3, [pc, #224]	; (1000cb10 <at_ble_event_get+0x37c>)
1000ca30:	429c      	cmp	r4, r3
1000ca32:	d100      	bne.n	1000ca36 <at_ble_event_get+0x2a2>
1000ca34:	e0d8      	b.n	1000cbe8 <at_ble_event_get+0x454>
1000ca36:	4b37      	ldr	r3, [pc, #220]	; (1000cb14 <at_ble_event_get+0x380>)
1000ca38:	429c      	cmp	r4, r3
1000ca3a:	d100      	bne.n	1000ca3e <at_ble_event_get+0x2aa>
1000ca3c:	e0db      	b.n	1000cbf6 <at_ble_event_get+0x462>
1000ca3e:	e091      	b.n	1000cb64 <at_ble_event_get+0x3d0>
1000ca40:	4b35      	ldr	r3, [pc, #212]	; (1000cb18 <at_ble_event_get+0x384>)
1000ca42:	429c      	cmp	r4, r3
1000ca44:	d100      	bne.n	1000ca48 <at_ble_event_get+0x2b4>
1000ca46:	e0f7      	b.n	1000cc38 <at_ble_event_get+0x4a4>
1000ca48:	d876      	bhi.n	1000cb38 <at_ble_event_get+0x3a4>
1000ca4a:	4b34      	ldr	r3, [pc, #208]	; (1000cb1c <at_ble_event_get+0x388>)
1000ca4c:	429c      	cmp	r4, r3
1000ca4e:	d100      	bne.n	1000ca52 <at_ble_event_get+0x2be>
1000ca50:	e0f8      	b.n	1000cc44 <at_ble_event_get+0x4b0>
1000ca52:	d869      	bhi.n	1000cb28 <at_ble_event_get+0x394>
1000ca54:	4b32      	ldr	r3, [pc, #200]	; (1000cb20 <at_ble_event_get+0x38c>)
1000ca56:	429c      	cmp	r4, r3
1000ca58:	d100      	bne.n	1000ca5c <at_ble_event_get+0x2c8>
1000ca5a:	e0e0      	b.n	1000cc1e <at_ble_event_get+0x48a>
1000ca5c:	4b31      	ldr	r3, [pc, #196]	; (1000cb24 <at_ble_event_get+0x390>)
1000ca5e:	429c      	cmp	r4, r3
1000ca60:	d100      	bne.n	1000ca64 <at_ble_event_get+0x2d0>
1000ca62:	e0a9      	b.n	1000cbb8 <at_ble_event_get+0x424>
1000ca64:	e07e      	b.n	1000cb64 <at_ble_event_get+0x3d0>
1000ca66:	46c0      	nop			; (mov r8, r8)
1000ca68:	1000d941 	.word	0x1000d941
1000ca6c:	100139d0 	.word	0x100139d0
1000ca70:	1000aabd 	.word	0x1000aabd
1000ca74:	100139d4 	.word	0x100139d4
1000ca78:	100139cc 	.word	0x100139cc
1000ca7c:	100139bc 	.word	0x100139bc
1000ca80:	1000c67d 	.word	0x1000c67d
1000ca84:	10010271 	.word	0x10010271
1000ca88:	0000ffff 	.word	0x0000ffff
1000ca8c:	0000fffe 	.word	0x0000fffe
1000ca90:	1000ad35 	.word	0x1000ad35
1000ca94:	1000d943 	.word	0x1000d943
1000ca98:	0000201e 	.word	0x0000201e
1000ca9c:	0000201d 	.word	0x0000201d
1000caa0:	00000c03 	.word	0x00000c03
1000caa4:	0000201f 	.word	0x0000201f
1000caa8:	00000d1c 	.word	0x00000d1c
1000caac:	00000c0c 	.word	0x00000c0c
1000cab0:	00000c02 	.word	0x00000c02
1000cab4:	00000a02 	.word	0x00000a02
1000cab8:	00000a03 	.word	0x00000a03
1000cabc:	00000c06 	.word	0x00000c06
1000cac0:	00000c04 	.word	0x00000c04
1000cac4:	00000c05 	.word	0x00000c05
1000cac8:	00000c07 	.word	0x00000c07
1000cacc:	00000c09 	.word	0x00000c09
1000cad0:	00000c17 	.word	0x00000c17
1000cad4:	00000c12 	.word	0x00000c12
1000cad8:	00000c0d 	.word	0x00000c0d
1000cadc:	00000c13 	.word	0x00000c13
1000cae0:	00000c15 	.word	0x00000c15
1000cae4:	00000d08 	.word	0x00000d08
1000cae8:	00000d01 	.word	0x00000d01
1000caec:	00000d15 	.word	0x00000d15
1000caf0:	00000e1b 	.word	0x00000e1b
1000caf4:	00000e0f 	.word	0x00000e0f
1000caf8:	00000e03 	.word	0x00000e03
1000cafc:	00000e06 	.word	0x00000e06
1000cb00:	00000e0a 	.word	0x00000e0a
1000cb04:	00000e15 	.word	0x00000e15
1000cb08:	00000e11 	.word	0x00000e11
1000cb0c:	00000e13 	.word	0x00000e13
1000cb10:	00000e17 	.word	0x00000e17
1000cb14:	00000e19 	.word	0x00000e19
1000cb18:	00000e27 	.word	0x00000e27
1000cb1c:	00000e21 	.word	0x00000e21
1000cb20:	00000e1c 	.word	0x00000e1c
1000cb24:	00000e1d 	.word	0x00000e1d
1000cb28:	4b9f      	ldr	r3, [pc, #636]	; (1000cda8 <at_ble_event_get+0x614>)
1000cb2a:	429c      	cmp	r4, r3
1000cb2c:	d07e      	beq.n	1000cc2c <at_ble_event_get+0x498>
1000cb2e:	4b9f      	ldr	r3, [pc, #636]	; (1000cdac <at_ble_event_get+0x618>)
1000cb30:	429c      	cmp	r4, r3
1000cb32:	d100      	bne.n	1000cb36 <at_ble_event_get+0x3a2>
1000cb34:	e08c      	b.n	1000cc50 <at_ble_event_get+0x4bc>
1000cb36:	e015      	b.n	1000cb64 <at_ble_event_get+0x3d0>
1000cb38:	4b9d      	ldr	r3, [pc, #628]	; (1000cdb0 <at_ble_event_get+0x61c>)
1000cb3a:	429c      	cmp	r4, r3
1000cb3c:	d100      	bne.n	1000cb40 <at_ble_event_get+0x3ac>
1000cb3e:	e10a      	b.n	1000cd56 <at_ble_event_get+0x5c2>
1000cb40:	d808      	bhi.n	1000cb54 <at_ble_event_get+0x3c0>
1000cb42:	4b9c      	ldr	r3, [pc, #624]	; (1000cdb4 <at_ble_event_get+0x620>)
1000cb44:	429c      	cmp	r4, r3
1000cb46:	d100      	bne.n	1000cb4a <at_ble_event_get+0x3b6>
1000cb48:	e0f7      	b.n	1000cd3a <at_ble_event_get+0x5a6>
1000cb4a:	4b9b      	ldr	r3, [pc, #620]	; (1000cdb8 <at_ble_event_get+0x624>)
1000cb4c:	429c      	cmp	r4, r3
1000cb4e:	d100      	bne.n	1000cb52 <at_ble_event_get+0x3be>
1000cb50:	e0fa      	b.n	1000cd48 <at_ble_event_get+0x5b4>
1000cb52:	e007      	b.n	1000cb64 <at_ble_event_get+0x3d0>
1000cb54:	4b99      	ldr	r3, [pc, #612]	; (1000cdbc <at_ble_event_get+0x628>)
1000cb56:	429c      	cmp	r4, r3
1000cb58:	d100      	bne.n	1000cb5c <at_ble_event_get+0x3c8>
1000cb5a:	e103      	b.n	1000cd64 <at_ble_event_get+0x5d0>
1000cb5c:	4b98      	ldr	r3, [pc, #608]	; (1000cdc0 <at_ble_event_get+0x62c>)
1000cb5e:	429c      	cmp	r4, r3
1000cb60:	d100      	bne.n	1000cb64 <at_ble_event_get+0x3d0>
1000cb62:	e106      	b.n	1000cd72 <at_ble_event_get+0x5de>
1000cb64:	2600      	movs	r6, #0
1000cb66:	e10a      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cb68:	1c30      	adds	r0, r6, #0
1000cb6a:	1c29      	adds	r1, r5, #0
1000cb6c:	4b95      	ldr	r3, [pc, #596]	; (1000cdc4 <at_ble_event_get+0x630>)
1000cb6e:	e014      	b.n	1000cb9a <at_ble_event_get+0x406>
1000cb70:	1c30      	adds	r0, r6, #0
1000cb72:	1c29      	adds	r1, r5, #0
1000cb74:	4b94      	ldr	r3, [pc, #592]	; (1000cdc8 <at_ble_event_get+0x634>)
1000cb76:	4798      	blx	r3
1000cb78:	2604      	movs	r6, #4
1000cb7a:	e100      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cb7c:	1c30      	adds	r0, r6, #0
1000cb7e:	1c29      	adds	r1, r5, #0
1000cb80:	4b92      	ldr	r3, [pc, #584]	; (1000cdcc <at_ble_event_get+0x638>)
1000cb82:	4798      	blx	r3
1000cb84:	2601      	movs	r6, #1
1000cb86:	e0fa      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cb88:	1c30      	adds	r0, r6, #0
1000cb8a:	1c29      	adds	r1, r5, #0
1000cb8c:	4b90      	ldr	r3, [pc, #576]	; (1000cdd0 <at_ble_event_get+0x63c>)
1000cb8e:	4798      	blx	r3
1000cb90:	260f      	movs	r6, #15
1000cb92:	e0f4      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cb94:	1c30      	adds	r0, r6, #0
1000cb96:	1c29      	adds	r1, r5, #0
1000cb98:	4b8e      	ldr	r3, [pc, #568]	; (1000cdd4 <at_ble_event_get+0x640>)
1000cb9a:	4798      	blx	r3
1000cb9c:	1c06      	adds	r6, r0, #0
1000cb9e:	e0ee      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cba0:	9801      	ldr	r0, [sp, #4]
1000cba2:	1c31      	adds	r1, r6, #0
1000cba4:	1c2a      	adds	r2, r5, #0
1000cba6:	4b8c      	ldr	r3, [pc, #560]	; (1000cdd8 <at_ble_event_get+0x644>)
1000cba8:	e017      	b.n	1000cbda <at_ble_event_get+0x446>
1000cbaa:	1c31      	adds	r1, r6, #0
1000cbac:	9801      	ldr	r0, [sp, #4]
1000cbae:	1c2a      	adds	r2, r5, #0
1000cbb0:	4b8a      	ldr	r3, [pc, #552]	; (1000cddc <at_ble_event_get+0x648>)
1000cbb2:	4798      	blx	r3
1000cbb4:	2611      	movs	r6, #17
1000cbb6:	e0e2      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cbb8:	1c31      	adds	r1, r6, #0
1000cbba:	9801      	ldr	r0, [sp, #4]
1000cbbc:	1c2a      	adds	r2, r5, #0
1000cbbe:	4b88      	ldr	r3, [pc, #544]	; (1000cde0 <at_ble_event_get+0x64c>)
1000cbc0:	4798      	blx	r3
1000cbc2:	2612      	movs	r6, #18
1000cbc4:	e0db      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cbc6:	1c30      	adds	r0, r6, #0
1000cbc8:	1c29      	adds	r1, r5, #0
1000cbca:	4b86      	ldr	r3, [pc, #536]	; (1000cde4 <at_ble_event_get+0x650>)
1000cbcc:	4798      	blx	r3
1000cbce:	2606      	movs	r6, #6
1000cbd0:	e0d5      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cbd2:	1c31      	adds	r1, r6, #0
1000cbd4:	1c2a      	adds	r2, r5, #0
1000cbd6:	9801      	ldr	r0, [sp, #4]
1000cbd8:	4b83      	ldr	r3, [pc, #524]	; (1000cde8 <at_ble_event_get+0x654>)
1000cbda:	4798      	blx	r3
1000cbdc:	e7de      	b.n	1000cb9c <at_ble_event_get+0x408>
1000cbde:	9801      	ldr	r0, [sp, #4]
1000cbe0:	1c31      	adds	r1, r6, #0
1000cbe2:	1c2a      	adds	r2, r5, #0
1000cbe4:	4b81      	ldr	r3, [pc, #516]	; (1000cdec <at_ble_event_get+0x658>)
1000cbe6:	e7f8      	b.n	1000cbda <at_ble_event_get+0x446>
1000cbe8:	1c31      	adds	r1, r6, #0
1000cbea:	9801      	ldr	r0, [sp, #4]
1000cbec:	1c2a      	adds	r2, r5, #0
1000cbee:	4b80      	ldr	r3, [pc, #512]	; (1000cdf0 <at_ble_event_get+0x65c>)
1000cbf0:	4798      	blx	r3
1000cbf2:	260d      	movs	r6, #13
1000cbf4:	e0c3      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cbf6:	1c31      	adds	r1, r6, #0
1000cbf8:	9801      	ldr	r0, [sp, #4]
1000cbfa:	1c2a      	adds	r2, r5, #0
1000cbfc:	4b7d      	ldr	r3, [pc, #500]	; (1000cdf4 <at_ble_event_get+0x660>)
1000cbfe:	4798      	blx	r3
1000cc00:	260e      	movs	r6, #14
1000cc02:	e0bc      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cc04:	9801      	ldr	r0, [sp, #4]
1000cc06:	1c31      	adds	r1, r6, #0
1000cc08:	1c2a      	adds	r2, r5, #0
1000cc0a:	4b7b      	ldr	r3, [pc, #492]	; (1000cdf8 <at_ble_event_get+0x664>)
1000cc0c:	4798      	blx	r3
1000cc0e:	e084      	b.n	1000cd1a <at_ble_event_get+0x586>
1000cc10:	1c31      	adds	r1, r6, #0
1000cc12:	9801      	ldr	r0, [sp, #4]
1000cc14:	1c2a      	adds	r2, r5, #0
1000cc16:	4b79      	ldr	r3, [pc, #484]	; (1000cdfc <at_ble_event_get+0x668>)
1000cc18:	4798      	blx	r3
1000cc1a:	260b      	movs	r6, #11
1000cc1c:	e0af      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cc1e:	1c31      	adds	r1, r6, #0
1000cc20:	9801      	ldr	r0, [sp, #4]
1000cc22:	1c2a      	adds	r2, r5, #0
1000cc24:	4b76      	ldr	r3, [pc, #472]	; (1000ce00 <at_ble_event_get+0x66c>)
1000cc26:	4798      	blx	r3
1000cc28:	2610      	movs	r6, #16
1000cc2a:	e0a8      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cc2c:	1c30      	adds	r0, r6, #0
1000cc2e:	1c29      	adds	r1, r5, #0
1000cc30:	4b74      	ldr	r3, [pc, #464]	; (1000ce04 <at_ble_event_get+0x670>)
1000cc32:	4798      	blx	r3
1000cc34:	2628      	movs	r6, #40	; 0x28
1000cc36:	e0a2      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cc38:	1c30      	adds	r0, r6, #0
1000cc3a:	1c29      	adds	r1, r5, #0
1000cc3c:	4b72      	ldr	r3, [pc, #456]	; (1000ce08 <at_ble_event_get+0x674>)
1000cc3e:	4798      	blx	r3
1000cc40:	2629      	movs	r6, #41	; 0x29
1000cc42:	e09c      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cc44:	1c30      	adds	r0, r6, #0
1000cc46:	1c29      	adds	r1, r5, #0
1000cc48:	4b70      	ldr	r3, [pc, #448]	; (1000ce0c <at_ble_event_get+0x678>)
1000cc4a:	4798      	blx	r3
1000cc4c:	2627      	movs	r6, #39	; 0x27
1000cc4e:	e096      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cc50:	1c30      	adds	r0, r6, #0
1000cc52:	1c29      	adds	r1, r5, #0
1000cc54:	4b6e      	ldr	r3, [pc, #440]	; (1000ce10 <at_ble_event_get+0x67c>)
1000cc56:	4798      	blx	r3
1000cc58:	262a      	movs	r6, #42	; 0x2a
1000cc5a:	e090      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cc5c:	9801      	ldr	r0, [sp, #4]
1000cc5e:	1c31      	adds	r1, r6, #0
1000cc60:	1c2a      	adds	r2, r5, #0
1000cc62:	4b6c      	ldr	r3, [pc, #432]	; (1000ce14 <at_ble_event_get+0x680>)
1000cc64:	e7b9      	b.n	1000cbda <at_ble_event_get+0x446>
1000cc66:	9801      	ldr	r0, [sp, #4]
1000cc68:	1c31      	adds	r1, r6, #0
1000cc6a:	1c2a      	adds	r2, r5, #0
1000cc6c:	4b6a      	ldr	r3, [pc, #424]	; (1000ce18 <at_ble_event_get+0x684>)
1000cc6e:	e7b4      	b.n	1000cbda <at_ble_event_get+0x446>
1000cc70:	1c30      	adds	r0, r6, #0
1000cc72:	1c29      	adds	r1, r5, #0
1000cc74:	4b69      	ldr	r3, [pc, #420]	; (1000ce1c <at_ble_event_get+0x688>)
1000cc76:	4798      	blx	r3
1000cc78:	262b      	movs	r6, #43	; 0x2b
1000cc7a:	e080      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cc7c:	1c30      	adds	r0, r6, #0
1000cc7e:	1c29      	adds	r1, r5, #0
1000cc80:	4b67      	ldr	r3, [pc, #412]	; (1000ce20 <at_ble_event_get+0x68c>)
1000cc82:	4798      	blx	r3
1000cc84:	262c      	movs	r6, #44	; 0x2c
1000cc86:	e07a      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cc88:	1c31      	adds	r1, r6, #0
1000cc8a:	9801      	ldr	r0, [sp, #4]
1000cc8c:	1c2a      	adds	r2, r5, #0
1000cc8e:	4b65      	ldr	r3, [pc, #404]	; (1000ce24 <at_ble_event_get+0x690>)
1000cc90:	4798      	blx	r3
1000cc92:	2613      	movs	r6, #19
1000cc94:	e073      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cc96:	1c31      	adds	r1, r6, #0
1000cc98:	9801      	ldr	r0, [sp, #4]
1000cc9a:	1c2a      	adds	r2, r5, #0
1000cc9c:	4b62      	ldr	r3, [pc, #392]	; (1000ce28 <at_ble_event_get+0x694>)
1000cc9e:	4798      	blx	r3
1000cca0:	2614      	movs	r6, #20
1000cca2:	e06c      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cca4:	1c31      	adds	r1, r6, #0
1000cca6:	9801      	ldr	r0, [sp, #4]
1000cca8:	1c2a      	adds	r2, r5, #0
1000ccaa:	4b60      	ldr	r3, [pc, #384]	; (1000ce2c <at_ble_event_get+0x698>)
1000ccac:	4798      	blx	r3
1000ccae:	2615      	movs	r6, #21
1000ccb0:	e065      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000ccb2:	1c31      	adds	r1, r6, #0
1000ccb4:	9801      	ldr	r0, [sp, #4]
1000ccb6:	1c2a      	adds	r2, r5, #0
1000ccb8:	4b5d      	ldr	r3, [pc, #372]	; (1000ce30 <at_ble_event_get+0x69c>)
1000ccba:	4798      	blx	r3
1000ccbc:	2616      	movs	r6, #22
1000ccbe:	e05e      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000ccc0:	9801      	ldr	r0, [sp, #4]
1000ccc2:	1c31      	adds	r1, r6, #0
1000ccc4:	1c2a      	adds	r2, r5, #0
1000ccc6:	4b5b      	ldr	r3, [pc, #364]	; (1000ce34 <at_ble_event_get+0x6a0>)
1000ccc8:	e787      	b.n	1000cbda <at_ble_event_get+0x446>
1000ccca:	1c31      	adds	r1, r6, #0
1000cccc:	9801      	ldr	r0, [sp, #4]
1000ccce:	1c2a      	adds	r2, r5, #0
1000ccd0:	4b58      	ldr	r3, [pc, #352]	; (1000ce34 <at_ble_event_get+0x6a0>)
1000ccd2:	4798      	blx	r3
1000ccd4:	88a9      	ldrh	r1, [r5, #4]
1000ccd6:	1c06      	adds	r6, r0, #0
1000ccd8:	4b57      	ldr	r3, [pc, #348]	; (1000ce38 <at_ble_event_get+0x6a4>)
1000ccda:	8828      	ldrh	r0, [r5, #0]
1000ccdc:	4798      	blx	r3
1000ccde:	e04e      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cce0:	1c31      	adds	r1, r6, #0
1000cce2:	9801      	ldr	r0, [sp, #4]
1000cce4:	1c2a      	adds	r2, r5, #0
1000cce6:	4b55      	ldr	r3, [pc, #340]	; (1000ce3c <at_ble_event_get+0x6a8>)
1000cce8:	4798      	blx	r3
1000ccea:	2623      	movs	r6, #35	; 0x23
1000ccec:	e047      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000ccee:	9801      	ldr	r0, [sp, #4]
1000ccf0:	1c31      	adds	r1, r6, #0
1000ccf2:	1c2a      	adds	r2, r5, #0
1000ccf4:	4b52      	ldr	r3, [pc, #328]	; (1000ce40 <at_ble_event_get+0x6ac>)
1000ccf6:	e770      	b.n	1000cbda <at_ble_event_get+0x446>
1000ccf8:	9b01      	ldr	r3, [sp, #4]
1000ccfa:	1c30      	adds	r0, r6, #0
1000ccfc:	0a1f      	lsrs	r7, r3, #8
1000ccfe:	802f      	strh	r7, [r5, #0]
1000cd00:	1c29      	adds	r1, r5, #0
1000cd02:	4b50      	ldr	r3, [pc, #320]	; (1000ce44 <at_ble_event_get+0x6b0>)
1000cd04:	e749      	b.n	1000cb9a <at_ble_event_get+0x406>
1000cd06:	9801      	ldr	r0, [sp, #4]
1000cd08:	1c31      	adds	r1, r6, #0
1000cd0a:	1c2a      	adds	r2, r5, #0
1000cd0c:	4b4e      	ldr	r3, [pc, #312]	; (1000ce48 <at_ble_event_get+0x6b4>)
1000cd0e:	e764      	b.n	1000cbda <at_ble_event_get+0x446>
1000cd10:	1c30      	adds	r0, r6, #0
1000cd12:	1c29      	adds	r1, r5, #0
1000cd14:	9a01      	ldr	r2, [sp, #4]
1000cd16:	4b4d      	ldr	r3, [pc, #308]	; (1000ce4c <at_ble_event_get+0x6b8>)
1000cd18:	4798      	blx	r3
1000cd1a:	263b      	movs	r6, #59	; 0x3b
1000cd1c:	e02f      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cd1e:	1c31      	adds	r1, r6, #0
1000cd20:	9801      	ldr	r0, [sp, #4]
1000cd22:	1c2a      	adds	r2, r5, #0
1000cd24:	4b4a      	ldr	r3, [pc, #296]	; (1000ce50 <at_ble_event_get+0x6bc>)
1000cd26:	4798      	blx	r3
1000cd28:	2618      	movs	r6, #24
1000cd2a:	e028      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cd2c:	1c31      	adds	r1, r6, #0
1000cd2e:	9801      	ldr	r0, [sp, #4]
1000cd30:	1c2a      	adds	r2, r5, #0
1000cd32:	4b48      	ldr	r3, [pc, #288]	; (1000ce54 <at_ble_event_get+0x6c0>)
1000cd34:	4798      	blx	r3
1000cd36:	2620      	movs	r6, #32
1000cd38:	e021      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cd3a:	1c31      	adds	r1, r6, #0
1000cd3c:	9801      	ldr	r0, [sp, #4]
1000cd3e:	1c2a      	adds	r2, r5, #0
1000cd40:	4b45      	ldr	r3, [pc, #276]	; (1000ce58 <at_ble_event_get+0x6c4>)
1000cd42:	4798      	blx	r3
1000cd44:	2633      	movs	r6, #51	; 0x33
1000cd46:	e01a      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cd48:	1c31      	adds	r1, r6, #0
1000cd4a:	9801      	ldr	r0, [sp, #4]
1000cd4c:	1c2a      	adds	r2, r5, #0
1000cd4e:	4b43      	ldr	r3, [pc, #268]	; (1000ce5c <at_ble_event_get+0x6c8>)
1000cd50:	4798      	blx	r3
1000cd52:	2630      	movs	r6, #48	; 0x30
1000cd54:	e013      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cd56:	1c31      	adds	r1, r6, #0
1000cd58:	9801      	ldr	r0, [sp, #4]
1000cd5a:	1c2a      	adds	r2, r5, #0
1000cd5c:	4b40      	ldr	r3, [pc, #256]	; (1000ce60 <at_ble_event_get+0x6cc>)
1000cd5e:	4798      	blx	r3
1000cd60:	2634      	movs	r6, #52	; 0x34
1000cd62:	e00c      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cd64:	1c31      	adds	r1, r6, #0
1000cd66:	9801      	ldr	r0, [sp, #4]
1000cd68:	1c2a      	adds	r2, r5, #0
1000cd6a:	4b3e      	ldr	r3, [pc, #248]	; (1000ce64 <at_ble_event_get+0x6d0>)
1000cd6c:	4798      	blx	r3
1000cd6e:	2635      	movs	r6, #53	; 0x35
1000cd70:	e005      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cd72:	1c31      	adds	r1, r6, #0
1000cd74:	9801      	ldr	r0, [sp, #4]
1000cd76:	1c2a      	adds	r2, r5, #0
1000cd78:	4b3b      	ldr	r3, [pc, #236]	; (1000ce68 <at_ble_event_get+0x6d4>)
1000cd7a:	4798      	blx	r3
1000cd7c:	2632      	movs	r6, #50	; 0x32
1000cd7e:	9b03      	ldr	r3, [sp, #12]
1000cd80:	701e      	strb	r6, [r3, #0]
1000cd82:	2300      	movs	r3, #0
1000cd84:	9302      	str	r3, [sp, #8]
1000cd86:	e57a      	b.n	1000c87e <at_ble_event_get+0xea>
1000cd88:	23d0      	movs	r3, #208	; 0xd0
1000cd8a:	e7fb      	b.n	1000cd84 <at_ble_event_get+0x5f0>
1000cd8c:	9b01      	ldr	r3, [sp, #4]
1000cd8e:	9e02      	ldr	r6, [sp, #8]
1000cd90:	2bbb      	cmp	r3, #187	; 0xbb
1000cd92:	d000      	beq.n	1000cd96 <at_ble_event_get+0x602>
1000cd94:	e6e6      	b.n	1000cb64 <at_ble_event_get+0x3d0>
1000cd96:	e7f2      	b.n	1000cd7e <at_ble_event_get+0x5ea>
1000cd98:	9b02      	ldr	r3, [sp, #8]
1000cd9a:	2b00      	cmp	r3, #0
1000cd9c:	d000      	beq.n	1000cda0 <at_ble_event_get+0x60c>
1000cd9e:	e56e      	b.n	1000c87e <at_ble_event_get+0xea>
1000cda0:	e6e0      	b.n	1000cb64 <at_ble_event_get+0x3d0>
1000cda2:	9802      	ldr	r0, [sp, #8]
1000cda4:	b007      	add	sp, #28
1000cda6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cda8:	00000e22 	.word	0x00000e22
1000cdac:	00000e25 	.word	0x00000e25
1000cdb0:	00001b05 	.word	0x00001b05
1000cdb4:	00001b01 	.word	0x00001b01
1000cdb8:	00001b03 	.word	0x00001b03
1000cdbc:	00001b06 	.word	0x00001b06
1000cdc0:	00001b08 	.word	0x00001b08
1000cdc4:	1000e76d 	.word	0x1000e76d
1000cdc8:	1000e751 	.word	0x1000e751
1000cdcc:	1000e8b5 	.word	0x1000e8b5
1000cdd0:	1000e9a5 	.word	0x1000e9a5
1000cdd4:	1000e9c9 	.word	0x1000e9c9
1000cdd8:	1000dae5 	.word	0x1000dae5
1000cddc:	1000e365 	.word	0x1000e365
1000cde0:	1000e3e1 	.word	0x1000e3e1
1000cde4:	1000dd9d 	.word	0x1000dd9d
1000cde8:	1000de39 	.word	0x1000de39
1000cdec:	1000df11 	.word	0x1000df11
1000cdf0:	1000e199 	.word	0x1000e199
1000cdf4:	1000e239 	.word	0x1000e239
1000cdf8:	1000e2f1 	.word	0x1000e2f1
1000cdfc:	1000e319 	.word	0x1000e319
1000ce00:	1000e32f 	.word	0x1000e32f
1000ce04:	1000e3f9 	.word	0x1000e3f9
1000ce08:	1000e427 	.word	0x1000e427
1000ce0c:	1000e43d 	.word	0x1000e43d
1000ce10:	1000e467 	.word	0x1000e467
1000ce14:	1000e295 	.word	0x1000e295
1000ce18:	1000e2bf 	.word	0x1000e2bf
1000ce1c:	1000d525 	.word	0x1000d525
1000ce20:	1000d551 	.word	0x1000d551
1000ce24:	1000eb71 	.word	0x1000eb71
1000ce28:	1000ebad 	.word	0x1000ebad
1000ce2c:	1000ebf5 	.word	0x1000ebf5
1000ce30:	1000ec39 	.word	0x1000ec39
1000ce34:	1000ec6d 	.word	0x1000ec6d
1000ce38:	1000eb31 	.word	0x1000eb31
1000ce3c:	1000ed39 	.word	0x1000ed39
1000ce40:	1000ecc1 	.word	0x1000ecc1
1000ce44:	1000d47d 	.word	0x1000d47d
1000ce48:	1000d4e9 	.word	0x1000d4e9
1000ce4c:	1000d4ad 	.word	0x1000d4ad
1000ce50:	1000ed49 	.word	0x1000ed49
1000ce54:	1000ed89 	.word	0x1000ed89
1000ce58:	1000eed5 	.word	0x1000eed5
1000ce5c:	1000eedf 	.word	0x1000eedf
1000ce60:	1000eee5 	.word	0x1000eee5
1000ce64:	1000eeeb 	.word	0x1000eeeb
1000ce68:	1000eef7 	.word	0x1000eef7

1000ce6c <internal_event_flush>:
1000ce6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ce6e:	490e      	ldr	r1, [pc, #56]	; (1000cea8 <internal_event_flush+0x3c>)
1000ce70:	2400      	movs	r4, #0
1000ce72:	680b      	ldr	r3, [r1, #0]
1000ce74:	1c0f      	adds	r7, r1, #0
1000ce76:	1c1e      	adds	r6, r3, #0
1000ce78:	4a0c      	ldr	r2, [pc, #48]	; (1000ceac <internal_event_flush+0x40>)
1000ce7a:	6815      	ldr	r5, [r2, #0]
1000ce7c:	9201      	str	r2, [sp, #4]
1000ce7e:	2b00      	cmp	r3, #0
1000ce80:	d00e      	beq.n	1000cea0 <internal_event_flush+0x34>
1000ce82:	889a      	ldrh	r2, [r3, #4]
1000ce84:	6819      	ldr	r1, [r3, #0]
1000ce86:	4282      	cmp	r2, r0
1000ce88:	d107      	bne.n	1000ce9a <internal_event_flush+0x2e>
1000ce8a:	2c00      	cmp	r4, #0
1000ce8c:	d001      	beq.n	1000ce92 <internal_event_flush+0x26>
1000ce8e:	6021      	str	r1, [r4, #0]
1000ce90:	e000      	b.n	1000ce94 <internal_event_flush+0x28>
1000ce92:	1c0e      	adds	r6, r1, #0
1000ce94:	601d      	str	r5, [r3, #0]
1000ce96:	1c1d      	adds	r5, r3, #0
1000ce98:	1c23      	adds	r3, r4, #0
1000ce9a:	1c1c      	adds	r4, r3, #0
1000ce9c:	1c0b      	adds	r3, r1, #0
1000ce9e:	e7ee      	b.n	1000ce7e <internal_event_flush+0x12>
1000cea0:	9b01      	ldr	r3, [sp, #4]
1000cea2:	603e      	str	r6, [r7, #0]
1000cea4:	601d      	str	r5, [r3, #0]
1000cea6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000cea8:	100139d0 	.word	0x100139d0
1000ceac:	100139d4 	.word	0x100139d4

1000ceb0 <internal_conn_flush>:
1000ceb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ceb2:	4a12      	ldr	r2, [pc, #72]	; (1000cefc <internal_conn_flush+0x4c>)
1000ceb4:	9000      	str	r0, [sp, #0]
1000ceb6:	6813      	ldr	r3, [r2, #0]
1000ceb8:	4811      	ldr	r0, [pc, #68]	; (1000cf00 <internal_conn_flush+0x50>)
1000ceba:	1c1f      	adds	r7, r3, #0
1000cebc:	2100      	movs	r1, #0
1000cebe:	4684      	mov	ip, r0
1000cec0:	6804      	ldr	r4, [r0, #0]
1000cec2:	9201      	str	r2, [sp, #4]
1000cec4:	2b00      	cmp	r3, #0
1000cec6:	d014      	beq.n	1000cef2 <internal_conn_flush+0x42>
1000cec8:	88d8      	ldrh	r0, [r3, #6]
1000ceca:	9a00      	ldr	r2, [sp, #0]
1000cecc:	681d      	ldr	r5, [r3, #0]
1000cece:	0a06      	lsrs	r6, r0, #8
1000ced0:	4296      	cmp	r6, r2
1000ced2:	d10b      	bne.n	1000ceec <internal_conn_flush+0x3c>
1000ced4:	26fd      	movs	r6, #253	; 0xfd
1000ced6:	4006      	ands	r6, r0
1000ced8:	2e0c      	cmp	r6, #12
1000ceda:	d107      	bne.n	1000ceec <internal_conn_flush+0x3c>
1000cedc:	2900      	cmp	r1, #0
1000cede:	d001      	beq.n	1000cee4 <internal_conn_flush+0x34>
1000cee0:	600d      	str	r5, [r1, #0]
1000cee2:	e000      	b.n	1000cee6 <internal_conn_flush+0x36>
1000cee4:	1c2f      	adds	r7, r5, #0
1000cee6:	601c      	str	r4, [r3, #0]
1000cee8:	1c1c      	adds	r4, r3, #0
1000ceea:	1c0b      	adds	r3, r1, #0
1000ceec:	1c19      	adds	r1, r3, #0
1000ceee:	1c2b      	adds	r3, r5, #0
1000cef0:	e7e8      	b.n	1000cec4 <internal_conn_flush+0x14>
1000cef2:	9b01      	ldr	r3, [sp, #4]
1000cef4:	601f      	str	r7, [r3, #0]
1000cef6:	4663      	mov	r3, ip
1000cef8:	601c      	str	r4, [r3, #0]
1000cefa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000cefc:	100139d0 	.word	0x100139d0
1000cf00:	100139d4 	.word	0x100139d4

1000cf04 <at_ble_device_name_set>:
1000cf04:	b530      	push	{r4, r5, lr}
1000cf06:	23cf      	movs	r3, #207	; 0xcf
1000cf08:	2800      	cmp	r0, #0
1000cf0a:	d010      	beq.n	1000cf2e <at_ble_device_name_set+0x2a>
1000cf0c:	1e4a      	subs	r2, r1, #1
1000cf0e:	2a1f      	cmp	r2, #31
1000cf10:	d80d      	bhi.n	1000cf2e <at_ble_device_name_set+0x2a>
1000cf12:	4a08      	ldr	r2, [pc, #32]	; (1000cf34 <at_ble_device_name_set+0x30>)
1000cf14:	1c13      	adds	r3, r2, #0
1000cf16:	33aa      	adds	r3, #170	; 0xaa
1000cf18:	8019      	strh	r1, [r3, #0]
1000cf1a:	2300      	movs	r3, #0
1000cf1c:	1c1c      	adds	r4, r3, #0
1000cf1e:	5cc5      	ldrb	r5, [r0, r3]
1000cf20:	34ac      	adds	r4, #172	; 0xac
1000cf22:	3301      	adds	r3, #1
1000cf24:	5515      	strb	r5, [r2, r4]
1000cf26:	b2dc      	uxtb	r4, r3
1000cf28:	428c      	cmp	r4, r1
1000cf2a:	d3f7      	bcc.n	1000cf1c <at_ble_device_name_set+0x18>
1000cf2c:	2300      	movs	r3, #0
1000cf2e:	1c18      	adds	r0, r3, #0
1000cf30:	bd30      	pop	{r4, r5, pc}
1000cf32:	46c0      	nop			; (mov r8, r8)
1000cf34:	100147b6 	.word	0x100147b6

1000cf38 <at_ble_addr_get>:
1000cf38:	b510      	push	{r4, lr}
1000cf3a:	1c04      	adds	r4, r0, #0
1000cf3c:	20cf      	movs	r0, #207	; 0xcf
1000cf3e:	2c00      	cmp	r4, #0
1000cf40:	d006      	beq.n	1000cf50 <at_ble_addr_get+0x18>
1000cf42:	4b04      	ldr	r3, [pc, #16]	; (1000cf54 <at_ble_addr_get+0x1c>)
1000cf44:	38ce      	subs	r0, #206	; 0xce
1000cf46:	1c21      	adds	r1, r4, #0
1000cf48:	4798      	blx	r3
1000cf4a:	4b03      	ldr	r3, [pc, #12]	; (1000cf58 <at_ble_addr_get+0x20>)
1000cf4c:	791b      	ldrb	r3, [r3, #4]
1000cf4e:	7023      	strb	r3, [r4, #0]
1000cf50:	bd10      	pop	{r4, pc}
1000cf52:	46c0      	nop			; (mov r8, r8)
1000cf54:	1000e601 	.word	0x1000e601
1000cf58:	100147b6 	.word	0x100147b6

1000cf5c <at_ble_set_dev_config>:
1000cf5c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cf5e:	7906      	ldrb	r6, [r0, #4]
1000cf60:	b089      	sub	sp, #36	; 0x24
1000cf62:	25cf      	movs	r5, #207	; 0xcf
1000cf64:	2e03      	cmp	r6, #3
1000cf66:	d838      	bhi.n	1000cfda <at_ble_set_dev_config+0x7e>
1000cf68:	7803      	ldrb	r3, [r0, #0]
1000cf6a:	3511      	adds	r5, #17
1000cf6c:	2b0f      	cmp	r3, #15
1000cf6e:	d834      	bhi.n	1000cfda <at_ble_set_dev_config+0x7e>
1000cf70:	2380      	movs	r3, #128	; 0x80
1000cf72:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000cf74:	3d11      	subs	r5, #17
1000cf76:	009b      	lsls	r3, r3, #2
1000cf78:	429f      	cmp	r7, r3
1000cf7a:	d82e      	bhi.n	1000cfda <at_ble_set_dev_config+0x7e>
1000cf7c:	7fc5      	ldrb	r5, [r0, #31]
1000cf7e:	7f83      	ldrb	r3, [r0, #30]
1000cf80:	01ad      	lsls	r5, r5, #6
1000cf82:	015b      	lsls	r3, r3, #5
1000cf84:	431d      	orrs	r5, r3
1000cf86:	7ec3      	ldrb	r3, [r0, #27]
1000cf88:	431d      	orrs	r5, r3
1000cf8a:	7f43      	ldrb	r3, [r0, #29]
1000cf8c:	011b      	lsls	r3, r3, #4
1000cf8e:	431d      	orrs	r5, r3
1000cf90:	7f03      	ldrb	r3, [r0, #28]
1000cf92:	009b      	lsls	r3, r3, #2
1000cf94:	431d      	orrs	r5, r3
1000cf96:	4b12      	ldr	r3, [pc, #72]	; (1000cfe0 <at_ble_set_dev_config+0x84>)
1000cf98:	b2ed      	uxtb	r5, r5
1000cf9a:	711e      	strb	r6, [r3, #4]
1000cf9c:	7903      	ldrb	r3, [r0, #4]
1000cf9e:	3b02      	subs	r3, #2
1000cfa0:	2b01      	cmp	r3, #1
1000cfa2:	d801      	bhi.n	1000cfa8 <at_ble_set_dev_config+0x4c>
1000cfa4:	2302      	movs	r3, #2
1000cfa6:	7103      	strb	r3, [r0, #4]
1000cfa8:	1c04      	adds	r4, r0, #0
1000cfaa:	1c23      	adds	r3, r4, #0
1000cfac:	330b      	adds	r3, #11
1000cfae:	8861      	ldrh	r1, [r4, #2]
1000cfb0:	9307      	str	r3, [sp, #28]
1000cfb2:	7923      	ldrb	r3, [r4, #4]
1000cfb4:	7800      	ldrb	r0, [r0, #0]
1000cfb6:	9300      	str	r3, [sp, #0]
1000cfb8:	9501      	str	r5, [sp, #4]
1000cfba:	8c25      	ldrh	r5, [r4, #32]
1000cfbc:	1d62      	adds	r2, r4, #5
1000cfbe:	9502      	str	r5, [sp, #8]
1000cfc0:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000cfc2:	9b07      	ldr	r3, [sp, #28]
1000cfc4:	9503      	str	r5, [sp, #12]
1000cfc6:	9704      	str	r7, [sp, #16]
1000cfc8:	4d06      	ldr	r5, [pc, #24]	; (1000cfe4 <at_ble_set_dev_config+0x88>)
1000cfca:	47a8      	blx	r5
1000cfcc:	7126      	strb	r6, [r4, #4]
1000cfce:	1c05      	adds	r5, r0, #0
1000cfd0:	1c21      	adds	r1, r4, #0
1000cfd2:	4803      	ldr	r0, [pc, #12]	; (1000cfe0 <at_ble_set_dev_config+0x84>)
1000cfd4:	2226      	movs	r2, #38	; 0x26
1000cfd6:	4b04      	ldr	r3, [pc, #16]	; (1000cfe8 <at_ble_set_dev_config+0x8c>)
1000cfd8:	4798      	blx	r3
1000cfda:	1c28      	adds	r0, r5, #0
1000cfdc:	b009      	add	sp, #36	; 0x24
1000cfde:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cfe0:	100147b6 	.word	0x100147b6
1000cfe4:	1000e4f9 	.word	0x1000e4f9
1000cfe8:	1001025f 	.word	0x1001025f

1000cfec <at_ble_init>:
1000cfec:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cfee:	b087      	sub	sp, #28
1000cff0:	af03      	add	r7, sp, #12
1000cff2:	4954      	ldr	r1, [pc, #336]	; (1000d144 <at_ble_init+0x158>)
1000cff4:	220b      	movs	r2, #11
1000cff6:	4b54      	ldr	r3, [pc, #336]	; (1000d148 <at_ble_init+0x15c>)
1000cff8:	1c04      	adds	r4, r0, #0
1000cffa:	1c38      	adds	r0, r7, #0
1000cffc:	4798      	blx	r3
1000cffe:	2205      	movs	r2, #5
1000d000:	4b52      	ldr	r3, [pc, #328]	; (1000d14c <at_ble_init+0x160>)
1000d002:	2640      	movs	r6, #64	; 0x40
1000d004:	801a      	strh	r2, [r3, #0]
1000d006:	2300      	movs	r3, #0
1000d008:	4a51      	ldr	r2, [pc, #324]	; (1000d150 <at_ble_init+0x164>)
1000d00a:	6013      	str	r3, [r2, #0]
1000d00c:	4a51      	ldr	r2, [pc, #324]	; (1000d154 <at_ble_init+0x168>)
1000d00e:	7013      	strb	r3, [r2, #0]
1000d010:	4a51      	ldr	r2, [pc, #324]	; (1000d158 <at_ble_init+0x16c>)
1000d012:	7013      	strb	r3, [r2, #0]
1000d014:	4b51      	ldr	r3, [pc, #324]	; (1000d15c <at_ble_init+0x170>)
1000d016:	4798      	blx	r3
1000d018:	4b51      	ldr	r3, [pc, #324]	; (1000d160 <at_ble_init+0x174>)
1000d01a:	4798      	blx	r3
1000d01c:	4b51      	ldr	r3, [pc, #324]	; (1000d164 <at_ble_init+0x178>)
1000d01e:	4798      	blx	r3
1000d020:	4b51      	ldr	r3, [pc, #324]	; (1000d168 <at_ble_init+0x17c>)
1000d022:	4798      	blx	r3
1000d024:	2c00      	cmp	r4, #0
1000d026:	d100      	bne.n	1000d02a <at_ble_init+0x3e>
1000d028:	e089      	b.n	1000d13e <at_ble_init+0x152>
1000d02a:	68a3      	ldr	r3, [r4, #8]
1000d02c:	2b00      	cmp	r3, #0
1000d02e:	d100      	bne.n	1000d032 <at_ble_init+0x46>
1000d030:	e085      	b.n	1000d13e <at_ble_init+0x152>
1000d032:	6923      	ldr	r3, [r4, #16]
1000d034:	2b00      	cmp	r3, #0
1000d036:	d100      	bne.n	1000d03a <at_ble_init+0x4e>
1000d038:	e081      	b.n	1000d13e <at_ble_init+0x152>
1000d03a:	6820      	ldr	r0, [r4, #0]
1000d03c:	2800      	cmp	r0, #0
1000d03e:	d102      	bne.n	1000d046 <at_ble_init+0x5a>
1000d040:	6863      	ldr	r3, [r4, #4]
1000d042:	2b00      	cmp	r3, #0
1000d044:	d17b      	bne.n	1000d13e <at_ble_init+0x152>
1000d046:	4b49      	ldr	r3, [pc, #292]	; (1000d16c <at_ble_init+0x180>)
1000d048:	6861      	ldr	r1, [r4, #4]
1000d04a:	4798      	blx	r3
1000d04c:	4b48      	ldr	r3, [pc, #288]	; (1000d170 <at_ble_init+0x184>)
1000d04e:	4798      	blx	r3
1000d050:	2801      	cmp	r0, #1
1000d052:	d901      	bls.n	1000d058 <at_ble_init+0x6c>
1000d054:	26e2      	movs	r6, #226	; 0xe2
1000d056:	e072      	b.n	1000d13e <at_ble_init+0x152>
1000d058:	4846      	ldr	r0, [pc, #280]	; (1000d174 <at_ble_init+0x188>)
1000d05a:	4b47      	ldr	r3, [pc, #284]	; (1000d178 <at_ble_init+0x18c>)
1000d05c:	4798      	blx	r3
1000d05e:	2800      	cmp	r0, #0
1000d060:	d1f8      	bne.n	1000d054 <at_ble_init+0x68>
1000d062:	1c20      	adds	r0, r4, #0
1000d064:	4b45      	ldr	r3, [pc, #276]	; (1000d17c <at_ble_init+0x190>)
1000d066:	4798      	blx	r3
1000d068:	68e0      	ldr	r0, [r4, #12]
1000d06a:	68a1      	ldr	r1, [r4, #8]
1000d06c:	4b44      	ldr	r3, [pc, #272]	; (1000d180 <at_ble_init+0x194>)
1000d06e:	4798      	blx	r3
1000d070:	466b      	mov	r3, sp
1000d072:	2201      	movs	r2, #1
1000d074:	1cdc      	adds	r4, r3, #3
1000d076:	1c20      	adds	r0, r4, #0
1000d078:	a901      	add	r1, sp, #4
1000d07a:	4252      	negs	r2, r2
1000d07c:	4b41      	ldr	r3, [pc, #260]	; (1000d184 <at_ble_init+0x198>)
1000d07e:	4798      	blx	r3
1000d080:	2800      	cmp	r0, #0
1000d082:	d102      	bne.n	1000d08a <at_ble_init+0x9e>
1000d084:	7823      	ldrb	r3, [r4, #0]
1000d086:	2b39      	cmp	r3, #57	; 0x39
1000d088:	d1f2      	bne.n	1000d070 <at_ble_init+0x84>
1000d08a:	4b3f      	ldr	r3, [pc, #252]	; (1000d188 <at_ble_init+0x19c>)
1000d08c:	4798      	blx	r3
1000d08e:	1e06      	subs	r6, r0, #0
1000d090:	d155      	bne.n	1000d13e <at_ble_init+0x152>
1000d092:	1c03      	adds	r3, r0, #0
1000d094:	2101      	movs	r1, #1
1000d096:	4a3d      	ldr	r2, [pc, #244]	; (1000d18c <at_ble_init+0x1a0>)
1000d098:	4249      	negs	r1, r1
1000d09a:	189a      	adds	r2, r3, r2
1000d09c:	3312      	adds	r3, #18
1000d09e:	8151      	strh	r1, [r2, #10]
1000d0a0:	2b90      	cmp	r3, #144	; 0x90
1000d0a2:	d1f7      	bne.n	1000d094 <at_ble_init+0xa8>
1000d0a4:	4c3a      	ldr	r4, [pc, #232]	; (1000d190 <at_ble_init+0x1a4>)
1000d0a6:	3b81      	subs	r3, #129	; 0x81
1000d0a8:	7023      	strb	r3, [r4, #0]
1000d0aa:	4b3a      	ldr	r3, [pc, #232]	; (1000d194 <at_ble_init+0x1a8>)
1000d0ac:	4a3a      	ldr	r2, [pc, #232]	; (1000d198 <at_ble_init+0x1ac>)
1000d0ae:	8063      	strh	r3, [r4, #2]
1000d0b0:	2300      	movs	r3, #0
1000d0b2:	7123      	strb	r3, [r4, #4]
1000d0b4:	3301      	adds	r3, #1
1000d0b6:	1e58      	subs	r0, r3, #1
1000d0b8:	0119      	lsls	r1, r3, #4
1000d0ba:	4301      	orrs	r1, r0
1000d0bc:	3302      	adds	r3, #2
1000d0be:	7011      	strb	r1, [r2, #0]
1000d0c0:	3201      	adds	r2, #1
1000d0c2:	2b21      	cmp	r3, #33	; 0x21
1000d0c4:	d1f7      	bne.n	1000d0b6 <at_ble_init+0xca>
1000d0c6:	33e0      	adds	r3, #224	; 0xe0
1000d0c8:	33ff      	adds	r3, #255	; 0xff
1000d0ca:	84a3      	strh	r3, [r4, #36]	; 0x24
1000d0cc:	1c23      	adds	r3, r4, #0
1000d0ce:	2500      	movs	r5, #0
1000d0d0:	3373      	adds	r3, #115	; 0x73
1000d0d2:	701d      	strb	r5, [r3, #0]
1000d0d4:	1c23      	adds	r3, r4, #0
1000d0d6:	3372      	adds	r3, #114	; 0x72
1000d0d8:	701d      	strb	r5, [r3, #0]
1000d0da:	1c23      	adds	r3, r4, #0
1000d0dc:	3376      	adds	r3, #118	; 0x76
1000d0de:	701d      	strb	r5, [r3, #0]
1000d0e0:	1c23      	adds	r3, r4, #0
1000d0e2:	33cc      	adds	r3, #204	; 0xcc
1000d0e4:	801d      	strh	r5, [r3, #0]
1000d0e6:	1c22      	adds	r2, r4, #0
1000d0e8:	23a0      	movs	r3, #160	; 0xa0
1000d0ea:	32d0      	adds	r2, #208	; 0xd0
1000d0ec:	005b      	lsls	r3, r3, #1
1000d0ee:	8013      	strh	r3, [r2, #0]
1000d0f0:	1c22      	adds	r2, r4, #0
1000d0f2:	32ce      	adds	r2, #206	; 0xce
1000d0f4:	8013      	strh	r3, [r2, #0]
1000d0f6:	1c23      	adds	r3, r4, #0
1000d0f8:	33d2      	adds	r3, #210	; 0xd2
1000d0fa:	801d      	strh	r5, [r3, #0]
1000d0fc:	22fa      	movs	r2, #250	; 0xfa
1000d0fe:	1c23      	adds	r3, r4, #0
1000d100:	0052      	lsls	r2, r2, #1
1000d102:	33d4      	adds	r3, #212	; 0xd4
1000d104:	801a      	strh	r2, [r3, #0]
1000d106:	1c23      	adds	r3, r4, #0
1000d108:	33d6      	adds	r3, #214	; 0xd6
1000d10a:	701d      	strb	r5, [r3, #0]
1000d10c:	1c20      	adds	r0, r4, #0
1000d10e:	4b23      	ldr	r3, [pc, #140]	; (1000d19c <at_ble_init+0x1b0>)
1000d110:	76e5      	strb	r5, [r4, #27]
1000d112:	7725      	strb	r5, [r4, #28]
1000d114:	7765      	strb	r5, [r4, #29]
1000d116:	77a5      	strb	r5, [r4, #30]
1000d118:	77e5      	strb	r5, [r4, #31]
1000d11a:	8425      	strh	r5, [r4, #32]
1000d11c:	8465      	strh	r5, [r4, #34]	; 0x22
1000d11e:	4798      	blx	r3
1000d120:	1c23      	adds	r3, r4, #0
1000d122:	2207      	movs	r2, #7
1000d124:	3374      	adds	r3, #116	; 0x74
1000d126:	701a      	strb	r2, [r3, #0]
1000d128:	1c23      	adds	r3, r4, #0
1000d12a:	3204      	adds	r2, #4
1000d12c:	33aa      	adds	r3, #170	; 0xaa
1000d12e:	801a      	strh	r2, [r3, #0]
1000d130:	1c2b      	adds	r3, r5, #0
1000d132:	5d7a      	ldrb	r2, [r7, r5]
1000d134:	33ac      	adds	r3, #172	; 0xac
1000d136:	3501      	adds	r5, #1
1000d138:	54e2      	strb	r2, [r4, r3]
1000d13a:	2d0b      	cmp	r5, #11
1000d13c:	d1f8      	bne.n	1000d130 <at_ble_init+0x144>
1000d13e:	1c30      	adds	r0, r6, #0
1000d140:	b007      	add	sp, #28
1000d142:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d144:	100122e4 	.word	0x100122e4
1000d148:	1001025f 	.word	0x1001025f
1000d14c:	10014724 	.word	0x10014724
1000d150:	10013a80 	.word	0x10013a80
1000d154:	100139e0 	.word	0x100139e0
1000d158:	1001243c 	.word	0x1001243c
1000d15c:	1000ed99 	.word	0x1000ed99
1000d160:	1000d27d 	.word	0x1000d27d
1000d164:	1000d2f9 	.word	0x1000d2f9
1000d168:	1000d519 	.word	0x1000d519
1000d16c:	1000d335 	.word	0x1000d335
1000d170:	1000a7cd 	.word	0x1000a7cd
1000d174:	1000d819 	.word	0x1000d819
1000d178:	1000aa11 	.word	0x1000aa11
1000d17c:	1000d8c1 	.word	0x1000d8c1
1000d180:	1000c6d9 	.word	0x1000c6d9
1000d184:	1000c795 	.word	0x1000c795
1000d188:	1000e489 	.word	0x1000e489
1000d18c:	10014726 	.word	0x10014726
1000d190:	100147b6 	.word	0x100147b6
1000d194:	00003a98 	.word	0x00003a98
1000d198:	100147c1 	.word	0x100147c1
1000d19c:	1000cf5d 	.word	0x1000cf5d

1000d1a0 <at_ble_addr_set>:
1000d1a0:	b538      	push	{r3, r4, r5, lr}
1000d1a2:	1c45      	adds	r5, r0, #1
1000d1a4:	1c03      	adds	r3, r0, #0
1000d1a6:	20cf      	movs	r0, #207	; 0xcf
1000d1a8:	2d00      	cmp	r5, #0
1000d1aa:	d018      	beq.n	1000d1de <at_ble_addr_set+0x3e>
1000d1ac:	781a      	ldrb	r2, [r3, #0]
1000d1ae:	2a03      	cmp	r2, #3
1000d1b0:	d815      	bhi.n	1000d1de <at_ble_addr_set+0x3e>
1000d1b2:	2a01      	cmp	r2, #1
1000d1b4:	d102      	bne.n	1000d1bc <at_ble_addr_set+0x1c>
1000d1b6:	785a      	ldrb	r2, [r3, #1]
1000d1b8:	2a00      	cmp	r2, #0
1000d1ba:	d010      	beq.n	1000d1de <at_ble_addr_set+0x3e>
1000d1bc:	1c1c      	adds	r4, r3, #0
1000d1be:	1c29      	adds	r1, r5, #0
1000d1c0:	2206      	movs	r2, #6
1000d1c2:	4b07      	ldr	r3, [pc, #28]	; (1000d1e0 <at_ble_addr_set+0x40>)
1000d1c4:	4807      	ldr	r0, [pc, #28]	; (1000d1e4 <at_ble_addr_set+0x44>)
1000d1c6:	4798      	blx	r3
1000d1c8:	7823      	ldrb	r3, [r4, #0]
1000d1ca:	4807      	ldr	r0, [pc, #28]	; (1000d1e8 <at_ble_addr_set+0x48>)
1000d1cc:	7103      	strb	r3, [r0, #4]
1000d1ce:	4b07      	ldr	r3, [pc, #28]	; (1000d1ec <at_ble_addr_set+0x4c>)
1000d1d0:	4798      	blx	r3
1000d1d2:	7823      	ldrb	r3, [r4, #0]
1000d1d4:	2b00      	cmp	r3, #0
1000d1d6:	d102      	bne.n	1000d1de <at_ble_addr_set+0x3e>
1000d1d8:	1c28      	adds	r0, r5, #0
1000d1da:	4b05      	ldr	r3, [pc, #20]	; (1000d1f0 <at_ble_addr_set+0x50>)
1000d1dc:	4798      	blx	r3
1000d1de:	bd38      	pop	{r3, r4, r5, pc}
1000d1e0:	1001025f 	.word	0x1001025f
1000d1e4:	100147bb 	.word	0x100147bb
1000d1e8:	100147b6 	.word	0x100147b6
1000d1ec:	1000cf5d 	.word	0x1000cf5d
1000d1f0:	1000d945 	.word	0x1000d945

1000d1f4 <at_ble_scan_stop>:
1000d1f4:	b510      	push	{r4, lr}
1000d1f6:	4b05      	ldr	r3, [pc, #20]	; (1000d20c <at_ble_scan_stop+0x18>)
1000d1f8:	4798      	blx	r3
1000d1fa:	1e04      	subs	r4, r0, #0
1000d1fc:	d103      	bne.n	1000d206 <at_ble_scan_stop+0x12>
1000d1fe:	20d1      	movs	r0, #209	; 0xd1
1000d200:	4b03      	ldr	r3, [pc, #12]	; (1000d210 <at_ble_scan_stop+0x1c>)
1000d202:	0100      	lsls	r0, r0, #4
1000d204:	4798      	blx	r3
1000d206:	1c20      	adds	r0, r4, #0
1000d208:	bd10      	pop	{r4, pc}
1000d20a:	46c0      	nop			; (mov r8, r8)
1000d20c:	1000e6e1 	.word	0x1000e6e1
1000d210:	1000ce6d 	.word	0x1000ce6d

1000d214 <at_ble_disconnect>:
1000d214:	b538      	push	{r3, r4, r5, lr}
1000d216:	1c04      	adds	r4, r0, #0
1000d218:	4b04      	ldr	r3, [pc, #16]	; (1000d22c <at_ble_disconnect+0x18>)
1000d21a:	1c08      	adds	r0, r1, #0
1000d21c:	1c21      	adds	r1, r4, #0
1000d21e:	4798      	blx	r3
1000d220:	1c05      	adds	r5, r0, #0
1000d222:	4b03      	ldr	r3, [pc, #12]	; (1000d230 <at_ble_disconnect+0x1c>)
1000d224:	1c20      	adds	r0, r4, #0
1000d226:	4798      	blx	r3
1000d228:	1c28      	adds	r0, r5, #0
1000d22a:	bd38      	pop	{r3, r4, r5, pc}
1000d22c:	1000dd59 	.word	0x1000dd59
1000d230:	1000ceb1 	.word	0x1000ceb1

1000d234 <at_ble_conn_update_reply>:
1000d234:	b510      	push	{r4, lr}
1000d236:	4c01      	ldr	r4, [pc, #4]	; (1000d23c <at_ble_conn_update_reply+0x8>)
1000d238:	47a0      	blx	r4
1000d23a:	bd10      	pop	{r4, pc}
1000d23c:	1000e249 	.word	0x1000e249

1000d240 <at_ble_random_address_resolve>:
1000d240:	b510      	push	{r4, lr}
1000d242:	23cf      	movs	r3, #207	; 0xcf
1000d244:	2800      	cmp	r0, #0
1000d246:	d00a      	beq.n	1000d25e <at_ble_random_address_resolve+0x1e>
1000d248:	2900      	cmp	r1, #0
1000d24a:	d008      	beq.n	1000d25e <at_ble_random_address_resolve+0x1e>
1000d24c:	2a00      	cmp	r2, #0
1000d24e:	d006      	beq.n	1000d25e <at_ble_random_address_resolve+0x1e>
1000d250:	780c      	ldrb	r4, [r1, #0]
1000d252:	2c02      	cmp	r4, #2
1000d254:	d103      	bne.n	1000d25e <at_ble_random_address_resolve+0x1e>
1000d256:	4b03      	ldr	r3, [pc, #12]	; (1000d264 <at_ble_random_address_resolve+0x24>)
1000d258:	3101      	adds	r1, #1
1000d25a:	4798      	blx	r3
1000d25c:	2300      	movs	r3, #0
1000d25e:	1c18      	adds	r0, r3, #0
1000d260:	bd10      	pop	{r4, pc}
1000d262:	46c0      	nop			; (mov r8, r8)
1000d264:	1000e93d 	.word	0x1000e93d

1000d268 <at_ble_uuid_len2type>:
1000d268:	1e83      	subs	r3, r0, #2
1000d26a:	b2db      	uxtb	r3, r3
1000d26c:	2003      	movs	r0, #3
1000d26e:	2b0e      	cmp	r3, #14
1000d270:	d801      	bhi.n	1000d276 <at_ble_uuid_len2type+0xe>
1000d272:	4a01      	ldr	r2, [pc, #4]	; (1000d278 <at_ble_uuid_len2type+0x10>)
1000d274:	5cd0      	ldrb	r0, [r2, r3]
1000d276:	4770      	bx	lr
1000d278:	100122ef 	.word	0x100122ef

1000d27c <init_gatt_client_module>:
1000d27c:	2200      	movs	r2, #0
1000d27e:	4b01      	ldr	r3, [pc, #4]	; (1000d284 <init_gatt_client_module+0x8>)
1000d280:	801a      	strh	r2, [r3, #0]
1000d282:	4770      	bx	lr
1000d284:	100139d8 	.word	0x100139d8

1000d288 <db_searchATT>:
1000d288:	b570      	push	{r4, r5, r6, lr}
1000d28a:	1c05      	adds	r5, r0, #0
1000d28c:	2400      	movs	r4, #0
1000d28e:	4b0c      	ldr	r3, [pc, #48]	; (1000d2c0 <db_searchATT+0x38>)
1000d290:	6819      	ldr	r1, [r3, #0]
1000d292:	4b0c      	ldr	r3, [pc, #48]	; (1000d2c4 <db_searchATT+0x3c>)
1000d294:	681e      	ldr	r6, [r3, #0]
1000d296:	428c      	cmp	r4, r1
1000d298:	dc10      	bgt.n	1000d2bc <db_searchATT+0x34>
1000d29a:	200c      	movs	r0, #12
1000d29c:	1863      	adds	r3, r4, r1
1000d29e:	0fda      	lsrs	r2, r3, #31
1000d2a0:	18d3      	adds	r3, r2, r3
1000d2a2:	1c02      	adds	r2, r0, #0
1000d2a4:	105b      	asrs	r3, r3, #1
1000d2a6:	435a      	muls	r2, r3
1000d2a8:	18b0      	adds	r0, r6, r2
1000d2aa:	8802      	ldrh	r2, [r0, #0]
1000d2ac:	42aa      	cmp	r2, r5
1000d2ae:	d201      	bcs.n	1000d2b4 <db_searchATT+0x2c>
1000d2b0:	1e59      	subs	r1, r3, #1
1000d2b2:	e7f0      	b.n	1000d296 <db_searchATT+0xe>
1000d2b4:	42aa      	cmp	r2, r5
1000d2b6:	d902      	bls.n	1000d2be <db_searchATT+0x36>
1000d2b8:	1c5c      	adds	r4, r3, #1
1000d2ba:	e7ec      	b.n	1000d296 <db_searchATT+0xe>
1000d2bc:	2000      	movs	r0, #0
1000d2be:	bd70      	pop	{r4, r5, r6, pc}
1000d2c0:	100139ec 	.word	0x100139ec
1000d2c4:	100139e4 	.word	0x100139e4

1000d2c8 <at_ble_read_authorize_reply.part.1>:
1000d2c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000d2ca:	4b09      	ldr	r3, [pc, #36]	; (1000d2f0 <at_ble_read_authorize_reply.part.1+0x28>)
1000d2cc:	1c05      	adds	r5, r0, #0
1000d2ce:	1c08      	adds	r0, r1, #0
1000d2d0:	1c0c      	adds	r4, r1, #0
1000d2d2:	4798      	blx	r3
1000d2d4:	2800      	cmp	r0, #0
1000d2d6:	d009      	beq.n	1000d2ec <at_ble_read_authorize_reply.part.1+0x24>
1000d2d8:	6882      	ldr	r2, [r0, #8]
1000d2da:	2a00      	cmp	r2, #0
1000d2dc:	d006      	beq.n	1000d2ec <at_ble_read_authorize_reply.part.1+0x24>
1000d2de:	8883      	ldrh	r3, [r0, #4]
1000d2e0:	1c29      	adds	r1, r5, #0
1000d2e2:	9200      	str	r2, [sp, #0]
1000d2e4:	1c20      	adds	r0, r4, #0
1000d2e6:	2200      	movs	r2, #0
1000d2e8:	4c02      	ldr	r4, [pc, #8]	; (1000d2f4 <at_ble_read_authorize_reply.part.1+0x2c>)
1000d2ea:	47a0      	blx	r4
1000d2ec:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000d2ee:	46c0      	nop			; (mov r8, r8)
1000d2f0:	1000d289 	.word	0x1000d289
1000d2f4:	1000ea39 	.word	0x1000ea39

1000d2f8 <initi_gatt_server_module>:
1000d2f8:	2300      	movs	r3, #0
1000d2fa:	4a07      	ldr	r2, [pc, #28]	; (1000d318 <initi_gatt_server_module+0x20>)
1000d2fc:	7013      	strb	r3, [r2, #0]
1000d2fe:	4a07      	ldr	r2, [pc, #28]	; (1000d31c <initi_gatt_server_module+0x24>)
1000d300:	6013      	str	r3, [r2, #0]
1000d302:	4a07      	ldr	r2, [pc, #28]	; (1000d320 <initi_gatt_server_module+0x28>)
1000d304:	6013      	str	r3, [r2, #0]
1000d306:	4a07      	ldr	r2, [pc, #28]	; (1000d324 <initi_gatt_server_module+0x2c>)
1000d308:	6013      	str	r3, [r2, #0]
1000d30a:	4a07      	ldr	r2, [pc, #28]	; (1000d328 <initi_gatt_server_module+0x30>)
1000d30c:	6013      	str	r3, [r2, #0]
1000d30e:	4a07      	ldr	r2, [pc, #28]	; (1000d32c <initi_gatt_server_module+0x34>)
1000d310:	6013      	str	r3, [r2, #0]
1000d312:	4a07      	ldr	r2, [pc, #28]	; (1000d330 <initi_gatt_server_module+0x38>)
1000d314:	6013      	str	r3, [r2, #0]
1000d316:	4770      	bx	lr
1000d318:	100139e0 	.word	0x100139e0
1000d31c:	100139f0 	.word	0x100139f0
1000d320:	100139ec 	.word	0x100139ec
1000d324:	100139dc 	.word	0x100139dc
1000d328:	100139e8 	.word	0x100139e8
1000d32c:	100139e4 	.word	0x100139e4
1000d330:	100139f4 	.word	0x100139f4

1000d334 <db_init>:
1000d334:	4b0a      	ldr	r3, [pc, #40]	; (1000d360 <db_init+0x2c>)
1000d336:	4a0b      	ldr	r2, [pc, #44]	; (1000d364 <db_init+0x30>)
1000d338:	6018      	str	r0, [r3, #0]
1000d33a:	084b      	lsrs	r3, r1, #1
1000d33c:	6013      	str	r3, [r2, #0]
1000d33e:	4a0a      	ldr	r2, [pc, #40]	; (1000d368 <db_init+0x34>)
1000d340:	18c3      	adds	r3, r0, r3
1000d342:	6013      	str	r3, [r2, #0]
1000d344:	4a09      	ldr	r2, [pc, #36]	; (1000d36c <db_init+0x38>)
1000d346:	1841      	adds	r1, r0, r1
1000d348:	6013      	str	r3, [r2, #0]
1000d34a:	2303      	movs	r3, #3
1000d34c:	2200      	movs	r2, #0
1000d34e:	3103      	adds	r1, #3
1000d350:	4399      	bics	r1, r3
1000d352:	4b07      	ldr	r3, [pc, #28]	; (1000d370 <db_init+0x3c>)
1000d354:	3904      	subs	r1, #4
1000d356:	6019      	str	r1, [r3, #0]
1000d358:	4b06      	ldr	r3, [pc, #24]	; (1000d374 <db_init+0x40>)
1000d35a:	601a      	str	r2, [r3, #0]
1000d35c:	4770      	bx	lr
1000d35e:	46c0      	nop			; (mov r8, r8)
1000d360:	100139f4 	.word	0x100139f4
1000d364:	100139f0 	.word	0x100139f0
1000d368:	100139dc 	.word	0x100139dc
1000d36c:	100139e8 	.word	0x100139e8
1000d370:	100139e4 	.word	0x100139e4
1000d374:	100139ec 	.word	0x100139ec

1000d378 <at_ble_characteristic_value_set>:
1000d378:	b570      	push	{r4, r5, r6, lr}
1000d37a:	4b0b      	ldr	r3, [pc, #44]	; (1000d3a8 <at_ble_characteristic_value_set+0x30>)
1000d37c:	1c06      	adds	r6, r0, #0
1000d37e:	1c0c      	adds	r4, r1, #0
1000d380:	1c15      	adds	r5, r2, #0
1000d382:	4798      	blx	r3
1000d384:	2800      	cmp	r0, #0
1000d386:	d008      	beq.n	1000d39a <at_ble_characteristic_value_set+0x22>
1000d388:	6880      	ldr	r0, [r0, #8]
1000d38a:	2800      	cmp	r0, #0
1000d38c:	d005      	beq.n	1000d39a <at_ble_characteristic_value_set+0x22>
1000d38e:	1c21      	adds	r1, r4, #0
1000d390:	1c2a      	adds	r2, r5, #0
1000d392:	4b06      	ldr	r3, [pc, #24]	; (1000d3ac <at_ble_characteristic_value_set+0x34>)
1000d394:	4798      	blx	r3
1000d396:	2000      	movs	r0, #0
1000d398:	e004      	b.n	1000d3a4 <at_ble_characteristic_value_set+0x2c>
1000d39a:	1c30      	adds	r0, r6, #0
1000d39c:	1c29      	adds	r1, r5, #0
1000d39e:	1c22      	adds	r2, r4, #0
1000d3a0:	4b03      	ldr	r3, [pc, #12]	; (1000d3b0 <at_ble_characteristic_value_set+0x38>)
1000d3a2:	4798      	blx	r3
1000d3a4:	bd70      	pop	{r4, r5, r6, pc}
1000d3a6:	46c0      	nop			; (mov r8, r8)
1000d3a8:	1000d289 	.word	0x1000d289
1000d3ac:	1001025f 	.word	0x1001025f
1000d3b0:	1000edad 	.word	0x1000edad

1000d3b4 <at_ble_characteristic_value_get>:
1000d3b4:	b570      	push	{r4, r5, r6, lr}
1000d3b6:	4b0c      	ldr	r3, [pc, #48]	; (1000d3e8 <at_ble_characteristic_value_get+0x34>)
1000d3b8:	1c06      	adds	r6, r0, #0
1000d3ba:	1c0c      	adds	r4, r1, #0
1000d3bc:	1c15      	adds	r5, r2, #0
1000d3be:	4798      	blx	r3
1000d3c0:	2800      	cmp	r0, #0
1000d3c2:	d00b      	beq.n	1000d3dc <at_ble_characteristic_value_get+0x28>
1000d3c4:	6883      	ldr	r3, [r0, #8]
1000d3c6:	2b00      	cmp	r3, #0
1000d3c8:	d008      	beq.n	1000d3dc <at_ble_characteristic_value_get+0x28>
1000d3ca:	8883      	ldrh	r3, [r0, #4]
1000d3cc:	802b      	strh	r3, [r5, #0]
1000d3ce:	8882      	ldrh	r2, [r0, #4]
1000d3d0:	6881      	ldr	r1, [r0, #8]
1000d3d2:	4b06      	ldr	r3, [pc, #24]	; (1000d3ec <at_ble_characteristic_value_get+0x38>)
1000d3d4:	1c20      	adds	r0, r4, #0
1000d3d6:	4798      	blx	r3
1000d3d8:	2000      	movs	r0, #0
1000d3da:	e004      	b.n	1000d3e6 <at_ble_characteristic_value_get+0x32>
1000d3dc:	1c30      	adds	r0, r6, #0
1000d3de:	1c29      	adds	r1, r5, #0
1000d3e0:	1c22      	adds	r2, r4, #0
1000d3e2:	4b03      	ldr	r3, [pc, #12]	; (1000d3f0 <at_ble_characteristic_value_get+0x3c>)
1000d3e4:	4798      	blx	r3
1000d3e6:	bd70      	pop	{r4, r5, r6, pc}
1000d3e8:	1000d289 	.word	0x1000d289
1000d3ec:	1001025f 	.word	0x1001025f
1000d3f0:	1000ee39 	.word	0x1000ee39

1000d3f4 <at_ble_write_authorize_reply>:
1000d3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d3f6:	b085      	sub	sp, #20
1000d3f8:	1c04      	adds	r4, r0, #0
1000d3fa:	9101      	str	r1, [sp, #4]
1000d3fc:	2900      	cmp	r1, #0
1000d3fe:	d128      	bne.n	1000d452 <at_ble_write_authorize_reply+0x5e>
1000d400:	8843      	ldrh	r3, [r0, #2]
1000d402:	1c27      	adds	r7, r4, #0
1000d404:	9300      	str	r3, [sp, #0]
1000d406:	1c18      	adds	r0, r3, #0
1000d408:	4b16      	ldr	r3, [pc, #88]	; (1000d464 <at_ble_write_authorize_reply+0x70>)
1000d40a:	4798      	blx	r3
1000d40c:	3708      	adds	r7, #8
1000d40e:	2800      	cmp	r0, #0
1000d410:	d009      	beq.n	1000d426 <at_ble_write_authorize_reply+0x32>
1000d412:	6880      	ldr	r0, [r0, #8]
1000d414:	2800      	cmp	r0, #0
1000d416:	d006      	beq.n	1000d426 <at_ble_write_authorize_reply+0x32>
1000d418:	88a3      	ldrh	r3, [r4, #4]
1000d41a:	88e2      	ldrh	r2, [r4, #6]
1000d41c:	18c0      	adds	r0, r0, r3
1000d41e:	1c39      	adds	r1, r7, #0
1000d420:	4b11      	ldr	r3, [pc, #68]	; (1000d468 <at_ble_write_authorize_reply+0x74>)
1000d422:	4798      	blx	r3
1000d424:	e015      	b.n	1000d452 <at_ble_write_authorize_reply+0x5e>
1000d426:	ab02      	add	r3, sp, #8
1000d428:	1d9e      	adds	r6, r3, #6
1000d42a:	2300      	movs	r3, #0
1000d42c:	4d0f      	ldr	r5, [pc, #60]	; (1000d46c <at_ble_write_authorize_reply+0x78>)
1000d42e:	8033      	strh	r3, [r6, #0]
1000d430:	6829      	ldr	r1, [r5, #0]
1000d432:	1c32      	adds	r2, r6, #0
1000d434:	4b0e      	ldr	r3, [pc, #56]	; (1000d470 <at_ble_write_authorize_reply+0x7c>)
1000d436:	9800      	ldr	r0, [sp, #0]
1000d438:	4798      	blx	r3
1000d43a:	682b      	ldr	r3, [r5, #0]
1000d43c:	88a0      	ldrh	r0, [r4, #4]
1000d43e:	88e2      	ldrh	r2, [r4, #6]
1000d440:	1818      	adds	r0, r3, r0
1000d442:	1c39      	adds	r1, r7, #0
1000d444:	4b08      	ldr	r3, [pc, #32]	; (1000d468 <at_ble_write_authorize_reply+0x74>)
1000d446:	4798      	blx	r3
1000d448:	8860      	ldrh	r0, [r4, #2]
1000d44a:	8832      	ldrh	r2, [r6, #0]
1000d44c:	6829      	ldr	r1, [r5, #0]
1000d44e:	4b09      	ldr	r3, [pc, #36]	; (1000d474 <at_ble_write_authorize_reply+0x80>)
1000d450:	4798      	blx	r3
1000d452:	8860      	ldrh	r0, [r4, #2]
1000d454:	8821      	ldrh	r1, [r4, #0]
1000d456:	9a01      	ldr	r2, [sp, #4]
1000d458:	4b07      	ldr	r3, [pc, #28]	; (1000d478 <at_ble_write_authorize_reply+0x84>)
1000d45a:	4798      	blx	r3
1000d45c:	2000      	movs	r0, #0
1000d45e:	b005      	add	sp, #20
1000d460:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d462:	46c0      	nop			; (mov r8, r8)
1000d464:	1000d289 	.word	0x1000d289
1000d468:	1001025f 	.word	0x1001025f
1000d46c:	10012440 	.word	0x10012440
1000d470:	1000d3b5 	.word	0x1000d3b5
1000d474:	1000d379 	.word	0x1000d379
1000d478:	1000eaa5 	.word	0x1000eaa5

1000d47c <gatts_handle_read_req>:
1000d47c:	b538      	push	{r3, r4, r5, lr}
1000d47e:	1c0c      	adds	r4, r1, #0
1000d480:	4b07      	ldr	r3, [pc, #28]	; (1000d4a0 <gatts_handle_read_req+0x24>)
1000d482:	4798      	blx	r3
1000d484:	8865      	ldrh	r5, [r4, #2]
1000d486:	4b07      	ldr	r3, [pc, #28]	; (1000d4a4 <gatts_handle_read_req+0x28>)
1000d488:	1c28      	adds	r0, r5, #0
1000d48a:	4798      	blx	r3
1000d48c:	7883      	ldrb	r3, [r0, #2]
1000d48e:	2026      	movs	r0, #38	; 0x26
1000d490:	07db      	lsls	r3, r3, #31
1000d492:	d404      	bmi.n	1000d49e <gatts_handle_read_req+0x22>
1000d494:	8820      	ldrh	r0, [r4, #0]
1000d496:	1c29      	adds	r1, r5, #0
1000d498:	4b03      	ldr	r3, [pc, #12]	; (1000d4a8 <gatts_handle_read_req+0x2c>)
1000d49a:	4798      	blx	r3
1000d49c:	203b      	movs	r0, #59	; 0x3b
1000d49e:	bd38      	pop	{r3, r4, r5, pc}
1000d4a0:	1000e9e9 	.word	0x1000e9e9
1000d4a4:	1000d289 	.word	0x1000d289
1000d4a8:	1000d2c9 	.word	0x1000d2c9

1000d4ac <gatts_handle_att_info_req>:
1000d4ac:	b538      	push	{r3, r4, r5, lr}
1000d4ae:	1c0d      	adds	r5, r1, #0
1000d4b0:	4b0a      	ldr	r3, [pc, #40]	; (1000d4dc <gatts_handle_att_info_req+0x30>)
1000d4b2:	1c14      	adds	r4, r2, #0
1000d4b4:	4798      	blx	r3
1000d4b6:	882d      	ldrh	r5, [r5, #0]
1000d4b8:	4b09      	ldr	r3, [pc, #36]	; (1000d4e0 <gatts_handle_att_info_req+0x34>)
1000d4ba:	1c28      	adds	r0, r5, #0
1000d4bc:	4798      	blx	r3
1000d4be:	0a22      	lsrs	r2, r4, #8
1000d4c0:	1c03      	adds	r3, r0, #0
1000d4c2:	4c08      	ldr	r4, [pc, #32]	; (1000d4e4 <gatts_handle_att_info_req+0x38>)
1000d4c4:	b291      	uxth	r1, r2
1000d4c6:	2800      	cmp	r0, #0
1000d4c8:	d003      	beq.n	1000d4d2 <gatts_handle_att_info_req+0x26>
1000d4ca:	8882      	ldrh	r2, [r0, #4]
1000d4cc:	2300      	movs	r3, #0
1000d4ce:	1c28      	adds	r0, r5, #0
1000d4d0:	e001      	b.n	1000d4d6 <gatts_handle_att_info_req+0x2a>
1000d4d2:	1c28      	adds	r0, r5, #0
1000d4d4:	2201      	movs	r2, #1
1000d4d6:	47a0      	blx	r4
1000d4d8:	203b      	movs	r0, #59	; 0x3b
1000d4da:	bd38      	pop	{r3, r4, r5, pc}
1000d4dc:	1000ea2d 	.word	0x1000ea2d
1000d4e0:	1000d289 	.word	0x1000d289
1000d4e4:	1000eae9 	.word	0x1000eae9

1000d4e8 <gatts_handle_write_req>:
1000d4e8:	b510      	push	{r4, lr}
1000d4ea:	1c14      	adds	r4, r2, #0
1000d4ec:	4b07      	ldr	r3, [pc, #28]	; (1000d50c <gatts_handle_write_req+0x24>)
1000d4ee:	4798      	blx	r3
1000d4f0:	4b07      	ldr	r3, [pc, #28]	; (1000d510 <gatts_handle_write_req+0x28>)
1000d4f2:	8860      	ldrh	r0, [r4, #2]
1000d4f4:	4798      	blx	r3
1000d4f6:	2302      	movs	r3, #2
1000d4f8:	7881      	ldrb	r1, [r0, #2]
1000d4fa:	2022      	movs	r0, #34	; 0x22
1000d4fc:	4019      	ands	r1, r3
1000d4fe:	d103      	bne.n	1000d508 <gatts_handle_write_req+0x20>
1000d500:	1c20      	adds	r0, r4, #0
1000d502:	4b04      	ldr	r3, [pc, #16]	; (1000d514 <gatts_handle_write_req+0x2c>)
1000d504:	4798      	blx	r3
1000d506:	201f      	movs	r0, #31
1000d508:	bd10      	pop	{r4, pc}
1000d50a:	46c0      	nop			; (mov r8, r8)
1000d50c:	1000e9f5 	.word	0x1000e9f5
1000d510:	1000d289 	.word	0x1000d289
1000d514:	1000d3f5 	.word	0x1000d3f5

1000d518 <init_l2cc_task_module>:
1000d518:	220a      	movs	r2, #10
1000d51a:	4b01      	ldr	r3, [pc, #4]	; (1000d520 <init_l2cc_task_module+0x8>)
1000d51c:	701a      	strb	r2, [r3, #0]
1000d51e:	4770      	bx	lr
1000d520:	1001243c 	.word	0x1001243c

1000d524 <l2cc_data_send_rsp_handler>:
1000d524:	b510      	push	{r4, lr}
1000d526:	7802      	ldrb	r2, [r0, #0]
1000d528:	700a      	strb	r2, [r1, #0]
1000d52a:	7883      	ldrb	r3, [r0, #2]
1000d52c:	7844      	ldrb	r4, [r0, #1]
1000d52e:	021b      	lsls	r3, r3, #8
1000d530:	4323      	orrs	r3, r4
1000d532:	804b      	strh	r3, [r1, #2]
1000d534:	7903      	ldrb	r3, [r0, #4]
1000d536:	78c0      	ldrb	r0, [r0, #3]
1000d538:	021b      	lsls	r3, r3, #8
1000d53a:	4303      	orrs	r3, r0
1000d53c:	808b      	strh	r3, [r1, #4]
1000d53e:	2a00      	cmp	r2, #0
1000d540:	d103      	bne.n	1000d54a <l2cc_data_send_rsp_handler+0x26>
1000d542:	4a02      	ldr	r2, [pc, #8]	; (1000d54c <l2cc_data_send_rsp_handler+0x28>)
1000d544:	7813      	ldrb	r3, [r2, #0]
1000d546:	3301      	adds	r3, #1
1000d548:	7013      	strb	r3, [r2, #0]
1000d54a:	bd10      	pop	{r4, pc}
1000d54c:	1001243c 	.word	0x1001243c

1000d550 <l2cc_data_received_handler>:
1000d550:	b508      	push	{r3, lr}
1000d552:	1c03      	adds	r3, r0, #0
1000d554:	7842      	ldrb	r2, [r0, #1]
1000d556:	7800      	ldrb	r0, [r0, #0]
1000d558:	0212      	lsls	r2, r2, #8
1000d55a:	4302      	orrs	r2, r0
1000d55c:	800a      	strh	r2, [r1, #0]
1000d55e:	78da      	ldrb	r2, [r3, #3]
1000d560:	7898      	ldrb	r0, [r3, #2]
1000d562:	0212      	lsls	r2, r2, #8
1000d564:	4302      	orrs	r2, r0
1000d566:	804a      	strh	r2, [r1, #2]
1000d568:	795a      	ldrb	r2, [r3, #5]
1000d56a:	7918      	ldrb	r0, [r3, #4]
1000d56c:	0212      	lsls	r2, r2, #8
1000d56e:	4302      	orrs	r2, r0
1000d570:	808a      	strh	r2, [r1, #4]
1000d572:	1d88      	adds	r0, r1, #6
1000d574:	1d99      	adds	r1, r3, #6
1000d576:	4b01      	ldr	r3, [pc, #4]	; (1000d57c <l2cc_data_received_handler+0x2c>)
1000d578:	4798      	blx	r3
1000d57a:	bd08      	pop	{r3, pc}
1000d57c:	1001025f 	.word	0x1001025f

1000d580 <at_ble_authenticate>:
1000d580:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d582:	1c0c      	adds	r4, r1, #0
1000d584:	211f      	movs	r1, #31
1000d586:	b08b      	sub	sp, #44	; 0x2c
1000d588:	9307      	str	r3, [sp, #28]
1000d58a:	ab02      	add	r3, sp, #8
1000d58c:	18c9      	adds	r1, r1, r3
1000d58e:	230f      	movs	r3, #15
1000d590:	700b      	strb	r3, [r1, #0]
1000d592:	4b40      	ldr	r3, [pc, #256]	; (1000d694 <at_ble_authenticate+0x114>)
1000d594:	1c05      	adds	r5, r0, #0
1000d596:	1c16      	adds	r6, r2, #0
1000d598:	4798      	blx	r3
1000d59a:	1c07      	adds	r7, r0, #0
1000d59c:	2001      	movs	r0, #1
1000d59e:	2f07      	cmp	r7, #7
1000d5a0:	d875      	bhi.n	1000d68e <at_ble_authenticate+0x10e>
1000d5a2:	2c00      	cmp	r4, #0
1000d5a4:	d113      	bne.n	1000d5ce <at_ble_authenticate+0x4e>
1000d5a6:	2312      	movs	r3, #18
1000d5a8:	435f      	muls	r7, r3
1000d5aa:	4b3b      	ldr	r3, [pc, #236]	; (1000d698 <at_ble_authenticate+0x118>)
1000d5ac:	5cfb      	ldrb	r3, [r7, r3]
1000d5ae:	4283      	cmp	r3, r0
1000d5b0:	d001      	beq.n	1000d5b6 <at_ble_authenticate+0x36>
1000d5b2:	20cf      	movs	r0, #207	; 0xcf
1000d5b4:	e06b      	b.n	1000d68e <at_ble_authenticate+0x10e>
1000d5b6:	9504      	str	r5, [sp, #16]
1000d5b8:	9400      	str	r4, [sp, #0]
1000d5ba:	9401      	str	r4, [sp, #4]
1000d5bc:	9402      	str	r4, [sp, #8]
1000d5be:	9403      	str	r4, [sp, #12]
1000d5c0:	1c20      	adds	r0, r4, #0
1000d5c2:	1c21      	adds	r1, r4, #0
1000d5c4:	1c22      	adds	r2, r4, #0
1000d5c6:	1c23      	adds	r3, r4, #0
1000d5c8:	4d34      	ldr	r5, [pc, #208]	; (1000d69c <at_ble_authenticate+0x11c>)
1000d5ca:	47a8      	blx	r5
1000d5cc:	e05e      	b.n	1000d68c <at_ble_authenticate+0x10c>
1000d5ce:	7922      	ldrb	r2, [r4, #4]
1000d5d0:	2a06      	cmp	r2, #6
1000d5d2:	d9ee      	bls.n	1000d5b2 <at_ble_authenticate+0x32>
1000d5d4:	7963      	ldrb	r3, [r4, #5]
1000d5d6:	2b10      	cmp	r3, #16
1000d5d8:	d8eb      	bhi.n	1000d5b2 <at_ble_authenticate+0x32>
1000d5da:	429a      	cmp	r2, r3
1000d5dc:	d8e9      	bhi.n	1000d5b2 <at_ble_authenticate+0x32>
1000d5de:	7a23      	ldrb	r3, [r4, #8]
1000d5e0:	2b04      	cmp	r3, #4
1000d5e2:	d8e6      	bhi.n	1000d5b2 <at_ble_authenticate+0x32>
1000d5e4:	79a3      	ldrb	r3, [r4, #6]
1000d5e6:	2b07      	cmp	r3, #7
1000d5e8:	d8e3      	bhi.n	1000d5b2 <at_ble_authenticate+0x32>
1000d5ea:	79e3      	ldrb	r3, [r4, #7]
1000d5ec:	2b07      	cmp	r3, #7
1000d5ee:	d8e0      	bhi.n	1000d5b2 <at_ble_authenticate+0x32>
1000d5f0:	78a3      	ldrb	r3, [r4, #2]
1000d5f2:	2b00      	cmp	r3, #0
1000d5f4:	d006      	beq.n	1000d604 <at_ble_authenticate+0x84>
1000d5f6:	2e00      	cmp	r6, #0
1000d5f8:	d0db      	beq.n	1000d5b2 <at_ble_authenticate+0x32>
1000d5fa:	4829      	ldr	r0, [pc, #164]	; (1000d6a0 <at_ble_authenticate+0x120>)
1000d5fc:	1c31      	adds	r1, r6, #0
1000d5fe:	221c      	movs	r2, #28
1000d600:	4b28      	ldr	r3, [pc, #160]	; (1000d6a4 <at_ble_authenticate+0x124>)
1000d602:	4798      	blx	r3
1000d604:	9b07      	ldr	r3, [sp, #28]
1000d606:	2b00      	cmp	r3, #0
1000d608:	d005      	beq.n	1000d616 <at_ble_authenticate+0x96>
1000d60a:	4827      	ldr	r0, [pc, #156]	; (1000d6a8 <at_ble_authenticate+0x128>)
1000d60c:	1c19      	adds	r1, r3, #0
1000d60e:	309a      	adds	r0, #154	; 0x9a
1000d610:	2210      	movs	r2, #16
1000d612:	4b24      	ldr	r3, [pc, #144]	; (1000d6a4 <at_ble_authenticate+0x124>)
1000d614:	4798      	blx	r3
1000d616:	7863      	ldrb	r3, [r4, #1]
1000d618:	78a2      	ldrb	r2, [r4, #2]
1000d61a:	009b      	lsls	r3, r3, #2
1000d61c:	4313      	orrs	r3, r2
1000d61e:	2212      	movs	r2, #18
1000d620:	4357      	muls	r7, r2
1000d622:	4a1d      	ldr	r2, [pc, #116]	; (1000d698 <at_ble_authenticate+0x118>)
1000d624:	b2db      	uxtb	r3, r3
1000d626:	5cba      	ldrb	r2, [r7, r2]
1000d628:	2a00      	cmp	r2, #0
1000d62a:	d116      	bne.n	1000d65a <at_ble_authenticate+0xda>
1000d62c:	79a0      	ldrb	r0, [r4, #6]
1000d62e:	0742      	lsls	r2, r0, #29
1000d630:	d502      	bpl.n	1000d638 <at_ble_authenticate+0xb8>
1000d632:	9a07      	ldr	r2, [sp, #28]
1000d634:	2a00      	cmp	r2, #0
1000d636:	d0bc      	beq.n	1000d5b2 <at_ble_authenticate+0x32>
1000d638:	07c2      	lsls	r2, r0, #31
1000d63a:	d501      	bpl.n	1000d640 <at_ble_authenticate+0xc0>
1000d63c:	2e00      	cmp	r6, #0
1000d63e:	d0b8      	beq.n	1000d5b2 <at_ble_authenticate+0x32>
1000d640:	7966      	ldrb	r6, [r4, #5]
1000d642:	7821      	ldrb	r1, [r4, #0]
1000d644:	78e2      	ldrb	r2, [r4, #3]
1000d646:	9600      	str	r6, [sp, #0]
1000d648:	9001      	str	r0, [sp, #4]
1000d64a:	79e0      	ldrb	r0, [r4, #7]
1000d64c:	9002      	str	r0, [sp, #8]
1000d64e:	7a20      	ldrb	r0, [r4, #8]
1000d650:	4c16      	ldr	r4, [pc, #88]	; (1000d6ac <at_ble_authenticate+0x12c>)
1000d652:	9003      	str	r0, [sp, #12]
1000d654:	1c28      	adds	r0, r5, #0
1000d656:	47a0      	blx	r4
1000d658:	e018      	b.n	1000d68c <at_ble_authenticate+0x10c>
1000d65a:	2a01      	cmp	r2, #1
1000d65c:	d1a9      	bne.n	1000d5b2 <at_ble_authenticate+0x32>
1000d65e:	79e0      	ldrb	r0, [r4, #7]
1000d660:	0742      	lsls	r2, r0, #29
1000d662:	d502      	bpl.n	1000d66a <at_ble_authenticate+0xea>
1000d664:	9a07      	ldr	r2, [sp, #28]
1000d666:	2a00      	cmp	r2, #0
1000d668:	d0a3      	beq.n	1000d5b2 <at_ble_authenticate+0x32>
1000d66a:	07c2      	lsls	r2, r0, #31
1000d66c:	d501      	bpl.n	1000d672 <at_ble_authenticate+0xf2>
1000d66e:	2e00      	cmp	r6, #0
1000d670:	d09f      	beq.n	1000d5b2 <at_ble_authenticate+0x32>
1000d672:	7966      	ldrb	r6, [r4, #5]
1000d674:	7821      	ldrb	r1, [r4, #0]
1000d676:	78e2      	ldrb	r2, [r4, #3]
1000d678:	9600      	str	r6, [sp, #0]
1000d67a:	79a6      	ldrb	r6, [r4, #6]
1000d67c:	9002      	str	r0, [sp, #8]
1000d67e:	9601      	str	r6, [sp, #4]
1000d680:	7a20      	ldrb	r0, [r4, #8]
1000d682:	9504      	str	r5, [sp, #16]
1000d684:	9003      	str	r0, [sp, #12]
1000d686:	4c05      	ldr	r4, [pc, #20]	; (1000d69c <at_ble_authenticate+0x11c>)
1000d688:	2001      	movs	r0, #1
1000d68a:	47a0      	blx	r4
1000d68c:	2000      	movs	r0, #0
1000d68e:	b00b      	add	sp, #44	; 0x2c
1000d690:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d692:	46c0      	nop			; (mov r8, r8)
1000d694:	1000da81 	.word	0x1000da81
1000d698:	10014726 	.word	0x10014726
1000d69c:	1000dff1 	.word	0x1000dff1
1000d6a0:	10014834 	.word	0x10014834
1000d6a4:	1001025f 	.word	0x1001025f
1000d6a8:	100147b6 	.word	0x100147b6
1000d6ac:	1000ddd1 	.word	0x1000ddd1

1000d6b0 <at_ble_pair_key_reply>:
1000d6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d6b2:	b085      	sub	sp, #20
1000d6b4:	1c05      	adds	r5, r0, #0
1000d6b6:	1c0c      	adds	r4, r1, #0
1000d6b8:	1c16      	adds	r6, r2, #0
1000d6ba:	2100      	movs	r1, #0
1000d6bc:	4668      	mov	r0, sp
1000d6be:	2210      	movs	r2, #16
1000d6c0:	4b18      	ldr	r3, [pc, #96]	; (1000d724 <at_ble_pair_key_reply+0x74>)
1000d6c2:	4798      	blx	r3
1000d6c4:	2101      	movs	r1, #1
1000d6c6:	2e00      	cmp	r6, #0
1000d6c8:	d101      	bne.n	1000d6ce <at_ble_pair_key_reply+0x1e>
1000d6ca:	1c31      	adds	r1, r6, #0
1000d6cc:	466e      	mov	r6, sp
1000d6ce:	2c00      	cmp	r4, #0
1000d6d0:	d116      	bne.n	1000d700 <at_ble_pair_key_reply+0x50>
1000d6d2:	2701      	movs	r7, #1
1000d6d4:	1c23      	adds	r3, r4, #0
1000d6d6:	1d70      	adds	r0, r6, #5
1000d6d8:	3e01      	subs	r6, #1
1000d6da:	7802      	ldrb	r2, [r0, #0]
1000d6dc:	3801      	subs	r0, #1
1000d6de:	3a30      	subs	r2, #48	; 0x30
1000d6e0:	437a      	muls	r2, r7
1000d6e2:	189b      	adds	r3, r3, r2
1000d6e4:	220a      	movs	r2, #10
1000d6e6:	4357      	muls	r7, r2
1000d6e8:	42b0      	cmp	r0, r6
1000d6ea:	d1f6      	bne.n	1000d6da <at_ble_pair_key_reply+0x2a>
1000d6ec:	466a      	mov	r2, sp
1000d6ee:	4668      	mov	r0, sp
1000d6f0:	7013      	strb	r3, [r2, #0]
1000d6f2:	0a1a      	lsrs	r2, r3, #8
1000d6f4:	7042      	strb	r2, [r0, #1]
1000d6f6:	0c1a      	lsrs	r2, r3, #16
1000d6f8:	0e1b      	lsrs	r3, r3, #24
1000d6fa:	7082      	strb	r2, [r0, #2]
1000d6fc:	70c3      	strb	r3, [r0, #3]
1000d6fe:	e009      	b.n	1000d714 <at_ble_pair_key_reply+0x64>
1000d700:	20cf      	movs	r0, #207	; 0xcf
1000d702:	2c01      	cmp	r4, #1
1000d704:	d10c      	bne.n	1000d720 <at_ble_pair_key_reply+0x70>
1000d706:	2300      	movs	r3, #0
1000d708:	4668      	mov	r0, sp
1000d70a:	5cf2      	ldrb	r2, [r6, r3]
1000d70c:	54c2      	strb	r2, [r0, r3]
1000d70e:	3301      	adds	r3, #1
1000d710:	2b10      	cmp	r3, #16
1000d712:	d1f9      	bne.n	1000d708 <at_ble_pair_key_reply+0x58>
1000d714:	2004      	movs	r0, #4
1000d716:	466a      	mov	r2, sp
1000d718:	1c2b      	adds	r3, r5, #0
1000d71a:	4c03      	ldr	r4, [pc, #12]	; (1000d728 <at_ble_pair_key_reply+0x78>)
1000d71c:	47a0      	blx	r4
1000d71e:	2000      	movs	r0, #0
1000d720:	b005      	add	sp, #20
1000d722:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d724:	10010271 	.word	0x10010271
1000d728:	1000e06d 	.word	0x1000e06d

1000d72c <at_ble_send_slave_sec_request>:
1000d72c:	b570      	push	{r4, r5, r6, lr}
1000d72e:	4b0c      	ldr	r3, [pc, #48]	; (1000d760 <at_ble_send_slave_sec_request+0x34>)
1000d730:	1c0e      	adds	r6, r1, #0
1000d732:	2100      	movs	r1, #0
1000d734:	1c05      	adds	r5, r0, #0
1000d736:	1c14      	adds	r4, r2, #0
1000d738:	4798      	blx	r3
1000d73a:	2301      	movs	r3, #1
1000d73c:	2807      	cmp	r0, #7
1000d73e:	d80d      	bhi.n	1000d75c <at_ble_send_slave_sec_request+0x30>
1000d740:	3311      	adds	r3, #17
1000d742:	4358      	muls	r0, r3
1000d744:	4b07      	ldr	r3, [pc, #28]	; (1000d764 <at_ble_send_slave_sec_request+0x38>)
1000d746:	5cc2      	ldrb	r2, [r0, r3]
1000d748:	23e0      	movs	r3, #224	; 0xe0
1000d74a:	2a01      	cmp	r2, #1
1000d74c:	d106      	bne.n	1000d75c <at_ble_send_slave_sec_request+0x30>
1000d74e:	00b1      	lsls	r1, r6, #2
1000d750:	430c      	orrs	r4, r1
1000d752:	4b05      	ldr	r3, [pc, #20]	; (1000d768 <at_ble_send_slave_sec_request+0x3c>)
1000d754:	b2e1      	uxtb	r1, r4
1000d756:	1c28      	adds	r0, r5, #0
1000d758:	4798      	blx	r3
1000d75a:	2300      	movs	r3, #0
1000d75c:	1c18      	adds	r0, r3, #0
1000d75e:	bd70      	pop	{r4, r5, r6, pc}
1000d760:	1000da81 	.word	0x1000da81
1000d764:	10014726 	.word	0x10014726
1000d768:	1000e0bd 	.word	0x1000e0bd

1000d76c <at_ble_encryption_start>:
1000d76c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d76e:	23cf      	movs	r3, #207	; 0xcf
1000d770:	2900      	cmp	r1, #0
1000d772:	d02b      	beq.n	1000d7cc <at_ble_encryption_start+0x60>
1000d774:	2a05      	cmp	r2, #5
1000d776:	d829      	bhi.n	1000d7cc <at_ble_encryption_start+0x60>
1000d778:	2701      	movs	r7, #1
1000d77a:	1c3d      	adds	r5, r7, #0
1000d77c:	2433      	movs	r4, #51	; 0x33
1000d77e:	4095      	lsls	r5, r2
1000d780:	4225      	tst	r5, r4
1000d782:	d023      	beq.n	1000d7cc <at_ble_encryption_start+0x60>
1000d784:	7e8c      	ldrb	r4, [r1, #26]
1000d786:	3c07      	subs	r4, #7
1000d788:	2c09      	cmp	r4, #9
1000d78a:	d81f      	bhi.n	1000d7cc <at_ble_encryption_start+0x60>
1000d78c:	4b10      	ldr	r3, [pc, #64]	; (1000d7d0 <at_ble_encryption_start+0x64>)
1000d78e:	1c0c      	adds	r4, r1, #0
1000d790:	2100      	movs	r1, #0
1000d792:	1c15      	adds	r5, r2, #0
1000d794:	1c06      	adds	r6, r0, #0
1000d796:	4798      	blx	r3
1000d798:	1c3b      	adds	r3, r7, #0
1000d79a:	2807      	cmp	r0, #7
1000d79c:	d816      	bhi.n	1000d7cc <at_ble_encryption_start+0x60>
1000d79e:	2312      	movs	r3, #18
1000d7a0:	4358      	muls	r0, r3
1000d7a2:	4b0c      	ldr	r3, [pc, #48]	; (1000d7d4 <at_ble_encryption_start+0x68>)
1000d7a4:	5cc7      	ldrb	r7, [r0, r3]
1000d7a6:	23e0      	movs	r3, #224	; 0xe0
1000d7a8:	2f00      	cmp	r7, #0
1000d7aa:	d10f      	bne.n	1000d7cc <at_ble_encryption_start+0x60>
1000d7ac:	1c21      	adds	r1, r4, #0
1000d7ae:	221c      	movs	r2, #28
1000d7b0:	4b09      	ldr	r3, [pc, #36]	; (1000d7d8 <at_ble_encryption_start+0x6c>)
1000d7b2:	480a      	ldr	r0, [pc, #40]	; (1000d7dc <at_ble_encryption_start+0x70>)
1000d7b4:	4798      	blx	r3
1000d7b6:	1c23      	adds	r3, r4, #0
1000d7b8:	7ea1      	ldrb	r1, [r4, #26]
1000d7ba:	8a22      	ldrh	r2, [r4, #16]
1000d7bc:	3312      	adds	r3, #18
1000d7be:	9100      	str	r1, [sp, #0]
1000d7c0:	9501      	str	r5, [sp, #4]
1000d7c2:	1c21      	adds	r1, r4, #0
1000d7c4:	1c30      	adds	r0, r6, #0
1000d7c6:	4c06      	ldr	r4, [pc, #24]	; (1000d7e0 <at_ble_encryption_start+0x74>)
1000d7c8:	47a0      	blx	r4
1000d7ca:	1c3b      	adds	r3, r7, #0
1000d7cc:	1c18      	adds	r0, r3, #0
1000d7ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d7d0:	1000da81 	.word	0x1000da81
1000d7d4:	10014726 	.word	0x10014726
1000d7d8:	1001025f 	.word	0x1001025f
1000d7dc:	10014834 	.word	0x10014834
1000d7e0:	1000e0fd 	.word	0x1000e0fd

1000d7e4 <at_ble_encryption_request_reply>:
1000d7e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000d7e6:	24cf      	movs	r4, #207	; 0xcf
1000d7e8:	2b00      	cmp	r3, #0
1000d7ea:	d011      	beq.n	1000d810 <at_ble_encryption_request_reply+0x2c>
1000d7ec:	2a00      	cmp	r2, #0
1000d7ee:	d00a      	beq.n	1000d806 <at_ble_encryption_request_reply+0x22>
1000d7f0:	2905      	cmp	r1, #5
1000d7f2:	d80d      	bhi.n	1000d810 <at_ble_encryption_request_reply+0x2c>
1000d7f4:	2501      	movs	r5, #1
1000d7f6:	2633      	movs	r6, #51	; 0x33
1000d7f8:	408d      	lsls	r5, r1
1000d7fa:	4235      	tst	r5, r6
1000d7fc:	d008      	beq.n	1000d810 <at_ble_encryption_request_reply+0x2c>
1000d7fe:	7e9d      	ldrb	r5, [r3, #26]
1000d800:	3d07      	subs	r5, #7
1000d802:	2d09      	cmp	r5, #9
1000d804:	d804      	bhi.n	1000d810 <at_ble_encryption_request_reply+0x2c>
1000d806:	7e9c      	ldrb	r4, [r3, #26]
1000d808:	9400      	str	r4, [sp, #0]
1000d80a:	4c02      	ldr	r4, [pc, #8]	; (1000d814 <at_ble_encryption_request_reply+0x30>)
1000d80c:	47a0      	blx	r4
1000d80e:	2400      	movs	r4, #0
1000d810:	1c20      	adds	r0, r4, #0
1000d812:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000d814:	1000e1b9 	.word	0x1000e1b9

1000d818 <rx_callback>:
1000d818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d81a:	8883      	ldrh	r3, [r0, #4]
1000d81c:	1c01      	adds	r1, r0, #0
1000d81e:	9301      	str	r3, [sp, #4]
1000d820:	88c5      	ldrh	r5, [r0, #6]
1000d822:	8806      	ldrh	r6, [r0, #0]
1000d824:	2d00      	cmp	r5, #0
1000d826:	d10f      	bne.n	1000d848 <rx_callback+0x30>
1000d828:	1c19      	adds	r1, r3, #0
1000d82a:	1c30      	adds	r0, r6, #0
1000d82c:	4b19      	ldr	r3, [pc, #100]	; (1000d894 <rx_callback+0x7c>)
1000d82e:	1c2a      	adds	r2, r5, #0
1000d830:	4798      	blx	r3
1000d832:	1e03      	subs	r3, r0, #0
1000d834:	d105      	bne.n	1000d842 <rx_callback+0x2a>
1000d836:	1c30      	adds	r0, r6, #0
1000d838:	9901      	ldr	r1, [sp, #4]
1000d83a:	1c1a      	adds	r2, r3, #0
1000d83c:	4c16      	ldr	r4, [pc, #88]	; (1000d898 <rx_callback+0x80>)
1000d83e:	47a0      	blx	r4
1000d840:	e027      	b.n	1000d892 <rx_callback+0x7a>
1000d842:	4b16      	ldr	r3, [pc, #88]	; (1000d89c <rx_callback+0x84>)
1000d844:	4798      	blx	r3
1000d846:	e024      	b.n	1000d892 <rx_callback+0x7a>
1000d848:	4c15      	ldr	r4, [pc, #84]	; (1000d8a0 <rx_callback+0x88>)
1000d84a:	4a16      	ldr	r2, [pc, #88]	; (1000d8a4 <rx_callback+0x8c>)
1000d84c:	6823      	ldr	r3, [r4, #0]
1000d84e:	6812      	ldr	r2, [r2, #0]
1000d850:	18eb      	adds	r3, r5, r3
1000d852:	4293      	cmp	r3, r2
1000d854:	d901      	bls.n	1000d85a <rx_callback+0x42>
1000d856:	2300      	movs	r3, #0
1000d858:	6023      	str	r3, [r4, #0]
1000d85a:	4f13      	ldr	r7, [pc, #76]	; (1000d8a8 <rx_callback+0x90>)
1000d85c:	6822      	ldr	r2, [r4, #0]
1000d85e:	683b      	ldr	r3, [r7, #0]
1000d860:	3108      	adds	r1, #8
1000d862:	1898      	adds	r0, r3, r2
1000d864:	1c2a      	adds	r2, r5, #0
1000d866:	4b11      	ldr	r3, [pc, #68]	; (1000d8ac <rx_callback+0x94>)
1000d868:	4798      	blx	r3
1000d86a:	683b      	ldr	r3, [r7, #0]
1000d86c:	6822      	ldr	r2, [r4, #0]
1000d86e:	1c30      	adds	r0, r6, #0
1000d870:	189a      	adds	r2, r3, r2
1000d872:	9901      	ldr	r1, [sp, #4]
1000d874:	4b07      	ldr	r3, [pc, #28]	; (1000d894 <rx_callback+0x7c>)
1000d876:	4798      	blx	r3
1000d878:	2800      	cmp	r0, #0
1000d87a:	d1e2      	bne.n	1000d842 <rx_callback+0x2a>
1000d87c:	6823      	ldr	r3, [r4, #0]
1000d87e:	683a      	ldr	r2, [r7, #0]
1000d880:	1c30      	adds	r0, r6, #0
1000d882:	18d2      	adds	r2, r2, r3
1000d884:	9901      	ldr	r1, [sp, #4]
1000d886:	1c2b      	adds	r3, r5, #0
1000d888:	4e03      	ldr	r6, [pc, #12]	; (1000d898 <rx_callback+0x80>)
1000d88a:	47b0      	blx	r6
1000d88c:	6823      	ldr	r3, [r4, #0]
1000d88e:	18ed      	adds	r5, r5, r3
1000d890:	6025      	str	r5, [r4, #0]
1000d892:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d894:	1000c705 	.word	0x1000c705
1000d898:	1000c67d 	.word	0x1000c67d
1000d89c:	1000ad35 	.word	0x1000ad35
1000d8a0:	10014890 	.word	0x10014890
1000d8a4:	100139fc 	.word	0x100139fc
1000d8a8:	100139f8 	.word	0x100139f8
1000d8ac:	1001025f 	.word	0x1001025f

1000d8b0 <interface_send>:
1000d8b0:	b508      	push	{r3, lr}
1000d8b2:	4b02      	ldr	r3, [pc, #8]	; (1000d8bc <interface_send+0xc>)
1000d8b4:	4798      	blx	r3
1000d8b6:	2000      	movs	r0, #0
1000d8b8:	bd08      	pop	{r3, pc}
1000d8ba:	46c0      	nop			; (mov r8, r8)
1000d8bc:	1000aa2d 	.word	0x1000aa2d

1000d8c0 <interface_init>:
1000d8c0:	2280      	movs	r2, #128	; 0x80
1000d8c2:	b510      	push	{r4, lr}
1000d8c4:	2100      	movs	r1, #0
1000d8c6:	1c04      	adds	r4, r0, #0
1000d8c8:	0092      	lsls	r2, r2, #2
1000d8ca:	4b08      	ldr	r3, [pc, #32]	; (1000d8ec <interface_init+0x2c>)
1000d8cc:	4808      	ldr	r0, [pc, #32]	; (1000d8f0 <interface_init+0x30>)
1000d8ce:	4798      	blx	r3
1000d8d0:	2200      	movs	r2, #0
1000d8d2:	4b08      	ldr	r3, [pc, #32]	; (1000d8f4 <interface_init+0x34>)
1000d8d4:	601a      	str	r2, [r3, #0]
1000d8d6:	4a08      	ldr	r2, [pc, #32]	; (1000d8f8 <interface_init+0x38>)
1000d8d8:	4b08      	ldr	r3, [pc, #32]	; (1000d8fc <interface_init+0x3c>)
1000d8da:	601a      	str	r2, [r3, #0]
1000d8dc:	4b08      	ldr	r3, [pc, #32]	; (1000d900 <interface_init+0x40>)
1000d8de:	6922      	ldr	r2, [r4, #16]
1000d8e0:	601a      	str	r2, [r3, #0]
1000d8e2:	6962      	ldr	r2, [r4, #20]
1000d8e4:	4b07      	ldr	r3, [pc, #28]	; (1000d904 <interface_init+0x44>)
1000d8e6:	601a      	str	r2, [r3, #0]
1000d8e8:	bd10      	pop	{r4, pc}
1000d8ea:	46c0      	nop			; (mov r8, r8)
1000d8ec:	10010271 	.word	0x10010271
1000d8f0:	10014a94 	.word	0x10014a94
1000d8f4:	10014890 	.word	0x10014890
1000d8f8:	10014894 	.word	0x10014894
1000d8fc:	10012440 	.word	0x10012440
1000d900:	100139f8 	.word	0x100139f8
1000d904:	100139fc 	.word	0x100139fc

1000d908 <platform_cmd_cmpl_signal>:
1000d908:	2201      	movs	r2, #1
1000d90a:	4b01      	ldr	r3, [pc, #4]	; (1000d910 <platform_cmd_cmpl_signal+0x8>)
1000d90c:	601a      	str	r2, [r3, #0]
1000d90e:	4770      	bx	lr
1000d910:	10013a00 	.word	0x10013a00

1000d914 <platform_cmd_cmpl_wait>:
1000d914:	b510      	push	{r4, lr}
1000d916:	1c04      	adds	r4, r0, #0
1000d918:	4b07      	ldr	r3, [pc, #28]	; (1000d938 <platform_cmd_cmpl_wait+0x24>)
1000d91a:	681a      	ldr	r2, [r3, #0]
1000d91c:	2a01      	cmp	r2, #1
1000d91e:	d003      	beq.n	1000d928 <platform_cmd_cmpl_wait+0x14>
1000d920:	4b06      	ldr	r3, [pc, #24]	; (1000d93c <platform_cmd_cmpl_wait+0x28>)
1000d922:	2000      	movs	r0, #0
1000d924:	4798      	blx	r3
1000d926:	e7f7      	b.n	1000d918 <platform_cmd_cmpl_wait+0x4>
1000d928:	6819      	ldr	r1, [r3, #0]
1000d92a:	2901      	cmp	r1, #1
1000d92c:	d102      	bne.n	1000d934 <platform_cmd_cmpl_wait+0x20>
1000d92e:	2200      	movs	r2, #0
1000d930:	601a      	str	r2, [r3, #0]
1000d932:	e000      	b.n	1000d936 <platform_cmd_cmpl_wait+0x22>
1000d934:	7022      	strb	r2, [r4, #0]
1000d936:	bd10      	pop	{r4, pc}
1000d938:	10013a00 	.word	0x10013a00
1000d93c:	1000aabd 	.word	0x1000aabd

1000d940 <start_timer>:
1000d940:	4770      	bx	lr

1000d942 <stop_timer>:
1000d942:	4770      	bx	lr

1000d944 <dbg_le_set_bd_addr_req_handler>:
1000d944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d946:	466b      	mov	r3, sp
1000d948:	1dde      	adds	r6, r3, #7
1000d94a:	2300      	movs	r3, #0
1000d94c:	7033      	strb	r3, [r6, #0]
1000d94e:	230f      	movs	r3, #15
1000d950:	4c13      	ldr	r4, [pc, #76]	; (1000d9a0 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000d952:	2703      	movs	r7, #3
1000d954:	7023      	strb	r3, [r4, #0]
1000d956:	2300      	movs	r3, #0
1000d958:	70e3      	strb	r3, [r4, #3]
1000d95a:	4b12      	ldr	r3, [pc, #72]	; (1000d9a4 <dbg_le_set_bd_addr_req_handler+0x60>)
1000d95c:	1c01      	adds	r1, r0, #0
1000d95e:	881a      	ldrh	r2, [r3, #0]
1000d960:	881b      	ldrh	r3, [r3, #0]
1000d962:	7122      	strb	r2, [r4, #4]
1000d964:	0a1b      	lsrs	r3, r3, #8
1000d966:	2206      	movs	r2, #6
1000d968:	7163      	strb	r3, [r4, #5]
1000d96a:	480f      	ldr	r0, [pc, #60]	; (1000d9a8 <dbg_le_set_bd_addr_req_handler+0x64>)
1000d96c:	4b0f      	ldr	r3, [pc, #60]	; (1000d9ac <dbg_le_set_bd_addr_req_handler+0x68>)
1000d96e:	7067      	strb	r7, [r4, #1]
1000d970:	70a7      	strb	r7, [r4, #2]
1000d972:	4798      	blx	r3
1000d974:	4d0e      	ldr	r5, [pc, #56]	; (1000d9b0 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000d976:	4b0f      	ldr	r3, [pc, #60]	; (1000d9b4 <dbg_le_set_bd_addr_req_handler+0x70>)
1000d978:	210e      	movs	r1, #14
1000d97a:	802b      	strh	r3, [r5, #0]
1000d97c:	2306      	movs	r3, #6
1000d97e:	71a3      	strb	r3, [r4, #6]
1000d980:	2300      	movs	r3, #0
1000d982:	1c20      	adds	r0, r4, #0
1000d984:	71e3      	strb	r3, [r4, #7]
1000d986:	4b0c      	ldr	r3, [pc, #48]	; (1000d9b8 <dbg_le_set_bd_addr_req_handler+0x74>)
1000d988:	80af      	strh	r7, [r5, #4]
1000d98a:	4798      	blx	r3
1000d98c:	1c30      	adds	r0, r6, #0
1000d98e:	4b0b      	ldr	r3, [pc, #44]	; (1000d9bc <dbg_le_set_bd_addr_req_handler+0x78>)
1000d990:	4798      	blx	r3
1000d992:	7833      	ldrb	r3, [r6, #0]
1000d994:	20e2      	movs	r0, #226	; 0xe2
1000d996:	2b00      	cmp	r3, #0
1000d998:	d101      	bne.n	1000d99e <dbg_le_set_bd_addr_req_handler+0x5a>
1000d99a:	68ab      	ldr	r3, [r5, #8]
1000d99c:	7818      	ldrb	r0, [r3, #0]
1000d99e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d9a0:	10014a94 	.word	0x10014a94
1000d9a4:	10014724 	.word	0x10014724
1000d9a8:	10014a9c 	.word	0x10014a9c
1000d9ac:	1001025f 	.word	0x1001025f
1000d9b0:	10014718 	.word	0x10014718
1000d9b4:	00000329 	.word	0x00000329
1000d9b8:	1000d8b1 	.word	0x1000d8b1
1000d9bc:	1000d915 	.word	0x1000d915

1000d9c0 <gapc_get_dev_info_cfm.constprop.1>:
1000d9c0:	b538      	push	{r3, r4, r5, lr}
1000d9c2:	230b      	movs	r3, #11
1000d9c4:	4c27      	ldr	r4, [pc, #156]	; (1000da64 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000d9c6:	7023      	strb	r3, [r4, #0]
1000d9c8:	3303      	adds	r3, #3
1000d9ca:	7063      	strb	r3, [r4, #1]
1000d9cc:	3329      	adds	r3, #41	; 0x29
1000d9ce:	70a3      	strb	r3, [r4, #2]
1000d9d0:	4b25      	ldr	r3, [pc, #148]	; (1000da68 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000d9d2:	70e1      	strb	r1, [r4, #3]
1000d9d4:	881a      	ldrh	r2, [r3, #0]
1000d9d6:	881b      	ldrh	r3, [r3, #0]
1000d9d8:	7122      	strb	r2, [r4, #4]
1000d9da:	0a1b      	lsrs	r3, r3, #8
1000d9dc:	7163      	strb	r3, [r4, #5]
1000d9de:	2300      	movs	r3, #0
1000d9e0:	7220      	strb	r0, [r4, #8]
1000d9e2:	7263      	strb	r3, [r4, #9]
1000d9e4:	2801      	cmp	r0, #1
1000d9e6:	d02b      	beq.n	1000da40 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000d9e8:	4298      	cmp	r0, r3
1000d9ea:	d01b      	beq.n	1000da24 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000d9ec:	2802      	cmp	r0, #2
1000d9ee:	d12f      	bne.n	1000da50 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000d9f0:	4b1e      	ldr	r3, [pc, #120]	; (1000da6c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000d9f2:	2112      	movs	r1, #18
1000d9f4:	1c1a      	adds	r2, r3, #0
1000d9f6:	32ce      	adds	r2, #206	; 0xce
1000d9f8:	8812      	ldrh	r2, [r2, #0]
1000d9fa:	72a2      	strb	r2, [r4, #10]
1000d9fc:	0a12      	lsrs	r2, r2, #8
1000d9fe:	72e2      	strb	r2, [r4, #11]
1000da00:	1c1a      	adds	r2, r3, #0
1000da02:	32d0      	adds	r2, #208	; 0xd0
1000da04:	8812      	ldrh	r2, [r2, #0]
1000da06:	7322      	strb	r2, [r4, #12]
1000da08:	0a12      	lsrs	r2, r2, #8
1000da0a:	7362      	strb	r2, [r4, #13]
1000da0c:	1c1a      	adds	r2, r3, #0
1000da0e:	32d2      	adds	r2, #210	; 0xd2
1000da10:	8812      	ldrh	r2, [r2, #0]
1000da12:	33d4      	adds	r3, #212	; 0xd4
1000da14:	73a2      	strb	r2, [r4, #14]
1000da16:	0a12      	lsrs	r2, r2, #8
1000da18:	73e2      	strb	r2, [r4, #15]
1000da1a:	881b      	ldrh	r3, [r3, #0]
1000da1c:	7423      	strb	r3, [r4, #16]
1000da1e:	0a1b      	lsrs	r3, r3, #8
1000da20:	7463      	strb	r3, [r4, #17]
1000da22:	e016      	b.n	1000da52 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000da24:	4b11      	ldr	r3, [pc, #68]	; (1000da6c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000da26:	4912      	ldr	r1, [pc, #72]	; (1000da70 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000da28:	33aa      	adds	r3, #170	; 0xaa
1000da2a:	881d      	ldrh	r5, [r3, #0]
1000da2c:	4811      	ldr	r0, [pc, #68]	; (1000da74 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000da2e:	0a2b      	lsrs	r3, r5, #8
1000da30:	72a5      	strb	r5, [r4, #10]
1000da32:	72e3      	strb	r3, [r4, #11]
1000da34:	1c2a      	adds	r2, r5, #0
1000da36:	4b10      	ldr	r3, [pc, #64]	; (1000da78 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000da38:	350c      	adds	r5, #12
1000da3a:	4798      	blx	r3
1000da3c:	b2a9      	uxth	r1, r5
1000da3e:	e008      	b.n	1000da52 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000da40:	4b0a      	ldr	r3, [pc, #40]	; (1000da6c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000da42:	210c      	movs	r1, #12
1000da44:	33cc      	adds	r3, #204	; 0xcc
1000da46:	881b      	ldrh	r3, [r3, #0]
1000da48:	72a3      	strb	r3, [r4, #10]
1000da4a:	0a1b      	lsrs	r3, r3, #8
1000da4c:	72e3      	strb	r3, [r4, #11]
1000da4e:	e000      	b.n	1000da52 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000da50:	210a      	movs	r1, #10
1000da52:	1c0b      	adds	r3, r1, #0
1000da54:	3b08      	subs	r3, #8
1000da56:	71a3      	strb	r3, [r4, #6]
1000da58:	121b      	asrs	r3, r3, #8
1000da5a:	71e3      	strb	r3, [r4, #7]
1000da5c:	1c20      	adds	r0, r4, #0
1000da5e:	4b07      	ldr	r3, [pc, #28]	; (1000da7c <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000da60:	4798      	blx	r3
1000da62:	bd38      	pop	{r3, r4, r5, pc}
1000da64:	10014a94 	.word	0x10014a94
1000da68:	10014724 	.word	0x10014724
1000da6c:	100147b6 	.word	0x100147b6
1000da70:	10014862 	.word	0x10014862
1000da74:	10014aa0 	.word	0x10014aa0
1000da78:	1001025f 	.word	0x1001025f
1000da7c:	1000d8b1 	.word	0x1000d8b1

1000da80 <check_ConnData_idx_role>:
1000da80:	4b0c      	ldr	r3, [pc, #48]	; (1000dab4 <check_ConnData_idx_role+0x34>)
1000da82:	b570      	push	{r4, r5, r6, lr}
1000da84:	1c04      	adds	r4, r0, #0
1000da86:	2008      	movs	r0, #8
1000da88:	429c      	cmp	r4, r3
1000da8a:	d011      	beq.n	1000dab0 <check_ConnData_idx_role+0x30>
1000da8c:	2300      	movs	r3, #0
1000da8e:	2212      	movs	r2, #18
1000da90:	435a      	muls	r2, r3
1000da92:	4d09      	ldr	r5, [pc, #36]	; (1000dab8 <check_ConnData_idx_role+0x38>)
1000da94:	b2d8      	uxtb	r0, r3
1000da96:	1956      	adds	r6, r2, r5
1000da98:	8976      	ldrh	r6, [r6, #10]
1000da9a:	42a6      	cmp	r6, r4
1000da9c:	d104      	bne.n	1000daa8 <check_ConnData_idx_role+0x28>
1000da9e:	2900      	cmp	r1, #0
1000daa0:	d006      	beq.n	1000dab0 <check_ConnData_idx_role+0x30>
1000daa2:	5d53      	ldrb	r3, [r2, r5]
1000daa4:	700b      	strb	r3, [r1, #0]
1000daa6:	e003      	b.n	1000dab0 <check_ConnData_idx_role+0x30>
1000daa8:	3301      	adds	r3, #1
1000daaa:	2b08      	cmp	r3, #8
1000daac:	d1ef      	bne.n	1000da8e <check_ConnData_idx_role+0xe>
1000daae:	1c18      	adds	r0, r3, #0
1000dab0:	bd70      	pop	{r4, r5, r6, pc}
1000dab2:	46c0      	nop			; (mov r8, r8)
1000dab4:	0000ffff 	.word	0x0000ffff
1000dab8:	10014726 	.word	0x10014726

1000dabc <check_ConnData_emptyEntry>:
1000dabc:	2300      	movs	r3, #0
1000dabe:	2212      	movs	r2, #18
1000dac0:	435a      	muls	r2, r3
1000dac2:	4906      	ldr	r1, [pc, #24]	; (1000dadc <check_ConnData_emptyEntry+0x20>)
1000dac4:	b2d8      	uxtb	r0, r3
1000dac6:	1852      	adds	r2, r2, r1
1000dac8:	8951      	ldrh	r1, [r2, #10]
1000daca:	4a05      	ldr	r2, [pc, #20]	; (1000dae0 <check_ConnData_emptyEntry+0x24>)
1000dacc:	4291      	cmp	r1, r2
1000dace:	d003      	beq.n	1000dad8 <check_ConnData_emptyEntry+0x1c>
1000dad0:	3301      	adds	r3, #1
1000dad2:	2b08      	cmp	r3, #8
1000dad4:	d1f3      	bne.n	1000dabe <check_ConnData_emptyEntry+0x2>
1000dad6:	1c18      	adds	r0, r3, #0
1000dad8:	4770      	bx	lr
1000dada:	46c0      	nop			; (mov r8, r8)
1000dadc:	10014726 	.word	0x10014726
1000dae0:	0000ffff 	.word	0x0000ffff

1000dae4 <gapc_cmp_evt>:
1000dae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000dae6:	780b      	ldrb	r3, [r1, #0]
1000dae8:	1c05      	adds	r5, r0, #0
1000daea:	1e58      	subs	r0, r3, #1
1000daec:	784e      	ldrb	r6, [r1, #1]
1000daee:	280f      	cmp	r0, #15
1000daf0:	d85a      	bhi.n	1000dba8 <gapc_cmp_evt+0xc4>
1000daf2:	1c14      	adds	r4, r2, #0
1000daf4:	f001 fa04 	bl	1000ef00 <__gnu_thumb1_case_uqi>
1000daf8:	5858440a 	.word	0x5858440a
1000dafc:	4b584444 	.word	0x4b584444
1000db00:	0825122d 	.word	0x0825122d
1000db04:	3e395858 	.word	0x3e395858
1000db08:	203b      	movs	r0, #59	; 0x3b
1000db0a:	e04e      	b.n	1000dbaa <gapc_cmp_evt+0xc6>
1000db0c:	203b      	movs	r0, #59	; 0x3b
1000db0e:	2e00      	cmp	r6, #0
1000db10:	d04b      	beq.n	1000dbaa <gapc_cmp_evt+0xc6>
1000db12:	0a2d      	lsrs	r5, r5, #8
1000db14:	8015      	strh	r5, [r2, #0]
1000db16:	7096      	strb	r6, [r2, #2]
1000db18:	3835      	subs	r0, #53	; 0x35
1000db1a:	e046      	b.n	1000dbaa <gapc_cmp_evt+0xc6>
1000db1c:	466b      	mov	r3, sp
1000db1e:	1ddf      	adds	r7, r3, #7
1000db20:	2301      	movs	r3, #1
1000db22:	0a2d      	lsrs	r5, r5, #8
1000db24:	703b      	strb	r3, [r7, #0]
1000db26:	1c28      	adds	r0, r5, #0
1000db28:	1c39      	adds	r1, r7, #0
1000db2a:	4b20      	ldr	r3, [pc, #128]	; (1000dbac <gapc_cmp_evt+0xc8>)
1000db2c:	4798      	blx	r3
1000db2e:	2807      	cmp	r0, #7
1000db30:	d803      	bhi.n	1000db3a <gapc_cmp_evt+0x56>
1000db32:	783b      	ldrb	r3, [r7, #0]
1000db34:	203b      	movs	r0, #59	; 0x3b
1000db36:	2b00      	cmp	r3, #0
1000db38:	d037      	beq.n	1000dbaa <gapc_cmp_evt+0xc6>
1000db3a:	8065      	strh	r5, [r4, #2]
1000db3c:	7126      	strb	r6, [r4, #4]
1000db3e:	2009      	movs	r0, #9
1000db40:	e033      	b.n	1000dbaa <gapc_cmp_evt+0xc6>
1000db42:	203b      	movs	r0, #59	; 0x3b
1000db44:	2e00      	cmp	r6, #0
1000db46:	d030      	beq.n	1000dbaa <gapc_cmp_evt+0xc6>
1000db48:	0a2d      	lsrs	r5, r5, #8
1000db4a:	8015      	strh	r5, [r2, #0]
1000db4c:	7096      	strb	r6, [r2, #2]
1000db4e:	382d      	subs	r0, #45	; 0x2d
1000db50:	e02b      	b.n	1000dbaa <gapc_cmp_evt+0xc6>
1000db52:	203b      	movs	r0, #59	; 0x3b
1000db54:	2e00      	cmp	r6, #0
1000db56:	d028      	beq.n	1000dbaa <gapc_cmp_evt+0xc6>
1000db58:	2300      	movs	r3, #0
1000db5a:	0a2d      	lsrs	r5, r5, #8
1000db5c:	8015      	strh	r5, [r2, #0]
1000db5e:	7096      	strb	r6, [r2, #2]
1000db60:	8093      	strh	r3, [r2, #4]
1000db62:	80d3      	strh	r3, [r2, #6]
1000db64:	8113      	strh	r3, [r2, #8]
1000db66:	3834      	subs	r0, #52	; 0x34
1000db68:	e01f      	b.n	1000dbaa <gapc_cmp_evt+0xc6>
1000db6a:	203b      	movs	r0, #59	; 0x3b
1000db6c:	2e00      	cmp	r6, #0
1000db6e:	d01c      	beq.n	1000dbaa <gapc_cmp_evt+0xc6>
1000db70:	7216      	strb	r6, [r2, #8]
1000db72:	e003      	b.n	1000db7c <gapc_cmp_evt+0x98>
1000db74:	203b      	movs	r0, #59	; 0x3b
1000db76:	2e00      	cmp	r6, #0
1000db78:	d017      	beq.n	1000dbaa <gapc_cmp_evt+0xc6>
1000db7a:	7116      	strb	r6, [r2, #4]
1000db7c:	3812      	subs	r0, #18
1000db7e:	e014      	b.n	1000dbaa <gapc_cmp_evt+0xc6>
1000db80:	203b      	movs	r0, #59	; 0x3b
1000db82:	2e00      	cmp	r6, #0
1000db84:	d011      	beq.n	1000dbaa <gapc_cmp_evt+0xc6>
1000db86:	7093      	strb	r3, [r2, #2]
1000db88:	70d6      	strb	r6, [r2, #3]
1000db8a:	382a      	subs	r0, #42	; 0x2a
1000db8c:	e00d      	b.n	1000dbaa <gapc_cmp_evt+0xc6>
1000db8e:	203b      	movs	r0, #59	; 0x3b
1000db90:	2e00      	cmp	r6, #0
1000db92:	d00a      	beq.n	1000dbaa <gapc_cmp_evt+0xc6>
1000db94:	0a2d      	lsrs	r5, r5, #8
1000db96:	7016      	strb	r6, [r2, #0]
1000db98:	8055      	strh	r5, [r2, #2]
1000db9a:	1d10      	adds	r0, r2, #4
1000db9c:	2100      	movs	r1, #0
1000db9e:	2205      	movs	r2, #5
1000dba0:	4b03      	ldr	r3, [pc, #12]	; (1000dbb0 <gapc_cmp_evt+0xcc>)
1000dba2:	4798      	blx	r3
1000dba4:	2012      	movs	r0, #18
1000dba6:	e000      	b.n	1000dbaa <gapc_cmp_evt+0xc6>
1000dba8:	2000      	movs	r0, #0
1000dbaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000dbac:	1000da81 	.word	0x1000da81
1000dbb0:	10010271 	.word	0x10010271

1000dbb4 <gapc_connection_cfm_handler>:
1000dbb4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dbb6:	b085      	sub	sp, #20
1000dbb8:	1c1d      	adds	r5, r3, #0
1000dbba:	ab0a      	add	r3, sp, #40	; 0x28
1000dbbc:	781b      	ldrb	r3, [r3, #0]
1000dbbe:	9201      	str	r2, [sp, #4]
1000dbc0:	9302      	str	r3, [sp, #8]
1000dbc2:	ab0b      	add	r3, sp, #44	; 0x2c
1000dbc4:	781b      	ldrb	r3, [r3, #0]
1000dbc6:	1c07      	adds	r7, r0, #0
1000dbc8:	9303      	str	r3, [sp, #12]
1000dbca:	ab0c      	add	r3, sp, #48	; 0x30
1000dbcc:	881a      	ldrh	r2, [r3, #0]
1000dbce:	2302      	movs	r3, #2
1000dbd0:	1c0e      	adds	r6, r1, #0
1000dbd2:	4c23      	ldr	r4, [pc, #140]	; (1000dc60 <gapc_connection_cfm_handler+0xac>)
1000dbd4:	1c39      	adds	r1, r7, #0
1000dbd6:	7023      	strb	r3, [r4, #0]
1000dbd8:	330c      	adds	r3, #12
1000dbda:	7063      	strb	r3, [r4, #1]
1000dbdc:	70a3      	strb	r3, [r4, #2]
1000dbde:	4b21      	ldr	r3, [pc, #132]	; (1000dc64 <gapc_connection_cfm_handler+0xb0>)
1000dbe0:	70e2      	strb	r2, [r4, #3]
1000dbe2:	881a      	ldrh	r2, [r3, #0]
1000dbe4:	881b      	ldrh	r3, [r3, #0]
1000dbe6:	7122      	strb	r2, [r4, #4]
1000dbe8:	0a1b      	lsrs	r3, r3, #8
1000dbea:	4f1f      	ldr	r7, [pc, #124]	; (1000dc68 <gapc_connection_cfm_handler+0xb4>)
1000dbec:	2210      	movs	r2, #16
1000dbee:	481f      	ldr	r0, [pc, #124]	; (1000dc6c <gapc_connection_cfm_handler+0xb8>)
1000dbf0:	7163      	strb	r3, [r4, #5]
1000dbf2:	47b8      	blx	r7
1000dbf4:	0a33      	lsrs	r3, r6, #8
1000dbf6:	7626      	strb	r6, [r4, #24]
1000dbf8:	7663      	strb	r3, [r4, #25]
1000dbfa:	9901      	ldr	r1, [sp, #4]
1000dbfc:	0c33      	lsrs	r3, r6, #16
1000dbfe:	2210      	movs	r2, #16
1000dc00:	0e36      	lsrs	r6, r6, #24
1000dc02:	481b      	ldr	r0, [pc, #108]	; (1000dc70 <gapc_connection_cfm_handler+0xbc>)
1000dc04:	76a3      	strb	r3, [r4, #26]
1000dc06:	76e6      	strb	r6, [r4, #27]
1000dc08:	47b8      	blx	r7
1000dc0a:	1c23      	adds	r3, r4, #0
1000dc0c:	332c      	adds	r3, #44	; 0x2c
1000dc0e:	701d      	strb	r5, [r3, #0]
1000dc10:	1c23      	adds	r3, r4, #0
1000dc12:	0a2a      	lsrs	r2, r5, #8
1000dc14:	332d      	adds	r3, #45	; 0x2d
1000dc16:	701a      	strb	r2, [r3, #0]
1000dc18:	1c23      	adds	r3, r4, #0
1000dc1a:	0c2a      	lsrs	r2, r5, #16
1000dc1c:	332e      	adds	r3, #46	; 0x2e
1000dc1e:	701a      	strb	r2, [r3, #0]
1000dc20:	1c23      	adds	r3, r4, #0
1000dc22:	0e2d      	lsrs	r5, r5, #24
1000dc24:	332f      	adds	r3, #47	; 0x2f
1000dc26:	466a      	mov	r2, sp
1000dc28:	701d      	strb	r5, [r3, #0]
1000dc2a:	1c23      	adds	r3, r4, #0
1000dc2c:	7a12      	ldrb	r2, [r2, #8]
1000dc2e:	3330      	adds	r3, #48	; 0x30
1000dc30:	701a      	strb	r2, [r3, #0]
1000dc32:	1c23      	adds	r3, r4, #0
1000dc34:	2500      	movs	r5, #0
1000dc36:	3331      	adds	r3, #49	; 0x31
1000dc38:	466a      	mov	r2, sp
1000dc3a:	701d      	strb	r5, [r3, #0]
1000dc3c:	1c23      	adds	r3, r4, #0
1000dc3e:	7b12      	ldrb	r2, [r2, #12]
1000dc40:	3332      	adds	r3, #50	; 0x32
1000dc42:	701a      	strb	r2, [r3, #0]
1000dc44:	1c23      	adds	r3, r4, #0
1000dc46:	3333      	adds	r3, #51	; 0x33
1000dc48:	701d      	strb	r5, [r3, #0]
1000dc4a:	232c      	movs	r3, #44	; 0x2c
1000dc4c:	1c20      	adds	r0, r4, #0
1000dc4e:	71a3      	strb	r3, [r4, #6]
1000dc50:	2134      	movs	r1, #52	; 0x34
1000dc52:	4b08      	ldr	r3, [pc, #32]	; (1000dc74 <gapc_connection_cfm_handler+0xc0>)
1000dc54:	71e5      	strb	r5, [r4, #7]
1000dc56:	4798      	blx	r3
1000dc58:	1c28      	adds	r0, r5, #0
1000dc5a:	b005      	add	sp, #20
1000dc5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dc5e:	46c0      	nop			; (mov r8, r8)
1000dc60:	10014a94 	.word	0x10014a94
1000dc64:	10014724 	.word	0x10014724
1000dc68:	1001025f 	.word	0x1001025f
1000dc6c:	10014a9c 	.word	0x10014a9c
1000dc70:	10014ab0 	.word	0x10014ab0
1000dc74:	1000d8b1 	.word	0x1000d8b1

1000dc78 <gapc_con_req_ind>:
1000dc78:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dc7a:	7845      	ldrb	r5, [r0, #1]
1000dc7c:	7803      	ldrb	r3, [r0, #0]
1000dc7e:	4c30      	ldr	r4, [pc, #192]	; (1000dd40 <gapc_con_req_ind+0xc8>)
1000dc80:	022d      	lsls	r5, r5, #8
1000dc82:	431d      	orrs	r5, r3
1000dc84:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000dc86:	78c3      	ldrb	r3, [r0, #3]
1000dc88:	7882      	ldrb	r2, [r0, #2]
1000dc8a:	b08b      	sub	sp, #44	; 0x2c
1000dc8c:	021b      	lsls	r3, r3, #8
1000dc8e:	431a      	orrs	r2, r3
1000dc90:	466b      	mov	r3, sp
1000dc92:	9205      	str	r2, [sp, #20]
1000dc94:	8a9b      	ldrh	r3, [r3, #20]
1000dc96:	2120      	movs	r1, #32
1000dc98:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000dc9a:	7943      	ldrb	r3, [r0, #5]
1000dc9c:	7902      	ldrb	r2, [r0, #4]
1000dc9e:	021b      	lsls	r3, r3, #8
1000dca0:	431a      	orrs	r2, r3
1000dca2:	466b      	mov	r3, sp
1000dca4:	9206      	str	r2, [sp, #24]
1000dca6:	8b1b      	ldrh	r3, [r3, #24]
1000dca8:	1c06      	adds	r6, r0, #0
1000dcaa:	8623      	strh	r3, [r4, #48]	; 0x30
1000dcac:	79c3      	ldrb	r3, [r0, #7]
1000dcae:	7982      	ldrb	r2, [r0, #6]
1000dcb0:	021b      	lsls	r3, r3, #8
1000dcb2:	431a      	orrs	r2, r3
1000dcb4:	466b      	mov	r3, sp
1000dcb6:	9207      	str	r2, [sp, #28]
1000dcb8:	466a      	mov	r2, sp
1000dcba:	8b9b      	ldrh	r3, [r3, #28]
1000dcbc:	1852      	adds	r2, r2, r1
1000dcbe:	8663      	strh	r3, [r4, #50]	; 0x32
1000dcc0:	7a43      	ldrb	r3, [r0, #9]
1000dcc2:	1c01      	adds	r1, r0, #0
1000dcc4:	9308      	str	r3, [sp, #32]
1000dcc6:	1c23      	adds	r3, r4, #0
1000dcc8:	7812      	ldrb	r2, [r2, #0]
1000dcca:	3377      	adds	r3, #119	; 0x77
1000dccc:	3478      	adds	r4, #120	; 0x78
1000dcce:	701a      	strb	r2, [r3, #0]
1000dcd0:	310a      	adds	r1, #10
1000dcd2:	2206      	movs	r2, #6
1000dcd4:	4b1b      	ldr	r3, [pc, #108]	; (1000dd44 <gapc_con_req_ind+0xcc>)
1000dcd6:	1c20      	adds	r0, r4, #0
1000dcd8:	4798      	blx	r3
1000dcda:	7c33      	ldrb	r3, [r6, #16]
1000dcdc:	9309      	str	r3, [sp, #36]	; 0x24
1000dcde:	4b1a      	ldr	r3, [pc, #104]	; (1000dd48 <gapc_con_req_ind+0xd0>)
1000dce0:	4798      	blx	r3
1000dce2:	4e1a      	ldr	r6, [pc, #104]	; (1000dd4c <gapc_con_req_ind+0xd4>)
1000dce4:	1e07      	subs	r7, r0, #0
1000dce6:	2f07      	cmp	r7, #7
1000dce8:	d81b      	bhi.n	1000dd22 <gapc_con_req_ind+0xaa>
1000dcea:	2312      	movs	r3, #18
1000dcec:	4343      	muls	r3, r0
1000dcee:	18f0      	adds	r0, r6, r3
1000dcf0:	8145      	strh	r5, [r0, #10]
1000dcf2:	4669      	mov	r1, sp
1000dcf4:	2524      	movs	r5, #36	; 0x24
1000dcf6:	1949      	adds	r1, r1, r5
1000dcf8:	7809      	ldrb	r1, [r1, #0]
1000dcfa:	2206      	movs	r2, #6
1000dcfc:	54f1      	strb	r1, [r6, r3]
1000dcfe:	2120      	movs	r1, #32
1000dd00:	466b      	mov	r3, sp
1000dd02:	185b      	adds	r3, r3, r1
1000dd04:	781b      	ldrb	r3, [r3, #0]
1000dd06:	1c21      	adds	r1, r4, #0
1000dd08:	7043      	strb	r3, [r0, #1]
1000dd0a:	466b      	mov	r3, sp
1000dd0c:	8a9b      	ldrh	r3, [r3, #20]
1000dd0e:	3002      	adds	r0, #2
1000dd10:	8143      	strh	r3, [r0, #10]
1000dd12:	466b      	mov	r3, sp
1000dd14:	8b1b      	ldrh	r3, [r3, #24]
1000dd16:	8183      	strh	r3, [r0, #12]
1000dd18:	466b      	mov	r3, sp
1000dd1a:	8b9b      	ldrh	r3, [r3, #28]
1000dd1c:	81c3      	strh	r3, [r0, #14]
1000dd1e:	4b09      	ldr	r3, [pc, #36]	; (1000dd44 <gapc_con_req_ind+0xcc>)
1000dd20:	4798      	blx	r3
1000dd22:	2112      	movs	r1, #18
1000dd24:	2300      	movs	r3, #0
1000dd26:	434f      	muls	r7, r1
1000dd28:	9300      	str	r3, [sp, #0]
1000dd2a:	9301      	str	r3, [sp, #4]
1000dd2c:	19f6      	adds	r6, r6, r7
1000dd2e:	8971      	ldrh	r1, [r6, #10]
1000dd30:	4a07      	ldr	r2, [pc, #28]	; (1000dd50 <gapc_con_req_ind+0xd8>)
1000dd32:	9102      	str	r1, [sp, #8]
1000dd34:	1c10      	adds	r0, r2, #0
1000dd36:	1c19      	adds	r1, r3, #0
1000dd38:	4c06      	ldr	r4, [pc, #24]	; (1000dd54 <gapc_con_req_ind+0xdc>)
1000dd3a:	47a0      	blx	r4
1000dd3c:	b00b      	add	sp, #44	; 0x2c
1000dd3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dd40:	100147b6 	.word	0x100147b6
1000dd44:	1001025f 	.word	0x1001025f
1000dd48:	1000dabd 	.word	0x1000dabd
1000dd4c:	10014726 	.word	0x10014726
1000dd50:	10013a04 	.word	0x10013a04
1000dd54:	1000dbb5 	.word	0x1000dbb5

1000dd58 <gapc_disconnect_cmd_handler>:
1000dd58:	2204      	movs	r2, #4
1000dd5a:	b510      	push	{r4, lr}
1000dd5c:	4b0c      	ldr	r3, [pc, #48]	; (1000dd90 <gapc_disconnect_cmd_handler+0x38>)
1000dd5e:	2400      	movs	r4, #0
1000dd60:	701a      	strb	r2, [r3, #0]
1000dd62:	320a      	adds	r2, #10
1000dd64:	705a      	strb	r2, [r3, #1]
1000dd66:	709a      	strb	r2, [r3, #2]
1000dd68:	4a0a      	ldr	r2, [pc, #40]	; (1000dd94 <gapc_disconnect_cmd_handler+0x3c>)
1000dd6a:	70d9      	strb	r1, [r3, #3]
1000dd6c:	8811      	ldrh	r1, [r2, #0]
1000dd6e:	8812      	ldrh	r2, [r2, #0]
1000dd70:	7119      	strb	r1, [r3, #4]
1000dd72:	0a12      	lsrs	r2, r2, #8
1000dd74:	715a      	strb	r2, [r3, #5]
1000dd76:	2201      	movs	r2, #1
1000dd78:	721a      	strb	r2, [r3, #8]
1000dd7a:	1892      	adds	r2, r2, r2
1000dd7c:	7258      	strb	r0, [r3, #9]
1000dd7e:	719a      	strb	r2, [r3, #6]
1000dd80:	71dc      	strb	r4, [r3, #7]
1000dd82:	1c18      	adds	r0, r3, #0
1000dd84:	210a      	movs	r1, #10
1000dd86:	4b04      	ldr	r3, [pc, #16]	; (1000dd98 <gapc_disconnect_cmd_handler+0x40>)
1000dd88:	4798      	blx	r3
1000dd8a:	1c20      	adds	r0, r4, #0
1000dd8c:	bd10      	pop	{r4, pc}
1000dd8e:	46c0      	nop			; (mov r8, r8)
1000dd90:	10014a94 	.word	0x10014a94
1000dd94:	10014724 	.word	0x10014724
1000dd98:	1000d8b1 	.word	0x1000d8b1

1000dd9c <gapc_disconnect_ind>:
1000dd9c:	1c02      	adds	r2, r0, #0
1000dd9e:	b508      	push	{r3, lr}
1000dda0:	7843      	ldrb	r3, [r0, #1]
1000dda2:	7800      	ldrb	r0, [r0, #0]
1000dda4:	021b      	lsls	r3, r3, #8
1000dda6:	4318      	orrs	r0, r3
1000dda8:	8008      	strh	r0, [r1, #0]
1000ddaa:	7893      	ldrb	r3, [r2, #2]
1000ddac:	708b      	strb	r3, [r1, #2]
1000ddae:	2100      	movs	r1, #0
1000ddb0:	4b05      	ldr	r3, [pc, #20]	; (1000ddc8 <gapc_disconnect_ind+0x2c>)
1000ddb2:	4798      	blx	r3
1000ddb4:	2807      	cmp	r0, #7
1000ddb6:	d806      	bhi.n	1000ddc6 <gapc_disconnect_ind+0x2a>
1000ddb8:	2312      	movs	r3, #18
1000ddba:	4358      	muls	r0, r3
1000ddbc:	4b03      	ldr	r3, [pc, #12]	; (1000ddcc <gapc_disconnect_ind+0x30>)
1000ddbe:	1818      	adds	r0, r3, r0
1000ddc0:	2301      	movs	r3, #1
1000ddc2:	425b      	negs	r3, r3
1000ddc4:	8143      	strh	r3, [r0, #10]
1000ddc6:	bd08      	pop	{r3, pc}
1000ddc8:	1000da81 	.word	0x1000da81
1000ddcc:	10014726 	.word	0x10014726

1000ddd0 <gapc_bond_cmd_handler>:
1000ddd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ddd2:	9300      	str	r3, [sp, #0]
1000ddd4:	2312      	movs	r3, #18
1000ddd6:	1c04      	adds	r4, r0, #0
1000ddd8:	a808      	add	r0, sp, #32
1000ddda:	7807      	ldrb	r7, [r0, #0]
1000dddc:	a809      	add	r0, sp, #36	; 0x24
1000ddde:	7806      	ldrb	r6, [r0, #0]
1000dde0:	a80a      	add	r0, sp, #40	; 0x28
1000dde2:	7805      	ldrb	r5, [r0, #0]
1000dde4:	a80b      	add	r0, sp, #44	; 0x2c
1000dde6:	7800      	ldrb	r0, [r0, #0]
1000dde8:	9001      	str	r0, [sp, #4]
1000ddea:	4810      	ldr	r0, [pc, #64]	; (1000de2c <gapc_bond_cmd_handler+0x5c>)
1000ddec:	7003      	strb	r3, [r0, #0]
1000ddee:	230e      	movs	r3, #14
1000ddf0:	70c4      	strb	r4, [r0, #3]
1000ddf2:	4c0f      	ldr	r4, [pc, #60]	; (1000de30 <gapc_bond_cmd_handler+0x60>)
1000ddf4:	7043      	strb	r3, [r0, #1]
1000ddf6:	7083      	strb	r3, [r0, #2]
1000ddf8:	8823      	ldrh	r3, [r4, #0]
1000ddfa:	8824      	ldrh	r4, [r4, #0]
1000ddfc:	7103      	strb	r3, [r0, #4]
1000ddfe:	466b      	mov	r3, sp
1000de00:	781b      	ldrb	r3, [r3, #0]
1000de02:	0a24      	lsrs	r4, r4, #8
1000de04:	72c3      	strb	r3, [r0, #11]
1000de06:	466b      	mov	r3, sp
1000de08:	791b      	ldrb	r3, [r3, #4]
1000de0a:	7144      	strb	r4, [r0, #5]
1000de0c:	73c3      	strb	r3, [r0, #15]
1000de0e:	2308      	movs	r3, #8
1000de10:	7183      	strb	r3, [r0, #6]
1000de12:	2300      	movs	r3, #0
1000de14:	240a      	movs	r4, #10
1000de16:	7241      	strb	r1, [r0, #9]
1000de18:	71c3      	strb	r3, [r0, #7]
1000de1a:	2110      	movs	r1, #16
1000de1c:	4b05      	ldr	r3, [pc, #20]	; (1000de34 <gapc_bond_cmd_handler+0x64>)
1000de1e:	7307      	strb	r7, [r0, #12]
1000de20:	7346      	strb	r6, [r0, #13]
1000de22:	7385      	strb	r5, [r0, #14]
1000de24:	7204      	strb	r4, [r0, #8]
1000de26:	7282      	strb	r2, [r0, #10]
1000de28:	4798      	blx	r3
1000de2a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000de2c:	10014a94 	.word	0x10014a94
1000de30:	10014724 	.word	0x10014724
1000de34:	1000d8b1 	.word	0x1000d8b1

1000de38 <gapc_bond_ind>:
1000de38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000de3a:	780e      	ldrb	r6, [r1, #0]
1000de3c:	1c03      	adds	r3, r0, #0
1000de3e:	1eb0      	subs	r0, r6, #2
1000de40:	2805      	cmp	r0, #5
1000de42:	d85d      	bhi.n	1000df00 <gapc_bond_ind+0xc8>
1000de44:	1c15      	adds	r5, r2, #0
1000de46:	1c0c      	adds	r4, r1, #0
1000de48:	f001 f85a 	bl	1000ef00 <__gnu_thumb1_case_uqi>
1000de4c:	2f5a030d 	.word	0x2f5a030d
1000de50:	4740      	.short	0x4740
1000de52:	2009      	movs	r0, #9
1000de54:	2a00      	cmp	r2, #0
1000de56:	d054      	beq.n	1000df02 <gapc_bond_ind+0xca>
1000de58:	0a1b      	lsrs	r3, r3, #8
1000de5a:	8053      	strh	r3, [r2, #2]
1000de5c:	788b      	ldrb	r3, [r1, #2]
1000de5e:	4829      	ldr	r0, [pc, #164]	; (1000df04 <gapc_bond_ind+0xcc>)
1000de60:	7113      	strb	r3, [r2, #4]
1000de62:	2100      	movs	r1, #0
1000de64:	e01c      	b.n	1000dea0 <gapc_bond_ind+0x68>
1000de66:	2009      	movs	r0, #9
1000de68:	2a00      	cmp	r2, #0
1000de6a:	d04a      	beq.n	1000df02 <gapc_bond_ind+0xca>
1000de6c:	4c25      	ldr	r4, [pc, #148]	; (1000df04 <gapc_bond_ind+0xcc>)
1000de6e:	0a1b      	lsrs	r3, r3, #8
1000de70:	8053      	strh	r3, [r2, #2]
1000de72:	788b      	ldrb	r3, [r1, #2]
1000de74:	2700      	movs	r7, #0
1000de76:	1c10      	adds	r0, r2, #0
1000de78:	1c21      	adds	r1, r4, #0
1000de7a:	7013      	strb	r3, [r2, #0]
1000de7c:	4e22      	ldr	r6, [pc, #136]	; (1000df08 <gapc_bond_ind+0xd0>)
1000de7e:	7117      	strb	r7, [r2, #4]
1000de80:	312e      	adds	r1, #46	; 0x2e
1000de82:	2217      	movs	r2, #23
1000de84:	3032      	adds	r0, #50	; 0x32
1000de86:	47b0      	blx	r6
1000de88:	1c28      	adds	r0, r5, #0
1000de8a:	1c21      	adds	r1, r4, #0
1000de8c:	2210      	movs	r2, #16
1000de8e:	311e      	adds	r1, #30
1000de90:	3022      	adds	r0, #34	; 0x22
1000de92:	47b0      	blx	r6
1000de94:	1ca1      	adds	r1, r4, #2
1000de96:	1da8      	adds	r0, r5, #6
1000de98:	221c      	movs	r2, #28
1000de9a:	47b0      	blx	r6
1000de9c:	1c20      	adds	r0, r4, #0
1000de9e:	1c39      	adds	r1, r7, #0
1000dea0:	2246      	movs	r2, #70	; 0x46
1000dea2:	4b1a      	ldr	r3, [pc, #104]	; (1000df0c <gapc_bond_ind+0xd4>)
1000dea4:	4798      	blx	r3
1000dea6:	2009      	movs	r0, #9
1000dea8:	e02b      	b.n	1000df02 <gapc_bond_ind+0xca>
1000deaa:	4d16      	ldr	r5, [pc, #88]	; (1000df04 <gapc_bond_ind+0xcc>)
1000deac:	3102      	adds	r1, #2
1000deae:	1c28      	adds	r0, r5, #0
1000deb0:	2210      	movs	r2, #16
1000deb2:	4e15      	ldr	r6, [pc, #84]	; (1000df08 <gapc_bond_ind+0xd0>)
1000deb4:	302e      	adds	r0, #46	; 0x2e
1000deb6:	47b0      	blx	r6
1000deb8:	1c28      	adds	r0, r5, #0
1000deba:	1c21      	adds	r1, r4, #0
1000debc:	303f      	adds	r0, #63	; 0x3f
1000debe:	3112      	adds	r1, #18
1000dec0:	2206      	movs	r2, #6
1000dec2:	47b0      	blx	r6
1000dec4:	7e23      	ldrb	r3, [r4, #24]
1000dec6:	353e      	adds	r5, #62	; 0x3e
1000dec8:	702b      	strb	r3, [r5, #0]
1000deca:	e019      	b.n	1000df00 <gapc_bond_ind+0xc8>
1000decc:	480d      	ldr	r0, [pc, #52]	; (1000df04 <gapc_bond_ind+0xcc>)
1000dece:	3102      	adds	r1, #2
1000ded0:	2210      	movs	r2, #16
1000ded2:	4b0d      	ldr	r3, [pc, #52]	; (1000df08 <gapc_bond_ind+0xd0>)
1000ded4:	301e      	adds	r0, #30
1000ded6:	4798      	blx	r3
1000ded8:	e012      	b.n	1000df00 <gapc_bond_ind+0xc8>
1000deda:	4d0a      	ldr	r5, [pc, #40]	; (1000df04 <gapc_bond_ind+0xcc>)
1000dedc:	3102      	adds	r1, #2
1000dede:	2210      	movs	r2, #16
1000dee0:	4e09      	ldr	r6, [pc, #36]	; (1000df08 <gapc_bond_ind+0xd0>)
1000dee2:	1ca8      	adds	r0, r5, #2
1000dee4:	47b0      	blx	r6
1000dee6:	1c28      	adds	r0, r5, #0
1000dee8:	1c21      	adds	r1, r4, #0
1000deea:	7ce3      	ldrb	r3, [r4, #19]
1000deec:	7ca2      	ldrb	r2, [r4, #18]
1000deee:	021b      	lsls	r3, r3, #8
1000def0:	4313      	orrs	r3, r2
1000def2:	3014      	adds	r0, #20
1000def4:	3114      	adds	r1, #20
1000def6:	2208      	movs	r2, #8
1000def8:	826b      	strh	r3, [r5, #18]
1000defa:	47b0      	blx	r6
1000defc:	7f23      	ldrb	r3, [r4, #28]
1000defe:	772b      	strb	r3, [r5, #28]
1000df00:	2000      	movs	r0, #0
1000df02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000df04:	10013a34 	.word	0x10013a34
1000df08:	1001025f 	.word	0x1001025f
1000df0c:	10010271 	.word	0x10010271

1000df10 <gapc_bond_req_ind>:
1000df10:	b570      	push	{r4, r5, r6, lr}
1000df12:	780c      	ldrb	r4, [r1, #0]
1000df14:	1c03      	adds	r3, r0, #0
1000df16:	7849      	ldrb	r1, [r1, #1]
1000df18:	2c07      	cmp	r4, #7
1000df1a:	d85c      	bhi.n	1000dfd6 <gapc_bond_req_ind+0xc6>
1000df1c:	1c20      	adds	r0, r4, #0
1000df1e:	f000 ffef 	bl	1000ef00 <__gnu_thumb1_case_uqi>
1000df22:	5a04      	.short	0x5a04
1000df24:	5a0b5a5a 	.word	0x5a0b5a5a
1000df28:	1f1f      	.short	0x1f1f
1000df2a:	200a      	movs	r0, #10
1000df2c:	2a00      	cmp	r2, #0
1000df2e:	d053      	beq.n	1000dfd8 <gapc_bond_req_ind+0xc8>
1000df30:	0a1b      	lsrs	r3, r3, #8
1000df32:	8013      	strh	r3, [r2, #0]
1000df34:	7091      	strb	r1, [r2, #2]
1000df36:	e04f      	b.n	1000dfd8 <gapc_bond_req_ind+0xc8>
1000df38:	2a00      	cmp	r2, #0
1000df3a:	d00b      	beq.n	1000df54 <gapc_bond_req_ind+0x44>
1000df3c:	0a1b      	lsrs	r3, r3, #8
1000df3e:	8013      	strh	r3, [r2, #0]
1000df40:	2900      	cmp	r1, #0
1000df42:	d102      	bne.n	1000df4a <gapc_bond_req_ind+0x3a>
1000df44:	2301      	movs	r3, #1
1000df46:	7093      	strb	r3, [r2, #2]
1000df48:	e004      	b.n	1000df54 <gapc_bond_req_ind+0x44>
1000df4a:	2300      	movs	r3, #0
1000df4c:	7093      	strb	r3, [r2, #2]
1000df4e:	2902      	cmp	r1, #2
1000df50:	d102      	bne.n	1000df58 <gapc_bond_req_ind+0x48>
1000df52:	70d3      	strb	r3, [r2, #3]
1000df54:	200c      	movs	r0, #12
1000df56:	e03f      	b.n	1000dfd8 <gapc_bond_req_ind+0xc8>
1000df58:	2901      	cmp	r1, #1
1000df5a:	d1fb      	bne.n	1000df54 <gapc_bond_req_ind+0x44>
1000df5c:	70d1      	strb	r1, [r2, #3]
1000df5e:	e7f9      	b.n	1000df54 <gapc_bond_req_ind+0x44>
1000df60:	2214      	movs	r2, #20
1000df62:	481e      	ldr	r0, [pc, #120]	; (1000dfdc <gapc_bond_req_ind+0xcc>)
1000df64:	0a1b      	lsrs	r3, r3, #8
1000df66:	70c3      	strb	r3, [r0, #3]
1000df68:	4b1d      	ldr	r3, [pc, #116]	; (1000dfe0 <gapc_bond_req_ind+0xd0>)
1000df6a:	7002      	strb	r2, [r0, #0]
1000df6c:	3a06      	subs	r2, #6
1000df6e:	7042      	strb	r2, [r0, #1]
1000df70:	7082      	strb	r2, [r0, #2]
1000df72:	881a      	ldrh	r2, [r3, #0]
1000df74:	881b      	ldrh	r3, [r3, #0]
1000df76:	4e1b      	ldr	r6, [pc, #108]	; (1000dfe4 <gapc_bond_req_ind+0xd4>)
1000df78:	0a1b      	lsrs	r3, r3, #8
1000df7a:	7143      	strb	r3, [r0, #5]
1000df7c:	2301      	movs	r3, #1
1000df7e:	7102      	strb	r2, [r0, #4]
1000df80:	7204      	strb	r4, [r0, #8]
1000df82:	7243      	strb	r3, [r0, #9]
1000df84:	1c05      	adds	r5, r0, #0
1000df86:	1c31      	adds	r1, r6, #0
1000df88:	300a      	adds	r0, #10
1000df8a:	2c07      	cmp	r4, #7
1000df8c:	d116      	bne.n	1000dfbc <gapc_bond_req_ind+0xac>
1000df8e:	317e      	adds	r1, #126	; 0x7e
1000df90:	2210      	movs	r2, #16
1000df92:	4c15      	ldr	r4, [pc, #84]	; (1000dfe8 <gapc_bond_req_ind+0xd8>)
1000df94:	47a0      	blx	r4
1000df96:	1c33      	adds	r3, r6, #0
1000df98:	1c31      	adds	r1, r6, #0
1000df9a:	1c28      	adds	r0, r5, #0
1000df9c:	338e      	adds	r3, #142	; 0x8e
1000df9e:	881b      	ldrh	r3, [r3, #0]
1000dfa0:	3190      	adds	r1, #144	; 0x90
1000dfa2:	76ab      	strb	r3, [r5, #26]
1000dfa4:	2208      	movs	r2, #8
1000dfa6:	0a1b      	lsrs	r3, r3, #8
1000dfa8:	301c      	adds	r0, #28
1000dfaa:	76eb      	strb	r3, [r5, #27]
1000dfac:	47a0      	blx	r4
1000dfae:	1c31      	adds	r1, r6, #0
1000dfb0:	3198      	adds	r1, #152	; 0x98
1000dfb2:	780a      	ldrb	r2, [r1, #0]
1000dfb4:	1d6b      	adds	r3, r5, #5
1000dfb6:	77da      	strb	r2, [r3, #31]
1000dfb8:	2125      	movs	r1, #37	; 0x25
1000dfba:	e004      	b.n	1000dfc6 <gapc_bond_req_ind+0xb6>
1000dfbc:	319a      	adds	r1, #154	; 0x9a
1000dfbe:	2210      	movs	r2, #16
1000dfc0:	4b09      	ldr	r3, [pc, #36]	; (1000dfe8 <gapc_bond_req_ind+0xd8>)
1000dfc2:	4798      	blx	r3
1000dfc4:	211a      	movs	r1, #26
1000dfc6:	1c0b      	adds	r3, r1, #0
1000dfc8:	2400      	movs	r4, #0
1000dfca:	3b08      	subs	r3, #8
1000dfcc:	71ab      	strb	r3, [r5, #6]
1000dfce:	1c28      	adds	r0, r5, #0
1000dfd0:	4b06      	ldr	r3, [pc, #24]	; (1000dfec <gapc_bond_req_ind+0xdc>)
1000dfd2:	71ec      	strb	r4, [r5, #7]
1000dfd4:	4798      	blx	r3
1000dfd6:	2000      	movs	r0, #0
1000dfd8:	bd70      	pop	{r4, r5, r6, pc}
1000dfda:	46c0      	nop			; (mov r8, r8)
1000dfdc:	10014a94 	.word	0x10014a94
1000dfe0:	10014724 	.word	0x10014724
1000dfe4:	100147b6 	.word	0x100147b6
1000dfe8:	1001025f 	.word	0x1001025f
1000dfec:	1000d8b1 	.word	0x1000d8b1

1000dff0 <gapc_bond_cfm_handler_pair_resp>:
1000dff0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dff2:	b085      	sub	sp, #20
1000dff4:	1c07      	adds	r7, r0, #0
1000dff6:	a80a      	add	r0, sp, #40	; 0x28
1000dff8:	7806      	ldrb	r6, [r0, #0]
1000dffa:	a80b      	add	r0, sp, #44	; 0x2c
1000dffc:	7805      	ldrb	r5, [r0, #0]
1000dffe:	a80c      	add	r0, sp, #48	; 0x30
1000e000:	7800      	ldrb	r0, [r0, #0]
1000e002:	2414      	movs	r4, #20
1000e004:	9002      	str	r0, [sp, #8]
1000e006:	a80d      	add	r0, sp, #52	; 0x34
1000e008:	7800      	ldrb	r0, [r0, #0]
1000e00a:	9301      	str	r3, [sp, #4]
1000e00c:	9003      	str	r0, [sp, #12]
1000e00e:	a80e      	add	r0, sp, #56	; 0x38
1000e010:	8800      	ldrh	r0, [r0, #0]
1000e012:	4684      	mov	ip, r0
1000e014:	4812      	ldr	r0, [pc, #72]	; (1000e060 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000e016:	7004      	strb	r4, [r0, #0]
1000e018:	3c06      	subs	r4, #6
1000e01a:	7044      	strb	r4, [r0, #1]
1000e01c:	7084      	strb	r4, [r0, #2]
1000e01e:	4664      	mov	r4, ip
1000e020:	70c4      	strb	r4, [r0, #3]
1000e022:	4c10      	ldr	r4, [pc, #64]	; (1000e064 <gapc_bond_cfm_handler_pair_resp+0x74>)
1000e024:	7247      	strb	r7, [r0, #9]
1000e026:	8823      	ldrh	r3, [r4, #0]
1000e028:	8824      	ldrh	r4, [r4, #0]
1000e02a:	7103      	strb	r3, [r0, #4]
1000e02c:	466b      	mov	r3, sp
1000e02e:	791b      	ldrb	r3, [r3, #4]
1000e030:	0a24      	lsrs	r4, r4, #8
1000e032:	7303      	strb	r3, [r0, #12]
1000e034:	466b      	mov	r3, sp
1000e036:	7a1b      	ldrb	r3, [r3, #8]
1000e038:	7144      	strb	r4, [r0, #5]
1000e03a:	73c3      	strb	r3, [r0, #15]
1000e03c:	466b      	mov	r3, sp
1000e03e:	7b1b      	ldrb	r3, [r3, #12]
1000e040:	2401      	movs	r4, #1
1000e042:	7403      	strb	r3, [r0, #16]
1000e044:	2309      	movs	r3, #9
1000e046:	7183      	strb	r3, [r0, #6]
1000e048:	2300      	movs	r3, #0
1000e04a:	7204      	strb	r4, [r0, #8]
1000e04c:	7281      	strb	r1, [r0, #10]
1000e04e:	72c2      	strb	r2, [r0, #11]
1000e050:	7346      	strb	r6, [r0, #13]
1000e052:	7385      	strb	r5, [r0, #14]
1000e054:	71c3      	strb	r3, [r0, #7]
1000e056:	2111      	movs	r1, #17
1000e058:	4b03      	ldr	r3, [pc, #12]	; (1000e068 <gapc_bond_cfm_handler_pair_resp+0x78>)
1000e05a:	4798      	blx	r3
1000e05c:	b005      	add	sp, #20
1000e05e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e060:	10014a94 	.word	0x10014a94
1000e064:	10014724 	.word	0x10014724
1000e068:	1000d8b1 	.word	0x1000d8b1

1000e06c <gapc_bond_cfm_handler_key_exch>:
1000e06c:	b538      	push	{r3, r4, r5, lr}
1000e06e:	2514      	movs	r5, #20
1000e070:	4c0d      	ldr	r4, [pc, #52]	; (1000e0a8 <gapc_bond_cfm_handler_key_exch+0x3c>)
1000e072:	70e3      	strb	r3, [r4, #3]
1000e074:	4b0d      	ldr	r3, [pc, #52]	; (1000e0ac <gapc_bond_cfm_handler_key_exch+0x40>)
1000e076:	7025      	strb	r5, [r4, #0]
1000e078:	3d06      	subs	r5, #6
1000e07a:	7065      	strb	r5, [r4, #1]
1000e07c:	70a5      	strb	r5, [r4, #2]
1000e07e:	881d      	ldrh	r5, [r3, #0]
1000e080:	881b      	ldrh	r3, [r3, #0]
1000e082:	7220      	strb	r0, [r4, #8]
1000e084:	0a1b      	lsrs	r3, r3, #8
1000e086:	7163      	strb	r3, [r4, #5]
1000e088:	7261      	strb	r1, [r4, #9]
1000e08a:	4b09      	ldr	r3, [pc, #36]	; (1000e0b0 <gapc_bond_cfm_handler_key_exch+0x44>)
1000e08c:	1c11      	adds	r1, r2, #0
1000e08e:	4809      	ldr	r0, [pc, #36]	; (1000e0b4 <gapc_bond_cfm_handler_key_exch+0x48>)
1000e090:	2210      	movs	r2, #16
1000e092:	7125      	strb	r5, [r4, #4]
1000e094:	4798      	blx	r3
1000e096:	2312      	movs	r3, #18
1000e098:	71a3      	strb	r3, [r4, #6]
1000e09a:	2300      	movs	r3, #0
1000e09c:	1c20      	adds	r0, r4, #0
1000e09e:	71e3      	strb	r3, [r4, #7]
1000e0a0:	211a      	movs	r1, #26
1000e0a2:	4b05      	ldr	r3, [pc, #20]	; (1000e0b8 <gapc_bond_cfm_handler_key_exch+0x4c>)
1000e0a4:	4798      	blx	r3
1000e0a6:	bd38      	pop	{r3, r4, r5, pc}
1000e0a8:	10014a94 	.word	0x10014a94
1000e0ac:	10014724 	.word	0x10014724
1000e0b0:	1001025f 	.word	0x1001025f
1000e0b4:	10014a9e 	.word	0x10014a9e
1000e0b8:	1000d8b1 	.word	0x1000d8b1

1000e0bc <gapc_security_cmd_handler>:
1000e0bc:	221a      	movs	r2, #26
1000e0be:	b508      	push	{r3, lr}
1000e0c0:	4b0b      	ldr	r3, [pc, #44]	; (1000e0f0 <gapc_security_cmd_handler+0x34>)
1000e0c2:	701a      	strb	r2, [r3, #0]
1000e0c4:	3a0c      	subs	r2, #12
1000e0c6:	705a      	strb	r2, [r3, #1]
1000e0c8:	709a      	strb	r2, [r3, #2]
1000e0ca:	4a0a      	ldr	r2, [pc, #40]	; (1000e0f4 <gapc_security_cmd_handler+0x38>)
1000e0cc:	70d8      	strb	r0, [r3, #3]
1000e0ce:	8810      	ldrh	r0, [r2, #0]
1000e0d0:	8812      	ldrh	r2, [r2, #0]
1000e0d2:	7118      	strb	r0, [r3, #4]
1000e0d4:	0a12      	lsrs	r2, r2, #8
1000e0d6:	715a      	strb	r2, [r3, #5]
1000e0d8:	220c      	movs	r2, #12
1000e0da:	721a      	strb	r2, [r3, #8]
1000e0dc:	3a0a      	subs	r2, #10
1000e0de:	719a      	strb	r2, [r3, #6]
1000e0e0:	2200      	movs	r2, #0
1000e0e2:	7259      	strb	r1, [r3, #9]
1000e0e4:	71da      	strb	r2, [r3, #7]
1000e0e6:	1c18      	adds	r0, r3, #0
1000e0e8:	210a      	movs	r1, #10
1000e0ea:	4b03      	ldr	r3, [pc, #12]	; (1000e0f8 <gapc_security_cmd_handler+0x3c>)
1000e0ec:	4798      	blx	r3
1000e0ee:	bd08      	pop	{r3, pc}
1000e0f0:	10014a94 	.word	0x10014a94
1000e0f4:	10014724 	.word	0x10014724
1000e0f8:	1000d8b1 	.word	0x1000d8b1

1000e0fc <gapc_encrypt_cmd_handler>:
1000e0fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e0fe:	2500      	movs	r5, #0
1000e100:	b089      	sub	sp, #36	; 0x24
1000e102:	9306      	str	r3, [sp, #24]
1000e104:	ab0e      	add	r3, sp, #56	; 0x38
1000e106:	781b      	ldrb	r3, [r3, #0]
1000e108:	1c17      	adds	r7, r2, #0
1000e10a:	9307      	str	r3, [sp, #28]
1000e10c:	ab0f      	add	r3, sp, #60	; 0x3c
1000e10e:	781b      	ldrb	r3, [r3, #0]
1000e110:	4a19      	ldr	r2, [pc, #100]	; (1000e178 <gapc_encrypt_cmd_handler+0x7c>)
1000e112:	1c06      	adds	r6, r0, #0
1000e114:	9105      	str	r1, [sp, #20]
1000e116:	9300      	str	r3, [sp, #0]
1000e118:	9002      	str	r0, [sp, #8]
1000e11a:	1c29      	adds	r1, r5, #0
1000e11c:	1c2b      	adds	r3, r5, #0
1000e11e:	9501      	str	r5, [sp, #4]
1000e120:	1c10      	adds	r0, r2, #0
1000e122:	4c16      	ldr	r4, [pc, #88]	; (1000e17c <gapc_encrypt_cmd_handler+0x80>)
1000e124:	47a0      	blx	r4
1000e126:	2316      	movs	r3, #22
1000e128:	4c15      	ldr	r4, [pc, #84]	; (1000e180 <gapc_encrypt_cmd_handler+0x84>)
1000e12a:	9905      	ldr	r1, [sp, #20]
1000e12c:	7023      	strb	r3, [r4, #0]
1000e12e:	3b08      	subs	r3, #8
1000e130:	7063      	strb	r3, [r4, #1]
1000e132:	70a3      	strb	r3, [r4, #2]
1000e134:	4b13      	ldr	r3, [pc, #76]	; (1000e184 <gapc_encrypt_cmd_handler+0x88>)
1000e136:	70e6      	strb	r6, [r4, #3]
1000e138:	881a      	ldrh	r2, [r3, #0]
1000e13a:	881b      	ldrh	r3, [r3, #0]
1000e13c:	7122      	strb	r2, [r4, #4]
1000e13e:	0a1b      	lsrs	r3, r3, #8
1000e140:	7163      	strb	r3, [r4, #5]
1000e142:	230b      	movs	r3, #11
1000e144:	4e10      	ldr	r6, [pc, #64]	; (1000e188 <gapc_encrypt_cmd_handler+0x8c>)
1000e146:	2210      	movs	r2, #16
1000e148:	4810      	ldr	r0, [pc, #64]	; (1000e18c <gapc_encrypt_cmd_handler+0x90>)
1000e14a:	7223      	strb	r3, [r4, #8]
1000e14c:	7265      	strb	r5, [r4, #9]
1000e14e:	47b0      	blx	r6
1000e150:	0a3b      	lsrs	r3, r7, #8
1000e152:	9906      	ldr	r1, [sp, #24]
1000e154:	2208      	movs	r2, #8
1000e156:	480e      	ldr	r0, [pc, #56]	; (1000e190 <gapc_encrypt_cmd_handler+0x94>)
1000e158:	76e3      	strb	r3, [r4, #27]
1000e15a:	76a7      	strb	r7, [r4, #26]
1000e15c:	47b0      	blx	r6
1000e15e:	466a      	mov	r2, sp
1000e160:	7f12      	ldrb	r2, [r2, #28]
1000e162:	1d63      	adds	r3, r4, #5
1000e164:	77da      	strb	r2, [r3, #31]
1000e166:	231d      	movs	r3, #29
1000e168:	1c20      	adds	r0, r4, #0
1000e16a:	71a3      	strb	r3, [r4, #6]
1000e16c:	2125      	movs	r1, #37	; 0x25
1000e16e:	4b09      	ldr	r3, [pc, #36]	; (1000e194 <gapc_encrypt_cmd_handler+0x98>)
1000e170:	71e5      	strb	r5, [r4, #7]
1000e172:	4798      	blx	r3
1000e174:	b009      	add	sp, #36	; 0x24
1000e176:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e178:	10013a14 	.word	0x10013a14
1000e17c:	1000dbb5 	.word	0x1000dbb5
1000e180:	10014a94 	.word	0x10014a94
1000e184:	10014724 	.word	0x10014724
1000e188:	1001025f 	.word	0x1001025f
1000e18c:	10014a9e 	.word	0x10014a9e
1000e190:	10014ab0 	.word	0x10014ab0
1000e194:	1000d8b1 	.word	0x1000d8b1

1000e198 <gapc_encrypt_req_ind>:
1000e198:	b508      	push	{r3, lr}
1000e19a:	0a00      	lsrs	r0, r0, #8
1000e19c:	8010      	strh	r0, [r2, #0]
1000e19e:	784b      	ldrb	r3, [r1, #1]
1000e1a0:	7808      	ldrb	r0, [r1, #0]
1000e1a2:	021b      	lsls	r3, r3, #8
1000e1a4:	4303      	orrs	r3, r0
1000e1a6:	8053      	strh	r3, [r2, #2]
1000e1a8:	1d10      	adds	r0, r2, #4
1000e1aa:	3102      	adds	r1, #2
1000e1ac:	2208      	movs	r2, #8
1000e1ae:	4b01      	ldr	r3, [pc, #4]	; (1000e1b4 <gapc_encrypt_req_ind+0x1c>)
1000e1b0:	4798      	blx	r3
1000e1b2:	bd08      	pop	{r3, pc}
1000e1b4:	1001025f 	.word	0x1001025f

1000e1b8 <gapc_encrypt_cfm_handler>:
1000e1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e1ba:	2500      	movs	r5, #0
1000e1bc:	b087      	sub	sp, #28
1000e1be:	9304      	str	r3, [sp, #16]
1000e1c0:	ab0c      	add	r3, sp, #48	; 0x30
1000e1c2:	781b      	ldrb	r3, [r3, #0]
1000e1c4:	1c17      	adds	r7, r2, #0
1000e1c6:	4a15      	ldr	r2, [pc, #84]	; (1000e21c <gapc_encrypt_cfm_handler+0x64>)
1000e1c8:	1c06      	adds	r6, r0, #0
1000e1ca:	9305      	str	r3, [sp, #20]
1000e1cc:	9100      	str	r1, [sp, #0]
1000e1ce:	9002      	str	r0, [sp, #8]
1000e1d0:	1c29      	adds	r1, r5, #0
1000e1d2:	1c2b      	adds	r3, r5, #0
1000e1d4:	9501      	str	r5, [sp, #4]
1000e1d6:	1c10      	adds	r0, r2, #0
1000e1d8:	4c11      	ldr	r4, [pc, #68]	; (1000e220 <gapc_encrypt_cfm_handler+0x68>)
1000e1da:	47a0      	blx	r4
1000e1dc:	2318      	movs	r3, #24
1000e1de:	4c11      	ldr	r4, [pc, #68]	; (1000e224 <gapc_encrypt_cfm_handler+0x6c>)
1000e1e0:	9904      	ldr	r1, [sp, #16]
1000e1e2:	7023      	strb	r3, [r4, #0]
1000e1e4:	3b0a      	subs	r3, #10
1000e1e6:	7063      	strb	r3, [r4, #1]
1000e1e8:	70a3      	strb	r3, [r4, #2]
1000e1ea:	4b0f      	ldr	r3, [pc, #60]	; (1000e228 <gapc_encrypt_cfm_handler+0x70>)
1000e1ec:	480f      	ldr	r0, [pc, #60]	; (1000e22c <gapc_encrypt_cfm_handler+0x74>)
1000e1ee:	881a      	ldrh	r2, [r3, #0]
1000e1f0:	881b      	ldrh	r3, [r3, #0]
1000e1f2:	7122      	strb	r2, [r4, #4]
1000e1f4:	0a1b      	lsrs	r3, r3, #8
1000e1f6:	7163      	strb	r3, [r4, #5]
1000e1f8:	2210      	movs	r2, #16
1000e1fa:	4b0d      	ldr	r3, [pc, #52]	; (1000e230 <gapc_encrypt_cfm_handler+0x78>)
1000e1fc:	70e6      	strb	r6, [r4, #3]
1000e1fe:	7227      	strb	r7, [r4, #8]
1000e200:	4798      	blx	r3
1000e202:	466b      	mov	r3, sp
1000e204:	7d1b      	ldrb	r3, [r3, #20]
1000e206:	1c20      	adds	r0, r4, #0
1000e208:	7663      	strb	r3, [r4, #25]
1000e20a:	2312      	movs	r3, #18
1000e20c:	211a      	movs	r1, #26
1000e20e:	71a3      	strb	r3, [r4, #6]
1000e210:	4b08      	ldr	r3, [pc, #32]	; (1000e234 <gapc_encrypt_cfm_handler+0x7c>)
1000e212:	71e5      	strb	r5, [r4, #7]
1000e214:	4798      	blx	r3
1000e216:	b007      	add	sp, #28
1000e218:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e21a:	46c0      	nop			; (mov r8, r8)
1000e21c:	10013a24 	.word	0x10013a24
1000e220:	1000dbb5 	.word	0x1000dbb5
1000e224:	10014a94 	.word	0x10014a94
1000e228:	10014724 	.word	0x10014724
1000e22c:	10014a9d 	.word	0x10014a9d
1000e230:	1001025f 	.word	0x1001025f
1000e234:	1000d8b1 	.word	0x1000d8b1

1000e238 <gapc_encrypt_ind>:
1000e238:	780b      	ldrb	r3, [r1, #0]
1000e23a:	0a00      	lsrs	r0, r0, #8
1000e23c:	70d3      	strb	r3, [r2, #3]
1000e23e:	2300      	movs	r3, #0
1000e240:	8010      	strh	r0, [r2, #0]
1000e242:	7093      	strb	r3, [r2, #2]
1000e244:	4770      	bx	lr
	...

1000e248 <gapc_param_update_cfm_handler>:
1000e248:	b538      	push	{r3, r4, r5, lr}
1000e24a:	2410      	movs	r4, #16
1000e24c:	1c05      	adds	r5, r0, #0
1000e24e:	480e      	ldr	r0, [pc, #56]	; (1000e288 <gapc_param_update_cfm_handler+0x40>)
1000e250:	7004      	strb	r4, [r0, #0]
1000e252:	3c02      	subs	r4, #2
1000e254:	7044      	strb	r4, [r0, #1]
1000e256:	7084      	strb	r4, [r0, #2]
1000e258:	4c0c      	ldr	r4, [pc, #48]	; (1000e28c <gapc_param_update_cfm_handler+0x44>)
1000e25a:	70c5      	strb	r5, [r0, #3]
1000e25c:	8825      	ldrh	r5, [r4, #0]
1000e25e:	8824      	ldrh	r4, [r4, #0]
1000e260:	72c3      	strb	r3, [r0, #11]
1000e262:	0a1b      	lsrs	r3, r3, #8
1000e264:	0a24      	lsrs	r4, r4, #8
1000e266:	7303      	strb	r3, [r0, #12]
1000e268:	2305      	movs	r3, #5
1000e26a:	7144      	strb	r4, [r0, #5]
1000e26c:	2400      	movs	r4, #0
1000e26e:	7201      	strb	r1, [r0, #8]
1000e270:	7242      	strb	r2, [r0, #9]
1000e272:	7183      	strb	r3, [r0, #6]
1000e274:	0a12      	lsrs	r2, r2, #8
1000e276:	210d      	movs	r1, #13
1000e278:	4b05      	ldr	r3, [pc, #20]	; (1000e290 <gapc_param_update_cfm_handler+0x48>)
1000e27a:	7105      	strb	r5, [r0, #4]
1000e27c:	7282      	strb	r2, [r0, #10]
1000e27e:	71c4      	strb	r4, [r0, #7]
1000e280:	4798      	blx	r3
1000e282:	1c20      	adds	r0, r4, #0
1000e284:	bd38      	pop	{r3, r4, r5, pc}
1000e286:	46c0      	nop			; (mov r8, r8)
1000e288:	10014a94 	.word	0x10014a94
1000e28c:	10014724 	.word	0x10014724
1000e290:	1000d8b1 	.word	0x1000d8b1

1000e294 <gapc_param_updated_ind>:
1000e294:	2300      	movs	r3, #0
1000e296:	0a00      	lsrs	r0, r0, #8
1000e298:	8010      	strh	r0, [r2, #0]
1000e29a:	7093      	strb	r3, [r2, #2]
1000e29c:	784b      	ldrb	r3, [r1, #1]
1000e29e:	7808      	ldrb	r0, [r1, #0]
1000e2a0:	021b      	lsls	r3, r3, #8
1000e2a2:	4303      	orrs	r3, r0
1000e2a4:	8093      	strh	r3, [r2, #4]
1000e2a6:	78cb      	ldrb	r3, [r1, #3]
1000e2a8:	7888      	ldrb	r0, [r1, #2]
1000e2aa:	021b      	lsls	r3, r3, #8
1000e2ac:	4303      	orrs	r3, r0
1000e2ae:	80d3      	strh	r3, [r2, #6]
1000e2b0:	794b      	ldrb	r3, [r1, #5]
1000e2b2:	7909      	ldrb	r1, [r1, #4]
1000e2b4:	021b      	lsls	r3, r3, #8
1000e2b6:	430b      	orrs	r3, r1
1000e2b8:	2007      	movs	r0, #7
1000e2ba:	8113      	strh	r3, [r2, #8]
1000e2bc:	4770      	bx	lr

1000e2be <gapc_param_updated_req_ind>:
1000e2be:	0a00      	lsrs	r0, r0, #8
1000e2c0:	8010      	strh	r0, [r2, #0]
1000e2c2:	784b      	ldrb	r3, [r1, #1]
1000e2c4:	7808      	ldrb	r0, [r1, #0]
1000e2c6:	021b      	lsls	r3, r3, #8
1000e2c8:	4303      	orrs	r3, r0
1000e2ca:	8053      	strh	r3, [r2, #2]
1000e2cc:	78cb      	ldrb	r3, [r1, #3]
1000e2ce:	7888      	ldrb	r0, [r1, #2]
1000e2d0:	021b      	lsls	r3, r3, #8
1000e2d2:	4303      	orrs	r3, r0
1000e2d4:	8093      	strh	r3, [r2, #4]
1000e2d6:	794b      	ldrb	r3, [r1, #5]
1000e2d8:	7908      	ldrb	r0, [r1, #4]
1000e2da:	021b      	lsls	r3, r3, #8
1000e2dc:	4303      	orrs	r3, r0
1000e2de:	80d3      	strh	r3, [r2, #6]
1000e2e0:	79cb      	ldrb	r3, [r1, #7]
1000e2e2:	7989      	ldrb	r1, [r1, #6]
1000e2e4:	021b      	lsls	r3, r3, #8
1000e2e6:	430b      	orrs	r3, r1
1000e2e8:	2008      	movs	r0, #8
1000e2ea:	8113      	strh	r3, [r2, #8]
1000e2ec:	4770      	bx	lr
	...

1000e2f0 <gapc_dev_info_req_ind_handler>:
1000e2f0:	b508      	push	{r3, lr}
1000e2f2:	1c0b      	adds	r3, r1, #0
1000e2f4:	0a01      	lsrs	r1, r0, #8
1000e2f6:	8011      	strh	r1, [r2, #0]
1000e2f8:	7818      	ldrb	r0, [r3, #0]
1000e2fa:	7090      	strb	r0, [r2, #2]
1000e2fc:	2800      	cmp	r0, #0
1000e2fe:	d104      	bne.n	1000e30a <gapc_dev_info_req_ind_handler+0x1a>
1000e300:	4b03      	ldr	r3, [pc, #12]	; (1000e310 <gapc_dev_info_req_ind_handler+0x20>)
1000e302:	33aa      	adds	r3, #170	; 0xaa
1000e304:	881b      	ldrh	r3, [r3, #0]
1000e306:	2b00      	cmp	r3, #0
1000e308:	d001      	beq.n	1000e30e <gapc_dev_info_req_ind_handler+0x1e>
1000e30a:	4b02      	ldr	r3, [pc, #8]	; (1000e314 <gapc_dev_info_req_ind_handler+0x24>)
1000e30c:	4798      	blx	r3
1000e30e:	bd08      	pop	{r3, pc}
1000e310:	100147b6 	.word	0x100147b6
1000e314:	1000d9c1 	.word	0x1000d9c1

1000e318 <gapc_sec_req_ind>:
1000e318:	0a00      	lsrs	r0, r0, #8
1000e31a:	8010      	strh	r0, [r2, #0]
1000e31c:	7809      	ldrb	r1, [r1, #0]
1000e31e:	2301      	movs	r3, #1
1000e320:	1c08      	adds	r0, r1, #0
1000e322:	0889      	lsrs	r1, r1, #2
1000e324:	4018      	ands	r0, r3
1000e326:	400b      	ands	r3, r1
1000e328:	70d0      	strb	r0, [r2, #3]
1000e32a:	7113      	strb	r3, [r2, #4]
1000e32c:	4770      	bx	lr

1000e32e <gapc_sign_counter_ind_handler>:
1000e32e:	0a00      	lsrs	r0, r0, #8
1000e330:	8010      	strh	r0, [r2, #0]
1000e332:	784b      	ldrb	r3, [r1, #1]
1000e334:	0218      	lsls	r0, r3, #8
1000e336:	788b      	ldrb	r3, [r1, #2]
1000e338:	041b      	lsls	r3, r3, #16
1000e33a:	4303      	orrs	r3, r0
1000e33c:	7808      	ldrb	r0, [r1, #0]
1000e33e:	4303      	orrs	r3, r0
1000e340:	78c8      	ldrb	r0, [r1, #3]
1000e342:	0600      	lsls	r0, r0, #24
1000e344:	4303      	orrs	r3, r0
1000e346:	6053      	str	r3, [r2, #4]
1000e348:	794b      	ldrb	r3, [r1, #5]
1000e34a:	0218      	lsls	r0, r3, #8
1000e34c:	798b      	ldrb	r3, [r1, #6]
1000e34e:	041b      	lsls	r3, r3, #16
1000e350:	4303      	orrs	r3, r0
1000e352:	7908      	ldrb	r0, [r1, #4]
1000e354:	79c9      	ldrb	r1, [r1, #7]
1000e356:	4303      	orrs	r3, r0
1000e358:	0609      	lsls	r1, r1, #24
1000e35a:	430b      	orrs	r3, r1
1000e35c:	2000      	movs	r0, #0
1000e35e:	6093      	str	r3, [r2, #8]
1000e360:	4770      	bx	lr
	...

1000e364 <gapc_peer_att_info_ind_handler>:
1000e364:	b510      	push	{r4, lr}
1000e366:	0a00      	lsrs	r0, r0, #8
1000e368:	8010      	strh	r0, [r2, #0]
1000e36a:	7808      	ldrb	r0, [r1, #0]
1000e36c:	7090      	strb	r0, [r2, #2]
1000e36e:	788b      	ldrb	r3, [r1, #2]
1000e370:	784c      	ldrb	r4, [r1, #1]
1000e372:	021b      	lsls	r3, r3, #8
1000e374:	4323      	orrs	r3, r4
1000e376:	8093      	strh	r3, [r2, #4]
1000e378:	2801      	cmp	r0, #1
1000e37a:	d027      	beq.n	1000e3cc <gapc_peer_att_info_ind_handler+0x68>
1000e37c:	2800      	cmp	r0, #0
1000e37e:	d017      	beq.n	1000e3b0 <gapc_peer_att_info_ind_handler+0x4c>
1000e380:	2802      	cmp	r0, #2
1000e382:	d12a      	bne.n	1000e3da <gapc_peer_att_info_ind_handler+0x76>
1000e384:	790b      	ldrb	r3, [r1, #4]
1000e386:	78c8      	ldrb	r0, [r1, #3]
1000e388:	021b      	lsls	r3, r3, #8
1000e38a:	4303      	orrs	r3, r0
1000e38c:	8113      	strh	r3, [r2, #8]
1000e38e:	798b      	ldrb	r3, [r1, #6]
1000e390:	7948      	ldrb	r0, [r1, #5]
1000e392:	021b      	lsls	r3, r3, #8
1000e394:	4303      	orrs	r3, r0
1000e396:	80d3      	strh	r3, [r2, #6]
1000e398:	7a0b      	ldrb	r3, [r1, #8]
1000e39a:	79c8      	ldrb	r0, [r1, #7]
1000e39c:	021b      	lsls	r3, r3, #8
1000e39e:	4303      	orrs	r3, r0
1000e3a0:	8193      	strh	r3, [r2, #12]
1000e3a2:	7a8b      	ldrb	r3, [r1, #10]
1000e3a4:	7a49      	ldrb	r1, [r1, #9]
1000e3a6:	021b      	lsls	r3, r3, #8
1000e3a8:	430b      	orrs	r3, r1
1000e3aa:	8153      	strh	r3, [r2, #10]
1000e3ac:	2306      	movs	r3, #6
1000e3ae:	e013      	b.n	1000e3d8 <gapc_peer_att_info_ind_handler+0x74>
1000e3b0:	1c14      	adds	r4, r2, #0
1000e3b2:	1c20      	adds	r0, r4, #0
1000e3b4:	790a      	ldrb	r2, [r1, #4]
1000e3b6:	78cb      	ldrb	r3, [r1, #3]
1000e3b8:	0212      	lsls	r2, r2, #8
1000e3ba:	431a      	orrs	r2, r3
1000e3bc:	80e2      	strh	r2, [r4, #6]
1000e3be:	4b07      	ldr	r3, [pc, #28]	; (1000e3dc <gapc_peer_att_info_ind_handler+0x78>)
1000e3c0:	3008      	adds	r0, #8
1000e3c2:	3105      	adds	r1, #5
1000e3c4:	4798      	blx	r3
1000e3c6:	2302      	movs	r3, #2
1000e3c8:	70a3      	strb	r3, [r4, #2]
1000e3ca:	e006      	b.n	1000e3da <gapc_peer_att_info_ind_handler+0x76>
1000e3cc:	790b      	ldrb	r3, [r1, #4]
1000e3ce:	78c9      	ldrb	r1, [r1, #3]
1000e3d0:	021b      	lsls	r3, r3, #8
1000e3d2:	430b      	orrs	r3, r1
1000e3d4:	80d3      	strh	r3, [r2, #6]
1000e3d6:	2305      	movs	r3, #5
1000e3d8:	7093      	strb	r3, [r2, #2]
1000e3da:	bd10      	pop	{r4, pc}
1000e3dc:	1001025f 	.word	0x1001025f

1000e3e0 <gapc_con_channel_map_ind_handler>:
1000e3e0:	b508      	push	{r3, lr}
1000e3e2:	2300      	movs	r3, #0
1000e3e4:	0a00      	lsrs	r0, r0, #8
1000e3e6:	7013      	strb	r3, [r2, #0]
1000e3e8:	8050      	strh	r0, [r2, #2]
1000e3ea:	4b02      	ldr	r3, [pc, #8]	; (1000e3f4 <gapc_con_channel_map_ind_handler+0x14>)
1000e3ec:	1d10      	adds	r0, r2, #4
1000e3ee:	2205      	movs	r2, #5
1000e3f0:	4798      	blx	r3
1000e3f2:	bd08      	pop	{r3, pc}
1000e3f4:	1001025f 	.word	0x1001025f

1000e3f8 <gapc_lecb_connected>:
1000e3f8:	7843      	ldrb	r3, [r0, #1]
1000e3fa:	7802      	ldrb	r2, [r0, #0]
1000e3fc:	021b      	lsls	r3, r3, #8
1000e3fe:	4313      	orrs	r3, r2
1000e400:	800b      	strh	r3, [r1, #0]
1000e402:	78c3      	ldrb	r3, [r0, #3]
1000e404:	7882      	ldrb	r2, [r0, #2]
1000e406:	021b      	lsls	r3, r3, #8
1000e408:	4313      	orrs	r3, r2
1000e40a:	804b      	strh	r3, [r1, #2]
1000e40c:	7943      	ldrb	r3, [r0, #5]
1000e40e:	7902      	ldrb	r2, [r0, #4]
1000e410:	021b      	lsls	r3, r3, #8
1000e412:	4313      	orrs	r3, r2
1000e414:	808b      	strh	r3, [r1, #4]
1000e416:	79c3      	ldrb	r3, [r0, #7]
1000e418:	7982      	ldrb	r2, [r0, #6]
1000e41a:	021b      	lsls	r3, r3, #8
1000e41c:	4313      	orrs	r3, r2
1000e41e:	80cb      	strh	r3, [r1, #6]
1000e420:	2300      	movs	r3, #0
1000e422:	720b      	strb	r3, [r1, #8]
1000e424:	4770      	bx	lr

1000e426 <gapc_lecb_disconnected>:
1000e426:	7843      	ldrb	r3, [r0, #1]
1000e428:	7802      	ldrb	r2, [r0, #0]
1000e42a:	021b      	lsls	r3, r3, #8
1000e42c:	4313      	orrs	r3, r2
1000e42e:	800b      	strh	r3, [r1, #0]
1000e430:	78c3      	ldrb	r3, [r0, #3]
1000e432:	7882      	ldrb	r2, [r0, #2]
1000e434:	021b      	lsls	r3, r3, #8
1000e436:	4313      	orrs	r3, r2
1000e438:	804b      	strh	r3, [r1, #2]
1000e43a:	4770      	bx	lr

1000e43c <gapc_lecb_connect_req_ind>:
1000e43c:	7843      	ldrb	r3, [r0, #1]
1000e43e:	7802      	ldrb	r2, [r0, #0]
1000e440:	021b      	lsls	r3, r3, #8
1000e442:	4313      	orrs	r3, r2
1000e444:	800b      	strh	r3, [r1, #0]
1000e446:	78c3      	ldrb	r3, [r0, #3]
1000e448:	7882      	ldrb	r2, [r0, #2]
1000e44a:	021b      	lsls	r3, r3, #8
1000e44c:	4313      	orrs	r3, r2
1000e44e:	804b      	strh	r3, [r1, #2]
1000e450:	7943      	ldrb	r3, [r0, #5]
1000e452:	7902      	ldrb	r2, [r0, #4]
1000e454:	021b      	lsls	r3, r3, #8
1000e456:	4313      	orrs	r3, r2
1000e458:	808b      	strh	r3, [r1, #4]
1000e45a:	79c3      	ldrb	r3, [r0, #7]
1000e45c:	7982      	ldrb	r2, [r0, #6]
1000e45e:	021b      	lsls	r3, r3, #8
1000e460:	4313      	orrs	r3, r2
1000e462:	80cb      	strh	r3, [r1, #6]
1000e464:	4770      	bx	lr

1000e466 <gapc_lecb_add_credit_resp_handler>:
1000e466:	7843      	ldrb	r3, [r0, #1]
1000e468:	7802      	ldrb	r2, [r0, #0]
1000e46a:	021b      	lsls	r3, r3, #8
1000e46c:	4313      	orrs	r3, r2
1000e46e:	800b      	strh	r3, [r1, #0]
1000e470:	78c3      	ldrb	r3, [r0, #3]
1000e472:	7882      	ldrb	r2, [r0, #2]
1000e474:	021b      	lsls	r3, r3, #8
1000e476:	4313      	orrs	r3, r2
1000e478:	804b      	strh	r3, [r1, #2]
1000e47a:	7943      	ldrb	r3, [r0, #5]
1000e47c:	7902      	ldrb	r2, [r0, #4]
1000e47e:	021b      	lsls	r3, r3, #8
1000e480:	4313      	orrs	r3, r2
1000e482:	808b      	strh	r3, [r1, #4]
1000e484:	4770      	bx	lr
	...

1000e488 <gapm_reset_req_handler>:
1000e488:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000e48a:	466b      	mov	r3, sp
1000e48c:	4915      	ldr	r1, [pc, #84]	; (1000e4e4 <gapm_reset_req_handler+0x5c>)
1000e48e:	4816      	ldr	r0, [pc, #88]	; (1000e4e8 <gapm_reset_req_handler+0x60>)
1000e490:	880c      	ldrh	r4, [r1, #0]
1000e492:	8809      	ldrh	r1, [r1, #0]
1000e494:	1ddd      	adds	r5, r3, #7
1000e496:	0a09      	lsrs	r1, r1, #8
1000e498:	2300      	movs	r3, #0
1000e49a:	2202      	movs	r2, #2
1000e49c:	7141      	strb	r1, [r0, #5]
1000e49e:	26d0      	movs	r6, #208	; 0xd0
1000e4a0:	2101      	movs	r1, #1
1000e4a2:	7104      	strb	r4, [r0, #4]
1000e4a4:	4c11      	ldr	r4, [pc, #68]	; (1000e4ec <gapm_reset_req_handler+0x64>)
1000e4a6:	702b      	strb	r3, [r5, #0]
1000e4a8:	7002      	strb	r2, [r0, #0]
1000e4aa:	70c3      	strb	r3, [r0, #3]
1000e4ac:	320b      	adds	r2, #11
1000e4ae:	7201      	strb	r1, [r0, #8]
1000e4b0:	7181      	strb	r1, [r0, #6]
1000e4b2:	71c3      	strb	r3, [r0, #7]
1000e4b4:	3108      	adds	r1, #8
1000e4b6:	4b0e      	ldr	r3, [pc, #56]	; (1000e4f0 <gapm_reset_req_handler+0x68>)
1000e4b8:	0136      	lsls	r6, r6, #4
1000e4ba:	7042      	strb	r2, [r0, #1]
1000e4bc:	7082      	strb	r2, [r0, #2]
1000e4be:	80a2      	strh	r2, [r4, #4]
1000e4c0:	8026      	strh	r6, [r4, #0]
1000e4c2:	4798      	blx	r3
1000e4c4:	1c28      	adds	r0, r5, #0
1000e4c6:	4b0b      	ldr	r3, [pc, #44]	; (1000e4f4 <gapm_reset_req_handler+0x6c>)
1000e4c8:	4798      	blx	r3
1000e4ca:	782b      	ldrb	r3, [r5, #0]
1000e4cc:	20e2      	movs	r0, #226	; 0xe2
1000e4ce:	2b00      	cmp	r3, #0
1000e4d0:	d106      	bne.n	1000e4e0 <gapm_reset_req_handler+0x58>
1000e4d2:	68a3      	ldr	r3, [r4, #8]
1000e4d4:	20e2      	movs	r0, #226	; 0xe2
1000e4d6:	781a      	ldrb	r2, [r3, #0]
1000e4d8:	785b      	ldrb	r3, [r3, #1]
1000e4da:	2a01      	cmp	r2, #1
1000e4dc:	d100      	bne.n	1000e4e0 <gapm_reset_req_handler+0x58>
1000e4de:	1c18      	adds	r0, r3, #0
1000e4e0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000e4e2:	46c0      	nop			; (mov r8, r8)
1000e4e4:	10014724 	.word	0x10014724
1000e4e8:	10014a94 	.word	0x10014a94
1000e4ec:	10014718 	.word	0x10014718
1000e4f0:	1000d8b1 	.word	0x1000d8b1
1000e4f4:	1000d915 	.word	0x1000d915

1000e4f8 <gapm_set_dev_config_cmd_handler>:
1000e4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e4fa:	b089      	sub	sp, #36	; 0x24
1000e4fc:	9303      	str	r3, [sp, #12]
1000e4fe:	ab0e      	add	r3, sp, #56	; 0x38
1000e500:	781b      	ldrb	r3, [r3, #0]
1000e502:	4c37      	ldr	r4, [pc, #220]	; (1000e5e0 <gapm_set_dev_config_cmd_handler+0xe8>)
1000e504:	9304      	str	r3, [sp, #16]
1000e506:	ab0f      	add	r3, sp, #60	; 0x3c
1000e508:	781b      	ldrb	r3, [r3, #0]
1000e50a:	270d      	movs	r7, #13
1000e50c:	9305      	str	r3, [sp, #20]
1000e50e:	ab10      	add	r3, sp, #64	; 0x40
1000e510:	881b      	ldrh	r3, [r3, #0]
1000e512:	72a1      	strb	r1, [r4, #10]
1000e514:	9300      	str	r3, [sp, #0]
1000e516:	ab11      	add	r3, sp, #68	; 0x44
1000e518:	881b      	ldrh	r3, [r3, #0]
1000e51a:	0a09      	lsrs	r1, r1, #8
1000e51c:	9301      	str	r3, [sp, #4]
1000e51e:	ab12      	add	r3, sp, #72	; 0x48
1000e520:	881b      	ldrh	r3, [r3, #0]
1000e522:	7260      	strb	r0, [r4, #9]
1000e524:	9302      	str	r3, [sp, #8]
1000e526:	ab06      	add	r3, sp, #24
1000e528:	1dde      	adds	r6, r3, #7
1000e52a:	2300      	movs	r3, #0
1000e52c:	7033      	strb	r3, [r6, #0]
1000e52e:	2304      	movs	r3, #4
1000e530:	7023      	strb	r3, [r4, #0]
1000e532:	2300      	movs	r3, #0
1000e534:	70e3      	strb	r3, [r4, #3]
1000e536:	4b2b      	ldr	r3, [pc, #172]	; (1000e5e4 <gapm_set_dev_config_cmd_handler+0xec>)
1000e538:	72e1      	strb	r1, [r4, #11]
1000e53a:	881d      	ldrh	r5, [r3, #0]
1000e53c:	881b      	ldrh	r3, [r3, #0]
1000e53e:	1c11      	adds	r1, r2, #0
1000e540:	0a1b      	lsrs	r3, r3, #8
1000e542:	7163      	strb	r3, [r4, #5]
1000e544:	2303      	movs	r3, #3
1000e546:	7125      	strb	r5, [r4, #4]
1000e548:	2206      	movs	r2, #6
1000e54a:	4d27      	ldr	r5, [pc, #156]	; (1000e5e8 <gapm_set_dev_config_cmd_handler+0xf0>)
1000e54c:	4827      	ldr	r0, [pc, #156]	; (1000e5ec <gapm_set_dev_config_cmd_handler+0xf4>)
1000e54e:	7223      	strb	r3, [r4, #8]
1000e550:	7067      	strb	r7, [r4, #1]
1000e552:	70a7      	strb	r7, [r4, #2]
1000e554:	47a8      	blx	r5
1000e556:	9903      	ldr	r1, [sp, #12]
1000e558:	2210      	movs	r2, #16
1000e55a:	4825      	ldr	r0, [pc, #148]	; (1000e5f0 <gapm_set_dev_config_cmd_handler+0xf8>)
1000e55c:	47a8      	blx	r5
1000e55e:	466a      	mov	r2, sp
1000e560:	7c12      	ldrb	r2, [r2, #16]
1000e562:	1ce3      	adds	r3, r4, #3
1000e564:	77da      	strb	r2, [r3, #31]
1000e566:	466a      	mov	r2, sp
1000e568:	7d12      	ldrb	r2, [r2, #20]
1000e56a:	1d23      	adds	r3, r4, #4
1000e56c:	77da      	strb	r2, [r3, #31]
1000e56e:	466a      	mov	r2, sp
1000e570:	7812      	ldrb	r2, [r2, #0]
1000e572:	1d63      	adds	r3, r4, #5
1000e574:	77da      	strb	r2, [r3, #31]
1000e576:	9b00      	ldr	r3, [sp, #0]
1000e578:	1da2      	adds	r2, r4, #6
1000e57a:	0a1b      	lsrs	r3, r3, #8
1000e57c:	77d3      	strb	r3, [r2, #31]
1000e57e:	466a      	mov	r2, sp
1000e580:	7912      	ldrb	r2, [r2, #4]
1000e582:	1de3      	adds	r3, r4, #7
1000e584:	77da      	strb	r2, [r3, #31]
1000e586:	1c22      	adds	r2, r4, #0
1000e588:	9b01      	ldr	r3, [sp, #4]
1000e58a:	3208      	adds	r2, #8
1000e58c:	0a1b      	lsrs	r3, r3, #8
1000e58e:	77d3      	strb	r3, [r2, #31]
1000e590:	466a      	mov	r2, sp
1000e592:	1c23      	adds	r3, r4, #0
1000e594:	7a12      	ldrb	r2, [r2, #8]
1000e596:	3328      	adds	r3, #40	; 0x28
1000e598:	701a      	strb	r2, [r3, #0]
1000e59a:	1c22      	adds	r2, r4, #0
1000e59c:	9b02      	ldr	r3, [sp, #8]
1000e59e:	3229      	adds	r2, #41	; 0x29
1000e5a0:	0a1b      	lsrs	r3, r3, #8
1000e5a2:	7013      	strb	r3, [r2, #0]
1000e5a4:	23d0      	movs	r3, #208	; 0xd0
1000e5a6:	4d13      	ldr	r5, [pc, #76]	; (1000e5f4 <gapm_set_dev_config_cmd_handler+0xfc>)
1000e5a8:	011b      	lsls	r3, r3, #4
1000e5aa:	802b      	strh	r3, [r5, #0]
1000e5ac:	2322      	movs	r3, #34	; 0x22
1000e5ae:	71a3      	strb	r3, [r4, #6]
1000e5b0:	2300      	movs	r3, #0
1000e5b2:	212a      	movs	r1, #42	; 0x2a
1000e5b4:	71e3      	strb	r3, [r4, #7]
1000e5b6:	1c20      	adds	r0, r4, #0
1000e5b8:	4b0f      	ldr	r3, [pc, #60]	; (1000e5f8 <gapm_set_dev_config_cmd_handler+0x100>)
1000e5ba:	80af      	strh	r7, [r5, #4]
1000e5bc:	4798      	blx	r3
1000e5be:	1c30      	adds	r0, r6, #0
1000e5c0:	4b0e      	ldr	r3, [pc, #56]	; (1000e5fc <gapm_set_dev_config_cmd_handler+0x104>)
1000e5c2:	4798      	blx	r3
1000e5c4:	7833      	ldrb	r3, [r6, #0]
1000e5c6:	20e2      	movs	r0, #226	; 0xe2
1000e5c8:	2b00      	cmp	r3, #0
1000e5ca:	d106      	bne.n	1000e5da <gapm_set_dev_config_cmd_handler+0xe2>
1000e5cc:	68ab      	ldr	r3, [r5, #8]
1000e5ce:	20e2      	movs	r0, #226	; 0xe2
1000e5d0:	781a      	ldrb	r2, [r3, #0]
1000e5d2:	785b      	ldrb	r3, [r3, #1]
1000e5d4:	2a03      	cmp	r2, #3
1000e5d6:	d100      	bne.n	1000e5da <gapm_set_dev_config_cmd_handler+0xe2>
1000e5d8:	1c18      	adds	r0, r3, #0
1000e5da:	b009      	add	sp, #36	; 0x24
1000e5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e5de:	46c0      	nop			; (mov r8, r8)
1000e5e0:	10014a94 	.word	0x10014a94
1000e5e4:	10014724 	.word	0x10014724
1000e5e8:	1001025f 	.word	0x1001025f
1000e5ec:	10014aa0 	.word	0x10014aa0
1000e5f0:	10014aa6 	.word	0x10014aa6
1000e5f4:	10014718 	.word	0x10014718
1000e5f8:	1000d8b1 	.word	0x1000d8b1
1000e5fc:	1000d915 	.word	0x1000d915

1000e600 <gapm_get_dev_config_cmd_handler>:
1000e600:	4684      	mov	ip, r0
1000e602:	4663      	mov	r3, ip
1000e604:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e606:	b085      	sub	sp, #20
1000e608:	9100      	str	r1, [sp, #0]
1000e60a:	20cf      	movs	r0, #207	; 0xcf
1000e60c:	2b01      	cmp	r3, #1
1000e60e:	d854      	bhi.n	1000e6ba <gapm_get_dev_config_cmd_handler+0xba>
1000e610:	2900      	cmp	r1, #0
1000e612:	d052      	beq.n	1000e6ba <gapm_get_dev_config_cmd_handler+0xba>
1000e614:	2200      	movs	r2, #0
1000e616:	492a      	ldr	r1, [pc, #168]	; (1000e6c0 <gapm_get_dev_config_cmd_handler+0xc0>)
1000e618:	ab02      	add	r3, sp, #8
1000e61a:	880c      	ldrh	r4, [r1, #0]
1000e61c:	8809      	ldrh	r1, [r1, #0]
1000e61e:	1d9f      	adds	r7, r3, #6
1000e620:	719a      	strb	r2, [r3, #6]
1000e622:	4b28      	ldr	r3, [pc, #160]	; (1000e6c4 <gapm_get_dev_config_cmd_handler+0xc4>)
1000e624:	0a09      	lsrs	r1, r1, #8
1000e626:	250d      	movs	r5, #13
1000e628:	2606      	movs	r6, #6
1000e62a:	7159      	strb	r1, [r3, #5]
1000e62c:	4661      	mov	r1, ip
1000e62e:	701e      	strb	r6, [r3, #0]
1000e630:	705d      	strb	r5, [r3, #1]
1000e632:	709d      	strb	r5, [r3, #2]
1000e634:	70da      	strb	r2, [r3, #3]
1000e636:	711c      	strb	r4, [r3, #4]
1000e638:	2901      	cmp	r1, #1
1000e63a:	d13e      	bne.n	1000e6ba <gapm_get_dev_config_cmd_handler+0xba>
1000e63c:	21d0      	movs	r1, #208	; 0xd0
1000e63e:	4c22      	ldr	r4, [pc, #136]	; (1000e6c8 <gapm_get_dev_config_cmd_handler+0xc8>)
1000e640:	0109      	lsls	r1, r1, #4
1000e642:	8061      	strh	r1, [r4, #2]
1000e644:	4921      	ldr	r1, [pc, #132]	; (1000e6cc <gapm_get_dev_config_cmd_handler+0xcc>)
1000e646:	71da      	strb	r2, [r3, #7]
1000e648:	8021      	strh	r1, [r4, #0]
1000e64a:	4661      	mov	r1, ip
1000e64c:	721e      	strb	r6, [r3, #8]
1000e64e:	7199      	strb	r1, [r3, #6]
1000e650:	1c18      	adds	r0, r3, #0
1000e652:	2109      	movs	r1, #9
1000e654:	4b1e      	ldr	r3, [pc, #120]	; (1000e6d0 <gapm_get_dev_config_cmd_handler+0xd0>)
1000e656:	80a5      	strh	r5, [r4, #4]
1000e658:	4798      	blx	r3
1000e65a:	1c38      	adds	r0, r7, #0
1000e65c:	4b1d      	ldr	r3, [pc, #116]	; (1000e6d4 <gapm_get_dev_config_cmd_handler+0xd4>)
1000e65e:	4798      	blx	r3
1000e660:	783b      	ldrb	r3, [r7, #0]
1000e662:	20e2      	movs	r0, #226	; 0xe2
1000e664:	9301      	str	r3, [sp, #4]
1000e666:	2b00      	cmp	r3, #0
1000e668:	d127      	bne.n	1000e6ba <gapm_get_dev_config_cmd_handler+0xba>
1000e66a:	8821      	ldrh	r1, [r4, #0]
1000e66c:	4a1a      	ldr	r2, [pc, #104]	; (1000e6d8 <gapm_get_dev_config_cmd_handler+0xd8>)
1000e66e:	68a7      	ldr	r7, [r4, #8]
1000e670:	3b01      	subs	r3, #1
1000e672:	4291      	cmp	r1, r2
1000e674:	d001      	beq.n	1000e67a <gapm_get_dev_config_cmd_handler+0x7a>
1000e676:	8023      	strh	r3, [r4, #0]
1000e678:	e01a      	b.n	1000e6b0 <gapm_get_dev_config_cmd_handler+0xb0>
1000e67a:	8063      	strh	r3, [r4, #2]
1000e67c:	9b00      	ldr	r3, [sp, #0]
1000e67e:	1c39      	adds	r1, r7, #0
1000e680:	1c58      	adds	r0, r3, #1
1000e682:	1c32      	adds	r2, r6, #0
1000e684:	4b15      	ldr	r3, [pc, #84]	; (1000e6dc <gapm_get_dev_config_cmd_handler+0xdc>)
1000e686:	4798      	blx	r3
1000e688:	79bb      	ldrb	r3, [r7, #6]
1000e68a:	9a00      	ldr	r2, [sp, #0]
1000e68c:	7013      	strb	r3, [r2, #0]
1000e68e:	23d0      	movs	r3, #208	; 0xd0
1000e690:	011b      	lsls	r3, r3, #4
1000e692:	8023      	strh	r3, [r4, #0]
1000e694:	ab02      	add	r3, sp, #8
1000e696:	80a5      	strh	r5, [r4, #4]
1000e698:	1ddd      	adds	r5, r3, #7
1000e69a:	466b      	mov	r3, sp
1000e69c:	791b      	ldrb	r3, [r3, #4]
1000e69e:	1c28      	adds	r0, r5, #0
1000e6a0:	702b      	strb	r3, [r5, #0]
1000e6a2:	4b0c      	ldr	r3, [pc, #48]	; (1000e6d4 <gapm_get_dev_config_cmd_handler+0xd4>)
1000e6a4:	4798      	blx	r3
1000e6a6:	782b      	ldrb	r3, [r5, #0]
1000e6a8:	20d0      	movs	r0, #208	; 0xd0
1000e6aa:	2b00      	cmp	r3, #0
1000e6ac:	d105      	bne.n	1000e6ba <gapm_get_dev_config_cmd_handler+0xba>
1000e6ae:	68a7      	ldr	r7, [r4, #8]
1000e6b0:	783b      	ldrb	r3, [r7, #0]
1000e6b2:	7878      	ldrb	r0, [r7, #1]
1000e6b4:	2b06      	cmp	r3, #6
1000e6b6:	d000      	beq.n	1000e6ba <gapm_get_dev_config_cmd_handler+0xba>
1000e6b8:	20e2      	movs	r0, #226	; 0xe2
1000e6ba:	b005      	add	sp, #20
1000e6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e6be:	46c0      	nop			; (mov r8, r8)
1000e6c0:	10014724 	.word	0x10014724
1000e6c4:	10014a94 	.word	0x10014a94
1000e6c8:	10014718 	.word	0x10014718
1000e6cc:	00000d08 	.word	0x00000d08
1000e6d0:	1000d8b1 	.word	0x1000d8b1
1000e6d4:	1000d915 	.word	0x1000d915
1000e6d8:	0000ffff 	.word	0x0000ffff
1000e6dc:	1001025f 	.word	0x1001025f

1000e6e0 <gapm_cancel_cmd_handler>:
1000e6e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000e6e2:	4916      	ldr	r1, [pc, #88]	; (1000e73c <gapm_cancel_cmd_handler+0x5c>)
1000e6e4:	4816      	ldr	r0, [pc, #88]	; (1000e740 <gapm_cancel_cmd_handler+0x60>)
1000e6e6:	880c      	ldrh	r4, [r1, #0]
1000e6e8:	8809      	ldrh	r1, [r1, #0]
1000e6ea:	466b      	mov	r3, sp
1000e6ec:	0a09      	lsrs	r1, r1, #8
1000e6ee:	7141      	strb	r1, [r0, #5]
1000e6f0:	2102      	movs	r1, #2
1000e6f2:	2203      	movs	r2, #3
1000e6f4:	7201      	strb	r1, [r0, #8]
1000e6f6:	21d0      	movs	r1, #208	; 0xd0
1000e6f8:	1ddd      	adds	r5, r3, #7
1000e6fa:	2300      	movs	r3, #0
1000e6fc:	7104      	strb	r4, [r0, #4]
1000e6fe:	4c11      	ldr	r4, [pc, #68]	; (1000e744 <gapm_cancel_cmd_handler+0x64>)
1000e700:	7002      	strb	r2, [r0, #0]
1000e702:	0109      	lsls	r1, r1, #4
1000e704:	320a      	adds	r2, #10
1000e706:	702b      	strb	r3, [r5, #0]
1000e708:	7042      	strb	r2, [r0, #1]
1000e70a:	7082      	strb	r2, [r0, #2]
1000e70c:	70c3      	strb	r3, [r0, #3]
1000e70e:	8021      	strh	r1, [r4, #0]
1000e710:	80a2      	strh	r2, [r4, #4]
1000e712:	71c3      	strb	r3, [r0, #7]
1000e714:	3a0c      	subs	r2, #12
1000e716:	2109      	movs	r1, #9
1000e718:	4b0b      	ldr	r3, [pc, #44]	; (1000e748 <gapm_cancel_cmd_handler+0x68>)
1000e71a:	7182      	strb	r2, [r0, #6]
1000e71c:	4798      	blx	r3
1000e71e:	1c28      	adds	r0, r5, #0
1000e720:	4b0a      	ldr	r3, [pc, #40]	; (1000e74c <gapm_cancel_cmd_handler+0x6c>)
1000e722:	4798      	blx	r3
1000e724:	7828      	ldrb	r0, [r5, #0]
1000e726:	2800      	cmp	r0, #0
1000e728:	d001      	beq.n	1000e72e <gapm_cancel_cmd_handler+0x4e>
1000e72a:	20e2      	movs	r0, #226	; 0xe2
1000e72c:	e004      	b.n	1000e738 <gapm_cancel_cmd_handler+0x58>
1000e72e:	68a3      	ldr	r3, [r4, #8]
1000e730:	785b      	ldrb	r3, [r3, #1]
1000e732:	2b44      	cmp	r3, #68	; 0x44
1000e734:	d000      	beq.n	1000e738 <gapm_cancel_cmd_handler+0x58>
1000e736:	1c18      	adds	r0, r3, #0
1000e738:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000e73a:	46c0      	nop			; (mov r8, r8)
1000e73c:	10014724 	.word	0x10014724
1000e740:	10014a94 	.word	0x10014a94
1000e744:	10014718 	.word	0x10014718
1000e748:	1000d8b1 	.word	0x1000d8b1
1000e74c:	1000d915 	.word	0x1000d915

1000e750 <gapm_dev_bdaddr_ind_handler>:
1000e750:	b538      	push	{r3, r4, r5, lr}
1000e752:	1c05      	adds	r5, r0, #0
1000e754:	1c0c      	adds	r4, r1, #0
1000e756:	1c48      	adds	r0, r1, #1
1000e758:	2206      	movs	r2, #6
1000e75a:	1c29      	adds	r1, r5, #0
1000e75c:	4b02      	ldr	r3, [pc, #8]	; (1000e768 <gapm_dev_bdaddr_ind_handler+0x18>)
1000e75e:	4798      	blx	r3
1000e760:	79ab      	ldrb	r3, [r5, #6]
1000e762:	2000      	movs	r0, #0
1000e764:	7023      	strb	r3, [r4, #0]
1000e766:	bd38      	pop	{r3, r4, r5, pc}
1000e768:	1001025f 	.word	0x1001025f

1000e76c <gapm_cmp_evt>:
1000e76c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e76e:	7803      	ldrb	r3, [r0, #0]
1000e770:	7845      	ldrb	r5, [r0, #1]
1000e772:	3b0c      	subs	r3, #12
1000e774:	1e18      	subs	r0, r3, #0
1000e776:	280b      	cmp	r0, #11
1000e778:	d900      	bls.n	1000e77c <gapm_cmp_evt+0x10>
1000e77a:	e08d      	b.n	1000e898 <gapm_cmp_evt+0x12c>
1000e77c:	1c0c      	adds	r4, r1, #0
1000e77e:	f000 fbbf 	bl	1000ef00 <__gnu_thumb1_case_uqi>
1000e782:	1952      	.short	0x1952
1000e784:	068b1919 	.word	0x068b1919
1000e788:	8b595906 	.word	0x8b595906
1000e78c:	0d8b      	.short	0x0d8b
1000e78e:	2300      	movs	r3, #0
1000e790:	2d45      	cmp	r5, #69	; 0x45
1000e792:	d000      	beq.n	1000e796 <gapm_cmp_evt+0x2a>
1000e794:	1c2b      	adds	r3, r5, #0
1000e796:	7023      	strb	r3, [r4, #0]
1000e798:	2002      	movs	r0, #2
1000e79a:	e07e      	b.n	1000e89a <gapm_cmp_evt+0x12e>
1000e79c:	203b      	movs	r0, #59	; 0x3b
1000e79e:	2d00      	cmp	r5, #0
1000e7a0:	d100      	bne.n	1000e7a4 <gapm_cmp_evt+0x38>
1000e7a2:	e07a      	b.n	1000e89a <gapm_cmp_evt+0x12e>
1000e7a4:	700d      	strb	r5, [r1, #0]
1000e7a6:	1c48      	adds	r0, r1, #1
1000e7a8:	2210      	movs	r2, #16
1000e7aa:	2100      	movs	r1, #0
1000e7ac:	4b3b      	ldr	r3, [pc, #236]	; (1000e89c <gapm_cmp_evt+0x130>)
1000e7ae:	4798      	blx	r3
1000e7b0:	200f      	movs	r0, #15
1000e7b2:	e072      	b.n	1000e89a <gapm_cmp_evt+0x12e>
1000e7b4:	2d00      	cmp	r5, #0
1000e7b6:	d134      	bne.n	1000e822 <gapm_cmp_evt+0xb6>
1000e7b8:	4b39      	ldr	r3, [pc, #228]	; (1000e8a0 <gapm_cmp_evt+0x134>)
1000e7ba:	4798      	blx	r3
1000e7bc:	1e43      	subs	r3, r0, #1
1000e7be:	b2db      	uxtb	r3, r3
1000e7c0:	1c28      	adds	r0, r5, #0
1000e7c2:	2b06      	cmp	r3, #6
1000e7c4:	d869      	bhi.n	1000e89a <gapm_cmp_evt+0x12e>
1000e7c6:	466b      	mov	r3, sp
1000e7c8:	4e36      	ldr	r6, [pc, #216]	; (1000e8a4 <gapm_cmp_evt+0x138>)
1000e7ca:	1dd9      	adds	r1, r3, #7
1000e7cc:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000e7ce:	4b36      	ldr	r3, [pc, #216]	; (1000e8a8 <gapm_cmp_evt+0x13c>)
1000e7d0:	4798      	blx	r3
1000e7d2:	2312      	movs	r3, #18
1000e7d4:	4358      	muls	r0, r3
1000e7d6:	4935      	ldr	r1, [pc, #212]	; (1000e8ac <gapm_cmp_evt+0x140>)
1000e7d8:	1809      	adds	r1, r1, r0
1000e7da:	1c0b      	adds	r3, r1, #0
1000e7dc:	894a      	ldrh	r2, [r1, #10]
1000e7de:	3308      	adds	r3, #8
1000e7e0:	8122      	strh	r2, [r4, #8]
1000e7e2:	784f      	ldrb	r7, [r1, #1]
1000e7e4:	72a5      	strb	r5, [r4, #10]
1000e7e6:	7027      	strb	r7, [r4, #0]
1000e7e8:	898a      	ldrh	r2, [r1, #12]
1000e7ea:	1c60      	adds	r0, r4, #1
1000e7ec:	81a2      	strh	r2, [r4, #12]
1000e7ee:	88db      	ldrh	r3, [r3, #6]
1000e7f0:	3102      	adds	r1, #2
1000e7f2:	81e3      	strh	r3, [r4, #14]
1000e7f4:	89cb      	ldrh	r3, [r1, #14]
1000e7f6:	2206      	movs	r2, #6
1000e7f8:	8223      	strh	r3, [r4, #16]
1000e7fa:	4b2d      	ldr	r3, [pc, #180]	; (1000e8b0 <gapm_cmp_evt+0x144>)
1000e7fc:	4798      	blx	r3
1000e7fe:	2f00      	cmp	r7, #0
1000e800:	d00a      	beq.n	1000e818 <gapm_cmp_evt+0xac>
1000e802:	79a3      	ldrb	r3, [r4, #6]
1000e804:	223f      	movs	r2, #63	; 0x3f
1000e806:	1c19      	adds	r1, r3, #0
1000e808:	3501      	adds	r5, #1
1000e80a:	4391      	bics	r1, r2
1000e80c:	29c0      	cmp	r1, #192	; 0xc0
1000e80e:	d003      	beq.n	1000e818 <gapm_cmp_evt+0xac>
1000e810:	065b      	lsls	r3, r3, #25
1000e812:	0fdb      	lsrs	r3, r3, #31
1000e814:	3502      	adds	r5, #2
1000e816:	1aed      	subs	r5, r5, r3
1000e818:	2301      	movs	r3, #1
1000e81a:	425b      	negs	r3, r3
1000e81c:	7025      	strb	r5, [r4, #0]
1000e81e:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000e820:	e038      	b.n	1000e894 <gapm_cmp_evt+0x128>
1000e822:	700d      	strb	r5, [r1, #0]
1000e824:	e004      	b.n	1000e830 <gapm_cmp_evt+0xc4>
1000e826:	2300      	movs	r3, #0
1000e828:	2d45      	cmp	r5, #69	; 0x45
1000e82a:	d000      	beq.n	1000e82e <gapm_cmp_evt+0xc2>
1000e82c:	1c2b      	adds	r3, r5, #0
1000e82e:	7023      	strb	r3, [r4, #0]
1000e830:	2003      	movs	r0, #3
1000e832:	e032      	b.n	1000e89a <gapm_cmp_evt+0x12e>
1000e834:	4e1b      	ldr	r6, [pc, #108]	; (1000e8a4 <gapm_cmp_evt+0x138>)
1000e836:	2100      	movs	r1, #0
1000e838:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000e83a:	4b1b      	ldr	r3, [pc, #108]	; (1000e8a8 <gapm_cmp_evt+0x13c>)
1000e83c:	4798      	blx	r3
1000e83e:	2807      	cmp	r0, #7
1000e840:	d818      	bhi.n	1000e874 <gapm_cmp_evt+0x108>
1000e842:	2301      	movs	r3, #1
1000e844:	425b      	negs	r3, r3
1000e846:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000e848:	3313      	adds	r3, #19
1000e84a:	4358      	muls	r0, r3
1000e84c:	4917      	ldr	r1, [pc, #92]	; (1000e8ac <gapm_cmp_evt+0x140>)
1000e84e:	1809      	adds	r1, r1, r0
1000e850:	1c0b      	adds	r3, r1, #0
1000e852:	894a      	ldrh	r2, [r1, #10]
1000e854:	3308      	adds	r3, #8
1000e856:	8122      	strh	r2, [r4, #8]
1000e858:	784a      	ldrb	r2, [r1, #1]
1000e85a:	72a5      	strb	r5, [r4, #10]
1000e85c:	7022      	strb	r2, [r4, #0]
1000e85e:	898a      	ldrh	r2, [r1, #12]
1000e860:	1c60      	adds	r0, r4, #1
1000e862:	81a2      	strh	r2, [r4, #12]
1000e864:	88db      	ldrh	r3, [r3, #6]
1000e866:	3102      	adds	r1, #2
1000e868:	81e3      	strh	r3, [r4, #14]
1000e86a:	89cb      	ldrh	r3, [r1, #14]
1000e86c:	2206      	movs	r2, #6
1000e86e:	8223      	strh	r3, [r4, #16]
1000e870:	4b0f      	ldr	r3, [pc, #60]	; (1000e8b0 <gapm_cmp_evt+0x144>)
1000e872:	4798      	blx	r3
1000e874:	2200      	movs	r2, #0
1000e876:	7823      	ldrb	r3, [r4, #0]
1000e878:	4293      	cmp	r3, r2
1000e87a:	d00a      	beq.n	1000e892 <gapm_cmp_evt+0x126>
1000e87c:	79a3      	ldrb	r3, [r4, #6]
1000e87e:	323f      	adds	r2, #63	; 0x3f
1000e880:	1c19      	adds	r1, r3, #0
1000e882:	4391      	bics	r1, r2
1000e884:	3a3e      	subs	r2, #62	; 0x3e
1000e886:	29c0      	cmp	r1, #192	; 0xc0
1000e888:	d003      	beq.n	1000e892 <gapm_cmp_evt+0x126>
1000e88a:	065b      	lsls	r3, r3, #25
1000e88c:	0fdb      	lsrs	r3, r3, #31
1000e88e:	3202      	adds	r2, #2
1000e890:	1ad2      	subs	r2, r2, r3
1000e892:	7022      	strb	r2, [r4, #0]
1000e894:	2005      	movs	r0, #5
1000e896:	e000      	b.n	1000e89a <gapm_cmp_evt+0x12e>
1000e898:	2000      	movs	r0, #0
1000e89a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e89c:	10010271 	.word	0x10010271
1000e8a0:	1000dabd 	.word	0x1000dabd
1000e8a4:	100147b6 	.word	0x100147b6
1000e8a8:	1000da81 	.word	0x1000da81
1000e8ac:	10014726 	.word	0x10014726
1000e8b0:	1001025f 	.word	0x1001025f

1000e8b4 <gapm_adv_report_evt_handler>:
1000e8b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e8b6:	7843      	ldrb	r3, [r0, #1]
1000e8b8:	1c05      	adds	r5, r0, #0
1000e8ba:	9301      	str	r3, [sp, #4]
1000e8bc:	466b      	mov	r3, sp
1000e8be:	1c0c      	adds	r4, r1, #0
1000e8c0:	791b      	ldrb	r3, [r3, #4]
1000e8c2:	7806      	ldrb	r6, [r0, #0]
1000e8c4:	2206      	movs	r2, #6
1000e8c6:	704b      	strb	r3, [r1, #1]
1000e8c8:	1c88      	adds	r0, r1, #2
1000e8ca:	4f1b      	ldr	r7, [pc, #108]	; (1000e938 <gapm_adv_report_evt_handler+0x84>)
1000e8cc:	1ca9      	adds	r1, r5, #2
1000e8ce:	47b8      	blx	r7
1000e8d0:	1c20      	adds	r0, r4, #0
1000e8d2:	1c29      	adds	r1, r5, #0
1000e8d4:	7a2a      	ldrb	r2, [r5, #8]
1000e8d6:	3008      	adds	r0, #8
1000e8d8:	77c2      	strb	r2, [r0, #31]
1000e8da:	3109      	adds	r1, #9
1000e8dc:	3528      	adds	r5, #40	; 0x28
1000e8de:	47b8      	blx	r7
1000e8e0:	782b      	ldrb	r3, [r5, #0]
1000e8e2:	b25a      	sxtb	r2, r3
1000e8e4:	2a00      	cmp	r2, #0
1000e8e6:	da01      	bge.n	1000e8ec <gapm_adv_report_evt_handler+0x38>
1000e8e8:	3301      	adds	r3, #1
1000e8ea:	b2db      	uxtb	r3, r3
1000e8ec:	1c22      	adds	r2, r4, #0
1000e8ee:	3228      	adds	r2, #40	; 0x28
1000e8f0:	7013      	strb	r3, [r2, #0]
1000e8f2:	2200      	movs	r2, #0
1000e8f4:	9b01      	ldr	r3, [sp, #4]
1000e8f6:	4293      	cmp	r3, r2
1000e8f8:	d00a      	beq.n	1000e910 <gapm_adv_report_evt_handler+0x5c>
1000e8fa:	79e3      	ldrb	r3, [r4, #7]
1000e8fc:	323f      	adds	r2, #63	; 0x3f
1000e8fe:	1c19      	adds	r1, r3, #0
1000e900:	4391      	bics	r1, r2
1000e902:	3a3e      	subs	r2, #62	; 0x3e
1000e904:	29c0      	cmp	r1, #192	; 0xc0
1000e906:	d003      	beq.n	1000e910 <gapm_adv_report_evt_handler+0x5c>
1000e908:	065b      	lsls	r3, r3, #25
1000e90a:	0fdb      	lsrs	r3, r3, #31
1000e90c:	3202      	adds	r2, #2
1000e90e:	1ad2      	subs	r2, r2, r3
1000e910:	7062      	strb	r2, [r4, #1]
1000e912:	2e04      	cmp	r6, #4
1000e914:	d80f      	bhi.n	1000e936 <gapm_adv_report_evt_handler+0x82>
1000e916:	1c30      	adds	r0, r6, #0
1000e918:	f000 faf2 	bl	1000ef00 <__gnu_thumb1_case_uqi>
1000e91c:	09070503 	.word	0x09070503
1000e920:	0b          	.byte	0x0b
1000e921:	00          	.byte	0x00
1000e922:	2300      	movs	r3, #0
1000e924:	e006      	b.n	1000e934 <gapm_adv_report_evt_handler+0x80>
1000e926:	2301      	movs	r3, #1
1000e928:	e004      	b.n	1000e934 <gapm_adv_report_evt_handler+0x80>
1000e92a:	2302      	movs	r3, #2
1000e92c:	e002      	b.n	1000e934 <gapm_adv_report_evt_handler+0x80>
1000e92e:	2303      	movs	r3, #3
1000e930:	e000      	b.n	1000e934 <gapm_adv_report_evt_handler+0x80>
1000e932:	2305      	movs	r3, #5
1000e934:	7023      	strb	r3, [r4, #0]
1000e936:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e938:	1001025f 	.word	0x1001025f

1000e93c <gapm_resolv_addr_cmd_handler>:
1000e93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e93e:	2314      	movs	r3, #20
1000e940:	4c12      	ldr	r4, [pc, #72]	; (1000e98c <gapm_resolv_addr_cmd_handler+0x50>)
1000e942:	1c17      	adds	r7, r2, #0
1000e944:	7023      	strb	r3, [r4, #0]
1000e946:	3b07      	subs	r3, #7
1000e948:	7063      	strb	r3, [r4, #1]
1000e94a:	70a3      	strb	r3, [r4, #2]
1000e94c:	2300      	movs	r3, #0
1000e94e:	70e3      	strb	r3, [r4, #3]
1000e950:	4b0f      	ldr	r3, [pc, #60]	; (1000e990 <gapm_resolv_addr_cmd_handler+0x54>)
1000e952:	1c05      	adds	r5, r0, #0
1000e954:	881a      	ldrh	r2, [r3, #0]
1000e956:	881b      	ldrh	r3, [r3, #0]
1000e958:	4e0e      	ldr	r6, [pc, #56]	; (1000e994 <gapm_resolv_addr_cmd_handler+0x58>)
1000e95a:	0a1b      	lsrs	r3, r3, #8
1000e95c:	7163      	strb	r3, [r4, #5]
1000e95e:	2317      	movs	r3, #23
1000e960:	012d      	lsls	r5, r5, #4
1000e962:	7122      	strb	r2, [r4, #4]
1000e964:	7260      	strb	r0, [r4, #9]
1000e966:	2206      	movs	r2, #6
1000e968:	480b      	ldr	r0, [pc, #44]	; (1000e998 <gapm_resolv_addr_cmd_handler+0x5c>)
1000e96a:	7223      	strb	r3, [r4, #8]
1000e96c:	47b0      	blx	r6
1000e96e:	1c39      	adds	r1, r7, #0
1000e970:	1c2a      	adds	r2, r5, #0
1000e972:	480a      	ldr	r0, [pc, #40]	; (1000e99c <gapm_resolv_addr_cmd_handler+0x60>)
1000e974:	47b0      	blx	r6
1000e976:	1c29      	adds	r1, r5, #0
1000e978:	3110      	adds	r1, #16
1000e97a:	1c0b      	adds	r3, r1, #0
1000e97c:	3b08      	subs	r3, #8
1000e97e:	71a3      	strb	r3, [r4, #6]
1000e980:	121b      	asrs	r3, r3, #8
1000e982:	71e3      	strb	r3, [r4, #7]
1000e984:	1c20      	adds	r0, r4, #0
1000e986:	4b06      	ldr	r3, [pc, #24]	; (1000e9a0 <gapm_resolv_addr_cmd_handler+0x64>)
1000e988:	4798      	blx	r3
1000e98a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e98c:	10014a94 	.word	0x10014a94
1000e990:	10014724 	.word	0x10014724
1000e994:	1001025f 	.word	0x1001025f
1000e998:	10014a9e 	.word	0x10014a9e
1000e99c:	10014aa4 	.word	0x10014aa4
1000e9a0:	1000d8b1 	.word	0x1000d8b1

1000e9a4 <gapm_addr_solved_ind_handler>:
1000e9a4:	b570      	push	{r4, r5, r6, lr}
1000e9a6:	1c04      	adds	r4, r0, #0
1000e9a8:	1c08      	adds	r0, r1, #0
1000e9aa:	1c0d      	adds	r5, r1, #0
1000e9ac:	4e05      	ldr	r6, [pc, #20]	; (1000e9c4 <gapm_addr_solved_ind_handler+0x20>)
1000e9ae:	1c21      	adds	r1, r4, #0
1000e9b0:	2206      	movs	r2, #6
1000e9b2:	3011      	adds	r0, #17
1000e9b4:	47b0      	blx	r6
1000e9b6:	1c68      	adds	r0, r5, #1
1000e9b8:	1da1      	adds	r1, r4, #6
1000e9ba:	2210      	movs	r2, #16
1000e9bc:	47b0      	blx	r6
1000e9be:	2300      	movs	r3, #0
1000e9c0:	702b      	strb	r3, [r5, #0]
1000e9c2:	bd70      	pop	{r4, r5, r6, pc}
1000e9c4:	1001025f 	.word	0x1001025f

1000e9c8 <gapm_profile_added_ind_handler>:
1000e9c8:	b510      	push	{r4, lr}
1000e9ca:	7843      	ldrb	r3, [r0, #1]
1000e9cc:	7902      	ldrb	r2, [r0, #4]
1000e9ce:	7944      	ldrb	r4, [r0, #5]
1000e9d0:	7800      	ldrb	r0, [r0, #0]
1000e9d2:	021b      	lsls	r3, r3, #8
1000e9d4:	4303      	orrs	r3, r0
1000e9d6:	2b1b      	cmp	r3, #27
1000e9d8:	d104      	bne.n	1000e9e4 <gapm_profile_added_ind_handler+0x1c>
1000e9da:	2300      	movs	r3, #0
1000e9dc:	700b      	strb	r3, [r1, #0]
1000e9de:	0223      	lsls	r3, r4, #8
1000e9e0:	4313      	orrs	r3, r2
1000e9e2:	804b      	strh	r3, [r1, #2]
1000e9e4:	203b      	movs	r0, #59	; 0x3b
1000e9e6:	bd10      	pop	{r4, pc}

1000e9e8 <gattc_read_req_ind_parser>:
1000e9e8:	7843      	ldrb	r3, [r0, #1]
1000e9ea:	7802      	ldrb	r2, [r0, #0]
1000e9ec:	021b      	lsls	r3, r3, #8
1000e9ee:	4313      	orrs	r3, r2
1000e9f0:	804b      	strh	r3, [r1, #2]
1000e9f2:	4770      	bx	lr

1000e9f4 <gattc_write_req_ind_parser>:
1000e9f4:	b508      	push	{r3, lr}
1000e9f6:	1c13      	adds	r3, r2, #0
1000e9f8:	0a00      	lsrs	r0, r0, #8
1000e9fa:	8010      	strh	r0, [r2, #0]
1000e9fc:	784a      	ldrb	r2, [r1, #1]
1000e9fe:	7808      	ldrb	r0, [r1, #0]
1000ea00:	0212      	lsls	r2, r2, #8
1000ea02:	4302      	orrs	r2, r0
1000ea04:	805a      	strh	r2, [r3, #2]
1000ea06:	78ca      	ldrb	r2, [r1, #3]
1000ea08:	7888      	ldrb	r0, [r1, #2]
1000ea0a:	0212      	lsls	r2, r2, #8
1000ea0c:	4302      	orrs	r2, r0
1000ea0e:	809a      	strh	r2, [r3, #4]
1000ea10:	794a      	ldrb	r2, [r1, #5]
1000ea12:	7908      	ldrb	r0, [r1, #4]
1000ea14:	0212      	lsls	r2, r2, #8
1000ea16:	4302      	orrs	r2, r0
1000ea18:	80da      	strh	r2, [r3, #6]
1000ea1a:	3308      	adds	r3, #8
1000ea1c:	1c18      	adds	r0, r3, #0
1000ea1e:	3106      	adds	r1, #6
1000ea20:	4b01      	ldr	r3, [pc, #4]	; (1000ea28 <gattc_write_req_ind_parser+0x34>)
1000ea22:	4798      	blx	r3
1000ea24:	bd08      	pop	{r3, pc}
1000ea26:	46c0      	nop			; (mov r8, r8)
1000ea28:	1001025f 	.word	0x1001025f

1000ea2c <gattc_att_info_req_parser>:
1000ea2c:	7843      	ldrb	r3, [r0, #1]
1000ea2e:	7802      	ldrb	r2, [r0, #0]
1000ea30:	021b      	lsls	r3, r3, #8
1000ea32:	4313      	orrs	r3, r2
1000ea34:	800b      	strh	r3, [r1, #0]
1000ea36:	4770      	bx	lr

1000ea38 <gattc_read_cfm>:
1000ea38:	b538      	push	{r3, r4, r5, lr}
1000ea3a:	2514      	movs	r5, #20
1000ea3c:	1c1c      	adds	r4, r3, #0
1000ea3e:	4b14      	ldr	r3, [pc, #80]	; (1000ea90 <gattc_read_cfm+0x58>)
1000ea40:	70d9      	strb	r1, [r3, #3]
1000ea42:	4914      	ldr	r1, [pc, #80]	; (1000ea94 <gattc_read_cfm+0x5c>)
1000ea44:	701d      	strb	r5, [r3, #0]
1000ea46:	3d08      	subs	r5, #8
1000ea48:	705d      	strb	r5, [r3, #1]
1000ea4a:	709d      	strb	r5, [r3, #2]
1000ea4c:	880d      	ldrh	r5, [r1, #0]
1000ea4e:	8809      	ldrh	r1, [r1, #0]
1000ea50:	7218      	strb	r0, [r3, #8]
1000ea52:	0a09      	lsrs	r1, r1, #8
1000ea54:	7159      	strb	r1, [r3, #5]
1000ea56:	0a00      	lsrs	r0, r0, #8
1000ea58:	0a21      	lsrs	r1, r4, #8
1000ea5a:	711d      	strb	r5, [r3, #4]
1000ea5c:	7258      	strb	r0, [r3, #9]
1000ea5e:	729c      	strb	r4, [r3, #10]
1000ea60:	72d9      	strb	r1, [r3, #11]
1000ea62:	731a      	strb	r2, [r3, #12]
1000ea64:	1c1d      	adds	r5, r3, #0
1000ea66:	2c00      	cmp	r4, #0
1000ea68:	d007      	beq.n	1000ea7a <gattc_read_cfm+0x42>
1000ea6a:	9904      	ldr	r1, [sp, #16]
1000ea6c:	1c22      	adds	r2, r4, #0
1000ea6e:	480a      	ldr	r0, [pc, #40]	; (1000ea98 <gattc_read_cfm+0x60>)
1000ea70:	4b0a      	ldr	r3, [pc, #40]	; (1000ea9c <gattc_read_cfm+0x64>)
1000ea72:	340d      	adds	r4, #13
1000ea74:	4798      	blx	r3
1000ea76:	b2a1      	uxth	r1, r4
1000ea78:	e001      	b.n	1000ea7e <gattc_read_cfm+0x46>
1000ea7a:	210e      	movs	r1, #14
1000ea7c:	735c      	strb	r4, [r3, #13]
1000ea7e:	1c0b      	adds	r3, r1, #0
1000ea80:	3b08      	subs	r3, #8
1000ea82:	71ab      	strb	r3, [r5, #6]
1000ea84:	121b      	asrs	r3, r3, #8
1000ea86:	71eb      	strb	r3, [r5, #7]
1000ea88:	1c28      	adds	r0, r5, #0
1000ea8a:	4b05      	ldr	r3, [pc, #20]	; (1000eaa0 <gattc_read_cfm+0x68>)
1000ea8c:	4798      	blx	r3
1000ea8e:	bd38      	pop	{r3, r4, r5, pc}
1000ea90:	10014a94 	.word	0x10014a94
1000ea94:	10014724 	.word	0x10014724
1000ea98:	10014aa1 	.word	0x10014aa1
1000ea9c:	1001025f 	.word	0x1001025f
1000eaa0:	1000d8b1 	.word	0x1000d8b1

1000eaa4 <gattc_write_cfm>:
1000eaa4:	4b0d      	ldr	r3, [pc, #52]	; (1000eadc <gattc_write_cfm+0x38>)
1000eaa6:	b510      	push	{r4, lr}
1000eaa8:	729a      	strb	r2, [r3, #10]
1000eaaa:	2203      	movs	r2, #3
1000eaac:	2416      	movs	r4, #22
1000eaae:	719a      	strb	r2, [r3, #6]
1000eab0:	2200      	movs	r2, #0
1000eab2:	70d9      	strb	r1, [r3, #3]
1000eab4:	490a      	ldr	r1, [pc, #40]	; (1000eae0 <gattc_write_cfm+0x3c>)
1000eab6:	701c      	strb	r4, [r3, #0]
1000eab8:	3c0a      	subs	r4, #10
1000eaba:	705c      	strb	r4, [r3, #1]
1000eabc:	709c      	strb	r4, [r3, #2]
1000eabe:	880c      	ldrh	r4, [r1, #0]
1000eac0:	8809      	ldrh	r1, [r1, #0]
1000eac2:	7218      	strb	r0, [r3, #8]
1000eac4:	0a09      	lsrs	r1, r1, #8
1000eac6:	0a00      	lsrs	r0, r0, #8
1000eac8:	711c      	strb	r4, [r3, #4]
1000eaca:	7159      	strb	r1, [r3, #5]
1000eacc:	7258      	strb	r0, [r3, #9]
1000eace:	71da      	strb	r2, [r3, #7]
1000ead0:	1c18      	adds	r0, r3, #0
1000ead2:	210b      	movs	r1, #11
1000ead4:	4b03      	ldr	r3, [pc, #12]	; (1000eae4 <gattc_write_cfm+0x40>)
1000ead6:	4798      	blx	r3
1000ead8:	bd10      	pop	{r4, pc}
1000eada:	46c0      	nop			; (mov r8, r8)
1000eadc:	10014a94 	.word	0x10014a94
1000eae0:	10014724 	.word	0x10014724
1000eae4:	1000d8b1 	.word	0x1000d8b1

1000eae8 <gattc_att_info_cfm>:
1000eae8:	b538      	push	{r3, r4, r5, lr}
1000eaea:	4c0e      	ldr	r4, [pc, #56]	; (1000eb24 <gattc_att_info_cfm+0x3c>)
1000eaec:	2518      	movs	r5, #24
1000eaee:	7323      	strb	r3, [r4, #12]
1000eaf0:	2305      	movs	r3, #5
1000eaf2:	71a3      	strb	r3, [r4, #6]
1000eaf4:	2300      	movs	r3, #0
1000eaf6:	70e1      	strb	r1, [r4, #3]
1000eaf8:	490b      	ldr	r1, [pc, #44]	; (1000eb28 <gattc_att_info_cfm+0x40>)
1000eafa:	7025      	strb	r5, [r4, #0]
1000eafc:	3d0c      	subs	r5, #12
1000eafe:	7065      	strb	r5, [r4, #1]
1000eb00:	70a5      	strb	r5, [r4, #2]
1000eb02:	880d      	ldrh	r5, [r1, #0]
1000eb04:	8809      	ldrh	r1, [r1, #0]
1000eb06:	7220      	strb	r0, [r4, #8]
1000eb08:	0a09      	lsrs	r1, r1, #8
1000eb0a:	0a00      	lsrs	r0, r0, #8
1000eb0c:	7161      	strb	r1, [r4, #5]
1000eb0e:	7260      	strb	r0, [r4, #9]
1000eb10:	72a2      	strb	r2, [r4, #10]
1000eb12:	71e3      	strb	r3, [r4, #7]
1000eb14:	0a12      	lsrs	r2, r2, #8
1000eb16:	1c20      	adds	r0, r4, #0
1000eb18:	210d      	movs	r1, #13
1000eb1a:	4b04      	ldr	r3, [pc, #16]	; (1000eb2c <gattc_att_info_cfm+0x44>)
1000eb1c:	7125      	strb	r5, [r4, #4]
1000eb1e:	72e2      	strb	r2, [r4, #11]
1000eb20:	4798      	blx	r3
1000eb22:	bd38      	pop	{r3, r4, r5, pc}
1000eb24:	10014a94 	.word	0x10014a94
1000eb28:	10014724 	.word	0x10014724
1000eb2c:	1000d8b1 	.word	0x1000d8b1

1000eb30 <gattc_event_cfm_handler>:
1000eb30:	220e      	movs	r2, #14
1000eb32:	b508      	push	{r3, lr}
1000eb34:	4b0b      	ldr	r3, [pc, #44]	; (1000eb64 <gattc_event_cfm_handler+0x34>)
1000eb36:	701a      	strb	r2, [r3, #0]
1000eb38:	3a02      	subs	r2, #2
1000eb3a:	705a      	strb	r2, [r3, #1]
1000eb3c:	709a      	strb	r2, [r3, #2]
1000eb3e:	4a0a      	ldr	r2, [pc, #40]	; (1000eb68 <gattc_event_cfm_handler+0x38>)
1000eb40:	70d8      	strb	r0, [r3, #3]
1000eb42:	8810      	ldrh	r0, [r2, #0]
1000eb44:	8812      	ldrh	r2, [r2, #0]
1000eb46:	7219      	strb	r1, [r3, #8]
1000eb48:	0a12      	lsrs	r2, r2, #8
1000eb4a:	715a      	strb	r2, [r3, #5]
1000eb4c:	2202      	movs	r2, #2
1000eb4e:	719a      	strb	r2, [r3, #6]
1000eb50:	2200      	movs	r2, #0
1000eb52:	0a09      	lsrs	r1, r1, #8
1000eb54:	7118      	strb	r0, [r3, #4]
1000eb56:	7259      	strb	r1, [r3, #9]
1000eb58:	71da      	strb	r2, [r3, #7]
1000eb5a:	1c18      	adds	r0, r3, #0
1000eb5c:	210a      	movs	r1, #10
1000eb5e:	4b03      	ldr	r3, [pc, #12]	; (1000eb6c <gattc_event_cfm_handler+0x3c>)
1000eb60:	4798      	blx	r3
1000eb62:	bd08      	pop	{r3, pc}
1000eb64:	10014a94 	.word	0x10014a94
1000eb68:	10014724 	.word	0x10014724
1000eb6c:	1000d8b1 	.word	0x1000d8b1

1000eb70 <gattc_disc_svc_ind_parser>:
1000eb70:	b570      	push	{r4, r5, r6, lr}
1000eb72:	1c15      	adds	r5, r2, #0
1000eb74:	0a00      	lsrs	r0, r0, #8
1000eb76:	8010      	strh	r0, [r2, #0]
1000eb78:	784b      	ldrb	r3, [r1, #1]
1000eb7a:	780a      	ldrb	r2, [r1, #0]
1000eb7c:	021b      	lsls	r3, r3, #8
1000eb7e:	4313      	orrs	r3, r2
1000eb80:	806b      	strh	r3, [r5, #2]
1000eb82:	78cb      	ldrb	r3, [r1, #3]
1000eb84:	788a      	ldrb	r2, [r1, #2]
1000eb86:	021b      	lsls	r3, r3, #8
1000eb88:	4313      	orrs	r3, r2
1000eb8a:	80ab      	strh	r3, [r5, #4]
1000eb8c:	790e      	ldrb	r6, [r1, #4]
1000eb8e:	4b05      	ldr	r3, [pc, #20]	; (1000eba4 <gattc_disc_svc_ind_parser+0x34>)
1000eb90:	1c30      	adds	r0, r6, #0
1000eb92:	1c0c      	adds	r4, r1, #0
1000eb94:	4798      	blx	r3
1000eb96:	1c32      	adds	r2, r6, #0
1000eb98:	71a8      	strb	r0, [r5, #6]
1000eb9a:	1d61      	adds	r1, r4, #5
1000eb9c:	1de8      	adds	r0, r5, #7
1000eb9e:	4b02      	ldr	r3, [pc, #8]	; (1000eba8 <gattc_disc_svc_ind_parser+0x38>)
1000eba0:	4798      	blx	r3
1000eba2:	bd70      	pop	{r4, r5, r6, pc}
1000eba4:	1000d269 	.word	0x1000d269
1000eba8:	1001025f 	.word	0x1001025f

1000ebac <gattc_disc_svc_incl_ind_parser>:
1000ebac:	b570      	push	{r4, r5, r6, lr}
1000ebae:	1c15      	adds	r5, r2, #0
1000ebb0:	0a00      	lsrs	r0, r0, #8
1000ebb2:	8010      	strh	r0, [r2, #0]
1000ebb4:	784b      	ldrb	r3, [r1, #1]
1000ebb6:	780a      	ldrb	r2, [r1, #0]
1000ebb8:	021b      	lsls	r3, r3, #8
1000ebba:	4313      	orrs	r3, r2
1000ebbc:	806b      	strh	r3, [r5, #2]
1000ebbe:	78cb      	ldrb	r3, [r1, #3]
1000ebc0:	788a      	ldrb	r2, [r1, #2]
1000ebc2:	021b      	lsls	r3, r3, #8
1000ebc4:	4313      	orrs	r3, r2
1000ebc6:	80ab      	strh	r3, [r5, #4]
1000ebc8:	794b      	ldrb	r3, [r1, #5]
1000ebca:	790a      	ldrb	r2, [r1, #4]
1000ebcc:	021b      	lsls	r3, r3, #8
1000ebce:	4313      	orrs	r3, r2
1000ebd0:	80eb      	strh	r3, [r5, #6]
1000ebd2:	798e      	ldrb	r6, [r1, #6]
1000ebd4:	4b05      	ldr	r3, [pc, #20]	; (1000ebec <gattc_disc_svc_incl_ind_parser+0x40>)
1000ebd6:	1c30      	adds	r0, r6, #0
1000ebd8:	1c0c      	adds	r4, r1, #0
1000ebda:	4798      	blx	r3
1000ebdc:	7228      	strb	r0, [r5, #8]
1000ebde:	1c28      	adds	r0, r5, #0
1000ebe0:	1c32      	adds	r2, r6, #0
1000ebe2:	1de1      	adds	r1, r4, #7
1000ebe4:	4b02      	ldr	r3, [pc, #8]	; (1000ebf0 <gattc_disc_svc_incl_ind_parser+0x44>)
1000ebe6:	3009      	adds	r0, #9
1000ebe8:	4798      	blx	r3
1000ebea:	bd70      	pop	{r4, r5, r6, pc}
1000ebec:	1000d269 	.word	0x1000d269
1000ebf0:	1001025f 	.word	0x1001025f

1000ebf4 <gattc_disc_char_ind_parser>:
1000ebf4:	b570      	push	{r4, r5, r6, lr}
1000ebf6:	1c15      	adds	r5, r2, #0
1000ebf8:	0a00      	lsrs	r0, r0, #8
1000ebfa:	8010      	strh	r0, [r2, #0]
1000ebfc:	784b      	ldrb	r3, [r1, #1]
1000ebfe:	780a      	ldrb	r2, [r1, #0]
1000ec00:	021b      	lsls	r3, r3, #8
1000ec02:	4313      	orrs	r3, r2
1000ec04:	806b      	strh	r3, [r5, #2]
1000ec06:	78cb      	ldrb	r3, [r1, #3]
1000ec08:	788a      	ldrb	r2, [r1, #2]
1000ec0a:	021b      	lsls	r3, r3, #8
1000ec0c:	4313      	orrs	r3, r2
1000ec0e:	80ab      	strh	r3, [r5, #4]
1000ec10:	790b      	ldrb	r3, [r1, #4]
1000ec12:	1c0c      	adds	r4, r1, #0
1000ec14:	71ab      	strb	r3, [r5, #6]
1000ec16:	794e      	ldrb	r6, [r1, #5]
1000ec18:	4b05      	ldr	r3, [pc, #20]	; (1000ec30 <gattc_disc_char_ind_parser+0x3c>)
1000ec1a:	1c30      	adds	r0, r6, #0
1000ec1c:	4798      	blx	r3
1000ec1e:	71e8      	strb	r0, [r5, #7]
1000ec20:	1c28      	adds	r0, r5, #0
1000ec22:	1c32      	adds	r2, r6, #0
1000ec24:	1da1      	adds	r1, r4, #6
1000ec26:	4b03      	ldr	r3, [pc, #12]	; (1000ec34 <gattc_disc_char_ind_parser+0x40>)
1000ec28:	3008      	adds	r0, #8
1000ec2a:	4798      	blx	r3
1000ec2c:	bd70      	pop	{r4, r5, r6, pc}
1000ec2e:	46c0      	nop			; (mov r8, r8)
1000ec30:	1000d269 	.word	0x1000d269
1000ec34:	1001025f 	.word	0x1001025f

1000ec38 <gattc_disc_char_desc_ind_parser>:
1000ec38:	b570      	push	{r4, r5, r6, lr}
1000ec3a:	1c15      	adds	r5, r2, #0
1000ec3c:	0a00      	lsrs	r0, r0, #8
1000ec3e:	8010      	strh	r0, [r2, #0]
1000ec40:	784b      	ldrb	r3, [r1, #1]
1000ec42:	780a      	ldrb	r2, [r1, #0]
1000ec44:	021b      	lsls	r3, r3, #8
1000ec46:	4313      	orrs	r3, r2
1000ec48:	806b      	strh	r3, [r5, #2]
1000ec4a:	788e      	ldrb	r6, [r1, #2]
1000ec4c:	4b05      	ldr	r3, [pc, #20]	; (1000ec64 <gattc_disc_char_desc_ind_parser+0x2c>)
1000ec4e:	1c30      	adds	r0, r6, #0
1000ec50:	1c0c      	adds	r4, r1, #0
1000ec52:	4798      	blx	r3
1000ec54:	1c32      	adds	r2, r6, #0
1000ec56:	7128      	strb	r0, [r5, #4]
1000ec58:	1ce1      	adds	r1, r4, #3
1000ec5a:	1d68      	adds	r0, r5, #5
1000ec5c:	4b02      	ldr	r3, [pc, #8]	; (1000ec68 <gattc_disc_char_desc_ind_parser+0x30>)
1000ec5e:	4798      	blx	r3
1000ec60:	bd70      	pop	{r4, r5, r6, pc}
1000ec62:	46c0      	nop			; (mov r8, r8)
1000ec64:	1000d269 	.word	0x1000d269
1000ec68:	1001025f 	.word	0x1001025f

1000ec6c <gattc_event_ind_and_notification_parser>:
1000ec6c:	b510      	push	{r4, lr}
1000ec6e:	780c      	ldrb	r4, [r1, #0]
1000ec70:	1c13      	adds	r3, r2, #0
1000ec72:	2c12      	cmp	r4, #18
1000ec74:	d10e      	bne.n	1000ec94 <gattc_event_ind_and_notification_parser+0x28>
1000ec76:	0a00      	lsrs	r0, r0, #8
1000ec78:	8010      	strh	r0, [r2, #0]
1000ec7a:	788a      	ldrb	r2, [r1, #2]
1000ec7c:	709a      	strb	r2, [r3, #2]
1000ec7e:	7948      	ldrb	r0, [r1, #5]
1000ec80:	790c      	ldrb	r4, [r1, #4]
1000ec82:	0200      	lsls	r0, r0, #8
1000ec84:	4320      	orrs	r0, r4
1000ec86:	8098      	strh	r0, [r3, #4]
1000ec88:	3106      	adds	r1, #6
1000ec8a:	1d98      	adds	r0, r3, #6
1000ec8c:	4b0b      	ldr	r3, [pc, #44]	; (1000ecbc <gattc_event_ind_and_notification_parser+0x50>)
1000ec8e:	4798      	blx	r3
1000ec90:	221b      	movs	r2, #27
1000ec92:	e010      	b.n	1000ecb6 <gattc_event_ind_and_notification_parser+0x4a>
1000ec94:	2200      	movs	r2, #0
1000ec96:	2c13      	cmp	r4, #19
1000ec98:	d10d      	bne.n	1000ecb6 <gattc_event_ind_and_notification_parser+0x4a>
1000ec9a:	0a00      	lsrs	r0, r0, #8
1000ec9c:	8018      	strh	r0, [r3, #0]
1000ec9e:	788a      	ldrb	r2, [r1, #2]
1000eca0:	709a      	strb	r2, [r3, #2]
1000eca2:	7908      	ldrb	r0, [r1, #4]
1000eca4:	78cc      	ldrb	r4, [r1, #3]
1000eca6:	0200      	lsls	r0, r0, #8
1000eca8:	4320      	orrs	r0, r4
1000ecaa:	8098      	strh	r0, [r3, #4]
1000ecac:	3106      	adds	r1, #6
1000ecae:	1d98      	adds	r0, r3, #6
1000ecb0:	4b02      	ldr	r3, [pc, #8]	; (1000ecbc <gattc_event_ind_and_notification_parser+0x50>)
1000ecb2:	4798      	blx	r3
1000ecb4:	221c      	movs	r2, #28
1000ecb6:	1c10      	adds	r0, r2, #0
1000ecb8:	bd10      	pop	{r4, pc}
1000ecba:	46c0      	nop			; (mov r8, r8)
1000ecbc:	1001025f 	.word	0x1001025f

1000ecc0 <gattc_complete_evt_handler>:
1000ecc0:	b500      	push	{lr}
1000ecc2:	0a00      	lsrs	r0, r0, #8
1000ecc4:	8010      	strh	r0, [r2, #0]
1000ecc6:	7808      	ldrb	r0, [r1, #0]
1000ecc8:	7090      	strb	r0, [r2, #2]
1000ecca:	784b      	ldrb	r3, [r1, #1]
1000eccc:	3801      	subs	r0, #1
1000ecce:	70d3      	strb	r3, [r2, #3]
1000ecd0:	2813      	cmp	r0, #19
1000ecd2:	d82c      	bhi.n	1000ed2e <gattc_complete_evt_handler+0x6e>
1000ecd4:	f000 f914 	bl	1000ef00 <__gnu_thumb1_case_uqi>
1000ecd8:	0a0a0a0c 	.word	0x0a0a0a0c
1000ecdc:	210a0a0a 	.word	0x210a0a0a
1000ece0:	111f2121 	.word	0x111f2121
1000ece4:	2b111111 	.word	0x2b111111
1000ece8:	2919132b 	.word	0x2919132b
1000ecec:	2017      	movs	r0, #23
1000ecee:	e01f      	b.n	1000ed30 <gattc_complete_evt_handler+0x70>
1000ecf0:	2024      	movs	r0, #36	; 0x24
1000ecf2:	2b00      	cmp	r3, #0
1000ecf4:	d11c      	bne.n	1000ed30 <gattc_complete_evt_handler+0x70>
1000ecf6:	3017      	adds	r0, #23
1000ecf8:	e01a      	b.n	1000ed30 <gattc_complete_evt_handler+0x70>
1000ecfa:	2025      	movs	r0, #37	; 0x25
1000ecfc:	e018      	b.n	1000ed30 <gattc_complete_evt_handler+0x70>
1000ecfe:	4a0d      	ldr	r2, [pc, #52]	; (1000ed34 <gattc_complete_evt_handler+0x74>)
1000ed00:	201d      	movs	r0, #29
1000ed02:	6813      	ldr	r3, [r2, #0]
1000ed04:	3b01      	subs	r3, #1
1000ed06:	6013      	str	r3, [r2, #0]
1000ed08:	e012      	b.n	1000ed30 <gattc_complete_evt_handler+0x70>
1000ed0a:	4a0a      	ldr	r2, [pc, #40]	; (1000ed34 <gattc_complete_evt_handler+0x74>)
1000ed0c:	201e      	movs	r0, #30
1000ed0e:	6813      	ldr	r3, [r2, #0]
1000ed10:	3b01      	subs	r3, #1
1000ed12:	6013      	str	r3, [r2, #0]
1000ed14:	e00c      	b.n	1000ed30 <gattc_complete_evt_handler+0x70>
1000ed16:	2019      	movs	r0, #25
1000ed18:	e00a      	b.n	1000ed30 <gattc_complete_evt_handler+0x70>
1000ed1a:	203b      	movs	r0, #59	; 0x3b
1000ed1c:	2b00      	cmp	r3, #0
1000ed1e:	d007      	beq.n	1000ed30 <gattc_complete_evt_handler+0x70>
1000ed20:	2182      	movs	r1, #130	; 0x82
1000ed22:	0089      	lsls	r1, r1, #2
1000ed24:	5453      	strb	r3, [r2, r1]
1000ed26:	3823      	subs	r0, #35	; 0x23
1000ed28:	e002      	b.n	1000ed30 <gattc_complete_evt_handler+0x70>
1000ed2a:	2021      	movs	r0, #33	; 0x21
1000ed2c:	e000      	b.n	1000ed30 <gattc_complete_evt_handler+0x70>
1000ed2e:	2000      	movs	r0, #0
1000ed30:	bd00      	pop	{pc}
1000ed32:	46c0      	nop			; (mov r8, r8)
1000ed34:	10013a80 	.word	0x10013a80

1000ed38 <gattc_event_mtu_changed_ind_parser>:
1000ed38:	0a00      	lsrs	r0, r0, #8
1000ed3a:	8010      	strh	r0, [r2, #0]
1000ed3c:	784b      	ldrb	r3, [r1, #1]
1000ed3e:	7809      	ldrb	r1, [r1, #0]
1000ed40:	021b      	lsls	r3, r3, #8
1000ed42:	430b      	orrs	r3, r1
1000ed44:	8053      	strh	r3, [r2, #2]
1000ed46:	4770      	bx	lr

1000ed48 <gattc_read_ind_parser>:
1000ed48:	0a00      	lsrs	r0, r0, #8
1000ed4a:	b508      	push	{r3, lr}
1000ed4c:	8010      	strh	r0, [r2, #0]
1000ed4e:	1c13      	adds	r3, r2, #0
1000ed50:	2282      	movs	r2, #130	; 0x82
1000ed52:	2000      	movs	r0, #0
1000ed54:	0092      	lsls	r2, r2, #2
1000ed56:	5498      	strb	r0, [r3, r2]
1000ed58:	784a      	ldrb	r2, [r1, #1]
1000ed5a:	7808      	ldrb	r0, [r1, #0]
1000ed5c:	0212      	lsls	r2, r2, #8
1000ed5e:	4302      	orrs	r2, r0
1000ed60:	805a      	strh	r2, [r3, #2]
1000ed62:	78ca      	ldrb	r2, [r1, #3]
1000ed64:	7888      	ldrb	r0, [r1, #2]
1000ed66:	0212      	lsls	r2, r2, #8
1000ed68:	4302      	orrs	r2, r0
1000ed6a:	80da      	strh	r2, [r3, #6]
1000ed6c:	794a      	ldrb	r2, [r1, #5]
1000ed6e:	7908      	ldrb	r0, [r1, #4]
1000ed70:	0212      	lsls	r2, r2, #8
1000ed72:	4302      	orrs	r2, r0
1000ed74:	809a      	strh	r2, [r3, #4]
1000ed76:	3308      	adds	r3, #8
1000ed78:	1c18      	adds	r0, r3, #0
1000ed7a:	3106      	adds	r1, #6
1000ed7c:	4b01      	ldr	r3, [pc, #4]	; (1000ed84 <gattc_read_ind_parser+0x3c>)
1000ed7e:	4798      	blx	r3
1000ed80:	bd08      	pop	{r3, pc}
1000ed82:	46c0      	nop			; (mov r8, r8)
1000ed84:	1001025f 	.word	0x1001025f

1000ed88 <gattc_svc_changed_cfg_ind_parser>:
1000ed88:	0a00      	lsrs	r0, r0, #8
1000ed8a:	8010      	strh	r0, [r2, #0]
1000ed8c:	784b      	ldrb	r3, [r1, #1]
1000ed8e:	7809      	ldrb	r1, [r1, #0]
1000ed90:	021b      	lsls	r3, r3, #8
1000ed92:	430b      	orrs	r3, r1
1000ed94:	8053      	strh	r3, [r2, #2]
1000ed96:	4770      	bx	lr

1000ed98 <init_gattc_task_module>:
1000ed98:	2300      	movs	r3, #0
1000ed9a:	4a02      	ldr	r2, [pc, #8]	; (1000eda4 <init_gattc_task_module+0xc>)
1000ed9c:	8013      	strh	r3, [r2, #0]
1000ed9e:	4a02      	ldr	r2, [pc, #8]	; (1000eda8 <init_gattc_task_module+0x10>)
1000eda0:	8013      	strh	r3, [r2, #0]
1000eda2:	4770      	bx	lr
1000eda4:	10013a7a 	.word	0x10013a7a
1000eda8:	10013a7c 	.word	0x10013a7c

1000edac <gattm_att_set_value_req_handler>:
1000edac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000edae:	466b      	mov	r3, sp
1000edb0:	1dde      	adds	r6, r3, #7
1000edb2:	2300      	movs	r3, #0
1000edb4:	1c0d      	adds	r5, r1, #0
1000edb6:	210c      	movs	r1, #12
1000edb8:	270b      	movs	r7, #11
1000edba:	4c17      	ldr	r4, [pc, #92]	; (1000ee18 <gattm_att_set_value_req_handler+0x6c>)
1000edbc:	7033      	strb	r3, [r6, #0]
1000edbe:	70e3      	strb	r3, [r4, #3]
1000edc0:	4b16      	ldr	r3, [pc, #88]	; (1000ee1c <gattm_att_set_value_req_handler+0x70>)
1000edc2:	7021      	strb	r1, [r4, #0]
1000edc4:	8819      	ldrh	r1, [r3, #0]
1000edc6:	881b      	ldrh	r3, [r3, #0]
1000edc8:	7220      	strb	r0, [r4, #8]
1000edca:	0a1b      	lsrs	r3, r3, #8
1000edcc:	7163      	strb	r3, [r4, #5]
1000edce:	0a00      	lsrs	r0, r0, #8
1000edd0:	0a2b      	lsrs	r3, r5, #8
1000edd2:	7121      	strb	r1, [r4, #4]
1000edd4:	7260      	strb	r0, [r4, #9]
1000edd6:	1c11      	adds	r1, r2, #0
1000edd8:	72a5      	strb	r5, [r4, #10]
1000edda:	1c2a      	adds	r2, r5, #0
1000eddc:	72e3      	strb	r3, [r4, #11]
1000edde:	350c      	adds	r5, #12
1000ede0:	4b0f      	ldr	r3, [pc, #60]	; (1000ee20 <gattm_att_set_value_req_handler+0x74>)
1000ede2:	4810      	ldr	r0, [pc, #64]	; (1000ee24 <gattm_att_set_value_req_handler+0x78>)
1000ede4:	7067      	strb	r7, [r4, #1]
1000ede6:	70a7      	strb	r7, [r4, #2]
1000ede8:	4798      	blx	r3
1000edea:	b2a9      	uxth	r1, r5
1000edec:	4b0e      	ldr	r3, [pc, #56]	; (1000ee28 <gattm_att_set_value_req_handler+0x7c>)
1000edee:	4d0f      	ldr	r5, [pc, #60]	; (1000ee2c <gattm_att_set_value_req_handler+0x80>)
1000edf0:	1c20      	adds	r0, r4, #0
1000edf2:	802b      	strh	r3, [r5, #0]
1000edf4:	1c0b      	adds	r3, r1, #0
1000edf6:	3b08      	subs	r3, #8
1000edf8:	71a3      	strb	r3, [r4, #6]
1000edfa:	121b      	asrs	r3, r3, #8
1000edfc:	71e3      	strb	r3, [r4, #7]
1000edfe:	4b0c      	ldr	r3, [pc, #48]	; (1000ee30 <gattm_att_set_value_req_handler+0x84>)
1000ee00:	80af      	strh	r7, [r5, #4]
1000ee02:	4798      	blx	r3
1000ee04:	1c30      	adds	r0, r6, #0
1000ee06:	4b0b      	ldr	r3, [pc, #44]	; (1000ee34 <gattm_att_set_value_req_handler+0x88>)
1000ee08:	4798      	blx	r3
1000ee0a:	7833      	ldrb	r3, [r6, #0]
1000ee0c:	20e2      	movs	r0, #226	; 0xe2
1000ee0e:	2b00      	cmp	r3, #0
1000ee10:	d101      	bne.n	1000ee16 <gattm_att_set_value_req_handler+0x6a>
1000ee12:	68ab      	ldr	r3, [r5, #8]
1000ee14:	7898      	ldrb	r0, [r3, #2]
1000ee16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000ee18:	10014a94 	.word	0x10014a94
1000ee1c:	10014724 	.word	0x10014724
1000ee20:	1001025f 	.word	0x1001025f
1000ee24:	10014aa0 	.word	0x10014aa0
1000ee28:	00000b0d 	.word	0x00000b0d
1000ee2c:	10014718 	.word	0x10014718
1000ee30:	1000d8b1 	.word	0x1000d8b1
1000ee34:	1000d915 	.word	0x1000d915

1000ee38 <gattm_att_get_value_req_handler>:
1000ee38:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ee3a:	b085      	sub	sp, #20
1000ee3c:	9201      	str	r2, [sp, #4]
1000ee3e:	220a      	movs	r2, #10
1000ee40:	1c04      	adds	r4, r0, #0
1000ee42:	481d      	ldr	r0, [pc, #116]	; (1000eeb8 <gattm_att_get_value_req_handler+0x80>)
1000ee44:	ab02      	add	r3, sp, #8
1000ee46:	1dde      	adds	r6, r3, #7
1000ee48:	7002      	strb	r2, [r0, #0]
1000ee4a:	2300      	movs	r3, #0
1000ee4c:	220b      	movs	r2, #11
1000ee4e:	4d1b      	ldr	r5, [pc, #108]	; (1000eebc <gattm_att_get_value_req_handler+0x84>)
1000ee50:	1c0f      	adds	r7, r1, #0
1000ee52:	8829      	ldrh	r1, [r5, #0]
1000ee54:	882d      	ldrh	r5, [r5, #0]
1000ee56:	7101      	strb	r1, [r0, #4]
1000ee58:	0a2d      	lsrs	r5, r5, #8
1000ee5a:	7145      	strb	r5, [r0, #5]
1000ee5c:	0a25      	lsrs	r5, r4, #8
1000ee5e:	7245      	strb	r5, [r0, #9]
1000ee60:	4917      	ldr	r1, [pc, #92]	; (1000eec0 <gattm_att_get_value_req_handler+0x88>)
1000ee62:	4d18      	ldr	r5, [pc, #96]	; (1000eec4 <gattm_att_get_value_req_handler+0x8c>)
1000ee64:	7033      	strb	r3, [r6, #0]
1000ee66:	7042      	strb	r2, [r0, #1]
1000ee68:	7082      	strb	r2, [r0, #2]
1000ee6a:	70c3      	strb	r3, [r0, #3]
1000ee6c:	8029      	strh	r1, [r5, #0]
1000ee6e:	80aa      	strh	r2, [r5, #4]
1000ee70:	71c3      	strb	r3, [r0, #7]
1000ee72:	3a09      	subs	r2, #9
1000ee74:	210a      	movs	r1, #10
1000ee76:	4b14      	ldr	r3, [pc, #80]	; (1000eec8 <gattm_att_get_value_req_handler+0x90>)
1000ee78:	7182      	strb	r2, [r0, #6]
1000ee7a:	7204      	strb	r4, [r0, #8]
1000ee7c:	4798      	blx	r3
1000ee7e:	1c30      	adds	r0, r6, #0
1000ee80:	4b12      	ldr	r3, [pc, #72]	; (1000eecc <gattm_att_get_value_req_handler+0x94>)
1000ee82:	4798      	blx	r3
1000ee84:	7833      	ldrb	r3, [r6, #0]
1000ee86:	20e2      	movs	r0, #226	; 0xe2
1000ee88:	2b00      	cmp	r3, #0
1000ee8a:	d112      	bne.n	1000eeb2 <gattm_att_get_value_req_handler+0x7a>
1000ee8c:	68a9      	ldr	r1, [r5, #8]
1000ee8e:	9801      	ldr	r0, [sp, #4]
1000ee90:	784d      	ldrb	r5, [r1, #1]
1000ee92:	780b      	ldrb	r3, [r1, #0]
1000ee94:	78ca      	ldrb	r2, [r1, #3]
1000ee96:	022d      	lsls	r5, r5, #8
1000ee98:	431d      	orrs	r5, r3
1000ee9a:	788b      	ldrb	r3, [r1, #2]
1000ee9c:	0212      	lsls	r2, r2, #8
1000ee9e:	431a      	orrs	r2, r3
1000eea0:	803a      	strh	r2, [r7, #0]
1000eea2:	790e      	ldrb	r6, [r1, #4]
1000eea4:	4b0a      	ldr	r3, [pc, #40]	; (1000eed0 <gattm_att_get_value_req_handler+0x98>)
1000eea6:	3105      	adds	r1, #5
1000eea8:	4798      	blx	r3
1000eeaa:	20e2      	movs	r0, #226	; 0xe2
1000eeac:	42ac      	cmp	r4, r5
1000eeae:	d100      	bne.n	1000eeb2 <gattm_att_get_value_req_handler+0x7a>
1000eeb0:	1c30      	adds	r0, r6, #0
1000eeb2:	b005      	add	sp, #20
1000eeb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eeb6:	46c0      	nop			; (mov r8, r8)
1000eeb8:	10014a94 	.word	0x10014a94
1000eebc:	10014724 	.word	0x10014724
1000eec0:	00000b0b 	.word	0x00000b0b
1000eec4:	10014718 	.word	0x10014718
1000eec8:	1000d8b1 	.word	0x1000d8b1
1000eecc:	1000d915 	.word	0x1000d915
1000eed0:	1001025f 	.word	0x1001025f

1000eed4 <htpt_enable_rsp_handler>:
1000eed4:	780b      	ldrb	r3, [r1, #0]
1000eed6:	7013      	strb	r3, [r2, #0]
1000eed8:	784b      	ldrb	r3, [r1, #1]
1000eeda:	7053      	strb	r3, [r2, #1]
1000eedc:	4770      	bx	lr

1000eede <htpt_temp_send_rsp_handler>:
1000eede:	780b      	ldrb	r3, [r1, #0]
1000eee0:	7013      	strb	r3, [r2, #0]
1000eee2:	4770      	bx	lr

1000eee4 <htpt_meas_intv_upd_rsp_handler>:
1000eee4:	780b      	ldrb	r3, [r1, #0]
1000eee6:	7013      	strb	r3, [r2, #0]
1000eee8:	4770      	bx	lr

1000eeea <htpt_meas_intv_chg_req_ind_handler>:
1000eeea:	78cb      	ldrb	r3, [r1, #3]
1000eeec:	7889      	ldrb	r1, [r1, #2]
1000eeee:	021b      	lsls	r3, r3, #8
1000eef0:	430b      	orrs	r3, r1
1000eef2:	8013      	strh	r3, [r2, #0]
1000eef4:	4770      	bx	lr

1000eef6 <htpt_cfg_indntf_ind_handler>:
1000eef6:	780b      	ldrb	r3, [r1, #0]
1000eef8:	7013      	strb	r3, [r2, #0]
1000eefa:	784b      	ldrb	r3, [r1, #1]
1000eefc:	7053      	strb	r3, [r2, #1]
1000eefe:	4770      	bx	lr

1000ef00 <__gnu_thumb1_case_uqi>:
1000ef00:	b402      	push	{r1}
1000ef02:	4671      	mov	r1, lr
1000ef04:	0849      	lsrs	r1, r1, #1
1000ef06:	0049      	lsls	r1, r1, #1
1000ef08:	5c09      	ldrb	r1, [r1, r0]
1000ef0a:	0049      	lsls	r1, r1, #1
1000ef0c:	448e      	add	lr, r1
1000ef0e:	bc02      	pop	{r1}
1000ef10:	4770      	bx	lr
1000ef12:	46c0      	nop			; (mov r8, r8)

1000ef14 <__aeabi_uidiv>:
1000ef14:	2200      	movs	r2, #0
1000ef16:	0843      	lsrs	r3, r0, #1
1000ef18:	428b      	cmp	r3, r1
1000ef1a:	d374      	bcc.n	1000f006 <__aeabi_uidiv+0xf2>
1000ef1c:	0903      	lsrs	r3, r0, #4
1000ef1e:	428b      	cmp	r3, r1
1000ef20:	d35f      	bcc.n	1000efe2 <__aeabi_uidiv+0xce>
1000ef22:	0a03      	lsrs	r3, r0, #8
1000ef24:	428b      	cmp	r3, r1
1000ef26:	d344      	bcc.n	1000efb2 <__aeabi_uidiv+0x9e>
1000ef28:	0b03      	lsrs	r3, r0, #12
1000ef2a:	428b      	cmp	r3, r1
1000ef2c:	d328      	bcc.n	1000ef80 <__aeabi_uidiv+0x6c>
1000ef2e:	0c03      	lsrs	r3, r0, #16
1000ef30:	428b      	cmp	r3, r1
1000ef32:	d30d      	bcc.n	1000ef50 <__aeabi_uidiv+0x3c>
1000ef34:	22ff      	movs	r2, #255	; 0xff
1000ef36:	0209      	lsls	r1, r1, #8
1000ef38:	ba12      	rev	r2, r2
1000ef3a:	0c03      	lsrs	r3, r0, #16
1000ef3c:	428b      	cmp	r3, r1
1000ef3e:	d302      	bcc.n	1000ef46 <__aeabi_uidiv+0x32>
1000ef40:	1212      	asrs	r2, r2, #8
1000ef42:	0209      	lsls	r1, r1, #8
1000ef44:	d065      	beq.n	1000f012 <__aeabi_uidiv+0xfe>
1000ef46:	0b03      	lsrs	r3, r0, #12
1000ef48:	428b      	cmp	r3, r1
1000ef4a:	d319      	bcc.n	1000ef80 <__aeabi_uidiv+0x6c>
1000ef4c:	e000      	b.n	1000ef50 <__aeabi_uidiv+0x3c>
1000ef4e:	0a09      	lsrs	r1, r1, #8
1000ef50:	0bc3      	lsrs	r3, r0, #15
1000ef52:	428b      	cmp	r3, r1
1000ef54:	d301      	bcc.n	1000ef5a <__aeabi_uidiv+0x46>
1000ef56:	03cb      	lsls	r3, r1, #15
1000ef58:	1ac0      	subs	r0, r0, r3
1000ef5a:	4152      	adcs	r2, r2
1000ef5c:	0b83      	lsrs	r3, r0, #14
1000ef5e:	428b      	cmp	r3, r1
1000ef60:	d301      	bcc.n	1000ef66 <__aeabi_uidiv+0x52>
1000ef62:	038b      	lsls	r3, r1, #14
1000ef64:	1ac0      	subs	r0, r0, r3
1000ef66:	4152      	adcs	r2, r2
1000ef68:	0b43      	lsrs	r3, r0, #13
1000ef6a:	428b      	cmp	r3, r1
1000ef6c:	d301      	bcc.n	1000ef72 <__aeabi_uidiv+0x5e>
1000ef6e:	034b      	lsls	r3, r1, #13
1000ef70:	1ac0      	subs	r0, r0, r3
1000ef72:	4152      	adcs	r2, r2
1000ef74:	0b03      	lsrs	r3, r0, #12
1000ef76:	428b      	cmp	r3, r1
1000ef78:	d301      	bcc.n	1000ef7e <__aeabi_uidiv+0x6a>
1000ef7a:	030b      	lsls	r3, r1, #12
1000ef7c:	1ac0      	subs	r0, r0, r3
1000ef7e:	4152      	adcs	r2, r2
1000ef80:	0ac3      	lsrs	r3, r0, #11
1000ef82:	428b      	cmp	r3, r1
1000ef84:	d301      	bcc.n	1000ef8a <__aeabi_uidiv+0x76>
1000ef86:	02cb      	lsls	r3, r1, #11
1000ef88:	1ac0      	subs	r0, r0, r3
1000ef8a:	4152      	adcs	r2, r2
1000ef8c:	0a83      	lsrs	r3, r0, #10
1000ef8e:	428b      	cmp	r3, r1
1000ef90:	d301      	bcc.n	1000ef96 <__aeabi_uidiv+0x82>
1000ef92:	028b      	lsls	r3, r1, #10
1000ef94:	1ac0      	subs	r0, r0, r3
1000ef96:	4152      	adcs	r2, r2
1000ef98:	0a43      	lsrs	r3, r0, #9
1000ef9a:	428b      	cmp	r3, r1
1000ef9c:	d301      	bcc.n	1000efa2 <__aeabi_uidiv+0x8e>
1000ef9e:	024b      	lsls	r3, r1, #9
1000efa0:	1ac0      	subs	r0, r0, r3
1000efa2:	4152      	adcs	r2, r2
1000efa4:	0a03      	lsrs	r3, r0, #8
1000efa6:	428b      	cmp	r3, r1
1000efa8:	d301      	bcc.n	1000efae <__aeabi_uidiv+0x9a>
1000efaa:	020b      	lsls	r3, r1, #8
1000efac:	1ac0      	subs	r0, r0, r3
1000efae:	4152      	adcs	r2, r2
1000efb0:	d2cd      	bcs.n	1000ef4e <__aeabi_uidiv+0x3a>
1000efb2:	09c3      	lsrs	r3, r0, #7
1000efb4:	428b      	cmp	r3, r1
1000efb6:	d301      	bcc.n	1000efbc <__aeabi_uidiv+0xa8>
1000efb8:	01cb      	lsls	r3, r1, #7
1000efba:	1ac0      	subs	r0, r0, r3
1000efbc:	4152      	adcs	r2, r2
1000efbe:	0983      	lsrs	r3, r0, #6
1000efc0:	428b      	cmp	r3, r1
1000efc2:	d301      	bcc.n	1000efc8 <__aeabi_uidiv+0xb4>
1000efc4:	018b      	lsls	r3, r1, #6
1000efc6:	1ac0      	subs	r0, r0, r3
1000efc8:	4152      	adcs	r2, r2
1000efca:	0943      	lsrs	r3, r0, #5
1000efcc:	428b      	cmp	r3, r1
1000efce:	d301      	bcc.n	1000efd4 <__aeabi_uidiv+0xc0>
1000efd0:	014b      	lsls	r3, r1, #5
1000efd2:	1ac0      	subs	r0, r0, r3
1000efd4:	4152      	adcs	r2, r2
1000efd6:	0903      	lsrs	r3, r0, #4
1000efd8:	428b      	cmp	r3, r1
1000efda:	d301      	bcc.n	1000efe0 <__aeabi_uidiv+0xcc>
1000efdc:	010b      	lsls	r3, r1, #4
1000efde:	1ac0      	subs	r0, r0, r3
1000efe0:	4152      	adcs	r2, r2
1000efe2:	08c3      	lsrs	r3, r0, #3
1000efe4:	428b      	cmp	r3, r1
1000efe6:	d301      	bcc.n	1000efec <__aeabi_uidiv+0xd8>
1000efe8:	00cb      	lsls	r3, r1, #3
1000efea:	1ac0      	subs	r0, r0, r3
1000efec:	4152      	adcs	r2, r2
1000efee:	0883      	lsrs	r3, r0, #2
1000eff0:	428b      	cmp	r3, r1
1000eff2:	d301      	bcc.n	1000eff8 <__aeabi_uidiv+0xe4>
1000eff4:	008b      	lsls	r3, r1, #2
1000eff6:	1ac0      	subs	r0, r0, r3
1000eff8:	4152      	adcs	r2, r2
1000effa:	0843      	lsrs	r3, r0, #1
1000effc:	428b      	cmp	r3, r1
1000effe:	d301      	bcc.n	1000f004 <__aeabi_uidiv+0xf0>
1000f000:	004b      	lsls	r3, r1, #1
1000f002:	1ac0      	subs	r0, r0, r3
1000f004:	4152      	adcs	r2, r2
1000f006:	1a41      	subs	r1, r0, r1
1000f008:	d200      	bcs.n	1000f00c <__aeabi_uidiv+0xf8>
1000f00a:	4601      	mov	r1, r0
1000f00c:	4152      	adcs	r2, r2
1000f00e:	4610      	mov	r0, r2
1000f010:	4770      	bx	lr
1000f012:	e7ff      	b.n	1000f014 <__aeabi_uidiv+0x100>
1000f014:	b501      	push	{r0, lr}
1000f016:	2000      	movs	r0, #0
1000f018:	f000 f8f0 	bl	1000f1fc <__aeabi_idiv0>
1000f01c:	bd02      	pop	{r1, pc}
1000f01e:	46c0      	nop			; (mov r8, r8)

1000f020 <__aeabi_uidivmod>:
1000f020:	2900      	cmp	r1, #0
1000f022:	d0f7      	beq.n	1000f014 <__aeabi_uidiv+0x100>
1000f024:	e776      	b.n	1000ef14 <__aeabi_uidiv>
1000f026:	4770      	bx	lr

1000f028 <__aeabi_idiv>:
1000f028:	4603      	mov	r3, r0
1000f02a:	430b      	orrs	r3, r1
1000f02c:	d47f      	bmi.n	1000f12e <__aeabi_idiv+0x106>
1000f02e:	2200      	movs	r2, #0
1000f030:	0843      	lsrs	r3, r0, #1
1000f032:	428b      	cmp	r3, r1
1000f034:	d374      	bcc.n	1000f120 <__aeabi_idiv+0xf8>
1000f036:	0903      	lsrs	r3, r0, #4
1000f038:	428b      	cmp	r3, r1
1000f03a:	d35f      	bcc.n	1000f0fc <__aeabi_idiv+0xd4>
1000f03c:	0a03      	lsrs	r3, r0, #8
1000f03e:	428b      	cmp	r3, r1
1000f040:	d344      	bcc.n	1000f0cc <__aeabi_idiv+0xa4>
1000f042:	0b03      	lsrs	r3, r0, #12
1000f044:	428b      	cmp	r3, r1
1000f046:	d328      	bcc.n	1000f09a <__aeabi_idiv+0x72>
1000f048:	0c03      	lsrs	r3, r0, #16
1000f04a:	428b      	cmp	r3, r1
1000f04c:	d30d      	bcc.n	1000f06a <__aeabi_idiv+0x42>
1000f04e:	22ff      	movs	r2, #255	; 0xff
1000f050:	0209      	lsls	r1, r1, #8
1000f052:	ba12      	rev	r2, r2
1000f054:	0c03      	lsrs	r3, r0, #16
1000f056:	428b      	cmp	r3, r1
1000f058:	d302      	bcc.n	1000f060 <__aeabi_idiv+0x38>
1000f05a:	1212      	asrs	r2, r2, #8
1000f05c:	0209      	lsls	r1, r1, #8
1000f05e:	d065      	beq.n	1000f12c <__aeabi_idiv+0x104>
1000f060:	0b03      	lsrs	r3, r0, #12
1000f062:	428b      	cmp	r3, r1
1000f064:	d319      	bcc.n	1000f09a <__aeabi_idiv+0x72>
1000f066:	e000      	b.n	1000f06a <__aeabi_idiv+0x42>
1000f068:	0a09      	lsrs	r1, r1, #8
1000f06a:	0bc3      	lsrs	r3, r0, #15
1000f06c:	428b      	cmp	r3, r1
1000f06e:	d301      	bcc.n	1000f074 <__aeabi_idiv+0x4c>
1000f070:	03cb      	lsls	r3, r1, #15
1000f072:	1ac0      	subs	r0, r0, r3
1000f074:	4152      	adcs	r2, r2
1000f076:	0b83      	lsrs	r3, r0, #14
1000f078:	428b      	cmp	r3, r1
1000f07a:	d301      	bcc.n	1000f080 <__aeabi_idiv+0x58>
1000f07c:	038b      	lsls	r3, r1, #14
1000f07e:	1ac0      	subs	r0, r0, r3
1000f080:	4152      	adcs	r2, r2
1000f082:	0b43      	lsrs	r3, r0, #13
1000f084:	428b      	cmp	r3, r1
1000f086:	d301      	bcc.n	1000f08c <__aeabi_idiv+0x64>
1000f088:	034b      	lsls	r3, r1, #13
1000f08a:	1ac0      	subs	r0, r0, r3
1000f08c:	4152      	adcs	r2, r2
1000f08e:	0b03      	lsrs	r3, r0, #12
1000f090:	428b      	cmp	r3, r1
1000f092:	d301      	bcc.n	1000f098 <__aeabi_idiv+0x70>
1000f094:	030b      	lsls	r3, r1, #12
1000f096:	1ac0      	subs	r0, r0, r3
1000f098:	4152      	adcs	r2, r2
1000f09a:	0ac3      	lsrs	r3, r0, #11
1000f09c:	428b      	cmp	r3, r1
1000f09e:	d301      	bcc.n	1000f0a4 <__aeabi_idiv+0x7c>
1000f0a0:	02cb      	lsls	r3, r1, #11
1000f0a2:	1ac0      	subs	r0, r0, r3
1000f0a4:	4152      	adcs	r2, r2
1000f0a6:	0a83      	lsrs	r3, r0, #10
1000f0a8:	428b      	cmp	r3, r1
1000f0aa:	d301      	bcc.n	1000f0b0 <__aeabi_idiv+0x88>
1000f0ac:	028b      	lsls	r3, r1, #10
1000f0ae:	1ac0      	subs	r0, r0, r3
1000f0b0:	4152      	adcs	r2, r2
1000f0b2:	0a43      	lsrs	r3, r0, #9
1000f0b4:	428b      	cmp	r3, r1
1000f0b6:	d301      	bcc.n	1000f0bc <__aeabi_idiv+0x94>
1000f0b8:	024b      	lsls	r3, r1, #9
1000f0ba:	1ac0      	subs	r0, r0, r3
1000f0bc:	4152      	adcs	r2, r2
1000f0be:	0a03      	lsrs	r3, r0, #8
1000f0c0:	428b      	cmp	r3, r1
1000f0c2:	d301      	bcc.n	1000f0c8 <__aeabi_idiv+0xa0>
1000f0c4:	020b      	lsls	r3, r1, #8
1000f0c6:	1ac0      	subs	r0, r0, r3
1000f0c8:	4152      	adcs	r2, r2
1000f0ca:	d2cd      	bcs.n	1000f068 <__aeabi_idiv+0x40>
1000f0cc:	09c3      	lsrs	r3, r0, #7
1000f0ce:	428b      	cmp	r3, r1
1000f0d0:	d301      	bcc.n	1000f0d6 <__aeabi_idiv+0xae>
1000f0d2:	01cb      	lsls	r3, r1, #7
1000f0d4:	1ac0      	subs	r0, r0, r3
1000f0d6:	4152      	adcs	r2, r2
1000f0d8:	0983      	lsrs	r3, r0, #6
1000f0da:	428b      	cmp	r3, r1
1000f0dc:	d301      	bcc.n	1000f0e2 <__aeabi_idiv+0xba>
1000f0de:	018b      	lsls	r3, r1, #6
1000f0e0:	1ac0      	subs	r0, r0, r3
1000f0e2:	4152      	adcs	r2, r2
1000f0e4:	0943      	lsrs	r3, r0, #5
1000f0e6:	428b      	cmp	r3, r1
1000f0e8:	d301      	bcc.n	1000f0ee <__aeabi_idiv+0xc6>
1000f0ea:	014b      	lsls	r3, r1, #5
1000f0ec:	1ac0      	subs	r0, r0, r3
1000f0ee:	4152      	adcs	r2, r2
1000f0f0:	0903      	lsrs	r3, r0, #4
1000f0f2:	428b      	cmp	r3, r1
1000f0f4:	d301      	bcc.n	1000f0fa <__aeabi_idiv+0xd2>
1000f0f6:	010b      	lsls	r3, r1, #4
1000f0f8:	1ac0      	subs	r0, r0, r3
1000f0fa:	4152      	adcs	r2, r2
1000f0fc:	08c3      	lsrs	r3, r0, #3
1000f0fe:	428b      	cmp	r3, r1
1000f100:	d301      	bcc.n	1000f106 <__aeabi_idiv+0xde>
1000f102:	00cb      	lsls	r3, r1, #3
1000f104:	1ac0      	subs	r0, r0, r3
1000f106:	4152      	adcs	r2, r2
1000f108:	0883      	lsrs	r3, r0, #2
1000f10a:	428b      	cmp	r3, r1
1000f10c:	d301      	bcc.n	1000f112 <__aeabi_idiv+0xea>
1000f10e:	008b      	lsls	r3, r1, #2
1000f110:	1ac0      	subs	r0, r0, r3
1000f112:	4152      	adcs	r2, r2
1000f114:	0843      	lsrs	r3, r0, #1
1000f116:	428b      	cmp	r3, r1
1000f118:	d301      	bcc.n	1000f11e <__aeabi_idiv+0xf6>
1000f11a:	004b      	lsls	r3, r1, #1
1000f11c:	1ac0      	subs	r0, r0, r3
1000f11e:	4152      	adcs	r2, r2
1000f120:	1a41      	subs	r1, r0, r1
1000f122:	d200      	bcs.n	1000f126 <__aeabi_idiv+0xfe>
1000f124:	4601      	mov	r1, r0
1000f126:	4152      	adcs	r2, r2
1000f128:	4610      	mov	r0, r2
1000f12a:	4770      	bx	lr
1000f12c:	e05d      	b.n	1000f1ea <__aeabi_idiv+0x1c2>
1000f12e:	0fca      	lsrs	r2, r1, #31
1000f130:	d000      	beq.n	1000f134 <__aeabi_idiv+0x10c>
1000f132:	4249      	negs	r1, r1
1000f134:	1003      	asrs	r3, r0, #32
1000f136:	d300      	bcc.n	1000f13a <__aeabi_idiv+0x112>
1000f138:	4240      	negs	r0, r0
1000f13a:	4053      	eors	r3, r2
1000f13c:	2200      	movs	r2, #0
1000f13e:	469c      	mov	ip, r3
1000f140:	0903      	lsrs	r3, r0, #4
1000f142:	428b      	cmp	r3, r1
1000f144:	d32d      	bcc.n	1000f1a2 <__aeabi_idiv+0x17a>
1000f146:	0a03      	lsrs	r3, r0, #8
1000f148:	428b      	cmp	r3, r1
1000f14a:	d312      	bcc.n	1000f172 <__aeabi_idiv+0x14a>
1000f14c:	22fc      	movs	r2, #252	; 0xfc
1000f14e:	0189      	lsls	r1, r1, #6
1000f150:	ba12      	rev	r2, r2
1000f152:	0a03      	lsrs	r3, r0, #8
1000f154:	428b      	cmp	r3, r1
1000f156:	d30c      	bcc.n	1000f172 <__aeabi_idiv+0x14a>
1000f158:	0189      	lsls	r1, r1, #6
1000f15a:	1192      	asrs	r2, r2, #6
1000f15c:	428b      	cmp	r3, r1
1000f15e:	d308      	bcc.n	1000f172 <__aeabi_idiv+0x14a>
1000f160:	0189      	lsls	r1, r1, #6
1000f162:	1192      	asrs	r2, r2, #6
1000f164:	428b      	cmp	r3, r1
1000f166:	d304      	bcc.n	1000f172 <__aeabi_idiv+0x14a>
1000f168:	0189      	lsls	r1, r1, #6
1000f16a:	d03a      	beq.n	1000f1e2 <__aeabi_idiv+0x1ba>
1000f16c:	1192      	asrs	r2, r2, #6
1000f16e:	e000      	b.n	1000f172 <__aeabi_idiv+0x14a>
1000f170:	0989      	lsrs	r1, r1, #6
1000f172:	09c3      	lsrs	r3, r0, #7
1000f174:	428b      	cmp	r3, r1
1000f176:	d301      	bcc.n	1000f17c <__aeabi_idiv+0x154>
1000f178:	01cb      	lsls	r3, r1, #7
1000f17a:	1ac0      	subs	r0, r0, r3
1000f17c:	4152      	adcs	r2, r2
1000f17e:	0983      	lsrs	r3, r0, #6
1000f180:	428b      	cmp	r3, r1
1000f182:	d301      	bcc.n	1000f188 <__aeabi_idiv+0x160>
1000f184:	018b      	lsls	r3, r1, #6
1000f186:	1ac0      	subs	r0, r0, r3
1000f188:	4152      	adcs	r2, r2
1000f18a:	0943      	lsrs	r3, r0, #5
1000f18c:	428b      	cmp	r3, r1
1000f18e:	d301      	bcc.n	1000f194 <__aeabi_idiv+0x16c>
1000f190:	014b      	lsls	r3, r1, #5
1000f192:	1ac0      	subs	r0, r0, r3
1000f194:	4152      	adcs	r2, r2
1000f196:	0903      	lsrs	r3, r0, #4
1000f198:	428b      	cmp	r3, r1
1000f19a:	d301      	bcc.n	1000f1a0 <__aeabi_idiv+0x178>
1000f19c:	010b      	lsls	r3, r1, #4
1000f19e:	1ac0      	subs	r0, r0, r3
1000f1a0:	4152      	adcs	r2, r2
1000f1a2:	08c3      	lsrs	r3, r0, #3
1000f1a4:	428b      	cmp	r3, r1
1000f1a6:	d301      	bcc.n	1000f1ac <__aeabi_idiv+0x184>
1000f1a8:	00cb      	lsls	r3, r1, #3
1000f1aa:	1ac0      	subs	r0, r0, r3
1000f1ac:	4152      	adcs	r2, r2
1000f1ae:	0883      	lsrs	r3, r0, #2
1000f1b0:	428b      	cmp	r3, r1
1000f1b2:	d301      	bcc.n	1000f1b8 <__aeabi_idiv+0x190>
1000f1b4:	008b      	lsls	r3, r1, #2
1000f1b6:	1ac0      	subs	r0, r0, r3
1000f1b8:	4152      	adcs	r2, r2
1000f1ba:	d2d9      	bcs.n	1000f170 <__aeabi_idiv+0x148>
1000f1bc:	0843      	lsrs	r3, r0, #1
1000f1be:	428b      	cmp	r3, r1
1000f1c0:	d301      	bcc.n	1000f1c6 <__aeabi_idiv+0x19e>
1000f1c2:	004b      	lsls	r3, r1, #1
1000f1c4:	1ac0      	subs	r0, r0, r3
1000f1c6:	4152      	adcs	r2, r2
1000f1c8:	1a41      	subs	r1, r0, r1
1000f1ca:	d200      	bcs.n	1000f1ce <__aeabi_idiv+0x1a6>
1000f1cc:	4601      	mov	r1, r0
1000f1ce:	4663      	mov	r3, ip
1000f1d0:	4152      	adcs	r2, r2
1000f1d2:	105b      	asrs	r3, r3, #1
1000f1d4:	4610      	mov	r0, r2
1000f1d6:	d301      	bcc.n	1000f1dc <__aeabi_idiv+0x1b4>
1000f1d8:	4240      	negs	r0, r0
1000f1da:	2b00      	cmp	r3, #0
1000f1dc:	d500      	bpl.n	1000f1e0 <__aeabi_idiv+0x1b8>
1000f1de:	4249      	negs	r1, r1
1000f1e0:	4770      	bx	lr
1000f1e2:	4663      	mov	r3, ip
1000f1e4:	105b      	asrs	r3, r3, #1
1000f1e6:	d300      	bcc.n	1000f1ea <__aeabi_idiv+0x1c2>
1000f1e8:	4240      	negs	r0, r0
1000f1ea:	b501      	push	{r0, lr}
1000f1ec:	2000      	movs	r0, #0
1000f1ee:	f000 f805 	bl	1000f1fc <__aeabi_idiv0>
1000f1f2:	bd02      	pop	{r1, pc}

1000f1f4 <__aeabi_idivmod>:
1000f1f4:	2900      	cmp	r1, #0
1000f1f6:	d0f8      	beq.n	1000f1ea <__aeabi_idiv+0x1c2>
1000f1f8:	e716      	b.n	1000f028 <__aeabi_idiv>
1000f1fa:	4770      	bx	lr

1000f1fc <__aeabi_idiv0>:
1000f1fc:	4770      	bx	lr
1000f1fe:	46c0      	nop			; (mov r8, r8)

1000f200 <__aeabi_cdrcmple>:
1000f200:	4684      	mov	ip, r0
1000f202:	1c10      	adds	r0, r2, #0
1000f204:	4662      	mov	r2, ip
1000f206:	468c      	mov	ip, r1
1000f208:	1c19      	adds	r1, r3, #0
1000f20a:	4663      	mov	r3, ip
1000f20c:	e000      	b.n	1000f210 <__aeabi_cdcmpeq>
1000f20e:	46c0      	nop			; (mov r8, r8)

1000f210 <__aeabi_cdcmpeq>:
1000f210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000f212:	f000 f8f5 	bl	1000f400 <__ledf2>
1000f216:	2800      	cmp	r0, #0
1000f218:	d401      	bmi.n	1000f21e <__aeabi_cdcmpeq+0xe>
1000f21a:	2100      	movs	r1, #0
1000f21c:	42c8      	cmn	r0, r1
1000f21e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1000f220 <__aeabi_dcmpeq>:
1000f220:	b510      	push	{r4, lr}
1000f222:	f000 f849 	bl	1000f2b8 <__eqdf2>
1000f226:	4240      	negs	r0, r0
1000f228:	3001      	adds	r0, #1
1000f22a:	bd10      	pop	{r4, pc}

1000f22c <__aeabi_dcmplt>:
1000f22c:	b510      	push	{r4, lr}
1000f22e:	f000 f8e7 	bl	1000f400 <__ledf2>
1000f232:	2800      	cmp	r0, #0
1000f234:	db01      	blt.n	1000f23a <__aeabi_dcmplt+0xe>
1000f236:	2000      	movs	r0, #0
1000f238:	bd10      	pop	{r4, pc}
1000f23a:	2001      	movs	r0, #1
1000f23c:	bd10      	pop	{r4, pc}
1000f23e:	46c0      	nop			; (mov r8, r8)

1000f240 <__aeabi_dcmple>:
1000f240:	b510      	push	{r4, lr}
1000f242:	f000 f8dd 	bl	1000f400 <__ledf2>
1000f246:	2800      	cmp	r0, #0
1000f248:	dd01      	ble.n	1000f24e <__aeabi_dcmple+0xe>
1000f24a:	2000      	movs	r0, #0
1000f24c:	bd10      	pop	{r4, pc}
1000f24e:	2001      	movs	r0, #1
1000f250:	bd10      	pop	{r4, pc}
1000f252:	46c0      	nop			; (mov r8, r8)

1000f254 <__aeabi_dcmpgt>:
1000f254:	b510      	push	{r4, lr}
1000f256:	f000 f86f 	bl	1000f338 <__gedf2>
1000f25a:	2800      	cmp	r0, #0
1000f25c:	dc01      	bgt.n	1000f262 <__aeabi_dcmpgt+0xe>
1000f25e:	2000      	movs	r0, #0
1000f260:	bd10      	pop	{r4, pc}
1000f262:	2001      	movs	r0, #1
1000f264:	bd10      	pop	{r4, pc}
1000f266:	46c0      	nop			; (mov r8, r8)

1000f268 <__aeabi_dcmpge>:
1000f268:	b510      	push	{r4, lr}
1000f26a:	f000 f865 	bl	1000f338 <__gedf2>
1000f26e:	2800      	cmp	r0, #0
1000f270:	da01      	bge.n	1000f276 <__aeabi_dcmpge+0xe>
1000f272:	2000      	movs	r0, #0
1000f274:	bd10      	pop	{r4, pc}
1000f276:	2001      	movs	r0, #1
1000f278:	bd10      	pop	{r4, pc}
1000f27a:	46c0      	nop			; (mov r8, r8)

1000f27c <__aeabi_d2uiz>:
1000f27c:	b570      	push	{r4, r5, r6, lr}
1000f27e:	2200      	movs	r2, #0
1000f280:	4b0c      	ldr	r3, [pc, #48]	; (1000f2b4 <__aeabi_d2uiz+0x38>)
1000f282:	0004      	movs	r4, r0
1000f284:	000d      	movs	r5, r1
1000f286:	f7ff ffef 	bl	1000f268 <__aeabi_dcmpge>
1000f28a:	2800      	cmp	r0, #0
1000f28c:	d104      	bne.n	1000f298 <__aeabi_d2uiz+0x1c>
1000f28e:	0020      	movs	r0, r4
1000f290:	0029      	movs	r1, r5
1000f292:	f000 feed 	bl	10010070 <__aeabi_d2iz>
1000f296:	bd70      	pop	{r4, r5, r6, pc}
1000f298:	4b06      	ldr	r3, [pc, #24]	; (1000f2b4 <__aeabi_d2uiz+0x38>)
1000f29a:	2200      	movs	r2, #0
1000f29c:	0020      	movs	r0, r4
1000f29e:	0029      	movs	r1, r5
1000f2a0:	f000 fb92 	bl	1000f9c8 <__aeabi_dsub>
1000f2a4:	f000 fee4 	bl	10010070 <__aeabi_d2iz>
1000f2a8:	2380      	movs	r3, #128	; 0x80
1000f2aa:	061b      	lsls	r3, r3, #24
1000f2ac:	469c      	mov	ip, r3
1000f2ae:	4460      	add	r0, ip
1000f2b0:	e7f1      	b.n	1000f296 <__aeabi_d2uiz+0x1a>
1000f2b2:	46c0      	nop			; (mov r8, r8)
1000f2b4:	41e00000 	.word	0x41e00000

1000f2b8 <__eqdf2>:
1000f2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f2ba:	465f      	mov	r7, fp
1000f2bc:	4656      	mov	r6, sl
1000f2be:	464d      	mov	r5, r9
1000f2c0:	4644      	mov	r4, r8
1000f2c2:	b4f0      	push	{r4, r5, r6, r7}
1000f2c4:	031f      	lsls	r7, r3, #12
1000f2c6:	005c      	lsls	r4, r3, #1
1000f2c8:	0fdb      	lsrs	r3, r3, #31
1000f2ca:	469a      	mov	sl, r3
1000f2cc:	4b19      	ldr	r3, [pc, #100]	; (1000f334 <__eqdf2+0x7c>)
1000f2ce:	030e      	lsls	r6, r1, #12
1000f2d0:	004d      	lsls	r5, r1, #1
1000f2d2:	0fc9      	lsrs	r1, r1, #31
1000f2d4:	4680      	mov	r8, r0
1000f2d6:	0b36      	lsrs	r6, r6, #12
1000f2d8:	0d6d      	lsrs	r5, r5, #21
1000f2da:	468b      	mov	fp, r1
1000f2dc:	4691      	mov	r9, r2
1000f2de:	0b3f      	lsrs	r7, r7, #12
1000f2e0:	0d64      	lsrs	r4, r4, #21
1000f2e2:	429d      	cmp	r5, r3
1000f2e4:	d019      	beq.n	1000f31a <__eqdf2+0x62>
1000f2e6:	4b13      	ldr	r3, [pc, #76]	; (1000f334 <__eqdf2+0x7c>)
1000f2e8:	429c      	cmp	r4, r3
1000f2ea:	d01b      	beq.n	1000f324 <__eqdf2+0x6c>
1000f2ec:	2301      	movs	r3, #1
1000f2ee:	42a5      	cmp	r5, r4
1000f2f0:	d006      	beq.n	1000f300 <__eqdf2+0x48>
1000f2f2:	0018      	movs	r0, r3
1000f2f4:	bc3c      	pop	{r2, r3, r4, r5}
1000f2f6:	4690      	mov	r8, r2
1000f2f8:	4699      	mov	r9, r3
1000f2fa:	46a2      	mov	sl, r4
1000f2fc:	46ab      	mov	fp, r5
1000f2fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f300:	42be      	cmp	r6, r7
1000f302:	d1f6      	bne.n	1000f2f2 <__eqdf2+0x3a>
1000f304:	45c8      	cmp	r8, r9
1000f306:	d1f4      	bne.n	1000f2f2 <__eqdf2+0x3a>
1000f308:	45d3      	cmp	fp, sl
1000f30a:	d010      	beq.n	1000f32e <__eqdf2+0x76>
1000f30c:	2d00      	cmp	r5, #0
1000f30e:	d1f0      	bne.n	1000f2f2 <__eqdf2+0x3a>
1000f310:	4330      	orrs	r0, r6
1000f312:	0003      	movs	r3, r0
1000f314:	1e5a      	subs	r2, r3, #1
1000f316:	4193      	sbcs	r3, r2
1000f318:	e7eb      	b.n	1000f2f2 <__eqdf2+0x3a>
1000f31a:	0031      	movs	r1, r6
1000f31c:	2301      	movs	r3, #1
1000f31e:	4301      	orrs	r1, r0
1000f320:	d1e7      	bne.n	1000f2f2 <__eqdf2+0x3a>
1000f322:	e7e0      	b.n	1000f2e6 <__eqdf2+0x2e>
1000f324:	433a      	orrs	r2, r7
1000f326:	2301      	movs	r3, #1
1000f328:	2a00      	cmp	r2, #0
1000f32a:	d1e2      	bne.n	1000f2f2 <__eqdf2+0x3a>
1000f32c:	e7de      	b.n	1000f2ec <__eqdf2+0x34>
1000f32e:	2300      	movs	r3, #0
1000f330:	e7df      	b.n	1000f2f2 <__eqdf2+0x3a>
1000f332:	46c0      	nop			; (mov r8, r8)
1000f334:	000007ff 	.word	0x000007ff

1000f338 <__gedf2>:
1000f338:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f33a:	465f      	mov	r7, fp
1000f33c:	4644      	mov	r4, r8
1000f33e:	4656      	mov	r6, sl
1000f340:	464d      	mov	r5, r9
1000f342:	b4f0      	push	{r4, r5, r6, r7}
1000f344:	031f      	lsls	r7, r3, #12
1000f346:	0b3c      	lsrs	r4, r7, #12
1000f348:	4f2c      	ldr	r7, [pc, #176]	; (1000f3fc <__gedf2+0xc4>)
1000f34a:	030e      	lsls	r6, r1, #12
1000f34c:	004d      	lsls	r5, r1, #1
1000f34e:	46a3      	mov	fp, r4
1000f350:	005c      	lsls	r4, r3, #1
1000f352:	4684      	mov	ip, r0
1000f354:	0b36      	lsrs	r6, r6, #12
1000f356:	0d6d      	lsrs	r5, r5, #21
1000f358:	0fc9      	lsrs	r1, r1, #31
1000f35a:	4690      	mov	r8, r2
1000f35c:	0d64      	lsrs	r4, r4, #21
1000f35e:	0fdb      	lsrs	r3, r3, #31
1000f360:	42bd      	cmp	r5, r7
1000f362:	d02b      	beq.n	1000f3bc <__gedf2+0x84>
1000f364:	4f25      	ldr	r7, [pc, #148]	; (1000f3fc <__gedf2+0xc4>)
1000f366:	42bc      	cmp	r4, r7
1000f368:	d02e      	beq.n	1000f3c8 <__gedf2+0x90>
1000f36a:	2d00      	cmp	r5, #0
1000f36c:	d10e      	bne.n	1000f38c <__gedf2+0x54>
1000f36e:	4330      	orrs	r0, r6
1000f370:	0007      	movs	r7, r0
1000f372:	4681      	mov	r9, r0
1000f374:	4278      	negs	r0, r7
1000f376:	4178      	adcs	r0, r7
1000f378:	2c00      	cmp	r4, #0
1000f37a:	d117      	bne.n	1000f3ac <__gedf2+0x74>
1000f37c:	465f      	mov	r7, fp
1000f37e:	433a      	orrs	r2, r7
1000f380:	d114      	bne.n	1000f3ac <__gedf2+0x74>
1000f382:	464b      	mov	r3, r9
1000f384:	2000      	movs	r0, #0
1000f386:	2b00      	cmp	r3, #0
1000f388:	d00a      	beq.n	1000f3a0 <__gedf2+0x68>
1000f38a:	e006      	b.n	1000f39a <__gedf2+0x62>
1000f38c:	2c00      	cmp	r4, #0
1000f38e:	d102      	bne.n	1000f396 <__gedf2+0x5e>
1000f390:	4658      	mov	r0, fp
1000f392:	4302      	orrs	r2, r0
1000f394:	d001      	beq.n	1000f39a <__gedf2+0x62>
1000f396:	4299      	cmp	r1, r3
1000f398:	d01a      	beq.n	1000f3d0 <__gedf2+0x98>
1000f39a:	2301      	movs	r3, #1
1000f39c:	4248      	negs	r0, r1
1000f39e:	4318      	orrs	r0, r3
1000f3a0:	bc3c      	pop	{r2, r3, r4, r5}
1000f3a2:	4690      	mov	r8, r2
1000f3a4:	4699      	mov	r9, r3
1000f3a6:	46a2      	mov	sl, r4
1000f3a8:	46ab      	mov	fp, r5
1000f3aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f3ac:	2800      	cmp	r0, #0
1000f3ae:	d0f2      	beq.n	1000f396 <__gedf2+0x5e>
1000f3b0:	4258      	negs	r0, r3
1000f3b2:	4158      	adcs	r0, r3
1000f3b4:	2201      	movs	r2, #1
1000f3b6:	4240      	negs	r0, r0
1000f3b8:	4310      	orrs	r0, r2
1000f3ba:	e7f1      	b.n	1000f3a0 <__gedf2+0x68>
1000f3bc:	0037      	movs	r7, r6
1000f3be:	4307      	orrs	r7, r0
1000f3c0:	d0d0      	beq.n	1000f364 <__gedf2+0x2c>
1000f3c2:	2002      	movs	r0, #2
1000f3c4:	4240      	negs	r0, r0
1000f3c6:	e7eb      	b.n	1000f3a0 <__gedf2+0x68>
1000f3c8:	465f      	mov	r7, fp
1000f3ca:	4317      	orrs	r7, r2
1000f3cc:	d0cd      	beq.n	1000f36a <__gedf2+0x32>
1000f3ce:	e7f8      	b.n	1000f3c2 <__gedf2+0x8a>
1000f3d0:	42a5      	cmp	r5, r4
1000f3d2:	dce2      	bgt.n	1000f39a <__gedf2+0x62>
1000f3d4:	db05      	blt.n	1000f3e2 <__gedf2+0xaa>
1000f3d6:	455e      	cmp	r6, fp
1000f3d8:	d8df      	bhi.n	1000f39a <__gedf2+0x62>
1000f3da:	d008      	beq.n	1000f3ee <__gedf2+0xb6>
1000f3dc:	2000      	movs	r0, #0
1000f3de:	455e      	cmp	r6, fp
1000f3e0:	d2de      	bcs.n	1000f3a0 <__gedf2+0x68>
1000f3e2:	4248      	negs	r0, r1
1000f3e4:	4148      	adcs	r0, r1
1000f3e6:	2301      	movs	r3, #1
1000f3e8:	4240      	negs	r0, r0
1000f3ea:	4318      	orrs	r0, r3
1000f3ec:	e7d8      	b.n	1000f3a0 <__gedf2+0x68>
1000f3ee:	45c4      	cmp	ip, r8
1000f3f0:	d8d3      	bhi.n	1000f39a <__gedf2+0x62>
1000f3f2:	2000      	movs	r0, #0
1000f3f4:	45c4      	cmp	ip, r8
1000f3f6:	d3f4      	bcc.n	1000f3e2 <__gedf2+0xaa>
1000f3f8:	e7d2      	b.n	1000f3a0 <__gedf2+0x68>
1000f3fa:	46c0      	nop			; (mov r8, r8)
1000f3fc:	000007ff 	.word	0x000007ff

1000f400 <__ledf2>:
1000f400:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f402:	465f      	mov	r7, fp
1000f404:	464d      	mov	r5, r9
1000f406:	4644      	mov	r4, r8
1000f408:	4656      	mov	r6, sl
1000f40a:	b4f0      	push	{r4, r5, r6, r7}
1000f40c:	031c      	lsls	r4, r3, #12
1000f40e:	0b24      	lsrs	r4, r4, #12
1000f410:	46a4      	mov	ip, r4
1000f412:	4c2f      	ldr	r4, [pc, #188]	; (1000f4d0 <__ledf2+0xd0>)
1000f414:	030f      	lsls	r7, r1, #12
1000f416:	004d      	lsls	r5, r1, #1
1000f418:	005e      	lsls	r6, r3, #1
1000f41a:	0fc9      	lsrs	r1, r1, #31
1000f41c:	4680      	mov	r8, r0
1000f41e:	0b3f      	lsrs	r7, r7, #12
1000f420:	0d6d      	lsrs	r5, r5, #21
1000f422:	468b      	mov	fp, r1
1000f424:	4691      	mov	r9, r2
1000f426:	0d76      	lsrs	r6, r6, #21
1000f428:	0fdb      	lsrs	r3, r3, #31
1000f42a:	42a5      	cmp	r5, r4
1000f42c:	d020      	beq.n	1000f470 <__ledf2+0x70>
1000f42e:	4c28      	ldr	r4, [pc, #160]	; (1000f4d0 <__ledf2+0xd0>)
1000f430:	42a6      	cmp	r6, r4
1000f432:	d022      	beq.n	1000f47a <__ledf2+0x7a>
1000f434:	2d00      	cmp	r5, #0
1000f436:	d112      	bne.n	1000f45e <__ledf2+0x5e>
1000f438:	4338      	orrs	r0, r7
1000f43a:	4244      	negs	r4, r0
1000f43c:	4144      	adcs	r4, r0
1000f43e:	2e00      	cmp	r6, #0
1000f440:	d020      	beq.n	1000f484 <__ledf2+0x84>
1000f442:	2c00      	cmp	r4, #0
1000f444:	d00d      	beq.n	1000f462 <__ledf2+0x62>
1000f446:	425c      	negs	r4, r3
1000f448:	4163      	adcs	r3, r4
1000f44a:	2401      	movs	r4, #1
1000f44c:	425b      	negs	r3, r3
1000f44e:	431c      	orrs	r4, r3
1000f450:	0020      	movs	r0, r4
1000f452:	bc3c      	pop	{r2, r3, r4, r5}
1000f454:	4690      	mov	r8, r2
1000f456:	4699      	mov	r9, r3
1000f458:	46a2      	mov	sl, r4
1000f45a:	46ab      	mov	fp, r5
1000f45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f45e:	2e00      	cmp	r6, #0
1000f460:	d017      	beq.n	1000f492 <__ledf2+0x92>
1000f462:	455b      	cmp	r3, fp
1000f464:	d019      	beq.n	1000f49a <__ledf2+0x9a>
1000f466:	465b      	mov	r3, fp
1000f468:	425c      	negs	r4, r3
1000f46a:	2301      	movs	r3, #1
1000f46c:	431c      	orrs	r4, r3
1000f46e:	e7ef      	b.n	1000f450 <__ledf2+0x50>
1000f470:	0039      	movs	r1, r7
1000f472:	2402      	movs	r4, #2
1000f474:	4301      	orrs	r1, r0
1000f476:	d1eb      	bne.n	1000f450 <__ledf2+0x50>
1000f478:	e7d9      	b.n	1000f42e <__ledf2+0x2e>
1000f47a:	4661      	mov	r1, ip
1000f47c:	2402      	movs	r4, #2
1000f47e:	4311      	orrs	r1, r2
1000f480:	d1e6      	bne.n	1000f450 <__ledf2+0x50>
1000f482:	e7d7      	b.n	1000f434 <__ledf2+0x34>
1000f484:	4661      	mov	r1, ip
1000f486:	430a      	orrs	r2, r1
1000f488:	d1db      	bne.n	1000f442 <__ledf2+0x42>
1000f48a:	2400      	movs	r4, #0
1000f48c:	2800      	cmp	r0, #0
1000f48e:	d0df      	beq.n	1000f450 <__ledf2+0x50>
1000f490:	e7e9      	b.n	1000f466 <__ledf2+0x66>
1000f492:	4661      	mov	r1, ip
1000f494:	430a      	orrs	r2, r1
1000f496:	d1e4      	bne.n	1000f462 <__ledf2+0x62>
1000f498:	e7e5      	b.n	1000f466 <__ledf2+0x66>
1000f49a:	42b5      	cmp	r5, r6
1000f49c:	dd03      	ble.n	1000f4a6 <__ledf2+0xa6>
1000f49e:	2201      	movs	r2, #1
1000f4a0:	425c      	negs	r4, r3
1000f4a2:	4314      	orrs	r4, r2
1000f4a4:	e7d4      	b.n	1000f450 <__ledf2+0x50>
1000f4a6:	42b5      	cmp	r5, r6
1000f4a8:	dbcd      	blt.n	1000f446 <__ledf2+0x46>
1000f4aa:	4567      	cmp	r7, ip
1000f4ac:	d8db      	bhi.n	1000f466 <__ledf2+0x66>
1000f4ae:	d009      	beq.n	1000f4c4 <__ledf2+0xc4>
1000f4b0:	2400      	movs	r4, #0
1000f4b2:	4567      	cmp	r7, ip
1000f4b4:	d2cc      	bcs.n	1000f450 <__ledf2+0x50>
1000f4b6:	4659      	mov	r1, fp
1000f4b8:	424c      	negs	r4, r1
1000f4ba:	4161      	adcs	r1, r4
1000f4bc:	2401      	movs	r4, #1
1000f4be:	4249      	negs	r1, r1
1000f4c0:	430c      	orrs	r4, r1
1000f4c2:	e7c5      	b.n	1000f450 <__ledf2+0x50>
1000f4c4:	45c8      	cmp	r8, r9
1000f4c6:	d8ce      	bhi.n	1000f466 <__ledf2+0x66>
1000f4c8:	2400      	movs	r4, #0
1000f4ca:	45c8      	cmp	r8, r9
1000f4cc:	d3f3      	bcc.n	1000f4b6 <__ledf2+0xb6>
1000f4ce:	e7bf      	b.n	1000f450 <__ledf2+0x50>
1000f4d0:	000007ff 	.word	0x000007ff

1000f4d4 <__aeabi_dmul>:
1000f4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f4d6:	465f      	mov	r7, fp
1000f4d8:	4656      	mov	r6, sl
1000f4da:	464d      	mov	r5, r9
1000f4dc:	4644      	mov	r4, r8
1000f4de:	b4f0      	push	{r4, r5, r6, r7}
1000f4e0:	030d      	lsls	r5, r1, #12
1000f4e2:	4699      	mov	r9, r3
1000f4e4:	004e      	lsls	r6, r1, #1
1000f4e6:	0b2b      	lsrs	r3, r5, #12
1000f4e8:	b087      	sub	sp, #28
1000f4ea:	0007      	movs	r7, r0
1000f4ec:	4692      	mov	sl, r2
1000f4ee:	4680      	mov	r8, r0
1000f4f0:	469b      	mov	fp, r3
1000f4f2:	0d76      	lsrs	r6, r6, #21
1000f4f4:	0fcc      	lsrs	r4, r1, #31
1000f4f6:	2e00      	cmp	r6, #0
1000f4f8:	d069      	beq.n	1000f5ce <__aeabi_dmul+0xfa>
1000f4fa:	4b6d      	ldr	r3, [pc, #436]	; (1000f6b0 <__aeabi_dmul+0x1dc>)
1000f4fc:	429e      	cmp	r6, r3
1000f4fe:	d035      	beq.n	1000f56c <__aeabi_dmul+0x98>
1000f500:	465b      	mov	r3, fp
1000f502:	2280      	movs	r2, #128	; 0x80
1000f504:	00dd      	lsls	r5, r3, #3
1000f506:	0412      	lsls	r2, r2, #16
1000f508:	0f43      	lsrs	r3, r0, #29
1000f50a:	4313      	orrs	r3, r2
1000f50c:	432b      	orrs	r3, r5
1000f50e:	469b      	mov	fp, r3
1000f510:	00c3      	lsls	r3, r0, #3
1000f512:	4698      	mov	r8, r3
1000f514:	4b67      	ldr	r3, [pc, #412]	; (1000f6b4 <__aeabi_dmul+0x1e0>)
1000f516:	2700      	movs	r7, #0
1000f518:	469c      	mov	ip, r3
1000f51a:	2300      	movs	r3, #0
1000f51c:	4466      	add	r6, ip
1000f51e:	9301      	str	r3, [sp, #4]
1000f520:	464a      	mov	r2, r9
1000f522:	0315      	lsls	r5, r2, #12
1000f524:	0050      	lsls	r0, r2, #1
1000f526:	0fd2      	lsrs	r2, r2, #31
1000f528:	4653      	mov	r3, sl
1000f52a:	0b2d      	lsrs	r5, r5, #12
1000f52c:	0d40      	lsrs	r0, r0, #21
1000f52e:	4691      	mov	r9, r2
1000f530:	d100      	bne.n	1000f534 <__aeabi_dmul+0x60>
1000f532:	e076      	b.n	1000f622 <__aeabi_dmul+0x14e>
1000f534:	4a5e      	ldr	r2, [pc, #376]	; (1000f6b0 <__aeabi_dmul+0x1dc>)
1000f536:	4290      	cmp	r0, r2
1000f538:	d06c      	beq.n	1000f614 <__aeabi_dmul+0x140>
1000f53a:	2280      	movs	r2, #128	; 0x80
1000f53c:	0f5b      	lsrs	r3, r3, #29
1000f53e:	0412      	lsls	r2, r2, #16
1000f540:	4313      	orrs	r3, r2
1000f542:	4a5c      	ldr	r2, [pc, #368]	; (1000f6b4 <__aeabi_dmul+0x1e0>)
1000f544:	00ed      	lsls	r5, r5, #3
1000f546:	4694      	mov	ip, r2
1000f548:	431d      	orrs	r5, r3
1000f54a:	4653      	mov	r3, sl
1000f54c:	2200      	movs	r2, #0
1000f54e:	00db      	lsls	r3, r3, #3
1000f550:	4460      	add	r0, ip
1000f552:	4649      	mov	r1, r9
1000f554:	1836      	adds	r6, r6, r0
1000f556:	1c70      	adds	r0, r6, #1
1000f558:	4061      	eors	r1, r4
1000f55a:	9002      	str	r0, [sp, #8]
1000f55c:	4317      	orrs	r7, r2
1000f55e:	2f0f      	cmp	r7, #15
1000f560:	d900      	bls.n	1000f564 <__aeabi_dmul+0x90>
1000f562:	e0af      	b.n	1000f6c4 <__aeabi_dmul+0x1f0>
1000f564:	4854      	ldr	r0, [pc, #336]	; (1000f6b8 <__aeabi_dmul+0x1e4>)
1000f566:	00bf      	lsls	r7, r7, #2
1000f568:	59c7      	ldr	r7, [r0, r7]
1000f56a:	46bf      	mov	pc, r7
1000f56c:	465b      	mov	r3, fp
1000f56e:	431f      	orrs	r7, r3
1000f570:	d000      	beq.n	1000f574 <__aeabi_dmul+0xa0>
1000f572:	e088      	b.n	1000f686 <__aeabi_dmul+0x1b2>
1000f574:	2300      	movs	r3, #0
1000f576:	469b      	mov	fp, r3
1000f578:	4698      	mov	r8, r3
1000f57a:	3302      	adds	r3, #2
1000f57c:	2708      	movs	r7, #8
1000f57e:	9301      	str	r3, [sp, #4]
1000f580:	e7ce      	b.n	1000f520 <__aeabi_dmul+0x4c>
1000f582:	4649      	mov	r1, r9
1000f584:	2a02      	cmp	r2, #2
1000f586:	d06a      	beq.n	1000f65e <__aeabi_dmul+0x18a>
1000f588:	2a03      	cmp	r2, #3
1000f58a:	d100      	bne.n	1000f58e <__aeabi_dmul+0xba>
1000f58c:	e209      	b.n	1000f9a2 <__aeabi_dmul+0x4ce>
1000f58e:	2a01      	cmp	r2, #1
1000f590:	d000      	beq.n	1000f594 <__aeabi_dmul+0xc0>
1000f592:	e1bb      	b.n	1000f90c <__aeabi_dmul+0x438>
1000f594:	4011      	ands	r1, r2
1000f596:	2200      	movs	r2, #0
1000f598:	2300      	movs	r3, #0
1000f59a:	2500      	movs	r5, #0
1000f59c:	4690      	mov	r8, r2
1000f59e:	b2cc      	uxtb	r4, r1
1000f5a0:	2100      	movs	r1, #0
1000f5a2:	032d      	lsls	r5, r5, #12
1000f5a4:	0d0a      	lsrs	r2, r1, #20
1000f5a6:	0512      	lsls	r2, r2, #20
1000f5a8:	0b2d      	lsrs	r5, r5, #12
1000f5aa:	4315      	orrs	r5, r2
1000f5ac:	4a43      	ldr	r2, [pc, #268]	; (1000f6bc <__aeabi_dmul+0x1e8>)
1000f5ae:	051b      	lsls	r3, r3, #20
1000f5b0:	4015      	ands	r5, r2
1000f5b2:	431d      	orrs	r5, r3
1000f5b4:	006d      	lsls	r5, r5, #1
1000f5b6:	07e4      	lsls	r4, r4, #31
1000f5b8:	086d      	lsrs	r5, r5, #1
1000f5ba:	4325      	orrs	r5, r4
1000f5bc:	4640      	mov	r0, r8
1000f5be:	0029      	movs	r1, r5
1000f5c0:	b007      	add	sp, #28
1000f5c2:	bc3c      	pop	{r2, r3, r4, r5}
1000f5c4:	4690      	mov	r8, r2
1000f5c6:	4699      	mov	r9, r3
1000f5c8:	46a2      	mov	sl, r4
1000f5ca:	46ab      	mov	fp, r5
1000f5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f5ce:	4303      	orrs	r3, r0
1000f5d0:	d052      	beq.n	1000f678 <__aeabi_dmul+0x1a4>
1000f5d2:	465b      	mov	r3, fp
1000f5d4:	2b00      	cmp	r3, #0
1000f5d6:	d100      	bne.n	1000f5da <__aeabi_dmul+0x106>
1000f5d8:	e18a      	b.n	1000f8f0 <__aeabi_dmul+0x41c>
1000f5da:	4658      	mov	r0, fp
1000f5dc:	f000 fdb6 	bl	1001014c <__clzsi2>
1000f5e0:	0003      	movs	r3, r0
1000f5e2:	3b0b      	subs	r3, #11
1000f5e4:	2b1c      	cmp	r3, #28
1000f5e6:	dd00      	ble.n	1000f5ea <__aeabi_dmul+0x116>
1000f5e8:	e17b      	b.n	1000f8e2 <__aeabi_dmul+0x40e>
1000f5ea:	221d      	movs	r2, #29
1000f5ec:	1ad3      	subs	r3, r2, r3
1000f5ee:	003a      	movs	r2, r7
1000f5f0:	0001      	movs	r1, r0
1000f5f2:	465d      	mov	r5, fp
1000f5f4:	40da      	lsrs	r2, r3
1000f5f6:	3908      	subs	r1, #8
1000f5f8:	408d      	lsls	r5, r1
1000f5fa:	0013      	movs	r3, r2
1000f5fc:	408f      	lsls	r7, r1
1000f5fe:	432b      	orrs	r3, r5
1000f600:	469b      	mov	fp, r3
1000f602:	46b8      	mov	r8, r7
1000f604:	4b2e      	ldr	r3, [pc, #184]	; (1000f6c0 <__aeabi_dmul+0x1ec>)
1000f606:	2700      	movs	r7, #0
1000f608:	469c      	mov	ip, r3
1000f60a:	2300      	movs	r3, #0
1000f60c:	4460      	add	r0, ip
1000f60e:	4246      	negs	r6, r0
1000f610:	9301      	str	r3, [sp, #4]
1000f612:	e785      	b.n	1000f520 <__aeabi_dmul+0x4c>
1000f614:	4652      	mov	r2, sl
1000f616:	432a      	orrs	r2, r5
1000f618:	d12c      	bne.n	1000f674 <__aeabi_dmul+0x1a0>
1000f61a:	2500      	movs	r5, #0
1000f61c:	2300      	movs	r3, #0
1000f61e:	2202      	movs	r2, #2
1000f620:	e797      	b.n	1000f552 <__aeabi_dmul+0x7e>
1000f622:	4652      	mov	r2, sl
1000f624:	432a      	orrs	r2, r5
1000f626:	d021      	beq.n	1000f66c <__aeabi_dmul+0x198>
1000f628:	2d00      	cmp	r5, #0
1000f62a:	d100      	bne.n	1000f62e <__aeabi_dmul+0x15a>
1000f62c:	e154      	b.n	1000f8d8 <__aeabi_dmul+0x404>
1000f62e:	0028      	movs	r0, r5
1000f630:	f000 fd8c 	bl	1001014c <__clzsi2>
1000f634:	0003      	movs	r3, r0
1000f636:	3b0b      	subs	r3, #11
1000f638:	2b1c      	cmp	r3, #28
1000f63a:	dd00      	ble.n	1000f63e <__aeabi_dmul+0x16a>
1000f63c:	e146      	b.n	1000f8cc <__aeabi_dmul+0x3f8>
1000f63e:	211d      	movs	r1, #29
1000f640:	1acb      	subs	r3, r1, r3
1000f642:	4651      	mov	r1, sl
1000f644:	0002      	movs	r2, r0
1000f646:	40d9      	lsrs	r1, r3
1000f648:	4653      	mov	r3, sl
1000f64a:	3a08      	subs	r2, #8
1000f64c:	4095      	lsls	r5, r2
1000f64e:	4093      	lsls	r3, r2
1000f650:	430d      	orrs	r5, r1
1000f652:	4a1b      	ldr	r2, [pc, #108]	; (1000f6c0 <__aeabi_dmul+0x1ec>)
1000f654:	4694      	mov	ip, r2
1000f656:	4460      	add	r0, ip
1000f658:	4240      	negs	r0, r0
1000f65a:	2200      	movs	r2, #0
1000f65c:	e779      	b.n	1000f552 <__aeabi_dmul+0x7e>
1000f65e:	2401      	movs	r4, #1
1000f660:	2200      	movs	r2, #0
1000f662:	400c      	ands	r4, r1
1000f664:	4b12      	ldr	r3, [pc, #72]	; (1000f6b0 <__aeabi_dmul+0x1dc>)
1000f666:	2500      	movs	r5, #0
1000f668:	4690      	mov	r8, r2
1000f66a:	e799      	b.n	1000f5a0 <__aeabi_dmul+0xcc>
1000f66c:	2500      	movs	r5, #0
1000f66e:	2300      	movs	r3, #0
1000f670:	2201      	movs	r2, #1
1000f672:	e76e      	b.n	1000f552 <__aeabi_dmul+0x7e>
1000f674:	2203      	movs	r2, #3
1000f676:	e76c      	b.n	1000f552 <__aeabi_dmul+0x7e>
1000f678:	2300      	movs	r3, #0
1000f67a:	469b      	mov	fp, r3
1000f67c:	4698      	mov	r8, r3
1000f67e:	3301      	adds	r3, #1
1000f680:	2704      	movs	r7, #4
1000f682:	9301      	str	r3, [sp, #4]
1000f684:	e74c      	b.n	1000f520 <__aeabi_dmul+0x4c>
1000f686:	2303      	movs	r3, #3
1000f688:	270c      	movs	r7, #12
1000f68a:	9301      	str	r3, [sp, #4]
1000f68c:	e748      	b.n	1000f520 <__aeabi_dmul+0x4c>
1000f68e:	2300      	movs	r3, #0
1000f690:	2580      	movs	r5, #128	; 0x80
1000f692:	4698      	mov	r8, r3
1000f694:	2400      	movs	r4, #0
1000f696:	032d      	lsls	r5, r5, #12
1000f698:	4b05      	ldr	r3, [pc, #20]	; (1000f6b0 <__aeabi_dmul+0x1dc>)
1000f69a:	e781      	b.n	1000f5a0 <__aeabi_dmul+0xcc>
1000f69c:	465d      	mov	r5, fp
1000f69e:	4643      	mov	r3, r8
1000f6a0:	9a01      	ldr	r2, [sp, #4]
1000f6a2:	e76f      	b.n	1000f584 <__aeabi_dmul+0xb0>
1000f6a4:	465d      	mov	r5, fp
1000f6a6:	4643      	mov	r3, r8
1000f6a8:	0021      	movs	r1, r4
1000f6aa:	9a01      	ldr	r2, [sp, #4]
1000f6ac:	e76a      	b.n	1000f584 <__aeabi_dmul+0xb0>
1000f6ae:	46c0      	nop			; (mov r8, r8)
1000f6b0:	000007ff 	.word	0x000007ff
1000f6b4:	fffffc01 	.word	0xfffffc01
1000f6b8:	10012300 	.word	0x10012300
1000f6bc:	800fffff 	.word	0x800fffff
1000f6c0:	000003f3 	.word	0x000003f3
1000f6c4:	4642      	mov	r2, r8
1000f6c6:	0c12      	lsrs	r2, r2, #16
1000f6c8:	4691      	mov	r9, r2
1000f6ca:	0c1a      	lsrs	r2, r3, #16
1000f6cc:	4694      	mov	ip, r2
1000f6ce:	4642      	mov	r2, r8
1000f6d0:	0417      	lsls	r7, r2, #16
1000f6d2:	464a      	mov	r2, r9
1000f6d4:	041b      	lsls	r3, r3, #16
1000f6d6:	0c1b      	lsrs	r3, r3, #16
1000f6d8:	435a      	muls	r2, r3
1000f6da:	4660      	mov	r0, ip
1000f6dc:	4690      	mov	r8, r2
1000f6de:	464a      	mov	r2, r9
1000f6e0:	4342      	muls	r2, r0
1000f6e2:	0010      	movs	r0, r2
1000f6e4:	9203      	str	r2, [sp, #12]
1000f6e6:	4662      	mov	r2, ip
1000f6e8:	001c      	movs	r4, r3
1000f6ea:	0c3f      	lsrs	r7, r7, #16
1000f6ec:	437a      	muls	r2, r7
1000f6ee:	437c      	muls	r4, r7
1000f6f0:	4442      	add	r2, r8
1000f6f2:	9201      	str	r2, [sp, #4]
1000f6f4:	0c22      	lsrs	r2, r4, #16
1000f6f6:	4692      	mov	sl, r2
1000f6f8:	9a01      	ldr	r2, [sp, #4]
1000f6fa:	4452      	add	r2, sl
1000f6fc:	4590      	cmp	r8, r2
1000f6fe:	d906      	bls.n	1000f70e <__aeabi_dmul+0x23a>
1000f700:	4682      	mov	sl, r0
1000f702:	2080      	movs	r0, #128	; 0x80
1000f704:	0240      	lsls	r0, r0, #9
1000f706:	4680      	mov	r8, r0
1000f708:	44c2      	add	sl, r8
1000f70a:	4650      	mov	r0, sl
1000f70c:	9003      	str	r0, [sp, #12]
1000f70e:	0c10      	lsrs	r0, r2, #16
1000f710:	9004      	str	r0, [sp, #16]
1000f712:	4648      	mov	r0, r9
1000f714:	0424      	lsls	r4, r4, #16
1000f716:	0c24      	lsrs	r4, r4, #16
1000f718:	0412      	lsls	r2, r2, #16
1000f71a:	1912      	adds	r2, r2, r4
1000f71c:	9205      	str	r2, [sp, #20]
1000f71e:	0c2a      	lsrs	r2, r5, #16
1000f720:	042d      	lsls	r5, r5, #16
1000f722:	0c2d      	lsrs	r5, r5, #16
1000f724:	4368      	muls	r0, r5
1000f726:	002c      	movs	r4, r5
1000f728:	4682      	mov	sl, r0
1000f72a:	4648      	mov	r0, r9
1000f72c:	437c      	muls	r4, r7
1000f72e:	4350      	muls	r0, r2
1000f730:	4681      	mov	r9, r0
1000f732:	0c20      	lsrs	r0, r4, #16
1000f734:	4680      	mov	r8, r0
1000f736:	4357      	muls	r7, r2
1000f738:	4457      	add	r7, sl
1000f73a:	4447      	add	r7, r8
1000f73c:	45ba      	cmp	sl, r7
1000f73e:	d903      	bls.n	1000f748 <__aeabi_dmul+0x274>
1000f740:	2080      	movs	r0, #128	; 0x80
1000f742:	0240      	lsls	r0, r0, #9
1000f744:	4680      	mov	r8, r0
1000f746:	44c1      	add	r9, r8
1000f748:	0c38      	lsrs	r0, r7, #16
1000f74a:	043f      	lsls	r7, r7, #16
1000f74c:	46b8      	mov	r8, r7
1000f74e:	4448      	add	r0, r9
1000f750:	0424      	lsls	r4, r4, #16
1000f752:	0c24      	lsrs	r4, r4, #16
1000f754:	9001      	str	r0, [sp, #4]
1000f756:	9804      	ldr	r0, [sp, #16]
1000f758:	44a0      	add	r8, r4
1000f75a:	4440      	add	r0, r8
1000f75c:	9004      	str	r0, [sp, #16]
1000f75e:	4658      	mov	r0, fp
1000f760:	0c00      	lsrs	r0, r0, #16
1000f762:	4681      	mov	r9, r0
1000f764:	4658      	mov	r0, fp
1000f766:	0404      	lsls	r4, r0, #16
1000f768:	0c20      	lsrs	r0, r4, #16
1000f76a:	4682      	mov	sl, r0
1000f76c:	0007      	movs	r7, r0
1000f76e:	4648      	mov	r0, r9
1000f770:	435f      	muls	r7, r3
1000f772:	464c      	mov	r4, r9
1000f774:	4343      	muls	r3, r0
1000f776:	4660      	mov	r0, ip
1000f778:	4360      	muls	r0, r4
1000f77a:	4664      	mov	r4, ip
1000f77c:	4683      	mov	fp, r0
1000f77e:	4650      	mov	r0, sl
1000f780:	4344      	muls	r4, r0
1000f782:	0c38      	lsrs	r0, r7, #16
1000f784:	4684      	mov	ip, r0
1000f786:	18e4      	adds	r4, r4, r3
1000f788:	4464      	add	r4, ip
1000f78a:	42a3      	cmp	r3, r4
1000f78c:	d903      	bls.n	1000f796 <__aeabi_dmul+0x2c2>
1000f78e:	2380      	movs	r3, #128	; 0x80
1000f790:	025b      	lsls	r3, r3, #9
1000f792:	469c      	mov	ip, r3
1000f794:	44e3      	add	fp, ip
1000f796:	4648      	mov	r0, r9
1000f798:	043f      	lsls	r7, r7, #16
1000f79a:	0c23      	lsrs	r3, r4, #16
1000f79c:	0c3f      	lsrs	r7, r7, #16
1000f79e:	0424      	lsls	r4, r4, #16
1000f7a0:	19e4      	adds	r4, r4, r7
1000f7a2:	4657      	mov	r7, sl
1000f7a4:	4368      	muls	r0, r5
1000f7a6:	436f      	muls	r7, r5
1000f7a8:	4684      	mov	ip, r0
1000f7aa:	464d      	mov	r5, r9
1000f7ac:	4650      	mov	r0, sl
1000f7ae:	4355      	muls	r5, r2
1000f7b0:	4342      	muls	r2, r0
1000f7b2:	0c38      	lsrs	r0, r7, #16
1000f7b4:	4681      	mov	r9, r0
1000f7b6:	4462      	add	r2, ip
1000f7b8:	444a      	add	r2, r9
1000f7ba:	445b      	add	r3, fp
1000f7bc:	4594      	cmp	ip, r2
1000f7be:	d903      	bls.n	1000f7c8 <__aeabi_dmul+0x2f4>
1000f7c0:	2080      	movs	r0, #128	; 0x80
1000f7c2:	0240      	lsls	r0, r0, #9
1000f7c4:	4684      	mov	ip, r0
1000f7c6:	4465      	add	r5, ip
1000f7c8:	9803      	ldr	r0, [sp, #12]
1000f7ca:	043f      	lsls	r7, r7, #16
1000f7cc:	4683      	mov	fp, r0
1000f7ce:	9804      	ldr	r0, [sp, #16]
1000f7d0:	0c3f      	lsrs	r7, r7, #16
1000f7d2:	4684      	mov	ip, r0
1000f7d4:	44e3      	add	fp, ip
1000f7d6:	45c3      	cmp	fp, r8
1000f7d8:	4180      	sbcs	r0, r0
1000f7da:	4240      	negs	r0, r0
1000f7dc:	4682      	mov	sl, r0
1000f7de:	0410      	lsls	r0, r2, #16
1000f7e0:	4684      	mov	ip, r0
1000f7e2:	9801      	ldr	r0, [sp, #4]
1000f7e4:	4467      	add	r7, ip
1000f7e6:	4684      	mov	ip, r0
1000f7e8:	4467      	add	r7, ip
1000f7ea:	44a3      	add	fp, r4
1000f7ec:	46bc      	mov	ip, r7
1000f7ee:	45a3      	cmp	fp, r4
1000f7f0:	41a4      	sbcs	r4, r4
1000f7f2:	4699      	mov	r9, r3
1000f7f4:	44d4      	add	ip, sl
1000f7f6:	4264      	negs	r4, r4
1000f7f8:	4287      	cmp	r7, r0
1000f7fa:	41bf      	sbcs	r7, r7
1000f7fc:	45d4      	cmp	ip, sl
1000f7fe:	4180      	sbcs	r0, r0
1000f800:	44e1      	add	r9, ip
1000f802:	46a0      	mov	r8, r4
1000f804:	4599      	cmp	r9, r3
1000f806:	419b      	sbcs	r3, r3
1000f808:	427f      	negs	r7, r7
1000f80a:	4240      	negs	r0, r0
1000f80c:	44c8      	add	r8, r9
1000f80e:	4307      	orrs	r7, r0
1000f810:	0c12      	lsrs	r2, r2, #16
1000f812:	18ba      	adds	r2, r7, r2
1000f814:	45a0      	cmp	r8, r4
1000f816:	41a4      	sbcs	r4, r4
1000f818:	425f      	negs	r7, r3
1000f81a:	003b      	movs	r3, r7
1000f81c:	4264      	negs	r4, r4
1000f81e:	4323      	orrs	r3, r4
1000f820:	18d7      	adds	r7, r2, r3
1000f822:	4643      	mov	r3, r8
1000f824:	197d      	adds	r5, r7, r5
1000f826:	0ddb      	lsrs	r3, r3, #23
1000f828:	026d      	lsls	r5, r5, #9
1000f82a:	431d      	orrs	r5, r3
1000f82c:	465b      	mov	r3, fp
1000f82e:	025a      	lsls	r2, r3, #9
1000f830:	9b05      	ldr	r3, [sp, #20]
1000f832:	431a      	orrs	r2, r3
1000f834:	1e53      	subs	r3, r2, #1
1000f836:	419a      	sbcs	r2, r3
1000f838:	465b      	mov	r3, fp
1000f83a:	0ddb      	lsrs	r3, r3, #23
1000f83c:	431a      	orrs	r2, r3
1000f83e:	4643      	mov	r3, r8
1000f840:	025b      	lsls	r3, r3, #9
1000f842:	4313      	orrs	r3, r2
1000f844:	01ea      	lsls	r2, r5, #7
1000f846:	d507      	bpl.n	1000f858 <__aeabi_dmul+0x384>
1000f848:	2201      	movs	r2, #1
1000f84a:	085c      	lsrs	r4, r3, #1
1000f84c:	4013      	ands	r3, r2
1000f84e:	4323      	orrs	r3, r4
1000f850:	07ea      	lsls	r2, r5, #31
1000f852:	9e02      	ldr	r6, [sp, #8]
1000f854:	4313      	orrs	r3, r2
1000f856:	086d      	lsrs	r5, r5, #1
1000f858:	4a57      	ldr	r2, [pc, #348]	; (1000f9b8 <__aeabi_dmul+0x4e4>)
1000f85a:	18b2      	adds	r2, r6, r2
1000f85c:	2a00      	cmp	r2, #0
1000f85e:	dd4b      	ble.n	1000f8f8 <__aeabi_dmul+0x424>
1000f860:	0758      	lsls	r0, r3, #29
1000f862:	d009      	beq.n	1000f878 <__aeabi_dmul+0x3a4>
1000f864:	200f      	movs	r0, #15
1000f866:	4018      	ands	r0, r3
1000f868:	2804      	cmp	r0, #4
1000f86a:	d005      	beq.n	1000f878 <__aeabi_dmul+0x3a4>
1000f86c:	1d18      	adds	r0, r3, #4
1000f86e:	4298      	cmp	r0, r3
1000f870:	419b      	sbcs	r3, r3
1000f872:	425b      	negs	r3, r3
1000f874:	18ed      	adds	r5, r5, r3
1000f876:	0003      	movs	r3, r0
1000f878:	01e8      	lsls	r0, r5, #7
1000f87a:	d504      	bpl.n	1000f886 <__aeabi_dmul+0x3b2>
1000f87c:	4a4f      	ldr	r2, [pc, #316]	; (1000f9bc <__aeabi_dmul+0x4e8>)
1000f87e:	4015      	ands	r5, r2
1000f880:	2280      	movs	r2, #128	; 0x80
1000f882:	00d2      	lsls	r2, r2, #3
1000f884:	18b2      	adds	r2, r6, r2
1000f886:	484e      	ldr	r0, [pc, #312]	; (1000f9c0 <__aeabi_dmul+0x4ec>)
1000f888:	4282      	cmp	r2, r0
1000f88a:	dd00      	ble.n	1000f88e <__aeabi_dmul+0x3ba>
1000f88c:	e6e7      	b.n	1000f65e <__aeabi_dmul+0x18a>
1000f88e:	2401      	movs	r4, #1
1000f890:	08db      	lsrs	r3, r3, #3
1000f892:	0768      	lsls	r0, r5, #29
1000f894:	4318      	orrs	r0, r3
1000f896:	026d      	lsls	r5, r5, #9
1000f898:	0553      	lsls	r3, r2, #21
1000f89a:	4680      	mov	r8, r0
1000f89c:	0b2d      	lsrs	r5, r5, #12
1000f89e:	0d5b      	lsrs	r3, r3, #21
1000f8a0:	400c      	ands	r4, r1
1000f8a2:	e67d      	b.n	1000f5a0 <__aeabi_dmul+0xcc>
1000f8a4:	2280      	movs	r2, #128	; 0x80
1000f8a6:	4659      	mov	r1, fp
1000f8a8:	0312      	lsls	r2, r2, #12
1000f8aa:	4211      	tst	r1, r2
1000f8ac:	d008      	beq.n	1000f8c0 <__aeabi_dmul+0x3ec>
1000f8ae:	4215      	tst	r5, r2
1000f8b0:	d106      	bne.n	1000f8c0 <__aeabi_dmul+0x3ec>
1000f8b2:	4315      	orrs	r5, r2
1000f8b4:	032d      	lsls	r5, r5, #12
1000f8b6:	4698      	mov	r8, r3
1000f8b8:	0b2d      	lsrs	r5, r5, #12
1000f8ba:	464c      	mov	r4, r9
1000f8bc:	4b41      	ldr	r3, [pc, #260]	; (1000f9c4 <__aeabi_dmul+0x4f0>)
1000f8be:	e66f      	b.n	1000f5a0 <__aeabi_dmul+0xcc>
1000f8c0:	465d      	mov	r5, fp
1000f8c2:	4315      	orrs	r5, r2
1000f8c4:	032d      	lsls	r5, r5, #12
1000f8c6:	0b2d      	lsrs	r5, r5, #12
1000f8c8:	4b3e      	ldr	r3, [pc, #248]	; (1000f9c4 <__aeabi_dmul+0x4f0>)
1000f8ca:	e669      	b.n	1000f5a0 <__aeabi_dmul+0xcc>
1000f8cc:	0003      	movs	r3, r0
1000f8ce:	4655      	mov	r5, sl
1000f8d0:	3b28      	subs	r3, #40	; 0x28
1000f8d2:	409d      	lsls	r5, r3
1000f8d4:	2300      	movs	r3, #0
1000f8d6:	e6bc      	b.n	1000f652 <__aeabi_dmul+0x17e>
1000f8d8:	4650      	mov	r0, sl
1000f8da:	f000 fc37 	bl	1001014c <__clzsi2>
1000f8de:	3020      	adds	r0, #32
1000f8e0:	e6a8      	b.n	1000f634 <__aeabi_dmul+0x160>
1000f8e2:	0003      	movs	r3, r0
1000f8e4:	3b28      	subs	r3, #40	; 0x28
1000f8e6:	409f      	lsls	r7, r3
1000f8e8:	2300      	movs	r3, #0
1000f8ea:	46bb      	mov	fp, r7
1000f8ec:	4698      	mov	r8, r3
1000f8ee:	e689      	b.n	1000f604 <__aeabi_dmul+0x130>
1000f8f0:	f000 fc2c 	bl	1001014c <__clzsi2>
1000f8f4:	3020      	adds	r0, #32
1000f8f6:	e673      	b.n	1000f5e0 <__aeabi_dmul+0x10c>
1000f8f8:	2401      	movs	r4, #1
1000f8fa:	1aa6      	subs	r6, r4, r2
1000f8fc:	2e38      	cmp	r6, #56	; 0x38
1000f8fe:	dd07      	ble.n	1000f910 <__aeabi_dmul+0x43c>
1000f900:	2200      	movs	r2, #0
1000f902:	400c      	ands	r4, r1
1000f904:	2300      	movs	r3, #0
1000f906:	2500      	movs	r5, #0
1000f908:	4690      	mov	r8, r2
1000f90a:	e649      	b.n	1000f5a0 <__aeabi_dmul+0xcc>
1000f90c:	9e02      	ldr	r6, [sp, #8]
1000f90e:	e7a3      	b.n	1000f858 <__aeabi_dmul+0x384>
1000f910:	2e1f      	cmp	r6, #31
1000f912:	dc20      	bgt.n	1000f956 <__aeabi_dmul+0x482>
1000f914:	2220      	movs	r2, #32
1000f916:	002c      	movs	r4, r5
1000f918:	0018      	movs	r0, r3
1000f91a:	1b92      	subs	r2, r2, r6
1000f91c:	40f0      	lsrs	r0, r6
1000f91e:	4094      	lsls	r4, r2
1000f920:	4093      	lsls	r3, r2
1000f922:	4304      	orrs	r4, r0
1000f924:	1e58      	subs	r0, r3, #1
1000f926:	4183      	sbcs	r3, r0
1000f928:	431c      	orrs	r4, r3
1000f92a:	40f5      	lsrs	r5, r6
1000f92c:	0763      	lsls	r3, r4, #29
1000f92e:	d009      	beq.n	1000f944 <__aeabi_dmul+0x470>
1000f930:	230f      	movs	r3, #15
1000f932:	4023      	ands	r3, r4
1000f934:	2b04      	cmp	r3, #4
1000f936:	d005      	beq.n	1000f944 <__aeabi_dmul+0x470>
1000f938:	0023      	movs	r3, r4
1000f93a:	1d1c      	adds	r4, r3, #4
1000f93c:	429c      	cmp	r4, r3
1000f93e:	4192      	sbcs	r2, r2
1000f940:	4252      	negs	r2, r2
1000f942:	18ad      	adds	r5, r5, r2
1000f944:	022b      	lsls	r3, r5, #8
1000f946:	d51f      	bpl.n	1000f988 <__aeabi_dmul+0x4b4>
1000f948:	2401      	movs	r4, #1
1000f94a:	2200      	movs	r2, #0
1000f94c:	400c      	ands	r4, r1
1000f94e:	2301      	movs	r3, #1
1000f950:	2500      	movs	r5, #0
1000f952:	4690      	mov	r8, r2
1000f954:	e624      	b.n	1000f5a0 <__aeabi_dmul+0xcc>
1000f956:	201f      	movs	r0, #31
1000f958:	002c      	movs	r4, r5
1000f95a:	4240      	negs	r0, r0
1000f95c:	1a82      	subs	r2, r0, r2
1000f95e:	40d4      	lsrs	r4, r2
1000f960:	2e20      	cmp	r6, #32
1000f962:	d01c      	beq.n	1000f99e <__aeabi_dmul+0x4ca>
1000f964:	2240      	movs	r2, #64	; 0x40
1000f966:	1b96      	subs	r6, r2, r6
1000f968:	40b5      	lsls	r5, r6
1000f96a:	432b      	orrs	r3, r5
1000f96c:	1e58      	subs	r0, r3, #1
1000f96e:	4183      	sbcs	r3, r0
1000f970:	2007      	movs	r0, #7
1000f972:	4323      	orrs	r3, r4
1000f974:	4018      	ands	r0, r3
1000f976:	2500      	movs	r5, #0
1000f978:	2800      	cmp	r0, #0
1000f97a:	d009      	beq.n	1000f990 <__aeabi_dmul+0x4bc>
1000f97c:	220f      	movs	r2, #15
1000f97e:	2500      	movs	r5, #0
1000f980:	401a      	ands	r2, r3
1000f982:	001c      	movs	r4, r3
1000f984:	2a04      	cmp	r2, #4
1000f986:	d1d8      	bne.n	1000f93a <__aeabi_dmul+0x466>
1000f988:	0023      	movs	r3, r4
1000f98a:	0768      	lsls	r0, r5, #29
1000f98c:	026d      	lsls	r5, r5, #9
1000f98e:	0b2d      	lsrs	r5, r5, #12
1000f990:	2401      	movs	r4, #1
1000f992:	08db      	lsrs	r3, r3, #3
1000f994:	4303      	orrs	r3, r0
1000f996:	4698      	mov	r8, r3
1000f998:	400c      	ands	r4, r1
1000f99a:	2300      	movs	r3, #0
1000f99c:	e600      	b.n	1000f5a0 <__aeabi_dmul+0xcc>
1000f99e:	2500      	movs	r5, #0
1000f9a0:	e7e3      	b.n	1000f96a <__aeabi_dmul+0x496>
1000f9a2:	2280      	movs	r2, #128	; 0x80
1000f9a4:	2401      	movs	r4, #1
1000f9a6:	0312      	lsls	r2, r2, #12
1000f9a8:	4315      	orrs	r5, r2
1000f9aa:	032d      	lsls	r5, r5, #12
1000f9ac:	4698      	mov	r8, r3
1000f9ae:	0b2d      	lsrs	r5, r5, #12
1000f9b0:	400c      	ands	r4, r1
1000f9b2:	4b04      	ldr	r3, [pc, #16]	; (1000f9c4 <__aeabi_dmul+0x4f0>)
1000f9b4:	e5f4      	b.n	1000f5a0 <__aeabi_dmul+0xcc>
1000f9b6:	46c0      	nop			; (mov r8, r8)
1000f9b8:	000003ff 	.word	0x000003ff
1000f9bc:	feffffff 	.word	0xfeffffff
1000f9c0:	000007fe 	.word	0x000007fe
1000f9c4:	000007ff 	.word	0x000007ff

1000f9c8 <__aeabi_dsub>:
1000f9c8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f9ca:	4657      	mov	r7, sl
1000f9cc:	464e      	mov	r6, r9
1000f9ce:	4645      	mov	r5, r8
1000f9d0:	b4e0      	push	{r5, r6, r7}
1000f9d2:	000e      	movs	r6, r1
1000f9d4:	0011      	movs	r1, r2
1000f9d6:	0ff2      	lsrs	r2, r6, #31
1000f9d8:	4692      	mov	sl, r2
1000f9da:	00c5      	lsls	r5, r0, #3
1000f9dc:	0f42      	lsrs	r2, r0, #29
1000f9de:	0318      	lsls	r0, r3, #12
1000f9e0:	0337      	lsls	r7, r6, #12
1000f9e2:	0074      	lsls	r4, r6, #1
1000f9e4:	0a40      	lsrs	r0, r0, #9
1000f9e6:	0f4e      	lsrs	r6, r1, #29
1000f9e8:	0a7f      	lsrs	r7, r7, #9
1000f9ea:	4330      	orrs	r0, r6
1000f9ec:	4ecf      	ldr	r6, [pc, #828]	; (1000fd2c <__aeabi_dsub+0x364>)
1000f9ee:	4317      	orrs	r7, r2
1000f9f0:	005a      	lsls	r2, r3, #1
1000f9f2:	0d64      	lsrs	r4, r4, #21
1000f9f4:	0d52      	lsrs	r2, r2, #21
1000f9f6:	0fdb      	lsrs	r3, r3, #31
1000f9f8:	00c9      	lsls	r1, r1, #3
1000f9fa:	42b2      	cmp	r2, r6
1000f9fc:	d100      	bne.n	1000fa00 <__aeabi_dsub+0x38>
1000f9fe:	e0e5      	b.n	1000fbcc <__aeabi_dsub+0x204>
1000fa00:	2601      	movs	r6, #1
1000fa02:	4073      	eors	r3, r6
1000fa04:	1aa6      	subs	r6, r4, r2
1000fa06:	46b4      	mov	ip, r6
1000fa08:	4553      	cmp	r3, sl
1000fa0a:	d100      	bne.n	1000fa0e <__aeabi_dsub+0x46>
1000fa0c:	e0af      	b.n	1000fb6e <__aeabi_dsub+0x1a6>
1000fa0e:	2e00      	cmp	r6, #0
1000fa10:	dc00      	bgt.n	1000fa14 <__aeabi_dsub+0x4c>
1000fa12:	e10d      	b.n	1000fc30 <__aeabi_dsub+0x268>
1000fa14:	2a00      	cmp	r2, #0
1000fa16:	d13a      	bne.n	1000fa8e <__aeabi_dsub+0xc6>
1000fa18:	0003      	movs	r3, r0
1000fa1a:	430b      	orrs	r3, r1
1000fa1c:	d000      	beq.n	1000fa20 <__aeabi_dsub+0x58>
1000fa1e:	e0e4      	b.n	1000fbea <__aeabi_dsub+0x222>
1000fa20:	076b      	lsls	r3, r5, #29
1000fa22:	d009      	beq.n	1000fa38 <__aeabi_dsub+0x70>
1000fa24:	230f      	movs	r3, #15
1000fa26:	402b      	ands	r3, r5
1000fa28:	2b04      	cmp	r3, #4
1000fa2a:	d005      	beq.n	1000fa38 <__aeabi_dsub+0x70>
1000fa2c:	1d2b      	adds	r3, r5, #4
1000fa2e:	42ab      	cmp	r3, r5
1000fa30:	41ad      	sbcs	r5, r5
1000fa32:	426d      	negs	r5, r5
1000fa34:	197f      	adds	r7, r7, r5
1000fa36:	001d      	movs	r5, r3
1000fa38:	023b      	lsls	r3, r7, #8
1000fa3a:	d400      	bmi.n	1000fa3e <__aeabi_dsub+0x76>
1000fa3c:	e088      	b.n	1000fb50 <__aeabi_dsub+0x188>
1000fa3e:	4bbb      	ldr	r3, [pc, #748]	; (1000fd2c <__aeabi_dsub+0x364>)
1000fa40:	3401      	adds	r4, #1
1000fa42:	429c      	cmp	r4, r3
1000fa44:	d100      	bne.n	1000fa48 <__aeabi_dsub+0x80>
1000fa46:	e110      	b.n	1000fc6a <__aeabi_dsub+0x2a2>
1000fa48:	003a      	movs	r2, r7
1000fa4a:	4bb9      	ldr	r3, [pc, #740]	; (1000fd30 <__aeabi_dsub+0x368>)
1000fa4c:	4651      	mov	r1, sl
1000fa4e:	401a      	ands	r2, r3
1000fa50:	2301      	movs	r3, #1
1000fa52:	0750      	lsls	r0, r2, #29
1000fa54:	08ed      	lsrs	r5, r5, #3
1000fa56:	0252      	lsls	r2, r2, #9
1000fa58:	0564      	lsls	r4, r4, #21
1000fa5a:	4305      	orrs	r5, r0
1000fa5c:	0b12      	lsrs	r2, r2, #12
1000fa5e:	0d64      	lsrs	r4, r4, #21
1000fa60:	400b      	ands	r3, r1
1000fa62:	2100      	movs	r1, #0
1000fa64:	0028      	movs	r0, r5
1000fa66:	0312      	lsls	r2, r2, #12
1000fa68:	0d0d      	lsrs	r5, r1, #20
1000fa6a:	0b12      	lsrs	r2, r2, #12
1000fa6c:	0564      	lsls	r4, r4, #21
1000fa6e:	052d      	lsls	r5, r5, #20
1000fa70:	4315      	orrs	r5, r2
1000fa72:	0862      	lsrs	r2, r4, #1
1000fa74:	4caf      	ldr	r4, [pc, #700]	; (1000fd34 <__aeabi_dsub+0x36c>)
1000fa76:	07db      	lsls	r3, r3, #31
1000fa78:	402c      	ands	r4, r5
1000fa7a:	4314      	orrs	r4, r2
1000fa7c:	0064      	lsls	r4, r4, #1
1000fa7e:	0864      	lsrs	r4, r4, #1
1000fa80:	431c      	orrs	r4, r3
1000fa82:	0021      	movs	r1, r4
1000fa84:	bc1c      	pop	{r2, r3, r4}
1000fa86:	4690      	mov	r8, r2
1000fa88:	4699      	mov	r9, r3
1000fa8a:	46a2      	mov	sl, r4
1000fa8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fa8e:	4ba7      	ldr	r3, [pc, #668]	; (1000fd2c <__aeabi_dsub+0x364>)
1000fa90:	429c      	cmp	r4, r3
1000fa92:	d0c5      	beq.n	1000fa20 <__aeabi_dsub+0x58>
1000fa94:	2380      	movs	r3, #128	; 0x80
1000fa96:	041b      	lsls	r3, r3, #16
1000fa98:	4318      	orrs	r0, r3
1000fa9a:	4663      	mov	r3, ip
1000fa9c:	2b38      	cmp	r3, #56	; 0x38
1000fa9e:	dd00      	ble.n	1000faa2 <__aeabi_dsub+0xda>
1000faa0:	e0fd      	b.n	1000fc9e <__aeabi_dsub+0x2d6>
1000faa2:	2b1f      	cmp	r3, #31
1000faa4:	dd00      	ble.n	1000faa8 <__aeabi_dsub+0xe0>
1000faa6:	e130      	b.n	1000fd0a <__aeabi_dsub+0x342>
1000faa8:	4662      	mov	r2, ip
1000faaa:	2320      	movs	r3, #32
1000faac:	1a9b      	subs	r3, r3, r2
1000faae:	0002      	movs	r2, r0
1000fab0:	409a      	lsls	r2, r3
1000fab2:	4666      	mov	r6, ip
1000fab4:	4690      	mov	r8, r2
1000fab6:	000a      	movs	r2, r1
1000fab8:	4099      	lsls	r1, r3
1000faba:	40f2      	lsrs	r2, r6
1000fabc:	4646      	mov	r6, r8
1000fabe:	1e4b      	subs	r3, r1, #1
1000fac0:	4199      	sbcs	r1, r3
1000fac2:	4332      	orrs	r2, r6
1000fac4:	4311      	orrs	r1, r2
1000fac6:	4663      	mov	r3, ip
1000fac8:	0002      	movs	r2, r0
1000faca:	40da      	lsrs	r2, r3
1000facc:	1a69      	subs	r1, r5, r1
1000face:	428d      	cmp	r5, r1
1000fad0:	419b      	sbcs	r3, r3
1000fad2:	000d      	movs	r5, r1
1000fad4:	1aba      	subs	r2, r7, r2
1000fad6:	425b      	negs	r3, r3
1000fad8:	1ad7      	subs	r7, r2, r3
1000fada:	023b      	lsls	r3, r7, #8
1000fadc:	d535      	bpl.n	1000fb4a <__aeabi_dsub+0x182>
1000fade:	027a      	lsls	r2, r7, #9
1000fae0:	0a53      	lsrs	r3, r2, #9
1000fae2:	4698      	mov	r8, r3
1000fae4:	4643      	mov	r3, r8
1000fae6:	2b00      	cmp	r3, #0
1000fae8:	d100      	bne.n	1000faec <__aeabi_dsub+0x124>
1000faea:	e0c4      	b.n	1000fc76 <__aeabi_dsub+0x2ae>
1000faec:	4640      	mov	r0, r8
1000faee:	f000 fb2d 	bl	1001014c <__clzsi2>
1000faf2:	0003      	movs	r3, r0
1000faf4:	3b08      	subs	r3, #8
1000faf6:	2b1f      	cmp	r3, #31
1000faf8:	dd00      	ble.n	1000fafc <__aeabi_dsub+0x134>
1000fafa:	e0c5      	b.n	1000fc88 <__aeabi_dsub+0x2c0>
1000fafc:	2220      	movs	r2, #32
1000fafe:	0029      	movs	r1, r5
1000fb00:	1ad2      	subs	r2, r2, r3
1000fb02:	4647      	mov	r7, r8
1000fb04:	40d1      	lsrs	r1, r2
1000fb06:	409f      	lsls	r7, r3
1000fb08:	000a      	movs	r2, r1
1000fb0a:	409d      	lsls	r5, r3
1000fb0c:	433a      	orrs	r2, r7
1000fb0e:	429c      	cmp	r4, r3
1000fb10:	dd00      	ble.n	1000fb14 <__aeabi_dsub+0x14c>
1000fb12:	e0c0      	b.n	1000fc96 <__aeabi_dsub+0x2ce>
1000fb14:	1b1c      	subs	r4, r3, r4
1000fb16:	1c63      	adds	r3, r4, #1
1000fb18:	2b1f      	cmp	r3, #31
1000fb1a:	dd00      	ble.n	1000fb1e <__aeabi_dsub+0x156>
1000fb1c:	e0e4      	b.n	1000fce8 <__aeabi_dsub+0x320>
1000fb1e:	2120      	movs	r1, #32
1000fb20:	0014      	movs	r4, r2
1000fb22:	0028      	movs	r0, r5
1000fb24:	1ac9      	subs	r1, r1, r3
1000fb26:	40d8      	lsrs	r0, r3
1000fb28:	408c      	lsls	r4, r1
1000fb2a:	408d      	lsls	r5, r1
1000fb2c:	4304      	orrs	r4, r0
1000fb2e:	40da      	lsrs	r2, r3
1000fb30:	1e68      	subs	r0, r5, #1
1000fb32:	4185      	sbcs	r5, r0
1000fb34:	0017      	movs	r7, r2
1000fb36:	4325      	orrs	r5, r4
1000fb38:	2400      	movs	r4, #0
1000fb3a:	e771      	b.n	1000fa20 <__aeabi_dsub+0x58>
1000fb3c:	4642      	mov	r2, r8
1000fb3e:	4663      	mov	r3, ip
1000fb40:	431a      	orrs	r2, r3
1000fb42:	d100      	bne.n	1000fb46 <__aeabi_dsub+0x17e>
1000fb44:	e24c      	b.n	1000ffe0 <__aeabi_dsub+0x618>
1000fb46:	4667      	mov	r7, ip
1000fb48:	4645      	mov	r5, r8
1000fb4a:	076b      	lsls	r3, r5, #29
1000fb4c:	d000      	beq.n	1000fb50 <__aeabi_dsub+0x188>
1000fb4e:	e769      	b.n	1000fa24 <__aeabi_dsub+0x5c>
1000fb50:	2301      	movs	r3, #1
1000fb52:	4651      	mov	r1, sl
1000fb54:	0778      	lsls	r0, r7, #29
1000fb56:	08ed      	lsrs	r5, r5, #3
1000fb58:	08fa      	lsrs	r2, r7, #3
1000fb5a:	400b      	ands	r3, r1
1000fb5c:	4305      	orrs	r5, r0
1000fb5e:	4973      	ldr	r1, [pc, #460]	; (1000fd2c <__aeabi_dsub+0x364>)
1000fb60:	428c      	cmp	r4, r1
1000fb62:	d038      	beq.n	1000fbd6 <__aeabi_dsub+0x20e>
1000fb64:	0312      	lsls	r2, r2, #12
1000fb66:	0564      	lsls	r4, r4, #21
1000fb68:	0b12      	lsrs	r2, r2, #12
1000fb6a:	0d64      	lsrs	r4, r4, #21
1000fb6c:	e779      	b.n	1000fa62 <__aeabi_dsub+0x9a>
1000fb6e:	2e00      	cmp	r6, #0
1000fb70:	dc00      	bgt.n	1000fb74 <__aeabi_dsub+0x1ac>
1000fb72:	e09a      	b.n	1000fcaa <__aeabi_dsub+0x2e2>
1000fb74:	2a00      	cmp	r2, #0
1000fb76:	d047      	beq.n	1000fc08 <__aeabi_dsub+0x240>
1000fb78:	4a6c      	ldr	r2, [pc, #432]	; (1000fd2c <__aeabi_dsub+0x364>)
1000fb7a:	4294      	cmp	r4, r2
1000fb7c:	d100      	bne.n	1000fb80 <__aeabi_dsub+0x1b8>
1000fb7e:	e74f      	b.n	1000fa20 <__aeabi_dsub+0x58>
1000fb80:	2280      	movs	r2, #128	; 0x80
1000fb82:	0412      	lsls	r2, r2, #16
1000fb84:	4310      	orrs	r0, r2
1000fb86:	4662      	mov	r2, ip
1000fb88:	2a38      	cmp	r2, #56	; 0x38
1000fb8a:	dc00      	bgt.n	1000fb8e <__aeabi_dsub+0x1c6>
1000fb8c:	e108      	b.n	1000fda0 <__aeabi_dsub+0x3d8>
1000fb8e:	4301      	orrs	r1, r0
1000fb90:	1e48      	subs	r0, r1, #1
1000fb92:	4181      	sbcs	r1, r0
1000fb94:	2200      	movs	r2, #0
1000fb96:	b2c9      	uxtb	r1, r1
1000fb98:	1949      	adds	r1, r1, r5
1000fb9a:	19d2      	adds	r2, r2, r7
1000fb9c:	42a9      	cmp	r1, r5
1000fb9e:	41bf      	sbcs	r7, r7
1000fba0:	000d      	movs	r5, r1
1000fba2:	427f      	negs	r7, r7
1000fba4:	18bf      	adds	r7, r7, r2
1000fba6:	023a      	lsls	r2, r7, #8
1000fba8:	d400      	bmi.n	1000fbac <__aeabi_dsub+0x1e4>
1000fbaa:	e142      	b.n	1000fe32 <__aeabi_dsub+0x46a>
1000fbac:	4a5f      	ldr	r2, [pc, #380]	; (1000fd2c <__aeabi_dsub+0x364>)
1000fbae:	3401      	adds	r4, #1
1000fbb0:	4294      	cmp	r4, r2
1000fbb2:	d100      	bne.n	1000fbb6 <__aeabi_dsub+0x1ee>
1000fbb4:	e14e      	b.n	1000fe54 <__aeabi_dsub+0x48c>
1000fbb6:	2001      	movs	r0, #1
1000fbb8:	4a5d      	ldr	r2, [pc, #372]	; (1000fd30 <__aeabi_dsub+0x368>)
1000fbba:	0869      	lsrs	r1, r5, #1
1000fbbc:	403a      	ands	r2, r7
1000fbbe:	4028      	ands	r0, r5
1000fbc0:	4308      	orrs	r0, r1
1000fbc2:	07d5      	lsls	r5, r2, #31
1000fbc4:	4305      	orrs	r5, r0
1000fbc6:	0857      	lsrs	r7, r2, #1
1000fbc8:	469a      	mov	sl, r3
1000fbca:	e729      	b.n	1000fa20 <__aeabi_dsub+0x58>
1000fbcc:	0006      	movs	r6, r0
1000fbce:	430e      	orrs	r6, r1
1000fbd0:	d000      	beq.n	1000fbd4 <__aeabi_dsub+0x20c>
1000fbd2:	e717      	b.n	1000fa04 <__aeabi_dsub+0x3c>
1000fbd4:	e714      	b.n	1000fa00 <__aeabi_dsub+0x38>
1000fbd6:	0029      	movs	r1, r5
1000fbd8:	4311      	orrs	r1, r2
1000fbda:	d100      	bne.n	1000fbde <__aeabi_dsub+0x216>
1000fbdc:	e1f9      	b.n	1000ffd2 <__aeabi_dsub+0x60a>
1000fbde:	2180      	movs	r1, #128	; 0x80
1000fbe0:	0309      	lsls	r1, r1, #12
1000fbe2:	430a      	orrs	r2, r1
1000fbe4:	0312      	lsls	r2, r2, #12
1000fbe6:	0b12      	lsrs	r2, r2, #12
1000fbe8:	e73b      	b.n	1000fa62 <__aeabi_dsub+0x9a>
1000fbea:	2301      	movs	r3, #1
1000fbec:	425b      	negs	r3, r3
1000fbee:	4698      	mov	r8, r3
1000fbf0:	44c4      	add	ip, r8
1000fbf2:	4663      	mov	r3, ip
1000fbf4:	2b00      	cmp	r3, #0
1000fbf6:	d172      	bne.n	1000fcde <__aeabi_dsub+0x316>
1000fbf8:	1a69      	subs	r1, r5, r1
1000fbfa:	428d      	cmp	r5, r1
1000fbfc:	419b      	sbcs	r3, r3
1000fbfe:	1a3f      	subs	r7, r7, r0
1000fc00:	425b      	negs	r3, r3
1000fc02:	1aff      	subs	r7, r7, r3
1000fc04:	000d      	movs	r5, r1
1000fc06:	e768      	b.n	1000fada <__aeabi_dsub+0x112>
1000fc08:	0002      	movs	r2, r0
1000fc0a:	430a      	orrs	r2, r1
1000fc0c:	d100      	bne.n	1000fc10 <__aeabi_dsub+0x248>
1000fc0e:	e707      	b.n	1000fa20 <__aeabi_dsub+0x58>
1000fc10:	2201      	movs	r2, #1
1000fc12:	4252      	negs	r2, r2
1000fc14:	4690      	mov	r8, r2
1000fc16:	44c4      	add	ip, r8
1000fc18:	4662      	mov	r2, ip
1000fc1a:	2a00      	cmp	r2, #0
1000fc1c:	d000      	beq.n	1000fc20 <__aeabi_dsub+0x258>
1000fc1e:	e0e6      	b.n	1000fdee <__aeabi_dsub+0x426>
1000fc20:	1869      	adds	r1, r5, r1
1000fc22:	42a9      	cmp	r1, r5
1000fc24:	41b6      	sbcs	r6, r6
1000fc26:	183f      	adds	r7, r7, r0
1000fc28:	4276      	negs	r6, r6
1000fc2a:	19f7      	adds	r7, r6, r7
1000fc2c:	000d      	movs	r5, r1
1000fc2e:	e7ba      	b.n	1000fba6 <__aeabi_dsub+0x1de>
1000fc30:	2e00      	cmp	r6, #0
1000fc32:	d000      	beq.n	1000fc36 <__aeabi_dsub+0x26e>
1000fc34:	e080      	b.n	1000fd38 <__aeabi_dsub+0x370>
1000fc36:	1c62      	adds	r2, r4, #1
1000fc38:	0552      	lsls	r2, r2, #21
1000fc3a:	0d52      	lsrs	r2, r2, #21
1000fc3c:	2a01      	cmp	r2, #1
1000fc3e:	dc00      	bgt.n	1000fc42 <__aeabi_dsub+0x27a>
1000fc40:	e0f9      	b.n	1000fe36 <__aeabi_dsub+0x46e>
1000fc42:	1a6a      	subs	r2, r5, r1
1000fc44:	4691      	mov	r9, r2
1000fc46:	454d      	cmp	r5, r9
1000fc48:	41b6      	sbcs	r6, r6
1000fc4a:	1a3a      	subs	r2, r7, r0
1000fc4c:	4276      	negs	r6, r6
1000fc4e:	1b92      	subs	r2, r2, r6
1000fc50:	4690      	mov	r8, r2
1000fc52:	0212      	lsls	r2, r2, #8
1000fc54:	d400      	bmi.n	1000fc58 <__aeabi_dsub+0x290>
1000fc56:	e099      	b.n	1000fd8c <__aeabi_dsub+0x3c4>
1000fc58:	1b4d      	subs	r5, r1, r5
1000fc5a:	42a9      	cmp	r1, r5
1000fc5c:	4189      	sbcs	r1, r1
1000fc5e:	1bc7      	subs	r7, r0, r7
1000fc60:	4249      	negs	r1, r1
1000fc62:	1a7a      	subs	r2, r7, r1
1000fc64:	4690      	mov	r8, r2
1000fc66:	469a      	mov	sl, r3
1000fc68:	e73c      	b.n	1000fae4 <__aeabi_dsub+0x11c>
1000fc6a:	4652      	mov	r2, sl
1000fc6c:	2301      	movs	r3, #1
1000fc6e:	2500      	movs	r5, #0
1000fc70:	4013      	ands	r3, r2
1000fc72:	2200      	movs	r2, #0
1000fc74:	e6f5      	b.n	1000fa62 <__aeabi_dsub+0x9a>
1000fc76:	0028      	movs	r0, r5
1000fc78:	f000 fa68 	bl	1001014c <__clzsi2>
1000fc7c:	3020      	adds	r0, #32
1000fc7e:	0003      	movs	r3, r0
1000fc80:	3b08      	subs	r3, #8
1000fc82:	2b1f      	cmp	r3, #31
1000fc84:	dc00      	bgt.n	1000fc88 <__aeabi_dsub+0x2c0>
1000fc86:	e739      	b.n	1000fafc <__aeabi_dsub+0x134>
1000fc88:	002a      	movs	r2, r5
1000fc8a:	3828      	subs	r0, #40	; 0x28
1000fc8c:	4082      	lsls	r2, r0
1000fc8e:	2500      	movs	r5, #0
1000fc90:	429c      	cmp	r4, r3
1000fc92:	dc00      	bgt.n	1000fc96 <__aeabi_dsub+0x2ce>
1000fc94:	e73e      	b.n	1000fb14 <__aeabi_dsub+0x14c>
1000fc96:	4f26      	ldr	r7, [pc, #152]	; (1000fd30 <__aeabi_dsub+0x368>)
1000fc98:	1ae4      	subs	r4, r4, r3
1000fc9a:	4017      	ands	r7, r2
1000fc9c:	e6c0      	b.n	1000fa20 <__aeabi_dsub+0x58>
1000fc9e:	4301      	orrs	r1, r0
1000fca0:	1e48      	subs	r0, r1, #1
1000fca2:	4181      	sbcs	r1, r0
1000fca4:	2200      	movs	r2, #0
1000fca6:	b2c9      	uxtb	r1, r1
1000fca8:	e710      	b.n	1000facc <__aeabi_dsub+0x104>
1000fcaa:	2e00      	cmp	r6, #0
1000fcac:	d000      	beq.n	1000fcb0 <__aeabi_dsub+0x2e8>
1000fcae:	e0f1      	b.n	1000fe94 <__aeabi_dsub+0x4cc>
1000fcb0:	1c62      	adds	r2, r4, #1
1000fcb2:	4694      	mov	ip, r2
1000fcb4:	0552      	lsls	r2, r2, #21
1000fcb6:	0d52      	lsrs	r2, r2, #21
1000fcb8:	2a01      	cmp	r2, #1
1000fcba:	dc00      	bgt.n	1000fcbe <__aeabi_dsub+0x2f6>
1000fcbc:	e0a0      	b.n	1000fe00 <__aeabi_dsub+0x438>
1000fcbe:	4a1b      	ldr	r2, [pc, #108]	; (1000fd2c <__aeabi_dsub+0x364>)
1000fcc0:	4594      	cmp	ip, r2
1000fcc2:	d100      	bne.n	1000fcc6 <__aeabi_dsub+0x2fe>
1000fcc4:	e0c5      	b.n	1000fe52 <__aeabi_dsub+0x48a>
1000fcc6:	1869      	adds	r1, r5, r1
1000fcc8:	42a9      	cmp	r1, r5
1000fcca:	4192      	sbcs	r2, r2
1000fccc:	183f      	adds	r7, r7, r0
1000fcce:	4252      	negs	r2, r2
1000fcd0:	19d2      	adds	r2, r2, r7
1000fcd2:	0849      	lsrs	r1, r1, #1
1000fcd4:	07d5      	lsls	r5, r2, #31
1000fcd6:	430d      	orrs	r5, r1
1000fcd8:	0857      	lsrs	r7, r2, #1
1000fcda:	4664      	mov	r4, ip
1000fcdc:	e6a0      	b.n	1000fa20 <__aeabi_dsub+0x58>
1000fcde:	4b13      	ldr	r3, [pc, #76]	; (1000fd2c <__aeabi_dsub+0x364>)
1000fce0:	429c      	cmp	r4, r3
1000fce2:	d000      	beq.n	1000fce6 <__aeabi_dsub+0x31e>
1000fce4:	e6d9      	b.n	1000fa9a <__aeabi_dsub+0xd2>
1000fce6:	e69b      	b.n	1000fa20 <__aeabi_dsub+0x58>
1000fce8:	0011      	movs	r1, r2
1000fcea:	3c1f      	subs	r4, #31
1000fcec:	40e1      	lsrs	r1, r4
1000fcee:	000c      	movs	r4, r1
1000fcf0:	2b20      	cmp	r3, #32
1000fcf2:	d100      	bne.n	1000fcf6 <__aeabi_dsub+0x32e>
1000fcf4:	e080      	b.n	1000fdf8 <__aeabi_dsub+0x430>
1000fcf6:	2140      	movs	r1, #64	; 0x40
1000fcf8:	1acb      	subs	r3, r1, r3
1000fcfa:	409a      	lsls	r2, r3
1000fcfc:	4315      	orrs	r5, r2
1000fcfe:	1e6a      	subs	r2, r5, #1
1000fd00:	4195      	sbcs	r5, r2
1000fd02:	2700      	movs	r7, #0
1000fd04:	4325      	orrs	r5, r4
1000fd06:	2400      	movs	r4, #0
1000fd08:	e71f      	b.n	1000fb4a <__aeabi_dsub+0x182>
1000fd0a:	4663      	mov	r3, ip
1000fd0c:	0002      	movs	r2, r0
1000fd0e:	3b20      	subs	r3, #32
1000fd10:	40da      	lsrs	r2, r3
1000fd12:	4663      	mov	r3, ip
1000fd14:	2b20      	cmp	r3, #32
1000fd16:	d071      	beq.n	1000fdfc <__aeabi_dsub+0x434>
1000fd18:	2340      	movs	r3, #64	; 0x40
1000fd1a:	4666      	mov	r6, ip
1000fd1c:	1b9b      	subs	r3, r3, r6
1000fd1e:	4098      	lsls	r0, r3
1000fd20:	4301      	orrs	r1, r0
1000fd22:	1e48      	subs	r0, r1, #1
1000fd24:	4181      	sbcs	r1, r0
1000fd26:	4311      	orrs	r1, r2
1000fd28:	2200      	movs	r2, #0
1000fd2a:	e6cf      	b.n	1000facc <__aeabi_dsub+0x104>
1000fd2c:	000007ff 	.word	0x000007ff
1000fd30:	ff7fffff 	.word	0xff7fffff
1000fd34:	800fffff 	.word	0x800fffff
1000fd38:	2c00      	cmp	r4, #0
1000fd3a:	d048      	beq.n	1000fdce <__aeabi_dsub+0x406>
1000fd3c:	4cca      	ldr	r4, [pc, #808]	; (10010068 <__aeabi_dsub+0x6a0>)
1000fd3e:	42a2      	cmp	r2, r4
1000fd40:	d100      	bne.n	1000fd44 <__aeabi_dsub+0x37c>
1000fd42:	e0a2      	b.n	1000fe8a <__aeabi_dsub+0x4c2>
1000fd44:	4274      	negs	r4, r6
1000fd46:	46a1      	mov	r9, r4
1000fd48:	2480      	movs	r4, #128	; 0x80
1000fd4a:	0424      	lsls	r4, r4, #16
1000fd4c:	4327      	orrs	r7, r4
1000fd4e:	464c      	mov	r4, r9
1000fd50:	2c38      	cmp	r4, #56	; 0x38
1000fd52:	dd00      	ble.n	1000fd56 <__aeabi_dsub+0x38e>
1000fd54:	e0db      	b.n	1000ff0e <__aeabi_dsub+0x546>
1000fd56:	2c1f      	cmp	r4, #31
1000fd58:	dd00      	ble.n	1000fd5c <__aeabi_dsub+0x394>
1000fd5a:	e144      	b.n	1000ffe6 <__aeabi_dsub+0x61e>
1000fd5c:	464e      	mov	r6, r9
1000fd5e:	2420      	movs	r4, #32
1000fd60:	1ba4      	subs	r4, r4, r6
1000fd62:	003e      	movs	r6, r7
1000fd64:	40a6      	lsls	r6, r4
1000fd66:	46a2      	mov	sl, r4
1000fd68:	46b0      	mov	r8, r6
1000fd6a:	464c      	mov	r4, r9
1000fd6c:	002e      	movs	r6, r5
1000fd6e:	40e6      	lsrs	r6, r4
1000fd70:	46b4      	mov	ip, r6
1000fd72:	4646      	mov	r6, r8
1000fd74:	4664      	mov	r4, ip
1000fd76:	4326      	orrs	r6, r4
1000fd78:	4654      	mov	r4, sl
1000fd7a:	40a5      	lsls	r5, r4
1000fd7c:	1e6c      	subs	r4, r5, #1
1000fd7e:	41a5      	sbcs	r5, r4
1000fd80:	0034      	movs	r4, r6
1000fd82:	432c      	orrs	r4, r5
1000fd84:	464d      	mov	r5, r9
1000fd86:	40ef      	lsrs	r7, r5
1000fd88:	1b0d      	subs	r5, r1, r4
1000fd8a:	e028      	b.n	1000fdde <__aeabi_dsub+0x416>
1000fd8c:	464a      	mov	r2, r9
1000fd8e:	4643      	mov	r3, r8
1000fd90:	464d      	mov	r5, r9
1000fd92:	431a      	orrs	r2, r3
1000fd94:	d000      	beq.n	1000fd98 <__aeabi_dsub+0x3d0>
1000fd96:	e6a5      	b.n	1000fae4 <__aeabi_dsub+0x11c>
1000fd98:	2300      	movs	r3, #0
1000fd9a:	2400      	movs	r4, #0
1000fd9c:	2500      	movs	r5, #0
1000fd9e:	e6de      	b.n	1000fb5e <__aeabi_dsub+0x196>
1000fda0:	2a1f      	cmp	r2, #31
1000fda2:	dc5a      	bgt.n	1000fe5a <__aeabi_dsub+0x492>
1000fda4:	4666      	mov	r6, ip
1000fda6:	2220      	movs	r2, #32
1000fda8:	1b92      	subs	r2, r2, r6
1000fdaa:	0006      	movs	r6, r0
1000fdac:	4096      	lsls	r6, r2
1000fdae:	4691      	mov	r9, r2
1000fdb0:	46b0      	mov	r8, r6
1000fdb2:	4662      	mov	r2, ip
1000fdb4:	000e      	movs	r6, r1
1000fdb6:	40d6      	lsrs	r6, r2
1000fdb8:	4642      	mov	r2, r8
1000fdba:	4316      	orrs	r6, r2
1000fdbc:	464a      	mov	r2, r9
1000fdbe:	4091      	lsls	r1, r2
1000fdc0:	1e4a      	subs	r2, r1, #1
1000fdc2:	4191      	sbcs	r1, r2
1000fdc4:	0002      	movs	r2, r0
1000fdc6:	4660      	mov	r0, ip
1000fdc8:	4331      	orrs	r1, r6
1000fdca:	40c2      	lsrs	r2, r0
1000fdcc:	e6e4      	b.n	1000fb98 <__aeabi_dsub+0x1d0>
1000fdce:	003c      	movs	r4, r7
1000fdd0:	432c      	orrs	r4, r5
1000fdd2:	d05a      	beq.n	1000fe8a <__aeabi_dsub+0x4c2>
1000fdd4:	43f4      	mvns	r4, r6
1000fdd6:	46a1      	mov	r9, r4
1000fdd8:	2c00      	cmp	r4, #0
1000fdda:	d152      	bne.n	1000fe82 <__aeabi_dsub+0x4ba>
1000fddc:	1b4d      	subs	r5, r1, r5
1000fdde:	42a9      	cmp	r1, r5
1000fde0:	4189      	sbcs	r1, r1
1000fde2:	1bc7      	subs	r7, r0, r7
1000fde4:	4249      	negs	r1, r1
1000fde6:	1a7f      	subs	r7, r7, r1
1000fde8:	0014      	movs	r4, r2
1000fdea:	469a      	mov	sl, r3
1000fdec:	e675      	b.n	1000fada <__aeabi_dsub+0x112>
1000fdee:	4a9e      	ldr	r2, [pc, #632]	; (10010068 <__aeabi_dsub+0x6a0>)
1000fdf0:	4294      	cmp	r4, r2
1000fdf2:	d000      	beq.n	1000fdf6 <__aeabi_dsub+0x42e>
1000fdf4:	e6c7      	b.n	1000fb86 <__aeabi_dsub+0x1be>
1000fdf6:	e613      	b.n	1000fa20 <__aeabi_dsub+0x58>
1000fdf8:	2200      	movs	r2, #0
1000fdfa:	e77f      	b.n	1000fcfc <__aeabi_dsub+0x334>
1000fdfc:	2000      	movs	r0, #0
1000fdfe:	e78f      	b.n	1000fd20 <__aeabi_dsub+0x358>
1000fe00:	2c00      	cmp	r4, #0
1000fe02:	d000      	beq.n	1000fe06 <__aeabi_dsub+0x43e>
1000fe04:	e0c8      	b.n	1000ff98 <__aeabi_dsub+0x5d0>
1000fe06:	003b      	movs	r3, r7
1000fe08:	432b      	orrs	r3, r5
1000fe0a:	d100      	bne.n	1000fe0e <__aeabi_dsub+0x446>
1000fe0c:	e10f      	b.n	1001002e <__aeabi_dsub+0x666>
1000fe0e:	0003      	movs	r3, r0
1000fe10:	430b      	orrs	r3, r1
1000fe12:	d100      	bne.n	1000fe16 <__aeabi_dsub+0x44e>
1000fe14:	e604      	b.n	1000fa20 <__aeabi_dsub+0x58>
1000fe16:	1869      	adds	r1, r5, r1
1000fe18:	42a9      	cmp	r1, r5
1000fe1a:	419b      	sbcs	r3, r3
1000fe1c:	183f      	adds	r7, r7, r0
1000fe1e:	425b      	negs	r3, r3
1000fe20:	19df      	adds	r7, r3, r7
1000fe22:	023b      	lsls	r3, r7, #8
1000fe24:	d400      	bmi.n	1000fe28 <__aeabi_dsub+0x460>
1000fe26:	e11a      	b.n	1001005e <__aeabi_dsub+0x696>
1000fe28:	4b90      	ldr	r3, [pc, #576]	; (1001006c <__aeabi_dsub+0x6a4>)
1000fe2a:	000d      	movs	r5, r1
1000fe2c:	401f      	ands	r7, r3
1000fe2e:	4664      	mov	r4, ip
1000fe30:	e5f6      	b.n	1000fa20 <__aeabi_dsub+0x58>
1000fe32:	469a      	mov	sl, r3
1000fe34:	e689      	b.n	1000fb4a <__aeabi_dsub+0x182>
1000fe36:	003a      	movs	r2, r7
1000fe38:	432a      	orrs	r2, r5
1000fe3a:	2c00      	cmp	r4, #0
1000fe3c:	d15c      	bne.n	1000fef8 <__aeabi_dsub+0x530>
1000fe3e:	2a00      	cmp	r2, #0
1000fe40:	d175      	bne.n	1000ff2e <__aeabi_dsub+0x566>
1000fe42:	0002      	movs	r2, r0
1000fe44:	430a      	orrs	r2, r1
1000fe46:	d100      	bne.n	1000fe4a <__aeabi_dsub+0x482>
1000fe48:	e0ca      	b.n	1000ffe0 <__aeabi_dsub+0x618>
1000fe4a:	0007      	movs	r7, r0
1000fe4c:	000d      	movs	r5, r1
1000fe4e:	469a      	mov	sl, r3
1000fe50:	e5e6      	b.n	1000fa20 <__aeabi_dsub+0x58>
1000fe52:	4664      	mov	r4, ip
1000fe54:	2200      	movs	r2, #0
1000fe56:	2500      	movs	r5, #0
1000fe58:	e681      	b.n	1000fb5e <__aeabi_dsub+0x196>
1000fe5a:	4662      	mov	r2, ip
1000fe5c:	0006      	movs	r6, r0
1000fe5e:	3a20      	subs	r2, #32
1000fe60:	40d6      	lsrs	r6, r2
1000fe62:	4662      	mov	r2, ip
1000fe64:	46b0      	mov	r8, r6
1000fe66:	2a20      	cmp	r2, #32
1000fe68:	d100      	bne.n	1000fe6c <__aeabi_dsub+0x4a4>
1000fe6a:	e0b7      	b.n	1000ffdc <__aeabi_dsub+0x614>
1000fe6c:	2240      	movs	r2, #64	; 0x40
1000fe6e:	4666      	mov	r6, ip
1000fe70:	1b92      	subs	r2, r2, r6
1000fe72:	4090      	lsls	r0, r2
1000fe74:	4301      	orrs	r1, r0
1000fe76:	4642      	mov	r2, r8
1000fe78:	1e48      	subs	r0, r1, #1
1000fe7a:	4181      	sbcs	r1, r0
1000fe7c:	4311      	orrs	r1, r2
1000fe7e:	2200      	movs	r2, #0
1000fe80:	e68a      	b.n	1000fb98 <__aeabi_dsub+0x1d0>
1000fe82:	4c79      	ldr	r4, [pc, #484]	; (10010068 <__aeabi_dsub+0x6a0>)
1000fe84:	42a2      	cmp	r2, r4
1000fe86:	d000      	beq.n	1000fe8a <__aeabi_dsub+0x4c2>
1000fe88:	e761      	b.n	1000fd4e <__aeabi_dsub+0x386>
1000fe8a:	0007      	movs	r7, r0
1000fe8c:	000d      	movs	r5, r1
1000fe8e:	0014      	movs	r4, r2
1000fe90:	469a      	mov	sl, r3
1000fe92:	e5c5      	b.n	1000fa20 <__aeabi_dsub+0x58>
1000fe94:	2c00      	cmp	r4, #0
1000fe96:	d141      	bne.n	1000ff1c <__aeabi_dsub+0x554>
1000fe98:	003c      	movs	r4, r7
1000fe9a:	432c      	orrs	r4, r5
1000fe9c:	d078      	beq.n	1000ff90 <__aeabi_dsub+0x5c8>
1000fe9e:	43f4      	mvns	r4, r6
1000fea0:	46a1      	mov	r9, r4
1000fea2:	2c00      	cmp	r4, #0
1000fea4:	d020      	beq.n	1000fee8 <__aeabi_dsub+0x520>
1000fea6:	4c70      	ldr	r4, [pc, #448]	; (10010068 <__aeabi_dsub+0x6a0>)
1000fea8:	42a2      	cmp	r2, r4
1000feaa:	d071      	beq.n	1000ff90 <__aeabi_dsub+0x5c8>
1000feac:	464c      	mov	r4, r9
1000feae:	2c38      	cmp	r4, #56	; 0x38
1000feb0:	dd00      	ble.n	1000feb4 <__aeabi_dsub+0x4ec>
1000feb2:	e0b2      	b.n	1001001a <__aeabi_dsub+0x652>
1000feb4:	2c1f      	cmp	r4, #31
1000feb6:	dd00      	ble.n	1000feba <__aeabi_dsub+0x4f2>
1000feb8:	e0bc      	b.n	10010034 <__aeabi_dsub+0x66c>
1000feba:	2620      	movs	r6, #32
1000febc:	1b34      	subs	r4, r6, r4
1000febe:	46a2      	mov	sl, r4
1000fec0:	003c      	movs	r4, r7
1000fec2:	4656      	mov	r6, sl
1000fec4:	40b4      	lsls	r4, r6
1000fec6:	464e      	mov	r6, r9
1000fec8:	46a0      	mov	r8, r4
1000feca:	002c      	movs	r4, r5
1000fecc:	40f4      	lsrs	r4, r6
1000fece:	46a4      	mov	ip, r4
1000fed0:	4644      	mov	r4, r8
1000fed2:	4666      	mov	r6, ip
1000fed4:	4334      	orrs	r4, r6
1000fed6:	46a4      	mov	ip, r4
1000fed8:	4654      	mov	r4, sl
1000feda:	40a5      	lsls	r5, r4
1000fedc:	4664      	mov	r4, ip
1000fede:	1e6e      	subs	r6, r5, #1
1000fee0:	41b5      	sbcs	r5, r6
1000fee2:	4325      	orrs	r5, r4
1000fee4:	464c      	mov	r4, r9
1000fee6:	40e7      	lsrs	r7, r4
1000fee8:	186d      	adds	r5, r5, r1
1000feea:	428d      	cmp	r5, r1
1000feec:	4189      	sbcs	r1, r1
1000feee:	183f      	adds	r7, r7, r0
1000fef0:	4249      	negs	r1, r1
1000fef2:	19cf      	adds	r7, r1, r7
1000fef4:	0014      	movs	r4, r2
1000fef6:	e656      	b.n	1000fba6 <__aeabi_dsub+0x1de>
1000fef8:	2a00      	cmp	r2, #0
1000fefa:	d12f      	bne.n	1000ff5c <__aeabi_dsub+0x594>
1000fefc:	0002      	movs	r2, r0
1000fefe:	430a      	orrs	r2, r1
1000ff00:	d100      	bne.n	1000ff04 <__aeabi_dsub+0x53c>
1000ff02:	e084      	b.n	1001000e <__aeabi_dsub+0x646>
1000ff04:	0007      	movs	r7, r0
1000ff06:	000d      	movs	r5, r1
1000ff08:	469a      	mov	sl, r3
1000ff0a:	4c57      	ldr	r4, [pc, #348]	; (10010068 <__aeabi_dsub+0x6a0>)
1000ff0c:	e588      	b.n	1000fa20 <__aeabi_dsub+0x58>
1000ff0e:	433d      	orrs	r5, r7
1000ff10:	1e6f      	subs	r7, r5, #1
1000ff12:	41bd      	sbcs	r5, r7
1000ff14:	b2ec      	uxtb	r4, r5
1000ff16:	2700      	movs	r7, #0
1000ff18:	1b0d      	subs	r5, r1, r4
1000ff1a:	e760      	b.n	1000fdde <__aeabi_dsub+0x416>
1000ff1c:	4c52      	ldr	r4, [pc, #328]	; (10010068 <__aeabi_dsub+0x6a0>)
1000ff1e:	42a2      	cmp	r2, r4
1000ff20:	d036      	beq.n	1000ff90 <__aeabi_dsub+0x5c8>
1000ff22:	4274      	negs	r4, r6
1000ff24:	2680      	movs	r6, #128	; 0x80
1000ff26:	0436      	lsls	r6, r6, #16
1000ff28:	46a1      	mov	r9, r4
1000ff2a:	4337      	orrs	r7, r6
1000ff2c:	e7be      	b.n	1000feac <__aeabi_dsub+0x4e4>
1000ff2e:	0002      	movs	r2, r0
1000ff30:	430a      	orrs	r2, r1
1000ff32:	d100      	bne.n	1000ff36 <__aeabi_dsub+0x56e>
1000ff34:	e574      	b.n	1000fa20 <__aeabi_dsub+0x58>
1000ff36:	1a6a      	subs	r2, r5, r1
1000ff38:	4690      	mov	r8, r2
1000ff3a:	4545      	cmp	r5, r8
1000ff3c:	41b6      	sbcs	r6, r6
1000ff3e:	1a3a      	subs	r2, r7, r0
1000ff40:	4276      	negs	r6, r6
1000ff42:	1b92      	subs	r2, r2, r6
1000ff44:	4694      	mov	ip, r2
1000ff46:	0212      	lsls	r2, r2, #8
1000ff48:	d400      	bmi.n	1000ff4c <__aeabi_dsub+0x584>
1000ff4a:	e5f7      	b.n	1000fb3c <__aeabi_dsub+0x174>
1000ff4c:	1b4d      	subs	r5, r1, r5
1000ff4e:	42a9      	cmp	r1, r5
1000ff50:	4189      	sbcs	r1, r1
1000ff52:	1bc7      	subs	r7, r0, r7
1000ff54:	4249      	negs	r1, r1
1000ff56:	1a7f      	subs	r7, r7, r1
1000ff58:	469a      	mov	sl, r3
1000ff5a:	e561      	b.n	1000fa20 <__aeabi_dsub+0x58>
1000ff5c:	0002      	movs	r2, r0
1000ff5e:	430a      	orrs	r2, r1
1000ff60:	d03a      	beq.n	1000ffd8 <__aeabi_dsub+0x610>
1000ff62:	08ed      	lsrs	r5, r5, #3
1000ff64:	077c      	lsls	r4, r7, #29
1000ff66:	432c      	orrs	r4, r5
1000ff68:	2580      	movs	r5, #128	; 0x80
1000ff6a:	08fa      	lsrs	r2, r7, #3
1000ff6c:	032d      	lsls	r5, r5, #12
1000ff6e:	422a      	tst	r2, r5
1000ff70:	d008      	beq.n	1000ff84 <__aeabi_dsub+0x5bc>
1000ff72:	08c7      	lsrs	r7, r0, #3
1000ff74:	422f      	tst	r7, r5
1000ff76:	d105      	bne.n	1000ff84 <__aeabi_dsub+0x5bc>
1000ff78:	0745      	lsls	r5, r0, #29
1000ff7a:	002c      	movs	r4, r5
1000ff7c:	003a      	movs	r2, r7
1000ff7e:	469a      	mov	sl, r3
1000ff80:	08c9      	lsrs	r1, r1, #3
1000ff82:	430c      	orrs	r4, r1
1000ff84:	0f67      	lsrs	r7, r4, #29
1000ff86:	00d2      	lsls	r2, r2, #3
1000ff88:	00e5      	lsls	r5, r4, #3
1000ff8a:	4317      	orrs	r7, r2
1000ff8c:	4c36      	ldr	r4, [pc, #216]	; (10010068 <__aeabi_dsub+0x6a0>)
1000ff8e:	e547      	b.n	1000fa20 <__aeabi_dsub+0x58>
1000ff90:	0007      	movs	r7, r0
1000ff92:	000d      	movs	r5, r1
1000ff94:	0014      	movs	r4, r2
1000ff96:	e543      	b.n	1000fa20 <__aeabi_dsub+0x58>
1000ff98:	003a      	movs	r2, r7
1000ff9a:	432a      	orrs	r2, r5
1000ff9c:	d043      	beq.n	10010026 <__aeabi_dsub+0x65e>
1000ff9e:	0002      	movs	r2, r0
1000ffa0:	430a      	orrs	r2, r1
1000ffa2:	d019      	beq.n	1000ffd8 <__aeabi_dsub+0x610>
1000ffa4:	08ed      	lsrs	r5, r5, #3
1000ffa6:	077c      	lsls	r4, r7, #29
1000ffa8:	432c      	orrs	r4, r5
1000ffaa:	2580      	movs	r5, #128	; 0x80
1000ffac:	08fa      	lsrs	r2, r7, #3
1000ffae:	032d      	lsls	r5, r5, #12
1000ffb0:	422a      	tst	r2, r5
1000ffb2:	d007      	beq.n	1000ffc4 <__aeabi_dsub+0x5fc>
1000ffb4:	08c6      	lsrs	r6, r0, #3
1000ffb6:	422e      	tst	r6, r5
1000ffb8:	d104      	bne.n	1000ffc4 <__aeabi_dsub+0x5fc>
1000ffba:	0747      	lsls	r7, r0, #29
1000ffbc:	003c      	movs	r4, r7
1000ffbe:	0032      	movs	r2, r6
1000ffc0:	08c9      	lsrs	r1, r1, #3
1000ffc2:	430c      	orrs	r4, r1
1000ffc4:	00d7      	lsls	r7, r2, #3
1000ffc6:	0f62      	lsrs	r2, r4, #29
1000ffc8:	00e5      	lsls	r5, r4, #3
1000ffca:	4317      	orrs	r7, r2
1000ffcc:	469a      	mov	sl, r3
1000ffce:	4c26      	ldr	r4, [pc, #152]	; (10010068 <__aeabi_dsub+0x6a0>)
1000ffd0:	e526      	b.n	1000fa20 <__aeabi_dsub+0x58>
1000ffd2:	2200      	movs	r2, #0
1000ffd4:	2500      	movs	r5, #0
1000ffd6:	e544      	b.n	1000fa62 <__aeabi_dsub+0x9a>
1000ffd8:	4c23      	ldr	r4, [pc, #140]	; (10010068 <__aeabi_dsub+0x6a0>)
1000ffda:	e521      	b.n	1000fa20 <__aeabi_dsub+0x58>
1000ffdc:	2000      	movs	r0, #0
1000ffde:	e749      	b.n	1000fe74 <__aeabi_dsub+0x4ac>
1000ffe0:	2300      	movs	r3, #0
1000ffe2:	2500      	movs	r5, #0
1000ffe4:	e5bb      	b.n	1000fb5e <__aeabi_dsub+0x196>
1000ffe6:	464c      	mov	r4, r9
1000ffe8:	003e      	movs	r6, r7
1000ffea:	3c20      	subs	r4, #32
1000ffec:	40e6      	lsrs	r6, r4
1000ffee:	464c      	mov	r4, r9
1000fff0:	46b4      	mov	ip, r6
1000fff2:	2c20      	cmp	r4, #32
1000fff4:	d031      	beq.n	1001005a <__aeabi_dsub+0x692>
1000fff6:	2440      	movs	r4, #64	; 0x40
1000fff8:	464e      	mov	r6, r9
1000fffa:	1ba6      	subs	r6, r4, r6
1000fffc:	40b7      	lsls	r7, r6
1000fffe:	433d      	orrs	r5, r7
10010000:	1e6c      	subs	r4, r5, #1
10010002:	41a5      	sbcs	r5, r4
10010004:	4664      	mov	r4, ip
10010006:	432c      	orrs	r4, r5
10010008:	2700      	movs	r7, #0
1001000a:	1b0d      	subs	r5, r1, r4
1001000c:	e6e7      	b.n	1000fdde <__aeabi_dsub+0x416>
1001000e:	2280      	movs	r2, #128	; 0x80
10010010:	2300      	movs	r3, #0
10010012:	0312      	lsls	r2, r2, #12
10010014:	4c14      	ldr	r4, [pc, #80]	; (10010068 <__aeabi_dsub+0x6a0>)
10010016:	2500      	movs	r5, #0
10010018:	e5a1      	b.n	1000fb5e <__aeabi_dsub+0x196>
1001001a:	433d      	orrs	r5, r7
1001001c:	1e6f      	subs	r7, r5, #1
1001001e:	41bd      	sbcs	r5, r7
10010020:	2700      	movs	r7, #0
10010022:	b2ed      	uxtb	r5, r5
10010024:	e760      	b.n	1000fee8 <__aeabi_dsub+0x520>
10010026:	0007      	movs	r7, r0
10010028:	000d      	movs	r5, r1
1001002a:	4c0f      	ldr	r4, [pc, #60]	; (10010068 <__aeabi_dsub+0x6a0>)
1001002c:	e4f8      	b.n	1000fa20 <__aeabi_dsub+0x58>
1001002e:	0007      	movs	r7, r0
10010030:	000d      	movs	r5, r1
10010032:	e4f5      	b.n	1000fa20 <__aeabi_dsub+0x58>
10010034:	464e      	mov	r6, r9
10010036:	003c      	movs	r4, r7
10010038:	3e20      	subs	r6, #32
1001003a:	40f4      	lsrs	r4, r6
1001003c:	46a0      	mov	r8, r4
1001003e:	464c      	mov	r4, r9
10010040:	2c20      	cmp	r4, #32
10010042:	d00e      	beq.n	10010062 <__aeabi_dsub+0x69a>
10010044:	2440      	movs	r4, #64	; 0x40
10010046:	464e      	mov	r6, r9
10010048:	1ba4      	subs	r4, r4, r6
1001004a:	40a7      	lsls	r7, r4
1001004c:	433d      	orrs	r5, r7
1001004e:	1e6f      	subs	r7, r5, #1
10010050:	41bd      	sbcs	r5, r7
10010052:	4644      	mov	r4, r8
10010054:	2700      	movs	r7, #0
10010056:	4325      	orrs	r5, r4
10010058:	e746      	b.n	1000fee8 <__aeabi_dsub+0x520>
1001005a:	2700      	movs	r7, #0
1001005c:	e7cf      	b.n	1000fffe <__aeabi_dsub+0x636>
1001005e:	000d      	movs	r5, r1
10010060:	e573      	b.n	1000fb4a <__aeabi_dsub+0x182>
10010062:	2700      	movs	r7, #0
10010064:	e7f2      	b.n	1001004c <__aeabi_dsub+0x684>
10010066:	46c0      	nop			; (mov r8, r8)
10010068:	000007ff 	.word	0x000007ff
1001006c:	ff7fffff 	.word	0xff7fffff

10010070 <__aeabi_d2iz>:
10010070:	030b      	lsls	r3, r1, #12
10010072:	b530      	push	{r4, r5, lr}
10010074:	4d13      	ldr	r5, [pc, #76]	; (100100c4 <__aeabi_d2iz+0x54>)
10010076:	0b1a      	lsrs	r2, r3, #12
10010078:	004b      	lsls	r3, r1, #1
1001007a:	0d5b      	lsrs	r3, r3, #21
1001007c:	0fc9      	lsrs	r1, r1, #31
1001007e:	2400      	movs	r4, #0
10010080:	42ab      	cmp	r3, r5
10010082:	dd11      	ble.n	100100a8 <__aeabi_d2iz+0x38>
10010084:	4c10      	ldr	r4, [pc, #64]	; (100100c8 <__aeabi_d2iz+0x58>)
10010086:	42a3      	cmp	r3, r4
10010088:	dc10      	bgt.n	100100ac <__aeabi_d2iz+0x3c>
1001008a:	2480      	movs	r4, #128	; 0x80
1001008c:	0364      	lsls	r4, r4, #13
1001008e:	4322      	orrs	r2, r4
10010090:	4c0e      	ldr	r4, [pc, #56]	; (100100cc <__aeabi_d2iz+0x5c>)
10010092:	1ae4      	subs	r4, r4, r3
10010094:	2c1f      	cmp	r4, #31
10010096:	dd0c      	ble.n	100100b2 <__aeabi_d2iz+0x42>
10010098:	480d      	ldr	r0, [pc, #52]	; (100100d0 <__aeabi_d2iz+0x60>)
1001009a:	1ac3      	subs	r3, r0, r3
1001009c:	40da      	lsrs	r2, r3
1001009e:	0013      	movs	r3, r2
100100a0:	425c      	negs	r4, r3
100100a2:	2900      	cmp	r1, #0
100100a4:	d100      	bne.n	100100a8 <__aeabi_d2iz+0x38>
100100a6:	001c      	movs	r4, r3
100100a8:	0020      	movs	r0, r4
100100aa:	bd30      	pop	{r4, r5, pc}
100100ac:	4b09      	ldr	r3, [pc, #36]	; (100100d4 <__aeabi_d2iz+0x64>)
100100ae:	18cc      	adds	r4, r1, r3
100100b0:	e7fa      	b.n	100100a8 <__aeabi_d2iz+0x38>
100100b2:	40e0      	lsrs	r0, r4
100100b4:	4c08      	ldr	r4, [pc, #32]	; (100100d8 <__aeabi_d2iz+0x68>)
100100b6:	46a4      	mov	ip, r4
100100b8:	4463      	add	r3, ip
100100ba:	409a      	lsls	r2, r3
100100bc:	0013      	movs	r3, r2
100100be:	4303      	orrs	r3, r0
100100c0:	e7ee      	b.n	100100a0 <__aeabi_d2iz+0x30>
100100c2:	46c0      	nop			; (mov r8, r8)
100100c4:	000003fe 	.word	0x000003fe
100100c8:	0000041d 	.word	0x0000041d
100100cc:	00000433 	.word	0x00000433
100100d0:	00000413 	.word	0x00000413
100100d4:	7fffffff 	.word	0x7fffffff
100100d8:	fffffbed 	.word	0xfffffbed

100100dc <__aeabi_ui2d>:
100100dc:	b570      	push	{r4, r5, r6, lr}
100100de:	1e05      	subs	r5, r0, #0
100100e0:	d028      	beq.n	10010134 <__aeabi_ui2d+0x58>
100100e2:	f000 f833 	bl	1001014c <__clzsi2>
100100e6:	4b15      	ldr	r3, [pc, #84]	; (1001013c <__aeabi_ui2d+0x60>)
100100e8:	4a15      	ldr	r2, [pc, #84]	; (10010140 <__aeabi_ui2d+0x64>)
100100ea:	1a1b      	subs	r3, r3, r0
100100ec:	1ad2      	subs	r2, r2, r3
100100ee:	2a1f      	cmp	r2, #31
100100f0:	dd16      	ble.n	10010120 <__aeabi_ui2d+0x44>
100100f2:	002c      	movs	r4, r5
100100f4:	4a13      	ldr	r2, [pc, #76]	; (10010144 <__aeabi_ui2d+0x68>)
100100f6:	2500      	movs	r5, #0
100100f8:	1ad2      	subs	r2, r2, r3
100100fa:	4094      	lsls	r4, r2
100100fc:	055a      	lsls	r2, r3, #21
100100fe:	0324      	lsls	r4, r4, #12
10010100:	0b24      	lsrs	r4, r4, #12
10010102:	0d52      	lsrs	r2, r2, #21
10010104:	2100      	movs	r1, #0
10010106:	0324      	lsls	r4, r4, #12
10010108:	0d0b      	lsrs	r3, r1, #20
1001010a:	0b24      	lsrs	r4, r4, #12
1001010c:	051b      	lsls	r3, r3, #20
1001010e:	4323      	orrs	r3, r4
10010110:	4c0d      	ldr	r4, [pc, #52]	; (10010148 <__aeabi_ui2d+0x6c>)
10010112:	0512      	lsls	r2, r2, #20
10010114:	4023      	ands	r3, r4
10010116:	4313      	orrs	r3, r2
10010118:	005b      	lsls	r3, r3, #1
1001011a:	0028      	movs	r0, r5
1001011c:	0859      	lsrs	r1, r3, #1
1001011e:	bd70      	pop	{r4, r5, r6, pc}
10010120:	210b      	movs	r1, #11
10010122:	002c      	movs	r4, r5
10010124:	1a08      	subs	r0, r1, r0
10010126:	40c4      	lsrs	r4, r0
10010128:	4095      	lsls	r5, r2
1001012a:	0324      	lsls	r4, r4, #12
1001012c:	055a      	lsls	r2, r3, #21
1001012e:	0b24      	lsrs	r4, r4, #12
10010130:	0d52      	lsrs	r2, r2, #21
10010132:	e7e7      	b.n	10010104 <__aeabi_ui2d+0x28>
10010134:	2200      	movs	r2, #0
10010136:	2400      	movs	r4, #0
10010138:	e7e4      	b.n	10010104 <__aeabi_ui2d+0x28>
1001013a:	46c0      	nop			; (mov r8, r8)
1001013c:	0000041e 	.word	0x0000041e
10010140:	00000433 	.word	0x00000433
10010144:	00000413 	.word	0x00000413
10010148:	800fffff 	.word	0x800fffff

1001014c <__clzsi2>:
1001014c:	211c      	movs	r1, #28
1001014e:	2301      	movs	r3, #1
10010150:	041b      	lsls	r3, r3, #16
10010152:	4298      	cmp	r0, r3
10010154:	d301      	bcc.n	1001015a <__clzsi2+0xe>
10010156:	0c00      	lsrs	r0, r0, #16
10010158:	3910      	subs	r1, #16
1001015a:	0a1b      	lsrs	r3, r3, #8
1001015c:	4298      	cmp	r0, r3
1001015e:	d301      	bcc.n	10010164 <__clzsi2+0x18>
10010160:	0a00      	lsrs	r0, r0, #8
10010162:	3908      	subs	r1, #8
10010164:	091b      	lsrs	r3, r3, #4
10010166:	4298      	cmp	r0, r3
10010168:	d301      	bcc.n	1001016e <__clzsi2+0x22>
1001016a:	0900      	lsrs	r0, r0, #4
1001016c:	3904      	subs	r1, #4
1001016e:	a202      	add	r2, pc, #8	; (adr r2, 10010178 <__clzsi2+0x2c>)
10010170:	5c10      	ldrb	r0, [r2, r0]
10010172:	1840      	adds	r0, r0, r1
10010174:	4770      	bx	lr
10010176:	46c0      	nop			; (mov r8, r8)
10010178:	02020304 	.word	0x02020304
1001017c:	01010101 	.word	0x01010101
	...

10010188 <__aeabi_lmul>:
10010188:	b5f0      	push	{r4, r5, r6, r7, lr}
1001018a:	464f      	mov	r7, r9
1001018c:	4646      	mov	r6, r8
1001018e:	b4c0      	push	{r6, r7}
10010190:	0416      	lsls	r6, r2, #16
10010192:	0c36      	lsrs	r6, r6, #16
10010194:	4699      	mov	r9, r3
10010196:	0033      	movs	r3, r6
10010198:	0405      	lsls	r5, r0, #16
1001019a:	0c2c      	lsrs	r4, r5, #16
1001019c:	0c07      	lsrs	r7, r0, #16
1001019e:	0c15      	lsrs	r5, r2, #16
100101a0:	4363      	muls	r3, r4
100101a2:	437e      	muls	r6, r7
100101a4:	436f      	muls	r7, r5
100101a6:	4365      	muls	r5, r4
100101a8:	0c1c      	lsrs	r4, r3, #16
100101aa:	19ad      	adds	r5, r5, r6
100101ac:	1964      	adds	r4, r4, r5
100101ae:	469c      	mov	ip, r3
100101b0:	42a6      	cmp	r6, r4
100101b2:	d903      	bls.n	100101bc <__aeabi_lmul+0x34>
100101b4:	2380      	movs	r3, #128	; 0x80
100101b6:	025b      	lsls	r3, r3, #9
100101b8:	4698      	mov	r8, r3
100101ba:	4447      	add	r7, r8
100101bc:	4663      	mov	r3, ip
100101be:	0c25      	lsrs	r5, r4, #16
100101c0:	19ef      	adds	r7, r5, r7
100101c2:	041d      	lsls	r5, r3, #16
100101c4:	464b      	mov	r3, r9
100101c6:	434a      	muls	r2, r1
100101c8:	4343      	muls	r3, r0
100101ca:	0c2d      	lsrs	r5, r5, #16
100101cc:	0424      	lsls	r4, r4, #16
100101ce:	1964      	adds	r4, r4, r5
100101d0:	1899      	adds	r1, r3, r2
100101d2:	19c9      	adds	r1, r1, r7
100101d4:	0020      	movs	r0, r4
100101d6:	bc0c      	pop	{r2, r3}
100101d8:	4690      	mov	r8, r2
100101da:	4699      	mov	r9, r3
100101dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100101de:	46c0      	nop			; (mov r8, r8)

100101e0 <__libc_init_array>:
100101e0:	4b0e      	ldr	r3, [pc, #56]	; (1001021c <__libc_init_array+0x3c>)
100101e2:	b570      	push	{r4, r5, r6, lr}
100101e4:	2500      	movs	r5, #0
100101e6:	001e      	movs	r6, r3
100101e8:	4c0d      	ldr	r4, [pc, #52]	; (10010220 <__libc_init_array+0x40>)
100101ea:	1ae4      	subs	r4, r4, r3
100101ec:	10a4      	asrs	r4, r4, #2
100101ee:	42a5      	cmp	r5, r4
100101f0:	d004      	beq.n	100101fc <__libc_init_array+0x1c>
100101f2:	00ab      	lsls	r3, r5, #2
100101f4:	58f3      	ldr	r3, [r6, r3]
100101f6:	4798      	blx	r3
100101f8:	3501      	adds	r5, #1
100101fa:	e7f8      	b.n	100101ee <__libc_init_array+0xe>
100101fc:	f002 f8ee 	bl	100123dc <_init>
10010200:	4b08      	ldr	r3, [pc, #32]	; (10010224 <__libc_init_array+0x44>)
10010202:	2500      	movs	r5, #0
10010204:	001e      	movs	r6, r3
10010206:	4c08      	ldr	r4, [pc, #32]	; (10010228 <__libc_init_array+0x48>)
10010208:	1ae4      	subs	r4, r4, r3
1001020a:	10a4      	asrs	r4, r4, #2
1001020c:	42a5      	cmp	r5, r4
1001020e:	d004      	beq.n	1001021a <__libc_init_array+0x3a>
10010210:	00ab      	lsls	r3, r5, #2
10010212:	58f3      	ldr	r3, [r6, r3]
10010214:	4798      	blx	r3
10010216:	3501      	adds	r5, #1
10010218:	e7f8      	b.n	1001020c <__libc_init_array+0x2c>
1001021a:	bd70      	pop	{r4, r5, r6, pc}
1001021c:	100123e8 	.word	0x100123e8
10010220:	100123e8 	.word	0x100123e8
10010224:	100123e8 	.word	0x100123e8
10010228:	100123ec 	.word	0x100123ec

1001022c <malloc>:
1001022c:	b510      	push	{r4, lr}
1001022e:	4b03      	ldr	r3, [pc, #12]	; (1001023c <malloc+0x10>)
10010230:	0001      	movs	r1, r0
10010232:	6818      	ldr	r0, [r3, #0]
10010234:	f000 f86a 	bl	1001030c <_malloc_r>
10010238:	bd10      	pop	{r4, pc}
1001023a:	46c0      	nop			; (mov r8, r8)
1001023c:	100124a4 	.word	0x100124a4

10010240 <memcmp>:
10010240:	b530      	push	{r4, r5, lr}
10010242:	2400      	movs	r4, #0
10010244:	42a2      	cmp	r2, r4
10010246:	d008      	beq.n	1001025a <memcmp+0x1a>
10010248:	5d03      	ldrb	r3, [r0, r4]
1001024a:	1c65      	adds	r5, r4, #1
1001024c:	5d0c      	ldrb	r4, [r1, r4]
1001024e:	42a3      	cmp	r3, r4
10010250:	d001      	beq.n	10010256 <memcmp+0x16>
10010252:	1b18      	subs	r0, r3, r4
10010254:	e002      	b.n	1001025c <memcmp+0x1c>
10010256:	002c      	movs	r4, r5
10010258:	e7f4      	b.n	10010244 <memcmp+0x4>
1001025a:	2000      	movs	r0, #0
1001025c:	bd30      	pop	{r4, r5, pc}

1001025e <memcpy>:
1001025e:	2300      	movs	r3, #0
10010260:	b510      	push	{r4, lr}
10010262:	429a      	cmp	r2, r3
10010264:	d003      	beq.n	1001026e <memcpy+0x10>
10010266:	5ccc      	ldrb	r4, [r1, r3]
10010268:	54c4      	strb	r4, [r0, r3]
1001026a:	3301      	adds	r3, #1
1001026c:	e7f9      	b.n	10010262 <memcpy+0x4>
1001026e:	bd10      	pop	{r4, pc}

10010270 <memset>:
10010270:	0003      	movs	r3, r0
10010272:	1882      	adds	r2, r0, r2
10010274:	4293      	cmp	r3, r2
10010276:	d002      	beq.n	1001027e <memset+0xe>
10010278:	7019      	strb	r1, [r3, #0]
1001027a:	3301      	adds	r3, #1
1001027c:	e7fa      	b.n	10010274 <memset+0x4>
1001027e:	4770      	bx	lr

10010280 <_free_r>:
10010280:	b530      	push	{r4, r5, lr}
10010282:	2900      	cmp	r1, #0
10010284:	d03e      	beq.n	10010304 <_free_r+0x84>
10010286:	3904      	subs	r1, #4
10010288:	680b      	ldr	r3, [r1, #0]
1001028a:	2b00      	cmp	r3, #0
1001028c:	da00      	bge.n	10010290 <_free_r+0x10>
1001028e:	18c9      	adds	r1, r1, r3
10010290:	4a1d      	ldr	r2, [pc, #116]	; (10010308 <_free_r+0x88>)
10010292:	6813      	ldr	r3, [r2, #0]
10010294:	0014      	movs	r4, r2
10010296:	2b00      	cmp	r3, #0
10010298:	d102      	bne.n	100102a0 <_free_r+0x20>
1001029a:	604b      	str	r3, [r1, #4]
1001029c:	6011      	str	r1, [r2, #0]
1001029e:	e031      	b.n	10010304 <_free_r+0x84>
100102a0:	428b      	cmp	r3, r1
100102a2:	d90d      	bls.n	100102c0 <_free_r+0x40>
100102a4:	680a      	ldr	r2, [r1, #0]
100102a6:	1888      	adds	r0, r1, r2
100102a8:	4283      	cmp	r3, r0
100102aa:	d103      	bne.n	100102b4 <_free_r+0x34>
100102ac:	6818      	ldr	r0, [r3, #0]
100102ae:	685b      	ldr	r3, [r3, #4]
100102b0:	1882      	adds	r2, r0, r2
100102b2:	600a      	str	r2, [r1, #0]
100102b4:	604b      	str	r3, [r1, #4]
100102b6:	6021      	str	r1, [r4, #0]
100102b8:	e024      	b.n	10010304 <_free_r+0x84>
100102ba:	428a      	cmp	r2, r1
100102bc:	d803      	bhi.n	100102c6 <_free_r+0x46>
100102be:	0013      	movs	r3, r2
100102c0:	685a      	ldr	r2, [r3, #4]
100102c2:	2a00      	cmp	r2, #0
100102c4:	d1f9      	bne.n	100102ba <_free_r+0x3a>
100102c6:	681d      	ldr	r5, [r3, #0]
100102c8:	195c      	adds	r4, r3, r5
100102ca:	428c      	cmp	r4, r1
100102cc:	d10b      	bne.n	100102e6 <_free_r+0x66>
100102ce:	6809      	ldr	r1, [r1, #0]
100102d0:	1869      	adds	r1, r5, r1
100102d2:	1858      	adds	r0, r3, r1
100102d4:	6019      	str	r1, [r3, #0]
100102d6:	4282      	cmp	r2, r0
100102d8:	d114      	bne.n	10010304 <_free_r+0x84>
100102da:	6810      	ldr	r0, [r2, #0]
100102dc:	6852      	ldr	r2, [r2, #4]
100102de:	1841      	adds	r1, r0, r1
100102e0:	6019      	str	r1, [r3, #0]
100102e2:	605a      	str	r2, [r3, #4]
100102e4:	e00e      	b.n	10010304 <_free_r+0x84>
100102e6:	428c      	cmp	r4, r1
100102e8:	d902      	bls.n	100102f0 <_free_r+0x70>
100102ea:	230c      	movs	r3, #12
100102ec:	6003      	str	r3, [r0, #0]
100102ee:	e009      	b.n	10010304 <_free_r+0x84>
100102f0:	6808      	ldr	r0, [r1, #0]
100102f2:	180c      	adds	r4, r1, r0
100102f4:	42a2      	cmp	r2, r4
100102f6:	d103      	bne.n	10010300 <_free_r+0x80>
100102f8:	6814      	ldr	r4, [r2, #0]
100102fa:	6852      	ldr	r2, [r2, #4]
100102fc:	1820      	adds	r0, r4, r0
100102fe:	6008      	str	r0, [r1, #0]
10010300:	604a      	str	r2, [r1, #4]
10010302:	6059      	str	r1, [r3, #4]
10010304:	bd30      	pop	{r4, r5, pc}
10010306:	46c0      	nop			; (mov r8, r8)
10010308:	10013a88 	.word	0x10013a88

1001030c <_malloc_r>:
1001030c:	2303      	movs	r3, #3
1001030e:	b570      	push	{r4, r5, r6, lr}
10010310:	1ccd      	adds	r5, r1, #3
10010312:	439d      	bics	r5, r3
10010314:	3508      	adds	r5, #8
10010316:	0006      	movs	r6, r0
10010318:	2d0c      	cmp	r5, #12
1001031a:	d201      	bcs.n	10010320 <_malloc_r+0x14>
1001031c:	250c      	movs	r5, #12
1001031e:	e005      	b.n	1001032c <_malloc_r+0x20>
10010320:	2d00      	cmp	r5, #0
10010322:	da03      	bge.n	1001032c <_malloc_r+0x20>
10010324:	230c      	movs	r3, #12
10010326:	2000      	movs	r0, #0
10010328:	6033      	str	r3, [r6, #0]
1001032a:	e040      	b.n	100103ae <_malloc_r+0xa2>
1001032c:	42a9      	cmp	r1, r5
1001032e:	d8f9      	bhi.n	10010324 <_malloc_r+0x18>
10010330:	4b1f      	ldr	r3, [pc, #124]	; (100103b0 <_malloc_r+0xa4>)
10010332:	681c      	ldr	r4, [r3, #0]
10010334:	001a      	movs	r2, r3
10010336:	0021      	movs	r1, r4
10010338:	2900      	cmp	r1, #0
1001033a:	d013      	beq.n	10010364 <_malloc_r+0x58>
1001033c:	680b      	ldr	r3, [r1, #0]
1001033e:	1b5b      	subs	r3, r3, r5
10010340:	d40d      	bmi.n	1001035e <_malloc_r+0x52>
10010342:	2b0b      	cmp	r3, #11
10010344:	d902      	bls.n	1001034c <_malloc_r+0x40>
10010346:	600b      	str	r3, [r1, #0]
10010348:	18cc      	adds	r4, r1, r3
1001034a:	e01e      	b.n	1001038a <_malloc_r+0x7e>
1001034c:	428c      	cmp	r4, r1
1001034e:	d102      	bne.n	10010356 <_malloc_r+0x4a>
10010350:	6863      	ldr	r3, [r4, #4]
10010352:	6013      	str	r3, [r2, #0]
10010354:	e01a      	b.n	1001038c <_malloc_r+0x80>
10010356:	684b      	ldr	r3, [r1, #4]
10010358:	6063      	str	r3, [r4, #4]
1001035a:	000c      	movs	r4, r1
1001035c:	e016      	b.n	1001038c <_malloc_r+0x80>
1001035e:	000c      	movs	r4, r1
10010360:	6849      	ldr	r1, [r1, #4]
10010362:	e7e9      	b.n	10010338 <_malloc_r+0x2c>
10010364:	4c13      	ldr	r4, [pc, #76]	; (100103b4 <_malloc_r+0xa8>)
10010366:	6823      	ldr	r3, [r4, #0]
10010368:	2b00      	cmp	r3, #0
1001036a:	d103      	bne.n	10010374 <_malloc_r+0x68>
1001036c:	0030      	movs	r0, r6
1001036e:	f000 f8f9 	bl	10010564 <_sbrk_r>
10010372:	6020      	str	r0, [r4, #0]
10010374:	0029      	movs	r1, r5
10010376:	0030      	movs	r0, r6
10010378:	f000 f8f4 	bl	10010564 <_sbrk_r>
1001037c:	1c43      	adds	r3, r0, #1
1001037e:	d0d1      	beq.n	10010324 <_malloc_r+0x18>
10010380:	2303      	movs	r3, #3
10010382:	1cc4      	adds	r4, r0, #3
10010384:	439c      	bics	r4, r3
10010386:	42a0      	cmp	r0, r4
10010388:	d10a      	bne.n	100103a0 <_malloc_r+0x94>
1001038a:	6025      	str	r5, [r4, #0]
1001038c:	0020      	movs	r0, r4
1001038e:	2207      	movs	r2, #7
10010390:	300b      	adds	r0, #11
10010392:	1d23      	adds	r3, r4, #4
10010394:	4390      	bics	r0, r2
10010396:	1ac3      	subs	r3, r0, r3
10010398:	d009      	beq.n	100103ae <_malloc_r+0xa2>
1001039a:	425a      	negs	r2, r3
1001039c:	50e2      	str	r2, [r4, r3]
1001039e:	e006      	b.n	100103ae <_malloc_r+0xa2>
100103a0:	1a21      	subs	r1, r4, r0
100103a2:	0030      	movs	r0, r6
100103a4:	f000 f8de 	bl	10010564 <_sbrk_r>
100103a8:	1c43      	adds	r3, r0, #1
100103aa:	d1ee      	bne.n	1001038a <_malloc_r+0x7e>
100103ac:	e7ba      	b.n	10010324 <_malloc_r+0x18>
100103ae:	bd70      	pop	{r4, r5, r6, pc}
100103b0:	10013a88 	.word	0x10013a88
100103b4:	10013a84 	.word	0x10013a84

100103b8 <iprintf>:
100103b8:	b40f      	push	{r0, r1, r2, r3}
100103ba:	4b0b      	ldr	r3, [pc, #44]	; (100103e8 <iprintf+0x30>)
100103bc:	b513      	push	{r0, r1, r4, lr}
100103be:	681c      	ldr	r4, [r3, #0]
100103c0:	2c00      	cmp	r4, #0
100103c2:	d005      	beq.n	100103d0 <iprintf+0x18>
100103c4:	69a3      	ldr	r3, [r4, #24]
100103c6:	2b00      	cmp	r3, #0
100103c8:	d102      	bne.n	100103d0 <iprintf+0x18>
100103ca:	0020      	movs	r0, r4
100103cc:	f000 fb58 	bl	10010a80 <__sinit>
100103d0:	ab05      	add	r3, sp, #20
100103d2:	9a04      	ldr	r2, [sp, #16]
100103d4:	68a1      	ldr	r1, [r4, #8]
100103d6:	0020      	movs	r0, r4
100103d8:	9301      	str	r3, [sp, #4]
100103da:	f000 fc71 	bl	10010cc0 <_vfiprintf_r>
100103de:	bc16      	pop	{r1, r2, r4}
100103e0:	bc08      	pop	{r3}
100103e2:	b004      	add	sp, #16
100103e4:	4718      	bx	r3
100103e6:	46c0      	nop			; (mov r8, r8)
100103e8:	100124a4 	.word	0x100124a4

100103ec <putchar>:
100103ec:	4b08      	ldr	r3, [pc, #32]	; (10010410 <putchar+0x24>)
100103ee:	b570      	push	{r4, r5, r6, lr}
100103f0:	681c      	ldr	r4, [r3, #0]
100103f2:	0005      	movs	r5, r0
100103f4:	2c00      	cmp	r4, #0
100103f6:	d005      	beq.n	10010404 <putchar+0x18>
100103f8:	69a3      	ldr	r3, [r4, #24]
100103fa:	2b00      	cmp	r3, #0
100103fc:	d102      	bne.n	10010404 <putchar+0x18>
100103fe:	0020      	movs	r0, r4
10010400:	f000 fb3e 	bl	10010a80 <__sinit>
10010404:	0029      	movs	r1, r5
10010406:	68a2      	ldr	r2, [r4, #8]
10010408:	0020      	movs	r0, r4
1001040a:	f000 ff05 	bl	10011218 <_putc_r>
1001040e:	bd70      	pop	{r4, r5, r6, pc}
10010410:	100124a4 	.word	0x100124a4

10010414 <_puts_r>:
10010414:	b570      	push	{r4, r5, r6, lr}
10010416:	0005      	movs	r5, r0
10010418:	000e      	movs	r6, r1
1001041a:	2800      	cmp	r0, #0
1001041c:	d004      	beq.n	10010428 <_puts_r+0x14>
1001041e:	6983      	ldr	r3, [r0, #24]
10010420:	2b00      	cmp	r3, #0
10010422:	d101      	bne.n	10010428 <_puts_r+0x14>
10010424:	f000 fb2c 	bl	10010a80 <__sinit>
10010428:	69ab      	ldr	r3, [r5, #24]
1001042a:	68ac      	ldr	r4, [r5, #8]
1001042c:	2b00      	cmp	r3, #0
1001042e:	d102      	bne.n	10010436 <_puts_r+0x22>
10010430:	0028      	movs	r0, r5
10010432:	f000 fb25 	bl	10010a80 <__sinit>
10010436:	4b25      	ldr	r3, [pc, #148]	; (100104cc <_puts_r+0xb8>)
10010438:	429c      	cmp	r4, r3
1001043a:	d101      	bne.n	10010440 <_puts_r+0x2c>
1001043c:	686c      	ldr	r4, [r5, #4]
1001043e:	e008      	b.n	10010452 <_puts_r+0x3e>
10010440:	4b23      	ldr	r3, [pc, #140]	; (100104d0 <_puts_r+0xbc>)
10010442:	429c      	cmp	r4, r3
10010444:	d101      	bne.n	1001044a <_puts_r+0x36>
10010446:	68ac      	ldr	r4, [r5, #8]
10010448:	e003      	b.n	10010452 <_puts_r+0x3e>
1001044a:	4b22      	ldr	r3, [pc, #136]	; (100104d4 <_puts_r+0xc0>)
1001044c:	429c      	cmp	r4, r3
1001044e:	d100      	bne.n	10010452 <_puts_r+0x3e>
10010450:	68ec      	ldr	r4, [r5, #12]
10010452:	89a3      	ldrh	r3, [r4, #12]
10010454:	071b      	lsls	r3, r3, #28
10010456:	d502      	bpl.n	1001045e <_puts_r+0x4a>
10010458:	6923      	ldr	r3, [r4, #16]
1001045a:	2b00      	cmp	r3, #0
1001045c:	d111      	bne.n	10010482 <_puts_r+0x6e>
1001045e:	0021      	movs	r1, r4
10010460:	0028      	movs	r0, r5
10010462:	f000 f9a3 	bl	100107ac <__swsetup_r>
10010466:	2800      	cmp	r0, #0
10010468:	d00b      	beq.n	10010482 <_puts_r+0x6e>
1001046a:	2001      	movs	r0, #1
1001046c:	4240      	negs	r0, r0
1001046e:	e02b      	b.n	100104c8 <_puts_r+0xb4>
10010470:	3b01      	subs	r3, #1
10010472:	3601      	adds	r6, #1
10010474:	60a3      	str	r3, [r4, #8]
10010476:	2b00      	cmp	r3, #0
10010478:	db08      	blt.n	1001048c <_puts_r+0x78>
1001047a:	6823      	ldr	r3, [r4, #0]
1001047c:	1c5a      	adds	r2, r3, #1
1001047e:	6022      	str	r2, [r4, #0]
10010480:	7019      	strb	r1, [r3, #0]
10010482:	7831      	ldrb	r1, [r6, #0]
10010484:	68a3      	ldr	r3, [r4, #8]
10010486:	2900      	cmp	r1, #0
10010488:	d1f2      	bne.n	10010470 <_puts_r+0x5c>
1001048a:	e00b      	b.n	100104a4 <_puts_r+0x90>
1001048c:	69a2      	ldr	r2, [r4, #24]
1001048e:	4293      	cmp	r3, r2
10010490:	db01      	blt.n	10010496 <_puts_r+0x82>
10010492:	290a      	cmp	r1, #10
10010494:	d1f1      	bne.n	1001047a <_puts_r+0x66>
10010496:	0022      	movs	r2, r4
10010498:	0028      	movs	r0, r5
1001049a:	f000 f92f 	bl	100106fc <__swbuf_r>
1001049e:	1c43      	adds	r3, r0, #1
100104a0:	d1ef      	bne.n	10010482 <_puts_r+0x6e>
100104a2:	e7e2      	b.n	1001046a <_puts_r+0x56>
100104a4:	3b01      	subs	r3, #1
100104a6:	60a3      	str	r3, [r4, #8]
100104a8:	2b00      	cmp	r3, #0
100104aa:	da08      	bge.n	100104be <_puts_r+0xaa>
100104ac:	0022      	movs	r2, r4
100104ae:	310a      	adds	r1, #10
100104b0:	0028      	movs	r0, r5
100104b2:	f000 f923 	bl	100106fc <__swbuf_r>
100104b6:	1c43      	adds	r3, r0, #1
100104b8:	d0d7      	beq.n	1001046a <_puts_r+0x56>
100104ba:	200a      	movs	r0, #10
100104bc:	e004      	b.n	100104c8 <_puts_r+0xb4>
100104be:	200a      	movs	r0, #10
100104c0:	6823      	ldr	r3, [r4, #0]
100104c2:	1c5a      	adds	r2, r3, #1
100104c4:	6022      	str	r2, [r4, #0]
100104c6:	7018      	strb	r0, [r3, #0]
100104c8:	bd70      	pop	{r4, r5, r6, pc}
100104ca:	46c0      	nop			; (mov r8, r8)
100104cc:	10012348 	.word	0x10012348
100104d0:	10012368 	.word	0x10012368
100104d4:	10012388 	.word	0x10012388

100104d8 <puts>:
100104d8:	b510      	push	{r4, lr}
100104da:	4b03      	ldr	r3, [pc, #12]	; (100104e8 <puts+0x10>)
100104dc:	0001      	movs	r1, r0
100104de:	6818      	ldr	r0, [r3, #0]
100104e0:	f7ff ff98 	bl	10010414 <_puts_r>
100104e4:	bd10      	pop	{r4, pc}
100104e6:	46c0      	nop			; (mov r8, r8)
100104e8:	100124a4 	.word	0x100124a4

100104ec <rand>:
100104ec:	4b15      	ldr	r3, [pc, #84]	; (10010544 <rand+0x58>)
100104ee:	b510      	push	{r4, lr}
100104f0:	681c      	ldr	r4, [r3, #0]
100104f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
100104f4:	2b00      	cmp	r3, #0
100104f6:	d115      	bne.n	10010524 <rand+0x38>
100104f8:	2018      	movs	r0, #24
100104fa:	f7ff fe97 	bl	1001022c <malloc>
100104fe:	4b12      	ldr	r3, [pc, #72]	; (10010548 <rand+0x5c>)
10010500:	63a0      	str	r0, [r4, #56]	; 0x38
10010502:	8003      	strh	r3, [r0, #0]
10010504:	4b11      	ldr	r3, [pc, #68]	; (1001054c <rand+0x60>)
10010506:	2201      	movs	r2, #1
10010508:	8043      	strh	r3, [r0, #2]
1001050a:	4b11      	ldr	r3, [pc, #68]	; (10010550 <rand+0x64>)
1001050c:	8083      	strh	r3, [r0, #4]
1001050e:	4b11      	ldr	r3, [pc, #68]	; (10010554 <rand+0x68>)
10010510:	80c3      	strh	r3, [r0, #6]
10010512:	4b11      	ldr	r3, [pc, #68]	; (10010558 <rand+0x6c>)
10010514:	8103      	strh	r3, [r0, #8]
10010516:	2305      	movs	r3, #5
10010518:	8143      	strh	r3, [r0, #10]
1001051a:	3306      	adds	r3, #6
1001051c:	8183      	strh	r3, [r0, #12]
1001051e:	2300      	movs	r3, #0
10010520:	6102      	str	r2, [r0, #16]
10010522:	6143      	str	r3, [r0, #20]
10010524:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10010526:	4a0d      	ldr	r2, [pc, #52]	; (1001055c <rand+0x70>)
10010528:	6920      	ldr	r0, [r4, #16]
1001052a:	6961      	ldr	r1, [r4, #20]
1001052c:	4b0c      	ldr	r3, [pc, #48]	; (10010560 <rand+0x74>)
1001052e:	f7ff fe2b 	bl	10010188 <__aeabi_lmul>
10010532:	2201      	movs	r2, #1
10010534:	2300      	movs	r3, #0
10010536:	1880      	adds	r0, r0, r2
10010538:	4159      	adcs	r1, r3
1001053a:	6120      	str	r0, [r4, #16]
1001053c:	6161      	str	r1, [r4, #20]
1001053e:	0048      	lsls	r0, r1, #1
10010540:	0840      	lsrs	r0, r0, #1
10010542:	bd10      	pop	{r4, pc}
10010544:	100124a4 	.word	0x100124a4
10010548:	0000330e 	.word	0x0000330e
1001054c:	ffffabcd 	.word	0xffffabcd
10010550:	00001234 	.word	0x00001234
10010554:	ffffe66d 	.word	0xffffe66d
10010558:	ffffdeec 	.word	0xffffdeec
1001055c:	4c957f2d 	.word	0x4c957f2d
10010560:	5851f42d 	.word	0x5851f42d

10010564 <_sbrk_r>:
10010564:	2300      	movs	r3, #0
10010566:	b570      	push	{r4, r5, r6, lr}
10010568:	4c06      	ldr	r4, [pc, #24]	; (10010584 <_sbrk_r+0x20>)
1001056a:	0005      	movs	r5, r0
1001056c:	0008      	movs	r0, r1
1001056e:	6023      	str	r3, [r4, #0]
10010570:	f7fb ff74 	bl	1000c45c <_sbrk>
10010574:	1c43      	adds	r3, r0, #1
10010576:	d103      	bne.n	10010580 <_sbrk_r+0x1c>
10010578:	6823      	ldr	r3, [r4, #0]
1001057a:	2b00      	cmp	r3, #0
1001057c:	d000      	beq.n	10010580 <_sbrk_r+0x1c>
1001057e:	602b      	str	r3, [r5, #0]
10010580:	bd70      	pop	{r4, r5, r6, pc}
10010582:	46c0      	nop			; (mov r8, r8)
10010584:	10014c94 	.word	0x10014c94

10010588 <setbuf>:
10010588:	424a      	negs	r2, r1
1001058a:	414a      	adcs	r2, r1
1001058c:	2380      	movs	r3, #128	; 0x80
1001058e:	b510      	push	{r4, lr}
10010590:	0052      	lsls	r2, r2, #1
10010592:	00db      	lsls	r3, r3, #3
10010594:	f000 f802 	bl	1001059c <setvbuf>
10010598:	bd10      	pop	{r4, pc}
	...

1001059c <setvbuf>:
1001059c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001059e:	001d      	movs	r5, r3
100105a0:	4b51      	ldr	r3, [pc, #324]	; (100106e8 <setvbuf+0x14c>)
100105a2:	b085      	sub	sp, #20
100105a4:	681e      	ldr	r6, [r3, #0]
100105a6:	0004      	movs	r4, r0
100105a8:	000f      	movs	r7, r1
100105aa:	9200      	str	r2, [sp, #0]
100105ac:	2e00      	cmp	r6, #0
100105ae:	d005      	beq.n	100105bc <setvbuf+0x20>
100105b0:	69b3      	ldr	r3, [r6, #24]
100105b2:	2b00      	cmp	r3, #0
100105b4:	d102      	bne.n	100105bc <setvbuf+0x20>
100105b6:	0030      	movs	r0, r6
100105b8:	f000 fa62 	bl	10010a80 <__sinit>
100105bc:	4b4b      	ldr	r3, [pc, #300]	; (100106ec <setvbuf+0x150>)
100105be:	429c      	cmp	r4, r3
100105c0:	d101      	bne.n	100105c6 <setvbuf+0x2a>
100105c2:	6874      	ldr	r4, [r6, #4]
100105c4:	e008      	b.n	100105d8 <setvbuf+0x3c>
100105c6:	4b4a      	ldr	r3, [pc, #296]	; (100106f0 <setvbuf+0x154>)
100105c8:	429c      	cmp	r4, r3
100105ca:	d101      	bne.n	100105d0 <setvbuf+0x34>
100105cc:	68b4      	ldr	r4, [r6, #8]
100105ce:	e003      	b.n	100105d8 <setvbuf+0x3c>
100105d0:	4b48      	ldr	r3, [pc, #288]	; (100106f4 <setvbuf+0x158>)
100105d2:	429c      	cmp	r4, r3
100105d4:	d100      	bne.n	100105d8 <setvbuf+0x3c>
100105d6:	68f4      	ldr	r4, [r6, #12]
100105d8:	9b00      	ldr	r3, [sp, #0]
100105da:	2b02      	cmp	r3, #2
100105dc:	d005      	beq.n	100105ea <setvbuf+0x4e>
100105de:	2b01      	cmp	r3, #1
100105e0:	d900      	bls.n	100105e4 <setvbuf+0x48>
100105e2:	e07c      	b.n	100106de <setvbuf+0x142>
100105e4:	2d00      	cmp	r5, #0
100105e6:	da00      	bge.n	100105ea <setvbuf+0x4e>
100105e8:	e079      	b.n	100106de <setvbuf+0x142>
100105ea:	0021      	movs	r1, r4
100105ec:	0030      	movs	r0, r6
100105ee:	f000 f9d9 	bl	100109a4 <_fflush_r>
100105f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
100105f4:	2900      	cmp	r1, #0
100105f6:	d008      	beq.n	1001060a <setvbuf+0x6e>
100105f8:	0023      	movs	r3, r4
100105fa:	3344      	adds	r3, #68	; 0x44
100105fc:	4299      	cmp	r1, r3
100105fe:	d002      	beq.n	10010606 <setvbuf+0x6a>
10010600:	0030      	movs	r0, r6
10010602:	f7ff fe3d 	bl	10010280 <_free_r>
10010606:	2300      	movs	r3, #0
10010608:	6363      	str	r3, [r4, #52]	; 0x34
1001060a:	2300      	movs	r3, #0
1001060c:	61a3      	str	r3, [r4, #24]
1001060e:	6063      	str	r3, [r4, #4]
10010610:	89a3      	ldrh	r3, [r4, #12]
10010612:	061b      	lsls	r3, r3, #24
10010614:	d503      	bpl.n	1001061e <setvbuf+0x82>
10010616:	6921      	ldr	r1, [r4, #16]
10010618:	0030      	movs	r0, r6
1001061a:	f7ff fe31 	bl	10010280 <_free_r>
1001061e:	89a2      	ldrh	r2, [r4, #12]
10010620:	4b35      	ldr	r3, [pc, #212]	; (100106f8 <setvbuf+0x15c>)
10010622:	4013      	ands	r3, r2
10010624:	81a3      	strh	r3, [r4, #12]
10010626:	9b00      	ldr	r3, [sp, #0]
10010628:	2b02      	cmp	r3, #2
1001062a:	d021      	beq.n	10010670 <setvbuf+0xd4>
1001062c:	ab03      	add	r3, sp, #12
1001062e:	aa02      	add	r2, sp, #8
10010630:	0021      	movs	r1, r4
10010632:	0030      	movs	r0, r6
10010634:	f000 fab8 	bl	10010ba8 <__swhatbuf_r>
10010638:	89a3      	ldrh	r3, [r4, #12]
1001063a:	4318      	orrs	r0, r3
1001063c:	81a0      	strh	r0, [r4, #12]
1001063e:	2d00      	cmp	r5, #0
10010640:	d101      	bne.n	10010646 <setvbuf+0xaa>
10010642:	9d02      	ldr	r5, [sp, #8]
10010644:	e001      	b.n	1001064a <setvbuf+0xae>
10010646:	2f00      	cmp	r7, #0
10010648:	d125      	bne.n	10010696 <setvbuf+0xfa>
1001064a:	0028      	movs	r0, r5
1001064c:	f7ff fdee 	bl	1001022c <malloc>
10010650:	9501      	str	r5, [sp, #4]
10010652:	1e07      	subs	r7, r0, #0
10010654:	d11a      	bne.n	1001068c <setvbuf+0xf0>
10010656:	9b02      	ldr	r3, [sp, #8]
10010658:	9301      	str	r3, [sp, #4]
1001065a:	42ab      	cmp	r3, r5
1001065c:	d102      	bne.n	10010664 <setvbuf+0xc8>
1001065e:	2001      	movs	r0, #1
10010660:	4240      	negs	r0, r0
10010662:	e006      	b.n	10010672 <setvbuf+0xd6>
10010664:	9801      	ldr	r0, [sp, #4]
10010666:	f7ff fde1 	bl	1001022c <malloc>
1001066a:	1e07      	subs	r7, r0, #0
1001066c:	d10e      	bne.n	1001068c <setvbuf+0xf0>
1001066e:	e7f6      	b.n	1001065e <setvbuf+0xc2>
10010670:	2000      	movs	r0, #0
10010672:	2202      	movs	r2, #2
10010674:	89a3      	ldrh	r3, [r4, #12]
10010676:	4313      	orrs	r3, r2
10010678:	81a3      	strh	r3, [r4, #12]
1001067a:	2300      	movs	r3, #0
1001067c:	60a3      	str	r3, [r4, #8]
1001067e:	0023      	movs	r3, r4
10010680:	3347      	adds	r3, #71	; 0x47
10010682:	6023      	str	r3, [r4, #0]
10010684:	6123      	str	r3, [r4, #16]
10010686:	2301      	movs	r3, #1
10010688:	6163      	str	r3, [r4, #20]
1001068a:	e02a      	b.n	100106e2 <setvbuf+0x146>
1001068c:	2280      	movs	r2, #128	; 0x80
1001068e:	89a3      	ldrh	r3, [r4, #12]
10010690:	9d01      	ldr	r5, [sp, #4]
10010692:	4313      	orrs	r3, r2
10010694:	81a3      	strh	r3, [r4, #12]
10010696:	69b3      	ldr	r3, [r6, #24]
10010698:	2b00      	cmp	r3, #0
1001069a:	d102      	bne.n	100106a2 <setvbuf+0x106>
1001069c:	0030      	movs	r0, r6
1001069e:	f000 f9ef 	bl	10010a80 <__sinit>
100106a2:	9b00      	ldr	r3, [sp, #0]
100106a4:	2b01      	cmp	r3, #1
100106a6:	d103      	bne.n	100106b0 <setvbuf+0x114>
100106a8:	89a3      	ldrh	r3, [r4, #12]
100106aa:	9a00      	ldr	r2, [sp, #0]
100106ac:	431a      	orrs	r2, r3
100106ae:	81a2      	strh	r2, [r4, #12]
100106b0:	2308      	movs	r3, #8
100106b2:	89a2      	ldrh	r2, [r4, #12]
100106b4:	6027      	str	r7, [r4, #0]
100106b6:	4013      	ands	r3, r2
100106b8:	6127      	str	r7, [r4, #16]
100106ba:	6165      	str	r5, [r4, #20]
100106bc:	1e18      	subs	r0, r3, #0
100106be:	d00c      	beq.n	100106da <setvbuf+0x13e>
100106c0:	2301      	movs	r3, #1
100106c2:	401a      	ands	r2, r3
100106c4:	2300      	movs	r3, #0
100106c6:	1e10      	subs	r0, r2, #0
100106c8:	4298      	cmp	r0, r3
100106ca:	d004      	beq.n	100106d6 <setvbuf+0x13a>
100106cc:	426d      	negs	r5, r5
100106ce:	60a3      	str	r3, [r4, #8]
100106d0:	61a5      	str	r5, [r4, #24]
100106d2:	0018      	movs	r0, r3
100106d4:	e005      	b.n	100106e2 <setvbuf+0x146>
100106d6:	60a5      	str	r5, [r4, #8]
100106d8:	e003      	b.n	100106e2 <setvbuf+0x146>
100106da:	60a3      	str	r3, [r4, #8]
100106dc:	e001      	b.n	100106e2 <setvbuf+0x146>
100106de:	2001      	movs	r0, #1
100106e0:	4240      	negs	r0, r0
100106e2:	b005      	add	sp, #20
100106e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100106e6:	46c0      	nop			; (mov r8, r8)
100106e8:	100124a4 	.word	0x100124a4
100106ec:	10012348 	.word	0x10012348
100106f0:	10012368 	.word	0x10012368
100106f4:	10012388 	.word	0x10012388
100106f8:	fffff35c 	.word	0xfffff35c

100106fc <__swbuf_r>:
100106fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100106fe:	0005      	movs	r5, r0
10010700:	000f      	movs	r7, r1
10010702:	0014      	movs	r4, r2
10010704:	2800      	cmp	r0, #0
10010706:	d004      	beq.n	10010712 <__swbuf_r+0x16>
10010708:	6983      	ldr	r3, [r0, #24]
1001070a:	2b00      	cmp	r3, #0
1001070c:	d101      	bne.n	10010712 <__swbuf_r+0x16>
1001070e:	f000 f9b7 	bl	10010a80 <__sinit>
10010712:	4b23      	ldr	r3, [pc, #140]	; (100107a0 <__swbuf_r+0xa4>)
10010714:	429c      	cmp	r4, r3
10010716:	d101      	bne.n	1001071c <__swbuf_r+0x20>
10010718:	686c      	ldr	r4, [r5, #4]
1001071a:	e008      	b.n	1001072e <__swbuf_r+0x32>
1001071c:	4b21      	ldr	r3, [pc, #132]	; (100107a4 <__swbuf_r+0xa8>)
1001071e:	429c      	cmp	r4, r3
10010720:	d101      	bne.n	10010726 <__swbuf_r+0x2a>
10010722:	68ac      	ldr	r4, [r5, #8]
10010724:	e003      	b.n	1001072e <__swbuf_r+0x32>
10010726:	4b20      	ldr	r3, [pc, #128]	; (100107a8 <__swbuf_r+0xac>)
10010728:	429c      	cmp	r4, r3
1001072a:	d100      	bne.n	1001072e <__swbuf_r+0x32>
1001072c:	68ec      	ldr	r4, [r5, #12]
1001072e:	69a3      	ldr	r3, [r4, #24]
10010730:	60a3      	str	r3, [r4, #8]
10010732:	89a3      	ldrh	r3, [r4, #12]
10010734:	071b      	lsls	r3, r3, #28
10010736:	d50a      	bpl.n	1001074e <__swbuf_r+0x52>
10010738:	6923      	ldr	r3, [r4, #16]
1001073a:	2b00      	cmp	r3, #0
1001073c:	d007      	beq.n	1001074e <__swbuf_r+0x52>
1001073e:	6823      	ldr	r3, [r4, #0]
10010740:	6922      	ldr	r2, [r4, #16]
10010742:	b2fe      	uxtb	r6, r7
10010744:	1a98      	subs	r0, r3, r2
10010746:	6963      	ldr	r3, [r4, #20]
10010748:	4298      	cmp	r0, r3
1001074a:	db0f      	blt.n	1001076c <__swbuf_r+0x70>
1001074c:	e008      	b.n	10010760 <__swbuf_r+0x64>
1001074e:	0021      	movs	r1, r4
10010750:	0028      	movs	r0, r5
10010752:	f000 f82b 	bl	100107ac <__swsetup_r>
10010756:	2800      	cmp	r0, #0
10010758:	d0f1      	beq.n	1001073e <__swbuf_r+0x42>
1001075a:	2001      	movs	r0, #1
1001075c:	4240      	negs	r0, r0
1001075e:	e01d      	b.n	1001079c <__swbuf_r+0xa0>
10010760:	0021      	movs	r1, r4
10010762:	0028      	movs	r0, r5
10010764:	f000 f91e 	bl	100109a4 <_fflush_r>
10010768:	2800      	cmp	r0, #0
1001076a:	d1f6      	bne.n	1001075a <__swbuf_r+0x5e>
1001076c:	68a3      	ldr	r3, [r4, #8]
1001076e:	3001      	adds	r0, #1
10010770:	3b01      	subs	r3, #1
10010772:	60a3      	str	r3, [r4, #8]
10010774:	6823      	ldr	r3, [r4, #0]
10010776:	1c5a      	adds	r2, r3, #1
10010778:	6022      	str	r2, [r4, #0]
1001077a:	701f      	strb	r7, [r3, #0]
1001077c:	6963      	ldr	r3, [r4, #20]
1001077e:	4298      	cmp	r0, r3
10010780:	d005      	beq.n	1001078e <__swbuf_r+0x92>
10010782:	89a3      	ldrh	r3, [r4, #12]
10010784:	0030      	movs	r0, r6
10010786:	07db      	lsls	r3, r3, #31
10010788:	d508      	bpl.n	1001079c <__swbuf_r+0xa0>
1001078a:	2e0a      	cmp	r6, #10
1001078c:	d106      	bne.n	1001079c <__swbuf_r+0xa0>
1001078e:	0021      	movs	r1, r4
10010790:	0028      	movs	r0, r5
10010792:	f000 f907 	bl	100109a4 <_fflush_r>
10010796:	2800      	cmp	r0, #0
10010798:	d1df      	bne.n	1001075a <__swbuf_r+0x5e>
1001079a:	0030      	movs	r0, r6
1001079c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001079e:	46c0      	nop			; (mov r8, r8)
100107a0:	10012348 	.word	0x10012348
100107a4:	10012368 	.word	0x10012368
100107a8:	10012388 	.word	0x10012388

100107ac <__swsetup_r>:
100107ac:	4b36      	ldr	r3, [pc, #216]	; (10010888 <__swsetup_r+0xdc>)
100107ae:	b570      	push	{r4, r5, r6, lr}
100107b0:	681d      	ldr	r5, [r3, #0]
100107b2:	0006      	movs	r6, r0
100107b4:	000c      	movs	r4, r1
100107b6:	2d00      	cmp	r5, #0
100107b8:	d005      	beq.n	100107c6 <__swsetup_r+0x1a>
100107ba:	69ab      	ldr	r3, [r5, #24]
100107bc:	2b00      	cmp	r3, #0
100107be:	d102      	bne.n	100107c6 <__swsetup_r+0x1a>
100107c0:	0028      	movs	r0, r5
100107c2:	f000 f95d 	bl	10010a80 <__sinit>
100107c6:	4b31      	ldr	r3, [pc, #196]	; (1001088c <__swsetup_r+0xe0>)
100107c8:	429c      	cmp	r4, r3
100107ca:	d101      	bne.n	100107d0 <__swsetup_r+0x24>
100107cc:	686c      	ldr	r4, [r5, #4]
100107ce:	e008      	b.n	100107e2 <__swsetup_r+0x36>
100107d0:	4b2f      	ldr	r3, [pc, #188]	; (10010890 <__swsetup_r+0xe4>)
100107d2:	429c      	cmp	r4, r3
100107d4:	d101      	bne.n	100107da <__swsetup_r+0x2e>
100107d6:	68ac      	ldr	r4, [r5, #8]
100107d8:	e003      	b.n	100107e2 <__swsetup_r+0x36>
100107da:	4b2e      	ldr	r3, [pc, #184]	; (10010894 <__swsetup_r+0xe8>)
100107dc:	429c      	cmp	r4, r3
100107de:	d100      	bne.n	100107e2 <__swsetup_r+0x36>
100107e0:	68ec      	ldr	r4, [r5, #12]
100107e2:	220c      	movs	r2, #12
100107e4:	5ea3      	ldrsh	r3, [r4, r2]
100107e6:	b29a      	uxth	r2, r3
100107e8:	0711      	lsls	r1, r2, #28
100107ea:	d423      	bmi.n	10010834 <__swsetup_r+0x88>
100107ec:	06d1      	lsls	r1, r2, #27
100107ee:	d407      	bmi.n	10010800 <__swsetup_r+0x54>
100107f0:	2209      	movs	r2, #9
100107f2:	2001      	movs	r0, #1
100107f4:	6032      	str	r2, [r6, #0]
100107f6:	3237      	adds	r2, #55	; 0x37
100107f8:	4313      	orrs	r3, r2
100107fa:	81a3      	strh	r3, [r4, #12]
100107fc:	4240      	negs	r0, r0
100107fe:	e042      	b.n	10010886 <__swsetup_r+0xda>
10010800:	0753      	lsls	r3, r2, #29
10010802:	d513      	bpl.n	1001082c <__swsetup_r+0x80>
10010804:	6b61      	ldr	r1, [r4, #52]	; 0x34
10010806:	2900      	cmp	r1, #0
10010808:	d008      	beq.n	1001081c <__swsetup_r+0x70>
1001080a:	0023      	movs	r3, r4
1001080c:	3344      	adds	r3, #68	; 0x44
1001080e:	4299      	cmp	r1, r3
10010810:	d002      	beq.n	10010818 <__swsetup_r+0x6c>
10010812:	0030      	movs	r0, r6
10010814:	f7ff fd34 	bl	10010280 <_free_r>
10010818:	2300      	movs	r3, #0
1001081a:	6363      	str	r3, [r4, #52]	; 0x34
1001081c:	2224      	movs	r2, #36	; 0x24
1001081e:	89a3      	ldrh	r3, [r4, #12]
10010820:	4393      	bics	r3, r2
10010822:	81a3      	strh	r3, [r4, #12]
10010824:	2300      	movs	r3, #0
10010826:	6063      	str	r3, [r4, #4]
10010828:	6923      	ldr	r3, [r4, #16]
1001082a:	6023      	str	r3, [r4, #0]
1001082c:	2208      	movs	r2, #8
1001082e:	89a3      	ldrh	r3, [r4, #12]
10010830:	4313      	orrs	r3, r2
10010832:	81a3      	strh	r3, [r4, #12]
10010834:	6923      	ldr	r3, [r4, #16]
10010836:	2b00      	cmp	r3, #0
10010838:	d10b      	bne.n	10010852 <__swsetup_r+0xa6>
1001083a:	23a0      	movs	r3, #160	; 0xa0
1001083c:	89a2      	ldrh	r2, [r4, #12]
1001083e:	009b      	lsls	r3, r3, #2
10010840:	4013      	ands	r3, r2
10010842:	2280      	movs	r2, #128	; 0x80
10010844:	0092      	lsls	r2, r2, #2
10010846:	4293      	cmp	r3, r2
10010848:	d003      	beq.n	10010852 <__swsetup_r+0xa6>
1001084a:	0021      	movs	r1, r4
1001084c:	0030      	movs	r0, r6
1001084e:	f000 f9d1 	bl	10010bf4 <__smakebuf_r>
10010852:	2301      	movs	r3, #1
10010854:	89a2      	ldrh	r2, [r4, #12]
10010856:	4013      	ands	r3, r2
10010858:	d005      	beq.n	10010866 <__swsetup_r+0xba>
1001085a:	2300      	movs	r3, #0
1001085c:	60a3      	str	r3, [r4, #8]
1001085e:	6963      	ldr	r3, [r4, #20]
10010860:	425b      	negs	r3, r3
10010862:	61a3      	str	r3, [r4, #24]
10010864:	e003      	b.n	1001086e <__swsetup_r+0xc2>
10010866:	0792      	lsls	r2, r2, #30
10010868:	d400      	bmi.n	1001086c <__swsetup_r+0xc0>
1001086a:	6963      	ldr	r3, [r4, #20]
1001086c:	60a3      	str	r3, [r4, #8]
1001086e:	2000      	movs	r0, #0
10010870:	6923      	ldr	r3, [r4, #16]
10010872:	4283      	cmp	r3, r0
10010874:	d107      	bne.n	10010886 <__swsetup_r+0xda>
10010876:	220c      	movs	r2, #12
10010878:	5ea3      	ldrsh	r3, [r4, r2]
1001087a:	061a      	lsls	r2, r3, #24
1001087c:	d503      	bpl.n	10010886 <__swsetup_r+0xda>
1001087e:	2240      	movs	r2, #64	; 0x40
10010880:	4313      	orrs	r3, r2
10010882:	81a3      	strh	r3, [r4, #12]
10010884:	3801      	subs	r0, #1
10010886:	bd70      	pop	{r4, r5, r6, pc}
10010888:	100124a4 	.word	0x100124a4
1001088c:	10012348 	.word	0x10012348
10010890:	10012368 	.word	0x10012368
10010894:	10012388 	.word	0x10012388

10010898 <__sflush_r>:
10010898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001089a:	898a      	ldrh	r2, [r1, #12]
1001089c:	0005      	movs	r5, r0
1001089e:	000c      	movs	r4, r1
100108a0:	0713      	lsls	r3, r2, #28
100108a2:	d45a      	bmi.n	1001095a <__sflush_r+0xc2>
100108a4:	684b      	ldr	r3, [r1, #4]
100108a6:	2b00      	cmp	r3, #0
100108a8:	dc02      	bgt.n	100108b0 <__sflush_r+0x18>
100108aa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
100108ac:	2b00      	cmp	r3, #0
100108ae:	dd19      	ble.n	100108e4 <__sflush_r+0x4c>
100108b0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
100108b2:	2f00      	cmp	r7, #0
100108b4:	d016      	beq.n	100108e4 <__sflush_r+0x4c>
100108b6:	2300      	movs	r3, #0
100108b8:	682e      	ldr	r6, [r5, #0]
100108ba:	602b      	str	r3, [r5, #0]
100108bc:	2380      	movs	r3, #128	; 0x80
100108be:	015b      	lsls	r3, r3, #5
100108c0:	401a      	ands	r2, r3
100108c2:	d001      	beq.n	100108c8 <__sflush_r+0x30>
100108c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
100108c6:	e014      	b.n	100108f2 <__sflush_r+0x5a>
100108c8:	2301      	movs	r3, #1
100108ca:	6a21      	ldr	r1, [r4, #32]
100108cc:	0028      	movs	r0, r5
100108ce:	47b8      	blx	r7
100108d0:	1c43      	adds	r3, r0, #1
100108d2:	d10e      	bne.n	100108f2 <__sflush_r+0x5a>
100108d4:	682b      	ldr	r3, [r5, #0]
100108d6:	2b00      	cmp	r3, #0
100108d8:	d00b      	beq.n	100108f2 <__sflush_r+0x5a>
100108da:	2b1d      	cmp	r3, #29
100108dc:	d001      	beq.n	100108e2 <__sflush_r+0x4a>
100108de:	2b16      	cmp	r3, #22
100108e0:	d102      	bne.n	100108e8 <__sflush_r+0x50>
100108e2:	602e      	str	r6, [r5, #0]
100108e4:	2000      	movs	r0, #0
100108e6:	e05a      	b.n	1001099e <__sflush_r+0x106>
100108e8:	2240      	movs	r2, #64	; 0x40
100108ea:	89a3      	ldrh	r3, [r4, #12]
100108ec:	4313      	orrs	r3, r2
100108ee:	81a3      	strh	r3, [r4, #12]
100108f0:	e055      	b.n	1001099e <__sflush_r+0x106>
100108f2:	89a3      	ldrh	r3, [r4, #12]
100108f4:	075b      	lsls	r3, r3, #29
100108f6:	d506      	bpl.n	10010906 <__sflush_r+0x6e>
100108f8:	6863      	ldr	r3, [r4, #4]
100108fa:	1ac0      	subs	r0, r0, r3
100108fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
100108fe:	2b00      	cmp	r3, #0
10010900:	d001      	beq.n	10010906 <__sflush_r+0x6e>
10010902:	6c23      	ldr	r3, [r4, #64]	; 0x40
10010904:	1ac0      	subs	r0, r0, r3
10010906:	2300      	movs	r3, #0
10010908:	0002      	movs	r2, r0
1001090a:	6a21      	ldr	r1, [r4, #32]
1001090c:	0028      	movs	r0, r5
1001090e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10010910:	47b8      	blx	r7
10010912:	89a3      	ldrh	r3, [r4, #12]
10010914:	1c42      	adds	r2, r0, #1
10010916:	d106      	bne.n	10010926 <__sflush_r+0x8e>
10010918:	6829      	ldr	r1, [r5, #0]
1001091a:	291d      	cmp	r1, #29
1001091c:	d83a      	bhi.n	10010994 <__sflush_r+0xfc>
1001091e:	4a20      	ldr	r2, [pc, #128]	; (100109a0 <__sflush_r+0x108>)
10010920:	40ca      	lsrs	r2, r1
10010922:	07d2      	lsls	r2, r2, #31
10010924:	d536      	bpl.n	10010994 <__sflush_r+0xfc>
10010926:	2200      	movs	r2, #0
10010928:	6062      	str	r2, [r4, #4]
1001092a:	6922      	ldr	r2, [r4, #16]
1001092c:	6022      	str	r2, [r4, #0]
1001092e:	04db      	lsls	r3, r3, #19
10010930:	d505      	bpl.n	1001093e <__sflush_r+0xa6>
10010932:	1c43      	adds	r3, r0, #1
10010934:	d102      	bne.n	1001093c <__sflush_r+0xa4>
10010936:	682b      	ldr	r3, [r5, #0]
10010938:	2b00      	cmp	r3, #0
1001093a:	d100      	bne.n	1001093e <__sflush_r+0xa6>
1001093c:	6560      	str	r0, [r4, #84]	; 0x54
1001093e:	6b61      	ldr	r1, [r4, #52]	; 0x34
10010940:	602e      	str	r6, [r5, #0]
10010942:	2900      	cmp	r1, #0
10010944:	d0ce      	beq.n	100108e4 <__sflush_r+0x4c>
10010946:	0023      	movs	r3, r4
10010948:	3344      	adds	r3, #68	; 0x44
1001094a:	4299      	cmp	r1, r3
1001094c:	d002      	beq.n	10010954 <__sflush_r+0xbc>
1001094e:	0028      	movs	r0, r5
10010950:	f7ff fc96 	bl	10010280 <_free_r>
10010954:	2000      	movs	r0, #0
10010956:	6360      	str	r0, [r4, #52]	; 0x34
10010958:	e021      	b.n	1001099e <__sflush_r+0x106>
1001095a:	690f      	ldr	r7, [r1, #16]
1001095c:	2f00      	cmp	r7, #0
1001095e:	d0c1      	beq.n	100108e4 <__sflush_r+0x4c>
10010960:	680b      	ldr	r3, [r1, #0]
10010962:	600f      	str	r7, [r1, #0]
10010964:	1bdb      	subs	r3, r3, r7
10010966:	9301      	str	r3, [sp, #4]
10010968:	2300      	movs	r3, #0
1001096a:	0792      	lsls	r2, r2, #30
1001096c:	d100      	bne.n	10010970 <__sflush_r+0xd8>
1001096e:	694b      	ldr	r3, [r1, #20]
10010970:	60a3      	str	r3, [r4, #8]
10010972:	e003      	b.n	1001097c <__sflush_r+0xe4>
10010974:	9b01      	ldr	r3, [sp, #4]
10010976:	183f      	adds	r7, r7, r0
10010978:	1a1b      	subs	r3, r3, r0
1001097a:	9301      	str	r3, [sp, #4]
1001097c:	9b01      	ldr	r3, [sp, #4]
1001097e:	2b00      	cmp	r3, #0
10010980:	ddb0      	ble.n	100108e4 <__sflush_r+0x4c>
10010982:	9b01      	ldr	r3, [sp, #4]
10010984:	003a      	movs	r2, r7
10010986:	6a21      	ldr	r1, [r4, #32]
10010988:	0028      	movs	r0, r5
1001098a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1001098c:	47b0      	blx	r6
1001098e:	2800      	cmp	r0, #0
10010990:	dcf0      	bgt.n	10010974 <__sflush_r+0xdc>
10010992:	89a3      	ldrh	r3, [r4, #12]
10010994:	2240      	movs	r2, #64	; 0x40
10010996:	2001      	movs	r0, #1
10010998:	4313      	orrs	r3, r2
1001099a:	81a3      	strh	r3, [r4, #12]
1001099c:	4240      	negs	r0, r0
1001099e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100109a0:	20400001 	.word	0x20400001

100109a4 <_fflush_r>:
100109a4:	690b      	ldr	r3, [r1, #16]
100109a6:	b570      	push	{r4, r5, r6, lr}
100109a8:	0005      	movs	r5, r0
100109aa:	000c      	movs	r4, r1
100109ac:	2b00      	cmp	r3, #0
100109ae:	d101      	bne.n	100109b4 <_fflush_r+0x10>
100109b0:	2000      	movs	r0, #0
100109b2:	e01c      	b.n	100109ee <_fflush_r+0x4a>
100109b4:	2800      	cmp	r0, #0
100109b6:	d004      	beq.n	100109c2 <_fflush_r+0x1e>
100109b8:	6983      	ldr	r3, [r0, #24]
100109ba:	2b00      	cmp	r3, #0
100109bc:	d101      	bne.n	100109c2 <_fflush_r+0x1e>
100109be:	f000 f85f 	bl	10010a80 <__sinit>
100109c2:	4b0b      	ldr	r3, [pc, #44]	; (100109f0 <_fflush_r+0x4c>)
100109c4:	429c      	cmp	r4, r3
100109c6:	d101      	bne.n	100109cc <_fflush_r+0x28>
100109c8:	686c      	ldr	r4, [r5, #4]
100109ca:	e008      	b.n	100109de <_fflush_r+0x3a>
100109cc:	4b09      	ldr	r3, [pc, #36]	; (100109f4 <_fflush_r+0x50>)
100109ce:	429c      	cmp	r4, r3
100109d0:	d101      	bne.n	100109d6 <_fflush_r+0x32>
100109d2:	68ac      	ldr	r4, [r5, #8]
100109d4:	e003      	b.n	100109de <_fflush_r+0x3a>
100109d6:	4b08      	ldr	r3, [pc, #32]	; (100109f8 <_fflush_r+0x54>)
100109d8:	429c      	cmp	r4, r3
100109da:	d100      	bne.n	100109de <_fflush_r+0x3a>
100109dc:	68ec      	ldr	r4, [r5, #12]
100109de:	220c      	movs	r2, #12
100109e0:	5ea3      	ldrsh	r3, [r4, r2]
100109e2:	2b00      	cmp	r3, #0
100109e4:	d0e4      	beq.n	100109b0 <_fflush_r+0xc>
100109e6:	0021      	movs	r1, r4
100109e8:	0028      	movs	r0, r5
100109ea:	f7ff ff55 	bl	10010898 <__sflush_r>
100109ee:	bd70      	pop	{r4, r5, r6, pc}
100109f0:	10012348 	.word	0x10012348
100109f4:	10012368 	.word	0x10012368
100109f8:	10012388 	.word	0x10012388

100109fc <_cleanup_r>:
100109fc:	b510      	push	{r4, lr}
100109fe:	4902      	ldr	r1, [pc, #8]	; (10010a08 <_cleanup_r+0xc>)
10010a00:	f000 f8b0 	bl	10010b64 <_fwalk_reent>
10010a04:	bd10      	pop	{r4, pc}
10010a06:	46c0      	nop			; (mov r8, r8)
10010a08:	100109a5 	.word	0x100109a5

10010a0c <std.isra.0>:
10010a0c:	2300      	movs	r3, #0
10010a0e:	b510      	push	{r4, lr}
10010a10:	0004      	movs	r4, r0
10010a12:	6003      	str	r3, [r0, #0]
10010a14:	6043      	str	r3, [r0, #4]
10010a16:	6083      	str	r3, [r0, #8]
10010a18:	8181      	strh	r1, [r0, #12]
10010a1a:	6643      	str	r3, [r0, #100]	; 0x64
10010a1c:	81c2      	strh	r2, [r0, #14]
10010a1e:	6103      	str	r3, [r0, #16]
10010a20:	6143      	str	r3, [r0, #20]
10010a22:	6183      	str	r3, [r0, #24]
10010a24:	0019      	movs	r1, r3
10010a26:	2208      	movs	r2, #8
10010a28:	305c      	adds	r0, #92	; 0x5c
10010a2a:	f7ff fc21 	bl	10010270 <memset>
10010a2e:	4b05      	ldr	r3, [pc, #20]	; (10010a44 <std.isra.0+0x38>)
10010a30:	6224      	str	r4, [r4, #32]
10010a32:	6263      	str	r3, [r4, #36]	; 0x24
10010a34:	4b04      	ldr	r3, [pc, #16]	; (10010a48 <std.isra.0+0x3c>)
10010a36:	62a3      	str	r3, [r4, #40]	; 0x28
10010a38:	4b04      	ldr	r3, [pc, #16]	; (10010a4c <std.isra.0+0x40>)
10010a3a:	62e3      	str	r3, [r4, #44]	; 0x2c
10010a3c:	4b04      	ldr	r3, [pc, #16]	; (10010a50 <std.isra.0+0x44>)
10010a3e:	6323      	str	r3, [r4, #48]	; 0x30
10010a40:	bd10      	pop	{r4, pc}
10010a42:	46c0      	nop			; (mov r8, r8)
10010a44:	10011285 	.word	0x10011285
10010a48:	100112ad 	.word	0x100112ad
10010a4c:	100112e5 	.word	0x100112e5
10010a50:	10011311 	.word	0x10011311

10010a54 <__sfmoreglue>:
10010a54:	b570      	push	{r4, r5, r6, lr}
10010a56:	2568      	movs	r5, #104	; 0x68
10010a58:	1e4b      	subs	r3, r1, #1
10010a5a:	435d      	muls	r5, r3
10010a5c:	000e      	movs	r6, r1
10010a5e:	0029      	movs	r1, r5
10010a60:	3174      	adds	r1, #116	; 0x74
10010a62:	f7ff fc53 	bl	1001030c <_malloc_r>
10010a66:	1e04      	subs	r4, r0, #0
10010a68:	d008      	beq.n	10010a7c <__sfmoreglue+0x28>
10010a6a:	2100      	movs	r1, #0
10010a6c:	002a      	movs	r2, r5
10010a6e:	6001      	str	r1, [r0, #0]
10010a70:	6046      	str	r6, [r0, #4]
10010a72:	300c      	adds	r0, #12
10010a74:	60a0      	str	r0, [r4, #8]
10010a76:	3268      	adds	r2, #104	; 0x68
10010a78:	f7ff fbfa 	bl	10010270 <memset>
10010a7c:	0020      	movs	r0, r4
10010a7e:	bd70      	pop	{r4, r5, r6, pc}

10010a80 <__sinit>:
10010a80:	6983      	ldr	r3, [r0, #24]
10010a82:	b513      	push	{r0, r1, r4, lr}
10010a84:	0004      	movs	r4, r0
10010a86:	2b00      	cmp	r3, #0
10010a88:	d128      	bne.n	10010adc <__sinit+0x5c>
10010a8a:	6483      	str	r3, [r0, #72]	; 0x48
10010a8c:	64c3      	str	r3, [r0, #76]	; 0x4c
10010a8e:	6503      	str	r3, [r0, #80]	; 0x50
10010a90:	4b13      	ldr	r3, [pc, #76]	; (10010ae0 <__sinit+0x60>)
10010a92:	4a14      	ldr	r2, [pc, #80]	; (10010ae4 <__sinit+0x64>)
10010a94:	681b      	ldr	r3, [r3, #0]
10010a96:	6282      	str	r2, [r0, #40]	; 0x28
10010a98:	9301      	str	r3, [sp, #4]
10010a9a:	4298      	cmp	r0, r3
10010a9c:	d101      	bne.n	10010aa2 <__sinit+0x22>
10010a9e:	2301      	movs	r3, #1
10010aa0:	6183      	str	r3, [r0, #24]
10010aa2:	0020      	movs	r0, r4
10010aa4:	f000 f820 	bl	10010ae8 <__sfp>
10010aa8:	6060      	str	r0, [r4, #4]
10010aaa:	0020      	movs	r0, r4
10010aac:	f000 f81c 	bl	10010ae8 <__sfp>
10010ab0:	60a0      	str	r0, [r4, #8]
10010ab2:	0020      	movs	r0, r4
10010ab4:	f000 f818 	bl	10010ae8 <__sfp>
10010ab8:	2200      	movs	r2, #0
10010aba:	60e0      	str	r0, [r4, #12]
10010abc:	2104      	movs	r1, #4
10010abe:	6860      	ldr	r0, [r4, #4]
10010ac0:	f7ff ffa4 	bl	10010a0c <std.isra.0>
10010ac4:	2201      	movs	r2, #1
10010ac6:	2109      	movs	r1, #9
10010ac8:	68a0      	ldr	r0, [r4, #8]
10010aca:	f7ff ff9f 	bl	10010a0c <std.isra.0>
10010ace:	2202      	movs	r2, #2
10010ad0:	2112      	movs	r1, #18
10010ad2:	68e0      	ldr	r0, [r4, #12]
10010ad4:	f7ff ff9a 	bl	10010a0c <std.isra.0>
10010ad8:	2301      	movs	r3, #1
10010ada:	61a3      	str	r3, [r4, #24]
10010adc:	bd13      	pop	{r0, r1, r4, pc}
10010ade:	46c0      	nop			; (mov r8, r8)
10010ae0:	10012344 	.word	0x10012344
10010ae4:	100109fd 	.word	0x100109fd

10010ae8 <__sfp>:
10010ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010aea:	4b1d      	ldr	r3, [pc, #116]	; (10010b60 <__sfp+0x78>)
10010aec:	0006      	movs	r6, r0
10010aee:	681d      	ldr	r5, [r3, #0]
10010af0:	69ab      	ldr	r3, [r5, #24]
10010af2:	2b00      	cmp	r3, #0
10010af4:	d102      	bne.n	10010afc <__sfp+0x14>
10010af6:	0028      	movs	r0, r5
10010af8:	f7ff ffc2 	bl	10010a80 <__sinit>
10010afc:	3548      	adds	r5, #72	; 0x48
10010afe:	68ac      	ldr	r4, [r5, #8]
10010b00:	686b      	ldr	r3, [r5, #4]
10010b02:	3b01      	subs	r3, #1
10010b04:	d405      	bmi.n	10010b12 <__sfp+0x2a>
10010b06:	220c      	movs	r2, #12
10010b08:	5ea7      	ldrsh	r7, [r4, r2]
10010b0a:	2f00      	cmp	r7, #0
10010b0c:	d010      	beq.n	10010b30 <__sfp+0x48>
10010b0e:	3468      	adds	r4, #104	; 0x68
10010b10:	e7f7      	b.n	10010b02 <__sfp+0x1a>
10010b12:	682b      	ldr	r3, [r5, #0]
10010b14:	2b00      	cmp	r3, #0
10010b16:	d001      	beq.n	10010b1c <__sfp+0x34>
10010b18:	682d      	ldr	r5, [r5, #0]
10010b1a:	e7f0      	b.n	10010afe <__sfp+0x16>
10010b1c:	2104      	movs	r1, #4
10010b1e:	0030      	movs	r0, r6
10010b20:	f7ff ff98 	bl	10010a54 <__sfmoreglue>
10010b24:	6028      	str	r0, [r5, #0]
10010b26:	2800      	cmp	r0, #0
10010b28:	d1f6      	bne.n	10010b18 <__sfp+0x30>
10010b2a:	230c      	movs	r3, #12
10010b2c:	6033      	str	r3, [r6, #0]
10010b2e:	e016      	b.n	10010b5e <__sfp+0x76>
10010b30:	2301      	movs	r3, #1
10010b32:	0020      	movs	r0, r4
10010b34:	425b      	negs	r3, r3
10010b36:	81e3      	strh	r3, [r4, #14]
10010b38:	3302      	adds	r3, #2
10010b3a:	81a3      	strh	r3, [r4, #12]
10010b3c:	6667      	str	r7, [r4, #100]	; 0x64
10010b3e:	6027      	str	r7, [r4, #0]
10010b40:	60a7      	str	r7, [r4, #8]
10010b42:	6067      	str	r7, [r4, #4]
10010b44:	6127      	str	r7, [r4, #16]
10010b46:	6167      	str	r7, [r4, #20]
10010b48:	61a7      	str	r7, [r4, #24]
10010b4a:	305c      	adds	r0, #92	; 0x5c
10010b4c:	2208      	movs	r2, #8
10010b4e:	0039      	movs	r1, r7
10010b50:	f7ff fb8e 	bl	10010270 <memset>
10010b54:	0020      	movs	r0, r4
10010b56:	6367      	str	r7, [r4, #52]	; 0x34
10010b58:	63a7      	str	r7, [r4, #56]	; 0x38
10010b5a:	64a7      	str	r7, [r4, #72]	; 0x48
10010b5c:	64e7      	str	r7, [r4, #76]	; 0x4c
10010b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010b60:	10012344 	.word	0x10012344

10010b64 <_fwalk_reent>:
10010b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010b66:	0004      	movs	r4, r0
10010b68:	0007      	movs	r7, r0
10010b6a:	2600      	movs	r6, #0
10010b6c:	9101      	str	r1, [sp, #4]
10010b6e:	3448      	adds	r4, #72	; 0x48
10010b70:	2c00      	cmp	r4, #0
10010b72:	d016      	beq.n	10010ba2 <_fwalk_reent+0x3e>
10010b74:	6863      	ldr	r3, [r4, #4]
10010b76:	68a5      	ldr	r5, [r4, #8]
10010b78:	9300      	str	r3, [sp, #0]
10010b7a:	9b00      	ldr	r3, [sp, #0]
10010b7c:	3b01      	subs	r3, #1
10010b7e:	9300      	str	r3, [sp, #0]
10010b80:	d40d      	bmi.n	10010b9e <_fwalk_reent+0x3a>
10010b82:	89ab      	ldrh	r3, [r5, #12]
10010b84:	2b01      	cmp	r3, #1
10010b86:	d908      	bls.n	10010b9a <_fwalk_reent+0x36>
10010b88:	220e      	movs	r2, #14
10010b8a:	5eab      	ldrsh	r3, [r5, r2]
10010b8c:	3301      	adds	r3, #1
10010b8e:	d004      	beq.n	10010b9a <_fwalk_reent+0x36>
10010b90:	0029      	movs	r1, r5
10010b92:	0038      	movs	r0, r7
10010b94:	9b01      	ldr	r3, [sp, #4]
10010b96:	4798      	blx	r3
10010b98:	4306      	orrs	r6, r0
10010b9a:	3568      	adds	r5, #104	; 0x68
10010b9c:	e7ed      	b.n	10010b7a <_fwalk_reent+0x16>
10010b9e:	6824      	ldr	r4, [r4, #0]
10010ba0:	e7e6      	b.n	10010b70 <_fwalk_reent+0xc>
10010ba2:	0030      	movs	r0, r6
10010ba4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10010ba8 <__swhatbuf_r>:
10010ba8:	b570      	push	{r4, r5, r6, lr}
10010baa:	000e      	movs	r6, r1
10010bac:	001d      	movs	r5, r3
10010bae:	230e      	movs	r3, #14
10010bb0:	5ec9      	ldrsh	r1, [r1, r3]
10010bb2:	b090      	sub	sp, #64	; 0x40
10010bb4:	0014      	movs	r4, r2
10010bb6:	2900      	cmp	r1, #0
10010bb8:	da06      	bge.n	10010bc8 <__swhatbuf_r+0x20>
10010bba:	2300      	movs	r3, #0
10010bbc:	602b      	str	r3, [r5, #0]
10010bbe:	89b3      	ldrh	r3, [r6, #12]
10010bc0:	061b      	lsls	r3, r3, #24
10010bc2:	d50f      	bpl.n	10010be4 <__swhatbuf_r+0x3c>
10010bc4:	2340      	movs	r3, #64	; 0x40
10010bc6:	e00f      	b.n	10010be8 <__swhatbuf_r+0x40>
10010bc8:	aa01      	add	r2, sp, #4
10010bca:	f000 fbcd 	bl	10011368 <_fstat_r>
10010bce:	2800      	cmp	r0, #0
10010bd0:	dbf3      	blt.n	10010bba <__swhatbuf_r+0x12>
10010bd2:	23f0      	movs	r3, #240	; 0xf0
10010bd4:	9a02      	ldr	r2, [sp, #8]
10010bd6:	021b      	lsls	r3, r3, #8
10010bd8:	4013      	ands	r3, r2
10010bda:	4a05      	ldr	r2, [pc, #20]	; (10010bf0 <__swhatbuf_r+0x48>)
10010bdc:	189b      	adds	r3, r3, r2
10010bde:	425a      	negs	r2, r3
10010be0:	4153      	adcs	r3, r2
10010be2:	602b      	str	r3, [r5, #0]
10010be4:	2380      	movs	r3, #128	; 0x80
10010be6:	00db      	lsls	r3, r3, #3
10010be8:	2000      	movs	r0, #0
10010bea:	6023      	str	r3, [r4, #0]
10010bec:	b010      	add	sp, #64	; 0x40
10010bee:	bd70      	pop	{r4, r5, r6, pc}
10010bf0:	ffffe000 	.word	0xffffe000

10010bf4 <__smakebuf_r>:
10010bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010bf6:	2602      	movs	r6, #2
10010bf8:	898b      	ldrh	r3, [r1, #12]
10010bfa:	0005      	movs	r5, r0
10010bfc:	000c      	movs	r4, r1
10010bfe:	4233      	tst	r3, r6
10010c00:	d110      	bne.n	10010c24 <__smakebuf_r+0x30>
10010c02:	ab01      	add	r3, sp, #4
10010c04:	466a      	mov	r2, sp
10010c06:	f7ff ffcf 	bl	10010ba8 <__swhatbuf_r>
10010c0a:	9900      	ldr	r1, [sp, #0]
10010c0c:	0007      	movs	r7, r0
10010c0e:	0028      	movs	r0, r5
10010c10:	f7ff fb7c 	bl	1001030c <_malloc_r>
10010c14:	2800      	cmp	r0, #0
10010c16:	d10c      	bne.n	10010c32 <__smakebuf_r+0x3e>
10010c18:	220c      	movs	r2, #12
10010c1a:	5ea3      	ldrsh	r3, [r4, r2]
10010c1c:	059a      	lsls	r2, r3, #22
10010c1e:	d423      	bmi.n	10010c68 <__smakebuf_r+0x74>
10010c20:	4333      	orrs	r3, r6
10010c22:	81a3      	strh	r3, [r4, #12]
10010c24:	0023      	movs	r3, r4
10010c26:	3347      	adds	r3, #71	; 0x47
10010c28:	6023      	str	r3, [r4, #0]
10010c2a:	6123      	str	r3, [r4, #16]
10010c2c:	2301      	movs	r3, #1
10010c2e:	6163      	str	r3, [r4, #20]
10010c30:	e01a      	b.n	10010c68 <__smakebuf_r+0x74>
10010c32:	2280      	movs	r2, #128	; 0x80
10010c34:	4b0d      	ldr	r3, [pc, #52]	; (10010c6c <__smakebuf_r+0x78>)
10010c36:	62ab      	str	r3, [r5, #40]	; 0x28
10010c38:	89a3      	ldrh	r3, [r4, #12]
10010c3a:	6020      	str	r0, [r4, #0]
10010c3c:	4313      	orrs	r3, r2
10010c3e:	81a3      	strh	r3, [r4, #12]
10010c40:	9b00      	ldr	r3, [sp, #0]
10010c42:	6120      	str	r0, [r4, #16]
10010c44:	6163      	str	r3, [r4, #20]
10010c46:	9b01      	ldr	r3, [sp, #4]
10010c48:	2b00      	cmp	r3, #0
10010c4a:	d00a      	beq.n	10010c62 <__smakebuf_r+0x6e>
10010c4c:	230e      	movs	r3, #14
10010c4e:	5ee1      	ldrsh	r1, [r4, r3]
10010c50:	0028      	movs	r0, r5
10010c52:	f000 fb9b 	bl	1001138c <_isatty_r>
10010c56:	2800      	cmp	r0, #0
10010c58:	d003      	beq.n	10010c62 <__smakebuf_r+0x6e>
10010c5a:	2201      	movs	r2, #1
10010c5c:	89a3      	ldrh	r3, [r4, #12]
10010c5e:	4313      	orrs	r3, r2
10010c60:	81a3      	strh	r3, [r4, #12]
10010c62:	89a3      	ldrh	r3, [r4, #12]
10010c64:	431f      	orrs	r7, r3
10010c66:	81a7      	strh	r7, [r4, #12]
10010c68:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010c6a:	46c0      	nop			; (mov r8, r8)
10010c6c:	100109fd 	.word	0x100109fd

10010c70 <__sfputc_r>:
10010c70:	6893      	ldr	r3, [r2, #8]
10010c72:	b510      	push	{r4, lr}
10010c74:	3b01      	subs	r3, #1
10010c76:	6093      	str	r3, [r2, #8]
10010c78:	2b00      	cmp	r3, #0
10010c7a:	da05      	bge.n	10010c88 <__sfputc_r+0x18>
10010c7c:	6994      	ldr	r4, [r2, #24]
10010c7e:	42a3      	cmp	r3, r4
10010c80:	db08      	blt.n	10010c94 <__sfputc_r+0x24>
10010c82:	b2cb      	uxtb	r3, r1
10010c84:	2b0a      	cmp	r3, #10
10010c86:	d005      	beq.n	10010c94 <__sfputc_r+0x24>
10010c88:	6813      	ldr	r3, [r2, #0]
10010c8a:	1c58      	adds	r0, r3, #1
10010c8c:	6010      	str	r0, [r2, #0]
10010c8e:	7019      	strb	r1, [r3, #0]
10010c90:	b2c8      	uxtb	r0, r1
10010c92:	e001      	b.n	10010c98 <__sfputc_r+0x28>
10010c94:	f7ff fd32 	bl	100106fc <__swbuf_r>
10010c98:	bd10      	pop	{r4, pc}

10010c9a <__sfputs_r>:
10010c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010c9c:	0006      	movs	r6, r0
10010c9e:	000f      	movs	r7, r1
10010ca0:	0014      	movs	r4, r2
10010ca2:	18d5      	adds	r5, r2, r3
10010ca4:	42ac      	cmp	r4, r5
10010ca6:	d008      	beq.n	10010cba <__sfputs_r+0x20>
10010ca8:	7821      	ldrb	r1, [r4, #0]
10010caa:	003a      	movs	r2, r7
10010cac:	0030      	movs	r0, r6
10010cae:	f7ff ffdf 	bl	10010c70 <__sfputc_r>
10010cb2:	3401      	adds	r4, #1
10010cb4:	1c43      	adds	r3, r0, #1
10010cb6:	d1f5      	bne.n	10010ca4 <__sfputs_r+0xa>
10010cb8:	e000      	b.n	10010cbc <__sfputs_r+0x22>
10010cba:	2000      	movs	r0, #0
10010cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10010cc0 <_vfiprintf_r>:
10010cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
10010cc2:	b09f      	sub	sp, #124	; 0x7c
10010cc4:	0006      	movs	r6, r0
10010cc6:	000f      	movs	r7, r1
10010cc8:	9202      	str	r2, [sp, #8]
10010cca:	9305      	str	r3, [sp, #20]
10010ccc:	2800      	cmp	r0, #0
10010cce:	d004      	beq.n	10010cda <_vfiprintf_r+0x1a>
10010cd0:	6983      	ldr	r3, [r0, #24]
10010cd2:	2b00      	cmp	r3, #0
10010cd4:	d101      	bne.n	10010cda <_vfiprintf_r+0x1a>
10010cd6:	f7ff fed3 	bl	10010a80 <__sinit>
10010cda:	4b7f      	ldr	r3, [pc, #508]	; (10010ed8 <_vfiprintf_r+0x218>)
10010cdc:	429f      	cmp	r7, r3
10010cde:	d101      	bne.n	10010ce4 <_vfiprintf_r+0x24>
10010ce0:	6877      	ldr	r7, [r6, #4]
10010ce2:	e008      	b.n	10010cf6 <_vfiprintf_r+0x36>
10010ce4:	4b7d      	ldr	r3, [pc, #500]	; (10010edc <_vfiprintf_r+0x21c>)
10010ce6:	429f      	cmp	r7, r3
10010ce8:	d101      	bne.n	10010cee <_vfiprintf_r+0x2e>
10010cea:	68b7      	ldr	r7, [r6, #8]
10010cec:	e003      	b.n	10010cf6 <_vfiprintf_r+0x36>
10010cee:	4b7c      	ldr	r3, [pc, #496]	; (10010ee0 <_vfiprintf_r+0x220>)
10010cf0:	429f      	cmp	r7, r3
10010cf2:	d100      	bne.n	10010cf6 <_vfiprintf_r+0x36>
10010cf4:	68f7      	ldr	r7, [r6, #12]
10010cf6:	89bb      	ldrh	r3, [r7, #12]
10010cf8:	071b      	lsls	r3, r3, #28
10010cfa:	d50a      	bpl.n	10010d12 <_vfiprintf_r+0x52>
10010cfc:	693b      	ldr	r3, [r7, #16]
10010cfe:	2b00      	cmp	r3, #0
10010d00:	d007      	beq.n	10010d12 <_vfiprintf_r+0x52>
10010d02:	2300      	movs	r3, #0
10010d04:	ad06      	add	r5, sp, #24
10010d06:	616b      	str	r3, [r5, #20]
10010d08:	3320      	adds	r3, #32
10010d0a:	766b      	strb	r3, [r5, #25]
10010d0c:	3310      	adds	r3, #16
10010d0e:	76ab      	strb	r3, [r5, #26]
10010d10:	e03d      	b.n	10010d8e <_vfiprintf_r+0xce>
10010d12:	0039      	movs	r1, r7
10010d14:	0030      	movs	r0, r6
10010d16:	f7ff fd49 	bl	100107ac <__swsetup_r>
10010d1a:	2800      	cmp	r0, #0
10010d1c:	d0f1      	beq.n	10010d02 <_vfiprintf_r+0x42>
10010d1e:	2001      	movs	r0, #1
10010d20:	4240      	negs	r0, r0
10010d22:	e0d6      	b.n	10010ed2 <_vfiprintf_r+0x212>
10010d24:	9a05      	ldr	r2, [sp, #20]
10010d26:	1d11      	adds	r1, r2, #4
10010d28:	6812      	ldr	r2, [r2, #0]
10010d2a:	9105      	str	r1, [sp, #20]
10010d2c:	2a00      	cmp	r2, #0
10010d2e:	da00      	bge.n	10010d32 <_vfiprintf_r+0x72>
10010d30:	e07f      	b.n	10010e32 <_vfiprintf_r+0x172>
10010d32:	9209      	str	r2, [sp, #36]	; 0x24
10010d34:	3401      	adds	r4, #1
10010d36:	7823      	ldrb	r3, [r4, #0]
10010d38:	2b2e      	cmp	r3, #46	; 0x2e
10010d3a:	d100      	bne.n	10010d3e <_vfiprintf_r+0x7e>
10010d3c:	e08d      	b.n	10010e5a <_vfiprintf_r+0x19a>
10010d3e:	7821      	ldrb	r1, [r4, #0]
10010d40:	2203      	movs	r2, #3
10010d42:	4868      	ldr	r0, [pc, #416]	; (10010ee4 <_vfiprintf_r+0x224>)
10010d44:	f000 fb48 	bl	100113d8 <memchr>
10010d48:	2800      	cmp	r0, #0
10010d4a:	d007      	beq.n	10010d5c <_vfiprintf_r+0x9c>
10010d4c:	4b65      	ldr	r3, [pc, #404]	; (10010ee4 <_vfiprintf_r+0x224>)
10010d4e:	682a      	ldr	r2, [r5, #0]
10010d50:	1ac0      	subs	r0, r0, r3
10010d52:	2340      	movs	r3, #64	; 0x40
10010d54:	4083      	lsls	r3, r0
10010d56:	4313      	orrs	r3, r2
10010d58:	602b      	str	r3, [r5, #0]
10010d5a:	3401      	adds	r4, #1
10010d5c:	7821      	ldrb	r1, [r4, #0]
10010d5e:	1c63      	adds	r3, r4, #1
10010d60:	2206      	movs	r2, #6
10010d62:	4861      	ldr	r0, [pc, #388]	; (10010ee8 <_vfiprintf_r+0x228>)
10010d64:	9302      	str	r3, [sp, #8]
10010d66:	7629      	strb	r1, [r5, #24]
10010d68:	f000 fb36 	bl	100113d8 <memchr>
10010d6c:	2800      	cmp	r0, #0
10010d6e:	d100      	bne.n	10010d72 <_vfiprintf_r+0xb2>
10010d70:	e09d      	b.n	10010eae <_vfiprintf_r+0x1ee>
10010d72:	4b5e      	ldr	r3, [pc, #376]	; (10010eec <_vfiprintf_r+0x22c>)
10010d74:	2b00      	cmp	r3, #0
10010d76:	d000      	beq.n	10010d7a <_vfiprintf_r+0xba>
10010d78:	e090      	b.n	10010e9c <_vfiprintf_r+0x1dc>
10010d7a:	2207      	movs	r2, #7
10010d7c:	9b05      	ldr	r3, [sp, #20]
10010d7e:	3307      	adds	r3, #7
10010d80:	4393      	bics	r3, r2
10010d82:	3308      	adds	r3, #8
10010d84:	9305      	str	r3, [sp, #20]
10010d86:	696b      	ldr	r3, [r5, #20]
10010d88:	9a03      	ldr	r2, [sp, #12]
10010d8a:	189b      	adds	r3, r3, r2
10010d8c:	616b      	str	r3, [r5, #20]
10010d8e:	9c02      	ldr	r4, [sp, #8]
10010d90:	7823      	ldrb	r3, [r4, #0]
10010d92:	2b00      	cmp	r3, #0
10010d94:	d104      	bne.n	10010da0 <_vfiprintf_r+0xe0>
10010d96:	9b02      	ldr	r3, [sp, #8]
10010d98:	1ae3      	subs	r3, r4, r3
10010d9a:	9304      	str	r3, [sp, #16]
10010d9c:	d012      	beq.n	10010dc4 <_vfiprintf_r+0x104>
10010d9e:	e003      	b.n	10010da8 <_vfiprintf_r+0xe8>
10010da0:	2b25      	cmp	r3, #37	; 0x25
10010da2:	d0f8      	beq.n	10010d96 <_vfiprintf_r+0xd6>
10010da4:	3401      	adds	r4, #1
10010da6:	e7f3      	b.n	10010d90 <_vfiprintf_r+0xd0>
10010da8:	9b04      	ldr	r3, [sp, #16]
10010daa:	9a02      	ldr	r2, [sp, #8]
10010dac:	0039      	movs	r1, r7
10010dae:	0030      	movs	r0, r6
10010db0:	f7ff ff73 	bl	10010c9a <__sfputs_r>
10010db4:	1c43      	adds	r3, r0, #1
10010db6:	d100      	bne.n	10010dba <_vfiprintf_r+0xfa>
10010db8:	e086      	b.n	10010ec8 <_vfiprintf_r+0x208>
10010dba:	696a      	ldr	r2, [r5, #20]
10010dbc:	9b04      	ldr	r3, [sp, #16]
10010dbe:	4694      	mov	ip, r2
10010dc0:	4463      	add	r3, ip
10010dc2:	616b      	str	r3, [r5, #20]
10010dc4:	7823      	ldrb	r3, [r4, #0]
10010dc6:	2b00      	cmp	r3, #0
10010dc8:	d07e      	beq.n	10010ec8 <_vfiprintf_r+0x208>
10010dca:	2201      	movs	r2, #1
10010dcc:	2300      	movs	r3, #0
10010dce:	4252      	negs	r2, r2
10010dd0:	606a      	str	r2, [r5, #4]
10010dd2:	a902      	add	r1, sp, #8
10010dd4:	3254      	adds	r2, #84	; 0x54
10010dd6:	1852      	adds	r2, r2, r1
10010dd8:	3401      	adds	r4, #1
10010dda:	602b      	str	r3, [r5, #0]
10010ddc:	60eb      	str	r3, [r5, #12]
10010dde:	60ab      	str	r3, [r5, #8]
10010de0:	7013      	strb	r3, [r2, #0]
10010de2:	65ab      	str	r3, [r5, #88]	; 0x58
10010de4:	7821      	ldrb	r1, [r4, #0]
10010de6:	2205      	movs	r2, #5
10010de8:	4841      	ldr	r0, [pc, #260]	; (10010ef0 <_vfiprintf_r+0x230>)
10010dea:	f000 faf5 	bl	100113d8 <memchr>
10010dee:	2800      	cmp	r0, #0
10010df0:	d008      	beq.n	10010e04 <_vfiprintf_r+0x144>
10010df2:	4b3f      	ldr	r3, [pc, #252]	; (10010ef0 <_vfiprintf_r+0x230>)
10010df4:	682a      	ldr	r2, [r5, #0]
10010df6:	1ac0      	subs	r0, r0, r3
10010df8:	2301      	movs	r3, #1
10010dfa:	4083      	lsls	r3, r0
10010dfc:	4313      	orrs	r3, r2
10010dfe:	602b      	str	r3, [r5, #0]
10010e00:	3401      	adds	r4, #1
10010e02:	e7ef      	b.n	10010de4 <_vfiprintf_r+0x124>
10010e04:	682b      	ldr	r3, [r5, #0]
10010e06:	06da      	lsls	r2, r3, #27
10010e08:	d504      	bpl.n	10010e14 <_vfiprintf_r+0x154>
10010e0a:	2253      	movs	r2, #83	; 0x53
10010e0c:	2120      	movs	r1, #32
10010e0e:	a802      	add	r0, sp, #8
10010e10:	1812      	adds	r2, r2, r0
10010e12:	7011      	strb	r1, [r2, #0]
10010e14:	071a      	lsls	r2, r3, #28
10010e16:	d504      	bpl.n	10010e22 <_vfiprintf_r+0x162>
10010e18:	2253      	movs	r2, #83	; 0x53
10010e1a:	212b      	movs	r1, #43	; 0x2b
10010e1c:	a802      	add	r0, sp, #8
10010e1e:	1812      	adds	r2, r2, r0
10010e20:	7011      	strb	r1, [r2, #0]
10010e22:	7822      	ldrb	r2, [r4, #0]
10010e24:	2a2a      	cmp	r2, #42	; 0x2a
10010e26:	d100      	bne.n	10010e2a <_vfiprintf_r+0x16a>
10010e28:	e77c      	b.n	10010d24 <_vfiprintf_r+0x64>
10010e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
10010e2c:	2000      	movs	r0, #0
10010e2e:	210a      	movs	r1, #10
10010e30:	e005      	b.n	10010e3e <_vfiprintf_r+0x17e>
10010e32:	4252      	negs	r2, r2
10010e34:	60ea      	str	r2, [r5, #12]
10010e36:	2202      	movs	r2, #2
10010e38:	4313      	orrs	r3, r2
10010e3a:	602b      	str	r3, [r5, #0]
10010e3c:	e77a      	b.n	10010d34 <_vfiprintf_r+0x74>
10010e3e:	7822      	ldrb	r2, [r4, #0]
10010e40:	3a30      	subs	r2, #48	; 0x30
10010e42:	2a09      	cmp	r2, #9
10010e44:	d804      	bhi.n	10010e50 <_vfiprintf_r+0x190>
10010e46:	434b      	muls	r3, r1
10010e48:	3401      	adds	r4, #1
10010e4a:	189b      	adds	r3, r3, r2
10010e4c:	2001      	movs	r0, #1
10010e4e:	e7f6      	b.n	10010e3e <_vfiprintf_r+0x17e>
10010e50:	2800      	cmp	r0, #0
10010e52:	d100      	bne.n	10010e56 <_vfiprintf_r+0x196>
10010e54:	e76f      	b.n	10010d36 <_vfiprintf_r+0x76>
10010e56:	9309      	str	r3, [sp, #36]	; 0x24
10010e58:	e76d      	b.n	10010d36 <_vfiprintf_r+0x76>
10010e5a:	7863      	ldrb	r3, [r4, #1]
10010e5c:	2b2a      	cmp	r3, #42	; 0x2a
10010e5e:	d10a      	bne.n	10010e76 <_vfiprintf_r+0x1b6>
10010e60:	9b05      	ldr	r3, [sp, #20]
10010e62:	3402      	adds	r4, #2
10010e64:	1d1a      	adds	r2, r3, #4
10010e66:	681b      	ldr	r3, [r3, #0]
10010e68:	9205      	str	r2, [sp, #20]
10010e6a:	2b00      	cmp	r3, #0
10010e6c:	da01      	bge.n	10010e72 <_vfiprintf_r+0x1b2>
10010e6e:	2301      	movs	r3, #1
10010e70:	425b      	negs	r3, r3
10010e72:	9307      	str	r3, [sp, #28]
10010e74:	e763      	b.n	10010d3e <_vfiprintf_r+0x7e>
10010e76:	2300      	movs	r3, #0
10010e78:	200a      	movs	r0, #10
10010e7a:	001a      	movs	r2, r3
10010e7c:	3401      	adds	r4, #1
10010e7e:	606b      	str	r3, [r5, #4]
10010e80:	7821      	ldrb	r1, [r4, #0]
10010e82:	3930      	subs	r1, #48	; 0x30
10010e84:	2909      	cmp	r1, #9
10010e86:	d804      	bhi.n	10010e92 <_vfiprintf_r+0x1d2>
10010e88:	4342      	muls	r2, r0
10010e8a:	3401      	adds	r4, #1
10010e8c:	1852      	adds	r2, r2, r1
10010e8e:	2301      	movs	r3, #1
10010e90:	e7f6      	b.n	10010e80 <_vfiprintf_r+0x1c0>
10010e92:	2b00      	cmp	r3, #0
10010e94:	d100      	bne.n	10010e98 <_vfiprintf_r+0x1d8>
10010e96:	e752      	b.n	10010d3e <_vfiprintf_r+0x7e>
10010e98:	9207      	str	r2, [sp, #28]
10010e9a:	e750      	b.n	10010d3e <_vfiprintf_r+0x7e>
10010e9c:	ab05      	add	r3, sp, #20
10010e9e:	9300      	str	r3, [sp, #0]
10010ea0:	003a      	movs	r2, r7
10010ea2:	4b14      	ldr	r3, [pc, #80]	; (10010ef4 <_vfiprintf_r+0x234>)
10010ea4:	0029      	movs	r1, r5
10010ea6:	0030      	movs	r0, r6
10010ea8:	e000      	b.n	10010eac <_vfiprintf_r+0x1ec>
10010eaa:	bf00      	nop
10010eac:	e007      	b.n	10010ebe <_vfiprintf_r+0x1fe>
10010eae:	ab05      	add	r3, sp, #20
10010eb0:	9300      	str	r3, [sp, #0]
10010eb2:	003a      	movs	r2, r7
10010eb4:	4b0f      	ldr	r3, [pc, #60]	; (10010ef4 <_vfiprintf_r+0x234>)
10010eb6:	0029      	movs	r1, r5
10010eb8:	0030      	movs	r0, r6
10010eba:	f000 f88b 	bl	10010fd4 <_printf_i>
10010ebe:	9003      	str	r0, [sp, #12]
10010ec0:	9b03      	ldr	r3, [sp, #12]
10010ec2:	3301      	adds	r3, #1
10010ec4:	d000      	beq.n	10010ec8 <_vfiprintf_r+0x208>
10010ec6:	e75e      	b.n	10010d86 <_vfiprintf_r+0xc6>
10010ec8:	89bb      	ldrh	r3, [r7, #12]
10010eca:	065b      	lsls	r3, r3, #25
10010ecc:	d500      	bpl.n	10010ed0 <_vfiprintf_r+0x210>
10010ece:	e726      	b.n	10010d1e <_vfiprintf_r+0x5e>
10010ed0:	980b      	ldr	r0, [sp, #44]	; 0x2c
10010ed2:	b01f      	add	sp, #124	; 0x7c
10010ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010ed6:	46c0      	nop			; (mov r8, r8)
10010ed8:	10012348 	.word	0x10012348
10010edc:	10012368 	.word	0x10012368
10010ee0:	10012388 	.word	0x10012388
10010ee4:	100123ae 	.word	0x100123ae
10010ee8:	100123b2 	.word	0x100123b2
10010eec:	00000000 	.word	0x00000000
10010ef0:	100123a8 	.word	0x100123a8
10010ef4:	10010c9b 	.word	0x10010c9b

10010ef8 <_printf_common>:
10010ef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010efa:	0017      	movs	r7, r2
10010efc:	9301      	str	r3, [sp, #4]
10010efe:	688a      	ldr	r2, [r1, #8]
10010f00:	690b      	ldr	r3, [r1, #16]
10010f02:	9000      	str	r0, [sp, #0]
10010f04:	000c      	movs	r4, r1
10010f06:	4293      	cmp	r3, r2
10010f08:	da00      	bge.n	10010f0c <_printf_common+0x14>
10010f0a:	0013      	movs	r3, r2
10010f0c:	0022      	movs	r2, r4
10010f0e:	603b      	str	r3, [r7, #0]
10010f10:	3243      	adds	r2, #67	; 0x43
10010f12:	7812      	ldrb	r2, [r2, #0]
10010f14:	2a00      	cmp	r2, #0
10010f16:	d001      	beq.n	10010f1c <_printf_common+0x24>
10010f18:	3301      	adds	r3, #1
10010f1a:	603b      	str	r3, [r7, #0]
10010f1c:	6823      	ldr	r3, [r4, #0]
10010f1e:	069b      	lsls	r3, r3, #26
10010f20:	d502      	bpl.n	10010f28 <_printf_common+0x30>
10010f22:	683b      	ldr	r3, [r7, #0]
10010f24:	3302      	adds	r3, #2
10010f26:	603b      	str	r3, [r7, #0]
10010f28:	2506      	movs	r5, #6
10010f2a:	6823      	ldr	r3, [r4, #0]
10010f2c:	401d      	ands	r5, r3
10010f2e:	d01e      	beq.n	10010f6e <_printf_common+0x76>
10010f30:	0023      	movs	r3, r4
10010f32:	3343      	adds	r3, #67	; 0x43
10010f34:	781b      	ldrb	r3, [r3, #0]
10010f36:	1e5a      	subs	r2, r3, #1
10010f38:	4193      	sbcs	r3, r2
10010f3a:	6822      	ldr	r2, [r4, #0]
10010f3c:	0692      	lsls	r2, r2, #26
10010f3e:	d51c      	bpl.n	10010f7a <_printf_common+0x82>
10010f40:	2030      	movs	r0, #48	; 0x30
10010f42:	18e1      	adds	r1, r4, r3
10010f44:	3143      	adds	r1, #67	; 0x43
10010f46:	7008      	strb	r0, [r1, #0]
10010f48:	0021      	movs	r1, r4
10010f4a:	1c5a      	adds	r2, r3, #1
10010f4c:	3145      	adds	r1, #69	; 0x45
10010f4e:	7809      	ldrb	r1, [r1, #0]
10010f50:	18a2      	adds	r2, r4, r2
10010f52:	3243      	adds	r2, #67	; 0x43
10010f54:	3302      	adds	r3, #2
10010f56:	7011      	strb	r1, [r2, #0]
10010f58:	e00f      	b.n	10010f7a <_printf_common+0x82>
10010f5a:	0022      	movs	r2, r4
10010f5c:	2301      	movs	r3, #1
10010f5e:	3219      	adds	r2, #25
10010f60:	9901      	ldr	r1, [sp, #4]
10010f62:	9800      	ldr	r0, [sp, #0]
10010f64:	9e08      	ldr	r6, [sp, #32]
10010f66:	47b0      	blx	r6
10010f68:	1c43      	adds	r3, r0, #1
10010f6a:	d00e      	beq.n	10010f8a <_printf_common+0x92>
10010f6c:	3501      	adds	r5, #1
10010f6e:	68e3      	ldr	r3, [r4, #12]
10010f70:	683a      	ldr	r2, [r7, #0]
10010f72:	1a9b      	subs	r3, r3, r2
10010f74:	429d      	cmp	r5, r3
10010f76:	dbf0      	blt.n	10010f5a <_printf_common+0x62>
10010f78:	e7da      	b.n	10010f30 <_printf_common+0x38>
10010f7a:	0022      	movs	r2, r4
10010f7c:	9901      	ldr	r1, [sp, #4]
10010f7e:	3243      	adds	r2, #67	; 0x43
10010f80:	9800      	ldr	r0, [sp, #0]
10010f82:	9d08      	ldr	r5, [sp, #32]
10010f84:	47a8      	blx	r5
10010f86:	1c43      	adds	r3, r0, #1
10010f88:	d102      	bne.n	10010f90 <_printf_common+0x98>
10010f8a:	2001      	movs	r0, #1
10010f8c:	4240      	negs	r0, r0
10010f8e:	e020      	b.n	10010fd2 <_printf_common+0xda>
10010f90:	2306      	movs	r3, #6
10010f92:	6820      	ldr	r0, [r4, #0]
10010f94:	68e1      	ldr	r1, [r4, #12]
10010f96:	683a      	ldr	r2, [r7, #0]
10010f98:	4003      	ands	r3, r0
10010f9a:	2500      	movs	r5, #0
10010f9c:	2b04      	cmp	r3, #4
10010f9e:	d103      	bne.n	10010fa8 <_printf_common+0xb0>
10010fa0:	1a8d      	subs	r5, r1, r2
10010fa2:	43eb      	mvns	r3, r5
10010fa4:	17db      	asrs	r3, r3, #31
10010fa6:	401d      	ands	r5, r3
10010fa8:	68a3      	ldr	r3, [r4, #8]
10010faa:	6922      	ldr	r2, [r4, #16]
10010fac:	4293      	cmp	r3, r2
10010fae:	dd01      	ble.n	10010fb4 <_printf_common+0xbc>
10010fb0:	1a9b      	subs	r3, r3, r2
10010fb2:	18ed      	adds	r5, r5, r3
10010fb4:	2700      	movs	r7, #0
10010fb6:	42bd      	cmp	r5, r7
10010fb8:	d00a      	beq.n	10010fd0 <_printf_common+0xd8>
10010fba:	0022      	movs	r2, r4
10010fbc:	2301      	movs	r3, #1
10010fbe:	321a      	adds	r2, #26
10010fc0:	9901      	ldr	r1, [sp, #4]
10010fc2:	9800      	ldr	r0, [sp, #0]
10010fc4:	9e08      	ldr	r6, [sp, #32]
10010fc6:	47b0      	blx	r6
10010fc8:	1c43      	adds	r3, r0, #1
10010fca:	d0de      	beq.n	10010f8a <_printf_common+0x92>
10010fcc:	3701      	adds	r7, #1
10010fce:	e7f2      	b.n	10010fb6 <_printf_common+0xbe>
10010fd0:	2000      	movs	r0, #0
10010fd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10010fd4 <_printf_i>:
10010fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
10010fd6:	b08b      	sub	sp, #44	; 0x2c
10010fd8:	9206      	str	r2, [sp, #24]
10010fda:	000a      	movs	r2, r1
10010fdc:	3243      	adds	r2, #67	; 0x43
10010fde:	9307      	str	r3, [sp, #28]
10010fe0:	9005      	str	r0, [sp, #20]
10010fe2:	9204      	str	r2, [sp, #16]
10010fe4:	7e0a      	ldrb	r2, [r1, #24]
10010fe6:	000c      	movs	r4, r1
10010fe8:	9b10      	ldr	r3, [sp, #64]	; 0x40
10010fea:	2a6e      	cmp	r2, #110	; 0x6e
10010fec:	d100      	bne.n	10010ff0 <_printf_i+0x1c>
10010fee:	e0ab      	b.n	10011148 <_printf_i+0x174>
10010ff0:	d811      	bhi.n	10011016 <_printf_i+0x42>
10010ff2:	2a63      	cmp	r2, #99	; 0x63
10010ff4:	d022      	beq.n	1001103c <_printf_i+0x68>
10010ff6:	d809      	bhi.n	1001100c <_printf_i+0x38>
10010ff8:	2a00      	cmp	r2, #0
10010ffa:	d100      	bne.n	10010ffe <_printf_i+0x2a>
10010ffc:	e0b5      	b.n	1001116a <_printf_i+0x196>
10010ffe:	2a58      	cmp	r2, #88	; 0x58
10011000:	d000      	beq.n	10011004 <_printf_i+0x30>
10011002:	e0c5      	b.n	10011190 <_printf_i+0x1bc>
10011004:	3145      	adds	r1, #69	; 0x45
10011006:	700a      	strb	r2, [r1, #0]
10011008:	4a81      	ldr	r2, [pc, #516]	; (10011210 <_printf_i+0x23c>)
1001100a:	e04f      	b.n	100110ac <_printf_i+0xd8>
1001100c:	2a64      	cmp	r2, #100	; 0x64
1001100e:	d01d      	beq.n	1001104c <_printf_i+0x78>
10011010:	2a69      	cmp	r2, #105	; 0x69
10011012:	d01b      	beq.n	1001104c <_printf_i+0x78>
10011014:	e0bc      	b.n	10011190 <_printf_i+0x1bc>
10011016:	2a73      	cmp	r2, #115	; 0x73
10011018:	d100      	bne.n	1001101c <_printf_i+0x48>
1001101a:	e0aa      	b.n	10011172 <_printf_i+0x19e>
1001101c:	d809      	bhi.n	10011032 <_printf_i+0x5e>
1001101e:	2a6f      	cmp	r2, #111	; 0x6f
10011020:	d029      	beq.n	10011076 <_printf_i+0xa2>
10011022:	2a70      	cmp	r2, #112	; 0x70
10011024:	d000      	beq.n	10011028 <_printf_i+0x54>
10011026:	e0b3      	b.n	10011190 <_printf_i+0x1bc>
10011028:	2220      	movs	r2, #32
1001102a:	6809      	ldr	r1, [r1, #0]
1001102c:	430a      	orrs	r2, r1
1001102e:	6022      	str	r2, [r4, #0]
10011030:	e037      	b.n	100110a2 <_printf_i+0xce>
10011032:	2a75      	cmp	r2, #117	; 0x75
10011034:	d01f      	beq.n	10011076 <_printf_i+0xa2>
10011036:	2a78      	cmp	r2, #120	; 0x78
10011038:	d033      	beq.n	100110a2 <_printf_i+0xce>
1001103a:	e0a9      	b.n	10011190 <_printf_i+0x1bc>
1001103c:	000e      	movs	r6, r1
1001103e:	681a      	ldr	r2, [r3, #0]
10011040:	3642      	adds	r6, #66	; 0x42
10011042:	1d11      	adds	r1, r2, #4
10011044:	6019      	str	r1, [r3, #0]
10011046:	6813      	ldr	r3, [r2, #0]
10011048:	7033      	strb	r3, [r6, #0]
1001104a:	e0a4      	b.n	10011196 <_printf_i+0x1c2>
1001104c:	6821      	ldr	r1, [r4, #0]
1001104e:	681a      	ldr	r2, [r3, #0]
10011050:	0608      	lsls	r0, r1, #24
10011052:	d406      	bmi.n	10011062 <_printf_i+0x8e>
10011054:	0649      	lsls	r1, r1, #25
10011056:	d504      	bpl.n	10011062 <_printf_i+0x8e>
10011058:	1d11      	adds	r1, r2, #4
1001105a:	6019      	str	r1, [r3, #0]
1001105c:	2300      	movs	r3, #0
1001105e:	5ed5      	ldrsh	r5, [r2, r3]
10011060:	e002      	b.n	10011068 <_printf_i+0x94>
10011062:	1d11      	adds	r1, r2, #4
10011064:	6019      	str	r1, [r3, #0]
10011066:	6815      	ldr	r5, [r2, #0]
10011068:	2d00      	cmp	r5, #0
1001106a:	da3b      	bge.n	100110e4 <_printf_i+0x110>
1001106c:	232d      	movs	r3, #45	; 0x2d
1001106e:	9a04      	ldr	r2, [sp, #16]
10011070:	426d      	negs	r5, r5
10011072:	7013      	strb	r3, [r2, #0]
10011074:	e036      	b.n	100110e4 <_printf_i+0x110>
10011076:	6821      	ldr	r1, [r4, #0]
10011078:	681a      	ldr	r2, [r3, #0]
1001107a:	0608      	lsls	r0, r1, #24
1001107c:	d406      	bmi.n	1001108c <_printf_i+0xb8>
1001107e:	0649      	lsls	r1, r1, #25
10011080:	d504      	bpl.n	1001108c <_printf_i+0xb8>
10011082:	6815      	ldr	r5, [r2, #0]
10011084:	1d11      	adds	r1, r2, #4
10011086:	6019      	str	r1, [r3, #0]
10011088:	b2ad      	uxth	r5, r5
1001108a:	e002      	b.n	10011092 <_printf_i+0xbe>
1001108c:	1d11      	adds	r1, r2, #4
1001108e:	6019      	str	r1, [r3, #0]
10011090:	6815      	ldr	r5, [r2, #0]
10011092:	4b5f      	ldr	r3, [pc, #380]	; (10011210 <_printf_i+0x23c>)
10011094:	7e22      	ldrb	r2, [r4, #24]
10011096:	9303      	str	r3, [sp, #12]
10011098:	2708      	movs	r7, #8
1001109a:	2a6f      	cmp	r2, #111	; 0x6f
1001109c:	d01d      	beq.n	100110da <_printf_i+0x106>
1001109e:	270a      	movs	r7, #10
100110a0:	e01b      	b.n	100110da <_printf_i+0x106>
100110a2:	0022      	movs	r2, r4
100110a4:	2178      	movs	r1, #120	; 0x78
100110a6:	3245      	adds	r2, #69	; 0x45
100110a8:	7011      	strb	r1, [r2, #0]
100110aa:	4a5a      	ldr	r2, [pc, #360]	; (10011214 <_printf_i+0x240>)
100110ac:	6819      	ldr	r1, [r3, #0]
100110ae:	9203      	str	r2, [sp, #12]
100110b0:	1d08      	adds	r0, r1, #4
100110b2:	6822      	ldr	r2, [r4, #0]
100110b4:	6018      	str	r0, [r3, #0]
100110b6:	680d      	ldr	r5, [r1, #0]
100110b8:	0610      	lsls	r0, r2, #24
100110ba:	d402      	bmi.n	100110c2 <_printf_i+0xee>
100110bc:	0650      	lsls	r0, r2, #25
100110be:	d500      	bpl.n	100110c2 <_printf_i+0xee>
100110c0:	b2ad      	uxth	r5, r5
100110c2:	07d3      	lsls	r3, r2, #31
100110c4:	d502      	bpl.n	100110cc <_printf_i+0xf8>
100110c6:	2320      	movs	r3, #32
100110c8:	431a      	orrs	r2, r3
100110ca:	6022      	str	r2, [r4, #0]
100110cc:	2710      	movs	r7, #16
100110ce:	2d00      	cmp	r5, #0
100110d0:	d103      	bne.n	100110da <_printf_i+0x106>
100110d2:	2320      	movs	r3, #32
100110d4:	6822      	ldr	r2, [r4, #0]
100110d6:	439a      	bics	r2, r3
100110d8:	6022      	str	r2, [r4, #0]
100110da:	0023      	movs	r3, r4
100110dc:	2200      	movs	r2, #0
100110de:	3343      	adds	r3, #67	; 0x43
100110e0:	701a      	strb	r2, [r3, #0]
100110e2:	e002      	b.n	100110ea <_printf_i+0x116>
100110e4:	270a      	movs	r7, #10
100110e6:	4b4a      	ldr	r3, [pc, #296]	; (10011210 <_printf_i+0x23c>)
100110e8:	9303      	str	r3, [sp, #12]
100110ea:	6863      	ldr	r3, [r4, #4]
100110ec:	60a3      	str	r3, [r4, #8]
100110ee:	2b00      	cmp	r3, #0
100110f0:	db09      	blt.n	10011106 <_printf_i+0x132>
100110f2:	2204      	movs	r2, #4
100110f4:	6821      	ldr	r1, [r4, #0]
100110f6:	4391      	bics	r1, r2
100110f8:	6021      	str	r1, [r4, #0]
100110fa:	2d00      	cmp	r5, #0
100110fc:	d105      	bne.n	1001110a <_printf_i+0x136>
100110fe:	9e04      	ldr	r6, [sp, #16]
10011100:	2b00      	cmp	r3, #0
10011102:	d011      	beq.n	10011128 <_printf_i+0x154>
10011104:	e07b      	b.n	100111fe <_printf_i+0x22a>
10011106:	2d00      	cmp	r5, #0
10011108:	d079      	beq.n	100111fe <_printf_i+0x22a>
1001110a:	9e04      	ldr	r6, [sp, #16]
1001110c:	0028      	movs	r0, r5
1001110e:	0039      	movs	r1, r7
10011110:	f7fd ff86 	bl	1000f020 <__aeabi_uidivmod>
10011114:	9b03      	ldr	r3, [sp, #12]
10011116:	3e01      	subs	r6, #1
10011118:	5c5b      	ldrb	r3, [r3, r1]
1001111a:	0028      	movs	r0, r5
1001111c:	7033      	strb	r3, [r6, #0]
1001111e:	0039      	movs	r1, r7
10011120:	f7fd fef8 	bl	1000ef14 <__aeabi_uidiv>
10011124:	1e05      	subs	r5, r0, #0
10011126:	d1f1      	bne.n	1001110c <_printf_i+0x138>
10011128:	2f08      	cmp	r7, #8
1001112a:	d109      	bne.n	10011140 <_printf_i+0x16c>
1001112c:	6823      	ldr	r3, [r4, #0]
1001112e:	07db      	lsls	r3, r3, #31
10011130:	d506      	bpl.n	10011140 <_printf_i+0x16c>
10011132:	6863      	ldr	r3, [r4, #4]
10011134:	6922      	ldr	r2, [r4, #16]
10011136:	4293      	cmp	r3, r2
10011138:	dc02      	bgt.n	10011140 <_printf_i+0x16c>
1001113a:	2330      	movs	r3, #48	; 0x30
1001113c:	3e01      	subs	r6, #1
1001113e:	7033      	strb	r3, [r6, #0]
10011140:	9b04      	ldr	r3, [sp, #16]
10011142:	1b9b      	subs	r3, r3, r6
10011144:	6123      	str	r3, [r4, #16]
10011146:	e02b      	b.n	100111a0 <_printf_i+0x1cc>
10011148:	6809      	ldr	r1, [r1, #0]
1001114a:	681a      	ldr	r2, [r3, #0]
1001114c:	0608      	lsls	r0, r1, #24
1001114e:	d407      	bmi.n	10011160 <_printf_i+0x18c>
10011150:	0649      	lsls	r1, r1, #25
10011152:	d505      	bpl.n	10011160 <_printf_i+0x18c>
10011154:	1d11      	adds	r1, r2, #4
10011156:	6019      	str	r1, [r3, #0]
10011158:	6813      	ldr	r3, [r2, #0]
1001115a:	8aa2      	ldrh	r2, [r4, #20]
1001115c:	801a      	strh	r2, [r3, #0]
1001115e:	e004      	b.n	1001116a <_printf_i+0x196>
10011160:	1d11      	adds	r1, r2, #4
10011162:	6019      	str	r1, [r3, #0]
10011164:	6813      	ldr	r3, [r2, #0]
10011166:	6962      	ldr	r2, [r4, #20]
10011168:	601a      	str	r2, [r3, #0]
1001116a:	2300      	movs	r3, #0
1001116c:	9e04      	ldr	r6, [sp, #16]
1001116e:	6123      	str	r3, [r4, #16]
10011170:	e016      	b.n	100111a0 <_printf_i+0x1cc>
10011172:	681a      	ldr	r2, [r3, #0]
10011174:	1d11      	adds	r1, r2, #4
10011176:	6019      	str	r1, [r3, #0]
10011178:	6816      	ldr	r6, [r2, #0]
1001117a:	2100      	movs	r1, #0
1001117c:	6862      	ldr	r2, [r4, #4]
1001117e:	0030      	movs	r0, r6
10011180:	f000 f92a 	bl	100113d8 <memchr>
10011184:	2800      	cmp	r0, #0
10011186:	d001      	beq.n	1001118c <_printf_i+0x1b8>
10011188:	1b80      	subs	r0, r0, r6
1001118a:	6060      	str	r0, [r4, #4]
1001118c:	6863      	ldr	r3, [r4, #4]
1001118e:	e003      	b.n	10011198 <_printf_i+0x1c4>
10011190:	0026      	movs	r6, r4
10011192:	3642      	adds	r6, #66	; 0x42
10011194:	7032      	strb	r2, [r6, #0]
10011196:	2301      	movs	r3, #1
10011198:	6123      	str	r3, [r4, #16]
1001119a:	2300      	movs	r3, #0
1001119c:	9a04      	ldr	r2, [sp, #16]
1001119e:	7013      	strb	r3, [r2, #0]
100111a0:	9b07      	ldr	r3, [sp, #28]
100111a2:	aa09      	add	r2, sp, #36	; 0x24
100111a4:	9300      	str	r3, [sp, #0]
100111a6:	0021      	movs	r1, r4
100111a8:	9b06      	ldr	r3, [sp, #24]
100111aa:	9805      	ldr	r0, [sp, #20]
100111ac:	f7ff fea4 	bl	10010ef8 <_printf_common>
100111b0:	1c43      	adds	r3, r0, #1
100111b2:	d102      	bne.n	100111ba <_printf_i+0x1e6>
100111b4:	2001      	movs	r0, #1
100111b6:	4240      	negs	r0, r0
100111b8:	e027      	b.n	1001120a <_printf_i+0x236>
100111ba:	6923      	ldr	r3, [r4, #16]
100111bc:	0032      	movs	r2, r6
100111be:	9906      	ldr	r1, [sp, #24]
100111c0:	9805      	ldr	r0, [sp, #20]
100111c2:	9d07      	ldr	r5, [sp, #28]
100111c4:	47a8      	blx	r5
100111c6:	1c43      	adds	r3, r0, #1
100111c8:	d0f4      	beq.n	100111b4 <_printf_i+0x1e0>
100111ca:	6823      	ldr	r3, [r4, #0]
100111cc:	2500      	movs	r5, #0
100111ce:	079b      	lsls	r3, r3, #30
100111d0:	d40f      	bmi.n	100111f2 <_printf_i+0x21e>
100111d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
100111d4:	68e0      	ldr	r0, [r4, #12]
100111d6:	4298      	cmp	r0, r3
100111d8:	da17      	bge.n	1001120a <_printf_i+0x236>
100111da:	0018      	movs	r0, r3
100111dc:	e015      	b.n	1001120a <_printf_i+0x236>
100111de:	0022      	movs	r2, r4
100111e0:	2301      	movs	r3, #1
100111e2:	3219      	adds	r2, #25
100111e4:	9906      	ldr	r1, [sp, #24]
100111e6:	9805      	ldr	r0, [sp, #20]
100111e8:	9e07      	ldr	r6, [sp, #28]
100111ea:	47b0      	blx	r6
100111ec:	1c43      	adds	r3, r0, #1
100111ee:	d0e1      	beq.n	100111b4 <_printf_i+0x1e0>
100111f0:	3501      	adds	r5, #1
100111f2:	68e3      	ldr	r3, [r4, #12]
100111f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
100111f6:	1a9b      	subs	r3, r3, r2
100111f8:	429d      	cmp	r5, r3
100111fa:	dbf0      	blt.n	100111de <_printf_i+0x20a>
100111fc:	e7e9      	b.n	100111d2 <_printf_i+0x1fe>
100111fe:	0026      	movs	r6, r4
10011200:	9b03      	ldr	r3, [sp, #12]
10011202:	3642      	adds	r6, #66	; 0x42
10011204:	781b      	ldrb	r3, [r3, #0]
10011206:	7033      	strb	r3, [r6, #0]
10011208:	e78e      	b.n	10011128 <_printf_i+0x154>
1001120a:	b00b      	add	sp, #44	; 0x2c
1001120c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001120e:	46c0      	nop			; (mov r8, r8)
10011210:	100123b9 	.word	0x100123b9
10011214:	100123ca 	.word	0x100123ca

10011218 <_putc_r>:
10011218:	b570      	push	{r4, r5, r6, lr}
1001121a:	0006      	movs	r6, r0
1001121c:	000d      	movs	r5, r1
1001121e:	0014      	movs	r4, r2
10011220:	2800      	cmp	r0, #0
10011222:	d004      	beq.n	1001122e <_putc_r+0x16>
10011224:	6983      	ldr	r3, [r0, #24]
10011226:	2b00      	cmp	r3, #0
10011228:	d101      	bne.n	1001122e <_putc_r+0x16>
1001122a:	f7ff fc29 	bl	10010a80 <__sinit>
1001122e:	4b12      	ldr	r3, [pc, #72]	; (10011278 <_putc_r+0x60>)
10011230:	429c      	cmp	r4, r3
10011232:	d101      	bne.n	10011238 <_putc_r+0x20>
10011234:	6874      	ldr	r4, [r6, #4]
10011236:	e008      	b.n	1001124a <_putc_r+0x32>
10011238:	4b10      	ldr	r3, [pc, #64]	; (1001127c <_putc_r+0x64>)
1001123a:	429c      	cmp	r4, r3
1001123c:	d101      	bne.n	10011242 <_putc_r+0x2a>
1001123e:	68b4      	ldr	r4, [r6, #8]
10011240:	e003      	b.n	1001124a <_putc_r+0x32>
10011242:	4b0f      	ldr	r3, [pc, #60]	; (10011280 <_putc_r+0x68>)
10011244:	429c      	cmp	r4, r3
10011246:	d100      	bne.n	1001124a <_putc_r+0x32>
10011248:	68f4      	ldr	r4, [r6, #12]
1001124a:	68a3      	ldr	r3, [r4, #8]
1001124c:	3b01      	subs	r3, #1
1001124e:	60a3      	str	r3, [r4, #8]
10011250:	2b00      	cmp	r3, #0
10011252:	da05      	bge.n	10011260 <_putc_r+0x48>
10011254:	69a2      	ldr	r2, [r4, #24]
10011256:	4293      	cmp	r3, r2
10011258:	db08      	blt.n	1001126c <_putc_r+0x54>
1001125a:	b2eb      	uxtb	r3, r5
1001125c:	2b0a      	cmp	r3, #10
1001125e:	d005      	beq.n	1001126c <_putc_r+0x54>
10011260:	6823      	ldr	r3, [r4, #0]
10011262:	b2e8      	uxtb	r0, r5
10011264:	1c5a      	adds	r2, r3, #1
10011266:	6022      	str	r2, [r4, #0]
10011268:	701d      	strb	r5, [r3, #0]
1001126a:	e004      	b.n	10011276 <_putc_r+0x5e>
1001126c:	0022      	movs	r2, r4
1001126e:	0029      	movs	r1, r5
10011270:	0030      	movs	r0, r6
10011272:	f7ff fa43 	bl	100106fc <__swbuf_r>
10011276:	bd70      	pop	{r4, r5, r6, pc}
10011278:	10012348 	.word	0x10012348
1001127c:	10012368 	.word	0x10012368
10011280:	10012388 	.word	0x10012388

10011284 <__sread>:
10011284:	b570      	push	{r4, r5, r6, lr}
10011286:	000c      	movs	r4, r1
10011288:	250e      	movs	r5, #14
1001128a:	5f49      	ldrsh	r1, [r1, r5]
1001128c:	f000 f8b0 	bl	100113f0 <_read_r>
10011290:	2800      	cmp	r0, #0
10011292:	db03      	blt.n	1001129c <__sread+0x18>
10011294:	6d63      	ldr	r3, [r4, #84]	; 0x54
10011296:	181b      	adds	r3, r3, r0
10011298:	6563      	str	r3, [r4, #84]	; 0x54
1001129a:	e003      	b.n	100112a4 <__sread+0x20>
1001129c:	89a2      	ldrh	r2, [r4, #12]
1001129e:	4b02      	ldr	r3, [pc, #8]	; (100112a8 <__sread+0x24>)
100112a0:	4013      	ands	r3, r2
100112a2:	81a3      	strh	r3, [r4, #12]
100112a4:	bd70      	pop	{r4, r5, r6, pc}
100112a6:	46c0      	nop			; (mov r8, r8)
100112a8:	ffffefff 	.word	0xffffefff

100112ac <__swrite>:
100112ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100112ae:	001f      	movs	r7, r3
100112b0:	898b      	ldrh	r3, [r1, #12]
100112b2:	0005      	movs	r5, r0
100112b4:	000c      	movs	r4, r1
100112b6:	0016      	movs	r6, r2
100112b8:	05db      	lsls	r3, r3, #23
100112ba:	d505      	bpl.n	100112c8 <__swrite+0x1c>
100112bc:	230e      	movs	r3, #14
100112be:	5ec9      	ldrsh	r1, [r1, r3]
100112c0:	2200      	movs	r2, #0
100112c2:	2302      	movs	r3, #2
100112c4:	f000 f874 	bl	100113b0 <_lseek_r>
100112c8:	89a2      	ldrh	r2, [r4, #12]
100112ca:	4b05      	ldr	r3, [pc, #20]	; (100112e0 <__swrite+0x34>)
100112cc:	0028      	movs	r0, r5
100112ce:	4013      	ands	r3, r2
100112d0:	81a3      	strh	r3, [r4, #12]
100112d2:	0032      	movs	r2, r6
100112d4:	230e      	movs	r3, #14
100112d6:	5ee1      	ldrsh	r1, [r4, r3]
100112d8:	003b      	movs	r3, r7
100112da:	f000 f81f 	bl	1001131c <_write_r>
100112de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100112e0:	ffffefff 	.word	0xffffefff

100112e4 <__sseek>:
100112e4:	b570      	push	{r4, r5, r6, lr}
100112e6:	000c      	movs	r4, r1
100112e8:	250e      	movs	r5, #14
100112ea:	5f49      	ldrsh	r1, [r1, r5]
100112ec:	f000 f860 	bl	100113b0 <_lseek_r>
100112f0:	89a3      	ldrh	r3, [r4, #12]
100112f2:	1c42      	adds	r2, r0, #1
100112f4:	d103      	bne.n	100112fe <__sseek+0x1a>
100112f6:	4a05      	ldr	r2, [pc, #20]	; (1001130c <__sseek+0x28>)
100112f8:	4013      	ands	r3, r2
100112fa:	81a3      	strh	r3, [r4, #12]
100112fc:	e004      	b.n	10011308 <__sseek+0x24>
100112fe:	2280      	movs	r2, #128	; 0x80
10011300:	0152      	lsls	r2, r2, #5
10011302:	4313      	orrs	r3, r2
10011304:	81a3      	strh	r3, [r4, #12]
10011306:	6560      	str	r0, [r4, #84]	; 0x54
10011308:	bd70      	pop	{r4, r5, r6, pc}
1001130a:	46c0      	nop			; (mov r8, r8)
1001130c:	ffffefff 	.word	0xffffefff

10011310 <__sclose>:
10011310:	b510      	push	{r4, lr}
10011312:	230e      	movs	r3, #14
10011314:	5ec9      	ldrsh	r1, [r1, r3]
10011316:	f000 f815 	bl	10011344 <_close_r>
1001131a:	bd10      	pop	{r4, pc}

1001131c <_write_r>:
1001131c:	b570      	push	{r4, r5, r6, lr}
1001131e:	0005      	movs	r5, r0
10011320:	0008      	movs	r0, r1
10011322:	0011      	movs	r1, r2
10011324:	2200      	movs	r2, #0
10011326:	4c06      	ldr	r4, [pc, #24]	; (10011340 <_write_r+0x24>)
10011328:	6022      	str	r2, [r4, #0]
1001132a:	001a      	movs	r2, r3
1001132c:	f7f9 fe04 	bl	1000af38 <_write>
10011330:	1c43      	adds	r3, r0, #1
10011332:	d103      	bne.n	1001133c <_write_r+0x20>
10011334:	6823      	ldr	r3, [r4, #0]
10011336:	2b00      	cmp	r3, #0
10011338:	d000      	beq.n	1001133c <_write_r+0x20>
1001133a:	602b      	str	r3, [r5, #0]
1001133c:	bd70      	pop	{r4, r5, r6, pc}
1001133e:	46c0      	nop			; (mov r8, r8)
10011340:	10014c94 	.word	0x10014c94

10011344 <_close_r>:
10011344:	2300      	movs	r3, #0
10011346:	b570      	push	{r4, r5, r6, lr}
10011348:	4c06      	ldr	r4, [pc, #24]	; (10011364 <_close_r+0x20>)
1001134a:	0005      	movs	r5, r0
1001134c:	0008      	movs	r0, r1
1001134e:	6023      	str	r3, [r4, #0]
10011350:	f7fb f896 	bl	1000c480 <_close>
10011354:	1c43      	adds	r3, r0, #1
10011356:	d103      	bne.n	10011360 <_close_r+0x1c>
10011358:	6823      	ldr	r3, [r4, #0]
1001135a:	2b00      	cmp	r3, #0
1001135c:	d000      	beq.n	10011360 <_close_r+0x1c>
1001135e:	602b      	str	r3, [r5, #0]
10011360:	bd70      	pop	{r4, r5, r6, pc}
10011362:	46c0      	nop			; (mov r8, r8)
10011364:	10014c94 	.word	0x10014c94

10011368 <_fstat_r>:
10011368:	2300      	movs	r3, #0
1001136a:	b570      	push	{r4, r5, r6, lr}
1001136c:	4c06      	ldr	r4, [pc, #24]	; (10011388 <_fstat_r+0x20>)
1001136e:	0005      	movs	r5, r0
10011370:	0008      	movs	r0, r1
10011372:	0011      	movs	r1, r2
10011374:	6023      	str	r3, [r4, #0]
10011376:	f7fb f887 	bl	1000c488 <_fstat>
1001137a:	1c43      	adds	r3, r0, #1
1001137c:	d103      	bne.n	10011386 <_fstat_r+0x1e>
1001137e:	6823      	ldr	r3, [r4, #0]
10011380:	2b00      	cmp	r3, #0
10011382:	d000      	beq.n	10011386 <_fstat_r+0x1e>
10011384:	602b      	str	r3, [r5, #0]
10011386:	bd70      	pop	{r4, r5, r6, pc}
10011388:	10014c94 	.word	0x10014c94

1001138c <_isatty_r>:
1001138c:	2300      	movs	r3, #0
1001138e:	b570      	push	{r4, r5, r6, lr}
10011390:	4c06      	ldr	r4, [pc, #24]	; (100113ac <_isatty_r+0x20>)
10011392:	0005      	movs	r5, r0
10011394:	0008      	movs	r0, r1
10011396:	6023      	str	r3, [r4, #0]
10011398:	f7fb f87c 	bl	1000c494 <_isatty>
1001139c:	1c43      	adds	r3, r0, #1
1001139e:	d103      	bne.n	100113a8 <_isatty_r+0x1c>
100113a0:	6823      	ldr	r3, [r4, #0]
100113a2:	2b00      	cmp	r3, #0
100113a4:	d000      	beq.n	100113a8 <_isatty_r+0x1c>
100113a6:	602b      	str	r3, [r5, #0]
100113a8:	bd70      	pop	{r4, r5, r6, pc}
100113aa:	46c0      	nop			; (mov r8, r8)
100113ac:	10014c94 	.word	0x10014c94

100113b0 <_lseek_r>:
100113b0:	b570      	push	{r4, r5, r6, lr}
100113b2:	0005      	movs	r5, r0
100113b4:	0008      	movs	r0, r1
100113b6:	0011      	movs	r1, r2
100113b8:	2200      	movs	r2, #0
100113ba:	4c06      	ldr	r4, [pc, #24]	; (100113d4 <_lseek_r+0x24>)
100113bc:	6022      	str	r2, [r4, #0]
100113be:	001a      	movs	r2, r3
100113c0:	f7fb f86a 	bl	1000c498 <_lseek>
100113c4:	1c43      	adds	r3, r0, #1
100113c6:	d103      	bne.n	100113d0 <_lseek_r+0x20>
100113c8:	6823      	ldr	r3, [r4, #0]
100113ca:	2b00      	cmp	r3, #0
100113cc:	d000      	beq.n	100113d0 <_lseek_r+0x20>
100113ce:	602b      	str	r3, [r5, #0]
100113d0:	bd70      	pop	{r4, r5, r6, pc}
100113d2:	46c0      	nop			; (mov r8, r8)
100113d4:	10014c94 	.word	0x10014c94

100113d8 <memchr>:
100113d8:	b2c9      	uxtb	r1, r1
100113da:	1882      	adds	r2, r0, r2
100113dc:	4290      	cmp	r0, r2
100113de:	d004      	beq.n	100113ea <memchr+0x12>
100113e0:	7803      	ldrb	r3, [r0, #0]
100113e2:	428b      	cmp	r3, r1
100113e4:	d002      	beq.n	100113ec <memchr+0x14>
100113e6:	3001      	adds	r0, #1
100113e8:	e7f8      	b.n	100113dc <memchr+0x4>
100113ea:	2000      	movs	r0, #0
100113ec:	4770      	bx	lr
	...

100113f0 <_read_r>:
100113f0:	b570      	push	{r4, r5, r6, lr}
100113f2:	0005      	movs	r5, r0
100113f4:	0008      	movs	r0, r1
100113f6:	0011      	movs	r1, r2
100113f8:	2200      	movs	r2, #0
100113fa:	4c06      	ldr	r4, [pc, #24]	; (10011414 <_read_r+0x24>)
100113fc:	6022      	str	r2, [r4, #0]
100113fe:	001a      	movs	r2, r3
10011400:	f7f9 fd7a 	bl	1000aef8 <_read>
10011404:	1c43      	adds	r3, r0, #1
10011406:	d103      	bne.n	10011410 <_read_r+0x20>
10011408:	6823      	ldr	r3, [r4, #0]
1001140a:	2b00      	cmp	r3, #0
1001140c:	d000      	beq.n	10011410 <_read_r+0x20>
1001140e:	602b      	str	r3, [r5, #0]
10011410:	bd70      	pop	{r4, r5, r6, pc}
10011412:	46c0      	nop			; (mov r8, r8)
10011414:	10014c94 	.word	0x10014c94
10011418:	000003e8 	.word	0x000003e8

1001141c <test>:
1001141c:	00000083 00004000 00000200 00c800c8     .....@..........
1001142c:	41a00000 42700000 3f000000 3e666666     ...A..pB...?fff>
1001143c:	3f2ccccd 3f000000 3f000000 0000000a     ..,?...?...?....
1001144c:	72617453 676e6974 61694220 6f4c2073     Starting Bias Lo
1001145c:	5220706f 73646165 00000000 706d6153     op Reads....Samp
1001146c:	3a73656c 0a642520 00000000 65636341     les: %d.....Acce
1001147c:	666f206c 74657366 74616420 57482061     l offset data HW
1001148c:	62205453 253d7469 25203a64 66342e37     ST bit=%d: %7.4f
1001149c:	2e372520 25206634 66342e37 00000a0d      %7.4f %7.4f....
100114ac:	6f727947 66666f20 20746573 61746164     Gyro offset data
100114bc:	53574820 69622054 64253d74 3725203a      HWST bit=%d: %7
100114cc:	2066342e 342e3725 37252066 0d66342e     .4f %7.4f %7.4f.
100114dc:	0000000a 78352325 2325203a 0a0d7835     ....%#5x: %#5x..
100114ec:	00000000 5f504d44 0a214e4f 0000000d     ....DMP_ON!.....
100114fc:	534e4553 2153524f 00000d0a 2e2e312d     SENSORS!....-1..
1001150c:	0000002e 706d6f43 20737361 706d6173     ....Compass samp
1001151c:	7220656c 00657461 65746e45 676e6972     le rate.Entering
1001152c:	75706d20 696e695f 2e2e2e74 00000000      mpu_init.......
1001153c:	706d6f43 20737361 20746f6e 6e756f66     Compass not foun
1001154c:	00002e64 72617453 676e6974 55504d20     d...Starting MPU
1001155c:	30303536 53574820 000d2154 72746552     6500 HWST!..Retr
1001156c:	69766569 4220676e 65736169 00000d73     ieving Biases...
1001157c:	72746552 69766569 4220676e 65736169     Retrieving Biase
1001158c:	72452073 20726f72 6f70202d 62697373     s Error - possib
1001159c:	4920656c 65204332 726f7272 00000000     le I2C error....
100115ac:	72746552 69766569 5320676e 69422054     Retrieving ST Bi
100115bc:	73657361 00000000 72746552 69766569     ases....Retrievi
100115cc:	5320676e 69422054 73657361 72724520     ng ST Biases Err
100115dc:	2d20726f 736f7020 6c626973 32492065     or - possible I2
100115ec:	72652043 00726f72 64616552 20676e69     C error.Reading 
100115fc:	2050544f 69676552 72657473 72724520     OTP Register Err
1001160c:	002e726f 65636341 544f206c 64253a50     or..Accel OTP:%d
1001161c:	6425202c 6425202c 0000000a 45434341     , %d, %d....ACCE
1001162c:	52433a4c 52455449 41204149 00000000     L:CRITERIA A....
1001163c:	73616942 6968535f 253d7466 66342e37     Bias_Shift=%7.4f
1001164c:	6942202c 525f7361 253d6765 66342e37     , Bias_Reg=%7.4f
1001165c:	6942202c 485f7361 3d545357 342e3725     , Bias_HWST=%7.4
1001166c:	000a0d66 2050544f 756c6176 25203a65     f...OTP value: %
1001167c:	66342e37 00000a0d 69746172 37253d6f     7.4f....ratio=%7
1001168c:	2c66342e 72687420 6f687365 253d646c     .4f, threshold=%
1001169c:	66342e37 00000a0d 45434341 6146204c     7.4f....ACCEL Fa
100116ac:	41206c69 20736978 6425203d 0000000a     il Axis = %d....
100116bc:	45434341 52433a4c 52455449 42204149     ACCEL:CRITERIA B
100116cc:	0000000d 206e694d 203a474d 342e3725     ....Min MG: %7.4
100116dc:	000a0d66 2078614d 203a474d 342e3725     f...Max MG: %7.4
100116ec:	000a0d66 73616942 6968735f 253d7466     f...Bias_shift=%
100116fc:	66342e37 7473202c 2e37253d 202c6634     7.4f, st=%7.4f, 
1001170c:	3d676572 342e3725 00000a66 65636341     reg=%7.4f...Acce
1001171c:	4146206c 61204c49 3a736978 3c206425     l FAIL axis:%d <
1001172c:	3232203d 20676d35 3e20726f 3736203d     = 225mg or >= 67
1001173c:	0a676d35 00000000 65636341 52433a6c     5mg.....Accel:CR
1001174c:	52455449 43204149 6962203a 6c207361     ITERIA C: bias l
1001175c:	20737365 6e616874 2e372520 000a6634     ess than %7.4f..
1001176c:	4c494146 203a4445 65636341 7861206c     FAILED: Accel ax
1001177c:	253a7369 203d2064 20646c25 3035203e     is:%d = %ld > 50
1001178c:	0a676d30 00000000 65636341 6553206c     0mg.....Accel Se
1001179c:	5420666c 20747365 75736552 3a73746c     lf Test Results:
100117ac:	0a642520 00000000 6f727947 50544f20      %d.....Gyro OTP
100117bc:	2c64253a 2c642520 0d642520 0000000a     :%d, %d, %d.....
100117cc:	4f525947 4952433a 49524554 00412041     GYRO:CRITERIA A.
100117dc:	6f727947 69614620 7841206c 3d207369     Gyro Fail Axis =
100117ec:	0a642520 00000000 4f525947 4952433a      %d.....GYRO:CRI
100117fc:	49524554 0d422041 00000000 2078614d     TERIA B.....Max 
1001180c:	3a535044 2e372520 0a0d6634 00000000     DPS: %7.4f......
1001181c:	4f525947 49414620 7861204c 253a7369     GYRO FAIL axis:%
1001182c:	72672064 65746165 68742072 36206e61     d greater than 6
1001183c:	73706430 0000000a 6f727947 4952433a     0dps....Gyro:CRI
1001184c:	49524554 3a432041 61696220 656c2073     TERIA C: bias le
1001185c:	74207373 206e6168 342e3725 00000a66     ss than %7.4f...
1001186c:	4c494146 203a4445 6f727947 69786120     FAILED: Gyro axi
1001187c:	64253a73 25203d20 3e20646c 64303220     s:%d = %ld > 20d
1001188c:	000a7370 6f727947 6c655320 65542066     ps..Gyro Self Te
1001189c:	52207473 6c757365 203a7374 000a6425     st Results: %d..
100118ac:	706d6f43 20737361 666c6553 73655420     Compass Self Tes
100118bc:	65522074 746c7573 25203a73 00000a64     t Results: %d...
100118cc:	74697845 20676e69 54535748 00000000     Exiting HWST....

100118dc <hw>:
100118dc:	04000069 01410080 01000000 00001333     i.....A.....3...

100118ec <reg>:
100118ec:	0c1a1975 1c1b236a 201f1e1d 3b437472     u...j#..... rtC;
100118fc:	3a393841 376c6b69 6d24776f 2625706e     A89:ikl7ow$mnp%&
1001190c:	2a292827 67646334 00000049 100093c4     '()*4cdgI.......
1001191c:	100093c6 100093ac 100093ac 100093ac     ................
1001192c:	100093c4 100093ac 100093ac 10009c12     ................
1001193c:	10009c86 10009bfa 10009c8c 10009c00     ................
1001194c:	10009c06 10009c0c 1000a2cc 1000a2cc     ................
1001195c:	1000a2cc 1000a2cc 1000a2cc 1000a2cc     ................
1001196c:	1000a2cc 1000a2cc 1000a2cc 1000a2cc     ................
1001197c:	1000a2cc 1000a2cc 1000a2cc 1000a2cc     ................
1001198c:	1000a2cc 1000a2cc 1000a2cc 1000a2cc     ................
1001199c:	1000a2cc 1000a2ea 1000a2ea 1000a2ea     ................
100119ac:	1000a2ea 1000a2ea 1000a2ea 1000a2ea     ................
100119bc:	1000a2ea 1000a2ea 1000a2ea 1000a30c     ................
100119cc:	1000a30c 1000a30c 1000a30c 1000a30c     ................
100119dc:	1000a30c 1000a30c 1000a30c 1000a30c     ................
100119ec:	1000a30c 1000a32e 1000a32e 1000a32e     ................
100119fc:	1000a32e 1000a32e 1000a32e 1000a348     ............H...
10011a0c:	1000a348 1000a348 1000a348 1000a348     H...H...H...H...
10011a1c:	1000a348 1000a348 1000a348 1000a348     H...H...H...H...
10011a2c:	1000a362 1000a362 1000a384 1000a384     b...b...........
10011a3c:	1000a39e 1000a384 34333231 00003635     ........123456..
10011a4c:	efcdab00 00efcdab b2d60600 f8f005f0     ................
10011a5c:	00000000                                ....

10011a60 <ble_mgr_gatt_server_handle>:
	...
10011a78:	10009309 10009345 1000930d 00000000     ....E...........
10011a88:	6e616353 676e696e 61662020 64656c69     Scanning  failed
10011a98:	00000000 2055544d 6e616843 46206567     ....MTU Change F
10011aa8:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
10011ab8:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
10011ac8:	69746172 253a6e6f 00000064 69766544     ration:%d...Devi
10011ad8:	64206563 6f637369 63656e6e 20646574     ce disconnected 
10011ae8:	73616552 303a6e6f 32302578 61482078     Reason:0x%02x Ha
10011af8:	656c646e 2578303d 00000078 72636e45     ndle=0x%x...Encr
10011b08:	69747079 66206e6f 656c6961 00000064     yption failed...
10011b18:	72636e45 69747079 63206e6f 6c706d6f     Encryption compl
10011b28:	64657465 63757320 73736563 6c6c7566     eted successfull
10011b38:	00000079 20454c42 69766544 6e206563     y...BLE Device n
10011b48:	6620746f 646e756f 636e6520 74707972     ot found encrypt
10011b58:	206e6f69 6f666e69 00000000 6f666e49     ion info....Info
10011b68:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
10011b78:	206e6163 69766564 72206563 68636165     can device reach
10011b88:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
10011b98:	00006e61 6c696146 74206465 7473206f     an..Failed to st
10011ba8:	7320706f 6e6e6163 00676e69 72696150     op scanning.Pair
10011bb8:	20676e69 6c696166 2e2e6465 7369442e     ing failed...Dis
10011bc8:	6e6e6f63 69746365 0000676e 63736944     connecting..Disc
10011bd8:	656e6e6f 52207463 65757165 46207473     onnect Request F
10011be8:	656c6961 00000064 72696150 20676e69     ailed...Pairing 
10011bf8:	636f7270 72756465 6f632065 656c706d     procedure comple
10011c08:	20646574 63637573 66737365 796c6c75     ted successfully
10011c18:	00000000 20454c42 69766544 6e206563     ....BLE Device n
10011c28:	6620746f 646e756f 206f7420 726f7473     ot found to stor
10011c38:	68742065 61702065 6e697269 6e692067     e the pairing in
10011c48:	00006f66 72636e45 69747079 4e206e6f     fo..Encryption N
10011c58:	7320746f 74726174 00006465 76616c53     ot started..Slav
10011c68:	65532065 69727563 52207974 2d207165     e Security Req -
10011c78:	74754120 746e6568 74616369 206e6f69      Authentication 
10011c88:	6c696146 00006465 72696150 71655220     Failed..Pair Req
10011c98:	74736575 41202d20 65687475 6369746e     uest - Authentic
10011ca8:	6f697461 6146206e 64656c69 00000000     ation Failed....
10011cb8:	65746e45 68742072 61502065 656b7373     Enter the Passke
10011cc8:	2d362879 69676944 69202974 6554206e     y(6-Digit) in Te
10011cd8:	6e696d72 003a6c61 206e6950 656d6954     rminal:.Pin Time
10011ce8:	0074756f 63736944 656e6e6f 6e697463     out.Disconnectin
10011cf8:	2e2e2067 0000002e 61656c50 45206573     g ......Please E
10011d08:	7265746e 65687420 6c6f6620 69776f6c     nter the followi
10011d18:	5020676e 2d737361 65646f63 206e6f28     ng Pass-code(on 
10011d28:	6568746f 65442072 65636976 00003a29     other Device):..
10011d38:	72696150 79656b2d 70657220 6620796c     Pair-key reply f
10011d48:	656c6961 00000064 20424f4f 74616546     ailed...OOB Feat
10011d58:	20657275 20746f4e 70707573 6574726f     ure Not supporte
10011d68:	00000064 65746e45 20646572 73736150     d...Entered Pass
10011d78:	646f632d 00003a65 72696150 20676e69     -code:..Pairing 
10011d88:	6f666e69 74616d72 206e6f69 7020666f     information of p
10011d98:	20726565 69766564 69206563 6f6e2073     eer device is no
10011da8:	76612074 616c6961 2e656c62 00000000     t available.....
10011db8:	61656c50 75206573 6961706e 68742072     Please unpair th
10011dc8:	65642065 65636976 6f726620 6570206d     e device from pe
10011dd8:	64207265 63697665 6f6d2865 656c6962     er device(mobile
10011de8:	65732029 6e697474 6d207367 20756e65     ) settings menu 
10011df8:	20646e61 72617473 61702074 6e697269     and start pairin
10011e08:	67612067 006e6961 72636e45 69747079     g again.Encrypti
10011e18:	52206e6f 65757165 52207473 796c7065     on Request Reply
10011e28:	69614620 0064656c 74696e49 696c6169      Failed.Initiali
10011e38:	676e697a 4d415320 00313142 424d4153     zing SAMB11.SAMB
10011e48:	49203131 6974696e 7a696c61 6f697461     11 Initializatio
10011e58:	6166206e 64656c69 00000000 61656c50     n failed....Plea
10011e68:	63206573 6b636568 65687420 776f7020     se check the pow
10011e78:	61207265 6320646e 656e6e6f 6f697463     er and connectio
10011e88:	202f206e 64726168 65726177 6e6f6320     n / hardware con
10011e98:	7463656e 0000726f 454d5441 4c422d4c     nector..ATMEL-BL
10011ea8:	00000045 69766544 6e206563 20656d61     E...Device name 
10011eb8:	20746573 6c696166 00006465 61204442     set failed..BD a
10011ec8:	65726464 67207373 66207465 656c6961     ddress get faile
10011ed8:	00000064 41204442 65726464 303a7373     d...BD Address:0
10011ee8:	32302578 32302558 32302558 32302558     x%02X%02X%02X%02
10011ef8:	32302558 32302558 41202c58 65726464     X%02X%02X, Addre
10011f08:	54207373 3a657079 00006425 20746553     ss Type:%d..Set 
10011f18:	20454c42 69766544 63206563 69666e6f     BLE Device confi
10011f28:	61727567 6e6f6974 69616620 0064656c     guration failed.
10011f38:	20746553 20454c42 69766544 41206563     Set BLE Device A
10011f48:	65726464 66207373 656c6961 00000064     ddress failed...
10011f58:	6e616353 676e696e 502e2e2e 7361656c     Scanning...Pleas
10011f68:	61772065 2e2e7469 0000002e 76616c53     e wait......Slav
10011f78:	65732065 69727563 72207974 65757165     e security reque
10011f88:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10011f98:	65746365 6f742064 65657020 65642072     ected to peer de
10011fa8:	65636976 74697720 64612068 73657264     vice with addres
10011fb8:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
10011fc8:	78323025 78323025 78323025 00000000     %02x%02x%02x....
10011fd8:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
10011fe8:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
10011ff8:	61522067 6d6f646e 64646120 73736572     g Random address
10012008:	69616620 2a64656c 0000002a 2078614d      failed**...Max 
10012018:	626d756e 6f207265 6f632066 63656e6e     number of connec
10012028:	6e6f6974 61657220 64656863 6425203a     tion reached: %d
10012038:	3d3d3d20 7369443e 6e6e6f63 69746365      ===>Disconnecti
10012048:	2e2e676e 0000002e 69766544 43206563     ng......Device C
10012058:	656e6e6f 6f697463 6146206e 64656c69     onnection Failed
10012068:	53202d20 75746174 25203a73 00000064      - Status: %d...
10012078:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
10012088:	61642074 73206174 66207465 656c6961     t data set faile
10012098:	00000064                                d...

1001209c <ble_mgr_gap_handle>:
1001209c:	10009305 100094c1 1000931d 00000000     ................
100120ac:	00000000 10009f95 10009375 10009319     ........u.......
100120bc:	10009661 10009541 10009865 10009679     a...A...e...y...
100120cc:	100099b9 10009afd 100093fd 1000a1d1     ................
	...
100120e8:	00002121 1000bc98 1000bca6 1000bcb4     !!..............
100120f8:	1000bcc2 1000bcd0 1000bcde 1000bcec     ................
10012108:	1000bcfc 1000bd0c 1000bd1c 1000bd2c     ............,...
10012118:	1000bd3c 1000bd4c 1000bd5c 1000bd6c     <...L...\...l...
10012128:	1000bd7c 1000bd8c 1000bd9c 1000bdac     |...............
10012138:	1000bdbc 1000bdcc 1000bddc 1000bdec     ................
10012148:	1000bdfc 1000be0c 1000be1c 1000be2c     ............,...
10012158:	1000be3c 1000be4a 1000be58 1000be66     <...J...X...f...
10012168:	1000be74 1000be82 1000be90 1000be9e     t...............
10012178:	1000beac 1000bebc 1000becc 1000bedc     ................
10012188:	1000beec 1000befc 1000bf0c 1000bf1c     ................
10012198:	1000bf2c 1000bf3c 1000bf4c 1000bf5c     ,...<...L...\...
100121a8:	1000bf6c 1000bf7c 1000bf8c 1000bf9c     l...|...........
100121b8:	1000bfac 1000bfba 1000bfc8 1000c008     ................
100121c8:	1000c030 1000c058 1000c080 1000c2c0     0...X...........
100121d8:	1000c0b0 1000c0c8 1000c140 1000c158     ........@...X...
100121e8:	1000c0e0 1000c0f8 1000c110 1000c128     ............(...
100121f8:	1000c170 1000c434 1000c434 1000c434     p...4...4...4...
10012208:	1000c434 1000c434 1000c434 1000c434     4...4...4...4...
10012218:	1000c434 1000c218 1000c230 1000c248     4.......0...H...
10012228:	1000c2d6 1000c1a0 1000c434 1000c434     ........4...4...
10012238:	1000c434 1000c434 1000c434 1000c434     4...4...4...4...
10012248:	1000c260 1000c278 1000c290 1000c2a8     `...x...........
10012258:	1000c434 1000c3ec 1000c404 1000c434     4...........4...
10012268:	1000c434 1000c302 1000c318 1000c32e     4...............
10012278:	1000c344 1000c434 1000c434 1000c434     D...4...4...4...
10012288:	1000c434 1000c434 1000c434 1000c434     4...4...4...4...
10012298:	1000c434 1000bff4 1000c01c 1000c044     4...........D...
100122a8:	1000c06c 1000c098 1000c188 1000c1b8     l...............
100122b8:	1000c1d0 1000c1e8 1000c200 1000c2ec     ................
100122c8:	1000c35a 1000c3d4 1000c41c 20554d49     Z...........IMU 
100122d8:	45544e49 50555252 00002154 656d7441     INTERRUPT!..Atme
100122e8:	6f43206c 002e7072                                l Corp.

100122ef <CSWTCH.47>:
100122ef:	03010300 03030303 03030303 00020303     ................
100122ff:	00f6c400 00f58410 00f58410 00f58210     ................
1001230f:	00f69c10 00f69c10 00f68e10 00f58210     ................
1001231f:	00f69c10 00f68e10 00f69c10 00f58210     ................
1001232f:	00f6a410 00f6a410 00f6a410 00f8a410     ................
1001233f:	00004310 01244400                                .C...

10012344 <_global_impure_ptr>:
10012344:	10012444                                D$..

10012348 <__sf_fake_stdin>:
	...

10012368 <__sf_fake_stdout>:
	...

10012388 <__sf_fake_stderr>:
	...
100123a8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
100123b8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
100123c8:	31300046 35343332 39383736 64636261     F.0123456789abcd
100123d8:	00006665                                ef..

100123dc <_init>:
100123dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100123de:	46c0      	nop			; (mov r8, r8)
100123e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
100123e2:	bc08      	pop	{r3}
100123e4:	469e      	mov	lr, r3
100123e6:	4770      	bx	lr

100123e8 <__init_array_start>:
100123e8:	100080b1 	.word	0x100080b1

100123ec <_fini>:
100123ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100123ee:	46c0      	nop			; (mov r8, r8)
100123f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
100123f2:	bc08      	pop	{r3}
100123f4:	469e      	mov	lr, r3
100123f6:	4770      	bx	lr

100123f8 <__fini_array_start>:
100123f8:	10008089 	.word	0x10008089
