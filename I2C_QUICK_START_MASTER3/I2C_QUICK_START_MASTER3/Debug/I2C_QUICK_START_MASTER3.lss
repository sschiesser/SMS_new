
I2C_QUICK_START_MASTER3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b724  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000ac  10013724  10013724  00013724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002820  100137d0  100137d0  000137d0  2**2
                  ALLOC
  3 .stack        00000800  10015ff0  10015ff0  000137d0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000137d0  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  000137f8  2**0
                  CONTENTS, READONLY
  6 .debug_info   00029e84  00000000  00000000  000138ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003511  00000000  00000000  0003d730  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a0c3  00000000  00000000  00040c41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000970  00000000  00000000  0004ad04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001020  00000000  00000000  0004b674  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000246f6  00000000  00000000  0004c694  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e6c7  00000000  00000000  00070d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0014603c  00000000  00000000  0007f451  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000026dc  00000000  00000000  001c5490  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008000:	4813      	ldr	r0, [pc, #76]	; (10008050 <app_entry+0x50>)
10008002:	4914      	ldr	r1, [pc, #80]	; (10008054 <app_entry+0x54>)
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008004:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008006:	4288      	cmp	r0, r1
10008008:	d00d      	beq.n	10008026 <app_entry+0x26>
        for (; pDest < &_erelocate;) {
1000800a:	4b13      	ldr	r3, [pc, #76]	; (10008058 <app_entry+0x58>)
1000800c:	4299      	cmp	r1, r3
1000800e:	d20a      	bcs.n	10008026 <app_entry+0x26>
10008010:	43ca      	mvns	r2, r1
10008012:	18d2      	adds	r2, r2, r3
10008014:	2300      	movs	r3, #0
10008016:	0892      	lsrs	r2, r2, #2
10008018:	3201      	adds	r2, #1
1000801a:	0092      	lsls	r2, r2, #2
            *pDest++ = *pSrc++;
1000801c:	58c4      	ldr	r4, [r0, r3]
1000801e:	50cc      	str	r4, [r1, r3]
10008020:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008022:	4293      	cmp	r3, r2
10008024:	d1fa      	bne.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008026:	480d      	ldr	r0, [pc, #52]	; (1000805c <app_entry+0x5c>)
10008028:	4b0d      	ldr	r3, [pc, #52]	; (10008060 <app_entry+0x60>)
1000802a:	4298      	cmp	r0, r3
1000802c:	d20b      	bcs.n	10008046 <app_entry+0x46>
1000802e:	43c1      	mvns	r1, r0
        *pDest++ = 0;
10008030:	2400      	movs	r4, #0
10008032:	18c9      	adds	r1, r1, r3
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008034:	2300      	movs	r3, #0
10008036:	0889      	lsrs	r1, r1, #2
10008038:	3101      	adds	r1, #1
1000803a:	0089      	lsls	r1, r1, #2
        *pDest++ = 0;
1000803c:	18c2      	adds	r2, r0, r3
1000803e:	3304      	adds	r3, #4
10008040:	6014      	str	r4, [r2, #0]
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008042:	428b      	cmp	r3, r1
10008044:	d1fa      	bne.n	1000803c <app_entry+0x3c>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
10008046:	4b07      	ldr	r3, [pc, #28]	; (10008064 <app_entry+0x64>)
10008048:	4798      	blx	r3

    /* Branch to main function */
    main();
1000804a:	4b07      	ldr	r3, [pc, #28]	; (10008068 <app_entry+0x68>)
1000804c:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
1000804e:	bd10      	pop	{r4, pc}
10008050:	10013724 	.word	0x10013724
10008054:	10013724 	.word	0x10013724
10008058:	100137d0 	.word	0x100137d0
1000805c:	100137d0 	.word	0x100137d0
10008060:	10015ff0 	.word	0x10015ff0
10008064:	10011421 	.word	0x10011421
10008068:	1000c8b5 	.word	0x1000c8b5

1000806c <__do_global_dtors_aux>:
1000806c:	b510      	push	{r4, lr}
1000806e:	4c06      	ldr	r4, [pc, #24]	; (10008088 <__do_global_dtors_aux+0x1c>)
10008070:	7823      	ldrb	r3, [r4, #0]
10008072:	2b00      	cmp	r3, #0
10008074:	d107      	bne.n	10008086 <__do_global_dtors_aux+0x1a>
10008076:	4b05      	ldr	r3, [pc, #20]	; (1000808c <__do_global_dtors_aux+0x20>)
10008078:	2b00      	cmp	r3, #0
1000807a:	d002      	beq.n	10008082 <__do_global_dtors_aux+0x16>
1000807c:	4804      	ldr	r0, [pc, #16]	; (10008090 <__do_global_dtors_aux+0x24>)
1000807e:	e000      	b.n	10008082 <__do_global_dtors_aux+0x16>
10008080:	bf00      	nop
10008082:	2301      	movs	r3, #1
10008084:	7023      	strb	r3, [r4, #0]
10008086:	bd10      	pop	{r4, pc}
10008088:	100137d0 	.word	0x100137d0
1000808c:	00000000 	.word	0x00000000
10008090:	10013724 	.word	0x10013724

10008094 <frame_dummy>:
10008094:	4b08      	ldr	r3, [pc, #32]	; (100080b8 <frame_dummy+0x24>)
10008096:	b510      	push	{r4, lr}
10008098:	2b00      	cmp	r3, #0
1000809a:	d003      	beq.n	100080a4 <frame_dummy+0x10>
1000809c:	4907      	ldr	r1, [pc, #28]	; (100080bc <frame_dummy+0x28>)
1000809e:	4808      	ldr	r0, [pc, #32]	; (100080c0 <frame_dummy+0x2c>)
100080a0:	e000      	b.n	100080a4 <frame_dummy+0x10>
100080a2:	bf00      	nop
100080a4:	4807      	ldr	r0, [pc, #28]	; (100080c4 <frame_dummy+0x30>)
100080a6:	6803      	ldr	r3, [r0, #0]
100080a8:	2b00      	cmp	r3, #0
100080aa:	d100      	bne.n	100080ae <frame_dummy+0x1a>
100080ac:	bd10      	pop	{r4, pc}
100080ae:	4b06      	ldr	r3, [pc, #24]	; (100080c8 <frame_dummy+0x34>)
100080b0:	2b00      	cmp	r3, #0
100080b2:	d0fb      	beq.n	100080ac <frame_dummy+0x18>
100080b4:	4798      	blx	r3
100080b6:	e7f9      	b.n	100080ac <frame_dummy+0x18>
100080b8:	00000000 	.word	0x00000000
100080bc:	100137d4 	.word	0x100137d4
100080c0:	10013724 	.word	0x10013724
100080c4:	10013724 	.word	0x10013724
100080c8:	00000000 	.word	0x00000000

100080cc <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
100080cc:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_clock_get_value();
100080ce:	4b09      	ldr	r3, [pc, #36]	; (100080f4 <delay_init+0x28>)
100080d0:	4798      	blx	r3
	cycles_per_ms /= 1000;
100080d2:	21fa      	movs	r1, #250	; 0xfa
100080d4:	4c08      	ldr	r4, [pc, #32]	; (100080f8 <delay_init+0x2c>)
100080d6:	0089      	lsls	r1, r1, #2
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
	cycles_per_ms = system_clock_get_value();
100080d8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
100080da:	47a0      	blx	r4
100080dc:	4b07      	ldr	r3, [pc, #28]	; (100080fc <delay_init+0x30>)
	cycles_per_us = cycles_per_ms / 1000;
100080de:	4908      	ldr	r1, [pc, #32]	; (10008100 <delay_init+0x34>)
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
	cycles_per_ms = system_clock_get_value();
	cycles_per_ms /= 1000;
100080e0:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
100080e2:	0028      	movs	r0, r5
100080e4:	47a0      	blx	r4

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
100080e6:	2205      	movs	r2, #5
 */
void delay_init(void)
{
	cycles_per_ms = system_clock_get_value();
	cycles_per_ms /= 1000;
	cycles_per_us = cycles_per_ms / 1000;
100080e8:	4b06      	ldr	r3, [pc, #24]	; (10008104 <delay_init+0x38>)
100080ea:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
100080ec:	4b06      	ldr	r3, [pc, #24]	; (10008108 <delay_init+0x3c>)
100080ee:	601a      	str	r2, [r3, #0]
}
100080f0:	bd70      	pop	{r4, r5, r6, pc}
100080f2:	46c0      	nop			; (mov r8, r8)
100080f4:	1000c06d 	.word	0x1000c06d
100080f8:	1000f3ad 	.word	0x1000f3ad
100080fc:	10013728 	.word	0x10013728
10008100:	000f4240 	.word	0x000f4240
10008104:	10013724 	.word	0x10013724
10008108:	e000e010 	.word	0xe000e010

1000810c <delay_cycles_ms>:
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
1000810c:	2180      	movs	r1, #128	; 0x80
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
1000810e:	b530      	push	{r4, r5, lr}
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
10008110:	2500      	movs	r5, #0
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
10008112:	4b08      	ldr	r3, [pc, #32]	; (10008134 <delay_cycles_ms+0x28>)
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
10008114:	4a08      	ldr	r2, [pc, #32]	; (10008138 <delay_cycles_ms+0x2c>)
10008116:	681c      	ldr	r4, [r3, #0]
        SysTick->VAL = 0;
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008118:	0249      	lsls	r1, r1, #9
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
1000811a:	3801      	subs	r0, #1
1000811c:	d308      	bcc.n	10008130 <delay_cycles_ms+0x24>
 *
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
1000811e:	2c00      	cmp	r4, #0
10008120:	d0fb      	beq.n	1000811a <delay_cycles_ms+0xe>
        SysTick->LOAD = n;
10008122:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
10008124:	6095      	str	r5, [r2, #8]
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008126:	6813      	ldr	r3, [r2, #0]
10008128:	420b      	tst	r3, r1
1000812a:	d0fc      	beq.n	10008126 <delay_cycles_ms+0x1a>
1000812c:	3801      	subs	r0, #1
1000812e:	d2f6      	bcs.n	1000811e <delay_cycles_ms+0x12>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
10008130:	bd30      	pop	{r4, r5, pc}
10008132:	46c0      	nop			; (mov r8, r8)
10008134:	10013728 	.word	0x10013728
10008138:	e000e010 	.word	0xe000e010

1000813c <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000813c:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000813e:	4b0c      	ldr	r3, [pc, #48]	; (10008170 <dualtimer_isr_handler+0x34>)
10008140:	7d1a      	ldrb	r2, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
10008142:	2a00      	cmp	r2, #0
10008144:	d006      	beq.n	10008154 <dualtimer_isr_handler+0x18>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
10008146:	2201      	movs	r2, #1
10008148:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000814a:	4b0a      	ldr	r3, [pc, #40]	; (10008174 <dualtimer_isr_handler+0x38>)
1000814c:	681b      	ldr	r3, [r3, #0]
1000814e:	2b00      	cmp	r3, #0
10008150:	d000      	beq.n	10008154 <dualtimer_isr_handler+0x18>
			dualtimer_callback_timer1();
10008152:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
10008154:	2234      	movs	r2, #52	; 0x34
10008156:	4b06      	ldr	r3, [pc, #24]	; (10008170 <dualtimer_isr_handler+0x34>)
10008158:	5c9a      	ldrb	r2, [r3, r2]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000815a:	2a00      	cmp	r2, #0
1000815c:	d007      	beq.n	1000816e <dualtimer_isr_handler+0x32>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000815e:	2101      	movs	r1, #1
10008160:	222c      	movs	r2, #44	; 0x2c
10008162:	5499      	strb	r1, [r3, r2]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
10008164:	4b04      	ldr	r3, [pc, #16]	; (10008178 <dualtimer_isr_handler+0x3c>)
10008166:	681b      	ldr	r3, [r3, #0]
10008168:	2b00      	cmp	r3, #0
1000816a:	d000      	beq.n	1000816e <dualtimer_isr_handler+0x32>
			dualtimer_callback_timer2();
1000816c:	4798      	blx	r3
	}
}
1000816e:	bd10      	pop	{r4, pc}
10008170:	40001000 	.word	0x40001000
10008174:	100137ec 	.word	0x100137ec
10008178:	100137f0 	.word	0x100137f0

1000817c <dualtimer_get_config_defaults>:
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
	config->timer2.timer_enable = true;

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000817c:	2202      	movs	r2, #2
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000817e:	2301      	movs	r3, #1
	config->timer2.timer_enable = true;

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
10008180:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
10008182:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008184:	2200      	movs	r2, #0
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
10008186:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
10008188:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000818a:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000818c:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000818e:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008190:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
10008192:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
10008194:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
10008196:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
10008198:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000819a:	7602      	strb	r2, [r0, #24]
}
1000819c:	4770      	bx	lr
1000819e:	46c0      	nop			; (mov r8, r8)

100081a0 <dualtimer_get_value>:
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1VALUE.reg;
100081a0:	4b03      	ldr	r3, [pc, #12]	; (100081b0 <dualtimer_get_value+0x10>)
 *
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
100081a2:	2800      	cmp	r0, #0
100081a4:	d001      	beq.n	100081aa <dualtimer_get_value+0xa>
		return DUALTIMER0->TIMER1VALUE.reg;
	} else {
		return DUALTIMER0->TIMER2VALUE.reg;
100081a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
	}
}
100081a8:	4770      	bx	lr
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1VALUE.reg;
100081aa:	6858      	ldr	r0, [r3, #4]
100081ac:	e7fc      	b.n	100081a8 <dualtimer_get_value+0x8>
100081ae:	46c0      	nop			; (mov r8, r8)
100081b0:	40001000 	.word	0x40001000

100081b4 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
100081b4:	2800      	cmp	r0, #0
100081b6:	d006      	beq.n	100081c6 <dualtimer_enable+0x12>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
100081b8:	2228      	movs	r2, #40	; 0x28
100081ba:	2380      	movs	r3, #128	; 0x80
100081bc:	4905      	ldr	r1, [pc, #20]	; (100081d4 <dualtimer_enable+0x20>)
100081be:	5c88      	ldrb	r0, [r1, r2]
100081c0:	4303      	orrs	r3, r0
100081c2:	548b      	strb	r3, [r1, r2]
	}
}
100081c4:	4770      	bx	lr
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
100081c6:	2380      	movs	r3, #128	; 0x80
100081c8:	4a02      	ldr	r2, [pc, #8]	; (100081d4 <dualtimer_enable+0x20>)
100081ca:	7a11      	ldrb	r1, [r2, #8]
100081cc:	430b      	orrs	r3, r1
100081ce:	7213      	strb	r3, [r2, #8]
100081d0:	e7f8      	b.n	100081c4 <dualtimer_enable+0x10>
100081d2:	46c0      	nop			; (mov r8, r8)
100081d4:	40001000 	.word	0x40001000

100081d8 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
100081d8:	2800      	cmp	r0, #0
100081da:	d006      	beq.n	100081ea <dualtimer_disable+0x12>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
100081dc:	2228      	movs	r2, #40	; 0x28
100081de:	207f      	movs	r0, #127	; 0x7f
100081e0:	4905      	ldr	r1, [pc, #20]	; (100081f8 <dualtimer_disable+0x20>)
100081e2:	5c8b      	ldrb	r3, [r1, r2]
100081e4:	4003      	ands	r3, r0
100081e6:	548b      	strb	r3, [r1, r2]
	}
}
100081e8:	4770      	bx	lr
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
100081ea:	217f      	movs	r1, #127	; 0x7f
100081ec:	4a02      	ldr	r2, [pc, #8]	; (100081f8 <dualtimer_disable+0x20>)
100081ee:	7a13      	ldrb	r3, [r2, #8]
100081f0:	400b      	ands	r3, r1
100081f2:	7213      	strb	r3, [r2, #8]
100081f4:	e7f8      	b.n	100081e8 <dualtimer_disable+0x10>
100081f6:	46c0      	nop			; (mov r8, r8)
100081f8:	40001000 	.word	0x40001000

100081fc <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
100081fc:	b570      	push	{r4, r5, r6, lr}
100081fe:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
10008200:	4b3a      	ldr	r3, [pc, #232]	; (100082ec <dualtimer_init+0xf0>)
10008202:	2004      	movs	r0, #4
10008204:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
10008206:	7823      	ldrb	r3, [r4, #0]
10008208:	2b00      	cmp	r3, #0
1000820a:	d102      	bne.n	10008212 <dualtimer_init+0x16>
1000820c:	7b23      	ldrb	r3, [r4, #12]
1000820e:	2b00      	cmp	r3, #0
10008210:	d057      	beq.n	100082c2 <dualtimer_init+0xc6>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
10008212:	2320      	movs	r3, #32
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
10008214:	2003      	movs	r0, #3
	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
10008216:	4936      	ldr	r1, [pc, #216]	; (100082f0 <dualtimer_init+0xf4>)
10008218:	68ca      	ldr	r2, [r1, #12]
1000821a:	4313      	orrs	r3, r2
1000821c:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000821e:	7e22      	ldrb	r2, [r4, #24]
10008220:	698b      	ldr	r3, [r1, #24]
10008222:	4002      	ands	r2, r0
10008224:	302d      	adds	r0, #45	; 0x2d
10008226:	0112      	lsls	r2, r2, #4
10008228:	4383      	bics	r3, r0
1000822a:	4313      	orrs	r3, r2
1000822c:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000822e:	7823      	ldrb	r3, [r4, #0]
10008230:	2b00      	cmp	r3, #0
10008232:	d020      	beq.n	10008276 <dualtimer_init+0x7a>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008234:	7862      	ldrb	r2, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
10008236:	2001      	movs	r0, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008238:	2a00      	cmp	r2, #0
1000823a:	d150      	bne.n	100082de <dualtimer_init+0xe2>
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000823c:	2302      	movs	r3, #2
1000823e:	78a1      	ldrb	r1, [r4, #2]
10008240:	78e2      	ldrb	r2, [r4, #3]
10008242:	0049      	lsls	r1, r1, #1
10008244:	4019      	ands	r1, r3
10008246:	0092      	lsls	r2, r2, #2
10008248:	330a      	adds	r3, #10
1000824a:	401a      	ands	r2, r3
1000824c:	000b      	movs	r3, r1
1000824e:	4313      	orrs	r3, r2
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
10008250:	7922      	ldrb	r2, [r4, #4]
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
10008252:	4303      	orrs	r3, r0
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
10008254:	2a00      	cmp	r2, #0
10008256:	d13f      	bne.n	100082d8 <dualtimer_init+0xdc>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
		DUALTIMER0->TIMER1CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10008258:	20c4      	movs	r0, #196	; 0xc4
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000825a:	68a1      	ldr	r1, [r4, #8]
1000825c:	4a25      	ldr	r2, [pc, #148]	; (100082f4 <dualtimer_init+0xf8>)
		DUALTIMER0->TIMER1CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000825e:	4d24      	ldr	r5, [pc, #144]	; (100082f0 <dualtimer_init+0xf4>)
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
10008260:	6011      	str	r1, [r2, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10008262:	2101      	movs	r1, #1
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
		DUALTIMER0->TIMER1CONTROL.reg = regval;
10008264:	7213      	strb	r3, [r2, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10008266:	0040      	lsls	r0, r0, #1
10008268:	5c2e      	ldrb	r6, [r5, r0]
1000826a:	4331      	orrs	r1, r6
1000826c:	5429      	strb	r1, [r5, r0]
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000826e:	2180      	movs	r1, #128	; 0x80
10008270:	7a10      	ldrb	r0, [r2, #8]
10008272:	4301      	orrs	r1, r0
10008274:	7211      	strb	r1, [r2, #8]
10008276:	7b22      	ldrb	r2, [r4, #12]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
10008278:	2a00      	cmp	r2, #0
1000827a:	d022      	beq.n	100082c2 <dualtimer_init+0xc6>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000827c:	7b62      	ldrb	r2, [r4, #13]
1000827e:	2a00      	cmp	r2, #0
10008280:	d124      	bne.n	100082cc <dualtimer_init+0xd0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
10008282:	2301      	movs	r3, #1
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
10008284:	2002      	movs	r0, #2
10008286:	7ba2      	ldrb	r2, [r4, #14]
10008288:	7be1      	ldrb	r1, [r4, #15]
1000828a:	0052      	lsls	r2, r2, #1
1000828c:	4010      	ands	r0, r2
1000828e:	220c      	movs	r2, #12
10008290:	0089      	lsls	r1, r1, #2
10008292:	400a      	ands	r2, r1
10008294:	4302      	orrs	r2, r0
10008296:	4313      	orrs	r3, r2
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
10008298:	7c22      	ldrb	r2, [r4, #16]
1000829a:	2a00      	cmp	r2, #0
1000829c:	d001      	beq.n	100082a2 <dualtimer_init+0xa6>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000829e:	2220      	movs	r2, #32
100082a0:	4313      	orrs	r3, r2
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
100082a2:	6961      	ldr	r1, [r4, #20]
100082a4:	4a13      	ldr	r2, [pc, #76]	; (100082f4 <dualtimer_init+0xf8>)
		DUALTIMER0->TIMER2CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
100082a6:	20c4      	movs	r0, #196	; 0xc4
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
100082a8:	6211      	str	r1, [r2, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
100082aa:	2128      	movs	r1, #40	; 0x28
100082ac:	5453      	strb	r3, [r2, r1]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
100082ae:	2302      	movs	r3, #2
100082b0:	4c0f      	ldr	r4, [pc, #60]	; (100082f0 <dualtimer_init+0xf4>)
100082b2:	0040      	lsls	r0, r0, #1
100082b4:	5c25      	ldrb	r5, [r4, r0]
100082b6:	432b      	orrs	r3, r5
100082b8:	5423      	strb	r3, [r4, r0]
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
100082ba:	2380      	movs	r3, #128	; 0x80
100082bc:	5c50      	ldrb	r0, [r2, r1]
100082be:	4303      	orrs	r3, r0
100082c0:	5453      	strb	r3, [r2, r1]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER2);
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
100082c2:	490d      	ldr	r1, [pc, #52]	; (100082f8 <dualtimer_init+0xfc>)
100082c4:	201e      	movs	r0, #30
100082c6:	4b0d      	ldr	r3, [pc, #52]	; (100082fc <dualtimer_init+0x100>)
100082c8:	4798      	blx	r3
}
100082ca:	bd70      	pop	{r4, r5, r6, pc}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
100082cc:	2a01      	cmp	r2, #1
100082ce:	d00b      	beq.n	100082e8 <dualtimer_init+0xec>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
100082d0:	2a02      	cmp	r2, #2
100082d2:	d1d7      	bne.n	10008284 <dualtimer_init+0x88>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
100082d4:	2340      	movs	r3, #64	; 0x40
100082d6:	e7d5      	b.n	10008284 <dualtimer_init+0x88>
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
100082d8:	2220      	movs	r2, #32
100082da:	4313      	orrs	r3, r2
100082dc:	e7bc      	b.n	10008258 <dualtimer_init+0x5c>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
100082de:	3a02      	subs	r2, #2
100082e0:	4253      	negs	r3, r2
100082e2:	4153      	adcs	r3, r2
100082e4:	0198      	lsls	r0, r3, #6
100082e6:	e7a9      	b.n	1000823c <dualtimer_init+0x40>
	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
100082e8:	2300      	movs	r3, #0
100082ea:	e7cb      	b.n	10008284 <dualtimer_init+0x88>
100082ec:	1000c381 	.word	0x1000c381
100082f0:	4000b000 	.word	0x4000b000
100082f4:	40001000 	.word	0x40001000
100082f8:	1000813d 	.word	0x1000813d
100082fc:	1000c799 	.word	0x1000c799

10008300 <i2c_write>:
 */
#if defined EMPL_TARGET_SAMB11
#include "include.h"
#define I2C_TIMEOUT 1000
static int i2c_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
10008300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
10008302:	4d11      	ldr	r5, [pc, #68]	; (10008348 <i2c_write+0x48>)
10008304:	8028      	strh	r0, [r5, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
10008306:	1c50      	adds	r0, r2, #1
10008308:	b2c0      	uxtb	r0, r0
1000830a:	8068      	strh	r0, [r5, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000830c:	6868      	ldr	r0, [r5, #4]
1000830e:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
10008310:	2a00      	cmp	r2, #0
10008312:	d008      	beq.n	10008326 <i2c_write+0x26>
10008314:	2100      	movs	r1, #0
10008316:	1c48      	adds	r0, r1, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
10008318:	686c      	ldr	r4, [r5, #4]
1000831a:	5c59      	ldrb	r1, [r3, r1]
1000831c:	5421      	strb	r1, [r4, r0]
1000831e:	0001      	movs	r1, r0
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
10008320:	b2c0      	uxtb	r0, r0
10008322:	4290      	cmp	r0, r2
10008324:	d3f7      	bcc.n	10008316 <i2c_write+0x16>
10008326:	4c09      	ldr	r4, [pc, #36]	; (1000834c <i2c_write+0x4c>)
10008328:	4f09      	ldr	r7, [pc, #36]	; (10008350 <i2c_write+0x50>)
1000832a:	4e0a      	ldr	r6, [pc, #40]	; (10008354 <i2c_write+0x54>)
1000832c:	e003      	b.n	10008336 <i2c_write+0x36>
1000832e:	3c01      	subs	r4, #1
10008330:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
10008332:	2c00      	cmp	r4, #0
10008334:	d005      	beq.n	10008342 <i2c_write+0x42>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008336:	0029      	movs	r1, r5
10008338:	0038      	movs	r0, r7
1000833a:	47b0      	blx	r6
1000833c:	2800      	cmp	r0, #0
1000833e:	d1f6      	bne.n	1000832e <i2c_write+0x2e>
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    return 0;
}
10008340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
10008342:	2001      	movs	r0, #1
10008344:	4240      	negs	r0, r0
10008346:	e7fb      	b.n	10008340 <i2c_write+0x40>
10008348:	10014df4 	.word	0x10014df4
1000834c:	000003e9 	.word	0x000003e9
10008350:	10014dec 	.word	0x10014dec
10008354:	1000bf99 	.word	0x1000bf99

10008358 <i2c_read>:
        }
    }
    return 0;
}
static int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
10008358:	b5f0      	push	{r4, r5, r6, r7, lr}
1000835a:	4645      	mov	r5, r8
1000835c:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000835e:	4b20      	ldr	r3, [pc, #128]	; (100083e0 <i2c_read+0x88>)
        }
    }
    return 0;
}
static int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
10008360:	4657      	mov	r7, sl
10008362:	464e      	mov	r6, r9
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
10008364:	4699      	mov	r9, r3
10008366:	b280      	uxth	r0, r0
        }
    }
    return 0;
}
static int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
10008368:	b4e0      	push	{r5, r6, r7}
1000836a:	4692      	mov	sl, r2
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000836c:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
1000836e:	464a      	mov	r2, r9
10008370:	2301      	movs	r3, #1
10008372:	8053      	strh	r3, [r2, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10008374:	6853      	ldr	r3, [r2, #4]
    i2c_rpacket.address = (uint8_t)slave_addr;
10008376:	4e1b      	ldr	r6, [pc, #108]	; (100083e4 <i2c_read+0x8c>)
{
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = 1;
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10008378:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
1000837a:	4653      	mov	r3, sl
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = 1;
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
1000837c:	8030      	strh	r0, [r6, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
1000837e:	8073      	strh	r3, [r6, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008380:	4c19      	ldr	r4, [pc, #100]	; (100083e8 <i2c_read+0x90>)
10008382:	4d1a      	ldr	r5, [pc, #104]	; (100083ec <i2c_read+0x94>)
10008384:	4f1a      	ldr	r7, [pc, #104]	; (100083f0 <i2c_read+0x98>)
10008386:	e003      	b.n	10008390 <i2c_read+0x38>
10008388:	3c01      	subs	r4, #1
1000838a:	b2a4      	uxth	r4, r4
        if(timeout++ >= I2C_TIMEOUT) {
1000838c:	2c00      	cmp	r4, #0
1000838e:	d023      	beq.n	100083d8 <i2c_read+0x80>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008390:	4649      	mov	r1, r9
10008392:	0028      	movs	r0, r5
10008394:	47b8      	blx	r7
10008396:	2800      	cmp	r0, #0
10008398:	d1f6      	bne.n	10008388 <i2c_read+0x30>
1000839a:	4b16      	ldr	r3, [pc, #88]	; (100083f4 <i2c_read+0x9c>)
1000839c:	4c12      	ldr	r4, [pc, #72]	; (100083e8 <i2c_read+0x90>)
1000839e:	4699      	mov	r9, r3
100083a0:	e003      	b.n	100083aa <i2c_read+0x52>
100083a2:	3c01      	subs	r4, #1
100083a4:	b2a4      	uxth	r4, r4
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
100083a6:	2c00      	cmp	r4, #0
100083a8:	d016      	beq.n	100083d8 <i2c_read+0x80>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
100083aa:	0031      	movs	r1, r6
100083ac:	0028      	movs	r0, r5
100083ae:	47c8      	blx	r9
100083b0:	2800      	cmp	r0, #0
100083b2:	d1f6      	bne.n	100083a2 <i2c_read+0x4a>
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
100083b4:	4652      	mov	r2, sl
100083b6:	2300      	movs	r3, #0
100083b8:	2a00      	cmp	r2, #0
100083ba:	d007      	beq.n	100083cc <i2c_read+0x74>
        data[i] = i2c_rpacket.data[i];
100083bc:	4641      	mov	r1, r8
100083be:	6872      	ldr	r2, [r6, #4]
100083c0:	5cd2      	ldrb	r2, [r2, r3]
100083c2:	54ca      	strb	r2, [r1, r3]
100083c4:	3301      	adds	r3, #1
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
100083c6:	b2da      	uxtb	r2, r3
100083c8:	4592      	cmp	sl, r2
100083ca:	d8f7      	bhi.n	100083bc <i2c_read+0x64>
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
100083cc:	2000      	movs	r0, #0
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
}
100083ce:	bc1c      	pop	{r2, r3, r4}
100083d0:	4690      	mov	r8, r2
100083d2:	4699      	mov	r9, r3
100083d4:	46a2      	mov	sl, r4
100083d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
100083d8:	2001      	movs	r0, #1
100083da:	4240      	negs	r0, r0
100083dc:	e7f7      	b.n	100083ce <i2c_read+0x76>
100083de:	46c0      	nop			; (mov r8, r8)
100083e0:	10014df4 	.word	0x10014df4
100083e4:	10014de4 	.word	0x10014de4
100083e8:	000003e9 	.word	0x000003e9
100083ec:	10014dec 	.word	0x10014dec
100083f0:	1000bfc9 	.word	0x1000bfc9
100083f4:	1000bf79 	.word	0x1000bf79

100083f8 <set_int_enable>:
 */
static int set_int_enable(unsigned char enable)
{
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
100083f8:	2324      	movs	r3, #36	; 0x24
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
100083fa:	b570      	push	{r4, r5, r6, lr}
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
100083fc:	4c17      	ldr	r4, [pc, #92]	; (1000845c <set_int_enable+0x64>)
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
100083fe:	b082      	sub	sp, #8
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
10008400:	5ce3      	ldrb	r3, [r4, r3]
10008402:	2b00      	cmp	r3, #0
10008404:	d012      	beq.n	1000842c <set_int_enable+0x34>
        if (enable)
            tmp = BIT_DMP_INT_EN;
10008406:	466b      	mov	r3, sp
10008408:	1ddd      	adds	r5, r3, #7
static int set_int_enable(unsigned char enable)
{
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
        if (enable)
1000840a:	2800      	cmp	r0, #0
1000840c:	d117      	bne.n	1000843e <set_int_enable+0x46>
            tmp = BIT_DMP_INT_EN;
        else
            tmp = 0x00;
1000840e:	7028      	strb	r0, [r5, #0]
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
10008410:	6823      	ldr	r3, [r4, #0]
10008412:	2201      	movs	r2, #1
10008414:	7c59      	ldrb	r1, [r3, #17]
10008416:	6863      	ldr	r3, [r4, #4]
10008418:	4e11      	ldr	r6, [pc, #68]	; (10008460 <set_int_enable+0x68>)
1000841a:	7818      	ldrb	r0, [r3, #0]
1000841c:	002b      	movs	r3, r5
1000841e:	47b0      	blx	r6
10008420:	2800      	cmp	r0, #0
10008422:	d118      	bne.n	10008456 <set_int_enable+0x5e>
            return -1;
        st.chip_cfg.int_enable = tmp;
10008424:	782b      	ldrb	r3, [r5, #0]
10008426:	7463      	strb	r3, [r4, #17]
    }
    return 0;
}
10008428:	b002      	add	sp, #8
1000842a:	bd70      	pop	{r4, r5, r6, pc}
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
1000842c:	7aa3      	ldrb	r3, [r4, #10]
1000842e:	2b00      	cmp	r3, #0
10008430:	d011      	beq.n	10008456 <set_int_enable+0x5e>
            return -1;
        if (enable && st.chip_cfg.int_enable)
10008432:	2800      	cmp	r0, #0
10008434:	d106      	bne.n	10008444 <set_int_enable+0x4c>
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
        else
            tmp = 0x00;
10008436:	466b      	mov	r3, sp
10008438:	1ddd      	adds	r5, r3, #7
1000843a:	71d8      	strb	r0, [r3, #7]
1000843c:	e7e8      	b.n	10008410 <set_int_enable+0x18>
{
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
        if (enable)
            tmp = BIT_DMP_INT_EN;
1000843e:	2302      	movs	r3, #2
10008440:	702b      	strb	r3, [r5, #0]
10008442:	e7e5      	b.n	10008410 <set_int_enable+0x18>
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
10008444:	7c63      	ldrb	r3, [r4, #17]
            return 0;
10008446:	2000      	movs	r0, #0
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
10008448:	2b00      	cmp	r3, #0
1000844a:	d1ed      	bne.n	10008428 <set_int_enable+0x30>
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
1000844c:	466b      	mov	r3, sp
1000844e:	1ddd      	adds	r5, r3, #7
10008450:	2301      	movs	r3, #1
10008452:	702b      	strb	r3, [r5, #0]
10008454:	e7dc      	b.n	10008410 <set_int_enable+0x18>
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
10008456:	2001      	movs	r0, #1
10008458:	4240      	negs	r0, r0
1000845a:	e7e5      	b.n	10008428 <set_int_enable+0x30>
1000845c:	1001372c 	.word	0x1001372c
10008460:	10008301 	.word	0x10008301

10008464 <mpu_get_temperature>:
 *  @param[out] data        Data in q16 format.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_temperature(long *data, unsigned long *timestamp)
{
10008464:	b5f0      	push	{r4, r5, r6, r7, lr}
10008466:	4647      	mov	r7, r8
10008468:	b480      	push	{r7}
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
1000846a:	4d24      	ldr	r5, [pc, #144]	; (100084fc <mpu_get_temperature+0x98>)
 *  @param[out] data        Data in q16 format.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_temperature(long *data, unsigned long *timestamp)
{
1000846c:	b082      	sub	sp, #8
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
1000846e:	7aab      	ldrb	r3, [r5, #10]
 *  @param[out] data        Data in q16 format.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_temperature(long *data, unsigned long *timestamp)
{
10008470:	0007      	movs	r7, r0
10008472:	4688      	mov	r8, r1
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
10008474:	2b00      	cmp	r3, #0
10008476:	d03d      	beq.n	100084f4 <mpu_get_temperature+0x90>
        return -1;

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
10008478:	682b      	ldr	r3, [r5, #0]
1000847a:	2202      	movs	r2, #2
1000847c:	7c19      	ldrb	r1, [r3, #16]
1000847e:	686b      	ldr	r3, [r5, #4]
10008480:	4c1f      	ldr	r4, [pc, #124]	; (10008500 <mpu_get_temperature+0x9c>)
10008482:	7818      	ldrb	r0, [r3, #0]
10008484:	466b      	mov	r3, sp
10008486:	47a0      	blx	r4
10008488:	1e06      	subs	r6, r0, #0
1000848a:	d133      	bne.n	100084f4 <mpu_get_temperature+0x90>
        return -1;
    raw = (tmp[0] << 8) | tmp[1];
1000848c:	466b      	mov	r3, sp
1000848e:	781c      	ldrb	r4, [r3, #0]
10008490:	785b      	ldrb	r3, [r3, #1]
10008492:	0224      	lsls	r4, r4, #8
10008494:	431c      	orrs	r4, r3
    if (timestamp)
10008496:	4643      	mov	r3, r8
    if (!(st.chip_cfg.sensors))
        return -1;

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
        return -1;
    raw = (tmp[0] << 8) | tmp[1];
10008498:	b224      	sxth	r4, r4
    if (timestamp)
1000849a:	2b00      	cmp	r3, #0
1000849c:	d005      	beq.n	100084aa <mpu_get_temperature+0x46>
    }
    return 0;
}
static inline void get_ms(uint32_t *count)
{
    volatile uint32_t load = (uint32_t)(0xffffffff - dualtimer_get_value(DUALTIMER_TIMER2));
1000849e:	4b19      	ldr	r3, [pc, #100]	; (10008504 <mpu_get_temperature+0xa0>)
100084a0:	2001      	movs	r0, #1
100084a2:	4798      	blx	r3
100084a4:	43c0      	mvns	r0, r0
100084a6:	9001      	str	r0, [sp, #4]
    count = (uint32_t *)(load / 26000);
100084a8:	9b01      	ldr	r3, [sp, #4]
        return -1;
    raw = (tmp[0] << 8) | tmp[1];
    if (timestamp)
        get_ms(timestamp);

    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
100084aa:	686b      	ldr	r3, [r5, #4]
100084ac:	0020      	movs	r0, r4
100084ae:	4698      	mov	r8, r3
100084b0:	4d15      	ldr	r5, [pc, #84]	; (10008508 <mpu_get_temperature+0xa4>)
100084b2:	47a8      	blx	r5
100084b4:	4643      	mov	r3, r8
100084b6:	1c04      	adds	r4, r0, #0
100084b8:	2008      	movs	r0, #8
100084ba:	5e18      	ldrsh	r0, [r3, r0]
100084bc:	47a8      	blx	r5
100084be:	4b13      	ldr	r3, [pc, #76]	; (1000850c <mpu_get_temperature+0xa8>)
100084c0:	1c01      	adds	r1, r0, #0
100084c2:	1c20      	adds	r0, r4, #0
100084c4:	4798      	blx	r3
100084c6:	4643      	mov	r3, r8
100084c8:	1c04      	adds	r4, r0, #0
100084ca:	88d8      	ldrh	r0, [r3, #6]
100084cc:	47a8      	blx	r5
100084ce:	4b10      	ldr	r3, [pc, #64]	; (10008510 <mpu_get_temperature+0xac>)
100084d0:	1c01      	adds	r1, r0, #0
100084d2:	1c20      	adds	r0, r4, #0
100084d4:	4798      	blx	r3
100084d6:	490f      	ldr	r1, [pc, #60]	; (10008514 <mpu_get_temperature+0xb0>)
100084d8:	4b0f      	ldr	r3, [pc, #60]	; (10008518 <mpu_get_temperature+0xb4>)
100084da:	4798      	blx	r3
100084dc:	218f      	movs	r1, #143	; 0x8f
100084de:	4b0f      	ldr	r3, [pc, #60]	; (1000851c <mpu_get_temperature+0xb8>)
100084e0:	05c9      	lsls	r1, r1, #23
100084e2:	4798      	blx	r3
100084e4:	4b0e      	ldr	r3, [pc, #56]	; (10008520 <mpu_get_temperature+0xbc>)
100084e6:	4798      	blx	r3
100084e8:	6038      	str	r0, [r7, #0]
    return 0;
}
100084ea:	0030      	movs	r0, r6
100084ec:	b002      	add	sp, #8
100084ee:	bc04      	pop	{r2}
100084f0:	4690      	mov	r8, r2
100084f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
        return -1;
100084f4:	2601      	movs	r6, #1
100084f6:	4276      	negs	r6, r6
100084f8:	e7f7      	b.n	100084ea <mpu_get_temperature+0x86>
100084fa:	46c0      	nop			; (mov r8, r8)
100084fc:	1001372c 	.word	0x1001372c
10008500:	10008359 	.word	0x10008359
10008504:	100081a1 	.word	0x100081a1
10008508:	10010445 	.word	0x10010445
1000850c:	100100f5 	.word	0x100100f5
10008510:	1000fb39 	.word	0x1000fb39
10008514:	420c0000 	.word	0x420c0000
10008518:	1000f84d 	.word	0x1000f84d
1000851c:	1000fecd 	.word	0x1000fecd
10008520:	10010401 	.word	0x10010401

10008524 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
10008524:	b570      	push	{r4, r5, r6, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008526:	4c54      	ldr	r4, [pc, #336]	; (10008678 <mpu_reset_fifo+0x154>)
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
10008528:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000852a:	7aa3      	ldrb	r3, [r4, #10]
1000852c:	2b00      	cmp	r3, #0
1000852e:	d100      	bne.n	10008532 <mpu_reset_fifo+0xe>
10008530:	e08f      	b.n	10008652 <mpu_reset_fifo+0x12e>
        return -1;

    data = 0;
10008532:	466b      	mov	r3, sp
10008534:	1ddd      	adds	r5, r3, #7
10008536:	2300      	movs	r3, #0
10008538:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1000853a:	6823      	ldr	r3, [r4, #0]
1000853c:	2201      	movs	r2, #1
1000853e:	7c59      	ldrb	r1, [r3, #17]
10008540:	6863      	ldr	r3, [r4, #4]
10008542:	4e4e      	ldr	r6, [pc, #312]	; (1000867c <mpu_reset_fifo+0x158>)
10008544:	7818      	ldrb	r0, [r3, #0]
10008546:	002b      	movs	r3, r5
10008548:	47b0      	blx	r6
1000854a:	2800      	cmp	r0, #0
1000854c:	d000      	beq.n	10008550 <mpu_reset_fifo+0x2c>
1000854e:	e080      	b.n	10008652 <mpu_reset_fifo+0x12e>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
10008550:	6823      	ldr	r3, [r4, #0]
10008552:	2201      	movs	r2, #1
10008554:	7959      	ldrb	r1, [r3, #5]
10008556:	6863      	ldr	r3, [r4, #4]
10008558:	7818      	ldrb	r0, [r3, #0]
1000855a:	002b      	movs	r3, r5
1000855c:	47b0      	blx	r6
1000855e:	2800      	cmp	r0, #0
10008560:	d177      	bne.n	10008652 <mpu_reset_fifo+0x12e>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008562:	6823      	ldr	r3, [r4, #0]
10008564:	2201      	movs	r2, #1
10008566:	7919      	ldrb	r1, [r3, #4]
10008568:	6863      	ldr	r3, [r4, #4]
1000856a:	7818      	ldrb	r0, [r3, #0]
1000856c:	002b      	movs	r3, r5
1000856e:	47b0      	blx	r6
10008570:	2800      	cmp	r0, #0
10008572:	d16e      	bne.n	10008652 <mpu_reset_fifo+0x12e>
        return -1;

    if (st.chip_cfg.dmp_on) {
10008574:	2324      	movs	r3, #36	; 0x24
10008576:	5ce3      	ldrb	r3, [r4, r3]
10008578:	2b00      	cmp	r3, #0
1000857a:	d034      	beq.n	100085e6 <mpu_reset_fifo+0xc2>
        data = BIT_FIFO_RST | BIT_DMP_RST;
1000857c:	230c      	movs	r3, #12
1000857e:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008580:	6823      	ldr	r3, [r4, #0]
10008582:	2201      	movs	r2, #1
10008584:	7919      	ldrb	r1, [r3, #4]
10008586:	6863      	ldr	r3, [r4, #4]
10008588:	7818      	ldrb	r0, [r3, #0]
1000858a:	002b      	movs	r3, r5
1000858c:	47b0      	blx	r6
1000858e:	2800      	cmp	r0, #0
10008590:	d15f      	bne.n	10008652 <mpu_reset_fifo+0x12e>
            return -1;
        delay_ms(50);
10008592:	4b3b      	ldr	r3, [pc, #236]	; (10008680 <mpu_reset_fifo+0x15c>)
10008594:	3032      	adds	r0, #50	; 0x32
10008596:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
10008598:	23c0      	movs	r3, #192	; 0xc0
1000859a:	702b      	strb	r3, [r5, #0]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
1000859c:	7aa3      	ldrb	r3, [r4, #10]
1000859e:	07db      	lsls	r3, r3, #31
100085a0:	d461      	bmi.n	10008666 <mpu_reset_fifo+0x142>
            data |= BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100085a2:	6823      	ldr	r3, [r4, #0]
100085a4:	2201      	movs	r2, #1
100085a6:	7919      	ldrb	r1, [r3, #4]
100085a8:	6863      	ldr	r3, [r4, #4]
100085aa:	7818      	ldrb	r0, [r3, #0]
100085ac:	002b      	movs	r3, r5
100085ae:	47b0      	blx	r6
100085b0:	2800      	cmp	r0, #0
100085b2:	d14e      	bne.n	10008652 <mpu_reset_fifo+0x12e>
            return -1;
        if (st.chip_cfg.int_enable)
100085b4:	7c63      	ldrb	r3, [r4, #17]
100085b6:	2b00      	cmp	r3, #0
100085b8:	d158      	bne.n	1000866c <mpu_reset_fifo+0x148>
            data = BIT_DMP_INT_EN;
        else
            data = 0;
100085ba:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
100085bc:	6823      	ldr	r3, [r4, #0]
100085be:	2201      	movs	r2, #1
100085c0:	7c59      	ldrb	r1, [r3, #17]
100085c2:	6863      	ldr	r3, [r4, #4]
100085c4:	7818      	ldrb	r0, [r3, #0]
100085c6:	002b      	movs	r3, r5
100085c8:	47b0      	blx	r6
100085ca:	2800      	cmp	r0, #0
100085cc:	d141      	bne.n	10008652 <mpu_reset_fifo+0x12e>
            return -1;
        data = 0;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100085ce:	6823      	ldr	r3, [r4, #0]
            data = BIT_DMP_INT_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
        data = 0;
100085d0:	7028      	strb	r0, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100085d2:	7959      	ldrb	r1, [r3, #5]
100085d4:	6863      	ldr	r3, [r4, #4]
100085d6:	2201      	movs	r2, #1
100085d8:	7818      	ldrb	r0, [r3, #0]
100085da:	002b      	movs	r3, r5
100085dc:	47b0      	blx	r6
100085de:	1e43      	subs	r3, r0, #1
100085e0:	4198      	sbcs	r0, r3
100085e2:	4240      	negs	r0, r0
100085e4:	e037      	b.n	10008656 <mpu_reset_fifo+0x132>
            return -1;
    } else {
        data = BIT_FIFO_RST;
100085e6:	2304      	movs	r3, #4
100085e8:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100085ea:	6823      	ldr	r3, [r4, #0]
100085ec:	2201      	movs	r2, #1
100085ee:	7919      	ldrb	r1, [r3, #4]
100085f0:	6863      	ldr	r3, [r4, #4]
100085f2:	7818      	ldrb	r0, [r3, #0]
100085f4:	002b      	movs	r3, r5
100085f6:	47b0      	blx	r6
100085f8:	2800      	cmp	r0, #0
100085fa:	d12a      	bne.n	10008652 <mpu_reset_fifo+0x12e>
            return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
100085fc:	7ca3      	ldrb	r3, [r4, #18]
100085fe:	2b00      	cmp	r3, #0
10008600:	d02b      	beq.n	1000865a <mpu_reset_fifo+0x136>
            data = BIT_FIFO_EN;
10008602:	2340      	movs	r3, #64	; 0x40
10008604:	702b      	strb	r3, [r5, #0]
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008606:	6823      	ldr	r3, [r4, #0]
10008608:	2201      	movs	r2, #1
1000860a:	7919      	ldrb	r1, [r3, #4]
1000860c:	6863      	ldr	r3, [r4, #4]
1000860e:	7818      	ldrb	r0, [r3, #0]
10008610:	002b      	movs	r3, r5
10008612:	47b0      	blx	r6
10008614:	2800      	cmp	r0, #0
10008616:	d11c      	bne.n	10008652 <mpu_reset_fifo+0x12e>
            return -1;
        delay_ms(50);
10008618:	4b19      	ldr	r3, [pc, #100]	; (10008680 <mpu_reset_fifo+0x15c>)
1000861a:	3032      	adds	r0, #50	; 0x32
1000861c:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
1000861e:	7c63      	ldrb	r3, [r4, #17]
10008620:	2b00      	cmp	r3, #0
10008622:	d026      	beq.n	10008672 <mpu_reset_fifo+0x14e>
            data = BIT_DATA_RDY_EN;
10008624:	2301      	movs	r3, #1
10008626:	702b      	strb	r3, [r5, #0]
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
10008628:	6823      	ldr	r3, [r4, #0]
1000862a:	2201      	movs	r2, #1
1000862c:	7c59      	ldrb	r1, [r3, #17]
1000862e:	6863      	ldr	r3, [r4, #4]
10008630:	7818      	ldrb	r0, [r3, #0]
10008632:	002b      	movs	r3, r5
10008634:	47b0      	blx	r6
10008636:	2800      	cmp	r0, #0
10008638:	d10b      	bne.n	10008652 <mpu_reset_fifo+0x12e>
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
1000863a:	0023      	movs	r3, r4
1000863c:	6822      	ldr	r2, [r4, #0]
1000863e:	3310      	adds	r3, #16
10008640:	7951      	ldrb	r1, [r2, #5]
10008642:	6862      	ldr	r2, [r4, #4]
10008644:	7810      	ldrb	r0, [r2, #0]
10008646:	2201      	movs	r2, #1
10008648:	47b0      	blx	r6
1000864a:	1e43      	subs	r3, r0, #1
1000864c:	4198      	sbcs	r0, r3
1000864e:	4240      	negs	r0, r0
10008650:	e001      	b.n	10008656 <mpu_reset_fifo+0x132>
int mpu_reset_fifo(void)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008652:	2001      	movs	r0, #1
10008654:	4240      	negs	r0, r0
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
10008656:	b002      	add	sp, #8
10008658:	bd70      	pop	{r4, r5, r6, pc}
            return -1;
    } else {
        data = BIT_FIFO_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
1000865a:	7aa3      	ldrb	r3, [r4, #10]
1000865c:	07db      	lsls	r3, r3, #31
1000865e:	d5d0      	bpl.n	10008602 <mpu_reset_fifo+0xde>
            data = BIT_FIFO_EN;
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
10008660:	2360      	movs	r3, #96	; 0x60
10008662:	702b      	strb	r3, [r5, #0]
10008664:	e7cf      	b.n	10008606 <mpu_reset_fifo+0xe2>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
        delay_ms(50);
        data = BIT_DMP_EN | BIT_FIFO_EN;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            data |= BIT_AUX_IF_EN;
10008666:	23e0      	movs	r3, #224	; 0xe0
10008668:	702b      	strb	r3, [r5, #0]
1000866a:	e79a      	b.n	100085a2 <mpu_reset_fifo+0x7e>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
        if (st.chip_cfg.int_enable)
            data = BIT_DMP_INT_EN;
1000866c:	2302      	movs	r3, #2
1000866e:	702b      	strb	r3, [r5, #0]
10008670:	e7a4      	b.n	100085bc <mpu_reset_fifo+0x98>
            return -1;
        delay_ms(50);
        if (st.chip_cfg.int_enable)
            data = BIT_DATA_RDY_EN;
        else
            data = 0;
10008672:	702b      	strb	r3, [r5, #0]
10008674:	e7d8      	b.n	10008628 <mpu_reset_fifo+0x104>
10008676:	46c0      	nop			; (mov r8, r8)
10008678:	1001372c 	.word	0x1001372c
1000867c:	10008301 	.word	0x10008301
10008680:	1000810d 	.word	0x1000810d

10008684 <mpu_get_gyro_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
    switch (st.chip_cfg.gyro_fsr) {
10008684:	4b0e      	ldr	r3, [pc, #56]	; (100086c0 <mpu_get_gyro_fsr+0x3c>)
10008686:	7a1b      	ldrb	r3, [r3, #8]
10008688:	2b01      	cmp	r3, #1
1000868a:	d014      	beq.n	100086b6 <mpu_get_gyro_fsr+0x32>
1000868c:	2b00      	cmp	r3, #0
1000868e:	d00f      	beq.n	100086b0 <mpu_get_gyro_fsr+0x2c>
10008690:	2b02      	cmp	r3, #2
10008692:	d006      	beq.n	100086a2 <mpu_get_gyro_fsr+0x1e>
10008694:	2b03      	cmp	r3, #3
10008696:	d108      	bne.n	100086aa <mpu_get_gyro_fsr+0x26>
        break;
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
        break;
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
10008698:	23fa      	movs	r3, #250	; 0xfa
1000869a:	00db      	lsls	r3, r3, #3
1000869c:	8003      	strh	r3, [r0, #0]
    default:
        fsr[0] = 0;
        break;
    }
    return 0;
}
1000869e:	2000      	movs	r0, #0
100086a0:	4770      	bx	lr
        break;
    case INV_FSR_500DPS:
        fsr[0] = 500;
        break;
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
100086a2:	23fa      	movs	r3, #250	; 0xfa
100086a4:	009b      	lsls	r3, r3, #2
100086a6:	8003      	strh	r3, [r0, #0]
        break;
100086a8:	e7f9      	b.n	1000869e <mpu_get_gyro_fsr+0x1a>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
        break;
    default:
        fsr[0] = 0;
100086aa:	2300      	movs	r3, #0
100086ac:	8003      	strh	r3, [r0, #0]
        break;
100086ae:	e7f6      	b.n	1000869e <mpu_get_gyro_fsr+0x1a>
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
    switch (st.chip_cfg.gyro_fsr) {
    case INV_FSR_250DPS:
        fsr[0] = 250;
100086b0:	23fa      	movs	r3, #250	; 0xfa
100086b2:	8003      	strh	r3, [r0, #0]
        break;
100086b4:	e7f3      	b.n	1000869e <mpu_get_gyro_fsr+0x1a>
    case INV_FSR_500DPS:
        fsr[0] = 500;
100086b6:	23fa      	movs	r3, #250	; 0xfa
100086b8:	005b      	lsls	r3, r3, #1
100086ba:	8003      	strh	r3, [r0, #0]
        break;
100086bc:	e7ef      	b.n	1000869e <mpu_get_gyro_fsr+0x1a>
100086be:	46c0      	nop			; (mov r8, r8)
100086c0:	1001372c 	.word	0x1001372c

100086c4 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
100086c4:	b570      	push	{r4, r5, r6, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100086c6:	4c20      	ldr	r4, [pc, #128]	; (10008748 <mpu_set_gyro_fsr+0x84>)
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
100086c8:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100086ca:	7aa3      	ldrb	r3, [r4, #10]
100086cc:	2b00      	cmp	r3, #0
100086ce:	d02a      	beq.n	10008726 <mpu_set_gyro_fsr+0x62>
        return -1;

    switch (fsr) {
100086d0:	23fa      	movs	r3, #250	; 0xfa
100086d2:	005b      	lsls	r3, r3, #1
100086d4:	4298      	cmp	r0, r3
100086d6:	d030      	beq.n	1000873a <mpu_set_gyro_fsr+0x76>
100086d8:	d90d      	bls.n	100086f6 <mpu_set_gyro_fsr+0x32>
100086da:	23fa      	movs	r3, #250	; 0xfa
100086dc:	009b      	lsls	r3, r3, #2
100086de:	4298      	cmp	r0, r3
100086e0:	d025      	beq.n	1000872e <mpu_set_gyro_fsr+0x6a>
100086e2:	23fa      	movs	r3, #250	; 0xfa
100086e4:	00db      	lsls	r3, r3, #3
100086e6:	4298      	cmp	r0, r3
100086e8:	d11d      	bne.n	10008726 <mpu_set_gyro_fsr+0x62>
        break;
    case 1000:
        data = INV_FSR_1000DPS << 3;
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
100086ea:	466b      	mov	r3, sp
100086ec:	1ddd      	adds	r5, r3, #7
100086ee:	2318      	movs	r3, #24
100086f0:	702b      	strb	r3, [r5, #0]
        break;
100086f2:	3b15      	subs	r3, #21
100086f4:	e005      	b.n	10008702 <mpu_set_gyro_fsr+0x3e>
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;

    switch (fsr) {
100086f6:	28fa      	cmp	r0, #250	; 0xfa
100086f8:	d115      	bne.n	10008726 <mpu_set_gyro_fsr+0x62>
    case 250:
        data = INV_FSR_250DPS << 3;
100086fa:	466b      	mov	r3, sp
100086fc:	1ddd      	adds	r5, r3, #7
100086fe:	2300      	movs	r3, #0
10008700:	702b      	strb	r3, [r5, #0]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008702:	7a22      	ldrb	r2, [r4, #8]
        return 0;
10008704:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008706:	429a      	cmp	r2, r3
10008708:	d00f      	beq.n	1000872a <mpu_set_gyro_fsr+0x66>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
1000870a:	6823      	ldr	r3, [r4, #0]
1000870c:	2201      	movs	r2, #1
1000870e:	7999      	ldrb	r1, [r3, #6]
10008710:	6863      	ldr	r3, [r4, #4]
10008712:	4e0e      	ldr	r6, [pc, #56]	; (1000874c <mpu_set_gyro_fsr+0x88>)
10008714:	7818      	ldrb	r0, [r3, #0]
10008716:	002b      	movs	r3, r5
10008718:	47b0      	blx	r6
1000871a:	2800      	cmp	r0, #0
1000871c:	d103      	bne.n	10008726 <mpu_set_gyro_fsr+0x62>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
1000871e:	782b      	ldrb	r3, [r5, #0]
10008720:	08db      	lsrs	r3, r3, #3
10008722:	7223      	strb	r3, [r4, #8]
    return 0;
10008724:	e001      	b.n	1000872a <mpu_set_gyro_fsr+0x66>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
10008726:	2001      	movs	r0, #1
10008728:	4240      	negs	r0, r0
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
    return 0;
}
1000872a:	b002      	add	sp, #8
1000872c:	bd70      	pop	{r4, r5, r6, pc}
        break;
    case 500:
        data = INV_FSR_500DPS << 3;
        break;
    case 1000:
        data = INV_FSR_1000DPS << 3;
1000872e:	466b      	mov	r3, sp
10008730:	1ddd      	adds	r5, r3, #7
10008732:	2310      	movs	r3, #16
10008734:	702b      	strb	r3, [r5, #0]
        break;
10008736:	3b0e      	subs	r3, #14
10008738:	e7e3      	b.n	10008702 <mpu_set_gyro_fsr+0x3e>
    switch (fsr) {
    case 250:
        data = INV_FSR_250DPS << 3;
        break;
    case 500:
        data = INV_FSR_500DPS << 3;
1000873a:	466b      	mov	r3, sp
1000873c:	1ddd      	adds	r5, r3, #7
1000873e:	2308      	movs	r3, #8
10008740:	702b      	strb	r3, [r5, #0]
        break;
10008742:	3b07      	subs	r3, #7
10008744:	e7dd      	b.n	10008702 <mpu_set_gyro_fsr+0x3e>
10008746:	46c0      	nop			; (mov r8, r8)
10008748:	1001372c 	.word	0x1001372c
1000874c:	10008301 	.word	0x10008301

10008750 <mpu_get_accel_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
10008750:	4a10      	ldr	r2, [pc, #64]	; (10008794 <mpu_get_accel_fsr+0x44>)
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
10008752:	0001      	movs	r1, r0
    switch (st.chip_cfg.accel_fsr) {
10008754:	7a53      	ldrb	r3, [r2, #9]
10008756:	2b01      	cmp	r3, #1
10008758:	d018      	beq.n	1000878c <mpu_get_accel_fsr+0x3c>
1000875a:	2b00      	cmp	r3, #0
1000875c:	d013      	beq.n	10008786 <mpu_get_accel_fsr+0x36>
1000875e:	2b02      	cmp	r3, #2
10008760:	d00b      	beq.n	1000877a <mpu_get_accel_fsr+0x2a>
10008762:	2b03      	cmp	r3, #3
10008764:	d10c      	bne.n	10008780 <mpu_get_accel_fsr+0x30>
        break;
    case INV_FSR_8G:
        fsr[0] = 8;
        break;
    case INV_FSR_16G:
        fsr[0] = 16;
10008766:	2310      	movs	r3, #16
10008768:	7003      	strb	r3, [r0, #0]
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
1000876a:	7cd3      	ldrb	r3, [r2, #19]
        fsr[0] <<= 1;
    return 0;
1000876c:	2000      	movs	r0, #0
        fsr[0] = 16;
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
1000876e:	2b00      	cmp	r3, #0
10008770:	d002      	beq.n	10008778 <mpu_get_accel_fsr+0x28>
        fsr[0] <<= 1;
10008772:	780b      	ldrb	r3, [r1, #0]
10008774:	005b      	lsls	r3, r3, #1
10008776:	700b      	strb	r3, [r1, #0]
    return 0;
}
10008778:	4770      	bx	lr
        break;
    case INV_FSR_4G:
        fsr[0] = 4;
        break;
    case INV_FSR_8G:
        fsr[0] = 8;
1000877a:	2308      	movs	r3, #8
1000877c:	7003      	strb	r3, [r0, #0]
        break;
1000877e:	e7f4      	b.n	1000876a <mpu_get_accel_fsr+0x1a>
    case INV_FSR_16G:
        fsr[0] = 16;
        break;
    default:
        return -1;
10008780:	2001      	movs	r0, #1
10008782:	4240      	negs	r0, r0
10008784:	e7f8      	b.n	10008778 <mpu_get_accel_fsr+0x28>
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
    case INV_FSR_2G:
        fsr[0] = 2;
10008786:	2302      	movs	r3, #2
10008788:	7003      	strb	r3, [r0, #0]
        break;
1000878a:	e7ee      	b.n	1000876a <mpu_get_accel_fsr+0x1a>
    case INV_FSR_4G:
        fsr[0] = 4;
1000878c:	2304      	movs	r3, #4
1000878e:	7003      	strb	r3, [r0, #0]
        break;
10008790:	e7eb      	b.n	1000876a <mpu_get_accel_fsr+0x1a>
10008792:	46c0      	nop			; (mov r8, r8)
10008794:	1001372c 	.word	0x1001372c

10008798 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
10008798:	b570      	push	{r4, r5, r6, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000879a:	4c1d      	ldr	r4, [pc, #116]	; (10008810 <mpu_set_accel_fsr+0x78>)
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
1000879c:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000879e:	7aa3      	ldrb	r3, [r4, #10]
100087a0:	2b00      	cmp	r3, #0
100087a2:	d024      	beq.n	100087ee <mpu_set_accel_fsr+0x56>
        return -1;

    switch (fsr) {
100087a4:	2804      	cmp	r0, #4
100087a6:	d02c      	beq.n	10008802 <mpu_set_accel_fsr+0x6a>
100087a8:	d909      	bls.n	100087be <mpu_set_accel_fsr+0x26>
100087aa:	2808      	cmp	r0, #8
100087ac:	d023      	beq.n	100087f6 <mpu_set_accel_fsr+0x5e>
100087ae:	2810      	cmp	r0, #16
100087b0:	d11d      	bne.n	100087ee <mpu_set_accel_fsr+0x56>
        break;
    case 8:
        data = INV_FSR_8G << 3;
        break;
    case 16:
        data = INV_FSR_16G << 3;
100087b2:	466b      	mov	r3, sp
100087b4:	1ddd      	adds	r5, r3, #7
100087b6:	2318      	movs	r3, #24
100087b8:	702b      	strb	r3, [r5, #0]
        break;
100087ba:	3b15      	subs	r3, #21
100087bc:	e005      	b.n	100087ca <mpu_set_accel_fsr+0x32>
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;

    switch (fsr) {
100087be:	2802      	cmp	r0, #2
100087c0:	d115      	bne.n	100087ee <mpu_set_accel_fsr+0x56>
    case 2:
        data = INV_FSR_2G << 3;
100087c2:	466b      	mov	r3, sp
100087c4:	1ddd      	adds	r5, r3, #7
100087c6:	2300      	movs	r3, #0
100087c8:	702b      	strb	r3, [r5, #0]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
100087ca:	7a62      	ldrb	r2, [r4, #9]
        return 0;
100087cc:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
100087ce:	429a      	cmp	r2, r3
100087d0:	d00f      	beq.n	100087f2 <mpu_set_accel_fsr+0x5a>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
100087d2:	6823      	ldr	r3, [r4, #0]
100087d4:	2201      	movs	r2, #1
100087d6:	79d9      	ldrb	r1, [r3, #7]
100087d8:	6863      	ldr	r3, [r4, #4]
100087da:	4e0e      	ldr	r6, [pc, #56]	; (10008814 <mpu_set_accel_fsr+0x7c>)
100087dc:	7818      	ldrb	r0, [r3, #0]
100087de:	002b      	movs	r3, r5
100087e0:	47b0      	blx	r6
100087e2:	2800      	cmp	r0, #0
100087e4:	d103      	bne.n	100087ee <mpu_set_accel_fsr+0x56>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
100087e6:	782b      	ldrb	r3, [r5, #0]
100087e8:	08db      	lsrs	r3, r3, #3
100087ea:	7263      	strb	r3, [r4, #9]
    return 0;
100087ec:	e001      	b.n	100087f2 <mpu_set_accel_fsr+0x5a>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
100087ee:	2001      	movs	r0, #1
100087f0:	4240      	negs	r0, r0
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
    return 0;
}
100087f2:	b002      	add	sp, #8
100087f4:	bd70      	pop	{r4, r5, r6, pc}
        break;
    case 4:
        data = INV_FSR_4G << 3;
        break;
    case 8:
        data = INV_FSR_8G << 3;
100087f6:	466b      	mov	r3, sp
100087f8:	1ddd      	adds	r5, r3, #7
100087fa:	2310      	movs	r3, #16
100087fc:	702b      	strb	r3, [r5, #0]
        break;
100087fe:	3b0e      	subs	r3, #14
10008800:	e7e3      	b.n	100087ca <mpu_set_accel_fsr+0x32>
    switch (fsr) {
    case 2:
        data = INV_FSR_2G << 3;
        break;
    case 4:
        data = INV_FSR_4G << 3;
10008802:	466b      	mov	r3, sp
10008804:	1ddd      	adds	r5, r3, #7
10008806:	2308      	movs	r3, #8
10008808:	702b      	strb	r3, [r5, #0]
        break;
1000880a:	3b07      	subs	r3, #7
1000880c:	e7dd      	b.n	100087ca <mpu_set_accel_fsr+0x32>
1000880e:	46c0      	nop			; (mov r8, r8)
10008810:	1001372c 	.word	0x1001372c
10008814:	10008301 	.word	0x10008301

10008818 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
10008818:	b570      	push	{r4, r5, r6, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000881a:	4c22      	ldr	r4, [pc, #136]	; (100088a4 <mpu_set_lpf+0x8c>)
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
1000881c:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000881e:	7aa3      	ldrb	r3, [r4, #10]
10008820:	2b00      	cmp	r3, #0
10008822:	d033      	beq.n	1000888c <mpu_set_lpf+0x74>
        return -1;

    if (lpf >= 188)
        data = INV_FILTER_188HZ;
10008824:	466b      	mov	r3, sp
10008826:	1ddd      	adds	r5, r3, #7
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;

    if (lpf >= 188)
10008828:	28bb      	cmp	r0, #187	; 0xbb
1000882a:	d822      	bhi.n	10008872 <mpu_set_lpf+0x5a>
        data = INV_FILTER_188HZ;
    else if (lpf >= 98)
1000882c:	2861      	cmp	r0, #97	; 0x61
1000882e:	d923      	bls.n	10008878 <mpu_set_lpf+0x60>
        data = INV_FILTER_98HZ;
10008830:	2302      	movs	r3, #2
10008832:	702b      	strb	r3, [r5, #0]
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
10008834:	7ae2      	ldrb	r2, [r4, #11]
        return 0;
10008836:	2000      	movs	r0, #0
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
10008838:	429a      	cmp	r2, r3
1000883a:	d018      	beq.n	1000886e <mpu_set_lpf+0x56>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
1000883c:	6823      	ldr	r3, [r4, #0]
1000883e:	2201      	movs	r2, #1
10008840:	7899      	ldrb	r1, [r3, #2]
10008842:	6863      	ldr	r3, [r4, #4]
10008844:	4e18      	ldr	r6, [pc, #96]	; (100088a8 <mpu_set_lpf+0x90>)
10008846:	7818      	ldrb	r0, [r3, #0]
10008848:	002b      	movs	r3, r5
1000884a:	47b0      	blx	r6
1000884c:	2800      	cmp	r0, #0
1000884e:	d11d      	bne.n	1000888c <mpu_set_lpf+0x74>
        return -1;
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;
10008850:	2340      	movs	r3, #64	; 0x40
10008852:	782a      	ldrb	r2, [r5, #0]
10008854:	4313      	orrs	r3, r2
10008856:	702b      	strb	r3, [r5, #0]

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
10008858:	6823      	ldr	r3, [r4, #0]
1000885a:	2201      	movs	r2, #1
1000885c:	7a19      	ldrb	r1, [r3, #8]
1000885e:	6863      	ldr	r3, [r4, #4]
10008860:	7818      	ldrb	r0, [r3, #0]
10008862:	002b      	movs	r3, r5
10008864:	47b0      	blx	r6
10008866:	2800      	cmp	r0, #0
10008868:	d110      	bne.n	1000888c <mpu_set_lpf+0x74>
            return -1;
#endif
    st.chip_cfg.lpf = data;
1000886a:	782b      	ldrb	r3, [r5, #0]
1000886c:	72e3      	strb	r3, [r4, #11]
    return 0;
}
1000886e:	b002      	add	sp, #8
10008870:	bd70      	pop	{r4, r5, r6, pc}

    if (!(st.chip_cfg.sensors))
        return -1;

    if (lpf >= 188)
        data = INV_FILTER_188HZ;
10008872:	2301      	movs	r3, #1
10008874:	702b      	strb	r3, [r5, #0]
10008876:	e7dd      	b.n	10008834 <mpu_set_lpf+0x1c>
    else if (lpf >= 98)
        data = INV_FILTER_98HZ;
    else if (lpf >= 42)
10008878:	2829      	cmp	r0, #41	; 0x29
1000887a:	d804      	bhi.n	10008886 <mpu_set_lpf+0x6e>
        data = INV_FILTER_42HZ;
    else if (lpf >= 20)
1000887c:	2813      	cmp	r0, #19
1000887e:	d908      	bls.n	10008892 <mpu_set_lpf+0x7a>
        data = INV_FILTER_20HZ;
10008880:	2304      	movs	r3, #4
10008882:	702b      	strb	r3, [r5, #0]
10008884:	e7d6      	b.n	10008834 <mpu_set_lpf+0x1c>
    if (lpf >= 188)
        data = INV_FILTER_188HZ;
    else if (lpf >= 98)
        data = INV_FILTER_98HZ;
    else if (lpf >= 42)
        data = INV_FILTER_42HZ;
10008886:	2303      	movs	r3, #3
10008888:	702b      	strb	r3, [r5, #0]
1000888a:	e7d3      	b.n	10008834 <mpu_set_lpf+0x1c>
int mpu_set_lpf(unsigned short lpf)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
1000888c:	2001      	movs	r0, #1
1000888e:	4240      	negs	r0, r0
10008890:	e7ed      	b.n	1000886e <mpu_set_lpf+0x56>
        data = INV_FILTER_98HZ;
    else if (lpf >= 42)
        data = INV_FILTER_42HZ;
    else if (lpf >= 20)
        data = INV_FILTER_20HZ;
    else if (lpf >= 10)
10008892:	2809      	cmp	r0, #9
10008894:	d902      	bls.n	1000889c <mpu_set_lpf+0x84>
        data = INV_FILTER_10HZ;
10008896:	2305      	movs	r3, #5
10008898:	702b      	strb	r3, [r5, #0]
1000889a:	e7cb      	b.n	10008834 <mpu_set_lpf+0x1c>
    else
        data = INV_FILTER_5HZ;
1000889c:	2306      	movs	r3, #6
1000889e:	702b      	strb	r3, [r5, #0]
100088a0:	e7c8      	b.n	10008834 <mpu_set_lpf+0x1c>
100088a2:	46c0      	nop			; (mov r8, r8)
100088a4:	1001372c 	.word	0x1001372c
100088a8:	10008301 	.word	0x10008301

100088ac <mpu_get_sample_rate>:
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
100088ac:	2224      	movs	r2, #36	; 0x24
100088ae:	4b05      	ldr	r3, [pc, #20]	; (100088c4 <mpu_get_sample_rate+0x18>)
100088b0:	5c9a      	ldrb	r2, [r3, r2]
100088b2:	2a00      	cmp	r2, #0
100088b4:	d103      	bne.n	100088be <mpu_get_sample_rate+0x12>
        return -1;
    else
        rate[0] = st.chip_cfg.sample_rate;
100088b6:	89db      	ldrh	r3, [r3, #14]
100088b8:	8003      	strh	r3, [r0, #0]
    return 0;
100088ba:	2000      	movs	r0, #0
}
100088bc:	4770      	bx	lr
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
        return -1;
100088be:	2001      	movs	r0, #1
100088c0:	4240      	negs	r0, r0
100088c2:	e7fb      	b.n	100088bc <mpu_get_sample_rate+0x10>
100088c4:	1001372c 	.word	0x1001372c

100088c8 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
100088c8:	b530      	push	{r4, r5, lr}
100088ca:	0001      	movs	r1, r0
100088cc:	b083      	sub	sp, #12
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
100088ce:	2800      	cmp	r0, #0
100088d0:	d020      	beq.n	10008914 <mpu_set_compass_sample_rate+0x4c>
100088d2:	4c12      	ldr	r4, [pc, #72]	; (1000891c <mpu_set_compass_sample_rate+0x54>)
100088d4:	89e0      	ldrh	r0, [r4, #14]
100088d6:	4281      	cmp	r1, r0
100088d8:	d81c      	bhi.n	10008914 <mpu_set_compass_sample_rate+0x4c>
100088da:	2964      	cmp	r1, #100	; 0x64
100088dc:	d81a      	bhi.n	10008914 <mpu_set_compass_sample_rate+0x4c>
        return -1;

    div = st.chip_cfg.sample_rate / rate - 1;
100088de:	4b10      	ldr	r3, [pc, #64]	; (10008920 <mpu_set_compass_sample_rate+0x58>)
100088e0:	4798      	blx	r3
100088e2:	466b      	mov	r3, sp
100088e4:	3801      	subs	r0, #1
100088e6:	71d8      	strb	r0, [r3, #7]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
100088e8:	2324      	movs	r3, #36	; 0x24
100088ea:	6822      	ldr	r2, [r4, #0]
100088ec:	4d0d      	ldr	r5, [pc, #52]	; (10008924 <mpu_set_compass_sample_rate+0x5c>)
100088ee:	5cd1      	ldrb	r1, [r2, r3]
100088f0:	6863      	ldr	r3, [r4, #4]
100088f2:	2201      	movs	r2, #1
100088f4:	7818      	ldrb	r0, [r3, #0]
100088f6:	466b      	mov	r3, sp
100088f8:	3307      	adds	r3, #7
100088fa:	47a8      	blx	r5
100088fc:	1e05      	subs	r5, r0, #0
100088fe:	d109      	bne.n	10008914 <mpu_set_compass_sample_rate+0x4c>
        return -1;
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
10008900:	466b      	mov	r3, sp
10008902:	79d9      	ldrb	r1, [r3, #7]
10008904:	89e0      	ldrh	r0, [r4, #14]
10008906:	3101      	adds	r1, #1
10008908:	4b07      	ldr	r3, [pc, #28]	; (10008928 <mpu_set_compass_sample_rate+0x60>)
1000890a:	4798      	blx	r3
1000890c:	8520      	strh	r0, [r4, #40]	; 0x28
    return 0;
#else
    return -1;
#endif
}
1000890e:	0028      	movs	r0, r5
10008910:	b003      	add	sp, #12
10008912:	bd30      	pop	{r4, r5, pc}
int mpu_set_compass_sample_rate(unsigned short rate)
{
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
        return -1;
10008914:	2501      	movs	r5, #1
10008916:	426d      	negs	r5, r5
10008918:	e7f9      	b.n	1000890e <mpu_set_compass_sample_rate+0x46>
1000891a:	46c0      	nop			; (mov r8, r8)
1000891c:	1001372c 	.word	0x1001372c
10008920:	1000f3ad 	.word	0x1000f3ad
10008924:	10008301 	.word	0x10008301
10008928:	1000f4c1 	.word	0x1000f4c1

1000892c <mpu_configure_fifo>:
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
1000892c:	2324      	movs	r3, #36	; 0x24
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
1000892e:	b570      	push	{r4, r5, r6, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008930:	4d14      	ldr	r5, [pc, #80]	; (10008984 <mpu_configure_fifo+0x58>)
        return 0;
10008932:	2400      	movs	r4, #0
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008934:	5ceb      	ldrb	r3, [r5, r3]
10008936:	2b00      	cmp	r3, #0
10008938:	d113      	bne.n	10008962 <mpu_configure_fifo+0x36>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
1000893a:	7aac      	ldrb	r4, [r5, #10]
1000893c:	2c00      	cmp	r4, #0
1000893e:	d01d      	beq.n	1000897c <mpu_configure_fifo+0x50>
{
    unsigned char prev;
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
10008940:	3301      	adds	r3, #1
10008942:	4398      	bics	r0, r3
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
        prev = st.chip_cfg.fifo_enable;
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
10008944:	4004      	ands	r4, r0
    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
        prev = st.chip_cfg.fifo_enable;
10008946:	7c2e      	ldrb	r6, [r5, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
10008948:	742c      	strb	r4, [r5, #16]
        if (st.chip_cfg.fifo_enable != sensors)
1000894a:	1b04      	subs	r4, r0, r4
1000894c:	1e63      	subs	r3, r4, #1
1000894e:	419c      	sbcs	r4, r3
10008950:	4264      	negs	r4, r4
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
10008952:	2800      	cmp	r0, #0
10008954:	d107      	bne.n	10008966 <mpu_configure_fifo+0x3a>
10008956:	7d2b      	ldrb	r3, [r5, #20]
10008958:	2b00      	cmp	r3, #0
1000895a:	d000      	beq.n	1000895e <mpu_configure_fifo+0x32>
            set_int_enable(1);
1000895c:	2001      	movs	r0, #1
1000895e:	4b0a      	ldr	r3, [pc, #40]	; (10008988 <mpu_configure_fifo+0x5c>)
10008960:	4798      	blx	r3
            }
        }
    }

    return result;
}
10008962:	0020      	movs	r0, r4
10008964:	bd70      	pop	{r4, r5, r6, pc}
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
10008966:	4b08      	ldr	r3, [pc, #32]	; (10008988 <mpu_configure_fifo+0x5c>)
10008968:	2001      	movs	r0, #1
1000896a:	4798      	blx	r3
        else
            set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
1000896c:	4b07      	ldr	r3, [pc, #28]	; (1000898c <mpu_configure_fifo+0x60>)
1000896e:	4798      	blx	r3
10008970:	2800      	cmp	r0, #0
10008972:	d0f6      	beq.n	10008962 <mpu_configure_fifo+0x36>
                st.chip_cfg.fifo_enable = prev;
                return -1;
10008974:	2401      	movs	r4, #1
            set_int_enable(1);
        else
            set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
                st.chip_cfg.fifo_enable = prev;
10008976:	742e      	strb	r6, [r5, #16]
                return -1;
10008978:	4264      	negs	r4, r4
1000897a:	e7f2      	b.n	10008962 <mpu_configure_fifo+0x36>

    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
1000897c:	2401      	movs	r4, #1
1000897e:	4264      	negs	r4, r4
10008980:	e7ef      	b.n	10008962 <mpu_configure_fifo+0x36>
10008982:	46c0      	nop			; (mov r8, r8)
10008984:	1001372c 	.word	0x1001372c
10008988:	100083f9 	.word	0x100083f9
1000898c:	10008525 	.word	0x10008525

10008990 <mpu_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int mpu_read_fifo(short *gyro, short *accel, unsigned long *timestamp,
        unsigned char *sensors, unsigned char *more)
{
10008990:	b5f0      	push	{r4, r5, r6, r7, lr}
10008992:	464d      	mov	r5, r9
10008994:	4644      	mov	r4, r8
10008996:	465f      	mov	r7, fp
10008998:	4656      	mov	r6, sl
1000899a:	4698      	mov	r8, r3
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;

    if (st.chip_cfg.dmp_on)
1000899c:	2324      	movs	r3, #36	; 0x24
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int mpu_read_fifo(short *gyro, short *accel, unsigned long *timestamp,
        unsigned char *sensors, unsigned char *more)
{
1000899e:	b4f0      	push	{r4, r5, r6, r7}
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;

    if (st.chip_cfg.dmp_on)
100089a0:	4d68      	ldr	r5, [pc, #416]	; (10008b44 <mpu_read_fifo+0x1b4>)
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int mpu_read_fifo(short *gyro, short *accel, unsigned long *timestamp,
        unsigned char *sensors, unsigned char *more)
{
100089a2:	b087      	sub	sp, #28
100089a4:	9000      	str	r0, [sp, #0]
100089a6:	9101      	str	r1, [sp, #4]
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;

    if (st.chip_cfg.dmp_on)
100089a8:	5ceb      	ldrb	r3, [r5, r3]
100089aa:	2b00      	cmp	r3, #0
100089ac:	d000      	beq.n	100089b0 <mpu_read_fifo+0x20>
100089ae:	e0be      	b.n	10008b2e <mpu_read_fifo+0x19e>
        return -1;

    sensors[0] = 0;
100089b0:	4642      	mov	r2, r8
100089b2:	7013      	strb	r3, [r2, #0]
    if (!st.chip_cfg.sensors)
100089b4:	7aab      	ldrb	r3, [r5, #10]
100089b6:	2b00      	cmp	r3, #0
100089b8:	d100      	bne.n	100089bc <mpu_read_fifo+0x2c>
100089ba:	e0b8      	b.n	10008b2e <mpu_read_fifo+0x19e>
        return -1;
    if (!st.chip_cfg.fifo_enable)
100089bc:	7c2b      	ldrb	r3, [r5, #16]
100089be:	2b00      	cmp	r3, #0
100089c0:	d100      	bne.n	100089c4 <mpu_read_fifo+0x34>
100089c2:	e0b4      	b.n	10008b2e <mpu_read_fifo+0x19e>
        return -1;

    if (st.chip_cfg.fifo_enable & INV_X_GYRO)
100089c4:	065c      	lsls	r4, r3, #25
int mpu_read_fifo(short *gyro, short *accel, unsigned long *timestamp,
        unsigned char *sensors, unsigned char *more)
{
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
100089c6:	0fe4      	lsrs	r4, r4, #31
100089c8:	0064      	lsls	r4, r4, #1
    if (!st.chip_cfg.fifo_enable)
        return -1;

    if (st.chip_cfg.fifo_enable & INV_X_GYRO)
        packet_size += 2;
    if (st.chip_cfg.fifo_enable & INV_Y_GYRO)
100089ca:	069a      	lsls	r2, r3, #26
100089cc:	d501      	bpl.n	100089d2 <mpu_read_fifo+0x42>
        packet_size += 2;
100089ce:	3402      	adds	r4, #2
100089d0:	b2e4      	uxtb	r4, r4
    if (st.chip_cfg.fifo_enable & INV_Z_GYRO)
100089d2:	06da      	lsls	r2, r3, #27
100089d4:	d501      	bpl.n	100089da <mpu_read_fifo+0x4a>
        packet_size += 2;
100089d6:	3402      	adds	r4, #2
100089d8:	b2e4      	uxtb	r4, r4
    if (st.chip_cfg.fifo_enable & INV_XYZ_ACCEL)
100089da:	071b      	lsls	r3, r3, #28
100089dc:	d500      	bpl.n	100089e0 <mpu_read_fifo+0x50>
100089de:	e08b      	b.n	10008af8 <mpu_read_fifo+0x168>
        packet_size += 6;

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
100089e0:	682b      	ldr	r3, [r5, #0]
100089e2:	ae03      	add	r6, sp, #12
100089e4:	7b19      	ldrb	r1, [r3, #12]
100089e6:	686b      	ldr	r3, [r5, #4]
100089e8:	4f57      	ldr	r7, [pc, #348]	; (10008b48 <mpu_read_fifo+0x1b8>)
100089ea:	7818      	ldrb	r0, [r3, #0]
100089ec:	2202      	movs	r2, #2
100089ee:	0033      	movs	r3, r6
100089f0:	47b8      	blx	r7
100089f2:	46ba      	mov	sl, r7
100089f4:	4681      	mov	r9, r0
100089f6:	2800      	cmp	r0, #0
100089f8:	d000      	beq.n	100089fc <mpu_read_fifo+0x6c>
100089fa:	e098      	b.n	10008b2e <mpu_read_fifo+0x19e>
        return -1;
    fifo_count = (data[0] << 8) | data[1];
100089fc:	7837      	ldrb	r7, [r6, #0]
100089fe:	7873      	ldrb	r3, [r6, #1]
10008a00:	023f      	lsls	r7, r7, #8
10008a02:	431f      	orrs	r7, r3
    if (fifo_count < packet_size)
10008a04:	b2a3      	uxth	r3, r4
10008a06:	469b      	mov	fp, r3
10008a08:	429f      	cmp	r7, r3
10008a0a:	d36d      	bcc.n	10008ae8 <mpu_read_fifo+0x158>
        return 0;
//    log_i("FIFO count: %hd\n", fifo_count);
    if (fifo_count > (st.hw->max_fifo >> 1)) {
10008a0c:	686a      	ldr	r2, [r5, #4]
10008a0e:	8853      	ldrh	r3, [r2, #2]
10008a10:	085b      	lsrs	r3, r3, #1
10008a12:	429f      	cmp	r7, r3
10008a14:	d90c      	bls.n	10008a30 <mpu_read_fifo+0xa0>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, data))
10008a16:	682b      	ldr	r3, [r5, #0]
10008a18:	7810      	ldrb	r0, [r2, #0]
10008a1a:	7cd9      	ldrb	r1, [r3, #19]
10008a1c:	2201      	movs	r2, #1
10008a1e:	0033      	movs	r3, r6
10008a20:	47d0      	blx	sl
10008a22:	2800      	cmp	r0, #0
10008a24:	d000      	beq.n	10008a28 <mpu_read_fifo+0x98>
10008a26:	e082      	b.n	10008b2e <mpu_read_fifo+0x19e>
            return -1;
        if (data[0] & BIT_FIFO_OVERFLOW) {
10008a28:	7833      	ldrb	r3, [r6, #0]
10008a2a:	06db      	lsls	r3, r3, #27
10008a2c:	d500      	bpl.n	10008a30 <mpu_read_fifo+0xa0>
10008a2e:	e082      	b.n	10008b36 <mpu_read_fifo+0x1a6>
    }
    return 0;
}
static inline void get_ms(uint32_t *count)
{
    volatile uint32_t load = (uint32_t)(0xffffffff - dualtimer_get_value(DUALTIMER_TIMER2));
10008a30:	4b46      	ldr	r3, [pc, #280]	; (10008b4c <mpu_read_fifo+0x1bc>)
10008a32:	2001      	movs	r0, #1
10008a34:	4798      	blx	r3
10008a36:	43c0      	mvns	r0, r0
10008a38:	9002      	str	r0, [sp, #8]
    count = (uint32_t *)(load / 26000);
10008a3a:	9b02      	ldr	r3, [sp, #8]
            return -2;
        }
    }
    get_ms((unsigned long*)timestamp);

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
10008a3c:	682b      	ldr	r3, [r5, #0]
10008a3e:	0022      	movs	r2, r4
10008a40:	7b59      	ldrb	r1, [r3, #13]
10008a42:	686b      	ldr	r3, [r5, #4]
10008a44:	7818      	ldrb	r0, [r3, #0]
10008a46:	0033      	movs	r3, r6
10008a48:	47d0      	blx	sl
10008a4a:	4682      	mov	sl, r0
10008a4c:	2800      	cmp	r0, #0
10008a4e:	d16e      	bne.n	10008b2e <mpu_read_fifo+0x19e>
        return -1;
    more[0] = fifo_count / packet_size - 1;
10008a50:	4b3f      	ldr	r3, [pc, #252]	; (10008b50 <mpu_read_fifo+0x1c0>)
10008a52:	0021      	movs	r1, r4
10008a54:	0038      	movs	r0, r7
10008a56:	4798      	blx	r3
10008a58:	9b10      	ldr	r3, [sp, #64]	; 0x40
10008a5a:	3801      	subs	r0, #1
10008a5c:	7018      	strb	r0, [r3, #0]
    sensors[0] = 0;
10008a5e:	4652      	mov	r2, sl
10008a60:	4643      	mov	r3, r8
10008a62:	701a      	strb	r2, [r3, #0]
        unsigned char *sensors, unsigned char *more)
{
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;
10008a64:	2300      	movs	r3, #0
    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
        return -1;
    more[0] = fifo_count / packet_size - 1;
    sensors[0] = 0;

    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_XYZ_ACCEL) {
10008a66:	2c00      	cmp	r4, #0
10008a68:	d002      	beq.n	10008a70 <mpu_read_fifo+0xe0>
10008a6a:	7c2a      	ldrb	r2, [r5, #16]
10008a6c:	0712      	lsls	r2, r2, #28
10008a6e:	d446      	bmi.n	10008afe <mpu_read_fifo+0x16e>
        accel[1] = (data[index+2] << 8) | data[index+3];
        accel[2] = (data[index+4] << 8) | data[index+5];
        sensors[0] |= INV_XYZ_ACCEL;
        index += 6;
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_X_GYRO) {
10008a70:	455b      	cmp	r3, fp
10008a72:	d039      	beq.n	10008ae8 <mpu_read_fifo+0x158>
10008a74:	7c2a      	ldrb	r2, [r5, #16]
10008a76:	0651      	lsls	r1, r2, #25
10008a78:	d511      	bpl.n	10008a9e <mpu_read_fifo+0x10e>
        gyro[0] = (data[index+0] << 8) | data[index+1];
10008a7a:	5cf2      	ldrb	r2, [r6, r3]
10008a7c:	18f1      	adds	r1, r6, r3
10008a7e:	7849      	ldrb	r1, [r1, #1]
10008a80:	0212      	lsls	r2, r2, #8
10008a82:	430a      	orrs	r2, r1
10008a84:	9900      	ldr	r1, [sp, #0]
        sensors[0] |= INV_X_GYRO;
        index += 2;
10008a86:	3302      	adds	r3, #2
        accel[2] = (data[index+4] << 8) | data[index+5];
        sensors[0] |= INV_XYZ_ACCEL;
        index += 6;
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_X_GYRO) {
        gyro[0] = (data[index+0] << 8) | data[index+1];
10008a88:	800a      	strh	r2, [r1, #0]
        sensors[0] |= INV_X_GYRO;
10008a8a:	4642      	mov	r2, r8
10008a8c:	7811      	ldrb	r1, [r2, #0]
10008a8e:	2240      	movs	r2, #64	; 0x40
10008a90:	430a      	orrs	r2, r1
10008a92:	4641      	mov	r1, r8
        index += 2;
10008a94:	b29b      	uxth	r3, r3
        sensors[0] |= INV_XYZ_ACCEL;
        index += 6;
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_X_GYRO) {
        gyro[0] = (data[index+0] << 8) | data[index+1];
        sensors[0] |= INV_X_GYRO;
10008a96:	700a      	strb	r2, [r1, #0]
        index += 2;
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Y_GYRO) {
10008a98:	459b      	cmp	fp, r3
10008a9a:	d025      	beq.n	10008ae8 <mpu_read_fifo+0x158>
10008a9c:	7c2a      	ldrb	r2, [r5, #16]
10008a9e:	0691      	lsls	r1, r2, #26
10008aa0:	d511      	bpl.n	10008ac6 <mpu_read_fifo+0x136>
        gyro[1] = (data[index+0] << 8) | data[index+1];
10008aa2:	5cf2      	ldrb	r2, [r6, r3]
10008aa4:	18f1      	adds	r1, r6, r3
10008aa6:	7849      	ldrb	r1, [r1, #1]
10008aa8:	0212      	lsls	r2, r2, #8
10008aaa:	430a      	orrs	r2, r1
10008aac:	9900      	ldr	r1, [sp, #0]
        sensors[0] |= INV_Y_GYRO;
        index += 2;
10008aae:	3302      	adds	r3, #2
        gyro[0] = (data[index+0] << 8) | data[index+1];
        sensors[0] |= INV_X_GYRO;
        index += 2;
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Y_GYRO) {
        gyro[1] = (data[index+0] << 8) | data[index+1];
10008ab0:	804a      	strh	r2, [r1, #2]
        sensors[0] |= INV_Y_GYRO;
10008ab2:	4642      	mov	r2, r8
10008ab4:	7811      	ldrb	r1, [r2, #0]
10008ab6:	2220      	movs	r2, #32
10008ab8:	430a      	orrs	r2, r1
10008aba:	4641      	mov	r1, r8
        index += 2;
10008abc:	b29b      	uxth	r3, r3
        sensors[0] |= INV_X_GYRO;
        index += 2;
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Y_GYRO) {
        gyro[1] = (data[index+0] << 8) | data[index+1];
        sensors[0] |= INV_Y_GYRO;
10008abe:	700a      	strb	r2, [r1, #0]
        index += 2;
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Z_GYRO) {
10008ac0:	459b      	cmp	fp, r3
10008ac2:	d011      	beq.n	10008ae8 <mpu_read_fifo+0x158>
10008ac4:	7c2a      	ldrb	r2, [r5, #16]
10008ac6:	06d2      	lsls	r2, r2, #27
10008ac8:	d50e      	bpl.n	10008ae8 <mpu_read_fifo+0x158>
        gyro[2] = (data[index+0] << 8) | data[index+1];
10008aca:	5cf2      	ldrb	r2, [r6, r3]
10008acc:	18f6      	adds	r6, r6, r3
10008ace:	7873      	ldrb	r3, [r6, #1]
10008ad0:	0212      	lsls	r2, r2, #8
10008ad2:	4313      	orrs	r3, r2
10008ad4:	9a00      	ldr	r2, [sp, #0]
10008ad6:	8093      	strh	r3, [r2, #4]
        sensors[0] |= INV_Z_GYRO;
10008ad8:	4643      	mov	r3, r8
10008ada:	781a      	ldrb	r2, [r3, #0]
10008adc:	2310      	movs	r3, #16
10008ade:	4313      	orrs	r3, r2
10008ae0:	4642      	mov	r2, r8
10008ae2:	7013      	strb	r3, [r2, #0]
        index += 2;
    }

    return 0;
10008ae4:	2300      	movs	r3, #0
10008ae6:	4699      	mov	r9, r3
}
10008ae8:	4648      	mov	r0, r9
10008aea:	b007      	add	sp, #28
10008aec:	bc3c      	pop	{r2, r3, r4, r5}
10008aee:	4690      	mov	r8, r2
10008af0:	4699      	mov	r9, r3
10008af2:	46a2      	mov	sl, r4
10008af4:	46ab      	mov	fp, r5
10008af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (st.chip_cfg.fifo_enable & INV_Y_GYRO)
        packet_size += 2;
    if (st.chip_cfg.fifo_enable & INV_Z_GYRO)
        packet_size += 2;
    if (st.chip_cfg.fifo_enable & INV_XYZ_ACCEL)
        packet_size += 6;
10008af8:	3406      	adds	r4, #6
10008afa:	b2e4      	uxtb	r4, r4
10008afc:	e770      	b.n	100089e0 <mpu_read_fifo+0x50>
        return -1;
    more[0] = fifo_count / packet_size - 1;
    sensors[0] = 0;

    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_XYZ_ACCEL) {
        accel[0] = (data[index+0] << 8) | data[index+1];
10008afe:	7833      	ldrb	r3, [r6, #0]
10008b00:	7872      	ldrb	r2, [r6, #1]
10008b02:	9901      	ldr	r1, [sp, #4]
10008b04:	021b      	lsls	r3, r3, #8
10008b06:	4313      	orrs	r3, r2
10008b08:	800b      	strh	r3, [r1, #0]
        accel[1] = (data[index+2] << 8) | data[index+3];
10008b0a:	78b3      	ldrb	r3, [r6, #2]
10008b0c:	78f2      	ldrb	r2, [r6, #3]
10008b0e:	021b      	lsls	r3, r3, #8
10008b10:	4313      	orrs	r3, r2
10008b12:	804b      	strh	r3, [r1, #2]
        accel[2] = (data[index+4] << 8) | data[index+5];
10008b14:	7933      	ldrb	r3, [r6, #4]
10008b16:	7972      	ldrb	r2, [r6, #5]
10008b18:	021b      	lsls	r3, r3, #8
10008b1a:	4313      	orrs	r3, r2
10008b1c:	808b      	strh	r3, [r1, #4]
        sensors[0] |= INV_XYZ_ACCEL;
10008b1e:	4643      	mov	r3, r8
10008b20:	781a      	ldrb	r2, [r3, #0]
10008b22:	2308      	movs	r3, #8
10008b24:	4313      	orrs	r3, r2
10008b26:	4642      	mov	r2, r8
10008b28:	7013      	strb	r3, [r2, #0]
        index += 6;
10008b2a:	2306      	movs	r3, #6
10008b2c:	e7a0      	b.n	10008a70 <mpu_read_fifo+0xe0>
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;

    if (st.chip_cfg.dmp_on)
        return -1;
10008b2e:	2301      	movs	r3, #1
10008b30:	425b      	negs	r3, r3
10008b32:	4699      	mov	r9, r3
10008b34:	e7d8      	b.n	10008ae8 <mpu_read_fifo+0x158>
    if (fifo_count > (st.hw->max_fifo >> 1)) {
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, data))
            return -1;
        if (data[0] & BIT_FIFO_OVERFLOW) {
            mpu_reset_fifo();
10008b36:	4b07      	ldr	r3, [pc, #28]	; (10008b54 <mpu_read_fifo+0x1c4>)
10008b38:	4798      	blx	r3
            return -2;
10008b3a:	2302      	movs	r3, #2
10008b3c:	425b      	negs	r3, r3
10008b3e:	4699      	mov	r9, r3
10008b40:	e7d2      	b.n	10008ae8 <mpu_read_fifo+0x158>
10008b42:	46c0      	nop			; (mov r8, r8)
10008b44:	1001372c 	.word	0x1001372c
10008b48:	10008359 	.word	0x10008359
10008b4c:	100081a1 	.word	0x100081a1
10008b50:	1000f4c1 	.word	0x1000f4c1
10008b54:	10008525 	.word	0x10008525

10008b58 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
10008b58:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008b5a:	4c36      	ldr	r4, [pc, #216]	; (10008c34 <mpu_set_bypass+0xdc>)
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
10008b5c:	b083      	sub	sp, #12
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008b5e:	7ca3      	ldrb	r3, [r4, #18]
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
10008b60:	0006      	movs	r6, r0
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008b62:	4283      	cmp	r3, r0
10008b64:	d05f      	beq.n	10008c26 <mpu_set_bypass+0xce>
        return 0;

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008b66:	466b      	mov	r3, sp
10008b68:	1ddd      	adds	r5, r3, #7
10008b6a:	6823      	ldr	r3, [r4, #0]
10008b6c:	2201      	movs	r2, #1
10008b6e:	7919      	ldrb	r1, [r3, #4]
10008b70:	6863      	ldr	r3, [r4, #4]
10008b72:	4f31      	ldr	r7, [pc, #196]	; (10008c38 <mpu_set_bypass+0xe0>)
10008b74:	7818      	ldrb	r0, [r3, #0]
10008b76:	002b      	movs	r3, r5
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;

    if (bypass_on) {
10008b78:	2e00      	cmp	r6, #0
10008b7a:	d02e      	beq.n	10008bda <mpu_set_bypass+0x82>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008b7c:	47b8      	blx	r7
10008b7e:	2800      	cmp	r0, #0
10008b80:	d155      	bne.n	10008c2e <mpu_set_bypass+0xd6>
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
10008b82:	2220      	movs	r2, #32
10008b84:	782b      	ldrb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008b86:	4f2d      	ldr	r7, [pc, #180]	; (10008c3c <mpu_set_bypass+0xe4>)
        return 0;

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
10008b88:	4393      	bics	r3, r2
10008b8a:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008b8c:	6823      	ldr	r3, [r4, #0]
10008b8e:	3a1f      	subs	r2, #31
10008b90:	7919      	ldrb	r1, [r3, #4]
10008b92:	6863      	ldr	r3, [r4, #4]
10008b94:	7818      	ldrb	r0, [r3, #0]
10008b96:	002b      	movs	r3, r5
10008b98:	47b8      	blx	r7
10008b9a:	2800      	cmp	r0, #0
10008b9c:	d147      	bne.n	10008c2e <mpu_set_bypass+0xd6>
            return -1;
        delay_ms(3);
10008b9e:	4b28      	ldr	r3, [pc, #160]	; (10008c40 <mpu_set_bypass+0xe8>)
10008ba0:	3003      	adds	r0, #3
10008ba2:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
10008ba4:	2302      	movs	r3, #2
10008ba6:	702b      	strb	r3, [r5, #0]
        if (st.chip_cfg.active_low_int)
10008ba8:	3320      	adds	r3, #32
10008baa:	5ce3      	ldrb	r3, [r4, r3]
10008bac:	2b00      	cmp	r3, #0
10008bae:	d137      	bne.n	10008c20 <mpu_set_bypass+0xc8>
        delay_ms(3);
        if (st.chip_cfg.active_low_int)
            tmp = BIT_ACTL;
        else
            tmp = 0;
        if (st.chip_cfg.latched_int)
10008bb0:	2323      	movs	r3, #35	; 0x23
10008bb2:	5ce3      	ldrb	r3, [r4, r3]
10008bb4:	2b00      	cmp	r3, #0
10008bb6:	d003      	beq.n	10008bc0 <mpu_set_bypass+0x68>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008bb8:	2330      	movs	r3, #48	; 0x30
10008bba:	782a      	ldrb	r2, [r5, #0]
10008bbc:	4313      	orrs	r3, r2
10008bbe:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008bc0:	6823      	ldr	r3, [r4, #0]
10008bc2:	2201      	movs	r2, #1
10008bc4:	7dd9      	ldrb	r1, [r3, #23]
10008bc6:	6863      	ldr	r3, [r4, #4]
10008bc8:	7818      	ldrb	r0, [r3, #0]
10008bca:	002b      	movs	r3, r5
10008bcc:	47b8      	blx	r7
10008bce:	2800      	cmp	r0, #0
10008bd0:	d12d      	bne.n	10008c2e <mpu_set_bypass+0xd6>
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
10008bd2:	2000      	movs	r0, #0
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
10008bd4:	74a6      	strb	r6, [r4, #18]
    return 0;
}
10008bd6:	b003      	add	sp, #12
10008bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008bda:	47b8      	blx	r7
10008bdc:	2800      	cmp	r0, #0
10008bde:	d126      	bne.n	10008c2e <mpu_set_bypass+0xd6>
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008be0:	7aa3      	ldrb	r3, [r4, #10]
10008be2:	07db      	lsls	r3, r3, #31
10008be4:	d417      	bmi.n	10008c16 <mpu_set_bypass+0xbe>
            tmp |= BIT_AUX_IF_EN;
        else
            tmp &= ~BIT_AUX_IF_EN;
10008be6:	2220      	movs	r2, #32
10008be8:	782b      	ldrb	r3, [r5, #0]
10008bea:	4393      	bics	r3, r2
10008bec:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008bee:	6823      	ldr	r3, [r4, #0]
10008bf0:	2201      	movs	r2, #1
10008bf2:	7919      	ldrb	r1, [r3, #4]
10008bf4:	6863      	ldr	r3, [r4, #4]
10008bf6:	4f11      	ldr	r7, [pc, #68]	; (10008c3c <mpu_set_bypass+0xe4>)
10008bf8:	7818      	ldrb	r0, [r3, #0]
10008bfa:	002b      	movs	r3, r5
10008bfc:	47b8      	blx	r7
10008bfe:	2800      	cmp	r0, #0
10008c00:	d115      	bne.n	10008c2e <mpu_set_bypass+0xd6>
            return -1;
        delay_ms(3);
10008c02:	4b0f      	ldr	r3, [pc, #60]	; (10008c40 <mpu_set_bypass+0xe8>)
10008c04:	3003      	adds	r0, #3
10008c06:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
10008c08:	2322      	movs	r3, #34	; 0x22
10008c0a:	5ce3      	ldrb	r3, [r4, r3]
10008c0c:	2b00      	cmp	r3, #0
10008c0e:	d00c      	beq.n	10008c2a <mpu_set_bypass+0xd2>
            tmp = BIT_ACTL;
10008c10:	2380      	movs	r3, #128	; 0x80
10008c12:	702b      	strb	r3, [r5, #0]
10008c14:	e7cc      	b.n	10008bb0 <mpu_set_bypass+0x58>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            tmp |= BIT_AUX_IF_EN;
10008c16:	2320      	movs	r3, #32
10008c18:	782a      	ldrb	r2, [r5, #0]
10008c1a:	4313      	orrs	r3, r2
10008c1c:	702b      	strb	r3, [r5, #0]
10008c1e:	e7e6      	b.n	10008bee <mpu_set_bypass+0x96>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
        delay_ms(3);
        tmp = BIT_BYPASS_EN;
        if (st.chip_cfg.active_low_int)
            tmp |= BIT_ACTL;
10008c20:	2382      	movs	r3, #130	; 0x82
10008c22:	702b      	strb	r3, [r5, #0]
10008c24:	e7c4      	b.n	10008bb0 <mpu_set_bypass+0x58>
int mpu_set_bypass(unsigned char bypass_on)
{
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;
10008c26:	2000      	movs	r0, #0
10008c28:	e7d5      	b.n	10008bd6 <mpu_set_bypass+0x7e>
            return -1;
        delay_ms(3);
        if (st.chip_cfg.active_low_int)
            tmp = BIT_ACTL;
        else
            tmp = 0;
10008c2a:	702b      	strb	r3, [r5, #0]
10008c2c:	e7c0      	b.n	10008bb0 <mpu_set_bypass+0x58>
    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008c2e:	2001      	movs	r0, #1
10008c30:	4240      	negs	r0, r0
10008c32:	e7d0      	b.n	10008bd6 <mpu_set_bypass+0x7e>
10008c34:	1001372c 	.word	0x1001372c
10008c38:	10008359 	.word	0x10008359
10008c3c:	10008301 	.word	0x10008301
10008c40:	1000810d 	.word	0x1000810d

10008c44 <mpu_set_int_latched>:
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008c44:	2323      	movs	r3, #35	; 0x23
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008c46:	b570      	push	{r4, r5, r6, lr}
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008c48:	4c17      	ldr	r4, [pc, #92]	; (10008ca8 <mpu_set_int_latched+0x64>)
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008c4a:	b082      	sub	sp, #8
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008c4c:	5ce3      	ldrb	r3, [r4, r3]
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008c4e:	0005      	movs	r5, r0
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008c50:	4283      	cmp	r3, r0
10008c52:	d024      	beq.n	10008c9e <mpu_set_int_latched+0x5a>
        return 0;

    if (enable)
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008c54:	466b      	mov	r3, sp
10008c56:	3307      	adds	r3, #7
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;

    if (enable)
10008c58:	2800      	cmp	r0, #0
10008c5a:	d11d      	bne.n	10008c98 <mpu_set_int_latched+0x54>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
    else
        tmp = 0;
10008c5c:	7018      	strb	r0, [r3, #0]
    if (st.chip_cfg.bypass_mode)
10008c5e:	7ca2      	ldrb	r2, [r4, #18]
10008c60:	2a00      	cmp	r2, #0
10008c62:	d003      	beq.n	10008c6c <mpu_set_int_latched+0x28>
        tmp |= BIT_BYPASS_EN;
10008c64:	2202      	movs	r2, #2
10008c66:	7819      	ldrb	r1, [r3, #0]
10008c68:	430a      	orrs	r2, r1
10008c6a:	701a      	strb	r2, [r3, #0]
    if (st.chip_cfg.active_low_int)
10008c6c:	2222      	movs	r2, #34	; 0x22
10008c6e:	5ca2      	ldrb	r2, [r4, r2]
10008c70:	2a00      	cmp	r2, #0
10008c72:	d004      	beq.n	10008c7e <mpu_set_int_latched+0x3a>
        tmp |= BIT_ACTL;
10008c74:	2180      	movs	r1, #128	; 0x80
10008c76:	781a      	ldrb	r2, [r3, #0]
10008c78:	4249      	negs	r1, r1
10008c7a:	430a      	orrs	r2, r1
10008c7c:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008c7e:	6822      	ldr	r2, [r4, #0]
10008c80:	4e0a      	ldr	r6, [pc, #40]	; (10008cac <mpu_set_int_latched+0x68>)
10008c82:	7dd1      	ldrb	r1, [r2, #23]
10008c84:	6862      	ldr	r2, [r4, #4]
10008c86:	7810      	ldrb	r0, [r2, #0]
10008c88:	2201      	movs	r2, #1
10008c8a:	47b0      	blx	r6
10008c8c:	2800      	cmp	r0, #0
10008c8e:	d108      	bne.n	10008ca2 <mpu_set_int_latched+0x5e>
        return -1;
    st.chip_cfg.latched_int = enable;
10008c90:	2323      	movs	r3, #35	; 0x23
10008c92:	54e5      	strb	r5, [r4, r3]
    return 0;
}
10008c94:	b002      	add	sp, #8
10008c96:	bd70      	pop	{r4, r5, r6, pc}
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;

    if (enable)
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008c98:	2230      	movs	r2, #48	; 0x30
10008c9a:	701a      	strb	r2, [r3, #0]
10008c9c:	e7df      	b.n	10008c5e <mpu_set_int_latched+0x1a>
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;
10008c9e:	2000      	movs	r0, #0
10008ca0:	e7f8      	b.n	10008c94 <mpu_set_int_latched+0x50>
    if (st.chip_cfg.bypass_mode)
        tmp |= BIT_BYPASS_EN;
    if (st.chip_cfg.active_low_int)
        tmp |= BIT_ACTL;
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
        return -1;
10008ca2:	2001      	movs	r0, #1
10008ca4:	4240      	negs	r0, r0
10008ca6:	e7f5      	b.n	10008c94 <mpu_set_int_latched+0x50>
10008ca8:	1001372c 	.word	0x1001372c
10008cac:	10008301 	.word	0x10008301

10008cb0 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
10008cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
10008cb2:	0004      	movs	r4, r0
10008cb4:	b083      	sub	sp, #12
    unsigned char tmp[2];

    if (rate > 40)
10008cb6:	2828      	cmp	r0, #40	; 0x28
10008cb8:	d85a      	bhi.n	10008d70 <mpu_lp_accel_mode+0xc0>
        return -1;

    if (!rate) {
10008cba:	2800      	cmp	r0, #0
10008cbc:	d114      	bne.n	10008ce8 <mpu_lp_accel_mode+0x38>
        mpu_set_int_latched(0);
10008cbe:	4b36      	ldr	r3, [pc, #216]	; (10008d98 <mpu_lp_accel_mode+0xe8>)
10008cc0:	2000      	movs	r0, #0
10008cc2:	4798      	blx	r3
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
10008cc4:	2207      	movs	r2, #7
    if (rate > 40)
        return -1;

    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
10008cc6:	ab01      	add	r3, sp, #4
10008cc8:	701c      	strb	r4, [r3, #0]
        tmp[1] = BIT_STBY_XYZG;
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008cca:	4c34      	ldr	r4, [pc, #208]	; (10008d9c <mpu_lp_accel_mode+0xec>)
        return -1;

    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
10008ccc:	705a      	strb	r2, [r3, #1]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008cce:	6822      	ldr	r2, [r4, #0]
10008cd0:	4d33      	ldr	r5, [pc, #204]	; (10008da0 <mpu_lp_accel_mode+0xf0>)
10008cd2:	7d51      	ldrb	r1, [r2, #21]
10008cd4:	6862      	ldr	r2, [r4, #4]
10008cd6:	7810      	ldrb	r0, [r2, #0]
10008cd8:	2202      	movs	r2, #2
10008cda:	47a8      	blx	r5
10008cdc:	1e05      	subs	r5, r0, #0
10008cde:	d147      	bne.n	10008d70 <mpu_lp_accel_mode+0xc0>
            return -1;
        st.chip_cfg.lp_accel_mode = 0;
10008ce0:	7520      	strb	r0, [r4, #20]
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
    mpu_configure_fifo(0);

    return 0;
}
10008ce2:	0028      	movs	r0, r5
10008ce4:	b003      	add	sp, #12
10008ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
10008ce8:	2001      	movs	r0, #1
10008cea:	4b2b      	ldr	r3, [pc, #172]	; (10008d98 <mpu_lp_accel_mode+0xe8>)
10008cec:	4798      	blx	r3
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
        tmp[0] = INV_LPA_1_25HZ;
10008cee:	ad01      	add	r5, sp, #4
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
10008cf0:	2c01      	cmp	r4, #1
10008cf2:	d043      	beq.n	10008d7c <mpu_lp_accel_mode+0xcc>
        tmp[0] = INV_LPA_1_25HZ;
    else if (rate == 2)
10008cf4:	2c02      	cmp	r4, #2
10008cf6:	d044      	beq.n	10008d82 <mpu_lp_accel_mode+0xd2>
        tmp[0] = INV_LPA_2_5HZ;
    else if (rate <= 5)
10008cf8:	2c05      	cmp	r4, #5
10008cfa:	d93c      	bls.n	10008d76 <mpu_lp_accel_mode+0xc6>
        tmp[0] = INV_LPA_5HZ;
    else if (rate <= 10)
10008cfc:	2c0a      	cmp	r4, #10
10008cfe:	d843      	bhi.n	10008d88 <mpu_lp_accel_mode+0xd8>
        tmp[0] = INV_LPA_10HZ;
10008d00:	2305      	movs	r3, #5
10008d02:	702b      	strb	r3, [r5, #0]
        tmp[0] = INV_LPA_160HZ;
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
10008d04:	4c25      	ldr	r4, [pc, #148]	; (10008d9c <mpu_lp_accel_mode+0xec>)
10008d06:	2201      	movs	r2, #1
10008d08:	6823      	ldr	r3, [r4, #0]
10008d0a:	4e25      	ldr	r6, [pc, #148]	; (10008da0 <mpu_lp_accel_mode+0xf0>)
10008d0c:	7a59      	ldrb	r1, [r3, #9]
10008d0e:	6863      	ldr	r3, [r4, #4]
10008d10:	7818      	ldrb	r0, [r3, #0]
10008d12:	002b      	movs	r3, r5
10008d14:	47b0      	blx	r6
10008d16:	2800      	cmp	r0, #0
10008d18:	d12a      	bne.n	10008d70 <mpu_lp_accel_mode+0xc0>
        return -1;
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008d1a:	6823      	ldr	r3, [r4, #0]
10008d1c:	2201      	movs	r2, #1
10008d1e:	7a19      	ldrb	r1, [r3, #8]
10008d20:	6863      	ldr	r3, [r4, #4]
10008d22:	4f20      	ldr	r7, [pc, #128]	; (10008da4 <mpu_lp_accel_mode+0xf4>)
10008d24:	7818      	ldrb	r0, [r3, #0]
10008d26:	002b      	movs	r3, r5
10008d28:	47b8      	blx	r7
10008d2a:	2800      	cmp	r0, #0
10008d2c:	d120      	bne.n	10008d70 <mpu_lp_accel_mode+0xc0>
       	return -1;

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
10008d2e:	2308      	movs	r3, #8
10008d30:	782a      	ldrb	r2, [r5, #0]
10008d32:	4313      	orrs	r3, r2
10008d34:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008d36:	6823      	ldr	r3, [r4, #0]
10008d38:	2201      	movs	r2, #1
10008d3a:	7a19      	ldrb	r1, [r3, #8]
10008d3c:	6863      	ldr	r3, [r4, #4]
10008d3e:	7818      	ldrb	r0, [r3, #0]
10008d40:	002b      	movs	r3, r5
10008d42:	47b0      	blx	r6
10008d44:	2800      	cmp	r0, #0
10008d46:	d113      	bne.n	10008d70 <mpu_lp_accel_mode+0xc0>
    	return -1;
    tmp[0] = BIT_LPA_CYCLE;
10008d48:	2320      	movs	r3, #32
10008d4a:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
10008d4c:	6823      	ldr	r3, [r4, #0]
10008d4e:	2201      	movs	r2, #1
10008d50:	7d59      	ldrb	r1, [r3, #21]
10008d52:	6863      	ldr	r3, [r4, #4]
10008d54:	7818      	ldrb	r0, [r3, #0]
10008d56:	002b      	movs	r3, r5
10008d58:	47b0      	blx	r6
10008d5a:	1e05      	subs	r5, r0, #0
10008d5c:	d108      	bne.n	10008d70 <mpu_lp_accel_mode+0xc0>
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
10008d5e:	2308      	movs	r3, #8
10008d60:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
10008d62:	3b07      	subs	r3, #7
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
    st.chip_cfg.clk_src = 0;
10008d64:	7320      	strb	r0, [r4, #12]
    st.chip_cfg.lp_accel_mode = 1;
10008d66:	7523      	strb	r3, [r4, #20]
    mpu_configure_fifo(0);
10008d68:	2000      	movs	r0, #0
10008d6a:	4b0f      	ldr	r3, [pc, #60]	; (10008da8 <mpu_lp_accel_mode+0xf8>)
10008d6c:	4798      	blx	r3
10008d6e:	e7b8      	b.n	10008ce2 <mpu_lp_accel_mode+0x32>
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
        return -1;
10008d70:	2501      	movs	r5, #1
10008d72:	426d      	negs	r5, r5
10008d74:	e7b5      	b.n	10008ce2 <mpu_lp_accel_mode+0x32>
    if (rate == 1)
        tmp[0] = INV_LPA_1_25HZ;
    else if (rate == 2)
        tmp[0] = INV_LPA_2_5HZ;
    else if (rate <= 5)
        tmp[0] = INV_LPA_5HZ;
10008d76:	2304      	movs	r3, #4
10008d78:	702b      	strb	r3, [r5, #0]
10008d7a:	e7c3      	b.n	10008d04 <mpu_lp_accel_mode+0x54>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
        tmp[0] = INV_LPA_1_25HZ;
10008d7c:	2302      	movs	r3, #2
10008d7e:	702b      	strb	r3, [r5, #0]
10008d80:	e7c0      	b.n	10008d04 <mpu_lp_accel_mode+0x54>
    else if (rate == 2)
        tmp[0] = INV_LPA_2_5HZ;
10008d82:	2303      	movs	r3, #3
10008d84:	702b      	strb	r3, [r5, #0]
10008d86:	e7bd      	b.n	10008d04 <mpu_lp_accel_mode+0x54>
    else if (rate <= 5)
        tmp[0] = INV_LPA_5HZ;
    else if (rate <= 10)
        tmp[0] = INV_LPA_10HZ;
    else if (rate <= 20)
10008d88:	2c14      	cmp	r4, #20
10008d8a:	d802      	bhi.n	10008d92 <mpu_lp_accel_mode+0xe2>
        tmp[0] = INV_LPA_20HZ;
10008d8c:	2306      	movs	r3, #6
10008d8e:	702b      	strb	r3, [r5, #0]
10008d90:	e7b8      	b.n	10008d04 <mpu_lp_accel_mode+0x54>
    else if (rate <= 40)
        tmp[0] = INV_LPA_40HZ;
10008d92:	2307      	movs	r3, #7
10008d94:	702b      	strb	r3, [r5, #0]
10008d96:	e7b5      	b.n	10008d04 <mpu_lp_accel_mode+0x54>
10008d98:	10008c45 	.word	0x10008c45
10008d9c:	1001372c 	.word	0x1001372c
10008da0:	10008301 	.word	0x10008301
10008da4:	10008359 	.word	0x10008359
10008da8:	1000892d 	.word	0x1000892d

10008dac <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10008dac:	b530      	push	{r4, r5, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008dae:	4c2c      	ldr	r4, [pc, #176]	; (10008e60 <mpu_set_sample_rate+0xb4>)
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10008db0:	b083      	sub	sp, #12
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008db2:	7aa3      	ldrb	r3, [r4, #10]
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10008db4:	0005      	movs	r5, r0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008db6:	2b00      	cmp	r3, #0
10008db8:	d04e      	beq.n	10008e58 <mpu_set_sample_rate+0xac>
        return -1;

    if (st.chip_cfg.dmp_on)
10008dba:	2324      	movs	r3, #36	; 0x24
10008dbc:	5ce3      	ldrb	r3, [r4, r3]
10008dbe:	2b00      	cmp	r3, #0
10008dc0:	d14a      	bne.n	10008e58 <mpu_set_sample_rate+0xac>
        return -1;
    else {
        if (st.chip_cfg.lp_accel_mode) {
10008dc2:	7d23      	ldrb	r3, [r4, #20]
10008dc4:	2b00      	cmp	r3, #0
10008dc6:	d005      	beq.n	10008dd4 <mpu_set_sample_rate+0x28>
            if (rate && (rate <= 40)) {
10008dc8:	1e43      	subs	r3, r0, #1
10008dca:	2b27      	cmp	r3, #39	; 0x27
10008dcc:	d940      	bls.n	10008e50 <mpu_set_sample_rate+0xa4>
                return 0;
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
10008dce:	2000      	movs	r0, #0
10008dd0:	4b24      	ldr	r3, [pc, #144]	; (10008e64 <mpu_set_sample_rate+0xb8>)
10008dd2:	4798      	blx	r3
10008dd4:	20f9      	movs	r0, #249	; 0xf9
        }
        if (rate < 4)
10008dd6:	2d03      	cmp	r5, #3
10008dd8:	d822      	bhi.n	10008e20 <mpu_set_sample_rate+0x74>
            rate = 4;
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
10008dda:	466b      	mov	r3, sp
10008ddc:	71d8      	strb	r0, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
10008dde:	6823      	ldr	r3, [r4, #0]
10008de0:	4d21      	ldr	r5, [pc, #132]	; (10008e68 <mpu_set_sample_rate+0xbc>)
10008de2:	7859      	ldrb	r1, [r3, #1]
10008de4:	6863      	ldr	r3, [r4, #4]
10008de6:	2201      	movs	r2, #1
10008de8:	7818      	ldrb	r0, [r3, #0]
10008dea:	466b      	mov	r3, sp
10008dec:	3307      	adds	r3, #7
10008dee:	47a8      	blx	r5
10008df0:	1e05      	subs	r5, r0, #0
10008df2:	d131      	bne.n	10008e58 <mpu_set_sample_rate+0xac>
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);
10008df4:	466b      	mov	r3, sp
10008df6:	20fa      	movs	r0, #250	; 0xfa
10008df8:	79d9      	ldrb	r1, [r3, #7]
10008dfa:	0080      	lsls	r0, r0, #2
10008dfc:	4b1b      	ldr	r3, [pc, #108]	; (10008e6c <mpu_set_sample_rate+0xc0>)
10008dfe:	3101      	adds	r1, #1
10008e00:	4798      	blx	r3

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10008e02:	8d23      	ldrh	r3, [r4, #40]	; 0x28

        data = 1000 / rate - 1;
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);
10008e04:	81e0      	strh	r0, [r4, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10008e06:	1c18      	adds	r0, r3, #0
10008e08:	2b64      	cmp	r3, #100	; 0x64
10008e0a:	d816      	bhi.n	10008e3a <mpu_set_sample_rate+0x8e>
10008e0c:	4b18      	ldr	r3, [pc, #96]	; (10008e70 <mpu_set_sample_rate+0xc4>)
10008e0e:	b280      	uxth	r0, r0
10008e10:	4798      	blx	r3
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
10008e12:	89e0      	ldrh	r0, [r4, #14]
10008e14:	4b17      	ldr	r3, [pc, #92]	; (10008e74 <mpu_set_sample_rate+0xc8>)
10008e16:	0840      	lsrs	r0, r0, #1
10008e18:	4798      	blx	r3
        return 0;
    }
}
10008e1a:	0028      	movs	r0, r5
10008e1c:	b003      	add	sp, #12
10008e1e:	bd30      	pop	{r4, r5, pc}
10008e20:	23fa      	movs	r3, #250	; 0xfa
10008e22:	1c29      	adds	r1, r5, #0
10008e24:	009b      	lsls	r3, r3, #2
10008e26:	429d      	cmp	r5, r3
10008e28:	d809      	bhi.n	10008e3e <mpu_set_sample_rate+0x92>
10008e2a:	20fa      	movs	r0, #250	; 0xfa
10008e2c:	b289      	uxth	r1, r1
10008e2e:	0080      	lsls	r0, r0, #2
10008e30:	4b0e      	ldr	r3, [pc, #56]	; (10008e6c <mpu_set_sample_rate+0xc0>)
10008e32:	4798      	blx	r3
10008e34:	3801      	subs	r0, #1
10008e36:	b2c0      	uxtb	r0, r0
10008e38:	e7cf      	b.n	10008dda <mpu_set_sample_rate+0x2e>
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10008e3a:	2064      	movs	r0, #100	; 0x64
10008e3c:	e7e6      	b.n	10008e0c <mpu_set_sample_rate+0x60>
10008e3e:	20fa      	movs	r0, #250	; 0xfa
10008e40:	1c19      	adds	r1, r3, #0
10008e42:	b289      	uxth	r1, r1
10008e44:	0080      	lsls	r0, r0, #2
10008e46:	4b09      	ldr	r3, [pc, #36]	; (10008e6c <mpu_set_sample_rate+0xc0>)
10008e48:	4798      	blx	r3
10008e4a:	3801      	subs	r0, #1
10008e4c:	b2c0      	uxtb	r0, r0
10008e4e:	e7c4      	b.n	10008dda <mpu_set_sample_rate+0x2e>
        return -1;
    else {
        if (st.chip_cfg.lp_accel_mode) {
            if (rate && (rate <= 40)) {
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
10008e50:	4b04      	ldr	r3, [pc, #16]	; (10008e64 <mpu_set_sample_rate+0xb8>)
10008e52:	4798      	blx	r3
                return 0;
10008e54:	2500      	movs	r5, #0
10008e56:	e7e0      	b.n	10008e1a <mpu_set_sample_rate+0x6e>
int mpu_set_sample_rate(unsigned short rate)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008e58:	2501      	movs	r5, #1
10008e5a:	426d      	negs	r5, r5
10008e5c:	e7dd      	b.n	10008e1a <mpu_set_sample_rate+0x6e>
10008e5e:	46c0      	nop			; (mov r8, r8)
10008e60:	1001372c 	.word	0x1001372c
10008e64:	10008cb1 	.word	0x10008cb1
10008e68:	10008301 	.word	0x10008301
10008e6c:	1000f4c1 	.word	0x1000f4c1
10008e70:	100088c9 	.word	0x100088c9
10008e74:	10008819 	.word	0x10008819

10008e78 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
10008e78:	b5f0      	push	{r4, r5, r6, r7, lr}
10008e7a:	464e      	mov	r6, r9
10008e7c:	4657      	mov	r7, sl
10008e7e:	4645      	mov	r5, r8
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
10008e80:	2370      	movs	r3, #112	; 0x70
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
10008e82:	b4e0      	push	{r5, r6, r7}
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
10008e84:	4003      	ands	r3, r0
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
10008e86:	b082      	sub	sp, #8
10008e88:	0006      	movs	r6, r0
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
10008e8a:	2b00      	cmp	r3, #0
10008e8c:	d100      	bne.n	10008e90 <mpu_set_sensors+0x18>
10008e8e:	e095      	b.n	10008fbc <mpu_set_sensors+0x144>
        data = INV_CLK_PLL;
10008e90:	466b      	mov	r3, sp
10008e92:	1d9d      	adds	r5, r3, #6
10008e94:	2301      	movs	r3, #1
10008e96:	702b      	strb	r3, [r5, #0]
    else if (sensors)
        data = 0;
    else
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10008e98:	4c5f      	ldr	r4, [pc, #380]	; (10009018 <mpu_set_sensors+0x1a0>)
10008e9a:	4f60      	ldr	r7, [pc, #384]	; (1000901c <mpu_set_sensors+0x1a4>)
10008e9c:	6823      	ldr	r3, [r4, #0]
10008e9e:	2201      	movs	r2, #1
10008ea0:	7d59      	ldrb	r1, [r3, #21]
10008ea2:	6863      	ldr	r3, [r4, #4]
10008ea4:	46b8      	mov	r8, r7
10008ea6:	7818      	ldrb	r0, [r3, #0]
10008ea8:	002b      	movs	r3, r5
10008eaa:	47b8      	blx	r7
10008eac:	2800      	cmp	r0, #0
10008eae:	d000      	beq.n	10008eb2 <mpu_set_sensors+0x3a>
10008eb0:	e0ad      	b.n	1000900e <mpu_set_sensors+0x196>
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008eb2:	2240      	movs	r2, #64	; 0x40
10008eb4:	782b      	ldrb	r3, [r5, #0]

    data = 0;
10008eb6:	7028      	strb	r0, [r5, #0]
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008eb8:	4393      	bics	r3, r2
10008eba:	7323      	strb	r3, [r4, #12]

    data = 0;
    if (!(sensors & INV_X_GYRO))
10008ebc:	4232      	tst	r2, r6
10008ebe:	d100      	bne.n	10008ec2 <mpu_set_sensors+0x4a>
10008ec0:	e093      	b.n	10008fea <mpu_set_sensors+0x172>
        data |= BIT_STBY_XG;
    if (!(sensors & INV_Y_GYRO))
10008ec2:	06b3      	lsls	r3, r6, #26
10008ec4:	d403      	bmi.n	10008ece <mpu_set_sensors+0x56>
        data |= BIT_STBY_YG;
10008ec6:	2302      	movs	r3, #2
10008ec8:	782a      	ldrb	r2, [r5, #0]
10008eca:	4313      	orrs	r3, r2
10008ecc:	702b      	strb	r3, [r5, #0]
    if (!(sensors & INV_Z_GYRO))
10008ece:	06f3      	lsls	r3, r6, #27
10008ed0:	d403      	bmi.n	10008eda <mpu_set_sensors+0x62>
        data |= BIT_STBY_ZG;
10008ed2:	2301      	movs	r3, #1
10008ed4:	782a      	ldrb	r2, [r5, #0]
10008ed6:	4313      	orrs	r3, r2
10008ed8:	702b      	strb	r3, [r5, #0]
    if (!(sensors & INV_XYZ_ACCEL))
10008eda:	0733      	lsls	r3, r6, #28
10008edc:	d400      	bmi.n	10008ee0 <mpu_set_sensors+0x68>
10008ede:	e08a      	b.n	10008ff6 <mpu_set_sensors+0x17e>
        data |= BIT_STBY_XYZA;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
10008ee0:	6823      	ldr	r3, [r4, #0]
10008ee2:	2201      	movs	r2, #1
10008ee4:	7d99      	ldrb	r1, [r3, #22]
10008ee6:	6863      	ldr	r3, [r4, #4]
10008ee8:	7818      	ldrb	r0, [r3, #0]
10008eea:	002b      	movs	r3, r5
10008eec:	47c0      	blx	r8
10008eee:	2800      	cmp	r0, #0
10008ef0:	d000      	beq.n	10008ef4 <mpu_set_sensors+0x7c>
10008ef2:	e08c      	b.n	1000900e <mpu_set_sensors+0x196>
        st.chip_cfg.sensors = 0;
        return -1;
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
10008ef4:	2308      	movs	r3, #8
10008ef6:	0032      	movs	r2, r6
10008ef8:	439a      	bics	r2, r3
10008efa:	d041      	beq.n	10008f80 <mpu_set_sensors+0x108>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
10008efc:	4b48      	ldr	r3, [pc, #288]	; (10009020 <mpu_set_sensors+0x1a8>)
10008efe:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008f00:	466b      	mov	r3, sp
10008f02:	3307      	adds	r3, #7
10008f04:	469a      	mov	sl, r3
10008f06:	6823      	ldr	r3, [r4, #0]
10008f08:	2201      	movs	r2, #1
10008f0a:	7919      	ldrb	r1, [r3, #4]
10008f0c:	6863      	ldr	r3, [r4, #4]
10008f0e:	4f45      	ldr	r7, [pc, #276]	; (10009024 <mpu_set_sensors+0x1ac>)
10008f10:	7818      	ldrb	r0, [r3, #0]
10008f12:	4653      	mov	r3, sl
10008f14:	47b8      	blx	r7
10008f16:	2800      	cmp	r0, #0
10008f18:	d000      	beq.n	10008f1c <mpu_set_sensors+0xa4>
10008f1a:	e075      	b.n	10009008 <mpu_set_sensors+0x190>
        return -1;
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
10008f1c:	07f3      	lsls	r3, r6, #31
10008f1e:	d53c      	bpl.n	10008f9a <mpu_set_sensors+0x122>
        data = AKM_SINGLE_MEASUREMENT;
10008f20:	2311      	movs	r3, #17
10008f22:	702b      	strb	r3, [r5, #0]
        user_ctrl |= BIT_AUX_IF_EN;
10008f24:	4653      	mov	r3, sl
10008f26:	781a      	ldrb	r2, [r3, #0]
10008f28:	2320      	movs	r3, #32
10008f2a:	4313      	orrs	r3, r2
10008f2c:	4652      	mov	r2, sl
10008f2e:	7013      	strb	r3, [r2, #0]
    } else {
        data = AKM_POWER_DOWN;
        user_ctrl &= ~BIT_AUX_IF_EN;
    }
    if (st.chip_cfg.dmp_on)
10008f30:	2224      	movs	r2, #36	; 0x24
10008f32:	5ca2      	ldrb	r2, [r4, r2]
10008f34:	2a00      	cmp	r2, #0
10008f36:	d03c      	beq.n	10008fb2 <mpu_set_sensors+0x13a>
        user_ctrl |= BIT_DMP_EN;
10008f38:	2280      	movs	r2, #128	; 0x80
10008f3a:	4252      	negs	r2, r2
10008f3c:	4313      	orrs	r3, r2
10008f3e:	4652      	mov	r2, sl
10008f40:	7013      	strb	r3, [r2, #0]
    else
        user_ctrl &= ~BIT_DMP_EN;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
10008f42:	2326      	movs	r3, #38	; 0x26
10008f44:	6822      	ldr	r2, [r4, #0]
10008f46:	5cd1      	ldrb	r1, [r2, r3]
10008f48:	6863      	ldr	r3, [r4, #4]
10008f4a:	2201      	movs	r2, #1
10008f4c:	7818      	ldrb	r0, [r3, #0]
10008f4e:	002b      	movs	r3, r5
10008f50:	47c0      	blx	r8
10008f52:	2800      	cmp	r0, #0
10008f54:	d158      	bne.n	10009008 <mpu_set_sensors+0x190>
        return -1;
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008f56:	6823      	ldr	r3, [r4, #0]
10008f58:	2201      	movs	r2, #1
10008f5a:	7919      	ldrb	r1, [r3, #4]
10008f5c:	6863      	ldr	r3, [r4, #4]
10008f5e:	7818      	ldrb	r0, [r3, #0]
10008f60:	4653      	mov	r3, sl
10008f62:	47c0      	blx	r8
10008f64:	1e05      	subs	r5, r0, #0
10008f66:	d14f      	bne.n	10009008 <mpu_set_sensors+0x190>
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
    st.chip_cfg.lp_accel_mode = 0;
10008f68:	7520      	strb	r0, [r4, #20]
    delay_ms(50);
10008f6a:	4b2f      	ldr	r3, [pc, #188]	; (10009028 <mpu_set_sensors+0x1b0>)
10008f6c:	2032      	movs	r0, #50	; 0x32
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
10008f6e:	72a6      	strb	r6, [r4, #10]
    st.chip_cfg.lp_accel_mode = 0;
    delay_ms(50);
10008f70:	4798      	blx	r3
    return 0;
}
10008f72:	0028      	movs	r0, r5
10008f74:	b002      	add	sp, #8
10008f76:	bc1c      	pop	{r2, r3, r4}
10008f78:	4690      	mov	r8, r2
10008f7a:	4699      	mov	r9, r3
10008f7c:	46a2      	mov	sl, r4
10008f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008f80:	466b      	mov	r3, sp
10008f82:	3307      	adds	r3, #7
10008f84:	469a      	mov	sl, r3
10008f86:	6823      	ldr	r3, [r4, #0]
10008f88:	2201      	movs	r2, #1
10008f8a:	7919      	ldrb	r1, [r3, #4]
10008f8c:	6863      	ldr	r3, [r4, #4]
10008f8e:	4f25      	ldr	r7, [pc, #148]	; (10009024 <mpu_set_sensors+0x1ac>)
10008f90:	7818      	ldrb	r0, [r3, #0]
10008f92:	4653      	mov	r3, sl
10008f94:	47b8      	blx	r7
10008f96:	2800      	cmp	r0, #0
10008f98:	d136      	bne.n	10009008 <mpu_set_sensors+0x190>
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
        data = AKM_SINGLE_MEASUREMENT;
        user_ctrl |= BIT_AUX_IF_EN;
    } else {
        data = AKM_POWER_DOWN;
10008f9a:	2310      	movs	r3, #16
10008f9c:	702b      	strb	r3, [r5, #0]
        user_ctrl &= ~BIT_AUX_IF_EN;
10008f9e:	4653      	mov	r3, sl
10008fa0:	2220      	movs	r2, #32
10008fa2:	781b      	ldrb	r3, [r3, #0]
10008fa4:	4393      	bics	r3, r2
10008fa6:	4652      	mov	r2, sl
10008fa8:	7013      	strb	r3, [r2, #0]
    }
    if (st.chip_cfg.dmp_on)
10008faa:	2224      	movs	r2, #36	; 0x24
10008fac:	5ca2      	ldrb	r2, [r4, r2]
10008fae:	2a00      	cmp	r2, #0
10008fb0:	d1c2      	bne.n	10008f38 <mpu_set_sensors+0xc0>
        user_ctrl |= BIT_DMP_EN;
    else
        user_ctrl &= ~BIT_DMP_EN;
10008fb2:	227f      	movs	r2, #127	; 0x7f
10008fb4:	4013      	ands	r3, r2
10008fb6:	4652      	mov	r2, sl
10008fb8:	7013      	strb	r3, [r2, #0]
10008fba:	e7c2      	b.n	10008f42 <mpu_set_sensors+0xca>
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
        data = INV_CLK_PLL;
    else if (sensors)
10008fbc:	2800      	cmp	r0, #0
10008fbe:	d11f      	bne.n	10009000 <mpu_set_sensors+0x188>
        data = 0;
    else
        data = BIT_SLEEP;
10008fc0:	466b      	mov	r3, sp
10008fc2:	1d9d      	adds	r5, r3, #6
10008fc4:	2340      	movs	r3, #64	; 0x40
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10008fc6:	4c14      	ldr	r4, [pc, #80]	; (10009018 <mpu_set_sensors+0x1a0>)
    if (sensors & INV_XYZ_GYRO)
        data = INV_CLK_PLL;
    else if (sensors)
        data = 0;
    else
        data = BIT_SLEEP;
10008fc8:	702b      	strb	r3, [r5, #0]
10008fca:	4699      	mov	r9, r3
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10008fcc:	6823      	ldr	r3, [r4, #0]
10008fce:	4f13      	ldr	r7, [pc, #76]	; (1000901c <mpu_set_sensors+0x1a4>)
10008fd0:	7d59      	ldrb	r1, [r3, #21]
10008fd2:	6863      	ldr	r3, [r4, #4]
10008fd4:	2201      	movs	r2, #1
10008fd6:	7818      	ldrb	r0, [r3, #0]
10008fd8:	002b      	movs	r3, r5
10008fda:	46b8      	mov	r8, r7
10008fdc:	47b8      	blx	r7
10008fde:	2800      	cmp	r0, #0
10008fe0:	d115      	bne.n	1000900e <mpu_set_sensors+0x196>
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008fe2:	464a      	mov	r2, r9
10008fe4:	782b      	ldrb	r3, [r5, #0]
10008fe6:	4393      	bics	r3, r2
10008fe8:	7323      	strb	r3, [r4, #12]

    data = 0;
    if (!(sensors & INV_X_GYRO))
        data |= BIT_STBY_XG;
10008fea:	2304      	movs	r3, #4
10008fec:	702b      	strb	r3, [r5, #0]
    if (!(sensors & INV_Y_GYRO))
10008fee:	06b3      	lsls	r3, r6, #26
10008ff0:	d500      	bpl.n	10008ff4 <mpu_set_sensors+0x17c>
10008ff2:	e76c      	b.n	10008ece <mpu_set_sensors+0x56>
10008ff4:	e767      	b.n	10008ec6 <mpu_set_sensors+0x4e>
        data |= BIT_STBY_YG;
    if (!(sensors & INV_Z_GYRO))
        data |= BIT_STBY_ZG;
    if (!(sensors & INV_XYZ_ACCEL))
        data |= BIT_STBY_XYZA;
10008ff6:	2338      	movs	r3, #56	; 0x38
10008ff8:	782a      	ldrb	r2, [r5, #0]
10008ffa:	4313      	orrs	r3, r2
10008ffc:	702b      	strb	r3, [r5, #0]
10008ffe:	e76f      	b.n	10008ee0 <mpu_set_sensors+0x68>
#endif

    if (sensors & INV_XYZ_GYRO)
        data = INV_CLK_PLL;
    else if (sensors)
        data = 0;
10009000:	466a      	mov	r2, sp
10009002:	1d95      	adds	r5, r2, #6
10009004:	702b      	strb	r3, [r5, #0]
10009006:	e747      	b.n	10008e98 <mpu_set_sensors+0x20>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10009008:	2501      	movs	r5, #1
1000900a:	426d      	negs	r5, r5
1000900c:	e7b1      	b.n	10008f72 <mpu_set_sensors+0xfa>
    else if (sensors)
        data = 0;
    else
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
1000900e:	2300      	movs	r3, #0
        return -1;
10009010:	2501      	movs	r5, #1
    else if (sensors)
        data = 0;
    else
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
10009012:	72a3      	strb	r3, [r4, #10]
        return -1;
10009014:	426d      	negs	r5, r5
10009016:	e7ac      	b.n	10008f72 <mpu_set_sensors+0xfa>
10009018:	1001372c 	.word	0x1001372c
1000901c:	10008301 	.word	0x10008301
10009020:	10008c45 	.word	0x10008c45
10009024:	10008359 	.word	0x10008359
10009028:	1000810d 	.word	0x1000810d

1000902c <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
1000902c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000902e:	464d      	mov	r5, r9
10009030:	465f      	mov	r7, fp
10009032:	4656      	mov	r6, sl
10009034:	4644      	mov	r4, r8
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
10009036:	2380      	movs	r3, #128	; 0x80
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
10009038:	b4f0      	push	{r4, r5, r6, r7}
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
1000903a:	4ca1      	ldr	r4, [pc, #644]	; (100092c0 <mpu_init+0x294>)
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
1000903c:	b085      	sub	sp, #20
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
1000903e:	ad02      	add	r5, sp, #8
10009040:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10009042:	6823      	ldr	r3, [r4, #0]
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
10009044:	0006      	movs	r6, r0
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10009046:	7d59      	ldrb	r1, [r3, #21]
10009048:	6863      	ldr	r3, [r4, #4]
1000904a:	2201      	movs	r2, #1
1000904c:	7818      	ldrb	r0, [r3, #0]
1000904e:	4f9d      	ldr	r7, [pc, #628]	; (100092c4 <mpu_init+0x298>)
10009050:	002b      	movs	r3, r5
10009052:	47b8      	blx	r7
10009054:	4681      	mov	r9, r0
10009056:	2800      	cmp	r0, #0
10009058:	d17c      	bne.n	10009154 <mpu_init+0x128>
        return -1;
    delay_ms(100);
1000905a:	4b9b      	ldr	r3, [pc, #620]	; (100092c8 <mpu_init+0x29c>)
1000905c:	2064      	movs	r0, #100	; 0x64
1000905e:	4698      	mov	r8, r3
10009060:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
10009062:	464b      	mov	r3, r9
10009064:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10009066:	6823      	ldr	r3, [r4, #0]
10009068:	2201      	movs	r2, #1
1000906a:	7d59      	ldrb	r1, [r3, #21]
1000906c:	6863      	ldr	r3, [r4, #4]
1000906e:	7818      	ldrb	r0, [r3, #0]
10009070:	002b      	movs	r3, r5
10009072:	47b8      	blx	r7
10009074:	2800      	cmp	r0, #0
10009076:	d16d      	bne.n	10009154 <mpu_init+0x128>

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
10009078:	2340      	movs	r3, #64	; 0x40
1000907a:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
1000907c:	6823      	ldr	r3, [r4, #0]
    /* Wake up chip. */
    data[0] = 0x00;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;

   st.chip_cfg.accel_half = 0;
1000907e:	74e0      	strb	r0, [r4, #19]
#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
10009080:	7a19      	ldrb	r1, [r3, #8]
10009082:	6863      	ldr	r3, [r4, #4]
10009084:	2201      	movs	r2, #1
10009086:	7818      	ldrb	r0, [r3, #0]
10009088:	002b      	movs	r3, r5
1000908a:	47b8      	blx	r7
1000908c:	1e05      	subs	r5, r0, #0
1000908e:	d161      	bne.n	10009154 <mpu_init+0x128>
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
10009090:	23ff      	movs	r3, #255	; 0xff
10009092:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
10009094:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
10009096:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
10009098:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
    st.chip_cfg.fifo_enable = 0xFF;
    st.chip_cfg.bypass_mode = 0xFF;
1000909a:	74a3      	strb	r3, [r4, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
1000909c:	3bfe      	subs	r3, #254	; 0xfe
1000909e:	7323      	strb	r3, [r4, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
100090a0:	3321      	adds	r3, #33	; 0x21
100090a2:	54e0      	strb	r0, [r4, r3]
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
    st.chip_cfg.gyro_fsr = 0xFF;
    st.chip_cfg.accel_fsr = 0xFF;
    st.chip_cfg.lpf = 0xFF;
    st.chip_cfg.sample_rate = 0xFFFF;
100090a4:	2201      	movs	r2, #1
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
    st.chip_cfg.latched_int = 0;
100090a6:	3301      	adds	r3, #1
100090a8:	54e0      	strb	r0, [r4, r3]
    st.chip_cfg.int_motion_only = 0;
100090aa:	7560      	strb	r0, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
100090ac:	7520      	strb	r0, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
100090ae:	0020      	movs	r0, r4
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
    st.chip_cfg.gyro_fsr = 0xFF;
    st.chip_cfg.accel_fsr = 0xFF;
    st.chip_cfg.lpf = 0xFF;
    st.chip_cfg.sample_rate = 0xFFFF;
100090b0:	4252      	negs	r2, r2
100090b2:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
100090b4:	7422      	strb	r2, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
100090b6:	8522      	strh	r2, [r4, #40]	; 0x28
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
    st.chip_cfg.latched_int = 0;
    st.chip_cfg.int_motion_only = 0;
    st.chip_cfg.lp_accel_mode = 0;
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
100090b8:	4b84      	ldr	r3, [pc, #528]	; (100092cc <mpu_init+0x2a0>)
100090ba:	3016      	adds	r0, #22
100090bc:	320d      	adds	r2, #13
100090be:	2100      	movs	r1, #0
100090c0:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
100090c2:	2324      	movs	r3, #36	; 0x24
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;

    if (mpu_set_gyro_fsr(2000))
100090c4:	20fa      	movs	r0, #250	; 0xfa
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
    st.chip_cfg.latched_int = 0;
    st.chip_cfg.int_motion_only = 0;
    st.chip_cfg.lp_accel_mode = 0;
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
    st.chip_cfg.dmp_on = 0;
100090c6:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_loaded = 0;
100090c8:	3301      	adds	r3, #1
100090ca:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_sample_rate = 0;

    if (mpu_set_gyro_fsr(2000))
100090cc:	00c0      	lsls	r0, r0, #3
100090ce:	4b80      	ldr	r3, [pc, #512]	; (100092d0 <mpu_init+0x2a4>)
    st.chip_cfg.int_motion_only = 0;
    st.chip_cfg.lp_accel_mode = 0;
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
    st.chip_cfg.dmp_on = 0;
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;
100090d0:	84e5      	strh	r5, [r4, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
100090d2:	4798      	blx	r3
100090d4:	2800      	cmp	r0, #0
100090d6:	d13d      	bne.n	10009154 <mpu_init+0x128>
        return -1;
    if (mpu_set_accel_fsr(2))
100090d8:	3002      	adds	r0, #2
100090da:	4b7e      	ldr	r3, [pc, #504]	; (100092d4 <mpu_init+0x2a8>)
100090dc:	4798      	blx	r3
100090de:	2800      	cmp	r0, #0
100090e0:	d138      	bne.n	10009154 <mpu_init+0x128>
        return -1;
    if (mpu_set_lpf(42))
100090e2:	302a      	adds	r0, #42	; 0x2a
100090e4:	4b7c      	ldr	r3, [pc, #496]	; (100092d8 <mpu_init+0x2ac>)
100090e6:	4798      	blx	r3
100090e8:	2800      	cmp	r0, #0
100090ea:	d133      	bne.n	10009154 <mpu_init+0x128>
        return -1;
    if (mpu_set_sample_rate(50))
100090ec:	3032      	adds	r0, #50	; 0x32
100090ee:	4b7b      	ldr	r3, [pc, #492]	; (100092dc <mpu_init+0x2b0>)
100090f0:	4798      	blx	r3
100090f2:	2800      	cmp	r0, #0
100090f4:	d12e      	bne.n	10009154 <mpu_init+0x128>
        return -1;
    if (mpu_configure_fifo(0))
100090f6:	4b7a      	ldr	r3, [pc, #488]	; (100092e0 <mpu_init+0x2b4>)
100090f8:	4798      	blx	r3
100090fa:	2800      	cmp	r0, #0
100090fc:	d12a      	bne.n	10009154 <mpu_init+0x128>
        return -1;

    if (int_param)
100090fe:	2e00      	cmp	r6, #0
10009100:	d004      	beq.n	1000910c <mpu_init+0xe0>
    volatile uint32_t load = (uint32_t)(0xffffffff - dualtimer_get_value(DUALTIMER_TIMER2));
    count = (uint32_t *)(load / 26000);
}
static inline int reg_int_cb(struct int_param_s *int_param)
{
    gpio_register_callback(int_param->pin, int_param->cb, GPIO_CALLBACK_RISING);
10009102:	6871      	ldr	r1, [r6, #4]
10009104:	7830      	ldrb	r0, [r6, #0]
10009106:	2202      	movs	r2, #2
10009108:	4b76      	ldr	r3, [pc, #472]	; (100092e4 <mpu_init+0x2b8>)
1000910a:	4798      	blx	r3
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
1000910c:	4b76      	ldr	r3, [pc, #472]	; (100092e8 <mpu_init+0x2bc>)
1000910e:	2001      	movs	r0, #1
10009110:	469b      	mov	fp, r3
10009112:	4798      	blx	r3
10009114:	4b75      	ldr	r3, [pc, #468]	; (100092ec <mpu_init+0x2c0>)

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
10009116:	250c      	movs	r5, #12
10009118:	4699      	mov	r9, r3
1000911a:	ae01      	add	r6, sp, #4
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
1000911c:	0033      	movs	r3, r6
1000911e:	2201      	movs	r2, #1
10009120:	2100      	movs	r1, #0
10009122:	0028      	movs	r0, r5
10009124:	47c8      	blx	r9
        if (!result && (data[0] == AKM_WHOAMI))
10009126:	2800      	cmp	r0, #0
10009128:	d102      	bne.n	10009130 <mpu_init+0x104>
1000912a:	7833      	ldrb	r3, [r6, #0]
1000912c:	2b48      	cmp	r3, #72	; 0x48
1000912e:	d01b      	beq.n	10009168 <mpu_init+0x13c>
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
10009130:	3501      	adds	r5, #1
10009132:	b2ed      	uxtb	r5, r5
10009134:	2d10      	cmp	r5, #16
10009136:	d1f1      	bne.n	1000911c <mpu_init+0xf0>
            break;
    }

    if (akm_addr > 0x0F) {
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
10009138:	486d      	ldr	r0, [pc, #436]	; (100092f0 <mpu_init+0x2c4>)
1000913a:	4c6e      	ldr	r4, [pc, #440]	; (100092f4 <mpu_init+0x2c8>)
1000913c:	47a0      	blx	r4
1000913e:	486e      	ldr	r0, [pc, #440]	; (100092f8 <mpu_init+0x2cc>)
10009140:	47a0      	blx	r4
    if (int_param)
        reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
10009142:	200a      	movs	r0, #10
10009144:	4b6d      	ldr	r3, [pc, #436]	; (100092fc <mpu_init+0x2d0>)
10009146:	4798      	blx	r3
10009148:	1e04      	subs	r4, r0, #0
1000914a:	d103      	bne.n	10009154 <mpu_init+0x128>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
1000914c:	4b6c      	ldr	r3, [pc, #432]	; (10009300 <mpu_init+0x2d4>)
1000914e:	2000      	movs	r0, #0
10009150:	4798      	blx	r3
    return 0;
10009152:	e001      	b.n	10009158 <mpu_init+0x12c>
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
10009154:	2401      	movs	r4, #1
10009156:	4264      	negs	r4, r4
        return -1;
#endif

    mpu_set_sensors(0);
    return 0;
}
10009158:	0020      	movs	r0, r4
1000915a:	b005      	add	sp, #20
1000915c:	bc3c      	pop	{r2, r3, r4, r5}
1000915e:	4690      	mov	r8, r2
10009160:	4699      	mov	r9, r3
10009162:	46a2      	mov	sl, r4
10009164:	46ab      	mov	fp, r5
10009166:	bdf0      	pop	{r4, r5, r6, r7, pc}
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;
10009168:	232a      	movs	r3, #42	; 0x2a
1000916a:	469a      	mov	sl, r3
1000916c:	54e5      	strb	r5, [r4, r3]

    data[0] = AKM_POWER_DOWN;
1000916e:	3b1a      	subs	r3, #26
10009170:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009172:	2201      	movs	r2, #1
10009174:	0033      	movs	r3, r6
10009176:	210a      	movs	r1, #10
10009178:	0028      	movs	r0, r5
1000917a:	47b8      	blx	r7
1000917c:	2800      	cmp	r0, #0
1000917e:	d1e0      	bne.n	10009142 <mpu_init+0x116>
        return -1;
    delay_ms(1);
10009180:	2001      	movs	r0, #1
10009182:	47c0      	blx	r8

    data[0] = AKM_FUSE_ROM_ACCESS;
10009184:	231f      	movs	r3, #31
10009186:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009188:	4653      	mov	r3, sl
1000918a:	2201      	movs	r2, #1
1000918c:	5ce0      	ldrb	r0, [r4, r3]
1000918e:	210a      	movs	r1, #10
10009190:	0033      	movs	r3, r6
10009192:	47b8      	blx	r7
10009194:	2800      	cmp	r0, #0
10009196:	d1d4      	bne.n	10009142 <mpu_init+0x116>
        return -1;
    delay_ms(1);
10009198:	3001      	adds	r0, #1
1000919a:	47c0      	blx	r8

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
1000919c:	4653      	mov	r3, sl
1000919e:	2203      	movs	r2, #3
100091a0:	5ce0      	ldrb	r0, [r4, r3]
100091a2:	2110      	movs	r1, #16
100091a4:	0033      	movs	r3, r6
100091a6:	47c8      	blx	r9
100091a8:	2800      	cmp	r0, #0
100091aa:	d1ca      	bne.n	10009142 <mpu_init+0x116>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
100091ac:	7833      	ldrb	r3, [r6, #0]
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;

    data[0] = AKM_POWER_DOWN;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100091ae:	2201      	movs	r2, #1
    delay_ms(1);

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
100091b0:	3380      	adds	r3, #128	; 0x80
100091b2:	85a3      	strh	r3, [r4, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
100091b4:	7873      	ldrb	r3, [r6, #1]
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;

    data[0] = AKM_POWER_DOWN;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100091b6:	210a      	movs	r1, #10

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
100091b8:	3380      	adds	r3, #128	; 0x80
100091ba:	85e3      	strh	r3, [r4, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
100091bc:	78b3      	ldrb	r3, [r6, #2]
100091be:	3380      	adds	r3, #128	; 0x80
100091c0:	8623      	strh	r3, [r4, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
100091c2:	2310      	movs	r3, #16
100091c4:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100091c6:	4653      	mov	r3, sl
100091c8:	5ce0      	ldrb	r0, [r4, r3]
100091ca:	0033      	movs	r3, r6
100091cc:	47b8      	blx	r7
100091ce:	2800      	cmp	r0, #0
100091d0:	d1b7      	bne.n	10009142 <mpu_init+0x116>
        return -1;
    delay_ms(1);
100091d2:	3001      	adds	r0, #1
100091d4:	47c0      	blx	r8

    mpu_set_bypass(0);
100091d6:	2000      	movs	r0, #0
100091d8:	47d8      	blx	fp

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
100091da:	2340      	movs	r3, #64	; 0x40
100091dc:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
100091de:	6823      	ldr	r3, [r4, #0]
100091e0:	2201      	movs	r2, #1
100091e2:	7e99      	ldrb	r1, [r3, #26]
100091e4:	6863      	ldr	r3, [r4, #4]
100091e6:	7818      	ldrb	r0, [r3, #0]
100091e8:	0033      	movs	r3, r6
100091ea:	47b8      	blx	r7
100091ec:	2800      	cmp	r0, #0
100091ee:	d1a8      	bne.n	10009142 <mpu_init+0x116>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
100091f0:	4653      	mov	r3, sl
100091f2:	2280      	movs	r2, #128	; 0x80
100091f4:	5ce3      	ldrb	r3, [r4, r3]
100091f6:	4252      	negs	r2, r2
100091f8:	4313      	orrs	r3, r2
100091fa:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
100091fc:	6823      	ldr	r3, [r4, #0]
100091fe:	3281      	adds	r2, #129	; 0x81
10009200:	7f99      	ldrb	r1, [r3, #30]
10009202:	6863      	ldr	r3, [r4, #4]
10009204:	7818      	ldrb	r0, [r3, #0]
10009206:	0033      	movs	r3, r6
10009208:	47b8      	blx	r7
1000920a:	2800      	cmp	r0, #0
1000920c:	d199      	bne.n	10009142 <mpu_init+0x116>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
1000920e:	2302      	movs	r3, #2
10009210:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
10009212:	6823      	ldr	r3, [r4, #0]
10009214:	2201      	movs	r2, #1
10009216:	7fd9      	ldrb	r1, [r3, #31]
10009218:	6863      	ldr	r3, [r4, #4]
1000921a:	7818      	ldrb	r0, [r3, #0]
1000921c:	0033      	movs	r3, r6
1000921e:	47b8      	blx	r7
10009220:	2800      	cmp	r0, #0
10009222:	d000      	beq.n	10009226 <mpu_init+0x1fa>
10009224:	e78d      	b.n	10009142 <mpu_init+0x116>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
10009226:	2388      	movs	r3, #136	; 0x88
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
10009228:	6822      	ldr	r2, [r4, #0]
    data[0] = AKM_REG_ST1;
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
1000922a:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
1000922c:	3b68      	subs	r3, #104	; 0x68
1000922e:	5cd1      	ldrb	r1, [r2, r3]
10009230:	6863      	ldr	r3, [r4, #4]
10009232:	2201      	movs	r2, #1
10009234:	7818      	ldrb	r0, [r3, #0]
10009236:	0033      	movs	r3, r6
10009238:	47b8      	blx	r7
1000923a:	2800      	cmp	r0, #0
1000923c:	d000      	beq.n	10009240 <mpu_init+0x214>
1000923e:	e780      	b.n	10009142 <mpu_init+0x116>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
10009240:	232a      	movs	r3, #42	; 0x2a
10009242:	5ce3      	ldrb	r3, [r4, r3]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
10009244:	6822      	ldr	r2, [r4, #0]
    data[0] = BIT_SLAVE_EN | 8;
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
10009246:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
10009248:	2321      	movs	r3, #33	; 0x21
1000924a:	5cd1      	ldrb	r1, [r2, r3]
1000924c:	6863      	ldr	r3, [r4, #4]
1000924e:	2201      	movs	r2, #1
10009250:	7818      	ldrb	r0, [r3, #0]
10009252:	0033      	movs	r3, r6
10009254:	47b8      	blx	r7
10009256:	2800      	cmp	r0, #0
10009258:	d000      	beq.n	1000925c <mpu_init+0x230>
1000925a:	e772      	b.n	10009142 <mpu_init+0x116>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
1000925c:	230a      	movs	r3, #10
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
1000925e:	6822      	ldr	r2, [r4, #0]
    data[0] = st.chip_cfg.compass_addr;
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
10009260:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
10009262:	3318      	adds	r3, #24
10009264:	5cd1      	ldrb	r1, [r2, r3]
10009266:	6863      	ldr	r3, [r4, #4]
10009268:	2201      	movs	r2, #1
1000926a:	7818      	ldrb	r0, [r3, #0]
1000926c:	0033      	movs	r3, r6
1000926e:	47b8      	blx	r7
10009270:	2800      	cmp	r0, #0
10009272:	d000      	beq.n	10009276 <mpu_init+0x24a>
10009274:	e765      	b.n	10009142 <mpu_init+0x116>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
10009276:	2381      	movs	r3, #129	; 0x81
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
10009278:	6822      	ldr	r2, [r4, #0]
    data[0] = AKM_REG_CNTL;
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
1000927a:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
1000927c:	3b5e      	subs	r3, #94	; 0x5e
1000927e:	5cd1      	ldrb	r1, [r2, r3]
10009280:	6863      	ldr	r3, [r4, #4]
10009282:	2201      	movs	r2, #1
10009284:	7818      	ldrb	r0, [r3, #0]
10009286:	0033      	movs	r3, r6
10009288:	47b8      	blx	r7
1000928a:	2800      	cmp	r0, #0
1000928c:	d000      	beq.n	10009290 <mpu_init+0x264>
1000928e:	e758      	b.n	10009142 <mpu_init+0x116>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
10009290:	2311      	movs	r3, #17
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
10009292:	6822      	ldr	r2, [r4, #0]
    data[0] = BIT_SLAVE_EN | 1;
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
10009294:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
10009296:	3315      	adds	r3, #21
10009298:	5cd1      	ldrb	r1, [r2, r3]
1000929a:	6863      	ldr	r3, [r4, #4]
1000929c:	2201      	movs	r2, #1
1000929e:	7818      	ldrb	r0, [r3, #0]
100092a0:	0033      	movs	r3, r6
100092a2:	47b8      	blx	r7
100092a4:	2800      	cmp	r0, #0
100092a6:	d000      	beq.n	100092aa <mpu_init+0x27e>
100092a8:	e74b      	b.n	10009142 <mpu_init+0x116>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
100092aa:	2303      	movs	r3, #3
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
100092ac:	6822      	ldr	r2, [r4, #0]
    data[0] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
100092ae:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
100092b0:	3324      	adds	r3, #36	; 0x24
100092b2:	5cd1      	ldrb	r1, [r2, r3]
100092b4:	6863      	ldr	r3, [r4, #4]
100092b6:	2201      	movs	r2, #1
100092b8:	7818      	ldrb	r0, [r3, #0]
100092ba:	0033      	movs	r3, r6
100092bc:	47b8      	blx	r7
100092be:	e740      	b.n	10009142 <mpu_init+0x116>
100092c0:	1001372c 	.word	0x1001372c
100092c4:	10008301 	.word	0x10008301
100092c8:	1000810d 	.word	0x1000810d
100092cc:	100114b1 	.word	0x100114b1
100092d0:	100086c5 	.word	0x100086c5
100092d4:	10008799 	.word	0x10008799
100092d8:	10008819 	.word	0x10008819
100092dc:	10008dad 	.word	0x10008dad
100092e0:	1000892d 	.word	0x1000892d
100092e4:	1000bc9d 	.word	0x1000bc9d
100092e8:	10008b59 	.word	0x10008b59
100092ec:	10008359 	.word	0x10008359
100092f0:	100128bc 	.word	0x100128bc
100092f4:	10011719 	.word	0x10011719
100092f8:	1001272c 	.word	0x1001272c
100092fc:	100088c9 	.word	0x100088c9
10009300:	10008e79 	.word	0x10008e79

10009304 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
10009304:	b5f0      	push	{r4, r5, r6, r7, lr}
10009306:	000d      	movs	r5, r1
10009308:	b083      	sub	sp, #12
1000930a:	1e16      	subs	r6, r2, #0
    unsigned char tmp[2];

    if (!data)
1000930c:	d021      	beq.n	10009352 <mpu_write_mem+0x4e>
        return -1;
    if (!st.chip_cfg.sensors)
1000930e:	4c12      	ldr	r4, [pc, #72]	; (10009358 <mpu_write_mem+0x54>)
10009310:	7aa3      	ldrb	r3, [r4, #10]
10009312:	2b00      	cmp	r3, #0
10009314:	d01d      	beq.n	10009352 <mpu_write_mem+0x4e>
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
10009316:	0a02      	lsrs	r2, r0, #8
10009318:	ab01      	add	r3, sp, #4
1000931a:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
1000931c:	b2c0      	uxtb	r0, r0

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
1000931e:	6862      	ldr	r2, [r4, #4]
        return -1;
    if (!st.chip_cfg.sensors)
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
10009320:	7058      	strb	r0, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
10009322:	1840      	adds	r0, r0, r1
10009324:	8951      	ldrh	r1, [r2, #10]
10009326:	4288      	cmp	r0, r1
10009328:	dc13      	bgt.n	10009352 <mpu_write_mem+0x4e>
        return -1;

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
1000932a:	6821      	ldr	r1, [r4, #0]
1000932c:	7810      	ldrb	r0, [r2, #0]
1000932e:	7ec9      	ldrb	r1, [r1, #27]
10009330:	2202      	movs	r2, #2
10009332:	4f0a      	ldr	r7, [pc, #40]	; (1000935c <mpu_write_mem+0x58>)
10009334:	47b8      	blx	r7
10009336:	2800      	cmp	r0, #0
10009338:	d10b      	bne.n	10009352 <mpu_write_mem+0x4e>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
1000933a:	6823      	ldr	r3, [r4, #0]
1000933c:	b2ea      	uxtb	r2, r5
1000933e:	7e19      	ldrb	r1, [r3, #24]
10009340:	6863      	ldr	r3, [r4, #4]
10009342:	7818      	ldrb	r0, [r3, #0]
10009344:	0033      	movs	r3, r6
10009346:	47b8      	blx	r7
10009348:	1e43      	subs	r3, r0, #1
1000934a:	4198      	sbcs	r0, r3
1000934c:	4240      	negs	r0, r0
        return -1;
    return 0;
}
1000934e:	b003      	add	sp, #12
10009350:	bdf0      	pop	{r4, r5, r6, r7, pc}
        unsigned char *data)
{
    unsigned char tmp[2];

    if (!data)
        return -1;
10009352:	2001      	movs	r0, #1
10009354:	4240      	negs	r0, r0
10009356:	e7fa      	b.n	1000934e <mpu_write_mem+0x4a>
10009358:	1001372c 	.word	0x1001372c
1000935c:	10008301 	.word	0x10008301

10009360 <mpu_get_compass_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
10009360:	b5f0      	push	{r4, r5, r6, r7, lr}
10009362:	4647      	mov	r7, r8
10009364:	b480      	push	{r7}
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
10009366:	4e29      	ldr	r6, [pc, #164]	; (1000940c <mpu_get_compass_reg+0xac>)
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
10009368:	b084      	sub	sp, #16
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
1000936a:	7ab3      	ldrb	r3, [r6, #10]
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
1000936c:	0004      	movs	r4, r0
1000936e:	4688      	mov	r8, r1
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
10009370:	07db      	lsls	r3, r3, #31
10009372:	d542      	bpl.n	100093fa <mpu_get_compass_reg+0x9a>
        return -1;
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
10009374:	2328      	movs	r3, #40	; 0x28
10009376:	6832      	ldr	r2, [r6, #0]
10009378:	af01      	add	r7, sp, #4
1000937a:	5cd1      	ldrb	r1, [r2, r3]
1000937c:	6873      	ldr	r3, [r6, #4]
1000937e:	4d24      	ldr	r5, [pc, #144]	; (10009410 <mpu_get_compass_reg+0xb0>)
10009380:	7818      	ldrb	r0, [r3, #0]
10009382:	2208      	movs	r2, #8
10009384:	003b      	movs	r3, r7
10009386:	47a8      	blx	r5
10009388:	1e05      	subs	r5, r0, #0
1000938a:	d136      	bne.n	100093fa <mpu_get_compass_reg+0x9a>
        return -2;
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
1000938c:	2203      	movs	r2, #3
1000938e:	783b      	ldrb	r3, [r7, #0]
10009390:	4013      	ands	r3, r2
10009392:	2b01      	cmp	r3, #1
10009394:	d134      	bne.n	10009400 <mpu_get_compass_reg+0xa0>
        return -2;
    if (tmp[7] & AKM_OVERFLOW)
10009396:	79fb      	ldrb	r3, [r7, #7]
10009398:	2b7f      	cmp	r3, #127	; 0x7f
1000939a:	d834      	bhi.n	10009406 <mpu_get_compass_reg+0xa6>
        return -3;
#endif
    data[0] = (tmp[2] << 8) | tmp[1];
1000939c:	78b9      	ldrb	r1, [r7, #2]
1000939e:	787b      	ldrb	r3, [r7, #1]
100093a0:	0209      	lsls	r1, r1, #8
100093a2:	4319      	orrs	r1, r3
100093a4:	b209      	sxth	r1, r1
100093a6:	8021      	strh	r1, [r4, #0]
    data[1] = (tmp[4] << 8) | tmp[3];
100093a8:	793a      	ldrb	r2, [r7, #4]
100093aa:	78fb      	ldrb	r3, [r7, #3]
100093ac:	0212      	lsls	r2, r2, #8
100093ae:	431a      	orrs	r2, r3
100093b0:	b212      	sxth	r2, r2
100093b2:	8062      	strh	r2, [r4, #2]
    data[2] = (tmp[6] << 8) | tmp[5];
100093b4:	79bb      	ldrb	r3, [r7, #6]
100093b6:	7978      	ldrb	r0, [r7, #5]
100093b8:	021b      	lsls	r3, r3, #8
100093ba:	4303      	orrs	r3, r0
100093bc:	b21b      	sxth	r3, r3
100093be:	80a3      	strh	r3, [r4, #4]

    data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
100093c0:	272c      	movs	r7, #44	; 0x2c
100093c2:	5ff0      	ldrsh	r0, [r6, r7]
100093c4:	4341      	muls	r1, r0
100093c6:	1209      	asrs	r1, r1, #8
100093c8:	8021      	strh	r1, [r4, #0]
    data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
100093ca:	202e      	movs	r0, #46	; 0x2e
100093cc:	5e31      	ldrsh	r1, [r6, r0]
100093ce:	434a      	muls	r2, r1
100093d0:	1212      	asrs	r2, r2, #8
100093d2:	8062      	strh	r2, [r4, #2]
    data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
100093d4:	2130      	movs	r1, #48	; 0x30
100093d6:	5e72      	ldrsh	r2, [r6, r1]
100093d8:	4353      	muls	r3, r2
100093da:	121b      	asrs	r3, r3, #8
100093dc:	80a3      	strh	r3, [r4, #4]

    if (timestamp)
100093de:	4643      	mov	r3, r8
100093e0:	2b00      	cmp	r3, #0
100093e2:	d005      	beq.n	100093f0 <mpu_get_compass_reg+0x90>
    }
    return 0;
}
static inline void get_ms(uint32_t *count)
{
    volatile uint32_t load = (uint32_t)(0xffffffff - dualtimer_get_value(DUALTIMER_TIMER2));
100093e4:	4b0b      	ldr	r3, [pc, #44]	; (10009414 <mpu_get_compass_reg+0xb4>)
100093e6:	2001      	movs	r0, #1
100093e8:	4798      	blx	r3
100093ea:	43c0      	mvns	r0, r0
100093ec:	9000      	str	r0, [sp, #0]
    count = (uint32_t *)(load / 26000);
100093ee:	9b00      	ldr	r3, [sp, #0]
        get_ms(timestamp);
    return 0;
#else
    return -1;
#endif
}
100093f0:	0028      	movs	r0, r5
100093f2:	b004      	add	sp, #16
100093f4:	bc04      	pop	{r2}
100093f6:	4690      	mov	r8, r2
100093f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
        return -1;
100093fa:	2501      	movs	r5, #1
100093fc:	426d      	negs	r5, r5
100093fe:	e7f7      	b.n	100093f0 <mpu_get_compass_reg+0x90>
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
        return -2;
10009400:	2502      	movs	r5, #2
10009402:	426d      	negs	r5, r5
10009404:	e7f4      	b.n	100093f0 <mpu_get_compass_reg+0x90>
    if (tmp[7] & AKM_OVERFLOW)
        return -3;
10009406:	2503      	movs	r5, #3
10009408:	426d      	negs	r5, r5
1000940a:	e7f1      	b.n	100093f0 <mpu_get_compass_reg+0x90>
1000940c:	1001372c 	.word	0x1001372c
10009410:	10008359 	.word	0x10008359
10009414:	100081a1 	.word	0x100081a1

10009418 <mpu_get_compass_fsr>:
 *  @return     0 if successful.
 */
int mpu_get_compass_fsr(unsigned short *fsr)
{
#ifdef AK89xx_SECONDARY
    fsr[0] = st.hw->compass_fsr;
10009418:	4b02      	ldr	r3, [pc, #8]	; (10009424 <mpu_get_compass_fsr+0xc>)
1000941a:	685b      	ldr	r3, [r3, #4]
1000941c:	899b      	ldrh	r3, [r3, #12]
1000941e:	8003      	strh	r3, [r0, #0]
    return 0;
#else
    return -1;
#endif
}
10009420:	2000      	movs	r0, #0
10009422:	4770      	bx	lr
10009424:	1001372c 	.word	0x1001372c

10009428 <dmp_enable_gyro_cal.part.1>:
 *  called with @e DMP_FEATURE_SEND_CAL_GYRO, the biases will also be
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
10009428:	b500      	push	{lr}
1000942a:	b085      	sub	sp, #20
{
    if (enable) {
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
1000942c:	2209      	movs	r2, #9
1000942e:	4906      	ldr	r1, [pc, #24]	; (10009448 <dmp_enable_gyro_cal.part.1+0x20>)
10009430:	a801      	add	r0, sp, #4
10009432:	4b06      	ldr	r3, [pc, #24]	; (1000944c <dmp_enable_gyro_cal.part.1+0x24>)
10009434:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
10009436:	2097      	movs	r0, #151	; 0x97
10009438:	aa01      	add	r2, sp, #4
1000943a:	2109      	movs	r1, #9
1000943c:	4b04      	ldr	r3, [pc, #16]	; (10009450 <dmp_enable_gyro_cal.part.1+0x28>)
1000943e:	00c0      	lsls	r0, r0, #3
10009440:	4798      	blx	r3
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    }
}
10009442:	b005      	add	sp, #20
10009444:	bd00      	pop	{pc}
10009446:	46c0      	nop			; (mov r8, r8)
10009448:	10012b08 	.word	0x10012b08
1000944c:	1001149f 	.word	0x1001149f
10009450:	10009305 	.word	0x10009305

10009454 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
10009454:	b5f0      	push	{r4, r5, r6, r7, lr}
10009456:	4647      	mov	r7, r8
10009458:	b480      	push	{r7}
1000945a:	0005      	movs	r5, r0
1000945c:	b082      	sub	sp, #8
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
1000945e:	0743      	lsls	r3, r0, #29
10009460:	d067      	beq.n	10009532 <dmp_set_tap_thresh+0xde>
10009462:	23c8      	movs	r3, #200	; 0xc8
10009464:	00db      	lsls	r3, r3, #3
10009466:	4299      	cmp	r1, r3
10009468:	d863      	bhi.n	10009532 <dmp_set_tap_thresh+0xde>
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
1000946a:	4b4c      	ldr	r3, [pc, #304]	; (1000959c <dmp_set_tap_thresh+0x148>)
1000946c:	0008      	movs	r0, r1
1000946e:	4798      	blx	r3
10009470:	4b4b      	ldr	r3, [pc, #300]	; (100095a0 <dmp_set_tap_thresh+0x14c>)
10009472:	494c      	ldr	r1, [pc, #304]	; (100095a4 <dmp_set_tap_thresh+0x150>)
10009474:	4798      	blx	r3

    mpu_get_accel_fsr(&accel_fsr);
10009476:	466b      	mov	r3, sp
10009478:	1cdc      	adds	r4, r3, #3
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
1000947a:	1c07      	adds	r7, r0, #0

    mpu_get_accel_fsr(&accel_fsr);
1000947c:	4b4a      	ldr	r3, [pc, #296]	; (100095a8 <dmp_set_tap_thresh+0x154>)
1000947e:	0020      	movs	r0, r4
10009480:	4798      	blx	r3
    switch (accel_fsr) {
10009482:	7823      	ldrb	r3, [r4, #0]
10009484:	2b04      	cmp	r3, #4
10009486:	d100      	bne.n	1000948a <dmp_set_tap_thresh+0x36>
10009488:	e079      	b.n	1000957e <dmp_set_tap_thresh+0x12a>
1000948a:	d931      	bls.n	100094f0 <dmp_set_tap_thresh+0x9c>
1000948c:	2b08      	cmp	r3, #8
1000948e:	d067      	beq.n	10009560 <dmp_set_tap_thresh+0x10c>
10009490:	2b10      	cmp	r3, #16
10009492:	d14e      	bne.n	10009532 <dmp_set_tap_thresh+0xde>
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
        break;
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
10009494:	218a      	movs	r1, #138	; 0x8a
10009496:	4b45      	ldr	r3, [pc, #276]	; (100095ac <dmp_set_tap_thresh+0x158>)
10009498:	05c9      	lsls	r1, r1, #23
1000949a:	1c38      	adds	r0, r7, #0
1000949c:	4698      	mov	r8, r3
1000949e:	4798      	blx	r3
100094a0:	4c43      	ldr	r4, [pc, #268]	; (100095b0 <dmp_set_tap_thresh+0x15c>)
100094a2:	47a0      	blx	r4
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
100094a4:	4943      	ldr	r1, [pc, #268]	; (100095b4 <dmp_set_tap_thresh+0x160>)
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
        break;
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
100094a6:	b286      	uxth	r6, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
100094a8:	1c38      	adds	r0, r7, #0
100094aa:	47c0      	blx	r8
100094ac:	47a0      	blx	r4
100094ae:	b280      	uxth	r0, r0
        break;
    default:
        return -1;
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
100094b0:	ac01      	add	r4, sp, #4
100094b2:	0a33      	lsrs	r3, r6, #8
100094b4:	7023      	strb	r3, [r4, #0]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
100094b6:	0a03      	lsrs	r3, r0, #8
        break;
    default:
        return -1;
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
100094b8:	7066      	strb	r6, [r4, #1]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
100094ba:	70a3      	strb	r3, [r4, #2]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
100094bc:	70e0      	strb	r0, [r4, #3]

    if (axis & TAP_X) {
100094be:	07eb      	lsls	r3, r5, #31
100094c0:	d427      	bmi.n	10009512 <dmp_set_tap_thresh+0xbe>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Y) {
100094c2:	07ab      	lsls	r3, r5, #30
100094c4:	d43b      	bmi.n	1000953e <dmp_set_tap_thresh+0xea>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
100094c6:	2000      	movs	r0, #0
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Z) {
100094c8:	076b      	lsls	r3, r5, #29
100094ca:	d534      	bpl.n	10009536 <dmp_set_tap_thresh+0xe2>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
100094cc:	20ee      	movs	r0, #238	; 0xee
100094ce:	0022      	movs	r2, r4
100094d0:	2102      	movs	r1, #2
100094d2:	0040      	lsls	r0, r0, #1
100094d4:	4c38      	ldr	r4, [pc, #224]	; (100095b8 <dmp_set_tap_thresh+0x164>)
100094d6:	47a0      	blx	r4
100094d8:	2800      	cmp	r0, #0
100094da:	d12a      	bne.n	10009532 <dmp_set_tap_thresh+0xde>
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
100094dc:	466b      	mov	r3, sp
100094de:	302d      	adds	r0, #45	; 0x2d
100094e0:	1d9a      	adds	r2, r3, #6
100094e2:	2102      	movs	r1, #2
100094e4:	30ff      	adds	r0, #255	; 0xff
100094e6:	47a0      	blx	r4
100094e8:	1e43      	subs	r3, r0, #1
100094ea:	4198      	sbcs	r0, r3
100094ec:	4240      	negs	r0, r0
100094ee:	e022      	b.n	10009536 <dmp_set_tap_thresh+0xe2>
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;

    mpu_get_accel_fsr(&accel_fsr);
    switch (accel_fsr) {
100094f0:	2b02      	cmp	r3, #2
100094f2:	d11e      	bne.n	10009532 <dmp_set_tap_thresh+0xde>
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
100094f4:	218d      	movs	r1, #141	; 0x8d
100094f6:	4b2d      	ldr	r3, [pc, #180]	; (100095ac <dmp_set_tap_thresh+0x158>)
100094f8:	05c9      	lsls	r1, r1, #23
100094fa:	1c38      	adds	r0, r7, #0
100094fc:	4698      	mov	r8, r3
100094fe:	4798      	blx	r3
10009500:	4c2b      	ldr	r4, [pc, #172]	; (100095b0 <dmp_set_tap_thresh+0x15c>)
10009502:	47a0      	blx	r4
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
10009504:	492d      	ldr	r1, [pc, #180]	; (100095bc <dmp_set_tap_thresh+0x168>)
    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;

    mpu_get_accel_fsr(&accel_fsr);
    switch (accel_fsr) {
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
10009506:	b286      	uxth	r6, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
10009508:	1c38      	adds	r0, r7, #0
1000950a:	47c0      	blx	r8
1000950c:	47a0      	blx	r4
1000950e:	b280      	uxth	r0, r0
        break;
10009510:	e7ce      	b.n	100094b0 <dmp_set_tap_thresh+0x5c>
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);

    if (axis & TAP_X) {
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
10009512:	20ea      	movs	r0, #234	; 0xea
10009514:	0022      	movs	r2, r4
10009516:	2102      	movs	r1, #2
10009518:	0040      	lsls	r0, r0, #1
1000951a:	4e27      	ldr	r6, [pc, #156]	; (100095b8 <dmp_set_tap_thresh+0x164>)
1000951c:	47b0      	blx	r6
1000951e:	2800      	cmp	r0, #0
10009520:	d107      	bne.n	10009532 <dmp_set_tap_thresh+0xde>
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
10009522:	466b      	mov	r3, sp
10009524:	3025      	adds	r0, #37	; 0x25
10009526:	1d9a      	adds	r2, r3, #6
10009528:	2102      	movs	r1, #2
1000952a:	30ff      	adds	r0, #255	; 0xff
1000952c:	47b0      	blx	r6
1000952e:	2800      	cmp	r0, #0
10009530:	d0c7      	beq.n	100094c2 <dmp_set_tap_thresh+0x6e>
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
        break;
    default:
        return -1;
10009532:	2001      	movs	r0, #1
10009534:	4240      	negs	r0, r0
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
}
10009536:	b002      	add	sp, #8
10009538:	bc04      	pop	{r2}
1000953a:	4690      	mov	r8, r2
1000953c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Y) {
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
1000953e:	20ec      	movs	r0, #236	; 0xec
10009540:	0022      	movs	r2, r4
10009542:	2102      	movs	r1, #2
10009544:	0040      	lsls	r0, r0, #1
10009546:	4e1c      	ldr	r6, [pc, #112]	; (100095b8 <dmp_set_tap_thresh+0x164>)
10009548:	47b0      	blx	r6
1000954a:	2800      	cmp	r0, #0
1000954c:	d1f1      	bne.n	10009532 <dmp_set_tap_thresh+0xde>
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
1000954e:	466b      	mov	r3, sp
10009550:	3029      	adds	r0, #41	; 0x29
10009552:	1d9a      	adds	r2, r3, #6
10009554:	2102      	movs	r1, #2
10009556:	30ff      	adds	r0, #255	; 0xff
10009558:	47b0      	blx	r6
1000955a:	2800      	cmp	r0, #0
1000955c:	d0b3      	beq.n	100094c6 <dmp_set_tap_thresh+0x72>
1000955e:	e7e8      	b.n	10009532 <dmp_set_tap_thresh+0xde>
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
        break;
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
10009560:	218b      	movs	r1, #139	; 0x8b
10009562:	4b12      	ldr	r3, [pc, #72]	; (100095ac <dmp_set_tap_thresh+0x158>)
10009564:	05c9      	lsls	r1, r1, #23
10009566:	1c38      	adds	r0, r7, #0
10009568:	4698      	mov	r8, r3
1000956a:	4798      	blx	r3
1000956c:	4c10      	ldr	r4, [pc, #64]	; (100095b0 <dmp_set_tap_thresh+0x15c>)
1000956e:	47a0      	blx	r4
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
10009570:	4913      	ldr	r1, [pc, #76]	; (100095c0 <dmp_set_tap_thresh+0x16c>)
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
        break;
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
10009572:	b286      	uxth	r6, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
10009574:	1c38      	adds	r0, r7, #0
10009576:	47c0      	blx	r8
10009578:	47a0      	blx	r4
1000957a:	b280      	uxth	r0, r0
        break;
1000957c:	e798      	b.n	100094b0 <dmp_set_tap_thresh+0x5c>
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
        break;
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
1000957e:	218c      	movs	r1, #140	; 0x8c
10009580:	4b0a      	ldr	r3, [pc, #40]	; (100095ac <dmp_set_tap_thresh+0x158>)
10009582:	05c9      	lsls	r1, r1, #23
10009584:	1c38      	adds	r0, r7, #0
10009586:	4698      	mov	r8, r3
10009588:	4798      	blx	r3
1000958a:	4c09      	ldr	r4, [pc, #36]	; (100095b0 <dmp_set_tap_thresh+0x15c>)
1000958c:	47a0      	blx	r4
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
1000958e:	490d      	ldr	r1, [pc, #52]	; (100095c4 <dmp_set_tap_thresh+0x170>)
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
        break;
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
10009590:	b286      	uxth	r6, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
10009592:	1c38      	adds	r0, r7, #0
10009594:	47c0      	blx	r8
10009596:	47a0      	blx	r4
10009598:	b280      	uxth	r0, r0
        break;
1000959a:	e789      	b.n	100094b0 <dmp_set_tap_thresh+0x5c>
1000959c:	100104d5 	.word	0x100104d5
100095a0:	1000fb39 	.word	0x1000fb39
100095a4:	43480000 	.word	0x43480000
100095a8:	10008751 	.word	0x10008751
100095ac:	1000fecd 	.word	0x1000fecd
100095b0:	1000f7e1 	.word	0x1000f7e1
100095b4:	44c00000 	.word	0x44c00000
100095b8:	10009305 	.word	0x10009305
100095bc:	46400000 	.word	0x46400000
100095c0:	45400000 	.word	0x45400000
100095c4:	45c00000 	.word	0x45c00000

100095c8 <dmp_set_tap_axes>:
 */
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;

    if (axis & TAP_X)
100095c8:	2301      	movs	r3, #1
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
100095ca:	b500      	push	{lr}
    unsigned char tmp = 0;

    if (axis & TAP_X)
100095cc:	4003      	ands	r3, r0
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
100095ce:	b083      	sub	sp, #12
    unsigned char tmp = 0;

    if (axis & TAP_X)
100095d0:	2b00      	cmp	r3, #0
100095d2:	d115      	bne.n	10009600 <dmp_set_tap_axes+0x38>
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;
100095d4:	466a      	mov	r2, sp
100095d6:	3207      	adds	r2, #7
100095d8:	7013      	strb	r3, [r2, #0]

    if (axis & TAP_X)
        tmp |= 0x30;
    if (axis & TAP_Y)
100095da:	0783      	lsls	r3, r0, #30
100095dc:	d503      	bpl.n	100095e6 <dmp_set_tap_axes+0x1e>
        tmp |= 0x0C;
100095de:	230c      	movs	r3, #12
100095e0:	7811      	ldrb	r1, [r2, #0]
100095e2:	430b      	orrs	r3, r1
100095e4:	7013      	strb	r3, [r2, #0]
    if (axis & TAP_Z)
100095e6:	0743      	lsls	r3, r0, #29
100095e8:	d503      	bpl.n	100095f2 <dmp_set_tap_axes+0x2a>
        tmp |= 0x03;
100095ea:	2303      	movs	r3, #3
100095ec:	7811      	ldrb	r1, [r2, #0]
100095ee:	430b      	orrs	r3, r1
100095f0:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_72, 1, &tmp);
100095f2:	20a4      	movs	r0, #164	; 0xa4
100095f4:	2101      	movs	r1, #1
100095f6:	4b05      	ldr	r3, [pc, #20]	; (1000960c <dmp_set_tap_axes+0x44>)
100095f8:	0040      	lsls	r0, r0, #1
100095fa:	4798      	blx	r3
}
100095fc:	b003      	add	sp, #12
100095fe:	bd00      	pop	{pc}
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;

    if (axis & TAP_X)
        tmp |= 0x30;
10009600:	466b      	mov	r3, sp
10009602:	1dda      	adds	r2, r3, #7
10009604:	2330      	movs	r3, #48	; 0x30
10009606:	7013      	strb	r3, [r2, #0]
10009608:	e7e7      	b.n	100095da <dmp_set_tap_axes+0x12>
1000960a:	46c0      	nop			; (mov r8, r8)
1000960c:	10009305 	.word	0x10009305

10009610 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
10009610:	b500      	push	{lr}
10009612:	b085      	sub	sp, #20
    if (enable) {
10009614:	2800      	cmp	r0, #0
10009616:	d10d      	bne.n	10009634 <dmp_enable_gyro_cal+0x24>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
10009618:	4908      	ldr	r1, [pc, #32]	; (1000963c <dmp_enable_gyro_cal+0x2c>)
1000961a:	2209      	movs	r2, #9
1000961c:	3128      	adds	r1, #40	; 0x28
1000961e:	4b08      	ldr	r3, [pc, #32]	; (10009640 <dmp_enable_gyro_cal+0x30>)
10009620:	a801      	add	r0, sp, #4
10009622:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
10009624:	2097      	movs	r0, #151	; 0x97
10009626:	aa01      	add	r2, sp, #4
10009628:	2109      	movs	r1, #9
1000962a:	00c0      	lsls	r0, r0, #3
1000962c:	4b05      	ldr	r3, [pc, #20]	; (10009644 <dmp_enable_gyro_cal+0x34>)
1000962e:	4798      	blx	r3
    }
}
10009630:	b005      	add	sp, #20
10009632:	bd00      	pop	{pc}
10009634:	4b04      	ldr	r3, [pc, #16]	; (10009648 <dmp_enable_gyro_cal+0x38>)
10009636:	4798      	blx	r3
10009638:	e7fa      	b.n	10009630 <dmp_enable_gyro_cal+0x20>
1000963a:	46c0      	nop			; (mov r8, r8)
1000963c:	10012b08 	.word	0x10012b08
10009640:	1001149f 	.word	0x1001149f
10009644:	10009305 	.word	0x10009305
10009648:	10009429 	.word	0x10009429

1000964c <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
1000964c:	b500      	push	{lr}
1000964e:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009650:	2800      	cmp	r0, #0
10009652:	d010      	beq.n	10009676 <dmp_enable_lp_quat+0x2a>
        regs[0] = DINBC0;
10009654:	23c0      	movs	r3, #192	; 0xc0
10009656:	aa01      	add	r2, sp, #4
10009658:	7013      	strb	r3, [r2, #0]
        regs[1] = DINBC2;
1000965a:	3302      	adds	r3, #2
1000965c:	7053      	strb	r3, [r2, #1]
        regs[2] = DINBC4;
1000965e:	3302      	adds	r3, #2
10009660:	7093      	strb	r3, [r2, #2]
        regs[3] = DINBC6;
10009662:	3302      	adds	r3, #2
10009664:	70d3      	strb	r3, [r2, #3]
    }
    else
        memset(regs, 0x8B, 4);

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
10009666:	2104      	movs	r1, #4
10009668:	4b05      	ldr	r3, [pc, #20]	; (10009680 <dmp_enable_lp_quat+0x34>)
1000966a:	4806      	ldr	r0, [pc, #24]	; (10009684 <dmp_enable_lp_quat+0x38>)
1000966c:	4798      	blx	r3

    return mpu_reset_fifo();
1000966e:	4b06      	ldr	r3, [pc, #24]	; (10009688 <dmp_enable_lp_quat+0x3c>)
10009670:	4798      	blx	r3
}
10009672:	b003      	add	sp, #12
10009674:	bd00      	pop	{pc}
        regs[1] = DINBC2;
        regs[2] = DINBC4;
        regs[3] = DINBC6;
    }
    else
        memset(regs, 0x8B, 4);
10009676:	4b05      	ldr	r3, [pc, #20]	; (1000968c <dmp_enable_lp_quat+0x40>)
10009678:	aa01      	add	r2, sp, #4
1000967a:	9301      	str	r3, [sp, #4]
1000967c:	e7f3      	b.n	10009666 <dmp_enable_lp_quat+0x1a>
1000967e:	46c0      	nop			; (mov r8, r8)
10009680:	10009305 	.word	0x10009305
10009684:	00000a98 	.word	0x00000a98
10009688:	10008525 	.word	0x10008525
1000968c:	8b8b8b8b 	.word	0x8b8b8b8b

10009690 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
10009690:	b500      	push	{lr}
10009692:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009694:	2800      	cmp	r0, #0
10009696:	d010      	beq.n	100096ba <dmp_enable_6x_lp_quat+0x2a>
        regs[0] = DINA20;
10009698:	2320      	movs	r3, #32
1000969a:	aa01      	add	r2, sp, #4
1000969c:	7013      	strb	r3, [r2, #0]
        regs[1] = DINA28;
1000969e:	3308      	adds	r3, #8
100096a0:	7053      	strb	r3, [r2, #1]
        regs[2] = DINA30;
100096a2:	3308      	adds	r3, #8
100096a4:	7093      	strb	r3, [r2, #2]
        regs[3] = DINA38;
100096a6:	3308      	adds	r3, #8
100096a8:	70d3      	strb	r3, [r2, #3]
    } else
        memset(regs, 0xA3, 4);

    mpu_write_mem(CFG_8, 4, regs);
100096aa:	2104      	movs	r1, #4
100096ac:	4b05      	ldr	r3, [pc, #20]	; (100096c4 <dmp_enable_6x_lp_quat+0x34>)
100096ae:	4806      	ldr	r0, [pc, #24]	; (100096c8 <dmp_enable_6x_lp_quat+0x38>)
100096b0:	4798      	blx	r3

    return mpu_reset_fifo();
100096b2:	4b06      	ldr	r3, [pc, #24]	; (100096cc <dmp_enable_6x_lp_quat+0x3c>)
100096b4:	4798      	blx	r3
}
100096b6:	b003      	add	sp, #12
100096b8:	bd00      	pop	{pc}
        regs[0] = DINA20;
        regs[1] = DINA28;
        regs[2] = DINA30;
        regs[3] = DINA38;
    } else
        memset(regs, 0xA3, 4);
100096ba:	4b05      	ldr	r3, [pc, #20]	; (100096d0 <dmp_enable_6x_lp_quat+0x40>)
100096bc:	aa01      	add	r2, sp, #4
100096be:	9301      	str	r3, [sp, #4]
100096c0:	e7f3      	b.n	100096aa <dmp_enable_6x_lp_quat+0x1a>
100096c2:	46c0      	nop			; (mov r8, r8)
100096c4:	10009305 	.word	0x10009305
100096c8:	00000a9e 	.word	0x00000a9e
100096cc:	10008525 	.word	0x10008525
100096d0:	a3a3a3a3 	.word	0xa3a3a3a3

100096d4 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
100096d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100096d6:	4645      	mov	r5, r8
100096d8:	464e      	mov	r6, r9
100096da:	4657      	mov	r7, sl

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
100096dc:	2302      	movs	r3, #2
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
100096de:	b4e0      	push	{r5, r6, r7}
100096e0:	b084      	sub	sp, #16

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
100096e2:	ac01      	add	r4, sp, #4
100096e4:	7023      	strb	r3, [r4, #0]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
100096e6:	33c8      	adds	r3, #200	; 0xc8
100096e8:	7063      	strb	r3, [r4, #1]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
100096ea:	3319      	adds	r3, #25
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
100096ec:	0005      	movs	r5, r0
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
100096ee:	70a3      	strb	r3, [r4, #2]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
    mpu_write_mem(D_0_104, 4, tmp);
100096f0:	0022      	movs	r2, r4
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
100096f2:	3bda      	subs	r3, #218	; 0xda
    mpu_write_mem(D_0_104, 4, tmp);
100096f4:	2104      	movs	r1, #4
100096f6:	2068      	movs	r0, #104	; 0x68
100096f8:	4e7c      	ldr	r6, [pc, #496]	; (100098ec <dmp_enable_feature+0x218>)
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
100096fa:	70e3      	strb	r3, [r4, #3]
    mpu_write_mem(D_0_104, 4, tmp);
100096fc:	47b0      	blx	r6
100096fe:	2240      	movs	r2, #64	; 0x40

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
10009700:	23a3      	movs	r3, #163	; 0xa3
10009702:	402a      	ands	r2, r5
10009704:	7023      	strb	r3, [r4, #0]
10009706:	4690      	mov	r8, r2
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
10009708:	d100      	bne.n	1000970c <dmp_enable_feature+0x38>
1000970a:	e0e1      	b.n	100098d0 <dmp_enable_feature+0x1fc>
        tmp[1] = 0xC0;
1000970c:	331d      	adds	r3, #29
1000970e:	7063      	strb	r3, [r4, #1]
        tmp[2] = 0xC8;
10009710:	3308      	adds	r3, #8
10009712:	70a3      	strb	r3, [r4, #2]
        tmp[3] = 0xC2;
10009714:	3b06      	subs	r3, #6
10009716:	70e3      	strb	r3, [r4, #3]
10009718:	27c0      	movs	r7, #192	; 0xc0
1000971a:	007f      	lsls	r7, r7, #1
1000971c:	402f      	ands	r7, r5
    } else {
        tmp[1] = 0xA3;
        tmp[2] = 0xA3;
        tmp[3] = 0xA3;
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
1000971e:	d100      	bne.n	10009722 <dmp_enable_feature+0x4e>
10009720:	e0d1      	b.n	100098c6 <dmp_enable_feature+0x1f2>
        tmp[4] = 0xC4;
10009722:	23c4      	movs	r3, #196	; 0xc4
10009724:	7123      	strb	r3, [r4, #4]
        tmp[5] = 0xCC;
10009726:	3308      	adds	r3, #8
10009728:	7163      	strb	r3, [r4, #5]
        tmp[6] = 0xC6;
1000972a:	3b06      	subs	r3, #6
1000972c:	71a3      	strb	r3, [r4, #6]
    } else {
        tmp[4] = 0xA3;
        tmp[5] = 0xA3;
        tmp[6] = 0xA3;
    }
    tmp[7] = 0xA3;
1000972e:	23a3      	movs	r3, #163	; 0xa3
    tmp[8] = 0xA3;
    tmp[9] = 0xA3;
    mpu_write_mem(CFG_15,10,tmp);
10009730:	0022      	movs	r2, r4
10009732:	210a      	movs	r1, #10
10009734:	486e      	ldr	r0, [pc, #440]	; (100098f0 <dmp_enable_feature+0x21c>)
    } else {
        tmp[4] = 0xA3;
        tmp[5] = 0xA3;
        tmp[6] = 0xA3;
    }
    tmp[7] = 0xA3;
10009736:	71e3      	strb	r3, [r4, #7]
    tmp[8] = 0xA3;
10009738:	7223      	strb	r3, [r4, #8]
    tmp[9] = 0xA3;
1000973a:	7263      	strb	r3, [r4, #9]
    mpu_write_mem(CFG_15,10,tmp);
1000973c:	47b0      	blx	r6
1000973e:	2303      	movs	r3, #3
10009740:	402b      	ands	r3, r5
10009742:	4699      	mov	r9, r3

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009744:	d100      	bne.n	10009748 <dmp_enable_feature+0x74>
10009746:	e0bb      	b.n	100098c0 <dmp_enable_feature+0x1ec>
        tmp[0] = DINA20;
10009748:	2320      	movs	r3, #32
1000974a:	7023      	strb	r3, [r4, #0]
    else
        tmp[0] = 0xD8;
    mpu_write_mem(CFG_27,1,tmp);
1000974c:	0022      	movs	r2, r4
1000974e:	2101      	movs	r1, #1
10009750:	4868      	ldr	r0, [pc, #416]	; (100098f4 <dmp_enable_feature+0x220>)
10009752:	47b0      	blx	r6

    if (mask & DMP_FEATURE_GYRO_CAL)
10009754:	06ab      	lsls	r3, r5, #26
10009756:	d400      	bmi.n	1000975a <dmp_enable_feature+0x86>
10009758:	e0ae      	b.n	100098b8 <dmp_enable_feature+0x1e4>
1000975a:	4b67      	ldr	r3, [pc, #412]	; (100098f8 <dmp_enable_feature+0x224>)
1000975c:	4798      	blx	r3
        dmp_enable_gyro_cal(1);
    else
        dmp_enable_gyro_cal(0);

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
1000975e:	2f00      	cmp	r7, #0
10009760:	d00e      	beq.n	10009780 <dmp_enable_feature+0xac>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
10009762:	05eb      	lsls	r3, r5, #23
10009764:	d500      	bpl.n	10009768 <dmp_enable_feature+0x94>
10009766:	e0b7      	b.n	100098d8 <dmp_enable_feature+0x204>
            tmp[0] = 0xB2;
            tmp[1] = 0x8B;
            tmp[2] = 0xB6;
            tmp[3] = 0x9B;
        } else {
            tmp[0] = DINAC0;
10009768:	23b0      	movs	r3, #176	; 0xb0
1000976a:	7023      	strb	r3, [r4, #0]
            tmp[1] = DINA80;
1000976c:	3b30      	subs	r3, #48	; 0x30
1000976e:	7063      	strb	r3, [r4, #1]
            tmp[2] = DINAC2;
10009770:	3334      	adds	r3, #52	; 0x34
10009772:	70a3      	strb	r3, [r4, #2]
            tmp[3] = DINA90;
10009774:	3b24      	subs	r3, #36	; 0x24
10009776:	70e3      	strb	r3, [r4, #3]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
10009778:	0022      	movs	r2, r4
1000977a:	2104      	movs	r1, #4
1000977c:	485f      	ldr	r0, [pc, #380]	; (100098fc <dmp_enable_feature+0x228>)
1000977e:	47b0      	blx	r6
    }

    if (mask & DMP_FEATURE_TAP) {
10009780:	07eb      	lsls	r3, r5, #31
10009782:	d400      	bmi.n	10009786 <dmp_enable_feature+0xb2>
10009784:	e090      	b.n	100098a8 <dmp_enable_feature+0x1d4>
        /* Enable tap. */
        tmp[0] = 0xF8;
        mpu_write_mem(CFG_20, 1, tmp);
10009786:	208b      	movs	r0, #139	; 0x8b
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
    }

    if (mask & DMP_FEATURE_TAP) {
        /* Enable tap. */
        tmp[0] = 0xF8;
10009788:	23f8      	movs	r3, #248	; 0xf8
        mpu_write_mem(CFG_20, 1, tmp);
1000978a:	0022      	movs	r2, r4
1000978c:	2101      	movs	r1, #1
1000978e:	0100      	lsls	r0, r0, #4
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
    }

    if (mask & DMP_FEATURE_TAP) {
        /* Enable tap. */
        tmp[0] = 0xF8;
10009790:	7023      	strb	r3, [r4, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009792:	47b0      	blx	r6
        dmp_set_tap_thresh(TAP_XYZ, 250);
10009794:	21fa      	movs	r1, #250	; 0xfa
10009796:	4b5a      	ldr	r3, [pc, #360]	; (10009900 <dmp_enable_feature+0x22c>)
10009798:	2007      	movs	r0, #7
1000979a:	4798      	blx	r3
        dmp_set_tap_axes(TAP_XYZ);
1000979c:	4b59      	ldr	r3, [pc, #356]	; (10009904 <dmp_enable_feature+0x230>)
1000979e:	2007      	movs	r0, #7
100097a0:	4798      	blx	r3
    if (min_taps < 1)
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
100097a2:	2300      	movs	r3, #0
100097a4:	469a      	mov	sl, r3
    return mpu_write_mem(D_1_79, 1, &tmp);
100097a6:	2050      	movs	r0, #80	; 0x50
    if (min_taps < 1)
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
100097a8:	466b      	mov	r3, sp
100097aa:	4652      	mov	r2, sl
    return mpu_write_mem(D_1_79, 1, &tmp);
100097ac:	2101      	movs	r1, #1
    if (min_taps < 1)
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
100097ae:	701a      	strb	r2, [r3, #0]
    return mpu_write_mem(D_1_79, 1, &tmp);
100097b0:	30ff      	adds	r0, #255	; 0xff
100097b2:	466a      	mov	r2, sp
100097b4:	47b0      	blx	r6
{
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
100097b6:	466b      	mov	r3, sp
100097b8:	4652      	mov	r2, sl
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
100097ba:	20ef      	movs	r0, #239	; 0xef
{
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
100097bc:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
100097be:	2314      	movs	r3, #20
100097c0:	466a      	mov	r2, sp
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
100097c2:	2102      	movs	r1, #2
100097c4:	0040      	lsls	r0, r0, #1
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
100097c6:	7053      	strb	r3, [r2, #1]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
100097c8:	47b0      	blx	r6
{
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
100097ca:	466b      	mov	r3, sp
100097cc:	4652      	mov	r2, sl
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
    return mpu_write_mem(D_1_218, 2, tmp);
100097ce:	20ed      	movs	r0, #237	; 0xed
{
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
100097d0:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
100097d2:	2364      	movs	r3, #100	; 0x64
100097d4:	466a      	mov	r2, sp
    return mpu_write_mem(D_1_218, 2, tmp);
100097d6:	2102      	movs	r1, #2
100097d8:	0040      	lsls	r0, r0, #1
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
100097da:	7053      	strb	r3, [r2, #1]
    return mpu_write_mem(D_1_218, 2, tmp);
100097dc:	47b0      	blx	r6
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
100097de:	466b      	mov	r3, sp
100097e0:	4652      	mov	r2, sl
100097e2:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
100097e4:	466a      	mov	r2, sp
100097e6:	238e      	movs	r3, #142	; 0x8e
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
    return mpu_write_mem(D_1_92, 4, tmp);
100097e8:	20ae      	movs	r0, #174	; 0xae
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
100097ea:	7053      	strb	r3, [r2, #1]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
100097ec:	336b      	adds	r3, #107	; 0x6b
100097ee:	7093      	strb	r3, [r2, #2]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
    return mpu_write_mem(D_1_92, 4, tmp);
100097f0:	2104      	movs	r1, #4
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
100097f2:	3b69      	subs	r3, #105	; 0x69
    return mpu_write_mem(D_1_92, 4, tmp);
100097f4:	0040      	lsls	r0, r0, #1
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
100097f6:	70d3      	strb	r3, [r2, #3]
    return mpu_write_mem(D_1_92, 4, tmp);
100097f8:	47b0      	blx	r6
int dmp_set_shake_reject_time(unsigned short time)
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
100097fa:	466b      	mov	r3, sp
100097fc:	4652      	mov	r2, sl
    tmp[1] = time & 0xFF;
    return mpu_write_mem(D_1_90,2,tmp);
100097fe:	20ad      	movs	r0, #173	; 0xad
int dmp_set_shake_reject_time(unsigned short time)
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
10009800:	701a      	strb	r2, [r3, #0]
    tmp[1] = time & 0xFF;
10009802:	2308      	movs	r3, #8
10009804:	466a      	mov	r2, sp
    return mpu_write_mem(D_1_90,2,tmp);
10009806:	2102      	movs	r1, #2
10009808:	0040      	lsls	r0, r0, #1
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
    tmp[1] = time & 0xFF;
1000980a:	7053      	strb	r3, [r2, #1]
    return mpu_write_mem(D_1_90,2,tmp);
1000980c:	47b0      	blx	r6
int dmp_set_shake_reject_timeout(unsigned short time)
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
1000980e:	466b      	mov	r3, sp
10009810:	4652      	mov	r2, sl
    tmp[1] = time & 0xFF;
    return mpu_write_mem(D_1_88,2,tmp);
10009812:	20ac      	movs	r0, #172	; 0xac
int dmp_set_shake_reject_timeout(unsigned short time)
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
10009814:	701a      	strb	r2, [r3, #0]
    tmp[1] = time & 0xFF;
10009816:	2302      	movs	r3, #2
10009818:	466a      	mov	r2, sp
    return mpu_write_mem(D_1_88,2,tmp);
1000981a:	2102      	movs	r1, #2
1000981c:	0040      	lsls	r0, r0, #1
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
    tmp[1] = time & 0xFF;
1000981e:	7053      	strb	r3, [r2, #1]
    return mpu_write_mem(D_1_88,2,tmp);
10009820:	47b0      	blx	r6
    } else {
        tmp[0] = 0xD8;
        mpu_write_mem(CFG_20, 1, tmp);
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
10009822:	07ab      	lsls	r3, r5, #30
10009824:	d53d      	bpl.n	100098a2 <dmp_enable_feature+0x1ce>
        tmp[0] = 0xD9;
10009826:	23d9      	movs	r3, #217	; 0xd9
10009828:	7023      	strb	r3, [r4, #0]
    } else
        tmp[0] = 0xD8;
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
1000982a:	0022      	movs	r2, r4
1000982c:	2101      	movs	r1, #1
1000982e:	4836      	ldr	r0, [pc, #216]	; (10009908 <dmp_enable_feature+0x234>)
10009830:	47b0      	blx	r6

    if (mask & DMP_FEATURE_LP_QUAT)
10009832:	076b      	lsls	r3, r5, #29
10009834:	d531      	bpl.n	1000989a <dmp_enable_feature+0x1c6>
        dmp_enable_lp_quat(1);
10009836:	2001      	movs	r0, #1
10009838:	4b34      	ldr	r3, [pc, #208]	; (1000990c <dmp_enable_feature+0x238>)
1000983a:	4798      	blx	r3
    else
        dmp_enable_lp_quat(0);

    if (mask & DMP_FEATURE_6X_LP_QUAT)
1000983c:	06eb      	lsls	r3, r5, #27
1000983e:	d528      	bpl.n	10009892 <dmp_enable_feature+0x1be>
        dmp_enable_6x_lp_quat(1);
10009840:	2001      	movs	r0, #1
10009842:	4b33      	ldr	r3, [pc, #204]	; (10009910 <dmp_enable_feature+0x23c>)
10009844:	4798      	blx	r3
    else
        dmp_enable_6x_lp_quat(0);

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
10009846:	2308      	movs	r3, #8
10009848:	4c32      	ldr	r4, [pc, #200]	; (10009914 <dmp_enable_feature+0x240>)
1000984a:	432b      	orrs	r3, r5
1000984c:	8163      	strh	r3, [r4, #10]
    mpu_reset_fifo();
1000984e:	4b32      	ldr	r3, [pc, #200]	; (10009918 <dmp_enable_feature+0x244>)
10009850:	4798      	blx	r3

    dmp.packet_length = 0;
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
10009852:	4643      	mov	r3, r8
10009854:	2b00      	cmp	r3, #0
10009856:	d119      	bne.n	1000988c <dmp_enable_feature+0x1b8>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    mpu_reset_fifo();

    dmp.packet_length = 0;
10009858:	4643      	mov	r3, r8
1000985a:	73a3      	strb	r3, [r4, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        dmp.packet_length += 6;
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
1000985c:	2f00      	cmp	r7, #0
1000985e:	d002      	beq.n	10009866 <dmp_enable_feature+0x192>
        dmp.packet_length += 6;
10009860:	7ba3      	ldrb	r3, [r4, #14]
10009862:	3306      	adds	r3, #6
10009864:	73a3      	strb	r3, [r4, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
10009866:	2314      	movs	r3, #20
10009868:	422b      	tst	r3, r5
1000986a:	d002      	beq.n	10009872 <dmp_enable_feature+0x19e>
        dmp.packet_length += 16;
1000986c:	7ba3      	ldrb	r3, [r4, #14]
1000986e:	3310      	adds	r3, #16
10009870:	73a3      	strb	r3, [r4, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009872:	464b      	mov	r3, r9
10009874:	2b00      	cmp	r3, #0
10009876:	d002      	beq.n	1000987e <dmp_enable_feature+0x1aa>
        dmp.packet_length += 4;
10009878:	7ba3      	ldrb	r3, [r4, #14]
1000987a:	3304      	adds	r3, #4
1000987c:	73a3      	strb	r3, [r4, #14]

    return 0;
}
1000987e:	2000      	movs	r0, #0
10009880:	b004      	add	sp, #16
10009882:	bc1c      	pop	{r2, r3, r4}
10009884:	4690      	mov	r8, r2
10009886:	4699      	mov	r9, r3
10009888:	46a2      	mov	sl, r4
1000988a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    mpu_reset_fifo();

    dmp.packet_length = 0;
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        dmp.packet_length += 6;
1000988c:	2306      	movs	r3, #6
1000988e:	73a3      	strb	r3, [r4, #14]
10009890:	e7e4      	b.n	1000985c <dmp_enable_feature+0x188>
        dmp_enable_lp_quat(0);

    if (mask & DMP_FEATURE_6X_LP_QUAT)
        dmp_enable_6x_lp_quat(1);
    else
        dmp_enable_6x_lp_quat(0);
10009892:	4b1f      	ldr	r3, [pc, #124]	; (10009910 <dmp_enable_feature+0x23c>)
10009894:	2000      	movs	r0, #0
10009896:	4798      	blx	r3
10009898:	e7d5      	b.n	10009846 <dmp_enable_feature+0x172>
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);

    if (mask & DMP_FEATURE_LP_QUAT)
        dmp_enable_lp_quat(1);
    else
        dmp_enable_lp_quat(0);
1000989a:	4b1c      	ldr	r3, [pc, #112]	; (1000990c <dmp_enable_feature+0x238>)
1000989c:	2000      	movs	r0, #0
1000989e:	4798      	blx	r3
100098a0:	e7cc      	b.n	1000983c <dmp_enable_feature+0x168>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
        tmp[0] = 0xD9;
    } else
        tmp[0] = 0xD8;
100098a2:	23d8      	movs	r3, #216	; 0xd8
100098a4:	7023      	strb	r3, [r4, #0]
100098a6:	e7c0      	b.n	1000982a <dmp_enable_feature+0x156>
        dmp_set_shake_reject_thresh(GYRO_SF, 200);
        dmp_set_shake_reject_time(40);
        dmp_set_shake_reject_timeout(10);
    } else {
        tmp[0] = 0xD8;
        mpu_write_mem(CFG_20, 1, tmp);
100098a8:	208b      	movs	r0, #139	; 0x8b

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
        dmp_set_shake_reject_time(40);
        dmp_set_shake_reject_timeout(10);
    } else {
        tmp[0] = 0xD8;
100098aa:	23d8      	movs	r3, #216	; 0xd8
        mpu_write_mem(CFG_20, 1, tmp);
100098ac:	0022      	movs	r2, r4
100098ae:	2101      	movs	r1, #1
100098b0:	0100      	lsls	r0, r0, #4

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
        dmp_set_shake_reject_time(40);
        dmp_set_shake_reject_timeout(10);
    } else {
        tmp[0] = 0xD8;
100098b2:	7023      	strb	r3, [r4, #0]
        mpu_write_mem(CFG_20, 1, tmp);
100098b4:	47b0      	blx	r6
100098b6:	e7b4      	b.n	10009822 <dmp_enable_feature+0x14e>
    mpu_write_mem(CFG_27,1,tmp);

    if (mask & DMP_FEATURE_GYRO_CAL)
        dmp_enable_gyro_cal(1);
    else
        dmp_enable_gyro_cal(0);
100098b8:	4b18      	ldr	r3, [pc, #96]	; (1000991c <dmp_enable_feature+0x248>)
100098ba:	2000      	movs	r0, #0
100098bc:	4798      	blx	r3
100098be:	e74e      	b.n	1000975e <dmp_enable_feature+0x8a>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
        tmp[0] = DINA20;
    else
        tmp[0] = 0xD8;
100098c0:	23d8      	movs	r3, #216	; 0xd8
100098c2:	7023      	strb	r3, [r4, #0]
100098c4:	e742      	b.n	1000974c <dmp_enable_feature+0x78>
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
        tmp[4] = 0xC4;
        tmp[5] = 0xCC;
        tmp[6] = 0xC6;
    } else {
        tmp[4] = 0xA3;
100098c6:	23a3      	movs	r3, #163	; 0xa3
100098c8:	7123      	strb	r3, [r4, #4]
        tmp[5] = 0xA3;
100098ca:	7163      	strb	r3, [r4, #5]
        tmp[6] = 0xA3;
100098cc:	71a3      	strb	r3, [r4, #6]
100098ce:	e72e      	b.n	1000972e <dmp_enable_feature+0x5a>
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
        tmp[1] = 0xC0;
        tmp[2] = 0xC8;
        tmp[3] = 0xC2;
    } else {
        tmp[1] = 0xA3;
100098d0:	7063      	strb	r3, [r4, #1]
        tmp[2] = 0xA3;
100098d2:	70a3      	strb	r3, [r4, #2]
        tmp[3] = 0xA3;
100098d4:	70e3      	strb	r3, [r4, #3]
100098d6:	e71f      	b.n	10009718 <dmp_enable_feature+0x44>
    else
        dmp_enable_gyro_cal(0);

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
            tmp[0] = 0xB2;
100098d8:	23b2      	movs	r3, #178	; 0xb2
100098da:	7023      	strb	r3, [r4, #0]
            tmp[1] = 0x8B;
100098dc:	3b27      	subs	r3, #39	; 0x27
100098de:	7063      	strb	r3, [r4, #1]
            tmp[2] = 0xB6;
100098e0:	332b      	adds	r3, #43	; 0x2b
100098e2:	70a3      	strb	r3, [r4, #2]
            tmp[3] = 0x9B;
100098e4:	3b1b      	subs	r3, #27
100098e6:	70e3      	strb	r3, [r4, #3]
100098e8:	e746      	b.n	10009778 <dmp_enable_feature+0xa4>
100098ea:	46c0      	nop			; (mov r8, r8)
100098ec:	10009305 	.word	0x10009305
100098f0:	00000aa7 	.word	0x00000aa7
100098f4:	00000ab6 	.word	0x00000ab6
100098f8:	10009429 	.word	0x10009429
100098fc:	00000aa2 	.word	0x00000aa2
10009900:	10009455 	.word	0x10009455
10009904:	100095c9 	.word	0x100095c9
10009908:	0000073d 	.word	0x0000073d
1000990c:	1000964d 	.word	0x1000964d
10009910:	10009691 	.word	0x10009691
10009914:	100137f4 	.word	0x100137f4
10009918:	10008525 	.word	0x10008525
1000991c:	10009611 	.word	0x10009611

10009920 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10009920:	78c0      	ldrb	r0, [r0, #3]
10009922:	2800      	cmp	r0, #0
10009924:	d000      	beq.n	10009928 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
10009926:	20e2      	movs	r0, #226	; 0xe2
}
10009928:	4770      	bx	lr
1000992a:	46c0      	nop			; (mov r8, r8)

1000992c <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000992c:	2000      	movs	r0, #0
1000992e:	4770      	bx	lr

10009930 <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
10009930:	229b      	movs	r2, #155	; 0x9b
10009932:	4b20      	ldr	r3, [pc, #128]	; (100099b4 <ble_disconnected_state_handler+0x84>)
10009934:	0092      	lsls	r2, r2, #2
10009936:	b5f0      	push	{r4, r5, r6, r7, lr}
10009938:	0004      	movs	r4, r0
1000993a:	1898      	adds	r0, r3, r2
1000993c:	3a91      	subs	r2, #145	; 0x91
1000993e:	4647      	mov	r7, r8
10009940:	3aff      	subs	r2, #255	; 0xff
10009942:	4694      	mov	ip, r2
10009944:	3ada      	subs	r2, #218	; 0xda
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
10009946:	2501      	movs	r5, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009948:	2600      	movs	r6, #0
1000994a:	4690      	mov	r8, r2
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000994c:	b480      	push	{r7}
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
					if (ble_device_count > 0)
1000994e:	4f1a      	ldr	r7, [pc, #104]	; (100099b8 <ble_disconnected_state_handler+0x88>)
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009950:	001a      	movs	r2, r3
10009952:	3a56      	subs	r2, #86	; 0x56
10009954:	8811      	ldrh	r1, [r2, #0]
10009956:	8822      	ldrh	r2, [r4, #0]
10009958:	4291      	cmp	r1, r2
1000995a:	d00e      	beq.n	1000997a <ble_disconnected_state_handler+0x4a>
1000995c:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000995e:	4283      	cmp	r3, r0
10009960:	d1f6      	bne.n	10009950 <ble_disconnected_state_handler+0x20>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
10009962:	4b16      	ldr	r3, [pc, #88]	; (100099bc <ble_disconnected_state_handler+0x8c>)
10009964:	4816      	ldr	r0, [pc, #88]	; (100099c0 <ble_disconnected_state_handler+0x90>)
10009966:	4798      	blx	r3
10009968:	8822      	ldrh	r2, [r4, #0]
1000996a:	78a1      	ldrb	r1, [r4, #2]
1000996c:	4b15      	ldr	r3, [pc, #84]	; (100099c4 <ble_disconnected_state_handler+0x94>)
1000996e:	4816      	ldr	r0, [pc, #88]	; (100099c8 <ble_disconnected_state_handler+0x98>)
10009970:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
10009972:	2000      	movs	r0, #0
10009974:	bc04      	pop	{r2}
10009976:	4690      	mov	r8, r2
10009978:	bdf0      	pop	{r4, r5, r6, r7, pc}
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000997a:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000997c:	2a05      	cmp	r2, #5
1000997e:	d00e      	beq.n	1000999e <ble_disconnected_state_handler+0x6e>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
10009980:	2a08      	cmp	r2, #8
10009982:	d00c      	beq.n	1000999e <ble_disconnected_state_handler+0x6e>
10009984:	2a07      	cmp	r2, #7
10009986:	d808      	bhi.n	1000999a <ble_disconnected_state_handler+0x6a>
10009988:	0029      	movs	r1, r5
1000998a:	4091      	lsls	r1, r2
1000998c:	000a      	movs	r2, r1
1000998e:	4661      	mov	r1, ip
10009990:	4211      	tst	r1, r2
10009992:	d106      	bne.n	100099a2 <ble_disconnected_state_handler+0x72>
10009994:	4641      	mov	r1, r8
10009996:	4211      	tst	r1, r2
10009998:	d1e0      	bne.n	1000995c <ble_disconnected_state_handler+0x2c>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000999a:	701e      	strb	r6, [r3, #0]
				break;				
1000999c:	e7de      	b.n	1000995c <ble_disconnected_state_handler+0x2c>
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000999e:	701d      	strb	r5, [r3, #0]
100099a0:	e7dc      	b.n	1000995c <ble_disconnected_state_handler+0x2c>
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
100099a2:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
100099a4:	783a      	ldrb	r2, [r7, #0]
100099a6:	2a00      	cmp	r2, #0
100099a8:	d0d8      	beq.n	1000995c <ble_disconnected_state_handler+0x2c>
					{
						ble_device_count--;
100099aa:	783a      	ldrb	r2, [r7, #0]
100099ac:	3a01      	subs	r2, #1
100099ae:	b2d2      	uxtb	r2, r2
100099b0:	703a      	strb	r2, [r7, #0]
100099b2:	e7d3      	b.n	1000995c <ble_disconnected_state_handler+0x2c>
100099b4:	10014e72 	.word	0x10014e72
100099b8:	10015080 	.word	0x10015080
100099bc:	10011719 	.word	0x10011719
100099c0:	100128bc 	.word	0x100128bc
100099c4:	100115f9 	.word	0x100115f9
100099c8:	10012c88 	.word	0x10012c88

100099cc <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
100099cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100099ce:	4647      	mov	r7, r8
100099d0:	b480      	push	{r7}
100099d2:	4f33      	ldr	r7, [pc, #204]	; (10009aa0 <ble_pair_done_handler+0xd4>)
100099d4:	0006      	movs	r6, r0
100099d6:	003b      	movs	r3, r7
100099d8:	2400      	movs	r4, #0
100099da:	8845      	ldrh	r5, [r0, #2]
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
100099dc:	891a      	ldrh	r2, [r3, #8]
100099de:	42aa      	cmp	r2, r5
100099e0:	d022      	beq.n	10009a28 <ble_pair_done_handler+0x5c>
100099e2:	3401      	adds	r4, #1
100099e4:	337c      	adds	r3, #124	; 0x7c
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
100099e6:	2c05      	cmp	r4, #5
100099e8:	d1f8      	bne.n	100099dc <ble_pair_done_handler+0x10>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
100099ea:	7933      	ldrb	r3, [r6, #4]
100099ec:	2b00      	cmp	r3, #0
100099ee:	d049      	beq.n	10009a84 <ble_pair_done_handler+0xb8>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
100099f0:	4b2c      	ldr	r3, [pc, #176]	; (10009aa4 <ble_pair_done_handler+0xd8>)
100099f2:	5cfb      	ldrb	r3, [r7, r3]
100099f4:	2b01      	cmp	r3, #1
100099f6:	d912      	bls.n	10009a1e <ble_pair_done_handler+0x52>
			DBG_LOG("Pairing failed...Disconnecting");
100099f8:	4f2b      	ldr	r7, [pc, #172]	; (10009aa8 <ble_pair_done_handler+0xdc>)
100099fa:	4d2c      	ldr	r5, [pc, #176]	; (10009aac <ble_pair_done_handler+0xe0>)
100099fc:	0038      	movs	r0, r7
100099fe:	47a8      	blx	r5
10009a00:	482b      	ldr	r0, [pc, #172]	; (10009ab0 <ble_pair_done_handler+0xe4>)
10009a02:	4c2c      	ldr	r4, [pc, #176]	; (10009ab4 <ble_pair_done_handler+0xe8>)
10009a04:	47a0      	blx	r4
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
10009a06:	8870      	ldrh	r0, [r6, #2]
10009a08:	2113      	movs	r1, #19
10009a0a:	4b2b      	ldr	r3, [pc, #172]	; (10009ab8 <ble_pair_done_handler+0xec>)
10009a0c:	4798      	blx	r3
10009a0e:	2800      	cmp	r0, #0
10009a10:	d005      	beq.n	10009a1e <ble_pair_done_handler+0x52>
			{
				DBG_LOG("Disconnect Request Failed");
10009a12:	0038      	movs	r0, r7
10009a14:	47a8      	blx	r5
10009a16:	4829      	ldr	r0, [pc, #164]	; (10009abc <ble_pair_done_handler+0xf0>)
10009a18:	47a0      	blx	r4
				return AT_BLE_FAILURE;
10009a1a:	25e2      	movs	r5, #226	; 0xe2
10009a1c:	e000      	b.n	10009a20 <ble_pair_done_handler+0x54>
			}
		}
	}
	return AT_BLE_SUCCESS;
10009a1e:	2500      	movs	r5, #0
}
10009a20:	0028      	movs	r0, r5
10009a22:	bc04      	pop	{r2}
10009a24:	4690      	mov	r8, r2
10009a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
10009a28:	001a      	movs	r2, r3
10009a2a:	325e      	adds	r2, #94	; 0x5e
10009a2c:	7812      	ldrb	r2, [r2, #0]
10009a2e:	2a03      	cmp	r2, #3
10009a30:	d1d7      	bne.n	100099e2 <ble_pair_done_handler+0x16>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
10009a32:	7935      	ldrb	r5, [r6, #4]
10009a34:	2d00      	cmp	r5, #0
10009a36:	d1df      	bne.n	100099f8 <ble_pair_done_handler+0x2c>
	{
		DBG_LOG("Pairing procedure completed successfully");
10009a38:	4b1c      	ldr	r3, [pc, #112]	; (10009aac <ble_pair_done_handler+0xe0>)
10009a3a:	481b      	ldr	r0, [pc, #108]	; (10009aa8 <ble_pair_done_handler+0xdc>)
10009a3c:	4798      	blx	r3
10009a3e:	4b1d      	ldr	r3, [pc, #116]	; (10009ab4 <ble_pair_done_handler+0xe8>)
10009a40:	481f      	ldr	r0, [pc, #124]	; (10009ac0 <ble_pair_done_handler+0xf4>)
10009a42:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
10009a44:	0163      	lsls	r3, r4, #5
10009a46:	1b1c      	subs	r4, r3, r4
10009a48:	7832      	ldrb	r2, [r6, #0]
10009a4a:	00a4      	lsls	r4, r4, #2
10009a4c:	193b      	adds	r3, r7, r4
10009a4e:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
10009a50:	7932      	ldrb	r2, [r6, #4]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
10009a52:	0031      	movs	r1, r6
	{
		DBG_LOG("Pairing procedure completed successfully");
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
			ble_dev_info[idx].bond_info.status = pairing_params->status;
10009a54:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
10009a56:	2205      	movs	r2, #5
10009a58:	335e      	adds	r3, #94	; 0x5e
10009a5a:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
10009a5c:	1938      	adds	r0, r7, r4
10009a5e:	4b19      	ldr	r3, [pc, #100]	; (10009ac4 <ble_pair_done_handler+0xf8>)
10009a60:	3122      	adds	r1, #34	; 0x22
10009a62:	320b      	adds	r2, #11
10009a64:	3036      	adds	r0, #54	; 0x36
10009a66:	4698      	mov	r8, r3
10009a68:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
10009a6a:	0031      	movs	r1, r6
10009a6c:	1938      	adds	r0, r7, r4
10009a6e:	3132      	adds	r1, #50	; 0x32
10009a70:	2217      	movs	r2, #23
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
10009a72:	193c      	adds	r4, r7, r4
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
			ble_dev_info[idx].bond_info.status = pairing_params->status;
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
10009a74:	3046      	adds	r0, #70	; 0x46
10009a76:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
10009a78:	0020      	movs	r0, r4
10009a7a:	1db1      	adds	r1, r6, #6
10009a7c:	221c      	movs	r2, #28
10009a7e:	301a      	adds	r0, #26
10009a80:	47c0      	blx	r8
10009a82:	e7cd      	b.n	10009a20 <ble_pair_done_handler+0x54>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
10009a84:	4e08      	ldr	r6, [pc, #32]	; (10009aa8 <ble_pair_done_handler+0xdc>)
10009a86:	4d09      	ldr	r5, [pc, #36]	; (10009aac <ble_pair_done_handler+0xe0>)
10009a88:	0030      	movs	r0, r6
10009a8a:	47a8      	blx	r5
10009a8c:	4c09      	ldr	r4, [pc, #36]	; (10009ab4 <ble_pair_done_handler+0xe8>)
10009a8e:	480c      	ldr	r0, [pc, #48]	; (10009ac0 <ble_pair_done_handler+0xf4>)
10009a90:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
10009a92:	0030      	movs	r0, r6
10009a94:	47a8      	blx	r5
10009a96:	480c      	ldr	r0, [pc, #48]	; (10009ac8 <ble_pair_done_handler+0xfc>)
10009a98:	47a0      	blx	r4
			return AT_BLE_FAILURE;
10009a9a:	25e2      	movs	r5, #226	; 0xe2
10009a9c:	e7c0      	b.n	10009a20 <ble_pair_done_handler+0x54>
10009a9e:	46c0      	nop			; (mov r8, r8)
10009aa0:	10014e14 	.word	0x10014e14
10009aa4:	000002ca 	.word	0x000002ca
10009aa8:	100128bc 	.word	0x100128bc
10009aac:	10011719 	.word	0x10011719
10009ab0:	10012cb8 	.word	0x10012cb8
10009ab4:	100115f9 	.word	0x100115f9
10009ab8:	1000d6ad 	.word	0x1000d6ad
10009abc:	10012cd8 	.word	0x10012cd8
10009ac0:	10012cf4 	.word	0x10012cf4
10009ac4:	1001149f 	.word	0x1001149f
10009ac8:	10012d20 	.word	0x10012d20

10009acc <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
10009acc:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
10009ace:	2378      	movs	r3, #120	; 0x78
10009ad0:	2201      	movs	r2, #1
10009ad2:	2101      	movs	r1, #1
10009ad4:	4c02      	ldr	r4, [pc, #8]	; (10009ae0 <ble_conn_param_update_req+0x14>)
10009ad6:	8800      	ldrh	r0, [r0, #0]
10009ad8:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
10009ada:	2000      	movs	r0, #0
10009adc:	bd10      	pop	{r4, pc}
10009ade:	46c0      	nop			; (mov r8, r8)
10009ae0:	1000d6cd 	.word	0x1000d6cd

10009ae4 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
10009ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
10009ae6:	4644      	mov	r4, r8
10009ae8:	4656      	mov	r6, sl
10009aea:	465f      	mov	r7, fp
10009aec:	464d      	mov	r5, r9
10009aee:	4682      	mov	sl, r0
10009af0:	b4f0      	push	{r4, r5, r6, r7}
10009af2:	b087      	sub	sp, #28
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
10009af4:	ac03      	add	r4, sp, #12
10009af6:	2209      	movs	r2, #9
10009af8:	2100      	movs	r1, #0
10009afa:	4b63      	ldr	r3, [pc, #396]	; (10009c88 <ble_slave_security_request_handler+0x1a4>)
10009afc:	0020      	movs	r0, r4
10009afe:	4798      	blx	r3
10009b00:	4653      	mov	r3, sl
10009b02:	8819      	ldrh	r1, [r3, #0]
10009b04:	4b61      	ldr	r3, [pc, #388]	; (10009c8c <ble_slave_security_request_handler+0x1a8>)
10009b06:	4698      	mov	r8, r3
10009b08:	0018      	movs	r0, r3
10009b0a:	001a      	movs	r2, r3
10009b0c:	2300      	movs	r3, #0
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009b0e:	8915      	ldrh	r5, [r2, #8]
10009b10:	428d      	cmp	r5, r1
10009b12:	d041      	beq.n	10009b98 <ble_slave_security_request_handler+0xb4>
10009b14:	3301      	adds	r3, #1
10009b16:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009b18:	2b05      	cmp	r3, #5
10009b1a:	d1f8      	bne.n	10009b0e <ble_slave_security_request_handler+0x2a>
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
10009b1c:	2300      	movs	r3, #0
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009b1e:	8902      	ldrh	r2, [r0, #8]
10009b20:	001f      	movs	r7, r3
10009b22:	428a      	cmp	r2, r1
10009b24:	d056      	beq.n	10009bd4 <ble_slave_security_request_handler+0xf0>
10009b26:	3301      	adds	r3, #1
10009b28:	307c      	adds	r0, #124	; 0x7c
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009b2a:	2b05      	cmp	r3, #5
10009b2c:	d1f7      	bne.n	10009b1e <ble_slave_security_request_handler+0x3a>
10009b2e:	2705      	movs	r7, #5
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
10009b30:	2302      	movs	r3, #2
10009b32:	7223      	strb	r3, [r4, #8]
	features.bond = slave_sec_req->bond;
10009b34:	4653      	mov	r3, sl
10009b36:	78db      	ldrb	r3, [r3, #3]
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
10009b38:	4641      	mov	r1, r8
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
10009b3a:	70a3      	strb	r3, [r4, #2]
	features.mitm_protection = true;
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
10009b3c:	2304      	movs	r3, #4
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
	features.mitm_protection = true;
10009b3e:	2201      	movs	r2, #1
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
10009b40:	7023      	strb	r3, [r4, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
10009b42:	017b      	lsls	r3, r7, #5
10009b44:	9300      	str	r3, [sp, #0]
10009b46:	1bdb      	subs	r3, r3, r7
10009b48:	009b      	lsls	r3, r3, #2
10009b4a:	5ccb      	ldrb	r3, [r1, r3]
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
	features.mitm_protection = true;
10009b4c:	7062      	strb	r2, [r4, #1]
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
10009b4e:	2b02      	cmp	r3, #2
10009b50:	d100      	bne.n	10009b54 <ble_slave_security_request_handler+0x70>
10009b52:	e084      	b.n	10009c5e <ble_slave_security_request_handler+0x17a>
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
10009b54:	71a2      	strb	r2, [r4, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
10009b56:	71e2      	strb	r2, [r4, #7]
	}
	features.max_key_size = 16;
10009b58:	2310      	movs	r3, #16
10009b5a:	7163      	strb	r3, [r4, #5]
	features.min_key_size = 16;
10009b5c:	7123      	strb	r3, [r4, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
10009b5e:	9b00      	ldr	r3, [sp, #0]
10009b60:	1bde      	subs	r6, r3, r7
10009b62:	4643      	mov	r3, r8
10009b64:	00b6      	lsls	r6, r6, #2
10009b66:	199b      	adds	r3, r3, r6
10009b68:	7e1b      	ldrb	r3, [r3, #24]
10009b6a:	2b40      	cmp	r3, #64	; 0x40
10009b6c:	d04a      	beq.n	10009c04 <ble_slave_security_request_handler+0x120>
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
10009b6e:	9b00      	ldr	r3, [sp, #0]
10009b70:	0021      	movs	r1, r4
10009b72:	1bda      	subs	r2, r3, r7
10009b74:	4653      	mov	r3, sl
10009b76:	0092      	lsls	r2, r2, #2
10009b78:	3260      	adds	r2, #96	; 0x60
10009b7a:	8818      	ldrh	r0, [r3, #0]
10009b7c:	4442      	add	r2, r8
10009b7e:	2300      	movs	r3, #0
10009b80:	4d43      	ldr	r5, [pc, #268]	; (10009c90 <ble_slave_security_request_handler+0x1ac>)
10009b82:	47a8      	blx	r5
10009b84:	2800      	cmp	r0, #0
10009b86:	d132      	bne.n	10009bee <ble_slave_security_request_handler+0x10a>
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
			{
				return  AT_BLE_SUCCESS;
10009b88:	2000      	movs	r0, #0
		features.mitm_protection = false;
		DBG_LOG("Slave Security Req - Authentication Failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
10009b8a:	b007      	add	sp, #28
10009b8c:	bc3c      	pop	{r2, r3, r4, r5}
10009b8e:	4690      	mov	r8, r2
10009b90:	4699      	mov	r9, r3
10009b92:	46a2      	mov	sl, r4
10009b94:	46ab      	mov	fp, r5
10009b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009b98:	0015      	movs	r5, r2
10009b9a:	355e      	adds	r5, #94	; 0x5e
10009b9c:	782d      	ldrb	r5, [r5, #0]
10009b9e:	2d02      	cmp	r5, #2
10009ba0:	d1b8      	bne.n	10009b14 <ble_slave_security_request_handler+0x30>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
10009ba2:	4642      	mov	r2, r8
10009ba4:	015d      	lsls	r5, r3, #5
10009ba6:	1ae9      	subs	r1, r5, r3
10009ba8:	0089      	lsls	r1, r1, #2
10009baa:	1852      	adds	r2, r2, r1
10009bac:	0016      	movs	r6, r2
10009bae:	2706      	movs	r7, #6
10009bb0:	365e      	adds	r6, #94	; 0x5e
10009bb2:	7037      	strb	r7, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
10009bb4:	7d12      	ldrb	r2, [r2, #20]
10009bb6:	07d6      	lsls	r6, r2, #31
10009bb8:	d503      	bpl.n	10009bc2 <ble_slave_security_request_handler+0xde>
10009bba:	4656      	mov	r6, sl
10009bbc:	78f6      	ldrb	r6, [r6, #3]
10009bbe:	2e00      	cmp	r6, #0
10009bc0:	d151      	bne.n	10009c66 <ble_slave_security_request_handler+0x182>
				return AT_BLE_FAILURE;
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
10009bc2:	2202      	movs	r2, #2
10009bc4:	1aeb      	subs	r3, r5, r3
10009bc6:	009b      	lsls	r3, r3, #2
10009bc8:	4443      	add	r3, r8
10009bca:	335e      	adds	r3, #94	; 0x5e
10009bcc:	701a      	strb	r2, [r3, #0]
10009bce:	4653      	mov	r3, sl
10009bd0:	8819      	ldrh	r1, [r3, #0]
10009bd2:	e7a3      	b.n	10009b1c <ble_slave_security_request_handler+0x38>
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009bd4:	0002      	movs	r2, r0
10009bd6:	325e      	adds	r2, #94	; 0x5e
10009bd8:	7812      	ldrb	r2, [r2, #0]
10009bda:	2a02      	cmp	r2, #2
10009bdc:	d1a3      	bne.n	10009b26 <ble_slave_security_request_handler+0x42>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
10009bde:	015b      	lsls	r3, r3, #5
10009be0:	1bdb      	subs	r3, r3, r7
10009be2:	009b      	lsls	r3, r3, #2
10009be4:	4443      	add	r3, r8
10009be6:	335e      	adds	r3, #94	; 0x5e
10009be8:	3201      	adds	r2, #1
10009bea:	701a      	strb	r2, [r3, #0]
			break;
10009bec:	e7a0      	b.n	10009b30 <ble_slave_security_request_handler+0x4c>
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
	{
		features.bond = false;
10009bee:	2300      	movs	r3, #0
		features.mitm_protection = false;
		DBG_LOG("Slave Security Req - Authentication Failed");
10009bf0:	4828      	ldr	r0, [pc, #160]	; (10009c94 <ble_slave_security_request_handler+0x1b0>)
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
	{
		features.bond = false;
10009bf2:	70a3      	strb	r3, [r4, #2]
		features.mitm_protection = false;
10009bf4:	7063      	strb	r3, [r4, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
10009bf6:	4b28      	ldr	r3, [pc, #160]	; (10009c98 <ble_slave_security_request_handler+0x1b4>)
10009bf8:	4798      	blx	r3
10009bfa:	4828      	ldr	r0, [pc, #160]	; (10009c9c <ble_slave_security_request_handler+0x1b8>)
10009bfc:	4b28      	ldr	r3, [pc, #160]	; (10009ca0 <ble_slave_security_request_handler+0x1bc>)
10009bfe:	4798      	blx	r3
		return AT_BLE_FAILURE;
10009c00:	20e2      	movs	r0, #226	; 0xe2
10009c02:	e7c2      	b.n	10009b8a <ble_slave_security_request_handler+0xa6>
10009c04:	4b27      	ldr	r3, [pc, #156]	; (10009ca4 <ble_slave_security_request_handler+0x1c0>)
10009c06:	0035      	movs	r5, r6
10009c08:	4699      	mov	r9, r3
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009c0a:	230f      	movs	r3, #15
10009c0c:	469b      	mov	fp, r3
10009c0e:	9601      	str	r6, [sp, #4]
10009c10:	3568      	adds	r5, #104	; 0x68
10009c12:	3660      	adds	r6, #96	; 0x60
10009c14:	4446      	add	r6, r8
10009c16:	4445      	add	r5, r8
10009c18:	47c8      	blx	r9
10009c1a:	465b      	mov	r3, fp
10009c1c:	4018      	ands	r0, r3
10009c1e:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
10009c20:	47c8      	blx	r9
10009c22:	465b      	mov	r3, fp
10009c24:	4018      	ands	r0, r3
10009c26:	74b0      	strb	r0, [r6, #18]
10009c28:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
10009c2a:	42ae      	cmp	r6, r5
10009c2c:	d1f4      	bne.n	10009c18 <ble_slave_security_request_handler+0x134>
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009c2e:	230f      	movs	r3, #15
10009c30:	469b      	mov	fp, r3
10009c32:	9e01      	ldr	r6, [sp, #4]
10009c34:	3670      	adds	r6, #112	; 0x70
10009c36:	4446      	add	r6, r8
10009c38:	47c8      	blx	r9
10009c3a:	465b      	mov	r3, fp
10009c3c:	4018      	ands	r0, r3
10009c3e:	7028      	strb	r0, [r5, #0]
10009c40:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
10009c42:	42b5      	cmp	r5, r6
10009c44:	d1f8      	bne.n	10009c38 <ble_slave_security_request_handler+0x154>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
10009c46:	47c8      	blx	r9
10009c48:	9b00      	ldr	r3, [sp, #0]
10009c4a:	1bdb      	subs	r3, r3, r7
10009c4c:	009b      	lsls	r3, r3, #2
10009c4e:	4443      	add	r3, r8
10009c50:	001a      	movs	r2, r3
10009c52:	3270      	adds	r2, #112	; 0x70
10009c54:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
10009c56:	2210      	movs	r2, #16
10009c58:	337a      	adds	r3, #122	; 0x7a
10009c5a:	701a      	strb	r2, [r3, #0]
10009c5c:	e787      	b.n	10009b6e <ble_slave_security_request_handler+0x8a>
	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009c5e:	3301      	adds	r3, #1
10009c60:	71a3      	strb	r3, [r4, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009c62:	71e3      	strb	r3, [r4, #7]
10009c64:	e778      	b.n	10009b58 <ble_slave_security_request_handler+0x74>
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
10009c66:	4653      	mov	r3, sl
10009c68:	4441      	add	r1, r8
10009c6a:	8818      	ldrh	r0, [r3, #0]
10009c6c:	311a      	adds	r1, #26
10009c6e:	4b0e      	ldr	r3, [pc, #56]	; (10009ca8 <ble_slave_security_request_handler+0x1c4>)
10009c70:	4798      	blx	r3
10009c72:	2800      	cmp	r0, #0
10009c74:	d100      	bne.n	10009c78 <ble_slave_security_request_handler+0x194>
10009c76:	e787      	b.n	10009b88 <ble_slave_security_request_handler+0xa4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
10009c78:	4b07      	ldr	r3, [pc, #28]	; (10009c98 <ble_slave_security_request_handler+0x1b4>)
10009c7a:	4806      	ldr	r0, [pc, #24]	; (10009c94 <ble_slave_security_request_handler+0x1b0>)
10009c7c:	4798      	blx	r3
10009c7e:	480b      	ldr	r0, [pc, #44]	; (10009cac <ble_slave_security_request_handler+0x1c8>)
10009c80:	4b07      	ldr	r3, [pc, #28]	; (10009ca0 <ble_slave_security_request_handler+0x1bc>)
10009c82:	4798      	blx	r3
				return AT_BLE_FAILURE;
10009c84:	20e2      	movs	r0, #226	; 0xe2
10009c86:	e780      	b.n	10009b8a <ble_slave_security_request_handler+0xa6>
10009c88:	100114b1 	.word	0x100114b1
10009c8c:	10014e14 	.word	0x10014e14
10009c90:	1000da19 	.word	0x1000da19
10009c94:	100128bc 	.word	0x100128bc
10009c98:	10011719 	.word	0x10011719
10009c9c:	10012d68 	.word	0x10012d68
10009ca0:	100115f9 	.word	0x100115f9
10009ca4:	1001172d 	.word	0x1001172d
10009ca8:	1000dc05 	.word	0x1000dc05
10009cac:	10012d50 	.word	0x10012d50

10009cb0 <ble_pair_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
10009cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
10009cb2:	4656      	mov	r6, sl
10009cb4:	465f      	mov	r7, fp
10009cb6:	464d      	mov	r5, r9
10009cb8:	4644      	mov	r4, r8
10009cba:	4b45      	ldr	r3, [pc, #276]	; (10009dd0 <ble_pair_request_handler+0x120>)
10009cbc:	b4f0      	push	{r4, r5, r6, r7}
10009cbe:	469a      	mov	sl, r3
10009cc0:	001a      	movs	r2, r3
10009cc2:	2300      	movs	r3, #0
10009cc4:	b087      	sub	sp, #28
10009cc6:	9000      	str	r0, [sp, #0]
10009cc8:	8800      	ldrh	r0, [r0, #0]
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009cca:	8911      	ldrh	r1, [r2, #8]
10009ccc:	001c      	movs	r4, r3
10009cce:	4281      	cmp	r1, r0
10009cd0:	d040      	beq.n	10009d54 <ble_pair_request_handler+0xa4>
10009cd2:	3301      	adds	r3, #1
10009cd4:	327c      	adds	r2, #124	; 0x7c
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009cd6:	2b05      	cmp	r3, #5
10009cd8:	d1f7      	bne.n	10009cca <ble_pair_request_handler+0x1a>
10009cda:	2405      	movs	r4, #5
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = BLE_BOND_REQ;
	features.mitm_protection = BLE_MITM_REQ;
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
10009cdc:	2200      	movs	r2, #0
	features.oob_avaiable = BLE_OOB_REQ;
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
10009cde:	4651      	mov	r1, sl
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
10009ce0:	2302      	movs	r3, #2
10009ce2:	af03      	add	r7, sp, #12
	features.bond = BLE_BOND_REQ;
	features.mitm_protection = BLE_MITM_REQ;
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
10009ce4:	703a      	strb	r2, [r7, #0]
	features.oob_avaiable = BLE_OOB_REQ;
10009ce6:	70fa      	strb	r2, [r7, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
10009ce8:	0162      	lsls	r2, r4, #5
10009cea:	4690      	mov	r8, r2
10009cec:	1b12      	subs	r2, r2, r4
10009cee:	0092      	lsls	r2, r2, #2
10009cf0:	5c8a      	ldrb	r2, [r1, r2]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
10009cf2:	723b      	strb	r3, [r7, #8]
	features.bond = BLE_BOND_REQ;
10009cf4:	3b01      	subs	r3, #1
10009cf6:	70bb      	strb	r3, [r7, #2]
	features.mitm_protection = BLE_MITM_REQ;
10009cf8:	707b      	strb	r3, [r7, #1]
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
	features.oob_avaiable = BLE_OOB_REQ;
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
10009cfa:	2a02      	cmp	r2, #2
10009cfc:	d064      	beq.n	10009dc8 <ble_pair_request_handler+0x118>
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
10009cfe:	71bb      	strb	r3, [r7, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
10009d00:	71fb      	strb	r3, [r7, #7]
	}
			
	features.max_key_size = 16;
10009d02:	2310      	movs	r3, #16
10009d04:	717b      	strb	r3, [r7, #5]
	features.min_key_size = 16;
10009d06:	713b      	strb	r3, [r7, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
10009d08:	4643      	mov	r3, r8
10009d0a:	1b1e      	subs	r6, r3, r4
10009d0c:	4653      	mov	r3, sl
10009d0e:	00b6      	lsls	r6, r6, #2
10009d10:	199b      	adds	r3, r3, r6
10009d12:	7e1b      	ldrb	r3, [r3, #24]
10009d14:	2b40      	cmp	r3, #64	; 0x40
10009d16:	d02a      	beq.n	10009d6e <ble_pair_request_handler+0xbe>
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
10009d18:	4643      	mov	r3, r8
10009d1a:	1b1a      	subs	r2, r3, r4
10009d1c:	0092      	lsls	r2, r2, #2
10009d1e:	9b00      	ldr	r3, [sp, #0]
10009d20:	3260      	adds	r2, #96	; 0x60
10009d22:	8818      	ldrh	r0, [r3, #0]
10009d24:	4452      	add	r2, sl
10009d26:	2300      	movs	r3, #0
10009d28:	0039      	movs	r1, r7
10009d2a:	4c2a      	ldr	r4, [pc, #168]	; (10009dd4 <ble_pair_request_handler+0x124>)
10009d2c:	47a0      	blx	r4
10009d2e:	2800      	cmp	r0, #0
10009d30:	d009      	beq.n	10009d46 <ble_pair_request_handler+0x96>
	{
		features.bond = false;
10009d32:	2300      	movs	r3, #0
		features.mitm_protection = false;
		DBG_LOG("Pair Request - Authentication Failed");
10009d34:	4828      	ldr	r0, [pc, #160]	; (10009dd8 <ble_pair_request_handler+0x128>)
	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
	{
		features.bond = false;
10009d36:	70bb      	strb	r3, [r7, #2]
		features.mitm_protection = false;
10009d38:	707b      	strb	r3, [r7, #1]
		DBG_LOG("Pair Request - Authentication Failed");
10009d3a:	4b28      	ldr	r3, [pc, #160]	; (10009ddc <ble_pair_request_handler+0x12c>)
10009d3c:	4798      	blx	r3
10009d3e:	4828      	ldr	r0, [pc, #160]	; (10009de0 <ble_pair_request_handler+0x130>)
10009d40:	4b28      	ldr	r3, [pc, #160]	; (10009de4 <ble_pair_request_handler+0x134>)
10009d42:	4798      	blx	r3
		return AT_BLE_FAILURE;
10009d44:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
10009d46:	b007      	add	sp, #28
10009d48:	bc3c      	pop	{r2, r3, r4, r5}
10009d4a:	4690      	mov	r8, r2
10009d4c:	4699      	mov	r9, r3
10009d4e:	46a2      	mov	sl, r4
10009d50:	46ab      	mov	fp, r5
10009d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009d54:	0011      	movs	r1, r2
10009d56:	315e      	adds	r1, #94	; 0x5e
10009d58:	7809      	ldrb	r1, [r1, #0]
10009d5a:	2902      	cmp	r1, #2
10009d5c:	d1b9      	bne.n	10009cd2 <ble_pair_request_handler+0x22>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
10009d5e:	2203      	movs	r2, #3
10009d60:	015b      	lsls	r3, r3, #5
10009d62:	1b1b      	subs	r3, r3, r4
10009d64:	009b      	lsls	r3, r3, #2
10009d66:	4453      	add	r3, sl
10009d68:	335e      	adds	r3, #94	; 0x5e
10009d6a:	701a      	strb	r2, [r3, #0]
			break;
10009d6c:	e7b6      	b.n	10009cdc <ble_pair_request_handler+0x2c>
10009d6e:	4b1e      	ldr	r3, [pc, #120]	; (10009de8 <ble_pair_request_handler+0x138>)
10009d70:	0035      	movs	r5, r6
10009d72:	4699      	mov	r9, r3
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009d74:	230f      	movs	r3, #15
10009d76:	469b      	mov	fp, r3
10009d78:	9601      	str	r6, [sp, #4]
10009d7a:	3568      	adds	r5, #104	; 0x68
10009d7c:	3660      	adds	r6, #96	; 0x60
10009d7e:	4456      	add	r6, sl
10009d80:	4455      	add	r5, sl
10009d82:	47c8      	blx	r9
10009d84:	465b      	mov	r3, fp
10009d86:	4018      	ands	r0, r3
10009d88:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
10009d8a:	47c8      	blx	r9
10009d8c:	465b      	mov	r3, fp
10009d8e:	4018      	ands	r0, r3
10009d90:	74b0      	strb	r0, [r6, #18]
10009d92:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
10009d94:	42ae      	cmp	r6, r5
10009d96:	d1f4      	bne.n	10009d82 <ble_pair_request_handler+0xd2>
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
10009d98:	230f      	movs	r3, #15
10009d9a:	469b      	mov	fp, r3
10009d9c:	9e01      	ldr	r6, [sp, #4]
10009d9e:	3670      	adds	r6, #112	; 0x70
10009da0:	4456      	add	r6, sl
10009da2:	47c8      	blx	r9
10009da4:	465b      	mov	r3, fp
10009da6:	4018      	ands	r0, r3
10009da8:	7028      	strb	r0, [r5, #0]
10009daa:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
10009dac:	42b5      	cmp	r5, r6
10009dae:	d1f8      	bne.n	10009da2 <ble_pair_request_handler+0xf2>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
10009db0:	47c8      	blx	r9
10009db2:	4643      	mov	r3, r8
10009db4:	1b1b      	subs	r3, r3, r4
10009db6:	009b      	lsls	r3, r3, #2
10009db8:	4453      	add	r3, sl
10009dba:	001a      	movs	r2, r3
10009dbc:	3270      	adds	r2, #112	; 0x70
10009dbe:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
10009dc0:	2210      	movs	r2, #16
10009dc2:	337a      	adds	r3, #122	; 0x7a
10009dc4:	701a      	strb	r2, [r3, #0]
10009dc6:	e7a7      	b.n	10009d18 <ble_pair_request_handler+0x68>
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009dc8:	3302      	adds	r3, #2
10009dca:	71bb      	strb	r3, [r7, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
10009dcc:	71fb      	strb	r3, [r7, #7]
10009dce:	e798      	b.n	10009d02 <ble_pair_request_handler+0x52>
10009dd0:	10014e14 	.word	0x10014e14
10009dd4:	1000da19 	.word	0x1000da19
10009dd8:	100128bc 	.word	0x100128bc
10009ddc:	10011719 	.word	0x10011719
10009de0:	10012d94 	.word	0x10012d94
10009de4:	100115f9 	.word	0x100115f9
10009de8:	1001172d 	.word	0x1001172d

10009dec <ble_pair_key_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
10009dec:	b5f0      	push	{r4, r5, r6, r7, lr}
10009dee:	465f      	mov	r7, fp
10009df0:	4656      	mov	r6, sl
10009df2:	464d      	mov	r5, r9
10009df4:	4644      	mov	r4, r8
10009df6:	b4f0      	push	{r4, r5, r6, r7}
10009df8:	0007      	movs	r7, r0
10009dfa:	b087      	sub	sp, #28
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
10009dfc:	ac04      	add	r4, sp, #16
	return AT_BLE_SUCCESS;
}

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
10009dfe:	9001      	str	r0, [sp, #4]
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
10009e00:	2206      	movs	r2, #6
10009e02:	4940      	ldr	r1, [pc, #256]	; (10009f04 <ble_pair_key_request_handler+0x118>)
10009e04:	4e40      	ldr	r6, [pc, #256]	; (10009f08 <ble_pair_key_request_handler+0x11c>)
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
10009e06:	ad03      	add	r5, sp, #12
at_ble_status_t ble_pair_key_request_handler (void *params)
{
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
10009e08:	0020      	movs	r0, r4
10009e0a:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
10009e0c:	2204      	movs	r2, #4
10009e0e:	0039      	movs	r1, r7
10009e10:	0028      	movs	r0, r5
10009e12:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
10009e14:	78eb      	ldrb	r3, [r5, #3]
10009e16:	2b00      	cmp	r3, #0
10009e18:	d02e      	beq.n	10009e78 <ble_pair_key_request_handler+0x8c>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
10009e1a:	2380      	movs	r3, #128	; 0x80
10009e1c:	886a      	ldrh	r2, [r5, #2]
10009e1e:	005b      	lsls	r3, r3, #1
10009e20:	429a      	cmp	r2, r3
10009e22:	d00b      	beq.n	10009e3c <ble_pair_key_request_handler+0x50>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
10009e24:	78ab      	ldrb	r3, [r5, #2]
10009e26:	2b01      	cmp	r3, #1
10009e28:	d052      	beq.n	10009ed0 <ble_pair_key_request_handler+0xe4>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
10009e2a:	2400      	movs	r4, #0
}
10009e2c:	0020      	movs	r0, r4
10009e2e:	b007      	add	sp, #28
10009e30:	bc3c      	pop	{r2, r3, r4, r5}
10009e32:	4690      	mov	r8, r2
10009e34:	4699      	mov	r9, r3
10009e36:	46a2      	mov	sl, r4
10009e38:	46ab      	mov	fp, r5
10009e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
10009e3c:	4b33      	ldr	r3, [pc, #204]	; (10009f0c <ble_pair_key_request_handler+0x120>)
10009e3e:	0018      	movs	r0, r3
10009e40:	469a      	mov	sl, r3
10009e42:	4b33      	ldr	r3, [pc, #204]	; (10009f10 <ble_pair_key_request_handler+0x124>)
10009e44:	4699      	mov	r9, r3
10009e46:	4798      	blx	r3
10009e48:	4b32      	ldr	r3, [pc, #200]	; (10009f14 <ble_pair_key_request_handler+0x128>)
10009e4a:	4833      	ldr	r0, [pc, #204]	; (10009f18 <ble_pair_key_request_handler+0x12c>)
10009e4c:	4698      	mov	r8, r3
10009e4e:	4798      	blx	r3
10009e50:	4e32      	ldr	r6, [pc, #200]	; (10009f1c <ble_pair_key_request_handler+0x130>)
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
10009e52:	2700      	movs	r7, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
10009e54:	5de0      	ldrb	r0, [r4, r7]
10009e56:	3701      	adds	r7, #1
10009e58:	47b0      	blx	r6
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
10009e5a:	2f06      	cmp	r7, #6
10009e5c:	d1fa      	bne.n	10009e54 <ble_pair_key_request_handler+0x68>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
10009e5e:	9b01      	ldr	r3, [sp, #4]
10009e60:	78a9      	ldrb	r1, [r5, #2]
10009e62:	8818      	ldrh	r0, [r3, #0]
10009e64:	0022      	movs	r2, r4
10009e66:	4b2e      	ldr	r3, [pc, #184]	; (10009f20 <ble_pair_key_request_handler+0x134>)
10009e68:	4798      	blx	r3
10009e6a:	2800      	cmp	r0, #0
10009e6c:	d0dd      	beq.n	10009e2a <ble_pair_key_request_handler+0x3e>
          {
                  DBG_LOG("Pair-key reply failed");
10009e6e:	4650      	mov	r0, sl
10009e70:	47c8      	blx	r9
10009e72:	482c      	ldr	r0, [pc, #176]	; (10009f24 <ble_pair_key_request_handler+0x138>)
10009e74:	47c0      	blx	r8
10009e76:	e7d8      	b.n	10009e2a <ble_pair_key_request_handler+0x3e>
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
10009e78:	4b24      	ldr	r3, [pc, #144]	; (10009f0c <ble_pair_key_request_handler+0x120>)
10009e7a:	0018      	movs	r0, r3
10009e7c:	469a      	mov	sl, r3
10009e7e:	4b24      	ldr	r3, [pc, #144]	; (10009f10 <ble_pair_key_request_handler+0x124>)
10009e80:	4699      	mov	r9, r3
10009e82:	4798      	blx	r3
10009e84:	4b23      	ldr	r3, [pc, #140]	; (10009f14 <ble_pair_key_request_handler+0x128>)
10009e86:	4828      	ldr	r0, [pc, #160]	; (10009f28 <ble_pair_key_request_handler+0x13c>)
10009e88:	4698      	mov	r8, r3
10009e8a:	4798      	blx	r3
10009e8c:	2300      	movs	r3, #0
10009e8e:	4f27      	ldr	r7, [pc, #156]	; (10009f2c <ble_pair_key_request_handler+0x140>)
10009e90:	469b      	mov	fp, r3
10009e92:	e003      	b.n	10009e9c <ble_pair_key_request_handler+0xb0>
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
10009e94:	001a      	movs	r2, r3
10009e96:	3a30      	subs	r2, #48	; 0x30
10009e98:	2a09      	cmp	r2, #9
10009e9a:	d921      	bls.n	10009ee0 <ble_pair_key_request_handler+0xf4>
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
10009e9c:	201e      	movs	r0, #30
10009e9e:	47b8      	blx	r7
10009ea0:	b2c3      	uxtb	r3, r0

			if (!pin) {
10009ea2:	2b00      	cmp	r3, #0
10009ea4:	d1f6      	bne.n	10009e94 <ble_pair_key_request_handler+0xa8>
			DBG_LOG("Pin Timeout");
10009ea6:	4650      	mov	r0, sl
10009ea8:	47c8      	blx	r9
10009eaa:	4821      	ldr	r0, [pc, #132]	; (10009f30 <ble_pair_key_request_handler+0x144>)
10009eac:	47c0      	blx	r8
				DBG_LOG("Disconnecting ...");
10009eae:	4650      	mov	r0, sl
10009eb0:	47c8      	blx	r9
10009eb2:	4820      	ldr	r0, [pc, #128]	; (10009f34 <ble_pair_key_request_handler+0x148>)
10009eb4:	47c0      	blx	r8
				if (!(at_ble_disconnect(pair_key->handle,
10009eb6:	9b01      	ldr	r3, [sp, #4]
10009eb8:	2113      	movs	r1, #19
10009eba:	8818      	ldrh	r0, [r3, #0]
10009ebc:	4b1e      	ldr	r3, [pc, #120]	; (10009f38 <ble_pair_key_request_handler+0x14c>)
10009ebe:	4798      	blx	r3
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
10009ec0:	24e2      	movs	r4, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
10009ec2:	2800      	cmp	r0, #0
10009ec4:	d0b2      	beq.n	10009e2c <ble_pair_key_request_handler+0x40>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
10009ec6:	4650      	mov	r0, sl
10009ec8:	47c8      	blx	r9
10009eca:	481c      	ldr	r0, [pc, #112]	; (10009f3c <ble_pair_key_request_handler+0x150>)
10009ecc:	47c0      	blx	r8
10009ece:	e7ad      	b.n	10009e2c <ble_pair_key_request_handler+0x40>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
10009ed0:	4b0f      	ldr	r3, [pc, #60]	; (10009f10 <ble_pair_key_request_handler+0x124>)
10009ed2:	480e      	ldr	r0, [pc, #56]	; (10009f0c <ble_pair_key_request_handler+0x120>)
10009ed4:	4798      	blx	r3
10009ed6:	481a      	ldr	r0, [pc, #104]	; (10009f40 <ble_pair_key_request_handler+0x154>)
10009ed8:	4b0e      	ldr	r3, [pc, #56]	; (10009f14 <ble_pair_key_request_handler+0x128>)
10009eda:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
10009edc:	2400      	movs	r4, #0
10009ede:	e7a5      	b.n	10009e2c <ble_pair_key_request_handler+0x40>
				}
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
10009ee0:	465a      	mov	r2, fp
10009ee2:	54a3      	strb	r3, [r4, r2]
			  DBG_LOG_CONT("%c", pin);
10009ee4:	23ff      	movs	r3, #255	; 0xff
10009ee6:	4e0d      	ldr	r6, [pc, #52]	; (10009f1c <ble_pair_key_request_handler+0x130>)
10009ee8:	4018      	ands	r0, r3
10009eea:	47b0      	blx	r6
10009eec:	2301      	movs	r3, #1
10009eee:	469c      	mov	ip, r3
10009ef0:	44e3      	add	fp, ip
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
10009ef2:	465b      	mov	r3, fp
10009ef4:	2b06      	cmp	r3, #6
10009ef6:	d1d1      	bne.n	10009e9c <ble_pair_key_request_handler+0xb0>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
10009ef8:	4650      	mov	r0, sl
10009efa:	47c8      	blx	r9
10009efc:	4811      	ldr	r0, [pc, #68]	; (10009f44 <ble_pair_key_request_handler+0x158>)
10009efe:	47c0      	blx	r8
10009f00:	e7a7      	b.n	10009e52 <ble_pair_key_request_handler+0x66>
10009f02:	46c0      	nop			; (mov r8, r8)
10009f04:	10012c44 	.word	0x10012c44
10009f08:	1001149f 	.word	0x1001149f
10009f0c:	100128bc 	.word	0x100128bc
10009f10:	10011719 	.word	0x10011719
10009f14:	100115f9 	.word	0x100115f9
10009f18:	10012e04 	.word	0x10012e04
10009f1c:	1001162d 	.word	0x1001162d
10009f20:	1000db49 	.word	0x1000db49
10009f24:	10012e3c 	.word	0x10012e3c
10009f28:	10012dbc 	.word	0x10012dbc
10009f2c:	1000aa51 	.word	0x1000aa51
10009f30:	10012de4 	.word	0x10012de4
10009f34:	10012df0 	.word	0x10012df0
10009f38:	1000d6ad 	.word	0x1000d6ad
10009f3c:	10012cd8 	.word	0x10012cd8
10009f40:	10012e54 	.word	0x10012e54
10009f44:	10012e70 	.word	0x10012e70

10009f48 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
10009f48:	b5f0      	push	{r4, r5, r6, r7, lr}
10009f4a:	4647      	mov	r7, r8
10009f4c:	4e29      	ldr	r6, [pc, #164]	; (10009ff4 <ble_encryption_request_handler+0xac>)
10009f4e:	b480      	push	{r7}
10009f50:	0031      	movs	r1, r6
10009f52:	0007      	movs	r7, r0
10009f54:	2200      	movs	r2, #0
10009f56:	8805      	ldrh	r5, [r0, #0]
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
10009f58:	8908      	ldrh	r0, [r1, #8]
10009f5a:	0014      	movs	r4, r2
10009f5c:	42a8      	cmp	r0, r5
10009f5e:	d01c      	beq.n	10009f9a <ble_encryption_request_handler+0x52>
10009f60:	3201      	adds	r2, #1
10009f62:	317c      	adds	r1, #124	; 0x7c
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009f64:	2a05      	cmp	r2, #5
10009f66:	d1f7      	bne.n	10009f58 <ble_encryption_request_handler+0x10>
10009f68:	2405      	movs	r4, #5
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
10009f6a:	4b23      	ldr	r3, [pc, #140]	; (10009ff8 <ble_encryption_request_handler+0xb0>)
10009f6c:	4f23      	ldr	r7, [pc, #140]	; (10009ffc <ble_encryption_request_handler+0xb4>)
10009f6e:	4698      	mov	r8, r3
10009f70:	0018      	movs	r0, r3
10009f72:	47b8      	blx	r7
10009f74:	4d22      	ldr	r5, [pc, #136]	; (1000a000 <ble_encryption_request_handler+0xb8>)
10009f76:	4823      	ldr	r0, [pc, #140]	; (1000a004 <ble_encryption_request_handler+0xbc>)
10009f78:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
10009f7a:	4640      	mov	r0, r8
10009f7c:	47b8      	blx	r7
10009f7e:	4822      	ldr	r0, [pc, #136]	; (1000a008 <ble_encryption_request_handler+0xc0>)
10009f80:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
10009f82:	0163      	lsls	r3, r4, #5
10009f84:	1b1b      	subs	r3, r3, r4
10009f86:	009b      	lsls	r3, r3, #2
10009f88:	18f3      	adds	r3, r6, r3
10009f8a:	8918      	ldrh	r0, [r3, #8]
10009f8c:	2105      	movs	r1, #5
10009f8e:	4b1f      	ldr	r3, [pc, #124]	; (1000a00c <ble_encryption_request_handler+0xc4>)
10009f90:	4798      	blx	r3
		return AT_BLE_FAILURE;
10009f92:	20e2      	movs	r0, #226	; 0xe2
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
}
10009f94:	bc04      	pop	{r2}
10009f96:	4690      	mov	r8, r2
10009f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
10009f9a:	000b      	movs	r3, r1
10009f9c:	335e      	adds	r3, #94	; 0x5e
10009f9e:	781b      	ldrb	r3, [r3, #0]
10009fa0:	2b01      	cmp	r3, #1
10009fa2:	d9dd      	bls.n	10009f60 <ble_encryption_request_handler+0x18>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
10009fa4:	0155      	lsls	r5, r2, #5
10009fa6:	1aad      	subs	r5, r5, r2
10009fa8:	2206      	movs	r2, #6
10009faa:	00ad      	lsls	r5, r5, #2
10009fac:	1973      	adds	r3, r6, r5
10009fae:	4698      	mov	r8, r3
10009fb0:	335e      	adds	r3, #94	; 0x5e
10009fb2:	701a      	strb	r2, [r3, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
10009fb4:	8a5a      	ldrh	r2, [r3, #18]
10009fb6:	887b      	ldrh	r3, [r7, #2]
10009fb8:	429a      	cmp	r2, r3
10009fba:	d1d6      	bne.n	10009f6a <ble_encryption_request_handler+0x22>
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
10009fbc:	1971      	adds	r1, r6, r5
10009fbe:	3172      	adds	r1, #114	; 0x72
10009fc0:	1d38      	adds	r0, r7, #4
10009fc2:	2208      	movs	r2, #8
10009fc4:	4b12      	ldr	r3, [pc, #72]	; (1000a010 <ble_encryption_request_handler+0xc8>)
10009fc6:	4798      	blx	r3
10009fc8:	2800      	cmp	r0, #0
10009fca:	d1ce      	bne.n	10009f6a <ble_encryption_request_handler+0x22>
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
10009fcc:	002b      	movs	r3, r5
10009fce:	4642      	mov	r2, r8
10009fd0:	3360      	adds	r3, #96	; 0x60
10009fd2:	7d11      	ldrb	r1, [r2, #20]
10009fd4:	199b      	adds	r3, r3, r6
10009fd6:	8838      	ldrh	r0, [r7, #0]
10009fd8:	2201      	movs	r2, #1
10009fda:	4c0e      	ldr	r4, [pc, #56]	; (1000a014 <ble_encryption_request_handler+0xcc>)
10009fdc:	47a0      	blx	r4
10009fde:	2800      	cmp	r0, #0
10009fe0:	d0d8      	beq.n	10009f94 <ble_encryption_request_handler+0x4c>
	{
		DBG_LOG("Encryption Request Reply Failed");
10009fe2:	4b06      	ldr	r3, [pc, #24]	; (10009ffc <ble_encryption_request_handler+0xb4>)
10009fe4:	4804      	ldr	r0, [pc, #16]	; (10009ff8 <ble_encryption_request_handler+0xb0>)
10009fe6:	4798      	blx	r3
10009fe8:	480b      	ldr	r0, [pc, #44]	; (1000a018 <ble_encryption_request_handler+0xd0>)
10009fea:	4b05      	ldr	r3, [pc, #20]	; (1000a000 <ble_encryption_request_handler+0xb8>)
10009fec:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
10009fee:	2000      	movs	r0, #0
10009ff0:	e7d0      	b.n	10009f94 <ble_encryption_request_handler+0x4c>
10009ff2:	46c0      	nop			; (mov r8, r8)
10009ff4:	10014e14 	.word	0x10014e14
10009ff8:	100128bc 	.word	0x100128bc
10009ffc:	10011719 	.word	0x10011719
1000a000:	100115f9 	.word	0x100115f9
1000a004:	10012e84 	.word	0x10012e84
1000a008:	10012ebc 	.word	0x10012ebc
1000a00c:	1000d6ad 	.word	0x1000d6ad
1000a010:	10011481 	.word	0x10011481
1000a014:	1000dc7d 	.word	0x1000dc7d
1000a018:	10012f14 	.word	0x10012f14

1000a01c <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000a01c:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000a01e:	7800      	ldrb	r0, [r0, #0]
1000a020:	2800      	cmp	r0, #0
1000a022:	d006      	beq.n	1000a032 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000a024:	4b03      	ldr	r3, [pc, #12]	; (1000a034 <ble_scan_report_handler+0x18>)
1000a026:	4804      	ldr	r0, [pc, #16]	; (1000a038 <ble_scan_report_handler+0x1c>)
1000a028:	4798      	blx	r3
1000a02a:	4804      	ldr	r0, [pc, #16]	; (1000a03c <ble_scan_report_handler+0x20>)
1000a02c:	4b04      	ldr	r3, [pc, #16]	; (1000a040 <ble_scan_report_handler+0x24>)
1000a02e:	4798      	blx	r3
1000a030:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_FAILURE;
}
1000a032:	bd10      	pop	{r4, pc}
1000a034:	10011719 	.word	0x10011719
1000a038:	100128bc 	.word	0x100128bc
1000a03c:	10012f34 	.word	0x10012f34
1000a040:	100115f9 	.word	0x100115f9

1000a044 <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000a044:	b510      	push	{r4, lr}
1000a046:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000a048:	78c0      	ldrb	r0, [r0, #3]
1000a04a:	2800      	cmp	r0, #0
1000a04c:	d008      	beq.n	1000a060 <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000a04e:	4b05      	ldr	r3, [pc, #20]	; (1000a064 <ble_mtu_changed_cmd_complete_handler+0x20>)
1000a050:	4805      	ldr	r0, [pc, #20]	; (1000a068 <ble_mtu_changed_cmd_complete_handler+0x24>)
1000a052:	4798      	blx	r3
1000a054:	78a2      	ldrb	r2, [r4, #2]
1000a056:	8821      	ldrh	r1, [r4, #0]
1000a058:	4804      	ldr	r0, [pc, #16]	; (1000a06c <ble_mtu_changed_cmd_complete_handler+0x28>)
1000a05a:	4b05      	ldr	r3, [pc, #20]	; (1000a070 <ble_mtu_changed_cmd_complete_handler+0x2c>)
1000a05c:	4798      	blx	r3
1000a05e:	20e2      	movs	r0, #226	; 0xe2
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
}
1000a060:	bd10      	pop	{r4, pc}
1000a062:	46c0      	nop			; (mov r8, r8)
1000a064:	10011719 	.word	0x10011719
1000a068:	100128bc 	.word	0x100128bc
1000a06c:	10012f48 	.word	0x10012f48
1000a070:	100115f9 	.word	0x100115f9

1000a074 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000a074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a076:	4d25      	ldr	r5, [pc, #148]	; (1000a10c <ble_encryption_status_change_handler+0x98>)
1000a078:	2400      	movs	r4, #0
1000a07a:	002b      	movs	r3, r5
1000a07c:	0007      	movs	r7, r0
1000a07e:	8800      	ldrh	r0, [r0, #0]
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000a080:	891a      	ldrh	r2, [r3, #8]
1000a082:	0021      	movs	r1, r4
1000a084:	4282      	cmp	r2, r0
1000a086:	d018      	beq.n	1000a0ba <ble_encryption_status_change_handler+0x46>
1000a088:	3401      	adds	r4, #1
1000a08a:	337c      	adds	r3, #124	; 0x7c
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a08c:	2c05      	cmp	r4, #5
1000a08e:	d1f7      	bne.n	1000a080 <ble_encryption_status_change_handler+0xc>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000a090:	78be      	ldrb	r6, [r7, #2]
1000a092:	2e00      	cmp	r6, #0
1000a094:	d02c      	beq.n	1000a0f0 <ble_encryption_status_change_handler+0x7c>
1000a096:	2105      	movs	r1, #5
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000a098:	014b      	lsls	r3, r1, #5
1000a09a:	1a5c      	subs	r4, r3, r1
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000a09c:	2307      	movs	r3, #7
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000a09e:	00a4      	lsls	r4, r4, #2
1000a0a0:	192c      	adds	r4, r5, r4
1000a0a2:	7626      	strb	r6, [r4, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000a0a4:	345e      	adds	r4, #94	; 0x5e
1000a0a6:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000a0a8:	4819      	ldr	r0, [pc, #100]	; (1000a110 <ble_encryption_status_change_handler+0x9c>)
1000a0aa:	4b1a      	ldr	r3, [pc, #104]	; (1000a114 <ble_encryption_status_change_handler+0xa0>)
1000a0ac:	4798      	blx	r3
1000a0ae:	481a      	ldr	r0, [pc, #104]	; (1000a118 <ble_encryption_status_change_handler+0xa4>)
1000a0b0:	4b1a      	ldr	r3, [pc, #104]	; (1000a11c <ble_encryption_status_change_handler+0xa8>)
1000a0b2:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a0b4:	26e2      	movs	r6, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000a0b6:	0030      	movs	r0, r6
1000a0b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000a0ba:	001a      	movs	r2, r3
1000a0bc:	325e      	adds	r2, #94	; 0x5e
1000a0be:	7812      	ldrb	r2, [r2, #0]
1000a0c0:	2a06      	cmp	r2, #6
1000a0c2:	d1e1      	bne.n	1000a088 <ble_encryption_status_change_handler+0x14>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000a0c4:	78be      	ldrb	r6, [r7, #2]
1000a0c6:	2e00      	cmp	r6, #0
1000a0c8:	d1e6      	bne.n	1000a098 <ble_encryption_status_change_handler+0x24>
	{
		DBG_LOG("Encryption completed successfully");
1000a0ca:	4b12      	ldr	r3, [pc, #72]	; (1000a114 <ble_encryption_status_change_handler+0xa0>)
1000a0cc:	4810      	ldr	r0, [pc, #64]	; (1000a110 <ble_encryption_status_change_handler+0x9c>)
1000a0ce:	4798      	blx	r3
1000a0d0:	4b12      	ldr	r3, [pc, #72]	; (1000a11c <ble_encryption_status_change_handler+0xa8>)
1000a0d2:	4813      	ldr	r0, [pc, #76]	; (1000a120 <ble_encryption_status_change_handler+0xac>)
1000a0d4:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000a0d6:	0163      	lsls	r3, r4, #5
1000a0d8:	1b1c      	subs	r4, r3, r4
1000a0da:	00a4      	lsls	r4, r4, #2
1000a0dc:	192c      	adds	r4, r5, r4
1000a0de:	0023      	movs	r3, r4
1000a0e0:	2208      	movs	r2, #8
1000a0e2:	335e      	adds	r3, #94	; 0x5e
1000a0e4:	701a      	strb	r2, [r3, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000a0e6:	78fb      	ldrb	r3, [r7, #3]
1000a0e8:	7523      	strb	r3, [r4, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000a0ea:	78bb      	ldrb	r3, [r7, #2]
1000a0ec:	7623      	strb	r3, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000a0ee:	e7e2      	b.n	1000a0b6 <ble_encryption_status_change_handler+0x42>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000a0f0:	4e07      	ldr	r6, [pc, #28]	; (1000a110 <ble_encryption_status_change_handler+0x9c>)
1000a0f2:	4d08      	ldr	r5, [pc, #32]	; (1000a114 <ble_encryption_status_change_handler+0xa0>)
1000a0f4:	0030      	movs	r0, r6
1000a0f6:	47a8      	blx	r5
1000a0f8:	4c08      	ldr	r4, [pc, #32]	; (1000a11c <ble_encryption_status_change_handler+0xa8>)
1000a0fa:	4809      	ldr	r0, [pc, #36]	; (1000a120 <ble_encryption_status_change_handler+0xac>)
1000a0fc:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000a0fe:	0030      	movs	r0, r6
1000a100:	47a8      	blx	r5
1000a102:	4808      	ldr	r0, [pc, #32]	; (1000a124 <ble_encryption_status_change_handler+0xb0>)
1000a104:	47a0      	blx	r4
1000a106:	26e2      	movs	r6, #226	; 0xe2
1000a108:	e7d5      	b.n	1000a0b6 <ble_encryption_status_change_handler+0x42>
1000a10a:	46c0      	nop			; (mov r8, r8)
1000a10c:	10014e14 	.word	0x10014e14
1000a110:	100128bc 	.word	0x100128bc
1000a114:	10011719 	.word	0x10011719
1000a118:	10012f80 	.word	0x10012f80
1000a11c:	100115f9 	.word	0x100115f9
1000a120:	10012f94 	.word	0x10012f94
1000a124:	10012fb8 	.word	0x10012fb8

1000a128 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000a128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000a12a:	4c15      	ldr	r4, [pc, #84]	; (1000a180 <ble_scan_info_handler+0x58>)
1000a12c:	7823      	ldrb	r3, [r4, #0]
1000a12e:	2b13      	cmp	r3, #19
1000a130:	d90d      	bls.n	1000a14e <ble_scan_info_handler+0x26>
		scan_response_count++;
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000a132:	4f14      	ldr	r7, [pc, #80]	; (1000a184 <ble_scan_info_handler+0x5c>)
1000a134:	4e14      	ldr	r6, [pc, #80]	; (1000a188 <ble_scan_info_handler+0x60>)
1000a136:	0038      	movs	r0, r7
1000a138:	47b0      	blx	r6
1000a13a:	4814      	ldr	r0, [pc, #80]	; (1000a18c <ble_scan_info_handler+0x64>)
1000a13c:	4d14      	ldr	r5, [pc, #80]	; (1000a190 <ble_scan_info_handler+0x68>)
1000a13e:	47a8      	blx	r5
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000a140:	4b14      	ldr	r3, [pc, #80]	; (1000a194 <ble_scan_info_handler+0x6c>)
1000a142:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000a144:	24e2      	movs	r4, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000a146:	2800      	cmp	r0, #0
1000a148:	d115      	bne.n	1000a176 <ble_scan_info_handler+0x4e>
		}
	
		#endif
		return AT_BLE_FAILURE;
	}
}
1000a14a:	0020      	movs	r0, r4
1000a14c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000a14e:	7823      	ldrb	r3, [r4, #0]
1000a150:	0001      	movs	r1, r0
1000a152:	b2db      	uxtb	r3, r3
1000a154:	009a      	lsls	r2, r3, #2
1000a156:	18d2      	adds	r2, r2, r3
1000a158:	00d2      	lsls	r2, r2, #3
1000a15a:	18d3      	adds	r3, r2, r3
1000a15c:	4a0e      	ldr	r2, [pc, #56]	; (1000a198 <ble_scan_info_handler+0x70>)
1000a15e:	189b      	adds	r3, r3, r2
1000a160:	0018      	movs	r0, r3
1000a162:	2229      	movs	r2, #41	; 0x29
1000a164:	4b0d      	ldr	r3, [pc, #52]	; (1000a19c <ble_scan_info_handler+0x74>)
1000a166:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000a168:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000a16a:	7823      	ldrb	r3, [r4, #0]
1000a16c:	3301      	adds	r3, #1
1000a16e:	b2db      	uxtb	r3, r3
1000a170:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
1000a172:	2400      	movs	r4, #0
1000a174:	e7e9      	b.n	1000a14a <ble_scan_info_handler+0x22>
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
		{
			DBG_LOG("Failed to stop scanning");
1000a176:	0038      	movs	r0, r7
1000a178:	47b0      	blx	r6
1000a17a:	4809      	ldr	r0, [pc, #36]	; (1000a1a0 <ble_scan_info_handler+0x78>)
1000a17c:	47a8      	blx	r5
1000a17e:	e7e4      	b.n	1000a14a <ble_scan_info_handler+0x22>
1000a180:	10014c08 	.word	0x10014c08
1000a184:	100128bc 	.word	0x100128bc
1000a188:	10011719 	.word	0x10011719
1000a18c:	10012fe0 	.word	0x10012fe0
1000a190:	100115f9 	.word	0x100115f9
1000a194:	1000d68d 	.word	0x1000d68d
1000a198:	100150f8 	.word	0x100150f8
1000a19c:	1001149f 	.word	0x1001149f
1000a1a0:	10013018 	.word	0x10013018

1000a1a4 <ble_mtu_changed_indication_handler>:
1000a1a4:	2000      	movs	r0, #0
1000a1a6:	4770      	bx	lr

1000a1a8 <ble_undefined_event_handler>:
1000a1a8:	2000      	movs	r0, #0
1000a1aa:	4770      	bx	lr

1000a1ac <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000a1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a1ae:	465f      	mov	r7, fp
1000a1b0:	4656      	mov	r6, sl
1000a1b2:	464d      	mov	r5, r9
1000a1b4:	4644      	mov	r4, r8
1000a1b6:	b4f0      	push	{r4, r5, r6, r7}
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000a1b8:	2700      	movs	r7, #0
1000a1ba:	4b82      	ldr	r3, [pc, #520]	; (1000a3c4 <ble_device_init+0x218>)
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000a1bc:	b091      	sub	sp, #68	; 0x44
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000a1be:	601f      	str	r7, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a1c0:	2207      	movs	r2, #7
1000a1c2:	2100      	movs	r1, #0
1000a1c4:	4b80      	ldr	r3, [pc, #512]	; (1000a3c8 <ble_device_init+0x21c>)
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000a1c6:	0006      	movs	r6, r0

static void init_global_var(void)
{
	ble_user_event_cb = 0;
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a1c8:	4880      	ldr	r0, [pc, #512]	; (1000a3cc <ble_device_init+0x220>)
1000a1ca:	4798      	blx	r3
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000a1cc:	2212      	movs	r2, #18
1000a1ce:	2100      	movs	r1, #0
1000a1d0:	4b7d      	ldr	r3, [pc, #500]	; (1000a3c8 <ble_device_init+0x21c>)
1000a1d2:	487f      	ldr	r0, [pc, #508]	; (1000a3d0 <ble_device_init+0x224>)
1000a1d4:	4798      	blx	r3
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
#endif

	scan_response_count = 0;
	memset(scan_info, 0, sizeof(scan_info));
1000a1d6:	22cd      	movs	r2, #205	; 0xcd
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
#endif

	scan_response_count = 0;
1000a1d8:	4b7e      	ldr	r3, [pc, #504]	; (1000a3d4 <ble_device_init+0x228>)
	memset(scan_info, 0, sizeof(scan_info));
1000a1da:	0092      	lsls	r2, r2, #2
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
#endif

	scan_response_count = 0;
1000a1dc:	701f      	strb	r7, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000a1de:	2100      	movs	r1, #0
1000a1e0:	4b79      	ldr	r3, [pc, #484]	; (1000a3c8 <ble_device_init+0x21c>)
1000a1e2:	487d      	ldr	r0, [pc, #500]	; (1000a3d8 <ble_device_init+0x22c>)
1000a1e4:	4798      	blx	r3

	event = AT_BLE_UNDEFINED_EVENT;
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000a1e6:	2283      	movs	r2, #131	; 0x83
#endif

	scan_response_count = 0;
	memset(scan_info, 0, sizeof(scan_info));

	event = AT_BLE_UNDEFINED_EVENT;
1000a1e8:	4b7c      	ldr	r3, [pc, #496]	; (1000a3dc <ble_device_init+0x230>)
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000a1ea:	0092      	lsls	r2, r2, #2
#endif

	scan_response_count = 0;
	memset(scan_info, 0, sizeof(scan_info));

	event = AT_BLE_UNDEFINED_EVENT;
1000a1ec:	701f      	strb	r7, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000a1ee:	2100      	movs	r1, #0
1000a1f0:	4b75      	ldr	r3, [pc, #468]	; (1000a3c8 <ble_device_init+0x21c>)
1000a1f2:	487b      	ldr	r0, [pc, #492]	; (1000a3e0 <ble_device_init+0x234>)
1000a1f4:	4798      	blx	r3
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000a1f6:	4b7b      	ldr	r3, [pc, #492]	; (1000a3e4 <ble_device_init+0x238>)
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000a1f8:	2480      	movs	r4, #128	; 0x80
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000a1fa:	469a      	mov	sl, r3
1000a1fc:	2380      	movs	r3, #128	; 0x80
1000a1fe:	00db      	lsls	r3, r3, #3
1000a200:	4699      	mov	r9, r3
1000a202:	001a      	movs	r2, r3
1000a204:	2100      	movs	r1, #0
1000a206:	4650      	mov	r0, sl
1000a208:	4b6f      	ldr	r3, [pc, #444]	; (1000a3c8 <ble_device_init+0x21c>)
1000a20a:	4798      	blx	r3
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000a20c:	4d76      	ldr	r5, [pc, #472]	; (1000a3e8 <ble_device_init+0x23c>)
1000a20e:	0164      	lsls	r4, r4, #5
1000a210:	0022      	movs	r2, r4
1000a212:	2100      	movs	r1, #0
1000a214:	0028      	movs	r0, r5
1000a216:	4b6c      	ldr	r3, [pc, #432]	; (1000a3c8 <ble_device_init+0x21c>)
1000a218:	4798      	blx	r3

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000a21a:	4b74      	ldr	r3, [pc, #464]	; (1000a3ec <ble_device_init+0x240>)
1000a21c:	221c      	movs	r2, #28
1000a21e:	469b      	mov	fp, r3
1000a220:	0018      	movs	r0, r3
1000a222:	2100      	movs	r1, #0
1000a224:	4b68      	ldr	r3, [pc, #416]	; (1000a3c8 <ble_device_init+0x21c>)
1000a226:	4798      	blx	r3

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000a228:	465b      	mov	r3, fp
1000a22a:	4652      	mov	r2, sl
1000a22c:	609a      	str	r2, [r3, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000a22e:	464a      	mov	r2, r9
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000a230:	611d      	str	r5, [r3, #16]
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));

	memset(&pf_cfg, 0, sizeof(pf_cfg));

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000a232:	60da      	str	r2, [r3, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000a234:	615c      	str	r4, [r3, #20]
		ble_mgr_gap_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000a236:	4b6e      	ldr	r3, [pc, #440]	; (1000a3f0 <ble_device_init+0x244>)
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000a238:	4d6e      	ldr	r5, [pc, #440]	; (1000a3f4 <ble_device_init+0x248>)
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000a23a:	601f      	str	r7, [r3, #0]
1000a23c:	605f      	str	r7, [r3, #4]
1000a23e:	609f      	str	r7, [r3, #8]
1000a240:	60df      	str	r7, [r3, #12]
1000a242:	611f      	str	r7, [r3, #16]
		ble_mgr_gatt_server_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000a244:	4b6c      	ldr	r3, [pc, #432]	; (1000a3f8 <ble_device_init+0x24c>)
		ble_mgr_gatt_client_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000a246:	4c6d      	ldr	r4, [pc, #436]	; (1000a3fc <ble_device_init+0x250>)
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000a248:	601f      	str	r7, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000a24a:	4b6d      	ldr	r3, [pc, #436]	; (1000a400 <ble_device_init+0x254>)
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000a24c:	602f      	str	r7, [r5, #0]
		ble_mgr_l2cap_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000a24e:	601f      	str	r7, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000a250:	4b6c      	ldr	r3, [pc, #432]	; (1000a404 <ble_device_init+0x258>)
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000a252:	606f      	str	r7, [r5, #4]
1000a254:	60af      	str	r7, [r5, #8]
1000a256:	60ef      	str	r7, [r5, #12]
1000a258:	612f      	str	r7, [r5, #16]
		ble_mgr_gatt_client_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000a25a:	6027      	str	r7, [r4, #0]
1000a25c:	6067      	str	r7, [r4, #4]
1000a25e:	60a7      	str	r7, [r4, #8]
1000a260:	60e7      	str	r7, [r4, #12]
1000a262:	6127      	str	r7, [r4, #16]
		ble_mgr_htpt_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000a264:	601f      	str	r7, [r3, #0]
1000a266:	605f      	str	r7, [r3, #4]
1000a268:	609f      	str	r7, [r3, #8]
1000a26a:	60df      	str	r7, [r3, #12]
1000a26c:	611f      	str	r7, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000a26e:	4b66      	ldr	r3, [pc, #408]	; (1000a408 <ble_device_init+0x25c>)
1000a270:	601f      	str	r7, [r3, #0]
1000a272:	4b66      	ldr	r3, [pc, #408]	; (1000a40c <ble_device_init+0x260>)
1000a274:	4698      	mov	r8, r3
1000a276:	239b      	movs	r3, #155	; 0x9b
1000a278:	009b      	lsls	r3, r3, #2
1000a27a:	4443      	add	r3, r8
1000a27c:	469a      	mov	sl, r3
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000a27e:	2340      	movs	r3, #64	; 0x40
1000a280:	4699      	mov	r9, r3
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000a282:	227c      	movs	r2, #124	; 0x7c
1000a284:	2100      	movs	r1, #0
1000a286:	4640      	mov	r0, r8
1000a288:	4b4f      	ldr	r3, [pc, #316]	; (1000a3c8 <ble_device_init+0x21c>)
1000a28a:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000a28c:	4642      	mov	r2, r8
1000a28e:	2300      	movs	r3, #0
1000a290:	325e      	adds	r2, #94	; 0x5e
1000a292:	7013      	strb	r3, [r2, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000a294:	4649      	mov	r1, r9
1000a296:	4642      	mov	r2, r8
1000a298:	7611      	strb	r1, [r2, #24]
1000a29a:	227c      	movs	r2, #124	; 0x7c
1000a29c:	4694      	mov	ip, r2
1000a29e:	44e0      	add	r8, ip
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a2a0:	45d0      	cmp	r8, sl
1000a2a2:	d1ee      	bne.n	1000a282 <ble_device_init+0xd6>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000a2a4:	4a5a      	ldr	r2, [pc, #360]	; (1000a410 <ble_device_init+0x264>)
1000a2a6:	7013      	strb	r3, [r2, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing SAMB11");
1000a2a8:	4b5a      	ldr	r3, [pc, #360]	; (1000a414 <ble_device_init+0x268>)
1000a2aa:	0018      	movs	r0, r3
1000a2ac:	469a      	mov	sl, r3
1000a2ae:	4b5a      	ldr	r3, [pc, #360]	; (1000a418 <ble_device_init+0x26c>)
1000a2b0:	4699      	mov	r9, r3
1000a2b2:	4798      	blx	r3
1000a2b4:	4b59      	ldr	r3, [pc, #356]	; (1000a41c <ble_device_init+0x270>)
1000a2b6:	485a      	ldr	r0, [pc, #360]	; (1000a420 <ble_device_init+0x274>)
1000a2b8:	4698      	mov	r8, r3
1000a2ba:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000a2bc:	4658      	mov	r0, fp
1000a2be:	4b59      	ldr	r3, [pc, #356]	; (1000a424 <ble_device_init+0x278>)
1000a2c0:	4798      	blx	r3
1000a2c2:	2800      	cmp	r0, #0
1000a2c4:	d15e      	bne.n	1000a384 <ble_device_init+0x1d8>
1000a2c6:	002b      	movs	r3, r5
1000a2c8:	3314      	adds	r3, #20
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000a2ca:	682a      	ldr	r2, [r5, #0]
1000a2cc:	2a00      	cmp	r2, #0
1000a2ce:	d062      	beq.n	1000a396 <ble_device_init+0x1ea>
1000a2d0:	3504      	adds	r5, #4
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000a2d2:	429d      	cmp	r5, r3
1000a2d4:	d1f9      	bne.n	1000a2ca <ble_device_init+0x11e>
1000a2d6:	0023      	movs	r3, r4
1000a2d8:	3314      	adds	r3, #20
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000a2da:	6822      	ldr	r2, [r4, #0]
1000a2dc:	2a00      	cmp	r2, #0
1000a2de:	d06d      	beq.n	1000a3bc <ble_device_init+0x210>
1000a2e0:	3404      	adds	r4, #4
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000a2e2:	42a3      	cmp	r3, r4
1000a2e4:	d1f9      	bne.n	1000a2da <ble_device_init+0x12e>
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000a2e6:	2109      	movs	r1, #9
1000a2e8:	484f      	ldr	r0, [pc, #316]	; (1000a428 <ble_device_init+0x27c>)
1000a2ea:	4b50      	ldr	r3, [pc, #320]	; (1000a42c <ble_device_init+0x280>)
1000a2ec:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000a2ee:	2800      	cmp	r0, #0
1000a2f0:	d003      	beq.n	1000a2fa <ble_device_init+0x14e>
	{
		DBG_LOG("Device name set failed");
1000a2f2:	4650      	mov	r0, sl
1000a2f4:	47c8      	blx	r9
1000a2f6:	484e      	ldr	r0, [pc, #312]	; (1000a430 <ble_device_init+0x284>)
1000a2f8:	47c0      	blx	r8

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000a2fa:	494e      	ldr	r1, [pc, #312]	; (1000a434 <ble_device_init+0x288>)
1000a2fc:	2207      	movs	r2, #7
1000a2fe:	3108      	adds	r1, #8
1000a300:	a804      	add	r0, sp, #16
1000a302:	4d4d      	ldr	r5, [pc, #308]	; (1000a438 <ble_device_init+0x28c>)
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000a304:	ac06      	add	r4, sp, #24

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000a306:	47a8      	blx	r5
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000a308:	2226      	movs	r2, #38	; 0x26
1000a30a:	2100      	movs	r1, #0
1000a30c:	0020      	movs	r0, r4
1000a30e:	4b2e      	ldr	r3, [pc, #184]	; (1000a3c8 <ble_device_init+0x21c>)
1000a310:	4798      	blx	r3
	
	if (addr == NULL)
1000a312:	2e00      	cmp	r6, #0
1000a314:	d047      	beq.n	1000a3a6 <ble_device_init+0x1fa>
		
		/* Copy the BD address into address pointer */
		addr = &address;
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000a316:	4650      	mov	r0, sl
1000a318:	47c8      	blx	r9
1000a31a:	7830      	ldrb	r0, [r6, #0]
1000a31c:	7933      	ldrb	r3, [r6, #4]
1000a31e:	7972      	ldrb	r2, [r6, #5]
1000a320:	79b1      	ldrb	r1, [r6, #6]
1000a322:	9003      	str	r0, [sp, #12]
1000a324:	7870      	ldrb	r0, [r6, #1]
1000a326:	9002      	str	r0, [sp, #8]
1000a328:	78b0      	ldrb	r0, [r6, #2]
1000a32a:	9001      	str	r0, [sp, #4]
1000a32c:	78f0      	ldrb	r0, [r6, #3]
1000a32e:	9000      	str	r0, [sp, #0]
1000a330:	4842      	ldr	r0, [pc, #264]	; (1000a43c <ble_device_init+0x290>)
1000a332:	47c0      	blx	r8
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000a334:	230a      	movs	r3, #10
1000a336:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000a338:	4b41      	ldr	r3, [pc, #260]	; (1000a440 <ble_device_init+0x294>)
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000a33a:	2207      	movs	r2, #7
1000a33c:	0031      	movs	r1, r6
1000a33e:	a807      	add	r0, sp, #28
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000a340:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000a342:	47a8      	blx	r5
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000a344:	2300      	movs	r3, #0
1000a346:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000a348:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000a34a:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000a34c:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000a34e:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000a350:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000a352:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000a354:	2380      	movs	r3, #128	; 0x80
1000a356:	009b      	lsls	r3, r3, #2
1000a358:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000a35a:	0020      	movs	r0, r4
1000a35c:	4b39      	ldr	r3, [pc, #228]	; (1000a444 <ble_device_init+0x298>)
1000a35e:	4798      	blx	r3
1000a360:	2800      	cmp	r0, #0
1000a362:	d11b      	bne.n	1000a39c <ble_device_init+0x1f0>
	{
		DBG_LOG("Set BLE Device configuration failed");
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000a364:	0030      	movs	r0, r6
1000a366:	4b38      	ldr	r3, [pc, #224]	; (1000a448 <ble_device_init+0x29c>)
1000a368:	4798      	blx	r3
1000a36a:	2800      	cmp	r0, #0
1000a36c:	d003      	beq.n	1000a376 <ble_device_init+0x1ca>
	{
		DBG_LOG("Set BLE Device Address failed");
1000a36e:	4650      	mov	r0, sl
1000a370:	47c8      	blx	r9
1000a372:	4836      	ldr	r0, [pc, #216]	; (1000a44c <ble_device_init+0x2a0>)
1000a374:	47c0      	blx	r8
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000a376:	b011      	add	sp, #68	; 0x44
1000a378:	bc3c      	pop	{r2, r3, r4, r5}
1000a37a:	4690      	mov	r8, r2
1000a37c:	4699      	mov	r9, r3
1000a37e:	46a2      	mov	sl, r4
1000a380:	46ab      	mov	fp, r5
1000a382:	bdf0      	pop	{r4, r5, r6, r7, pc}
	DBG_LOG("Initializing SAMB11");
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
	{
		DBG_LOG("SAMB11 Initialization failed");
1000a384:	4650      	mov	r0, sl
1000a386:	47c8      	blx	r9
1000a388:	4831      	ldr	r0, [pc, #196]	; (1000a450 <ble_device_init+0x2a4>)
1000a38a:	47c0      	blx	r8
		DBG_LOG("Please check the power and connection / hardware connector");	
1000a38c:	4650      	mov	r0, sl
1000a38e:	47c8      	blx	r9
1000a390:	4830      	ldr	r0, [pc, #192]	; (1000a454 <ble_device_init+0x2a8>)
1000a392:	47c0      	blx	r8
1000a394:	e7fe      	b.n	1000a394 <ble_device_init+0x1e8>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000a396:	4b30      	ldr	r3, [pc, #192]	; (1000a458 <ble_device_init+0x2ac>)
1000a398:	602b      	str	r3, [r5, #0]
1000a39a:	e79c      	b.n	1000a2d6 <ble_device_init+0x12a>
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
	{
		DBG_LOG("Set BLE Device configuration failed");
1000a39c:	4650      	mov	r0, sl
1000a39e:	47c8      	blx	r9
1000a3a0:	482e      	ldr	r0, [pc, #184]	; (1000a45c <ble_device_init+0x2b0>)
1000a3a2:	47c0      	blx	r8
1000a3a4:	e7de      	b.n	1000a364 <ble_device_init+0x1b8>
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000a3a6:	a804      	add	r0, sp, #16
1000a3a8:	4b2d      	ldr	r3, [pc, #180]	; (1000a460 <ble_device_init+0x2b4>)
1000a3aa:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000a3ac:	ae04      	add	r6, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000a3ae:	2800      	cmp	r0, #0
1000a3b0:	d0b1      	beq.n	1000a316 <ble_device_init+0x16a>
		{
			DBG_LOG("BD address get failed");
1000a3b2:	4650      	mov	r0, sl
1000a3b4:	47c8      	blx	r9
1000a3b6:	482b      	ldr	r0, [pc, #172]	; (1000a464 <ble_device_init+0x2b8>)
1000a3b8:	47c0      	blx	r8
1000a3ba:	e7ac      	b.n	1000a316 <ble_device_init+0x16a>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000a3bc:	4b2a      	ldr	r3, [pc, #168]	; (1000a468 <ble_device_init+0x2bc>)
1000a3be:	6023      	str	r3, [r4, #0]
1000a3c0:	e791      	b.n	1000a2e6 <ble_device_init+0x13a>
1000a3c2:	46c0      	nop			; (mov r8, r8)
1000a3c4:	10014c04 	.word	0x10014c04
1000a3c8:	100114b1 	.word	0x100114b1
1000a3cc:	10014c0c 	.word	0x10014c0c
1000a3d0:	100150c0 	.word	0x100150c0
1000a3d4:	10014c08 	.word	0x10014c08
1000a3d8:	100150f8 	.word	0x100150f8
1000a3dc:	100150f0 	.word	0x100150f0
1000a3e0:	1001542c 	.word	0x1001542c
1000a3e4:	10013804 	.word	0x10013804
1000a3e8:	10013c04 	.word	0x10013c04
1000a3ec:	100150d4 	.word	0x100150d4
1000a3f0:	100150ac 	.word	0x100150ac
1000a3f4:	10015098 	.word	0x10015098
1000a3f8:	100150f4 	.word	0x100150f4
1000a3fc:	10014e00 	.word	0x10014e00
1000a400:	10014dfc 	.word	0x10014dfc
1000a404:	10015084 	.word	0x10015084
1000a408:	10015638 	.word	0x10015638
1000a40c:	10014e14 	.word	0x10014e14
1000a410:	10015080 	.word	0x10015080
1000a414:	100128bc 	.word	0x100128bc
1000a418:	10011719 	.word	0x10011719
1000a41c:	100115f9 	.word	0x100115f9
1000a420:	10013030 	.word	0x10013030
1000a424:	1000d485 	.word	0x1000d485
1000a428:	100130a0 	.word	0x100130a0
1000a42c:	1000d39d 	.word	0x1000d39d
1000a430:	100130ac 	.word	0x100130ac
1000a434:	10012c44 	.word	0x10012c44
1000a438:	1001149f 	.word	0x1001149f
1000a43c:	100130dc 	.word	0x100130dc
1000a440:	00003a98 	.word	0x00003a98
1000a444:	1000d3f5 	.word	0x1000d3f5
1000a448:	1000d639 	.word	0x1000d639
1000a44c:	10013138 	.word	0x10013138
1000a450:	10013044 	.word	0x10013044
1000a454:	10013064 	.word	0x10013064
1000a458:	1001329c 	.word	0x1001329c
1000a45c:	10013114 	.word	0x10013114
1000a460:	1000d3d1 	.word	0x1000d3d1
1000a464:	100130c4 	.word	0x100130c4
1000a468:	10012c60 	.word	0x10012c60

1000a46c <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000a46c:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000a46e:	2201      	movs	r2, #1
1000a470:	2101      	movs	r1, #1
1000a472:	4b06      	ldr	r3, [pc, #24]	; (1000a48c <ble_send_slave_sec_request+0x20>)
1000a474:	4798      	blx	r3
1000a476:	2800      	cmp	r0, #0
1000a478:	d006      	beq.n	1000a488 <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000a47a:	4b05      	ldr	r3, [pc, #20]	; (1000a490 <ble_send_slave_sec_request+0x24>)
1000a47c:	4805      	ldr	r0, [pc, #20]	; (1000a494 <ble_send_slave_sec_request+0x28>)
1000a47e:	4798      	blx	r3
1000a480:	4805      	ldr	r0, [pc, #20]	; (1000a498 <ble_send_slave_sec_request+0x2c>)
1000a482:	4b06      	ldr	r3, [pc, #24]	; (1000a49c <ble_send_slave_sec_request+0x30>)
1000a484:	4798      	blx	r3
1000a486:	20e2      	movs	r0, #226	; 0xe2
		}
	#endif
	return AT_BLE_FAILURE;
}
1000a488:	bd10      	pop	{r4, pc}
1000a48a:	46c0      	nop			; (mov r8, r8)
1000a48c:	1000dbc5 	.word	0x1000dbc5
1000a490:	10011719 	.word	0x10011719
1000a494:	100128bc 	.word	0x100128bc
1000a498:	10013174 	.word	0x10013174
1000a49c:	100115f9 	.word	0x100115f9

1000a4a0 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000a4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a4a2:	464d      	mov	r5, r9
1000a4a4:	4644      	mov	r4, r8
1000a4a6:	465f      	mov	r7, fp
1000a4a8:	4656      	mov	r6, sl
1000a4aa:	b4f0      	push	{r4, r5, r6, r7}
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000a4ac:	7a85      	ldrb	r5, [r0, #10]
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000a4ae:	b099      	sub	sp, #100	; 0x64
1000a4b0:	0004      	movs	r4, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000a4b2:	2d00      	cmp	r5, #0
1000a4b4:	d156      	bne.n	1000a564 <ble_connected_state_handler+0xc4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000a4b6:	4b69      	ldr	r3, [pc, #420]	; (1000a65c <ble_connected_state_handler+0x1bc>)
1000a4b8:	4699      	mov	r9, r3
1000a4ba:	0018      	movs	r0, r3
1000a4bc:	4b68      	ldr	r3, [pc, #416]	; (1000a660 <ble_connected_state_handler+0x1c0>)
1000a4be:	4698      	mov	r8, r3
1000a4c0:	4798      	blx	r3
1000a4c2:	7860      	ldrb	r0, [r4, #1]
1000a4c4:	7923      	ldrb	r3, [r4, #4]
1000a4c6:	7962      	ldrb	r2, [r4, #5]
1000a4c8:	79a1      	ldrb	r1, [r4, #6]
1000a4ca:	9002      	str	r0, [sp, #8]
1000a4cc:	78a0      	ldrb	r0, [r4, #2]
1000a4ce:	4f65      	ldr	r7, [pc, #404]	; (1000a664 <ble_connected_state_handler+0x1c4>)
1000a4d0:	9001      	str	r0, [sp, #4]
1000a4d2:	78e0      	ldrb	r0, [r4, #3]
1000a4d4:	9000      	str	r0, [sp, #0]
1000a4d6:	4864      	ldr	r0, [pc, #400]	; (1000a668 <ble_connected_state_handler+0x1c8>)
1000a4d8:	47b8      	blx	r7
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000a4da:	4648      	mov	r0, r9
1000a4dc:	47c0      	blx	r8
1000a4de:	8921      	ldrh	r1, [r4, #8]
1000a4e0:	4862      	ldr	r0, [pc, #392]	; (1000a66c <ble_connected_state_handler+0x1cc>)
1000a4e2:	47b8      	blx	r7
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000a4e4:	2212      	movs	r2, #18
1000a4e6:	0021      	movs	r1, r4
1000a4e8:	4b61      	ldr	r3, [pc, #388]	; (1000a670 <ble_connected_state_handler+0x1d0>)
1000a4ea:	4862      	ldr	r0, [pc, #392]	; (1000a674 <ble_connected_state_handler+0x1d4>)
1000a4ec:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a4ee:	4b62      	ldr	r3, [pc, #392]	; (1000a678 <ble_connected_state_handler+0x1d8>)
1000a4f0:	2207      	movs	r2, #7
1000a4f2:	0018      	movs	r0, r3
1000a4f4:	469b      	mov	fp, r3
1000a4f6:	0021      	movs	r1, r4
1000a4f8:	4b60      	ldr	r3, [pc, #384]	; (1000a67c <ble_connected_state_handler+0x1dc>)
1000a4fa:	4798      	blx	r3
1000a4fc:	4682      	mov	sl, r0
1000a4fe:	2800      	cmp	r0, #0
1000a500:	d140      	bne.n	1000a584 <ble_connected_state_handler+0xe4>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000a502:	4b5f      	ldr	r3, [pc, #380]	; (1000a680 <ble_connected_state_handler+0x1e0>)
1000a504:	781b      	ldrb	r3, [r3, #0]
1000a506:	2b04      	cmp	r3, #4
1000a508:	d900      	bls.n	1000a50c <ble_connected_state_handler+0x6c>
1000a50a:	e076      	b.n	1000a5fa <ble_connected_state_handler+0x15a>
1000a50c:	4b5d      	ldr	r3, [pc, #372]	; (1000a684 <ble_connected_state_handler+0x1e4>)
1000a50e:	2600      	movs	r6, #0
1000a510:	46a8      	mov	r8, r5
1000a512:	001f      	movs	r7, r3
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a514:	2207      	movs	r2, #7
1000a516:	0021      	movs	r1, r4
1000a518:	0038      	movs	r0, r7
1000a51a:	4b58      	ldr	r3, [pc, #352]	; (1000a67c <ble_connected_state_handler+0x1dc>)
1000a51c:	4798      	blx	r3
1000a51e:	2800      	cmp	r0, #0
1000a520:	d100      	bne.n	1000a524 <ble_connected_state_handler+0x84>
1000a522:	e076      	b.n	1000a612 <ble_connected_state_handler+0x172>
1000a524:	3601      	adds	r6, #1
1000a526:	377c      	adds	r7, #124	; 0x7c
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a528:	2e05      	cmp	r6, #5
1000a52a:	d1f3      	bne.n	1000a514 <ble_connected_state_handler+0x74>
1000a52c:	4645      	mov	r5, r8
1000a52e:	2700      	movs	r7, #0
1000a530:	4b55      	ldr	r3, [pc, #340]	; (1000a688 <ble_connected_state_handler+0x1e8>)
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a532:	781a      	ldrb	r2, [r3, #0]
1000a534:	2a00      	cmp	r2, #0
1000a536:	d100      	bne.n	1000a53a <ble_connected_state_handler+0x9a>
1000a538:	e07d      	b.n	1000a636 <ble_connected_state_handler+0x196>
1000a53a:	3701      	adds	r7, #1
1000a53c:	337c      	adds	r3, #124	; 0x7c
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a53e:	2f05      	cmp	r7, #5
1000a540:	d1f7      	bne.n	1000a532 <ble_connected_state_handler+0x92>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a542:	4653      	mov	r3, sl
1000a544:	2b00      	cmp	r3, #0
1000a546:	d147      	bne.n	1000a5d8 <ble_connected_state_handler+0x138>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000a548:	017b      	lsls	r3, r7, #5
1000a54a:	1bdf      	subs	r7, r3, r7
1000a54c:	4b4d      	ldr	r3, [pc, #308]	; (1000a684 <ble_connected_state_handler+0x1e4>)
1000a54e:	00bf      	lsls	r7, r7, #2
1000a550:	469c      	mov	ip, r3
1000a552:	2305      	movs	r3, #5
1000a554:	4467      	add	r7, ip
1000a556:	74bb      	strb	r3, [r7, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a558:	2207      	movs	r2, #7
1000a55a:	2100      	movs	r1, #0
1000a55c:	4658      	mov	r0, fp
1000a55e:	4b4b      	ldr	r3, [pc, #300]	; (1000a68c <ble_connected_state_handler+0x1ec>)
1000a560:	4798      	blx	r3
1000a562:	e007      	b.n	1000a574 <ble_connected_state_handler+0xd4>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000a564:	4b3e      	ldr	r3, [pc, #248]	; (1000a660 <ble_connected_state_handler+0x1c0>)
1000a566:	483d      	ldr	r0, [pc, #244]	; (1000a65c <ble_connected_state_handler+0x1bc>)
1000a568:	4798      	blx	r3
1000a56a:	7aa1      	ldrb	r1, [r4, #10]
1000a56c:	4848      	ldr	r0, [pc, #288]	; (1000a690 <ble_connected_state_handler+0x1f0>)
1000a56e:	4b3d      	ldr	r3, [pc, #244]	; (1000a664 <ble_connected_state_handler+0x1c4>)
1000a570:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000a572:	2500      	movs	r5, #0
}
1000a574:	0028      	movs	r0, r5
1000a576:	b019      	add	sp, #100	; 0x64
1000a578:	bc3c      	pop	{r2, r3, r4, r5}
1000a57a:	4690      	mov	r8, r2
1000a57c:	4699      	mov	r9, r3
1000a57e:	46a2      	mov	sl, r4
1000a580:	46ab      	mov	fp, r5
1000a582:	bdf0      	pop	{r4, r5, r6, r7, pc}
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000a584:	7823      	ldrb	r3, [r4, #0]
1000a586:	2b02      	cmp	r3, #2
1000a588:	d1bb      	bne.n	1000a502 <ble_connected_state_handler+0x62>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000a58a:	ad04      	add	r5, sp, #16
1000a58c:	2250      	movs	r2, #80	; 0x50
1000a58e:	4b3f      	ldr	r3, [pc, #252]	; (1000a68c <ble_connected_state_handler+0x1ec>)
1000a590:	2100      	movs	r1, #0
1000a592:	0028      	movs	r0, r5
1000a594:	4798      	blx	r3
1000a596:	4b3f      	ldr	r3, [pc, #252]	; (1000a694 <ble_connected_state_handler+0x1f4>)
1000a598:	0022      	movs	r2, r4
1000a59a:	469c      	mov	ip, r3
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000a59c:	2300      	movs	r3, #0
1000a59e:	4664      	mov	r4, ip
1000a5a0:	4694      	mov	ip, r2
1000a5a2:	001e      	movs	r6, r3
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000a5a4:	0022      	movs	r2, r4
1000a5a6:	3610      	adds	r6, #16
1000a5a8:	b2b6      	uxth	r6, r6
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000a5aa:	7810      	ldrb	r0, [r2, #0]
1000a5ac:	1c59      	adds	r1, r3, #1
1000a5ae:	54e8      	strb	r0, [r5, r3]
1000a5b0:	b28b      	uxth	r3, r1
1000a5b2:	3201      	adds	r2, #1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000a5b4:	42b3      	cmp	r3, r6
1000a5b6:	d1f8      	bne.n	1000a5aa <ble_connected_state_handler+0x10a>
1000a5b8:	347c      	adds	r4, #124	; 0x7c
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000a5ba:	2b50      	cmp	r3, #80	; 0x50
1000a5bc:	d1f1      	bne.n	1000a5a2 <ble_connected_state_handler+0x102>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000a5be:	002a      	movs	r2, r5
1000a5c0:	4661      	mov	r1, ip
1000a5c2:	2005      	movs	r0, #5
1000a5c4:	4b34      	ldr	r3, [pc, #208]	; (1000a698 <ble_connected_state_handler+0x1f8>)
1000a5c6:	4798      	blx	r3
1000a5c8:	1e05      	subs	r5, r0, #0
1000a5ca:	d0d3      	beq.n	1000a574 <ble_connected_state_handler+0xd4>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000a5cc:	4648      	mov	r0, r9
1000a5ce:	47c0      	blx	r8
1000a5d0:	4832      	ldr	r0, [pc, #200]	; (1000a69c <ble_connected_state_handler+0x1fc>)
1000a5d2:	47b8      	blx	r7
						return AT_BLE_FAILURE;
1000a5d4:	25e2      	movs	r5, #226	; 0xe2
1000a5d6:	e7cd      	b.n	1000a574 <ble_connected_state_handler+0xd4>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a5d8:	017b      	lsls	r3, r7, #5
1000a5da:	1bdf      	subs	r7, r3, r7
1000a5dc:	4b29      	ldr	r3, [pc, #164]	; (1000a684 <ble_connected_state_handler+0x1e4>)
1000a5de:	00bf      	lsls	r7, r7, #2
1000a5e0:	469c      	mov	ip, r3
1000a5e2:	230a      	movs	r3, #10
1000a5e4:	4467      	add	r7, ip
1000a5e6:	74bb      	strb	r3, [r7, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a5e8:	2207      	movs	r2, #7
1000a5ea:	2100      	movs	r1, #0
1000a5ec:	4658      	mov	r0, fp
1000a5ee:	4b27      	ldr	r3, [pc, #156]	; (1000a68c <ble_connected_state_handler+0x1ec>)
1000a5f0:	4798      	blx	r3
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000a5f2:	8920      	ldrh	r0, [r4, #8]
1000a5f4:	4b2a      	ldr	r3, [pc, #168]	; (1000a6a0 <ble_connected_state_handler+0x200>)
1000a5f6:	4798      	blx	r3
1000a5f8:	e7bc      	b.n	1000a574 <ble_connected_state_handler+0xd4>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000a5fa:	4648      	mov	r0, r9
1000a5fc:	47c0      	blx	r8
1000a5fe:	4b20      	ldr	r3, [pc, #128]	; (1000a680 <ble_connected_state_handler+0x1e0>)
1000a600:	4828      	ldr	r0, [pc, #160]	; (1000a6a4 <ble_connected_state_handler+0x204>)
1000a602:	7819      	ldrb	r1, [r3, #0]
1000a604:	b2c9      	uxtb	r1, r1
1000a606:	47b8      	blx	r7
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000a608:	8920      	ldrh	r0, [r4, #8]
1000a60a:	2113      	movs	r1, #19
1000a60c:	4b26      	ldr	r3, [pc, #152]	; (1000a6a8 <ble_connected_state_handler+0x208>)
1000a60e:	4798      	blx	r3
1000a610:	e7b0      	b.n	1000a574 <ble_connected_state_handler+0xd4>
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a612:	4a1c      	ldr	r2, [pc, #112]	; (1000a684 <ble_connected_state_handler+0x1e4>)
1000a614:	0037      	movs	r7, r6
1000a616:	4694      	mov	ip, r2
1000a618:	4645      	mov	r5, r8
1000a61a:	0173      	lsls	r3, r6, #5
1000a61c:	1b9b      	subs	r3, r3, r6
1000a61e:	009b      	lsls	r3, r3, #2
1000a620:	4463      	add	r3, ip
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
						ble_device_count++;
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a622:	2202      	movs	r2, #2
1000a624:	335e      	adds	r3, #94	; 0x5e
1000a626:	701a      	strb	r2, [r3, #0]
1000a628:	0021      	movs	r1, r4
1000a62a:	3205      	adds	r2, #5
1000a62c:	4658      	mov	r0, fp
1000a62e:	4b13      	ldr	r3, [pc, #76]	; (1000a67c <ble_connected_state_handler+0x1dc>)
1000a630:	4798      	blx	r3
1000a632:	4682      	mov	sl, r0
1000a634:	e785      	b.n	1000a542 <ble_connected_state_handler+0xa2>
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000a636:	4a13      	ldr	r2, [pc, #76]	; (1000a684 <ble_connected_state_handler+0x1e4>)
1000a638:	017b      	lsls	r3, r7, #5
1000a63a:	4690      	mov	r8, r2
1000a63c:	1bdb      	subs	r3, r3, r7
1000a63e:	009b      	lsls	r3, r3, #2
1000a640:	4498      	add	r8, r3
1000a642:	2212      	movs	r2, #18
1000a644:	4b0a      	ldr	r3, [pc, #40]	; (1000a670 <ble_connected_state_handler+0x1d0>)
1000a646:	0021      	movs	r1, r4
1000a648:	4640      	mov	r0, r8
1000a64a:	4798      	blx	r3
						ble_device_count++;
1000a64c:	4b0c      	ldr	r3, [pc, #48]	; (1000a680 <ble_connected_state_handler+0x1e0>)
1000a64e:	4a0c      	ldr	r2, [pc, #48]	; (1000a680 <ble_connected_state_handler+0x1e0>)
1000a650:	781b      	ldrb	r3, [r3, #0]
1000a652:	3301      	adds	r3, #1
1000a654:	b2db      	uxtb	r3, r3
1000a656:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a658:	4643      	mov	r3, r8
1000a65a:	e7e2      	b.n	1000a622 <ble_connected_state_handler+0x182>
1000a65c:	100128bc 	.word	0x100128bc
1000a660:	10011719 	.word	0x10011719
1000a664:	100115f9 	.word	0x100115f9
1000a668:	10013194 	.word	0x10013194
1000a66c:	100131d8 	.word	0x100131d8
1000a670:	1001149f 	.word	0x1001149f
1000a674:	100150c0 	.word	0x100150c0
1000a678:	10014c0c 	.word	0x10014c0c
1000a67c:	10011481 	.word	0x10011481
1000a680:	10015080 	.word	0x10015080
1000a684:	10014e14 	.word	0x10014e14
1000a688:	10014e72 	.word	0x10014e72
1000a68c:	100114b1 	.word	0x100114b1
1000a690:	10013250 	.word	0x10013250
1000a694:	10014e5a 	.word	0x10014e5a
1000a698:	1000d6d9 	.word	0x1000d6d9
1000a69c:	100131f0 	.word	0x100131f0
1000a6a0:	1000a46d 	.word	0x1000a46d
1000a6a4:	10013214 	.word	0x10013214
1000a6a8:	1000d6ad 	.word	0x1000d6ad

1000a6ac <ble_resolv_rand_addr_handler>:
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000a6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000a6ae:	7803      	ldrb	r3, [r0, #0]
1000a6b0:	2b00      	cmp	r3, #0
1000a6b2:	d10d      	bne.n	1000a6d0 <ble_resolv_rand_addr_handler+0x24>
1000a6b4:	2400      	movs	r4, #0
1000a6b6:	4d21      	ldr	r5, [pc, #132]	; (1000a73c <ble_resolv_rand_addr_handler+0x90>)
1000a6b8:	4f21      	ldr	r7, [pc, #132]	; (1000a740 <ble_resolv_rand_addr_handler+0x94>)
1000a6ba:	1c46      	adds	r6, r0, #1
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000a6bc:	2210      	movs	r2, #16
1000a6be:	0029      	movs	r1, r5
1000a6c0:	0030      	movs	r0, r6
1000a6c2:	47b8      	blx	r7
1000a6c4:	2800      	cmp	r0, #0
1000a6c6:	d00e      	beq.n	1000a6e6 <ble_resolv_rand_addr_handler+0x3a>
1000a6c8:	3401      	adds	r4, #1
1000a6ca:	357c      	adds	r5, #124	; 0x7c
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a6cc:	2c05      	cmp	r4, #5
1000a6ce:	d1f5      	bne.n	1000a6bc <ble_resolv_rand_addr_handler+0x10>
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000a6d0:	2300      	movs	r3, #0
1000a6d2:	4a1c      	ldr	r2, [pc, #112]	; (1000a744 <ble_resolv_rand_addr_handler+0x98>)
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a6d4:	7811      	ldrb	r1, [r2, #0]
1000a6d6:	2900      	cmp	r1, #0
1000a6d8:	d019      	beq.n	1000a70e <ble_resolv_rand_addr_handler+0x62>
1000a6da:	3301      	adds	r3, #1
1000a6dc:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a6de:	2b05      	cmp	r3, #5
1000a6e0:	d1f8      	bne.n	1000a6d4 <ble_resolv_rand_addr_handler+0x28>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000a6e2:	2000      	movs	r0, #0
1000a6e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a6e6:	0160      	lsls	r0, r4, #5
1000a6e8:	1b00      	subs	r0, r0, r4
1000a6ea:	0084      	lsls	r4, r0, #2
1000a6ec:	4816      	ldr	r0, [pc, #88]	; (1000a748 <ble_resolv_rand_addr_handler+0x9c>)
1000a6ee:	2202      	movs	r2, #2
1000a6f0:	1900      	adds	r0, r0, r4
1000a6f2:	0003      	movs	r3, r0
1000a6f4:	335e      	adds	r3, #94	; 0x5e
1000a6f6:	701a      	strb	r2, [r3, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a6f8:	230a      	movs	r3, #10
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000a6fa:	4c14      	ldr	r4, [pc, #80]	; (1000a74c <ble_resolv_rand_addr_handler+0xa0>)
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a6fc:	7483      	strb	r3, [r0, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000a6fe:	3210      	adds	r2, #16
1000a700:	0021      	movs	r1, r4
1000a702:	4b13      	ldr	r3, [pc, #76]	; (1000a750 <ble_resolv_rand_addr_handler+0xa4>)
1000a704:	4798      	blx	r3
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000a706:	8920      	ldrh	r0, [r4, #8]
1000a708:	4b12      	ldr	r3, [pc, #72]	; (1000a754 <ble_resolv_rand_addr_handler+0xa8>)
1000a70a:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000a70c:	e7e9      	b.n	1000a6e2 <ble_resolv_rand_addr_handler+0x36>
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000a70e:	015d      	lsls	r5, r3, #5
1000a710:	1aeb      	subs	r3, r5, r3
1000a712:	4d0d      	ldr	r5, [pc, #52]	; (1000a748 <ble_resolv_rand_addr_handler+0x9c>)
1000a714:	009b      	lsls	r3, r3, #2
1000a716:	4c0d      	ldr	r4, [pc, #52]	; (1000a74c <ble_resolv_rand_addr_handler+0xa0>)
1000a718:	18ed      	adds	r5, r5, r3
1000a71a:	2212      	movs	r2, #18
1000a71c:	4b0c      	ldr	r3, [pc, #48]	; (1000a750 <ble_resolv_rand_addr_handler+0xa4>)
1000a71e:	0021      	movs	r1, r4
1000a720:	0028      	movs	r0, r5
1000a722:	4798      	blx	r3
				ble_device_count++;
1000a724:	4a0c      	ldr	r2, [pc, #48]	; (1000a758 <ble_resolv_rand_addr_handler+0xac>)
1000a726:	7813      	ldrb	r3, [r2, #0]
1000a728:	3301      	adds	r3, #1
1000a72a:	b2db      	uxtb	r3, r3
1000a72c:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a72e:	002b      	movs	r3, r5
1000a730:	2202      	movs	r2, #2
1000a732:	335e      	adds	r3, #94	; 0x5e
1000a734:	701a      	strb	r2, [r3, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a736:	230a      	movs	r3, #10
1000a738:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000a73a:	e7e4      	b.n	1000a706 <ble_resolv_rand_addr_handler+0x5a>
1000a73c:	10014e5a 	.word	0x10014e5a
1000a740:	10011481 	.word	0x10011481
1000a744:	10014e72 	.word	0x10014e72
1000a748:	10014e14 	.word	0x10014e14
1000a74c:	100150c0 	.word	0x100150c0
1000a750:	1001149f 	.word	0x1001149f
1000a754:	1000a46d 	.word	0x1000a46d
1000a758:	10015080 	.word	0x10015080

1000a75c <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000a75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a75e:	000d      	movs	r5, r1
	DBG_LOG_DEV("BLE-Event:%d", events);
	switch(events)
1000a760:	283b      	cmp	r0, #59	; 0x3b
1000a762:	d865      	bhi.n	1000a830 <ble_event_manager+0xd4>
1000a764:	4b36      	ldr	r3, [pc, #216]	; (1000a840 <ble_event_manager+0xe4>)
1000a766:	0086      	lsls	r6, r0, #2
1000a768:	599b      	ldr	r3, [r3, r6]
1000a76a:	469f      	mov	pc, r3
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000a76c:	4b35      	ldr	r3, [pc, #212]	; (1000a844 <ble_event_manager+0xe8>)
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000a76e:	3838      	subs	r0, #56	; 0x38
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000a770:	681b      	ldr	r3, [r3, #0]
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000a772:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000a774:	2b00      	cmp	r3, #0
1000a776:	d005      	beq.n	1000a784 <ble_event_manager+0x28>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a778:	0080      	lsls	r0, r0, #2
1000a77a:	58c3      	ldr	r3, [r0, r3]
1000a77c:	2b00      	cmp	r3, #0
1000a77e:	d001      	beq.n	1000a784 <ble_event_manager+0x28>
				{
					event_cb_fn[events](event_params);
1000a780:	0028      	movs	r0, r5
1000a782:	4798      	blx	r3
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
	}
	break;		
	}
}
1000a784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000a786:	4b30      	ldr	r3, [pc, #192]	; (1000a848 <ble_event_manager+0xec>)
1000a788:	681b      	ldr	r3, [r3, #0]
1000a78a:	2b00      	cmp	r3, #0
1000a78c:	d0fa      	beq.n	1000a784 <ble_event_manager+0x28>
			ble_user_event_cb();
1000a78e:	4798      	blx	r3
1000a790:	e7f8      	b.n	1000a784 <ble_event_manager+0x28>
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a792:	2400      	movs	r4, #0
1000a794:	4f2d      	ldr	r7, [pc, #180]	; (1000a84c <ble_event_manager+0xf0>)
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000a796:	593b      	ldr	r3, [r7, r4]
1000a798:	2b00      	cmp	r3, #0
1000a79a:	d004      	beq.n	1000a7a6 <ble_event_manager+0x4a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a79c:	599b      	ldr	r3, [r3, r6]
1000a79e:	2b00      	cmp	r3, #0
1000a7a0:	d001      	beq.n	1000a7a6 <ble_event_manager+0x4a>
				{
					event_cb_fn[events](event_params);		
1000a7a2:	0028      	movs	r0, r5
1000a7a4:	4798      	blx	r3
1000a7a6:	3404      	adds	r4, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000a7a8:	2c14      	cmp	r4, #20
1000a7aa:	d1f4      	bne.n	1000a796 <ble_event_manager+0x3a>
1000a7ac:	e7ea      	b.n	1000a784 <ble_event_manager+0x28>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a7ae:	2600      	movs	r6, #0
1000a7b0:	3813      	subs	r0, #19
1000a7b2:	b2c4      	uxtb	r4, r0
1000a7b4:	4f26      	ldr	r7, [pc, #152]	; (1000a850 <ble_event_manager+0xf4>)
1000a7b6:	00a4      	lsls	r4, r4, #2
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000a7b8:	59bb      	ldr	r3, [r7, r6]
1000a7ba:	2b00      	cmp	r3, #0
1000a7bc:	d004      	beq.n	1000a7c8 <ble_event_manager+0x6c>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a7be:	591b      	ldr	r3, [r3, r4]
1000a7c0:	2b00      	cmp	r3, #0
1000a7c2:	d001      	beq.n	1000a7c8 <ble_event_manager+0x6c>
				{
					event_cb_fn[events](event_params);
1000a7c4:	0028      	movs	r0, r5
1000a7c6:	4798      	blx	r3
1000a7c8:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000a7ca:	2e14      	cmp	r6, #20
1000a7cc:	d1f4      	bne.n	1000a7b8 <ble_event_manager+0x5c>
1000a7ce:	e7d9      	b.n	1000a784 <ble_event_manager+0x28>
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a7d0:	2600      	movs	r6, #0
1000a7d2:	381d      	subs	r0, #29
1000a7d4:	b2c4      	uxtb	r4, r0
1000a7d6:	4f1f      	ldr	r7, [pc, #124]	; (1000a854 <ble_event_manager+0xf8>)
1000a7d8:	00a4      	lsls	r4, r4, #2
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000a7da:	59bb      	ldr	r3, [r7, r6]
1000a7dc:	2b00      	cmp	r3, #0
1000a7de:	d004      	beq.n	1000a7ea <ble_event_manager+0x8e>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a7e0:	591b      	ldr	r3, [r3, r4]
1000a7e2:	2b00      	cmp	r3, #0
1000a7e4:	d001      	beq.n	1000a7ea <ble_event_manager+0x8e>
				{
					event_cb_fn[events](event_params);
1000a7e6:	0028      	movs	r0, r5
1000a7e8:	4798      	blx	r3
1000a7ea:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000a7ec:	2e14      	cmp	r6, #20
1000a7ee:	d1f4      	bne.n	1000a7da <ble_event_manager+0x7e>
1000a7f0:	e7c8      	b.n	1000a784 <ble_event_manager+0x28>
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000a7f2:	4b19      	ldr	r3, [pc, #100]	; (1000a858 <ble_event_manager+0xfc>)
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000a7f4:	3827      	subs	r0, #39	; 0x27
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000a7f6:	681b      	ldr	r3, [r3, #0]
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000a7f8:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000a7fa:	2b00      	cmp	r3, #0
1000a7fc:	d1bc      	bne.n	1000a778 <ble_event_manager+0x1c>
1000a7fe:	e7c1      	b.n	1000a784 <ble_event_manager+0x28>
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000a800:	4b16      	ldr	r3, [pc, #88]	; (1000a85c <ble_event_manager+0x100>)
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000a802:	382d      	subs	r0, #45	; 0x2d
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000a804:	681b      	ldr	r3, [r3, #0]
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000a806:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000a808:	2b00      	cmp	r3, #0
1000a80a:	d1b5      	bne.n	1000a778 <ble_event_manager+0x1c>
1000a80c:	e7ba      	b.n	1000a784 <ble_event_manager+0x28>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a80e:	2600      	movs	r6, #0
1000a810:	3836      	subs	r0, #54	; 0x36
1000a812:	b2c4      	uxtb	r4, r0
1000a814:	4f12      	ldr	r7, [pc, #72]	; (1000a860 <ble_event_manager+0x104>)
1000a816:	00a4      	lsls	r4, r4, #2
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000a818:	59bb      	ldr	r3, [r7, r6]
1000a81a:	2b00      	cmp	r3, #0
1000a81c:	d004      	beq.n	1000a828 <ble_event_manager+0xcc>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000a81e:	591b      	ldr	r3, [r3, r4]
1000a820:	2b00      	cmp	r3, #0
1000a822:	d001      	beq.n	1000a828 <ble_event_manager+0xcc>
				{
					event_cb_fn[events](event_params);
1000a824:	0028      	movs	r0, r5
1000a826:	4798      	blx	r3
1000a828:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000a82a:	2e14      	cmp	r6, #20
1000a82c:	d1f4      	bne.n	1000a818 <ble_event_manager+0xbc>
1000a82e:	e7a9      	b.n	1000a784 <ble_event_manager+0x28>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000a830:	4d0c      	ldr	r5, [pc, #48]	; (1000a864 <ble_event_manager+0x108>)
1000a832:	4c0d      	ldr	r4, [pc, #52]	; (1000a868 <ble_event_manager+0x10c>)
1000a834:	0028      	movs	r0, r5
1000a836:	47a0      	blx	r4
1000a838:	0028      	movs	r0, r5
1000a83a:	47a0      	blx	r4
	}
	break;		
	}
}
1000a83c:	e7a2      	b.n	1000a784 <ble_event_manager+0x28>
1000a83e:	46c0      	nop			; (mov r8, r8)
1000a840:	10012b54 	.word	0x10012b54
1000a844:	10015638 	.word	0x10015638
1000a848:	10014c04 	.word	0x10014c04
1000a84c:	10015098 	.word	0x10015098
1000a850:	100150ac 	.word	0x100150ac
1000a854:	10014e00 	.word	0x10014e00
1000a858:	100150f4 	.word	0x100150f4
1000a85c:	10014dfc 	.word	0x10014dfc
1000a860:	10015084 	.word	0x10015084
1000a864:	100128bc 	.word	0x100128bc
1000a868:	10011719 	.word	0x10011719

1000a86c <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000a86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000a86e:	4d0f      	ldr	r5, [pc, #60]	; (1000a8ac <ble_event_task+0x40>)
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000a870:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000a872:	782b      	ldrb	r3, [r5, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000a874:	2b01      	cmp	r3, #1
1000a876:	d015      	beq.n	1000a8a4 <ble_event_task+0x38>
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000a878:	4e0d      	ldr	r6, [pc, #52]	; (1000a8b0 <ble_event_task+0x44>)
1000a87a:	4f0e      	ldr	r7, [pc, #56]	; (1000a8b4 <ble_event_task+0x48>)
1000a87c:	0022      	movs	r2, r4
1000a87e:	4b0e      	ldr	r3, [pc, #56]	; (1000a8b8 <ble_event_task+0x4c>)
1000a880:	0031      	movs	r1, r6
1000a882:	0038      	movs	r0, r7
1000a884:	4798      	blx	r3
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000a886:	782b      	ldrb	r3, [r5, #0]
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000a888:	0004      	movs	r4, r0
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000a88a:	2b01      	cmp	r3, #1
1000a88c:	d007      	beq.n	1000a89e <ble_event_task+0x32>
	{
		acquire_sleep_lock();
	}
	
    if (status == AT_BLE_SUCCESS) 
1000a88e:	2c00      	cmp	r4, #0
1000a890:	d103      	bne.n	1000a89a <ble_event_task+0x2e>
    {		
            ble_event_manager(event, ble_event_params);
1000a892:	7838      	ldrb	r0, [r7, #0]
1000a894:	0031      	movs	r1, r6
1000a896:	4b09      	ldr	r3, [pc, #36]	; (1000a8bc <ble_event_task+0x50>)
1000a898:	4798      	blx	r3
    }
    
    return status;
}
1000a89a:	0020      	movs	r0, r4
1000a89c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
	{
		acquire_sleep_lock();
1000a89e:	4b08      	ldr	r3, [pc, #32]	; (1000a8c0 <ble_event_task+0x54>)
1000a8a0:	4798      	blx	r3
1000a8a2:	e7f4      	b.n	1000a88e <ble_event_task+0x22>
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
	{
		release_sleep_lock();
1000a8a4:	4b07      	ldr	r3, [pc, #28]	; (1000a8c4 <ble_event_task+0x58>)
1000a8a6:	4798      	blx	r3
1000a8a8:	e7e6      	b.n	1000a878 <ble_event_task+0xc>
1000a8aa:	46c0      	nop			; (mov r8, r8)
1000a8ac:	10014c13 	.word	0x10014c13
1000a8b0:	1001542c 	.word	0x1001542c
1000a8b4:	100150f0 	.word	0x100150f0
1000a8b8:	1000cc2d 	.word	0x1000cc2d
1000a8bc:	1000a75d 	.word	0x1000a75d
1000a8c0:	1000b1b9 	.word	0x1000b1b9
1000a8c4:	1000b1e1 	.word	0x1000b1e1

1000a8c8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000a8c8:	b570      	push	{r4, r5, r6, lr}
1000a8ca:	0006      	movs	r6, r0
1000a8cc:	000d      	movs	r5, r1
1000a8ce:	4c03      	ldr	r4, [pc, #12]	; (1000a8dc <usart_serial_getchar+0x14>)
	while(STATUS_OK != uart_read_wait(module, c));
1000a8d0:	0029      	movs	r1, r5
1000a8d2:	0030      	movs	r0, r6
1000a8d4:	47a0      	blx	r4
1000a8d6:	2800      	cmp	r0, #0
1000a8d8:	d1fa      	bne.n	1000a8d0 <usart_serial_getchar+0x8>
}
1000a8da:	bd70      	pop	{r4, r5, r6, pc}
1000a8dc:	1000b835 	.word	0x1000b835

1000a8e0 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000a8e0:	b570      	push	{r4, r5, r6, lr}
1000a8e2:	0006      	movs	r6, r0
1000a8e4:	000d      	movs	r5, r1
1000a8e6:	4c03      	ldr	r4, [pc, #12]	; (1000a8f4 <usart_serial_putchar+0x14>)
	while(STATUS_OK !=uart_write_wait(module, c));
1000a8e8:	0029      	movs	r1, r5
1000a8ea:	0030      	movs	r0, r6
1000a8ec:	47a0      	blx	r4
1000a8ee:	2800      	cmp	r0, #0
1000a8f0:	d1fa      	bne.n	1000a8e8 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000a8f2:	bd70      	pop	{r4, r5, r6, pc}
1000a8f4:	1000b825 	.word	0x1000b825

1000a8f8 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000a8f8:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000a8fa:	4b0e      	ldr	r3, [pc, #56]	; (1000a934 <uart_read_complete_callback+0x3c>)
1000a8fc:	781a      	ldrb	r2, [r3, #0]
1000a8fe:	2a01      	cmp	r2, #1
1000a900:	d00c      	beq.n	1000a91c <uart_read_complete_callback+0x24>
		read_status = UART_READ_DONE;
		
		if(user_callback_func == NULL)
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
	}
	else if(user_callback_func != NULL) {
1000a902:	4b0d      	ldr	r3, [pc, #52]	; (1000a938 <uart_read_complete_callback+0x40>)
1000a904:	681b      	ldr	r3, [r3, #0]
1000a906:	2b00      	cmp	r3, #0
1000a908:	d007      	beq.n	1000a91a <uart_read_complete_callback+0x22>
		user_callback_func(string_input[0]);
1000a90a:	4c0c      	ldr	r4, [pc, #48]	; (1000a93c <uart_read_complete_callback+0x44>)
1000a90c:	7820      	ldrb	r0, [r4, #0]
1000a90e:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000a910:	2201      	movs	r2, #1
1000a912:	0021      	movs	r1, r4
1000a914:	480a      	ldr	r0, [pc, #40]	; (1000a940 <uart_read_complete_callback+0x48>)
1000a916:	4b0b      	ldr	r3, [pc, #44]	; (1000a944 <uart_read_complete_callback+0x4c>)
1000a918:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000a91a:	bd10      	pop	{r4, pc}
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
	if(read_status == UART_READ_WAITING) {
		read_status = UART_READ_DONE;
1000a91c:	3201      	adds	r2, #1
1000a91e:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000a920:	4b05      	ldr	r3, [pc, #20]	; (1000a938 <uart_read_complete_callback+0x40>)
1000a922:	681b      	ldr	r3, [r3, #0]
1000a924:	2b00      	cmp	r3, #0
1000a926:	d1f8      	bne.n	1000a91a <uart_read_complete_callback+0x22>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000a928:	2102      	movs	r1, #2
1000a92a:	4805      	ldr	r0, [pc, #20]	; (1000a940 <uart_read_complete_callback+0x48>)
1000a92c:	4b06      	ldr	r3, [pc, #24]	; (1000a948 <uart_read_complete_callback+0x50>)
1000a92e:	4798      	blx	r3
1000a930:	e7f3      	b.n	1000a91a <uart_read_complete_callback+0x22>
1000a932:	46c0      	nop			; (mov r8, r8)
1000a934:	10014c18 	.word	0x10014c18
1000a938:	10014c20 	.word	0x10014c20
1000a93c:	10014c1c 	.word	0x10014c1c
1000a940:	1001563c 	.word	0x1001563c
1000a944:	1000b849 	.word	0x1000b849
1000a948:	1000b8a5 	.word	0x1000b8a5

1000a94c <serial_console_init>:
		//Nothing to do.
	}
}

void serial_console_init(void)
{
1000a94c:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000a94e:	2100      	movs	r1, #0
1000a950:	4b19      	ldr	r3, [pc, #100]	; (1000a9b8 <serial_console_init+0x6c>)
1000a952:	2000      	movs	r0, #0
1000a954:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000a956:	4c19      	ldr	r4, [pc, #100]	; (1000a9bc <serial_console_init+0x70>)
1000a958:	4b19      	ldr	r3, [pc, #100]	; (1000a9c0 <serial_console_init+0x74>)
1000a95a:	0020      	movs	r0, r4
1000a95c:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000a95e:	23e1      	movs	r3, #225	; 0xe1
1000a960:	025b      	lsls	r3, r3, #9
1000a962:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000a964:	2203      	movs	r2, #3
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);

	uart_get_config_defaults(&config_uart);

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000a966:	2302      	movs	r3, #2
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000a968:	4d16      	ldr	r5, [pc, #88]	; (1000a9c4 <serial_console_init+0x78>)
1000a96a:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000a96c:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000a96e:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000a970:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000a972:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000a974:	6263      	str	r3, [r4, #36]	; 0x24
	uart_get_config_defaults(&config_uart);

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000a976:	3201      	adds	r2, #1
1000a978:	4b13      	ldr	r3, [pc, #76]	; (1000a9c8 <serial_console_init+0x7c>)
1000a97a:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000a97c:	3201      	adds	r2, #1
1000a97e:	601d      	str	r5, [r3, #0]
1000a980:	6162      	str	r2, [r4, #20]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000a982:	4b12      	ldr	r3, [pc, #72]	; (1000a9cc <serial_console_init+0x80>)
1000a984:	4a12      	ldr	r2, [pc, #72]	; (1000a9d0 <serial_console_init+0x84>)
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000a986:	0028      	movs	r0, r5
1000a988:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000a98a:	4a12      	ldr	r2, [pc, #72]	; (1000a9d4 <serial_console_init+0x88>)
1000a98c:	4b12      	ldr	r3, [pc, #72]	; (1000a9d8 <serial_console_init+0x8c>)
1000a98e:	4913      	ldr	r1, [pc, #76]	; (1000a9dc <serial_console_init+0x90>)
1000a990:	601a      	str	r2, [r3, #0]
1000a992:	0022      	movs	r2, r4
1000a994:	4b12      	ldr	r3, [pc, #72]	; (1000a9e0 <serial_console_init+0x94>)
1000a996:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000a998:	4e12      	ldr	r6, [pc, #72]	; (1000a9e4 <serial_console_init+0x98>)
1000a99a:	4c13      	ldr	r4, [pc, #76]	; (1000a9e8 <serial_console_init+0x9c>)
1000a99c:	6833      	ldr	r3, [r6, #0]
1000a99e:	2100      	movs	r1, #0
1000a9a0:	6898      	ldr	r0, [r3, #8]
1000a9a2:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000a9a4:	6833      	ldr	r3, [r6, #0]
1000a9a6:	2100      	movs	r1, #0
1000a9a8:	6858      	ldr	r0, [r3, #4]
1000a9aa:	47a0      	blx	r4
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000a9ac:	0028      	movs	r0, r5
1000a9ae:	2202      	movs	r2, #2
1000a9b0:	490e      	ldr	r1, [pc, #56]	; (1000a9ec <serial_console_init+0xa0>)
1000a9b2:	4b0f      	ldr	r3, [pc, #60]	; (1000a9f0 <serial_console_init+0xa4>)
1000a9b4:	4798      	blx	r3
}
1000a9b6:	bd70      	pop	{r4, r5, r6, pc}
1000a9b8:	1000bfe9 	.word	0x1000bfe9
1000a9bc:	10015660 	.word	0x10015660
1000a9c0:	1000b64d 	.word	0x1000b64d
1000a9c4:	1001563c 	.word	0x1001563c
1000a9c8:	10015988 	.word	0x10015988
1000a9cc:	10015984 	.word	0x10015984
1000a9d0:	1000a8e1 	.word	0x1000a8e1
1000a9d4:	1000a8c9 	.word	0x1000a8c9
1000a9d8:	10015980 	.word	0x10015980
1000a9dc:	40004000 	.word	0x40004000
1000a9e0:	1000b679 	.word	0x1000b679
1000a9e4:	100137cc 	.word	0x100137cc
1000a9e8:	100117c9 	.word	0x100117c9
1000a9ec:	1000a8f9 	.word	0x1000a8f9
1000a9f0:	1000b871 	.word	0x1000b871

1000a9f4 <_time_start>:

void _time_start(unsigned int sec)
{
1000a9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a9f6:	4647      	mov	r7, r8
	system_clock_get_value();
1000a9f8:	4c0e      	ldr	r4, [pc, #56]	; (1000aa34 <_time_start+0x40>)
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
}

void _time_start(unsigned int sec)
{
1000a9fa:	b480      	push	{r7}
1000a9fc:	4680      	mov	r8, r0
	system_clock_get_value();
1000a9fe:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000aa00:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000aa02:	4f0d      	ldr	r7, [pc, #52]	; (1000aa38 <_time_start+0x44>)
1000aa04:	47b8      	blx	r7
1000aa06:	4e0d      	ldr	r6, [pc, #52]	; (1000aa3c <_time_start+0x48>)
1000aa08:	4a0d      	ldr	r2, [pc, #52]	; (1000aa40 <_time_start+0x4c>)
1000aa0a:	4b0e      	ldr	r3, [pc, #56]	; (1000aa44 <_time_start+0x50>)
1000aa0c:	47b0      	blx	r6
1000aa0e:	0004      	movs	r4, r0
1000aa10:	20fa      	movs	r0, #250	; 0xfa
1000aa12:	4643      	mov	r3, r8
1000aa14:	0080      	lsls	r0, r0, #2
1000aa16:	4358      	muls	r0, r3
1000aa18:	000d      	movs	r5, r1
1000aa1a:	47b8      	blx	r7
1000aa1c:	0002      	movs	r2, r0
1000aa1e:	000b      	movs	r3, r1
1000aa20:	0020      	movs	r0, r4
1000aa22:	0029      	movs	r1, r5
1000aa24:	47b0      	blx	r6
1000aa26:	4b08      	ldr	r3, [pc, #32]	; (1000aa48 <_time_start+0x54>)
1000aa28:	4798      	blx	r3
1000aa2a:	4b08      	ldr	r3, [pc, #32]	; (1000aa4c <_time_start+0x58>)
1000aa2c:	6018      	str	r0, [r3, #0]
}
1000aa2e:	bc04      	pop	{r2}
1000aa30:	4690      	mov	r8, r2
1000aa32:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000aa34:	1000c06d 	.word	0x1000c06d
1000aa38:	10011375 	.word	0x10011375
1000aa3c:	1001076d 	.word	0x1001076d
1000aa40:	19feaec7 	.word	0x19feaec7
1000aa44:	3f09d8ef 	.word	0x3f09d8ef
1000aa48:	1000f811 	.word	0x1000f811
1000aa4c:	10014c14 	.word	0x10014c14

1000aa50 <getchar_b11_timeout>:
	return --tick;
}

int getchar_b11_timeout(unsigned int sec)
{
	read_status = UART_READ_WAITING;
1000aa50:	2301      	movs	r3, #1
{
	return --tick;
}

int getchar_b11_timeout(unsigned int sec)
{
1000aa52:	b570      	push	{r4, r5, r6, lr}
	read_status = UART_READ_WAITING;
1000aa54:	4c15      	ldr	r4, [pc, #84]	; (1000aaac <getchar_b11_timeout+0x5c>)
{
	return --tick;
}

int getchar_b11_timeout(unsigned int sec)
{
1000aa56:	0005      	movs	r5, r0
	read_status = UART_READ_WAITING;
1000aa58:	7023      	strb	r3, [r4, #0]
	
	if(user_callback_func == NULL)
1000aa5a:	4b15      	ldr	r3, [pc, #84]	; (1000aab0 <getchar_b11_timeout+0x60>)
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000aa5c:	4e15      	ldr	r6, [pc, #84]	; (1000aab4 <getchar_b11_timeout+0x64>)

int getchar_b11_timeout(unsigned int sec)
{
	read_status = UART_READ_WAITING;
	
	if(user_callback_func == NULL)
1000aa5e:	681b      	ldr	r3, [r3, #0]
1000aa60:	2b00      	cmp	r3, #0
1000aa62:	d01d      	beq.n	1000aaa0 <getchar_b11_timeout+0x50>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);

	_time_start(sec);
1000aa64:	0028      	movs	r0, r5
1000aa66:	4b14      	ldr	r3, [pc, #80]	; (1000aab8 <getchar_b11_timeout+0x68>)
1000aa68:	4798      	blx	r3
	
	string_input[0] = 0;
1000aa6a:	2300      	movs	r3, #0
1000aa6c:	4d13      	ldr	r5, [pc, #76]	; (1000aabc <getchar_b11_timeout+0x6c>)
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000aa6e:	2201      	movs	r2, #1
	if(user_callback_func == NULL)
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);

	_time_start(sec);
	
	string_input[0] = 0;
1000aa70:	702b      	strb	r3, [r5, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000aa72:	0029      	movs	r1, r5
1000aa74:	4b12      	ldr	r3, [pc, #72]	; (1000aac0 <getchar_b11_timeout+0x70>)
1000aa76:	0030      	movs	r0, r6
1000aa78:	4798      	blx	r3
1000aa7a:	4812      	ldr	r0, [pc, #72]	; (1000aac4 <getchar_b11_timeout+0x74>)
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000aa7c:	2100      	movs	r1, #0
1000aa7e:	6803      	ldr	r3, [r0, #0]
1000aa80:	e003      	b.n	1000aa8a <getchar_b11_timeout+0x3a>
	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
}

unsigned int _time_done()
{
	return --tick;
1000aa82:	3b01      	subs	r3, #1
1000aa84:	2101      	movs	r1, #1
	_time_start(sec);
	
	string_input[0] = 0;
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000aa86:	2b00      	cmp	r3, #0
1000aa88:	d008      	beq.n	1000aa9c <getchar_b11_timeout+0x4c>
1000aa8a:	7822      	ldrb	r2, [r4, #0]
1000aa8c:	2a02      	cmp	r2, #2
1000aa8e:	d1f8      	bne.n	1000aa82 <getchar_b11_timeout+0x32>
1000aa90:	2900      	cmp	r1, #0
1000aa92:	d103      	bne.n	1000aa9c <getchar_b11_timeout+0x4c>
	
	read_status = UART_READ_NONE;
1000aa94:	2300      	movs	r3, #0

	return string_input[0];
1000aa96:	7828      	ldrb	r0, [r5, #0]
	string_input[0] = 0;
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
	
	read_status = UART_READ_NONE;
1000aa98:	7023      	strb	r3, [r4, #0]

	return string_input[0];
}
1000aa9a:	bd70      	pop	{r4, r5, r6, pc}
1000aa9c:	6003      	str	r3, [r0, #0]
1000aa9e:	e7f9      	b.n	1000aa94 <getchar_b11_timeout+0x44>
int getchar_b11_timeout(unsigned int sec)
{
	read_status = UART_READ_WAITING;
	
	if(user_callback_func == NULL)
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000aaa0:	2102      	movs	r1, #2
1000aaa2:	0030      	movs	r0, r6
1000aaa4:	4b08      	ldr	r3, [pc, #32]	; (1000aac8 <getchar_b11_timeout+0x78>)
1000aaa6:	4798      	blx	r3
1000aaa8:	e7dc      	b.n	1000aa64 <getchar_b11_timeout+0x14>
1000aaaa:	46c0      	nop			; (mov r8, r8)
1000aaac:	10014c18 	.word	0x10014c18
1000aab0:	10014c20 	.word	0x10014c20
1000aab4:	1001563c 	.word	0x1001563c
1000aab8:	1000a9f5 	.word	0x1000a9f5
1000aabc:	10014c1c 	.word	0x10014c1c
1000aac0:	1000b849 	.word	0x1000b849
1000aac4:	10014c14 	.word	0x10014c14
1000aac8:	1000b885 	.word	0x1000b885

1000aacc <platform_event_post>:
	event->next = platform_event_free_list;
	platform_event_free_list = event;
}

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000aacc:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000aace:	4b0c      	ldr	r3, [pc, #48]	; (1000ab00 <platform_event_post+0x34>)
1000aad0:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000aad2:	2c00      	cmp	r4, #0
1000aad4:	d010      	beq.n	1000aaf8 <platform_event_post+0x2c>
	{
		platform_event_free_list = evt->next;
1000aad6:	6825      	ldr	r5, [r4, #0]
		
		evt->next = NULL;
		evt->data = data;
		evt->data_len = data_len;
1000aad8:	80e2      	strh	r2, [r4, #6]
{
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
	if(evt != NULL)
	{
		platform_event_free_list = evt->next;
1000aada:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000aadc:	2300      	movs	r3, #0
1000aade:	6023      	str	r3, [r4, #0]
		evt->data = data;
		evt->data_len = data_len;
		evt->event_type = event_type;

		if(platform_event_pending_list == NULL)
1000aae0:	4b08      	ldr	r3, [pc, #32]	; (1000ab04 <platform_event_post+0x38>)
	if(evt != NULL)
	{
		platform_event_free_list = evt->next;
		
		evt->next = NULL;
		evt->data = data;
1000aae2:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
		evt->event_type = event_type;

		if(platform_event_pending_list == NULL)
1000aae4:	681a      	ldr	r2, [r3, #0]
		platform_event_free_list = evt->next;
		
		evt->next = NULL;
		evt->data = data;
		evt->data_len = data_len;
		evt->event_type = event_type;
1000aae6:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000aae8:	2a00      	cmp	r2, #0
1000aaea:	d101      	bne.n	1000aaf0 <platform_event_post+0x24>
1000aaec:	e005      	b.n	1000aafa <platform_event_post+0x2e>
1000aaee:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000aaf0:	6813      	ldr	r3, [r2, #0]
1000aaf2:	2b00      	cmp	r3, #0
1000aaf4:	d1fb      	bne.n	1000aaee <platform_event_post+0x22>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000aaf6:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000aaf8:	bd30      	pop	{r4, r5, pc}
		evt->data_len = data_len;
		evt->event_type = event_type;

		if(platform_event_pending_list == NULL)
		{
			platform_event_pending_list = evt;
1000aafa:	601c      	str	r4, [r3, #0]
1000aafc:	e7fc      	b.n	1000aaf8 <platform_event_post+0x2c>
1000aafe:	46c0      	nop			; (mov r8, r8)
1000ab00:	10014c28 	.word	0x10014c28
1000ab04:	10014c24 	.word	0x10014c24

1000ab08 <platform_event_init>:

void platform_event_init()
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
1000ab08:	2200      	movs	r2, #0
	return status;
	
}

void platform_event_init()
{
1000ab0a:	b510      	push	{r4, lr}
1000ab0c:	4c07      	ldr	r4, [pc, #28]	; (1000ab2c <platform_event_init+0x24>)
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
1000ab0e:	4b08      	ldr	r3, [pc, #32]	; (1000ab30 <platform_event_init+0x28>)
1000ab10:	0020      	movs	r0, r4
1000ab12:	601a      	str	r2, [r3, #0]
1000ab14:	0023      	movs	r3, r4
1000ab16:	3078      	adds	r0, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000ab18:	0019      	movs	r1, r3
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000ab1a:	601a      	str	r2, [r3, #0]
1000ab1c:	330c      	adds	r3, #12
1000ab1e:	000a      	movs	r2, r1
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000ab20:	4283      	cmp	r3, r0
1000ab22:	d1f9      	bne.n	1000ab18 <platform_event_init+0x10>
1000ab24:	4b03      	ldr	r3, [pc, #12]	; (1000ab34 <platform_event_init+0x2c>)
1000ab26:	346c      	adds	r4, #108	; 0x6c
1000ab28:	601c      	str	r4, [r3, #0]
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000ab2a:	bd10      	pop	{r4, pc}
1000ab2c:	10014c2c 	.word	0x10014c2c
1000ab30:	10014c24 	.word	0x10014c24
1000ab34:	10014c28 	.word	0x10014c28

1000ab38 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000ab38:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000ab3a:	4b06      	ldr	r3, [pc, #24]	; (1000ab54 <samb11_plf_resume_callback+0x1c>)
1000ab3c:	4a06      	ldr	r2, [pc, #24]	; (1000ab58 <samb11_plf_resume_callback+0x20>)
1000ab3e:	6819      	ldr	r1, [r3, #0]
1000ab40:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000ab42:	685a      	ldr	r2, [r3, #4]
1000ab44:	4b05      	ldr	r3, [pc, #20]	; (1000ab5c <samb11_plf_resume_callback+0x24>)
1000ab46:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000ab48:	4b05      	ldr	r3, [pc, #20]	; (1000ab60 <samb11_plf_resume_callback+0x28>)
1000ab4a:	681b      	ldr	r3, [r3, #0]
1000ab4c:	2b00      	cmp	r3, #0
1000ab4e:	d000      	beq.n	1000ab52 <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000ab50:	4798      	blx	r3
	}
}
1000ab52:	bd10      	pop	{r4, pc}
1000ab54:	10015688 	.word	0x10015688
1000ab58:	4000b00c 	.word	0x4000b00c
1000ab5c:	4000b010 	.word	0x4000b010
1000ab60:	10015964 	.word	0x10015964

1000ab64 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000ab64:	b570      	push	{r4, r5, r6, lr}
1000ab66:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000ab68:	4b13      	ldr	r3, [pc, #76]	; (1000abb8 <at_ke_msg_send+0x54>)
	ke_msg_send(param_ptr);
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000ab6a:	3c0c      	subs	r4, #12
}

static void at_ke_msg_send(void const * param_ptr)
{
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000ab6c:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000ab6e:	4b13      	ldr	r3, [pc, #76]	; (1000abbc <at_ke_msg_send+0x58>)
1000ab70:	681b      	ldr	r3, [r3, #0]
1000ab72:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000ab74:	2c00      	cmp	r4, #0
1000ab76:	d018      	beq.n	1000abaa <at_ke_msg_send+0x46>
1000ab78:	88e3      	ldrh	r3, [r4, #6]
1000ab7a:	2b05      	cmp	r3, #5
1000ab7c:	d015      	beq.n	1000abaa <at_ke_msg_send+0x46>
		if(osc_en == 0)
1000ab7e:	07eb      	lsls	r3, r5, #31
1000ab80:	d414      	bmi.n	1000abac <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000ab82:	4b0f      	ldr	r3, [pc, #60]	; (1000abc0 <at_ke_msg_send+0x5c>)
1000ab84:	2002      	movs	r0, #2
1000ab86:	681b      	ldr	r3, [r3, #0]
1000ab88:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000ab8a:	4b0e      	ldr	r3, [pc, #56]	; (1000abc4 <at_ke_msg_send+0x60>)
1000ab8c:	681b      	ldr	r3, [r3, #0]
1000ab8e:	4798      	blx	r3
1000ab90:	4c0d      	ldr	r4, [pc, #52]	; (1000abc8 <at_ke_msg_send+0x64>)
			while (pwr_wait_BLE_out_of_reset(3));
1000ab92:	2003      	movs	r0, #3
1000ab94:	6823      	ldr	r3, [r4, #0]
1000ab96:	4798      	blx	r3
1000ab98:	2800      	cmp	r0, #0
1000ab9a:	d1fa      	bne.n	1000ab92 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000ab9c:	4b0b      	ldr	r3, [pc, #44]	; (1000abcc <at_ke_msg_send+0x68>)
1000ab9e:	3002      	adds	r0, #2
1000aba0:	681b      	ldr	r3, [r3, #0]
1000aba2:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000aba4:	2201      	movs	r2, #1
1000aba6:	4b0a      	ldr	r3, [pc, #40]	; (1000abd0 <at_ke_msg_send+0x6c>)
1000aba8:	601a      	str	r2, [r3, #0]
		{
			/*  */
			os_sem_up(gstrFwSem);
		}
	}
}
1000abaa:	bd70      	pop	{r4, r5, r6, pc}
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000abac:	4b09      	ldr	r3, [pc, #36]	; (1000abd4 <at_ke_msg_send+0x70>)
1000abae:	6818      	ldr	r0, [r3, #0]
1000abb0:	4b09      	ldr	r3, [pc, #36]	; (1000abd8 <at_ke_msg_send+0x74>)
1000abb2:	681b      	ldr	r3, [r3, #0]
1000abb4:	4798      	blx	r3
		}
	}
}
1000abb6:	e7f8      	b.n	1000abaa <at_ke_msg_send+0x46>
1000abb8:	4000b1ec 	.word	0x4000b1ec
1000abbc:	10014cd4 	.word	0x10014cd4
1000abc0:	10014ccc 	.word	0x10014ccc
1000abc4:	10014cdc 	.word	0x10014cdc
1000abc8:	10014cb8 	.word	0x10014cb8
1000abcc:	10014cc0 	.word	0x10014cc0
1000abd0:	4000b020 	.word	0x4000b020
1000abd4:	10014cc4 	.word	0x10014cc4
1000abd8:	10014cb4 	.word	0x10014cb4

1000abdc <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000abdc:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000abde:	4c0e      	ldr	r4, [pc, #56]	; (1000ac18 <init_port_list+0x3c>)
1000abe0:	2100      	movs	r1, #0
1000abe2:	2232      	movs	r2, #50	; 0x32
1000abe4:	0020      	movs	r0, r4
1000abe6:	4b0d      	ldr	r3, [pc, #52]	; (1000ac1c <init_port_list+0x40>)
1000abe8:	4798      	blx	r3
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
1000abea:	2601      	movs	r6, #1
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000abec:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
1000abee:	2502      	movs	r5, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000abf0:	004a      	lsls	r2, r1, #1
1000abf2:	54a1      	strb	r1, [r4, r2]
		port_list[i].bit.available = 1;
1000abf4:	18a2      	adds	r2, r4, r2
1000abf6:	7853      	ldrb	r3, [r2, #1]
1000abf8:	3101      	adds	r1, #1
1000abfa:	4333      	orrs	r3, r6
		port_list[i].bit.configured = 0;
1000abfc:	b2db      	uxtb	r3, r3
1000abfe:	43ab      	bics	r3, r5
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
1000ac00:	2001      	movs	r0, #1
		port_list[i].bit.configured = 0;
1000ac02:	7053      	strb	r3, [r2, #1]

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000ac04:	2919      	cmp	r1, #25
1000ac06:	d1f3      	bne.n	1000abf0 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000ac08:	7863      	ldrb	r3, [r4, #1]
1000ac0a:	4383      	bics	r3, r0
1000ac0c:	7063      	strb	r3, [r4, #1]
	port_list[1].bit.available = 0;
1000ac0e:	78e3      	ldrb	r3, [r4, #3]
1000ac10:	4383      	bics	r3, r0
1000ac12:	70e3      	strb	r3, [r4, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000ac14:	bd70      	pop	{r4, r5, r6, pc}
1000ac16:	46c0      	nop			; (mov r8, r8)
1000ac18:	100156a4 	.word	0x100156a4
1000ac1c:	100114b1 	.word	0x100114b1

1000ac20 <platform_driver_init>:
	
	//store default values
}

plf_drv_status platform_driver_init()
{
1000ac20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ac22:	4644      	mov	r4, r8
1000ac24:	465f      	mov	r7, fp
1000ac26:	4656      	mov	r6, sl
1000ac28:	464d      	mov	r5, r9
1000ac2a:	b4f0      	push	{r4, r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000ac2c:	4c55      	ldr	r4, [pc, #340]	; (1000ad84 <platform_driver_init+0x164>)
1000ac2e:	7823      	ldrb	r3, [r4, #0]
1000ac30:	2b00      	cmp	r3, #0
1000ac32:	d004      	beq.n	1000ac3e <platform_driver_init+0x1e>
1000ac34:	7823      	ldrb	r3, [r4, #0]
1000ac36:	b2db      	uxtb	r3, r3
1000ac38:	2b01      	cmp	r3, #1
1000ac3a:	d100      	bne.n	1000ac3e <platform_driver_init+0x1e>
1000ac3c:	e09e      	b.n	1000ad7c <platform_driver_init+0x15c>
		init_port_list();
1000ac3e:	4b52      	ldr	r3, [pc, #328]	; (1000ad88 <platform_driver_init+0x168>)
1000ac40:	4798      	blx	r3
}

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000ac42:	4a52      	ldr	r2, [pc, #328]	; (1000ad8c <platform_driver_init+0x16c>)
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000ac44:	4b52      	ldr	r3, [pc, #328]	; (1000ad90 <platform_driver_init+0x170>)
}

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000ac46:	6811      	ldr	r1, [r2, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000ac48:	4d52      	ldr	r5, [pc, #328]	; (1000ad94 <platform_driver_init+0x174>)
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000ac4a:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000ac4c:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000ac4e:	4a52      	ldr	r2, [pc, #328]	; (1000ad98 <platform_driver_init+0x178>)
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000ac50:	4952      	ldr	r1, [pc, #328]	; (1000ad9c <platform_driver_init+0x17c>)
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
	default_samb11_clock_init[0] = regval;
1000ac52:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000ac54:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000ac56:	4b52      	ldr	r3, [pc, #328]	; (1000ada0 <platform_driver_init+0x180>)
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000ac58:	4e52      	ldr	r6, [pc, #328]	; (1000ada4 <platform_driver_init+0x184>)
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000ac5a:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000ac5c:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000ac5e:	6053      	str	r3, [r2, #4]
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
		init_port_list();
		init_clock();
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000ac60:	2300      	movs	r3, #0
1000ac62:	4699      	mov	r9, r3
1000ac64:	464a      	mov	r2, r9
1000ac66:	4b50      	ldr	r3, [pc, #320]	; (1000ada8 <platform_driver_init+0x188>)
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000ac68:	4950      	ldr	r1, [pc, #320]	; (1000adac <platform_driver_init+0x18c>)
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
		init_port_list();
		init_clock();
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000ac6a:	601a      	str	r2, [r3, #0]
1000ac6c:	2280      	movs	r2, #128	; 0x80
1000ac6e:	2380      	movs	r3, #128	; 0x80
1000ac70:	0412      	lsls	r2, r2, #16
1000ac72:	50ea      	str	r2, [r5, r3]
1000ac74:	4693      	mov	fp, r2
1000ac76:	2280      	movs	r2, #128	; 0x80
1000ac78:	0452      	lsls	r2, r2, #17
1000ac7a:	50ea      	str	r2, [r5, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000ac7c:	4b4c      	ldr	r3, [pc, #304]	; (1000adb0 <platform_driver_init+0x190>)
1000ac7e:	4692      	mov	sl, r2
1000ac80:	6033      	str	r3, [r6, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000ac82:	4a4c      	ldr	r2, [pc, #304]	; (1000adb4 <platform_driver_init+0x194>)
1000ac84:	4b4c      	ldr	r3, [pc, #304]	; (1000adb8 <platform_driver_init+0x198>)
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000ac86:	2028      	movs	r0, #40	; 0x28
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000ac88:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000ac8a:	4a4c      	ldr	r2, [pc, #304]	; (1000adbc <platform_driver_init+0x19c>)
1000ac8c:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000ac8e:	4a4c      	ldr	r2, [pc, #304]	; (1000adc0 <platform_driver_init+0x1a0>)
1000ac90:	6811      	ldr	r1, [r2, #0]
1000ac92:	4a4c      	ldr	r2, [pc, #304]	; (1000adc4 <platform_driver_init+0x1a4>)
1000ac94:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000ac96:	4a4c      	ldr	r2, [pc, #304]	; (1000adc8 <platform_driver_init+0x1a8>)
1000ac98:	6811      	ldr	r1, [r2, #0]
1000ac9a:	4a4c      	ldr	r2, [pc, #304]	; (1000adcc <platform_driver_init+0x1ac>)
1000ac9c:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000ac9e:	4a4c      	ldr	r2, [pc, #304]	; (1000add0 <platform_driver_init+0x1b0>)
1000aca0:	494c      	ldr	r1, [pc, #304]	; (1000add4 <platform_driver_init+0x1b4>)
1000aca2:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000aca4:	4a4c      	ldr	r2, [pc, #304]	; (1000add8 <platform_driver_init+0x1b8>)
1000aca6:	494d      	ldr	r1, [pc, #308]	; (1000addc <platform_driver_init+0x1bc>)
1000aca8:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000acaa:	4a4d      	ldr	r2, [pc, #308]	; (1000ade0 <platform_driver_init+0x1c0>)
1000acac:	4690      	mov	r8, r2
1000acae:	4641      	mov	r1, r8
1000acb0:	4a4c      	ldr	r2, [pc, #304]	; (1000ade4 <platform_driver_init+0x1c4>)
1000acb2:	600a      	str	r2, [r1, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000acb4:	4a4c      	ldr	r2, [pc, #304]	; (1000ade8 <platform_driver_init+0x1c8>)
1000acb6:	494d      	ldr	r1, [pc, #308]	; (1000adec <platform_driver_init+0x1cc>)
1000acb8:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000acba:	494d      	ldr	r1, [pc, #308]	; (1000adf0 <platform_driver_init+0x1d0>)
1000acbc:	4a4d      	ldr	r2, [pc, #308]	; (1000adf4 <platform_driver_init+0x1d4>)
1000acbe:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000acc0:	4f4d      	ldr	r7, [pc, #308]	; (1000adf8 <platform_driver_init+0x1d8>)
1000acc2:	4a4e      	ldr	r2, [pc, #312]	; (1000adfc <platform_driver_init+0x1dc>)
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000acc4:	494e      	ldr	r1, [pc, #312]	; (1000ae00 <platform_driver_init+0x1e0>)
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
		apps_resume_cb = (uint32_t *)0x1004003c;
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
		updateuartbr_fp = (void (*)())0x10041FC4;
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000acc6:	603a      	str	r2, [r7, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000acc8:	4a4e      	ldr	r2, [pc, #312]	; (1000ae04 <platform_driver_init+0x1e4>)
1000acca:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000accc:	4a4e      	ldr	r2, [pc, #312]	; (1000ae08 <platform_driver_init+0x1e8>)
1000acce:	494f      	ldr	r1, [pc, #316]	; (1000ae0c <platform_driver_init+0x1ec>)
1000acd0:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000acd2:	4a4f      	ldr	r2, [pc, #316]	; (1000ae10 <platform_driver_init+0x1f0>)
1000acd4:	494f      	ldr	r1, [pc, #316]	; (1000ae14 <platform_driver_init+0x1f4>)
1000acd6:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000acd8:	4a4f      	ldr	r2, [pc, #316]	; (1000ae18 <platform_driver_init+0x1f8>)
1000acda:	4950      	ldr	r1, [pc, #320]	; (1000ae1c <platform_driver_init+0x1fc>)
1000acdc:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000acde:	4a50      	ldr	r2, [pc, #320]	; (1000ae20 <platform_driver_init+0x200>)
1000ace0:	4950      	ldr	r1, [pc, #320]	; (1000ae24 <platform_driver_init+0x204>)
1000ace2:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000ace4:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000ace6:	4950      	ldr	r1, [pc, #320]	; (1000ae28 <platform_driver_init+0x208>)
1000ace8:	6833      	ldr	r3, [r6, #0]
1000acea:	2028      	movs	r0, #40	; 0x28
1000acec:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000acee:	6833      	ldr	r3, [r6, #0]
1000acf0:	494e      	ldr	r1, [pc, #312]	; (1000ae2c <platform_driver_init+0x20c>)
1000acf2:	2027      	movs	r0, #39	; 0x27
1000acf4:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000acf6:	4b4e      	ldr	r3, [pc, #312]	; (1000ae30 <platform_driver_init+0x210>)
		gstrFwSem 		= (void*)0x100405ec;
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
		InternalAppMsgQHandle = (void*)0x10040c20;
		ke_free = (void(*)(void*))0x00019f09;
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000acf8:	2100      	movs	r1, #0
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000acfa:	681a      	ldr	r2, [r3, #0]
1000acfc:	4b4d      	ldr	r3, [pc, #308]	; (1000ae34 <platform_driver_init+0x214>)
		gstrFwSem 		= (void*)0x100405ec;
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
		InternalAppMsgQHandle = (void*)0x10040c20;
		ke_free = (void(*)(void*))0x00019f09;
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000acfe:	484e      	ldr	r0, [pc, #312]	; (1000ae38 <platform_driver_init+0x218>)
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000ad00:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000ad02:	4b4e      	ldr	r3, [pc, #312]	; (1000ae3c <platform_driver_init+0x21c>)
1000ad04:	4a4e      	ldr	r2, [pc, #312]	; (1000ae40 <platform_driver_init+0x220>)
1000ad06:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000ad08:	4b4e      	ldr	r3, [pc, #312]	; (1000ae44 <platform_driver_init+0x224>)
1000ad0a:	4a4f      	ldr	r2, [pc, #316]	; (1000ae48 <platform_driver_init+0x228>)
1000ad0c:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000ad0e:	4b4f      	ldr	r3, [pc, #316]	; (1000ae4c <platform_driver_init+0x22c>)
1000ad10:	4a4f      	ldr	r2, [pc, #316]	; (1000ae50 <platform_driver_init+0x230>)
1000ad12:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000ad14:	4b4f      	ldr	r3, [pc, #316]	; (1000ae54 <platform_driver_init+0x234>)
1000ad16:	4a50      	ldr	r2, [pc, #320]	; (1000ae58 <platform_driver_init+0x238>)
1000ad18:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000ad1a:	4b50      	ldr	r3, [pc, #320]	; (1000ae5c <platform_driver_init+0x23c>)
1000ad1c:	4a50      	ldr	r2, [pc, #320]	; (1000ae60 <platform_driver_init+0x240>)
1000ad1e:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000ad20:	4b50      	ldr	r3, [pc, #320]	; (1000ae64 <platform_driver_init+0x244>)
1000ad22:	4a51      	ldr	r2, [pc, #324]	; (1000ae68 <platform_driver_init+0x248>)
1000ad24:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000ad26:	4b51      	ldr	r3, [pc, #324]	; (1000ae6c <platform_driver_init+0x24c>)
1000ad28:	4a51      	ldr	r2, [pc, #324]	; (1000ae70 <platform_driver_init+0x250>)
1000ad2a:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000ad2c:	22a0      	movs	r2, #160	; 0xa0
1000ad2e:	4b51      	ldr	r3, [pc, #324]	; (1000ae74 <platform_driver_init+0x254>)
1000ad30:	0092      	lsls	r2, r2, #2
1000ad32:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000ad34:	2280      	movs	r2, #128	; 0x80
1000ad36:	4b50      	ldr	r3, [pc, #320]	; (1000ae78 <platform_driver_init+0x258>)
1000ad38:	0092      	lsls	r2, r2, #2
1000ad3a:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000ad3c:	4b4f      	ldr	r3, [pc, #316]	; (1000ae7c <platform_driver_init+0x25c>)
1000ad3e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000ad40:	465b      	mov	r3, fp
1000ad42:	602b      	str	r3, [r5, #0]
1000ad44:	4653      	mov	r3, sl
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000ad46:	464a      	mov	r2, r9
1000ad48:	602b      	str	r3, [r5, #0]
1000ad4a:	4b4d      	ldr	r3, [pc, #308]	; (1000ae80 <platform_driver_init+0x260>)
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
		wakeup_int_unregister_callback(0);
1000ad4c:	4d4d      	ldr	r5, [pc, #308]	; (1000ae84 <platform_driver_init+0x264>)
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000ad4e:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000ad50:	4643      	mov	r3, r8
1000ad52:	4a4d      	ldr	r2, [pc, #308]	; (1000ae88 <platform_driver_init+0x268>)
1000ad54:	681b      	ldr	r3, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
		wakeup_int_unregister_callback(0);
1000ad56:	2000      	movs	r0, #0
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000ad58:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000ad5a:	683b      	ldr	r3, [r7, #0]
1000ad5c:	4a4b      	ldr	r2, [pc, #300]	; (1000ae8c <platform_driver_init+0x26c>)
1000ad5e:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000ad60:	47a8      	blx	r5
		wakeup_int_unregister_callback(1);
1000ad62:	2001      	movs	r0, #1
1000ad64:	47a8      	blx	r5
		wakeup_int_unregister_callback(2);
1000ad66:	2002      	movs	r0, #2
1000ad68:	47a8      	blx	r5
		platform_initialized = 1;
1000ad6a:	2301      	movs	r3, #1
		status = STATUS_SUCCESS;
1000ad6c:	2000      	movs	r0, #0
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
		wakeup_int_unregister_callback(0);
		wakeup_int_unregister_callback(1);
		wakeup_int_unregister_callback(2);
		platform_initialized = 1;
1000ad6e:	7023      	strb	r3, [r4, #0]
	else {
		platform_initialized = 1;
		status = STATUS_ALREADY_INITIALIZED;
	}
	return status;
}
1000ad70:	bc3c      	pop	{r2, r3, r4, r5}
1000ad72:	4690      	mov	r8, r2
1000ad74:	4699      	mov	r9, r3
1000ad76:	46a2      	mov	sl, r4
1000ad78:	46ab      	mov	fp, r5
1000ad7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wakeup_int_unregister_callback(2);
		platform_initialized = 1;
		status = STATUS_SUCCESS;
	}
	else {
		platform_initialized = 1;
1000ad7c:	7023      	strb	r3, [r4, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000ad7e:	2001      	movs	r0, #1
1000ad80:	e7f6      	b.n	1000ad70 <platform_driver_init+0x150>
1000ad82:	46c0      	nop			; (mov r8, r8)
1000ad84:	10014cbc 	.word	0x10014cbc
1000ad88:	1000abdd 	.word	0x1000abdd
1000ad8c:	4000b00c 	.word	0x4000b00c
1000ad90:	fffe0fd3 	.word	0xfffe0fd3
1000ad94:	e000e100 	.word	0xe000e100
1000ad98:	10015688 	.word	0x10015688
1000ad9c:	4000b010 	.word	0x4000b010
1000ada0:	ffffe7c0 	.word	0xffffe7c0
1000ada4:	10015958 	.word	0x10015958
1000ada8:	10014cd8 	.word	0x10014cd8
1000adac:	0001bc51 	.word	0x0001bc51
1000adb0:	000007d7 	.word	0x000007d7
1000adb4:	10015694 	.word	0x10015694
1000adb8:	000007bd 	.word	0x000007bd
1000adbc:	1001595c 	.word	0x1001595c
1000adc0:	100400bc 	.word	0x100400bc
1000adc4:	10014cb0 	.word	0x10014cb0
1000adc8:	100400b8 	.word	0x100400b8
1000adcc:	10014cac 	.word	0x10014cac
1000add0:	10015690 	.word	0x10015690
1000add4:	0001b99f 	.word	0x0001b99f
1000add8:	1001569c 	.word	0x1001569c
1000addc:	0001b9db 	.word	0x0001b9db
1000ade0:	1001596c 	.word	0x1001596c
1000ade4:	1004003c 	.word	0x1004003c
1000ade8:	100156a0 	.word	0x100156a0
1000adec:	10041fc0 	.word	0x10041fc0
1000adf0:	10041fc4 	.word	0x10041fc4
1000adf4:	10015968 	.word	0x10015968
1000adf8:	10015960 	.word	0x10015960
1000adfc:	10041fd4 	.word	0x10041fd4
1000ae00:	10041fd8 	.word	0x10041fd8
1000ae04:	10015698 	.word	0x10015698
1000ae08:	10014ccc 	.word	0x10014ccc
1000ae0c:	0001cbe9 	.word	0x0001cbe9
1000ae10:	10014cc0 	.word	0x10014cc0
1000ae14:	0001cd8f 	.word	0x0001cd8f
1000ae18:	10014cdc 	.word	0x10014cdc
1000ae1c:	0001cea3 	.word	0x0001cea3
1000ae20:	10014cb8 	.word	0x10014cb8
1000ae24:	0001cbcf 	.word	0x0001cbcf
1000ae28:	1000b2bd 	.word	0x1000b2bd
1000ae2c:	1000b25d 	.word	0x1000b25d
1000ae30:	100400e4 	.word	0x100400e4
1000ae34:	10014cd4 	.word	0x10014cd4
1000ae38:	100156d8 	.word	0x100156d8
1000ae3c:	10014ce4 	.word	0x10014ce4
1000ae40:	00019fe9 	.word	0x00019fe9
1000ae44:	10014cb4 	.word	0x10014cb4
1000ae48:	0001dbdd 	.word	0x0001dbdd
1000ae4c:	10014cc8 	.word	0x10014cc8
1000ae50:	0001dc5b 	.word	0x0001dc5b
1000ae54:	10014cc4 	.word	0x10014cc4
1000ae58:	100405ec 	.word	0x100405ec
1000ae5c:	10014cd0 	.word	0x10014cd0
1000ae60:	0001d5e3 	.word	0x0001d5e3
1000ae64:	10014ce8 	.word	0x10014ce8
1000ae68:	10040c20 	.word	0x10040c20
1000ae6c:	10014ca8 	.word	0x10014ca8
1000ae70:	00019f09 	.word	0x00019f09
1000ae74:	100114b1 	.word	0x100114b1
1000ae78:	10015970 	.word	0x10015970
1000ae7c:	1000ab09 	.word	0x1000ab09
1000ae80:	10015964 	.word	0x10015964
1000ae84:	1000b2fd 	.word	0x1000b2fd
1000ae88:	1000ab39 	.word	0x1000ab39
1000ae8c:	1000b319 	.word	0x1000b319

1000ae90 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000ae90:	4b05      	ldr	r3, [pc, #20]	; (1000aea8 <platform_register_ble_msg_handler+0x18>)
1000ae92:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000ae94:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000ae96:	2a01      	cmp	r2, #1
1000ae98:	d001      	beq.n	1000ae9e <platform_register_ble_msg_handler+0xe>
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000ae9a:	0018      	movs	r0, r3
1000ae9c:	4770      	bx	lr

plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
		ble_stack_message_handler = fp;
1000ae9e:	4b03      	ldr	r3, [pc, #12]	; (1000aeac <platform_register_ble_msg_handler+0x1c>)
1000aea0:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000aea2:	2300      	movs	r3, #0
1000aea4:	e7f9      	b.n	1000ae9a <platform_register_ble_msg_handler+0xa>
1000aea6:	46c0      	nop			; (mov r8, r8)
1000aea8:	10014cbc 	.word	0x10014cbc
1000aeac:	10014cd8 	.word	0x10014cd8

1000aeb0 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000aeb0:	b570      	push	{r4, r5, r6, lr}
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000aeb2:	4b0e      	ldr	r3, [pc, #56]	; (1000aeec <platform_interface_send+0x3c>)


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000aeb4:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000aeb6:	681b      	ldr	r3, [r3, #0]
	struct ke_msghdr *p_msg_hdr = (struct ke_msghdr *)((void *)data);
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
1000aeb8:	8840      	ldrh	r0, [r0, #2]
	if(gapm_get_task_from_id != NULL)
1000aeba:	2b00      	cmp	r3, #0
1000aebc:	d014      	beq.n	1000aee8 <platform_interface_send+0x38>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000aebe:	4798      	blx	r3
1000aec0:	0001      	movs	r1, r0
1000aec2:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000aec4:	4d0a      	ldr	r5, [pc, #40]	; (1000aef0 <platform_interface_send+0x40>)
1000aec6:	88a2      	ldrh	r2, [r4, #4]
1000aec8:	682d      	ldr	r5, [r5, #0]
1000aeca:	88e3      	ldrh	r3, [r4, #6]
1000aecc:	8820      	ldrh	r0, [r4, #0]
1000aece:	47a8      	blx	r5
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000aed0:	88e2      	ldrh	r2, [r4, #6]
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000aed2:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000aed4:	2a00      	cmp	r2, #0
1000aed6:	d003      	beq.n	1000aee0 <platform_interface_send+0x30>
		at_ke_msg_send(params);
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000aed8:	0021      	movs	r1, r4
1000aeda:	4b06      	ldr	r3, [pc, #24]	; (1000aef4 <platform_interface_send+0x44>)
1000aedc:	3108      	adds	r1, #8
1000aede:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000aee0:	0028      	movs	r0, r5
1000aee2:	4b05      	ldr	r3, [pc, #20]	; (1000aef8 <platform_interface_send+0x48>)
1000aee4:	4798      	blx	r3
	}
}
1000aee6:	bd70      	pop	{r4, r5, r6, pc}
1000aee8:	0001      	movs	r1, r0
1000aeea:	e7eb      	b.n	1000aec4 <platform_interface_send+0x14>
1000aeec:	10014cb0 	.word	0x10014cb0
1000aef0:	10014ce4 	.word	0x10014ce4
1000aef4:	1001149f 	.word	0x1001149f
1000aef8:	1000ab65 	.word	0x1000ab65

1000aefc <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000aefc:	b570      	push	{r4, r5, r6, lr}
1000aefe:	0016      	movs	r6, r2
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000af00:	020a      	lsls	r2, r1, #8
		at_ke_msg_send(params);
	}
}

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000af02:	001d      	movs	r5, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000af04:	4302      	orrs	r2, r0
1000af06:	20a0      	movs	r0, #160	; 0xa0
1000af08:	4b09      	ldr	r3, [pc, #36]	; (1000af30 <send_plf_int_msg_ind+0x34>)
1000af0a:	2105      	movs	r1, #5
1000af0c:	681c      	ldr	r4, [r3, #0]
1000af0e:	00c0      	lsls	r0, r0, #3
1000af10:	002b      	movs	r3, r5
1000af12:	47a0      	blx	r4
1000af14:	1e04      	subs	r4, r0, #0
											
	//no params
	if(params != NULL) {
1000af16:	d00a      	beq.n	1000af2e <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000af18:	2d00      	cmp	r5, #0
1000af1a:	d005      	beq.n	1000af28 <send_plf_int_msg_ind+0x2c>
1000af1c:	2e00      	cmp	r6, #0
1000af1e:	d003      	beq.n	1000af28 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000af20:	002a      	movs	r2, r5
1000af22:	0031      	movs	r1, r6
1000af24:	4b03      	ldr	r3, [pc, #12]	; (1000af34 <send_plf_int_msg_ind+0x38>)
1000af26:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000af28:	0020      	movs	r0, r4
1000af2a:	4b03      	ldr	r3, [pc, #12]	; (1000af38 <send_plf_int_msg_ind+0x3c>)
1000af2c:	4798      	blx	r3
	}
}
1000af2e:	bd70      	pop	{r4, r5, r6, pc}
1000af30:	10014ce4 	.word	0x10014ce4
1000af34:	1001149f 	.word	0x1001149f
1000af38:	1000ab65 	.word	0x1000ab65

1000af3c <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000af3c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000af3e:	4644      	mov	r4, r8
1000af40:	465f      	mov	r7, fp
1000af42:	4656      	mov	r6, sl
1000af44:	464d      	mov	r5, r9
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000af46:	2300      	movs	r3, #0
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000af48:	b4f0      	push	{r4, r5, r6, r7}
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000af4a:	1e44      	subs	r4, r0, #1
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000af4c:	b089      	sub	sp, #36	; 0x24
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000af4e:	9301      	str	r3, [sp, #4]
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000af50:	1ce3      	adds	r3, r4, #3
1000af52:	d800      	bhi.n	1000af56 <platform_event_wait+0x1a>
1000af54:	e0ea      	b.n	1000b12c <platform_event_wait+0x1f0>
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000af56:	2300      	movs	r3, #0
1000af58:	4699      	mov	r9, r3
1000af5a:	4b88      	ldr	r3, [pc, #544]	; (1000b17c <platform_event_wait+0x240>)
1000af5c:	2700      	movs	r7, #0
1000af5e:	4698      	mov	r8, r3
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000af60:	4b87      	ldr	r3, [pc, #540]	; (1000b180 <platform_event_wait+0x244>)
1000af62:	4d88      	ldr	r5, [pc, #544]	; (1000b184 <platform_event_wait+0x248>)
1000af64:	469b      	mov	fp, r3
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000af66:	4b88      	ldr	r3, [pc, #544]	; (1000b188 <platform_event_wait+0x24c>)
1000af68:	4e88      	ldr	r6, [pc, #544]	; (1000b18c <platform_event_wait+0x250>)
1000af6a:	469a      	mov	sl, r3
1000af6c:	e003      	b.n	1000af76 <platform_event_wait+0x3a>
		}
		else
		{
			status = STATUS_FAILURE;
		}
	}while(bLoopAgain);
1000af6e:	464b      	mov	r3, r9
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000af70:	2707      	movs	r7, #7
		}
	}while(bLoopAgain);
1000af72:	2b00      	cmp	r3, #0
1000af74:	d052      	beq.n	1000b01c <platform_event_wait+0xe0>
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000af76:	4643      	mov	r3, r8
1000af78:	0029      	movs	r1, r5
1000af7a:	6830      	ldr	r0, [r6, #0]
1000af7c:	681b      	ldr	r3, [r3, #0]
1000af7e:	4798      	blx	r3
1000af80:	2800      	cmp	r0, #0
1000af82:	d1f4      	bne.n	1000af6e <platform_event_wait+0x32>
		{
			uint16_t msg_id = rcv_msg->id;
1000af84:	682c      	ldr	r4, [r5, #0]
1000af86:	88a3      	ldrh	r3, [r4, #4]
1000af88:	4699      	mov	r9, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000af8a:	23cd      	movs	r3, #205	; 0xcd
1000af8c:	009b      	lsls	r3, r3, #2
1000af8e:	4599      	cmp	r9, r3
1000af90:	d04f      	beq.n	1000b032 <platform_event_wait+0xf6>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000af92:	8923      	ldrh	r3, [r4, #8]
1000af94:	9303      	str	r3, [sp, #12]
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000af96:	8963      	ldrh	r3, [r4, #10]
1000af98:	9302      	str	r3, [sp, #8]
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000af9a:	9b01      	ldr	r3, [sp, #4]
1000af9c:	2b00      	cmp	r3, #0
1000af9e:	d000      	beq.n	1000afa2 <platform_event_wait+0x66>
1000afa0:	e07b      	b.n	1000b09a <platform_event_wait+0x15e>
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000afa2:	23a0      	movs	r3, #160	; 0xa0
1000afa4:	00db      	lsls	r3, r3, #3
1000afa6:	4599      	cmp	r9, r3
1000afa8:	d051      	beq.n	1000b04e <platform_event_wait+0x112>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000afaa:	4653      	mov	r3, sl
1000afac:	681b      	ldr	r3, [r3, #0]
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000afae:	682c      	ldr	r4, [r5, #0]
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000afb0:	2b00      	cmp	r3, #0
1000afb2:	d100      	bne.n	1000afb6 <platform_event_wait+0x7a>
1000afb4:	e084      	b.n	1000b0c0 <platform_event_wait+0x184>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000afb6:	22cd      	movs	r2, #205	; 0xcd
1000afb8:	88a3      	ldrh	r3, [r4, #4]
1000afba:	0092      	lsls	r2, r2, #2
1000afbc:	4293      	cmp	r3, r2
1000afbe:	d03d      	beq.n	1000b03c <platform_event_wait+0x100>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000afc0:	4a73      	ldr	r2, [pc, #460]	; (1000b190 <platform_event_wait+0x254>)
1000afc2:	4f74      	ldr	r7, [pc, #464]	; (1000b194 <platform_event_wait+0x258>)
1000afc4:	4691      	mov	r9, r2
						ke_msg_hdr->id = rcv_msg->id;
1000afc6:	703b      	strb	r3, [r7, #0]
1000afc8:	0a1b      	lsrs	r3, r3, #8
1000afca:	707b      	strb	r3, [r7, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000afcc:	4b72      	ldr	r3, [pc, #456]	; (1000b198 <platform_event_wait+0x25c>)
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000afce:	6017      	str	r7, [r2, #0]
						ke_msg_hdr->id = rcv_msg->id;
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000afd0:	8920      	ldrh	r0, [r4, #8]
1000afd2:	681b      	ldr	r3, [r3, #0]
1000afd4:	4798      	blx	r3
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000afd6:	464b      	mov	r3, r9
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
						ke_msg_hdr->id = rcv_msg->id;
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000afd8:	7138      	strb	r0, [r7, #4]
1000afda:	0a00      	lsrs	r0, r0, #8
1000afdc:	7178      	strb	r0, [r7, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000afde:	6818      	ldr	r0, [r3, #0]
1000afe0:	682b      	ldr	r3, [r5, #0]
1000afe2:	88db      	ldrh	r3, [r3, #6]
1000afe4:	8043      	strh	r3, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000afe6:	682c      	ldr	r4, [r5, #0]
1000afe8:	8963      	ldrh	r3, [r4, #10]
1000afea:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000afec:	464b      	mov	r3, r9
1000afee:	3008      	adds	r0, #8
1000aff0:	6018      	str	r0, [r3, #0]
						if(rcv_msg->param_len > 0) {
1000aff2:	8962      	ldrh	r2, [r4, #10]
1000aff4:	2a00      	cmp	r2, #0
1000aff6:	d000      	beq.n	1000affa <platform_event_wait+0xbe>
1000aff8:	e092      	b.n	1000b120 <platform_event_wait+0x1e4>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000affa:	4653      	mov	r3, sl
1000affc:	3208      	adds	r2, #8
1000affe:	0038      	movs	r0, r7
1000b000:	681b      	ldr	r3, [r3, #0]
1000b002:	0011      	movs	r1, r2
1000b004:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b006:	2300      	movs	r3, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000b008:	2703      	movs	r7, #3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b00a:	4699      	mov	r9, r3
1000b00c:	682c      	ldr	r4, [r5, #0]
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000b00e:	465b      	mov	r3, fp
1000b010:	0020      	movs	r0, r4
1000b012:	681b      	ldr	r3, [r3, #0]
1000b014:	4798      	blx	r3
		}
		else
		{
			status = STATUS_FAILURE;
		}
	}while(bLoopAgain);
1000b016:	464b      	mov	r3, r9
1000b018:	2b00      	cmp	r3, #0
1000b01a:	d1ac      	bne.n	1000af76 <platform_event_wait+0x3a>
	
	if(bEventTimeoutFlag)
1000b01c:	9b01      	ldr	r3, [sp, #4]
1000b01e:	2b00      	cmp	r3, #0
1000b020:	d150      	bne.n	1000b0c4 <platform_event_wait+0x188>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000b022:	0038      	movs	r0, r7
1000b024:	b009      	add	sp, #36	; 0x24
1000b026:	bc3c      	pop	{r2, r3, r4, r5}
1000b028:	4690      	mov	r8, r2
1000b02a:	4699      	mov	r9, r3
1000b02c:	46a2      	mov	sl, r4
1000b02e:	46ab      	mov	fp, r5
1000b030:	bdf0      	pop	{r4, r5, r6, r7, pc}
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b032:	4b55      	ldr	r3, [pc, #340]	; (1000b188 <platform_event_wait+0x24c>)
1000b034:	681b      	ldr	r3, [r3, #0]
1000b036:	9302      	str	r3, [sp, #8]
1000b038:	2b00      	cmp	r3, #0
1000b03a:	d041      	beq.n	1000b0c0 <platform_event_wait+0x184>
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000b03c:	2301      	movs	r3, #1
1000b03e:	4699      	mov	r9, r3
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000b040:	9b01      	ldr	r3, [sp, #4]
1000b042:	2b00      	cmp	r3, #0
1000b044:	d0e3      	beq.n	1000b00e <platform_event_wait+0xd2>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b046:	2300      	movs	r3, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000b048:	27d0      	movs	r7, #208	; 0xd0
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b04a:	4699      	mov	r9, r3
1000b04c:	e7df      	b.n	1000b00e <platform_event_wait+0xd2>
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000b04e:	4b53      	ldr	r3, [pc, #332]	; (1000b19c <platform_event_wait+0x260>)
1000b050:	881f      	ldrh	r7, [r3, #0]
1000b052:	4699      	mov	r9, r3
1000b054:	9b02      	ldr	r3, [sp, #8]
1000b056:	19da      	adds	r2, r3, r7
1000b058:	23a0      	movs	r3, #160	; 0xa0
1000b05a:	009b      	lsls	r3, r3, #2
1000b05c:	429a      	cmp	r2, r3
1000b05e:	dd03      	ble.n	1000b068 <platform_event_wait+0x12c>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000b060:	2780      	movs	r7, #128	; 0x80
1000b062:	464b      	mov	r3, r9
1000b064:	00bf      	lsls	r7, r7, #2
1000b066:	801f      	strh	r7, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000b068:	0021      	movs	r1, r4
1000b06a:	4b4a      	ldr	r3, [pc, #296]	; (1000b194 <platform_event_wait+0x258>)
1000b06c:	9c02      	ldr	r4, [sp, #8]
1000b06e:	18ff      	adds	r7, r7, r3
1000b070:	0022      	movs	r2, r4
1000b072:	310c      	adds	r1, #12
1000b074:	0038      	movs	r0, r7
1000b076:	4b4a      	ldr	r3, [pc, #296]	; (1000b1a0 <platform_event_wait+0x264>)
1000b078:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000b07a:	0022      	movs	r2, r4
1000b07c:	0039      	movs	r1, r7
1000b07e:	4b49      	ldr	r3, [pc, #292]	; (1000b1a4 <platform_event_wait+0x268>)
1000b080:	9803      	ldr	r0, [sp, #12]
1000b082:	4798      	blx	r3
				plf_event_buff_index += len;
1000b084:	464b      	mov	r3, r9
1000b086:	46a4      	mov	ip, r4
1000b088:	464a      	mov	r2, r9
1000b08a:	881b      	ldrh	r3, [r3, #0]
1000b08c:	682c      	ldr	r4, [r5, #0]
1000b08e:	4463      	add	r3, ip
1000b090:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b092:	2300      	movs	r3, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000b094:	2702      	movs	r7, #2
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b096:	4699      	mov	r9, r3
1000b098:	e7b9      	b.n	1000b00e <platform_event_wait+0xd2>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000b09a:	220d      	movs	r2, #13
1000b09c:	2100      	movs	r1, #0
1000b09e:	a804      	add	r0, sp, #16
1000b0a0:	4b41      	ldr	r3, [pc, #260]	; (1000b1a8 <platform_event_wait+0x26c>)
1000b0a2:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b0a4:	2333      	movs	r3, #51	; 0x33
1000b0a6:	aa04      	add	r2, sp, #16
1000b0a8:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b0aa:	3b30      	subs	r3, #48	; 0x30
1000b0ac:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b0ae:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b0b0:	3302      	adds	r3, #2
1000b0b2:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b0b4:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000b0b6:	210d      	movs	r1, #13
1000b0b8:	0010      	movs	r0, r2
1000b0ba:	4b3c      	ldr	r3, [pc, #240]	; (1000b1ac <platform_event_wait+0x270>)
1000b0bc:	4798      	blx	r3
1000b0be:	e770      	b.n	1000afa2 <platform_event_wait+0x66>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b0c0:	4699      	mov	r9, r3
1000b0c2:	e7a4      	b.n	1000b00e <platform_event_wait+0xd2>
	}while(bLoopAgain);
	
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000b0c4:	6833      	ldr	r3, [r6, #0]
1000b0c6:	4698      	mov	r8, r3
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000b0c8:	2b00      	cmp	r3, #0
1000b0ca:	d053      	beq.n	1000b174 <platform_event_wait+0x238>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000b0cc:	6a1c      	ldr	r4, [r3, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000b0ce:	2314      	movs	r3, #20
1000b0d0:	4443      	add	r3, r8
1000b0d2:	469a      	mov	sl, r3
1000b0d4:	4b36      	ldr	r3, [pc, #216]	; (1000b1b0 <platform_event_wait+0x274>)
1000b0d6:	4650      	mov	r0, sl
1000b0d8:	681b      	ldr	r3, [r3, #0]
1000b0da:	4798      	blx	r3
	while(NULL != current)
1000b0dc:	2500      	movs	r5, #0
1000b0de:	2c00      	cmp	r4, #0
1000b0e0:	d019      	beq.n	1000b116 <platform_event_wait+0x1da>
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b0e2:	26cd      	movs	r6, #205	; 0xcd
				current = prev->pstrNext;
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
				ke_free(current);
1000b0e4:	4b26      	ldr	r3, [pc, #152]	; (1000b180 <platform_event_wait+0x244>)
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000b0e6:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b0e8:	00b6      	lsls	r6, r6, #2
				current = prev->pstrNext;
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
				ke_free(current);
1000b0ea:	469b      	mov	fp, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000b0ec:	4699      	mov	r9, r3
1000b0ee:	4644      	mov	r4, r8
1000b0f0:	e003      	b.n	1000b0fa <platform_event_wait+0x1be>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000b0f2:	0005      	movs	r5, r0
1000b0f4:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000b0f6:	2800      	cmp	r0, #0
1000b0f8:	d00d      	beq.n	1000b116 <platform_event_wait+0x1da>
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b0fa:	6803      	ldr	r3, [r0, #0]
1000b0fc:	889b      	ldrh	r3, [r3, #4]
1000b0fe:	42b3      	cmp	r3, r6
1000b100:	d1f7      	bne.n	1000b0f2 <platform_event_wait+0x1b6>
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
1000b102:	6883      	ldr	r3, [r0, #8]
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
		{
			num_of_freed++;
			if(NULL != prev)
1000b104:	2d00      	cmp	r5, #0
1000b106:	d02f      	beq.n	1000b168 <platform_event_wait+0x22c>
			{
				prev->pstrNext = current->pstrNext;
1000b108:	60ab      	str	r3, [r5, #8]
				ke_free(current);
1000b10a:	464b      	mov	r3, r9
1000b10c:	681b      	ldr	r3, [r3, #0]
1000b10e:	4798      	blx	r3
				current = prev->pstrNext;
1000b110:	68a8      	ldr	r0, [r5, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000b112:	2800      	cmp	r0, #0
1000b114:	d1f1      	bne.n	1000b0fa <platform_event_wait+0x1be>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000b116:	4b27      	ldr	r3, [pc, #156]	; (1000b1b4 <platform_event_wait+0x278>)
1000b118:	4650      	mov	r0, sl
1000b11a:	681b      	ldr	r3, [r3, #0]
1000b11c:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000b11e:	e780      	b.n	1000b022 <platform_event_wait+0xe6>
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
						ke_msg_hdr->param_len = rcv_msg->param_len;
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000b120:	0021      	movs	r1, r4
1000b122:	4b1f      	ldr	r3, [pc, #124]	; (1000b1a0 <platform_event_wait+0x264>)
1000b124:	310c      	adds	r1, #12
1000b126:	4798      	blx	r3
1000b128:	8962      	ldrh	r2, [r4, #10]
1000b12a:	e766      	b.n	1000affa <platform_event_wait+0xbe>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000b12c:	220d      	movs	r2, #13
1000b12e:	2100      	movs	r1, #0
1000b130:	4b1d      	ldr	r3, [pc, #116]	; (1000b1a8 <platform_event_wait+0x26c>)
1000b132:	a804      	add	r0, sp, #16
1000b134:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b136:	2333      	movs	r3, #51	; 0x33
1000b138:	aa04      	add	r2, sp, #16
1000b13a:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b13c:	3b30      	subs	r3, #48	; 0x30
1000b13e:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b140:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b142:	3302      	adds	r3, #2
1000b144:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b146:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000b148:	0a23      	lsrs	r3, r4, #8
1000b14a:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000b14c:	0c23      	lsrs	r3, r4, #16
1000b14e:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000b150:	2301      	movs	r3, #1
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000b152:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000b154:	7313      	strb	r3, [r2, #12]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000b156:	0e24      	lsrs	r4, r4, #24
	
	msg[u16TxLen++] = ((1) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000b158:	4b14      	ldr	r3, [pc, #80]	; (1000b1ac <platform_event_wait+0x270>)
1000b15a:	210d      	movs	r1, #13
1000b15c:	0010      	movs	r0, r2
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000b15e:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000b160:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000b162:	2301      	movs	r3, #1
1000b164:	9301      	str	r3, [sp, #4]
1000b166:	e6f6      	b.n	1000af56 <platform_event_wait+0x1a>
				ke_free(current);
				current = prev->pstrNext;
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000b168:	6223      	str	r3, [r4, #32]
				ke_free(current);
1000b16a:	465b      	mov	r3, fp
1000b16c:	681b      	ldr	r3, [r3, #0]
1000b16e:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000b170:	6a20      	ldr	r0, [r4, #32]
1000b172:	e7c0      	b.n	1000b0f6 <platform_event_wait+0x1ba>
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000b174:	464b      	mov	r3, r9
1000b176:	6a1b      	ldr	r3, [r3, #32]
1000b178:	deff      	udf	#255	; 0xff
1000b17a:	46c0      	nop			; (mov r8, r8)
1000b17c:	10014cd0 	.word	0x10014cd0
1000b180:	10014ca8 	.word	0x10014ca8
1000b184:	10014ca4 	.word	0x10014ca4
1000b188:	10014cd8 	.word	0x10014cd8
1000b18c:	10014ce8 	.word	0x10014ce8
1000b190:	10014ce0 	.word	0x10014ce0
1000b194:	100156d8 	.word	0x100156d8
1000b198:	10014cac 	.word	0x10014cac
1000b19c:	10015970 	.word	0x10015970
1000b1a0:	1001149f 	.word	0x1001149f
1000b1a4:	1000aacd 	.word	0x1000aacd
1000b1a8:	100114b1 	.word	0x100114b1
1000b1ac:	1000aeb1 	.word	0x1000aeb1
1000b1b0:	10014cc8 	.word	0x10014cc8
1000b1b4:	10014cb4 	.word	0x10014cb4

1000b1b8 <acquire_sleep_lock>:
plf_drv_status acquire_sleep_lock()
{
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000b1b8:	2080      	movs	r0, #128	; 0x80
	}
	return status;
}

plf_drv_status acquire_sleep_lock()
{
1000b1ba:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000b1bc:	4b02      	ldr	r3, [pc, #8]	; (1000b1c8 <acquire_sleep_lock+0x10>)
1000b1be:	0200      	lsls	r0, r0, #8
1000b1c0:	681b      	ldr	r3, [r3, #0]
1000b1c2:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000b1c4:	2008      	movs	r0, #8
1000b1c6:	bd10      	pop	{r4, pc}
1000b1c8:	10015690 	.word	0x10015690

1000b1cc <release_message_lock>:

plf_drv_status release_message_lock()
{
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000b1cc:	2080      	movs	r0, #128	; 0x80
#endif	//0
	return status;
}

plf_drv_status release_message_lock()
{
1000b1ce:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000b1d0:	4b02      	ldr	r3, [pc, #8]	; (1000b1dc <release_message_lock+0x10>)
1000b1d2:	01c0      	lsls	r0, r0, #7
1000b1d4:	681b      	ldr	r3, [r3, #0]
1000b1d6:	4798      	blx	r3
	return status;
}
1000b1d8:	2000      	movs	r0, #0
1000b1da:	bd10      	pop	{r4, pc}
1000b1dc:	1001569c 	.word	0x1001569c

1000b1e0 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000b1e0:	2080      	movs	r0, #128	; 0x80
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
	return status;
}

plf_drv_status release_sleep_lock()
{
1000b1e2:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000b1e4:	4c04      	ldr	r4, [pc, #16]	; (1000b1f8 <release_sleep_lock+0x18>)
1000b1e6:	01c0      	lsls	r0, r0, #7
1000b1e8:	6823      	ldr	r3, [r4, #0]
1000b1ea:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000b1ec:	2080      	movs	r0, #128	; 0x80
1000b1ee:	6823      	ldr	r3, [r4, #0]
1000b1f0:	0200      	lsls	r0, r0, #8
1000b1f2:	4798      	blx	r3
	return status;
}
1000b1f4:	2000      	movs	r0, #0
1000b1f6:	bd10      	pop	{r4, pc}
1000b1f8:	1001569c 	.word	0x1001569c

1000b1fc <gpio1_combined_isr_handler>:
void gpio1_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000b1fc:	4914      	ldr	r1, [pc, #80]	; (1000b250 <gpio1_combined_isr_handler+0x54>)
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b1fe:	4815      	ldr	r0, [pc, #84]	; (1000b254 <gpio1_combined_isr_handler+0x58>)
void gpio1_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000b200:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b202:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
void gpio1_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000b204:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b206:	4302      	orrs	r2, r0
1000b208:	b292      	uxth	r2, r2
1000b20a:	850a      	strh	r2, [r1, #40]	; 0x28

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b20c:	05db      	lsls	r3, r3, #23
1000b20e:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000b210:	d018      	beq.n	1000b244 <gpio1_combined_isr_handler+0x48>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000b212:	b2db      	uxtb	r3, r3
1000b214:	425a      	negs	r2, r3
1000b216:	4013      	ands	r3, r2
			while (!(port_gpio1 == 1)) {
1000b218:	2b01      	cmp	r3, #1
1000b21a:	d017      	beq.n	1000b24c <gpio1_combined_isr_handler+0x50>
1000b21c:	2200      	movs	r2, #0
				port_gpio1 = port_gpio1 >> 1;
				index++;
1000b21e:	3201      	adds	r2, #1
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
				port_gpio1 = port_gpio1 >> 1;
1000b220:	085b      	lsrs	r3, r3, #1
				index++;
1000b222:	b2d2      	uxtb	r2, r2
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000b224:	2b01      	cmp	r3, #1
1000b226:	d1fa      	bne.n	1000b21e <gpio1_combined_isr_handler+0x22>
1000b228:	4093      	lsls	r3, r2
1000b22a:	b29b      	uxth	r3, r3
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b22c:	870b      	strh	r3, [r1, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000b22e:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
1000b230:	05db      	lsls	r3, r3, #23
1000b232:	0ddb      	lsrs	r3, r3, #23
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000b234:	d1ea      	bne.n	1000b20c <gpio1_combined_isr_handler+0x10>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000b236:	2180      	movs	r1, #128	; 0x80
1000b238:	4a07      	ldr	r2, [pc, #28]	; (1000b258 <gpio1_combined_isr_handler+0x5c>)
1000b23a:	3381      	adds	r3, #129	; 0x81
1000b23c:	0049      	lsls	r1, r1, #1
1000b23e:	33ff      	adds	r3, #255	; 0xff
1000b240:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000b242:	4770      	bx	lr
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b244:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
1000b246:	4303      	orrs	r3, r0
1000b248:	b29b      	uxth	r3, r3
1000b24a:	e7ef      	b.n	1000b22c <gpio1_combined_isr_handler+0x30>
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000b24c:	2301      	movs	r3, #1
1000b24e:	e7ed      	b.n	1000b22c <gpio1_combined_isr_handler+0x30>
1000b250:	40011000 	.word	0x40011000
1000b254:	ffff8000 	.word	0xffff8000
1000b258:	e000e100 	.word	0xe000e100

1000b25c <gpio0_combined_isr_handler>:
void gpio0_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000b25c:	4914      	ldr	r1, [pc, #80]	; (1000b2b0 <gpio0_combined_isr_handler+0x54>)
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b25e:	4815      	ldr	r0, [pc, #84]	; (1000b2b4 <gpio0_combined_isr_handler+0x58>)
void gpio0_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000b260:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b262:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
void gpio0_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000b264:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b266:	4302      	orrs	r2, r0
1000b268:	b292      	uxth	r2, r2
1000b26a:	850a      	strh	r2, [r1, #40]	; 0x28

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b26c:	05db      	lsls	r3, r3, #23
1000b26e:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000b270:	d017      	beq.n	1000b2a2 <gpio0_combined_isr_handler+0x46>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000b272:	b2db      	uxtb	r3, r3
1000b274:	425a      	negs	r2, r3
1000b276:	4013      	ands	r3, r2
			while (!(port_gpio0 == 1)) {
1000b278:	2b01      	cmp	r3, #1
1000b27a:	d016      	beq.n	1000b2aa <gpio0_combined_isr_handler+0x4e>
1000b27c:	2200      	movs	r2, #0
				port_gpio0 = port_gpio0 >> 1;
				index++;
1000b27e:	3201      	adds	r2, #1
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
				port_gpio0 = port_gpio0 >> 1;
1000b280:	085b      	lsrs	r3, r3, #1
				index++;
1000b282:	b2d2      	uxtb	r2, r2
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000b284:	2b01      	cmp	r3, #1
1000b286:	d1fa      	bne.n	1000b27e <gpio0_combined_isr_handler+0x22>
1000b288:	4093      	lsls	r3, r2
1000b28a:	b29b      	uxth	r3, r3
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b28c:	870b      	strh	r3, [r1, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000b28e:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
1000b290:	05db      	lsls	r3, r3, #23
1000b292:	0ddb      	lsrs	r3, r3, #23
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000b294:	d1ea      	bne.n	1000b26c <gpio0_combined_isr_handler+0x10>
1000b296:	2180      	movs	r1, #128	; 0x80
1000b298:	4a07      	ldr	r2, [pc, #28]	; (1000b2b8 <gpio0_combined_isr_handler+0x5c>)
1000b29a:	3381      	adds	r3, #129	; 0x81
1000b29c:	33ff      	adds	r3, #255	; 0xff
1000b29e:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000b2a0:	4770      	bx	lr
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b2a2:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
1000b2a4:	4303      	orrs	r3, r0
1000b2a6:	b29b      	uxth	r3, r3
1000b2a8:	e7f0      	b.n	1000b28c <gpio0_combined_isr_handler+0x30>
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000b2aa:	2301      	movs	r3, #1
1000b2ac:	e7ee      	b.n	1000b28c <gpio0_combined_isr_handler+0x30>
1000b2ae:	46c0      	nop			; (mov r8, r8)
1000b2b0:	40010000 	.word	0x40010000
1000b2b4:	ffff8000 	.word	0xffff8000
1000b2b8:	e000e100 	.word	0xe000e100

1000b2bc <PORT1_COMB_Handler>:
	NVIC_ClearPendingIRQ(7);
}

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000b2bc:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000b2be:	4c0b      	ldr	r4, [pc, #44]	; (1000b2ec <PORT1_COMB_Handler+0x30>)
1000b2c0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
1000b2c2:	0b5b      	lsrs	r3, r3, #13
1000b2c4:	d102      	bne.n	1000b2cc <PORT1_COMB_Handler+0x10>
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000b2c6:	4b0a      	ldr	r3, [pc, #40]	; (1000b2f0 <PORT1_COMB_Handler+0x34>)
1000b2c8:	4798      	blx	r3
	}
}
1000b2ca:	bd10      	pop	{r4, pc}
#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
		handle_ext_wakeup_isr();
1000b2cc:	4b09      	ldr	r3, [pc, #36]	; (1000b2f4 <PORT1_COMB_Handler+0x38>)
1000b2ce:	681b      	ldr	r3, [r3, #0]
1000b2d0:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000b2d2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
1000b2d4:	8f22      	ldrh	r2, [r4, #56]	; 0x38
1000b2d6:	0b5b      	lsrs	r3, r3, #13
1000b2d8:	035b      	lsls	r3, r3, #13
1000b2da:	4313      	orrs	r3, r2
1000b2dc:	8723      	strh	r3, [r4, #56]	; 0x38
1000b2de:	2180      	movs	r1, #128	; 0x80
1000b2e0:	23c0      	movs	r3, #192	; 0xc0
1000b2e2:	4a05      	ldr	r2, [pc, #20]	; (1000b2f8 <PORT1_COMB_Handler+0x3c>)
1000b2e4:	0049      	lsls	r1, r1, #1
1000b2e6:	005b      	lsls	r3, r3, #1
1000b2e8:	50d1      	str	r1, [r2, r3]
1000b2ea:	e7ee      	b.n	1000b2ca <PORT1_COMB_Handler+0xe>
1000b2ec:	40011000 	.word	0x40011000
1000b2f0:	1000b1fd 	.word	0x1000b1fd
1000b2f4:	1001595c 	.word	0x1001595c
1000b2f8:	e000e100 	.word	0xe000e100

1000b2fc <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000b2fc:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000b2fe:	2802      	cmp	r0, #2
1000b300:	d901      	bls.n	1000b306 <wakeup_int_unregister_callback+0xa>
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000b302:	0018      	movs	r0, r3
1000b304:	4770      	bx	lr
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000b306:	2200      	movs	r2, #0
1000b308:	4b02      	ldr	r3, [pc, #8]	; (1000b314 <wakeup_int_unregister_callback+0x18>)
1000b30a:	0080      	lsls	r0, r0, #2
1000b30c:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000b30e:	2300      	movs	r3, #0
1000b310:	e7f7      	b.n	1000b302 <wakeup_int_unregister_callback+0x6>
1000b312:	46c0      	nop			; (mov r8, r8)
1000b314:	10015974 	.word	0x10015974

1000b318 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000b318:	7802      	ldrb	r2, [r0, #0]
	}
	return status;
}

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000b31a:	b510      	push	{r4, lr}
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000b31c:	6803      	ldr	r3, [r0, #0]
	}
	return status;
}

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000b31e:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000b320:	2a01      	cmp	r2, #1
1000b322:	d01c      	beq.n	1000b35e <wakeup_active_event_callback+0x46>
			callback = wakeup_source_callback[0];
			callback();
		}
		*pu32WakeSource &= ~(0xFF);
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000b324:	041a      	lsls	r2, r3, #16
1000b326:	0e12      	lsrs	r2, r2, #24
1000b328:	2a01      	cmp	r2, #1
1000b32a:	d00e      	beq.n	1000b34a <wakeup_active_event_callback+0x32>
			callback = wakeup_source_callback[1];
			callback();
		}
		*pu32WakeSource &= ~(0xFF << 8);
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000b32c:	021a      	lsls	r2, r3, #8
1000b32e:	0e12      	lsrs	r2, r2, #24
1000b330:	2a01      	cmp	r2, #1
1000b332:	d000      	beq.n	1000b336 <wakeup_active_event_callback+0x1e>
			callback = wakeup_source_callback[2];
			callback();
		}
		*pu32WakeSource &= ~(0xFF << 16);
	}
}
1000b334:	bd10      	pop	{r4, pc}
		}
		*pu32WakeSource &= ~(0xFF << 8);
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
	{
		if(wakeup_source_callback[2] != NULL) {
1000b336:	4a0f      	ldr	r2, [pc, #60]	; (1000b374 <wakeup_active_event_callback+0x5c>)
1000b338:	6892      	ldr	r2, [r2, #8]
1000b33a:	2a00      	cmp	r2, #0
1000b33c:	d001      	beq.n	1000b342 <wakeup_active_event_callback+0x2a>
			callback = wakeup_source_callback[2];
			callback();
1000b33e:	4790      	blx	r2
1000b340:	6823      	ldr	r3, [r4, #0]
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000b342:	4a0d      	ldr	r2, [pc, #52]	; (1000b378 <wakeup_active_event_callback+0x60>)
1000b344:	4013      	ands	r3, r2
1000b346:	6023      	str	r3, [r4, #0]
	}
}
1000b348:	e7f4      	b.n	1000b334 <wakeup_active_event_callback+0x1c>
		}
		*pu32WakeSource &= ~(0xFF);
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
	{
		if(wakeup_source_callback[1] != NULL) {
1000b34a:	4a0a      	ldr	r2, [pc, #40]	; (1000b374 <wakeup_active_event_callback+0x5c>)
1000b34c:	6852      	ldr	r2, [r2, #4]
1000b34e:	2a00      	cmp	r2, #0
1000b350:	d001      	beq.n	1000b356 <wakeup_active_event_callback+0x3e>
			callback = wakeup_source_callback[1];
			callback();
1000b352:	4790      	blx	r2
1000b354:	6823      	ldr	r3, [r4, #0]
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000b356:	4a09      	ldr	r2, [pc, #36]	; (1000b37c <wakeup_active_event_callback+0x64>)
1000b358:	4013      	ands	r3, r2
1000b35a:	6023      	str	r3, [r4, #0]
1000b35c:	e7e6      	b.n	1000b32c <wakeup_active_event_callback+0x14>
{
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
	{
		if(wakeup_source_callback[0] != NULL) {
1000b35e:	4a05      	ldr	r2, [pc, #20]	; (1000b374 <wakeup_active_event_callback+0x5c>)
1000b360:	6812      	ldr	r2, [r2, #0]
1000b362:	2a00      	cmp	r2, #0
1000b364:	d001      	beq.n	1000b36a <wakeup_active_event_callback+0x52>
			callback = wakeup_source_callback[0];
			callback();
1000b366:	4790      	blx	r2
1000b368:	6823      	ldr	r3, [r4, #0]
		}
		*pu32WakeSource &= ~(0xFF);
1000b36a:	22ff      	movs	r2, #255	; 0xff
1000b36c:	4393      	bics	r3, r2
1000b36e:	6023      	str	r3, [r4, #0]
1000b370:	e7d8      	b.n	1000b324 <wakeup_active_event_callback+0xc>
1000b372:	46c0      	nop			; (mov r8, r8)
1000b374:	10015974 	.word	0x10015974
1000b378:	ff00ffff 	.word	0xff00ffff
1000b37c:	ffff00ff 	.word	0xffff00ff

1000b380 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000b380:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b382:	4647      	mov	r7, r8
1000b384:	000c      	movs	r4, r1
1000b386:	b480      	push	{r7}
1000b388:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000b38a:	2800      	cmp	r0, #0
1000b38c:	d111      	bne.n	1000b3b2 <_read+0x32>
		return -1;
	}

	for (; len > 0; --len) {
1000b38e:	2a00      	cmp	r2, #0
1000b390:	dd0d      	ble.n	1000b3ae <_read+0x2e>
1000b392:	4e09      	ldr	r6, [pc, #36]	; (1000b3b8 <_read+0x38>)
1000b394:	4d09      	ldr	r5, [pc, #36]	; (1000b3bc <_read+0x3c>)
1000b396:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000b398:	0021      	movs	r1, r4
1000b39a:	6830      	ldr	r0, [r6, #0]
1000b39c:	682b      	ldr	r3, [r5, #0]
		ptr++;
1000b39e:	3401      	adds	r4, #1
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
1000b3a0:	4798      	blx	r3

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000b3a2:	42bc      	cmp	r4, r7
1000b3a4:	d1f8      	bne.n	1000b398 <_read+0x18>
1000b3a6:	4640      	mov	r0, r8
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000b3a8:	bc04      	pop	{r2}
1000b3aa:	4690      	mov	r8, r2
1000b3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000b3ae:	2000      	movs	r0, #0
1000b3b0:	e7fa      	b.n	1000b3a8 <_read+0x28>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000b3b2:	2001      	movs	r0, #1
1000b3b4:	4240      	negs	r0, r0
1000b3b6:	e7f7      	b.n	1000b3a8 <_read+0x28>
1000b3b8:	10015988 	.word	0x10015988
1000b3bc:	10015980 	.word	0x10015980

1000b3c0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000b3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b3c2:	4647      	mov	r7, r8
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000b3c4:	3801      	subs	r0, #1
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000b3c6:	b480      	push	{r7}
1000b3c8:	000e      	movs	r6, r1
1000b3ca:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000b3cc:	2802      	cmp	r0, #2
1000b3ce:	d810      	bhi.n	1000b3f2 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
1000b3d0:	2a00      	cmp	r2, #0
1000b3d2:	d015      	beq.n	1000b400 <_write+0x40>
1000b3d4:	4b0b      	ldr	r3, [pc, #44]	; (1000b404 <_write+0x44>)
1000b3d6:	2400      	movs	r4, #0
1000b3d8:	4698      	mov	r8, r3
1000b3da:	4f0b      	ldr	r7, [pc, #44]	; (1000b408 <_write+0x48>)
1000b3dc:	e002      	b.n	1000b3e4 <_write+0x24>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000b3de:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000b3e0:	42a5      	cmp	r5, r4
1000b3e2:	d00b      	beq.n	1000b3fc <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000b3e4:	4643      	mov	r3, r8
1000b3e6:	5d31      	ldrb	r1, [r6, r4]
1000b3e8:	6818      	ldr	r0, [r3, #0]
1000b3ea:	683b      	ldr	r3, [r7, #0]
1000b3ec:	4798      	blx	r3
1000b3ee:	2800      	cmp	r0, #0
1000b3f0:	daf5      	bge.n	1000b3de <_write+0x1e>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000b3f2:	2001      	movs	r0, #1
1000b3f4:	4240      	negs	r0, r0
			return -1;
		}
		++nChars;
	}
	return nChars;
}
1000b3f6:	bc04      	pop	{r2}
1000b3f8:	4690      	mov	r8, r2
1000b3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000b3fc:	0028      	movs	r0, r5
1000b3fe:	e7fa      	b.n	1000b3f6 <_write+0x36>

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000b400:	2000      	movs	r0, #0
1000b402:	e7f8      	b.n	1000b3f6 <_write+0x36>
1000b404:	10015988 	.word	0x10015988
1000b408:	10015984 	.word	0x10015984

1000b40c <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000b40c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000b40e:	4b21      	ldr	r3, [pc, #132]	; (1000b494 <uart_rx0_isr_handler+0x88>)
1000b410:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000b412:	6823      	ldr	r3, [r4, #0]
1000b414:	7d1d      	ldrb	r5, [r3, #20]
1000b416:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000b418:	066a      	lsls	r2, r5, #25
1000b41a:	d50d      	bpl.n	1000b438 <uart_rx0_isr_handler+0x2c>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000b41c:	211e      	movs	r1, #30
1000b41e:	2222      	movs	r2, #34	; 0x22
1000b420:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000b422:	7e1a      	ldrb	r2, [r3, #24]
1000b424:	3123      	adds	r1, #35	; 0x23
1000b426:	438a      	bics	r2, r1
1000b428:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b42a:	2321      	movs	r3, #33	; 0x21
1000b42c:	5ce2      	ldrb	r2, [r4, r3]
1000b42e:	3b19      	subs	r3, #25
1000b430:	4213      	tst	r3, r2
1000b432:	d11d      	bne.n	1000b470 <uart_rx0_isr_handler+0x64>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000b434:	6823      	ldr	r3, [r4, #0]
1000b436:	7c1a      	ldrb	r2, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b438:	2201      	movs	r2, #1
1000b43a:	422a      	tst	r2, r5
1000b43c:	d017      	beq.n	1000b46e <uart_rx0_isr_handler+0x62>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000b43e:	7c1b      	ldrb	r3, [r3, #16]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000b440:	6961      	ldr	r1, [r4, #20]
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000b442:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000b444:	700b      	strb	r3, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000b446:	6963      	ldr	r3, [r4, #20]
1000b448:	3301      	adds	r3, #1
1000b44a:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000b44c:	8ba3      	ldrh	r3, [r4, #28]
1000b44e:	3b01      	subs	r3, #1
1000b450:	b29b      	uxth	r3, r3
1000b452:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000b454:	8ba3      	ldrh	r3, [r4, #28]
1000b456:	b29b      	uxth	r3, r3
1000b458:	2b00      	cmp	r3, #0
1000b45a:	d108      	bne.n	1000b46e <uart_rx0_isr_handler+0x62>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b45c:	2121      	movs	r1, #33	; 0x21
1000b45e:	5c60      	ldrb	r0, [r4, r1]
1000b460:	391d      	subs	r1, #29
1000b462:	4201      	tst	r1, r0
1000b464:	d003      	beq.n	1000b46e <uart_rx0_isr_handler+0x62>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000b466:	2020      	movs	r0, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b468:	5c20      	ldrb	r0, [r4, r0]
1000b46a:	4201      	tst	r1, r0
1000b46c:	d108      	bne.n	1000b480 <uart_rx0_isr_handler+0x74>
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
			}
		}
	}
}
1000b46e:	bd70      	pop	{r4, r5, r6, pc}
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000b470:	2220      	movs	r2, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b472:	5ca2      	ldrb	r2, [r4, r2]
1000b474:	4213      	tst	r3, r2
1000b476:	d0dd      	beq.n	1000b434 <uart_rx0_isr_handler+0x28>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000b478:	0020      	movs	r0, r4
1000b47a:	6923      	ldr	r3, [r4, #16]
1000b47c:	4798      	blx	r3
1000b47e:	e7d9      	b.n	1000b434 <uart_rx0_isr_handler+0x28>
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000b480:	311e      	adds	r1, #30
1000b482:	5463      	strb	r3, [r4, r1]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000b484:	6821      	ldr	r1, [r4, #0]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000b486:	0020      	movs	r0, r4
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
				module->hw->RX_INTERRUPT_MASK.reg &=
1000b488:	7e0b      	ldrb	r3, [r1, #24]
1000b48a:	4393      	bics	r3, r2
1000b48c:	760b      	strb	r3, [r1, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000b48e:	68e3      	ldr	r3, [r4, #12]
1000b490:	4798      	blx	r3
			}
		}
	}
}
1000b492:	e7ec      	b.n	1000b46e <uart_rx0_isr_handler+0x62>
1000b494:	1001598c 	.word	0x1001598c

1000b498 <uart_tx0_isr_handler>:
static void uart_tx0_isr_handler(void)
{
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000b498:	2101      	movs	r1, #1
		}
	}
}

static void uart_tx0_isr_handler(void)
{
1000b49a:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000b49c:	4b22      	ldr	r3, [pc, #136]	; (1000b528 <uart_tx0_isr_handler+0x90>)
1000b49e:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000b4a0:	6823      	ldr	r3, [r4, #0]
1000b4a2:	791d      	ldrb	r5, [r3, #4]
1000b4a4:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000b4a6:	4229      	tst	r1, r5
1000b4a8:	d00c      	beq.n	1000b4c4 <uart_tx0_isr_handler+0x2c>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000b4aa:	69a2      	ldr	r2, [r4, #24]
1000b4ac:	7810      	ldrb	r0, [r2, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000b4ae:	3201      	adds	r2, #1
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000b4b0:	b2c0      	uxtb	r0, r0
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000b4b2:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000b4b4:	7018      	strb	r0, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000b4b6:	8be3      	ldrh	r3, [r4, #30]
1000b4b8:	3b01      	subs	r3, #1
1000b4ba:	b29b      	uxth	r3, r3
1000b4bc:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000b4be:	8be3      	ldrh	r3, [r4, #30]
1000b4c0:	2b00      	cmp	r3, #0
1000b4c2:	d022      	beq.n	1000b50a <uart_tx0_isr_handler+0x72>
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000b4c4:	2310      	movs	r3, #16
1000b4c6:	422b      	tst	r3, r5
1000b4c8:	d004      	beq.n	1000b4d4 <uart_tx0_isr_handler+0x3c>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b4ca:	2221      	movs	r2, #33	; 0x21
1000b4cc:	5ca1      	ldrb	r1, [r4, r2]
1000b4ce:	3a20      	subs	r2, #32
1000b4d0:	420a      	tst	r2, r1
1000b4d2:	d10b      	bne.n	1000b4ec <uart_tx0_isr_handler+0x54>
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000b4d4:	2320      	movs	r3, #32
1000b4d6:	422b      	tst	r3, r5
1000b4d8:	d007      	beq.n	1000b4ea <uart_tx0_isr_handler+0x52>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b4da:	2221      	movs	r2, #33	; 0x21
1000b4dc:	5ca1      	ldrb	r1, [r4, r2]
1000b4de:	3a1f      	subs	r2, #31
1000b4e0:	420a      	tst	r2, r1
1000b4e2:	d002      	beq.n	1000b4ea <uart_tx0_isr_handler+0x52>
1000b4e4:	5ce3      	ldrb	r3, [r4, r3]
1000b4e6:	421a      	tst	r2, r3
1000b4e8:	d119      	bne.n	1000b51e <uart_tx0_isr_handler+0x86>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
		}

	}
}
1000b4ea:	bd70      	pop	{r4, r5, r6, pc}
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000b4ec:	2120      	movs	r1, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b4ee:	5c61      	ldrb	r1, [r4, r1]
1000b4f0:	420a      	tst	r2, r1
1000b4f2:	d0ef      	beq.n	1000b4d4 <uart_tx0_isr_handler+0x3c>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000b4f4:	2100      	movs	r1, #0
1000b4f6:	3221      	adds	r2, #33	; 0x21
1000b4f8:	54a1      	strb	r1, [r4, r2]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b4fa:	6821      	ldr	r1, [r4, #0]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000b4fc:	0020      	movs	r0, r4
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b4fe:	7a0a      	ldrb	r2, [r1, #8]
1000b500:	439a      	bics	r2, r3
1000b502:	720a      	strb	r2, [r1, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000b504:	6863      	ldr	r3, [r4, #4]
1000b506:	4798      	blx	r3
1000b508:	e7e4      	b.n	1000b4d4 <uart_tx0_isr_handler+0x3c>
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b50a:	6822      	ldr	r2, [r4, #0]
1000b50c:	7a13      	ldrb	r3, [r2, #8]
1000b50e:	438b      	bics	r3, r1
1000b510:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000b512:	2310      	movs	r3, #16
1000b514:	6822      	ldr	r2, [r4, #0]
1000b516:	7a11      	ldrb	r1, [r2, #8]
1000b518:	430b      	orrs	r3, r1
1000b51a:	7213      	strb	r3, [r2, #8]
1000b51c:	e7d2      	b.n	1000b4c4 <uart_tx0_isr_handler+0x2c>

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000b51e:	68a3      	ldr	r3, [r4, #8]
1000b520:	0020      	movs	r0, r4
1000b522:	4798      	blx	r3
		}

	}
}
1000b524:	e7e1      	b.n	1000b4ea <uart_tx0_isr_handler+0x52>
1000b526:	46c0      	nop			; (mov r8, r8)
1000b528:	1001598c 	.word	0x1001598c

1000b52c <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000b52c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000b52e:	4b21      	ldr	r3, [pc, #132]	; (1000b5b4 <uart_rx1_isr_handler+0x88>)
1000b530:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000b532:	6823      	ldr	r3, [r4, #0]
1000b534:	7d1d      	ldrb	r5, [r3, #20]
1000b536:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000b538:	066a      	lsls	r2, r5, #25
1000b53a:	d50d      	bpl.n	1000b558 <uart_rx1_isr_handler+0x2c>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000b53c:	211e      	movs	r1, #30
1000b53e:	2222      	movs	r2, #34	; 0x22
1000b540:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000b542:	7e1a      	ldrb	r2, [r3, #24]
1000b544:	3123      	adds	r1, #35	; 0x23
1000b546:	438a      	bics	r2, r1
1000b548:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b54a:	2321      	movs	r3, #33	; 0x21
1000b54c:	5ce2      	ldrb	r2, [r4, r3]
1000b54e:	3b19      	subs	r3, #25
1000b550:	4213      	tst	r3, r2
1000b552:	d11d      	bne.n	1000b590 <uart_rx1_isr_handler+0x64>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000b554:	6823      	ldr	r3, [r4, #0]
1000b556:	7c1a      	ldrb	r2, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b558:	2201      	movs	r2, #1
1000b55a:	422a      	tst	r2, r5
1000b55c:	d017      	beq.n	1000b58e <uart_rx1_isr_handler+0x62>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000b55e:	7c1b      	ldrb	r3, [r3, #16]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000b560:	6961      	ldr	r1, [r4, #20]
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000b562:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000b564:	700b      	strb	r3, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000b566:	6963      	ldr	r3, [r4, #20]
1000b568:	3301      	adds	r3, #1
1000b56a:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000b56c:	8ba3      	ldrh	r3, [r4, #28]
1000b56e:	3b01      	subs	r3, #1
1000b570:	b29b      	uxth	r3, r3
1000b572:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000b574:	8ba3      	ldrh	r3, [r4, #28]
1000b576:	b29b      	uxth	r3, r3
1000b578:	2b00      	cmp	r3, #0
1000b57a:	d108      	bne.n	1000b58e <uart_rx1_isr_handler+0x62>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b57c:	2121      	movs	r1, #33	; 0x21
1000b57e:	5c60      	ldrb	r0, [r4, r1]
1000b580:	391d      	subs	r1, #29
1000b582:	4201      	tst	r1, r0
1000b584:	d003      	beq.n	1000b58e <uart_rx1_isr_handler+0x62>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000b586:	2020      	movs	r0, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b588:	5c20      	ldrb	r0, [r4, r0]
1000b58a:	4201      	tst	r1, r0
1000b58c:	d108      	bne.n	1000b5a0 <uart_rx1_isr_handler+0x74>
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
			}
		}
	}
}
1000b58e:	bd70      	pop	{r4, r5, r6, pc}
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000b590:	2220      	movs	r2, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b592:	5ca2      	ldrb	r2, [r4, r2]
1000b594:	4213      	tst	r3, r2
1000b596:	d0dd      	beq.n	1000b554 <uart_rx1_isr_handler+0x28>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000b598:	0020      	movs	r0, r4
1000b59a:	6923      	ldr	r3, [r4, #16]
1000b59c:	4798      	blx	r3
1000b59e:	e7d9      	b.n	1000b554 <uart_rx1_isr_handler+0x28>
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000b5a0:	311e      	adds	r1, #30
1000b5a2:	5463      	strb	r3, [r4, r1]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000b5a4:	6821      	ldr	r1, [r4, #0]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000b5a6:	0020      	movs	r0, r4
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
				module->hw->RX_INTERRUPT_MASK.reg &=
1000b5a8:	7e0b      	ldrb	r3, [r1, #24]
1000b5aa:	4393      	bics	r3, r2
1000b5ac:	760b      	strb	r3, [r1, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000b5ae:	68e3      	ldr	r3, [r4, #12]
1000b5b0:	4798      	blx	r3
			}
		}
	}
}
1000b5b2:	e7ec      	b.n	1000b58e <uart_rx1_isr_handler+0x62>
1000b5b4:	1001598c 	.word	0x1001598c

1000b5b8 <uart_tx1_isr_handler>:
static void uart_tx1_isr_handler(void)
{
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000b5b8:	2101      	movs	r1, #1
		}
	}
}

static void uart_tx1_isr_handler(void)
{
1000b5ba:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000b5bc:	4b22      	ldr	r3, [pc, #136]	; (1000b648 <uart_tx1_isr_handler+0x90>)
1000b5be:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000b5c0:	6823      	ldr	r3, [r4, #0]
1000b5c2:	791d      	ldrb	r5, [r3, #4]
1000b5c4:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000b5c6:	4229      	tst	r1, r5
1000b5c8:	d00c      	beq.n	1000b5e4 <uart_tx1_isr_handler+0x2c>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000b5ca:	69a2      	ldr	r2, [r4, #24]
1000b5cc:	7810      	ldrb	r0, [r2, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000b5ce:	3201      	adds	r2, #1
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000b5d0:	b2c0      	uxtb	r0, r0
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000b5d2:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000b5d4:	7018      	strb	r0, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000b5d6:	8be3      	ldrh	r3, [r4, #30]
1000b5d8:	3b01      	subs	r3, #1
1000b5da:	b29b      	uxth	r3, r3
1000b5dc:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000b5de:	8be3      	ldrh	r3, [r4, #30]
1000b5e0:	2b00      	cmp	r3, #0
1000b5e2:	d022      	beq.n	1000b62a <uart_tx1_isr_handler+0x72>
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000b5e4:	2310      	movs	r3, #16
1000b5e6:	422b      	tst	r3, r5
1000b5e8:	d004      	beq.n	1000b5f4 <uart_tx1_isr_handler+0x3c>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b5ea:	2221      	movs	r2, #33	; 0x21
1000b5ec:	5ca1      	ldrb	r1, [r4, r2]
1000b5ee:	3a20      	subs	r2, #32
1000b5f0:	420a      	tst	r2, r1
1000b5f2:	d10b      	bne.n	1000b60c <uart_tx1_isr_handler+0x54>
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000b5f4:	2320      	movs	r3, #32
1000b5f6:	422b      	tst	r3, r5
1000b5f8:	d007      	beq.n	1000b60a <uart_tx1_isr_handler+0x52>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b5fa:	2221      	movs	r2, #33	; 0x21
1000b5fc:	5ca1      	ldrb	r1, [r4, r2]
1000b5fe:	3a1f      	subs	r2, #31
1000b600:	420a      	tst	r2, r1
1000b602:	d002      	beq.n	1000b60a <uart_tx1_isr_handler+0x52>
1000b604:	5ce3      	ldrb	r3, [r4, r3]
1000b606:	421a      	tst	r2, r3
1000b608:	d119      	bne.n	1000b63e <uart_tx1_isr_handler+0x86>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
		}

	}
}
1000b60a:	bd70      	pop	{r4, r5, r6, pc}
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000b60c:	2120      	movs	r1, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b60e:	5c61      	ldrb	r1, [r4, r1]
1000b610:	420a      	tst	r2, r1
1000b612:	d0ef      	beq.n	1000b5f4 <uart_tx1_isr_handler+0x3c>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000b614:	2100      	movs	r1, #0
1000b616:	3221      	adds	r2, #33	; 0x21
1000b618:	54a1      	strb	r1, [r4, r2]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b61a:	6821      	ldr	r1, [r4, #0]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000b61c:	0020      	movs	r0, r4
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b61e:	7a0a      	ldrb	r2, [r1, #8]
1000b620:	439a      	bics	r2, r3
1000b622:	720a      	strb	r2, [r1, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000b624:	6863      	ldr	r3, [r4, #4]
1000b626:	4798      	blx	r3
1000b628:	e7e4      	b.n	1000b5f4 <uart_tx1_isr_handler+0x3c>
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b62a:	6822      	ldr	r2, [r4, #0]
1000b62c:	7a13      	ldrb	r3, [r2, #8]
1000b62e:	438b      	bics	r3, r1
1000b630:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000b632:	2310      	movs	r3, #16
1000b634:	6822      	ldr	r2, [r4, #0]
1000b636:	7a11      	ldrb	r1, [r2, #8]
1000b638:	430b      	orrs	r3, r1
1000b63a:	7213      	strb	r3, [r2, #8]
1000b63c:	e7d2      	b.n	1000b5e4 <uart_tx1_isr_handler+0x2c>

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000b63e:	68a3      	ldr	r3, [r4, #8]
1000b640:	0020      	movs	r0, r4
1000b642:	4798      	blx	r3
		}

	}
}
1000b644:	e7e1      	b.n	1000b60a <uart_tx1_isr_handler+0x52>
1000b646:	46c0      	nop			; (mov r8, r8)
1000b648:	1001598c 	.word	0x1001598c

1000b64c <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000b64c:	23e1      	movs	r3, #225	; 0xe1
	config->stop_bits = UART_1_STOP_BIT;
	config->parity = UART_NO_PARITY;
	config->flow_control = false;

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000b64e:	2203      	movs	r2, #3
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000b650:	025b      	lsls	r3, r3, #9
1000b652:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000b654:	2300      	movs	r3, #0
	config->stop_bits = UART_1_STOP_BIT;
	config->parity = UART_NO_PARITY;
	config->flow_control = false;

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000b656:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000b658:	3201      	adds	r2, #1
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
	config->data_bits = UART_8_BITS;
1000b65a:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000b65c:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000b65e:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000b660:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000b662:	6102      	str	r2, [r0, #16]
	config->data_bits = UART_8_BITS;
	config->stop_bits = UART_1_STOP_BIT;
	config->parity = UART_NO_PARITY;
	config->flow_control = false;

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000b664:	3302      	adds	r3, #2
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000b666:	3201      	adds	r2, #1
	config->data_bits = UART_8_BITS;
	config->stop_bits = UART_1_STOP_BIT;
	config->parity = UART_NO_PARITY;
	config->flow_control = false;

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000b668:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000b66a:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000b66c:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000b66e:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000b670:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000b672:	6243      	str	r3, [r0, #36]	; 0x24
}
1000b674:	4770      	bx	lr
1000b676:	46c0      	nop			; (mov r8, r8)

1000b678 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000b678:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b67a:	4647      	mov	r7, r8

	/* Assign module pointer to software instance struct */
	module->hw = hw;

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000b67c:	2300      	movs	r3, #0
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000b67e:	b480      	push	{r7}
1000b680:	0017      	movs	r7, r2
	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
	}
	module->rx_buffer_ptr = NULL;
	module->tx_buffer_ptr = NULL;
	module->remaining_rx_buffer_length = 0;
1000b682:	2200      	movs	r2, #0
1000b684:	8383      	strh	r3, [r0, #28]

	/* Assign module pointer to software instance struct */
	module->hw = hw;

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000b686:	6043      	str	r3, [r0, #4]
1000b688:	6083      	str	r3, [r0, #8]
1000b68a:	60c3      	str	r3, [r0, #12]
1000b68c:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000b68e:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000b690:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
	module->remaining_tx_buffer_length = 0;
1000b692:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000b694:	3320      	adds	r3, #32

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000b696:	6001      	str	r1, [r0, #0]
	}
	module->rx_buffer_ptr = NULL;
	module->tx_buffer_ptr = NULL;
	module->remaining_rx_buffer_length = 0;
	module->remaining_tx_buffer_length = 0;
	module->callback_reg_mask = 0;
1000b698:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000b69a:	3301      	adds	r3, #1
1000b69c:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000b69e:	3301      	adds	r3, #1
1000b6a0:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000b6a2:	4b52      	ldr	r3, [pc, #328]	; (1000b7ec <uart_init+0x174>)
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000b6a4:	0005      	movs	r5, r0
	module->remaining_tx_buffer_length = 0;
	module->callback_reg_mask = 0;
	module->callback_enable_mask = 0;
	module->status = STATUS_OK;

	if (hw == UART0) {
1000b6a6:	4299      	cmp	r1, r3
1000b6a8:	d100      	bne.n	1000b6ac <uart_init+0x34>
1000b6aa:	e06c      	b.n	1000b786 <uart_init+0x10e>
		_uart_instances[0] = module;
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000b6ac:	4b50      	ldr	r3, [pc, #320]	; (1000b7f0 <uart_init+0x178>)
1000b6ae:	4299      	cmp	r1, r3
1000b6b0:	d100      	bne.n	1000b6b4 <uart_init+0x3c>
1000b6b2:	e081      	b.n	1000b7b8 <uart_init+0x140>
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000b6b4:	79fa      	ldrb	r2, [r7, #7]
		index = 4;
	} else {
		index = 2;
1000b6b6:	2302      	movs	r3, #2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000b6b8:	2a00      	cmp	r2, #0
1000b6ba:	d000      	beq.n	1000b6be <uart_init+0x46>
		index = 4;
1000b6bc:	3302      	adds	r3, #2
1000b6be:	3b01      	subs	r3, #1
1000b6c0:	b2de      	uxtb	r6, r3
1000b6c2:	4b4c      	ldr	r3, [pc, #304]	; (1000b7f4 <uart_init+0x17c>)
1000b6c4:	003c      	movs	r4, r7
1000b6c6:	4698      	mov	r8, r3
1000b6c8:	3603      	adds	r6, #3
1000b6ca:	00b6      	lsls	r6, r6, #2
1000b6cc:	3408      	adds	r4, #8
1000b6ce:	19be      	adds	r6, r7, r6
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000b6d0:	8a21      	ldrh	r1, [r4, #16]
1000b6d2:	cc01      	ldmia	r4!, {r0}
1000b6d4:	b2c0      	uxtb	r0, r0
1000b6d6:	47c0      	blx	r8

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000b6d8:	42a6      	cmp	r6, r4
1000b6da:	d1f9      	bne.n	1000b6d0 <uart_init+0x58>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b6dc:	682b      	ldr	r3, [r5, #0]
1000b6de:	7d1a      	ldrb	r2, [r3, #20]
1000b6e0:	07d2      	lsls	r2, r2, #31
1000b6e2:	d504      	bpl.n	1000b6ee <uart_init+0x76>
1000b6e4:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000b6e6:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b6e8:	7d1a      	ldrb	r2, [r3, #20]
1000b6ea:	4211      	tst	r1, r2
1000b6ec:	d1fb      	bne.n	1000b6e6 <uart_init+0x6e>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000b6ee:	2100      	movs	r1, #0
1000b6f0:	2220      	movs	r2, #32
1000b6f2:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000b6f4:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000b6f6:	797a      	ldrb	r2, [r7, #5]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	uint8_t config_temp = 0;
1000b6f8:	1e59      	subs	r1, r3, #1
1000b6fa:	418b      	sbcs	r3, r1
1000b6fc:	0159      	lsls	r1, r3, #5
	/* program the uart configuration. */
	if(config->flow_control) {
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000b6fe:	793b      	ldrb	r3, [r7, #4]
1000b700:	4313      	orrs	r3, r2
	switch(config->parity) {
1000b702:	79ba      	ldrb	r2, [r7, #6]
	/* program the uart configuration. */
	if(config->flow_control) {
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000b704:	430b      	orrs	r3, r1
	switch(config->parity) {
1000b706:	2a02      	cmp	r2, #2
1000b708:	d03a      	beq.n	1000b780 <uart_init+0x108>
1000b70a:	d934      	bls.n	1000b776 <uart_init+0xfe>
1000b70c:	2a03      	cmp	r2, #3
1000b70e:	d02f      	beq.n	1000b770 <uart_init+0xf8>
1000b710:	2a04      	cmp	r2, #4
1000b712:	d101      	bne.n	1000b718 <uart_init+0xa0>
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
			break;

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000b714:	220e      	movs	r2, #14
1000b716:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000b718:	2220      	movs	r2, #32
1000b71a:	6829      	ldr	r1, [r5, #0]
1000b71c:	548b      	strb	r3, [r1, r2]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000b71e:	4b36      	ldr	r3, [pc, #216]	; (1000b7f8 <uart_init+0x180>)
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000b720:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000b722:	4798      	blx	r3
	integerpart = clock / baud_rate;
1000b724:	0031      	movs	r1, r6
1000b726:	4b35      	ldr	r3, [pc, #212]	; (1000b7fc <uart_init+0x184>)
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000b728:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000b72a:	4798      	blx	r3
1000b72c:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000b72e:	0400      	lsls	r0, r0, #16
1000b730:	0c00      	lsrs	r0, r0, #16
1000b732:	4370      	muls	r0, r6
	i = 0;
	while(diff > (baud_rate / 16)) {
1000b734:	0931      	lsrs	r1, r6, #4
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
1000b736:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000b738:	2300      	movs	r3, #0
1000b73a:	4281      	cmp	r1, r0
1000b73c:	d207      	bcs.n	1000b74e <uart_init+0xd6>
		i++;
1000b73e:	3301      	adds	r3, #1
1000b740:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000b742:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000b744:	4281      	cmp	r1, r0
1000b746:	d3fa      	bcc.n	1000b73e <uart_init+0xc6>
1000b748:	3301      	adds	r3, #1
1000b74a:	071b      	lsls	r3, r3, #28
1000b74c:	0f5b      	lsrs	r3, r3, #29
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000b74e:	2100      	movs	r1, #0
1000b750:	2028      	movs	r0, #40	; 0x28
1000b752:	682c      	ldr	r4, [r5, #0]
	module->hw->UART_BAUD_RATE.reg =
1000b754:	00d2      	lsls	r2, r2, #3
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000b756:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000b758:	4313      	orrs	r3, r2
1000b75a:	682a      	ldr	r2, [r5, #0]
1000b75c:	b29b      	uxth	r3, r3
1000b75e:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000b760:	682b      	ldr	r3, [r5, #0]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
	
	return STATUS_OK;
}
1000b762:	2000      	movs	r0, #0
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000b764:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000b766:	682b      	ldr	r3, [r5, #0]
1000b768:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000b76a:	bc04      	pop	{r2}
1000b76c:	4690      	mov	r8, r2
1000b76e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
			break;

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000b770:	220a      	movs	r2, #10
1000b772:	4313      	orrs	r3, r2
			break;
1000b774:	e7d0      	b.n	1000b718 <uart_init+0xa0>
	if(config->flow_control) {
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
	switch(config->parity) {
1000b776:	2a01      	cmp	r2, #1
1000b778:	d1ce      	bne.n	1000b718 <uart_init+0xa0>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000b77a:	2202      	movs	r2, #2
1000b77c:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000b77e:	e7cb      	b.n	1000b718 <uart_init+0xa0>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000b780:	2206      	movs	r2, #6
1000b782:	4313      	orrs	r3, r2
			break;
1000b784:	e7c8      	b.n	1000b718 <uart_init+0xa0>
	module->callback_reg_mask = 0;
	module->callback_enable_mask = 0;
	module->status = STATUS_OK;

	if (hw == UART0) {
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000b786:	4c1e      	ldr	r4, [pc, #120]	; (1000b800 <uart_init+0x188>)
1000b788:	2009      	movs	r0, #9
1000b78a:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000b78c:	200a      	movs	r0, #10
1000b78e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000b790:	4c1c      	ldr	r4, [pc, #112]	; (1000b804 <uart_init+0x18c>)
1000b792:	2009      	movs	r0, #9
1000b794:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000b796:	200a      	movs	r0, #10
1000b798:	47a0      	blx	r4
		_uart_instances[0] = module;
1000b79a:	4b1b      	ldr	r3, [pc, #108]	; (1000b808 <uart_init+0x190>)
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000b79c:	491b      	ldr	r1, [pc, #108]	; (1000b80c <uart_init+0x194>)
1000b79e:	2010      	movs	r0, #16
1000b7a0:	4c1b      	ldr	r4, [pc, #108]	; (1000b810 <uart_init+0x198>)
	if (hw == UART0) {
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
		system_peripheral_reset(PERIPHERAL_UART0_IF);
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
		_uart_instances[0] = module;
1000b7a2:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000b7a4:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000b7a6:	491b      	ldr	r1, [pc, #108]	; (1000b814 <uart_init+0x19c>)
1000b7a8:	2011      	movs	r0, #17
1000b7aa:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b7ac:	2201      	movs	r2, #1
1000b7ae:	4b1a      	ldr	r3, [pc, #104]	; (1000b818 <uart_init+0x1a0>)
1000b7b0:	601a      	str	r2, [r3, #0]
1000b7b2:	3201      	adds	r2, #1
1000b7b4:	601a      	str	r2, [r3, #0]
1000b7b6:	e77d      	b.n	1000b6b4 <uart_init+0x3c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000b7b8:	4c11      	ldr	r4, [pc, #68]	; (1000b800 <uart_init+0x188>)
1000b7ba:	200b      	movs	r0, #11
1000b7bc:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000b7be:	200c      	movs	r0, #12
1000b7c0:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000b7c2:	4c10      	ldr	r4, [pc, #64]	; (1000b804 <uart_init+0x18c>)
1000b7c4:	200b      	movs	r0, #11
1000b7c6:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000b7c8:	200c      	movs	r0, #12
1000b7ca:	47a0      	blx	r4
		_uart_instances[1] = module;
1000b7cc:	4b0e      	ldr	r3, [pc, #56]	; (1000b808 <uart_init+0x190>)
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000b7ce:	4913      	ldr	r1, [pc, #76]	; (1000b81c <uart_init+0x1a4>)
1000b7d0:	2012      	movs	r0, #18
1000b7d2:	4c0f      	ldr	r4, [pc, #60]	; (1000b810 <uart_init+0x198>)
	} else if (hw == UART1) {
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
		system_peripheral_reset(PERIPHERAL_UART1_IF);
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
		_uart_instances[1] = module;
1000b7d4:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000b7d6:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000b7d8:	4911      	ldr	r1, [pc, #68]	; (1000b820 <uart_init+0x1a8>)
1000b7da:	2013      	movs	r0, #19
1000b7dc:	47a0      	blx	r4
1000b7de:	2204      	movs	r2, #4
1000b7e0:	4b0d      	ldr	r3, [pc, #52]	; (1000b818 <uart_init+0x1a0>)
1000b7e2:	601a      	str	r2, [r3, #0]
1000b7e4:	3204      	adds	r2, #4
1000b7e6:	601a      	str	r2, [r3, #0]
1000b7e8:	e764      	b.n	1000b6b4 <uart_init+0x3c>
1000b7ea:	46c0      	nop			; (mov r8, r8)
1000b7ec:	40004000 	.word	0x40004000
1000b7f0:	40005000 	.word	0x40005000
1000b7f4:	1000bbc1 	.word	0x1000bbc1
1000b7f8:	1000c06d 	.word	0x1000c06d
1000b7fc:	1000f3ad 	.word	0x1000f3ad
1000b800:	1000c381 	.word	0x1000c381
1000b804:	1000c079 	.word	0x1000c079
1000b808:	1001598c 	.word	0x1001598c
1000b80c:	1000b40d 	.word	0x1000b40d
1000b810:	1000c799 	.word	0x1000c799
1000b814:	1000b499 	.word	0x1000b499
1000b818:	e000e100 	.word	0xe000e100
1000b81c:	1000b52d 	.word	0x1000b52d
1000b820:	1000b5b9 	.word	0x1000b5b9

1000b824 <uart_write_wait>:
* \return Status of the operation.
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
1000b824:	6802      	ldr	r2, [r0, #0]
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000b826:	2001      	movs	r0, #1
1000b828:	7913      	ldrb	r3, [r2, #4]
1000b82a:	4218      	tst	r0, r3
1000b82c:	d0fc      	beq.n	1000b828 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
	
	return STATUS_OK;
}
1000b82e:	2000      	movs	r0, #0
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000b830:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000b832:	4770      	bx	lr

1000b834 <uart_read_wait>:
* \return Status of the operation.
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
1000b834:	6802      	ldr	r2, [r0, #0]
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000b836:	2001      	movs	r0, #1
1000b838:	7d13      	ldrb	r3, [r2, #20]
1000b83a:	4218      	tst	r0, r3
1000b83c:	d0fc      	beq.n	1000b838 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000b83e:	7c13      	ldrb	r3, [r2, #16]
	
	return STATUS_OK;
}
1000b840:	2000      	movs	r0, #0
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000b842:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000b844:	4770      	bx	lr
1000b846:	46c0      	nop			; (mov r8, r8)

1000b848 <uart_read_buffer_job>:
 * \retval  STATUS_ERR_DENIED       If the receiver is not enabled
 * \retval  STATUS_ERR_INVALID_ARG  If requested read length was zero
 */
enum status_code uart_read_buffer_job(struct uart_module *const module,
		uint8_t *rx_data, uint16_t length)
{
1000b848:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000b84a:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000b84c:	2a00      	cmp	r2, #0
1000b84e:	d101      	bne.n	1000b854 <uart_read_buffer_job+0xc>
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
}
1000b850:	0018      	movs	r0, r3
1000b852:	bd10      	pop	{r4, pc}
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000b854:	2422      	movs	r4, #34	; 0x22
1000b856:	5d03      	ldrb	r3, [r0, r4]
1000b858:	b2db      	uxtb	r3, r3
1000b85a:	2b05      	cmp	r3, #5
1000b85c:	d0f8      	beq.n	1000b850 <uart_read_buffer_job+0x8>

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
	module->rx_buffer_ptr = rx_data;
	module->status = STATUS_BUSY;
1000b85e:	2305      	movs	r3, #5
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000b860:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
	module->status = STATUS_BUSY;

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000b862:	2201      	movs	r2, #1
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
	module->rx_buffer_ptr = rx_data;
1000b864:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000b866:	5503      	strb	r3, [r0, r4]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000b868:	6803      	ldr	r3, [r0, #0]
1000b86a:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000b86c:	2300      	movs	r3, #0
1000b86e:	e7ef      	b.n	1000b850 <uart_read_buffer_job+0x8>

1000b870 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000b870:	0093      	lsls	r3, r2, #2
1000b872:	18c3      	adds	r3, r0, r3
1000b874:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000b876:	2301      	movs	r3, #1
1000b878:	2120      	movs	r1, #32
1000b87a:	4093      	lsls	r3, r2
1000b87c:	5c42      	ldrb	r2, [r0, r1]
1000b87e:	4313      	orrs	r3, r2
1000b880:	5443      	strb	r3, [r0, r1]
}
1000b882:	4770      	bx	lr

1000b884 <uart_enable_callback>:
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000b884:	2301      	movs	r3, #1
1000b886:	2221      	movs	r2, #33	; 0x21
1000b888:	408b      	lsls	r3, r1
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000b88a:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000b88c:	5c84      	ldrb	r4, [r0, r2]
1000b88e:	4323      	orrs	r3, r4
1000b890:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000b892:	2901      	cmp	r1, #1
1000b894:	d104      	bne.n	1000b8a0 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000b896:	2320      	movs	r3, #32
1000b898:	6802      	ldr	r2, [r0, #0]
1000b89a:	7a11      	ldrb	r1, [r2, #8]
1000b89c:	430b      	orrs	r3, r1
1000b89e:	7213      	strb	r3, [r2, #8]
	}
}
1000b8a0:	bd10      	pop	{r4, pc}
1000b8a2:	46c0      	nop			; (mov r8, r8)

1000b8a4 <uart_disable_callback>:
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000b8a4:	2201      	movs	r2, #1
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000b8a6:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000b8a8:	2421      	movs	r4, #33	; 0x21
1000b8aa:	408a      	lsls	r2, r1
1000b8ac:	5d03      	ldrb	r3, [r0, r4]
1000b8ae:	4393      	bics	r3, r2
1000b8b0:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000b8b2:	2901      	cmp	r1, #1
1000b8b4:	d104      	bne.n	1000b8c0 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000b8b6:	6802      	ldr	r2, [r0, #0]
1000b8b8:	311f      	adds	r1, #31
1000b8ba:	7a13      	ldrb	r3, [r2, #8]
1000b8bc:	438b      	bics	r3, r1
1000b8be:	7213      	strb	r3, [r2, #8]
	}

}
1000b8c0:	bd10      	pop	{r4, pc}
1000b8c2:	46c0      	nop			; (mov r8, r8)

1000b8c4 <gpio_port0_isr_handler>:
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000b8c4:	2300      	movs	r3, #0

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000b8c6:	2001      	movs	r0, #1
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000b8c8:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000b8ca:	4d12      	ldr	r5, [pc, #72]	; (1000b914 <gpio_port0_isr_handler+0x50>)
1000b8cc:	682e      	ldr	r6, [r5, #0]
1000b8ce:	8f31      	ldrh	r1, [r6, #56]	; 0x38
1000b8d0:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000b8d2:	0002      	movs	r2, r0
1000b8d4:	409a      	lsls	r2, r3
1000b8d6:	2401      	movs	r4, #1
1000b8d8:	4211      	tst	r1, r2
1000b8da:	d109      	bne.n	1000b8f0 <gpio_port0_isr_handler+0x2c>
1000b8dc:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000b8de:	2b10      	cmp	r3, #16
1000b8e0:	d1f7      	bne.n	1000b8d2 <gpio_port0_isr_handler+0xe>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000b8e2:	2180      	movs	r1, #128	; 0x80
1000b8e4:	23c0      	movs	r3, #192	; 0xc0
1000b8e6:	4a0c      	ldr	r2, [pc, #48]	; (1000b918 <gpio_port0_isr_handler+0x54>)
1000b8e8:	0409      	lsls	r1, r1, #16
1000b8ea:	005b      	lsls	r3, r3, #1
1000b8ec:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000b8ee:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b8f0:	b292      	uxth	r2, r2
1000b8f2:	8732      	strh	r2, [r6, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000b8f4:	2246      	movs	r2, #70	; 0x46
1000b8f6:	5aaa      	ldrh	r2, [r5, r2]
1000b8f8:	411a      	asrs	r2, r3
1000b8fa:	4214      	tst	r4, r2
1000b8fc:	d0f1      	beq.n	1000b8e2 <gpio_port0_isr_handler+0x1e>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000b8fe:	2244      	movs	r2, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000b900:	5aaa      	ldrh	r2, [r5, r2]
1000b902:	411a      	asrs	r2, r3
1000b904:	4214      	tst	r4, r2
1000b906:	d0ec      	beq.n	1000b8e2 <gpio_port0_isr_handler+0x1e>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000b908:	009b      	lsls	r3, r3, #2
1000b90a:	18eb      	adds	r3, r5, r3
1000b90c:	685b      	ldr	r3, [r3, #4]
1000b90e:	4798      	blx	r3
1000b910:	e7e7      	b.n	1000b8e2 <gpio_port0_isr_handler+0x1e>
1000b912:	46c0      	nop			; (mov r8, r8)
1000b914:	10015994 	.word	0x10015994
1000b918:	e000e100 	.word	0xe000e100

1000b91c <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000b91c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b91e:	4657      	mov	r7, sl
1000b920:	464e      	mov	r6, r9
1000b922:	4645      	mov	r5, r8
1000b924:	b4e0      	push	{r5, r6, r7}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000b926:	4e1b      	ldr	r6, [pc, #108]	; (1000b994 <gpio_port1_isr_handler+0x78>)
1000b928:	2400      	movs	r4, #0
1000b92a:	6cb3      	ldr	r3, [r6, #72]	; 0x48
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
1000b92c:	2501      	movs	r5, #1
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000b92e:	8f1f      	ldrh	r7, [r3, #56]	; 0x38
1000b930:	b2bf      	uxth	r7, r7
1000b932:	0b7b      	lsrs	r3, r7, #13
1000b934:	035b      	lsls	r3, r3, #13
1000b936:	4698      	mov	r8, r3

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
			aon_handle_ext_wakeup_isr();
1000b938:	4b17      	ldr	r3, [pc, #92]	; (1000b998 <gpio_port1_isr_handler+0x7c>)
1000b93a:	469a      	mov	sl, r3
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000b93c:	238e      	movs	r3, #142	; 0x8e
1000b93e:	4699      	mov	r9, r3
1000b940:	e013      	b.n	1000b96a <gpio_port1_isr_handler+0x4e>
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
1000b942:	002b      	movs	r3, r5
1000b944:	40a3      	lsls	r3, r4
1000b946:	421f      	tst	r7, r3
1000b948:	d00c      	beq.n	1000b964 <gpio_port1_isr_handler+0x48>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b94a:	6cb2      	ldr	r2, [r6, #72]	; 0x48
1000b94c:	b29b      	uxth	r3, r3
1000b94e:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000b950:	464b      	mov	r3, r9
1000b952:	5af3      	ldrh	r3, [r6, r3]
1000b954:	4123      	asrs	r3, r4
1000b956:	421d      	tst	r5, r3
1000b958:	d004      	beq.n	1000b964 <gpio_port1_isr_handler+0x48>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000b95a:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000b95c:	5af3      	ldrh	r3, [r6, r3]
1000b95e:	4123      	asrs	r3, r4
1000b960:	421d      	tst	r5, r3
1000b962:	d107      	bne.n	1000b974 <gpio_port1_isr_handler+0x58>
1000b964:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000b966:	2c10      	cmp	r4, #16
1000b968:	d009      	beq.n	1000b97e <gpio_port1_isr_handler+0x62>
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000b96a:	4643      	mov	r3, r8
1000b96c:	2b00      	cmp	r3, #0
1000b96e:	d0e8      	beq.n	1000b942 <gpio_port1_isr_handler+0x26>
			aon_handle_ext_wakeup_isr();
1000b970:	47d0      	blx	sl
1000b972:	e7e6      	b.n	1000b942 <gpio_port1_isr_handler+0x26>
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000b974:	3412      	adds	r4, #18
1000b976:	00a4      	lsls	r4, r4, #2
1000b978:	1934      	adds	r4, r6, r4
1000b97a:	6863      	ldr	r3, [r4, #4]
1000b97c:	4798      	blx	r3
1000b97e:	2180      	movs	r1, #128	; 0x80
1000b980:	23c0      	movs	r3, #192	; 0xc0
1000b982:	4a06      	ldr	r2, [pc, #24]	; (1000b99c <gpio_port1_isr_handler+0x80>)
1000b984:	0449      	lsls	r1, r1, #17
1000b986:	005b      	lsls	r3, r3, #1
1000b988:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000b98a:	bc1c      	pop	{r2, r3, r4}
1000b98c:	4690      	mov	r8, r2
1000b98e:	4699      	mov	r9, r3
1000b990:	46a2      	mov	sl, r4
1000b992:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b994:	10015994 	.word	0x10015994
1000b998:	0001bc51 	.word	0x0001bc51
1000b99c:	e000e100 	.word	0xe000e100

1000b9a0 <gpio_port2_isr_handler>:
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000b9a0:	2390      	movs	r3, #144	; 0x90

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000b9a2:	2280      	movs	r2, #128	; 0x80
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000b9a4:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000b9a6:	491a      	ldr	r1, [pc, #104]	; (1000ba10 <gpio_port2_isr_handler+0x70>)

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000b9a8:	0152      	lsls	r2, r2, #5
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000b9aa:	58c8      	ldr	r0, [r1, r3]
1000b9ac:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000b9ae:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000b9b0:	4213      	tst	r3, r2
1000b9b2:	d110      	bne.n	1000b9d6 <gpio_port2_isr_handler+0x36>
1000b9b4:	2280      	movs	r2, #128	; 0x80
1000b9b6:	0192      	lsls	r2, r2, #6
1000b9b8:	4213      	tst	r3, r2
1000b9ba:	d120      	bne.n	1000b9fe <gpio_port2_isr_handler+0x5e>
1000b9bc:	2280      	movs	r2, #128	; 0x80
1000b9be:	01d2      	lsls	r2, r2, #7
1000b9c0:	4213      	tst	r3, r2
1000b9c2:	d11e      	bne.n	1000ba02 <gpio_port2_isr_handler+0x62>
1000b9c4:	0bdb      	lsrs	r3, r3, #15
1000b9c6:	d11e      	bne.n	1000ba06 <gpio_port2_isr_handler+0x66>
1000b9c8:	2180      	movs	r1, #128	; 0x80
1000b9ca:	23c0      	movs	r3, #192	; 0xc0
1000b9cc:	4a11      	ldr	r2, [pc, #68]	; (1000ba14 <gpio_port2_isr_handler+0x74>)
1000b9ce:	0489      	lsls	r1, r1, #18
1000b9d0:	005b      	lsls	r3, r3, #1
1000b9d2:	50d1      	str	r1, [r2, r3]
                _gpio_instances[2].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000b9d4:	bd10      	pop	{r4, pc}
static void gpio_port2_isr_handler(void)
{
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000b9d6:	240c      	movs	r4, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000b9d8:	23d6      	movs	r3, #214	; 0xd6
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b9da:	b292      	uxth	r2, r2
1000b9dc:	8702      	strh	r2, [r0, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000b9de:	5acb      	ldrh	r3, [r1, r3]
1000b9e0:	2201      	movs	r2, #1
1000b9e2:	4123      	asrs	r3, r4
1000b9e4:	421a      	tst	r2, r3
1000b9e6:	d0ef      	beq.n	1000b9c8 <gpio_port2_isr_handler+0x28>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000b9e8:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000b9ea:	5acb      	ldrh	r3, [r1, r3]
1000b9ec:	4123      	asrs	r3, r4
1000b9ee:	421a      	tst	r2, r3
1000b9f0:	d0ea      	beq.n	1000b9c8 <gpio_port2_isr_handler+0x28>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000b9f2:	3424      	adds	r4, #36	; 0x24
1000b9f4:	00a4      	lsls	r4, r4, #2
1000b9f6:	1909      	adds	r1, r1, r4
1000b9f8:	684b      	ldr	r3, [r1, #4]
1000b9fa:	4798      	blx	r3
1000b9fc:	e7e4      	b.n	1000b9c8 <gpio_port2_isr_handler+0x28>
static void gpio_port2_isr_handler(void)
{
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000b9fe:	240d      	movs	r4, #13
1000ba00:	e7ea      	b.n	1000b9d8 <gpio_port2_isr_handler+0x38>
1000ba02:	240e      	movs	r4, #14
1000ba04:	e7e8      	b.n	1000b9d8 <gpio_port2_isr_handler+0x38>
1000ba06:	2280      	movs	r2, #128	; 0x80
1000ba08:	240f      	movs	r4, #15
1000ba0a:	0212      	lsls	r2, r2, #8
1000ba0c:	e7e4      	b.n	1000b9d8 <gpio_port2_isr_handler+0x38>
1000ba0e:	46c0      	nop			; (mov r8, r8)
1000ba10:	10015994 	.word	0x10015994
1000ba14:	e000e100 	.word	0xe000e100

1000ba18 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000ba18:	2300      	movs	r3, #0
	config->input_pull = GPIO_PIN_PULL_UP;
1000ba1a:	2201      	movs	r2, #1
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000ba1c:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000ba1e:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000ba20:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000ba22:	70c3      	strb	r3, [r0, #3]
}
1000ba24:	4770      	bx	lr
1000ba26:	46c0      	nop			; (mov r8, r8)

1000ba28 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000ba28:	0003      	movs	r3, r0
1000ba2a:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000ba2c:	2017      	movs	r0, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000ba2e:	2b01      	cmp	r3, #1
1000ba30:	d92b      	bls.n	1000ba8a <gpio_pin_set_config+0x62>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000ba32:	2b07      	cmp	r3, #7
1000ba34:	d82a      	bhi.n	1000ba8c <gpio_pin_set_config+0x64>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000ba36:	009d      	lsls	r5, r3, #2
1000ba38:	3810      	subs	r0, #16
1000ba3a:	40a8      	lsls	r0, r5
1000ba3c:	4c5a      	ldr	r4, [pc, #360]	; (1000bba8 <gpio_pin_set_config+0x180>)
1000ba3e:	6c62      	ldr	r2, [r4, #68]	; 0x44
1000ba40:	4382      	bics	r2, r0
1000ba42:	6462      	str	r2, [r4, #68]	; 0x44
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000ba44:	001a      	movs	r2, r3
1000ba46:	3a1d      	subs	r2, #29
1000ba48:	2a02      	cmp	r2, #2
1000ba4a:	d834      	bhi.n	1000bab6 <gpio_pin_set_config+0x8e>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000ba4c:	241f      	movs	r4, #31
1000ba4e:	4d57      	ldr	r5, [pc, #348]	; (1000bbac <gpio_pin_set_config+0x184>)
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000ba50:	784a      	ldrb	r2, [r1, #1]
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000ba52:	7d28      	ldrb	r0, [r5, #20]
1000ba54:	1ae4      	subs	r4, r4, r3
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000ba56:	2a01      	cmp	r2, #1
1000ba58:	d063      	beq.n	1000bb22 <gpio_pin_set_config+0xfa>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000ba5a:	2201      	movs	r2, #1
1000ba5c:	40a2      	lsls	r2, r4
1000ba5e:	4302      	orrs	r2, r0
1000ba60:	b2d2      	uxtb	r2, r2
1000ba62:	752a      	strb	r2, [r5, #20]
			}
			if (config->aon_wakeup) {
1000ba64:	78ca      	ldrb	r2, [r1, #3]
1000ba66:	2a00      	cmp	r2, #0
1000ba68:	d023      	beq.n	1000bab2 <gpio_pin_set_config+0x8a>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000ba6a:	201f      	movs	r0, #31
1000ba6c:	1ac0      	subs	r0, r0, r3
1000ba6e:	2301      	movs	r3, #1
1000ba70:	0080      	lsls	r0, r0, #2
1000ba72:	4083      	lsls	r3, r0
1000ba74:	494d      	ldr	r1, [pc, #308]	; (1000bbac <gpio_pin_set_config+0x184>)
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000ba76:	2000      	movs	r0, #0
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000ba78:	880a      	ldrh	r2, [r1, #0]
1000ba7a:	4313      	orrs	r3, r2
1000ba7c:	b29b      	uxth	r3, r3
1000ba7e:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000ba80:	2302      	movs	r3, #2
1000ba82:	4a4b      	ldr	r2, [pc, #300]	; (1000bbb0 <gpio_pin_set_config+0x188>)
1000ba84:	7811      	ldrb	r1, [r2, #0]
1000ba86:	430b      	orrs	r3, r1
1000ba88:	7013      	strb	r3, [r2, #0]
				}
			}
		}
	}
	return status;
}
1000ba8a:	bd70      	pop	{r4, r5, r6, pc}
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 15) {
1000ba8c:	2b0f      	cmp	r3, #15
1000ba8e:	d93e      	bls.n	1000bb0e <gpio_pin_set_config+0xe6>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 23) {
1000ba90:	2b17      	cmp	r3, #23
1000ba92:	d84a      	bhi.n	1000bb2a <gpio_pin_set_config+0x102>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000ba94:	2207      	movs	r2, #7
1000ba96:	0014      	movs	r4, r2
1000ba98:	401c      	ands	r4, r3
1000ba9a:	00a4      	lsls	r4, r4, #2
1000ba9c:	40a2      	lsls	r2, r4
1000ba9e:	4d42      	ldr	r5, [pc, #264]	; (1000bba8 <gpio_pin_set_config+0x180>)
1000baa0:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
1000baa2:	4390      	bics	r0, r2
1000baa4:	64e8      	str	r0, [r5, #76]	; 0x4c
1000baa6:	e7cd      	b.n	1000ba44 <gpio_pin_set_config+0x1c>
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000baa8:	4003      	ands	r3, r0
1000baaa:	409a      	lsls	r2, r3
1000baac:	4b41      	ldr	r3, [pc, #260]	; (1000bbb4 <gpio_pin_set_config+0x18c>)
1000baae:	b292      	uxth	r2, r2
1000bab0:	821a      	strh	r2, [r3, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bab2:	2000      	movs	r0, #0
1000bab4:	e7e9      	b.n	1000ba8a <gpio_pin_set_config+0x62>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000bab6:	780a      	ldrb	r2, [r1, #0]
1000bab8:	2a00      	cmp	r2, #0
1000baba:	d11a      	bne.n	1000baf2 <gpio_pin_set_config+0xca>
				if(gpio_pin < 16) {
1000babc:	2b0f      	cmp	r3, #15
1000babe:	d849      	bhi.n	1000bb54 <gpio_pin_set_config+0x12c>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000bac0:	3201      	adds	r2, #1
1000bac2:	409a      	lsls	r2, r3
1000bac4:	483c      	ldr	r0, [pc, #240]	; (1000bbb8 <gpio_pin_set_config+0x190>)
1000bac6:	b292      	uxth	r2, r2
1000bac8:	8282      	strh	r2, [r0, #20]
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000baca:	784a      	ldrb	r2, [r1, #1]
1000bacc:	2a01      	cmp	r2, #1
1000bace:	d063      	beq.n	1000bb98 <gpio_pin_set_config+0x170>
1000bad0:	2a00      	cmp	r2, #0
1000bad2:	d050      	beq.n	1000bb76 <gpio_pin_set_config+0x14e>
1000bad4:	2a02      	cmp	r2, #2
1000bad6:	d15d      	bne.n	1000bb94 <gpio_pin_set_config+0x16c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000bad8:	2101      	movs	r1, #1
1000bada:	4099      	lsls	r1, r3
1000badc:	4a32      	ldr	r2, [pc, #200]	; (1000bba8 <gpio_pin_set_config+0x180>)
1000bade:	000b      	movs	r3, r1
1000bae0:	6d50      	ldr	r0, [r2, #84]	; 0x54
1000bae2:	0001      	movs	r1, r0
1000bae4:	4319      	orrs	r1, r3
1000bae6:	6551      	str	r1, [r2, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000bae8:	6d11      	ldr	r1, [r2, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000baea:	2000      	movs	r0, #0
							break;
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000baec:	4399      	bics	r1, r3
1000baee:	6511      	str	r1, [r2, #80]	; 0x50
							break;
1000baf0:	e7cb      	b.n	1000ba8a <gpio_pin_set_config+0x62>
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000baf2:	2a01      	cmp	r2, #1
1000baf4:	d1dd      	bne.n	1000bab2 <gpio_pin_set_config+0x8a>
				if (gpio_pin < 16) {
1000baf6:	2b0f      	cmp	r3, #15
1000baf8:	d946      	bls.n	1000bb88 <gpio_pin_set_config+0x160>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000bafa:	200f      	movs	r0, #15
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000bafc:	2b1f      	cmp	r3, #31
1000bafe:	d9d3      	bls.n	1000baa8 <gpio_pin_set_config+0x80>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000bb00:	4003      	ands	r3, r0
1000bb02:	409a      	lsls	r2, r3
1000bb04:	4b2d      	ldr	r3, [pc, #180]	; (1000bbbc <gpio_pin_set_config+0x194>)
1000bb06:	b292      	uxth	r2, r2
1000bb08:	821a      	strh	r2, [r3, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bb0a:	2000      	movs	r0, #0
1000bb0c:	e7bd      	b.n	1000ba8a <gpio_pin_set_config+0x62>
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 15) {
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bb0e:	2207      	movs	r2, #7
1000bb10:	0014      	movs	r4, r2
1000bb12:	401c      	ands	r4, r3
1000bb14:	00a4      	lsls	r4, r4, #2
1000bb16:	40a2      	lsls	r2, r4
1000bb18:	4d23      	ldr	r5, [pc, #140]	; (1000bba8 <gpio_pin_set_config+0x180>)
1000bb1a:	6ca8      	ldr	r0, [r5, #72]	; 0x48
1000bb1c:	4390      	bics	r0, r2
1000bb1e:	64a8      	str	r0, [r5, #72]	; 0x48
1000bb20:	e790      	b.n	1000ba44 <gpio_pin_set_config+0x1c>
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000bb22:	40a2      	lsls	r2, r4
1000bb24:	4390      	bics	r0, r2
1000bb26:	7528      	strb	r0, [r5, #20]
1000bb28:	e79c      	b.n	1000ba64 <gpio_pin_set_config+0x3c>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 15) {
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 23) {
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000bb2a:	001a      	movs	r2, r3
1000bb2c:	3a2c      	subs	r2, #44	; 0x2c
1000bb2e:	b2d0      	uxtb	r0, r2
1000bb30:	2803      	cmp	r0, #3
1000bb32:	d900      	bls.n	1000bb36 <gpio_pin_set_config+0x10e>
1000bb34:	e786      	b.n	1000ba44 <gpio_pin_set_config+0x1c>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000bb36:	2601      	movs	r6, #1
1000bb38:	2482      	movs	r4, #130	; 0x82
1000bb3a:	4096      	lsls	r6, r2
1000bb3c:	4d1b      	ldr	r5, [pc, #108]	; (1000bbac <gpio_pin_set_config+0x184>)
1000bb3e:	00e4      	lsls	r4, r4, #3
1000bb40:	5d28      	ldrb	r0, [r5, r4]
1000bb42:	5d2a      	ldrb	r2, [r5, r4]
1000bb44:	0700      	lsls	r0, r0, #28
1000bb46:	0f00      	lsrs	r0, r0, #28
1000bb48:	43b0      	bics	r0, r6
1000bb4a:	260f      	movs	r6, #15
1000bb4c:	43b2      	bics	r2, r6
1000bb4e:	4302      	orrs	r2, r0
1000bb50:	552a      	strb	r2, [r5, r4]
1000bb52:	e777      	b.n	1000ba44 <gpio_pin_set_config+0x1c>
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000bb54:	200f      	movs	r0, #15
1000bb56:	4018      	ands	r0, r3
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000bb58:	2b1f      	cmp	r3, #31
1000bb5a:	d805      	bhi.n	1000bb68 <gpio_pin_set_config+0x140>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000bb5c:	2201      	movs	r2, #1
1000bb5e:	4082      	lsls	r2, r0
1000bb60:	4814      	ldr	r0, [pc, #80]	; (1000bbb4 <gpio_pin_set_config+0x18c>)
1000bb62:	b292      	uxth	r2, r2
1000bb64:	8282      	strh	r2, [r0, #20]
1000bb66:	e7b0      	b.n	1000baca <gpio_pin_set_config+0xa2>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000bb68:	2301      	movs	r3, #1
1000bb6a:	4083      	lsls	r3, r0
1000bb6c:	4a13      	ldr	r2, [pc, #76]	; (1000bbbc <gpio_pin_set_config+0x194>)
1000bb6e:	b29b      	uxth	r3, r3
1000bb70:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bb72:	2000      	movs	r0, #0
1000bb74:	e789      	b.n	1000ba8a <gpio_pin_set_config+0x62>
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000bb76:	2101      	movs	r1, #1
1000bb78:	4099      	lsls	r1, r3
1000bb7a:	000b      	movs	r3, r1
1000bb7c:	480a      	ldr	r0, [pc, #40]	; (1000bba8 <gpio_pin_set_config+0x180>)
1000bb7e:	6d02      	ldr	r2, [r0, #80]	; 0x50
1000bb80:	4313      	orrs	r3, r2
1000bb82:	6503      	str	r3, [r0, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bb84:	2000      	movs	r0, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000bb86:	e780      	b.n	1000ba8a <gpio_pin_set_config+0x62>
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000bb88:	409a      	lsls	r2, r3
1000bb8a:	4b0b      	ldr	r3, [pc, #44]	; (1000bbb8 <gpio_pin_set_config+0x190>)
1000bb8c:	b292      	uxth	r2, r2
1000bb8e:	821a      	strh	r2, [r3, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bb90:	2000      	movs	r0, #0
1000bb92:	e77a      	b.n	1000ba8a <gpio_pin_set_config+0x62>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000bb94:	2017      	movs	r0, #23
1000bb96:	e778      	b.n	1000ba8a <gpio_pin_set_config+0x62>
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000bb98:	4803      	ldr	r0, [pc, #12]	; (1000bba8 <gpio_pin_set_config+0x180>)
1000bb9a:	409a      	lsls	r2, r3
1000bb9c:	6d01      	ldr	r1, [r0, #80]	; 0x50
1000bb9e:	000b      	movs	r3, r1
1000bba0:	4393      	bics	r3, r2
1000bba2:	6503      	str	r3, [r0, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000bba4:	2000      	movs	r0, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000bba6:	e770      	b.n	1000ba8a <gpio_pin_set_config+0x62>
1000bba8:	4000b000 	.word	0x4000b000
1000bbac:	4000f000 	.word	0x4000f000
1000bbb0:	4000e000 	.word	0x4000e000
1000bbb4:	40011000 	.word	0x40011000
1000bbb8:	40010000 	.word	0x40010000
1000bbbc:	40013000 	.word	0x40013000

1000bbc0 <gpio_pinmux_cofiguration>:
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;

	pinmux_sel &= 0xFF;
1000bbc0:	23ff      	movs	r3, #255	; 0xff
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000bbc2:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000bbc4:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000bbc6:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000bbc8:	2807      	cmp	r0, #7
1000bbca:	d80e      	bhi.n	1000bbea <gpio_pinmux_cofiguration+0x2a>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bbcc:	2407      	movs	r4, #7
1000bbce:	0086      	lsls	r6, r0, #2
1000bbd0:	40b4      	lsls	r4, r6
1000bbd2:	4b31      	ldr	r3, [pc, #196]	; (1000bc98 <gpio_pinmux_cofiguration+0xd8>)
1000bbd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
1000bbd6:	43a2      	bics	r2, r4
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000bbd8:	000c      	movs	r4, r1
1000bbda:	40b4      	lsls	r4, r6
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;

	pinmux_sel &= 0xFF;

	if (gpio_pin <= 7) {
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bbdc:	645a      	str	r2, [r3, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000bbde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
1000bbe0:	4322      	orrs	r2, r4
1000bbe2:	645a      	str	r2, [r3, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000bbe4:	2901      	cmp	r1, #1
1000bbe6:	d036      	beq.n	1000bc56 <gpio_pinmux_cofiguration+0x96>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	}
}
1000bbe8:	bd70      	pop	{r4, r5, r6, pc}
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	} else if (gpio_pin <= 15) {
1000bbea:	280f      	cmp	r0, #15
1000bbec:	d816      	bhi.n	1000bc1c <gpio_pinmux_cofiguration+0x5c>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bbee:	2407      	movs	r4, #7
1000bbf0:	0022      	movs	r2, r4
1000bbf2:	4002      	ands	r2, r0
1000bbf4:	0092      	lsls	r2, r2, #2
1000bbf6:	4094      	lsls	r4, r2
1000bbf8:	4b27      	ldr	r3, [pc, #156]	; (1000bc98 <gpio_pinmux_cofiguration+0xd8>)
1000bbfa:	6c9e      	ldr	r6, [r3, #72]	; 0x48
1000bbfc:	43a6      	bics	r6, r4
1000bbfe:	649e      	str	r6, [r3, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000bc00:	000e      	movs	r6, r1
1000bc02:	4096      	lsls	r6, r2
1000bc04:	0032      	movs	r2, r6
1000bc06:	6c9c      	ldr	r4, [r3, #72]	; 0x48
1000bc08:	4322      	orrs	r2, r4
1000bc0a:	649a      	str	r2, [r3, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000bc0c:	2901      	cmp	r1, #1
1000bc0e:	d1eb      	bne.n	1000bbe8 <gpio_pinmux_cofiguration+0x28>
			if (gpio_pin <= 11) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bc10:	31a8      	adds	r1, #168	; 0xa8
		}
	} else if (gpio_pin <= 15) {
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 11) {
1000bc12:	280b      	cmp	r0, #11
1000bc14:	d93e      	bls.n	1000bc94 <gpio_pinmux_cofiguration+0xd4>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bc16:	21d6      	movs	r1, #214	; 0xd6
1000bc18:	0049      	lsls	r1, r1, #1
1000bc1a:	e020      	b.n	1000bc5e <gpio_pinmux_cofiguration+0x9e>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	} else if (gpio_pin <= 23) {
1000bc1c:	2817      	cmp	r0, #23
1000bc1e:	d8e3      	bhi.n	1000bbe8 <gpio_pinmux_cofiguration+0x28>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000bc20:	2407      	movs	r4, #7
1000bc22:	0022      	movs	r2, r4
1000bc24:	4002      	ands	r2, r0
1000bc26:	0092      	lsls	r2, r2, #2
1000bc28:	4094      	lsls	r4, r2
1000bc2a:	4b1b      	ldr	r3, [pc, #108]	; (1000bc98 <gpio_pinmux_cofiguration+0xd8>)
1000bc2c:	6cde      	ldr	r6, [r3, #76]	; 0x4c
1000bc2e:	43a6      	bics	r6, r4
1000bc30:	64de      	str	r6, [r3, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000bc32:	000e      	movs	r6, r1
1000bc34:	4096      	lsls	r6, r2
1000bc36:	0032      	movs	r2, r6
1000bc38:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
1000bc3a:	4322      	orrs	r2, r4
1000bc3c:	64da      	str	r2, [r3, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000bc3e:	2901      	cmp	r1, #1
1000bc40:	d1d2      	bne.n	1000bbe8 <gpio_pinmux_cofiguration+0x28>
			if (gpio_pin <= 19) {
1000bc42:	2813      	cmp	r0, #19
1000bc44:	d925      	bls.n	1000bc92 <gpio_pinmux_cofiguration+0xd2>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bc46:	2403      	movs	r4, #3
1000bc48:	22da      	movs	r2, #218	; 0xda
1000bc4a:	4020      	ands	r0, r4
1000bc4c:	0052      	lsls	r2, r2, #1
1000bc4e:	5899      	ldr	r1, [r3, r2]
1000bc50:	00c0      	lsls	r0, r0, #3
1000bc52:	343c      	adds	r4, #60	; 0x3c
1000bc54:	e015      	b.n	1000bc82 <gpio_pinmux_cofiguration+0xc2>

	if (gpio_pin <= 7) {
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 3) {
1000bc56:	2803      	cmp	r0, #3
1000bc58:	d90e      	bls.n	1000bc78 <gpio_pinmux_cofiguration+0xb8>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bc5a:	21d2      	movs	r1, #210	; 0xd2
1000bc5c:	0049      	lsls	r1, r1, #1
	} else if (gpio_pin <= 23) {
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bc5e:	2203      	movs	r2, #3
1000bc60:	4010      	ands	r0, r2
1000bc62:	00c0      	lsls	r0, r0, #3
1000bc64:	323c      	adds	r2, #60	; 0x3c
1000bc66:	4082      	lsls	r2, r0
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000bc68:	4085      	lsls	r5, r0
	} else if (gpio_pin <= 23) {
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bc6a:	585c      	ldr	r4, [r3, r1]
1000bc6c:	4394      	bics	r4, r2
1000bc6e:	505c      	str	r4, [r3, r1]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000bc70:	585a      	ldr	r2, [r3, r1]
1000bc72:	4315      	orrs	r5, r2
1000bc74:	505d      	str	r5, [r3, r1]
1000bc76:	e7b7      	b.n	1000bbe8 <gpio_pinmux_cofiguration+0x28>
	if (gpio_pin <= 7) {
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 3) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bc78:	22d0      	movs	r2, #208	; 0xd0
1000bc7a:	243f      	movs	r4, #63	; 0x3f
1000bc7c:	0052      	lsls	r2, r2, #1
1000bc7e:	5899      	ldr	r1, [r3, r2]
1000bc80:	00c0      	lsls	r0, r0, #3
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bc82:	4084      	lsls	r4, r0
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000bc84:	4085      	lsls	r5, r0
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bc86:	43a1      	bics	r1, r4
1000bc88:	5099      	str	r1, [r3, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000bc8a:	5899      	ldr	r1, [r3, r2]
1000bc8c:	430d      	orrs	r5, r1
1000bc8e:	509d      	str	r5, [r3, r2]
			}
		}
	}
}
1000bc90:	e7aa      	b.n	1000bbe8 <gpio_pinmux_cofiguration+0x28>
	} else if (gpio_pin <= 23) {
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000bc92:	31b0      	adds	r1, #176	; 0xb0
1000bc94:	31ff      	adds	r1, #255	; 0xff
1000bc96:	e7e2      	b.n	1000bc5e <gpio_pinmux_cofiguration+0x9e>
1000bc98:	4000b000 	.word	0x4000b000

1000bc9c <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000bc9c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bc9e:	468c      	mov	ip, r1
1000bca0:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000bca2:	280f      	cmp	r0, #15
1000bca4:	d904      	bls.n	1000bcb0 <gpio_register_callback+0x14>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
1000bca6:	331f      	adds	r3, #31
1000bca8:	4283      	cmp	r3, r0
1000bcaa:	419b      	sbcs	r3, r3
1000bcac:	425b      	negs	r3, r3
1000bcae:	3301      	adds	r3, #1
		gpio_port = 1;
	} else {
		gpio_port = 2;
	}
	switch (callback_type) {
1000bcb0:	2a01      	cmp	r2, #1
1000bcb2:	d043      	beq.n	1000bd3c <gpio_register_callback+0xa0>
1000bcb4:	2a00      	cmp	r2, #0
1000bcb6:	d033      	beq.n	1000bd20 <gpio_register_callback+0x84>
1000bcb8:	2a02      	cmp	r2, #2
1000bcba:	d015      	beq.n	1000bce8 <gpio_register_callback+0x4c>
1000bcbc:	2a03      	cmp	r2, #3
1000bcbe:	d021      	beq.n	1000bd04 <gpio_register_callback+0x68>
1000bcc0:	220f      	movs	r2, #15
1000bcc2:	4010      	ands	r0, r2
1000bcc4:	3a0e      	subs	r2, #14
1000bcc6:	4082      	lsls	r2, r0
1000bcc8:	4c23      	ldr	r4, [pc, #140]	; (1000bd58 <gpio_register_callback+0xbc>)
1000bcca:	00dd      	lsls	r5, r3, #3

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000bccc:	4661      	mov	r1, ip
1000bcce:	18eb      	adds	r3, r5, r3
1000bcd0:	005d      	lsls	r5, r3, #1
1000bcd2:	1828      	adds	r0, r5, r0
1000bcd4:	0080      	lsls	r0, r0, #2
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000bcd6:	00db      	lsls	r3, r3, #3

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000bcd8:	1820      	adds	r0, r4, r0
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000bcda:	18e3      	adds	r3, r4, r3
1000bcdc:	3344      	adds	r3, #68	; 0x44

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000bcde:	6041      	str	r1, [r0, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000bce0:	8819      	ldrh	r1, [r3, #0]
1000bce2:	430a      	orrs	r2, r1
1000bce4:	801a      	strh	r2, [r3, #0]
}
1000bce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
		break;

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000bce8:	220f      	movs	r2, #15
1000bcea:	4010      	ands	r0, r2
1000bcec:	3a0e      	subs	r2, #14
1000bcee:	4082      	lsls	r2, r0
1000bcf0:	00dd      	lsls	r5, r3, #3
1000bcf2:	4c19      	ldr	r4, [pc, #100]	; (1000bd58 <gpio_register_callback+0xbc>)
1000bcf4:	18ee      	adds	r6, r5, r3
1000bcf6:	00f6      	lsls	r6, r6, #3
1000bcf8:	59a1      	ldr	r1, [r4, r6]
1000bcfa:	b297      	uxth	r7, r2
1000bcfc:	850f      	strh	r7, [r1, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000bcfe:	59a6      	ldr	r6, [r4, r6]
1000bd00:	8637      	strh	r7, [r6, #48]	; 0x30
		break;
1000bd02:	e7e3      	b.n	1000bccc <gpio_register_callback+0x30>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000bd04:	220f      	movs	r2, #15
1000bd06:	4010      	ands	r0, r2
1000bd08:	3a0e      	subs	r2, #14
1000bd0a:	4082      	lsls	r2, r0
1000bd0c:	00dd      	lsls	r5, r3, #3
1000bd0e:	4c12      	ldr	r4, [pc, #72]	; (1000bd58 <gpio_register_callback+0xbc>)
1000bd10:	18ee      	adds	r6, r5, r3
1000bd12:	00f6      	lsls	r6, r6, #3
1000bd14:	59a1      	ldr	r1, [r4, r6]
1000bd16:	b297      	uxth	r7, r2
1000bd18:	850f      	strh	r7, [r1, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000bd1a:	59a6      	ldr	r6, [r4, r6]
1000bd1c:	86b7      	strh	r7, [r6, #52]	; 0x34
		break;
1000bd1e:	e7d5      	b.n	1000bccc <gpio_register_callback+0x30>
	} else {
		gpio_port = 2;
	}
	switch (callback_type) {
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000bd20:	220f      	movs	r2, #15
1000bd22:	4010      	ands	r0, r2
1000bd24:	3a0e      	subs	r2, #14
1000bd26:	4082      	lsls	r2, r0
1000bd28:	00dd      	lsls	r5, r3, #3
1000bd2a:	4c0b      	ldr	r4, [pc, #44]	; (1000bd58 <gpio_register_callback+0xbc>)
1000bd2c:	18ee      	adds	r6, r5, r3
1000bd2e:	00f6      	lsls	r6, r6, #3
1000bd30:	59a1      	ldr	r1, [r4, r6]
1000bd32:	b297      	uxth	r7, r2
1000bd34:	858f      	strh	r7, [r1, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000bd36:	59a6      	ldr	r6, [r4, r6]
1000bd38:	86b7      	strh	r7, [r6, #52]	; 0x34
		break;
1000bd3a:	e7c7      	b.n	1000bccc <gpio_register_callback+0x30>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000bd3c:	270f      	movs	r7, #15
1000bd3e:	4038      	ands	r0, r7
1000bd40:	4082      	lsls	r2, r0
1000bd42:	00dd      	lsls	r5, r3, #3
1000bd44:	4c04      	ldr	r4, [pc, #16]	; (1000bd58 <gpio_register_callback+0xbc>)
1000bd46:	18ee      	adds	r6, r5, r3
1000bd48:	00f6      	lsls	r6, r6, #3
1000bd4a:	59a1      	ldr	r1, [r4, r6]
1000bd4c:	b297      	uxth	r7, r2
1000bd4e:	858f      	strh	r7, [r1, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000bd50:	59a6      	ldr	r6, [r4, r6]
1000bd52:	8637      	strh	r7, [r6, #48]	; 0x30
		break;
1000bd54:	e7ba      	b.n	1000bccc <gpio_register_callback+0x30>
1000bd56:	46c0      	nop			; (mov r8, r8)
1000bd58:	10015994 	.word	0x10015994

1000bd5c <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000bd5c:	b510      	push	{r4, lr}

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000bd5e:	2280      	movs	r2, #128	; 0x80
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000bd60:	280f      	cmp	r0, #15
1000bd62:	d91b      	bls.n	1000bd9c <gpio_enable_callback+0x40>
		gpio_port = 0;
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000bd64:	281f      	cmp	r0, #31
1000bd66:	d914      	bls.n	1000bd92 <gpio_enable_callback+0x36>
1000bd68:	4b0f      	ldr	r3, [pc, #60]	; (1000bda8 <gpio_enable_callback+0x4c>)
1000bd6a:	0492      	lsls	r2, r2, #18
1000bd6c:	601a      	str	r2, [r3, #0]
1000bd6e:	2302      	movs	r3, #2
		gpio_port = 2;
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000bd70:	220f      	movs	r2, #15
1000bd72:	4010      	ands	r0, r2
1000bd74:	3a0e      	subs	r2, #14
1000bd76:	4082      	lsls	r2, r0
1000bd78:	00d9      	lsls	r1, r3, #3
1000bd7a:	4c0c      	ldr	r4, [pc, #48]	; (1000bdac <gpio_enable_callback+0x50>)
1000bd7c:	18cb      	adds	r3, r1, r3
1000bd7e:	00db      	lsls	r3, r3, #3
1000bd80:	18e1      	adds	r1, r4, r3
1000bd82:	3146      	adds	r1, #70	; 0x46
1000bd84:	8808      	ldrh	r0, [r1, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000bd86:	58e3      	ldr	r3, [r4, r3]
		gpio_port = 2;
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000bd88:	4310      	orrs	r0, r2
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000bd8a:	b292      	uxth	r2, r2
		gpio_port = 2;
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000bd8c:	8008      	strh	r0, [r1, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000bd8e:	841a      	strh	r2, [r3, #32]
}
1000bd90:	bd10      	pop	{r4, pc}
1000bd92:	4b05      	ldr	r3, [pc, #20]	; (1000bda8 <gpio_enable_callback+0x4c>)
1000bd94:	0452      	lsls	r2, r2, #17
1000bd96:	601a      	str	r2, [r3, #0]
1000bd98:	2301      	movs	r3, #1
1000bd9a:	e7e9      	b.n	1000bd70 <gpio_enable_callback+0x14>
1000bd9c:	4b02      	ldr	r3, [pc, #8]	; (1000bda8 <gpio_enable_callback+0x4c>)
1000bd9e:	0412      	lsls	r2, r2, #16
1000bda0:	601a      	str	r2, [r3, #0]
1000bda2:	2300      	movs	r3, #0
1000bda4:	e7e4      	b.n	1000bd70 <gpio_enable_callback+0x14>
1000bda6:	46c0      	nop			; (mov r8, r8)
1000bda8:	e000e100 	.word	0xe000e100
1000bdac:	10015994 	.word	0x10015994

1000bdb0 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000bdb0:	4a11      	ldr	r2, [pc, #68]	; (1000bdf8 <gpio_init+0x48>)
1000bdb2:	b510      	push	{r4, lr}
1000bdb4:	0014      	movs	r4, r2
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000bdb6:	2100      	movs	r1, #0
1000bdb8:	2000      	movs	r0, #0
1000bdba:	34d8      	adds	r4, #216	; 0xd8
1000bdbc:	0013      	movs	r3, r2
1000bdbe:	3b40      	subs	r3, #64	; 0x40
1000bdc0:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000bdc2:	429a      	cmp	r2, r3
1000bdc4:	d1fc      	bne.n	1000bdc0 <gpio_init+0x10>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000bdc6:	8050      	strh	r0, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000bdc8:	8010      	strh	r0, [r2, #0]
1000bdca:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000bdcc:	42a2      	cmp	r2, r4
1000bdce:	d1f5      	bne.n	1000bdbc <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000bdd0:	4b0a      	ldr	r3, [pc, #40]	; (1000bdfc <gpio_init+0x4c>)
1000bdd2:	4a0b      	ldr	r2, [pc, #44]	; (1000be00 <gpio_init+0x50>)
	_gpio_instances[1].hw = (void *)GPIO1;
	_gpio_instances[2].hw = (void *)GPIO2;
1000bdd4:	490b      	ldr	r1, [pc, #44]	; (1000be04 <gpio_init+0x54>)
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000bdd6:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000bdd8:	4a0b      	ldr	r2, [pc, #44]	; (1000be08 <gpio_init+0x58>)
	_gpio_instances[2].hw = (void *)GPIO2;
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000bdda:	4c0c      	ldr	r4, [pc, #48]	; (1000be0c <gpio_init+0x5c>)
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
	_gpio_instances[1].hw = (void *)GPIO1;
1000bddc:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000bdde:	2290      	movs	r2, #144	; 0x90
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000bde0:	2027      	movs	r0, #39	; 0x27
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
	_gpio_instances[1].hw = (void *)GPIO1;
	_gpio_instances[2].hw = (void *)GPIO2;
1000bde2:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000bde4:	490a      	ldr	r1, [pc, #40]	; (1000be10 <gpio_init+0x60>)
1000bde6:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000bde8:	490a      	ldr	r1, [pc, #40]	; (1000be14 <gpio_init+0x64>)
1000bdea:	2028      	movs	r0, #40	; 0x28
1000bdec:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000bdee:	490a      	ldr	r1, [pc, #40]	; (1000be18 <gpio_init+0x68>)
1000bdf0:	2029      	movs	r0, #41	; 0x29
1000bdf2:	47a0      	blx	r4
}
1000bdf4:	bd10      	pop	{r4, pc}
1000bdf6:	46c0      	nop			; (mov r8, r8)
1000bdf8:	100159d8 	.word	0x100159d8
1000bdfc:	10015994 	.word	0x10015994
1000be00:	40010000 	.word	0x40010000
1000be04:	40013000 	.word	0x40013000
1000be08:	40011000 	.word	0x40011000
1000be0c:	1000c799 	.word	0x1000c799
1000be10:	1000b8c5 	.word	0x1000b8c5
1000be14:	1000b91d 	.word	0x1000b91d
1000be18:	1000b9a1 	.word	0x1000b9a1

1000be1c <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000be1c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000be1e:	464f      	mov	r7, r9
1000be20:	4646      	mov	r6, r8
1000be22:	b4c0      	push	{r6, r7}
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
1000be24:	884d      	ldrh	r5, [r1, #2]
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000be26:	4681      	mov	r9, r0
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000be28:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
1000be2a:	2d00      	cmp	r5, #0
1000be2c:	d104      	bne.n	1000be38 <_i2c_master_read_packet+0x1c>
	if (!module->no_stop) {
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
}
1000be2e:	0018      	movs	r0, r3
1000be30:	bc0c      	pop	{r2, r3}
1000be32:	4690      	mov	r8, r2
1000be34:	4699      	mov	r9, r3
1000be36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000be38:	2428      	movs	r4, #40	; 0x28
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000be3a:	6802      	ldr	r2, [r0, #0]
1000be3c:	5d13      	ldrb	r3, [r2, r4]
1000be3e:	07db      	lsls	r3, r3, #31
1000be40:	d4fc      	bmi.n	1000be3c <_i2c_master_read_packet+0x20>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
1000be42:	2301      	movs	r3, #1
1000be44:	2434      	movs	r4, #52	; 0x34
1000be46:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000be48:	3c14      	subs	r4, #20
1000be4a:	5513      	strb	r3, [r2, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
1000be4c:	2402      	movs	r4, #2
1000be4e:	880b      	ldrh	r3, [r1, #0]
1000be50:	34ff      	adds	r4, #255	; 0xff
1000be52:	005b      	lsls	r3, r3, #1
1000be54:	4323      	orrs	r3, r4
1000be56:	b29b      	uxth	r3, r3
1000be58:	8013      	strh	r3, [r2, #0]
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
1000be5a:	2301      	movs	r3, #1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
1000be5c:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
1000be5e:	4698      	mov	r8, r3
1000be60:	4640      	mov	r0, r8
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
1000be62:	7b13      	ldrb	r3, [r2, #12]
1000be64:	b2db      	uxtb	r3, r3
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
1000be66:	4218      	tst	r0, r3
1000be68:	d006      	beq.n	1000be78 <_i2c_master_read_packet+0x5c>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
1000be6a:	7910      	ldrb	r0, [r2, #4]
1000be6c:	1c67      	adds	r7, r4, #1
1000be6e:	4684      	mov	ip, r0
1000be70:	4666      	mov	r6, ip
1000be72:	6848      	ldr	r0, [r1, #4]
1000be74:	5506      	strb	r6, [r0, r4]
1000be76:	b2bc      	uxth	r4, r7
	} while (counter < length); 
1000be78:	42ac      	cmp	r4, r5
1000be7a:	d3f1      	bcc.n	1000be60 <_i2c_master_read_packet+0x44>

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000be7c:	06db      	lsls	r3, r3, #27
1000be7e:	d403      	bmi.n	1000be88 <_i2c_master_read_packet+0x6c>
1000be80:	2110      	movs	r1, #16
		status = i2c_module->TRANSMIT_STATUS.reg;
1000be82:	7a13      	ldrb	r3, [r2, #8]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000be84:	4219      	tst	r1, r3
1000be86:	d0fc      	beq.n	1000be82 <_i2c_master_read_packet+0x66>
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
1000be88:	464b      	mov	r3, r9
1000be8a:	7959      	ldrb	r1, [r3, #5]
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
1000be8c:	2300      	movs	r3, #0
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
1000be8e:	2900      	cmp	r1, #0
1000be90:	d1cd      	bne.n	1000be2e <_i2c_master_read_packet+0x12>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000be92:	3120      	adds	r1, #32
1000be94:	5453      	strb	r3, [r2, r1]
1000be96:	e7ca      	b.n	1000be2e <_i2c_master_read_packet+0x12>

1000be98 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000be98:	b5f0      	push	{r4, r5, r6, r7, lr}
1000be9a:	4684      	mov	ip, r0
1000be9c:	2428      	movs	r4, #40	; 0x28
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
1000be9e:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
1000bea0:	884e      	ldrh	r6, [r1, #2]
1000bea2:	5d13      	ldrb	r3, [r2, r4]
1000bea4:	07db      	lsls	r3, r3, #31
1000bea6:	d4fc      	bmi.n	1000bea2 <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
1000bea8:	2301      	movs	r3, #1
1000beaa:	2434      	movs	r4, #52	; 0x34
1000beac:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000beae:	3c14      	subs	r4, #20
1000beb0:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
1000beb2:	880b      	ldrh	r3, [r1, #0]
1000beb4:	34e0      	adds	r4, #224	; 0xe0
1000beb6:	005b      	lsls	r3, r3, #1
1000beb8:	4323      	orrs	r3, r4
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
        //printf(".");
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
1000beba:	2501      	movs	r5, #1
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
1000bebc:	2400      	movs	r4, #0

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
1000bebe:	b29b      	uxth	r3, r3
1000bec0:	8013      	strh	r3, [r2, #0]
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
        //printf(".");
		status = i2c_module->TRANSMIT_STATUS.reg;
1000bec2:	7a13      	ldrb	r3, [r2, #8]
1000bec4:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
1000bec6:	421d      	tst	r5, r3
1000bec8:	d004      	beq.n	1000bed4 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
1000beca:	6848      	ldr	r0, [r1, #4]
1000becc:	1c67      	adds	r7, r4, #1
1000bece:	5d04      	ldrb	r4, [r0, r4]
1000bed0:	8014      	strh	r4, [r2, #0]
1000bed2:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
1000bed4:	42b4      	cmp	r4, r6
1000bed6:	d3f4      	bcc.n	1000bec2 <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000bed8:	06db      	lsls	r3, r3, #27
1000beda:	d403      	bmi.n	1000bee4 <_i2c_master_write_packet+0x4c>
1000bedc:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
1000bede:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000bee0:	4219      	tst	r1, r3
1000bee2:	d0fc      	beq.n	1000bede <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
1000bee4:	4663      	mov	r3, ip
1000bee6:	795b      	ldrb	r3, [r3, #5]
1000bee8:	2b00      	cmp	r3, #0
1000beea:	d101      	bne.n	1000bef0 <_i2c_master_write_packet+0x58>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000beec:	2120      	movs	r1, #32
1000beee:	5453      	strb	r3, [r2, r1]
	}

	return STATUS_OK;
}
1000bef0:	2000      	movs	r0, #0
1000bef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000bef4 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
1000bef4:	2303      	movs	r3, #3
1000bef6:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
1000bef8:	330d      	adds	r3, #13
1000befa:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
1000befc:	3b08      	subs	r3, #8
1000befe:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
1000bf00:	3301      	adds	r3, #1
1000bf02:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
1000bf04:	3b07      	subs	r3, #7
1000bf06:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
1000bf08:	6103      	str	r3, [r0, #16]
}
1000bf0a:	4770      	bx	lr

1000bf0c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
1000bf0c:	b570      	push	{r4, r5, r6, lr}
1000bf0e:	0015      	movs	r5, r2
1000bf10:	0004      	movs	r4, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
1000bf12:	6001      	str	r1, [r0, #0]
1000bf14:	2228      	movs	r2, #40	; 0x28

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
1000bf16:	2d00      	cmp	r5, #0
1000bf18:	d00d      	beq.n	1000bf36 <i2c_master_init+0x2a>
1000bf1a:	5c8b      	ldrb	r3, [r1, r2]
1000bf1c:	07db      	lsls	r3, r3, #31
1000bf1e:	0fdb      	lsrs	r3, r3, #31
1000bf20:	b2db      	uxtb	r3, r3
1000bf22:	2b00      	cmp	r3, #0
1000bf24:	d1f9      	bne.n	1000bf1a <i2c_master_init+0xe>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
1000bf26:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
1000bf28:	6823      	ldr	r3, [r4, #0]
1000bf2a:	4a0f      	ldr	r2, [pc, #60]	; (1000bf68 <i2c_master_init+0x5c>)
1000bf2c:	4293      	cmp	r3, r2
1000bf2e:	d017      	beq.n	1000bf60 <i2c_master_init+0x54>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
1000bf30:	4a0e      	ldr	r2, [pc, #56]	; (1000bf6c <i2c_master_init+0x60>)
1000bf32:	4293      	cmp	r3, r2
1000bf34:	d001      	beq.n	1000bf3a <i2c_master_init+0x2e>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
1000bf36:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
1000bf38:	bd70      	pop	{r4, r5, r6, pc}

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
1000bf3a:	2019      	movs	r0, #25
1000bf3c:	4b0c      	ldr	r3, [pc, #48]	; (1000bf70 <i2c_master_init+0x64>)
1000bf3e:	4798      	blx	r3
	Assert(config);

	I2c *const i2c_module = (module->hw);

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
1000bf40:	8929      	ldrh	r1, [r5, #8]
1000bf42:	7928      	ldrb	r0, [r5, #4]
1000bf44:	4e0b      	ldr	r6, [pc, #44]	; (1000bf74 <i2c_master_init+0x68>)
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
1000bf46:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
1000bf48:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
1000bf4a:	7b28      	ldrb	r0, [r5, #12]
1000bf4c:	8a29      	ldrh	r1, [r5, #16]
1000bf4e:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000bf50:	782b      	ldrb	r3, [r5, #0]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
1000bf52:	2000      	movs	r0, #0

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000bf54:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000bf56:	886b      	ldrh	r3, [r5, #2]
1000bf58:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
1000bf5a:	2301      	movs	r3, #1
1000bf5c:	7723      	strb	r3, [r4, #28]
1000bf5e:	e7eb      	b.n	1000bf38 <i2c_master_init+0x2c>
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
1000bf60:	4b03      	ldr	r3, [pc, #12]	; (1000bf70 <i2c_master_init+0x64>)
1000bf62:	2003      	movs	r0, #3
1000bf64:	4798      	blx	r3
1000bf66:	e7eb      	b.n	1000bf40 <i2c_master_init+0x34>
1000bf68:	40003000 	.word	0x40003000
1000bf6c:	40003400 	.word	0x40003400
1000bf70:	1000c381 	.word	0x1000c381
1000bf74:	1000bbc1 	.word	0x1000bbc1

1000bf78 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000bf78:	0003      	movs	r3, r0
1000bf7a:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
1000bf7c:	2017      	movs	r0, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
1000bf7e:	2b00      	cmp	r3, #0
1000bf80:	d006      	beq.n	1000bf90 <i2c_master_read_packet_wait+0x18>
1000bf82:	2900      	cmp	r1, #0
1000bf84:	d004      	beq.n	1000bf90 <i2c_master_read_packet_wait+0x18>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000bf86:	2200      	movs	r2, #0

	return _i2c_master_read_packet(module, packet);
1000bf88:	0018      	movs	r0, r3
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000bf8a:	715a      	strb	r2, [r3, #5]

	return _i2c_master_read_packet(module, packet);
1000bf8c:	4b01      	ldr	r3, [pc, #4]	; (1000bf94 <i2c_master_read_packet_wait+0x1c>)
1000bf8e:	4798      	blx	r3
}
1000bf90:	bd10      	pop	{r4, pc}
1000bf92:	46c0      	nop			; (mov r8, r8)
1000bf94:	1000be1d 	.word	0x1000be1d

1000bf98 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000bf98:	b570      	push	{r4, r5, r6, lr}
1000bf9a:	0004      	movs	r4, r0
1000bf9c:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
1000bf9e:	2017      	movs	r0, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000bfa0:	2c00      	cmp	r4, #0
1000bfa2:	d00a      	beq.n	1000bfba <i2c_master_write_packet_wait+0x22>
1000bfa4:	2900      	cmp	r1, #0
1000bfa6:	d008      	beq.n	1000bfba <i2c_master_write_packet_wait+0x22>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000bfa8:	2300      	movs	r3, #0

    printf("!!");
1000bfaa:	4804      	ldr	r0, [pc, #16]	; (1000bfbc <i2c_master_write_packet_wait+0x24>)
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000bfac:	7163      	strb	r3, [r4, #5]

    printf("!!");
1000bfae:	4b04      	ldr	r3, [pc, #16]	; (1000bfc0 <i2c_master_write_packet_wait+0x28>)
1000bfb0:	4798      	blx	r3
	return _i2c_master_write_packet(module, packet);
1000bfb2:	0029      	movs	r1, r5
1000bfb4:	0020      	movs	r0, r4
1000bfb6:	4b03      	ldr	r3, [pc, #12]	; (1000bfc4 <i2c_master_write_packet_wait+0x2c>)
1000bfb8:	4798      	blx	r3
}
1000bfba:	bd70      	pop	{r4, r5, r6, pc}
1000bfbc:	100132e8 	.word	0x100132e8
1000bfc0:	100115f9 	.word	0x100115f9
1000bfc4:	1000be99 	.word	0x1000be99

1000bfc8 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000bfc8:	0003      	movs	r3, r0
1000bfca:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
1000bfcc:	2017      	movs	r0, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
1000bfce:	2b00      	cmp	r3, #0
1000bfd0:	d006      	beq.n	1000bfe0 <i2c_master_write_packet_wait_no_stop+0x18>
1000bfd2:	2900      	cmp	r1, #0
1000bfd4:	d004      	beq.n	1000bfe0 <i2c_master_write_packet_wait_no_stop+0x18>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
1000bfd6:	2201      	movs	r2, #1

	return _i2c_master_write_packet(module, packet);
1000bfd8:	0018      	movs	r0, r3
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
1000bfda:	715a      	strb	r2, [r3, #5]

	return _i2c_master_write_packet(module, packet);
1000bfdc:	4b01      	ldr	r3, [pc, #4]	; (1000bfe4 <i2c_master_write_packet_wait_no_stop+0x1c>)
1000bfde:	4798      	blx	r3
}
1000bfe0:	bd10      	pop	{r4, pc}
1000bfe2:	46c0      	nop			; (mov r8, r8)
1000bfe4:	1000be99 	.word	0x1000be99

1000bfe8 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000bfe8:	2801      	cmp	r0, #1
1000bfea:	d021      	beq.n	1000c030 <system_clock_config+0x48>
1000bfec:	2800      	cmp	r0, #0
1000bfee:	d016      	beq.n	1000c01e <system_clock_config+0x36>
1000bff0:	2802      	cmp	r0, #2
1000bff2:	d112      	bne.n	1000c01a <system_clock_config+0x32>
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
			break;

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000bff4:	200c      	movs	r0, #12
1000bff6:	4a18      	ldr	r2, [pc, #96]	; (1000c058 <system_clock_config+0x70>)
1000bff8:	6993      	ldr	r3, [r2, #24]
1000bffa:	4383      	bics	r3, r0
1000bffc:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000bffe:	4a17      	ldr	r2, [pc, #92]	; (1000c05c <system_clock_config+0x74>)
1000c000:	4b17      	ldr	r3, [pc, #92]	; (1000c060 <system_clock_config+0x78>)
1000c002:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c004:	2003      	movs	r0, #3
1000c006:	4b14      	ldr	r3, [pc, #80]	; (1000c058 <system_clock_config+0x70>)
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c008:	4001      	ands	r1, r0

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c00a:	699a      	ldr	r2, [r3, #24]
1000c00c:	4382      	bics	r2, r0
1000c00e:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c010:	699a      	ldr	r2, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000c012:	2000      	movs	r0, #0
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c014:	4311      	orrs	r1, r2
1000c016:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000c018:	e000      	b.n	1000c01c <system_clock_config+0x34>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000c01a:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000c01c:	4770      	bx	lr
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c01e:	230c      	movs	r3, #12
1000c020:	4a0d      	ldr	r2, [pc, #52]	; (1000c058 <system_clock_config+0x70>)
1000c022:	6990      	ldr	r0, [r2, #24]
1000c024:	4303      	orrs	r3, r0
1000c026:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000c028:	4a0c      	ldr	r2, [pc, #48]	; (1000c05c <system_clock_config+0x74>)
1000c02a:	4b0d      	ldr	r3, [pc, #52]	; (1000c060 <system_clock_config+0x78>)
1000c02c:	601a      	str	r2, [r3, #0]
			break;
1000c02e:	e7e9      	b.n	1000c004 <system_clock_config+0x1c>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c030:	2208      	movs	r2, #8
1000c032:	4b09      	ldr	r3, [pc, #36]	; (1000c058 <system_clock_config+0x70>)
1000c034:	6998      	ldr	r0, [r3, #24]
1000c036:	4302      	orrs	r2, r0
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c038:	2004      	movs	r0, #4
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
			break;

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c03a:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c03c:	699a      	ldr	r2, [r3, #24]
1000c03e:	4382      	bics	r2, r0
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000c040:	2080      	movs	r0, #128	; 0x80
			break;

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c042:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000c044:	4a07      	ldr	r2, [pc, #28]	; (1000c064 <system_clock_config+0x7c>)
1000c046:	0300      	lsls	r0, r0, #12
1000c048:	6853      	ldr	r3, [r2, #4]
1000c04a:	4303      	orrs	r3, r0
1000c04c:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000c04e:	4a06      	ldr	r2, [pc, #24]	; (1000c068 <system_clock_config+0x80>)
1000c050:	4b03      	ldr	r3, [pc, #12]	; (1000c060 <system_clock_config+0x78>)
1000c052:	601a      	str	r2, [r3, #0]
			break;
1000c054:	e7d6      	b.n	1000c004 <system_clock_config+0x1c>
1000c056:	46c0      	nop			; (mov r8, r8)
1000c058:	4000b000 	.word	0x4000b000
1000c05c:	018cba80 	.word	0x018cba80
1000c060:	10015a6c 	.word	0x10015a6c
1000c064:	4000f000 	.word	0x4000f000
1000c068:	001e8480 	.word	0x001e8480

1000c06c <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000c06c:	4b01      	ldr	r3, [pc, #4]	; (1000c074 <system_clock_get_value+0x8>)
1000c06e:	6818      	ldr	r0, [r3, #0]
}
1000c070:	4770      	bx	lr
1000c072:	46c0      	nop			; (mov r8, r8)
1000c074:	10015a6c 	.word	0x10015a6c

1000c078 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000c078:	b500      	push	{lr}
	switch (peripheral) {
1000c07a:	2835      	cmp	r0, #53	; 0x35
1000c07c:	d900      	bls.n	1000c080 <system_clock_peripheral_enable+0x8>
1000c07e:	e16d      	b.n	1000c35c <system_clock_peripheral_enable+0x2e4>
1000c080:	4bb7      	ldr	r3, [pc, #732]	; (1000c360 <system_clock_peripheral_enable+0x2e8>)
1000c082:	0080      	lsls	r0, r0, #2
1000c084:	581b      	ldr	r3, [r3, r0]
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c086:	4ab7      	ldr	r2, [pc, #732]	; (1000c364 <system_clock_peripheral_enable+0x2ec>)
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
	switch (peripheral) {
1000c088:	469f      	mov	pc, r3
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c08a:	2302      	movs	r3, #2

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c08c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c08e:	7d11      	ldrb	r1, [r2, #20]
1000c090:	430b      	orrs	r3, r1
1000c092:	7513      	strb	r3, [r2, #20]
		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
1000c094:	bd00      	pop	{pc}
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c096:	2301      	movs	r3, #1
1000c098:	7d11      	ldrb	r1, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c09a:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c09c:	430b      	orrs	r3, r1
1000c09e:	7513      	strb	r3, [r2, #20]
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000c0a0:	e7f8      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c0a2:	2180      	movs	r1, #128	; 0x80
1000c0a4:	6913      	ldr	r3, [r2, #16]
1000c0a6:	0409      	lsls	r1, r1, #16
1000c0a8:	430b      	orrs	r3, r1
1000c0aa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0ac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000c0ae:	e7f1      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c0b0:	2180      	movs	r1, #128	; 0x80
1000c0b2:	6913      	ldr	r3, [r2, #16]
1000c0b4:	03c9      	lsls	r1, r1, #15
1000c0b6:	430b      	orrs	r3, r1
1000c0b8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0ba:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000c0bc:	e7ea      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c0be:	2180      	movs	r1, #128	; 0x80
1000c0c0:	6913      	ldr	r3, [r2, #16]
1000c0c2:	0389      	lsls	r1, r1, #14
1000c0c4:	430b      	orrs	r3, r1
1000c0c6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000c0ca:	e7e3      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c0cc:	2180      	movs	r1, #128	; 0x80
1000c0ce:	6913      	ldr	r3, [r2, #16]
1000c0d0:	0349      	lsls	r1, r1, #13
1000c0d2:	430b      	orrs	r3, r1
1000c0d4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0d6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000c0d8:	e7dc      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c0da:	2180      	movs	r1, #128	; 0x80
1000c0dc:	6913      	ldr	r3, [r2, #16]
1000c0de:	0309      	lsls	r1, r1, #12
1000c0e0:	430b      	orrs	r3, r1
1000c0e2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000c0e6:	e7d5      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c0e8:	2180      	movs	r1, #128	; 0x80
1000c0ea:	6913      	ldr	r3, [r2, #16]
1000c0ec:	02c9      	lsls	r1, r1, #11
1000c0ee:	430b      	orrs	r3, r1
1000c0f0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0f2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000c0f4:	e7ce      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c0f6:	2180      	movs	r1, #128	; 0x80
1000c0f8:	6913      	ldr	r3, [r2, #16]
1000c0fa:	0289      	lsls	r1, r1, #10
1000c0fc:	430b      	orrs	r3, r1
1000c0fe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c100:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000c102:	e7c7      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c104:	2180      	movs	r1, #128	; 0x80
1000c106:	6913      	ldr	r3, [r2, #16]
1000c108:	0249      	lsls	r1, r1, #9
1000c10a:	430b      	orrs	r3, r1
1000c10c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c10e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000c110:	e7c0      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c112:	2180      	movs	r1, #128	; 0x80
1000c114:	6913      	ldr	r3, [r2, #16]
1000c116:	0209      	lsls	r1, r1, #8
1000c118:	430b      	orrs	r3, r1
1000c11a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c11c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000c11e:	e7b9      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c120:	2180      	movs	r1, #128	; 0x80
1000c122:	6913      	ldr	r3, [r2, #16]
1000c124:	01c9      	lsls	r1, r1, #7
1000c126:	430b      	orrs	r3, r1
1000c128:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c12a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000c12c:	e7b2      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c12e:	2180      	movs	r1, #128	; 0x80
1000c130:	6913      	ldr	r3, [r2, #16]
1000c132:	0189      	lsls	r1, r1, #6
1000c134:	430b      	orrs	r3, r1
1000c136:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c138:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000c13a:	e7ab      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c13c:	2180      	movs	r1, #128	; 0x80
1000c13e:	6913      	ldr	r3, [r2, #16]
1000c140:	0149      	lsls	r1, r1, #5
1000c142:	430b      	orrs	r3, r1
1000c144:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c146:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000c148:	e7a4      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c14a:	2180      	movs	r1, #128	; 0x80
1000c14c:	6913      	ldr	r3, [r2, #16]
1000c14e:	0109      	lsls	r1, r1, #4
1000c150:	430b      	orrs	r3, r1
1000c152:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c154:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000c156:	e79d      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c158:	2180      	movs	r1, #128	; 0x80
1000c15a:	6913      	ldr	r3, [r2, #16]
1000c15c:	00c9      	lsls	r1, r1, #3
1000c15e:	430b      	orrs	r3, r1
1000c160:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c162:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000c164:	e796      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c166:	2180      	movs	r1, #128	; 0x80
1000c168:	6913      	ldr	r3, [r2, #16]
1000c16a:	0089      	lsls	r1, r1, #2
1000c16c:	430b      	orrs	r3, r1
1000c16e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c170:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000c172:	e78f      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c174:	2180      	movs	r1, #128	; 0x80
1000c176:	6913      	ldr	r3, [r2, #16]
1000c178:	0049      	lsls	r1, r1, #1
1000c17a:	430b      	orrs	r3, r1
1000c17c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c17e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000c180:	e788      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c182:	2380      	movs	r3, #128	; 0x80
1000c184:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c186:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c188:	430b      	orrs	r3, r1
1000c18a:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000c18c:	e782      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c18e:	2340      	movs	r3, #64	; 0x40
1000c190:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c192:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c194:	430b      	orrs	r3, r1
1000c196:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000c198:	e77c      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c19a:	2320      	movs	r3, #32
1000c19c:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c19e:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c1a0:	430b      	orrs	r3, r1
1000c1a2:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000c1a4:	e776      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c1a6:	2310      	movs	r3, #16
1000c1a8:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1aa:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c1ac:	430b      	orrs	r3, r1
1000c1ae:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000c1b0:	e770      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c1b2:	2308      	movs	r3, #8
1000c1b4:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1b6:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c1b8:	430b      	orrs	r3, r1
1000c1ba:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000c1bc:	e76a      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c1be:	2304      	movs	r3, #4
1000c1c0:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1c2:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c1c4:	430b      	orrs	r3, r1
1000c1c6:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000c1c8:	e764      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c1ca:	2302      	movs	r3, #2
1000c1cc:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1ce:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c1d0:	430b      	orrs	r3, r1
1000c1d2:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000c1d4:	e75e      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c1d6:	2301      	movs	r3, #1
1000c1d8:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1da:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000c1dc:	430b      	orrs	r3, r1
1000c1de:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000c1e0:	e758      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c1e2:	2180      	movs	r1, #128	; 0x80
1000c1e4:	68d3      	ldr	r3, [r2, #12]
1000c1e6:	05c9      	lsls	r1, r1, #23
1000c1e8:	430b      	orrs	r3, r1
1000c1ea:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1ec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000c1ee:	e751      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c1f0:	2180      	movs	r1, #128	; 0x80
1000c1f2:	68d3      	ldr	r3, [r2, #12]
1000c1f4:	0589      	lsls	r1, r1, #22
1000c1f6:	430b      	orrs	r3, r1
1000c1f8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1fa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000c1fc:	e74a      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c1fe:	2180      	movs	r1, #128	; 0x80
1000c200:	68d3      	ldr	r3, [r2, #12]
1000c202:	0549      	lsls	r1, r1, #21
1000c204:	430b      	orrs	r3, r1
1000c206:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c208:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000c20a:	e743      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c20c:	2180      	movs	r1, #128	; 0x80
1000c20e:	68d3      	ldr	r3, [r2, #12]
1000c210:	0509      	lsls	r1, r1, #20
1000c212:	430b      	orrs	r3, r1
1000c214:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c216:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000c218:	e73c      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c21a:	2180      	movs	r1, #128	; 0x80
1000c21c:	68d3      	ldr	r3, [r2, #12]
1000c21e:	04c9      	lsls	r1, r1, #19
1000c220:	430b      	orrs	r3, r1
1000c222:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c224:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000c226:	e735      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c228:	2180      	movs	r1, #128	; 0x80
1000c22a:	68d3      	ldr	r3, [r2, #12]
1000c22c:	0489      	lsls	r1, r1, #18
1000c22e:	430b      	orrs	r3, r1
1000c230:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c232:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000c234:	e72e      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c236:	2180      	movs	r1, #128	; 0x80
1000c238:	68d3      	ldr	r3, [r2, #12]
1000c23a:	0449      	lsls	r1, r1, #17
1000c23c:	430b      	orrs	r3, r1
1000c23e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c240:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000c242:	e727      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c244:	2180      	movs	r1, #128	; 0x80
1000c246:	68d3      	ldr	r3, [r2, #12]
1000c248:	0409      	lsls	r1, r1, #16
1000c24a:	430b      	orrs	r3, r1
1000c24c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c24e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000c250:	e720      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c252:	2180      	movs	r1, #128	; 0x80
1000c254:	68d3      	ldr	r3, [r2, #12]
1000c256:	03c9      	lsls	r1, r1, #15
1000c258:	430b      	orrs	r3, r1
1000c25a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c25c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000c25e:	e719      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c260:	2180      	movs	r1, #128	; 0x80
1000c262:	68d3      	ldr	r3, [r2, #12]
1000c264:	0389      	lsls	r1, r1, #14
1000c266:	430b      	orrs	r3, r1
1000c268:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c26a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000c26c:	e712      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c26e:	2180      	movs	r1, #128	; 0x80
1000c270:	68d3      	ldr	r3, [r2, #12]
1000c272:	0349      	lsls	r1, r1, #13
1000c274:	430b      	orrs	r3, r1
1000c276:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c278:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000c27a:	e70b      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c27c:	2180      	movs	r1, #128	; 0x80
1000c27e:	68d3      	ldr	r3, [r2, #12]
1000c280:	0309      	lsls	r1, r1, #12
1000c282:	430b      	orrs	r3, r1
1000c284:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c286:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000c288:	e704      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c28a:	2180      	movs	r1, #128	; 0x80
1000c28c:	68d3      	ldr	r3, [r2, #12]
1000c28e:	02c9      	lsls	r1, r1, #11
1000c290:	430b      	orrs	r3, r1
1000c292:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c294:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000c296:	e6fd      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c298:	2180      	movs	r1, #128	; 0x80
1000c29a:	68d3      	ldr	r3, [r2, #12]
1000c29c:	0289      	lsls	r1, r1, #10
1000c29e:	430b      	orrs	r3, r1
1000c2a0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2a2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000c2a4:	e6f6      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c2a6:	2180      	movs	r1, #128	; 0x80
1000c2a8:	68d3      	ldr	r3, [r2, #12]
1000c2aa:	0249      	lsls	r1, r1, #9
1000c2ac:	430b      	orrs	r3, r1
1000c2ae:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2b0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000c2b2:	e6ef      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c2b4:	2180      	movs	r1, #128	; 0x80
1000c2b6:	68d3      	ldr	r3, [r2, #12]
1000c2b8:	0209      	lsls	r1, r1, #8
1000c2ba:	430b      	orrs	r3, r1
1000c2bc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2be:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000c2c0:	e6e8      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c2c2:	2180      	movs	r1, #128	; 0x80
1000c2c4:	68d3      	ldr	r3, [r2, #12]
1000c2c6:	01c9      	lsls	r1, r1, #7
1000c2c8:	430b      	orrs	r3, r1
1000c2ca:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2cc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000c2ce:	e6e1      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c2d0:	2180      	movs	r1, #128	; 0x80
1000c2d2:	68d3      	ldr	r3, [r2, #12]
1000c2d4:	0189      	lsls	r1, r1, #6
1000c2d6:	430b      	orrs	r3, r1
1000c2d8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2da:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000c2dc:	e6da      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c2de:	2180      	movs	r1, #128	; 0x80
1000c2e0:	68d3      	ldr	r3, [r2, #12]
1000c2e2:	0149      	lsls	r1, r1, #5
1000c2e4:	430b      	orrs	r3, r1
1000c2e6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000c2ea:	e6d3      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c2ec:	2180      	movs	r1, #128	; 0x80
1000c2ee:	68d3      	ldr	r3, [r2, #12]
1000c2f0:	0109      	lsls	r1, r1, #4
1000c2f2:	430b      	orrs	r3, r1
1000c2f4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2f6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000c2f8:	e6cc      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c2fa:	2180      	movs	r1, #128	; 0x80
1000c2fc:	68d3      	ldr	r3, [r2, #12]
1000c2fe:	0049      	lsls	r1, r1, #1
1000c300:	430b      	orrs	r3, r1
1000c302:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c304:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000c306:	e6c5      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c308:	2380      	movs	r3, #128	; 0x80
1000c30a:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c30c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c30e:	430b      	orrs	r3, r1
1000c310:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000c312:	e6bf      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c314:	2320      	movs	r3, #32
1000c316:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c318:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c31a:	430b      	orrs	r3, r1
1000c31c:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000c31e:	e6b9      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c320:	2310      	movs	r3, #16
1000c322:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c324:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c326:	430b      	orrs	r3, r1
1000c328:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000c32a:	e6b3      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c32c:	2308      	movs	r3, #8
1000c32e:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c330:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c332:	430b      	orrs	r3, r1
1000c334:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000c336:	e6ad      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c338:	2304      	movs	r3, #4
1000c33a:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c33c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c33e:	430b      	orrs	r3, r1
1000c340:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000c342:	e6a7      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c344:	2302      	movs	r3, #2
1000c346:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c348:	2000      	movs	r0, #0
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000c34a:	430b      	orrs	r3, r1
1000c34c:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000c34e:	e6a1      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c350:	2304      	movs	r3, #4
1000c352:	7d11      	ldrb	r1, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c354:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c356:	430b      	orrs	r3, r1
1000c358:	7513      	strb	r3, [r2, #20]
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000c35a:	e69b      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c35c:	2017      	movs	r0, #23
1000c35e:	e699      	b.n	1000c094 <system_clock_peripheral_enable+0x1c>
1000c360:	100132ec 	.word	0x100132ec
1000c364:	4000b000 	.word	0x4000b000

1000c368 <system_global_reset>:
 * Use this function to reset system global.
 *
 */
void system_global_reset(void)
{
	LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c368:	2201      	movs	r2, #1
1000c36a:	4b04      	ldr	r3, [pc, #16]	; (1000c37c <system_global_reset+0x14>)
1000c36c:	6859      	ldr	r1, [r3, #4]
1000c36e:	4391      	bics	r1, r2
1000c370:	6059      	str	r1, [r3, #4]
		~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GLOBAL_RSTN;
	LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c372:	6859      	ldr	r1, [r3, #4]
1000c374:	430a      	orrs	r2, r1
1000c376:	605a      	str	r2, [r3, #4]
		LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GLOBAL_RSTN;
};
1000c378:	4770      	bx	lr
1000c37a:	46c0      	nop			; (mov r8, r8)
1000c37c:	4000b000 	.word	0x4000b000

1000c380 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000c380:	b500      	push	{lr}
	switch (peripheral) {
1000c382:	2843      	cmp	r0, #67	; 0x43
1000c384:	d900      	bls.n	1000c388 <system_peripheral_reset+0x8>
1000c386:	e200      	b.n	1000c78a <system_peripheral_reset+0x40a>
1000c388:	4bd5      	ldr	r3, [pc, #852]	; (1000c6e0 <system_peripheral_reset+0x360>)
1000c38a:	0080      	lsls	r0, r0, #2
1000c38c:	581b      	ldr	r3, [r3, r0]
1000c38e:	469f      	mov	pc, r3
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c390:	4bd4      	ldr	r3, [pc, #848]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c392:	4ad5      	ldr	r2, [pc, #852]	; (1000c6e8 <system_peripheral_reset+0x368>)
1000c394:	8919      	ldrh	r1, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c396:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c398:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c39a:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c39c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c39e:	891a      	ldrh	r2, [r3, #8]
1000c3a0:	0109      	lsls	r1, r1, #4
1000c3a2:	430a      	orrs	r2, r1
1000c3a4:	811a      	strh	r2, [r3, #8]
		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
1000c3a6:	bd00      	pop	{pc}
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c3a8:	4bce      	ldr	r3, [pc, #824]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c3aa:	4ad0      	ldr	r2, [pc, #832]	; (1000c6ec <system_peripheral_reset+0x36c>)
1000c3ac:	8919      	ldrh	r1, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3ae:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c3b0:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c3b2:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c3b4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c3b6:	891a      	ldrh	r2, [r3, #8]
1000c3b8:	0049      	lsls	r1, r1, #1
1000c3ba:	430a      	orrs	r2, r1
1000c3bc:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000c3be:	e7f2      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c3c0:	2180      	movs	r1, #128	; 0x80
1000c3c2:	4bc8      	ldr	r3, [pc, #800]	; (1000c6e4 <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3c4:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c3c6:	891a      	ldrh	r2, [r3, #8]
1000c3c8:	438a      	bics	r2, r1
1000c3ca:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c3cc:	2280      	movs	r2, #128	; 0x80
1000c3ce:	8919      	ldrh	r1, [r3, #8]
1000c3d0:	430a      	orrs	r2, r1
1000c3d2:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000c3d4:	e7e7      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c3d6:	2104      	movs	r1, #4
1000c3d8:	4bc2      	ldr	r3, [pc, #776]	; (1000c6e4 <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3da:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c3dc:	891a      	ldrh	r2, [r3, #8]
1000c3de:	438a      	bics	r2, r1
1000c3e0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c3e2:	2204      	movs	r2, #4
1000c3e4:	8919      	ldrh	r1, [r3, #8]
1000c3e6:	430a      	orrs	r2, r1
1000c3e8:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000c3ea:	e7dc      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c3ec:	4bbd      	ldr	r3, [pc, #756]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c3ee:	4ac0      	ldr	r2, [pc, #768]	; (1000c6f0 <system_peripheral_reset+0x370>)
1000c3f0:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3f2:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c3f4:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c3f6:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c3f8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c3fa:	685a      	ldr	r2, [r3, #4]
1000c3fc:	0449      	lsls	r1, r1, #17
1000c3fe:	430a      	orrs	r2, r1
1000c400:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000c402:	e7d0      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c404:	4bb7      	ldr	r3, [pc, #732]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c406:	4abb      	ldr	r2, [pc, #748]	; (1000c6f4 <system_peripheral_reset+0x374>)
1000c408:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c40a:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c40c:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c40e:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c410:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c412:	685a      	ldr	r2, [r3, #4]
1000c414:	0409      	lsls	r1, r1, #16
1000c416:	430a      	orrs	r2, r1
1000c418:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000c41a:	e7c4      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c41c:	4bb1      	ldr	r3, [pc, #708]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c41e:	4ab6      	ldr	r2, [pc, #728]	; (1000c6f8 <system_peripheral_reset+0x378>)
1000c420:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c422:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c424:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c426:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c428:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c42a:	685a      	ldr	r2, [r3, #4]
1000c42c:	03c9      	lsls	r1, r1, #15
1000c42e:	430a      	orrs	r2, r1
1000c430:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000c432:	e7b8      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c434:	4bab      	ldr	r3, [pc, #684]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c436:	4ab1      	ldr	r2, [pc, #708]	; (1000c6fc <system_peripheral_reset+0x37c>)
1000c438:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c43a:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c43c:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c43e:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c440:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c442:	685a      	ldr	r2, [r3, #4]
1000c444:	0389      	lsls	r1, r1, #14
1000c446:	430a      	orrs	r2, r1
1000c448:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000c44a:	e7ac      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c44c:	4ba5      	ldr	r3, [pc, #660]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c44e:	4aac      	ldr	r2, [pc, #688]	; (1000c700 <system_peripheral_reset+0x380>)
1000c450:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c452:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c454:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c456:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c458:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c45a:	685a      	ldr	r2, [r3, #4]
1000c45c:	0309      	lsls	r1, r1, #12
1000c45e:	430a      	orrs	r2, r1
1000c460:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000c462:	e7a0      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c464:	4b9f      	ldr	r3, [pc, #636]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c466:	4aa7      	ldr	r2, [pc, #668]	; (1000c704 <system_peripheral_reset+0x384>)
1000c468:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c46a:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c46c:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c46e:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c470:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c472:	685a      	ldr	r2, [r3, #4]
1000c474:	0089      	lsls	r1, r1, #2
1000c476:	430a      	orrs	r2, r1
1000c478:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000c47a:	e794      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c47c:	2280      	movs	r2, #128	; 0x80
1000c47e:	4b99      	ldr	r3, [pc, #612]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c480:	6859      	ldr	r1, [r3, #4]
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c482:	4391      	bics	r1, r2
1000c484:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c486:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c488:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c48a:	430a      	orrs	r2, r1
1000c48c:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000c48e:	e78a      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c490:	4b94      	ldr	r3, [pc, #592]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c492:	2220      	movs	r2, #32
1000c494:	6859      	ldr	r1, [r3, #4]
1000c496:	e7f4      	b.n	1000c482 <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c498:	4b92      	ldr	r3, [pc, #584]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c49a:	2208      	movs	r2, #8
1000c49c:	6859      	ldr	r1, [r3, #4]
1000c49e:	e7f0      	b.n	1000c482 <system_peripheral_reset+0x102>
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
	switch (peripheral) {
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c4a0:	4b90      	ldr	r3, [pc, #576]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c4a2:	2202      	movs	r2, #2
1000c4a4:	6859      	ldr	r1, [r3, #4]
1000c4a6:	e7ec      	b.n	1000c482 <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c4a8:	2140      	movs	r1, #64	; 0x40
1000c4aa:	4b8e      	ldr	r3, [pc, #568]	; (1000c6e4 <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4ac:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c4ae:	891a      	ldrh	r2, [r3, #8]
1000c4b0:	438a      	bics	r2, r1
1000c4b2:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c4b4:	2240      	movs	r2, #64	; 0x40
1000c4b6:	8919      	ldrh	r1, [r3, #8]
1000c4b8:	430a      	orrs	r2, r1
1000c4ba:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000c4bc:	e773      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c4be:	2120      	movs	r1, #32
1000c4c0:	4b88      	ldr	r3, [pc, #544]	; (1000c6e4 <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4c2:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c4c4:	891a      	ldrh	r2, [r3, #8]
1000c4c6:	438a      	bics	r2, r1
1000c4c8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c4ca:	2220      	movs	r2, #32
1000c4cc:	8919      	ldrh	r1, [r3, #8]
1000c4ce:	430a      	orrs	r2, r1
1000c4d0:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000c4d2:	e768      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c4d4:	2110      	movs	r1, #16
1000c4d6:	4b83      	ldr	r3, [pc, #524]	; (1000c6e4 <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4d8:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c4da:	891a      	ldrh	r2, [r3, #8]
1000c4dc:	438a      	bics	r2, r1
1000c4de:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c4e0:	2210      	movs	r2, #16
1000c4e2:	8919      	ldrh	r1, [r3, #8]
1000c4e4:	430a      	orrs	r2, r1
1000c4e6:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000c4e8:	e75d      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c4ea:	2108      	movs	r1, #8
1000c4ec:	4b7d      	ldr	r3, [pc, #500]	; (1000c6e4 <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4ee:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c4f0:	891a      	ldrh	r2, [r3, #8]
1000c4f2:	438a      	bics	r2, r1
1000c4f4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c4f6:	2208      	movs	r2, #8
1000c4f8:	8919      	ldrh	r1, [r3, #8]
1000c4fa:	430a      	orrs	r2, r1
1000c4fc:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000c4fe:	e752      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c500:	4b78      	ldr	r3, [pc, #480]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c502:	4a81      	ldr	r2, [pc, #516]	; (1000c708 <system_peripheral_reset+0x388>)
1000c504:	8919      	ldrh	r1, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c506:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c508:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c50a:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c50c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c50e:	891a      	ldrh	r2, [r3, #8]
1000c510:	00c9      	lsls	r1, r1, #3
1000c512:	430a      	orrs	r2, r1
1000c514:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000c516:	e746      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c518:	4b72      	ldr	r3, [pc, #456]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c51a:	4a7a      	ldr	r2, [pc, #488]	; (1000c704 <system_peripheral_reset+0x384>)
1000c51c:	8919      	ldrh	r1, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c51e:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c520:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c522:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c524:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c526:	891a      	ldrh	r2, [r3, #8]
1000c528:	0089      	lsls	r1, r1, #2
1000c52a:	430a      	orrs	r2, r1
1000c52c:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000c52e:	e73a      	b.n	1000c3a6 <system_peripheral_reset+0x26>
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c530:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c532:	4a6c      	ldr	r2, [pc, #432]	; (1000c6e4 <system_peripheral_reset+0x364>)
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c534:	0609      	lsls	r1, r1, #24
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c536:	6853      	ldr	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c538:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c53a:	005b      	lsls	r3, r3, #1
1000c53c:	085b      	lsrs	r3, r3, #1
1000c53e:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c540:	6853      	ldr	r3, [r2, #4]
1000c542:	430b      	orrs	r3, r1
1000c544:	6053      	str	r3, [r2, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000c546:	e72e      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c548:	4b66      	ldr	r3, [pc, #408]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c54a:	4a70      	ldr	r2, [pc, #448]	; (1000c70c <system_peripheral_reset+0x38c>)
1000c54c:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c54e:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c550:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c552:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c554:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c556:	685a      	ldr	r2, [r3, #4]
1000c558:	05c9      	lsls	r1, r1, #23
1000c55a:	430a      	orrs	r2, r1
1000c55c:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000c55e:	e722      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c560:	4b60      	ldr	r3, [pc, #384]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c562:	4a6b      	ldr	r2, [pc, #428]	; (1000c710 <system_peripheral_reset+0x390>)
1000c564:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c566:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c568:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c56a:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c56c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c56e:	685a      	ldr	r2, [r3, #4]
1000c570:	0589      	lsls	r1, r1, #22
1000c572:	430a      	orrs	r2, r1
1000c574:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000c576:	e716      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c578:	4b5a      	ldr	r3, [pc, #360]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c57a:	4a66      	ldr	r2, [pc, #408]	; (1000c714 <system_peripheral_reset+0x394>)
1000c57c:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c57e:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c580:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c582:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c584:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c586:	685a      	ldr	r2, [r3, #4]
1000c588:	0549      	lsls	r1, r1, #21
1000c58a:	430a      	orrs	r2, r1
1000c58c:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000c58e:	e70a      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c590:	4b54      	ldr	r3, [pc, #336]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c592:	4a61      	ldr	r2, [pc, #388]	; (1000c718 <system_peripheral_reset+0x398>)
1000c594:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c596:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c598:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c59a:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c59c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c59e:	685a      	ldr	r2, [r3, #4]
1000c5a0:	0349      	lsls	r1, r1, #13
1000c5a2:	430a      	orrs	r2, r1
1000c5a4:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000c5a6:	e6fe      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c5a8:	2102      	movs	r1, #2
1000c5aa:	4b4e      	ldr	r3, [pc, #312]	; (1000c6e4 <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5ac:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c5ae:	891a      	ldrh	r2, [r3, #8]
1000c5b0:	438a      	bics	r2, r1
1000c5b2:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c5b4:	2202      	movs	r2, #2
1000c5b6:	8919      	ldrh	r1, [r3, #8]
1000c5b8:	430a      	orrs	r2, r1
1000c5ba:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000c5bc:	e6f3      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c5be:	4b49      	ldr	r3, [pc, #292]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c5c0:	4a56      	ldr	r2, [pc, #344]	; (1000c71c <system_peripheral_reset+0x39c>)
1000c5c2:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5c4:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c5c6:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c5c8:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c5ca:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c5cc:	685a      	ldr	r2, [r3, #4]
1000c5ce:	0509      	lsls	r1, r1, #20
1000c5d0:	430a      	orrs	r2, r1
1000c5d2:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000c5d4:	e6e7      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c5d6:	4b43      	ldr	r3, [pc, #268]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c5d8:	4a51      	ldr	r2, [pc, #324]	; (1000c720 <system_peripheral_reset+0x3a0>)
1000c5da:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5dc:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c5de:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c5e0:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c5e2:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c5e4:	685a      	ldr	r2, [r3, #4]
1000c5e6:	04c9      	lsls	r1, r1, #19
1000c5e8:	430a      	orrs	r2, r1
1000c5ea:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000c5ec:	e6db      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c5ee:	4b3d      	ldr	r3, [pc, #244]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c5f0:	4a4c      	ldr	r2, [pc, #304]	; (1000c724 <system_peripheral_reset+0x3a4>)
1000c5f2:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c5f4:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c5f6:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c5f8:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c5fa:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c5fc:	685a      	ldr	r2, [r3, #4]
1000c5fe:	0489      	lsls	r1, r1, #18
1000c600:	430a      	orrs	r2, r1
1000c602:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000c604:	e6cf      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c606:	4b37      	ldr	r3, [pc, #220]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c608:	4a47      	ldr	r2, [pc, #284]	; (1000c728 <system_peripheral_reset+0x3a8>)
1000c60a:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c60c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c60e:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c610:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c612:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c614:	685a      	ldr	r2, [r3, #4]
1000c616:	02c9      	lsls	r1, r1, #11
1000c618:	430a      	orrs	r2, r1
1000c61a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000c61c:	e6c3      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c61e:	4b31      	ldr	r3, [pc, #196]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c620:	4a42      	ldr	r2, [pc, #264]	; (1000c72c <system_peripheral_reset+0x3ac>)
1000c622:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c624:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c626:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c628:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c62a:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c62c:	685a      	ldr	r2, [r3, #4]
1000c62e:	0209      	lsls	r1, r1, #8
1000c630:	430a      	orrs	r2, r1
1000c632:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000c634:	e6b7      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c636:	4b2b      	ldr	r3, [pc, #172]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c638:	4a3d      	ldr	r2, [pc, #244]	; (1000c730 <system_peripheral_reset+0x3b0>)
1000c63a:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c63c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c63e:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c640:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c642:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c644:	685a      	ldr	r2, [r3, #4]
1000c646:	01c9      	lsls	r1, r1, #7
1000c648:	430a      	orrs	r2, r1
1000c64a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000c64c:	e6ab      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c64e:	4b25      	ldr	r3, [pc, #148]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c650:	4a38      	ldr	r2, [pc, #224]	; (1000c734 <system_peripheral_reset+0x3b4>)
1000c652:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c654:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c656:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c658:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c65a:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c65c:	685a      	ldr	r2, [r3, #4]
1000c65e:	0189      	lsls	r1, r1, #6
1000c660:	430a      	orrs	r2, r1
1000c662:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000c664:	e69f      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c666:	4b1f      	ldr	r3, [pc, #124]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c668:	4a33      	ldr	r2, [pc, #204]	; (1000c738 <system_peripheral_reset+0x3b8>)
1000c66a:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c66c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c66e:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c670:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c672:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c674:	685a      	ldr	r2, [r3, #4]
1000c676:	0149      	lsls	r1, r1, #5
1000c678:	430a      	orrs	r2, r1
1000c67a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000c67c:	e693      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c67e:	4b19      	ldr	r3, [pc, #100]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c680:	4a2e      	ldr	r2, [pc, #184]	; (1000c73c <system_peripheral_reset+0x3bc>)
1000c682:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c684:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c686:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c688:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c68a:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c68c:	685a      	ldr	r2, [r3, #4]
1000c68e:	0289      	lsls	r1, r1, #10
1000c690:	430a      	orrs	r2, r1
1000c692:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000c694:	e687      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c696:	4b13      	ldr	r3, [pc, #76]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c698:	4a29      	ldr	r2, [pc, #164]	; (1000c740 <system_peripheral_reset+0x3c0>)
1000c69a:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c69c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c69e:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c6a0:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6a2:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c6a4:	685a      	ldr	r2, [r3, #4]
1000c6a6:	0249      	lsls	r1, r1, #9
1000c6a8:	430a      	orrs	r2, r1
1000c6aa:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000c6ac:	e67b      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6ae:	4b0d      	ldr	r3, [pc, #52]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c6b0:	4a0d      	ldr	r2, [pc, #52]	; (1000c6e8 <system_peripheral_reset+0x368>)
1000c6b2:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6b4:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6b6:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c6b8:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6ba:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c6bc:	685a      	ldr	r2, [r3, #4]
1000c6be:	0109      	lsls	r1, r1, #4
1000c6c0:	430a      	orrs	r2, r1
1000c6c2:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000c6c4:	e66f      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6c6:	4b07      	ldr	r3, [pc, #28]	; (1000c6e4 <system_peripheral_reset+0x364>)
1000c6c8:	4a0f      	ldr	r2, [pc, #60]	; (1000c708 <system_peripheral_reset+0x388>)
1000c6ca:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c6cc:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6ce:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c6d0:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6d2:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c6d4:	685a      	ldr	r2, [r3, #4]
1000c6d6:	00c9      	lsls	r1, r1, #3
1000c6d8:	430a      	orrs	r2, r1
1000c6da:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000c6dc:	e663      	b.n	1000c3a6 <system_peripheral_reset+0x26>
1000c6de:	46c0      	nop			; (mov r8, r8)
1000c6e0:	100133c4 	.word	0x100133c4
1000c6e4:	4000b000 	.word	0x4000b000
1000c6e8:	fffff7ff 	.word	0xfffff7ff
1000c6ec:	fffffeff 	.word	0xfffffeff
1000c6f0:	feffffff 	.word	0xfeffffff
1000c6f4:	ff7fffff 	.word	0xff7fffff
1000c6f8:	ffbfffff 	.word	0xffbfffff
1000c6fc:	ffdfffff 	.word	0xffdfffff
1000c700:	fff7ffff 	.word	0xfff7ffff
1000c704:	fffffdff 	.word	0xfffffdff
1000c708:	fffffbff 	.word	0xfffffbff
1000c70c:	bfffffff 	.word	0xbfffffff
1000c710:	dfffffff 	.word	0xdfffffff
1000c714:	efffffff 	.word	0xefffffff
1000c718:	ffefffff 	.word	0xffefffff
1000c71c:	f7ffffff 	.word	0xf7ffffff
1000c720:	fbffffff 	.word	0xfbffffff
1000c724:	fdffffff 	.word	0xfdffffff
1000c728:	fffbffff 	.word	0xfffbffff
1000c72c:	ffff7fff 	.word	0xffff7fff
1000c730:	ffffbfff 	.word	0xffffbfff
1000c734:	ffffdfff 	.word	0xffffdfff
1000c738:	ffffefff 	.word	0xffffefff
1000c73c:	fffdffff 	.word	0xfffdffff
1000c740:	fffeffff 	.word	0xfffeffff
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c744:	2101      	movs	r1, #1
1000c746:	4b12      	ldr	r3, [pc, #72]	; (1000c790 <system_peripheral_reset+0x410>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c748:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c74a:	891a      	ldrh	r2, [r3, #8]
1000c74c:	438a      	bics	r2, r1
1000c74e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c750:	2201      	movs	r2, #1
1000c752:	8919      	ldrh	r1, [r3, #8]
1000c754:	430a      	orrs	r2, r1
1000c756:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000c758:	e625      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c75a:	4b0d      	ldr	r3, [pc, #52]	; (1000c790 <system_peripheral_reset+0x410>)
1000c75c:	4a0d      	ldr	r2, [pc, #52]	; (1000c794 <system_peripheral_reset+0x414>)
1000c75e:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c760:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c762:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c764:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c766:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c768:	685a      	ldr	r2, [r3, #4]
1000c76a:	0049      	lsls	r1, r1, #1
1000c76c:	430a      	orrs	r2, r1
1000c76e:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000c770:	e619      	b.n	1000c3a6 <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c772:	4b07      	ldr	r3, [pc, #28]	; (1000c790 <system_peripheral_reset+0x410>)
1000c774:	2240      	movs	r2, #64	; 0x40
1000c776:	6859      	ldr	r1, [r3, #4]
1000c778:	e683      	b.n	1000c482 <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c77a:	4b05      	ldr	r3, [pc, #20]	; (1000c790 <system_peripheral_reset+0x410>)
1000c77c:	2210      	movs	r2, #16
1000c77e:	6859      	ldr	r1, [r3, #4]
1000c780:	e67f      	b.n	1000c482 <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c782:	4b03      	ldr	r3, [pc, #12]	; (1000c790 <system_peripheral_reset+0x410>)
1000c784:	2204      	movs	r2, #4
1000c786:	6859      	ldr	r1, [r3, #4]
1000c788:	e67b      	b.n	1000c482 <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000c78a:	2017      	movs	r0, #23
1000c78c:	e60b      	b.n	1000c3a6 <system_peripheral_reset+0x26>
1000c78e:	46c0      	nop			; (mov r8, r8)
1000c790:	4000b000 	.word	0x4000b000
1000c794:	fffffeff 	.word	0xfffffeff

1000c798 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000c798:	2380      	movs	r3, #128	; 0x80
1000c79a:	04db      	lsls	r3, r3, #19
1000c79c:	469c      	mov	ip, r3
1000c79e:	4460      	add	r0, ip
1000c7a0:	0080      	lsls	r0, r0, #2
1000c7a2:	6001      	str	r1, [r0, #0]
}
1000c7a4:	4770      	bx	lr
1000c7a6:	46c0      	nop			; (mov r8, r8)

1000c7a8 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000c7a8:	4a04      	ldr	r2, [pc, #16]	; (1000c7bc <_sbrk+0x14>)
1000c7aa:	6813      	ldr	r3, [r2, #0]
1000c7ac:	2b00      	cmp	r3, #0
1000c7ae:	d003      	beq.n	1000c7b8 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	heap += incr;
1000c7b0:	1818      	adds	r0, r3, r0
1000c7b2:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
1000c7b4:	0018      	movs	r0, r3
1000c7b6:	4770      	bx	lr
1000c7b8:	4b01      	ldr	r3, [pc, #4]	; (1000c7c0 <_sbrk+0x18>)
1000c7ba:	e7f9      	b.n	1000c7b0 <_sbrk+0x8>
1000c7bc:	10014cec 	.word	0x10014cec
1000c7c0:	100167f0 	.word	0x100167f0

1000c7c4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
1000c7c4:	2001      	movs	r0, #1
1000c7c6:	4240      	negs	r0, r0
1000c7c8:	4770      	bx	lr
1000c7ca:	46c0      	nop			; (mov r8, r8)

1000c7cc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000c7cc:	2380      	movs	r3, #128	; 0x80
1000c7ce:	019b      	lsls	r3, r3, #6

	return 0;
}
1000c7d0:	2000      	movs	r0, #0
	return -1;
}

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000c7d2:	604b      	str	r3, [r1, #4]

	return 0;
}
1000c7d4:	4770      	bx	lr
1000c7d6:	46c0      	nop			; (mov r8, r8)

1000c7d8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000c7d8:	2001      	movs	r0, #1
1000c7da:	4770      	bx	lr

1000c7dc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
1000c7dc:	2000      	movs	r0, #0
1000c7de:	4770      	bx	lr

1000c7e0 <interrupt_cb>:
    dualtimer_disable(DUALTIMER_TIMER2);
}
void interrupt_cb(void)
{
    //imu_interrupt = true;
    hal.new_gyro = 1;
1000c7e0:	2201      	movs	r2, #1
    dualtimer_init(&config_dualtimer);
    dualtimer_disable(DUALTIMER_TIMER1);
    dualtimer_disable(DUALTIMER_TIMER2);
}
void interrupt_cb(void)
{
1000c7e2:	b510      	push	{r4, lr}
    //imu_interrupt = true;
    hal.new_gyro = 1;
1000c7e4:	4b04      	ldr	r3, [pc, #16]	; (1000c7f8 <interrupt_cb+0x18>)
    send_plf_int_msg_ind(PIN_AO_GPIO_2, GPIO_CALLBACK_RISING, NULL, 0);
1000c7e6:	2102      	movs	r1, #2
    dualtimer_disable(DUALTIMER_TIMER2);
}
void interrupt_cb(void)
{
    //imu_interrupt = true;
    hal.new_gyro = 1;
1000c7e8:	711a      	strb	r2, [r3, #4]
    send_plf_int_msg_ind(PIN_AO_GPIO_2, GPIO_CALLBACK_RISING, NULL, 0);
1000c7ea:	201d      	movs	r0, #29
1000c7ec:	2300      	movs	r3, #0
1000c7ee:	2200      	movs	r2, #0
1000c7f0:	4c02      	ldr	r4, [pc, #8]	; (1000c7fc <interrupt_cb+0x1c>)
1000c7f2:	47a0      	blx	r4
}
1000c7f4:	bd10      	pop	{r4, pc}
1000c7f6:	46c0      	nop			; (mov r8, r8)
1000c7f8:	10014cf0 	.word	0x10014cf0
1000c7fc:	1000aefd 	.word	0x1000aefd

1000c800 <configure_i2c_master>:
    //count[0] = delta;
    count[0] = val;
}

void configure_i2c_master(void)
{
1000c800:	b570      	push	{r4, r5, r6, lr}
    i2c_wpacket.data = malloc(16 * sizeof(uint8_t));
1000c802:	2010      	movs	r0, #16
    //count[0] = delta;
    count[0] = val;
}

void configure_i2c_master(void)
{
1000c804:	b086      	sub	sp, #24
    i2c_wpacket.data = malloc(16 * sizeof(uint8_t));
1000c806:	4c14      	ldr	r4, [pc, #80]	; (1000c858 <configure_i2c_master+0x58>)
1000c808:	47a0      	blx	r4
1000c80a:	4b14      	ldr	r3, [pc, #80]	; (1000c85c <configure_i2c_master+0x5c>)
1000c80c:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(16 * sizeof(uint8_t));
1000c80e:	2010      	movs	r0, #16
1000c810:	47a0      	blx	r4
1000c812:	4b13      	ldr	r3, [pc, #76]	; (1000c860 <configure_i2c_master+0x60>)
    
    /* Initialize config structure and software module. */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
1000c814:	ac01      	add	r4, sp, #4
}

void configure_i2c_master(void)
{
    i2c_wpacket.data = malloc(16 * sizeof(uint8_t));
    i2c_rpacket.data = malloc(16 * sizeof(uint8_t));
1000c816:	6058      	str	r0, [r3, #4]
    
    /* Initialize config structure and software module. */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
1000c818:	4b12      	ldr	r3, [pc, #72]	; (1000c864 <configure_i2c_master+0x64>)
1000c81a:	0020      	movs	r0, r4
1000c81c:	4798      	blx	r3
    /* 26 MHz / 65 = 400 kHz */
    config_i2c_master.clock_source = I2C_CLK_INPUT_0;
1000c81e:	2300      	movs	r3, #0
1000c820:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = 65;
1000c822:	3341      	adds	r3, #65	; 0x41
1000c824:	8063      	strh	r3, [r4, #2]
    /* 3 MHz / 30 = 100 kHz */
    //config_i2c_master.clock_source = I2C_CLK_INPUT_3;
    //config_i2c_master.clock_divider = 30;
    config_i2c_master.pin_number_pad0 = PIN_LP_GPIO_8;
1000c826:	3b39      	subs	r3, #57	; 0x39
1000c828:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = PIN_LP_GPIO_9;
1000c82a:	3301      	adds	r3, #1
1000c82c:	60e3      	str	r3, [r4, #12]
1000c82e:	4d0e      	ldr	r5, [pc, #56]	; (1000c868 <configure_i2c_master+0x68>)
    config_i2c_master.pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
1000c830:	3b07      	subs	r3, #7
1000c832:	4e0e      	ldr	r6, [pc, #56]	; (1000c86c <configure_i2c_master+0x6c>)
1000c834:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
1000c836:	6123      	str	r3, [r4, #16]
    /* Initialize and enable device with config, and enable i2c. */
    while(i2c_master_init(&i2c_master_instance, I2C0, &config_i2c_master) != STATUS_OK);
1000c838:	0022      	movs	r2, r4
1000c83a:	490d      	ldr	r1, [pc, #52]	; (1000c870 <configure_i2c_master+0x70>)
1000c83c:	0028      	movs	r0, r5
1000c83e:	47b0      	blx	r6
1000c840:	2800      	cmp	r0, #0
1000c842:	d1f9      	bne.n	1000c838 <configure_i2c_master+0x38>
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000c844:	2128      	movs	r1, #40	; 0x28
    
    i2c_enable(i2c_master_instance.hw);
1000c846:	682a      	ldr	r2, [r5, #0]
1000c848:	5c53      	ldrb	r3, [r2, r1]
1000c84a:	07db      	lsls	r3, r3, #31
1000c84c:	d4fc      	bmi.n	1000c848 <configure_i2c_master+0x48>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
1000c84e:	2301      	movs	r3, #1
1000c850:	7513      	strb	r3, [r2, #20]
}
1000c852:	b006      	add	sp, #24
1000c854:	bd70      	pop	{r4, r5, r6, pc}
1000c856:	46c0      	nop			; (mov r8, r8)
1000c858:	1001146d 	.word	0x1001146d
1000c85c:	10014df4 	.word	0x10014df4
1000c860:	10014de4 	.word	0x10014de4
1000c864:	1000bef5 	.word	0x1000bef5
1000c868:	10014dec 	.word	0x10014dec
1000c86c:	1000bf0d 	.word	0x1000bf0d
1000c870:	40003000 	.word	0x40003000

1000c874 <init_dualtimer>:

void init_dualtimer(void)
{
1000c874:	b510      	push	{r4, lr}
1000c876:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000c878:	ac01      	add	r4, sp, #4
1000c87a:	0020      	movs	r0, r4
1000c87c:	4b09      	ldr	r3, [pc, #36]	; (1000c8a4 <init_dualtimer+0x30>)
1000c87e:	4798      	blx	r3
    
    config_dualtimer.timer1.load_value = 26000;
1000c880:	4b09      	ldr	r3, [pc, #36]	; (1000c8a8 <init_dualtimer+0x34>)
    config_dualtimer.timer2.load_value = 0xffffffff;
    config_dualtimer.timer2.interrup_enable = false;
    
    dualtimer_init(&config_dualtimer);
1000c882:	0020      	movs	r0, r4
void init_dualtimer(void)
{
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
    
    config_dualtimer.timer1.load_value = 26000;
1000c884:	60a3      	str	r3, [r4, #8]
    config_dualtimer.timer2.load_value = 0xffffffff;
1000c886:	2301      	movs	r3, #1
1000c888:	425b      	negs	r3, r3
1000c88a:	6163      	str	r3, [r4, #20]
    config_dualtimer.timer2.interrup_enable = false;
1000c88c:	2300      	movs	r3, #0
1000c88e:	7423      	strb	r3, [r4, #16]
    
    dualtimer_init(&config_dualtimer);
1000c890:	4b06      	ldr	r3, [pc, #24]	; (1000c8ac <init_dualtimer+0x38>)
1000c892:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000c894:	4c06      	ldr	r4, [pc, #24]	; (1000c8b0 <init_dualtimer+0x3c>)
1000c896:	2000      	movs	r0, #0
1000c898:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
1000c89a:	2001      	movs	r0, #1
1000c89c:	47a0      	blx	r4
}
1000c89e:	b008      	add	sp, #32
1000c8a0:	bd10      	pop	{r4, pc}
1000c8a2:	46c0      	nop			; (mov r8, r8)
1000c8a4:	1000817d 	.word	0x1000817d
1000c8a8:	00006590 	.word	0x00006590
1000c8ac:	100081fd 	.word	0x100081fd
1000c8b0:	100081d9 	.word	0x100081d9

1000c8b4 <main>:
    dmp_read_fifo(gyro, accel_short, quat, &sensor_timestamp, &sensors, &more);
    DBG_LOG("FIFO: %d %d %d, %d %d %d, %ld %ld %ld %ld", gyro[0], gyro[1], gyro[2], accel_short[0], accel_short[1], accel_short[2], quat[0], quat[1], quat[2], quat[3]);
}

int main(void)
{
1000c8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c8b6:	4644      	mov	r4, r8
1000c8b8:	4656      	mov	r6, sl
1000c8ba:	464d      	mov	r5, r9
1000c8bc:	465f      	mov	r7, fp
1000c8be:	b4f0      	push	{r4, r5, r6, r7}
    inv_error_t result;
    unsigned char accel_fsr = 0;
1000c8c0:	250b      	movs	r5, #11
1000c8c2:	2600      	movs	r6, #0
    dmp_read_fifo(gyro, accel_short, quat, &sensor_timestamp, &sensors, &more);
    DBG_LOG("FIFO: %d %d %d, %d %d %d, %ld %ld %ld %ld", gyro[0], gyro[1], gyro[2], accel_short[0], accel_short[1], accel_short[2], quat[0], quat[1], quat[2], quat[3]);
}

int main(void)
{
1000c8c4:	b093      	sub	sp, #76	; 0x4c
    unsigned long timestamp = 0;
    unsigned short compass_fsr;
    uint8_t temp_cnt = 0;
    uint8_t compass_cnt = 0;
    
    platform_driver_init();
1000c8c6:	4b6c      	ldr	r3, [pc, #432]	; (1000ca78 <main+0x1c4>)
}

int main(void)
{
    inv_error_t result;
    unsigned char accel_fsr = 0;
1000c8c8:	446d      	add	r5, sp
1000c8ca:	702e      	strb	r6, [r5, #0]
    unsigned long timestamp = 0;
    unsigned short compass_fsr;
    uint8_t temp_cnt = 0;
    uint8_t compass_cnt = 0;
    
    platform_driver_init();
1000c8cc:	4798      	blx	r3
    gpio_init();
1000c8ce:	4b6b      	ldr	r3, [pc, #428]	; (1000ca7c <main+0x1c8>)
1000c8d0:	4798      	blx	r3
    acquire_sleep_lock();
1000c8d2:	4b6b      	ldr	r3, [pc, #428]	; (1000ca80 <main+0x1cc>)
1000c8d4:	4798      	blx	r3
    serial_console_init();
1000c8d6:	4b6b      	ldr	r3, [pc, #428]	; (1000ca84 <main+0x1d0>)
1000c8d8:	4798      	blx	r3
    ble_device_init(NULL);
1000c8da:	2000      	movs	r0, #0
1000c8dc:	4b6a      	ldr	r3, [pc, #424]	; (1000ca88 <main+0x1d4>)
1000c8de:	4798      	blx	r3

    init_dualtimer();
1000c8e0:	4b6a      	ldr	r3, [pc, #424]	; (1000ca8c <main+0x1d8>)
}

static void configure_imu_gpio(void)
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000c8e2:	ac0f      	add	r4, sp, #60	; 0x3c
    gpio_init();
    acquire_sleep_lock();
    serial_console_init();
    ble_device_init(NULL);

    init_dualtimer();
1000c8e4:	4798      	blx	r3
    delay_init();
1000c8e6:	4b6a      	ldr	r3, [pc, #424]	; (1000ca90 <main+0x1dc>)
1000c8e8:	4798      	blx	r3
}

static void configure_imu_gpio(void)
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000c8ea:	0020      	movs	r0, r4
1000c8ec:	4b69      	ldr	r3, [pc, #420]	; (1000ca94 <main+0x1e0>)
1000c8ee:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000c8f0:	2302      	movs	r3, #2
1000c8f2:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000c8f4:	3b01      	subs	r3, #1
1000c8f6:	70e3      	strb	r3, [r4, #3]
    gpio_pin_set_config(PIN_AO_GPIO_2, &config_gpio_pin);
1000c8f8:	0021      	movs	r1, r4
1000c8fa:	4b67      	ldr	r3, [pc, #412]	; (1000ca98 <main+0x1e4>)
1000c8fc:	201d      	movs	r0, #29

static void configure_imu_gpio(void)
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000c8fe:	7026      	strb	r6, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
    config_gpio_pin.aon_wakeup = true;
    gpio_pin_set_config(PIN_AO_GPIO_2, &config_gpio_pin);
1000c900:	4798      	blx	r3

    init_dualtimer();
    delay_init();

    configure_imu_gpio();
    configure_i2c_master();
1000c902:	4b66      	ldr	r3, [pc, #408]	; (1000ca9c <main+0x1e8>)
1000c904:	4798      	blx	r3
    
    struct int_param_s int_param;
    int_param.cb = (void*)interrupt_cb;
1000c906:	4b66      	ldr	r3, [pc, #408]	; (1000caa0 <main+0x1ec>)
    int_param.pin = PIN_AO_GPIO_2;
    result = mpu_init(&int_param);
1000c908:	0020      	movs	r0, r4

    configure_imu_gpio();
    configure_i2c_master();
    
    struct int_param_s int_param;
    int_param.cb = (void*)interrupt_cb;
1000c90a:	6063      	str	r3, [r4, #4]
    int_param.pin = PIN_AO_GPIO_2;
1000c90c:	231d      	movs	r3, #29
1000c90e:	8023      	strh	r3, [r4, #0]
    result = mpu_init(&int_param);
1000c910:	4b64      	ldr	r3, [pc, #400]	; (1000caa4 <main+0x1f0>)
1000c912:	4798      	blx	r3
    if(result) {
1000c914:	2800      	cmp	r0, #0
1000c916:	d000      	beq.n	1000c91a <main+0x66>
1000c918:	e0aa      	b.n	1000ca70 <main+0x1bc>
        //system_global_reset();
    //}

    /* Get/set hardware configuration. Start gyro. */
    /* Wake up all sensors. */
    mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
1000c91a:	4b63      	ldr	r3, [pc, #396]	; (1000caa8 <main+0x1f4>)
1000c91c:	2079      	movs	r0, #121	; 0x79
1000c91e:	4798      	blx	r3

    /* Push both gyro and accel data into the FIFO. */
    mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
1000c920:	4b62      	ldr	r3, [pc, #392]	; (1000caac <main+0x1f8>)
1000c922:	2078      	movs	r0, #120	; 0x78
1000c924:	4798      	blx	r3
    mpu_set_sample_rate(DEFAULT_MPU_HZ);
1000c926:	4b62      	ldr	r3, [pc, #392]	; (1000cab0 <main+0x1fc>)
1000c928:	200a      	movs	r0, #10
1000c92a:	4798      	blx	r3
    /* The compass sampling rate can be less than the gyro/accel sampling rate.
    * Use this function for proper power management.
    */
    mpu_set_compass_sample_rate(1000 / COMPASS_READ_MS);
1000c92c:	4b61      	ldr	r3, [pc, #388]	; (1000cab4 <main+0x200>)
1000c92e:	200a      	movs	r0, #10
1000c930:	4798      	blx	r3

    /* Read back configuration in case it was set improperly. */
    mpu_get_sample_rate(&gyro_rate);
1000c932:	200e      	movs	r0, #14
1000c934:	4b60      	ldr	r3, [pc, #384]	; (1000cab8 <main+0x204>)
1000c936:	4468      	add	r0, sp
1000c938:	4798      	blx	r3
    mpu_get_gyro_fsr(&gyro_fsr);
1000c93a:	4b60      	ldr	r3, [pc, #384]	; (1000cabc <main+0x208>)
1000c93c:	a804      	add	r0, sp, #16
1000c93e:	4798      	blx	r3
    mpu_get_accel_fsr(&accel_fsr);
1000c940:	0028      	movs	r0, r5
1000c942:	4b5f      	ldr	r3, [pc, #380]	; (1000cac0 <main+0x20c>)
1000c944:	4798      	blx	r3
    mpu_get_compass_fsr(&compass_fsr);
1000c946:	2012      	movs	r0, #18
1000c948:	4b5e      	ldr	r3, [pc, #376]	; (1000cac4 <main+0x210>)
1000c94a:	4468      	add	r0, sp
1000c94c:	4798      	blx	r3
    //inv_set_gyro_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long)gyro_fsr<<15);
    //inv_set_accel_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long)accel_fsr<<15);
    //inv_set_compass_orientation_and_scale(inv_orientation_matrix_to_scalar(compass_pdata.orientation), (long)compass_fsr<<15);

    /* Initialize HAL state variables. */
    hal.sensors = ACCEL_ON | GYRO_ON | COMPASS_ON;
1000c94e:	2307      	movs	r3, #7
1000c950:	4f5d      	ldr	r7, [pc, #372]	; (1000cac8 <main+0x214>)
    hal.dmp_on = 0;
    hal.report = 0;
    hal.rx.cmd = 0;
1000c952:	2221      	movs	r2, #33	; 0x21
    //inv_set_gyro_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long)gyro_fsr<<15);
    //inv_set_accel_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long)accel_fsr<<15);
    //inv_set_compass_orientation_and_scale(inv_orientation_matrix_to_scalar(compass_pdata.orientation), (long)compass_fsr<<15);

    /* Initialize HAL state variables. */
    hal.sensors = ACCEL_ON | GYRO_ON | COMPASS_ON;
1000c954:	707b      	strb	r3, [r7, #1]
    hal.dmp_on = 0;
1000c956:	2300      	movs	r3, #0
    hal.next_pedo_ms = 0;
    hal.next_compass_ms = 0;
    hal.next_temp_ms = 0;

    /* Compass reads are handled by scheduler. */
    dualtimer_enable(DUALTIMER_TIMER2);
1000c958:	2001      	movs	r0, #1

    /* Initialize HAL state variables. */
    hal.sensors = ACCEL_ON | GYRO_ON | COMPASS_ON;
    hal.dmp_on = 0;
    hal.report = 0;
    hal.rx.cmd = 0;
1000c95a:	54bb      	strb	r3, [r7, r2]
    //inv_set_accel_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long)accel_fsr<<15);
    //inv_set_compass_orientation_and_scale(inv_orientation_matrix_to_scalar(compass_pdata.orientation), (long)compass_fsr<<15);

    /* Initialize HAL state variables. */
    hal.sensors = ACCEL_ON | GYRO_ON | COMPASS_ON;
    hal.dmp_on = 0;
1000c95c:	70bb      	strb	r3, [r7, #2]
    hal.report = 0;
1000c95e:	61bb      	str	r3, [r7, #24]
    hal.rx.cmd = 0;
    hal.next_pedo_ms = 0;
1000c960:	60fb      	str	r3, [r7, #12]
    hal.next_compass_ms = 0;
1000c962:	617b      	str	r3, [r7, #20]
    hal.next_temp_ms = 0;
1000c964:	613b      	str	r3, [r7, #16]

    /* Compass reads are handled by scheduler. */
    dualtimer_enable(DUALTIMER_TIMER2);
1000c966:	4b59      	ldr	r3, [pc, #356]	; (1000cacc <main+0x218>)
1000c968:	4798      	blx	r3
#define COMPASS_ENABLED 1

static inline void get_ms(uint32_t *count)
{
    //static uint32_t old_val = 0;
    volatile uint32_t val = (uint32_t)((0xffffffff - dualtimer_get_value(DUALTIMER_TIMER2)) / (uint32_t)26000);
1000c96a:	4b59      	ldr	r3, [pc, #356]	; (1000cad0 <main+0x21c>)
1000c96c:	2001      	movs	r0, #1
1000c96e:	469b      	mov	fp, r3
1000c970:	4798      	blx	r3
1000c972:	4b58      	ldr	r3, [pc, #352]	; (1000cad4 <main+0x220>)
1000c974:	4958      	ldr	r1, [pc, #352]	; (1000cad8 <main+0x224>)
1000c976:	43c0      	mvns	r0, r0
1000c978:	469a      	mov	sl, r3
1000c97a:	4798      	blx	r3
1000c97c:	9007      	str	r0, [sp, #28]
        //system_global_reset();
    //}
    //dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_pdata.orientation));

    //hal.dmp_features = DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL;
    hal.dmp_features = DMP_FEATURE_GYRO_CAL  | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_ANY_GYRO;
1000c97e:	20f0      	movs	r0, #240	; 0xf0
    //volatile uint32_t delta;
    //if(val >= old_val) delta = val - old_val;
    //else delta = (uint32_t)(0xffffffff/(uint32_t)26000) - old_val + val;
    //old_val = val;
    //count[0] = delta;
    count[0] = val;
1000c980:	9b07      	ldr	r3, [sp, #28]
        //system_global_reset();
    //}
    //dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_pdata.orientation));

    //hal.dmp_features = DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL;
    hal.dmp_features = DMP_FEATURE_GYRO_CAL  | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_ANY_GYRO;
1000c982:	0040      	lsls	r0, r0, #1
    dmp_enable_feature(hal.dmp_features);
1000c984:	4b55      	ldr	r3, [pc, #340]	; (1000cadc <main+0x228>)
        //system_global_reset();
    //}
    //dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_pdata.orientation));

    //hal.dmp_features = DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL;
    hal.dmp_features = DMP_FEATURE_GYRO_CAL  | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_ANY_GYRO;
1000c986:	83b8      	strh	r0, [r7, #28]
    dmp_enable_feature(hal.dmp_features);
1000c988:	4798      	blx	r3
    //inv_set_quat_sample_rate(1000000L / DEFAULT_MPU_HZ);
    //mpu_set_dmp_state(1);
    //hal.dmp_on = 1;

    //gpio_register_callback(PIN_AO_GPIO_2, interrupt_cb, GPIO_CALLBACK_RISING);
    gpio_enable_callback(PIN_AO_GPIO_2);
1000c98a:	4b55      	ldr	r3, [pc, #340]	; (1000cae0 <main+0x22c>)
1000c98c:	201d      	movs	r0, #29
1000c98e:	4798      	blx	r3
    unsigned char accel_fsr = 0;
    unsigned short gyro_rate, gyro_fsr;
    unsigned long timestamp = 0;
    unsigned short compass_fsr;
    uint8_t temp_cnt = 0;
    uint8_t compass_cnt = 0;
1000c990:	2300      	movs	r3, #0
1000c992:	4699      	mov	r9, r3
    inv_error_t result;
    unsigned char accel_fsr = 0;
    unsigned short gyro_rate, gyro_fsr;
    unsigned long timestamp = 0;
    unsigned short compass_fsr;
    uint8_t temp_cnt = 0;
1000c994:	4698      	mov	r8, r3
1000c996:	ad0b      	add	r5, sp, #44	; 0x2c
1000c998:	ac09      	add	r4, sp, #36	; 0x24
    gpio_enable_callback(PIN_AO_GPIO_2);

    while (true) {
        unsigned long sensor_timestamp;
        
        ble_event_task(BLE_EVENT_TIMEOUT);
1000c99a:	2001      	movs	r0, #1
1000c99c:	4b51      	ldr	r3, [pc, #324]	; (1000cae4 <main+0x230>)
1000c99e:	4240      	negs	r0, r0
1000c9a0:	4798      	blx	r3
#define COMPASS_ENABLED 1

static inline void get_ms(uint32_t *count)
{
    //static uint32_t old_val = 0;
    volatile uint32_t val = (uint32_t)((0xffffffff - dualtimer_get_value(DUALTIMER_TIMER2)) / (uint32_t)26000);
1000c9a2:	2001      	movs	r0, #1
1000c9a4:	47d8      	blx	fp
1000c9a6:	494c      	ldr	r1, [pc, #304]	; (1000cad8 <main+0x224>)
1000c9a8:	43c0      	mvns	r0, r0
1000c9aa:	47d0      	blx	sl
1000c9ac:	9008      	str	r0, [sp, #32]
    //volatile uint32_t delta;
    //if(val >= old_val) delta = val - old_val;
    //else delta = (uint32_t)(0xffffffff/(uint32_t)26000) - old_val + val;
    //old_val = val;
    //count[0] = delta;
    count[0] = val;
1000c9ae:	9b08      	ldr	r3, [sp, #32]
        
        ble_event_task(BLE_EVENT_TIMEOUT);

        get_ms(&timestamp);
        
        if (hal.new_gyro) {
1000c9b0:	793b      	ldrb	r3, [r7, #4]
1000c9b2:	2b00      	cmp	r3, #0
1000c9b4:	d0f1      	beq.n	1000c99a <main+0xe6>
            short gyro[3], accel_short[3], compass_short[3];
            unsigned char sensors, more;
            long temperature;
            
            hal.new_gyro = 0;
1000c9b6:	2300      	movs	r3, #0
1000c9b8:	713b      	strb	r3, [r7, #4]
            compass_cnt++;
1000c9ba:	464b      	mov	r3, r9
1000c9bc:	3301      	adds	r3, #1
1000c9be:	b2db      	uxtb	r3, r3
1000c9c0:	4699      	mov	r9, r3
            temp_cnt++;
1000c9c2:	4643      	mov	r3, r8
1000c9c4:	3301      	adds	r3, #1
1000c9c6:	b2db      	uxtb	r3, r3
1000c9c8:	4698      	mov	r8, r3
            
            mpu_read_fifo(gyro, accel_short, &sensor_timestamp, &sensors, &more);
1000c9ca:	230d      	movs	r3, #13
1000c9cc:	446b      	add	r3, sp
1000c9ce:	9300      	str	r3, [sp, #0]
1000c9d0:	aa05      	add	r2, sp, #20
1000c9d2:	ab03      	add	r3, sp, #12
1000c9d4:	0029      	movs	r1, r5
1000c9d6:	0020      	movs	r0, r4
1000c9d8:	4e43      	ldr	r6, [pc, #268]	; (1000cae8 <main+0x234>)
1000c9da:	47b0      	blx	r6
            
            if (more) {
1000c9dc:	466b      	mov	r3, sp
1000c9de:	7b5b      	ldrb	r3, [r3, #13]
1000c9e0:	2b00      	cmp	r3, #0
1000c9e2:	d001      	beq.n	1000c9e8 <main+0x134>
                hal.new_gyro = 1;
1000c9e4:	2301      	movs	r3, #1
1000c9e6:	713b      	strb	r3, [r7, #4]
            }
            
            //if(sensors & INV_XYZ_GYRO) {
                DBG_LOG("Gyro: %d %d %d", gyro[0], gyro[1], gyro[2]);
1000c9e8:	4b40      	ldr	r3, [pc, #256]	; (1000caec <main+0x238>)
1000c9ea:	4841      	ldr	r0, [pc, #260]	; (1000caf0 <main+0x23c>)
1000c9ec:	4798      	blx	r3
1000c9ee:	2204      	movs	r2, #4
1000c9f0:	5ea3      	ldrsh	r3, [r4, r2]
1000c9f2:	4e40      	ldr	r6, [pc, #256]	; (1000caf4 <main+0x240>)
1000c9f4:	2102      	movs	r1, #2
1000c9f6:	5e62      	ldrsh	r2, [r4, r1]
1000c9f8:	2000      	movs	r0, #0
1000c9fa:	5e21      	ldrsh	r1, [r4, r0]
1000c9fc:	483e      	ldr	r0, [pc, #248]	; (1000caf8 <main+0x244>)
1000c9fe:	47b0      	blx	r6
                if (temp_cnt >= 10) {
1000ca00:	4643      	mov	r3, r8
1000ca02:	2b09      	cmp	r3, #9
1000ca04:	d826      	bhi.n	1000ca54 <main+0x1a0>
                    mpu_get_temperature(&temperature, &sensor_timestamp);
                    DBG_LOG("Temp: %ld", temperature);
                }
            //}
            //if(sensors & INV_XYZ_ACCEL) {
                DBG_LOG("Accel: %d %d %d", accel_short[0], accel_short[1], accel_short[2]);
1000ca06:	4b39      	ldr	r3, [pc, #228]	; (1000caec <main+0x238>)
1000ca08:	4839      	ldr	r0, [pc, #228]	; (1000caf0 <main+0x23c>)
1000ca0a:	4798      	blx	r3
1000ca0c:	2204      	movs	r2, #4
1000ca0e:	5eab      	ldrsh	r3, [r5, r2]
1000ca10:	4e38      	ldr	r6, [pc, #224]	; (1000caf4 <main+0x240>)
1000ca12:	2102      	movs	r1, #2
1000ca14:	5e6a      	ldrsh	r2, [r5, r1]
1000ca16:	2000      	movs	r0, #0
1000ca18:	5e29      	ldrsh	r1, [r5, r0]
1000ca1a:	4838      	ldr	r0, [pc, #224]	; (1000cafc <main+0x248>)
1000ca1c:	47b0      	blx	r6
            //}                

            if(compass_cnt > 10) {
1000ca1e:	464b      	mov	r3, r9
1000ca20:	2b0a      	cmp	r3, #10
1000ca22:	d9ba      	bls.n	1000c99a <main+0xe6>
                compass_cnt = 0;
                if(!mpu_get_compass_reg(compass_short, &sensor_timestamp)) {
1000ca24:	4b36      	ldr	r3, [pc, #216]	; (1000cb00 <main+0x24c>)
1000ca26:	a905      	add	r1, sp, #20
1000ca28:	a80d      	add	r0, sp, #52	; 0x34
1000ca2a:	4798      	blx	r3
            //if(sensors & INV_XYZ_ACCEL) {
                DBG_LOG("Accel: %d %d %d", accel_short[0], accel_short[1], accel_short[2]);
            //}                

            if(compass_cnt > 10) {
                compass_cnt = 0;
1000ca2c:	2300      	movs	r3, #0
1000ca2e:	4699      	mov	r9, r3
                if(!mpu_get_compass_reg(compass_short, &sensor_timestamp)) {
1000ca30:	2800      	cmp	r0, #0
1000ca32:	d1b2      	bne.n	1000c99a <main+0xe6>
                    DBG_LOG("Compass: %d %d %d", compass_short[0], compass_short[1], compass_short[2]);
1000ca34:	4b2d      	ldr	r3, [pc, #180]	; (1000caec <main+0x238>)
1000ca36:	482e      	ldr	r0, [pc, #184]	; (1000caf0 <main+0x23c>)
1000ca38:	4798      	blx	r3
1000ca3a:	466b      	mov	r3, sp
1000ca3c:	2238      	movs	r2, #56	; 0x38
1000ca3e:	5e9b      	ldrsh	r3, [r3, r2]
1000ca40:	466a      	mov	r2, sp
1000ca42:	2136      	movs	r1, #54	; 0x36
1000ca44:	5e52      	ldrsh	r2, [r2, r1]
1000ca46:	4669      	mov	r1, sp
1000ca48:	4e2a      	ldr	r6, [pc, #168]	; (1000caf4 <main+0x240>)
1000ca4a:	2034      	movs	r0, #52	; 0x34
1000ca4c:	5e09      	ldrsh	r1, [r1, r0]
1000ca4e:	482d      	ldr	r0, [pc, #180]	; (1000cb04 <main+0x250>)
1000ca50:	47b0      	blx	r6
                    ////DBG_LOG("Quat: %ld %ld %ld %ld", data[0], data[1], data[2], data[3]);
                //}
            //}
            //imu_interrupt = false;
        //}
    }
1000ca52:	e7a2      	b.n	1000c99a <main+0xe6>
            //if(sensors & INV_XYZ_GYRO) {
                DBG_LOG("Gyro: %d %d %d", gyro[0], gyro[1], gyro[2]);
                if (temp_cnt >= 10) {
                    temp_cnt = 0;
                    /* Temperature only used for gyro temp comp. */
                    mpu_get_temperature(&temperature, &sensor_timestamp);
1000ca54:	a905      	add	r1, sp, #20
1000ca56:	4b2c      	ldr	r3, [pc, #176]	; (1000cb08 <main+0x254>)
1000ca58:	a806      	add	r0, sp, #24
1000ca5a:	4798      	blx	r3
                    DBG_LOG("Temp: %ld", temperature);
1000ca5c:	4b23      	ldr	r3, [pc, #140]	; (1000caec <main+0x238>)
1000ca5e:	4824      	ldr	r0, [pc, #144]	; (1000caf0 <main+0x23c>)
1000ca60:	4798      	blx	r3
1000ca62:	4b24      	ldr	r3, [pc, #144]	; (1000caf4 <main+0x240>)
1000ca64:	9906      	ldr	r1, [sp, #24]
1000ca66:	4829      	ldr	r0, [pc, #164]	; (1000cb0c <main+0x258>)
1000ca68:	4798      	blx	r3
            }
            
            //if(sensors & INV_XYZ_GYRO) {
                DBG_LOG("Gyro: %d %d %d", gyro[0], gyro[1], gyro[2]);
                if (temp_cnt >= 10) {
                    temp_cnt = 0;
1000ca6a:	2300      	movs	r3, #0
1000ca6c:	4698      	mov	r8, r3
1000ca6e:	e7ca      	b.n	1000ca06 <main+0x152>
    int_param.cb = (void*)interrupt_cb;
    int_param.pin = PIN_AO_GPIO_2;
    result = mpu_init(&int_param);
    if(result) {
        DBG_LOG_DEV("Could not initialize MPU!");
        system_global_reset();
1000ca70:	4b27      	ldr	r3, [pc, #156]	; (1000cb10 <main+0x25c>)
1000ca72:	4798      	blx	r3
1000ca74:	e751      	b.n	1000c91a <main+0x66>
1000ca76:	46c0      	nop			; (mov r8, r8)
1000ca78:	1000ac21 	.word	0x1000ac21
1000ca7c:	1000bdb1 	.word	0x1000bdb1
1000ca80:	1000b1b9 	.word	0x1000b1b9
1000ca84:	1000a94d 	.word	0x1000a94d
1000ca88:	1000a1ad 	.word	0x1000a1ad
1000ca8c:	1000c875 	.word	0x1000c875
1000ca90:	100080cd 	.word	0x100080cd
1000ca94:	1000ba19 	.word	0x1000ba19
1000ca98:	1000ba29 	.word	0x1000ba29
1000ca9c:	1000c801 	.word	0x1000c801
1000caa0:	1000c7e1 	.word	0x1000c7e1
1000caa4:	1000902d 	.word	0x1000902d
1000caa8:	10008e79 	.word	0x10008e79
1000caac:	1000892d 	.word	0x1000892d
1000cab0:	10008dad 	.word	0x10008dad
1000cab4:	100088c9 	.word	0x100088c9
1000cab8:	100088ad 	.word	0x100088ad
1000cabc:	10008685 	.word	0x10008685
1000cac0:	10008751 	.word	0x10008751
1000cac4:	10009419 	.word	0x10009419
1000cac8:	10014cf0 	.word	0x10014cf0
1000cacc:	100081b5 	.word	0x100081b5
1000cad0:	100081a1 	.word	0x100081a1
1000cad4:	1000f3ad 	.word	0x1000f3ad
1000cad8:	00006590 	.word	0x00006590
1000cadc:	100096d5 	.word	0x100096d5
1000cae0:	1000bd5d 	.word	0x1000bd5d
1000cae4:	1000a86d 	.word	0x1000a86d
1000cae8:	10008991 	.word	0x10008991
1000caec:	10011719 	.word	0x10011719
1000caf0:	100128bc 	.word	0x100128bc
1000caf4:	100115f9 	.word	0x100115f9
1000caf8:	10013500 	.word	0x10013500
1000cafc:	1001351c 	.word	0x1001351c
1000cb00:	10009361 	.word	0x10009361
1000cb04:	1001352c 	.word	0x1001352c
1000cb08:	10008465 	.word	0x10008465
1000cb0c:	10013510 	.word	0x10013510
1000cb10:	1000c369 	.word	0x1000c369

1000cb14 <internal_event_post>:
1000cb14:	b570      	push	{r4, r5, r6, lr}
1000cb16:	4d12      	ldr	r5, [pc, #72]	; (1000cb60 <internal_event_post+0x4c>)
1000cb18:	682c      	ldr	r4, [r5, #0]
1000cb1a:	2c00      	cmp	r4, #0
1000cb1c:	d014      	beq.n	1000cb48 <internal_event_post+0x34>
1000cb1e:	6826      	ldr	r6, [r4, #0]
1000cb20:	60e2      	str	r2, [r4, #12]
1000cb22:	602e      	str	r6, [r5, #0]
1000cb24:	2500      	movs	r5, #0
1000cb26:	4a0f      	ldr	r2, [pc, #60]	; (1000cb64 <internal_event_post+0x50>)
1000cb28:	8123      	strh	r3, [r4, #8]
1000cb2a:	6813      	ldr	r3, [r2, #0]
1000cb2c:	6025      	str	r5, [r4, #0]
1000cb2e:	80a0      	strh	r0, [r4, #4]
1000cb30:	80e1      	strh	r1, [r4, #6]
1000cb32:	42ab      	cmp	r3, r5
1000cb34:	d101      	bne.n	1000cb3a <internal_event_post+0x26>
1000cb36:	6014      	str	r4, [r2, #0]
1000cb38:	e011      	b.n	1000cb5e <internal_event_post+0x4a>
1000cb3a:	681a      	ldr	r2, [r3, #0]
1000cb3c:	2a00      	cmp	r2, #0
1000cb3e:	d001      	beq.n	1000cb44 <internal_event_post+0x30>
1000cb40:	1c13      	adds	r3, r2, #0
1000cb42:	e7fa      	b.n	1000cb3a <internal_event_post+0x26>
1000cb44:	601c      	str	r4, [r3, #0]
1000cb46:	e00a      	b.n	1000cb5e <internal_event_post+0x4a>
1000cb48:	b2c4      	uxtb	r4, r0
1000cb4a:	2c00      	cmp	r4, #0
1000cb4c:	d107      	bne.n	1000cb5e <internal_event_post+0x4a>
1000cb4e:	4c06      	ldr	r4, [pc, #24]	; (1000cb68 <internal_event_post+0x54>)
1000cb50:	60e2      	str	r2, [r4, #12]
1000cb52:	2201      	movs	r2, #1
1000cb54:	8123      	strh	r3, [r4, #8]
1000cb56:	4b05      	ldr	r3, [pc, #20]	; (1000cb6c <internal_event_post+0x58>)
1000cb58:	80a0      	strh	r0, [r4, #4]
1000cb5a:	80e1      	strh	r1, [r4, #6]
1000cb5c:	701a      	strb	r2, [r3, #0]
1000cb5e:	bd70      	pop	{r4, r5, r6, pc}
1000cb60:	10014d2c 	.word	0x10014d2c
1000cb64:	10014d28 	.word	0x10014d28
1000cb68:	10014d14 	.word	0x10014d14
1000cb6c:	10014d24 	.word	0x10014d24

1000cb70 <internal_event_init>:
1000cb70:	b510      	push	{r4, lr}
1000cb72:	4b08      	ldr	r3, [pc, #32]	; (1000cb94 <internal_event_init+0x24>)
1000cb74:	0900      	lsrs	r0, r0, #4
1000cb76:	0100      	lsls	r0, r0, #4
1000cb78:	681a      	ldr	r2, [r3, #0]
1000cb7a:	1808      	adds	r0, r1, r0
1000cb7c:	4281      	cmp	r1, r0
1000cb7e:	d003      	beq.n	1000cb88 <internal_event_init+0x18>
1000cb80:	600a      	str	r2, [r1, #0]
1000cb82:	1c0a      	adds	r2, r1, #0
1000cb84:	3110      	adds	r1, #16
1000cb86:	e7f9      	b.n	1000cb7c <internal_event_init+0xc>
1000cb88:	601a      	str	r2, [r3, #0]
1000cb8a:	2200      	movs	r2, #0
1000cb8c:	4b02      	ldr	r3, [pc, #8]	; (1000cb98 <internal_event_init+0x28>)
1000cb8e:	601a      	str	r2, [r3, #0]
1000cb90:	bd10      	pop	{r4, pc}
1000cb92:	46c0      	nop			; (mov r8, r8)
1000cb94:	10014d2c 	.word	0x10014d2c
1000cb98:	10014d28 	.word	0x10014d28

1000cb9c <special_events_handler>:
1000cb9c:	b538      	push	{r3, r4, r5, lr}
1000cb9e:	4c1b      	ldr	r4, [pc, #108]	; (1000cc0c <special_events_handler+0x70>)
1000cba0:	1c03      	adds	r3, r0, #0
1000cba2:	8825      	ldrh	r5, [r4, #0]
1000cba4:	1c08      	adds	r0, r1, #0
1000cba6:	1c21      	adds	r1, r4, #0
1000cba8:	429d      	cmp	r5, r3
1000cbaa:	d107      	bne.n	1000cbbc <special_events_handler+0x20>
1000cbac:	88a5      	ldrh	r5, [r4, #4]
1000cbae:	4285      	cmp	r5, r0
1000cbb0:	d104      	bne.n	1000cbbc <special_events_handler+0x20>
1000cbb2:	2301      	movs	r3, #1
1000cbb4:	425b      	negs	r3, r3
1000cbb6:	8023      	strh	r3, [r4, #0]
1000cbb8:	60a2      	str	r2, [r4, #8]
1000cbba:	e009      	b.n	1000cbd0 <special_events_handler+0x34>
1000cbbc:	884c      	ldrh	r4, [r1, #2]
1000cbbe:	429c      	cmp	r4, r3
1000cbc0:	d10a      	bne.n	1000cbd8 <special_events_handler+0x3c>
1000cbc2:	888c      	ldrh	r4, [r1, #4]
1000cbc4:	4284      	cmp	r4, r0
1000cbc6:	d107      	bne.n	1000cbd8 <special_events_handler+0x3c>
1000cbc8:	2301      	movs	r3, #1
1000cbca:	425b      	negs	r3, r3
1000cbcc:	804b      	strh	r3, [r1, #2]
1000cbce:	608a      	str	r2, [r1, #8]
1000cbd0:	4b0f      	ldr	r3, [pc, #60]	; (1000cc10 <special_events_handler+0x74>)
1000cbd2:	4798      	blx	r3
1000cbd4:	2001      	movs	r0, #1
1000cbd6:	e017      	b.n	1000cc08 <special_events_handler+0x6c>
1000cbd8:	490e      	ldr	r1, [pc, #56]	; (1000cc14 <special_events_handler+0x78>)
1000cbda:	428b      	cmp	r3, r1
1000cbdc:	d00e      	beq.n	1000cbfc <special_events_handler+0x60>
1000cbde:	490e      	ldr	r1, [pc, #56]	; (1000cc18 <special_events_handler+0x7c>)
1000cbe0:	428b      	cmp	r3, r1
1000cbe2:	d007      	beq.n	1000cbf4 <special_events_handler+0x58>
1000cbe4:	490d      	ldr	r1, [pc, #52]	; (1000cc1c <special_events_handler+0x80>)
1000cbe6:	2000      	movs	r0, #0
1000cbe8:	428b      	cmp	r3, r1
1000cbea:	d10d      	bne.n	1000cc08 <special_events_handler+0x6c>
1000cbec:	1c10      	adds	r0, r2, #0
1000cbee:	4b0c      	ldr	r3, [pc, #48]	; (1000cc20 <special_events_handler+0x84>)
1000cbf0:	4798      	blx	r3
1000cbf2:	e7ef      	b.n	1000cbd4 <special_events_handler+0x38>
1000cbf4:	1c11      	adds	r1, r2, #0
1000cbf6:	4b0b      	ldr	r3, [pc, #44]	; (1000cc24 <special_events_handler+0x88>)
1000cbf8:	2200      	movs	r2, #0
1000cbfa:	e002      	b.n	1000cc02 <special_events_handler+0x66>
1000cbfc:	1c11      	adds	r1, r2, #0
1000cbfe:	2200      	movs	r2, #0
1000cc00:	4b09      	ldr	r3, [pc, #36]	; (1000cc28 <special_events_handler+0x8c>)
1000cc02:	4798      	blx	r3
1000cc04:	4243      	negs	r3, r0
1000cc06:	4158      	adcs	r0, r3
1000cc08:	bd38      	pop	{r3, r4, r5, pc}
1000cc0a:	46c0      	nop			; (mov r8, r8)
1000cc0c:	10015a70 	.word	0x10015a70
1000cc10:	1000dda1 	.word	0x1000dda1
1000cc14:	00000e13 	.word	0x00000e13
1000cc18:	00000e15 	.word	0x00000e15
1000cc1c:	00000e01 	.word	0x00000e01
1000cc20:	1000e111 	.word	0x1000e111
1000cc24:	1000e2d1 	.word	0x1000e2d1
1000cc28:	1000e3a9 	.word	0x1000e3a9

1000cc2c <at_ble_event_get>:
1000cc2c:	2300      	movs	r3, #0
1000cc2e:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cc30:	b087      	sub	sp, #28
1000cc32:	9204      	str	r2, [sp, #16]
1000cc34:	7003      	strb	r3, [r0, #0]
1000cc36:	9b04      	ldr	r3, [sp, #16]
1000cc38:	9003      	str	r0, [sp, #12]
1000cc3a:	3b01      	subs	r3, #1
1000cc3c:	1c0d      	adds	r5, r1, #0
1000cc3e:	9305      	str	r3, [sp, #20]
1000cc40:	3303      	adds	r3, #3
1000cc42:	d802      	bhi.n	1000cc4a <at_ble_event_get+0x1e>
1000cc44:	9804      	ldr	r0, [sp, #16]
1000cc46:	4bae      	ldr	r3, [pc, #696]	; (1000cf00 <at_ble_event_get+0x2d4>)
1000cc48:	4798      	blx	r3
1000cc4a:	9b05      	ldr	r3, [sp, #20]
1000cc4c:	4cad      	ldr	r4, [pc, #692]	; (1000cf04 <at_ble_event_get+0x2d8>)
1000cc4e:	3303      	adds	r3, #3
1000cc50:	d902      	bls.n	1000cc58 <at_ble_event_get+0x2c>
1000cc52:	2300      	movs	r3, #0
1000cc54:	9302      	str	r3, [sp, #8]
1000cc56:	e015      	b.n	1000cc84 <at_ble_event_get+0x58>
1000cc58:	2300      	movs	r3, #0
1000cc5a:	9302      	str	r3, [sp, #8]
1000cc5c:	6823      	ldr	r3, [r4, #0]
1000cc5e:	2b00      	cmp	r3, #0
1000cc60:	d113      	bne.n	1000cc8a <at_ble_event_get+0x5e>
1000cc62:	9b02      	ldr	r3, [sp, #8]
1000cc64:	2bd0      	cmp	r3, #208	; 0xd0
1000cc66:	d100      	bne.n	1000cc6a <at_ble_event_get+0x3e>
1000cc68:	e2da      	b.n	1000d220 <at_ble_event_get+0x5f4>
1000cc6a:	9804      	ldr	r0, [sp, #16]
1000cc6c:	4ba6      	ldr	r3, [pc, #664]	; (1000cf08 <at_ble_event_get+0x2dc>)
1000cc6e:	4798      	blx	r3
1000cc70:	9002      	str	r0, [sp, #8]
1000cc72:	2802      	cmp	r0, #2
1000cc74:	d1f2      	bne.n	1000cc5c <at_ble_event_get+0x30>
1000cc76:	e03f      	b.n	1000ccf8 <at_ble_event_get+0xcc>
1000cc78:	9804      	ldr	r0, [sp, #16]
1000cc7a:	4ba3      	ldr	r3, [pc, #652]	; (1000cf08 <at_ble_event_get+0x2dc>)
1000cc7c:	4798      	blx	r3
1000cc7e:	9002      	str	r0, [sp, #8]
1000cc80:	2802      	cmp	r0, #2
1000cc82:	d039      	beq.n	1000ccf8 <at_ble_event_get+0xcc>
1000cc84:	6823      	ldr	r3, [r4, #0]
1000cc86:	2b00      	cmp	r3, #0
1000cc88:	d0f6      	beq.n	1000cc78 <at_ble_event_get+0x4c>
1000cc8a:	9b02      	ldr	r3, [sp, #8]
1000cc8c:	2bd0      	cmp	r3, #208	; 0xd0
1000cc8e:	d100      	bne.n	1000cc92 <at_ble_event_get+0x66>
1000cc90:	e2c6      	b.n	1000d220 <at_ble_event_get+0x5f4>
1000cc92:	9b02      	ldr	r3, [sp, #8]
1000cc94:	3b03      	subs	r3, #3
1000cc96:	1e5a      	subs	r2, r3, #1
1000cc98:	4193      	sbcs	r3, r2
1000cc9a:	9a02      	ldr	r2, [sp, #8]
1000cc9c:	425b      	negs	r3, r3
1000cc9e:	401a      	ands	r2, r3
1000cca0:	6823      	ldr	r3, [r4, #0]
1000cca2:	9202      	str	r2, [sp, #8]
1000cca4:	2b00      	cmp	r3, #0
1000cca6:	d100      	bne.n	1000ccaa <at_ble_event_get+0x7e>
1000cca8:	e2c2      	b.n	1000d230 <at_ble_event_get+0x604>
1000ccaa:	681a      	ldr	r2, [r3, #0]
1000ccac:	68de      	ldr	r6, [r3, #12]
1000ccae:	6022      	str	r2, [r4, #0]
1000ccb0:	88da      	ldrh	r2, [r3, #6]
1000ccb2:	9201      	str	r2, [sp, #4]
1000ccb4:	4a95      	ldr	r2, [pc, #596]	; (1000cf0c <at_ble_event_get+0x2e0>)
1000ccb6:	889c      	ldrh	r4, [r3, #4]
1000ccb8:	6811      	ldr	r1, [r2, #0]
1000ccba:	6013      	str	r3, [r2, #0]
1000ccbc:	6019      	str	r1, [r3, #0]
1000ccbe:	4b94      	ldr	r3, [pc, #592]	; (1000cf10 <at_ble_event_get+0x2e4>)
1000ccc0:	781b      	ldrb	r3, [r3, #0]
1000ccc2:	2b01      	cmp	r3, #1
1000ccc4:	d10f      	bne.n	1000cce6 <at_ble_event_get+0xba>
1000ccc6:	4b93      	ldr	r3, [pc, #588]	; (1000cf14 <at_ble_event_get+0x2e8>)
1000ccc8:	4a92      	ldr	r2, [pc, #584]	; (1000cf14 <at_ble_event_get+0x2e8>)
1000ccca:	8898      	ldrh	r0, [r3, #4]
1000cccc:	88d9      	ldrh	r1, [r3, #6]
1000ccce:	68d2      	ldr	r2, [r2, #12]
1000ccd0:	891b      	ldrh	r3, [r3, #8]
1000ccd2:	4f91      	ldr	r7, [pc, #580]	; (1000cf18 <at_ble_event_get+0x2ec>)
1000ccd4:	47b8      	blx	r7
1000ccd6:	2210      	movs	r2, #16
1000ccd8:	4b90      	ldr	r3, [pc, #576]	; (1000cf1c <at_ble_event_get+0x2f0>)
1000ccda:	488e      	ldr	r0, [pc, #568]	; (1000cf14 <at_ble_event_get+0x2e8>)
1000ccdc:	2100      	movs	r1, #0
1000ccde:	4798      	blx	r3
1000cce0:	2300      	movs	r3, #0
1000cce2:	4a8b      	ldr	r2, [pc, #556]	; (1000cf10 <at_ble_event_get+0x2e4>)
1000cce4:	7013      	strb	r3, [r2, #0]
1000cce6:	9b02      	ldr	r3, [sp, #8]
1000cce8:	2b00      	cmp	r3, #0
1000ccea:	d114      	bne.n	1000cd16 <at_ble_event_get+0xea>
1000ccec:	4b8c      	ldr	r3, [pc, #560]	; (1000cf20 <at_ble_event_get+0x2f4>)
1000ccee:	429c      	cmp	r4, r3
1000ccf0:	d009      	beq.n	1000cd06 <at_ble_event_get+0xda>
1000ccf2:	4b8c      	ldr	r3, [pc, #560]	; (1000cf24 <at_ble_event_get+0x2f8>)
1000ccf4:	429c      	cmp	r4, r3
1000ccf6:	d127      	bne.n	1000cd48 <at_ble_event_get+0x11c>
1000ccf8:	233a      	movs	r3, #58	; 0x3a
1000ccfa:	9a03      	ldr	r2, [sp, #12]
1000ccfc:	7013      	strb	r3, [r2, #0]
1000ccfe:	2300      	movs	r3, #0
1000cd00:	9302      	str	r3, [sp, #8]
1000cd02:	1c1d      	adds	r5, r3, #0
1000cd04:	e007      	b.n	1000cd16 <at_ble_event_get+0xea>
1000cd06:	9b01      	ldr	r3, [sp, #4]
1000cd08:	42a3      	cmp	r3, r4
1000cd0a:	d000      	beq.n	1000cd0e <at_ble_event_get+0xe2>
1000cd0c:	e28a      	b.n	1000d224 <at_ble_event_get+0x5f8>
1000cd0e:	2338      	movs	r3, #56	; 0x38
1000cd10:	9a03      	ldr	r2, [sp, #12]
1000cd12:	7013      	strb	r3, [r2, #0]
1000cd14:	602e      	str	r6, [r5, #0]
1000cd16:	9b03      	ldr	r3, [sp, #12]
1000cd18:	781b      	ldrb	r3, [r3, #0]
1000cd1a:	2b3b      	cmp	r3, #59	; 0x3b
1000cd1c:	d101      	bne.n	1000cd22 <at_ble_event_get+0xf6>
1000cd1e:	4b82      	ldr	r3, [pc, #520]	; (1000cf28 <at_ble_event_get+0x2fc>)
1000cd20:	4798      	blx	r3
1000cd22:	9b03      	ldr	r3, [sp, #12]
1000cd24:	781b      	ldrb	r3, [r3, #0]
1000cd26:	2b3b      	cmp	r3, #59	; 0x3b
1000cd28:	d003      	beq.n	1000cd32 <at_ble_event_get+0x106>
1000cd2a:	9b05      	ldr	r3, [sp, #20]
1000cd2c:	3303      	adds	r3, #3
1000cd2e:	d904      	bls.n	1000cd3a <at_ble_event_get+0x10e>
1000cd30:	e283      	b.n	1000d23a <at_ble_event_get+0x60e>
1000cd32:	9b02      	ldr	r3, [sp, #8]
1000cd34:	2b00      	cmp	r3, #0
1000cd36:	d088      	beq.n	1000cc4a <at_ble_event_get+0x1e>
1000cd38:	e7f7      	b.n	1000cd2a <at_ble_event_get+0xfe>
1000cd3a:	9b02      	ldr	r3, [sp, #8]
1000cd3c:	2bd0      	cmp	r3, #208	; 0xd0
1000cd3e:	d100      	bne.n	1000cd42 <at_ble_event_get+0x116>
1000cd40:	e27b      	b.n	1000d23a <at_ble_event_get+0x60e>
1000cd42:	4b7a      	ldr	r3, [pc, #488]	; (1000cf2c <at_ble_event_get+0x300>)
1000cd44:	4798      	blx	r3
1000cd46:	e278      	b.n	1000d23a <at_ble_event_get+0x60e>
1000cd48:	9b01      	ldr	r3, [sp, #4]
1000cd4a:	2bbb      	cmp	r3, #187	; 0xbb
1000cd4c:	d125      	bne.n	1000cd9a <at_ble_event_get+0x16e>
1000cd4e:	2cbb      	cmp	r4, #187	; 0xbb
1000cd50:	d123      	bne.n	1000cd9a <at_ble_event_get+0x16e>
1000cd52:	466b      	mov	r3, sp
1000cd54:	891b      	ldrh	r3, [r3, #8]
1000cd56:	80ab      	strh	r3, [r5, #4]
1000cd58:	78b3      	ldrb	r3, [r6, #2]
1000cd5a:	7872      	ldrb	r2, [r6, #1]
1000cd5c:	78f0      	ldrb	r0, [r6, #3]
1000cd5e:	021b      	lsls	r3, r3, #8
1000cd60:	4313      	orrs	r3, r2
1000cd62:	7971      	ldrb	r1, [r6, #5]
1000cd64:	7932      	ldrb	r2, [r6, #4]
1000cd66:	70a8      	strb	r0, [r5, #2]
1000cd68:	4871      	ldr	r0, [pc, #452]	; (1000cf30 <at_ble_event_get+0x304>)
1000cd6a:	802b      	strh	r3, [r5, #0]
1000cd6c:	4283      	cmp	r3, r0
1000cd6e:	d806      	bhi.n	1000cd7e <at_ble_event_get+0x152>
1000cd70:	4a70      	ldr	r2, [pc, #448]	; (1000cf34 <at_ble_event_get+0x308>)
1000cd72:	4293      	cmp	r3, r2
1000cd74:	d20b      	bcs.n	1000cd8e <at_ble_event_get+0x162>
1000cd76:	4a70      	ldr	r2, [pc, #448]	; (1000cf38 <at_ble_event_get+0x30c>)
1000cd78:	4293      	cmp	r3, r2
1000cd7a:	d008      	beq.n	1000cd8e <at_ble_event_get+0x162>
1000cd7c:	e009      	b.n	1000cd92 <at_ble_event_get+0x166>
1000cd7e:	486f      	ldr	r0, [pc, #444]	; (1000cf3c <at_ble_event_get+0x310>)
1000cd80:	4283      	cmp	r3, r0
1000cd82:	d106      	bne.n	1000cd92 <at_ble_event_get+0x166>
1000cd84:	020b      	lsls	r3, r1, #8
1000cd86:	4313      	orrs	r3, r2
1000cd88:	80ab      	strh	r3, [r5, #4]
1000cd8a:	2337      	movs	r3, #55	; 0x37
1000cd8c:	e002      	b.n	1000cd94 <at_ble_event_get+0x168>
1000cd8e:	2336      	movs	r3, #54	; 0x36
1000cd90:	e000      	b.n	1000cd94 <at_ble_event_get+0x168>
1000cd92:	2300      	movs	r3, #0
1000cd94:	9a03      	ldr	r2, [sp, #12]
1000cd96:	7013      	strb	r3, [r2, #0]
1000cd98:	e7bd      	b.n	1000cd16 <at_ble_event_get+0xea>
1000cd9a:	4b69      	ldr	r3, [pc, #420]	; (1000cf40 <at_ble_event_get+0x314>)
1000cd9c:	429c      	cmp	r4, r3
1000cd9e:	d100      	bne.n	1000cda2 <at_ble_event_get+0x176>
1000cda0:	e144      	b.n	1000d02c <at_ble_event_get+0x400>
1000cda2:	d865      	bhi.n	1000ce70 <at_ble_event_get+0x244>
1000cda4:	4b67      	ldr	r3, [pc, #412]	; (1000cf44 <at_ble_event_get+0x318>)
1000cda6:	429c      	cmp	r4, r3
1000cda8:	d100      	bne.n	1000cdac <at_ble_event_get+0x180>
1000cdaa:	e1d5      	b.n	1000d158 <at_ble_event_get+0x52c>
1000cdac:	d82f      	bhi.n	1000ce0e <at_ble_event_get+0x1e2>
1000cdae:	4b66      	ldr	r3, [pc, #408]	; (1000cf48 <at_ble_event_get+0x31c>)
1000cdb0:	429c      	cmp	r4, r3
1000cdb2:	d100      	bne.n	1000cdb6 <at_ble_event_get+0x18a>
1000cdb4:	e1e0      	b.n	1000d178 <at_ble_event_get+0x54c>
1000cdb6:	d813      	bhi.n	1000cde0 <at_ble_event_get+0x1b4>
1000cdb8:	4b64      	ldr	r3, [pc, #400]	; (1000cf4c <at_ble_event_get+0x320>)
1000cdba:	429c      	cmp	r4, r3
1000cdbc:	d100      	bne.n	1000cdc0 <at_ble_event_get+0x194>
1000cdbe:	e1a3      	b.n	1000d108 <at_ble_event_get+0x4dc>
1000cdc0:	d804      	bhi.n	1000cdcc <at_ble_event_get+0x1a0>
1000cdc2:	2638      	movs	r6, #56	; 0x38
1000cdc4:	42b4      	cmp	r4, r6
1000cdc6:	d100      	bne.n	1000cdca <at_ble_event_get+0x19e>
1000cdc8:	e225      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000cdca:	e117      	b.n	1000cffc <at_ble_event_get+0x3d0>
1000cdcc:	4b60      	ldr	r3, [pc, #384]	; (1000cf50 <at_ble_event_get+0x324>)
1000cdce:	429c      	cmp	r4, r3
1000cdd0:	d100      	bne.n	1000cdd4 <at_ble_event_get+0x1a8>
1000cdd2:	e19f      	b.n	1000d114 <at_ble_event_get+0x4e8>
1000cdd4:	33fe      	adds	r3, #254	; 0xfe
1000cdd6:	33ff      	adds	r3, #255	; 0xff
1000cdd8:	429c      	cmp	r4, r3
1000cdda:	d100      	bne.n	1000cdde <at_ble_event_get+0x1b2>
1000cddc:	e1d3      	b.n	1000d186 <at_ble_event_get+0x55a>
1000cdde:	e10d      	b.n	1000cffc <at_ble_event_get+0x3d0>
1000cde0:	4b5c      	ldr	r3, [pc, #368]	; (1000cf54 <at_ble_event_get+0x328>)
1000cde2:	429c      	cmp	r4, r3
1000cde4:	d100      	bne.n	1000cde8 <at_ble_event_get+0x1bc>
1000cde6:	e1a9      	b.n	1000d13c <at_ble_event_get+0x510>
1000cde8:	d808      	bhi.n	1000cdfc <at_ble_event_get+0x1d0>
1000cdea:	4b5b      	ldr	r3, [pc, #364]	; (1000cf58 <at_ble_event_get+0x32c>)
1000cdec:	429c      	cmp	r4, r3
1000cdee:	d100      	bne.n	1000cdf2 <at_ble_event_get+0x1c6>
1000cdf0:	e196      	b.n	1000d120 <at_ble_event_get+0x4f4>
1000cdf2:	4b5a      	ldr	r3, [pc, #360]	; (1000cf5c <at_ble_event_get+0x330>)
1000cdf4:	429c      	cmp	r4, r3
1000cdf6:	d100      	bne.n	1000cdfa <at_ble_event_get+0x1ce>
1000cdf8:	e199      	b.n	1000d12e <at_ble_event_get+0x502>
1000cdfa:	e0ff      	b.n	1000cffc <at_ble_event_get+0x3d0>
1000cdfc:	4b58      	ldr	r3, [pc, #352]	; (1000cf60 <at_ble_event_get+0x334>)
1000cdfe:	429c      	cmp	r4, r3
1000ce00:	d100      	bne.n	1000ce04 <at_ble_event_get+0x1d8>
1000ce02:	e1a2      	b.n	1000d14a <at_ble_event_get+0x51e>
1000ce04:	4b57      	ldr	r3, [pc, #348]	; (1000cf64 <at_ble_event_get+0x338>)
1000ce06:	429c      	cmp	r4, r3
1000ce08:	d100      	bne.n	1000ce0c <at_ble_event_get+0x1e0>
1000ce0a:	e1d4      	b.n	1000d1b6 <at_ble_event_get+0x58a>
1000ce0c:	e0f6      	b.n	1000cffc <at_ble_event_get+0x3d0>
1000ce0e:	4b56      	ldr	r3, [pc, #344]	; (1000cf68 <at_ble_event_get+0x33c>)
1000ce10:	429c      	cmp	r4, r3
1000ce12:	d100      	bne.n	1000ce16 <at_ble_event_get+0x1ea>
1000ce14:	e1c8      	b.n	1000d1a8 <at_ble_event_get+0x57c>
1000ce16:	d812      	bhi.n	1000ce3e <at_ble_event_get+0x212>
1000ce18:	4b54      	ldr	r3, [pc, #336]	; (1000cf6c <at_ble_event_get+0x340>)
1000ce1a:	429c      	cmp	r4, r3
1000ce1c:	d100      	bne.n	1000ce20 <at_ble_event_get+0x1f4>
1000ce1e:	e1d1      	b.n	1000d1c4 <at_ble_event_get+0x598>
1000ce20:	d804      	bhi.n	1000ce2c <at_ble_event_get+0x200>
1000ce22:	4b53      	ldr	r3, [pc, #332]	; (1000cf70 <at_ble_event_get+0x344>)
1000ce24:	429c      	cmp	r4, r3
1000ce26:	d100      	bne.n	1000ce2a <at_ble_event_get+0x1fe>
1000ce28:	e19b      	b.n	1000d162 <at_ble_event_get+0x536>
1000ce2a:	e0e7      	b.n	1000cffc <at_ble_event_get+0x3d0>
1000ce2c:	4b51      	ldr	r3, [pc, #324]	; (1000cf74 <at_ble_event_get+0x348>)
1000ce2e:	429c      	cmp	r4, r3
1000ce30:	d100      	bne.n	1000ce34 <at_ble_event_get+0x208>
1000ce32:	e1ad      	b.n	1000d190 <at_ble_event_get+0x564>
1000ce34:	4b50      	ldr	r3, [pc, #320]	; (1000cf78 <at_ble_event_get+0x34c>)
1000ce36:	429c      	cmp	r4, r3
1000ce38:	d100      	bne.n	1000ce3c <at_ble_event_get+0x210>
1000ce3a:	e1b0      	b.n	1000d19e <at_ble_event_get+0x572>
1000ce3c:	e0de      	b.n	1000cffc <at_ble_event_get+0x3d0>
1000ce3e:	4b4f      	ldr	r3, [pc, #316]	; (1000cf7c <at_ble_event_get+0x350>)
1000ce40:	429c      	cmp	r4, r3
1000ce42:	d100      	bne.n	1000ce46 <at_ble_event_get+0x21a>
1000ce44:	e0e0      	b.n	1000d008 <at_ble_event_get+0x3dc>
1000ce46:	d809      	bhi.n	1000ce5c <at_ble_event_get+0x230>
1000ce48:	3b08      	subs	r3, #8
1000ce4a:	429c      	cmp	r4, r3
1000ce4c:	d100      	bne.n	1000ce50 <at_ble_event_get+0x224>
1000ce4e:	e0d7      	b.n	1000d000 <at_ble_event_get+0x3d4>
1000ce50:	4b4b      	ldr	r3, [pc, #300]	; (1000cf80 <at_ble_event_get+0x354>)
1000ce52:	2639      	movs	r6, #57	; 0x39
1000ce54:	429c      	cmp	r4, r3
1000ce56:	d100      	bne.n	1000ce5a <at_ble_event_get+0x22e>
1000ce58:	e1dd      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000ce5a:	e0cf      	b.n	1000cffc <at_ble_event_get+0x3d0>
1000ce5c:	23d1      	movs	r3, #209	; 0xd1
1000ce5e:	011b      	lsls	r3, r3, #4
1000ce60:	429c      	cmp	r4, r3
1000ce62:	d100      	bne.n	1000ce66 <at_ble_event_get+0x23a>
1000ce64:	e0d6      	b.n	1000d014 <at_ble_event_get+0x3e8>
1000ce66:	4b47      	ldr	r3, [pc, #284]	; (1000cf84 <at_ble_event_get+0x358>)
1000ce68:	429c      	cmp	r4, r3
1000ce6a:	d100      	bne.n	1000ce6e <at_ble_event_get+0x242>
1000ce6c:	e0d8      	b.n	1000d020 <at_ble_event_get+0x3f4>
1000ce6e:	e0c5      	b.n	1000cffc <at_ble_event_get+0x3d0>
1000ce70:	4b45      	ldr	r3, [pc, #276]	; (1000cf88 <at_ble_event_get+0x35c>)
1000ce72:	429c      	cmp	r4, r3
1000ce74:	d100      	bne.n	1000ce78 <at_ble_event_get+0x24c>
1000ce76:	e117      	b.n	1000d0a8 <at_ble_event_get+0x47c>
1000ce78:	d82e      	bhi.n	1000ced8 <at_ble_event_get+0x2ac>
1000ce7a:	4b44      	ldr	r3, [pc, #272]	; (1000cf8c <at_ble_event_get+0x360>)
1000ce7c:	429c      	cmp	r4, r3
1000ce7e:	d100      	bne.n	1000ce82 <at_ble_event_get+0x256>
1000ce80:	e13d      	b.n	1000d0fe <at_ble_event_get+0x4d2>
1000ce82:	d812      	bhi.n	1000ceaa <at_ble_event_get+0x27e>
1000ce84:	4b42      	ldr	r3, [pc, #264]	; (1000cf90 <at_ble_event_get+0x364>)
1000ce86:	429c      	cmp	r4, r3
1000ce88:	d100      	bne.n	1000ce8c <at_ble_event_get+0x260>
1000ce8a:	e0e8      	b.n	1000d05e <at_ble_event_get+0x432>
1000ce8c:	d804      	bhi.n	1000ce98 <at_ble_event_get+0x26c>
1000ce8e:	3b03      	subs	r3, #3
1000ce90:	429c      	cmp	r4, r3
1000ce92:	d100      	bne.n	1000ce96 <at_ble_event_get+0x26a>
1000ce94:	e0d0      	b.n	1000d038 <at_ble_event_get+0x40c>
1000ce96:	e0b1      	b.n	1000cffc <at_ble_event_get+0x3d0>
1000ce98:	4b3e      	ldr	r3, [pc, #248]	; (1000cf94 <at_ble_event_get+0x368>)
1000ce9a:	429c      	cmp	r4, r3
1000ce9c:	d100      	bne.n	1000cea0 <at_ble_event_get+0x274>
1000ce9e:	e0d0      	b.n	1000d042 <at_ble_event_get+0x416>
1000cea0:	4b3d      	ldr	r3, [pc, #244]	; (1000cf98 <at_ble_event_get+0x36c>)
1000cea2:	429c      	cmp	r4, r3
1000cea4:	d100      	bne.n	1000cea8 <at_ble_event_get+0x27c>
1000cea6:	e0f9      	b.n	1000d09c <at_ble_event_get+0x470>
1000cea8:	e0a8      	b.n	1000cffc <at_ble_event_get+0x3d0>
1000ceaa:	4b3c      	ldr	r3, [pc, #240]	; (1000cf9c <at_ble_event_get+0x370>)
1000ceac:	429c      	cmp	r4, r3
1000ceae:	d100      	bne.n	1000ceb2 <at_ble_event_get+0x286>
1000ceb0:	e0db      	b.n	1000d06a <at_ble_event_get+0x43e>
1000ceb2:	d808      	bhi.n	1000cec6 <at_ble_event_get+0x29a>
1000ceb4:	4b3a      	ldr	r3, [pc, #232]	; (1000cfa0 <at_ble_event_get+0x374>)
1000ceb6:	429c      	cmp	r4, r3
1000ceb8:	d100      	bne.n	1000cebc <at_ble_event_get+0x290>
1000ceba:	e11b      	b.n	1000d0f4 <at_ble_event_get+0x4c8>
1000cebc:	4b39      	ldr	r3, [pc, #228]	; (1000cfa4 <at_ble_event_get+0x378>)
1000cebe:	429c      	cmp	r4, r3
1000cec0:	d100      	bne.n	1000cec4 <at_ble_event_get+0x298>
1000cec2:	e0d8      	b.n	1000d076 <at_ble_event_get+0x44a>
1000cec4:	e09a      	b.n	1000cffc <at_ble_event_get+0x3d0>
1000cec6:	4b38      	ldr	r3, [pc, #224]	; (1000cfa8 <at_ble_event_get+0x37c>)
1000cec8:	429c      	cmp	r4, r3
1000ceca:	d100      	bne.n	1000cece <at_ble_event_get+0x2a2>
1000cecc:	e0d8      	b.n	1000d080 <at_ble_event_get+0x454>
1000cece:	4b37      	ldr	r3, [pc, #220]	; (1000cfac <at_ble_event_get+0x380>)
1000ced0:	429c      	cmp	r4, r3
1000ced2:	d100      	bne.n	1000ced6 <at_ble_event_get+0x2aa>
1000ced4:	e0db      	b.n	1000d08e <at_ble_event_get+0x462>
1000ced6:	e091      	b.n	1000cffc <at_ble_event_get+0x3d0>
1000ced8:	4b35      	ldr	r3, [pc, #212]	; (1000cfb0 <at_ble_event_get+0x384>)
1000ceda:	429c      	cmp	r4, r3
1000cedc:	d100      	bne.n	1000cee0 <at_ble_event_get+0x2b4>
1000cede:	e0f7      	b.n	1000d0d0 <at_ble_event_get+0x4a4>
1000cee0:	d876      	bhi.n	1000cfd0 <at_ble_event_get+0x3a4>
1000cee2:	4b34      	ldr	r3, [pc, #208]	; (1000cfb4 <at_ble_event_get+0x388>)
1000cee4:	429c      	cmp	r4, r3
1000cee6:	d100      	bne.n	1000ceea <at_ble_event_get+0x2be>
1000cee8:	e0f8      	b.n	1000d0dc <at_ble_event_get+0x4b0>
1000ceea:	d869      	bhi.n	1000cfc0 <at_ble_event_get+0x394>
1000ceec:	4b32      	ldr	r3, [pc, #200]	; (1000cfb8 <at_ble_event_get+0x38c>)
1000ceee:	429c      	cmp	r4, r3
1000cef0:	d100      	bne.n	1000cef4 <at_ble_event_get+0x2c8>
1000cef2:	e0e0      	b.n	1000d0b6 <at_ble_event_get+0x48a>
1000cef4:	4b31      	ldr	r3, [pc, #196]	; (1000cfbc <at_ble_event_get+0x390>)
1000cef6:	429c      	cmp	r4, r3
1000cef8:	d100      	bne.n	1000cefc <at_ble_event_get+0x2d0>
1000cefa:	e0a9      	b.n	1000d050 <at_ble_event_get+0x424>
1000cefc:	e07e      	b.n	1000cffc <at_ble_event_get+0x3d0>
1000cefe:	46c0      	nop			; (mov r8, r8)
1000cf00:	1000ddd9 	.word	0x1000ddd9
1000cf04:	10014d28 	.word	0x10014d28
1000cf08:	1000af3d 	.word	0x1000af3d
1000cf0c:	10014d2c 	.word	0x10014d2c
1000cf10:	10014d24 	.word	0x10014d24
1000cf14:	10014d14 	.word	0x10014d14
1000cf18:	1000cb15 	.word	0x1000cb15
1000cf1c:	100114b1 	.word	0x100114b1
1000cf20:	0000ffff 	.word	0x0000ffff
1000cf24:	0000fffe 	.word	0x0000fffe
1000cf28:	1000b1cd 	.word	0x1000b1cd
1000cf2c:	1000dddb 	.word	0x1000dddb
1000cf30:	0000201e 	.word	0x0000201e
1000cf34:	0000201d 	.word	0x0000201d
1000cf38:	00000c03 	.word	0x00000c03
1000cf3c:	0000201f 	.word	0x0000201f
1000cf40:	00000d1c 	.word	0x00000d1c
1000cf44:	00000c0c 	.word	0x00000c0c
1000cf48:	00000c02 	.word	0x00000c02
1000cf4c:	00000a02 	.word	0x00000a02
1000cf50:	00000a03 	.word	0x00000a03
1000cf54:	00000c06 	.word	0x00000c06
1000cf58:	00000c04 	.word	0x00000c04
1000cf5c:	00000c05 	.word	0x00000c05
1000cf60:	00000c07 	.word	0x00000c07
1000cf64:	00000c09 	.word	0x00000c09
1000cf68:	00000c17 	.word	0x00000c17
1000cf6c:	00000c12 	.word	0x00000c12
1000cf70:	00000c0d 	.word	0x00000c0d
1000cf74:	00000c13 	.word	0x00000c13
1000cf78:	00000c15 	.word	0x00000c15
1000cf7c:	00000d08 	.word	0x00000d08
1000cf80:	00000d01 	.word	0x00000d01
1000cf84:	00000d15 	.word	0x00000d15
1000cf88:	00000e1b 	.word	0x00000e1b
1000cf8c:	00000e0f 	.word	0x00000e0f
1000cf90:	00000e03 	.word	0x00000e03
1000cf94:	00000e06 	.word	0x00000e06
1000cf98:	00000e0a 	.word	0x00000e0a
1000cf9c:	00000e15 	.word	0x00000e15
1000cfa0:	00000e11 	.word	0x00000e11
1000cfa4:	00000e13 	.word	0x00000e13
1000cfa8:	00000e17 	.word	0x00000e17
1000cfac:	00000e19 	.word	0x00000e19
1000cfb0:	00000e27 	.word	0x00000e27
1000cfb4:	00000e21 	.word	0x00000e21
1000cfb8:	00000e1c 	.word	0x00000e1c
1000cfbc:	00000e1d 	.word	0x00000e1d
1000cfc0:	4b9f      	ldr	r3, [pc, #636]	; (1000d240 <at_ble_event_get+0x614>)
1000cfc2:	429c      	cmp	r4, r3
1000cfc4:	d07e      	beq.n	1000d0c4 <at_ble_event_get+0x498>
1000cfc6:	4b9f      	ldr	r3, [pc, #636]	; (1000d244 <at_ble_event_get+0x618>)
1000cfc8:	429c      	cmp	r4, r3
1000cfca:	d100      	bne.n	1000cfce <at_ble_event_get+0x3a2>
1000cfcc:	e08c      	b.n	1000d0e8 <at_ble_event_get+0x4bc>
1000cfce:	e015      	b.n	1000cffc <at_ble_event_get+0x3d0>
1000cfd0:	4b9d      	ldr	r3, [pc, #628]	; (1000d248 <at_ble_event_get+0x61c>)
1000cfd2:	429c      	cmp	r4, r3
1000cfd4:	d100      	bne.n	1000cfd8 <at_ble_event_get+0x3ac>
1000cfd6:	e10a      	b.n	1000d1ee <at_ble_event_get+0x5c2>
1000cfd8:	d808      	bhi.n	1000cfec <at_ble_event_get+0x3c0>
1000cfda:	4b9c      	ldr	r3, [pc, #624]	; (1000d24c <at_ble_event_get+0x620>)
1000cfdc:	429c      	cmp	r4, r3
1000cfde:	d100      	bne.n	1000cfe2 <at_ble_event_get+0x3b6>
1000cfe0:	e0f7      	b.n	1000d1d2 <at_ble_event_get+0x5a6>
1000cfe2:	4b9b      	ldr	r3, [pc, #620]	; (1000d250 <at_ble_event_get+0x624>)
1000cfe4:	429c      	cmp	r4, r3
1000cfe6:	d100      	bne.n	1000cfea <at_ble_event_get+0x3be>
1000cfe8:	e0fa      	b.n	1000d1e0 <at_ble_event_get+0x5b4>
1000cfea:	e007      	b.n	1000cffc <at_ble_event_get+0x3d0>
1000cfec:	4b99      	ldr	r3, [pc, #612]	; (1000d254 <at_ble_event_get+0x628>)
1000cfee:	429c      	cmp	r4, r3
1000cff0:	d100      	bne.n	1000cff4 <at_ble_event_get+0x3c8>
1000cff2:	e103      	b.n	1000d1fc <at_ble_event_get+0x5d0>
1000cff4:	4b98      	ldr	r3, [pc, #608]	; (1000d258 <at_ble_event_get+0x62c>)
1000cff6:	429c      	cmp	r4, r3
1000cff8:	d100      	bne.n	1000cffc <at_ble_event_get+0x3d0>
1000cffa:	e106      	b.n	1000d20a <at_ble_event_get+0x5de>
1000cffc:	2600      	movs	r6, #0
1000cffe:	e10a      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d000:	1c30      	adds	r0, r6, #0
1000d002:	1c29      	adds	r1, r5, #0
1000d004:	4b95      	ldr	r3, [pc, #596]	; (1000d25c <at_ble_event_get+0x630>)
1000d006:	e014      	b.n	1000d032 <at_ble_event_get+0x406>
1000d008:	1c30      	adds	r0, r6, #0
1000d00a:	1c29      	adds	r1, r5, #0
1000d00c:	4b94      	ldr	r3, [pc, #592]	; (1000d260 <at_ble_event_get+0x634>)
1000d00e:	4798      	blx	r3
1000d010:	2604      	movs	r6, #4
1000d012:	e100      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d014:	1c30      	adds	r0, r6, #0
1000d016:	1c29      	adds	r1, r5, #0
1000d018:	4b92      	ldr	r3, [pc, #584]	; (1000d264 <at_ble_event_get+0x638>)
1000d01a:	4798      	blx	r3
1000d01c:	2601      	movs	r6, #1
1000d01e:	e0fa      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d020:	1c30      	adds	r0, r6, #0
1000d022:	1c29      	adds	r1, r5, #0
1000d024:	4b90      	ldr	r3, [pc, #576]	; (1000d268 <at_ble_event_get+0x63c>)
1000d026:	4798      	blx	r3
1000d028:	260f      	movs	r6, #15
1000d02a:	e0f4      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d02c:	1c30      	adds	r0, r6, #0
1000d02e:	1c29      	adds	r1, r5, #0
1000d030:	4b8e      	ldr	r3, [pc, #568]	; (1000d26c <at_ble_event_get+0x640>)
1000d032:	4798      	blx	r3
1000d034:	1c06      	adds	r6, r0, #0
1000d036:	e0ee      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d038:	9801      	ldr	r0, [sp, #4]
1000d03a:	1c31      	adds	r1, r6, #0
1000d03c:	1c2a      	adds	r2, r5, #0
1000d03e:	4b8c      	ldr	r3, [pc, #560]	; (1000d270 <at_ble_event_get+0x644>)
1000d040:	e017      	b.n	1000d072 <at_ble_event_get+0x446>
1000d042:	1c31      	adds	r1, r6, #0
1000d044:	9801      	ldr	r0, [sp, #4]
1000d046:	1c2a      	adds	r2, r5, #0
1000d048:	4b8a      	ldr	r3, [pc, #552]	; (1000d274 <at_ble_event_get+0x648>)
1000d04a:	4798      	blx	r3
1000d04c:	2611      	movs	r6, #17
1000d04e:	e0e2      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d050:	1c31      	adds	r1, r6, #0
1000d052:	9801      	ldr	r0, [sp, #4]
1000d054:	1c2a      	adds	r2, r5, #0
1000d056:	4b88      	ldr	r3, [pc, #544]	; (1000d278 <at_ble_event_get+0x64c>)
1000d058:	4798      	blx	r3
1000d05a:	2612      	movs	r6, #18
1000d05c:	e0db      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d05e:	1c30      	adds	r0, r6, #0
1000d060:	1c29      	adds	r1, r5, #0
1000d062:	4b86      	ldr	r3, [pc, #536]	; (1000d27c <at_ble_event_get+0x650>)
1000d064:	4798      	blx	r3
1000d066:	2606      	movs	r6, #6
1000d068:	e0d5      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d06a:	1c31      	adds	r1, r6, #0
1000d06c:	1c2a      	adds	r2, r5, #0
1000d06e:	9801      	ldr	r0, [sp, #4]
1000d070:	4b83      	ldr	r3, [pc, #524]	; (1000d280 <at_ble_event_get+0x654>)
1000d072:	4798      	blx	r3
1000d074:	e7de      	b.n	1000d034 <at_ble_event_get+0x408>
1000d076:	9801      	ldr	r0, [sp, #4]
1000d078:	1c31      	adds	r1, r6, #0
1000d07a:	1c2a      	adds	r2, r5, #0
1000d07c:	4b81      	ldr	r3, [pc, #516]	; (1000d284 <at_ble_event_get+0x658>)
1000d07e:	e7f8      	b.n	1000d072 <at_ble_event_get+0x446>
1000d080:	1c31      	adds	r1, r6, #0
1000d082:	9801      	ldr	r0, [sp, #4]
1000d084:	1c2a      	adds	r2, r5, #0
1000d086:	4b80      	ldr	r3, [pc, #512]	; (1000d288 <at_ble_event_get+0x65c>)
1000d088:	4798      	blx	r3
1000d08a:	260d      	movs	r6, #13
1000d08c:	e0c3      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d08e:	1c31      	adds	r1, r6, #0
1000d090:	9801      	ldr	r0, [sp, #4]
1000d092:	1c2a      	adds	r2, r5, #0
1000d094:	4b7d      	ldr	r3, [pc, #500]	; (1000d28c <at_ble_event_get+0x660>)
1000d096:	4798      	blx	r3
1000d098:	260e      	movs	r6, #14
1000d09a:	e0bc      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d09c:	9801      	ldr	r0, [sp, #4]
1000d09e:	1c31      	adds	r1, r6, #0
1000d0a0:	1c2a      	adds	r2, r5, #0
1000d0a2:	4b7b      	ldr	r3, [pc, #492]	; (1000d290 <at_ble_event_get+0x664>)
1000d0a4:	4798      	blx	r3
1000d0a6:	e084      	b.n	1000d1b2 <at_ble_event_get+0x586>
1000d0a8:	1c31      	adds	r1, r6, #0
1000d0aa:	9801      	ldr	r0, [sp, #4]
1000d0ac:	1c2a      	adds	r2, r5, #0
1000d0ae:	4b79      	ldr	r3, [pc, #484]	; (1000d294 <at_ble_event_get+0x668>)
1000d0b0:	4798      	blx	r3
1000d0b2:	260b      	movs	r6, #11
1000d0b4:	e0af      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d0b6:	1c31      	adds	r1, r6, #0
1000d0b8:	9801      	ldr	r0, [sp, #4]
1000d0ba:	1c2a      	adds	r2, r5, #0
1000d0bc:	4b76      	ldr	r3, [pc, #472]	; (1000d298 <at_ble_event_get+0x66c>)
1000d0be:	4798      	blx	r3
1000d0c0:	2610      	movs	r6, #16
1000d0c2:	e0a8      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d0c4:	1c30      	adds	r0, r6, #0
1000d0c6:	1c29      	adds	r1, r5, #0
1000d0c8:	4b74      	ldr	r3, [pc, #464]	; (1000d29c <at_ble_event_get+0x670>)
1000d0ca:	4798      	blx	r3
1000d0cc:	2628      	movs	r6, #40	; 0x28
1000d0ce:	e0a2      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d0d0:	1c30      	adds	r0, r6, #0
1000d0d2:	1c29      	adds	r1, r5, #0
1000d0d4:	4b72      	ldr	r3, [pc, #456]	; (1000d2a0 <at_ble_event_get+0x674>)
1000d0d6:	4798      	blx	r3
1000d0d8:	2629      	movs	r6, #41	; 0x29
1000d0da:	e09c      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d0dc:	1c30      	adds	r0, r6, #0
1000d0de:	1c29      	adds	r1, r5, #0
1000d0e0:	4b70      	ldr	r3, [pc, #448]	; (1000d2a4 <at_ble_event_get+0x678>)
1000d0e2:	4798      	blx	r3
1000d0e4:	2627      	movs	r6, #39	; 0x27
1000d0e6:	e096      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d0e8:	1c30      	adds	r0, r6, #0
1000d0ea:	1c29      	adds	r1, r5, #0
1000d0ec:	4b6e      	ldr	r3, [pc, #440]	; (1000d2a8 <at_ble_event_get+0x67c>)
1000d0ee:	4798      	blx	r3
1000d0f0:	262a      	movs	r6, #42	; 0x2a
1000d0f2:	e090      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d0f4:	9801      	ldr	r0, [sp, #4]
1000d0f6:	1c31      	adds	r1, r6, #0
1000d0f8:	1c2a      	adds	r2, r5, #0
1000d0fa:	4b6c      	ldr	r3, [pc, #432]	; (1000d2ac <at_ble_event_get+0x680>)
1000d0fc:	e7b9      	b.n	1000d072 <at_ble_event_get+0x446>
1000d0fe:	9801      	ldr	r0, [sp, #4]
1000d100:	1c31      	adds	r1, r6, #0
1000d102:	1c2a      	adds	r2, r5, #0
1000d104:	4b6a      	ldr	r3, [pc, #424]	; (1000d2b0 <at_ble_event_get+0x684>)
1000d106:	e7b4      	b.n	1000d072 <at_ble_event_get+0x446>
1000d108:	1c30      	adds	r0, r6, #0
1000d10a:	1c29      	adds	r1, r5, #0
1000d10c:	4b69      	ldr	r3, [pc, #420]	; (1000d2b4 <at_ble_event_get+0x688>)
1000d10e:	4798      	blx	r3
1000d110:	262b      	movs	r6, #43	; 0x2b
1000d112:	e080      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d114:	1c30      	adds	r0, r6, #0
1000d116:	1c29      	adds	r1, r5, #0
1000d118:	4b67      	ldr	r3, [pc, #412]	; (1000d2b8 <at_ble_event_get+0x68c>)
1000d11a:	4798      	blx	r3
1000d11c:	262c      	movs	r6, #44	; 0x2c
1000d11e:	e07a      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d120:	1c31      	adds	r1, r6, #0
1000d122:	9801      	ldr	r0, [sp, #4]
1000d124:	1c2a      	adds	r2, r5, #0
1000d126:	4b65      	ldr	r3, [pc, #404]	; (1000d2bc <at_ble_event_get+0x690>)
1000d128:	4798      	blx	r3
1000d12a:	2613      	movs	r6, #19
1000d12c:	e073      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d12e:	1c31      	adds	r1, r6, #0
1000d130:	9801      	ldr	r0, [sp, #4]
1000d132:	1c2a      	adds	r2, r5, #0
1000d134:	4b62      	ldr	r3, [pc, #392]	; (1000d2c0 <at_ble_event_get+0x694>)
1000d136:	4798      	blx	r3
1000d138:	2614      	movs	r6, #20
1000d13a:	e06c      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d13c:	1c31      	adds	r1, r6, #0
1000d13e:	9801      	ldr	r0, [sp, #4]
1000d140:	1c2a      	adds	r2, r5, #0
1000d142:	4b60      	ldr	r3, [pc, #384]	; (1000d2c4 <at_ble_event_get+0x698>)
1000d144:	4798      	blx	r3
1000d146:	2615      	movs	r6, #21
1000d148:	e065      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d14a:	1c31      	adds	r1, r6, #0
1000d14c:	9801      	ldr	r0, [sp, #4]
1000d14e:	1c2a      	adds	r2, r5, #0
1000d150:	4b5d      	ldr	r3, [pc, #372]	; (1000d2c8 <at_ble_event_get+0x69c>)
1000d152:	4798      	blx	r3
1000d154:	2616      	movs	r6, #22
1000d156:	e05e      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d158:	9801      	ldr	r0, [sp, #4]
1000d15a:	1c31      	adds	r1, r6, #0
1000d15c:	1c2a      	adds	r2, r5, #0
1000d15e:	4b5b      	ldr	r3, [pc, #364]	; (1000d2cc <at_ble_event_get+0x6a0>)
1000d160:	e787      	b.n	1000d072 <at_ble_event_get+0x446>
1000d162:	1c31      	adds	r1, r6, #0
1000d164:	9801      	ldr	r0, [sp, #4]
1000d166:	1c2a      	adds	r2, r5, #0
1000d168:	4b58      	ldr	r3, [pc, #352]	; (1000d2cc <at_ble_event_get+0x6a0>)
1000d16a:	4798      	blx	r3
1000d16c:	88a9      	ldrh	r1, [r5, #4]
1000d16e:	1c06      	adds	r6, r0, #0
1000d170:	4b57      	ldr	r3, [pc, #348]	; (1000d2d0 <at_ble_event_get+0x6a4>)
1000d172:	8828      	ldrh	r0, [r5, #0]
1000d174:	4798      	blx	r3
1000d176:	e04e      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d178:	1c31      	adds	r1, r6, #0
1000d17a:	9801      	ldr	r0, [sp, #4]
1000d17c:	1c2a      	adds	r2, r5, #0
1000d17e:	4b55      	ldr	r3, [pc, #340]	; (1000d2d4 <at_ble_event_get+0x6a8>)
1000d180:	4798      	blx	r3
1000d182:	2623      	movs	r6, #35	; 0x23
1000d184:	e047      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d186:	9801      	ldr	r0, [sp, #4]
1000d188:	1c31      	adds	r1, r6, #0
1000d18a:	1c2a      	adds	r2, r5, #0
1000d18c:	4b52      	ldr	r3, [pc, #328]	; (1000d2d8 <at_ble_event_get+0x6ac>)
1000d18e:	e770      	b.n	1000d072 <at_ble_event_get+0x446>
1000d190:	9b01      	ldr	r3, [sp, #4]
1000d192:	1c30      	adds	r0, r6, #0
1000d194:	0a1f      	lsrs	r7, r3, #8
1000d196:	802f      	strh	r7, [r5, #0]
1000d198:	1c29      	adds	r1, r5, #0
1000d19a:	4b50      	ldr	r3, [pc, #320]	; (1000d2dc <at_ble_event_get+0x6b0>)
1000d19c:	e749      	b.n	1000d032 <at_ble_event_get+0x406>
1000d19e:	9801      	ldr	r0, [sp, #4]
1000d1a0:	1c31      	adds	r1, r6, #0
1000d1a2:	1c2a      	adds	r2, r5, #0
1000d1a4:	4b4e      	ldr	r3, [pc, #312]	; (1000d2e0 <at_ble_event_get+0x6b4>)
1000d1a6:	e764      	b.n	1000d072 <at_ble_event_get+0x446>
1000d1a8:	1c30      	adds	r0, r6, #0
1000d1aa:	1c29      	adds	r1, r5, #0
1000d1ac:	9a01      	ldr	r2, [sp, #4]
1000d1ae:	4b4d      	ldr	r3, [pc, #308]	; (1000d2e4 <at_ble_event_get+0x6b8>)
1000d1b0:	4798      	blx	r3
1000d1b2:	263b      	movs	r6, #59	; 0x3b
1000d1b4:	e02f      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d1b6:	1c31      	adds	r1, r6, #0
1000d1b8:	9801      	ldr	r0, [sp, #4]
1000d1ba:	1c2a      	adds	r2, r5, #0
1000d1bc:	4b4a      	ldr	r3, [pc, #296]	; (1000d2e8 <at_ble_event_get+0x6bc>)
1000d1be:	4798      	blx	r3
1000d1c0:	2618      	movs	r6, #24
1000d1c2:	e028      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d1c4:	1c31      	adds	r1, r6, #0
1000d1c6:	9801      	ldr	r0, [sp, #4]
1000d1c8:	1c2a      	adds	r2, r5, #0
1000d1ca:	4b48      	ldr	r3, [pc, #288]	; (1000d2ec <at_ble_event_get+0x6c0>)
1000d1cc:	4798      	blx	r3
1000d1ce:	2620      	movs	r6, #32
1000d1d0:	e021      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d1d2:	1c31      	adds	r1, r6, #0
1000d1d4:	9801      	ldr	r0, [sp, #4]
1000d1d6:	1c2a      	adds	r2, r5, #0
1000d1d8:	4b45      	ldr	r3, [pc, #276]	; (1000d2f0 <at_ble_event_get+0x6c4>)
1000d1da:	4798      	blx	r3
1000d1dc:	2633      	movs	r6, #51	; 0x33
1000d1de:	e01a      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d1e0:	1c31      	adds	r1, r6, #0
1000d1e2:	9801      	ldr	r0, [sp, #4]
1000d1e4:	1c2a      	adds	r2, r5, #0
1000d1e6:	4b43      	ldr	r3, [pc, #268]	; (1000d2f4 <at_ble_event_get+0x6c8>)
1000d1e8:	4798      	blx	r3
1000d1ea:	2630      	movs	r6, #48	; 0x30
1000d1ec:	e013      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d1ee:	1c31      	adds	r1, r6, #0
1000d1f0:	9801      	ldr	r0, [sp, #4]
1000d1f2:	1c2a      	adds	r2, r5, #0
1000d1f4:	4b40      	ldr	r3, [pc, #256]	; (1000d2f8 <at_ble_event_get+0x6cc>)
1000d1f6:	4798      	blx	r3
1000d1f8:	2634      	movs	r6, #52	; 0x34
1000d1fa:	e00c      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d1fc:	1c31      	adds	r1, r6, #0
1000d1fe:	9801      	ldr	r0, [sp, #4]
1000d200:	1c2a      	adds	r2, r5, #0
1000d202:	4b3e      	ldr	r3, [pc, #248]	; (1000d2fc <at_ble_event_get+0x6d0>)
1000d204:	4798      	blx	r3
1000d206:	2635      	movs	r6, #53	; 0x35
1000d208:	e005      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d20a:	1c31      	adds	r1, r6, #0
1000d20c:	9801      	ldr	r0, [sp, #4]
1000d20e:	1c2a      	adds	r2, r5, #0
1000d210:	4b3b      	ldr	r3, [pc, #236]	; (1000d300 <at_ble_event_get+0x6d4>)
1000d212:	4798      	blx	r3
1000d214:	2632      	movs	r6, #50	; 0x32
1000d216:	9b03      	ldr	r3, [sp, #12]
1000d218:	701e      	strb	r6, [r3, #0]
1000d21a:	2300      	movs	r3, #0
1000d21c:	9302      	str	r3, [sp, #8]
1000d21e:	e57a      	b.n	1000cd16 <at_ble_event_get+0xea>
1000d220:	23d0      	movs	r3, #208	; 0xd0
1000d222:	e7fb      	b.n	1000d21c <at_ble_event_get+0x5f0>
1000d224:	9b01      	ldr	r3, [sp, #4]
1000d226:	9e02      	ldr	r6, [sp, #8]
1000d228:	2bbb      	cmp	r3, #187	; 0xbb
1000d22a:	d000      	beq.n	1000d22e <at_ble_event_get+0x602>
1000d22c:	e6e6      	b.n	1000cffc <at_ble_event_get+0x3d0>
1000d22e:	e7f2      	b.n	1000d216 <at_ble_event_get+0x5ea>
1000d230:	9b02      	ldr	r3, [sp, #8]
1000d232:	2b00      	cmp	r3, #0
1000d234:	d000      	beq.n	1000d238 <at_ble_event_get+0x60c>
1000d236:	e56e      	b.n	1000cd16 <at_ble_event_get+0xea>
1000d238:	e6e0      	b.n	1000cffc <at_ble_event_get+0x3d0>
1000d23a:	9802      	ldr	r0, [sp, #8]
1000d23c:	b007      	add	sp, #28
1000d23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d240:	00000e22 	.word	0x00000e22
1000d244:	00000e25 	.word	0x00000e25
1000d248:	00001b05 	.word	0x00001b05
1000d24c:	00001b01 	.word	0x00001b01
1000d250:	00001b03 	.word	0x00001b03
1000d254:	00001b06 	.word	0x00001b06
1000d258:	00001b08 	.word	0x00001b08
1000d25c:	1000ec05 	.word	0x1000ec05
1000d260:	1000ebe9 	.word	0x1000ebe9
1000d264:	1000ed4d 	.word	0x1000ed4d
1000d268:	1000ee3d 	.word	0x1000ee3d
1000d26c:	1000ee61 	.word	0x1000ee61
1000d270:	1000df7d 	.word	0x1000df7d
1000d274:	1000e7fd 	.word	0x1000e7fd
1000d278:	1000e879 	.word	0x1000e879
1000d27c:	1000e235 	.word	0x1000e235
1000d280:	1000e2d1 	.word	0x1000e2d1
1000d284:	1000e3a9 	.word	0x1000e3a9
1000d288:	1000e631 	.word	0x1000e631
1000d28c:	1000e6d1 	.word	0x1000e6d1
1000d290:	1000e789 	.word	0x1000e789
1000d294:	1000e7b1 	.word	0x1000e7b1
1000d298:	1000e7c7 	.word	0x1000e7c7
1000d29c:	1000e891 	.word	0x1000e891
1000d2a0:	1000e8bf 	.word	0x1000e8bf
1000d2a4:	1000e8d5 	.word	0x1000e8d5
1000d2a8:	1000e8ff 	.word	0x1000e8ff
1000d2ac:	1000e72d 	.word	0x1000e72d
1000d2b0:	1000e757 	.word	0x1000e757
1000d2b4:	1000d9bd 	.word	0x1000d9bd
1000d2b8:	1000d9e9 	.word	0x1000d9e9
1000d2bc:	1000f009 	.word	0x1000f009
1000d2c0:	1000f045 	.word	0x1000f045
1000d2c4:	1000f08d 	.word	0x1000f08d
1000d2c8:	1000f0d1 	.word	0x1000f0d1
1000d2cc:	1000f105 	.word	0x1000f105
1000d2d0:	1000efc9 	.word	0x1000efc9
1000d2d4:	1000f1d1 	.word	0x1000f1d1
1000d2d8:	1000f159 	.word	0x1000f159
1000d2dc:	1000d915 	.word	0x1000d915
1000d2e0:	1000d981 	.word	0x1000d981
1000d2e4:	1000d945 	.word	0x1000d945
1000d2e8:	1000f1e1 	.word	0x1000f1e1
1000d2ec:	1000f221 	.word	0x1000f221
1000d2f0:	1000f36d 	.word	0x1000f36d
1000d2f4:	1000f377 	.word	0x1000f377
1000d2f8:	1000f37d 	.word	0x1000f37d
1000d2fc:	1000f383 	.word	0x1000f383
1000d300:	1000f38f 	.word	0x1000f38f

1000d304 <internal_event_flush>:
1000d304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d306:	490e      	ldr	r1, [pc, #56]	; (1000d340 <internal_event_flush+0x3c>)
1000d308:	2400      	movs	r4, #0
1000d30a:	680b      	ldr	r3, [r1, #0]
1000d30c:	1c0f      	adds	r7, r1, #0
1000d30e:	1c1e      	adds	r6, r3, #0
1000d310:	4a0c      	ldr	r2, [pc, #48]	; (1000d344 <internal_event_flush+0x40>)
1000d312:	6815      	ldr	r5, [r2, #0]
1000d314:	9201      	str	r2, [sp, #4]
1000d316:	2b00      	cmp	r3, #0
1000d318:	d00e      	beq.n	1000d338 <internal_event_flush+0x34>
1000d31a:	889a      	ldrh	r2, [r3, #4]
1000d31c:	6819      	ldr	r1, [r3, #0]
1000d31e:	4282      	cmp	r2, r0
1000d320:	d107      	bne.n	1000d332 <internal_event_flush+0x2e>
1000d322:	2c00      	cmp	r4, #0
1000d324:	d001      	beq.n	1000d32a <internal_event_flush+0x26>
1000d326:	6021      	str	r1, [r4, #0]
1000d328:	e000      	b.n	1000d32c <internal_event_flush+0x28>
1000d32a:	1c0e      	adds	r6, r1, #0
1000d32c:	601d      	str	r5, [r3, #0]
1000d32e:	1c1d      	adds	r5, r3, #0
1000d330:	1c23      	adds	r3, r4, #0
1000d332:	1c1c      	adds	r4, r3, #0
1000d334:	1c0b      	adds	r3, r1, #0
1000d336:	e7ee      	b.n	1000d316 <internal_event_flush+0x12>
1000d338:	9b01      	ldr	r3, [sp, #4]
1000d33a:	603e      	str	r6, [r7, #0]
1000d33c:	601d      	str	r5, [r3, #0]
1000d33e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d340:	10014d28 	.word	0x10014d28
1000d344:	10014d2c 	.word	0x10014d2c

1000d348 <internal_conn_flush>:
1000d348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d34a:	4a12      	ldr	r2, [pc, #72]	; (1000d394 <internal_conn_flush+0x4c>)
1000d34c:	9000      	str	r0, [sp, #0]
1000d34e:	6813      	ldr	r3, [r2, #0]
1000d350:	4811      	ldr	r0, [pc, #68]	; (1000d398 <internal_conn_flush+0x50>)
1000d352:	1c1f      	adds	r7, r3, #0
1000d354:	2100      	movs	r1, #0
1000d356:	4684      	mov	ip, r0
1000d358:	6804      	ldr	r4, [r0, #0]
1000d35a:	9201      	str	r2, [sp, #4]
1000d35c:	2b00      	cmp	r3, #0
1000d35e:	d014      	beq.n	1000d38a <internal_conn_flush+0x42>
1000d360:	88d8      	ldrh	r0, [r3, #6]
1000d362:	9a00      	ldr	r2, [sp, #0]
1000d364:	681d      	ldr	r5, [r3, #0]
1000d366:	0a06      	lsrs	r6, r0, #8
1000d368:	4296      	cmp	r6, r2
1000d36a:	d10b      	bne.n	1000d384 <internal_conn_flush+0x3c>
1000d36c:	26fd      	movs	r6, #253	; 0xfd
1000d36e:	4006      	ands	r6, r0
1000d370:	2e0c      	cmp	r6, #12
1000d372:	d107      	bne.n	1000d384 <internal_conn_flush+0x3c>
1000d374:	2900      	cmp	r1, #0
1000d376:	d001      	beq.n	1000d37c <internal_conn_flush+0x34>
1000d378:	600d      	str	r5, [r1, #0]
1000d37a:	e000      	b.n	1000d37e <internal_conn_flush+0x36>
1000d37c:	1c2f      	adds	r7, r5, #0
1000d37e:	601c      	str	r4, [r3, #0]
1000d380:	1c1c      	adds	r4, r3, #0
1000d382:	1c0b      	adds	r3, r1, #0
1000d384:	1c19      	adds	r1, r3, #0
1000d386:	1c2b      	adds	r3, r5, #0
1000d388:	e7e8      	b.n	1000d35c <internal_conn_flush+0x14>
1000d38a:	9b01      	ldr	r3, [sp, #4]
1000d38c:	601f      	str	r7, [r3, #0]
1000d38e:	4663      	mov	r3, ip
1000d390:	601c      	str	r4, [r3, #0]
1000d392:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d394:	10014d28 	.word	0x10014d28
1000d398:	10014d2c 	.word	0x10014d2c

1000d39c <at_ble_device_name_set>:
1000d39c:	b530      	push	{r4, r5, lr}
1000d39e:	23cf      	movs	r3, #207	; 0xcf
1000d3a0:	2800      	cmp	r0, #0
1000d3a2:	d010      	beq.n	1000d3c6 <at_ble_device_name_set+0x2a>
1000d3a4:	1e4a      	subs	r2, r1, #1
1000d3a6:	2a1f      	cmp	r2, #31
1000d3a8:	d80d      	bhi.n	1000d3c6 <at_ble_device_name_set+0x2a>
1000d3aa:	4a08      	ldr	r2, [pc, #32]	; (1000d3cc <at_ble_device_name_set+0x30>)
1000d3ac:	1c13      	adds	r3, r2, #0
1000d3ae:	33aa      	adds	r3, #170	; 0xaa
1000d3b0:	8019      	strh	r1, [r3, #0]
1000d3b2:	2300      	movs	r3, #0
1000d3b4:	1c1c      	adds	r4, r3, #0
1000d3b6:	5cc5      	ldrb	r5, [r0, r3]
1000d3b8:	34ac      	adds	r4, #172	; 0xac
1000d3ba:	3301      	adds	r3, #1
1000d3bc:	5515      	strb	r5, [r2, r4]
1000d3be:	b2dc      	uxtb	r4, r3
1000d3c0:	428c      	cmp	r4, r1
1000d3c2:	d3f7      	bcc.n	1000d3b4 <at_ble_device_name_set+0x18>
1000d3c4:	2300      	movs	r3, #0
1000d3c6:	1c18      	adds	r0, r3, #0
1000d3c8:	bd30      	pop	{r4, r5, pc}
1000d3ca:	46c0      	nop			; (mov r8, r8)
1000d3cc:	10015b0e 	.word	0x10015b0e

1000d3d0 <at_ble_addr_get>:
1000d3d0:	b510      	push	{r4, lr}
1000d3d2:	1c04      	adds	r4, r0, #0
1000d3d4:	20cf      	movs	r0, #207	; 0xcf
1000d3d6:	2c00      	cmp	r4, #0
1000d3d8:	d006      	beq.n	1000d3e8 <at_ble_addr_get+0x18>
1000d3da:	4b04      	ldr	r3, [pc, #16]	; (1000d3ec <at_ble_addr_get+0x1c>)
1000d3dc:	38ce      	subs	r0, #206	; 0xce
1000d3de:	1c21      	adds	r1, r4, #0
1000d3e0:	4798      	blx	r3
1000d3e2:	4b03      	ldr	r3, [pc, #12]	; (1000d3f0 <at_ble_addr_get+0x20>)
1000d3e4:	791b      	ldrb	r3, [r3, #4]
1000d3e6:	7023      	strb	r3, [r4, #0]
1000d3e8:	bd10      	pop	{r4, pc}
1000d3ea:	46c0      	nop			; (mov r8, r8)
1000d3ec:	1000ea99 	.word	0x1000ea99
1000d3f0:	10015b0e 	.word	0x10015b0e

1000d3f4 <at_ble_set_dev_config>:
1000d3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d3f6:	7906      	ldrb	r6, [r0, #4]
1000d3f8:	b089      	sub	sp, #36	; 0x24
1000d3fa:	25cf      	movs	r5, #207	; 0xcf
1000d3fc:	2e03      	cmp	r6, #3
1000d3fe:	d838      	bhi.n	1000d472 <at_ble_set_dev_config+0x7e>
1000d400:	7803      	ldrb	r3, [r0, #0]
1000d402:	3511      	adds	r5, #17
1000d404:	2b0f      	cmp	r3, #15
1000d406:	d834      	bhi.n	1000d472 <at_ble_set_dev_config+0x7e>
1000d408:	2380      	movs	r3, #128	; 0x80
1000d40a:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000d40c:	3d11      	subs	r5, #17
1000d40e:	009b      	lsls	r3, r3, #2
1000d410:	429f      	cmp	r7, r3
1000d412:	d82e      	bhi.n	1000d472 <at_ble_set_dev_config+0x7e>
1000d414:	7fc5      	ldrb	r5, [r0, #31]
1000d416:	7f83      	ldrb	r3, [r0, #30]
1000d418:	01ad      	lsls	r5, r5, #6
1000d41a:	015b      	lsls	r3, r3, #5
1000d41c:	431d      	orrs	r5, r3
1000d41e:	7ec3      	ldrb	r3, [r0, #27]
1000d420:	431d      	orrs	r5, r3
1000d422:	7f43      	ldrb	r3, [r0, #29]
1000d424:	011b      	lsls	r3, r3, #4
1000d426:	431d      	orrs	r5, r3
1000d428:	7f03      	ldrb	r3, [r0, #28]
1000d42a:	009b      	lsls	r3, r3, #2
1000d42c:	431d      	orrs	r5, r3
1000d42e:	4b12      	ldr	r3, [pc, #72]	; (1000d478 <at_ble_set_dev_config+0x84>)
1000d430:	b2ed      	uxtb	r5, r5
1000d432:	711e      	strb	r6, [r3, #4]
1000d434:	7903      	ldrb	r3, [r0, #4]
1000d436:	3b02      	subs	r3, #2
1000d438:	2b01      	cmp	r3, #1
1000d43a:	d801      	bhi.n	1000d440 <at_ble_set_dev_config+0x4c>
1000d43c:	2302      	movs	r3, #2
1000d43e:	7103      	strb	r3, [r0, #4]
1000d440:	1c04      	adds	r4, r0, #0
1000d442:	1c23      	adds	r3, r4, #0
1000d444:	330b      	adds	r3, #11
1000d446:	8861      	ldrh	r1, [r4, #2]
1000d448:	9307      	str	r3, [sp, #28]
1000d44a:	7923      	ldrb	r3, [r4, #4]
1000d44c:	7800      	ldrb	r0, [r0, #0]
1000d44e:	9300      	str	r3, [sp, #0]
1000d450:	9501      	str	r5, [sp, #4]
1000d452:	8c25      	ldrh	r5, [r4, #32]
1000d454:	1d62      	adds	r2, r4, #5
1000d456:	9502      	str	r5, [sp, #8]
1000d458:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000d45a:	9b07      	ldr	r3, [sp, #28]
1000d45c:	9503      	str	r5, [sp, #12]
1000d45e:	9704      	str	r7, [sp, #16]
1000d460:	4d06      	ldr	r5, [pc, #24]	; (1000d47c <at_ble_set_dev_config+0x88>)
1000d462:	47a8      	blx	r5
1000d464:	7126      	strb	r6, [r4, #4]
1000d466:	1c05      	adds	r5, r0, #0
1000d468:	1c21      	adds	r1, r4, #0
1000d46a:	4803      	ldr	r0, [pc, #12]	; (1000d478 <at_ble_set_dev_config+0x84>)
1000d46c:	2226      	movs	r2, #38	; 0x26
1000d46e:	4b04      	ldr	r3, [pc, #16]	; (1000d480 <at_ble_set_dev_config+0x8c>)
1000d470:	4798      	blx	r3
1000d472:	1c28      	adds	r0, r5, #0
1000d474:	b009      	add	sp, #36	; 0x24
1000d476:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d478:	10015b0e 	.word	0x10015b0e
1000d47c:	1000e991 	.word	0x1000e991
1000d480:	1001149f 	.word	0x1001149f

1000d484 <at_ble_init>:
1000d484:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d486:	b087      	sub	sp, #28
1000d488:	af03      	add	r7, sp, #12
1000d48a:	4954      	ldr	r1, [pc, #336]	; (1000d5dc <at_ble_init+0x158>)
1000d48c:	220b      	movs	r2, #11
1000d48e:	4b54      	ldr	r3, [pc, #336]	; (1000d5e0 <at_ble_init+0x15c>)
1000d490:	1c04      	adds	r4, r0, #0
1000d492:	1c38      	adds	r0, r7, #0
1000d494:	4798      	blx	r3
1000d496:	2205      	movs	r2, #5
1000d498:	4b52      	ldr	r3, [pc, #328]	; (1000d5e4 <at_ble_init+0x160>)
1000d49a:	2640      	movs	r6, #64	; 0x40
1000d49c:	801a      	strh	r2, [r3, #0]
1000d49e:	2300      	movs	r3, #0
1000d4a0:	4a51      	ldr	r2, [pc, #324]	; (1000d5e8 <at_ble_init+0x164>)
1000d4a2:	6013      	str	r3, [r2, #0]
1000d4a4:	4a51      	ldr	r2, [pc, #324]	; (1000d5ec <at_ble_init+0x168>)
1000d4a6:	7013      	strb	r3, [r2, #0]
1000d4a8:	4a51      	ldr	r2, [pc, #324]	; (1000d5f0 <at_ble_init+0x16c>)
1000d4aa:	7013      	strb	r3, [r2, #0]
1000d4ac:	4b51      	ldr	r3, [pc, #324]	; (1000d5f4 <at_ble_init+0x170>)
1000d4ae:	4798      	blx	r3
1000d4b0:	4b51      	ldr	r3, [pc, #324]	; (1000d5f8 <at_ble_init+0x174>)
1000d4b2:	4798      	blx	r3
1000d4b4:	4b51      	ldr	r3, [pc, #324]	; (1000d5fc <at_ble_init+0x178>)
1000d4b6:	4798      	blx	r3
1000d4b8:	4b51      	ldr	r3, [pc, #324]	; (1000d600 <at_ble_init+0x17c>)
1000d4ba:	4798      	blx	r3
1000d4bc:	2c00      	cmp	r4, #0
1000d4be:	d100      	bne.n	1000d4c2 <at_ble_init+0x3e>
1000d4c0:	e089      	b.n	1000d5d6 <at_ble_init+0x152>
1000d4c2:	68a3      	ldr	r3, [r4, #8]
1000d4c4:	2b00      	cmp	r3, #0
1000d4c6:	d100      	bne.n	1000d4ca <at_ble_init+0x46>
1000d4c8:	e085      	b.n	1000d5d6 <at_ble_init+0x152>
1000d4ca:	6923      	ldr	r3, [r4, #16]
1000d4cc:	2b00      	cmp	r3, #0
1000d4ce:	d100      	bne.n	1000d4d2 <at_ble_init+0x4e>
1000d4d0:	e081      	b.n	1000d5d6 <at_ble_init+0x152>
1000d4d2:	6820      	ldr	r0, [r4, #0]
1000d4d4:	2800      	cmp	r0, #0
1000d4d6:	d102      	bne.n	1000d4de <at_ble_init+0x5a>
1000d4d8:	6863      	ldr	r3, [r4, #4]
1000d4da:	2b00      	cmp	r3, #0
1000d4dc:	d17b      	bne.n	1000d5d6 <at_ble_init+0x152>
1000d4de:	4b49      	ldr	r3, [pc, #292]	; (1000d604 <at_ble_init+0x180>)
1000d4e0:	6861      	ldr	r1, [r4, #4]
1000d4e2:	4798      	blx	r3
1000d4e4:	4b48      	ldr	r3, [pc, #288]	; (1000d608 <at_ble_init+0x184>)
1000d4e6:	4798      	blx	r3
1000d4e8:	2801      	cmp	r0, #1
1000d4ea:	d901      	bls.n	1000d4f0 <at_ble_init+0x6c>
1000d4ec:	26e2      	movs	r6, #226	; 0xe2
1000d4ee:	e072      	b.n	1000d5d6 <at_ble_init+0x152>
1000d4f0:	4846      	ldr	r0, [pc, #280]	; (1000d60c <at_ble_init+0x188>)
1000d4f2:	4b47      	ldr	r3, [pc, #284]	; (1000d610 <at_ble_init+0x18c>)
1000d4f4:	4798      	blx	r3
1000d4f6:	2800      	cmp	r0, #0
1000d4f8:	d1f8      	bne.n	1000d4ec <at_ble_init+0x68>
1000d4fa:	1c20      	adds	r0, r4, #0
1000d4fc:	4b45      	ldr	r3, [pc, #276]	; (1000d614 <at_ble_init+0x190>)
1000d4fe:	4798      	blx	r3
1000d500:	68e0      	ldr	r0, [r4, #12]
1000d502:	68a1      	ldr	r1, [r4, #8]
1000d504:	4b44      	ldr	r3, [pc, #272]	; (1000d618 <at_ble_init+0x194>)
1000d506:	4798      	blx	r3
1000d508:	466b      	mov	r3, sp
1000d50a:	2201      	movs	r2, #1
1000d50c:	1cdc      	adds	r4, r3, #3
1000d50e:	1c20      	adds	r0, r4, #0
1000d510:	a901      	add	r1, sp, #4
1000d512:	4252      	negs	r2, r2
1000d514:	4b41      	ldr	r3, [pc, #260]	; (1000d61c <at_ble_init+0x198>)
1000d516:	4798      	blx	r3
1000d518:	2800      	cmp	r0, #0
1000d51a:	d102      	bne.n	1000d522 <at_ble_init+0x9e>
1000d51c:	7823      	ldrb	r3, [r4, #0]
1000d51e:	2b39      	cmp	r3, #57	; 0x39
1000d520:	d1f2      	bne.n	1000d508 <at_ble_init+0x84>
1000d522:	4b3f      	ldr	r3, [pc, #252]	; (1000d620 <at_ble_init+0x19c>)
1000d524:	4798      	blx	r3
1000d526:	1e06      	subs	r6, r0, #0
1000d528:	d155      	bne.n	1000d5d6 <at_ble_init+0x152>
1000d52a:	1c03      	adds	r3, r0, #0
1000d52c:	2101      	movs	r1, #1
1000d52e:	4a3d      	ldr	r2, [pc, #244]	; (1000d624 <at_ble_init+0x1a0>)
1000d530:	4249      	negs	r1, r1
1000d532:	189a      	adds	r2, r3, r2
1000d534:	3312      	adds	r3, #18
1000d536:	8151      	strh	r1, [r2, #10]
1000d538:	2b90      	cmp	r3, #144	; 0x90
1000d53a:	d1f7      	bne.n	1000d52c <at_ble_init+0xa8>
1000d53c:	4c3a      	ldr	r4, [pc, #232]	; (1000d628 <at_ble_init+0x1a4>)
1000d53e:	3b81      	subs	r3, #129	; 0x81
1000d540:	7023      	strb	r3, [r4, #0]
1000d542:	4b3a      	ldr	r3, [pc, #232]	; (1000d62c <at_ble_init+0x1a8>)
1000d544:	4a3a      	ldr	r2, [pc, #232]	; (1000d630 <at_ble_init+0x1ac>)
1000d546:	8063      	strh	r3, [r4, #2]
1000d548:	2300      	movs	r3, #0
1000d54a:	7123      	strb	r3, [r4, #4]
1000d54c:	3301      	adds	r3, #1
1000d54e:	1e58      	subs	r0, r3, #1
1000d550:	0119      	lsls	r1, r3, #4
1000d552:	4301      	orrs	r1, r0
1000d554:	3302      	adds	r3, #2
1000d556:	7011      	strb	r1, [r2, #0]
1000d558:	3201      	adds	r2, #1
1000d55a:	2b21      	cmp	r3, #33	; 0x21
1000d55c:	d1f7      	bne.n	1000d54e <at_ble_init+0xca>
1000d55e:	33e0      	adds	r3, #224	; 0xe0
1000d560:	33ff      	adds	r3, #255	; 0xff
1000d562:	84a3      	strh	r3, [r4, #36]	; 0x24
1000d564:	1c23      	adds	r3, r4, #0
1000d566:	2500      	movs	r5, #0
1000d568:	3373      	adds	r3, #115	; 0x73
1000d56a:	701d      	strb	r5, [r3, #0]
1000d56c:	1c23      	adds	r3, r4, #0
1000d56e:	3372      	adds	r3, #114	; 0x72
1000d570:	701d      	strb	r5, [r3, #0]
1000d572:	1c23      	adds	r3, r4, #0
1000d574:	3376      	adds	r3, #118	; 0x76
1000d576:	701d      	strb	r5, [r3, #0]
1000d578:	1c23      	adds	r3, r4, #0
1000d57a:	33cc      	adds	r3, #204	; 0xcc
1000d57c:	801d      	strh	r5, [r3, #0]
1000d57e:	1c22      	adds	r2, r4, #0
1000d580:	23a0      	movs	r3, #160	; 0xa0
1000d582:	32d0      	adds	r2, #208	; 0xd0
1000d584:	005b      	lsls	r3, r3, #1
1000d586:	8013      	strh	r3, [r2, #0]
1000d588:	1c22      	adds	r2, r4, #0
1000d58a:	32ce      	adds	r2, #206	; 0xce
1000d58c:	8013      	strh	r3, [r2, #0]
1000d58e:	1c23      	adds	r3, r4, #0
1000d590:	33d2      	adds	r3, #210	; 0xd2
1000d592:	801d      	strh	r5, [r3, #0]
1000d594:	22fa      	movs	r2, #250	; 0xfa
1000d596:	1c23      	adds	r3, r4, #0
1000d598:	0052      	lsls	r2, r2, #1
1000d59a:	33d4      	adds	r3, #212	; 0xd4
1000d59c:	801a      	strh	r2, [r3, #0]
1000d59e:	1c23      	adds	r3, r4, #0
1000d5a0:	33d6      	adds	r3, #214	; 0xd6
1000d5a2:	701d      	strb	r5, [r3, #0]
1000d5a4:	1c20      	adds	r0, r4, #0
1000d5a6:	4b23      	ldr	r3, [pc, #140]	; (1000d634 <at_ble_init+0x1b0>)
1000d5a8:	76e5      	strb	r5, [r4, #27]
1000d5aa:	7725      	strb	r5, [r4, #28]
1000d5ac:	7765      	strb	r5, [r4, #29]
1000d5ae:	77a5      	strb	r5, [r4, #30]
1000d5b0:	77e5      	strb	r5, [r4, #31]
1000d5b2:	8425      	strh	r5, [r4, #32]
1000d5b4:	8465      	strh	r5, [r4, #34]	; 0x22
1000d5b6:	4798      	blx	r3
1000d5b8:	1c23      	adds	r3, r4, #0
1000d5ba:	2207      	movs	r2, #7
1000d5bc:	3374      	adds	r3, #116	; 0x74
1000d5be:	701a      	strb	r2, [r3, #0]
1000d5c0:	1c23      	adds	r3, r4, #0
1000d5c2:	3204      	adds	r2, #4
1000d5c4:	33aa      	adds	r3, #170	; 0xaa
1000d5c6:	801a      	strh	r2, [r3, #0]
1000d5c8:	1c2b      	adds	r3, r5, #0
1000d5ca:	5d7a      	ldrb	r2, [r7, r5]
1000d5cc:	33ac      	adds	r3, #172	; 0xac
1000d5ce:	3501      	adds	r5, #1
1000d5d0:	54e2      	strb	r2, [r4, r3]
1000d5d2:	2d0b      	cmp	r5, #11
1000d5d4:	d1f8      	bne.n	1000d5c8 <at_ble_init+0x144>
1000d5d6:	1c30      	adds	r0, r6, #0
1000d5d8:	b007      	add	sp, #28
1000d5da:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d5dc:	1001354c 	.word	0x1001354c
1000d5e0:	1001149f 	.word	0x1001149f
1000d5e4:	10015a7c 	.word	0x10015a7c
1000d5e8:	10014dd8 	.word	0x10014dd8
1000d5ec:	10014d38 	.word	0x10014d38
1000d5f0:	10013764 	.word	0x10013764
1000d5f4:	1000f231 	.word	0x1000f231
1000d5f8:	1000d715 	.word	0x1000d715
1000d5fc:	1000d791 	.word	0x1000d791
1000d600:	1000d9b1 	.word	0x1000d9b1
1000d604:	1000d7cd 	.word	0x1000d7cd
1000d608:	1000ac21 	.word	0x1000ac21
1000d60c:	1000dcb1 	.word	0x1000dcb1
1000d610:	1000ae91 	.word	0x1000ae91
1000d614:	1000dd59 	.word	0x1000dd59
1000d618:	1000cb71 	.word	0x1000cb71
1000d61c:	1000cc2d 	.word	0x1000cc2d
1000d620:	1000e921 	.word	0x1000e921
1000d624:	10015a7e 	.word	0x10015a7e
1000d628:	10015b0e 	.word	0x10015b0e
1000d62c:	00003a98 	.word	0x00003a98
1000d630:	10015b19 	.word	0x10015b19
1000d634:	1000d3f5 	.word	0x1000d3f5

1000d638 <at_ble_addr_set>:
1000d638:	b538      	push	{r3, r4, r5, lr}
1000d63a:	1c45      	adds	r5, r0, #1
1000d63c:	1c03      	adds	r3, r0, #0
1000d63e:	20cf      	movs	r0, #207	; 0xcf
1000d640:	2d00      	cmp	r5, #0
1000d642:	d018      	beq.n	1000d676 <at_ble_addr_set+0x3e>
1000d644:	781a      	ldrb	r2, [r3, #0]
1000d646:	2a03      	cmp	r2, #3
1000d648:	d815      	bhi.n	1000d676 <at_ble_addr_set+0x3e>
1000d64a:	2a01      	cmp	r2, #1
1000d64c:	d102      	bne.n	1000d654 <at_ble_addr_set+0x1c>
1000d64e:	785a      	ldrb	r2, [r3, #1]
1000d650:	2a00      	cmp	r2, #0
1000d652:	d010      	beq.n	1000d676 <at_ble_addr_set+0x3e>
1000d654:	1c1c      	adds	r4, r3, #0
1000d656:	1c29      	adds	r1, r5, #0
1000d658:	2206      	movs	r2, #6
1000d65a:	4b07      	ldr	r3, [pc, #28]	; (1000d678 <at_ble_addr_set+0x40>)
1000d65c:	4807      	ldr	r0, [pc, #28]	; (1000d67c <at_ble_addr_set+0x44>)
1000d65e:	4798      	blx	r3
1000d660:	7823      	ldrb	r3, [r4, #0]
1000d662:	4807      	ldr	r0, [pc, #28]	; (1000d680 <at_ble_addr_set+0x48>)
1000d664:	7103      	strb	r3, [r0, #4]
1000d666:	4b07      	ldr	r3, [pc, #28]	; (1000d684 <at_ble_addr_set+0x4c>)
1000d668:	4798      	blx	r3
1000d66a:	7823      	ldrb	r3, [r4, #0]
1000d66c:	2b00      	cmp	r3, #0
1000d66e:	d102      	bne.n	1000d676 <at_ble_addr_set+0x3e>
1000d670:	1c28      	adds	r0, r5, #0
1000d672:	4b05      	ldr	r3, [pc, #20]	; (1000d688 <at_ble_addr_set+0x50>)
1000d674:	4798      	blx	r3
1000d676:	bd38      	pop	{r3, r4, r5, pc}
1000d678:	1001149f 	.word	0x1001149f
1000d67c:	10015b13 	.word	0x10015b13
1000d680:	10015b0e 	.word	0x10015b0e
1000d684:	1000d3f5 	.word	0x1000d3f5
1000d688:	1000dddd 	.word	0x1000dddd

1000d68c <at_ble_scan_stop>:
1000d68c:	b510      	push	{r4, lr}
1000d68e:	4b05      	ldr	r3, [pc, #20]	; (1000d6a4 <at_ble_scan_stop+0x18>)
1000d690:	4798      	blx	r3
1000d692:	1e04      	subs	r4, r0, #0
1000d694:	d103      	bne.n	1000d69e <at_ble_scan_stop+0x12>
1000d696:	20d1      	movs	r0, #209	; 0xd1
1000d698:	4b03      	ldr	r3, [pc, #12]	; (1000d6a8 <at_ble_scan_stop+0x1c>)
1000d69a:	0100      	lsls	r0, r0, #4
1000d69c:	4798      	blx	r3
1000d69e:	1c20      	adds	r0, r4, #0
1000d6a0:	bd10      	pop	{r4, pc}
1000d6a2:	46c0      	nop			; (mov r8, r8)
1000d6a4:	1000eb79 	.word	0x1000eb79
1000d6a8:	1000d305 	.word	0x1000d305

1000d6ac <at_ble_disconnect>:
1000d6ac:	b538      	push	{r3, r4, r5, lr}
1000d6ae:	1c04      	adds	r4, r0, #0
1000d6b0:	4b04      	ldr	r3, [pc, #16]	; (1000d6c4 <at_ble_disconnect+0x18>)
1000d6b2:	1c08      	adds	r0, r1, #0
1000d6b4:	1c21      	adds	r1, r4, #0
1000d6b6:	4798      	blx	r3
1000d6b8:	1c05      	adds	r5, r0, #0
1000d6ba:	4b03      	ldr	r3, [pc, #12]	; (1000d6c8 <at_ble_disconnect+0x1c>)
1000d6bc:	1c20      	adds	r0, r4, #0
1000d6be:	4798      	blx	r3
1000d6c0:	1c28      	adds	r0, r5, #0
1000d6c2:	bd38      	pop	{r3, r4, r5, pc}
1000d6c4:	1000e1f1 	.word	0x1000e1f1
1000d6c8:	1000d349 	.word	0x1000d349

1000d6cc <at_ble_conn_update_reply>:
1000d6cc:	b510      	push	{r4, lr}
1000d6ce:	4c01      	ldr	r4, [pc, #4]	; (1000d6d4 <at_ble_conn_update_reply+0x8>)
1000d6d0:	47a0      	blx	r4
1000d6d2:	bd10      	pop	{r4, pc}
1000d6d4:	1000e6e1 	.word	0x1000e6e1

1000d6d8 <at_ble_random_address_resolve>:
1000d6d8:	b510      	push	{r4, lr}
1000d6da:	23cf      	movs	r3, #207	; 0xcf
1000d6dc:	2800      	cmp	r0, #0
1000d6de:	d00a      	beq.n	1000d6f6 <at_ble_random_address_resolve+0x1e>
1000d6e0:	2900      	cmp	r1, #0
1000d6e2:	d008      	beq.n	1000d6f6 <at_ble_random_address_resolve+0x1e>
1000d6e4:	2a00      	cmp	r2, #0
1000d6e6:	d006      	beq.n	1000d6f6 <at_ble_random_address_resolve+0x1e>
1000d6e8:	780c      	ldrb	r4, [r1, #0]
1000d6ea:	2c02      	cmp	r4, #2
1000d6ec:	d103      	bne.n	1000d6f6 <at_ble_random_address_resolve+0x1e>
1000d6ee:	4b03      	ldr	r3, [pc, #12]	; (1000d6fc <at_ble_random_address_resolve+0x24>)
1000d6f0:	3101      	adds	r1, #1
1000d6f2:	4798      	blx	r3
1000d6f4:	2300      	movs	r3, #0
1000d6f6:	1c18      	adds	r0, r3, #0
1000d6f8:	bd10      	pop	{r4, pc}
1000d6fa:	46c0      	nop			; (mov r8, r8)
1000d6fc:	1000edd5 	.word	0x1000edd5

1000d700 <at_ble_uuid_len2type>:
1000d700:	1e83      	subs	r3, r0, #2
1000d702:	b2db      	uxtb	r3, r3
1000d704:	2003      	movs	r0, #3
1000d706:	2b0e      	cmp	r3, #14
1000d708:	d801      	bhi.n	1000d70e <at_ble_uuid_len2type+0xe>
1000d70a:	4a01      	ldr	r2, [pc, #4]	; (1000d710 <at_ble_uuid_len2type+0x10>)
1000d70c:	5cd0      	ldrb	r0, [r2, r3]
1000d70e:	4770      	bx	lr
1000d710:	10013557 	.word	0x10013557

1000d714 <init_gatt_client_module>:
1000d714:	2200      	movs	r2, #0
1000d716:	4b01      	ldr	r3, [pc, #4]	; (1000d71c <init_gatt_client_module+0x8>)
1000d718:	801a      	strh	r2, [r3, #0]
1000d71a:	4770      	bx	lr
1000d71c:	10014d30 	.word	0x10014d30

1000d720 <db_searchATT>:
1000d720:	b570      	push	{r4, r5, r6, lr}
1000d722:	1c05      	adds	r5, r0, #0
1000d724:	2400      	movs	r4, #0
1000d726:	4b0c      	ldr	r3, [pc, #48]	; (1000d758 <db_searchATT+0x38>)
1000d728:	6819      	ldr	r1, [r3, #0]
1000d72a:	4b0c      	ldr	r3, [pc, #48]	; (1000d75c <db_searchATT+0x3c>)
1000d72c:	681e      	ldr	r6, [r3, #0]
1000d72e:	428c      	cmp	r4, r1
1000d730:	dc10      	bgt.n	1000d754 <db_searchATT+0x34>
1000d732:	200c      	movs	r0, #12
1000d734:	1863      	adds	r3, r4, r1
1000d736:	0fda      	lsrs	r2, r3, #31
1000d738:	18d3      	adds	r3, r2, r3
1000d73a:	1c02      	adds	r2, r0, #0
1000d73c:	105b      	asrs	r3, r3, #1
1000d73e:	435a      	muls	r2, r3
1000d740:	18b0      	adds	r0, r6, r2
1000d742:	8802      	ldrh	r2, [r0, #0]
1000d744:	42aa      	cmp	r2, r5
1000d746:	d201      	bcs.n	1000d74c <db_searchATT+0x2c>
1000d748:	1e59      	subs	r1, r3, #1
1000d74a:	e7f0      	b.n	1000d72e <db_searchATT+0xe>
1000d74c:	42aa      	cmp	r2, r5
1000d74e:	d902      	bls.n	1000d756 <db_searchATT+0x36>
1000d750:	1c5c      	adds	r4, r3, #1
1000d752:	e7ec      	b.n	1000d72e <db_searchATT+0xe>
1000d754:	2000      	movs	r0, #0
1000d756:	bd70      	pop	{r4, r5, r6, pc}
1000d758:	10014d44 	.word	0x10014d44
1000d75c:	10014d3c 	.word	0x10014d3c

1000d760 <at_ble_read_authorize_reply.part.1>:
1000d760:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000d762:	4b09      	ldr	r3, [pc, #36]	; (1000d788 <at_ble_read_authorize_reply.part.1+0x28>)
1000d764:	1c05      	adds	r5, r0, #0
1000d766:	1c08      	adds	r0, r1, #0
1000d768:	1c0c      	adds	r4, r1, #0
1000d76a:	4798      	blx	r3
1000d76c:	2800      	cmp	r0, #0
1000d76e:	d009      	beq.n	1000d784 <at_ble_read_authorize_reply.part.1+0x24>
1000d770:	6882      	ldr	r2, [r0, #8]
1000d772:	2a00      	cmp	r2, #0
1000d774:	d006      	beq.n	1000d784 <at_ble_read_authorize_reply.part.1+0x24>
1000d776:	8883      	ldrh	r3, [r0, #4]
1000d778:	1c29      	adds	r1, r5, #0
1000d77a:	9200      	str	r2, [sp, #0]
1000d77c:	1c20      	adds	r0, r4, #0
1000d77e:	2200      	movs	r2, #0
1000d780:	4c02      	ldr	r4, [pc, #8]	; (1000d78c <at_ble_read_authorize_reply.part.1+0x2c>)
1000d782:	47a0      	blx	r4
1000d784:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000d786:	46c0      	nop			; (mov r8, r8)
1000d788:	1000d721 	.word	0x1000d721
1000d78c:	1000eed1 	.word	0x1000eed1

1000d790 <initi_gatt_server_module>:
1000d790:	2300      	movs	r3, #0
1000d792:	4a07      	ldr	r2, [pc, #28]	; (1000d7b0 <initi_gatt_server_module+0x20>)
1000d794:	7013      	strb	r3, [r2, #0]
1000d796:	4a07      	ldr	r2, [pc, #28]	; (1000d7b4 <initi_gatt_server_module+0x24>)
1000d798:	6013      	str	r3, [r2, #0]
1000d79a:	4a07      	ldr	r2, [pc, #28]	; (1000d7b8 <initi_gatt_server_module+0x28>)
1000d79c:	6013      	str	r3, [r2, #0]
1000d79e:	4a07      	ldr	r2, [pc, #28]	; (1000d7bc <initi_gatt_server_module+0x2c>)
1000d7a0:	6013      	str	r3, [r2, #0]
1000d7a2:	4a07      	ldr	r2, [pc, #28]	; (1000d7c0 <initi_gatt_server_module+0x30>)
1000d7a4:	6013      	str	r3, [r2, #0]
1000d7a6:	4a07      	ldr	r2, [pc, #28]	; (1000d7c4 <initi_gatt_server_module+0x34>)
1000d7a8:	6013      	str	r3, [r2, #0]
1000d7aa:	4a07      	ldr	r2, [pc, #28]	; (1000d7c8 <initi_gatt_server_module+0x38>)
1000d7ac:	6013      	str	r3, [r2, #0]
1000d7ae:	4770      	bx	lr
1000d7b0:	10014d38 	.word	0x10014d38
1000d7b4:	10014d48 	.word	0x10014d48
1000d7b8:	10014d44 	.word	0x10014d44
1000d7bc:	10014d34 	.word	0x10014d34
1000d7c0:	10014d40 	.word	0x10014d40
1000d7c4:	10014d3c 	.word	0x10014d3c
1000d7c8:	10014d4c 	.word	0x10014d4c

1000d7cc <db_init>:
1000d7cc:	4b0a      	ldr	r3, [pc, #40]	; (1000d7f8 <db_init+0x2c>)
1000d7ce:	4a0b      	ldr	r2, [pc, #44]	; (1000d7fc <db_init+0x30>)
1000d7d0:	6018      	str	r0, [r3, #0]
1000d7d2:	084b      	lsrs	r3, r1, #1
1000d7d4:	6013      	str	r3, [r2, #0]
1000d7d6:	4a0a      	ldr	r2, [pc, #40]	; (1000d800 <db_init+0x34>)
1000d7d8:	18c3      	adds	r3, r0, r3
1000d7da:	6013      	str	r3, [r2, #0]
1000d7dc:	4a09      	ldr	r2, [pc, #36]	; (1000d804 <db_init+0x38>)
1000d7de:	1841      	adds	r1, r0, r1
1000d7e0:	6013      	str	r3, [r2, #0]
1000d7e2:	2303      	movs	r3, #3
1000d7e4:	2200      	movs	r2, #0
1000d7e6:	3103      	adds	r1, #3
1000d7e8:	4399      	bics	r1, r3
1000d7ea:	4b07      	ldr	r3, [pc, #28]	; (1000d808 <db_init+0x3c>)
1000d7ec:	3904      	subs	r1, #4
1000d7ee:	6019      	str	r1, [r3, #0]
1000d7f0:	4b06      	ldr	r3, [pc, #24]	; (1000d80c <db_init+0x40>)
1000d7f2:	601a      	str	r2, [r3, #0]
1000d7f4:	4770      	bx	lr
1000d7f6:	46c0      	nop			; (mov r8, r8)
1000d7f8:	10014d4c 	.word	0x10014d4c
1000d7fc:	10014d48 	.word	0x10014d48
1000d800:	10014d34 	.word	0x10014d34
1000d804:	10014d40 	.word	0x10014d40
1000d808:	10014d3c 	.word	0x10014d3c
1000d80c:	10014d44 	.word	0x10014d44

1000d810 <at_ble_characteristic_value_set>:
1000d810:	b570      	push	{r4, r5, r6, lr}
1000d812:	4b0b      	ldr	r3, [pc, #44]	; (1000d840 <at_ble_characteristic_value_set+0x30>)
1000d814:	1c06      	adds	r6, r0, #0
1000d816:	1c0c      	adds	r4, r1, #0
1000d818:	1c15      	adds	r5, r2, #0
1000d81a:	4798      	blx	r3
1000d81c:	2800      	cmp	r0, #0
1000d81e:	d008      	beq.n	1000d832 <at_ble_characteristic_value_set+0x22>
1000d820:	6880      	ldr	r0, [r0, #8]
1000d822:	2800      	cmp	r0, #0
1000d824:	d005      	beq.n	1000d832 <at_ble_characteristic_value_set+0x22>
1000d826:	1c21      	adds	r1, r4, #0
1000d828:	1c2a      	adds	r2, r5, #0
1000d82a:	4b06      	ldr	r3, [pc, #24]	; (1000d844 <at_ble_characteristic_value_set+0x34>)
1000d82c:	4798      	blx	r3
1000d82e:	2000      	movs	r0, #0
1000d830:	e004      	b.n	1000d83c <at_ble_characteristic_value_set+0x2c>
1000d832:	1c30      	adds	r0, r6, #0
1000d834:	1c29      	adds	r1, r5, #0
1000d836:	1c22      	adds	r2, r4, #0
1000d838:	4b03      	ldr	r3, [pc, #12]	; (1000d848 <at_ble_characteristic_value_set+0x38>)
1000d83a:	4798      	blx	r3
1000d83c:	bd70      	pop	{r4, r5, r6, pc}
1000d83e:	46c0      	nop			; (mov r8, r8)
1000d840:	1000d721 	.word	0x1000d721
1000d844:	1001149f 	.word	0x1001149f
1000d848:	1000f245 	.word	0x1000f245

1000d84c <at_ble_characteristic_value_get>:
1000d84c:	b570      	push	{r4, r5, r6, lr}
1000d84e:	4b0c      	ldr	r3, [pc, #48]	; (1000d880 <at_ble_characteristic_value_get+0x34>)
1000d850:	1c06      	adds	r6, r0, #0
1000d852:	1c0c      	adds	r4, r1, #0
1000d854:	1c15      	adds	r5, r2, #0
1000d856:	4798      	blx	r3
1000d858:	2800      	cmp	r0, #0
1000d85a:	d00b      	beq.n	1000d874 <at_ble_characteristic_value_get+0x28>
1000d85c:	6883      	ldr	r3, [r0, #8]
1000d85e:	2b00      	cmp	r3, #0
1000d860:	d008      	beq.n	1000d874 <at_ble_characteristic_value_get+0x28>
1000d862:	8883      	ldrh	r3, [r0, #4]
1000d864:	802b      	strh	r3, [r5, #0]
1000d866:	8882      	ldrh	r2, [r0, #4]
1000d868:	6881      	ldr	r1, [r0, #8]
1000d86a:	4b06      	ldr	r3, [pc, #24]	; (1000d884 <at_ble_characteristic_value_get+0x38>)
1000d86c:	1c20      	adds	r0, r4, #0
1000d86e:	4798      	blx	r3
1000d870:	2000      	movs	r0, #0
1000d872:	e004      	b.n	1000d87e <at_ble_characteristic_value_get+0x32>
1000d874:	1c30      	adds	r0, r6, #0
1000d876:	1c29      	adds	r1, r5, #0
1000d878:	1c22      	adds	r2, r4, #0
1000d87a:	4b03      	ldr	r3, [pc, #12]	; (1000d888 <at_ble_characteristic_value_get+0x3c>)
1000d87c:	4798      	blx	r3
1000d87e:	bd70      	pop	{r4, r5, r6, pc}
1000d880:	1000d721 	.word	0x1000d721
1000d884:	1001149f 	.word	0x1001149f
1000d888:	1000f2d1 	.word	0x1000f2d1

1000d88c <at_ble_write_authorize_reply>:
1000d88c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d88e:	b085      	sub	sp, #20
1000d890:	1c04      	adds	r4, r0, #0
1000d892:	9101      	str	r1, [sp, #4]
1000d894:	2900      	cmp	r1, #0
1000d896:	d128      	bne.n	1000d8ea <at_ble_write_authorize_reply+0x5e>
1000d898:	8843      	ldrh	r3, [r0, #2]
1000d89a:	1c27      	adds	r7, r4, #0
1000d89c:	9300      	str	r3, [sp, #0]
1000d89e:	1c18      	adds	r0, r3, #0
1000d8a0:	4b16      	ldr	r3, [pc, #88]	; (1000d8fc <at_ble_write_authorize_reply+0x70>)
1000d8a2:	4798      	blx	r3
1000d8a4:	3708      	adds	r7, #8
1000d8a6:	2800      	cmp	r0, #0
1000d8a8:	d009      	beq.n	1000d8be <at_ble_write_authorize_reply+0x32>
1000d8aa:	6880      	ldr	r0, [r0, #8]
1000d8ac:	2800      	cmp	r0, #0
1000d8ae:	d006      	beq.n	1000d8be <at_ble_write_authorize_reply+0x32>
1000d8b0:	88a3      	ldrh	r3, [r4, #4]
1000d8b2:	88e2      	ldrh	r2, [r4, #6]
1000d8b4:	18c0      	adds	r0, r0, r3
1000d8b6:	1c39      	adds	r1, r7, #0
1000d8b8:	4b11      	ldr	r3, [pc, #68]	; (1000d900 <at_ble_write_authorize_reply+0x74>)
1000d8ba:	4798      	blx	r3
1000d8bc:	e015      	b.n	1000d8ea <at_ble_write_authorize_reply+0x5e>
1000d8be:	ab02      	add	r3, sp, #8
1000d8c0:	1d9e      	adds	r6, r3, #6
1000d8c2:	2300      	movs	r3, #0
1000d8c4:	4d0f      	ldr	r5, [pc, #60]	; (1000d904 <at_ble_write_authorize_reply+0x78>)
1000d8c6:	8033      	strh	r3, [r6, #0]
1000d8c8:	6829      	ldr	r1, [r5, #0]
1000d8ca:	1c32      	adds	r2, r6, #0
1000d8cc:	4b0e      	ldr	r3, [pc, #56]	; (1000d908 <at_ble_write_authorize_reply+0x7c>)
1000d8ce:	9800      	ldr	r0, [sp, #0]
1000d8d0:	4798      	blx	r3
1000d8d2:	682b      	ldr	r3, [r5, #0]
1000d8d4:	88a0      	ldrh	r0, [r4, #4]
1000d8d6:	88e2      	ldrh	r2, [r4, #6]
1000d8d8:	1818      	adds	r0, r3, r0
1000d8da:	1c39      	adds	r1, r7, #0
1000d8dc:	4b08      	ldr	r3, [pc, #32]	; (1000d900 <at_ble_write_authorize_reply+0x74>)
1000d8de:	4798      	blx	r3
1000d8e0:	8860      	ldrh	r0, [r4, #2]
1000d8e2:	8832      	ldrh	r2, [r6, #0]
1000d8e4:	6829      	ldr	r1, [r5, #0]
1000d8e6:	4b09      	ldr	r3, [pc, #36]	; (1000d90c <at_ble_write_authorize_reply+0x80>)
1000d8e8:	4798      	blx	r3
1000d8ea:	8860      	ldrh	r0, [r4, #2]
1000d8ec:	8821      	ldrh	r1, [r4, #0]
1000d8ee:	9a01      	ldr	r2, [sp, #4]
1000d8f0:	4b07      	ldr	r3, [pc, #28]	; (1000d910 <at_ble_write_authorize_reply+0x84>)
1000d8f2:	4798      	blx	r3
1000d8f4:	2000      	movs	r0, #0
1000d8f6:	b005      	add	sp, #20
1000d8f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d8fa:	46c0      	nop			; (mov r8, r8)
1000d8fc:	1000d721 	.word	0x1000d721
1000d900:	1001149f 	.word	0x1001149f
1000d904:	10013768 	.word	0x10013768
1000d908:	1000d84d 	.word	0x1000d84d
1000d90c:	1000d811 	.word	0x1000d811
1000d910:	1000ef3d 	.word	0x1000ef3d

1000d914 <gatts_handle_read_req>:
1000d914:	b538      	push	{r3, r4, r5, lr}
1000d916:	1c0c      	adds	r4, r1, #0
1000d918:	4b07      	ldr	r3, [pc, #28]	; (1000d938 <gatts_handle_read_req+0x24>)
1000d91a:	4798      	blx	r3
1000d91c:	8865      	ldrh	r5, [r4, #2]
1000d91e:	4b07      	ldr	r3, [pc, #28]	; (1000d93c <gatts_handle_read_req+0x28>)
1000d920:	1c28      	adds	r0, r5, #0
1000d922:	4798      	blx	r3
1000d924:	7883      	ldrb	r3, [r0, #2]
1000d926:	2026      	movs	r0, #38	; 0x26
1000d928:	07db      	lsls	r3, r3, #31
1000d92a:	d404      	bmi.n	1000d936 <gatts_handle_read_req+0x22>
1000d92c:	8820      	ldrh	r0, [r4, #0]
1000d92e:	1c29      	adds	r1, r5, #0
1000d930:	4b03      	ldr	r3, [pc, #12]	; (1000d940 <gatts_handle_read_req+0x2c>)
1000d932:	4798      	blx	r3
1000d934:	203b      	movs	r0, #59	; 0x3b
1000d936:	bd38      	pop	{r3, r4, r5, pc}
1000d938:	1000ee81 	.word	0x1000ee81
1000d93c:	1000d721 	.word	0x1000d721
1000d940:	1000d761 	.word	0x1000d761

1000d944 <gatts_handle_att_info_req>:
1000d944:	b538      	push	{r3, r4, r5, lr}
1000d946:	1c0d      	adds	r5, r1, #0
1000d948:	4b0a      	ldr	r3, [pc, #40]	; (1000d974 <gatts_handle_att_info_req+0x30>)
1000d94a:	1c14      	adds	r4, r2, #0
1000d94c:	4798      	blx	r3
1000d94e:	882d      	ldrh	r5, [r5, #0]
1000d950:	4b09      	ldr	r3, [pc, #36]	; (1000d978 <gatts_handle_att_info_req+0x34>)
1000d952:	1c28      	adds	r0, r5, #0
1000d954:	4798      	blx	r3
1000d956:	0a22      	lsrs	r2, r4, #8
1000d958:	1c03      	adds	r3, r0, #0
1000d95a:	4c08      	ldr	r4, [pc, #32]	; (1000d97c <gatts_handle_att_info_req+0x38>)
1000d95c:	b291      	uxth	r1, r2
1000d95e:	2800      	cmp	r0, #0
1000d960:	d003      	beq.n	1000d96a <gatts_handle_att_info_req+0x26>
1000d962:	8882      	ldrh	r2, [r0, #4]
1000d964:	2300      	movs	r3, #0
1000d966:	1c28      	adds	r0, r5, #0
1000d968:	e001      	b.n	1000d96e <gatts_handle_att_info_req+0x2a>
1000d96a:	1c28      	adds	r0, r5, #0
1000d96c:	2201      	movs	r2, #1
1000d96e:	47a0      	blx	r4
1000d970:	203b      	movs	r0, #59	; 0x3b
1000d972:	bd38      	pop	{r3, r4, r5, pc}
1000d974:	1000eec5 	.word	0x1000eec5
1000d978:	1000d721 	.word	0x1000d721
1000d97c:	1000ef81 	.word	0x1000ef81

1000d980 <gatts_handle_write_req>:
1000d980:	b510      	push	{r4, lr}
1000d982:	1c14      	adds	r4, r2, #0
1000d984:	4b07      	ldr	r3, [pc, #28]	; (1000d9a4 <gatts_handle_write_req+0x24>)
1000d986:	4798      	blx	r3
1000d988:	4b07      	ldr	r3, [pc, #28]	; (1000d9a8 <gatts_handle_write_req+0x28>)
1000d98a:	8860      	ldrh	r0, [r4, #2]
1000d98c:	4798      	blx	r3
1000d98e:	2302      	movs	r3, #2
1000d990:	7881      	ldrb	r1, [r0, #2]
1000d992:	2022      	movs	r0, #34	; 0x22
1000d994:	4019      	ands	r1, r3
1000d996:	d103      	bne.n	1000d9a0 <gatts_handle_write_req+0x20>
1000d998:	1c20      	adds	r0, r4, #0
1000d99a:	4b04      	ldr	r3, [pc, #16]	; (1000d9ac <gatts_handle_write_req+0x2c>)
1000d99c:	4798      	blx	r3
1000d99e:	201f      	movs	r0, #31
1000d9a0:	bd10      	pop	{r4, pc}
1000d9a2:	46c0      	nop			; (mov r8, r8)
1000d9a4:	1000ee8d 	.word	0x1000ee8d
1000d9a8:	1000d721 	.word	0x1000d721
1000d9ac:	1000d88d 	.word	0x1000d88d

1000d9b0 <init_l2cc_task_module>:
1000d9b0:	220a      	movs	r2, #10
1000d9b2:	4b01      	ldr	r3, [pc, #4]	; (1000d9b8 <init_l2cc_task_module+0x8>)
1000d9b4:	701a      	strb	r2, [r3, #0]
1000d9b6:	4770      	bx	lr
1000d9b8:	10013764 	.word	0x10013764

1000d9bc <l2cc_data_send_rsp_handler>:
1000d9bc:	b510      	push	{r4, lr}
1000d9be:	7802      	ldrb	r2, [r0, #0]
1000d9c0:	700a      	strb	r2, [r1, #0]
1000d9c2:	7883      	ldrb	r3, [r0, #2]
1000d9c4:	7844      	ldrb	r4, [r0, #1]
1000d9c6:	021b      	lsls	r3, r3, #8
1000d9c8:	4323      	orrs	r3, r4
1000d9ca:	804b      	strh	r3, [r1, #2]
1000d9cc:	7903      	ldrb	r3, [r0, #4]
1000d9ce:	78c0      	ldrb	r0, [r0, #3]
1000d9d0:	021b      	lsls	r3, r3, #8
1000d9d2:	4303      	orrs	r3, r0
1000d9d4:	808b      	strh	r3, [r1, #4]
1000d9d6:	2a00      	cmp	r2, #0
1000d9d8:	d103      	bne.n	1000d9e2 <l2cc_data_send_rsp_handler+0x26>
1000d9da:	4a02      	ldr	r2, [pc, #8]	; (1000d9e4 <l2cc_data_send_rsp_handler+0x28>)
1000d9dc:	7813      	ldrb	r3, [r2, #0]
1000d9de:	3301      	adds	r3, #1
1000d9e0:	7013      	strb	r3, [r2, #0]
1000d9e2:	bd10      	pop	{r4, pc}
1000d9e4:	10013764 	.word	0x10013764

1000d9e8 <l2cc_data_received_handler>:
1000d9e8:	b508      	push	{r3, lr}
1000d9ea:	1c03      	adds	r3, r0, #0
1000d9ec:	7842      	ldrb	r2, [r0, #1]
1000d9ee:	7800      	ldrb	r0, [r0, #0]
1000d9f0:	0212      	lsls	r2, r2, #8
1000d9f2:	4302      	orrs	r2, r0
1000d9f4:	800a      	strh	r2, [r1, #0]
1000d9f6:	78da      	ldrb	r2, [r3, #3]
1000d9f8:	7898      	ldrb	r0, [r3, #2]
1000d9fa:	0212      	lsls	r2, r2, #8
1000d9fc:	4302      	orrs	r2, r0
1000d9fe:	804a      	strh	r2, [r1, #2]
1000da00:	795a      	ldrb	r2, [r3, #5]
1000da02:	7918      	ldrb	r0, [r3, #4]
1000da04:	0212      	lsls	r2, r2, #8
1000da06:	4302      	orrs	r2, r0
1000da08:	808a      	strh	r2, [r1, #4]
1000da0a:	1d88      	adds	r0, r1, #6
1000da0c:	1d99      	adds	r1, r3, #6
1000da0e:	4b01      	ldr	r3, [pc, #4]	; (1000da14 <l2cc_data_received_handler+0x2c>)
1000da10:	4798      	blx	r3
1000da12:	bd08      	pop	{r3, pc}
1000da14:	1001149f 	.word	0x1001149f

1000da18 <at_ble_authenticate>:
1000da18:	b5f0      	push	{r4, r5, r6, r7, lr}
1000da1a:	1c0c      	adds	r4, r1, #0
1000da1c:	211f      	movs	r1, #31
1000da1e:	b08b      	sub	sp, #44	; 0x2c
1000da20:	9307      	str	r3, [sp, #28]
1000da22:	ab02      	add	r3, sp, #8
1000da24:	18c9      	adds	r1, r1, r3
1000da26:	230f      	movs	r3, #15
1000da28:	700b      	strb	r3, [r1, #0]
1000da2a:	4b40      	ldr	r3, [pc, #256]	; (1000db2c <at_ble_authenticate+0x114>)
1000da2c:	1c05      	adds	r5, r0, #0
1000da2e:	1c16      	adds	r6, r2, #0
1000da30:	4798      	blx	r3
1000da32:	1c07      	adds	r7, r0, #0
1000da34:	2001      	movs	r0, #1
1000da36:	2f07      	cmp	r7, #7
1000da38:	d875      	bhi.n	1000db26 <at_ble_authenticate+0x10e>
1000da3a:	2c00      	cmp	r4, #0
1000da3c:	d113      	bne.n	1000da66 <at_ble_authenticate+0x4e>
1000da3e:	2312      	movs	r3, #18
1000da40:	435f      	muls	r7, r3
1000da42:	4b3b      	ldr	r3, [pc, #236]	; (1000db30 <at_ble_authenticate+0x118>)
1000da44:	5cfb      	ldrb	r3, [r7, r3]
1000da46:	4283      	cmp	r3, r0
1000da48:	d001      	beq.n	1000da4e <at_ble_authenticate+0x36>
1000da4a:	20cf      	movs	r0, #207	; 0xcf
1000da4c:	e06b      	b.n	1000db26 <at_ble_authenticate+0x10e>
1000da4e:	9504      	str	r5, [sp, #16]
1000da50:	9400      	str	r4, [sp, #0]
1000da52:	9401      	str	r4, [sp, #4]
1000da54:	9402      	str	r4, [sp, #8]
1000da56:	9403      	str	r4, [sp, #12]
1000da58:	1c20      	adds	r0, r4, #0
1000da5a:	1c21      	adds	r1, r4, #0
1000da5c:	1c22      	adds	r2, r4, #0
1000da5e:	1c23      	adds	r3, r4, #0
1000da60:	4d34      	ldr	r5, [pc, #208]	; (1000db34 <at_ble_authenticate+0x11c>)
1000da62:	47a8      	blx	r5
1000da64:	e05e      	b.n	1000db24 <at_ble_authenticate+0x10c>
1000da66:	7922      	ldrb	r2, [r4, #4]
1000da68:	2a06      	cmp	r2, #6
1000da6a:	d9ee      	bls.n	1000da4a <at_ble_authenticate+0x32>
1000da6c:	7963      	ldrb	r3, [r4, #5]
1000da6e:	2b10      	cmp	r3, #16
1000da70:	d8eb      	bhi.n	1000da4a <at_ble_authenticate+0x32>
1000da72:	429a      	cmp	r2, r3
1000da74:	d8e9      	bhi.n	1000da4a <at_ble_authenticate+0x32>
1000da76:	7a23      	ldrb	r3, [r4, #8]
1000da78:	2b04      	cmp	r3, #4
1000da7a:	d8e6      	bhi.n	1000da4a <at_ble_authenticate+0x32>
1000da7c:	79a3      	ldrb	r3, [r4, #6]
1000da7e:	2b07      	cmp	r3, #7
1000da80:	d8e3      	bhi.n	1000da4a <at_ble_authenticate+0x32>
1000da82:	79e3      	ldrb	r3, [r4, #7]
1000da84:	2b07      	cmp	r3, #7
1000da86:	d8e0      	bhi.n	1000da4a <at_ble_authenticate+0x32>
1000da88:	78a3      	ldrb	r3, [r4, #2]
1000da8a:	2b00      	cmp	r3, #0
1000da8c:	d006      	beq.n	1000da9c <at_ble_authenticate+0x84>
1000da8e:	2e00      	cmp	r6, #0
1000da90:	d0db      	beq.n	1000da4a <at_ble_authenticate+0x32>
1000da92:	4829      	ldr	r0, [pc, #164]	; (1000db38 <at_ble_authenticate+0x120>)
1000da94:	1c31      	adds	r1, r6, #0
1000da96:	221c      	movs	r2, #28
1000da98:	4b28      	ldr	r3, [pc, #160]	; (1000db3c <at_ble_authenticate+0x124>)
1000da9a:	4798      	blx	r3
1000da9c:	9b07      	ldr	r3, [sp, #28]
1000da9e:	2b00      	cmp	r3, #0
1000daa0:	d005      	beq.n	1000daae <at_ble_authenticate+0x96>
1000daa2:	4827      	ldr	r0, [pc, #156]	; (1000db40 <at_ble_authenticate+0x128>)
1000daa4:	1c19      	adds	r1, r3, #0
1000daa6:	309a      	adds	r0, #154	; 0x9a
1000daa8:	2210      	movs	r2, #16
1000daaa:	4b24      	ldr	r3, [pc, #144]	; (1000db3c <at_ble_authenticate+0x124>)
1000daac:	4798      	blx	r3
1000daae:	7863      	ldrb	r3, [r4, #1]
1000dab0:	78a2      	ldrb	r2, [r4, #2]
1000dab2:	009b      	lsls	r3, r3, #2
1000dab4:	4313      	orrs	r3, r2
1000dab6:	2212      	movs	r2, #18
1000dab8:	4357      	muls	r7, r2
1000daba:	4a1d      	ldr	r2, [pc, #116]	; (1000db30 <at_ble_authenticate+0x118>)
1000dabc:	b2db      	uxtb	r3, r3
1000dabe:	5cba      	ldrb	r2, [r7, r2]
1000dac0:	2a00      	cmp	r2, #0
1000dac2:	d116      	bne.n	1000daf2 <at_ble_authenticate+0xda>
1000dac4:	79a0      	ldrb	r0, [r4, #6]
1000dac6:	0742      	lsls	r2, r0, #29
1000dac8:	d502      	bpl.n	1000dad0 <at_ble_authenticate+0xb8>
1000daca:	9a07      	ldr	r2, [sp, #28]
1000dacc:	2a00      	cmp	r2, #0
1000dace:	d0bc      	beq.n	1000da4a <at_ble_authenticate+0x32>
1000dad0:	07c2      	lsls	r2, r0, #31
1000dad2:	d501      	bpl.n	1000dad8 <at_ble_authenticate+0xc0>
1000dad4:	2e00      	cmp	r6, #0
1000dad6:	d0b8      	beq.n	1000da4a <at_ble_authenticate+0x32>
1000dad8:	7966      	ldrb	r6, [r4, #5]
1000dada:	7821      	ldrb	r1, [r4, #0]
1000dadc:	78e2      	ldrb	r2, [r4, #3]
1000dade:	9600      	str	r6, [sp, #0]
1000dae0:	9001      	str	r0, [sp, #4]
1000dae2:	79e0      	ldrb	r0, [r4, #7]
1000dae4:	9002      	str	r0, [sp, #8]
1000dae6:	7a20      	ldrb	r0, [r4, #8]
1000dae8:	4c16      	ldr	r4, [pc, #88]	; (1000db44 <at_ble_authenticate+0x12c>)
1000daea:	9003      	str	r0, [sp, #12]
1000daec:	1c28      	adds	r0, r5, #0
1000daee:	47a0      	blx	r4
1000daf0:	e018      	b.n	1000db24 <at_ble_authenticate+0x10c>
1000daf2:	2a01      	cmp	r2, #1
1000daf4:	d1a9      	bne.n	1000da4a <at_ble_authenticate+0x32>
1000daf6:	79e0      	ldrb	r0, [r4, #7]
1000daf8:	0742      	lsls	r2, r0, #29
1000dafa:	d502      	bpl.n	1000db02 <at_ble_authenticate+0xea>
1000dafc:	9a07      	ldr	r2, [sp, #28]
1000dafe:	2a00      	cmp	r2, #0
1000db00:	d0a3      	beq.n	1000da4a <at_ble_authenticate+0x32>
1000db02:	07c2      	lsls	r2, r0, #31
1000db04:	d501      	bpl.n	1000db0a <at_ble_authenticate+0xf2>
1000db06:	2e00      	cmp	r6, #0
1000db08:	d09f      	beq.n	1000da4a <at_ble_authenticate+0x32>
1000db0a:	7966      	ldrb	r6, [r4, #5]
1000db0c:	7821      	ldrb	r1, [r4, #0]
1000db0e:	78e2      	ldrb	r2, [r4, #3]
1000db10:	9600      	str	r6, [sp, #0]
1000db12:	79a6      	ldrb	r6, [r4, #6]
1000db14:	9002      	str	r0, [sp, #8]
1000db16:	9601      	str	r6, [sp, #4]
1000db18:	7a20      	ldrb	r0, [r4, #8]
1000db1a:	9504      	str	r5, [sp, #16]
1000db1c:	9003      	str	r0, [sp, #12]
1000db1e:	4c05      	ldr	r4, [pc, #20]	; (1000db34 <at_ble_authenticate+0x11c>)
1000db20:	2001      	movs	r0, #1
1000db22:	47a0      	blx	r4
1000db24:	2000      	movs	r0, #0
1000db26:	b00b      	add	sp, #44	; 0x2c
1000db28:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000db2a:	46c0      	nop			; (mov r8, r8)
1000db2c:	1000df19 	.word	0x1000df19
1000db30:	10015a7e 	.word	0x10015a7e
1000db34:	1000e489 	.word	0x1000e489
1000db38:	10015b8c 	.word	0x10015b8c
1000db3c:	1001149f 	.word	0x1001149f
1000db40:	10015b0e 	.word	0x10015b0e
1000db44:	1000e269 	.word	0x1000e269

1000db48 <at_ble_pair_key_reply>:
1000db48:	b5f0      	push	{r4, r5, r6, r7, lr}
1000db4a:	b085      	sub	sp, #20
1000db4c:	1c05      	adds	r5, r0, #0
1000db4e:	1c0c      	adds	r4, r1, #0
1000db50:	1c16      	adds	r6, r2, #0
1000db52:	2100      	movs	r1, #0
1000db54:	4668      	mov	r0, sp
1000db56:	2210      	movs	r2, #16
1000db58:	4b18      	ldr	r3, [pc, #96]	; (1000dbbc <at_ble_pair_key_reply+0x74>)
1000db5a:	4798      	blx	r3
1000db5c:	2101      	movs	r1, #1
1000db5e:	2e00      	cmp	r6, #0
1000db60:	d101      	bne.n	1000db66 <at_ble_pair_key_reply+0x1e>
1000db62:	1c31      	adds	r1, r6, #0
1000db64:	466e      	mov	r6, sp
1000db66:	2c00      	cmp	r4, #0
1000db68:	d116      	bne.n	1000db98 <at_ble_pair_key_reply+0x50>
1000db6a:	2701      	movs	r7, #1
1000db6c:	1c23      	adds	r3, r4, #0
1000db6e:	1d70      	adds	r0, r6, #5
1000db70:	3e01      	subs	r6, #1
1000db72:	7802      	ldrb	r2, [r0, #0]
1000db74:	3801      	subs	r0, #1
1000db76:	3a30      	subs	r2, #48	; 0x30
1000db78:	437a      	muls	r2, r7
1000db7a:	189b      	adds	r3, r3, r2
1000db7c:	220a      	movs	r2, #10
1000db7e:	4357      	muls	r7, r2
1000db80:	42b0      	cmp	r0, r6
1000db82:	d1f6      	bne.n	1000db72 <at_ble_pair_key_reply+0x2a>
1000db84:	466a      	mov	r2, sp
1000db86:	4668      	mov	r0, sp
1000db88:	7013      	strb	r3, [r2, #0]
1000db8a:	0a1a      	lsrs	r2, r3, #8
1000db8c:	7042      	strb	r2, [r0, #1]
1000db8e:	0c1a      	lsrs	r2, r3, #16
1000db90:	0e1b      	lsrs	r3, r3, #24
1000db92:	7082      	strb	r2, [r0, #2]
1000db94:	70c3      	strb	r3, [r0, #3]
1000db96:	e009      	b.n	1000dbac <at_ble_pair_key_reply+0x64>
1000db98:	20cf      	movs	r0, #207	; 0xcf
1000db9a:	2c01      	cmp	r4, #1
1000db9c:	d10c      	bne.n	1000dbb8 <at_ble_pair_key_reply+0x70>
1000db9e:	2300      	movs	r3, #0
1000dba0:	4668      	mov	r0, sp
1000dba2:	5cf2      	ldrb	r2, [r6, r3]
1000dba4:	54c2      	strb	r2, [r0, r3]
1000dba6:	3301      	adds	r3, #1
1000dba8:	2b10      	cmp	r3, #16
1000dbaa:	d1f9      	bne.n	1000dba0 <at_ble_pair_key_reply+0x58>
1000dbac:	2004      	movs	r0, #4
1000dbae:	466a      	mov	r2, sp
1000dbb0:	1c2b      	adds	r3, r5, #0
1000dbb2:	4c03      	ldr	r4, [pc, #12]	; (1000dbc0 <at_ble_pair_key_reply+0x78>)
1000dbb4:	47a0      	blx	r4
1000dbb6:	2000      	movs	r0, #0
1000dbb8:	b005      	add	sp, #20
1000dbba:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dbbc:	100114b1 	.word	0x100114b1
1000dbc0:	1000e505 	.word	0x1000e505

1000dbc4 <at_ble_send_slave_sec_request>:
1000dbc4:	b570      	push	{r4, r5, r6, lr}
1000dbc6:	4b0c      	ldr	r3, [pc, #48]	; (1000dbf8 <at_ble_send_slave_sec_request+0x34>)
1000dbc8:	1c0e      	adds	r6, r1, #0
1000dbca:	2100      	movs	r1, #0
1000dbcc:	1c05      	adds	r5, r0, #0
1000dbce:	1c14      	adds	r4, r2, #0
1000dbd0:	4798      	blx	r3
1000dbd2:	2301      	movs	r3, #1
1000dbd4:	2807      	cmp	r0, #7
1000dbd6:	d80d      	bhi.n	1000dbf4 <at_ble_send_slave_sec_request+0x30>
1000dbd8:	3311      	adds	r3, #17
1000dbda:	4358      	muls	r0, r3
1000dbdc:	4b07      	ldr	r3, [pc, #28]	; (1000dbfc <at_ble_send_slave_sec_request+0x38>)
1000dbde:	5cc2      	ldrb	r2, [r0, r3]
1000dbe0:	23e0      	movs	r3, #224	; 0xe0
1000dbe2:	2a01      	cmp	r2, #1
1000dbe4:	d106      	bne.n	1000dbf4 <at_ble_send_slave_sec_request+0x30>
1000dbe6:	00b1      	lsls	r1, r6, #2
1000dbe8:	430c      	orrs	r4, r1
1000dbea:	4b05      	ldr	r3, [pc, #20]	; (1000dc00 <at_ble_send_slave_sec_request+0x3c>)
1000dbec:	b2e1      	uxtb	r1, r4
1000dbee:	1c28      	adds	r0, r5, #0
1000dbf0:	4798      	blx	r3
1000dbf2:	2300      	movs	r3, #0
1000dbf4:	1c18      	adds	r0, r3, #0
1000dbf6:	bd70      	pop	{r4, r5, r6, pc}
1000dbf8:	1000df19 	.word	0x1000df19
1000dbfc:	10015a7e 	.word	0x10015a7e
1000dc00:	1000e555 	.word	0x1000e555

1000dc04 <at_ble_encryption_start>:
1000dc04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000dc06:	23cf      	movs	r3, #207	; 0xcf
1000dc08:	2900      	cmp	r1, #0
1000dc0a:	d02b      	beq.n	1000dc64 <at_ble_encryption_start+0x60>
1000dc0c:	2a05      	cmp	r2, #5
1000dc0e:	d829      	bhi.n	1000dc64 <at_ble_encryption_start+0x60>
1000dc10:	2701      	movs	r7, #1
1000dc12:	1c3d      	adds	r5, r7, #0
1000dc14:	2433      	movs	r4, #51	; 0x33
1000dc16:	4095      	lsls	r5, r2
1000dc18:	4225      	tst	r5, r4
1000dc1a:	d023      	beq.n	1000dc64 <at_ble_encryption_start+0x60>
1000dc1c:	7e8c      	ldrb	r4, [r1, #26]
1000dc1e:	3c07      	subs	r4, #7
1000dc20:	2c09      	cmp	r4, #9
1000dc22:	d81f      	bhi.n	1000dc64 <at_ble_encryption_start+0x60>
1000dc24:	4b10      	ldr	r3, [pc, #64]	; (1000dc68 <at_ble_encryption_start+0x64>)
1000dc26:	1c0c      	adds	r4, r1, #0
1000dc28:	2100      	movs	r1, #0
1000dc2a:	1c15      	adds	r5, r2, #0
1000dc2c:	1c06      	adds	r6, r0, #0
1000dc2e:	4798      	blx	r3
1000dc30:	1c3b      	adds	r3, r7, #0
1000dc32:	2807      	cmp	r0, #7
1000dc34:	d816      	bhi.n	1000dc64 <at_ble_encryption_start+0x60>
1000dc36:	2312      	movs	r3, #18
1000dc38:	4358      	muls	r0, r3
1000dc3a:	4b0c      	ldr	r3, [pc, #48]	; (1000dc6c <at_ble_encryption_start+0x68>)
1000dc3c:	5cc7      	ldrb	r7, [r0, r3]
1000dc3e:	23e0      	movs	r3, #224	; 0xe0
1000dc40:	2f00      	cmp	r7, #0
1000dc42:	d10f      	bne.n	1000dc64 <at_ble_encryption_start+0x60>
1000dc44:	1c21      	adds	r1, r4, #0
1000dc46:	221c      	movs	r2, #28
1000dc48:	4b09      	ldr	r3, [pc, #36]	; (1000dc70 <at_ble_encryption_start+0x6c>)
1000dc4a:	480a      	ldr	r0, [pc, #40]	; (1000dc74 <at_ble_encryption_start+0x70>)
1000dc4c:	4798      	blx	r3
1000dc4e:	1c23      	adds	r3, r4, #0
1000dc50:	7ea1      	ldrb	r1, [r4, #26]
1000dc52:	8a22      	ldrh	r2, [r4, #16]
1000dc54:	3312      	adds	r3, #18
1000dc56:	9100      	str	r1, [sp, #0]
1000dc58:	9501      	str	r5, [sp, #4]
1000dc5a:	1c21      	adds	r1, r4, #0
1000dc5c:	1c30      	adds	r0, r6, #0
1000dc5e:	4c06      	ldr	r4, [pc, #24]	; (1000dc78 <at_ble_encryption_start+0x74>)
1000dc60:	47a0      	blx	r4
1000dc62:	1c3b      	adds	r3, r7, #0
1000dc64:	1c18      	adds	r0, r3, #0
1000dc66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000dc68:	1000df19 	.word	0x1000df19
1000dc6c:	10015a7e 	.word	0x10015a7e
1000dc70:	1001149f 	.word	0x1001149f
1000dc74:	10015b8c 	.word	0x10015b8c
1000dc78:	1000e595 	.word	0x1000e595

1000dc7c <at_ble_encryption_request_reply>:
1000dc7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000dc7e:	24cf      	movs	r4, #207	; 0xcf
1000dc80:	2b00      	cmp	r3, #0
1000dc82:	d011      	beq.n	1000dca8 <at_ble_encryption_request_reply+0x2c>
1000dc84:	2a00      	cmp	r2, #0
1000dc86:	d00a      	beq.n	1000dc9e <at_ble_encryption_request_reply+0x22>
1000dc88:	2905      	cmp	r1, #5
1000dc8a:	d80d      	bhi.n	1000dca8 <at_ble_encryption_request_reply+0x2c>
1000dc8c:	2501      	movs	r5, #1
1000dc8e:	2633      	movs	r6, #51	; 0x33
1000dc90:	408d      	lsls	r5, r1
1000dc92:	4235      	tst	r5, r6
1000dc94:	d008      	beq.n	1000dca8 <at_ble_encryption_request_reply+0x2c>
1000dc96:	7e9d      	ldrb	r5, [r3, #26]
1000dc98:	3d07      	subs	r5, #7
1000dc9a:	2d09      	cmp	r5, #9
1000dc9c:	d804      	bhi.n	1000dca8 <at_ble_encryption_request_reply+0x2c>
1000dc9e:	7e9c      	ldrb	r4, [r3, #26]
1000dca0:	9400      	str	r4, [sp, #0]
1000dca2:	4c02      	ldr	r4, [pc, #8]	; (1000dcac <at_ble_encryption_request_reply+0x30>)
1000dca4:	47a0      	blx	r4
1000dca6:	2400      	movs	r4, #0
1000dca8:	1c20      	adds	r0, r4, #0
1000dcaa:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000dcac:	1000e651 	.word	0x1000e651

1000dcb0 <rx_callback>:
1000dcb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000dcb2:	8883      	ldrh	r3, [r0, #4]
1000dcb4:	1c01      	adds	r1, r0, #0
1000dcb6:	9301      	str	r3, [sp, #4]
1000dcb8:	88c5      	ldrh	r5, [r0, #6]
1000dcba:	8806      	ldrh	r6, [r0, #0]
1000dcbc:	2d00      	cmp	r5, #0
1000dcbe:	d10f      	bne.n	1000dce0 <rx_callback+0x30>
1000dcc0:	1c19      	adds	r1, r3, #0
1000dcc2:	1c30      	adds	r0, r6, #0
1000dcc4:	4b19      	ldr	r3, [pc, #100]	; (1000dd2c <rx_callback+0x7c>)
1000dcc6:	1c2a      	adds	r2, r5, #0
1000dcc8:	4798      	blx	r3
1000dcca:	1e03      	subs	r3, r0, #0
1000dccc:	d105      	bne.n	1000dcda <rx_callback+0x2a>
1000dcce:	1c30      	adds	r0, r6, #0
1000dcd0:	9901      	ldr	r1, [sp, #4]
1000dcd2:	1c1a      	adds	r2, r3, #0
1000dcd4:	4c16      	ldr	r4, [pc, #88]	; (1000dd30 <rx_callback+0x80>)
1000dcd6:	47a0      	blx	r4
1000dcd8:	e027      	b.n	1000dd2a <rx_callback+0x7a>
1000dcda:	4b16      	ldr	r3, [pc, #88]	; (1000dd34 <rx_callback+0x84>)
1000dcdc:	4798      	blx	r3
1000dcde:	e024      	b.n	1000dd2a <rx_callback+0x7a>
1000dce0:	4c15      	ldr	r4, [pc, #84]	; (1000dd38 <rx_callback+0x88>)
1000dce2:	4a16      	ldr	r2, [pc, #88]	; (1000dd3c <rx_callback+0x8c>)
1000dce4:	6823      	ldr	r3, [r4, #0]
1000dce6:	6812      	ldr	r2, [r2, #0]
1000dce8:	18eb      	adds	r3, r5, r3
1000dcea:	4293      	cmp	r3, r2
1000dcec:	d901      	bls.n	1000dcf2 <rx_callback+0x42>
1000dcee:	2300      	movs	r3, #0
1000dcf0:	6023      	str	r3, [r4, #0]
1000dcf2:	4f13      	ldr	r7, [pc, #76]	; (1000dd40 <rx_callback+0x90>)
1000dcf4:	6822      	ldr	r2, [r4, #0]
1000dcf6:	683b      	ldr	r3, [r7, #0]
1000dcf8:	3108      	adds	r1, #8
1000dcfa:	1898      	adds	r0, r3, r2
1000dcfc:	1c2a      	adds	r2, r5, #0
1000dcfe:	4b11      	ldr	r3, [pc, #68]	; (1000dd44 <rx_callback+0x94>)
1000dd00:	4798      	blx	r3
1000dd02:	683b      	ldr	r3, [r7, #0]
1000dd04:	6822      	ldr	r2, [r4, #0]
1000dd06:	1c30      	adds	r0, r6, #0
1000dd08:	189a      	adds	r2, r3, r2
1000dd0a:	9901      	ldr	r1, [sp, #4]
1000dd0c:	4b07      	ldr	r3, [pc, #28]	; (1000dd2c <rx_callback+0x7c>)
1000dd0e:	4798      	blx	r3
1000dd10:	2800      	cmp	r0, #0
1000dd12:	d1e2      	bne.n	1000dcda <rx_callback+0x2a>
1000dd14:	6823      	ldr	r3, [r4, #0]
1000dd16:	683a      	ldr	r2, [r7, #0]
1000dd18:	1c30      	adds	r0, r6, #0
1000dd1a:	18d2      	adds	r2, r2, r3
1000dd1c:	9901      	ldr	r1, [sp, #4]
1000dd1e:	1c2b      	adds	r3, r5, #0
1000dd20:	4e03      	ldr	r6, [pc, #12]	; (1000dd30 <rx_callback+0x80>)
1000dd22:	47b0      	blx	r6
1000dd24:	6823      	ldr	r3, [r4, #0]
1000dd26:	18ed      	adds	r5, r5, r3
1000dd28:	6025      	str	r5, [r4, #0]
1000dd2a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000dd2c:	1000cb9d 	.word	0x1000cb9d
1000dd30:	1000cb15 	.word	0x1000cb15
1000dd34:	1000b1cd 	.word	0x1000b1cd
1000dd38:	10015be8 	.word	0x10015be8
1000dd3c:	10014d54 	.word	0x10014d54
1000dd40:	10014d50 	.word	0x10014d50
1000dd44:	1001149f 	.word	0x1001149f

1000dd48 <interface_send>:
1000dd48:	b508      	push	{r3, lr}
1000dd4a:	4b02      	ldr	r3, [pc, #8]	; (1000dd54 <interface_send+0xc>)
1000dd4c:	4798      	blx	r3
1000dd4e:	2000      	movs	r0, #0
1000dd50:	bd08      	pop	{r3, pc}
1000dd52:	46c0      	nop			; (mov r8, r8)
1000dd54:	1000aeb1 	.word	0x1000aeb1

1000dd58 <interface_init>:
1000dd58:	2280      	movs	r2, #128	; 0x80
1000dd5a:	b510      	push	{r4, lr}
1000dd5c:	2100      	movs	r1, #0
1000dd5e:	1c04      	adds	r4, r0, #0
1000dd60:	0092      	lsls	r2, r2, #2
1000dd62:	4b08      	ldr	r3, [pc, #32]	; (1000dd84 <interface_init+0x2c>)
1000dd64:	4808      	ldr	r0, [pc, #32]	; (1000dd88 <interface_init+0x30>)
1000dd66:	4798      	blx	r3
1000dd68:	2200      	movs	r2, #0
1000dd6a:	4b08      	ldr	r3, [pc, #32]	; (1000dd8c <interface_init+0x34>)
1000dd6c:	601a      	str	r2, [r3, #0]
1000dd6e:	4a08      	ldr	r2, [pc, #32]	; (1000dd90 <interface_init+0x38>)
1000dd70:	4b08      	ldr	r3, [pc, #32]	; (1000dd94 <interface_init+0x3c>)
1000dd72:	601a      	str	r2, [r3, #0]
1000dd74:	4b08      	ldr	r3, [pc, #32]	; (1000dd98 <interface_init+0x40>)
1000dd76:	6922      	ldr	r2, [r4, #16]
1000dd78:	601a      	str	r2, [r3, #0]
1000dd7a:	6962      	ldr	r2, [r4, #20]
1000dd7c:	4b07      	ldr	r3, [pc, #28]	; (1000dd9c <interface_init+0x44>)
1000dd7e:	601a      	str	r2, [r3, #0]
1000dd80:	bd10      	pop	{r4, pc}
1000dd82:	46c0      	nop			; (mov r8, r8)
1000dd84:	100114b1 	.word	0x100114b1
1000dd88:	10015dec 	.word	0x10015dec
1000dd8c:	10015be8 	.word	0x10015be8
1000dd90:	10015bec 	.word	0x10015bec
1000dd94:	10013768 	.word	0x10013768
1000dd98:	10014d50 	.word	0x10014d50
1000dd9c:	10014d54 	.word	0x10014d54

1000dda0 <platform_cmd_cmpl_signal>:
1000dda0:	2201      	movs	r2, #1
1000dda2:	4b01      	ldr	r3, [pc, #4]	; (1000dda8 <platform_cmd_cmpl_signal+0x8>)
1000dda4:	601a      	str	r2, [r3, #0]
1000dda6:	4770      	bx	lr
1000dda8:	10014d58 	.word	0x10014d58

1000ddac <platform_cmd_cmpl_wait>:
1000ddac:	b510      	push	{r4, lr}
1000ddae:	1c04      	adds	r4, r0, #0
1000ddb0:	4b07      	ldr	r3, [pc, #28]	; (1000ddd0 <platform_cmd_cmpl_wait+0x24>)
1000ddb2:	681a      	ldr	r2, [r3, #0]
1000ddb4:	2a01      	cmp	r2, #1
1000ddb6:	d003      	beq.n	1000ddc0 <platform_cmd_cmpl_wait+0x14>
1000ddb8:	4b06      	ldr	r3, [pc, #24]	; (1000ddd4 <platform_cmd_cmpl_wait+0x28>)
1000ddba:	2000      	movs	r0, #0
1000ddbc:	4798      	blx	r3
1000ddbe:	e7f7      	b.n	1000ddb0 <platform_cmd_cmpl_wait+0x4>
1000ddc0:	6819      	ldr	r1, [r3, #0]
1000ddc2:	2901      	cmp	r1, #1
1000ddc4:	d102      	bne.n	1000ddcc <platform_cmd_cmpl_wait+0x20>
1000ddc6:	2200      	movs	r2, #0
1000ddc8:	601a      	str	r2, [r3, #0]
1000ddca:	e000      	b.n	1000ddce <platform_cmd_cmpl_wait+0x22>
1000ddcc:	7022      	strb	r2, [r4, #0]
1000ddce:	bd10      	pop	{r4, pc}
1000ddd0:	10014d58 	.word	0x10014d58
1000ddd4:	1000af3d 	.word	0x1000af3d

1000ddd8 <start_timer>:
1000ddd8:	4770      	bx	lr

1000ddda <stop_timer>:
1000ddda:	4770      	bx	lr

1000dddc <dbg_le_set_bd_addr_req_handler>:
1000dddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ddde:	466b      	mov	r3, sp
1000dde0:	1dde      	adds	r6, r3, #7
1000dde2:	2300      	movs	r3, #0
1000dde4:	7033      	strb	r3, [r6, #0]
1000dde6:	230f      	movs	r3, #15
1000dde8:	4c13      	ldr	r4, [pc, #76]	; (1000de38 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000ddea:	2703      	movs	r7, #3
1000ddec:	7023      	strb	r3, [r4, #0]
1000ddee:	2300      	movs	r3, #0
1000ddf0:	70e3      	strb	r3, [r4, #3]
1000ddf2:	4b12      	ldr	r3, [pc, #72]	; (1000de3c <dbg_le_set_bd_addr_req_handler+0x60>)
1000ddf4:	1c01      	adds	r1, r0, #0
1000ddf6:	881a      	ldrh	r2, [r3, #0]
1000ddf8:	881b      	ldrh	r3, [r3, #0]
1000ddfa:	7122      	strb	r2, [r4, #4]
1000ddfc:	0a1b      	lsrs	r3, r3, #8
1000ddfe:	2206      	movs	r2, #6
1000de00:	7163      	strb	r3, [r4, #5]
1000de02:	480f      	ldr	r0, [pc, #60]	; (1000de40 <dbg_le_set_bd_addr_req_handler+0x64>)
1000de04:	4b0f      	ldr	r3, [pc, #60]	; (1000de44 <dbg_le_set_bd_addr_req_handler+0x68>)
1000de06:	7067      	strb	r7, [r4, #1]
1000de08:	70a7      	strb	r7, [r4, #2]
1000de0a:	4798      	blx	r3
1000de0c:	4d0e      	ldr	r5, [pc, #56]	; (1000de48 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000de0e:	4b0f      	ldr	r3, [pc, #60]	; (1000de4c <dbg_le_set_bd_addr_req_handler+0x70>)
1000de10:	210e      	movs	r1, #14
1000de12:	802b      	strh	r3, [r5, #0]
1000de14:	2306      	movs	r3, #6
1000de16:	71a3      	strb	r3, [r4, #6]
1000de18:	2300      	movs	r3, #0
1000de1a:	1c20      	adds	r0, r4, #0
1000de1c:	71e3      	strb	r3, [r4, #7]
1000de1e:	4b0c      	ldr	r3, [pc, #48]	; (1000de50 <dbg_le_set_bd_addr_req_handler+0x74>)
1000de20:	80af      	strh	r7, [r5, #4]
1000de22:	4798      	blx	r3
1000de24:	1c30      	adds	r0, r6, #0
1000de26:	4b0b      	ldr	r3, [pc, #44]	; (1000de54 <dbg_le_set_bd_addr_req_handler+0x78>)
1000de28:	4798      	blx	r3
1000de2a:	7833      	ldrb	r3, [r6, #0]
1000de2c:	20e2      	movs	r0, #226	; 0xe2
1000de2e:	2b00      	cmp	r3, #0
1000de30:	d101      	bne.n	1000de36 <dbg_le_set_bd_addr_req_handler+0x5a>
1000de32:	68ab      	ldr	r3, [r5, #8]
1000de34:	7818      	ldrb	r0, [r3, #0]
1000de36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000de38:	10015dec 	.word	0x10015dec
1000de3c:	10015a7c 	.word	0x10015a7c
1000de40:	10015df4 	.word	0x10015df4
1000de44:	1001149f 	.word	0x1001149f
1000de48:	10015a70 	.word	0x10015a70
1000de4c:	00000329 	.word	0x00000329
1000de50:	1000dd49 	.word	0x1000dd49
1000de54:	1000ddad 	.word	0x1000ddad

1000de58 <gapc_get_dev_info_cfm.constprop.1>:
1000de58:	b538      	push	{r3, r4, r5, lr}
1000de5a:	230b      	movs	r3, #11
1000de5c:	4c27      	ldr	r4, [pc, #156]	; (1000defc <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000de5e:	7023      	strb	r3, [r4, #0]
1000de60:	3303      	adds	r3, #3
1000de62:	7063      	strb	r3, [r4, #1]
1000de64:	3329      	adds	r3, #41	; 0x29
1000de66:	70a3      	strb	r3, [r4, #2]
1000de68:	4b25      	ldr	r3, [pc, #148]	; (1000df00 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000de6a:	70e1      	strb	r1, [r4, #3]
1000de6c:	881a      	ldrh	r2, [r3, #0]
1000de6e:	881b      	ldrh	r3, [r3, #0]
1000de70:	7122      	strb	r2, [r4, #4]
1000de72:	0a1b      	lsrs	r3, r3, #8
1000de74:	7163      	strb	r3, [r4, #5]
1000de76:	2300      	movs	r3, #0
1000de78:	7220      	strb	r0, [r4, #8]
1000de7a:	7263      	strb	r3, [r4, #9]
1000de7c:	2801      	cmp	r0, #1
1000de7e:	d02b      	beq.n	1000ded8 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000de80:	4298      	cmp	r0, r3
1000de82:	d01b      	beq.n	1000debc <gapc_get_dev_info_cfm.constprop.1+0x64>
1000de84:	2802      	cmp	r0, #2
1000de86:	d12f      	bne.n	1000dee8 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000de88:	4b1e      	ldr	r3, [pc, #120]	; (1000df04 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000de8a:	2112      	movs	r1, #18
1000de8c:	1c1a      	adds	r2, r3, #0
1000de8e:	32ce      	adds	r2, #206	; 0xce
1000de90:	8812      	ldrh	r2, [r2, #0]
1000de92:	72a2      	strb	r2, [r4, #10]
1000de94:	0a12      	lsrs	r2, r2, #8
1000de96:	72e2      	strb	r2, [r4, #11]
1000de98:	1c1a      	adds	r2, r3, #0
1000de9a:	32d0      	adds	r2, #208	; 0xd0
1000de9c:	8812      	ldrh	r2, [r2, #0]
1000de9e:	7322      	strb	r2, [r4, #12]
1000dea0:	0a12      	lsrs	r2, r2, #8
1000dea2:	7362      	strb	r2, [r4, #13]
1000dea4:	1c1a      	adds	r2, r3, #0
1000dea6:	32d2      	adds	r2, #210	; 0xd2
1000dea8:	8812      	ldrh	r2, [r2, #0]
1000deaa:	33d4      	adds	r3, #212	; 0xd4
1000deac:	73a2      	strb	r2, [r4, #14]
1000deae:	0a12      	lsrs	r2, r2, #8
1000deb0:	73e2      	strb	r2, [r4, #15]
1000deb2:	881b      	ldrh	r3, [r3, #0]
1000deb4:	7423      	strb	r3, [r4, #16]
1000deb6:	0a1b      	lsrs	r3, r3, #8
1000deb8:	7463      	strb	r3, [r4, #17]
1000deba:	e016      	b.n	1000deea <gapc_get_dev_info_cfm.constprop.1+0x92>
1000debc:	4b11      	ldr	r3, [pc, #68]	; (1000df04 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000debe:	4912      	ldr	r1, [pc, #72]	; (1000df08 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000dec0:	33aa      	adds	r3, #170	; 0xaa
1000dec2:	881d      	ldrh	r5, [r3, #0]
1000dec4:	4811      	ldr	r0, [pc, #68]	; (1000df0c <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000dec6:	0a2b      	lsrs	r3, r5, #8
1000dec8:	72a5      	strb	r5, [r4, #10]
1000deca:	72e3      	strb	r3, [r4, #11]
1000decc:	1c2a      	adds	r2, r5, #0
1000dece:	4b10      	ldr	r3, [pc, #64]	; (1000df10 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000ded0:	350c      	adds	r5, #12
1000ded2:	4798      	blx	r3
1000ded4:	b2a9      	uxth	r1, r5
1000ded6:	e008      	b.n	1000deea <gapc_get_dev_info_cfm.constprop.1+0x92>
1000ded8:	4b0a      	ldr	r3, [pc, #40]	; (1000df04 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000deda:	210c      	movs	r1, #12
1000dedc:	33cc      	adds	r3, #204	; 0xcc
1000dede:	881b      	ldrh	r3, [r3, #0]
1000dee0:	72a3      	strb	r3, [r4, #10]
1000dee2:	0a1b      	lsrs	r3, r3, #8
1000dee4:	72e3      	strb	r3, [r4, #11]
1000dee6:	e000      	b.n	1000deea <gapc_get_dev_info_cfm.constprop.1+0x92>
1000dee8:	210a      	movs	r1, #10
1000deea:	1c0b      	adds	r3, r1, #0
1000deec:	3b08      	subs	r3, #8
1000deee:	71a3      	strb	r3, [r4, #6]
1000def0:	121b      	asrs	r3, r3, #8
1000def2:	71e3      	strb	r3, [r4, #7]
1000def4:	1c20      	adds	r0, r4, #0
1000def6:	4b07      	ldr	r3, [pc, #28]	; (1000df14 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000def8:	4798      	blx	r3
1000defa:	bd38      	pop	{r3, r4, r5, pc}
1000defc:	10015dec 	.word	0x10015dec
1000df00:	10015a7c 	.word	0x10015a7c
1000df04:	10015b0e 	.word	0x10015b0e
1000df08:	10015bba 	.word	0x10015bba
1000df0c:	10015df8 	.word	0x10015df8
1000df10:	1001149f 	.word	0x1001149f
1000df14:	1000dd49 	.word	0x1000dd49

1000df18 <check_ConnData_idx_role>:
1000df18:	4b0c      	ldr	r3, [pc, #48]	; (1000df4c <check_ConnData_idx_role+0x34>)
1000df1a:	b570      	push	{r4, r5, r6, lr}
1000df1c:	1c04      	adds	r4, r0, #0
1000df1e:	2008      	movs	r0, #8
1000df20:	429c      	cmp	r4, r3
1000df22:	d011      	beq.n	1000df48 <check_ConnData_idx_role+0x30>
1000df24:	2300      	movs	r3, #0
1000df26:	2212      	movs	r2, #18
1000df28:	435a      	muls	r2, r3
1000df2a:	4d09      	ldr	r5, [pc, #36]	; (1000df50 <check_ConnData_idx_role+0x38>)
1000df2c:	b2d8      	uxtb	r0, r3
1000df2e:	1956      	adds	r6, r2, r5
1000df30:	8976      	ldrh	r6, [r6, #10]
1000df32:	42a6      	cmp	r6, r4
1000df34:	d104      	bne.n	1000df40 <check_ConnData_idx_role+0x28>
1000df36:	2900      	cmp	r1, #0
1000df38:	d006      	beq.n	1000df48 <check_ConnData_idx_role+0x30>
1000df3a:	5d53      	ldrb	r3, [r2, r5]
1000df3c:	700b      	strb	r3, [r1, #0]
1000df3e:	e003      	b.n	1000df48 <check_ConnData_idx_role+0x30>
1000df40:	3301      	adds	r3, #1
1000df42:	2b08      	cmp	r3, #8
1000df44:	d1ef      	bne.n	1000df26 <check_ConnData_idx_role+0xe>
1000df46:	1c18      	adds	r0, r3, #0
1000df48:	bd70      	pop	{r4, r5, r6, pc}
1000df4a:	46c0      	nop			; (mov r8, r8)
1000df4c:	0000ffff 	.word	0x0000ffff
1000df50:	10015a7e 	.word	0x10015a7e

1000df54 <check_ConnData_emptyEntry>:
1000df54:	2300      	movs	r3, #0
1000df56:	2212      	movs	r2, #18
1000df58:	435a      	muls	r2, r3
1000df5a:	4906      	ldr	r1, [pc, #24]	; (1000df74 <check_ConnData_emptyEntry+0x20>)
1000df5c:	b2d8      	uxtb	r0, r3
1000df5e:	1852      	adds	r2, r2, r1
1000df60:	8951      	ldrh	r1, [r2, #10]
1000df62:	4a05      	ldr	r2, [pc, #20]	; (1000df78 <check_ConnData_emptyEntry+0x24>)
1000df64:	4291      	cmp	r1, r2
1000df66:	d003      	beq.n	1000df70 <check_ConnData_emptyEntry+0x1c>
1000df68:	3301      	adds	r3, #1
1000df6a:	2b08      	cmp	r3, #8
1000df6c:	d1f3      	bne.n	1000df56 <check_ConnData_emptyEntry+0x2>
1000df6e:	1c18      	adds	r0, r3, #0
1000df70:	4770      	bx	lr
1000df72:	46c0      	nop			; (mov r8, r8)
1000df74:	10015a7e 	.word	0x10015a7e
1000df78:	0000ffff 	.word	0x0000ffff

1000df7c <gapc_cmp_evt>:
1000df7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000df7e:	780b      	ldrb	r3, [r1, #0]
1000df80:	1c05      	adds	r5, r0, #0
1000df82:	1e58      	subs	r0, r3, #1
1000df84:	784e      	ldrb	r6, [r1, #1]
1000df86:	280f      	cmp	r0, #15
1000df88:	d85a      	bhi.n	1000e040 <gapc_cmp_evt+0xc4>
1000df8a:	1c14      	adds	r4, r2, #0
1000df8c:	f001 fa04 	bl	1000f398 <__gnu_thumb1_case_uqi>
1000df90:	5858440a 	.word	0x5858440a
1000df94:	4b584444 	.word	0x4b584444
1000df98:	0825122d 	.word	0x0825122d
1000df9c:	3e395858 	.word	0x3e395858
1000dfa0:	203b      	movs	r0, #59	; 0x3b
1000dfa2:	e04e      	b.n	1000e042 <gapc_cmp_evt+0xc6>
1000dfa4:	203b      	movs	r0, #59	; 0x3b
1000dfa6:	2e00      	cmp	r6, #0
1000dfa8:	d04b      	beq.n	1000e042 <gapc_cmp_evt+0xc6>
1000dfaa:	0a2d      	lsrs	r5, r5, #8
1000dfac:	8015      	strh	r5, [r2, #0]
1000dfae:	7096      	strb	r6, [r2, #2]
1000dfb0:	3835      	subs	r0, #53	; 0x35
1000dfb2:	e046      	b.n	1000e042 <gapc_cmp_evt+0xc6>
1000dfb4:	466b      	mov	r3, sp
1000dfb6:	1ddf      	adds	r7, r3, #7
1000dfb8:	2301      	movs	r3, #1
1000dfba:	0a2d      	lsrs	r5, r5, #8
1000dfbc:	703b      	strb	r3, [r7, #0]
1000dfbe:	1c28      	adds	r0, r5, #0
1000dfc0:	1c39      	adds	r1, r7, #0
1000dfc2:	4b20      	ldr	r3, [pc, #128]	; (1000e044 <gapc_cmp_evt+0xc8>)
1000dfc4:	4798      	blx	r3
1000dfc6:	2807      	cmp	r0, #7
1000dfc8:	d803      	bhi.n	1000dfd2 <gapc_cmp_evt+0x56>
1000dfca:	783b      	ldrb	r3, [r7, #0]
1000dfcc:	203b      	movs	r0, #59	; 0x3b
1000dfce:	2b00      	cmp	r3, #0
1000dfd0:	d037      	beq.n	1000e042 <gapc_cmp_evt+0xc6>
1000dfd2:	8065      	strh	r5, [r4, #2]
1000dfd4:	7126      	strb	r6, [r4, #4]
1000dfd6:	2009      	movs	r0, #9
1000dfd8:	e033      	b.n	1000e042 <gapc_cmp_evt+0xc6>
1000dfda:	203b      	movs	r0, #59	; 0x3b
1000dfdc:	2e00      	cmp	r6, #0
1000dfde:	d030      	beq.n	1000e042 <gapc_cmp_evt+0xc6>
1000dfe0:	0a2d      	lsrs	r5, r5, #8
1000dfe2:	8015      	strh	r5, [r2, #0]
1000dfe4:	7096      	strb	r6, [r2, #2]
1000dfe6:	382d      	subs	r0, #45	; 0x2d
1000dfe8:	e02b      	b.n	1000e042 <gapc_cmp_evt+0xc6>
1000dfea:	203b      	movs	r0, #59	; 0x3b
1000dfec:	2e00      	cmp	r6, #0
1000dfee:	d028      	beq.n	1000e042 <gapc_cmp_evt+0xc6>
1000dff0:	2300      	movs	r3, #0
1000dff2:	0a2d      	lsrs	r5, r5, #8
1000dff4:	8015      	strh	r5, [r2, #0]
1000dff6:	7096      	strb	r6, [r2, #2]
1000dff8:	8093      	strh	r3, [r2, #4]
1000dffa:	80d3      	strh	r3, [r2, #6]
1000dffc:	8113      	strh	r3, [r2, #8]
1000dffe:	3834      	subs	r0, #52	; 0x34
1000e000:	e01f      	b.n	1000e042 <gapc_cmp_evt+0xc6>
1000e002:	203b      	movs	r0, #59	; 0x3b
1000e004:	2e00      	cmp	r6, #0
1000e006:	d01c      	beq.n	1000e042 <gapc_cmp_evt+0xc6>
1000e008:	7216      	strb	r6, [r2, #8]
1000e00a:	e003      	b.n	1000e014 <gapc_cmp_evt+0x98>
1000e00c:	203b      	movs	r0, #59	; 0x3b
1000e00e:	2e00      	cmp	r6, #0
1000e010:	d017      	beq.n	1000e042 <gapc_cmp_evt+0xc6>
1000e012:	7116      	strb	r6, [r2, #4]
1000e014:	3812      	subs	r0, #18
1000e016:	e014      	b.n	1000e042 <gapc_cmp_evt+0xc6>
1000e018:	203b      	movs	r0, #59	; 0x3b
1000e01a:	2e00      	cmp	r6, #0
1000e01c:	d011      	beq.n	1000e042 <gapc_cmp_evt+0xc6>
1000e01e:	7093      	strb	r3, [r2, #2]
1000e020:	70d6      	strb	r6, [r2, #3]
1000e022:	382a      	subs	r0, #42	; 0x2a
1000e024:	e00d      	b.n	1000e042 <gapc_cmp_evt+0xc6>
1000e026:	203b      	movs	r0, #59	; 0x3b
1000e028:	2e00      	cmp	r6, #0
1000e02a:	d00a      	beq.n	1000e042 <gapc_cmp_evt+0xc6>
1000e02c:	0a2d      	lsrs	r5, r5, #8
1000e02e:	7016      	strb	r6, [r2, #0]
1000e030:	8055      	strh	r5, [r2, #2]
1000e032:	1d10      	adds	r0, r2, #4
1000e034:	2100      	movs	r1, #0
1000e036:	2205      	movs	r2, #5
1000e038:	4b03      	ldr	r3, [pc, #12]	; (1000e048 <gapc_cmp_evt+0xcc>)
1000e03a:	4798      	blx	r3
1000e03c:	2012      	movs	r0, #18
1000e03e:	e000      	b.n	1000e042 <gapc_cmp_evt+0xc6>
1000e040:	2000      	movs	r0, #0
1000e042:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e044:	1000df19 	.word	0x1000df19
1000e048:	100114b1 	.word	0x100114b1

1000e04c <gapc_connection_cfm_handler>:
1000e04c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e04e:	b085      	sub	sp, #20
1000e050:	1c1d      	adds	r5, r3, #0
1000e052:	ab0a      	add	r3, sp, #40	; 0x28
1000e054:	781b      	ldrb	r3, [r3, #0]
1000e056:	9201      	str	r2, [sp, #4]
1000e058:	9302      	str	r3, [sp, #8]
1000e05a:	ab0b      	add	r3, sp, #44	; 0x2c
1000e05c:	781b      	ldrb	r3, [r3, #0]
1000e05e:	1c07      	adds	r7, r0, #0
1000e060:	9303      	str	r3, [sp, #12]
1000e062:	ab0c      	add	r3, sp, #48	; 0x30
1000e064:	881a      	ldrh	r2, [r3, #0]
1000e066:	2302      	movs	r3, #2
1000e068:	1c0e      	adds	r6, r1, #0
1000e06a:	4c23      	ldr	r4, [pc, #140]	; (1000e0f8 <gapc_connection_cfm_handler+0xac>)
1000e06c:	1c39      	adds	r1, r7, #0
1000e06e:	7023      	strb	r3, [r4, #0]
1000e070:	330c      	adds	r3, #12
1000e072:	7063      	strb	r3, [r4, #1]
1000e074:	70a3      	strb	r3, [r4, #2]
1000e076:	4b21      	ldr	r3, [pc, #132]	; (1000e0fc <gapc_connection_cfm_handler+0xb0>)
1000e078:	70e2      	strb	r2, [r4, #3]
1000e07a:	881a      	ldrh	r2, [r3, #0]
1000e07c:	881b      	ldrh	r3, [r3, #0]
1000e07e:	7122      	strb	r2, [r4, #4]
1000e080:	0a1b      	lsrs	r3, r3, #8
1000e082:	4f1f      	ldr	r7, [pc, #124]	; (1000e100 <gapc_connection_cfm_handler+0xb4>)
1000e084:	2210      	movs	r2, #16
1000e086:	481f      	ldr	r0, [pc, #124]	; (1000e104 <gapc_connection_cfm_handler+0xb8>)
1000e088:	7163      	strb	r3, [r4, #5]
1000e08a:	47b8      	blx	r7
1000e08c:	0a33      	lsrs	r3, r6, #8
1000e08e:	7626      	strb	r6, [r4, #24]
1000e090:	7663      	strb	r3, [r4, #25]
1000e092:	9901      	ldr	r1, [sp, #4]
1000e094:	0c33      	lsrs	r3, r6, #16
1000e096:	2210      	movs	r2, #16
1000e098:	0e36      	lsrs	r6, r6, #24
1000e09a:	481b      	ldr	r0, [pc, #108]	; (1000e108 <gapc_connection_cfm_handler+0xbc>)
1000e09c:	76a3      	strb	r3, [r4, #26]
1000e09e:	76e6      	strb	r6, [r4, #27]
1000e0a0:	47b8      	blx	r7
1000e0a2:	1c23      	adds	r3, r4, #0
1000e0a4:	332c      	adds	r3, #44	; 0x2c
1000e0a6:	701d      	strb	r5, [r3, #0]
1000e0a8:	1c23      	adds	r3, r4, #0
1000e0aa:	0a2a      	lsrs	r2, r5, #8
1000e0ac:	332d      	adds	r3, #45	; 0x2d
1000e0ae:	701a      	strb	r2, [r3, #0]
1000e0b0:	1c23      	adds	r3, r4, #0
1000e0b2:	0c2a      	lsrs	r2, r5, #16
1000e0b4:	332e      	adds	r3, #46	; 0x2e
1000e0b6:	701a      	strb	r2, [r3, #0]
1000e0b8:	1c23      	adds	r3, r4, #0
1000e0ba:	0e2d      	lsrs	r5, r5, #24
1000e0bc:	332f      	adds	r3, #47	; 0x2f
1000e0be:	466a      	mov	r2, sp
1000e0c0:	701d      	strb	r5, [r3, #0]
1000e0c2:	1c23      	adds	r3, r4, #0
1000e0c4:	7a12      	ldrb	r2, [r2, #8]
1000e0c6:	3330      	adds	r3, #48	; 0x30
1000e0c8:	701a      	strb	r2, [r3, #0]
1000e0ca:	1c23      	adds	r3, r4, #0
1000e0cc:	2500      	movs	r5, #0
1000e0ce:	3331      	adds	r3, #49	; 0x31
1000e0d0:	466a      	mov	r2, sp
1000e0d2:	701d      	strb	r5, [r3, #0]
1000e0d4:	1c23      	adds	r3, r4, #0
1000e0d6:	7b12      	ldrb	r2, [r2, #12]
1000e0d8:	3332      	adds	r3, #50	; 0x32
1000e0da:	701a      	strb	r2, [r3, #0]
1000e0dc:	1c23      	adds	r3, r4, #0
1000e0de:	3333      	adds	r3, #51	; 0x33
1000e0e0:	701d      	strb	r5, [r3, #0]
1000e0e2:	232c      	movs	r3, #44	; 0x2c
1000e0e4:	1c20      	adds	r0, r4, #0
1000e0e6:	71a3      	strb	r3, [r4, #6]
1000e0e8:	2134      	movs	r1, #52	; 0x34
1000e0ea:	4b08      	ldr	r3, [pc, #32]	; (1000e10c <gapc_connection_cfm_handler+0xc0>)
1000e0ec:	71e5      	strb	r5, [r4, #7]
1000e0ee:	4798      	blx	r3
1000e0f0:	1c28      	adds	r0, r5, #0
1000e0f2:	b005      	add	sp, #20
1000e0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e0f6:	46c0      	nop			; (mov r8, r8)
1000e0f8:	10015dec 	.word	0x10015dec
1000e0fc:	10015a7c 	.word	0x10015a7c
1000e100:	1001149f 	.word	0x1001149f
1000e104:	10015df4 	.word	0x10015df4
1000e108:	10015e08 	.word	0x10015e08
1000e10c:	1000dd49 	.word	0x1000dd49

1000e110 <gapc_con_req_ind>:
1000e110:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e112:	7845      	ldrb	r5, [r0, #1]
1000e114:	7803      	ldrb	r3, [r0, #0]
1000e116:	4c30      	ldr	r4, [pc, #192]	; (1000e1d8 <gapc_con_req_ind+0xc8>)
1000e118:	022d      	lsls	r5, r5, #8
1000e11a:	431d      	orrs	r5, r3
1000e11c:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000e11e:	78c3      	ldrb	r3, [r0, #3]
1000e120:	7882      	ldrb	r2, [r0, #2]
1000e122:	b08b      	sub	sp, #44	; 0x2c
1000e124:	021b      	lsls	r3, r3, #8
1000e126:	431a      	orrs	r2, r3
1000e128:	466b      	mov	r3, sp
1000e12a:	9205      	str	r2, [sp, #20]
1000e12c:	8a9b      	ldrh	r3, [r3, #20]
1000e12e:	2120      	movs	r1, #32
1000e130:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000e132:	7943      	ldrb	r3, [r0, #5]
1000e134:	7902      	ldrb	r2, [r0, #4]
1000e136:	021b      	lsls	r3, r3, #8
1000e138:	431a      	orrs	r2, r3
1000e13a:	466b      	mov	r3, sp
1000e13c:	9206      	str	r2, [sp, #24]
1000e13e:	8b1b      	ldrh	r3, [r3, #24]
1000e140:	1c06      	adds	r6, r0, #0
1000e142:	8623      	strh	r3, [r4, #48]	; 0x30
1000e144:	79c3      	ldrb	r3, [r0, #7]
1000e146:	7982      	ldrb	r2, [r0, #6]
1000e148:	021b      	lsls	r3, r3, #8
1000e14a:	431a      	orrs	r2, r3
1000e14c:	466b      	mov	r3, sp
1000e14e:	9207      	str	r2, [sp, #28]
1000e150:	466a      	mov	r2, sp
1000e152:	8b9b      	ldrh	r3, [r3, #28]
1000e154:	1852      	adds	r2, r2, r1
1000e156:	8663      	strh	r3, [r4, #50]	; 0x32
1000e158:	7a43      	ldrb	r3, [r0, #9]
1000e15a:	1c01      	adds	r1, r0, #0
1000e15c:	9308      	str	r3, [sp, #32]
1000e15e:	1c23      	adds	r3, r4, #0
1000e160:	7812      	ldrb	r2, [r2, #0]
1000e162:	3377      	adds	r3, #119	; 0x77
1000e164:	3478      	adds	r4, #120	; 0x78
1000e166:	701a      	strb	r2, [r3, #0]
1000e168:	310a      	adds	r1, #10
1000e16a:	2206      	movs	r2, #6
1000e16c:	4b1b      	ldr	r3, [pc, #108]	; (1000e1dc <gapc_con_req_ind+0xcc>)
1000e16e:	1c20      	adds	r0, r4, #0
1000e170:	4798      	blx	r3
1000e172:	7c33      	ldrb	r3, [r6, #16]
1000e174:	9309      	str	r3, [sp, #36]	; 0x24
1000e176:	4b1a      	ldr	r3, [pc, #104]	; (1000e1e0 <gapc_con_req_ind+0xd0>)
1000e178:	4798      	blx	r3
1000e17a:	4e1a      	ldr	r6, [pc, #104]	; (1000e1e4 <gapc_con_req_ind+0xd4>)
1000e17c:	1e07      	subs	r7, r0, #0
1000e17e:	2f07      	cmp	r7, #7
1000e180:	d81b      	bhi.n	1000e1ba <gapc_con_req_ind+0xaa>
1000e182:	2312      	movs	r3, #18
1000e184:	4343      	muls	r3, r0
1000e186:	18f0      	adds	r0, r6, r3
1000e188:	8145      	strh	r5, [r0, #10]
1000e18a:	4669      	mov	r1, sp
1000e18c:	2524      	movs	r5, #36	; 0x24
1000e18e:	1949      	adds	r1, r1, r5
1000e190:	7809      	ldrb	r1, [r1, #0]
1000e192:	2206      	movs	r2, #6
1000e194:	54f1      	strb	r1, [r6, r3]
1000e196:	2120      	movs	r1, #32
1000e198:	466b      	mov	r3, sp
1000e19a:	185b      	adds	r3, r3, r1
1000e19c:	781b      	ldrb	r3, [r3, #0]
1000e19e:	1c21      	adds	r1, r4, #0
1000e1a0:	7043      	strb	r3, [r0, #1]
1000e1a2:	466b      	mov	r3, sp
1000e1a4:	8a9b      	ldrh	r3, [r3, #20]
1000e1a6:	3002      	adds	r0, #2
1000e1a8:	8143      	strh	r3, [r0, #10]
1000e1aa:	466b      	mov	r3, sp
1000e1ac:	8b1b      	ldrh	r3, [r3, #24]
1000e1ae:	8183      	strh	r3, [r0, #12]
1000e1b0:	466b      	mov	r3, sp
1000e1b2:	8b9b      	ldrh	r3, [r3, #28]
1000e1b4:	81c3      	strh	r3, [r0, #14]
1000e1b6:	4b09      	ldr	r3, [pc, #36]	; (1000e1dc <gapc_con_req_ind+0xcc>)
1000e1b8:	4798      	blx	r3
1000e1ba:	2112      	movs	r1, #18
1000e1bc:	2300      	movs	r3, #0
1000e1be:	434f      	muls	r7, r1
1000e1c0:	9300      	str	r3, [sp, #0]
1000e1c2:	9301      	str	r3, [sp, #4]
1000e1c4:	19f6      	adds	r6, r6, r7
1000e1c6:	8971      	ldrh	r1, [r6, #10]
1000e1c8:	4a07      	ldr	r2, [pc, #28]	; (1000e1e8 <gapc_con_req_ind+0xd8>)
1000e1ca:	9102      	str	r1, [sp, #8]
1000e1cc:	1c10      	adds	r0, r2, #0
1000e1ce:	1c19      	adds	r1, r3, #0
1000e1d0:	4c06      	ldr	r4, [pc, #24]	; (1000e1ec <gapc_con_req_ind+0xdc>)
1000e1d2:	47a0      	blx	r4
1000e1d4:	b00b      	add	sp, #44	; 0x2c
1000e1d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e1d8:	10015b0e 	.word	0x10015b0e
1000e1dc:	1001149f 	.word	0x1001149f
1000e1e0:	1000df55 	.word	0x1000df55
1000e1e4:	10015a7e 	.word	0x10015a7e
1000e1e8:	10014d5c 	.word	0x10014d5c
1000e1ec:	1000e04d 	.word	0x1000e04d

1000e1f0 <gapc_disconnect_cmd_handler>:
1000e1f0:	2204      	movs	r2, #4
1000e1f2:	b510      	push	{r4, lr}
1000e1f4:	4b0c      	ldr	r3, [pc, #48]	; (1000e228 <gapc_disconnect_cmd_handler+0x38>)
1000e1f6:	2400      	movs	r4, #0
1000e1f8:	701a      	strb	r2, [r3, #0]
1000e1fa:	320a      	adds	r2, #10
1000e1fc:	705a      	strb	r2, [r3, #1]
1000e1fe:	709a      	strb	r2, [r3, #2]
1000e200:	4a0a      	ldr	r2, [pc, #40]	; (1000e22c <gapc_disconnect_cmd_handler+0x3c>)
1000e202:	70d9      	strb	r1, [r3, #3]
1000e204:	8811      	ldrh	r1, [r2, #0]
1000e206:	8812      	ldrh	r2, [r2, #0]
1000e208:	7119      	strb	r1, [r3, #4]
1000e20a:	0a12      	lsrs	r2, r2, #8
1000e20c:	715a      	strb	r2, [r3, #5]
1000e20e:	2201      	movs	r2, #1
1000e210:	721a      	strb	r2, [r3, #8]
1000e212:	1892      	adds	r2, r2, r2
1000e214:	7258      	strb	r0, [r3, #9]
1000e216:	719a      	strb	r2, [r3, #6]
1000e218:	71dc      	strb	r4, [r3, #7]
1000e21a:	1c18      	adds	r0, r3, #0
1000e21c:	210a      	movs	r1, #10
1000e21e:	4b04      	ldr	r3, [pc, #16]	; (1000e230 <gapc_disconnect_cmd_handler+0x40>)
1000e220:	4798      	blx	r3
1000e222:	1c20      	adds	r0, r4, #0
1000e224:	bd10      	pop	{r4, pc}
1000e226:	46c0      	nop			; (mov r8, r8)
1000e228:	10015dec 	.word	0x10015dec
1000e22c:	10015a7c 	.word	0x10015a7c
1000e230:	1000dd49 	.word	0x1000dd49

1000e234 <gapc_disconnect_ind>:
1000e234:	1c02      	adds	r2, r0, #0
1000e236:	b508      	push	{r3, lr}
1000e238:	7843      	ldrb	r3, [r0, #1]
1000e23a:	7800      	ldrb	r0, [r0, #0]
1000e23c:	021b      	lsls	r3, r3, #8
1000e23e:	4318      	orrs	r0, r3
1000e240:	8008      	strh	r0, [r1, #0]
1000e242:	7893      	ldrb	r3, [r2, #2]
1000e244:	708b      	strb	r3, [r1, #2]
1000e246:	2100      	movs	r1, #0
1000e248:	4b05      	ldr	r3, [pc, #20]	; (1000e260 <gapc_disconnect_ind+0x2c>)
1000e24a:	4798      	blx	r3
1000e24c:	2807      	cmp	r0, #7
1000e24e:	d806      	bhi.n	1000e25e <gapc_disconnect_ind+0x2a>
1000e250:	2312      	movs	r3, #18
1000e252:	4358      	muls	r0, r3
1000e254:	4b03      	ldr	r3, [pc, #12]	; (1000e264 <gapc_disconnect_ind+0x30>)
1000e256:	1818      	adds	r0, r3, r0
1000e258:	2301      	movs	r3, #1
1000e25a:	425b      	negs	r3, r3
1000e25c:	8143      	strh	r3, [r0, #10]
1000e25e:	bd08      	pop	{r3, pc}
1000e260:	1000df19 	.word	0x1000df19
1000e264:	10015a7e 	.word	0x10015a7e

1000e268 <gapc_bond_cmd_handler>:
1000e268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e26a:	9300      	str	r3, [sp, #0]
1000e26c:	2312      	movs	r3, #18
1000e26e:	1c04      	adds	r4, r0, #0
1000e270:	a808      	add	r0, sp, #32
1000e272:	7807      	ldrb	r7, [r0, #0]
1000e274:	a809      	add	r0, sp, #36	; 0x24
1000e276:	7806      	ldrb	r6, [r0, #0]
1000e278:	a80a      	add	r0, sp, #40	; 0x28
1000e27a:	7805      	ldrb	r5, [r0, #0]
1000e27c:	a80b      	add	r0, sp, #44	; 0x2c
1000e27e:	7800      	ldrb	r0, [r0, #0]
1000e280:	9001      	str	r0, [sp, #4]
1000e282:	4810      	ldr	r0, [pc, #64]	; (1000e2c4 <gapc_bond_cmd_handler+0x5c>)
1000e284:	7003      	strb	r3, [r0, #0]
1000e286:	230e      	movs	r3, #14
1000e288:	70c4      	strb	r4, [r0, #3]
1000e28a:	4c0f      	ldr	r4, [pc, #60]	; (1000e2c8 <gapc_bond_cmd_handler+0x60>)
1000e28c:	7043      	strb	r3, [r0, #1]
1000e28e:	7083      	strb	r3, [r0, #2]
1000e290:	8823      	ldrh	r3, [r4, #0]
1000e292:	8824      	ldrh	r4, [r4, #0]
1000e294:	7103      	strb	r3, [r0, #4]
1000e296:	466b      	mov	r3, sp
1000e298:	781b      	ldrb	r3, [r3, #0]
1000e29a:	0a24      	lsrs	r4, r4, #8
1000e29c:	72c3      	strb	r3, [r0, #11]
1000e29e:	466b      	mov	r3, sp
1000e2a0:	791b      	ldrb	r3, [r3, #4]
1000e2a2:	7144      	strb	r4, [r0, #5]
1000e2a4:	73c3      	strb	r3, [r0, #15]
1000e2a6:	2308      	movs	r3, #8
1000e2a8:	7183      	strb	r3, [r0, #6]
1000e2aa:	2300      	movs	r3, #0
1000e2ac:	240a      	movs	r4, #10
1000e2ae:	7241      	strb	r1, [r0, #9]
1000e2b0:	71c3      	strb	r3, [r0, #7]
1000e2b2:	2110      	movs	r1, #16
1000e2b4:	4b05      	ldr	r3, [pc, #20]	; (1000e2cc <gapc_bond_cmd_handler+0x64>)
1000e2b6:	7307      	strb	r7, [r0, #12]
1000e2b8:	7346      	strb	r6, [r0, #13]
1000e2ba:	7385      	strb	r5, [r0, #14]
1000e2bc:	7204      	strb	r4, [r0, #8]
1000e2be:	7282      	strb	r2, [r0, #10]
1000e2c0:	4798      	blx	r3
1000e2c2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e2c4:	10015dec 	.word	0x10015dec
1000e2c8:	10015a7c 	.word	0x10015a7c
1000e2cc:	1000dd49 	.word	0x1000dd49

1000e2d0 <gapc_bond_ind>:
1000e2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e2d2:	780e      	ldrb	r6, [r1, #0]
1000e2d4:	1c03      	adds	r3, r0, #0
1000e2d6:	1eb0      	subs	r0, r6, #2
1000e2d8:	2805      	cmp	r0, #5
1000e2da:	d85d      	bhi.n	1000e398 <gapc_bond_ind+0xc8>
1000e2dc:	1c15      	adds	r5, r2, #0
1000e2de:	1c0c      	adds	r4, r1, #0
1000e2e0:	f001 f85a 	bl	1000f398 <__gnu_thumb1_case_uqi>
1000e2e4:	2f5a030d 	.word	0x2f5a030d
1000e2e8:	4740      	.short	0x4740
1000e2ea:	2009      	movs	r0, #9
1000e2ec:	2a00      	cmp	r2, #0
1000e2ee:	d054      	beq.n	1000e39a <gapc_bond_ind+0xca>
1000e2f0:	0a1b      	lsrs	r3, r3, #8
1000e2f2:	8053      	strh	r3, [r2, #2]
1000e2f4:	788b      	ldrb	r3, [r1, #2]
1000e2f6:	4829      	ldr	r0, [pc, #164]	; (1000e39c <gapc_bond_ind+0xcc>)
1000e2f8:	7113      	strb	r3, [r2, #4]
1000e2fa:	2100      	movs	r1, #0
1000e2fc:	e01c      	b.n	1000e338 <gapc_bond_ind+0x68>
1000e2fe:	2009      	movs	r0, #9
1000e300:	2a00      	cmp	r2, #0
1000e302:	d04a      	beq.n	1000e39a <gapc_bond_ind+0xca>
1000e304:	4c25      	ldr	r4, [pc, #148]	; (1000e39c <gapc_bond_ind+0xcc>)
1000e306:	0a1b      	lsrs	r3, r3, #8
1000e308:	8053      	strh	r3, [r2, #2]
1000e30a:	788b      	ldrb	r3, [r1, #2]
1000e30c:	2700      	movs	r7, #0
1000e30e:	1c10      	adds	r0, r2, #0
1000e310:	1c21      	adds	r1, r4, #0
1000e312:	7013      	strb	r3, [r2, #0]
1000e314:	4e22      	ldr	r6, [pc, #136]	; (1000e3a0 <gapc_bond_ind+0xd0>)
1000e316:	7117      	strb	r7, [r2, #4]
1000e318:	312e      	adds	r1, #46	; 0x2e
1000e31a:	2217      	movs	r2, #23
1000e31c:	3032      	adds	r0, #50	; 0x32
1000e31e:	47b0      	blx	r6
1000e320:	1c28      	adds	r0, r5, #0
1000e322:	1c21      	adds	r1, r4, #0
1000e324:	2210      	movs	r2, #16
1000e326:	311e      	adds	r1, #30
1000e328:	3022      	adds	r0, #34	; 0x22
1000e32a:	47b0      	blx	r6
1000e32c:	1ca1      	adds	r1, r4, #2
1000e32e:	1da8      	adds	r0, r5, #6
1000e330:	221c      	movs	r2, #28
1000e332:	47b0      	blx	r6
1000e334:	1c20      	adds	r0, r4, #0
1000e336:	1c39      	adds	r1, r7, #0
1000e338:	2246      	movs	r2, #70	; 0x46
1000e33a:	4b1a      	ldr	r3, [pc, #104]	; (1000e3a4 <gapc_bond_ind+0xd4>)
1000e33c:	4798      	blx	r3
1000e33e:	2009      	movs	r0, #9
1000e340:	e02b      	b.n	1000e39a <gapc_bond_ind+0xca>
1000e342:	4d16      	ldr	r5, [pc, #88]	; (1000e39c <gapc_bond_ind+0xcc>)
1000e344:	3102      	adds	r1, #2
1000e346:	1c28      	adds	r0, r5, #0
1000e348:	2210      	movs	r2, #16
1000e34a:	4e15      	ldr	r6, [pc, #84]	; (1000e3a0 <gapc_bond_ind+0xd0>)
1000e34c:	302e      	adds	r0, #46	; 0x2e
1000e34e:	47b0      	blx	r6
1000e350:	1c28      	adds	r0, r5, #0
1000e352:	1c21      	adds	r1, r4, #0
1000e354:	303f      	adds	r0, #63	; 0x3f
1000e356:	3112      	adds	r1, #18
1000e358:	2206      	movs	r2, #6
1000e35a:	47b0      	blx	r6
1000e35c:	7e23      	ldrb	r3, [r4, #24]
1000e35e:	353e      	adds	r5, #62	; 0x3e
1000e360:	702b      	strb	r3, [r5, #0]
1000e362:	e019      	b.n	1000e398 <gapc_bond_ind+0xc8>
1000e364:	480d      	ldr	r0, [pc, #52]	; (1000e39c <gapc_bond_ind+0xcc>)
1000e366:	3102      	adds	r1, #2
1000e368:	2210      	movs	r2, #16
1000e36a:	4b0d      	ldr	r3, [pc, #52]	; (1000e3a0 <gapc_bond_ind+0xd0>)
1000e36c:	301e      	adds	r0, #30
1000e36e:	4798      	blx	r3
1000e370:	e012      	b.n	1000e398 <gapc_bond_ind+0xc8>
1000e372:	4d0a      	ldr	r5, [pc, #40]	; (1000e39c <gapc_bond_ind+0xcc>)
1000e374:	3102      	adds	r1, #2
1000e376:	2210      	movs	r2, #16
1000e378:	4e09      	ldr	r6, [pc, #36]	; (1000e3a0 <gapc_bond_ind+0xd0>)
1000e37a:	1ca8      	adds	r0, r5, #2
1000e37c:	47b0      	blx	r6
1000e37e:	1c28      	adds	r0, r5, #0
1000e380:	1c21      	adds	r1, r4, #0
1000e382:	7ce3      	ldrb	r3, [r4, #19]
1000e384:	7ca2      	ldrb	r2, [r4, #18]
1000e386:	021b      	lsls	r3, r3, #8
1000e388:	4313      	orrs	r3, r2
1000e38a:	3014      	adds	r0, #20
1000e38c:	3114      	adds	r1, #20
1000e38e:	2208      	movs	r2, #8
1000e390:	826b      	strh	r3, [r5, #18]
1000e392:	47b0      	blx	r6
1000e394:	7f23      	ldrb	r3, [r4, #28]
1000e396:	772b      	strb	r3, [r5, #28]
1000e398:	2000      	movs	r0, #0
1000e39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e39c:	10014d8c 	.word	0x10014d8c
1000e3a0:	1001149f 	.word	0x1001149f
1000e3a4:	100114b1 	.word	0x100114b1

1000e3a8 <gapc_bond_req_ind>:
1000e3a8:	b570      	push	{r4, r5, r6, lr}
1000e3aa:	780c      	ldrb	r4, [r1, #0]
1000e3ac:	1c03      	adds	r3, r0, #0
1000e3ae:	7849      	ldrb	r1, [r1, #1]
1000e3b0:	2c07      	cmp	r4, #7
1000e3b2:	d85c      	bhi.n	1000e46e <gapc_bond_req_ind+0xc6>
1000e3b4:	1c20      	adds	r0, r4, #0
1000e3b6:	f000 ffef 	bl	1000f398 <__gnu_thumb1_case_uqi>
1000e3ba:	5a04      	.short	0x5a04
1000e3bc:	5a0b5a5a 	.word	0x5a0b5a5a
1000e3c0:	1f1f      	.short	0x1f1f
1000e3c2:	200a      	movs	r0, #10
1000e3c4:	2a00      	cmp	r2, #0
1000e3c6:	d053      	beq.n	1000e470 <gapc_bond_req_ind+0xc8>
1000e3c8:	0a1b      	lsrs	r3, r3, #8
1000e3ca:	8013      	strh	r3, [r2, #0]
1000e3cc:	7091      	strb	r1, [r2, #2]
1000e3ce:	e04f      	b.n	1000e470 <gapc_bond_req_ind+0xc8>
1000e3d0:	2a00      	cmp	r2, #0
1000e3d2:	d00b      	beq.n	1000e3ec <gapc_bond_req_ind+0x44>
1000e3d4:	0a1b      	lsrs	r3, r3, #8
1000e3d6:	8013      	strh	r3, [r2, #0]
1000e3d8:	2900      	cmp	r1, #0
1000e3da:	d102      	bne.n	1000e3e2 <gapc_bond_req_ind+0x3a>
1000e3dc:	2301      	movs	r3, #1
1000e3de:	7093      	strb	r3, [r2, #2]
1000e3e0:	e004      	b.n	1000e3ec <gapc_bond_req_ind+0x44>
1000e3e2:	2300      	movs	r3, #0
1000e3e4:	7093      	strb	r3, [r2, #2]
1000e3e6:	2902      	cmp	r1, #2
1000e3e8:	d102      	bne.n	1000e3f0 <gapc_bond_req_ind+0x48>
1000e3ea:	70d3      	strb	r3, [r2, #3]
1000e3ec:	200c      	movs	r0, #12
1000e3ee:	e03f      	b.n	1000e470 <gapc_bond_req_ind+0xc8>
1000e3f0:	2901      	cmp	r1, #1
1000e3f2:	d1fb      	bne.n	1000e3ec <gapc_bond_req_ind+0x44>
1000e3f4:	70d1      	strb	r1, [r2, #3]
1000e3f6:	e7f9      	b.n	1000e3ec <gapc_bond_req_ind+0x44>
1000e3f8:	2214      	movs	r2, #20
1000e3fa:	481e      	ldr	r0, [pc, #120]	; (1000e474 <gapc_bond_req_ind+0xcc>)
1000e3fc:	0a1b      	lsrs	r3, r3, #8
1000e3fe:	70c3      	strb	r3, [r0, #3]
1000e400:	4b1d      	ldr	r3, [pc, #116]	; (1000e478 <gapc_bond_req_ind+0xd0>)
1000e402:	7002      	strb	r2, [r0, #0]
1000e404:	3a06      	subs	r2, #6
1000e406:	7042      	strb	r2, [r0, #1]
1000e408:	7082      	strb	r2, [r0, #2]
1000e40a:	881a      	ldrh	r2, [r3, #0]
1000e40c:	881b      	ldrh	r3, [r3, #0]
1000e40e:	4e1b      	ldr	r6, [pc, #108]	; (1000e47c <gapc_bond_req_ind+0xd4>)
1000e410:	0a1b      	lsrs	r3, r3, #8
1000e412:	7143      	strb	r3, [r0, #5]
1000e414:	2301      	movs	r3, #1
1000e416:	7102      	strb	r2, [r0, #4]
1000e418:	7204      	strb	r4, [r0, #8]
1000e41a:	7243      	strb	r3, [r0, #9]
1000e41c:	1c05      	adds	r5, r0, #0
1000e41e:	1c31      	adds	r1, r6, #0
1000e420:	300a      	adds	r0, #10
1000e422:	2c07      	cmp	r4, #7
1000e424:	d116      	bne.n	1000e454 <gapc_bond_req_ind+0xac>
1000e426:	317e      	adds	r1, #126	; 0x7e
1000e428:	2210      	movs	r2, #16
1000e42a:	4c15      	ldr	r4, [pc, #84]	; (1000e480 <gapc_bond_req_ind+0xd8>)
1000e42c:	47a0      	blx	r4
1000e42e:	1c33      	adds	r3, r6, #0
1000e430:	1c31      	adds	r1, r6, #0
1000e432:	1c28      	adds	r0, r5, #0
1000e434:	338e      	adds	r3, #142	; 0x8e
1000e436:	881b      	ldrh	r3, [r3, #0]
1000e438:	3190      	adds	r1, #144	; 0x90
1000e43a:	76ab      	strb	r3, [r5, #26]
1000e43c:	2208      	movs	r2, #8
1000e43e:	0a1b      	lsrs	r3, r3, #8
1000e440:	301c      	adds	r0, #28
1000e442:	76eb      	strb	r3, [r5, #27]
1000e444:	47a0      	blx	r4
1000e446:	1c31      	adds	r1, r6, #0
1000e448:	3198      	adds	r1, #152	; 0x98
1000e44a:	780a      	ldrb	r2, [r1, #0]
1000e44c:	1d6b      	adds	r3, r5, #5
1000e44e:	77da      	strb	r2, [r3, #31]
1000e450:	2125      	movs	r1, #37	; 0x25
1000e452:	e004      	b.n	1000e45e <gapc_bond_req_ind+0xb6>
1000e454:	319a      	adds	r1, #154	; 0x9a
1000e456:	2210      	movs	r2, #16
1000e458:	4b09      	ldr	r3, [pc, #36]	; (1000e480 <gapc_bond_req_ind+0xd8>)
1000e45a:	4798      	blx	r3
1000e45c:	211a      	movs	r1, #26
1000e45e:	1c0b      	adds	r3, r1, #0
1000e460:	2400      	movs	r4, #0
1000e462:	3b08      	subs	r3, #8
1000e464:	71ab      	strb	r3, [r5, #6]
1000e466:	1c28      	adds	r0, r5, #0
1000e468:	4b06      	ldr	r3, [pc, #24]	; (1000e484 <gapc_bond_req_ind+0xdc>)
1000e46a:	71ec      	strb	r4, [r5, #7]
1000e46c:	4798      	blx	r3
1000e46e:	2000      	movs	r0, #0
1000e470:	bd70      	pop	{r4, r5, r6, pc}
1000e472:	46c0      	nop			; (mov r8, r8)
1000e474:	10015dec 	.word	0x10015dec
1000e478:	10015a7c 	.word	0x10015a7c
1000e47c:	10015b0e 	.word	0x10015b0e
1000e480:	1001149f 	.word	0x1001149f
1000e484:	1000dd49 	.word	0x1000dd49

1000e488 <gapc_bond_cfm_handler_pair_resp>:
1000e488:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e48a:	b085      	sub	sp, #20
1000e48c:	1c07      	adds	r7, r0, #0
1000e48e:	a80a      	add	r0, sp, #40	; 0x28
1000e490:	7806      	ldrb	r6, [r0, #0]
1000e492:	a80b      	add	r0, sp, #44	; 0x2c
1000e494:	7805      	ldrb	r5, [r0, #0]
1000e496:	a80c      	add	r0, sp, #48	; 0x30
1000e498:	7800      	ldrb	r0, [r0, #0]
1000e49a:	2414      	movs	r4, #20
1000e49c:	9002      	str	r0, [sp, #8]
1000e49e:	a80d      	add	r0, sp, #52	; 0x34
1000e4a0:	7800      	ldrb	r0, [r0, #0]
1000e4a2:	9301      	str	r3, [sp, #4]
1000e4a4:	9003      	str	r0, [sp, #12]
1000e4a6:	a80e      	add	r0, sp, #56	; 0x38
1000e4a8:	8800      	ldrh	r0, [r0, #0]
1000e4aa:	4684      	mov	ip, r0
1000e4ac:	4812      	ldr	r0, [pc, #72]	; (1000e4f8 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000e4ae:	7004      	strb	r4, [r0, #0]
1000e4b0:	3c06      	subs	r4, #6
1000e4b2:	7044      	strb	r4, [r0, #1]
1000e4b4:	7084      	strb	r4, [r0, #2]
1000e4b6:	4664      	mov	r4, ip
1000e4b8:	70c4      	strb	r4, [r0, #3]
1000e4ba:	4c10      	ldr	r4, [pc, #64]	; (1000e4fc <gapc_bond_cfm_handler_pair_resp+0x74>)
1000e4bc:	7247      	strb	r7, [r0, #9]
1000e4be:	8823      	ldrh	r3, [r4, #0]
1000e4c0:	8824      	ldrh	r4, [r4, #0]
1000e4c2:	7103      	strb	r3, [r0, #4]
1000e4c4:	466b      	mov	r3, sp
1000e4c6:	791b      	ldrb	r3, [r3, #4]
1000e4c8:	0a24      	lsrs	r4, r4, #8
1000e4ca:	7303      	strb	r3, [r0, #12]
1000e4cc:	466b      	mov	r3, sp
1000e4ce:	7a1b      	ldrb	r3, [r3, #8]
1000e4d0:	7144      	strb	r4, [r0, #5]
1000e4d2:	73c3      	strb	r3, [r0, #15]
1000e4d4:	466b      	mov	r3, sp
1000e4d6:	7b1b      	ldrb	r3, [r3, #12]
1000e4d8:	2401      	movs	r4, #1
1000e4da:	7403      	strb	r3, [r0, #16]
1000e4dc:	2309      	movs	r3, #9
1000e4de:	7183      	strb	r3, [r0, #6]
1000e4e0:	2300      	movs	r3, #0
1000e4e2:	7204      	strb	r4, [r0, #8]
1000e4e4:	7281      	strb	r1, [r0, #10]
1000e4e6:	72c2      	strb	r2, [r0, #11]
1000e4e8:	7346      	strb	r6, [r0, #13]
1000e4ea:	7385      	strb	r5, [r0, #14]
1000e4ec:	71c3      	strb	r3, [r0, #7]
1000e4ee:	2111      	movs	r1, #17
1000e4f0:	4b03      	ldr	r3, [pc, #12]	; (1000e500 <gapc_bond_cfm_handler_pair_resp+0x78>)
1000e4f2:	4798      	blx	r3
1000e4f4:	b005      	add	sp, #20
1000e4f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e4f8:	10015dec 	.word	0x10015dec
1000e4fc:	10015a7c 	.word	0x10015a7c
1000e500:	1000dd49 	.word	0x1000dd49

1000e504 <gapc_bond_cfm_handler_key_exch>:
1000e504:	b538      	push	{r3, r4, r5, lr}
1000e506:	2514      	movs	r5, #20
1000e508:	4c0d      	ldr	r4, [pc, #52]	; (1000e540 <gapc_bond_cfm_handler_key_exch+0x3c>)
1000e50a:	70e3      	strb	r3, [r4, #3]
1000e50c:	4b0d      	ldr	r3, [pc, #52]	; (1000e544 <gapc_bond_cfm_handler_key_exch+0x40>)
1000e50e:	7025      	strb	r5, [r4, #0]
1000e510:	3d06      	subs	r5, #6
1000e512:	7065      	strb	r5, [r4, #1]
1000e514:	70a5      	strb	r5, [r4, #2]
1000e516:	881d      	ldrh	r5, [r3, #0]
1000e518:	881b      	ldrh	r3, [r3, #0]
1000e51a:	7220      	strb	r0, [r4, #8]
1000e51c:	0a1b      	lsrs	r3, r3, #8
1000e51e:	7163      	strb	r3, [r4, #5]
1000e520:	7261      	strb	r1, [r4, #9]
1000e522:	4b09      	ldr	r3, [pc, #36]	; (1000e548 <gapc_bond_cfm_handler_key_exch+0x44>)
1000e524:	1c11      	adds	r1, r2, #0
1000e526:	4809      	ldr	r0, [pc, #36]	; (1000e54c <gapc_bond_cfm_handler_key_exch+0x48>)
1000e528:	2210      	movs	r2, #16
1000e52a:	7125      	strb	r5, [r4, #4]
1000e52c:	4798      	blx	r3
1000e52e:	2312      	movs	r3, #18
1000e530:	71a3      	strb	r3, [r4, #6]
1000e532:	2300      	movs	r3, #0
1000e534:	1c20      	adds	r0, r4, #0
1000e536:	71e3      	strb	r3, [r4, #7]
1000e538:	211a      	movs	r1, #26
1000e53a:	4b05      	ldr	r3, [pc, #20]	; (1000e550 <gapc_bond_cfm_handler_key_exch+0x4c>)
1000e53c:	4798      	blx	r3
1000e53e:	bd38      	pop	{r3, r4, r5, pc}
1000e540:	10015dec 	.word	0x10015dec
1000e544:	10015a7c 	.word	0x10015a7c
1000e548:	1001149f 	.word	0x1001149f
1000e54c:	10015df6 	.word	0x10015df6
1000e550:	1000dd49 	.word	0x1000dd49

1000e554 <gapc_security_cmd_handler>:
1000e554:	221a      	movs	r2, #26
1000e556:	b508      	push	{r3, lr}
1000e558:	4b0b      	ldr	r3, [pc, #44]	; (1000e588 <gapc_security_cmd_handler+0x34>)
1000e55a:	701a      	strb	r2, [r3, #0]
1000e55c:	3a0c      	subs	r2, #12
1000e55e:	705a      	strb	r2, [r3, #1]
1000e560:	709a      	strb	r2, [r3, #2]
1000e562:	4a0a      	ldr	r2, [pc, #40]	; (1000e58c <gapc_security_cmd_handler+0x38>)
1000e564:	70d8      	strb	r0, [r3, #3]
1000e566:	8810      	ldrh	r0, [r2, #0]
1000e568:	8812      	ldrh	r2, [r2, #0]
1000e56a:	7118      	strb	r0, [r3, #4]
1000e56c:	0a12      	lsrs	r2, r2, #8
1000e56e:	715a      	strb	r2, [r3, #5]
1000e570:	220c      	movs	r2, #12
1000e572:	721a      	strb	r2, [r3, #8]
1000e574:	3a0a      	subs	r2, #10
1000e576:	719a      	strb	r2, [r3, #6]
1000e578:	2200      	movs	r2, #0
1000e57a:	7259      	strb	r1, [r3, #9]
1000e57c:	71da      	strb	r2, [r3, #7]
1000e57e:	1c18      	adds	r0, r3, #0
1000e580:	210a      	movs	r1, #10
1000e582:	4b03      	ldr	r3, [pc, #12]	; (1000e590 <gapc_security_cmd_handler+0x3c>)
1000e584:	4798      	blx	r3
1000e586:	bd08      	pop	{r3, pc}
1000e588:	10015dec 	.word	0x10015dec
1000e58c:	10015a7c 	.word	0x10015a7c
1000e590:	1000dd49 	.word	0x1000dd49

1000e594 <gapc_encrypt_cmd_handler>:
1000e594:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e596:	2500      	movs	r5, #0
1000e598:	b089      	sub	sp, #36	; 0x24
1000e59a:	9306      	str	r3, [sp, #24]
1000e59c:	ab0e      	add	r3, sp, #56	; 0x38
1000e59e:	781b      	ldrb	r3, [r3, #0]
1000e5a0:	1c17      	adds	r7, r2, #0
1000e5a2:	9307      	str	r3, [sp, #28]
1000e5a4:	ab0f      	add	r3, sp, #60	; 0x3c
1000e5a6:	781b      	ldrb	r3, [r3, #0]
1000e5a8:	4a19      	ldr	r2, [pc, #100]	; (1000e610 <gapc_encrypt_cmd_handler+0x7c>)
1000e5aa:	1c06      	adds	r6, r0, #0
1000e5ac:	9105      	str	r1, [sp, #20]
1000e5ae:	9300      	str	r3, [sp, #0]
1000e5b0:	9002      	str	r0, [sp, #8]
1000e5b2:	1c29      	adds	r1, r5, #0
1000e5b4:	1c2b      	adds	r3, r5, #0
1000e5b6:	9501      	str	r5, [sp, #4]
1000e5b8:	1c10      	adds	r0, r2, #0
1000e5ba:	4c16      	ldr	r4, [pc, #88]	; (1000e614 <gapc_encrypt_cmd_handler+0x80>)
1000e5bc:	47a0      	blx	r4
1000e5be:	2316      	movs	r3, #22
1000e5c0:	4c15      	ldr	r4, [pc, #84]	; (1000e618 <gapc_encrypt_cmd_handler+0x84>)
1000e5c2:	9905      	ldr	r1, [sp, #20]
1000e5c4:	7023      	strb	r3, [r4, #0]
1000e5c6:	3b08      	subs	r3, #8
1000e5c8:	7063      	strb	r3, [r4, #1]
1000e5ca:	70a3      	strb	r3, [r4, #2]
1000e5cc:	4b13      	ldr	r3, [pc, #76]	; (1000e61c <gapc_encrypt_cmd_handler+0x88>)
1000e5ce:	70e6      	strb	r6, [r4, #3]
1000e5d0:	881a      	ldrh	r2, [r3, #0]
1000e5d2:	881b      	ldrh	r3, [r3, #0]
1000e5d4:	7122      	strb	r2, [r4, #4]
1000e5d6:	0a1b      	lsrs	r3, r3, #8
1000e5d8:	7163      	strb	r3, [r4, #5]
1000e5da:	230b      	movs	r3, #11
1000e5dc:	4e10      	ldr	r6, [pc, #64]	; (1000e620 <gapc_encrypt_cmd_handler+0x8c>)
1000e5de:	2210      	movs	r2, #16
1000e5e0:	4810      	ldr	r0, [pc, #64]	; (1000e624 <gapc_encrypt_cmd_handler+0x90>)
1000e5e2:	7223      	strb	r3, [r4, #8]
1000e5e4:	7265      	strb	r5, [r4, #9]
1000e5e6:	47b0      	blx	r6
1000e5e8:	0a3b      	lsrs	r3, r7, #8
1000e5ea:	9906      	ldr	r1, [sp, #24]
1000e5ec:	2208      	movs	r2, #8
1000e5ee:	480e      	ldr	r0, [pc, #56]	; (1000e628 <gapc_encrypt_cmd_handler+0x94>)
1000e5f0:	76e3      	strb	r3, [r4, #27]
1000e5f2:	76a7      	strb	r7, [r4, #26]
1000e5f4:	47b0      	blx	r6
1000e5f6:	466a      	mov	r2, sp
1000e5f8:	7f12      	ldrb	r2, [r2, #28]
1000e5fa:	1d63      	adds	r3, r4, #5
1000e5fc:	77da      	strb	r2, [r3, #31]
1000e5fe:	231d      	movs	r3, #29
1000e600:	1c20      	adds	r0, r4, #0
1000e602:	71a3      	strb	r3, [r4, #6]
1000e604:	2125      	movs	r1, #37	; 0x25
1000e606:	4b09      	ldr	r3, [pc, #36]	; (1000e62c <gapc_encrypt_cmd_handler+0x98>)
1000e608:	71e5      	strb	r5, [r4, #7]
1000e60a:	4798      	blx	r3
1000e60c:	b009      	add	sp, #36	; 0x24
1000e60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e610:	10014d6c 	.word	0x10014d6c
1000e614:	1000e04d 	.word	0x1000e04d
1000e618:	10015dec 	.word	0x10015dec
1000e61c:	10015a7c 	.word	0x10015a7c
1000e620:	1001149f 	.word	0x1001149f
1000e624:	10015df6 	.word	0x10015df6
1000e628:	10015e08 	.word	0x10015e08
1000e62c:	1000dd49 	.word	0x1000dd49

1000e630 <gapc_encrypt_req_ind>:
1000e630:	b508      	push	{r3, lr}
1000e632:	0a00      	lsrs	r0, r0, #8
1000e634:	8010      	strh	r0, [r2, #0]
1000e636:	784b      	ldrb	r3, [r1, #1]
1000e638:	7808      	ldrb	r0, [r1, #0]
1000e63a:	021b      	lsls	r3, r3, #8
1000e63c:	4303      	orrs	r3, r0
1000e63e:	8053      	strh	r3, [r2, #2]
1000e640:	1d10      	adds	r0, r2, #4
1000e642:	3102      	adds	r1, #2
1000e644:	2208      	movs	r2, #8
1000e646:	4b01      	ldr	r3, [pc, #4]	; (1000e64c <gapc_encrypt_req_ind+0x1c>)
1000e648:	4798      	blx	r3
1000e64a:	bd08      	pop	{r3, pc}
1000e64c:	1001149f 	.word	0x1001149f

1000e650 <gapc_encrypt_cfm_handler>:
1000e650:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e652:	2500      	movs	r5, #0
1000e654:	b087      	sub	sp, #28
1000e656:	9304      	str	r3, [sp, #16]
1000e658:	ab0c      	add	r3, sp, #48	; 0x30
1000e65a:	781b      	ldrb	r3, [r3, #0]
1000e65c:	1c17      	adds	r7, r2, #0
1000e65e:	4a15      	ldr	r2, [pc, #84]	; (1000e6b4 <gapc_encrypt_cfm_handler+0x64>)
1000e660:	1c06      	adds	r6, r0, #0
1000e662:	9305      	str	r3, [sp, #20]
1000e664:	9100      	str	r1, [sp, #0]
1000e666:	9002      	str	r0, [sp, #8]
1000e668:	1c29      	adds	r1, r5, #0
1000e66a:	1c2b      	adds	r3, r5, #0
1000e66c:	9501      	str	r5, [sp, #4]
1000e66e:	1c10      	adds	r0, r2, #0
1000e670:	4c11      	ldr	r4, [pc, #68]	; (1000e6b8 <gapc_encrypt_cfm_handler+0x68>)
1000e672:	47a0      	blx	r4
1000e674:	2318      	movs	r3, #24
1000e676:	4c11      	ldr	r4, [pc, #68]	; (1000e6bc <gapc_encrypt_cfm_handler+0x6c>)
1000e678:	9904      	ldr	r1, [sp, #16]
1000e67a:	7023      	strb	r3, [r4, #0]
1000e67c:	3b0a      	subs	r3, #10
1000e67e:	7063      	strb	r3, [r4, #1]
1000e680:	70a3      	strb	r3, [r4, #2]
1000e682:	4b0f      	ldr	r3, [pc, #60]	; (1000e6c0 <gapc_encrypt_cfm_handler+0x70>)
1000e684:	480f      	ldr	r0, [pc, #60]	; (1000e6c4 <gapc_encrypt_cfm_handler+0x74>)
1000e686:	881a      	ldrh	r2, [r3, #0]
1000e688:	881b      	ldrh	r3, [r3, #0]
1000e68a:	7122      	strb	r2, [r4, #4]
1000e68c:	0a1b      	lsrs	r3, r3, #8
1000e68e:	7163      	strb	r3, [r4, #5]
1000e690:	2210      	movs	r2, #16
1000e692:	4b0d      	ldr	r3, [pc, #52]	; (1000e6c8 <gapc_encrypt_cfm_handler+0x78>)
1000e694:	70e6      	strb	r6, [r4, #3]
1000e696:	7227      	strb	r7, [r4, #8]
1000e698:	4798      	blx	r3
1000e69a:	466b      	mov	r3, sp
1000e69c:	7d1b      	ldrb	r3, [r3, #20]
1000e69e:	1c20      	adds	r0, r4, #0
1000e6a0:	7663      	strb	r3, [r4, #25]
1000e6a2:	2312      	movs	r3, #18
1000e6a4:	211a      	movs	r1, #26
1000e6a6:	71a3      	strb	r3, [r4, #6]
1000e6a8:	4b08      	ldr	r3, [pc, #32]	; (1000e6cc <gapc_encrypt_cfm_handler+0x7c>)
1000e6aa:	71e5      	strb	r5, [r4, #7]
1000e6ac:	4798      	blx	r3
1000e6ae:	b007      	add	sp, #28
1000e6b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e6b2:	46c0      	nop			; (mov r8, r8)
1000e6b4:	10014d7c 	.word	0x10014d7c
1000e6b8:	1000e04d 	.word	0x1000e04d
1000e6bc:	10015dec 	.word	0x10015dec
1000e6c0:	10015a7c 	.word	0x10015a7c
1000e6c4:	10015df5 	.word	0x10015df5
1000e6c8:	1001149f 	.word	0x1001149f
1000e6cc:	1000dd49 	.word	0x1000dd49

1000e6d0 <gapc_encrypt_ind>:
1000e6d0:	780b      	ldrb	r3, [r1, #0]
1000e6d2:	0a00      	lsrs	r0, r0, #8
1000e6d4:	70d3      	strb	r3, [r2, #3]
1000e6d6:	2300      	movs	r3, #0
1000e6d8:	8010      	strh	r0, [r2, #0]
1000e6da:	7093      	strb	r3, [r2, #2]
1000e6dc:	4770      	bx	lr
	...

1000e6e0 <gapc_param_update_cfm_handler>:
1000e6e0:	b538      	push	{r3, r4, r5, lr}
1000e6e2:	2410      	movs	r4, #16
1000e6e4:	1c05      	adds	r5, r0, #0
1000e6e6:	480e      	ldr	r0, [pc, #56]	; (1000e720 <gapc_param_update_cfm_handler+0x40>)
1000e6e8:	7004      	strb	r4, [r0, #0]
1000e6ea:	3c02      	subs	r4, #2
1000e6ec:	7044      	strb	r4, [r0, #1]
1000e6ee:	7084      	strb	r4, [r0, #2]
1000e6f0:	4c0c      	ldr	r4, [pc, #48]	; (1000e724 <gapc_param_update_cfm_handler+0x44>)
1000e6f2:	70c5      	strb	r5, [r0, #3]
1000e6f4:	8825      	ldrh	r5, [r4, #0]
1000e6f6:	8824      	ldrh	r4, [r4, #0]
1000e6f8:	72c3      	strb	r3, [r0, #11]
1000e6fa:	0a1b      	lsrs	r3, r3, #8
1000e6fc:	0a24      	lsrs	r4, r4, #8
1000e6fe:	7303      	strb	r3, [r0, #12]
1000e700:	2305      	movs	r3, #5
1000e702:	7144      	strb	r4, [r0, #5]
1000e704:	2400      	movs	r4, #0
1000e706:	7201      	strb	r1, [r0, #8]
1000e708:	7242      	strb	r2, [r0, #9]
1000e70a:	7183      	strb	r3, [r0, #6]
1000e70c:	0a12      	lsrs	r2, r2, #8
1000e70e:	210d      	movs	r1, #13
1000e710:	4b05      	ldr	r3, [pc, #20]	; (1000e728 <gapc_param_update_cfm_handler+0x48>)
1000e712:	7105      	strb	r5, [r0, #4]
1000e714:	7282      	strb	r2, [r0, #10]
1000e716:	71c4      	strb	r4, [r0, #7]
1000e718:	4798      	blx	r3
1000e71a:	1c20      	adds	r0, r4, #0
1000e71c:	bd38      	pop	{r3, r4, r5, pc}
1000e71e:	46c0      	nop			; (mov r8, r8)
1000e720:	10015dec 	.word	0x10015dec
1000e724:	10015a7c 	.word	0x10015a7c
1000e728:	1000dd49 	.word	0x1000dd49

1000e72c <gapc_param_updated_ind>:
1000e72c:	2300      	movs	r3, #0
1000e72e:	0a00      	lsrs	r0, r0, #8
1000e730:	8010      	strh	r0, [r2, #0]
1000e732:	7093      	strb	r3, [r2, #2]
1000e734:	784b      	ldrb	r3, [r1, #1]
1000e736:	7808      	ldrb	r0, [r1, #0]
1000e738:	021b      	lsls	r3, r3, #8
1000e73a:	4303      	orrs	r3, r0
1000e73c:	8093      	strh	r3, [r2, #4]
1000e73e:	78cb      	ldrb	r3, [r1, #3]
1000e740:	7888      	ldrb	r0, [r1, #2]
1000e742:	021b      	lsls	r3, r3, #8
1000e744:	4303      	orrs	r3, r0
1000e746:	80d3      	strh	r3, [r2, #6]
1000e748:	794b      	ldrb	r3, [r1, #5]
1000e74a:	7909      	ldrb	r1, [r1, #4]
1000e74c:	021b      	lsls	r3, r3, #8
1000e74e:	430b      	orrs	r3, r1
1000e750:	2007      	movs	r0, #7
1000e752:	8113      	strh	r3, [r2, #8]
1000e754:	4770      	bx	lr

1000e756 <gapc_param_updated_req_ind>:
1000e756:	0a00      	lsrs	r0, r0, #8
1000e758:	8010      	strh	r0, [r2, #0]
1000e75a:	784b      	ldrb	r3, [r1, #1]
1000e75c:	7808      	ldrb	r0, [r1, #0]
1000e75e:	021b      	lsls	r3, r3, #8
1000e760:	4303      	orrs	r3, r0
1000e762:	8053      	strh	r3, [r2, #2]
1000e764:	78cb      	ldrb	r3, [r1, #3]
1000e766:	7888      	ldrb	r0, [r1, #2]
1000e768:	021b      	lsls	r3, r3, #8
1000e76a:	4303      	orrs	r3, r0
1000e76c:	8093      	strh	r3, [r2, #4]
1000e76e:	794b      	ldrb	r3, [r1, #5]
1000e770:	7908      	ldrb	r0, [r1, #4]
1000e772:	021b      	lsls	r3, r3, #8
1000e774:	4303      	orrs	r3, r0
1000e776:	80d3      	strh	r3, [r2, #6]
1000e778:	79cb      	ldrb	r3, [r1, #7]
1000e77a:	7989      	ldrb	r1, [r1, #6]
1000e77c:	021b      	lsls	r3, r3, #8
1000e77e:	430b      	orrs	r3, r1
1000e780:	2008      	movs	r0, #8
1000e782:	8113      	strh	r3, [r2, #8]
1000e784:	4770      	bx	lr
	...

1000e788 <gapc_dev_info_req_ind_handler>:
1000e788:	b508      	push	{r3, lr}
1000e78a:	1c0b      	adds	r3, r1, #0
1000e78c:	0a01      	lsrs	r1, r0, #8
1000e78e:	8011      	strh	r1, [r2, #0]
1000e790:	7818      	ldrb	r0, [r3, #0]
1000e792:	7090      	strb	r0, [r2, #2]
1000e794:	2800      	cmp	r0, #0
1000e796:	d104      	bne.n	1000e7a2 <gapc_dev_info_req_ind_handler+0x1a>
1000e798:	4b03      	ldr	r3, [pc, #12]	; (1000e7a8 <gapc_dev_info_req_ind_handler+0x20>)
1000e79a:	33aa      	adds	r3, #170	; 0xaa
1000e79c:	881b      	ldrh	r3, [r3, #0]
1000e79e:	2b00      	cmp	r3, #0
1000e7a0:	d001      	beq.n	1000e7a6 <gapc_dev_info_req_ind_handler+0x1e>
1000e7a2:	4b02      	ldr	r3, [pc, #8]	; (1000e7ac <gapc_dev_info_req_ind_handler+0x24>)
1000e7a4:	4798      	blx	r3
1000e7a6:	bd08      	pop	{r3, pc}
1000e7a8:	10015b0e 	.word	0x10015b0e
1000e7ac:	1000de59 	.word	0x1000de59

1000e7b0 <gapc_sec_req_ind>:
1000e7b0:	0a00      	lsrs	r0, r0, #8
1000e7b2:	8010      	strh	r0, [r2, #0]
1000e7b4:	7809      	ldrb	r1, [r1, #0]
1000e7b6:	2301      	movs	r3, #1
1000e7b8:	1c08      	adds	r0, r1, #0
1000e7ba:	0889      	lsrs	r1, r1, #2
1000e7bc:	4018      	ands	r0, r3
1000e7be:	400b      	ands	r3, r1
1000e7c0:	70d0      	strb	r0, [r2, #3]
1000e7c2:	7113      	strb	r3, [r2, #4]
1000e7c4:	4770      	bx	lr

1000e7c6 <gapc_sign_counter_ind_handler>:
1000e7c6:	0a00      	lsrs	r0, r0, #8
1000e7c8:	8010      	strh	r0, [r2, #0]
1000e7ca:	784b      	ldrb	r3, [r1, #1]
1000e7cc:	0218      	lsls	r0, r3, #8
1000e7ce:	788b      	ldrb	r3, [r1, #2]
1000e7d0:	041b      	lsls	r3, r3, #16
1000e7d2:	4303      	orrs	r3, r0
1000e7d4:	7808      	ldrb	r0, [r1, #0]
1000e7d6:	4303      	orrs	r3, r0
1000e7d8:	78c8      	ldrb	r0, [r1, #3]
1000e7da:	0600      	lsls	r0, r0, #24
1000e7dc:	4303      	orrs	r3, r0
1000e7de:	6053      	str	r3, [r2, #4]
1000e7e0:	794b      	ldrb	r3, [r1, #5]
1000e7e2:	0218      	lsls	r0, r3, #8
1000e7e4:	798b      	ldrb	r3, [r1, #6]
1000e7e6:	041b      	lsls	r3, r3, #16
1000e7e8:	4303      	orrs	r3, r0
1000e7ea:	7908      	ldrb	r0, [r1, #4]
1000e7ec:	79c9      	ldrb	r1, [r1, #7]
1000e7ee:	4303      	orrs	r3, r0
1000e7f0:	0609      	lsls	r1, r1, #24
1000e7f2:	430b      	orrs	r3, r1
1000e7f4:	2000      	movs	r0, #0
1000e7f6:	6093      	str	r3, [r2, #8]
1000e7f8:	4770      	bx	lr
	...

1000e7fc <gapc_peer_att_info_ind_handler>:
1000e7fc:	b510      	push	{r4, lr}
1000e7fe:	0a00      	lsrs	r0, r0, #8
1000e800:	8010      	strh	r0, [r2, #0]
1000e802:	7808      	ldrb	r0, [r1, #0]
1000e804:	7090      	strb	r0, [r2, #2]
1000e806:	788b      	ldrb	r3, [r1, #2]
1000e808:	784c      	ldrb	r4, [r1, #1]
1000e80a:	021b      	lsls	r3, r3, #8
1000e80c:	4323      	orrs	r3, r4
1000e80e:	8093      	strh	r3, [r2, #4]
1000e810:	2801      	cmp	r0, #1
1000e812:	d027      	beq.n	1000e864 <gapc_peer_att_info_ind_handler+0x68>
1000e814:	2800      	cmp	r0, #0
1000e816:	d017      	beq.n	1000e848 <gapc_peer_att_info_ind_handler+0x4c>
1000e818:	2802      	cmp	r0, #2
1000e81a:	d12a      	bne.n	1000e872 <gapc_peer_att_info_ind_handler+0x76>
1000e81c:	790b      	ldrb	r3, [r1, #4]
1000e81e:	78c8      	ldrb	r0, [r1, #3]
1000e820:	021b      	lsls	r3, r3, #8
1000e822:	4303      	orrs	r3, r0
1000e824:	8113      	strh	r3, [r2, #8]
1000e826:	798b      	ldrb	r3, [r1, #6]
1000e828:	7948      	ldrb	r0, [r1, #5]
1000e82a:	021b      	lsls	r3, r3, #8
1000e82c:	4303      	orrs	r3, r0
1000e82e:	80d3      	strh	r3, [r2, #6]
1000e830:	7a0b      	ldrb	r3, [r1, #8]
1000e832:	79c8      	ldrb	r0, [r1, #7]
1000e834:	021b      	lsls	r3, r3, #8
1000e836:	4303      	orrs	r3, r0
1000e838:	8193      	strh	r3, [r2, #12]
1000e83a:	7a8b      	ldrb	r3, [r1, #10]
1000e83c:	7a49      	ldrb	r1, [r1, #9]
1000e83e:	021b      	lsls	r3, r3, #8
1000e840:	430b      	orrs	r3, r1
1000e842:	8153      	strh	r3, [r2, #10]
1000e844:	2306      	movs	r3, #6
1000e846:	e013      	b.n	1000e870 <gapc_peer_att_info_ind_handler+0x74>
1000e848:	1c14      	adds	r4, r2, #0
1000e84a:	1c20      	adds	r0, r4, #0
1000e84c:	790a      	ldrb	r2, [r1, #4]
1000e84e:	78cb      	ldrb	r3, [r1, #3]
1000e850:	0212      	lsls	r2, r2, #8
1000e852:	431a      	orrs	r2, r3
1000e854:	80e2      	strh	r2, [r4, #6]
1000e856:	4b07      	ldr	r3, [pc, #28]	; (1000e874 <gapc_peer_att_info_ind_handler+0x78>)
1000e858:	3008      	adds	r0, #8
1000e85a:	3105      	adds	r1, #5
1000e85c:	4798      	blx	r3
1000e85e:	2302      	movs	r3, #2
1000e860:	70a3      	strb	r3, [r4, #2]
1000e862:	e006      	b.n	1000e872 <gapc_peer_att_info_ind_handler+0x76>
1000e864:	790b      	ldrb	r3, [r1, #4]
1000e866:	78c9      	ldrb	r1, [r1, #3]
1000e868:	021b      	lsls	r3, r3, #8
1000e86a:	430b      	orrs	r3, r1
1000e86c:	80d3      	strh	r3, [r2, #6]
1000e86e:	2305      	movs	r3, #5
1000e870:	7093      	strb	r3, [r2, #2]
1000e872:	bd10      	pop	{r4, pc}
1000e874:	1001149f 	.word	0x1001149f

1000e878 <gapc_con_channel_map_ind_handler>:
1000e878:	b508      	push	{r3, lr}
1000e87a:	2300      	movs	r3, #0
1000e87c:	0a00      	lsrs	r0, r0, #8
1000e87e:	7013      	strb	r3, [r2, #0]
1000e880:	8050      	strh	r0, [r2, #2]
1000e882:	4b02      	ldr	r3, [pc, #8]	; (1000e88c <gapc_con_channel_map_ind_handler+0x14>)
1000e884:	1d10      	adds	r0, r2, #4
1000e886:	2205      	movs	r2, #5
1000e888:	4798      	blx	r3
1000e88a:	bd08      	pop	{r3, pc}
1000e88c:	1001149f 	.word	0x1001149f

1000e890 <gapc_lecb_connected>:
1000e890:	7843      	ldrb	r3, [r0, #1]
1000e892:	7802      	ldrb	r2, [r0, #0]
1000e894:	021b      	lsls	r3, r3, #8
1000e896:	4313      	orrs	r3, r2
1000e898:	800b      	strh	r3, [r1, #0]
1000e89a:	78c3      	ldrb	r3, [r0, #3]
1000e89c:	7882      	ldrb	r2, [r0, #2]
1000e89e:	021b      	lsls	r3, r3, #8
1000e8a0:	4313      	orrs	r3, r2
1000e8a2:	804b      	strh	r3, [r1, #2]
1000e8a4:	7943      	ldrb	r3, [r0, #5]
1000e8a6:	7902      	ldrb	r2, [r0, #4]
1000e8a8:	021b      	lsls	r3, r3, #8
1000e8aa:	4313      	orrs	r3, r2
1000e8ac:	808b      	strh	r3, [r1, #4]
1000e8ae:	79c3      	ldrb	r3, [r0, #7]
1000e8b0:	7982      	ldrb	r2, [r0, #6]
1000e8b2:	021b      	lsls	r3, r3, #8
1000e8b4:	4313      	orrs	r3, r2
1000e8b6:	80cb      	strh	r3, [r1, #6]
1000e8b8:	2300      	movs	r3, #0
1000e8ba:	720b      	strb	r3, [r1, #8]
1000e8bc:	4770      	bx	lr

1000e8be <gapc_lecb_disconnected>:
1000e8be:	7843      	ldrb	r3, [r0, #1]
1000e8c0:	7802      	ldrb	r2, [r0, #0]
1000e8c2:	021b      	lsls	r3, r3, #8
1000e8c4:	4313      	orrs	r3, r2
1000e8c6:	800b      	strh	r3, [r1, #0]
1000e8c8:	78c3      	ldrb	r3, [r0, #3]
1000e8ca:	7882      	ldrb	r2, [r0, #2]
1000e8cc:	021b      	lsls	r3, r3, #8
1000e8ce:	4313      	orrs	r3, r2
1000e8d0:	804b      	strh	r3, [r1, #2]
1000e8d2:	4770      	bx	lr

1000e8d4 <gapc_lecb_connect_req_ind>:
1000e8d4:	7843      	ldrb	r3, [r0, #1]
1000e8d6:	7802      	ldrb	r2, [r0, #0]
1000e8d8:	021b      	lsls	r3, r3, #8
1000e8da:	4313      	orrs	r3, r2
1000e8dc:	800b      	strh	r3, [r1, #0]
1000e8de:	78c3      	ldrb	r3, [r0, #3]
1000e8e0:	7882      	ldrb	r2, [r0, #2]
1000e8e2:	021b      	lsls	r3, r3, #8
1000e8e4:	4313      	orrs	r3, r2
1000e8e6:	804b      	strh	r3, [r1, #2]
1000e8e8:	7943      	ldrb	r3, [r0, #5]
1000e8ea:	7902      	ldrb	r2, [r0, #4]
1000e8ec:	021b      	lsls	r3, r3, #8
1000e8ee:	4313      	orrs	r3, r2
1000e8f0:	808b      	strh	r3, [r1, #4]
1000e8f2:	79c3      	ldrb	r3, [r0, #7]
1000e8f4:	7982      	ldrb	r2, [r0, #6]
1000e8f6:	021b      	lsls	r3, r3, #8
1000e8f8:	4313      	orrs	r3, r2
1000e8fa:	80cb      	strh	r3, [r1, #6]
1000e8fc:	4770      	bx	lr

1000e8fe <gapc_lecb_add_credit_resp_handler>:
1000e8fe:	7843      	ldrb	r3, [r0, #1]
1000e900:	7802      	ldrb	r2, [r0, #0]
1000e902:	021b      	lsls	r3, r3, #8
1000e904:	4313      	orrs	r3, r2
1000e906:	800b      	strh	r3, [r1, #0]
1000e908:	78c3      	ldrb	r3, [r0, #3]
1000e90a:	7882      	ldrb	r2, [r0, #2]
1000e90c:	021b      	lsls	r3, r3, #8
1000e90e:	4313      	orrs	r3, r2
1000e910:	804b      	strh	r3, [r1, #2]
1000e912:	7943      	ldrb	r3, [r0, #5]
1000e914:	7902      	ldrb	r2, [r0, #4]
1000e916:	021b      	lsls	r3, r3, #8
1000e918:	4313      	orrs	r3, r2
1000e91a:	808b      	strh	r3, [r1, #4]
1000e91c:	4770      	bx	lr
	...

1000e920 <gapm_reset_req_handler>:
1000e920:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000e922:	466b      	mov	r3, sp
1000e924:	4915      	ldr	r1, [pc, #84]	; (1000e97c <gapm_reset_req_handler+0x5c>)
1000e926:	4816      	ldr	r0, [pc, #88]	; (1000e980 <gapm_reset_req_handler+0x60>)
1000e928:	880c      	ldrh	r4, [r1, #0]
1000e92a:	8809      	ldrh	r1, [r1, #0]
1000e92c:	1ddd      	adds	r5, r3, #7
1000e92e:	0a09      	lsrs	r1, r1, #8
1000e930:	2300      	movs	r3, #0
1000e932:	2202      	movs	r2, #2
1000e934:	7141      	strb	r1, [r0, #5]
1000e936:	26d0      	movs	r6, #208	; 0xd0
1000e938:	2101      	movs	r1, #1
1000e93a:	7104      	strb	r4, [r0, #4]
1000e93c:	4c11      	ldr	r4, [pc, #68]	; (1000e984 <gapm_reset_req_handler+0x64>)
1000e93e:	702b      	strb	r3, [r5, #0]
1000e940:	7002      	strb	r2, [r0, #0]
1000e942:	70c3      	strb	r3, [r0, #3]
1000e944:	320b      	adds	r2, #11
1000e946:	7201      	strb	r1, [r0, #8]
1000e948:	7181      	strb	r1, [r0, #6]
1000e94a:	71c3      	strb	r3, [r0, #7]
1000e94c:	3108      	adds	r1, #8
1000e94e:	4b0e      	ldr	r3, [pc, #56]	; (1000e988 <gapm_reset_req_handler+0x68>)
1000e950:	0136      	lsls	r6, r6, #4
1000e952:	7042      	strb	r2, [r0, #1]
1000e954:	7082      	strb	r2, [r0, #2]
1000e956:	80a2      	strh	r2, [r4, #4]
1000e958:	8026      	strh	r6, [r4, #0]
1000e95a:	4798      	blx	r3
1000e95c:	1c28      	adds	r0, r5, #0
1000e95e:	4b0b      	ldr	r3, [pc, #44]	; (1000e98c <gapm_reset_req_handler+0x6c>)
1000e960:	4798      	blx	r3
1000e962:	782b      	ldrb	r3, [r5, #0]
1000e964:	20e2      	movs	r0, #226	; 0xe2
1000e966:	2b00      	cmp	r3, #0
1000e968:	d106      	bne.n	1000e978 <gapm_reset_req_handler+0x58>
1000e96a:	68a3      	ldr	r3, [r4, #8]
1000e96c:	20e2      	movs	r0, #226	; 0xe2
1000e96e:	781a      	ldrb	r2, [r3, #0]
1000e970:	785b      	ldrb	r3, [r3, #1]
1000e972:	2a01      	cmp	r2, #1
1000e974:	d100      	bne.n	1000e978 <gapm_reset_req_handler+0x58>
1000e976:	1c18      	adds	r0, r3, #0
1000e978:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000e97a:	46c0      	nop			; (mov r8, r8)
1000e97c:	10015a7c 	.word	0x10015a7c
1000e980:	10015dec 	.word	0x10015dec
1000e984:	10015a70 	.word	0x10015a70
1000e988:	1000dd49 	.word	0x1000dd49
1000e98c:	1000ddad 	.word	0x1000ddad

1000e990 <gapm_set_dev_config_cmd_handler>:
1000e990:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e992:	b089      	sub	sp, #36	; 0x24
1000e994:	9303      	str	r3, [sp, #12]
1000e996:	ab0e      	add	r3, sp, #56	; 0x38
1000e998:	781b      	ldrb	r3, [r3, #0]
1000e99a:	4c37      	ldr	r4, [pc, #220]	; (1000ea78 <gapm_set_dev_config_cmd_handler+0xe8>)
1000e99c:	9304      	str	r3, [sp, #16]
1000e99e:	ab0f      	add	r3, sp, #60	; 0x3c
1000e9a0:	781b      	ldrb	r3, [r3, #0]
1000e9a2:	270d      	movs	r7, #13
1000e9a4:	9305      	str	r3, [sp, #20]
1000e9a6:	ab10      	add	r3, sp, #64	; 0x40
1000e9a8:	881b      	ldrh	r3, [r3, #0]
1000e9aa:	72a1      	strb	r1, [r4, #10]
1000e9ac:	9300      	str	r3, [sp, #0]
1000e9ae:	ab11      	add	r3, sp, #68	; 0x44
1000e9b0:	881b      	ldrh	r3, [r3, #0]
1000e9b2:	0a09      	lsrs	r1, r1, #8
1000e9b4:	9301      	str	r3, [sp, #4]
1000e9b6:	ab12      	add	r3, sp, #72	; 0x48
1000e9b8:	881b      	ldrh	r3, [r3, #0]
1000e9ba:	7260      	strb	r0, [r4, #9]
1000e9bc:	9302      	str	r3, [sp, #8]
1000e9be:	ab06      	add	r3, sp, #24
1000e9c0:	1dde      	adds	r6, r3, #7
1000e9c2:	2300      	movs	r3, #0
1000e9c4:	7033      	strb	r3, [r6, #0]
1000e9c6:	2304      	movs	r3, #4
1000e9c8:	7023      	strb	r3, [r4, #0]
1000e9ca:	2300      	movs	r3, #0
1000e9cc:	70e3      	strb	r3, [r4, #3]
1000e9ce:	4b2b      	ldr	r3, [pc, #172]	; (1000ea7c <gapm_set_dev_config_cmd_handler+0xec>)
1000e9d0:	72e1      	strb	r1, [r4, #11]
1000e9d2:	881d      	ldrh	r5, [r3, #0]
1000e9d4:	881b      	ldrh	r3, [r3, #0]
1000e9d6:	1c11      	adds	r1, r2, #0
1000e9d8:	0a1b      	lsrs	r3, r3, #8
1000e9da:	7163      	strb	r3, [r4, #5]
1000e9dc:	2303      	movs	r3, #3
1000e9de:	7125      	strb	r5, [r4, #4]
1000e9e0:	2206      	movs	r2, #6
1000e9e2:	4d27      	ldr	r5, [pc, #156]	; (1000ea80 <gapm_set_dev_config_cmd_handler+0xf0>)
1000e9e4:	4827      	ldr	r0, [pc, #156]	; (1000ea84 <gapm_set_dev_config_cmd_handler+0xf4>)
1000e9e6:	7223      	strb	r3, [r4, #8]
1000e9e8:	7067      	strb	r7, [r4, #1]
1000e9ea:	70a7      	strb	r7, [r4, #2]
1000e9ec:	47a8      	blx	r5
1000e9ee:	9903      	ldr	r1, [sp, #12]
1000e9f0:	2210      	movs	r2, #16
1000e9f2:	4825      	ldr	r0, [pc, #148]	; (1000ea88 <gapm_set_dev_config_cmd_handler+0xf8>)
1000e9f4:	47a8      	blx	r5
1000e9f6:	466a      	mov	r2, sp
1000e9f8:	7c12      	ldrb	r2, [r2, #16]
1000e9fa:	1ce3      	adds	r3, r4, #3
1000e9fc:	77da      	strb	r2, [r3, #31]
1000e9fe:	466a      	mov	r2, sp
1000ea00:	7d12      	ldrb	r2, [r2, #20]
1000ea02:	1d23      	adds	r3, r4, #4
1000ea04:	77da      	strb	r2, [r3, #31]
1000ea06:	466a      	mov	r2, sp
1000ea08:	7812      	ldrb	r2, [r2, #0]
1000ea0a:	1d63      	adds	r3, r4, #5
1000ea0c:	77da      	strb	r2, [r3, #31]
1000ea0e:	9b00      	ldr	r3, [sp, #0]
1000ea10:	1da2      	adds	r2, r4, #6
1000ea12:	0a1b      	lsrs	r3, r3, #8
1000ea14:	77d3      	strb	r3, [r2, #31]
1000ea16:	466a      	mov	r2, sp
1000ea18:	7912      	ldrb	r2, [r2, #4]
1000ea1a:	1de3      	adds	r3, r4, #7
1000ea1c:	77da      	strb	r2, [r3, #31]
1000ea1e:	1c22      	adds	r2, r4, #0
1000ea20:	9b01      	ldr	r3, [sp, #4]
1000ea22:	3208      	adds	r2, #8
1000ea24:	0a1b      	lsrs	r3, r3, #8
1000ea26:	77d3      	strb	r3, [r2, #31]
1000ea28:	466a      	mov	r2, sp
1000ea2a:	1c23      	adds	r3, r4, #0
1000ea2c:	7a12      	ldrb	r2, [r2, #8]
1000ea2e:	3328      	adds	r3, #40	; 0x28
1000ea30:	701a      	strb	r2, [r3, #0]
1000ea32:	1c22      	adds	r2, r4, #0
1000ea34:	9b02      	ldr	r3, [sp, #8]
1000ea36:	3229      	adds	r2, #41	; 0x29
1000ea38:	0a1b      	lsrs	r3, r3, #8
1000ea3a:	7013      	strb	r3, [r2, #0]
1000ea3c:	23d0      	movs	r3, #208	; 0xd0
1000ea3e:	4d13      	ldr	r5, [pc, #76]	; (1000ea8c <gapm_set_dev_config_cmd_handler+0xfc>)
1000ea40:	011b      	lsls	r3, r3, #4
1000ea42:	802b      	strh	r3, [r5, #0]
1000ea44:	2322      	movs	r3, #34	; 0x22
1000ea46:	71a3      	strb	r3, [r4, #6]
1000ea48:	2300      	movs	r3, #0
1000ea4a:	212a      	movs	r1, #42	; 0x2a
1000ea4c:	71e3      	strb	r3, [r4, #7]
1000ea4e:	1c20      	adds	r0, r4, #0
1000ea50:	4b0f      	ldr	r3, [pc, #60]	; (1000ea90 <gapm_set_dev_config_cmd_handler+0x100>)
1000ea52:	80af      	strh	r7, [r5, #4]
1000ea54:	4798      	blx	r3
1000ea56:	1c30      	adds	r0, r6, #0
1000ea58:	4b0e      	ldr	r3, [pc, #56]	; (1000ea94 <gapm_set_dev_config_cmd_handler+0x104>)
1000ea5a:	4798      	blx	r3
1000ea5c:	7833      	ldrb	r3, [r6, #0]
1000ea5e:	20e2      	movs	r0, #226	; 0xe2
1000ea60:	2b00      	cmp	r3, #0
1000ea62:	d106      	bne.n	1000ea72 <gapm_set_dev_config_cmd_handler+0xe2>
1000ea64:	68ab      	ldr	r3, [r5, #8]
1000ea66:	20e2      	movs	r0, #226	; 0xe2
1000ea68:	781a      	ldrb	r2, [r3, #0]
1000ea6a:	785b      	ldrb	r3, [r3, #1]
1000ea6c:	2a03      	cmp	r2, #3
1000ea6e:	d100      	bne.n	1000ea72 <gapm_set_dev_config_cmd_handler+0xe2>
1000ea70:	1c18      	adds	r0, r3, #0
1000ea72:	b009      	add	sp, #36	; 0x24
1000ea74:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ea76:	46c0      	nop			; (mov r8, r8)
1000ea78:	10015dec 	.word	0x10015dec
1000ea7c:	10015a7c 	.word	0x10015a7c
1000ea80:	1001149f 	.word	0x1001149f
1000ea84:	10015df8 	.word	0x10015df8
1000ea88:	10015dfe 	.word	0x10015dfe
1000ea8c:	10015a70 	.word	0x10015a70
1000ea90:	1000dd49 	.word	0x1000dd49
1000ea94:	1000ddad 	.word	0x1000ddad

1000ea98 <gapm_get_dev_config_cmd_handler>:
1000ea98:	4684      	mov	ip, r0
1000ea9a:	4663      	mov	r3, ip
1000ea9c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ea9e:	b085      	sub	sp, #20
1000eaa0:	9100      	str	r1, [sp, #0]
1000eaa2:	20cf      	movs	r0, #207	; 0xcf
1000eaa4:	2b01      	cmp	r3, #1
1000eaa6:	d854      	bhi.n	1000eb52 <gapm_get_dev_config_cmd_handler+0xba>
1000eaa8:	2900      	cmp	r1, #0
1000eaaa:	d052      	beq.n	1000eb52 <gapm_get_dev_config_cmd_handler+0xba>
1000eaac:	2200      	movs	r2, #0
1000eaae:	492a      	ldr	r1, [pc, #168]	; (1000eb58 <gapm_get_dev_config_cmd_handler+0xc0>)
1000eab0:	ab02      	add	r3, sp, #8
1000eab2:	880c      	ldrh	r4, [r1, #0]
1000eab4:	8809      	ldrh	r1, [r1, #0]
1000eab6:	1d9f      	adds	r7, r3, #6
1000eab8:	719a      	strb	r2, [r3, #6]
1000eaba:	4b28      	ldr	r3, [pc, #160]	; (1000eb5c <gapm_get_dev_config_cmd_handler+0xc4>)
1000eabc:	0a09      	lsrs	r1, r1, #8
1000eabe:	250d      	movs	r5, #13
1000eac0:	2606      	movs	r6, #6
1000eac2:	7159      	strb	r1, [r3, #5]
1000eac4:	4661      	mov	r1, ip
1000eac6:	701e      	strb	r6, [r3, #0]
1000eac8:	705d      	strb	r5, [r3, #1]
1000eaca:	709d      	strb	r5, [r3, #2]
1000eacc:	70da      	strb	r2, [r3, #3]
1000eace:	711c      	strb	r4, [r3, #4]
1000ead0:	2901      	cmp	r1, #1
1000ead2:	d13e      	bne.n	1000eb52 <gapm_get_dev_config_cmd_handler+0xba>
1000ead4:	21d0      	movs	r1, #208	; 0xd0
1000ead6:	4c22      	ldr	r4, [pc, #136]	; (1000eb60 <gapm_get_dev_config_cmd_handler+0xc8>)
1000ead8:	0109      	lsls	r1, r1, #4
1000eada:	8061      	strh	r1, [r4, #2]
1000eadc:	4921      	ldr	r1, [pc, #132]	; (1000eb64 <gapm_get_dev_config_cmd_handler+0xcc>)
1000eade:	71da      	strb	r2, [r3, #7]
1000eae0:	8021      	strh	r1, [r4, #0]
1000eae2:	4661      	mov	r1, ip
1000eae4:	721e      	strb	r6, [r3, #8]
1000eae6:	7199      	strb	r1, [r3, #6]
1000eae8:	1c18      	adds	r0, r3, #0
1000eaea:	2109      	movs	r1, #9
1000eaec:	4b1e      	ldr	r3, [pc, #120]	; (1000eb68 <gapm_get_dev_config_cmd_handler+0xd0>)
1000eaee:	80a5      	strh	r5, [r4, #4]
1000eaf0:	4798      	blx	r3
1000eaf2:	1c38      	adds	r0, r7, #0
1000eaf4:	4b1d      	ldr	r3, [pc, #116]	; (1000eb6c <gapm_get_dev_config_cmd_handler+0xd4>)
1000eaf6:	4798      	blx	r3
1000eaf8:	783b      	ldrb	r3, [r7, #0]
1000eafa:	20e2      	movs	r0, #226	; 0xe2
1000eafc:	9301      	str	r3, [sp, #4]
1000eafe:	2b00      	cmp	r3, #0
1000eb00:	d127      	bne.n	1000eb52 <gapm_get_dev_config_cmd_handler+0xba>
1000eb02:	8821      	ldrh	r1, [r4, #0]
1000eb04:	4a1a      	ldr	r2, [pc, #104]	; (1000eb70 <gapm_get_dev_config_cmd_handler+0xd8>)
1000eb06:	68a7      	ldr	r7, [r4, #8]
1000eb08:	3b01      	subs	r3, #1
1000eb0a:	4291      	cmp	r1, r2
1000eb0c:	d001      	beq.n	1000eb12 <gapm_get_dev_config_cmd_handler+0x7a>
1000eb0e:	8023      	strh	r3, [r4, #0]
1000eb10:	e01a      	b.n	1000eb48 <gapm_get_dev_config_cmd_handler+0xb0>
1000eb12:	8063      	strh	r3, [r4, #2]
1000eb14:	9b00      	ldr	r3, [sp, #0]
1000eb16:	1c39      	adds	r1, r7, #0
1000eb18:	1c58      	adds	r0, r3, #1
1000eb1a:	1c32      	adds	r2, r6, #0
1000eb1c:	4b15      	ldr	r3, [pc, #84]	; (1000eb74 <gapm_get_dev_config_cmd_handler+0xdc>)
1000eb1e:	4798      	blx	r3
1000eb20:	79bb      	ldrb	r3, [r7, #6]
1000eb22:	9a00      	ldr	r2, [sp, #0]
1000eb24:	7013      	strb	r3, [r2, #0]
1000eb26:	23d0      	movs	r3, #208	; 0xd0
1000eb28:	011b      	lsls	r3, r3, #4
1000eb2a:	8023      	strh	r3, [r4, #0]
1000eb2c:	ab02      	add	r3, sp, #8
1000eb2e:	80a5      	strh	r5, [r4, #4]
1000eb30:	1ddd      	adds	r5, r3, #7
1000eb32:	466b      	mov	r3, sp
1000eb34:	791b      	ldrb	r3, [r3, #4]
1000eb36:	1c28      	adds	r0, r5, #0
1000eb38:	702b      	strb	r3, [r5, #0]
1000eb3a:	4b0c      	ldr	r3, [pc, #48]	; (1000eb6c <gapm_get_dev_config_cmd_handler+0xd4>)
1000eb3c:	4798      	blx	r3
1000eb3e:	782b      	ldrb	r3, [r5, #0]
1000eb40:	20d0      	movs	r0, #208	; 0xd0
1000eb42:	2b00      	cmp	r3, #0
1000eb44:	d105      	bne.n	1000eb52 <gapm_get_dev_config_cmd_handler+0xba>
1000eb46:	68a7      	ldr	r7, [r4, #8]
1000eb48:	783b      	ldrb	r3, [r7, #0]
1000eb4a:	7878      	ldrb	r0, [r7, #1]
1000eb4c:	2b06      	cmp	r3, #6
1000eb4e:	d000      	beq.n	1000eb52 <gapm_get_dev_config_cmd_handler+0xba>
1000eb50:	20e2      	movs	r0, #226	; 0xe2
1000eb52:	b005      	add	sp, #20
1000eb54:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eb56:	46c0      	nop			; (mov r8, r8)
1000eb58:	10015a7c 	.word	0x10015a7c
1000eb5c:	10015dec 	.word	0x10015dec
1000eb60:	10015a70 	.word	0x10015a70
1000eb64:	00000d08 	.word	0x00000d08
1000eb68:	1000dd49 	.word	0x1000dd49
1000eb6c:	1000ddad 	.word	0x1000ddad
1000eb70:	0000ffff 	.word	0x0000ffff
1000eb74:	1001149f 	.word	0x1001149f

1000eb78 <gapm_cancel_cmd_handler>:
1000eb78:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000eb7a:	4916      	ldr	r1, [pc, #88]	; (1000ebd4 <gapm_cancel_cmd_handler+0x5c>)
1000eb7c:	4816      	ldr	r0, [pc, #88]	; (1000ebd8 <gapm_cancel_cmd_handler+0x60>)
1000eb7e:	880c      	ldrh	r4, [r1, #0]
1000eb80:	8809      	ldrh	r1, [r1, #0]
1000eb82:	466b      	mov	r3, sp
1000eb84:	0a09      	lsrs	r1, r1, #8
1000eb86:	7141      	strb	r1, [r0, #5]
1000eb88:	2102      	movs	r1, #2
1000eb8a:	2203      	movs	r2, #3
1000eb8c:	7201      	strb	r1, [r0, #8]
1000eb8e:	21d0      	movs	r1, #208	; 0xd0
1000eb90:	1ddd      	adds	r5, r3, #7
1000eb92:	2300      	movs	r3, #0
1000eb94:	7104      	strb	r4, [r0, #4]
1000eb96:	4c11      	ldr	r4, [pc, #68]	; (1000ebdc <gapm_cancel_cmd_handler+0x64>)
1000eb98:	7002      	strb	r2, [r0, #0]
1000eb9a:	0109      	lsls	r1, r1, #4
1000eb9c:	320a      	adds	r2, #10
1000eb9e:	702b      	strb	r3, [r5, #0]
1000eba0:	7042      	strb	r2, [r0, #1]
1000eba2:	7082      	strb	r2, [r0, #2]
1000eba4:	70c3      	strb	r3, [r0, #3]
1000eba6:	8021      	strh	r1, [r4, #0]
1000eba8:	80a2      	strh	r2, [r4, #4]
1000ebaa:	71c3      	strb	r3, [r0, #7]
1000ebac:	3a0c      	subs	r2, #12
1000ebae:	2109      	movs	r1, #9
1000ebb0:	4b0b      	ldr	r3, [pc, #44]	; (1000ebe0 <gapm_cancel_cmd_handler+0x68>)
1000ebb2:	7182      	strb	r2, [r0, #6]
1000ebb4:	4798      	blx	r3
1000ebb6:	1c28      	adds	r0, r5, #0
1000ebb8:	4b0a      	ldr	r3, [pc, #40]	; (1000ebe4 <gapm_cancel_cmd_handler+0x6c>)
1000ebba:	4798      	blx	r3
1000ebbc:	7828      	ldrb	r0, [r5, #0]
1000ebbe:	2800      	cmp	r0, #0
1000ebc0:	d001      	beq.n	1000ebc6 <gapm_cancel_cmd_handler+0x4e>
1000ebc2:	20e2      	movs	r0, #226	; 0xe2
1000ebc4:	e004      	b.n	1000ebd0 <gapm_cancel_cmd_handler+0x58>
1000ebc6:	68a3      	ldr	r3, [r4, #8]
1000ebc8:	785b      	ldrb	r3, [r3, #1]
1000ebca:	2b44      	cmp	r3, #68	; 0x44
1000ebcc:	d000      	beq.n	1000ebd0 <gapm_cancel_cmd_handler+0x58>
1000ebce:	1c18      	adds	r0, r3, #0
1000ebd0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000ebd2:	46c0      	nop			; (mov r8, r8)
1000ebd4:	10015a7c 	.word	0x10015a7c
1000ebd8:	10015dec 	.word	0x10015dec
1000ebdc:	10015a70 	.word	0x10015a70
1000ebe0:	1000dd49 	.word	0x1000dd49
1000ebe4:	1000ddad 	.word	0x1000ddad

1000ebe8 <gapm_dev_bdaddr_ind_handler>:
1000ebe8:	b538      	push	{r3, r4, r5, lr}
1000ebea:	1c05      	adds	r5, r0, #0
1000ebec:	1c0c      	adds	r4, r1, #0
1000ebee:	1c48      	adds	r0, r1, #1
1000ebf0:	2206      	movs	r2, #6
1000ebf2:	1c29      	adds	r1, r5, #0
1000ebf4:	4b02      	ldr	r3, [pc, #8]	; (1000ec00 <gapm_dev_bdaddr_ind_handler+0x18>)
1000ebf6:	4798      	blx	r3
1000ebf8:	79ab      	ldrb	r3, [r5, #6]
1000ebfa:	2000      	movs	r0, #0
1000ebfc:	7023      	strb	r3, [r4, #0]
1000ebfe:	bd38      	pop	{r3, r4, r5, pc}
1000ec00:	1001149f 	.word	0x1001149f

1000ec04 <gapm_cmp_evt>:
1000ec04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ec06:	7803      	ldrb	r3, [r0, #0]
1000ec08:	7845      	ldrb	r5, [r0, #1]
1000ec0a:	3b0c      	subs	r3, #12
1000ec0c:	1e18      	subs	r0, r3, #0
1000ec0e:	280b      	cmp	r0, #11
1000ec10:	d900      	bls.n	1000ec14 <gapm_cmp_evt+0x10>
1000ec12:	e08d      	b.n	1000ed30 <gapm_cmp_evt+0x12c>
1000ec14:	1c0c      	adds	r4, r1, #0
1000ec16:	f000 fbbf 	bl	1000f398 <__gnu_thumb1_case_uqi>
1000ec1a:	1952      	.short	0x1952
1000ec1c:	068b1919 	.word	0x068b1919
1000ec20:	8b595906 	.word	0x8b595906
1000ec24:	0d8b      	.short	0x0d8b
1000ec26:	2300      	movs	r3, #0
1000ec28:	2d45      	cmp	r5, #69	; 0x45
1000ec2a:	d000      	beq.n	1000ec2e <gapm_cmp_evt+0x2a>
1000ec2c:	1c2b      	adds	r3, r5, #0
1000ec2e:	7023      	strb	r3, [r4, #0]
1000ec30:	2002      	movs	r0, #2
1000ec32:	e07e      	b.n	1000ed32 <gapm_cmp_evt+0x12e>
1000ec34:	203b      	movs	r0, #59	; 0x3b
1000ec36:	2d00      	cmp	r5, #0
1000ec38:	d100      	bne.n	1000ec3c <gapm_cmp_evt+0x38>
1000ec3a:	e07a      	b.n	1000ed32 <gapm_cmp_evt+0x12e>
1000ec3c:	700d      	strb	r5, [r1, #0]
1000ec3e:	1c48      	adds	r0, r1, #1
1000ec40:	2210      	movs	r2, #16
1000ec42:	2100      	movs	r1, #0
1000ec44:	4b3b      	ldr	r3, [pc, #236]	; (1000ed34 <gapm_cmp_evt+0x130>)
1000ec46:	4798      	blx	r3
1000ec48:	200f      	movs	r0, #15
1000ec4a:	e072      	b.n	1000ed32 <gapm_cmp_evt+0x12e>
1000ec4c:	2d00      	cmp	r5, #0
1000ec4e:	d134      	bne.n	1000ecba <gapm_cmp_evt+0xb6>
1000ec50:	4b39      	ldr	r3, [pc, #228]	; (1000ed38 <gapm_cmp_evt+0x134>)
1000ec52:	4798      	blx	r3
1000ec54:	1e43      	subs	r3, r0, #1
1000ec56:	b2db      	uxtb	r3, r3
1000ec58:	1c28      	adds	r0, r5, #0
1000ec5a:	2b06      	cmp	r3, #6
1000ec5c:	d869      	bhi.n	1000ed32 <gapm_cmp_evt+0x12e>
1000ec5e:	466b      	mov	r3, sp
1000ec60:	4e36      	ldr	r6, [pc, #216]	; (1000ed3c <gapm_cmp_evt+0x138>)
1000ec62:	1dd9      	adds	r1, r3, #7
1000ec64:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000ec66:	4b36      	ldr	r3, [pc, #216]	; (1000ed40 <gapm_cmp_evt+0x13c>)
1000ec68:	4798      	blx	r3
1000ec6a:	2312      	movs	r3, #18
1000ec6c:	4358      	muls	r0, r3
1000ec6e:	4935      	ldr	r1, [pc, #212]	; (1000ed44 <gapm_cmp_evt+0x140>)
1000ec70:	1809      	adds	r1, r1, r0
1000ec72:	1c0b      	adds	r3, r1, #0
1000ec74:	894a      	ldrh	r2, [r1, #10]
1000ec76:	3308      	adds	r3, #8
1000ec78:	8122      	strh	r2, [r4, #8]
1000ec7a:	784f      	ldrb	r7, [r1, #1]
1000ec7c:	72a5      	strb	r5, [r4, #10]
1000ec7e:	7027      	strb	r7, [r4, #0]
1000ec80:	898a      	ldrh	r2, [r1, #12]
1000ec82:	1c60      	adds	r0, r4, #1
1000ec84:	81a2      	strh	r2, [r4, #12]
1000ec86:	88db      	ldrh	r3, [r3, #6]
1000ec88:	3102      	adds	r1, #2
1000ec8a:	81e3      	strh	r3, [r4, #14]
1000ec8c:	89cb      	ldrh	r3, [r1, #14]
1000ec8e:	2206      	movs	r2, #6
1000ec90:	8223      	strh	r3, [r4, #16]
1000ec92:	4b2d      	ldr	r3, [pc, #180]	; (1000ed48 <gapm_cmp_evt+0x144>)
1000ec94:	4798      	blx	r3
1000ec96:	2f00      	cmp	r7, #0
1000ec98:	d00a      	beq.n	1000ecb0 <gapm_cmp_evt+0xac>
1000ec9a:	79a3      	ldrb	r3, [r4, #6]
1000ec9c:	223f      	movs	r2, #63	; 0x3f
1000ec9e:	1c19      	adds	r1, r3, #0
1000eca0:	3501      	adds	r5, #1
1000eca2:	4391      	bics	r1, r2
1000eca4:	29c0      	cmp	r1, #192	; 0xc0
1000eca6:	d003      	beq.n	1000ecb0 <gapm_cmp_evt+0xac>
1000eca8:	065b      	lsls	r3, r3, #25
1000ecaa:	0fdb      	lsrs	r3, r3, #31
1000ecac:	3502      	adds	r5, #2
1000ecae:	1aed      	subs	r5, r5, r3
1000ecb0:	2301      	movs	r3, #1
1000ecb2:	425b      	negs	r3, r3
1000ecb4:	7025      	strb	r5, [r4, #0]
1000ecb6:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000ecb8:	e038      	b.n	1000ed2c <gapm_cmp_evt+0x128>
1000ecba:	700d      	strb	r5, [r1, #0]
1000ecbc:	e004      	b.n	1000ecc8 <gapm_cmp_evt+0xc4>
1000ecbe:	2300      	movs	r3, #0
1000ecc0:	2d45      	cmp	r5, #69	; 0x45
1000ecc2:	d000      	beq.n	1000ecc6 <gapm_cmp_evt+0xc2>
1000ecc4:	1c2b      	adds	r3, r5, #0
1000ecc6:	7023      	strb	r3, [r4, #0]
1000ecc8:	2003      	movs	r0, #3
1000ecca:	e032      	b.n	1000ed32 <gapm_cmp_evt+0x12e>
1000eccc:	4e1b      	ldr	r6, [pc, #108]	; (1000ed3c <gapm_cmp_evt+0x138>)
1000ecce:	2100      	movs	r1, #0
1000ecd0:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000ecd2:	4b1b      	ldr	r3, [pc, #108]	; (1000ed40 <gapm_cmp_evt+0x13c>)
1000ecd4:	4798      	blx	r3
1000ecd6:	2807      	cmp	r0, #7
1000ecd8:	d818      	bhi.n	1000ed0c <gapm_cmp_evt+0x108>
1000ecda:	2301      	movs	r3, #1
1000ecdc:	425b      	negs	r3, r3
1000ecde:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000ece0:	3313      	adds	r3, #19
1000ece2:	4358      	muls	r0, r3
1000ece4:	4917      	ldr	r1, [pc, #92]	; (1000ed44 <gapm_cmp_evt+0x140>)
1000ece6:	1809      	adds	r1, r1, r0
1000ece8:	1c0b      	adds	r3, r1, #0
1000ecea:	894a      	ldrh	r2, [r1, #10]
1000ecec:	3308      	adds	r3, #8
1000ecee:	8122      	strh	r2, [r4, #8]
1000ecf0:	784a      	ldrb	r2, [r1, #1]
1000ecf2:	72a5      	strb	r5, [r4, #10]
1000ecf4:	7022      	strb	r2, [r4, #0]
1000ecf6:	898a      	ldrh	r2, [r1, #12]
1000ecf8:	1c60      	adds	r0, r4, #1
1000ecfa:	81a2      	strh	r2, [r4, #12]
1000ecfc:	88db      	ldrh	r3, [r3, #6]
1000ecfe:	3102      	adds	r1, #2
1000ed00:	81e3      	strh	r3, [r4, #14]
1000ed02:	89cb      	ldrh	r3, [r1, #14]
1000ed04:	2206      	movs	r2, #6
1000ed06:	8223      	strh	r3, [r4, #16]
1000ed08:	4b0f      	ldr	r3, [pc, #60]	; (1000ed48 <gapm_cmp_evt+0x144>)
1000ed0a:	4798      	blx	r3
1000ed0c:	2200      	movs	r2, #0
1000ed0e:	7823      	ldrb	r3, [r4, #0]
1000ed10:	4293      	cmp	r3, r2
1000ed12:	d00a      	beq.n	1000ed2a <gapm_cmp_evt+0x126>
1000ed14:	79a3      	ldrb	r3, [r4, #6]
1000ed16:	323f      	adds	r2, #63	; 0x3f
1000ed18:	1c19      	adds	r1, r3, #0
1000ed1a:	4391      	bics	r1, r2
1000ed1c:	3a3e      	subs	r2, #62	; 0x3e
1000ed1e:	29c0      	cmp	r1, #192	; 0xc0
1000ed20:	d003      	beq.n	1000ed2a <gapm_cmp_evt+0x126>
1000ed22:	065b      	lsls	r3, r3, #25
1000ed24:	0fdb      	lsrs	r3, r3, #31
1000ed26:	3202      	adds	r2, #2
1000ed28:	1ad2      	subs	r2, r2, r3
1000ed2a:	7022      	strb	r2, [r4, #0]
1000ed2c:	2005      	movs	r0, #5
1000ed2e:	e000      	b.n	1000ed32 <gapm_cmp_evt+0x12e>
1000ed30:	2000      	movs	r0, #0
1000ed32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000ed34:	100114b1 	.word	0x100114b1
1000ed38:	1000df55 	.word	0x1000df55
1000ed3c:	10015b0e 	.word	0x10015b0e
1000ed40:	1000df19 	.word	0x1000df19
1000ed44:	10015a7e 	.word	0x10015a7e
1000ed48:	1001149f 	.word	0x1001149f

1000ed4c <gapm_adv_report_evt_handler>:
1000ed4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ed4e:	7843      	ldrb	r3, [r0, #1]
1000ed50:	1c05      	adds	r5, r0, #0
1000ed52:	9301      	str	r3, [sp, #4]
1000ed54:	466b      	mov	r3, sp
1000ed56:	1c0c      	adds	r4, r1, #0
1000ed58:	791b      	ldrb	r3, [r3, #4]
1000ed5a:	7806      	ldrb	r6, [r0, #0]
1000ed5c:	2206      	movs	r2, #6
1000ed5e:	704b      	strb	r3, [r1, #1]
1000ed60:	1c88      	adds	r0, r1, #2
1000ed62:	4f1b      	ldr	r7, [pc, #108]	; (1000edd0 <gapm_adv_report_evt_handler+0x84>)
1000ed64:	1ca9      	adds	r1, r5, #2
1000ed66:	47b8      	blx	r7
1000ed68:	1c20      	adds	r0, r4, #0
1000ed6a:	1c29      	adds	r1, r5, #0
1000ed6c:	7a2a      	ldrb	r2, [r5, #8]
1000ed6e:	3008      	adds	r0, #8
1000ed70:	77c2      	strb	r2, [r0, #31]
1000ed72:	3109      	adds	r1, #9
1000ed74:	3528      	adds	r5, #40	; 0x28
1000ed76:	47b8      	blx	r7
1000ed78:	782b      	ldrb	r3, [r5, #0]
1000ed7a:	b25a      	sxtb	r2, r3
1000ed7c:	2a00      	cmp	r2, #0
1000ed7e:	da01      	bge.n	1000ed84 <gapm_adv_report_evt_handler+0x38>
1000ed80:	3301      	adds	r3, #1
1000ed82:	b2db      	uxtb	r3, r3
1000ed84:	1c22      	adds	r2, r4, #0
1000ed86:	3228      	adds	r2, #40	; 0x28
1000ed88:	7013      	strb	r3, [r2, #0]
1000ed8a:	2200      	movs	r2, #0
1000ed8c:	9b01      	ldr	r3, [sp, #4]
1000ed8e:	4293      	cmp	r3, r2
1000ed90:	d00a      	beq.n	1000eda8 <gapm_adv_report_evt_handler+0x5c>
1000ed92:	79e3      	ldrb	r3, [r4, #7]
1000ed94:	323f      	adds	r2, #63	; 0x3f
1000ed96:	1c19      	adds	r1, r3, #0
1000ed98:	4391      	bics	r1, r2
1000ed9a:	3a3e      	subs	r2, #62	; 0x3e
1000ed9c:	29c0      	cmp	r1, #192	; 0xc0
1000ed9e:	d003      	beq.n	1000eda8 <gapm_adv_report_evt_handler+0x5c>
1000eda0:	065b      	lsls	r3, r3, #25
1000eda2:	0fdb      	lsrs	r3, r3, #31
1000eda4:	3202      	adds	r2, #2
1000eda6:	1ad2      	subs	r2, r2, r3
1000eda8:	7062      	strb	r2, [r4, #1]
1000edaa:	2e04      	cmp	r6, #4
1000edac:	d80f      	bhi.n	1000edce <gapm_adv_report_evt_handler+0x82>
1000edae:	1c30      	adds	r0, r6, #0
1000edb0:	f000 faf2 	bl	1000f398 <__gnu_thumb1_case_uqi>
1000edb4:	09070503 	.word	0x09070503
1000edb8:	0b          	.byte	0x0b
1000edb9:	00          	.byte	0x00
1000edba:	2300      	movs	r3, #0
1000edbc:	e006      	b.n	1000edcc <gapm_adv_report_evt_handler+0x80>
1000edbe:	2301      	movs	r3, #1
1000edc0:	e004      	b.n	1000edcc <gapm_adv_report_evt_handler+0x80>
1000edc2:	2302      	movs	r3, #2
1000edc4:	e002      	b.n	1000edcc <gapm_adv_report_evt_handler+0x80>
1000edc6:	2303      	movs	r3, #3
1000edc8:	e000      	b.n	1000edcc <gapm_adv_report_evt_handler+0x80>
1000edca:	2305      	movs	r3, #5
1000edcc:	7023      	strb	r3, [r4, #0]
1000edce:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000edd0:	1001149f 	.word	0x1001149f

1000edd4 <gapm_resolv_addr_cmd_handler>:
1000edd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000edd6:	2314      	movs	r3, #20
1000edd8:	4c12      	ldr	r4, [pc, #72]	; (1000ee24 <gapm_resolv_addr_cmd_handler+0x50>)
1000edda:	1c17      	adds	r7, r2, #0
1000eddc:	7023      	strb	r3, [r4, #0]
1000edde:	3b07      	subs	r3, #7
1000ede0:	7063      	strb	r3, [r4, #1]
1000ede2:	70a3      	strb	r3, [r4, #2]
1000ede4:	2300      	movs	r3, #0
1000ede6:	70e3      	strb	r3, [r4, #3]
1000ede8:	4b0f      	ldr	r3, [pc, #60]	; (1000ee28 <gapm_resolv_addr_cmd_handler+0x54>)
1000edea:	1c05      	adds	r5, r0, #0
1000edec:	881a      	ldrh	r2, [r3, #0]
1000edee:	881b      	ldrh	r3, [r3, #0]
1000edf0:	4e0e      	ldr	r6, [pc, #56]	; (1000ee2c <gapm_resolv_addr_cmd_handler+0x58>)
1000edf2:	0a1b      	lsrs	r3, r3, #8
1000edf4:	7163      	strb	r3, [r4, #5]
1000edf6:	2317      	movs	r3, #23
1000edf8:	012d      	lsls	r5, r5, #4
1000edfa:	7122      	strb	r2, [r4, #4]
1000edfc:	7260      	strb	r0, [r4, #9]
1000edfe:	2206      	movs	r2, #6
1000ee00:	480b      	ldr	r0, [pc, #44]	; (1000ee30 <gapm_resolv_addr_cmd_handler+0x5c>)
1000ee02:	7223      	strb	r3, [r4, #8]
1000ee04:	47b0      	blx	r6
1000ee06:	1c39      	adds	r1, r7, #0
1000ee08:	1c2a      	adds	r2, r5, #0
1000ee0a:	480a      	ldr	r0, [pc, #40]	; (1000ee34 <gapm_resolv_addr_cmd_handler+0x60>)
1000ee0c:	47b0      	blx	r6
1000ee0e:	1c29      	adds	r1, r5, #0
1000ee10:	3110      	adds	r1, #16
1000ee12:	1c0b      	adds	r3, r1, #0
1000ee14:	3b08      	subs	r3, #8
1000ee16:	71a3      	strb	r3, [r4, #6]
1000ee18:	121b      	asrs	r3, r3, #8
1000ee1a:	71e3      	strb	r3, [r4, #7]
1000ee1c:	1c20      	adds	r0, r4, #0
1000ee1e:	4b06      	ldr	r3, [pc, #24]	; (1000ee38 <gapm_resolv_addr_cmd_handler+0x64>)
1000ee20:	4798      	blx	r3
1000ee22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ee24:	10015dec 	.word	0x10015dec
1000ee28:	10015a7c 	.word	0x10015a7c
1000ee2c:	1001149f 	.word	0x1001149f
1000ee30:	10015df6 	.word	0x10015df6
1000ee34:	10015dfc 	.word	0x10015dfc
1000ee38:	1000dd49 	.word	0x1000dd49

1000ee3c <gapm_addr_solved_ind_handler>:
1000ee3c:	b570      	push	{r4, r5, r6, lr}
1000ee3e:	1c04      	adds	r4, r0, #0
1000ee40:	1c08      	adds	r0, r1, #0
1000ee42:	1c0d      	adds	r5, r1, #0
1000ee44:	4e05      	ldr	r6, [pc, #20]	; (1000ee5c <gapm_addr_solved_ind_handler+0x20>)
1000ee46:	1c21      	adds	r1, r4, #0
1000ee48:	2206      	movs	r2, #6
1000ee4a:	3011      	adds	r0, #17
1000ee4c:	47b0      	blx	r6
1000ee4e:	1c68      	adds	r0, r5, #1
1000ee50:	1da1      	adds	r1, r4, #6
1000ee52:	2210      	movs	r2, #16
1000ee54:	47b0      	blx	r6
1000ee56:	2300      	movs	r3, #0
1000ee58:	702b      	strb	r3, [r5, #0]
1000ee5a:	bd70      	pop	{r4, r5, r6, pc}
1000ee5c:	1001149f 	.word	0x1001149f

1000ee60 <gapm_profile_added_ind_handler>:
1000ee60:	b510      	push	{r4, lr}
1000ee62:	7843      	ldrb	r3, [r0, #1]
1000ee64:	7902      	ldrb	r2, [r0, #4]
1000ee66:	7944      	ldrb	r4, [r0, #5]
1000ee68:	7800      	ldrb	r0, [r0, #0]
1000ee6a:	021b      	lsls	r3, r3, #8
1000ee6c:	4303      	orrs	r3, r0
1000ee6e:	2b1b      	cmp	r3, #27
1000ee70:	d104      	bne.n	1000ee7c <gapm_profile_added_ind_handler+0x1c>
1000ee72:	2300      	movs	r3, #0
1000ee74:	700b      	strb	r3, [r1, #0]
1000ee76:	0223      	lsls	r3, r4, #8
1000ee78:	4313      	orrs	r3, r2
1000ee7a:	804b      	strh	r3, [r1, #2]
1000ee7c:	203b      	movs	r0, #59	; 0x3b
1000ee7e:	bd10      	pop	{r4, pc}

1000ee80 <gattc_read_req_ind_parser>:
1000ee80:	7843      	ldrb	r3, [r0, #1]
1000ee82:	7802      	ldrb	r2, [r0, #0]
1000ee84:	021b      	lsls	r3, r3, #8
1000ee86:	4313      	orrs	r3, r2
1000ee88:	804b      	strh	r3, [r1, #2]
1000ee8a:	4770      	bx	lr

1000ee8c <gattc_write_req_ind_parser>:
1000ee8c:	b508      	push	{r3, lr}
1000ee8e:	1c13      	adds	r3, r2, #0
1000ee90:	0a00      	lsrs	r0, r0, #8
1000ee92:	8010      	strh	r0, [r2, #0]
1000ee94:	784a      	ldrb	r2, [r1, #1]
1000ee96:	7808      	ldrb	r0, [r1, #0]
1000ee98:	0212      	lsls	r2, r2, #8
1000ee9a:	4302      	orrs	r2, r0
1000ee9c:	805a      	strh	r2, [r3, #2]
1000ee9e:	78ca      	ldrb	r2, [r1, #3]
1000eea0:	7888      	ldrb	r0, [r1, #2]
1000eea2:	0212      	lsls	r2, r2, #8
1000eea4:	4302      	orrs	r2, r0
1000eea6:	809a      	strh	r2, [r3, #4]
1000eea8:	794a      	ldrb	r2, [r1, #5]
1000eeaa:	7908      	ldrb	r0, [r1, #4]
1000eeac:	0212      	lsls	r2, r2, #8
1000eeae:	4302      	orrs	r2, r0
1000eeb0:	80da      	strh	r2, [r3, #6]
1000eeb2:	3308      	adds	r3, #8
1000eeb4:	1c18      	adds	r0, r3, #0
1000eeb6:	3106      	adds	r1, #6
1000eeb8:	4b01      	ldr	r3, [pc, #4]	; (1000eec0 <gattc_write_req_ind_parser+0x34>)
1000eeba:	4798      	blx	r3
1000eebc:	bd08      	pop	{r3, pc}
1000eebe:	46c0      	nop			; (mov r8, r8)
1000eec0:	1001149f 	.word	0x1001149f

1000eec4 <gattc_att_info_req_parser>:
1000eec4:	7843      	ldrb	r3, [r0, #1]
1000eec6:	7802      	ldrb	r2, [r0, #0]
1000eec8:	021b      	lsls	r3, r3, #8
1000eeca:	4313      	orrs	r3, r2
1000eecc:	800b      	strh	r3, [r1, #0]
1000eece:	4770      	bx	lr

1000eed0 <gattc_read_cfm>:
1000eed0:	b538      	push	{r3, r4, r5, lr}
1000eed2:	2514      	movs	r5, #20
1000eed4:	1c1c      	adds	r4, r3, #0
1000eed6:	4b14      	ldr	r3, [pc, #80]	; (1000ef28 <gattc_read_cfm+0x58>)
1000eed8:	70d9      	strb	r1, [r3, #3]
1000eeda:	4914      	ldr	r1, [pc, #80]	; (1000ef2c <gattc_read_cfm+0x5c>)
1000eedc:	701d      	strb	r5, [r3, #0]
1000eede:	3d08      	subs	r5, #8
1000eee0:	705d      	strb	r5, [r3, #1]
1000eee2:	709d      	strb	r5, [r3, #2]
1000eee4:	880d      	ldrh	r5, [r1, #0]
1000eee6:	8809      	ldrh	r1, [r1, #0]
1000eee8:	7218      	strb	r0, [r3, #8]
1000eeea:	0a09      	lsrs	r1, r1, #8
1000eeec:	7159      	strb	r1, [r3, #5]
1000eeee:	0a00      	lsrs	r0, r0, #8
1000eef0:	0a21      	lsrs	r1, r4, #8
1000eef2:	711d      	strb	r5, [r3, #4]
1000eef4:	7258      	strb	r0, [r3, #9]
1000eef6:	729c      	strb	r4, [r3, #10]
1000eef8:	72d9      	strb	r1, [r3, #11]
1000eefa:	731a      	strb	r2, [r3, #12]
1000eefc:	1c1d      	adds	r5, r3, #0
1000eefe:	2c00      	cmp	r4, #0
1000ef00:	d007      	beq.n	1000ef12 <gattc_read_cfm+0x42>
1000ef02:	9904      	ldr	r1, [sp, #16]
1000ef04:	1c22      	adds	r2, r4, #0
1000ef06:	480a      	ldr	r0, [pc, #40]	; (1000ef30 <gattc_read_cfm+0x60>)
1000ef08:	4b0a      	ldr	r3, [pc, #40]	; (1000ef34 <gattc_read_cfm+0x64>)
1000ef0a:	340d      	adds	r4, #13
1000ef0c:	4798      	blx	r3
1000ef0e:	b2a1      	uxth	r1, r4
1000ef10:	e001      	b.n	1000ef16 <gattc_read_cfm+0x46>
1000ef12:	210e      	movs	r1, #14
1000ef14:	735c      	strb	r4, [r3, #13]
1000ef16:	1c0b      	adds	r3, r1, #0
1000ef18:	3b08      	subs	r3, #8
1000ef1a:	71ab      	strb	r3, [r5, #6]
1000ef1c:	121b      	asrs	r3, r3, #8
1000ef1e:	71eb      	strb	r3, [r5, #7]
1000ef20:	1c28      	adds	r0, r5, #0
1000ef22:	4b05      	ldr	r3, [pc, #20]	; (1000ef38 <gattc_read_cfm+0x68>)
1000ef24:	4798      	blx	r3
1000ef26:	bd38      	pop	{r3, r4, r5, pc}
1000ef28:	10015dec 	.word	0x10015dec
1000ef2c:	10015a7c 	.word	0x10015a7c
1000ef30:	10015df9 	.word	0x10015df9
1000ef34:	1001149f 	.word	0x1001149f
1000ef38:	1000dd49 	.word	0x1000dd49

1000ef3c <gattc_write_cfm>:
1000ef3c:	4b0d      	ldr	r3, [pc, #52]	; (1000ef74 <gattc_write_cfm+0x38>)
1000ef3e:	b510      	push	{r4, lr}
1000ef40:	729a      	strb	r2, [r3, #10]
1000ef42:	2203      	movs	r2, #3
1000ef44:	2416      	movs	r4, #22
1000ef46:	719a      	strb	r2, [r3, #6]
1000ef48:	2200      	movs	r2, #0
1000ef4a:	70d9      	strb	r1, [r3, #3]
1000ef4c:	490a      	ldr	r1, [pc, #40]	; (1000ef78 <gattc_write_cfm+0x3c>)
1000ef4e:	701c      	strb	r4, [r3, #0]
1000ef50:	3c0a      	subs	r4, #10
1000ef52:	705c      	strb	r4, [r3, #1]
1000ef54:	709c      	strb	r4, [r3, #2]
1000ef56:	880c      	ldrh	r4, [r1, #0]
1000ef58:	8809      	ldrh	r1, [r1, #0]
1000ef5a:	7218      	strb	r0, [r3, #8]
1000ef5c:	0a09      	lsrs	r1, r1, #8
1000ef5e:	0a00      	lsrs	r0, r0, #8
1000ef60:	711c      	strb	r4, [r3, #4]
1000ef62:	7159      	strb	r1, [r3, #5]
1000ef64:	7258      	strb	r0, [r3, #9]
1000ef66:	71da      	strb	r2, [r3, #7]
1000ef68:	1c18      	adds	r0, r3, #0
1000ef6a:	210b      	movs	r1, #11
1000ef6c:	4b03      	ldr	r3, [pc, #12]	; (1000ef7c <gattc_write_cfm+0x40>)
1000ef6e:	4798      	blx	r3
1000ef70:	bd10      	pop	{r4, pc}
1000ef72:	46c0      	nop			; (mov r8, r8)
1000ef74:	10015dec 	.word	0x10015dec
1000ef78:	10015a7c 	.word	0x10015a7c
1000ef7c:	1000dd49 	.word	0x1000dd49

1000ef80 <gattc_att_info_cfm>:
1000ef80:	b538      	push	{r3, r4, r5, lr}
1000ef82:	4c0e      	ldr	r4, [pc, #56]	; (1000efbc <gattc_att_info_cfm+0x3c>)
1000ef84:	2518      	movs	r5, #24
1000ef86:	7323      	strb	r3, [r4, #12]
1000ef88:	2305      	movs	r3, #5
1000ef8a:	71a3      	strb	r3, [r4, #6]
1000ef8c:	2300      	movs	r3, #0
1000ef8e:	70e1      	strb	r1, [r4, #3]
1000ef90:	490b      	ldr	r1, [pc, #44]	; (1000efc0 <gattc_att_info_cfm+0x40>)
1000ef92:	7025      	strb	r5, [r4, #0]
1000ef94:	3d0c      	subs	r5, #12
1000ef96:	7065      	strb	r5, [r4, #1]
1000ef98:	70a5      	strb	r5, [r4, #2]
1000ef9a:	880d      	ldrh	r5, [r1, #0]
1000ef9c:	8809      	ldrh	r1, [r1, #0]
1000ef9e:	7220      	strb	r0, [r4, #8]
1000efa0:	0a09      	lsrs	r1, r1, #8
1000efa2:	0a00      	lsrs	r0, r0, #8
1000efa4:	7161      	strb	r1, [r4, #5]
1000efa6:	7260      	strb	r0, [r4, #9]
1000efa8:	72a2      	strb	r2, [r4, #10]
1000efaa:	71e3      	strb	r3, [r4, #7]
1000efac:	0a12      	lsrs	r2, r2, #8
1000efae:	1c20      	adds	r0, r4, #0
1000efb0:	210d      	movs	r1, #13
1000efb2:	4b04      	ldr	r3, [pc, #16]	; (1000efc4 <gattc_att_info_cfm+0x44>)
1000efb4:	7125      	strb	r5, [r4, #4]
1000efb6:	72e2      	strb	r2, [r4, #11]
1000efb8:	4798      	blx	r3
1000efba:	bd38      	pop	{r3, r4, r5, pc}
1000efbc:	10015dec 	.word	0x10015dec
1000efc0:	10015a7c 	.word	0x10015a7c
1000efc4:	1000dd49 	.word	0x1000dd49

1000efc8 <gattc_event_cfm_handler>:
1000efc8:	220e      	movs	r2, #14
1000efca:	b508      	push	{r3, lr}
1000efcc:	4b0b      	ldr	r3, [pc, #44]	; (1000effc <gattc_event_cfm_handler+0x34>)
1000efce:	701a      	strb	r2, [r3, #0]
1000efd0:	3a02      	subs	r2, #2
1000efd2:	705a      	strb	r2, [r3, #1]
1000efd4:	709a      	strb	r2, [r3, #2]
1000efd6:	4a0a      	ldr	r2, [pc, #40]	; (1000f000 <gattc_event_cfm_handler+0x38>)
1000efd8:	70d8      	strb	r0, [r3, #3]
1000efda:	8810      	ldrh	r0, [r2, #0]
1000efdc:	8812      	ldrh	r2, [r2, #0]
1000efde:	7219      	strb	r1, [r3, #8]
1000efe0:	0a12      	lsrs	r2, r2, #8
1000efe2:	715a      	strb	r2, [r3, #5]
1000efe4:	2202      	movs	r2, #2
1000efe6:	719a      	strb	r2, [r3, #6]
1000efe8:	2200      	movs	r2, #0
1000efea:	0a09      	lsrs	r1, r1, #8
1000efec:	7118      	strb	r0, [r3, #4]
1000efee:	7259      	strb	r1, [r3, #9]
1000eff0:	71da      	strb	r2, [r3, #7]
1000eff2:	1c18      	adds	r0, r3, #0
1000eff4:	210a      	movs	r1, #10
1000eff6:	4b03      	ldr	r3, [pc, #12]	; (1000f004 <gattc_event_cfm_handler+0x3c>)
1000eff8:	4798      	blx	r3
1000effa:	bd08      	pop	{r3, pc}
1000effc:	10015dec 	.word	0x10015dec
1000f000:	10015a7c 	.word	0x10015a7c
1000f004:	1000dd49 	.word	0x1000dd49

1000f008 <gattc_disc_svc_ind_parser>:
1000f008:	b570      	push	{r4, r5, r6, lr}
1000f00a:	1c15      	adds	r5, r2, #0
1000f00c:	0a00      	lsrs	r0, r0, #8
1000f00e:	8010      	strh	r0, [r2, #0]
1000f010:	784b      	ldrb	r3, [r1, #1]
1000f012:	780a      	ldrb	r2, [r1, #0]
1000f014:	021b      	lsls	r3, r3, #8
1000f016:	4313      	orrs	r3, r2
1000f018:	806b      	strh	r3, [r5, #2]
1000f01a:	78cb      	ldrb	r3, [r1, #3]
1000f01c:	788a      	ldrb	r2, [r1, #2]
1000f01e:	021b      	lsls	r3, r3, #8
1000f020:	4313      	orrs	r3, r2
1000f022:	80ab      	strh	r3, [r5, #4]
1000f024:	790e      	ldrb	r6, [r1, #4]
1000f026:	4b05      	ldr	r3, [pc, #20]	; (1000f03c <gattc_disc_svc_ind_parser+0x34>)
1000f028:	1c30      	adds	r0, r6, #0
1000f02a:	1c0c      	adds	r4, r1, #0
1000f02c:	4798      	blx	r3
1000f02e:	1c32      	adds	r2, r6, #0
1000f030:	71a8      	strb	r0, [r5, #6]
1000f032:	1d61      	adds	r1, r4, #5
1000f034:	1de8      	adds	r0, r5, #7
1000f036:	4b02      	ldr	r3, [pc, #8]	; (1000f040 <gattc_disc_svc_ind_parser+0x38>)
1000f038:	4798      	blx	r3
1000f03a:	bd70      	pop	{r4, r5, r6, pc}
1000f03c:	1000d701 	.word	0x1000d701
1000f040:	1001149f 	.word	0x1001149f

1000f044 <gattc_disc_svc_incl_ind_parser>:
1000f044:	b570      	push	{r4, r5, r6, lr}
1000f046:	1c15      	adds	r5, r2, #0
1000f048:	0a00      	lsrs	r0, r0, #8
1000f04a:	8010      	strh	r0, [r2, #0]
1000f04c:	784b      	ldrb	r3, [r1, #1]
1000f04e:	780a      	ldrb	r2, [r1, #0]
1000f050:	021b      	lsls	r3, r3, #8
1000f052:	4313      	orrs	r3, r2
1000f054:	806b      	strh	r3, [r5, #2]
1000f056:	78cb      	ldrb	r3, [r1, #3]
1000f058:	788a      	ldrb	r2, [r1, #2]
1000f05a:	021b      	lsls	r3, r3, #8
1000f05c:	4313      	orrs	r3, r2
1000f05e:	80ab      	strh	r3, [r5, #4]
1000f060:	794b      	ldrb	r3, [r1, #5]
1000f062:	790a      	ldrb	r2, [r1, #4]
1000f064:	021b      	lsls	r3, r3, #8
1000f066:	4313      	orrs	r3, r2
1000f068:	80eb      	strh	r3, [r5, #6]
1000f06a:	798e      	ldrb	r6, [r1, #6]
1000f06c:	4b05      	ldr	r3, [pc, #20]	; (1000f084 <gattc_disc_svc_incl_ind_parser+0x40>)
1000f06e:	1c30      	adds	r0, r6, #0
1000f070:	1c0c      	adds	r4, r1, #0
1000f072:	4798      	blx	r3
1000f074:	7228      	strb	r0, [r5, #8]
1000f076:	1c28      	adds	r0, r5, #0
1000f078:	1c32      	adds	r2, r6, #0
1000f07a:	1de1      	adds	r1, r4, #7
1000f07c:	4b02      	ldr	r3, [pc, #8]	; (1000f088 <gattc_disc_svc_incl_ind_parser+0x44>)
1000f07e:	3009      	adds	r0, #9
1000f080:	4798      	blx	r3
1000f082:	bd70      	pop	{r4, r5, r6, pc}
1000f084:	1000d701 	.word	0x1000d701
1000f088:	1001149f 	.word	0x1001149f

1000f08c <gattc_disc_char_ind_parser>:
1000f08c:	b570      	push	{r4, r5, r6, lr}
1000f08e:	1c15      	adds	r5, r2, #0
1000f090:	0a00      	lsrs	r0, r0, #8
1000f092:	8010      	strh	r0, [r2, #0]
1000f094:	784b      	ldrb	r3, [r1, #1]
1000f096:	780a      	ldrb	r2, [r1, #0]
1000f098:	021b      	lsls	r3, r3, #8
1000f09a:	4313      	orrs	r3, r2
1000f09c:	806b      	strh	r3, [r5, #2]
1000f09e:	78cb      	ldrb	r3, [r1, #3]
1000f0a0:	788a      	ldrb	r2, [r1, #2]
1000f0a2:	021b      	lsls	r3, r3, #8
1000f0a4:	4313      	orrs	r3, r2
1000f0a6:	80ab      	strh	r3, [r5, #4]
1000f0a8:	790b      	ldrb	r3, [r1, #4]
1000f0aa:	1c0c      	adds	r4, r1, #0
1000f0ac:	71ab      	strb	r3, [r5, #6]
1000f0ae:	794e      	ldrb	r6, [r1, #5]
1000f0b0:	4b05      	ldr	r3, [pc, #20]	; (1000f0c8 <gattc_disc_char_ind_parser+0x3c>)
1000f0b2:	1c30      	adds	r0, r6, #0
1000f0b4:	4798      	blx	r3
1000f0b6:	71e8      	strb	r0, [r5, #7]
1000f0b8:	1c28      	adds	r0, r5, #0
1000f0ba:	1c32      	adds	r2, r6, #0
1000f0bc:	1da1      	adds	r1, r4, #6
1000f0be:	4b03      	ldr	r3, [pc, #12]	; (1000f0cc <gattc_disc_char_ind_parser+0x40>)
1000f0c0:	3008      	adds	r0, #8
1000f0c2:	4798      	blx	r3
1000f0c4:	bd70      	pop	{r4, r5, r6, pc}
1000f0c6:	46c0      	nop			; (mov r8, r8)
1000f0c8:	1000d701 	.word	0x1000d701
1000f0cc:	1001149f 	.word	0x1001149f

1000f0d0 <gattc_disc_char_desc_ind_parser>:
1000f0d0:	b570      	push	{r4, r5, r6, lr}
1000f0d2:	1c15      	adds	r5, r2, #0
1000f0d4:	0a00      	lsrs	r0, r0, #8
1000f0d6:	8010      	strh	r0, [r2, #0]
1000f0d8:	784b      	ldrb	r3, [r1, #1]
1000f0da:	780a      	ldrb	r2, [r1, #0]
1000f0dc:	021b      	lsls	r3, r3, #8
1000f0de:	4313      	orrs	r3, r2
1000f0e0:	806b      	strh	r3, [r5, #2]
1000f0e2:	788e      	ldrb	r6, [r1, #2]
1000f0e4:	4b05      	ldr	r3, [pc, #20]	; (1000f0fc <gattc_disc_char_desc_ind_parser+0x2c>)
1000f0e6:	1c30      	adds	r0, r6, #0
1000f0e8:	1c0c      	adds	r4, r1, #0
1000f0ea:	4798      	blx	r3
1000f0ec:	1c32      	adds	r2, r6, #0
1000f0ee:	7128      	strb	r0, [r5, #4]
1000f0f0:	1ce1      	adds	r1, r4, #3
1000f0f2:	1d68      	adds	r0, r5, #5
1000f0f4:	4b02      	ldr	r3, [pc, #8]	; (1000f100 <gattc_disc_char_desc_ind_parser+0x30>)
1000f0f6:	4798      	blx	r3
1000f0f8:	bd70      	pop	{r4, r5, r6, pc}
1000f0fa:	46c0      	nop			; (mov r8, r8)
1000f0fc:	1000d701 	.word	0x1000d701
1000f100:	1001149f 	.word	0x1001149f

1000f104 <gattc_event_ind_and_notification_parser>:
1000f104:	b510      	push	{r4, lr}
1000f106:	780c      	ldrb	r4, [r1, #0]
1000f108:	1c13      	adds	r3, r2, #0
1000f10a:	2c12      	cmp	r4, #18
1000f10c:	d10e      	bne.n	1000f12c <gattc_event_ind_and_notification_parser+0x28>
1000f10e:	0a00      	lsrs	r0, r0, #8
1000f110:	8010      	strh	r0, [r2, #0]
1000f112:	788a      	ldrb	r2, [r1, #2]
1000f114:	709a      	strb	r2, [r3, #2]
1000f116:	7948      	ldrb	r0, [r1, #5]
1000f118:	790c      	ldrb	r4, [r1, #4]
1000f11a:	0200      	lsls	r0, r0, #8
1000f11c:	4320      	orrs	r0, r4
1000f11e:	8098      	strh	r0, [r3, #4]
1000f120:	3106      	adds	r1, #6
1000f122:	1d98      	adds	r0, r3, #6
1000f124:	4b0b      	ldr	r3, [pc, #44]	; (1000f154 <gattc_event_ind_and_notification_parser+0x50>)
1000f126:	4798      	blx	r3
1000f128:	221b      	movs	r2, #27
1000f12a:	e010      	b.n	1000f14e <gattc_event_ind_and_notification_parser+0x4a>
1000f12c:	2200      	movs	r2, #0
1000f12e:	2c13      	cmp	r4, #19
1000f130:	d10d      	bne.n	1000f14e <gattc_event_ind_and_notification_parser+0x4a>
1000f132:	0a00      	lsrs	r0, r0, #8
1000f134:	8018      	strh	r0, [r3, #0]
1000f136:	788a      	ldrb	r2, [r1, #2]
1000f138:	709a      	strb	r2, [r3, #2]
1000f13a:	7908      	ldrb	r0, [r1, #4]
1000f13c:	78cc      	ldrb	r4, [r1, #3]
1000f13e:	0200      	lsls	r0, r0, #8
1000f140:	4320      	orrs	r0, r4
1000f142:	8098      	strh	r0, [r3, #4]
1000f144:	3106      	adds	r1, #6
1000f146:	1d98      	adds	r0, r3, #6
1000f148:	4b02      	ldr	r3, [pc, #8]	; (1000f154 <gattc_event_ind_and_notification_parser+0x50>)
1000f14a:	4798      	blx	r3
1000f14c:	221c      	movs	r2, #28
1000f14e:	1c10      	adds	r0, r2, #0
1000f150:	bd10      	pop	{r4, pc}
1000f152:	46c0      	nop			; (mov r8, r8)
1000f154:	1001149f 	.word	0x1001149f

1000f158 <gattc_complete_evt_handler>:
1000f158:	b500      	push	{lr}
1000f15a:	0a00      	lsrs	r0, r0, #8
1000f15c:	8010      	strh	r0, [r2, #0]
1000f15e:	7808      	ldrb	r0, [r1, #0]
1000f160:	7090      	strb	r0, [r2, #2]
1000f162:	784b      	ldrb	r3, [r1, #1]
1000f164:	3801      	subs	r0, #1
1000f166:	70d3      	strb	r3, [r2, #3]
1000f168:	2813      	cmp	r0, #19
1000f16a:	d82c      	bhi.n	1000f1c6 <gattc_complete_evt_handler+0x6e>
1000f16c:	f000 f914 	bl	1000f398 <__gnu_thumb1_case_uqi>
1000f170:	0a0a0a0c 	.word	0x0a0a0a0c
1000f174:	210a0a0a 	.word	0x210a0a0a
1000f178:	111f2121 	.word	0x111f2121
1000f17c:	2b111111 	.word	0x2b111111
1000f180:	2919132b 	.word	0x2919132b
1000f184:	2017      	movs	r0, #23
1000f186:	e01f      	b.n	1000f1c8 <gattc_complete_evt_handler+0x70>
1000f188:	2024      	movs	r0, #36	; 0x24
1000f18a:	2b00      	cmp	r3, #0
1000f18c:	d11c      	bne.n	1000f1c8 <gattc_complete_evt_handler+0x70>
1000f18e:	3017      	adds	r0, #23
1000f190:	e01a      	b.n	1000f1c8 <gattc_complete_evt_handler+0x70>
1000f192:	2025      	movs	r0, #37	; 0x25
1000f194:	e018      	b.n	1000f1c8 <gattc_complete_evt_handler+0x70>
1000f196:	4a0d      	ldr	r2, [pc, #52]	; (1000f1cc <gattc_complete_evt_handler+0x74>)
1000f198:	201d      	movs	r0, #29
1000f19a:	6813      	ldr	r3, [r2, #0]
1000f19c:	3b01      	subs	r3, #1
1000f19e:	6013      	str	r3, [r2, #0]
1000f1a0:	e012      	b.n	1000f1c8 <gattc_complete_evt_handler+0x70>
1000f1a2:	4a0a      	ldr	r2, [pc, #40]	; (1000f1cc <gattc_complete_evt_handler+0x74>)
1000f1a4:	201e      	movs	r0, #30
1000f1a6:	6813      	ldr	r3, [r2, #0]
1000f1a8:	3b01      	subs	r3, #1
1000f1aa:	6013      	str	r3, [r2, #0]
1000f1ac:	e00c      	b.n	1000f1c8 <gattc_complete_evt_handler+0x70>
1000f1ae:	2019      	movs	r0, #25
1000f1b0:	e00a      	b.n	1000f1c8 <gattc_complete_evt_handler+0x70>
1000f1b2:	203b      	movs	r0, #59	; 0x3b
1000f1b4:	2b00      	cmp	r3, #0
1000f1b6:	d007      	beq.n	1000f1c8 <gattc_complete_evt_handler+0x70>
1000f1b8:	2182      	movs	r1, #130	; 0x82
1000f1ba:	0089      	lsls	r1, r1, #2
1000f1bc:	5453      	strb	r3, [r2, r1]
1000f1be:	3823      	subs	r0, #35	; 0x23
1000f1c0:	e002      	b.n	1000f1c8 <gattc_complete_evt_handler+0x70>
1000f1c2:	2021      	movs	r0, #33	; 0x21
1000f1c4:	e000      	b.n	1000f1c8 <gattc_complete_evt_handler+0x70>
1000f1c6:	2000      	movs	r0, #0
1000f1c8:	bd00      	pop	{pc}
1000f1ca:	46c0      	nop			; (mov r8, r8)
1000f1cc:	10014dd8 	.word	0x10014dd8

1000f1d0 <gattc_event_mtu_changed_ind_parser>:
1000f1d0:	0a00      	lsrs	r0, r0, #8
1000f1d2:	8010      	strh	r0, [r2, #0]
1000f1d4:	784b      	ldrb	r3, [r1, #1]
1000f1d6:	7809      	ldrb	r1, [r1, #0]
1000f1d8:	021b      	lsls	r3, r3, #8
1000f1da:	430b      	orrs	r3, r1
1000f1dc:	8053      	strh	r3, [r2, #2]
1000f1de:	4770      	bx	lr

1000f1e0 <gattc_read_ind_parser>:
1000f1e0:	0a00      	lsrs	r0, r0, #8
1000f1e2:	b508      	push	{r3, lr}
1000f1e4:	8010      	strh	r0, [r2, #0]
1000f1e6:	1c13      	adds	r3, r2, #0
1000f1e8:	2282      	movs	r2, #130	; 0x82
1000f1ea:	2000      	movs	r0, #0
1000f1ec:	0092      	lsls	r2, r2, #2
1000f1ee:	5498      	strb	r0, [r3, r2]
1000f1f0:	784a      	ldrb	r2, [r1, #1]
1000f1f2:	7808      	ldrb	r0, [r1, #0]
1000f1f4:	0212      	lsls	r2, r2, #8
1000f1f6:	4302      	orrs	r2, r0
1000f1f8:	805a      	strh	r2, [r3, #2]
1000f1fa:	78ca      	ldrb	r2, [r1, #3]
1000f1fc:	7888      	ldrb	r0, [r1, #2]
1000f1fe:	0212      	lsls	r2, r2, #8
1000f200:	4302      	orrs	r2, r0
1000f202:	80da      	strh	r2, [r3, #6]
1000f204:	794a      	ldrb	r2, [r1, #5]
1000f206:	7908      	ldrb	r0, [r1, #4]
1000f208:	0212      	lsls	r2, r2, #8
1000f20a:	4302      	orrs	r2, r0
1000f20c:	809a      	strh	r2, [r3, #4]
1000f20e:	3308      	adds	r3, #8
1000f210:	1c18      	adds	r0, r3, #0
1000f212:	3106      	adds	r1, #6
1000f214:	4b01      	ldr	r3, [pc, #4]	; (1000f21c <gattc_read_ind_parser+0x3c>)
1000f216:	4798      	blx	r3
1000f218:	bd08      	pop	{r3, pc}
1000f21a:	46c0      	nop			; (mov r8, r8)
1000f21c:	1001149f 	.word	0x1001149f

1000f220 <gattc_svc_changed_cfg_ind_parser>:
1000f220:	0a00      	lsrs	r0, r0, #8
1000f222:	8010      	strh	r0, [r2, #0]
1000f224:	784b      	ldrb	r3, [r1, #1]
1000f226:	7809      	ldrb	r1, [r1, #0]
1000f228:	021b      	lsls	r3, r3, #8
1000f22a:	430b      	orrs	r3, r1
1000f22c:	8053      	strh	r3, [r2, #2]
1000f22e:	4770      	bx	lr

1000f230 <init_gattc_task_module>:
1000f230:	2300      	movs	r3, #0
1000f232:	4a02      	ldr	r2, [pc, #8]	; (1000f23c <init_gattc_task_module+0xc>)
1000f234:	8013      	strh	r3, [r2, #0]
1000f236:	4a02      	ldr	r2, [pc, #8]	; (1000f240 <init_gattc_task_module+0x10>)
1000f238:	8013      	strh	r3, [r2, #0]
1000f23a:	4770      	bx	lr
1000f23c:	10014dd2 	.word	0x10014dd2
1000f240:	10014dd4 	.word	0x10014dd4

1000f244 <gattm_att_set_value_req_handler>:
1000f244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f246:	466b      	mov	r3, sp
1000f248:	1dde      	adds	r6, r3, #7
1000f24a:	2300      	movs	r3, #0
1000f24c:	1c0d      	adds	r5, r1, #0
1000f24e:	210c      	movs	r1, #12
1000f250:	270b      	movs	r7, #11
1000f252:	4c17      	ldr	r4, [pc, #92]	; (1000f2b0 <gattm_att_set_value_req_handler+0x6c>)
1000f254:	7033      	strb	r3, [r6, #0]
1000f256:	70e3      	strb	r3, [r4, #3]
1000f258:	4b16      	ldr	r3, [pc, #88]	; (1000f2b4 <gattm_att_set_value_req_handler+0x70>)
1000f25a:	7021      	strb	r1, [r4, #0]
1000f25c:	8819      	ldrh	r1, [r3, #0]
1000f25e:	881b      	ldrh	r3, [r3, #0]
1000f260:	7220      	strb	r0, [r4, #8]
1000f262:	0a1b      	lsrs	r3, r3, #8
1000f264:	7163      	strb	r3, [r4, #5]
1000f266:	0a00      	lsrs	r0, r0, #8
1000f268:	0a2b      	lsrs	r3, r5, #8
1000f26a:	7121      	strb	r1, [r4, #4]
1000f26c:	7260      	strb	r0, [r4, #9]
1000f26e:	1c11      	adds	r1, r2, #0
1000f270:	72a5      	strb	r5, [r4, #10]
1000f272:	1c2a      	adds	r2, r5, #0
1000f274:	72e3      	strb	r3, [r4, #11]
1000f276:	350c      	adds	r5, #12
1000f278:	4b0f      	ldr	r3, [pc, #60]	; (1000f2b8 <gattm_att_set_value_req_handler+0x74>)
1000f27a:	4810      	ldr	r0, [pc, #64]	; (1000f2bc <gattm_att_set_value_req_handler+0x78>)
1000f27c:	7067      	strb	r7, [r4, #1]
1000f27e:	70a7      	strb	r7, [r4, #2]
1000f280:	4798      	blx	r3
1000f282:	b2a9      	uxth	r1, r5
1000f284:	4b0e      	ldr	r3, [pc, #56]	; (1000f2c0 <gattm_att_set_value_req_handler+0x7c>)
1000f286:	4d0f      	ldr	r5, [pc, #60]	; (1000f2c4 <gattm_att_set_value_req_handler+0x80>)
1000f288:	1c20      	adds	r0, r4, #0
1000f28a:	802b      	strh	r3, [r5, #0]
1000f28c:	1c0b      	adds	r3, r1, #0
1000f28e:	3b08      	subs	r3, #8
1000f290:	71a3      	strb	r3, [r4, #6]
1000f292:	121b      	asrs	r3, r3, #8
1000f294:	71e3      	strb	r3, [r4, #7]
1000f296:	4b0c      	ldr	r3, [pc, #48]	; (1000f2c8 <gattm_att_set_value_req_handler+0x84>)
1000f298:	80af      	strh	r7, [r5, #4]
1000f29a:	4798      	blx	r3
1000f29c:	1c30      	adds	r0, r6, #0
1000f29e:	4b0b      	ldr	r3, [pc, #44]	; (1000f2cc <gattm_att_set_value_req_handler+0x88>)
1000f2a0:	4798      	blx	r3
1000f2a2:	7833      	ldrb	r3, [r6, #0]
1000f2a4:	20e2      	movs	r0, #226	; 0xe2
1000f2a6:	2b00      	cmp	r3, #0
1000f2a8:	d101      	bne.n	1000f2ae <gattm_att_set_value_req_handler+0x6a>
1000f2aa:	68ab      	ldr	r3, [r5, #8]
1000f2ac:	7898      	ldrb	r0, [r3, #2]
1000f2ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f2b0:	10015dec 	.word	0x10015dec
1000f2b4:	10015a7c 	.word	0x10015a7c
1000f2b8:	1001149f 	.word	0x1001149f
1000f2bc:	10015df8 	.word	0x10015df8
1000f2c0:	00000b0d 	.word	0x00000b0d
1000f2c4:	10015a70 	.word	0x10015a70
1000f2c8:	1000dd49 	.word	0x1000dd49
1000f2cc:	1000ddad 	.word	0x1000ddad

1000f2d0 <gattm_att_get_value_req_handler>:
1000f2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f2d2:	b085      	sub	sp, #20
1000f2d4:	9201      	str	r2, [sp, #4]
1000f2d6:	220a      	movs	r2, #10
1000f2d8:	1c04      	adds	r4, r0, #0
1000f2da:	481d      	ldr	r0, [pc, #116]	; (1000f350 <gattm_att_get_value_req_handler+0x80>)
1000f2dc:	ab02      	add	r3, sp, #8
1000f2de:	1dde      	adds	r6, r3, #7
1000f2e0:	7002      	strb	r2, [r0, #0]
1000f2e2:	2300      	movs	r3, #0
1000f2e4:	220b      	movs	r2, #11
1000f2e6:	4d1b      	ldr	r5, [pc, #108]	; (1000f354 <gattm_att_get_value_req_handler+0x84>)
1000f2e8:	1c0f      	adds	r7, r1, #0
1000f2ea:	8829      	ldrh	r1, [r5, #0]
1000f2ec:	882d      	ldrh	r5, [r5, #0]
1000f2ee:	7101      	strb	r1, [r0, #4]
1000f2f0:	0a2d      	lsrs	r5, r5, #8
1000f2f2:	7145      	strb	r5, [r0, #5]
1000f2f4:	0a25      	lsrs	r5, r4, #8
1000f2f6:	7245      	strb	r5, [r0, #9]
1000f2f8:	4917      	ldr	r1, [pc, #92]	; (1000f358 <gattm_att_get_value_req_handler+0x88>)
1000f2fa:	4d18      	ldr	r5, [pc, #96]	; (1000f35c <gattm_att_get_value_req_handler+0x8c>)
1000f2fc:	7033      	strb	r3, [r6, #0]
1000f2fe:	7042      	strb	r2, [r0, #1]
1000f300:	7082      	strb	r2, [r0, #2]
1000f302:	70c3      	strb	r3, [r0, #3]
1000f304:	8029      	strh	r1, [r5, #0]
1000f306:	80aa      	strh	r2, [r5, #4]
1000f308:	71c3      	strb	r3, [r0, #7]
1000f30a:	3a09      	subs	r2, #9
1000f30c:	210a      	movs	r1, #10
1000f30e:	4b14      	ldr	r3, [pc, #80]	; (1000f360 <gattm_att_get_value_req_handler+0x90>)
1000f310:	7182      	strb	r2, [r0, #6]
1000f312:	7204      	strb	r4, [r0, #8]
1000f314:	4798      	blx	r3
1000f316:	1c30      	adds	r0, r6, #0
1000f318:	4b12      	ldr	r3, [pc, #72]	; (1000f364 <gattm_att_get_value_req_handler+0x94>)
1000f31a:	4798      	blx	r3
1000f31c:	7833      	ldrb	r3, [r6, #0]
1000f31e:	20e2      	movs	r0, #226	; 0xe2
1000f320:	2b00      	cmp	r3, #0
1000f322:	d112      	bne.n	1000f34a <gattm_att_get_value_req_handler+0x7a>
1000f324:	68a9      	ldr	r1, [r5, #8]
1000f326:	9801      	ldr	r0, [sp, #4]
1000f328:	784d      	ldrb	r5, [r1, #1]
1000f32a:	780b      	ldrb	r3, [r1, #0]
1000f32c:	78ca      	ldrb	r2, [r1, #3]
1000f32e:	022d      	lsls	r5, r5, #8
1000f330:	431d      	orrs	r5, r3
1000f332:	788b      	ldrb	r3, [r1, #2]
1000f334:	0212      	lsls	r2, r2, #8
1000f336:	431a      	orrs	r2, r3
1000f338:	803a      	strh	r2, [r7, #0]
1000f33a:	790e      	ldrb	r6, [r1, #4]
1000f33c:	4b0a      	ldr	r3, [pc, #40]	; (1000f368 <gattm_att_get_value_req_handler+0x98>)
1000f33e:	3105      	adds	r1, #5
1000f340:	4798      	blx	r3
1000f342:	20e2      	movs	r0, #226	; 0xe2
1000f344:	42ac      	cmp	r4, r5
1000f346:	d100      	bne.n	1000f34a <gattm_att_get_value_req_handler+0x7a>
1000f348:	1c30      	adds	r0, r6, #0
1000f34a:	b005      	add	sp, #20
1000f34c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f34e:	46c0      	nop			; (mov r8, r8)
1000f350:	10015dec 	.word	0x10015dec
1000f354:	10015a7c 	.word	0x10015a7c
1000f358:	00000b0b 	.word	0x00000b0b
1000f35c:	10015a70 	.word	0x10015a70
1000f360:	1000dd49 	.word	0x1000dd49
1000f364:	1000ddad 	.word	0x1000ddad
1000f368:	1001149f 	.word	0x1001149f

1000f36c <htpt_enable_rsp_handler>:
1000f36c:	780b      	ldrb	r3, [r1, #0]
1000f36e:	7013      	strb	r3, [r2, #0]
1000f370:	784b      	ldrb	r3, [r1, #1]
1000f372:	7053      	strb	r3, [r2, #1]
1000f374:	4770      	bx	lr

1000f376 <htpt_temp_send_rsp_handler>:
1000f376:	780b      	ldrb	r3, [r1, #0]
1000f378:	7013      	strb	r3, [r2, #0]
1000f37a:	4770      	bx	lr

1000f37c <htpt_meas_intv_upd_rsp_handler>:
1000f37c:	780b      	ldrb	r3, [r1, #0]
1000f37e:	7013      	strb	r3, [r2, #0]
1000f380:	4770      	bx	lr

1000f382 <htpt_meas_intv_chg_req_ind_handler>:
1000f382:	78cb      	ldrb	r3, [r1, #3]
1000f384:	7889      	ldrb	r1, [r1, #2]
1000f386:	021b      	lsls	r3, r3, #8
1000f388:	430b      	orrs	r3, r1
1000f38a:	8013      	strh	r3, [r2, #0]
1000f38c:	4770      	bx	lr

1000f38e <htpt_cfg_indntf_ind_handler>:
1000f38e:	780b      	ldrb	r3, [r1, #0]
1000f390:	7013      	strb	r3, [r2, #0]
1000f392:	784b      	ldrb	r3, [r1, #1]
1000f394:	7053      	strb	r3, [r2, #1]
1000f396:	4770      	bx	lr

1000f398 <__gnu_thumb1_case_uqi>:
1000f398:	b402      	push	{r1}
1000f39a:	4671      	mov	r1, lr
1000f39c:	0849      	lsrs	r1, r1, #1
1000f39e:	0049      	lsls	r1, r1, #1
1000f3a0:	5c09      	ldrb	r1, [r1, r0]
1000f3a2:	0049      	lsls	r1, r1, #1
1000f3a4:	448e      	add	lr, r1
1000f3a6:	bc02      	pop	{r1}
1000f3a8:	4770      	bx	lr
1000f3aa:	46c0      	nop			; (mov r8, r8)

1000f3ac <__aeabi_uidiv>:
1000f3ac:	2200      	movs	r2, #0
1000f3ae:	0843      	lsrs	r3, r0, #1
1000f3b0:	428b      	cmp	r3, r1
1000f3b2:	d374      	bcc.n	1000f49e <__aeabi_uidiv+0xf2>
1000f3b4:	0903      	lsrs	r3, r0, #4
1000f3b6:	428b      	cmp	r3, r1
1000f3b8:	d35f      	bcc.n	1000f47a <__aeabi_uidiv+0xce>
1000f3ba:	0a03      	lsrs	r3, r0, #8
1000f3bc:	428b      	cmp	r3, r1
1000f3be:	d344      	bcc.n	1000f44a <__aeabi_uidiv+0x9e>
1000f3c0:	0b03      	lsrs	r3, r0, #12
1000f3c2:	428b      	cmp	r3, r1
1000f3c4:	d328      	bcc.n	1000f418 <__aeabi_uidiv+0x6c>
1000f3c6:	0c03      	lsrs	r3, r0, #16
1000f3c8:	428b      	cmp	r3, r1
1000f3ca:	d30d      	bcc.n	1000f3e8 <__aeabi_uidiv+0x3c>
1000f3cc:	22ff      	movs	r2, #255	; 0xff
1000f3ce:	0209      	lsls	r1, r1, #8
1000f3d0:	ba12      	rev	r2, r2
1000f3d2:	0c03      	lsrs	r3, r0, #16
1000f3d4:	428b      	cmp	r3, r1
1000f3d6:	d302      	bcc.n	1000f3de <__aeabi_uidiv+0x32>
1000f3d8:	1212      	asrs	r2, r2, #8
1000f3da:	0209      	lsls	r1, r1, #8
1000f3dc:	d065      	beq.n	1000f4aa <__aeabi_uidiv+0xfe>
1000f3de:	0b03      	lsrs	r3, r0, #12
1000f3e0:	428b      	cmp	r3, r1
1000f3e2:	d319      	bcc.n	1000f418 <__aeabi_uidiv+0x6c>
1000f3e4:	e000      	b.n	1000f3e8 <__aeabi_uidiv+0x3c>
1000f3e6:	0a09      	lsrs	r1, r1, #8
1000f3e8:	0bc3      	lsrs	r3, r0, #15
1000f3ea:	428b      	cmp	r3, r1
1000f3ec:	d301      	bcc.n	1000f3f2 <__aeabi_uidiv+0x46>
1000f3ee:	03cb      	lsls	r3, r1, #15
1000f3f0:	1ac0      	subs	r0, r0, r3
1000f3f2:	4152      	adcs	r2, r2
1000f3f4:	0b83      	lsrs	r3, r0, #14
1000f3f6:	428b      	cmp	r3, r1
1000f3f8:	d301      	bcc.n	1000f3fe <__aeabi_uidiv+0x52>
1000f3fa:	038b      	lsls	r3, r1, #14
1000f3fc:	1ac0      	subs	r0, r0, r3
1000f3fe:	4152      	adcs	r2, r2
1000f400:	0b43      	lsrs	r3, r0, #13
1000f402:	428b      	cmp	r3, r1
1000f404:	d301      	bcc.n	1000f40a <__aeabi_uidiv+0x5e>
1000f406:	034b      	lsls	r3, r1, #13
1000f408:	1ac0      	subs	r0, r0, r3
1000f40a:	4152      	adcs	r2, r2
1000f40c:	0b03      	lsrs	r3, r0, #12
1000f40e:	428b      	cmp	r3, r1
1000f410:	d301      	bcc.n	1000f416 <__aeabi_uidiv+0x6a>
1000f412:	030b      	lsls	r3, r1, #12
1000f414:	1ac0      	subs	r0, r0, r3
1000f416:	4152      	adcs	r2, r2
1000f418:	0ac3      	lsrs	r3, r0, #11
1000f41a:	428b      	cmp	r3, r1
1000f41c:	d301      	bcc.n	1000f422 <__aeabi_uidiv+0x76>
1000f41e:	02cb      	lsls	r3, r1, #11
1000f420:	1ac0      	subs	r0, r0, r3
1000f422:	4152      	adcs	r2, r2
1000f424:	0a83      	lsrs	r3, r0, #10
1000f426:	428b      	cmp	r3, r1
1000f428:	d301      	bcc.n	1000f42e <__aeabi_uidiv+0x82>
1000f42a:	028b      	lsls	r3, r1, #10
1000f42c:	1ac0      	subs	r0, r0, r3
1000f42e:	4152      	adcs	r2, r2
1000f430:	0a43      	lsrs	r3, r0, #9
1000f432:	428b      	cmp	r3, r1
1000f434:	d301      	bcc.n	1000f43a <__aeabi_uidiv+0x8e>
1000f436:	024b      	lsls	r3, r1, #9
1000f438:	1ac0      	subs	r0, r0, r3
1000f43a:	4152      	adcs	r2, r2
1000f43c:	0a03      	lsrs	r3, r0, #8
1000f43e:	428b      	cmp	r3, r1
1000f440:	d301      	bcc.n	1000f446 <__aeabi_uidiv+0x9a>
1000f442:	020b      	lsls	r3, r1, #8
1000f444:	1ac0      	subs	r0, r0, r3
1000f446:	4152      	adcs	r2, r2
1000f448:	d2cd      	bcs.n	1000f3e6 <__aeabi_uidiv+0x3a>
1000f44a:	09c3      	lsrs	r3, r0, #7
1000f44c:	428b      	cmp	r3, r1
1000f44e:	d301      	bcc.n	1000f454 <__aeabi_uidiv+0xa8>
1000f450:	01cb      	lsls	r3, r1, #7
1000f452:	1ac0      	subs	r0, r0, r3
1000f454:	4152      	adcs	r2, r2
1000f456:	0983      	lsrs	r3, r0, #6
1000f458:	428b      	cmp	r3, r1
1000f45a:	d301      	bcc.n	1000f460 <__aeabi_uidiv+0xb4>
1000f45c:	018b      	lsls	r3, r1, #6
1000f45e:	1ac0      	subs	r0, r0, r3
1000f460:	4152      	adcs	r2, r2
1000f462:	0943      	lsrs	r3, r0, #5
1000f464:	428b      	cmp	r3, r1
1000f466:	d301      	bcc.n	1000f46c <__aeabi_uidiv+0xc0>
1000f468:	014b      	lsls	r3, r1, #5
1000f46a:	1ac0      	subs	r0, r0, r3
1000f46c:	4152      	adcs	r2, r2
1000f46e:	0903      	lsrs	r3, r0, #4
1000f470:	428b      	cmp	r3, r1
1000f472:	d301      	bcc.n	1000f478 <__aeabi_uidiv+0xcc>
1000f474:	010b      	lsls	r3, r1, #4
1000f476:	1ac0      	subs	r0, r0, r3
1000f478:	4152      	adcs	r2, r2
1000f47a:	08c3      	lsrs	r3, r0, #3
1000f47c:	428b      	cmp	r3, r1
1000f47e:	d301      	bcc.n	1000f484 <__aeabi_uidiv+0xd8>
1000f480:	00cb      	lsls	r3, r1, #3
1000f482:	1ac0      	subs	r0, r0, r3
1000f484:	4152      	adcs	r2, r2
1000f486:	0883      	lsrs	r3, r0, #2
1000f488:	428b      	cmp	r3, r1
1000f48a:	d301      	bcc.n	1000f490 <__aeabi_uidiv+0xe4>
1000f48c:	008b      	lsls	r3, r1, #2
1000f48e:	1ac0      	subs	r0, r0, r3
1000f490:	4152      	adcs	r2, r2
1000f492:	0843      	lsrs	r3, r0, #1
1000f494:	428b      	cmp	r3, r1
1000f496:	d301      	bcc.n	1000f49c <__aeabi_uidiv+0xf0>
1000f498:	004b      	lsls	r3, r1, #1
1000f49a:	1ac0      	subs	r0, r0, r3
1000f49c:	4152      	adcs	r2, r2
1000f49e:	1a41      	subs	r1, r0, r1
1000f4a0:	d200      	bcs.n	1000f4a4 <__aeabi_uidiv+0xf8>
1000f4a2:	4601      	mov	r1, r0
1000f4a4:	4152      	adcs	r2, r2
1000f4a6:	4610      	mov	r0, r2
1000f4a8:	4770      	bx	lr
1000f4aa:	e7ff      	b.n	1000f4ac <__aeabi_uidiv+0x100>
1000f4ac:	b501      	push	{r0, lr}
1000f4ae:	2000      	movs	r0, #0
1000f4b0:	f000 f8f0 	bl	1000f694 <__aeabi_idiv0>
1000f4b4:	bd02      	pop	{r1, pc}
1000f4b6:	46c0      	nop			; (mov r8, r8)

1000f4b8 <__aeabi_uidivmod>:
1000f4b8:	2900      	cmp	r1, #0
1000f4ba:	d0f7      	beq.n	1000f4ac <__aeabi_uidiv+0x100>
1000f4bc:	e776      	b.n	1000f3ac <__aeabi_uidiv>
1000f4be:	4770      	bx	lr

1000f4c0 <__aeabi_idiv>:
1000f4c0:	4603      	mov	r3, r0
1000f4c2:	430b      	orrs	r3, r1
1000f4c4:	d47f      	bmi.n	1000f5c6 <__aeabi_idiv+0x106>
1000f4c6:	2200      	movs	r2, #0
1000f4c8:	0843      	lsrs	r3, r0, #1
1000f4ca:	428b      	cmp	r3, r1
1000f4cc:	d374      	bcc.n	1000f5b8 <__aeabi_idiv+0xf8>
1000f4ce:	0903      	lsrs	r3, r0, #4
1000f4d0:	428b      	cmp	r3, r1
1000f4d2:	d35f      	bcc.n	1000f594 <__aeabi_idiv+0xd4>
1000f4d4:	0a03      	lsrs	r3, r0, #8
1000f4d6:	428b      	cmp	r3, r1
1000f4d8:	d344      	bcc.n	1000f564 <__aeabi_idiv+0xa4>
1000f4da:	0b03      	lsrs	r3, r0, #12
1000f4dc:	428b      	cmp	r3, r1
1000f4de:	d328      	bcc.n	1000f532 <__aeabi_idiv+0x72>
1000f4e0:	0c03      	lsrs	r3, r0, #16
1000f4e2:	428b      	cmp	r3, r1
1000f4e4:	d30d      	bcc.n	1000f502 <__aeabi_idiv+0x42>
1000f4e6:	22ff      	movs	r2, #255	; 0xff
1000f4e8:	0209      	lsls	r1, r1, #8
1000f4ea:	ba12      	rev	r2, r2
1000f4ec:	0c03      	lsrs	r3, r0, #16
1000f4ee:	428b      	cmp	r3, r1
1000f4f0:	d302      	bcc.n	1000f4f8 <__aeabi_idiv+0x38>
1000f4f2:	1212      	asrs	r2, r2, #8
1000f4f4:	0209      	lsls	r1, r1, #8
1000f4f6:	d065      	beq.n	1000f5c4 <__aeabi_idiv+0x104>
1000f4f8:	0b03      	lsrs	r3, r0, #12
1000f4fa:	428b      	cmp	r3, r1
1000f4fc:	d319      	bcc.n	1000f532 <__aeabi_idiv+0x72>
1000f4fe:	e000      	b.n	1000f502 <__aeabi_idiv+0x42>
1000f500:	0a09      	lsrs	r1, r1, #8
1000f502:	0bc3      	lsrs	r3, r0, #15
1000f504:	428b      	cmp	r3, r1
1000f506:	d301      	bcc.n	1000f50c <__aeabi_idiv+0x4c>
1000f508:	03cb      	lsls	r3, r1, #15
1000f50a:	1ac0      	subs	r0, r0, r3
1000f50c:	4152      	adcs	r2, r2
1000f50e:	0b83      	lsrs	r3, r0, #14
1000f510:	428b      	cmp	r3, r1
1000f512:	d301      	bcc.n	1000f518 <__aeabi_idiv+0x58>
1000f514:	038b      	lsls	r3, r1, #14
1000f516:	1ac0      	subs	r0, r0, r3
1000f518:	4152      	adcs	r2, r2
1000f51a:	0b43      	lsrs	r3, r0, #13
1000f51c:	428b      	cmp	r3, r1
1000f51e:	d301      	bcc.n	1000f524 <__aeabi_idiv+0x64>
1000f520:	034b      	lsls	r3, r1, #13
1000f522:	1ac0      	subs	r0, r0, r3
1000f524:	4152      	adcs	r2, r2
1000f526:	0b03      	lsrs	r3, r0, #12
1000f528:	428b      	cmp	r3, r1
1000f52a:	d301      	bcc.n	1000f530 <__aeabi_idiv+0x70>
1000f52c:	030b      	lsls	r3, r1, #12
1000f52e:	1ac0      	subs	r0, r0, r3
1000f530:	4152      	adcs	r2, r2
1000f532:	0ac3      	lsrs	r3, r0, #11
1000f534:	428b      	cmp	r3, r1
1000f536:	d301      	bcc.n	1000f53c <__aeabi_idiv+0x7c>
1000f538:	02cb      	lsls	r3, r1, #11
1000f53a:	1ac0      	subs	r0, r0, r3
1000f53c:	4152      	adcs	r2, r2
1000f53e:	0a83      	lsrs	r3, r0, #10
1000f540:	428b      	cmp	r3, r1
1000f542:	d301      	bcc.n	1000f548 <__aeabi_idiv+0x88>
1000f544:	028b      	lsls	r3, r1, #10
1000f546:	1ac0      	subs	r0, r0, r3
1000f548:	4152      	adcs	r2, r2
1000f54a:	0a43      	lsrs	r3, r0, #9
1000f54c:	428b      	cmp	r3, r1
1000f54e:	d301      	bcc.n	1000f554 <__aeabi_idiv+0x94>
1000f550:	024b      	lsls	r3, r1, #9
1000f552:	1ac0      	subs	r0, r0, r3
1000f554:	4152      	adcs	r2, r2
1000f556:	0a03      	lsrs	r3, r0, #8
1000f558:	428b      	cmp	r3, r1
1000f55a:	d301      	bcc.n	1000f560 <__aeabi_idiv+0xa0>
1000f55c:	020b      	lsls	r3, r1, #8
1000f55e:	1ac0      	subs	r0, r0, r3
1000f560:	4152      	adcs	r2, r2
1000f562:	d2cd      	bcs.n	1000f500 <__aeabi_idiv+0x40>
1000f564:	09c3      	lsrs	r3, r0, #7
1000f566:	428b      	cmp	r3, r1
1000f568:	d301      	bcc.n	1000f56e <__aeabi_idiv+0xae>
1000f56a:	01cb      	lsls	r3, r1, #7
1000f56c:	1ac0      	subs	r0, r0, r3
1000f56e:	4152      	adcs	r2, r2
1000f570:	0983      	lsrs	r3, r0, #6
1000f572:	428b      	cmp	r3, r1
1000f574:	d301      	bcc.n	1000f57a <__aeabi_idiv+0xba>
1000f576:	018b      	lsls	r3, r1, #6
1000f578:	1ac0      	subs	r0, r0, r3
1000f57a:	4152      	adcs	r2, r2
1000f57c:	0943      	lsrs	r3, r0, #5
1000f57e:	428b      	cmp	r3, r1
1000f580:	d301      	bcc.n	1000f586 <__aeabi_idiv+0xc6>
1000f582:	014b      	lsls	r3, r1, #5
1000f584:	1ac0      	subs	r0, r0, r3
1000f586:	4152      	adcs	r2, r2
1000f588:	0903      	lsrs	r3, r0, #4
1000f58a:	428b      	cmp	r3, r1
1000f58c:	d301      	bcc.n	1000f592 <__aeabi_idiv+0xd2>
1000f58e:	010b      	lsls	r3, r1, #4
1000f590:	1ac0      	subs	r0, r0, r3
1000f592:	4152      	adcs	r2, r2
1000f594:	08c3      	lsrs	r3, r0, #3
1000f596:	428b      	cmp	r3, r1
1000f598:	d301      	bcc.n	1000f59e <__aeabi_idiv+0xde>
1000f59a:	00cb      	lsls	r3, r1, #3
1000f59c:	1ac0      	subs	r0, r0, r3
1000f59e:	4152      	adcs	r2, r2
1000f5a0:	0883      	lsrs	r3, r0, #2
1000f5a2:	428b      	cmp	r3, r1
1000f5a4:	d301      	bcc.n	1000f5aa <__aeabi_idiv+0xea>
1000f5a6:	008b      	lsls	r3, r1, #2
1000f5a8:	1ac0      	subs	r0, r0, r3
1000f5aa:	4152      	adcs	r2, r2
1000f5ac:	0843      	lsrs	r3, r0, #1
1000f5ae:	428b      	cmp	r3, r1
1000f5b0:	d301      	bcc.n	1000f5b6 <__aeabi_idiv+0xf6>
1000f5b2:	004b      	lsls	r3, r1, #1
1000f5b4:	1ac0      	subs	r0, r0, r3
1000f5b6:	4152      	adcs	r2, r2
1000f5b8:	1a41      	subs	r1, r0, r1
1000f5ba:	d200      	bcs.n	1000f5be <__aeabi_idiv+0xfe>
1000f5bc:	4601      	mov	r1, r0
1000f5be:	4152      	adcs	r2, r2
1000f5c0:	4610      	mov	r0, r2
1000f5c2:	4770      	bx	lr
1000f5c4:	e05d      	b.n	1000f682 <__aeabi_idiv+0x1c2>
1000f5c6:	0fca      	lsrs	r2, r1, #31
1000f5c8:	d000      	beq.n	1000f5cc <__aeabi_idiv+0x10c>
1000f5ca:	4249      	negs	r1, r1
1000f5cc:	1003      	asrs	r3, r0, #32
1000f5ce:	d300      	bcc.n	1000f5d2 <__aeabi_idiv+0x112>
1000f5d0:	4240      	negs	r0, r0
1000f5d2:	4053      	eors	r3, r2
1000f5d4:	2200      	movs	r2, #0
1000f5d6:	469c      	mov	ip, r3
1000f5d8:	0903      	lsrs	r3, r0, #4
1000f5da:	428b      	cmp	r3, r1
1000f5dc:	d32d      	bcc.n	1000f63a <__aeabi_idiv+0x17a>
1000f5de:	0a03      	lsrs	r3, r0, #8
1000f5e0:	428b      	cmp	r3, r1
1000f5e2:	d312      	bcc.n	1000f60a <__aeabi_idiv+0x14a>
1000f5e4:	22fc      	movs	r2, #252	; 0xfc
1000f5e6:	0189      	lsls	r1, r1, #6
1000f5e8:	ba12      	rev	r2, r2
1000f5ea:	0a03      	lsrs	r3, r0, #8
1000f5ec:	428b      	cmp	r3, r1
1000f5ee:	d30c      	bcc.n	1000f60a <__aeabi_idiv+0x14a>
1000f5f0:	0189      	lsls	r1, r1, #6
1000f5f2:	1192      	asrs	r2, r2, #6
1000f5f4:	428b      	cmp	r3, r1
1000f5f6:	d308      	bcc.n	1000f60a <__aeabi_idiv+0x14a>
1000f5f8:	0189      	lsls	r1, r1, #6
1000f5fa:	1192      	asrs	r2, r2, #6
1000f5fc:	428b      	cmp	r3, r1
1000f5fe:	d304      	bcc.n	1000f60a <__aeabi_idiv+0x14a>
1000f600:	0189      	lsls	r1, r1, #6
1000f602:	d03a      	beq.n	1000f67a <__aeabi_idiv+0x1ba>
1000f604:	1192      	asrs	r2, r2, #6
1000f606:	e000      	b.n	1000f60a <__aeabi_idiv+0x14a>
1000f608:	0989      	lsrs	r1, r1, #6
1000f60a:	09c3      	lsrs	r3, r0, #7
1000f60c:	428b      	cmp	r3, r1
1000f60e:	d301      	bcc.n	1000f614 <__aeabi_idiv+0x154>
1000f610:	01cb      	lsls	r3, r1, #7
1000f612:	1ac0      	subs	r0, r0, r3
1000f614:	4152      	adcs	r2, r2
1000f616:	0983      	lsrs	r3, r0, #6
1000f618:	428b      	cmp	r3, r1
1000f61a:	d301      	bcc.n	1000f620 <__aeabi_idiv+0x160>
1000f61c:	018b      	lsls	r3, r1, #6
1000f61e:	1ac0      	subs	r0, r0, r3
1000f620:	4152      	adcs	r2, r2
1000f622:	0943      	lsrs	r3, r0, #5
1000f624:	428b      	cmp	r3, r1
1000f626:	d301      	bcc.n	1000f62c <__aeabi_idiv+0x16c>
1000f628:	014b      	lsls	r3, r1, #5
1000f62a:	1ac0      	subs	r0, r0, r3
1000f62c:	4152      	adcs	r2, r2
1000f62e:	0903      	lsrs	r3, r0, #4
1000f630:	428b      	cmp	r3, r1
1000f632:	d301      	bcc.n	1000f638 <__aeabi_idiv+0x178>
1000f634:	010b      	lsls	r3, r1, #4
1000f636:	1ac0      	subs	r0, r0, r3
1000f638:	4152      	adcs	r2, r2
1000f63a:	08c3      	lsrs	r3, r0, #3
1000f63c:	428b      	cmp	r3, r1
1000f63e:	d301      	bcc.n	1000f644 <__aeabi_idiv+0x184>
1000f640:	00cb      	lsls	r3, r1, #3
1000f642:	1ac0      	subs	r0, r0, r3
1000f644:	4152      	adcs	r2, r2
1000f646:	0883      	lsrs	r3, r0, #2
1000f648:	428b      	cmp	r3, r1
1000f64a:	d301      	bcc.n	1000f650 <__aeabi_idiv+0x190>
1000f64c:	008b      	lsls	r3, r1, #2
1000f64e:	1ac0      	subs	r0, r0, r3
1000f650:	4152      	adcs	r2, r2
1000f652:	d2d9      	bcs.n	1000f608 <__aeabi_idiv+0x148>
1000f654:	0843      	lsrs	r3, r0, #1
1000f656:	428b      	cmp	r3, r1
1000f658:	d301      	bcc.n	1000f65e <__aeabi_idiv+0x19e>
1000f65a:	004b      	lsls	r3, r1, #1
1000f65c:	1ac0      	subs	r0, r0, r3
1000f65e:	4152      	adcs	r2, r2
1000f660:	1a41      	subs	r1, r0, r1
1000f662:	d200      	bcs.n	1000f666 <__aeabi_idiv+0x1a6>
1000f664:	4601      	mov	r1, r0
1000f666:	4663      	mov	r3, ip
1000f668:	4152      	adcs	r2, r2
1000f66a:	105b      	asrs	r3, r3, #1
1000f66c:	4610      	mov	r0, r2
1000f66e:	d301      	bcc.n	1000f674 <__aeabi_idiv+0x1b4>
1000f670:	4240      	negs	r0, r0
1000f672:	2b00      	cmp	r3, #0
1000f674:	d500      	bpl.n	1000f678 <__aeabi_idiv+0x1b8>
1000f676:	4249      	negs	r1, r1
1000f678:	4770      	bx	lr
1000f67a:	4663      	mov	r3, ip
1000f67c:	105b      	asrs	r3, r3, #1
1000f67e:	d300      	bcc.n	1000f682 <__aeabi_idiv+0x1c2>
1000f680:	4240      	negs	r0, r0
1000f682:	b501      	push	{r0, lr}
1000f684:	2000      	movs	r0, #0
1000f686:	f000 f805 	bl	1000f694 <__aeabi_idiv0>
1000f68a:	bd02      	pop	{r1, pc}

1000f68c <__aeabi_idivmod>:
1000f68c:	2900      	cmp	r1, #0
1000f68e:	d0f8      	beq.n	1000f682 <__aeabi_idiv+0x1c2>
1000f690:	e716      	b.n	1000f4c0 <__aeabi_idiv>
1000f692:	4770      	bx	lr

1000f694 <__aeabi_idiv0>:
1000f694:	4770      	bx	lr
1000f696:	46c0      	nop			; (mov r8, r8)

1000f698 <__aeabi_cdrcmple>:
1000f698:	4684      	mov	ip, r0
1000f69a:	1c10      	adds	r0, r2, #0
1000f69c:	4662      	mov	r2, ip
1000f69e:	468c      	mov	ip, r1
1000f6a0:	1c19      	adds	r1, r3, #0
1000f6a2:	4663      	mov	r3, ip
1000f6a4:	e000      	b.n	1000f6a8 <__aeabi_cdcmpeq>
1000f6a6:	46c0      	nop			; (mov r8, r8)

1000f6a8 <__aeabi_cdcmpeq>:
1000f6a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000f6aa:	f000 fff5 	bl	10010698 <__ledf2>
1000f6ae:	2800      	cmp	r0, #0
1000f6b0:	d401      	bmi.n	1000f6b6 <__aeabi_cdcmpeq+0xe>
1000f6b2:	2100      	movs	r1, #0
1000f6b4:	42c8      	cmn	r0, r1
1000f6b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1000f6b8 <__aeabi_dcmpeq>:
1000f6b8:	b510      	push	{r4, lr}
1000f6ba:	f000 ff49 	bl	10010550 <__eqdf2>
1000f6be:	4240      	negs	r0, r0
1000f6c0:	3001      	adds	r0, #1
1000f6c2:	bd10      	pop	{r4, pc}

1000f6c4 <__aeabi_dcmplt>:
1000f6c4:	b510      	push	{r4, lr}
1000f6c6:	f000 ffe7 	bl	10010698 <__ledf2>
1000f6ca:	2800      	cmp	r0, #0
1000f6cc:	db01      	blt.n	1000f6d2 <__aeabi_dcmplt+0xe>
1000f6ce:	2000      	movs	r0, #0
1000f6d0:	bd10      	pop	{r4, pc}
1000f6d2:	2001      	movs	r0, #1
1000f6d4:	bd10      	pop	{r4, pc}
1000f6d6:	46c0      	nop			; (mov r8, r8)

1000f6d8 <__aeabi_dcmple>:
1000f6d8:	b510      	push	{r4, lr}
1000f6da:	f000 ffdd 	bl	10010698 <__ledf2>
1000f6de:	2800      	cmp	r0, #0
1000f6e0:	dd01      	ble.n	1000f6e6 <__aeabi_dcmple+0xe>
1000f6e2:	2000      	movs	r0, #0
1000f6e4:	bd10      	pop	{r4, pc}
1000f6e6:	2001      	movs	r0, #1
1000f6e8:	bd10      	pop	{r4, pc}
1000f6ea:	46c0      	nop			; (mov r8, r8)

1000f6ec <__aeabi_dcmpgt>:
1000f6ec:	b510      	push	{r4, lr}
1000f6ee:	f000 ff6f 	bl	100105d0 <__gedf2>
1000f6f2:	2800      	cmp	r0, #0
1000f6f4:	dc01      	bgt.n	1000f6fa <__aeabi_dcmpgt+0xe>
1000f6f6:	2000      	movs	r0, #0
1000f6f8:	bd10      	pop	{r4, pc}
1000f6fa:	2001      	movs	r0, #1
1000f6fc:	bd10      	pop	{r4, pc}
1000f6fe:	46c0      	nop			; (mov r8, r8)

1000f700 <__aeabi_dcmpge>:
1000f700:	b510      	push	{r4, lr}
1000f702:	f000 ff65 	bl	100105d0 <__gedf2>
1000f706:	2800      	cmp	r0, #0
1000f708:	da01      	bge.n	1000f70e <__aeabi_dcmpge+0xe>
1000f70a:	2000      	movs	r0, #0
1000f70c:	bd10      	pop	{r4, pc}
1000f70e:	2001      	movs	r0, #1
1000f710:	bd10      	pop	{r4, pc}
1000f712:	46c0      	nop			; (mov r8, r8)

1000f714 <__aeabi_cfrcmple>:
1000f714:	4684      	mov	ip, r0
1000f716:	1c08      	adds	r0, r1, #0
1000f718:	4661      	mov	r1, ip
1000f71a:	e7ff      	b.n	1000f71c <__aeabi_cfcmpeq>

1000f71c <__aeabi_cfcmpeq>:
1000f71c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000f71e:	f000 fb91 	bl	1000fe44 <__lesf2>
1000f722:	2800      	cmp	r0, #0
1000f724:	d401      	bmi.n	1000f72a <__aeabi_cfcmpeq+0xe>
1000f726:	2100      	movs	r1, #0
1000f728:	42c8      	cmn	r0, r1
1000f72a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1000f72c <__aeabi_fcmpeq>:
1000f72c:	b510      	push	{r4, lr}
1000f72e:	f000 fb1d 	bl	1000fd6c <__eqsf2>
1000f732:	4240      	negs	r0, r0
1000f734:	3001      	adds	r0, #1
1000f736:	bd10      	pop	{r4, pc}

1000f738 <__aeabi_fcmplt>:
1000f738:	b510      	push	{r4, lr}
1000f73a:	f000 fb83 	bl	1000fe44 <__lesf2>
1000f73e:	2800      	cmp	r0, #0
1000f740:	db01      	blt.n	1000f746 <__aeabi_fcmplt+0xe>
1000f742:	2000      	movs	r0, #0
1000f744:	bd10      	pop	{r4, pc}
1000f746:	2001      	movs	r0, #1
1000f748:	bd10      	pop	{r4, pc}
1000f74a:	46c0      	nop			; (mov r8, r8)

1000f74c <__aeabi_fcmple>:
1000f74c:	b510      	push	{r4, lr}
1000f74e:	f000 fb79 	bl	1000fe44 <__lesf2>
1000f752:	2800      	cmp	r0, #0
1000f754:	dd01      	ble.n	1000f75a <__aeabi_fcmple+0xe>
1000f756:	2000      	movs	r0, #0
1000f758:	bd10      	pop	{r4, pc}
1000f75a:	2001      	movs	r0, #1
1000f75c:	bd10      	pop	{r4, pc}
1000f75e:	46c0      	nop			; (mov r8, r8)

1000f760 <__aeabi_fcmpgt>:
1000f760:	b510      	push	{r4, lr}
1000f762:	f000 fb2b 	bl	1000fdbc <__gesf2>
1000f766:	2800      	cmp	r0, #0
1000f768:	dc01      	bgt.n	1000f76e <__aeabi_fcmpgt+0xe>
1000f76a:	2000      	movs	r0, #0
1000f76c:	bd10      	pop	{r4, pc}
1000f76e:	2001      	movs	r0, #1
1000f770:	bd10      	pop	{r4, pc}
1000f772:	46c0      	nop			; (mov r8, r8)

1000f774 <__aeabi_fcmpge>:
1000f774:	b510      	push	{r4, lr}
1000f776:	f000 fb21 	bl	1000fdbc <__gesf2>
1000f77a:	2800      	cmp	r0, #0
1000f77c:	da01      	bge.n	1000f782 <__aeabi_fcmpge+0xe>
1000f77e:	2000      	movs	r0, #0
1000f780:	bd10      	pop	{r4, pc}
1000f782:	2001      	movs	r0, #1
1000f784:	bd10      	pop	{r4, pc}
1000f786:	46c0      	nop			; (mov r8, r8)

1000f788 <__aeabi_lmul>:
1000f788:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f78a:	464f      	mov	r7, r9
1000f78c:	4646      	mov	r6, r8
1000f78e:	b4c0      	push	{r6, r7}
1000f790:	0416      	lsls	r6, r2, #16
1000f792:	0c36      	lsrs	r6, r6, #16
1000f794:	4699      	mov	r9, r3
1000f796:	0033      	movs	r3, r6
1000f798:	0405      	lsls	r5, r0, #16
1000f79a:	0c2c      	lsrs	r4, r5, #16
1000f79c:	0c07      	lsrs	r7, r0, #16
1000f79e:	0c15      	lsrs	r5, r2, #16
1000f7a0:	4363      	muls	r3, r4
1000f7a2:	437e      	muls	r6, r7
1000f7a4:	436f      	muls	r7, r5
1000f7a6:	4365      	muls	r5, r4
1000f7a8:	0c1c      	lsrs	r4, r3, #16
1000f7aa:	19ad      	adds	r5, r5, r6
1000f7ac:	1964      	adds	r4, r4, r5
1000f7ae:	469c      	mov	ip, r3
1000f7b0:	42a6      	cmp	r6, r4
1000f7b2:	d903      	bls.n	1000f7bc <__aeabi_lmul+0x34>
1000f7b4:	2380      	movs	r3, #128	; 0x80
1000f7b6:	025b      	lsls	r3, r3, #9
1000f7b8:	4698      	mov	r8, r3
1000f7ba:	4447      	add	r7, r8
1000f7bc:	4663      	mov	r3, ip
1000f7be:	0c25      	lsrs	r5, r4, #16
1000f7c0:	19ef      	adds	r7, r5, r7
1000f7c2:	041d      	lsls	r5, r3, #16
1000f7c4:	464b      	mov	r3, r9
1000f7c6:	434a      	muls	r2, r1
1000f7c8:	4343      	muls	r3, r0
1000f7ca:	0c2d      	lsrs	r5, r5, #16
1000f7cc:	0424      	lsls	r4, r4, #16
1000f7ce:	1964      	adds	r4, r4, r5
1000f7d0:	1899      	adds	r1, r3, r2
1000f7d2:	19c9      	adds	r1, r1, r7
1000f7d4:	0020      	movs	r0, r4
1000f7d6:	bc0c      	pop	{r2, r3}
1000f7d8:	4690      	mov	r8, r2
1000f7da:	4699      	mov	r9, r3
1000f7dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f7de:	46c0      	nop			; (mov r8, r8)

1000f7e0 <__aeabi_f2uiz>:
1000f7e0:	219e      	movs	r1, #158	; 0x9e
1000f7e2:	b510      	push	{r4, lr}
1000f7e4:	05c9      	lsls	r1, r1, #23
1000f7e6:	1c04      	adds	r4, r0, #0
1000f7e8:	f7ff ffc4 	bl	1000f774 <__aeabi_fcmpge>
1000f7ec:	2800      	cmp	r0, #0
1000f7ee:	d103      	bne.n	1000f7f8 <__aeabi_f2uiz+0x18>
1000f7f0:	1c20      	adds	r0, r4, #0
1000f7f2:	f000 fe05 	bl	10010400 <__aeabi_f2iz>
1000f7f6:	bd10      	pop	{r4, pc}
1000f7f8:	219e      	movs	r1, #158	; 0x9e
1000f7fa:	1c20      	adds	r0, r4, #0
1000f7fc:	05c9      	lsls	r1, r1, #23
1000f7fe:	f000 fc79 	bl	100100f4 <__aeabi_fsub>
1000f802:	f000 fdfd 	bl	10010400 <__aeabi_f2iz>
1000f806:	2380      	movs	r3, #128	; 0x80
1000f808:	061b      	lsls	r3, r3, #24
1000f80a:	469c      	mov	ip, r3
1000f80c:	4460      	add	r0, ip
1000f80e:	e7f2      	b.n	1000f7f6 <__aeabi_f2uiz+0x16>

1000f810 <__aeabi_d2uiz>:
1000f810:	b570      	push	{r4, r5, r6, lr}
1000f812:	2200      	movs	r2, #0
1000f814:	4b0c      	ldr	r3, [pc, #48]	; (1000f848 <__aeabi_d2uiz+0x38>)
1000f816:	0004      	movs	r4, r0
1000f818:	000d      	movs	r5, r1
1000f81a:	f7ff ff71 	bl	1000f700 <__aeabi_dcmpge>
1000f81e:	2800      	cmp	r0, #0
1000f820:	d104      	bne.n	1000f82c <__aeabi_d2uiz+0x1c>
1000f822:	0020      	movs	r0, r4
1000f824:	0029      	movs	r1, r5
1000f826:	f001 fd6f 	bl	10011308 <__aeabi_d2iz>
1000f82a:	bd70      	pop	{r4, r5, r6, pc}
1000f82c:	4b06      	ldr	r3, [pc, #24]	; (1000f848 <__aeabi_d2uiz+0x38>)
1000f82e:	2200      	movs	r2, #0
1000f830:	0020      	movs	r0, r4
1000f832:	0029      	movs	r1, r5
1000f834:	f001 fa14 	bl	10010c60 <__aeabi_dsub>
1000f838:	f001 fd66 	bl	10011308 <__aeabi_d2iz>
1000f83c:	2380      	movs	r3, #128	; 0x80
1000f83e:	061b      	lsls	r3, r3, #24
1000f840:	469c      	mov	ip, r3
1000f842:	4460      	add	r0, ip
1000f844:	e7f1      	b.n	1000f82a <__aeabi_d2uiz+0x1a>
1000f846:	46c0      	nop			; (mov r8, r8)
1000f848:	41e00000 	.word	0x41e00000

1000f84c <__aeabi_fadd>:
1000f84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f84e:	024a      	lsls	r2, r1, #9
1000f850:	0243      	lsls	r3, r0, #9
1000f852:	0044      	lsls	r4, r0, #1
1000f854:	004e      	lsls	r6, r1, #1
1000f856:	0fc5      	lsrs	r5, r0, #31
1000f858:	0e24      	lsrs	r4, r4, #24
1000f85a:	0028      	movs	r0, r5
1000f85c:	099b      	lsrs	r3, r3, #6
1000f85e:	0e36      	lsrs	r6, r6, #24
1000f860:	0fc9      	lsrs	r1, r1, #31
1000f862:	0992      	lsrs	r2, r2, #6
1000f864:	428d      	cmp	r5, r1
1000f866:	d059      	beq.n	1000f91c <__aeabi_fadd+0xd0>
1000f868:	1ba0      	subs	r0, r4, r6
1000f86a:	2800      	cmp	r0, #0
1000f86c:	dc00      	bgt.n	1000f870 <__aeabi_fadd+0x24>
1000f86e:	e08d      	b.n	1000f98c <__aeabi_fadd+0x140>
1000f870:	2e00      	cmp	r6, #0
1000f872:	d11a      	bne.n	1000f8aa <__aeabi_fadd+0x5e>
1000f874:	2a00      	cmp	r2, #0
1000f876:	d000      	beq.n	1000f87a <__aeabi_fadd+0x2e>
1000f878:	e079      	b.n	1000f96e <__aeabi_fadd+0x122>
1000f87a:	075a      	lsls	r2, r3, #29
1000f87c:	d004      	beq.n	1000f888 <__aeabi_fadd+0x3c>
1000f87e:	220f      	movs	r2, #15
1000f880:	401a      	ands	r2, r3
1000f882:	2a04      	cmp	r2, #4
1000f884:	d000      	beq.n	1000f888 <__aeabi_fadd+0x3c>
1000f886:	3304      	adds	r3, #4
1000f888:	015a      	lsls	r2, r3, #5
1000f88a:	d538      	bpl.n	1000f8fe <__aeabi_fadd+0xb2>
1000f88c:	3401      	adds	r4, #1
1000f88e:	2cff      	cmp	r4, #255	; 0xff
1000f890:	d100      	bne.n	1000f894 <__aeabi_fadd+0x48>
1000f892:	e089      	b.n	1000f9a8 <__aeabi_fadd+0x15c>
1000f894:	0028      	movs	r0, r5
1000f896:	019b      	lsls	r3, r3, #6
1000f898:	0a5b      	lsrs	r3, r3, #9
1000f89a:	b2e4      	uxtb	r4, r4
1000f89c:	025b      	lsls	r3, r3, #9
1000f89e:	05e4      	lsls	r4, r4, #23
1000f8a0:	0a5b      	lsrs	r3, r3, #9
1000f8a2:	4323      	orrs	r3, r4
1000f8a4:	07c0      	lsls	r0, r0, #31
1000f8a6:	4318      	orrs	r0, r3
1000f8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f8aa:	2cff      	cmp	r4, #255	; 0xff
1000f8ac:	d0e5      	beq.n	1000f87a <__aeabi_fadd+0x2e>
1000f8ae:	2180      	movs	r1, #128	; 0x80
1000f8b0:	04c9      	lsls	r1, r1, #19
1000f8b2:	430a      	orrs	r2, r1
1000f8b4:	281b      	cmp	r0, #27
1000f8b6:	dd00      	ble.n	1000f8ba <__aeabi_fadd+0x6e>
1000f8b8:	e089      	b.n	1000f9ce <__aeabi_fadd+0x182>
1000f8ba:	0016      	movs	r6, r2
1000f8bc:	2120      	movs	r1, #32
1000f8be:	40c6      	lsrs	r6, r0
1000f8c0:	1a08      	subs	r0, r1, r0
1000f8c2:	4082      	lsls	r2, r0
1000f8c4:	1e51      	subs	r1, r2, #1
1000f8c6:	418a      	sbcs	r2, r1
1000f8c8:	4332      	orrs	r2, r6
1000f8ca:	1a9b      	subs	r3, r3, r2
1000f8cc:	015a      	lsls	r2, r3, #5
1000f8ce:	d514      	bpl.n	1000f8fa <__aeabi_fadd+0xae>
1000f8d0:	019b      	lsls	r3, r3, #6
1000f8d2:	099e      	lsrs	r6, r3, #6
1000f8d4:	0030      	movs	r0, r6
1000f8d6:	f001 fd85 	bl	100113e4 <__clzsi2>
1000f8da:	3805      	subs	r0, #5
1000f8dc:	4086      	lsls	r6, r0
1000f8de:	4284      	cmp	r4, r0
1000f8e0:	dc65      	bgt.n	1000f9ae <__aeabi_fadd+0x162>
1000f8e2:	1b04      	subs	r4, r0, r4
1000f8e4:	0033      	movs	r3, r6
1000f8e6:	2020      	movs	r0, #32
1000f8e8:	3401      	adds	r4, #1
1000f8ea:	40e3      	lsrs	r3, r4
1000f8ec:	1b04      	subs	r4, r0, r4
1000f8ee:	40a6      	lsls	r6, r4
1000f8f0:	1e72      	subs	r2, r6, #1
1000f8f2:	4196      	sbcs	r6, r2
1000f8f4:	2400      	movs	r4, #0
1000f8f6:	4333      	orrs	r3, r6
1000f8f8:	e7bf      	b.n	1000f87a <__aeabi_fadd+0x2e>
1000f8fa:	075a      	lsls	r2, r3, #29
1000f8fc:	d1bf      	bne.n	1000f87e <__aeabi_fadd+0x32>
1000f8fe:	08df      	lsrs	r7, r3, #3
1000f900:	0028      	movs	r0, r5
1000f902:	2cff      	cmp	r4, #255	; 0xff
1000f904:	d12f      	bne.n	1000f966 <__aeabi_fadd+0x11a>
1000f906:	2f00      	cmp	r7, #0
1000f908:	d100      	bne.n	1000f90c <__aeabi_fadd+0xc0>
1000f90a:	e087      	b.n	1000fa1c <__aeabi_fadd+0x1d0>
1000f90c:	2280      	movs	r2, #128	; 0x80
1000f90e:	03d2      	lsls	r2, r2, #15
1000f910:	0013      	movs	r3, r2
1000f912:	433b      	orrs	r3, r7
1000f914:	025b      	lsls	r3, r3, #9
1000f916:	0a5b      	lsrs	r3, r3, #9
1000f918:	24ff      	movs	r4, #255	; 0xff
1000f91a:	e7bf      	b.n	1000f89c <__aeabi_fadd+0x50>
1000f91c:	1ba1      	subs	r1, r4, r6
1000f91e:	2900      	cmp	r1, #0
1000f920:	dd49      	ble.n	1000f9b6 <__aeabi_fadd+0x16a>
1000f922:	2e00      	cmp	r6, #0
1000f924:	d029      	beq.n	1000f97a <__aeabi_fadd+0x12e>
1000f926:	2cff      	cmp	r4, #255	; 0xff
1000f928:	d0a7      	beq.n	1000f87a <__aeabi_fadd+0x2e>
1000f92a:	2680      	movs	r6, #128	; 0x80
1000f92c:	04f6      	lsls	r6, r6, #19
1000f92e:	4332      	orrs	r2, r6
1000f930:	291b      	cmp	r1, #27
1000f932:	dd00      	ble.n	1000f936 <__aeabi_fadd+0xea>
1000f934:	e08d      	b.n	1000fa52 <__aeabi_fadd+0x206>
1000f936:	0017      	movs	r7, r2
1000f938:	2620      	movs	r6, #32
1000f93a:	40cf      	lsrs	r7, r1
1000f93c:	1a71      	subs	r1, r6, r1
1000f93e:	408a      	lsls	r2, r1
1000f940:	1e51      	subs	r1, r2, #1
1000f942:	418a      	sbcs	r2, r1
1000f944:	433a      	orrs	r2, r7
1000f946:	189b      	adds	r3, r3, r2
1000f948:	015a      	lsls	r2, r3, #5
1000f94a:	d5d6      	bpl.n	1000f8fa <__aeabi_fadd+0xae>
1000f94c:	3401      	adds	r4, #1
1000f94e:	2cff      	cmp	r4, #255	; 0xff
1000f950:	d064      	beq.n	1000fa1c <__aeabi_fadd+0x1d0>
1000f952:	2201      	movs	r2, #1
1000f954:	4976      	ldr	r1, [pc, #472]	; (1000fb30 <__aeabi_fadd+0x2e4>)
1000f956:	401a      	ands	r2, r3
1000f958:	085b      	lsrs	r3, r3, #1
1000f95a:	400b      	ands	r3, r1
1000f95c:	4313      	orrs	r3, r2
1000f95e:	e78c      	b.n	1000f87a <__aeabi_fadd+0x2e>
1000f960:	1e03      	subs	r3, r0, #0
1000f962:	d1ca      	bne.n	1000f8fa <__aeabi_fadd+0xae>
1000f964:	2000      	movs	r0, #0
1000f966:	027b      	lsls	r3, r7, #9
1000f968:	0a5b      	lsrs	r3, r3, #9
1000f96a:	b2e4      	uxtb	r4, r4
1000f96c:	e796      	b.n	1000f89c <__aeabi_fadd+0x50>
1000f96e:	3801      	subs	r0, #1
1000f970:	2800      	cmp	r0, #0
1000f972:	d0aa      	beq.n	1000f8ca <__aeabi_fadd+0x7e>
1000f974:	2cff      	cmp	r4, #255	; 0xff
1000f976:	d19d      	bne.n	1000f8b4 <__aeabi_fadd+0x68>
1000f978:	e77f      	b.n	1000f87a <__aeabi_fadd+0x2e>
1000f97a:	2a00      	cmp	r2, #0
1000f97c:	d100      	bne.n	1000f980 <__aeabi_fadd+0x134>
1000f97e:	e77c      	b.n	1000f87a <__aeabi_fadd+0x2e>
1000f980:	3901      	subs	r1, #1
1000f982:	2900      	cmp	r1, #0
1000f984:	d0df      	beq.n	1000f946 <__aeabi_fadd+0xfa>
1000f986:	2cff      	cmp	r4, #255	; 0xff
1000f988:	d1d2      	bne.n	1000f930 <__aeabi_fadd+0xe4>
1000f98a:	e776      	b.n	1000f87a <__aeabi_fadd+0x2e>
1000f98c:	2800      	cmp	r0, #0
1000f98e:	d120      	bne.n	1000f9d2 <__aeabi_fadd+0x186>
1000f990:	1c60      	adds	r0, r4, #1
1000f992:	b2c0      	uxtb	r0, r0
1000f994:	2801      	cmp	r0, #1
1000f996:	dd53      	ble.n	1000fa40 <__aeabi_fadd+0x1f4>
1000f998:	2780      	movs	r7, #128	; 0x80
1000f99a:	1a9e      	subs	r6, r3, r2
1000f99c:	04ff      	lsls	r7, r7, #19
1000f99e:	4037      	ands	r7, r6
1000f9a0:	d02f      	beq.n	1000fa02 <__aeabi_fadd+0x1b6>
1000f9a2:	1ad6      	subs	r6, r2, r3
1000f9a4:	000d      	movs	r5, r1
1000f9a6:	e795      	b.n	1000f8d4 <__aeabi_fadd+0x88>
1000f9a8:	0028      	movs	r0, r5
1000f9aa:	2300      	movs	r3, #0
1000f9ac:	e776      	b.n	1000f89c <__aeabi_fadd+0x50>
1000f9ae:	4b61      	ldr	r3, [pc, #388]	; (1000fb34 <__aeabi_fadd+0x2e8>)
1000f9b0:	1a24      	subs	r4, r4, r0
1000f9b2:	4033      	ands	r3, r6
1000f9b4:	e761      	b.n	1000f87a <__aeabi_fadd+0x2e>
1000f9b6:	2900      	cmp	r1, #0
1000f9b8:	d14d      	bne.n	1000fa56 <__aeabi_fadd+0x20a>
1000f9ba:	1c61      	adds	r1, r4, #1
1000f9bc:	b2ce      	uxtb	r6, r1
1000f9be:	2e01      	cmp	r6, #1
1000f9c0:	dd2f      	ble.n	1000fa22 <__aeabi_fadd+0x1d6>
1000f9c2:	29ff      	cmp	r1, #255	; 0xff
1000f9c4:	d02a      	beq.n	1000fa1c <__aeabi_fadd+0x1d0>
1000f9c6:	189b      	adds	r3, r3, r2
1000f9c8:	085b      	lsrs	r3, r3, #1
1000f9ca:	000c      	movs	r4, r1
1000f9cc:	e755      	b.n	1000f87a <__aeabi_fadd+0x2e>
1000f9ce:	2201      	movs	r2, #1
1000f9d0:	e77b      	b.n	1000f8ca <__aeabi_fadd+0x7e>
1000f9d2:	2c00      	cmp	r4, #0
1000f9d4:	d11b      	bne.n	1000fa0e <__aeabi_fadd+0x1c2>
1000f9d6:	2b00      	cmp	r3, #0
1000f9d8:	d05b      	beq.n	1000fa92 <__aeabi_fadd+0x246>
1000f9da:	43c0      	mvns	r0, r0
1000f9dc:	2800      	cmp	r0, #0
1000f9de:	d00c      	beq.n	1000f9fa <__aeabi_fadd+0x1ae>
1000f9e0:	2eff      	cmp	r6, #255	; 0xff
1000f9e2:	d07e      	beq.n	1000fae2 <__aeabi_fadd+0x296>
1000f9e4:	281b      	cmp	r0, #27
1000f9e6:	dd00      	ble.n	1000f9ea <__aeabi_fadd+0x19e>
1000f9e8:	e092      	b.n	1000fb10 <__aeabi_fadd+0x2c4>
1000f9ea:	001d      	movs	r5, r3
1000f9ec:	2420      	movs	r4, #32
1000f9ee:	40c5      	lsrs	r5, r0
1000f9f0:	1a20      	subs	r0, r4, r0
1000f9f2:	4083      	lsls	r3, r0
1000f9f4:	1e58      	subs	r0, r3, #1
1000f9f6:	4183      	sbcs	r3, r0
1000f9f8:	432b      	orrs	r3, r5
1000f9fa:	1ad3      	subs	r3, r2, r3
1000f9fc:	0034      	movs	r4, r6
1000f9fe:	000d      	movs	r5, r1
1000fa00:	e764      	b.n	1000f8cc <__aeabi_fadd+0x80>
1000fa02:	2e00      	cmp	r6, #0
1000fa04:	d000      	beq.n	1000fa08 <__aeabi_fadd+0x1bc>
1000fa06:	e765      	b.n	1000f8d4 <__aeabi_fadd+0x88>
1000fa08:	2000      	movs	r0, #0
1000fa0a:	2400      	movs	r4, #0
1000fa0c:	e7ab      	b.n	1000f966 <__aeabi_fadd+0x11a>
1000fa0e:	2eff      	cmp	r6, #255	; 0xff
1000fa10:	d067      	beq.n	1000fae2 <__aeabi_fadd+0x296>
1000fa12:	2480      	movs	r4, #128	; 0x80
1000fa14:	04e4      	lsls	r4, r4, #19
1000fa16:	4240      	negs	r0, r0
1000fa18:	4323      	orrs	r3, r4
1000fa1a:	e7e3      	b.n	1000f9e4 <__aeabi_fadd+0x198>
1000fa1c:	24ff      	movs	r4, #255	; 0xff
1000fa1e:	2300      	movs	r3, #0
1000fa20:	e73c      	b.n	1000f89c <__aeabi_fadd+0x50>
1000fa22:	2c00      	cmp	r4, #0
1000fa24:	d161      	bne.n	1000faea <__aeabi_fadd+0x29e>
1000fa26:	2b00      	cmp	r3, #0
1000fa28:	d07e      	beq.n	1000fb28 <__aeabi_fadd+0x2dc>
1000fa2a:	2a00      	cmp	r2, #0
1000fa2c:	d100      	bne.n	1000fa30 <__aeabi_fadd+0x1e4>
1000fa2e:	e724      	b.n	1000f87a <__aeabi_fadd+0x2e>
1000fa30:	189b      	adds	r3, r3, r2
1000fa32:	015a      	lsls	r2, r3, #5
1000fa34:	d400      	bmi.n	1000fa38 <__aeabi_fadd+0x1ec>
1000fa36:	e760      	b.n	1000f8fa <__aeabi_fadd+0xae>
1000fa38:	4a3e      	ldr	r2, [pc, #248]	; (1000fb34 <__aeabi_fadd+0x2e8>)
1000fa3a:	000c      	movs	r4, r1
1000fa3c:	4013      	ands	r3, r2
1000fa3e:	e71c      	b.n	1000f87a <__aeabi_fadd+0x2e>
1000fa40:	2c00      	cmp	r4, #0
1000fa42:	d11e      	bne.n	1000fa82 <__aeabi_fadd+0x236>
1000fa44:	2b00      	cmp	r3, #0
1000fa46:	d12f      	bne.n	1000faa8 <__aeabi_fadd+0x25c>
1000fa48:	2a00      	cmp	r2, #0
1000fa4a:	d066      	beq.n	1000fb1a <__aeabi_fadd+0x2ce>
1000fa4c:	0013      	movs	r3, r2
1000fa4e:	000d      	movs	r5, r1
1000fa50:	e713      	b.n	1000f87a <__aeabi_fadd+0x2e>
1000fa52:	2201      	movs	r2, #1
1000fa54:	e777      	b.n	1000f946 <__aeabi_fadd+0xfa>
1000fa56:	2c00      	cmp	r4, #0
1000fa58:	d11f      	bne.n	1000fa9a <__aeabi_fadd+0x24e>
1000fa5a:	2b00      	cmp	r3, #0
1000fa5c:	d05a      	beq.n	1000fb14 <__aeabi_fadd+0x2c8>
1000fa5e:	43c9      	mvns	r1, r1
1000fa60:	2900      	cmp	r1, #0
1000fa62:	d00b      	beq.n	1000fa7c <__aeabi_fadd+0x230>
1000fa64:	2eff      	cmp	r6, #255	; 0xff
1000fa66:	d050      	beq.n	1000fb0a <__aeabi_fadd+0x2be>
1000fa68:	291b      	cmp	r1, #27
1000fa6a:	dc5f      	bgt.n	1000fb2c <__aeabi_fadd+0x2e0>
1000fa6c:	001f      	movs	r7, r3
1000fa6e:	2420      	movs	r4, #32
1000fa70:	40cf      	lsrs	r7, r1
1000fa72:	1a61      	subs	r1, r4, r1
1000fa74:	408b      	lsls	r3, r1
1000fa76:	1e59      	subs	r1, r3, #1
1000fa78:	418b      	sbcs	r3, r1
1000fa7a:	433b      	orrs	r3, r7
1000fa7c:	189b      	adds	r3, r3, r2
1000fa7e:	0034      	movs	r4, r6
1000fa80:	e762      	b.n	1000f948 <__aeabi_fadd+0xfc>
1000fa82:	2b00      	cmp	r3, #0
1000fa84:	d11c      	bne.n	1000fac0 <__aeabi_fadd+0x274>
1000fa86:	2a00      	cmp	r2, #0
1000fa88:	d04a      	beq.n	1000fb20 <__aeabi_fadd+0x2d4>
1000fa8a:	0013      	movs	r3, r2
1000fa8c:	000d      	movs	r5, r1
1000fa8e:	24ff      	movs	r4, #255	; 0xff
1000fa90:	e6f3      	b.n	1000f87a <__aeabi_fadd+0x2e>
1000fa92:	0013      	movs	r3, r2
1000fa94:	0034      	movs	r4, r6
1000fa96:	000d      	movs	r5, r1
1000fa98:	e6ef      	b.n	1000f87a <__aeabi_fadd+0x2e>
1000fa9a:	2eff      	cmp	r6, #255	; 0xff
1000fa9c:	d035      	beq.n	1000fb0a <__aeabi_fadd+0x2be>
1000fa9e:	2480      	movs	r4, #128	; 0x80
1000faa0:	04e4      	lsls	r4, r4, #19
1000faa2:	4249      	negs	r1, r1
1000faa4:	4323      	orrs	r3, r4
1000faa6:	e7df      	b.n	1000fa68 <__aeabi_fadd+0x21c>
1000faa8:	2a00      	cmp	r2, #0
1000faaa:	d100      	bne.n	1000faae <__aeabi_fadd+0x262>
1000faac:	e6e5      	b.n	1000f87a <__aeabi_fadd+0x2e>
1000faae:	2780      	movs	r7, #128	; 0x80
1000fab0:	1a98      	subs	r0, r3, r2
1000fab2:	04ff      	lsls	r7, r7, #19
1000fab4:	4007      	ands	r7, r0
1000fab6:	d100      	bne.n	1000faba <__aeabi_fadd+0x26e>
1000fab8:	e752      	b.n	1000f960 <__aeabi_fadd+0x114>
1000faba:	1ad3      	subs	r3, r2, r3
1000fabc:	000d      	movs	r5, r1
1000fabe:	e6dc      	b.n	1000f87a <__aeabi_fadd+0x2e>
1000fac0:	24ff      	movs	r4, #255	; 0xff
1000fac2:	2a00      	cmp	r2, #0
1000fac4:	d100      	bne.n	1000fac8 <__aeabi_fadd+0x27c>
1000fac6:	e6d8      	b.n	1000f87a <__aeabi_fadd+0x2e>
1000fac8:	2080      	movs	r0, #128	; 0x80
1000faca:	08db      	lsrs	r3, r3, #3
1000facc:	03c0      	lsls	r0, r0, #15
1000face:	4203      	tst	r3, r0
1000fad0:	d004      	beq.n	1000fadc <__aeabi_fadd+0x290>
1000fad2:	08d2      	lsrs	r2, r2, #3
1000fad4:	4202      	tst	r2, r0
1000fad6:	d101      	bne.n	1000fadc <__aeabi_fadd+0x290>
1000fad8:	0013      	movs	r3, r2
1000fada:	000d      	movs	r5, r1
1000fadc:	00db      	lsls	r3, r3, #3
1000fade:	24ff      	movs	r4, #255	; 0xff
1000fae0:	e6cb      	b.n	1000f87a <__aeabi_fadd+0x2e>
1000fae2:	0013      	movs	r3, r2
1000fae4:	24ff      	movs	r4, #255	; 0xff
1000fae6:	000d      	movs	r5, r1
1000fae8:	e6c7      	b.n	1000f87a <__aeabi_fadd+0x2e>
1000faea:	2b00      	cmp	r3, #0
1000faec:	d00d      	beq.n	1000fb0a <__aeabi_fadd+0x2be>
1000faee:	24ff      	movs	r4, #255	; 0xff
1000faf0:	2a00      	cmp	r2, #0
1000faf2:	d100      	bne.n	1000faf6 <__aeabi_fadd+0x2aa>
1000faf4:	e6c1      	b.n	1000f87a <__aeabi_fadd+0x2e>
1000faf6:	2180      	movs	r1, #128	; 0x80
1000faf8:	08db      	lsrs	r3, r3, #3
1000fafa:	03c9      	lsls	r1, r1, #15
1000fafc:	420b      	tst	r3, r1
1000fafe:	d0ed      	beq.n	1000fadc <__aeabi_fadd+0x290>
1000fb00:	08d2      	lsrs	r2, r2, #3
1000fb02:	420a      	tst	r2, r1
1000fb04:	d1ea      	bne.n	1000fadc <__aeabi_fadd+0x290>
1000fb06:	0013      	movs	r3, r2
1000fb08:	e7e8      	b.n	1000fadc <__aeabi_fadd+0x290>
1000fb0a:	0013      	movs	r3, r2
1000fb0c:	24ff      	movs	r4, #255	; 0xff
1000fb0e:	e6b4      	b.n	1000f87a <__aeabi_fadd+0x2e>
1000fb10:	2301      	movs	r3, #1
1000fb12:	e772      	b.n	1000f9fa <__aeabi_fadd+0x1ae>
1000fb14:	0013      	movs	r3, r2
1000fb16:	0034      	movs	r4, r6
1000fb18:	e6af      	b.n	1000f87a <__aeabi_fadd+0x2e>
1000fb1a:	2700      	movs	r7, #0
1000fb1c:	2000      	movs	r0, #0
1000fb1e:	e722      	b.n	1000f966 <__aeabi_fadd+0x11a>
1000fb20:	2780      	movs	r7, #128	; 0x80
1000fb22:	2000      	movs	r0, #0
1000fb24:	03ff      	lsls	r7, r7, #15
1000fb26:	e6f1      	b.n	1000f90c <__aeabi_fadd+0xc0>
1000fb28:	0013      	movs	r3, r2
1000fb2a:	e6a6      	b.n	1000f87a <__aeabi_fadd+0x2e>
1000fb2c:	2301      	movs	r3, #1
1000fb2e:	e7a5      	b.n	1000fa7c <__aeabi_fadd+0x230>
1000fb30:	7dffffff 	.word	0x7dffffff
1000fb34:	fbffffff 	.word	0xfbffffff

1000fb38 <__aeabi_fdiv>:
1000fb38:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fb3a:	4656      	mov	r6, sl
1000fb3c:	4644      	mov	r4, r8
1000fb3e:	465f      	mov	r7, fp
1000fb40:	464d      	mov	r5, r9
1000fb42:	b4f0      	push	{r4, r5, r6, r7}
1000fb44:	0244      	lsls	r4, r0, #9
1000fb46:	0046      	lsls	r6, r0, #1
1000fb48:	0fc7      	lsrs	r7, r0, #31
1000fb4a:	b083      	sub	sp, #12
1000fb4c:	4688      	mov	r8, r1
1000fb4e:	0a65      	lsrs	r5, r4, #9
1000fb50:	0e36      	lsrs	r6, r6, #24
1000fb52:	46ba      	mov	sl, r7
1000fb54:	d03d      	beq.n	1000fbd2 <__aeabi_fdiv+0x9a>
1000fb56:	2eff      	cmp	r6, #255	; 0xff
1000fb58:	d022      	beq.n	1000fba0 <__aeabi_fdiv+0x68>
1000fb5a:	2300      	movs	r3, #0
1000fb5c:	00ec      	lsls	r4, r5, #3
1000fb5e:	2580      	movs	r5, #128	; 0x80
1000fb60:	4699      	mov	r9, r3
1000fb62:	469b      	mov	fp, r3
1000fb64:	04ed      	lsls	r5, r5, #19
1000fb66:	4325      	orrs	r5, r4
1000fb68:	3e7f      	subs	r6, #127	; 0x7f
1000fb6a:	4643      	mov	r3, r8
1000fb6c:	025c      	lsls	r4, r3, #9
1000fb6e:	0058      	lsls	r0, r3, #1
1000fb70:	0fdb      	lsrs	r3, r3, #31
1000fb72:	0a64      	lsrs	r4, r4, #9
1000fb74:	0e00      	lsrs	r0, r0, #24
1000fb76:	4698      	mov	r8, r3
1000fb78:	d036      	beq.n	1000fbe8 <__aeabi_fdiv+0xb0>
1000fb7a:	28ff      	cmp	r0, #255	; 0xff
1000fb7c:	d030      	beq.n	1000fbe0 <__aeabi_fdiv+0xa8>
1000fb7e:	2380      	movs	r3, #128	; 0x80
1000fb80:	2100      	movs	r1, #0
1000fb82:	00e4      	lsls	r4, r4, #3
1000fb84:	04db      	lsls	r3, r3, #19
1000fb86:	431c      	orrs	r4, r3
1000fb88:	387f      	subs	r0, #127	; 0x7f
1000fb8a:	1a30      	subs	r0, r6, r0
1000fb8c:	9001      	str	r0, [sp, #4]
1000fb8e:	4648      	mov	r0, r9
1000fb90:	4642      	mov	r2, r8
1000fb92:	4308      	orrs	r0, r1
1000fb94:	4e72      	ldr	r6, [pc, #456]	; (1000fd60 <__aeabi_fdiv+0x228>)
1000fb96:	0080      	lsls	r0, r0, #2
1000fb98:	5830      	ldr	r0, [r6, r0]
1000fb9a:	407a      	eors	r2, r7
1000fb9c:	0013      	movs	r3, r2
1000fb9e:	4687      	mov	pc, r0
1000fba0:	2d00      	cmp	r5, #0
1000fba2:	d144      	bne.n	1000fc2e <__aeabi_fdiv+0xf6>
1000fba4:	2308      	movs	r3, #8
1000fba6:	4699      	mov	r9, r3
1000fba8:	3b06      	subs	r3, #6
1000fbaa:	469b      	mov	fp, r3
1000fbac:	e7dd      	b.n	1000fb6a <__aeabi_fdiv+0x32>
1000fbae:	2201      	movs	r2, #1
1000fbb0:	20ff      	movs	r0, #255	; 0xff
1000fbb2:	2400      	movs	r4, #0
1000fbb4:	401a      	ands	r2, r3
1000fbb6:	0264      	lsls	r4, r4, #9
1000fbb8:	05c3      	lsls	r3, r0, #23
1000fbba:	0a64      	lsrs	r4, r4, #9
1000fbbc:	07d2      	lsls	r2, r2, #31
1000fbbe:	431c      	orrs	r4, r3
1000fbc0:	4314      	orrs	r4, r2
1000fbc2:	0020      	movs	r0, r4
1000fbc4:	b003      	add	sp, #12
1000fbc6:	bc3c      	pop	{r2, r3, r4, r5}
1000fbc8:	4690      	mov	r8, r2
1000fbca:	4699      	mov	r9, r3
1000fbcc:	46a2      	mov	sl, r4
1000fbce:	46ab      	mov	fp, r5
1000fbd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fbd2:	2d00      	cmp	r5, #0
1000fbd4:	d120      	bne.n	1000fc18 <__aeabi_fdiv+0xe0>
1000fbd6:	2304      	movs	r3, #4
1000fbd8:	4699      	mov	r9, r3
1000fbda:	3b03      	subs	r3, #3
1000fbdc:	469b      	mov	fp, r3
1000fbde:	e7c4      	b.n	1000fb6a <__aeabi_fdiv+0x32>
1000fbe0:	2c00      	cmp	r4, #0
1000fbe2:	d117      	bne.n	1000fc14 <__aeabi_fdiv+0xdc>
1000fbe4:	2102      	movs	r1, #2
1000fbe6:	e002      	b.n	1000fbee <__aeabi_fdiv+0xb6>
1000fbe8:	2c00      	cmp	r4, #0
1000fbea:	d10a      	bne.n	1000fc02 <__aeabi_fdiv+0xca>
1000fbec:	2101      	movs	r1, #1
1000fbee:	1a32      	subs	r2, r6, r0
1000fbf0:	9201      	str	r2, [sp, #4]
1000fbf2:	464a      	mov	r2, r9
1000fbf4:	4643      	mov	r3, r8
1000fbf6:	430a      	orrs	r2, r1
1000fbf8:	485a      	ldr	r0, [pc, #360]	; (1000fd64 <__aeabi_fdiv+0x22c>)
1000fbfa:	0092      	lsls	r2, r2, #2
1000fbfc:	5882      	ldr	r2, [r0, r2]
1000fbfe:	407b      	eors	r3, r7
1000fc00:	4697      	mov	pc, r2
1000fc02:	0020      	movs	r0, r4
1000fc04:	f001 fbee 	bl	100113e4 <__clzsi2>
1000fc08:	1f43      	subs	r3, r0, #5
1000fc0a:	3076      	adds	r0, #118	; 0x76
1000fc0c:	409c      	lsls	r4, r3
1000fc0e:	4240      	negs	r0, r0
1000fc10:	2100      	movs	r1, #0
1000fc12:	e7ba      	b.n	1000fb8a <__aeabi_fdiv+0x52>
1000fc14:	2103      	movs	r1, #3
1000fc16:	e7b8      	b.n	1000fb8a <__aeabi_fdiv+0x52>
1000fc18:	0028      	movs	r0, r5
1000fc1a:	f001 fbe3 	bl	100113e4 <__clzsi2>
1000fc1e:	1f43      	subs	r3, r0, #5
1000fc20:	409d      	lsls	r5, r3
1000fc22:	2300      	movs	r3, #0
1000fc24:	3076      	adds	r0, #118	; 0x76
1000fc26:	4246      	negs	r6, r0
1000fc28:	4699      	mov	r9, r3
1000fc2a:	469b      	mov	fp, r3
1000fc2c:	e79d      	b.n	1000fb6a <__aeabi_fdiv+0x32>
1000fc2e:	230c      	movs	r3, #12
1000fc30:	4699      	mov	r9, r3
1000fc32:	3b09      	subs	r3, #9
1000fc34:	469b      	mov	fp, r3
1000fc36:	e798      	b.n	1000fb6a <__aeabi_fdiv+0x32>
1000fc38:	2480      	movs	r4, #128	; 0x80
1000fc3a:	2200      	movs	r2, #0
1000fc3c:	03e4      	lsls	r4, r4, #15
1000fc3e:	20ff      	movs	r0, #255	; 0xff
1000fc40:	e7b9      	b.n	1000fbb6 <__aeabi_fdiv+0x7e>
1000fc42:	2400      	movs	r4, #0
1000fc44:	46c2      	mov	sl, r8
1000fc46:	468b      	mov	fp, r1
1000fc48:	465a      	mov	r2, fp
1000fc4a:	4653      	mov	r3, sl
1000fc4c:	2a02      	cmp	r2, #2
1000fc4e:	d0ae      	beq.n	1000fbae <__aeabi_fdiv+0x76>
1000fc50:	2a03      	cmp	r2, #3
1000fc52:	d07d      	beq.n	1000fd50 <__aeabi_fdiv+0x218>
1000fc54:	2a01      	cmp	r2, #1
1000fc56:	d131      	bne.n	1000fcbc <__aeabi_fdiv+0x184>
1000fc58:	2201      	movs	r2, #1
1000fc5a:	2000      	movs	r0, #0
1000fc5c:	401a      	ands	r2, r3
1000fc5e:	2400      	movs	r4, #0
1000fc60:	e7a9      	b.n	1000fbb6 <__aeabi_fdiv+0x7e>
1000fc62:	2201      	movs	r2, #1
1000fc64:	1a10      	subs	r0, r2, r0
1000fc66:	281b      	cmp	r0, #27
1000fc68:	dd56      	ble.n	1000fd18 <__aeabi_fdiv+0x1e0>
1000fc6a:	401a      	ands	r2, r3
1000fc6c:	2000      	movs	r0, #0
1000fc6e:	2400      	movs	r4, #0
1000fc70:	e7a1      	b.n	1000fbb6 <__aeabi_fdiv+0x7e>
1000fc72:	2380      	movs	r3, #128	; 0x80
1000fc74:	03db      	lsls	r3, r3, #15
1000fc76:	421d      	tst	r5, r3
1000fc78:	d14b      	bne.n	1000fd12 <__aeabi_fdiv+0x1da>
1000fc7a:	2380      	movs	r3, #128	; 0x80
1000fc7c:	03db      	lsls	r3, r3, #15
1000fc7e:	432b      	orrs	r3, r5
1000fc80:	025c      	lsls	r4, r3, #9
1000fc82:	0a64      	lsrs	r4, r4, #9
1000fc84:	003a      	movs	r2, r7
1000fc86:	20ff      	movs	r0, #255	; 0xff
1000fc88:	e795      	b.n	1000fbb6 <__aeabi_fdiv+0x7e>
1000fc8a:	016d      	lsls	r5, r5, #5
1000fc8c:	0160      	lsls	r0, r4, #5
1000fc8e:	4285      	cmp	r5, r0
1000fc90:	d230      	bcs.n	1000fcf4 <__aeabi_fdiv+0x1bc>
1000fc92:	9a01      	ldr	r2, [sp, #4]
1000fc94:	2400      	movs	r4, #0
1000fc96:	3a01      	subs	r2, #1
1000fc98:	9201      	str	r2, [sp, #4]
1000fc9a:	221b      	movs	r2, #27
1000fc9c:	2701      	movs	r7, #1
1000fc9e:	0029      	movs	r1, r5
1000fca0:	0064      	lsls	r4, r4, #1
1000fca2:	006d      	lsls	r5, r5, #1
1000fca4:	2900      	cmp	r1, #0
1000fca6:	db01      	blt.n	1000fcac <__aeabi_fdiv+0x174>
1000fca8:	42a8      	cmp	r0, r5
1000fcaa:	d801      	bhi.n	1000fcb0 <__aeabi_fdiv+0x178>
1000fcac:	1a2d      	subs	r5, r5, r0
1000fcae:	433c      	orrs	r4, r7
1000fcb0:	3a01      	subs	r2, #1
1000fcb2:	2a00      	cmp	r2, #0
1000fcb4:	d1f3      	bne.n	1000fc9e <__aeabi_fdiv+0x166>
1000fcb6:	1e6a      	subs	r2, r5, #1
1000fcb8:	4195      	sbcs	r5, r2
1000fcba:	432c      	orrs	r4, r5
1000fcbc:	9801      	ldr	r0, [sp, #4]
1000fcbe:	307f      	adds	r0, #127	; 0x7f
1000fcc0:	2800      	cmp	r0, #0
1000fcc2:	ddce      	ble.n	1000fc62 <__aeabi_fdiv+0x12a>
1000fcc4:	0762      	lsls	r2, r4, #29
1000fcc6:	d004      	beq.n	1000fcd2 <__aeabi_fdiv+0x19a>
1000fcc8:	220f      	movs	r2, #15
1000fcca:	4022      	ands	r2, r4
1000fccc:	2a04      	cmp	r2, #4
1000fcce:	d000      	beq.n	1000fcd2 <__aeabi_fdiv+0x19a>
1000fcd0:	3404      	adds	r4, #4
1000fcd2:	0122      	lsls	r2, r4, #4
1000fcd4:	d503      	bpl.n	1000fcde <__aeabi_fdiv+0x1a6>
1000fcd6:	4a24      	ldr	r2, [pc, #144]	; (1000fd68 <__aeabi_fdiv+0x230>)
1000fcd8:	9801      	ldr	r0, [sp, #4]
1000fcda:	4014      	ands	r4, r2
1000fcdc:	3080      	adds	r0, #128	; 0x80
1000fcde:	28fe      	cmp	r0, #254	; 0xfe
1000fce0:	dd00      	ble.n	1000fce4 <__aeabi_fdiv+0x1ac>
1000fce2:	e764      	b.n	1000fbae <__aeabi_fdiv+0x76>
1000fce4:	2201      	movs	r2, #1
1000fce6:	01a4      	lsls	r4, r4, #6
1000fce8:	0a64      	lsrs	r4, r4, #9
1000fcea:	b2c0      	uxtb	r0, r0
1000fcec:	401a      	ands	r2, r3
1000fcee:	e762      	b.n	1000fbb6 <__aeabi_fdiv+0x7e>
1000fcf0:	002c      	movs	r4, r5
1000fcf2:	e7a9      	b.n	1000fc48 <__aeabi_fdiv+0x110>
1000fcf4:	1a2d      	subs	r5, r5, r0
1000fcf6:	221a      	movs	r2, #26
1000fcf8:	2401      	movs	r4, #1
1000fcfa:	e7cf      	b.n	1000fc9c <__aeabi_fdiv+0x164>
1000fcfc:	026b      	lsls	r3, r5, #9
1000fcfe:	d5bc      	bpl.n	1000fc7a <__aeabi_fdiv+0x142>
1000fd00:	2400      	movs	r4, #0
1000fd02:	2380      	movs	r3, #128	; 0x80
1000fd04:	03db      	lsls	r3, r3, #15
1000fd06:	431c      	orrs	r4, r3
1000fd08:	0264      	lsls	r4, r4, #9
1000fd0a:	0a64      	lsrs	r4, r4, #9
1000fd0c:	4642      	mov	r2, r8
1000fd0e:	20ff      	movs	r0, #255	; 0xff
1000fd10:	e751      	b.n	1000fbb6 <__aeabi_fdiv+0x7e>
1000fd12:	421c      	tst	r4, r3
1000fd14:	d1b3      	bne.n	1000fc7e <__aeabi_fdiv+0x146>
1000fd16:	e7f4      	b.n	1000fd02 <__aeabi_fdiv+0x1ca>
1000fd18:	0021      	movs	r1, r4
1000fd1a:	2220      	movs	r2, #32
1000fd1c:	40c1      	lsrs	r1, r0
1000fd1e:	1a10      	subs	r0, r2, r0
1000fd20:	4084      	lsls	r4, r0
1000fd22:	1e62      	subs	r2, r4, #1
1000fd24:	4194      	sbcs	r4, r2
1000fd26:	430c      	orrs	r4, r1
1000fd28:	0762      	lsls	r2, r4, #29
1000fd2a:	d004      	beq.n	1000fd36 <__aeabi_fdiv+0x1fe>
1000fd2c:	220f      	movs	r2, #15
1000fd2e:	4022      	ands	r2, r4
1000fd30:	2a04      	cmp	r2, #4
1000fd32:	d000      	beq.n	1000fd36 <__aeabi_fdiv+0x1fe>
1000fd34:	3404      	adds	r4, #4
1000fd36:	0162      	lsls	r2, r4, #5
1000fd38:	d504      	bpl.n	1000fd44 <__aeabi_fdiv+0x20c>
1000fd3a:	2201      	movs	r2, #1
1000fd3c:	2001      	movs	r0, #1
1000fd3e:	401a      	ands	r2, r3
1000fd40:	2400      	movs	r4, #0
1000fd42:	e738      	b.n	1000fbb6 <__aeabi_fdiv+0x7e>
1000fd44:	2201      	movs	r2, #1
1000fd46:	01a4      	lsls	r4, r4, #6
1000fd48:	0a64      	lsrs	r4, r4, #9
1000fd4a:	401a      	ands	r2, r3
1000fd4c:	2000      	movs	r0, #0
1000fd4e:	e732      	b.n	1000fbb6 <__aeabi_fdiv+0x7e>
1000fd50:	2380      	movs	r3, #128	; 0x80
1000fd52:	03db      	lsls	r3, r3, #15
1000fd54:	431c      	orrs	r4, r3
1000fd56:	0264      	lsls	r4, r4, #9
1000fd58:	0a64      	lsrs	r4, r4, #9
1000fd5a:	4652      	mov	r2, sl
1000fd5c:	20ff      	movs	r0, #255	; 0xff
1000fd5e:	e72a      	b.n	1000fbb6 <__aeabi_fdiv+0x7e>
1000fd60:	10013568 	.word	0x10013568
1000fd64:	100135a8 	.word	0x100135a8
1000fd68:	f7ffffff 	.word	0xf7ffffff

1000fd6c <__eqsf2>:
1000fd6c:	0243      	lsls	r3, r0, #9
1000fd6e:	b570      	push	{r4, r5, r6, lr}
1000fd70:	0042      	lsls	r2, r0, #1
1000fd72:	004c      	lsls	r4, r1, #1
1000fd74:	0a5d      	lsrs	r5, r3, #9
1000fd76:	0fc3      	lsrs	r3, r0, #31
1000fd78:	0248      	lsls	r0, r1, #9
1000fd7a:	0e12      	lsrs	r2, r2, #24
1000fd7c:	0a46      	lsrs	r6, r0, #9
1000fd7e:	0e24      	lsrs	r4, r4, #24
1000fd80:	0fc9      	lsrs	r1, r1, #31
1000fd82:	2aff      	cmp	r2, #255	; 0xff
1000fd84:	d00f      	beq.n	1000fda6 <__eqsf2+0x3a>
1000fd86:	2cff      	cmp	r4, #255	; 0xff
1000fd88:	d011      	beq.n	1000fdae <__eqsf2+0x42>
1000fd8a:	2001      	movs	r0, #1
1000fd8c:	42a2      	cmp	r2, r4
1000fd8e:	d000      	beq.n	1000fd92 <__eqsf2+0x26>
1000fd90:	bd70      	pop	{r4, r5, r6, pc}
1000fd92:	42b5      	cmp	r5, r6
1000fd94:	d1fc      	bne.n	1000fd90 <__eqsf2+0x24>
1000fd96:	428b      	cmp	r3, r1
1000fd98:	d00d      	beq.n	1000fdb6 <__eqsf2+0x4a>
1000fd9a:	2a00      	cmp	r2, #0
1000fd9c:	d1f8      	bne.n	1000fd90 <__eqsf2+0x24>
1000fd9e:	0028      	movs	r0, r5
1000fda0:	1e43      	subs	r3, r0, #1
1000fda2:	4198      	sbcs	r0, r3
1000fda4:	e7f4      	b.n	1000fd90 <__eqsf2+0x24>
1000fda6:	2001      	movs	r0, #1
1000fda8:	2d00      	cmp	r5, #0
1000fdaa:	d1f1      	bne.n	1000fd90 <__eqsf2+0x24>
1000fdac:	e7eb      	b.n	1000fd86 <__eqsf2+0x1a>
1000fdae:	2001      	movs	r0, #1
1000fdb0:	2e00      	cmp	r6, #0
1000fdb2:	d1ed      	bne.n	1000fd90 <__eqsf2+0x24>
1000fdb4:	e7e9      	b.n	1000fd8a <__eqsf2+0x1e>
1000fdb6:	2000      	movs	r0, #0
1000fdb8:	e7ea      	b.n	1000fd90 <__eqsf2+0x24>
1000fdba:	46c0      	nop			; (mov r8, r8)

1000fdbc <__gesf2>:
1000fdbc:	0243      	lsls	r3, r0, #9
1000fdbe:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fdc0:	0042      	lsls	r2, r0, #1
1000fdc2:	0a5d      	lsrs	r5, r3, #9
1000fdc4:	0fc3      	lsrs	r3, r0, #31
1000fdc6:	0248      	lsls	r0, r1, #9
1000fdc8:	0a44      	lsrs	r4, r0, #9
1000fdca:	0048      	lsls	r0, r1, #1
1000fdcc:	0e12      	lsrs	r2, r2, #24
1000fdce:	0e00      	lsrs	r0, r0, #24
1000fdd0:	0fc9      	lsrs	r1, r1, #31
1000fdd2:	2aff      	cmp	r2, #255	; 0xff
1000fdd4:	d01f      	beq.n	1000fe16 <__gesf2+0x5a>
1000fdd6:	28ff      	cmp	r0, #255	; 0xff
1000fdd8:	d022      	beq.n	1000fe20 <__gesf2+0x64>
1000fdda:	2a00      	cmp	r2, #0
1000fddc:	d109      	bne.n	1000fdf2 <__gesf2+0x36>
1000fdde:	426e      	negs	r6, r5
1000fde0:	416e      	adcs	r6, r5
1000fde2:	2800      	cmp	r0, #0
1000fde4:	d10f      	bne.n	1000fe06 <__gesf2+0x4a>
1000fde6:	2c00      	cmp	r4, #0
1000fde8:	d10d      	bne.n	1000fe06 <__gesf2+0x4a>
1000fdea:	2000      	movs	r0, #0
1000fdec:	2d00      	cmp	r5, #0
1000fdee:	d009      	beq.n	1000fe04 <__gesf2+0x48>
1000fdf0:	e005      	b.n	1000fdfe <__gesf2+0x42>
1000fdf2:	2800      	cmp	r0, #0
1000fdf4:	d101      	bne.n	1000fdfa <__gesf2+0x3e>
1000fdf6:	2c00      	cmp	r4, #0
1000fdf8:	d001      	beq.n	1000fdfe <__gesf2+0x42>
1000fdfa:	428b      	cmp	r3, r1
1000fdfc:	d013      	beq.n	1000fe26 <__gesf2+0x6a>
1000fdfe:	4258      	negs	r0, r3
1000fe00:	2301      	movs	r3, #1
1000fe02:	4318      	orrs	r0, r3
1000fe04:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fe06:	2e00      	cmp	r6, #0
1000fe08:	d0f7      	beq.n	1000fdfa <__gesf2+0x3e>
1000fe0a:	4248      	negs	r0, r1
1000fe0c:	4141      	adcs	r1, r0
1000fe0e:	2001      	movs	r0, #1
1000fe10:	4249      	negs	r1, r1
1000fe12:	4308      	orrs	r0, r1
1000fe14:	e7f6      	b.n	1000fe04 <__gesf2+0x48>
1000fe16:	2d00      	cmp	r5, #0
1000fe18:	d0dd      	beq.n	1000fdd6 <__gesf2+0x1a>
1000fe1a:	2002      	movs	r0, #2
1000fe1c:	4240      	negs	r0, r0
1000fe1e:	e7f1      	b.n	1000fe04 <__gesf2+0x48>
1000fe20:	2c00      	cmp	r4, #0
1000fe22:	d0da      	beq.n	1000fdda <__gesf2+0x1e>
1000fe24:	e7f9      	b.n	1000fe1a <__gesf2+0x5e>
1000fe26:	4282      	cmp	r2, r0
1000fe28:	dce9      	bgt.n	1000fdfe <__gesf2+0x42>
1000fe2a:	db04      	blt.n	1000fe36 <__gesf2+0x7a>
1000fe2c:	42a5      	cmp	r5, r4
1000fe2e:	d8e6      	bhi.n	1000fdfe <__gesf2+0x42>
1000fe30:	2000      	movs	r0, #0
1000fe32:	42a5      	cmp	r5, r4
1000fe34:	d2e6      	bcs.n	1000fe04 <__gesf2+0x48>
1000fe36:	4258      	negs	r0, r3
1000fe38:	4143      	adcs	r3, r0
1000fe3a:	2001      	movs	r0, #1
1000fe3c:	425b      	negs	r3, r3
1000fe3e:	4318      	orrs	r0, r3
1000fe40:	e7e0      	b.n	1000fe04 <__gesf2+0x48>
1000fe42:	46c0      	nop			; (mov r8, r8)

1000fe44 <__lesf2>:
1000fe44:	0243      	lsls	r3, r0, #9
1000fe46:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fe48:	0042      	lsls	r2, r0, #1
1000fe4a:	004c      	lsls	r4, r1, #1
1000fe4c:	0a5e      	lsrs	r6, r3, #9
1000fe4e:	0fc3      	lsrs	r3, r0, #31
1000fe50:	0248      	lsls	r0, r1, #9
1000fe52:	0e12      	lsrs	r2, r2, #24
1000fe54:	0a45      	lsrs	r5, r0, #9
1000fe56:	0e24      	lsrs	r4, r4, #24
1000fe58:	0fc9      	lsrs	r1, r1, #31
1000fe5a:	2aff      	cmp	r2, #255	; 0xff
1000fe5c:	d017      	beq.n	1000fe8e <__lesf2+0x4a>
1000fe5e:	2cff      	cmp	r4, #255	; 0xff
1000fe60:	d019      	beq.n	1000fe96 <__lesf2+0x52>
1000fe62:	2a00      	cmp	r2, #0
1000fe64:	d10b      	bne.n	1000fe7e <__lesf2+0x3a>
1000fe66:	4270      	negs	r0, r6
1000fe68:	4170      	adcs	r0, r6
1000fe6a:	2c00      	cmp	r4, #0
1000fe6c:	d017      	beq.n	1000fe9e <__lesf2+0x5a>
1000fe6e:	2800      	cmp	r0, #0
1000fe70:	d007      	beq.n	1000fe82 <__lesf2+0x3e>
1000fe72:	4248      	negs	r0, r1
1000fe74:	4141      	adcs	r1, r0
1000fe76:	2001      	movs	r0, #1
1000fe78:	4249      	negs	r1, r1
1000fe7a:	4308      	orrs	r0, r1
1000fe7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fe7e:	2c00      	cmp	r4, #0
1000fe80:	d013      	beq.n	1000feaa <__lesf2+0x66>
1000fe82:	428b      	cmp	r3, r1
1000fe84:	d014      	beq.n	1000feb0 <__lesf2+0x6c>
1000fe86:	4258      	negs	r0, r3
1000fe88:	2301      	movs	r3, #1
1000fe8a:	4318      	orrs	r0, r3
1000fe8c:	e7f6      	b.n	1000fe7c <__lesf2+0x38>
1000fe8e:	2002      	movs	r0, #2
1000fe90:	2e00      	cmp	r6, #0
1000fe92:	d1f3      	bne.n	1000fe7c <__lesf2+0x38>
1000fe94:	e7e3      	b.n	1000fe5e <__lesf2+0x1a>
1000fe96:	2002      	movs	r0, #2
1000fe98:	2d00      	cmp	r5, #0
1000fe9a:	d1ef      	bne.n	1000fe7c <__lesf2+0x38>
1000fe9c:	e7e1      	b.n	1000fe62 <__lesf2+0x1e>
1000fe9e:	2d00      	cmp	r5, #0
1000fea0:	d1e5      	bne.n	1000fe6e <__lesf2+0x2a>
1000fea2:	2000      	movs	r0, #0
1000fea4:	2e00      	cmp	r6, #0
1000fea6:	d0e9      	beq.n	1000fe7c <__lesf2+0x38>
1000fea8:	e7ed      	b.n	1000fe86 <__lesf2+0x42>
1000feaa:	2d00      	cmp	r5, #0
1000feac:	d1e9      	bne.n	1000fe82 <__lesf2+0x3e>
1000feae:	e7ea      	b.n	1000fe86 <__lesf2+0x42>
1000feb0:	42a2      	cmp	r2, r4
1000feb2:	dce8      	bgt.n	1000fe86 <__lesf2+0x42>
1000feb4:	db04      	blt.n	1000fec0 <__lesf2+0x7c>
1000feb6:	42ae      	cmp	r6, r5
1000feb8:	d8e5      	bhi.n	1000fe86 <__lesf2+0x42>
1000feba:	2000      	movs	r0, #0
1000febc:	42ae      	cmp	r6, r5
1000febe:	d2dd      	bcs.n	1000fe7c <__lesf2+0x38>
1000fec0:	4258      	negs	r0, r3
1000fec2:	4143      	adcs	r3, r0
1000fec4:	2001      	movs	r0, #1
1000fec6:	425b      	negs	r3, r3
1000fec8:	4318      	orrs	r0, r3
1000feca:	e7d7      	b.n	1000fe7c <__lesf2+0x38>

1000fecc <__aeabi_fmul>:
1000fecc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fece:	4657      	mov	r7, sl
1000fed0:	464e      	mov	r6, r9
1000fed2:	4645      	mov	r5, r8
1000fed4:	0043      	lsls	r3, r0, #1
1000fed6:	b4e0      	push	{r5, r6, r7}
1000fed8:	0246      	lsls	r6, r0, #9
1000feda:	4688      	mov	r8, r1
1000fedc:	0a76      	lsrs	r6, r6, #9
1000fede:	0e1f      	lsrs	r7, r3, #24
1000fee0:	0fc4      	lsrs	r4, r0, #31
1000fee2:	2f00      	cmp	r7, #0
1000fee4:	d047      	beq.n	1000ff76 <__aeabi_fmul+0xaa>
1000fee6:	2fff      	cmp	r7, #255	; 0xff
1000fee8:	d025      	beq.n	1000ff36 <__aeabi_fmul+0x6a>
1000feea:	2300      	movs	r3, #0
1000feec:	2580      	movs	r5, #128	; 0x80
1000feee:	469a      	mov	sl, r3
1000fef0:	4699      	mov	r9, r3
1000fef2:	00f6      	lsls	r6, r6, #3
1000fef4:	04ed      	lsls	r5, r5, #19
1000fef6:	432e      	orrs	r6, r5
1000fef8:	3f7f      	subs	r7, #127	; 0x7f
1000fefa:	4643      	mov	r3, r8
1000fefc:	4642      	mov	r2, r8
1000fefe:	025d      	lsls	r5, r3, #9
1000ff00:	0fd2      	lsrs	r2, r2, #31
1000ff02:	005b      	lsls	r3, r3, #1
1000ff04:	0a6d      	lsrs	r5, r5, #9
1000ff06:	0e1b      	lsrs	r3, r3, #24
1000ff08:	4690      	mov	r8, r2
1000ff0a:	d040      	beq.n	1000ff8e <__aeabi_fmul+0xc2>
1000ff0c:	2bff      	cmp	r3, #255	; 0xff
1000ff0e:	d039      	beq.n	1000ff84 <__aeabi_fmul+0xb8>
1000ff10:	2280      	movs	r2, #128	; 0x80
1000ff12:	2000      	movs	r0, #0
1000ff14:	00ed      	lsls	r5, r5, #3
1000ff16:	04d2      	lsls	r2, r2, #19
1000ff18:	4315      	orrs	r5, r2
1000ff1a:	3b7f      	subs	r3, #127	; 0x7f
1000ff1c:	18fb      	adds	r3, r7, r3
1000ff1e:	4642      	mov	r2, r8
1000ff20:	4657      	mov	r7, sl
1000ff22:	1c59      	adds	r1, r3, #1
1000ff24:	4062      	eors	r2, r4
1000ff26:	468c      	mov	ip, r1
1000ff28:	4307      	orrs	r7, r0
1000ff2a:	2f0f      	cmp	r7, #15
1000ff2c:	d85c      	bhi.n	1000ffe8 <__aeabi_fmul+0x11c>
1000ff2e:	496f      	ldr	r1, [pc, #444]	; (100100ec <__aeabi_fmul+0x220>)
1000ff30:	00bf      	lsls	r7, r7, #2
1000ff32:	59c9      	ldr	r1, [r1, r7]
1000ff34:	468f      	mov	pc, r1
1000ff36:	2e00      	cmp	r6, #0
1000ff38:	d145      	bne.n	1000ffc6 <__aeabi_fmul+0xfa>
1000ff3a:	2308      	movs	r3, #8
1000ff3c:	469a      	mov	sl, r3
1000ff3e:	3b06      	subs	r3, #6
1000ff40:	4699      	mov	r9, r3
1000ff42:	e7da      	b.n	1000fefa <__aeabi_fmul+0x2e>
1000ff44:	4642      	mov	r2, r8
1000ff46:	2802      	cmp	r0, #2
1000ff48:	d02d      	beq.n	1000ffa6 <__aeabi_fmul+0xda>
1000ff4a:	2803      	cmp	r0, #3
1000ff4c:	d100      	bne.n	1000ff50 <__aeabi_fmul+0x84>
1000ff4e:	e0c3      	b.n	100100d8 <__aeabi_fmul+0x20c>
1000ff50:	2801      	cmp	r0, #1
1000ff52:	d000      	beq.n	1000ff56 <__aeabi_fmul+0x8a>
1000ff54:	e0a2      	b.n	1001009c <__aeabi_fmul+0x1d0>
1000ff56:	2500      	movs	r5, #0
1000ff58:	2600      	movs	r6, #0
1000ff5a:	4002      	ands	r2, r0
1000ff5c:	b2d4      	uxtb	r4, r2
1000ff5e:	0276      	lsls	r6, r6, #9
1000ff60:	05ed      	lsls	r5, r5, #23
1000ff62:	0a76      	lsrs	r6, r6, #9
1000ff64:	432e      	orrs	r6, r5
1000ff66:	07e4      	lsls	r4, r4, #31
1000ff68:	4326      	orrs	r6, r4
1000ff6a:	0030      	movs	r0, r6
1000ff6c:	bc1c      	pop	{r2, r3, r4}
1000ff6e:	4690      	mov	r8, r2
1000ff70:	4699      	mov	r9, r3
1000ff72:	46a2      	mov	sl, r4
1000ff74:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ff76:	2e00      	cmp	r6, #0
1000ff78:	d11a      	bne.n	1000ffb0 <__aeabi_fmul+0xe4>
1000ff7a:	2304      	movs	r3, #4
1000ff7c:	469a      	mov	sl, r3
1000ff7e:	3b03      	subs	r3, #3
1000ff80:	4699      	mov	r9, r3
1000ff82:	e7ba      	b.n	1000fefa <__aeabi_fmul+0x2e>
1000ff84:	002a      	movs	r2, r5
1000ff86:	1e51      	subs	r1, r2, #1
1000ff88:	418a      	sbcs	r2, r1
1000ff8a:	1c90      	adds	r0, r2, #2
1000ff8c:	e7c6      	b.n	1000ff1c <__aeabi_fmul+0x50>
1000ff8e:	2001      	movs	r0, #1
1000ff90:	2d00      	cmp	r5, #0
1000ff92:	d0c3      	beq.n	1000ff1c <__aeabi_fmul+0x50>
1000ff94:	0028      	movs	r0, r5
1000ff96:	f001 fa25 	bl	100113e4 <__clzsi2>
1000ff9a:	1f43      	subs	r3, r0, #5
1000ff9c:	3076      	adds	r0, #118	; 0x76
1000ff9e:	409d      	lsls	r5, r3
1000ffa0:	4243      	negs	r3, r0
1000ffa2:	2000      	movs	r0, #0
1000ffa4:	e7ba      	b.n	1000ff1c <__aeabi_fmul+0x50>
1000ffa6:	2401      	movs	r4, #1
1000ffa8:	25ff      	movs	r5, #255	; 0xff
1000ffaa:	4014      	ands	r4, r2
1000ffac:	2600      	movs	r6, #0
1000ffae:	e7d6      	b.n	1000ff5e <__aeabi_fmul+0x92>
1000ffb0:	0030      	movs	r0, r6
1000ffb2:	f001 fa17 	bl	100113e4 <__clzsi2>
1000ffb6:	1f43      	subs	r3, r0, #5
1000ffb8:	409e      	lsls	r6, r3
1000ffba:	2300      	movs	r3, #0
1000ffbc:	3076      	adds	r0, #118	; 0x76
1000ffbe:	4247      	negs	r7, r0
1000ffc0:	469a      	mov	sl, r3
1000ffc2:	4699      	mov	r9, r3
1000ffc4:	e799      	b.n	1000fefa <__aeabi_fmul+0x2e>
1000ffc6:	230c      	movs	r3, #12
1000ffc8:	469a      	mov	sl, r3
1000ffca:	3b09      	subs	r3, #9
1000ffcc:	4699      	mov	r9, r3
1000ffce:	e794      	b.n	1000fefa <__aeabi_fmul+0x2e>
1000ffd0:	2680      	movs	r6, #128	; 0x80
1000ffd2:	2400      	movs	r4, #0
1000ffd4:	03f6      	lsls	r6, r6, #15
1000ffd6:	25ff      	movs	r5, #255	; 0xff
1000ffd8:	e7c1      	b.n	1000ff5e <__aeabi_fmul+0x92>
1000ffda:	0035      	movs	r5, r6
1000ffdc:	4648      	mov	r0, r9
1000ffde:	e7b2      	b.n	1000ff46 <__aeabi_fmul+0x7a>
1000ffe0:	0035      	movs	r5, r6
1000ffe2:	0022      	movs	r2, r4
1000ffe4:	4648      	mov	r0, r9
1000ffe6:	e7ae      	b.n	1000ff46 <__aeabi_fmul+0x7a>
1000ffe8:	0429      	lsls	r1, r5, #16
1000ffea:	0c09      	lsrs	r1, r1, #16
1000ffec:	0008      	movs	r0, r1
1000ffee:	0c37      	lsrs	r7, r6, #16
1000fff0:	0436      	lsls	r6, r6, #16
1000fff2:	0c36      	lsrs	r6, r6, #16
1000fff4:	0c2c      	lsrs	r4, r5, #16
1000fff6:	4379      	muls	r1, r7
1000fff8:	4370      	muls	r0, r6
1000fffa:	4367      	muls	r7, r4
1000fffc:	4374      	muls	r4, r6
1000fffe:	0c06      	lsrs	r6, r0, #16
10010000:	1864      	adds	r4, r4, r1
10010002:	1936      	adds	r6, r6, r4
10010004:	42b1      	cmp	r1, r6
10010006:	d903      	bls.n	10010010 <__aeabi_fmul+0x144>
10010008:	2180      	movs	r1, #128	; 0x80
1001000a:	0249      	lsls	r1, r1, #9
1001000c:	4688      	mov	r8, r1
1001000e:	4447      	add	r7, r8
10010010:	0400      	lsls	r0, r0, #16
10010012:	0c00      	lsrs	r0, r0, #16
10010014:	0431      	lsls	r1, r6, #16
10010016:	1809      	adds	r1, r1, r0
10010018:	018d      	lsls	r5, r1, #6
1001001a:	1e68      	subs	r0, r5, #1
1001001c:	4185      	sbcs	r5, r0
1001001e:	0e89      	lsrs	r1, r1, #26
10010020:	4329      	orrs	r1, r5
10010022:	0c35      	lsrs	r5, r6, #16
10010024:	19ed      	adds	r5, r5, r7
10010026:	01ad      	lsls	r5, r5, #6
10010028:	430d      	orrs	r5, r1
1001002a:	0129      	lsls	r1, r5, #4
1001002c:	d504      	bpl.n	10010038 <__aeabi_fmul+0x16c>
1001002e:	2301      	movs	r3, #1
10010030:	0869      	lsrs	r1, r5, #1
10010032:	401d      	ands	r5, r3
10010034:	4663      	mov	r3, ip
10010036:	430d      	orrs	r5, r1
10010038:	0019      	movs	r1, r3
1001003a:	317f      	adds	r1, #127	; 0x7f
1001003c:	2900      	cmp	r1, #0
1001003e:	dd25      	ble.n	1001008c <__aeabi_fmul+0x1c0>
10010040:	0768      	lsls	r0, r5, #29
10010042:	d004      	beq.n	1001004e <__aeabi_fmul+0x182>
10010044:	200f      	movs	r0, #15
10010046:	4028      	ands	r0, r5
10010048:	2804      	cmp	r0, #4
1001004a:	d000      	beq.n	1001004e <__aeabi_fmul+0x182>
1001004c:	3504      	adds	r5, #4
1001004e:	0128      	lsls	r0, r5, #4
10010050:	d503      	bpl.n	1001005a <__aeabi_fmul+0x18e>
10010052:	4927      	ldr	r1, [pc, #156]	; (100100f0 <__aeabi_fmul+0x224>)
10010054:	3380      	adds	r3, #128	; 0x80
10010056:	400d      	ands	r5, r1
10010058:	0019      	movs	r1, r3
1001005a:	29fe      	cmp	r1, #254	; 0xfe
1001005c:	dca3      	bgt.n	1000ffa6 <__aeabi_fmul+0xda>
1001005e:	2401      	movs	r4, #1
10010060:	01ad      	lsls	r5, r5, #6
10010062:	0a6e      	lsrs	r6, r5, #9
10010064:	4014      	ands	r4, r2
10010066:	b2cd      	uxtb	r5, r1
10010068:	e779      	b.n	1000ff5e <__aeabi_fmul+0x92>
1001006a:	2080      	movs	r0, #128	; 0x80
1001006c:	03c0      	lsls	r0, r0, #15
1001006e:	4206      	tst	r6, r0
10010070:	d007      	beq.n	10010082 <__aeabi_fmul+0x1b6>
10010072:	4205      	tst	r5, r0
10010074:	d105      	bne.n	10010082 <__aeabi_fmul+0x1b6>
10010076:	4328      	orrs	r0, r5
10010078:	0246      	lsls	r6, r0, #9
1001007a:	0a76      	lsrs	r6, r6, #9
1001007c:	4644      	mov	r4, r8
1001007e:	25ff      	movs	r5, #255	; 0xff
10010080:	e76d      	b.n	1000ff5e <__aeabi_fmul+0x92>
10010082:	4306      	orrs	r6, r0
10010084:	0276      	lsls	r6, r6, #9
10010086:	0a76      	lsrs	r6, r6, #9
10010088:	25ff      	movs	r5, #255	; 0xff
1001008a:	e768      	b.n	1000ff5e <__aeabi_fmul+0x92>
1001008c:	2401      	movs	r4, #1
1001008e:	1a61      	subs	r1, r4, r1
10010090:	291b      	cmp	r1, #27
10010092:	dd05      	ble.n	100100a0 <__aeabi_fmul+0x1d4>
10010094:	4014      	ands	r4, r2
10010096:	2500      	movs	r5, #0
10010098:	2600      	movs	r6, #0
1001009a:	e760      	b.n	1000ff5e <__aeabi_fmul+0x92>
1001009c:	4663      	mov	r3, ip
1001009e:	e7cb      	b.n	10010038 <__aeabi_fmul+0x16c>
100100a0:	002e      	movs	r6, r5
100100a2:	2320      	movs	r3, #32
100100a4:	40ce      	lsrs	r6, r1
100100a6:	1a59      	subs	r1, r3, r1
100100a8:	408d      	lsls	r5, r1
100100aa:	1e6b      	subs	r3, r5, #1
100100ac:	419d      	sbcs	r5, r3
100100ae:	432e      	orrs	r6, r5
100100b0:	0773      	lsls	r3, r6, #29
100100b2:	d004      	beq.n	100100be <__aeabi_fmul+0x1f2>
100100b4:	230f      	movs	r3, #15
100100b6:	4033      	ands	r3, r6
100100b8:	2b04      	cmp	r3, #4
100100ba:	d000      	beq.n	100100be <__aeabi_fmul+0x1f2>
100100bc:	3604      	adds	r6, #4
100100be:	0173      	lsls	r3, r6, #5
100100c0:	d504      	bpl.n	100100cc <__aeabi_fmul+0x200>
100100c2:	2401      	movs	r4, #1
100100c4:	2501      	movs	r5, #1
100100c6:	4014      	ands	r4, r2
100100c8:	2600      	movs	r6, #0
100100ca:	e748      	b.n	1000ff5e <__aeabi_fmul+0x92>
100100cc:	2401      	movs	r4, #1
100100ce:	01b6      	lsls	r6, r6, #6
100100d0:	0a76      	lsrs	r6, r6, #9
100100d2:	4014      	ands	r4, r2
100100d4:	2500      	movs	r5, #0
100100d6:	e742      	b.n	1000ff5e <__aeabi_fmul+0x92>
100100d8:	2680      	movs	r6, #128	; 0x80
100100da:	2401      	movs	r4, #1
100100dc:	03f6      	lsls	r6, r6, #15
100100de:	432e      	orrs	r6, r5
100100e0:	0276      	lsls	r6, r6, #9
100100e2:	0a76      	lsrs	r6, r6, #9
100100e4:	4014      	ands	r4, r2
100100e6:	25ff      	movs	r5, #255	; 0xff
100100e8:	e739      	b.n	1000ff5e <__aeabi_fmul+0x92>
100100ea:	46c0      	nop			; (mov r8, r8)
100100ec:	100135e8 	.word	0x100135e8
100100f0:	f7ffffff 	.word	0xf7ffffff

100100f4 <__aeabi_fsub>:
100100f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100100f6:	024a      	lsls	r2, r1, #9
100100f8:	004e      	lsls	r6, r1, #1
100100fa:	0243      	lsls	r3, r0, #9
100100fc:	0044      	lsls	r4, r0, #1
100100fe:	0e24      	lsrs	r4, r4, #24
10010100:	0fc5      	lsrs	r5, r0, #31
10010102:	099b      	lsrs	r3, r3, #6
10010104:	0e36      	lsrs	r6, r6, #24
10010106:	0fc9      	lsrs	r1, r1, #31
10010108:	0992      	lsrs	r2, r2, #6
1001010a:	2eff      	cmp	r6, #255	; 0xff
1001010c:	d100      	bne.n	10010110 <__aeabi_fsub+0x1c>
1001010e:	e083      	b.n	10010218 <__aeabi_fsub+0x124>
10010110:	2001      	movs	r0, #1
10010112:	4041      	eors	r1, r0
10010114:	1ba0      	subs	r0, r4, r6
10010116:	42a9      	cmp	r1, r5
10010118:	d05c      	beq.n	100101d4 <__aeabi_fsub+0xe0>
1001011a:	2800      	cmp	r0, #0
1001011c:	dc00      	bgt.n	10010120 <__aeabi_fsub+0x2c>
1001011e:	e095      	b.n	1001024c <__aeabi_fsub+0x158>
10010120:	2e00      	cmp	r6, #0
10010122:	d11c      	bne.n	1001015e <__aeabi_fsub+0x6a>
10010124:	2a00      	cmp	r2, #0
10010126:	d000      	beq.n	1001012a <__aeabi_fsub+0x36>
10010128:	e081      	b.n	1001022e <__aeabi_fsub+0x13a>
1001012a:	075a      	lsls	r2, r3, #29
1001012c:	d004      	beq.n	10010138 <__aeabi_fsub+0x44>
1001012e:	220f      	movs	r2, #15
10010130:	401a      	ands	r2, r3
10010132:	2a04      	cmp	r2, #4
10010134:	d000      	beq.n	10010138 <__aeabi_fsub+0x44>
10010136:	3304      	adds	r3, #4
10010138:	015a      	lsls	r2, r3, #5
1001013a:	d53b      	bpl.n	100101b4 <__aeabi_fsub+0xc0>
1001013c:	3401      	adds	r4, #1
1001013e:	2cff      	cmp	r4, #255	; 0xff
10010140:	d100      	bne.n	10010144 <__aeabi_fsub+0x50>
10010142:	e091      	b.n	10010268 <__aeabi_fsub+0x174>
10010144:	2001      	movs	r0, #1
10010146:	019b      	lsls	r3, r3, #6
10010148:	0a5b      	lsrs	r3, r3, #9
1001014a:	b2e4      	uxtb	r4, r4
1001014c:	4005      	ands	r5, r0
1001014e:	025b      	lsls	r3, r3, #9
10010150:	05e4      	lsls	r4, r4, #23
10010152:	0a5b      	lsrs	r3, r3, #9
10010154:	07ed      	lsls	r5, r5, #31
10010156:	4323      	orrs	r3, r4
10010158:	432b      	orrs	r3, r5
1001015a:	0018      	movs	r0, r3
1001015c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001015e:	2cff      	cmp	r4, #255	; 0xff
10010160:	d0e3      	beq.n	1001012a <__aeabi_fsub+0x36>
10010162:	2180      	movs	r1, #128	; 0x80
10010164:	04c9      	lsls	r1, r1, #19
10010166:	430a      	orrs	r2, r1
10010168:	281b      	cmp	r0, #27
1001016a:	dd00      	ble.n	1001016e <__aeabi_fsub+0x7a>
1001016c:	e090      	b.n	10010290 <__aeabi_fsub+0x19c>
1001016e:	0016      	movs	r6, r2
10010170:	2120      	movs	r1, #32
10010172:	40c6      	lsrs	r6, r0
10010174:	1a08      	subs	r0, r1, r0
10010176:	4082      	lsls	r2, r0
10010178:	1e51      	subs	r1, r2, #1
1001017a:	418a      	sbcs	r2, r1
1001017c:	4332      	orrs	r2, r6
1001017e:	1a9b      	subs	r3, r3, r2
10010180:	015a      	lsls	r2, r3, #5
10010182:	d515      	bpl.n	100101b0 <__aeabi_fsub+0xbc>
10010184:	019b      	lsls	r3, r3, #6
10010186:	099e      	lsrs	r6, r3, #6
10010188:	0030      	movs	r0, r6
1001018a:	f001 f92b 	bl	100113e4 <__clzsi2>
1001018e:	3805      	subs	r0, #5
10010190:	4086      	lsls	r6, r0
10010192:	4284      	cmp	r4, r0
10010194:	dc6c      	bgt.n	10010270 <__aeabi_fsub+0x17c>
10010196:	1b04      	subs	r4, r0, r4
10010198:	0033      	movs	r3, r6
1001019a:	2020      	movs	r0, #32
1001019c:	3401      	adds	r4, #1
1001019e:	40e3      	lsrs	r3, r4
100101a0:	1b04      	subs	r4, r0, r4
100101a2:	40a6      	lsls	r6, r4
100101a4:	1e72      	subs	r2, r6, #1
100101a6:	4196      	sbcs	r6, r2
100101a8:	2400      	movs	r4, #0
100101aa:	4333      	orrs	r3, r6
100101ac:	e7bd      	b.n	1001012a <__aeabi_fsub+0x36>
100101ae:	000d      	movs	r5, r1
100101b0:	075a      	lsls	r2, r3, #29
100101b2:	d1bc      	bne.n	1001012e <__aeabi_fsub+0x3a>
100101b4:	08df      	lsrs	r7, r3, #3
100101b6:	2301      	movs	r3, #1
100101b8:	401d      	ands	r5, r3
100101ba:	2cff      	cmp	r4, #255	; 0xff
100101bc:	d133      	bne.n	10010226 <__aeabi_fsub+0x132>
100101be:	2f00      	cmp	r7, #0
100101c0:	d100      	bne.n	100101c4 <__aeabi_fsub+0xd0>
100101c2:	e090      	b.n	100102e6 <__aeabi_fsub+0x1f2>
100101c4:	2280      	movs	r2, #128	; 0x80
100101c6:	03d2      	lsls	r2, r2, #15
100101c8:	0013      	movs	r3, r2
100101ca:	433b      	orrs	r3, r7
100101cc:	025b      	lsls	r3, r3, #9
100101ce:	0a5b      	lsrs	r3, r3, #9
100101d0:	24ff      	movs	r4, #255	; 0xff
100101d2:	e7bc      	b.n	1001014e <__aeabi_fsub+0x5a>
100101d4:	2800      	cmp	r0, #0
100101d6:	dd4f      	ble.n	10010278 <__aeabi_fsub+0x184>
100101d8:	2e00      	cmp	r6, #0
100101da:	d02e      	beq.n	1001023a <__aeabi_fsub+0x146>
100101dc:	2cff      	cmp	r4, #255	; 0xff
100101de:	d0a4      	beq.n	1001012a <__aeabi_fsub+0x36>
100101e0:	2580      	movs	r5, #128	; 0x80
100101e2:	04ed      	lsls	r5, r5, #19
100101e4:	432a      	orrs	r2, r5
100101e6:	281b      	cmp	r0, #27
100101e8:	dd00      	ble.n	100101ec <__aeabi_fsub+0xf8>
100101ea:	e097      	b.n	1001031c <__aeabi_fsub+0x228>
100101ec:	0016      	movs	r6, r2
100101ee:	2520      	movs	r5, #32
100101f0:	40c6      	lsrs	r6, r0
100101f2:	1a28      	subs	r0, r5, r0
100101f4:	4082      	lsls	r2, r0
100101f6:	1e50      	subs	r0, r2, #1
100101f8:	4182      	sbcs	r2, r0
100101fa:	4332      	orrs	r2, r6
100101fc:	189b      	adds	r3, r3, r2
100101fe:	015a      	lsls	r2, r3, #5
10010200:	d5d5      	bpl.n	100101ae <__aeabi_fsub+0xba>
10010202:	3401      	adds	r4, #1
10010204:	2cff      	cmp	r4, #255	; 0xff
10010206:	d06d      	beq.n	100102e4 <__aeabi_fsub+0x1f0>
10010208:	2201      	movs	r2, #1
1001020a:	487b      	ldr	r0, [pc, #492]	; (100103f8 <__aeabi_fsub+0x304>)
1001020c:	401a      	ands	r2, r3
1001020e:	085b      	lsrs	r3, r3, #1
10010210:	4003      	ands	r3, r0
10010212:	4313      	orrs	r3, r2
10010214:	000d      	movs	r5, r1
10010216:	e788      	b.n	1001012a <__aeabi_fsub+0x36>
10010218:	2a00      	cmp	r2, #0
1001021a:	d000      	beq.n	1001021e <__aeabi_fsub+0x12a>
1001021c:	e77a      	b.n	10010114 <__aeabi_fsub+0x20>
1001021e:	e777      	b.n	10010110 <__aeabi_fsub+0x1c>
10010220:	1e03      	subs	r3, r0, #0
10010222:	d1c5      	bne.n	100101b0 <__aeabi_fsub+0xbc>
10010224:	2500      	movs	r5, #0
10010226:	027b      	lsls	r3, r7, #9
10010228:	0a5b      	lsrs	r3, r3, #9
1001022a:	b2e4      	uxtb	r4, r4
1001022c:	e78f      	b.n	1001014e <__aeabi_fsub+0x5a>
1001022e:	3801      	subs	r0, #1
10010230:	2800      	cmp	r0, #0
10010232:	d0a4      	beq.n	1001017e <__aeabi_fsub+0x8a>
10010234:	2cff      	cmp	r4, #255	; 0xff
10010236:	d197      	bne.n	10010168 <__aeabi_fsub+0x74>
10010238:	e777      	b.n	1001012a <__aeabi_fsub+0x36>
1001023a:	2a00      	cmp	r2, #0
1001023c:	d100      	bne.n	10010240 <__aeabi_fsub+0x14c>
1001023e:	e774      	b.n	1001012a <__aeabi_fsub+0x36>
10010240:	3801      	subs	r0, #1
10010242:	2800      	cmp	r0, #0
10010244:	d0da      	beq.n	100101fc <__aeabi_fsub+0x108>
10010246:	2cff      	cmp	r4, #255	; 0xff
10010248:	d1cd      	bne.n	100101e6 <__aeabi_fsub+0xf2>
1001024a:	e76e      	b.n	1001012a <__aeabi_fsub+0x36>
1001024c:	2800      	cmp	r0, #0
1001024e:	d121      	bne.n	10010294 <__aeabi_fsub+0x1a0>
10010250:	1c60      	adds	r0, r4, #1
10010252:	b2c0      	uxtb	r0, r0
10010254:	2801      	cmp	r0, #1
10010256:	dd58      	ble.n	1001030a <__aeabi_fsub+0x216>
10010258:	2780      	movs	r7, #128	; 0x80
1001025a:	1a9e      	subs	r6, r3, r2
1001025c:	04ff      	lsls	r7, r7, #19
1001025e:	4037      	ands	r7, r6
10010260:	d02f      	beq.n	100102c2 <__aeabi_fsub+0x1ce>
10010262:	1ad6      	subs	r6, r2, r3
10010264:	000d      	movs	r5, r1
10010266:	e78f      	b.n	10010188 <__aeabi_fsub+0x94>
10010268:	2301      	movs	r3, #1
1001026a:	401d      	ands	r5, r3
1001026c:	2300      	movs	r3, #0
1001026e:	e76e      	b.n	1001014e <__aeabi_fsub+0x5a>
10010270:	4b62      	ldr	r3, [pc, #392]	; (100103fc <__aeabi_fsub+0x308>)
10010272:	1a24      	subs	r4, r4, r0
10010274:	4033      	ands	r3, r6
10010276:	e758      	b.n	1001012a <__aeabi_fsub+0x36>
10010278:	2800      	cmp	r0, #0
1001027a:	d151      	bne.n	10010320 <__aeabi_fsub+0x22c>
1001027c:	1c60      	adds	r0, r4, #1
1001027e:	b2c6      	uxtb	r6, r0
10010280:	2e01      	cmp	r6, #1
10010282:	dd33      	ble.n	100102ec <__aeabi_fsub+0x1f8>
10010284:	28ff      	cmp	r0, #255	; 0xff
10010286:	d02d      	beq.n	100102e4 <__aeabi_fsub+0x1f0>
10010288:	189b      	adds	r3, r3, r2
1001028a:	085b      	lsrs	r3, r3, #1
1001028c:	0004      	movs	r4, r0
1001028e:	e74c      	b.n	1001012a <__aeabi_fsub+0x36>
10010290:	2201      	movs	r2, #1
10010292:	e774      	b.n	1001017e <__aeabi_fsub+0x8a>
10010294:	2c00      	cmp	r4, #0
10010296:	d01a      	beq.n	100102ce <__aeabi_fsub+0x1da>
10010298:	2eff      	cmp	r6, #255	; 0xff
1001029a:	d01f      	beq.n	100102dc <__aeabi_fsub+0x1e8>
1001029c:	2480      	movs	r4, #128	; 0x80
1001029e:	04e4      	lsls	r4, r4, #19
100102a0:	4240      	negs	r0, r0
100102a2:	4323      	orrs	r3, r4
100102a4:	281b      	cmp	r0, #27
100102a6:	dd00      	ble.n	100102aa <__aeabi_fsub+0x1b6>
100102a8:	e096      	b.n	100103d8 <__aeabi_fsub+0x2e4>
100102aa:	001d      	movs	r5, r3
100102ac:	2420      	movs	r4, #32
100102ae:	40c5      	lsrs	r5, r0
100102b0:	1a20      	subs	r0, r4, r0
100102b2:	4083      	lsls	r3, r0
100102b4:	1e58      	subs	r0, r3, #1
100102b6:	4183      	sbcs	r3, r0
100102b8:	432b      	orrs	r3, r5
100102ba:	1ad3      	subs	r3, r2, r3
100102bc:	0034      	movs	r4, r6
100102be:	000d      	movs	r5, r1
100102c0:	e75e      	b.n	10010180 <__aeabi_fsub+0x8c>
100102c2:	2e00      	cmp	r6, #0
100102c4:	d000      	beq.n	100102c8 <__aeabi_fsub+0x1d4>
100102c6:	e75f      	b.n	10010188 <__aeabi_fsub+0x94>
100102c8:	2500      	movs	r5, #0
100102ca:	2400      	movs	r4, #0
100102cc:	e7ab      	b.n	10010226 <__aeabi_fsub+0x132>
100102ce:	2b00      	cmp	r3, #0
100102d0:	d044      	beq.n	1001035c <__aeabi_fsub+0x268>
100102d2:	43c0      	mvns	r0, r0
100102d4:	2800      	cmp	r0, #0
100102d6:	d0f0      	beq.n	100102ba <__aeabi_fsub+0x1c6>
100102d8:	2eff      	cmp	r6, #255	; 0xff
100102da:	d1e3      	bne.n	100102a4 <__aeabi_fsub+0x1b0>
100102dc:	0013      	movs	r3, r2
100102de:	24ff      	movs	r4, #255	; 0xff
100102e0:	000d      	movs	r5, r1
100102e2:	e722      	b.n	1001012a <__aeabi_fsub+0x36>
100102e4:	000d      	movs	r5, r1
100102e6:	24ff      	movs	r4, #255	; 0xff
100102e8:	2300      	movs	r3, #0
100102ea:	e730      	b.n	1001014e <__aeabi_fsub+0x5a>
100102ec:	2c00      	cmp	r4, #0
100102ee:	d15d      	bne.n	100103ac <__aeabi_fsub+0x2b8>
100102f0:	2b00      	cmp	r3, #0
100102f2:	d07d      	beq.n	100103f0 <__aeabi_fsub+0x2fc>
100102f4:	2a00      	cmp	r2, #0
100102f6:	d100      	bne.n	100102fa <__aeabi_fsub+0x206>
100102f8:	e717      	b.n	1001012a <__aeabi_fsub+0x36>
100102fa:	189b      	adds	r3, r3, r2
100102fc:	015a      	lsls	r2, r3, #5
100102fe:	d400      	bmi.n	10010302 <__aeabi_fsub+0x20e>
10010300:	e756      	b.n	100101b0 <__aeabi_fsub+0xbc>
10010302:	4a3e      	ldr	r2, [pc, #248]	; (100103fc <__aeabi_fsub+0x308>)
10010304:	0004      	movs	r4, r0
10010306:	4013      	ands	r3, r2
10010308:	e70f      	b.n	1001012a <__aeabi_fsub+0x36>
1001030a:	2c00      	cmp	r4, #0
1001030c:	d11e      	bne.n	1001034c <__aeabi_fsub+0x258>
1001030e:	2b00      	cmp	r3, #0
10010310:	d12f      	bne.n	10010372 <__aeabi_fsub+0x27e>
10010312:	2a00      	cmp	r2, #0
10010314:	d065      	beq.n	100103e2 <__aeabi_fsub+0x2ee>
10010316:	0013      	movs	r3, r2
10010318:	000d      	movs	r5, r1
1001031a:	e706      	b.n	1001012a <__aeabi_fsub+0x36>
1001031c:	2201      	movs	r2, #1
1001031e:	e76d      	b.n	100101fc <__aeabi_fsub+0x108>
10010320:	2c00      	cmp	r4, #0
10010322:	d11f      	bne.n	10010364 <__aeabi_fsub+0x270>
10010324:	2b00      	cmp	r3, #0
10010326:	d059      	beq.n	100103dc <__aeabi_fsub+0x2e8>
10010328:	43c0      	mvns	r0, r0
1001032a:	2800      	cmp	r0, #0
1001032c:	d00b      	beq.n	10010346 <__aeabi_fsub+0x252>
1001032e:	2eff      	cmp	r6, #255	; 0xff
10010330:	d04f      	beq.n	100103d2 <__aeabi_fsub+0x2de>
10010332:	281b      	cmp	r0, #27
10010334:	dc5e      	bgt.n	100103f4 <__aeabi_fsub+0x300>
10010336:	001d      	movs	r5, r3
10010338:	2420      	movs	r4, #32
1001033a:	40c5      	lsrs	r5, r0
1001033c:	1a20      	subs	r0, r4, r0
1001033e:	4083      	lsls	r3, r0
10010340:	1e58      	subs	r0, r3, #1
10010342:	4183      	sbcs	r3, r0
10010344:	432b      	orrs	r3, r5
10010346:	189b      	adds	r3, r3, r2
10010348:	0034      	movs	r4, r6
1001034a:	e758      	b.n	100101fe <__aeabi_fsub+0x10a>
1001034c:	2b00      	cmp	r3, #0
1001034e:	d11c      	bne.n	1001038a <__aeabi_fsub+0x296>
10010350:	2a00      	cmp	r2, #0
10010352:	d049      	beq.n	100103e8 <__aeabi_fsub+0x2f4>
10010354:	0013      	movs	r3, r2
10010356:	000d      	movs	r5, r1
10010358:	24ff      	movs	r4, #255	; 0xff
1001035a:	e6e6      	b.n	1001012a <__aeabi_fsub+0x36>
1001035c:	0013      	movs	r3, r2
1001035e:	0034      	movs	r4, r6
10010360:	000d      	movs	r5, r1
10010362:	e6e2      	b.n	1001012a <__aeabi_fsub+0x36>
10010364:	2eff      	cmp	r6, #255	; 0xff
10010366:	d034      	beq.n	100103d2 <__aeabi_fsub+0x2de>
10010368:	2480      	movs	r4, #128	; 0x80
1001036a:	04e4      	lsls	r4, r4, #19
1001036c:	4240      	negs	r0, r0
1001036e:	4323      	orrs	r3, r4
10010370:	e7df      	b.n	10010332 <__aeabi_fsub+0x23e>
10010372:	2a00      	cmp	r2, #0
10010374:	d100      	bne.n	10010378 <__aeabi_fsub+0x284>
10010376:	e6d8      	b.n	1001012a <__aeabi_fsub+0x36>
10010378:	2780      	movs	r7, #128	; 0x80
1001037a:	1a98      	subs	r0, r3, r2
1001037c:	04ff      	lsls	r7, r7, #19
1001037e:	4007      	ands	r7, r0
10010380:	d100      	bne.n	10010384 <__aeabi_fsub+0x290>
10010382:	e74d      	b.n	10010220 <__aeabi_fsub+0x12c>
10010384:	1ad3      	subs	r3, r2, r3
10010386:	000d      	movs	r5, r1
10010388:	e6cf      	b.n	1001012a <__aeabi_fsub+0x36>
1001038a:	24ff      	movs	r4, #255	; 0xff
1001038c:	2a00      	cmp	r2, #0
1001038e:	d100      	bne.n	10010392 <__aeabi_fsub+0x29e>
10010390:	e6cb      	b.n	1001012a <__aeabi_fsub+0x36>
10010392:	2080      	movs	r0, #128	; 0x80
10010394:	08db      	lsrs	r3, r3, #3
10010396:	03c0      	lsls	r0, r0, #15
10010398:	4203      	tst	r3, r0
1001039a:	d004      	beq.n	100103a6 <__aeabi_fsub+0x2b2>
1001039c:	08d2      	lsrs	r2, r2, #3
1001039e:	4202      	tst	r2, r0
100103a0:	d101      	bne.n	100103a6 <__aeabi_fsub+0x2b2>
100103a2:	0013      	movs	r3, r2
100103a4:	000d      	movs	r5, r1
100103a6:	00db      	lsls	r3, r3, #3
100103a8:	24ff      	movs	r4, #255	; 0xff
100103aa:	e6be      	b.n	1001012a <__aeabi_fsub+0x36>
100103ac:	2b00      	cmp	r3, #0
100103ae:	d010      	beq.n	100103d2 <__aeabi_fsub+0x2de>
100103b0:	24ff      	movs	r4, #255	; 0xff
100103b2:	2a00      	cmp	r2, #0
100103b4:	d100      	bne.n	100103b8 <__aeabi_fsub+0x2c4>
100103b6:	e6b8      	b.n	1001012a <__aeabi_fsub+0x36>
100103b8:	2080      	movs	r0, #128	; 0x80
100103ba:	08db      	lsrs	r3, r3, #3
100103bc:	03c0      	lsls	r0, r0, #15
100103be:	4203      	tst	r3, r0
100103c0:	d003      	beq.n	100103ca <__aeabi_fsub+0x2d6>
100103c2:	08d2      	lsrs	r2, r2, #3
100103c4:	4202      	tst	r2, r0
100103c6:	d100      	bne.n	100103ca <__aeabi_fsub+0x2d6>
100103c8:	0013      	movs	r3, r2
100103ca:	00db      	lsls	r3, r3, #3
100103cc:	000d      	movs	r5, r1
100103ce:	24ff      	movs	r4, #255	; 0xff
100103d0:	e6ab      	b.n	1001012a <__aeabi_fsub+0x36>
100103d2:	0013      	movs	r3, r2
100103d4:	24ff      	movs	r4, #255	; 0xff
100103d6:	e6a8      	b.n	1001012a <__aeabi_fsub+0x36>
100103d8:	2301      	movs	r3, #1
100103da:	e76e      	b.n	100102ba <__aeabi_fsub+0x1c6>
100103dc:	0013      	movs	r3, r2
100103de:	0034      	movs	r4, r6
100103e0:	e6a3      	b.n	1001012a <__aeabi_fsub+0x36>
100103e2:	2700      	movs	r7, #0
100103e4:	2500      	movs	r5, #0
100103e6:	e71e      	b.n	10010226 <__aeabi_fsub+0x132>
100103e8:	2780      	movs	r7, #128	; 0x80
100103ea:	2500      	movs	r5, #0
100103ec:	03ff      	lsls	r7, r7, #15
100103ee:	e6e9      	b.n	100101c4 <__aeabi_fsub+0xd0>
100103f0:	0013      	movs	r3, r2
100103f2:	e69a      	b.n	1001012a <__aeabi_fsub+0x36>
100103f4:	2301      	movs	r3, #1
100103f6:	e7a6      	b.n	10010346 <__aeabi_fsub+0x252>
100103f8:	7dffffff 	.word	0x7dffffff
100103fc:	fbffffff 	.word	0xfbffffff

10010400 <__aeabi_f2iz>:
10010400:	0243      	lsls	r3, r0, #9
10010402:	0a59      	lsrs	r1, r3, #9
10010404:	0043      	lsls	r3, r0, #1
10010406:	0fc2      	lsrs	r2, r0, #31
10010408:	0e1b      	lsrs	r3, r3, #24
1001040a:	2000      	movs	r0, #0
1001040c:	2b7e      	cmp	r3, #126	; 0x7e
1001040e:	dd0e      	ble.n	1001042e <__aeabi_f2iz+0x2e>
10010410:	2b9d      	cmp	r3, #157	; 0x9d
10010412:	dc0d      	bgt.n	10010430 <__aeabi_f2iz+0x30>
10010414:	2080      	movs	r0, #128	; 0x80
10010416:	0400      	lsls	r0, r0, #16
10010418:	4301      	orrs	r1, r0
1001041a:	2b95      	cmp	r3, #149	; 0x95
1001041c:	dc0b      	bgt.n	10010436 <__aeabi_f2iz+0x36>
1001041e:	2096      	movs	r0, #150	; 0x96
10010420:	1ac3      	subs	r3, r0, r3
10010422:	40d9      	lsrs	r1, r3
10010424:	000b      	movs	r3, r1
10010426:	4258      	negs	r0, r3
10010428:	2a00      	cmp	r2, #0
1001042a:	d100      	bne.n	1001042e <__aeabi_f2iz+0x2e>
1001042c:	0018      	movs	r0, r3
1001042e:	4770      	bx	lr
10010430:	4b03      	ldr	r3, [pc, #12]	; (10010440 <__aeabi_f2iz+0x40>)
10010432:	18d0      	adds	r0, r2, r3
10010434:	e7fb      	b.n	1001042e <__aeabi_f2iz+0x2e>
10010436:	3b96      	subs	r3, #150	; 0x96
10010438:	4099      	lsls	r1, r3
1001043a:	000b      	movs	r3, r1
1001043c:	e7f3      	b.n	10010426 <__aeabi_f2iz+0x26>
1001043e:	46c0      	nop			; (mov r8, r8)
10010440:	7fffffff 	.word	0x7fffffff

10010444 <__aeabi_i2f>:
10010444:	b570      	push	{r4, r5, r6, lr}
10010446:	2800      	cmp	r0, #0
10010448:	d030      	beq.n	100104ac <__aeabi_i2f+0x68>
1001044a:	17c3      	asrs	r3, r0, #31
1001044c:	18c5      	adds	r5, r0, r3
1001044e:	405d      	eors	r5, r3
10010450:	0fc4      	lsrs	r4, r0, #31
10010452:	0028      	movs	r0, r5
10010454:	f000 ffc6 	bl	100113e4 <__clzsi2>
10010458:	239e      	movs	r3, #158	; 0x9e
1001045a:	1a1b      	subs	r3, r3, r0
1001045c:	2b96      	cmp	r3, #150	; 0x96
1001045e:	dc0d      	bgt.n	1001047c <__aeabi_i2f+0x38>
10010460:	2296      	movs	r2, #150	; 0x96
10010462:	1ad2      	subs	r2, r2, r3
10010464:	4095      	lsls	r5, r2
10010466:	026a      	lsls	r2, r5, #9
10010468:	0a52      	lsrs	r2, r2, #9
1001046a:	b2d8      	uxtb	r0, r3
1001046c:	0252      	lsls	r2, r2, #9
1001046e:	05c0      	lsls	r0, r0, #23
10010470:	0a52      	lsrs	r2, r2, #9
10010472:	07e4      	lsls	r4, r4, #31
10010474:	4302      	orrs	r2, r0
10010476:	4322      	orrs	r2, r4
10010478:	0010      	movs	r0, r2
1001047a:	bd70      	pop	{r4, r5, r6, pc}
1001047c:	2b99      	cmp	r3, #153	; 0x99
1001047e:	dc19      	bgt.n	100104b4 <__aeabi_i2f+0x70>
10010480:	2299      	movs	r2, #153	; 0x99
10010482:	1ad2      	subs	r2, r2, r3
10010484:	4095      	lsls	r5, r2
10010486:	4a12      	ldr	r2, [pc, #72]	; (100104d0 <__aeabi_i2f+0x8c>)
10010488:	402a      	ands	r2, r5
1001048a:	0769      	lsls	r1, r5, #29
1001048c:	d004      	beq.n	10010498 <__aeabi_i2f+0x54>
1001048e:	210f      	movs	r1, #15
10010490:	400d      	ands	r5, r1
10010492:	2d04      	cmp	r5, #4
10010494:	d000      	beq.n	10010498 <__aeabi_i2f+0x54>
10010496:	3204      	adds	r2, #4
10010498:	0151      	lsls	r1, r2, #5
1001049a:	d503      	bpl.n	100104a4 <__aeabi_i2f+0x60>
1001049c:	4b0c      	ldr	r3, [pc, #48]	; (100104d0 <__aeabi_i2f+0x8c>)
1001049e:	401a      	ands	r2, r3
100104a0:	239f      	movs	r3, #159	; 0x9f
100104a2:	1a1b      	subs	r3, r3, r0
100104a4:	0192      	lsls	r2, r2, #6
100104a6:	0a52      	lsrs	r2, r2, #9
100104a8:	b2d8      	uxtb	r0, r3
100104aa:	e7df      	b.n	1001046c <__aeabi_i2f+0x28>
100104ac:	2400      	movs	r4, #0
100104ae:	2000      	movs	r0, #0
100104b0:	2200      	movs	r2, #0
100104b2:	e7db      	b.n	1001046c <__aeabi_i2f+0x28>
100104b4:	2205      	movs	r2, #5
100104b6:	002e      	movs	r6, r5
100104b8:	1a12      	subs	r2, r2, r0
100104ba:	21b9      	movs	r1, #185	; 0xb9
100104bc:	40d6      	lsrs	r6, r2
100104be:	002a      	movs	r2, r5
100104c0:	1ac9      	subs	r1, r1, r3
100104c2:	408a      	lsls	r2, r1
100104c4:	1e55      	subs	r5, r2, #1
100104c6:	41aa      	sbcs	r2, r5
100104c8:	0035      	movs	r5, r6
100104ca:	4315      	orrs	r5, r2
100104cc:	e7db      	b.n	10010486 <__aeabi_i2f+0x42>
100104ce:	46c0      	nop			; (mov r8, r8)
100104d0:	fbffffff 	.word	0xfbffffff

100104d4 <__aeabi_ui2f>:
100104d4:	b570      	push	{r4, r5, r6, lr}
100104d6:	1e04      	subs	r4, r0, #0
100104d8:	d028      	beq.n	1001052c <__aeabi_ui2f+0x58>
100104da:	f000 ff83 	bl	100113e4 <__clzsi2>
100104de:	239e      	movs	r3, #158	; 0x9e
100104e0:	1a1b      	subs	r3, r3, r0
100104e2:	2b96      	cmp	r3, #150	; 0x96
100104e4:	dc0a      	bgt.n	100104fc <__aeabi_ui2f+0x28>
100104e6:	2296      	movs	r2, #150	; 0x96
100104e8:	1ad2      	subs	r2, r2, r3
100104ea:	4094      	lsls	r4, r2
100104ec:	0262      	lsls	r2, r4, #9
100104ee:	0a52      	lsrs	r2, r2, #9
100104f0:	b2d8      	uxtb	r0, r3
100104f2:	0252      	lsls	r2, r2, #9
100104f4:	0a52      	lsrs	r2, r2, #9
100104f6:	05c0      	lsls	r0, r0, #23
100104f8:	4310      	orrs	r0, r2
100104fa:	bd70      	pop	{r4, r5, r6, pc}
100104fc:	2b99      	cmp	r3, #153	; 0x99
100104fe:	dc18      	bgt.n	10010532 <__aeabi_ui2f+0x5e>
10010500:	2299      	movs	r2, #153	; 0x99
10010502:	1ad2      	subs	r2, r2, r3
10010504:	4094      	lsls	r4, r2
10010506:	4a11      	ldr	r2, [pc, #68]	; (1001054c <__aeabi_ui2f+0x78>)
10010508:	4022      	ands	r2, r4
1001050a:	0761      	lsls	r1, r4, #29
1001050c:	d004      	beq.n	10010518 <__aeabi_ui2f+0x44>
1001050e:	210f      	movs	r1, #15
10010510:	400c      	ands	r4, r1
10010512:	2c04      	cmp	r4, #4
10010514:	d000      	beq.n	10010518 <__aeabi_ui2f+0x44>
10010516:	3204      	adds	r2, #4
10010518:	0151      	lsls	r1, r2, #5
1001051a:	d503      	bpl.n	10010524 <__aeabi_ui2f+0x50>
1001051c:	4b0b      	ldr	r3, [pc, #44]	; (1001054c <__aeabi_ui2f+0x78>)
1001051e:	401a      	ands	r2, r3
10010520:	239f      	movs	r3, #159	; 0x9f
10010522:	1a1b      	subs	r3, r3, r0
10010524:	0192      	lsls	r2, r2, #6
10010526:	0a52      	lsrs	r2, r2, #9
10010528:	b2d8      	uxtb	r0, r3
1001052a:	e7e2      	b.n	100104f2 <__aeabi_ui2f+0x1e>
1001052c:	2000      	movs	r0, #0
1001052e:	2200      	movs	r2, #0
10010530:	e7df      	b.n	100104f2 <__aeabi_ui2f+0x1e>
10010532:	2205      	movs	r2, #5
10010534:	0025      	movs	r5, r4
10010536:	1a12      	subs	r2, r2, r0
10010538:	21b9      	movs	r1, #185	; 0xb9
1001053a:	40d5      	lsrs	r5, r2
1001053c:	0022      	movs	r2, r4
1001053e:	1ac9      	subs	r1, r1, r3
10010540:	408a      	lsls	r2, r1
10010542:	1e54      	subs	r4, r2, #1
10010544:	41a2      	sbcs	r2, r4
10010546:	002c      	movs	r4, r5
10010548:	4314      	orrs	r4, r2
1001054a:	e7dc      	b.n	10010506 <__aeabi_ui2f+0x32>
1001054c:	fbffffff 	.word	0xfbffffff

10010550 <__eqdf2>:
10010550:	b5f0      	push	{r4, r5, r6, r7, lr}
10010552:	465f      	mov	r7, fp
10010554:	4656      	mov	r6, sl
10010556:	464d      	mov	r5, r9
10010558:	4644      	mov	r4, r8
1001055a:	b4f0      	push	{r4, r5, r6, r7}
1001055c:	031f      	lsls	r7, r3, #12
1001055e:	005c      	lsls	r4, r3, #1
10010560:	0fdb      	lsrs	r3, r3, #31
10010562:	469a      	mov	sl, r3
10010564:	4b19      	ldr	r3, [pc, #100]	; (100105cc <__eqdf2+0x7c>)
10010566:	030e      	lsls	r6, r1, #12
10010568:	004d      	lsls	r5, r1, #1
1001056a:	0fc9      	lsrs	r1, r1, #31
1001056c:	4680      	mov	r8, r0
1001056e:	0b36      	lsrs	r6, r6, #12
10010570:	0d6d      	lsrs	r5, r5, #21
10010572:	468b      	mov	fp, r1
10010574:	4691      	mov	r9, r2
10010576:	0b3f      	lsrs	r7, r7, #12
10010578:	0d64      	lsrs	r4, r4, #21
1001057a:	429d      	cmp	r5, r3
1001057c:	d019      	beq.n	100105b2 <__eqdf2+0x62>
1001057e:	4b13      	ldr	r3, [pc, #76]	; (100105cc <__eqdf2+0x7c>)
10010580:	429c      	cmp	r4, r3
10010582:	d01b      	beq.n	100105bc <__eqdf2+0x6c>
10010584:	2301      	movs	r3, #1
10010586:	42a5      	cmp	r5, r4
10010588:	d006      	beq.n	10010598 <__eqdf2+0x48>
1001058a:	0018      	movs	r0, r3
1001058c:	bc3c      	pop	{r2, r3, r4, r5}
1001058e:	4690      	mov	r8, r2
10010590:	4699      	mov	r9, r3
10010592:	46a2      	mov	sl, r4
10010594:	46ab      	mov	fp, r5
10010596:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010598:	42be      	cmp	r6, r7
1001059a:	d1f6      	bne.n	1001058a <__eqdf2+0x3a>
1001059c:	45c8      	cmp	r8, r9
1001059e:	d1f4      	bne.n	1001058a <__eqdf2+0x3a>
100105a0:	45d3      	cmp	fp, sl
100105a2:	d010      	beq.n	100105c6 <__eqdf2+0x76>
100105a4:	2d00      	cmp	r5, #0
100105a6:	d1f0      	bne.n	1001058a <__eqdf2+0x3a>
100105a8:	4330      	orrs	r0, r6
100105aa:	0003      	movs	r3, r0
100105ac:	1e5a      	subs	r2, r3, #1
100105ae:	4193      	sbcs	r3, r2
100105b0:	e7eb      	b.n	1001058a <__eqdf2+0x3a>
100105b2:	0031      	movs	r1, r6
100105b4:	2301      	movs	r3, #1
100105b6:	4301      	orrs	r1, r0
100105b8:	d1e7      	bne.n	1001058a <__eqdf2+0x3a>
100105ba:	e7e0      	b.n	1001057e <__eqdf2+0x2e>
100105bc:	433a      	orrs	r2, r7
100105be:	2301      	movs	r3, #1
100105c0:	2a00      	cmp	r2, #0
100105c2:	d1e2      	bne.n	1001058a <__eqdf2+0x3a>
100105c4:	e7de      	b.n	10010584 <__eqdf2+0x34>
100105c6:	2300      	movs	r3, #0
100105c8:	e7df      	b.n	1001058a <__eqdf2+0x3a>
100105ca:	46c0      	nop			; (mov r8, r8)
100105cc:	000007ff 	.word	0x000007ff

100105d0 <__gedf2>:
100105d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100105d2:	465f      	mov	r7, fp
100105d4:	4644      	mov	r4, r8
100105d6:	4656      	mov	r6, sl
100105d8:	464d      	mov	r5, r9
100105da:	b4f0      	push	{r4, r5, r6, r7}
100105dc:	031f      	lsls	r7, r3, #12
100105de:	0b3c      	lsrs	r4, r7, #12
100105e0:	4f2c      	ldr	r7, [pc, #176]	; (10010694 <__gedf2+0xc4>)
100105e2:	030e      	lsls	r6, r1, #12
100105e4:	004d      	lsls	r5, r1, #1
100105e6:	46a3      	mov	fp, r4
100105e8:	005c      	lsls	r4, r3, #1
100105ea:	4684      	mov	ip, r0
100105ec:	0b36      	lsrs	r6, r6, #12
100105ee:	0d6d      	lsrs	r5, r5, #21
100105f0:	0fc9      	lsrs	r1, r1, #31
100105f2:	4690      	mov	r8, r2
100105f4:	0d64      	lsrs	r4, r4, #21
100105f6:	0fdb      	lsrs	r3, r3, #31
100105f8:	42bd      	cmp	r5, r7
100105fa:	d02b      	beq.n	10010654 <__gedf2+0x84>
100105fc:	4f25      	ldr	r7, [pc, #148]	; (10010694 <__gedf2+0xc4>)
100105fe:	42bc      	cmp	r4, r7
10010600:	d02e      	beq.n	10010660 <__gedf2+0x90>
10010602:	2d00      	cmp	r5, #0
10010604:	d10e      	bne.n	10010624 <__gedf2+0x54>
10010606:	4330      	orrs	r0, r6
10010608:	0007      	movs	r7, r0
1001060a:	4681      	mov	r9, r0
1001060c:	4278      	negs	r0, r7
1001060e:	4178      	adcs	r0, r7
10010610:	2c00      	cmp	r4, #0
10010612:	d117      	bne.n	10010644 <__gedf2+0x74>
10010614:	465f      	mov	r7, fp
10010616:	433a      	orrs	r2, r7
10010618:	d114      	bne.n	10010644 <__gedf2+0x74>
1001061a:	464b      	mov	r3, r9
1001061c:	2000      	movs	r0, #0
1001061e:	2b00      	cmp	r3, #0
10010620:	d00a      	beq.n	10010638 <__gedf2+0x68>
10010622:	e006      	b.n	10010632 <__gedf2+0x62>
10010624:	2c00      	cmp	r4, #0
10010626:	d102      	bne.n	1001062e <__gedf2+0x5e>
10010628:	4658      	mov	r0, fp
1001062a:	4302      	orrs	r2, r0
1001062c:	d001      	beq.n	10010632 <__gedf2+0x62>
1001062e:	4299      	cmp	r1, r3
10010630:	d01a      	beq.n	10010668 <__gedf2+0x98>
10010632:	2301      	movs	r3, #1
10010634:	4248      	negs	r0, r1
10010636:	4318      	orrs	r0, r3
10010638:	bc3c      	pop	{r2, r3, r4, r5}
1001063a:	4690      	mov	r8, r2
1001063c:	4699      	mov	r9, r3
1001063e:	46a2      	mov	sl, r4
10010640:	46ab      	mov	fp, r5
10010642:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010644:	2800      	cmp	r0, #0
10010646:	d0f2      	beq.n	1001062e <__gedf2+0x5e>
10010648:	4258      	negs	r0, r3
1001064a:	4158      	adcs	r0, r3
1001064c:	2201      	movs	r2, #1
1001064e:	4240      	negs	r0, r0
10010650:	4310      	orrs	r0, r2
10010652:	e7f1      	b.n	10010638 <__gedf2+0x68>
10010654:	0037      	movs	r7, r6
10010656:	4307      	orrs	r7, r0
10010658:	d0d0      	beq.n	100105fc <__gedf2+0x2c>
1001065a:	2002      	movs	r0, #2
1001065c:	4240      	negs	r0, r0
1001065e:	e7eb      	b.n	10010638 <__gedf2+0x68>
10010660:	465f      	mov	r7, fp
10010662:	4317      	orrs	r7, r2
10010664:	d0cd      	beq.n	10010602 <__gedf2+0x32>
10010666:	e7f8      	b.n	1001065a <__gedf2+0x8a>
10010668:	42a5      	cmp	r5, r4
1001066a:	dce2      	bgt.n	10010632 <__gedf2+0x62>
1001066c:	db05      	blt.n	1001067a <__gedf2+0xaa>
1001066e:	455e      	cmp	r6, fp
10010670:	d8df      	bhi.n	10010632 <__gedf2+0x62>
10010672:	d008      	beq.n	10010686 <__gedf2+0xb6>
10010674:	2000      	movs	r0, #0
10010676:	455e      	cmp	r6, fp
10010678:	d2de      	bcs.n	10010638 <__gedf2+0x68>
1001067a:	4248      	negs	r0, r1
1001067c:	4148      	adcs	r0, r1
1001067e:	2301      	movs	r3, #1
10010680:	4240      	negs	r0, r0
10010682:	4318      	orrs	r0, r3
10010684:	e7d8      	b.n	10010638 <__gedf2+0x68>
10010686:	45c4      	cmp	ip, r8
10010688:	d8d3      	bhi.n	10010632 <__gedf2+0x62>
1001068a:	2000      	movs	r0, #0
1001068c:	45c4      	cmp	ip, r8
1001068e:	d3f4      	bcc.n	1001067a <__gedf2+0xaa>
10010690:	e7d2      	b.n	10010638 <__gedf2+0x68>
10010692:	46c0      	nop			; (mov r8, r8)
10010694:	000007ff 	.word	0x000007ff

10010698 <__ledf2>:
10010698:	b5f0      	push	{r4, r5, r6, r7, lr}
1001069a:	465f      	mov	r7, fp
1001069c:	464d      	mov	r5, r9
1001069e:	4644      	mov	r4, r8
100106a0:	4656      	mov	r6, sl
100106a2:	b4f0      	push	{r4, r5, r6, r7}
100106a4:	031c      	lsls	r4, r3, #12
100106a6:	0b24      	lsrs	r4, r4, #12
100106a8:	46a4      	mov	ip, r4
100106aa:	4c2f      	ldr	r4, [pc, #188]	; (10010768 <__ledf2+0xd0>)
100106ac:	030f      	lsls	r7, r1, #12
100106ae:	004d      	lsls	r5, r1, #1
100106b0:	005e      	lsls	r6, r3, #1
100106b2:	0fc9      	lsrs	r1, r1, #31
100106b4:	4680      	mov	r8, r0
100106b6:	0b3f      	lsrs	r7, r7, #12
100106b8:	0d6d      	lsrs	r5, r5, #21
100106ba:	468b      	mov	fp, r1
100106bc:	4691      	mov	r9, r2
100106be:	0d76      	lsrs	r6, r6, #21
100106c0:	0fdb      	lsrs	r3, r3, #31
100106c2:	42a5      	cmp	r5, r4
100106c4:	d020      	beq.n	10010708 <__ledf2+0x70>
100106c6:	4c28      	ldr	r4, [pc, #160]	; (10010768 <__ledf2+0xd0>)
100106c8:	42a6      	cmp	r6, r4
100106ca:	d022      	beq.n	10010712 <__ledf2+0x7a>
100106cc:	2d00      	cmp	r5, #0
100106ce:	d112      	bne.n	100106f6 <__ledf2+0x5e>
100106d0:	4338      	orrs	r0, r7
100106d2:	4244      	negs	r4, r0
100106d4:	4144      	adcs	r4, r0
100106d6:	2e00      	cmp	r6, #0
100106d8:	d020      	beq.n	1001071c <__ledf2+0x84>
100106da:	2c00      	cmp	r4, #0
100106dc:	d00d      	beq.n	100106fa <__ledf2+0x62>
100106de:	425c      	negs	r4, r3
100106e0:	4163      	adcs	r3, r4
100106e2:	2401      	movs	r4, #1
100106e4:	425b      	negs	r3, r3
100106e6:	431c      	orrs	r4, r3
100106e8:	0020      	movs	r0, r4
100106ea:	bc3c      	pop	{r2, r3, r4, r5}
100106ec:	4690      	mov	r8, r2
100106ee:	4699      	mov	r9, r3
100106f0:	46a2      	mov	sl, r4
100106f2:	46ab      	mov	fp, r5
100106f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100106f6:	2e00      	cmp	r6, #0
100106f8:	d017      	beq.n	1001072a <__ledf2+0x92>
100106fa:	455b      	cmp	r3, fp
100106fc:	d019      	beq.n	10010732 <__ledf2+0x9a>
100106fe:	465b      	mov	r3, fp
10010700:	425c      	negs	r4, r3
10010702:	2301      	movs	r3, #1
10010704:	431c      	orrs	r4, r3
10010706:	e7ef      	b.n	100106e8 <__ledf2+0x50>
10010708:	0039      	movs	r1, r7
1001070a:	2402      	movs	r4, #2
1001070c:	4301      	orrs	r1, r0
1001070e:	d1eb      	bne.n	100106e8 <__ledf2+0x50>
10010710:	e7d9      	b.n	100106c6 <__ledf2+0x2e>
10010712:	4661      	mov	r1, ip
10010714:	2402      	movs	r4, #2
10010716:	4311      	orrs	r1, r2
10010718:	d1e6      	bne.n	100106e8 <__ledf2+0x50>
1001071a:	e7d7      	b.n	100106cc <__ledf2+0x34>
1001071c:	4661      	mov	r1, ip
1001071e:	430a      	orrs	r2, r1
10010720:	d1db      	bne.n	100106da <__ledf2+0x42>
10010722:	2400      	movs	r4, #0
10010724:	2800      	cmp	r0, #0
10010726:	d0df      	beq.n	100106e8 <__ledf2+0x50>
10010728:	e7e9      	b.n	100106fe <__ledf2+0x66>
1001072a:	4661      	mov	r1, ip
1001072c:	430a      	orrs	r2, r1
1001072e:	d1e4      	bne.n	100106fa <__ledf2+0x62>
10010730:	e7e5      	b.n	100106fe <__ledf2+0x66>
10010732:	42b5      	cmp	r5, r6
10010734:	dd03      	ble.n	1001073e <__ledf2+0xa6>
10010736:	2201      	movs	r2, #1
10010738:	425c      	negs	r4, r3
1001073a:	4314      	orrs	r4, r2
1001073c:	e7d4      	b.n	100106e8 <__ledf2+0x50>
1001073e:	42b5      	cmp	r5, r6
10010740:	dbcd      	blt.n	100106de <__ledf2+0x46>
10010742:	4567      	cmp	r7, ip
10010744:	d8db      	bhi.n	100106fe <__ledf2+0x66>
10010746:	d009      	beq.n	1001075c <__ledf2+0xc4>
10010748:	2400      	movs	r4, #0
1001074a:	4567      	cmp	r7, ip
1001074c:	d2cc      	bcs.n	100106e8 <__ledf2+0x50>
1001074e:	4659      	mov	r1, fp
10010750:	424c      	negs	r4, r1
10010752:	4161      	adcs	r1, r4
10010754:	2401      	movs	r4, #1
10010756:	4249      	negs	r1, r1
10010758:	430c      	orrs	r4, r1
1001075a:	e7c5      	b.n	100106e8 <__ledf2+0x50>
1001075c:	45c8      	cmp	r8, r9
1001075e:	d8ce      	bhi.n	100106fe <__ledf2+0x66>
10010760:	2400      	movs	r4, #0
10010762:	45c8      	cmp	r8, r9
10010764:	d3f3      	bcc.n	1001074e <__ledf2+0xb6>
10010766:	e7bf      	b.n	100106e8 <__ledf2+0x50>
10010768:	000007ff 	.word	0x000007ff

1001076c <__aeabi_dmul>:
1001076c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001076e:	465f      	mov	r7, fp
10010770:	4656      	mov	r6, sl
10010772:	464d      	mov	r5, r9
10010774:	4644      	mov	r4, r8
10010776:	b4f0      	push	{r4, r5, r6, r7}
10010778:	030d      	lsls	r5, r1, #12
1001077a:	4699      	mov	r9, r3
1001077c:	004e      	lsls	r6, r1, #1
1001077e:	0b2b      	lsrs	r3, r5, #12
10010780:	b087      	sub	sp, #28
10010782:	0007      	movs	r7, r0
10010784:	4692      	mov	sl, r2
10010786:	4680      	mov	r8, r0
10010788:	469b      	mov	fp, r3
1001078a:	0d76      	lsrs	r6, r6, #21
1001078c:	0fcc      	lsrs	r4, r1, #31
1001078e:	2e00      	cmp	r6, #0
10010790:	d069      	beq.n	10010866 <__aeabi_dmul+0xfa>
10010792:	4b6d      	ldr	r3, [pc, #436]	; (10010948 <__aeabi_dmul+0x1dc>)
10010794:	429e      	cmp	r6, r3
10010796:	d035      	beq.n	10010804 <__aeabi_dmul+0x98>
10010798:	465b      	mov	r3, fp
1001079a:	2280      	movs	r2, #128	; 0x80
1001079c:	00dd      	lsls	r5, r3, #3
1001079e:	0412      	lsls	r2, r2, #16
100107a0:	0f43      	lsrs	r3, r0, #29
100107a2:	4313      	orrs	r3, r2
100107a4:	432b      	orrs	r3, r5
100107a6:	469b      	mov	fp, r3
100107a8:	00c3      	lsls	r3, r0, #3
100107aa:	4698      	mov	r8, r3
100107ac:	4b67      	ldr	r3, [pc, #412]	; (1001094c <__aeabi_dmul+0x1e0>)
100107ae:	2700      	movs	r7, #0
100107b0:	469c      	mov	ip, r3
100107b2:	2300      	movs	r3, #0
100107b4:	4466      	add	r6, ip
100107b6:	9301      	str	r3, [sp, #4]
100107b8:	464a      	mov	r2, r9
100107ba:	0315      	lsls	r5, r2, #12
100107bc:	0050      	lsls	r0, r2, #1
100107be:	0fd2      	lsrs	r2, r2, #31
100107c0:	4653      	mov	r3, sl
100107c2:	0b2d      	lsrs	r5, r5, #12
100107c4:	0d40      	lsrs	r0, r0, #21
100107c6:	4691      	mov	r9, r2
100107c8:	d100      	bne.n	100107cc <__aeabi_dmul+0x60>
100107ca:	e076      	b.n	100108ba <__aeabi_dmul+0x14e>
100107cc:	4a5e      	ldr	r2, [pc, #376]	; (10010948 <__aeabi_dmul+0x1dc>)
100107ce:	4290      	cmp	r0, r2
100107d0:	d06c      	beq.n	100108ac <__aeabi_dmul+0x140>
100107d2:	2280      	movs	r2, #128	; 0x80
100107d4:	0f5b      	lsrs	r3, r3, #29
100107d6:	0412      	lsls	r2, r2, #16
100107d8:	4313      	orrs	r3, r2
100107da:	4a5c      	ldr	r2, [pc, #368]	; (1001094c <__aeabi_dmul+0x1e0>)
100107dc:	00ed      	lsls	r5, r5, #3
100107de:	4694      	mov	ip, r2
100107e0:	431d      	orrs	r5, r3
100107e2:	4653      	mov	r3, sl
100107e4:	2200      	movs	r2, #0
100107e6:	00db      	lsls	r3, r3, #3
100107e8:	4460      	add	r0, ip
100107ea:	4649      	mov	r1, r9
100107ec:	1836      	adds	r6, r6, r0
100107ee:	1c70      	adds	r0, r6, #1
100107f0:	4061      	eors	r1, r4
100107f2:	9002      	str	r0, [sp, #8]
100107f4:	4317      	orrs	r7, r2
100107f6:	2f0f      	cmp	r7, #15
100107f8:	d900      	bls.n	100107fc <__aeabi_dmul+0x90>
100107fa:	e0af      	b.n	1001095c <__aeabi_dmul+0x1f0>
100107fc:	4854      	ldr	r0, [pc, #336]	; (10010950 <__aeabi_dmul+0x1e4>)
100107fe:	00bf      	lsls	r7, r7, #2
10010800:	59c7      	ldr	r7, [r0, r7]
10010802:	46bf      	mov	pc, r7
10010804:	465b      	mov	r3, fp
10010806:	431f      	orrs	r7, r3
10010808:	d000      	beq.n	1001080c <__aeabi_dmul+0xa0>
1001080a:	e088      	b.n	1001091e <__aeabi_dmul+0x1b2>
1001080c:	2300      	movs	r3, #0
1001080e:	469b      	mov	fp, r3
10010810:	4698      	mov	r8, r3
10010812:	3302      	adds	r3, #2
10010814:	2708      	movs	r7, #8
10010816:	9301      	str	r3, [sp, #4]
10010818:	e7ce      	b.n	100107b8 <__aeabi_dmul+0x4c>
1001081a:	4649      	mov	r1, r9
1001081c:	2a02      	cmp	r2, #2
1001081e:	d06a      	beq.n	100108f6 <__aeabi_dmul+0x18a>
10010820:	2a03      	cmp	r2, #3
10010822:	d100      	bne.n	10010826 <__aeabi_dmul+0xba>
10010824:	e209      	b.n	10010c3a <__aeabi_dmul+0x4ce>
10010826:	2a01      	cmp	r2, #1
10010828:	d000      	beq.n	1001082c <__aeabi_dmul+0xc0>
1001082a:	e1bb      	b.n	10010ba4 <__aeabi_dmul+0x438>
1001082c:	4011      	ands	r1, r2
1001082e:	2200      	movs	r2, #0
10010830:	2300      	movs	r3, #0
10010832:	2500      	movs	r5, #0
10010834:	4690      	mov	r8, r2
10010836:	b2cc      	uxtb	r4, r1
10010838:	2100      	movs	r1, #0
1001083a:	032d      	lsls	r5, r5, #12
1001083c:	0d0a      	lsrs	r2, r1, #20
1001083e:	0512      	lsls	r2, r2, #20
10010840:	0b2d      	lsrs	r5, r5, #12
10010842:	4315      	orrs	r5, r2
10010844:	4a43      	ldr	r2, [pc, #268]	; (10010954 <__aeabi_dmul+0x1e8>)
10010846:	051b      	lsls	r3, r3, #20
10010848:	4015      	ands	r5, r2
1001084a:	431d      	orrs	r5, r3
1001084c:	006d      	lsls	r5, r5, #1
1001084e:	07e4      	lsls	r4, r4, #31
10010850:	086d      	lsrs	r5, r5, #1
10010852:	4325      	orrs	r5, r4
10010854:	4640      	mov	r0, r8
10010856:	0029      	movs	r1, r5
10010858:	b007      	add	sp, #28
1001085a:	bc3c      	pop	{r2, r3, r4, r5}
1001085c:	4690      	mov	r8, r2
1001085e:	4699      	mov	r9, r3
10010860:	46a2      	mov	sl, r4
10010862:	46ab      	mov	fp, r5
10010864:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010866:	4303      	orrs	r3, r0
10010868:	d052      	beq.n	10010910 <__aeabi_dmul+0x1a4>
1001086a:	465b      	mov	r3, fp
1001086c:	2b00      	cmp	r3, #0
1001086e:	d100      	bne.n	10010872 <__aeabi_dmul+0x106>
10010870:	e18a      	b.n	10010b88 <__aeabi_dmul+0x41c>
10010872:	4658      	mov	r0, fp
10010874:	f000 fdb6 	bl	100113e4 <__clzsi2>
10010878:	0003      	movs	r3, r0
1001087a:	3b0b      	subs	r3, #11
1001087c:	2b1c      	cmp	r3, #28
1001087e:	dd00      	ble.n	10010882 <__aeabi_dmul+0x116>
10010880:	e17b      	b.n	10010b7a <__aeabi_dmul+0x40e>
10010882:	221d      	movs	r2, #29
10010884:	1ad3      	subs	r3, r2, r3
10010886:	003a      	movs	r2, r7
10010888:	0001      	movs	r1, r0
1001088a:	465d      	mov	r5, fp
1001088c:	40da      	lsrs	r2, r3
1001088e:	3908      	subs	r1, #8
10010890:	408d      	lsls	r5, r1
10010892:	0013      	movs	r3, r2
10010894:	408f      	lsls	r7, r1
10010896:	432b      	orrs	r3, r5
10010898:	469b      	mov	fp, r3
1001089a:	46b8      	mov	r8, r7
1001089c:	4b2e      	ldr	r3, [pc, #184]	; (10010958 <__aeabi_dmul+0x1ec>)
1001089e:	2700      	movs	r7, #0
100108a0:	469c      	mov	ip, r3
100108a2:	2300      	movs	r3, #0
100108a4:	4460      	add	r0, ip
100108a6:	4246      	negs	r6, r0
100108a8:	9301      	str	r3, [sp, #4]
100108aa:	e785      	b.n	100107b8 <__aeabi_dmul+0x4c>
100108ac:	4652      	mov	r2, sl
100108ae:	432a      	orrs	r2, r5
100108b0:	d12c      	bne.n	1001090c <__aeabi_dmul+0x1a0>
100108b2:	2500      	movs	r5, #0
100108b4:	2300      	movs	r3, #0
100108b6:	2202      	movs	r2, #2
100108b8:	e797      	b.n	100107ea <__aeabi_dmul+0x7e>
100108ba:	4652      	mov	r2, sl
100108bc:	432a      	orrs	r2, r5
100108be:	d021      	beq.n	10010904 <__aeabi_dmul+0x198>
100108c0:	2d00      	cmp	r5, #0
100108c2:	d100      	bne.n	100108c6 <__aeabi_dmul+0x15a>
100108c4:	e154      	b.n	10010b70 <__aeabi_dmul+0x404>
100108c6:	0028      	movs	r0, r5
100108c8:	f000 fd8c 	bl	100113e4 <__clzsi2>
100108cc:	0003      	movs	r3, r0
100108ce:	3b0b      	subs	r3, #11
100108d0:	2b1c      	cmp	r3, #28
100108d2:	dd00      	ble.n	100108d6 <__aeabi_dmul+0x16a>
100108d4:	e146      	b.n	10010b64 <__aeabi_dmul+0x3f8>
100108d6:	211d      	movs	r1, #29
100108d8:	1acb      	subs	r3, r1, r3
100108da:	4651      	mov	r1, sl
100108dc:	0002      	movs	r2, r0
100108de:	40d9      	lsrs	r1, r3
100108e0:	4653      	mov	r3, sl
100108e2:	3a08      	subs	r2, #8
100108e4:	4095      	lsls	r5, r2
100108e6:	4093      	lsls	r3, r2
100108e8:	430d      	orrs	r5, r1
100108ea:	4a1b      	ldr	r2, [pc, #108]	; (10010958 <__aeabi_dmul+0x1ec>)
100108ec:	4694      	mov	ip, r2
100108ee:	4460      	add	r0, ip
100108f0:	4240      	negs	r0, r0
100108f2:	2200      	movs	r2, #0
100108f4:	e779      	b.n	100107ea <__aeabi_dmul+0x7e>
100108f6:	2401      	movs	r4, #1
100108f8:	2200      	movs	r2, #0
100108fa:	400c      	ands	r4, r1
100108fc:	4b12      	ldr	r3, [pc, #72]	; (10010948 <__aeabi_dmul+0x1dc>)
100108fe:	2500      	movs	r5, #0
10010900:	4690      	mov	r8, r2
10010902:	e799      	b.n	10010838 <__aeabi_dmul+0xcc>
10010904:	2500      	movs	r5, #0
10010906:	2300      	movs	r3, #0
10010908:	2201      	movs	r2, #1
1001090a:	e76e      	b.n	100107ea <__aeabi_dmul+0x7e>
1001090c:	2203      	movs	r2, #3
1001090e:	e76c      	b.n	100107ea <__aeabi_dmul+0x7e>
10010910:	2300      	movs	r3, #0
10010912:	469b      	mov	fp, r3
10010914:	4698      	mov	r8, r3
10010916:	3301      	adds	r3, #1
10010918:	2704      	movs	r7, #4
1001091a:	9301      	str	r3, [sp, #4]
1001091c:	e74c      	b.n	100107b8 <__aeabi_dmul+0x4c>
1001091e:	2303      	movs	r3, #3
10010920:	270c      	movs	r7, #12
10010922:	9301      	str	r3, [sp, #4]
10010924:	e748      	b.n	100107b8 <__aeabi_dmul+0x4c>
10010926:	2300      	movs	r3, #0
10010928:	2580      	movs	r5, #128	; 0x80
1001092a:	4698      	mov	r8, r3
1001092c:	2400      	movs	r4, #0
1001092e:	032d      	lsls	r5, r5, #12
10010930:	4b05      	ldr	r3, [pc, #20]	; (10010948 <__aeabi_dmul+0x1dc>)
10010932:	e781      	b.n	10010838 <__aeabi_dmul+0xcc>
10010934:	465d      	mov	r5, fp
10010936:	4643      	mov	r3, r8
10010938:	9a01      	ldr	r2, [sp, #4]
1001093a:	e76f      	b.n	1001081c <__aeabi_dmul+0xb0>
1001093c:	465d      	mov	r5, fp
1001093e:	4643      	mov	r3, r8
10010940:	0021      	movs	r1, r4
10010942:	9a01      	ldr	r2, [sp, #4]
10010944:	e76a      	b.n	1001081c <__aeabi_dmul+0xb0>
10010946:	46c0      	nop			; (mov r8, r8)
10010948:	000007ff 	.word	0x000007ff
1001094c:	fffffc01 	.word	0xfffffc01
10010950:	10013628 	.word	0x10013628
10010954:	800fffff 	.word	0x800fffff
10010958:	000003f3 	.word	0x000003f3
1001095c:	4642      	mov	r2, r8
1001095e:	0c12      	lsrs	r2, r2, #16
10010960:	4691      	mov	r9, r2
10010962:	0c1a      	lsrs	r2, r3, #16
10010964:	4694      	mov	ip, r2
10010966:	4642      	mov	r2, r8
10010968:	0417      	lsls	r7, r2, #16
1001096a:	464a      	mov	r2, r9
1001096c:	041b      	lsls	r3, r3, #16
1001096e:	0c1b      	lsrs	r3, r3, #16
10010970:	435a      	muls	r2, r3
10010972:	4660      	mov	r0, ip
10010974:	4690      	mov	r8, r2
10010976:	464a      	mov	r2, r9
10010978:	4342      	muls	r2, r0
1001097a:	0010      	movs	r0, r2
1001097c:	9203      	str	r2, [sp, #12]
1001097e:	4662      	mov	r2, ip
10010980:	001c      	movs	r4, r3
10010982:	0c3f      	lsrs	r7, r7, #16
10010984:	437a      	muls	r2, r7
10010986:	437c      	muls	r4, r7
10010988:	4442      	add	r2, r8
1001098a:	9201      	str	r2, [sp, #4]
1001098c:	0c22      	lsrs	r2, r4, #16
1001098e:	4692      	mov	sl, r2
10010990:	9a01      	ldr	r2, [sp, #4]
10010992:	4452      	add	r2, sl
10010994:	4590      	cmp	r8, r2
10010996:	d906      	bls.n	100109a6 <__aeabi_dmul+0x23a>
10010998:	4682      	mov	sl, r0
1001099a:	2080      	movs	r0, #128	; 0x80
1001099c:	0240      	lsls	r0, r0, #9
1001099e:	4680      	mov	r8, r0
100109a0:	44c2      	add	sl, r8
100109a2:	4650      	mov	r0, sl
100109a4:	9003      	str	r0, [sp, #12]
100109a6:	0c10      	lsrs	r0, r2, #16
100109a8:	9004      	str	r0, [sp, #16]
100109aa:	4648      	mov	r0, r9
100109ac:	0424      	lsls	r4, r4, #16
100109ae:	0c24      	lsrs	r4, r4, #16
100109b0:	0412      	lsls	r2, r2, #16
100109b2:	1912      	adds	r2, r2, r4
100109b4:	9205      	str	r2, [sp, #20]
100109b6:	0c2a      	lsrs	r2, r5, #16
100109b8:	042d      	lsls	r5, r5, #16
100109ba:	0c2d      	lsrs	r5, r5, #16
100109bc:	4368      	muls	r0, r5
100109be:	002c      	movs	r4, r5
100109c0:	4682      	mov	sl, r0
100109c2:	4648      	mov	r0, r9
100109c4:	437c      	muls	r4, r7
100109c6:	4350      	muls	r0, r2
100109c8:	4681      	mov	r9, r0
100109ca:	0c20      	lsrs	r0, r4, #16
100109cc:	4680      	mov	r8, r0
100109ce:	4357      	muls	r7, r2
100109d0:	4457      	add	r7, sl
100109d2:	4447      	add	r7, r8
100109d4:	45ba      	cmp	sl, r7
100109d6:	d903      	bls.n	100109e0 <__aeabi_dmul+0x274>
100109d8:	2080      	movs	r0, #128	; 0x80
100109da:	0240      	lsls	r0, r0, #9
100109dc:	4680      	mov	r8, r0
100109de:	44c1      	add	r9, r8
100109e0:	0c38      	lsrs	r0, r7, #16
100109e2:	043f      	lsls	r7, r7, #16
100109e4:	46b8      	mov	r8, r7
100109e6:	4448      	add	r0, r9
100109e8:	0424      	lsls	r4, r4, #16
100109ea:	0c24      	lsrs	r4, r4, #16
100109ec:	9001      	str	r0, [sp, #4]
100109ee:	9804      	ldr	r0, [sp, #16]
100109f0:	44a0      	add	r8, r4
100109f2:	4440      	add	r0, r8
100109f4:	9004      	str	r0, [sp, #16]
100109f6:	4658      	mov	r0, fp
100109f8:	0c00      	lsrs	r0, r0, #16
100109fa:	4681      	mov	r9, r0
100109fc:	4658      	mov	r0, fp
100109fe:	0404      	lsls	r4, r0, #16
10010a00:	0c20      	lsrs	r0, r4, #16
10010a02:	4682      	mov	sl, r0
10010a04:	0007      	movs	r7, r0
10010a06:	4648      	mov	r0, r9
10010a08:	435f      	muls	r7, r3
10010a0a:	464c      	mov	r4, r9
10010a0c:	4343      	muls	r3, r0
10010a0e:	4660      	mov	r0, ip
10010a10:	4360      	muls	r0, r4
10010a12:	4664      	mov	r4, ip
10010a14:	4683      	mov	fp, r0
10010a16:	4650      	mov	r0, sl
10010a18:	4344      	muls	r4, r0
10010a1a:	0c38      	lsrs	r0, r7, #16
10010a1c:	4684      	mov	ip, r0
10010a1e:	18e4      	adds	r4, r4, r3
10010a20:	4464      	add	r4, ip
10010a22:	42a3      	cmp	r3, r4
10010a24:	d903      	bls.n	10010a2e <__aeabi_dmul+0x2c2>
10010a26:	2380      	movs	r3, #128	; 0x80
10010a28:	025b      	lsls	r3, r3, #9
10010a2a:	469c      	mov	ip, r3
10010a2c:	44e3      	add	fp, ip
10010a2e:	4648      	mov	r0, r9
10010a30:	043f      	lsls	r7, r7, #16
10010a32:	0c23      	lsrs	r3, r4, #16
10010a34:	0c3f      	lsrs	r7, r7, #16
10010a36:	0424      	lsls	r4, r4, #16
10010a38:	19e4      	adds	r4, r4, r7
10010a3a:	4657      	mov	r7, sl
10010a3c:	4368      	muls	r0, r5
10010a3e:	436f      	muls	r7, r5
10010a40:	4684      	mov	ip, r0
10010a42:	464d      	mov	r5, r9
10010a44:	4650      	mov	r0, sl
10010a46:	4355      	muls	r5, r2
10010a48:	4342      	muls	r2, r0
10010a4a:	0c38      	lsrs	r0, r7, #16
10010a4c:	4681      	mov	r9, r0
10010a4e:	4462      	add	r2, ip
10010a50:	444a      	add	r2, r9
10010a52:	445b      	add	r3, fp
10010a54:	4594      	cmp	ip, r2
10010a56:	d903      	bls.n	10010a60 <__aeabi_dmul+0x2f4>
10010a58:	2080      	movs	r0, #128	; 0x80
10010a5a:	0240      	lsls	r0, r0, #9
10010a5c:	4684      	mov	ip, r0
10010a5e:	4465      	add	r5, ip
10010a60:	9803      	ldr	r0, [sp, #12]
10010a62:	043f      	lsls	r7, r7, #16
10010a64:	4683      	mov	fp, r0
10010a66:	9804      	ldr	r0, [sp, #16]
10010a68:	0c3f      	lsrs	r7, r7, #16
10010a6a:	4684      	mov	ip, r0
10010a6c:	44e3      	add	fp, ip
10010a6e:	45c3      	cmp	fp, r8
10010a70:	4180      	sbcs	r0, r0
10010a72:	4240      	negs	r0, r0
10010a74:	4682      	mov	sl, r0
10010a76:	0410      	lsls	r0, r2, #16
10010a78:	4684      	mov	ip, r0
10010a7a:	9801      	ldr	r0, [sp, #4]
10010a7c:	4467      	add	r7, ip
10010a7e:	4684      	mov	ip, r0
10010a80:	4467      	add	r7, ip
10010a82:	44a3      	add	fp, r4
10010a84:	46bc      	mov	ip, r7
10010a86:	45a3      	cmp	fp, r4
10010a88:	41a4      	sbcs	r4, r4
10010a8a:	4699      	mov	r9, r3
10010a8c:	44d4      	add	ip, sl
10010a8e:	4264      	negs	r4, r4
10010a90:	4287      	cmp	r7, r0
10010a92:	41bf      	sbcs	r7, r7
10010a94:	45d4      	cmp	ip, sl
10010a96:	4180      	sbcs	r0, r0
10010a98:	44e1      	add	r9, ip
10010a9a:	46a0      	mov	r8, r4
10010a9c:	4599      	cmp	r9, r3
10010a9e:	419b      	sbcs	r3, r3
10010aa0:	427f      	negs	r7, r7
10010aa2:	4240      	negs	r0, r0
10010aa4:	44c8      	add	r8, r9
10010aa6:	4307      	orrs	r7, r0
10010aa8:	0c12      	lsrs	r2, r2, #16
10010aaa:	18ba      	adds	r2, r7, r2
10010aac:	45a0      	cmp	r8, r4
10010aae:	41a4      	sbcs	r4, r4
10010ab0:	425f      	negs	r7, r3
10010ab2:	003b      	movs	r3, r7
10010ab4:	4264      	negs	r4, r4
10010ab6:	4323      	orrs	r3, r4
10010ab8:	18d7      	adds	r7, r2, r3
10010aba:	4643      	mov	r3, r8
10010abc:	197d      	adds	r5, r7, r5
10010abe:	0ddb      	lsrs	r3, r3, #23
10010ac0:	026d      	lsls	r5, r5, #9
10010ac2:	431d      	orrs	r5, r3
10010ac4:	465b      	mov	r3, fp
10010ac6:	025a      	lsls	r2, r3, #9
10010ac8:	9b05      	ldr	r3, [sp, #20]
10010aca:	431a      	orrs	r2, r3
10010acc:	1e53      	subs	r3, r2, #1
10010ace:	419a      	sbcs	r2, r3
10010ad0:	465b      	mov	r3, fp
10010ad2:	0ddb      	lsrs	r3, r3, #23
10010ad4:	431a      	orrs	r2, r3
10010ad6:	4643      	mov	r3, r8
10010ad8:	025b      	lsls	r3, r3, #9
10010ada:	4313      	orrs	r3, r2
10010adc:	01ea      	lsls	r2, r5, #7
10010ade:	d507      	bpl.n	10010af0 <__aeabi_dmul+0x384>
10010ae0:	2201      	movs	r2, #1
10010ae2:	085c      	lsrs	r4, r3, #1
10010ae4:	4013      	ands	r3, r2
10010ae6:	4323      	orrs	r3, r4
10010ae8:	07ea      	lsls	r2, r5, #31
10010aea:	9e02      	ldr	r6, [sp, #8]
10010aec:	4313      	orrs	r3, r2
10010aee:	086d      	lsrs	r5, r5, #1
10010af0:	4a57      	ldr	r2, [pc, #348]	; (10010c50 <__aeabi_dmul+0x4e4>)
10010af2:	18b2      	adds	r2, r6, r2
10010af4:	2a00      	cmp	r2, #0
10010af6:	dd4b      	ble.n	10010b90 <__aeabi_dmul+0x424>
10010af8:	0758      	lsls	r0, r3, #29
10010afa:	d009      	beq.n	10010b10 <__aeabi_dmul+0x3a4>
10010afc:	200f      	movs	r0, #15
10010afe:	4018      	ands	r0, r3
10010b00:	2804      	cmp	r0, #4
10010b02:	d005      	beq.n	10010b10 <__aeabi_dmul+0x3a4>
10010b04:	1d18      	adds	r0, r3, #4
10010b06:	4298      	cmp	r0, r3
10010b08:	419b      	sbcs	r3, r3
10010b0a:	425b      	negs	r3, r3
10010b0c:	18ed      	adds	r5, r5, r3
10010b0e:	0003      	movs	r3, r0
10010b10:	01e8      	lsls	r0, r5, #7
10010b12:	d504      	bpl.n	10010b1e <__aeabi_dmul+0x3b2>
10010b14:	4a4f      	ldr	r2, [pc, #316]	; (10010c54 <__aeabi_dmul+0x4e8>)
10010b16:	4015      	ands	r5, r2
10010b18:	2280      	movs	r2, #128	; 0x80
10010b1a:	00d2      	lsls	r2, r2, #3
10010b1c:	18b2      	adds	r2, r6, r2
10010b1e:	484e      	ldr	r0, [pc, #312]	; (10010c58 <__aeabi_dmul+0x4ec>)
10010b20:	4282      	cmp	r2, r0
10010b22:	dd00      	ble.n	10010b26 <__aeabi_dmul+0x3ba>
10010b24:	e6e7      	b.n	100108f6 <__aeabi_dmul+0x18a>
10010b26:	2401      	movs	r4, #1
10010b28:	08db      	lsrs	r3, r3, #3
10010b2a:	0768      	lsls	r0, r5, #29
10010b2c:	4318      	orrs	r0, r3
10010b2e:	026d      	lsls	r5, r5, #9
10010b30:	0553      	lsls	r3, r2, #21
10010b32:	4680      	mov	r8, r0
10010b34:	0b2d      	lsrs	r5, r5, #12
10010b36:	0d5b      	lsrs	r3, r3, #21
10010b38:	400c      	ands	r4, r1
10010b3a:	e67d      	b.n	10010838 <__aeabi_dmul+0xcc>
10010b3c:	2280      	movs	r2, #128	; 0x80
10010b3e:	4659      	mov	r1, fp
10010b40:	0312      	lsls	r2, r2, #12
10010b42:	4211      	tst	r1, r2
10010b44:	d008      	beq.n	10010b58 <__aeabi_dmul+0x3ec>
10010b46:	4215      	tst	r5, r2
10010b48:	d106      	bne.n	10010b58 <__aeabi_dmul+0x3ec>
10010b4a:	4315      	orrs	r5, r2
10010b4c:	032d      	lsls	r5, r5, #12
10010b4e:	4698      	mov	r8, r3
10010b50:	0b2d      	lsrs	r5, r5, #12
10010b52:	464c      	mov	r4, r9
10010b54:	4b41      	ldr	r3, [pc, #260]	; (10010c5c <__aeabi_dmul+0x4f0>)
10010b56:	e66f      	b.n	10010838 <__aeabi_dmul+0xcc>
10010b58:	465d      	mov	r5, fp
10010b5a:	4315      	orrs	r5, r2
10010b5c:	032d      	lsls	r5, r5, #12
10010b5e:	0b2d      	lsrs	r5, r5, #12
10010b60:	4b3e      	ldr	r3, [pc, #248]	; (10010c5c <__aeabi_dmul+0x4f0>)
10010b62:	e669      	b.n	10010838 <__aeabi_dmul+0xcc>
10010b64:	0003      	movs	r3, r0
10010b66:	4655      	mov	r5, sl
10010b68:	3b28      	subs	r3, #40	; 0x28
10010b6a:	409d      	lsls	r5, r3
10010b6c:	2300      	movs	r3, #0
10010b6e:	e6bc      	b.n	100108ea <__aeabi_dmul+0x17e>
10010b70:	4650      	mov	r0, sl
10010b72:	f000 fc37 	bl	100113e4 <__clzsi2>
10010b76:	3020      	adds	r0, #32
10010b78:	e6a8      	b.n	100108cc <__aeabi_dmul+0x160>
10010b7a:	0003      	movs	r3, r0
10010b7c:	3b28      	subs	r3, #40	; 0x28
10010b7e:	409f      	lsls	r7, r3
10010b80:	2300      	movs	r3, #0
10010b82:	46bb      	mov	fp, r7
10010b84:	4698      	mov	r8, r3
10010b86:	e689      	b.n	1001089c <__aeabi_dmul+0x130>
10010b88:	f000 fc2c 	bl	100113e4 <__clzsi2>
10010b8c:	3020      	adds	r0, #32
10010b8e:	e673      	b.n	10010878 <__aeabi_dmul+0x10c>
10010b90:	2401      	movs	r4, #1
10010b92:	1aa6      	subs	r6, r4, r2
10010b94:	2e38      	cmp	r6, #56	; 0x38
10010b96:	dd07      	ble.n	10010ba8 <__aeabi_dmul+0x43c>
10010b98:	2200      	movs	r2, #0
10010b9a:	400c      	ands	r4, r1
10010b9c:	2300      	movs	r3, #0
10010b9e:	2500      	movs	r5, #0
10010ba0:	4690      	mov	r8, r2
10010ba2:	e649      	b.n	10010838 <__aeabi_dmul+0xcc>
10010ba4:	9e02      	ldr	r6, [sp, #8]
10010ba6:	e7a3      	b.n	10010af0 <__aeabi_dmul+0x384>
10010ba8:	2e1f      	cmp	r6, #31
10010baa:	dc20      	bgt.n	10010bee <__aeabi_dmul+0x482>
10010bac:	2220      	movs	r2, #32
10010bae:	002c      	movs	r4, r5
10010bb0:	0018      	movs	r0, r3
10010bb2:	1b92      	subs	r2, r2, r6
10010bb4:	40f0      	lsrs	r0, r6
10010bb6:	4094      	lsls	r4, r2
10010bb8:	4093      	lsls	r3, r2
10010bba:	4304      	orrs	r4, r0
10010bbc:	1e58      	subs	r0, r3, #1
10010bbe:	4183      	sbcs	r3, r0
10010bc0:	431c      	orrs	r4, r3
10010bc2:	40f5      	lsrs	r5, r6
10010bc4:	0763      	lsls	r3, r4, #29
10010bc6:	d009      	beq.n	10010bdc <__aeabi_dmul+0x470>
10010bc8:	230f      	movs	r3, #15
10010bca:	4023      	ands	r3, r4
10010bcc:	2b04      	cmp	r3, #4
10010bce:	d005      	beq.n	10010bdc <__aeabi_dmul+0x470>
10010bd0:	0023      	movs	r3, r4
10010bd2:	1d1c      	adds	r4, r3, #4
10010bd4:	429c      	cmp	r4, r3
10010bd6:	4192      	sbcs	r2, r2
10010bd8:	4252      	negs	r2, r2
10010bda:	18ad      	adds	r5, r5, r2
10010bdc:	022b      	lsls	r3, r5, #8
10010bde:	d51f      	bpl.n	10010c20 <__aeabi_dmul+0x4b4>
10010be0:	2401      	movs	r4, #1
10010be2:	2200      	movs	r2, #0
10010be4:	400c      	ands	r4, r1
10010be6:	2301      	movs	r3, #1
10010be8:	2500      	movs	r5, #0
10010bea:	4690      	mov	r8, r2
10010bec:	e624      	b.n	10010838 <__aeabi_dmul+0xcc>
10010bee:	201f      	movs	r0, #31
10010bf0:	002c      	movs	r4, r5
10010bf2:	4240      	negs	r0, r0
10010bf4:	1a82      	subs	r2, r0, r2
10010bf6:	40d4      	lsrs	r4, r2
10010bf8:	2e20      	cmp	r6, #32
10010bfa:	d01c      	beq.n	10010c36 <__aeabi_dmul+0x4ca>
10010bfc:	2240      	movs	r2, #64	; 0x40
10010bfe:	1b96      	subs	r6, r2, r6
10010c00:	40b5      	lsls	r5, r6
10010c02:	432b      	orrs	r3, r5
10010c04:	1e58      	subs	r0, r3, #1
10010c06:	4183      	sbcs	r3, r0
10010c08:	2007      	movs	r0, #7
10010c0a:	4323      	orrs	r3, r4
10010c0c:	4018      	ands	r0, r3
10010c0e:	2500      	movs	r5, #0
10010c10:	2800      	cmp	r0, #0
10010c12:	d009      	beq.n	10010c28 <__aeabi_dmul+0x4bc>
10010c14:	220f      	movs	r2, #15
10010c16:	2500      	movs	r5, #0
10010c18:	401a      	ands	r2, r3
10010c1a:	001c      	movs	r4, r3
10010c1c:	2a04      	cmp	r2, #4
10010c1e:	d1d8      	bne.n	10010bd2 <__aeabi_dmul+0x466>
10010c20:	0023      	movs	r3, r4
10010c22:	0768      	lsls	r0, r5, #29
10010c24:	026d      	lsls	r5, r5, #9
10010c26:	0b2d      	lsrs	r5, r5, #12
10010c28:	2401      	movs	r4, #1
10010c2a:	08db      	lsrs	r3, r3, #3
10010c2c:	4303      	orrs	r3, r0
10010c2e:	4698      	mov	r8, r3
10010c30:	400c      	ands	r4, r1
10010c32:	2300      	movs	r3, #0
10010c34:	e600      	b.n	10010838 <__aeabi_dmul+0xcc>
10010c36:	2500      	movs	r5, #0
10010c38:	e7e3      	b.n	10010c02 <__aeabi_dmul+0x496>
10010c3a:	2280      	movs	r2, #128	; 0x80
10010c3c:	2401      	movs	r4, #1
10010c3e:	0312      	lsls	r2, r2, #12
10010c40:	4315      	orrs	r5, r2
10010c42:	032d      	lsls	r5, r5, #12
10010c44:	4698      	mov	r8, r3
10010c46:	0b2d      	lsrs	r5, r5, #12
10010c48:	400c      	ands	r4, r1
10010c4a:	4b04      	ldr	r3, [pc, #16]	; (10010c5c <__aeabi_dmul+0x4f0>)
10010c4c:	e5f4      	b.n	10010838 <__aeabi_dmul+0xcc>
10010c4e:	46c0      	nop			; (mov r8, r8)
10010c50:	000003ff 	.word	0x000003ff
10010c54:	feffffff 	.word	0xfeffffff
10010c58:	000007fe 	.word	0x000007fe
10010c5c:	000007ff 	.word	0x000007ff

10010c60 <__aeabi_dsub>:
10010c60:	b5f0      	push	{r4, r5, r6, r7, lr}
10010c62:	4657      	mov	r7, sl
10010c64:	464e      	mov	r6, r9
10010c66:	4645      	mov	r5, r8
10010c68:	b4e0      	push	{r5, r6, r7}
10010c6a:	000e      	movs	r6, r1
10010c6c:	0011      	movs	r1, r2
10010c6e:	0ff2      	lsrs	r2, r6, #31
10010c70:	4692      	mov	sl, r2
10010c72:	00c5      	lsls	r5, r0, #3
10010c74:	0f42      	lsrs	r2, r0, #29
10010c76:	0318      	lsls	r0, r3, #12
10010c78:	0337      	lsls	r7, r6, #12
10010c7a:	0074      	lsls	r4, r6, #1
10010c7c:	0a40      	lsrs	r0, r0, #9
10010c7e:	0f4e      	lsrs	r6, r1, #29
10010c80:	0a7f      	lsrs	r7, r7, #9
10010c82:	4330      	orrs	r0, r6
10010c84:	4ecf      	ldr	r6, [pc, #828]	; (10010fc4 <__aeabi_dsub+0x364>)
10010c86:	4317      	orrs	r7, r2
10010c88:	005a      	lsls	r2, r3, #1
10010c8a:	0d64      	lsrs	r4, r4, #21
10010c8c:	0d52      	lsrs	r2, r2, #21
10010c8e:	0fdb      	lsrs	r3, r3, #31
10010c90:	00c9      	lsls	r1, r1, #3
10010c92:	42b2      	cmp	r2, r6
10010c94:	d100      	bne.n	10010c98 <__aeabi_dsub+0x38>
10010c96:	e0e5      	b.n	10010e64 <__aeabi_dsub+0x204>
10010c98:	2601      	movs	r6, #1
10010c9a:	4073      	eors	r3, r6
10010c9c:	1aa6      	subs	r6, r4, r2
10010c9e:	46b4      	mov	ip, r6
10010ca0:	4553      	cmp	r3, sl
10010ca2:	d100      	bne.n	10010ca6 <__aeabi_dsub+0x46>
10010ca4:	e0af      	b.n	10010e06 <__aeabi_dsub+0x1a6>
10010ca6:	2e00      	cmp	r6, #0
10010ca8:	dc00      	bgt.n	10010cac <__aeabi_dsub+0x4c>
10010caa:	e10d      	b.n	10010ec8 <__aeabi_dsub+0x268>
10010cac:	2a00      	cmp	r2, #0
10010cae:	d13a      	bne.n	10010d26 <__aeabi_dsub+0xc6>
10010cb0:	0003      	movs	r3, r0
10010cb2:	430b      	orrs	r3, r1
10010cb4:	d000      	beq.n	10010cb8 <__aeabi_dsub+0x58>
10010cb6:	e0e4      	b.n	10010e82 <__aeabi_dsub+0x222>
10010cb8:	076b      	lsls	r3, r5, #29
10010cba:	d009      	beq.n	10010cd0 <__aeabi_dsub+0x70>
10010cbc:	230f      	movs	r3, #15
10010cbe:	402b      	ands	r3, r5
10010cc0:	2b04      	cmp	r3, #4
10010cc2:	d005      	beq.n	10010cd0 <__aeabi_dsub+0x70>
10010cc4:	1d2b      	adds	r3, r5, #4
10010cc6:	42ab      	cmp	r3, r5
10010cc8:	41ad      	sbcs	r5, r5
10010cca:	426d      	negs	r5, r5
10010ccc:	197f      	adds	r7, r7, r5
10010cce:	001d      	movs	r5, r3
10010cd0:	023b      	lsls	r3, r7, #8
10010cd2:	d400      	bmi.n	10010cd6 <__aeabi_dsub+0x76>
10010cd4:	e088      	b.n	10010de8 <__aeabi_dsub+0x188>
10010cd6:	4bbb      	ldr	r3, [pc, #748]	; (10010fc4 <__aeabi_dsub+0x364>)
10010cd8:	3401      	adds	r4, #1
10010cda:	429c      	cmp	r4, r3
10010cdc:	d100      	bne.n	10010ce0 <__aeabi_dsub+0x80>
10010cde:	e110      	b.n	10010f02 <__aeabi_dsub+0x2a2>
10010ce0:	003a      	movs	r2, r7
10010ce2:	4bb9      	ldr	r3, [pc, #740]	; (10010fc8 <__aeabi_dsub+0x368>)
10010ce4:	4651      	mov	r1, sl
10010ce6:	401a      	ands	r2, r3
10010ce8:	2301      	movs	r3, #1
10010cea:	0750      	lsls	r0, r2, #29
10010cec:	08ed      	lsrs	r5, r5, #3
10010cee:	0252      	lsls	r2, r2, #9
10010cf0:	0564      	lsls	r4, r4, #21
10010cf2:	4305      	orrs	r5, r0
10010cf4:	0b12      	lsrs	r2, r2, #12
10010cf6:	0d64      	lsrs	r4, r4, #21
10010cf8:	400b      	ands	r3, r1
10010cfa:	2100      	movs	r1, #0
10010cfc:	0028      	movs	r0, r5
10010cfe:	0312      	lsls	r2, r2, #12
10010d00:	0d0d      	lsrs	r5, r1, #20
10010d02:	0b12      	lsrs	r2, r2, #12
10010d04:	0564      	lsls	r4, r4, #21
10010d06:	052d      	lsls	r5, r5, #20
10010d08:	4315      	orrs	r5, r2
10010d0a:	0862      	lsrs	r2, r4, #1
10010d0c:	4caf      	ldr	r4, [pc, #700]	; (10010fcc <__aeabi_dsub+0x36c>)
10010d0e:	07db      	lsls	r3, r3, #31
10010d10:	402c      	ands	r4, r5
10010d12:	4314      	orrs	r4, r2
10010d14:	0064      	lsls	r4, r4, #1
10010d16:	0864      	lsrs	r4, r4, #1
10010d18:	431c      	orrs	r4, r3
10010d1a:	0021      	movs	r1, r4
10010d1c:	bc1c      	pop	{r2, r3, r4}
10010d1e:	4690      	mov	r8, r2
10010d20:	4699      	mov	r9, r3
10010d22:	46a2      	mov	sl, r4
10010d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010d26:	4ba7      	ldr	r3, [pc, #668]	; (10010fc4 <__aeabi_dsub+0x364>)
10010d28:	429c      	cmp	r4, r3
10010d2a:	d0c5      	beq.n	10010cb8 <__aeabi_dsub+0x58>
10010d2c:	2380      	movs	r3, #128	; 0x80
10010d2e:	041b      	lsls	r3, r3, #16
10010d30:	4318      	orrs	r0, r3
10010d32:	4663      	mov	r3, ip
10010d34:	2b38      	cmp	r3, #56	; 0x38
10010d36:	dd00      	ble.n	10010d3a <__aeabi_dsub+0xda>
10010d38:	e0fd      	b.n	10010f36 <__aeabi_dsub+0x2d6>
10010d3a:	2b1f      	cmp	r3, #31
10010d3c:	dd00      	ble.n	10010d40 <__aeabi_dsub+0xe0>
10010d3e:	e130      	b.n	10010fa2 <__aeabi_dsub+0x342>
10010d40:	4662      	mov	r2, ip
10010d42:	2320      	movs	r3, #32
10010d44:	1a9b      	subs	r3, r3, r2
10010d46:	0002      	movs	r2, r0
10010d48:	409a      	lsls	r2, r3
10010d4a:	4666      	mov	r6, ip
10010d4c:	4690      	mov	r8, r2
10010d4e:	000a      	movs	r2, r1
10010d50:	4099      	lsls	r1, r3
10010d52:	40f2      	lsrs	r2, r6
10010d54:	4646      	mov	r6, r8
10010d56:	1e4b      	subs	r3, r1, #1
10010d58:	4199      	sbcs	r1, r3
10010d5a:	4332      	orrs	r2, r6
10010d5c:	4311      	orrs	r1, r2
10010d5e:	4663      	mov	r3, ip
10010d60:	0002      	movs	r2, r0
10010d62:	40da      	lsrs	r2, r3
10010d64:	1a69      	subs	r1, r5, r1
10010d66:	428d      	cmp	r5, r1
10010d68:	419b      	sbcs	r3, r3
10010d6a:	000d      	movs	r5, r1
10010d6c:	1aba      	subs	r2, r7, r2
10010d6e:	425b      	negs	r3, r3
10010d70:	1ad7      	subs	r7, r2, r3
10010d72:	023b      	lsls	r3, r7, #8
10010d74:	d535      	bpl.n	10010de2 <__aeabi_dsub+0x182>
10010d76:	027a      	lsls	r2, r7, #9
10010d78:	0a53      	lsrs	r3, r2, #9
10010d7a:	4698      	mov	r8, r3
10010d7c:	4643      	mov	r3, r8
10010d7e:	2b00      	cmp	r3, #0
10010d80:	d100      	bne.n	10010d84 <__aeabi_dsub+0x124>
10010d82:	e0c4      	b.n	10010f0e <__aeabi_dsub+0x2ae>
10010d84:	4640      	mov	r0, r8
10010d86:	f000 fb2d 	bl	100113e4 <__clzsi2>
10010d8a:	0003      	movs	r3, r0
10010d8c:	3b08      	subs	r3, #8
10010d8e:	2b1f      	cmp	r3, #31
10010d90:	dd00      	ble.n	10010d94 <__aeabi_dsub+0x134>
10010d92:	e0c5      	b.n	10010f20 <__aeabi_dsub+0x2c0>
10010d94:	2220      	movs	r2, #32
10010d96:	0029      	movs	r1, r5
10010d98:	1ad2      	subs	r2, r2, r3
10010d9a:	4647      	mov	r7, r8
10010d9c:	40d1      	lsrs	r1, r2
10010d9e:	409f      	lsls	r7, r3
10010da0:	000a      	movs	r2, r1
10010da2:	409d      	lsls	r5, r3
10010da4:	433a      	orrs	r2, r7
10010da6:	429c      	cmp	r4, r3
10010da8:	dd00      	ble.n	10010dac <__aeabi_dsub+0x14c>
10010daa:	e0c0      	b.n	10010f2e <__aeabi_dsub+0x2ce>
10010dac:	1b1c      	subs	r4, r3, r4
10010dae:	1c63      	adds	r3, r4, #1
10010db0:	2b1f      	cmp	r3, #31
10010db2:	dd00      	ble.n	10010db6 <__aeabi_dsub+0x156>
10010db4:	e0e4      	b.n	10010f80 <__aeabi_dsub+0x320>
10010db6:	2120      	movs	r1, #32
10010db8:	0014      	movs	r4, r2
10010dba:	0028      	movs	r0, r5
10010dbc:	1ac9      	subs	r1, r1, r3
10010dbe:	40d8      	lsrs	r0, r3
10010dc0:	408c      	lsls	r4, r1
10010dc2:	408d      	lsls	r5, r1
10010dc4:	4304      	orrs	r4, r0
10010dc6:	40da      	lsrs	r2, r3
10010dc8:	1e68      	subs	r0, r5, #1
10010dca:	4185      	sbcs	r5, r0
10010dcc:	0017      	movs	r7, r2
10010dce:	4325      	orrs	r5, r4
10010dd0:	2400      	movs	r4, #0
10010dd2:	e771      	b.n	10010cb8 <__aeabi_dsub+0x58>
10010dd4:	4642      	mov	r2, r8
10010dd6:	4663      	mov	r3, ip
10010dd8:	431a      	orrs	r2, r3
10010dda:	d100      	bne.n	10010dde <__aeabi_dsub+0x17e>
10010ddc:	e24c      	b.n	10011278 <__aeabi_dsub+0x618>
10010dde:	4667      	mov	r7, ip
10010de0:	4645      	mov	r5, r8
10010de2:	076b      	lsls	r3, r5, #29
10010de4:	d000      	beq.n	10010de8 <__aeabi_dsub+0x188>
10010de6:	e769      	b.n	10010cbc <__aeabi_dsub+0x5c>
10010de8:	2301      	movs	r3, #1
10010dea:	4651      	mov	r1, sl
10010dec:	0778      	lsls	r0, r7, #29
10010dee:	08ed      	lsrs	r5, r5, #3
10010df0:	08fa      	lsrs	r2, r7, #3
10010df2:	400b      	ands	r3, r1
10010df4:	4305      	orrs	r5, r0
10010df6:	4973      	ldr	r1, [pc, #460]	; (10010fc4 <__aeabi_dsub+0x364>)
10010df8:	428c      	cmp	r4, r1
10010dfa:	d038      	beq.n	10010e6e <__aeabi_dsub+0x20e>
10010dfc:	0312      	lsls	r2, r2, #12
10010dfe:	0564      	lsls	r4, r4, #21
10010e00:	0b12      	lsrs	r2, r2, #12
10010e02:	0d64      	lsrs	r4, r4, #21
10010e04:	e779      	b.n	10010cfa <__aeabi_dsub+0x9a>
10010e06:	2e00      	cmp	r6, #0
10010e08:	dc00      	bgt.n	10010e0c <__aeabi_dsub+0x1ac>
10010e0a:	e09a      	b.n	10010f42 <__aeabi_dsub+0x2e2>
10010e0c:	2a00      	cmp	r2, #0
10010e0e:	d047      	beq.n	10010ea0 <__aeabi_dsub+0x240>
10010e10:	4a6c      	ldr	r2, [pc, #432]	; (10010fc4 <__aeabi_dsub+0x364>)
10010e12:	4294      	cmp	r4, r2
10010e14:	d100      	bne.n	10010e18 <__aeabi_dsub+0x1b8>
10010e16:	e74f      	b.n	10010cb8 <__aeabi_dsub+0x58>
10010e18:	2280      	movs	r2, #128	; 0x80
10010e1a:	0412      	lsls	r2, r2, #16
10010e1c:	4310      	orrs	r0, r2
10010e1e:	4662      	mov	r2, ip
10010e20:	2a38      	cmp	r2, #56	; 0x38
10010e22:	dc00      	bgt.n	10010e26 <__aeabi_dsub+0x1c6>
10010e24:	e108      	b.n	10011038 <__aeabi_dsub+0x3d8>
10010e26:	4301      	orrs	r1, r0
10010e28:	1e48      	subs	r0, r1, #1
10010e2a:	4181      	sbcs	r1, r0
10010e2c:	2200      	movs	r2, #0
10010e2e:	b2c9      	uxtb	r1, r1
10010e30:	1949      	adds	r1, r1, r5
10010e32:	19d2      	adds	r2, r2, r7
10010e34:	42a9      	cmp	r1, r5
10010e36:	41bf      	sbcs	r7, r7
10010e38:	000d      	movs	r5, r1
10010e3a:	427f      	negs	r7, r7
10010e3c:	18bf      	adds	r7, r7, r2
10010e3e:	023a      	lsls	r2, r7, #8
10010e40:	d400      	bmi.n	10010e44 <__aeabi_dsub+0x1e4>
10010e42:	e142      	b.n	100110ca <__aeabi_dsub+0x46a>
10010e44:	4a5f      	ldr	r2, [pc, #380]	; (10010fc4 <__aeabi_dsub+0x364>)
10010e46:	3401      	adds	r4, #1
10010e48:	4294      	cmp	r4, r2
10010e4a:	d100      	bne.n	10010e4e <__aeabi_dsub+0x1ee>
10010e4c:	e14e      	b.n	100110ec <__aeabi_dsub+0x48c>
10010e4e:	2001      	movs	r0, #1
10010e50:	4a5d      	ldr	r2, [pc, #372]	; (10010fc8 <__aeabi_dsub+0x368>)
10010e52:	0869      	lsrs	r1, r5, #1
10010e54:	403a      	ands	r2, r7
10010e56:	4028      	ands	r0, r5
10010e58:	4308      	orrs	r0, r1
10010e5a:	07d5      	lsls	r5, r2, #31
10010e5c:	4305      	orrs	r5, r0
10010e5e:	0857      	lsrs	r7, r2, #1
10010e60:	469a      	mov	sl, r3
10010e62:	e729      	b.n	10010cb8 <__aeabi_dsub+0x58>
10010e64:	0006      	movs	r6, r0
10010e66:	430e      	orrs	r6, r1
10010e68:	d000      	beq.n	10010e6c <__aeabi_dsub+0x20c>
10010e6a:	e717      	b.n	10010c9c <__aeabi_dsub+0x3c>
10010e6c:	e714      	b.n	10010c98 <__aeabi_dsub+0x38>
10010e6e:	0029      	movs	r1, r5
10010e70:	4311      	orrs	r1, r2
10010e72:	d100      	bne.n	10010e76 <__aeabi_dsub+0x216>
10010e74:	e1f9      	b.n	1001126a <__aeabi_dsub+0x60a>
10010e76:	2180      	movs	r1, #128	; 0x80
10010e78:	0309      	lsls	r1, r1, #12
10010e7a:	430a      	orrs	r2, r1
10010e7c:	0312      	lsls	r2, r2, #12
10010e7e:	0b12      	lsrs	r2, r2, #12
10010e80:	e73b      	b.n	10010cfa <__aeabi_dsub+0x9a>
10010e82:	2301      	movs	r3, #1
10010e84:	425b      	negs	r3, r3
10010e86:	4698      	mov	r8, r3
10010e88:	44c4      	add	ip, r8
10010e8a:	4663      	mov	r3, ip
10010e8c:	2b00      	cmp	r3, #0
10010e8e:	d172      	bne.n	10010f76 <__aeabi_dsub+0x316>
10010e90:	1a69      	subs	r1, r5, r1
10010e92:	428d      	cmp	r5, r1
10010e94:	419b      	sbcs	r3, r3
10010e96:	1a3f      	subs	r7, r7, r0
10010e98:	425b      	negs	r3, r3
10010e9a:	1aff      	subs	r7, r7, r3
10010e9c:	000d      	movs	r5, r1
10010e9e:	e768      	b.n	10010d72 <__aeabi_dsub+0x112>
10010ea0:	0002      	movs	r2, r0
10010ea2:	430a      	orrs	r2, r1
10010ea4:	d100      	bne.n	10010ea8 <__aeabi_dsub+0x248>
10010ea6:	e707      	b.n	10010cb8 <__aeabi_dsub+0x58>
10010ea8:	2201      	movs	r2, #1
10010eaa:	4252      	negs	r2, r2
10010eac:	4690      	mov	r8, r2
10010eae:	44c4      	add	ip, r8
10010eb0:	4662      	mov	r2, ip
10010eb2:	2a00      	cmp	r2, #0
10010eb4:	d000      	beq.n	10010eb8 <__aeabi_dsub+0x258>
10010eb6:	e0e6      	b.n	10011086 <__aeabi_dsub+0x426>
10010eb8:	1869      	adds	r1, r5, r1
10010eba:	42a9      	cmp	r1, r5
10010ebc:	41b6      	sbcs	r6, r6
10010ebe:	183f      	adds	r7, r7, r0
10010ec0:	4276      	negs	r6, r6
10010ec2:	19f7      	adds	r7, r6, r7
10010ec4:	000d      	movs	r5, r1
10010ec6:	e7ba      	b.n	10010e3e <__aeabi_dsub+0x1de>
10010ec8:	2e00      	cmp	r6, #0
10010eca:	d000      	beq.n	10010ece <__aeabi_dsub+0x26e>
10010ecc:	e080      	b.n	10010fd0 <__aeabi_dsub+0x370>
10010ece:	1c62      	adds	r2, r4, #1
10010ed0:	0552      	lsls	r2, r2, #21
10010ed2:	0d52      	lsrs	r2, r2, #21
10010ed4:	2a01      	cmp	r2, #1
10010ed6:	dc00      	bgt.n	10010eda <__aeabi_dsub+0x27a>
10010ed8:	e0f9      	b.n	100110ce <__aeabi_dsub+0x46e>
10010eda:	1a6a      	subs	r2, r5, r1
10010edc:	4691      	mov	r9, r2
10010ede:	454d      	cmp	r5, r9
10010ee0:	41b6      	sbcs	r6, r6
10010ee2:	1a3a      	subs	r2, r7, r0
10010ee4:	4276      	negs	r6, r6
10010ee6:	1b92      	subs	r2, r2, r6
10010ee8:	4690      	mov	r8, r2
10010eea:	0212      	lsls	r2, r2, #8
10010eec:	d400      	bmi.n	10010ef0 <__aeabi_dsub+0x290>
10010eee:	e099      	b.n	10011024 <__aeabi_dsub+0x3c4>
10010ef0:	1b4d      	subs	r5, r1, r5
10010ef2:	42a9      	cmp	r1, r5
10010ef4:	4189      	sbcs	r1, r1
10010ef6:	1bc7      	subs	r7, r0, r7
10010ef8:	4249      	negs	r1, r1
10010efa:	1a7a      	subs	r2, r7, r1
10010efc:	4690      	mov	r8, r2
10010efe:	469a      	mov	sl, r3
10010f00:	e73c      	b.n	10010d7c <__aeabi_dsub+0x11c>
10010f02:	4652      	mov	r2, sl
10010f04:	2301      	movs	r3, #1
10010f06:	2500      	movs	r5, #0
10010f08:	4013      	ands	r3, r2
10010f0a:	2200      	movs	r2, #0
10010f0c:	e6f5      	b.n	10010cfa <__aeabi_dsub+0x9a>
10010f0e:	0028      	movs	r0, r5
10010f10:	f000 fa68 	bl	100113e4 <__clzsi2>
10010f14:	3020      	adds	r0, #32
10010f16:	0003      	movs	r3, r0
10010f18:	3b08      	subs	r3, #8
10010f1a:	2b1f      	cmp	r3, #31
10010f1c:	dc00      	bgt.n	10010f20 <__aeabi_dsub+0x2c0>
10010f1e:	e739      	b.n	10010d94 <__aeabi_dsub+0x134>
10010f20:	002a      	movs	r2, r5
10010f22:	3828      	subs	r0, #40	; 0x28
10010f24:	4082      	lsls	r2, r0
10010f26:	2500      	movs	r5, #0
10010f28:	429c      	cmp	r4, r3
10010f2a:	dc00      	bgt.n	10010f2e <__aeabi_dsub+0x2ce>
10010f2c:	e73e      	b.n	10010dac <__aeabi_dsub+0x14c>
10010f2e:	4f26      	ldr	r7, [pc, #152]	; (10010fc8 <__aeabi_dsub+0x368>)
10010f30:	1ae4      	subs	r4, r4, r3
10010f32:	4017      	ands	r7, r2
10010f34:	e6c0      	b.n	10010cb8 <__aeabi_dsub+0x58>
10010f36:	4301      	orrs	r1, r0
10010f38:	1e48      	subs	r0, r1, #1
10010f3a:	4181      	sbcs	r1, r0
10010f3c:	2200      	movs	r2, #0
10010f3e:	b2c9      	uxtb	r1, r1
10010f40:	e710      	b.n	10010d64 <__aeabi_dsub+0x104>
10010f42:	2e00      	cmp	r6, #0
10010f44:	d000      	beq.n	10010f48 <__aeabi_dsub+0x2e8>
10010f46:	e0f1      	b.n	1001112c <__aeabi_dsub+0x4cc>
10010f48:	1c62      	adds	r2, r4, #1
10010f4a:	4694      	mov	ip, r2
10010f4c:	0552      	lsls	r2, r2, #21
10010f4e:	0d52      	lsrs	r2, r2, #21
10010f50:	2a01      	cmp	r2, #1
10010f52:	dc00      	bgt.n	10010f56 <__aeabi_dsub+0x2f6>
10010f54:	e0a0      	b.n	10011098 <__aeabi_dsub+0x438>
10010f56:	4a1b      	ldr	r2, [pc, #108]	; (10010fc4 <__aeabi_dsub+0x364>)
10010f58:	4594      	cmp	ip, r2
10010f5a:	d100      	bne.n	10010f5e <__aeabi_dsub+0x2fe>
10010f5c:	e0c5      	b.n	100110ea <__aeabi_dsub+0x48a>
10010f5e:	1869      	adds	r1, r5, r1
10010f60:	42a9      	cmp	r1, r5
10010f62:	4192      	sbcs	r2, r2
10010f64:	183f      	adds	r7, r7, r0
10010f66:	4252      	negs	r2, r2
10010f68:	19d2      	adds	r2, r2, r7
10010f6a:	0849      	lsrs	r1, r1, #1
10010f6c:	07d5      	lsls	r5, r2, #31
10010f6e:	430d      	orrs	r5, r1
10010f70:	0857      	lsrs	r7, r2, #1
10010f72:	4664      	mov	r4, ip
10010f74:	e6a0      	b.n	10010cb8 <__aeabi_dsub+0x58>
10010f76:	4b13      	ldr	r3, [pc, #76]	; (10010fc4 <__aeabi_dsub+0x364>)
10010f78:	429c      	cmp	r4, r3
10010f7a:	d000      	beq.n	10010f7e <__aeabi_dsub+0x31e>
10010f7c:	e6d9      	b.n	10010d32 <__aeabi_dsub+0xd2>
10010f7e:	e69b      	b.n	10010cb8 <__aeabi_dsub+0x58>
10010f80:	0011      	movs	r1, r2
10010f82:	3c1f      	subs	r4, #31
10010f84:	40e1      	lsrs	r1, r4
10010f86:	000c      	movs	r4, r1
10010f88:	2b20      	cmp	r3, #32
10010f8a:	d100      	bne.n	10010f8e <__aeabi_dsub+0x32e>
10010f8c:	e080      	b.n	10011090 <__aeabi_dsub+0x430>
10010f8e:	2140      	movs	r1, #64	; 0x40
10010f90:	1acb      	subs	r3, r1, r3
10010f92:	409a      	lsls	r2, r3
10010f94:	4315      	orrs	r5, r2
10010f96:	1e6a      	subs	r2, r5, #1
10010f98:	4195      	sbcs	r5, r2
10010f9a:	2700      	movs	r7, #0
10010f9c:	4325      	orrs	r5, r4
10010f9e:	2400      	movs	r4, #0
10010fa0:	e71f      	b.n	10010de2 <__aeabi_dsub+0x182>
10010fa2:	4663      	mov	r3, ip
10010fa4:	0002      	movs	r2, r0
10010fa6:	3b20      	subs	r3, #32
10010fa8:	40da      	lsrs	r2, r3
10010faa:	4663      	mov	r3, ip
10010fac:	2b20      	cmp	r3, #32
10010fae:	d071      	beq.n	10011094 <__aeabi_dsub+0x434>
10010fb0:	2340      	movs	r3, #64	; 0x40
10010fb2:	4666      	mov	r6, ip
10010fb4:	1b9b      	subs	r3, r3, r6
10010fb6:	4098      	lsls	r0, r3
10010fb8:	4301      	orrs	r1, r0
10010fba:	1e48      	subs	r0, r1, #1
10010fbc:	4181      	sbcs	r1, r0
10010fbe:	4311      	orrs	r1, r2
10010fc0:	2200      	movs	r2, #0
10010fc2:	e6cf      	b.n	10010d64 <__aeabi_dsub+0x104>
10010fc4:	000007ff 	.word	0x000007ff
10010fc8:	ff7fffff 	.word	0xff7fffff
10010fcc:	800fffff 	.word	0x800fffff
10010fd0:	2c00      	cmp	r4, #0
10010fd2:	d048      	beq.n	10011066 <__aeabi_dsub+0x406>
10010fd4:	4cca      	ldr	r4, [pc, #808]	; (10011300 <__aeabi_dsub+0x6a0>)
10010fd6:	42a2      	cmp	r2, r4
10010fd8:	d100      	bne.n	10010fdc <__aeabi_dsub+0x37c>
10010fda:	e0a2      	b.n	10011122 <__aeabi_dsub+0x4c2>
10010fdc:	4274      	negs	r4, r6
10010fde:	46a1      	mov	r9, r4
10010fe0:	2480      	movs	r4, #128	; 0x80
10010fe2:	0424      	lsls	r4, r4, #16
10010fe4:	4327      	orrs	r7, r4
10010fe6:	464c      	mov	r4, r9
10010fe8:	2c38      	cmp	r4, #56	; 0x38
10010fea:	dd00      	ble.n	10010fee <__aeabi_dsub+0x38e>
10010fec:	e0db      	b.n	100111a6 <__aeabi_dsub+0x546>
10010fee:	2c1f      	cmp	r4, #31
10010ff0:	dd00      	ble.n	10010ff4 <__aeabi_dsub+0x394>
10010ff2:	e144      	b.n	1001127e <__aeabi_dsub+0x61e>
10010ff4:	464e      	mov	r6, r9
10010ff6:	2420      	movs	r4, #32
10010ff8:	1ba4      	subs	r4, r4, r6
10010ffa:	003e      	movs	r6, r7
10010ffc:	40a6      	lsls	r6, r4
10010ffe:	46a2      	mov	sl, r4
10011000:	46b0      	mov	r8, r6
10011002:	464c      	mov	r4, r9
10011004:	002e      	movs	r6, r5
10011006:	40e6      	lsrs	r6, r4
10011008:	46b4      	mov	ip, r6
1001100a:	4646      	mov	r6, r8
1001100c:	4664      	mov	r4, ip
1001100e:	4326      	orrs	r6, r4
10011010:	4654      	mov	r4, sl
10011012:	40a5      	lsls	r5, r4
10011014:	1e6c      	subs	r4, r5, #1
10011016:	41a5      	sbcs	r5, r4
10011018:	0034      	movs	r4, r6
1001101a:	432c      	orrs	r4, r5
1001101c:	464d      	mov	r5, r9
1001101e:	40ef      	lsrs	r7, r5
10011020:	1b0d      	subs	r5, r1, r4
10011022:	e028      	b.n	10011076 <__aeabi_dsub+0x416>
10011024:	464a      	mov	r2, r9
10011026:	4643      	mov	r3, r8
10011028:	464d      	mov	r5, r9
1001102a:	431a      	orrs	r2, r3
1001102c:	d000      	beq.n	10011030 <__aeabi_dsub+0x3d0>
1001102e:	e6a5      	b.n	10010d7c <__aeabi_dsub+0x11c>
10011030:	2300      	movs	r3, #0
10011032:	2400      	movs	r4, #0
10011034:	2500      	movs	r5, #0
10011036:	e6de      	b.n	10010df6 <__aeabi_dsub+0x196>
10011038:	2a1f      	cmp	r2, #31
1001103a:	dc5a      	bgt.n	100110f2 <__aeabi_dsub+0x492>
1001103c:	4666      	mov	r6, ip
1001103e:	2220      	movs	r2, #32
10011040:	1b92      	subs	r2, r2, r6
10011042:	0006      	movs	r6, r0
10011044:	4096      	lsls	r6, r2
10011046:	4691      	mov	r9, r2
10011048:	46b0      	mov	r8, r6
1001104a:	4662      	mov	r2, ip
1001104c:	000e      	movs	r6, r1
1001104e:	40d6      	lsrs	r6, r2
10011050:	4642      	mov	r2, r8
10011052:	4316      	orrs	r6, r2
10011054:	464a      	mov	r2, r9
10011056:	4091      	lsls	r1, r2
10011058:	1e4a      	subs	r2, r1, #1
1001105a:	4191      	sbcs	r1, r2
1001105c:	0002      	movs	r2, r0
1001105e:	4660      	mov	r0, ip
10011060:	4331      	orrs	r1, r6
10011062:	40c2      	lsrs	r2, r0
10011064:	e6e4      	b.n	10010e30 <__aeabi_dsub+0x1d0>
10011066:	003c      	movs	r4, r7
10011068:	432c      	orrs	r4, r5
1001106a:	d05a      	beq.n	10011122 <__aeabi_dsub+0x4c2>
1001106c:	43f4      	mvns	r4, r6
1001106e:	46a1      	mov	r9, r4
10011070:	2c00      	cmp	r4, #0
10011072:	d152      	bne.n	1001111a <__aeabi_dsub+0x4ba>
10011074:	1b4d      	subs	r5, r1, r5
10011076:	42a9      	cmp	r1, r5
10011078:	4189      	sbcs	r1, r1
1001107a:	1bc7      	subs	r7, r0, r7
1001107c:	4249      	negs	r1, r1
1001107e:	1a7f      	subs	r7, r7, r1
10011080:	0014      	movs	r4, r2
10011082:	469a      	mov	sl, r3
10011084:	e675      	b.n	10010d72 <__aeabi_dsub+0x112>
10011086:	4a9e      	ldr	r2, [pc, #632]	; (10011300 <__aeabi_dsub+0x6a0>)
10011088:	4294      	cmp	r4, r2
1001108a:	d000      	beq.n	1001108e <__aeabi_dsub+0x42e>
1001108c:	e6c7      	b.n	10010e1e <__aeabi_dsub+0x1be>
1001108e:	e613      	b.n	10010cb8 <__aeabi_dsub+0x58>
10011090:	2200      	movs	r2, #0
10011092:	e77f      	b.n	10010f94 <__aeabi_dsub+0x334>
10011094:	2000      	movs	r0, #0
10011096:	e78f      	b.n	10010fb8 <__aeabi_dsub+0x358>
10011098:	2c00      	cmp	r4, #0
1001109a:	d000      	beq.n	1001109e <__aeabi_dsub+0x43e>
1001109c:	e0c8      	b.n	10011230 <__aeabi_dsub+0x5d0>
1001109e:	003b      	movs	r3, r7
100110a0:	432b      	orrs	r3, r5
100110a2:	d100      	bne.n	100110a6 <__aeabi_dsub+0x446>
100110a4:	e10f      	b.n	100112c6 <__aeabi_dsub+0x666>
100110a6:	0003      	movs	r3, r0
100110a8:	430b      	orrs	r3, r1
100110aa:	d100      	bne.n	100110ae <__aeabi_dsub+0x44e>
100110ac:	e604      	b.n	10010cb8 <__aeabi_dsub+0x58>
100110ae:	1869      	adds	r1, r5, r1
100110b0:	42a9      	cmp	r1, r5
100110b2:	419b      	sbcs	r3, r3
100110b4:	183f      	adds	r7, r7, r0
100110b6:	425b      	negs	r3, r3
100110b8:	19df      	adds	r7, r3, r7
100110ba:	023b      	lsls	r3, r7, #8
100110bc:	d400      	bmi.n	100110c0 <__aeabi_dsub+0x460>
100110be:	e11a      	b.n	100112f6 <__aeabi_dsub+0x696>
100110c0:	4b90      	ldr	r3, [pc, #576]	; (10011304 <__aeabi_dsub+0x6a4>)
100110c2:	000d      	movs	r5, r1
100110c4:	401f      	ands	r7, r3
100110c6:	4664      	mov	r4, ip
100110c8:	e5f6      	b.n	10010cb8 <__aeabi_dsub+0x58>
100110ca:	469a      	mov	sl, r3
100110cc:	e689      	b.n	10010de2 <__aeabi_dsub+0x182>
100110ce:	003a      	movs	r2, r7
100110d0:	432a      	orrs	r2, r5
100110d2:	2c00      	cmp	r4, #0
100110d4:	d15c      	bne.n	10011190 <__aeabi_dsub+0x530>
100110d6:	2a00      	cmp	r2, #0
100110d8:	d175      	bne.n	100111c6 <__aeabi_dsub+0x566>
100110da:	0002      	movs	r2, r0
100110dc:	430a      	orrs	r2, r1
100110de:	d100      	bne.n	100110e2 <__aeabi_dsub+0x482>
100110e0:	e0ca      	b.n	10011278 <__aeabi_dsub+0x618>
100110e2:	0007      	movs	r7, r0
100110e4:	000d      	movs	r5, r1
100110e6:	469a      	mov	sl, r3
100110e8:	e5e6      	b.n	10010cb8 <__aeabi_dsub+0x58>
100110ea:	4664      	mov	r4, ip
100110ec:	2200      	movs	r2, #0
100110ee:	2500      	movs	r5, #0
100110f0:	e681      	b.n	10010df6 <__aeabi_dsub+0x196>
100110f2:	4662      	mov	r2, ip
100110f4:	0006      	movs	r6, r0
100110f6:	3a20      	subs	r2, #32
100110f8:	40d6      	lsrs	r6, r2
100110fa:	4662      	mov	r2, ip
100110fc:	46b0      	mov	r8, r6
100110fe:	2a20      	cmp	r2, #32
10011100:	d100      	bne.n	10011104 <__aeabi_dsub+0x4a4>
10011102:	e0b7      	b.n	10011274 <__aeabi_dsub+0x614>
10011104:	2240      	movs	r2, #64	; 0x40
10011106:	4666      	mov	r6, ip
10011108:	1b92      	subs	r2, r2, r6
1001110a:	4090      	lsls	r0, r2
1001110c:	4301      	orrs	r1, r0
1001110e:	4642      	mov	r2, r8
10011110:	1e48      	subs	r0, r1, #1
10011112:	4181      	sbcs	r1, r0
10011114:	4311      	orrs	r1, r2
10011116:	2200      	movs	r2, #0
10011118:	e68a      	b.n	10010e30 <__aeabi_dsub+0x1d0>
1001111a:	4c79      	ldr	r4, [pc, #484]	; (10011300 <__aeabi_dsub+0x6a0>)
1001111c:	42a2      	cmp	r2, r4
1001111e:	d000      	beq.n	10011122 <__aeabi_dsub+0x4c2>
10011120:	e761      	b.n	10010fe6 <__aeabi_dsub+0x386>
10011122:	0007      	movs	r7, r0
10011124:	000d      	movs	r5, r1
10011126:	0014      	movs	r4, r2
10011128:	469a      	mov	sl, r3
1001112a:	e5c5      	b.n	10010cb8 <__aeabi_dsub+0x58>
1001112c:	2c00      	cmp	r4, #0
1001112e:	d141      	bne.n	100111b4 <__aeabi_dsub+0x554>
10011130:	003c      	movs	r4, r7
10011132:	432c      	orrs	r4, r5
10011134:	d078      	beq.n	10011228 <__aeabi_dsub+0x5c8>
10011136:	43f4      	mvns	r4, r6
10011138:	46a1      	mov	r9, r4
1001113a:	2c00      	cmp	r4, #0
1001113c:	d020      	beq.n	10011180 <__aeabi_dsub+0x520>
1001113e:	4c70      	ldr	r4, [pc, #448]	; (10011300 <__aeabi_dsub+0x6a0>)
10011140:	42a2      	cmp	r2, r4
10011142:	d071      	beq.n	10011228 <__aeabi_dsub+0x5c8>
10011144:	464c      	mov	r4, r9
10011146:	2c38      	cmp	r4, #56	; 0x38
10011148:	dd00      	ble.n	1001114c <__aeabi_dsub+0x4ec>
1001114a:	e0b2      	b.n	100112b2 <__aeabi_dsub+0x652>
1001114c:	2c1f      	cmp	r4, #31
1001114e:	dd00      	ble.n	10011152 <__aeabi_dsub+0x4f2>
10011150:	e0bc      	b.n	100112cc <__aeabi_dsub+0x66c>
10011152:	2620      	movs	r6, #32
10011154:	1b34      	subs	r4, r6, r4
10011156:	46a2      	mov	sl, r4
10011158:	003c      	movs	r4, r7
1001115a:	4656      	mov	r6, sl
1001115c:	40b4      	lsls	r4, r6
1001115e:	464e      	mov	r6, r9
10011160:	46a0      	mov	r8, r4
10011162:	002c      	movs	r4, r5
10011164:	40f4      	lsrs	r4, r6
10011166:	46a4      	mov	ip, r4
10011168:	4644      	mov	r4, r8
1001116a:	4666      	mov	r6, ip
1001116c:	4334      	orrs	r4, r6
1001116e:	46a4      	mov	ip, r4
10011170:	4654      	mov	r4, sl
10011172:	40a5      	lsls	r5, r4
10011174:	4664      	mov	r4, ip
10011176:	1e6e      	subs	r6, r5, #1
10011178:	41b5      	sbcs	r5, r6
1001117a:	4325      	orrs	r5, r4
1001117c:	464c      	mov	r4, r9
1001117e:	40e7      	lsrs	r7, r4
10011180:	186d      	adds	r5, r5, r1
10011182:	428d      	cmp	r5, r1
10011184:	4189      	sbcs	r1, r1
10011186:	183f      	adds	r7, r7, r0
10011188:	4249      	negs	r1, r1
1001118a:	19cf      	adds	r7, r1, r7
1001118c:	0014      	movs	r4, r2
1001118e:	e656      	b.n	10010e3e <__aeabi_dsub+0x1de>
10011190:	2a00      	cmp	r2, #0
10011192:	d12f      	bne.n	100111f4 <__aeabi_dsub+0x594>
10011194:	0002      	movs	r2, r0
10011196:	430a      	orrs	r2, r1
10011198:	d100      	bne.n	1001119c <__aeabi_dsub+0x53c>
1001119a:	e084      	b.n	100112a6 <__aeabi_dsub+0x646>
1001119c:	0007      	movs	r7, r0
1001119e:	000d      	movs	r5, r1
100111a0:	469a      	mov	sl, r3
100111a2:	4c57      	ldr	r4, [pc, #348]	; (10011300 <__aeabi_dsub+0x6a0>)
100111a4:	e588      	b.n	10010cb8 <__aeabi_dsub+0x58>
100111a6:	433d      	orrs	r5, r7
100111a8:	1e6f      	subs	r7, r5, #1
100111aa:	41bd      	sbcs	r5, r7
100111ac:	b2ec      	uxtb	r4, r5
100111ae:	2700      	movs	r7, #0
100111b0:	1b0d      	subs	r5, r1, r4
100111b2:	e760      	b.n	10011076 <__aeabi_dsub+0x416>
100111b4:	4c52      	ldr	r4, [pc, #328]	; (10011300 <__aeabi_dsub+0x6a0>)
100111b6:	42a2      	cmp	r2, r4
100111b8:	d036      	beq.n	10011228 <__aeabi_dsub+0x5c8>
100111ba:	4274      	negs	r4, r6
100111bc:	2680      	movs	r6, #128	; 0x80
100111be:	0436      	lsls	r6, r6, #16
100111c0:	46a1      	mov	r9, r4
100111c2:	4337      	orrs	r7, r6
100111c4:	e7be      	b.n	10011144 <__aeabi_dsub+0x4e4>
100111c6:	0002      	movs	r2, r0
100111c8:	430a      	orrs	r2, r1
100111ca:	d100      	bne.n	100111ce <__aeabi_dsub+0x56e>
100111cc:	e574      	b.n	10010cb8 <__aeabi_dsub+0x58>
100111ce:	1a6a      	subs	r2, r5, r1
100111d0:	4690      	mov	r8, r2
100111d2:	4545      	cmp	r5, r8
100111d4:	41b6      	sbcs	r6, r6
100111d6:	1a3a      	subs	r2, r7, r0
100111d8:	4276      	negs	r6, r6
100111da:	1b92      	subs	r2, r2, r6
100111dc:	4694      	mov	ip, r2
100111de:	0212      	lsls	r2, r2, #8
100111e0:	d400      	bmi.n	100111e4 <__aeabi_dsub+0x584>
100111e2:	e5f7      	b.n	10010dd4 <__aeabi_dsub+0x174>
100111e4:	1b4d      	subs	r5, r1, r5
100111e6:	42a9      	cmp	r1, r5
100111e8:	4189      	sbcs	r1, r1
100111ea:	1bc7      	subs	r7, r0, r7
100111ec:	4249      	negs	r1, r1
100111ee:	1a7f      	subs	r7, r7, r1
100111f0:	469a      	mov	sl, r3
100111f2:	e561      	b.n	10010cb8 <__aeabi_dsub+0x58>
100111f4:	0002      	movs	r2, r0
100111f6:	430a      	orrs	r2, r1
100111f8:	d03a      	beq.n	10011270 <__aeabi_dsub+0x610>
100111fa:	08ed      	lsrs	r5, r5, #3
100111fc:	077c      	lsls	r4, r7, #29
100111fe:	432c      	orrs	r4, r5
10011200:	2580      	movs	r5, #128	; 0x80
10011202:	08fa      	lsrs	r2, r7, #3
10011204:	032d      	lsls	r5, r5, #12
10011206:	422a      	tst	r2, r5
10011208:	d008      	beq.n	1001121c <__aeabi_dsub+0x5bc>
1001120a:	08c7      	lsrs	r7, r0, #3
1001120c:	422f      	tst	r7, r5
1001120e:	d105      	bne.n	1001121c <__aeabi_dsub+0x5bc>
10011210:	0745      	lsls	r5, r0, #29
10011212:	002c      	movs	r4, r5
10011214:	003a      	movs	r2, r7
10011216:	469a      	mov	sl, r3
10011218:	08c9      	lsrs	r1, r1, #3
1001121a:	430c      	orrs	r4, r1
1001121c:	0f67      	lsrs	r7, r4, #29
1001121e:	00d2      	lsls	r2, r2, #3
10011220:	00e5      	lsls	r5, r4, #3
10011222:	4317      	orrs	r7, r2
10011224:	4c36      	ldr	r4, [pc, #216]	; (10011300 <__aeabi_dsub+0x6a0>)
10011226:	e547      	b.n	10010cb8 <__aeabi_dsub+0x58>
10011228:	0007      	movs	r7, r0
1001122a:	000d      	movs	r5, r1
1001122c:	0014      	movs	r4, r2
1001122e:	e543      	b.n	10010cb8 <__aeabi_dsub+0x58>
10011230:	003a      	movs	r2, r7
10011232:	432a      	orrs	r2, r5
10011234:	d043      	beq.n	100112be <__aeabi_dsub+0x65e>
10011236:	0002      	movs	r2, r0
10011238:	430a      	orrs	r2, r1
1001123a:	d019      	beq.n	10011270 <__aeabi_dsub+0x610>
1001123c:	08ed      	lsrs	r5, r5, #3
1001123e:	077c      	lsls	r4, r7, #29
10011240:	432c      	orrs	r4, r5
10011242:	2580      	movs	r5, #128	; 0x80
10011244:	08fa      	lsrs	r2, r7, #3
10011246:	032d      	lsls	r5, r5, #12
10011248:	422a      	tst	r2, r5
1001124a:	d007      	beq.n	1001125c <__aeabi_dsub+0x5fc>
1001124c:	08c6      	lsrs	r6, r0, #3
1001124e:	422e      	tst	r6, r5
10011250:	d104      	bne.n	1001125c <__aeabi_dsub+0x5fc>
10011252:	0747      	lsls	r7, r0, #29
10011254:	003c      	movs	r4, r7
10011256:	0032      	movs	r2, r6
10011258:	08c9      	lsrs	r1, r1, #3
1001125a:	430c      	orrs	r4, r1
1001125c:	00d7      	lsls	r7, r2, #3
1001125e:	0f62      	lsrs	r2, r4, #29
10011260:	00e5      	lsls	r5, r4, #3
10011262:	4317      	orrs	r7, r2
10011264:	469a      	mov	sl, r3
10011266:	4c26      	ldr	r4, [pc, #152]	; (10011300 <__aeabi_dsub+0x6a0>)
10011268:	e526      	b.n	10010cb8 <__aeabi_dsub+0x58>
1001126a:	2200      	movs	r2, #0
1001126c:	2500      	movs	r5, #0
1001126e:	e544      	b.n	10010cfa <__aeabi_dsub+0x9a>
10011270:	4c23      	ldr	r4, [pc, #140]	; (10011300 <__aeabi_dsub+0x6a0>)
10011272:	e521      	b.n	10010cb8 <__aeabi_dsub+0x58>
10011274:	2000      	movs	r0, #0
10011276:	e749      	b.n	1001110c <__aeabi_dsub+0x4ac>
10011278:	2300      	movs	r3, #0
1001127a:	2500      	movs	r5, #0
1001127c:	e5bb      	b.n	10010df6 <__aeabi_dsub+0x196>
1001127e:	464c      	mov	r4, r9
10011280:	003e      	movs	r6, r7
10011282:	3c20      	subs	r4, #32
10011284:	40e6      	lsrs	r6, r4
10011286:	464c      	mov	r4, r9
10011288:	46b4      	mov	ip, r6
1001128a:	2c20      	cmp	r4, #32
1001128c:	d031      	beq.n	100112f2 <__aeabi_dsub+0x692>
1001128e:	2440      	movs	r4, #64	; 0x40
10011290:	464e      	mov	r6, r9
10011292:	1ba6      	subs	r6, r4, r6
10011294:	40b7      	lsls	r7, r6
10011296:	433d      	orrs	r5, r7
10011298:	1e6c      	subs	r4, r5, #1
1001129a:	41a5      	sbcs	r5, r4
1001129c:	4664      	mov	r4, ip
1001129e:	432c      	orrs	r4, r5
100112a0:	2700      	movs	r7, #0
100112a2:	1b0d      	subs	r5, r1, r4
100112a4:	e6e7      	b.n	10011076 <__aeabi_dsub+0x416>
100112a6:	2280      	movs	r2, #128	; 0x80
100112a8:	2300      	movs	r3, #0
100112aa:	0312      	lsls	r2, r2, #12
100112ac:	4c14      	ldr	r4, [pc, #80]	; (10011300 <__aeabi_dsub+0x6a0>)
100112ae:	2500      	movs	r5, #0
100112b0:	e5a1      	b.n	10010df6 <__aeabi_dsub+0x196>
100112b2:	433d      	orrs	r5, r7
100112b4:	1e6f      	subs	r7, r5, #1
100112b6:	41bd      	sbcs	r5, r7
100112b8:	2700      	movs	r7, #0
100112ba:	b2ed      	uxtb	r5, r5
100112bc:	e760      	b.n	10011180 <__aeabi_dsub+0x520>
100112be:	0007      	movs	r7, r0
100112c0:	000d      	movs	r5, r1
100112c2:	4c0f      	ldr	r4, [pc, #60]	; (10011300 <__aeabi_dsub+0x6a0>)
100112c4:	e4f8      	b.n	10010cb8 <__aeabi_dsub+0x58>
100112c6:	0007      	movs	r7, r0
100112c8:	000d      	movs	r5, r1
100112ca:	e4f5      	b.n	10010cb8 <__aeabi_dsub+0x58>
100112cc:	464e      	mov	r6, r9
100112ce:	003c      	movs	r4, r7
100112d0:	3e20      	subs	r6, #32
100112d2:	40f4      	lsrs	r4, r6
100112d4:	46a0      	mov	r8, r4
100112d6:	464c      	mov	r4, r9
100112d8:	2c20      	cmp	r4, #32
100112da:	d00e      	beq.n	100112fa <__aeabi_dsub+0x69a>
100112dc:	2440      	movs	r4, #64	; 0x40
100112de:	464e      	mov	r6, r9
100112e0:	1ba4      	subs	r4, r4, r6
100112e2:	40a7      	lsls	r7, r4
100112e4:	433d      	orrs	r5, r7
100112e6:	1e6f      	subs	r7, r5, #1
100112e8:	41bd      	sbcs	r5, r7
100112ea:	4644      	mov	r4, r8
100112ec:	2700      	movs	r7, #0
100112ee:	4325      	orrs	r5, r4
100112f0:	e746      	b.n	10011180 <__aeabi_dsub+0x520>
100112f2:	2700      	movs	r7, #0
100112f4:	e7cf      	b.n	10011296 <__aeabi_dsub+0x636>
100112f6:	000d      	movs	r5, r1
100112f8:	e573      	b.n	10010de2 <__aeabi_dsub+0x182>
100112fa:	2700      	movs	r7, #0
100112fc:	e7f2      	b.n	100112e4 <__aeabi_dsub+0x684>
100112fe:	46c0      	nop			; (mov r8, r8)
10011300:	000007ff 	.word	0x000007ff
10011304:	ff7fffff 	.word	0xff7fffff

10011308 <__aeabi_d2iz>:
10011308:	030b      	lsls	r3, r1, #12
1001130a:	b530      	push	{r4, r5, lr}
1001130c:	4d13      	ldr	r5, [pc, #76]	; (1001135c <__aeabi_d2iz+0x54>)
1001130e:	0b1a      	lsrs	r2, r3, #12
10011310:	004b      	lsls	r3, r1, #1
10011312:	0d5b      	lsrs	r3, r3, #21
10011314:	0fc9      	lsrs	r1, r1, #31
10011316:	2400      	movs	r4, #0
10011318:	42ab      	cmp	r3, r5
1001131a:	dd11      	ble.n	10011340 <__aeabi_d2iz+0x38>
1001131c:	4c10      	ldr	r4, [pc, #64]	; (10011360 <__aeabi_d2iz+0x58>)
1001131e:	42a3      	cmp	r3, r4
10011320:	dc10      	bgt.n	10011344 <__aeabi_d2iz+0x3c>
10011322:	2480      	movs	r4, #128	; 0x80
10011324:	0364      	lsls	r4, r4, #13
10011326:	4322      	orrs	r2, r4
10011328:	4c0e      	ldr	r4, [pc, #56]	; (10011364 <__aeabi_d2iz+0x5c>)
1001132a:	1ae4      	subs	r4, r4, r3
1001132c:	2c1f      	cmp	r4, #31
1001132e:	dd0c      	ble.n	1001134a <__aeabi_d2iz+0x42>
10011330:	480d      	ldr	r0, [pc, #52]	; (10011368 <__aeabi_d2iz+0x60>)
10011332:	1ac3      	subs	r3, r0, r3
10011334:	40da      	lsrs	r2, r3
10011336:	0013      	movs	r3, r2
10011338:	425c      	negs	r4, r3
1001133a:	2900      	cmp	r1, #0
1001133c:	d100      	bne.n	10011340 <__aeabi_d2iz+0x38>
1001133e:	001c      	movs	r4, r3
10011340:	0020      	movs	r0, r4
10011342:	bd30      	pop	{r4, r5, pc}
10011344:	4b09      	ldr	r3, [pc, #36]	; (1001136c <__aeabi_d2iz+0x64>)
10011346:	18cc      	adds	r4, r1, r3
10011348:	e7fa      	b.n	10011340 <__aeabi_d2iz+0x38>
1001134a:	40e0      	lsrs	r0, r4
1001134c:	4c08      	ldr	r4, [pc, #32]	; (10011370 <__aeabi_d2iz+0x68>)
1001134e:	46a4      	mov	ip, r4
10011350:	4463      	add	r3, ip
10011352:	409a      	lsls	r2, r3
10011354:	0013      	movs	r3, r2
10011356:	4303      	orrs	r3, r0
10011358:	e7ee      	b.n	10011338 <__aeabi_d2iz+0x30>
1001135a:	46c0      	nop			; (mov r8, r8)
1001135c:	000003fe 	.word	0x000003fe
10011360:	0000041d 	.word	0x0000041d
10011364:	00000433 	.word	0x00000433
10011368:	00000413 	.word	0x00000413
1001136c:	7fffffff 	.word	0x7fffffff
10011370:	fffffbed 	.word	0xfffffbed

10011374 <__aeabi_ui2d>:
10011374:	b570      	push	{r4, r5, r6, lr}
10011376:	1e05      	subs	r5, r0, #0
10011378:	d028      	beq.n	100113cc <__aeabi_ui2d+0x58>
1001137a:	f000 f833 	bl	100113e4 <__clzsi2>
1001137e:	4b15      	ldr	r3, [pc, #84]	; (100113d4 <__aeabi_ui2d+0x60>)
10011380:	4a15      	ldr	r2, [pc, #84]	; (100113d8 <__aeabi_ui2d+0x64>)
10011382:	1a1b      	subs	r3, r3, r0
10011384:	1ad2      	subs	r2, r2, r3
10011386:	2a1f      	cmp	r2, #31
10011388:	dd16      	ble.n	100113b8 <__aeabi_ui2d+0x44>
1001138a:	002c      	movs	r4, r5
1001138c:	4a13      	ldr	r2, [pc, #76]	; (100113dc <__aeabi_ui2d+0x68>)
1001138e:	2500      	movs	r5, #0
10011390:	1ad2      	subs	r2, r2, r3
10011392:	4094      	lsls	r4, r2
10011394:	055a      	lsls	r2, r3, #21
10011396:	0324      	lsls	r4, r4, #12
10011398:	0b24      	lsrs	r4, r4, #12
1001139a:	0d52      	lsrs	r2, r2, #21
1001139c:	2100      	movs	r1, #0
1001139e:	0324      	lsls	r4, r4, #12
100113a0:	0d0b      	lsrs	r3, r1, #20
100113a2:	0b24      	lsrs	r4, r4, #12
100113a4:	051b      	lsls	r3, r3, #20
100113a6:	4323      	orrs	r3, r4
100113a8:	4c0d      	ldr	r4, [pc, #52]	; (100113e0 <__aeabi_ui2d+0x6c>)
100113aa:	0512      	lsls	r2, r2, #20
100113ac:	4023      	ands	r3, r4
100113ae:	4313      	orrs	r3, r2
100113b0:	005b      	lsls	r3, r3, #1
100113b2:	0028      	movs	r0, r5
100113b4:	0859      	lsrs	r1, r3, #1
100113b6:	bd70      	pop	{r4, r5, r6, pc}
100113b8:	210b      	movs	r1, #11
100113ba:	002c      	movs	r4, r5
100113bc:	1a08      	subs	r0, r1, r0
100113be:	40c4      	lsrs	r4, r0
100113c0:	4095      	lsls	r5, r2
100113c2:	0324      	lsls	r4, r4, #12
100113c4:	055a      	lsls	r2, r3, #21
100113c6:	0b24      	lsrs	r4, r4, #12
100113c8:	0d52      	lsrs	r2, r2, #21
100113ca:	e7e7      	b.n	1001139c <__aeabi_ui2d+0x28>
100113cc:	2200      	movs	r2, #0
100113ce:	2400      	movs	r4, #0
100113d0:	e7e4      	b.n	1001139c <__aeabi_ui2d+0x28>
100113d2:	46c0      	nop			; (mov r8, r8)
100113d4:	0000041e 	.word	0x0000041e
100113d8:	00000433 	.word	0x00000433
100113dc:	00000413 	.word	0x00000413
100113e0:	800fffff 	.word	0x800fffff

100113e4 <__clzsi2>:
100113e4:	211c      	movs	r1, #28
100113e6:	2301      	movs	r3, #1
100113e8:	041b      	lsls	r3, r3, #16
100113ea:	4298      	cmp	r0, r3
100113ec:	d301      	bcc.n	100113f2 <__clzsi2+0xe>
100113ee:	0c00      	lsrs	r0, r0, #16
100113f0:	3910      	subs	r1, #16
100113f2:	0a1b      	lsrs	r3, r3, #8
100113f4:	4298      	cmp	r0, r3
100113f6:	d301      	bcc.n	100113fc <__clzsi2+0x18>
100113f8:	0a00      	lsrs	r0, r0, #8
100113fa:	3908      	subs	r1, #8
100113fc:	091b      	lsrs	r3, r3, #4
100113fe:	4298      	cmp	r0, r3
10011400:	d301      	bcc.n	10011406 <__clzsi2+0x22>
10011402:	0900      	lsrs	r0, r0, #4
10011404:	3904      	subs	r1, #4
10011406:	a202      	add	r2, pc, #8	; (adr r2, 10011410 <__clzsi2+0x2c>)
10011408:	5c10      	ldrb	r0, [r2, r0]
1001140a:	1840      	adds	r0, r0, r1
1001140c:	4770      	bx	lr
1001140e:	46c0      	nop			; (mov r8, r8)
10011410:	02020304 	.word	0x02020304
10011414:	01010101 	.word	0x01010101
	...

10011420 <__libc_init_array>:
10011420:	4b0e      	ldr	r3, [pc, #56]	; (1001145c <__libc_init_array+0x3c>)
10011422:	b570      	push	{r4, r5, r6, lr}
10011424:	2500      	movs	r5, #0
10011426:	001e      	movs	r6, r3
10011428:	4c0d      	ldr	r4, [pc, #52]	; (10011460 <__libc_init_array+0x40>)
1001142a:	1ae4      	subs	r4, r4, r3
1001142c:	10a4      	asrs	r4, r4, #2
1001142e:	42a5      	cmp	r5, r4
10011430:	d004      	beq.n	1001143c <__libc_init_array+0x1c>
10011432:	00ab      	lsls	r3, r5, #2
10011434:	58f3      	ldr	r3, [r6, r3]
10011436:	4798      	blx	r3
10011438:	3501      	adds	r5, #1
1001143a:	e7f8      	b.n	1001142e <__libc_init_array+0xe>
1001143c:	f002 f962 	bl	10013704 <_init>
10011440:	4b08      	ldr	r3, [pc, #32]	; (10011464 <__libc_init_array+0x44>)
10011442:	2500      	movs	r5, #0
10011444:	001e      	movs	r6, r3
10011446:	4c08      	ldr	r4, [pc, #32]	; (10011468 <__libc_init_array+0x48>)
10011448:	1ae4      	subs	r4, r4, r3
1001144a:	10a4      	asrs	r4, r4, #2
1001144c:	42a5      	cmp	r5, r4
1001144e:	d004      	beq.n	1001145a <__libc_init_array+0x3a>
10011450:	00ab      	lsls	r3, r5, #2
10011452:	58f3      	ldr	r3, [r6, r3]
10011454:	4798      	blx	r3
10011456:	3501      	adds	r5, #1
10011458:	e7f8      	b.n	1001144c <__libc_init_array+0x2c>
1001145a:	bd70      	pop	{r4, r5, r6, pc}
1001145c:	10013710 	.word	0x10013710
10011460:	10013710 	.word	0x10013710
10011464:	10013710 	.word	0x10013710
10011468:	10013714 	.word	0x10013714

1001146c <malloc>:
1001146c:	b510      	push	{r4, lr}
1001146e:	4b03      	ldr	r3, [pc, #12]	; (1001147c <malloc+0x10>)
10011470:	0001      	movs	r1, r0
10011472:	6818      	ldr	r0, [r3, #0]
10011474:	f000 f86a 	bl	1001154c <_malloc_r>
10011478:	bd10      	pop	{r4, pc}
1001147a:	46c0      	nop			; (mov r8, r8)
1001147c:	100137cc 	.word	0x100137cc

10011480 <memcmp>:
10011480:	b530      	push	{r4, r5, lr}
10011482:	2400      	movs	r4, #0
10011484:	42a2      	cmp	r2, r4
10011486:	d008      	beq.n	1001149a <memcmp+0x1a>
10011488:	5d03      	ldrb	r3, [r0, r4]
1001148a:	1c65      	adds	r5, r4, #1
1001148c:	5d0c      	ldrb	r4, [r1, r4]
1001148e:	42a3      	cmp	r3, r4
10011490:	d001      	beq.n	10011496 <memcmp+0x16>
10011492:	1b18      	subs	r0, r3, r4
10011494:	e002      	b.n	1001149c <memcmp+0x1c>
10011496:	002c      	movs	r4, r5
10011498:	e7f4      	b.n	10011484 <memcmp+0x4>
1001149a:	2000      	movs	r0, #0
1001149c:	bd30      	pop	{r4, r5, pc}

1001149e <memcpy>:
1001149e:	2300      	movs	r3, #0
100114a0:	b510      	push	{r4, lr}
100114a2:	429a      	cmp	r2, r3
100114a4:	d003      	beq.n	100114ae <memcpy+0x10>
100114a6:	5ccc      	ldrb	r4, [r1, r3]
100114a8:	54c4      	strb	r4, [r0, r3]
100114aa:	3301      	adds	r3, #1
100114ac:	e7f9      	b.n	100114a2 <memcpy+0x4>
100114ae:	bd10      	pop	{r4, pc}

100114b0 <memset>:
100114b0:	0003      	movs	r3, r0
100114b2:	1882      	adds	r2, r0, r2
100114b4:	4293      	cmp	r3, r2
100114b6:	d002      	beq.n	100114be <memset+0xe>
100114b8:	7019      	strb	r1, [r3, #0]
100114ba:	3301      	adds	r3, #1
100114bc:	e7fa      	b.n	100114b4 <memset+0x4>
100114be:	4770      	bx	lr

100114c0 <_free_r>:
100114c0:	b530      	push	{r4, r5, lr}
100114c2:	2900      	cmp	r1, #0
100114c4:	d03e      	beq.n	10011544 <_free_r+0x84>
100114c6:	3904      	subs	r1, #4
100114c8:	680b      	ldr	r3, [r1, #0]
100114ca:	2b00      	cmp	r3, #0
100114cc:	da00      	bge.n	100114d0 <_free_r+0x10>
100114ce:	18c9      	adds	r1, r1, r3
100114d0:	4a1d      	ldr	r2, [pc, #116]	; (10011548 <_free_r+0x88>)
100114d2:	6813      	ldr	r3, [r2, #0]
100114d4:	0014      	movs	r4, r2
100114d6:	2b00      	cmp	r3, #0
100114d8:	d102      	bne.n	100114e0 <_free_r+0x20>
100114da:	604b      	str	r3, [r1, #4]
100114dc:	6011      	str	r1, [r2, #0]
100114de:	e031      	b.n	10011544 <_free_r+0x84>
100114e0:	428b      	cmp	r3, r1
100114e2:	d90d      	bls.n	10011500 <_free_r+0x40>
100114e4:	680a      	ldr	r2, [r1, #0]
100114e6:	1888      	adds	r0, r1, r2
100114e8:	4283      	cmp	r3, r0
100114ea:	d103      	bne.n	100114f4 <_free_r+0x34>
100114ec:	6818      	ldr	r0, [r3, #0]
100114ee:	685b      	ldr	r3, [r3, #4]
100114f0:	1882      	adds	r2, r0, r2
100114f2:	600a      	str	r2, [r1, #0]
100114f4:	604b      	str	r3, [r1, #4]
100114f6:	6021      	str	r1, [r4, #0]
100114f8:	e024      	b.n	10011544 <_free_r+0x84>
100114fa:	428a      	cmp	r2, r1
100114fc:	d803      	bhi.n	10011506 <_free_r+0x46>
100114fe:	0013      	movs	r3, r2
10011500:	685a      	ldr	r2, [r3, #4]
10011502:	2a00      	cmp	r2, #0
10011504:	d1f9      	bne.n	100114fa <_free_r+0x3a>
10011506:	681d      	ldr	r5, [r3, #0]
10011508:	195c      	adds	r4, r3, r5
1001150a:	428c      	cmp	r4, r1
1001150c:	d10b      	bne.n	10011526 <_free_r+0x66>
1001150e:	6809      	ldr	r1, [r1, #0]
10011510:	1869      	adds	r1, r5, r1
10011512:	1858      	adds	r0, r3, r1
10011514:	6019      	str	r1, [r3, #0]
10011516:	4282      	cmp	r2, r0
10011518:	d114      	bne.n	10011544 <_free_r+0x84>
1001151a:	6810      	ldr	r0, [r2, #0]
1001151c:	6852      	ldr	r2, [r2, #4]
1001151e:	1841      	adds	r1, r0, r1
10011520:	6019      	str	r1, [r3, #0]
10011522:	605a      	str	r2, [r3, #4]
10011524:	e00e      	b.n	10011544 <_free_r+0x84>
10011526:	428c      	cmp	r4, r1
10011528:	d902      	bls.n	10011530 <_free_r+0x70>
1001152a:	230c      	movs	r3, #12
1001152c:	6003      	str	r3, [r0, #0]
1001152e:	e009      	b.n	10011544 <_free_r+0x84>
10011530:	6808      	ldr	r0, [r1, #0]
10011532:	180c      	adds	r4, r1, r0
10011534:	42a2      	cmp	r2, r4
10011536:	d103      	bne.n	10011540 <_free_r+0x80>
10011538:	6814      	ldr	r4, [r2, #0]
1001153a:	6852      	ldr	r2, [r2, #4]
1001153c:	1820      	adds	r0, r4, r0
1001153e:	6008      	str	r0, [r1, #0]
10011540:	604a      	str	r2, [r1, #4]
10011542:	6059      	str	r1, [r3, #4]
10011544:	bd30      	pop	{r4, r5, pc}
10011546:	46c0      	nop			; (mov r8, r8)
10011548:	10014de0 	.word	0x10014de0

1001154c <_malloc_r>:
1001154c:	2303      	movs	r3, #3
1001154e:	b570      	push	{r4, r5, r6, lr}
10011550:	1ccd      	adds	r5, r1, #3
10011552:	439d      	bics	r5, r3
10011554:	3508      	adds	r5, #8
10011556:	0006      	movs	r6, r0
10011558:	2d0c      	cmp	r5, #12
1001155a:	d201      	bcs.n	10011560 <_malloc_r+0x14>
1001155c:	250c      	movs	r5, #12
1001155e:	e005      	b.n	1001156c <_malloc_r+0x20>
10011560:	2d00      	cmp	r5, #0
10011562:	da03      	bge.n	1001156c <_malloc_r+0x20>
10011564:	230c      	movs	r3, #12
10011566:	2000      	movs	r0, #0
10011568:	6033      	str	r3, [r6, #0]
1001156a:	e040      	b.n	100115ee <_malloc_r+0xa2>
1001156c:	42a9      	cmp	r1, r5
1001156e:	d8f9      	bhi.n	10011564 <_malloc_r+0x18>
10011570:	4b1f      	ldr	r3, [pc, #124]	; (100115f0 <_malloc_r+0xa4>)
10011572:	681c      	ldr	r4, [r3, #0]
10011574:	001a      	movs	r2, r3
10011576:	0021      	movs	r1, r4
10011578:	2900      	cmp	r1, #0
1001157a:	d013      	beq.n	100115a4 <_malloc_r+0x58>
1001157c:	680b      	ldr	r3, [r1, #0]
1001157e:	1b5b      	subs	r3, r3, r5
10011580:	d40d      	bmi.n	1001159e <_malloc_r+0x52>
10011582:	2b0b      	cmp	r3, #11
10011584:	d902      	bls.n	1001158c <_malloc_r+0x40>
10011586:	600b      	str	r3, [r1, #0]
10011588:	18cc      	adds	r4, r1, r3
1001158a:	e01e      	b.n	100115ca <_malloc_r+0x7e>
1001158c:	428c      	cmp	r4, r1
1001158e:	d102      	bne.n	10011596 <_malloc_r+0x4a>
10011590:	6863      	ldr	r3, [r4, #4]
10011592:	6013      	str	r3, [r2, #0]
10011594:	e01a      	b.n	100115cc <_malloc_r+0x80>
10011596:	684b      	ldr	r3, [r1, #4]
10011598:	6063      	str	r3, [r4, #4]
1001159a:	000c      	movs	r4, r1
1001159c:	e016      	b.n	100115cc <_malloc_r+0x80>
1001159e:	000c      	movs	r4, r1
100115a0:	6849      	ldr	r1, [r1, #4]
100115a2:	e7e9      	b.n	10011578 <_malloc_r+0x2c>
100115a4:	4c13      	ldr	r4, [pc, #76]	; (100115f4 <_malloc_r+0xa8>)
100115a6:	6823      	ldr	r3, [r4, #0]
100115a8:	2b00      	cmp	r3, #0
100115aa:	d103      	bne.n	100115b4 <_malloc_r+0x68>
100115ac:	0030      	movs	r0, r6
100115ae:	f000 f8f9 	bl	100117a4 <_sbrk_r>
100115b2:	6020      	str	r0, [r4, #0]
100115b4:	0029      	movs	r1, r5
100115b6:	0030      	movs	r0, r6
100115b8:	f000 f8f4 	bl	100117a4 <_sbrk_r>
100115bc:	1c43      	adds	r3, r0, #1
100115be:	d0d1      	beq.n	10011564 <_malloc_r+0x18>
100115c0:	2303      	movs	r3, #3
100115c2:	1cc4      	adds	r4, r0, #3
100115c4:	439c      	bics	r4, r3
100115c6:	42a0      	cmp	r0, r4
100115c8:	d10a      	bne.n	100115e0 <_malloc_r+0x94>
100115ca:	6025      	str	r5, [r4, #0]
100115cc:	0020      	movs	r0, r4
100115ce:	2207      	movs	r2, #7
100115d0:	300b      	adds	r0, #11
100115d2:	1d23      	adds	r3, r4, #4
100115d4:	4390      	bics	r0, r2
100115d6:	1ac3      	subs	r3, r0, r3
100115d8:	d009      	beq.n	100115ee <_malloc_r+0xa2>
100115da:	425a      	negs	r2, r3
100115dc:	50e2      	str	r2, [r4, r3]
100115de:	e006      	b.n	100115ee <_malloc_r+0xa2>
100115e0:	1a21      	subs	r1, r4, r0
100115e2:	0030      	movs	r0, r6
100115e4:	f000 f8de 	bl	100117a4 <_sbrk_r>
100115e8:	1c43      	adds	r3, r0, #1
100115ea:	d1ee      	bne.n	100115ca <_malloc_r+0x7e>
100115ec:	e7ba      	b.n	10011564 <_malloc_r+0x18>
100115ee:	bd70      	pop	{r4, r5, r6, pc}
100115f0:	10014de0 	.word	0x10014de0
100115f4:	10014ddc 	.word	0x10014ddc

100115f8 <iprintf>:
100115f8:	b40f      	push	{r0, r1, r2, r3}
100115fa:	4b0b      	ldr	r3, [pc, #44]	; (10011628 <iprintf+0x30>)
100115fc:	b513      	push	{r0, r1, r4, lr}
100115fe:	681c      	ldr	r4, [r3, #0]
10011600:	2c00      	cmp	r4, #0
10011602:	d005      	beq.n	10011610 <iprintf+0x18>
10011604:	69a3      	ldr	r3, [r4, #24]
10011606:	2b00      	cmp	r3, #0
10011608:	d102      	bne.n	10011610 <iprintf+0x18>
1001160a:	0020      	movs	r0, r4
1001160c:	f000 fb58 	bl	10011cc0 <__sinit>
10011610:	ab05      	add	r3, sp, #20
10011612:	9a04      	ldr	r2, [sp, #16]
10011614:	68a1      	ldr	r1, [r4, #8]
10011616:	0020      	movs	r0, r4
10011618:	9301      	str	r3, [sp, #4]
1001161a:	f000 fc71 	bl	10011f00 <_vfiprintf_r>
1001161e:	bc16      	pop	{r1, r2, r4}
10011620:	bc08      	pop	{r3}
10011622:	b004      	add	sp, #16
10011624:	4718      	bx	r3
10011626:	46c0      	nop			; (mov r8, r8)
10011628:	100137cc 	.word	0x100137cc

1001162c <putchar>:
1001162c:	4b08      	ldr	r3, [pc, #32]	; (10011650 <putchar+0x24>)
1001162e:	b570      	push	{r4, r5, r6, lr}
10011630:	681c      	ldr	r4, [r3, #0]
10011632:	0005      	movs	r5, r0
10011634:	2c00      	cmp	r4, #0
10011636:	d005      	beq.n	10011644 <putchar+0x18>
10011638:	69a3      	ldr	r3, [r4, #24]
1001163a:	2b00      	cmp	r3, #0
1001163c:	d102      	bne.n	10011644 <putchar+0x18>
1001163e:	0020      	movs	r0, r4
10011640:	f000 fb3e 	bl	10011cc0 <__sinit>
10011644:	0029      	movs	r1, r5
10011646:	68a2      	ldr	r2, [r4, #8]
10011648:	0020      	movs	r0, r4
1001164a:	f000 ff05 	bl	10012458 <_putc_r>
1001164e:	bd70      	pop	{r4, r5, r6, pc}
10011650:	100137cc 	.word	0x100137cc

10011654 <_puts_r>:
10011654:	b570      	push	{r4, r5, r6, lr}
10011656:	0005      	movs	r5, r0
10011658:	000e      	movs	r6, r1
1001165a:	2800      	cmp	r0, #0
1001165c:	d004      	beq.n	10011668 <_puts_r+0x14>
1001165e:	6983      	ldr	r3, [r0, #24]
10011660:	2b00      	cmp	r3, #0
10011662:	d101      	bne.n	10011668 <_puts_r+0x14>
10011664:	f000 fb2c 	bl	10011cc0 <__sinit>
10011668:	69ab      	ldr	r3, [r5, #24]
1001166a:	68ac      	ldr	r4, [r5, #8]
1001166c:	2b00      	cmp	r3, #0
1001166e:	d102      	bne.n	10011676 <_puts_r+0x22>
10011670:	0028      	movs	r0, r5
10011672:	f000 fb25 	bl	10011cc0 <__sinit>
10011676:	4b25      	ldr	r3, [pc, #148]	; (1001170c <_puts_r+0xb8>)
10011678:	429c      	cmp	r4, r3
1001167a:	d101      	bne.n	10011680 <_puts_r+0x2c>
1001167c:	686c      	ldr	r4, [r5, #4]
1001167e:	e008      	b.n	10011692 <_puts_r+0x3e>
10011680:	4b23      	ldr	r3, [pc, #140]	; (10011710 <_puts_r+0xbc>)
10011682:	429c      	cmp	r4, r3
10011684:	d101      	bne.n	1001168a <_puts_r+0x36>
10011686:	68ac      	ldr	r4, [r5, #8]
10011688:	e003      	b.n	10011692 <_puts_r+0x3e>
1001168a:	4b22      	ldr	r3, [pc, #136]	; (10011714 <_puts_r+0xc0>)
1001168c:	429c      	cmp	r4, r3
1001168e:	d100      	bne.n	10011692 <_puts_r+0x3e>
10011690:	68ec      	ldr	r4, [r5, #12]
10011692:	89a3      	ldrh	r3, [r4, #12]
10011694:	071b      	lsls	r3, r3, #28
10011696:	d502      	bpl.n	1001169e <_puts_r+0x4a>
10011698:	6923      	ldr	r3, [r4, #16]
1001169a:	2b00      	cmp	r3, #0
1001169c:	d111      	bne.n	100116c2 <_puts_r+0x6e>
1001169e:	0021      	movs	r1, r4
100116a0:	0028      	movs	r0, r5
100116a2:	f000 f9a3 	bl	100119ec <__swsetup_r>
100116a6:	2800      	cmp	r0, #0
100116a8:	d00b      	beq.n	100116c2 <_puts_r+0x6e>
100116aa:	2001      	movs	r0, #1
100116ac:	4240      	negs	r0, r0
100116ae:	e02b      	b.n	10011708 <_puts_r+0xb4>
100116b0:	3b01      	subs	r3, #1
100116b2:	3601      	adds	r6, #1
100116b4:	60a3      	str	r3, [r4, #8]
100116b6:	2b00      	cmp	r3, #0
100116b8:	db08      	blt.n	100116cc <_puts_r+0x78>
100116ba:	6823      	ldr	r3, [r4, #0]
100116bc:	1c5a      	adds	r2, r3, #1
100116be:	6022      	str	r2, [r4, #0]
100116c0:	7019      	strb	r1, [r3, #0]
100116c2:	7831      	ldrb	r1, [r6, #0]
100116c4:	68a3      	ldr	r3, [r4, #8]
100116c6:	2900      	cmp	r1, #0
100116c8:	d1f2      	bne.n	100116b0 <_puts_r+0x5c>
100116ca:	e00b      	b.n	100116e4 <_puts_r+0x90>
100116cc:	69a2      	ldr	r2, [r4, #24]
100116ce:	4293      	cmp	r3, r2
100116d0:	db01      	blt.n	100116d6 <_puts_r+0x82>
100116d2:	290a      	cmp	r1, #10
100116d4:	d1f1      	bne.n	100116ba <_puts_r+0x66>
100116d6:	0022      	movs	r2, r4
100116d8:	0028      	movs	r0, r5
100116da:	f000 f92f 	bl	1001193c <__swbuf_r>
100116de:	1c43      	adds	r3, r0, #1
100116e0:	d1ef      	bne.n	100116c2 <_puts_r+0x6e>
100116e2:	e7e2      	b.n	100116aa <_puts_r+0x56>
100116e4:	3b01      	subs	r3, #1
100116e6:	60a3      	str	r3, [r4, #8]
100116e8:	2b00      	cmp	r3, #0
100116ea:	da08      	bge.n	100116fe <_puts_r+0xaa>
100116ec:	0022      	movs	r2, r4
100116ee:	310a      	adds	r1, #10
100116f0:	0028      	movs	r0, r5
100116f2:	f000 f923 	bl	1001193c <__swbuf_r>
100116f6:	1c43      	adds	r3, r0, #1
100116f8:	d0d7      	beq.n	100116aa <_puts_r+0x56>
100116fa:	200a      	movs	r0, #10
100116fc:	e004      	b.n	10011708 <_puts_r+0xb4>
100116fe:	200a      	movs	r0, #10
10011700:	6823      	ldr	r3, [r4, #0]
10011702:	1c5a      	adds	r2, r3, #1
10011704:	6022      	str	r2, [r4, #0]
10011706:	7018      	strb	r0, [r3, #0]
10011708:	bd70      	pop	{r4, r5, r6, pc}
1001170a:	46c0      	nop			; (mov r8, r8)
1001170c:	10013670 	.word	0x10013670
10011710:	10013690 	.word	0x10013690
10011714:	100136b0 	.word	0x100136b0

10011718 <puts>:
10011718:	b510      	push	{r4, lr}
1001171a:	4b03      	ldr	r3, [pc, #12]	; (10011728 <puts+0x10>)
1001171c:	0001      	movs	r1, r0
1001171e:	6818      	ldr	r0, [r3, #0]
10011720:	f7ff ff98 	bl	10011654 <_puts_r>
10011724:	bd10      	pop	{r4, pc}
10011726:	46c0      	nop			; (mov r8, r8)
10011728:	100137cc 	.word	0x100137cc

1001172c <rand>:
1001172c:	4b15      	ldr	r3, [pc, #84]	; (10011784 <rand+0x58>)
1001172e:	b510      	push	{r4, lr}
10011730:	681c      	ldr	r4, [r3, #0]
10011732:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10011734:	2b00      	cmp	r3, #0
10011736:	d115      	bne.n	10011764 <rand+0x38>
10011738:	2018      	movs	r0, #24
1001173a:	f7ff fe97 	bl	1001146c <malloc>
1001173e:	4b12      	ldr	r3, [pc, #72]	; (10011788 <rand+0x5c>)
10011740:	63a0      	str	r0, [r4, #56]	; 0x38
10011742:	8003      	strh	r3, [r0, #0]
10011744:	4b11      	ldr	r3, [pc, #68]	; (1001178c <rand+0x60>)
10011746:	2201      	movs	r2, #1
10011748:	8043      	strh	r3, [r0, #2]
1001174a:	4b11      	ldr	r3, [pc, #68]	; (10011790 <rand+0x64>)
1001174c:	8083      	strh	r3, [r0, #4]
1001174e:	4b11      	ldr	r3, [pc, #68]	; (10011794 <rand+0x68>)
10011750:	80c3      	strh	r3, [r0, #6]
10011752:	4b11      	ldr	r3, [pc, #68]	; (10011798 <rand+0x6c>)
10011754:	8103      	strh	r3, [r0, #8]
10011756:	2305      	movs	r3, #5
10011758:	8143      	strh	r3, [r0, #10]
1001175a:	3306      	adds	r3, #6
1001175c:	8183      	strh	r3, [r0, #12]
1001175e:	2300      	movs	r3, #0
10011760:	6102      	str	r2, [r0, #16]
10011762:	6143      	str	r3, [r0, #20]
10011764:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10011766:	4a0d      	ldr	r2, [pc, #52]	; (1001179c <rand+0x70>)
10011768:	6920      	ldr	r0, [r4, #16]
1001176a:	6961      	ldr	r1, [r4, #20]
1001176c:	4b0c      	ldr	r3, [pc, #48]	; (100117a0 <rand+0x74>)
1001176e:	f7fe f80b 	bl	1000f788 <__aeabi_lmul>
10011772:	2201      	movs	r2, #1
10011774:	2300      	movs	r3, #0
10011776:	1880      	adds	r0, r0, r2
10011778:	4159      	adcs	r1, r3
1001177a:	6120      	str	r0, [r4, #16]
1001177c:	6161      	str	r1, [r4, #20]
1001177e:	0048      	lsls	r0, r1, #1
10011780:	0840      	lsrs	r0, r0, #1
10011782:	bd10      	pop	{r4, pc}
10011784:	100137cc 	.word	0x100137cc
10011788:	0000330e 	.word	0x0000330e
1001178c:	ffffabcd 	.word	0xffffabcd
10011790:	00001234 	.word	0x00001234
10011794:	ffffe66d 	.word	0xffffe66d
10011798:	ffffdeec 	.word	0xffffdeec
1001179c:	4c957f2d 	.word	0x4c957f2d
100117a0:	5851f42d 	.word	0x5851f42d

100117a4 <_sbrk_r>:
100117a4:	2300      	movs	r3, #0
100117a6:	b570      	push	{r4, r5, r6, lr}
100117a8:	4c06      	ldr	r4, [pc, #24]	; (100117c4 <_sbrk_r+0x20>)
100117aa:	0005      	movs	r5, r0
100117ac:	0008      	movs	r0, r1
100117ae:	6023      	str	r3, [r4, #0]
100117b0:	f7fa fffa 	bl	1000c7a8 <_sbrk>
100117b4:	1c43      	adds	r3, r0, #1
100117b6:	d103      	bne.n	100117c0 <_sbrk_r+0x1c>
100117b8:	6823      	ldr	r3, [r4, #0]
100117ba:	2b00      	cmp	r3, #0
100117bc:	d000      	beq.n	100117c0 <_sbrk_r+0x1c>
100117be:	602b      	str	r3, [r5, #0]
100117c0:	bd70      	pop	{r4, r5, r6, pc}
100117c2:	46c0      	nop			; (mov r8, r8)
100117c4:	10015fec 	.word	0x10015fec

100117c8 <setbuf>:
100117c8:	424a      	negs	r2, r1
100117ca:	414a      	adcs	r2, r1
100117cc:	2380      	movs	r3, #128	; 0x80
100117ce:	b510      	push	{r4, lr}
100117d0:	0052      	lsls	r2, r2, #1
100117d2:	00db      	lsls	r3, r3, #3
100117d4:	f000 f802 	bl	100117dc <setvbuf>
100117d8:	bd10      	pop	{r4, pc}
	...

100117dc <setvbuf>:
100117dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100117de:	001d      	movs	r5, r3
100117e0:	4b51      	ldr	r3, [pc, #324]	; (10011928 <setvbuf+0x14c>)
100117e2:	b085      	sub	sp, #20
100117e4:	681e      	ldr	r6, [r3, #0]
100117e6:	0004      	movs	r4, r0
100117e8:	000f      	movs	r7, r1
100117ea:	9200      	str	r2, [sp, #0]
100117ec:	2e00      	cmp	r6, #0
100117ee:	d005      	beq.n	100117fc <setvbuf+0x20>
100117f0:	69b3      	ldr	r3, [r6, #24]
100117f2:	2b00      	cmp	r3, #0
100117f4:	d102      	bne.n	100117fc <setvbuf+0x20>
100117f6:	0030      	movs	r0, r6
100117f8:	f000 fa62 	bl	10011cc0 <__sinit>
100117fc:	4b4b      	ldr	r3, [pc, #300]	; (1001192c <setvbuf+0x150>)
100117fe:	429c      	cmp	r4, r3
10011800:	d101      	bne.n	10011806 <setvbuf+0x2a>
10011802:	6874      	ldr	r4, [r6, #4]
10011804:	e008      	b.n	10011818 <setvbuf+0x3c>
10011806:	4b4a      	ldr	r3, [pc, #296]	; (10011930 <setvbuf+0x154>)
10011808:	429c      	cmp	r4, r3
1001180a:	d101      	bne.n	10011810 <setvbuf+0x34>
1001180c:	68b4      	ldr	r4, [r6, #8]
1001180e:	e003      	b.n	10011818 <setvbuf+0x3c>
10011810:	4b48      	ldr	r3, [pc, #288]	; (10011934 <setvbuf+0x158>)
10011812:	429c      	cmp	r4, r3
10011814:	d100      	bne.n	10011818 <setvbuf+0x3c>
10011816:	68f4      	ldr	r4, [r6, #12]
10011818:	9b00      	ldr	r3, [sp, #0]
1001181a:	2b02      	cmp	r3, #2
1001181c:	d005      	beq.n	1001182a <setvbuf+0x4e>
1001181e:	2b01      	cmp	r3, #1
10011820:	d900      	bls.n	10011824 <setvbuf+0x48>
10011822:	e07c      	b.n	1001191e <setvbuf+0x142>
10011824:	2d00      	cmp	r5, #0
10011826:	da00      	bge.n	1001182a <setvbuf+0x4e>
10011828:	e079      	b.n	1001191e <setvbuf+0x142>
1001182a:	0021      	movs	r1, r4
1001182c:	0030      	movs	r0, r6
1001182e:	f000 f9d9 	bl	10011be4 <_fflush_r>
10011832:	6b61      	ldr	r1, [r4, #52]	; 0x34
10011834:	2900      	cmp	r1, #0
10011836:	d008      	beq.n	1001184a <setvbuf+0x6e>
10011838:	0023      	movs	r3, r4
1001183a:	3344      	adds	r3, #68	; 0x44
1001183c:	4299      	cmp	r1, r3
1001183e:	d002      	beq.n	10011846 <setvbuf+0x6a>
10011840:	0030      	movs	r0, r6
10011842:	f7ff fe3d 	bl	100114c0 <_free_r>
10011846:	2300      	movs	r3, #0
10011848:	6363      	str	r3, [r4, #52]	; 0x34
1001184a:	2300      	movs	r3, #0
1001184c:	61a3      	str	r3, [r4, #24]
1001184e:	6063      	str	r3, [r4, #4]
10011850:	89a3      	ldrh	r3, [r4, #12]
10011852:	061b      	lsls	r3, r3, #24
10011854:	d503      	bpl.n	1001185e <setvbuf+0x82>
10011856:	6921      	ldr	r1, [r4, #16]
10011858:	0030      	movs	r0, r6
1001185a:	f7ff fe31 	bl	100114c0 <_free_r>
1001185e:	89a2      	ldrh	r2, [r4, #12]
10011860:	4b35      	ldr	r3, [pc, #212]	; (10011938 <setvbuf+0x15c>)
10011862:	4013      	ands	r3, r2
10011864:	81a3      	strh	r3, [r4, #12]
10011866:	9b00      	ldr	r3, [sp, #0]
10011868:	2b02      	cmp	r3, #2
1001186a:	d021      	beq.n	100118b0 <setvbuf+0xd4>
1001186c:	ab03      	add	r3, sp, #12
1001186e:	aa02      	add	r2, sp, #8
10011870:	0021      	movs	r1, r4
10011872:	0030      	movs	r0, r6
10011874:	f000 fab8 	bl	10011de8 <__swhatbuf_r>
10011878:	89a3      	ldrh	r3, [r4, #12]
1001187a:	4318      	orrs	r0, r3
1001187c:	81a0      	strh	r0, [r4, #12]
1001187e:	2d00      	cmp	r5, #0
10011880:	d101      	bne.n	10011886 <setvbuf+0xaa>
10011882:	9d02      	ldr	r5, [sp, #8]
10011884:	e001      	b.n	1001188a <setvbuf+0xae>
10011886:	2f00      	cmp	r7, #0
10011888:	d125      	bne.n	100118d6 <setvbuf+0xfa>
1001188a:	0028      	movs	r0, r5
1001188c:	f7ff fdee 	bl	1001146c <malloc>
10011890:	9501      	str	r5, [sp, #4]
10011892:	1e07      	subs	r7, r0, #0
10011894:	d11a      	bne.n	100118cc <setvbuf+0xf0>
10011896:	9b02      	ldr	r3, [sp, #8]
10011898:	9301      	str	r3, [sp, #4]
1001189a:	42ab      	cmp	r3, r5
1001189c:	d102      	bne.n	100118a4 <setvbuf+0xc8>
1001189e:	2001      	movs	r0, #1
100118a0:	4240      	negs	r0, r0
100118a2:	e006      	b.n	100118b2 <setvbuf+0xd6>
100118a4:	9801      	ldr	r0, [sp, #4]
100118a6:	f7ff fde1 	bl	1001146c <malloc>
100118aa:	1e07      	subs	r7, r0, #0
100118ac:	d10e      	bne.n	100118cc <setvbuf+0xf0>
100118ae:	e7f6      	b.n	1001189e <setvbuf+0xc2>
100118b0:	2000      	movs	r0, #0
100118b2:	2202      	movs	r2, #2
100118b4:	89a3      	ldrh	r3, [r4, #12]
100118b6:	4313      	orrs	r3, r2
100118b8:	81a3      	strh	r3, [r4, #12]
100118ba:	2300      	movs	r3, #0
100118bc:	60a3      	str	r3, [r4, #8]
100118be:	0023      	movs	r3, r4
100118c0:	3347      	adds	r3, #71	; 0x47
100118c2:	6023      	str	r3, [r4, #0]
100118c4:	6123      	str	r3, [r4, #16]
100118c6:	2301      	movs	r3, #1
100118c8:	6163      	str	r3, [r4, #20]
100118ca:	e02a      	b.n	10011922 <setvbuf+0x146>
100118cc:	2280      	movs	r2, #128	; 0x80
100118ce:	89a3      	ldrh	r3, [r4, #12]
100118d0:	9d01      	ldr	r5, [sp, #4]
100118d2:	4313      	orrs	r3, r2
100118d4:	81a3      	strh	r3, [r4, #12]
100118d6:	69b3      	ldr	r3, [r6, #24]
100118d8:	2b00      	cmp	r3, #0
100118da:	d102      	bne.n	100118e2 <setvbuf+0x106>
100118dc:	0030      	movs	r0, r6
100118de:	f000 f9ef 	bl	10011cc0 <__sinit>
100118e2:	9b00      	ldr	r3, [sp, #0]
100118e4:	2b01      	cmp	r3, #1
100118e6:	d103      	bne.n	100118f0 <setvbuf+0x114>
100118e8:	89a3      	ldrh	r3, [r4, #12]
100118ea:	9a00      	ldr	r2, [sp, #0]
100118ec:	431a      	orrs	r2, r3
100118ee:	81a2      	strh	r2, [r4, #12]
100118f0:	2308      	movs	r3, #8
100118f2:	89a2      	ldrh	r2, [r4, #12]
100118f4:	6027      	str	r7, [r4, #0]
100118f6:	4013      	ands	r3, r2
100118f8:	6127      	str	r7, [r4, #16]
100118fa:	6165      	str	r5, [r4, #20]
100118fc:	1e18      	subs	r0, r3, #0
100118fe:	d00c      	beq.n	1001191a <setvbuf+0x13e>
10011900:	2301      	movs	r3, #1
10011902:	401a      	ands	r2, r3
10011904:	2300      	movs	r3, #0
10011906:	1e10      	subs	r0, r2, #0
10011908:	4298      	cmp	r0, r3
1001190a:	d004      	beq.n	10011916 <setvbuf+0x13a>
1001190c:	426d      	negs	r5, r5
1001190e:	60a3      	str	r3, [r4, #8]
10011910:	61a5      	str	r5, [r4, #24]
10011912:	0018      	movs	r0, r3
10011914:	e005      	b.n	10011922 <setvbuf+0x146>
10011916:	60a5      	str	r5, [r4, #8]
10011918:	e003      	b.n	10011922 <setvbuf+0x146>
1001191a:	60a3      	str	r3, [r4, #8]
1001191c:	e001      	b.n	10011922 <setvbuf+0x146>
1001191e:	2001      	movs	r0, #1
10011920:	4240      	negs	r0, r0
10011922:	b005      	add	sp, #20
10011924:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011926:	46c0      	nop			; (mov r8, r8)
10011928:	100137cc 	.word	0x100137cc
1001192c:	10013670 	.word	0x10013670
10011930:	10013690 	.word	0x10013690
10011934:	100136b0 	.word	0x100136b0
10011938:	fffff35c 	.word	0xfffff35c

1001193c <__swbuf_r>:
1001193c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001193e:	0005      	movs	r5, r0
10011940:	000f      	movs	r7, r1
10011942:	0014      	movs	r4, r2
10011944:	2800      	cmp	r0, #0
10011946:	d004      	beq.n	10011952 <__swbuf_r+0x16>
10011948:	6983      	ldr	r3, [r0, #24]
1001194a:	2b00      	cmp	r3, #0
1001194c:	d101      	bne.n	10011952 <__swbuf_r+0x16>
1001194e:	f000 f9b7 	bl	10011cc0 <__sinit>
10011952:	4b23      	ldr	r3, [pc, #140]	; (100119e0 <__swbuf_r+0xa4>)
10011954:	429c      	cmp	r4, r3
10011956:	d101      	bne.n	1001195c <__swbuf_r+0x20>
10011958:	686c      	ldr	r4, [r5, #4]
1001195a:	e008      	b.n	1001196e <__swbuf_r+0x32>
1001195c:	4b21      	ldr	r3, [pc, #132]	; (100119e4 <__swbuf_r+0xa8>)
1001195e:	429c      	cmp	r4, r3
10011960:	d101      	bne.n	10011966 <__swbuf_r+0x2a>
10011962:	68ac      	ldr	r4, [r5, #8]
10011964:	e003      	b.n	1001196e <__swbuf_r+0x32>
10011966:	4b20      	ldr	r3, [pc, #128]	; (100119e8 <__swbuf_r+0xac>)
10011968:	429c      	cmp	r4, r3
1001196a:	d100      	bne.n	1001196e <__swbuf_r+0x32>
1001196c:	68ec      	ldr	r4, [r5, #12]
1001196e:	69a3      	ldr	r3, [r4, #24]
10011970:	60a3      	str	r3, [r4, #8]
10011972:	89a3      	ldrh	r3, [r4, #12]
10011974:	071b      	lsls	r3, r3, #28
10011976:	d50a      	bpl.n	1001198e <__swbuf_r+0x52>
10011978:	6923      	ldr	r3, [r4, #16]
1001197a:	2b00      	cmp	r3, #0
1001197c:	d007      	beq.n	1001198e <__swbuf_r+0x52>
1001197e:	6823      	ldr	r3, [r4, #0]
10011980:	6922      	ldr	r2, [r4, #16]
10011982:	b2fe      	uxtb	r6, r7
10011984:	1a98      	subs	r0, r3, r2
10011986:	6963      	ldr	r3, [r4, #20]
10011988:	4298      	cmp	r0, r3
1001198a:	db0f      	blt.n	100119ac <__swbuf_r+0x70>
1001198c:	e008      	b.n	100119a0 <__swbuf_r+0x64>
1001198e:	0021      	movs	r1, r4
10011990:	0028      	movs	r0, r5
10011992:	f000 f82b 	bl	100119ec <__swsetup_r>
10011996:	2800      	cmp	r0, #0
10011998:	d0f1      	beq.n	1001197e <__swbuf_r+0x42>
1001199a:	2001      	movs	r0, #1
1001199c:	4240      	negs	r0, r0
1001199e:	e01d      	b.n	100119dc <__swbuf_r+0xa0>
100119a0:	0021      	movs	r1, r4
100119a2:	0028      	movs	r0, r5
100119a4:	f000 f91e 	bl	10011be4 <_fflush_r>
100119a8:	2800      	cmp	r0, #0
100119aa:	d1f6      	bne.n	1001199a <__swbuf_r+0x5e>
100119ac:	68a3      	ldr	r3, [r4, #8]
100119ae:	3001      	adds	r0, #1
100119b0:	3b01      	subs	r3, #1
100119b2:	60a3      	str	r3, [r4, #8]
100119b4:	6823      	ldr	r3, [r4, #0]
100119b6:	1c5a      	adds	r2, r3, #1
100119b8:	6022      	str	r2, [r4, #0]
100119ba:	701f      	strb	r7, [r3, #0]
100119bc:	6963      	ldr	r3, [r4, #20]
100119be:	4298      	cmp	r0, r3
100119c0:	d005      	beq.n	100119ce <__swbuf_r+0x92>
100119c2:	89a3      	ldrh	r3, [r4, #12]
100119c4:	0030      	movs	r0, r6
100119c6:	07db      	lsls	r3, r3, #31
100119c8:	d508      	bpl.n	100119dc <__swbuf_r+0xa0>
100119ca:	2e0a      	cmp	r6, #10
100119cc:	d106      	bne.n	100119dc <__swbuf_r+0xa0>
100119ce:	0021      	movs	r1, r4
100119d0:	0028      	movs	r0, r5
100119d2:	f000 f907 	bl	10011be4 <_fflush_r>
100119d6:	2800      	cmp	r0, #0
100119d8:	d1df      	bne.n	1001199a <__swbuf_r+0x5e>
100119da:	0030      	movs	r0, r6
100119dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100119de:	46c0      	nop			; (mov r8, r8)
100119e0:	10013670 	.word	0x10013670
100119e4:	10013690 	.word	0x10013690
100119e8:	100136b0 	.word	0x100136b0

100119ec <__swsetup_r>:
100119ec:	4b36      	ldr	r3, [pc, #216]	; (10011ac8 <__swsetup_r+0xdc>)
100119ee:	b570      	push	{r4, r5, r6, lr}
100119f0:	681d      	ldr	r5, [r3, #0]
100119f2:	0006      	movs	r6, r0
100119f4:	000c      	movs	r4, r1
100119f6:	2d00      	cmp	r5, #0
100119f8:	d005      	beq.n	10011a06 <__swsetup_r+0x1a>
100119fa:	69ab      	ldr	r3, [r5, #24]
100119fc:	2b00      	cmp	r3, #0
100119fe:	d102      	bne.n	10011a06 <__swsetup_r+0x1a>
10011a00:	0028      	movs	r0, r5
10011a02:	f000 f95d 	bl	10011cc0 <__sinit>
10011a06:	4b31      	ldr	r3, [pc, #196]	; (10011acc <__swsetup_r+0xe0>)
10011a08:	429c      	cmp	r4, r3
10011a0a:	d101      	bne.n	10011a10 <__swsetup_r+0x24>
10011a0c:	686c      	ldr	r4, [r5, #4]
10011a0e:	e008      	b.n	10011a22 <__swsetup_r+0x36>
10011a10:	4b2f      	ldr	r3, [pc, #188]	; (10011ad0 <__swsetup_r+0xe4>)
10011a12:	429c      	cmp	r4, r3
10011a14:	d101      	bne.n	10011a1a <__swsetup_r+0x2e>
10011a16:	68ac      	ldr	r4, [r5, #8]
10011a18:	e003      	b.n	10011a22 <__swsetup_r+0x36>
10011a1a:	4b2e      	ldr	r3, [pc, #184]	; (10011ad4 <__swsetup_r+0xe8>)
10011a1c:	429c      	cmp	r4, r3
10011a1e:	d100      	bne.n	10011a22 <__swsetup_r+0x36>
10011a20:	68ec      	ldr	r4, [r5, #12]
10011a22:	220c      	movs	r2, #12
10011a24:	5ea3      	ldrsh	r3, [r4, r2]
10011a26:	b29a      	uxth	r2, r3
10011a28:	0711      	lsls	r1, r2, #28
10011a2a:	d423      	bmi.n	10011a74 <__swsetup_r+0x88>
10011a2c:	06d1      	lsls	r1, r2, #27
10011a2e:	d407      	bmi.n	10011a40 <__swsetup_r+0x54>
10011a30:	2209      	movs	r2, #9
10011a32:	2001      	movs	r0, #1
10011a34:	6032      	str	r2, [r6, #0]
10011a36:	3237      	adds	r2, #55	; 0x37
10011a38:	4313      	orrs	r3, r2
10011a3a:	81a3      	strh	r3, [r4, #12]
10011a3c:	4240      	negs	r0, r0
10011a3e:	e042      	b.n	10011ac6 <__swsetup_r+0xda>
10011a40:	0753      	lsls	r3, r2, #29
10011a42:	d513      	bpl.n	10011a6c <__swsetup_r+0x80>
10011a44:	6b61      	ldr	r1, [r4, #52]	; 0x34
10011a46:	2900      	cmp	r1, #0
10011a48:	d008      	beq.n	10011a5c <__swsetup_r+0x70>
10011a4a:	0023      	movs	r3, r4
10011a4c:	3344      	adds	r3, #68	; 0x44
10011a4e:	4299      	cmp	r1, r3
10011a50:	d002      	beq.n	10011a58 <__swsetup_r+0x6c>
10011a52:	0030      	movs	r0, r6
10011a54:	f7ff fd34 	bl	100114c0 <_free_r>
10011a58:	2300      	movs	r3, #0
10011a5a:	6363      	str	r3, [r4, #52]	; 0x34
10011a5c:	2224      	movs	r2, #36	; 0x24
10011a5e:	89a3      	ldrh	r3, [r4, #12]
10011a60:	4393      	bics	r3, r2
10011a62:	81a3      	strh	r3, [r4, #12]
10011a64:	2300      	movs	r3, #0
10011a66:	6063      	str	r3, [r4, #4]
10011a68:	6923      	ldr	r3, [r4, #16]
10011a6a:	6023      	str	r3, [r4, #0]
10011a6c:	2208      	movs	r2, #8
10011a6e:	89a3      	ldrh	r3, [r4, #12]
10011a70:	4313      	orrs	r3, r2
10011a72:	81a3      	strh	r3, [r4, #12]
10011a74:	6923      	ldr	r3, [r4, #16]
10011a76:	2b00      	cmp	r3, #0
10011a78:	d10b      	bne.n	10011a92 <__swsetup_r+0xa6>
10011a7a:	23a0      	movs	r3, #160	; 0xa0
10011a7c:	89a2      	ldrh	r2, [r4, #12]
10011a7e:	009b      	lsls	r3, r3, #2
10011a80:	4013      	ands	r3, r2
10011a82:	2280      	movs	r2, #128	; 0x80
10011a84:	0092      	lsls	r2, r2, #2
10011a86:	4293      	cmp	r3, r2
10011a88:	d003      	beq.n	10011a92 <__swsetup_r+0xa6>
10011a8a:	0021      	movs	r1, r4
10011a8c:	0030      	movs	r0, r6
10011a8e:	f000 f9d1 	bl	10011e34 <__smakebuf_r>
10011a92:	2301      	movs	r3, #1
10011a94:	89a2      	ldrh	r2, [r4, #12]
10011a96:	4013      	ands	r3, r2
10011a98:	d005      	beq.n	10011aa6 <__swsetup_r+0xba>
10011a9a:	2300      	movs	r3, #0
10011a9c:	60a3      	str	r3, [r4, #8]
10011a9e:	6963      	ldr	r3, [r4, #20]
10011aa0:	425b      	negs	r3, r3
10011aa2:	61a3      	str	r3, [r4, #24]
10011aa4:	e003      	b.n	10011aae <__swsetup_r+0xc2>
10011aa6:	0792      	lsls	r2, r2, #30
10011aa8:	d400      	bmi.n	10011aac <__swsetup_r+0xc0>
10011aaa:	6963      	ldr	r3, [r4, #20]
10011aac:	60a3      	str	r3, [r4, #8]
10011aae:	2000      	movs	r0, #0
10011ab0:	6923      	ldr	r3, [r4, #16]
10011ab2:	4283      	cmp	r3, r0
10011ab4:	d107      	bne.n	10011ac6 <__swsetup_r+0xda>
10011ab6:	220c      	movs	r2, #12
10011ab8:	5ea3      	ldrsh	r3, [r4, r2]
10011aba:	061a      	lsls	r2, r3, #24
10011abc:	d503      	bpl.n	10011ac6 <__swsetup_r+0xda>
10011abe:	2240      	movs	r2, #64	; 0x40
10011ac0:	4313      	orrs	r3, r2
10011ac2:	81a3      	strh	r3, [r4, #12]
10011ac4:	3801      	subs	r0, #1
10011ac6:	bd70      	pop	{r4, r5, r6, pc}
10011ac8:	100137cc 	.word	0x100137cc
10011acc:	10013670 	.word	0x10013670
10011ad0:	10013690 	.word	0x10013690
10011ad4:	100136b0 	.word	0x100136b0

10011ad8 <__sflush_r>:
10011ad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011ada:	898a      	ldrh	r2, [r1, #12]
10011adc:	0005      	movs	r5, r0
10011ade:	000c      	movs	r4, r1
10011ae0:	0713      	lsls	r3, r2, #28
10011ae2:	d45a      	bmi.n	10011b9a <__sflush_r+0xc2>
10011ae4:	684b      	ldr	r3, [r1, #4]
10011ae6:	2b00      	cmp	r3, #0
10011ae8:	dc02      	bgt.n	10011af0 <__sflush_r+0x18>
10011aea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10011aec:	2b00      	cmp	r3, #0
10011aee:	dd19      	ble.n	10011b24 <__sflush_r+0x4c>
10011af0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10011af2:	2f00      	cmp	r7, #0
10011af4:	d016      	beq.n	10011b24 <__sflush_r+0x4c>
10011af6:	2300      	movs	r3, #0
10011af8:	682e      	ldr	r6, [r5, #0]
10011afa:	602b      	str	r3, [r5, #0]
10011afc:	2380      	movs	r3, #128	; 0x80
10011afe:	015b      	lsls	r3, r3, #5
10011b00:	401a      	ands	r2, r3
10011b02:	d001      	beq.n	10011b08 <__sflush_r+0x30>
10011b04:	6d60      	ldr	r0, [r4, #84]	; 0x54
10011b06:	e014      	b.n	10011b32 <__sflush_r+0x5a>
10011b08:	2301      	movs	r3, #1
10011b0a:	6a21      	ldr	r1, [r4, #32]
10011b0c:	0028      	movs	r0, r5
10011b0e:	47b8      	blx	r7
10011b10:	1c43      	adds	r3, r0, #1
10011b12:	d10e      	bne.n	10011b32 <__sflush_r+0x5a>
10011b14:	682b      	ldr	r3, [r5, #0]
10011b16:	2b00      	cmp	r3, #0
10011b18:	d00b      	beq.n	10011b32 <__sflush_r+0x5a>
10011b1a:	2b1d      	cmp	r3, #29
10011b1c:	d001      	beq.n	10011b22 <__sflush_r+0x4a>
10011b1e:	2b16      	cmp	r3, #22
10011b20:	d102      	bne.n	10011b28 <__sflush_r+0x50>
10011b22:	602e      	str	r6, [r5, #0]
10011b24:	2000      	movs	r0, #0
10011b26:	e05a      	b.n	10011bde <__sflush_r+0x106>
10011b28:	2240      	movs	r2, #64	; 0x40
10011b2a:	89a3      	ldrh	r3, [r4, #12]
10011b2c:	4313      	orrs	r3, r2
10011b2e:	81a3      	strh	r3, [r4, #12]
10011b30:	e055      	b.n	10011bde <__sflush_r+0x106>
10011b32:	89a3      	ldrh	r3, [r4, #12]
10011b34:	075b      	lsls	r3, r3, #29
10011b36:	d506      	bpl.n	10011b46 <__sflush_r+0x6e>
10011b38:	6863      	ldr	r3, [r4, #4]
10011b3a:	1ac0      	subs	r0, r0, r3
10011b3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
10011b3e:	2b00      	cmp	r3, #0
10011b40:	d001      	beq.n	10011b46 <__sflush_r+0x6e>
10011b42:	6c23      	ldr	r3, [r4, #64]	; 0x40
10011b44:	1ac0      	subs	r0, r0, r3
10011b46:	2300      	movs	r3, #0
10011b48:	0002      	movs	r2, r0
10011b4a:	6a21      	ldr	r1, [r4, #32]
10011b4c:	0028      	movs	r0, r5
10011b4e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10011b50:	47b8      	blx	r7
10011b52:	89a3      	ldrh	r3, [r4, #12]
10011b54:	1c42      	adds	r2, r0, #1
10011b56:	d106      	bne.n	10011b66 <__sflush_r+0x8e>
10011b58:	6829      	ldr	r1, [r5, #0]
10011b5a:	291d      	cmp	r1, #29
10011b5c:	d83a      	bhi.n	10011bd4 <__sflush_r+0xfc>
10011b5e:	4a20      	ldr	r2, [pc, #128]	; (10011be0 <__sflush_r+0x108>)
10011b60:	40ca      	lsrs	r2, r1
10011b62:	07d2      	lsls	r2, r2, #31
10011b64:	d536      	bpl.n	10011bd4 <__sflush_r+0xfc>
10011b66:	2200      	movs	r2, #0
10011b68:	6062      	str	r2, [r4, #4]
10011b6a:	6922      	ldr	r2, [r4, #16]
10011b6c:	6022      	str	r2, [r4, #0]
10011b6e:	04db      	lsls	r3, r3, #19
10011b70:	d505      	bpl.n	10011b7e <__sflush_r+0xa6>
10011b72:	1c43      	adds	r3, r0, #1
10011b74:	d102      	bne.n	10011b7c <__sflush_r+0xa4>
10011b76:	682b      	ldr	r3, [r5, #0]
10011b78:	2b00      	cmp	r3, #0
10011b7a:	d100      	bne.n	10011b7e <__sflush_r+0xa6>
10011b7c:	6560      	str	r0, [r4, #84]	; 0x54
10011b7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
10011b80:	602e      	str	r6, [r5, #0]
10011b82:	2900      	cmp	r1, #0
10011b84:	d0ce      	beq.n	10011b24 <__sflush_r+0x4c>
10011b86:	0023      	movs	r3, r4
10011b88:	3344      	adds	r3, #68	; 0x44
10011b8a:	4299      	cmp	r1, r3
10011b8c:	d002      	beq.n	10011b94 <__sflush_r+0xbc>
10011b8e:	0028      	movs	r0, r5
10011b90:	f7ff fc96 	bl	100114c0 <_free_r>
10011b94:	2000      	movs	r0, #0
10011b96:	6360      	str	r0, [r4, #52]	; 0x34
10011b98:	e021      	b.n	10011bde <__sflush_r+0x106>
10011b9a:	690f      	ldr	r7, [r1, #16]
10011b9c:	2f00      	cmp	r7, #0
10011b9e:	d0c1      	beq.n	10011b24 <__sflush_r+0x4c>
10011ba0:	680b      	ldr	r3, [r1, #0]
10011ba2:	600f      	str	r7, [r1, #0]
10011ba4:	1bdb      	subs	r3, r3, r7
10011ba6:	9301      	str	r3, [sp, #4]
10011ba8:	2300      	movs	r3, #0
10011baa:	0792      	lsls	r2, r2, #30
10011bac:	d100      	bne.n	10011bb0 <__sflush_r+0xd8>
10011bae:	694b      	ldr	r3, [r1, #20]
10011bb0:	60a3      	str	r3, [r4, #8]
10011bb2:	e003      	b.n	10011bbc <__sflush_r+0xe4>
10011bb4:	9b01      	ldr	r3, [sp, #4]
10011bb6:	183f      	adds	r7, r7, r0
10011bb8:	1a1b      	subs	r3, r3, r0
10011bba:	9301      	str	r3, [sp, #4]
10011bbc:	9b01      	ldr	r3, [sp, #4]
10011bbe:	2b00      	cmp	r3, #0
10011bc0:	ddb0      	ble.n	10011b24 <__sflush_r+0x4c>
10011bc2:	9b01      	ldr	r3, [sp, #4]
10011bc4:	003a      	movs	r2, r7
10011bc6:	6a21      	ldr	r1, [r4, #32]
10011bc8:	0028      	movs	r0, r5
10011bca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10011bcc:	47b0      	blx	r6
10011bce:	2800      	cmp	r0, #0
10011bd0:	dcf0      	bgt.n	10011bb4 <__sflush_r+0xdc>
10011bd2:	89a3      	ldrh	r3, [r4, #12]
10011bd4:	2240      	movs	r2, #64	; 0x40
10011bd6:	2001      	movs	r0, #1
10011bd8:	4313      	orrs	r3, r2
10011bda:	81a3      	strh	r3, [r4, #12]
10011bdc:	4240      	negs	r0, r0
10011bde:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011be0:	20400001 	.word	0x20400001

10011be4 <_fflush_r>:
10011be4:	690b      	ldr	r3, [r1, #16]
10011be6:	b570      	push	{r4, r5, r6, lr}
10011be8:	0005      	movs	r5, r0
10011bea:	000c      	movs	r4, r1
10011bec:	2b00      	cmp	r3, #0
10011bee:	d101      	bne.n	10011bf4 <_fflush_r+0x10>
10011bf0:	2000      	movs	r0, #0
10011bf2:	e01c      	b.n	10011c2e <_fflush_r+0x4a>
10011bf4:	2800      	cmp	r0, #0
10011bf6:	d004      	beq.n	10011c02 <_fflush_r+0x1e>
10011bf8:	6983      	ldr	r3, [r0, #24]
10011bfa:	2b00      	cmp	r3, #0
10011bfc:	d101      	bne.n	10011c02 <_fflush_r+0x1e>
10011bfe:	f000 f85f 	bl	10011cc0 <__sinit>
10011c02:	4b0b      	ldr	r3, [pc, #44]	; (10011c30 <_fflush_r+0x4c>)
10011c04:	429c      	cmp	r4, r3
10011c06:	d101      	bne.n	10011c0c <_fflush_r+0x28>
10011c08:	686c      	ldr	r4, [r5, #4]
10011c0a:	e008      	b.n	10011c1e <_fflush_r+0x3a>
10011c0c:	4b09      	ldr	r3, [pc, #36]	; (10011c34 <_fflush_r+0x50>)
10011c0e:	429c      	cmp	r4, r3
10011c10:	d101      	bne.n	10011c16 <_fflush_r+0x32>
10011c12:	68ac      	ldr	r4, [r5, #8]
10011c14:	e003      	b.n	10011c1e <_fflush_r+0x3a>
10011c16:	4b08      	ldr	r3, [pc, #32]	; (10011c38 <_fflush_r+0x54>)
10011c18:	429c      	cmp	r4, r3
10011c1a:	d100      	bne.n	10011c1e <_fflush_r+0x3a>
10011c1c:	68ec      	ldr	r4, [r5, #12]
10011c1e:	220c      	movs	r2, #12
10011c20:	5ea3      	ldrsh	r3, [r4, r2]
10011c22:	2b00      	cmp	r3, #0
10011c24:	d0e4      	beq.n	10011bf0 <_fflush_r+0xc>
10011c26:	0021      	movs	r1, r4
10011c28:	0028      	movs	r0, r5
10011c2a:	f7ff ff55 	bl	10011ad8 <__sflush_r>
10011c2e:	bd70      	pop	{r4, r5, r6, pc}
10011c30:	10013670 	.word	0x10013670
10011c34:	10013690 	.word	0x10013690
10011c38:	100136b0 	.word	0x100136b0

10011c3c <_cleanup_r>:
10011c3c:	b510      	push	{r4, lr}
10011c3e:	4902      	ldr	r1, [pc, #8]	; (10011c48 <_cleanup_r+0xc>)
10011c40:	f000 f8b0 	bl	10011da4 <_fwalk_reent>
10011c44:	bd10      	pop	{r4, pc}
10011c46:	46c0      	nop			; (mov r8, r8)
10011c48:	10011be5 	.word	0x10011be5

10011c4c <std.isra.0>:
10011c4c:	2300      	movs	r3, #0
10011c4e:	b510      	push	{r4, lr}
10011c50:	0004      	movs	r4, r0
10011c52:	6003      	str	r3, [r0, #0]
10011c54:	6043      	str	r3, [r0, #4]
10011c56:	6083      	str	r3, [r0, #8]
10011c58:	8181      	strh	r1, [r0, #12]
10011c5a:	6643      	str	r3, [r0, #100]	; 0x64
10011c5c:	81c2      	strh	r2, [r0, #14]
10011c5e:	6103      	str	r3, [r0, #16]
10011c60:	6143      	str	r3, [r0, #20]
10011c62:	6183      	str	r3, [r0, #24]
10011c64:	0019      	movs	r1, r3
10011c66:	2208      	movs	r2, #8
10011c68:	305c      	adds	r0, #92	; 0x5c
10011c6a:	f7ff fc21 	bl	100114b0 <memset>
10011c6e:	4b05      	ldr	r3, [pc, #20]	; (10011c84 <std.isra.0+0x38>)
10011c70:	6224      	str	r4, [r4, #32]
10011c72:	6263      	str	r3, [r4, #36]	; 0x24
10011c74:	4b04      	ldr	r3, [pc, #16]	; (10011c88 <std.isra.0+0x3c>)
10011c76:	62a3      	str	r3, [r4, #40]	; 0x28
10011c78:	4b04      	ldr	r3, [pc, #16]	; (10011c8c <std.isra.0+0x40>)
10011c7a:	62e3      	str	r3, [r4, #44]	; 0x2c
10011c7c:	4b04      	ldr	r3, [pc, #16]	; (10011c90 <std.isra.0+0x44>)
10011c7e:	6323      	str	r3, [r4, #48]	; 0x30
10011c80:	bd10      	pop	{r4, pc}
10011c82:	46c0      	nop			; (mov r8, r8)
10011c84:	100124c5 	.word	0x100124c5
10011c88:	100124ed 	.word	0x100124ed
10011c8c:	10012525 	.word	0x10012525
10011c90:	10012551 	.word	0x10012551

10011c94 <__sfmoreglue>:
10011c94:	b570      	push	{r4, r5, r6, lr}
10011c96:	2568      	movs	r5, #104	; 0x68
10011c98:	1e4b      	subs	r3, r1, #1
10011c9a:	435d      	muls	r5, r3
10011c9c:	000e      	movs	r6, r1
10011c9e:	0029      	movs	r1, r5
10011ca0:	3174      	adds	r1, #116	; 0x74
10011ca2:	f7ff fc53 	bl	1001154c <_malloc_r>
10011ca6:	1e04      	subs	r4, r0, #0
10011ca8:	d008      	beq.n	10011cbc <__sfmoreglue+0x28>
10011caa:	2100      	movs	r1, #0
10011cac:	002a      	movs	r2, r5
10011cae:	6001      	str	r1, [r0, #0]
10011cb0:	6046      	str	r6, [r0, #4]
10011cb2:	300c      	adds	r0, #12
10011cb4:	60a0      	str	r0, [r4, #8]
10011cb6:	3268      	adds	r2, #104	; 0x68
10011cb8:	f7ff fbfa 	bl	100114b0 <memset>
10011cbc:	0020      	movs	r0, r4
10011cbe:	bd70      	pop	{r4, r5, r6, pc}

10011cc0 <__sinit>:
10011cc0:	6983      	ldr	r3, [r0, #24]
10011cc2:	b513      	push	{r0, r1, r4, lr}
10011cc4:	0004      	movs	r4, r0
10011cc6:	2b00      	cmp	r3, #0
10011cc8:	d128      	bne.n	10011d1c <__sinit+0x5c>
10011cca:	6483      	str	r3, [r0, #72]	; 0x48
10011ccc:	64c3      	str	r3, [r0, #76]	; 0x4c
10011cce:	6503      	str	r3, [r0, #80]	; 0x50
10011cd0:	4b13      	ldr	r3, [pc, #76]	; (10011d20 <__sinit+0x60>)
10011cd2:	4a14      	ldr	r2, [pc, #80]	; (10011d24 <__sinit+0x64>)
10011cd4:	681b      	ldr	r3, [r3, #0]
10011cd6:	6282      	str	r2, [r0, #40]	; 0x28
10011cd8:	9301      	str	r3, [sp, #4]
10011cda:	4298      	cmp	r0, r3
10011cdc:	d101      	bne.n	10011ce2 <__sinit+0x22>
10011cde:	2301      	movs	r3, #1
10011ce0:	6183      	str	r3, [r0, #24]
10011ce2:	0020      	movs	r0, r4
10011ce4:	f000 f820 	bl	10011d28 <__sfp>
10011ce8:	6060      	str	r0, [r4, #4]
10011cea:	0020      	movs	r0, r4
10011cec:	f000 f81c 	bl	10011d28 <__sfp>
10011cf0:	60a0      	str	r0, [r4, #8]
10011cf2:	0020      	movs	r0, r4
10011cf4:	f000 f818 	bl	10011d28 <__sfp>
10011cf8:	2200      	movs	r2, #0
10011cfa:	60e0      	str	r0, [r4, #12]
10011cfc:	2104      	movs	r1, #4
10011cfe:	6860      	ldr	r0, [r4, #4]
10011d00:	f7ff ffa4 	bl	10011c4c <std.isra.0>
10011d04:	2201      	movs	r2, #1
10011d06:	2109      	movs	r1, #9
10011d08:	68a0      	ldr	r0, [r4, #8]
10011d0a:	f7ff ff9f 	bl	10011c4c <std.isra.0>
10011d0e:	2202      	movs	r2, #2
10011d10:	2112      	movs	r1, #18
10011d12:	68e0      	ldr	r0, [r4, #12]
10011d14:	f7ff ff9a 	bl	10011c4c <std.isra.0>
10011d18:	2301      	movs	r3, #1
10011d1a:	61a3      	str	r3, [r4, #24]
10011d1c:	bd13      	pop	{r0, r1, r4, pc}
10011d1e:	46c0      	nop			; (mov r8, r8)
10011d20:	1001366c 	.word	0x1001366c
10011d24:	10011c3d 	.word	0x10011c3d

10011d28 <__sfp>:
10011d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011d2a:	4b1d      	ldr	r3, [pc, #116]	; (10011da0 <__sfp+0x78>)
10011d2c:	0006      	movs	r6, r0
10011d2e:	681d      	ldr	r5, [r3, #0]
10011d30:	69ab      	ldr	r3, [r5, #24]
10011d32:	2b00      	cmp	r3, #0
10011d34:	d102      	bne.n	10011d3c <__sfp+0x14>
10011d36:	0028      	movs	r0, r5
10011d38:	f7ff ffc2 	bl	10011cc0 <__sinit>
10011d3c:	3548      	adds	r5, #72	; 0x48
10011d3e:	68ac      	ldr	r4, [r5, #8]
10011d40:	686b      	ldr	r3, [r5, #4]
10011d42:	3b01      	subs	r3, #1
10011d44:	d405      	bmi.n	10011d52 <__sfp+0x2a>
10011d46:	220c      	movs	r2, #12
10011d48:	5ea7      	ldrsh	r7, [r4, r2]
10011d4a:	2f00      	cmp	r7, #0
10011d4c:	d010      	beq.n	10011d70 <__sfp+0x48>
10011d4e:	3468      	adds	r4, #104	; 0x68
10011d50:	e7f7      	b.n	10011d42 <__sfp+0x1a>
10011d52:	682b      	ldr	r3, [r5, #0]
10011d54:	2b00      	cmp	r3, #0
10011d56:	d001      	beq.n	10011d5c <__sfp+0x34>
10011d58:	682d      	ldr	r5, [r5, #0]
10011d5a:	e7f0      	b.n	10011d3e <__sfp+0x16>
10011d5c:	2104      	movs	r1, #4
10011d5e:	0030      	movs	r0, r6
10011d60:	f7ff ff98 	bl	10011c94 <__sfmoreglue>
10011d64:	6028      	str	r0, [r5, #0]
10011d66:	2800      	cmp	r0, #0
10011d68:	d1f6      	bne.n	10011d58 <__sfp+0x30>
10011d6a:	230c      	movs	r3, #12
10011d6c:	6033      	str	r3, [r6, #0]
10011d6e:	e016      	b.n	10011d9e <__sfp+0x76>
10011d70:	2301      	movs	r3, #1
10011d72:	0020      	movs	r0, r4
10011d74:	425b      	negs	r3, r3
10011d76:	81e3      	strh	r3, [r4, #14]
10011d78:	3302      	adds	r3, #2
10011d7a:	81a3      	strh	r3, [r4, #12]
10011d7c:	6667      	str	r7, [r4, #100]	; 0x64
10011d7e:	6027      	str	r7, [r4, #0]
10011d80:	60a7      	str	r7, [r4, #8]
10011d82:	6067      	str	r7, [r4, #4]
10011d84:	6127      	str	r7, [r4, #16]
10011d86:	6167      	str	r7, [r4, #20]
10011d88:	61a7      	str	r7, [r4, #24]
10011d8a:	305c      	adds	r0, #92	; 0x5c
10011d8c:	2208      	movs	r2, #8
10011d8e:	0039      	movs	r1, r7
10011d90:	f7ff fb8e 	bl	100114b0 <memset>
10011d94:	0020      	movs	r0, r4
10011d96:	6367      	str	r7, [r4, #52]	; 0x34
10011d98:	63a7      	str	r7, [r4, #56]	; 0x38
10011d9a:	64a7      	str	r7, [r4, #72]	; 0x48
10011d9c:	64e7      	str	r7, [r4, #76]	; 0x4c
10011d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011da0:	1001366c 	.word	0x1001366c

10011da4 <_fwalk_reent>:
10011da4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011da6:	0004      	movs	r4, r0
10011da8:	0007      	movs	r7, r0
10011daa:	2600      	movs	r6, #0
10011dac:	9101      	str	r1, [sp, #4]
10011dae:	3448      	adds	r4, #72	; 0x48
10011db0:	2c00      	cmp	r4, #0
10011db2:	d016      	beq.n	10011de2 <_fwalk_reent+0x3e>
10011db4:	6863      	ldr	r3, [r4, #4]
10011db6:	68a5      	ldr	r5, [r4, #8]
10011db8:	9300      	str	r3, [sp, #0]
10011dba:	9b00      	ldr	r3, [sp, #0]
10011dbc:	3b01      	subs	r3, #1
10011dbe:	9300      	str	r3, [sp, #0]
10011dc0:	d40d      	bmi.n	10011dde <_fwalk_reent+0x3a>
10011dc2:	89ab      	ldrh	r3, [r5, #12]
10011dc4:	2b01      	cmp	r3, #1
10011dc6:	d908      	bls.n	10011dda <_fwalk_reent+0x36>
10011dc8:	220e      	movs	r2, #14
10011dca:	5eab      	ldrsh	r3, [r5, r2]
10011dcc:	3301      	adds	r3, #1
10011dce:	d004      	beq.n	10011dda <_fwalk_reent+0x36>
10011dd0:	0029      	movs	r1, r5
10011dd2:	0038      	movs	r0, r7
10011dd4:	9b01      	ldr	r3, [sp, #4]
10011dd6:	4798      	blx	r3
10011dd8:	4306      	orrs	r6, r0
10011dda:	3568      	adds	r5, #104	; 0x68
10011ddc:	e7ed      	b.n	10011dba <_fwalk_reent+0x16>
10011dde:	6824      	ldr	r4, [r4, #0]
10011de0:	e7e6      	b.n	10011db0 <_fwalk_reent+0xc>
10011de2:	0030      	movs	r0, r6
10011de4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10011de8 <__swhatbuf_r>:
10011de8:	b570      	push	{r4, r5, r6, lr}
10011dea:	000e      	movs	r6, r1
10011dec:	001d      	movs	r5, r3
10011dee:	230e      	movs	r3, #14
10011df0:	5ec9      	ldrsh	r1, [r1, r3]
10011df2:	b090      	sub	sp, #64	; 0x40
10011df4:	0014      	movs	r4, r2
10011df6:	2900      	cmp	r1, #0
10011df8:	da06      	bge.n	10011e08 <__swhatbuf_r+0x20>
10011dfa:	2300      	movs	r3, #0
10011dfc:	602b      	str	r3, [r5, #0]
10011dfe:	89b3      	ldrh	r3, [r6, #12]
10011e00:	061b      	lsls	r3, r3, #24
10011e02:	d50f      	bpl.n	10011e24 <__swhatbuf_r+0x3c>
10011e04:	2340      	movs	r3, #64	; 0x40
10011e06:	e00f      	b.n	10011e28 <__swhatbuf_r+0x40>
10011e08:	aa01      	add	r2, sp, #4
10011e0a:	f000 fbcd 	bl	100125a8 <_fstat_r>
10011e0e:	2800      	cmp	r0, #0
10011e10:	dbf3      	blt.n	10011dfa <__swhatbuf_r+0x12>
10011e12:	23f0      	movs	r3, #240	; 0xf0
10011e14:	9a02      	ldr	r2, [sp, #8]
10011e16:	021b      	lsls	r3, r3, #8
10011e18:	4013      	ands	r3, r2
10011e1a:	4a05      	ldr	r2, [pc, #20]	; (10011e30 <__swhatbuf_r+0x48>)
10011e1c:	189b      	adds	r3, r3, r2
10011e1e:	425a      	negs	r2, r3
10011e20:	4153      	adcs	r3, r2
10011e22:	602b      	str	r3, [r5, #0]
10011e24:	2380      	movs	r3, #128	; 0x80
10011e26:	00db      	lsls	r3, r3, #3
10011e28:	2000      	movs	r0, #0
10011e2a:	6023      	str	r3, [r4, #0]
10011e2c:	b010      	add	sp, #64	; 0x40
10011e2e:	bd70      	pop	{r4, r5, r6, pc}
10011e30:	ffffe000 	.word	0xffffe000

10011e34 <__smakebuf_r>:
10011e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011e36:	2602      	movs	r6, #2
10011e38:	898b      	ldrh	r3, [r1, #12]
10011e3a:	0005      	movs	r5, r0
10011e3c:	000c      	movs	r4, r1
10011e3e:	4233      	tst	r3, r6
10011e40:	d110      	bne.n	10011e64 <__smakebuf_r+0x30>
10011e42:	ab01      	add	r3, sp, #4
10011e44:	466a      	mov	r2, sp
10011e46:	f7ff ffcf 	bl	10011de8 <__swhatbuf_r>
10011e4a:	9900      	ldr	r1, [sp, #0]
10011e4c:	0007      	movs	r7, r0
10011e4e:	0028      	movs	r0, r5
10011e50:	f7ff fb7c 	bl	1001154c <_malloc_r>
10011e54:	2800      	cmp	r0, #0
10011e56:	d10c      	bne.n	10011e72 <__smakebuf_r+0x3e>
10011e58:	220c      	movs	r2, #12
10011e5a:	5ea3      	ldrsh	r3, [r4, r2]
10011e5c:	059a      	lsls	r2, r3, #22
10011e5e:	d423      	bmi.n	10011ea8 <__smakebuf_r+0x74>
10011e60:	4333      	orrs	r3, r6
10011e62:	81a3      	strh	r3, [r4, #12]
10011e64:	0023      	movs	r3, r4
10011e66:	3347      	adds	r3, #71	; 0x47
10011e68:	6023      	str	r3, [r4, #0]
10011e6a:	6123      	str	r3, [r4, #16]
10011e6c:	2301      	movs	r3, #1
10011e6e:	6163      	str	r3, [r4, #20]
10011e70:	e01a      	b.n	10011ea8 <__smakebuf_r+0x74>
10011e72:	2280      	movs	r2, #128	; 0x80
10011e74:	4b0d      	ldr	r3, [pc, #52]	; (10011eac <__smakebuf_r+0x78>)
10011e76:	62ab      	str	r3, [r5, #40]	; 0x28
10011e78:	89a3      	ldrh	r3, [r4, #12]
10011e7a:	6020      	str	r0, [r4, #0]
10011e7c:	4313      	orrs	r3, r2
10011e7e:	81a3      	strh	r3, [r4, #12]
10011e80:	9b00      	ldr	r3, [sp, #0]
10011e82:	6120      	str	r0, [r4, #16]
10011e84:	6163      	str	r3, [r4, #20]
10011e86:	9b01      	ldr	r3, [sp, #4]
10011e88:	2b00      	cmp	r3, #0
10011e8a:	d00a      	beq.n	10011ea2 <__smakebuf_r+0x6e>
10011e8c:	230e      	movs	r3, #14
10011e8e:	5ee1      	ldrsh	r1, [r4, r3]
10011e90:	0028      	movs	r0, r5
10011e92:	f000 fb9b 	bl	100125cc <_isatty_r>
10011e96:	2800      	cmp	r0, #0
10011e98:	d003      	beq.n	10011ea2 <__smakebuf_r+0x6e>
10011e9a:	2201      	movs	r2, #1
10011e9c:	89a3      	ldrh	r3, [r4, #12]
10011e9e:	4313      	orrs	r3, r2
10011ea0:	81a3      	strh	r3, [r4, #12]
10011ea2:	89a3      	ldrh	r3, [r4, #12]
10011ea4:	431f      	orrs	r7, r3
10011ea6:	81a7      	strh	r7, [r4, #12]
10011ea8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10011eaa:	46c0      	nop			; (mov r8, r8)
10011eac:	10011c3d 	.word	0x10011c3d

10011eb0 <__sfputc_r>:
10011eb0:	6893      	ldr	r3, [r2, #8]
10011eb2:	b510      	push	{r4, lr}
10011eb4:	3b01      	subs	r3, #1
10011eb6:	6093      	str	r3, [r2, #8]
10011eb8:	2b00      	cmp	r3, #0
10011eba:	da05      	bge.n	10011ec8 <__sfputc_r+0x18>
10011ebc:	6994      	ldr	r4, [r2, #24]
10011ebe:	42a3      	cmp	r3, r4
10011ec0:	db08      	blt.n	10011ed4 <__sfputc_r+0x24>
10011ec2:	b2cb      	uxtb	r3, r1
10011ec4:	2b0a      	cmp	r3, #10
10011ec6:	d005      	beq.n	10011ed4 <__sfputc_r+0x24>
10011ec8:	6813      	ldr	r3, [r2, #0]
10011eca:	1c58      	adds	r0, r3, #1
10011ecc:	6010      	str	r0, [r2, #0]
10011ece:	7019      	strb	r1, [r3, #0]
10011ed0:	b2c8      	uxtb	r0, r1
10011ed2:	e001      	b.n	10011ed8 <__sfputc_r+0x28>
10011ed4:	f7ff fd32 	bl	1001193c <__swbuf_r>
10011ed8:	bd10      	pop	{r4, pc}

10011eda <__sfputs_r>:
10011eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011edc:	0006      	movs	r6, r0
10011ede:	000f      	movs	r7, r1
10011ee0:	0014      	movs	r4, r2
10011ee2:	18d5      	adds	r5, r2, r3
10011ee4:	42ac      	cmp	r4, r5
10011ee6:	d008      	beq.n	10011efa <__sfputs_r+0x20>
10011ee8:	7821      	ldrb	r1, [r4, #0]
10011eea:	003a      	movs	r2, r7
10011eec:	0030      	movs	r0, r6
10011eee:	f7ff ffdf 	bl	10011eb0 <__sfputc_r>
10011ef2:	3401      	adds	r4, #1
10011ef4:	1c43      	adds	r3, r0, #1
10011ef6:	d1f5      	bne.n	10011ee4 <__sfputs_r+0xa>
10011ef8:	e000      	b.n	10011efc <__sfputs_r+0x22>
10011efa:	2000      	movs	r0, #0
10011efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10011f00 <_vfiprintf_r>:
10011f00:	b5f0      	push	{r4, r5, r6, r7, lr}
10011f02:	b09f      	sub	sp, #124	; 0x7c
10011f04:	0006      	movs	r6, r0
10011f06:	000f      	movs	r7, r1
10011f08:	9202      	str	r2, [sp, #8]
10011f0a:	9305      	str	r3, [sp, #20]
10011f0c:	2800      	cmp	r0, #0
10011f0e:	d004      	beq.n	10011f1a <_vfiprintf_r+0x1a>
10011f10:	6983      	ldr	r3, [r0, #24]
10011f12:	2b00      	cmp	r3, #0
10011f14:	d101      	bne.n	10011f1a <_vfiprintf_r+0x1a>
10011f16:	f7ff fed3 	bl	10011cc0 <__sinit>
10011f1a:	4b7f      	ldr	r3, [pc, #508]	; (10012118 <_vfiprintf_r+0x218>)
10011f1c:	429f      	cmp	r7, r3
10011f1e:	d101      	bne.n	10011f24 <_vfiprintf_r+0x24>
10011f20:	6877      	ldr	r7, [r6, #4]
10011f22:	e008      	b.n	10011f36 <_vfiprintf_r+0x36>
10011f24:	4b7d      	ldr	r3, [pc, #500]	; (1001211c <_vfiprintf_r+0x21c>)
10011f26:	429f      	cmp	r7, r3
10011f28:	d101      	bne.n	10011f2e <_vfiprintf_r+0x2e>
10011f2a:	68b7      	ldr	r7, [r6, #8]
10011f2c:	e003      	b.n	10011f36 <_vfiprintf_r+0x36>
10011f2e:	4b7c      	ldr	r3, [pc, #496]	; (10012120 <_vfiprintf_r+0x220>)
10011f30:	429f      	cmp	r7, r3
10011f32:	d100      	bne.n	10011f36 <_vfiprintf_r+0x36>
10011f34:	68f7      	ldr	r7, [r6, #12]
10011f36:	89bb      	ldrh	r3, [r7, #12]
10011f38:	071b      	lsls	r3, r3, #28
10011f3a:	d50a      	bpl.n	10011f52 <_vfiprintf_r+0x52>
10011f3c:	693b      	ldr	r3, [r7, #16]
10011f3e:	2b00      	cmp	r3, #0
10011f40:	d007      	beq.n	10011f52 <_vfiprintf_r+0x52>
10011f42:	2300      	movs	r3, #0
10011f44:	ad06      	add	r5, sp, #24
10011f46:	616b      	str	r3, [r5, #20]
10011f48:	3320      	adds	r3, #32
10011f4a:	766b      	strb	r3, [r5, #25]
10011f4c:	3310      	adds	r3, #16
10011f4e:	76ab      	strb	r3, [r5, #26]
10011f50:	e03d      	b.n	10011fce <_vfiprintf_r+0xce>
10011f52:	0039      	movs	r1, r7
10011f54:	0030      	movs	r0, r6
10011f56:	f7ff fd49 	bl	100119ec <__swsetup_r>
10011f5a:	2800      	cmp	r0, #0
10011f5c:	d0f1      	beq.n	10011f42 <_vfiprintf_r+0x42>
10011f5e:	2001      	movs	r0, #1
10011f60:	4240      	negs	r0, r0
10011f62:	e0d6      	b.n	10012112 <_vfiprintf_r+0x212>
10011f64:	9a05      	ldr	r2, [sp, #20]
10011f66:	1d11      	adds	r1, r2, #4
10011f68:	6812      	ldr	r2, [r2, #0]
10011f6a:	9105      	str	r1, [sp, #20]
10011f6c:	2a00      	cmp	r2, #0
10011f6e:	da00      	bge.n	10011f72 <_vfiprintf_r+0x72>
10011f70:	e07f      	b.n	10012072 <_vfiprintf_r+0x172>
10011f72:	9209      	str	r2, [sp, #36]	; 0x24
10011f74:	3401      	adds	r4, #1
10011f76:	7823      	ldrb	r3, [r4, #0]
10011f78:	2b2e      	cmp	r3, #46	; 0x2e
10011f7a:	d100      	bne.n	10011f7e <_vfiprintf_r+0x7e>
10011f7c:	e08d      	b.n	1001209a <_vfiprintf_r+0x19a>
10011f7e:	7821      	ldrb	r1, [r4, #0]
10011f80:	2203      	movs	r2, #3
10011f82:	4868      	ldr	r0, [pc, #416]	; (10012124 <_vfiprintf_r+0x224>)
10011f84:	f000 fb48 	bl	10012618 <memchr>
10011f88:	2800      	cmp	r0, #0
10011f8a:	d007      	beq.n	10011f9c <_vfiprintf_r+0x9c>
10011f8c:	4b65      	ldr	r3, [pc, #404]	; (10012124 <_vfiprintf_r+0x224>)
10011f8e:	682a      	ldr	r2, [r5, #0]
10011f90:	1ac0      	subs	r0, r0, r3
10011f92:	2340      	movs	r3, #64	; 0x40
10011f94:	4083      	lsls	r3, r0
10011f96:	4313      	orrs	r3, r2
10011f98:	602b      	str	r3, [r5, #0]
10011f9a:	3401      	adds	r4, #1
10011f9c:	7821      	ldrb	r1, [r4, #0]
10011f9e:	1c63      	adds	r3, r4, #1
10011fa0:	2206      	movs	r2, #6
10011fa2:	4861      	ldr	r0, [pc, #388]	; (10012128 <_vfiprintf_r+0x228>)
10011fa4:	9302      	str	r3, [sp, #8]
10011fa6:	7629      	strb	r1, [r5, #24]
10011fa8:	f000 fb36 	bl	10012618 <memchr>
10011fac:	2800      	cmp	r0, #0
10011fae:	d100      	bne.n	10011fb2 <_vfiprintf_r+0xb2>
10011fb0:	e09d      	b.n	100120ee <_vfiprintf_r+0x1ee>
10011fb2:	4b5e      	ldr	r3, [pc, #376]	; (1001212c <_vfiprintf_r+0x22c>)
10011fb4:	2b00      	cmp	r3, #0
10011fb6:	d000      	beq.n	10011fba <_vfiprintf_r+0xba>
10011fb8:	e090      	b.n	100120dc <_vfiprintf_r+0x1dc>
10011fba:	2207      	movs	r2, #7
10011fbc:	9b05      	ldr	r3, [sp, #20]
10011fbe:	3307      	adds	r3, #7
10011fc0:	4393      	bics	r3, r2
10011fc2:	3308      	adds	r3, #8
10011fc4:	9305      	str	r3, [sp, #20]
10011fc6:	696b      	ldr	r3, [r5, #20]
10011fc8:	9a03      	ldr	r2, [sp, #12]
10011fca:	189b      	adds	r3, r3, r2
10011fcc:	616b      	str	r3, [r5, #20]
10011fce:	9c02      	ldr	r4, [sp, #8]
10011fd0:	7823      	ldrb	r3, [r4, #0]
10011fd2:	2b00      	cmp	r3, #0
10011fd4:	d104      	bne.n	10011fe0 <_vfiprintf_r+0xe0>
10011fd6:	9b02      	ldr	r3, [sp, #8]
10011fd8:	1ae3      	subs	r3, r4, r3
10011fda:	9304      	str	r3, [sp, #16]
10011fdc:	d012      	beq.n	10012004 <_vfiprintf_r+0x104>
10011fde:	e003      	b.n	10011fe8 <_vfiprintf_r+0xe8>
10011fe0:	2b25      	cmp	r3, #37	; 0x25
10011fe2:	d0f8      	beq.n	10011fd6 <_vfiprintf_r+0xd6>
10011fe4:	3401      	adds	r4, #1
10011fe6:	e7f3      	b.n	10011fd0 <_vfiprintf_r+0xd0>
10011fe8:	9b04      	ldr	r3, [sp, #16]
10011fea:	9a02      	ldr	r2, [sp, #8]
10011fec:	0039      	movs	r1, r7
10011fee:	0030      	movs	r0, r6
10011ff0:	f7ff ff73 	bl	10011eda <__sfputs_r>
10011ff4:	1c43      	adds	r3, r0, #1
10011ff6:	d100      	bne.n	10011ffa <_vfiprintf_r+0xfa>
10011ff8:	e086      	b.n	10012108 <_vfiprintf_r+0x208>
10011ffa:	696a      	ldr	r2, [r5, #20]
10011ffc:	9b04      	ldr	r3, [sp, #16]
10011ffe:	4694      	mov	ip, r2
10012000:	4463      	add	r3, ip
10012002:	616b      	str	r3, [r5, #20]
10012004:	7823      	ldrb	r3, [r4, #0]
10012006:	2b00      	cmp	r3, #0
10012008:	d07e      	beq.n	10012108 <_vfiprintf_r+0x208>
1001200a:	2201      	movs	r2, #1
1001200c:	2300      	movs	r3, #0
1001200e:	4252      	negs	r2, r2
10012010:	606a      	str	r2, [r5, #4]
10012012:	a902      	add	r1, sp, #8
10012014:	3254      	adds	r2, #84	; 0x54
10012016:	1852      	adds	r2, r2, r1
10012018:	3401      	adds	r4, #1
1001201a:	602b      	str	r3, [r5, #0]
1001201c:	60eb      	str	r3, [r5, #12]
1001201e:	60ab      	str	r3, [r5, #8]
10012020:	7013      	strb	r3, [r2, #0]
10012022:	65ab      	str	r3, [r5, #88]	; 0x58
10012024:	7821      	ldrb	r1, [r4, #0]
10012026:	2205      	movs	r2, #5
10012028:	4841      	ldr	r0, [pc, #260]	; (10012130 <_vfiprintf_r+0x230>)
1001202a:	f000 faf5 	bl	10012618 <memchr>
1001202e:	2800      	cmp	r0, #0
10012030:	d008      	beq.n	10012044 <_vfiprintf_r+0x144>
10012032:	4b3f      	ldr	r3, [pc, #252]	; (10012130 <_vfiprintf_r+0x230>)
10012034:	682a      	ldr	r2, [r5, #0]
10012036:	1ac0      	subs	r0, r0, r3
10012038:	2301      	movs	r3, #1
1001203a:	4083      	lsls	r3, r0
1001203c:	4313      	orrs	r3, r2
1001203e:	602b      	str	r3, [r5, #0]
10012040:	3401      	adds	r4, #1
10012042:	e7ef      	b.n	10012024 <_vfiprintf_r+0x124>
10012044:	682b      	ldr	r3, [r5, #0]
10012046:	06da      	lsls	r2, r3, #27
10012048:	d504      	bpl.n	10012054 <_vfiprintf_r+0x154>
1001204a:	2253      	movs	r2, #83	; 0x53
1001204c:	2120      	movs	r1, #32
1001204e:	a802      	add	r0, sp, #8
10012050:	1812      	adds	r2, r2, r0
10012052:	7011      	strb	r1, [r2, #0]
10012054:	071a      	lsls	r2, r3, #28
10012056:	d504      	bpl.n	10012062 <_vfiprintf_r+0x162>
10012058:	2253      	movs	r2, #83	; 0x53
1001205a:	212b      	movs	r1, #43	; 0x2b
1001205c:	a802      	add	r0, sp, #8
1001205e:	1812      	adds	r2, r2, r0
10012060:	7011      	strb	r1, [r2, #0]
10012062:	7822      	ldrb	r2, [r4, #0]
10012064:	2a2a      	cmp	r2, #42	; 0x2a
10012066:	d100      	bne.n	1001206a <_vfiprintf_r+0x16a>
10012068:	e77c      	b.n	10011f64 <_vfiprintf_r+0x64>
1001206a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001206c:	2000      	movs	r0, #0
1001206e:	210a      	movs	r1, #10
10012070:	e005      	b.n	1001207e <_vfiprintf_r+0x17e>
10012072:	4252      	negs	r2, r2
10012074:	60ea      	str	r2, [r5, #12]
10012076:	2202      	movs	r2, #2
10012078:	4313      	orrs	r3, r2
1001207a:	602b      	str	r3, [r5, #0]
1001207c:	e77a      	b.n	10011f74 <_vfiprintf_r+0x74>
1001207e:	7822      	ldrb	r2, [r4, #0]
10012080:	3a30      	subs	r2, #48	; 0x30
10012082:	2a09      	cmp	r2, #9
10012084:	d804      	bhi.n	10012090 <_vfiprintf_r+0x190>
10012086:	434b      	muls	r3, r1
10012088:	3401      	adds	r4, #1
1001208a:	189b      	adds	r3, r3, r2
1001208c:	2001      	movs	r0, #1
1001208e:	e7f6      	b.n	1001207e <_vfiprintf_r+0x17e>
10012090:	2800      	cmp	r0, #0
10012092:	d100      	bne.n	10012096 <_vfiprintf_r+0x196>
10012094:	e76f      	b.n	10011f76 <_vfiprintf_r+0x76>
10012096:	9309      	str	r3, [sp, #36]	; 0x24
10012098:	e76d      	b.n	10011f76 <_vfiprintf_r+0x76>
1001209a:	7863      	ldrb	r3, [r4, #1]
1001209c:	2b2a      	cmp	r3, #42	; 0x2a
1001209e:	d10a      	bne.n	100120b6 <_vfiprintf_r+0x1b6>
100120a0:	9b05      	ldr	r3, [sp, #20]
100120a2:	3402      	adds	r4, #2
100120a4:	1d1a      	adds	r2, r3, #4
100120a6:	681b      	ldr	r3, [r3, #0]
100120a8:	9205      	str	r2, [sp, #20]
100120aa:	2b00      	cmp	r3, #0
100120ac:	da01      	bge.n	100120b2 <_vfiprintf_r+0x1b2>
100120ae:	2301      	movs	r3, #1
100120b0:	425b      	negs	r3, r3
100120b2:	9307      	str	r3, [sp, #28]
100120b4:	e763      	b.n	10011f7e <_vfiprintf_r+0x7e>
100120b6:	2300      	movs	r3, #0
100120b8:	200a      	movs	r0, #10
100120ba:	001a      	movs	r2, r3
100120bc:	3401      	adds	r4, #1
100120be:	606b      	str	r3, [r5, #4]
100120c0:	7821      	ldrb	r1, [r4, #0]
100120c2:	3930      	subs	r1, #48	; 0x30
100120c4:	2909      	cmp	r1, #9
100120c6:	d804      	bhi.n	100120d2 <_vfiprintf_r+0x1d2>
100120c8:	4342      	muls	r2, r0
100120ca:	3401      	adds	r4, #1
100120cc:	1852      	adds	r2, r2, r1
100120ce:	2301      	movs	r3, #1
100120d0:	e7f6      	b.n	100120c0 <_vfiprintf_r+0x1c0>
100120d2:	2b00      	cmp	r3, #0
100120d4:	d100      	bne.n	100120d8 <_vfiprintf_r+0x1d8>
100120d6:	e752      	b.n	10011f7e <_vfiprintf_r+0x7e>
100120d8:	9207      	str	r2, [sp, #28]
100120da:	e750      	b.n	10011f7e <_vfiprintf_r+0x7e>
100120dc:	ab05      	add	r3, sp, #20
100120de:	9300      	str	r3, [sp, #0]
100120e0:	003a      	movs	r2, r7
100120e2:	4b14      	ldr	r3, [pc, #80]	; (10012134 <_vfiprintf_r+0x234>)
100120e4:	0029      	movs	r1, r5
100120e6:	0030      	movs	r0, r6
100120e8:	e000      	b.n	100120ec <_vfiprintf_r+0x1ec>
100120ea:	bf00      	nop
100120ec:	e007      	b.n	100120fe <_vfiprintf_r+0x1fe>
100120ee:	ab05      	add	r3, sp, #20
100120f0:	9300      	str	r3, [sp, #0]
100120f2:	003a      	movs	r2, r7
100120f4:	4b0f      	ldr	r3, [pc, #60]	; (10012134 <_vfiprintf_r+0x234>)
100120f6:	0029      	movs	r1, r5
100120f8:	0030      	movs	r0, r6
100120fa:	f000 f88b 	bl	10012214 <_printf_i>
100120fe:	9003      	str	r0, [sp, #12]
10012100:	9b03      	ldr	r3, [sp, #12]
10012102:	3301      	adds	r3, #1
10012104:	d000      	beq.n	10012108 <_vfiprintf_r+0x208>
10012106:	e75e      	b.n	10011fc6 <_vfiprintf_r+0xc6>
10012108:	89bb      	ldrh	r3, [r7, #12]
1001210a:	065b      	lsls	r3, r3, #25
1001210c:	d500      	bpl.n	10012110 <_vfiprintf_r+0x210>
1001210e:	e726      	b.n	10011f5e <_vfiprintf_r+0x5e>
10012110:	980b      	ldr	r0, [sp, #44]	; 0x2c
10012112:	b01f      	add	sp, #124	; 0x7c
10012114:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012116:	46c0      	nop			; (mov r8, r8)
10012118:	10013670 	.word	0x10013670
1001211c:	10013690 	.word	0x10013690
10012120:	100136b0 	.word	0x100136b0
10012124:	100136d6 	.word	0x100136d6
10012128:	100136da 	.word	0x100136da
1001212c:	00000000 	.word	0x00000000
10012130:	100136d0 	.word	0x100136d0
10012134:	10011edb 	.word	0x10011edb

10012138 <_printf_common>:
10012138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001213a:	0017      	movs	r7, r2
1001213c:	9301      	str	r3, [sp, #4]
1001213e:	688a      	ldr	r2, [r1, #8]
10012140:	690b      	ldr	r3, [r1, #16]
10012142:	9000      	str	r0, [sp, #0]
10012144:	000c      	movs	r4, r1
10012146:	4293      	cmp	r3, r2
10012148:	da00      	bge.n	1001214c <_printf_common+0x14>
1001214a:	0013      	movs	r3, r2
1001214c:	0022      	movs	r2, r4
1001214e:	603b      	str	r3, [r7, #0]
10012150:	3243      	adds	r2, #67	; 0x43
10012152:	7812      	ldrb	r2, [r2, #0]
10012154:	2a00      	cmp	r2, #0
10012156:	d001      	beq.n	1001215c <_printf_common+0x24>
10012158:	3301      	adds	r3, #1
1001215a:	603b      	str	r3, [r7, #0]
1001215c:	6823      	ldr	r3, [r4, #0]
1001215e:	069b      	lsls	r3, r3, #26
10012160:	d502      	bpl.n	10012168 <_printf_common+0x30>
10012162:	683b      	ldr	r3, [r7, #0]
10012164:	3302      	adds	r3, #2
10012166:	603b      	str	r3, [r7, #0]
10012168:	2506      	movs	r5, #6
1001216a:	6823      	ldr	r3, [r4, #0]
1001216c:	401d      	ands	r5, r3
1001216e:	d01e      	beq.n	100121ae <_printf_common+0x76>
10012170:	0023      	movs	r3, r4
10012172:	3343      	adds	r3, #67	; 0x43
10012174:	781b      	ldrb	r3, [r3, #0]
10012176:	1e5a      	subs	r2, r3, #1
10012178:	4193      	sbcs	r3, r2
1001217a:	6822      	ldr	r2, [r4, #0]
1001217c:	0692      	lsls	r2, r2, #26
1001217e:	d51c      	bpl.n	100121ba <_printf_common+0x82>
10012180:	2030      	movs	r0, #48	; 0x30
10012182:	18e1      	adds	r1, r4, r3
10012184:	3143      	adds	r1, #67	; 0x43
10012186:	7008      	strb	r0, [r1, #0]
10012188:	0021      	movs	r1, r4
1001218a:	1c5a      	adds	r2, r3, #1
1001218c:	3145      	adds	r1, #69	; 0x45
1001218e:	7809      	ldrb	r1, [r1, #0]
10012190:	18a2      	adds	r2, r4, r2
10012192:	3243      	adds	r2, #67	; 0x43
10012194:	3302      	adds	r3, #2
10012196:	7011      	strb	r1, [r2, #0]
10012198:	e00f      	b.n	100121ba <_printf_common+0x82>
1001219a:	0022      	movs	r2, r4
1001219c:	2301      	movs	r3, #1
1001219e:	3219      	adds	r2, #25
100121a0:	9901      	ldr	r1, [sp, #4]
100121a2:	9800      	ldr	r0, [sp, #0]
100121a4:	9e08      	ldr	r6, [sp, #32]
100121a6:	47b0      	blx	r6
100121a8:	1c43      	adds	r3, r0, #1
100121aa:	d00e      	beq.n	100121ca <_printf_common+0x92>
100121ac:	3501      	adds	r5, #1
100121ae:	68e3      	ldr	r3, [r4, #12]
100121b0:	683a      	ldr	r2, [r7, #0]
100121b2:	1a9b      	subs	r3, r3, r2
100121b4:	429d      	cmp	r5, r3
100121b6:	dbf0      	blt.n	1001219a <_printf_common+0x62>
100121b8:	e7da      	b.n	10012170 <_printf_common+0x38>
100121ba:	0022      	movs	r2, r4
100121bc:	9901      	ldr	r1, [sp, #4]
100121be:	3243      	adds	r2, #67	; 0x43
100121c0:	9800      	ldr	r0, [sp, #0]
100121c2:	9d08      	ldr	r5, [sp, #32]
100121c4:	47a8      	blx	r5
100121c6:	1c43      	adds	r3, r0, #1
100121c8:	d102      	bne.n	100121d0 <_printf_common+0x98>
100121ca:	2001      	movs	r0, #1
100121cc:	4240      	negs	r0, r0
100121ce:	e020      	b.n	10012212 <_printf_common+0xda>
100121d0:	2306      	movs	r3, #6
100121d2:	6820      	ldr	r0, [r4, #0]
100121d4:	68e1      	ldr	r1, [r4, #12]
100121d6:	683a      	ldr	r2, [r7, #0]
100121d8:	4003      	ands	r3, r0
100121da:	2500      	movs	r5, #0
100121dc:	2b04      	cmp	r3, #4
100121de:	d103      	bne.n	100121e8 <_printf_common+0xb0>
100121e0:	1a8d      	subs	r5, r1, r2
100121e2:	43eb      	mvns	r3, r5
100121e4:	17db      	asrs	r3, r3, #31
100121e6:	401d      	ands	r5, r3
100121e8:	68a3      	ldr	r3, [r4, #8]
100121ea:	6922      	ldr	r2, [r4, #16]
100121ec:	4293      	cmp	r3, r2
100121ee:	dd01      	ble.n	100121f4 <_printf_common+0xbc>
100121f0:	1a9b      	subs	r3, r3, r2
100121f2:	18ed      	adds	r5, r5, r3
100121f4:	2700      	movs	r7, #0
100121f6:	42bd      	cmp	r5, r7
100121f8:	d00a      	beq.n	10012210 <_printf_common+0xd8>
100121fa:	0022      	movs	r2, r4
100121fc:	2301      	movs	r3, #1
100121fe:	321a      	adds	r2, #26
10012200:	9901      	ldr	r1, [sp, #4]
10012202:	9800      	ldr	r0, [sp, #0]
10012204:	9e08      	ldr	r6, [sp, #32]
10012206:	47b0      	blx	r6
10012208:	1c43      	adds	r3, r0, #1
1001220a:	d0de      	beq.n	100121ca <_printf_common+0x92>
1001220c:	3701      	adds	r7, #1
1001220e:	e7f2      	b.n	100121f6 <_printf_common+0xbe>
10012210:	2000      	movs	r0, #0
10012212:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10012214 <_printf_i>:
10012214:	b5f0      	push	{r4, r5, r6, r7, lr}
10012216:	b08b      	sub	sp, #44	; 0x2c
10012218:	9206      	str	r2, [sp, #24]
1001221a:	000a      	movs	r2, r1
1001221c:	3243      	adds	r2, #67	; 0x43
1001221e:	9307      	str	r3, [sp, #28]
10012220:	9005      	str	r0, [sp, #20]
10012222:	9204      	str	r2, [sp, #16]
10012224:	7e0a      	ldrb	r2, [r1, #24]
10012226:	000c      	movs	r4, r1
10012228:	9b10      	ldr	r3, [sp, #64]	; 0x40
1001222a:	2a6e      	cmp	r2, #110	; 0x6e
1001222c:	d100      	bne.n	10012230 <_printf_i+0x1c>
1001222e:	e0ab      	b.n	10012388 <_printf_i+0x174>
10012230:	d811      	bhi.n	10012256 <_printf_i+0x42>
10012232:	2a63      	cmp	r2, #99	; 0x63
10012234:	d022      	beq.n	1001227c <_printf_i+0x68>
10012236:	d809      	bhi.n	1001224c <_printf_i+0x38>
10012238:	2a00      	cmp	r2, #0
1001223a:	d100      	bne.n	1001223e <_printf_i+0x2a>
1001223c:	e0b5      	b.n	100123aa <_printf_i+0x196>
1001223e:	2a58      	cmp	r2, #88	; 0x58
10012240:	d000      	beq.n	10012244 <_printf_i+0x30>
10012242:	e0c5      	b.n	100123d0 <_printf_i+0x1bc>
10012244:	3145      	adds	r1, #69	; 0x45
10012246:	700a      	strb	r2, [r1, #0]
10012248:	4a81      	ldr	r2, [pc, #516]	; (10012450 <_printf_i+0x23c>)
1001224a:	e04f      	b.n	100122ec <_printf_i+0xd8>
1001224c:	2a64      	cmp	r2, #100	; 0x64
1001224e:	d01d      	beq.n	1001228c <_printf_i+0x78>
10012250:	2a69      	cmp	r2, #105	; 0x69
10012252:	d01b      	beq.n	1001228c <_printf_i+0x78>
10012254:	e0bc      	b.n	100123d0 <_printf_i+0x1bc>
10012256:	2a73      	cmp	r2, #115	; 0x73
10012258:	d100      	bne.n	1001225c <_printf_i+0x48>
1001225a:	e0aa      	b.n	100123b2 <_printf_i+0x19e>
1001225c:	d809      	bhi.n	10012272 <_printf_i+0x5e>
1001225e:	2a6f      	cmp	r2, #111	; 0x6f
10012260:	d029      	beq.n	100122b6 <_printf_i+0xa2>
10012262:	2a70      	cmp	r2, #112	; 0x70
10012264:	d000      	beq.n	10012268 <_printf_i+0x54>
10012266:	e0b3      	b.n	100123d0 <_printf_i+0x1bc>
10012268:	2220      	movs	r2, #32
1001226a:	6809      	ldr	r1, [r1, #0]
1001226c:	430a      	orrs	r2, r1
1001226e:	6022      	str	r2, [r4, #0]
10012270:	e037      	b.n	100122e2 <_printf_i+0xce>
10012272:	2a75      	cmp	r2, #117	; 0x75
10012274:	d01f      	beq.n	100122b6 <_printf_i+0xa2>
10012276:	2a78      	cmp	r2, #120	; 0x78
10012278:	d033      	beq.n	100122e2 <_printf_i+0xce>
1001227a:	e0a9      	b.n	100123d0 <_printf_i+0x1bc>
1001227c:	000e      	movs	r6, r1
1001227e:	681a      	ldr	r2, [r3, #0]
10012280:	3642      	adds	r6, #66	; 0x42
10012282:	1d11      	adds	r1, r2, #4
10012284:	6019      	str	r1, [r3, #0]
10012286:	6813      	ldr	r3, [r2, #0]
10012288:	7033      	strb	r3, [r6, #0]
1001228a:	e0a4      	b.n	100123d6 <_printf_i+0x1c2>
1001228c:	6821      	ldr	r1, [r4, #0]
1001228e:	681a      	ldr	r2, [r3, #0]
10012290:	0608      	lsls	r0, r1, #24
10012292:	d406      	bmi.n	100122a2 <_printf_i+0x8e>
10012294:	0649      	lsls	r1, r1, #25
10012296:	d504      	bpl.n	100122a2 <_printf_i+0x8e>
10012298:	1d11      	adds	r1, r2, #4
1001229a:	6019      	str	r1, [r3, #0]
1001229c:	2300      	movs	r3, #0
1001229e:	5ed5      	ldrsh	r5, [r2, r3]
100122a0:	e002      	b.n	100122a8 <_printf_i+0x94>
100122a2:	1d11      	adds	r1, r2, #4
100122a4:	6019      	str	r1, [r3, #0]
100122a6:	6815      	ldr	r5, [r2, #0]
100122a8:	2d00      	cmp	r5, #0
100122aa:	da3b      	bge.n	10012324 <_printf_i+0x110>
100122ac:	232d      	movs	r3, #45	; 0x2d
100122ae:	9a04      	ldr	r2, [sp, #16]
100122b0:	426d      	negs	r5, r5
100122b2:	7013      	strb	r3, [r2, #0]
100122b4:	e036      	b.n	10012324 <_printf_i+0x110>
100122b6:	6821      	ldr	r1, [r4, #0]
100122b8:	681a      	ldr	r2, [r3, #0]
100122ba:	0608      	lsls	r0, r1, #24
100122bc:	d406      	bmi.n	100122cc <_printf_i+0xb8>
100122be:	0649      	lsls	r1, r1, #25
100122c0:	d504      	bpl.n	100122cc <_printf_i+0xb8>
100122c2:	6815      	ldr	r5, [r2, #0]
100122c4:	1d11      	adds	r1, r2, #4
100122c6:	6019      	str	r1, [r3, #0]
100122c8:	b2ad      	uxth	r5, r5
100122ca:	e002      	b.n	100122d2 <_printf_i+0xbe>
100122cc:	1d11      	adds	r1, r2, #4
100122ce:	6019      	str	r1, [r3, #0]
100122d0:	6815      	ldr	r5, [r2, #0]
100122d2:	4b5f      	ldr	r3, [pc, #380]	; (10012450 <_printf_i+0x23c>)
100122d4:	7e22      	ldrb	r2, [r4, #24]
100122d6:	9303      	str	r3, [sp, #12]
100122d8:	2708      	movs	r7, #8
100122da:	2a6f      	cmp	r2, #111	; 0x6f
100122dc:	d01d      	beq.n	1001231a <_printf_i+0x106>
100122de:	270a      	movs	r7, #10
100122e0:	e01b      	b.n	1001231a <_printf_i+0x106>
100122e2:	0022      	movs	r2, r4
100122e4:	2178      	movs	r1, #120	; 0x78
100122e6:	3245      	adds	r2, #69	; 0x45
100122e8:	7011      	strb	r1, [r2, #0]
100122ea:	4a5a      	ldr	r2, [pc, #360]	; (10012454 <_printf_i+0x240>)
100122ec:	6819      	ldr	r1, [r3, #0]
100122ee:	9203      	str	r2, [sp, #12]
100122f0:	1d08      	adds	r0, r1, #4
100122f2:	6822      	ldr	r2, [r4, #0]
100122f4:	6018      	str	r0, [r3, #0]
100122f6:	680d      	ldr	r5, [r1, #0]
100122f8:	0610      	lsls	r0, r2, #24
100122fa:	d402      	bmi.n	10012302 <_printf_i+0xee>
100122fc:	0650      	lsls	r0, r2, #25
100122fe:	d500      	bpl.n	10012302 <_printf_i+0xee>
10012300:	b2ad      	uxth	r5, r5
10012302:	07d3      	lsls	r3, r2, #31
10012304:	d502      	bpl.n	1001230c <_printf_i+0xf8>
10012306:	2320      	movs	r3, #32
10012308:	431a      	orrs	r2, r3
1001230a:	6022      	str	r2, [r4, #0]
1001230c:	2710      	movs	r7, #16
1001230e:	2d00      	cmp	r5, #0
10012310:	d103      	bne.n	1001231a <_printf_i+0x106>
10012312:	2320      	movs	r3, #32
10012314:	6822      	ldr	r2, [r4, #0]
10012316:	439a      	bics	r2, r3
10012318:	6022      	str	r2, [r4, #0]
1001231a:	0023      	movs	r3, r4
1001231c:	2200      	movs	r2, #0
1001231e:	3343      	adds	r3, #67	; 0x43
10012320:	701a      	strb	r2, [r3, #0]
10012322:	e002      	b.n	1001232a <_printf_i+0x116>
10012324:	270a      	movs	r7, #10
10012326:	4b4a      	ldr	r3, [pc, #296]	; (10012450 <_printf_i+0x23c>)
10012328:	9303      	str	r3, [sp, #12]
1001232a:	6863      	ldr	r3, [r4, #4]
1001232c:	60a3      	str	r3, [r4, #8]
1001232e:	2b00      	cmp	r3, #0
10012330:	db09      	blt.n	10012346 <_printf_i+0x132>
10012332:	2204      	movs	r2, #4
10012334:	6821      	ldr	r1, [r4, #0]
10012336:	4391      	bics	r1, r2
10012338:	6021      	str	r1, [r4, #0]
1001233a:	2d00      	cmp	r5, #0
1001233c:	d105      	bne.n	1001234a <_printf_i+0x136>
1001233e:	9e04      	ldr	r6, [sp, #16]
10012340:	2b00      	cmp	r3, #0
10012342:	d011      	beq.n	10012368 <_printf_i+0x154>
10012344:	e07b      	b.n	1001243e <_printf_i+0x22a>
10012346:	2d00      	cmp	r5, #0
10012348:	d079      	beq.n	1001243e <_printf_i+0x22a>
1001234a:	9e04      	ldr	r6, [sp, #16]
1001234c:	0028      	movs	r0, r5
1001234e:	0039      	movs	r1, r7
10012350:	f7fd f8b2 	bl	1000f4b8 <__aeabi_uidivmod>
10012354:	9b03      	ldr	r3, [sp, #12]
10012356:	3e01      	subs	r6, #1
10012358:	5c5b      	ldrb	r3, [r3, r1]
1001235a:	0028      	movs	r0, r5
1001235c:	7033      	strb	r3, [r6, #0]
1001235e:	0039      	movs	r1, r7
10012360:	f7fd f824 	bl	1000f3ac <__aeabi_uidiv>
10012364:	1e05      	subs	r5, r0, #0
10012366:	d1f1      	bne.n	1001234c <_printf_i+0x138>
10012368:	2f08      	cmp	r7, #8
1001236a:	d109      	bne.n	10012380 <_printf_i+0x16c>
1001236c:	6823      	ldr	r3, [r4, #0]
1001236e:	07db      	lsls	r3, r3, #31
10012370:	d506      	bpl.n	10012380 <_printf_i+0x16c>
10012372:	6863      	ldr	r3, [r4, #4]
10012374:	6922      	ldr	r2, [r4, #16]
10012376:	4293      	cmp	r3, r2
10012378:	dc02      	bgt.n	10012380 <_printf_i+0x16c>
1001237a:	2330      	movs	r3, #48	; 0x30
1001237c:	3e01      	subs	r6, #1
1001237e:	7033      	strb	r3, [r6, #0]
10012380:	9b04      	ldr	r3, [sp, #16]
10012382:	1b9b      	subs	r3, r3, r6
10012384:	6123      	str	r3, [r4, #16]
10012386:	e02b      	b.n	100123e0 <_printf_i+0x1cc>
10012388:	6809      	ldr	r1, [r1, #0]
1001238a:	681a      	ldr	r2, [r3, #0]
1001238c:	0608      	lsls	r0, r1, #24
1001238e:	d407      	bmi.n	100123a0 <_printf_i+0x18c>
10012390:	0649      	lsls	r1, r1, #25
10012392:	d505      	bpl.n	100123a0 <_printf_i+0x18c>
10012394:	1d11      	adds	r1, r2, #4
10012396:	6019      	str	r1, [r3, #0]
10012398:	6813      	ldr	r3, [r2, #0]
1001239a:	8aa2      	ldrh	r2, [r4, #20]
1001239c:	801a      	strh	r2, [r3, #0]
1001239e:	e004      	b.n	100123aa <_printf_i+0x196>
100123a0:	1d11      	adds	r1, r2, #4
100123a2:	6019      	str	r1, [r3, #0]
100123a4:	6813      	ldr	r3, [r2, #0]
100123a6:	6962      	ldr	r2, [r4, #20]
100123a8:	601a      	str	r2, [r3, #0]
100123aa:	2300      	movs	r3, #0
100123ac:	9e04      	ldr	r6, [sp, #16]
100123ae:	6123      	str	r3, [r4, #16]
100123b0:	e016      	b.n	100123e0 <_printf_i+0x1cc>
100123b2:	681a      	ldr	r2, [r3, #0]
100123b4:	1d11      	adds	r1, r2, #4
100123b6:	6019      	str	r1, [r3, #0]
100123b8:	6816      	ldr	r6, [r2, #0]
100123ba:	2100      	movs	r1, #0
100123bc:	6862      	ldr	r2, [r4, #4]
100123be:	0030      	movs	r0, r6
100123c0:	f000 f92a 	bl	10012618 <memchr>
100123c4:	2800      	cmp	r0, #0
100123c6:	d001      	beq.n	100123cc <_printf_i+0x1b8>
100123c8:	1b80      	subs	r0, r0, r6
100123ca:	6060      	str	r0, [r4, #4]
100123cc:	6863      	ldr	r3, [r4, #4]
100123ce:	e003      	b.n	100123d8 <_printf_i+0x1c4>
100123d0:	0026      	movs	r6, r4
100123d2:	3642      	adds	r6, #66	; 0x42
100123d4:	7032      	strb	r2, [r6, #0]
100123d6:	2301      	movs	r3, #1
100123d8:	6123      	str	r3, [r4, #16]
100123da:	2300      	movs	r3, #0
100123dc:	9a04      	ldr	r2, [sp, #16]
100123de:	7013      	strb	r3, [r2, #0]
100123e0:	9b07      	ldr	r3, [sp, #28]
100123e2:	aa09      	add	r2, sp, #36	; 0x24
100123e4:	9300      	str	r3, [sp, #0]
100123e6:	0021      	movs	r1, r4
100123e8:	9b06      	ldr	r3, [sp, #24]
100123ea:	9805      	ldr	r0, [sp, #20]
100123ec:	f7ff fea4 	bl	10012138 <_printf_common>
100123f0:	1c43      	adds	r3, r0, #1
100123f2:	d102      	bne.n	100123fa <_printf_i+0x1e6>
100123f4:	2001      	movs	r0, #1
100123f6:	4240      	negs	r0, r0
100123f8:	e027      	b.n	1001244a <_printf_i+0x236>
100123fa:	6923      	ldr	r3, [r4, #16]
100123fc:	0032      	movs	r2, r6
100123fe:	9906      	ldr	r1, [sp, #24]
10012400:	9805      	ldr	r0, [sp, #20]
10012402:	9d07      	ldr	r5, [sp, #28]
10012404:	47a8      	blx	r5
10012406:	1c43      	adds	r3, r0, #1
10012408:	d0f4      	beq.n	100123f4 <_printf_i+0x1e0>
1001240a:	6823      	ldr	r3, [r4, #0]
1001240c:	2500      	movs	r5, #0
1001240e:	079b      	lsls	r3, r3, #30
10012410:	d40f      	bmi.n	10012432 <_printf_i+0x21e>
10012412:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012414:	68e0      	ldr	r0, [r4, #12]
10012416:	4298      	cmp	r0, r3
10012418:	da17      	bge.n	1001244a <_printf_i+0x236>
1001241a:	0018      	movs	r0, r3
1001241c:	e015      	b.n	1001244a <_printf_i+0x236>
1001241e:	0022      	movs	r2, r4
10012420:	2301      	movs	r3, #1
10012422:	3219      	adds	r2, #25
10012424:	9906      	ldr	r1, [sp, #24]
10012426:	9805      	ldr	r0, [sp, #20]
10012428:	9e07      	ldr	r6, [sp, #28]
1001242a:	47b0      	blx	r6
1001242c:	1c43      	adds	r3, r0, #1
1001242e:	d0e1      	beq.n	100123f4 <_printf_i+0x1e0>
10012430:	3501      	adds	r5, #1
10012432:	68e3      	ldr	r3, [r4, #12]
10012434:	9a09      	ldr	r2, [sp, #36]	; 0x24
10012436:	1a9b      	subs	r3, r3, r2
10012438:	429d      	cmp	r5, r3
1001243a:	dbf0      	blt.n	1001241e <_printf_i+0x20a>
1001243c:	e7e9      	b.n	10012412 <_printf_i+0x1fe>
1001243e:	0026      	movs	r6, r4
10012440:	9b03      	ldr	r3, [sp, #12]
10012442:	3642      	adds	r6, #66	; 0x42
10012444:	781b      	ldrb	r3, [r3, #0]
10012446:	7033      	strb	r3, [r6, #0]
10012448:	e78e      	b.n	10012368 <_printf_i+0x154>
1001244a:	b00b      	add	sp, #44	; 0x2c
1001244c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001244e:	46c0      	nop			; (mov r8, r8)
10012450:	100136e1 	.word	0x100136e1
10012454:	100136f2 	.word	0x100136f2

10012458 <_putc_r>:
10012458:	b570      	push	{r4, r5, r6, lr}
1001245a:	0006      	movs	r6, r0
1001245c:	000d      	movs	r5, r1
1001245e:	0014      	movs	r4, r2
10012460:	2800      	cmp	r0, #0
10012462:	d004      	beq.n	1001246e <_putc_r+0x16>
10012464:	6983      	ldr	r3, [r0, #24]
10012466:	2b00      	cmp	r3, #0
10012468:	d101      	bne.n	1001246e <_putc_r+0x16>
1001246a:	f7ff fc29 	bl	10011cc0 <__sinit>
1001246e:	4b12      	ldr	r3, [pc, #72]	; (100124b8 <_putc_r+0x60>)
10012470:	429c      	cmp	r4, r3
10012472:	d101      	bne.n	10012478 <_putc_r+0x20>
10012474:	6874      	ldr	r4, [r6, #4]
10012476:	e008      	b.n	1001248a <_putc_r+0x32>
10012478:	4b10      	ldr	r3, [pc, #64]	; (100124bc <_putc_r+0x64>)
1001247a:	429c      	cmp	r4, r3
1001247c:	d101      	bne.n	10012482 <_putc_r+0x2a>
1001247e:	68b4      	ldr	r4, [r6, #8]
10012480:	e003      	b.n	1001248a <_putc_r+0x32>
10012482:	4b0f      	ldr	r3, [pc, #60]	; (100124c0 <_putc_r+0x68>)
10012484:	429c      	cmp	r4, r3
10012486:	d100      	bne.n	1001248a <_putc_r+0x32>
10012488:	68f4      	ldr	r4, [r6, #12]
1001248a:	68a3      	ldr	r3, [r4, #8]
1001248c:	3b01      	subs	r3, #1
1001248e:	60a3      	str	r3, [r4, #8]
10012490:	2b00      	cmp	r3, #0
10012492:	da05      	bge.n	100124a0 <_putc_r+0x48>
10012494:	69a2      	ldr	r2, [r4, #24]
10012496:	4293      	cmp	r3, r2
10012498:	db08      	blt.n	100124ac <_putc_r+0x54>
1001249a:	b2eb      	uxtb	r3, r5
1001249c:	2b0a      	cmp	r3, #10
1001249e:	d005      	beq.n	100124ac <_putc_r+0x54>
100124a0:	6823      	ldr	r3, [r4, #0]
100124a2:	b2e8      	uxtb	r0, r5
100124a4:	1c5a      	adds	r2, r3, #1
100124a6:	6022      	str	r2, [r4, #0]
100124a8:	701d      	strb	r5, [r3, #0]
100124aa:	e004      	b.n	100124b6 <_putc_r+0x5e>
100124ac:	0022      	movs	r2, r4
100124ae:	0029      	movs	r1, r5
100124b0:	0030      	movs	r0, r6
100124b2:	f7ff fa43 	bl	1001193c <__swbuf_r>
100124b6:	bd70      	pop	{r4, r5, r6, pc}
100124b8:	10013670 	.word	0x10013670
100124bc:	10013690 	.word	0x10013690
100124c0:	100136b0 	.word	0x100136b0

100124c4 <__sread>:
100124c4:	b570      	push	{r4, r5, r6, lr}
100124c6:	000c      	movs	r4, r1
100124c8:	250e      	movs	r5, #14
100124ca:	5f49      	ldrsh	r1, [r1, r5]
100124cc:	f000 f8b0 	bl	10012630 <_read_r>
100124d0:	2800      	cmp	r0, #0
100124d2:	db03      	blt.n	100124dc <__sread+0x18>
100124d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
100124d6:	181b      	adds	r3, r3, r0
100124d8:	6563      	str	r3, [r4, #84]	; 0x54
100124da:	e003      	b.n	100124e4 <__sread+0x20>
100124dc:	89a2      	ldrh	r2, [r4, #12]
100124de:	4b02      	ldr	r3, [pc, #8]	; (100124e8 <__sread+0x24>)
100124e0:	4013      	ands	r3, r2
100124e2:	81a3      	strh	r3, [r4, #12]
100124e4:	bd70      	pop	{r4, r5, r6, pc}
100124e6:	46c0      	nop			; (mov r8, r8)
100124e8:	ffffefff 	.word	0xffffefff

100124ec <__swrite>:
100124ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100124ee:	001f      	movs	r7, r3
100124f0:	898b      	ldrh	r3, [r1, #12]
100124f2:	0005      	movs	r5, r0
100124f4:	000c      	movs	r4, r1
100124f6:	0016      	movs	r6, r2
100124f8:	05db      	lsls	r3, r3, #23
100124fa:	d505      	bpl.n	10012508 <__swrite+0x1c>
100124fc:	230e      	movs	r3, #14
100124fe:	5ec9      	ldrsh	r1, [r1, r3]
10012500:	2200      	movs	r2, #0
10012502:	2302      	movs	r3, #2
10012504:	f000 f874 	bl	100125f0 <_lseek_r>
10012508:	89a2      	ldrh	r2, [r4, #12]
1001250a:	4b05      	ldr	r3, [pc, #20]	; (10012520 <__swrite+0x34>)
1001250c:	0028      	movs	r0, r5
1001250e:	4013      	ands	r3, r2
10012510:	81a3      	strh	r3, [r4, #12]
10012512:	0032      	movs	r2, r6
10012514:	230e      	movs	r3, #14
10012516:	5ee1      	ldrsh	r1, [r4, r3]
10012518:	003b      	movs	r3, r7
1001251a:	f000 f81f 	bl	1001255c <_write_r>
1001251e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012520:	ffffefff 	.word	0xffffefff

10012524 <__sseek>:
10012524:	b570      	push	{r4, r5, r6, lr}
10012526:	000c      	movs	r4, r1
10012528:	250e      	movs	r5, #14
1001252a:	5f49      	ldrsh	r1, [r1, r5]
1001252c:	f000 f860 	bl	100125f0 <_lseek_r>
10012530:	89a3      	ldrh	r3, [r4, #12]
10012532:	1c42      	adds	r2, r0, #1
10012534:	d103      	bne.n	1001253e <__sseek+0x1a>
10012536:	4a05      	ldr	r2, [pc, #20]	; (1001254c <__sseek+0x28>)
10012538:	4013      	ands	r3, r2
1001253a:	81a3      	strh	r3, [r4, #12]
1001253c:	e004      	b.n	10012548 <__sseek+0x24>
1001253e:	2280      	movs	r2, #128	; 0x80
10012540:	0152      	lsls	r2, r2, #5
10012542:	4313      	orrs	r3, r2
10012544:	81a3      	strh	r3, [r4, #12]
10012546:	6560      	str	r0, [r4, #84]	; 0x54
10012548:	bd70      	pop	{r4, r5, r6, pc}
1001254a:	46c0      	nop			; (mov r8, r8)
1001254c:	ffffefff 	.word	0xffffefff

10012550 <__sclose>:
10012550:	b510      	push	{r4, lr}
10012552:	230e      	movs	r3, #14
10012554:	5ec9      	ldrsh	r1, [r1, r3]
10012556:	f000 f815 	bl	10012584 <_close_r>
1001255a:	bd10      	pop	{r4, pc}

1001255c <_write_r>:
1001255c:	b570      	push	{r4, r5, r6, lr}
1001255e:	0005      	movs	r5, r0
10012560:	0008      	movs	r0, r1
10012562:	0011      	movs	r1, r2
10012564:	2200      	movs	r2, #0
10012566:	4c06      	ldr	r4, [pc, #24]	; (10012580 <_write_r+0x24>)
10012568:	6022      	str	r2, [r4, #0]
1001256a:	001a      	movs	r2, r3
1001256c:	f7f8 ff28 	bl	1000b3c0 <_write>
10012570:	1c43      	adds	r3, r0, #1
10012572:	d103      	bne.n	1001257c <_write_r+0x20>
10012574:	6823      	ldr	r3, [r4, #0]
10012576:	2b00      	cmp	r3, #0
10012578:	d000      	beq.n	1001257c <_write_r+0x20>
1001257a:	602b      	str	r3, [r5, #0]
1001257c:	bd70      	pop	{r4, r5, r6, pc}
1001257e:	46c0      	nop			; (mov r8, r8)
10012580:	10015fec 	.word	0x10015fec

10012584 <_close_r>:
10012584:	2300      	movs	r3, #0
10012586:	b570      	push	{r4, r5, r6, lr}
10012588:	4c06      	ldr	r4, [pc, #24]	; (100125a4 <_close_r+0x20>)
1001258a:	0005      	movs	r5, r0
1001258c:	0008      	movs	r0, r1
1001258e:	6023      	str	r3, [r4, #0]
10012590:	f7fa f918 	bl	1000c7c4 <_close>
10012594:	1c43      	adds	r3, r0, #1
10012596:	d103      	bne.n	100125a0 <_close_r+0x1c>
10012598:	6823      	ldr	r3, [r4, #0]
1001259a:	2b00      	cmp	r3, #0
1001259c:	d000      	beq.n	100125a0 <_close_r+0x1c>
1001259e:	602b      	str	r3, [r5, #0]
100125a0:	bd70      	pop	{r4, r5, r6, pc}
100125a2:	46c0      	nop			; (mov r8, r8)
100125a4:	10015fec 	.word	0x10015fec

100125a8 <_fstat_r>:
100125a8:	2300      	movs	r3, #0
100125aa:	b570      	push	{r4, r5, r6, lr}
100125ac:	4c06      	ldr	r4, [pc, #24]	; (100125c8 <_fstat_r+0x20>)
100125ae:	0005      	movs	r5, r0
100125b0:	0008      	movs	r0, r1
100125b2:	0011      	movs	r1, r2
100125b4:	6023      	str	r3, [r4, #0]
100125b6:	f7fa f909 	bl	1000c7cc <_fstat>
100125ba:	1c43      	adds	r3, r0, #1
100125bc:	d103      	bne.n	100125c6 <_fstat_r+0x1e>
100125be:	6823      	ldr	r3, [r4, #0]
100125c0:	2b00      	cmp	r3, #0
100125c2:	d000      	beq.n	100125c6 <_fstat_r+0x1e>
100125c4:	602b      	str	r3, [r5, #0]
100125c6:	bd70      	pop	{r4, r5, r6, pc}
100125c8:	10015fec 	.word	0x10015fec

100125cc <_isatty_r>:
100125cc:	2300      	movs	r3, #0
100125ce:	b570      	push	{r4, r5, r6, lr}
100125d0:	4c06      	ldr	r4, [pc, #24]	; (100125ec <_isatty_r+0x20>)
100125d2:	0005      	movs	r5, r0
100125d4:	0008      	movs	r0, r1
100125d6:	6023      	str	r3, [r4, #0]
100125d8:	f7fa f8fe 	bl	1000c7d8 <_isatty>
100125dc:	1c43      	adds	r3, r0, #1
100125de:	d103      	bne.n	100125e8 <_isatty_r+0x1c>
100125e0:	6823      	ldr	r3, [r4, #0]
100125e2:	2b00      	cmp	r3, #0
100125e4:	d000      	beq.n	100125e8 <_isatty_r+0x1c>
100125e6:	602b      	str	r3, [r5, #0]
100125e8:	bd70      	pop	{r4, r5, r6, pc}
100125ea:	46c0      	nop			; (mov r8, r8)
100125ec:	10015fec 	.word	0x10015fec

100125f0 <_lseek_r>:
100125f0:	b570      	push	{r4, r5, r6, lr}
100125f2:	0005      	movs	r5, r0
100125f4:	0008      	movs	r0, r1
100125f6:	0011      	movs	r1, r2
100125f8:	2200      	movs	r2, #0
100125fa:	4c06      	ldr	r4, [pc, #24]	; (10012614 <_lseek_r+0x24>)
100125fc:	6022      	str	r2, [r4, #0]
100125fe:	001a      	movs	r2, r3
10012600:	f7fa f8ec 	bl	1000c7dc <_lseek>
10012604:	1c43      	adds	r3, r0, #1
10012606:	d103      	bne.n	10012610 <_lseek_r+0x20>
10012608:	6823      	ldr	r3, [r4, #0]
1001260a:	2b00      	cmp	r3, #0
1001260c:	d000      	beq.n	10012610 <_lseek_r+0x20>
1001260e:	602b      	str	r3, [r5, #0]
10012610:	bd70      	pop	{r4, r5, r6, pc}
10012612:	46c0      	nop			; (mov r8, r8)
10012614:	10015fec 	.word	0x10015fec

10012618 <memchr>:
10012618:	b2c9      	uxtb	r1, r1
1001261a:	1882      	adds	r2, r0, r2
1001261c:	4290      	cmp	r0, r2
1001261e:	d004      	beq.n	1001262a <memchr+0x12>
10012620:	7803      	ldrb	r3, [r0, #0]
10012622:	428b      	cmp	r3, r1
10012624:	d002      	beq.n	1001262c <memchr+0x14>
10012626:	3001      	adds	r0, #1
10012628:	e7f8      	b.n	1001261c <memchr+0x4>
1001262a:	2000      	movs	r0, #0
1001262c:	4770      	bx	lr
	...

10012630 <_read_r>:
10012630:	b570      	push	{r4, r5, r6, lr}
10012632:	0005      	movs	r5, r0
10012634:	0008      	movs	r0, r1
10012636:	0011      	movs	r1, r2
10012638:	2200      	movs	r2, #0
1001263a:	4c06      	ldr	r4, [pc, #24]	; (10012654 <_read_r+0x24>)
1001263c:	6022      	str	r2, [r4, #0]
1001263e:	001a      	movs	r2, r3
10012640:	f7f8 fe9e 	bl	1000b380 <_read>
10012644:	1c43      	adds	r3, r0, #1
10012646:	d103      	bne.n	10012650 <_read_r+0x20>
10012648:	6823      	ldr	r3, [r4, #0]
1001264a:	2b00      	cmp	r3, #0
1001264c:	d000      	beq.n	10012650 <_read_r+0x20>
1001264e:	602b      	str	r3, [r5, #0]
10012650:	bd70      	pop	{r4, r5, r6, pc}
10012652:	46c0      	nop			; (mov r8, r8)
10012654:	10015fec 	.word	0x10015fec

10012658 <test>:
10012658:	00000083 00004000 00000200 00c800c8     .....@..........
10012668:	41a00000 42700000 3f000000 3e666666     ...A..pB...?fff>
10012678:	3f2ccccd 3f000000 3f000000 0000000a     ..,?...?...?....
10012688:	72617453 676e6974 61694220 6f4c2073     Starting Bias Lo
10012698:	5220706f 73646165 00000000 706d6153     op Reads....Samp
100126a8:	3a73656c 0a642520 00000000 65636341     les: %d.....Acce
100126b8:	666f206c 74657366 74616420 57482061     l offset data HW
100126c8:	62205453 253d7469 25203a64 66342e37     ST bit=%d: %7.4f
100126d8:	2e372520 25206634 66342e37 00000a0d      %7.4f %7.4f....
100126e8:	6f727947 66666f20 20746573 61746164     Gyro offset data
100126f8:	53574820 69622054 64253d74 3725203a      HWST bit=%d: %7
10012708:	2066342e 342e3725 37252066 0d66342e     .4f %7.4f %7.4f.
10012718:	0000000a 78352325 2325203a 0a0d7835     ....%#5x: %#5x..
10012728:	00000000 706d6f43 20737361 20746f6e     ....Compass not 
10012738:	6e756f66 00002e64 72617453 676e6974     found...Starting
10012748:	55504d20 30303536 53574820 000d2154      MPU6500 HWST!..
10012758:	72746552 69766569 4220676e 65736169     Retrieving Biase
10012768:	00000d73 72746552 69766569 4220676e     s...Retrieving B
10012778:	65736169 72452073 20726f72 6f70202d     iases Error - po
10012788:	62697373 4920656c 65204332 726f7272     ssible I2C error
10012798:	00000000 72746552 69766569 5320676e     ....Retrieving S
100127a8:	69422054 73657361 00000000 72746552     T Biases....Retr
100127b8:	69766569 5320676e 69422054 73657361     ieving ST Biases
100127c8:	72724520 2d20726f 736f7020 6c626973      Error - possibl
100127d8:	32492065 72652043 00726f72 64616552     e I2C error.Read
100127e8:	20676e69 2050544f 69676552 72657473     ing OTP Register
100127f8:	72724520 002e726f 65636341 544f206c      Error..Accel OT
10012808:	64253a50 6425202c 6425202c 0000000a     P:%d, %d, %d....
10012818:	45434341 52433a4c 52455449 41204149     ACCEL:CRITERIA A
10012828:	00000000 73616942 6968535f 253d7466     ....Bias_Shift=%
10012838:	66342e37 6942202c 525f7361 253d6765     7.4f, Bias_Reg=%
10012848:	66342e37 6942202c 485f7361 3d545357     7.4f, Bias_HWST=
10012858:	342e3725 000a0d66 2050544f 756c6176     %7.4f...OTP valu
10012868:	25203a65 66342e37 00000a0d 69746172     e: %7.4f....rati
10012878:	37253d6f 2c66342e 72687420 6f687365     o=%7.4f, thresho
10012888:	253d646c 66342e37 00000a0d 45434341     ld=%7.4f....ACCE
10012898:	6146204c 41206c69 20736978 6425203d     L Fail Axis = %d
100128a8:	0000000a 45434341 52433a4c 52455449     ....ACCEL:CRITER
100128b8:	42204149 0000000d 206e694d 203a474d     IA B....Min MG: 
100128c8:	342e3725 000a0d66 2078614d 203a474d     %7.4f...Max MG: 
100128d8:	342e3725 000a0d66 73616942 6968735f     %7.4f...Bias_shi
100128e8:	253d7466 66342e37 7473202c 2e37253d     ft=%7.4f, st=%7.
100128f8:	202c6634 3d676572 342e3725 00000a66     4f, reg=%7.4f...
10012908:	65636341 4146206c 61204c49 3a736978     Accel FAIL axis:
10012918:	3c206425 3232203d 20676d35 3e20726f     %d <= 225mg or >
10012928:	3736203d 0a676d35 00000000 65636341     = 675mg.....Acce
10012938:	52433a6c 52455449 43204149 6962203a     l:CRITERIA C: bi
10012948:	6c207361 20737365 6e616874 2e372520     as less than %7.
10012958:	000a6634 4c494146 203a4445 65636341     4f..FAILED: Acce
10012968:	7861206c 253a7369 203d2064 20646c25     l axis:%d = %ld 
10012978:	3035203e 0a676d30 00000000 65636341     > 500mg.....Acce
10012988:	6553206c 5420666c 20747365 75736552     l Self Test Resu
10012998:	3a73746c 0a642520 00000000 6f727947     lts: %d.....Gyro
100129a8:	50544f20 2c64253a 2c642520 0d642520      OTP:%d, %d, %d.
100129b8:	0000000a 4f525947 4952433a 49524554     ....GYRO:CRITERI
100129c8:	00412041 6f727947 69614620 7841206c     A A.Gyro Fail Ax
100129d8:	3d207369 0a642520 00000000 4f525947     is = %d.....GYRO
100129e8:	4952433a 49524554 0d422041 00000000     :CRITERIA B.....
100129f8:	2078614d 3a535044 2e372520 0a0d6634     Max DPS: %7.4f..
10012a08:	00000000 4f525947 49414620 7861204c     ....GYRO FAIL ax
10012a18:	253a7369 72672064 65746165 68742072     is:%d greater th
10012a28:	36206e61 73706430 0000000a 6f727947     an 60dps....Gyro
10012a38:	4952433a 49524554 3a432041 61696220     :CRITERIA C: bia
10012a48:	656c2073 74207373 206e6168 342e3725     s less than %7.4
10012a58:	00000a66 4c494146 203a4445 6f727947     f...FAILED: Gyro
10012a68:	69786120 64253a73 25203d20 3e20646c      axis:%d = %ld >
10012a78:	64303220 000a7370 6f727947 6c655320      20dps..Gyro Sel
10012a88:	65542066 52207473 6c757365 203a7374     f Test Results: 
10012a98:	000a6425 706d6f43 20737361 666c6553     %d..Compass Self
10012aa8:	73655420 65522074 746c7573 25203a73      Test Results: %
10012ab8:	00000a64 74697845 20676e69 54535748     d...Exiting HWST
10012ac8:	00000000                                ....

10012acc <hw>:
10012acc:	04000069 01410080 01000000 00001333     i.....A.....3...

10012adc <reg>:
10012adc:	0c1a1975 1c1b236a 201f1e1d 3b437472     u...j#..... rtC;
10012aec:	3a393841 376c6b69 6d24776f 2625706e     A89:ikl7ow$mnp%&
10012afc:	2a292827 67646334 00000049 8db3aab8     '()*4cdgI.......
10012b0c:	350d98b4 0000005d 006ccd4c 002cc90c     ...5]...L.l...,.
10012b1c:	00765636 00664626 c4abf2fe dfdff1aa     6Vv.&Ff.........
10012b2c:	dfdfafbb aaaaaab8 c5c388b0 000000c7     ................
10012b3c:	f3b9b1d8 b691a38b 00d9b409 f3b9b1da     ................
10012b4c:	b691a38b 00dab4da 1000a792 1000a792     ................
10012b5c:	1000a792 1000a792 1000a792 1000a792     ................
10012b6c:	1000a792 1000a792 1000a792 1000a792     ................
10012b7c:	1000a792 1000a792 1000a792 1000a792     ................
10012b8c:	1000a792 1000a792 1000a792 1000a792     ................
10012b9c:	1000a792 1000a7ae 1000a7ae 1000a7ae     ................
10012bac:	1000a7ae 1000a7ae 1000a7ae 1000a7ae     ................
10012bbc:	1000a7ae 1000a7ae 1000a7ae 1000a7d0     ................
10012bcc:	1000a7d0 1000a7d0 1000a7d0 1000a7d0     ................
10012bdc:	1000a7d0 1000a7d0 1000a7d0 1000a7d0     ................
10012bec:	1000a7d0 1000a7f2 1000a7f2 1000a7f2     ................
10012bfc:	1000a7f2 1000a7f2 1000a7f2 1000a800     ................
10012c0c:	1000a800 1000a800 1000a800 1000a800     ................
10012c1c:	1000a800 1000a800 1000a800 1000a800     ................
10012c2c:	1000a80e 1000a80e 1000a76c 1000a76c     ........l...l...
10012c3c:	1000a786 1000a76c 34333231 00003635     ....l...123456..
10012c4c:	efcdab00 00efcdab b2d60600 f8f005f0     ................
10012c5c:	00000000                                ....

10012c60 <ble_mgr_gatt_server_handle>:
	...
10012c78:	1000a1a5 1000a045 10009921 00000000     ....E...!.......
10012c88:	69766544 64206563 6f637369 63656e6e     Device disconnec
10012c98:	20646574 73616552 303a6e6f 32302578     ted Reason:0x%02
10012ca8:	61482078 656c646e 2578303d 00000078     x Handle=0x%x...
10012cb8:	72696150 20676e69 6c696166 2e2e6465     Pairing failed..
10012cc8:	7369442e 6e6e6f63 69746365 0000676e     .Disconnecting..
10012cd8:	63736944 656e6e6f 52207463 65757165     Disconnect Reque
10012ce8:	46207473 656c6961 00000064 72696150     st Failed...Pair
10012cf8:	20676e69 636f7270 72756465 6f632065     ing procedure co
10012d08:	656c706d 20646574 63637573 66737365     mpleted successf
10012d18:	796c6c75 00000000 20454c42 69766544     ully....BLE Devi
10012d28:	6e206563 6620746f 646e756f 206f7420     ce not found to 
10012d38:	726f7473 68742065 61702065 6e697269     store the pairin
10012d48:	6e692067 00006f66 72636e45 69747079     g info..Encrypti
10012d58:	4e206e6f 7320746f 74726174 00006465     on Not started..
10012d68:	76616c53 65532065 69727563 52207974     Slave Security R
10012d78:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10012d88:	206e6f69 6c696146 00006465 72696150     ion Failed..Pair
10012d98:	71655220 74736575 41202d20 65687475      Request - Authe
10012da8:	6369746e 6f697461 6146206e 64656c69     ntication Failed
10012db8:	00000000 65746e45 68742072 61502065     ....Enter the Pa
10012dc8:	656b7373 2d362879 69676944 69202974     sskey(6-Digit) i
10012dd8:	6554206e 6e696d72 003a6c61 206e6950     n Terminal:.Pin 
10012de8:	656d6954 0074756f 63736944 656e6e6f     Timeout.Disconne
10012df8:	6e697463 2e2e2067 0000002e 61656c50     cting ......Plea
10012e08:	45206573 7265746e 65687420 6c6f6620     se Enter the fol
10012e18:	69776f6c 5020676e 2d737361 65646f63     lowing Pass-code
10012e28:	206e6f28 6568746f 65442072 65636976     (on other Device
10012e38:	00003a29 72696150 79656b2d 70657220     ):..Pair-key rep
10012e48:	6620796c 656c6961 00000064 20424f4f     ly failed...OOB 
10012e58:	74616546 20657275 20746f4e 70707573     Feature Not supp
10012e68:	6574726f 00000064 65746e45 20646572     orted...Entered 
10012e78:	73736150 646f632d 00003a65 72696150     Pass-code:..Pair
10012e88:	20676e69 6f666e69 74616d72 206e6f69     ing information 
10012e98:	7020666f 20726565 69766564 69206563     of peer device i
10012ea8:	6f6e2073 76612074 616c6961 2e656c62     s not available.
10012eb8:	00000000 61656c50 75206573 6961706e     ....Please unpai
10012ec8:	68742072 65642065 65636976 6f726620     r the device fro
10012ed8:	6570206d 64207265 63697665 6f6d2865     m peer device(mo
10012ee8:	656c6962 65732029 6e697474 6d207367     bile) settings m
10012ef8:	20756e65 20646e61 72617473 61702074     enu and start pa
10012f08:	6e697269 67612067 006e6961 72636e45     iring again.Encr
10012f18:	69747079 52206e6f 65757165 52207473     yption Request R
10012f28:	796c7065 69614620 0064656c 6e616353     eply Failed.Scan
10012f38:	676e696e 61662020 64656c69 00000000     ning  failed....
10012f48:	2055544d 6e616843 46206567 656c6961     MTU Change Faile
10012f58:	43202c64 656e6e6f 6f697463 6148206e     d, Connection Ha
10012f68:	656c646e 2c64253a 65704f20 69746172     ndle:%d, Operati
10012f78:	253a6e6f 00000064 72636e45 69747079     on:%d...Encrypti
10012f88:	66206e6f 656c6961 00000064 72636e45     on failed...Encr
10012f98:	69747079 63206e6f 6c706d6f 64657465     yption completed
10012fa8:	63757320 73736563 6c6c7566 00000079      successfully...
10012fb8:	20454c42 69766544 6e206563 6620746f     BLE Device not f
10012fc8:	646e756f 636e6520 74707972 206e6f69     ound encryption 
10012fd8:	6f666e69 00000000 6f666e49 78616d3a     info....Info:max
10012fe8:	6d756d69 2e6f6e20 7320666f 206e6163     imum no.of scan 
10012ff8:	69766564 72206563 68636165 2e2e6465     device reached..
10013008:	6f74532e 6e697070 63532067 00006e61     .Stopping Scan..
10013018:	6c696146 74206465 7473206f 7320706f     Failed to stop s
10013028:	6e6e6163 00676e69 74696e49 696c6169     canning.Initiali
10013038:	676e697a 4d415320 00313142 424d4153     zing SAMB11.SAMB
10013048:	49203131 6974696e 7a696c61 6f697461     11 Initializatio
10013058:	6166206e 64656c69 00000000 61656c50     n failed....Plea
10013068:	63206573 6b636568 65687420 776f7020     se check the pow
10013078:	61207265 6320646e 656e6e6f 6f697463     er and connectio
10013088:	202f206e 64726168 65726177 6e6f6320     n / hardware con
10013098:	7463656e 0000726f 454d5441 4c422d4c     nector..ATMEL-BL
100130a8:	00000045 69766544 6e206563 20656d61     E...Device name 
100130b8:	20746573 6c696166 00006465 61204442     set failed..BD a
100130c8:	65726464 67207373 66207465 656c6961     ddress get faile
100130d8:	00000064 41204442 65726464 303a7373     d...BD Address:0
100130e8:	32302578 32302558 32302558 32302558     x%02X%02X%02X%02
100130f8:	32302558 32302558 41202c58 65726464     X%02X%02X, Addre
10013108:	54207373 3a657079 00006425 20746553     ss Type:%d..Set 
10013118:	20454c42 69766544 63206563 69666e6f     BLE Device confi
10013128:	61727567 6e6f6974 69616620 0064656c     guration failed.
10013138:	20746553 20454c42 69766544 41206563     Set BLE Device A
10013148:	65726464 66207373 656c6961 00000064     ddress failed...
10013158:	6e616353 676e696e 502e2e2e 7361656c     Scanning...Pleas
10013168:	61772065 2e2e7469 0000002e 76616c53     e wait......Slav
10013178:	65732065 69727563 72207974 65757165     e security reque
10013188:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10013198:	65746365 6f742064 65657020 65642072     ected to peer de
100131a8:	65636976 74697720 64612068 73657264     vice with addres
100131b8:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
100131c8:	78323025 78323025 78323025 00000000     %02x%02x%02x....
100131d8:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
100131e8:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
100131f8:	61522067 6d6f646e 64646120 73736572     g Random address
10013208:	69616620 2a64656c 0000002a 2078614d      failed**...Max 
10013218:	626d756e 6f207265 6f632066 63656e6e     number of connec
10013228:	6e6f6974 61657220 64656863 6425203a     tion reached: %d
10013238:	3d3d3d20 7369443e 6e6e6f63 69746365      ===>Disconnecti
10013248:	2e2e676e 0000002e 69766544 43206563     ng......Device C
10013258:	656e6e6f 6f697463 6146206e 64656c69     onnection Failed
10013268:	53202d20 75746174 25203a73 00000064      - Status: %d...
10013278:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
10013288:	61642074 73206174 66207465 656c6961     t data set faile
10013298:	00000064                                d...

1001329c <ble_mgr_gap_handle>:
1001329c:	1000a1a9 1000a129 1000a01d 00000000     ....)...........
100132ac:	00000000 1000a4a1 10009931 1000992d     ........1...-...
100132bc:	10009acd 100099cd 10009cb1 10009ae5     ................
100132cc:	10009ded 10009f49 1000a075 1000a6ad     ....I...u.......
	...
100132e8:	00002121 1000c344 1000c338 1000c32c     !!..D...8...,...
100132f8:	1000c320 1000c314 1000c308 1000c2fa      ...............
10013308:	1000c2ec 1000c2de 1000c2d0 1000c2c2     ................
10013318:	1000c2b4 1000c2a6 1000c298 1000c28a     ................
10013328:	1000c27c 1000c26e 1000c260 1000c252     |...n...`...R...
10013338:	1000c244 1000c236 1000c228 1000c21a     D...6...(.......
10013348:	1000c20c 1000c1fe 1000c1f0 1000c1e2     ................
10013358:	1000c1d6 1000c1ca 1000c1be 1000c1b2     ................
10013368:	1000c1a6 1000c19a 1000c18e 1000c182     ................
10013378:	1000c174 1000c166 1000c158 1000c14a     t...f...X...J...
10013388:	1000c13c 1000c12e 1000c120 1000c112     <....... .......
10013398:	1000c104 1000c0f6 1000c0e8 1000c0da     ................
100133a8:	1000c0cc 1000c0be 1000c0b0 1000c0a2     ................
100133b8:	1000c096 1000c08a 1000c350 1000c782     ........P.......
100133c8:	1000c77a 1000c772 1000c75a 1000c744     z...r...Z...D...
100133d8:	1000c6c6 1000c6ae 1000c696 1000c67e     ............~...
100133e8:	1000c666 1000c64e 1000c636 1000c61e     f...N...6.......
100133f8:	1000c606 1000c78a 1000c78a 1000c78a     ................
10013408:	1000c78a 1000c78a 1000c78a 1000c78a     ................
10013418:	1000c78a 1000c5ee 1000c5d6 1000c5be     ................
10013428:	1000c5a8 1000c590 1000c78a 1000c78a     ................
10013438:	1000c78a 1000c78a 1000c78a 1000c78a     ................
10013448:	1000c578 1000c560 1000c548 1000c530     x...`...H...0...
10013458:	1000c78a 1000c518 1000c500 1000c78a     ................
10013468:	1000c78a 1000c4ea 1000c4d4 1000c4be     ................
10013478:	1000c4a8 1000c78a 1000c78a 1000c78a     ................
10013488:	1000c78a 1000c78a 1000c78a 1000c78a     ................
10013498:	1000c78a 1000c4a0 1000c498 1000c490     ................
100134a8:	1000c47c 1000c464 1000c44c 1000c434     |...d...L...4...
100134b8:	1000c41c 1000c404 1000c3ec 1000c3d6     ................
100134c8:	1000c3c0 1000c3a8 1000c390 4f464946     ............FIFO
100134d8:	6425203a 20642520 202c6425 25206425     : %d %d %d, %d %
100134e8:	64252064 6c25202c 6c252064 6c252064     d %d, %ld %ld %l
100134f8:	6c252064 00000064 6f727947 6425203a     d %ld...Gyro: %d
10013508:	20642520 00006425 706d6554 6c25203a      %d %d..Temp: %l
10013518:	00000064 65636341 25203a6c 64252064     d...Accel: %d %d
10013528:	00642520 706d6f43 3a737361 20642520      %d.Compass: %d 
10013538:	25206425 00000064 4c504d65 312e3520     %d %d...eMPL 5.1
10013548:	00000000 656d7441 6f43206c 002e7072              ....Atmel Corp.

10013557 <CSWTCH.47>:
10013557:	03010300 03030303 03030303 00020303     ................
10013567:	00fc8a00 00fbae10 00fc6c10 00fc4410     .........l...D..
10013577:	00fc6c10 00fc3810 00fc6c10 00fc4410     .l...8...l...D..
10013587:	00fbae10 00fbae10 00fc3810 00fc4410     .........8...D..
10013597:	00fcf010 00fcf010 00fcf010 00fc7210     .............r..
100135a7:	00fbae10 00fbae10 00fc5810 00fc4210     .........X...B..
100135b7:	00fc5810 00fc3810 00fc5810 00fc4210     .X...8...X...B..
100135c7:	00fbae10 00fbae10 00fc3810 00fc4210     .........8...B..
100135d7:	00fcf010 00fcf010 00fcf010 00fcfc10     ................
100135e7:	00ffe810 00ff4610 00ff4610 00ff4410     .....F...F...D..
100135f7:	00ffda10 00ffda10 00ffd010 00ff4410     .............D..
10013607:	00ffda10 00ffd010 00ffda10 00ff4410     .............D..
10013617:	00ffe010 00ffe010 00ffe010 01006a10     .............j..
10013627:	01095c10 01081c10 01081c10 01081a10     .\..............
10013637:	01093410 01093410 01092610 01081a10     .4...4...&......
10013647:	01093410 01092610 01093410 01081a10     .4...&...4......
10013657:	01093c10 01093c10 01093c10 010b3c10     .<...<...<...<..
10013667:	00004310 01376c00                                .C...

1001366c <_global_impure_ptr>:
1001366c:	1001376c                                l7..

10013670 <__sf_fake_stdin>:
	...

10013690 <__sf_fake_stdout>:
	...

100136b0 <__sf_fake_stderr>:
	...
100136d0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
100136e0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
100136f0:	31300046 35343332 39383736 64636261     F.0123456789abcd
10013700:	00006665                                ef..

10013704 <_init>:
10013704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013706:	46c0      	nop			; (mov r8, r8)
10013708:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001370a:	bc08      	pop	{r3}
1001370c:	469e      	mov	lr, r3
1001370e:	4770      	bx	lr

10013710 <__init_array_start>:
10013710:	10008095 	.word	0x10008095

10013714 <_fini>:
10013714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013716:	46c0      	nop			; (mov r8, r8)
10013718:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001371a:	bc08      	pop	{r3}
1001371c:	469e      	mov	lr, r3
1001371e:	4770      	bx	lr

10013720 <__fini_array_start>:
10013720:	1000806d 	.word	0x1000806d
