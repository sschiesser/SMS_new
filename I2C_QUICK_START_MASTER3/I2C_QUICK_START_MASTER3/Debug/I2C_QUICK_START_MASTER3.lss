
I2C_QUICK_START_MASTER3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000124a8  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000b4  1001a4a8  1001a4a8  0001a4a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003434  1001a560  1001a560  0001a55c  2**3
                  ALLOC
  3 .stack        00000804  1001d994  1001d994  0001a55c  2**0
                  ALLOC
  4 .ARM.exidx    00000008  1001e198  1001e198  0001e198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.attributes 00000028  00000000  00000000  0001e1a0  2**0
                  CONTENTS, READONLY
  6 .comment      00000124  00000000  00000000  0001e1c8  2**0
                  CONTENTS, READONLY
  7 .debug_info   00033f52  00000000  00000000  0001e2ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005805  00000000  00000000  0005223e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00011c88  00000000  00000000  00057a43  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ff8  00000000  00000000  000696cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001b00  00000000  00000000  0006a6c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000254b0  00000000  00000000  0006c1c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00012b15  00000000  00000000  00091673  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001486da  00000000  00000000  000a4188  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004750  00000000  00000000  001ec864  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008000:	4813      	ldr	r0, [pc, #76]	; (10008050 <app_entry+0x50>)
10008002:	4914      	ldr	r1, [pc, #80]	; (10008054 <app_entry+0x54>)
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008004:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008006:	4288      	cmp	r0, r1
10008008:	d00d      	beq.n	10008026 <app_entry+0x26>
        for (; pDest < &_erelocate;) {
1000800a:	4b13      	ldr	r3, [pc, #76]	; (10008058 <app_entry+0x58>)
1000800c:	4299      	cmp	r1, r3
1000800e:	d20a      	bcs.n	10008026 <app_entry+0x26>
10008010:	43ca      	mvns	r2, r1
10008012:	18d2      	adds	r2, r2, r3
10008014:	2300      	movs	r3, #0
10008016:	0892      	lsrs	r2, r2, #2
10008018:	3201      	adds	r2, #1
1000801a:	0092      	lsls	r2, r2, #2
            *pDest++ = *pSrc++;
1000801c:	58c4      	ldr	r4, [r0, r3]
1000801e:	50cc      	str	r4, [r1, r3]
10008020:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008022:	4293      	cmp	r3, r2
10008024:	d1fa      	bne.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008026:	480d      	ldr	r0, [pc, #52]	; (1000805c <app_entry+0x5c>)
10008028:	4b0d      	ldr	r3, [pc, #52]	; (10008060 <app_entry+0x60>)
1000802a:	4298      	cmp	r0, r3
1000802c:	d20b      	bcs.n	10008046 <app_entry+0x46>
1000802e:	43c1      	mvns	r1, r0
        *pDest++ = 0;
10008030:	2400      	movs	r4, #0
10008032:	18c9      	adds	r1, r1, r3
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008034:	2300      	movs	r3, #0
10008036:	0889      	lsrs	r1, r1, #2
10008038:	3101      	adds	r1, #1
1000803a:	0089      	lsls	r1, r1, #2
        *pDest++ = 0;
1000803c:	18c2      	adds	r2, r0, r3
1000803e:	3304      	adds	r3, #4
10008040:	6014      	str	r4, [r2, #0]
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008042:	428b      	cmp	r3, r1
10008044:	d1fa      	bne.n	1000803c <app_entry+0x3c>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
10008046:	4b07      	ldr	r3, [pc, #28]	; (10008064 <app_entry+0x64>)
10008048:	4798      	blx	r3

    /* Branch to main function */
    main();
1000804a:	4b07      	ldr	r3, [pc, #28]	; (10008068 <app_entry+0x68>)
1000804c:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
1000804e:	bd10      	pop	{r4, pc}
10008050:	1001a4a8 	.word	0x1001a4a8
10008054:	1001a4a8 	.word	0x1001a4a8
10008058:	1001a55c 	.word	0x1001a55c
1000805c:	1001a560 	.word	0x1001a560
10008060:	1001d994 	.word	0x1001d994
10008064:	10017d11 	.word	0x10017d11
10008068:	1000da0d 	.word	0x1000da0d

1000806c <__do_global_dtors_aux>:
1000806c:	b510      	push	{r4, lr}
1000806e:	4c06      	ldr	r4, [pc, #24]	; (10008088 <__do_global_dtors_aux+0x1c>)
10008070:	7823      	ldrb	r3, [r4, #0]
10008072:	2b00      	cmp	r3, #0
10008074:	d107      	bne.n	10008086 <__do_global_dtors_aux+0x1a>
10008076:	4b05      	ldr	r3, [pc, #20]	; (1000808c <__do_global_dtors_aux+0x20>)
10008078:	2b00      	cmp	r3, #0
1000807a:	d002      	beq.n	10008082 <__do_global_dtors_aux+0x16>
1000807c:	4804      	ldr	r0, [pc, #16]	; (10008090 <__do_global_dtors_aux+0x24>)
1000807e:	e000      	b.n	10008082 <__do_global_dtors_aux+0x16>
10008080:	bf00      	nop
10008082:	2301      	movs	r3, #1
10008084:	7023      	strb	r3, [r4, #0]
10008086:	bd10      	pop	{r4, pc}
10008088:	1001a560 	.word	0x1001a560
1000808c:	00000000 	.word	0x00000000
10008090:	1001e1a0 	.word	0x1001e1a0

10008094 <frame_dummy>:
10008094:	4b08      	ldr	r3, [pc, #32]	; (100080b8 <frame_dummy+0x24>)
10008096:	b510      	push	{r4, lr}
10008098:	2b00      	cmp	r3, #0
1000809a:	d003      	beq.n	100080a4 <frame_dummy+0x10>
1000809c:	4907      	ldr	r1, [pc, #28]	; (100080bc <frame_dummy+0x28>)
1000809e:	4808      	ldr	r0, [pc, #32]	; (100080c0 <frame_dummy+0x2c>)
100080a0:	e000      	b.n	100080a4 <frame_dummy+0x10>
100080a2:	bf00      	nop
100080a4:	4807      	ldr	r0, [pc, #28]	; (100080c4 <frame_dummy+0x30>)
100080a6:	6803      	ldr	r3, [r0, #0]
100080a8:	2b00      	cmp	r3, #0
100080aa:	d100      	bne.n	100080ae <frame_dummy+0x1a>
100080ac:	bd10      	pop	{r4, pc}
100080ae:	4b06      	ldr	r3, [pc, #24]	; (100080c8 <frame_dummy+0x34>)
100080b0:	2b00      	cmp	r3, #0
100080b2:	d0fb      	beq.n	100080ac <frame_dummy+0x18>
100080b4:	4798      	blx	r3
100080b6:	e7f9      	b.n	100080ac <frame_dummy+0x18>
100080b8:	00000000 	.word	0x00000000
100080bc:	1001a564 	.word	0x1001a564
100080c0:	1001e1a0 	.word	0x1001e1a0
100080c4:	1001e1a0 	.word	0x1001e1a0
100080c8:	00000000 	.word	0x00000000

100080cc <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
100080cc:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_clock_get_value();
100080ce:	4b09      	ldr	r3, [pc, #36]	; (100080f4 <delay_init+0x28>)
100080d0:	4798      	blx	r3
	cycles_per_ms /= 1000;
100080d2:	21fa      	movs	r1, #250	; 0xfa
100080d4:	4c08      	ldr	r4, [pc, #32]	; (100080f8 <delay_init+0x2c>)
100080d6:	0089      	lsls	r1, r1, #2
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
	cycles_per_ms = system_clock_get_value();
100080d8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
100080da:	47a0      	blx	r4
100080dc:	4b07      	ldr	r3, [pc, #28]	; (100080fc <delay_init+0x30>)
	cycles_per_us = cycles_per_ms / 1000;
100080de:	4908      	ldr	r1, [pc, #32]	; (10008100 <delay_init+0x34>)
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
	cycles_per_ms = system_clock_get_value();
	cycles_per_ms /= 1000;
100080e0:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
100080e2:	0028      	movs	r0, r5
100080e4:	47a0      	blx	r4

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
100080e6:	2205      	movs	r2, #5
 */
void delay_init(void)
{
	cycles_per_ms = system_clock_get_value();
	cycles_per_ms /= 1000;
	cycles_per_us = cycles_per_ms / 1000;
100080e8:	4b06      	ldr	r3, [pc, #24]	; (10008104 <delay_init+0x38>)
100080ea:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
100080ec:	4b06      	ldr	r3, [pc, #24]	; (10008108 <delay_init+0x3c>)
100080ee:	601a      	str	r2, [r3, #0]
}
100080f0:	bd70      	pop	{r4, r5, r6, pc}
100080f2:	46c0      	nop			; (mov r8, r8)
100080f4:	1000d1c5 	.word	0x1000d1c5
100080f8:	10014a75 	.word	0x10014a75
100080fc:	1001a4ac 	.word	0x1001a4ac
10008100:	000f4240 	.word	0x000f4240
10008104:	1001a4a8 	.word	0x1001a4a8
10008108:	e000e010 	.word	0xe000e010

1000810c <delay_cycles_ms>:
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
1000810c:	2180      	movs	r1, #128	; 0x80
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
1000810e:	b530      	push	{r4, r5, lr}
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
10008110:	2500      	movs	r5, #0
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
10008112:	4b08      	ldr	r3, [pc, #32]	; (10008134 <delay_cycles_ms+0x28>)
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
10008114:	4a08      	ldr	r2, [pc, #32]	; (10008138 <delay_cycles_ms+0x2c>)
10008116:	681c      	ldr	r4, [r3, #0]
        SysTick->VAL = 0;
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008118:	0249      	lsls	r1, r1, #9
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
1000811a:	3801      	subs	r0, #1
1000811c:	d308      	bcc.n	10008130 <delay_cycles_ms+0x24>
 *
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
1000811e:	2c00      	cmp	r4, #0
10008120:	d0fb      	beq.n	1000811a <delay_cycles_ms+0xe>
        SysTick->LOAD = n;
10008122:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
10008124:	6095      	str	r5, [r2, #8]
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008126:	6813      	ldr	r3, [r2, #0]
10008128:	420b      	tst	r3, r1
1000812a:	d0fc      	beq.n	10008126 <delay_cycles_ms+0x1a>
1000812c:	3801      	subs	r0, #1
1000812e:	d2f6      	bcs.n	1000811e <delay_cycles_ms+0x12>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
10008130:	bd30      	pop	{r4, r5, pc}
10008132:	46c0      	nop			; (mov r8, r8)
10008134:	1001a4ac 	.word	0x1001a4ac
10008138:	e000e010 	.word	0xe000e010

1000813c <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000813c:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000813e:	4b0c      	ldr	r3, [pc, #48]	; (10008170 <dualtimer_isr_handler+0x34>)
10008140:	7d1a      	ldrb	r2, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
10008142:	2a00      	cmp	r2, #0
10008144:	d006      	beq.n	10008154 <dualtimer_isr_handler+0x18>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
10008146:	2201      	movs	r2, #1
10008148:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000814a:	4b0a      	ldr	r3, [pc, #40]	; (10008174 <dualtimer_isr_handler+0x38>)
1000814c:	681b      	ldr	r3, [r3, #0]
1000814e:	2b00      	cmp	r3, #0
10008150:	d000      	beq.n	10008154 <dualtimer_isr_handler+0x18>
			dualtimer_callback_timer1();
10008152:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
10008154:	2234      	movs	r2, #52	; 0x34
10008156:	4b06      	ldr	r3, [pc, #24]	; (10008170 <dualtimer_isr_handler+0x34>)
10008158:	5c9a      	ldrb	r2, [r3, r2]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000815a:	2a00      	cmp	r2, #0
1000815c:	d007      	beq.n	1000816e <dualtimer_isr_handler+0x32>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000815e:	2101      	movs	r1, #1
10008160:	222c      	movs	r2, #44	; 0x2c
10008162:	5499      	strb	r1, [r3, r2]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
10008164:	4b04      	ldr	r3, [pc, #16]	; (10008178 <dualtimer_isr_handler+0x3c>)
10008166:	681b      	ldr	r3, [r3, #0]
10008168:	2b00      	cmp	r3, #0
1000816a:	d000      	beq.n	1000816e <dualtimer_isr_handler+0x32>
			dualtimer_callback_timer2();
1000816c:	4798      	blx	r3
	}
}
1000816e:	bd10      	pop	{r4, pc}
10008170:	40001000 	.word	0x40001000
10008174:	1001a57c 	.word	0x1001a57c
10008178:	1001a580 	.word	0x1001a580

1000817c <dualtimer_get_config_defaults>:
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
	config->timer2.timer_enable = true;

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000817c:	2202      	movs	r2, #2
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000817e:	2301      	movs	r3, #1
	config->timer2.timer_enable = true;

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
10008180:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
10008182:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008184:	2200      	movs	r2, #0
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
10008186:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
10008188:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000818a:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000818c:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000818e:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008190:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
10008192:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
10008194:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
10008196:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
10008198:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000819a:	7602      	strb	r2, [r0, #24]
}
1000819c:	4770      	bx	lr
1000819e:	46c0      	nop			; (mov r8, r8)

100081a0 <dualtimer_get_value>:
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1VALUE.reg;
100081a0:	4b03      	ldr	r3, [pc, #12]	; (100081b0 <dualtimer_get_value+0x10>)
 *
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
100081a2:	2800      	cmp	r0, #0
100081a4:	d001      	beq.n	100081aa <dualtimer_get_value+0xa>
		return DUALTIMER0->TIMER1VALUE.reg;
	} else {
		return DUALTIMER0->TIMER2VALUE.reg;
100081a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
	}
}
100081a8:	4770      	bx	lr
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1VALUE.reg;
100081aa:	6858      	ldr	r0, [r3, #4]
100081ac:	e7fc      	b.n	100081a8 <dualtimer_get_value+0x8>
100081ae:	46c0      	nop			; (mov r8, r8)
100081b0:	40001000 	.word	0x40001000

100081b4 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
100081b4:	2800      	cmp	r0, #0
100081b6:	d006      	beq.n	100081c6 <dualtimer_enable+0x12>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
100081b8:	2228      	movs	r2, #40	; 0x28
100081ba:	2380      	movs	r3, #128	; 0x80
100081bc:	4905      	ldr	r1, [pc, #20]	; (100081d4 <dualtimer_enable+0x20>)
100081be:	5c88      	ldrb	r0, [r1, r2]
100081c0:	4303      	orrs	r3, r0
100081c2:	548b      	strb	r3, [r1, r2]
	}
}
100081c4:	4770      	bx	lr
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
100081c6:	2380      	movs	r3, #128	; 0x80
100081c8:	4a02      	ldr	r2, [pc, #8]	; (100081d4 <dualtimer_enable+0x20>)
100081ca:	7a11      	ldrb	r1, [r2, #8]
100081cc:	430b      	orrs	r3, r1
100081ce:	7213      	strb	r3, [r2, #8]
100081d0:	e7f8      	b.n	100081c4 <dualtimer_enable+0x10>
100081d2:	46c0      	nop			; (mov r8, r8)
100081d4:	40001000 	.word	0x40001000

100081d8 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
100081d8:	2800      	cmp	r0, #0
100081da:	d006      	beq.n	100081ea <dualtimer_disable+0x12>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
100081dc:	2228      	movs	r2, #40	; 0x28
100081de:	207f      	movs	r0, #127	; 0x7f
100081e0:	4905      	ldr	r1, [pc, #20]	; (100081f8 <dualtimer_disable+0x20>)
100081e2:	5c8b      	ldrb	r3, [r1, r2]
100081e4:	4003      	ands	r3, r0
100081e6:	548b      	strb	r3, [r1, r2]
	}
}
100081e8:	4770      	bx	lr
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
100081ea:	217f      	movs	r1, #127	; 0x7f
100081ec:	4a02      	ldr	r2, [pc, #8]	; (100081f8 <dualtimer_disable+0x20>)
100081ee:	7a13      	ldrb	r3, [r2, #8]
100081f0:	400b      	ands	r3, r1
100081f2:	7213      	strb	r3, [r2, #8]
100081f4:	e7f8      	b.n	100081e8 <dualtimer_disable+0x10>
100081f6:	46c0      	nop			; (mov r8, r8)
100081f8:	40001000 	.word	0x40001000

100081fc <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
100081fc:	b570      	push	{r4, r5, r6, lr}
100081fe:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
10008200:	4b3a      	ldr	r3, [pc, #232]	; (100082ec <dualtimer_init+0xf0>)
10008202:	2004      	movs	r0, #4
10008204:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
10008206:	7823      	ldrb	r3, [r4, #0]
10008208:	2b00      	cmp	r3, #0
1000820a:	d102      	bne.n	10008212 <dualtimer_init+0x16>
1000820c:	7b23      	ldrb	r3, [r4, #12]
1000820e:	2b00      	cmp	r3, #0
10008210:	d057      	beq.n	100082c2 <dualtimer_init+0xc6>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
10008212:	2320      	movs	r3, #32
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
10008214:	2003      	movs	r0, #3
	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
10008216:	4936      	ldr	r1, [pc, #216]	; (100082f0 <dualtimer_init+0xf4>)
10008218:	68ca      	ldr	r2, [r1, #12]
1000821a:	4313      	orrs	r3, r2
1000821c:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000821e:	7e22      	ldrb	r2, [r4, #24]
10008220:	698b      	ldr	r3, [r1, #24]
10008222:	4002      	ands	r2, r0
10008224:	302d      	adds	r0, #45	; 0x2d
10008226:	0112      	lsls	r2, r2, #4
10008228:	4383      	bics	r3, r0
1000822a:	4313      	orrs	r3, r2
1000822c:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000822e:	7823      	ldrb	r3, [r4, #0]
10008230:	2b00      	cmp	r3, #0
10008232:	d020      	beq.n	10008276 <dualtimer_init+0x7a>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008234:	7862      	ldrb	r2, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
10008236:	2001      	movs	r0, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008238:	2a00      	cmp	r2, #0
1000823a:	d150      	bne.n	100082de <dualtimer_init+0xe2>
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000823c:	2302      	movs	r3, #2
1000823e:	78a1      	ldrb	r1, [r4, #2]
10008240:	78e2      	ldrb	r2, [r4, #3]
10008242:	0049      	lsls	r1, r1, #1
10008244:	4019      	ands	r1, r3
10008246:	0092      	lsls	r2, r2, #2
10008248:	330a      	adds	r3, #10
1000824a:	401a      	ands	r2, r3
1000824c:	000b      	movs	r3, r1
1000824e:	4313      	orrs	r3, r2
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
10008250:	7922      	ldrb	r2, [r4, #4]
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
10008252:	4303      	orrs	r3, r0
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
10008254:	2a00      	cmp	r2, #0
10008256:	d13f      	bne.n	100082d8 <dualtimer_init+0xdc>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
		DUALTIMER0->TIMER1CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10008258:	20c4      	movs	r0, #196	; 0xc4
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000825a:	68a1      	ldr	r1, [r4, #8]
1000825c:	4a25      	ldr	r2, [pc, #148]	; (100082f4 <dualtimer_init+0xf8>)
		DUALTIMER0->TIMER1CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000825e:	4d24      	ldr	r5, [pc, #144]	; (100082f0 <dualtimer_init+0xf4>)
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
10008260:	6011      	str	r1, [r2, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10008262:	2101      	movs	r1, #1
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
		DUALTIMER0->TIMER1CONTROL.reg = regval;
10008264:	7213      	strb	r3, [r2, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10008266:	0040      	lsls	r0, r0, #1
10008268:	5c2e      	ldrb	r6, [r5, r0]
1000826a:	4331      	orrs	r1, r6
1000826c:	5429      	strb	r1, [r5, r0]
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000826e:	2180      	movs	r1, #128	; 0x80
10008270:	7a10      	ldrb	r0, [r2, #8]
10008272:	4301      	orrs	r1, r0
10008274:	7211      	strb	r1, [r2, #8]
10008276:	7b22      	ldrb	r2, [r4, #12]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
10008278:	2a00      	cmp	r2, #0
1000827a:	d022      	beq.n	100082c2 <dualtimer_init+0xc6>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000827c:	7b62      	ldrb	r2, [r4, #13]
1000827e:	2a00      	cmp	r2, #0
10008280:	d124      	bne.n	100082cc <dualtimer_init+0xd0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
10008282:	2301      	movs	r3, #1
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
10008284:	2002      	movs	r0, #2
10008286:	7ba2      	ldrb	r2, [r4, #14]
10008288:	7be1      	ldrb	r1, [r4, #15]
1000828a:	0052      	lsls	r2, r2, #1
1000828c:	4010      	ands	r0, r2
1000828e:	220c      	movs	r2, #12
10008290:	0089      	lsls	r1, r1, #2
10008292:	400a      	ands	r2, r1
10008294:	4302      	orrs	r2, r0
10008296:	4313      	orrs	r3, r2
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
10008298:	7c22      	ldrb	r2, [r4, #16]
1000829a:	2a00      	cmp	r2, #0
1000829c:	d001      	beq.n	100082a2 <dualtimer_init+0xa6>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000829e:	2220      	movs	r2, #32
100082a0:	4313      	orrs	r3, r2
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
100082a2:	6961      	ldr	r1, [r4, #20]
100082a4:	4a13      	ldr	r2, [pc, #76]	; (100082f4 <dualtimer_init+0xf8>)
		DUALTIMER0->TIMER2CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
100082a6:	20c4      	movs	r0, #196	; 0xc4
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
100082a8:	6211      	str	r1, [r2, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
100082aa:	2128      	movs	r1, #40	; 0x28
100082ac:	5453      	strb	r3, [r2, r1]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
100082ae:	2302      	movs	r3, #2
100082b0:	4c0f      	ldr	r4, [pc, #60]	; (100082f0 <dualtimer_init+0xf4>)
100082b2:	0040      	lsls	r0, r0, #1
100082b4:	5c25      	ldrb	r5, [r4, r0]
100082b6:	432b      	orrs	r3, r5
100082b8:	5423      	strb	r3, [r4, r0]
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
100082ba:	2380      	movs	r3, #128	; 0x80
100082bc:	5c50      	ldrb	r0, [r2, r1]
100082be:	4303      	orrs	r3, r0
100082c0:	5453      	strb	r3, [r2, r1]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER2);
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
100082c2:	490d      	ldr	r1, [pc, #52]	; (100082f8 <dualtimer_init+0xfc>)
100082c4:	201e      	movs	r0, #30
100082c6:	4b0d      	ldr	r3, [pc, #52]	; (100082fc <dualtimer_init+0x100>)
100082c8:	4798      	blx	r3
}
100082ca:	bd70      	pop	{r4, r5, r6, pc}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
100082cc:	2a01      	cmp	r2, #1
100082ce:	d00b      	beq.n	100082e8 <dualtimer_init+0xec>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
100082d0:	2a02      	cmp	r2, #2
100082d2:	d1d7      	bne.n	10008284 <dualtimer_init+0x88>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
100082d4:	2340      	movs	r3, #64	; 0x40
100082d6:	e7d5      	b.n	10008284 <dualtimer_init+0x88>
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
100082d8:	2220      	movs	r2, #32
100082da:	4313      	orrs	r3, r2
100082dc:	e7bc      	b.n	10008258 <dualtimer_init+0x5c>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
100082de:	3a02      	subs	r2, #2
100082e0:	4253      	negs	r3, r2
100082e2:	4153      	adcs	r3, r2
100082e4:	0198      	lsls	r0, r3, #6
100082e6:	e7a9      	b.n	1000823c <dualtimer_init+0x40>
	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
100082e8:	2300      	movs	r3, #0
100082ea:	e7cb      	b.n	10008284 <dualtimer_init+0x88>
100082ec:	1000d4d9 	.word	0x1000d4d9
100082f0:	4000b000 	.word	0x4000b000
100082f4:	40001000 	.word	0x40001000
100082f8:	1000813d 	.word	0x1000813d
100082fc:	1000d8f1 	.word	0x1000d8f1

10008300 <i2c_write>:
 */
#if defined EMPL_TARGET_SAMB11
#include "include.h"
#define I2C_TIMEOUT 1000
static int i2c_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
10008300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
10008302:	4d11      	ldr	r5, [pc, #68]	; (10008348 <i2c_write+0x48>)
10008304:	8028      	strh	r0, [r5, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
10008306:	1c50      	adds	r0, r2, #1
10008308:	b2c0      	uxtb	r0, r0
1000830a:	8068      	strh	r0, [r5, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000830c:	6868      	ldr	r0, [r5, #4]
1000830e:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
10008310:	2a00      	cmp	r2, #0
10008312:	d008      	beq.n	10008326 <i2c_write+0x26>
10008314:	2100      	movs	r1, #0
10008316:	1c48      	adds	r0, r1, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
10008318:	686c      	ldr	r4, [r5, #4]
1000831a:	5c59      	ldrb	r1, [r3, r1]
1000831c:	5421      	strb	r1, [r4, r0]
1000831e:	0001      	movs	r1, r0
    //DBG_LOG("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
10008320:	b2c0      	uxtb	r0, r0
10008322:	4290      	cmp	r0, r2
10008324:	d3f7      	bcc.n	10008316 <i2c_write+0x16>
10008326:	4c09      	ldr	r4, [pc, #36]	; (1000834c <i2c_write+0x4c>)
10008328:	4f09      	ldr	r7, [pc, #36]	; (10008350 <i2c_write+0x50>)
1000832a:	4e0a      	ldr	r6, [pc, #40]	; (10008354 <i2c_write+0x54>)
1000832c:	e003      	b.n	10008336 <i2c_write+0x36>
1000832e:	3c01      	subs	r4, #1
10008330:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
10008332:	2c00      	cmp	r4, #0
10008334:	d005      	beq.n	10008342 <i2c_write+0x42>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008336:	0029      	movs	r1, r5
10008338:	0038      	movs	r0, r7
1000833a:	47b0      	blx	r6
1000833c:	2800      	cmp	r0, #0
1000833e:	d1f6      	bne.n	1000832e <i2c_write+0x2e>
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    return 0;
}
10008340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        //DBG_LOG_CONT("0x%02x ", packet.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
10008342:	2001      	movs	r0, #1
10008344:	4240      	negs	r0, r0
10008346:	e7fb      	b.n	10008340 <i2c_write+0x40>
10008348:	1001c400 	.word	0x1001c400
1000834c:	000003e9 	.word	0x000003e9
10008350:	1001c3f8 	.word	0x1001c3f8
10008354:	1000d0f1 	.word	0x1000d0f1

10008358 <i2c_read>:
        }
    }
    return 0;
}
static int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
10008358:	b5f0      	push	{r4, r5, r6, r7, lr}
1000835a:	4645      	mov	r5, r8
1000835c:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000835e:	4b20      	ldr	r3, [pc, #128]	; (100083e0 <i2c_read+0x88>)
        }
    }
    return 0;
}
static int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
10008360:	4657      	mov	r7, sl
10008362:	464e      	mov	r6, r9
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
10008364:	4699      	mov	r9, r3
10008366:	b280      	uxth	r0, r0
        }
    }
    return 0;
}
static int i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
10008368:	b4e0      	push	{r5, r6, r7}
1000836a:	4692      	mov	sl, r2
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000836c:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
1000836e:	464a      	mov	r2, r9
10008370:	2301      	movs	r3, #1
10008372:	8053      	strh	r3, [r2, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10008374:	6853      	ldr	r3, [r2, #4]
    i2c_rpacket.address = (uint8_t)slave_addr;
10008376:	4e1b      	ldr	r6, [pc, #108]	; (100083e4 <i2c_read+0x8c>)
{
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = 1;
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10008378:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
1000837a:	4653      	mov	r3, sl
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = 1;
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
1000837c:	8030      	strh	r0, [r6, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
1000837e:	8073      	strh	r3, [r6, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008380:	4c19      	ldr	r4, [pc, #100]	; (100083e8 <i2c_read+0x90>)
10008382:	4d1a      	ldr	r5, [pc, #104]	; (100083ec <i2c_read+0x94>)
10008384:	4f1a      	ldr	r7, [pc, #104]	; (100083f0 <i2c_read+0x98>)
10008386:	e003      	b.n	10008390 <i2c_read+0x38>
10008388:	3c01      	subs	r4, #1
1000838a:	b2a4      	uxth	r4, r4
        if(timeout++ >= I2C_TIMEOUT) {
1000838c:	2c00      	cmp	r4, #0
1000838e:	d023      	beq.n	100083d8 <i2c_read+0x80>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008390:	4649      	mov	r1, r9
10008392:	0028      	movs	r0, r5
10008394:	47b8      	blx	r7
10008396:	2800      	cmp	r0, #0
10008398:	d1f6      	bne.n	10008388 <i2c_read+0x30>
1000839a:	4b16      	ldr	r3, [pc, #88]	; (100083f4 <i2c_read+0x9c>)
1000839c:	4c12      	ldr	r4, [pc, #72]	; (100083e8 <i2c_read+0x90>)
1000839e:	4699      	mov	r9, r3
100083a0:	e003      	b.n	100083aa <i2c_read+0x52>
100083a2:	3c01      	subs	r4, #1
100083a4:	b2a4      	uxth	r4, r4
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
100083a6:	2c00      	cmp	r4, #0
100083a8:	d016      	beq.n	100083d8 <i2c_read+0x80>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
100083aa:	0031      	movs	r1, r6
100083ac:	0028      	movs	r0, r5
100083ae:	47c8      	blx	r9
100083b0:	2800      	cmp	r0, #0
100083b2:	d1f6      	bne.n	100083a2 <i2c_read+0x4a>
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
100083b4:	4652      	mov	r2, sl
100083b6:	2300      	movs	r3, #0
100083b8:	2a00      	cmp	r2, #0
100083ba:	d007      	beq.n	100083cc <i2c_read+0x74>
        data[i] = i2c_rpacket.data[i];
100083bc:	4641      	mov	r1, r8
100083be:	6872      	ldr	r2, [r6, #4]
100083c0:	5cd2      	ldrb	r2, [r2, r3]
100083c2:	54ca      	strb	r2, [r1, r3]
100083c4:	3301      	adds	r3, #1
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
100083c6:	b2da      	uxtb	r2, r3
100083c8:	4592      	cmp	sl, r2
100083ca:	d8f7      	bhi.n	100083bc <i2c_read+0x64>
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
100083cc:	2000      	movs	r0, #0
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG("0x%02x ", data[i]);
    }
    return 0;
}
100083ce:	bc1c      	pop	{r2, r3, r4}
100083d0:	4690      	mov	r8, r2
100083d2:	4699      	mov	r9, r3
100083d4:	46a2      	mov	sl, r4
100083d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
100083d8:	2001      	movs	r0, #1
100083da:	4240      	negs	r0, r0
100083dc:	e7f7      	b.n	100083ce <i2c_read+0x76>
100083de:	46c0      	nop			; (mov r8, r8)
100083e0:	1001c400 	.word	0x1001c400
100083e4:	1001c3f0 	.word	0x1001c3f0
100083e8:	000003e9 	.word	0x000003e9
100083ec:	1001c3f8 	.word	0x1001c3f8
100083f0:	1000d121 	.word	0x1000d121
100083f4:	1000d0d1 	.word	0x1000d0d1

100083f8 <set_int_enable>:
 */
static int set_int_enable(unsigned char enable)
{
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
100083f8:	2324      	movs	r3, #36	; 0x24
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
100083fa:	b570      	push	{r4, r5, r6, lr}
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
100083fc:	4c17      	ldr	r4, [pc, #92]	; (1000845c <set_int_enable+0x64>)
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
100083fe:	b082      	sub	sp, #8
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
10008400:	5ce3      	ldrb	r3, [r4, r3]
10008402:	2b00      	cmp	r3, #0
10008404:	d012      	beq.n	1000842c <set_int_enable+0x34>
        if (enable)
            tmp = BIT_DMP_INT_EN;
10008406:	466b      	mov	r3, sp
10008408:	1ddd      	adds	r5, r3, #7
static int set_int_enable(unsigned char enable)
{
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
        if (enable)
1000840a:	2800      	cmp	r0, #0
1000840c:	d117      	bne.n	1000843e <set_int_enable+0x46>
            tmp = BIT_DMP_INT_EN;
        else
            tmp = 0x00;
1000840e:	7028      	strb	r0, [r5, #0]
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
10008410:	6823      	ldr	r3, [r4, #0]
10008412:	2201      	movs	r2, #1
10008414:	7c59      	ldrb	r1, [r3, #17]
10008416:	6863      	ldr	r3, [r4, #4]
10008418:	4e11      	ldr	r6, [pc, #68]	; (10008460 <set_int_enable+0x68>)
1000841a:	7818      	ldrb	r0, [r3, #0]
1000841c:	002b      	movs	r3, r5
1000841e:	47b0      	blx	r6
10008420:	2800      	cmp	r0, #0
10008422:	d118      	bne.n	10008456 <set_int_enable+0x5e>
            return -1;
        st.chip_cfg.int_enable = tmp;
10008424:	782b      	ldrb	r3, [r5, #0]
10008426:	7463      	strb	r3, [r4, #17]
    }
    return 0;
}
10008428:	b002      	add	sp, #8
1000842a:	bd70      	pop	{r4, r5, r6, pc}
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
1000842c:	7aa3      	ldrb	r3, [r4, #10]
1000842e:	2b00      	cmp	r3, #0
10008430:	d011      	beq.n	10008456 <set_int_enable+0x5e>
            return -1;
        if (enable && st.chip_cfg.int_enable)
10008432:	2800      	cmp	r0, #0
10008434:	d106      	bne.n	10008444 <set_int_enable+0x4c>
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
        else
            tmp = 0x00;
10008436:	466b      	mov	r3, sp
10008438:	1ddd      	adds	r5, r3, #7
1000843a:	71d8      	strb	r0, [r3, #7]
1000843c:	e7e8      	b.n	10008410 <set_int_enable+0x18>
{
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
        if (enable)
            tmp = BIT_DMP_INT_EN;
1000843e:	2302      	movs	r3, #2
10008440:	702b      	strb	r3, [r5, #0]
10008442:	e7e5      	b.n	10008410 <set_int_enable+0x18>
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
10008444:	7c63      	ldrb	r3, [r4, #17]
            return 0;
10008446:	2000      	movs	r0, #0
            return -1;
        st.chip_cfg.int_enable = tmp;
    } else {
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
10008448:	2b00      	cmp	r3, #0
1000844a:	d1ed      	bne.n	10008428 <set_int_enable+0x30>
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
1000844c:	466b      	mov	r3, sp
1000844e:	1ddd      	adds	r5, r3, #7
10008450:	2301      	movs	r3, #1
10008452:	702b      	strb	r3, [r5, #0]
10008454:	e7dc      	b.n	10008410 <set_int_enable+0x18>
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
10008456:	2001      	movs	r0, #1
10008458:	4240      	negs	r0, r0
1000845a:	e7e5      	b.n	10008428 <set_int_enable+0x30>
1000845c:	1001a4b0 	.word	0x1001a4b0
10008460:	10008301 	.word	0x10008301

10008464 <mpu_get_temperature>:
 *  @param[out] data        Data in q16 format.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_temperature(long *data, unsigned long *timestamp)
{
10008464:	b5f0      	push	{r4, r5, r6, r7, lr}
10008466:	4647      	mov	r7, r8
10008468:	b480      	push	{r7}
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
1000846a:	4d24      	ldr	r5, [pc, #144]	; (100084fc <mpu_get_temperature+0x98>)
 *  @param[out] data        Data in q16 format.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_temperature(long *data, unsigned long *timestamp)
{
1000846c:	b082      	sub	sp, #8
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
1000846e:	7aab      	ldrb	r3, [r5, #10]
 *  @param[out] data        Data in q16 format.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_temperature(long *data, unsigned long *timestamp)
{
10008470:	0007      	movs	r7, r0
10008472:	4688      	mov	r8, r1
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
10008474:	2b00      	cmp	r3, #0
10008476:	d03d      	beq.n	100084f4 <mpu_get_temperature+0x90>
        return -1;

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
10008478:	682b      	ldr	r3, [r5, #0]
1000847a:	2202      	movs	r2, #2
1000847c:	7c19      	ldrb	r1, [r3, #16]
1000847e:	686b      	ldr	r3, [r5, #4]
10008480:	4c1f      	ldr	r4, [pc, #124]	; (10008500 <mpu_get_temperature+0x9c>)
10008482:	7818      	ldrb	r0, [r3, #0]
10008484:	466b      	mov	r3, sp
10008486:	47a0      	blx	r4
10008488:	1e06      	subs	r6, r0, #0
1000848a:	d133      	bne.n	100084f4 <mpu_get_temperature+0x90>
        return -1;
    raw = (tmp[0] << 8) | tmp[1];
1000848c:	466b      	mov	r3, sp
1000848e:	781c      	ldrb	r4, [r3, #0]
10008490:	785b      	ldrb	r3, [r3, #1]
10008492:	0224      	lsls	r4, r4, #8
10008494:	431c      	orrs	r4, r3
    if (timestamp)
10008496:	4643      	mov	r3, r8
    if (!(st.chip_cfg.sensors))
        return -1;

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
        return -1;
    raw = (tmp[0] << 8) | tmp[1];
10008498:	b224      	sxth	r4, r4
    if (timestamp)
1000849a:	2b00      	cmp	r3, #0
1000849c:	d005      	beq.n	100084aa <mpu_get_temperature+0x46>
    }
    return 0;
}
static inline void get_ms(uint32_t *count)
{
    volatile uint32_t load = (uint32_t)(0xffffffff - dualtimer_get_value(DUALTIMER_TIMER2));
1000849e:	4b19      	ldr	r3, [pc, #100]	; (10008504 <mpu_get_temperature+0xa0>)
100084a0:	2001      	movs	r0, #1
100084a2:	4798      	blx	r3
100084a4:	43c0      	mvns	r0, r0
100084a6:	9001      	str	r0, [sp, #4]
    count = (uint32_t *)(load / 26000);
100084a8:	9b01      	ldr	r3, [sp, #4]
        return -1;
    raw = (tmp[0] << 8) | tmp[1];
    if (timestamp)
        get_ms(timestamp);

    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
100084aa:	686b      	ldr	r3, [r5, #4]
100084ac:	0020      	movs	r0, r4
100084ae:	4698      	mov	r8, r3
100084b0:	4d15      	ldr	r5, [pc, #84]	; (10008508 <mpu_get_temperature+0xa4>)
100084b2:	47a8      	blx	r5
100084b4:	4643      	mov	r3, r8
100084b6:	1c04      	adds	r4, r0, #0
100084b8:	2008      	movs	r0, #8
100084ba:	5e18      	ldrsh	r0, [r3, r0]
100084bc:	47a8      	blx	r5
100084be:	4b13      	ldr	r3, [pc, #76]	; (1000850c <mpu_get_temperature+0xa8>)
100084c0:	1c01      	adds	r1, r0, #0
100084c2:	1c20      	adds	r0, r4, #0
100084c4:	4798      	blx	r3
100084c6:	4643      	mov	r3, r8
100084c8:	1c04      	adds	r4, r0, #0
100084ca:	88d8      	ldrh	r0, [r3, #6]
100084cc:	47a8      	blx	r5
100084ce:	4b10      	ldr	r3, [pc, #64]	; (10008510 <mpu_get_temperature+0xac>)
100084d0:	1c01      	adds	r1, r0, #0
100084d2:	1c20      	adds	r0, r4, #0
100084d4:	4798      	blx	r3
100084d6:	490f      	ldr	r1, [pc, #60]	; (10008514 <mpu_get_temperature+0xb0>)
100084d8:	4b0f      	ldr	r3, [pc, #60]	; (10008518 <mpu_get_temperature+0xb4>)
100084da:	4798      	blx	r3
100084dc:	218f      	movs	r1, #143	; 0x8f
100084de:	4b0f      	ldr	r3, [pc, #60]	; (1000851c <mpu_get_temperature+0xb8>)
100084e0:	05c9      	lsls	r1, r1, #23
100084e2:	4798      	blx	r3
100084e4:	4b0e      	ldr	r3, [pc, #56]	; (10008520 <mpu_get_temperature+0xbc>)
100084e6:	4798      	blx	r3
100084e8:	6038      	str	r0, [r7, #0]
    return 0;
}
100084ea:	0030      	movs	r0, r6
100084ec:	b002      	add	sp, #8
100084ee:	bc04      	pop	{r2}
100084f0:	4690      	mov	r8, r2
100084f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
        return -1;
100084f4:	2601      	movs	r6, #1
100084f6:	4276      	negs	r6, r6
100084f8:	e7f7      	b.n	100084ea <mpu_get_temperature+0x86>
100084fa:	46c0      	nop			; (mov r8, r8)
100084fc:	1001a4b0 	.word	0x1001a4b0
10008500:	10008359 	.word	0x10008359
10008504:	100081a1 	.word	0x100081a1
10008508:	10015c8d 	.word	0x10015c8d
1000850c:	1001590d 	.word	0x1001590d
10008510:	10015351 	.word	0x10015351
10008514:	420c0000 	.word	0x420c0000
10008518:	10015065 	.word	0x10015065
1000851c:	100156e5 	.word	0x100156e5
10008520:	10015c49 	.word	0x10015c49

10008524 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
10008524:	b570      	push	{r4, r5, r6, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008526:	4c54      	ldr	r4, [pc, #336]	; (10008678 <mpu_reset_fifo+0x154>)
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
10008528:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000852a:	7aa3      	ldrb	r3, [r4, #10]
1000852c:	2b00      	cmp	r3, #0
1000852e:	d100      	bne.n	10008532 <mpu_reset_fifo+0xe>
10008530:	e08f      	b.n	10008652 <mpu_reset_fifo+0x12e>
        return -1;

    data = 0;
10008532:	466b      	mov	r3, sp
10008534:	1ddd      	adds	r5, r3, #7
10008536:	2300      	movs	r3, #0
10008538:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
1000853a:	6823      	ldr	r3, [r4, #0]
1000853c:	2201      	movs	r2, #1
1000853e:	7c59      	ldrb	r1, [r3, #17]
10008540:	6863      	ldr	r3, [r4, #4]
10008542:	4e4e      	ldr	r6, [pc, #312]	; (1000867c <mpu_reset_fifo+0x158>)
10008544:	7818      	ldrb	r0, [r3, #0]
10008546:	002b      	movs	r3, r5
10008548:	47b0      	blx	r6
1000854a:	2800      	cmp	r0, #0
1000854c:	d000      	beq.n	10008550 <mpu_reset_fifo+0x2c>
1000854e:	e080      	b.n	10008652 <mpu_reset_fifo+0x12e>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
10008550:	6823      	ldr	r3, [r4, #0]
10008552:	2201      	movs	r2, #1
10008554:	7959      	ldrb	r1, [r3, #5]
10008556:	6863      	ldr	r3, [r4, #4]
10008558:	7818      	ldrb	r0, [r3, #0]
1000855a:	002b      	movs	r3, r5
1000855c:	47b0      	blx	r6
1000855e:	2800      	cmp	r0, #0
10008560:	d177      	bne.n	10008652 <mpu_reset_fifo+0x12e>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008562:	6823      	ldr	r3, [r4, #0]
10008564:	2201      	movs	r2, #1
10008566:	7919      	ldrb	r1, [r3, #4]
10008568:	6863      	ldr	r3, [r4, #4]
1000856a:	7818      	ldrb	r0, [r3, #0]
1000856c:	002b      	movs	r3, r5
1000856e:	47b0      	blx	r6
10008570:	2800      	cmp	r0, #0
10008572:	d16e      	bne.n	10008652 <mpu_reset_fifo+0x12e>
        return -1;

    if (st.chip_cfg.dmp_on) {
10008574:	2324      	movs	r3, #36	; 0x24
10008576:	5ce3      	ldrb	r3, [r4, r3]
10008578:	2b00      	cmp	r3, #0
1000857a:	d034      	beq.n	100085e6 <mpu_reset_fifo+0xc2>
        data = BIT_FIFO_RST | BIT_DMP_RST;
1000857c:	230c      	movs	r3, #12
1000857e:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008580:	6823      	ldr	r3, [r4, #0]
10008582:	2201      	movs	r2, #1
10008584:	7919      	ldrb	r1, [r3, #4]
10008586:	6863      	ldr	r3, [r4, #4]
10008588:	7818      	ldrb	r0, [r3, #0]
1000858a:	002b      	movs	r3, r5
1000858c:	47b0      	blx	r6
1000858e:	2800      	cmp	r0, #0
10008590:	d15f      	bne.n	10008652 <mpu_reset_fifo+0x12e>
            return -1;
        delay_ms(50);
10008592:	4b3b      	ldr	r3, [pc, #236]	; (10008680 <mpu_reset_fifo+0x15c>)
10008594:	3032      	adds	r0, #50	; 0x32
10008596:	4798      	blx	r3
        data = BIT_DMP_EN | BIT_FIFO_EN;
10008598:	23c0      	movs	r3, #192	; 0xc0
1000859a:	702b      	strb	r3, [r5, #0]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
1000859c:	7aa3      	ldrb	r3, [r4, #10]
1000859e:	07db      	lsls	r3, r3, #31
100085a0:	d461      	bmi.n	10008666 <mpu_reset_fifo+0x142>
            data |= BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100085a2:	6823      	ldr	r3, [r4, #0]
100085a4:	2201      	movs	r2, #1
100085a6:	7919      	ldrb	r1, [r3, #4]
100085a8:	6863      	ldr	r3, [r4, #4]
100085aa:	7818      	ldrb	r0, [r3, #0]
100085ac:	002b      	movs	r3, r5
100085ae:	47b0      	blx	r6
100085b0:	2800      	cmp	r0, #0
100085b2:	d14e      	bne.n	10008652 <mpu_reset_fifo+0x12e>
            return -1;
        if (st.chip_cfg.int_enable)
100085b4:	7c63      	ldrb	r3, [r4, #17]
100085b6:	2b00      	cmp	r3, #0
100085b8:	d158      	bne.n	1000866c <mpu_reset_fifo+0x148>
            data = BIT_DMP_INT_EN;
        else
            data = 0;
100085ba:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
100085bc:	6823      	ldr	r3, [r4, #0]
100085be:	2201      	movs	r2, #1
100085c0:	7c59      	ldrb	r1, [r3, #17]
100085c2:	6863      	ldr	r3, [r4, #4]
100085c4:	7818      	ldrb	r0, [r3, #0]
100085c6:	002b      	movs	r3, r5
100085c8:	47b0      	blx	r6
100085ca:	2800      	cmp	r0, #0
100085cc:	d141      	bne.n	10008652 <mpu_reset_fifo+0x12e>
            return -1;
        data = 0;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100085ce:	6823      	ldr	r3, [r4, #0]
            data = BIT_DMP_INT_EN;
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
            return -1;
        data = 0;
100085d0:	7028      	strb	r0, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
100085d2:	7959      	ldrb	r1, [r3, #5]
100085d4:	6863      	ldr	r3, [r4, #4]
100085d6:	2201      	movs	r2, #1
100085d8:	7818      	ldrb	r0, [r3, #0]
100085da:	002b      	movs	r3, r5
100085dc:	47b0      	blx	r6
100085de:	1e43      	subs	r3, r0, #1
100085e0:	4198      	sbcs	r0, r3
100085e2:	4240      	negs	r0, r0
100085e4:	e037      	b.n	10008656 <mpu_reset_fifo+0x132>
            return -1;
    } else {
        data = BIT_FIFO_RST;
100085e6:	2304      	movs	r3, #4
100085e8:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
100085ea:	6823      	ldr	r3, [r4, #0]
100085ec:	2201      	movs	r2, #1
100085ee:	7919      	ldrb	r1, [r3, #4]
100085f0:	6863      	ldr	r3, [r4, #4]
100085f2:	7818      	ldrb	r0, [r3, #0]
100085f4:	002b      	movs	r3, r5
100085f6:	47b0      	blx	r6
100085f8:	2800      	cmp	r0, #0
100085fa:	d12a      	bne.n	10008652 <mpu_reset_fifo+0x12e>
            return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
100085fc:	7ca3      	ldrb	r3, [r4, #18]
100085fe:	2b00      	cmp	r3, #0
10008600:	d02b      	beq.n	1000865a <mpu_reset_fifo+0x136>
            data = BIT_FIFO_EN;
10008602:	2340      	movs	r3, #64	; 0x40
10008604:	702b      	strb	r3, [r5, #0]
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
10008606:	6823      	ldr	r3, [r4, #0]
10008608:	2201      	movs	r2, #1
1000860a:	7919      	ldrb	r1, [r3, #4]
1000860c:	6863      	ldr	r3, [r4, #4]
1000860e:	7818      	ldrb	r0, [r3, #0]
10008610:	002b      	movs	r3, r5
10008612:	47b0      	blx	r6
10008614:	2800      	cmp	r0, #0
10008616:	d11c      	bne.n	10008652 <mpu_reset_fifo+0x12e>
            return -1;
        delay_ms(50);
10008618:	4b19      	ldr	r3, [pc, #100]	; (10008680 <mpu_reset_fifo+0x15c>)
1000861a:	3032      	adds	r0, #50	; 0x32
1000861c:	4798      	blx	r3
        if (st.chip_cfg.int_enable)
1000861e:	7c63      	ldrb	r3, [r4, #17]
10008620:	2b00      	cmp	r3, #0
10008622:	d026      	beq.n	10008672 <mpu_reset_fifo+0x14e>
            data = BIT_DATA_RDY_EN;
10008624:	2301      	movs	r3, #1
10008626:	702b      	strb	r3, [r5, #0]
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
10008628:	6823      	ldr	r3, [r4, #0]
1000862a:	2201      	movs	r2, #1
1000862c:	7c59      	ldrb	r1, [r3, #17]
1000862e:	6863      	ldr	r3, [r4, #4]
10008630:	7818      	ldrb	r0, [r3, #0]
10008632:	002b      	movs	r3, r5
10008634:	47b0      	blx	r6
10008636:	2800      	cmp	r0, #0
10008638:	d10b      	bne.n	10008652 <mpu_reset_fifo+0x12e>
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
1000863a:	0023      	movs	r3, r4
1000863c:	6822      	ldr	r2, [r4, #0]
1000863e:	3310      	adds	r3, #16
10008640:	7951      	ldrb	r1, [r2, #5]
10008642:	6862      	ldr	r2, [r4, #4]
10008644:	7810      	ldrb	r0, [r2, #0]
10008646:	2201      	movs	r2, #1
10008648:	47b0      	blx	r6
1000864a:	1e43      	subs	r3, r0, #1
1000864c:	4198      	sbcs	r0, r3
1000864e:	4240      	negs	r0, r0
10008650:	e001      	b.n	10008656 <mpu_reset_fifo+0x132>
int mpu_reset_fifo(void)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008652:	2001      	movs	r0, #1
10008654:	4240      	negs	r0, r0
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
10008656:	b002      	add	sp, #8
10008658:	bd70      	pop	{r4, r5, r6, pc}
            return -1;
    } else {
        data = BIT_FIFO_RST;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
1000865a:	7aa3      	ldrb	r3, [r4, #10]
1000865c:	07db      	lsls	r3, r3, #31
1000865e:	d5d0      	bpl.n	10008602 <mpu_reset_fifo+0xde>
            data = BIT_FIFO_EN;
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
10008660:	2360      	movs	r3, #96	; 0x60
10008662:	702b      	strb	r3, [r5, #0]
10008664:	e7cf      	b.n	10008606 <mpu_reset_fifo+0xe2>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
        delay_ms(50);
        data = BIT_DMP_EN | BIT_FIFO_EN;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            data |= BIT_AUX_IF_EN;
10008666:	23e0      	movs	r3, #224	; 0xe0
10008668:	702b      	strb	r3, [r5, #0]
1000866a:	e79a      	b.n	100085a2 <mpu_reset_fifo+0x7e>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
            return -1;
        if (st.chip_cfg.int_enable)
            data = BIT_DMP_INT_EN;
1000866c:	2302      	movs	r3, #2
1000866e:	702b      	strb	r3, [r5, #0]
10008670:	e7a4      	b.n	100085bc <mpu_reset_fifo+0x98>
            return -1;
        delay_ms(50);
        if (st.chip_cfg.int_enable)
            data = BIT_DATA_RDY_EN;
        else
            data = 0;
10008672:	702b      	strb	r3, [r5, #0]
10008674:	e7d8      	b.n	10008628 <mpu_reset_fifo+0x104>
10008676:	46c0      	nop			; (mov r8, r8)
10008678:	1001a4b0 	.word	0x1001a4b0
1000867c:	10008301 	.word	0x10008301
10008680:	1000810d 	.word	0x1000810d

10008684 <mpu_get_gyro_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
    switch (st.chip_cfg.gyro_fsr) {
10008684:	4b0e      	ldr	r3, [pc, #56]	; (100086c0 <mpu_get_gyro_fsr+0x3c>)
10008686:	7a1b      	ldrb	r3, [r3, #8]
10008688:	2b01      	cmp	r3, #1
1000868a:	d014      	beq.n	100086b6 <mpu_get_gyro_fsr+0x32>
1000868c:	2b00      	cmp	r3, #0
1000868e:	d00f      	beq.n	100086b0 <mpu_get_gyro_fsr+0x2c>
10008690:	2b02      	cmp	r3, #2
10008692:	d006      	beq.n	100086a2 <mpu_get_gyro_fsr+0x1e>
10008694:	2b03      	cmp	r3, #3
10008696:	d108      	bne.n	100086aa <mpu_get_gyro_fsr+0x26>
        break;
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
        break;
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
10008698:	23fa      	movs	r3, #250	; 0xfa
1000869a:	00db      	lsls	r3, r3, #3
1000869c:	8003      	strh	r3, [r0, #0]
    default:
        fsr[0] = 0;
        break;
    }
    return 0;
}
1000869e:	2000      	movs	r0, #0
100086a0:	4770      	bx	lr
        break;
    case INV_FSR_500DPS:
        fsr[0] = 500;
        break;
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
100086a2:	23fa      	movs	r3, #250	; 0xfa
100086a4:	009b      	lsls	r3, r3, #2
100086a6:	8003      	strh	r3, [r0, #0]
        break;
100086a8:	e7f9      	b.n	1000869e <mpu_get_gyro_fsr+0x1a>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
        break;
    default:
        fsr[0] = 0;
100086aa:	2300      	movs	r3, #0
100086ac:	8003      	strh	r3, [r0, #0]
        break;
100086ae:	e7f6      	b.n	1000869e <mpu_get_gyro_fsr+0x1a>
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
    switch (st.chip_cfg.gyro_fsr) {
    case INV_FSR_250DPS:
        fsr[0] = 250;
100086b0:	23fa      	movs	r3, #250	; 0xfa
100086b2:	8003      	strh	r3, [r0, #0]
        break;
100086b4:	e7f3      	b.n	1000869e <mpu_get_gyro_fsr+0x1a>
    case INV_FSR_500DPS:
        fsr[0] = 500;
100086b6:	23fa      	movs	r3, #250	; 0xfa
100086b8:	005b      	lsls	r3, r3, #1
100086ba:	8003      	strh	r3, [r0, #0]
        break;
100086bc:	e7ef      	b.n	1000869e <mpu_get_gyro_fsr+0x1a>
100086be:	46c0      	nop			; (mov r8, r8)
100086c0:	1001a4b0 	.word	0x1001a4b0

100086c4 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
100086c4:	b570      	push	{r4, r5, r6, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100086c6:	4c20      	ldr	r4, [pc, #128]	; (10008748 <mpu_set_gyro_fsr+0x84>)
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
100086c8:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
100086ca:	7aa3      	ldrb	r3, [r4, #10]
100086cc:	2b00      	cmp	r3, #0
100086ce:	d02a      	beq.n	10008726 <mpu_set_gyro_fsr+0x62>
        return -1;

    switch (fsr) {
100086d0:	23fa      	movs	r3, #250	; 0xfa
100086d2:	005b      	lsls	r3, r3, #1
100086d4:	4298      	cmp	r0, r3
100086d6:	d030      	beq.n	1000873a <mpu_set_gyro_fsr+0x76>
100086d8:	d90d      	bls.n	100086f6 <mpu_set_gyro_fsr+0x32>
100086da:	23fa      	movs	r3, #250	; 0xfa
100086dc:	009b      	lsls	r3, r3, #2
100086de:	4298      	cmp	r0, r3
100086e0:	d025      	beq.n	1000872e <mpu_set_gyro_fsr+0x6a>
100086e2:	23fa      	movs	r3, #250	; 0xfa
100086e4:	00db      	lsls	r3, r3, #3
100086e6:	4298      	cmp	r0, r3
100086e8:	d11d      	bne.n	10008726 <mpu_set_gyro_fsr+0x62>
        break;
    case 1000:
        data = INV_FSR_1000DPS << 3;
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
100086ea:	466b      	mov	r3, sp
100086ec:	1ddd      	adds	r5, r3, #7
100086ee:	2318      	movs	r3, #24
100086f0:	702b      	strb	r3, [r5, #0]
        break;
100086f2:	3b15      	subs	r3, #21
100086f4:	e005      	b.n	10008702 <mpu_set_gyro_fsr+0x3e>
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;

    switch (fsr) {
100086f6:	28fa      	cmp	r0, #250	; 0xfa
100086f8:	d115      	bne.n	10008726 <mpu_set_gyro_fsr+0x62>
    case 250:
        data = INV_FSR_250DPS << 3;
100086fa:	466b      	mov	r3, sp
100086fc:	1ddd      	adds	r5, r3, #7
100086fe:	2300      	movs	r3, #0
10008700:	702b      	strb	r3, [r5, #0]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008702:	7a22      	ldrb	r2, [r4, #8]
        return 0;
10008704:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
10008706:	429a      	cmp	r2, r3
10008708:	d00f      	beq.n	1000872a <mpu_set_gyro_fsr+0x66>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
1000870a:	6823      	ldr	r3, [r4, #0]
1000870c:	2201      	movs	r2, #1
1000870e:	7999      	ldrb	r1, [r3, #6]
10008710:	6863      	ldr	r3, [r4, #4]
10008712:	4e0e      	ldr	r6, [pc, #56]	; (1000874c <mpu_set_gyro_fsr+0x88>)
10008714:	7818      	ldrb	r0, [r3, #0]
10008716:	002b      	movs	r3, r5
10008718:	47b0      	blx	r6
1000871a:	2800      	cmp	r0, #0
1000871c:	d103      	bne.n	10008726 <mpu_set_gyro_fsr+0x62>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
1000871e:	782b      	ldrb	r3, [r5, #0]
10008720:	08db      	lsrs	r3, r3, #3
10008722:	7223      	strb	r3, [r4, #8]
    return 0;
10008724:	e001      	b.n	1000872a <mpu_set_gyro_fsr+0x66>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
10008726:	2001      	movs	r0, #1
10008728:	4240      	negs	r0, r0
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
    return 0;
}
1000872a:	b002      	add	sp, #8
1000872c:	bd70      	pop	{r4, r5, r6, pc}
        break;
    case 500:
        data = INV_FSR_500DPS << 3;
        break;
    case 1000:
        data = INV_FSR_1000DPS << 3;
1000872e:	466b      	mov	r3, sp
10008730:	1ddd      	adds	r5, r3, #7
10008732:	2310      	movs	r3, #16
10008734:	702b      	strb	r3, [r5, #0]
        break;
10008736:	3b0e      	subs	r3, #14
10008738:	e7e3      	b.n	10008702 <mpu_set_gyro_fsr+0x3e>
    switch (fsr) {
    case 250:
        data = INV_FSR_250DPS << 3;
        break;
    case 500:
        data = INV_FSR_500DPS << 3;
1000873a:	466b      	mov	r3, sp
1000873c:	1ddd      	adds	r5, r3, #7
1000873e:	2308      	movs	r3, #8
10008740:	702b      	strb	r3, [r5, #0]
        break;
10008742:	3b07      	subs	r3, #7
10008744:	e7dd      	b.n	10008702 <mpu_set_gyro_fsr+0x3e>
10008746:	46c0      	nop			; (mov r8, r8)
10008748:	1001a4b0 	.word	0x1001a4b0
1000874c:	10008301 	.word	0x10008301

10008750 <mpu_get_accel_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
10008750:	4a10      	ldr	r2, [pc, #64]	; (10008794 <mpu_get_accel_fsr+0x44>)
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
10008752:	0001      	movs	r1, r0
    switch (st.chip_cfg.accel_fsr) {
10008754:	7a53      	ldrb	r3, [r2, #9]
10008756:	2b01      	cmp	r3, #1
10008758:	d018      	beq.n	1000878c <mpu_get_accel_fsr+0x3c>
1000875a:	2b00      	cmp	r3, #0
1000875c:	d013      	beq.n	10008786 <mpu_get_accel_fsr+0x36>
1000875e:	2b02      	cmp	r3, #2
10008760:	d00b      	beq.n	1000877a <mpu_get_accel_fsr+0x2a>
10008762:	2b03      	cmp	r3, #3
10008764:	d10c      	bne.n	10008780 <mpu_get_accel_fsr+0x30>
        break;
    case INV_FSR_8G:
        fsr[0] = 8;
        break;
    case INV_FSR_16G:
        fsr[0] = 16;
10008766:	2310      	movs	r3, #16
10008768:	7003      	strb	r3, [r0, #0]
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
1000876a:	7cd3      	ldrb	r3, [r2, #19]
        fsr[0] <<= 1;
    return 0;
1000876c:	2000      	movs	r0, #0
        fsr[0] = 16;
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
1000876e:	2b00      	cmp	r3, #0
10008770:	d002      	beq.n	10008778 <mpu_get_accel_fsr+0x28>
        fsr[0] <<= 1;
10008772:	780b      	ldrb	r3, [r1, #0]
10008774:	005b      	lsls	r3, r3, #1
10008776:	700b      	strb	r3, [r1, #0]
    return 0;
}
10008778:	4770      	bx	lr
        break;
    case INV_FSR_4G:
        fsr[0] = 4;
        break;
    case INV_FSR_8G:
        fsr[0] = 8;
1000877a:	2308      	movs	r3, #8
1000877c:	7003      	strb	r3, [r0, #0]
        break;
1000877e:	e7f4      	b.n	1000876a <mpu_get_accel_fsr+0x1a>
    case INV_FSR_16G:
        fsr[0] = 16;
        break;
    default:
        return -1;
10008780:	2001      	movs	r0, #1
10008782:	4240      	negs	r0, r0
10008784:	e7f8      	b.n	10008778 <mpu_get_accel_fsr+0x28>
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
    case INV_FSR_2G:
        fsr[0] = 2;
10008786:	2302      	movs	r3, #2
10008788:	7003      	strb	r3, [r0, #0]
        break;
1000878a:	e7ee      	b.n	1000876a <mpu_get_accel_fsr+0x1a>
    case INV_FSR_4G:
        fsr[0] = 4;
1000878c:	2304      	movs	r3, #4
1000878e:	7003      	strb	r3, [r0, #0]
        break;
10008790:	e7eb      	b.n	1000876a <mpu_get_accel_fsr+0x1a>
10008792:	46c0      	nop			; (mov r8, r8)
10008794:	1001a4b0 	.word	0x1001a4b0

10008798 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
10008798:	b570      	push	{r4, r5, r6, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000879a:	4c1d      	ldr	r4, [pc, #116]	; (10008810 <mpu_set_accel_fsr+0x78>)
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
1000879c:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000879e:	7aa3      	ldrb	r3, [r4, #10]
100087a0:	2b00      	cmp	r3, #0
100087a2:	d024      	beq.n	100087ee <mpu_set_accel_fsr+0x56>
        return -1;

    switch (fsr) {
100087a4:	2804      	cmp	r0, #4
100087a6:	d02c      	beq.n	10008802 <mpu_set_accel_fsr+0x6a>
100087a8:	d909      	bls.n	100087be <mpu_set_accel_fsr+0x26>
100087aa:	2808      	cmp	r0, #8
100087ac:	d023      	beq.n	100087f6 <mpu_set_accel_fsr+0x5e>
100087ae:	2810      	cmp	r0, #16
100087b0:	d11d      	bne.n	100087ee <mpu_set_accel_fsr+0x56>
        break;
    case 8:
        data = INV_FSR_8G << 3;
        break;
    case 16:
        data = INV_FSR_16G << 3;
100087b2:	466b      	mov	r3, sp
100087b4:	1ddd      	adds	r5, r3, #7
100087b6:	2318      	movs	r3, #24
100087b8:	702b      	strb	r3, [r5, #0]
        break;
100087ba:	3b15      	subs	r3, #21
100087bc:	e005      	b.n	100087ca <mpu_set_accel_fsr+0x32>
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;

    switch (fsr) {
100087be:	2802      	cmp	r0, #2
100087c0:	d115      	bne.n	100087ee <mpu_set_accel_fsr+0x56>
    case 2:
        data = INV_FSR_2G << 3;
100087c2:	466b      	mov	r3, sp
100087c4:	1ddd      	adds	r5, r3, #7
100087c6:	2300      	movs	r3, #0
100087c8:	702b      	strb	r3, [r5, #0]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
100087ca:	7a62      	ldrb	r2, [r4, #9]
        return 0;
100087cc:	2000      	movs	r0, #0
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
100087ce:	429a      	cmp	r2, r3
100087d0:	d00f      	beq.n	100087f2 <mpu_set_accel_fsr+0x5a>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
100087d2:	6823      	ldr	r3, [r4, #0]
100087d4:	2201      	movs	r2, #1
100087d6:	79d9      	ldrb	r1, [r3, #7]
100087d8:	6863      	ldr	r3, [r4, #4]
100087da:	4e0e      	ldr	r6, [pc, #56]	; (10008814 <mpu_set_accel_fsr+0x7c>)
100087dc:	7818      	ldrb	r0, [r3, #0]
100087de:	002b      	movs	r3, r5
100087e0:	47b0      	blx	r6
100087e2:	2800      	cmp	r0, #0
100087e4:	d103      	bne.n	100087ee <mpu_set_accel_fsr+0x56>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
100087e6:	782b      	ldrb	r3, [r5, #0]
100087e8:	08db      	lsrs	r3, r3, #3
100087ea:	7263      	strb	r3, [r4, #9]
    return 0;
100087ec:	e001      	b.n	100087f2 <mpu_set_accel_fsr+0x5a>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
100087ee:	2001      	movs	r0, #1
100087f0:	4240      	negs	r0, r0
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
    return 0;
}
100087f2:	b002      	add	sp, #8
100087f4:	bd70      	pop	{r4, r5, r6, pc}
        break;
    case 4:
        data = INV_FSR_4G << 3;
        break;
    case 8:
        data = INV_FSR_8G << 3;
100087f6:	466b      	mov	r3, sp
100087f8:	1ddd      	adds	r5, r3, #7
100087fa:	2310      	movs	r3, #16
100087fc:	702b      	strb	r3, [r5, #0]
        break;
100087fe:	3b0e      	subs	r3, #14
10008800:	e7e3      	b.n	100087ca <mpu_set_accel_fsr+0x32>
    switch (fsr) {
    case 2:
        data = INV_FSR_2G << 3;
        break;
    case 4:
        data = INV_FSR_4G << 3;
10008802:	466b      	mov	r3, sp
10008804:	1ddd      	adds	r5, r3, #7
10008806:	2308      	movs	r3, #8
10008808:	702b      	strb	r3, [r5, #0]
        break;
1000880a:	3b07      	subs	r3, #7
1000880c:	e7dd      	b.n	100087ca <mpu_set_accel_fsr+0x32>
1000880e:	46c0      	nop			; (mov r8, r8)
10008810:	1001a4b0 	.word	0x1001a4b0
10008814:	10008301 	.word	0x10008301

10008818 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
10008818:	b570      	push	{r4, r5, r6, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000881a:	4c22      	ldr	r4, [pc, #136]	; (100088a4 <mpu_set_lpf+0x8c>)
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
1000881c:	b082      	sub	sp, #8
    unsigned char data;

    if (!(st.chip_cfg.sensors))
1000881e:	7aa3      	ldrb	r3, [r4, #10]
10008820:	2b00      	cmp	r3, #0
10008822:	d033      	beq.n	1000888c <mpu_set_lpf+0x74>
        return -1;

    if (lpf >= 188)
        data = INV_FILTER_188HZ;
10008824:	466b      	mov	r3, sp
10008826:	1ddd      	adds	r5, r3, #7
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;

    if (lpf >= 188)
10008828:	28bb      	cmp	r0, #187	; 0xbb
1000882a:	d822      	bhi.n	10008872 <mpu_set_lpf+0x5a>
        data = INV_FILTER_188HZ;
    else if (lpf >= 98)
1000882c:	2861      	cmp	r0, #97	; 0x61
1000882e:	d923      	bls.n	10008878 <mpu_set_lpf+0x60>
        data = INV_FILTER_98HZ;
10008830:	2302      	movs	r3, #2
10008832:	702b      	strb	r3, [r5, #0]
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
10008834:	7ae2      	ldrb	r2, [r4, #11]
        return 0;
10008836:	2000      	movs	r0, #0
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
10008838:	429a      	cmp	r2, r3
1000883a:	d018      	beq.n	1000886e <mpu_set_lpf+0x56>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
1000883c:	6823      	ldr	r3, [r4, #0]
1000883e:	2201      	movs	r2, #1
10008840:	7899      	ldrb	r1, [r3, #2]
10008842:	6863      	ldr	r3, [r4, #4]
10008844:	4e18      	ldr	r6, [pc, #96]	; (100088a8 <mpu_set_lpf+0x90>)
10008846:	7818      	ldrb	r0, [r3, #0]
10008848:	002b      	movs	r3, r5
1000884a:	47b0      	blx	r6
1000884c:	2800      	cmp	r0, #0
1000884e:	d11d      	bne.n	1000888c <mpu_set_lpf+0x74>
        return -1;
#ifdef MPU6500
    data = BIT_FIFO_SIZE_1024 | data;
10008850:	2340      	movs	r3, #64	; 0x40
10008852:	782a      	ldrb	r2, [r5, #0]
10008854:	4313      	orrs	r3, r2
10008856:	702b      	strb	r3, [r5, #0]

    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
10008858:	6823      	ldr	r3, [r4, #0]
1000885a:	2201      	movs	r2, #1
1000885c:	7a19      	ldrb	r1, [r3, #8]
1000885e:	6863      	ldr	r3, [r4, #4]
10008860:	7818      	ldrb	r0, [r3, #0]
10008862:	002b      	movs	r3, r5
10008864:	47b0      	blx	r6
10008866:	2800      	cmp	r0, #0
10008868:	d110      	bne.n	1000888c <mpu_set_lpf+0x74>
            return -1;
#endif
    st.chip_cfg.lpf = data;
1000886a:	782b      	ldrb	r3, [r5, #0]
1000886c:	72e3      	strb	r3, [r4, #11]
    return 0;
}
1000886e:	b002      	add	sp, #8
10008870:	bd70      	pop	{r4, r5, r6, pc}

    if (!(st.chip_cfg.sensors))
        return -1;

    if (lpf >= 188)
        data = INV_FILTER_188HZ;
10008872:	2301      	movs	r3, #1
10008874:	702b      	strb	r3, [r5, #0]
10008876:	e7dd      	b.n	10008834 <mpu_set_lpf+0x1c>
    else if (lpf >= 98)
        data = INV_FILTER_98HZ;
    else if (lpf >= 42)
10008878:	2829      	cmp	r0, #41	; 0x29
1000887a:	d804      	bhi.n	10008886 <mpu_set_lpf+0x6e>
        data = INV_FILTER_42HZ;
    else if (lpf >= 20)
1000887c:	2813      	cmp	r0, #19
1000887e:	d908      	bls.n	10008892 <mpu_set_lpf+0x7a>
        data = INV_FILTER_20HZ;
10008880:	2304      	movs	r3, #4
10008882:	702b      	strb	r3, [r5, #0]
10008884:	e7d6      	b.n	10008834 <mpu_set_lpf+0x1c>
    if (lpf >= 188)
        data = INV_FILTER_188HZ;
    else if (lpf >= 98)
        data = INV_FILTER_98HZ;
    else if (lpf >= 42)
        data = INV_FILTER_42HZ;
10008886:	2303      	movs	r3, #3
10008888:	702b      	strb	r3, [r5, #0]
1000888a:	e7d3      	b.n	10008834 <mpu_set_lpf+0x1c>
int mpu_set_lpf(unsigned short lpf)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
1000888c:	2001      	movs	r0, #1
1000888e:	4240      	negs	r0, r0
10008890:	e7ed      	b.n	1000886e <mpu_set_lpf+0x56>
        data = INV_FILTER_98HZ;
    else if (lpf >= 42)
        data = INV_FILTER_42HZ;
    else if (lpf >= 20)
        data = INV_FILTER_20HZ;
    else if (lpf >= 10)
10008892:	2809      	cmp	r0, #9
10008894:	d902      	bls.n	1000889c <mpu_set_lpf+0x84>
        data = INV_FILTER_10HZ;
10008896:	2305      	movs	r3, #5
10008898:	702b      	strb	r3, [r5, #0]
1000889a:	e7cb      	b.n	10008834 <mpu_set_lpf+0x1c>
    else
        data = INV_FILTER_5HZ;
1000889c:	2306      	movs	r3, #6
1000889e:	702b      	strb	r3, [r5, #0]
100088a0:	e7c8      	b.n	10008834 <mpu_set_lpf+0x1c>
100088a2:	46c0      	nop			; (mov r8, r8)
100088a4:	1001a4b0 	.word	0x1001a4b0
100088a8:	10008301 	.word	0x10008301

100088ac <mpu_get_sample_rate>:
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
100088ac:	2224      	movs	r2, #36	; 0x24
100088ae:	4b05      	ldr	r3, [pc, #20]	; (100088c4 <mpu_get_sample_rate+0x18>)
100088b0:	5c9a      	ldrb	r2, [r3, r2]
100088b2:	2a00      	cmp	r2, #0
100088b4:	d103      	bne.n	100088be <mpu_get_sample_rate+0x12>
        return -1;
    else
        rate[0] = st.chip_cfg.sample_rate;
100088b6:	89db      	ldrh	r3, [r3, #14]
100088b8:	8003      	strh	r3, [r0, #0]
    return 0;
100088ba:	2000      	movs	r0, #0
}
100088bc:	4770      	bx	lr
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
    if (st.chip_cfg.dmp_on)
        return -1;
100088be:	2001      	movs	r0, #1
100088c0:	4240      	negs	r0, r0
100088c2:	e7fb      	b.n	100088bc <mpu_get_sample_rate+0x10>
100088c4:	1001a4b0 	.word	0x1001a4b0

100088c8 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
100088c8:	b530      	push	{r4, r5, lr}
100088ca:	0001      	movs	r1, r0
100088cc:	b083      	sub	sp, #12
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
100088ce:	2800      	cmp	r0, #0
100088d0:	d020      	beq.n	10008914 <mpu_set_compass_sample_rate+0x4c>
100088d2:	4c12      	ldr	r4, [pc, #72]	; (1000891c <mpu_set_compass_sample_rate+0x54>)
100088d4:	89e0      	ldrh	r0, [r4, #14]
100088d6:	4281      	cmp	r1, r0
100088d8:	d81c      	bhi.n	10008914 <mpu_set_compass_sample_rate+0x4c>
100088da:	2964      	cmp	r1, #100	; 0x64
100088dc:	d81a      	bhi.n	10008914 <mpu_set_compass_sample_rate+0x4c>
        return -1;

    div = st.chip_cfg.sample_rate / rate - 1;
100088de:	4b10      	ldr	r3, [pc, #64]	; (10008920 <mpu_set_compass_sample_rate+0x58>)
100088e0:	4798      	blx	r3
100088e2:	466b      	mov	r3, sp
100088e4:	3801      	subs	r0, #1
100088e6:	71d8      	strb	r0, [r3, #7]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
100088e8:	2324      	movs	r3, #36	; 0x24
100088ea:	6822      	ldr	r2, [r4, #0]
100088ec:	4d0d      	ldr	r5, [pc, #52]	; (10008924 <mpu_set_compass_sample_rate+0x5c>)
100088ee:	5cd1      	ldrb	r1, [r2, r3]
100088f0:	6863      	ldr	r3, [r4, #4]
100088f2:	2201      	movs	r2, #1
100088f4:	7818      	ldrb	r0, [r3, #0]
100088f6:	466b      	mov	r3, sp
100088f8:	3307      	adds	r3, #7
100088fa:	47a8      	blx	r5
100088fc:	1e05      	subs	r5, r0, #0
100088fe:	d109      	bne.n	10008914 <mpu_set_compass_sample_rate+0x4c>
        return -1;
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
10008900:	466b      	mov	r3, sp
10008902:	79d9      	ldrb	r1, [r3, #7]
10008904:	89e0      	ldrh	r0, [r4, #14]
10008906:	3101      	adds	r1, #1
10008908:	4b07      	ldr	r3, [pc, #28]	; (10008928 <mpu_set_compass_sample_rate+0x60>)
1000890a:	4798      	blx	r3
1000890c:	8520      	strh	r0, [r4, #40]	; 0x28
    return 0;
#else
    return -1;
#endif
}
1000890e:	0028      	movs	r0, r5
10008910:	b003      	add	sp, #12
10008912:	bd30      	pop	{r4, r5, pc}
int mpu_set_compass_sample_rate(unsigned short rate)
{
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
        return -1;
10008914:	2501      	movs	r5, #1
10008916:	426d      	negs	r5, r5
10008918:	e7f9      	b.n	1000890e <mpu_set_compass_sample_rate+0x46>
1000891a:	46c0      	nop			; (mov r8, r8)
1000891c:	1001a4b0 	.word	0x1001a4b0
10008920:	10014a75 	.word	0x10014a75
10008924:	10008301 	.word	0x10008301
10008928:	10014b89 	.word	0x10014b89

1000892c <mpu_configure_fifo>:
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
1000892c:	2324      	movs	r3, #36	; 0x24
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
1000892e:	b570      	push	{r4, r5, r6, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008930:	4d14      	ldr	r5, [pc, #80]	; (10008984 <mpu_configure_fifo+0x58>)
        return 0;
10008932:	2400      	movs	r4, #0
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
10008934:	5ceb      	ldrb	r3, [r5, r3]
10008936:	2b00      	cmp	r3, #0
10008938:	d113      	bne.n	10008962 <mpu_configure_fifo+0x36>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
1000893a:	7aac      	ldrb	r4, [r5, #10]
1000893c:	2c00      	cmp	r4, #0
1000893e:	d01d      	beq.n	1000897c <mpu_configure_fifo+0x50>
{
    unsigned char prev;
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
10008940:	3301      	adds	r3, #1
10008942:	4398      	bics	r0, r3
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
        prev = st.chip_cfg.fifo_enable;
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
10008944:	4004      	ands	r4, r0
    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
        prev = st.chip_cfg.fifo_enable;
10008946:	7c2e      	ldrb	r6, [r5, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
10008948:	742c      	strb	r4, [r5, #16]
        if (st.chip_cfg.fifo_enable != sensors)
1000894a:	1b04      	subs	r4, r0, r4
1000894c:	1e63      	subs	r3, r4, #1
1000894e:	419c      	sbcs	r4, r3
10008950:	4264      	negs	r4, r4
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
10008952:	2800      	cmp	r0, #0
10008954:	d107      	bne.n	10008966 <mpu_configure_fifo+0x3a>
10008956:	7d2b      	ldrb	r3, [r5, #20]
10008958:	2b00      	cmp	r3, #0
1000895a:	d000      	beq.n	1000895e <mpu_configure_fifo+0x32>
            set_int_enable(1);
1000895c:	2001      	movs	r0, #1
1000895e:	4b0a      	ldr	r3, [pc, #40]	; (10008988 <mpu_configure_fifo+0x5c>)
10008960:	4798      	blx	r3
            }
        }
    }

    return result;
}
10008962:	0020      	movs	r0, r4
10008964:	bd70      	pop	{r4, r5, r6, pc}
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
            set_int_enable(1);
10008966:	4b08      	ldr	r3, [pc, #32]	; (10008988 <mpu_configure_fifo+0x5c>)
10008968:	2001      	movs	r0, #1
1000896a:	4798      	blx	r3
        else
            set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
1000896c:	4b07      	ldr	r3, [pc, #28]	; (1000898c <mpu_configure_fifo+0x60>)
1000896e:	4798      	blx	r3
10008970:	2800      	cmp	r0, #0
10008972:	d0f6      	beq.n	10008962 <mpu_configure_fifo+0x36>
                st.chip_cfg.fifo_enable = prev;
                return -1;
10008974:	2401      	movs	r4, #1
            set_int_enable(1);
        else
            set_int_enable(0);
        if (sensors) {
            if (mpu_reset_fifo()) {
                st.chip_cfg.fifo_enable = prev;
10008976:	742e      	strb	r6, [r5, #16]
                return -1;
10008978:	4264      	negs	r4, r4
1000897a:	e7f2      	b.n	10008962 <mpu_configure_fifo+0x36>

    if (st.chip_cfg.dmp_on)
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
            return -1;
1000897c:	2401      	movs	r4, #1
1000897e:	4264      	negs	r4, r4
10008980:	e7ef      	b.n	10008962 <mpu_configure_fifo+0x36>
10008982:	46c0      	nop			; (mov r8, r8)
10008984:	1001a4b0 	.word	0x1001a4b0
10008988:	100083f9 	.word	0x100083f9
1000898c:	10008525 	.word	0x10008525

10008990 <mpu_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int mpu_read_fifo(short *gyro, short *accel, unsigned long *timestamp,
        unsigned char *sensors, unsigned char *more)
{
10008990:	b5f0      	push	{r4, r5, r6, r7, lr}
10008992:	464d      	mov	r5, r9
10008994:	4644      	mov	r4, r8
10008996:	465f      	mov	r7, fp
10008998:	4656      	mov	r6, sl
1000899a:	4698      	mov	r8, r3
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;

    if (st.chip_cfg.dmp_on)
1000899c:	2324      	movs	r3, #36	; 0x24
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int mpu_read_fifo(short *gyro, short *accel, unsigned long *timestamp,
        unsigned char *sensors, unsigned char *more)
{
1000899e:	b4f0      	push	{r4, r5, r6, r7}
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;

    if (st.chip_cfg.dmp_on)
100089a0:	4d68      	ldr	r5, [pc, #416]	; (10008b44 <mpu_read_fifo+0x1b4>)
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int mpu_read_fifo(short *gyro, short *accel, unsigned long *timestamp,
        unsigned char *sensors, unsigned char *more)
{
100089a2:	b087      	sub	sp, #28
100089a4:	9000      	str	r0, [sp, #0]
100089a6:	9101      	str	r1, [sp, #4]
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;

    if (st.chip_cfg.dmp_on)
100089a8:	5ceb      	ldrb	r3, [r5, r3]
100089aa:	2b00      	cmp	r3, #0
100089ac:	d000      	beq.n	100089b0 <mpu_read_fifo+0x20>
100089ae:	e0be      	b.n	10008b2e <mpu_read_fifo+0x19e>
        return -1;

    sensors[0] = 0;
100089b0:	4642      	mov	r2, r8
100089b2:	7013      	strb	r3, [r2, #0]
    if (!st.chip_cfg.sensors)
100089b4:	7aab      	ldrb	r3, [r5, #10]
100089b6:	2b00      	cmp	r3, #0
100089b8:	d100      	bne.n	100089bc <mpu_read_fifo+0x2c>
100089ba:	e0b8      	b.n	10008b2e <mpu_read_fifo+0x19e>
        return -1;
    if (!st.chip_cfg.fifo_enable)
100089bc:	7c2b      	ldrb	r3, [r5, #16]
100089be:	2b00      	cmp	r3, #0
100089c0:	d100      	bne.n	100089c4 <mpu_read_fifo+0x34>
100089c2:	e0b4      	b.n	10008b2e <mpu_read_fifo+0x19e>
        return -1;

    if (st.chip_cfg.fifo_enable & INV_X_GYRO)
100089c4:	065c      	lsls	r4, r3, #25
int mpu_read_fifo(short *gyro, short *accel, unsigned long *timestamp,
        unsigned char *sensors, unsigned char *more)
{
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
100089c6:	0fe4      	lsrs	r4, r4, #31
100089c8:	0064      	lsls	r4, r4, #1
    if (!st.chip_cfg.fifo_enable)
        return -1;

    if (st.chip_cfg.fifo_enable & INV_X_GYRO)
        packet_size += 2;
    if (st.chip_cfg.fifo_enable & INV_Y_GYRO)
100089ca:	069a      	lsls	r2, r3, #26
100089cc:	d501      	bpl.n	100089d2 <mpu_read_fifo+0x42>
        packet_size += 2;
100089ce:	3402      	adds	r4, #2
100089d0:	b2e4      	uxtb	r4, r4
    if (st.chip_cfg.fifo_enable & INV_Z_GYRO)
100089d2:	06da      	lsls	r2, r3, #27
100089d4:	d501      	bpl.n	100089da <mpu_read_fifo+0x4a>
        packet_size += 2;
100089d6:	3402      	adds	r4, #2
100089d8:	b2e4      	uxtb	r4, r4
    if (st.chip_cfg.fifo_enable & INV_XYZ_ACCEL)
100089da:	071b      	lsls	r3, r3, #28
100089dc:	d500      	bpl.n	100089e0 <mpu_read_fifo+0x50>
100089de:	e08b      	b.n	10008af8 <mpu_read_fifo+0x168>
        packet_size += 6;

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
100089e0:	682b      	ldr	r3, [r5, #0]
100089e2:	ae03      	add	r6, sp, #12
100089e4:	7b19      	ldrb	r1, [r3, #12]
100089e6:	686b      	ldr	r3, [r5, #4]
100089e8:	4f57      	ldr	r7, [pc, #348]	; (10008b48 <mpu_read_fifo+0x1b8>)
100089ea:	7818      	ldrb	r0, [r3, #0]
100089ec:	2202      	movs	r2, #2
100089ee:	0033      	movs	r3, r6
100089f0:	47b8      	blx	r7
100089f2:	46ba      	mov	sl, r7
100089f4:	4681      	mov	r9, r0
100089f6:	2800      	cmp	r0, #0
100089f8:	d000      	beq.n	100089fc <mpu_read_fifo+0x6c>
100089fa:	e098      	b.n	10008b2e <mpu_read_fifo+0x19e>
        return -1;
    fifo_count = (data[0] << 8) | data[1];
100089fc:	7837      	ldrb	r7, [r6, #0]
100089fe:	7873      	ldrb	r3, [r6, #1]
10008a00:	023f      	lsls	r7, r7, #8
10008a02:	431f      	orrs	r7, r3
    if (fifo_count < packet_size)
10008a04:	b2a3      	uxth	r3, r4
10008a06:	469b      	mov	fp, r3
10008a08:	429f      	cmp	r7, r3
10008a0a:	d36d      	bcc.n	10008ae8 <mpu_read_fifo+0x158>
        return 0;
//    log_i("FIFO count: %hd\n", fifo_count);
    if (fifo_count > (st.hw->max_fifo >> 1)) {
10008a0c:	686a      	ldr	r2, [r5, #4]
10008a0e:	8853      	ldrh	r3, [r2, #2]
10008a10:	085b      	lsrs	r3, r3, #1
10008a12:	429f      	cmp	r7, r3
10008a14:	d90c      	bls.n	10008a30 <mpu_read_fifo+0xa0>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, data))
10008a16:	682b      	ldr	r3, [r5, #0]
10008a18:	7810      	ldrb	r0, [r2, #0]
10008a1a:	7cd9      	ldrb	r1, [r3, #19]
10008a1c:	2201      	movs	r2, #1
10008a1e:	0033      	movs	r3, r6
10008a20:	47d0      	blx	sl
10008a22:	2800      	cmp	r0, #0
10008a24:	d000      	beq.n	10008a28 <mpu_read_fifo+0x98>
10008a26:	e082      	b.n	10008b2e <mpu_read_fifo+0x19e>
            return -1;
        if (data[0] & BIT_FIFO_OVERFLOW) {
10008a28:	7833      	ldrb	r3, [r6, #0]
10008a2a:	06db      	lsls	r3, r3, #27
10008a2c:	d500      	bpl.n	10008a30 <mpu_read_fifo+0xa0>
10008a2e:	e082      	b.n	10008b36 <mpu_read_fifo+0x1a6>
    }
    return 0;
}
static inline void get_ms(uint32_t *count)
{
    volatile uint32_t load = (uint32_t)(0xffffffff - dualtimer_get_value(DUALTIMER_TIMER2));
10008a30:	4b46      	ldr	r3, [pc, #280]	; (10008b4c <mpu_read_fifo+0x1bc>)
10008a32:	2001      	movs	r0, #1
10008a34:	4798      	blx	r3
10008a36:	43c0      	mvns	r0, r0
10008a38:	9002      	str	r0, [sp, #8]
    count = (uint32_t *)(load / 26000);
10008a3a:	9b02      	ldr	r3, [sp, #8]
            return -2;
        }
    }
    get_ms((unsigned long*)timestamp);

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
10008a3c:	682b      	ldr	r3, [r5, #0]
10008a3e:	0022      	movs	r2, r4
10008a40:	7b59      	ldrb	r1, [r3, #13]
10008a42:	686b      	ldr	r3, [r5, #4]
10008a44:	7818      	ldrb	r0, [r3, #0]
10008a46:	0033      	movs	r3, r6
10008a48:	47d0      	blx	sl
10008a4a:	4682      	mov	sl, r0
10008a4c:	2800      	cmp	r0, #0
10008a4e:	d16e      	bne.n	10008b2e <mpu_read_fifo+0x19e>
        return -1;
    more[0] = fifo_count / packet_size - 1;
10008a50:	4b3f      	ldr	r3, [pc, #252]	; (10008b50 <mpu_read_fifo+0x1c0>)
10008a52:	0021      	movs	r1, r4
10008a54:	0038      	movs	r0, r7
10008a56:	4798      	blx	r3
10008a58:	9b10      	ldr	r3, [sp, #64]	; 0x40
10008a5a:	3801      	subs	r0, #1
10008a5c:	7018      	strb	r0, [r3, #0]
    sensors[0] = 0;
10008a5e:	4652      	mov	r2, sl
10008a60:	4643      	mov	r3, r8
10008a62:	701a      	strb	r2, [r3, #0]
        unsigned char *sensors, unsigned char *more)
{
    /* Assumes maximum packet size is gyro (6) + accel (6). */
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;
10008a64:	2300      	movs	r3, #0
    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
        return -1;
    more[0] = fifo_count / packet_size - 1;
    sensors[0] = 0;

    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_XYZ_ACCEL) {
10008a66:	2c00      	cmp	r4, #0
10008a68:	d002      	beq.n	10008a70 <mpu_read_fifo+0xe0>
10008a6a:	7c2a      	ldrb	r2, [r5, #16]
10008a6c:	0712      	lsls	r2, r2, #28
10008a6e:	d446      	bmi.n	10008afe <mpu_read_fifo+0x16e>
        accel[1] = (data[index+2] << 8) | data[index+3];
        accel[2] = (data[index+4] << 8) | data[index+5];
        sensors[0] |= INV_XYZ_ACCEL;
        index += 6;
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_X_GYRO) {
10008a70:	455b      	cmp	r3, fp
10008a72:	d039      	beq.n	10008ae8 <mpu_read_fifo+0x158>
10008a74:	7c2a      	ldrb	r2, [r5, #16]
10008a76:	0651      	lsls	r1, r2, #25
10008a78:	d511      	bpl.n	10008a9e <mpu_read_fifo+0x10e>
        gyro[0] = (data[index+0] << 8) | data[index+1];
10008a7a:	5cf2      	ldrb	r2, [r6, r3]
10008a7c:	18f1      	adds	r1, r6, r3
10008a7e:	7849      	ldrb	r1, [r1, #1]
10008a80:	0212      	lsls	r2, r2, #8
10008a82:	430a      	orrs	r2, r1
10008a84:	9900      	ldr	r1, [sp, #0]
        sensors[0] |= INV_X_GYRO;
        index += 2;
10008a86:	3302      	adds	r3, #2
        accel[2] = (data[index+4] << 8) | data[index+5];
        sensors[0] |= INV_XYZ_ACCEL;
        index += 6;
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_X_GYRO) {
        gyro[0] = (data[index+0] << 8) | data[index+1];
10008a88:	800a      	strh	r2, [r1, #0]
        sensors[0] |= INV_X_GYRO;
10008a8a:	4642      	mov	r2, r8
10008a8c:	7811      	ldrb	r1, [r2, #0]
10008a8e:	2240      	movs	r2, #64	; 0x40
10008a90:	430a      	orrs	r2, r1
10008a92:	4641      	mov	r1, r8
        index += 2;
10008a94:	b29b      	uxth	r3, r3
        sensors[0] |= INV_XYZ_ACCEL;
        index += 6;
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_X_GYRO) {
        gyro[0] = (data[index+0] << 8) | data[index+1];
        sensors[0] |= INV_X_GYRO;
10008a96:	700a      	strb	r2, [r1, #0]
        index += 2;
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Y_GYRO) {
10008a98:	459b      	cmp	fp, r3
10008a9a:	d025      	beq.n	10008ae8 <mpu_read_fifo+0x158>
10008a9c:	7c2a      	ldrb	r2, [r5, #16]
10008a9e:	0691      	lsls	r1, r2, #26
10008aa0:	d511      	bpl.n	10008ac6 <mpu_read_fifo+0x136>
        gyro[1] = (data[index+0] << 8) | data[index+1];
10008aa2:	5cf2      	ldrb	r2, [r6, r3]
10008aa4:	18f1      	adds	r1, r6, r3
10008aa6:	7849      	ldrb	r1, [r1, #1]
10008aa8:	0212      	lsls	r2, r2, #8
10008aaa:	430a      	orrs	r2, r1
10008aac:	9900      	ldr	r1, [sp, #0]
        sensors[0] |= INV_Y_GYRO;
        index += 2;
10008aae:	3302      	adds	r3, #2
        gyro[0] = (data[index+0] << 8) | data[index+1];
        sensors[0] |= INV_X_GYRO;
        index += 2;
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Y_GYRO) {
        gyro[1] = (data[index+0] << 8) | data[index+1];
10008ab0:	804a      	strh	r2, [r1, #2]
        sensors[0] |= INV_Y_GYRO;
10008ab2:	4642      	mov	r2, r8
10008ab4:	7811      	ldrb	r1, [r2, #0]
10008ab6:	2220      	movs	r2, #32
10008ab8:	430a      	orrs	r2, r1
10008aba:	4641      	mov	r1, r8
        index += 2;
10008abc:	b29b      	uxth	r3, r3
        sensors[0] |= INV_X_GYRO;
        index += 2;
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Y_GYRO) {
        gyro[1] = (data[index+0] << 8) | data[index+1];
        sensors[0] |= INV_Y_GYRO;
10008abe:	700a      	strb	r2, [r1, #0]
        index += 2;
    }
    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Z_GYRO) {
10008ac0:	459b      	cmp	fp, r3
10008ac2:	d011      	beq.n	10008ae8 <mpu_read_fifo+0x158>
10008ac4:	7c2a      	ldrb	r2, [r5, #16]
10008ac6:	06d2      	lsls	r2, r2, #27
10008ac8:	d50e      	bpl.n	10008ae8 <mpu_read_fifo+0x158>
        gyro[2] = (data[index+0] << 8) | data[index+1];
10008aca:	5cf2      	ldrb	r2, [r6, r3]
10008acc:	18f6      	adds	r6, r6, r3
10008ace:	7873      	ldrb	r3, [r6, #1]
10008ad0:	0212      	lsls	r2, r2, #8
10008ad2:	4313      	orrs	r3, r2
10008ad4:	9a00      	ldr	r2, [sp, #0]
10008ad6:	8093      	strh	r3, [r2, #4]
        sensors[0] |= INV_Z_GYRO;
10008ad8:	4643      	mov	r3, r8
10008ada:	781a      	ldrb	r2, [r3, #0]
10008adc:	2310      	movs	r3, #16
10008ade:	4313      	orrs	r3, r2
10008ae0:	4642      	mov	r2, r8
10008ae2:	7013      	strb	r3, [r2, #0]
        index += 2;
    }

    return 0;
10008ae4:	2300      	movs	r3, #0
10008ae6:	4699      	mov	r9, r3
}
10008ae8:	4648      	mov	r0, r9
10008aea:	b007      	add	sp, #28
10008aec:	bc3c      	pop	{r2, r3, r4, r5}
10008aee:	4690      	mov	r8, r2
10008af0:	4699      	mov	r9, r3
10008af2:	46a2      	mov	sl, r4
10008af4:	46ab      	mov	fp, r5
10008af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (st.chip_cfg.fifo_enable & INV_Y_GYRO)
        packet_size += 2;
    if (st.chip_cfg.fifo_enable & INV_Z_GYRO)
        packet_size += 2;
    if (st.chip_cfg.fifo_enable & INV_XYZ_ACCEL)
        packet_size += 6;
10008af8:	3406      	adds	r4, #6
10008afa:	b2e4      	uxtb	r4, r4
10008afc:	e770      	b.n	100089e0 <mpu_read_fifo+0x50>
        return -1;
    more[0] = fifo_count / packet_size - 1;
    sensors[0] = 0;

    if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_XYZ_ACCEL) {
        accel[0] = (data[index+0] << 8) | data[index+1];
10008afe:	7833      	ldrb	r3, [r6, #0]
10008b00:	7872      	ldrb	r2, [r6, #1]
10008b02:	9901      	ldr	r1, [sp, #4]
10008b04:	021b      	lsls	r3, r3, #8
10008b06:	4313      	orrs	r3, r2
10008b08:	800b      	strh	r3, [r1, #0]
        accel[1] = (data[index+2] << 8) | data[index+3];
10008b0a:	78b3      	ldrb	r3, [r6, #2]
10008b0c:	78f2      	ldrb	r2, [r6, #3]
10008b0e:	021b      	lsls	r3, r3, #8
10008b10:	4313      	orrs	r3, r2
10008b12:	804b      	strh	r3, [r1, #2]
        accel[2] = (data[index+4] << 8) | data[index+5];
10008b14:	7933      	ldrb	r3, [r6, #4]
10008b16:	7972      	ldrb	r2, [r6, #5]
10008b18:	021b      	lsls	r3, r3, #8
10008b1a:	4313      	orrs	r3, r2
10008b1c:	808b      	strh	r3, [r1, #4]
        sensors[0] |= INV_XYZ_ACCEL;
10008b1e:	4643      	mov	r3, r8
10008b20:	781a      	ldrb	r2, [r3, #0]
10008b22:	2308      	movs	r3, #8
10008b24:	4313      	orrs	r3, r2
10008b26:	4642      	mov	r2, r8
10008b28:	7013      	strb	r3, [r2, #0]
        index += 6;
10008b2a:	2306      	movs	r3, #6
10008b2c:	e7a0      	b.n	10008a70 <mpu_read_fifo+0xe0>
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_size = 0;
    unsigned short fifo_count, index = 0;

    if (st.chip_cfg.dmp_on)
        return -1;
10008b2e:	2301      	movs	r3, #1
10008b30:	425b      	negs	r3, r3
10008b32:	4699      	mov	r9, r3
10008b34:	e7d8      	b.n	10008ae8 <mpu_read_fifo+0x158>
    if (fifo_count > (st.hw->max_fifo >> 1)) {
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, data))
            return -1;
        if (data[0] & BIT_FIFO_OVERFLOW) {
            mpu_reset_fifo();
10008b36:	4b07      	ldr	r3, [pc, #28]	; (10008b54 <mpu_read_fifo+0x1c4>)
10008b38:	4798      	blx	r3
            return -2;
10008b3a:	2302      	movs	r3, #2
10008b3c:	425b      	negs	r3, r3
10008b3e:	4699      	mov	r9, r3
10008b40:	e7d2      	b.n	10008ae8 <mpu_read_fifo+0x158>
10008b42:	46c0      	nop			; (mov r8, r8)
10008b44:	1001a4b0 	.word	0x1001a4b0
10008b48:	10008359 	.word	0x10008359
10008b4c:	100081a1 	.word	0x100081a1
10008b50:	10014b89 	.word	0x10014b89
10008b54:	10008525 	.word	0x10008525

10008b58 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
10008b58:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008b5a:	4c36      	ldr	r4, [pc, #216]	; (10008c34 <mpu_set_bypass+0xdc>)
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
10008b5c:	b083      	sub	sp, #12
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008b5e:	7ca3      	ldrb	r3, [r4, #18]
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
10008b60:	0006      	movs	r6, r0
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
10008b62:	4283      	cmp	r3, r0
10008b64:	d05f      	beq.n	10008c26 <mpu_set_bypass+0xce>
        return 0;

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008b66:	466b      	mov	r3, sp
10008b68:	1ddd      	adds	r5, r3, #7
10008b6a:	6823      	ldr	r3, [r4, #0]
10008b6c:	2201      	movs	r2, #1
10008b6e:	7919      	ldrb	r1, [r3, #4]
10008b70:	6863      	ldr	r3, [r4, #4]
10008b72:	4f31      	ldr	r7, [pc, #196]	; (10008c38 <mpu_set_bypass+0xe0>)
10008b74:	7818      	ldrb	r0, [r3, #0]
10008b76:	002b      	movs	r3, r5
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;

    if (bypass_on) {
10008b78:	2e00      	cmp	r6, #0
10008b7a:	d02e      	beq.n	10008bda <mpu_set_bypass+0x82>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008b7c:	47b8      	blx	r7
10008b7e:	2800      	cmp	r0, #0
10008b80:	d155      	bne.n	10008c2e <mpu_set_bypass+0xd6>
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
10008b82:	2220      	movs	r2, #32
10008b84:	782b      	ldrb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008b86:	4f2d      	ldr	r7, [pc, #180]	; (10008c3c <mpu_set_bypass+0xe4>)
        return 0;

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
10008b88:	4393      	bics	r3, r2
10008b8a:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008b8c:	6823      	ldr	r3, [r4, #0]
10008b8e:	3a1f      	subs	r2, #31
10008b90:	7919      	ldrb	r1, [r3, #4]
10008b92:	6863      	ldr	r3, [r4, #4]
10008b94:	7818      	ldrb	r0, [r3, #0]
10008b96:	002b      	movs	r3, r5
10008b98:	47b8      	blx	r7
10008b9a:	2800      	cmp	r0, #0
10008b9c:	d147      	bne.n	10008c2e <mpu_set_bypass+0xd6>
            return -1;
        delay_ms(3);
10008b9e:	4b28      	ldr	r3, [pc, #160]	; (10008c40 <mpu_set_bypass+0xe8>)
10008ba0:	3003      	adds	r0, #3
10008ba2:	4798      	blx	r3
        tmp = BIT_BYPASS_EN;
10008ba4:	2302      	movs	r3, #2
10008ba6:	702b      	strb	r3, [r5, #0]
        if (st.chip_cfg.active_low_int)
10008ba8:	3320      	adds	r3, #32
10008baa:	5ce3      	ldrb	r3, [r4, r3]
10008bac:	2b00      	cmp	r3, #0
10008bae:	d137      	bne.n	10008c20 <mpu_set_bypass+0xc8>
        delay_ms(3);
        if (st.chip_cfg.active_low_int)
            tmp = BIT_ACTL;
        else
            tmp = 0;
        if (st.chip_cfg.latched_int)
10008bb0:	2323      	movs	r3, #35	; 0x23
10008bb2:	5ce3      	ldrb	r3, [r4, r3]
10008bb4:	2b00      	cmp	r3, #0
10008bb6:	d003      	beq.n	10008bc0 <mpu_set_bypass+0x68>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008bb8:	2330      	movs	r3, #48	; 0x30
10008bba:	782a      	ldrb	r2, [r5, #0]
10008bbc:	4313      	orrs	r3, r2
10008bbe:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008bc0:	6823      	ldr	r3, [r4, #0]
10008bc2:	2201      	movs	r2, #1
10008bc4:	7dd9      	ldrb	r1, [r3, #23]
10008bc6:	6863      	ldr	r3, [r4, #4]
10008bc8:	7818      	ldrb	r0, [r3, #0]
10008bca:	002b      	movs	r3, r5
10008bcc:	47b8      	blx	r7
10008bce:	2800      	cmp	r0, #0
10008bd0:	d12d      	bne.n	10008c2e <mpu_set_bypass+0xd6>
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
10008bd2:	2000      	movs	r0, #0
        if (st.chip_cfg.latched_int)
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
10008bd4:	74a6      	strb	r6, [r4, #18]
    return 0;
}
10008bd6:	b003      	add	sp, #12
10008bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008bda:	47b8      	blx	r7
10008bdc:	2800      	cmp	r0, #0
10008bde:	d126      	bne.n	10008c2e <mpu_set_bypass+0xd6>
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
10008be0:	7aa3      	ldrb	r3, [r4, #10]
10008be2:	07db      	lsls	r3, r3, #31
10008be4:	d417      	bmi.n	10008c16 <mpu_set_bypass+0xbe>
            tmp |= BIT_AUX_IF_EN;
        else
            tmp &= ~BIT_AUX_IF_EN;
10008be6:	2220      	movs	r2, #32
10008be8:	782b      	ldrb	r3, [r5, #0]
10008bea:	4393      	bics	r3, r2
10008bec:	702b      	strb	r3, [r5, #0]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
10008bee:	6823      	ldr	r3, [r4, #0]
10008bf0:	2201      	movs	r2, #1
10008bf2:	7919      	ldrb	r1, [r3, #4]
10008bf4:	6863      	ldr	r3, [r4, #4]
10008bf6:	4f11      	ldr	r7, [pc, #68]	; (10008c3c <mpu_set_bypass+0xe4>)
10008bf8:	7818      	ldrb	r0, [r3, #0]
10008bfa:	002b      	movs	r3, r5
10008bfc:	47b8      	blx	r7
10008bfe:	2800      	cmp	r0, #0
10008c00:	d115      	bne.n	10008c2e <mpu_set_bypass+0xd6>
            return -1;
        delay_ms(3);
10008c02:	4b0f      	ldr	r3, [pc, #60]	; (10008c40 <mpu_set_bypass+0xe8>)
10008c04:	3003      	adds	r0, #3
10008c06:	4798      	blx	r3
        if (st.chip_cfg.active_low_int)
10008c08:	2322      	movs	r3, #34	; 0x22
10008c0a:	5ce3      	ldrb	r3, [r4, r3]
10008c0c:	2b00      	cmp	r3, #0
10008c0e:	d00c      	beq.n	10008c2a <mpu_set_bypass+0xd2>
            tmp = BIT_ACTL;
10008c10:	2380      	movs	r3, #128	; 0x80
10008c12:	702b      	strb	r3, [r5, #0]
10008c14:	e7cc      	b.n	10008bb0 <mpu_set_bypass+0x58>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
            tmp |= BIT_AUX_IF_EN;
10008c16:	2320      	movs	r3, #32
10008c18:	782a      	ldrb	r2, [r5, #0]
10008c1a:	4313      	orrs	r3, r2
10008c1c:	702b      	strb	r3, [r5, #0]
10008c1e:	e7e6      	b.n	10008bee <mpu_set_bypass+0x96>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
        delay_ms(3);
        tmp = BIT_BYPASS_EN;
        if (st.chip_cfg.active_low_int)
            tmp |= BIT_ACTL;
10008c20:	2382      	movs	r3, #130	; 0x82
10008c22:	702b      	strb	r3, [r5, #0]
10008c24:	e7c4      	b.n	10008bb0 <mpu_set_bypass+0x58>
int mpu_set_bypass(unsigned char bypass_on)
{
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;
10008c26:	2000      	movs	r0, #0
10008c28:	e7d5      	b.n	10008bd6 <mpu_set_bypass+0x7e>
            return -1;
        delay_ms(3);
        if (st.chip_cfg.active_low_int)
            tmp = BIT_ACTL;
        else
            tmp = 0;
10008c2a:	702b      	strb	r3, [r5, #0]
10008c2c:	e7c0      	b.n	10008bb0 <mpu_set_bypass+0x58>
    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
            return -1;
10008c2e:	2001      	movs	r0, #1
10008c30:	4240      	negs	r0, r0
10008c32:	e7d0      	b.n	10008bd6 <mpu_set_bypass+0x7e>
10008c34:	1001a4b0 	.word	0x1001a4b0
10008c38:	10008359 	.word	0x10008359
10008c3c:	10008301 	.word	0x10008301
10008c40:	1000810d 	.word	0x1000810d

10008c44 <mpu_set_int_latched>:
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008c44:	2323      	movs	r3, #35	; 0x23
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008c46:	b570      	push	{r4, r5, r6, lr}
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008c48:	4c17      	ldr	r4, [pc, #92]	; (10008ca8 <mpu_set_int_latched+0x64>)
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008c4a:	b082      	sub	sp, #8
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008c4c:	5ce3      	ldrb	r3, [r4, r3]
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
10008c4e:	0005      	movs	r5, r0
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
10008c50:	4283      	cmp	r3, r0
10008c52:	d024      	beq.n	10008c9e <mpu_set_int_latched+0x5a>
        return 0;

    if (enable)
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008c54:	466b      	mov	r3, sp
10008c56:	3307      	adds	r3, #7
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;

    if (enable)
10008c58:	2800      	cmp	r0, #0
10008c5a:	d11d      	bne.n	10008c98 <mpu_set_int_latched+0x54>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
    else
        tmp = 0;
10008c5c:	7018      	strb	r0, [r3, #0]
    if (st.chip_cfg.bypass_mode)
10008c5e:	7ca2      	ldrb	r2, [r4, #18]
10008c60:	2a00      	cmp	r2, #0
10008c62:	d003      	beq.n	10008c6c <mpu_set_int_latched+0x28>
        tmp |= BIT_BYPASS_EN;
10008c64:	2202      	movs	r2, #2
10008c66:	7819      	ldrb	r1, [r3, #0]
10008c68:	430a      	orrs	r2, r1
10008c6a:	701a      	strb	r2, [r3, #0]
    if (st.chip_cfg.active_low_int)
10008c6c:	2222      	movs	r2, #34	; 0x22
10008c6e:	5ca2      	ldrb	r2, [r4, r2]
10008c70:	2a00      	cmp	r2, #0
10008c72:	d004      	beq.n	10008c7e <mpu_set_int_latched+0x3a>
        tmp |= BIT_ACTL;
10008c74:	2180      	movs	r1, #128	; 0x80
10008c76:	781a      	ldrb	r2, [r3, #0]
10008c78:	4249      	negs	r1, r1
10008c7a:	430a      	orrs	r2, r1
10008c7c:	701a      	strb	r2, [r3, #0]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
10008c7e:	6822      	ldr	r2, [r4, #0]
10008c80:	4e0a      	ldr	r6, [pc, #40]	; (10008cac <mpu_set_int_latched+0x68>)
10008c82:	7dd1      	ldrb	r1, [r2, #23]
10008c84:	6862      	ldr	r2, [r4, #4]
10008c86:	7810      	ldrb	r0, [r2, #0]
10008c88:	2201      	movs	r2, #1
10008c8a:	47b0      	blx	r6
10008c8c:	2800      	cmp	r0, #0
10008c8e:	d108      	bne.n	10008ca2 <mpu_set_int_latched+0x5e>
        return -1;
    st.chip_cfg.latched_int = enable;
10008c90:	2323      	movs	r3, #35	; 0x23
10008c92:	54e5      	strb	r5, [r4, r3]
    return 0;
}
10008c94:	b002      	add	sp, #8
10008c96:	bd70      	pop	{r4, r5, r6, pc}
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;

    if (enable)
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
10008c98:	2230      	movs	r2, #48	; 0x30
10008c9a:	701a      	strb	r2, [r3, #0]
10008c9c:	e7df      	b.n	10008c5e <mpu_set_int_latched+0x1a>
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
        return 0;
10008c9e:	2000      	movs	r0, #0
10008ca0:	e7f8      	b.n	10008c94 <mpu_set_int_latched+0x50>
    if (st.chip_cfg.bypass_mode)
        tmp |= BIT_BYPASS_EN;
    if (st.chip_cfg.active_low_int)
        tmp |= BIT_ACTL;
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
        return -1;
10008ca2:	2001      	movs	r0, #1
10008ca4:	4240      	negs	r0, r0
10008ca6:	e7f5      	b.n	10008c94 <mpu_set_int_latched+0x50>
10008ca8:	1001a4b0 	.word	0x1001a4b0
10008cac:	10008301 	.word	0x10008301

10008cb0 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
10008cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
10008cb2:	0004      	movs	r4, r0
10008cb4:	b083      	sub	sp, #12
    unsigned char tmp[2];

    if (rate > 40)
10008cb6:	2828      	cmp	r0, #40	; 0x28
10008cb8:	d85a      	bhi.n	10008d70 <mpu_lp_accel_mode+0xc0>
        return -1;

    if (!rate) {
10008cba:	2800      	cmp	r0, #0
10008cbc:	d114      	bne.n	10008ce8 <mpu_lp_accel_mode+0x38>
        mpu_set_int_latched(0);
10008cbe:	4b36      	ldr	r3, [pc, #216]	; (10008d98 <mpu_lp_accel_mode+0xe8>)
10008cc0:	2000      	movs	r0, #0
10008cc2:	4798      	blx	r3
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
10008cc4:	2207      	movs	r2, #7
    if (rate > 40)
        return -1;

    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
10008cc6:	ab01      	add	r3, sp, #4
10008cc8:	701c      	strb	r4, [r3, #0]
        tmp[1] = BIT_STBY_XYZG;
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008cca:	4c34      	ldr	r4, [pc, #208]	; (10008d9c <mpu_lp_accel_mode+0xec>)
        return -1;

    if (!rate) {
        mpu_set_int_latched(0);
        tmp[0] = 0;
        tmp[1] = BIT_STBY_XYZG;
10008ccc:	705a      	strb	r2, [r3, #1]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
10008cce:	6822      	ldr	r2, [r4, #0]
10008cd0:	4d33      	ldr	r5, [pc, #204]	; (10008da0 <mpu_lp_accel_mode+0xf0>)
10008cd2:	7d51      	ldrb	r1, [r2, #21]
10008cd4:	6862      	ldr	r2, [r4, #4]
10008cd6:	7810      	ldrb	r0, [r2, #0]
10008cd8:	2202      	movs	r2, #2
10008cda:	47a8      	blx	r5
10008cdc:	1e05      	subs	r5, r0, #0
10008cde:	d147      	bne.n	10008d70 <mpu_lp_accel_mode+0xc0>
            return -1;
        st.chip_cfg.lp_accel_mode = 0;
10008ce0:	7520      	strb	r0, [r4, #20]
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
    mpu_configure_fifo(0);

    return 0;
}
10008ce2:	0028      	movs	r0, r5
10008ce4:	b003      	add	sp, #12
10008ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
10008ce8:	2001      	movs	r0, #1
10008cea:	4b2b      	ldr	r3, [pc, #172]	; (10008d98 <mpu_lp_accel_mode+0xe8>)
10008cec:	4798      	blx	r3
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
        tmp[0] = INV_LPA_1_25HZ;
10008cee:	ad01      	add	r5, sp, #4
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
10008cf0:	2c01      	cmp	r4, #1
10008cf2:	d043      	beq.n	10008d7c <mpu_lp_accel_mode+0xcc>
        tmp[0] = INV_LPA_1_25HZ;
    else if (rate == 2)
10008cf4:	2c02      	cmp	r4, #2
10008cf6:	d044      	beq.n	10008d82 <mpu_lp_accel_mode+0xd2>
        tmp[0] = INV_LPA_2_5HZ;
    else if (rate <= 5)
10008cf8:	2c05      	cmp	r4, #5
10008cfa:	d93c      	bls.n	10008d76 <mpu_lp_accel_mode+0xc6>
        tmp[0] = INV_LPA_5HZ;
    else if (rate <= 10)
10008cfc:	2c0a      	cmp	r4, #10
10008cfe:	d843      	bhi.n	10008d88 <mpu_lp_accel_mode+0xd8>
        tmp[0] = INV_LPA_10HZ;
10008d00:	2305      	movs	r3, #5
10008d02:	702b      	strb	r3, [r5, #0]
        tmp[0] = INV_LPA_160HZ;
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
10008d04:	4c25      	ldr	r4, [pc, #148]	; (10008d9c <mpu_lp_accel_mode+0xec>)
10008d06:	2201      	movs	r2, #1
10008d08:	6823      	ldr	r3, [r4, #0]
10008d0a:	4e25      	ldr	r6, [pc, #148]	; (10008da0 <mpu_lp_accel_mode+0xf0>)
10008d0c:	7a59      	ldrb	r1, [r3, #9]
10008d0e:	6863      	ldr	r3, [r4, #4]
10008d10:	7818      	ldrb	r0, [r3, #0]
10008d12:	002b      	movs	r3, r5
10008d14:	47b0      	blx	r6
10008d16:	2800      	cmp	r0, #0
10008d18:	d12a      	bne.n	10008d70 <mpu_lp_accel_mode+0xc0>
        return -1;
    /* Enable LP ACCEL mode, ACCEL_FCHOICE_B=1*/
    if (i2c_read(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008d1a:	6823      	ldr	r3, [r4, #0]
10008d1c:	2201      	movs	r2, #1
10008d1e:	7a19      	ldrb	r1, [r3, #8]
10008d20:	6863      	ldr	r3, [r4, #4]
10008d22:	4f20      	ldr	r7, [pc, #128]	; (10008da4 <mpu_lp_accel_mode+0xf4>)
10008d24:	7818      	ldrb	r0, [r3, #0]
10008d26:	002b      	movs	r3, r5
10008d28:	47b8      	blx	r7
10008d2a:	2800      	cmp	r0, #0
10008d2c:	d120      	bne.n	10008d70 <mpu_lp_accel_mode+0xc0>
       	return -1;

    tmp[0] = BIT_ACCL_FC_B | tmp[0];
10008d2e:	2308      	movs	r3, #8
10008d30:	782a      	ldrb	r2, [r5, #0]
10008d32:	4313      	orrs	r3, r2
10008d34:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, tmp))
10008d36:	6823      	ldr	r3, [r4, #0]
10008d38:	2201      	movs	r2, #1
10008d3a:	7a19      	ldrb	r1, [r3, #8]
10008d3c:	6863      	ldr	r3, [r4, #4]
10008d3e:	7818      	ldrb	r0, [r3, #0]
10008d40:	002b      	movs	r3, r5
10008d42:	47b0      	blx	r6
10008d44:	2800      	cmp	r0, #0
10008d46:	d113      	bne.n	10008d70 <mpu_lp_accel_mode+0xc0>
    	return -1;
    tmp[0] = BIT_LPA_CYCLE;
10008d48:	2320      	movs	r3, #32
10008d4a:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
10008d4c:	6823      	ldr	r3, [r4, #0]
10008d4e:	2201      	movs	r2, #1
10008d50:	7d59      	ldrb	r1, [r3, #21]
10008d52:	6863      	ldr	r3, [r4, #4]
10008d54:	7818      	ldrb	r0, [r3, #0]
10008d56:	002b      	movs	r3, r5
10008d58:	47b0      	blx	r6
10008d5a:	1e05      	subs	r5, r0, #0
10008d5c:	d108      	bne.n	10008d70 <mpu_lp_accel_mode+0xc0>
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
10008d5e:	2308      	movs	r3, #8
10008d60:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.clk_src = 0;
    st.chip_cfg.lp_accel_mode = 1;
10008d62:	3b07      	subs	r3, #7
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
    st.chip_cfg.clk_src = 0;
10008d64:	7320      	strb	r0, [r4, #12]
    st.chip_cfg.lp_accel_mode = 1;
10008d66:	7523      	strb	r3, [r4, #20]
    mpu_configure_fifo(0);
10008d68:	2000      	movs	r0, #0
10008d6a:	4b0f      	ldr	r3, [pc, #60]	; (10008da8 <mpu_lp_accel_mode+0xf8>)
10008d6c:	4798      	blx	r3
10008d6e:	e7b8      	b.n	10008ce2 <mpu_lp_accel_mode+0x32>
    else if (rate <= 320)
        tmp[0] = INV_LPA_320HZ;
    else
        tmp[0] = INV_LPA_640HZ;
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
        return -1;
10008d70:	2501      	movs	r5, #1
10008d72:	426d      	negs	r5, r5
10008d74:	e7b5      	b.n	10008ce2 <mpu_lp_accel_mode+0x32>
    if (rate == 1)
        tmp[0] = INV_LPA_1_25HZ;
    else if (rate == 2)
        tmp[0] = INV_LPA_2_5HZ;
    else if (rate <= 5)
        tmp[0] = INV_LPA_5HZ;
10008d76:	2304      	movs	r3, #4
10008d78:	702b      	strb	r3, [r5, #0]
10008d7a:	e7c3      	b.n	10008d04 <mpu_lp_accel_mode+0x54>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
        tmp[0] = INV_LPA_1_25HZ;
10008d7c:	2302      	movs	r3, #2
10008d7e:	702b      	strb	r3, [r5, #0]
10008d80:	e7c0      	b.n	10008d04 <mpu_lp_accel_mode+0x54>
    else if (rate == 2)
        tmp[0] = INV_LPA_2_5HZ;
10008d82:	2303      	movs	r3, #3
10008d84:	702b      	strb	r3, [r5, #0]
10008d86:	e7bd      	b.n	10008d04 <mpu_lp_accel_mode+0x54>
    else if (rate <= 5)
        tmp[0] = INV_LPA_5HZ;
    else if (rate <= 10)
        tmp[0] = INV_LPA_10HZ;
    else if (rate <= 20)
10008d88:	2c14      	cmp	r4, #20
10008d8a:	d802      	bhi.n	10008d92 <mpu_lp_accel_mode+0xe2>
        tmp[0] = INV_LPA_20HZ;
10008d8c:	2306      	movs	r3, #6
10008d8e:	702b      	strb	r3, [r5, #0]
10008d90:	e7b8      	b.n	10008d04 <mpu_lp_accel_mode+0x54>
    else if (rate <= 40)
        tmp[0] = INV_LPA_40HZ;
10008d92:	2307      	movs	r3, #7
10008d94:	702b      	strb	r3, [r5, #0]
10008d96:	e7b5      	b.n	10008d04 <mpu_lp_accel_mode+0x54>
10008d98:	10008c45 	.word	0x10008c45
10008d9c:	1001a4b0 	.word	0x1001a4b0
10008da0:	10008301 	.word	0x10008301
10008da4:	10008359 	.word	0x10008359
10008da8:	1000892d 	.word	0x1000892d

10008dac <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10008dac:	b530      	push	{r4, r5, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008dae:	4c2c      	ldr	r4, [pc, #176]	; (10008e60 <mpu_set_sample_rate+0xb4>)
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10008db0:	b083      	sub	sp, #12
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008db2:	7aa3      	ldrb	r3, [r4, #10]
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
10008db4:	0005      	movs	r5, r0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
10008db6:	2b00      	cmp	r3, #0
10008db8:	d04e      	beq.n	10008e58 <mpu_set_sample_rate+0xac>
        return -1;

    if (st.chip_cfg.dmp_on)
10008dba:	2324      	movs	r3, #36	; 0x24
10008dbc:	5ce3      	ldrb	r3, [r4, r3]
10008dbe:	2b00      	cmp	r3, #0
10008dc0:	d14a      	bne.n	10008e58 <mpu_set_sample_rate+0xac>
        return -1;
    else {
        if (st.chip_cfg.lp_accel_mode) {
10008dc2:	7d23      	ldrb	r3, [r4, #20]
10008dc4:	2b00      	cmp	r3, #0
10008dc6:	d005      	beq.n	10008dd4 <mpu_set_sample_rate+0x28>
            if (rate && (rate <= 40)) {
10008dc8:	1e43      	subs	r3, r0, #1
10008dca:	2b27      	cmp	r3, #39	; 0x27
10008dcc:	d940      	bls.n	10008e50 <mpu_set_sample_rate+0xa4>
                return 0;
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
10008dce:	2000      	movs	r0, #0
10008dd0:	4b24      	ldr	r3, [pc, #144]	; (10008e64 <mpu_set_sample_rate+0xb8>)
10008dd2:	4798      	blx	r3
10008dd4:	20f9      	movs	r0, #249	; 0xf9
        }
        if (rate < 4)
10008dd6:	2d03      	cmp	r5, #3
10008dd8:	d822      	bhi.n	10008e20 <mpu_set_sample_rate+0x74>
            rate = 4;
        else if (rate > 1000)
            rate = 1000;

        data = 1000 / rate - 1;
10008dda:	466b      	mov	r3, sp
10008ddc:	71d8      	strb	r0, [r3, #7]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
10008dde:	6823      	ldr	r3, [r4, #0]
10008de0:	4d21      	ldr	r5, [pc, #132]	; (10008e68 <mpu_set_sample_rate+0xbc>)
10008de2:	7859      	ldrb	r1, [r3, #1]
10008de4:	6863      	ldr	r3, [r4, #4]
10008de6:	2201      	movs	r2, #1
10008de8:	7818      	ldrb	r0, [r3, #0]
10008dea:	466b      	mov	r3, sp
10008dec:	3307      	adds	r3, #7
10008dee:	47a8      	blx	r5
10008df0:	1e05      	subs	r5, r0, #0
10008df2:	d131      	bne.n	10008e58 <mpu_set_sample_rate+0xac>
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);
10008df4:	466b      	mov	r3, sp
10008df6:	20fa      	movs	r0, #250	; 0xfa
10008df8:	79d9      	ldrb	r1, [r3, #7]
10008dfa:	0080      	lsls	r0, r0, #2
10008dfc:	4b1b      	ldr	r3, [pc, #108]	; (10008e6c <mpu_set_sample_rate+0xc0>)
10008dfe:	3101      	adds	r1, #1
10008e00:	4798      	blx	r3

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10008e02:	8d23      	ldrh	r3, [r4, #40]	; 0x28

        data = 1000 / rate - 1;
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);
10008e04:	81e0      	strh	r0, [r4, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10008e06:	1c18      	adds	r0, r3, #0
10008e08:	2b64      	cmp	r3, #100	; 0x64
10008e0a:	d816      	bhi.n	10008e3a <mpu_set_sample_rate+0x8e>
10008e0c:	4b18      	ldr	r3, [pc, #96]	; (10008e70 <mpu_set_sample_rate+0xc4>)
10008e0e:	b280      	uxth	r0, r0
10008e10:	4798      	blx	r3
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
10008e12:	89e0      	ldrh	r0, [r4, #14]
10008e14:	4b17      	ldr	r3, [pc, #92]	; (10008e74 <mpu_set_sample_rate+0xc8>)
10008e16:	0840      	lsrs	r0, r0, #1
10008e18:	4798      	blx	r3
        return 0;
    }
}
10008e1a:	0028      	movs	r0, r5
10008e1c:	b003      	add	sp, #12
10008e1e:	bd30      	pop	{r4, r5, pc}
10008e20:	23fa      	movs	r3, #250	; 0xfa
10008e22:	1c29      	adds	r1, r5, #0
10008e24:	009b      	lsls	r3, r3, #2
10008e26:	429d      	cmp	r5, r3
10008e28:	d809      	bhi.n	10008e3e <mpu_set_sample_rate+0x92>
10008e2a:	20fa      	movs	r0, #250	; 0xfa
10008e2c:	b289      	uxth	r1, r1
10008e2e:	0080      	lsls	r0, r0, #2
10008e30:	4b0e      	ldr	r3, [pc, #56]	; (10008e6c <mpu_set_sample_rate+0xc0>)
10008e32:	4798      	blx	r3
10008e34:	3801      	subs	r0, #1
10008e36:	b2c0      	uxtb	r0, r0
10008e38:	e7cf      	b.n	10008dda <mpu_set_sample_rate+0x2e>
            return -1;

        st.chip_cfg.sample_rate = 1000 / (1 + data);

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
10008e3a:	2064      	movs	r0, #100	; 0x64
10008e3c:	e7e6      	b.n	10008e0c <mpu_set_sample_rate+0x60>
10008e3e:	20fa      	movs	r0, #250	; 0xfa
10008e40:	1c19      	adds	r1, r3, #0
10008e42:	b289      	uxth	r1, r1
10008e44:	0080      	lsls	r0, r0, #2
10008e46:	4b09      	ldr	r3, [pc, #36]	; (10008e6c <mpu_set_sample_rate+0xc0>)
10008e48:	4798      	blx	r3
10008e4a:	3801      	subs	r0, #1
10008e4c:	b2c0      	uxtb	r0, r0
10008e4e:	e7c4      	b.n	10008dda <mpu_set_sample_rate+0x2e>
        return -1;
    else {
        if (st.chip_cfg.lp_accel_mode) {
            if (rate && (rate <= 40)) {
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
10008e50:	4b04      	ldr	r3, [pc, #16]	; (10008e64 <mpu_set_sample_rate+0xb8>)
10008e52:	4798      	blx	r3
                return 0;
10008e54:	2500      	movs	r5, #0
10008e56:	e7e0      	b.n	10008e1a <mpu_set_sample_rate+0x6e>
int mpu_set_sample_rate(unsigned short rate)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
        return -1;
10008e58:	2501      	movs	r5, #1
10008e5a:	426d      	negs	r5, r5
10008e5c:	e7dd      	b.n	10008e1a <mpu_set_sample_rate+0x6e>
10008e5e:	46c0      	nop			; (mov r8, r8)
10008e60:	1001a4b0 	.word	0x1001a4b0
10008e64:	10008cb1 	.word	0x10008cb1
10008e68:	10008301 	.word	0x10008301
10008e6c:	10014b89 	.word	0x10014b89
10008e70:	100088c9 	.word	0x100088c9
10008e74:	10008819 	.word	0x10008819

10008e78 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
10008e78:	b5f0      	push	{r4, r5, r6, r7, lr}
10008e7a:	464e      	mov	r6, r9
10008e7c:	4657      	mov	r7, sl
10008e7e:	4645      	mov	r5, r8
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
10008e80:	2370      	movs	r3, #112	; 0x70
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
10008e82:	b4e0      	push	{r5, r6, r7}
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
10008e84:	4003      	ands	r3, r0
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
10008e86:	b082      	sub	sp, #8
10008e88:	0006      	movs	r6, r0
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
10008e8a:	2b00      	cmp	r3, #0
10008e8c:	d100      	bne.n	10008e90 <mpu_set_sensors+0x18>
10008e8e:	e095      	b.n	10008fbc <mpu_set_sensors+0x144>
        data = INV_CLK_PLL;
10008e90:	466b      	mov	r3, sp
10008e92:	1d9d      	adds	r5, r3, #6
10008e94:	2301      	movs	r3, #1
10008e96:	702b      	strb	r3, [r5, #0]
    else if (sensors)
        data = 0;
    else
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10008e98:	4c5f      	ldr	r4, [pc, #380]	; (10009018 <mpu_set_sensors+0x1a0>)
10008e9a:	4f60      	ldr	r7, [pc, #384]	; (1000901c <mpu_set_sensors+0x1a4>)
10008e9c:	6823      	ldr	r3, [r4, #0]
10008e9e:	2201      	movs	r2, #1
10008ea0:	7d59      	ldrb	r1, [r3, #21]
10008ea2:	6863      	ldr	r3, [r4, #4]
10008ea4:	46b8      	mov	r8, r7
10008ea6:	7818      	ldrb	r0, [r3, #0]
10008ea8:	002b      	movs	r3, r5
10008eaa:	47b8      	blx	r7
10008eac:	2800      	cmp	r0, #0
10008eae:	d000      	beq.n	10008eb2 <mpu_set_sensors+0x3a>
10008eb0:	e0ad      	b.n	1000900e <mpu_set_sensors+0x196>
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008eb2:	2240      	movs	r2, #64	; 0x40
10008eb4:	782b      	ldrb	r3, [r5, #0]

    data = 0;
10008eb6:	7028      	strb	r0, [r5, #0]
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008eb8:	4393      	bics	r3, r2
10008eba:	7323      	strb	r3, [r4, #12]

    data = 0;
    if (!(sensors & INV_X_GYRO))
10008ebc:	4232      	tst	r2, r6
10008ebe:	d100      	bne.n	10008ec2 <mpu_set_sensors+0x4a>
10008ec0:	e093      	b.n	10008fea <mpu_set_sensors+0x172>
        data |= BIT_STBY_XG;
    if (!(sensors & INV_Y_GYRO))
10008ec2:	06b3      	lsls	r3, r6, #26
10008ec4:	d403      	bmi.n	10008ece <mpu_set_sensors+0x56>
        data |= BIT_STBY_YG;
10008ec6:	2302      	movs	r3, #2
10008ec8:	782a      	ldrb	r2, [r5, #0]
10008eca:	4313      	orrs	r3, r2
10008ecc:	702b      	strb	r3, [r5, #0]
    if (!(sensors & INV_Z_GYRO))
10008ece:	06f3      	lsls	r3, r6, #27
10008ed0:	d403      	bmi.n	10008eda <mpu_set_sensors+0x62>
        data |= BIT_STBY_ZG;
10008ed2:	2301      	movs	r3, #1
10008ed4:	782a      	ldrb	r2, [r5, #0]
10008ed6:	4313      	orrs	r3, r2
10008ed8:	702b      	strb	r3, [r5, #0]
    if (!(sensors & INV_XYZ_ACCEL))
10008eda:	0733      	lsls	r3, r6, #28
10008edc:	d400      	bmi.n	10008ee0 <mpu_set_sensors+0x68>
10008ede:	e08a      	b.n	10008ff6 <mpu_set_sensors+0x17e>
        data |= BIT_STBY_XYZA;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
10008ee0:	6823      	ldr	r3, [r4, #0]
10008ee2:	2201      	movs	r2, #1
10008ee4:	7d99      	ldrb	r1, [r3, #22]
10008ee6:	6863      	ldr	r3, [r4, #4]
10008ee8:	7818      	ldrb	r0, [r3, #0]
10008eea:	002b      	movs	r3, r5
10008eec:	47c0      	blx	r8
10008eee:	2800      	cmp	r0, #0
10008ef0:	d000      	beq.n	10008ef4 <mpu_set_sensors+0x7c>
10008ef2:	e08c      	b.n	1000900e <mpu_set_sensors+0x196>
        st.chip_cfg.sensors = 0;
        return -1;
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
10008ef4:	2308      	movs	r3, #8
10008ef6:	0032      	movs	r2, r6
10008ef8:	439a      	bics	r2, r3
10008efa:	d041      	beq.n	10008f80 <mpu_set_sensors+0x108>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
10008efc:	4b48      	ldr	r3, [pc, #288]	; (10009020 <mpu_set_sensors+0x1a8>)
10008efe:	4798      	blx	r3
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008f00:	466b      	mov	r3, sp
10008f02:	3307      	adds	r3, #7
10008f04:	469a      	mov	sl, r3
10008f06:	6823      	ldr	r3, [r4, #0]
10008f08:	2201      	movs	r2, #1
10008f0a:	7919      	ldrb	r1, [r3, #4]
10008f0c:	6863      	ldr	r3, [r4, #4]
10008f0e:	4f45      	ldr	r7, [pc, #276]	; (10009024 <mpu_set_sensors+0x1ac>)
10008f10:	7818      	ldrb	r0, [r3, #0]
10008f12:	4653      	mov	r3, sl
10008f14:	47b8      	blx	r7
10008f16:	2800      	cmp	r0, #0
10008f18:	d000      	beq.n	10008f1c <mpu_set_sensors+0xa4>
10008f1a:	e075      	b.n	10009008 <mpu_set_sensors+0x190>
        return -1;
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
10008f1c:	07f3      	lsls	r3, r6, #31
10008f1e:	d53c      	bpl.n	10008f9a <mpu_set_sensors+0x122>
        data = AKM_SINGLE_MEASUREMENT;
10008f20:	2311      	movs	r3, #17
10008f22:	702b      	strb	r3, [r5, #0]
        user_ctrl |= BIT_AUX_IF_EN;
10008f24:	4653      	mov	r3, sl
10008f26:	781a      	ldrb	r2, [r3, #0]
10008f28:	2320      	movs	r3, #32
10008f2a:	4313      	orrs	r3, r2
10008f2c:	4652      	mov	r2, sl
10008f2e:	7013      	strb	r3, [r2, #0]
    } else {
        data = AKM_POWER_DOWN;
        user_ctrl &= ~BIT_AUX_IF_EN;
    }
    if (st.chip_cfg.dmp_on)
10008f30:	2224      	movs	r2, #36	; 0x24
10008f32:	5ca2      	ldrb	r2, [r4, r2]
10008f34:	2a00      	cmp	r2, #0
10008f36:	d03c      	beq.n	10008fb2 <mpu_set_sensors+0x13a>
        user_ctrl |= BIT_DMP_EN;
10008f38:	2280      	movs	r2, #128	; 0x80
10008f3a:	4252      	negs	r2, r2
10008f3c:	4313      	orrs	r3, r2
10008f3e:	4652      	mov	r2, sl
10008f40:	7013      	strb	r3, [r2, #0]
    else
        user_ctrl &= ~BIT_DMP_EN;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
10008f42:	2326      	movs	r3, #38	; 0x26
10008f44:	6822      	ldr	r2, [r4, #0]
10008f46:	5cd1      	ldrb	r1, [r2, r3]
10008f48:	6863      	ldr	r3, [r4, #4]
10008f4a:	2201      	movs	r2, #1
10008f4c:	7818      	ldrb	r0, [r3, #0]
10008f4e:	002b      	movs	r3, r5
10008f50:	47c0      	blx	r8
10008f52:	2800      	cmp	r0, #0
10008f54:	d158      	bne.n	10009008 <mpu_set_sensors+0x190>
        return -1;
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008f56:	6823      	ldr	r3, [r4, #0]
10008f58:	2201      	movs	r2, #1
10008f5a:	7919      	ldrb	r1, [r3, #4]
10008f5c:	6863      	ldr	r3, [r4, #4]
10008f5e:	7818      	ldrb	r0, [r3, #0]
10008f60:	4653      	mov	r3, sl
10008f62:	47c0      	blx	r8
10008f64:	1e05      	subs	r5, r0, #0
10008f66:	d14f      	bne.n	10009008 <mpu_set_sensors+0x190>
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
    st.chip_cfg.lp_accel_mode = 0;
10008f68:	7520      	strb	r0, [r4, #20]
    delay_ms(50);
10008f6a:	4b2f      	ldr	r3, [pc, #188]	; (10009028 <mpu_set_sensors+0x1b0>)
10008f6c:	2032      	movs	r0, #50	; 0x32
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
10008f6e:	72a6      	strb	r6, [r4, #10]
    st.chip_cfg.lp_accel_mode = 0;
    delay_ms(50);
10008f70:	4798      	blx	r3
    return 0;
}
10008f72:	0028      	movs	r0, r5
10008f74:	b002      	add	sp, #8
10008f76:	bc1c      	pop	{r2, r3, r4}
10008f78:	4690      	mov	r8, r2
10008f7a:	4699      	mov	r9, r3
10008f7c:	46a2      	mov	sl, r4
10008f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
10008f80:	466b      	mov	r3, sp
10008f82:	3307      	adds	r3, #7
10008f84:	469a      	mov	sl, r3
10008f86:	6823      	ldr	r3, [r4, #0]
10008f88:	2201      	movs	r2, #1
10008f8a:	7919      	ldrb	r1, [r3, #4]
10008f8c:	6863      	ldr	r3, [r4, #4]
10008f8e:	4f25      	ldr	r7, [pc, #148]	; (10009024 <mpu_set_sensors+0x1ac>)
10008f90:	7818      	ldrb	r0, [r3, #0]
10008f92:	4653      	mov	r3, sl
10008f94:	47b8      	blx	r7
10008f96:	2800      	cmp	r0, #0
10008f98:	d136      	bne.n	10009008 <mpu_set_sensors+0x190>
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
        data = AKM_SINGLE_MEASUREMENT;
        user_ctrl |= BIT_AUX_IF_EN;
    } else {
        data = AKM_POWER_DOWN;
10008f9a:	2310      	movs	r3, #16
10008f9c:	702b      	strb	r3, [r5, #0]
        user_ctrl &= ~BIT_AUX_IF_EN;
10008f9e:	4653      	mov	r3, sl
10008fa0:	2220      	movs	r2, #32
10008fa2:	781b      	ldrb	r3, [r3, #0]
10008fa4:	4393      	bics	r3, r2
10008fa6:	4652      	mov	r2, sl
10008fa8:	7013      	strb	r3, [r2, #0]
    }
    if (st.chip_cfg.dmp_on)
10008faa:	2224      	movs	r2, #36	; 0x24
10008fac:	5ca2      	ldrb	r2, [r4, r2]
10008fae:	2a00      	cmp	r2, #0
10008fb0:	d1c2      	bne.n	10008f38 <mpu_set_sensors+0xc0>
        user_ctrl |= BIT_DMP_EN;
    else
        user_ctrl &= ~BIT_DMP_EN;
10008fb2:	227f      	movs	r2, #127	; 0x7f
10008fb4:	4013      	ands	r3, r2
10008fb6:	4652      	mov	r2, sl
10008fb8:	7013      	strb	r3, [r2, #0]
10008fba:	e7c2      	b.n	10008f42 <mpu_set_sensors+0xca>
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
        data = INV_CLK_PLL;
    else if (sensors)
10008fbc:	2800      	cmp	r0, #0
10008fbe:	d11f      	bne.n	10009000 <mpu_set_sensors+0x188>
        data = 0;
    else
        data = BIT_SLEEP;
10008fc0:	466b      	mov	r3, sp
10008fc2:	1d9d      	adds	r5, r3, #6
10008fc4:	2340      	movs	r3, #64	; 0x40
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10008fc6:	4c14      	ldr	r4, [pc, #80]	; (10009018 <mpu_set_sensors+0x1a0>)
    if (sensors & INV_XYZ_GYRO)
        data = INV_CLK_PLL;
    else if (sensors)
        data = 0;
    else
        data = BIT_SLEEP;
10008fc8:	702b      	strb	r3, [r5, #0]
10008fca:	4699      	mov	r9, r3
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
10008fcc:	6823      	ldr	r3, [r4, #0]
10008fce:	4f13      	ldr	r7, [pc, #76]	; (1000901c <mpu_set_sensors+0x1a4>)
10008fd0:	7d59      	ldrb	r1, [r3, #21]
10008fd2:	6863      	ldr	r3, [r4, #4]
10008fd4:	2201      	movs	r2, #1
10008fd6:	7818      	ldrb	r0, [r3, #0]
10008fd8:	002b      	movs	r3, r5
10008fda:	46b8      	mov	r8, r7
10008fdc:	47b8      	blx	r7
10008fde:	2800      	cmp	r0, #0
10008fe0:	d115      	bne.n	1000900e <mpu_set_sensors+0x196>
        st.chip_cfg.sensors = 0;
        return -1;
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
10008fe2:	464a      	mov	r2, r9
10008fe4:	782b      	ldrb	r3, [r5, #0]
10008fe6:	4393      	bics	r3, r2
10008fe8:	7323      	strb	r3, [r4, #12]

    data = 0;
    if (!(sensors & INV_X_GYRO))
        data |= BIT_STBY_XG;
10008fea:	2304      	movs	r3, #4
10008fec:	702b      	strb	r3, [r5, #0]
    if (!(sensors & INV_Y_GYRO))
10008fee:	06b3      	lsls	r3, r6, #26
10008ff0:	d500      	bpl.n	10008ff4 <mpu_set_sensors+0x17c>
10008ff2:	e76c      	b.n	10008ece <mpu_set_sensors+0x56>
10008ff4:	e767      	b.n	10008ec6 <mpu_set_sensors+0x4e>
        data |= BIT_STBY_YG;
    if (!(sensors & INV_Z_GYRO))
        data |= BIT_STBY_ZG;
    if (!(sensors & INV_XYZ_ACCEL))
        data |= BIT_STBY_XYZA;
10008ff6:	2338      	movs	r3, #56	; 0x38
10008ff8:	782a      	ldrb	r2, [r5, #0]
10008ffa:	4313      	orrs	r3, r2
10008ffc:	702b      	strb	r3, [r5, #0]
10008ffe:	e76f      	b.n	10008ee0 <mpu_set_sensors+0x68>
#endif

    if (sensors & INV_XYZ_GYRO)
        data = INV_CLK_PLL;
    else if (sensors)
        data = 0;
10009000:	466a      	mov	r2, sp
10009002:	1d95      	adds	r5, r2, #6
10009004:	702b      	strb	r3, [r5, #0]
10009006:	e747      	b.n	10008e98 <mpu_set_sensors+0x20>
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
10009008:	2501      	movs	r5, #1
1000900a:	426d      	negs	r5, r5
1000900c:	e7b1      	b.n	10008f72 <mpu_set_sensors+0xfa>
    else if (sensors)
        data = 0;
    else
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
1000900e:	2300      	movs	r3, #0
        return -1;
10009010:	2501      	movs	r5, #1
    else if (sensors)
        data = 0;
    else
        data = BIT_SLEEP;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
        st.chip_cfg.sensors = 0;
10009012:	72a3      	strb	r3, [r4, #10]
        return -1;
10009014:	426d      	negs	r5, r5
10009016:	e7ac      	b.n	10008f72 <mpu_set_sensors+0xfa>
10009018:	1001a4b0 	.word	0x1001a4b0
1000901c:	10008301 	.word	0x10008301
10009020:	10008c45 	.word	0x10008c45
10009024:	10008359 	.word	0x10008359
10009028:	1000810d 	.word	0x1000810d

1000902c <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
1000902c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000902e:	464d      	mov	r5, r9
10009030:	465f      	mov	r7, fp
10009032:	4656      	mov	r6, sl
10009034:	4644      	mov	r4, r8
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
10009036:	2380      	movs	r3, #128	; 0x80
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
10009038:	b4f0      	push	{r4, r5, r6, r7}
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
1000903a:	4ca1      	ldr	r4, [pc, #644]	; (100092c0 <mpu_init+0x294>)
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
1000903c:	b085      	sub	sp, #20
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
1000903e:	ad02      	add	r5, sp, #8
10009040:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10009042:	6823      	ldr	r3, [r4, #0]
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
10009044:	0006      	movs	r6, r0
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10009046:	7d59      	ldrb	r1, [r3, #21]
10009048:	6863      	ldr	r3, [r4, #4]
1000904a:	2201      	movs	r2, #1
1000904c:	7818      	ldrb	r0, [r3, #0]
1000904e:	4f9d      	ldr	r7, [pc, #628]	; (100092c4 <mpu_init+0x298>)
10009050:	002b      	movs	r3, r5
10009052:	47b8      	blx	r7
10009054:	4681      	mov	r9, r0
10009056:	2800      	cmp	r0, #0
10009058:	d17c      	bne.n	10009154 <mpu_init+0x128>
        return -1;
    delay_ms(100);
1000905a:	4b9b      	ldr	r3, [pc, #620]	; (100092c8 <mpu_init+0x29c>)
1000905c:	2064      	movs	r0, #100	; 0x64
1000905e:	4698      	mov	r8, r3
10009060:	4798      	blx	r3

    /* Wake up chip. */
    data[0] = 0x00;
10009062:	464b      	mov	r3, r9
10009064:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
10009066:	6823      	ldr	r3, [r4, #0]
10009068:	2201      	movs	r2, #1
1000906a:	7d59      	ldrb	r1, [r3, #21]
1000906c:	6863      	ldr	r3, [r4, #4]
1000906e:	7818      	ldrb	r0, [r3, #0]
10009070:	002b      	movs	r3, r5
10009072:	47b8      	blx	r7
10009074:	2800      	cmp	r0, #0
10009076:	d16d      	bne.n	10009154 <mpu_init+0x128>

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
10009078:	2340      	movs	r3, #64	; 0x40
1000907a:	702b      	strb	r3, [r5, #0]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
1000907c:	6823      	ldr	r3, [r4, #0]
    /* Wake up chip. */
    data[0] = 0x00;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;

   st.chip_cfg.accel_half = 0;
1000907e:	74e0      	strb	r0, [r4, #19]
#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
10009080:	7a19      	ldrb	r1, [r3, #8]
10009082:	6863      	ldr	r3, [r4, #4]
10009084:	2201      	movs	r2, #1
10009086:	7818      	ldrb	r0, [r3, #0]
10009088:	002b      	movs	r3, r5
1000908a:	47b8      	blx	r7
1000908c:	1e05      	subs	r5, r0, #0
1000908e:	d161      	bne.n	10009154 <mpu_init+0x128>
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
10009090:	23ff      	movs	r3, #255	; 0xff
10009092:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
10009094:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
10009096:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
10009098:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
    st.chip_cfg.fifo_enable = 0xFF;
    st.chip_cfg.bypass_mode = 0xFF;
1000909a:	74a3      	strb	r3, [r4, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
1000909c:	3bfe      	subs	r3, #254	; 0xfe
1000909e:	7323      	strb	r3, [r4, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
100090a0:	3321      	adds	r3, #33	; 0x21
100090a2:	54e0      	strb	r0, [r4, r3]
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
    st.chip_cfg.gyro_fsr = 0xFF;
    st.chip_cfg.accel_fsr = 0xFF;
    st.chip_cfg.lpf = 0xFF;
    st.chip_cfg.sample_rate = 0xFFFF;
100090a4:	2201      	movs	r2, #1
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
    st.chip_cfg.latched_int = 0;
100090a6:	3301      	adds	r3, #1
100090a8:	54e0      	strb	r0, [r4, r3]
    st.chip_cfg.int_motion_only = 0;
100090aa:	7560      	strb	r0, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
100090ac:	7520      	strb	r0, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
100090ae:	0020      	movs	r0, r4
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
    st.chip_cfg.gyro_fsr = 0xFF;
    st.chip_cfg.accel_fsr = 0xFF;
    st.chip_cfg.lpf = 0xFF;
    st.chip_cfg.sample_rate = 0xFFFF;
100090b0:	4252      	negs	r2, r2
100090b2:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
100090b4:	7422      	strb	r2, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
100090b6:	8522      	strh	r2, [r4, #40]	; 0x28
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
    st.chip_cfg.latched_int = 0;
    st.chip_cfg.int_motion_only = 0;
    st.chip_cfg.lp_accel_mode = 0;
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
100090b8:	4b84      	ldr	r3, [pc, #528]	; (100092cc <mpu_init+0x2a0>)
100090ba:	3016      	adds	r0, #22
100090bc:	320d      	adds	r2, #13
100090be:	2100      	movs	r1, #0
100090c0:	4798      	blx	r3
    st.chip_cfg.dmp_on = 0;
100090c2:	2324      	movs	r3, #36	; 0x24
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;

    if (mpu_set_gyro_fsr(2000))
100090c4:	20fa      	movs	r0, #250	; 0xfa
    st.chip_cfg.active_low_int = 0; // --> interrupt active high!!
    st.chip_cfg.latched_int = 0;
    st.chip_cfg.int_motion_only = 0;
    st.chip_cfg.lp_accel_mode = 0;
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
    st.chip_cfg.dmp_on = 0;
100090c6:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_loaded = 0;
100090c8:	3301      	adds	r3, #1
100090ca:	54e5      	strb	r5, [r4, r3]
    st.chip_cfg.dmp_sample_rate = 0;

    if (mpu_set_gyro_fsr(2000))
100090cc:	00c0      	lsls	r0, r0, #3
100090ce:	4b80      	ldr	r3, [pc, #512]	; (100092d0 <mpu_init+0x2a4>)
    st.chip_cfg.int_motion_only = 0;
    st.chip_cfg.lp_accel_mode = 0;
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
    st.chip_cfg.dmp_on = 0;
    st.chip_cfg.dmp_loaded = 0;
    st.chip_cfg.dmp_sample_rate = 0;
100090d0:	84e5      	strh	r5, [r4, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
100090d2:	4798      	blx	r3
100090d4:	2800      	cmp	r0, #0
100090d6:	d13d      	bne.n	10009154 <mpu_init+0x128>
        return -1;
    if (mpu_set_accel_fsr(2))
100090d8:	3002      	adds	r0, #2
100090da:	4b7e      	ldr	r3, [pc, #504]	; (100092d4 <mpu_init+0x2a8>)
100090dc:	4798      	blx	r3
100090de:	2800      	cmp	r0, #0
100090e0:	d138      	bne.n	10009154 <mpu_init+0x128>
        return -1;
    if (mpu_set_lpf(42))
100090e2:	302a      	adds	r0, #42	; 0x2a
100090e4:	4b7c      	ldr	r3, [pc, #496]	; (100092d8 <mpu_init+0x2ac>)
100090e6:	4798      	blx	r3
100090e8:	2800      	cmp	r0, #0
100090ea:	d133      	bne.n	10009154 <mpu_init+0x128>
        return -1;
    if (mpu_set_sample_rate(50))
100090ec:	3032      	adds	r0, #50	; 0x32
100090ee:	4b7b      	ldr	r3, [pc, #492]	; (100092dc <mpu_init+0x2b0>)
100090f0:	4798      	blx	r3
100090f2:	2800      	cmp	r0, #0
100090f4:	d12e      	bne.n	10009154 <mpu_init+0x128>
        return -1;
    if (mpu_configure_fifo(0))
100090f6:	4b7a      	ldr	r3, [pc, #488]	; (100092e0 <mpu_init+0x2b4>)
100090f8:	4798      	blx	r3
100090fa:	2800      	cmp	r0, #0
100090fc:	d12a      	bne.n	10009154 <mpu_init+0x128>
        return -1;

    if (int_param)
100090fe:	2e00      	cmp	r6, #0
10009100:	d004      	beq.n	1000910c <mpu_init+0xe0>
    volatile uint32_t load = (uint32_t)(0xffffffff - dualtimer_get_value(DUALTIMER_TIMER2));
    count = (uint32_t *)(load / 26000);
}
static inline int reg_int_cb(struct int_param_s *int_param)
{
    gpio_register_callback(int_param->pin, int_param->cb, GPIO_CALLBACK_RISING);
10009102:	6871      	ldr	r1, [r6, #4]
10009104:	7830      	ldrb	r0, [r6, #0]
10009106:	2202      	movs	r2, #2
10009108:	4b76      	ldr	r3, [pc, #472]	; (100092e4 <mpu_init+0x2b8>)
1000910a:	4798      	blx	r3
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
1000910c:	4b76      	ldr	r3, [pc, #472]	; (100092e8 <mpu_init+0x2bc>)
1000910e:	2001      	movs	r0, #1
10009110:	469b      	mov	fp, r3
10009112:	4798      	blx	r3
10009114:	4b75      	ldr	r3, [pc, #468]	; (100092ec <mpu_init+0x2c0>)

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
10009116:	250c      	movs	r5, #12
10009118:	4699      	mov	r9, r3
1000911a:	ae01      	add	r6, sp, #4
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
1000911c:	0033      	movs	r3, r6
1000911e:	2201      	movs	r2, #1
10009120:	2100      	movs	r1, #0
10009122:	0028      	movs	r0, r5
10009124:	47c8      	blx	r9
        if (!result && (data[0] == AKM_WHOAMI))
10009126:	2800      	cmp	r0, #0
10009128:	d102      	bne.n	10009130 <mpu_init+0x104>
1000912a:	7833      	ldrb	r3, [r6, #0]
1000912c:	2b48      	cmp	r3, #72	; 0x48
1000912e:	d01b      	beq.n	10009168 <mpu_init+0x13c>
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
10009130:	3501      	adds	r5, #1
10009132:	b2ed      	uxtb	r5, r5
10009134:	2d10      	cmp	r5, #16
10009136:	d1f1      	bne.n	1000911c <mpu_init+0xf0>
            break;
    }

    if (akm_addr > 0x0F) {
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
10009138:	486d      	ldr	r0, [pc, #436]	; (100092f0 <mpu_init+0x2c4>)
1000913a:	4c6e      	ldr	r4, [pc, #440]	; (100092f4 <mpu_init+0x2c8>)
1000913c:	47a0      	blx	r4
1000913e:	486e      	ldr	r0, [pc, #440]	; (100092f8 <mpu_init+0x2cc>)
10009140:	47a0      	blx	r4
    if (int_param)
        reg_int_cb(int_param);

#ifdef AK89xx_SECONDARY
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
10009142:	200a      	movs	r0, #10
10009144:	4b6d      	ldr	r3, [pc, #436]	; (100092fc <mpu_init+0x2d0>)
10009146:	4798      	blx	r3
10009148:	1e04      	subs	r4, r0, #0
1000914a:	d103      	bne.n	10009154 <mpu_init+0x128>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
1000914c:	4b6c      	ldr	r3, [pc, #432]	; (10009300 <mpu_init+0x2d4>)
1000914e:	2000      	movs	r0, #0
10009150:	4798      	blx	r3
    return 0;
10009152:	e001      	b.n	10009158 <mpu_init+0x12c>
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
        return -1;
10009154:	2401      	movs	r4, #1
10009156:	4264      	negs	r4, r4
        return -1;
#endif

    mpu_set_sensors(0);
    return 0;
}
10009158:	0020      	movs	r0, r4
1000915a:	b005      	add	sp, #20
1000915c:	bc3c      	pop	{r2, r3, r4, r5}
1000915e:	4690      	mov	r8, r2
10009160:	4699      	mov	r9, r3
10009162:	46a2      	mov	sl, r4
10009164:	46ab      	mov	fp, r5
10009166:	bdf0      	pop	{r4, r5, r6, r7, pc}
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;
10009168:	232a      	movs	r3, #42	; 0x2a
1000916a:	469a      	mov	sl, r3
1000916c:	54e5      	strb	r5, [r4, r3]

    data[0] = AKM_POWER_DOWN;
1000916e:	3b1a      	subs	r3, #26
10009170:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009172:	2201      	movs	r2, #1
10009174:	0033      	movs	r3, r6
10009176:	210a      	movs	r1, #10
10009178:	0028      	movs	r0, r5
1000917a:	47b8      	blx	r7
1000917c:	2800      	cmp	r0, #0
1000917e:	d1e0      	bne.n	10009142 <mpu_init+0x116>
        return -1;
    delay_ms(1);
10009180:	2001      	movs	r0, #1
10009182:	47c0      	blx	r8

    data[0] = AKM_FUSE_ROM_ACCESS;
10009184:	231f      	movs	r3, #31
10009186:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
10009188:	4653      	mov	r3, sl
1000918a:	2201      	movs	r2, #1
1000918c:	5ce0      	ldrb	r0, [r4, r3]
1000918e:	210a      	movs	r1, #10
10009190:	0033      	movs	r3, r6
10009192:	47b8      	blx	r7
10009194:	2800      	cmp	r0, #0
10009196:	d1d4      	bne.n	10009142 <mpu_init+0x116>
        return -1;
    delay_ms(1);
10009198:	3001      	adds	r0, #1
1000919a:	47c0      	blx	r8

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
1000919c:	4653      	mov	r3, sl
1000919e:	2203      	movs	r2, #3
100091a0:	5ce0      	ldrb	r0, [r4, r3]
100091a2:	2110      	movs	r1, #16
100091a4:	0033      	movs	r3, r6
100091a6:	47c8      	blx	r9
100091a8:	2800      	cmp	r0, #0
100091aa:	d1ca      	bne.n	10009142 <mpu_init+0x116>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
100091ac:	7833      	ldrb	r3, [r6, #0]
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;

    data[0] = AKM_POWER_DOWN;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100091ae:	2201      	movs	r2, #1
    delay_ms(1);

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
100091b0:	3380      	adds	r3, #128	; 0x80
100091b2:	85a3      	strh	r3, [r4, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
100091b4:	7873      	ldrb	r3, [r6, #1]
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;

    data[0] = AKM_POWER_DOWN;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100091b6:	210a      	movs	r1, #10

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
100091b8:	3380      	adds	r3, #128	; 0x80
100091ba:	85e3      	strh	r3, [r4, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
100091bc:	78b3      	ldrb	r3, [r6, #2]
100091be:	3380      	adds	r3, #128	; 0x80
100091c0:	8623      	strh	r3, [r4, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
100091c2:	2310      	movs	r3, #16
100091c4:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
100091c6:	4653      	mov	r3, sl
100091c8:	5ce0      	ldrb	r0, [r4, r3]
100091ca:	0033      	movs	r3, r6
100091cc:	47b8      	blx	r7
100091ce:	2800      	cmp	r0, #0
100091d0:	d1b7      	bne.n	10009142 <mpu_init+0x116>
        return -1;
    delay_ms(1);
100091d2:	3001      	adds	r0, #1
100091d4:	47c0      	blx	r8

    mpu_set_bypass(0);
100091d6:	2000      	movs	r0, #0
100091d8:	47d8      	blx	fp

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
100091da:	2340      	movs	r3, #64	; 0x40
100091dc:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
100091de:	6823      	ldr	r3, [r4, #0]
100091e0:	2201      	movs	r2, #1
100091e2:	7e99      	ldrb	r1, [r3, #26]
100091e4:	6863      	ldr	r3, [r4, #4]
100091e6:	7818      	ldrb	r0, [r3, #0]
100091e8:	0033      	movs	r3, r6
100091ea:	47b8      	blx	r7
100091ec:	2800      	cmp	r0, #0
100091ee:	d1a8      	bne.n	10009142 <mpu_init+0x116>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
100091f0:	4653      	mov	r3, sl
100091f2:	2280      	movs	r2, #128	; 0x80
100091f4:	5ce3      	ldrb	r3, [r4, r3]
100091f6:	4252      	negs	r2, r2
100091f8:	4313      	orrs	r3, r2
100091fa:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
100091fc:	6823      	ldr	r3, [r4, #0]
100091fe:	3281      	adds	r2, #129	; 0x81
10009200:	7f99      	ldrb	r1, [r3, #30]
10009202:	6863      	ldr	r3, [r4, #4]
10009204:	7818      	ldrb	r0, [r3, #0]
10009206:	0033      	movs	r3, r6
10009208:	47b8      	blx	r7
1000920a:	2800      	cmp	r0, #0
1000920c:	d199      	bne.n	10009142 <mpu_init+0x116>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
1000920e:	2302      	movs	r3, #2
10009210:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
10009212:	6823      	ldr	r3, [r4, #0]
10009214:	2201      	movs	r2, #1
10009216:	7fd9      	ldrb	r1, [r3, #31]
10009218:	6863      	ldr	r3, [r4, #4]
1000921a:	7818      	ldrb	r0, [r3, #0]
1000921c:	0033      	movs	r3, r6
1000921e:	47b8      	blx	r7
10009220:	2800      	cmp	r0, #0
10009222:	d000      	beq.n	10009226 <mpu_init+0x1fa>
10009224:	e78d      	b.n	10009142 <mpu_init+0x116>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
10009226:	2388      	movs	r3, #136	; 0x88
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
10009228:	6822      	ldr	r2, [r4, #0]
    data[0] = AKM_REG_ST1;
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
1000922a:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
1000922c:	3b68      	subs	r3, #104	; 0x68
1000922e:	5cd1      	ldrb	r1, [r2, r3]
10009230:	6863      	ldr	r3, [r4, #4]
10009232:	2201      	movs	r2, #1
10009234:	7818      	ldrb	r0, [r3, #0]
10009236:	0033      	movs	r3, r6
10009238:	47b8      	blx	r7
1000923a:	2800      	cmp	r0, #0
1000923c:	d000      	beq.n	10009240 <mpu_init+0x214>
1000923e:	e780      	b.n	10009142 <mpu_init+0x116>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
10009240:	232a      	movs	r3, #42	; 0x2a
10009242:	5ce3      	ldrb	r3, [r4, r3]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
10009244:	6822      	ldr	r2, [r4, #0]
    data[0] = BIT_SLAVE_EN | 8;
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
10009246:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
10009248:	2321      	movs	r3, #33	; 0x21
1000924a:	5cd1      	ldrb	r1, [r2, r3]
1000924c:	6863      	ldr	r3, [r4, #4]
1000924e:	2201      	movs	r2, #1
10009250:	7818      	ldrb	r0, [r3, #0]
10009252:	0033      	movs	r3, r6
10009254:	47b8      	blx	r7
10009256:	2800      	cmp	r0, #0
10009258:	d000      	beq.n	1000925c <mpu_init+0x230>
1000925a:	e772      	b.n	10009142 <mpu_init+0x116>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
1000925c:	230a      	movs	r3, #10
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
1000925e:	6822      	ldr	r2, [r4, #0]
    data[0] = st.chip_cfg.compass_addr;
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
10009260:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
10009262:	3318      	adds	r3, #24
10009264:	5cd1      	ldrb	r1, [r2, r3]
10009266:	6863      	ldr	r3, [r4, #4]
10009268:	2201      	movs	r2, #1
1000926a:	7818      	ldrb	r0, [r3, #0]
1000926c:	0033      	movs	r3, r6
1000926e:	47b8      	blx	r7
10009270:	2800      	cmp	r0, #0
10009272:	d000      	beq.n	10009276 <mpu_init+0x24a>
10009274:	e765      	b.n	10009142 <mpu_init+0x116>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
10009276:	2381      	movs	r3, #129	; 0x81
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
10009278:	6822      	ldr	r2, [r4, #0]
    data[0] = AKM_REG_CNTL;
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
1000927a:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
1000927c:	3b5e      	subs	r3, #94	; 0x5e
1000927e:	5cd1      	ldrb	r1, [r2, r3]
10009280:	6863      	ldr	r3, [r4, #4]
10009282:	2201      	movs	r2, #1
10009284:	7818      	ldrb	r0, [r3, #0]
10009286:	0033      	movs	r3, r6
10009288:	47b8      	blx	r7
1000928a:	2800      	cmp	r0, #0
1000928c:	d000      	beq.n	10009290 <mpu_init+0x264>
1000928e:	e758      	b.n	10009142 <mpu_init+0x116>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
10009290:	2311      	movs	r3, #17
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
10009292:	6822      	ldr	r2, [r4, #0]
    data[0] = BIT_SLAVE_EN | 1;
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
10009294:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
10009296:	3315      	adds	r3, #21
10009298:	5cd1      	ldrb	r1, [r2, r3]
1000929a:	6863      	ldr	r3, [r4, #4]
1000929c:	2201      	movs	r2, #1
1000929e:	7818      	ldrb	r0, [r3, #0]
100092a0:	0033      	movs	r3, r6
100092a2:	47b8      	blx	r7
100092a4:	2800      	cmp	r0, #0
100092a6:	d000      	beq.n	100092aa <mpu_init+0x27e>
100092a8:	e74b      	b.n	10009142 <mpu_init+0x116>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
100092aa:	2303      	movs	r3, #3
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
100092ac:	6822      	ldr	r2, [r4, #0]
    data[0] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
100092ae:	7033      	strb	r3, [r6, #0]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
100092b0:	3324      	adds	r3, #36	; 0x24
100092b2:	5cd1      	ldrb	r1, [r2, r3]
100092b4:	6863      	ldr	r3, [r4, #4]
100092b6:	2201      	movs	r2, #1
100092b8:	7818      	ldrb	r0, [r3, #0]
100092ba:	0033      	movs	r3, r6
100092bc:	47b8      	blx	r7
100092be:	e740      	b.n	10009142 <mpu_init+0x116>
100092c0:	1001a4b0 	.word	0x1001a4b0
100092c4:	10008301 	.word	0x10008301
100092c8:	1000810d 	.word	0x1000810d
100092cc:	10017dcb 	.word	0x10017dcb
100092d0:	100086c5 	.word	0x100086c5
100092d4:	10008799 	.word	0x10008799
100092d8:	10008819 	.word	0x10008819
100092dc:	10008dad 	.word	0x10008dad
100092e0:	1000892d 	.word	0x1000892d
100092e4:	1000cdf5 	.word	0x1000cdf5
100092e8:	10008b59 	.word	0x10008b59
100092ec:	10008359 	.word	0x10008359
100092f0:	100191d8 	.word	0x100191d8
100092f4:	10018035 	.word	0x10018035
100092f8:	10019048 	.word	0x10019048
100092fc:	100088c9 	.word	0x100088c9
10009300:	10008e79 	.word	0x10008e79

10009304 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
10009304:	b5f0      	push	{r4, r5, r6, r7, lr}
10009306:	000d      	movs	r5, r1
10009308:	b083      	sub	sp, #12
1000930a:	1e16      	subs	r6, r2, #0
    unsigned char tmp[2];

    if (!data)
1000930c:	d021      	beq.n	10009352 <mpu_write_mem+0x4e>
        return -1;
    if (!st.chip_cfg.sensors)
1000930e:	4c12      	ldr	r4, [pc, #72]	; (10009358 <mpu_write_mem+0x54>)
10009310:	7aa3      	ldrb	r3, [r4, #10]
10009312:	2b00      	cmp	r3, #0
10009314:	d01d      	beq.n	10009352 <mpu_write_mem+0x4e>
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
10009316:	0a02      	lsrs	r2, r0, #8
10009318:	ab01      	add	r3, sp, #4
1000931a:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
1000931c:	b2c0      	uxtb	r0, r0

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
1000931e:	6862      	ldr	r2, [r4, #4]
        return -1;
    if (!st.chip_cfg.sensors)
        return -1;

    tmp[0] = (unsigned char)(mem_addr >> 8);
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
10009320:	7058      	strb	r0, [r3, #1]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
10009322:	1840      	adds	r0, r0, r1
10009324:	8951      	ldrh	r1, [r2, #10]
10009326:	4288      	cmp	r0, r1
10009328:	dc13      	bgt.n	10009352 <mpu_write_mem+0x4e>
        return -1;

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
1000932a:	6821      	ldr	r1, [r4, #0]
1000932c:	7810      	ldrb	r0, [r2, #0]
1000932e:	7ec9      	ldrb	r1, [r1, #27]
10009330:	2202      	movs	r2, #2
10009332:	4f0a      	ldr	r7, [pc, #40]	; (1000935c <mpu_write_mem+0x58>)
10009334:	47b8      	blx	r7
10009336:	2800      	cmp	r0, #0
10009338:	d10b      	bne.n	10009352 <mpu_write_mem+0x4e>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
1000933a:	6823      	ldr	r3, [r4, #0]
1000933c:	b2ea      	uxtb	r2, r5
1000933e:	7e19      	ldrb	r1, [r3, #24]
10009340:	6863      	ldr	r3, [r4, #4]
10009342:	7818      	ldrb	r0, [r3, #0]
10009344:	0033      	movs	r3, r6
10009346:	47b8      	blx	r7
10009348:	1e43      	subs	r3, r0, #1
1000934a:	4198      	sbcs	r0, r3
1000934c:	4240      	negs	r0, r0
        return -1;
    return 0;
}
1000934e:	b003      	add	sp, #12
10009350:	bdf0      	pop	{r4, r5, r6, r7, pc}
        unsigned char *data)
{
    unsigned char tmp[2];

    if (!data)
        return -1;
10009352:	2001      	movs	r0, #1
10009354:	4240      	negs	r0, r0
10009356:	e7fa      	b.n	1000934e <mpu_write_mem+0x4a>
10009358:	1001a4b0 	.word	0x1001a4b0
1000935c:	10008301 	.word	0x10008301

10009360 <mpu_get_compass_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
10009360:	b5f0      	push	{r4, r5, r6, r7, lr}
10009362:	4647      	mov	r7, r8
10009364:	b480      	push	{r7}
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
10009366:	4e29      	ldr	r6, [pc, #164]	; (1000940c <mpu_get_compass_reg+0xac>)
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
10009368:	b084      	sub	sp, #16
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
1000936a:	7ab3      	ldrb	r3, [r6, #10]
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
1000936c:	0004      	movs	r4, r0
1000936e:	4688      	mov	r8, r1
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
10009370:	07db      	lsls	r3, r3, #31
10009372:	d542      	bpl.n	100093fa <mpu_get_compass_reg+0x9a>
        return -1;
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
10009374:	2328      	movs	r3, #40	; 0x28
10009376:	6832      	ldr	r2, [r6, #0]
10009378:	af01      	add	r7, sp, #4
1000937a:	5cd1      	ldrb	r1, [r2, r3]
1000937c:	6873      	ldr	r3, [r6, #4]
1000937e:	4d24      	ldr	r5, [pc, #144]	; (10009410 <mpu_get_compass_reg+0xb0>)
10009380:	7818      	ldrb	r0, [r3, #0]
10009382:	2208      	movs	r2, #8
10009384:	003b      	movs	r3, r7
10009386:	47a8      	blx	r5
10009388:	1e05      	subs	r5, r0, #0
1000938a:	d136      	bne.n	100093fa <mpu_get_compass_reg+0x9a>
        return -2;
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
1000938c:	2203      	movs	r2, #3
1000938e:	783b      	ldrb	r3, [r7, #0]
10009390:	4013      	ands	r3, r2
10009392:	2b01      	cmp	r3, #1
10009394:	d134      	bne.n	10009400 <mpu_get_compass_reg+0xa0>
        return -2;
    if (tmp[7] & AKM_OVERFLOW)
10009396:	79fb      	ldrb	r3, [r7, #7]
10009398:	2b7f      	cmp	r3, #127	; 0x7f
1000939a:	d834      	bhi.n	10009406 <mpu_get_compass_reg+0xa6>
        return -3;
#endif
    data[0] = (tmp[2] << 8) | tmp[1];
1000939c:	78b9      	ldrb	r1, [r7, #2]
1000939e:	787b      	ldrb	r3, [r7, #1]
100093a0:	0209      	lsls	r1, r1, #8
100093a2:	4319      	orrs	r1, r3
100093a4:	b209      	sxth	r1, r1
100093a6:	8021      	strh	r1, [r4, #0]
    data[1] = (tmp[4] << 8) | tmp[3];
100093a8:	793a      	ldrb	r2, [r7, #4]
100093aa:	78fb      	ldrb	r3, [r7, #3]
100093ac:	0212      	lsls	r2, r2, #8
100093ae:	431a      	orrs	r2, r3
100093b0:	b212      	sxth	r2, r2
100093b2:	8062      	strh	r2, [r4, #2]
    data[2] = (tmp[6] << 8) | tmp[5];
100093b4:	79bb      	ldrb	r3, [r7, #6]
100093b6:	7978      	ldrb	r0, [r7, #5]
100093b8:	021b      	lsls	r3, r3, #8
100093ba:	4303      	orrs	r3, r0
100093bc:	b21b      	sxth	r3, r3
100093be:	80a3      	strh	r3, [r4, #4]

    data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
100093c0:	272c      	movs	r7, #44	; 0x2c
100093c2:	5ff0      	ldrsh	r0, [r6, r7]
100093c4:	4341      	muls	r1, r0
100093c6:	1209      	asrs	r1, r1, #8
100093c8:	8021      	strh	r1, [r4, #0]
    data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
100093ca:	202e      	movs	r0, #46	; 0x2e
100093cc:	5e31      	ldrsh	r1, [r6, r0]
100093ce:	434a      	muls	r2, r1
100093d0:	1212      	asrs	r2, r2, #8
100093d2:	8062      	strh	r2, [r4, #2]
    data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
100093d4:	2130      	movs	r1, #48	; 0x30
100093d6:	5e72      	ldrsh	r2, [r6, r1]
100093d8:	4353      	muls	r3, r2
100093da:	121b      	asrs	r3, r3, #8
100093dc:	80a3      	strh	r3, [r4, #4]

    if (timestamp)
100093de:	4643      	mov	r3, r8
100093e0:	2b00      	cmp	r3, #0
100093e2:	d005      	beq.n	100093f0 <mpu_get_compass_reg+0x90>
    }
    return 0;
}
static inline void get_ms(uint32_t *count)
{
    volatile uint32_t load = (uint32_t)(0xffffffff - dualtimer_get_value(DUALTIMER_TIMER2));
100093e4:	4b0b      	ldr	r3, [pc, #44]	; (10009414 <mpu_get_compass_reg+0xb4>)
100093e6:	2001      	movs	r0, #1
100093e8:	4798      	blx	r3
100093ea:	43c0      	mvns	r0, r0
100093ec:	9000      	str	r0, [sp, #0]
    count = (uint32_t *)(load / 26000);
100093ee:	9b00      	ldr	r3, [sp, #0]
        get_ms(timestamp);
    return 0;
#else
    return -1;
#endif
}
100093f0:	0028      	movs	r0, r5
100093f2:	b004      	add	sp, #16
100093f4:	bc04      	pop	{r2}
100093f6:	4690      	mov	r8, r2
100093f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
        return -1;
100093fa:	2501      	movs	r5, #1
100093fc:	426d      	negs	r5, r5
100093fe:	e7f7      	b.n	100093f0 <mpu_get_compass_reg+0x90>
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
        return -2;
10009400:	2502      	movs	r5, #2
10009402:	426d      	negs	r5, r5
10009404:	e7f4      	b.n	100093f0 <mpu_get_compass_reg+0x90>
    if (tmp[7] & AKM_OVERFLOW)
        return -3;
10009406:	2503      	movs	r5, #3
10009408:	426d      	negs	r5, r5
1000940a:	e7f1      	b.n	100093f0 <mpu_get_compass_reg+0x90>
1000940c:	1001a4b0 	.word	0x1001a4b0
10009410:	10008359 	.word	0x10008359
10009414:	100081a1 	.word	0x100081a1

10009418 <mpu_get_compass_fsr>:
 *  @return     0 if successful.
 */
int mpu_get_compass_fsr(unsigned short *fsr)
{
#ifdef AK89xx_SECONDARY
    fsr[0] = st.hw->compass_fsr;
10009418:	4b02      	ldr	r3, [pc, #8]	; (10009424 <mpu_get_compass_fsr+0xc>)
1000941a:	685b      	ldr	r3, [r3, #4]
1000941c:	899b      	ldrh	r3, [r3, #12]
1000941e:	8003      	strh	r3, [r0, #0]
    return 0;
#else
    return -1;
#endif
}
10009420:	2000      	movs	r0, #0
10009422:	4770      	bx	lr
10009424:	1001a4b0 	.word	0x1001a4b0

10009428 <dmp_enable_gyro_cal.part.1>:
 *  called with @e DMP_FEATURE_SEND_CAL_GYRO, the biases will also be
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
10009428:	b500      	push	{lr}
1000942a:	b085      	sub	sp, #20
{
    if (enable) {
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
1000942c:	2209      	movs	r2, #9
1000942e:	4906      	ldr	r1, [pc, #24]	; (10009448 <dmp_enable_gyro_cal.part.1+0x20>)
10009430:	a801      	add	r0, sp, #4
10009432:	4b06      	ldr	r3, [pc, #24]	; (1000944c <dmp_enable_gyro_cal.part.1+0x24>)
10009434:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
10009436:	2097      	movs	r0, #151	; 0x97
10009438:	aa01      	add	r2, sp, #4
1000943a:	2109      	movs	r1, #9
1000943c:	4b04      	ldr	r3, [pc, #16]	; (10009450 <dmp_enable_gyro_cal.part.1+0x28>)
1000943e:	00c0      	lsls	r0, r0, #3
10009440:	4798      	blx	r3
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    }
}
10009442:	b005      	add	sp, #20
10009444:	bd00      	pop	{pc}
10009446:	46c0      	nop			; (mov r8, r8)
10009448:	10019424 	.word	0x10019424
1000944c:	10017d8f 	.word	0x10017d8f
10009450:	10009305 	.word	0x10009305

10009454 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
10009454:	b5f0      	push	{r4, r5, r6, r7, lr}
10009456:	4647      	mov	r7, r8
10009458:	b480      	push	{r7}
1000945a:	0005      	movs	r5, r0
1000945c:	b082      	sub	sp, #8
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
1000945e:	0743      	lsls	r3, r0, #29
10009460:	d067      	beq.n	10009532 <dmp_set_tap_thresh+0xde>
10009462:	23c8      	movs	r3, #200	; 0xc8
10009464:	00db      	lsls	r3, r3, #3
10009466:	4299      	cmp	r1, r3
10009468:	d863      	bhi.n	10009532 <dmp_set_tap_thresh+0xde>
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
1000946a:	4b4c      	ldr	r3, [pc, #304]	; (1000959c <dmp_set_tap_thresh+0x148>)
1000946c:	0008      	movs	r0, r1
1000946e:	4798      	blx	r3
10009470:	4b4b      	ldr	r3, [pc, #300]	; (100095a0 <dmp_set_tap_thresh+0x14c>)
10009472:	494c      	ldr	r1, [pc, #304]	; (100095a4 <dmp_set_tap_thresh+0x150>)
10009474:	4798      	blx	r3

    mpu_get_accel_fsr(&accel_fsr);
10009476:	466b      	mov	r3, sp
10009478:	1cdc      	adds	r4, r3, #3
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
1000947a:	1c07      	adds	r7, r0, #0

    mpu_get_accel_fsr(&accel_fsr);
1000947c:	4b4a      	ldr	r3, [pc, #296]	; (100095a8 <dmp_set_tap_thresh+0x154>)
1000947e:	0020      	movs	r0, r4
10009480:	4798      	blx	r3
    switch (accel_fsr) {
10009482:	7823      	ldrb	r3, [r4, #0]
10009484:	2b04      	cmp	r3, #4
10009486:	d100      	bne.n	1000948a <dmp_set_tap_thresh+0x36>
10009488:	e079      	b.n	1000957e <dmp_set_tap_thresh+0x12a>
1000948a:	d931      	bls.n	100094f0 <dmp_set_tap_thresh+0x9c>
1000948c:	2b08      	cmp	r3, #8
1000948e:	d067      	beq.n	10009560 <dmp_set_tap_thresh+0x10c>
10009490:	2b10      	cmp	r3, #16
10009492:	d14e      	bne.n	10009532 <dmp_set_tap_thresh+0xde>
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
        break;
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
10009494:	218a      	movs	r1, #138	; 0x8a
10009496:	4b45      	ldr	r3, [pc, #276]	; (100095ac <dmp_set_tap_thresh+0x158>)
10009498:	05c9      	lsls	r1, r1, #23
1000949a:	1c38      	adds	r0, r7, #0
1000949c:	4698      	mov	r8, r3
1000949e:	4798      	blx	r3
100094a0:	4c43      	ldr	r4, [pc, #268]	; (100095b0 <dmp_set_tap_thresh+0x15c>)
100094a2:	47a0      	blx	r4
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
100094a4:	4943      	ldr	r1, [pc, #268]	; (100095b4 <dmp_set_tap_thresh+0x160>)
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
        break;
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
100094a6:	b286      	uxth	r6, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
100094a8:	1c38      	adds	r0, r7, #0
100094aa:	47c0      	blx	r8
100094ac:	47a0      	blx	r4
100094ae:	b280      	uxth	r0, r0
        break;
    default:
        return -1;
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
100094b0:	ac01      	add	r4, sp, #4
100094b2:	0a33      	lsrs	r3, r6, #8
100094b4:	7023      	strb	r3, [r4, #0]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
100094b6:	0a03      	lsrs	r3, r0, #8
        break;
    default:
        return -1;
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
100094b8:	7066      	strb	r6, [r4, #1]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
100094ba:	70a3      	strb	r3, [r4, #2]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
100094bc:	70e0      	strb	r0, [r4, #3]

    if (axis & TAP_X) {
100094be:	07eb      	lsls	r3, r5, #31
100094c0:	d427      	bmi.n	10009512 <dmp_set_tap_thresh+0xbe>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Y) {
100094c2:	07ab      	lsls	r3, r5, #30
100094c4:	d43b      	bmi.n	1000953e <dmp_set_tap_thresh+0xea>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
100094c6:	2000      	movs	r0, #0
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Z) {
100094c8:	076b      	lsls	r3, r5, #29
100094ca:	d534      	bpl.n	10009536 <dmp_set_tap_thresh+0xe2>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
100094cc:	20ee      	movs	r0, #238	; 0xee
100094ce:	0022      	movs	r2, r4
100094d0:	2102      	movs	r1, #2
100094d2:	0040      	lsls	r0, r0, #1
100094d4:	4c38      	ldr	r4, [pc, #224]	; (100095b8 <dmp_set_tap_thresh+0x164>)
100094d6:	47a0      	blx	r4
100094d8:	2800      	cmp	r0, #0
100094da:	d12a      	bne.n	10009532 <dmp_set_tap_thresh+0xde>
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
100094dc:	466b      	mov	r3, sp
100094de:	302d      	adds	r0, #45	; 0x2d
100094e0:	1d9a      	adds	r2, r3, #6
100094e2:	2102      	movs	r1, #2
100094e4:	30ff      	adds	r0, #255	; 0xff
100094e6:	47a0      	blx	r4
100094e8:	1e43      	subs	r3, r0, #1
100094ea:	4198      	sbcs	r0, r3
100094ec:	4240      	negs	r0, r0
100094ee:	e022      	b.n	10009536 <dmp_set_tap_thresh+0xe2>
        return -1;

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;

    mpu_get_accel_fsr(&accel_fsr);
    switch (accel_fsr) {
100094f0:	2b02      	cmp	r3, #2
100094f2:	d11e      	bne.n	10009532 <dmp_set_tap_thresh+0xde>
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
100094f4:	218d      	movs	r1, #141	; 0x8d
100094f6:	4b2d      	ldr	r3, [pc, #180]	; (100095ac <dmp_set_tap_thresh+0x158>)
100094f8:	05c9      	lsls	r1, r1, #23
100094fa:	1c38      	adds	r0, r7, #0
100094fc:	4698      	mov	r8, r3
100094fe:	4798      	blx	r3
10009500:	4c2b      	ldr	r4, [pc, #172]	; (100095b0 <dmp_set_tap_thresh+0x15c>)
10009502:	47a0      	blx	r4
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
10009504:	492d      	ldr	r1, [pc, #180]	; (100095bc <dmp_set_tap_thresh+0x168>)
    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;

    mpu_get_accel_fsr(&accel_fsr);
    switch (accel_fsr) {
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
10009506:	b286      	uxth	r6, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
10009508:	1c38      	adds	r0, r7, #0
1000950a:	47c0      	blx	r8
1000950c:	47a0      	blx	r4
1000950e:	b280      	uxth	r0, r0
        break;
10009510:	e7ce      	b.n	100094b0 <dmp_set_tap_thresh+0x5c>
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);

    if (axis & TAP_X) {
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
10009512:	20ea      	movs	r0, #234	; 0xea
10009514:	0022      	movs	r2, r4
10009516:	2102      	movs	r1, #2
10009518:	0040      	lsls	r0, r0, #1
1000951a:	4e27      	ldr	r6, [pc, #156]	; (100095b8 <dmp_set_tap_thresh+0x164>)
1000951c:	47b0      	blx	r6
1000951e:	2800      	cmp	r0, #0
10009520:	d107      	bne.n	10009532 <dmp_set_tap_thresh+0xde>
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
10009522:	466b      	mov	r3, sp
10009524:	3025      	adds	r0, #37	; 0x25
10009526:	1d9a      	adds	r2, r3, #6
10009528:	2102      	movs	r1, #2
1000952a:	30ff      	adds	r0, #255	; 0xff
1000952c:	47b0      	blx	r6
1000952e:	2800      	cmp	r0, #0
10009530:	d0c7      	beq.n	100094c2 <dmp_set_tap_thresh+0x6e>
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
        break;
    default:
        return -1;
10009532:	2001      	movs	r0, #1
10009534:	4240      	negs	r0, r0
            return -1;
        if (mpu_write_mem(D_1_44, 2, tmp+2))
            return -1;
    }
    return 0;
}
10009536:	b002      	add	sp, #8
10009538:	bc04      	pop	{r2}
1000953a:	4690      	mov	r8, r2
1000953c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return -1;
        if (mpu_write_mem(D_1_36, 2, tmp+2))
            return -1;
    }
    if (axis & TAP_Y) {
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
1000953e:	20ec      	movs	r0, #236	; 0xec
10009540:	0022      	movs	r2, r4
10009542:	2102      	movs	r1, #2
10009544:	0040      	lsls	r0, r0, #1
10009546:	4e1c      	ldr	r6, [pc, #112]	; (100095b8 <dmp_set_tap_thresh+0x164>)
10009548:	47b0      	blx	r6
1000954a:	2800      	cmp	r0, #0
1000954c:	d1f1      	bne.n	10009532 <dmp_set_tap_thresh+0xde>
            return -1;
        if (mpu_write_mem(D_1_40, 2, tmp+2))
1000954e:	466b      	mov	r3, sp
10009550:	3029      	adds	r0, #41	; 0x29
10009552:	1d9a      	adds	r2, r3, #6
10009554:	2102      	movs	r1, #2
10009556:	30ff      	adds	r0, #255	; 0xff
10009558:	47b0      	blx	r6
1000955a:	2800      	cmp	r0, #0
1000955c:	d0b3      	beq.n	100094c6 <dmp_set_tap_thresh+0x72>
1000955e:	e7e8      	b.n	10009532 <dmp_set_tap_thresh+0xde>
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
        break;
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
10009560:	218b      	movs	r1, #139	; 0x8b
10009562:	4b12      	ldr	r3, [pc, #72]	; (100095ac <dmp_set_tap_thresh+0x158>)
10009564:	05c9      	lsls	r1, r1, #23
10009566:	1c38      	adds	r0, r7, #0
10009568:	4698      	mov	r8, r3
1000956a:	4798      	blx	r3
1000956c:	4c10      	ldr	r4, [pc, #64]	; (100095b0 <dmp_set_tap_thresh+0x15c>)
1000956e:	47a0      	blx	r4
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
10009570:	4913      	ldr	r1, [pc, #76]	; (100095c0 <dmp_set_tap_thresh+0x16c>)
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
        break;
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
10009572:	b286      	uxth	r6, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
10009574:	1c38      	adds	r0, r7, #0
10009576:	47c0      	blx	r8
10009578:	47a0      	blx	r4
1000957a:	b280      	uxth	r0, r0
        break;
1000957c:	e798      	b.n	100094b0 <dmp_set_tap_thresh+0x5c>
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
        break;
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
1000957e:	218c      	movs	r1, #140	; 0x8c
10009580:	4b0a      	ldr	r3, [pc, #40]	; (100095ac <dmp_set_tap_thresh+0x158>)
10009582:	05c9      	lsls	r1, r1, #23
10009584:	1c38      	adds	r0, r7, #0
10009586:	4698      	mov	r8, r3
10009588:	4798      	blx	r3
1000958a:	4c09      	ldr	r4, [pc, #36]	; (100095b0 <dmp_set_tap_thresh+0x15c>)
1000958c:	47a0      	blx	r4
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
1000958e:	490d      	ldr	r1, [pc, #52]	; (100095c4 <dmp_set_tap_thresh+0x170>)
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
        break;
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
10009590:	b286      	uxth	r6, r0
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
10009592:	1c38      	adds	r0, r7, #0
10009594:	47c0      	blx	r8
10009596:	47a0      	blx	r4
10009598:	b280      	uxth	r0, r0
        break;
1000959a:	e789      	b.n	100094b0 <dmp_set_tap_thresh+0x5c>
1000959c:	10015d1d 	.word	0x10015d1d
100095a0:	10015351 	.word	0x10015351
100095a4:	43480000 	.word	0x43480000
100095a8:	10008751 	.word	0x10008751
100095ac:	100156e5 	.word	0x100156e5
100095b0:	10014ef1 	.word	0x10014ef1
100095b4:	44c00000 	.word	0x44c00000
100095b8:	10009305 	.word	0x10009305
100095bc:	46400000 	.word	0x46400000
100095c0:	45400000 	.word	0x45400000
100095c4:	45c00000 	.word	0x45c00000

100095c8 <dmp_set_tap_axes>:
 */
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;

    if (axis & TAP_X)
100095c8:	2301      	movs	r3, #1
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
100095ca:	b500      	push	{lr}
    unsigned char tmp = 0;

    if (axis & TAP_X)
100095cc:	4003      	ands	r3, r0
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
100095ce:	b083      	sub	sp, #12
    unsigned char tmp = 0;

    if (axis & TAP_X)
100095d0:	2b00      	cmp	r3, #0
100095d2:	d115      	bne.n	10009600 <dmp_set_tap_axes+0x38>
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;
100095d4:	466a      	mov	r2, sp
100095d6:	3207      	adds	r2, #7
100095d8:	7013      	strb	r3, [r2, #0]

    if (axis & TAP_X)
        tmp |= 0x30;
    if (axis & TAP_Y)
100095da:	0783      	lsls	r3, r0, #30
100095dc:	d503      	bpl.n	100095e6 <dmp_set_tap_axes+0x1e>
        tmp |= 0x0C;
100095de:	230c      	movs	r3, #12
100095e0:	7811      	ldrb	r1, [r2, #0]
100095e2:	430b      	orrs	r3, r1
100095e4:	7013      	strb	r3, [r2, #0]
    if (axis & TAP_Z)
100095e6:	0743      	lsls	r3, r0, #29
100095e8:	d503      	bpl.n	100095f2 <dmp_set_tap_axes+0x2a>
        tmp |= 0x03;
100095ea:	2303      	movs	r3, #3
100095ec:	7811      	ldrb	r1, [r2, #0]
100095ee:	430b      	orrs	r3, r1
100095f0:	7013      	strb	r3, [r2, #0]
    return mpu_write_mem(D_1_72, 1, &tmp);
100095f2:	20a4      	movs	r0, #164	; 0xa4
100095f4:	2101      	movs	r1, #1
100095f6:	4b05      	ldr	r3, [pc, #20]	; (1000960c <dmp_set_tap_axes+0x44>)
100095f8:	0040      	lsls	r0, r0, #1
100095fa:	4798      	blx	r3
}
100095fc:	b003      	add	sp, #12
100095fe:	bd00      	pop	{pc}
int dmp_set_tap_axes(unsigned char axis)
{
    unsigned char tmp = 0;

    if (axis & TAP_X)
        tmp |= 0x30;
10009600:	466b      	mov	r3, sp
10009602:	1dda      	adds	r2, r3, #7
10009604:	2330      	movs	r3, #48	; 0x30
10009606:	7013      	strb	r3, [r2, #0]
10009608:	e7e7      	b.n	100095da <dmp_set_tap_axes+0x12>
1000960a:	46c0      	nop			; (mov r8, r8)
1000960c:	10009305 	.word	0x10009305

10009610 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
10009610:	b500      	push	{lr}
10009612:	b085      	sub	sp, #20
    if (enable) {
10009614:	2800      	cmp	r0, #0
10009616:	d10d      	bne.n	10009634 <dmp_enable_gyro_cal+0x24>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
10009618:	4908      	ldr	r1, [pc, #32]	; (1000963c <dmp_enable_gyro_cal+0x2c>)
1000961a:	2209      	movs	r2, #9
1000961c:	3128      	adds	r1, #40	; 0x28
1000961e:	4b08      	ldr	r3, [pc, #32]	; (10009640 <dmp_enable_gyro_cal+0x30>)
10009620:	a801      	add	r0, sp, #4
10009622:	4798      	blx	r3
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
10009624:	2097      	movs	r0, #151	; 0x97
10009626:	aa01      	add	r2, sp, #4
10009628:	2109      	movs	r1, #9
1000962a:	00c0      	lsls	r0, r0, #3
1000962c:	4b05      	ldr	r3, [pc, #20]	; (10009644 <dmp_enable_gyro_cal+0x34>)
1000962e:	4798      	blx	r3
    }
}
10009630:	b005      	add	sp, #20
10009632:	bd00      	pop	{pc}
10009634:	4b04      	ldr	r3, [pc, #16]	; (10009648 <dmp_enable_gyro_cal+0x38>)
10009636:	4798      	blx	r3
10009638:	e7fa      	b.n	10009630 <dmp_enable_gyro_cal+0x20>
1000963a:	46c0      	nop			; (mov r8, r8)
1000963c:	10019424 	.word	0x10019424
10009640:	10017d8f 	.word	0x10017d8f
10009644:	10009305 	.word	0x10009305
10009648:	10009429 	.word	0x10009429

1000964c <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
1000964c:	b500      	push	{lr}
1000964e:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009650:	2800      	cmp	r0, #0
10009652:	d010      	beq.n	10009676 <dmp_enable_lp_quat+0x2a>
        regs[0] = DINBC0;
10009654:	23c0      	movs	r3, #192	; 0xc0
10009656:	aa01      	add	r2, sp, #4
10009658:	7013      	strb	r3, [r2, #0]
        regs[1] = DINBC2;
1000965a:	3302      	adds	r3, #2
1000965c:	7053      	strb	r3, [r2, #1]
        regs[2] = DINBC4;
1000965e:	3302      	adds	r3, #2
10009660:	7093      	strb	r3, [r2, #2]
        regs[3] = DINBC6;
10009662:	3302      	adds	r3, #2
10009664:	70d3      	strb	r3, [r2, #3]
    }
    else
        memset(regs, 0x8B, 4);

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
10009666:	2104      	movs	r1, #4
10009668:	4b05      	ldr	r3, [pc, #20]	; (10009680 <dmp_enable_lp_quat+0x34>)
1000966a:	4806      	ldr	r0, [pc, #24]	; (10009684 <dmp_enable_lp_quat+0x38>)
1000966c:	4798      	blx	r3

    return mpu_reset_fifo();
1000966e:	4b06      	ldr	r3, [pc, #24]	; (10009688 <dmp_enable_lp_quat+0x3c>)
10009670:	4798      	blx	r3
}
10009672:	b003      	add	sp, #12
10009674:	bd00      	pop	{pc}
        regs[1] = DINBC2;
        regs[2] = DINBC4;
        regs[3] = DINBC6;
    }
    else
        memset(regs, 0x8B, 4);
10009676:	4b05      	ldr	r3, [pc, #20]	; (1000968c <dmp_enable_lp_quat+0x40>)
10009678:	aa01      	add	r2, sp, #4
1000967a:	9301      	str	r3, [sp, #4]
1000967c:	e7f3      	b.n	10009666 <dmp_enable_lp_quat+0x1a>
1000967e:	46c0      	nop			; (mov r8, r8)
10009680:	10009305 	.word	0x10009305
10009684:	00000a98 	.word	0x00000a98
10009688:	10008525 	.word	0x10008525
1000968c:	8b8b8b8b 	.word	0x8b8b8b8b

10009690 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
10009690:	b500      	push	{lr}
10009692:	b083      	sub	sp, #12
    unsigned char regs[4];
    if (enable) {
10009694:	2800      	cmp	r0, #0
10009696:	d010      	beq.n	100096ba <dmp_enable_6x_lp_quat+0x2a>
        regs[0] = DINA20;
10009698:	2320      	movs	r3, #32
1000969a:	aa01      	add	r2, sp, #4
1000969c:	7013      	strb	r3, [r2, #0]
        regs[1] = DINA28;
1000969e:	3308      	adds	r3, #8
100096a0:	7053      	strb	r3, [r2, #1]
        regs[2] = DINA30;
100096a2:	3308      	adds	r3, #8
100096a4:	7093      	strb	r3, [r2, #2]
        regs[3] = DINA38;
100096a6:	3308      	adds	r3, #8
100096a8:	70d3      	strb	r3, [r2, #3]
    } else
        memset(regs, 0xA3, 4);

    mpu_write_mem(CFG_8, 4, regs);
100096aa:	2104      	movs	r1, #4
100096ac:	4b05      	ldr	r3, [pc, #20]	; (100096c4 <dmp_enable_6x_lp_quat+0x34>)
100096ae:	4806      	ldr	r0, [pc, #24]	; (100096c8 <dmp_enable_6x_lp_quat+0x38>)
100096b0:	4798      	blx	r3

    return mpu_reset_fifo();
100096b2:	4b06      	ldr	r3, [pc, #24]	; (100096cc <dmp_enable_6x_lp_quat+0x3c>)
100096b4:	4798      	blx	r3
}
100096b6:	b003      	add	sp, #12
100096b8:	bd00      	pop	{pc}
        regs[0] = DINA20;
        regs[1] = DINA28;
        regs[2] = DINA30;
        regs[3] = DINA38;
    } else
        memset(regs, 0xA3, 4);
100096ba:	4b05      	ldr	r3, [pc, #20]	; (100096d0 <dmp_enable_6x_lp_quat+0x40>)
100096bc:	aa01      	add	r2, sp, #4
100096be:	9301      	str	r3, [sp, #4]
100096c0:	e7f3      	b.n	100096aa <dmp_enable_6x_lp_quat+0x1a>
100096c2:	46c0      	nop			; (mov r8, r8)
100096c4:	10009305 	.word	0x10009305
100096c8:	00000a9e 	.word	0x00000a9e
100096cc:	10008525 	.word	0x10008525
100096d0:	a3a3a3a3 	.word	0xa3a3a3a3

100096d4 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
100096d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100096d6:	4645      	mov	r5, r8
100096d8:	464e      	mov	r6, r9
100096da:	4657      	mov	r7, sl

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
100096dc:	2302      	movs	r3, #2
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
100096de:	b4e0      	push	{r5, r6, r7}
100096e0:	b084      	sub	sp, #16

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
100096e2:	ac01      	add	r4, sp, #4
100096e4:	7023      	strb	r3, [r4, #0]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
100096e6:	33c8      	adds	r3, #200	; 0xc8
100096e8:	7063      	strb	r3, [r4, #1]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
100096ea:	3319      	adds	r3, #25
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
100096ec:	0005      	movs	r5, r0
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
100096ee:	70a3      	strb	r3, [r4, #2]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
    mpu_write_mem(D_0_104, 4, tmp);
100096f0:	0022      	movs	r2, r4
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
100096f2:	3bda      	subs	r3, #218	; 0xda
    mpu_write_mem(D_0_104, 4, tmp);
100096f4:	2104      	movs	r1, #4
100096f6:	2068      	movs	r0, #104	; 0x68
100096f8:	4e7c      	ldr	r6, [pc, #496]	; (100098ec <dmp_enable_feature+0x218>)
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
100096fa:	70e3      	strb	r3, [r4, #3]
    mpu_write_mem(D_0_104, 4, tmp);
100096fc:	47b0      	blx	r6
100096fe:	2240      	movs	r2, #64	; 0x40

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
10009700:	23a3      	movs	r3, #163	; 0xa3
10009702:	402a      	ands	r2, r5
10009704:	7023      	strb	r3, [r4, #0]
10009706:	4690      	mov	r8, r2
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
10009708:	d100      	bne.n	1000970c <dmp_enable_feature+0x38>
1000970a:	e0e1      	b.n	100098d0 <dmp_enable_feature+0x1fc>
        tmp[1] = 0xC0;
1000970c:	331d      	adds	r3, #29
1000970e:	7063      	strb	r3, [r4, #1]
        tmp[2] = 0xC8;
10009710:	3308      	adds	r3, #8
10009712:	70a3      	strb	r3, [r4, #2]
        tmp[3] = 0xC2;
10009714:	3b06      	subs	r3, #6
10009716:	70e3      	strb	r3, [r4, #3]
10009718:	27c0      	movs	r7, #192	; 0xc0
1000971a:	007f      	lsls	r7, r7, #1
1000971c:	402f      	ands	r7, r5
    } else {
        tmp[1] = 0xA3;
        tmp[2] = 0xA3;
        tmp[3] = 0xA3;
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
1000971e:	d100      	bne.n	10009722 <dmp_enable_feature+0x4e>
10009720:	e0d1      	b.n	100098c6 <dmp_enable_feature+0x1f2>
        tmp[4] = 0xC4;
10009722:	23c4      	movs	r3, #196	; 0xc4
10009724:	7123      	strb	r3, [r4, #4]
        tmp[5] = 0xCC;
10009726:	3308      	adds	r3, #8
10009728:	7163      	strb	r3, [r4, #5]
        tmp[6] = 0xC6;
1000972a:	3b06      	subs	r3, #6
1000972c:	71a3      	strb	r3, [r4, #6]
    } else {
        tmp[4] = 0xA3;
        tmp[5] = 0xA3;
        tmp[6] = 0xA3;
    }
    tmp[7] = 0xA3;
1000972e:	23a3      	movs	r3, #163	; 0xa3
    tmp[8] = 0xA3;
    tmp[9] = 0xA3;
    mpu_write_mem(CFG_15,10,tmp);
10009730:	0022      	movs	r2, r4
10009732:	210a      	movs	r1, #10
10009734:	486e      	ldr	r0, [pc, #440]	; (100098f0 <dmp_enable_feature+0x21c>)
    } else {
        tmp[4] = 0xA3;
        tmp[5] = 0xA3;
        tmp[6] = 0xA3;
    }
    tmp[7] = 0xA3;
10009736:	71e3      	strb	r3, [r4, #7]
    tmp[8] = 0xA3;
10009738:	7223      	strb	r3, [r4, #8]
    tmp[9] = 0xA3;
1000973a:	7263      	strb	r3, [r4, #9]
    mpu_write_mem(CFG_15,10,tmp);
1000973c:	47b0      	blx	r6
1000973e:	2303      	movs	r3, #3
10009740:	402b      	ands	r3, r5
10009742:	4699      	mov	r9, r3

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009744:	d100      	bne.n	10009748 <dmp_enable_feature+0x74>
10009746:	e0bb      	b.n	100098c0 <dmp_enable_feature+0x1ec>
        tmp[0] = DINA20;
10009748:	2320      	movs	r3, #32
1000974a:	7023      	strb	r3, [r4, #0]
    else
        tmp[0] = 0xD8;
    mpu_write_mem(CFG_27,1,tmp);
1000974c:	0022      	movs	r2, r4
1000974e:	2101      	movs	r1, #1
10009750:	4868      	ldr	r0, [pc, #416]	; (100098f4 <dmp_enable_feature+0x220>)
10009752:	47b0      	blx	r6

    if (mask & DMP_FEATURE_GYRO_CAL)
10009754:	06ab      	lsls	r3, r5, #26
10009756:	d400      	bmi.n	1000975a <dmp_enable_feature+0x86>
10009758:	e0ae      	b.n	100098b8 <dmp_enable_feature+0x1e4>
1000975a:	4b67      	ldr	r3, [pc, #412]	; (100098f8 <dmp_enable_feature+0x224>)
1000975c:	4798      	blx	r3
        dmp_enable_gyro_cal(1);
    else
        dmp_enable_gyro_cal(0);

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
1000975e:	2f00      	cmp	r7, #0
10009760:	d00e      	beq.n	10009780 <dmp_enable_feature+0xac>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
10009762:	05eb      	lsls	r3, r5, #23
10009764:	d500      	bpl.n	10009768 <dmp_enable_feature+0x94>
10009766:	e0b7      	b.n	100098d8 <dmp_enable_feature+0x204>
            tmp[0] = 0xB2;
            tmp[1] = 0x8B;
            tmp[2] = 0xB6;
            tmp[3] = 0x9B;
        } else {
            tmp[0] = DINAC0;
10009768:	23b0      	movs	r3, #176	; 0xb0
1000976a:	7023      	strb	r3, [r4, #0]
            tmp[1] = DINA80;
1000976c:	3b30      	subs	r3, #48	; 0x30
1000976e:	7063      	strb	r3, [r4, #1]
            tmp[2] = DINAC2;
10009770:	3334      	adds	r3, #52	; 0x34
10009772:	70a3      	strb	r3, [r4, #2]
            tmp[3] = DINA90;
10009774:	3b24      	subs	r3, #36	; 0x24
10009776:	70e3      	strb	r3, [r4, #3]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
10009778:	0022      	movs	r2, r4
1000977a:	2104      	movs	r1, #4
1000977c:	485f      	ldr	r0, [pc, #380]	; (100098fc <dmp_enable_feature+0x228>)
1000977e:	47b0      	blx	r6
    }

    if (mask & DMP_FEATURE_TAP) {
10009780:	07eb      	lsls	r3, r5, #31
10009782:	d400      	bmi.n	10009786 <dmp_enable_feature+0xb2>
10009784:	e090      	b.n	100098a8 <dmp_enable_feature+0x1d4>
        /* Enable tap. */
        tmp[0] = 0xF8;
        mpu_write_mem(CFG_20, 1, tmp);
10009786:	208b      	movs	r0, #139	; 0x8b
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
    }

    if (mask & DMP_FEATURE_TAP) {
        /* Enable tap. */
        tmp[0] = 0xF8;
10009788:	23f8      	movs	r3, #248	; 0xf8
        mpu_write_mem(CFG_20, 1, tmp);
1000978a:	0022      	movs	r2, r4
1000978c:	2101      	movs	r1, #1
1000978e:	0100      	lsls	r0, r0, #4
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
    }

    if (mask & DMP_FEATURE_TAP) {
        /* Enable tap. */
        tmp[0] = 0xF8;
10009790:	7023      	strb	r3, [r4, #0]
        mpu_write_mem(CFG_20, 1, tmp);
10009792:	47b0      	blx	r6
        dmp_set_tap_thresh(TAP_XYZ, 250);
10009794:	21fa      	movs	r1, #250	; 0xfa
10009796:	4b5a      	ldr	r3, [pc, #360]	; (10009900 <dmp_enable_feature+0x22c>)
10009798:	2007      	movs	r0, #7
1000979a:	4798      	blx	r3
        dmp_set_tap_axes(TAP_XYZ);
1000979c:	4b59      	ldr	r3, [pc, #356]	; (10009904 <dmp_enable_feature+0x230>)
1000979e:	2007      	movs	r0, #7
100097a0:	4798      	blx	r3
    if (min_taps < 1)
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
100097a2:	2300      	movs	r3, #0
100097a4:	469a      	mov	sl, r3
    return mpu_write_mem(D_1_79, 1, &tmp);
100097a6:	2050      	movs	r0, #80	; 0x50
    if (min_taps < 1)
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
100097a8:	466b      	mov	r3, sp
100097aa:	4652      	mov	r2, sl
    return mpu_write_mem(D_1_79, 1, &tmp);
100097ac:	2101      	movs	r1, #1
    if (min_taps < 1)
        min_taps = 1;
    else if (min_taps > 4)
        min_taps = 4;

    tmp = min_taps - 1;
100097ae:	701a      	strb	r2, [r3, #0]
    return mpu_write_mem(D_1_79, 1, &tmp);
100097b0:	30ff      	adds	r0, #255	; 0xff
100097b2:	466a      	mov	r2, sp
100097b4:	47b0      	blx	r6
{
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
100097b6:	466b      	mov	r3, sp
100097b8:	4652      	mov	r2, sl
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
100097ba:	20ef      	movs	r0, #239	; 0xef
{
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
100097bc:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
100097be:	2314      	movs	r3, #20
100097c0:	466a      	mov	r2, sp
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
100097c2:	2102      	movs	r1, #2
100097c4:	0040      	lsls	r0, r0, #1
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
100097c6:	7053      	strb	r3, [r2, #1]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
100097c8:	47b0      	blx	r6
{
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
100097ca:	466b      	mov	r3, sp
100097cc:	4652      	mov	r2, sl
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
    return mpu_write_mem(D_1_218, 2, tmp);
100097ce:	20ed      	movs	r0, #237	; 0xed
{
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
100097d0:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
100097d2:	2364      	movs	r3, #100	; 0x64
100097d4:	466a      	mov	r2, sp
    return mpu_write_mem(D_1_218, 2, tmp);
100097d6:	2102      	movs	r1, #2
100097d8:	0040      	lsls	r0, r0, #1
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    tmp[0] = (unsigned char)(dmp_time >> 8);
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
100097da:	7053      	strb	r3, [r2, #1]
    return mpu_write_mem(D_1_218, 2, tmp);
100097dc:	47b0      	blx	r6
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
100097de:	466b      	mov	r3, sp
100097e0:	4652      	mov	r2, sl
100097e2:	701a      	strb	r2, [r3, #0]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
100097e4:	466a      	mov	r2, sp
100097e6:	238e      	movs	r3, #142	; 0x8e
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
    return mpu_write_mem(D_1_92, 4, tmp);
100097e8:	20ae      	movs	r0, #174	; 0xae
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
100097ea:	7053      	strb	r3, [r2, #1]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
100097ec:	336b      	adds	r3, #107	; 0x6b
100097ee:	7093      	strb	r3, [r2, #2]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
    return mpu_write_mem(D_1_92, 4, tmp);
100097f0:	2104      	movs	r1, #4
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
100097f2:	3b69      	subs	r3, #105	; 0x69
    return mpu_write_mem(D_1_92, 4, tmp);
100097f4:	0040      	lsls	r0, r0, #1
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
100097f6:	70d3      	strb	r3, [r2, #3]
    return mpu_write_mem(D_1_92, 4, tmp);
100097f8:	47b0      	blx	r6
int dmp_set_shake_reject_time(unsigned short time)
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
100097fa:	466b      	mov	r3, sp
100097fc:	4652      	mov	r2, sl
    tmp[1] = time & 0xFF;
    return mpu_write_mem(D_1_90,2,tmp);
100097fe:	20ad      	movs	r0, #173	; 0xad
int dmp_set_shake_reject_time(unsigned short time)
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
10009800:	701a      	strb	r2, [r3, #0]
    tmp[1] = time & 0xFF;
10009802:	2308      	movs	r3, #8
10009804:	466a      	mov	r2, sp
    return mpu_write_mem(D_1_90,2,tmp);
10009806:	2102      	movs	r1, #2
10009808:	0040      	lsls	r0, r0, #1
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
    tmp[1] = time & 0xFF;
1000980a:	7053      	strb	r3, [r2, #1]
    return mpu_write_mem(D_1_90,2,tmp);
1000980c:	47b0      	blx	r6
int dmp_set_shake_reject_timeout(unsigned short time)
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
1000980e:	466b      	mov	r3, sp
10009810:	4652      	mov	r2, sl
    tmp[1] = time & 0xFF;
    return mpu_write_mem(D_1_88,2,tmp);
10009812:	20ac      	movs	r0, #172	; 0xac
int dmp_set_shake_reject_timeout(unsigned short time)
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
10009814:	701a      	strb	r2, [r3, #0]
    tmp[1] = time & 0xFF;
10009816:	2302      	movs	r3, #2
10009818:	466a      	mov	r2, sp
    return mpu_write_mem(D_1_88,2,tmp);
1000981a:	2102      	movs	r1, #2
1000981c:	0040      	lsls	r0, r0, #1
{
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
    tmp[0] = time >> 8;
    tmp[1] = time & 0xFF;
1000981e:	7053      	strb	r3, [r2, #1]
    return mpu_write_mem(D_1_88,2,tmp);
10009820:	47b0      	blx	r6
    } else {
        tmp[0] = 0xD8;
        mpu_write_mem(CFG_20, 1, tmp);
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
10009822:	07ab      	lsls	r3, r5, #30
10009824:	d53d      	bpl.n	100098a2 <dmp_enable_feature+0x1ce>
        tmp[0] = 0xD9;
10009826:	23d9      	movs	r3, #217	; 0xd9
10009828:	7023      	strb	r3, [r4, #0]
    } else
        tmp[0] = 0xD8;
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
1000982a:	0022      	movs	r2, r4
1000982c:	2101      	movs	r1, #1
1000982e:	4836      	ldr	r0, [pc, #216]	; (10009908 <dmp_enable_feature+0x234>)
10009830:	47b0      	blx	r6

    if (mask & DMP_FEATURE_LP_QUAT)
10009832:	076b      	lsls	r3, r5, #29
10009834:	d531      	bpl.n	1000989a <dmp_enable_feature+0x1c6>
        dmp_enable_lp_quat(1);
10009836:	2001      	movs	r0, #1
10009838:	4b34      	ldr	r3, [pc, #208]	; (1000990c <dmp_enable_feature+0x238>)
1000983a:	4798      	blx	r3
    else
        dmp_enable_lp_quat(0);

    if (mask & DMP_FEATURE_6X_LP_QUAT)
1000983c:	06eb      	lsls	r3, r5, #27
1000983e:	d528      	bpl.n	10009892 <dmp_enable_feature+0x1be>
        dmp_enable_6x_lp_quat(1);
10009840:	2001      	movs	r0, #1
10009842:	4b33      	ldr	r3, [pc, #204]	; (10009910 <dmp_enable_feature+0x23c>)
10009844:	4798      	blx	r3
    else
        dmp_enable_6x_lp_quat(0);

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
10009846:	2308      	movs	r3, #8
10009848:	4c32      	ldr	r4, [pc, #200]	; (10009914 <dmp_enable_feature+0x240>)
1000984a:	432b      	orrs	r3, r5
1000984c:	8163      	strh	r3, [r4, #10]
    mpu_reset_fifo();
1000984e:	4b32      	ldr	r3, [pc, #200]	; (10009918 <dmp_enable_feature+0x244>)
10009850:	4798      	blx	r3

    dmp.packet_length = 0;
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
10009852:	4643      	mov	r3, r8
10009854:	2b00      	cmp	r3, #0
10009856:	d119      	bne.n	1000988c <dmp_enable_feature+0x1b8>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    mpu_reset_fifo();

    dmp.packet_length = 0;
10009858:	4643      	mov	r3, r8
1000985a:	73a3      	strb	r3, [r4, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        dmp.packet_length += 6;
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
1000985c:	2f00      	cmp	r7, #0
1000985e:	d002      	beq.n	10009866 <dmp_enable_feature+0x192>
        dmp.packet_length += 6;
10009860:	7ba3      	ldrb	r3, [r4, #14]
10009862:	3306      	adds	r3, #6
10009864:	73a3      	strb	r3, [r4, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
10009866:	2314      	movs	r3, #20
10009868:	422b      	tst	r3, r5
1000986a:	d002      	beq.n	10009872 <dmp_enable_feature+0x19e>
        dmp.packet_length += 16;
1000986c:	7ba3      	ldrb	r3, [r4, #14]
1000986e:	3310      	adds	r3, #16
10009870:	73a3      	strb	r3, [r4, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
10009872:	464b      	mov	r3, r9
10009874:	2b00      	cmp	r3, #0
10009876:	d002      	beq.n	1000987e <dmp_enable_feature+0x1aa>
        dmp.packet_length += 4;
10009878:	7ba3      	ldrb	r3, [r4, #14]
1000987a:	3304      	adds	r3, #4
1000987c:	73a3      	strb	r3, [r4, #14]

    return 0;
}
1000987e:	2000      	movs	r0, #0
10009880:	b004      	add	sp, #16
10009882:	bc1c      	pop	{r2, r3, r4}
10009884:	4690      	mov	r8, r2
10009886:	4699      	mov	r9, r3
10009888:	46a2      	mov	sl, r4
1000988a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    mpu_reset_fifo();

    dmp.packet_length = 0;
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        dmp.packet_length += 6;
1000988c:	2306      	movs	r3, #6
1000988e:	73a3      	strb	r3, [r4, #14]
10009890:	e7e4      	b.n	1000985c <dmp_enable_feature+0x188>
        dmp_enable_lp_quat(0);

    if (mask & DMP_FEATURE_6X_LP_QUAT)
        dmp_enable_6x_lp_quat(1);
    else
        dmp_enable_6x_lp_quat(0);
10009892:	4b1f      	ldr	r3, [pc, #124]	; (10009910 <dmp_enable_feature+0x23c>)
10009894:	2000      	movs	r0, #0
10009896:	4798      	blx	r3
10009898:	e7d5      	b.n	10009846 <dmp_enable_feature+0x172>
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);

    if (mask & DMP_FEATURE_LP_QUAT)
        dmp_enable_lp_quat(1);
    else
        dmp_enable_lp_quat(0);
1000989a:	4b1c      	ldr	r3, [pc, #112]	; (1000990c <dmp_enable_feature+0x238>)
1000989c:	2000      	movs	r0, #0
1000989e:	4798      	blx	r3
100098a0:	e7cc      	b.n	1000983c <dmp_enable_feature+0x168>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
        tmp[0] = 0xD9;
    } else
        tmp[0] = 0xD8;
100098a2:	23d8      	movs	r3, #216	; 0xd8
100098a4:	7023      	strb	r3, [r4, #0]
100098a6:	e7c0      	b.n	1000982a <dmp_enable_feature+0x156>
        dmp_set_shake_reject_thresh(GYRO_SF, 200);
        dmp_set_shake_reject_time(40);
        dmp_set_shake_reject_timeout(10);
    } else {
        tmp[0] = 0xD8;
        mpu_write_mem(CFG_20, 1, tmp);
100098a8:	208b      	movs	r0, #139	; 0x8b

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
        dmp_set_shake_reject_time(40);
        dmp_set_shake_reject_timeout(10);
    } else {
        tmp[0] = 0xD8;
100098aa:	23d8      	movs	r3, #216	; 0xd8
        mpu_write_mem(CFG_20, 1, tmp);
100098ac:	0022      	movs	r2, r4
100098ae:	2101      	movs	r1, #1
100098b0:	0100      	lsls	r0, r0, #4

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
        dmp_set_shake_reject_time(40);
        dmp_set_shake_reject_timeout(10);
    } else {
        tmp[0] = 0xD8;
100098b2:	7023      	strb	r3, [r4, #0]
        mpu_write_mem(CFG_20, 1, tmp);
100098b4:	47b0      	blx	r6
100098b6:	e7b4      	b.n	10009822 <dmp_enable_feature+0x14e>
    mpu_write_mem(CFG_27,1,tmp);

    if (mask & DMP_FEATURE_GYRO_CAL)
        dmp_enable_gyro_cal(1);
    else
        dmp_enable_gyro_cal(0);
100098b8:	4b18      	ldr	r3, [pc, #96]	; (1000991c <dmp_enable_feature+0x248>)
100098ba:	2000      	movs	r0, #0
100098bc:	4798      	blx	r3
100098be:	e74e      	b.n	1000975e <dmp_enable_feature+0x8a>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
        tmp[0] = DINA20;
    else
        tmp[0] = 0xD8;
100098c0:	23d8      	movs	r3, #216	; 0xd8
100098c2:	7023      	strb	r3, [r4, #0]
100098c4:	e742      	b.n	1000974c <dmp_enable_feature+0x78>
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
        tmp[4] = 0xC4;
        tmp[5] = 0xCC;
        tmp[6] = 0xC6;
    } else {
        tmp[4] = 0xA3;
100098c6:	23a3      	movs	r3, #163	; 0xa3
100098c8:	7123      	strb	r3, [r4, #4]
        tmp[5] = 0xA3;
100098ca:	7163      	strb	r3, [r4, #5]
        tmp[6] = 0xA3;
100098cc:	71a3      	strb	r3, [r4, #6]
100098ce:	e72e      	b.n	1000972e <dmp_enable_feature+0x5a>
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
        tmp[1] = 0xC0;
        tmp[2] = 0xC8;
        tmp[3] = 0xC2;
    } else {
        tmp[1] = 0xA3;
100098d0:	7063      	strb	r3, [r4, #1]
        tmp[2] = 0xA3;
100098d2:	70a3      	strb	r3, [r4, #2]
        tmp[3] = 0xA3;
100098d4:	70e3      	strb	r3, [r4, #3]
100098d6:	e71f      	b.n	10009718 <dmp_enable_feature+0x44>
    else
        dmp_enable_gyro_cal(0);

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
            tmp[0] = 0xB2;
100098d8:	23b2      	movs	r3, #178	; 0xb2
100098da:	7023      	strb	r3, [r4, #0]
            tmp[1] = 0x8B;
100098dc:	3b27      	subs	r3, #39	; 0x27
100098de:	7063      	strb	r3, [r4, #1]
            tmp[2] = 0xB6;
100098e0:	332b      	adds	r3, #43	; 0x2b
100098e2:	70a3      	strb	r3, [r4, #2]
            tmp[3] = 0x9B;
100098e4:	3b1b      	subs	r3, #27
100098e6:	70e3      	strb	r3, [r4, #3]
100098e8:	e746      	b.n	10009778 <dmp_enable_feature+0xa4>
100098ea:	46c0      	nop			; (mov r8, r8)
100098ec:	10009305 	.word	0x10009305
100098f0:	00000aa7 	.word	0x00000aa7
100098f4:	00000ab6 	.word	0x00000ab6
100098f8:	10009429 	.word	0x10009429
100098fc:	00000aa2 	.word	0x00000aa2
10009900:	10009455 	.word	0x10009455
10009904:	100095c9 	.word	0x100095c9
10009908:	0000073d 	.word	0x0000073d
1000990c:	1000964d 	.word	0x1000964d
10009910:	10009691 	.word	0x10009691
10009914:	1001a584 	.word	0x1001a584
10009918:	10008525 	.word	0x10008525
1000991c:	10009611 	.word	0x10009611

10009920 <inv_db_save_func>:
    return INV_SUCCESS;
}

/** This function returns the data to be stored in non-volatile memory between power off */
static inv_error_t inv_db_save_func(unsigned char *data)
{
10009920:	b510      	push	{r4, lr}
    memcpy(data, &inv_data_builder.save, sizeof(inv_data_builder.save));
10009922:	4903      	ldr	r1, [pc, #12]	; (10009930 <inv_db_save_func+0x10>)
10009924:	2248      	movs	r2, #72	; 0x48
10009926:	31f4      	adds	r1, #244	; 0xf4
10009928:	4b02      	ldr	r3, [pc, #8]	; (10009934 <inv_db_save_func+0x14>)
1000992a:	4798      	blx	r3
    return INV_SUCCESS;
}
1000992c:	2000      	movs	r0, #0
1000992e:	bd10      	pop	{r4, pc}
10009930:	1001a594 	.word	0x1001a594
10009934:	10017d8f 	.word	0x10017d8f

10009938 <inv_db_load_func>:
}
#endif

/** This function receives the data that was stored in non-volatile memory between power off */
static inv_error_t inv_db_load_func(const unsigned char *data)
{
10009938:	b510      	push	{r4, lr}
    memcpy(&inv_data_builder.save, data, sizeof(inv_data_builder.save));
1000993a:	4c0e      	ldr	r4, [pc, #56]	; (10009974 <inv_db_load_func+0x3c>)
}
#endif

/** This function receives the data that was stored in non-volatile memory between power off */
static inv_error_t inv_db_load_func(const unsigned char *data)
{
1000993c:	0001      	movs	r1, r0
    memcpy(&inv_data_builder.save, data, sizeof(inv_data_builder.save));
1000993e:	0020      	movs	r0, r4
10009940:	2248      	movs	r2, #72	; 0x48
10009942:	4b0d      	ldr	r3, [pc, #52]	; (10009978 <inv_db_load_func+0x40>)
10009944:	30f4      	adds	r0, #244	; 0xf4
10009946:	4798      	blx	r3
    // copy in the saved accuracy in the actual sensors accuracy
    sensors.gyro.accuracy = inv_data_builder.save.gyro_accuracy;
10009948:	2298      	movs	r2, #152	; 0x98
1000994a:	0052      	lsls	r2, r2, #1
1000994c:	4b0b      	ldr	r3, [pc, #44]	; (1000997c <inv_db_load_func+0x44>)
1000994e:	58a2      	ldr	r2, [r4, r2]
    sensors.accel.accuracy = inv_data_builder.save.accel_accuracy;
    sensors.compass.accuracy = inv_data_builder.save.compass_accuracy;
10009950:	21bc      	movs	r1, #188	; 0xbc
/** This function receives the data that was stored in non-volatile memory between power off */
static inv_error_t inv_db_load_func(const unsigned char *data)
{
    memcpy(&inv_data_builder.save, data, sizeof(inv_data_builder.save));
    // copy in the saved accuracy in the actual sensors accuracy
    sensors.gyro.accuracy = inv_data_builder.save.gyro_accuracy;
10009952:	635a      	str	r2, [r3, #52]	; 0x34
    sensors.accel.accuracy = inv_data_builder.save.accel_accuracy;
10009954:	229a      	movs	r2, #154	; 0x9a
10009956:	0052      	lsls	r2, r2, #1
10009958:	58a2      	ldr	r2, [r4, r2]
1000995a:	679a      	str	r2, [r3, #120]	; 0x78
    sensors.compass.accuracy = inv_data_builder.save.compass_accuracy;
1000995c:	229c      	movs	r2, #156	; 0x9c
1000995e:	0052      	lsls	r2, r2, #1
10009960:	58a2      	ldr	r2, [r4, r2]
10009962:	505a      	str	r2, [r3, r1]
    // TODO
    if (sensors.compass.accuracy == 3) {
10009964:	2a03      	cmp	r2, #3
10009966:	d001      	beq.n	1000996c <inv_db_load_func+0x34>
        inv_set_compass_bias_found(1);
    }
    return INV_SUCCESS;
}
10009968:	2000      	movs	r0, #0
1000996a:	bd10      	pop	{r4, pc}
    sensors.gyro.accuracy = inv_data_builder.save.gyro_accuracy;
    sensors.accel.accuracy = inv_data_builder.save.accel_accuracy;
    sensors.compass.accuracy = inv_data_builder.save.compass_accuracy;
    // TODO
    if (sensors.compass.accuracy == 3) {
        inv_set_compass_bias_found(1);
1000996c:	2001      	movs	r0, #1
1000996e:	4b04      	ldr	r3, [pc, #16]	; (10009980 <inv_db_load_func+0x48>)
10009970:	4798      	blx	r3
10009972:	e7f9      	b.n	10009968 <inv_db_load_func+0x30>
10009974:	1001a594 	.word	0x1001a594
10009978:	10017d8f 	.word	0x10017d8f
1000997c:	1001a6d4 	.word	0x1001a6d4
10009980:	1000a8ed 	.word	0x1000a8ed

10009984 <inv_get_gyro_on>:
/** Helper function stating whether the gyro is on or off.
 * @return TRUE if gyro if on, 0 if gyro if off
*/
int inv_get_gyro_on()
{
    return (sensors.gyro.status & INV_SENSOR_ON) == INV_SENSOR_ON;
10009984:	4b02      	ldr	r3, [pc, #8]	; (10009990 <inv_get_gyro_on+0xc>)
10009986:	6b18      	ldr	r0, [r3, #48]	; 0x30
10009988:	05c0      	lsls	r0, r0, #23
1000998a:	0fc0      	lsrs	r0, r0, #31
}
1000998c:	4770      	bx	lr
1000998e:	46c0      	nop			; (mov r8, r8)
10009990:	1001a6d4 	.word	0x1001a6d4

10009994 <inv_apply_calibration>:
* @param[in,out] sensor structure to modify
* @param[in] bias bias in the mounting frame, in hardware units scaled by
*                 2^16. Length 3.
*/
void inv_apply_calibration(struct inv_single_sensor_t *sensor, const long *bias)
{
10009994:	b570      	push	{r4, r5, r6, lr}
    long raw32[3];

    // Convert raw to calibrated
    raw32[0] = (long)sensor->raw[0] << 15;
10009996:	2204      	movs	r2, #4
10009998:	5e83      	ldrsh	r3, [r0, r2]
* @param[in,out] sensor structure to modify
* @param[in] bias bias in the mounting frame, in hardware units scaled by
*                 2^16. Length 3.
*/
void inv_apply_calibration(struct inv_single_sensor_t *sensor, const long *bias)
{
1000999a:	b086      	sub	sp, #24
    long raw32[3];

    // Convert raw to calibrated
    raw32[0] = (long)sensor->raw[0] << 15;
1000999c:	03db      	lsls	r3, r3, #15
1000999e:	9303      	str	r3, [sp, #12]
    raw32[1] = (long)sensor->raw[1] << 15;
100099a0:	2206      	movs	r2, #6
100099a2:	5e83      	ldrsh	r3, [r0, r2]
* @param[in,out] sensor structure to modify
* @param[in] bias bias in the mounting frame, in hardware units scaled by
*                 2^16. Length 3.
*/
void inv_apply_calibration(struct inv_single_sensor_t *sensor, const long *bias)
{
100099a4:	000d      	movs	r5, r1
    long raw32[3];

    // Convert raw to calibrated
    raw32[0] = (long)sensor->raw[0] << 15;
    raw32[1] = (long)sensor->raw[1] << 15;
100099a6:	03db      	lsls	r3, r3, #15
100099a8:	9304      	str	r3, [sp, #16]
    raw32[2] = (long)sensor->raw[2] << 15;
100099aa:	2208      	movs	r2, #8
100099ac:	5e83      	ldrsh	r3, [r0, r2]
* @param[in,out] sensor structure to modify
* @param[in] bias bias in the mounting frame, in hardware units scaled by
*                 2^16. Length 3.
*/
void inv_apply_calibration(struct inv_single_sensor_t *sensor, const long *bias)
{
100099ae:	0004      	movs	r4, r0
    long raw32[3];

    // Convert raw to calibrated
    raw32[0] = (long)sensor->raw[0] << 15;
    raw32[1] = (long)sensor->raw[1] << 15;
    raw32[2] = (long)sensor->raw[2] << 15;
100099b0:	03db      	lsls	r3, r3, #15
100099b2:	9305      	str	r3, [sp, #20]

    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->raw_scaled);
100099b4:	0003      	movs	r3, r0
100099b6:	6a42      	ldr	r2, [r0, #36]	; 0x24
100099b8:	4e11      	ldr	r6, [pc, #68]	; (10009a00 <inv_apply_calibration+0x6c>)
100099ba:	0051      	lsls	r1, r2, #1
100099bc:	330c      	adds	r3, #12
100099be:	aa03      	add	r2, sp, #12
100099c0:	8800      	ldrh	r0, [r0, #0]
100099c2:	47b0      	blx	r6

    raw32[0] -= bias[0] >> 1;
100099c4:	682b      	ldr	r3, [r5, #0]
100099c6:	9a03      	ldr	r2, [sp, #12]
100099c8:	105b      	asrs	r3, r3, #1
100099ca:	1ad3      	subs	r3, r2, r3
100099cc:	9303      	str	r3, [sp, #12]
    raw32[1] -= bias[1] >> 1;
100099ce:	686b      	ldr	r3, [r5, #4]
100099d0:	9a04      	ldr	r2, [sp, #16]
100099d2:	105b      	asrs	r3, r3, #1
100099d4:	1ad3      	subs	r3, r2, r3
100099d6:	9304      	str	r3, [sp, #16]
    raw32[2] -= bias[2] >> 1;
100099d8:	68ab      	ldr	r3, [r5, #8]
100099da:	9a05      	ldr	r2, [sp, #20]
100099dc:	105b      	asrs	r3, r3, #1
100099de:	1ad3      	subs	r3, r2, r3
100099e0:	9305      	str	r3, [sp, #20]

    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->calibrated);
100099e2:	0023      	movs	r3, r4

    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->raw_scaled);

    raw32[0] -= bias[0] >> 1;
    raw32[1] -= bias[1] >> 1;
    raw32[2] -= bias[2] >> 1;
100099e4:	9201      	str	r2, [sp, #4]

    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->calibrated);
100099e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
100099e8:	3318      	adds	r3, #24
100099ea:	0051      	lsls	r1, r2, #1
100099ec:	8820      	ldrh	r0, [r4, #0]
100099ee:	aa03      	add	r2, sp, #12
100099f0:	47b0      	blx	r6

    sensor->status |= INV_CALIBRATED;
100099f2:	2320      	movs	r3, #32
100099f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
100099f6:	4313      	orrs	r3, r2
100099f8:	6323      	str	r3, [r4, #48]	; 0x30
}
100099fa:	b006      	add	sp, #24
100099fc:	bd70      	pop	{r4, r5, r6, pc}
100099fe:	46c0      	nop			; (mov r8, r8)
10009a00:	1000a5ed 	.word	0x1000a5ed

10009a04 <inv_set_compass_disturbance>:
/** Set the state of a compass disturbance
* @param[in] dist 1=disturbance, 0=no disturbance
*/
void inv_set_compass_disturbance(int dist)
{
    inv_data_builder.compass_disturbance = dist;
10009a04:	239e      	movs	r3, #158	; 0x9e
10009a06:	4a02      	ldr	r2, [pc, #8]	; (10009a10 <inv_set_compass_disturbance+0xc>)
10009a08:	005b      	lsls	r3, r3, #1
10009a0a:	50d0      	str	r0, [r2, r3]
}
10009a0c:	4770      	bx	lr
10009a0e:	46c0      	nop			; (mov r8, r8)
10009a10:	1001a594 	.word	0x1001a594

10009a14 <inv_set_gyro_bias>:
* @param[in] bias Gyro bias in hardware units scaled by 2^16. In chip mounting frame.
*            Length 3.
* @param[in] accuracy Accuracy of bias. 0 = least accurate, 3 = most accurate.
*/
void inv_set_gyro_bias(const long *bias, int accuracy)
{
10009a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009a16:	0005      	movs	r5, r0
10009a18:	000e      	movs	r6, r1
    if (bias != NULL) {
        if (memcmp(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias))) {
10009a1a:	4c1d      	ldr	r4, [pc, #116]	; (10009a90 <inv_set_gyro_bias+0x7c>)
*            Length 3.
* @param[in] accuracy Accuracy of bias. 0 = least accurate, 3 = most accurate.
*/
void inv_set_gyro_bias(const long *bias, int accuracy)
{
    if (bias != NULL) {
10009a1c:	2800      	cmp	r0, #0
10009a1e:	d008      	beq.n	10009a32 <inv_set_gyro_bias+0x1e>
        if (memcmp(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias))) {
10009a20:	1c67      	adds	r7, r4, #1
10009a22:	37ff      	adds	r7, #255	; 0xff
10009a24:	0001      	movs	r1, r0
10009a26:	220c      	movs	r2, #12
10009a28:	0038      	movs	r0, r7
10009a2a:	4b1a      	ldr	r3, [pc, #104]	; (10009a94 <inv_set_gyro_bias+0x80>)
10009a2c:	4798      	blx	r3
10009a2e:	2800      	cmp	r0, #0
10009a30:	d117      	bne.n	10009a62 <inv_set_gyro_bias+0x4e>
            memcpy(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias));
            inv_apply_calibration(&sensors.gyro, inv_data_builder.save.gyro_bias);
        }
    }
    sensors.gyro.accuracy = accuracy;
    inv_data_builder.save.gyro_accuracy = accuracy;
10009a32:	2398      	movs	r3, #152	; 0x98
10009a34:	4d18      	ldr	r5, [pc, #96]	; (10009a98 <inv_set_gyro_bias+0x84>)
10009a36:	005b      	lsls	r3, r3, #1
10009a38:	50e6      	str	r6, [r4, r3]

    /* TODO: What should we do if there's no temperature data? */
    if (sensors.temp.calibrated[0])
10009a3a:	3b4c      	subs	r3, #76	; 0x4c
10009a3c:	58eb      	ldr	r3, [r5, r3]
        if (memcmp(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias))) {
            memcpy(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias));
            inv_apply_calibration(&sensors.gyro, inv_data_builder.save.gyro_bias);
        }
    }
    sensors.gyro.accuracy = accuracy;
10009a3e:	636e      	str	r6, [r5, #52]	; 0x34
    inv_data_builder.save.gyro_accuracy = accuracy;

    /* TODO: What should we do if there's no temperature data? */
    if (sensors.temp.calibrated[0])
10009a40:	2b00      	cmp	r3, #0
10009a42:	d120      	bne.n	10009a86 <inv_set_gyro_bias+0x72>
        inv_data_builder.save.gyro_temp = sensors.temp.calibrated[0];
    else
        /* Set to 27 deg C for now until we've got a better solution. */
        inv_data_builder.save.gyro_temp = 1769472L;
10009a44:	22d8      	movs	r2, #216	; 0xd8
10009a46:	2386      	movs	r3, #134	; 0x86
10009a48:	0352      	lsls	r2, r2, #13
10009a4a:	005b      	lsls	r3, r3, #1
10009a4c:	50e2      	str	r2, [r4, r3]
    inv_set_message(INV_MSG_NEW_GB_EVENT, INV_MSG_NEW_GB_EVENT, 0);
10009a4e:	2200      	movs	r2, #0
10009a50:	2104      	movs	r1, #4
10009a52:	2004      	movs	r0, #4
10009a54:	4b11      	ldr	r3, [pc, #68]	; (10009a9c <inv_set_gyro_bias+0x88>)
10009a56:	4798      	blx	r3

    /* TODO: this flag works around the synchronization problem seen with using
       the user-exposed message layer to signal the temperature compensation
       module that gyro biases were set.
       A better, cleaner method is certainly needed. */
    inv_data_builder.save.gyro_bias_tc_set = true;
10009a58:	2388      	movs	r3, #136	; 0x88
10009a5a:	2201      	movs	r2, #1
10009a5c:	005b      	lsls	r3, r3, #1
10009a5e:	50e2      	str	r2, [r4, r3]
}
10009a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
*/
void inv_set_gyro_bias(const long *bias, int accuracy)
{
    if (bias != NULL) {
        if (memcmp(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias))) {
            memcpy(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias));
10009a62:	0029      	movs	r1, r5
10009a64:	220c      	movs	r2, #12
10009a66:	4b0e      	ldr	r3, [pc, #56]	; (10009aa0 <inv_set_gyro_bias+0x8c>)
10009a68:	0038      	movs	r0, r7
10009a6a:	4798      	blx	r3
            inv_apply_calibration(&sensors.gyro, inv_data_builder.save.gyro_bias);
10009a6c:	4d0a      	ldr	r5, [pc, #40]	; (10009a98 <inv_set_gyro_bias+0x84>)
10009a6e:	4b0d      	ldr	r3, [pc, #52]	; (10009aa4 <inv_set_gyro_bias+0x90>)
10009a70:	0039      	movs	r1, r7
10009a72:	0028      	movs	r0, r5
10009a74:	4798      	blx	r3
        }
    }
    sensors.gyro.accuracy = accuracy;
    inv_data_builder.save.gyro_accuracy = accuracy;
10009a76:	2398      	movs	r3, #152	; 0x98
10009a78:	005b      	lsls	r3, r3, #1
10009a7a:	50e6      	str	r6, [r4, r3]

    /* TODO: What should we do if there's no temperature data? */
    if (sensors.temp.calibrated[0])
10009a7c:	3b4c      	subs	r3, #76	; 0x4c
10009a7e:	58eb      	ldr	r3, [r5, r3]
        if (memcmp(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias))) {
            memcpy(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias));
            inv_apply_calibration(&sensors.gyro, inv_data_builder.save.gyro_bias);
        }
    }
    sensors.gyro.accuracy = accuracy;
10009a80:	636e      	str	r6, [r5, #52]	; 0x34
    inv_data_builder.save.gyro_accuracy = accuracy;

    /* TODO: What should we do if there's no temperature data? */
    if (sensors.temp.calibrated[0])
10009a82:	2b00      	cmp	r3, #0
10009a84:	d0de      	beq.n	10009a44 <inv_set_gyro_bias+0x30>
        inv_data_builder.save.gyro_temp = sensors.temp.calibrated[0];
10009a86:	2286      	movs	r2, #134	; 0x86
10009a88:	0052      	lsls	r2, r2, #1
10009a8a:	50a3      	str	r3, [r4, r2]
10009a8c:	e7df      	b.n	10009a4e <inv_set_gyro_bias+0x3a>
10009a8e:	46c0      	nop			; (mov r8, r8)
10009a90:	1001a594 	.word	0x1001a594
10009a94:	10017d71 	.word	0x10017d71
10009a98:	1001a6d4 	.word	0x1001a6d4
10009a9c:	10009d49 	.word	0x10009d49
10009aa0:	10017d8f 	.word	0x10017d8f
10009aa4:	10009995 	.word	0x10009995

10009aa8 <inv_get_gyro_bias_tc_set>:
 *  @return true if the flag was set, indicating gyro biases were set.
 *          false if the flag was not set.
 */
int inv_get_gyro_bias_tc_set(void)
{
    int flag = (inv_data_builder.save.gyro_bias_tc_set == true);
10009aa8:	2388      	movs	r3, #136	; 0x88
 *          The flag clear automatically after is read.
 *  @return true if the flag was set, indicating gyro biases were set.
 *          false if the flag was not set.
 */
int inv_get_gyro_bias_tc_set(void)
{
10009aaa:	b510      	push	{r4, lr}
    int flag = (inv_data_builder.save.gyro_bias_tc_set == true);
10009aac:	4a04      	ldr	r2, [pc, #16]	; (10009ac0 <inv_get_gyro_bias_tc_set+0x18>)
10009aae:	005b      	lsls	r3, r3, #1
10009ab0:	58d1      	ldr	r1, [r2, r3]
10009ab2:	1e48      	subs	r0, r1, #1
10009ab4:	4244      	negs	r4, r0
10009ab6:	4144      	adcs	r4, r0
    inv_data_builder.save.gyro_bias_tc_set = false;
10009ab8:	2100      	movs	r1, #0
    return flag;
}
10009aba:	0020      	movs	r0, r4
 *          false if the flag was not set.
 */
int inv_get_gyro_bias_tc_set(void)
{
    int flag = (inv_data_builder.save.gyro_bias_tc_set == true);
    inv_data_builder.save.gyro_bias_tc_set = false;
10009abc:	50d1      	str	r1, [r2, r3]
    return flag;
}
10009abe:	bd10      	pop	{r4, pc}
10009ac0:	1001a594 	.word	0x1001a594

10009ac4 <inv_get_gyro_bias>:
 *              Length 3.
 *  @param[in] temp
 *              Tempearature in degrees C.
 */
void inv_get_gyro_bias(long *bias, long *temp)
{
10009ac4:	b510      	push	{r4, lr}
10009ac6:	000c      	movs	r4, r1
    if (bias != NULL)
10009ac8:	2800      	cmp	r0, #0
10009aca:	d005      	beq.n	10009ad8 <inv_get_gyro_bias+0x14>
        memcpy(bias, inv_data_builder.save.gyro_bias,
10009acc:	4906      	ldr	r1, [pc, #24]	; (10009ae8 <inv_get_gyro_bias+0x24>)
10009ace:	220c      	movs	r2, #12
10009ad0:	3101      	adds	r1, #1
10009ad2:	31ff      	adds	r1, #255	; 0xff
10009ad4:	4b05      	ldr	r3, [pc, #20]	; (10009aec <inv_get_gyro_bias+0x28>)
10009ad6:	4798      	blx	r3
               sizeof(inv_data_builder.save.gyro_bias));
    if (temp != NULL)
10009ad8:	2c00      	cmp	r4, #0
10009ada:	d004      	beq.n	10009ae6 <inv_get_gyro_bias+0x22>
        temp[0] = inv_data_builder.save.gyro_temp;
10009adc:	2386      	movs	r3, #134	; 0x86
10009ade:	4a02      	ldr	r2, [pc, #8]	; (10009ae8 <inv_get_gyro_bias+0x24>)
10009ae0:	005b      	lsls	r3, r3, #1
10009ae2:	58d3      	ldr	r3, [r2, r3]
10009ae4:	6023      	str	r3, [r4, #0]
}
10009ae6:	bd10      	pop	{r4, pc}
10009ae8:	1001a594 	.word	0x1001a594
10009aec:	10017d8f 	.word	0x10017d8f

10009af0 <inv_register_data_cb>:
*            callback would be generated if there was new magnetomer data OR new accel data.
*/
inv_error_t inv_register_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data),
    int priority, int sensor_type)
{
10009af0:	b5f0      	push	{r4, r5, r6, r7, lr}
10009af2:	4656      	mov	r6, sl
10009af4:	464d      	mov	r5, r9
10009af6:	465f      	mov	r7, fp
10009af8:	4644      	mov	r4, r8
10009afa:	b4f0      	push	{r4, r5, r6, r7}
    inv_error_t result = INV_SUCCESS;
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
10009afc:	4b3a      	ldr	r3, [pc, #232]	; (10009be8 <inv_register_data_cb+0xf8>)
*            callback would be generated if there was new magnetomer data OR new accel data.
*/
inv_error_t inv_register_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data),
    int priority, int sensor_type)
{
10009afe:	b083      	sub	sp, #12
    inv_error_t result = INV_SUCCESS;
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
10009b00:	681e      	ldr	r6, [r3, #0]
*            callback would be generated if there was new magnetomer data OR new accel data.
*/
inv_error_t inv_register_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data),
    int priority, int sensor_type)
{
10009b02:	9200      	str	r2, [sp, #0]
    inv_error_t result = INV_SUCCESS;
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
10009b04:	4699      	mov	r9, r3
10009b06:	2e00      	cmp	r6, #0
10009b08:	dd22      	ble.n	10009b50 <inv_register_data_cb+0x60>
        if ((inv_data_builder.process[kk].func == func) ||
10009b0a:	685b      	ldr	r3, [r3, #4]
10009b0c:	4298      	cmp	r0, r3
10009b0e:	d017      	beq.n	10009b40 <inv_register_data_cb+0x50>
10009b10:	464b      	mov	r3, r9
10009b12:	689b      	ldr	r3, [r3, #8]
10009b14:	4299      	cmp	r1, r3
10009b16:	d013      	beq.n	10009b40 <inv_register_data_cb+0x50>
10009b18:	464b      	mov	r3, r9
10009b1a:	2400      	movs	r4, #0
10009b1c:	3310      	adds	r3, #16
10009b1e:	e008      	b.n	10009b32 <inv_register_data_cb+0x42>
10009b20:	681d      	ldr	r5, [r3, #0]
10009b22:	4285      	cmp	r5, r0
10009b24:	d00c      	beq.n	10009b40 <inv_register_data_cb+0x50>
10009b26:	330c      	adds	r3, #12
                (inv_data_builder.process[kk].priority == priority)) {
10009b28:	001d      	movs	r5, r3
10009b2a:	3d08      	subs	r5, #8
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
        if ((inv_data_builder.process[kk].func == func) ||
10009b2c:	682d      	ldr	r5, [r5, #0]
10009b2e:	428d      	cmp	r5, r1
10009b30:	d006      	beq.n	10009b40 <inv_register_data_cb+0x50>
    inv_error_t result = INV_SUCCESS;
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
10009b32:	3401      	adds	r4, #1
10009b34:	42b4      	cmp	r4, r6
10009b36:	d1f3      	bne.n	10009b20 <inv_register_data_cb+0x30>
            return INV_ERROR_INVALID_PARAMETER;    //fixme give a warning
        }
    }

    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
10009b38:	2c13      	cmp	r4, #19
10009b3a:	dd1d      	ble.n	10009b78 <inv_register_data_cb+0x88>
        inv_data_builder.process[kk].priority = priority;
        inv_data_builder.process[kk].data_required = sensor_type;
        inv_data_builder.num_cb++;
    } else {
        MPL_LOGE("Unable to add feature callback as too many were already registered\n");
        result = INV_ERROR_MEMORY_EXAUSTED;
10009b3c:	200c      	movs	r0, #12
10009b3e:	e000      	b.n	10009b42 <inv_register_data_cb+0x52>
    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
        if ((inv_data_builder.process[kk].func == func) ||
                (inv_data_builder.process[kk].priority == priority)) {
            return INV_ERROR_INVALID_PARAMETER;    //fixme give a warning
10009b40:	2016      	movs	r0, #22
        MPL_LOGE("Unable to add feature callback as too many were already registered\n");
        result = INV_ERROR_MEMORY_EXAUSTED;
    }

    return result;
}
10009b42:	b003      	add	sp, #12
10009b44:	bc3c      	pop	{r2, r3, r4, r5}
10009b46:	4690      	mov	r8, r2
10009b48:	4699      	mov	r9, r3
10009b4a:	46a2      	mov	sl, r4
10009b4c:	46ab      	mov	fp, r5
10009b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009b50:	2300      	movs	r3, #0
10009b52:	469b      	mov	fp, r3
    }

    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
10009b54:	2e00      	cmp	r6, #0
10009b56:	d126      	bne.n	10009ba6 <inv_register_data_cb+0xb6>
10009b58:	9301      	str	r3, [sp, #4]
                        inv_data_builder.process[nn - 1];
                }
            }
        }
        // Add new callback
        inv_data_builder.process[kk].func = func;
10009b5a:	9b01      	ldr	r3, [sp, #4]
10009b5c:	465d      	mov	r5, fp
10009b5e:	469c      	mov	ip, r3
10009b60:	4465      	add	r5, ip
        inv_data_builder.process[kk].priority = priority;
        inv_data_builder.process[kk].data_required = sensor_type;
10009b62:	9b00      	ldr	r3, [sp, #0]
                        inv_data_builder.process[nn - 1];
                }
            }
        }
        // Add new callback
        inv_data_builder.process[kk].func = func;
10009b64:	00ad      	lsls	r5, r5, #2
10009b66:	444d      	add	r5, r9
        inv_data_builder.process[kk].priority = priority;
        inv_data_builder.process[kk].data_required = sensor_type;
10009b68:	60eb      	str	r3, [r5, #12]
        inv_data_builder.num_cb++;
10009b6a:	464b      	mov	r3, r9
10009b6c:	3601      	adds	r6, #1
                        inv_data_builder.process[nn - 1];
                }
            }
        }
        // Add new callback
        inv_data_builder.process[kk].func = func;
10009b6e:	6068      	str	r0, [r5, #4]
        inv_data_builder.process[kk].priority = priority;
10009b70:	60a9      	str	r1, [r5, #8]
        inv_data_builder.process[kk].data_required = sensor_type;
        inv_data_builder.num_cb++;
10009b72:	601e      	str	r6, [r3, #0]
*/
inv_error_t inv_register_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data),
    int priority, int sensor_type)
{
    inv_error_t result = INV_SUCCESS;
10009b74:	2000      	movs	r0, #0
10009b76:	e7e4      	b.n	10009b42 <inv_register_data_cb+0x52>
    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
10009b78:	464b      	mov	r3, r9
10009b7a:	689b      	ldr	r3, [r3, #8]
10009b7c:	4299      	cmp	r1, r3
10009b7e:	dd2f      	ble.n	10009be0 <inv_register_data_cb+0xf0>
10009b80:	464b      	mov	r3, r9
10009b82:	2200      	movs	r2, #0
10009b84:	3314      	adds	r3, #20
10009b86:	4693      	mov	fp, r2
10009b88:	e005      	b.n	10009b96 <inv_register_data_cb+0xa6>
10009b8a:	330c      	adds	r3, #12
                    (inv_data_builder.process[kk].priority < priority)) {
10009b8c:	001c      	movs	r4, r3
10009b8e:	3c0c      	subs	r4, #12
    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
10009b90:	6824      	ldr	r4, [r4, #0]
10009b92:	42a1      	cmp	r1, r4
10009b94:	dd07      	ble.n	10009ba6 <inv_register_data_cb+0xb6>
                    (inv_data_builder.process[kk].priority < priority)) {
                kk++;
10009b96:	2201      	movs	r2, #1
10009b98:	4694      	mov	ip, r2
10009b9a:	44e3      	add	fp, ip
    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
10009b9c:	45b3      	cmp	fp, r6
10009b9e:	d1f4      	bne.n	10009b8a <inv_register_data_cb+0x9a>
10009ba0:	465b      	mov	r3, fp
10009ba2:	005b      	lsls	r3, r3, #1
10009ba4:	e7d8      	b.n	10009b58 <inv_register_data_cb+0x68>
                    (inv_data_builder.process[kk].priority < priority)) {
                kk++;
            }
            if (kk != inv_data_builder.num_cb) {
                // We need to move the others
                for (nn = inv_data_builder.num_cb; nn > kk; --nn) {
10009ba6:	45b3      	cmp	fp, r6
10009ba8:	dafa      	bge.n	10009ba0 <inv_register_data_cb+0xb0>
10009baa:	0073      	lsls	r3, r6, #1
10009bac:	199b      	adds	r3, r3, r6
10009bae:	009b      	lsls	r3, r3, #2
10009bb0:	3b08      	subs	r3, #8
10009bb2:	444b      	add	r3, r9
10009bb4:	469a      	mov	sl, r3
10009bb6:	465b      	mov	r3, fp
10009bb8:	005b      	lsls	r3, r3, #1
10009bba:	001c      	movs	r4, r3
10009bbc:	445c      	add	r4, fp
10009bbe:	00a4      	lsls	r4, r4, #2
10009bc0:	3c08      	subs	r4, #8
10009bc2:	46a4      	mov	ip, r4
10009bc4:	9301      	str	r3, [sp, #4]
10009bc6:	44cc      	add	ip, r9
                    inv_data_builder.process[nn] =
10009bc8:	4654      	mov	r4, sl
10009bca:	4652      	mov	r2, sl
10009bcc:	340c      	adds	r4, #12
10009bce:	caa8      	ldmia	r2!, {r3, r5, r7}
10009bd0:	c4a8      	stmia	r4!, {r3, r5, r7}
10009bd2:	230c      	movs	r3, #12
10009bd4:	425b      	negs	r3, r3
10009bd6:	4698      	mov	r8, r3
10009bd8:	44c2      	add	sl, r8
                    (inv_data_builder.process[kk].priority < priority)) {
                kk++;
            }
            if (kk != inv_data_builder.num_cb) {
                // We need to move the others
                for (nn = inv_data_builder.num_cb; nn > kk; --nn) {
10009bda:	45d4      	cmp	ip, sl
10009bdc:	d1f4      	bne.n	10009bc8 <inv_register_data_cb+0xd8>
10009bde:	e7bc      	b.n	10009b5a <inv_register_data_cb+0x6a>
    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1) {
        kk = 0;
        if (inv_data_builder.num_cb != 0) {
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) &&
10009be0:	2300      	movs	r3, #0
10009be2:	469b      	mov	fp, r3
10009be4:	e7e1      	b.n	10009baa <inv_register_data_cb+0xba>
10009be6:	46c0      	nop			; (mov r8, r8)
10009be8:	1001a594 	.word	0x1001a594

10009bec <inv_unregister_data_cb>:
*            INV_ACCEL_NEW | INV_MAG_NEW, a
*            callback would be generated if there was new magnetomer data OR new accel data.
*/
inv_error_t inv_unregister_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data))
{
10009bec:	b5f0      	push	{r4, r5, r6, r7, lr}
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
10009bee:	4e17      	ldr	r6, [pc, #92]	; (10009c4c <inv_unregister_data_cb+0x60>)
10009bf0:	6835      	ldr	r5, [r6, #0]
10009bf2:	2d00      	cmp	r5, #0
10009bf4:	dd10      	ble.n	10009c18 <inv_unregister_data_cb+0x2c>
        if (inv_data_builder.process[kk].func == func) {
10009bf6:	6873      	ldr	r3, [r6, #4]
10009bf8:	4298      	cmp	r0, r3
10009bfa:	d025      	beq.n	10009c48 <inv_unregister_data_cb+0x5c>
10009bfc:	0032      	movs	r2, r6
10009bfe:	2300      	movs	r3, #0
10009c00:	3210      	adds	r2, #16
10009c02:	e006      	b.n	10009c12 <inv_unregister_data_cb+0x26>
10009c04:	320c      	adds	r2, #12
10009c06:	0014      	movs	r4, r2
10009c08:	3c0c      	subs	r4, #12
10009c0a:	6824      	ldr	r4, [r4, #0]
10009c0c:	4284      	cmp	r4, r0
10009c0e:	d005      	beq.n	10009c1c <inv_unregister_data_cb+0x30>
10009c10:	000b      	movs	r3, r1
inv_error_t inv_unregister_data_cb(
    inv_error_t (*func)(struct inv_sensor_cal_t *data))
{
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
10009c12:	1c59      	adds	r1, r3, #1
10009c14:	42a9      	cmp	r1, r5
10009c16:	d1f5      	bne.n	10009c04 <inv_unregister_data_cb+0x18>
            return INV_SUCCESS;
        }
    }

    return INV_SUCCESS;    // We did not find the callback
}
10009c18:	2000      	movs	r0, #0
10009c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009c1c:	3302      	adds	r3, #2
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
        if (inv_data_builder.process[kk].func == func) {
            // Delete this callback
            for (nn = kk + 1; nn < inv_data_builder.num_cb; ++nn) {
10009c1e:	42ab      	cmp	r3, r5
10009c20:	da0f      	bge.n	10009c42 <inv_unregister_data_cb+0x56>
10009c22:	005a      	lsls	r2, r3, #1
10009c24:	0069      	lsls	r1, r5, #1
10009c26:	18d3      	adds	r3, r2, r3
10009c28:	1949      	adds	r1, r1, r5
10009c2a:	009b      	lsls	r3, r3, #2
10009c2c:	0089      	lsls	r1, r1, #2
10009c2e:	3b08      	subs	r3, #8
10009c30:	3908      	subs	r1, #8
10009c32:	18f3      	adds	r3, r6, r3
10009c34:	1871      	adds	r1, r6, r1
                inv_data_builder.process[nn - 1] =
10009c36:	001a      	movs	r2, r3
10009c38:	320c      	adds	r2, #12
10009c3a:	ca91      	ldmia	r2!, {r0, r4, r7}
10009c3c:	c391      	stmia	r3!, {r0, r4, r7}
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
        if (inv_data_builder.process[kk].func == func) {
            // Delete this callback
            for (nn = kk + 1; nn < inv_data_builder.num_cb; ++nn) {
10009c3e:	428b      	cmp	r3, r1
10009c40:	d1f9      	bne.n	10009c36 <inv_unregister_data_cb+0x4a>
                inv_data_builder.process[nn - 1] =
                    inv_data_builder.process[nn];
            }
            inv_data_builder.num_cb--;
10009c42:	3d01      	subs	r5, #1
10009c44:	6035      	str	r5, [r6, #0]
            return INV_SUCCESS;
10009c46:	e7e7      	b.n	10009c18 <inv_unregister_data_cb+0x2c>
    inv_error_t (*func)(struct inv_sensor_cal_t *data))
{
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk) {
        if (inv_data_builder.process[kk].func == func) {
10009c48:	2301      	movs	r3, #1
10009c4a:	e7e8      	b.n	10009c1e <inv_unregister_data_cb+0x32>
10009c4c:	1001a594 	.word	0x1001a594

10009c50 <inv_get_accel_set>:
 * @param[out] data Accel Data where 1g = 2^16
 * @param[out] accuracy Accuracy 0 being not accurate, and 3 being most accurate.
 * @param[out] timestamp The timestamp of the data sample.
*/
void inv_get_accel_set(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
10009c50:	b570      	push	{r4, r5, r6, lr}
10009c52:	000c      	movs	r4, r1
10009c54:	0015      	movs	r5, r2
    if (data != NULL) {
10009c56:	2800      	cmp	r0, #0
10009c58:	d004      	beq.n	10009c64 <inv_get_accel_set+0x14>
        memcpy(data, sensors.accel.calibrated, sizeof(sensors.accel.calibrated));
10009c5a:	4908      	ldr	r1, [pc, #32]	; (10009c7c <inv_get_accel_set+0x2c>)
10009c5c:	220c      	movs	r2, #12
10009c5e:	315c      	adds	r1, #92	; 0x5c
10009c60:	4b07      	ldr	r3, [pc, #28]	; (10009c80 <inv_get_accel_set+0x30>)
10009c62:	4798      	blx	r3
    }
    if (timestamp != NULL) {
10009c64:	2d00      	cmp	r5, #0
10009c66:	d002      	beq.n	10009c6e <inv_get_accel_set+0x1e>
        *timestamp = sensors.accel.timestamp;
10009c68:	4b04      	ldr	r3, [pc, #16]	; (10009c7c <inv_get_accel_set+0x2c>)
10009c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
10009c6c:	602b      	str	r3, [r5, #0]
    }
    if (accuracy != NULL) {
10009c6e:	2c00      	cmp	r4, #0
10009c70:	d002      	beq.n	10009c78 <inv_get_accel_set+0x28>
        *accuracy = sensors.accel.accuracy;
10009c72:	4b02      	ldr	r3, [pc, #8]	; (10009c7c <inv_get_accel_set+0x2c>)
10009c74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
10009c76:	7023      	strb	r3, [r4, #0]
    }
}
10009c78:	bd70      	pop	{r4, r5, r6, pc}
10009c7a:	46c0      	nop			; (mov r8, r8)
10009c7c:	1001a6d4 	.word	0x1001a6d4
10009c80:	10017d8f 	.word	0x10017d8f

10009c84 <inv_get_gyro>:

/** Get's latest gyro data.
* @param[out] gyro Gyro Data, Length 3. 1 dps = 2^16.
*/
void inv_get_gyro(long *gyro)
{
10009c84:	b510      	push	{r4, lr}
    memcpy(gyro, sensors.gyro.calibrated, sizeof(sensors.gyro.calibrated));
10009c86:	4903      	ldr	r1, [pc, #12]	; (10009c94 <inv_get_gyro+0x10>)
10009c88:	220c      	movs	r2, #12
10009c8a:	3118      	adds	r1, #24
10009c8c:	4b02      	ldr	r3, [pc, #8]	; (10009c98 <inv_get_gyro+0x14>)
10009c8e:	4798      	blx	r3
}
10009c90:	bd10      	pop	{r4, pc}
10009c92:	46c0      	nop			; (mov r8, r8)
10009c94:	1001a6d4 	.word	0x1001a6d4
10009c98:	10017d8f 	.word	0x10017d8f

10009c9c <inv_reset_compass_soft_iron_matrix>:
}

/** This subroutine resets the the soft iron transformation to unity matrix and
 * disable the soft iron transformation process by default.
*/
void inv_reset_compass_soft_iron_matrix(void)  {
10009c9c:	b510      	push	{r4, lr}
10009c9e:	4c15      	ldr	r4, [pc, #84]	; (10009cf4 <inv_reset_compass_soft_iron_matrix+0x58>)
    int i;
    for (i=0; i<9; i++) {
        sensors.soft_iron.matrix_f[i] = 0.0f;
10009ca0:	2200      	movs	r2, #0
10009ca2:	0023      	movs	r3, r4
10009ca4:	0021      	movs	r1, r4
10009ca6:	336d      	adds	r3, #109	; 0x6d
10009ca8:	3191      	adds	r1, #145	; 0x91
10009caa:	33ff      	adds	r3, #255	; 0xff
10009cac:	31ff      	adds	r1, #255	; 0xff
10009cae:	c304      	stmia	r3!, {r2}
/** This subroutine resets the the soft iron transformation to unity matrix and
 * disable the soft iron transformation process by default.
*/
void inv_reset_compass_soft_iron_matrix(void)  {
    int i;
    for (i=0; i<9; i++) {
10009cb0:	428b      	cmp	r3, r1
10009cb2:	d1fc      	bne.n	10009cae <inv_reset_compass_soft_iron_matrix+0x12>
        sensors.soft_iron.matrix_f[i] = 0.0f;
    }

    memset(&sensors.soft_iron.matrix_d,0,sizeof(sensors.soft_iron.matrix_d));
10009cb4:	0020      	movs	r0, r4
10009cb6:	3049      	adds	r0, #73	; 0x49
10009cb8:	2224      	movs	r2, #36	; 0x24
10009cba:	2100      	movs	r1, #0
10009cbc:	4b0e      	ldr	r3, [pc, #56]	; (10009cf8 <inv_reset_compass_soft_iron_matrix+0x5c>)
10009cbe:	30ff      	adds	r0, #255	; 0xff
10009cc0:	4798      	blx	r3

    for (i=0; i<3; i++)  {
        // set the floating point matrix
        sensors.soft_iron.matrix_f[i*4] = 1.0;
10009cc2:	22fe      	movs	r2, #254	; 0xfe
10009cc4:	23b6      	movs	r3, #182	; 0xb6
10009cc6:	0592      	lsls	r2, r2, #22
10009cc8:	005b      	lsls	r3, r3, #1
10009cca:	50e2      	str	r2, [r4, r3]
        // set the fixed point matrix
        sensors.soft_iron.matrix_d[i*4] = ROT_MATRIX_SCALE_LONG;
10009ccc:	21a4      	movs	r1, #164	; 0xa4
10009cce:	2380      	movs	r3, #128	; 0x80
10009cd0:	0049      	lsls	r1, r1, #1
10009cd2:	05db      	lsls	r3, r3, #23
10009cd4:	5063      	str	r3, [r4, r1]

    memset(&sensors.soft_iron.matrix_d,0,sizeof(sensors.soft_iron.matrix_d));

    for (i=0; i<3; i++)  {
        // set the floating point matrix
        sensors.soft_iron.matrix_f[i*4] = 1.0;
10009cd6:	3134      	adds	r1, #52	; 0x34
10009cd8:	5062      	str	r2, [r4, r1]
        // set the fixed point matrix
        sensors.soft_iron.matrix_d[i*4] = ROT_MATRIX_SCALE_LONG;
10009cda:	3924      	subs	r1, #36	; 0x24
10009cdc:	5063      	str	r3, [r4, r1]

    memset(&sensors.soft_iron.matrix_d,0,sizeof(sensors.soft_iron.matrix_d));

    for (i=0; i<3; i++)  {
        // set the floating point matrix
        sensors.soft_iron.matrix_f[i*4] = 1.0;
10009cde:	3134      	adds	r1, #52	; 0x34
10009ce0:	5062      	str	r2, [r4, r1]
        // set the fixed point matrix
        sensors.soft_iron.matrix_d[i*4] = ROT_MATRIX_SCALE_LONG;
10009ce2:	22b4      	movs	r2, #180	; 0xb4
10009ce4:	0052      	lsls	r2, r2, #1
10009ce6:	50a3      	str	r3, [r4, r2]
}

/** This subroutine disables the the soft iron transformation process.
*/
void inv_disable_compass_soft_iron_matrix(void)   {
    sensors.soft_iron.enable = 0;
10009ce8:	23c8      	movs	r3, #200	; 0xc8
10009cea:	2200      	movs	r2, #0
10009cec:	005b      	lsls	r3, r3, #1
10009cee:	50e2      	str	r2, [r4, r3]
        // set the fixed point matrix
        sensors.soft_iron.matrix_d[i*4] = ROT_MATRIX_SCALE_LONG;
    }

    inv_disable_compass_soft_iron_matrix();
}
10009cf0:	bd10      	pop	{r4, pc}
10009cf2:	46c0      	nop			; (mov r8, r8)
10009cf4:	1001a6d4 	.word	0x1001a6d4
10009cf8:	10017dcb 	.word	0x10017dcb

10009cfc <inv_init_data_builder>:
/** Initialize the data builder
*/
inv_error_t inv_init_data_builder(void)
{
    /* TODO: Hardcode temperature scale/offset here. */
    memset(&inv_data_builder, 0, sizeof(inv_data_builder));
10009cfc:	22a0      	movs	r2, #160	; 0xa0
}

/** Initialize the data builder
*/
inv_error_t inv_init_data_builder(void)
{
10009cfe:	b510      	push	{r4, lr}
    /* TODO: Hardcode temperature scale/offset here. */
    memset(&inv_data_builder, 0, sizeof(inv_data_builder));
10009d00:	0052      	lsls	r2, r2, #1
10009d02:	4c09      	ldr	r4, [pc, #36]	; (10009d28 <inv_init_data_builder+0x2c>)
10009d04:	2100      	movs	r1, #0
10009d06:	4809      	ldr	r0, [pc, #36]	; (10009d2c <inv_init_data_builder+0x30>)
10009d08:	47a0      	blx	r4
    memset(&sensors, 0, sizeof(sensors));
10009d0a:	22cc      	movs	r2, #204	; 0xcc
10009d0c:	2100      	movs	r1, #0
10009d0e:	0052      	lsls	r2, r2, #1
10009d10:	4807      	ldr	r0, [pc, #28]	; (10009d30 <inv_init_data_builder+0x34>)
10009d12:	47a0      	blx	r4

    // disable the soft iron transform process
    inv_reset_compass_soft_iron_matrix();
10009d14:	4b07      	ldr	r3, [pc, #28]	; (10009d34 <inv_init_data_builder+0x38>)
10009d16:	4798      	blx	r3

    return inv_register_load_store(inv_db_load_func, inv_db_save_func,
10009d18:	4b07      	ldr	r3, [pc, #28]	; (10009d38 <inv_init_data_builder+0x3c>)
10009d1a:	2248      	movs	r2, #72	; 0x48
10009d1c:	4907      	ldr	r1, [pc, #28]	; (10009d3c <inv_init_data_builder+0x40>)
10009d1e:	4c08      	ldr	r4, [pc, #32]	; (10009d40 <inv_init_data_builder+0x44>)
10009d20:	4808      	ldr	r0, [pc, #32]	; (10009d44 <inv_init_data_builder+0x48>)
10009d22:	47a0      	blx	r4
                                   sizeof(inv_data_builder.save),
                                   INV_DB_SAVE_KEY);
}
10009d24:	bd10      	pop	{r4, pc}
10009d26:	46c0      	nop			; (mov r8, r8)
10009d28:	10017dcb 	.word	0x10017dcb
10009d2c:	1001a594 	.word	0x1001a594
10009d30:	1001a6d4 	.word	0x1001a6d4
10009d34:	10009c9d 	.word	0x10009c9d
10009d38:	0000d093 	.word	0x0000d093
10009d3c:	10009921 	.word	0x10009921
10009d40:	1000a9fd 	.word	0x1000a9fd
10009d44:	10009939 	.word	0x10009939

10009d48 <inv_set_message>:
* @param[in] level Level of the messages. It starts at 0, and may increase
*            in the future to allow more messages if the bit storage runs out.
*/
void inv_set_message(long set, long clear, int level)
{
    if (level == 0) {
10009d48:	2a00      	cmp	r2, #0
10009d4a:	d104      	bne.n	10009d56 <inv_set_message+0xe>
        mh.message &= ~clear;
        mh.message |= set;
10009d4c:	4a02      	ldr	r2, [pc, #8]	; (10009d58 <inv_set_message+0x10>)
10009d4e:	6813      	ldr	r3, [r2, #0]
10009d50:	438b      	bics	r3, r1
10009d52:	4318      	orrs	r0, r3
10009d54:	6010      	str	r0, [r2, #0]
    }
}
10009d56:	4770      	bx	lr
10009d58:	1001a86c 	.word	0x1001a86c

10009d5c <inv_get_gyro_sum_of_sqr>:
 *          (1 degree per second)^2 = 2^6 = 2^GYRO_MAG_SQR_SHIFT.
 * @param[in] gyro Gyro data scaled with 1 dps = 2^16
 *  @return the computed magnitude squared output of the gyroscope.
 */
unsigned long inv_get_gyro_sum_of_sqr(const long *gyro)
{
10009d5c:	0001      	movs	r1, r0
10009d5e:	0002      	movs	r2, r0
    unsigned long gmag = 0;
10009d60:	2000      	movs	r0, #0
10009d62:	310c      	adds	r1, #12
    long temp;
    int kk;

    for (kk = 0; kk < 3; ++kk) {
        temp = gyro[kk] >> (16 - (GYRO_MAG_SQR_SHIFT / 2));
10009d64:	ca08      	ldmia	r2!, {r3}
10009d66:	135b      	asrs	r3, r3, #13
        gmag += temp * temp;
10009d68:	435b      	muls	r3, r3
10009d6a:	18c0      	adds	r0, r0, r3
{
    unsigned long gmag = 0;
    long temp;
    int kk;

    for (kk = 0; kk < 3; ++kk) {
10009d6c:	4291      	cmp	r1, r2
10009d6e:	d1f9      	bne.n	10009d64 <inv_get_gyro_sum_of_sqr+0x8>
        temp = gyro[kk] >> (16 - (GYRO_MAG_SQR_SHIFT / 2));
        gmag += temp * temp;
    }

    return gmag;
}
10009d70:	4770      	bx	lr
10009d72:	46c0      	nop			; (mov r8, r8)

10009d74 <inv_q29_mult>:
 * @param[in] a
 * @param[in] b
 * @return ((long long)a*b)>>29
*/
long inv_q29_mult(long a, long b)
{
10009d74:	000a      	movs	r2, r1
10009d76:	b510      	push	{r4, lr}
#else
    long long temp;
    long result;
    temp = (long long)a * b;
    result = (long)(temp >> 29);
    return result;
10009d78:	17d3      	asrs	r3, r2, #31
10009d7a:	4c03      	ldr	r4, [pc, #12]	; (10009d88 <inv_q29_mult+0x14>)
10009d7c:	17c1      	asrs	r1, r0, #31
10009d7e:	47a0      	blx	r4
10009d80:	00c9      	lsls	r1, r1, #3
10009d82:	0f40      	lsrs	r0, r0, #29
10009d84:	4308      	orrs	r0, r1
#endif
}
10009d86:	bd10      	pop	{r4, pc}
10009d88:	10014e99 	.word	0x10014e99

10009d8c <inv_q30_mult>:
 * @param[in] a
 * @param[in] b
 * @return ((long long)a*b)>>30
*/
long inv_q30_mult(long a, long b)
{
10009d8c:	000a      	movs	r2, r1
10009d8e:	b510      	push	{r4, lr}
#else
    long long temp;
    long result;
    temp = (long long)a * b;
    result = (long)(temp >> 30);
    return result;
10009d90:	17d3      	asrs	r3, r2, #31
10009d92:	4c03      	ldr	r4, [pc, #12]	; (10009da0 <inv_q30_mult+0x14>)
10009d94:	17c1      	asrs	r1, r0, #31
10009d96:	47a0      	blx	r4
10009d98:	0089      	lsls	r1, r1, #2
10009d9a:	0f80      	lsrs	r0, r0, #30
10009d9c:	4308      	orrs	r0, r1
#endif
}
10009d9e:	bd10      	pop	{r4, pc}
10009da0:	10014e99 	.word	0x10014e99

10009da4 <inv_q_mult>:
*            to 2^30
* @param[out] qProd Product after quaternion multiply. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_mult(const long *q1, const long *q2, long *qProd)
{
10009da4:	b5f0      	push	{r4, r5, r6, r7, lr}
10009da6:	4647      	mov	r7, r8
10009da8:	000e      	movs	r6, r1
10009daa:	b480      	push	{r7}
    INVENSENSE_FUNC_START;
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
10009dac:	6803      	ldr	r3, [r0, #0]
*            to 2^30
* @param[out] qProd Product after quaternion multiply. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_mult(const long *q1, const long *q2, long *qProd)
{
10009dae:	0005      	movs	r5, r0
    INVENSENSE_FUNC_START;
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
10009db0:	17d9      	asrs	r1, r3, #31
10009db2:	6833      	ldr	r3, [r6, #0]
10009db4:	4c5e      	ldr	r4, [pc, #376]	; (10009f30 <inv_q_mult+0x18c>)
*            to 2^30
* @param[out] qProd Product after quaternion multiply. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_mult(const long *q1, const long *q2, long *qProd)
{
10009db6:	0017      	movs	r7, r2
    INVENSENSE_FUNC_START;
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
10009db8:	6800      	ldr	r0, [r0, #0]
10009dba:	6832      	ldr	r2, [r6, #0]
10009dbc:	17db      	asrs	r3, r3, #31
10009dbe:	47a0      	blx	r4
10009dc0:	0089      	lsls	r1, r1, #2
10009dc2:	0f83      	lsrs	r3, r0, #30
10009dc4:	430b      	orrs	r3, r1
10009dc6:	4698      	mov	r8, r3
10009dc8:	686b      	ldr	r3, [r5, #4]
10009dca:	6872      	ldr	r2, [r6, #4]
10009dcc:	17d9      	asrs	r1, r3, #31
10009dce:	6873      	ldr	r3, [r6, #4]
10009dd0:	6868      	ldr	r0, [r5, #4]
10009dd2:	17db      	asrs	r3, r3, #31
10009dd4:	47a0      	blx	r4
10009dd6:	4643      	mov	r3, r8
10009dd8:	0089      	lsls	r1, r1, #2
10009dda:	0f80      	lsrs	r0, r0, #30
10009ddc:	4308      	orrs	r0, r1
10009dde:	1a1b      	subs	r3, r3, r0
10009de0:	4698      	mov	r8, r3
10009de2:	68ab      	ldr	r3, [r5, #8]
10009de4:	68b2      	ldr	r2, [r6, #8]
10009de6:	17d9      	asrs	r1, r3, #31
10009de8:	68b3      	ldr	r3, [r6, #8]
10009dea:	68a8      	ldr	r0, [r5, #8]
10009dec:	17db      	asrs	r3, r3, #31
10009dee:	47a0      	blx	r4
10009df0:	4643      	mov	r3, r8
10009df2:	0089      	lsls	r1, r1, #2
10009df4:	0f80      	lsrs	r0, r0, #30
10009df6:	4308      	orrs	r0, r1
10009df8:	1a1b      	subs	r3, r3, r0
10009dfa:	4698      	mov	r8, r3
10009dfc:	68eb      	ldr	r3, [r5, #12]
10009dfe:	68f2      	ldr	r2, [r6, #12]
10009e00:	17d9      	asrs	r1, r3, #31
10009e02:	68f3      	ldr	r3, [r6, #12]
10009e04:	68e8      	ldr	r0, [r5, #12]
10009e06:	17db      	asrs	r3, r3, #31
10009e08:	47a0      	blx	r4
10009e0a:	4643      	mov	r3, r8
10009e0c:	0089      	lsls	r1, r1, #2
10009e0e:	0f80      	lsrs	r0, r0, #30
10009e10:	4308      	orrs	r0, r1
10009e12:	1a18      	subs	r0, r3, r0
10009e14:	6038      	str	r0, [r7, #0]
               inv_q30_mult(q1[2], q2[2]) - inv_q30_mult(q1[3], q2[3]);

    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
10009e16:	686b      	ldr	r3, [r5, #4]
10009e18:	6832      	ldr	r2, [r6, #0]
10009e1a:	17d9      	asrs	r1, r3, #31
10009e1c:	6833      	ldr	r3, [r6, #0]
10009e1e:	6868      	ldr	r0, [r5, #4]
10009e20:	17db      	asrs	r3, r3, #31
10009e22:	47a0      	blx	r4
10009e24:	0089      	lsls	r1, r1, #2
10009e26:	0f83      	lsrs	r3, r0, #30
10009e28:	430b      	orrs	r3, r1
10009e2a:	4698      	mov	r8, r3
10009e2c:	682b      	ldr	r3, [r5, #0]
10009e2e:	6872      	ldr	r2, [r6, #4]
10009e30:	17d9      	asrs	r1, r3, #31
10009e32:	6873      	ldr	r3, [r6, #4]
10009e34:	6828      	ldr	r0, [r5, #0]
10009e36:	17db      	asrs	r3, r3, #31
10009e38:	47a0      	blx	r4
10009e3a:	68ab      	ldr	r3, [r5, #8]
10009e3c:	0089      	lsls	r1, r1, #2
10009e3e:	0f80      	lsrs	r0, r0, #30
10009e40:	4308      	orrs	r0, r1
10009e42:	17d9      	asrs	r1, r3, #31
10009e44:	68f3      	ldr	r3, [r6, #12]
10009e46:	4480      	add	r8, r0
10009e48:	68f2      	ldr	r2, [r6, #12]
10009e4a:	68a8      	ldr	r0, [r5, #8]
10009e4c:	17db      	asrs	r3, r3, #31
10009e4e:	47a0      	blx	r4
10009e50:	68eb      	ldr	r3, [r5, #12]
10009e52:	0089      	lsls	r1, r1, #2
10009e54:	0f80      	lsrs	r0, r0, #30
10009e56:	4308      	orrs	r0, r1
10009e58:	17d9      	asrs	r1, r3, #31
10009e5a:	68b3      	ldr	r3, [r6, #8]
10009e5c:	68b2      	ldr	r2, [r6, #8]
10009e5e:	4480      	add	r8, r0
10009e60:	17db      	asrs	r3, r3, #31
10009e62:	68e8      	ldr	r0, [r5, #12]
10009e64:	47a0      	blx	r4
10009e66:	4643      	mov	r3, r8
10009e68:	0089      	lsls	r1, r1, #2
10009e6a:	0f80      	lsrs	r0, r0, #30
10009e6c:	4308      	orrs	r0, r1
10009e6e:	1a18      	subs	r0, r3, r0
10009e70:	6078      	str	r0, [r7, #4]
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);

    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
10009e72:	682b      	ldr	r3, [r5, #0]
10009e74:	68b2      	ldr	r2, [r6, #8]
10009e76:	17d9      	asrs	r1, r3, #31
10009e78:	68b3      	ldr	r3, [r6, #8]
10009e7a:	6828      	ldr	r0, [r5, #0]
10009e7c:	17db      	asrs	r3, r3, #31
10009e7e:	47a0      	blx	r4
10009e80:	0089      	lsls	r1, r1, #2
10009e82:	0f83      	lsrs	r3, r0, #30
10009e84:	430b      	orrs	r3, r1
10009e86:	4698      	mov	r8, r3
10009e88:	686b      	ldr	r3, [r5, #4]
10009e8a:	68f2      	ldr	r2, [r6, #12]
10009e8c:	17d9      	asrs	r1, r3, #31
10009e8e:	68f3      	ldr	r3, [r6, #12]
10009e90:	6868      	ldr	r0, [r5, #4]
10009e92:	17db      	asrs	r3, r3, #31
10009e94:	47a0      	blx	r4
10009e96:	4643      	mov	r3, r8
10009e98:	0089      	lsls	r1, r1, #2
10009e9a:	0f80      	lsrs	r0, r0, #30
10009e9c:	4308      	orrs	r0, r1
10009e9e:	1a1b      	subs	r3, r3, r0
10009ea0:	4698      	mov	r8, r3
10009ea2:	68ab      	ldr	r3, [r5, #8]
10009ea4:	6832      	ldr	r2, [r6, #0]
10009ea6:	17d9      	asrs	r1, r3, #31
10009ea8:	6833      	ldr	r3, [r6, #0]
10009eaa:	68a8      	ldr	r0, [r5, #8]
10009eac:	17db      	asrs	r3, r3, #31
10009eae:	47a0      	blx	r4
10009eb0:	68eb      	ldr	r3, [r5, #12]
10009eb2:	0089      	lsls	r1, r1, #2
10009eb4:	0f80      	lsrs	r0, r0, #30
10009eb6:	4308      	orrs	r0, r1
10009eb8:	17d9      	asrs	r1, r3, #31
10009eba:	6873      	ldr	r3, [r6, #4]
10009ebc:	6872      	ldr	r2, [r6, #4]
10009ebe:	4480      	add	r8, r0
10009ec0:	17db      	asrs	r3, r3, #31
10009ec2:	68e8      	ldr	r0, [r5, #12]
10009ec4:	47a0      	blx	r4
10009ec6:	0089      	lsls	r1, r1, #2
10009ec8:	0f80      	lsrs	r0, r0, #30
10009eca:	4308      	orrs	r0, r1
10009ecc:	4440      	add	r0, r8
10009ece:	60b8      	str	r0, [r7, #8]
               inv_q30_mult(q1[2], q2[0]) + inv_q30_mult(q1[3], q2[1]);

    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
10009ed0:	68b3      	ldr	r3, [r6, #8]
10009ed2:	17d9      	asrs	r1, r3, #31
10009ed4:	686b      	ldr	r3, [r5, #4]
10009ed6:	686a      	ldr	r2, [r5, #4]
10009ed8:	17db      	asrs	r3, r3, #31
10009eda:	68b0      	ldr	r0, [r6, #8]
10009edc:	47a0      	blx	r4
10009ede:	0089      	lsls	r1, r1, #2
10009ee0:	0f83      	lsrs	r3, r0, #30
10009ee2:	430b      	orrs	r3, r1
10009ee4:	4698      	mov	r8, r3
10009ee6:	682b      	ldr	r3, [r5, #0]
10009ee8:	68f2      	ldr	r2, [r6, #12]
10009eea:	17d9      	asrs	r1, r3, #31
10009eec:	68f3      	ldr	r3, [r6, #12]
10009eee:	6828      	ldr	r0, [r5, #0]
10009ef0:	17db      	asrs	r3, r3, #31
10009ef2:	47a0      	blx	r4
10009ef4:	6873      	ldr	r3, [r6, #4]
10009ef6:	0089      	lsls	r1, r1, #2
10009ef8:	0f80      	lsrs	r0, r0, #30
10009efa:	4308      	orrs	r0, r1
10009efc:	17d9      	asrs	r1, r3, #31
10009efe:	68ab      	ldr	r3, [r5, #8]
10009f00:	68aa      	ldr	r2, [r5, #8]
10009f02:	4480      	add	r8, r0
10009f04:	17db      	asrs	r3, r3, #31
10009f06:	6870      	ldr	r0, [r6, #4]
10009f08:	47a0      	blx	r4
10009f0a:	4643      	mov	r3, r8
10009f0c:	0089      	lsls	r1, r1, #2
10009f0e:	0f80      	lsrs	r0, r0, #30
10009f10:	4308      	orrs	r0, r1
10009f12:	68ea      	ldr	r2, [r5, #12]
10009f14:	1a1b      	subs	r3, r3, r0
10009f16:	6830      	ldr	r0, [r6, #0]
10009f18:	4698      	mov	r8, r3
10009f1a:	17c1      	asrs	r1, r0, #31
10009f1c:	17d3      	asrs	r3, r2, #31
10009f1e:	47a0      	blx	r4
10009f20:	0089      	lsls	r1, r1, #2
10009f22:	0f80      	lsrs	r0, r0, #30
10009f24:	4308      	orrs	r0, r1
10009f26:	4440      	add	r0, r8
10009f28:	60f8      	str	r0, [r7, #12]
               inv_q30_mult(q1[2], q2[1]) + inv_q30_mult(q1[3], q2[0]);
}
10009f2a:	bc04      	pop	{r2}
10009f2c:	4690      	mov	r8, r2
10009f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009f30:	10014e99 	.word	0x10014e99

10009f34 <inv_compass_angle>:
 * @param[in] grav Gravity Vector (Body Frame), length 3
 * @param[in] quat Quaternion, Length 4
 * @return Angle Cross Product makes after quaternion rotation.
 */
float inv_compass_angle(const long *compass, const long *grav, const long *quat)
{
10009f34:	b5f0      	push	{r4, r5, r6, r7, lr}
10009f36:	465f      	mov	r7, fp
10009f38:	4656      	mov	r6, sl
10009f3a:	464d      	mov	r5, r9
10009f3c:	4644      	mov	r4, r8
    long cgcross[4], q1[4], q2[4], qi[4];
    float angW;

    // Compass cross Gravity
    cgcross[0] = 0L;
10009f3e:	2300      	movs	r3, #0
 * @param[in] grav Gravity Vector (Body Frame), length 3
 * @param[in] quat Quaternion, Length 4
 * @return Angle Cross Product makes after quaternion rotation.
 */
float inv_compass_angle(const long *compass, const long *grav, const long *quat)
{
10009f40:	4689      	mov	r9, r1
10009f42:	b4f0      	push	{r4, r5, r6, r7}
10009f44:	b097      	sub	sp, #92	; 0x5c
    long cgcross[4], q1[4], q2[4], qi[4];
    float angW;

    // Compass cross Gravity
    cgcross[0] = 0L;
10009f46:	9306      	str	r3, [sp, #24]
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
10009f48:	6843      	ldr	r3, [r0, #4]
 * @param[in] grav Gravity Vector (Body Frame), length 3
 * @param[in] quat Quaternion, Length 4
 * @return Angle Cross Product makes after quaternion rotation.
 */
float inv_compass_angle(const long *compass, const long *grav, const long *quat)
{
10009f4a:	0007      	movs	r7, r0
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
10009f4c:	469a      	mov	sl, r3
10009f4e:	17db      	asrs	r3, r3, #31
10009f50:	0019      	movs	r1, r3
10009f52:	464b      	mov	r3, r9
10009f54:	464c      	mov	r4, r9
10009f56:	689b      	ldr	r3, [r3, #8]
 * @param[in] grav Gravity Vector (Body Frame), length 3
 * @param[in] quat Quaternion, Length 4
 * @return Angle Cross Product makes after quaternion rotation.
 */
float inv_compass_angle(const long *compass, const long *grav, const long *quat)
{
10009f58:	0015      	movs	r5, r2
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
10009f5a:	17da      	asrs	r2, r3, #31
10009f5c:	0010      	movs	r0, r2
10009f5e:	6864      	ldr	r4, [r4, #4]
10009f60:	68ba      	ldr	r2, [r7, #8]
10009f62:	46a3      	mov	fp, r4
10009f64:	4690      	mov	r8, r2
10009f66:	17e4      	asrs	r4, r4, #31
10009f68:	17d2      	asrs	r2, r2, #31
10009f6a:	9200      	str	r2, [sp, #0]
10009f6c:	9401      	str	r4, [sp, #4]
    long cgcross[4], q1[4], q2[4], qi[4];
    float angW;

    // Compass cross Gravity
    cgcross[0] = 0L;
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
10009f6e:	001a      	movs	r2, r3
10009f70:	4c3b      	ldr	r4, [pc, #236]	; (1000a060 <inv_compass_angle+0x12c>)
10009f72:	9303      	str	r3, [sp, #12]
10009f74:	9004      	str	r0, [sp, #16]
10009f76:	0003      	movs	r3, r0
10009f78:	9102      	str	r1, [sp, #8]
10009f7a:	4650      	mov	r0, sl
10009f7c:	47a0      	blx	r4
10009f7e:	0089      	lsls	r1, r1, #2
10009f80:	0f86      	lsrs	r6, r0, #30
10009f82:	9b01      	ldr	r3, [sp, #4]
10009f84:	430e      	orrs	r6, r1
10009f86:	465a      	mov	r2, fp
10009f88:	4640      	mov	r0, r8
10009f8a:	9900      	ldr	r1, [sp, #0]
10009f8c:	47a0      	blx	r4
10009f8e:	0089      	lsls	r1, r1, #2
10009f90:	0f80      	lsrs	r0, r0, #30
10009f92:	4308      	orrs	r0, r1
10009f94:	1a36      	subs	r6, r6, r0
10009f96:	9607      	str	r6, [sp, #28]
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
10009f98:	464e      	mov	r6, r9
10009f9a:	6836      	ldr	r6, [r6, #0]
10009f9c:	683f      	ldr	r7, [r7, #0]
10009f9e:	17f1      	asrs	r1, r6, #31
10009fa0:	4689      	mov	r9, r1
10009fa2:	17f9      	asrs	r1, r7, #31
    float angW;

    // Compass cross Gravity
    cgcross[0] = 0L;
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
    cgcross[2] = inv_q30_mult(compass[2], grav[0]) - inv_q30_mult(compass[0], grav[2]);
10009fa4:	4642      	mov	r2, r8
10009fa6:	9b00      	ldr	r3, [sp, #0]
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
10009fa8:	9105      	str	r1, [sp, #20]
    float angW;

    // Compass cross Gravity
    cgcross[0] = 0L;
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
    cgcross[2] = inv_q30_mult(compass[2], grav[0]) - inv_q30_mult(compass[0], grav[2]);
10009faa:	0030      	movs	r0, r6
10009fac:	4649      	mov	r1, r9
10009fae:	47a0      	blx	r4
10009fb0:	0f82      	lsrs	r2, r0, #30
10009fb2:	0010      	movs	r0, r2
10009fb4:	0089      	lsls	r1, r1, #2
10009fb6:	4308      	orrs	r0, r1
10009fb8:	4680      	mov	r8, r0
10009fba:	9a03      	ldr	r2, [sp, #12]
10009fbc:	9b04      	ldr	r3, [sp, #16]
10009fbe:	0038      	movs	r0, r7
10009fc0:	17f9      	asrs	r1, r7, #31
10009fc2:	47a0      	blx	r4
10009fc4:	4642      	mov	r2, r8
10009fc6:	0089      	lsls	r1, r1, #2
10009fc8:	0f80      	lsrs	r0, r0, #30
10009fca:	4308      	orrs	r0, r1
10009fcc:	1a10      	subs	r0, r2, r0
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);
10009fce:	9b01      	ldr	r3, [sp, #4]
    float angW;

    // Compass cross Gravity
    cgcross[0] = 0L;
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
    cgcross[2] = inv_q30_mult(compass[2], grav[0]) - inv_q30_mult(compass[0], grav[2]);
10009fd0:	9008      	str	r0, [sp, #32]
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);
10009fd2:	465a      	mov	r2, fp
10009fd4:	0038      	movs	r0, r7
10009fd6:	9905      	ldr	r1, [sp, #20]
10009fd8:	47a0      	blx	r4
10009fda:	0089      	lsls	r1, r1, #2
10009fdc:	0f87      	lsrs	r7, r0, #30
10009fde:	9b02      	ldr	r3, [sp, #8]
10009fe0:	430f      	orrs	r7, r1
10009fe2:	4652      	mov	r2, sl
10009fe4:	0030      	movs	r0, r6
10009fe6:	4649      	mov	r1, r9
10009fe8:	47a0      	blx	r4
10009fea:	0089      	lsls	r1, r1, #2
10009fec:	0f80      	lsrs	r0, r0, #30
10009fee:	4308      	orrs	r0, r1

    // Now convert cross product into world frame
    inv_q_mult(quat, cgcross, q1);
10009ff0:	4c1c      	ldr	r4, [pc, #112]	; (1000a064 <inv_compass_angle+0x130>)

    // Compass cross Gravity
    cgcross[0] = 0L;
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
    cgcross[2] = inv_q30_mult(compass[2], grav[0]) - inv_q30_mult(compass[0], grav[2]);
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);
10009ff2:	1a3f      	subs	r7, r7, r0

    // Now convert cross product into world frame
    inv_q_mult(quat, cgcross, q1);
10009ff4:	aa0a      	add	r2, sp, #40	; 0x28
10009ff6:	a906      	add	r1, sp, #24
10009ff8:	0028      	movs	r0, r5

    // Compass cross Gravity
    cgcross[0] = 0L;
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
    cgcross[2] = inv_q30_mult(compass[2], grav[0]) - inv_q30_mult(compass[0], grav[2]);
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);
10009ffa:	9709      	str	r7, [sp, #36]	; 0x24

    // Now convert cross product into world frame
    inv_q_mult(quat, cgcross, q1);
10009ffc:	47a0      	blx	r4
}

void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
10009ffe:	682b      	ldr	r3, [r5, #0]
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);

    // Now convert cross product into world frame
    inv_q_mult(quat, cgcross, q1);
    inv_q_invert(quat, qi);
    inv_q_mult(q1, qi, q2);
1000a000:	a80a      	add	r0, sp, #40	; 0x28
}

void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
1000a002:	9312      	str	r3, [sp, #72]	; 0x48
    qInverted[1] = -q[1];
1000a004:	686b      	ldr	r3, [r5, #4]
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);

    // Now convert cross product into world frame
    inv_q_mult(quat, cgcross, q1);
    inv_q_invert(quat, qi);
    inv_q_mult(q1, qi, q2);
1000a006:	aa0e      	add	r2, sp, #56	; 0x38

void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
    qInverted[1] = -q[1];
1000a008:	425b      	negs	r3, r3
1000a00a:	9313      	str	r3, [sp, #76]	; 0x4c
    qInverted[2] = -q[2];
1000a00c:	68ab      	ldr	r3, [r5, #8]
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);

    // Now convert cross product into world frame
    inv_q_mult(quat, cgcross, q1);
    inv_q_invert(quat, qi);
    inv_q_mult(q1, qi, q2);
1000a00e:	a912      	add	r1, sp, #72	; 0x48
void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
    qInverted[1] = -q[1];
    qInverted[2] = -q[2];
1000a010:	425b      	negs	r3, r3
1000a012:	9314      	str	r3, [sp, #80]	; 0x50
    qInverted[3] = -q[3];
1000a014:	68eb      	ldr	r3, [r5, #12]
1000a016:	425b      	negs	r3, r3
1000a018:	9315      	str	r3, [sp, #84]	; 0x54
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);

    // Now convert cross product into world frame
    inv_q_mult(quat, cgcross, q1);
    inv_q_invert(quat, qi);
    inv_q_mult(q1, qi, q2);
1000a01a:	47a0      	blx	r4

    // Protect against atan2 of 0,0
    if ((q2[2] == 0L) && (q2[1] == 0L))
1000a01c:	9c10      	ldr	r4, [sp, #64]	; 0x40
1000a01e:	980f      	ldr	r0, [sp, #60]	; 0x3c
1000a020:	2c00      	cmp	r4, #0
1000a022:	d101      	bne.n	1000a028 <inv_compass_angle+0xf4>
1000a024:	2800      	cmp	r0, #0
1000a026:	d019      	beq.n	1000a05c <inv_compass_angle+0x128>
        return 0.f;

    // This is the unfiltered heading correction
    angW = -atan2f(inv_q30_to_float(q2[2]), inv_q30_to_float(q2[1]));
1000a028:	4e0f      	ldr	r6, [pc, #60]	; (1000a068 <inv_compass_angle+0x134>)
1000a02a:	47b0      	blx	r6
1000a02c:	21c2      	movs	r1, #194	; 0xc2
1000a02e:	4d0f      	ldr	r5, [pc, #60]	; (1000a06c <inv_compass_angle+0x138>)
1000a030:	0589      	lsls	r1, r1, #22
1000a032:	47a8      	blx	r5
1000a034:	1c07      	adds	r7, r0, #0
1000a036:	0020      	movs	r0, r4
1000a038:	47b0      	blx	r6
1000a03a:	21c2      	movs	r1, #194	; 0xc2
1000a03c:	0589      	lsls	r1, r1, #22
1000a03e:	47a8      	blx	r5
1000a040:	4b0b      	ldr	r3, [pc, #44]	; (1000a070 <inv_compass_angle+0x13c>)
1000a042:	1c39      	adds	r1, r7, #0
1000a044:	4798      	blx	r3
1000a046:	2380      	movs	r3, #128	; 0x80
1000a048:	061b      	lsls	r3, r3, #24
1000a04a:	469c      	mov	ip, r3
1000a04c:	4460      	add	r0, ip
    return angW;
}
1000a04e:	b017      	add	sp, #92	; 0x5c
1000a050:	bc3c      	pop	{r2, r3, r4, r5}
1000a052:	4690      	mov	r8, r2
1000a054:	4699      	mov	r9, r3
1000a056:	46a2      	mov	sl, r4
1000a058:	46ab      	mov	fp, r5
1000a05a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inv_q_invert(quat, qi);
    inv_q_mult(q1, qi, q2);

    // Protect against atan2 of 0,0
    if ((q2[2] == 0L) && (q2[1] == 0L))
        return 0.f;
1000a05c:	2000      	movs	r0, #0
1000a05e:	e7f6      	b.n	1000a04e <inv_compass_angle+0x11a>
1000a060:	10014e99 	.word	0x10014e99
1000a064:	10009da5 	.word	0x10009da5
1000a068:	10015c8d 	.word	0x10015c8d
1000a06c:	100156e5 	.word	0x100156e5
1000a070:	10010585 	.word	0x10010585

1000a074 <inv_q_add>:
*            to 2^30
* @param[out] qSum Sum after quaternion summation. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_add(long *q1, long *q2, long *qSum)
{
1000a074:	b510      	push	{r4, lr}
    INVENSENSE_FUNC_START;
    qSum[0] = q1[0] + q2[0];
1000a076:	6803      	ldr	r3, [r0, #0]
1000a078:	001c      	movs	r4, r3
1000a07a:	680b      	ldr	r3, [r1, #0]
1000a07c:	469c      	mov	ip, r3
1000a07e:	4464      	add	r4, ip
1000a080:	6014      	str	r4, [r2, #0]
    qSum[1] = q1[1] + q2[1];
1000a082:	6843      	ldr	r3, [r0, #4]
1000a084:	001c      	movs	r4, r3
1000a086:	684b      	ldr	r3, [r1, #4]
1000a088:	469c      	mov	ip, r3
1000a08a:	4464      	add	r4, ip
1000a08c:	6054      	str	r4, [r2, #4]
    qSum[2] = q1[2] + q2[2];
1000a08e:	6883      	ldr	r3, [r0, #8]
1000a090:	001c      	movs	r4, r3
1000a092:	688b      	ldr	r3, [r1, #8]
1000a094:	469c      	mov	ip, r3
1000a096:	4464      	add	r4, ip
1000a098:	6094      	str	r4, [r2, #8]
    qSum[3] = q1[3] + q2[3];
1000a09a:	68c0      	ldr	r0, [r0, #12]
1000a09c:	68cb      	ldr	r3, [r1, #12]
1000a09e:	18c3      	adds	r3, r0, r3
1000a0a0:	60d3      	str	r3, [r2, #12]
}
1000a0a2:	bd10      	pop	{r4, pc}

1000a0a4 <inv_q_invert>:
}

void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
1000a0a4:	6803      	ldr	r3, [r0, #0]
1000a0a6:	600b      	str	r3, [r1, #0]
    qInverted[1] = -q[1];
1000a0a8:	6843      	ldr	r3, [r0, #4]
1000a0aa:	425b      	negs	r3, r3
1000a0ac:	604b      	str	r3, [r1, #4]
    qInverted[2] = -q[2];
1000a0ae:	6883      	ldr	r3, [r0, #8]
1000a0b0:	425b      	negs	r3, r3
1000a0b2:	608b      	str	r3, [r1, #8]
    qInverted[3] = -q[3];
1000a0b4:	68c3      	ldr	r3, [r0, #12]
1000a0b6:	425b      	negs	r3, r3
1000a0b8:	60cb      	str	r3, [r1, #12]
}
1000a0ba:	4770      	bx	lr

1000a0bc <inv_q_rotate>:
}

/** Rotates a 3-element vector by Rotation defined by Q
*/
void inv_q_rotate(const long *q, const long *in, long *out)
{
1000a0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    long q_temp1[4], q_temp2[4];
    long in4[4], out4[4];

    // Fixme optimize
    in4[0] = 0;
1000a0be:	2300      	movs	r3, #0
}

/** Rotates a 3-element vector by Rotation defined by Q
*/
void inv_q_rotate(const long *q, const long *in, long *out)
{
1000a0c0:	0004      	movs	r4, r0
1000a0c2:	0017      	movs	r7, r2
1000a0c4:	b091      	sub	sp, #68	; 0x44
    long q_temp1[4], q_temp2[4];
    long in4[4], out4[4];

    // Fixme optimize
    in4[0] = 0;
    memcpy(&in4[1], in, 3 * sizeof(long));
1000a0c6:	4d0f      	ldr	r5, [pc, #60]	; (1000a104 <inv_q_rotate+0x48>)
1000a0c8:	220c      	movs	r2, #12
1000a0ca:	a809      	add	r0, sp, #36	; 0x24
{
    long q_temp1[4], q_temp2[4];
    long in4[4], out4[4];

    // Fixme optimize
    in4[0] = 0;
1000a0cc:	9308      	str	r3, [sp, #32]
    memcpy(&in4[1], in, 3 * sizeof(long));
1000a0ce:	47a8      	blx	r5
    inv_q_mult(q, in4, q_temp1);
1000a0d0:	466a      	mov	r2, sp
1000a0d2:	a908      	add	r1, sp, #32
1000a0d4:	0020      	movs	r0, r4
1000a0d6:	4e0c      	ldr	r6, [pc, #48]	; (1000a108 <inv_q_rotate+0x4c>)
1000a0d8:	47b0      	blx	r6
}

void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
1000a0da:	6823      	ldr	r3, [r4, #0]
    // Fixme optimize
    in4[0] = 0;
    memcpy(&in4[1], in, 3 * sizeof(long));
    inv_q_mult(q, in4, q_temp1);
    inv_q_invert(q, q_temp2);
    inv_q_mult(q_temp1, q_temp2, out4);
1000a0dc:	aa0c      	add	r2, sp, #48	; 0x30
}

void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
1000a0de:	9304      	str	r3, [sp, #16]
    qInverted[1] = -q[1];
1000a0e0:	6863      	ldr	r3, [r4, #4]
    // Fixme optimize
    in4[0] = 0;
    memcpy(&in4[1], in, 3 * sizeof(long));
    inv_q_mult(q, in4, q_temp1);
    inv_q_invert(q, q_temp2);
    inv_q_mult(q_temp1, q_temp2, out4);
1000a0e2:	a904      	add	r1, sp, #16

void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
    qInverted[1] = -q[1];
1000a0e4:	425b      	negs	r3, r3
1000a0e6:	9305      	str	r3, [sp, #20]
    qInverted[2] = -q[2];
1000a0e8:	68a3      	ldr	r3, [r4, #8]
    // Fixme optimize
    in4[0] = 0;
    memcpy(&in4[1], in, 3 * sizeof(long));
    inv_q_mult(q, in4, q_temp1);
    inv_q_invert(q, q_temp2);
    inv_q_mult(q_temp1, q_temp2, out4);
1000a0ea:	4668      	mov	r0, sp
void inv_q_invert(const long *q, long *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
    qInverted[1] = -q[1];
    qInverted[2] = -q[2];
1000a0ec:	425b      	negs	r3, r3
1000a0ee:	9306      	str	r3, [sp, #24]
    qInverted[3] = -q[3];
1000a0f0:	68e3      	ldr	r3, [r4, #12]
1000a0f2:	425b      	negs	r3, r3
1000a0f4:	9307      	str	r3, [sp, #28]
    // Fixme optimize
    in4[0] = 0;
    memcpy(&in4[1], in, 3 * sizeof(long));
    inv_q_mult(q, in4, q_temp1);
    inv_q_invert(q, q_temp2);
    inv_q_mult(q_temp1, q_temp2, out4);
1000a0f6:	47b0      	blx	r6
    memcpy(out, &out4[1], 3 * sizeof(long));
1000a0f8:	220c      	movs	r2, #12
1000a0fa:	a90d      	add	r1, sp, #52	; 0x34
1000a0fc:	0038      	movs	r0, r7
1000a0fe:	47a8      	blx	r5
}
1000a100:	b011      	add	sp, #68	; 0x44
1000a102:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a104:	10017d8f 	.word	0x10017d8f
1000a108:	10009da5 	.word	0x10009da5

1000a10c <inv_q_multf>:

void inv_q_multf(const float *q1, const float *q2, float *qProd)
{
1000a10c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a10e:	4657      	mov	r7, sl
1000a110:	464e      	mov	r6, r9
1000a112:	4645      	mov	r5, r8
1000a114:	b4e0      	push	{r5, r6, r7}
    INVENSENSE_FUNC_START;
    qProd[0] =
1000a116:	4c3a      	ldr	r4, [pc, #232]	; (1000a200 <inv_q_multf+0xf4>)
    inv_q_mult(q_temp1, q_temp2, out4);
    memcpy(out, &out4[1], 3 * sizeof(long));
}

void inv_q_multf(const float *q1, const float *q2, float *qProd)
{
1000a118:	0005      	movs	r5, r0
1000a11a:	000e      	movs	r6, r1
    INVENSENSE_FUNC_START;
    qProd[0] =
1000a11c:	6800      	ldr	r0, [r0, #0]
1000a11e:	6809      	ldr	r1, [r1, #0]
    inv_q_mult(q_temp1, q_temp2, out4);
    memcpy(out, &out4[1], 3 * sizeof(long));
}

void inv_q_multf(const float *q1, const float *q2, float *qProd)
{
1000a120:	4691      	mov	r9, r2
    INVENSENSE_FUNC_START;
    qProd[0] =
1000a122:	47a0      	blx	r4
1000a124:	6871      	ldr	r1, [r6, #4]
1000a126:	1c07      	adds	r7, r0, #0
1000a128:	6868      	ldr	r0, [r5, #4]
1000a12a:	47a0      	blx	r4
1000a12c:	4b35      	ldr	r3, [pc, #212]	; (1000a204 <inv_q_multf+0xf8>)
1000a12e:	1c01      	adds	r1, r0, #0
1000a130:	1c38      	adds	r0, r7, #0
1000a132:	4698      	mov	r8, r3
1000a134:	4798      	blx	r3
1000a136:	68b1      	ldr	r1, [r6, #8]
1000a138:	1c07      	adds	r7, r0, #0
1000a13a:	68a8      	ldr	r0, [r5, #8]
1000a13c:	47a0      	blx	r4
1000a13e:	1c01      	adds	r1, r0, #0
1000a140:	1c38      	adds	r0, r7, #0
1000a142:	47c0      	blx	r8
1000a144:	68f1      	ldr	r1, [r6, #12]
1000a146:	1c07      	adds	r7, r0, #0
1000a148:	68e8      	ldr	r0, [r5, #12]
1000a14a:	47a0      	blx	r4
1000a14c:	1c01      	adds	r1, r0, #0
1000a14e:	1c38      	adds	r0, r7, #0
1000a150:	47c0      	blx	r8
1000a152:	464b      	mov	r3, r9
1000a154:	6018      	str	r0, [r3, #0]
        (q1[0] * q2[0] - q1[1] * q2[1] - q1[2] * q2[2] - q1[3] * q2[3]);
    qProd[1] =
1000a156:	6871      	ldr	r1, [r6, #4]
1000a158:	6828      	ldr	r0, [r5, #0]
1000a15a:	47a0      	blx	r4
1000a15c:	6831      	ldr	r1, [r6, #0]
1000a15e:	4682      	mov	sl, r0
1000a160:	6868      	ldr	r0, [r5, #4]
1000a162:	47a0      	blx	r4
1000a164:	4f28      	ldr	r7, [pc, #160]	; (1000a208 <inv_q_multf+0xfc>)
1000a166:	1c01      	adds	r1, r0, #0
1000a168:	4650      	mov	r0, sl
1000a16a:	47b8      	blx	r7
1000a16c:	68f1      	ldr	r1, [r6, #12]
1000a16e:	4682      	mov	sl, r0
1000a170:	68a8      	ldr	r0, [r5, #8]
1000a172:	47a0      	blx	r4
1000a174:	1c01      	adds	r1, r0, #0
1000a176:	4650      	mov	r0, sl
1000a178:	47b8      	blx	r7
1000a17a:	68b1      	ldr	r1, [r6, #8]
1000a17c:	4682      	mov	sl, r0
1000a17e:	68e8      	ldr	r0, [r5, #12]
1000a180:	47a0      	blx	r4
1000a182:	1c01      	adds	r1, r0, #0
1000a184:	4650      	mov	r0, sl
1000a186:	47c0      	blx	r8
1000a188:	464b      	mov	r3, r9
1000a18a:	6058      	str	r0, [r3, #4]
        (q1[0] * q2[1] + q1[1] * q2[0] + q1[2] * q2[3] - q1[3] * q2[2]);
    qProd[2] =
1000a18c:	68b1      	ldr	r1, [r6, #8]
1000a18e:	6828      	ldr	r0, [r5, #0]
1000a190:	47a0      	blx	r4
1000a192:	68f1      	ldr	r1, [r6, #12]
1000a194:	4682      	mov	sl, r0
1000a196:	6868      	ldr	r0, [r5, #4]
1000a198:	47a0      	blx	r4
1000a19a:	1c01      	adds	r1, r0, #0
1000a19c:	4650      	mov	r0, sl
1000a19e:	47c0      	blx	r8
1000a1a0:	6831      	ldr	r1, [r6, #0]
1000a1a2:	4682      	mov	sl, r0
1000a1a4:	68a8      	ldr	r0, [r5, #8]
1000a1a6:	47a0      	blx	r4
1000a1a8:	1c01      	adds	r1, r0, #0
1000a1aa:	4650      	mov	r0, sl
1000a1ac:	47b8      	blx	r7
1000a1ae:	6871      	ldr	r1, [r6, #4]
1000a1b0:	4682      	mov	sl, r0
1000a1b2:	68e8      	ldr	r0, [r5, #12]
1000a1b4:	47a0      	blx	r4
1000a1b6:	1c01      	adds	r1, r0, #0
1000a1b8:	4650      	mov	r0, sl
1000a1ba:	47b8      	blx	r7
1000a1bc:	464b      	mov	r3, r9
1000a1be:	6098      	str	r0, [r3, #8]
        (q1[0] * q2[2] - q1[1] * q2[3] + q1[2] * q2[0] + q1[3] * q2[1]);
    qProd[3] =
1000a1c0:	68f1      	ldr	r1, [r6, #12]
1000a1c2:	6828      	ldr	r0, [r5, #0]
1000a1c4:	47a0      	blx	r4
1000a1c6:	68b1      	ldr	r1, [r6, #8]
1000a1c8:	4682      	mov	sl, r0
1000a1ca:	6868      	ldr	r0, [r5, #4]
1000a1cc:	47a0      	blx	r4
1000a1ce:	1c01      	adds	r1, r0, #0
1000a1d0:	4650      	mov	r0, sl
1000a1d2:	47b8      	blx	r7
1000a1d4:	6871      	ldr	r1, [r6, #4]
1000a1d6:	4682      	mov	sl, r0
1000a1d8:	68a8      	ldr	r0, [r5, #8]
1000a1da:	47a0      	blx	r4
1000a1dc:	1c01      	adds	r1, r0, #0
1000a1de:	4650      	mov	r0, sl
1000a1e0:	47c0      	blx	r8
1000a1e2:	6831      	ldr	r1, [r6, #0]
1000a1e4:	4680      	mov	r8, r0
1000a1e6:	68e8      	ldr	r0, [r5, #12]
1000a1e8:	47a0      	blx	r4
1000a1ea:	1c01      	adds	r1, r0, #0
1000a1ec:	4640      	mov	r0, r8
1000a1ee:	47b8      	blx	r7
1000a1f0:	464b      	mov	r3, r9
1000a1f2:	60d8      	str	r0, [r3, #12]
        (q1[0] * q2[3] + q1[1] * q2[2] - q1[2] * q2[1] + q1[3] * q2[0]);
}
1000a1f4:	bc1c      	pop	{r2, r3, r4}
1000a1f6:	4690      	mov	r8, r2
1000a1f8:	4699      	mov	r9, r3
1000a1fa:	46a2      	mov	sl, r4
1000a1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a1fe:	46c0      	nop			; (mov r8, r8)
1000a200:	100156e5 	.word	0x100156e5
1000a204:	1001590d 	.word	0x1001590d
1000a208:	10015065 	.word	0x10015065

1000a20c <inv_q_addf>:

void inv_q_addf(const float *q1, const float *q2, float *qSum)
{
1000a20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a20e:	0006      	movs	r6, r0
1000a210:	000f      	movs	r7, r1
    INVENSENSE_FUNC_START;
    qSum[0] = q1[0] + q2[0];
1000a212:	4d09      	ldr	r5, [pc, #36]	; (1000a238 <inv_q_addf+0x2c>)
1000a214:	6809      	ldr	r1, [r1, #0]
1000a216:	6800      	ldr	r0, [r0, #0]
    qProd[3] =
        (q1[0] * q2[3] + q1[1] * q2[2] - q1[2] * q2[1] + q1[3] * q2[0]);
}

void inv_q_addf(const float *q1, const float *q2, float *qSum)
{
1000a218:	0014      	movs	r4, r2
    INVENSENSE_FUNC_START;
    qSum[0] = q1[0] + q2[0];
1000a21a:	47a8      	blx	r5
1000a21c:	6020      	str	r0, [r4, #0]
    qSum[1] = q1[1] + q2[1];
1000a21e:	6879      	ldr	r1, [r7, #4]
1000a220:	6870      	ldr	r0, [r6, #4]
1000a222:	47a8      	blx	r5
1000a224:	6060      	str	r0, [r4, #4]
    qSum[2] = q1[2] + q2[2];
1000a226:	68b9      	ldr	r1, [r7, #8]
1000a228:	68b0      	ldr	r0, [r6, #8]
1000a22a:	47a8      	blx	r5
1000a22c:	60a0      	str	r0, [r4, #8]
    qSum[3] = q1[3] + q2[3];
1000a22e:	68f9      	ldr	r1, [r7, #12]
1000a230:	68f0      	ldr	r0, [r6, #12]
1000a232:	47a8      	blx	r5
1000a234:	60e0      	str	r0, [r4, #12]
}
1000a236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a238:	10015065 	.word	0x10015065

1000a23c <inv_q_normalizef>:

void inv_q_normalizef(float *q)
{
1000a23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a23e:	465f      	mov	r7, fp
1000a240:	4656      	mov	r6, sl
1000a242:	464d      	mov	r5, r9
1000a244:	4644      	mov	r4, r8
1000a246:	b4f0      	push	{r4, r5, r6, r7}
    INVENSENSE_FUNC_START;
    float normSF = 0;
    float xHalf = 0;
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1000a248:	6803      	ldr	r3, [r0, #0]
1000a24a:	4c41      	ldr	r4, [pc, #260]	; (1000a350 <inv_q_normalizef+0x114>)
1000a24c:	469a      	mov	sl, r3
1000a24e:	6843      	ldr	r3, [r0, #4]
1000a250:	68c7      	ldr	r7, [r0, #12]
1000a252:	4699      	mov	r9, r3
1000a254:	6883      	ldr	r3, [r0, #8]
1000a256:	4651      	mov	r1, sl
    qSum[2] = q1[2] + q2[2];
    qSum[3] = q1[3] + q2[3];
}

void inv_q_normalizef(float *q)
{
1000a258:	0005      	movs	r5, r0
    INVENSENSE_FUNC_START;
    float normSF = 0;
    float xHalf = 0;
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1000a25a:	4650      	mov	r0, sl
1000a25c:	4698      	mov	r8, r3
1000a25e:	47a0      	blx	r4
1000a260:	4649      	mov	r1, r9
1000a262:	4683      	mov	fp, r0
1000a264:	4648      	mov	r0, r9
1000a266:	47a0      	blx	r4
1000a268:	4e3a      	ldr	r6, [pc, #232]	; (1000a354 <inv_q_normalizef+0x118>)
1000a26a:	1c01      	adds	r1, r0, #0
1000a26c:	4658      	mov	r0, fp
1000a26e:	47b0      	blx	r6
1000a270:	4641      	mov	r1, r8
1000a272:	4683      	mov	fp, r0
1000a274:	4640      	mov	r0, r8
1000a276:	47a0      	blx	r4
1000a278:	1c01      	adds	r1, r0, #0
1000a27a:	4658      	mov	r0, fp
1000a27c:	47b0      	blx	r6
1000a27e:	1c39      	adds	r1, r7, #0
1000a280:	4683      	mov	fp, r0
1000a282:	1c38      	adds	r0, r7, #0
1000a284:	47a0      	blx	r4
1000a286:	1c01      	adds	r1, r0, #0
1000a288:	4658      	mov	r0, fp
1000a28a:	47b0      	blx	r6
    if (normSF < 2) {
1000a28c:	2180      	movs	r1, #128	; 0x80
1000a28e:	4b32      	ldr	r3, [pc, #200]	; (1000a358 <inv_q_normalizef+0x11c>)
1000a290:	05c9      	lsls	r1, r1, #23
void inv_q_normalizef(float *q)
{
    INVENSENSE_FUNC_START;
    float normSF = 0;
    float xHalf = 0;
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1000a292:	1c06      	adds	r6, r0, #0
    if (normSF < 2) {
1000a294:	4798      	blx	r3
1000a296:	2800      	cmp	r0, #0
1000a298:	d10c      	bne.n	1000a2b4 <inv_q_normalizef+0x78>
        q[0] *= normSF;
        q[1] *= normSF;
        q[2] *= normSF;
        q[3] *= normSF;
    } else {
        q[0] = 1.0;
1000a29a:	23fe      	movs	r3, #254	; 0xfe
1000a29c:	059b      	lsls	r3, r3, #22
1000a29e:	602b      	str	r3, [r5, #0]
        q[1] = 0.0;
1000a2a0:	2300      	movs	r3, #0
1000a2a2:	606b      	str	r3, [r5, #4]
        q[2] = 0.0;
1000a2a4:	60ab      	str	r3, [r5, #8]
        q[3] = 0.0;
1000a2a6:	60eb      	str	r3, [r5, #12]
    }
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
}
1000a2a8:	bc3c      	pop	{r2, r3, r4, r5}
1000a2aa:	4690      	mov	r8, r2
1000a2ac:	4699      	mov	r9, r3
1000a2ae:	46a2      	mov	sl, r4
1000a2b0:	46ab      	mov	fp, r5
1000a2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    INVENSENSE_FUNC_START;
    float normSF = 0;
    float xHalf = 0;
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
    if (normSF < 2) {
        xHalf = 0.5f * normSF;
1000a2b4:	21fc      	movs	r1, #252	; 0xfc
1000a2b6:	1c30      	adds	r0, r6, #0
1000a2b8:	0589      	lsls	r1, r1, #22
1000a2ba:	47a0      	blx	r4
1000a2bc:	4683      	mov	fp, r0
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
1000a2be:	1c01      	adds	r1, r0, #0
1000a2c0:	1c30      	adds	r0, r6, #0
1000a2c2:	47a0      	blx	r4
1000a2c4:	1c31      	adds	r1, r6, #0
1000a2c6:	47a0      	blx	r4
1000a2c8:	1c01      	adds	r1, r0, #0
1000a2ca:	20ff      	movs	r0, #255	; 0xff
1000a2cc:	4b23      	ldr	r3, [pc, #140]	; (1000a35c <inv_q_normalizef+0x120>)
1000a2ce:	0580      	lsls	r0, r0, #22
1000a2d0:	4798      	blx	r3
1000a2d2:	1c01      	adds	r1, r0, #0
1000a2d4:	1c30      	adds	r0, r6, #0
1000a2d6:	47a0      	blx	r4
1000a2d8:	1c06      	adds	r6, r0, #0
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
1000a2da:	1c01      	adds	r1, r0, #0
1000a2dc:	4658      	mov	r0, fp
1000a2de:	47a0      	blx	r4
1000a2e0:	1c31      	adds	r1, r6, #0
1000a2e2:	47a0      	blx	r4
1000a2e4:	1c01      	adds	r1, r0, #0
1000a2e6:	20ff      	movs	r0, #255	; 0xff
1000a2e8:	4b1c      	ldr	r3, [pc, #112]	; (1000a35c <inv_q_normalizef+0x120>)
1000a2ea:	0580      	lsls	r0, r0, #22
1000a2ec:	4798      	blx	r3
1000a2ee:	1c01      	adds	r1, r0, #0
1000a2f0:	1c30      	adds	r0, r6, #0
1000a2f2:	47a0      	blx	r4
1000a2f4:	1c06      	adds	r6, r0, #0
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
1000a2f6:	1c01      	adds	r1, r0, #0
1000a2f8:	4658      	mov	r0, fp
1000a2fa:	47a0      	blx	r4
1000a2fc:	1c31      	adds	r1, r6, #0
1000a2fe:	47a0      	blx	r4
1000a300:	1c01      	adds	r1, r0, #0
1000a302:	20ff      	movs	r0, #255	; 0xff
1000a304:	4b15      	ldr	r3, [pc, #84]	; (1000a35c <inv_q_normalizef+0x120>)
1000a306:	0580      	lsls	r0, r0, #22
1000a308:	4798      	blx	r3
1000a30a:	1c01      	adds	r1, r0, #0
1000a30c:	1c30      	adds	r0, r6, #0
1000a30e:	47a0      	blx	r4
1000a310:	1c06      	adds	r6, r0, #0
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
1000a312:	1c01      	adds	r1, r0, #0
1000a314:	4658      	mov	r0, fp
1000a316:	47a0      	blx	r4
1000a318:	1c31      	adds	r1, r6, #0
1000a31a:	47a0      	blx	r4
1000a31c:	1c01      	adds	r1, r0, #0
1000a31e:	20ff      	movs	r0, #255	; 0xff
1000a320:	4b0e      	ldr	r3, [pc, #56]	; (1000a35c <inv_q_normalizef+0x120>)
1000a322:	0580      	lsls	r0, r0, #22
1000a324:	4798      	blx	r3
1000a326:	1c01      	adds	r1, r0, #0
1000a328:	1c30      	adds	r0, r6, #0
1000a32a:	47a0      	blx	r4
1000a32c:	1c06      	adds	r6, r0, #0
        q[0] *= normSF;
1000a32e:	1c01      	adds	r1, r0, #0
1000a330:	4650      	mov	r0, sl
1000a332:	47a0      	blx	r4
        q[1] *= normSF;
1000a334:	1c31      	adds	r1, r6, #0
        xHalf = 0.5f * normSF;
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        q[0] *= normSF;
1000a336:	6028      	str	r0, [r5, #0]
        q[1] *= normSF;
1000a338:	4648      	mov	r0, r9
1000a33a:	47a0      	blx	r4
        q[2] *= normSF;
1000a33c:	1c31      	adds	r1, r6, #0
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        q[0] *= normSF;
        q[1] *= normSF;
1000a33e:	6068      	str	r0, [r5, #4]
        q[2] *= normSF;
1000a340:	4640      	mov	r0, r8
1000a342:	47a0      	blx	r4
        q[3] *= normSF;
1000a344:	1c31      	adds	r1, r6, #0
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
        q[0] *= normSF;
        q[1] *= normSF;
        q[2] *= normSF;
1000a346:	60a8      	str	r0, [r5, #8]
        q[3] *= normSF;
1000a348:	1c38      	adds	r0, r7, #0
1000a34a:	47a0      	blx	r4
1000a34c:	60e8      	str	r0, [r5, #12]
1000a34e:	e7ab      	b.n	1000a2a8 <inv_q_normalizef+0x6c>
1000a350:	100156e5 	.word	0x100156e5
1000a354:	10015065 	.word	0x10015065
1000a358:	10014e01 	.word	0x10014e01
1000a35c:	1001590d 	.word	0x1001590d

1000a360 <inv_q_norm4>:

/** Performs a length 4 vector normalization with a square root.
* @param[in,out] q vector to normalize. Returns [1,0,0,0] is magnitude is zero.
*/
void inv_q_norm4(float *q)
{
1000a360:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a362:	4657      	mov	r7, sl
1000a364:	464e      	mov	r6, r9
1000a366:	4645      	mov	r5, r8
1000a368:	b4e0      	push	{r5, r6, r7}
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1000a36a:	6843      	ldr	r3, [r0, #4]
1000a36c:	6801      	ldr	r1, [r0, #0]
1000a36e:	4699      	mov	r9, r3
1000a370:	6883      	ldr	r3, [r0, #8]
1000a372:	4d21      	ldr	r5, [pc, #132]	; (1000a3f8 <inv_q_norm4+0x98>)
1000a374:	68c7      	ldr	r7, [r0, #12]

/** Performs a length 4 vector normalization with a square root.
* @param[in,out] q vector to normalize. Returns [1,0,0,0] is magnitude is zero.
*/
void inv_q_norm4(float *q)
{
1000a376:	0004      	movs	r4, r0
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1000a378:	1c08      	adds	r0, r1, #0
1000a37a:	4698      	mov	r8, r3
1000a37c:	47a8      	blx	r5
1000a37e:	4649      	mov	r1, r9
1000a380:	4682      	mov	sl, r0
1000a382:	4648      	mov	r0, r9
1000a384:	47a8      	blx	r5
1000a386:	4e1d      	ldr	r6, [pc, #116]	; (1000a3fc <inv_q_norm4+0x9c>)
1000a388:	1c01      	adds	r1, r0, #0
1000a38a:	4650      	mov	r0, sl
1000a38c:	47b0      	blx	r6
1000a38e:	4641      	mov	r1, r8
1000a390:	4681      	mov	r9, r0
1000a392:	4640      	mov	r0, r8
1000a394:	47a8      	blx	r5
1000a396:	1c01      	adds	r1, r0, #0
1000a398:	4648      	mov	r0, r9
1000a39a:	47b0      	blx	r6
1000a39c:	1c39      	adds	r1, r7, #0
1000a39e:	4680      	mov	r8, r0
1000a3a0:	1c38      	adds	r0, r7, #0
1000a3a2:	47a8      	blx	r5
1000a3a4:	1c01      	adds	r1, r0, #0
1000a3a6:	4640      	mov	r0, r8
1000a3a8:	47b0      	blx	r6
    if (mag) {
1000a3aa:	2500      	movs	r5, #0
* @param[in,out] q vector to normalize. Returns [1,0,0,0] is magnitude is zero.
*/
void inv_q_norm4(float *q)
{
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1000a3ac:	4b14      	ldr	r3, [pc, #80]	; (1000a400 <inv_q_norm4+0xa0>)
1000a3ae:	4798      	blx	r3
    if (mag) {
1000a3b0:	1c29      	adds	r1, r5, #0
1000a3b2:	4b14      	ldr	r3, [pc, #80]	; (1000a404 <inv_q_norm4+0xa4>)
* @param[in,out] q vector to normalize. Returns [1,0,0,0] is magnitude is zero.
*/
void inv_q_norm4(float *q)
{
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
1000a3b4:	1c06      	adds	r6, r0, #0
    if (mag) {
1000a3b6:	4798      	blx	r3
1000a3b8:	2800      	cmp	r0, #0
1000a3ba:	d00a      	beq.n	1000a3d2 <inv_q_norm4+0x72>
        q[0] /= mag;
        q[1] /= mag;
        q[2] /= mag;
        q[3] /= mag;
    } else {
        q[0] = 1.f;
1000a3bc:	23fe      	movs	r3, #254	; 0xfe
1000a3be:	059b      	lsls	r3, r3, #22
1000a3c0:	6023      	str	r3, [r4, #0]
        q[1] = 0.f;
1000a3c2:	6065      	str	r5, [r4, #4]
        q[2] = 0.f;
1000a3c4:	60a5      	str	r5, [r4, #8]
        q[3] = 0.f;
1000a3c6:	60e5      	str	r5, [r4, #12]
    }
}
1000a3c8:	bc1c      	pop	{r2, r3, r4}
1000a3ca:	4690      	mov	r8, r2
1000a3cc:	4699      	mov	r9, r3
1000a3ce:	46a2      	mov	sl, r4
1000a3d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
void inv_q_norm4(float *q)
{
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
    if (mag) {
        q[0] /= mag;
1000a3d2:	4d0d      	ldr	r5, [pc, #52]	; (1000a408 <inv_q_norm4+0xa8>)
1000a3d4:	1c31      	adds	r1, r6, #0
1000a3d6:	6820      	ldr	r0, [r4, #0]
1000a3d8:	47a8      	blx	r5
        q[1] /= mag;
1000a3da:	1c31      	adds	r1, r6, #0
void inv_q_norm4(float *q)
{
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
    if (mag) {
        q[0] /= mag;
1000a3dc:	6020      	str	r0, [r4, #0]
        q[1] /= mag;
1000a3de:	6860      	ldr	r0, [r4, #4]
1000a3e0:	47a8      	blx	r5
        q[2] /= mag;
1000a3e2:	1c31      	adds	r1, r6, #0
{
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
    if (mag) {
        q[0] /= mag;
        q[1] /= mag;
1000a3e4:	6060      	str	r0, [r4, #4]
        q[2] /= mag;
1000a3e6:	68a0      	ldr	r0, [r4, #8]
1000a3e8:	47a8      	blx	r5
        q[3] /= mag;
1000a3ea:	1c31      	adds	r1, r6, #0
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
    if (mag) {
        q[0] /= mag;
        q[1] /= mag;
        q[2] /= mag;
1000a3ec:	60a0      	str	r0, [r4, #8]
        q[3] /= mag;
1000a3ee:	68e0      	ldr	r0, [r4, #12]
1000a3f0:	47a8      	blx	r5
1000a3f2:	60e0      	str	r0, [r4, #12]
1000a3f4:	e7e8      	b.n	1000a3c8 <inv_q_norm4+0x68>
1000a3f6:	46c0      	nop			; (mov r8, r8)
1000a3f8:	100156e5 	.word	0x100156e5
1000a3fc:	10015065 	.word	0x10015065
1000a400:	1001058d 	.word	0x1001058d
1000a404:	10014df5 	.word	0x10014df5
1000a408:	10015351 	.word	0x10015351

1000a40c <inv_q_invertf>:

void inv_q_invertf(const float *q, float *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
    qInverted[1] = -q[1];
1000a40c:	2280      	movs	r2, #128	; 0x80
1000a40e:	0612      	lsls	r2, r2, #24
1000a410:	4694      	mov	ip, r2
}

void inv_q_invertf(const float *q, float *qInverted)
{
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
1000a412:	6803      	ldr	r3, [r0, #0]
1000a414:	600b      	str	r3, [r1, #0]
    qInverted[1] = -q[1];
1000a416:	6843      	ldr	r3, [r0, #4]
1000a418:	4463      	add	r3, ip
1000a41a:	604b      	str	r3, [r1, #4]
    qInverted[2] = -q[2];
1000a41c:	6883      	ldr	r3, [r0, #8]
1000a41e:	4463      	add	r3, ip
1000a420:	608b      	str	r3, [r1, #8]
    qInverted[3] = -q[3];
1000a422:	68c3      	ldr	r3, [r0, #12]
1000a424:	4463      	add	r3, ip
1000a426:	60cb      	str	r3, [r1, #12]
}
1000a428:	4770      	bx	lr
1000a42a:	46c0      	nop			; (mov r8, r8)

1000a42c <inv_quaternion_to_rotation>:
 *             the first row of the matrix. Rotation matrix multiplied
 *             by a 3 element column vector transform a vector from Body
 *             to World.
 */
void inv_quaternion_to_rotation(const long *quat, long *rot)
{
1000a42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a42e:	464f      	mov	r7, r9
1000a430:	4646      	mov	r6, r8
1000a432:	b4c0      	push	{r6, r7}
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a434:	6843      	ldr	r3, [r0, #4]
 *             the first row of the matrix. Rotation matrix multiplied
 *             by a 3 element column vector transform a vector from Body
 *             to World.
 */
void inv_quaternion_to_rotation(const long *quat, long *rot)
{
1000a436:	000e      	movs	r6, r1
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a438:	4698      	mov	r8, r3
1000a43a:	17db      	asrs	r3, r3, #31
1000a43c:	4699      	mov	r9, r3
1000a43e:	6803      	ldr	r3, [r0, #0]
 *             the first row of the matrix. Rotation matrix multiplied
 *             by a 3 element column vector transform a vector from Body
 *             to World.
 */
void inv_quaternion_to_rotation(const long *quat, long *rot)
{
1000a440:	0004      	movs	r4, r0
    rot[0] =
1000a442:	001a      	movs	r2, r3
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a444:	17d9      	asrs	r1, r3, #31
 *             by a 3 element column vector transform a vector from Body
 *             to World.
 */
void inv_quaternion_to_rotation(const long *quat, long *rot)
{
    rot[0] =
1000a446:	4d68      	ldr	r5, [pc, #416]	; (1000a5e8 <inv_quaternion_to_rotation+0x1bc>)
1000a448:	000b      	movs	r3, r1
1000a44a:	0010      	movs	r0, r2
1000a44c:	47a8      	blx	r5
1000a44e:	00c9      	lsls	r1, r1, #3
1000a450:	0f47      	lsrs	r7, r0, #29
1000a452:	430f      	orrs	r7, r1
1000a454:	4642      	mov	r2, r8
1000a456:	464b      	mov	r3, r9
1000a458:	4640      	mov	r0, r8
1000a45a:	4649      	mov	r1, r9
1000a45c:	47a8      	blx	r5
1000a45e:	23c0      	movs	r3, #192	; 0xc0
1000a460:	061b      	lsls	r3, r3, #24
1000a462:	469c      	mov	ip, r3
1000a464:	00c9      	lsls	r1, r1, #3
1000a466:	0f40      	lsrs	r0, r0, #29
1000a468:	4308      	orrs	r0, r1
1000a46a:	1838      	adds	r0, r7, r0
1000a46c:	4460      	add	r0, ip
1000a46e:	6030      	str	r0, [r6, #0]
        inv_q29_mult(quat[1], quat[1]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
    rot[1] =
1000a470:	6863      	ldr	r3, [r4, #4]
1000a472:	68a2      	ldr	r2, [r4, #8]
1000a474:	17d9      	asrs	r1, r3, #31
1000a476:	68a3      	ldr	r3, [r4, #8]
1000a478:	6860      	ldr	r0, [r4, #4]
1000a47a:	17db      	asrs	r3, r3, #31
1000a47c:	47a8      	blx	r5
1000a47e:	68e3      	ldr	r3, [r4, #12]
1000a480:	00c9      	lsls	r1, r1, #3
1000a482:	0f47      	lsrs	r7, r0, #29
1000a484:	430f      	orrs	r7, r1
1000a486:	17d9      	asrs	r1, r3, #31
1000a488:	6823      	ldr	r3, [r4, #0]
1000a48a:	6822      	ldr	r2, [r4, #0]
1000a48c:	68e0      	ldr	r0, [r4, #12]
1000a48e:	17db      	asrs	r3, r3, #31
1000a490:	47a8      	blx	r5
1000a492:	00c9      	lsls	r1, r1, #3
1000a494:	0f40      	lsrs	r0, r0, #29
1000a496:	4308      	orrs	r0, r1
1000a498:	1a3f      	subs	r7, r7, r0
1000a49a:	6077      	str	r7, [r6, #4]
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
    rot[2] =
1000a49c:	68a3      	ldr	r3, [r4, #8]
1000a49e:	6822      	ldr	r2, [r4, #0]
1000a4a0:	17d9      	asrs	r1, r3, #31
1000a4a2:	6823      	ldr	r3, [r4, #0]
1000a4a4:	68a0      	ldr	r0, [r4, #8]
1000a4a6:	17db      	asrs	r3, r3, #31
1000a4a8:	47a8      	blx	r5
1000a4aa:	6863      	ldr	r3, [r4, #4]
1000a4ac:	00c9      	lsls	r1, r1, #3
1000a4ae:	0f47      	lsrs	r7, r0, #29
1000a4b0:	430f      	orrs	r7, r1
1000a4b2:	17d9      	asrs	r1, r3, #31
1000a4b4:	68e3      	ldr	r3, [r4, #12]
1000a4b6:	68e2      	ldr	r2, [r4, #12]
1000a4b8:	6860      	ldr	r0, [r4, #4]
1000a4ba:	17db      	asrs	r3, r3, #31
1000a4bc:	47a8      	blx	r5
1000a4be:	00c9      	lsls	r1, r1, #3
1000a4c0:	0f40      	lsrs	r0, r0, #29
1000a4c2:	4308      	orrs	r0, r1
1000a4c4:	1838      	adds	r0, r7, r0
1000a4c6:	60b0      	str	r0, [r6, #8]
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
    rot[3] =
1000a4c8:	68e3      	ldr	r3, [r4, #12]
1000a4ca:	6822      	ldr	r2, [r4, #0]
1000a4cc:	17d9      	asrs	r1, r3, #31
1000a4ce:	6823      	ldr	r3, [r4, #0]
1000a4d0:	68e0      	ldr	r0, [r4, #12]
1000a4d2:	17db      	asrs	r3, r3, #31
1000a4d4:	47a8      	blx	r5
1000a4d6:	6863      	ldr	r3, [r4, #4]
1000a4d8:	00c9      	lsls	r1, r1, #3
1000a4da:	0f47      	lsrs	r7, r0, #29
1000a4dc:	430f      	orrs	r7, r1
1000a4de:	17d9      	asrs	r1, r3, #31
1000a4e0:	68a3      	ldr	r3, [r4, #8]
1000a4e2:	68a2      	ldr	r2, [r4, #8]
1000a4e4:	17db      	asrs	r3, r3, #31
1000a4e6:	6860      	ldr	r0, [r4, #4]
1000a4e8:	47a8      	blx	r5
1000a4ea:	00c9      	lsls	r1, r1, #3
1000a4ec:	0f40      	lsrs	r0, r0, #29
1000a4ee:	4308      	orrs	r0, r1
1000a4f0:	1838      	adds	r0, r7, r0
1000a4f2:	60f0      	str	r0, [r6, #12]
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a4f4:	68a3      	ldr	r3, [r4, #8]
1000a4f6:	4698      	mov	r8, r3
1000a4f8:	17db      	asrs	r3, r3, #31
1000a4fa:	4699      	mov	r9, r3
1000a4fc:	6823      	ldr	r3, [r4, #0]
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
    rot[2] =
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
    rot[3] =
        inv_q29_mult(quat[1], quat[2]) + inv_q29_mult(quat[3], quat[0]);
    rot[4] =
1000a4fe:	001a      	movs	r2, r3
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a500:	17d9      	asrs	r1, r3, #31
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
    rot[2] =
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
    rot[3] =
        inv_q29_mult(quat[1], quat[2]) + inv_q29_mult(quat[3], quat[0]);
    rot[4] =
1000a502:	000b      	movs	r3, r1
1000a504:	0010      	movs	r0, r2
1000a506:	47a8      	blx	r5
1000a508:	00c9      	lsls	r1, r1, #3
1000a50a:	0f47      	lsrs	r7, r0, #29
1000a50c:	464b      	mov	r3, r9
1000a50e:	430f      	orrs	r7, r1
1000a510:	4642      	mov	r2, r8
1000a512:	4649      	mov	r1, r9
1000a514:	4640      	mov	r0, r8
1000a516:	47a8      	blx	r5
1000a518:	23c0      	movs	r3, #192	; 0xc0
1000a51a:	061b      	lsls	r3, r3, #24
1000a51c:	469c      	mov	ip, r3
1000a51e:	00c9      	lsls	r1, r1, #3
1000a520:	0f40      	lsrs	r0, r0, #29
1000a522:	4308      	orrs	r0, r1
1000a524:	1838      	adds	r0, r7, r0
1000a526:	4460      	add	r0, ip
1000a528:	6130      	str	r0, [r6, #16]
        inv_q29_mult(quat[2], quat[2]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
    rot[5] =
1000a52a:	68a3      	ldr	r3, [r4, #8]
1000a52c:	68e2      	ldr	r2, [r4, #12]
1000a52e:	17d9      	asrs	r1, r3, #31
1000a530:	68e3      	ldr	r3, [r4, #12]
1000a532:	68a0      	ldr	r0, [r4, #8]
1000a534:	17db      	asrs	r3, r3, #31
1000a536:	47a8      	blx	r5
1000a538:	6863      	ldr	r3, [r4, #4]
1000a53a:	00c9      	lsls	r1, r1, #3
1000a53c:	0f47      	lsrs	r7, r0, #29
1000a53e:	430f      	orrs	r7, r1
1000a540:	17d9      	asrs	r1, r3, #31
1000a542:	6823      	ldr	r3, [r4, #0]
1000a544:	6822      	ldr	r2, [r4, #0]
1000a546:	6860      	ldr	r0, [r4, #4]
1000a548:	17db      	asrs	r3, r3, #31
1000a54a:	47a8      	blx	r5
1000a54c:	00c9      	lsls	r1, r1, #3
1000a54e:	0f40      	lsrs	r0, r0, #29
1000a550:	4308      	orrs	r0, r1
1000a552:	1a3f      	subs	r7, r7, r0
1000a554:	6177      	str	r7, [r6, #20]
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
    rot[6] =
1000a556:	6863      	ldr	r3, [r4, #4]
1000a558:	68e2      	ldr	r2, [r4, #12]
1000a55a:	17d9      	asrs	r1, r3, #31
1000a55c:	68e3      	ldr	r3, [r4, #12]
1000a55e:	6860      	ldr	r0, [r4, #4]
1000a560:	17db      	asrs	r3, r3, #31
1000a562:	47a8      	blx	r5
1000a564:	68a3      	ldr	r3, [r4, #8]
1000a566:	00c9      	lsls	r1, r1, #3
1000a568:	0f47      	lsrs	r7, r0, #29
1000a56a:	430f      	orrs	r7, r1
1000a56c:	17d9      	asrs	r1, r3, #31
1000a56e:	6823      	ldr	r3, [r4, #0]
1000a570:	6822      	ldr	r2, [r4, #0]
1000a572:	68a0      	ldr	r0, [r4, #8]
1000a574:	17db      	asrs	r3, r3, #31
1000a576:	47a8      	blx	r5
1000a578:	00c9      	lsls	r1, r1, #3
1000a57a:	0f40      	lsrs	r0, r0, #29
1000a57c:	4308      	orrs	r0, r1
1000a57e:	1a3f      	subs	r7, r7, r0
1000a580:	61b7      	str	r7, [r6, #24]
        inv_q29_mult(quat[1], quat[3]) - inv_q29_mult(quat[2], quat[0]);
    rot[7] =
1000a582:	6823      	ldr	r3, [r4, #0]
1000a584:	6862      	ldr	r2, [r4, #4]
1000a586:	17d9      	asrs	r1, r3, #31
1000a588:	6863      	ldr	r3, [r4, #4]
1000a58a:	6820      	ldr	r0, [r4, #0]
1000a58c:	17db      	asrs	r3, r3, #31
1000a58e:	47a8      	blx	r5
1000a590:	68e3      	ldr	r3, [r4, #12]
1000a592:	00c9      	lsls	r1, r1, #3
1000a594:	0f47      	lsrs	r7, r0, #29
1000a596:	430f      	orrs	r7, r1
1000a598:	17d9      	asrs	r1, r3, #31
1000a59a:	68a3      	ldr	r3, [r4, #8]
1000a59c:	68a2      	ldr	r2, [r4, #8]
1000a59e:	68e0      	ldr	r0, [r4, #12]
1000a5a0:	17db      	asrs	r3, r3, #31
1000a5a2:	47a8      	blx	r5
1000a5a4:	00c9      	lsls	r1, r1, #3
1000a5a6:	0f40      	lsrs	r0, r0, #29
1000a5a8:	4308      	orrs	r0, r1
1000a5aa:	1838      	adds	r0, r7, r0
1000a5ac:	61f0      	str	r0, [r6, #28]
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a5ae:	6827      	ldr	r7, [r4, #0]
1000a5b0:	68e0      	ldr	r0, [r4, #12]
1000a5b2:	17fb      	asrs	r3, r7, #31
1000a5b4:	17c1      	asrs	r1, r0, #31
1000a5b6:	4698      	mov	r8, r3
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
    rot[6] =
        inv_q29_mult(quat[1], quat[3]) - inv_q29_mult(quat[2], quat[0]);
    rot[7] =
        inv_q29_mult(quat[2], quat[3]) + inv_q29_mult(quat[1], quat[0]);
    rot[8] =
1000a5b8:	0002      	movs	r2, r0
1000a5ba:	000b      	movs	r3, r1
1000a5bc:	47a8      	blx	r5
1000a5be:	00c9      	lsls	r1, r1, #3
1000a5c0:	0f44      	lsrs	r4, r0, #29
1000a5c2:	4643      	mov	r3, r8
1000a5c4:	430c      	orrs	r4, r1
1000a5c6:	003a      	movs	r2, r7
1000a5c8:	0038      	movs	r0, r7
1000a5ca:	4641      	mov	r1, r8
1000a5cc:	47a8      	blx	r5
1000a5ce:	23c0      	movs	r3, #192	; 0xc0
1000a5d0:	061b      	lsls	r3, r3, #24
1000a5d2:	469c      	mov	ip, r3
1000a5d4:	00c9      	lsls	r1, r1, #3
1000a5d6:	0f40      	lsrs	r0, r0, #29
1000a5d8:	4308      	orrs	r0, r1
1000a5da:	1820      	adds	r0, r4, r0
1000a5dc:	4460      	add	r0, ip
1000a5de:	6230      	str	r0, [r6, #32]
        inv_q29_mult(quat[3], quat[3]) + inv_q29_mult(quat[0],
                quat[0]) -
        1073741824L;
}
1000a5e0:	bc0c      	pop	{r2, r3}
1000a5e2:	4690      	mov	r8, r2
1000a5e4:	4699      	mov	r9, r3
1000a5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a5e8:	10014e99 	.word	0x10014e99

1000a5ec <inv_convert_to_body_with_scale>:
* @param[in] sensitivity Sensitivity scale
* @param[in] input Input vector, length 3
* @param[out] output Output vector, length 3
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
1000a5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a5ee:	465f      	mov	r7, fp
1000a5f0:	4656      	mov	r6, sl
1000a5f2:	464d      	mov	r5, r9
1000a5f4:	4644      	mov	r4, r8
1000a5f6:	b4f0      	push	{r4, r5, r6, r7}
1000a5f8:	001f      	movs	r7, r3
    output[0] = inv_q30_mult(input[orientation & 0x03] *
1000a5fa:	2303      	movs	r3, #3
1000a5fc:	2501      	movs	r5, #1
1000a5fe:	469b      	mov	fp, r3
1000a600:	4003      	ands	r3, r0
1000a602:	009b      	lsls	r3, r3, #2
1000a604:	589b      	ldr	r3, [r3, r2]
* @param[in] sensitivity Sensitivity scale
* @param[in] input Input vector, length 3
* @param[out] output Output vector, length 3
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
1000a606:	4692      	mov	sl, r2
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a608:	17ca      	asrs	r2, r1, #31
* @param[in] sensitivity Sensitivity scale
* @param[in] input Input vector, length 3
* @param[out] output Output vector, length 3
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
1000a60a:	000e      	movs	r6, r1
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
1000a60c:	4691      	mov	r9, r2
* @param[in] sensitivity Sensitivity scale
* @param[in] input Input vector, length 3
* @param[out] output Output vector, length 3
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
1000a60e:	0004      	movs	r4, r0
    output[0] = inv_q30_mult(input[orientation & 0x03] *
1000a610:	0740      	lsls	r0, r0, #29
1000a612:	17c0      	asrs	r0, r0, #31
1000a614:	4328      	orrs	r0, r5
1000a616:	4358      	muls	r0, r3
1000a618:	4b19      	ldr	r3, [pc, #100]	; (1000a680 <inv_convert_to_body_with_scale+0x94>)
1000a61a:	0032      	movs	r2, r6
1000a61c:	4698      	mov	r8, r3
1000a61e:	17c1      	asrs	r1, r0, #31
1000a620:	464b      	mov	r3, r9
1000a622:	47c0      	blx	r8
                             SIGNSET(orientation & 0x004), sensitivity);
    output[1] = inv_q30_mult(input[(orientation>>3) & 0x03] *
1000a624:	465a      	mov	r2, fp
1000a626:	08e3      	lsrs	r3, r4, #3
1000a628:	4013      	ands	r3, r2
1000a62a:	4652      	mov	r2, sl
* @param[in] input Input vector, length 3
* @param[out] output Output vector, length 3
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
    output[0] = inv_q30_mult(input[orientation & 0x03] *
1000a62c:	0089      	lsls	r1, r1, #2
1000a62e:	0f80      	lsrs	r0, r0, #30
1000a630:	4308      	orrs	r0, r1
1000a632:	6038      	str	r0, [r7, #0]
                             SIGNSET(orientation & 0x004), sensitivity);
    output[1] = inv_q30_mult(input[(orientation>>3) & 0x03] *
1000a634:	009b      	lsls	r3, r3, #2
1000a636:	06a0      	lsls	r0, r4, #26
1000a638:	589b      	ldr	r3, [r3, r2]
1000a63a:	17c0      	asrs	r0, r0, #31
1000a63c:	4328      	orrs	r0, r5
1000a63e:	4358      	muls	r0, r3
1000a640:	0032      	movs	r2, r6
1000a642:	464b      	mov	r3, r9
1000a644:	17c1      	asrs	r1, r0, #31
1000a646:	47c0      	blx	r8
                             SIGNSET(orientation & 0x020), sensitivity);
    output[2] = inv_q30_mult(input[(orientation>>6) & 0x03] *
1000a648:	465a      	mov	r2, fp
1000a64a:	09a3      	lsrs	r3, r4, #6
1000a64c:	4013      	ands	r3, r2
1000a64e:	4652      	mov	r2, sl
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
    output[0] = inv_q30_mult(input[orientation & 0x03] *
                             SIGNSET(orientation & 0x004), sensitivity);
    output[1] = inv_q30_mult(input[(orientation>>3) & 0x03] *
1000a650:	0089      	lsls	r1, r1, #2
1000a652:	0f80      	lsrs	r0, r0, #30
1000a654:	4308      	orrs	r0, r1
1000a656:	6078      	str	r0, [r7, #4]
                             SIGNSET(orientation & 0x020), sensitivity);
    output[2] = inv_q30_mult(input[(orientation>>6) & 0x03] *
1000a658:	009b      	lsls	r3, r3, #2
1000a65a:	05e4      	lsls	r4, r4, #23
1000a65c:	5898      	ldr	r0, [r3, r2]
1000a65e:	17e4      	asrs	r4, r4, #31
1000a660:	432c      	orrs	r4, r5
1000a662:	4360      	muls	r0, r4
1000a664:	0032      	movs	r2, r6
1000a666:	464b      	mov	r3, r9
1000a668:	17c1      	asrs	r1, r0, #31
1000a66a:	47c0      	blx	r8
1000a66c:	0089      	lsls	r1, r1, #2
1000a66e:	0f80      	lsrs	r0, r0, #30
1000a670:	4308      	orrs	r0, r1
1000a672:	60b8      	str	r0, [r7, #8]
                             SIGNSET(orientation & 0x100), sensitivity);
}
1000a674:	bc3c      	pop	{r2, r3, r4, r5}
1000a676:	4690      	mov	r8, r2
1000a678:	4699      	mov	r9, r3
1000a67a:	46a2      	mov	sl, r4
1000a67c:	46ab      	mov	fp, r5
1000a67e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a680:	10014e99 	.word	0x10014e99

1000a684 <inv_init_mpl>:
/**
 * @brief  Initializes the MPL. Should be called first and once 
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_init_mpl(void)
{
1000a684:	b510      	push	{r4, lr}
    inv_init_storage_manager();
1000a686:	4b08      	ldr	r3, [pc, #32]	; (1000a6a8 <inv_init_mpl+0x24>)
1000a688:	4798      	blx	r3

    /* initialize the start callback manager */
    INV_ERROR_CHECK(inv_init_start_manager());
1000a68a:	4c08      	ldr	r4, [pc, #32]	; (1000a6ac <inv_init_mpl+0x28>)
1000a68c:	47a0      	blx	r4
1000a68e:	2800      	cmp	r0, #0
1000a690:	d107      	bne.n	1000a6a2 <inv_init_mpl+0x1e>

    /* initialize the data builder */
    INV_ERROR_CHECK(inv_init_data_builder());
1000a692:	4c07      	ldr	r4, [pc, #28]	; (1000a6b0 <inv_init_mpl+0x2c>)
1000a694:	47a0      	blx	r4
1000a696:	2800      	cmp	r0, #0
1000a698:	d103      	bne.n	1000a6a2 <inv_init_mpl+0x1e>

    INV_ERROR_CHECK(inv_enable_results_holder());
1000a69a:	4c06      	ldr	r4, [pc, #24]	; (1000a6b4 <inv_init_mpl+0x30>)
1000a69c:	47a0      	blx	r4
1000a69e:	2800      	cmp	r0, #0
1000a6a0:	d001      	beq.n	1000a6a6 <inv_init_mpl+0x22>
1000a6a2:	47a0      	blx	r4
1000a6a4:	47a0      	blx	r4

    return INV_SUCCESS;
}
1000a6a6:	bd10      	pop	{r4, pc}
1000a6a8:	1000a9dd 	.word	0x1000a9dd
1000a6ac:	1000a911 	.word	0x1000a911
1000a6b0:	10009cfd 	.word	0x10009cfd
1000a6b4:	1000a8c1 	.word	0x1000a8c1

1000a6b8 <inv_start_mpl>:
 *  @brief  Starts the MPL. Typically called after inv_init_mpl() or after a
 *          inv_stop_mpl() to start the MPL back up an running.
 *  @return INV_SUCCESS if successful or a non-zero error code otherwise.
 */
inv_error_t inv_start_mpl(void)
{
1000a6b8:	b510      	push	{r4, lr}
    INV_ERROR_CHECK(inv_execute_mpl_start_notification());
1000a6ba:	4c03      	ldr	r4, [pc, #12]	; (1000a6c8 <inv_start_mpl+0x10>)
1000a6bc:	47a0      	blx	r4
1000a6be:	2800      	cmp	r0, #0
1000a6c0:	d001      	beq.n	1000a6c6 <inv_start_mpl+0xe>
1000a6c2:	47a0      	blx	r4
1000a6c4:	47a0      	blx	r4
    return INV_SUCCESS;
}
1000a6c6:	bd10      	pop	{r4, pc}
1000a6c8:	1000a9a9 	.word	0x1000a9a9

1000a6cc <inv_generate_results>:
 * @param[in] sensor_cal New sensor data to process.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_generate_results(struct inv_sensor_cal_t *sensor_cal)
{
    rh.sensor = sensor_cal;
1000a6cc:	2380      	movs	r3, #128	; 0x80
1000a6ce:	4a02      	ldr	r2, [pc, #8]	; (1000a6d8 <inv_generate_results+0xc>)
1000a6d0:	50d0      	str	r0, [r2, r3]
    return INV_SUCCESS;
}
1000a6d2:	2000      	movs	r0, #0
1000a6d4:	4770      	bx	lr
1000a6d6:	46c0      	nop			; (mov r8, r8)
1000a6d8:	1001a870 	.word	0x1001a870

1000a6dc <inv_start_results_holder>:
 *  inv_enable_results_holder(). Typically not called by users.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_start_results_holder(void)
{
    inv_register_data_cb(inv_generate_results, INV_PRIORITY_RESULTS_HOLDER,
1000a6dc:	21c8      	movs	r1, #200	; 0xc8
/** Function to turn on this module. This is automatically called by
 *  inv_enable_results_holder(). Typically not called by users.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_start_results_holder(void)
{
1000a6de:	b510      	push	{r4, lr}
    inv_register_data_cb(inv_generate_results, INV_PRIORITY_RESULTS_HOLDER,
1000a6e0:	2207      	movs	r2, #7
1000a6e2:	0089      	lsls	r1, r1, #2
1000a6e4:	4802      	ldr	r0, [pc, #8]	; (1000a6f0 <inv_start_results_holder+0x14>)
1000a6e6:	4b03      	ldr	r3, [pc, #12]	; (1000a6f4 <inv_start_results_holder+0x18>)
1000a6e8:	4798      	blx	r3
        INV_GYRO_NEW | INV_ACCEL_NEW | INV_MAG_NEW);
    return INV_SUCCESS;
}
1000a6ea:	2000      	movs	r0, #0
1000a6ec:	bd10      	pop	{r4, pc}
1000a6ee:	46c0      	nop			; (mov r8, r8)
1000a6f0:	1000a6cd 	.word	0x1000a6cd
1000a6f4:	10009af1 	.word	0x10009af1

1000a6f8 <inv_store_gaming_quaternion>:
* using only gyro and accel.
* @param[in] quat Length 4, Quaternion scaled by 2^30
*/
void inv_store_gaming_quaternion(const long *quat, inv_time_t timestamp)
{
    rh.status |= INV_6_AXIS_QUAT_SET;
1000a6f8:	2302      	movs	r3, #2
* Store a quaternion more suitable for gaming. This quaternion is often determined
* using only gyro and accel.
* @param[in] quat Length 4, Quaternion scaled by 2^30
*/
void inv_store_gaming_quaternion(const long *quat, inv_time_t timestamp)
{
1000a6fa:	b570      	push	{r4, r5, r6, lr}
    rh.status |= INV_6_AXIS_QUAT_SET;
1000a6fc:	4c06      	ldr	r4, [pc, #24]	; (1000a718 <inv_store_gaming_quaternion+0x20>)
* Store a quaternion more suitable for gaming. This quaternion is often determined
* using only gyro and accel.
* @param[in] quat Length 4, Quaternion scaled by 2^30
*/
void inv_store_gaming_quaternion(const long *quat, inv_time_t timestamp)
{
1000a6fe:	000d      	movs	r5, r1
    rh.status |= INV_6_AXIS_QUAT_SET;
1000a700:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    memcpy(&rh.gam_quat, quat, sizeof(rh.gam_quat));
1000a702:	0001      	movs	r1, r0
* using only gyro and accel.
* @param[in] quat Length 4, Quaternion scaled by 2^30
*/
void inv_store_gaming_quaternion(const long *quat, inv_time_t timestamp)
{
    rh.status |= INV_6_AXIS_QUAT_SET;
1000a704:	4313      	orrs	r3, r2
1000a706:	67e3      	str	r3, [r4, #124]	; 0x7c
    memcpy(&rh.gam_quat, quat, sizeof(rh.gam_quat));
1000a708:	0023      	movs	r3, r4
1000a70a:	3310      	adds	r3, #16
1000a70c:	2210      	movs	r2, #16
1000a70e:	0018      	movs	r0, r3
1000a710:	4b02      	ldr	r3, [pc, #8]	; (1000a71c <inv_store_gaming_quaternion+0x24>)
1000a712:	4798      	blx	r3
    rh.gam_timestamp = timestamp;
1000a714:	6265      	str	r5, [r4, #36]	; 0x24
}
1000a716:	bd70      	pop	{r4, r5, r6, pc}
1000a718:	1001a870 	.word	0x1001a870
1000a71c:	10017d8f 	.word	0x10017d8f

1000a720 <inv_set_compass_correction>:
* @param[in] data Quaternion Adjustment
* @param[in] timestamp Timestamp of when this is valid
*/
void inv_set_compass_correction(const long *data, inv_time_t timestamp)
{
    rh.status |= INV_COMPASS_CORRECTION_SET;
1000a720:	2301      	movs	r3, #1
* Sets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
* @param[in] data Quaternion Adjustment
* @param[in] timestamp Timestamp of when this is valid
*/
void inv_set_compass_correction(const long *data, inv_time_t timestamp)
{
1000a722:	b570      	push	{r4, r5, r6, lr}
    rh.status |= INV_COMPASS_CORRECTION_SET;
1000a724:	4c06      	ldr	r4, [pc, #24]	; (1000a740 <inv_set_compass_correction+0x20>)
* Sets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
* @param[in] data Quaternion Adjustment
* @param[in] timestamp Timestamp of when this is valid
*/
void inv_set_compass_correction(const long *data, inv_time_t timestamp)
{
1000a726:	000d      	movs	r5, r1
    rh.status |= INV_COMPASS_CORRECTION_SET;
1000a728:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    memcpy(rh.compass_correction, data, sizeof(rh.compass_correction));
1000a72a:	0001      	movs	r1, r0
* @param[in] data Quaternion Adjustment
* @param[in] timestamp Timestamp of when this is valid
*/
void inv_set_compass_correction(const long *data, inv_time_t timestamp)
{
    rh.status |= INV_COMPASS_CORRECTION_SET;
1000a72c:	4313      	orrs	r3, r2
1000a72e:	67e3      	str	r3, [r4, #124]	; 0x7c
    memcpy(rh.compass_correction, data, sizeof(rh.compass_correction));
1000a730:	0023      	movs	r3, r4
1000a732:	3340      	adds	r3, #64	; 0x40
1000a734:	2210      	movs	r2, #16
1000a736:	0018      	movs	r0, r3
1000a738:	4b02      	ldr	r3, [pc, #8]	; (1000a744 <inv_set_compass_correction+0x24>)
1000a73a:	4798      	blx	r3
    rh.nav_timestamp = timestamp;
1000a73c:	6225      	str	r5, [r4, #32]
}
1000a73e:	bd70      	pop	{r4, r5, r6, pc}
1000a740:	1001a870 	.word	0x1001a870
1000a744:	10017d8f 	.word	0x10017d8f

1000a748 <inv_get_compass_correction>:
* Gets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
* @param[out] data Quaternion Adjustment
* @param[out] timestamp Timestamp of when this is valid
*/
void inv_get_compass_correction(long *data, inv_time_t *timestamp)
{
1000a748:	b570      	push	{r4, r5, r6, lr}
    memcpy(data, rh.compass_correction, sizeof(rh.compass_correction));
1000a74a:	4c05      	ldr	r4, [pc, #20]	; (1000a760 <inv_get_compass_correction+0x18>)
* Gets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
* @param[out] data Quaternion Adjustment
* @param[out] timestamp Timestamp of when this is valid
*/
void inv_get_compass_correction(long *data, inv_time_t *timestamp)
{
1000a74c:	000d      	movs	r5, r1
    memcpy(data, rh.compass_correction, sizeof(rh.compass_correction));
1000a74e:	0021      	movs	r1, r4
1000a750:	2210      	movs	r2, #16
1000a752:	3140      	adds	r1, #64	; 0x40
1000a754:	4b03      	ldr	r3, [pc, #12]	; (1000a764 <inv_get_compass_correction+0x1c>)
1000a756:	4798      	blx	r3
    *timestamp = rh.nav_timestamp;
1000a758:	6a23      	ldr	r3, [r4, #32]
1000a75a:	602b      	str	r3, [r5, #0]
}
1000a75c:	bd70      	pop	{r4, r5, r6, pc}
1000a75e:	46c0      	nop			; (mov r8, r8)
1000a760:	1001a870 	.word	0x1001a870
1000a764:	10017d8f 	.word	0x10017d8f

1000a768 <inv_get_acc_state>:
/** Gets the accel state set by inv_set_acc_state()
 * @return accel state.
 */
int inv_get_acc_state()
{
    return rh.acc_state;
1000a768:	4b01      	ldr	r3, [pc, #4]	; (1000a770 <inv_get_acc_state+0x8>)
1000a76a:	6d18      	ldr	r0, [r3, #80]	; 0x50
}
1000a76c:	4770      	bx	lr
1000a76e:	46c0      	nop			; (mov r8, r8)
1000a770:	1001a870 	.word	0x1001a870

1000a774 <inv_get_motion_state>:
* @param[out] cntr Number of previous times a no motion event has occured in a row.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
int inv_get_motion_state(unsigned int *cntr)
{
    *cntr = rh.motion_state_counter;
1000a774:	4b02      	ldr	r3, [pc, #8]	; (1000a780 <inv_get_motion_state+0xc>)
1000a776:	6e9a      	ldr	r2, [r3, #104]	; 0x68
1000a778:	6002      	str	r2, [r0, #0]
    return rh.motion_state;
1000a77a:	2264      	movs	r2, #100	; 0x64
1000a77c:	5c98      	ldrb	r0, [r3, r2]
}
1000a77e:	4770      	bx	lr
1000a780:	1001a870 	.word	0x1001a870

1000a784 <inv_set_motion_state>:
 *            and INV_MOTION is moving.
 */
void inv_set_motion_state(unsigned char state)
{
    long set;
    if (state == rh.motion_state) {
1000a784:	2264      	movs	r2, #100	; 0x64
/** Sets the motion state
 * @param[in] state motion state where INV_NO_MOTION is not moving
 *            and INV_MOTION is moving.
 */
void inv_set_motion_state(unsigned char state)
{
1000a786:	b510      	push	{r4, lr}
    long set;
    if (state == rh.motion_state) {
1000a788:	4b0c      	ldr	r3, [pc, #48]	; (1000a7bc <inv_set_motion_state+0x38>)
1000a78a:	5c99      	ldrb	r1, [r3, r2]
1000a78c:	4281      	cmp	r1, r0
1000a78e:	d00c      	beq.n	1000a7aa <inv_set_motion_state+0x26>
        } else {
            rh.motion_state_counter = 0;
        }
        return;
    }
    rh.motion_state_counter = 0;
1000a790:	2100      	movs	r1, #0
    rh.motion_state = state;
1000a792:	5498      	strb	r0, [r3, r2]
    /* Equivalent to set = state, but #define's may change. */
    if (state == INV_MOTION)
        set = INV_MSG_MOTION_EVENT;
    else
        set = INV_MSG_NO_MOTION_EVENT;
1000a794:	3801      	subs	r0, #1
        } else {
            rh.motion_state_counter = 0;
        }
        return;
    }
    rh.motion_state_counter = 0;
1000a796:	6699      	str	r1, [r3, #104]	; 0x68
    rh.motion_state = state;
    /* Equivalent to set = state, but #define's may change. */
    if (state == INV_MOTION)
        set = INV_MSG_MOTION_EVENT;
    else
        set = INV_MSG_NO_MOTION_EVENT;
1000a798:	4243      	negs	r3, r0
1000a79a:	4143      	adcs	r3, r0
1000a79c:	2002      	movs	r0, #2
    inv_set_message(set, (INV_MSG_MOTION_EVENT | INV_MSG_NO_MOTION_EVENT), 0);
1000a79e:	2200      	movs	r2, #0
    rh.motion_state = state;
    /* Equivalent to set = state, but #define's may change. */
    if (state == INV_MOTION)
        set = INV_MSG_MOTION_EVENT;
    else
        set = INV_MSG_NO_MOTION_EVENT;
1000a7a0:	1ac0      	subs	r0, r0, r3
    inv_set_message(set, (INV_MSG_MOTION_EVENT | INV_MSG_NO_MOTION_EVENT), 0);
1000a7a2:	3103      	adds	r1, #3
1000a7a4:	4b06      	ldr	r3, [pc, #24]	; (1000a7c0 <inv_set_motion_state+0x3c>)
1000a7a6:	4798      	blx	r3
}
1000a7a8:	bd10      	pop	{r4, pc}
 */
void inv_set_motion_state(unsigned char state)
{
    long set;
    if (state == rh.motion_state) {
        if (state == INV_NO_MOTION) {
1000a7aa:	2902      	cmp	r1, #2
1000a7ac:	d002      	beq.n	1000a7b4 <inv_set_motion_state+0x30>
            rh.motion_state_counter++;
        } else {
            rh.motion_state_counter = 0;
1000a7ae:	2200      	movs	r2, #0
1000a7b0:	669a      	str	r2, [r3, #104]	; 0x68
1000a7b2:	e7f9      	b.n	1000a7a8 <inv_set_motion_state+0x24>
void inv_set_motion_state(unsigned char state)
{
    long set;
    if (state == rh.motion_state) {
        if (state == INV_NO_MOTION) {
            rh.motion_state_counter++;
1000a7b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
1000a7b6:	3201      	adds	r2, #1
1000a7b8:	669a      	str	r2, [r3, #104]	; 0x68
1000a7ba:	e7f5      	b.n	1000a7a8 <inv_set_motion_state+0x24>
1000a7bc:	1001a870 	.word	0x1001a870
1000a7c0:	10009d49 	.word	0x10009d49

1000a7c4 <inv_get_local_field>:
* @param[out] data Local earth's magnetic field in uT scaled by 2^16.
*            Length = 3. Y typically points north, Z typically points down in
*                        northern hemisphere and up in southern hemisphere.
*/
void inv_get_local_field(long *data)
{
1000a7c4:	b510      	push	{r4, lr}
    memcpy(data, rh.local_field, sizeof(rh.local_field));
1000a7c6:	4903      	ldr	r1, [pc, #12]	; (1000a7d4 <inv_get_local_field+0x10>)
1000a7c8:	220c      	movs	r2, #12
1000a7ca:	3128      	adds	r1, #40	; 0x28
1000a7cc:	4b02      	ldr	r3, [pc, #8]	; (1000a7d8 <inv_get_local_field+0x14>)
1000a7ce:	4798      	blx	r3
}
1000a7d0:	bd10      	pop	{r4, pc}
1000a7d2:	46c0      	nop			; (mov r8, r8)
1000a7d4:	1001a870 	.word	0x1001a870
1000a7d8:	10017d8f 	.word	0x10017d8f

1000a7dc <inv_get_gravity>:
/** Gets gravity vector
 * @param[out] data gravity vector in body frame scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_gravity(long *data)
{
1000a7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    data[0] =
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
1000a7de:	4c12      	ldr	r4, [pc, #72]	; (1000a828 <inv_get_gravity+0x4c>)
1000a7e0:	4d12      	ldr	r5, [pc, #72]	; (1000a82c <inv_get_gravity+0x50>)
/** Gets gravity vector
 * @param[out] data gravity vector in body frame scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_gravity(long *data)
{
1000a7e2:	0006      	movs	r6, r0
    data[0] =
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
1000a7e4:	68e1      	ldr	r1, [r4, #12]
1000a7e6:	6860      	ldr	r0, [r4, #4]
1000a7e8:	47a8      	blx	r5
1000a7ea:	6821      	ldr	r1, [r4, #0]
1000a7ec:	0007      	movs	r7, r0
1000a7ee:	68a0      	ldr	r0, [r4, #8]
1000a7f0:	47a8      	blx	r5
 * @param[out] data gravity vector in body frame scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_gravity(long *data)
{
    data[0] =
1000a7f2:	1a3f      	subs	r7, r7, r0
1000a7f4:	6037      	str	r7, [r6, #0]
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
    data[1] =
        inv_q29_mult(rh.nav_quat[2], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[1], rh.nav_quat[0]);
1000a7f6:	68e1      	ldr	r1, [r4, #12]
1000a7f8:	68a0      	ldr	r0, [r4, #8]
1000a7fa:	47a8      	blx	r5
1000a7fc:	6821      	ldr	r1, [r4, #0]
1000a7fe:	0007      	movs	r7, r0
1000a800:	6860      	ldr	r0, [r4, #4]
1000a802:	47a8      	blx	r5
 */
inv_error_t inv_get_gravity(long *data)
{
    data[0] =
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
    data[1] =
1000a804:	1838      	adds	r0, r7, r0
1000a806:	6070      	str	r0, [r6, #4]
        inv_q29_mult(rh.nav_quat[2], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[1], rh.nav_quat[0]);
    data[2] =
        (inv_q29_mult(rh.nav_quat[3], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[0], rh.nav_quat[0])) -
1000a808:	68e1      	ldr	r1, [r4, #12]
1000a80a:	0008      	movs	r0, r1
1000a80c:	47a8      	blx	r5
1000a80e:	0007      	movs	r7, r0
1000a810:	6820      	ldr	r0, [r4, #0]
1000a812:	0001      	movs	r1, r0
1000a814:	47a8      	blx	r5
{
    data[0] =
        inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
    data[1] =
        inv_q29_mult(rh.nav_quat[2], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[1], rh.nav_quat[0]);
    data[2] =
1000a816:	23c0      	movs	r3, #192	; 0xc0
1000a818:	061b      	lsls	r3, r3, #24
1000a81a:	469c      	mov	ip, r3
1000a81c:	1838      	adds	r0, r7, r0
1000a81e:	4460      	add	r0, ip
1000a820:	60b0      	str	r0, [r6, #8]
        (inv_q29_mult(rh.nav_quat[3], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[0], rh.nav_quat[0])) -
        1073741824L;

    return INV_SUCCESS;
}
1000a822:	2000      	movs	r0, #0
1000a824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a826:	46c0      	nop			; (mov r8, r8)
1000a828:	1001a870 	.word	0x1001a870
1000a82c:	10009d75 	.word	0x10009d75

1000a830 <inv_get_linear_accel.part.0>:
 *  @param[out] data    3-element vector of accelerometer data in body frame
 *                with gravity removed
 *  @return     INV_SUCCESS if successful
 *              INV_ERROR_INVALID_PARAMETER if invalid input pointer
 */
inv_error_t inv_get_linear_accel(long *data)
1000a830:	b510      	push	{r4, lr}
1000a832:	0004      	movs	r4, r0
1000a834:	b086      	sub	sp, #24
{
    long gravity[3];

    if (data != NULL)
    {
        inv_get_accel_set(data, NULL, NULL);
1000a836:	2200      	movs	r2, #0
1000a838:	2100      	movs	r1, #0
1000a83a:	4b0c      	ldr	r3, [pc, #48]	; (1000a86c <inv_get_linear_accel.part.0+0x3c>)
1000a83c:	4798      	blx	r3
        inv_get_gravity(gravity);
1000a83e:	a803      	add	r0, sp, #12
1000a840:	4b0b      	ldr	r3, [pc, #44]	; (1000a870 <inv_get_linear_accel.part.0+0x40>)
1000a842:	4798      	blx	r3
        return INV_SUCCESS;
    }
    else {
        return INV_ERROR_INVALID_PARAMETER;
    }
}
1000a844:	2000      	movs	r0, #0

    if (data != NULL)
    {
        inv_get_accel_set(data, NULL, NULL);
        inv_get_gravity(gravity);
        data[0] -= gravity[0] >> 14;
1000a846:	9b03      	ldr	r3, [sp, #12]
1000a848:	6822      	ldr	r2, [r4, #0]
1000a84a:	139b      	asrs	r3, r3, #14
1000a84c:	1ad3      	subs	r3, r2, r3
1000a84e:	6023      	str	r3, [r4, #0]
        data[1] -= gravity[1] >> 14;
1000a850:	9b04      	ldr	r3, [sp, #16]
1000a852:	6862      	ldr	r2, [r4, #4]
1000a854:	9301      	str	r3, [sp, #4]
1000a856:	139b      	asrs	r3, r3, #14
1000a858:	1ad3      	subs	r3, r2, r3
1000a85a:	6063      	str	r3, [r4, #4]
        data[2] -= gravity[2] >> 14;
1000a85c:	9b05      	ldr	r3, [sp, #20]
1000a85e:	68a2      	ldr	r2, [r4, #8]
1000a860:	139b      	asrs	r3, r3, #14
1000a862:	1ad3      	subs	r3, r2, r3
1000a864:	60a3      	str	r3, [r4, #8]
        return INV_SUCCESS;
    }
    else {
        return INV_ERROR_INVALID_PARAMETER;
    }
}
1000a866:	b006      	add	sp, #24
1000a868:	bd10      	pop	{r4, pc}
1000a86a:	46c0      	nop			; (mov r8, r8)
1000a86c:	10009c51 	.word	0x10009c51
1000a870:	1000a7dd 	.word	0x1000a7dd

1000a874 <inv_get_6axis_quaternion>:
/** Returns a quaternion based only on gyro and accel.
 * @param[out] data 6-axis  gyro and accel quaternion scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_6axis_quaternion(long *data)
{
1000a874:	b510      	push	{r4, lr}
    memcpy(data, rh.gam_quat, sizeof(rh.gam_quat));
1000a876:	4903      	ldr	r1, [pc, #12]	; (1000a884 <inv_get_6axis_quaternion+0x10>)
1000a878:	2210      	movs	r2, #16
1000a87a:	3110      	adds	r1, #16
1000a87c:	4b02      	ldr	r3, [pc, #8]	; (1000a888 <inv_get_6axis_quaternion+0x14>)
1000a87e:	4798      	blx	r3
    return INV_SUCCESS;
}
1000a880:	2000      	movs	r0, #0
1000a882:	bd10      	pop	{r4, pc}
1000a884:	1001a870 	.word	0x1001a870
1000a888:	10017d8f 	.word	0x10017d8f

1000a88c <inv_init_results_holder>:
* enable function inv_enable_results_holder(). It may be called any time the feature is enabled, but
* is typically not needed to be called by outside callers.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_init_results_holder(void)
{
1000a88c:	b510      	push	{r4, lr}
    memset(&rh, 0, sizeof(rh));
1000a88e:	4c09      	ldr	r4, [pc, #36]	; (1000a8b4 <inv_init_results_holder+0x28>)
1000a890:	2288      	movs	r2, #136	; 0x88
1000a892:	2100      	movs	r1, #0
1000a894:	0020      	movs	r0, r4
1000a896:	4b08      	ldr	r3, [pc, #32]	; (1000a8b8 <inv_init_results_holder+0x2c>)
1000a898:	4798      	blx	r3
    rh.mag_scale[0] = 1L<<30;
1000a89a:	2380      	movs	r3, #128	; 0x80
1000a89c:	05db      	lsls	r3, r3, #23
1000a89e:	6363      	str	r3, [r4, #52]	; 0x34
    rh.mag_scale[1] = 1L<<30;
1000a8a0:	63a3      	str	r3, [r4, #56]	; 0x38
    rh.mag_scale[2] = 1L<<30;
1000a8a2:	63e3      	str	r3, [r4, #60]	; 0x3c
    rh.compass_correction[0] = 1L<<30;
1000a8a4:	6423      	str	r3, [r4, #64]	; 0x40
    rh.gam_quat[0] = 1L<<30;
1000a8a6:	6123      	str	r3, [r4, #16]
    rh.nav_quat[0] = 1L<<30;
1000a8a8:	6023      	str	r3, [r4, #0]
    rh.quat_confidence_interval = (float)M_PI;
1000a8aa:	2384      	movs	r3, #132	; 0x84
1000a8ac:	4a03      	ldr	r2, [pc, #12]	; (1000a8bc <inv_init_results_holder+0x30>)
    return INV_SUCCESS;
}
1000a8ae:	2000      	movs	r0, #0
    rh.mag_scale[1] = 1L<<30;
    rh.mag_scale[2] = 1L<<30;
    rh.compass_correction[0] = 1L<<30;
    rh.gam_quat[0] = 1L<<30;
    rh.nav_quat[0] = 1L<<30;
    rh.quat_confidence_interval = (float)M_PI;
1000a8b0:	50e2      	str	r2, [r4, r3]
    return INV_SUCCESS;
}
1000a8b2:	bd10      	pop	{r4, pc}
1000a8b4:	1001a870 	.word	0x1001a870
1000a8b8:	10017dcb 	.word	0x10017dcb
1000a8bc:	40490fdb 	.word	0x40490fdb

1000a8c0 <inv_enable_results_holder>:

/** Turns on storage of results.
*/
inv_error_t inv_enable_results_holder()
{
1000a8c0:	b510      	push	{r4, lr}
    inv_error_t result;
    result = inv_init_results_holder();
1000a8c2:	4b04      	ldr	r3, [pc, #16]	; (1000a8d4 <inv_enable_results_holder+0x14>)
1000a8c4:	4798      	blx	r3
    if ( result ) {
1000a8c6:	2800      	cmp	r0, #0
1000a8c8:	d102      	bne.n	1000a8d0 <inv_enable_results_holder+0x10>
        return result;
    }

    result = inv_register_mpl_start_notification(inv_start_results_holder);
1000a8ca:	4803      	ldr	r0, [pc, #12]	; (1000a8d8 <inv_enable_results_holder+0x18>)
1000a8cc:	4b03      	ldr	r3, [pc, #12]	; (1000a8dc <inv_enable_results_holder+0x1c>)
1000a8ce:	4798      	blx	r3
    return result;
}
1000a8d0:	bd10      	pop	{r4, pc}
1000a8d2:	46c0      	nop			; (mov r8, r8)
1000a8d4:	1000a88d 	.word	0x1000a88d
1000a8d8:	1000a6dd 	.word	0x1000a6dd
1000a8dc:	1000a989 	.word	0x1000a989

1000a8e0 <inv_got_compass_bias>:
 * @return return 1 if we know the compass bias, 0 if not.
 *            it is set with inv_set_compass_bias_found()
 */
int inv_got_compass_bias()
{
    return rh.got_compass_bias;
1000a8e0:	4b01      	ldr	r3, [pc, #4]	; (1000a8e8 <inv_got_compass_bias+0x8>)
1000a8e2:	6f18      	ldr	r0, [r3, #112]	; 0x70
}
1000a8e4:	4770      	bx	lr
1000a8e6:	46c0      	nop			; (mov r8, r8)
1000a8e8:	1001a870 	.word	0x1001a870

1000a8ec <inv_set_compass_bias_found>:
 * @param[in] state Set to 1 if we know the compass bias. 
 *            Can be retrieved with inv_got_compass_bias()
 */
void inv_set_compass_bias_found(int state)
{
    rh.got_compass_bias = state;
1000a8ec:	4b01      	ldr	r3, [pc, #4]	; (1000a8f4 <inv_set_compass_bias_found+0x8>)
1000a8ee:	6718      	str	r0, [r3, #112]	; 0x70
}
1000a8f0:	4770      	bx	lr
1000a8f2:	46c0      	nop			; (mov r8, r8)
1000a8f4:	1001a870 	.word	0x1001a870

1000a8f8 <inv_get_linear_accel>:
 *                with gravity removed
 *  @return     INV_SUCCESS if successful
 *              INV_ERROR_INVALID_PARAMETER if invalid input pointer
 */
inv_error_t inv_get_linear_accel(long *data)
{
1000a8f8:	b510      	push	{r4, lr}
        data[1] -= gravity[1] >> 14;
        data[2] -= gravity[2] >> 14;
        return INV_SUCCESS;
    }
    else {
        return INV_ERROR_INVALID_PARAMETER;
1000a8fa:	2316      	movs	r3, #22
 */
inv_error_t inv_get_linear_accel(long *data)
{
    long gravity[3];

    if (data != NULL)
1000a8fc:	2800      	cmp	r0, #0
1000a8fe:	d002      	beq.n	1000a906 <inv_get_linear_accel+0xe>
1000a900:	4b02      	ldr	r3, [pc, #8]	; (1000a90c <inv_get_linear_accel+0x14>)
1000a902:	4798      	blx	r3
1000a904:	0003      	movs	r3, r0
        return INV_SUCCESS;
    }
    else {
        return INV_ERROR_INVALID_PARAMETER;
    }
}
1000a906:	0018      	movs	r0, r3
1000a908:	bd10      	pop	{r4, pc}
1000a90a:	46c0      	nop			; (mov r8, r8)
1000a90c:	1000a831 	.word	0x1000a831

1000a910 <inv_init_start_manager>:

/** Initilize the start manager. Typically called by inv_start_mpl();
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_init_start_manager(void)
{
1000a910:	b510      	push	{r4, lr}
    memset(&inv_start_cb, 0, sizeof(inv_start_cb));
1000a912:	2254      	movs	r2, #84	; 0x54
1000a914:	2100      	movs	r1, #0
1000a916:	4802      	ldr	r0, [pc, #8]	; (1000a920 <inv_init_start_manager+0x10>)
1000a918:	4b02      	ldr	r3, [pc, #8]	; (1000a924 <inv_init_start_manager+0x14>)
1000a91a:	4798      	blx	r3
    return INV_SUCCESS;
}
1000a91c:	2000      	movs	r0, #0
1000a91e:	bd10      	pop	{r4, pc}
1000a920:	1001a8f8 	.word	0x1001a8f8
1000a924:	10017dcb 	.word	0x10017dcb

1000a928 <inv_unregister_mpl_start_notification>:
/** Removes a callback from start notification
* @param[in] start_cb function to remove from start notification
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_unregister_mpl_start_notification(inv_error_t (*start_cb)(void))
{
1000a928:	b570      	push	{r4, r5, r6, lr}
    int kk;

    for (kk=0; kk<inv_start_cb.num_cb; ++kk) {
1000a92a:	4d15      	ldr	r5, [pc, #84]	; (1000a980 <inv_unregister_mpl_start_notification+0x58>)
1000a92c:	682c      	ldr	r4, [r5, #0]
1000a92e:	2c00      	cmp	r4, #0
1000a930:	dd0e      	ble.n	1000a950 <inv_unregister_mpl_start_notification+0x28>
        if (inv_start_cb.start_cb[kk] == start_cb) {
1000a932:	686b      	ldr	r3, [r5, #4]
1000a934:	4298      	cmp	r0, r3
1000a936:	d00d      	beq.n	1000a954 <inv_unregister_mpl_start_notification+0x2c>
1000a938:	002a      	movs	r2, r5
1000a93a:	2300      	movs	r3, #0
1000a93c:	3208      	adds	r2, #8
1000a93e:	e004      	b.n	1000a94a <inv_unregister_mpl_start_notification+0x22>
1000a940:	3204      	adds	r2, #4
1000a942:	1f11      	subs	r1, r2, #4
1000a944:	6809      	ldr	r1, [r1, #0]
1000a946:	4281      	cmp	r1, r0
1000a948:	d005      	beq.n	1000a956 <inv_unregister_mpl_start_notification+0x2e>
*/
inv_error_t inv_unregister_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    int kk;

    for (kk=0; kk<inv_start_cb.num_cb; ++kk) {
1000a94a:	3301      	adds	r3, #1
1000a94c:	42a3      	cmp	r3, r4
1000a94e:	d1f7      	bne.n	1000a940 <inv_unregister_mpl_start_notification+0x18>
            }
            inv_start_cb.num_cb--;
            return INV_SUCCESS;
        }
    }
    return INV_ERROR_INVALID_PARAMETER;
1000a950:	2016      	movs	r0, #22
}
1000a952:	bd70      	pop	{r4, r5, r6, pc}
*/
inv_error_t inv_unregister_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    int kk;

    for (kk=0; kk<inv_start_cb.num_cb; ++kk) {
1000a954:	2300      	movs	r3, #0
        if (inv_start_cb.start_cb[kk] == start_cb) {
            // Found the match
            if (kk != (inv_start_cb.num_cb-1)) {
1000a956:	1e62      	subs	r2, r4, #1
1000a958:	429a      	cmp	r2, r3
1000a95a:	d00d      	beq.n	1000a978 <inv_unregister_mpl_start_notification+0x50>
                memmove(&inv_start_cb.start_cb[kk],
1000a95c:	1c59      	adds	r1, r3, #1
1000a95e:	1ae2      	subs	r2, r4, r3
1000a960:	0089      	lsls	r1, r1, #2
1000a962:	009b      	lsls	r3, r3, #2
1000a964:	18eb      	adds	r3, r5, r3
1000a966:	3a01      	subs	r2, #1
1000a968:	1869      	adds	r1, r5, r1
1000a96a:	0092      	lsls	r2, r2, #2
1000a96c:	1d18      	adds	r0, r3, #4
1000a96e:	3104      	adds	r1, #4
1000a970:	4b04      	ldr	r3, [pc, #16]	; (1000a984 <inv_unregister_mpl_start_notification+0x5c>)
1000a972:	4798      	blx	r3
1000a974:	682b      	ldr	r3, [r5, #0]
1000a976:	1e5a      	subs	r2, r3, #1
                    &inv_start_cb.start_cb[kk+1],
                    (inv_start_cb.num_cb-kk-1)*sizeof(inv_start_cb_func));
            }
            inv_start_cb.num_cb--;
1000a978:	602a      	str	r2, [r5, #0]
            return INV_SUCCESS;
1000a97a:	2000      	movs	r0, #0
1000a97c:	e7e9      	b.n	1000a952 <inv_unregister_mpl_start_notification+0x2a>
1000a97e:	46c0      	nop			; (mov r8, r8)
1000a980:	1001a8f8 	.word	0x1001a8f8
1000a984:	10017da1 	.word	0x10017da1

1000a988 <inv_register_mpl_start_notification>:
*            called.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    if (inv_start_cb.num_cb >= INV_MAX_START_CB)
1000a988:	4a06      	ldr	r2, [pc, #24]	; (1000a9a4 <inv_register_mpl_start_notification+0x1c>)
        return INV_ERROR_INVALID_PARAMETER;
1000a98a:	2116      	movs	r1, #22
*            called.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    if (inv_start_cb.num_cb >= INV_MAX_START_CB)
1000a98c:	6813      	ldr	r3, [r2, #0]
1000a98e:	2b13      	cmp	r3, #19
1000a990:	dd01      	ble.n	1000a996 <inv_register_mpl_start_notification+0xe>
        return INV_ERROR_INVALID_PARAMETER;

    inv_start_cb.start_cb[inv_start_cb.num_cb] = start_cb;
    inv_start_cb.num_cb++;
    return INV_SUCCESS;
}
1000a992:	0008      	movs	r0, r1
1000a994:	4770      	bx	lr
inv_error_t inv_register_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    if (inv_start_cb.num_cb >= INV_MAX_START_CB)
        return INV_ERROR_INVALID_PARAMETER;

    inv_start_cb.start_cb[inv_start_cb.num_cb] = start_cb;
1000a996:	0099      	lsls	r1, r3, #2
1000a998:	1851      	adds	r1, r2, r1
    inv_start_cb.num_cb++;
1000a99a:	3301      	adds	r3, #1
inv_error_t inv_register_mpl_start_notification(inv_error_t (*start_cb)(void))
{
    if (inv_start_cb.num_cb >= INV_MAX_START_CB)
        return INV_ERROR_INVALID_PARAMETER;

    inv_start_cb.start_cb[inv_start_cb.num_cb] = start_cb;
1000a99c:	6048      	str	r0, [r1, #4]
    inv_start_cb.num_cb++;
1000a99e:	6013      	str	r3, [r2, #0]
    return INV_SUCCESS;
1000a9a0:	2100      	movs	r1, #0
1000a9a2:	e7f6      	b.n	1000a992 <inv_register_mpl_start_notification+0xa>
1000a9a4:	1001a8f8 	.word	0x1001a8f8

1000a9a8 <inv_execute_mpl_start_notification>:
/** Callback all the functions that want to be notified when inv_start_mpl() was
* called.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_execute_mpl_start_notification(void)
{
1000a9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    inv_error_t result,first_error;
    int kk;

    first_error = INV_SUCCESS;

    for (kk = 0; kk < inv_start_cb.num_cb; ++kk) {
1000a9aa:	4e0b      	ldr	r6, [pc, #44]	; (1000a9d8 <inv_execute_mpl_start_notification+0x30>)
1000a9ac:	6833      	ldr	r3, [r6, #0]
1000a9ae:	2b00      	cmp	r3, #0
1000a9b0:	dd10      	ble.n	1000a9d4 <inv_execute_mpl_start_notification+0x2c>
1000a9b2:	2400      	movs	r4, #0
1000a9b4:	2700      	movs	r7, #0
1000a9b6:	1d35      	adds	r5, r6, #4
        result = inv_start_cb.start_cb[kk]();
1000a9b8:	682b      	ldr	r3, [r5, #0]
1000a9ba:	4798      	blx	r3
        if (result && (first_error == INV_SUCCESS)) {
1000a9bc:	2800      	cmp	r0, #0
1000a9be:	d002      	beq.n	1000a9c6 <inv_execute_mpl_start_notification+0x1e>
1000a9c0:	2f00      	cmp	r7, #0
1000a9c2:	d100      	bne.n	1000a9c6 <inv_execute_mpl_start_notification+0x1e>
1000a9c4:	0007      	movs	r7, r0
    inv_error_t result,first_error;
    int kk;

    first_error = INV_SUCCESS;

    for (kk = 0; kk < inv_start_cb.num_cb; ++kk) {
1000a9c6:	6833      	ldr	r3, [r6, #0]
1000a9c8:	3401      	adds	r4, #1
1000a9ca:	3504      	adds	r5, #4
1000a9cc:	42a3      	cmp	r3, r4
1000a9ce:	dcf3      	bgt.n	1000a9b8 <inv_execute_mpl_start_notification+0x10>
        if (result && (first_error == INV_SUCCESS)) {
            first_error = result;
        }
    }
    return first_error;
}
1000a9d0:	0038      	movs	r0, r7
1000a9d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inv_error_t inv_execute_mpl_start_notification(void)
{
    inv_error_t result,first_error;
    int kk;

    first_error = INV_SUCCESS;
1000a9d4:	2700      	movs	r7, #0
1000a9d6:	e7fb      	b.n	1000a9d0 <inv_execute_mpl_start_notification+0x28>
1000a9d8:	1001a8f8 	.word	0x1001a8f8

1000a9dc <inv_init_storage_manager>:

/** Should be called once before using any of the storage methods. Typically
* called first by inv_init_mpl().*/
void inv_init_storage_manager()
{
    memset(&ds, 0, sizeof(ds));
1000a9dc:	22cc      	movs	r2, #204	; 0xcc
static struct data_storage_t ds;

/** Should be called once before using any of the storage methods. Typically
* called first by inv_init_mpl().*/
void inv_init_storage_manager()
{
1000a9de:	b510      	push	{r4, lr}
    memset(&ds, 0, sizeof(ds));
1000a9e0:	4c04      	ldr	r4, [pc, #16]	; (1000a9f4 <inv_init_storage_manager+0x18>)
1000a9e2:	0052      	lsls	r2, r2, #1
1000a9e4:	2100      	movs	r1, #0
1000a9e6:	0020      	movs	r0, r4
1000a9e8:	4b03      	ldr	r3, [pc, #12]	; (1000a9f8 <inv_init_storage_manager+0x1c>)
1000a9ea:	4798      	blx	r3
    ds.total_size = sizeof(struct data_header_t);
1000a9ec:	230c      	movs	r3, #12
1000a9ee:	6063      	str	r3, [r4, #4]
}
1000a9f0:	bd10      	pop	{r4, pc}
1000a9f2:	46c0      	nop			; (mov r8, r8)
1000a9f4:	1001a94c 	.word	0x1001a94c
1000a9f8:	10017dcb 	.word	0x10017dcb

1000a9fc <inv_register_load_store>:
*                    The key should change when your type of data for storage changes.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_load_store(inv_error_t (*load_func)(const unsigned char *data),
                                    inv_error_t (*save_func)(unsigned char *data), size_t size, unsigned int key)
{
1000a9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a9fe:	4647      	mov	r7, r8
1000aa00:	b480      	push	{r7}
1000aa02:	4688      	mov	r8, r1
    int kk;
    // Check if this has been registered already
    for (kk=0; kk<ds.num; ++kk) {
1000aa04:	491b      	ldr	r1, [pc, #108]	; (1000aa74 <inv_register_load_store+0x78>)
*                    The key should change when your type of data for storage changes.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_load_store(inv_error_t (*load_func)(const unsigned char *data),
                                    inv_error_t (*save_func)(unsigned char *data), size_t size, unsigned int key)
{
1000aa06:	4684      	mov	ip, r0
    int kk;
    // Check if this has been registered already
    for (kk=0; kk<ds.num; ++kk) {
1000aa08:	680f      	ldr	r7, [r1, #0]
1000aa0a:	2f00      	cmp	r7, #0
1000aa0c:	dd18      	ble.n	1000aa40 <inv_register_load_store+0x44>
        if (key == ds.hd[kk].key) {
1000aa0e:	20b0      	movs	r0, #176	; 0xb0
1000aa10:	580c      	ldr	r4, [r1, r0]
1000aa12:	42a3      	cmp	r3, r4
1000aa14:	d012      	beq.n	1000aa3c <inv_register_load_store+0x40>
1000aa16:	000d      	movs	r5, r1
1000aa18:	2400      	movs	r4, #0
1000aa1a:	35bc      	adds	r5, #188	; 0xbc
1000aa1c:	e005      	b.n	1000aa2a <inv_register_load_store+0x2e>
1000aa1e:	350c      	adds	r5, #12
1000aa20:	002e      	movs	r6, r5
1000aa22:	3e0c      	subs	r6, #12
1000aa24:	6836      	ldr	r6, [r6, #0]
1000aa26:	429e      	cmp	r6, r3
1000aa28:	d008      	beq.n	1000aa3c <inv_register_load_store+0x40>
inv_error_t inv_register_load_store(inv_error_t (*load_func)(const unsigned char *data),
                                    inv_error_t (*save_func)(unsigned char *data), size_t size, unsigned int key)
{
    int kk;
    // Check if this has been registered already
    for (kk=0; kk<ds.num; ++kk) {
1000aa2a:	3401      	adds	r4, #1
1000aa2c:	42bc      	cmp	r4, r7
1000aa2e:	d1f6      	bne.n	1000aa1e <inv_register_load_store+0x22>
        if (key == ds.hd[kk].key) {
            return INV_ERROR_INVALID_PARAMETER;
1000aa30:	2016      	movs	r0, #22
        }
    }
    // Make sure there is room
    if (ds.num >= NUM_STORAGE_BOXES) {
1000aa32:	2f13      	cmp	r7, #19
1000aa34:	dd04      	ble.n	1000aa40 <inv_register_load_store+0x44>
    ds.save[ds.num] = save_func;
    ds.total_size += size + sizeof(struct data_header_t);
    ds.num++;

    return INV_SUCCESS;
}
1000aa36:	bc04      	pop	{r2}
1000aa38:	4690      	mov	r8, r2
1000aa3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    int kk;
    // Check if this has been registered already
    for (kk=0; kk<ds.num; ++kk) {
        if (key == ds.hd[kk].key) {
            return INV_ERROR_INVALID_PARAMETER;
1000aa3c:	2016      	movs	r0, #22
1000aa3e:	e7fa      	b.n	1000aa36 <inv_register_load_store+0x3a>
    // Make sure there is room
    if (ds.num >= NUM_STORAGE_BOXES) {
        return INV_ERROR_INVALID_PARAMETER;
    }
    // Add to list
    ds.hd[ds.num].key = key;
1000aa40:	0078      	lsls	r0, r7, #1
1000aa42:	19c0      	adds	r0, r0, r7
1000aa44:	0080      	lsls	r0, r0, #2
1000aa46:	1808      	adds	r0, r1, r0
1000aa48:	0004      	movs	r4, r0
    ds.hd[ds.num].size = size;
1000aa4a:	30a8      	adds	r0, #168	; 0xa8
1000aa4c:	6002      	str	r2, [r0, #0]
    ds.load[ds.num] = load_func;
1000aa4e:	4660      	mov	r0, ip
    // Make sure there is room
    if (ds.num >= NUM_STORAGE_BOXES) {
        return INV_ERROR_INVALID_PARAMETER;
    }
    // Add to list
    ds.hd[ds.num].key = key;
1000aa50:	34b0      	adds	r4, #176	; 0xb0
1000aa52:	6023      	str	r3, [r4, #0]
    ds.hd[ds.num].size = size;
    ds.load[ds.num] = load_func;
1000aa54:	1cbb      	adds	r3, r7, #2
1000aa56:	009b      	lsls	r3, r3, #2
1000aa58:	50c8      	str	r0, [r1, r3]
    ds.save[ds.num] = save_func;
1000aa5a:	003b      	movs	r3, r7
1000aa5c:	4640      	mov	r0, r8
1000aa5e:	3316      	adds	r3, #22
1000aa60:	009b      	lsls	r3, r3, #2
1000aa62:	50c8      	str	r0, [r1, r3]
    ds.total_size += size + sizeof(struct data_header_t);
1000aa64:	684b      	ldr	r3, [r1, #4]
    ds.num++;
1000aa66:	3701      	adds	r7, #1
    // Add to list
    ds.hd[ds.num].key = key;
    ds.hd[ds.num].size = size;
    ds.load[ds.num] = load_func;
    ds.save[ds.num] = save_func;
    ds.total_size += size + sizeof(struct data_header_t);
1000aa68:	330c      	adds	r3, #12
1000aa6a:	189a      	adds	r2, r3, r2
1000aa6c:	604a      	str	r2, [r1, #4]
    ds.num++;
1000aa6e:	600f      	str	r7, [r1, #0]

    return INV_SUCCESS;
1000aa70:	2000      	movs	r0, #0
1000aa72:	e7e0      	b.n	1000aa36 <inv_register_load_store+0x3a>
1000aa74:	1001a94c 	.word	0x1001a94c

1000aa78 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000aa78:	78c0      	ldrb	r0, [r0, #3]
1000aa7a:	2800      	cmp	r0, #0
1000aa7c:	d000      	beq.n	1000aa80 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000aa7e:	20e2      	movs	r0, #226	; 0xe2
}
1000aa80:	4770      	bx	lr
1000aa82:	46c0      	nop			; (mov r8, r8)

1000aa84 <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000aa84:	2000      	movs	r0, #0
1000aa86:	4770      	bx	lr

1000aa88 <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000aa88:	229b      	movs	r2, #155	; 0x9b
1000aa8a:	4b20      	ldr	r3, [pc, #128]	; (1000ab0c <ble_disconnected_state_handler+0x84>)
1000aa8c:	0092      	lsls	r2, r2, #2
1000aa8e:	b5f0      	push	{r4, r5, r6, r7, lr}
1000aa90:	0004      	movs	r4, r0
1000aa92:	1898      	adds	r0, r3, r2
1000aa94:	3a91      	subs	r2, #145	; 0x91
1000aa96:	4647      	mov	r7, r8
1000aa98:	3aff      	subs	r2, #255	; 0xff
1000aa9a:	4694      	mov	ip, r2
1000aa9c:	3ada      	subs	r2, #218	; 0xda
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000aa9e:	2501      	movs	r5, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000aaa0:	2600      	movs	r6, #0
1000aaa2:	4690      	mov	r8, r2
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000aaa4:	b480      	push	{r7}
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
					if (ble_device_count > 0)
1000aaa6:	4f1a      	ldr	r7, [pc, #104]	; (1000ab10 <ble_disconnected_state_handler+0x88>)
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000aaa8:	001a      	movs	r2, r3
1000aaaa:	3a56      	subs	r2, #86	; 0x56
1000aaac:	8811      	ldrh	r1, [r2, #0]
1000aaae:	8822      	ldrh	r2, [r4, #0]
1000aab0:	4291      	cmp	r1, r2
1000aab2:	d00e      	beq.n	1000aad2 <ble_disconnected_state_handler+0x4a>
1000aab4:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000aab6:	4283      	cmp	r3, r0
1000aab8:	d1f6      	bne.n	1000aaa8 <ble_disconnected_state_handler+0x20>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000aaba:	4b16      	ldr	r3, [pc, #88]	; (1000ab14 <ble_disconnected_state_handler+0x8c>)
1000aabc:	4816      	ldr	r0, [pc, #88]	; (1000ab18 <ble_disconnected_state_handler+0x90>)
1000aabe:	4798      	blx	r3
1000aac0:	8822      	ldrh	r2, [r4, #0]
1000aac2:	78a1      	ldrb	r1, [r4, #2]
1000aac4:	4b15      	ldr	r3, [pc, #84]	; (1000ab1c <ble_disconnected_state_handler+0x94>)
1000aac6:	4816      	ldr	r0, [pc, #88]	; (1000ab20 <ble_disconnected_state_handler+0x98>)
1000aac8:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000aaca:	2000      	movs	r0, #0
1000aacc:	bc04      	pop	{r2}
1000aace:	4690      	mov	r8, r2
1000aad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000aad2:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000aad4:	2a05      	cmp	r2, #5
1000aad6:	d00e      	beq.n	1000aaf6 <ble_disconnected_state_handler+0x6e>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000aad8:	2a08      	cmp	r2, #8
1000aada:	d00c      	beq.n	1000aaf6 <ble_disconnected_state_handler+0x6e>
1000aadc:	2a07      	cmp	r2, #7
1000aade:	d808      	bhi.n	1000aaf2 <ble_disconnected_state_handler+0x6a>
1000aae0:	0029      	movs	r1, r5
1000aae2:	4091      	lsls	r1, r2
1000aae4:	000a      	movs	r2, r1
1000aae6:	4661      	mov	r1, ip
1000aae8:	4211      	tst	r1, r2
1000aaea:	d106      	bne.n	1000aafa <ble_disconnected_state_handler+0x72>
1000aaec:	4641      	mov	r1, r8
1000aaee:	4211      	tst	r1, r2
1000aaf0:	d1e0      	bne.n	1000aab4 <ble_disconnected_state_handler+0x2c>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000aaf2:	701e      	strb	r6, [r3, #0]
				break;				
1000aaf4:	e7de      	b.n	1000aab4 <ble_disconnected_state_handler+0x2c>
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000aaf6:	701d      	strb	r5, [r3, #0]
1000aaf8:	e7dc      	b.n	1000aab4 <ble_disconnected_state_handler+0x2c>
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000aafa:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
1000aafc:	783a      	ldrb	r2, [r7, #0]
1000aafe:	2a00      	cmp	r2, #0
1000ab00:	d0d8      	beq.n	1000aab4 <ble_disconnected_state_handler+0x2c>
					{
						ble_device_count--;
1000ab02:	783a      	ldrb	r2, [r7, #0]
1000ab04:	3a01      	subs	r2, #1
1000ab06:	b2d2      	uxtb	r2, r2
1000ab08:	703a      	strb	r2, [r7, #0]
1000ab0a:	e7d3      	b.n	1000aab4 <ble_disconnected_state_handler+0x2c>
1000ab0c:	1001c47e 	.word	0x1001c47e
1000ab10:	1001c68c 	.word	0x1001c68c
1000ab14:	10018035 	.word	0x10018035
1000ab18:	100191d8 	.word	0x100191d8
1000ab1c:	10017f15 	.word	0x10017f15
1000ab20:	100195a4 	.word	0x100195a4

1000ab24 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000ab24:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ab26:	4647      	mov	r7, r8
1000ab28:	b480      	push	{r7}
1000ab2a:	4f33      	ldr	r7, [pc, #204]	; (1000abf8 <ble_pair_done_handler+0xd4>)
1000ab2c:	0006      	movs	r6, r0
1000ab2e:	003b      	movs	r3, r7
1000ab30:	2400      	movs	r4, #0
1000ab32:	8845      	ldrh	r5, [r0, #2]
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000ab34:	891a      	ldrh	r2, [r3, #8]
1000ab36:	42aa      	cmp	r2, r5
1000ab38:	d022      	beq.n	1000ab80 <ble_pair_done_handler+0x5c>
1000ab3a:	3401      	adds	r4, #1
1000ab3c:	337c      	adds	r3, #124	; 0x7c
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ab3e:	2c05      	cmp	r4, #5
1000ab40:	d1f8      	bne.n	1000ab34 <ble_pair_done_handler+0x10>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000ab42:	7933      	ldrb	r3, [r6, #4]
1000ab44:	2b00      	cmp	r3, #0
1000ab46:	d049      	beq.n	1000abdc <ble_pair_done_handler+0xb8>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000ab48:	4b2c      	ldr	r3, [pc, #176]	; (1000abfc <ble_pair_done_handler+0xd8>)
1000ab4a:	5cfb      	ldrb	r3, [r7, r3]
1000ab4c:	2b01      	cmp	r3, #1
1000ab4e:	d912      	bls.n	1000ab76 <ble_pair_done_handler+0x52>
			DBG_LOG("Pairing failed...Disconnecting");
1000ab50:	4f2b      	ldr	r7, [pc, #172]	; (1000ac00 <ble_pair_done_handler+0xdc>)
1000ab52:	4d2c      	ldr	r5, [pc, #176]	; (1000ac04 <ble_pair_done_handler+0xe0>)
1000ab54:	0038      	movs	r0, r7
1000ab56:	47a8      	blx	r5
1000ab58:	482b      	ldr	r0, [pc, #172]	; (1000ac08 <ble_pair_done_handler+0xe4>)
1000ab5a:	4c2c      	ldr	r4, [pc, #176]	; (1000ac0c <ble_pair_done_handler+0xe8>)
1000ab5c:	47a0      	blx	r4
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000ab5e:	8870      	ldrh	r0, [r6, #2]
1000ab60:	2113      	movs	r1, #19
1000ab62:	4b2b      	ldr	r3, [pc, #172]	; (1000ac10 <ble_pair_done_handler+0xec>)
1000ab64:	4798      	blx	r3
1000ab66:	2800      	cmp	r0, #0
1000ab68:	d005      	beq.n	1000ab76 <ble_pair_done_handler+0x52>
			{
				DBG_LOG("Disconnect Request Failed");
1000ab6a:	0038      	movs	r0, r7
1000ab6c:	47a8      	blx	r5
1000ab6e:	4829      	ldr	r0, [pc, #164]	; (1000ac14 <ble_pair_done_handler+0xf0>)
1000ab70:	47a0      	blx	r4
				return AT_BLE_FAILURE;
1000ab72:	25e2      	movs	r5, #226	; 0xe2
1000ab74:	e000      	b.n	1000ab78 <ble_pair_done_handler+0x54>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000ab76:	2500      	movs	r5, #0
}
1000ab78:	0028      	movs	r0, r5
1000ab7a:	bc04      	pop	{r2}
1000ab7c:	4690      	mov	r8, r2
1000ab7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000ab80:	001a      	movs	r2, r3
1000ab82:	325e      	adds	r2, #94	; 0x5e
1000ab84:	7812      	ldrb	r2, [r2, #0]
1000ab86:	2a03      	cmp	r2, #3
1000ab88:	d1d7      	bne.n	1000ab3a <ble_pair_done_handler+0x16>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000ab8a:	7935      	ldrb	r5, [r6, #4]
1000ab8c:	2d00      	cmp	r5, #0
1000ab8e:	d1df      	bne.n	1000ab50 <ble_pair_done_handler+0x2c>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000ab90:	4b1c      	ldr	r3, [pc, #112]	; (1000ac04 <ble_pair_done_handler+0xe0>)
1000ab92:	481b      	ldr	r0, [pc, #108]	; (1000ac00 <ble_pair_done_handler+0xdc>)
1000ab94:	4798      	blx	r3
1000ab96:	4b1d      	ldr	r3, [pc, #116]	; (1000ac0c <ble_pair_done_handler+0xe8>)
1000ab98:	481f      	ldr	r0, [pc, #124]	; (1000ac18 <ble_pair_done_handler+0xf4>)
1000ab9a:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000ab9c:	0163      	lsls	r3, r4, #5
1000ab9e:	1b1c      	subs	r4, r3, r4
1000aba0:	7832      	ldrb	r2, [r6, #0]
1000aba2:	00a4      	lsls	r4, r4, #2
1000aba4:	193b      	adds	r3, r7, r4
1000aba6:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000aba8:	7932      	ldrb	r2, [r6, #4]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000abaa:	0031      	movs	r1, r6
	{
		DBG_LOG("Pairing procedure completed successfully");
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000abac:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000abae:	2205      	movs	r2, #5
1000abb0:	335e      	adds	r3, #94	; 0x5e
1000abb2:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000abb4:	1938      	adds	r0, r7, r4
1000abb6:	4b19      	ldr	r3, [pc, #100]	; (1000ac1c <ble_pair_done_handler+0xf8>)
1000abb8:	3122      	adds	r1, #34	; 0x22
1000abba:	320b      	adds	r2, #11
1000abbc:	3036      	adds	r0, #54	; 0x36
1000abbe:	4698      	mov	r8, r3
1000abc0:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000abc2:	0031      	movs	r1, r6
1000abc4:	1938      	adds	r0, r7, r4
1000abc6:	3132      	adds	r1, #50	; 0x32
1000abc8:	2217      	movs	r2, #23
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000abca:	193c      	adds	r4, r7, r4
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
			ble_dev_info[idx].bond_info.status = pairing_params->status;
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000abcc:	3046      	adds	r0, #70	; 0x46
1000abce:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000abd0:	0020      	movs	r0, r4
1000abd2:	1db1      	adds	r1, r6, #6
1000abd4:	221c      	movs	r2, #28
1000abd6:	301a      	adds	r0, #26
1000abd8:	47c0      	blx	r8
1000abda:	e7cd      	b.n	1000ab78 <ble_pair_done_handler+0x54>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000abdc:	4e08      	ldr	r6, [pc, #32]	; (1000ac00 <ble_pair_done_handler+0xdc>)
1000abde:	4d09      	ldr	r5, [pc, #36]	; (1000ac04 <ble_pair_done_handler+0xe0>)
1000abe0:	0030      	movs	r0, r6
1000abe2:	47a8      	blx	r5
1000abe4:	4c09      	ldr	r4, [pc, #36]	; (1000ac0c <ble_pair_done_handler+0xe8>)
1000abe6:	480c      	ldr	r0, [pc, #48]	; (1000ac18 <ble_pair_done_handler+0xf4>)
1000abe8:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000abea:	0030      	movs	r0, r6
1000abec:	47a8      	blx	r5
1000abee:	480c      	ldr	r0, [pc, #48]	; (1000ac20 <ble_pair_done_handler+0xfc>)
1000abf0:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000abf2:	25e2      	movs	r5, #226	; 0xe2
1000abf4:	e7c0      	b.n	1000ab78 <ble_pair_done_handler+0x54>
1000abf6:	46c0      	nop			; (mov r8, r8)
1000abf8:	1001c420 	.word	0x1001c420
1000abfc:	000002ca 	.word	0x000002ca
1000ac00:	100191d8 	.word	0x100191d8
1000ac04:	10018035 	.word	0x10018035
1000ac08:	100195d4 	.word	0x100195d4
1000ac0c:	10017f15 	.word	0x10017f15
1000ac10:	1000e899 	.word	0x1000e899
1000ac14:	100195f4 	.word	0x100195f4
1000ac18:	10019610 	.word	0x10019610
1000ac1c:	10017d8f 	.word	0x10017d8f
1000ac20:	1001963c 	.word	0x1001963c

1000ac24 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000ac24:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000ac26:	2378      	movs	r3, #120	; 0x78
1000ac28:	2201      	movs	r2, #1
1000ac2a:	2101      	movs	r1, #1
1000ac2c:	4c02      	ldr	r4, [pc, #8]	; (1000ac38 <ble_conn_param_update_req+0x14>)
1000ac2e:	8800      	ldrh	r0, [r0, #0]
1000ac30:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000ac32:	2000      	movs	r0, #0
1000ac34:	bd10      	pop	{r4, pc}
1000ac36:	46c0      	nop			; (mov r8, r8)
1000ac38:	1000e8b9 	.word	0x1000e8b9

1000ac3c <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000ac3c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ac3e:	4644      	mov	r4, r8
1000ac40:	4656      	mov	r6, sl
1000ac42:	465f      	mov	r7, fp
1000ac44:	464d      	mov	r5, r9
1000ac46:	4682      	mov	sl, r0
1000ac48:	b4f0      	push	{r4, r5, r6, r7}
1000ac4a:	b087      	sub	sp, #28
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000ac4c:	ac03      	add	r4, sp, #12
1000ac4e:	2209      	movs	r2, #9
1000ac50:	2100      	movs	r1, #0
1000ac52:	4b63      	ldr	r3, [pc, #396]	; (1000ade0 <ble_slave_security_request_handler+0x1a4>)
1000ac54:	0020      	movs	r0, r4
1000ac56:	4798      	blx	r3
1000ac58:	4653      	mov	r3, sl
1000ac5a:	8819      	ldrh	r1, [r3, #0]
1000ac5c:	4b61      	ldr	r3, [pc, #388]	; (1000ade4 <ble_slave_security_request_handler+0x1a8>)
1000ac5e:	4698      	mov	r8, r3
1000ac60:	0018      	movs	r0, r3
1000ac62:	001a      	movs	r2, r3
1000ac64:	2300      	movs	r3, #0
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000ac66:	8915      	ldrh	r5, [r2, #8]
1000ac68:	428d      	cmp	r5, r1
1000ac6a:	d041      	beq.n	1000acf0 <ble_slave_security_request_handler+0xb4>
1000ac6c:	3301      	adds	r3, #1
1000ac6e:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ac70:	2b05      	cmp	r3, #5
1000ac72:	d1f8      	bne.n	1000ac66 <ble_slave_security_request_handler+0x2a>
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000ac74:	2300      	movs	r3, #0
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000ac76:	8902      	ldrh	r2, [r0, #8]
1000ac78:	001f      	movs	r7, r3
1000ac7a:	428a      	cmp	r2, r1
1000ac7c:	d056      	beq.n	1000ad2c <ble_slave_security_request_handler+0xf0>
1000ac7e:	3301      	adds	r3, #1
1000ac80:	307c      	adds	r0, #124	; 0x7c
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ac82:	2b05      	cmp	r3, #5
1000ac84:	d1f7      	bne.n	1000ac76 <ble_slave_security_request_handler+0x3a>
1000ac86:	2705      	movs	r7, #5
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000ac88:	2302      	movs	r3, #2
1000ac8a:	7223      	strb	r3, [r4, #8]
	features.bond = slave_sec_req->bond;
1000ac8c:	4653      	mov	r3, sl
1000ac8e:	78db      	ldrb	r3, [r3, #3]
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000ac90:	4641      	mov	r1, r8
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000ac92:	70a3      	strb	r3, [r4, #2]
	features.mitm_protection = true;
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000ac94:	2304      	movs	r3, #4
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
	features.mitm_protection = true;
1000ac96:	2201      	movs	r2, #1
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000ac98:	7023      	strb	r3, [r4, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000ac9a:	017b      	lsls	r3, r7, #5
1000ac9c:	9300      	str	r3, [sp, #0]
1000ac9e:	1bdb      	subs	r3, r3, r7
1000aca0:	009b      	lsls	r3, r3, #2
1000aca2:	5ccb      	ldrb	r3, [r1, r3]
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
	features.mitm_protection = true;
1000aca4:	7062      	strb	r2, [r4, #1]
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000aca6:	2b02      	cmp	r3, #2
1000aca8:	d100      	bne.n	1000acac <ble_slave_security_request_handler+0x70>
1000acaa:	e084      	b.n	1000adb6 <ble_slave_security_request_handler+0x17a>
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000acac:	71a2      	strb	r2, [r4, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000acae:	71e2      	strb	r2, [r4, #7]
	}
	features.max_key_size = 16;
1000acb0:	2310      	movs	r3, #16
1000acb2:	7163      	strb	r3, [r4, #5]
	features.min_key_size = 16;
1000acb4:	7123      	strb	r3, [r4, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000acb6:	9b00      	ldr	r3, [sp, #0]
1000acb8:	1bde      	subs	r6, r3, r7
1000acba:	4643      	mov	r3, r8
1000acbc:	00b6      	lsls	r6, r6, #2
1000acbe:	199b      	adds	r3, r3, r6
1000acc0:	7e1b      	ldrb	r3, [r3, #24]
1000acc2:	2b40      	cmp	r3, #64	; 0x40
1000acc4:	d04a      	beq.n	1000ad5c <ble_slave_security_request_handler+0x120>
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000acc6:	9b00      	ldr	r3, [sp, #0]
1000acc8:	0021      	movs	r1, r4
1000acca:	1bda      	subs	r2, r3, r7
1000accc:	4653      	mov	r3, sl
1000acce:	0092      	lsls	r2, r2, #2
1000acd0:	3260      	adds	r2, #96	; 0x60
1000acd2:	8818      	ldrh	r0, [r3, #0]
1000acd4:	4442      	add	r2, r8
1000acd6:	2300      	movs	r3, #0
1000acd8:	4d43      	ldr	r5, [pc, #268]	; (1000ade8 <ble_slave_security_request_handler+0x1ac>)
1000acda:	47a8      	blx	r5
1000acdc:	2800      	cmp	r0, #0
1000acde:	d132      	bne.n	1000ad46 <ble_slave_security_request_handler+0x10a>
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
			{
				return  AT_BLE_SUCCESS;
1000ace0:	2000      	movs	r0, #0
		features.mitm_protection = false;
		DBG_LOG("Slave Security Req - Authentication Failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000ace2:	b007      	add	sp, #28
1000ace4:	bc3c      	pop	{r2, r3, r4, r5}
1000ace6:	4690      	mov	r8, r2
1000ace8:	4699      	mov	r9, r3
1000acea:	46a2      	mov	sl, r4
1000acec:	46ab      	mov	fp, r5
1000acee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000acf0:	0015      	movs	r5, r2
1000acf2:	355e      	adds	r5, #94	; 0x5e
1000acf4:	782d      	ldrb	r5, [r5, #0]
1000acf6:	2d02      	cmp	r5, #2
1000acf8:	d1b8      	bne.n	1000ac6c <ble_slave_security_request_handler+0x30>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000acfa:	4642      	mov	r2, r8
1000acfc:	015d      	lsls	r5, r3, #5
1000acfe:	1ae9      	subs	r1, r5, r3
1000ad00:	0089      	lsls	r1, r1, #2
1000ad02:	1852      	adds	r2, r2, r1
1000ad04:	0016      	movs	r6, r2
1000ad06:	2706      	movs	r7, #6
1000ad08:	365e      	adds	r6, #94	; 0x5e
1000ad0a:	7037      	strb	r7, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000ad0c:	7d12      	ldrb	r2, [r2, #20]
1000ad0e:	07d6      	lsls	r6, r2, #31
1000ad10:	d503      	bpl.n	1000ad1a <ble_slave_security_request_handler+0xde>
1000ad12:	4656      	mov	r6, sl
1000ad14:	78f6      	ldrb	r6, [r6, #3]
1000ad16:	2e00      	cmp	r6, #0
1000ad18:	d151      	bne.n	1000adbe <ble_slave_security_request_handler+0x182>
				return AT_BLE_FAILURE;
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000ad1a:	2202      	movs	r2, #2
1000ad1c:	1aeb      	subs	r3, r5, r3
1000ad1e:	009b      	lsls	r3, r3, #2
1000ad20:	4443      	add	r3, r8
1000ad22:	335e      	adds	r3, #94	; 0x5e
1000ad24:	701a      	strb	r2, [r3, #0]
1000ad26:	4653      	mov	r3, sl
1000ad28:	8819      	ldrh	r1, [r3, #0]
1000ad2a:	e7a3      	b.n	1000ac74 <ble_slave_security_request_handler+0x38>
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000ad2c:	0002      	movs	r2, r0
1000ad2e:	325e      	adds	r2, #94	; 0x5e
1000ad30:	7812      	ldrb	r2, [r2, #0]
1000ad32:	2a02      	cmp	r2, #2
1000ad34:	d1a3      	bne.n	1000ac7e <ble_slave_security_request_handler+0x42>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000ad36:	015b      	lsls	r3, r3, #5
1000ad38:	1bdb      	subs	r3, r3, r7
1000ad3a:	009b      	lsls	r3, r3, #2
1000ad3c:	4443      	add	r3, r8
1000ad3e:	335e      	adds	r3, #94	; 0x5e
1000ad40:	3201      	adds	r2, #1
1000ad42:	701a      	strb	r2, [r3, #0]
			break;
1000ad44:	e7a0      	b.n	1000ac88 <ble_slave_security_request_handler+0x4c>
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
	{
		features.bond = false;
1000ad46:	2300      	movs	r3, #0
		features.mitm_protection = false;
		DBG_LOG("Slave Security Req - Authentication Failed");
1000ad48:	4828      	ldr	r0, [pc, #160]	; (1000adec <ble_slave_security_request_handler+0x1b0>)
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
	{
		features.bond = false;
1000ad4a:	70a3      	strb	r3, [r4, #2]
		features.mitm_protection = false;
1000ad4c:	7063      	strb	r3, [r4, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000ad4e:	4b28      	ldr	r3, [pc, #160]	; (1000adf0 <ble_slave_security_request_handler+0x1b4>)
1000ad50:	4798      	blx	r3
1000ad52:	4828      	ldr	r0, [pc, #160]	; (1000adf4 <ble_slave_security_request_handler+0x1b8>)
1000ad54:	4b28      	ldr	r3, [pc, #160]	; (1000adf8 <ble_slave_security_request_handler+0x1bc>)
1000ad56:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000ad58:	20e2      	movs	r0, #226	; 0xe2
1000ad5a:	e7c2      	b.n	1000ace2 <ble_slave_security_request_handler+0xa6>
1000ad5c:	4b27      	ldr	r3, [pc, #156]	; (1000adfc <ble_slave_security_request_handler+0x1c0>)
1000ad5e:	0035      	movs	r5, r6
1000ad60:	4699      	mov	r9, r3
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000ad62:	230f      	movs	r3, #15
1000ad64:	469b      	mov	fp, r3
1000ad66:	9601      	str	r6, [sp, #4]
1000ad68:	3568      	adds	r5, #104	; 0x68
1000ad6a:	3660      	adds	r6, #96	; 0x60
1000ad6c:	4446      	add	r6, r8
1000ad6e:	4445      	add	r5, r8
1000ad70:	47c8      	blx	r9
1000ad72:	465b      	mov	r3, fp
1000ad74:	4018      	ands	r0, r3
1000ad76:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000ad78:	47c8      	blx	r9
1000ad7a:	465b      	mov	r3, fp
1000ad7c:	4018      	ands	r0, r3
1000ad7e:	74b0      	strb	r0, [r6, #18]
1000ad80:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000ad82:	42ae      	cmp	r6, r5
1000ad84:	d1f4      	bne.n	1000ad70 <ble_slave_security_request_handler+0x134>
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000ad86:	230f      	movs	r3, #15
1000ad88:	469b      	mov	fp, r3
1000ad8a:	9e01      	ldr	r6, [sp, #4]
1000ad8c:	3670      	adds	r6, #112	; 0x70
1000ad8e:	4446      	add	r6, r8
1000ad90:	47c8      	blx	r9
1000ad92:	465b      	mov	r3, fp
1000ad94:	4018      	ands	r0, r3
1000ad96:	7028      	strb	r0, [r5, #0]
1000ad98:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000ad9a:	42b5      	cmp	r5, r6
1000ad9c:	d1f8      	bne.n	1000ad90 <ble_slave_security_request_handler+0x154>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000ad9e:	47c8      	blx	r9
1000ada0:	9b00      	ldr	r3, [sp, #0]
1000ada2:	1bdb      	subs	r3, r3, r7
1000ada4:	009b      	lsls	r3, r3, #2
1000ada6:	4443      	add	r3, r8
1000ada8:	001a      	movs	r2, r3
1000adaa:	3270      	adds	r2, #112	; 0x70
1000adac:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000adae:	2210      	movs	r2, #16
1000adb0:	337a      	adds	r3, #122	; 0x7a
1000adb2:	701a      	strb	r2, [r3, #0]
1000adb4:	e787      	b.n	1000acc6 <ble_slave_security_request_handler+0x8a>
	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000adb6:	3301      	adds	r3, #1
1000adb8:	71a3      	strb	r3, [r4, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000adba:	71e3      	strb	r3, [r4, #7]
1000adbc:	e778      	b.n	1000acb0 <ble_slave_security_request_handler+0x74>
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000adbe:	4653      	mov	r3, sl
1000adc0:	4441      	add	r1, r8
1000adc2:	8818      	ldrh	r0, [r3, #0]
1000adc4:	311a      	adds	r1, #26
1000adc6:	4b0e      	ldr	r3, [pc, #56]	; (1000ae00 <ble_slave_security_request_handler+0x1c4>)
1000adc8:	4798      	blx	r3
1000adca:	2800      	cmp	r0, #0
1000adcc:	d100      	bne.n	1000add0 <ble_slave_security_request_handler+0x194>
1000adce:	e787      	b.n	1000ace0 <ble_slave_security_request_handler+0xa4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000add0:	4b07      	ldr	r3, [pc, #28]	; (1000adf0 <ble_slave_security_request_handler+0x1b4>)
1000add2:	4806      	ldr	r0, [pc, #24]	; (1000adec <ble_slave_security_request_handler+0x1b0>)
1000add4:	4798      	blx	r3
1000add6:	480b      	ldr	r0, [pc, #44]	; (1000ae04 <ble_slave_security_request_handler+0x1c8>)
1000add8:	4b07      	ldr	r3, [pc, #28]	; (1000adf8 <ble_slave_security_request_handler+0x1bc>)
1000adda:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000addc:	20e2      	movs	r0, #226	; 0xe2
1000adde:	e780      	b.n	1000ace2 <ble_slave_security_request_handler+0xa6>
1000ade0:	10017dcb 	.word	0x10017dcb
1000ade4:	1001c420 	.word	0x1001c420
1000ade8:	1000ec05 	.word	0x1000ec05
1000adec:	100191d8 	.word	0x100191d8
1000adf0:	10018035 	.word	0x10018035
1000adf4:	10019684 	.word	0x10019684
1000adf8:	10017f15 	.word	0x10017f15
1000adfc:	10018049 	.word	0x10018049
1000ae00:	1000edf1 	.word	0x1000edf1
1000ae04:	1001966c 	.word	0x1001966c

1000ae08 <ble_pair_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000ae08:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ae0a:	4656      	mov	r6, sl
1000ae0c:	465f      	mov	r7, fp
1000ae0e:	464d      	mov	r5, r9
1000ae10:	4644      	mov	r4, r8
1000ae12:	4b45      	ldr	r3, [pc, #276]	; (1000af28 <ble_pair_request_handler+0x120>)
1000ae14:	b4f0      	push	{r4, r5, r6, r7}
1000ae16:	469a      	mov	sl, r3
1000ae18:	001a      	movs	r2, r3
1000ae1a:	2300      	movs	r3, #0
1000ae1c:	b087      	sub	sp, #28
1000ae1e:	9000      	str	r0, [sp, #0]
1000ae20:	8800      	ldrh	r0, [r0, #0]
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000ae22:	8911      	ldrh	r1, [r2, #8]
1000ae24:	001c      	movs	r4, r3
1000ae26:	4281      	cmp	r1, r0
1000ae28:	d040      	beq.n	1000aeac <ble_pair_request_handler+0xa4>
1000ae2a:	3301      	adds	r3, #1
1000ae2c:	327c      	adds	r2, #124	; 0x7c
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ae2e:	2b05      	cmp	r3, #5
1000ae30:	d1f7      	bne.n	1000ae22 <ble_pair_request_handler+0x1a>
1000ae32:	2405      	movs	r4, #5
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = BLE_BOND_REQ;
	features.mitm_protection = BLE_MITM_REQ;
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000ae34:	2200      	movs	r2, #0
	features.oob_avaiable = BLE_OOB_REQ;
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000ae36:	4651      	mov	r1, sl
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000ae38:	2302      	movs	r3, #2
1000ae3a:	af03      	add	r7, sp, #12
	features.bond = BLE_BOND_REQ;
	features.mitm_protection = BLE_MITM_REQ;
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000ae3c:	703a      	strb	r2, [r7, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000ae3e:	70fa      	strb	r2, [r7, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000ae40:	0162      	lsls	r2, r4, #5
1000ae42:	4690      	mov	r8, r2
1000ae44:	1b12      	subs	r2, r2, r4
1000ae46:	0092      	lsls	r2, r2, #2
1000ae48:	5c8a      	ldrb	r2, [r1, r2]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000ae4a:	723b      	strb	r3, [r7, #8]
	features.bond = BLE_BOND_REQ;
1000ae4c:	3b01      	subs	r3, #1
1000ae4e:	70bb      	strb	r3, [r7, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000ae50:	707b      	strb	r3, [r7, #1]
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
	features.oob_avaiable = BLE_OOB_REQ;
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000ae52:	2a02      	cmp	r2, #2
1000ae54:	d064      	beq.n	1000af20 <ble_pair_request_handler+0x118>
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000ae56:	71bb      	strb	r3, [r7, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000ae58:	71fb      	strb	r3, [r7, #7]
	}
			
	features.max_key_size = 16;
1000ae5a:	2310      	movs	r3, #16
1000ae5c:	717b      	strb	r3, [r7, #5]
	features.min_key_size = 16;
1000ae5e:	713b      	strb	r3, [r7, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000ae60:	4643      	mov	r3, r8
1000ae62:	1b1e      	subs	r6, r3, r4
1000ae64:	4653      	mov	r3, sl
1000ae66:	00b6      	lsls	r6, r6, #2
1000ae68:	199b      	adds	r3, r3, r6
1000ae6a:	7e1b      	ldrb	r3, [r3, #24]
1000ae6c:	2b40      	cmp	r3, #64	; 0x40
1000ae6e:	d02a      	beq.n	1000aec6 <ble_pair_request_handler+0xbe>
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000ae70:	4643      	mov	r3, r8
1000ae72:	1b1a      	subs	r2, r3, r4
1000ae74:	0092      	lsls	r2, r2, #2
1000ae76:	9b00      	ldr	r3, [sp, #0]
1000ae78:	3260      	adds	r2, #96	; 0x60
1000ae7a:	8818      	ldrh	r0, [r3, #0]
1000ae7c:	4452      	add	r2, sl
1000ae7e:	2300      	movs	r3, #0
1000ae80:	0039      	movs	r1, r7
1000ae82:	4c2a      	ldr	r4, [pc, #168]	; (1000af2c <ble_pair_request_handler+0x124>)
1000ae84:	47a0      	blx	r4
1000ae86:	2800      	cmp	r0, #0
1000ae88:	d009      	beq.n	1000ae9e <ble_pair_request_handler+0x96>
	{
		features.bond = false;
1000ae8a:	2300      	movs	r3, #0
		features.mitm_protection = false;
		DBG_LOG("Pair Request - Authentication Failed");
1000ae8c:	4828      	ldr	r0, [pc, #160]	; (1000af30 <ble_pair_request_handler+0x128>)
	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
	{
		features.bond = false;
1000ae8e:	70bb      	strb	r3, [r7, #2]
		features.mitm_protection = false;
1000ae90:	707b      	strb	r3, [r7, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000ae92:	4b28      	ldr	r3, [pc, #160]	; (1000af34 <ble_pair_request_handler+0x12c>)
1000ae94:	4798      	blx	r3
1000ae96:	4828      	ldr	r0, [pc, #160]	; (1000af38 <ble_pair_request_handler+0x130>)
1000ae98:	4b28      	ldr	r3, [pc, #160]	; (1000af3c <ble_pair_request_handler+0x134>)
1000ae9a:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000ae9c:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000ae9e:	b007      	add	sp, #28
1000aea0:	bc3c      	pop	{r2, r3, r4, r5}
1000aea2:	4690      	mov	r8, r2
1000aea4:	4699      	mov	r9, r3
1000aea6:	46a2      	mov	sl, r4
1000aea8:	46ab      	mov	fp, r5
1000aeaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000aeac:	0011      	movs	r1, r2
1000aeae:	315e      	adds	r1, #94	; 0x5e
1000aeb0:	7809      	ldrb	r1, [r1, #0]
1000aeb2:	2902      	cmp	r1, #2
1000aeb4:	d1b9      	bne.n	1000ae2a <ble_pair_request_handler+0x22>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000aeb6:	2203      	movs	r2, #3
1000aeb8:	015b      	lsls	r3, r3, #5
1000aeba:	1b1b      	subs	r3, r3, r4
1000aebc:	009b      	lsls	r3, r3, #2
1000aebe:	4453      	add	r3, sl
1000aec0:	335e      	adds	r3, #94	; 0x5e
1000aec2:	701a      	strb	r2, [r3, #0]
			break;
1000aec4:	e7b6      	b.n	1000ae34 <ble_pair_request_handler+0x2c>
1000aec6:	4b1e      	ldr	r3, [pc, #120]	; (1000af40 <ble_pair_request_handler+0x138>)
1000aec8:	0035      	movs	r5, r6
1000aeca:	4699      	mov	r9, r3
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000aecc:	230f      	movs	r3, #15
1000aece:	469b      	mov	fp, r3
1000aed0:	9601      	str	r6, [sp, #4]
1000aed2:	3568      	adds	r5, #104	; 0x68
1000aed4:	3660      	adds	r6, #96	; 0x60
1000aed6:	4456      	add	r6, sl
1000aed8:	4455      	add	r5, sl
1000aeda:	47c8      	blx	r9
1000aedc:	465b      	mov	r3, fp
1000aede:	4018      	ands	r0, r3
1000aee0:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000aee2:	47c8      	blx	r9
1000aee4:	465b      	mov	r3, fp
1000aee6:	4018      	ands	r0, r3
1000aee8:	74b0      	strb	r0, [r6, #18]
1000aeea:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000aeec:	42ae      	cmp	r6, r5
1000aeee:	d1f4      	bne.n	1000aeda <ble_pair_request_handler+0xd2>
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000aef0:	230f      	movs	r3, #15
1000aef2:	469b      	mov	fp, r3
1000aef4:	9e01      	ldr	r6, [sp, #4]
1000aef6:	3670      	adds	r6, #112	; 0x70
1000aef8:	4456      	add	r6, sl
1000aefa:	47c8      	blx	r9
1000aefc:	465b      	mov	r3, fp
1000aefe:	4018      	ands	r0, r3
1000af00:	7028      	strb	r0, [r5, #0]
1000af02:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000af04:	42b5      	cmp	r5, r6
1000af06:	d1f8      	bne.n	1000aefa <ble_pair_request_handler+0xf2>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000af08:	47c8      	blx	r9
1000af0a:	4643      	mov	r3, r8
1000af0c:	1b1b      	subs	r3, r3, r4
1000af0e:	009b      	lsls	r3, r3, #2
1000af10:	4453      	add	r3, sl
1000af12:	001a      	movs	r2, r3
1000af14:	3270      	adds	r2, #112	; 0x70
1000af16:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000af18:	2210      	movs	r2, #16
1000af1a:	337a      	adds	r3, #122	; 0x7a
1000af1c:	701a      	strb	r2, [r3, #0]
1000af1e:	e7a7      	b.n	1000ae70 <ble_pair_request_handler+0x68>
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000af20:	3302      	adds	r3, #2
1000af22:	71bb      	strb	r3, [r7, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000af24:	71fb      	strb	r3, [r7, #7]
1000af26:	e798      	b.n	1000ae5a <ble_pair_request_handler+0x52>
1000af28:	1001c420 	.word	0x1001c420
1000af2c:	1000ec05 	.word	0x1000ec05
1000af30:	100191d8 	.word	0x100191d8
1000af34:	10018035 	.word	0x10018035
1000af38:	100196b0 	.word	0x100196b0
1000af3c:	10017f15 	.word	0x10017f15
1000af40:	10018049 	.word	0x10018049

1000af44 <ble_pair_key_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000af44:	b5f0      	push	{r4, r5, r6, r7, lr}
1000af46:	465f      	mov	r7, fp
1000af48:	4656      	mov	r6, sl
1000af4a:	464d      	mov	r5, r9
1000af4c:	4644      	mov	r4, r8
1000af4e:	b4f0      	push	{r4, r5, r6, r7}
1000af50:	0007      	movs	r7, r0
1000af52:	b087      	sub	sp, #28
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000af54:	ac04      	add	r4, sp, #16
	return AT_BLE_SUCCESS;
}

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000af56:	9001      	str	r0, [sp, #4]
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000af58:	2206      	movs	r2, #6
1000af5a:	4940      	ldr	r1, [pc, #256]	; (1000b05c <ble_pair_key_request_handler+0x118>)
1000af5c:	4e40      	ldr	r6, [pc, #256]	; (1000b060 <ble_pair_key_request_handler+0x11c>)
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000af5e:	ad03      	add	r5, sp, #12
at_ble_status_t ble_pair_key_request_handler (void *params)
{
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000af60:	0020      	movs	r0, r4
1000af62:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000af64:	2204      	movs	r2, #4
1000af66:	0039      	movs	r1, r7
1000af68:	0028      	movs	r0, r5
1000af6a:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000af6c:	78eb      	ldrb	r3, [r5, #3]
1000af6e:	2b00      	cmp	r3, #0
1000af70:	d02e      	beq.n	1000afd0 <ble_pair_key_request_handler+0x8c>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000af72:	2380      	movs	r3, #128	; 0x80
1000af74:	886a      	ldrh	r2, [r5, #2]
1000af76:	005b      	lsls	r3, r3, #1
1000af78:	429a      	cmp	r2, r3
1000af7a:	d00b      	beq.n	1000af94 <ble_pair_key_request_handler+0x50>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000af7c:	78ab      	ldrb	r3, [r5, #2]
1000af7e:	2b01      	cmp	r3, #1
1000af80:	d052      	beq.n	1000b028 <ble_pair_key_request_handler+0xe4>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000af82:	2400      	movs	r4, #0
}
1000af84:	0020      	movs	r0, r4
1000af86:	b007      	add	sp, #28
1000af88:	bc3c      	pop	{r2, r3, r4, r5}
1000af8a:	4690      	mov	r8, r2
1000af8c:	4699      	mov	r9, r3
1000af8e:	46a2      	mov	sl, r4
1000af90:	46ab      	mov	fp, r5
1000af92:	bdf0      	pop	{r4, r5, r6, r7, pc}
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000af94:	4b33      	ldr	r3, [pc, #204]	; (1000b064 <ble_pair_key_request_handler+0x120>)
1000af96:	0018      	movs	r0, r3
1000af98:	469a      	mov	sl, r3
1000af9a:	4b33      	ldr	r3, [pc, #204]	; (1000b068 <ble_pair_key_request_handler+0x124>)
1000af9c:	4699      	mov	r9, r3
1000af9e:	4798      	blx	r3
1000afa0:	4b32      	ldr	r3, [pc, #200]	; (1000b06c <ble_pair_key_request_handler+0x128>)
1000afa2:	4833      	ldr	r0, [pc, #204]	; (1000b070 <ble_pair_key_request_handler+0x12c>)
1000afa4:	4698      	mov	r8, r3
1000afa6:	4798      	blx	r3
1000afa8:	4e32      	ldr	r6, [pc, #200]	; (1000b074 <ble_pair_key_request_handler+0x130>)
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000afaa:	2700      	movs	r7, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000afac:	5de0      	ldrb	r0, [r4, r7]
1000afae:	3701      	adds	r7, #1
1000afb0:	47b0      	blx	r6
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000afb2:	2f06      	cmp	r7, #6
1000afb4:	d1fa      	bne.n	1000afac <ble_pair_key_request_handler+0x68>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000afb6:	9b01      	ldr	r3, [sp, #4]
1000afb8:	78a9      	ldrb	r1, [r5, #2]
1000afba:	8818      	ldrh	r0, [r3, #0]
1000afbc:	0022      	movs	r2, r4
1000afbe:	4b2e      	ldr	r3, [pc, #184]	; (1000b078 <ble_pair_key_request_handler+0x134>)
1000afc0:	4798      	blx	r3
1000afc2:	2800      	cmp	r0, #0
1000afc4:	d0dd      	beq.n	1000af82 <ble_pair_key_request_handler+0x3e>
          {
                  DBG_LOG("Pair-key reply failed");
1000afc6:	4650      	mov	r0, sl
1000afc8:	47c8      	blx	r9
1000afca:	482c      	ldr	r0, [pc, #176]	; (1000b07c <ble_pair_key_request_handler+0x138>)
1000afcc:	47c0      	blx	r8
1000afce:	e7d8      	b.n	1000af82 <ble_pair_key_request_handler+0x3e>
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000afd0:	4b24      	ldr	r3, [pc, #144]	; (1000b064 <ble_pair_key_request_handler+0x120>)
1000afd2:	0018      	movs	r0, r3
1000afd4:	469a      	mov	sl, r3
1000afd6:	4b24      	ldr	r3, [pc, #144]	; (1000b068 <ble_pair_key_request_handler+0x124>)
1000afd8:	4699      	mov	r9, r3
1000afda:	4798      	blx	r3
1000afdc:	4b23      	ldr	r3, [pc, #140]	; (1000b06c <ble_pair_key_request_handler+0x128>)
1000afde:	4828      	ldr	r0, [pc, #160]	; (1000b080 <ble_pair_key_request_handler+0x13c>)
1000afe0:	4698      	mov	r8, r3
1000afe2:	4798      	blx	r3
1000afe4:	2300      	movs	r3, #0
1000afe6:	4f27      	ldr	r7, [pc, #156]	; (1000b084 <ble_pair_key_request_handler+0x140>)
1000afe8:	469b      	mov	fp, r3
1000afea:	e003      	b.n	1000aff4 <ble_pair_key_request_handler+0xb0>
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000afec:	001a      	movs	r2, r3
1000afee:	3a30      	subs	r2, #48	; 0x30
1000aff0:	2a09      	cmp	r2, #9
1000aff2:	d921      	bls.n	1000b038 <ble_pair_key_request_handler+0xf4>
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000aff4:	201e      	movs	r0, #30
1000aff6:	47b8      	blx	r7
1000aff8:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000affa:	2b00      	cmp	r3, #0
1000affc:	d1f6      	bne.n	1000afec <ble_pair_key_request_handler+0xa8>
			DBG_LOG("Pin Timeout");
1000affe:	4650      	mov	r0, sl
1000b000:	47c8      	blx	r9
1000b002:	4821      	ldr	r0, [pc, #132]	; (1000b088 <ble_pair_key_request_handler+0x144>)
1000b004:	47c0      	blx	r8
				DBG_LOG("Disconnecting ...");
1000b006:	4650      	mov	r0, sl
1000b008:	47c8      	blx	r9
1000b00a:	4820      	ldr	r0, [pc, #128]	; (1000b08c <ble_pair_key_request_handler+0x148>)
1000b00c:	47c0      	blx	r8
				if (!(at_ble_disconnect(pair_key->handle,
1000b00e:	9b01      	ldr	r3, [sp, #4]
1000b010:	2113      	movs	r1, #19
1000b012:	8818      	ldrh	r0, [r3, #0]
1000b014:	4b1e      	ldr	r3, [pc, #120]	; (1000b090 <ble_pair_key_request_handler+0x14c>)
1000b016:	4798      	blx	r3
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000b018:	24e2      	movs	r4, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000b01a:	2800      	cmp	r0, #0
1000b01c:	d0b2      	beq.n	1000af84 <ble_pair_key_request_handler+0x40>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000b01e:	4650      	mov	r0, sl
1000b020:	47c8      	blx	r9
1000b022:	481c      	ldr	r0, [pc, #112]	; (1000b094 <ble_pair_key_request_handler+0x150>)
1000b024:	47c0      	blx	r8
1000b026:	e7ad      	b.n	1000af84 <ble_pair_key_request_handler+0x40>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000b028:	4b0f      	ldr	r3, [pc, #60]	; (1000b068 <ble_pair_key_request_handler+0x124>)
1000b02a:	480e      	ldr	r0, [pc, #56]	; (1000b064 <ble_pair_key_request_handler+0x120>)
1000b02c:	4798      	blx	r3
1000b02e:	481a      	ldr	r0, [pc, #104]	; (1000b098 <ble_pair_key_request_handler+0x154>)
1000b030:	4b0e      	ldr	r3, [pc, #56]	; (1000b06c <ble_pair_key_request_handler+0x128>)
1000b032:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000b034:	2400      	movs	r4, #0
1000b036:	e7a5      	b.n	1000af84 <ble_pair_key_request_handler+0x40>
				}
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
1000b038:	465a      	mov	r2, fp
1000b03a:	54a3      	strb	r3, [r4, r2]
			  DBG_LOG_CONT("%c", pin);
1000b03c:	23ff      	movs	r3, #255	; 0xff
1000b03e:	4e0d      	ldr	r6, [pc, #52]	; (1000b074 <ble_pair_key_request_handler+0x130>)
1000b040:	4018      	ands	r0, r3
1000b042:	47b0      	blx	r6
1000b044:	2301      	movs	r3, #1
1000b046:	469c      	mov	ip, r3
1000b048:	44e3      	add	fp, ip
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000b04a:	465b      	mov	r3, fp
1000b04c:	2b06      	cmp	r3, #6
1000b04e:	d1d1      	bne.n	1000aff4 <ble_pair_key_request_handler+0xb0>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000b050:	4650      	mov	r0, sl
1000b052:	47c8      	blx	r9
1000b054:	4811      	ldr	r0, [pc, #68]	; (1000b09c <ble_pair_key_request_handler+0x158>)
1000b056:	47c0      	blx	r8
1000b058:	e7a7      	b.n	1000afaa <ble_pair_key_request_handler+0x66>
1000b05a:	46c0      	nop			; (mov r8, r8)
1000b05c:	10019560 	.word	0x10019560
1000b060:	10017d8f 	.word	0x10017d8f
1000b064:	100191d8 	.word	0x100191d8
1000b068:	10018035 	.word	0x10018035
1000b06c:	10017f15 	.word	0x10017f15
1000b070:	10019720 	.word	0x10019720
1000b074:	10017f49 	.word	0x10017f49
1000b078:	1000ed35 	.word	0x1000ed35
1000b07c:	10019758 	.word	0x10019758
1000b080:	100196d8 	.word	0x100196d8
1000b084:	1000bba9 	.word	0x1000bba9
1000b088:	10019700 	.word	0x10019700
1000b08c:	1001970c 	.word	0x1001970c
1000b090:	1000e899 	.word	0x1000e899
1000b094:	100195f4 	.word	0x100195f4
1000b098:	10019770 	.word	0x10019770
1000b09c:	1001978c 	.word	0x1001978c

1000b0a0 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000b0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b0a2:	4647      	mov	r7, r8
1000b0a4:	4e29      	ldr	r6, [pc, #164]	; (1000b14c <ble_encryption_request_handler+0xac>)
1000b0a6:	b480      	push	{r7}
1000b0a8:	0031      	movs	r1, r6
1000b0aa:	0007      	movs	r7, r0
1000b0ac:	2200      	movs	r2, #0
1000b0ae:	8805      	ldrh	r5, [r0, #0]
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000b0b0:	8908      	ldrh	r0, [r1, #8]
1000b0b2:	0014      	movs	r4, r2
1000b0b4:	42a8      	cmp	r0, r5
1000b0b6:	d01c      	beq.n	1000b0f2 <ble_encryption_request_handler+0x52>
1000b0b8:	3201      	adds	r2, #1
1000b0ba:	317c      	adds	r1, #124	; 0x7c
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b0bc:	2a05      	cmp	r2, #5
1000b0be:	d1f7      	bne.n	1000b0b0 <ble_encryption_request_handler+0x10>
1000b0c0:	2405      	movs	r4, #5
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000b0c2:	4b23      	ldr	r3, [pc, #140]	; (1000b150 <ble_encryption_request_handler+0xb0>)
1000b0c4:	4f23      	ldr	r7, [pc, #140]	; (1000b154 <ble_encryption_request_handler+0xb4>)
1000b0c6:	4698      	mov	r8, r3
1000b0c8:	0018      	movs	r0, r3
1000b0ca:	47b8      	blx	r7
1000b0cc:	4d22      	ldr	r5, [pc, #136]	; (1000b158 <ble_encryption_request_handler+0xb8>)
1000b0ce:	4823      	ldr	r0, [pc, #140]	; (1000b15c <ble_encryption_request_handler+0xbc>)
1000b0d0:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000b0d2:	4640      	mov	r0, r8
1000b0d4:	47b8      	blx	r7
1000b0d6:	4822      	ldr	r0, [pc, #136]	; (1000b160 <ble_encryption_request_handler+0xc0>)
1000b0d8:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000b0da:	0163      	lsls	r3, r4, #5
1000b0dc:	1b1b      	subs	r3, r3, r4
1000b0de:	009b      	lsls	r3, r3, #2
1000b0e0:	18f3      	adds	r3, r6, r3
1000b0e2:	8918      	ldrh	r0, [r3, #8]
1000b0e4:	2105      	movs	r1, #5
1000b0e6:	4b1f      	ldr	r3, [pc, #124]	; (1000b164 <ble_encryption_request_handler+0xc4>)
1000b0e8:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000b0ea:	20e2      	movs	r0, #226	; 0xe2
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
}
1000b0ec:	bc04      	pop	{r2}
1000b0ee:	4690      	mov	r8, r2
1000b0f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000b0f2:	000b      	movs	r3, r1
1000b0f4:	335e      	adds	r3, #94	; 0x5e
1000b0f6:	781b      	ldrb	r3, [r3, #0]
1000b0f8:	2b01      	cmp	r3, #1
1000b0fa:	d9dd      	bls.n	1000b0b8 <ble_encryption_request_handler+0x18>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000b0fc:	0155      	lsls	r5, r2, #5
1000b0fe:	1aad      	subs	r5, r5, r2
1000b100:	2206      	movs	r2, #6
1000b102:	00ad      	lsls	r5, r5, #2
1000b104:	1973      	adds	r3, r6, r5
1000b106:	4698      	mov	r8, r3
1000b108:	335e      	adds	r3, #94	; 0x5e
1000b10a:	701a      	strb	r2, [r3, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000b10c:	8a5a      	ldrh	r2, [r3, #18]
1000b10e:	887b      	ldrh	r3, [r7, #2]
1000b110:	429a      	cmp	r2, r3
1000b112:	d1d6      	bne.n	1000b0c2 <ble_encryption_request_handler+0x22>
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000b114:	1971      	adds	r1, r6, r5
1000b116:	3172      	adds	r1, #114	; 0x72
1000b118:	1d38      	adds	r0, r7, #4
1000b11a:	2208      	movs	r2, #8
1000b11c:	4b12      	ldr	r3, [pc, #72]	; (1000b168 <ble_encryption_request_handler+0xc8>)
1000b11e:	4798      	blx	r3
1000b120:	2800      	cmp	r0, #0
1000b122:	d1ce      	bne.n	1000b0c2 <ble_encryption_request_handler+0x22>
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000b124:	002b      	movs	r3, r5
1000b126:	4642      	mov	r2, r8
1000b128:	3360      	adds	r3, #96	; 0x60
1000b12a:	7d11      	ldrb	r1, [r2, #20]
1000b12c:	199b      	adds	r3, r3, r6
1000b12e:	8838      	ldrh	r0, [r7, #0]
1000b130:	2201      	movs	r2, #1
1000b132:	4c0e      	ldr	r4, [pc, #56]	; (1000b16c <ble_encryption_request_handler+0xcc>)
1000b134:	47a0      	blx	r4
1000b136:	2800      	cmp	r0, #0
1000b138:	d0d8      	beq.n	1000b0ec <ble_encryption_request_handler+0x4c>
	{
		DBG_LOG("Encryption Request Reply Failed");
1000b13a:	4b06      	ldr	r3, [pc, #24]	; (1000b154 <ble_encryption_request_handler+0xb4>)
1000b13c:	4804      	ldr	r0, [pc, #16]	; (1000b150 <ble_encryption_request_handler+0xb0>)
1000b13e:	4798      	blx	r3
1000b140:	480b      	ldr	r0, [pc, #44]	; (1000b170 <ble_encryption_request_handler+0xd0>)
1000b142:	4b05      	ldr	r3, [pc, #20]	; (1000b158 <ble_encryption_request_handler+0xb8>)
1000b144:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000b146:	2000      	movs	r0, #0
1000b148:	e7d0      	b.n	1000b0ec <ble_encryption_request_handler+0x4c>
1000b14a:	46c0      	nop			; (mov r8, r8)
1000b14c:	1001c420 	.word	0x1001c420
1000b150:	100191d8 	.word	0x100191d8
1000b154:	10018035 	.word	0x10018035
1000b158:	10017f15 	.word	0x10017f15
1000b15c:	100197a0 	.word	0x100197a0
1000b160:	100197d8 	.word	0x100197d8
1000b164:	1000e899 	.word	0x1000e899
1000b168:	10017d71 	.word	0x10017d71
1000b16c:	1000ee69 	.word	0x1000ee69
1000b170:	10019830 	.word	0x10019830

1000b174 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000b174:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000b176:	7800      	ldrb	r0, [r0, #0]
1000b178:	2800      	cmp	r0, #0
1000b17a:	d006      	beq.n	1000b18a <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000b17c:	4b03      	ldr	r3, [pc, #12]	; (1000b18c <ble_scan_report_handler+0x18>)
1000b17e:	4804      	ldr	r0, [pc, #16]	; (1000b190 <ble_scan_report_handler+0x1c>)
1000b180:	4798      	blx	r3
1000b182:	4804      	ldr	r0, [pc, #16]	; (1000b194 <ble_scan_report_handler+0x20>)
1000b184:	4b04      	ldr	r3, [pc, #16]	; (1000b198 <ble_scan_report_handler+0x24>)
1000b186:	4798      	blx	r3
1000b188:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_FAILURE;
}
1000b18a:	bd10      	pop	{r4, pc}
1000b18c:	10018035 	.word	0x10018035
1000b190:	100191d8 	.word	0x100191d8
1000b194:	10019850 	.word	0x10019850
1000b198:	10017f15 	.word	0x10017f15

1000b19c <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000b19c:	b510      	push	{r4, lr}
1000b19e:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000b1a0:	78c0      	ldrb	r0, [r0, #3]
1000b1a2:	2800      	cmp	r0, #0
1000b1a4:	d008      	beq.n	1000b1b8 <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000b1a6:	4b05      	ldr	r3, [pc, #20]	; (1000b1bc <ble_mtu_changed_cmd_complete_handler+0x20>)
1000b1a8:	4805      	ldr	r0, [pc, #20]	; (1000b1c0 <ble_mtu_changed_cmd_complete_handler+0x24>)
1000b1aa:	4798      	blx	r3
1000b1ac:	78a2      	ldrb	r2, [r4, #2]
1000b1ae:	8821      	ldrh	r1, [r4, #0]
1000b1b0:	4804      	ldr	r0, [pc, #16]	; (1000b1c4 <ble_mtu_changed_cmd_complete_handler+0x28>)
1000b1b2:	4b05      	ldr	r3, [pc, #20]	; (1000b1c8 <ble_mtu_changed_cmd_complete_handler+0x2c>)
1000b1b4:	4798      	blx	r3
1000b1b6:	20e2      	movs	r0, #226	; 0xe2
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
}
1000b1b8:	bd10      	pop	{r4, pc}
1000b1ba:	46c0      	nop			; (mov r8, r8)
1000b1bc:	10018035 	.word	0x10018035
1000b1c0:	100191d8 	.word	0x100191d8
1000b1c4:	10019864 	.word	0x10019864
1000b1c8:	10017f15 	.word	0x10017f15

1000b1cc <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000b1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b1ce:	4d25      	ldr	r5, [pc, #148]	; (1000b264 <ble_encryption_status_change_handler+0x98>)
1000b1d0:	2400      	movs	r4, #0
1000b1d2:	002b      	movs	r3, r5
1000b1d4:	0007      	movs	r7, r0
1000b1d6:	8800      	ldrh	r0, [r0, #0]
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000b1d8:	891a      	ldrh	r2, [r3, #8]
1000b1da:	0021      	movs	r1, r4
1000b1dc:	4282      	cmp	r2, r0
1000b1de:	d018      	beq.n	1000b212 <ble_encryption_status_change_handler+0x46>
1000b1e0:	3401      	adds	r4, #1
1000b1e2:	337c      	adds	r3, #124	; 0x7c
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b1e4:	2c05      	cmp	r4, #5
1000b1e6:	d1f7      	bne.n	1000b1d8 <ble_encryption_status_change_handler+0xc>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000b1e8:	78be      	ldrb	r6, [r7, #2]
1000b1ea:	2e00      	cmp	r6, #0
1000b1ec:	d02c      	beq.n	1000b248 <ble_encryption_status_change_handler+0x7c>
1000b1ee:	2105      	movs	r1, #5
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000b1f0:	014b      	lsls	r3, r1, #5
1000b1f2:	1a5c      	subs	r4, r3, r1
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000b1f4:	2307      	movs	r3, #7
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000b1f6:	00a4      	lsls	r4, r4, #2
1000b1f8:	192c      	adds	r4, r5, r4
1000b1fa:	7626      	strb	r6, [r4, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000b1fc:	345e      	adds	r4, #94	; 0x5e
1000b1fe:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000b200:	4819      	ldr	r0, [pc, #100]	; (1000b268 <ble_encryption_status_change_handler+0x9c>)
1000b202:	4b1a      	ldr	r3, [pc, #104]	; (1000b26c <ble_encryption_status_change_handler+0xa0>)
1000b204:	4798      	blx	r3
1000b206:	481a      	ldr	r0, [pc, #104]	; (1000b270 <ble_encryption_status_change_handler+0xa4>)
1000b208:	4b1a      	ldr	r3, [pc, #104]	; (1000b274 <ble_encryption_status_change_handler+0xa8>)
1000b20a:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000b20c:	26e2      	movs	r6, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000b20e:	0030      	movs	r0, r6
1000b210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000b212:	001a      	movs	r2, r3
1000b214:	325e      	adds	r2, #94	; 0x5e
1000b216:	7812      	ldrb	r2, [r2, #0]
1000b218:	2a06      	cmp	r2, #6
1000b21a:	d1e1      	bne.n	1000b1e0 <ble_encryption_status_change_handler+0x14>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000b21c:	78be      	ldrb	r6, [r7, #2]
1000b21e:	2e00      	cmp	r6, #0
1000b220:	d1e6      	bne.n	1000b1f0 <ble_encryption_status_change_handler+0x24>
	{
		DBG_LOG("Encryption completed successfully");
1000b222:	4b12      	ldr	r3, [pc, #72]	; (1000b26c <ble_encryption_status_change_handler+0xa0>)
1000b224:	4810      	ldr	r0, [pc, #64]	; (1000b268 <ble_encryption_status_change_handler+0x9c>)
1000b226:	4798      	blx	r3
1000b228:	4b12      	ldr	r3, [pc, #72]	; (1000b274 <ble_encryption_status_change_handler+0xa8>)
1000b22a:	4813      	ldr	r0, [pc, #76]	; (1000b278 <ble_encryption_status_change_handler+0xac>)
1000b22c:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000b22e:	0163      	lsls	r3, r4, #5
1000b230:	1b1c      	subs	r4, r3, r4
1000b232:	00a4      	lsls	r4, r4, #2
1000b234:	192c      	adds	r4, r5, r4
1000b236:	0023      	movs	r3, r4
1000b238:	2208      	movs	r2, #8
1000b23a:	335e      	adds	r3, #94	; 0x5e
1000b23c:	701a      	strb	r2, [r3, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000b23e:	78fb      	ldrb	r3, [r7, #3]
1000b240:	7523      	strb	r3, [r4, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000b242:	78bb      	ldrb	r3, [r7, #2]
1000b244:	7623      	strb	r3, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000b246:	e7e2      	b.n	1000b20e <ble_encryption_status_change_handler+0x42>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000b248:	4e07      	ldr	r6, [pc, #28]	; (1000b268 <ble_encryption_status_change_handler+0x9c>)
1000b24a:	4d08      	ldr	r5, [pc, #32]	; (1000b26c <ble_encryption_status_change_handler+0xa0>)
1000b24c:	0030      	movs	r0, r6
1000b24e:	47a8      	blx	r5
1000b250:	4c08      	ldr	r4, [pc, #32]	; (1000b274 <ble_encryption_status_change_handler+0xa8>)
1000b252:	4809      	ldr	r0, [pc, #36]	; (1000b278 <ble_encryption_status_change_handler+0xac>)
1000b254:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000b256:	0030      	movs	r0, r6
1000b258:	47a8      	blx	r5
1000b25a:	4808      	ldr	r0, [pc, #32]	; (1000b27c <ble_encryption_status_change_handler+0xb0>)
1000b25c:	47a0      	blx	r4
1000b25e:	26e2      	movs	r6, #226	; 0xe2
1000b260:	e7d5      	b.n	1000b20e <ble_encryption_status_change_handler+0x42>
1000b262:	46c0      	nop			; (mov r8, r8)
1000b264:	1001c420 	.word	0x1001c420
1000b268:	100191d8 	.word	0x100191d8
1000b26c:	10018035 	.word	0x10018035
1000b270:	1001989c 	.word	0x1001989c
1000b274:	10017f15 	.word	0x10017f15
1000b278:	100198b0 	.word	0x100198b0
1000b27c:	100198d4 	.word	0x100198d4

1000b280 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000b280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000b282:	4c15      	ldr	r4, [pc, #84]	; (1000b2d8 <ble_scan_info_handler+0x58>)
1000b284:	7823      	ldrb	r3, [r4, #0]
1000b286:	2b13      	cmp	r3, #19
1000b288:	d90d      	bls.n	1000b2a6 <ble_scan_info_handler+0x26>
		scan_response_count++;
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000b28a:	4f14      	ldr	r7, [pc, #80]	; (1000b2dc <ble_scan_info_handler+0x5c>)
1000b28c:	4e14      	ldr	r6, [pc, #80]	; (1000b2e0 <ble_scan_info_handler+0x60>)
1000b28e:	0038      	movs	r0, r7
1000b290:	47b0      	blx	r6
1000b292:	4814      	ldr	r0, [pc, #80]	; (1000b2e4 <ble_scan_info_handler+0x64>)
1000b294:	4d14      	ldr	r5, [pc, #80]	; (1000b2e8 <ble_scan_info_handler+0x68>)
1000b296:	47a8      	blx	r5
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000b298:	4b14      	ldr	r3, [pc, #80]	; (1000b2ec <ble_scan_info_handler+0x6c>)
1000b29a:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000b29c:	24e2      	movs	r4, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000b29e:	2800      	cmp	r0, #0
1000b2a0:	d115      	bne.n	1000b2ce <ble_scan_info_handler+0x4e>
		}
	
		#endif
		return AT_BLE_FAILURE;
	}
}
1000b2a2:	0020      	movs	r0, r4
1000b2a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000b2a6:	7823      	ldrb	r3, [r4, #0]
1000b2a8:	0001      	movs	r1, r0
1000b2aa:	b2db      	uxtb	r3, r3
1000b2ac:	009a      	lsls	r2, r3, #2
1000b2ae:	18d2      	adds	r2, r2, r3
1000b2b0:	00d2      	lsls	r2, r2, #3
1000b2b2:	18d3      	adds	r3, r2, r3
1000b2b4:	4a0e      	ldr	r2, [pc, #56]	; (1000b2f0 <ble_scan_info_handler+0x70>)
1000b2b6:	189b      	adds	r3, r3, r2
1000b2b8:	0018      	movs	r0, r3
1000b2ba:	2229      	movs	r2, #41	; 0x29
1000b2bc:	4b0d      	ldr	r3, [pc, #52]	; (1000b2f4 <ble_scan_info_handler+0x74>)
1000b2be:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000b2c0:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000b2c2:	7823      	ldrb	r3, [r4, #0]
1000b2c4:	3301      	adds	r3, #1
1000b2c6:	b2db      	uxtb	r3, r3
1000b2c8:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
1000b2ca:	2400      	movs	r4, #0
1000b2cc:	e7e9      	b.n	1000b2a2 <ble_scan_info_handler+0x22>
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
		{
			DBG_LOG("Failed to stop scanning");
1000b2ce:	0038      	movs	r0, r7
1000b2d0:	47b0      	blx	r6
1000b2d2:	4809      	ldr	r0, [pc, #36]	; (1000b2f8 <ble_scan_info_handler+0x78>)
1000b2d4:	47a8      	blx	r5
1000b2d6:	e7e4      	b.n	1000b2a2 <ble_scan_info_handler+0x22>
1000b2d8:	1001bee8 	.word	0x1001bee8
1000b2dc:	100191d8 	.word	0x100191d8
1000b2e0:	10018035 	.word	0x10018035
1000b2e4:	100198fc 	.word	0x100198fc
1000b2e8:	10017f15 	.word	0x10017f15
1000b2ec:	1000e879 	.word	0x1000e879
1000b2f0:	1001c704 	.word	0x1001c704
1000b2f4:	10017d8f 	.word	0x10017d8f
1000b2f8:	10019934 	.word	0x10019934

1000b2fc <ble_mtu_changed_indication_handler>:
1000b2fc:	2000      	movs	r0, #0
1000b2fe:	4770      	bx	lr

1000b300 <ble_undefined_event_handler>:
1000b300:	2000      	movs	r0, #0
1000b302:	4770      	bx	lr

1000b304 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000b304:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b306:	465f      	mov	r7, fp
1000b308:	4656      	mov	r6, sl
1000b30a:	464d      	mov	r5, r9
1000b30c:	4644      	mov	r4, r8
1000b30e:	b4f0      	push	{r4, r5, r6, r7}
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000b310:	2700      	movs	r7, #0
1000b312:	4b82      	ldr	r3, [pc, #520]	; (1000b51c <ble_device_init+0x218>)
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000b314:	b091      	sub	sp, #68	; 0x44
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000b316:	601f      	str	r7, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000b318:	2207      	movs	r2, #7
1000b31a:	2100      	movs	r1, #0
1000b31c:	4b80      	ldr	r3, [pc, #512]	; (1000b520 <ble_device_init+0x21c>)
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000b31e:	0006      	movs	r6, r0

static void init_global_var(void)
{
	ble_user_event_cb = 0;
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000b320:	4880      	ldr	r0, [pc, #512]	; (1000b524 <ble_device_init+0x220>)
1000b322:	4798      	blx	r3
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000b324:	2212      	movs	r2, #18
1000b326:	2100      	movs	r1, #0
1000b328:	4b7d      	ldr	r3, [pc, #500]	; (1000b520 <ble_device_init+0x21c>)
1000b32a:	487f      	ldr	r0, [pc, #508]	; (1000b528 <ble_device_init+0x224>)
1000b32c:	4798      	blx	r3
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
#endif

	scan_response_count = 0;
	memset(scan_info, 0, sizeof(scan_info));
1000b32e:	22cd      	movs	r2, #205	; 0xcd
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
#endif

	scan_response_count = 0;
1000b330:	4b7e      	ldr	r3, [pc, #504]	; (1000b52c <ble_device_init+0x228>)
	memset(scan_info, 0, sizeof(scan_info));
1000b332:	0092      	lsls	r2, r2, #2
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
#endif

	scan_response_count = 0;
1000b334:	701f      	strb	r7, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000b336:	2100      	movs	r1, #0
1000b338:	4b79      	ldr	r3, [pc, #484]	; (1000b520 <ble_device_init+0x21c>)
1000b33a:	487d      	ldr	r0, [pc, #500]	; (1000b530 <ble_device_init+0x22c>)
1000b33c:	4798      	blx	r3

	event = AT_BLE_UNDEFINED_EVENT;
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000b33e:	2283      	movs	r2, #131	; 0x83
#endif

	scan_response_count = 0;
	memset(scan_info, 0, sizeof(scan_info));

	event = AT_BLE_UNDEFINED_EVENT;
1000b340:	4b7c      	ldr	r3, [pc, #496]	; (1000b534 <ble_device_init+0x230>)
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000b342:	0092      	lsls	r2, r2, #2
#endif

	scan_response_count = 0;
	memset(scan_info, 0, sizeof(scan_info));

	event = AT_BLE_UNDEFINED_EVENT;
1000b344:	701f      	strb	r7, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000b346:	2100      	movs	r1, #0
1000b348:	4b75      	ldr	r3, [pc, #468]	; (1000b520 <ble_device_init+0x21c>)
1000b34a:	487b      	ldr	r0, [pc, #492]	; (1000b538 <ble_device_init+0x234>)
1000b34c:	4798      	blx	r3
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000b34e:	4b7b      	ldr	r3, [pc, #492]	; (1000b53c <ble_device_init+0x238>)
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000b350:	2480      	movs	r4, #128	; 0x80
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000b352:	469a      	mov	sl, r3
1000b354:	2380      	movs	r3, #128	; 0x80
1000b356:	00db      	lsls	r3, r3, #3
1000b358:	4699      	mov	r9, r3
1000b35a:	001a      	movs	r2, r3
1000b35c:	2100      	movs	r1, #0
1000b35e:	4650      	mov	r0, sl
1000b360:	4b6f      	ldr	r3, [pc, #444]	; (1000b520 <ble_device_init+0x21c>)
1000b362:	4798      	blx	r3
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000b364:	4d76      	ldr	r5, [pc, #472]	; (1000b540 <ble_device_init+0x23c>)
1000b366:	0164      	lsls	r4, r4, #5
1000b368:	0022      	movs	r2, r4
1000b36a:	2100      	movs	r1, #0
1000b36c:	0028      	movs	r0, r5
1000b36e:	4b6c      	ldr	r3, [pc, #432]	; (1000b520 <ble_device_init+0x21c>)
1000b370:	4798      	blx	r3

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000b372:	4b74      	ldr	r3, [pc, #464]	; (1000b544 <ble_device_init+0x240>)
1000b374:	221c      	movs	r2, #28
1000b376:	469b      	mov	fp, r3
1000b378:	0018      	movs	r0, r3
1000b37a:	2100      	movs	r1, #0
1000b37c:	4b68      	ldr	r3, [pc, #416]	; (1000b520 <ble_device_init+0x21c>)
1000b37e:	4798      	blx	r3

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000b380:	465b      	mov	r3, fp
1000b382:	4652      	mov	r2, sl
1000b384:	609a      	str	r2, [r3, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000b386:	464a      	mov	r2, r9
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000b388:	611d      	str	r5, [r3, #16]
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));

	memset(&pf_cfg, 0, sizeof(pf_cfg));

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000b38a:	60da      	str	r2, [r3, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000b38c:	615c      	str	r4, [r3, #20]
		ble_mgr_gap_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000b38e:	4b6e      	ldr	r3, [pc, #440]	; (1000b548 <ble_device_init+0x244>)
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000b390:	4d6e      	ldr	r5, [pc, #440]	; (1000b54c <ble_device_init+0x248>)
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000b392:	601f      	str	r7, [r3, #0]
1000b394:	605f      	str	r7, [r3, #4]
1000b396:	609f      	str	r7, [r3, #8]
1000b398:	60df      	str	r7, [r3, #12]
1000b39a:	611f      	str	r7, [r3, #16]
		ble_mgr_gatt_server_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000b39c:	4b6c      	ldr	r3, [pc, #432]	; (1000b550 <ble_device_init+0x24c>)
		ble_mgr_gatt_client_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000b39e:	4c6d      	ldr	r4, [pc, #436]	; (1000b554 <ble_device_init+0x250>)
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000b3a0:	601f      	str	r7, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000b3a2:	4b6d      	ldr	r3, [pc, #436]	; (1000b558 <ble_device_init+0x254>)
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000b3a4:	602f      	str	r7, [r5, #0]
		ble_mgr_l2cap_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000b3a6:	601f      	str	r7, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000b3a8:	4b6c      	ldr	r3, [pc, #432]	; (1000b55c <ble_device_init+0x258>)
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000b3aa:	606f      	str	r7, [r5, #4]
1000b3ac:	60af      	str	r7, [r5, #8]
1000b3ae:	60ef      	str	r7, [r5, #12]
1000b3b0:	612f      	str	r7, [r5, #16]
		ble_mgr_gatt_client_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000b3b2:	6027      	str	r7, [r4, #0]
1000b3b4:	6067      	str	r7, [r4, #4]
1000b3b6:	60a7      	str	r7, [r4, #8]
1000b3b8:	60e7      	str	r7, [r4, #12]
1000b3ba:	6127      	str	r7, [r4, #16]
		ble_mgr_htpt_event_cb[idx] = NULL;
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000b3bc:	601f      	str	r7, [r3, #0]
1000b3be:	605f      	str	r7, [r3, #4]
1000b3c0:	609f      	str	r7, [r3, #8]
1000b3c2:	60df      	str	r7, [r3, #12]
1000b3c4:	611f      	str	r7, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000b3c6:	4b66      	ldr	r3, [pc, #408]	; (1000b560 <ble_device_init+0x25c>)
1000b3c8:	601f      	str	r7, [r3, #0]
1000b3ca:	4b66      	ldr	r3, [pc, #408]	; (1000b564 <ble_device_init+0x260>)
1000b3cc:	4698      	mov	r8, r3
1000b3ce:	239b      	movs	r3, #155	; 0x9b
1000b3d0:	009b      	lsls	r3, r3, #2
1000b3d2:	4443      	add	r3, r8
1000b3d4:	469a      	mov	sl, r3
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000b3d6:	2340      	movs	r3, #64	; 0x40
1000b3d8:	4699      	mov	r9, r3
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000b3da:	227c      	movs	r2, #124	; 0x7c
1000b3dc:	2100      	movs	r1, #0
1000b3de:	4640      	mov	r0, r8
1000b3e0:	4b4f      	ldr	r3, [pc, #316]	; (1000b520 <ble_device_init+0x21c>)
1000b3e2:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000b3e4:	4642      	mov	r2, r8
1000b3e6:	2300      	movs	r3, #0
1000b3e8:	325e      	adds	r2, #94	; 0x5e
1000b3ea:	7013      	strb	r3, [r2, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000b3ec:	4649      	mov	r1, r9
1000b3ee:	4642      	mov	r2, r8
1000b3f0:	7611      	strb	r1, [r2, #24]
1000b3f2:	227c      	movs	r2, #124	; 0x7c
1000b3f4:	4694      	mov	ip, r2
1000b3f6:	44e0      	add	r8, ip
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b3f8:	45d0      	cmp	r8, sl
1000b3fa:	d1ee      	bne.n	1000b3da <ble_device_init+0xd6>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000b3fc:	4a5a      	ldr	r2, [pc, #360]	; (1000b568 <ble_device_init+0x264>)
1000b3fe:	7013      	strb	r3, [r2, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing SAMB11");
1000b400:	4b5a      	ldr	r3, [pc, #360]	; (1000b56c <ble_device_init+0x268>)
1000b402:	0018      	movs	r0, r3
1000b404:	469a      	mov	sl, r3
1000b406:	4b5a      	ldr	r3, [pc, #360]	; (1000b570 <ble_device_init+0x26c>)
1000b408:	4699      	mov	r9, r3
1000b40a:	4798      	blx	r3
1000b40c:	4b59      	ldr	r3, [pc, #356]	; (1000b574 <ble_device_init+0x270>)
1000b40e:	485a      	ldr	r0, [pc, #360]	; (1000b578 <ble_device_init+0x274>)
1000b410:	4698      	mov	r8, r3
1000b412:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000b414:	4658      	mov	r0, fp
1000b416:	4b59      	ldr	r3, [pc, #356]	; (1000b57c <ble_device_init+0x278>)
1000b418:	4798      	blx	r3
1000b41a:	2800      	cmp	r0, #0
1000b41c:	d15e      	bne.n	1000b4dc <ble_device_init+0x1d8>
1000b41e:	002b      	movs	r3, r5
1000b420:	3314      	adds	r3, #20
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000b422:	682a      	ldr	r2, [r5, #0]
1000b424:	2a00      	cmp	r2, #0
1000b426:	d062      	beq.n	1000b4ee <ble_device_init+0x1ea>
1000b428:	3504      	adds	r5, #4
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000b42a:	429d      	cmp	r5, r3
1000b42c:	d1f9      	bne.n	1000b422 <ble_device_init+0x11e>
1000b42e:	0023      	movs	r3, r4
1000b430:	3314      	adds	r3, #20
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000b432:	6822      	ldr	r2, [r4, #0]
1000b434:	2a00      	cmp	r2, #0
1000b436:	d06d      	beq.n	1000b514 <ble_device_init+0x210>
1000b438:	3404      	adds	r4, #4
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000b43a:	42a3      	cmp	r3, r4
1000b43c:	d1f9      	bne.n	1000b432 <ble_device_init+0x12e>
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000b43e:	2109      	movs	r1, #9
1000b440:	484f      	ldr	r0, [pc, #316]	; (1000b580 <ble_device_init+0x27c>)
1000b442:	4b50      	ldr	r3, [pc, #320]	; (1000b584 <ble_device_init+0x280>)
1000b444:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000b446:	2800      	cmp	r0, #0
1000b448:	d003      	beq.n	1000b452 <ble_device_init+0x14e>
	{
		DBG_LOG("Device name set failed");
1000b44a:	4650      	mov	r0, sl
1000b44c:	47c8      	blx	r9
1000b44e:	484e      	ldr	r0, [pc, #312]	; (1000b588 <ble_device_init+0x284>)
1000b450:	47c0      	blx	r8

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000b452:	494e      	ldr	r1, [pc, #312]	; (1000b58c <ble_device_init+0x288>)
1000b454:	2207      	movs	r2, #7
1000b456:	3108      	adds	r1, #8
1000b458:	a804      	add	r0, sp, #16
1000b45a:	4d4d      	ldr	r5, [pc, #308]	; (1000b590 <ble_device_init+0x28c>)
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000b45c:	ac06      	add	r4, sp, #24

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000b45e:	47a8      	blx	r5
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000b460:	2226      	movs	r2, #38	; 0x26
1000b462:	2100      	movs	r1, #0
1000b464:	0020      	movs	r0, r4
1000b466:	4b2e      	ldr	r3, [pc, #184]	; (1000b520 <ble_device_init+0x21c>)
1000b468:	4798      	blx	r3
	
	if (addr == NULL)
1000b46a:	2e00      	cmp	r6, #0
1000b46c:	d047      	beq.n	1000b4fe <ble_device_init+0x1fa>
		
		/* Copy the BD address into address pointer */
		addr = &address;
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000b46e:	4650      	mov	r0, sl
1000b470:	47c8      	blx	r9
1000b472:	7830      	ldrb	r0, [r6, #0]
1000b474:	7933      	ldrb	r3, [r6, #4]
1000b476:	7972      	ldrb	r2, [r6, #5]
1000b478:	79b1      	ldrb	r1, [r6, #6]
1000b47a:	9003      	str	r0, [sp, #12]
1000b47c:	7870      	ldrb	r0, [r6, #1]
1000b47e:	9002      	str	r0, [sp, #8]
1000b480:	78b0      	ldrb	r0, [r6, #2]
1000b482:	9001      	str	r0, [sp, #4]
1000b484:	78f0      	ldrb	r0, [r6, #3]
1000b486:	9000      	str	r0, [sp, #0]
1000b488:	4842      	ldr	r0, [pc, #264]	; (1000b594 <ble_device_init+0x290>)
1000b48a:	47c0      	blx	r8
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000b48c:	230a      	movs	r3, #10
1000b48e:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000b490:	4b41      	ldr	r3, [pc, #260]	; (1000b598 <ble_device_init+0x294>)
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000b492:	2207      	movs	r2, #7
1000b494:	0031      	movs	r1, r6
1000b496:	a807      	add	r0, sp, #28
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000b498:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000b49a:	47a8      	blx	r5
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000b49c:	2300      	movs	r3, #0
1000b49e:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000b4a0:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000b4a2:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000b4a4:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000b4a6:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000b4a8:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000b4aa:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000b4ac:	2380      	movs	r3, #128	; 0x80
1000b4ae:	009b      	lsls	r3, r3, #2
1000b4b0:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000b4b2:	0020      	movs	r0, r4
1000b4b4:	4b39      	ldr	r3, [pc, #228]	; (1000b59c <ble_device_init+0x298>)
1000b4b6:	4798      	blx	r3
1000b4b8:	2800      	cmp	r0, #0
1000b4ba:	d11b      	bne.n	1000b4f4 <ble_device_init+0x1f0>
	{
		DBG_LOG("Set BLE Device configuration failed");
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000b4bc:	0030      	movs	r0, r6
1000b4be:	4b38      	ldr	r3, [pc, #224]	; (1000b5a0 <ble_device_init+0x29c>)
1000b4c0:	4798      	blx	r3
1000b4c2:	2800      	cmp	r0, #0
1000b4c4:	d003      	beq.n	1000b4ce <ble_device_init+0x1ca>
	{
		DBG_LOG("Set BLE Device Address failed");
1000b4c6:	4650      	mov	r0, sl
1000b4c8:	47c8      	blx	r9
1000b4ca:	4836      	ldr	r0, [pc, #216]	; (1000b5a4 <ble_device_init+0x2a0>)
1000b4cc:	47c0      	blx	r8
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000b4ce:	b011      	add	sp, #68	; 0x44
1000b4d0:	bc3c      	pop	{r2, r3, r4, r5}
1000b4d2:	4690      	mov	r8, r2
1000b4d4:	4699      	mov	r9, r3
1000b4d6:	46a2      	mov	sl, r4
1000b4d8:	46ab      	mov	fp, r5
1000b4da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	DBG_LOG("Initializing SAMB11");
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
	{
		DBG_LOG("SAMB11 Initialization failed");
1000b4dc:	4650      	mov	r0, sl
1000b4de:	47c8      	blx	r9
1000b4e0:	4831      	ldr	r0, [pc, #196]	; (1000b5a8 <ble_device_init+0x2a4>)
1000b4e2:	47c0      	blx	r8
		DBG_LOG("Please check the power and connection / hardware connector");	
1000b4e4:	4650      	mov	r0, sl
1000b4e6:	47c8      	blx	r9
1000b4e8:	4830      	ldr	r0, [pc, #192]	; (1000b5ac <ble_device_init+0x2a8>)
1000b4ea:	47c0      	blx	r8
1000b4ec:	e7fe      	b.n	1000b4ec <ble_device_init+0x1e8>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000b4ee:	4b30      	ldr	r3, [pc, #192]	; (1000b5b0 <ble_device_init+0x2ac>)
1000b4f0:	602b      	str	r3, [r5, #0]
1000b4f2:	e79c      	b.n	1000b42e <ble_device_init+0x12a>
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
	{
		DBG_LOG("Set BLE Device configuration failed");
1000b4f4:	4650      	mov	r0, sl
1000b4f6:	47c8      	blx	r9
1000b4f8:	482e      	ldr	r0, [pc, #184]	; (1000b5b4 <ble_device_init+0x2b0>)
1000b4fa:	47c0      	blx	r8
1000b4fc:	e7de      	b.n	1000b4bc <ble_device_init+0x1b8>
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000b4fe:	a804      	add	r0, sp, #16
1000b500:	4b2d      	ldr	r3, [pc, #180]	; (1000b5b8 <ble_device_init+0x2b4>)
1000b502:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000b504:	ae04      	add	r6, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000b506:	2800      	cmp	r0, #0
1000b508:	d0b1      	beq.n	1000b46e <ble_device_init+0x16a>
		{
			DBG_LOG("BD address get failed");
1000b50a:	4650      	mov	r0, sl
1000b50c:	47c8      	blx	r9
1000b50e:	482b      	ldr	r0, [pc, #172]	; (1000b5bc <ble_device_init+0x2b8>)
1000b510:	47c0      	blx	r8
1000b512:	e7ac      	b.n	1000b46e <ble_device_init+0x16a>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000b514:	4b2a      	ldr	r3, [pc, #168]	; (1000b5c0 <ble_device_init+0x2bc>)
1000b516:	6023      	str	r3, [r4, #0]
1000b518:	e791      	b.n	1000b43e <ble_device_init+0x13a>
1000b51a:	46c0      	nop			; (mov r8, r8)
1000b51c:	1001bee4 	.word	0x1001bee4
1000b520:	10017dcb 	.word	0x10017dcb
1000b524:	1001beec 	.word	0x1001beec
1000b528:	1001c6cc 	.word	0x1001c6cc
1000b52c:	1001bee8 	.word	0x1001bee8
1000b530:	1001c704 	.word	0x1001c704
1000b534:	1001c6fc 	.word	0x1001c6fc
1000b538:	1001ca38 	.word	0x1001ca38
1000b53c:	1001aae4 	.word	0x1001aae4
1000b540:	1001aee4 	.word	0x1001aee4
1000b544:	1001c6e0 	.word	0x1001c6e0
1000b548:	1001c6b8 	.word	0x1001c6b8
1000b54c:	1001c6a4 	.word	0x1001c6a4
1000b550:	1001c700 	.word	0x1001c700
1000b554:	1001c40c 	.word	0x1001c40c
1000b558:	1001c408 	.word	0x1001c408
1000b55c:	1001c690 	.word	0x1001c690
1000b560:	1001cc44 	.word	0x1001cc44
1000b564:	1001c420 	.word	0x1001c420
1000b568:	1001c68c 	.word	0x1001c68c
1000b56c:	100191d8 	.word	0x100191d8
1000b570:	10018035 	.word	0x10018035
1000b574:	10017f15 	.word	0x10017f15
1000b578:	1001994c 	.word	0x1001994c
1000b57c:	1000e671 	.word	0x1000e671
1000b580:	100199bc 	.word	0x100199bc
1000b584:	1000e589 	.word	0x1000e589
1000b588:	100199c8 	.word	0x100199c8
1000b58c:	10019560 	.word	0x10019560
1000b590:	10017d8f 	.word	0x10017d8f
1000b594:	100199f8 	.word	0x100199f8
1000b598:	00003a98 	.word	0x00003a98
1000b59c:	1000e5e1 	.word	0x1000e5e1
1000b5a0:	1000e825 	.word	0x1000e825
1000b5a4:	10019a54 	.word	0x10019a54
1000b5a8:	10019960 	.word	0x10019960
1000b5ac:	10019980 	.word	0x10019980
1000b5b0:	10019bb8 	.word	0x10019bb8
1000b5b4:	10019a30 	.word	0x10019a30
1000b5b8:	1000e5bd 	.word	0x1000e5bd
1000b5bc:	100199e0 	.word	0x100199e0
1000b5c0:	1001957c 	.word	0x1001957c

1000b5c4 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000b5c4:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000b5c6:	2201      	movs	r2, #1
1000b5c8:	2101      	movs	r1, #1
1000b5ca:	4b06      	ldr	r3, [pc, #24]	; (1000b5e4 <ble_send_slave_sec_request+0x20>)
1000b5cc:	4798      	blx	r3
1000b5ce:	2800      	cmp	r0, #0
1000b5d0:	d006      	beq.n	1000b5e0 <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000b5d2:	4b05      	ldr	r3, [pc, #20]	; (1000b5e8 <ble_send_slave_sec_request+0x24>)
1000b5d4:	4805      	ldr	r0, [pc, #20]	; (1000b5ec <ble_send_slave_sec_request+0x28>)
1000b5d6:	4798      	blx	r3
1000b5d8:	4805      	ldr	r0, [pc, #20]	; (1000b5f0 <ble_send_slave_sec_request+0x2c>)
1000b5da:	4b06      	ldr	r3, [pc, #24]	; (1000b5f4 <ble_send_slave_sec_request+0x30>)
1000b5dc:	4798      	blx	r3
1000b5de:	20e2      	movs	r0, #226	; 0xe2
		}
	#endif
	return AT_BLE_FAILURE;
}
1000b5e0:	bd10      	pop	{r4, pc}
1000b5e2:	46c0      	nop			; (mov r8, r8)
1000b5e4:	1000edb1 	.word	0x1000edb1
1000b5e8:	10018035 	.word	0x10018035
1000b5ec:	100191d8 	.word	0x100191d8
1000b5f0:	10019a90 	.word	0x10019a90
1000b5f4:	10017f15 	.word	0x10017f15

1000b5f8 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000b5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b5fa:	464d      	mov	r5, r9
1000b5fc:	4644      	mov	r4, r8
1000b5fe:	465f      	mov	r7, fp
1000b600:	4656      	mov	r6, sl
1000b602:	b4f0      	push	{r4, r5, r6, r7}
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000b604:	7a85      	ldrb	r5, [r0, #10]
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000b606:	b099      	sub	sp, #100	; 0x64
1000b608:	0004      	movs	r4, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000b60a:	2d00      	cmp	r5, #0
1000b60c:	d156      	bne.n	1000b6bc <ble_connected_state_handler+0xc4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000b60e:	4b69      	ldr	r3, [pc, #420]	; (1000b7b4 <ble_connected_state_handler+0x1bc>)
1000b610:	4699      	mov	r9, r3
1000b612:	0018      	movs	r0, r3
1000b614:	4b68      	ldr	r3, [pc, #416]	; (1000b7b8 <ble_connected_state_handler+0x1c0>)
1000b616:	4698      	mov	r8, r3
1000b618:	4798      	blx	r3
1000b61a:	7860      	ldrb	r0, [r4, #1]
1000b61c:	7923      	ldrb	r3, [r4, #4]
1000b61e:	7962      	ldrb	r2, [r4, #5]
1000b620:	79a1      	ldrb	r1, [r4, #6]
1000b622:	9002      	str	r0, [sp, #8]
1000b624:	78a0      	ldrb	r0, [r4, #2]
1000b626:	4f65      	ldr	r7, [pc, #404]	; (1000b7bc <ble_connected_state_handler+0x1c4>)
1000b628:	9001      	str	r0, [sp, #4]
1000b62a:	78e0      	ldrb	r0, [r4, #3]
1000b62c:	9000      	str	r0, [sp, #0]
1000b62e:	4864      	ldr	r0, [pc, #400]	; (1000b7c0 <ble_connected_state_handler+0x1c8>)
1000b630:	47b8      	blx	r7
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000b632:	4648      	mov	r0, r9
1000b634:	47c0      	blx	r8
1000b636:	8921      	ldrh	r1, [r4, #8]
1000b638:	4862      	ldr	r0, [pc, #392]	; (1000b7c4 <ble_connected_state_handler+0x1cc>)
1000b63a:	47b8      	blx	r7
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000b63c:	2212      	movs	r2, #18
1000b63e:	0021      	movs	r1, r4
1000b640:	4b61      	ldr	r3, [pc, #388]	; (1000b7c8 <ble_connected_state_handler+0x1d0>)
1000b642:	4862      	ldr	r0, [pc, #392]	; (1000b7cc <ble_connected_state_handler+0x1d4>)
1000b644:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000b646:	4b62      	ldr	r3, [pc, #392]	; (1000b7d0 <ble_connected_state_handler+0x1d8>)
1000b648:	2207      	movs	r2, #7
1000b64a:	0018      	movs	r0, r3
1000b64c:	469b      	mov	fp, r3
1000b64e:	0021      	movs	r1, r4
1000b650:	4b60      	ldr	r3, [pc, #384]	; (1000b7d4 <ble_connected_state_handler+0x1dc>)
1000b652:	4798      	blx	r3
1000b654:	4682      	mov	sl, r0
1000b656:	2800      	cmp	r0, #0
1000b658:	d140      	bne.n	1000b6dc <ble_connected_state_handler+0xe4>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000b65a:	4b5f      	ldr	r3, [pc, #380]	; (1000b7d8 <ble_connected_state_handler+0x1e0>)
1000b65c:	781b      	ldrb	r3, [r3, #0]
1000b65e:	2b04      	cmp	r3, #4
1000b660:	d900      	bls.n	1000b664 <ble_connected_state_handler+0x6c>
1000b662:	e076      	b.n	1000b752 <ble_connected_state_handler+0x15a>
1000b664:	4b5d      	ldr	r3, [pc, #372]	; (1000b7dc <ble_connected_state_handler+0x1e4>)
1000b666:	2600      	movs	r6, #0
1000b668:	46a8      	mov	r8, r5
1000b66a:	001f      	movs	r7, r3
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000b66c:	2207      	movs	r2, #7
1000b66e:	0021      	movs	r1, r4
1000b670:	0038      	movs	r0, r7
1000b672:	4b58      	ldr	r3, [pc, #352]	; (1000b7d4 <ble_connected_state_handler+0x1dc>)
1000b674:	4798      	blx	r3
1000b676:	2800      	cmp	r0, #0
1000b678:	d100      	bne.n	1000b67c <ble_connected_state_handler+0x84>
1000b67a:	e076      	b.n	1000b76a <ble_connected_state_handler+0x172>
1000b67c:	3601      	adds	r6, #1
1000b67e:	377c      	adds	r7, #124	; 0x7c
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b680:	2e05      	cmp	r6, #5
1000b682:	d1f3      	bne.n	1000b66c <ble_connected_state_handler+0x74>
1000b684:	4645      	mov	r5, r8
1000b686:	2700      	movs	r7, #0
1000b688:	4b55      	ldr	r3, [pc, #340]	; (1000b7e0 <ble_connected_state_handler+0x1e8>)
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000b68a:	781a      	ldrb	r2, [r3, #0]
1000b68c:	2a00      	cmp	r2, #0
1000b68e:	d100      	bne.n	1000b692 <ble_connected_state_handler+0x9a>
1000b690:	e07d      	b.n	1000b78e <ble_connected_state_handler+0x196>
1000b692:	3701      	adds	r7, #1
1000b694:	337c      	adds	r3, #124	; 0x7c
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b696:	2f05      	cmp	r7, #5
1000b698:	d1f7      	bne.n	1000b68a <ble_connected_state_handler+0x92>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000b69a:	4653      	mov	r3, sl
1000b69c:	2b00      	cmp	r3, #0
1000b69e:	d147      	bne.n	1000b730 <ble_connected_state_handler+0x138>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000b6a0:	017b      	lsls	r3, r7, #5
1000b6a2:	1bdf      	subs	r7, r3, r7
1000b6a4:	4b4d      	ldr	r3, [pc, #308]	; (1000b7dc <ble_connected_state_handler+0x1e4>)
1000b6a6:	00bf      	lsls	r7, r7, #2
1000b6a8:	469c      	mov	ip, r3
1000b6aa:	2305      	movs	r3, #5
1000b6ac:	4467      	add	r7, ip
1000b6ae:	74bb      	strb	r3, [r7, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000b6b0:	2207      	movs	r2, #7
1000b6b2:	2100      	movs	r1, #0
1000b6b4:	4658      	mov	r0, fp
1000b6b6:	4b4b      	ldr	r3, [pc, #300]	; (1000b7e4 <ble_connected_state_handler+0x1ec>)
1000b6b8:	4798      	blx	r3
1000b6ba:	e007      	b.n	1000b6cc <ble_connected_state_handler+0xd4>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000b6bc:	4b3e      	ldr	r3, [pc, #248]	; (1000b7b8 <ble_connected_state_handler+0x1c0>)
1000b6be:	483d      	ldr	r0, [pc, #244]	; (1000b7b4 <ble_connected_state_handler+0x1bc>)
1000b6c0:	4798      	blx	r3
1000b6c2:	7aa1      	ldrb	r1, [r4, #10]
1000b6c4:	4848      	ldr	r0, [pc, #288]	; (1000b7e8 <ble_connected_state_handler+0x1f0>)
1000b6c6:	4b3d      	ldr	r3, [pc, #244]	; (1000b7bc <ble_connected_state_handler+0x1c4>)
1000b6c8:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000b6ca:	2500      	movs	r5, #0
}
1000b6cc:	0028      	movs	r0, r5
1000b6ce:	b019      	add	sp, #100	; 0x64
1000b6d0:	bc3c      	pop	{r2, r3, r4, r5}
1000b6d2:	4690      	mov	r8, r2
1000b6d4:	4699      	mov	r9, r3
1000b6d6:	46a2      	mov	sl, r4
1000b6d8:	46ab      	mov	fp, r5
1000b6da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000b6dc:	7823      	ldrb	r3, [r4, #0]
1000b6de:	2b02      	cmp	r3, #2
1000b6e0:	d1bb      	bne.n	1000b65a <ble_connected_state_handler+0x62>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000b6e2:	ad04      	add	r5, sp, #16
1000b6e4:	2250      	movs	r2, #80	; 0x50
1000b6e6:	4b3f      	ldr	r3, [pc, #252]	; (1000b7e4 <ble_connected_state_handler+0x1ec>)
1000b6e8:	2100      	movs	r1, #0
1000b6ea:	0028      	movs	r0, r5
1000b6ec:	4798      	blx	r3
1000b6ee:	4b3f      	ldr	r3, [pc, #252]	; (1000b7ec <ble_connected_state_handler+0x1f4>)
1000b6f0:	0022      	movs	r2, r4
1000b6f2:	469c      	mov	ip, r3
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000b6f4:	2300      	movs	r3, #0
1000b6f6:	4664      	mov	r4, ip
1000b6f8:	4694      	mov	ip, r2
1000b6fa:	001e      	movs	r6, r3
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000b6fc:	0022      	movs	r2, r4
1000b6fe:	3610      	adds	r6, #16
1000b700:	b2b6      	uxth	r6, r6
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000b702:	7810      	ldrb	r0, [r2, #0]
1000b704:	1c59      	adds	r1, r3, #1
1000b706:	54e8      	strb	r0, [r5, r3]
1000b708:	b28b      	uxth	r3, r1
1000b70a:	3201      	adds	r2, #1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000b70c:	42b3      	cmp	r3, r6
1000b70e:	d1f8      	bne.n	1000b702 <ble_connected_state_handler+0x10a>
1000b710:	347c      	adds	r4, #124	; 0x7c
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000b712:	2b50      	cmp	r3, #80	; 0x50
1000b714:	d1f1      	bne.n	1000b6fa <ble_connected_state_handler+0x102>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000b716:	002a      	movs	r2, r5
1000b718:	4661      	mov	r1, ip
1000b71a:	2005      	movs	r0, #5
1000b71c:	4b34      	ldr	r3, [pc, #208]	; (1000b7f0 <ble_connected_state_handler+0x1f8>)
1000b71e:	4798      	blx	r3
1000b720:	1e05      	subs	r5, r0, #0
1000b722:	d0d3      	beq.n	1000b6cc <ble_connected_state_handler+0xd4>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000b724:	4648      	mov	r0, r9
1000b726:	47c0      	blx	r8
1000b728:	4832      	ldr	r0, [pc, #200]	; (1000b7f4 <ble_connected_state_handler+0x1fc>)
1000b72a:	47b8      	blx	r7
						return AT_BLE_FAILURE;
1000b72c:	25e2      	movs	r5, #226	; 0xe2
1000b72e:	e7cd      	b.n	1000b6cc <ble_connected_state_handler+0xd4>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000b730:	017b      	lsls	r3, r7, #5
1000b732:	1bdf      	subs	r7, r3, r7
1000b734:	4b29      	ldr	r3, [pc, #164]	; (1000b7dc <ble_connected_state_handler+0x1e4>)
1000b736:	00bf      	lsls	r7, r7, #2
1000b738:	469c      	mov	ip, r3
1000b73a:	230a      	movs	r3, #10
1000b73c:	4467      	add	r7, ip
1000b73e:	74bb      	strb	r3, [r7, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000b740:	2207      	movs	r2, #7
1000b742:	2100      	movs	r1, #0
1000b744:	4658      	mov	r0, fp
1000b746:	4b27      	ldr	r3, [pc, #156]	; (1000b7e4 <ble_connected_state_handler+0x1ec>)
1000b748:	4798      	blx	r3
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000b74a:	8920      	ldrh	r0, [r4, #8]
1000b74c:	4b2a      	ldr	r3, [pc, #168]	; (1000b7f8 <ble_connected_state_handler+0x200>)
1000b74e:	4798      	blx	r3
1000b750:	e7bc      	b.n	1000b6cc <ble_connected_state_handler+0xd4>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000b752:	4648      	mov	r0, r9
1000b754:	47c0      	blx	r8
1000b756:	4b20      	ldr	r3, [pc, #128]	; (1000b7d8 <ble_connected_state_handler+0x1e0>)
1000b758:	4828      	ldr	r0, [pc, #160]	; (1000b7fc <ble_connected_state_handler+0x204>)
1000b75a:	7819      	ldrb	r1, [r3, #0]
1000b75c:	b2c9      	uxtb	r1, r1
1000b75e:	47b8      	blx	r7
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000b760:	8920      	ldrh	r0, [r4, #8]
1000b762:	2113      	movs	r1, #19
1000b764:	4b26      	ldr	r3, [pc, #152]	; (1000b800 <ble_connected_state_handler+0x208>)
1000b766:	4798      	blx	r3
1000b768:	e7b0      	b.n	1000b6cc <ble_connected_state_handler+0xd4>
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000b76a:	4a1c      	ldr	r2, [pc, #112]	; (1000b7dc <ble_connected_state_handler+0x1e4>)
1000b76c:	0037      	movs	r7, r6
1000b76e:	4694      	mov	ip, r2
1000b770:	4645      	mov	r5, r8
1000b772:	0173      	lsls	r3, r6, #5
1000b774:	1b9b      	subs	r3, r3, r6
1000b776:	009b      	lsls	r3, r3, #2
1000b778:	4463      	add	r3, ip
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
						ble_device_count++;
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000b77a:	2202      	movs	r2, #2
1000b77c:	335e      	adds	r3, #94	; 0x5e
1000b77e:	701a      	strb	r2, [r3, #0]
1000b780:	0021      	movs	r1, r4
1000b782:	3205      	adds	r2, #5
1000b784:	4658      	mov	r0, fp
1000b786:	4b13      	ldr	r3, [pc, #76]	; (1000b7d4 <ble_connected_state_handler+0x1dc>)
1000b788:	4798      	blx	r3
1000b78a:	4682      	mov	sl, r0
1000b78c:	e785      	b.n	1000b69a <ble_connected_state_handler+0xa2>
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000b78e:	4a13      	ldr	r2, [pc, #76]	; (1000b7dc <ble_connected_state_handler+0x1e4>)
1000b790:	017b      	lsls	r3, r7, #5
1000b792:	4690      	mov	r8, r2
1000b794:	1bdb      	subs	r3, r3, r7
1000b796:	009b      	lsls	r3, r3, #2
1000b798:	4498      	add	r8, r3
1000b79a:	2212      	movs	r2, #18
1000b79c:	4b0a      	ldr	r3, [pc, #40]	; (1000b7c8 <ble_connected_state_handler+0x1d0>)
1000b79e:	0021      	movs	r1, r4
1000b7a0:	4640      	mov	r0, r8
1000b7a2:	4798      	blx	r3
						ble_device_count++;
1000b7a4:	4b0c      	ldr	r3, [pc, #48]	; (1000b7d8 <ble_connected_state_handler+0x1e0>)
1000b7a6:	4a0c      	ldr	r2, [pc, #48]	; (1000b7d8 <ble_connected_state_handler+0x1e0>)
1000b7a8:	781b      	ldrb	r3, [r3, #0]
1000b7aa:	3301      	adds	r3, #1
1000b7ac:	b2db      	uxtb	r3, r3
1000b7ae:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000b7b0:	4643      	mov	r3, r8
1000b7b2:	e7e2      	b.n	1000b77a <ble_connected_state_handler+0x182>
1000b7b4:	100191d8 	.word	0x100191d8
1000b7b8:	10018035 	.word	0x10018035
1000b7bc:	10017f15 	.word	0x10017f15
1000b7c0:	10019ab0 	.word	0x10019ab0
1000b7c4:	10019af4 	.word	0x10019af4
1000b7c8:	10017d8f 	.word	0x10017d8f
1000b7cc:	1001c6cc 	.word	0x1001c6cc
1000b7d0:	1001beec 	.word	0x1001beec
1000b7d4:	10017d71 	.word	0x10017d71
1000b7d8:	1001c68c 	.word	0x1001c68c
1000b7dc:	1001c420 	.word	0x1001c420
1000b7e0:	1001c47e 	.word	0x1001c47e
1000b7e4:	10017dcb 	.word	0x10017dcb
1000b7e8:	10019b6c 	.word	0x10019b6c
1000b7ec:	1001c466 	.word	0x1001c466
1000b7f0:	1000e8c5 	.word	0x1000e8c5
1000b7f4:	10019b0c 	.word	0x10019b0c
1000b7f8:	1000b5c5 	.word	0x1000b5c5
1000b7fc:	10019b30 	.word	0x10019b30
1000b800:	1000e899 	.word	0x1000e899

1000b804 <ble_resolv_rand_addr_handler>:
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000b804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000b806:	7803      	ldrb	r3, [r0, #0]
1000b808:	2b00      	cmp	r3, #0
1000b80a:	d10d      	bne.n	1000b828 <ble_resolv_rand_addr_handler+0x24>
1000b80c:	2400      	movs	r4, #0
1000b80e:	4d21      	ldr	r5, [pc, #132]	; (1000b894 <ble_resolv_rand_addr_handler+0x90>)
1000b810:	4f21      	ldr	r7, [pc, #132]	; (1000b898 <ble_resolv_rand_addr_handler+0x94>)
1000b812:	1c46      	adds	r6, r0, #1
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000b814:	2210      	movs	r2, #16
1000b816:	0029      	movs	r1, r5
1000b818:	0030      	movs	r0, r6
1000b81a:	47b8      	blx	r7
1000b81c:	2800      	cmp	r0, #0
1000b81e:	d00e      	beq.n	1000b83e <ble_resolv_rand_addr_handler+0x3a>
1000b820:	3401      	adds	r4, #1
1000b822:	357c      	adds	r5, #124	; 0x7c
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b824:	2c05      	cmp	r4, #5
1000b826:	d1f5      	bne.n	1000b814 <ble_resolv_rand_addr_handler+0x10>
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000b828:	2300      	movs	r3, #0
1000b82a:	4a1c      	ldr	r2, [pc, #112]	; (1000b89c <ble_resolv_rand_addr_handler+0x98>)
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000b82c:	7811      	ldrb	r1, [r2, #0]
1000b82e:	2900      	cmp	r1, #0
1000b830:	d019      	beq.n	1000b866 <ble_resolv_rand_addr_handler+0x62>
1000b832:	3301      	adds	r3, #1
1000b834:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b836:	2b05      	cmp	r3, #5
1000b838:	d1f8      	bne.n	1000b82c <ble_resolv_rand_addr_handler+0x28>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000b83a:	2000      	movs	r0, #0
1000b83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000b83e:	0160      	lsls	r0, r4, #5
1000b840:	1b00      	subs	r0, r0, r4
1000b842:	0084      	lsls	r4, r0, #2
1000b844:	4816      	ldr	r0, [pc, #88]	; (1000b8a0 <ble_resolv_rand_addr_handler+0x9c>)
1000b846:	2202      	movs	r2, #2
1000b848:	1900      	adds	r0, r0, r4
1000b84a:	0003      	movs	r3, r0
1000b84c:	335e      	adds	r3, #94	; 0x5e
1000b84e:	701a      	strb	r2, [r3, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000b850:	230a      	movs	r3, #10
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000b852:	4c14      	ldr	r4, [pc, #80]	; (1000b8a4 <ble_resolv_rand_addr_handler+0xa0>)
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000b854:	7483      	strb	r3, [r0, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000b856:	3210      	adds	r2, #16
1000b858:	0021      	movs	r1, r4
1000b85a:	4b13      	ldr	r3, [pc, #76]	; (1000b8a8 <ble_resolv_rand_addr_handler+0xa4>)
1000b85c:	4798      	blx	r3
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000b85e:	8920      	ldrh	r0, [r4, #8]
1000b860:	4b12      	ldr	r3, [pc, #72]	; (1000b8ac <ble_resolv_rand_addr_handler+0xa8>)
1000b862:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000b864:	e7e9      	b.n	1000b83a <ble_resolv_rand_addr_handler+0x36>
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000b866:	015d      	lsls	r5, r3, #5
1000b868:	1aeb      	subs	r3, r5, r3
1000b86a:	4d0d      	ldr	r5, [pc, #52]	; (1000b8a0 <ble_resolv_rand_addr_handler+0x9c>)
1000b86c:	009b      	lsls	r3, r3, #2
1000b86e:	4c0d      	ldr	r4, [pc, #52]	; (1000b8a4 <ble_resolv_rand_addr_handler+0xa0>)
1000b870:	18ed      	adds	r5, r5, r3
1000b872:	2212      	movs	r2, #18
1000b874:	4b0c      	ldr	r3, [pc, #48]	; (1000b8a8 <ble_resolv_rand_addr_handler+0xa4>)
1000b876:	0021      	movs	r1, r4
1000b878:	0028      	movs	r0, r5
1000b87a:	4798      	blx	r3
				ble_device_count++;
1000b87c:	4a0c      	ldr	r2, [pc, #48]	; (1000b8b0 <ble_resolv_rand_addr_handler+0xac>)
1000b87e:	7813      	ldrb	r3, [r2, #0]
1000b880:	3301      	adds	r3, #1
1000b882:	b2db      	uxtb	r3, r3
1000b884:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000b886:	002b      	movs	r3, r5
1000b888:	2202      	movs	r2, #2
1000b88a:	335e      	adds	r3, #94	; 0x5e
1000b88c:	701a      	strb	r2, [r3, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000b88e:	230a      	movs	r3, #10
1000b890:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000b892:	e7e4      	b.n	1000b85e <ble_resolv_rand_addr_handler+0x5a>
1000b894:	1001c466 	.word	0x1001c466
1000b898:	10017d71 	.word	0x10017d71
1000b89c:	1001c47e 	.word	0x1001c47e
1000b8a0:	1001c420 	.word	0x1001c420
1000b8a4:	1001c6cc 	.word	0x1001c6cc
1000b8a8:	10017d8f 	.word	0x10017d8f
1000b8ac:	1000b5c5 	.word	0x1000b5c5
1000b8b0:	1001c68c 	.word	0x1001c68c

1000b8b4 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000b8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b8b6:	000d      	movs	r5, r1
	DBG_LOG_DEV("BLE-Event:%d", events);
	switch(events)
1000b8b8:	283b      	cmp	r0, #59	; 0x3b
1000b8ba:	d865      	bhi.n	1000b988 <ble_event_manager+0xd4>
1000b8bc:	4b36      	ldr	r3, [pc, #216]	; (1000b998 <ble_event_manager+0xe4>)
1000b8be:	0086      	lsls	r6, r0, #2
1000b8c0:	599b      	ldr	r3, [r3, r6]
1000b8c2:	469f      	mov	pc, r3
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000b8c4:	4b35      	ldr	r3, [pc, #212]	; (1000b99c <ble_event_manager+0xe8>)
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000b8c6:	3838      	subs	r0, #56	; 0x38
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000b8c8:	681b      	ldr	r3, [r3, #0]
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000b8ca:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000b8cc:	2b00      	cmp	r3, #0
1000b8ce:	d005      	beq.n	1000b8dc <ble_event_manager+0x28>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b8d0:	0080      	lsls	r0, r0, #2
1000b8d2:	58c3      	ldr	r3, [r0, r3]
1000b8d4:	2b00      	cmp	r3, #0
1000b8d6:	d001      	beq.n	1000b8dc <ble_event_manager+0x28>
				{
					event_cb_fn[events](event_params);
1000b8d8:	0028      	movs	r0, r5
1000b8da:	4798      	blx	r3
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
	}
	break;		
	}
}
1000b8dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000b8de:	4b30      	ldr	r3, [pc, #192]	; (1000b9a0 <ble_event_manager+0xec>)
1000b8e0:	681b      	ldr	r3, [r3, #0]
1000b8e2:	2b00      	cmp	r3, #0
1000b8e4:	d0fa      	beq.n	1000b8dc <ble_event_manager+0x28>
			ble_user_event_cb();
1000b8e6:	4798      	blx	r3
1000b8e8:	e7f8      	b.n	1000b8dc <ble_event_manager+0x28>
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b8ea:	2400      	movs	r4, #0
1000b8ec:	4f2d      	ldr	r7, [pc, #180]	; (1000b9a4 <ble_event_manager+0xf0>)
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000b8ee:	593b      	ldr	r3, [r7, r4]
1000b8f0:	2b00      	cmp	r3, #0
1000b8f2:	d004      	beq.n	1000b8fe <ble_event_manager+0x4a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b8f4:	599b      	ldr	r3, [r3, r6]
1000b8f6:	2b00      	cmp	r3, #0
1000b8f8:	d001      	beq.n	1000b8fe <ble_event_manager+0x4a>
				{
					event_cb_fn[events](event_params);		
1000b8fa:	0028      	movs	r0, r5
1000b8fc:	4798      	blx	r3
1000b8fe:	3404      	adds	r4, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000b900:	2c14      	cmp	r4, #20
1000b902:	d1f4      	bne.n	1000b8ee <ble_event_manager+0x3a>
1000b904:	e7ea      	b.n	1000b8dc <ble_event_manager+0x28>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b906:	2600      	movs	r6, #0
1000b908:	3813      	subs	r0, #19
1000b90a:	b2c4      	uxtb	r4, r0
1000b90c:	4f26      	ldr	r7, [pc, #152]	; (1000b9a8 <ble_event_manager+0xf4>)
1000b90e:	00a4      	lsls	r4, r4, #2
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000b910:	59bb      	ldr	r3, [r7, r6]
1000b912:	2b00      	cmp	r3, #0
1000b914:	d004      	beq.n	1000b920 <ble_event_manager+0x6c>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b916:	591b      	ldr	r3, [r3, r4]
1000b918:	2b00      	cmp	r3, #0
1000b91a:	d001      	beq.n	1000b920 <ble_event_manager+0x6c>
				{
					event_cb_fn[events](event_params);
1000b91c:	0028      	movs	r0, r5
1000b91e:	4798      	blx	r3
1000b920:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000b922:	2e14      	cmp	r6, #20
1000b924:	d1f4      	bne.n	1000b910 <ble_event_manager+0x5c>
1000b926:	e7d9      	b.n	1000b8dc <ble_event_manager+0x28>
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b928:	2600      	movs	r6, #0
1000b92a:	381d      	subs	r0, #29
1000b92c:	b2c4      	uxtb	r4, r0
1000b92e:	4f1f      	ldr	r7, [pc, #124]	; (1000b9ac <ble_event_manager+0xf8>)
1000b930:	00a4      	lsls	r4, r4, #2
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000b932:	59bb      	ldr	r3, [r7, r6]
1000b934:	2b00      	cmp	r3, #0
1000b936:	d004      	beq.n	1000b942 <ble_event_manager+0x8e>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b938:	591b      	ldr	r3, [r3, r4]
1000b93a:	2b00      	cmp	r3, #0
1000b93c:	d001      	beq.n	1000b942 <ble_event_manager+0x8e>
				{
					event_cb_fn[events](event_params);
1000b93e:	0028      	movs	r0, r5
1000b940:	4798      	blx	r3
1000b942:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000b944:	2e14      	cmp	r6, #20
1000b946:	d1f4      	bne.n	1000b932 <ble_event_manager+0x7e>
1000b948:	e7c8      	b.n	1000b8dc <ble_event_manager+0x28>
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000b94a:	4b19      	ldr	r3, [pc, #100]	; (1000b9b0 <ble_event_manager+0xfc>)
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000b94c:	3827      	subs	r0, #39	; 0x27
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000b94e:	681b      	ldr	r3, [r3, #0]
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000b950:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000b952:	2b00      	cmp	r3, #0
1000b954:	d1bc      	bne.n	1000b8d0 <ble_event_manager+0x1c>
1000b956:	e7c1      	b.n	1000b8dc <ble_event_manager+0x28>
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000b958:	4b16      	ldr	r3, [pc, #88]	; (1000b9b4 <ble_event_manager+0x100>)
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000b95a:	382d      	subs	r0, #45	; 0x2d
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000b95c:	681b      	ldr	r3, [r3, #0]
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000b95e:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000b960:	2b00      	cmp	r3, #0
1000b962:	d1b5      	bne.n	1000b8d0 <ble_event_manager+0x1c>
1000b964:	e7ba      	b.n	1000b8dc <ble_event_manager+0x28>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b966:	2600      	movs	r6, #0
1000b968:	3836      	subs	r0, #54	; 0x36
1000b96a:	b2c4      	uxtb	r4, r0
1000b96c:	4f12      	ldr	r7, [pc, #72]	; (1000b9b8 <ble_event_manager+0x104>)
1000b96e:	00a4      	lsls	r4, r4, #2
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000b970:	59bb      	ldr	r3, [r7, r6]
1000b972:	2b00      	cmp	r3, #0
1000b974:	d004      	beq.n	1000b980 <ble_event_manager+0xcc>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b976:	591b      	ldr	r3, [r3, r4]
1000b978:	2b00      	cmp	r3, #0
1000b97a:	d001      	beq.n	1000b980 <ble_event_manager+0xcc>
				{
					event_cb_fn[events](event_params);
1000b97c:	0028      	movs	r0, r5
1000b97e:	4798      	blx	r3
1000b980:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000b982:	2e14      	cmp	r6, #20
1000b984:	d1f4      	bne.n	1000b970 <ble_event_manager+0xbc>
1000b986:	e7a9      	b.n	1000b8dc <ble_event_manager+0x28>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000b988:	4d0c      	ldr	r5, [pc, #48]	; (1000b9bc <ble_event_manager+0x108>)
1000b98a:	4c0d      	ldr	r4, [pc, #52]	; (1000b9c0 <ble_event_manager+0x10c>)
1000b98c:	0028      	movs	r0, r5
1000b98e:	47a0      	blx	r4
1000b990:	0028      	movs	r0, r5
1000b992:	47a0      	blx	r4
	}
	break;		
	}
}
1000b994:	e7a2      	b.n	1000b8dc <ble_event_manager+0x28>
1000b996:	46c0      	nop			; (mov r8, r8)
1000b998:	10019470 	.word	0x10019470
1000b99c:	1001cc44 	.word	0x1001cc44
1000b9a0:	1001bee4 	.word	0x1001bee4
1000b9a4:	1001c6a4 	.word	0x1001c6a4
1000b9a8:	1001c6b8 	.word	0x1001c6b8
1000b9ac:	1001c40c 	.word	0x1001c40c
1000b9b0:	1001c700 	.word	0x1001c700
1000b9b4:	1001c408 	.word	0x1001c408
1000b9b8:	1001c690 	.word	0x1001c690
1000b9bc:	100191d8 	.word	0x100191d8
1000b9c0:	10018035 	.word	0x10018035

1000b9c4 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000b9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000b9c6:	4d0f      	ldr	r5, [pc, #60]	; (1000ba04 <ble_event_task+0x40>)
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000b9c8:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000b9ca:	782b      	ldrb	r3, [r5, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000b9cc:	2b01      	cmp	r3, #1
1000b9ce:	d015      	beq.n	1000b9fc <ble_event_task+0x38>
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000b9d0:	4e0d      	ldr	r6, [pc, #52]	; (1000ba08 <ble_event_task+0x44>)
1000b9d2:	4f0e      	ldr	r7, [pc, #56]	; (1000ba0c <ble_event_task+0x48>)
1000b9d4:	0022      	movs	r2, r4
1000b9d6:	4b0e      	ldr	r3, [pc, #56]	; (1000ba10 <ble_event_task+0x4c>)
1000b9d8:	0031      	movs	r1, r6
1000b9da:	0038      	movs	r0, r7
1000b9dc:	4798      	blx	r3
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000b9de:	782b      	ldrb	r3, [r5, #0]
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000b9e0:	0004      	movs	r4, r0
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000b9e2:	2b01      	cmp	r3, #1
1000b9e4:	d007      	beq.n	1000b9f6 <ble_event_task+0x32>
	{
		acquire_sleep_lock();
	}
	
    if (status == AT_BLE_SUCCESS) 
1000b9e6:	2c00      	cmp	r4, #0
1000b9e8:	d103      	bne.n	1000b9f2 <ble_event_task+0x2e>
    {		
            ble_event_manager(event, ble_event_params);
1000b9ea:	7838      	ldrb	r0, [r7, #0]
1000b9ec:	0031      	movs	r1, r6
1000b9ee:	4b09      	ldr	r3, [pc, #36]	; (1000ba14 <ble_event_task+0x50>)
1000b9f0:	4798      	blx	r3
    }
    
    return status;
}
1000b9f2:	0020      	movs	r0, r4
1000b9f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
	{
		acquire_sleep_lock();
1000b9f6:	4b08      	ldr	r3, [pc, #32]	; (1000ba18 <ble_event_task+0x54>)
1000b9f8:	4798      	blx	r3
1000b9fa:	e7f4      	b.n	1000b9e6 <ble_event_task+0x22>
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
	{
		release_sleep_lock();
1000b9fc:	4b07      	ldr	r3, [pc, #28]	; (1000ba1c <ble_event_task+0x58>)
1000b9fe:	4798      	blx	r3
1000ba00:	e7e6      	b.n	1000b9d0 <ble_event_task+0xc>
1000ba02:	46c0      	nop			; (mov r8, r8)
1000ba04:	1001bef3 	.word	0x1001bef3
1000ba08:	1001ca38 	.word	0x1001ca38
1000ba0c:	1001c6fc 	.word	0x1001c6fc
1000ba10:	1000de19 	.word	0x1000de19
1000ba14:	1000b8b5 	.word	0x1000b8b5
1000ba18:	1000c311 	.word	0x1000c311
1000ba1c:	1000c339 	.word	0x1000c339

1000ba20 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000ba20:	b570      	push	{r4, r5, r6, lr}
1000ba22:	0006      	movs	r6, r0
1000ba24:	000d      	movs	r5, r1
1000ba26:	4c03      	ldr	r4, [pc, #12]	; (1000ba34 <usart_serial_getchar+0x14>)
	while(STATUS_OK != uart_read_wait(module, c));
1000ba28:	0029      	movs	r1, r5
1000ba2a:	0030      	movs	r0, r6
1000ba2c:	47a0      	blx	r4
1000ba2e:	2800      	cmp	r0, #0
1000ba30:	d1fa      	bne.n	1000ba28 <usart_serial_getchar+0x8>
}
1000ba32:	bd70      	pop	{r4, r5, r6, pc}
1000ba34:	1000c98d 	.word	0x1000c98d

1000ba38 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000ba38:	b570      	push	{r4, r5, r6, lr}
1000ba3a:	0006      	movs	r6, r0
1000ba3c:	000d      	movs	r5, r1
1000ba3e:	4c03      	ldr	r4, [pc, #12]	; (1000ba4c <usart_serial_putchar+0x14>)
	while(STATUS_OK !=uart_write_wait(module, c));
1000ba40:	0029      	movs	r1, r5
1000ba42:	0030      	movs	r0, r6
1000ba44:	47a0      	blx	r4
1000ba46:	2800      	cmp	r0, #0
1000ba48:	d1fa      	bne.n	1000ba40 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000ba4a:	bd70      	pop	{r4, r5, r6, pc}
1000ba4c:	1000c97d 	.word	0x1000c97d

1000ba50 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000ba50:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000ba52:	4b0e      	ldr	r3, [pc, #56]	; (1000ba8c <uart_read_complete_callback+0x3c>)
1000ba54:	781a      	ldrb	r2, [r3, #0]
1000ba56:	2a01      	cmp	r2, #1
1000ba58:	d00c      	beq.n	1000ba74 <uart_read_complete_callback+0x24>
		read_status = UART_READ_DONE;
		
		if(user_callback_func == NULL)
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
	}
	else if(user_callback_func != NULL) {
1000ba5a:	4b0d      	ldr	r3, [pc, #52]	; (1000ba90 <uart_read_complete_callback+0x40>)
1000ba5c:	681b      	ldr	r3, [r3, #0]
1000ba5e:	2b00      	cmp	r3, #0
1000ba60:	d007      	beq.n	1000ba72 <uart_read_complete_callback+0x22>
		user_callback_func(string_input[0]);
1000ba62:	4c0c      	ldr	r4, [pc, #48]	; (1000ba94 <uart_read_complete_callback+0x44>)
1000ba64:	7820      	ldrb	r0, [r4, #0]
1000ba66:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ba68:	2201      	movs	r2, #1
1000ba6a:	0021      	movs	r1, r4
1000ba6c:	480a      	ldr	r0, [pc, #40]	; (1000ba98 <uart_read_complete_callback+0x48>)
1000ba6e:	4b0b      	ldr	r3, [pc, #44]	; (1000ba9c <uart_read_complete_callback+0x4c>)
1000ba70:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000ba72:	bd10      	pop	{r4, pc}
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
	if(read_status == UART_READ_WAITING) {
		read_status = UART_READ_DONE;
1000ba74:	3201      	adds	r2, #1
1000ba76:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000ba78:	4b05      	ldr	r3, [pc, #20]	; (1000ba90 <uart_read_complete_callback+0x40>)
1000ba7a:	681b      	ldr	r3, [r3, #0]
1000ba7c:	2b00      	cmp	r3, #0
1000ba7e:	d1f8      	bne.n	1000ba72 <uart_read_complete_callback+0x22>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000ba80:	2102      	movs	r1, #2
1000ba82:	4805      	ldr	r0, [pc, #20]	; (1000ba98 <uart_read_complete_callback+0x48>)
1000ba84:	4b06      	ldr	r3, [pc, #24]	; (1000baa0 <uart_read_complete_callback+0x50>)
1000ba86:	4798      	blx	r3
1000ba88:	e7f3      	b.n	1000ba72 <uart_read_complete_callback+0x22>
1000ba8a:	46c0      	nop			; (mov r8, r8)
1000ba8c:	1001bef8 	.word	0x1001bef8
1000ba90:	1001bf00 	.word	0x1001bf00
1000ba94:	1001befc 	.word	0x1001befc
1000ba98:	1001cc48 	.word	0x1001cc48
1000ba9c:	1000c9a1 	.word	0x1000c9a1
1000baa0:	1000c9fd 	.word	0x1000c9fd

1000baa4 <serial_console_init>:
		//Nothing to do.
	}
}

void serial_console_init(void)
{
1000baa4:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000baa6:	2100      	movs	r1, #0
1000baa8:	4b19      	ldr	r3, [pc, #100]	; (1000bb10 <serial_console_init+0x6c>)
1000baaa:	2000      	movs	r0, #0
1000baac:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000baae:	4c19      	ldr	r4, [pc, #100]	; (1000bb14 <serial_console_init+0x70>)
1000bab0:	4b19      	ldr	r3, [pc, #100]	; (1000bb18 <serial_console_init+0x74>)
1000bab2:	0020      	movs	r0, r4
1000bab4:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000bab6:	23e1      	movs	r3, #225	; 0xe1
1000bab8:	025b      	lsls	r3, r3, #9
1000baba:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000babc:	2203      	movs	r2, #3
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);

	uart_get_config_defaults(&config_uart);

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000babe:	2302      	movs	r3, #2
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000bac0:	4d16      	ldr	r5, [pc, #88]	; (1000bb1c <serial_console_init+0x78>)
1000bac2:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000bac4:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000bac6:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000bac8:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000baca:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000bacc:	6263      	str	r3, [r4, #36]	; 0x24
	uart_get_config_defaults(&config_uart);

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000bace:	3201      	adds	r2, #1
1000bad0:	4b13      	ldr	r3, [pc, #76]	; (1000bb20 <serial_console_init+0x7c>)
1000bad2:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000bad4:	3201      	adds	r2, #1
1000bad6:	601d      	str	r5, [r3, #0]
1000bad8:	6162      	str	r2, [r4, #20]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000bada:	4b12      	ldr	r3, [pc, #72]	; (1000bb24 <serial_console_init+0x80>)
1000badc:	4a12      	ldr	r2, [pc, #72]	; (1000bb28 <serial_console_init+0x84>)
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000bade:	0028      	movs	r0, r5
1000bae0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000bae2:	4a12      	ldr	r2, [pc, #72]	; (1000bb2c <serial_console_init+0x88>)
1000bae4:	4b12      	ldr	r3, [pc, #72]	; (1000bb30 <serial_console_init+0x8c>)
1000bae6:	4913      	ldr	r1, [pc, #76]	; (1000bb34 <serial_console_init+0x90>)
1000bae8:	601a      	str	r2, [r3, #0]
1000baea:	0022      	movs	r2, r4
1000baec:	4b12      	ldr	r3, [pc, #72]	; (1000bb38 <serial_console_init+0x94>)
1000baee:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000baf0:	4e12      	ldr	r6, [pc, #72]	; (1000bb3c <serial_console_init+0x98>)
1000baf2:	4c13      	ldr	r4, [pc, #76]	; (1000bb40 <serial_console_init+0x9c>)
1000baf4:	6833      	ldr	r3, [r6, #0]
1000baf6:	2100      	movs	r1, #0
1000baf8:	6898      	ldr	r0, [r3, #8]
1000bafa:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000bafc:	6833      	ldr	r3, [r6, #0]
1000bafe:	2100      	movs	r1, #0
1000bb00:	6858      	ldr	r0, [r3, #4]
1000bb02:	47a0      	blx	r4
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000bb04:	0028      	movs	r0, r5
1000bb06:	2202      	movs	r2, #2
1000bb08:	490e      	ldr	r1, [pc, #56]	; (1000bb44 <serial_console_init+0xa0>)
1000bb0a:	4b0f      	ldr	r3, [pc, #60]	; (1000bb48 <serial_console_init+0xa4>)
1000bb0c:	4798      	blx	r3
}
1000bb0e:	bd70      	pop	{r4, r5, r6, pc}
1000bb10:	1000d141 	.word	0x1000d141
1000bb14:	1001cc6c 	.word	0x1001cc6c
1000bb18:	1000c7a5 	.word	0x1000c7a5
1000bb1c:	1001cc48 	.word	0x1001cc48
1000bb20:	1001cf94 	.word	0x1001cf94
1000bb24:	1001cf90 	.word	0x1001cf90
1000bb28:	1000ba39 	.word	0x1000ba39
1000bb2c:	1000ba21 	.word	0x1000ba21
1000bb30:	1001cf8c 	.word	0x1001cf8c
1000bb34:	40004000 	.word	0x40004000
1000bb38:	1000c7d1 	.word	0x1000c7d1
1000bb3c:	1001a558 	.word	0x1001a558
1000bb40:	100180e5 	.word	0x100180e5
1000bb44:	1000ba51 	.word	0x1000ba51
1000bb48:	1000c9c9 	.word	0x1000c9c9

1000bb4c <_time_start>:

void _time_start(unsigned int sec)
{
1000bb4c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bb4e:	4647      	mov	r7, r8
	system_clock_get_value();
1000bb50:	4c0e      	ldr	r4, [pc, #56]	; (1000bb8c <_time_start+0x40>)
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
}

void _time_start(unsigned int sec)
{
1000bb52:	b480      	push	{r7}
1000bb54:	4680      	mov	r8, r0
	system_clock_get_value();
1000bb56:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000bb58:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000bb5a:	4f0d      	ldr	r7, [pc, #52]	; (1000bb90 <_time_start+0x44>)
1000bb5c:	47b8      	blx	r7
1000bb5e:	4e0d      	ldr	r6, [pc, #52]	; (1000bb94 <_time_start+0x48>)
1000bb60:	4a0d      	ldr	r2, [pc, #52]	; (1000bb98 <_time_start+0x4c>)
1000bb62:	4b0e      	ldr	r3, [pc, #56]	; (1000bb9c <_time_start+0x50>)
1000bb64:	47b0      	blx	r6
1000bb66:	0004      	movs	r4, r0
1000bb68:	20fa      	movs	r0, #250	; 0xfa
1000bb6a:	4643      	mov	r3, r8
1000bb6c:	0080      	lsls	r0, r0, #2
1000bb6e:	4358      	muls	r0, r3
1000bb70:	000d      	movs	r5, r1
1000bb72:	47b8      	blx	r7
1000bb74:	0002      	movs	r2, r0
1000bb76:	000b      	movs	r3, r1
1000bb78:	0020      	movs	r0, r4
1000bb7a:	0029      	movs	r1, r5
1000bb7c:	47b0      	blx	r6
1000bb7e:	4b08      	ldr	r3, [pc, #32]	; (1000bba0 <_time_start+0x54>)
1000bb80:	4798      	blx	r3
1000bb82:	4b08      	ldr	r3, [pc, #32]	; (1000bba4 <_time_start+0x58>)
1000bb84:	6018      	str	r0, [r3, #0]
}
1000bb86:	bc04      	pop	{r2}
1000bb88:	4690      	mov	r8, r2
1000bb8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bb8c:	1000d1c5 	.word	0x1000d1c5
1000bb90:	100178c5 	.word	0x100178c5
1000bb94:	10016c39 	.word	0x10016c39
1000bb98:	19feaec7 	.word	0x19feaec7
1000bb9c:	3f09d8ef 	.word	0x3f09d8ef
1000bba0:	10014f21 	.word	0x10014f21
1000bba4:	1001bef4 	.word	0x1001bef4

1000bba8 <getchar_b11_timeout>:
	return --tick;
}

int getchar_b11_timeout(unsigned int sec)
{
	read_status = UART_READ_WAITING;
1000bba8:	2301      	movs	r3, #1
{
	return --tick;
}

int getchar_b11_timeout(unsigned int sec)
{
1000bbaa:	b570      	push	{r4, r5, r6, lr}
	read_status = UART_READ_WAITING;
1000bbac:	4c15      	ldr	r4, [pc, #84]	; (1000bc04 <getchar_b11_timeout+0x5c>)
{
	return --tick;
}

int getchar_b11_timeout(unsigned int sec)
{
1000bbae:	0005      	movs	r5, r0
	read_status = UART_READ_WAITING;
1000bbb0:	7023      	strb	r3, [r4, #0]
	
	if(user_callback_func == NULL)
1000bbb2:	4b15      	ldr	r3, [pc, #84]	; (1000bc08 <getchar_b11_timeout+0x60>)
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000bbb4:	4e15      	ldr	r6, [pc, #84]	; (1000bc0c <getchar_b11_timeout+0x64>)

int getchar_b11_timeout(unsigned int sec)
{
	read_status = UART_READ_WAITING;
	
	if(user_callback_func == NULL)
1000bbb6:	681b      	ldr	r3, [r3, #0]
1000bbb8:	2b00      	cmp	r3, #0
1000bbba:	d01d      	beq.n	1000bbf8 <getchar_b11_timeout+0x50>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);

	_time_start(sec);
1000bbbc:	0028      	movs	r0, r5
1000bbbe:	4b14      	ldr	r3, [pc, #80]	; (1000bc10 <getchar_b11_timeout+0x68>)
1000bbc0:	4798      	blx	r3
	
	string_input[0] = 0;
1000bbc2:	2300      	movs	r3, #0
1000bbc4:	4d13      	ldr	r5, [pc, #76]	; (1000bc14 <getchar_b11_timeout+0x6c>)
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000bbc6:	2201      	movs	r2, #1
	if(user_callback_func == NULL)
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);

	_time_start(sec);
	
	string_input[0] = 0;
1000bbc8:	702b      	strb	r3, [r5, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000bbca:	0029      	movs	r1, r5
1000bbcc:	4b12      	ldr	r3, [pc, #72]	; (1000bc18 <getchar_b11_timeout+0x70>)
1000bbce:	0030      	movs	r0, r6
1000bbd0:	4798      	blx	r3
1000bbd2:	4812      	ldr	r0, [pc, #72]	; (1000bc1c <getchar_b11_timeout+0x74>)
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000bbd4:	2100      	movs	r1, #0
1000bbd6:	6803      	ldr	r3, [r0, #0]
1000bbd8:	e003      	b.n	1000bbe2 <getchar_b11_timeout+0x3a>
	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
}

unsigned int _time_done()
{
	return --tick;
1000bbda:	3b01      	subs	r3, #1
1000bbdc:	2101      	movs	r1, #1
	_time_start(sec);
	
	string_input[0] = 0;
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000bbde:	2b00      	cmp	r3, #0
1000bbe0:	d008      	beq.n	1000bbf4 <getchar_b11_timeout+0x4c>
1000bbe2:	7822      	ldrb	r2, [r4, #0]
1000bbe4:	2a02      	cmp	r2, #2
1000bbe6:	d1f8      	bne.n	1000bbda <getchar_b11_timeout+0x32>
1000bbe8:	2900      	cmp	r1, #0
1000bbea:	d103      	bne.n	1000bbf4 <getchar_b11_timeout+0x4c>
	
	read_status = UART_READ_NONE;
1000bbec:	2300      	movs	r3, #0

	return string_input[0];
1000bbee:	7828      	ldrb	r0, [r5, #0]
	string_input[0] = 0;
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
	
	read_status = UART_READ_NONE;
1000bbf0:	7023      	strb	r3, [r4, #0]

	return string_input[0];
}
1000bbf2:	bd70      	pop	{r4, r5, r6, pc}
1000bbf4:	6003      	str	r3, [r0, #0]
1000bbf6:	e7f9      	b.n	1000bbec <getchar_b11_timeout+0x44>
int getchar_b11_timeout(unsigned int sec)
{
	read_status = UART_READ_WAITING;
	
	if(user_callback_func == NULL)
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000bbf8:	2102      	movs	r1, #2
1000bbfa:	0030      	movs	r0, r6
1000bbfc:	4b08      	ldr	r3, [pc, #32]	; (1000bc20 <getchar_b11_timeout+0x78>)
1000bbfe:	4798      	blx	r3
1000bc00:	e7dc      	b.n	1000bbbc <getchar_b11_timeout+0x14>
1000bc02:	46c0      	nop			; (mov r8, r8)
1000bc04:	1001bef8 	.word	0x1001bef8
1000bc08:	1001bf00 	.word	0x1001bf00
1000bc0c:	1001cc48 	.word	0x1001cc48
1000bc10:	1000bb4d 	.word	0x1000bb4d
1000bc14:	1001befc 	.word	0x1001befc
1000bc18:	1000c9a1 	.word	0x1000c9a1
1000bc1c:	1001bef4 	.word	0x1001bef4
1000bc20:	1000c9dd 	.word	0x1000c9dd

1000bc24 <platform_event_post>:
	event->next = platform_event_free_list;
	platform_event_free_list = event;
}

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000bc24:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000bc26:	4b0c      	ldr	r3, [pc, #48]	; (1000bc58 <platform_event_post+0x34>)
1000bc28:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000bc2a:	2c00      	cmp	r4, #0
1000bc2c:	d010      	beq.n	1000bc50 <platform_event_post+0x2c>
	{
		platform_event_free_list = evt->next;
1000bc2e:	6825      	ldr	r5, [r4, #0]
		
		evt->next = NULL;
		evt->data = data;
		evt->data_len = data_len;
1000bc30:	80e2      	strh	r2, [r4, #6]
{
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
	if(evt != NULL)
	{
		platform_event_free_list = evt->next;
1000bc32:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000bc34:	2300      	movs	r3, #0
1000bc36:	6023      	str	r3, [r4, #0]
		evt->data = data;
		evt->data_len = data_len;
		evt->event_type = event_type;

		if(platform_event_pending_list == NULL)
1000bc38:	4b08      	ldr	r3, [pc, #32]	; (1000bc5c <platform_event_post+0x38>)
	if(evt != NULL)
	{
		platform_event_free_list = evt->next;
		
		evt->next = NULL;
		evt->data = data;
1000bc3a:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
		evt->event_type = event_type;

		if(platform_event_pending_list == NULL)
1000bc3c:	681a      	ldr	r2, [r3, #0]
		platform_event_free_list = evt->next;
		
		evt->next = NULL;
		evt->data = data;
		evt->data_len = data_len;
		evt->event_type = event_type;
1000bc3e:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000bc40:	2a00      	cmp	r2, #0
1000bc42:	d101      	bne.n	1000bc48 <platform_event_post+0x24>
1000bc44:	e005      	b.n	1000bc52 <platform_event_post+0x2e>
1000bc46:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000bc48:	6813      	ldr	r3, [r2, #0]
1000bc4a:	2b00      	cmp	r3, #0
1000bc4c:	d1fb      	bne.n	1000bc46 <platform_event_post+0x22>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000bc4e:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000bc50:	bd30      	pop	{r4, r5, pc}
		evt->data_len = data_len;
		evt->event_type = event_type;

		if(platform_event_pending_list == NULL)
		{
			platform_event_pending_list = evt;
1000bc52:	601c      	str	r4, [r3, #0]
1000bc54:	e7fc      	b.n	1000bc50 <platform_event_post+0x2c>
1000bc56:	46c0      	nop			; (mov r8, r8)
1000bc58:	1001bf08 	.word	0x1001bf08
1000bc5c:	1001bf04 	.word	0x1001bf04

1000bc60 <platform_event_init>:

void platform_event_init()
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
1000bc60:	2200      	movs	r2, #0
	return status;
	
}

void platform_event_init()
{
1000bc62:	b510      	push	{r4, lr}
1000bc64:	4c07      	ldr	r4, [pc, #28]	; (1000bc84 <platform_event_init+0x24>)
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
1000bc66:	4b08      	ldr	r3, [pc, #32]	; (1000bc88 <platform_event_init+0x28>)
1000bc68:	0020      	movs	r0, r4
1000bc6a:	601a      	str	r2, [r3, #0]
1000bc6c:	0023      	movs	r3, r4
1000bc6e:	3078      	adds	r0, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000bc70:	0019      	movs	r1, r3
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000bc72:	601a      	str	r2, [r3, #0]
1000bc74:	330c      	adds	r3, #12
1000bc76:	000a      	movs	r2, r1
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000bc78:	4283      	cmp	r3, r0
1000bc7a:	d1f9      	bne.n	1000bc70 <platform_event_init+0x10>
1000bc7c:	4b03      	ldr	r3, [pc, #12]	; (1000bc8c <platform_event_init+0x2c>)
1000bc7e:	346c      	adds	r4, #108	; 0x6c
1000bc80:	601c      	str	r4, [r3, #0]
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000bc82:	bd10      	pop	{r4, pc}
1000bc84:	1001bf0c 	.word	0x1001bf0c
1000bc88:	1001bf04 	.word	0x1001bf04
1000bc8c:	1001bf08 	.word	0x1001bf08

1000bc90 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000bc90:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000bc92:	4b06      	ldr	r3, [pc, #24]	; (1000bcac <samb11_plf_resume_callback+0x1c>)
1000bc94:	4a06      	ldr	r2, [pc, #24]	; (1000bcb0 <samb11_plf_resume_callback+0x20>)
1000bc96:	6819      	ldr	r1, [r3, #0]
1000bc98:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000bc9a:	685a      	ldr	r2, [r3, #4]
1000bc9c:	4b05      	ldr	r3, [pc, #20]	; (1000bcb4 <samb11_plf_resume_callback+0x24>)
1000bc9e:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000bca0:	4b05      	ldr	r3, [pc, #20]	; (1000bcb8 <samb11_plf_resume_callback+0x28>)
1000bca2:	681b      	ldr	r3, [r3, #0]
1000bca4:	2b00      	cmp	r3, #0
1000bca6:	d000      	beq.n	1000bcaa <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000bca8:	4798      	blx	r3
	}
}
1000bcaa:	bd10      	pop	{r4, pc}
1000bcac:	1001cc94 	.word	0x1001cc94
1000bcb0:	4000b00c 	.word	0x4000b00c
1000bcb4:	4000b010 	.word	0x4000b010
1000bcb8:	1001cf70 	.word	0x1001cf70

1000bcbc <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000bcbc:	b570      	push	{r4, r5, r6, lr}
1000bcbe:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000bcc0:	4b13      	ldr	r3, [pc, #76]	; (1000bd10 <at_ke_msg_send+0x54>)
	ke_msg_send(param_ptr);
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000bcc2:	3c0c      	subs	r4, #12
}

static void at_ke_msg_send(void const * param_ptr)
{
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000bcc4:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000bcc6:	4b13      	ldr	r3, [pc, #76]	; (1000bd14 <at_ke_msg_send+0x58>)
1000bcc8:	681b      	ldr	r3, [r3, #0]
1000bcca:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000bccc:	2c00      	cmp	r4, #0
1000bcce:	d018      	beq.n	1000bd02 <at_ke_msg_send+0x46>
1000bcd0:	88e3      	ldrh	r3, [r4, #6]
1000bcd2:	2b05      	cmp	r3, #5
1000bcd4:	d015      	beq.n	1000bd02 <at_ke_msg_send+0x46>
		if(osc_en == 0)
1000bcd6:	07eb      	lsls	r3, r5, #31
1000bcd8:	d414      	bmi.n	1000bd04 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000bcda:	4b0f      	ldr	r3, [pc, #60]	; (1000bd18 <at_ke_msg_send+0x5c>)
1000bcdc:	2002      	movs	r0, #2
1000bcde:	681b      	ldr	r3, [r3, #0]
1000bce0:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000bce2:	4b0e      	ldr	r3, [pc, #56]	; (1000bd1c <at_ke_msg_send+0x60>)
1000bce4:	681b      	ldr	r3, [r3, #0]
1000bce6:	4798      	blx	r3
1000bce8:	4c0d      	ldr	r4, [pc, #52]	; (1000bd20 <at_ke_msg_send+0x64>)
			while (pwr_wait_BLE_out_of_reset(3));
1000bcea:	2003      	movs	r0, #3
1000bcec:	6823      	ldr	r3, [r4, #0]
1000bcee:	4798      	blx	r3
1000bcf0:	2800      	cmp	r0, #0
1000bcf2:	d1fa      	bne.n	1000bcea <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000bcf4:	4b0b      	ldr	r3, [pc, #44]	; (1000bd24 <at_ke_msg_send+0x68>)
1000bcf6:	3002      	adds	r0, #2
1000bcf8:	681b      	ldr	r3, [r3, #0]
1000bcfa:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000bcfc:	2201      	movs	r2, #1
1000bcfe:	4b0a      	ldr	r3, [pc, #40]	; (1000bd28 <at_ke_msg_send+0x6c>)
1000bd00:	601a      	str	r2, [r3, #0]
		{
			/*  */
			os_sem_up(gstrFwSem);
		}
	}
}
1000bd02:	bd70      	pop	{r4, r5, r6, pc}
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000bd04:	4b09      	ldr	r3, [pc, #36]	; (1000bd2c <at_ke_msg_send+0x70>)
1000bd06:	6818      	ldr	r0, [r3, #0]
1000bd08:	4b09      	ldr	r3, [pc, #36]	; (1000bd30 <at_ke_msg_send+0x74>)
1000bd0a:	681b      	ldr	r3, [r3, #0]
1000bd0c:	4798      	blx	r3
		}
	}
}
1000bd0e:	e7f8      	b.n	1000bd02 <at_ke_msg_send+0x46>
1000bd10:	4000b1ec 	.word	0x4000b1ec
1000bd14:	1001bfb4 	.word	0x1001bfb4
1000bd18:	1001bfac 	.word	0x1001bfac
1000bd1c:	1001bfbc 	.word	0x1001bfbc
1000bd20:	1001bf98 	.word	0x1001bf98
1000bd24:	1001bfa0 	.word	0x1001bfa0
1000bd28:	4000b020 	.word	0x4000b020
1000bd2c:	1001bfa4 	.word	0x1001bfa4
1000bd30:	1001bf94 	.word	0x1001bf94

1000bd34 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000bd34:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000bd36:	4c0e      	ldr	r4, [pc, #56]	; (1000bd70 <init_port_list+0x3c>)
1000bd38:	2100      	movs	r1, #0
1000bd3a:	2232      	movs	r2, #50	; 0x32
1000bd3c:	0020      	movs	r0, r4
1000bd3e:	4b0d      	ldr	r3, [pc, #52]	; (1000bd74 <init_port_list+0x40>)
1000bd40:	4798      	blx	r3
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
1000bd42:	2601      	movs	r6, #1
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000bd44:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
1000bd46:	2502      	movs	r5, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000bd48:	004a      	lsls	r2, r1, #1
1000bd4a:	54a1      	strb	r1, [r4, r2]
		port_list[i].bit.available = 1;
1000bd4c:	18a2      	adds	r2, r4, r2
1000bd4e:	7853      	ldrb	r3, [r2, #1]
1000bd50:	3101      	adds	r1, #1
1000bd52:	4333      	orrs	r3, r6
		port_list[i].bit.configured = 0;
1000bd54:	b2db      	uxtb	r3, r3
1000bd56:	43ab      	bics	r3, r5
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
1000bd58:	2001      	movs	r0, #1
		port_list[i].bit.configured = 0;
1000bd5a:	7053      	strb	r3, [r2, #1]

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000bd5c:	2919      	cmp	r1, #25
1000bd5e:	d1f3      	bne.n	1000bd48 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000bd60:	7863      	ldrb	r3, [r4, #1]
1000bd62:	4383      	bics	r3, r0
1000bd64:	7063      	strb	r3, [r4, #1]
	port_list[1].bit.available = 0;
1000bd66:	78e3      	ldrb	r3, [r4, #3]
1000bd68:	4383      	bics	r3, r0
1000bd6a:	70e3      	strb	r3, [r4, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000bd6c:	bd70      	pop	{r4, r5, r6, pc}
1000bd6e:	46c0      	nop			; (mov r8, r8)
1000bd70:	1001ccb0 	.word	0x1001ccb0
1000bd74:	10017dcb 	.word	0x10017dcb

1000bd78 <platform_driver_init>:
	
	//store default values
}

plf_drv_status platform_driver_init()
{
1000bd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000bd7a:	4644      	mov	r4, r8
1000bd7c:	465f      	mov	r7, fp
1000bd7e:	4656      	mov	r6, sl
1000bd80:	464d      	mov	r5, r9
1000bd82:	b4f0      	push	{r4, r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000bd84:	4c55      	ldr	r4, [pc, #340]	; (1000bedc <platform_driver_init+0x164>)
1000bd86:	7823      	ldrb	r3, [r4, #0]
1000bd88:	2b00      	cmp	r3, #0
1000bd8a:	d004      	beq.n	1000bd96 <platform_driver_init+0x1e>
1000bd8c:	7823      	ldrb	r3, [r4, #0]
1000bd8e:	b2db      	uxtb	r3, r3
1000bd90:	2b01      	cmp	r3, #1
1000bd92:	d100      	bne.n	1000bd96 <platform_driver_init+0x1e>
1000bd94:	e09e      	b.n	1000bed4 <platform_driver_init+0x15c>
		init_port_list();
1000bd96:	4b52      	ldr	r3, [pc, #328]	; (1000bee0 <platform_driver_init+0x168>)
1000bd98:	4798      	blx	r3
}

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000bd9a:	4a52      	ldr	r2, [pc, #328]	; (1000bee4 <platform_driver_init+0x16c>)
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000bd9c:	4b52      	ldr	r3, [pc, #328]	; (1000bee8 <platform_driver_init+0x170>)
}

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000bd9e:	6811      	ldr	r1, [r2, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000bda0:	4d52      	ldr	r5, [pc, #328]	; (1000beec <platform_driver_init+0x174>)
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000bda2:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000bda4:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000bda6:	4a52      	ldr	r2, [pc, #328]	; (1000bef0 <platform_driver_init+0x178>)
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000bda8:	4952      	ldr	r1, [pc, #328]	; (1000bef4 <platform_driver_init+0x17c>)
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
	default_samb11_clock_init[0] = regval;
1000bdaa:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000bdac:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000bdae:	4b52      	ldr	r3, [pc, #328]	; (1000bef8 <platform_driver_init+0x180>)
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000bdb0:	4e52      	ldr	r6, [pc, #328]	; (1000befc <platform_driver_init+0x184>)
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000bdb2:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000bdb4:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000bdb6:	6053      	str	r3, [r2, #4]
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
		init_port_list();
		init_clock();
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000bdb8:	2300      	movs	r3, #0
1000bdba:	4699      	mov	r9, r3
1000bdbc:	464a      	mov	r2, r9
1000bdbe:	4b50      	ldr	r3, [pc, #320]	; (1000bf00 <platform_driver_init+0x188>)
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000bdc0:	4950      	ldr	r1, [pc, #320]	; (1000bf04 <platform_driver_init+0x18c>)
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
		init_port_list();
		init_clock();
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000bdc2:	601a      	str	r2, [r3, #0]
1000bdc4:	2280      	movs	r2, #128	; 0x80
1000bdc6:	2380      	movs	r3, #128	; 0x80
1000bdc8:	0412      	lsls	r2, r2, #16
1000bdca:	50ea      	str	r2, [r5, r3]
1000bdcc:	4693      	mov	fp, r2
1000bdce:	2280      	movs	r2, #128	; 0x80
1000bdd0:	0452      	lsls	r2, r2, #17
1000bdd2:	50ea      	str	r2, [r5, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000bdd4:	4b4c      	ldr	r3, [pc, #304]	; (1000bf08 <platform_driver_init+0x190>)
1000bdd6:	4692      	mov	sl, r2
1000bdd8:	6033      	str	r3, [r6, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000bdda:	4a4c      	ldr	r2, [pc, #304]	; (1000bf0c <platform_driver_init+0x194>)
1000bddc:	4b4c      	ldr	r3, [pc, #304]	; (1000bf10 <platform_driver_init+0x198>)
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000bdde:	2028      	movs	r0, #40	; 0x28
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000bde0:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000bde2:	4a4c      	ldr	r2, [pc, #304]	; (1000bf14 <platform_driver_init+0x19c>)
1000bde4:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000bde6:	4a4c      	ldr	r2, [pc, #304]	; (1000bf18 <platform_driver_init+0x1a0>)
1000bde8:	6811      	ldr	r1, [r2, #0]
1000bdea:	4a4c      	ldr	r2, [pc, #304]	; (1000bf1c <platform_driver_init+0x1a4>)
1000bdec:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000bdee:	4a4c      	ldr	r2, [pc, #304]	; (1000bf20 <platform_driver_init+0x1a8>)
1000bdf0:	6811      	ldr	r1, [r2, #0]
1000bdf2:	4a4c      	ldr	r2, [pc, #304]	; (1000bf24 <platform_driver_init+0x1ac>)
1000bdf4:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000bdf6:	4a4c      	ldr	r2, [pc, #304]	; (1000bf28 <platform_driver_init+0x1b0>)
1000bdf8:	494c      	ldr	r1, [pc, #304]	; (1000bf2c <platform_driver_init+0x1b4>)
1000bdfa:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000bdfc:	4a4c      	ldr	r2, [pc, #304]	; (1000bf30 <platform_driver_init+0x1b8>)
1000bdfe:	494d      	ldr	r1, [pc, #308]	; (1000bf34 <platform_driver_init+0x1bc>)
1000be00:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000be02:	4a4d      	ldr	r2, [pc, #308]	; (1000bf38 <platform_driver_init+0x1c0>)
1000be04:	4690      	mov	r8, r2
1000be06:	4641      	mov	r1, r8
1000be08:	4a4c      	ldr	r2, [pc, #304]	; (1000bf3c <platform_driver_init+0x1c4>)
1000be0a:	600a      	str	r2, [r1, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000be0c:	4a4c      	ldr	r2, [pc, #304]	; (1000bf40 <platform_driver_init+0x1c8>)
1000be0e:	494d      	ldr	r1, [pc, #308]	; (1000bf44 <platform_driver_init+0x1cc>)
1000be10:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000be12:	494d      	ldr	r1, [pc, #308]	; (1000bf48 <platform_driver_init+0x1d0>)
1000be14:	4a4d      	ldr	r2, [pc, #308]	; (1000bf4c <platform_driver_init+0x1d4>)
1000be16:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000be18:	4f4d      	ldr	r7, [pc, #308]	; (1000bf50 <platform_driver_init+0x1d8>)
1000be1a:	4a4e      	ldr	r2, [pc, #312]	; (1000bf54 <platform_driver_init+0x1dc>)
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000be1c:	494e      	ldr	r1, [pc, #312]	; (1000bf58 <platform_driver_init+0x1e0>)
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
		apps_resume_cb = (uint32_t *)0x1004003c;
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
		updateuartbr_fp = (void (*)())0x10041FC4;
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000be1e:	603a      	str	r2, [r7, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000be20:	4a4e      	ldr	r2, [pc, #312]	; (1000bf5c <platform_driver_init+0x1e4>)
1000be22:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000be24:	4a4e      	ldr	r2, [pc, #312]	; (1000bf60 <platform_driver_init+0x1e8>)
1000be26:	494f      	ldr	r1, [pc, #316]	; (1000bf64 <platform_driver_init+0x1ec>)
1000be28:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000be2a:	4a4f      	ldr	r2, [pc, #316]	; (1000bf68 <platform_driver_init+0x1f0>)
1000be2c:	494f      	ldr	r1, [pc, #316]	; (1000bf6c <platform_driver_init+0x1f4>)
1000be2e:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000be30:	4a4f      	ldr	r2, [pc, #316]	; (1000bf70 <platform_driver_init+0x1f8>)
1000be32:	4950      	ldr	r1, [pc, #320]	; (1000bf74 <platform_driver_init+0x1fc>)
1000be34:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000be36:	4a50      	ldr	r2, [pc, #320]	; (1000bf78 <platform_driver_init+0x200>)
1000be38:	4950      	ldr	r1, [pc, #320]	; (1000bf7c <platform_driver_init+0x204>)
1000be3a:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000be3c:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000be3e:	4950      	ldr	r1, [pc, #320]	; (1000bf80 <platform_driver_init+0x208>)
1000be40:	6833      	ldr	r3, [r6, #0]
1000be42:	2028      	movs	r0, #40	; 0x28
1000be44:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000be46:	6833      	ldr	r3, [r6, #0]
1000be48:	494e      	ldr	r1, [pc, #312]	; (1000bf84 <platform_driver_init+0x20c>)
1000be4a:	2027      	movs	r0, #39	; 0x27
1000be4c:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000be4e:	4b4e      	ldr	r3, [pc, #312]	; (1000bf88 <platform_driver_init+0x210>)
		gstrFwSem 		= (void*)0x100405ec;
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
		InternalAppMsgQHandle = (void*)0x10040c20;
		ke_free = (void(*)(void*))0x00019f09;
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000be50:	2100      	movs	r1, #0
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000be52:	681a      	ldr	r2, [r3, #0]
1000be54:	4b4d      	ldr	r3, [pc, #308]	; (1000bf8c <platform_driver_init+0x214>)
		gstrFwSem 		= (void*)0x100405ec;
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
		InternalAppMsgQHandle = (void*)0x10040c20;
		ke_free = (void(*)(void*))0x00019f09;
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000be56:	484e      	ldr	r0, [pc, #312]	; (1000bf90 <platform_driver_init+0x218>)
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000be58:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000be5a:	4b4e      	ldr	r3, [pc, #312]	; (1000bf94 <platform_driver_init+0x21c>)
1000be5c:	4a4e      	ldr	r2, [pc, #312]	; (1000bf98 <platform_driver_init+0x220>)
1000be5e:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000be60:	4b4e      	ldr	r3, [pc, #312]	; (1000bf9c <platform_driver_init+0x224>)
1000be62:	4a4f      	ldr	r2, [pc, #316]	; (1000bfa0 <platform_driver_init+0x228>)
1000be64:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000be66:	4b4f      	ldr	r3, [pc, #316]	; (1000bfa4 <platform_driver_init+0x22c>)
1000be68:	4a4f      	ldr	r2, [pc, #316]	; (1000bfa8 <platform_driver_init+0x230>)
1000be6a:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000be6c:	4b4f      	ldr	r3, [pc, #316]	; (1000bfac <platform_driver_init+0x234>)
1000be6e:	4a50      	ldr	r2, [pc, #320]	; (1000bfb0 <platform_driver_init+0x238>)
1000be70:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000be72:	4b50      	ldr	r3, [pc, #320]	; (1000bfb4 <platform_driver_init+0x23c>)
1000be74:	4a50      	ldr	r2, [pc, #320]	; (1000bfb8 <platform_driver_init+0x240>)
1000be76:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000be78:	4b50      	ldr	r3, [pc, #320]	; (1000bfbc <platform_driver_init+0x244>)
1000be7a:	4a51      	ldr	r2, [pc, #324]	; (1000bfc0 <platform_driver_init+0x248>)
1000be7c:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000be7e:	4b51      	ldr	r3, [pc, #324]	; (1000bfc4 <platform_driver_init+0x24c>)
1000be80:	4a51      	ldr	r2, [pc, #324]	; (1000bfc8 <platform_driver_init+0x250>)
1000be82:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000be84:	22a0      	movs	r2, #160	; 0xa0
1000be86:	4b51      	ldr	r3, [pc, #324]	; (1000bfcc <platform_driver_init+0x254>)
1000be88:	0092      	lsls	r2, r2, #2
1000be8a:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000be8c:	2280      	movs	r2, #128	; 0x80
1000be8e:	4b50      	ldr	r3, [pc, #320]	; (1000bfd0 <platform_driver_init+0x258>)
1000be90:	0092      	lsls	r2, r2, #2
1000be92:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000be94:	4b4f      	ldr	r3, [pc, #316]	; (1000bfd4 <platform_driver_init+0x25c>)
1000be96:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000be98:	465b      	mov	r3, fp
1000be9a:	602b      	str	r3, [r5, #0]
1000be9c:	4653      	mov	r3, sl
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000be9e:	464a      	mov	r2, r9
1000bea0:	602b      	str	r3, [r5, #0]
1000bea2:	4b4d      	ldr	r3, [pc, #308]	; (1000bfd8 <platform_driver_init+0x260>)
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
		wakeup_int_unregister_callback(0);
1000bea4:	4d4d      	ldr	r5, [pc, #308]	; (1000bfdc <platform_driver_init+0x264>)
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000bea6:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000bea8:	4643      	mov	r3, r8
1000beaa:	4a4d      	ldr	r2, [pc, #308]	; (1000bfe0 <platform_driver_init+0x268>)
1000beac:	681b      	ldr	r3, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
		wakeup_int_unregister_callback(0);
1000beae:	2000      	movs	r0, #0
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000beb0:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000beb2:	683b      	ldr	r3, [r7, #0]
1000beb4:	4a4b      	ldr	r2, [pc, #300]	; (1000bfe4 <platform_driver_init+0x26c>)
1000beb6:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000beb8:	47a8      	blx	r5
		wakeup_int_unregister_callback(1);
1000beba:	2001      	movs	r0, #1
1000bebc:	47a8      	blx	r5
		wakeup_int_unregister_callback(2);
1000bebe:	2002      	movs	r0, #2
1000bec0:	47a8      	blx	r5
		platform_initialized = 1;
1000bec2:	2301      	movs	r3, #1
		status = STATUS_SUCCESS;
1000bec4:	2000      	movs	r0, #0
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
		wakeup_int_unregister_callback(0);
		wakeup_int_unregister_callback(1);
		wakeup_int_unregister_callback(2);
		platform_initialized = 1;
1000bec6:	7023      	strb	r3, [r4, #0]
	else {
		platform_initialized = 1;
		status = STATUS_ALREADY_INITIALIZED;
	}
	return status;
}
1000bec8:	bc3c      	pop	{r2, r3, r4, r5}
1000beca:	4690      	mov	r8, r2
1000becc:	4699      	mov	r9, r3
1000bece:	46a2      	mov	sl, r4
1000bed0:	46ab      	mov	fp, r5
1000bed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wakeup_int_unregister_callback(2);
		platform_initialized = 1;
		status = STATUS_SUCCESS;
	}
	else {
		platform_initialized = 1;
1000bed4:	7023      	strb	r3, [r4, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000bed6:	2001      	movs	r0, #1
1000bed8:	e7f6      	b.n	1000bec8 <platform_driver_init+0x150>
1000beda:	46c0      	nop			; (mov r8, r8)
1000bedc:	1001bf9c 	.word	0x1001bf9c
1000bee0:	1000bd35 	.word	0x1000bd35
1000bee4:	4000b00c 	.word	0x4000b00c
1000bee8:	fffe0fd3 	.word	0xfffe0fd3
1000beec:	e000e100 	.word	0xe000e100
1000bef0:	1001cc94 	.word	0x1001cc94
1000bef4:	4000b010 	.word	0x4000b010
1000bef8:	ffffe7c0 	.word	0xffffe7c0
1000befc:	1001cf64 	.word	0x1001cf64
1000bf00:	1001bfb8 	.word	0x1001bfb8
1000bf04:	0001bc51 	.word	0x0001bc51
1000bf08:	000007d7 	.word	0x000007d7
1000bf0c:	1001cca0 	.word	0x1001cca0
1000bf10:	000007bd 	.word	0x000007bd
1000bf14:	1001cf68 	.word	0x1001cf68
1000bf18:	100400bc 	.word	0x100400bc
1000bf1c:	1001bf90 	.word	0x1001bf90
1000bf20:	100400b8 	.word	0x100400b8
1000bf24:	1001bf8c 	.word	0x1001bf8c
1000bf28:	1001cc9c 	.word	0x1001cc9c
1000bf2c:	0001b99f 	.word	0x0001b99f
1000bf30:	1001cca8 	.word	0x1001cca8
1000bf34:	0001b9db 	.word	0x0001b9db
1000bf38:	1001cf78 	.word	0x1001cf78
1000bf3c:	1004003c 	.word	0x1004003c
1000bf40:	1001ccac 	.word	0x1001ccac
1000bf44:	10041fc0 	.word	0x10041fc0
1000bf48:	10041fc4 	.word	0x10041fc4
1000bf4c:	1001cf74 	.word	0x1001cf74
1000bf50:	1001cf6c 	.word	0x1001cf6c
1000bf54:	10041fd4 	.word	0x10041fd4
1000bf58:	10041fd8 	.word	0x10041fd8
1000bf5c:	1001cca4 	.word	0x1001cca4
1000bf60:	1001bfac 	.word	0x1001bfac
1000bf64:	0001cbe9 	.word	0x0001cbe9
1000bf68:	1001bfa0 	.word	0x1001bfa0
1000bf6c:	0001cd8f 	.word	0x0001cd8f
1000bf70:	1001bfbc 	.word	0x1001bfbc
1000bf74:	0001cea3 	.word	0x0001cea3
1000bf78:	1001bf98 	.word	0x1001bf98
1000bf7c:	0001cbcf 	.word	0x0001cbcf
1000bf80:	1000c415 	.word	0x1000c415
1000bf84:	1000c3b5 	.word	0x1000c3b5
1000bf88:	100400e4 	.word	0x100400e4
1000bf8c:	1001bfb4 	.word	0x1001bfb4
1000bf90:	1001cce4 	.word	0x1001cce4
1000bf94:	1001bfc4 	.word	0x1001bfc4
1000bf98:	00019fe9 	.word	0x00019fe9
1000bf9c:	1001bf94 	.word	0x1001bf94
1000bfa0:	0001dbdd 	.word	0x0001dbdd
1000bfa4:	1001bfa8 	.word	0x1001bfa8
1000bfa8:	0001dc5b 	.word	0x0001dc5b
1000bfac:	1001bfa4 	.word	0x1001bfa4
1000bfb0:	100405ec 	.word	0x100405ec
1000bfb4:	1001bfb0 	.word	0x1001bfb0
1000bfb8:	0001d5e3 	.word	0x0001d5e3
1000bfbc:	1001bfc8 	.word	0x1001bfc8
1000bfc0:	10040c20 	.word	0x10040c20
1000bfc4:	1001bf88 	.word	0x1001bf88
1000bfc8:	00019f09 	.word	0x00019f09
1000bfcc:	10017dcb 	.word	0x10017dcb
1000bfd0:	1001cf7c 	.word	0x1001cf7c
1000bfd4:	1000bc61 	.word	0x1000bc61
1000bfd8:	1001cf70 	.word	0x1001cf70
1000bfdc:	1000c455 	.word	0x1000c455
1000bfe0:	1000bc91 	.word	0x1000bc91
1000bfe4:	1000c471 	.word	0x1000c471

1000bfe8 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000bfe8:	4b05      	ldr	r3, [pc, #20]	; (1000c000 <platform_register_ble_msg_handler+0x18>)
1000bfea:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000bfec:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000bfee:	2a01      	cmp	r2, #1
1000bff0:	d001      	beq.n	1000bff6 <platform_register_ble_msg_handler+0xe>
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000bff2:	0018      	movs	r0, r3
1000bff4:	4770      	bx	lr

plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
		ble_stack_message_handler = fp;
1000bff6:	4b03      	ldr	r3, [pc, #12]	; (1000c004 <platform_register_ble_msg_handler+0x1c>)
1000bff8:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000bffa:	2300      	movs	r3, #0
1000bffc:	e7f9      	b.n	1000bff2 <platform_register_ble_msg_handler+0xa>
1000bffe:	46c0      	nop			; (mov r8, r8)
1000c000:	1001bf9c 	.word	0x1001bf9c
1000c004:	1001bfb8 	.word	0x1001bfb8

1000c008 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000c008:	b570      	push	{r4, r5, r6, lr}
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000c00a:	4b0e      	ldr	r3, [pc, #56]	; (1000c044 <platform_interface_send+0x3c>)


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000c00c:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000c00e:	681b      	ldr	r3, [r3, #0]
	struct ke_msghdr *p_msg_hdr = (struct ke_msghdr *)((void *)data);
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
1000c010:	8840      	ldrh	r0, [r0, #2]
	if(gapm_get_task_from_id != NULL)
1000c012:	2b00      	cmp	r3, #0
1000c014:	d014      	beq.n	1000c040 <platform_interface_send+0x38>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000c016:	4798      	blx	r3
1000c018:	0001      	movs	r1, r0
1000c01a:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000c01c:	4d0a      	ldr	r5, [pc, #40]	; (1000c048 <platform_interface_send+0x40>)
1000c01e:	88a2      	ldrh	r2, [r4, #4]
1000c020:	682d      	ldr	r5, [r5, #0]
1000c022:	88e3      	ldrh	r3, [r4, #6]
1000c024:	8820      	ldrh	r0, [r4, #0]
1000c026:	47a8      	blx	r5
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000c028:	88e2      	ldrh	r2, [r4, #6]
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000c02a:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000c02c:	2a00      	cmp	r2, #0
1000c02e:	d003      	beq.n	1000c038 <platform_interface_send+0x30>
		at_ke_msg_send(params);
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000c030:	0021      	movs	r1, r4
1000c032:	4b06      	ldr	r3, [pc, #24]	; (1000c04c <platform_interface_send+0x44>)
1000c034:	3108      	adds	r1, #8
1000c036:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000c038:	0028      	movs	r0, r5
1000c03a:	4b05      	ldr	r3, [pc, #20]	; (1000c050 <platform_interface_send+0x48>)
1000c03c:	4798      	blx	r3
	}
}
1000c03e:	bd70      	pop	{r4, r5, r6, pc}
1000c040:	0001      	movs	r1, r0
1000c042:	e7eb      	b.n	1000c01c <platform_interface_send+0x14>
1000c044:	1001bf90 	.word	0x1001bf90
1000c048:	1001bfc4 	.word	0x1001bfc4
1000c04c:	10017d8f 	.word	0x10017d8f
1000c050:	1000bcbd 	.word	0x1000bcbd

1000c054 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000c054:	b570      	push	{r4, r5, r6, lr}
1000c056:	0016      	movs	r6, r2
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000c058:	020a      	lsls	r2, r1, #8
		at_ke_msg_send(params);
	}
}

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000c05a:	001d      	movs	r5, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000c05c:	4302      	orrs	r2, r0
1000c05e:	20a0      	movs	r0, #160	; 0xa0
1000c060:	4b09      	ldr	r3, [pc, #36]	; (1000c088 <send_plf_int_msg_ind+0x34>)
1000c062:	2105      	movs	r1, #5
1000c064:	681c      	ldr	r4, [r3, #0]
1000c066:	00c0      	lsls	r0, r0, #3
1000c068:	002b      	movs	r3, r5
1000c06a:	47a0      	blx	r4
1000c06c:	1e04      	subs	r4, r0, #0
											
	//no params
	if(params != NULL) {
1000c06e:	d00a      	beq.n	1000c086 <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000c070:	2d00      	cmp	r5, #0
1000c072:	d005      	beq.n	1000c080 <send_plf_int_msg_ind+0x2c>
1000c074:	2e00      	cmp	r6, #0
1000c076:	d003      	beq.n	1000c080 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000c078:	002a      	movs	r2, r5
1000c07a:	0031      	movs	r1, r6
1000c07c:	4b03      	ldr	r3, [pc, #12]	; (1000c08c <send_plf_int_msg_ind+0x38>)
1000c07e:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000c080:	0020      	movs	r0, r4
1000c082:	4b03      	ldr	r3, [pc, #12]	; (1000c090 <send_plf_int_msg_ind+0x3c>)
1000c084:	4798      	blx	r3
	}
}
1000c086:	bd70      	pop	{r4, r5, r6, pc}
1000c088:	1001bfc4 	.word	0x1001bfc4
1000c08c:	10017d8f 	.word	0x10017d8f
1000c090:	1000bcbd 	.word	0x1000bcbd

1000c094 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000c094:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c096:	4644      	mov	r4, r8
1000c098:	465f      	mov	r7, fp
1000c09a:	4656      	mov	r6, sl
1000c09c:	464d      	mov	r5, r9
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000c09e:	2300      	movs	r3, #0
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000c0a0:	b4f0      	push	{r4, r5, r6, r7}
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000c0a2:	1e44      	subs	r4, r0, #1
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000c0a4:	b089      	sub	sp, #36	; 0x24
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000c0a6:	9301      	str	r3, [sp, #4]
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000c0a8:	1ce3      	adds	r3, r4, #3
1000c0aa:	d800      	bhi.n	1000c0ae <platform_event_wait+0x1a>
1000c0ac:	e0ea      	b.n	1000c284 <platform_event_wait+0x1f0>
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000c0ae:	2300      	movs	r3, #0
1000c0b0:	4699      	mov	r9, r3
1000c0b2:	4b88      	ldr	r3, [pc, #544]	; (1000c2d4 <platform_event_wait+0x240>)
1000c0b4:	2700      	movs	r7, #0
1000c0b6:	4698      	mov	r8, r3
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000c0b8:	4b87      	ldr	r3, [pc, #540]	; (1000c2d8 <platform_event_wait+0x244>)
1000c0ba:	4d88      	ldr	r5, [pc, #544]	; (1000c2dc <platform_event_wait+0x248>)
1000c0bc:	469b      	mov	fp, r3
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000c0be:	4b88      	ldr	r3, [pc, #544]	; (1000c2e0 <platform_event_wait+0x24c>)
1000c0c0:	4e88      	ldr	r6, [pc, #544]	; (1000c2e4 <platform_event_wait+0x250>)
1000c0c2:	469a      	mov	sl, r3
1000c0c4:	e003      	b.n	1000c0ce <platform_event_wait+0x3a>
		}
		else
		{
			status = STATUS_FAILURE;
		}
	}while(bLoopAgain);
1000c0c6:	464b      	mov	r3, r9
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000c0c8:	2707      	movs	r7, #7
		}
	}while(bLoopAgain);
1000c0ca:	2b00      	cmp	r3, #0
1000c0cc:	d052      	beq.n	1000c174 <platform_event_wait+0xe0>
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000c0ce:	4643      	mov	r3, r8
1000c0d0:	0029      	movs	r1, r5
1000c0d2:	6830      	ldr	r0, [r6, #0]
1000c0d4:	681b      	ldr	r3, [r3, #0]
1000c0d6:	4798      	blx	r3
1000c0d8:	2800      	cmp	r0, #0
1000c0da:	d1f4      	bne.n	1000c0c6 <platform_event_wait+0x32>
		{
			uint16_t msg_id = rcv_msg->id;
1000c0dc:	682c      	ldr	r4, [r5, #0]
1000c0de:	88a3      	ldrh	r3, [r4, #4]
1000c0e0:	4699      	mov	r9, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000c0e2:	23cd      	movs	r3, #205	; 0xcd
1000c0e4:	009b      	lsls	r3, r3, #2
1000c0e6:	4599      	cmp	r9, r3
1000c0e8:	d04f      	beq.n	1000c18a <platform_event_wait+0xf6>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000c0ea:	8923      	ldrh	r3, [r4, #8]
1000c0ec:	9303      	str	r3, [sp, #12]
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000c0ee:	8963      	ldrh	r3, [r4, #10]
1000c0f0:	9302      	str	r3, [sp, #8]
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000c0f2:	9b01      	ldr	r3, [sp, #4]
1000c0f4:	2b00      	cmp	r3, #0
1000c0f6:	d000      	beq.n	1000c0fa <platform_event_wait+0x66>
1000c0f8:	e07b      	b.n	1000c1f2 <platform_event_wait+0x15e>
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000c0fa:	23a0      	movs	r3, #160	; 0xa0
1000c0fc:	00db      	lsls	r3, r3, #3
1000c0fe:	4599      	cmp	r9, r3
1000c100:	d051      	beq.n	1000c1a6 <platform_event_wait+0x112>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000c102:	4653      	mov	r3, sl
1000c104:	681b      	ldr	r3, [r3, #0]
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000c106:	682c      	ldr	r4, [r5, #0]
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000c108:	2b00      	cmp	r3, #0
1000c10a:	d100      	bne.n	1000c10e <platform_event_wait+0x7a>
1000c10c:	e084      	b.n	1000c218 <platform_event_wait+0x184>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000c10e:	22cd      	movs	r2, #205	; 0xcd
1000c110:	88a3      	ldrh	r3, [r4, #4]
1000c112:	0092      	lsls	r2, r2, #2
1000c114:	4293      	cmp	r3, r2
1000c116:	d03d      	beq.n	1000c194 <platform_event_wait+0x100>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000c118:	4a73      	ldr	r2, [pc, #460]	; (1000c2e8 <platform_event_wait+0x254>)
1000c11a:	4f74      	ldr	r7, [pc, #464]	; (1000c2ec <platform_event_wait+0x258>)
1000c11c:	4691      	mov	r9, r2
						ke_msg_hdr->id = rcv_msg->id;
1000c11e:	703b      	strb	r3, [r7, #0]
1000c120:	0a1b      	lsrs	r3, r3, #8
1000c122:	707b      	strb	r3, [r7, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000c124:	4b72      	ldr	r3, [pc, #456]	; (1000c2f0 <platform_event_wait+0x25c>)
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000c126:	6017      	str	r7, [r2, #0]
						ke_msg_hdr->id = rcv_msg->id;
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000c128:	8920      	ldrh	r0, [r4, #8]
1000c12a:	681b      	ldr	r3, [r3, #0]
1000c12c:	4798      	blx	r3
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000c12e:	464b      	mov	r3, r9
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
						ke_msg_hdr->id = rcv_msg->id;
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000c130:	7138      	strb	r0, [r7, #4]
1000c132:	0a00      	lsrs	r0, r0, #8
1000c134:	7178      	strb	r0, [r7, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000c136:	6818      	ldr	r0, [r3, #0]
1000c138:	682b      	ldr	r3, [r5, #0]
1000c13a:	88db      	ldrh	r3, [r3, #6]
1000c13c:	8043      	strh	r3, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000c13e:	682c      	ldr	r4, [r5, #0]
1000c140:	8963      	ldrh	r3, [r4, #10]
1000c142:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000c144:	464b      	mov	r3, r9
1000c146:	3008      	adds	r0, #8
1000c148:	6018      	str	r0, [r3, #0]
						if(rcv_msg->param_len > 0) {
1000c14a:	8962      	ldrh	r2, [r4, #10]
1000c14c:	2a00      	cmp	r2, #0
1000c14e:	d000      	beq.n	1000c152 <platform_event_wait+0xbe>
1000c150:	e092      	b.n	1000c278 <platform_event_wait+0x1e4>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000c152:	4653      	mov	r3, sl
1000c154:	3208      	adds	r2, #8
1000c156:	0038      	movs	r0, r7
1000c158:	681b      	ldr	r3, [r3, #0]
1000c15a:	0011      	movs	r1, r2
1000c15c:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c15e:	2300      	movs	r3, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000c160:	2703      	movs	r7, #3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c162:	4699      	mov	r9, r3
1000c164:	682c      	ldr	r4, [r5, #0]
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000c166:	465b      	mov	r3, fp
1000c168:	0020      	movs	r0, r4
1000c16a:	681b      	ldr	r3, [r3, #0]
1000c16c:	4798      	blx	r3
		}
		else
		{
			status = STATUS_FAILURE;
		}
	}while(bLoopAgain);
1000c16e:	464b      	mov	r3, r9
1000c170:	2b00      	cmp	r3, #0
1000c172:	d1ac      	bne.n	1000c0ce <platform_event_wait+0x3a>
	
	if(bEventTimeoutFlag)
1000c174:	9b01      	ldr	r3, [sp, #4]
1000c176:	2b00      	cmp	r3, #0
1000c178:	d150      	bne.n	1000c21c <platform_event_wait+0x188>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000c17a:	0038      	movs	r0, r7
1000c17c:	b009      	add	sp, #36	; 0x24
1000c17e:	bc3c      	pop	{r2, r3, r4, r5}
1000c180:	4690      	mov	r8, r2
1000c182:	4699      	mov	r9, r3
1000c184:	46a2      	mov	sl, r4
1000c186:	46ab      	mov	fp, r5
1000c188:	bdf0      	pop	{r4, r5, r6, r7, pc}
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000c18a:	4b55      	ldr	r3, [pc, #340]	; (1000c2e0 <platform_event_wait+0x24c>)
1000c18c:	681b      	ldr	r3, [r3, #0]
1000c18e:	9302      	str	r3, [sp, #8]
1000c190:	2b00      	cmp	r3, #0
1000c192:	d041      	beq.n	1000c218 <platform_event_wait+0x184>
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000c194:	2301      	movs	r3, #1
1000c196:	4699      	mov	r9, r3
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000c198:	9b01      	ldr	r3, [sp, #4]
1000c19a:	2b00      	cmp	r3, #0
1000c19c:	d0e3      	beq.n	1000c166 <platform_event_wait+0xd2>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c19e:	2300      	movs	r3, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000c1a0:	27d0      	movs	r7, #208	; 0xd0
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c1a2:	4699      	mov	r9, r3
1000c1a4:	e7df      	b.n	1000c166 <platform_event_wait+0xd2>
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000c1a6:	4b53      	ldr	r3, [pc, #332]	; (1000c2f4 <platform_event_wait+0x260>)
1000c1a8:	881f      	ldrh	r7, [r3, #0]
1000c1aa:	4699      	mov	r9, r3
1000c1ac:	9b02      	ldr	r3, [sp, #8]
1000c1ae:	19da      	adds	r2, r3, r7
1000c1b0:	23a0      	movs	r3, #160	; 0xa0
1000c1b2:	009b      	lsls	r3, r3, #2
1000c1b4:	429a      	cmp	r2, r3
1000c1b6:	dd03      	ble.n	1000c1c0 <platform_event_wait+0x12c>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000c1b8:	2780      	movs	r7, #128	; 0x80
1000c1ba:	464b      	mov	r3, r9
1000c1bc:	00bf      	lsls	r7, r7, #2
1000c1be:	801f      	strh	r7, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000c1c0:	0021      	movs	r1, r4
1000c1c2:	4b4a      	ldr	r3, [pc, #296]	; (1000c2ec <platform_event_wait+0x258>)
1000c1c4:	9c02      	ldr	r4, [sp, #8]
1000c1c6:	18ff      	adds	r7, r7, r3
1000c1c8:	0022      	movs	r2, r4
1000c1ca:	310c      	adds	r1, #12
1000c1cc:	0038      	movs	r0, r7
1000c1ce:	4b4a      	ldr	r3, [pc, #296]	; (1000c2f8 <platform_event_wait+0x264>)
1000c1d0:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000c1d2:	0022      	movs	r2, r4
1000c1d4:	0039      	movs	r1, r7
1000c1d6:	4b49      	ldr	r3, [pc, #292]	; (1000c2fc <platform_event_wait+0x268>)
1000c1d8:	9803      	ldr	r0, [sp, #12]
1000c1da:	4798      	blx	r3
				plf_event_buff_index += len;
1000c1dc:	464b      	mov	r3, r9
1000c1de:	46a4      	mov	ip, r4
1000c1e0:	464a      	mov	r2, r9
1000c1e2:	881b      	ldrh	r3, [r3, #0]
1000c1e4:	682c      	ldr	r4, [r5, #0]
1000c1e6:	4463      	add	r3, ip
1000c1e8:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c1ea:	2300      	movs	r3, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000c1ec:	2702      	movs	r7, #2
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c1ee:	4699      	mov	r9, r3
1000c1f0:	e7b9      	b.n	1000c166 <platform_event_wait+0xd2>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000c1f2:	220d      	movs	r2, #13
1000c1f4:	2100      	movs	r1, #0
1000c1f6:	a804      	add	r0, sp, #16
1000c1f8:	4b41      	ldr	r3, [pc, #260]	; (1000c300 <platform_event_wait+0x26c>)
1000c1fa:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000c1fc:	2333      	movs	r3, #51	; 0x33
1000c1fe:	aa04      	add	r2, sp, #16
1000c200:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000c202:	3b30      	subs	r3, #48	; 0x30
1000c204:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000c206:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000c208:	3302      	adds	r3, #2
1000c20a:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000c20c:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000c20e:	210d      	movs	r1, #13
1000c210:	0010      	movs	r0, r2
1000c212:	4b3c      	ldr	r3, [pc, #240]	; (1000c304 <platform_event_wait+0x270>)
1000c214:	4798      	blx	r3
1000c216:	e770      	b.n	1000c0fa <platform_event_wait+0x66>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c218:	4699      	mov	r9, r3
1000c21a:	e7a4      	b.n	1000c166 <platform_event_wait+0xd2>
	}while(bLoopAgain);
	
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000c21c:	6833      	ldr	r3, [r6, #0]
1000c21e:	4698      	mov	r8, r3
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000c220:	2b00      	cmp	r3, #0
1000c222:	d053      	beq.n	1000c2cc <platform_event_wait+0x238>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000c224:	6a1c      	ldr	r4, [r3, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000c226:	2314      	movs	r3, #20
1000c228:	4443      	add	r3, r8
1000c22a:	469a      	mov	sl, r3
1000c22c:	4b36      	ldr	r3, [pc, #216]	; (1000c308 <platform_event_wait+0x274>)
1000c22e:	4650      	mov	r0, sl
1000c230:	681b      	ldr	r3, [r3, #0]
1000c232:	4798      	blx	r3
	while(NULL != current)
1000c234:	2500      	movs	r5, #0
1000c236:	2c00      	cmp	r4, #0
1000c238:	d019      	beq.n	1000c26e <platform_event_wait+0x1da>
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000c23a:	26cd      	movs	r6, #205	; 0xcd
				current = prev->pstrNext;
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
				ke_free(current);
1000c23c:	4b26      	ldr	r3, [pc, #152]	; (1000c2d8 <platform_event_wait+0x244>)
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000c23e:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000c240:	00b6      	lsls	r6, r6, #2
				current = prev->pstrNext;
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
				ke_free(current);
1000c242:	469b      	mov	fp, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000c244:	4699      	mov	r9, r3
1000c246:	4644      	mov	r4, r8
1000c248:	e003      	b.n	1000c252 <platform_event_wait+0x1be>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000c24a:	0005      	movs	r5, r0
1000c24c:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000c24e:	2800      	cmp	r0, #0
1000c250:	d00d      	beq.n	1000c26e <platform_event_wait+0x1da>
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000c252:	6803      	ldr	r3, [r0, #0]
1000c254:	889b      	ldrh	r3, [r3, #4]
1000c256:	42b3      	cmp	r3, r6
1000c258:	d1f7      	bne.n	1000c24a <platform_event_wait+0x1b6>
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
1000c25a:	6883      	ldr	r3, [r0, #8]
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
		{
			num_of_freed++;
			if(NULL != prev)
1000c25c:	2d00      	cmp	r5, #0
1000c25e:	d02f      	beq.n	1000c2c0 <platform_event_wait+0x22c>
			{
				prev->pstrNext = current->pstrNext;
1000c260:	60ab      	str	r3, [r5, #8]
				ke_free(current);
1000c262:	464b      	mov	r3, r9
1000c264:	681b      	ldr	r3, [r3, #0]
1000c266:	4798      	blx	r3
				current = prev->pstrNext;
1000c268:	68a8      	ldr	r0, [r5, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000c26a:	2800      	cmp	r0, #0
1000c26c:	d1f1      	bne.n	1000c252 <platform_event_wait+0x1be>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000c26e:	4b27      	ldr	r3, [pc, #156]	; (1000c30c <platform_event_wait+0x278>)
1000c270:	4650      	mov	r0, sl
1000c272:	681b      	ldr	r3, [r3, #0]
1000c274:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000c276:	e780      	b.n	1000c17a <platform_event_wait+0xe6>
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
						ke_msg_hdr->param_len = rcv_msg->param_len;
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000c278:	0021      	movs	r1, r4
1000c27a:	4b1f      	ldr	r3, [pc, #124]	; (1000c2f8 <platform_event_wait+0x264>)
1000c27c:	310c      	adds	r1, #12
1000c27e:	4798      	blx	r3
1000c280:	8962      	ldrh	r2, [r4, #10]
1000c282:	e766      	b.n	1000c152 <platform_event_wait+0xbe>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000c284:	220d      	movs	r2, #13
1000c286:	2100      	movs	r1, #0
1000c288:	4b1d      	ldr	r3, [pc, #116]	; (1000c300 <platform_event_wait+0x26c>)
1000c28a:	a804      	add	r0, sp, #16
1000c28c:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000c28e:	2333      	movs	r3, #51	; 0x33
1000c290:	aa04      	add	r2, sp, #16
1000c292:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000c294:	3b30      	subs	r3, #48	; 0x30
1000c296:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000c298:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000c29a:	3302      	adds	r3, #2
1000c29c:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000c29e:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000c2a0:	0a23      	lsrs	r3, r4, #8
1000c2a2:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000c2a4:	0c23      	lsrs	r3, r4, #16
1000c2a6:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000c2a8:	2301      	movs	r3, #1
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000c2aa:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000c2ac:	7313      	strb	r3, [r2, #12]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000c2ae:	0e24      	lsrs	r4, r4, #24
	
	msg[u16TxLen++] = ((1) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000c2b0:	4b14      	ldr	r3, [pc, #80]	; (1000c304 <platform_event_wait+0x270>)
1000c2b2:	210d      	movs	r1, #13
1000c2b4:	0010      	movs	r0, r2
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000c2b6:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000c2b8:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000c2ba:	2301      	movs	r3, #1
1000c2bc:	9301      	str	r3, [sp, #4]
1000c2be:	e6f6      	b.n	1000c0ae <platform_event_wait+0x1a>
				ke_free(current);
				current = prev->pstrNext;
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000c2c0:	6223      	str	r3, [r4, #32]
				ke_free(current);
1000c2c2:	465b      	mov	r3, fp
1000c2c4:	681b      	ldr	r3, [r3, #0]
1000c2c6:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000c2c8:	6a20      	ldr	r0, [r4, #32]
1000c2ca:	e7c0      	b.n	1000c24e <platform_event_wait+0x1ba>
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000c2cc:	464b      	mov	r3, r9
1000c2ce:	6a1b      	ldr	r3, [r3, #32]
1000c2d0:	deff      	udf	#255	; 0xff
1000c2d2:	46c0      	nop			; (mov r8, r8)
1000c2d4:	1001bfb0 	.word	0x1001bfb0
1000c2d8:	1001bf88 	.word	0x1001bf88
1000c2dc:	1001bf84 	.word	0x1001bf84
1000c2e0:	1001bfb8 	.word	0x1001bfb8
1000c2e4:	1001bfc8 	.word	0x1001bfc8
1000c2e8:	1001bfc0 	.word	0x1001bfc0
1000c2ec:	1001cce4 	.word	0x1001cce4
1000c2f0:	1001bf8c 	.word	0x1001bf8c
1000c2f4:	1001cf7c 	.word	0x1001cf7c
1000c2f8:	10017d8f 	.word	0x10017d8f
1000c2fc:	1000bc25 	.word	0x1000bc25
1000c300:	10017dcb 	.word	0x10017dcb
1000c304:	1000c009 	.word	0x1000c009
1000c308:	1001bfa8 	.word	0x1001bfa8
1000c30c:	1001bf94 	.word	0x1001bf94

1000c310 <acquire_sleep_lock>:
plf_drv_status acquire_sleep_lock()
{
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000c310:	2080      	movs	r0, #128	; 0x80
	}
	return status;
}

plf_drv_status acquire_sleep_lock()
{
1000c312:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000c314:	4b02      	ldr	r3, [pc, #8]	; (1000c320 <acquire_sleep_lock+0x10>)
1000c316:	0200      	lsls	r0, r0, #8
1000c318:	681b      	ldr	r3, [r3, #0]
1000c31a:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000c31c:	2008      	movs	r0, #8
1000c31e:	bd10      	pop	{r4, pc}
1000c320:	1001cc9c 	.word	0x1001cc9c

1000c324 <release_message_lock>:

plf_drv_status release_message_lock()
{
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000c324:	2080      	movs	r0, #128	; 0x80
#endif	//0
	return status;
}

plf_drv_status release_message_lock()
{
1000c326:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000c328:	4b02      	ldr	r3, [pc, #8]	; (1000c334 <release_message_lock+0x10>)
1000c32a:	01c0      	lsls	r0, r0, #7
1000c32c:	681b      	ldr	r3, [r3, #0]
1000c32e:	4798      	blx	r3
	return status;
}
1000c330:	2000      	movs	r0, #0
1000c332:	bd10      	pop	{r4, pc}
1000c334:	1001cca8 	.word	0x1001cca8

1000c338 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000c338:	2080      	movs	r0, #128	; 0x80
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
	return status;
}

plf_drv_status release_sleep_lock()
{
1000c33a:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000c33c:	4c04      	ldr	r4, [pc, #16]	; (1000c350 <release_sleep_lock+0x18>)
1000c33e:	01c0      	lsls	r0, r0, #7
1000c340:	6823      	ldr	r3, [r4, #0]
1000c342:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000c344:	2080      	movs	r0, #128	; 0x80
1000c346:	6823      	ldr	r3, [r4, #0]
1000c348:	0200      	lsls	r0, r0, #8
1000c34a:	4798      	blx	r3
	return status;
}
1000c34c:	2000      	movs	r0, #0
1000c34e:	bd10      	pop	{r4, pc}
1000c350:	1001cca8 	.word	0x1001cca8

1000c354 <gpio1_combined_isr_handler>:
void gpio1_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000c354:	4914      	ldr	r1, [pc, #80]	; (1000c3a8 <gpio1_combined_isr_handler+0x54>)
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000c356:	4815      	ldr	r0, [pc, #84]	; (1000c3ac <gpio1_combined_isr_handler+0x58>)
void gpio1_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000c358:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000c35a:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
void gpio1_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000c35c:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000c35e:	4302      	orrs	r2, r0
1000c360:	b292      	uxth	r2, r2
1000c362:	850a      	strh	r2, [r1, #40]	; 0x28

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000c364:	05db      	lsls	r3, r3, #23
1000c366:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000c368:	d018      	beq.n	1000c39c <gpio1_combined_isr_handler+0x48>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000c36a:	b2db      	uxtb	r3, r3
1000c36c:	425a      	negs	r2, r3
1000c36e:	4013      	ands	r3, r2
			while (!(port_gpio1 == 1)) {
1000c370:	2b01      	cmp	r3, #1
1000c372:	d017      	beq.n	1000c3a4 <gpio1_combined_isr_handler+0x50>
1000c374:	2200      	movs	r2, #0
				port_gpio1 = port_gpio1 >> 1;
				index++;
1000c376:	3201      	adds	r2, #1
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
				port_gpio1 = port_gpio1 >> 1;
1000c378:	085b      	lsrs	r3, r3, #1
				index++;
1000c37a:	b2d2      	uxtb	r2, r2
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000c37c:	2b01      	cmp	r3, #1
1000c37e:	d1fa      	bne.n	1000c376 <gpio1_combined_isr_handler+0x22>
1000c380:	4093      	lsls	r3, r2
1000c382:	b29b      	uxth	r3, r3
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000c384:	870b      	strh	r3, [r1, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000c386:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
1000c388:	05db      	lsls	r3, r3, #23
1000c38a:	0ddb      	lsrs	r3, r3, #23
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000c38c:	d1ea      	bne.n	1000c364 <gpio1_combined_isr_handler+0x10>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000c38e:	2180      	movs	r1, #128	; 0x80
1000c390:	4a07      	ldr	r2, [pc, #28]	; (1000c3b0 <gpio1_combined_isr_handler+0x5c>)
1000c392:	3381      	adds	r3, #129	; 0x81
1000c394:	0049      	lsls	r1, r1, #1
1000c396:	33ff      	adds	r3, #255	; 0xff
1000c398:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000c39a:	4770      	bx	lr
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000c39c:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
1000c39e:	4303      	orrs	r3, r0
1000c3a0:	b29b      	uxth	r3, r3
1000c3a2:	e7ef      	b.n	1000c384 <gpio1_combined_isr_handler+0x30>
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000c3a4:	2301      	movs	r3, #1
1000c3a6:	e7ed      	b.n	1000c384 <gpio1_combined_isr_handler+0x30>
1000c3a8:	40011000 	.word	0x40011000
1000c3ac:	ffff8000 	.word	0xffff8000
1000c3b0:	e000e100 	.word	0xe000e100

1000c3b4 <gpio0_combined_isr_handler>:
void gpio0_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000c3b4:	4914      	ldr	r1, [pc, #80]	; (1000c408 <gpio0_combined_isr_handler+0x54>)
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000c3b6:	4815      	ldr	r0, [pc, #84]	; (1000c40c <gpio0_combined_isr_handler+0x58>)
void gpio0_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000c3b8:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000c3ba:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
void gpio0_combined_isr_handler(void)
{
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000c3bc:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000c3be:	4302      	orrs	r2, r0
1000c3c0:	b292      	uxth	r2, r2
1000c3c2:	850a      	strh	r2, [r1, #40]	; 0x28

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000c3c4:	05db      	lsls	r3, r3, #23
1000c3c6:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000c3c8:	d017      	beq.n	1000c3fa <gpio0_combined_isr_handler+0x46>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000c3ca:	b2db      	uxtb	r3, r3
1000c3cc:	425a      	negs	r2, r3
1000c3ce:	4013      	ands	r3, r2
			while (!(port_gpio0 == 1)) {
1000c3d0:	2b01      	cmp	r3, #1
1000c3d2:	d016      	beq.n	1000c402 <gpio0_combined_isr_handler+0x4e>
1000c3d4:	2200      	movs	r2, #0
				port_gpio0 = port_gpio0 >> 1;
				index++;
1000c3d6:	3201      	adds	r2, #1
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
				port_gpio0 = port_gpio0 >> 1;
1000c3d8:	085b      	lsrs	r3, r3, #1
				index++;
1000c3da:	b2d2      	uxtb	r2, r2
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000c3dc:	2b01      	cmp	r3, #1
1000c3de:	d1fa      	bne.n	1000c3d6 <gpio0_combined_isr_handler+0x22>
1000c3e0:	4093      	lsls	r3, r2
1000c3e2:	b29b      	uxth	r3, r3
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000c3e4:	870b      	strh	r3, [r1, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000c3e6:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
1000c3e8:	05db      	lsls	r3, r3, #23
1000c3ea:	0ddb      	lsrs	r3, r3, #23
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000c3ec:	d1ea      	bne.n	1000c3c4 <gpio0_combined_isr_handler+0x10>
1000c3ee:	2180      	movs	r1, #128	; 0x80
1000c3f0:	4a07      	ldr	r2, [pc, #28]	; (1000c410 <gpio0_combined_isr_handler+0x5c>)
1000c3f2:	3381      	adds	r3, #129	; 0x81
1000c3f4:	33ff      	adds	r3, #255	; 0xff
1000c3f6:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000c3f8:	4770      	bx	lr
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000c3fa:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
1000c3fc:	4303      	orrs	r3, r0
1000c3fe:	b29b      	uxth	r3, r3
1000c400:	e7f0      	b.n	1000c3e4 <gpio0_combined_isr_handler+0x30>
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000c402:	2301      	movs	r3, #1
1000c404:	e7ee      	b.n	1000c3e4 <gpio0_combined_isr_handler+0x30>
1000c406:	46c0      	nop			; (mov r8, r8)
1000c408:	40010000 	.word	0x40010000
1000c40c:	ffff8000 	.word	0xffff8000
1000c410:	e000e100 	.word	0xe000e100

1000c414 <PORT1_COMB_Handler>:
	NVIC_ClearPendingIRQ(7);
}

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000c414:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000c416:	4c0b      	ldr	r4, [pc, #44]	; (1000c444 <PORT1_COMB_Handler+0x30>)
1000c418:	8f23      	ldrh	r3, [r4, #56]	; 0x38
1000c41a:	0b5b      	lsrs	r3, r3, #13
1000c41c:	d102      	bne.n	1000c424 <PORT1_COMB_Handler+0x10>
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000c41e:	4b0a      	ldr	r3, [pc, #40]	; (1000c448 <PORT1_COMB_Handler+0x34>)
1000c420:	4798      	blx	r3
	}
}
1000c422:	bd10      	pop	{r4, pc}
#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
		handle_ext_wakeup_isr();
1000c424:	4b09      	ldr	r3, [pc, #36]	; (1000c44c <PORT1_COMB_Handler+0x38>)
1000c426:	681b      	ldr	r3, [r3, #0]
1000c428:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000c42a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
1000c42c:	8f22      	ldrh	r2, [r4, #56]	; 0x38
1000c42e:	0b5b      	lsrs	r3, r3, #13
1000c430:	035b      	lsls	r3, r3, #13
1000c432:	4313      	orrs	r3, r2
1000c434:	8723      	strh	r3, [r4, #56]	; 0x38
1000c436:	2180      	movs	r1, #128	; 0x80
1000c438:	23c0      	movs	r3, #192	; 0xc0
1000c43a:	4a05      	ldr	r2, [pc, #20]	; (1000c450 <PORT1_COMB_Handler+0x3c>)
1000c43c:	0049      	lsls	r1, r1, #1
1000c43e:	005b      	lsls	r3, r3, #1
1000c440:	50d1      	str	r1, [r2, r3]
1000c442:	e7ee      	b.n	1000c422 <PORT1_COMB_Handler+0xe>
1000c444:	40011000 	.word	0x40011000
1000c448:	1000c355 	.word	0x1000c355
1000c44c:	1001cf68 	.word	0x1001cf68
1000c450:	e000e100 	.word	0xe000e100

1000c454 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000c454:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000c456:	2802      	cmp	r0, #2
1000c458:	d901      	bls.n	1000c45e <wakeup_int_unregister_callback+0xa>
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000c45a:	0018      	movs	r0, r3
1000c45c:	4770      	bx	lr
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000c45e:	2200      	movs	r2, #0
1000c460:	4b02      	ldr	r3, [pc, #8]	; (1000c46c <wakeup_int_unregister_callback+0x18>)
1000c462:	0080      	lsls	r0, r0, #2
1000c464:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000c466:	2300      	movs	r3, #0
1000c468:	e7f7      	b.n	1000c45a <wakeup_int_unregister_callback+0x6>
1000c46a:	46c0      	nop			; (mov r8, r8)
1000c46c:	1001cf80 	.word	0x1001cf80

1000c470 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000c470:	7802      	ldrb	r2, [r0, #0]
	}
	return status;
}

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000c472:	b510      	push	{r4, lr}
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000c474:	6803      	ldr	r3, [r0, #0]
	}
	return status;
}

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000c476:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000c478:	2a01      	cmp	r2, #1
1000c47a:	d01c      	beq.n	1000c4b6 <wakeup_active_event_callback+0x46>
			callback = wakeup_source_callback[0];
			callback();
		}
		*pu32WakeSource &= ~(0xFF);
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000c47c:	041a      	lsls	r2, r3, #16
1000c47e:	0e12      	lsrs	r2, r2, #24
1000c480:	2a01      	cmp	r2, #1
1000c482:	d00e      	beq.n	1000c4a2 <wakeup_active_event_callback+0x32>
			callback = wakeup_source_callback[1];
			callback();
		}
		*pu32WakeSource &= ~(0xFF << 8);
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000c484:	021a      	lsls	r2, r3, #8
1000c486:	0e12      	lsrs	r2, r2, #24
1000c488:	2a01      	cmp	r2, #1
1000c48a:	d000      	beq.n	1000c48e <wakeup_active_event_callback+0x1e>
			callback = wakeup_source_callback[2];
			callback();
		}
		*pu32WakeSource &= ~(0xFF << 16);
	}
}
1000c48c:	bd10      	pop	{r4, pc}
		}
		*pu32WakeSource &= ~(0xFF << 8);
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
	{
		if(wakeup_source_callback[2] != NULL) {
1000c48e:	4a0f      	ldr	r2, [pc, #60]	; (1000c4cc <wakeup_active_event_callback+0x5c>)
1000c490:	6892      	ldr	r2, [r2, #8]
1000c492:	2a00      	cmp	r2, #0
1000c494:	d001      	beq.n	1000c49a <wakeup_active_event_callback+0x2a>
			callback = wakeup_source_callback[2];
			callback();
1000c496:	4790      	blx	r2
1000c498:	6823      	ldr	r3, [r4, #0]
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000c49a:	4a0d      	ldr	r2, [pc, #52]	; (1000c4d0 <wakeup_active_event_callback+0x60>)
1000c49c:	4013      	ands	r3, r2
1000c49e:	6023      	str	r3, [r4, #0]
	}
}
1000c4a0:	e7f4      	b.n	1000c48c <wakeup_active_event_callback+0x1c>
		}
		*pu32WakeSource &= ~(0xFF);
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
	{
		if(wakeup_source_callback[1] != NULL) {
1000c4a2:	4a0a      	ldr	r2, [pc, #40]	; (1000c4cc <wakeup_active_event_callback+0x5c>)
1000c4a4:	6852      	ldr	r2, [r2, #4]
1000c4a6:	2a00      	cmp	r2, #0
1000c4a8:	d001      	beq.n	1000c4ae <wakeup_active_event_callback+0x3e>
			callback = wakeup_source_callback[1];
			callback();
1000c4aa:	4790      	blx	r2
1000c4ac:	6823      	ldr	r3, [r4, #0]
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000c4ae:	4a09      	ldr	r2, [pc, #36]	; (1000c4d4 <wakeup_active_event_callback+0x64>)
1000c4b0:	4013      	ands	r3, r2
1000c4b2:	6023      	str	r3, [r4, #0]
1000c4b4:	e7e6      	b.n	1000c484 <wakeup_active_event_callback+0x14>
{
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
	{
		if(wakeup_source_callback[0] != NULL) {
1000c4b6:	4a05      	ldr	r2, [pc, #20]	; (1000c4cc <wakeup_active_event_callback+0x5c>)
1000c4b8:	6812      	ldr	r2, [r2, #0]
1000c4ba:	2a00      	cmp	r2, #0
1000c4bc:	d001      	beq.n	1000c4c2 <wakeup_active_event_callback+0x52>
			callback = wakeup_source_callback[0];
			callback();
1000c4be:	4790      	blx	r2
1000c4c0:	6823      	ldr	r3, [r4, #0]
		}
		*pu32WakeSource &= ~(0xFF);
1000c4c2:	22ff      	movs	r2, #255	; 0xff
1000c4c4:	4393      	bics	r3, r2
1000c4c6:	6023      	str	r3, [r4, #0]
1000c4c8:	e7d8      	b.n	1000c47c <wakeup_active_event_callback+0xc>
1000c4ca:	46c0      	nop			; (mov r8, r8)
1000c4cc:	1001cf80 	.word	0x1001cf80
1000c4d0:	ff00ffff 	.word	0xff00ffff
1000c4d4:	ffff00ff 	.word	0xffff00ff

1000c4d8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000c4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c4da:	4647      	mov	r7, r8
1000c4dc:	000c      	movs	r4, r1
1000c4de:	b480      	push	{r7}
1000c4e0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000c4e2:	2800      	cmp	r0, #0
1000c4e4:	d111      	bne.n	1000c50a <_read+0x32>
		return -1;
	}

	for (; len > 0; --len) {
1000c4e6:	2a00      	cmp	r2, #0
1000c4e8:	dd0d      	ble.n	1000c506 <_read+0x2e>
1000c4ea:	4e09      	ldr	r6, [pc, #36]	; (1000c510 <_read+0x38>)
1000c4ec:	4d09      	ldr	r5, [pc, #36]	; (1000c514 <_read+0x3c>)
1000c4ee:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000c4f0:	0021      	movs	r1, r4
1000c4f2:	6830      	ldr	r0, [r6, #0]
1000c4f4:	682b      	ldr	r3, [r5, #0]
		ptr++;
1000c4f6:	3401      	adds	r4, #1
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
1000c4f8:	4798      	blx	r3

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000c4fa:	42bc      	cmp	r4, r7
1000c4fc:	d1f8      	bne.n	1000c4f0 <_read+0x18>
1000c4fe:	4640      	mov	r0, r8
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000c500:	bc04      	pop	{r2}
1000c502:	4690      	mov	r8, r2
1000c504:	bdf0      	pop	{r4, r5, r6, r7, pc}

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000c506:	2000      	movs	r0, #0
1000c508:	e7fa      	b.n	1000c500 <_read+0x28>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000c50a:	2001      	movs	r0, #1
1000c50c:	4240      	negs	r0, r0
1000c50e:	e7f7      	b.n	1000c500 <_read+0x28>
1000c510:	1001cf94 	.word	0x1001cf94
1000c514:	1001cf8c 	.word	0x1001cf8c

1000c518 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000c518:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c51a:	4647      	mov	r7, r8
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000c51c:	3801      	subs	r0, #1
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000c51e:	b480      	push	{r7}
1000c520:	000e      	movs	r6, r1
1000c522:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000c524:	2802      	cmp	r0, #2
1000c526:	d810      	bhi.n	1000c54a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
1000c528:	2a00      	cmp	r2, #0
1000c52a:	d015      	beq.n	1000c558 <_write+0x40>
1000c52c:	4b0b      	ldr	r3, [pc, #44]	; (1000c55c <_write+0x44>)
1000c52e:	2400      	movs	r4, #0
1000c530:	4698      	mov	r8, r3
1000c532:	4f0b      	ldr	r7, [pc, #44]	; (1000c560 <_write+0x48>)
1000c534:	e002      	b.n	1000c53c <_write+0x24>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000c536:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000c538:	42a5      	cmp	r5, r4
1000c53a:	d00b      	beq.n	1000c554 <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000c53c:	4643      	mov	r3, r8
1000c53e:	5d31      	ldrb	r1, [r6, r4]
1000c540:	6818      	ldr	r0, [r3, #0]
1000c542:	683b      	ldr	r3, [r7, #0]
1000c544:	4798      	blx	r3
1000c546:	2800      	cmp	r0, #0
1000c548:	daf5      	bge.n	1000c536 <_write+0x1e>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000c54a:	2001      	movs	r0, #1
1000c54c:	4240      	negs	r0, r0
			return -1;
		}
		++nChars;
	}
	return nChars;
}
1000c54e:	bc04      	pop	{r2}
1000c550:	4690      	mov	r8, r2
1000c552:	bdf0      	pop	{r4, r5, r6, r7, pc}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000c554:	0028      	movs	r0, r5
1000c556:	e7fa      	b.n	1000c54e <_write+0x36>

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000c558:	2000      	movs	r0, #0
1000c55a:	e7f8      	b.n	1000c54e <_write+0x36>
1000c55c:	1001cf94 	.word	0x1001cf94
1000c560:	1001cf90 	.word	0x1001cf90

1000c564 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000c564:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000c566:	4b21      	ldr	r3, [pc, #132]	; (1000c5ec <uart_rx0_isr_handler+0x88>)
1000c568:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000c56a:	6823      	ldr	r3, [r4, #0]
1000c56c:	7d1d      	ldrb	r5, [r3, #20]
1000c56e:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000c570:	066a      	lsls	r2, r5, #25
1000c572:	d50d      	bpl.n	1000c590 <uart_rx0_isr_handler+0x2c>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000c574:	211e      	movs	r1, #30
1000c576:	2222      	movs	r2, #34	; 0x22
1000c578:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000c57a:	7e1a      	ldrb	r2, [r3, #24]
1000c57c:	3123      	adds	r1, #35	; 0x23
1000c57e:	438a      	bics	r2, r1
1000c580:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c582:	2321      	movs	r3, #33	; 0x21
1000c584:	5ce2      	ldrb	r2, [r4, r3]
1000c586:	3b19      	subs	r3, #25
1000c588:	4213      	tst	r3, r2
1000c58a:	d11d      	bne.n	1000c5c8 <uart_rx0_isr_handler+0x64>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000c58c:	6823      	ldr	r3, [r4, #0]
1000c58e:	7c1a      	ldrb	r2, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c590:	2201      	movs	r2, #1
1000c592:	422a      	tst	r2, r5
1000c594:	d017      	beq.n	1000c5c6 <uart_rx0_isr_handler+0x62>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000c596:	7c1b      	ldrb	r3, [r3, #16]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000c598:	6961      	ldr	r1, [r4, #20]
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000c59a:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000c59c:	700b      	strb	r3, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000c59e:	6963      	ldr	r3, [r4, #20]
1000c5a0:	3301      	adds	r3, #1
1000c5a2:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000c5a4:	8ba3      	ldrh	r3, [r4, #28]
1000c5a6:	3b01      	subs	r3, #1
1000c5a8:	b29b      	uxth	r3, r3
1000c5aa:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000c5ac:	8ba3      	ldrh	r3, [r4, #28]
1000c5ae:	b29b      	uxth	r3, r3
1000c5b0:	2b00      	cmp	r3, #0
1000c5b2:	d108      	bne.n	1000c5c6 <uart_rx0_isr_handler+0x62>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c5b4:	2121      	movs	r1, #33	; 0x21
1000c5b6:	5c60      	ldrb	r0, [r4, r1]
1000c5b8:	391d      	subs	r1, #29
1000c5ba:	4201      	tst	r1, r0
1000c5bc:	d003      	beq.n	1000c5c6 <uart_rx0_isr_handler+0x62>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000c5be:	2020      	movs	r0, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c5c0:	5c20      	ldrb	r0, [r4, r0]
1000c5c2:	4201      	tst	r1, r0
1000c5c4:	d108      	bne.n	1000c5d8 <uart_rx0_isr_handler+0x74>
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
			}
		}
	}
}
1000c5c6:	bd70      	pop	{r4, r5, r6, pc}
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000c5c8:	2220      	movs	r2, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c5ca:	5ca2      	ldrb	r2, [r4, r2]
1000c5cc:	4213      	tst	r3, r2
1000c5ce:	d0dd      	beq.n	1000c58c <uart_rx0_isr_handler+0x28>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000c5d0:	0020      	movs	r0, r4
1000c5d2:	6923      	ldr	r3, [r4, #16]
1000c5d4:	4798      	blx	r3
1000c5d6:	e7d9      	b.n	1000c58c <uart_rx0_isr_handler+0x28>
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000c5d8:	311e      	adds	r1, #30
1000c5da:	5463      	strb	r3, [r4, r1]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000c5dc:	6821      	ldr	r1, [r4, #0]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000c5de:	0020      	movs	r0, r4
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
				module->hw->RX_INTERRUPT_MASK.reg &=
1000c5e0:	7e0b      	ldrb	r3, [r1, #24]
1000c5e2:	4393      	bics	r3, r2
1000c5e4:	760b      	strb	r3, [r1, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000c5e6:	68e3      	ldr	r3, [r4, #12]
1000c5e8:	4798      	blx	r3
			}
		}
	}
}
1000c5ea:	e7ec      	b.n	1000c5c6 <uart_rx0_isr_handler+0x62>
1000c5ec:	1001cf98 	.word	0x1001cf98

1000c5f0 <uart_tx0_isr_handler>:
static void uart_tx0_isr_handler(void)
{
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000c5f0:	2101      	movs	r1, #1
		}
	}
}

static void uart_tx0_isr_handler(void)
{
1000c5f2:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000c5f4:	4b22      	ldr	r3, [pc, #136]	; (1000c680 <uart_tx0_isr_handler+0x90>)
1000c5f6:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000c5f8:	6823      	ldr	r3, [r4, #0]
1000c5fa:	791d      	ldrb	r5, [r3, #4]
1000c5fc:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000c5fe:	4229      	tst	r1, r5
1000c600:	d00c      	beq.n	1000c61c <uart_tx0_isr_handler+0x2c>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000c602:	69a2      	ldr	r2, [r4, #24]
1000c604:	7810      	ldrb	r0, [r2, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000c606:	3201      	adds	r2, #1
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000c608:	b2c0      	uxtb	r0, r0
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000c60a:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000c60c:	7018      	strb	r0, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000c60e:	8be3      	ldrh	r3, [r4, #30]
1000c610:	3b01      	subs	r3, #1
1000c612:	b29b      	uxth	r3, r3
1000c614:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000c616:	8be3      	ldrh	r3, [r4, #30]
1000c618:	2b00      	cmp	r3, #0
1000c61a:	d022      	beq.n	1000c662 <uart_tx0_isr_handler+0x72>
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000c61c:	2310      	movs	r3, #16
1000c61e:	422b      	tst	r3, r5
1000c620:	d004      	beq.n	1000c62c <uart_tx0_isr_handler+0x3c>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c622:	2221      	movs	r2, #33	; 0x21
1000c624:	5ca1      	ldrb	r1, [r4, r2]
1000c626:	3a20      	subs	r2, #32
1000c628:	420a      	tst	r2, r1
1000c62a:	d10b      	bne.n	1000c644 <uart_tx0_isr_handler+0x54>
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000c62c:	2320      	movs	r3, #32
1000c62e:	422b      	tst	r3, r5
1000c630:	d007      	beq.n	1000c642 <uart_tx0_isr_handler+0x52>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c632:	2221      	movs	r2, #33	; 0x21
1000c634:	5ca1      	ldrb	r1, [r4, r2]
1000c636:	3a1f      	subs	r2, #31
1000c638:	420a      	tst	r2, r1
1000c63a:	d002      	beq.n	1000c642 <uart_tx0_isr_handler+0x52>
1000c63c:	5ce3      	ldrb	r3, [r4, r3]
1000c63e:	421a      	tst	r2, r3
1000c640:	d119      	bne.n	1000c676 <uart_tx0_isr_handler+0x86>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
		}

	}
}
1000c642:	bd70      	pop	{r4, r5, r6, pc}
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000c644:	2120      	movs	r1, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c646:	5c61      	ldrb	r1, [r4, r1]
1000c648:	420a      	tst	r2, r1
1000c64a:	d0ef      	beq.n	1000c62c <uart_tx0_isr_handler+0x3c>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000c64c:	2100      	movs	r1, #0
1000c64e:	3221      	adds	r2, #33	; 0x21
1000c650:	54a1      	strb	r1, [r4, r2]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c652:	6821      	ldr	r1, [r4, #0]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000c654:	0020      	movs	r0, r4
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c656:	7a0a      	ldrb	r2, [r1, #8]
1000c658:	439a      	bics	r2, r3
1000c65a:	720a      	strb	r2, [r1, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000c65c:	6863      	ldr	r3, [r4, #4]
1000c65e:	4798      	blx	r3
1000c660:	e7e4      	b.n	1000c62c <uart_tx0_isr_handler+0x3c>
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c662:	6822      	ldr	r2, [r4, #0]
1000c664:	7a13      	ldrb	r3, [r2, #8]
1000c666:	438b      	bics	r3, r1
1000c668:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000c66a:	2310      	movs	r3, #16
1000c66c:	6822      	ldr	r2, [r4, #0]
1000c66e:	7a11      	ldrb	r1, [r2, #8]
1000c670:	430b      	orrs	r3, r1
1000c672:	7213      	strb	r3, [r2, #8]
1000c674:	e7d2      	b.n	1000c61c <uart_tx0_isr_handler+0x2c>

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000c676:	68a3      	ldr	r3, [r4, #8]
1000c678:	0020      	movs	r0, r4
1000c67a:	4798      	blx	r3
		}

	}
}
1000c67c:	e7e1      	b.n	1000c642 <uart_tx0_isr_handler+0x52>
1000c67e:	46c0      	nop			; (mov r8, r8)
1000c680:	1001cf98 	.word	0x1001cf98

1000c684 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000c684:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000c686:	4b21      	ldr	r3, [pc, #132]	; (1000c70c <uart_rx1_isr_handler+0x88>)
1000c688:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000c68a:	6823      	ldr	r3, [r4, #0]
1000c68c:	7d1d      	ldrb	r5, [r3, #20]
1000c68e:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000c690:	066a      	lsls	r2, r5, #25
1000c692:	d50d      	bpl.n	1000c6b0 <uart_rx1_isr_handler+0x2c>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000c694:	211e      	movs	r1, #30
1000c696:	2222      	movs	r2, #34	; 0x22
1000c698:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000c69a:	7e1a      	ldrb	r2, [r3, #24]
1000c69c:	3123      	adds	r1, #35	; 0x23
1000c69e:	438a      	bics	r2, r1
1000c6a0:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c6a2:	2321      	movs	r3, #33	; 0x21
1000c6a4:	5ce2      	ldrb	r2, [r4, r3]
1000c6a6:	3b19      	subs	r3, #25
1000c6a8:	4213      	tst	r3, r2
1000c6aa:	d11d      	bne.n	1000c6e8 <uart_rx1_isr_handler+0x64>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000c6ac:	6823      	ldr	r3, [r4, #0]
1000c6ae:	7c1a      	ldrb	r2, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c6b0:	2201      	movs	r2, #1
1000c6b2:	422a      	tst	r2, r5
1000c6b4:	d017      	beq.n	1000c6e6 <uart_rx1_isr_handler+0x62>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000c6b6:	7c1b      	ldrb	r3, [r3, #16]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000c6b8:	6961      	ldr	r1, [r4, #20]
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000c6ba:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000c6bc:	700b      	strb	r3, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000c6be:	6963      	ldr	r3, [r4, #20]
1000c6c0:	3301      	adds	r3, #1
1000c6c2:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000c6c4:	8ba3      	ldrh	r3, [r4, #28]
1000c6c6:	3b01      	subs	r3, #1
1000c6c8:	b29b      	uxth	r3, r3
1000c6ca:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000c6cc:	8ba3      	ldrh	r3, [r4, #28]
1000c6ce:	b29b      	uxth	r3, r3
1000c6d0:	2b00      	cmp	r3, #0
1000c6d2:	d108      	bne.n	1000c6e6 <uart_rx1_isr_handler+0x62>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c6d4:	2121      	movs	r1, #33	; 0x21
1000c6d6:	5c60      	ldrb	r0, [r4, r1]
1000c6d8:	391d      	subs	r1, #29
1000c6da:	4201      	tst	r1, r0
1000c6dc:	d003      	beq.n	1000c6e6 <uart_rx1_isr_handler+0x62>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000c6de:	2020      	movs	r0, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c6e0:	5c20      	ldrb	r0, [r4, r0]
1000c6e2:	4201      	tst	r1, r0
1000c6e4:	d108      	bne.n	1000c6f8 <uart_rx1_isr_handler+0x74>
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
			}
		}
	}
}
1000c6e6:	bd70      	pop	{r4, r5, r6, pc}
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000c6e8:	2220      	movs	r2, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c6ea:	5ca2      	ldrb	r2, [r4, r2]
1000c6ec:	4213      	tst	r3, r2
1000c6ee:	d0dd      	beq.n	1000c6ac <uart_rx1_isr_handler+0x28>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000c6f0:	0020      	movs	r0, r4
1000c6f2:	6923      	ldr	r3, [r4, #16]
1000c6f4:	4798      	blx	r3
1000c6f6:	e7d9      	b.n	1000c6ac <uart_rx1_isr_handler+0x28>
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000c6f8:	311e      	adds	r1, #30
1000c6fa:	5463      	strb	r3, [r4, r1]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000c6fc:	6821      	ldr	r1, [r4, #0]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000c6fe:	0020      	movs	r0, r4
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
				module->hw->RX_INTERRUPT_MASK.reg &=
1000c700:	7e0b      	ldrb	r3, [r1, #24]
1000c702:	4393      	bics	r3, r2
1000c704:	760b      	strb	r3, [r1, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000c706:	68e3      	ldr	r3, [r4, #12]
1000c708:	4798      	blx	r3
			}
		}
	}
}
1000c70a:	e7ec      	b.n	1000c6e6 <uart_rx1_isr_handler+0x62>
1000c70c:	1001cf98 	.word	0x1001cf98

1000c710 <uart_tx1_isr_handler>:
static void uart_tx1_isr_handler(void)
{
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000c710:	2101      	movs	r1, #1
		}
	}
}

static void uart_tx1_isr_handler(void)
{
1000c712:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000c714:	4b22      	ldr	r3, [pc, #136]	; (1000c7a0 <uart_tx1_isr_handler+0x90>)
1000c716:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000c718:	6823      	ldr	r3, [r4, #0]
1000c71a:	791d      	ldrb	r5, [r3, #4]
1000c71c:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000c71e:	4229      	tst	r1, r5
1000c720:	d00c      	beq.n	1000c73c <uart_tx1_isr_handler+0x2c>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000c722:	69a2      	ldr	r2, [r4, #24]
1000c724:	7810      	ldrb	r0, [r2, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000c726:	3201      	adds	r2, #1
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000c728:	b2c0      	uxtb	r0, r0
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000c72a:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000c72c:	7018      	strb	r0, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000c72e:	8be3      	ldrh	r3, [r4, #30]
1000c730:	3b01      	subs	r3, #1
1000c732:	b29b      	uxth	r3, r3
1000c734:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000c736:	8be3      	ldrh	r3, [r4, #30]
1000c738:	2b00      	cmp	r3, #0
1000c73a:	d022      	beq.n	1000c782 <uart_tx1_isr_handler+0x72>
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000c73c:	2310      	movs	r3, #16
1000c73e:	422b      	tst	r3, r5
1000c740:	d004      	beq.n	1000c74c <uart_tx1_isr_handler+0x3c>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c742:	2221      	movs	r2, #33	; 0x21
1000c744:	5ca1      	ldrb	r1, [r4, r2]
1000c746:	3a20      	subs	r2, #32
1000c748:	420a      	tst	r2, r1
1000c74a:	d10b      	bne.n	1000c764 <uart_tx1_isr_handler+0x54>
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000c74c:	2320      	movs	r3, #32
1000c74e:	422b      	tst	r3, r5
1000c750:	d007      	beq.n	1000c762 <uart_tx1_isr_handler+0x52>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c752:	2221      	movs	r2, #33	; 0x21
1000c754:	5ca1      	ldrb	r1, [r4, r2]
1000c756:	3a1f      	subs	r2, #31
1000c758:	420a      	tst	r2, r1
1000c75a:	d002      	beq.n	1000c762 <uart_tx1_isr_handler+0x52>
1000c75c:	5ce3      	ldrb	r3, [r4, r3]
1000c75e:	421a      	tst	r2, r3
1000c760:	d119      	bne.n	1000c796 <uart_tx1_isr_handler+0x86>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
		}

	}
}
1000c762:	bd70      	pop	{r4, r5, r6, pc}
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000c764:	2120      	movs	r1, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c766:	5c61      	ldrb	r1, [r4, r1]
1000c768:	420a      	tst	r2, r1
1000c76a:	d0ef      	beq.n	1000c74c <uart_tx1_isr_handler+0x3c>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000c76c:	2100      	movs	r1, #0
1000c76e:	3221      	adds	r2, #33	; 0x21
1000c770:	54a1      	strb	r1, [r4, r2]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c772:	6821      	ldr	r1, [r4, #0]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000c774:	0020      	movs	r0, r4
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c776:	7a0a      	ldrb	r2, [r1, #8]
1000c778:	439a      	bics	r2, r3
1000c77a:	720a      	strb	r2, [r1, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000c77c:	6863      	ldr	r3, [r4, #4]
1000c77e:	4798      	blx	r3
1000c780:	e7e4      	b.n	1000c74c <uart_tx1_isr_handler+0x3c>
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c782:	6822      	ldr	r2, [r4, #0]
1000c784:	7a13      	ldrb	r3, [r2, #8]
1000c786:	438b      	bics	r3, r1
1000c788:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000c78a:	2310      	movs	r3, #16
1000c78c:	6822      	ldr	r2, [r4, #0]
1000c78e:	7a11      	ldrb	r1, [r2, #8]
1000c790:	430b      	orrs	r3, r1
1000c792:	7213      	strb	r3, [r2, #8]
1000c794:	e7d2      	b.n	1000c73c <uart_tx1_isr_handler+0x2c>

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000c796:	68a3      	ldr	r3, [r4, #8]
1000c798:	0020      	movs	r0, r4
1000c79a:	4798      	blx	r3
		}

	}
}
1000c79c:	e7e1      	b.n	1000c762 <uart_tx1_isr_handler+0x52>
1000c79e:	46c0      	nop			; (mov r8, r8)
1000c7a0:	1001cf98 	.word	0x1001cf98

1000c7a4 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000c7a4:	23e1      	movs	r3, #225	; 0xe1
	config->stop_bits = UART_1_STOP_BIT;
	config->parity = UART_NO_PARITY;
	config->flow_control = false;

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000c7a6:	2203      	movs	r2, #3
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000c7a8:	025b      	lsls	r3, r3, #9
1000c7aa:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000c7ac:	2300      	movs	r3, #0
	config->stop_bits = UART_1_STOP_BIT;
	config->parity = UART_NO_PARITY;
	config->flow_control = false;

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000c7ae:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000c7b0:	3201      	adds	r2, #1
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
	config->data_bits = UART_8_BITS;
1000c7b2:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000c7b4:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000c7b6:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000c7b8:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000c7ba:	6102      	str	r2, [r0, #16]
	config->data_bits = UART_8_BITS;
	config->stop_bits = UART_1_STOP_BIT;
	config->parity = UART_NO_PARITY;
	config->flow_control = false;

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000c7bc:	3302      	adds	r3, #2
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000c7be:	3201      	adds	r2, #1
	config->data_bits = UART_8_BITS;
	config->stop_bits = UART_1_STOP_BIT;
	config->parity = UART_NO_PARITY;
	config->flow_control = false;

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000c7c0:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000c7c2:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000c7c4:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000c7c6:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000c7c8:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000c7ca:	6243      	str	r3, [r0, #36]	; 0x24
}
1000c7cc:	4770      	bx	lr
1000c7ce:	46c0      	nop			; (mov r8, r8)

1000c7d0 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000c7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c7d2:	4647      	mov	r7, r8

	/* Assign module pointer to software instance struct */
	module->hw = hw;

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000c7d4:	2300      	movs	r3, #0
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000c7d6:	b480      	push	{r7}
1000c7d8:	0017      	movs	r7, r2
	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
	}
	module->rx_buffer_ptr = NULL;
	module->tx_buffer_ptr = NULL;
	module->remaining_rx_buffer_length = 0;
1000c7da:	2200      	movs	r2, #0
1000c7dc:	8383      	strh	r3, [r0, #28]

	/* Assign module pointer to software instance struct */
	module->hw = hw;

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000c7de:	6043      	str	r3, [r0, #4]
1000c7e0:	6083      	str	r3, [r0, #8]
1000c7e2:	60c3      	str	r3, [r0, #12]
1000c7e4:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000c7e6:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000c7e8:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
	module->remaining_tx_buffer_length = 0;
1000c7ea:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000c7ec:	3320      	adds	r3, #32

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000c7ee:	6001      	str	r1, [r0, #0]
	}
	module->rx_buffer_ptr = NULL;
	module->tx_buffer_ptr = NULL;
	module->remaining_rx_buffer_length = 0;
	module->remaining_tx_buffer_length = 0;
	module->callback_reg_mask = 0;
1000c7f0:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000c7f2:	3301      	adds	r3, #1
1000c7f4:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000c7f6:	3301      	adds	r3, #1
1000c7f8:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000c7fa:	4b52      	ldr	r3, [pc, #328]	; (1000c944 <uart_init+0x174>)
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000c7fc:	0005      	movs	r5, r0
	module->remaining_tx_buffer_length = 0;
	module->callback_reg_mask = 0;
	module->callback_enable_mask = 0;
	module->status = STATUS_OK;

	if (hw == UART0) {
1000c7fe:	4299      	cmp	r1, r3
1000c800:	d100      	bne.n	1000c804 <uart_init+0x34>
1000c802:	e06c      	b.n	1000c8de <uart_init+0x10e>
		_uart_instances[0] = module;
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000c804:	4b50      	ldr	r3, [pc, #320]	; (1000c948 <uart_init+0x178>)
1000c806:	4299      	cmp	r1, r3
1000c808:	d100      	bne.n	1000c80c <uart_init+0x3c>
1000c80a:	e081      	b.n	1000c910 <uart_init+0x140>
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000c80c:	79fa      	ldrb	r2, [r7, #7]
		index = 4;
	} else {
		index = 2;
1000c80e:	2302      	movs	r3, #2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000c810:	2a00      	cmp	r2, #0
1000c812:	d000      	beq.n	1000c816 <uart_init+0x46>
		index = 4;
1000c814:	3302      	adds	r3, #2
1000c816:	3b01      	subs	r3, #1
1000c818:	b2de      	uxtb	r6, r3
1000c81a:	4b4c      	ldr	r3, [pc, #304]	; (1000c94c <uart_init+0x17c>)
1000c81c:	003c      	movs	r4, r7
1000c81e:	4698      	mov	r8, r3
1000c820:	3603      	adds	r6, #3
1000c822:	00b6      	lsls	r6, r6, #2
1000c824:	3408      	adds	r4, #8
1000c826:	19be      	adds	r6, r7, r6
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000c828:	8a21      	ldrh	r1, [r4, #16]
1000c82a:	cc01      	ldmia	r4!, {r0}
1000c82c:	b2c0      	uxtb	r0, r0
1000c82e:	47c0      	blx	r8

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000c830:	42a6      	cmp	r6, r4
1000c832:	d1f9      	bne.n	1000c828 <uart_init+0x58>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c834:	682b      	ldr	r3, [r5, #0]
1000c836:	7d1a      	ldrb	r2, [r3, #20]
1000c838:	07d2      	lsls	r2, r2, #31
1000c83a:	d504      	bpl.n	1000c846 <uart_init+0x76>
1000c83c:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000c83e:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c840:	7d1a      	ldrb	r2, [r3, #20]
1000c842:	4211      	tst	r1, r2
1000c844:	d1fb      	bne.n	1000c83e <uart_init+0x6e>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000c846:	2100      	movs	r1, #0
1000c848:	2220      	movs	r2, #32
1000c84a:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000c84c:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000c84e:	797a      	ldrb	r2, [r7, #5]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	uint8_t config_temp = 0;
1000c850:	1e59      	subs	r1, r3, #1
1000c852:	418b      	sbcs	r3, r1
1000c854:	0159      	lsls	r1, r3, #5
	/* program the uart configuration. */
	if(config->flow_control) {
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000c856:	793b      	ldrb	r3, [r7, #4]
1000c858:	4313      	orrs	r3, r2
	switch(config->parity) {
1000c85a:	79ba      	ldrb	r2, [r7, #6]
	/* program the uart configuration. */
	if(config->flow_control) {
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000c85c:	430b      	orrs	r3, r1
	switch(config->parity) {
1000c85e:	2a02      	cmp	r2, #2
1000c860:	d03a      	beq.n	1000c8d8 <uart_init+0x108>
1000c862:	d934      	bls.n	1000c8ce <uart_init+0xfe>
1000c864:	2a03      	cmp	r2, #3
1000c866:	d02f      	beq.n	1000c8c8 <uart_init+0xf8>
1000c868:	2a04      	cmp	r2, #4
1000c86a:	d101      	bne.n	1000c870 <uart_init+0xa0>
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
			break;

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000c86c:	220e      	movs	r2, #14
1000c86e:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000c870:	2220      	movs	r2, #32
1000c872:	6829      	ldr	r1, [r5, #0]
1000c874:	548b      	strb	r3, [r1, r2]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000c876:	4b36      	ldr	r3, [pc, #216]	; (1000c950 <uart_init+0x180>)
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000c878:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000c87a:	4798      	blx	r3
	integerpart = clock / baud_rate;
1000c87c:	0031      	movs	r1, r6
1000c87e:	4b35      	ldr	r3, [pc, #212]	; (1000c954 <uart_init+0x184>)
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000c880:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000c882:	4798      	blx	r3
1000c884:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000c886:	0400      	lsls	r0, r0, #16
1000c888:	0c00      	lsrs	r0, r0, #16
1000c88a:	4370      	muls	r0, r6
	i = 0;
	while(diff > (baud_rate / 16)) {
1000c88c:	0931      	lsrs	r1, r6, #4
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
1000c88e:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000c890:	2300      	movs	r3, #0
1000c892:	4281      	cmp	r1, r0
1000c894:	d207      	bcs.n	1000c8a6 <uart_init+0xd6>
		i++;
1000c896:	3301      	adds	r3, #1
1000c898:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000c89a:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000c89c:	4281      	cmp	r1, r0
1000c89e:	d3fa      	bcc.n	1000c896 <uart_init+0xc6>
1000c8a0:	3301      	adds	r3, #1
1000c8a2:	071b      	lsls	r3, r3, #28
1000c8a4:	0f5b      	lsrs	r3, r3, #29
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000c8a6:	2100      	movs	r1, #0
1000c8a8:	2028      	movs	r0, #40	; 0x28
1000c8aa:	682c      	ldr	r4, [r5, #0]
	module->hw->UART_BAUD_RATE.reg =
1000c8ac:	00d2      	lsls	r2, r2, #3
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000c8ae:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000c8b0:	4313      	orrs	r3, r2
1000c8b2:	682a      	ldr	r2, [r5, #0]
1000c8b4:	b29b      	uxth	r3, r3
1000c8b6:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000c8b8:	682b      	ldr	r3, [r5, #0]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
	
	return STATUS_OK;
}
1000c8ba:	2000      	movs	r0, #0
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000c8bc:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000c8be:	682b      	ldr	r3, [r5, #0]
1000c8c0:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000c8c2:	bc04      	pop	{r2}
1000c8c4:	4690      	mov	r8, r2
1000c8c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
			break;

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000c8c8:	220a      	movs	r2, #10
1000c8ca:	4313      	orrs	r3, r2
			break;
1000c8cc:	e7d0      	b.n	1000c870 <uart_init+0xa0>
	if(config->flow_control) {
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
	switch(config->parity) {
1000c8ce:	2a01      	cmp	r2, #1
1000c8d0:	d1ce      	bne.n	1000c870 <uart_init+0xa0>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000c8d2:	2202      	movs	r2, #2
1000c8d4:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000c8d6:	e7cb      	b.n	1000c870 <uart_init+0xa0>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000c8d8:	2206      	movs	r2, #6
1000c8da:	4313      	orrs	r3, r2
			break;
1000c8dc:	e7c8      	b.n	1000c870 <uart_init+0xa0>
	module->callback_reg_mask = 0;
	module->callback_enable_mask = 0;
	module->status = STATUS_OK;

	if (hw == UART0) {
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000c8de:	4c1e      	ldr	r4, [pc, #120]	; (1000c958 <uart_init+0x188>)
1000c8e0:	2009      	movs	r0, #9
1000c8e2:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000c8e4:	200a      	movs	r0, #10
1000c8e6:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000c8e8:	4c1c      	ldr	r4, [pc, #112]	; (1000c95c <uart_init+0x18c>)
1000c8ea:	2009      	movs	r0, #9
1000c8ec:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000c8ee:	200a      	movs	r0, #10
1000c8f0:	47a0      	blx	r4
		_uart_instances[0] = module;
1000c8f2:	4b1b      	ldr	r3, [pc, #108]	; (1000c960 <uart_init+0x190>)
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000c8f4:	491b      	ldr	r1, [pc, #108]	; (1000c964 <uart_init+0x194>)
1000c8f6:	2010      	movs	r0, #16
1000c8f8:	4c1b      	ldr	r4, [pc, #108]	; (1000c968 <uart_init+0x198>)
	if (hw == UART0) {
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
		system_peripheral_reset(PERIPHERAL_UART0_IF);
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
		_uart_instances[0] = module;
1000c8fa:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000c8fc:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000c8fe:	491b      	ldr	r1, [pc, #108]	; (1000c96c <uart_init+0x19c>)
1000c900:	2011      	movs	r0, #17
1000c902:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000c904:	2201      	movs	r2, #1
1000c906:	4b1a      	ldr	r3, [pc, #104]	; (1000c970 <uart_init+0x1a0>)
1000c908:	601a      	str	r2, [r3, #0]
1000c90a:	3201      	adds	r2, #1
1000c90c:	601a      	str	r2, [r3, #0]
1000c90e:	e77d      	b.n	1000c80c <uart_init+0x3c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000c910:	4c11      	ldr	r4, [pc, #68]	; (1000c958 <uart_init+0x188>)
1000c912:	200b      	movs	r0, #11
1000c914:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000c916:	200c      	movs	r0, #12
1000c918:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000c91a:	4c10      	ldr	r4, [pc, #64]	; (1000c95c <uart_init+0x18c>)
1000c91c:	200b      	movs	r0, #11
1000c91e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000c920:	200c      	movs	r0, #12
1000c922:	47a0      	blx	r4
		_uart_instances[1] = module;
1000c924:	4b0e      	ldr	r3, [pc, #56]	; (1000c960 <uart_init+0x190>)
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000c926:	4913      	ldr	r1, [pc, #76]	; (1000c974 <uart_init+0x1a4>)
1000c928:	2012      	movs	r0, #18
1000c92a:	4c0f      	ldr	r4, [pc, #60]	; (1000c968 <uart_init+0x198>)
	} else if (hw == UART1) {
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
		system_peripheral_reset(PERIPHERAL_UART1_IF);
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
		_uart_instances[1] = module;
1000c92c:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000c92e:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000c930:	4911      	ldr	r1, [pc, #68]	; (1000c978 <uart_init+0x1a8>)
1000c932:	2013      	movs	r0, #19
1000c934:	47a0      	blx	r4
1000c936:	2204      	movs	r2, #4
1000c938:	4b0d      	ldr	r3, [pc, #52]	; (1000c970 <uart_init+0x1a0>)
1000c93a:	601a      	str	r2, [r3, #0]
1000c93c:	3204      	adds	r2, #4
1000c93e:	601a      	str	r2, [r3, #0]
1000c940:	e764      	b.n	1000c80c <uart_init+0x3c>
1000c942:	46c0      	nop			; (mov r8, r8)
1000c944:	40004000 	.word	0x40004000
1000c948:	40005000 	.word	0x40005000
1000c94c:	1000cd19 	.word	0x1000cd19
1000c950:	1000d1c5 	.word	0x1000d1c5
1000c954:	10014a75 	.word	0x10014a75
1000c958:	1000d4d9 	.word	0x1000d4d9
1000c95c:	1000d1d1 	.word	0x1000d1d1
1000c960:	1001cf98 	.word	0x1001cf98
1000c964:	1000c565 	.word	0x1000c565
1000c968:	1000d8f1 	.word	0x1000d8f1
1000c96c:	1000c5f1 	.word	0x1000c5f1
1000c970:	e000e100 	.word	0xe000e100
1000c974:	1000c685 	.word	0x1000c685
1000c978:	1000c711 	.word	0x1000c711

1000c97c <uart_write_wait>:
* \return Status of the operation.
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
1000c97c:	6802      	ldr	r2, [r0, #0]
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000c97e:	2001      	movs	r0, #1
1000c980:	7913      	ldrb	r3, [r2, #4]
1000c982:	4218      	tst	r0, r3
1000c984:	d0fc      	beq.n	1000c980 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
	
	return STATUS_OK;
}
1000c986:	2000      	movs	r0, #0
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000c988:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000c98a:	4770      	bx	lr

1000c98c <uart_read_wait>:
* \return Status of the operation.
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
1000c98c:	6802      	ldr	r2, [r0, #0]
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000c98e:	2001      	movs	r0, #1
1000c990:	7d13      	ldrb	r3, [r2, #20]
1000c992:	4218      	tst	r0, r3
1000c994:	d0fc      	beq.n	1000c990 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000c996:	7c13      	ldrb	r3, [r2, #16]
	
	return STATUS_OK;
}
1000c998:	2000      	movs	r0, #0
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000c99a:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000c99c:	4770      	bx	lr
1000c99e:	46c0      	nop			; (mov r8, r8)

1000c9a0 <uart_read_buffer_job>:
 * \retval  STATUS_ERR_DENIED       If the receiver is not enabled
 * \retval  STATUS_ERR_INVALID_ARG  If requested read length was zero
 */
enum status_code uart_read_buffer_job(struct uart_module *const module,
		uint8_t *rx_data, uint16_t length)
{
1000c9a0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000c9a2:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000c9a4:	2a00      	cmp	r2, #0
1000c9a6:	d101      	bne.n	1000c9ac <uart_read_buffer_job+0xc>
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
}
1000c9a8:	0018      	movs	r0, r3
1000c9aa:	bd10      	pop	{r4, pc}
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000c9ac:	2422      	movs	r4, #34	; 0x22
1000c9ae:	5d03      	ldrb	r3, [r0, r4]
1000c9b0:	b2db      	uxtb	r3, r3
1000c9b2:	2b05      	cmp	r3, #5
1000c9b4:	d0f8      	beq.n	1000c9a8 <uart_read_buffer_job+0x8>

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
	module->rx_buffer_ptr = rx_data;
	module->status = STATUS_BUSY;
1000c9b6:	2305      	movs	r3, #5
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000c9b8:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
	module->status = STATUS_BUSY;

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000c9ba:	2201      	movs	r2, #1
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
	module->rx_buffer_ptr = rx_data;
1000c9bc:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000c9be:	5503      	strb	r3, [r0, r4]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000c9c0:	6803      	ldr	r3, [r0, #0]
1000c9c2:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000c9c4:	2300      	movs	r3, #0
1000c9c6:	e7ef      	b.n	1000c9a8 <uart_read_buffer_job+0x8>

1000c9c8 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000c9c8:	0093      	lsls	r3, r2, #2
1000c9ca:	18c3      	adds	r3, r0, r3
1000c9cc:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000c9ce:	2301      	movs	r3, #1
1000c9d0:	2120      	movs	r1, #32
1000c9d2:	4093      	lsls	r3, r2
1000c9d4:	5c42      	ldrb	r2, [r0, r1]
1000c9d6:	4313      	orrs	r3, r2
1000c9d8:	5443      	strb	r3, [r0, r1]
}
1000c9da:	4770      	bx	lr

1000c9dc <uart_enable_callback>:
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000c9dc:	2301      	movs	r3, #1
1000c9de:	2221      	movs	r2, #33	; 0x21
1000c9e0:	408b      	lsls	r3, r1
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000c9e2:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000c9e4:	5c84      	ldrb	r4, [r0, r2]
1000c9e6:	4323      	orrs	r3, r4
1000c9e8:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000c9ea:	2901      	cmp	r1, #1
1000c9ec:	d104      	bne.n	1000c9f8 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000c9ee:	2320      	movs	r3, #32
1000c9f0:	6802      	ldr	r2, [r0, #0]
1000c9f2:	7a11      	ldrb	r1, [r2, #8]
1000c9f4:	430b      	orrs	r3, r1
1000c9f6:	7213      	strb	r3, [r2, #8]
	}
}
1000c9f8:	bd10      	pop	{r4, pc}
1000c9fa:	46c0      	nop			; (mov r8, r8)

1000c9fc <uart_disable_callback>:
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000c9fc:	2201      	movs	r2, #1
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000c9fe:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000ca00:	2421      	movs	r4, #33	; 0x21
1000ca02:	408a      	lsls	r2, r1
1000ca04:	5d03      	ldrb	r3, [r0, r4]
1000ca06:	4393      	bics	r3, r2
1000ca08:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000ca0a:	2901      	cmp	r1, #1
1000ca0c:	d104      	bne.n	1000ca18 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000ca0e:	6802      	ldr	r2, [r0, #0]
1000ca10:	311f      	adds	r1, #31
1000ca12:	7a13      	ldrb	r3, [r2, #8]
1000ca14:	438b      	bics	r3, r1
1000ca16:	7213      	strb	r3, [r2, #8]
	}

}
1000ca18:	bd10      	pop	{r4, pc}
1000ca1a:	46c0      	nop			; (mov r8, r8)

1000ca1c <gpio_port0_isr_handler>:
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000ca1c:	2300      	movs	r3, #0

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000ca1e:	2001      	movs	r0, #1
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000ca20:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000ca22:	4d12      	ldr	r5, [pc, #72]	; (1000ca6c <gpio_port0_isr_handler+0x50>)
1000ca24:	682e      	ldr	r6, [r5, #0]
1000ca26:	8f31      	ldrh	r1, [r6, #56]	; 0x38
1000ca28:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000ca2a:	0002      	movs	r2, r0
1000ca2c:	409a      	lsls	r2, r3
1000ca2e:	2401      	movs	r4, #1
1000ca30:	4211      	tst	r1, r2
1000ca32:	d109      	bne.n	1000ca48 <gpio_port0_isr_handler+0x2c>
1000ca34:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000ca36:	2b10      	cmp	r3, #16
1000ca38:	d1f7      	bne.n	1000ca2a <gpio_port0_isr_handler+0xe>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000ca3a:	2180      	movs	r1, #128	; 0x80
1000ca3c:	23c0      	movs	r3, #192	; 0xc0
1000ca3e:	4a0c      	ldr	r2, [pc, #48]	; (1000ca70 <gpio_port0_isr_handler+0x54>)
1000ca40:	0409      	lsls	r1, r1, #16
1000ca42:	005b      	lsls	r3, r3, #1
1000ca44:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000ca46:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000ca48:	b292      	uxth	r2, r2
1000ca4a:	8732      	strh	r2, [r6, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000ca4c:	2246      	movs	r2, #70	; 0x46
1000ca4e:	5aaa      	ldrh	r2, [r5, r2]
1000ca50:	411a      	asrs	r2, r3
1000ca52:	4214      	tst	r4, r2
1000ca54:	d0f1      	beq.n	1000ca3a <gpio_port0_isr_handler+0x1e>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000ca56:	2244      	movs	r2, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000ca58:	5aaa      	ldrh	r2, [r5, r2]
1000ca5a:	411a      	asrs	r2, r3
1000ca5c:	4214      	tst	r4, r2
1000ca5e:	d0ec      	beq.n	1000ca3a <gpio_port0_isr_handler+0x1e>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000ca60:	009b      	lsls	r3, r3, #2
1000ca62:	18eb      	adds	r3, r5, r3
1000ca64:	685b      	ldr	r3, [r3, #4]
1000ca66:	4798      	blx	r3
1000ca68:	e7e7      	b.n	1000ca3a <gpio_port0_isr_handler+0x1e>
1000ca6a:	46c0      	nop			; (mov r8, r8)
1000ca6c:	1001cfa0 	.word	0x1001cfa0
1000ca70:	e000e100 	.word	0xe000e100

1000ca74 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000ca74:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ca76:	4657      	mov	r7, sl
1000ca78:	464e      	mov	r6, r9
1000ca7a:	4645      	mov	r5, r8
1000ca7c:	b4e0      	push	{r5, r6, r7}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000ca7e:	4e1b      	ldr	r6, [pc, #108]	; (1000caec <gpio_port1_isr_handler+0x78>)
1000ca80:	2400      	movs	r4, #0
1000ca82:	6cb3      	ldr	r3, [r6, #72]	; 0x48
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
1000ca84:	2501      	movs	r5, #1
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000ca86:	8f1f      	ldrh	r7, [r3, #56]	; 0x38
1000ca88:	b2bf      	uxth	r7, r7
1000ca8a:	0b7b      	lsrs	r3, r7, #13
1000ca8c:	035b      	lsls	r3, r3, #13
1000ca8e:	4698      	mov	r8, r3

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
			aon_handle_ext_wakeup_isr();
1000ca90:	4b17      	ldr	r3, [pc, #92]	; (1000caf0 <gpio_port1_isr_handler+0x7c>)
1000ca92:	469a      	mov	sl, r3
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000ca94:	238e      	movs	r3, #142	; 0x8e
1000ca96:	4699      	mov	r9, r3
1000ca98:	e013      	b.n	1000cac2 <gpio_port1_isr_handler+0x4e>
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
1000ca9a:	002b      	movs	r3, r5
1000ca9c:	40a3      	lsls	r3, r4
1000ca9e:	421f      	tst	r7, r3
1000caa0:	d00c      	beq.n	1000cabc <gpio_port1_isr_handler+0x48>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000caa2:	6cb2      	ldr	r2, [r6, #72]	; 0x48
1000caa4:	b29b      	uxth	r3, r3
1000caa6:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000caa8:	464b      	mov	r3, r9
1000caaa:	5af3      	ldrh	r3, [r6, r3]
1000caac:	4123      	asrs	r3, r4
1000caae:	421d      	tst	r5, r3
1000cab0:	d004      	beq.n	1000cabc <gpio_port1_isr_handler+0x48>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000cab2:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000cab4:	5af3      	ldrh	r3, [r6, r3]
1000cab6:	4123      	asrs	r3, r4
1000cab8:	421d      	tst	r5, r3
1000caba:	d107      	bne.n	1000cacc <gpio_port1_isr_handler+0x58>
1000cabc:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000cabe:	2c10      	cmp	r4, #16
1000cac0:	d009      	beq.n	1000cad6 <gpio_port1_isr_handler+0x62>
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000cac2:	4643      	mov	r3, r8
1000cac4:	2b00      	cmp	r3, #0
1000cac6:	d0e8      	beq.n	1000ca9a <gpio_port1_isr_handler+0x26>
			aon_handle_ext_wakeup_isr();
1000cac8:	47d0      	blx	sl
1000caca:	e7e6      	b.n	1000ca9a <gpio_port1_isr_handler+0x26>
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000cacc:	3412      	adds	r4, #18
1000cace:	00a4      	lsls	r4, r4, #2
1000cad0:	1934      	adds	r4, r6, r4
1000cad2:	6863      	ldr	r3, [r4, #4]
1000cad4:	4798      	blx	r3
1000cad6:	2180      	movs	r1, #128	; 0x80
1000cad8:	23c0      	movs	r3, #192	; 0xc0
1000cada:	4a06      	ldr	r2, [pc, #24]	; (1000caf4 <gpio_port1_isr_handler+0x80>)
1000cadc:	0449      	lsls	r1, r1, #17
1000cade:	005b      	lsls	r3, r3, #1
1000cae0:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000cae2:	bc1c      	pop	{r2, r3, r4}
1000cae4:	4690      	mov	r8, r2
1000cae6:	4699      	mov	r9, r3
1000cae8:	46a2      	mov	sl, r4
1000caea:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000caec:	1001cfa0 	.word	0x1001cfa0
1000caf0:	0001bc51 	.word	0x0001bc51
1000caf4:	e000e100 	.word	0xe000e100

1000caf8 <gpio_port2_isr_handler>:
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000caf8:	2390      	movs	r3, #144	; 0x90

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000cafa:	2280      	movs	r2, #128	; 0x80
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000cafc:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000cafe:	491a      	ldr	r1, [pc, #104]	; (1000cb68 <gpio_port2_isr_handler+0x70>)

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000cb00:	0152      	lsls	r2, r2, #5
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000cb02:	58c8      	ldr	r0, [r1, r3]
1000cb04:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000cb06:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000cb08:	4213      	tst	r3, r2
1000cb0a:	d110      	bne.n	1000cb2e <gpio_port2_isr_handler+0x36>
1000cb0c:	2280      	movs	r2, #128	; 0x80
1000cb0e:	0192      	lsls	r2, r2, #6
1000cb10:	4213      	tst	r3, r2
1000cb12:	d120      	bne.n	1000cb56 <gpio_port2_isr_handler+0x5e>
1000cb14:	2280      	movs	r2, #128	; 0x80
1000cb16:	01d2      	lsls	r2, r2, #7
1000cb18:	4213      	tst	r3, r2
1000cb1a:	d11e      	bne.n	1000cb5a <gpio_port2_isr_handler+0x62>
1000cb1c:	0bdb      	lsrs	r3, r3, #15
1000cb1e:	d11e      	bne.n	1000cb5e <gpio_port2_isr_handler+0x66>
1000cb20:	2180      	movs	r1, #128	; 0x80
1000cb22:	23c0      	movs	r3, #192	; 0xc0
1000cb24:	4a11      	ldr	r2, [pc, #68]	; (1000cb6c <gpio_port2_isr_handler+0x74>)
1000cb26:	0489      	lsls	r1, r1, #18
1000cb28:	005b      	lsls	r3, r3, #1
1000cb2a:	50d1      	str	r1, [r2, r3]
                _gpio_instances[2].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000cb2c:	bd10      	pop	{r4, pc}
static void gpio_port2_isr_handler(void)
{
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000cb2e:	240c      	movs	r4, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000cb30:	23d6      	movs	r3, #214	; 0xd6
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000cb32:	b292      	uxth	r2, r2
1000cb34:	8702      	strh	r2, [r0, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000cb36:	5acb      	ldrh	r3, [r1, r3]
1000cb38:	2201      	movs	r2, #1
1000cb3a:	4123      	asrs	r3, r4
1000cb3c:	421a      	tst	r2, r3
1000cb3e:	d0ef      	beq.n	1000cb20 <gpio_port2_isr_handler+0x28>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000cb40:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000cb42:	5acb      	ldrh	r3, [r1, r3]
1000cb44:	4123      	asrs	r3, r4
1000cb46:	421a      	tst	r2, r3
1000cb48:	d0ea      	beq.n	1000cb20 <gpio_port2_isr_handler+0x28>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000cb4a:	3424      	adds	r4, #36	; 0x24
1000cb4c:	00a4      	lsls	r4, r4, #2
1000cb4e:	1909      	adds	r1, r1, r4
1000cb50:	684b      	ldr	r3, [r1, #4]
1000cb52:	4798      	blx	r3
1000cb54:	e7e4      	b.n	1000cb20 <gpio_port2_isr_handler+0x28>
static void gpio_port2_isr_handler(void)
{
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000cb56:	240d      	movs	r4, #13
1000cb58:	e7ea      	b.n	1000cb30 <gpio_port2_isr_handler+0x38>
1000cb5a:	240e      	movs	r4, #14
1000cb5c:	e7e8      	b.n	1000cb30 <gpio_port2_isr_handler+0x38>
1000cb5e:	2280      	movs	r2, #128	; 0x80
1000cb60:	240f      	movs	r4, #15
1000cb62:	0212      	lsls	r2, r2, #8
1000cb64:	e7e4      	b.n	1000cb30 <gpio_port2_isr_handler+0x38>
1000cb66:	46c0      	nop			; (mov r8, r8)
1000cb68:	1001cfa0 	.word	0x1001cfa0
1000cb6c:	e000e100 	.word	0xe000e100

1000cb70 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000cb70:	2300      	movs	r3, #0
	config->input_pull = GPIO_PIN_PULL_UP;
1000cb72:	2201      	movs	r2, #1
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000cb74:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000cb76:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000cb78:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000cb7a:	70c3      	strb	r3, [r0, #3]
}
1000cb7c:	4770      	bx	lr
1000cb7e:	46c0      	nop			; (mov r8, r8)

1000cb80 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000cb80:	0003      	movs	r3, r0
1000cb82:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000cb84:	2017      	movs	r0, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000cb86:	2b01      	cmp	r3, #1
1000cb88:	d92b      	bls.n	1000cbe2 <gpio_pin_set_config+0x62>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000cb8a:	2b07      	cmp	r3, #7
1000cb8c:	d82a      	bhi.n	1000cbe4 <gpio_pin_set_config+0x64>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000cb8e:	009d      	lsls	r5, r3, #2
1000cb90:	3810      	subs	r0, #16
1000cb92:	40a8      	lsls	r0, r5
1000cb94:	4c5a      	ldr	r4, [pc, #360]	; (1000cd00 <gpio_pin_set_config+0x180>)
1000cb96:	6c62      	ldr	r2, [r4, #68]	; 0x44
1000cb98:	4382      	bics	r2, r0
1000cb9a:	6462      	str	r2, [r4, #68]	; 0x44
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000cb9c:	001a      	movs	r2, r3
1000cb9e:	3a1d      	subs	r2, #29
1000cba0:	2a02      	cmp	r2, #2
1000cba2:	d834      	bhi.n	1000cc0e <gpio_pin_set_config+0x8e>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000cba4:	241f      	movs	r4, #31
1000cba6:	4d57      	ldr	r5, [pc, #348]	; (1000cd04 <gpio_pin_set_config+0x184>)
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000cba8:	784a      	ldrb	r2, [r1, #1]
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000cbaa:	7d28      	ldrb	r0, [r5, #20]
1000cbac:	1ae4      	subs	r4, r4, r3
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000cbae:	2a01      	cmp	r2, #1
1000cbb0:	d063      	beq.n	1000cc7a <gpio_pin_set_config+0xfa>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000cbb2:	2201      	movs	r2, #1
1000cbb4:	40a2      	lsls	r2, r4
1000cbb6:	4302      	orrs	r2, r0
1000cbb8:	b2d2      	uxtb	r2, r2
1000cbba:	752a      	strb	r2, [r5, #20]
			}
			if (config->aon_wakeup) {
1000cbbc:	78ca      	ldrb	r2, [r1, #3]
1000cbbe:	2a00      	cmp	r2, #0
1000cbc0:	d023      	beq.n	1000cc0a <gpio_pin_set_config+0x8a>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000cbc2:	201f      	movs	r0, #31
1000cbc4:	1ac0      	subs	r0, r0, r3
1000cbc6:	2301      	movs	r3, #1
1000cbc8:	0080      	lsls	r0, r0, #2
1000cbca:	4083      	lsls	r3, r0
1000cbcc:	494d      	ldr	r1, [pc, #308]	; (1000cd04 <gpio_pin_set_config+0x184>)
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000cbce:	2000      	movs	r0, #0
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000cbd0:	880a      	ldrh	r2, [r1, #0]
1000cbd2:	4313      	orrs	r3, r2
1000cbd4:	b29b      	uxth	r3, r3
1000cbd6:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000cbd8:	2302      	movs	r3, #2
1000cbda:	4a4b      	ldr	r2, [pc, #300]	; (1000cd08 <gpio_pin_set_config+0x188>)
1000cbdc:	7811      	ldrb	r1, [r2, #0]
1000cbde:	430b      	orrs	r3, r1
1000cbe0:	7013      	strb	r3, [r2, #0]
				}
			}
		}
	}
	return status;
}
1000cbe2:	bd70      	pop	{r4, r5, r6, pc}
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 15) {
1000cbe4:	2b0f      	cmp	r3, #15
1000cbe6:	d93e      	bls.n	1000cc66 <gpio_pin_set_config+0xe6>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 23) {
1000cbe8:	2b17      	cmp	r3, #23
1000cbea:	d84a      	bhi.n	1000cc82 <gpio_pin_set_config+0x102>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000cbec:	2207      	movs	r2, #7
1000cbee:	0014      	movs	r4, r2
1000cbf0:	401c      	ands	r4, r3
1000cbf2:	00a4      	lsls	r4, r4, #2
1000cbf4:	40a2      	lsls	r2, r4
1000cbf6:	4d42      	ldr	r5, [pc, #264]	; (1000cd00 <gpio_pin_set_config+0x180>)
1000cbf8:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
1000cbfa:	4390      	bics	r0, r2
1000cbfc:	64e8      	str	r0, [r5, #76]	; 0x4c
1000cbfe:	e7cd      	b.n	1000cb9c <gpio_pin_set_config+0x1c>
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000cc00:	4003      	ands	r3, r0
1000cc02:	409a      	lsls	r2, r3
1000cc04:	4b41      	ldr	r3, [pc, #260]	; (1000cd0c <gpio_pin_set_config+0x18c>)
1000cc06:	b292      	uxth	r2, r2
1000cc08:	821a      	strh	r2, [r3, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000cc0a:	2000      	movs	r0, #0
1000cc0c:	e7e9      	b.n	1000cbe2 <gpio_pin_set_config+0x62>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000cc0e:	780a      	ldrb	r2, [r1, #0]
1000cc10:	2a00      	cmp	r2, #0
1000cc12:	d11a      	bne.n	1000cc4a <gpio_pin_set_config+0xca>
				if(gpio_pin < 16) {
1000cc14:	2b0f      	cmp	r3, #15
1000cc16:	d849      	bhi.n	1000ccac <gpio_pin_set_config+0x12c>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000cc18:	3201      	adds	r2, #1
1000cc1a:	409a      	lsls	r2, r3
1000cc1c:	483c      	ldr	r0, [pc, #240]	; (1000cd10 <gpio_pin_set_config+0x190>)
1000cc1e:	b292      	uxth	r2, r2
1000cc20:	8282      	strh	r2, [r0, #20]
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000cc22:	784a      	ldrb	r2, [r1, #1]
1000cc24:	2a01      	cmp	r2, #1
1000cc26:	d063      	beq.n	1000ccf0 <gpio_pin_set_config+0x170>
1000cc28:	2a00      	cmp	r2, #0
1000cc2a:	d050      	beq.n	1000ccce <gpio_pin_set_config+0x14e>
1000cc2c:	2a02      	cmp	r2, #2
1000cc2e:	d15d      	bne.n	1000ccec <gpio_pin_set_config+0x16c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000cc30:	2101      	movs	r1, #1
1000cc32:	4099      	lsls	r1, r3
1000cc34:	4a32      	ldr	r2, [pc, #200]	; (1000cd00 <gpio_pin_set_config+0x180>)
1000cc36:	000b      	movs	r3, r1
1000cc38:	6d50      	ldr	r0, [r2, #84]	; 0x54
1000cc3a:	0001      	movs	r1, r0
1000cc3c:	4319      	orrs	r1, r3
1000cc3e:	6551      	str	r1, [r2, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000cc40:	6d11      	ldr	r1, [r2, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000cc42:	2000      	movs	r0, #0
							break;
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000cc44:	4399      	bics	r1, r3
1000cc46:	6511      	str	r1, [r2, #80]	; 0x50
							break;
1000cc48:	e7cb      	b.n	1000cbe2 <gpio_pin_set_config+0x62>
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000cc4a:	2a01      	cmp	r2, #1
1000cc4c:	d1dd      	bne.n	1000cc0a <gpio_pin_set_config+0x8a>
				if (gpio_pin < 16) {
1000cc4e:	2b0f      	cmp	r3, #15
1000cc50:	d946      	bls.n	1000cce0 <gpio_pin_set_config+0x160>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000cc52:	200f      	movs	r0, #15
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000cc54:	2b1f      	cmp	r3, #31
1000cc56:	d9d3      	bls.n	1000cc00 <gpio_pin_set_config+0x80>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000cc58:	4003      	ands	r3, r0
1000cc5a:	409a      	lsls	r2, r3
1000cc5c:	4b2d      	ldr	r3, [pc, #180]	; (1000cd14 <gpio_pin_set_config+0x194>)
1000cc5e:	b292      	uxth	r2, r2
1000cc60:	821a      	strh	r2, [r3, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000cc62:	2000      	movs	r0, #0
1000cc64:	e7bd      	b.n	1000cbe2 <gpio_pin_set_config+0x62>
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 15) {
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000cc66:	2207      	movs	r2, #7
1000cc68:	0014      	movs	r4, r2
1000cc6a:	401c      	ands	r4, r3
1000cc6c:	00a4      	lsls	r4, r4, #2
1000cc6e:	40a2      	lsls	r2, r4
1000cc70:	4d23      	ldr	r5, [pc, #140]	; (1000cd00 <gpio_pin_set_config+0x180>)
1000cc72:	6ca8      	ldr	r0, [r5, #72]	; 0x48
1000cc74:	4390      	bics	r0, r2
1000cc76:	64a8      	str	r0, [r5, #72]	; 0x48
1000cc78:	e790      	b.n	1000cb9c <gpio_pin_set_config+0x1c>
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000cc7a:	40a2      	lsls	r2, r4
1000cc7c:	4390      	bics	r0, r2
1000cc7e:	7528      	strb	r0, [r5, #20]
1000cc80:	e79c      	b.n	1000cbbc <gpio_pin_set_config+0x3c>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 15) {
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (gpio_pin <= 23) {
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000cc82:	001a      	movs	r2, r3
1000cc84:	3a2c      	subs	r2, #44	; 0x2c
1000cc86:	b2d0      	uxtb	r0, r2
1000cc88:	2803      	cmp	r0, #3
1000cc8a:	d900      	bls.n	1000cc8e <gpio_pin_set_config+0x10e>
1000cc8c:	e786      	b.n	1000cb9c <gpio_pin_set_config+0x1c>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000cc8e:	2601      	movs	r6, #1
1000cc90:	2482      	movs	r4, #130	; 0x82
1000cc92:	4096      	lsls	r6, r2
1000cc94:	4d1b      	ldr	r5, [pc, #108]	; (1000cd04 <gpio_pin_set_config+0x184>)
1000cc96:	00e4      	lsls	r4, r4, #3
1000cc98:	5d28      	ldrb	r0, [r5, r4]
1000cc9a:	5d2a      	ldrb	r2, [r5, r4]
1000cc9c:	0700      	lsls	r0, r0, #28
1000cc9e:	0f00      	lsrs	r0, r0, #28
1000cca0:	43b0      	bics	r0, r6
1000cca2:	260f      	movs	r6, #15
1000cca4:	43b2      	bics	r2, r6
1000cca6:	4302      	orrs	r2, r0
1000cca8:	552a      	strb	r2, [r5, r4]
1000ccaa:	e777      	b.n	1000cb9c <gpio_pin_set_config+0x1c>
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000ccac:	200f      	movs	r0, #15
1000ccae:	4018      	ands	r0, r3
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000ccb0:	2b1f      	cmp	r3, #31
1000ccb2:	d805      	bhi.n	1000ccc0 <gpio_pin_set_config+0x140>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000ccb4:	2201      	movs	r2, #1
1000ccb6:	4082      	lsls	r2, r0
1000ccb8:	4814      	ldr	r0, [pc, #80]	; (1000cd0c <gpio_pin_set_config+0x18c>)
1000ccba:	b292      	uxth	r2, r2
1000ccbc:	8282      	strh	r2, [r0, #20]
1000ccbe:	e7b0      	b.n	1000cc22 <gpio_pin_set_config+0xa2>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000ccc0:	2301      	movs	r3, #1
1000ccc2:	4083      	lsls	r3, r0
1000ccc4:	4a13      	ldr	r2, [pc, #76]	; (1000cd14 <gpio_pin_set_config+0x194>)
1000ccc6:	b29b      	uxth	r3, r3
1000ccc8:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000ccca:	2000      	movs	r0, #0
1000cccc:	e789      	b.n	1000cbe2 <gpio_pin_set_config+0x62>
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000ccce:	2101      	movs	r1, #1
1000ccd0:	4099      	lsls	r1, r3
1000ccd2:	000b      	movs	r3, r1
1000ccd4:	480a      	ldr	r0, [pc, #40]	; (1000cd00 <gpio_pin_set_config+0x180>)
1000ccd6:	6d02      	ldr	r2, [r0, #80]	; 0x50
1000ccd8:	4313      	orrs	r3, r2
1000ccda:	6503      	str	r3, [r0, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000ccdc:	2000      	movs	r0, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000ccde:	e780      	b.n	1000cbe2 <gpio_pin_set_config+0x62>
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000cce0:	409a      	lsls	r2, r3
1000cce2:	4b0b      	ldr	r3, [pc, #44]	; (1000cd10 <gpio_pin_set_config+0x190>)
1000cce4:	b292      	uxth	r2, r2
1000cce6:	821a      	strh	r2, [r3, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000cce8:	2000      	movs	r0, #0
1000ccea:	e77a      	b.n	1000cbe2 <gpio_pin_set_config+0x62>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000ccec:	2017      	movs	r0, #23
1000ccee:	e778      	b.n	1000cbe2 <gpio_pin_set_config+0x62>
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000ccf0:	4803      	ldr	r0, [pc, #12]	; (1000cd00 <gpio_pin_set_config+0x180>)
1000ccf2:	409a      	lsls	r2, r3
1000ccf4:	6d01      	ldr	r1, [r0, #80]	; 0x50
1000ccf6:	000b      	movs	r3, r1
1000ccf8:	4393      	bics	r3, r2
1000ccfa:	6503      	str	r3, [r0, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000ccfc:	2000      	movs	r0, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000ccfe:	e770      	b.n	1000cbe2 <gpio_pin_set_config+0x62>
1000cd00:	4000b000 	.word	0x4000b000
1000cd04:	4000f000 	.word	0x4000f000
1000cd08:	4000e000 	.word	0x4000e000
1000cd0c:	40011000 	.word	0x40011000
1000cd10:	40010000 	.word	0x40010000
1000cd14:	40013000 	.word	0x40013000

1000cd18 <gpio_pinmux_cofiguration>:
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;

	pinmux_sel &= 0xFF;
1000cd18:	23ff      	movs	r3, #255	; 0xff
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000cd1a:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000cd1c:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000cd1e:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000cd20:	2807      	cmp	r0, #7
1000cd22:	d80e      	bhi.n	1000cd42 <gpio_pinmux_cofiguration+0x2a>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000cd24:	2407      	movs	r4, #7
1000cd26:	0086      	lsls	r6, r0, #2
1000cd28:	40b4      	lsls	r4, r6
1000cd2a:	4b31      	ldr	r3, [pc, #196]	; (1000cdf0 <gpio_pinmux_cofiguration+0xd8>)
1000cd2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
1000cd2e:	43a2      	bics	r2, r4
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000cd30:	000c      	movs	r4, r1
1000cd32:	40b4      	lsls	r4, r6
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;

	pinmux_sel &= 0xFF;

	if (gpio_pin <= 7) {
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000cd34:	645a      	str	r2, [r3, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000cd36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
1000cd38:	4322      	orrs	r2, r4
1000cd3a:	645a      	str	r2, [r3, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000cd3c:	2901      	cmp	r1, #1
1000cd3e:	d036      	beq.n	1000cdae <gpio_pinmux_cofiguration+0x96>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	}
}
1000cd40:	bd70      	pop	{r4, r5, r6, pc}
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	} else if (gpio_pin <= 15) {
1000cd42:	280f      	cmp	r0, #15
1000cd44:	d816      	bhi.n	1000cd74 <gpio_pinmux_cofiguration+0x5c>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000cd46:	2407      	movs	r4, #7
1000cd48:	0022      	movs	r2, r4
1000cd4a:	4002      	ands	r2, r0
1000cd4c:	0092      	lsls	r2, r2, #2
1000cd4e:	4094      	lsls	r4, r2
1000cd50:	4b27      	ldr	r3, [pc, #156]	; (1000cdf0 <gpio_pinmux_cofiguration+0xd8>)
1000cd52:	6c9e      	ldr	r6, [r3, #72]	; 0x48
1000cd54:	43a6      	bics	r6, r4
1000cd56:	649e      	str	r6, [r3, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000cd58:	000e      	movs	r6, r1
1000cd5a:	4096      	lsls	r6, r2
1000cd5c:	0032      	movs	r2, r6
1000cd5e:	6c9c      	ldr	r4, [r3, #72]	; 0x48
1000cd60:	4322      	orrs	r2, r4
1000cd62:	649a      	str	r2, [r3, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000cd64:	2901      	cmp	r1, #1
1000cd66:	d1eb      	bne.n	1000cd40 <gpio_pinmux_cofiguration+0x28>
			if (gpio_pin <= 11) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000cd68:	31a8      	adds	r1, #168	; 0xa8
		}
	} else if (gpio_pin <= 15) {
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 11) {
1000cd6a:	280b      	cmp	r0, #11
1000cd6c:	d93e      	bls.n	1000cdec <gpio_pinmux_cofiguration+0xd4>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000cd6e:	21d6      	movs	r1, #214	; 0xd6
1000cd70:	0049      	lsls	r1, r1, #1
1000cd72:	e020      	b.n	1000cdb6 <gpio_pinmux_cofiguration+0x9e>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			}
		}
	} else if (gpio_pin <= 23) {
1000cd74:	2817      	cmp	r0, #23
1000cd76:	d8e3      	bhi.n	1000cd40 <gpio_pinmux_cofiguration+0x28>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000cd78:	2407      	movs	r4, #7
1000cd7a:	0022      	movs	r2, r4
1000cd7c:	4002      	ands	r2, r0
1000cd7e:	0092      	lsls	r2, r2, #2
1000cd80:	4094      	lsls	r4, r2
1000cd82:	4b1b      	ldr	r3, [pc, #108]	; (1000cdf0 <gpio_pinmux_cofiguration+0xd8>)
1000cd84:	6cde      	ldr	r6, [r3, #76]	; 0x4c
1000cd86:	43a6      	bics	r6, r4
1000cd88:	64de      	str	r6, [r3, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000cd8a:	000e      	movs	r6, r1
1000cd8c:	4096      	lsls	r6, r2
1000cd8e:	0032      	movs	r2, r6
1000cd90:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
1000cd92:	4322      	orrs	r2, r4
1000cd94:	64da      	str	r2, [r3, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000cd96:	2901      	cmp	r1, #1
1000cd98:	d1d2      	bne.n	1000cd40 <gpio_pinmux_cofiguration+0x28>
			if (gpio_pin <= 19) {
1000cd9a:	2813      	cmp	r0, #19
1000cd9c:	d925      	bls.n	1000cdea <gpio_pinmux_cofiguration+0xd2>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000cd9e:	2403      	movs	r4, #3
1000cda0:	22da      	movs	r2, #218	; 0xda
1000cda2:	4020      	ands	r0, r4
1000cda4:	0052      	lsls	r2, r2, #1
1000cda6:	5899      	ldr	r1, [r3, r2]
1000cda8:	00c0      	lsls	r0, r0, #3
1000cdaa:	343c      	adds	r4, #60	; 0x3c
1000cdac:	e015      	b.n	1000cdda <gpio_pinmux_cofiguration+0xc2>

	if (gpio_pin <= 7) {
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 3) {
1000cdae:	2803      	cmp	r0, #3
1000cdb0:	d90e      	bls.n	1000cdd0 <gpio_pinmux_cofiguration+0xb8>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000cdb2:	21d2      	movs	r1, #210	; 0xd2
1000cdb4:	0049      	lsls	r1, r1, #1
	} else if (gpio_pin <= 23) {
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000cdb6:	2203      	movs	r2, #3
1000cdb8:	4010      	ands	r0, r2
1000cdba:	00c0      	lsls	r0, r0, #3
1000cdbc:	323c      	adds	r2, #60	; 0x3c
1000cdbe:	4082      	lsls	r2, r0
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000cdc0:	4085      	lsls	r5, r0
	} else if (gpio_pin <= 23) {
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000cdc2:	585c      	ldr	r4, [r3, r1]
1000cdc4:	4394      	bics	r4, r2
1000cdc6:	505c      	str	r4, [r3, r1]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000cdc8:	585a      	ldr	r2, [r3, r1]
1000cdca:	4315      	orrs	r5, r2
1000cdcc:	505d      	str	r5, [r3, r1]
1000cdce:	e7b7      	b.n	1000cd40 <gpio_pinmux_cofiguration+0x28>
	if (gpio_pin <= 7) {
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 3) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000cdd0:	22d0      	movs	r2, #208	; 0xd0
1000cdd2:	243f      	movs	r4, #63	; 0x3f
1000cdd4:	0052      	lsls	r2, r2, #1
1000cdd6:	5899      	ldr	r1, [r3, r2]
1000cdd8:	00c0      	lsls	r0, r0, #3
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000cdda:	4084      	lsls	r4, r0
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000cddc:	4085      	lsls	r5, r0
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000cdde:	43a1      	bics	r1, r4
1000cde0:	5099      	str	r1, [r3, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000cde2:	5899      	ldr	r1, [r3, r2]
1000cde4:	430d      	orrs	r5, r1
1000cde6:	509d      	str	r5, [r3, r2]
			}
		}
	}
}
1000cde8:	e7aa      	b.n	1000cd40 <gpio_pinmux_cofiguration+0x28>
	} else if (gpio_pin <= 23) {
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
		if (pinmux_sel == 0x01) {
			if (gpio_pin <= 19) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000cdea:	31b0      	adds	r1, #176	; 0xb0
1000cdec:	31ff      	adds	r1, #255	; 0xff
1000cdee:	e7e2      	b.n	1000cdb6 <gpio_pinmux_cofiguration+0x9e>
1000cdf0:	4000b000 	.word	0x4000b000

1000cdf4 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000cdf4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cdf6:	468c      	mov	ip, r1
1000cdf8:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000cdfa:	280f      	cmp	r0, #15
1000cdfc:	d904      	bls.n	1000ce08 <gpio_register_callback+0x14>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
1000cdfe:	331f      	adds	r3, #31
1000ce00:	4283      	cmp	r3, r0
1000ce02:	419b      	sbcs	r3, r3
1000ce04:	425b      	negs	r3, r3
1000ce06:	3301      	adds	r3, #1
		gpio_port = 1;
	} else {
		gpio_port = 2;
	}
	switch (callback_type) {
1000ce08:	2a01      	cmp	r2, #1
1000ce0a:	d043      	beq.n	1000ce94 <gpio_register_callback+0xa0>
1000ce0c:	2a00      	cmp	r2, #0
1000ce0e:	d033      	beq.n	1000ce78 <gpio_register_callback+0x84>
1000ce10:	2a02      	cmp	r2, #2
1000ce12:	d015      	beq.n	1000ce40 <gpio_register_callback+0x4c>
1000ce14:	2a03      	cmp	r2, #3
1000ce16:	d021      	beq.n	1000ce5c <gpio_register_callback+0x68>
1000ce18:	220f      	movs	r2, #15
1000ce1a:	4010      	ands	r0, r2
1000ce1c:	3a0e      	subs	r2, #14
1000ce1e:	4082      	lsls	r2, r0
1000ce20:	4c23      	ldr	r4, [pc, #140]	; (1000ceb0 <gpio_register_callback+0xbc>)
1000ce22:	00dd      	lsls	r5, r3, #3

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000ce24:	4661      	mov	r1, ip
1000ce26:	18eb      	adds	r3, r5, r3
1000ce28:	005d      	lsls	r5, r3, #1
1000ce2a:	1828      	adds	r0, r5, r0
1000ce2c:	0080      	lsls	r0, r0, #2
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000ce2e:	00db      	lsls	r3, r3, #3

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000ce30:	1820      	adds	r0, r4, r0
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000ce32:	18e3      	adds	r3, r4, r3
1000ce34:	3344      	adds	r3, #68	; 0x44

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000ce36:	6041      	str	r1, [r0, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000ce38:	8819      	ldrh	r1, [r3, #0]
1000ce3a:	430a      	orrs	r2, r1
1000ce3c:	801a      	strh	r2, [r3, #0]
}
1000ce3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
		break;

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000ce40:	220f      	movs	r2, #15
1000ce42:	4010      	ands	r0, r2
1000ce44:	3a0e      	subs	r2, #14
1000ce46:	4082      	lsls	r2, r0
1000ce48:	00dd      	lsls	r5, r3, #3
1000ce4a:	4c19      	ldr	r4, [pc, #100]	; (1000ceb0 <gpio_register_callback+0xbc>)
1000ce4c:	18ee      	adds	r6, r5, r3
1000ce4e:	00f6      	lsls	r6, r6, #3
1000ce50:	59a1      	ldr	r1, [r4, r6]
1000ce52:	b297      	uxth	r7, r2
1000ce54:	850f      	strh	r7, [r1, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000ce56:	59a6      	ldr	r6, [r4, r6]
1000ce58:	8637      	strh	r7, [r6, #48]	; 0x30
		break;
1000ce5a:	e7e3      	b.n	1000ce24 <gpio_register_callback+0x30>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000ce5c:	220f      	movs	r2, #15
1000ce5e:	4010      	ands	r0, r2
1000ce60:	3a0e      	subs	r2, #14
1000ce62:	4082      	lsls	r2, r0
1000ce64:	00dd      	lsls	r5, r3, #3
1000ce66:	4c12      	ldr	r4, [pc, #72]	; (1000ceb0 <gpio_register_callback+0xbc>)
1000ce68:	18ee      	adds	r6, r5, r3
1000ce6a:	00f6      	lsls	r6, r6, #3
1000ce6c:	59a1      	ldr	r1, [r4, r6]
1000ce6e:	b297      	uxth	r7, r2
1000ce70:	850f      	strh	r7, [r1, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000ce72:	59a6      	ldr	r6, [r4, r6]
1000ce74:	86b7      	strh	r7, [r6, #52]	; 0x34
		break;
1000ce76:	e7d5      	b.n	1000ce24 <gpio_register_callback+0x30>
	} else {
		gpio_port = 2;
	}
	switch (callback_type) {
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000ce78:	220f      	movs	r2, #15
1000ce7a:	4010      	ands	r0, r2
1000ce7c:	3a0e      	subs	r2, #14
1000ce7e:	4082      	lsls	r2, r0
1000ce80:	00dd      	lsls	r5, r3, #3
1000ce82:	4c0b      	ldr	r4, [pc, #44]	; (1000ceb0 <gpio_register_callback+0xbc>)
1000ce84:	18ee      	adds	r6, r5, r3
1000ce86:	00f6      	lsls	r6, r6, #3
1000ce88:	59a1      	ldr	r1, [r4, r6]
1000ce8a:	b297      	uxth	r7, r2
1000ce8c:	858f      	strh	r7, [r1, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000ce8e:	59a6      	ldr	r6, [r4, r6]
1000ce90:	86b7      	strh	r7, [r6, #52]	; 0x34
		break;
1000ce92:	e7c7      	b.n	1000ce24 <gpio_register_callback+0x30>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000ce94:	270f      	movs	r7, #15
1000ce96:	4038      	ands	r0, r7
1000ce98:	4082      	lsls	r2, r0
1000ce9a:	00dd      	lsls	r5, r3, #3
1000ce9c:	4c04      	ldr	r4, [pc, #16]	; (1000ceb0 <gpio_register_callback+0xbc>)
1000ce9e:	18ee      	adds	r6, r5, r3
1000cea0:	00f6      	lsls	r6, r6, #3
1000cea2:	59a1      	ldr	r1, [r4, r6]
1000cea4:	b297      	uxth	r7, r2
1000cea6:	858f      	strh	r7, [r1, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000cea8:	59a6      	ldr	r6, [r4, r6]
1000ceaa:	8637      	strh	r7, [r6, #48]	; 0x30
		break;
1000ceac:	e7ba      	b.n	1000ce24 <gpio_register_callback+0x30>
1000ceae:	46c0      	nop			; (mov r8, r8)
1000ceb0:	1001cfa0 	.word	0x1001cfa0

1000ceb4 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000ceb4:	b510      	push	{r4, lr}

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000ceb6:	2280      	movs	r2, #128	; 0x80
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000ceb8:	280f      	cmp	r0, #15
1000ceba:	d91b      	bls.n	1000cef4 <gpio_enable_callback+0x40>
		gpio_port = 0;
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000cebc:	281f      	cmp	r0, #31
1000cebe:	d914      	bls.n	1000ceea <gpio_enable_callback+0x36>
1000cec0:	4b0f      	ldr	r3, [pc, #60]	; (1000cf00 <gpio_enable_callback+0x4c>)
1000cec2:	0492      	lsls	r2, r2, #18
1000cec4:	601a      	str	r2, [r3, #0]
1000cec6:	2302      	movs	r3, #2
		gpio_port = 2;
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000cec8:	220f      	movs	r2, #15
1000ceca:	4010      	ands	r0, r2
1000cecc:	3a0e      	subs	r2, #14
1000cece:	4082      	lsls	r2, r0
1000ced0:	00d9      	lsls	r1, r3, #3
1000ced2:	4c0c      	ldr	r4, [pc, #48]	; (1000cf04 <gpio_enable_callback+0x50>)
1000ced4:	18cb      	adds	r3, r1, r3
1000ced6:	00db      	lsls	r3, r3, #3
1000ced8:	18e1      	adds	r1, r4, r3
1000ceda:	3146      	adds	r1, #70	; 0x46
1000cedc:	8808      	ldrh	r0, [r1, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000cede:	58e3      	ldr	r3, [r4, r3]
		gpio_port = 2;
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000cee0:	4310      	orrs	r0, r2
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000cee2:	b292      	uxth	r2, r2
		gpio_port = 2;
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000cee4:	8008      	strh	r0, [r1, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000cee6:	841a      	strh	r2, [r3, #32]
}
1000cee8:	bd10      	pop	{r4, pc}
1000ceea:	4b05      	ldr	r3, [pc, #20]	; (1000cf00 <gpio_enable_callback+0x4c>)
1000ceec:	0452      	lsls	r2, r2, #17
1000ceee:	601a      	str	r2, [r3, #0]
1000cef0:	2301      	movs	r3, #1
1000cef2:	e7e9      	b.n	1000cec8 <gpio_enable_callback+0x14>
1000cef4:	4b02      	ldr	r3, [pc, #8]	; (1000cf00 <gpio_enable_callback+0x4c>)
1000cef6:	0412      	lsls	r2, r2, #16
1000cef8:	601a      	str	r2, [r3, #0]
1000cefa:	2300      	movs	r3, #0
1000cefc:	e7e4      	b.n	1000cec8 <gpio_enable_callback+0x14>
1000cefe:	46c0      	nop			; (mov r8, r8)
1000cf00:	e000e100 	.word	0xe000e100
1000cf04:	1001cfa0 	.word	0x1001cfa0

1000cf08 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000cf08:	4a11      	ldr	r2, [pc, #68]	; (1000cf50 <gpio_init+0x48>)
1000cf0a:	b510      	push	{r4, lr}
1000cf0c:	0014      	movs	r4, r2
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000cf0e:	2100      	movs	r1, #0
1000cf10:	2000      	movs	r0, #0
1000cf12:	34d8      	adds	r4, #216	; 0xd8
1000cf14:	0013      	movs	r3, r2
1000cf16:	3b40      	subs	r3, #64	; 0x40
1000cf18:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000cf1a:	429a      	cmp	r2, r3
1000cf1c:	d1fc      	bne.n	1000cf18 <gpio_init+0x10>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000cf1e:	8050      	strh	r0, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000cf20:	8010      	strh	r0, [r2, #0]
1000cf22:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000cf24:	42a2      	cmp	r2, r4
1000cf26:	d1f5      	bne.n	1000cf14 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000cf28:	4b0a      	ldr	r3, [pc, #40]	; (1000cf54 <gpio_init+0x4c>)
1000cf2a:	4a0b      	ldr	r2, [pc, #44]	; (1000cf58 <gpio_init+0x50>)
	_gpio_instances[1].hw = (void *)GPIO1;
	_gpio_instances[2].hw = (void *)GPIO2;
1000cf2c:	490b      	ldr	r1, [pc, #44]	; (1000cf5c <gpio_init+0x54>)
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000cf2e:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000cf30:	4a0b      	ldr	r2, [pc, #44]	; (1000cf60 <gpio_init+0x58>)
	_gpio_instances[2].hw = (void *)GPIO2;
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000cf32:	4c0c      	ldr	r4, [pc, #48]	; (1000cf64 <gpio_init+0x5c>)
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
	_gpio_instances[1].hw = (void *)GPIO1;
1000cf34:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000cf36:	2290      	movs	r2, #144	; 0x90
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000cf38:	2027      	movs	r0, #39	; 0x27
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
	_gpio_instances[1].hw = (void *)GPIO1;
	_gpio_instances[2].hw = (void *)GPIO2;
1000cf3a:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000cf3c:	490a      	ldr	r1, [pc, #40]	; (1000cf68 <gpio_init+0x60>)
1000cf3e:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000cf40:	490a      	ldr	r1, [pc, #40]	; (1000cf6c <gpio_init+0x64>)
1000cf42:	2028      	movs	r0, #40	; 0x28
1000cf44:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000cf46:	490a      	ldr	r1, [pc, #40]	; (1000cf70 <gpio_init+0x68>)
1000cf48:	2029      	movs	r0, #41	; 0x29
1000cf4a:	47a0      	blx	r4
}
1000cf4c:	bd10      	pop	{r4, pc}
1000cf4e:	46c0      	nop			; (mov r8, r8)
1000cf50:	1001cfe4 	.word	0x1001cfe4
1000cf54:	1001cfa0 	.word	0x1001cfa0
1000cf58:	40010000 	.word	0x40010000
1000cf5c:	40013000 	.word	0x40013000
1000cf60:	40011000 	.word	0x40011000
1000cf64:	1000d8f1 	.word	0x1000d8f1
1000cf68:	1000ca1d 	.word	0x1000ca1d
1000cf6c:	1000ca75 	.word	0x1000ca75
1000cf70:	1000caf9 	.word	0x1000caf9

1000cf74 <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000cf74:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cf76:	464f      	mov	r7, r9
1000cf78:	4646      	mov	r6, r8
1000cf7a:	b4c0      	push	{r6, r7}
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
1000cf7c:	884d      	ldrh	r5, [r1, #2]
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000cf7e:	4681      	mov	r9, r0
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000cf80:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
1000cf82:	2d00      	cmp	r5, #0
1000cf84:	d104      	bne.n	1000cf90 <_i2c_master_read_packet+0x1c>
	if (!module->no_stop) {
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
}
1000cf86:	0018      	movs	r0, r3
1000cf88:	bc0c      	pop	{r2, r3}
1000cf8a:	4690      	mov	r8, r2
1000cf8c:	4699      	mov	r9, r3
1000cf8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000cf90:	2428      	movs	r4, #40	; 0x28
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000cf92:	6802      	ldr	r2, [r0, #0]
1000cf94:	5d13      	ldrb	r3, [r2, r4]
1000cf96:	07db      	lsls	r3, r3, #31
1000cf98:	d4fc      	bmi.n	1000cf94 <_i2c_master_read_packet+0x20>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
1000cf9a:	2301      	movs	r3, #1
1000cf9c:	2434      	movs	r4, #52	; 0x34
1000cf9e:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000cfa0:	3c14      	subs	r4, #20
1000cfa2:	5513      	strb	r3, [r2, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
1000cfa4:	2402      	movs	r4, #2
1000cfa6:	880b      	ldrh	r3, [r1, #0]
1000cfa8:	34ff      	adds	r4, #255	; 0xff
1000cfaa:	005b      	lsls	r3, r3, #1
1000cfac:	4323      	orrs	r3, r4
1000cfae:	b29b      	uxth	r3, r3
1000cfb0:	8013      	strh	r3, [r2, #0]
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
1000cfb2:	2301      	movs	r3, #1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
1000cfb4:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
1000cfb6:	4698      	mov	r8, r3
1000cfb8:	4640      	mov	r0, r8
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
1000cfba:	7b13      	ldrb	r3, [r2, #12]
1000cfbc:	b2db      	uxtb	r3, r3
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
1000cfbe:	4218      	tst	r0, r3
1000cfc0:	d006      	beq.n	1000cfd0 <_i2c_master_read_packet+0x5c>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
1000cfc2:	7910      	ldrb	r0, [r2, #4]
1000cfc4:	1c67      	adds	r7, r4, #1
1000cfc6:	4684      	mov	ip, r0
1000cfc8:	4666      	mov	r6, ip
1000cfca:	6848      	ldr	r0, [r1, #4]
1000cfcc:	5506      	strb	r6, [r0, r4]
1000cfce:	b2bc      	uxth	r4, r7
	} while (counter < length); 
1000cfd0:	42ac      	cmp	r4, r5
1000cfd2:	d3f1      	bcc.n	1000cfb8 <_i2c_master_read_packet+0x44>

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000cfd4:	06db      	lsls	r3, r3, #27
1000cfd6:	d403      	bmi.n	1000cfe0 <_i2c_master_read_packet+0x6c>
1000cfd8:	2110      	movs	r1, #16
		status = i2c_module->TRANSMIT_STATUS.reg;
1000cfda:	7a13      	ldrb	r3, [r2, #8]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000cfdc:	4219      	tst	r1, r3
1000cfde:	d0fc      	beq.n	1000cfda <_i2c_master_read_packet+0x66>
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
1000cfe0:	464b      	mov	r3, r9
1000cfe2:	7959      	ldrb	r1, [r3, #5]
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
1000cfe4:	2300      	movs	r3, #0
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
1000cfe6:	2900      	cmp	r1, #0
1000cfe8:	d1cd      	bne.n	1000cf86 <_i2c_master_read_packet+0x12>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000cfea:	3120      	adds	r1, #32
1000cfec:	5453      	strb	r3, [r2, r1]
1000cfee:	e7ca      	b.n	1000cf86 <_i2c_master_read_packet+0x12>

1000cff0 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000cff0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cff2:	4684      	mov	ip, r0
1000cff4:	2428      	movs	r4, #40	; 0x28
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
1000cff6:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
1000cff8:	884e      	ldrh	r6, [r1, #2]
1000cffa:	5d13      	ldrb	r3, [r2, r4]
1000cffc:	07db      	lsls	r3, r3, #31
1000cffe:	d4fc      	bmi.n	1000cffa <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
1000d000:	2301      	movs	r3, #1
1000d002:	2434      	movs	r4, #52	; 0x34
1000d004:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000d006:	3c14      	subs	r4, #20
1000d008:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
1000d00a:	880b      	ldrh	r3, [r1, #0]
1000d00c:	34e0      	adds	r4, #224	; 0xe0
1000d00e:	005b      	lsls	r3, r3, #1
1000d010:	4323      	orrs	r3, r4
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
        //printf(".");
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
1000d012:	2501      	movs	r5, #1
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
1000d014:	2400      	movs	r4, #0

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
1000d016:	b29b      	uxth	r3, r3
1000d018:	8013      	strh	r3, [r2, #0]
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
        //printf(".");
		status = i2c_module->TRANSMIT_STATUS.reg;
1000d01a:	7a13      	ldrb	r3, [r2, #8]
1000d01c:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
1000d01e:	421d      	tst	r5, r3
1000d020:	d004      	beq.n	1000d02c <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
1000d022:	6848      	ldr	r0, [r1, #4]
1000d024:	1c67      	adds	r7, r4, #1
1000d026:	5d04      	ldrb	r4, [r0, r4]
1000d028:	8014      	strh	r4, [r2, #0]
1000d02a:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
1000d02c:	42b4      	cmp	r4, r6
1000d02e:	d3f4      	bcc.n	1000d01a <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000d030:	06db      	lsls	r3, r3, #27
1000d032:	d403      	bmi.n	1000d03c <_i2c_master_write_packet+0x4c>
1000d034:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
1000d036:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000d038:	4219      	tst	r1, r3
1000d03a:	d0fc      	beq.n	1000d036 <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
1000d03c:	4663      	mov	r3, ip
1000d03e:	795b      	ldrb	r3, [r3, #5]
1000d040:	2b00      	cmp	r3, #0
1000d042:	d101      	bne.n	1000d048 <_i2c_master_write_packet+0x58>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000d044:	2120      	movs	r1, #32
1000d046:	5453      	strb	r3, [r2, r1]
	}

	return STATUS_OK;
}
1000d048:	2000      	movs	r0, #0
1000d04a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000d04c <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
1000d04c:	2303      	movs	r3, #3
1000d04e:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
1000d050:	330d      	adds	r3, #13
1000d052:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
1000d054:	3b08      	subs	r3, #8
1000d056:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
1000d058:	3301      	adds	r3, #1
1000d05a:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
1000d05c:	3b07      	subs	r3, #7
1000d05e:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
1000d060:	6103      	str	r3, [r0, #16]
}
1000d062:	4770      	bx	lr

1000d064 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
1000d064:	b570      	push	{r4, r5, r6, lr}
1000d066:	0015      	movs	r5, r2
1000d068:	0004      	movs	r4, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
1000d06a:	6001      	str	r1, [r0, #0]
1000d06c:	2228      	movs	r2, #40	; 0x28

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
1000d06e:	2d00      	cmp	r5, #0
1000d070:	d00d      	beq.n	1000d08e <i2c_master_init+0x2a>
1000d072:	5c8b      	ldrb	r3, [r1, r2]
1000d074:	07db      	lsls	r3, r3, #31
1000d076:	0fdb      	lsrs	r3, r3, #31
1000d078:	b2db      	uxtb	r3, r3
1000d07a:	2b00      	cmp	r3, #0
1000d07c:	d1f9      	bne.n	1000d072 <i2c_master_init+0xe>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
1000d07e:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
1000d080:	6823      	ldr	r3, [r4, #0]
1000d082:	4a0f      	ldr	r2, [pc, #60]	; (1000d0c0 <i2c_master_init+0x5c>)
1000d084:	4293      	cmp	r3, r2
1000d086:	d017      	beq.n	1000d0b8 <i2c_master_init+0x54>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
1000d088:	4a0e      	ldr	r2, [pc, #56]	; (1000d0c4 <i2c_master_init+0x60>)
1000d08a:	4293      	cmp	r3, r2
1000d08c:	d001      	beq.n	1000d092 <i2c_master_init+0x2e>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
1000d08e:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
1000d090:	bd70      	pop	{r4, r5, r6, pc}

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
1000d092:	2019      	movs	r0, #25
1000d094:	4b0c      	ldr	r3, [pc, #48]	; (1000d0c8 <i2c_master_init+0x64>)
1000d096:	4798      	blx	r3
	Assert(config);

	I2c *const i2c_module = (module->hw);

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
1000d098:	8929      	ldrh	r1, [r5, #8]
1000d09a:	7928      	ldrb	r0, [r5, #4]
1000d09c:	4e0b      	ldr	r6, [pc, #44]	; (1000d0cc <i2c_master_init+0x68>)
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
1000d09e:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
1000d0a0:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
1000d0a2:	7b28      	ldrb	r0, [r5, #12]
1000d0a4:	8a29      	ldrh	r1, [r5, #16]
1000d0a6:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000d0a8:	782b      	ldrb	r3, [r5, #0]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
1000d0aa:	2000      	movs	r0, #0

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000d0ac:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000d0ae:	886b      	ldrh	r3, [r5, #2]
1000d0b0:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
1000d0b2:	2301      	movs	r3, #1
1000d0b4:	7723      	strb	r3, [r4, #28]
1000d0b6:	e7eb      	b.n	1000d090 <i2c_master_init+0x2c>
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
1000d0b8:	4b03      	ldr	r3, [pc, #12]	; (1000d0c8 <i2c_master_init+0x64>)
1000d0ba:	2003      	movs	r0, #3
1000d0bc:	4798      	blx	r3
1000d0be:	e7eb      	b.n	1000d098 <i2c_master_init+0x34>
1000d0c0:	40003000 	.word	0x40003000
1000d0c4:	40003400 	.word	0x40003400
1000d0c8:	1000d4d9 	.word	0x1000d4d9
1000d0cc:	1000cd19 	.word	0x1000cd19

1000d0d0 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000d0d0:	0003      	movs	r3, r0
1000d0d2:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
1000d0d4:	2017      	movs	r0, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
1000d0d6:	2b00      	cmp	r3, #0
1000d0d8:	d006      	beq.n	1000d0e8 <i2c_master_read_packet_wait+0x18>
1000d0da:	2900      	cmp	r1, #0
1000d0dc:	d004      	beq.n	1000d0e8 <i2c_master_read_packet_wait+0x18>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000d0de:	2200      	movs	r2, #0

	return _i2c_master_read_packet(module, packet);
1000d0e0:	0018      	movs	r0, r3
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000d0e2:	715a      	strb	r2, [r3, #5]

	return _i2c_master_read_packet(module, packet);
1000d0e4:	4b01      	ldr	r3, [pc, #4]	; (1000d0ec <i2c_master_read_packet_wait+0x1c>)
1000d0e6:	4798      	blx	r3
}
1000d0e8:	bd10      	pop	{r4, pc}
1000d0ea:	46c0      	nop			; (mov r8, r8)
1000d0ec:	1000cf75 	.word	0x1000cf75

1000d0f0 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000d0f0:	b570      	push	{r4, r5, r6, lr}
1000d0f2:	0004      	movs	r4, r0
1000d0f4:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
1000d0f6:	2017      	movs	r0, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
1000d0f8:	2c00      	cmp	r4, #0
1000d0fa:	d00a      	beq.n	1000d112 <i2c_master_write_packet_wait+0x22>
1000d0fc:	2900      	cmp	r1, #0
1000d0fe:	d008      	beq.n	1000d112 <i2c_master_write_packet_wait+0x22>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000d100:	2300      	movs	r3, #0

    printf("!!");
1000d102:	4804      	ldr	r0, [pc, #16]	; (1000d114 <i2c_master_write_packet_wait+0x24>)
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000d104:	7163      	strb	r3, [r4, #5]

    printf("!!");
1000d106:	4b04      	ldr	r3, [pc, #16]	; (1000d118 <i2c_master_write_packet_wait+0x28>)
1000d108:	4798      	blx	r3
	return _i2c_master_write_packet(module, packet);
1000d10a:	0029      	movs	r1, r5
1000d10c:	0020      	movs	r0, r4
1000d10e:	4b03      	ldr	r3, [pc, #12]	; (1000d11c <i2c_master_write_packet_wait+0x2c>)
1000d110:	4798      	blx	r3
}
1000d112:	bd70      	pop	{r4, r5, r6, pc}
1000d114:	10019c04 	.word	0x10019c04
1000d118:	10017f15 	.word	0x10017f15
1000d11c:	1000cff1 	.word	0x1000cff1

1000d120 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000d120:	0003      	movs	r3, r0
1000d122:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
1000d124:	2017      	movs	r0, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
1000d126:	2b00      	cmp	r3, #0
1000d128:	d006      	beq.n	1000d138 <i2c_master_write_packet_wait_no_stop+0x18>
1000d12a:	2900      	cmp	r1, #0
1000d12c:	d004      	beq.n	1000d138 <i2c_master_write_packet_wait_no_stop+0x18>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
1000d12e:	2201      	movs	r2, #1

	return _i2c_master_write_packet(module, packet);
1000d130:	0018      	movs	r0, r3
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
1000d132:	715a      	strb	r2, [r3, #5]

	return _i2c_master_write_packet(module, packet);
1000d134:	4b01      	ldr	r3, [pc, #4]	; (1000d13c <i2c_master_write_packet_wait_no_stop+0x1c>)
1000d136:	4798      	blx	r3
}
1000d138:	bd10      	pop	{r4, pc}
1000d13a:	46c0      	nop			; (mov r8, r8)
1000d13c:	1000cff1 	.word	0x1000cff1

1000d140 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000d140:	2801      	cmp	r0, #1
1000d142:	d021      	beq.n	1000d188 <system_clock_config+0x48>
1000d144:	2800      	cmp	r0, #0
1000d146:	d016      	beq.n	1000d176 <system_clock_config+0x36>
1000d148:	2802      	cmp	r0, #2
1000d14a:	d112      	bne.n	1000d172 <system_clock_config+0x32>
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
			break;

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000d14c:	200c      	movs	r0, #12
1000d14e:	4a18      	ldr	r2, [pc, #96]	; (1000d1b0 <system_clock_config+0x70>)
1000d150:	6993      	ldr	r3, [r2, #24]
1000d152:	4383      	bics	r3, r0
1000d154:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000d156:	4a17      	ldr	r2, [pc, #92]	; (1000d1b4 <system_clock_config+0x74>)
1000d158:	4b17      	ldr	r3, [pc, #92]	; (1000d1b8 <system_clock_config+0x78>)
1000d15a:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000d15c:	2003      	movs	r0, #3
1000d15e:	4b14      	ldr	r3, [pc, #80]	; (1000d1b0 <system_clock_config+0x70>)
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000d160:	4001      	ands	r1, r0

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000d162:	699a      	ldr	r2, [r3, #24]
1000d164:	4382      	bics	r2, r0
1000d166:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000d168:	699a      	ldr	r2, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000d16a:	2000      	movs	r0, #0
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000d16c:	4311      	orrs	r1, r2
1000d16e:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000d170:	e000      	b.n	1000d174 <system_clock_config+0x34>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000d172:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000d174:	4770      	bx	lr
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000d176:	230c      	movs	r3, #12
1000d178:	4a0d      	ldr	r2, [pc, #52]	; (1000d1b0 <system_clock_config+0x70>)
1000d17a:	6990      	ldr	r0, [r2, #24]
1000d17c:	4303      	orrs	r3, r0
1000d17e:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000d180:	4a0c      	ldr	r2, [pc, #48]	; (1000d1b4 <system_clock_config+0x74>)
1000d182:	4b0d      	ldr	r3, [pc, #52]	; (1000d1b8 <system_clock_config+0x78>)
1000d184:	601a      	str	r2, [r3, #0]
			break;
1000d186:	e7e9      	b.n	1000d15c <system_clock_config+0x1c>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000d188:	2208      	movs	r2, #8
1000d18a:	4b09      	ldr	r3, [pc, #36]	; (1000d1b0 <system_clock_config+0x70>)
1000d18c:	6998      	ldr	r0, [r3, #24]
1000d18e:	4302      	orrs	r2, r0
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000d190:	2004      	movs	r0, #4
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
			break;

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000d192:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000d194:	699a      	ldr	r2, [r3, #24]
1000d196:	4382      	bics	r2, r0
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000d198:	2080      	movs	r0, #128	; 0x80
			break;

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000d19a:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000d19c:	4a07      	ldr	r2, [pc, #28]	; (1000d1bc <system_clock_config+0x7c>)
1000d19e:	0300      	lsls	r0, r0, #12
1000d1a0:	6853      	ldr	r3, [r2, #4]
1000d1a2:	4303      	orrs	r3, r0
1000d1a4:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000d1a6:	4a06      	ldr	r2, [pc, #24]	; (1000d1c0 <system_clock_config+0x80>)
1000d1a8:	4b03      	ldr	r3, [pc, #12]	; (1000d1b8 <system_clock_config+0x78>)
1000d1aa:	601a      	str	r2, [r3, #0]
			break;
1000d1ac:	e7d6      	b.n	1000d15c <system_clock_config+0x1c>
1000d1ae:	46c0      	nop			; (mov r8, r8)
1000d1b0:	4000b000 	.word	0x4000b000
1000d1b4:	018cba80 	.word	0x018cba80
1000d1b8:	1001d078 	.word	0x1001d078
1000d1bc:	4000f000 	.word	0x4000f000
1000d1c0:	001e8480 	.word	0x001e8480

1000d1c4 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000d1c4:	4b01      	ldr	r3, [pc, #4]	; (1000d1cc <system_clock_get_value+0x8>)
1000d1c6:	6818      	ldr	r0, [r3, #0]
}
1000d1c8:	4770      	bx	lr
1000d1ca:	46c0      	nop			; (mov r8, r8)
1000d1cc:	1001d078 	.word	0x1001d078

1000d1d0 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000d1d0:	b500      	push	{lr}
	switch (peripheral) {
1000d1d2:	2835      	cmp	r0, #53	; 0x35
1000d1d4:	d900      	bls.n	1000d1d8 <system_clock_peripheral_enable+0x8>
1000d1d6:	e16d      	b.n	1000d4b4 <system_clock_peripheral_enable+0x2e4>
1000d1d8:	4bb7      	ldr	r3, [pc, #732]	; (1000d4b8 <system_clock_peripheral_enable+0x2e8>)
1000d1da:	0080      	lsls	r0, r0, #2
1000d1dc:	581b      	ldr	r3, [r3, r0]
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000d1de:	4ab7      	ldr	r2, [pc, #732]	; (1000d4bc <system_clock_peripheral_enable+0x2ec>)
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
	switch (peripheral) {
1000d1e0:	469f      	mov	pc, r3
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000d1e2:	2302      	movs	r3, #2

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d1e4:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000d1e6:	7d11      	ldrb	r1, [r2, #20]
1000d1e8:	430b      	orrs	r3, r1
1000d1ea:	7513      	strb	r3, [r2, #20]
		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
1000d1ec:	bd00      	pop	{pc}
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000d1ee:	2301      	movs	r3, #1
1000d1f0:	7d11      	ldrb	r1, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d1f2:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000d1f4:	430b      	orrs	r3, r1
1000d1f6:	7513      	strb	r3, [r2, #20]
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000d1f8:	e7f8      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d1fa:	2180      	movs	r1, #128	; 0x80
1000d1fc:	6913      	ldr	r3, [r2, #16]
1000d1fe:	0409      	lsls	r1, r1, #16
1000d200:	430b      	orrs	r3, r1
1000d202:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d204:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000d206:	e7f1      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d208:	2180      	movs	r1, #128	; 0x80
1000d20a:	6913      	ldr	r3, [r2, #16]
1000d20c:	03c9      	lsls	r1, r1, #15
1000d20e:	430b      	orrs	r3, r1
1000d210:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d212:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000d214:	e7ea      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d216:	2180      	movs	r1, #128	; 0x80
1000d218:	6913      	ldr	r3, [r2, #16]
1000d21a:	0389      	lsls	r1, r1, #14
1000d21c:	430b      	orrs	r3, r1
1000d21e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d220:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000d222:	e7e3      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d224:	2180      	movs	r1, #128	; 0x80
1000d226:	6913      	ldr	r3, [r2, #16]
1000d228:	0349      	lsls	r1, r1, #13
1000d22a:	430b      	orrs	r3, r1
1000d22c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d22e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000d230:	e7dc      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d232:	2180      	movs	r1, #128	; 0x80
1000d234:	6913      	ldr	r3, [r2, #16]
1000d236:	0309      	lsls	r1, r1, #12
1000d238:	430b      	orrs	r3, r1
1000d23a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d23c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000d23e:	e7d5      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d240:	2180      	movs	r1, #128	; 0x80
1000d242:	6913      	ldr	r3, [r2, #16]
1000d244:	02c9      	lsls	r1, r1, #11
1000d246:	430b      	orrs	r3, r1
1000d248:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d24a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000d24c:	e7ce      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d24e:	2180      	movs	r1, #128	; 0x80
1000d250:	6913      	ldr	r3, [r2, #16]
1000d252:	0289      	lsls	r1, r1, #10
1000d254:	430b      	orrs	r3, r1
1000d256:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d258:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000d25a:	e7c7      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d25c:	2180      	movs	r1, #128	; 0x80
1000d25e:	6913      	ldr	r3, [r2, #16]
1000d260:	0249      	lsls	r1, r1, #9
1000d262:	430b      	orrs	r3, r1
1000d264:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d266:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000d268:	e7c0      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d26a:	2180      	movs	r1, #128	; 0x80
1000d26c:	6913      	ldr	r3, [r2, #16]
1000d26e:	0209      	lsls	r1, r1, #8
1000d270:	430b      	orrs	r3, r1
1000d272:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d274:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000d276:	e7b9      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d278:	2180      	movs	r1, #128	; 0x80
1000d27a:	6913      	ldr	r3, [r2, #16]
1000d27c:	01c9      	lsls	r1, r1, #7
1000d27e:	430b      	orrs	r3, r1
1000d280:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d282:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000d284:	e7b2      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d286:	2180      	movs	r1, #128	; 0x80
1000d288:	6913      	ldr	r3, [r2, #16]
1000d28a:	0189      	lsls	r1, r1, #6
1000d28c:	430b      	orrs	r3, r1
1000d28e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d290:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000d292:	e7ab      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d294:	2180      	movs	r1, #128	; 0x80
1000d296:	6913      	ldr	r3, [r2, #16]
1000d298:	0149      	lsls	r1, r1, #5
1000d29a:	430b      	orrs	r3, r1
1000d29c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d29e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000d2a0:	e7a4      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d2a2:	2180      	movs	r1, #128	; 0x80
1000d2a4:	6913      	ldr	r3, [r2, #16]
1000d2a6:	0109      	lsls	r1, r1, #4
1000d2a8:	430b      	orrs	r3, r1
1000d2aa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d2ac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000d2ae:	e79d      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d2b0:	2180      	movs	r1, #128	; 0x80
1000d2b2:	6913      	ldr	r3, [r2, #16]
1000d2b4:	00c9      	lsls	r1, r1, #3
1000d2b6:	430b      	orrs	r3, r1
1000d2b8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d2ba:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000d2bc:	e796      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d2be:	2180      	movs	r1, #128	; 0x80
1000d2c0:	6913      	ldr	r3, [r2, #16]
1000d2c2:	0089      	lsls	r1, r1, #2
1000d2c4:	430b      	orrs	r3, r1
1000d2c6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d2c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000d2ca:	e78f      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d2cc:	2180      	movs	r1, #128	; 0x80
1000d2ce:	6913      	ldr	r3, [r2, #16]
1000d2d0:	0049      	lsls	r1, r1, #1
1000d2d2:	430b      	orrs	r3, r1
1000d2d4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d2d6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000d2d8:	e788      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d2da:	2380      	movs	r3, #128	; 0x80
1000d2dc:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d2de:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d2e0:	430b      	orrs	r3, r1
1000d2e2:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000d2e4:	e782      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d2e6:	2340      	movs	r3, #64	; 0x40
1000d2e8:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d2ea:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d2ec:	430b      	orrs	r3, r1
1000d2ee:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000d2f0:	e77c      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d2f2:	2320      	movs	r3, #32
1000d2f4:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d2f6:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d2f8:	430b      	orrs	r3, r1
1000d2fa:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000d2fc:	e776      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d2fe:	2310      	movs	r3, #16
1000d300:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d302:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d304:	430b      	orrs	r3, r1
1000d306:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000d308:	e770      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d30a:	2308      	movs	r3, #8
1000d30c:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d30e:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d310:	430b      	orrs	r3, r1
1000d312:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000d314:	e76a      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d316:	2304      	movs	r3, #4
1000d318:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d31a:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d31c:	430b      	orrs	r3, r1
1000d31e:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000d320:	e764      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d322:	2302      	movs	r3, #2
1000d324:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d326:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d328:	430b      	orrs	r3, r1
1000d32a:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000d32c:	e75e      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d32e:	2301      	movs	r3, #1
1000d330:	6911      	ldr	r1, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d332:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000d334:	430b      	orrs	r3, r1
1000d336:	6113      	str	r3, [r2, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000d338:	e758      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d33a:	2180      	movs	r1, #128	; 0x80
1000d33c:	68d3      	ldr	r3, [r2, #12]
1000d33e:	05c9      	lsls	r1, r1, #23
1000d340:	430b      	orrs	r3, r1
1000d342:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d344:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000d346:	e751      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d348:	2180      	movs	r1, #128	; 0x80
1000d34a:	68d3      	ldr	r3, [r2, #12]
1000d34c:	0589      	lsls	r1, r1, #22
1000d34e:	430b      	orrs	r3, r1
1000d350:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d352:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000d354:	e74a      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d356:	2180      	movs	r1, #128	; 0x80
1000d358:	68d3      	ldr	r3, [r2, #12]
1000d35a:	0549      	lsls	r1, r1, #21
1000d35c:	430b      	orrs	r3, r1
1000d35e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d360:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000d362:	e743      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d364:	2180      	movs	r1, #128	; 0x80
1000d366:	68d3      	ldr	r3, [r2, #12]
1000d368:	0509      	lsls	r1, r1, #20
1000d36a:	430b      	orrs	r3, r1
1000d36c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d36e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000d370:	e73c      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d372:	2180      	movs	r1, #128	; 0x80
1000d374:	68d3      	ldr	r3, [r2, #12]
1000d376:	04c9      	lsls	r1, r1, #19
1000d378:	430b      	orrs	r3, r1
1000d37a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d37c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000d37e:	e735      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d380:	2180      	movs	r1, #128	; 0x80
1000d382:	68d3      	ldr	r3, [r2, #12]
1000d384:	0489      	lsls	r1, r1, #18
1000d386:	430b      	orrs	r3, r1
1000d388:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d38a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000d38c:	e72e      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d38e:	2180      	movs	r1, #128	; 0x80
1000d390:	68d3      	ldr	r3, [r2, #12]
1000d392:	0449      	lsls	r1, r1, #17
1000d394:	430b      	orrs	r3, r1
1000d396:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d398:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000d39a:	e727      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d39c:	2180      	movs	r1, #128	; 0x80
1000d39e:	68d3      	ldr	r3, [r2, #12]
1000d3a0:	0409      	lsls	r1, r1, #16
1000d3a2:	430b      	orrs	r3, r1
1000d3a4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d3a6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000d3a8:	e720      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d3aa:	2180      	movs	r1, #128	; 0x80
1000d3ac:	68d3      	ldr	r3, [r2, #12]
1000d3ae:	03c9      	lsls	r1, r1, #15
1000d3b0:	430b      	orrs	r3, r1
1000d3b2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d3b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000d3b6:	e719      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d3b8:	2180      	movs	r1, #128	; 0x80
1000d3ba:	68d3      	ldr	r3, [r2, #12]
1000d3bc:	0389      	lsls	r1, r1, #14
1000d3be:	430b      	orrs	r3, r1
1000d3c0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d3c2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000d3c4:	e712      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d3c6:	2180      	movs	r1, #128	; 0x80
1000d3c8:	68d3      	ldr	r3, [r2, #12]
1000d3ca:	0349      	lsls	r1, r1, #13
1000d3cc:	430b      	orrs	r3, r1
1000d3ce:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d3d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000d3d2:	e70b      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d3d4:	2180      	movs	r1, #128	; 0x80
1000d3d6:	68d3      	ldr	r3, [r2, #12]
1000d3d8:	0309      	lsls	r1, r1, #12
1000d3da:	430b      	orrs	r3, r1
1000d3dc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d3de:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000d3e0:	e704      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d3e2:	2180      	movs	r1, #128	; 0x80
1000d3e4:	68d3      	ldr	r3, [r2, #12]
1000d3e6:	02c9      	lsls	r1, r1, #11
1000d3e8:	430b      	orrs	r3, r1
1000d3ea:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d3ec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000d3ee:	e6fd      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d3f0:	2180      	movs	r1, #128	; 0x80
1000d3f2:	68d3      	ldr	r3, [r2, #12]
1000d3f4:	0289      	lsls	r1, r1, #10
1000d3f6:	430b      	orrs	r3, r1
1000d3f8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d3fa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000d3fc:	e6f6      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d3fe:	2180      	movs	r1, #128	; 0x80
1000d400:	68d3      	ldr	r3, [r2, #12]
1000d402:	0249      	lsls	r1, r1, #9
1000d404:	430b      	orrs	r3, r1
1000d406:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d408:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000d40a:	e6ef      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d40c:	2180      	movs	r1, #128	; 0x80
1000d40e:	68d3      	ldr	r3, [r2, #12]
1000d410:	0209      	lsls	r1, r1, #8
1000d412:	430b      	orrs	r3, r1
1000d414:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d416:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000d418:	e6e8      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d41a:	2180      	movs	r1, #128	; 0x80
1000d41c:	68d3      	ldr	r3, [r2, #12]
1000d41e:	01c9      	lsls	r1, r1, #7
1000d420:	430b      	orrs	r3, r1
1000d422:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d424:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000d426:	e6e1      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d428:	2180      	movs	r1, #128	; 0x80
1000d42a:	68d3      	ldr	r3, [r2, #12]
1000d42c:	0189      	lsls	r1, r1, #6
1000d42e:	430b      	orrs	r3, r1
1000d430:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d432:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000d434:	e6da      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d436:	2180      	movs	r1, #128	; 0x80
1000d438:	68d3      	ldr	r3, [r2, #12]
1000d43a:	0149      	lsls	r1, r1, #5
1000d43c:	430b      	orrs	r3, r1
1000d43e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d440:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000d442:	e6d3      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d444:	2180      	movs	r1, #128	; 0x80
1000d446:	68d3      	ldr	r3, [r2, #12]
1000d448:	0109      	lsls	r1, r1, #4
1000d44a:	430b      	orrs	r3, r1
1000d44c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d44e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000d450:	e6cc      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d452:	2180      	movs	r1, #128	; 0x80
1000d454:	68d3      	ldr	r3, [r2, #12]
1000d456:	0049      	lsls	r1, r1, #1
1000d458:	430b      	orrs	r3, r1
1000d45a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d45c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000d45e:	e6c5      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d460:	2380      	movs	r3, #128	; 0x80
1000d462:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d464:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d466:	430b      	orrs	r3, r1
1000d468:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000d46a:	e6bf      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d46c:	2320      	movs	r3, #32
1000d46e:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d470:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d472:	430b      	orrs	r3, r1
1000d474:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000d476:	e6b9      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d478:	2310      	movs	r3, #16
1000d47a:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d47c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d47e:	430b      	orrs	r3, r1
1000d480:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000d482:	e6b3      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d484:	2308      	movs	r3, #8
1000d486:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d488:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d48a:	430b      	orrs	r3, r1
1000d48c:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000d48e:	e6ad      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d490:	2304      	movs	r3, #4
1000d492:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d494:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d496:	430b      	orrs	r3, r1
1000d498:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000d49a:	e6a7      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d49c:	2302      	movs	r3, #2
1000d49e:	68d1      	ldr	r1, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d4a0:	2000      	movs	r0, #0
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000d4a2:	430b      	orrs	r3, r1
1000d4a4:	60d3      	str	r3, [r2, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000d4a6:	e6a1      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000d4a8:	2304      	movs	r3, #4
1000d4aa:	7d11      	ldrb	r1, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d4ac:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000d4ae:	430b      	orrs	r3, r1
1000d4b0:	7513      	strb	r3, [r2, #20]
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000d4b2:	e69b      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>

		default:
			return STATUS_ERR_INVALID_ARG;
1000d4b4:	2017      	movs	r0, #23
1000d4b6:	e699      	b.n	1000d1ec <system_clock_peripheral_enable+0x1c>
1000d4b8:	10019c08 	.word	0x10019c08
1000d4bc:	4000b000 	.word	0x4000b000

1000d4c0 <system_global_reset>:
 * Use this function to reset system global.
 *
 */
void system_global_reset(void)
{
	LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d4c0:	2201      	movs	r2, #1
1000d4c2:	4b04      	ldr	r3, [pc, #16]	; (1000d4d4 <system_global_reset+0x14>)
1000d4c4:	6859      	ldr	r1, [r3, #4]
1000d4c6:	4391      	bics	r1, r2
1000d4c8:	6059      	str	r1, [r3, #4]
		~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GLOBAL_RSTN;
	LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d4ca:	6859      	ldr	r1, [r3, #4]
1000d4cc:	430a      	orrs	r2, r1
1000d4ce:	605a      	str	r2, [r3, #4]
		LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GLOBAL_RSTN;
};
1000d4d0:	4770      	bx	lr
1000d4d2:	46c0      	nop			; (mov r8, r8)
1000d4d4:	4000b000 	.word	0x4000b000

1000d4d8 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000d4d8:	b500      	push	{lr}
	switch (peripheral) {
1000d4da:	2843      	cmp	r0, #67	; 0x43
1000d4dc:	d900      	bls.n	1000d4e0 <system_peripheral_reset+0x8>
1000d4de:	e200      	b.n	1000d8e2 <system_peripheral_reset+0x40a>
1000d4e0:	4bd5      	ldr	r3, [pc, #852]	; (1000d838 <system_peripheral_reset+0x360>)
1000d4e2:	0080      	lsls	r0, r0, #2
1000d4e4:	581b      	ldr	r3, [r3, r0]
1000d4e6:	469f      	mov	pc, r3
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d4e8:	4bd4      	ldr	r3, [pc, #848]	; (1000d83c <system_peripheral_reset+0x364>)
1000d4ea:	4ad5      	ldr	r2, [pc, #852]	; (1000d840 <system_peripheral_reset+0x368>)
1000d4ec:	8919      	ldrh	r1, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d4ee:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d4f0:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d4f2:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d4f4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d4f6:	891a      	ldrh	r2, [r3, #8]
1000d4f8:	0109      	lsls	r1, r1, #4
1000d4fa:	430a      	orrs	r2, r1
1000d4fc:	811a      	strh	r2, [r3, #8]
		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
1000d4fe:	bd00      	pop	{pc}
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d500:	4bce      	ldr	r3, [pc, #824]	; (1000d83c <system_peripheral_reset+0x364>)
1000d502:	4ad0      	ldr	r2, [pc, #832]	; (1000d844 <system_peripheral_reset+0x36c>)
1000d504:	8919      	ldrh	r1, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d506:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d508:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d50a:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d50c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d50e:	891a      	ldrh	r2, [r3, #8]
1000d510:	0049      	lsls	r1, r1, #1
1000d512:	430a      	orrs	r2, r1
1000d514:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000d516:	e7f2      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d518:	2180      	movs	r1, #128	; 0x80
1000d51a:	4bc8      	ldr	r3, [pc, #800]	; (1000d83c <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d51c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d51e:	891a      	ldrh	r2, [r3, #8]
1000d520:	438a      	bics	r2, r1
1000d522:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d524:	2280      	movs	r2, #128	; 0x80
1000d526:	8919      	ldrh	r1, [r3, #8]
1000d528:	430a      	orrs	r2, r1
1000d52a:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000d52c:	e7e7      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d52e:	2104      	movs	r1, #4
1000d530:	4bc2      	ldr	r3, [pc, #776]	; (1000d83c <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d532:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d534:	891a      	ldrh	r2, [r3, #8]
1000d536:	438a      	bics	r2, r1
1000d538:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d53a:	2204      	movs	r2, #4
1000d53c:	8919      	ldrh	r1, [r3, #8]
1000d53e:	430a      	orrs	r2, r1
1000d540:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000d542:	e7dc      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d544:	4bbd      	ldr	r3, [pc, #756]	; (1000d83c <system_peripheral_reset+0x364>)
1000d546:	4ac0      	ldr	r2, [pc, #768]	; (1000d848 <system_peripheral_reset+0x370>)
1000d548:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d54a:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d54c:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d54e:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d550:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d552:	685a      	ldr	r2, [r3, #4]
1000d554:	0449      	lsls	r1, r1, #17
1000d556:	430a      	orrs	r2, r1
1000d558:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000d55a:	e7d0      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d55c:	4bb7      	ldr	r3, [pc, #732]	; (1000d83c <system_peripheral_reset+0x364>)
1000d55e:	4abb      	ldr	r2, [pc, #748]	; (1000d84c <system_peripheral_reset+0x374>)
1000d560:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d562:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d564:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d566:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d568:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d56a:	685a      	ldr	r2, [r3, #4]
1000d56c:	0409      	lsls	r1, r1, #16
1000d56e:	430a      	orrs	r2, r1
1000d570:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000d572:	e7c4      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d574:	4bb1      	ldr	r3, [pc, #708]	; (1000d83c <system_peripheral_reset+0x364>)
1000d576:	4ab6      	ldr	r2, [pc, #728]	; (1000d850 <system_peripheral_reset+0x378>)
1000d578:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d57a:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d57c:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d57e:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d580:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d582:	685a      	ldr	r2, [r3, #4]
1000d584:	03c9      	lsls	r1, r1, #15
1000d586:	430a      	orrs	r2, r1
1000d588:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000d58a:	e7b8      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d58c:	4bab      	ldr	r3, [pc, #684]	; (1000d83c <system_peripheral_reset+0x364>)
1000d58e:	4ab1      	ldr	r2, [pc, #708]	; (1000d854 <system_peripheral_reset+0x37c>)
1000d590:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d592:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d594:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d596:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d598:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d59a:	685a      	ldr	r2, [r3, #4]
1000d59c:	0389      	lsls	r1, r1, #14
1000d59e:	430a      	orrs	r2, r1
1000d5a0:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000d5a2:	e7ac      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d5a4:	4ba5      	ldr	r3, [pc, #660]	; (1000d83c <system_peripheral_reset+0x364>)
1000d5a6:	4aac      	ldr	r2, [pc, #688]	; (1000d858 <system_peripheral_reset+0x380>)
1000d5a8:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d5aa:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d5ac:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d5ae:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d5b0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d5b2:	685a      	ldr	r2, [r3, #4]
1000d5b4:	0309      	lsls	r1, r1, #12
1000d5b6:	430a      	orrs	r2, r1
1000d5b8:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000d5ba:	e7a0      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d5bc:	4b9f      	ldr	r3, [pc, #636]	; (1000d83c <system_peripheral_reset+0x364>)
1000d5be:	4aa7      	ldr	r2, [pc, #668]	; (1000d85c <system_peripheral_reset+0x384>)
1000d5c0:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d5c2:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d5c4:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d5c6:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d5c8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d5ca:	685a      	ldr	r2, [r3, #4]
1000d5cc:	0089      	lsls	r1, r1, #2
1000d5ce:	430a      	orrs	r2, r1
1000d5d0:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000d5d2:	e794      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d5d4:	2280      	movs	r2, #128	; 0x80
1000d5d6:	4b99      	ldr	r3, [pc, #612]	; (1000d83c <system_peripheral_reset+0x364>)
1000d5d8:	6859      	ldr	r1, [r3, #4]
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d5da:	4391      	bics	r1, r2
1000d5dc:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d5de:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d5e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d5e2:	430a      	orrs	r2, r1
1000d5e4:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000d5e6:	e78a      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d5e8:	4b94      	ldr	r3, [pc, #592]	; (1000d83c <system_peripheral_reset+0x364>)
1000d5ea:	2220      	movs	r2, #32
1000d5ec:	6859      	ldr	r1, [r3, #4]
1000d5ee:	e7f4      	b.n	1000d5da <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d5f0:	4b92      	ldr	r3, [pc, #584]	; (1000d83c <system_peripheral_reset+0x364>)
1000d5f2:	2208      	movs	r2, #8
1000d5f4:	6859      	ldr	r1, [r3, #4]
1000d5f6:	e7f0      	b.n	1000d5da <system_peripheral_reset+0x102>
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
	switch (peripheral) {
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d5f8:	4b90      	ldr	r3, [pc, #576]	; (1000d83c <system_peripheral_reset+0x364>)
1000d5fa:	2202      	movs	r2, #2
1000d5fc:	6859      	ldr	r1, [r3, #4]
1000d5fe:	e7ec      	b.n	1000d5da <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d600:	2140      	movs	r1, #64	; 0x40
1000d602:	4b8e      	ldr	r3, [pc, #568]	; (1000d83c <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d604:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d606:	891a      	ldrh	r2, [r3, #8]
1000d608:	438a      	bics	r2, r1
1000d60a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d60c:	2240      	movs	r2, #64	; 0x40
1000d60e:	8919      	ldrh	r1, [r3, #8]
1000d610:	430a      	orrs	r2, r1
1000d612:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000d614:	e773      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d616:	2120      	movs	r1, #32
1000d618:	4b88      	ldr	r3, [pc, #544]	; (1000d83c <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d61a:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d61c:	891a      	ldrh	r2, [r3, #8]
1000d61e:	438a      	bics	r2, r1
1000d620:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d622:	2220      	movs	r2, #32
1000d624:	8919      	ldrh	r1, [r3, #8]
1000d626:	430a      	orrs	r2, r1
1000d628:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000d62a:	e768      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d62c:	2110      	movs	r1, #16
1000d62e:	4b83      	ldr	r3, [pc, #524]	; (1000d83c <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d630:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d632:	891a      	ldrh	r2, [r3, #8]
1000d634:	438a      	bics	r2, r1
1000d636:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d638:	2210      	movs	r2, #16
1000d63a:	8919      	ldrh	r1, [r3, #8]
1000d63c:	430a      	orrs	r2, r1
1000d63e:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000d640:	e75d      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d642:	2108      	movs	r1, #8
1000d644:	4b7d      	ldr	r3, [pc, #500]	; (1000d83c <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d646:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d648:	891a      	ldrh	r2, [r3, #8]
1000d64a:	438a      	bics	r2, r1
1000d64c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d64e:	2208      	movs	r2, #8
1000d650:	8919      	ldrh	r1, [r3, #8]
1000d652:	430a      	orrs	r2, r1
1000d654:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000d656:	e752      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d658:	4b78      	ldr	r3, [pc, #480]	; (1000d83c <system_peripheral_reset+0x364>)
1000d65a:	4a81      	ldr	r2, [pc, #516]	; (1000d860 <system_peripheral_reset+0x388>)
1000d65c:	8919      	ldrh	r1, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d65e:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d660:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d662:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d664:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d666:	891a      	ldrh	r2, [r3, #8]
1000d668:	00c9      	lsls	r1, r1, #3
1000d66a:	430a      	orrs	r2, r1
1000d66c:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000d66e:	e746      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d670:	4b72      	ldr	r3, [pc, #456]	; (1000d83c <system_peripheral_reset+0x364>)
1000d672:	4a7a      	ldr	r2, [pc, #488]	; (1000d85c <system_peripheral_reset+0x384>)
1000d674:	8919      	ldrh	r1, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d676:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d678:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d67a:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d67c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d67e:	891a      	ldrh	r2, [r3, #8]
1000d680:	0089      	lsls	r1, r1, #2
1000d682:	430a      	orrs	r2, r1
1000d684:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000d686:	e73a      	b.n	1000d4fe <system_peripheral_reset+0x26>
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d688:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d68a:	4a6c      	ldr	r2, [pc, #432]	; (1000d83c <system_peripheral_reset+0x364>)
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d68c:	0609      	lsls	r1, r1, #24
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d68e:	6853      	ldr	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d690:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d692:	005b      	lsls	r3, r3, #1
1000d694:	085b      	lsrs	r3, r3, #1
1000d696:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d698:	6853      	ldr	r3, [r2, #4]
1000d69a:	430b      	orrs	r3, r1
1000d69c:	6053      	str	r3, [r2, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000d69e:	e72e      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d6a0:	4b66      	ldr	r3, [pc, #408]	; (1000d83c <system_peripheral_reset+0x364>)
1000d6a2:	4a70      	ldr	r2, [pc, #448]	; (1000d864 <system_peripheral_reset+0x38c>)
1000d6a4:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d6a6:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d6a8:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d6aa:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d6ac:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d6ae:	685a      	ldr	r2, [r3, #4]
1000d6b0:	05c9      	lsls	r1, r1, #23
1000d6b2:	430a      	orrs	r2, r1
1000d6b4:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000d6b6:	e722      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d6b8:	4b60      	ldr	r3, [pc, #384]	; (1000d83c <system_peripheral_reset+0x364>)
1000d6ba:	4a6b      	ldr	r2, [pc, #428]	; (1000d868 <system_peripheral_reset+0x390>)
1000d6bc:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d6be:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d6c0:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d6c2:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d6c4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d6c6:	685a      	ldr	r2, [r3, #4]
1000d6c8:	0589      	lsls	r1, r1, #22
1000d6ca:	430a      	orrs	r2, r1
1000d6cc:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000d6ce:	e716      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d6d0:	4b5a      	ldr	r3, [pc, #360]	; (1000d83c <system_peripheral_reset+0x364>)
1000d6d2:	4a66      	ldr	r2, [pc, #408]	; (1000d86c <system_peripheral_reset+0x394>)
1000d6d4:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d6d6:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d6d8:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d6da:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d6dc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d6de:	685a      	ldr	r2, [r3, #4]
1000d6e0:	0549      	lsls	r1, r1, #21
1000d6e2:	430a      	orrs	r2, r1
1000d6e4:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000d6e6:	e70a      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d6e8:	4b54      	ldr	r3, [pc, #336]	; (1000d83c <system_peripheral_reset+0x364>)
1000d6ea:	4a61      	ldr	r2, [pc, #388]	; (1000d870 <system_peripheral_reset+0x398>)
1000d6ec:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d6ee:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d6f0:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d6f2:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d6f4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d6f6:	685a      	ldr	r2, [r3, #4]
1000d6f8:	0349      	lsls	r1, r1, #13
1000d6fa:	430a      	orrs	r2, r1
1000d6fc:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000d6fe:	e6fe      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d700:	2102      	movs	r1, #2
1000d702:	4b4e      	ldr	r3, [pc, #312]	; (1000d83c <system_peripheral_reset+0x364>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d704:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d706:	891a      	ldrh	r2, [r3, #8]
1000d708:	438a      	bics	r2, r1
1000d70a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d70c:	2202      	movs	r2, #2
1000d70e:	8919      	ldrh	r1, [r3, #8]
1000d710:	430a      	orrs	r2, r1
1000d712:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000d714:	e6f3      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d716:	4b49      	ldr	r3, [pc, #292]	; (1000d83c <system_peripheral_reset+0x364>)
1000d718:	4a56      	ldr	r2, [pc, #344]	; (1000d874 <system_peripheral_reset+0x39c>)
1000d71a:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d71c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d71e:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d720:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d722:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d724:	685a      	ldr	r2, [r3, #4]
1000d726:	0509      	lsls	r1, r1, #20
1000d728:	430a      	orrs	r2, r1
1000d72a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000d72c:	e6e7      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d72e:	4b43      	ldr	r3, [pc, #268]	; (1000d83c <system_peripheral_reset+0x364>)
1000d730:	4a51      	ldr	r2, [pc, #324]	; (1000d878 <system_peripheral_reset+0x3a0>)
1000d732:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d734:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d736:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d738:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d73a:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d73c:	685a      	ldr	r2, [r3, #4]
1000d73e:	04c9      	lsls	r1, r1, #19
1000d740:	430a      	orrs	r2, r1
1000d742:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000d744:	e6db      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d746:	4b3d      	ldr	r3, [pc, #244]	; (1000d83c <system_peripheral_reset+0x364>)
1000d748:	4a4c      	ldr	r2, [pc, #304]	; (1000d87c <system_peripheral_reset+0x3a4>)
1000d74a:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d74c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d74e:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d750:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d752:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d754:	685a      	ldr	r2, [r3, #4]
1000d756:	0489      	lsls	r1, r1, #18
1000d758:	430a      	orrs	r2, r1
1000d75a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000d75c:	e6cf      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d75e:	4b37      	ldr	r3, [pc, #220]	; (1000d83c <system_peripheral_reset+0x364>)
1000d760:	4a47      	ldr	r2, [pc, #284]	; (1000d880 <system_peripheral_reset+0x3a8>)
1000d762:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d764:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d766:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d768:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d76a:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d76c:	685a      	ldr	r2, [r3, #4]
1000d76e:	02c9      	lsls	r1, r1, #11
1000d770:	430a      	orrs	r2, r1
1000d772:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000d774:	e6c3      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d776:	4b31      	ldr	r3, [pc, #196]	; (1000d83c <system_peripheral_reset+0x364>)
1000d778:	4a42      	ldr	r2, [pc, #264]	; (1000d884 <system_peripheral_reset+0x3ac>)
1000d77a:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d77c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d77e:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d780:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d782:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d784:	685a      	ldr	r2, [r3, #4]
1000d786:	0209      	lsls	r1, r1, #8
1000d788:	430a      	orrs	r2, r1
1000d78a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000d78c:	e6b7      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d78e:	4b2b      	ldr	r3, [pc, #172]	; (1000d83c <system_peripheral_reset+0x364>)
1000d790:	4a3d      	ldr	r2, [pc, #244]	; (1000d888 <system_peripheral_reset+0x3b0>)
1000d792:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d794:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d796:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d798:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d79a:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d79c:	685a      	ldr	r2, [r3, #4]
1000d79e:	01c9      	lsls	r1, r1, #7
1000d7a0:	430a      	orrs	r2, r1
1000d7a2:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000d7a4:	e6ab      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d7a6:	4b25      	ldr	r3, [pc, #148]	; (1000d83c <system_peripheral_reset+0x364>)
1000d7a8:	4a38      	ldr	r2, [pc, #224]	; (1000d88c <system_peripheral_reset+0x3b4>)
1000d7aa:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d7ac:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d7ae:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d7b0:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d7b2:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d7b4:	685a      	ldr	r2, [r3, #4]
1000d7b6:	0189      	lsls	r1, r1, #6
1000d7b8:	430a      	orrs	r2, r1
1000d7ba:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000d7bc:	e69f      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d7be:	4b1f      	ldr	r3, [pc, #124]	; (1000d83c <system_peripheral_reset+0x364>)
1000d7c0:	4a33      	ldr	r2, [pc, #204]	; (1000d890 <system_peripheral_reset+0x3b8>)
1000d7c2:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d7c4:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d7c6:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d7c8:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d7ca:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d7cc:	685a      	ldr	r2, [r3, #4]
1000d7ce:	0149      	lsls	r1, r1, #5
1000d7d0:	430a      	orrs	r2, r1
1000d7d2:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000d7d4:	e693      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d7d6:	4b19      	ldr	r3, [pc, #100]	; (1000d83c <system_peripheral_reset+0x364>)
1000d7d8:	4a2e      	ldr	r2, [pc, #184]	; (1000d894 <system_peripheral_reset+0x3bc>)
1000d7da:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d7dc:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d7de:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d7e0:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d7e2:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d7e4:	685a      	ldr	r2, [r3, #4]
1000d7e6:	0289      	lsls	r1, r1, #10
1000d7e8:	430a      	orrs	r2, r1
1000d7ea:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000d7ec:	e687      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d7ee:	4b13      	ldr	r3, [pc, #76]	; (1000d83c <system_peripheral_reset+0x364>)
1000d7f0:	4a29      	ldr	r2, [pc, #164]	; (1000d898 <system_peripheral_reset+0x3c0>)
1000d7f2:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d7f4:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d7f6:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d7f8:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d7fa:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d7fc:	685a      	ldr	r2, [r3, #4]
1000d7fe:	0249      	lsls	r1, r1, #9
1000d800:	430a      	orrs	r2, r1
1000d802:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000d804:	e67b      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d806:	4b0d      	ldr	r3, [pc, #52]	; (1000d83c <system_peripheral_reset+0x364>)
1000d808:	4a0d      	ldr	r2, [pc, #52]	; (1000d840 <system_peripheral_reset+0x368>)
1000d80a:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d80c:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d80e:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d810:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d812:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d814:	685a      	ldr	r2, [r3, #4]
1000d816:	0109      	lsls	r1, r1, #4
1000d818:	430a      	orrs	r2, r1
1000d81a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000d81c:	e66f      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d81e:	4b07      	ldr	r3, [pc, #28]	; (1000d83c <system_peripheral_reset+0x364>)
1000d820:	4a0f      	ldr	r2, [pc, #60]	; (1000d860 <system_peripheral_reset+0x388>)
1000d822:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d824:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d826:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d828:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d82a:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d82c:	685a      	ldr	r2, [r3, #4]
1000d82e:	00c9      	lsls	r1, r1, #3
1000d830:	430a      	orrs	r2, r1
1000d832:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000d834:	e663      	b.n	1000d4fe <system_peripheral_reset+0x26>
1000d836:	46c0      	nop			; (mov r8, r8)
1000d838:	10019ce0 	.word	0x10019ce0
1000d83c:	4000b000 	.word	0x4000b000
1000d840:	fffff7ff 	.word	0xfffff7ff
1000d844:	fffffeff 	.word	0xfffffeff
1000d848:	feffffff 	.word	0xfeffffff
1000d84c:	ff7fffff 	.word	0xff7fffff
1000d850:	ffbfffff 	.word	0xffbfffff
1000d854:	ffdfffff 	.word	0xffdfffff
1000d858:	fff7ffff 	.word	0xfff7ffff
1000d85c:	fffffdff 	.word	0xfffffdff
1000d860:	fffffbff 	.word	0xfffffbff
1000d864:	bfffffff 	.word	0xbfffffff
1000d868:	dfffffff 	.word	0xdfffffff
1000d86c:	efffffff 	.word	0xefffffff
1000d870:	ffefffff 	.word	0xffefffff
1000d874:	f7ffffff 	.word	0xf7ffffff
1000d878:	fbffffff 	.word	0xfbffffff
1000d87c:	fdffffff 	.word	0xfdffffff
1000d880:	fffbffff 	.word	0xfffbffff
1000d884:	ffff7fff 	.word	0xffff7fff
1000d888:	ffffbfff 	.word	0xffffbfff
1000d88c:	ffffdfff 	.word	0xffffdfff
1000d890:	ffffefff 	.word	0xffffefff
1000d894:	fffdffff 	.word	0xfffdffff
1000d898:	fffeffff 	.word	0xfffeffff
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d89c:	2101      	movs	r1, #1
1000d89e:	4b12      	ldr	r3, [pc, #72]	; (1000d8e8 <system_peripheral_reset+0x410>)

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d8a0:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000d8a2:	891a      	ldrh	r2, [r3, #8]
1000d8a4:	438a      	bics	r2, r1
1000d8a6:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000d8a8:	2201      	movs	r2, #1
1000d8aa:	8919      	ldrh	r1, [r3, #8]
1000d8ac:	430a      	orrs	r2, r1
1000d8ae:	811a      	strh	r2, [r3, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000d8b0:	e625      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d8b2:	4b0d      	ldr	r3, [pc, #52]	; (1000d8e8 <system_peripheral_reset+0x410>)
1000d8b4:	4a0d      	ldr	r2, [pc, #52]	; (1000d8ec <system_peripheral_reset+0x414>)
1000d8b6:	6859      	ldr	r1, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000d8b8:	2000      	movs	r0, #0
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d8ba:	400a      	ands	r2, r1
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d8bc:	2180      	movs	r1, #128	; 0x80
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d8be:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000d8c0:	685a      	ldr	r2, [r3, #4]
1000d8c2:	0049      	lsls	r1, r1, #1
1000d8c4:	430a      	orrs	r2, r1
1000d8c6:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000d8c8:	e619      	b.n	1000d4fe <system_peripheral_reset+0x26>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d8ca:	4b07      	ldr	r3, [pc, #28]	; (1000d8e8 <system_peripheral_reset+0x410>)
1000d8cc:	2240      	movs	r2, #64	; 0x40
1000d8ce:	6859      	ldr	r1, [r3, #4]
1000d8d0:	e683      	b.n	1000d5da <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d8d2:	4b05      	ldr	r3, [pc, #20]	; (1000d8e8 <system_peripheral_reset+0x410>)
1000d8d4:	2210      	movs	r2, #16
1000d8d6:	6859      	ldr	r1, [r3, #4]
1000d8d8:	e67f      	b.n	1000d5da <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000d8da:	4b03      	ldr	r3, [pc, #12]	; (1000d8e8 <system_peripheral_reset+0x410>)
1000d8dc:	2204      	movs	r2, #4
1000d8de:	6859      	ldr	r1, [r3, #4]
1000d8e0:	e67b      	b.n	1000d5da <system_peripheral_reset+0x102>
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000d8e2:	2017      	movs	r0, #23
1000d8e4:	e60b      	b.n	1000d4fe <system_peripheral_reset+0x26>
1000d8e6:	46c0      	nop			; (mov r8, r8)
1000d8e8:	4000b000 	.word	0x4000b000
1000d8ec:	fffffeff 	.word	0xfffffeff

1000d8f0 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000d8f0:	2380      	movs	r3, #128	; 0x80
1000d8f2:	04db      	lsls	r3, r3, #19
1000d8f4:	469c      	mov	ip, r3
1000d8f6:	4460      	add	r0, ip
1000d8f8:	0080      	lsls	r0, r0, #2
1000d8fa:	6001      	str	r1, [r0, #0]
}
1000d8fc:	4770      	bx	lr
1000d8fe:	46c0      	nop			; (mov r8, r8)

1000d900 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000d900:	4a04      	ldr	r2, [pc, #16]	; (1000d914 <_sbrk+0x14>)
1000d902:	6813      	ldr	r3, [r2, #0]
1000d904:	2b00      	cmp	r3, #0
1000d906:	d003      	beq.n	1000d910 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	heap += incr;
1000d908:	1818      	adds	r0, r3, r0
1000d90a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
1000d90c:	0018      	movs	r0, r3
1000d90e:	4770      	bx	lr
1000d910:	4b01      	ldr	r3, [pc, #4]	; (1000d918 <_sbrk+0x18>)
1000d912:	e7f9      	b.n	1000d908 <_sbrk+0x8>
1000d914:	1001bfcc 	.word	0x1001bfcc
1000d918:	1001e1a0 	.word	0x1001e1a0

1000d91c <_close>:
}

extern int _close(int file)
{
	return -1;
}
1000d91c:	2001      	movs	r0, #1
1000d91e:	4240      	negs	r0, r0
1000d920:	4770      	bx	lr
1000d922:	46c0      	nop			; (mov r8, r8)

1000d924 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000d924:	2380      	movs	r3, #128	; 0x80
1000d926:	019b      	lsls	r3, r3, #6

	return 0;
}
1000d928:	2000      	movs	r0, #0
	return -1;
}

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000d92a:	604b      	str	r3, [r1, #4]

	return 0;
}
1000d92c:	4770      	bx	lr
1000d92e:	46c0      	nop			; (mov r8, r8)

1000d930 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000d930:	2001      	movs	r0, #1
1000d932:	4770      	bx	lr

1000d934 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
1000d934:	2000      	movs	r0, #0
1000d936:	4770      	bx	lr

1000d938 <interrupt_cb>:
    dualtimer_disable(DUALTIMER_TIMER2);
}
void interrupt_cb(void)
{
    //imu_interrupt = true;
    hal.new_gyro = 1;
1000d938:	2201      	movs	r2, #1
    dualtimer_init(&config_dualtimer);
    dualtimer_disable(DUALTIMER_TIMER1);
    dualtimer_disable(DUALTIMER_TIMER2);
}
void interrupt_cb(void)
{
1000d93a:	b510      	push	{r4, lr}
    //imu_interrupt = true;
    hal.new_gyro = 1;
1000d93c:	4b04      	ldr	r3, [pc, #16]	; (1000d950 <interrupt_cb+0x18>)
    send_plf_int_msg_ind(PIN_AO_GPIO_2, GPIO_CALLBACK_RISING, NULL, 0);
1000d93e:	2102      	movs	r1, #2
    dualtimer_disable(DUALTIMER_TIMER2);
}
void interrupt_cb(void)
{
    //imu_interrupt = true;
    hal.new_gyro = 1;
1000d940:	711a      	strb	r2, [r3, #4]
    send_plf_int_msg_ind(PIN_AO_GPIO_2, GPIO_CALLBACK_RISING, NULL, 0);
1000d942:	201d      	movs	r0, #29
1000d944:	2300      	movs	r3, #0
1000d946:	2200      	movs	r2, #0
1000d948:	4c02      	ldr	r4, [pc, #8]	; (1000d954 <interrupt_cb+0x1c>)
1000d94a:	47a0      	blx	r4
}
1000d94c:	bd10      	pop	{r4, pc}
1000d94e:	46c0      	nop			; (mov r8, r8)
1000d950:	1001bfd0 	.word	0x1001bfd0
1000d954:	1000c055 	.word	0x1000c055

1000d958 <configure_i2c_master>:
    //count[0] = delta;
    count[0] = val;
}

void configure_i2c_master(void)
{
1000d958:	b570      	push	{r4, r5, r6, lr}
    i2c_wpacket.data = malloc(16 * sizeof(uint8_t));
1000d95a:	2010      	movs	r0, #16
    //count[0] = delta;
    count[0] = val;
}

void configure_i2c_master(void)
{
1000d95c:	b086      	sub	sp, #24
    i2c_wpacket.data = malloc(16 * sizeof(uint8_t));
1000d95e:	4c14      	ldr	r4, [pc, #80]	; (1000d9b0 <configure_i2c_master+0x58>)
1000d960:	47a0      	blx	r4
1000d962:	4b14      	ldr	r3, [pc, #80]	; (1000d9b4 <configure_i2c_master+0x5c>)
1000d964:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(16 * sizeof(uint8_t));
1000d966:	2010      	movs	r0, #16
1000d968:	47a0      	blx	r4
1000d96a:	4b13      	ldr	r3, [pc, #76]	; (1000d9b8 <configure_i2c_master+0x60>)
    
    /* Initialize config structure and software module. */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
1000d96c:	ac01      	add	r4, sp, #4
}

void configure_i2c_master(void)
{
    i2c_wpacket.data = malloc(16 * sizeof(uint8_t));
    i2c_rpacket.data = malloc(16 * sizeof(uint8_t));
1000d96e:	6058      	str	r0, [r3, #4]
    
    /* Initialize config structure and software module. */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
1000d970:	4b12      	ldr	r3, [pc, #72]	; (1000d9bc <configure_i2c_master+0x64>)
1000d972:	0020      	movs	r0, r4
1000d974:	4798      	blx	r3
    /* 26 MHz / 65 = 400 kHz */
    config_i2c_master.clock_source = I2C_CLK_INPUT_0;
1000d976:	2300      	movs	r3, #0
1000d978:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = 65;
1000d97a:	3341      	adds	r3, #65	; 0x41
1000d97c:	8063      	strh	r3, [r4, #2]
    /* 3 MHz / 30 = 100 kHz */
    //config_i2c_master.clock_source = I2C_CLK_INPUT_3;
    //config_i2c_master.clock_divider = 30;
    config_i2c_master.pin_number_pad0 = PIN_LP_GPIO_8;
1000d97e:	3b39      	subs	r3, #57	; 0x39
1000d980:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = PIN_LP_GPIO_9;
1000d982:	3301      	adds	r3, #1
1000d984:	60e3      	str	r3, [r4, #12]
1000d986:	4d0e      	ldr	r5, [pc, #56]	; (1000d9c0 <configure_i2c_master+0x68>)
    config_i2c_master.pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
1000d988:	3b07      	subs	r3, #7
1000d98a:	4e0e      	ldr	r6, [pc, #56]	; (1000d9c4 <configure_i2c_master+0x6c>)
1000d98c:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
1000d98e:	6123      	str	r3, [r4, #16]
    /* Initialize and enable device with config, and enable i2c. */
    while(i2c_master_init(&i2c_master_instance, I2C0, &config_i2c_master) != STATUS_OK);
1000d990:	0022      	movs	r2, r4
1000d992:	490d      	ldr	r1, [pc, #52]	; (1000d9c8 <configure_i2c_master+0x70>)
1000d994:	0028      	movs	r0, r5
1000d996:	47b0      	blx	r6
1000d998:	2800      	cmp	r0, #0
1000d99a:	d1f9      	bne.n	1000d990 <configure_i2c_master+0x38>
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000d99c:	2128      	movs	r1, #40	; 0x28
    
    i2c_enable(i2c_master_instance.hw);
1000d99e:	682a      	ldr	r2, [r5, #0]
1000d9a0:	5c53      	ldrb	r3, [r2, r1]
1000d9a2:	07db      	lsls	r3, r3, #31
1000d9a4:	d4fc      	bmi.n	1000d9a0 <configure_i2c_master+0x48>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
1000d9a6:	2301      	movs	r3, #1
1000d9a8:	7513      	strb	r3, [r2, #20]
}
1000d9aa:	b006      	add	sp, #24
1000d9ac:	bd70      	pop	{r4, r5, r6, pc}
1000d9ae:	46c0      	nop			; (mov r8, r8)
1000d9b0:	10017d5d 	.word	0x10017d5d
1000d9b4:	1001c400 	.word	0x1001c400
1000d9b8:	1001c3f0 	.word	0x1001c3f0
1000d9bc:	1000d04d 	.word	0x1000d04d
1000d9c0:	1001c3f8 	.word	0x1001c3f8
1000d9c4:	1000d065 	.word	0x1000d065
1000d9c8:	40003000 	.word	0x40003000

1000d9cc <init_dualtimer>:

void init_dualtimer(void)
{
1000d9cc:	b510      	push	{r4, lr}
1000d9ce:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000d9d0:	ac01      	add	r4, sp, #4
1000d9d2:	0020      	movs	r0, r4
1000d9d4:	4b09      	ldr	r3, [pc, #36]	; (1000d9fc <init_dualtimer+0x30>)
1000d9d6:	4798      	blx	r3
    
    config_dualtimer.timer1.load_value = 26000;
1000d9d8:	4b09      	ldr	r3, [pc, #36]	; (1000da00 <init_dualtimer+0x34>)
    config_dualtimer.timer2.load_value = 0xffffffff;
    config_dualtimer.timer2.interrup_enable = false;
    
    dualtimer_init(&config_dualtimer);
1000d9da:	0020      	movs	r0, r4
void init_dualtimer(void)
{
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
    
    config_dualtimer.timer1.load_value = 26000;
1000d9dc:	60a3      	str	r3, [r4, #8]
    config_dualtimer.timer2.load_value = 0xffffffff;
1000d9de:	2301      	movs	r3, #1
1000d9e0:	425b      	negs	r3, r3
1000d9e2:	6163      	str	r3, [r4, #20]
    config_dualtimer.timer2.interrup_enable = false;
1000d9e4:	2300      	movs	r3, #0
1000d9e6:	7423      	strb	r3, [r4, #16]
    
    dualtimer_init(&config_dualtimer);
1000d9e8:	4b06      	ldr	r3, [pc, #24]	; (1000da04 <init_dualtimer+0x38>)
1000d9ea:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000d9ec:	4c06      	ldr	r4, [pc, #24]	; (1000da08 <init_dualtimer+0x3c>)
1000d9ee:	2000      	movs	r0, #0
1000d9f0:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
1000d9f2:	2001      	movs	r0, #1
1000d9f4:	47a0      	blx	r4
}
1000d9f6:	b008      	add	sp, #32
1000d9f8:	bd10      	pop	{r4, pc}
1000d9fa:	46c0      	nop			; (mov r8, r8)
1000d9fc:	1000817d 	.word	0x1000817d
1000da00:	00006590 	.word	0x00006590
1000da04:	100081fd 	.word	0x100081fd
1000da08:	100081d9 	.word	0x100081d9

1000da0c <main>:
    dmp_read_fifo(gyro, accel_short, quat, &sensor_timestamp, &sensors, &more);
    DBG_LOG("FIFO: %d %d %d, %d %d %d, %ld %ld %ld %ld", gyro[0], gyro[1], gyro[2], accel_short[0], accel_short[1], accel_short[2], quat[0], quat[1], quat[2], quat[3]);
}

int main(void)
{
1000da0c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000da0e:	4644      	mov	r4, r8
1000da10:	4656      	mov	r6, sl
1000da12:	464d      	mov	r5, r9
1000da14:	465f      	mov	r7, fp
1000da16:	b4f0      	push	{r4, r5, r6, r7}
1000da18:	b097      	sub	sp, #92	; 0x5c
    inv_error_t result;
    unsigned char accel_fsr = 0;
1000da1a:	ab04      	add	r3, sp, #16
1000da1c:	469c      	mov	ip, r3
1000da1e:	250b      	movs	r5, #11
1000da20:	2600      	movs	r6, #0
1000da22:	4465      	add	r5, ip
    unsigned long timestamp = 0;
    unsigned short compass_fsr;
    uint8_t temp_cnt = 0;
    uint8_t compass_cnt = 0;
    
    platform_driver_init();
1000da24:	4b86      	ldr	r3, [pc, #536]	; (1000dc40 <main+0x234>)
}

int main(void)
{
    inv_error_t result;
    unsigned char accel_fsr = 0;
1000da26:	702e      	strb	r6, [r5, #0]
    unsigned long timestamp = 0;
    unsigned short compass_fsr;
    uint8_t temp_cnt = 0;
    uint8_t compass_cnt = 0;
    
    platform_driver_init();
1000da28:	4798      	blx	r3
    gpio_init();
1000da2a:	4b86      	ldr	r3, [pc, #536]	; (1000dc44 <main+0x238>)
1000da2c:	4798      	blx	r3
    acquire_sleep_lock();
1000da2e:	4b86      	ldr	r3, [pc, #536]	; (1000dc48 <main+0x23c>)
1000da30:	4798      	blx	r3
    serial_console_init();
1000da32:	4b86      	ldr	r3, [pc, #536]	; (1000dc4c <main+0x240>)
1000da34:	4798      	blx	r3
    ble_device_init(NULL);
1000da36:	2000      	movs	r0, #0
1000da38:	4b85      	ldr	r3, [pc, #532]	; (1000dc50 <main+0x244>)
1000da3a:	4798      	blx	r3

    init_dualtimer();
1000da3c:	4b85      	ldr	r3, [pc, #532]	; (1000dc54 <main+0x248>)
}

static void configure_imu_gpio(void)
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000da3e:	ac13      	add	r4, sp, #76	; 0x4c
    gpio_init();
    acquire_sleep_lock();
    serial_console_init();
    ble_device_init(NULL);

    init_dualtimer();
1000da40:	4798      	blx	r3
    delay_init();
1000da42:	4b85      	ldr	r3, [pc, #532]	; (1000dc58 <main+0x24c>)
1000da44:	4798      	blx	r3
}

static void configure_imu_gpio(void)
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000da46:	0020      	movs	r0, r4
1000da48:	4b84      	ldr	r3, [pc, #528]	; (1000dc5c <main+0x250>)
1000da4a:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000da4c:	2302      	movs	r3, #2
1000da4e:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000da50:	3b01      	subs	r3, #1
    gpio_pin_set_config(PIN_AO_GPIO_2, &config_gpio_pin);
1000da52:	0021      	movs	r1, r4
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
    config_gpio_pin.aon_wakeup = true;
1000da54:	70e3      	strb	r3, [r4, #3]
    gpio_pin_set_config(PIN_AO_GPIO_2, &config_gpio_pin);
1000da56:	201d      	movs	r0, #29
1000da58:	4b81      	ldr	r3, [pc, #516]	; (1000dc60 <main+0x254>)

static void configure_imu_gpio(void)
{
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000da5a:	7026      	strb	r6, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
    config_gpio_pin.aon_wakeup = true;
    gpio_pin_set_config(PIN_AO_GPIO_2, &config_gpio_pin);
1000da5c:	4798      	blx	r3

    init_dualtimer();
    delay_init();

    configure_imu_gpio();
    configure_i2c_master();
1000da5e:	4b81      	ldr	r3, [pc, #516]	; (1000dc64 <main+0x258>)
1000da60:	4798      	blx	r3
    
    struct int_param_s int_param;
    int_param.cb = (void*)interrupt_cb;
1000da62:	4b81      	ldr	r3, [pc, #516]	; (1000dc68 <main+0x25c>)
    int_param.pin = PIN_AO_GPIO_2;
    result = mpu_init(&int_param);
1000da64:	0020      	movs	r0, r4

    configure_imu_gpio();
    configure_i2c_master();
    
    struct int_param_s int_param;
    int_param.cb = (void*)interrupt_cb;
1000da66:	6063      	str	r3, [r4, #4]
    int_param.pin = PIN_AO_GPIO_2;
1000da68:	231d      	movs	r3, #29
1000da6a:	8023      	strh	r3, [r4, #0]
    result = mpu_init(&int_param);
1000da6c:	4b7f      	ldr	r3, [pc, #508]	; (1000dc6c <main+0x260>)
1000da6e:	4798      	blx	r3
    if(result) {
        DBG_LOG_DEV("Could not initialize MPU!");
        system_global_reset();
1000da70:	4c7f      	ldr	r4, [pc, #508]	; (1000dc70 <main+0x264>)
    
    struct int_param_s int_param;
    int_param.cb = (void*)interrupt_cb;
    int_param.pin = PIN_AO_GPIO_2;
    result = mpu_init(&int_param);
    if(result) {
1000da72:	2800      	cmp	r0, #0
1000da74:	d000      	beq.n	1000da78 <main+0x6c>
1000da76:	e0e0      	b.n	1000dc3a <main+0x22e>
    
    /* If you're not using an MPU9150 AND you're not using DMP features, this
    * function will place all slaves on the primary bus.
    * mpu_set_bypass(1);
    */
    result = inv_init_mpl();
1000da78:	4b7e      	ldr	r3, [pc, #504]	; (1000dc74 <main+0x268>)
1000da7a:	4798      	blx	r3
    if(result) {
1000da7c:	2800      	cmp	r0, #0
1000da7e:	d000      	beq.n	1000da82 <main+0x76>
1000da80:	e0d9      	b.n	1000dc36 <main+0x22a>
        DBG_LOG_DEV("Could not initialize MPL.");
        system_global_reset();
    }
    
    /* Compute 6-axis and 9-axis quaternions. */
    inv_enable_quaternion();
1000da82:	4b7d      	ldr	r3, [pc, #500]	; (1000dc78 <main+0x26c>)
1000da84:	4798      	blx	r3
    inv_enable_9x_sensor_fusion();
1000da86:	4b7d      	ldr	r3, [pc, #500]	; (1000dc7c <main+0x270>)
1000da88:	4798      	blx	r3
    */

    /* Update gyro biases when not in motion.
    * WARNING: These algorithms are mutually exclusive.
    */
    inv_enable_fast_nomot();
1000da8a:	4b7d      	ldr	r3, [pc, #500]	; (1000dc80 <main+0x274>)
1000da8c:	4798      	blx	r3
    /* inv_enable_motion_no_motion(); */
    /* inv_set_no_motion_time(1000); */

    /* Update gyro biases when temperature changes. */
    inv_enable_gyro_tc();
1000da8e:	4b7d      	ldr	r3, [pc, #500]	; (1000dc84 <main+0x278>)
1000da90:	4798      	blx	r3
    */

    /* Allows use of the MPL APIs in read_from_mpl. */
    //inv_enable_eMPL_outputs();

    result = inv_start_mpl();
1000da92:	4b7d      	ldr	r3, [pc, #500]	; (1000dc88 <main+0x27c>)
1000da94:	4798      	blx	r3
    if (result == INV_ERROR_NOT_AUTHORIZED) {
1000da96:	2832      	cmp	r0, #50	; 0x32
1000da98:	d100      	bne.n	1000da9c <main+0x90>
1000da9a:	e0c0      	b.n	1000dc1e <main+0x212>
        while (1) {
            DBG_LOG("Not authorized.\n");
            delay_ms(5000);
        }
    }
    if (result) {
1000da9c:	2800      	cmp	r0, #0
1000da9e:	d000      	beq.n	1000daa2 <main+0x96>
1000daa0:	e0bb      	b.n	1000dc1a <main+0x20e>
        system_global_reset();
    }

    /* Get/set hardware configuration. Start gyro. */
    /* Wake up all sensors. */
    mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
1000daa2:	4b7a      	ldr	r3, [pc, #488]	; (1000dc8c <main+0x280>)
1000daa4:	2079      	movs	r0, #121	; 0x79
1000daa6:	4798      	blx	r3

    /* Push both gyro and accel data into the FIFO. */
    mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
1000daa8:	4b79      	ldr	r3, [pc, #484]	; (1000dc90 <main+0x284>)
1000daaa:	2078      	movs	r0, #120	; 0x78
1000daac:	4798      	blx	r3
    mpu_set_sample_rate(DEFAULT_MPU_HZ);
1000daae:	4b79      	ldr	r3, [pc, #484]	; (1000dc94 <main+0x288>)
1000dab0:	200a      	movs	r0, #10
1000dab2:	4798      	blx	r3
    /* The compass sampling rate can be less than the gyro/accel sampling rate.
    * Use this function for proper power management.
    */
    mpu_set_compass_sample_rate(1000 / COMPASS_READ_MS);
1000dab4:	4b78      	ldr	r3, [pc, #480]	; (1000dc98 <main+0x28c>)
1000dab6:	200a      	movs	r0, #10
1000dab8:	4798      	blx	r3

    /* Read back configuration in case it was set improperly. */
    mpu_get_sample_rate(&gyro_rate);
1000daba:	ab04      	add	r3, sp, #16
1000dabc:	469c      	mov	ip, r3
1000dabe:	200e      	movs	r0, #14
1000dac0:	4b76      	ldr	r3, [pc, #472]	; (1000dc9c <main+0x290>)
1000dac2:	4460      	add	r0, ip
1000dac4:	4798      	blx	r3
    mpu_get_gyro_fsr(&gyro_fsr);
1000dac6:	4b76      	ldr	r3, [pc, #472]	; (1000dca0 <main+0x294>)
1000dac8:	a808      	add	r0, sp, #32
1000daca:	4798      	blx	r3
    mpu_get_accel_fsr(&accel_fsr);
1000dacc:	0028      	movs	r0, r5
1000dace:	4b75      	ldr	r3, [pc, #468]	; (1000dca4 <main+0x298>)
1000dad0:	4798      	blx	r3
    mpu_get_compass_fsr(&compass_fsr);
1000dad2:	ab04      	add	r3, sp, #16
1000dad4:	469c      	mov	ip, r3
1000dad6:	2012      	movs	r0, #18
1000dad8:	4b73      	ldr	r3, [pc, #460]	; (1000dca8 <main+0x29c>)
1000dada:	4460      	add	r0, ip
1000dadc:	4798      	blx	r3
    //inv_set_gyro_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long)gyro_fsr<<15);
    //inv_set_accel_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long)accel_fsr<<15);
    //inv_set_compass_orientation_and_scale(inv_orientation_matrix_to_scalar(compass_pdata.orientation), (long)compass_fsr<<15);

    /* Initialize HAL state variables. */
    hal.sensors = ACCEL_ON | GYRO_ON | COMPASS_ON;
1000dade:	4b73      	ldr	r3, [pc, #460]	; (1000dcac <main+0x2a0>)
    hal.next_pedo_ms = 0;
    hal.next_compass_ms = 0;
    hal.next_temp_ms = 0;

    /* Compass reads are handled by scheduler. */
    dualtimer_enable(DUALTIMER_TIMER2);
1000dae0:	2001      	movs	r0, #1
    //inv_set_gyro_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long)gyro_fsr<<15);
    //inv_set_accel_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long)accel_fsr<<15);
    //inv_set_compass_orientation_and_scale(inv_orientation_matrix_to_scalar(compass_pdata.orientation), (long)compass_fsr<<15);

    /* Initialize HAL state variables. */
    hal.sensors = ACCEL_ON | GYRO_ON | COMPASS_ON;
1000dae2:	469a      	mov	sl, r3
1000dae4:	2307      	movs	r3, #7
1000dae6:	4652      	mov	r2, sl
1000dae8:	7053      	strb	r3, [r2, #1]
    hal.dmp_on = 0;
1000daea:	2300      	movs	r3, #0
    hal.report = 0;
    hal.rx.cmd = 0;
1000daec:	4651      	mov	r1, sl
    //inv_set_accel_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long)accel_fsr<<15);
    //inv_set_compass_orientation_and_scale(inv_orientation_matrix_to_scalar(compass_pdata.orientation), (long)compass_fsr<<15);

    /* Initialize HAL state variables. */
    hal.sensors = ACCEL_ON | GYRO_ON | COMPASS_ON;
    hal.dmp_on = 0;
1000daee:	7093      	strb	r3, [r2, #2]
    hal.report = 0;
1000daf0:	6193      	str	r3, [r2, #24]
    hal.rx.cmd = 0;
1000daf2:	2221      	movs	r2, #33	; 0x21
    hal.next_pedo_ms = 0;
1000daf4:	60cb      	str	r3, [r1, #12]

    /* Initialize HAL state variables. */
    hal.sensors = ACCEL_ON | GYRO_ON | COMPASS_ON;
    hal.dmp_on = 0;
    hal.report = 0;
    hal.rx.cmd = 0;
1000daf6:	548b      	strb	r3, [r1, r2]
    hal.next_pedo_ms = 0;
    hal.next_compass_ms = 0;
1000daf8:	614b      	str	r3, [r1, #20]
    hal.next_temp_ms = 0;
1000dafa:	610b      	str	r3, [r1, #16]

    /* Compass reads are handled by scheduler. */
    dualtimer_enable(DUALTIMER_TIMER2);
1000dafc:	4b6c      	ldr	r3, [pc, #432]	; (1000dcb0 <main+0x2a4>)
1000dafe:	4798      	blx	r3
#define COMPASS_ENABLED 1

static inline void get_ms(uint32_t *count)
{
    //static uint32_t old_val = 0;
    volatile uint32_t val = (uint32_t)((0xffffffff - dualtimer_get_value(DUALTIMER_TIMER2)) / (uint32_t)26000);
1000db00:	4b6c      	ldr	r3, [pc, #432]	; (1000dcb4 <main+0x2a8>)
1000db02:	2001      	movs	r0, #1
1000db04:	4699      	mov	r9, r3
1000db06:	4798      	blx	r3
1000db08:	4b6b      	ldr	r3, [pc, #428]	; (1000dcb8 <main+0x2ac>)
1000db0a:	496c      	ldr	r1, [pc, #432]	; (1000dcbc <main+0x2b0>)
1000db0c:	43c0      	mvns	r0, r0
1000db0e:	4698      	mov	r8, r3
1000db10:	4798      	blx	r3
1000db12:	900b      	str	r0, [sp, #44]	; 0x2c
        //MPL_LOGE("Could not download DMP.\n");
        //system_global_reset();
    //}
    //dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_pdata.orientation));

    hal.dmp_features = DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL;
1000db14:	2074      	movs	r0, #116	; 0x74
    //volatile uint32_t delta;
    //if(val >= old_val) delta = val - old_val;
    //else delta = (uint32_t)(0xffffffff/(uint32_t)26000) - old_val + val;
    //old_val = val;
    //count[0] = delta;
    count[0] = val;
1000db16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        //MPL_LOGE("Could not download DMP.\n");
        //system_global_reset();
    //}
    //dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_pdata.orientation));

    hal.dmp_features = DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL;
1000db18:	4653      	mov	r3, sl
1000db1a:	30ff      	adds	r0, #255	; 0xff
1000db1c:	8398      	strh	r0, [r3, #28]
    dmp_enable_feature(hal.dmp_features);
1000db1e:	4b68      	ldr	r3, [pc, #416]	; (1000dcc0 <main+0x2b4>)
1000db20:	4798      	blx	r3
    //inv_set_quat_sample_rate(1000000L / DEFAULT_MPU_HZ);
    //mpu_set_dmp_state(1);
    //hal.dmp_on = 1;

    //gpio_register_callback(PIN_AO_GPIO_2, interrupt_cb, GPIO_CALLBACK_RISING);
    gpio_enable_callback(PIN_AO_GPIO_2);
1000db22:	4b68      	ldr	r3, [pc, #416]	; (1000dcc4 <main+0x2b8>)
1000db24:	201d      	movs	r0, #29
1000db26:	4798      	blx	r3
    unsigned char accel_fsr = 0;
    unsigned short gyro_rate, gyro_fsr;
    unsigned long timestamp = 0;
    unsigned short compass_fsr;
    uint8_t temp_cnt = 0;
    uint8_t compass_cnt = 0;
1000db28:	2300      	movs	r3, #0
1000db2a:	9304      	str	r3, [sp, #16]
    inv_error_t result;
    unsigned char accel_fsr = 0;
    unsigned short gyro_rate, gyro_fsr;
    unsigned long timestamp = 0;
    unsigned short compass_fsr;
    uint8_t temp_cnt = 0;
1000db2c:	9303      	str	r3, [sp, #12]
1000db2e:	4b66      	ldr	r3, [pc, #408]	; (1000dcc8 <main+0x2bc>)
1000db30:	4f66      	ldr	r7, [pc, #408]	; (1000dccc <main+0x2c0>)
1000db32:	469b      	mov	fp, r3
1000db34:	4e66      	ldr	r6, [pc, #408]	; (1000dcd0 <main+0x2c4>)
1000db36:	ad0f      	add	r5, sp, #60	; 0x3c
1000db38:	ac0d      	add	r4, sp, #52	; 0x34
        if (hal.new_gyro) {
            short gyro[3], accel_short[3], compass_short[3];
            unsigned char sensors, more;
            long temperature;
            
            hal.new_gyro = 0;
1000db3a:	9705      	str	r7, [sp, #20]
    gpio_enable_callback(PIN_AO_GPIO_2);

    while (true) {
        unsigned long sensor_timestamp;
        
        ble_event_task(BLE_EVENT_TIMEOUT);
1000db3c:	2001      	movs	r0, #1
1000db3e:	4240      	negs	r0, r0
1000db40:	47b0      	blx	r6
#define COMPASS_ENABLED 1

static inline void get_ms(uint32_t *count)
{
    //static uint32_t old_val = 0;
    volatile uint32_t val = (uint32_t)((0xffffffff - dualtimer_get_value(DUALTIMER_TIMER2)) / (uint32_t)26000);
1000db42:	2001      	movs	r0, #1
1000db44:	47c8      	blx	r9
1000db46:	495d      	ldr	r1, [pc, #372]	; (1000dcbc <main+0x2b0>)
1000db48:	43c0      	mvns	r0, r0
1000db4a:	47c0      	blx	r8
1000db4c:	900c      	str	r0, [sp, #48]	; 0x30
    //volatile uint32_t delta;
    //if(val >= old_val) delta = val - old_val;
    //else delta = (uint32_t)(0xffffffff/(uint32_t)26000) - old_val + val;
    //old_val = val;
    //count[0] = delta;
    count[0] = val;
1000db4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        
        ble_event_task(BLE_EVENT_TIMEOUT);

        get_ms(&timestamp);
        
        if (hal.new_gyro) {
1000db50:	4653      	mov	r3, sl
1000db52:	791b      	ldrb	r3, [r3, #4]
1000db54:	2b00      	cmp	r3, #0
1000db56:	d0f1      	beq.n	1000db3c <main+0x130>
            short gyro[3], accel_short[3], compass_short[3];
            unsigned char sensors, more;
            long temperature;
            
            hal.new_gyro = 0;
1000db58:	4653      	mov	r3, sl
1000db5a:	2200      	movs	r2, #0
1000db5c:	711a      	strb	r2, [r3, #4]
            compass_cnt++;
1000db5e:	9b04      	ldr	r3, [sp, #16]
            temp_cnt++;
            
            mpu_read_fifo(gyro, accel_short, &sensor_timestamp, &sensors, &more);
1000db60:	aa04      	add	r2, sp, #16
            short gyro[3], accel_short[3], compass_short[3];
            unsigned char sensors, more;
            long temperature;
            
            hal.new_gyro = 0;
            compass_cnt++;
1000db62:	3301      	adds	r3, #1
1000db64:	b2db      	uxtb	r3, r3
1000db66:	9304      	str	r3, [sp, #16]
            temp_cnt++;
1000db68:	9b03      	ldr	r3, [sp, #12]
            
            mpu_read_fifo(gyro, accel_short, &sensor_timestamp, &sensors, &more);
1000db6a:	4694      	mov	ip, r2
            unsigned char sensors, more;
            long temperature;
            
            hal.new_gyro = 0;
            compass_cnt++;
            temp_cnt++;
1000db6c:	3301      	adds	r3, #1
1000db6e:	b2db      	uxtb	r3, r3
1000db70:	9303      	str	r3, [sp, #12]
            
            mpu_read_fifo(gyro, accel_short, &sensor_timestamp, &sensors, &more);
1000db72:	230d      	movs	r3, #13
1000db74:	4463      	add	r3, ip
1000db76:	9300      	str	r3, [sp, #0]
1000db78:	aa09      	add	r2, sp, #36	; 0x24
1000db7a:	ab07      	add	r3, sp, #28
1000db7c:	0029      	movs	r1, r5
1000db7e:	0020      	movs	r0, r4
1000db80:	4f54      	ldr	r7, [pc, #336]	; (1000dcd4 <main+0x2c8>)
1000db82:	47b8      	blx	r7
            
            if (more) {
1000db84:	ab04      	add	r3, sp, #16
1000db86:	7b5b      	ldrb	r3, [r3, #13]
1000db88:	2b00      	cmp	r3, #0
1000db8a:	d002      	beq.n	1000db92 <main+0x186>
                hal.new_gyro = 1;
1000db8c:	2301      	movs	r3, #1
1000db8e:	4652      	mov	r2, sl
1000db90:	7113      	strb	r3, [r2, #4]
            }
            
            //if(sensors & INV_XYZ_GYRO) {
                DBG_LOG("Gyro: %d %d %d", gyro[0], gyro[1], gyro[2]);
1000db92:	9b05      	ldr	r3, [sp, #20]
1000db94:	4658      	mov	r0, fp
1000db96:	4798      	blx	r3
1000db98:	2204      	movs	r2, #4
1000db9a:	5ea3      	ldrsh	r3, [r4, r2]
1000db9c:	4f4e      	ldr	r7, [pc, #312]	; (1000dcd8 <main+0x2cc>)
1000db9e:	2102      	movs	r1, #2
1000dba0:	5e62      	ldrsh	r2, [r4, r1]
1000dba2:	2000      	movs	r0, #0
1000dba4:	5e21      	ldrsh	r1, [r4, r0]
1000dba6:	484d      	ldr	r0, [pc, #308]	; (1000dcdc <main+0x2d0>)
1000dba8:	47b8      	blx	r7
                if (temp_cnt >= 10) {
1000dbaa:	9b03      	ldr	r3, [sp, #12]
1000dbac:	2b09      	cmp	r3, #9
1000dbae:	d826      	bhi.n	1000dbfe <main+0x1f2>
                    mpu_get_temperature(&temperature, &sensor_timestamp);
                    DBG_LOG("Temp: %ld", temperature);
                }
            //}
            //if(sensors & INV_XYZ_ACCEL) {
                DBG_LOG("Accel: %d %d %d", accel_short[0], accel_short[1], accel_short[2]);
1000dbb0:	9b05      	ldr	r3, [sp, #20]
1000dbb2:	4658      	mov	r0, fp
1000dbb4:	4798      	blx	r3
1000dbb6:	2204      	movs	r2, #4
1000dbb8:	5eab      	ldrsh	r3, [r5, r2]
1000dbba:	4f47      	ldr	r7, [pc, #284]	; (1000dcd8 <main+0x2cc>)
1000dbbc:	2102      	movs	r1, #2
1000dbbe:	5e6a      	ldrsh	r2, [r5, r1]
1000dbc0:	2000      	movs	r0, #0
1000dbc2:	5e29      	ldrsh	r1, [r5, r0]
1000dbc4:	4846      	ldr	r0, [pc, #280]	; (1000dce0 <main+0x2d4>)
1000dbc6:	47b8      	blx	r7
            //}                

            if(compass_cnt > 10) {
1000dbc8:	9b04      	ldr	r3, [sp, #16]
1000dbca:	2b0a      	cmp	r3, #10
1000dbcc:	d9b6      	bls.n	1000db3c <main+0x130>
                compass_cnt = 0;
                if(!mpu_get_compass_reg(compass_short, &sensor_timestamp)) {
1000dbce:	4b45      	ldr	r3, [pc, #276]	; (1000dce4 <main+0x2d8>)
1000dbd0:	a909      	add	r1, sp, #36	; 0x24
1000dbd2:	a811      	add	r0, sp, #68	; 0x44
1000dbd4:	4798      	blx	r3
            //if(sensors & INV_XYZ_ACCEL) {
                DBG_LOG("Accel: %d %d %d", accel_short[0], accel_short[1], accel_short[2]);
            //}                

            if(compass_cnt > 10) {
                compass_cnt = 0;
1000dbd6:	2300      	movs	r3, #0
1000dbd8:	9304      	str	r3, [sp, #16]
                if(!mpu_get_compass_reg(compass_short, &sensor_timestamp)) {
1000dbda:	2800      	cmp	r0, #0
1000dbdc:	d1ae      	bne.n	1000db3c <main+0x130>
                    DBG_LOG("Compass: %d %d %d", compass_short[0], compass_short[1], compass_short[2]);
1000dbde:	9b05      	ldr	r3, [sp, #20]
1000dbe0:	4658      	mov	r0, fp
1000dbe2:	4798      	blx	r3
1000dbe4:	ab04      	add	r3, sp, #16
1000dbe6:	2238      	movs	r2, #56	; 0x38
1000dbe8:	5e9b      	ldrsh	r3, [r3, r2]
1000dbea:	aa04      	add	r2, sp, #16
1000dbec:	2136      	movs	r1, #54	; 0x36
1000dbee:	5e52      	ldrsh	r2, [r2, r1]
1000dbf0:	a904      	add	r1, sp, #16
1000dbf2:	2034      	movs	r0, #52	; 0x34
1000dbf4:	5e09      	ldrsh	r1, [r1, r0]
1000dbf6:	4f38      	ldr	r7, [pc, #224]	; (1000dcd8 <main+0x2cc>)
1000dbf8:	483b      	ldr	r0, [pc, #236]	; (1000dce8 <main+0x2dc>)
1000dbfa:	47b8      	blx	r7
                    ////DBG_LOG("Quat: %ld %ld %ld %ld", data[0], data[1], data[2], data[3]);
                //}
            //}
            //imu_interrupt = false;
        //}
    }
1000dbfc:	e79e      	b.n	1000db3c <main+0x130>
            //if(sensors & INV_XYZ_GYRO) {
                DBG_LOG("Gyro: %d %d %d", gyro[0], gyro[1], gyro[2]);
                if (temp_cnt >= 10) {
                    temp_cnt = 0;
                    /* Temperature only used for gyro temp comp. */
                    mpu_get_temperature(&temperature, &sensor_timestamp);
1000dbfe:	a909      	add	r1, sp, #36	; 0x24
1000dc00:	4b3a      	ldr	r3, [pc, #232]	; (1000dcec <main+0x2e0>)
1000dc02:	a80a      	add	r0, sp, #40	; 0x28
1000dc04:	4798      	blx	r3
                    DBG_LOG("Temp: %ld", temperature);
1000dc06:	9b05      	ldr	r3, [sp, #20]
1000dc08:	4658      	mov	r0, fp
1000dc0a:	4798      	blx	r3
1000dc0c:	4b32      	ldr	r3, [pc, #200]	; (1000dcd8 <main+0x2cc>)
1000dc0e:	990a      	ldr	r1, [sp, #40]	; 0x28
1000dc10:	4837      	ldr	r0, [pc, #220]	; (1000dcf0 <main+0x2e4>)
1000dc12:	4798      	blx	r3
            }
            
            //if(sensors & INV_XYZ_GYRO) {
                DBG_LOG("Gyro: %d %d %d", gyro[0], gyro[1], gyro[2]);
                if (temp_cnt >= 10) {
                    temp_cnt = 0;
1000dc14:	2300      	movs	r3, #0
1000dc16:	9303      	str	r3, [sp, #12]
1000dc18:	e7ca      	b.n	1000dbb0 <main+0x1a4>
            delay_ms(5000);
        }
    }
    if (result) {
        MPL_LOGE("Could not start the MPL.\n");
        system_global_reset();
1000dc1a:	47a0      	blx	r4
1000dc1c:	e741      	b.n	1000daa2 <main+0x96>
1000dc1e:	4b2a      	ldr	r3, [pc, #168]	; (1000dcc8 <main+0x2bc>)
1000dc20:	4f2a      	ldr	r7, [pc, #168]	; (1000dccc <main+0x2c0>)
1000dc22:	001e      	movs	r6, r3
1000dc24:	4d33      	ldr	r5, [pc, #204]	; (1000dcf4 <main+0x2e8>)
1000dc26:	4c34      	ldr	r4, [pc, #208]	; (1000dcf8 <main+0x2ec>)
    //inv_enable_eMPL_outputs();

    result = inv_start_mpl();
    if (result == INV_ERROR_NOT_AUTHORIZED) {
        while (1) {
            DBG_LOG("Not authorized.\n");
1000dc28:	0030      	movs	r0, r6
1000dc2a:	47b8      	blx	r7
1000dc2c:	0028      	movs	r0, r5
1000dc2e:	47b8      	blx	r7
            delay_ms(5000);
1000dc30:	4832      	ldr	r0, [pc, #200]	; (1000dcfc <main+0x2f0>)
1000dc32:	47a0      	blx	r4
1000dc34:	e7f8      	b.n	1000dc28 <main+0x21c>
    * mpu_set_bypass(1);
    */
    result = inv_init_mpl();
    if(result) {
        DBG_LOG_DEV("Could not initialize MPL.");
        system_global_reset();
1000dc36:	47a0      	blx	r4
1000dc38:	e723      	b.n	1000da82 <main+0x76>
    int_param.cb = (void*)interrupt_cb;
    int_param.pin = PIN_AO_GPIO_2;
    result = mpu_init(&int_param);
    if(result) {
        DBG_LOG_DEV("Could not initialize MPU!");
        system_global_reset();
1000dc3a:	47a0      	blx	r4
1000dc3c:	e71c      	b.n	1000da78 <main+0x6c>
1000dc3e:	46c0      	nop			; (mov r8, r8)
1000dc40:	1000bd79 	.word	0x1000bd79
1000dc44:	1000cf09 	.word	0x1000cf09
1000dc48:	1000c311 	.word	0x1000c311
1000dc4c:	1000baa5 	.word	0x1000baa5
1000dc50:	1000b305 	.word	0x1000b305
1000dc54:	1000d9cd 	.word	0x1000d9cd
1000dc58:	100080cd 	.word	0x100080cd
1000dc5c:	1000cb71 	.word	0x1000cb71
1000dc60:	1000cb81 	.word	0x1000cb81
1000dc64:	1000d959 	.word	0x1000d959
1000dc68:	1000d939 	.word	0x1000d939
1000dc6c:	1000902d 	.word	0x1000902d
1000dc70:	1000d4c1 	.word	0x1000d4c1
1000dc74:	1000a685 	.word	0x1000a685
1000dc78:	100137a1 	.word	0x100137a1
1000dc7c:	10011f95 	.word	0x10011f95
1000dc80:	10011849 	.word	0x10011849
1000dc84:	10012589 	.word	0x10012589
1000dc88:	1000a6b9 	.word	0x1000a6b9
1000dc8c:	10008e79 	.word	0x10008e79
1000dc90:	1000892d 	.word	0x1000892d
1000dc94:	10008dad 	.word	0x10008dad
1000dc98:	100088c9 	.word	0x100088c9
1000dc9c:	100088ad 	.word	0x100088ad
1000dca0:	10008685 	.word	0x10008685
1000dca4:	10008751 	.word	0x10008751
1000dca8:	10009419 	.word	0x10009419
1000dcac:	1001bfd0 	.word	0x1001bfd0
1000dcb0:	100081b5 	.word	0x100081b5
1000dcb4:	100081a1 	.word	0x100081a1
1000dcb8:	10014a75 	.word	0x10014a75
1000dcbc:	00006590 	.word	0x00006590
1000dcc0:	100096d5 	.word	0x100096d5
1000dcc4:	1000ceb5 	.word	0x1000ceb5
1000dcc8:	100191d8 	.word	0x100191d8
1000dccc:	10018035 	.word	0x10018035
1000dcd0:	1000b9c5 	.word	0x1000b9c5
1000dcd4:	10008991 	.word	0x10008991
1000dcd8:	10017f15 	.word	0x10017f15
1000dcdc:	10019e2c 	.word	0x10019e2c
1000dce0:	10019e48 	.word	0x10019e48
1000dce4:	10009361 	.word	0x10009361
1000dce8:	10019e58 	.word	0x10019e58
1000dcec:	10008465 	.word	0x10008465
1000dcf0:	10019e3c 	.word	0x10019e3c
1000dcf4:	10019e1c 	.word	0x10019e1c
1000dcf8:	1000810d 	.word	0x1000810d
1000dcfc:	00001388 	.word	0x00001388

1000dd00 <internal_event_post>:
1000dd00:	b570      	push	{r4, r5, r6, lr}
1000dd02:	4d12      	ldr	r5, [pc, #72]	; (1000dd4c <internal_event_post+0x4c>)
1000dd04:	682c      	ldr	r4, [r5, #0]
1000dd06:	2c00      	cmp	r4, #0
1000dd08:	d014      	beq.n	1000dd34 <internal_event_post+0x34>
1000dd0a:	6826      	ldr	r6, [r4, #0]
1000dd0c:	60e2      	str	r2, [r4, #12]
1000dd0e:	602e      	str	r6, [r5, #0]
1000dd10:	2500      	movs	r5, #0
1000dd12:	4a0f      	ldr	r2, [pc, #60]	; (1000dd50 <internal_event_post+0x50>)
1000dd14:	8123      	strh	r3, [r4, #8]
1000dd16:	6813      	ldr	r3, [r2, #0]
1000dd18:	6025      	str	r5, [r4, #0]
1000dd1a:	80a0      	strh	r0, [r4, #4]
1000dd1c:	80e1      	strh	r1, [r4, #6]
1000dd1e:	42ab      	cmp	r3, r5
1000dd20:	d101      	bne.n	1000dd26 <internal_event_post+0x26>
1000dd22:	6014      	str	r4, [r2, #0]
1000dd24:	e011      	b.n	1000dd4a <internal_event_post+0x4a>
1000dd26:	681a      	ldr	r2, [r3, #0]
1000dd28:	2a00      	cmp	r2, #0
1000dd2a:	d001      	beq.n	1000dd30 <internal_event_post+0x30>
1000dd2c:	1c13      	adds	r3, r2, #0
1000dd2e:	e7fa      	b.n	1000dd26 <internal_event_post+0x26>
1000dd30:	601c      	str	r4, [r3, #0]
1000dd32:	e00a      	b.n	1000dd4a <internal_event_post+0x4a>
1000dd34:	b2c4      	uxtb	r4, r0
1000dd36:	2c00      	cmp	r4, #0
1000dd38:	d107      	bne.n	1000dd4a <internal_event_post+0x4a>
1000dd3a:	4c06      	ldr	r4, [pc, #24]	; (1000dd54 <internal_event_post+0x54>)
1000dd3c:	60e2      	str	r2, [r4, #12]
1000dd3e:	2201      	movs	r2, #1
1000dd40:	8123      	strh	r3, [r4, #8]
1000dd42:	4b05      	ldr	r3, [pc, #20]	; (1000dd58 <internal_event_post+0x58>)
1000dd44:	80a0      	strh	r0, [r4, #4]
1000dd46:	80e1      	strh	r1, [r4, #6]
1000dd48:	701a      	strb	r2, [r3, #0]
1000dd4a:	bd70      	pop	{r4, r5, r6, pc}
1000dd4c:	1001c00c 	.word	0x1001c00c
1000dd50:	1001c008 	.word	0x1001c008
1000dd54:	1001bff4 	.word	0x1001bff4
1000dd58:	1001c004 	.word	0x1001c004

1000dd5c <internal_event_init>:
1000dd5c:	b510      	push	{r4, lr}
1000dd5e:	4b08      	ldr	r3, [pc, #32]	; (1000dd80 <internal_event_init+0x24>)
1000dd60:	0900      	lsrs	r0, r0, #4
1000dd62:	0100      	lsls	r0, r0, #4
1000dd64:	681a      	ldr	r2, [r3, #0]
1000dd66:	1808      	adds	r0, r1, r0
1000dd68:	4281      	cmp	r1, r0
1000dd6a:	d003      	beq.n	1000dd74 <internal_event_init+0x18>
1000dd6c:	600a      	str	r2, [r1, #0]
1000dd6e:	1c0a      	adds	r2, r1, #0
1000dd70:	3110      	adds	r1, #16
1000dd72:	e7f9      	b.n	1000dd68 <internal_event_init+0xc>
1000dd74:	601a      	str	r2, [r3, #0]
1000dd76:	2200      	movs	r2, #0
1000dd78:	4b02      	ldr	r3, [pc, #8]	; (1000dd84 <internal_event_init+0x28>)
1000dd7a:	601a      	str	r2, [r3, #0]
1000dd7c:	bd10      	pop	{r4, pc}
1000dd7e:	46c0      	nop			; (mov r8, r8)
1000dd80:	1001c00c 	.word	0x1001c00c
1000dd84:	1001c008 	.word	0x1001c008

1000dd88 <special_events_handler>:
1000dd88:	b538      	push	{r3, r4, r5, lr}
1000dd8a:	4c1b      	ldr	r4, [pc, #108]	; (1000ddf8 <special_events_handler+0x70>)
1000dd8c:	1c03      	adds	r3, r0, #0
1000dd8e:	8825      	ldrh	r5, [r4, #0]
1000dd90:	1c08      	adds	r0, r1, #0
1000dd92:	1c21      	adds	r1, r4, #0
1000dd94:	429d      	cmp	r5, r3
1000dd96:	d107      	bne.n	1000dda8 <special_events_handler+0x20>
1000dd98:	88a5      	ldrh	r5, [r4, #4]
1000dd9a:	4285      	cmp	r5, r0
1000dd9c:	d104      	bne.n	1000dda8 <special_events_handler+0x20>
1000dd9e:	2301      	movs	r3, #1
1000dda0:	425b      	negs	r3, r3
1000dda2:	8023      	strh	r3, [r4, #0]
1000dda4:	60a2      	str	r2, [r4, #8]
1000dda6:	e009      	b.n	1000ddbc <special_events_handler+0x34>
1000dda8:	884c      	ldrh	r4, [r1, #2]
1000ddaa:	429c      	cmp	r4, r3
1000ddac:	d10a      	bne.n	1000ddc4 <special_events_handler+0x3c>
1000ddae:	888c      	ldrh	r4, [r1, #4]
1000ddb0:	4284      	cmp	r4, r0
1000ddb2:	d107      	bne.n	1000ddc4 <special_events_handler+0x3c>
1000ddb4:	2301      	movs	r3, #1
1000ddb6:	425b      	negs	r3, r3
1000ddb8:	804b      	strh	r3, [r1, #2]
1000ddba:	608a      	str	r2, [r1, #8]
1000ddbc:	4b0f      	ldr	r3, [pc, #60]	; (1000ddfc <special_events_handler+0x74>)
1000ddbe:	4798      	blx	r3
1000ddc0:	2001      	movs	r0, #1
1000ddc2:	e017      	b.n	1000ddf4 <special_events_handler+0x6c>
1000ddc4:	490e      	ldr	r1, [pc, #56]	; (1000de00 <special_events_handler+0x78>)
1000ddc6:	428b      	cmp	r3, r1
1000ddc8:	d00e      	beq.n	1000dde8 <special_events_handler+0x60>
1000ddca:	490e      	ldr	r1, [pc, #56]	; (1000de04 <special_events_handler+0x7c>)
1000ddcc:	428b      	cmp	r3, r1
1000ddce:	d007      	beq.n	1000dde0 <special_events_handler+0x58>
1000ddd0:	490d      	ldr	r1, [pc, #52]	; (1000de08 <special_events_handler+0x80>)
1000ddd2:	2000      	movs	r0, #0
1000ddd4:	428b      	cmp	r3, r1
1000ddd6:	d10d      	bne.n	1000ddf4 <special_events_handler+0x6c>
1000ddd8:	1c10      	adds	r0, r2, #0
1000ddda:	4b0c      	ldr	r3, [pc, #48]	; (1000de0c <special_events_handler+0x84>)
1000dddc:	4798      	blx	r3
1000ddde:	e7ef      	b.n	1000ddc0 <special_events_handler+0x38>
1000dde0:	1c11      	adds	r1, r2, #0
1000dde2:	4b0b      	ldr	r3, [pc, #44]	; (1000de10 <special_events_handler+0x88>)
1000dde4:	2200      	movs	r2, #0
1000dde6:	e002      	b.n	1000ddee <special_events_handler+0x66>
1000dde8:	1c11      	adds	r1, r2, #0
1000ddea:	2200      	movs	r2, #0
1000ddec:	4b09      	ldr	r3, [pc, #36]	; (1000de14 <special_events_handler+0x8c>)
1000ddee:	4798      	blx	r3
1000ddf0:	4243      	negs	r3, r0
1000ddf2:	4158      	adcs	r0, r3
1000ddf4:	bd38      	pop	{r3, r4, r5, pc}
1000ddf6:	46c0      	nop			; (mov r8, r8)
1000ddf8:	1001d07c 	.word	0x1001d07c
1000ddfc:	1000ef8d 	.word	0x1000ef8d
1000de00:	00000e13 	.word	0x00000e13
1000de04:	00000e15 	.word	0x00000e15
1000de08:	00000e01 	.word	0x00000e01
1000de0c:	1000f2fd 	.word	0x1000f2fd
1000de10:	1000f4bd 	.word	0x1000f4bd
1000de14:	1000f595 	.word	0x1000f595

1000de18 <at_ble_event_get>:
1000de18:	2300      	movs	r3, #0
1000de1a:	b5f0      	push	{r4, r5, r6, r7, lr}
1000de1c:	b087      	sub	sp, #28
1000de1e:	9204      	str	r2, [sp, #16]
1000de20:	7003      	strb	r3, [r0, #0]
1000de22:	9b04      	ldr	r3, [sp, #16]
1000de24:	9003      	str	r0, [sp, #12]
1000de26:	3b01      	subs	r3, #1
1000de28:	1c0d      	adds	r5, r1, #0
1000de2a:	9305      	str	r3, [sp, #20]
1000de2c:	3303      	adds	r3, #3
1000de2e:	d802      	bhi.n	1000de36 <at_ble_event_get+0x1e>
1000de30:	9804      	ldr	r0, [sp, #16]
1000de32:	4bae      	ldr	r3, [pc, #696]	; (1000e0ec <at_ble_event_get+0x2d4>)
1000de34:	4798      	blx	r3
1000de36:	9b05      	ldr	r3, [sp, #20]
1000de38:	4cad      	ldr	r4, [pc, #692]	; (1000e0f0 <at_ble_event_get+0x2d8>)
1000de3a:	3303      	adds	r3, #3
1000de3c:	d902      	bls.n	1000de44 <at_ble_event_get+0x2c>
1000de3e:	2300      	movs	r3, #0
1000de40:	9302      	str	r3, [sp, #8]
1000de42:	e015      	b.n	1000de70 <at_ble_event_get+0x58>
1000de44:	2300      	movs	r3, #0
1000de46:	9302      	str	r3, [sp, #8]
1000de48:	6823      	ldr	r3, [r4, #0]
1000de4a:	2b00      	cmp	r3, #0
1000de4c:	d113      	bne.n	1000de76 <at_ble_event_get+0x5e>
1000de4e:	9b02      	ldr	r3, [sp, #8]
1000de50:	2bd0      	cmp	r3, #208	; 0xd0
1000de52:	d100      	bne.n	1000de56 <at_ble_event_get+0x3e>
1000de54:	e2da      	b.n	1000e40c <at_ble_event_get+0x5f4>
1000de56:	9804      	ldr	r0, [sp, #16]
1000de58:	4ba6      	ldr	r3, [pc, #664]	; (1000e0f4 <at_ble_event_get+0x2dc>)
1000de5a:	4798      	blx	r3
1000de5c:	9002      	str	r0, [sp, #8]
1000de5e:	2802      	cmp	r0, #2
1000de60:	d1f2      	bne.n	1000de48 <at_ble_event_get+0x30>
1000de62:	e03f      	b.n	1000dee4 <at_ble_event_get+0xcc>
1000de64:	9804      	ldr	r0, [sp, #16]
1000de66:	4ba3      	ldr	r3, [pc, #652]	; (1000e0f4 <at_ble_event_get+0x2dc>)
1000de68:	4798      	blx	r3
1000de6a:	9002      	str	r0, [sp, #8]
1000de6c:	2802      	cmp	r0, #2
1000de6e:	d039      	beq.n	1000dee4 <at_ble_event_get+0xcc>
1000de70:	6823      	ldr	r3, [r4, #0]
1000de72:	2b00      	cmp	r3, #0
1000de74:	d0f6      	beq.n	1000de64 <at_ble_event_get+0x4c>
1000de76:	9b02      	ldr	r3, [sp, #8]
1000de78:	2bd0      	cmp	r3, #208	; 0xd0
1000de7a:	d100      	bne.n	1000de7e <at_ble_event_get+0x66>
1000de7c:	e2c6      	b.n	1000e40c <at_ble_event_get+0x5f4>
1000de7e:	9b02      	ldr	r3, [sp, #8]
1000de80:	3b03      	subs	r3, #3
1000de82:	1e5a      	subs	r2, r3, #1
1000de84:	4193      	sbcs	r3, r2
1000de86:	9a02      	ldr	r2, [sp, #8]
1000de88:	425b      	negs	r3, r3
1000de8a:	401a      	ands	r2, r3
1000de8c:	6823      	ldr	r3, [r4, #0]
1000de8e:	9202      	str	r2, [sp, #8]
1000de90:	2b00      	cmp	r3, #0
1000de92:	d100      	bne.n	1000de96 <at_ble_event_get+0x7e>
1000de94:	e2c2      	b.n	1000e41c <at_ble_event_get+0x604>
1000de96:	681a      	ldr	r2, [r3, #0]
1000de98:	68de      	ldr	r6, [r3, #12]
1000de9a:	6022      	str	r2, [r4, #0]
1000de9c:	88da      	ldrh	r2, [r3, #6]
1000de9e:	9201      	str	r2, [sp, #4]
1000dea0:	4a95      	ldr	r2, [pc, #596]	; (1000e0f8 <at_ble_event_get+0x2e0>)
1000dea2:	889c      	ldrh	r4, [r3, #4]
1000dea4:	6811      	ldr	r1, [r2, #0]
1000dea6:	6013      	str	r3, [r2, #0]
1000dea8:	6019      	str	r1, [r3, #0]
1000deaa:	4b94      	ldr	r3, [pc, #592]	; (1000e0fc <at_ble_event_get+0x2e4>)
1000deac:	781b      	ldrb	r3, [r3, #0]
1000deae:	2b01      	cmp	r3, #1
1000deb0:	d10f      	bne.n	1000ded2 <at_ble_event_get+0xba>
1000deb2:	4b93      	ldr	r3, [pc, #588]	; (1000e100 <at_ble_event_get+0x2e8>)
1000deb4:	4a92      	ldr	r2, [pc, #584]	; (1000e100 <at_ble_event_get+0x2e8>)
1000deb6:	8898      	ldrh	r0, [r3, #4]
1000deb8:	88d9      	ldrh	r1, [r3, #6]
1000deba:	68d2      	ldr	r2, [r2, #12]
1000debc:	891b      	ldrh	r3, [r3, #8]
1000debe:	4f91      	ldr	r7, [pc, #580]	; (1000e104 <at_ble_event_get+0x2ec>)
1000dec0:	47b8      	blx	r7
1000dec2:	2210      	movs	r2, #16
1000dec4:	4b90      	ldr	r3, [pc, #576]	; (1000e108 <at_ble_event_get+0x2f0>)
1000dec6:	488e      	ldr	r0, [pc, #568]	; (1000e100 <at_ble_event_get+0x2e8>)
1000dec8:	2100      	movs	r1, #0
1000deca:	4798      	blx	r3
1000decc:	2300      	movs	r3, #0
1000dece:	4a8b      	ldr	r2, [pc, #556]	; (1000e0fc <at_ble_event_get+0x2e4>)
1000ded0:	7013      	strb	r3, [r2, #0]
1000ded2:	9b02      	ldr	r3, [sp, #8]
1000ded4:	2b00      	cmp	r3, #0
1000ded6:	d114      	bne.n	1000df02 <at_ble_event_get+0xea>
1000ded8:	4b8c      	ldr	r3, [pc, #560]	; (1000e10c <at_ble_event_get+0x2f4>)
1000deda:	429c      	cmp	r4, r3
1000dedc:	d009      	beq.n	1000def2 <at_ble_event_get+0xda>
1000dede:	4b8c      	ldr	r3, [pc, #560]	; (1000e110 <at_ble_event_get+0x2f8>)
1000dee0:	429c      	cmp	r4, r3
1000dee2:	d127      	bne.n	1000df34 <at_ble_event_get+0x11c>
1000dee4:	233a      	movs	r3, #58	; 0x3a
1000dee6:	9a03      	ldr	r2, [sp, #12]
1000dee8:	7013      	strb	r3, [r2, #0]
1000deea:	2300      	movs	r3, #0
1000deec:	9302      	str	r3, [sp, #8]
1000deee:	1c1d      	adds	r5, r3, #0
1000def0:	e007      	b.n	1000df02 <at_ble_event_get+0xea>
1000def2:	9b01      	ldr	r3, [sp, #4]
1000def4:	42a3      	cmp	r3, r4
1000def6:	d000      	beq.n	1000defa <at_ble_event_get+0xe2>
1000def8:	e28a      	b.n	1000e410 <at_ble_event_get+0x5f8>
1000defa:	2338      	movs	r3, #56	; 0x38
1000defc:	9a03      	ldr	r2, [sp, #12]
1000defe:	7013      	strb	r3, [r2, #0]
1000df00:	602e      	str	r6, [r5, #0]
1000df02:	9b03      	ldr	r3, [sp, #12]
1000df04:	781b      	ldrb	r3, [r3, #0]
1000df06:	2b3b      	cmp	r3, #59	; 0x3b
1000df08:	d101      	bne.n	1000df0e <at_ble_event_get+0xf6>
1000df0a:	4b82      	ldr	r3, [pc, #520]	; (1000e114 <at_ble_event_get+0x2fc>)
1000df0c:	4798      	blx	r3
1000df0e:	9b03      	ldr	r3, [sp, #12]
1000df10:	781b      	ldrb	r3, [r3, #0]
1000df12:	2b3b      	cmp	r3, #59	; 0x3b
1000df14:	d003      	beq.n	1000df1e <at_ble_event_get+0x106>
1000df16:	9b05      	ldr	r3, [sp, #20]
1000df18:	3303      	adds	r3, #3
1000df1a:	d904      	bls.n	1000df26 <at_ble_event_get+0x10e>
1000df1c:	e283      	b.n	1000e426 <at_ble_event_get+0x60e>
1000df1e:	9b02      	ldr	r3, [sp, #8]
1000df20:	2b00      	cmp	r3, #0
1000df22:	d088      	beq.n	1000de36 <at_ble_event_get+0x1e>
1000df24:	e7f7      	b.n	1000df16 <at_ble_event_get+0xfe>
1000df26:	9b02      	ldr	r3, [sp, #8]
1000df28:	2bd0      	cmp	r3, #208	; 0xd0
1000df2a:	d100      	bne.n	1000df2e <at_ble_event_get+0x116>
1000df2c:	e27b      	b.n	1000e426 <at_ble_event_get+0x60e>
1000df2e:	4b7a      	ldr	r3, [pc, #488]	; (1000e118 <at_ble_event_get+0x300>)
1000df30:	4798      	blx	r3
1000df32:	e278      	b.n	1000e426 <at_ble_event_get+0x60e>
1000df34:	9b01      	ldr	r3, [sp, #4]
1000df36:	2bbb      	cmp	r3, #187	; 0xbb
1000df38:	d125      	bne.n	1000df86 <at_ble_event_get+0x16e>
1000df3a:	2cbb      	cmp	r4, #187	; 0xbb
1000df3c:	d123      	bne.n	1000df86 <at_ble_event_get+0x16e>
1000df3e:	466b      	mov	r3, sp
1000df40:	891b      	ldrh	r3, [r3, #8]
1000df42:	80ab      	strh	r3, [r5, #4]
1000df44:	78b3      	ldrb	r3, [r6, #2]
1000df46:	7872      	ldrb	r2, [r6, #1]
1000df48:	78f0      	ldrb	r0, [r6, #3]
1000df4a:	021b      	lsls	r3, r3, #8
1000df4c:	4313      	orrs	r3, r2
1000df4e:	7971      	ldrb	r1, [r6, #5]
1000df50:	7932      	ldrb	r2, [r6, #4]
1000df52:	70a8      	strb	r0, [r5, #2]
1000df54:	4871      	ldr	r0, [pc, #452]	; (1000e11c <at_ble_event_get+0x304>)
1000df56:	802b      	strh	r3, [r5, #0]
1000df58:	4283      	cmp	r3, r0
1000df5a:	d806      	bhi.n	1000df6a <at_ble_event_get+0x152>
1000df5c:	4a70      	ldr	r2, [pc, #448]	; (1000e120 <at_ble_event_get+0x308>)
1000df5e:	4293      	cmp	r3, r2
1000df60:	d20b      	bcs.n	1000df7a <at_ble_event_get+0x162>
1000df62:	4a70      	ldr	r2, [pc, #448]	; (1000e124 <at_ble_event_get+0x30c>)
1000df64:	4293      	cmp	r3, r2
1000df66:	d008      	beq.n	1000df7a <at_ble_event_get+0x162>
1000df68:	e009      	b.n	1000df7e <at_ble_event_get+0x166>
1000df6a:	486f      	ldr	r0, [pc, #444]	; (1000e128 <at_ble_event_get+0x310>)
1000df6c:	4283      	cmp	r3, r0
1000df6e:	d106      	bne.n	1000df7e <at_ble_event_get+0x166>
1000df70:	020b      	lsls	r3, r1, #8
1000df72:	4313      	orrs	r3, r2
1000df74:	80ab      	strh	r3, [r5, #4]
1000df76:	2337      	movs	r3, #55	; 0x37
1000df78:	e002      	b.n	1000df80 <at_ble_event_get+0x168>
1000df7a:	2336      	movs	r3, #54	; 0x36
1000df7c:	e000      	b.n	1000df80 <at_ble_event_get+0x168>
1000df7e:	2300      	movs	r3, #0
1000df80:	9a03      	ldr	r2, [sp, #12]
1000df82:	7013      	strb	r3, [r2, #0]
1000df84:	e7bd      	b.n	1000df02 <at_ble_event_get+0xea>
1000df86:	4b69      	ldr	r3, [pc, #420]	; (1000e12c <at_ble_event_get+0x314>)
1000df88:	429c      	cmp	r4, r3
1000df8a:	d100      	bne.n	1000df8e <at_ble_event_get+0x176>
1000df8c:	e144      	b.n	1000e218 <at_ble_event_get+0x400>
1000df8e:	d865      	bhi.n	1000e05c <at_ble_event_get+0x244>
1000df90:	4b67      	ldr	r3, [pc, #412]	; (1000e130 <at_ble_event_get+0x318>)
1000df92:	429c      	cmp	r4, r3
1000df94:	d100      	bne.n	1000df98 <at_ble_event_get+0x180>
1000df96:	e1d5      	b.n	1000e344 <at_ble_event_get+0x52c>
1000df98:	d82f      	bhi.n	1000dffa <at_ble_event_get+0x1e2>
1000df9a:	4b66      	ldr	r3, [pc, #408]	; (1000e134 <at_ble_event_get+0x31c>)
1000df9c:	429c      	cmp	r4, r3
1000df9e:	d100      	bne.n	1000dfa2 <at_ble_event_get+0x18a>
1000dfa0:	e1e0      	b.n	1000e364 <at_ble_event_get+0x54c>
1000dfa2:	d813      	bhi.n	1000dfcc <at_ble_event_get+0x1b4>
1000dfa4:	4b64      	ldr	r3, [pc, #400]	; (1000e138 <at_ble_event_get+0x320>)
1000dfa6:	429c      	cmp	r4, r3
1000dfa8:	d100      	bne.n	1000dfac <at_ble_event_get+0x194>
1000dfaa:	e1a3      	b.n	1000e2f4 <at_ble_event_get+0x4dc>
1000dfac:	d804      	bhi.n	1000dfb8 <at_ble_event_get+0x1a0>
1000dfae:	2638      	movs	r6, #56	; 0x38
1000dfb0:	42b4      	cmp	r4, r6
1000dfb2:	d100      	bne.n	1000dfb6 <at_ble_event_get+0x19e>
1000dfb4:	e225      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000dfb6:	e117      	b.n	1000e1e8 <at_ble_event_get+0x3d0>
1000dfb8:	4b60      	ldr	r3, [pc, #384]	; (1000e13c <at_ble_event_get+0x324>)
1000dfba:	429c      	cmp	r4, r3
1000dfbc:	d100      	bne.n	1000dfc0 <at_ble_event_get+0x1a8>
1000dfbe:	e19f      	b.n	1000e300 <at_ble_event_get+0x4e8>
1000dfc0:	33fe      	adds	r3, #254	; 0xfe
1000dfc2:	33ff      	adds	r3, #255	; 0xff
1000dfc4:	429c      	cmp	r4, r3
1000dfc6:	d100      	bne.n	1000dfca <at_ble_event_get+0x1b2>
1000dfc8:	e1d3      	b.n	1000e372 <at_ble_event_get+0x55a>
1000dfca:	e10d      	b.n	1000e1e8 <at_ble_event_get+0x3d0>
1000dfcc:	4b5c      	ldr	r3, [pc, #368]	; (1000e140 <at_ble_event_get+0x328>)
1000dfce:	429c      	cmp	r4, r3
1000dfd0:	d100      	bne.n	1000dfd4 <at_ble_event_get+0x1bc>
1000dfd2:	e1a9      	b.n	1000e328 <at_ble_event_get+0x510>
1000dfd4:	d808      	bhi.n	1000dfe8 <at_ble_event_get+0x1d0>
1000dfd6:	4b5b      	ldr	r3, [pc, #364]	; (1000e144 <at_ble_event_get+0x32c>)
1000dfd8:	429c      	cmp	r4, r3
1000dfda:	d100      	bne.n	1000dfde <at_ble_event_get+0x1c6>
1000dfdc:	e196      	b.n	1000e30c <at_ble_event_get+0x4f4>
1000dfde:	4b5a      	ldr	r3, [pc, #360]	; (1000e148 <at_ble_event_get+0x330>)
1000dfe0:	429c      	cmp	r4, r3
1000dfe2:	d100      	bne.n	1000dfe6 <at_ble_event_get+0x1ce>
1000dfe4:	e199      	b.n	1000e31a <at_ble_event_get+0x502>
1000dfe6:	e0ff      	b.n	1000e1e8 <at_ble_event_get+0x3d0>
1000dfe8:	4b58      	ldr	r3, [pc, #352]	; (1000e14c <at_ble_event_get+0x334>)
1000dfea:	429c      	cmp	r4, r3
1000dfec:	d100      	bne.n	1000dff0 <at_ble_event_get+0x1d8>
1000dfee:	e1a2      	b.n	1000e336 <at_ble_event_get+0x51e>
1000dff0:	4b57      	ldr	r3, [pc, #348]	; (1000e150 <at_ble_event_get+0x338>)
1000dff2:	429c      	cmp	r4, r3
1000dff4:	d100      	bne.n	1000dff8 <at_ble_event_get+0x1e0>
1000dff6:	e1d4      	b.n	1000e3a2 <at_ble_event_get+0x58a>
1000dff8:	e0f6      	b.n	1000e1e8 <at_ble_event_get+0x3d0>
1000dffa:	4b56      	ldr	r3, [pc, #344]	; (1000e154 <at_ble_event_get+0x33c>)
1000dffc:	429c      	cmp	r4, r3
1000dffe:	d100      	bne.n	1000e002 <at_ble_event_get+0x1ea>
1000e000:	e1c8      	b.n	1000e394 <at_ble_event_get+0x57c>
1000e002:	d812      	bhi.n	1000e02a <at_ble_event_get+0x212>
1000e004:	4b54      	ldr	r3, [pc, #336]	; (1000e158 <at_ble_event_get+0x340>)
1000e006:	429c      	cmp	r4, r3
1000e008:	d100      	bne.n	1000e00c <at_ble_event_get+0x1f4>
1000e00a:	e1d1      	b.n	1000e3b0 <at_ble_event_get+0x598>
1000e00c:	d804      	bhi.n	1000e018 <at_ble_event_get+0x200>
1000e00e:	4b53      	ldr	r3, [pc, #332]	; (1000e15c <at_ble_event_get+0x344>)
1000e010:	429c      	cmp	r4, r3
1000e012:	d100      	bne.n	1000e016 <at_ble_event_get+0x1fe>
1000e014:	e19b      	b.n	1000e34e <at_ble_event_get+0x536>
1000e016:	e0e7      	b.n	1000e1e8 <at_ble_event_get+0x3d0>
1000e018:	4b51      	ldr	r3, [pc, #324]	; (1000e160 <at_ble_event_get+0x348>)
1000e01a:	429c      	cmp	r4, r3
1000e01c:	d100      	bne.n	1000e020 <at_ble_event_get+0x208>
1000e01e:	e1ad      	b.n	1000e37c <at_ble_event_get+0x564>
1000e020:	4b50      	ldr	r3, [pc, #320]	; (1000e164 <at_ble_event_get+0x34c>)
1000e022:	429c      	cmp	r4, r3
1000e024:	d100      	bne.n	1000e028 <at_ble_event_get+0x210>
1000e026:	e1b0      	b.n	1000e38a <at_ble_event_get+0x572>
1000e028:	e0de      	b.n	1000e1e8 <at_ble_event_get+0x3d0>
1000e02a:	4b4f      	ldr	r3, [pc, #316]	; (1000e168 <at_ble_event_get+0x350>)
1000e02c:	429c      	cmp	r4, r3
1000e02e:	d100      	bne.n	1000e032 <at_ble_event_get+0x21a>
1000e030:	e0e0      	b.n	1000e1f4 <at_ble_event_get+0x3dc>
1000e032:	d809      	bhi.n	1000e048 <at_ble_event_get+0x230>
1000e034:	3b08      	subs	r3, #8
1000e036:	429c      	cmp	r4, r3
1000e038:	d100      	bne.n	1000e03c <at_ble_event_get+0x224>
1000e03a:	e0d7      	b.n	1000e1ec <at_ble_event_get+0x3d4>
1000e03c:	4b4b      	ldr	r3, [pc, #300]	; (1000e16c <at_ble_event_get+0x354>)
1000e03e:	2639      	movs	r6, #57	; 0x39
1000e040:	429c      	cmp	r4, r3
1000e042:	d100      	bne.n	1000e046 <at_ble_event_get+0x22e>
1000e044:	e1dd      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e046:	e0cf      	b.n	1000e1e8 <at_ble_event_get+0x3d0>
1000e048:	23d1      	movs	r3, #209	; 0xd1
1000e04a:	011b      	lsls	r3, r3, #4
1000e04c:	429c      	cmp	r4, r3
1000e04e:	d100      	bne.n	1000e052 <at_ble_event_get+0x23a>
1000e050:	e0d6      	b.n	1000e200 <at_ble_event_get+0x3e8>
1000e052:	4b47      	ldr	r3, [pc, #284]	; (1000e170 <at_ble_event_get+0x358>)
1000e054:	429c      	cmp	r4, r3
1000e056:	d100      	bne.n	1000e05a <at_ble_event_get+0x242>
1000e058:	e0d8      	b.n	1000e20c <at_ble_event_get+0x3f4>
1000e05a:	e0c5      	b.n	1000e1e8 <at_ble_event_get+0x3d0>
1000e05c:	4b45      	ldr	r3, [pc, #276]	; (1000e174 <at_ble_event_get+0x35c>)
1000e05e:	429c      	cmp	r4, r3
1000e060:	d100      	bne.n	1000e064 <at_ble_event_get+0x24c>
1000e062:	e117      	b.n	1000e294 <at_ble_event_get+0x47c>
1000e064:	d82e      	bhi.n	1000e0c4 <at_ble_event_get+0x2ac>
1000e066:	4b44      	ldr	r3, [pc, #272]	; (1000e178 <at_ble_event_get+0x360>)
1000e068:	429c      	cmp	r4, r3
1000e06a:	d100      	bne.n	1000e06e <at_ble_event_get+0x256>
1000e06c:	e13d      	b.n	1000e2ea <at_ble_event_get+0x4d2>
1000e06e:	d812      	bhi.n	1000e096 <at_ble_event_get+0x27e>
1000e070:	4b42      	ldr	r3, [pc, #264]	; (1000e17c <at_ble_event_get+0x364>)
1000e072:	429c      	cmp	r4, r3
1000e074:	d100      	bne.n	1000e078 <at_ble_event_get+0x260>
1000e076:	e0e8      	b.n	1000e24a <at_ble_event_get+0x432>
1000e078:	d804      	bhi.n	1000e084 <at_ble_event_get+0x26c>
1000e07a:	3b03      	subs	r3, #3
1000e07c:	429c      	cmp	r4, r3
1000e07e:	d100      	bne.n	1000e082 <at_ble_event_get+0x26a>
1000e080:	e0d0      	b.n	1000e224 <at_ble_event_get+0x40c>
1000e082:	e0b1      	b.n	1000e1e8 <at_ble_event_get+0x3d0>
1000e084:	4b3e      	ldr	r3, [pc, #248]	; (1000e180 <at_ble_event_get+0x368>)
1000e086:	429c      	cmp	r4, r3
1000e088:	d100      	bne.n	1000e08c <at_ble_event_get+0x274>
1000e08a:	e0d0      	b.n	1000e22e <at_ble_event_get+0x416>
1000e08c:	4b3d      	ldr	r3, [pc, #244]	; (1000e184 <at_ble_event_get+0x36c>)
1000e08e:	429c      	cmp	r4, r3
1000e090:	d100      	bne.n	1000e094 <at_ble_event_get+0x27c>
1000e092:	e0f9      	b.n	1000e288 <at_ble_event_get+0x470>
1000e094:	e0a8      	b.n	1000e1e8 <at_ble_event_get+0x3d0>
1000e096:	4b3c      	ldr	r3, [pc, #240]	; (1000e188 <at_ble_event_get+0x370>)
1000e098:	429c      	cmp	r4, r3
1000e09a:	d100      	bne.n	1000e09e <at_ble_event_get+0x286>
1000e09c:	e0db      	b.n	1000e256 <at_ble_event_get+0x43e>
1000e09e:	d808      	bhi.n	1000e0b2 <at_ble_event_get+0x29a>
1000e0a0:	4b3a      	ldr	r3, [pc, #232]	; (1000e18c <at_ble_event_get+0x374>)
1000e0a2:	429c      	cmp	r4, r3
1000e0a4:	d100      	bne.n	1000e0a8 <at_ble_event_get+0x290>
1000e0a6:	e11b      	b.n	1000e2e0 <at_ble_event_get+0x4c8>
1000e0a8:	4b39      	ldr	r3, [pc, #228]	; (1000e190 <at_ble_event_get+0x378>)
1000e0aa:	429c      	cmp	r4, r3
1000e0ac:	d100      	bne.n	1000e0b0 <at_ble_event_get+0x298>
1000e0ae:	e0d8      	b.n	1000e262 <at_ble_event_get+0x44a>
1000e0b0:	e09a      	b.n	1000e1e8 <at_ble_event_get+0x3d0>
1000e0b2:	4b38      	ldr	r3, [pc, #224]	; (1000e194 <at_ble_event_get+0x37c>)
1000e0b4:	429c      	cmp	r4, r3
1000e0b6:	d100      	bne.n	1000e0ba <at_ble_event_get+0x2a2>
1000e0b8:	e0d8      	b.n	1000e26c <at_ble_event_get+0x454>
1000e0ba:	4b37      	ldr	r3, [pc, #220]	; (1000e198 <at_ble_event_get+0x380>)
1000e0bc:	429c      	cmp	r4, r3
1000e0be:	d100      	bne.n	1000e0c2 <at_ble_event_get+0x2aa>
1000e0c0:	e0db      	b.n	1000e27a <at_ble_event_get+0x462>
1000e0c2:	e091      	b.n	1000e1e8 <at_ble_event_get+0x3d0>
1000e0c4:	4b35      	ldr	r3, [pc, #212]	; (1000e19c <at_ble_event_get+0x384>)
1000e0c6:	429c      	cmp	r4, r3
1000e0c8:	d100      	bne.n	1000e0cc <at_ble_event_get+0x2b4>
1000e0ca:	e0f7      	b.n	1000e2bc <at_ble_event_get+0x4a4>
1000e0cc:	d876      	bhi.n	1000e1bc <at_ble_event_get+0x3a4>
1000e0ce:	4b34      	ldr	r3, [pc, #208]	; (1000e1a0 <at_ble_event_get+0x388>)
1000e0d0:	429c      	cmp	r4, r3
1000e0d2:	d100      	bne.n	1000e0d6 <at_ble_event_get+0x2be>
1000e0d4:	e0f8      	b.n	1000e2c8 <at_ble_event_get+0x4b0>
1000e0d6:	d869      	bhi.n	1000e1ac <at_ble_event_get+0x394>
1000e0d8:	4b32      	ldr	r3, [pc, #200]	; (1000e1a4 <at_ble_event_get+0x38c>)
1000e0da:	429c      	cmp	r4, r3
1000e0dc:	d100      	bne.n	1000e0e0 <at_ble_event_get+0x2c8>
1000e0de:	e0e0      	b.n	1000e2a2 <at_ble_event_get+0x48a>
1000e0e0:	4b31      	ldr	r3, [pc, #196]	; (1000e1a8 <at_ble_event_get+0x390>)
1000e0e2:	429c      	cmp	r4, r3
1000e0e4:	d100      	bne.n	1000e0e8 <at_ble_event_get+0x2d0>
1000e0e6:	e0a9      	b.n	1000e23c <at_ble_event_get+0x424>
1000e0e8:	e07e      	b.n	1000e1e8 <at_ble_event_get+0x3d0>
1000e0ea:	46c0      	nop			; (mov r8, r8)
1000e0ec:	1000efc5 	.word	0x1000efc5
1000e0f0:	1001c008 	.word	0x1001c008
1000e0f4:	1000c095 	.word	0x1000c095
1000e0f8:	1001c00c 	.word	0x1001c00c
1000e0fc:	1001c004 	.word	0x1001c004
1000e100:	1001bff4 	.word	0x1001bff4
1000e104:	1000dd01 	.word	0x1000dd01
1000e108:	10017dcb 	.word	0x10017dcb
1000e10c:	0000ffff 	.word	0x0000ffff
1000e110:	0000fffe 	.word	0x0000fffe
1000e114:	1000c325 	.word	0x1000c325
1000e118:	1000efc7 	.word	0x1000efc7
1000e11c:	0000201e 	.word	0x0000201e
1000e120:	0000201d 	.word	0x0000201d
1000e124:	00000c03 	.word	0x00000c03
1000e128:	0000201f 	.word	0x0000201f
1000e12c:	00000d1c 	.word	0x00000d1c
1000e130:	00000c0c 	.word	0x00000c0c
1000e134:	00000c02 	.word	0x00000c02
1000e138:	00000a02 	.word	0x00000a02
1000e13c:	00000a03 	.word	0x00000a03
1000e140:	00000c06 	.word	0x00000c06
1000e144:	00000c04 	.word	0x00000c04
1000e148:	00000c05 	.word	0x00000c05
1000e14c:	00000c07 	.word	0x00000c07
1000e150:	00000c09 	.word	0x00000c09
1000e154:	00000c17 	.word	0x00000c17
1000e158:	00000c12 	.word	0x00000c12
1000e15c:	00000c0d 	.word	0x00000c0d
1000e160:	00000c13 	.word	0x00000c13
1000e164:	00000c15 	.word	0x00000c15
1000e168:	00000d08 	.word	0x00000d08
1000e16c:	00000d01 	.word	0x00000d01
1000e170:	00000d15 	.word	0x00000d15
1000e174:	00000e1b 	.word	0x00000e1b
1000e178:	00000e0f 	.word	0x00000e0f
1000e17c:	00000e03 	.word	0x00000e03
1000e180:	00000e06 	.word	0x00000e06
1000e184:	00000e0a 	.word	0x00000e0a
1000e188:	00000e15 	.word	0x00000e15
1000e18c:	00000e11 	.word	0x00000e11
1000e190:	00000e13 	.word	0x00000e13
1000e194:	00000e17 	.word	0x00000e17
1000e198:	00000e19 	.word	0x00000e19
1000e19c:	00000e27 	.word	0x00000e27
1000e1a0:	00000e21 	.word	0x00000e21
1000e1a4:	00000e1c 	.word	0x00000e1c
1000e1a8:	00000e1d 	.word	0x00000e1d
1000e1ac:	4b9f      	ldr	r3, [pc, #636]	; (1000e42c <at_ble_event_get+0x614>)
1000e1ae:	429c      	cmp	r4, r3
1000e1b0:	d07e      	beq.n	1000e2b0 <at_ble_event_get+0x498>
1000e1b2:	4b9f      	ldr	r3, [pc, #636]	; (1000e430 <at_ble_event_get+0x618>)
1000e1b4:	429c      	cmp	r4, r3
1000e1b6:	d100      	bne.n	1000e1ba <at_ble_event_get+0x3a2>
1000e1b8:	e08c      	b.n	1000e2d4 <at_ble_event_get+0x4bc>
1000e1ba:	e015      	b.n	1000e1e8 <at_ble_event_get+0x3d0>
1000e1bc:	4b9d      	ldr	r3, [pc, #628]	; (1000e434 <at_ble_event_get+0x61c>)
1000e1be:	429c      	cmp	r4, r3
1000e1c0:	d100      	bne.n	1000e1c4 <at_ble_event_get+0x3ac>
1000e1c2:	e10a      	b.n	1000e3da <at_ble_event_get+0x5c2>
1000e1c4:	d808      	bhi.n	1000e1d8 <at_ble_event_get+0x3c0>
1000e1c6:	4b9c      	ldr	r3, [pc, #624]	; (1000e438 <at_ble_event_get+0x620>)
1000e1c8:	429c      	cmp	r4, r3
1000e1ca:	d100      	bne.n	1000e1ce <at_ble_event_get+0x3b6>
1000e1cc:	e0f7      	b.n	1000e3be <at_ble_event_get+0x5a6>
1000e1ce:	4b9b      	ldr	r3, [pc, #620]	; (1000e43c <at_ble_event_get+0x624>)
1000e1d0:	429c      	cmp	r4, r3
1000e1d2:	d100      	bne.n	1000e1d6 <at_ble_event_get+0x3be>
1000e1d4:	e0fa      	b.n	1000e3cc <at_ble_event_get+0x5b4>
1000e1d6:	e007      	b.n	1000e1e8 <at_ble_event_get+0x3d0>
1000e1d8:	4b99      	ldr	r3, [pc, #612]	; (1000e440 <at_ble_event_get+0x628>)
1000e1da:	429c      	cmp	r4, r3
1000e1dc:	d100      	bne.n	1000e1e0 <at_ble_event_get+0x3c8>
1000e1de:	e103      	b.n	1000e3e8 <at_ble_event_get+0x5d0>
1000e1e0:	4b98      	ldr	r3, [pc, #608]	; (1000e444 <at_ble_event_get+0x62c>)
1000e1e2:	429c      	cmp	r4, r3
1000e1e4:	d100      	bne.n	1000e1e8 <at_ble_event_get+0x3d0>
1000e1e6:	e106      	b.n	1000e3f6 <at_ble_event_get+0x5de>
1000e1e8:	2600      	movs	r6, #0
1000e1ea:	e10a      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e1ec:	1c30      	adds	r0, r6, #0
1000e1ee:	1c29      	adds	r1, r5, #0
1000e1f0:	4b95      	ldr	r3, [pc, #596]	; (1000e448 <at_ble_event_get+0x630>)
1000e1f2:	e014      	b.n	1000e21e <at_ble_event_get+0x406>
1000e1f4:	1c30      	adds	r0, r6, #0
1000e1f6:	1c29      	adds	r1, r5, #0
1000e1f8:	4b94      	ldr	r3, [pc, #592]	; (1000e44c <at_ble_event_get+0x634>)
1000e1fa:	4798      	blx	r3
1000e1fc:	2604      	movs	r6, #4
1000e1fe:	e100      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e200:	1c30      	adds	r0, r6, #0
1000e202:	1c29      	adds	r1, r5, #0
1000e204:	4b92      	ldr	r3, [pc, #584]	; (1000e450 <at_ble_event_get+0x638>)
1000e206:	4798      	blx	r3
1000e208:	2601      	movs	r6, #1
1000e20a:	e0fa      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e20c:	1c30      	adds	r0, r6, #0
1000e20e:	1c29      	adds	r1, r5, #0
1000e210:	4b90      	ldr	r3, [pc, #576]	; (1000e454 <at_ble_event_get+0x63c>)
1000e212:	4798      	blx	r3
1000e214:	260f      	movs	r6, #15
1000e216:	e0f4      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e218:	1c30      	adds	r0, r6, #0
1000e21a:	1c29      	adds	r1, r5, #0
1000e21c:	4b8e      	ldr	r3, [pc, #568]	; (1000e458 <at_ble_event_get+0x640>)
1000e21e:	4798      	blx	r3
1000e220:	1c06      	adds	r6, r0, #0
1000e222:	e0ee      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e224:	9801      	ldr	r0, [sp, #4]
1000e226:	1c31      	adds	r1, r6, #0
1000e228:	1c2a      	adds	r2, r5, #0
1000e22a:	4b8c      	ldr	r3, [pc, #560]	; (1000e45c <at_ble_event_get+0x644>)
1000e22c:	e017      	b.n	1000e25e <at_ble_event_get+0x446>
1000e22e:	1c31      	adds	r1, r6, #0
1000e230:	9801      	ldr	r0, [sp, #4]
1000e232:	1c2a      	adds	r2, r5, #0
1000e234:	4b8a      	ldr	r3, [pc, #552]	; (1000e460 <at_ble_event_get+0x648>)
1000e236:	4798      	blx	r3
1000e238:	2611      	movs	r6, #17
1000e23a:	e0e2      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e23c:	1c31      	adds	r1, r6, #0
1000e23e:	9801      	ldr	r0, [sp, #4]
1000e240:	1c2a      	adds	r2, r5, #0
1000e242:	4b88      	ldr	r3, [pc, #544]	; (1000e464 <at_ble_event_get+0x64c>)
1000e244:	4798      	blx	r3
1000e246:	2612      	movs	r6, #18
1000e248:	e0db      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e24a:	1c30      	adds	r0, r6, #0
1000e24c:	1c29      	adds	r1, r5, #0
1000e24e:	4b86      	ldr	r3, [pc, #536]	; (1000e468 <at_ble_event_get+0x650>)
1000e250:	4798      	blx	r3
1000e252:	2606      	movs	r6, #6
1000e254:	e0d5      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e256:	1c31      	adds	r1, r6, #0
1000e258:	1c2a      	adds	r2, r5, #0
1000e25a:	9801      	ldr	r0, [sp, #4]
1000e25c:	4b83      	ldr	r3, [pc, #524]	; (1000e46c <at_ble_event_get+0x654>)
1000e25e:	4798      	blx	r3
1000e260:	e7de      	b.n	1000e220 <at_ble_event_get+0x408>
1000e262:	9801      	ldr	r0, [sp, #4]
1000e264:	1c31      	adds	r1, r6, #0
1000e266:	1c2a      	adds	r2, r5, #0
1000e268:	4b81      	ldr	r3, [pc, #516]	; (1000e470 <at_ble_event_get+0x658>)
1000e26a:	e7f8      	b.n	1000e25e <at_ble_event_get+0x446>
1000e26c:	1c31      	adds	r1, r6, #0
1000e26e:	9801      	ldr	r0, [sp, #4]
1000e270:	1c2a      	adds	r2, r5, #0
1000e272:	4b80      	ldr	r3, [pc, #512]	; (1000e474 <at_ble_event_get+0x65c>)
1000e274:	4798      	blx	r3
1000e276:	260d      	movs	r6, #13
1000e278:	e0c3      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e27a:	1c31      	adds	r1, r6, #0
1000e27c:	9801      	ldr	r0, [sp, #4]
1000e27e:	1c2a      	adds	r2, r5, #0
1000e280:	4b7d      	ldr	r3, [pc, #500]	; (1000e478 <at_ble_event_get+0x660>)
1000e282:	4798      	blx	r3
1000e284:	260e      	movs	r6, #14
1000e286:	e0bc      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e288:	9801      	ldr	r0, [sp, #4]
1000e28a:	1c31      	adds	r1, r6, #0
1000e28c:	1c2a      	adds	r2, r5, #0
1000e28e:	4b7b      	ldr	r3, [pc, #492]	; (1000e47c <at_ble_event_get+0x664>)
1000e290:	4798      	blx	r3
1000e292:	e084      	b.n	1000e39e <at_ble_event_get+0x586>
1000e294:	1c31      	adds	r1, r6, #0
1000e296:	9801      	ldr	r0, [sp, #4]
1000e298:	1c2a      	adds	r2, r5, #0
1000e29a:	4b79      	ldr	r3, [pc, #484]	; (1000e480 <at_ble_event_get+0x668>)
1000e29c:	4798      	blx	r3
1000e29e:	260b      	movs	r6, #11
1000e2a0:	e0af      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e2a2:	1c31      	adds	r1, r6, #0
1000e2a4:	9801      	ldr	r0, [sp, #4]
1000e2a6:	1c2a      	adds	r2, r5, #0
1000e2a8:	4b76      	ldr	r3, [pc, #472]	; (1000e484 <at_ble_event_get+0x66c>)
1000e2aa:	4798      	blx	r3
1000e2ac:	2610      	movs	r6, #16
1000e2ae:	e0a8      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e2b0:	1c30      	adds	r0, r6, #0
1000e2b2:	1c29      	adds	r1, r5, #0
1000e2b4:	4b74      	ldr	r3, [pc, #464]	; (1000e488 <at_ble_event_get+0x670>)
1000e2b6:	4798      	blx	r3
1000e2b8:	2628      	movs	r6, #40	; 0x28
1000e2ba:	e0a2      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e2bc:	1c30      	adds	r0, r6, #0
1000e2be:	1c29      	adds	r1, r5, #0
1000e2c0:	4b72      	ldr	r3, [pc, #456]	; (1000e48c <at_ble_event_get+0x674>)
1000e2c2:	4798      	blx	r3
1000e2c4:	2629      	movs	r6, #41	; 0x29
1000e2c6:	e09c      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e2c8:	1c30      	adds	r0, r6, #0
1000e2ca:	1c29      	adds	r1, r5, #0
1000e2cc:	4b70      	ldr	r3, [pc, #448]	; (1000e490 <at_ble_event_get+0x678>)
1000e2ce:	4798      	blx	r3
1000e2d0:	2627      	movs	r6, #39	; 0x27
1000e2d2:	e096      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e2d4:	1c30      	adds	r0, r6, #0
1000e2d6:	1c29      	adds	r1, r5, #0
1000e2d8:	4b6e      	ldr	r3, [pc, #440]	; (1000e494 <at_ble_event_get+0x67c>)
1000e2da:	4798      	blx	r3
1000e2dc:	262a      	movs	r6, #42	; 0x2a
1000e2de:	e090      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e2e0:	9801      	ldr	r0, [sp, #4]
1000e2e2:	1c31      	adds	r1, r6, #0
1000e2e4:	1c2a      	adds	r2, r5, #0
1000e2e6:	4b6c      	ldr	r3, [pc, #432]	; (1000e498 <at_ble_event_get+0x680>)
1000e2e8:	e7b9      	b.n	1000e25e <at_ble_event_get+0x446>
1000e2ea:	9801      	ldr	r0, [sp, #4]
1000e2ec:	1c31      	adds	r1, r6, #0
1000e2ee:	1c2a      	adds	r2, r5, #0
1000e2f0:	4b6a      	ldr	r3, [pc, #424]	; (1000e49c <at_ble_event_get+0x684>)
1000e2f2:	e7b4      	b.n	1000e25e <at_ble_event_get+0x446>
1000e2f4:	1c30      	adds	r0, r6, #0
1000e2f6:	1c29      	adds	r1, r5, #0
1000e2f8:	4b69      	ldr	r3, [pc, #420]	; (1000e4a0 <at_ble_event_get+0x688>)
1000e2fa:	4798      	blx	r3
1000e2fc:	262b      	movs	r6, #43	; 0x2b
1000e2fe:	e080      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e300:	1c30      	adds	r0, r6, #0
1000e302:	1c29      	adds	r1, r5, #0
1000e304:	4b67      	ldr	r3, [pc, #412]	; (1000e4a4 <at_ble_event_get+0x68c>)
1000e306:	4798      	blx	r3
1000e308:	262c      	movs	r6, #44	; 0x2c
1000e30a:	e07a      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e30c:	1c31      	adds	r1, r6, #0
1000e30e:	9801      	ldr	r0, [sp, #4]
1000e310:	1c2a      	adds	r2, r5, #0
1000e312:	4b65      	ldr	r3, [pc, #404]	; (1000e4a8 <at_ble_event_get+0x690>)
1000e314:	4798      	blx	r3
1000e316:	2613      	movs	r6, #19
1000e318:	e073      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e31a:	1c31      	adds	r1, r6, #0
1000e31c:	9801      	ldr	r0, [sp, #4]
1000e31e:	1c2a      	adds	r2, r5, #0
1000e320:	4b62      	ldr	r3, [pc, #392]	; (1000e4ac <at_ble_event_get+0x694>)
1000e322:	4798      	blx	r3
1000e324:	2614      	movs	r6, #20
1000e326:	e06c      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e328:	1c31      	adds	r1, r6, #0
1000e32a:	9801      	ldr	r0, [sp, #4]
1000e32c:	1c2a      	adds	r2, r5, #0
1000e32e:	4b60      	ldr	r3, [pc, #384]	; (1000e4b0 <at_ble_event_get+0x698>)
1000e330:	4798      	blx	r3
1000e332:	2615      	movs	r6, #21
1000e334:	e065      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e336:	1c31      	adds	r1, r6, #0
1000e338:	9801      	ldr	r0, [sp, #4]
1000e33a:	1c2a      	adds	r2, r5, #0
1000e33c:	4b5d      	ldr	r3, [pc, #372]	; (1000e4b4 <at_ble_event_get+0x69c>)
1000e33e:	4798      	blx	r3
1000e340:	2616      	movs	r6, #22
1000e342:	e05e      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e344:	9801      	ldr	r0, [sp, #4]
1000e346:	1c31      	adds	r1, r6, #0
1000e348:	1c2a      	adds	r2, r5, #0
1000e34a:	4b5b      	ldr	r3, [pc, #364]	; (1000e4b8 <at_ble_event_get+0x6a0>)
1000e34c:	e787      	b.n	1000e25e <at_ble_event_get+0x446>
1000e34e:	1c31      	adds	r1, r6, #0
1000e350:	9801      	ldr	r0, [sp, #4]
1000e352:	1c2a      	adds	r2, r5, #0
1000e354:	4b58      	ldr	r3, [pc, #352]	; (1000e4b8 <at_ble_event_get+0x6a0>)
1000e356:	4798      	blx	r3
1000e358:	88a9      	ldrh	r1, [r5, #4]
1000e35a:	1c06      	adds	r6, r0, #0
1000e35c:	4b57      	ldr	r3, [pc, #348]	; (1000e4bc <at_ble_event_get+0x6a4>)
1000e35e:	8828      	ldrh	r0, [r5, #0]
1000e360:	4798      	blx	r3
1000e362:	e04e      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e364:	1c31      	adds	r1, r6, #0
1000e366:	9801      	ldr	r0, [sp, #4]
1000e368:	1c2a      	adds	r2, r5, #0
1000e36a:	4b55      	ldr	r3, [pc, #340]	; (1000e4c0 <at_ble_event_get+0x6a8>)
1000e36c:	4798      	blx	r3
1000e36e:	2623      	movs	r6, #35	; 0x23
1000e370:	e047      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e372:	9801      	ldr	r0, [sp, #4]
1000e374:	1c31      	adds	r1, r6, #0
1000e376:	1c2a      	adds	r2, r5, #0
1000e378:	4b52      	ldr	r3, [pc, #328]	; (1000e4c4 <at_ble_event_get+0x6ac>)
1000e37a:	e770      	b.n	1000e25e <at_ble_event_get+0x446>
1000e37c:	9b01      	ldr	r3, [sp, #4]
1000e37e:	1c30      	adds	r0, r6, #0
1000e380:	0a1f      	lsrs	r7, r3, #8
1000e382:	802f      	strh	r7, [r5, #0]
1000e384:	1c29      	adds	r1, r5, #0
1000e386:	4b50      	ldr	r3, [pc, #320]	; (1000e4c8 <at_ble_event_get+0x6b0>)
1000e388:	e749      	b.n	1000e21e <at_ble_event_get+0x406>
1000e38a:	9801      	ldr	r0, [sp, #4]
1000e38c:	1c31      	adds	r1, r6, #0
1000e38e:	1c2a      	adds	r2, r5, #0
1000e390:	4b4e      	ldr	r3, [pc, #312]	; (1000e4cc <at_ble_event_get+0x6b4>)
1000e392:	e764      	b.n	1000e25e <at_ble_event_get+0x446>
1000e394:	1c30      	adds	r0, r6, #0
1000e396:	1c29      	adds	r1, r5, #0
1000e398:	9a01      	ldr	r2, [sp, #4]
1000e39a:	4b4d      	ldr	r3, [pc, #308]	; (1000e4d0 <at_ble_event_get+0x6b8>)
1000e39c:	4798      	blx	r3
1000e39e:	263b      	movs	r6, #59	; 0x3b
1000e3a0:	e02f      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e3a2:	1c31      	adds	r1, r6, #0
1000e3a4:	9801      	ldr	r0, [sp, #4]
1000e3a6:	1c2a      	adds	r2, r5, #0
1000e3a8:	4b4a      	ldr	r3, [pc, #296]	; (1000e4d4 <at_ble_event_get+0x6bc>)
1000e3aa:	4798      	blx	r3
1000e3ac:	2618      	movs	r6, #24
1000e3ae:	e028      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e3b0:	1c31      	adds	r1, r6, #0
1000e3b2:	9801      	ldr	r0, [sp, #4]
1000e3b4:	1c2a      	adds	r2, r5, #0
1000e3b6:	4b48      	ldr	r3, [pc, #288]	; (1000e4d8 <at_ble_event_get+0x6c0>)
1000e3b8:	4798      	blx	r3
1000e3ba:	2620      	movs	r6, #32
1000e3bc:	e021      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e3be:	1c31      	adds	r1, r6, #0
1000e3c0:	9801      	ldr	r0, [sp, #4]
1000e3c2:	1c2a      	adds	r2, r5, #0
1000e3c4:	4b45      	ldr	r3, [pc, #276]	; (1000e4dc <at_ble_event_get+0x6c4>)
1000e3c6:	4798      	blx	r3
1000e3c8:	2633      	movs	r6, #51	; 0x33
1000e3ca:	e01a      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e3cc:	1c31      	adds	r1, r6, #0
1000e3ce:	9801      	ldr	r0, [sp, #4]
1000e3d0:	1c2a      	adds	r2, r5, #0
1000e3d2:	4b43      	ldr	r3, [pc, #268]	; (1000e4e0 <at_ble_event_get+0x6c8>)
1000e3d4:	4798      	blx	r3
1000e3d6:	2630      	movs	r6, #48	; 0x30
1000e3d8:	e013      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e3da:	1c31      	adds	r1, r6, #0
1000e3dc:	9801      	ldr	r0, [sp, #4]
1000e3de:	1c2a      	adds	r2, r5, #0
1000e3e0:	4b40      	ldr	r3, [pc, #256]	; (1000e4e4 <at_ble_event_get+0x6cc>)
1000e3e2:	4798      	blx	r3
1000e3e4:	2634      	movs	r6, #52	; 0x34
1000e3e6:	e00c      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e3e8:	1c31      	adds	r1, r6, #0
1000e3ea:	9801      	ldr	r0, [sp, #4]
1000e3ec:	1c2a      	adds	r2, r5, #0
1000e3ee:	4b3e      	ldr	r3, [pc, #248]	; (1000e4e8 <at_ble_event_get+0x6d0>)
1000e3f0:	4798      	blx	r3
1000e3f2:	2635      	movs	r6, #53	; 0x35
1000e3f4:	e005      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e3f6:	1c31      	adds	r1, r6, #0
1000e3f8:	9801      	ldr	r0, [sp, #4]
1000e3fa:	1c2a      	adds	r2, r5, #0
1000e3fc:	4b3b      	ldr	r3, [pc, #236]	; (1000e4ec <at_ble_event_get+0x6d4>)
1000e3fe:	4798      	blx	r3
1000e400:	2632      	movs	r6, #50	; 0x32
1000e402:	9b03      	ldr	r3, [sp, #12]
1000e404:	701e      	strb	r6, [r3, #0]
1000e406:	2300      	movs	r3, #0
1000e408:	9302      	str	r3, [sp, #8]
1000e40a:	e57a      	b.n	1000df02 <at_ble_event_get+0xea>
1000e40c:	23d0      	movs	r3, #208	; 0xd0
1000e40e:	e7fb      	b.n	1000e408 <at_ble_event_get+0x5f0>
1000e410:	9b01      	ldr	r3, [sp, #4]
1000e412:	9e02      	ldr	r6, [sp, #8]
1000e414:	2bbb      	cmp	r3, #187	; 0xbb
1000e416:	d000      	beq.n	1000e41a <at_ble_event_get+0x602>
1000e418:	e6e6      	b.n	1000e1e8 <at_ble_event_get+0x3d0>
1000e41a:	e7f2      	b.n	1000e402 <at_ble_event_get+0x5ea>
1000e41c:	9b02      	ldr	r3, [sp, #8]
1000e41e:	2b00      	cmp	r3, #0
1000e420:	d000      	beq.n	1000e424 <at_ble_event_get+0x60c>
1000e422:	e56e      	b.n	1000df02 <at_ble_event_get+0xea>
1000e424:	e6e0      	b.n	1000e1e8 <at_ble_event_get+0x3d0>
1000e426:	9802      	ldr	r0, [sp, #8]
1000e428:	b007      	add	sp, #28
1000e42a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e42c:	00000e22 	.word	0x00000e22
1000e430:	00000e25 	.word	0x00000e25
1000e434:	00001b05 	.word	0x00001b05
1000e438:	00001b01 	.word	0x00001b01
1000e43c:	00001b03 	.word	0x00001b03
1000e440:	00001b06 	.word	0x00001b06
1000e444:	00001b08 	.word	0x00001b08
1000e448:	1000fdf1 	.word	0x1000fdf1
1000e44c:	1000fdd5 	.word	0x1000fdd5
1000e450:	1000ff39 	.word	0x1000ff39
1000e454:	10010029 	.word	0x10010029
1000e458:	1001004d 	.word	0x1001004d
1000e45c:	1000f169 	.word	0x1000f169
1000e460:	1000f9e9 	.word	0x1000f9e9
1000e464:	1000fa65 	.word	0x1000fa65
1000e468:	1000f421 	.word	0x1000f421
1000e46c:	1000f4bd 	.word	0x1000f4bd
1000e470:	1000f595 	.word	0x1000f595
1000e474:	1000f81d 	.word	0x1000f81d
1000e478:	1000f8bd 	.word	0x1000f8bd
1000e47c:	1000f975 	.word	0x1000f975
1000e480:	1000f99d 	.word	0x1000f99d
1000e484:	1000f9b3 	.word	0x1000f9b3
1000e488:	1000fa7d 	.word	0x1000fa7d
1000e48c:	1000faab 	.word	0x1000faab
1000e490:	1000fac1 	.word	0x1000fac1
1000e494:	1000faeb 	.word	0x1000faeb
1000e498:	1000f919 	.word	0x1000f919
1000e49c:	1000f943 	.word	0x1000f943
1000e4a0:	1000eba9 	.word	0x1000eba9
1000e4a4:	1000ebd5 	.word	0x1000ebd5
1000e4a8:	100101f5 	.word	0x100101f5
1000e4ac:	10010231 	.word	0x10010231
1000e4b0:	10010279 	.word	0x10010279
1000e4b4:	100102bd 	.word	0x100102bd
1000e4b8:	100102f1 	.word	0x100102f1
1000e4bc:	100101b5 	.word	0x100101b5
1000e4c0:	100103bd 	.word	0x100103bd
1000e4c4:	10010345 	.word	0x10010345
1000e4c8:	1000eb01 	.word	0x1000eb01
1000e4cc:	1000eb6d 	.word	0x1000eb6d
1000e4d0:	1000eb31 	.word	0x1000eb31
1000e4d4:	100103cd 	.word	0x100103cd
1000e4d8:	1001040d 	.word	0x1001040d
1000e4dc:	10010559 	.word	0x10010559
1000e4e0:	10010563 	.word	0x10010563
1000e4e4:	10010569 	.word	0x10010569
1000e4e8:	1001056f 	.word	0x1001056f
1000e4ec:	1001057b 	.word	0x1001057b

1000e4f0 <internal_event_flush>:
1000e4f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e4f2:	490e      	ldr	r1, [pc, #56]	; (1000e52c <internal_event_flush+0x3c>)
1000e4f4:	2400      	movs	r4, #0
1000e4f6:	680b      	ldr	r3, [r1, #0]
1000e4f8:	1c0f      	adds	r7, r1, #0
1000e4fa:	1c1e      	adds	r6, r3, #0
1000e4fc:	4a0c      	ldr	r2, [pc, #48]	; (1000e530 <internal_event_flush+0x40>)
1000e4fe:	6815      	ldr	r5, [r2, #0]
1000e500:	9201      	str	r2, [sp, #4]
1000e502:	2b00      	cmp	r3, #0
1000e504:	d00e      	beq.n	1000e524 <internal_event_flush+0x34>
1000e506:	889a      	ldrh	r2, [r3, #4]
1000e508:	6819      	ldr	r1, [r3, #0]
1000e50a:	4282      	cmp	r2, r0
1000e50c:	d107      	bne.n	1000e51e <internal_event_flush+0x2e>
1000e50e:	2c00      	cmp	r4, #0
1000e510:	d001      	beq.n	1000e516 <internal_event_flush+0x26>
1000e512:	6021      	str	r1, [r4, #0]
1000e514:	e000      	b.n	1000e518 <internal_event_flush+0x28>
1000e516:	1c0e      	adds	r6, r1, #0
1000e518:	601d      	str	r5, [r3, #0]
1000e51a:	1c1d      	adds	r5, r3, #0
1000e51c:	1c23      	adds	r3, r4, #0
1000e51e:	1c1c      	adds	r4, r3, #0
1000e520:	1c0b      	adds	r3, r1, #0
1000e522:	e7ee      	b.n	1000e502 <internal_event_flush+0x12>
1000e524:	9b01      	ldr	r3, [sp, #4]
1000e526:	603e      	str	r6, [r7, #0]
1000e528:	601d      	str	r5, [r3, #0]
1000e52a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e52c:	1001c008 	.word	0x1001c008
1000e530:	1001c00c 	.word	0x1001c00c

1000e534 <internal_conn_flush>:
1000e534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e536:	4a12      	ldr	r2, [pc, #72]	; (1000e580 <internal_conn_flush+0x4c>)
1000e538:	9000      	str	r0, [sp, #0]
1000e53a:	6813      	ldr	r3, [r2, #0]
1000e53c:	4811      	ldr	r0, [pc, #68]	; (1000e584 <internal_conn_flush+0x50>)
1000e53e:	1c1f      	adds	r7, r3, #0
1000e540:	2100      	movs	r1, #0
1000e542:	4684      	mov	ip, r0
1000e544:	6804      	ldr	r4, [r0, #0]
1000e546:	9201      	str	r2, [sp, #4]
1000e548:	2b00      	cmp	r3, #0
1000e54a:	d014      	beq.n	1000e576 <internal_conn_flush+0x42>
1000e54c:	88d8      	ldrh	r0, [r3, #6]
1000e54e:	9a00      	ldr	r2, [sp, #0]
1000e550:	681d      	ldr	r5, [r3, #0]
1000e552:	0a06      	lsrs	r6, r0, #8
1000e554:	4296      	cmp	r6, r2
1000e556:	d10b      	bne.n	1000e570 <internal_conn_flush+0x3c>
1000e558:	26fd      	movs	r6, #253	; 0xfd
1000e55a:	4006      	ands	r6, r0
1000e55c:	2e0c      	cmp	r6, #12
1000e55e:	d107      	bne.n	1000e570 <internal_conn_flush+0x3c>
1000e560:	2900      	cmp	r1, #0
1000e562:	d001      	beq.n	1000e568 <internal_conn_flush+0x34>
1000e564:	600d      	str	r5, [r1, #0]
1000e566:	e000      	b.n	1000e56a <internal_conn_flush+0x36>
1000e568:	1c2f      	adds	r7, r5, #0
1000e56a:	601c      	str	r4, [r3, #0]
1000e56c:	1c1c      	adds	r4, r3, #0
1000e56e:	1c0b      	adds	r3, r1, #0
1000e570:	1c19      	adds	r1, r3, #0
1000e572:	1c2b      	adds	r3, r5, #0
1000e574:	e7e8      	b.n	1000e548 <internal_conn_flush+0x14>
1000e576:	9b01      	ldr	r3, [sp, #4]
1000e578:	601f      	str	r7, [r3, #0]
1000e57a:	4663      	mov	r3, ip
1000e57c:	601c      	str	r4, [r3, #0]
1000e57e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e580:	1001c008 	.word	0x1001c008
1000e584:	1001c00c 	.word	0x1001c00c

1000e588 <at_ble_device_name_set>:
1000e588:	b530      	push	{r4, r5, lr}
1000e58a:	23cf      	movs	r3, #207	; 0xcf
1000e58c:	2800      	cmp	r0, #0
1000e58e:	d010      	beq.n	1000e5b2 <at_ble_device_name_set+0x2a>
1000e590:	1e4a      	subs	r2, r1, #1
1000e592:	2a1f      	cmp	r2, #31
1000e594:	d80d      	bhi.n	1000e5b2 <at_ble_device_name_set+0x2a>
1000e596:	4a08      	ldr	r2, [pc, #32]	; (1000e5b8 <at_ble_device_name_set+0x30>)
1000e598:	1c13      	adds	r3, r2, #0
1000e59a:	33aa      	adds	r3, #170	; 0xaa
1000e59c:	8019      	strh	r1, [r3, #0]
1000e59e:	2300      	movs	r3, #0
1000e5a0:	1c1c      	adds	r4, r3, #0
1000e5a2:	5cc5      	ldrb	r5, [r0, r3]
1000e5a4:	34ac      	adds	r4, #172	; 0xac
1000e5a6:	3301      	adds	r3, #1
1000e5a8:	5515      	strb	r5, [r2, r4]
1000e5aa:	b2dc      	uxtb	r4, r3
1000e5ac:	428c      	cmp	r4, r1
1000e5ae:	d3f7      	bcc.n	1000e5a0 <at_ble_device_name_set+0x18>
1000e5b0:	2300      	movs	r3, #0
1000e5b2:	1c18      	adds	r0, r3, #0
1000e5b4:	bd30      	pop	{r4, r5, pc}
1000e5b6:	46c0      	nop			; (mov r8, r8)
1000e5b8:	1001d11a 	.word	0x1001d11a

1000e5bc <at_ble_addr_get>:
1000e5bc:	b510      	push	{r4, lr}
1000e5be:	1c04      	adds	r4, r0, #0
1000e5c0:	20cf      	movs	r0, #207	; 0xcf
1000e5c2:	2c00      	cmp	r4, #0
1000e5c4:	d006      	beq.n	1000e5d4 <at_ble_addr_get+0x18>
1000e5c6:	4b04      	ldr	r3, [pc, #16]	; (1000e5d8 <at_ble_addr_get+0x1c>)
1000e5c8:	38ce      	subs	r0, #206	; 0xce
1000e5ca:	1c21      	adds	r1, r4, #0
1000e5cc:	4798      	blx	r3
1000e5ce:	4b03      	ldr	r3, [pc, #12]	; (1000e5dc <at_ble_addr_get+0x20>)
1000e5d0:	791b      	ldrb	r3, [r3, #4]
1000e5d2:	7023      	strb	r3, [r4, #0]
1000e5d4:	bd10      	pop	{r4, pc}
1000e5d6:	46c0      	nop			; (mov r8, r8)
1000e5d8:	1000fc85 	.word	0x1000fc85
1000e5dc:	1001d11a 	.word	0x1001d11a

1000e5e0 <at_ble_set_dev_config>:
1000e5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e5e2:	7906      	ldrb	r6, [r0, #4]
1000e5e4:	b089      	sub	sp, #36	; 0x24
1000e5e6:	25cf      	movs	r5, #207	; 0xcf
1000e5e8:	2e03      	cmp	r6, #3
1000e5ea:	d838      	bhi.n	1000e65e <at_ble_set_dev_config+0x7e>
1000e5ec:	7803      	ldrb	r3, [r0, #0]
1000e5ee:	3511      	adds	r5, #17
1000e5f0:	2b0f      	cmp	r3, #15
1000e5f2:	d834      	bhi.n	1000e65e <at_ble_set_dev_config+0x7e>
1000e5f4:	2380      	movs	r3, #128	; 0x80
1000e5f6:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000e5f8:	3d11      	subs	r5, #17
1000e5fa:	009b      	lsls	r3, r3, #2
1000e5fc:	429f      	cmp	r7, r3
1000e5fe:	d82e      	bhi.n	1000e65e <at_ble_set_dev_config+0x7e>
1000e600:	7fc5      	ldrb	r5, [r0, #31]
1000e602:	7f83      	ldrb	r3, [r0, #30]
1000e604:	01ad      	lsls	r5, r5, #6
1000e606:	015b      	lsls	r3, r3, #5
1000e608:	431d      	orrs	r5, r3
1000e60a:	7ec3      	ldrb	r3, [r0, #27]
1000e60c:	431d      	orrs	r5, r3
1000e60e:	7f43      	ldrb	r3, [r0, #29]
1000e610:	011b      	lsls	r3, r3, #4
1000e612:	431d      	orrs	r5, r3
1000e614:	7f03      	ldrb	r3, [r0, #28]
1000e616:	009b      	lsls	r3, r3, #2
1000e618:	431d      	orrs	r5, r3
1000e61a:	4b12      	ldr	r3, [pc, #72]	; (1000e664 <at_ble_set_dev_config+0x84>)
1000e61c:	b2ed      	uxtb	r5, r5
1000e61e:	711e      	strb	r6, [r3, #4]
1000e620:	7903      	ldrb	r3, [r0, #4]
1000e622:	3b02      	subs	r3, #2
1000e624:	2b01      	cmp	r3, #1
1000e626:	d801      	bhi.n	1000e62c <at_ble_set_dev_config+0x4c>
1000e628:	2302      	movs	r3, #2
1000e62a:	7103      	strb	r3, [r0, #4]
1000e62c:	1c04      	adds	r4, r0, #0
1000e62e:	1c23      	adds	r3, r4, #0
1000e630:	330b      	adds	r3, #11
1000e632:	8861      	ldrh	r1, [r4, #2]
1000e634:	9307      	str	r3, [sp, #28]
1000e636:	7923      	ldrb	r3, [r4, #4]
1000e638:	7800      	ldrb	r0, [r0, #0]
1000e63a:	9300      	str	r3, [sp, #0]
1000e63c:	9501      	str	r5, [sp, #4]
1000e63e:	8c25      	ldrh	r5, [r4, #32]
1000e640:	1d62      	adds	r2, r4, #5
1000e642:	9502      	str	r5, [sp, #8]
1000e644:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000e646:	9b07      	ldr	r3, [sp, #28]
1000e648:	9503      	str	r5, [sp, #12]
1000e64a:	9704      	str	r7, [sp, #16]
1000e64c:	4d06      	ldr	r5, [pc, #24]	; (1000e668 <at_ble_set_dev_config+0x88>)
1000e64e:	47a8      	blx	r5
1000e650:	7126      	strb	r6, [r4, #4]
1000e652:	1c05      	adds	r5, r0, #0
1000e654:	1c21      	adds	r1, r4, #0
1000e656:	4803      	ldr	r0, [pc, #12]	; (1000e664 <at_ble_set_dev_config+0x84>)
1000e658:	2226      	movs	r2, #38	; 0x26
1000e65a:	4b04      	ldr	r3, [pc, #16]	; (1000e66c <at_ble_set_dev_config+0x8c>)
1000e65c:	4798      	blx	r3
1000e65e:	1c28      	adds	r0, r5, #0
1000e660:	b009      	add	sp, #36	; 0x24
1000e662:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e664:	1001d11a 	.word	0x1001d11a
1000e668:	1000fb7d 	.word	0x1000fb7d
1000e66c:	10017d8f 	.word	0x10017d8f

1000e670 <at_ble_init>:
1000e670:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e672:	b087      	sub	sp, #28
1000e674:	af03      	add	r7, sp, #12
1000e676:	4954      	ldr	r1, [pc, #336]	; (1000e7c8 <at_ble_init+0x158>)
1000e678:	220b      	movs	r2, #11
1000e67a:	4b54      	ldr	r3, [pc, #336]	; (1000e7cc <at_ble_init+0x15c>)
1000e67c:	1c04      	adds	r4, r0, #0
1000e67e:	1c38      	adds	r0, r7, #0
1000e680:	4798      	blx	r3
1000e682:	2205      	movs	r2, #5
1000e684:	4b52      	ldr	r3, [pc, #328]	; (1000e7d0 <at_ble_init+0x160>)
1000e686:	2640      	movs	r6, #64	; 0x40
1000e688:	801a      	strh	r2, [r3, #0]
1000e68a:	2300      	movs	r3, #0
1000e68c:	4a51      	ldr	r2, [pc, #324]	; (1000e7d4 <at_ble_init+0x164>)
1000e68e:	6013      	str	r3, [r2, #0]
1000e690:	4a51      	ldr	r2, [pc, #324]	; (1000e7d8 <at_ble_init+0x168>)
1000e692:	7013      	strb	r3, [r2, #0]
1000e694:	4a51      	ldr	r2, [pc, #324]	; (1000e7dc <at_ble_init+0x16c>)
1000e696:	7013      	strb	r3, [r2, #0]
1000e698:	4b51      	ldr	r3, [pc, #324]	; (1000e7e0 <at_ble_init+0x170>)
1000e69a:	4798      	blx	r3
1000e69c:	4b51      	ldr	r3, [pc, #324]	; (1000e7e4 <at_ble_init+0x174>)
1000e69e:	4798      	blx	r3
1000e6a0:	4b51      	ldr	r3, [pc, #324]	; (1000e7e8 <at_ble_init+0x178>)
1000e6a2:	4798      	blx	r3
1000e6a4:	4b51      	ldr	r3, [pc, #324]	; (1000e7ec <at_ble_init+0x17c>)
1000e6a6:	4798      	blx	r3
1000e6a8:	2c00      	cmp	r4, #0
1000e6aa:	d100      	bne.n	1000e6ae <at_ble_init+0x3e>
1000e6ac:	e089      	b.n	1000e7c2 <at_ble_init+0x152>
1000e6ae:	68a3      	ldr	r3, [r4, #8]
1000e6b0:	2b00      	cmp	r3, #0
1000e6b2:	d100      	bne.n	1000e6b6 <at_ble_init+0x46>
1000e6b4:	e085      	b.n	1000e7c2 <at_ble_init+0x152>
1000e6b6:	6923      	ldr	r3, [r4, #16]
1000e6b8:	2b00      	cmp	r3, #0
1000e6ba:	d100      	bne.n	1000e6be <at_ble_init+0x4e>
1000e6bc:	e081      	b.n	1000e7c2 <at_ble_init+0x152>
1000e6be:	6820      	ldr	r0, [r4, #0]
1000e6c0:	2800      	cmp	r0, #0
1000e6c2:	d102      	bne.n	1000e6ca <at_ble_init+0x5a>
1000e6c4:	6863      	ldr	r3, [r4, #4]
1000e6c6:	2b00      	cmp	r3, #0
1000e6c8:	d17b      	bne.n	1000e7c2 <at_ble_init+0x152>
1000e6ca:	4b49      	ldr	r3, [pc, #292]	; (1000e7f0 <at_ble_init+0x180>)
1000e6cc:	6861      	ldr	r1, [r4, #4]
1000e6ce:	4798      	blx	r3
1000e6d0:	4b48      	ldr	r3, [pc, #288]	; (1000e7f4 <at_ble_init+0x184>)
1000e6d2:	4798      	blx	r3
1000e6d4:	2801      	cmp	r0, #1
1000e6d6:	d901      	bls.n	1000e6dc <at_ble_init+0x6c>
1000e6d8:	26e2      	movs	r6, #226	; 0xe2
1000e6da:	e072      	b.n	1000e7c2 <at_ble_init+0x152>
1000e6dc:	4846      	ldr	r0, [pc, #280]	; (1000e7f8 <at_ble_init+0x188>)
1000e6de:	4b47      	ldr	r3, [pc, #284]	; (1000e7fc <at_ble_init+0x18c>)
1000e6e0:	4798      	blx	r3
1000e6e2:	2800      	cmp	r0, #0
1000e6e4:	d1f8      	bne.n	1000e6d8 <at_ble_init+0x68>
1000e6e6:	1c20      	adds	r0, r4, #0
1000e6e8:	4b45      	ldr	r3, [pc, #276]	; (1000e800 <at_ble_init+0x190>)
1000e6ea:	4798      	blx	r3
1000e6ec:	68e0      	ldr	r0, [r4, #12]
1000e6ee:	68a1      	ldr	r1, [r4, #8]
1000e6f0:	4b44      	ldr	r3, [pc, #272]	; (1000e804 <at_ble_init+0x194>)
1000e6f2:	4798      	blx	r3
1000e6f4:	466b      	mov	r3, sp
1000e6f6:	2201      	movs	r2, #1
1000e6f8:	1cdc      	adds	r4, r3, #3
1000e6fa:	1c20      	adds	r0, r4, #0
1000e6fc:	a901      	add	r1, sp, #4
1000e6fe:	4252      	negs	r2, r2
1000e700:	4b41      	ldr	r3, [pc, #260]	; (1000e808 <at_ble_init+0x198>)
1000e702:	4798      	blx	r3
1000e704:	2800      	cmp	r0, #0
1000e706:	d102      	bne.n	1000e70e <at_ble_init+0x9e>
1000e708:	7823      	ldrb	r3, [r4, #0]
1000e70a:	2b39      	cmp	r3, #57	; 0x39
1000e70c:	d1f2      	bne.n	1000e6f4 <at_ble_init+0x84>
1000e70e:	4b3f      	ldr	r3, [pc, #252]	; (1000e80c <at_ble_init+0x19c>)
1000e710:	4798      	blx	r3
1000e712:	1e06      	subs	r6, r0, #0
1000e714:	d155      	bne.n	1000e7c2 <at_ble_init+0x152>
1000e716:	1c03      	adds	r3, r0, #0
1000e718:	2101      	movs	r1, #1
1000e71a:	4a3d      	ldr	r2, [pc, #244]	; (1000e810 <at_ble_init+0x1a0>)
1000e71c:	4249      	negs	r1, r1
1000e71e:	189a      	adds	r2, r3, r2
1000e720:	3312      	adds	r3, #18
1000e722:	8151      	strh	r1, [r2, #10]
1000e724:	2b90      	cmp	r3, #144	; 0x90
1000e726:	d1f7      	bne.n	1000e718 <at_ble_init+0xa8>
1000e728:	4c3a      	ldr	r4, [pc, #232]	; (1000e814 <at_ble_init+0x1a4>)
1000e72a:	3b81      	subs	r3, #129	; 0x81
1000e72c:	7023      	strb	r3, [r4, #0]
1000e72e:	4b3a      	ldr	r3, [pc, #232]	; (1000e818 <at_ble_init+0x1a8>)
1000e730:	4a3a      	ldr	r2, [pc, #232]	; (1000e81c <at_ble_init+0x1ac>)
1000e732:	8063      	strh	r3, [r4, #2]
1000e734:	2300      	movs	r3, #0
1000e736:	7123      	strb	r3, [r4, #4]
1000e738:	3301      	adds	r3, #1
1000e73a:	1e58      	subs	r0, r3, #1
1000e73c:	0119      	lsls	r1, r3, #4
1000e73e:	4301      	orrs	r1, r0
1000e740:	3302      	adds	r3, #2
1000e742:	7011      	strb	r1, [r2, #0]
1000e744:	3201      	adds	r2, #1
1000e746:	2b21      	cmp	r3, #33	; 0x21
1000e748:	d1f7      	bne.n	1000e73a <at_ble_init+0xca>
1000e74a:	33e0      	adds	r3, #224	; 0xe0
1000e74c:	33ff      	adds	r3, #255	; 0xff
1000e74e:	84a3      	strh	r3, [r4, #36]	; 0x24
1000e750:	1c23      	adds	r3, r4, #0
1000e752:	2500      	movs	r5, #0
1000e754:	3373      	adds	r3, #115	; 0x73
1000e756:	701d      	strb	r5, [r3, #0]
1000e758:	1c23      	adds	r3, r4, #0
1000e75a:	3372      	adds	r3, #114	; 0x72
1000e75c:	701d      	strb	r5, [r3, #0]
1000e75e:	1c23      	adds	r3, r4, #0
1000e760:	3376      	adds	r3, #118	; 0x76
1000e762:	701d      	strb	r5, [r3, #0]
1000e764:	1c23      	adds	r3, r4, #0
1000e766:	33cc      	adds	r3, #204	; 0xcc
1000e768:	801d      	strh	r5, [r3, #0]
1000e76a:	1c22      	adds	r2, r4, #0
1000e76c:	23a0      	movs	r3, #160	; 0xa0
1000e76e:	32d0      	adds	r2, #208	; 0xd0
1000e770:	005b      	lsls	r3, r3, #1
1000e772:	8013      	strh	r3, [r2, #0]
1000e774:	1c22      	adds	r2, r4, #0
1000e776:	32ce      	adds	r2, #206	; 0xce
1000e778:	8013      	strh	r3, [r2, #0]
1000e77a:	1c23      	adds	r3, r4, #0
1000e77c:	33d2      	adds	r3, #210	; 0xd2
1000e77e:	801d      	strh	r5, [r3, #0]
1000e780:	22fa      	movs	r2, #250	; 0xfa
1000e782:	1c23      	adds	r3, r4, #0
1000e784:	0052      	lsls	r2, r2, #1
1000e786:	33d4      	adds	r3, #212	; 0xd4
1000e788:	801a      	strh	r2, [r3, #0]
1000e78a:	1c23      	adds	r3, r4, #0
1000e78c:	33d6      	adds	r3, #214	; 0xd6
1000e78e:	701d      	strb	r5, [r3, #0]
1000e790:	1c20      	adds	r0, r4, #0
1000e792:	4b23      	ldr	r3, [pc, #140]	; (1000e820 <at_ble_init+0x1b0>)
1000e794:	76e5      	strb	r5, [r4, #27]
1000e796:	7725      	strb	r5, [r4, #28]
1000e798:	7765      	strb	r5, [r4, #29]
1000e79a:	77a5      	strb	r5, [r4, #30]
1000e79c:	77e5      	strb	r5, [r4, #31]
1000e79e:	8425      	strh	r5, [r4, #32]
1000e7a0:	8465      	strh	r5, [r4, #34]	; 0x22
1000e7a2:	4798      	blx	r3
1000e7a4:	1c23      	adds	r3, r4, #0
1000e7a6:	2207      	movs	r2, #7
1000e7a8:	3374      	adds	r3, #116	; 0x74
1000e7aa:	701a      	strb	r2, [r3, #0]
1000e7ac:	1c23      	adds	r3, r4, #0
1000e7ae:	3204      	adds	r2, #4
1000e7b0:	33aa      	adds	r3, #170	; 0xaa
1000e7b2:	801a      	strh	r2, [r3, #0]
1000e7b4:	1c2b      	adds	r3, r5, #0
1000e7b6:	5d7a      	ldrb	r2, [r7, r5]
1000e7b8:	33ac      	adds	r3, #172	; 0xac
1000e7ba:	3501      	adds	r5, #1
1000e7bc:	54e2      	strb	r2, [r4, r3]
1000e7be:	2d0b      	cmp	r5, #11
1000e7c0:	d1f8      	bne.n	1000e7b4 <at_ble_init+0x144>
1000e7c2:	1c30      	adds	r0, r6, #0
1000e7c4:	b007      	add	sp, #28
1000e7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e7c8:	10019e75 	.word	0x10019e75
1000e7cc:	10017d8f 	.word	0x10017d8f
1000e7d0:	1001d088 	.word	0x1001d088
1000e7d4:	1001c0b8 	.word	0x1001c0b8
1000e7d8:	1001c018 	.word	0x1001c018
1000e7dc:	1001a4ec 	.word	0x1001a4ec
1000e7e0:	1001041d 	.word	0x1001041d
1000e7e4:	1000e901 	.word	0x1000e901
1000e7e8:	1000e97d 	.word	0x1000e97d
1000e7ec:	1000eb9d 	.word	0x1000eb9d
1000e7f0:	1000e9b9 	.word	0x1000e9b9
1000e7f4:	1000bd79 	.word	0x1000bd79
1000e7f8:	1000ee9d 	.word	0x1000ee9d
1000e7fc:	1000bfe9 	.word	0x1000bfe9
1000e800:	1000ef45 	.word	0x1000ef45
1000e804:	1000dd5d 	.word	0x1000dd5d
1000e808:	1000de19 	.word	0x1000de19
1000e80c:	1000fb0d 	.word	0x1000fb0d
1000e810:	1001d08a 	.word	0x1001d08a
1000e814:	1001d11a 	.word	0x1001d11a
1000e818:	00003a98 	.word	0x00003a98
1000e81c:	1001d125 	.word	0x1001d125
1000e820:	1000e5e1 	.word	0x1000e5e1

1000e824 <at_ble_addr_set>:
1000e824:	b538      	push	{r3, r4, r5, lr}
1000e826:	1c45      	adds	r5, r0, #1
1000e828:	1c03      	adds	r3, r0, #0
1000e82a:	20cf      	movs	r0, #207	; 0xcf
1000e82c:	2d00      	cmp	r5, #0
1000e82e:	d018      	beq.n	1000e862 <at_ble_addr_set+0x3e>
1000e830:	781a      	ldrb	r2, [r3, #0]
1000e832:	2a03      	cmp	r2, #3
1000e834:	d815      	bhi.n	1000e862 <at_ble_addr_set+0x3e>
1000e836:	2a01      	cmp	r2, #1
1000e838:	d102      	bne.n	1000e840 <at_ble_addr_set+0x1c>
1000e83a:	785a      	ldrb	r2, [r3, #1]
1000e83c:	2a00      	cmp	r2, #0
1000e83e:	d010      	beq.n	1000e862 <at_ble_addr_set+0x3e>
1000e840:	1c1c      	adds	r4, r3, #0
1000e842:	1c29      	adds	r1, r5, #0
1000e844:	2206      	movs	r2, #6
1000e846:	4b07      	ldr	r3, [pc, #28]	; (1000e864 <at_ble_addr_set+0x40>)
1000e848:	4807      	ldr	r0, [pc, #28]	; (1000e868 <at_ble_addr_set+0x44>)
1000e84a:	4798      	blx	r3
1000e84c:	7823      	ldrb	r3, [r4, #0]
1000e84e:	4807      	ldr	r0, [pc, #28]	; (1000e86c <at_ble_addr_set+0x48>)
1000e850:	7103      	strb	r3, [r0, #4]
1000e852:	4b07      	ldr	r3, [pc, #28]	; (1000e870 <at_ble_addr_set+0x4c>)
1000e854:	4798      	blx	r3
1000e856:	7823      	ldrb	r3, [r4, #0]
1000e858:	2b00      	cmp	r3, #0
1000e85a:	d102      	bne.n	1000e862 <at_ble_addr_set+0x3e>
1000e85c:	1c28      	adds	r0, r5, #0
1000e85e:	4b05      	ldr	r3, [pc, #20]	; (1000e874 <at_ble_addr_set+0x50>)
1000e860:	4798      	blx	r3
1000e862:	bd38      	pop	{r3, r4, r5, pc}
1000e864:	10017d8f 	.word	0x10017d8f
1000e868:	1001d11f 	.word	0x1001d11f
1000e86c:	1001d11a 	.word	0x1001d11a
1000e870:	1000e5e1 	.word	0x1000e5e1
1000e874:	1000efc9 	.word	0x1000efc9

1000e878 <at_ble_scan_stop>:
1000e878:	b510      	push	{r4, lr}
1000e87a:	4b05      	ldr	r3, [pc, #20]	; (1000e890 <at_ble_scan_stop+0x18>)
1000e87c:	4798      	blx	r3
1000e87e:	1e04      	subs	r4, r0, #0
1000e880:	d103      	bne.n	1000e88a <at_ble_scan_stop+0x12>
1000e882:	20d1      	movs	r0, #209	; 0xd1
1000e884:	4b03      	ldr	r3, [pc, #12]	; (1000e894 <at_ble_scan_stop+0x1c>)
1000e886:	0100      	lsls	r0, r0, #4
1000e888:	4798      	blx	r3
1000e88a:	1c20      	adds	r0, r4, #0
1000e88c:	bd10      	pop	{r4, pc}
1000e88e:	46c0      	nop			; (mov r8, r8)
1000e890:	1000fd65 	.word	0x1000fd65
1000e894:	1000e4f1 	.word	0x1000e4f1

1000e898 <at_ble_disconnect>:
1000e898:	b538      	push	{r3, r4, r5, lr}
1000e89a:	1c04      	adds	r4, r0, #0
1000e89c:	4b04      	ldr	r3, [pc, #16]	; (1000e8b0 <at_ble_disconnect+0x18>)
1000e89e:	1c08      	adds	r0, r1, #0
1000e8a0:	1c21      	adds	r1, r4, #0
1000e8a2:	4798      	blx	r3
1000e8a4:	1c05      	adds	r5, r0, #0
1000e8a6:	4b03      	ldr	r3, [pc, #12]	; (1000e8b4 <at_ble_disconnect+0x1c>)
1000e8a8:	1c20      	adds	r0, r4, #0
1000e8aa:	4798      	blx	r3
1000e8ac:	1c28      	adds	r0, r5, #0
1000e8ae:	bd38      	pop	{r3, r4, r5, pc}
1000e8b0:	1000f3dd 	.word	0x1000f3dd
1000e8b4:	1000e535 	.word	0x1000e535

1000e8b8 <at_ble_conn_update_reply>:
1000e8b8:	b510      	push	{r4, lr}
1000e8ba:	4c01      	ldr	r4, [pc, #4]	; (1000e8c0 <at_ble_conn_update_reply+0x8>)
1000e8bc:	47a0      	blx	r4
1000e8be:	bd10      	pop	{r4, pc}
1000e8c0:	1000f8cd 	.word	0x1000f8cd

1000e8c4 <at_ble_random_address_resolve>:
1000e8c4:	b510      	push	{r4, lr}
1000e8c6:	23cf      	movs	r3, #207	; 0xcf
1000e8c8:	2800      	cmp	r0, #0
1000e8ca:	d00a      	beq.n	1000e8e2 <at_ble_random_address_resolve+0x1e>
1000e8cc:	2900      	cmp	r1, #0
1000e8ce:	d008      	beq.n	1000e8e2 <at_ble_random_address_resolve+0x1e>
1000e8d0:	2a00      	cmp	r2, #0
1000e8d2:	d006      	beq.n	1000e8e2 <at_ble_random_address_resolve+0x1e>
1000e8d4:	780c      	ldrb	r4, [r1, #0]
1000e8d6:	2c02      	cmp	r4, #2
1000e8d8:	d103      	bne.n	1000e8e2 <at_ble_random_address_resolve+0x1e>
1000e8da:	4b03      	ldr	r3, [pc, #12]	; (1000e8e8 <at_ble_random_address_resolve+0x24>)
1000e8dc:	3101      	adds	r1, #1
1000e8de:	4798      	blx	r3
1000e8e0:	2300      	movs	r3, #0
1000e8e2:	1c18      	adds	r0, r3, #0
1000e8e4:	bd10      	pop	{r4, pc}
1000e8e6:	46c0      	nop			; (mov r8, r8)
1000e8e8:	1000ffc1 	.word	0x1000ffc1

1000e8ec <at_ble_uuid_len2type>:
1000e8ec:	1e83      	subs	r3, r0, #2
1000e8ee:	b2db      	uxtb	r3, r3
1000e8f0:	2003      	movs	r0, #3
1000e8f2:	2b0e      	cmp	r3, #14
1000e8f4:	d801      	bhi.n	1000e8fa <at_ble_uuid_len2type+0xe>
1000e8f6:	4a01      	ldr	r2, [pc, #4]	; (1000e8fc <at_ble_uuid_len2type+0x10>)
1000e8f8:	5cd0      	ldrb	r0, [r2, r3]
1000e8fa:	4770      	bx	lr
1000e8fc:	10019e80 	.word	0x10019e80

1000e900 <init_gatt_client_module>:
1000e900:	2200      	movs	r2, #0
1000e902:	4b01      	ldr	r3, [pc, #4]	; (1000e908 <init_gatt_client_module+0x8>)
1000e904:	801a      	strh	r2, [r3, #0]
1000e906:	4770      	bx	lr
1000e908:	1001c010 	.word	0x1001c010

1000e90c <db_searchATT>:
1000e90c:	b570      	push	{r4, r5, r6, lr}
1000e90e:	1c05      	adds	r5, r0, #0
1000e910:	2400      	movs	r4, #0
1000e912:	4b0c      	ldr	r3, [pc, #48]	; (1000e944 <db_searchATT+0x38>)
1000e914:	6819      	ldr	r1, [r3, #0]
1000e916:	4b0c      	ldr	r3, [pc, #48]	; (1000e948 <db_searchATT+0x3c>)
1000e918:	681e      	ldr	r6, [r3, #0]
1000e91a:	428c      	cmp	r4, r1
1000e91c:	dc10      	bgt.n	1000e940 <db_searchATT+0x34>
1000e91e:	200c      	movs	r0, #12
1000e920:	1863      	adds	r3, r4, r1
1000e922:	0fda      	lsrs	r2, r3, #31
1000e924:	18d3      	adds	r3, r2, r3
1000e926:	1c02      	adds	r2, r0, #0
1000e928:	105b      	asrs	r3, r3, #1
1000e92a:	435a      	muls	r2, r3
1000e92c:	18b0      	adds	r0, r6, r2
1000e92e:	8802      	ldrh	r2, [r0, #0]
1000e930:	42aa      	cmp	r2, r5
1000e932:	d201      	bcs.n	1000e938 <db_searchATT+0x2c>
1000e934:	1e59      	subs	r1, r3, #1
1000e936:	e7f0      	b.n	1000e91a <db_searchATT+0xe>
1000e938:	42aa      	cmp	r2, r5
1000e93a:	d902      	bls.n	1000e942 <db_searchATT+0x36>
1000e93c:	1c5c      	adds	r4, r3, #1
1000e93e:	e7ec      	b.n	1000e91a <db_searchATT+0xe>
1000e940:	2000      	movs	r0, #0
1000e942:	bd70      	pop	{r4, r5, r6, pc}
1000e944:	1001c024 	.word	0x1001c024
1000e948:	1001c01c 	.word	0x1001c01c

1000e94c <at_ble_read_authorize_reply.part.1>:
1000e94c:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000e94e:	4b09      	ldr	r3, [pc, #36]	; (1000e974 <at_ble_read_authorize_reply.part.1+0x28>)
1000e950:	1c05      	adds	r5, r0, #0
1000e952:	1c08      	adds	r0, r1, #0
1000e954:	1c0c      	adds	r4, r1, #0
1000e956:	4798      	blx	r3
1000e958:	2800      	cmp	r0, #0
1000e95a:	d009      	beq.n	1000e970 <at_ble_read_authorize_reply.part.1+0x24>
1000e95c:	6882      	ldr	r2, [r0, #8]
1000e95e:	2a00      	cmp	r2, #0
1000e960:	d006      	beq.n	1000e970 <at_ble_read_authorize_reply.part.1+0x24>
1000e962:	8883      	ldrh	r3, [r0, #4]
1000e964:	1c29      	adds	r1, r5, #0
1000e966:	9200      	str	r2, [sp, #0]
1000e968:	1c20      	adds	r0, r4, #0
1000e96a:	2200      	movs	r2, #0
1000e96c:	4c02      	ldr	r4, [pc, #8]	; (1000e978 <at_ble_read_authorize_reply.part.1+0x2c>)
1000e96e:	47a0      	blx	r4
1000e970:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000e972:	46c0      	nop			; (mov r8, r8)
1000e974:	1000e90d 	.word	0x1000e90d
1000e978:	100100bd 	.word	0x100100bd

1000e97c <initi_gatt_server_module>:
1000e97c:	2300      	movs	r3, #0
1000e97e:	4a07      	ldr	r2, [pc, #28]	; (1000e99c <initi_gatt_server_module+0x20>)
1000e980:	7013      	strb	r3, [r2, #0]
1000e982:	4a07      	ldr	r2, [pc, #28]	; (1000e9a0 <initi_gatt_server_module+0x24>)
1000e984:	6013      	str	r3, [r2, #0]
1000e986:	4a07      	ldr	r2, [pc, #28]	; (1000e9a4 <initi_gatt_server_module+0x28>)
1000e988:	6013      	str	r3, [r2, #0]
1000e98a:	4a07      	ldr	r2, [pc, #28]	; (1000e9a8 <initi_gatt_server_module+0x2c>)
1000e98c:	6013      	str	r3, [r2, #0]
1000e98e:	4a07      	ldr	r2, [pc, #28]	; (1000e9ac <initi_gatt_server_module+0x30>)
1000e990:	6013      	str	r3, [r2, #0]
1000e992:	4a07      	ldr	r2, [pc, #28]	; (1000e9b0 <initi_gatt_server_module+0x34>)
1000e994:	6013      	str	r3, [r2, #0]
1000e996:	4a07      	ldr	r2, [pc, #28]	; (1000e9b4 <initi_gatt_server_module+0x38>)
1000e998:	6013      	str	r3, [r2, #0]
1000e99a:	4770      	bx	lr
1000e99c:	1001c018 	.word	0x1001c018
1000e9a0:	1001c028 	.word	0x1001c028
1000e9a4:	1001c024 	.word	0x1001c024
1000e9a8:	1001c014 	.word	0x1001c014
1000e9ac:	1001c020 	.word	0x1001c020
1000e9b0:	1001c01c 	.word	0x1001c01c
1000e9b4:	1001c02c 	.word	0x1001c02c

1000e9b8 <db_init>:
1000e9b8:	4b0a      	ldr	r3, [pc, #40]	; (1000e9e4 <db_init+0x2c>)
1000e9ba:	4a0b      	ldr	r2, [pc, #44]	; (1000e9e8 <db_init+0x30>)
1000e9bc:	6018      	str	r0, [r3, #0]
1000e9be:	084b      	lsrs	r3, r1, #1
1000e9c0:	6013      	str	r3, [r2, #0]
1000e9c2:	4a0a      	ldr	r2, [pc, #40]	; (1000e9ec <db_init+0x34>)
1000e9c4:	18c3      	adds	r3, r0, r3
1000e9c6:	6013      	str	r3, [r2, #0]
1000e9c8:	4a09      	ldr	r2, [pc, #36]	; (1000e9f0 <db_init+0x38>)
1000e9ca:	1841      	adds	r1, r0, r1
1000e9cc:	6013      	str	r3, [r2, #0]
1000e9ce:	2303      	movs	r3, #3
1000e9d0:	2200      	movs	r2, #0
1000e9d2:	3103      	adds	r1, #3
1000e9d4:	4399      	bics	r1, r3
1000e9d6:	4b07      	ldr	r3, [pc, #28]	; (1000e9f4 <db_init+0x3c>)
1000e9d8:	3904      	subs	r1, #4
1000e9da:	6019      	str	r1, [r3, #0]
1000e9dc:	4b06      	ldr	r3, [pc, #24]	; (1000e9f8 <db_init+0x40>)
1000e9de:	601a      	str	r2, [r3, #0]
1000e9e0:	4770      	bx	lr
1000e9e2:	46c0      	nop			; (mov r8, r8)
1000e9e4:	1001c02c 	.word	0x1001c02c
1000e9e8:	1001c028 	.word	0x1001c028
1000e9ec:	1001c014 	.word	0x1001c014
1000e9f0:	1001c020 	.word	0x1001c020
1000e9f4:	1001c01c 	.word	0x1001c01c
1000e9f8:	1001c024 	.word	0x1001c024

1000e9fc <at_ble_characteristic_value_set>:
1000e9fc:	b570      	push	{r4, r5, r6, lr}
1000e9fe:	4b0b      	ldr	r3, [pc, #44]	; (1000ea2c <at_ble_characteristic_value_set+0x30>)
1000ea00:	1c06      	adds	r6, r0, #0
1000ea02:	1c0c      	adds	r4, r1, #0
1000ea04:	1c15      	adds	r5, r2, #0
1000ea06:	4798      	blx	r3
1000ea08:	2800      	cmp	r0, #0
1000ea0a:	d008      	beq.n	1000ea1e <at_ble_characteristic_value_set+0x22>
1000ea0c:	6880      	ldr	r0, [r0, #8]
1000ea0e:	2800      	cmp	r0, #0
1000ea10:	d005      	beq.n	1000ea1e <at_ble_characteristic_value_set+0x22>
1000ea12:	1c21      	adds	r1, r4, #0
1000ea14:	1c2a      	adds	r2, r5, #0
1000ea16:	4b06      	ldr	r3, [pc, #24]	; (1000ea30 <at_ble_characteristic_value_set+0x34>)
1000ea18:	4798      	blx	r3
1000ea1a:	2000      	movs	r0, #0
1000ea1c:	e004      	b.n	1000ea28 <at_ble_characteristic_value_set+0x2c>
1000ea1e:	1c30      	adds	r0, r6, #0
1000ea20:	1c29      	adds	r1, r5, #0
1000ea22:	1c22      	adds	r2, r4, #0
1000ea24:	4b03      	ldr	r3, [pc, #12]	; (1000ea34 <at_ble_characteristic_value_set+0x38>)
1000ea26:	4798      	blx	r3
1000ea28:	bd70      	pop	{r4, r5, r6, pc}
1000ea2a:	46c0      	nop			; (mov r8, r8)
1000ea2c:	1000e90d 	.word	0x1000e90d
1000ea30:	10017d8f 	.word	0x10017d8f
1000ea34:	10010431 	.word	0x10010431

1000ea38 <at_ble_characteristic_value_get>:
1000ea38:	b570      	push	{r4, r5, r6, lr}
1000ea3a:	4b0c      	ldr	r3, [pc, #48]	; (1000ea6c <at_ble_characteristic_value_get+0x34>)
1000ea3c:	1c06      	adds	r6, r0, #0
1000ea3e:	1c0c      	adds	r4, r1, #0
1000ea40:	1c15      	adds	r5, r2, #0
1000ea42:	4798      	blx	r3
1000ea44:	2800      	cmp	r0, #0
1000ea46:	d00b      	beq.n	1000ea60 <at_ble_characteristic_value_get+0x28>
1000ea48:	6883      	ldr	r3, [r0, #8]
1000ea4a:	2b00      	cmp	r3, #0
1000ea4c:	d008      	beq.n	1000ea60 <at_ble_characteristic_value_get+0x28>
1000ea4e:	8883      	ldrh	r3, [r0, #4]
1000ea50:	802b      	strh	r3, [r5, #0]
1000ea52:	8882      	ldrh	r2, [r0, #4]
1000ea54:	6881      	ldr	r1, [r0, #8]
1000ea56:	4b06      	ldr	r3, [pc, #24]	; (1000ea70 <at_ble_characteristic_value_get+0x38>)
1000ea58:	1c20      	adds	r0, r4, #0
1000ea5a:	4798      	blx	r3
1000ea5c:	2000      	movs	r0, #0
1000ea5e:	e004      	b.n	1000ea6a <at_ble_characteristic_value_get+0x32>
1000ea60:	1c30      	adds	r0, r6, #0
1000ea62:	1c29      	adds	r1, r5, #0
1000ea64:	1c22      	adds	r2, r4, #0
1000ea66:	4b03      	ldr	r3, [pc, #12]	; (1000ea74 <at_ble_characteristic_value_get+0x3c>)
1000ea68:	4798      	blx	r3
1000ea6a:	bd70      	pop	{r4, r5, r6, pc}
1000ea6c:	1000e90d 	.word	0x1000e90d
1000ea70:	10017d8f 	.word	0x10017d8f
1000ea74:	100104bd 	.word	0x100104bd

1000ea78 <at_ble_write_authorize_reply>:
1000ea78:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ea7a:	b085      	sub	sp, #20
1000ea7c:	1c04      	adds	r4, r0, #0
1000ea7e:	9101      	str	r1, [sp, #4]
1000ea80:	2900      	cmp	r1, #0
1000ea82:	d128      	bne.n	1000ead6 <at_ble_write_authorize_reply+0x5e>
1000ea84:	8843      	ldrh	r3, [r0, #2]
1000ea86:	1c27      	adds	r7, r4, #0
1000ea88:	9300      	str	r3, [sp, #0]
1000ea8a:	1c18      	adds	r0, r3, #0
1000ea8c:	4b16      	ldr	r3, [pc, #88]	; (1000eae8 <at_ble_write_authorize_reply+0x70>)
1000ea8e:	4798      	blx	r3
1000ea90:	3708      	adds	r7, #8
1000ea92:	2800      	cmp	r0, #0
1000ea94:	d009      	beq.n	1000eaaa <at_ble_write_authorize_reply+0x32>
1000ea96:	6880      	ldr	r0, [r0, #8]
1000ea98:	2800      	cmp	r0, #0
1000ea9a:	d006      	beq.n	1000eaaa <at_ble_write_authorize_reply+0x32>
1000ea9c:	88a3      	ldrh	r3, [r4, #4]
1000ea9e:	88e2      	ldrh	r2, [r4, #6]
1000eaa0:	18c0      	adds	r0, r0, r3
1000eaa2:	1c39      	adds	r1, r7, #0
1000eaa4:	4b11      	ldr	r3, [pc, #68]	; (1000eaec <at_ble_write_authorize_reply+0x74>)
1000eaa6:	4798      	blx	r3
1000eaa8:	e015      	b.n	1000ead6 <at_ble_write_authorize_reply+0x5e>
1000eaaa:	ab02      	add	r3, sp, #8
1000eaac:	1d9e      	adds	r6, r3, #6
1000eaae:	2300      	movs	r3, #0
1000eab0:	4d0f      	ldr	r5, [pc, #60]	; (1000eaf0 <at_ble_write_authorize_reply+0x78>)
1000eab2:	8033      	strh	r3, [r6, #0]
1000eab4:	6829      	ldr	r1, [r5, #0]
1000eab6:	1c32      	adds	r2, r6, #0
1000eab8:	4b0e      	ldr	r3, [pc, #56]	; (1000eaf4 <at_ble_write_authorize_reply+0x7c>)
1000eaba:	9800      	ldr	r0, [sp, #0]
1000eabc:	4798      	blx	r3
1000eabe:	682b      	ldr	r3, [r5, #0]
1000eac0:	88a0      	ldrh	r0, [r4, #4]
1000eac2:	88e2      	ldrh	r2, [r4, #6]
1000eac4:	1818      	adds	r0, r3, r0
1000eac6:	1c39      	adds	r1, r7, #0
1000eac8:	4b08      	ldr	r3, [pc, #32]	; (1000eaec <at_ble_write_authorize_reply+0x74>)
1000eaca:	4798      	blx	r3
1000eacc:	8860      	ldrh	r0, [r4, #2]
1000eace:	8832      	ldrh	r2, [r6, #0]
1000ead0:	6829      	ldr	r1, [r5, #0]
1000ead2:	4b09      	ldr	r3, [pc, #36]	; (1000eaf8 <at_ble_write_authorize_reply+0x80>)
1000ead4:	4798      	blx	r3
1000ead6:	8860      	ldrh	r0, [r4, #2]
1000ead8:	8821      	ldrh	r1, [r4, #0]
1000eada:	9a01      	ldr	r2, [sp, #4]
1000eadc:	4b07      	ldr	r3, [pc, #28]	; (1000eafc <at_ble_write_authorize_reply+0x84>)
1000eade:	4798      	blx	r3
1000eae0:	2000      	movs	r0, #0
1000eae2:	b005      	add	sp, #20
1000eae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eae6:	46c0      	nop			; (mov r8, r8)
1000eae8:	1000e90d 	.word	0x1000e90d
1000eaec:	10017d8f 	.word	0x10017d8f
1000eaf0:	1001a4f0 	.word	0x1001a4f0
1000eaf4:	1000ea39 	.word	0x1000ea39
1000eaf8:	1000e9fd 	.word	0x1000e9fd
1000eafc:	10010129 	.word	0x10010129

1000eb00 <gatts_handle_read_req>:
1000eb00:	b538      	push	{r3, r4, r5, lr}
1000eb02:	1c0c      	adds	r4, r1, #0
1000eb04:	4b07      	ldr	r3, [pc, #28]	; (1000eb24 <gatts_handle_read_req+0x24>)
1000eb06:	4798      	blx	r3
1000eb08:	8865      	ldrh	r5, [r4, #2]
1000eb0a:	4b07      	ldr	r3, [pc, #28]	; (1000eb28 <gatts_handle_read_req+0x28>)
1000eb0c:	1c28      	adds	r0, r5, #0
1000eb0e:	4798      	blx	r3
1000eb10:	7883      	ldrb	r3, [r0, #2]
1000eb12:	2026      	movs	r0, #38	; 0x26
1000eb14:	07db      	lsls	r3, r3, #31
1000eb16:	d404      	bmi.n	1000eb22 <gatts_handle_read_req+0x22>
1000eb18:	8820      	ldrh	r0, [r4, #0]
1000eb1a:	1c29      	adds	r1, r5, #0
1000eb1c:	4b03      	ldr	r3, [pc, #12]	; (1000eb2c <gatts_handle_read_req+0x2c>)
1000eb1e:	4798      	blx	r3
1000eb20:	203b      	movs	r0, #59	; 0x3b
1000eb22:	bd38      	pop	{r3, r4, r5, pc}
1000eb24:	1001006d 	.word	0x1001006d
1000eb28:	1000e90d 	.word	0x1000e90d
1000eb2c:	1000e94d 	.word	0x1000e94d

1000eb30 <gatts_handle_att_info_req>:
1000eb30:	b538      	push	{r3, r4, r5, lr}
1000eb32:	1c0d      	adds	r5, r1, #0
1000eb34:	4b0a      	ldr	r3, [pc, #40]	; (1000eb60 <gatts_handle_att_info_req+0x30>)
1000eb36:	1c14      	adds	r4, r2, #0
1000eb38:	4798      	blx	r3
1000eb3a:	882d      	ldrh	r5, [r5, #0]
1000eb3c:	4b09      	ldr	r3, [pc, #36]	; (1000eb64 <gatts_handle_att_info_req+0x34>)
1000eb3e:	1c28      	adds	r0, r5, #0
1000eb40:	4798      	blx	r3
1000eb42:	0a22      	lsrs	r2, r4, #8
1000eb44:	1c03      	adds	r3, r0, #0
1000eb46:	4c08      	ldr	r4, [pc, #32]	; (1000eb68 <gatts_handle_att_info_req+0x38>)
1000eb48:	b291      	uxth	r1, r2
1000eb4a:	2800      	cmp	r0, #0
1000eb4c:	d003      	beq.n	1000eb56 <gatts_handle_att_info_req+0x26>
1000eb4e:	8882      	ldrh	r2, [r0, #4]
1000eb50:	2300      	movs	r3, #0
1000eb52:	1c28      	adds	r0, r5, #0
1000eb54:	e001      	b.n	1000eb5a <gatts_handle_att_info_req+0x2a>
1000eb56:	1c28      	adds	r0, r5, #0
1000eb58:	2201      	movs	r2, #1
1000eb5a:	47a0      	blx	r4
1000eb5c:	203b      	movs	r0, #59	; 0x3b
1000eb5e:	bd38      	pop	{r3, r4, r5, pc}
1000eb60:	100100b1 	.word	0x100100b1
1000eb64:	1000e90d 	.word	0x1000e90d
1000eb68:	1001016d 	.word	0x1001016d

1000eb6c <gatts_handle_write_req>:
1000eb6c:	b510      	push	{r4, lr}
1000eb6e:	1c14      	adds	r4, r2, #0
1000eb70:	4b07      	ldr	r3, [pc, #28]	; (1000eb90 <gatts_handle_write_req+0x24>)
1000eb72:	4798      	blx	r3
1000eb74:	4b07      	ldr	r3, [pc, #28]	; (1000eb94 <gatts_handle_write_req+0x28>)
1000eb76:	8860      	ldrh	r0, [r4, #2]
1000eb78:	4798      	blx	r3
1000eb7a:	2302      	movs	r3, #2
1000eb7c:	7881      	ldrb	r1, [r0, #2]
1000eb7e:	2022      	movs	r0, #34	; 0x22
1000eb80:	4019      	ands	r1, r3
1000eb82:	d103      	bne.n	1000eb8c <gatts_handle_write_req+0x20>
1000eb84:	1c20      	adds	r0, r4, #0
1000eb86:	4b04      	ldr	r3, [pc, #16]	; (1000eb98 <gatts_handle_write_req+0x2c>)
1000eb88:	4798      	blx	r3
1000eb8a:	201f      	movs	r0, #31
1000eb8c:	bd10      	pop	{r4, pc}
1000eb8e:	46c0      	nop			; (mov r8, r8)
1000eb90:	10010079 	.word	0x10010079
1000eb94:	1000e90d 	.word	0x1000e90d
1000eb98:	1000ea79 	.word	0x1000ea79

1000eb9c <init_l2cc_task_module>:
1000eb9c:	220a      	movs	r2, #10
1000eb9e:	4b01      	ldr	r3, [pc, #4]	; (1000eba4 <init_l2cc_task_module+0x8>)
1000eba0:	701a      	strb	r2, [r3, #0]
1000eba2:	4770      	bx	lr
1000eba4:	1001a4ec 	.word	0x1001a4ec

1000eba8 <l2cc_data_send_rsp_handler>:
1000eba8:	b510      	push	{r4, lr}
1000ebaa:	7802      	ldrb	r2, [r0, #0]
1000ebac:	700a      	strb	r2, [r1, #0]
1000ebae:	7883      	ldrb	r3, [r0, #2]
1000ebb0:	7844      	ldrb	r4, [r0, #1]
1000ebb2:	021b      	lsls	r3, r3, #8
1000ebb4:	4323      	orrs	r3, r4
1000ebb6:	804b      	strh	r3, [r1, #2]
1000ebb8:	7903      	ldrb	r3, [r0, #4]
1000ebba:	78c0      	ldrb	r0, [r0, #3]
1000ebbc:	021b      	lsls	r3, r3, #8
1000ebbe:	4303      	orrs	r3, r0
1000ebc0:	808b      	strh	r3, [r1, #4]
1000ebc2:	2a00      	cmp	r2, #0
1000ebc4:	d103      	bne.n	1000ebce <l2cc_data_send_rsp_handler+0x26>
1000ebc6:	4a02      	ldr	r2, [pc, #8]	; (1000ebd0 <l2cc_data_send_rsp_handler+0x28>)
1000ebc8:	7813      	ldrb	r3, [r2, #0]
1000ebca:	3301      	adds	r3, #1
1000ebcc:	7013      	strb	r3, [r2, #0]
1000ebce:	bd10      	pop	{r4, pc}
1000ebd0:	1001a4ec 	.word	0x1001a4ec

1000ebd4 <l2cc_data_received_handler>:
1000ebd4:	b508      	push	{r3, lr}
1000ebd6:	1c03      	adds	r3, r0, #0
1000ebd8:	7842      	ldrb	r2, [r0, #1]
1000ebda:	7800      	ldrb	r0, [r0, #0]
1000ebdc:	0212      	lsls	r2, r2, #8
1000ebde:	4302      	orrs	r2, r0
1000ebe0:	800a      	strh	r2, [r1, #0]
1000ebe2:	78da      	ldrb	r2, [r3, #3]
1000ebe4:	7898      	ldrb	r0, [r3, #2]
1000ebe6:	0212      	lsls	r2, r2, #8
1000ebe8:	4302      	orrs	r2, r0
1000ebea:	804a      	strh	r2, [r1, #2]
1000ebec:	795a      	ldrb	r2, [r3, #5]
1000ebee:	7918      	ldrb	r0, [r3, #4]
1000ebf0:	0212      	lsls	r2, r2, #8
1000ebf2:	4302      	orrs	r2, r0
1000ebf4:	808a      	strh	r2, [r1, #4]
1000ebf6:	1d88      	adds	r0, r1, #6
1000ebf8:	1d99      	adds	r1, r3, #6
1000ebfa:	4b01      	ldr	r3, [pc, #4]	; (1000ec00 <l2cc_data_received_handler+0x2c>)
1000ebfc:	4798      	blx	r3
1000ebfe:	bd08      	pop	{r3, pc}
1000ec00:	10017d8f 	.word	0x10017d8f

1000ec04 <at_ble_authenticate>:
1000ec04:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ec06:	1c0c      	adds	r4, r1, #0
1000ec08:	211f      	movs	r1, #31
1000ec0a:	b08b      	sub	sp, #44	; 0x2c
1000ec0c:	9307      	str	r3, [sp, #28]
1000ec0e:	ab02      	add	r3, sp, #8
1000ec10:	18c9      	adds	r1, r1, r3
1000ec12:	230f      	movs	r3, #15
1000ec14:	700b      	strb	r3, [r1, #0]
1000ec16:	4b40      	ldr	r3, [pc, #256]	; (1000ed18 <at_ble_authenticate+0x114>)
1000ec18:	1c05      	adds	r5, r0, #0
1000ec1a:	1c16      	adds	r6, r2, #0
1000ec1c:	4798      	blx	r3
1000ec1e:	1c07      	adds	r7, r0, #0
1000ec20:	2001      	movs	r0, #1
1000ec22:	2f07      	cmp	r7, #7
1000ec24:	d875      	bhi.n	1000ed12 <at_ble_authenticate+0x10e>
1000ec26:	2c00      	cmp	r4, #0
1000ec28:	d113      	bne.n	1000ec52 <at_ble_authenticate+0x4e>
1000ec2a:	2312      	movs	r3, #18
1000ec2c:	435f      	muls	r7, r3
1000ec2e:	4b3b      	ldr	r3, [pc, #236]	; (1000ed1c <at_ble_authenticate+0x118>)
1000ec30:	5cfb      	ldrb	r3, [r7, r3]
1000ec32:	4283      	cmp	r3, r0
1000ec34:	d001      	beq.n	1000ec3a <at_ble_authenticate+0x36>
1000ec36:	20cf      	movs	r0, #207	; 0xcf
1000ec38:	e06b      	b.n	1000ed12 <at_ble_authenticate+0x10e>
1000ec3a:	9504      	str	r5, [sp, #16]
1000ec3c:	9400      	str	r4, [sp, #0]
1000ec3e:	9401      	str	r4, [sp, #4]
1000ec40:	9402      	str	r4, [sp, #8]
1000ec42:	9403      	str	r4, [sp, #12]
1000ec44:	1c20      	adds	r0, r4, #0
1000ec46:	1c21      	adds	r1, r4, #0
1000ec48:	1c22      	adds	r2, r4, #0
1000ec4a:	1c23      	adds	r3, r4, #0
1000ec4c:	4d34      	ldr	r5, [pc, #208]	; (1000ed20 <at_ble_authenticate+0x11c>)
1000ec4e:	47a8      	blx	r5
1000ec50:	e05e      	b.n	1000ed10 <at_ble_authenticate+0x10c>
1000ec52:	7922      	ldrb	r2, [r4, #4]
1000ec54:	2a06      	cmp	r2, #6
1000ec56:	d9ee      	bls.n	1000ec36 <at_ble_authenticate+0x32>
1000ec58:	7963      	ldrb	r3, [r4, #5]
1000ec5a:	2b10      	cmp	r3, #16
1000ec5c:	d8eb      	bhi.n	1000ec36 <at_ble_authenticate+0x32>
1000ec5e:	429a      	cmp	r2, r3
1000ec60:	d8e9      	bhi.n	1000ec36 <at_ble_authenticate+0x32>
1000ec62:	7a23      	ldrb	r3, [r4, #8]
1000ec64:	2b04      	cmp	r3, #4
1000ec66:	d8e6      	bhi.n	1000ec36 <at_ble_authenticate+0x32>
1000ec68:	79a3      	ldrb	r3, [r4, #6]
1000ec6a:	2b07      	cmp	r3, #7
1000ec6c:	d8e3      	bhi.n	1000ec36 <at_ble_authenticate+0x32>
1000ec6e:	79e3      	ldrb	r3, [r4, #7]
1000ec70:	2b07      	cmp	r3, #7
1000ec72:	d8e0      	bhi.n	1000ec36 <at_ble_authenticate+0x32>
1000ec74:	78a3      	ldrb	r3, [r4, #2]
1000ec76:	2b00      	cmp	r3, #0
1000ec78:	d006      	beq.n	1000ec88 <at_ble_authenticate+0x84>
1000ec7a:	2e00      	cmp	r6, #0
1000ec7c:	d0db      	beq.n	1000ec36 <at_ble_authenticate+0x32>
1000ec7e:	4829      	ldr	r0, [pc, #164]	; (1000ed24 <at_ble_authenticate+0x120>)
1000ec80:	1c31      	adds	r1, r6, #0
1000ec82:	221c      	movs	r2, #28
1000ec84:	4b28      	ldr	r3, [pc, #160]	; (1000ed28 <at_ble_authenticate+0x124>)
1000ec86:	4798      	blx	r3
1000ec88:	9b07      	ldr	r3, [sp, #28]
1000ec8a:	2b00      	cmp	r3, #0
1000ec8c:	d005      	beq.n	1000ec9a <at_ble_authenticate+0x96>
1000ec8e:	4827      	ldr	r0, [pc, #156]	; (1000ed2c <at_ble_authenticate+0x128>)
1000ec90:	1c19      	adds	r1, r3, #0
1000ec92:	309a      	adds	r0, #154	; 0x9a
1000ec94:	2210      	movs	r2, #16
1000ec96:	4b24      	ldr	r3, [pc, #144]	; (1000ed28 <at_ble_authenticate+0x124>)
1000ec98:	4798      	blx	r3
1000ec9a:	7863      	ldrb	r3, [r4, #1]
1000ec9c:	78a2      	ldrb	r2, [r4, #2]
1000ec9e:	009b      	lsls	r3, r3, #2
1000eca0:	4313      	orrs	r3, r2
1000eca2:	2212      	movs	r2, #18
1000eca4:	4357      	muls	r7, r2
1000eca6:	4a1d      	ldr	r2, [pc, #116]	; (1000ed1c <at_ble_authenticate+0x118>)
1000eca8:	b2db      	uxtb	r3, r3
1000ecaa:	5cba      	ldrb	r2, [r7, r2]
1000ecac:	2a00      	cmp	r2, #0
1000ecae:	d116      	bne.n	1000ecde <at_ble_authenticate+0xda>
1000ecb0:	79a0      	ldrb	r0, [r4, #6]
1000ecb2:	0742      	lsls	r2, r0, #29
1000ecb4:	d502      	bpl.n	1000ecbc <at_ble_authenticate+0xb8>
1000ecb6:	9a07      	ldr	r2, [sp, #28]
1000ecb8:	2a00      	cmp	r2, #0
1000ecba:	d0bc      	beq.n	1000ec36 <at_ble_authenticate+0x32>
1000ecbc:	07c2      	lsls	r2, r0, #31
1000ecbe:	d501      	bpl.n	1000ecc4 <at_ble_authenticate+0xc0>
1000ecc0:	2e00      	cmp	r6, #0
1000ecc2:	d0b8      	beq.n	1000ec36 <at_ble_authenticate+0x32>
1000ecc4:	7966      	ldrb	r6, [r4, #5]
1000ecc6:	7821      	ldrb	r1, [r4, #0]
1000ecc8:	78e2      	ldrb	r2, [r4, #3]
1000ecca:	9600      	str	r6, [sp, #0]
1000eccc:	9001      	str	r0, [sp, #4]
1000ecce:	79e0      	ldrb	r0, [r4, #7]
1000ecd0:	9002      	str	r0, [sp, #8]
1000ecd2:	7a20      	ldrb	r0, [r4, #8]
1000ecd4:	4c16      	ldr	r4, [pc, #88]	; (1000ed30 <at_ble_authenticate+0x12c>)
1000ecd6:	9003      	str	r0, [sp, #12]
1000ecd8:	1c28      	adds	r0, r5, #0
1000ecda:	47a0      	blx	r4
1000ecdc:	e018      	b.n	1000ed10 <at_ble_authenticate+0x10c>
1000ecde:	2a01      	cmp	r2, #1
1000ece0:	d1a9      	bne.n	1000ec36 <at_ble_authenticate+0x32>
1000ece2:	79e0      	ldrb	r0, [r4, #7]
1000ece4:	0742      	lsls	r2, r0, #29
1000ece6:	d502      	bpl.n	1000ecee <at_ble_authenticate+0xea>
1000ece8:	9a07      	ldr	r2, [sp, #28]
1000ecea:	2a00      	cmp	r2, #0
1000ecec:	d0a3      	beq.n	1000ec36 <at_ble_authenticate+0x32>
1000ecee:	07c2      	lsls	r2, r0, #31
1000ecf0:	d501      	bpl.n	1000ecf6 <at_ble_authenticate+0xf2>
1000ecf2:	2e00      	cmp	r6, #0
1000ecf4:	d09f      	beq.n	1000ec36 <at_ble_authenticate+0x32>
1000ecf6:	7966      	ldrb	r6, [r4, #5]
1000ecf8:	7821      	ldrb	r1, [r4, #0]
1000ecfa:	78e2      	ldrb	r2, [r4, #3]
1000ecfc:	9600      	str	r6, [sp, #0]
1000ecfe:	79a6      	ldrb	r6, [r4, #6]
1000ed00:	9002      	str	r0, [sp, #8]
1000ed02:	9601      	str	r6, [sp, #4]
1000ed04:	7a20      	ldrb	r0, [r4, #8]
1000ed06:	9504      	str	r5, [sp, #16]
1000ed08:	9003      	str	r0, [sp, #12]
1000ed0a:	4c05      	ldr	r4, [pc, #20]	; (1000ed20 <at_ble_authenticate+0x11c>)
1000ed0c:	2001      	movs	r0, #1
1000ed0e:	47a0      	blx	r4
1000ed10:	2000      	movs	r0, #0
1000ed12:	b00b      	add	sp, #44	; 0x2c
1000ed14:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ed16:	46c0      	nop			; (mov r8, r8)
1000ed18:	1000f105 	.word	0x1000f105
1000ed1c:	1001d08a 	.word	0x1001d08a
1000ed20:	1000f675 	.word	0x1000f675
1000ed24:	1001d198 	.word	0x1001d198
1000ed28:	10017d8f 	.word	0x10017d8f
1000ed2c:	1001d11a 	.word	0x1001d11a
1000ed30:	1000f455 	.word	0x1000f455

1000ed34 <at_ble_pair_key_reply>:
1000ed34:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ed36:	b085      	sub	sp, #20
1000ed38:	1c05      	adds	r5, r0, #0
1000ed3a:	1c0c      	adds	r4, r1, #0
1000ed3c:	1c16      	adds	r6, r2, #0
1000ed3e:	2100      	movs	r1, #0
1000ed40:	4668      	mov	r0, sp
1000ed42:	2210      	movs	r2, #16
1000ed44:	4b18      	ldr	r3, [pc, #96]	; (1000eda8 <at_ble_pair_key_reply+0x74>)
1000ed46:	4798      	blx	r3
1000ed48:	2101      	movs	r1, #1
1000ed4a:	2e00      	cmp	r6, #0
1000ed4c:	d101      	bne.n	1000ed52 <at_ble_pair_key_reply+0x1e>
1000ed4e:	1c31      	adds	r1, r6, #0
1000ed50:	466e      	mov	r6, sp
1000ed52:	2c00      	cmp	r4, #0
1000ed54:	d116      	bne.n	1000ed84 <at_ble_pair_key_reply+0x50>
1000ed56:	2701      	movs	r7, #1
1000ed58:	1c23      	adds	r3, r4, #0
1000ed5a:	1d70      	adds	r0, r6, #5
1000ed5c:	3e01      	subs	r6, #1
1000ed5e:	7802      	ldrb	r2, [r0, #0]
1000ed60:	3801      	subs	r0, #1
1000ed62:	3a30      	subs	r2, #48	; 0x30
1000ed64:	437a      	muls	r2, r7
1000ed66:	189b      	adds	r3, r3, r2
1000ed68:	220a      	movs	r2, #10
1000ed6a:	4357      	muls	r7, r2
1000ed6c:	42b0      	cmp	r0, r6
1000ed6e:	d1f6      	bne.n	1000ed5e <at_ble_pair_key_reply+0x2a>
1000ed70:	466a      	mov	r2, sp
1000ed72:	4668      	mov	r0, sp
1000ed74:	7013      	strb	r3, [r2, #0]
1000ed76:	0a1a      	lsrs	r2, r3, #8
1000ed78:	7042      	strb	r2, [r0, #1]
1000ed7a:	0c1a      	lsrs	r2, r3, #16
1000ed7c:	0e1b      	lsrs	r3, r3, #24
1000ed7e:	7082      	strb	r2, [r0, #2]
1000ed80:	70c3      	strb	r3, [r0, #3]
1000ed82:	e009      	b.n	1000ed98 <at_ble_pair_key_reply+0x64>
1000ed84:	20cf      	movs	r0, #207	; 0xcf
1000ed86:	2c01      	cmp	r4, #1
1000ed88:	d10c      	bne.n	1000eda4 <at_ble_pair_key_reply+0x70>
1000ed8a:	2300      	movs	r3, #0
1000ed8c:	4668      	mov	r0, sp
1000ed8e:	5cf2      	ldrb	r2, [r6, r3]
1000ed90:	54c2      	strb	r2, [r0, r3]
1000ed92:	3301      	adds	r3, #1
1000ed94:	2b10      	cmp	r3, #16
1000ed96:	d1f9      	bne.n	1000ed8c <at_ble_pair_key_reply+0x58>
1000ed98:	2004      	movs	r0, #4
1000ed9a:	466a      	mov	r2, sp
1000ed9c:	1c2b      	adds	r3, r5, #0
1000ed9e:	4c03      	ldr	r4, [pc, #12]	; (1000edac <at_ble_pair_key_reply+0x78>)
1000eda0:	47a0      	blx	r4
1000eda2:	2000      	movs	r0, #0
1000eda4:	b005      	add	sp, #20
1000eda6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eda8:	10017dcb 	.word	0x10017dcb
1000edac:	1000f6f1 	.word	0x1000f6f1

1000edb0 <at_ble_send_slave_sec_request>:
1000edb0:	b570      	push	{r4, r5, r6, lr}
1000edb2:	4b0c      	ldr	r3, [pc, #48]	; (1000ede4 <at_ble_send_slave_sec_request+0x34>)
1000edb4:	1c0e      	adds	r6, r1, #0
1000edb6:	2100      	movs	r1, #0
1000edb8:	1c05      	adds	r5, r0, #0
1000edba:	1c14      	adds	r4, r2, #0
1000edbc:	4798      	blx	r3
1000edbe:	2301      	movs	r3, #1
1000edc0:	2807      	cmp	r0, #7
1000edc2:	d80d      	bhi.n	1000ede0 <at_ble_send_slave_sec_request+0x30>
1000edc4:	3311      	adds	r3, #17
1000edc6:	4358      	muls	r0, r3
1000edc8:	4b07      	ldr	r3, [pc, #28]	; (1000ede8 <at_ble_send_slave_sec_request+0x38>)
1000edca:	5cc2      	ldrb	r2, [r0, r3]
1000edcc:	23e0      	movs	r3, #224	; 0xe0
1000edce:	2a01      	cmp	r2, #1
1000edd0:	d106      	bne.n	1000ede0 <at_ble_send_slave_sec_request+0x30>
1000edd2:	00b1      	lsls	r1, r6, #2
1000edd4:	430c      	orrs	r4, r1
1000edd6:	4b05      	ldr	r3, [pc, #20]	; (1000edec <at_ble_send_slave_sec_request+0x3c>)
1000edd8:	b2e1      	uxtb	r1, r4
1000edda:	1c28      	adds	r0, r5, #0
1000eddc:	4798      	blx	r3
1000edde:	2300      	movs	r3, #0
1000ede0:	1c18      	adds	r0, r3, #0
1000ede2:	bd70      	pop	{r4, r5, r6, pc}
1000ede4:	1000f105 	.word	0x1000f105
1000ede8:	1001d08a 	.word	0x1001d08a
1000edec:	1000f741 	.word	0x1000f741

1000edf0 <at_ble_encryption_start>:
1000edf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000edf2:	23cf      	movs	r3, #207	; 0xcf
1000edf4:	2900      	cmp	r1, #0
1000edf6:	d02b      	beq.n	1000ee50 <at_ble_encryption_start+0x60>
1000edf8:	2a05      	cmp	r2, #5
1000edfa:	d829      	bhi.n	1000ee50 <at_ble_encryption_start+0x60>
1000edfc:	2701      	movs	r7, #1
1000edfe:	1c3d      	adds	r5, r7, #0
1000ee00:	2433      	movs	r4, #51	; 0x33
1000ee02:	4095      	lsls	r5, r2
1000ee04:	4225      	tst	r5, r4
1000ee06:	d023      	beq.n	1000ee50 <at_ble_encryption_start+0x60>
1000ee08:	7e8c      	ldrb	r4, [r1, #26]
1000ee0a:	3c07      	subs	r4, #7
1000ee0c:	2c09      	cmp	r4, #9
1000ee0e:	d81f      	bhi.n	1000ee50 <at_ble_encryption_start+0x60>
1000ee10:	4b10      	ldr	r3, [pc, #64]	; (1000ee54 <at_ble_encryption_start+0x64>)
1000ee12:	1c0c      	adds	r4, r1, #0
1000ee14:	2100      	movs	r1, #0
1000ee16:	1c15      	adds	r5, r2, #0
1000ee18:	1c06      	adds	r6, r0, #0
1000ee1a:	4798      	blx	r3
1000ee1c:	1c3b      	adds	r3, r7, #0
1000ee1e:	2807      	cmp	r0, #7
1000ee20:	d816      	bhi.n	1000ee50 <at_ble_encryption_start+0x60>
1000ee22:	2312      	movs	r3, #18
1000ee24:	4358      	muls	r0, r3
1000ee26:	4b0c      	ldr	r3, [pc, #48]	; (1000ee58 <at_ble_encryption_start+0x68>)
1000ee28:	5cc7      	ldrb	r7, [r0, r3]
1000ee2a:	23e0      	movs	r3, #224	; 0xe0
1000ee2c:	2f00      	cmp	r7, #0
1000ee2e:	d10f      	bne.n	1000ee50 <at_ble_encryption_start+0x60>
1000ee30:	1c21      	adds	r1, r4, #0
1000ee32:	221c      	movs	r2, #28
1000ee34:	4b09      	ldr	r3, [pc, #36]	; (1000ee5c <at_ble_encryption_start+0x6c>)
1000ee36:	480a      	ldr	r0, [pc, #40]	; (1000ee60 <at_ble_encryption_start+0x70>)
1000ee38:	4798      	blx	r3
1000ee3a:	1c23      	adds	r3, r4, #0
1000ee3c:	7ea1      	ldrb	r1, [r4, #26]
1000ee3e:	8a22      	ldrh	r2, [r4, #16]
1000ee40:	3312      	adds	r3, #18
1000ee42:	9100      	str	r1, [sp, #0]
1000ee44:	9501      	str	r5, [sp, #4]
1000ee46:	1c21      	adds	r1, r4, #0
1000ee48:	1c30      	adds	r0, r6, #0
1000ee4a:	4c06      	ldr	r4, [pc, #24]	; (1000ee64 <at_ble_encryption_start+0x74>)
1000ee4c:	47a0      	blx	r4
1000ee4e:	1c3b      	adds	r3, r7, #0
1000ee50:	1c18      	adds	r0, r3, #0
1000ee52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000ee54:	1000f105 	.word	0x1000f105
1000ee58:	1001d08a 	.word	0x1001d08a
1000ee5c:	10017d8f 	.word	0x10017d8f
1000ee60:	1001d198 	.word	0x1001d198
1000ee64:	1000f781 	.word	0x1000f781

1000ee68 <at_ble_encryption_request_reply>:
1000ee68:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000ee6a:	24cf      	movs	r4, #207	; 0xcf
1000ee6c:	2b00      	cmp	r3, #0
1000ee6e:	d011      	beq.n	1000ee94 <at_ble_encryption_request_reply+0x2c>
1000ee70:	2a00      	cmp	r2, #0
1000ee72:	d00a      	beq.n	1000ee8a <at_ble_encryption_request_reply+0x22>
1000ee74:	2905      	cmp	r1, #5
1000ee76:	d80d      	bhi.n	1000ee94 <at_ble_encryption_request_reply+0x2c>
1000ee78:	2501      	movs	r5, #1
1000ee7a:	2633      	movs	r6, #51	; 0x33
1000ee7c:	408d      	lsls	r5, r1
1000ee7e:	4235      	tst	r5, r6
1000ee80:	d008      	beq.n	1000ee94 <at_ble_encryption_request_reply+0x2c>
1000ee82:	7e9d      	ldrb	r5, [r3, #26]
1000ee84:	3d07      	subs	r5, #7
1000ee86:	2d09      	cmp	r5, #9
1000ee88:	d804      	bhi.n	1000ee94 <at_ble_encryption_request_reply+0x2c>
1000ee8a:	7e9c      	ldrb	r4, [r3, #26]
1000ee8c:	9400      	str	r4, [sp, #0]
1000ee8e:	4c02      	ldr	r4, [pc, #8]	; (1000ee98 <at_ble_encryption_request_reply+0x30>)
1000ee90:	47a0      	blx	r4
1000ee92:	2400      	movs	r4, #0
1000ee94:	1c20      	adds	r0, r4, #0
1000ee96:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000ee98:	1000f83d 	.word	0x1000f83d

1000ee9c <rx_callback>:
1000ee9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ee9e:	8883      	ldrh	r3, [r0, #4]
1000eea0:	1c01      	adds	r1, r0, #0
1000eea2:	9301      	str	r3, [sp, #4]
1000eea4:	88c5      	ldrh	r5, [r0, #6]
1000eea6:	8806      	ldrh	r6, [r0, #0]
1000eea8:	2d00      	cmp	r5, #0
1000eeaa:	d10f      	bne.n	1000eecc <rx_callback+0x30>
1000eeac:	1c19      	adds	r1, r3, #0
1000eeae:	1c30      	adds	r0, r6, #0
1000eeb0:	4b19      	ldr	r3, [pc, #100]	; (1000ef18 <rx_callback+0x7c>)
1000eeb2:	1c2a      	adds	r2, r5, #0
1000eeb4:	4798      	blx	r3
1000eeb6:	1e03      	subs	r3, r0, #0
1000eeb8:	d105      	bne.n	1000eec6 <rx_callback+0x2a>
1000eeba:	1c30      	adds	r0, r6, #0
1000eebc:	9901      	ldr	r1, [sp, #4]
1000eebe:	1c1a      	adds	r2, r3, #0
1000eec0:	4c16      	ldr	r4, [pc, #88]	; (1000ef1c <rx_callback+0x80>)
1000eec2:	47a0      	blx	r4
1000eec4:	e027      	b.n	1000ef16 <rx_callback+0x7a>
1000eec6:	4b16      	ldr	r3, [pc, #88]	; (1000ef20 <rx_callback+0x84>)
1000eec8:	4798      	blx	r3
1000eeca:	e024      	b.n	1000ef16 <rx_callback+0x7a>
1000eecc:	4c15      	ldr	r4, [pc, #84]	; (1000ef24 <rx_callback+0x88>)
1000eece:	4a16      	ldr	r2, [pc, #88]	; (1000ef28 <rx_callback+0x8c>)
1000eed0:	6823      	ldr	r3, [r4, #0]
1000eed2:	6812      	ldr	r2, [r2, #0]
1000eed4:	18eb      	adds	r3, r5, r3
1000eed6:	4293      	cmp	r3, r2
1000eed8:	d901      	bls.n	1000eede <rx_callback+0x42>
1000eeda:	2300      	movs	r3, #0
1000eedc:	6023      	str	r3, [r4, #0]
1000eede:	4f13      	ldr	r7, [pc, #76]	; (1000ef2c <rx_callback+0x90>)
1000eee0:	6822      	ldr	r2, [r4, #0]
1000eee2:	683b      	ldr	r3, [r7, #0]
1000eee4:	3108      	adds	r1, #8
1000eee6:	1898      	adds	r0, r3, r2
1000eee8:	1c2a      	adds	r2, r5, #0
1000eeea:	4b11      	ldr	r3, [pc, #68]	; (1000ef30 <rx_callback+0x94>)
1000eeec:	4798      	blx	r3
1000eeee:	683b      	ldr	r3, [r7, #0]
1000eef0:	6822      	ldr	r2, [r4, #0]
1000eef2:	1c30      	adds	r0, r6, #0
1000eef4:	189a      	adds	r2, r3, r2
1000eef6:	9901      	ldr	r1, [sp, #4]
1000eef8:	4b07      	ldr	r3, [pc, #28]	; (1000ef18 <rx_callback+0x7c>)
1000eefa:	4798      	blx	r3
1000eefc:	2800      	cmp	r0, #0
1000eefe:	d1e2      	bne.n	1000eec6 <rx_callback+0x2a>
1000ef00:	6823      	ldr	r3, [r4, #0]
1000ef02:	683a      	ldr	r2, [r7, #0]
1000ef04:	1c30      	adds	r0, r6, #0
1000ef06:	18d2      	adds	r2, r2, r3
1000ef08:	9901      	ldr	r1, [sp, #4]
1000ef0a:	1c2b      	adds	r3, r5, #0
1000ef0c:	4e03      	ldr	r6, [pc, #12]	; (1000ef1c <rx_callback+0x80>)
1000ef0e:	47b0      	blx	r6
1000ef10:	6823      	ldr	r3, [r4, #0]
1000ef12:	18ed      	adds	r5, r5, r3
1000ef14:	6025      	str	r5, [r4, #0]
1000ef16:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000ef18:	1000dd89 	.word	0x1000dd89
1000ef1c:	1000dd01 	.word	0x1000dd01
1000ef20:	1000c325 	.word	0x1000c325
1000ef24:	1001d1f4 	.word	0x1001d1f4
1000ef28:	1001c034 	.word	0x1001c034
1000ef2c:	1001c030 	.word	0x1001c030
1000ef30:	10017d8f 	.word	0x10017d8f

1000ef34 <interface_send>:
1000ef34:	b508      	push	{r3, lr}
1000ef36:	4b02      	ldr	r3, [pc, #8]	; (1000ef40 <interface_send+0xc>)
1000ef38:	4798      	blx	r3
1000ef3a:	2000      	movs	r0, #0
1000ef3c:	bd08      	pop	{r3, pc}
1000ef3e:	46c0      	nop			; (mov r8, r8)
1000ef40:	1000c009 	.word	0x1000c009

1000ef44 <interface_init>:
1000ef44:	2280      	movs	r2, #128	; 0x80
1000ef46:	b510      	push	{r4, lr}
1000ef48:	2100      	movs	r1, #0
1000ef4a:	1c04      	adds	r4, r0, #0
1000ef4c:	0092      	lsls	r2, r2, #2
1000ef4e:	4b08      	ldr	r3, [pc, #32]	; (1000ef70 <interface_init+0x2c>)
1000ef50:	4808      	ldr	r0, [pc, #32]	; (1000ef74 <interface_init+0x30>)
1000ef52:	4798      	blx	r3
1000ef54:	2200      	movs	r2, #0
1000ef56:	4b08      	ldr	r3, [pc, #32]	; (1000ef78 <interface_init+0x34>)
1000ef58:	601a      	str	r2, [r3, #0]
1000ef5a:	4a08      	ldr	r2, [pc, #32]	; (1000ef7c <interface_init+0x38>)
1000ef5c:	4b08      	ldr	r3, [pc, #32]	; (1000ef80 <interface_init+0x3c>)
1000ef5e:	601a      	str	r2, [r3, #0]
1000ef60:	4b08      	ldr	r3, [pc, #32]	; (1000ef84 <interface_init+0x40>)
1000ef62:	6922      	ldr	r2, [r4, #16]
1000ef64:	601a      	str	r2, [r3, #0]
1000ef66:	6962      	ldr	r2, [r4, #20]
1000ef68:	4b07      	ldr	r3, [pc, #28]	; (1000ef88 <interface_init+0x44>)
1000ef6a:	601a      	str	r2, [r3, #0]
1000ef6c:	bd10      	pop	{r4, pc}
1000ef6e:	46c0      	nop			; (mov r8, r8)
1000ef70:	10017dcb 	.word	0x10017dcb
1000ef74:	1001d3f8 	.word	0x1001d3f8
1000ef78:	1001d1f4 	.word	0x1001d1f4
1000ef7c:	1001d1f8 	.word	0x1001d1f8
1000ef80:	1001a4f0 	.word	0x1001a4f0
1000ef84:	1001c030 	.word	0x1001c030
1000ef88:	1001c034 	.word	0x1001c034

1000ef8c <platform_cmd_cmpl_signal>:
1000ef8c:	2201      	movs	r2, #1
1000ef8e:	4b01      	ldr	r3, [pc, #4]	; (1000ef94 <platform_cmd_cmpl_signal+0x8>)
1000ef90:	601a      	str	r2, [r3, #0]
1000ef92:	4770      	bx	lr
1000ef94:	1001c038 	.word	0x1001c038

1000ef98 <platform_cmd_cmpl_wait>:
1000ef98:	b510      	push	{r4, lr}
1000ef9a:	1c04      	adds	r4, r0, #0
1000ef9c:	4b07      	ldr	r3, [pc, #28]	; (1000efbc <platform_cmd_cmpl_wait+0x24>)
1000ef9e:	681a      	ldr	r2, [r3, #0]
1000efa0:	2a01      	cmp	r2, #1
1000efa2:	d003      	beq.n	1000efac <platform_cmd_cmpl_wait+0x14>
1000efa4:	4b06      	ldr	r3, [pc, #24]	; (1000efc0 <platform_cmd_cmpl_wait+0x28>)
1000efa6:	2000      	movs	r0, #0
1000efa8:	4798      	blx	r3
1000efaa:	e7f7      	b.n	1000ef9c <platform_cmd_cmpl_wait+0x4>
1000efac:	6819      	ldr	r1, [r3, #0]
1000efae:	2901      	cmp	r1, #1
1000efb0:	d102      	bne.n	1000efb8 <platform_cmd_cmpl_wait+0x20>
1000efb2:	2200      	movs	r2, #0
1000efb4:	601a      	str	r2, [r3, #0]
1000efb6:	e000      	b.n	1000efba <platform_cmd_cmpl_wait+0x22>
1000efb8:	7022      	strb	r2, [r4, #0]
1000efba:	bd10      	pop	{r4, pc}
1000efbc:	1001c038 	.word	0x1001c038
1000efc0:	1000c095 	.word	0x1000c095

1000efc4 <start_timer>:
1000efc4:	4770      	bx	lr

1000efc6 <stop_timer>:
1000efc6:	4770      	bx	lr

1000efc8 <dbg_le_set_bd_addr_req_handler>:
1000efc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000efca:	466b      	mov	r3, sp
1000efcc:	1dde      	adds	r6, r3, #7
1000efce:	2300      	movs	r3, #0
1000efd0:	7033      	strb	r3, [r6, #0]
1000efd2:	230f      	movs	r3, #15
1000efd4:	4c13      	ldr	r4, [pc, #76]	; (1000f024 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000efd6:	2703      	movs	r7, #3
1000efd8:	7023      	strb	r3, [r4, #0]
1000efda:	2300      	movs	r3, #0
1000efdc:	70e3      	strb	r3, [r4, #3]
1000efde:	4b12      	ldr	r3, [pc, #72]	; (1000f028 <dbg_le_set_bd_addr_req_handler+0x60>)
1000efe0:	1c01      	adds	r1, r0, #0
1000efe2:	881a      	ldrh	r2, [r3, #0]
1000efe4:	881b      	ldrh	r3, [r3, #0]
1000efe6:	7122      	strb	r2, [r4, #4]
1000efe8:	0a1b      	lsrs	r3, r3, #8
1000efea:	2206      	movs	r2, #6
1000efec:	7163      	strb	r3, [r4, #5]
1000efee:	480f      	ldr	r0, [pc, #60]	; (1000f02c <dbg_le_set_bd_addr_req_handler+0x64>)
1000eff0:	4b0f      	ldr	r3, [pc, #60]	; (1000f030 <dbg_le_set_bd_addr_req_handler+0x68>)
1000eff2:	7067      	strb	r7, [r4, #1]
1000eff4:	70a7      	strb	r7, [r4, #2]
1000eff6:	4798      	blx	r3
1000eff8:	4d0e      	ldr	r5, [pc, #56]	; (1000f034 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000effa:	4b0f      	ldr	r3, [pc, #60]	; (1000f038 <dbg_le_set_bd_addr_req_handler+0x70>)
1000effc:	210e      	movs	r1, #14
1000effe:	802b      	strh	r3, [r5, #0]
1000f000:	2306      	movs	r3, #6
1000f002:	71a3      	strb	r3, [r4, #6]
1000f004:	2300      	movs	r3, #0
1000f006:	1c20      	adds	r0, r4, #0
1000f008:	71e3      	strb	r3, [r4, #7]
1000f00a:	4b0c      	ldr	r3, [pc, #48]	; (1000f03c <dbg_le_set_bd_addr_req_handler+0x74>)
1000f00c:	80af      	strh	r7, [r5, #4]
1000f00e:	4798      	blx	r3
1000f010:	1c30      	adds	r0, r6, #0
1000f012:	4b0b      	ldr	r3, [pc, #44]	; (1000f040 <dbg_le_set_bd_addr_req_handler+0x78>)
1000f014:	4798      	blx	r3
1000f016:	7833      	ldrb	r3, [r6, #0]
1000f018:	20e2      	movs	r0, #226	; 0xe2
1000f01a:	2b00      	cmp	r3, #0
1000f01c:	d101      	bne.n	1000f022 <dbg_le_set_bd_addr_req_handler+0x5a>
1000f01e:	68ab      	ldr	r3, [r5, #8]
1000f020:	7818      	ldrb	r0, [r3, #0]
1000f022:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f024:	1001d3f8 	.word	0x1001d3f8
1000f028:	1001d088 	.word	0x1001d088
1000f02c:	1001d400 	.word	0x1001d400
1000f030:	10017d8f 	.word	0x10017d8f
1000f034:	1001d07c 	.word	0x1001d07c
1000f038:	00000329 	.word	0x00000329
1000f03c:	1000ef35 	.word	0x1000ef35
1000f040:	1000ef99 	.word	0x1000ef99

1000f044 <gapc_get_dev_info_cfm.constprop.1>:
1000f044:	b538      	push	{r3, r4, r5, lr}
1000f046:	230b      	movs	r3, #11
1000f048:	4c27      	ldr	r4, [pc, #156]	; (1000f0e8 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000f04a:	7023      	strb	r3, [r4, #0]
1000f04c:	3303      	adds	r3, #3
1000f04e:	7063      	strb	r3, [r4, #1]
1000f050:	3329      	adds	r3, #41	; 0x29
1000f052:	70a3      	strb	r3, [r4, #2]
1000f054:	4b25      	ldr	r3, [pc, #148]	; (1000f0ec <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000f056:	70e1      	strb	r1, [r4, #3]
1000f058:	881a      	ldrh	r2, [r3, #0]
1000f05a:	881b      	ldrh	r3, [r3, #0]
1000f05c:	7122      	strb	r2, [r4, #4]
1000f05e:	0a1b      	lsrs	r3, r3, #8
1000f060:	7163      	strb	r3, [r4, #5]
1000f062:	2300      	movs	r3, #0
1000f064:	7220      	strb	r0, [r4, #8]
1000f066:	7263      	strb	r3, [r4, #9]
1000f068:	2801      	cmp	r0, #1
1000f06a:	d02b      	beq.n	1000f0c4 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000f06c:	4298      	cmp	r0, r3
1000f06e:	d01b      	beq.n	1000f0a8 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000f070:	2802      	cmp	r0, #2
1000f072:	d12f      	bne.n	1000f0d4 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000f074:	4b1e      	ldr	r3, [pc, #120]	; (1000f0f0 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f076:	2112      	movs	r1, #18
1000f078:	1c1a      	adds	r2, r3, #0
1000f07a:	32ce      	adds	r2, #206	; 0xce
1000f07c:	8812      	ldrh	r2, [r2, #0]
1000f07e:	72a2      	strb	r2, [r4, #10]
1000f080:	0a12      	lsrs	r2, r2, #8
1000f082:	72e2      	strb	r2, [r4, #11]
1000f084:	1c1a      	adds	r2, r3, #0
1000f086:	32d0      	adds	r2, #208	; 0xd0
1000f088:	8812      	ldrh	r2, [r2, #0]
1000f08a:	7322      	strb	r2, [r4, #12]
1000f08c:	0a12      	lsrs	r2, r2, #8
1000f08e:	7362      	strb	r2, [r4, #13]
1000f090:	1c1a      	adds	r2, r3, #0
1000f092:	32d2      	adds	r2, #210	; 0xd2
1000f094:	8812      	ldrh	r2, [r2, #0]
1000f096:	33d4      	adds	r3, #212	; 0xd4
1000f098:	73a2      	strb	r2, [r4, #14]
1000f09a:	0a12      	lsrs	r2, r2, #8
1000f09c:	73e2      	strb	r2, [r4, #15]
1000f09e:	881b      	ldrh	r3, [r3, #0]
1000f0a0:	7423      	strb	r3, [r4, #16]
1000f0a2:	0a1b      	lsrs	r3, r3, #8
1000f0a4:	7463      	strb	r3, [r4, #17]
1000f0a6:	e016      	b.n	1000f0d6 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f0a8:	4b11      	ldr	r3, [pc, #68]	; (1000f0f0 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f0aa:	4912      	ldr	r1, [pc, #72]	; (1000f0f4 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000f0ac:	33aa      	adds	r3, #170	; 0xaa
1000f0ae:	881d      	ldrh	r5, [r3, #0]
1000f0b0:	4811      	ldr	r0, [pc, #68]	; (1000f0f8 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000f0b2:	0a2b      	lsrs	r3, r5, #8
1000f0b4:	72a5      	strb	r5, [r4, #10]
1000f0b6:	72e3      	strb	r3, [r4, #11]
1000f0b8:	1c2a      	adds	r2, r5, #0
1000f0ba:	4b10      	ldr	r3, [pc, #64]	; (1000f0fc <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000f0bc:	350c      	adds	r5, #12
1000f0be:	4798      	blx	r3
1000f0c0:	b2a9      	uxth	r1, r5
1000f0c2:	e008      	b.n	1000f0d6 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f0c4:	4b0a      	ldr	r3, [pc, #40]	; (1000f0f0 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f0c6:	210c      	movs	r1, #12
1000f0c8:	33cc      	adds	r3, #204	; 0xcc
1000f0ca:	881b      	ldrh	r3, [r3, #0]
1000f0cc:	72a3      	strb	r3, [r4, #10]
1000f0ce:	0a1b      	lsrs	r3, r3, #8
1000f0d0:	72e3      	strb	r3, [r4, #11]
1000f0d2:	e000      	b.n	1000f0d6 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f0d4:	210a      	movs	r1, #10
1000f0d6:	1c0b      	adds	r3, r1, #0
1000f0d8:	3b08      	subs	r3, #8
1000f0da:	71a3      	strb	r3, [r4, #6]
1000f0dc:	121b      	asrs	r3, r3, #8
1000f0de:	71e3      	strb	r3, [r4, #7]
1000f0e0:	1c20      	adds	r0, r4, #0
1000f0e2:	4b07      	ldr	r3, [pc, #28]	; (1000f100 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000f0e4:	4798      	blx	r3
1000f0e6:	bd38      	pop	{r3, r4, r5, pc}
1000f0e8:	1001d3f8 	.word	0x1001d3f8
1000f0ec:	1001d088 	.word	0x1001d088
1000f0f0:	1001d11a 	.word	0x1001d11a
1000f0f4:	1001d1c6 	.word	0x1001d1c6
1000f0f8:	1001d404 	.word	0x1001d404
1000f0fc:	10017d8f 	.word	0x10017d8f
1000f100:	1000ef35 	.word	0x1000ef35

1000f104 <check_ConnData_idx_role>:
1000f104:	4b0c      	ldr	r3, [pc, #48]	; (1000f138 <check_ConnData_idx_role+0x34>)
1000f106:	b570      	push	{r4, r5, r6, lr}
1000f108:	1c04      	adds	r4, r0, #0
1000f10a:	2008      	movs	r0, #8
1000f10c:	429c      	cmp	r4, r3
1000f10e:	d011      	beq.n	1000f134 <check_ConnData_idx_role+0x30>
1000f110:	2300      	movs	r3, #0
1000f112:	2212      	movs	r2, #18
1000f114:	435a      	muls	r2, r3
1000f116:	4d09      	ldr	r5, [pc, #36]	; (1000f13c <check_ConnData_idx_role+0x38>)
1000f118:	b2d8      	uxtb	r0, r3
1000f11a:	1956      	adds	r6, r2, r5
1000f11c:	8976      	ldrh	r6, [r6, #10]
1000f11e:	42a6      	cmp	r6, r4
1000f120:	d104      	bne.n	1000f12c <check_ConnData_idx_role+0x28>
1000f122:	2900      	cmp	r1, #0
1000f124:	d006      	beq.n	1000f134 <check_ConnData_idx_role+0x30>
1000f126:	5d53      	ldrb	r3, [r2, r5]
1000f128:	700b      	strb	r3, [r1, #0]
1000f12a:	e003      	b.n	1000f134 <check_ConnData_idx_role+0x30>
1000f12c:	3301      	adds	r3, #1
1000f12e:	2b08      	cmp	r3, #8
1000f130:	d1ef      	bne.n	1000f112 <check_ConnData_idx_role+0xe>
1000f132:	1c18      	adds	r0, r3, #0
1000f134:	bd70      	pop	{r4, r5, r6, pc}
1000f136:	46c0      	nop			; (mov r8, r8)
1000f138:	0000ffff 	.word	0x0000ffff
1000f13c:	1001d08a 	.word	0x1001d08a

1000f140 <check_ConnData_emptyEntry>:
1000f140:	2300      	movs	r3, #0
1000f142:	2212      	movs	r2, #18
1000f144:	435a      	muls	r2, r3
1000f146:	4906      	ldr	r1, [pc, #24]	; (1000f160 <check_ConnData_emptyEntry+0x20>)
1000f148:	b2d8      	uxtb	r0, r3
1000f14a:	1852      	adds	r2, r2, r1
1000f14c:	8951      	ldrh	r1, [r2, #10]
1000f14e:	4a05      	ldr	r2, [pc, #20]	; (1000f164 <check_ConnData_emptyEntry+0x24>)
1000f150:	4291      	cmp	r1, r2
1000f152:	d003      	beq.n	1000f15c <check_ConnData_emptyEntry+0x1c>
1000f154:	3301      	adds	r3, #1
1000f156:	2b08      	cmp	r3, #8
1000f158:	d1f3      	bne.n	1000f142 <check_ConnData_emptyEntry+0x2>
1000f15a:	1c18      	adds	r0, r3, #0
1000f15c:	4770      	bx	lr
1000f15e:	46c0      	nop			; (mov r8, r8)
1000f160:	1001d08a 	.word	0x1001d08a
1000f164:	0000ffff 	.word	0x0000ffff

1000f168 <gapc_cmp_evt>:
1000f168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f16a:	780b      	ldrb	r3, [r1, #0]
1000f16c:	1c05      	adds	r5, r0, #0
1000f16e:	1e58      	subs	r0, r3, #1
1000f170:	784e      	ldrb	r6, [r1, #1]
1000f172:	280f      	cmp	r0, #15
1000f174:	d85a      	bhi.n	1000f22c <gapc_cmp_evt+0xc4>
1000f176:	1c14      	adds	r4, r2, #0
1000f178:	f005 fc72 	bl	10014a60 <__gnu_thumb1_case_uqi>
1000f17c:	5858440a 	.word	0x5858440a
1000f180:	4b584444 	.word	0x4b584444
1000f184:	0825122d 	.word	0x0825122d
1000f188:	3e395858 	.word	0x3e395858
1000f18c:	203b      	movs	r0, #59	; 0x3b
1000f18e:	e04e      	b.n	1000f22e <gapc_cmp_evt+0xc6>
1000f190:	203b      	movs	r0, #59	; 0x3b
1000f192:	2e00      	cmp	r6, #0
1000f194:	d04b      	beq.n	1000f22e <gapc_cmp_evt+0xc6>
1000f196:	0a2d      	lsrs	r5, r5, #8
1000f198:	8015      	strh	r5, [r2, #0]
1000f19a:	7096      	strb	r6, [r2, #2]
1000f19c:	3835      	subs	r0, #53	; 0x35
1000f19e:	e046      	b.n	1000f22e <gapc_cmp_evt+0xc6>
1000f1a0:	466b      	mov	r3, sp
1000f1a2:	1ddf      	adds	r7, r3, #7
1000f1a4:	2301      	movs	r3, #1
1000f1a6:	0a2d      	lsrs	r5, r5, #8
1000f1a8:	703b      	strb	r3, [r7, #0]
1000f1aa:	1c28      	adds	r0, r5, #0
1000f1ac:	1c39      	adds	r1, r7, #0
1000f1ae:	4b20      	ldr	r3, [pc, #128]	; (1000f230 <gapc_cmp_evt+0xc8>)
1000f1b0:	4798      	blx	r3
1000f1b2:	2807      	cmp	r0, #7
1000f1b4:	d803      	bhi.n	1000f1be <gapc_cmp_evt+0x56>
1000f1b6:	783b      	ldrb	r3, [r7, #0]
1000f1b8:	203b      	movs	r0, #59	; 0x3b
1000f1ba:	2b00      	cmp	r3, #0
1000f1bc:	d037      	beq.n	1000f22e <gapc_cmp_evt+0xc6>
1000f1be:	8065      	strh	r5, [r4, #2]
1000f1c0:	7126      	strb	r6, [r4, #4]
1000f1c2:	2009      	movs	r0, #9
1000f1c4:	e033      	b.n	1000f22e <gapc_cmp_evt+0xc6>
1000f1c6:	203b      	movs	r0, #59	; 0x3b
1000f1c8:	2e00      	cmp	r6, #0
1000f1ca:	d030      	beq.n	1000f22e <gapc_cmp_evt+0xc6>
1000f1cc:	0a2d      	lsrs	r5, r5, #8
1000f1ce:	8015      	strh	r5, [r2, #0]
1000f1d0:	7096      	strb	r6, [r2, #2]
1000f1d2:	382d      	subs	r0, #45	; 0x2d
1000f1d4:	e02b      	b.n	1000f22e <gapc_cmp_evt+0xc6>
1000f1d6:	203b      	movs	r0, #59	; 0x3b
1000f1d8:	2e00      	cmp	r6, #0
1000f1da:	d028      	beq.n	1000f22e <gapc_cmp_evt+0xc6>
1000f1dc:	2300      	movs	r3, #0
1000f1de:	0a2d      	lsrs	r5, r5, #8
1000f1e0:	8015      	strh	r5, [r2, #0]
1000f1e2:	7096      	strb	r6, [r2, #2]
1000f1e4:	8093      	strh	r3, [r2, #4]
1000f1e6:	80d3      	strh	r3, [r2, #6]
1000f1e8:	8113      	strh	r3, [r2, #8]
1000f1ea:	3834      	subs	r0, #52	; 0x34
1000f1ec:	e01f      	b.n	1000f22e <gapc_cmp_evt+0xc6>
1000f1ee:	203b      	movs	r0, #59	; 0x3b
1000f1f0:	2e00      	cmp	r6, #0
1000f1f2:	d01c      	beq.n	1000f22e <gapc_cmp_evt+0xc6>
1000f1f4:	7216      	strb	r6, [r2, #8]
1000f1f6:	e003      	b.n	1000f200 <gapc_cmp_evt+0x98>
1000f1f8:	203b      	movs	r0, #59	; 0x3b
1000f1fa:	2e00      	cmp	r6, #0
1000f1fc:	d017      	beq.n	1000f22e <gapc_cmp_evt+0xc6>
1000f1fe:	7116      	strb	r6, [r2, #4]
1000f200:	3812      	subs	r0, #18
1000f202:	e014      	b.n	1000f22e <gapc_cmp_evt+0xc6>
1000f204:	203b      	movs	r0, #59	; 0x3b
1000f206:	2e00      	cmp	r6, #0
1000f208:	d011      	beq.n	1000f22e <gapc_cmp_evt+0xc6>
1000f20a:	7093      	strb	r3, [r2, #2]
1000f20c:	70d6      	strb	r6, [r2, #3]
1000f20e:	382a      	subs	r0, #42	; 0x2a
1000f210:	e00d      	b.n	1000f22e <gapc_cmp_evt+0xc6>
1000f212:	203b      	movs	r0, #59	; 0x3b
1000f214:	2e00      	cmp	r6, #0
1000f216:	d00a      	beq.n	1000f22e <gapc_cmp_evt+0xc6>
1000f218:	0a2d      	lsrs	r5, r5, #8
1000f21a:	7016      	strb	r6, [r2, #0]
1000f21c:	8055      	strh	r5, [r2, #2]
1000f21e:	1d10      	adds	r0, r2, #4
1000f220:	2100      	movs	r1, #0
1000f222:	2205      	movs	r2, #5
1000f224:	4b03      	ldr	r3, [pc, #12]	; (1000f234 <gapc_cmp_evt+0xcc>)
1000f226:	4798      	blx	r3
1000f228:	2012      	movs	r0, #18
1000f22a:	e000      	b.n	1000f22e <gapc_cmp_evt+0xc6>
1000f22c:	2000      	movs	r0, #0
1000f22e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f230:	1000f105 	.word	0x1000f105
1000f234:	10017dcb 	.word	0x10017dcb

1000f238 <gapc_connection_cfm_handler>:
1000f238:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f23a:	b085      	sub	sp, #20
1000f23c:	1c1d      	adds	r5, r3, #0
1000f23e:	ab0a      	add	r3, sp, #40	; 0x28
1000f240:	781b      	ldrb	r3, [r3, #0]
1000f242:	9201      	str	r2, [sp, #4]
1000f244:	9302      	str	r3, [sp, #8]
1000f246:	ab0b      	add	r3, sp, #44	; 0x2c
1000f248:	781b      	ldrb	r3, [r3, #0]
1000f24a:	1c07      	adds	r7, r0, #0
1000f24c:	9303      	str	r3, [sp, #12]
1000f24e:	ab0c      	add	r3, sp, #48	; 0x30
1000f250:	881a      	ldrh	r2, [r3, #0]
1000f252:	2302      	movs	r3, #2
1000f254:	1c0e      	adds	r6, r1, #0
1000f256:	4c23      	ldr	r4, [pc, #140]	; (1000f2e4 <gapc_connection_cfm_handler+0xac>)
1000f258:	1c39      	adds	r1, r7, #0
1000f25a:	7023      	strb	r3, [r4, #0]
1000f25c:	330c      	adds	r3, #12
1000f25e:	7063      	strb	r3, [r4, #1]
1000f260:	70a3      	strb	r3, [r4, #2]
1000f262:	4b21      	ldr	r3, [pc, #132]	; (1000f2e8 <gapc_connection_cfm_handler+0xb0>)
1000f264:	70e2      	strb	r2, [r4, #3]
1000f266:	881a      	ldrh	r2, [r3, #0]
1000f268:	881b      	ldrh	r3, [r3, #0]
1000f26a:	7122      	strb	r2, [r4, #4]
1000f26c:	0a1b      	lsrs	r3, r3, #8
1000f26e:	4f1f      	ldr	r7, [pc, #124]	; (1000f2ec <gapc_connection_cfm_handler+0xb4>)
1000f270:	2210      	movs	r2, #16
1000f272:	481f      	ldr	r0, [pc, #124]	; (1000f2f0 <gapc_connection_cfm_handler+0xb8>)
1000f274:	7163      	strb	r3, [r4, #5]
1000f276:	47b8      	blx	r7
1000f278:	0a33      	lsrs	r3, r6, #8
1000f27a:	7626      	strb	r6, [r4, #24]
1000f27c:	7663      	strb	r3, [r4, #25]
1000f27e:	9901      	ldr	r1, [sp, #4]
1000f280:	0c33      	lsrs	r3, r6, #16
1000f282:	2210      	movs	r2, #16
1000f284:	0e36      	lsrs	r6, r6, #24
1000f286:	481b      	ldr	r0, [pc, #108]	; (1000f2f4 <gapc_connection_cfm_handler+0xbc>)
1000f288:	76a3      	strb	r3, [r4, #26]
1000f28a:	76e6      	strb	r6, [r4, #27]
1000f28c:	47b8      	blx	r7
1000f28e:	1c23      	adds	r3, r4, #0
1000f290:	332c      	adds	r3, #44	; 0x2c
1000f292:	701d      	strb	r5, [r3, #0]
1000f294:	1c23      	adds	r3, r4, #0
1000f296:	0a2a      	lsrs	r2, r5, #8
1000f298:	332d      	adds	r3, #45	; 0x2d
1000f29a:	701a      	strb	r2, [r3, #0]
1000f29c:	1c23      	adds	r3, r4, #0
1000f29e:	0c2a      	lsrs	r2, r5, #16
1000f2a0:	332e      	adds	r3, #46	; 0x2e
1000f2a2:	701a      	strb	r2, [r3, #0]
1000f2a4:	1c23      	adds	r3, r4, #0
1000f2a6:	0e2d      	lsrs	r5, r5, #24
1000f2a8:	332f      	adds	r3, #47	; 0x2f
1000f2aa:	466a      	mov	r2, sp
1000f2ac:	701d      	strb	r5, [r3, #0]
1000f2ae:	1c23      	adds	r3, r4, #0
1000f2b0:	7a12      	ldrb	r2, [r2, #8]
1000f2b2:	3330      	adds	r3, #48	; 0x30
1000f2b4:	701a      	strb	r2, [r3, #0]
1000f2b6:	1c23      	adds	r3, r4, #0
1000f2b8:	2500      	movs	r5, #0
1000f2ba:	3331      	adds	r3, #49	; 0x31
1000f2bc:	466a      	mov	r2, sp
1000f2be:	701d      	strb	r5, [r3, #0]
1000f2c0:	1c23      	adds	r3, r4, #0
1000f2c2:	7b12      	ldrb	r2, [r2, #12]
1000f2c4:	3332      	adds	r3, #50	; 0x32
1000f2c6:	701a      	strb	r2, [r3, #0]
1000f2c8:	1c23      	adds	r3, r4, #0
1000f2ca:	3333      	adds	r3, #51	; 0x33
1000f2cc:	701d      	strb	r5, [r3, #0]
1000f2ce:	232c      	movs	r3, #44	; 0x2c
1000f2d0:	1c20      	adds	r0, r4, #0
1000f2d2:	71a3      	strb	r3, [r4, #6]
1000f2d4:	2134      	movs	r1, #52	; 0x34
1000f2d6:	4b08      	ldr	r3, [pc, #32]	; (1000f2f8 <gapc_connection_cfm_handler+0xc0>)
1000f2d8:	71e5      	strb	r5, [r4, #7]
1000f2da:	4798      	blx	r3
1000f2dc:	1c28      	adds	r0, r5, #0
1000f2de:	b005      	add	sp, #20
1000f2e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f2e2:	46c0      	nop			; (mov r8, r8)
1000f2e4:	1001d3f8 	.word	0x1001d3f8
1000f2e8:	1001d088 	.word	0x1001d088
1000f2ec:	10017d8f 	.word	0x10017d8f
1000f2f0:	1001d400 	.word	0x1001d400
1000f2f4:	1001d414 	.word	0x1001d414
1000f2f8:	1000ef35 	.word	0x1000ef35

1000f2fc <gapc_con_req_ind>:
1000f2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f2fe:	7845      	ldrb	r5, [r0, #1]
1000f300:	7803      	ldrb	r3, [r0, #0]
1000f302:	4c30      	ldr	r4, [pc, #192]	; (1000f3c4 <gapc_con_req_ind+0xc8>)
1000f304:	022d      	lsls	r5, r5, #8
1000f306:	431d      	orrs	r5, r3
1000f308:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000f30a:	78c3      	ldrb	r3, [r0, #3]
1000f30c:	7882      	ldrb	r2, [r0, #2]
1000f30e:	b08b      	sub	sp, #44	; 0x2c
1000f310:	021b      	lsls	r3, r3, #8
1000f312:	431a      	orrs	r2, r3
1000f314:	466b      	mov	r3, sp
1000f316:	9205      	str	r2, [sp, #20]
1000f318:	8a9b      	ldrh	r3, [r3, #20]
1000f31a:	2120      	movs	r1, #32
1000f31c:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000f31e:	7943      	ldrb	r3, [r0, #5]
1000f320:	7902      	ldrb	r2, [r0, #4]
1000f322:	021b      	lsls	r3, r3, #8
1000f324:	431a      	orrs	r2, r3
1000f326:	466b      	mov	r3, sp
1000f328:	9206      	str	r2, [sp, #24]
1000f32a:	8b1b      	ldrh	r3, [r3, #24]
1000f32c:	1c06      	adds	r6, r0, #0
1000f32e:	8623      	strh	r3, [r4, #48]	; 0x30
1000f330:	79c3      	ldrb	r3, [r0, #7]
1000f332:	7982      	ldrb	r2, [r0, #6]
1000f334:	021b      	lsls	r3, r3, #8
1000f336:	431a      	orrs	r2, r3
1000f338:	466b      	mov	r3, sp
1000f33a:	9207      	str	r2, [sp, #28]
1000f33c:	466a      	mov	r2, sp
1000f33e:	8b9b      	ldrh	r3, [r3, #28]
1000f340:	1852      	adds	r2, r2, r1
1000f342:	8663      	strh	r3, [r4, #50]	; 0x32
1000f344:	7a43      	ldrb	r3, [r0, #9]
1000f346:	1c01      	adds	r1, r0, #0
1000f348:	9308      	str	r3, [sp, #32]
1000f34a:	1c23      	adds	r3, r4, #0
1000f34c:	7812      	ldrb	r2, [r2, #0]
1000f34e:	3377      	adds	r3, #119	; 0x77
1000f350:	3478      	adds	r4, #120	; 0x78
1000f352:	701a      	strb	r2, [r3, #0]
1000f354:	310a      	adds	r1, #10
1000f356:	2206      	movs	r2, #6
1000f358:	4b1b      	ldr	r3, [pc, #108]	; (1000f3c8 <gapc_con_req_ind+0xcc>)
1000f35a:	1c20      	adds	r0, r4, #0
1000f35c:	4798      	blx	r3
1000f35e:	7c33      	ldrb	r3, [r6, #16]
1000f360:	9309      	str	r3, [sp, #36]	; 0x24
1000f362:	4b1a      	ldr	r3, [pc, #104]	; (1000f3cc <gapc_con_req_ind+0xd0>)
1000f364:	4798      	blx	r3
1000f366:	4e1a      	ldr	r6, [pc, #104]	; (1000f3d0 <gapc_con_req_ind+0xd4>)
1000f368:	1e07      	subs	r7, r0, #0
1000f36a:	2f07      	cmp	r7, #7
1000f36c:	d81b      	bhi.n	1000f3a6 <gapc_con_req_ind+0xaa>
1000f36e:	2312      	movs	r3, #18
1000f370:	4343      	muls	r3, r0
1000f372:	18f0      	adds	r0, r6, r3
1000f374:	8145      	strh	r5, [r0, #10]
1000f376:	4669      	mov	r1, sp
1000f378:	2524      	movs	r5, #36	; 0x24
1000f37a:	1949      	adds	r1, r1, r5
1000f37c:	7809      	ldrb	r1, [r1, #0]
1000f37e:	2206      	movs	r2, #6
1000f380:	54f1      	strb	r1, [r6, r3]
1000f382:	2120      	movs	r1, #32
1000f384:	466b      	mov	r3, sp
1000f386:	185b      	adds	r3, r3, r1
1000f388:	781b      	ldrb	r3, [r3, #0]
1000f38a:	1c21      	adds	r1, r4, #0
1000f38c:	7043      	strb	r3, [r0, #1]
1000f38e:	466b      	mov	r3, sp
1000f390:	8a9b      	ldrh	r3, [r3, #20]
1000f392:	3002      	adds	r0, #2
1000f394:	8143      	strh	r3, [r0, #10]
1000f396:	466b      	mov	r3, sp
1000f398:	8b1b      	ldrh	r3, [r3, #24]
1000f39a:	8183      	strh	r3, [r0, #12]
1000f39c:	466b      	mov	r3, sp
1000f39e:	8b9b      	ldrh	r3, [r3, #28]
1000f3a0:	81c3      	strh	r3, [r0, #14]
1000f3a2:	4b09      	ldr	r3, [pc, #36]	; (1000f3c8 <gapc_con_req_ind+0xcc>)
1000f3a4:	4798      	blx	r3
1000f3a6:	2112      	movs	r1, #18
1000f3a8:	2300      	movs	r3, #0
1000f3aa:	434f      	muls	r7, r1
1000f3ac:	9300      	str	r3, [sp, #0]
1000f3ae:	9301      	str	r3, [sp, #4]
1000f3b0:	19f6      	adds	r6, r6, r7
1000f3b2:	8971      	ldrh	r1, [r6, #10]
1000f3b4:	4a07      	ldr	r2, [pc, #28]	; (1000f3d4 <gapc_con_req_ind+0xd8>)
1000f3b6:	9102      	str	r1, [sp, #8]
1000f3b8:	1c10      	adds	r0, r2, #0
1000f3ba:	1c19      	adds	r1, r3, #0
1000f3bc:	4c06      	ldr	r4, [pc, #24]	; (1000f3d8 <gapc_con_req_ind+0xdc>)
1000f3be:	47a0      	blx	r4
1000f3c0:	b00b      	add	sp, #44	; 0x2c
1000f3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f3c4:	1001d11a 	.word	0x1001d11a
1000f3c8:	10017d8f 	.word	0x10017d8f
1000f3cc:	1000f141 	.word	0x1000f141
1000f3d0:	1001d08a 	.word	0x1001d08a
1000f3d4:	1001c03c 	.word	0x1001c03c
1000f3d8:	1000f239 	.word	0x1000f239

1000f3dc <gapc_disconnect_cmd_handler>:
1000f3dc:	2204      	movs	r2, #4
1000f3de:	b510      	push	{r4, lr}
1000f3e0:	4b0c      	ldr	r3, [pc, #48]	; (1000f414 <gapc_disconnect_cmd_handler+0x38>)
1000f3e2:	2400      	movs	r4, #0
1000f3e4:	701a      	strb	r2, [r3, #0]
1000f3e6:	320a      	adds	r2, #10
1000f3e8:	705a      	strb	r2, [r3, #1]
1000f3ea:	709a      	strb	r2, [r3, #2]
1000f3ec:	4a0a      	ldr	r2, [pc, #40]	; (1000f418 <gapc_disconnect_cmd_handler+0x3c>)
1000f3ee:	70d9      	strb	r1, [r3, #3]
1000f3f0:	8811      	ldrh	r1, [r2, #0]
1000f3f2:	8812      	ldrh	r2, [r2, #0]
1000f3f4:	7119      	strb	r1, [r3, #4]
1000f3f6:	0a12      	lsrs	r2, r2, #8
1000f3f8:	715a      	strb	r2, [r3, #5]
1000f3fa:	2201      	movs	r2, #1
1000f3fc:	721a      	strb	r2, [r3, #8]
1000f3fe:	1892      	adds	r2, r2, r2
1000f400:	7258      	strb	r0, [r3, #9]
1000f402:	719a      	strb	r2, [r3, #6]
1000f404:	71dc      	strb	r4, [r3, #7]
1000f406:	1c18      	adds	r0, r3, #0
1000f408:	210a      	movs	r1, #10
1000f40a:	4b04      	ldr	r3, [pc, #16]	; (1000f41c <gapc_disconnect_cmd_handler+0x40>)
1000f40c:	4798      	blx	r3
1000f40e:	1c20      	adds	r0, r4, #0
1000f410:	bd10      	pop	{r4, pc}
1000f412:	46c0      	nop			; (mov r8, r8)
1000f414:	1001d3f8 	.word	0x1001d3f8
1000f418:	1001d088 	.word	0x1001d088
1000f41c:	1000ef35 	.word	0x1000ef35

1000f420 <gapc_disconnect_ind>:
1000f420:	1c02      	adds	r2, r0, #0
1000f422:	b508      	push	{r3, lr}
1000f424:	7843      	ldrb	r3, [r0, #1]
1000f426:	7800      	ldrb	r0, [r0, #0]
1000f428:	021b      	lsls	r3, r3, #8
1000f42a:	4318      	orrs	r0, r3
1000f42c:	8008      	strh	r0, [r1, #0]
1000f42e:	7893      	ldrb	r3, [r2, #2]
1000f430:	708b      	strb	r3, [r1, #2]
1000f432:	2100      	movs	r1, #0
1000f434:	4b05      	ldr	r3, [pc, #20]	; (1000f44c <gapc_disconnect_ind+0x2c>)
1000f436:	4798      	blx	r3
1000f438:	2807      	cmp	r0, #7
1000f43a:	d806      	bhi.n	1000f44a <gapc_disconnect_ind+0x2a>
1000f43c:	2312      	movs	r3, #18
1000f43e:	4358      	muls	r0, r3
1000f440:	4b03      	ldr	r3, [pc, #12]	; (1000f450 <gapc_disconnect_ind+0x30>)
1000f442:	1818      	adds	r0, r3, r0
1000f444:	2301      	movs	r3, #1
1000f446:	425b      	negs	r3, r3
1000f448:	8143      	strh	r3, [r0, #10]
1000f44a:	bd08      	pop	{r3, pc}
1000f44c:	1000f105 	.word	0x1000f105
1000f450:	1001d08a 	.word	0x1001d08a

1000f454 <gapc_bond_cmd_handler>:
1000f454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f456:	9300      	str	r3, [sp, #0]
1000f458:	2312      	movs	r3, #18
1000f45a:	1c04      	adds	r4, r0, #0
1000f45c:	a808      	add	r0, sp, #32
1000f45e:	7807      	ldrb	r7, [r0, #0]
1000f460:	a809      	add	r0, sp, #36	; 0x24
1000f462:	7806      	ldrb	r6, [r0, #0]
1000f464:	a80a      	add	r0, sp, #40	; 0x28
1000f466:	7805      	ldrb	r5, [r0, #0]
1000f468:	a80b      	add	r0, sp, #44	; 0x2c
1000f46a:	7800      	ldrb	r0, [r0, #0]
1000f46c:	9001      	str	r0, [sp, #4]
1000f46e:	4810      	ldr	r0, [pc, #64]	; (1000f4b0 <gapc_bond_cmd_handler+0x5c>)
1000f470:	7003      	strb	r3, [r0, #0]
1000f472:	230e      	movs	r3, #14
1000f474:	70c4      	strb	r4, [r0, #3]
1000f476:	4c0f      	ldr	r4, [pc, #60]	; (1000f4b4 <gapc_bond_cmd_handler+0x60>)
1000f478:	7043      	strb	r3, [r0, #1]
1000f47a:	7083      	strb	r3, [r0, #2]
1000f47c:	8823      	ldrh	r3, [r4, #0]
1000f47e:	8824      	ldrh	r4, [r4, #0]
1000f480:	7103      	strb	r3, [r0, #4]
1000f482:	466b      	mov	r3, sp
1000f484:	781b      	ldrb	r3, [r3, #0]
1000f486:	0a24      	lsrs	r4, r4, #8
1000f488:	72c3      	strb	r3, [r0, #11]
1000f48a:	466b      	mov	r3, sp
1000f48c:	791b      	ldrb	r3, [r3, #4]
1000f48e:	7144      	strb	r4, [r0, #5]
1000f490:	73c3      	strb	r3, [r0, #15]
1000f492:	2308      	movs	r3, #8
1000f494:	7183      	strb	r3, [r0, #6]
1000f496:	2300      	movs	r3, #0
1000f498:	240a      	movs	r4, #10
1000f49a:	7241      	strb	r1, [r0, #9]
1000f49c:	71c3      	strb	r3, [r0, #7]
1000f49e:	2110      	movs	r1, #16
1000f4a0:	4b05      	ldr	r3, [pc, #20]	; (1000f4b8 <gapc_bond_cmd_handler+0x64>)
1000f4a2:	7307      	strb	r7, [r0, #12]
1000f4a4:	7346      	strb	r6, [r0, #13]
1000f4a6:	7385      	strb	r5, [r0, #14]
1000f4a8:	7204      	strb	r4, [r0, #8]
1000f4aa:	7282      	strb	r2, [r0, #10]
1000f4ac:	4798      	blx	r3
1000f4ae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f4b0:	1001d3f8 	.word	0x1001d3f8
1000f4b4:	1001d088 	.word	0x1001d088
1000f4b8:	1000ef35 	.word	0x1000ef35

1000f4bc <gapc_bond_ind>:
1000f4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f4be:	780e      	ldrb	r6, [r1, #0]
1000f4c0:	1c03      	adds	r3, r0, #0
1000f4c2:	1eb0      	subs	r0, r6, #2
1000f4c4:	2805      	cmp	r0, #5
1000f4c6:	d85d      	bhi.n	1000f584 <gapc_bond_ind+0xc8>
1000f4c8:	1c15      	adds	r5, r2, #0
1000f4ca:	1c0c      	adds	r4, r1, #0
1000f4cc:	f005 fac8 	bl	10014a60 <__gnu_thumb1_case_uqi>
1000f4d0:	2f5a030d 	.word	0x2f5a030d
1000f4d4:	4740      	.short	0x4740
1000f4d6:	2009      	movs	r0, #9
1000f4d8:	2a00      	cmp	r2, #0
1000f4da:	d054      	beq.n	1000f586 <gapc_bond_ind+0xca>
1000f4dc:	0a1b      	lsrs	r3, r3, #8
1000f4de:	8053      	strh	r3, [r2, #2]
1000f4e0:	788b      	ldrb	r3, [r1, #2]
1000f4e2:	4829      	ldr	r0, [pc, #164]	; (1000f588 <gapc_bond_ind+0xcc>)
1000f4e4:	7113      	strb	r3, [r2, #4]
1000f4e6:	2100      	movs	r1, #0
1000f4e8:	e01c      	b.n	1000f524 <gapc_bond_ind+0x68>
1000f4ea:	2009      	movs	r0, #9
1000f4ec:	2a00      	cmp	r2, #0
1000f4ee:	d04a      	beq.n	1000f586 <gapc_bond_ind+0xca>
1000f4f0:	4c25      	ldr	r4, [pc, #148]	; (1000f588 <gapc_bond_ind+0xcc>)
1000f4f2:	0a1b      	lsrs	r3, r3, #8
1000f4f4:	8053      	strh	r3, [r2, #2]
1000f4f6:	788b      	ldrb	r3, [r1, #2]
1000f4f8:	2700      	movs	r7, #0
1000f4fa:	1c10      	adds	r0, r2, #0
1000f4fc:	1c21      	adds	r1, r4, #0
1000f4fe:	7013      	strb	r3, [r2, #0]
1000f500:	4e22      	ldr	r6, [pc, #136]	; (1000f58c <gapc_bond_ind+0xd0>)
1000f502:	7117      	strb	r7, [r2, #4]
1000f504:	312e      	adds	r1, #46	; 0x2e
1000f506:	2217      	movs	r2, #23
1000f508:	3032      	adds	r0, #50	; 0x32
1000f50a:	47b0      	blx	r6
1000f50c:	1c28      	adds	r0, r5, #0
1000f50e:	1c21      	adds	r1, r4, #0
1000f510:	2210      	movs	r2, #16
1000f512:	311e      	adds	r1, #30
1000f514:	3022      	adds	r0, #34	; 0x22
1000f516:	47b0      	blx	r6
1000f518:	1ca1      	adds	r1, r4, #2
1000f51a:	1da8      	adds	r0, r5, #6
1000f51c:	221c      	movs	r2, #28
1000f51e:	47b0      	blx	r6
1000f520:	1c20      	adds	r0, r4, #0
1000f522:	1c39      	adds	r1, r7, #0
1000f524:	2246      	movs	r2, #70	; 0x46
1000f526:	4b1a      	ldr	r3, [pc, #104]	; (1000f590 <gapc_bond_ind+0xd4>)
1000f528:	4798      	blx	r3
1000f52a:	2009      	movs	r0, #9
1000f52c:	e02b      	b.n	1000f586 <gapc_bond_ind+0xca>
1000f52e:	4d16      	ldr	r5, [pc, #88]	; (1000f588 <gapc_bond_ind+0xcc>)
1000f530:	3102      	adds	r1, #2
1000f532:	1c28      	adds	r0, r5, #0
1000f534:	2210      	movs	r2, #16
1000f536:	4e15      	ldr	r6, [pc, #84]	; (1000f58c <gapc_bond_ind+0xd0>)
1000f538:	302e      	adds	r0, #46	; 0x2e
1000f53a:	47b0      	blx	r6
1000f53c:	1c28      	adds	r0, r5, #0
1000f53e:	1c21      	adds	r1, r4, #0
1000f540:	303f      	adds	r0, #63	; 0x3f
1000f542:	3112      	adds	r1, #18
1000f544:	2206      	movs	r2, #6
1000f546:	47b0      	blx	r6
1000f548:	7e23      	ldrb	r3, [r4, #24]
1000f54a:	353e      	adds	r5, #62	; 0x3e
1000f54c:	702b      	strb	r3, [r5, #0]
1000f54e:	e019      	b.n	1000f584 <gapc_bond_ind+0xc8>
1000f550:	480d      	ldr	r0, [pc, #52]	; (1000f588 <gapc_bond_ind+0xcc>)
1000f552:	3102      	adds	r1, #2
1000f554:	2210      	movs	r2, #16
1000f556:	4b0d      	ldr	r3, [pc, #52]	; (1000f58c <gapc_bond_ind+0xd0>)
1000f558:	301e      	adds	r0, #30
1000f55a:	4798      	blx	r3
1000f55c:	e012      	b.n	1000f584 <gapc_bond_ind+0xc8>
1000f55e:	4d0a      	ldr	r5, [pc, #40]	; (1000f588 <gapc_bond_ind+0xcc>)
1000f560:	3102      	adds	r1, #2
1000f562:	2210      	movs	r2, #16
1000f564:	4e09      	ldr	r6, [pc, #36]	; (1000f58c <gapc_bond_ind+0xd0>)
1000f566:	1ca8      	adds	r0, r5, #2
1000f568:	47b0      	blx	r6
1000f56a:	1c28      	adds	r0, r5, #0
1000f56c:	1c21      	adds	r1, r4, #0
1000f56e:	7ce3      	ldrb	r3, [r4, #19]
1000f570:	7ca2      	ldrb	r2, [r4, #18]
1000f572:	021b      	lsls	r3, r3, #8
1000f574:	4313      	orrs	r3, r2
1000f576:	3014      	adds	r0, #20
1000f578:	3114      	adds	r1, #20
1000f57a:	2208      	movs	r2, #8
1000f57c:	826b      	strh	r3, [r5, #18]
1000f57e:	47b0      	blx	r6
1000f580:	7f23      	ldrb	r3, [r4, #28]
1000f582:	772b      	strb	r3, [r5, #28]
1000f584:	2000      	movs	r0, #0
1000f586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f588:	1001c06c 	.word	0x1001c06c
1000f58c:	10017d8f 	.word	0x10017d8f
1000f590:	10017dcb 	.word	0x10017dcb

1000f594 <gapc_bond_req_ind>:
1000f594:	b570      	push	{r4, r5, r6, lr}
1000f596:	780c      	ldrb	r4, [r1, #0]
1000f598:	1c03      	adds	r3, r0, #0
1000f59a:	7849      	ldrb	r1, [r1, #1]
1000f59c:	2c07      	cmp	r4, #7
1000f59e:	d85c      	bhi.n	1000f65a <gapc_bond_req_ind+0xc6>
1000f5a0:	1c20      	adds	r0, r4, #0
1000f5a2:	f005 fa5d 	bl	10014a60 <__gnu_thumb1_case_uqi>
1000f5a6:	5a04      	.short	0x5a04
1000f5a8:	5a0b5a5a 	.word	0x5a0b5a5a
1000f5ac:	1f1f      	.short	0x1f1f
1000f5ae:	200a      	movs	r0, #10
1000f5b0:	2a00      	cmp	r2, #0
1000f5b2:	d053      	beq.n	1000f65c <gapc_bond_req_ind+0xc8>
1000f5b4:	0a1b      	lsrs	r3, r3, #8
1000f5b6:	8013      	strh	r3, [r2, #0]
1000f5b8:	7091      	strb	r1, [r2, #2]
1000f5ba:	e04f      	b.n	1000f65c <gapc_bond_req_ind+0xc8>
1000f5bc:	2a00      	cmp	r2, #0
1000f5be:	d00b      	beq.n	1000f5d8 <gapc_bond_req_ind+0x44>
1000f5c0:	0a1b      	lsrs	r3, r3, #8
1000f5c2:	8013      	strh	r3, [r2, #0]
1000f5c4:	2900      	cmp	r1, #0
1000f5c6:	d102      	bne.n	1000f5ce <gapc_bond_req_ind+0x3a>
1000f5c8:	2301      	movs	r3, #1
1000f5ca:	7093      	strb	r3, [r2, #2]
1000f5cc:	e004      	b.n	1000f5d8 <gapc_bond_req_ind+0x44>
1000f5ce:	2300      	movs	r3, #0
1000f5d0:	7093      	strb	r3, [r2, #2]
1000f5d2:	2902      	cmp	r1, #2
1000f5d4:	d102      	bne.n	1000f5dc <gapc_bond_req_ind+0x48>
1000f5d6:	70d3      	strb	r3, [r2, #3]
1000f5d8:	200c      	movs	r0, #12
1000f5da:	e03f      	b.n	1000f65c <gapc_bond_req_ind+0xc8>
1000f5dc:	2901      	cmp	r1, #1
1000f5de:	d1fb      	bne.n	1000f5d8 <gapc_bond_req_ind+0x44>
1000f5e0:	70d1      	strb	r1, [r2, #3]
1000f5e2:	e7f9      	b.n	1000f5d8 <gapc_bond_req_ind+0x44>
1000f5e4:	2214      	movs	r2, #20
1000f5e6:	481e      	ldr	r0, [pc, #120]	; (1000f660 <gapc_bond_req_ind+0xcc>)
1000f5e8:	0a1b      	lsrs	r3, r3, #8
1000f5ea:	70c3      	strb	r3, [r0, #3]
1000f5ec:	4b1d      	ldr	r3, [pc, #116]	; (1000f664 <gapc_bond_req_ind+0xd0>)
1000f5ee:	7002      	strb	r2, [r0, #0]
1000f5f0:	3a06      	subs	r2, #6
1000f5f2:	7042      	strb	r2, [r0, #1]
1000f5f4:	7082      	strb	r2, [r0, #2]
1000f5f6:	881a      	ldrh	r2, [r3, #0]
1000f5f8:	881b      	ldrh	r3, [r3, #0]
1000f5fa:	4e1b      	ldr	r6, [pc, #108]	; (1000f668 <gapc_bond_req_ind+0xd4>)
1000f5fc:	0a1b      	lsrs	r3, r3, #8
1000f5fe:	7143      	strb	r3, [r0, #5]
1000f600:	2301      	movs	r3, #1
1000f602:	7102      	strb	r2, [r0, #4]
1000f604:	7204      	strb	r4, [r0, #8]
1000f606:	7243      	strb	r3, [r0, #9]
1000f608:	1c05      	adds	r5, r0, #0
1000f60a:	1c31      	adds	r1, r6, #0
1000f60c:	300a      	adds	r0, #10
1000f60e:	2c07      	cmp	r4, #7
1000f610:	d116      	bne.n	1000f640 <gapc_bond_req_ind+0xac>
1000f612:	317e      	adds	r1, #126	; 0x7e
1000f614:	2210      	movs	r2, #16
1000f616:	4c15      	ldr	r4, [pc, #84]	; (1000f66c <gapc_bond_req_ind+0xd8>)
1000f618:	47a0      	blx	r4
1000f61a:	1c33      	adds	r3, r6, #0
1000f61c:	1c31      	adds	r1, r6, #0
1000f61e:	1c28      	adds	r0, r5, #0
1000f620:	338e      	adds	r3, #142	; 0x8e
1000f622:	881b      	ldrh	r3, [r3, #0]
1000f624:	3190      	adds	r1, #144	; 0x90
1000f626:	76ab      	strb	r3, [r5, #26]
1000f628:	2208      	movs	r2, #8
1000f62a:	0a1b      	lsrs	r3, r3, #8
1000f62c:	301c      	adds	r0, #28
1000f62e:	76eb      	strb	r3, [r5, #27]
1000f630:	47a0      	blx	r4
1000f632:	1c31      	adds	r1, r6, #0
1000f634:	3198      	adds	r1, #152	; 0x98
1000f636:	780a      	ldrb	r2, [r1, #0]
1000f638:	1d6b      	adds	r3, r5, #5
1000f63a:	77da      	strb	r2, [r3, #31]
1000f63c:	2125      	movs	r1, #37	; 0x25
1000f63e:	e004      	b.n	1000f64a <gapc_bond_req_ind+0xb6>
1000f640:	319a      	adds	r1, #154	; 0x9a
1000f642:	2210      	movs	r2, #16
1000f644:	4b09      	ldr	r3, [pc, #36]	; (1000f66c <gapc_bond_req_ind+0xd8>)
1000f646:	4798      	blx	r3
1000f648:	211a      	movs	r1, #26
1000f64a:	1c0b      	adds	r3, r1, #0
1000f64c:	2400      	movs	r4, #0
1000f64e:	3b08      	subs	r3, #8
1000f650:	71ab      	strb	r3, [r5, #6]
1000f652:	1c28      	adds	r0, r5, #0
1000f654:	4b06      	ldr	r3, [pc, #24]	; (1000f670 <gapc_bond_req_ind+0xdc>)
1000f656:	71ec      	strb	r4, [r5, #7]
1000f658:	4798      	blx	r3
1000f65a:	2000      	movs	r0, #0
1000f65c:	bd70      	pop	{r4, r5, r6, pc}
1000f65e:	46c0      	nop			; (mov r8, r8)
1000f660:	1001d3f8 	.word	0x1001d3f8
1000f664:	1001d088 	.word	0x1001d088
1000f668:	1001d11a 	.word	0x1001d11a
1000f66c:	10017d8f 	.word	0x10017d8f
1000f670:	1000ef35 	.word	0x1000ef35

1000f674 <gapc_bond_cfm_handler_pair_resp>:
1000f674:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f676:	b085      	sub	sp, #20
1000f678:	1c07      	adds	r7, r0, #0
1000f67a:	a80a      	add	r0, sp, #40	; 0x28
1000f67c:	7806      	ldrb	r6, [r0, #0]
1000f67e:	a80b      	add	r0, sp, #44	; 0x2c
1000f680:	7805      	ldrb	r5, [r0, #0]
1000f682:	a80c      	add	r0, sp, #48	; 0x30
1000f684:	7800      	ldrb	r0, [r0, #0]
1000f686:	2414      	movs	r4, #20
1000f688:	9002      	str	r0, [sp, #8]
1000f68a:	a80d      	add	r0, sp, #52	; 0x34
1000f68c:	7800      	ldrb	r0, [r0, #0]
1000f68e:	9301      	str	r3, [sp, #4]
1000f690:	9003      	str	r0, [sp, #12]
1000f692:	a80e      	add	r0, sp, #56	; 0x38
1000f694:	8800      	ldrh	r0, [r0, #0]
1000f696:	4684      	mov	ip, r0
1000f698:	4812      	ldr	r0, [pc, #72]	; (1000f6e4 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000f69a:	7004      	strb	r4, [r0, #0]
1000f69c:	3c06      	subs	r4, #6
1000f69e:	7044      	strb	r4, [r0, #1]
1000f6a0:	7084      	strb	r4, [r0, #2]
1000f6a2:	4664      	mov	r4, ip
1000f6a4:	70c4      	strb	r4, [r0, #3]
1000f6a6:	4c10      	ldr	r4, [pc, #64]	; (1000f6e8 <gapc_bond_cfm_handler_pair_resp+0x74>)
1000f6a8:	7247      	strb	r7, [r0, #9]
1000f6aa:	8823      	ldrh	r3, [r4, #0]
1000f6ac:	8824      	ldrh	r4, [r4, #0]
1000f6ae:	7103      	strb	r3, [r0, #4]
1000f6b0:	466b      	mov	r3, sp
1000f6b2:	791b      	ldrb	r3, [r3, #4]
1000f6b4:	0a24      	lsrs	r4, r4, #8
1000f6b6:	7303      	strb	r3, [r0, #12]
1000f6b8:	466b      	mov	r3, sp
1000f6ba:	7a1b      	ldrb	r3, [r3, #8]
1000f6bc:	7144      	strb	r4, [r0, #5]
1000f6be:	73c3      	strb	r3, [r0, #15]
1000f6c0:	466b      	mov	r3, sp
1000f6c2:	7b1b      	ldrb	r3, [r3, #12]
1000f6c4:	2401      	movs	r4, #1
1000f6c6:	7403      	strb	r3, [r0, #16]
1000f6c8:	2309      	movs	r3, #9
1000f6ca:	7183      	strb	r3, [r0, #6]
1000f6cc:	2300      	movs	r3, #0
1000f6ce:	7204      	strb	r4, [r0, #8]
1000f6d0:	7281      	strb	r1, [r0, #10]
1000f6d2:	72c2      	strb	r2, [r0, #11]
1000f6d4:	7346      	strb	r6, [r0, #13]
1000f6d6:	7385      	strb	r5, [r0, #14]
1000f6d8:	71c3      	strb	r3, [r0, #7]
1000f6da:	2111      	movs	r1, #17
1000f6dc:	4b03      	ldr	r3, [pc, #12]	; (1000f6ec <gapc_bond_cfm_handler_pair_resp+0x78>)
1000f6de:	4798      	blx	r3
1000f6e0:	b005      	add	sp, #20
1000f6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f6e4:	1001d3f8 	.word	0x1001d3f8
1000f6e8:	1001d088 	.word	0x1001d088
1000f6ec:	1000ef35 	.word	0x1000ef35

1000f6f0 <gapc_bond_cfm_handler_key_exch>:
1000f6f0:	b538      	push	{r3, r4, r5, lr}
1000f6f2:	2514      	movs	r5, #20
1000f6f4:	4c0d      	ldr	r4, [pc, #52]	; (1000f72c <gapc_bond_cfm_handler_key_exch+0x3c>)
1000f6f6:	70e3      	strb	r3, [r4, #3]
1000f6f8:	4b0d      	ldr	r3, [pc, #52]	; (1000f730 <gapc_bond_cfm_handler_key_exch+0x40>)
1000f6fa:	7025      	strb	r5, [r4, #0]
1000f6fc:	3d06      	subs	r5, #6
1000f6fe:	7065      	strb	r5, [r4, #1]
1000f700:	70a5      	strb	r5, [r4, #2]
1000f702:	881d      	ldrh	r5, [r3, #0]
1000f704:	881b      	ldrh	r3, [r3, #0]
1000f706:	7220      	strb	r0, [r4, #8]
1000f708:	0a1b      	lsrs	r3, r3, #8
1000f70a:	7163      	strb	r3, [r4, #5]
1000f70c:	7261      	strb	r1, [r4, #9]
1000f70e:	4b09      	ldr	r3, [pc, #36]	; (1000f734 <gapc_bond_cfm_handler_key_exch+0x44>)
1000f710:	1c11      	adds	r1, r2, #0
1000f712:	4809      	ldr	r0, [pc, #36]	; (1000f738 <gapc_bond_cfm_handler_key_exch+0x48>)
1000f714:	2210      	movs	r2, #16
1000f716:	7125      	strb	r5, [r4, #4]
1000f718:	4798      	blx	r3
1000f71a:	2312      	movs	r3, #18
1000f71c:	71a3      	strb	r3, [r4, #6]
1000f71e:	2300      	movs	r3, #0
1000f720:	1c20      	adds	r0, r4, #0
1000f722:	71e3      	strb	r3, [r4, #7]
1000f724:	211a      	movs	r1, #26
1000f726:	4b05      	ldr	r3, [pc, #20]	; (1000f73c <gapc_bond_cfm_handler_key_exch+0x4c>)
1000f728:	4798      	blx	r3
1000f72a:	bd38      	pop	{r3, r4, r5, pc}
1000f72c:	1001d3f8 	.word	0x1001d3f8
1000f730:	1001d088 	.word	0x1001d088
1000f734:	10017d8f 	.word	0x10017d8f
1000f738:	1001d402 	.word	0x1001d402
1000f73c:	1000ef35 	.word	0x1000ef35

1000f740 <gapc_security_cmd_handler>:
1000f740:	221a      	movs	r2, #26
1000f742:	b508      	push	{r3, lr}
1000f744:	4b0b      	ldr	r3, [pc, #44]	; (1000f774 <gapc_security_cmd_handler+0x34>)
1000f746:	701a      	strb	r2, [r3, #0]
1000f748:	3a0c      	subs	r2, #12
1000f74a:	705a      	strb	r2, [r3, #1]
1000f74c:	709a      	strb	r2, [r3, #2]
1000f74e:	4a0a      	ldr	r2, [pc, #40]	; (1000f778 <gapc_security_cmd_handler+0x38>)
1000f750:	70d8      	strb	r0, [r3, #3]
1000f752:	8810      	ldrh	r0, [r2, #0]
1000f754:	8812      	ldrh	r2, [r2, #0]
1000f756:	7118      	strb	r0, [r3, #4]
1000f758:	0a12      	lsrs	r2, r2, #8
1000f75a:	715a      	strb	r2, [r3, #5]
1000f75c:	220c      	movs	r2, #12
1000f75e:	721a      	strb	r2, [r3, #8]
1000f760:	3a0a      	subs	r2, #10
1000f762:	719a      	strb	r2, [r3, #6]
1000f764:	2200      	movs	r2, #0
1000f766:	7259      	strb	r1, [r3, #9]
1000f768:	71da      	strb	r2, [r3, #7]
1000f76a:	1c18      	adds	r0, r3, #0
1000f76c:	210a      	movs	r1, #10
1000f76e:	4b03      	ldr	r3, [pc, #12]	; (1000f77c <gapc_security_cmd_handler+0x3c>)
1000f770:	4798      	blx	r3
1000f772:	bd08      	pop	{r3, pc}
1000f774:	1001d3f8 	.word	0x1001d3f8
1000f778:	1001d088 	.word	0x1001d088
1000f77c:	1000ef35 	.word	0x1000ef35

1000f780 <gapc_encrypt_cmd_handler>:
1000f780:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f782:	2500      	movs	r5, #0
1000f784:	b089      	sub	sp, #36	; 0x24
1000f786:	9306      	str	r3, [sp, #24]
1000f788:	ab0e      	add	r3, sp, #56	; 0x38
1000f78a:	781b      	ldrb	r3, [r3, #0]
1000f78c:	1c17      	adds	r7, r2, #0
1000f78e:	9307      	str	r3, [sp, #28]
1000f790:	ab0f      	add	r3, sp, #60	; 0x3c
1000f792:	781b      	ldrb	r3, [r3, #0]
1000f794:	4a19      	ldr	r2, [pc, #100]	; (1000f7fc <gapc_encrypt_cmd_handler+0x7c>)
1000f796:	1c06      	adds	r6, r0, #0
1000f798:	9105      	str	r1, [sp, #20]
1000f79a:	9300      	str	r3, [sp, #0]
1000f79c:	9002      	str	r0, [sp, #8]
1000f79e:	1c29      	adds	r1, r5, #0
1000f7a0:	1c2b      	adds	r3, r5, #0
1000f7a2:	9501      	str	r5, [sp, #4]
1000f7a4:	1c10      	adds	r0, r2, #0
1000f7a6:	4c16      	ldr	r4, [pc, #88]	; (1000f800 <gapc_encrypt_cmd_handler+0x80>)
1000f7a8:	47a0      	blx	r4
1000f7aa:	2316      	movs	r3, #22
1000f7ac:	4c15      	ldr	r4, [pc, #84]	; (1000f804 <gapc_encrypt_cmd_handler+0x84>)
1000f7ae:	9905      	ldr	r1, [sp, #20]
1000f7b0:	7023      	strb	r3, [r4, #0]
1000f7b2:	3b08      	subs	r3, #8
1000f7b4:	7063      	strb	r3, [r4, #1]
1000f7b6:	70a3      	strb	r3, [r4, #2]
1000f7b8:	4b13      	ldr	r3, [pc, #76]	; (1000f808 <gapc_encrypt_cmd_handler+0x88>)
1000f7ba:	70e6      	strb	r6, [r4, #3]
1000f7bc:	881a      	ldrh	r2, [r3, #0]
1000f7be:	881b      	ldrh	r3, [r3, #0]
1000f7c0:	7122      	strb	r2, [r4, #4]
1000f7c2:	0a1b      	lsrs	r3, r3, #8
1000f7c4:	7163      	strb	r3, [r4, #5]
1000f7c6:	230b      	movs	r3, #11
1000f7c8:	4e10      	ldr	r6, [pc, #64]	; (1000f80c <gapc_encrypt_cmd_handler+0x8c>)
1000f7ca:	2210      	movs	r2, #16
1000f7cc:	4810      	ldr	r0, [pc, #64]	; (1000f810 <gapc_encrypt_cmd_handler+0x90>)
1000f7ce:	7223      	strb	r3, [r4, #8]
1000f7d0:	7265      	strb	r5, [r4, #9]
1000f7d2:	47b0      	blx	r6
1000f7d4:	0a3b      	lsrs	r3, r7, #8
1000f7d6:	9906      	ldr	r1, [sp, #24]
1000f7d8:	2208      	movs	r2, #8
1000f7da:	480e      	ldr	r0, [pc, #56]	; (1000f814 <gapc_encrypt_cmd_handler+0x94>)
1000f7dc:	76e3      	strb	r3, [r4, #27]
1000f7de:	76a7      	strb	r7, [r4, #26]
1000f7e0:	47b0      	blx	r6
1000f7e2:	466a      	mov	r2, sp
1000f7e4:	7f12      	ldrb	r2, [r2, #28]
1000f7e6:	1d63      	adds	r3, r4, #5
1000f7e8:	77da      	strb	r2, [r3, #31]
1000f7ea:	231d      	movs	r3, #29
1000f7ec:	1c20      	adds	r0, r4, #0
1000f7ee:	71a3      	strb	r3, [r4, #6]
1000f7f0:	2125      	movs	r1, #37	; 0x25
1000f7f2:	4b09      	ldr	r3, [pc, #36]	; (1000f818 <gapc_encrypt_cmd_handler+0x98>)
1000f7f4:	71e5      	strb	r5, [r4, #7]
1000f7f6:	4798      	blx	r3
1000f7f8:	b009      	add	sp, #36	; 0x24
1000f7fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f7fc:	1001c04c 	.word	0x1001c04c
1000f800:	1000f239 	.word	0x1000f239
1000f804:	1001d3f8 	.word	0x1001d3f8
1000f808:	1001d088 	.word	0x1001d088
1000f80c:	10017d8f 	.word	0x10017d8f
1000f810:	1001d402 	.word	0x1001d402
1000f814:	1001d414 	.word	0x1001d414
1000f818:	1000ef35 	.word	0x1000ef35

1000f81c <gapc_encrypt_req_ind>:
1000f81c:	b508      	push	{r3, lr}
1000f81e:	0a00      	lsrs	r0, r0, #8
1000f820:	8010      	strh	r0, [r2, #0]
1000f822:	784b      	ldrb	r3, [r1, #1]
1000f824:	7808      	ldrb	r0, [r1, #0]
1000f826:	021b      	lsls	r3, r3, #8
1000f828:	4303      	orrs	r3, r0
1000f82a:	8053      	strh	r3, [r2, #2]
1000f82c:	1d10      	adds	r0, r2, #4
1000f82e:	3102      	adds	r1, #2
1000f830:	2208      	movs	r2, #8
1000f832:	4b01      	ldr	r3, [pc, #4]	; (1000f838 <gapc_encrypt_req_ind+0x1c>)
1000f834:	4798      	blx	r3
1000f836:	bd08      	pop	{r3, pc}
1000f838:	10017d8f 	.word	0x10017d8f

1000f83c <gapc_encrypt_cfm_handler>:
1000f83c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f83e:	2500      	movs	r5, #0
1000f840:	b087      	sub	sp, #28
1000f842:	9304      	str	r3, [sp, #16]
1000f844:	ab0c      	add	r3, sp, #48	; 0x30
1000f846:	781b      	ldrb	r3, [r3, #0]
1000f848:	1c17      	adds	r7, r2, #0
1000f84a:	4a15      	ldr	r2, [pc, #84]	; (1000f8a0 <gapc_encrypt_cfm_handler+0x64>)
1000f84c:	1c06      	adds	r6, r0, #0
1000f84e:	9305      	str	r3, [sp, #20]
1000f850:	9100      	str	r1, [sp, #0]
1000f852:	9002      	str	r0, [sp, #8]
1000f854:	1c29      	adds	r1, r5, #0
1000f856:	1c2b      	adds	r3, r5, #0
1000f858:	9501      	str	r5, [sp, #4]
1000f85a:	1c10      	adds	r0, r2, #0
1000f85c:	4c11      	ldr	r4, [pc, #68]	; (1000f8a4 <gapc_encrypt_cfm_handler+0x68>)
1000f85e:	47a0      	blx	r4
1000f860:	2318      	movs	r3, #24
1000f862:	4c11      	ldr	r4, [pc, #68]	; (1000f8a8 <gapc_encrypt_cfm_handler+0x6c>)
1000f864:	9904      	ldr	r1, [sp, #16]
1000f866:	7023      	strb	r3, [r4, #0]
1000f868:	3b0a      	subs	r3, #10
1000f86a:	7063      	strb	r3, [r4, #1]
1000f86c:	70a3      	strb	r3, [r4, #2]
1000f86e:	4b0f      	ldr	r3, [pc, #60]	; (1000f8ac <gapc_encrypt_cfm_handler+0x70>)
1000f870:	480f      	ldr	r0, [pc, #60]	; (1000f8b0 <gapc_encrypt_cfm_handler+0x74>)
1000f872:	881a      	ldrh	r2, [r3, #0]
1000f874:	881b      	ldrh	r3, [r3, #0]
1000f876:	7122      	strb	r2, [r4, #4]
1000f878:	0a1b      	lsrs	r3, r3, #8
1000f87a:	7163      	strb	r3, [r4, #5]
1000f87c:	2210      	movs	r2, #16
1000f87e:	4b0d      	ldr	r3, [pc, #52]	; (1000f8b4 <gapc_encrypt_cfm_handler+0x78>)
1000f880:	70e6      	strb	r6, [r4, #3]
1000f882:	7227      	strb	r7, [r4, #8]
1000f884:	4798      	blx	r3
1000f886:	466b      	mov	r3, sp
1000f888:	7d1b      	ldrb	r3, [r3, #20]
1000f88a:	1c20      	adds	r0, r4, #0
1000f88c:	7663      	strb	r3, [r4, #25]
1000f88e:	2312      	movs	r3, #18
1000f890:	211a      	movs	r1, #26
1000f892:	71a3      	strb	r3, [r4, #6]
1000f894:	4b08      	ldr	r3, [pc, #32]	; (1000f8b8 <gapc_encrypt_cfm_handler+0x7c>)
1000f896:	71e5      	strb	r5, [r4, #7]
1000f898:	4798      	blx	r3
1000f89a:	b007      	add	sp, #28
1000f89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f89e:	46c0      	nop			; (mov r8, r8)
1000f8a0:	1001c05c 	.word	0x1001c05c
1000f8a4:	1000f239 	.word	0x1000f239
1000f8a8:	1001d3f8 	.word	0x1001d3f8
1000f8ac:	1001d088 	.word	0x1001d088
1000f8b0:	1001d401 	.word	0x1001d401
1000f8b4:	10017d8f 	.word	0x10017d8f
1000f8b8:	1000ef35 	.word	0x1000ef35

1000f8bc <gapc_encrypt_ind>:
1000f8bc:	780b      	ldrb	r3, [r1, #0]
1000f8be:	0a00      	lsrs	r0, r0, #8
1000f8c0:	70d3      	strb	r3, [r2, #3]
1000f8c2:	2300      	movs	r3, #0
1000f8c4:	8010      	strh	r0, [r2, #0]
1000f8c6:	7093      	strb	r3, [r2, #2]
1000f8c8:	4770      	bx	lr
	...

1000f8cc <gapc_param_update_cfm_handler>:
1000f8cc:	b538      	push	{r3, r4, r5, lr}
1000f8ce:	2410      	movs	r4, #16
1000f8d0:	1c05      	adds	r5, r0, #0
1000f8d2:	480e      	ldr	r0, [pc, #56]	; (1000f90c <gapc_param_update_cfm_handler+0x40>)
1000f8d4:	7004      	strb	r4, [r0, #0]
1000f8d6:	3c02      	subs	r4, #2
1000f8d8:	7044      	strb	r4, [r0, #1]
1000f8da:	7084      	strb	r4, [r0, #2]
1000f8dc:	4c0c      	ldr	r4, [pc, #48]	; (1000f910 <gapc_param_update_cfm_handler+0x44>)
1000f8de:	70c5      	strb	r5, [r0, #3]
1000f8e0:	8825      	ldrh	r5, [r4, #0]
1000f8e2:	8824      	ldrh	r4, [r4, #0]
1000f8e4:	72c3      	strb	r3, [r0, #11]
1000f8e6:	0a1b      	lsrs	r3, r3, #8
1000f8e8:	0a24      	lsrs	r4, r4, #8
1000f8ea:	7303      	strb	r3, [r0, #12]
1000f8ec:	2305      	movs	r3, #5
1000f8ee:	7144      	strb	r4, [r0, #5]
1000f8f0:	2400      	movs	r4, #0
1000f8f2:	7201      	strb	r1, [r0, #8]
1000f8f4:	7242      	strb	r2, [r0, #9]
1000f8f6:	7183      	strb	r3, [r0, #6]
1000f8f8:	0a12      	lsrs	r2, r2, #8
1000f8fa:	210d      	movs	r1, #13
1000f8fc:	4b05      	ldr	r3, [pc, #20]	; (1000f914 <gapc_param_update_cfm_handler+0x48>)
1000f8fe:	7105      	strb	r5, [r0, #4]
1000f900:	7282      	strb	r2, [r0, #10]
1000f902:	71c4      	strb	r4, [r0, #7]
1000f904:	4798      	blx	r3
1000f906:	1c20      	adds	r0, r4, #0
1000f908:	bd38      	pop	{r3, r4, r5, pc}
1000f90a:	46c0      	nop			; (mov r8, r8)
1000f90c:	1001d3f8 	.word	0x1001d3f8
1000f910:	1001d088 	.word	0x1001d088
1000f914:	1000ef35 	.word	0x1000ef35

1000f918 <gapc_param_updated_ind>:
1000f918:	2300      	movs	r3, #0
1000f91a:	0a00      	lsrs	r0, r0, #8
1000f91c:	8010      	strh	r0, [r2, #0]
1000f91e:	7093      	strb	r3, [r2, #2]
1000f920:	784b      	ldrb	r3, [r1, #1]
1000f922:	7808      	ldrb	r0, [r1, #0]
1000f924:	021b      	lsls	r3, r3, #8
1000f926:	4303      	orrs	r3, r0
1000f928:	8093      	strh	r3, [r2, #4]
1000f92a:	78cb      	ldrb	r3, [r1, #3]
1000f92c:	7888      	ldrb	r0, [r1, #2]
1000f92e:	021b      	lsls	r3, r3, #8
1000f930:	4303      	orrs	r3, r0
1000f932:	80d3      	strh	r3, [r2, #6]
1000f934:	794b      	ldrb	r3, [r1, #5]
1000f936:	7909      	ldrb	r1, [r1, #4]
1000f938:	021b      	lsls	r3, r3, #8
1000f93a:	430b      	orrs	r3, r1
1000f93c:	2007      	movs	r0, #7
1000f93e:	8113      	strh	r3, [r2, #8]
1000f940:	4770      	bx	lr

1000f942 <gapc_param_updated_req_ind>:
1000f942:	0a00      	lsrs	r0, r0, #8
1000f944:	8010      	strh	r0, [r2, #0]
1000f946:	784b      	ldrb	r3, [r1, #1]
1000f948:	7808      	ldrb	r0, [r1, #0]
1000f94a:	021b      	lsls	r3, r3, #8
1000f94c:	4303      	orrs	r3, r0
1000f94e:	8053      	strh	r3, [r2, #2]
1000f950:	78cb      	ldrb	r3, [r1, #3]
1000f952:	7888      	ldrb	r0, [r1, #2]
1000f954:	021b      	lsls	r3, r3, #8
1000f956:	4303      	orrs	r3, r0
1000f958:	8093      	strh	r3, [r2, #4]
1000f95a:	794b      	ldrb	r3, [r1, #5]
1000f95c:	7908      	ldrb	r0, [r1, #4]
1000f95e:	021b      	lsls	r3, r3, #8
1000f960:	4303      	orrs	r3, r0
1000f962:	80d3      	strh	r3, [r2, #6]
1000f964:	79cb      	ldrb	r3, [r1, #7]
1000f966:	7989      	ldrb	r1, [r1, #6]
1000f968:	021b      	lsls	r3, r3, #8
1000f96a:	430b      	orrs	r3, r1
1000f96c:	2008      	movs	r0, #8
1000f96e:	8113      	strh	r3, [r2, #8]
1000f970:	4770      	bx	lr
	...

1000f974 <gapc_dev_info_req_ind_handler>:
1000f974:	b508      	push	{r3, lr}
1000f976:	1c0b      	adds	r3, r1, #0
1000f978:	0a01      	lsrs	r1, r0, #8
1000f97a:	8011      	strh	r1, [r2, #0]
1000f97c:	7818      	ldrb	r0, [r3, #0]
1000f97e:	7090      	strb	r0, [r2, #2]
1000f980:	2800      	cmp	r0, #0
1000f982:	d104      	bne.n	1000f98e <gapc_dev_info_req_ind_handler+0x1a>
1000f984:	4b03      	ldr	r3, [pc, #12]	; (1000f994 <gapc_dev_info_req_ind_handler+0x20>)
1000f986:	33aa      	adds	r3, #170	; 0xaa
1000f988:	881b      	ldrh	r3, [r3, #0]
1000f98a:	2b00      	cmp	r3, #0
1000f98c:	d001      	beq.n	1000f992 <gapc_dev_info_req_ind_handler+0x1e>
1000f98e:	4b02      	ldr	r3, [pc, #8]	; (1000f998 <gapc_dev_info_req_ind_handler+0x24>)
1000f990:	4798      	blx	r3
1000f992:	bd08      	pop	{r3, pc}
1000f994:	1001d11a 	.word	0x1001d11a
1000f998:	1000f045 	.word	0x1000f045

1000f99c <gapc_sec_req_ind>:
1000f99c:	0a00      	lsrs	r0, r0, #8
1000f99e:	8010      	strh	r0, [r2, #0]
1000f9a0:	7809      	ldrb	r1, [r1, #0]
1000f9a2:	2301      	movs	r3, #1
1000f9a4:	1c08      	adds	r0, r1, #0
1000f9a6:	0889      	lsrs	r1, r1, #2
1000f9a8:	4018      	ands	r0, r3
1000f9aa:	400b      	ands	r3, r1
1000f9ac:	70d0      	strb	r0, [r2, #3]
1000f9ae:	7113      	strb	r3, [r2, #4]
1000f9b0:	4770      	bx	lr

1000f9b2 <gapc_sign_counter_ind_handler>:
1000f9b2:	0a00      	lsrs	r0, r0, #8
1000f9b4:	8010      	strh	r0, [r2, #0]
1000f9b6:	784b      	ldrb	r3, [r1, #1]
1000f9b8:	0218      	lsls	r0, r3, #8
1000f9ba:	788b      	ldrb	r3, [r1, #2]
1000f9bc:	041b      	lsls	r3, r3, #16
1000f9be:	4303      	orrs	r3, r0
1000f9c0:	7808      	ldrb	r0, [r1, #0]
1000f9c2:	4303      	orrs	r3, r0
1000f9c4:	78c8      	ldrb	r0, [r1, #3]
1000f9c6:	0600      	lsls	r0, r0, #24
1000f9c8:	4303      	orrs	r3, r0
1000f9ca:	6053      	str	r3, [r2, #4]
1000f9cc:	794b      	ldrb	r3, [r1, #5]
1000f9ce:	0218      	lsls	r0, r3, #8
1000f9d0:	798b      	ldrb	r3, [r1, #6]
1000f9d2:	041b      	lsls	r3, r3, #16
1000f9d4:	4303      	orrs	r3, r0
1000f9d6:	7908      	ldrb	r0, [r1, #4]
1000f9d8:	79c9      	ldrb	r1, [r1, #7]
1000f9da:	4303      	orrs	r3, r0
1000f9dc:	0609      	lsls	r1, r1, #24
1000f9de:	430b      	orrs	r3, r1
1000f9e0:	2000      	movs	r0, #0
1000f9e2:	6093      	str	r3, [r2, #8]
1000f9e4:	4770      	bx	lr
	...

1000f9e8 <gapc_peer_att_info_ind_handler>:
1000f9e8:	b510      	push	{r4, lr}
1000f9ea:	0a00      	lsrs	r0, r0, #8
1000f9ec:	8010      	strh	r0, [r2, #0]
1000f9ee:	7808      	ldrb	r0, [r1, #0]
1000f9f0:	7090      	strb	r0, [r2, #2]
1000f9f2:	788b      	ldrb	r3, [r1, #2]
1000f9f4:	784c      	ldrb	r4, [r1, #1]
1000f9f6:	021b      	lsls	r3, r3, #8
1000f9f8:	4323      	orrs	r3, r4
1000f9fa:	8093      	strh	r3, [r2, #4]
1000f9fc:	2801      	cmp	r0, #1
1000f9fe:	d027      	beq.n	1000fa50 <gapc_peer_att_info_ind_handler+0x68>
1000fa00:	2800      	cmp	r0, #0
1000fa02:	d017      	beq.n	1000fa34 <gapc_peer_att_info_ind_handler+0x4c>
1000fa04:	2802      	cmp	r0, #2
1000fa06:	d12a      	bne.n	1000fa5e <gapc_peer_att_info_ind_handler+0x76>
1000fa08:	790b      	ldrb	r3, [r1, #4]
1000fa0a:	78c8      	ldrb	r0, [r1, #3]
1000fa0c:	021b      	lsls	r3, r3, #8
1000fa0e:	4303      	orrs	r3, r0
1000fa10:	8113      	strh	r3, [r2, #8]
1000fa12:	798b      	ldrb	r3, [r1, #6]
1000fa14:	7948      	ldrb	r0, [r1, #5]
1000fa16:	021b      	lsls	r3, r3, #8
1000fa18:	4303      	orrs	r3, r0
1000fa1a:	80d3      	strh	r3, [r2, #6]
1000fa1c:	7a0b      	ldrb	r3, [r1, #8]
1000fa1e:	79c8      	ldrb	r0, [r1, #7]
1000fa20:	021b      	lsls	r3, r3, #8
1000fa22:	4303      	orrs	r3, r0
1000fa24:	8193      	strh	r3, [r2, #12]
1000fa26:	7a8b      	ldrb	r3, [r1, #10]
1000fa28:	7a49      	ldrb	r1, [r1, #9]
1000fa2a:	021b      	lsls	r3, r3, #8
1000fa2c:	430b      	orrs	r3, r1
1000fa2e:	8153      	strh	r3, [r2, #10]
1000fa30:	2306      	movs	r3, #6
1000fa32:	e013      	b.n	1000fa5c <gapc_peer_att_info_ind_handler+0x74>
1000fa34:	1c14      	adds	r4, r2, #0
1000fa36:	1c20      	adds	r0, r4, #0
1000fa38:	790a      	ldrb	r2, [r1, #4]
1000fa3a:	78cb      	ldrb	r3, [r1, #3]
1000fa3c:	0212      	lsls	r2, r2, #8
1000fa3e:	431a      	orrs	r2, r3
1000fa40:	80e2      	strh	r2, [r4, #6]
1000fa42:	4b07      	ldr	r3, [pc, #28]	; (1000fa60 <gapc_peer_att_info_ind_handler+0x78>)
1000fa44:	3008      	adds	r0, #8
1000fa46:	3105      	adds	r1, #5
1000fa48:	4798      	blx	r3
1000fa4a:	2302      	movs	r3, #2
1000fa4c:	70a3      	strb	r3, [r4, #2]
1000fa4e:	e006      	b.n	1000fa5e <gapc_peer_att_info_ind_handler+0x76>
1000fa50:	790b      	ldrb	r3, [r1, #4]
1000fa52:	78c9      	ldrb	r1, [r1, #3]
1000fa54:	021b      	lsls	r3, r3, #8
1000fa56:	430b      	orrs	r3, r1
1000fa58:	80d3      	strh	r3, [r2, #6]
1000fa5a:	2305      	movs	r3, #5
1000fa5c:	7093      	strb	r3, [r2, #2]
1000fa5e:	bd10      	pop	{r4, pc}
1000fa60:	10017d8f 	.word	0x10017d8f

1000fa64 <gapc_con_channel_map_ind_handler>:
1000fa64:	b508      	push	{r3, lr}
1000fa66:	2300      	movs	r3, #0
1000fa68:	0a00      	lsrs	r0, r0, #8
1000fa6a:	7013      	strb	r3, [r2, #0]
1000fa6c:	8050      	strh	r0, [r2, #2]
1000fa6e:	4b02      	ldr	r3, [pc, #8]	; (1000fa78 <gapc_con_channel_map_ind_handler+0x14>)
1000fa70:	1d10      	adds	r0, r2, #4
1000fa72:	2205      	movs	r2, #5
1000fa74:	4798      	blx	r3
1000fa76:	bd08      	pop	{r3, pc}
1000fa78:	10017d8f 	.word	0x10017d8f

1000fa7c <gapc_lecb_connected>:
1000fa7c:	7843      	ldrb	r3, [r0, #1]
1000fa7e:	7802      	ldrb	r2, [r0, #0]
1000fa80:	021b      	lsls	r3, r3, #8
1000fa82:	4313      	orrs	r3, r2
1000fa84:	800b      	strh	r3, [r1, #0]
1000fa86:	78c3      	ldrb	r3, [r0, #3]
1000fa88:	7882      	ldrb	r2, [r0, #2]
1000fa8a:	021b      	lsls	r3, r3, #8
1000fa8c:	4313      	orrs	r3, r2
1000fa8e:	804b      	strh	r3, [r1, #2]
1000fa90:	7943      	ldrb	r3, [r0, #5]
1000fa92:	7902      	ldrb	r2, [r0, #4]
1000fa94:	021b      	lsls	r3, r3, #8
1000fa96:	4313      	orrs	r3, r2
1000fa98:	808b      	strh	r3, [r1, #4]
1000fa9a:	79c3      	ldrb	r3, [r0, #7]
1000fa9c:	7982      	ldrb	r2, [r0, #6]
1000fa9e:	021b      	lsls	r3, r3, #8
1000faa0:	4313      	orrs	r3, r2
1000faa2:	80cb      	strh	r3, [r1, #6]
1000faa4:	2300      	movs	r3, #0
1000faa6:	720b      	strb	r3, [r1, #8]
1000faa8:	4770      	bx	lr

1000faaa <gapc_lecb_disconnected>:
1000faaa:	7843      	ldrb	r3, [r0, #1]
1000faac:	7802      	ldrb	r2, [r0, #0]
1000faae:	021b      	lsls	r3, r3, #8
1000fab0:	4313      	orrs	r3, r2
1000fab2:	800b      	strh	r3, [r1, #0]
1000fab4:	78c3      	ldrb	r3, [r0, #3]
1000fab6:	7882      	ldrb	r2, [r0, #2]
1000fab8:	021b      	lsls	r3, r3, #8
1000faba:	4313      	orrs	r3, r2
1000fabc:	804b      	strh	r3, [r1, #2]
1000fabe:	4770      	bx	lr

1000fac0 <gapc_lecb_connect_req_ind>:
1000fac0:	7843      	ldrb	r3, [r0, #1]
1000fac2:	7802      	ldrb	r2, [r0, #0]
1000fac4:	021b      	lsls	r3, r3, #8
1000fac6:	4313      	orrs	r3, r2
1000fac8:	800b      	strh	r3, [r1, #0]
1000faca:	78c3      	ldrb	r3, [r0, #3]
1000facc:	7882      	ldrb	r2, [r0, #2]
1000face:	021b      	lsls	r3, r3, #8
1000fad0:	4313      	orrs	r3, r2
1000fad2:	804b      	strh	r3, [r1, #2]
1000fad4:	7943      	ldrb	r3, [r0, #5]
1000fad6:	7902      	ldrb	r2, [r0, #4]
1000fad8:	021b      	lsls	r3, r3, #8
1000fada:	4313      	orrs	r3, r2
1000fadc:	808b      	strh	r3, [r1, #4]
1000fade:	79c3      	ldrb	r3, [r0, #7]
1000fae0:	7982      	ldrb	r2, [r0, #6]
1000fae2:	021b      	lsls	r3, r3, #8
1000fae4:	4313      	orrs	r3, r2
1000fae6:	80cb      	strh	r3, [r1, #6]
1000fae8:	4770      	bx	lr

1000faea <gapc_lecb_add_credit_resp_handler>:
1000faea:	7843      	ldrb	r3, [r0, #1]
1000faec:	7802      	ldrb	r2, [r0, #0]
1000faee:	021b      	lsls	r3, r3, #8
1000faf0:	4313      	orrs	r3, r2
1000faf2:	800b      	strh	r3, [r1, #0]
1000faf4:	78c3      	ldrb	r3, [r0, #3]
1000faf6:	7882      	ldrb	r2, [r0, #2]
1000faf8:	021b      	lsls	r3, r3, #8
1000fafa:	4313      	orrs	r3, r2
1000fafc:	804b      	strh	r3, [r1, #2]
1000fafe:	7943      	ldrb	r3, [r0, #5]
1000fb00:	7902      	ldrb	r2, [r0, #4]
1000fb02:	021b      	lsls	r3, r3, #8
1000fb04:	4313      	orrs	r3, r2
1000fb06:	808b      	strh	r3, [r1, #4]
1000fb08:	4770      	bx	lr
	...

1000fb0c <gapm_reset_req_handler>:
1000fb0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000fb0e:	466b      	mov	r3, sp
1000fb10:	4915      	ldr	r1, [pc, #84]	; (1000fb68 <gapm_reset_req_handler+0x5c>)
1000fb12:	4816      	ldr	r0, [pc, #88]	; (1000fb6c <gapm_reset_req_handler+0x60>)
1000fb14:	880c      	ldrh	r4, [r1, #0]
1000fb16:	8809      	ldrh	r1, [r1, #0]
1000fb18:	1ddd      	adds	r5, r3, #7
1000fb1a:	0a09      	lsrs	r1, r1, #8
1000fb1c:	2300      	movs	r3, #0
1000fb1e:	2202      	movs	r2, #2
1000fb20:	7141      	strb	r1, [r0, #5]
1000fb22:	26d0      	movs	r6, #208	; 0xd0
1000fb24:	2101      	movs	r1, #1
1000fb26:	7104      	strb	r4, [r0, #4]
1000fb28:	4c11      	ldr	r4, [pc, #68]	; (1000fb70 <gapm_reset_req_handler+0x64>)
1000fb2a:	702b      	strb	r3, [r5, #0]
1000fb2c:	7002      	strb	r2, [r0, #0]
1000fb2e:	70c3      	strb	r3, [r0, #3]
1000fb30:	320b      	adds	r2, #11
1000fb32:	7201      	strb	r1, [r0, #8]
1000fb34:	7181      	strb	r1, [r0, #6]
1000fb36:	71c3      	strb	r3, [r0, #7]
1000fb38:	3108      	adds	r1, #8
1000fb3a:	4b0e      	ldr	r3, [pc, #56]	; (1000fb74 <gapm_reset_req_handler+0x68>)
1000fb3c:	0136      	lsls	r6, r6, #4
1000fb3e:	7042      	strb	r2, [r0, #1]
1000fb40:	7082      	strb	r2, [r0, #2]
1000fb42:	80a2      	strh	r2, [r4, #4]
1000fb44:	8026      	strh	r6, [r4, #0]
1000fb46:	4798      	blx	r3
1000fb48:	1c28      	adds	r0, r5, #0
1000fb4a:	4b0b      	ldr	r3, [pc, #44]	; (1000fb78 <gapm_reset_req_handler+0x6c>)
1000fb4c:	4798      	blx	r3
1000fb4e:	782b      	ldrb	r3, [r5, #0]
1000fb50:	20e2      	movs	r0, #226	; 0xe2
1000fb52:	2b00      	cmp	r3, #0
1000fb54:	d106      	bne.n	1000fb64 <gapm_reset_req_handler+0x58>
1000fb56:	68a3      	ldr	r3, [r4, #8]
1000fb58:	20e2      	movs	r0, #226	; 0xe2
1000fb5a:	781a      	ldrb	r2, [r3, #0]
1000fb5c:	785b      	ldrb	r3, [r3, #1]
1000fb5e:	2a01      	cmp	r2, #1
1000fb60:	d100      	bne.n	1000fb64 <gapm_reset_req_handler+0x58>
1000fb62:	1c18      	adds	r0, r3, #0
1000fb64:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000fb66:	46c0      	nop			; (mov r8, r8)
1000fb68:	1001d088 	.word	0x1001d088
1000fb6c:	1001d3f8 	.word	0x1001d3f8
1000fb70:	1001d07c 	.word	0x1001d07c
1000fb74:	1000ef35 	.word	0x1000ef35
1000fb78:	1000ef99 	.word	0x1000ef99

1000fb7c <gapm_set_dev_config_cmd_handler>:
1000fb7c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fb7e:	b089      	sub	sp, #36	; 0x24
1000fb80:	9303      	str	r3, [sp, #12]
1000fb82:	ab0e      	add	r3, sp, #56	; 0x38
1000fb84:	781b      	ldrb	r3, [r3, #0]
1000fb86:	4c37      	ldr	r4, [pc, #220]	; (1000fc64 <gapm_set_dev_config_cmd_handler+0xe8>)
1000fb88:	9304      	str	r3, [sp, #16]
1000fb8a:	ab0f      	add	r3, sp, #60	; 0x3c
1000fb8c:	781b      	ldrb	r3, [r3, #0]
1000fb8e:	270d      	movs	r7, #13
1000fb90:	9305      	str	r3, [sp, #20]
1000fb92:	ab10      	add	r3, sp, #64	; 0x40
1000fb94:	881b      	ldrh	r3, [r3, #0]
1000fb96:	72a1      	strb	r1, [r4, #10]
1000fb98:	9300      	str	r3, [sp, #0]
1000fb9a:	ab11      	add	r3, sp, #68	; 0x44
1000fb9c:	881b      	ldrh	r3, [r3, #0]
1000fb9e:	0a09      	lsrs	r1, r1, #8
1000fba0:	9301      	str	r3, [sp, #4]
1000fba2:	ab12      	add	r3, sp, #72	; 0x48
1000fba4:	881b      	ldrh	r3, [r3, #0]
1000fba6:	7260      	strb	r0, [r4, #9]
1000fba8:	9302      	str	r3, [sp, #8]
1000fbaa:	ab06      	add	r3, sp, #24
1000fbac:	1dde      	adds	r6, r3, #7
1000fbae:	2300      	movs	r3, #0
1000fbb0:	7033      	strb	r3, [r6, #0]
1000fbb2:	2304      	movs	r3, #4
1000fbb4:	7023      	strb	r3, [r4, #0]
1000fbb6:	2300      	movs	r3, #0
1000fbb8:	70e3      	strb	r3, [r4, #3]
1000fbba:	4b2b      	ldr	r3, [pc, #172]	; (1000fc68 <gapm_set_dev_config_cmd_handler+0xec>)
1000fbbc:	72e1      	strb	r1, [r4, #11]
1000fbbe:	881d      	ldrh	r5, [r3, #0]
1000fbc0:	881b      	ldrh	r3, [r3, #0]
1000fbc2:	1c11      	adds	r1, r2, #0
1000fbc4:	0a1b      	lsrs	r3, r3, #8
1000fbc6:	7163      	strb	r3, [r4, #5]
1000fbc8:	2303      	movs	r3, #3
1000fbca:	7125      	strb	r5, [r4, #4]
1000fbcc:	2206      	movs	r2, #6
1000fbce:	4d27      	ldr	r5, [pc, #156]	; (1000fc6c <gapm_set_dev_config_cmd_handler+0xf0>)
1000fbd0:	4827      	ldr	r0, [pc, #156]	; (1000fc70 <gapm_set_dev_config_cmd_handler+0xf4>)
1000fbd2:	7223      	strb	r3, [r4, #8]
1000fbd4:	7067      	strb	r7, [r4, #1]
1000fbd6:	70a7      	strb	r7, [r4, #2]
1000fbd8:	47a8      	blx	r5
1000fbda:	9903      	ldr	r1, [sp, #12]
1000fbdc:	2210      	movs	r2, #16
1000fbde:	4825      	ldr	r0, [pc, #148]	; (1000fc74 <gapm_set_dev_config_cmd_handler+0xf8>)
1000fbe0:	47a8      	blx	r5
1000fbe2:	466a      	mov	r2, sp
1000fbe4:	7c12      	ldrb	r2, [r2, #16]
1000fbe6:	1ce3      	adds	r3, r4, #3
1000fbe8:	77da      	strb	r2, [r3, #31]
1000fbea:	466a      	mov	r2, sp
1000fbec:	7d12      	ldrb	r2, [r2, #20]
1000fbee:	1d23      	adds	r3, r4, #4
1000fbf0:	77da      	strb	r2, [r3, #31]
1000fbf2:	466a      	mov	r2, sp
1000fbf4:	7812      	ldrb	r2, [r2, #0]
1000fbf6:	1d63      	adds	r3, r4, #5
1000fbf8:	77da      	strb	r2, [r3, #31]
1000fbfa:	9b00      	ldr	r3, [sp, #0]
1000fbfc:	1da2      	adds	r2, r4, #6
1000fbfe:	0a1b      	lsrs	r3, r3, #8
1000fc00:	77d3      	strb	r3, [r2, #31]
1000fc02:	466a      	mov	r2, sp
1000fc04:	7912      	ldrb	r2, [r2, #4]
1000fc06:	1de3      	adds	r3, r4, #7
1000fc08:	77da      	strb	r2, [r3, #31]
1000fc0a:	1c22      	adds	r2, r4, #0
1000fc0c:	9b01      	ldr	r3, [sp, #4]
1000fc0e:	3208      	adds	r2, #8
1000fc10:	0a1b      	lsrs	r3, r3, #8
1000fc12:	77d3      	strb	r3, [r2, #31]
1000fc14:	466a      	mov	r2, sp
1000fc16:	1c23      	adds	r3, r4, #0
1000fc18:	7a12      	ldrb	r2, [r2, #8]
1000fc1a:	3328      	adds	r3, #40	; 0x28
1000fc1c:	701a      	strb	r2, [r3, #0]
1000fc1e:	1c22      	adds	r2, r4, #0
1000fc20:	9b02      	ldr	r3, [sp, #8]
1000fc22:	3229      	adds	r2, #41	; 0x29
1000fc24:	0a1b      	lsrs	r3, r3, #8
1000fc26:	7013      	strb	r3, [r2, #0]
1000fc28:	23d0      	movs	r3, #208	; 0xd0
1000fc2a:	4d13      	ldr	r5, [pc, #76]	; (1000fc78 <gapm_set_dev_config_cmd_handler+0xfc>)
1000fc2c:	011b      	lsls	r3, r3, #4
1000fc2e:	802b      	strh	r3, [r5, #0]
1000fc30:	2322      	movs	r3, #34	; 0x22
1000fc32:	71a3      	strb	r3, [r4, #6]
1000fc34:	2300      	movs	r3, #0
1000fc36:	212a      	movs	r1, #42	; 0x2a
1000fc38:	71e3      	strb	r3, [r4, #7]
1000fc3a:	1c20      	adds	r0, r4, #0
1000fc3c:	4b0f      	ldr	r3, [pc, #60]	; (1000fc7c <gapm_set_dev_config_cmd_handler+0x100>)
1000fc3e:	80af      	strh	r7, [r5, #4]
1000fc40:	4798      	blx	r3
1000fc42:	1c30      	adds	r0, r6, #0
1000fc44:	4b0e      	ldr	r3, [pc, #56]	; (1000fc80 <gapm_set_dev_config_cmd_handler+0x104>)
1000fc46:	4798      	blx	r3
1000fc48:	7833      	ldrb	r3, [r6, #0]
1000fc4a:	20e2      	movs	r0, #226	; 0xe2
1000fc4c:	2b00      	cmp	r3, #0
1000fc4e:	d106      	bne.n	1000fc5e <gapm_set_dev_config_cmd_handler+0xe2>
1000fc50:	68ab      	ldr	r3, [r5, #8]
1000fc52:	20e2      	movs	r0, #226	; 0xe2
1000fc54:	781a      	ldrb	r2, [r3, #0]
1000fc56:	785b      	ldrb	r3, [r3, #1]
1000fc58:	2a03      	cmp	r2, #3
1000fc5a:	d100      	bne.n	1000fc5e <gapm_set_dev_config_cmd_handler+0xe2>
1000fc5c:	1c18      	adds	r0, r3, #0
1000fc5e:	b009      	add	sp, #36	; 0x24
1000fc60:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fc62:	46c0      	nop			; (mov r8, r8)
1000fc64:	1001d3f8 	.word	0x1001d3f8
1000fc68:	1001d088 	.word	0x1001d088
1000fc6c:	10017d8f 	.word	0x10017d8f
1000fc70:	1001d404 	.word	0x1001d404
1000fc74:	1001d40a 	.word	0x1001d40a
1000fc78:	1001d07c 	.word	0x1001d07c
1000fc7c:	1000ef35 	.word	0x1000ef35
1000fc80:	1000ef99 	.word	0x1000ef99

1000fc84 <gapm_get_dev_config_cmd_handler>:
1000fc84:	4684      	mov	ip, r0
1000fc86:	4663      	mov	r3, ip
1000fc88:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fc8a:	b085      	sub	sp, #20
1000fc8c:	9100      	str	r1, [sp, #0]
1000fc8e:	20cf      	movs	r0, #207	; 0xcf
1000fc90:	2b01      	cmp	r3, #1
1000fc92:	d854      	bhi.n	1000fd3e <gapm_get_dev_config_cmd_handler+0xba>
1000fc94:	2900      	cmp	r1, #0
1000fc96:	d052      	beq.n	1000fd3e <gapm_get_dev_config_cmd_handler+0xba>
1000fc98:	2200      	movs	r2, #0
1000fc9a:	492a      	ldr	r1, [pc, #168]	; (1000fd44 <gapm_get_dev_config_cmd_handler+0xc0>)
1000fc9c:	ab02      	add	r3, sp, #8
1000fc9e:	880c      	ldrh	r4, [r1, #0]
1000fca0:	8809      	ldrh	r1, [r1, #0]
1000fca2:	1d9f      	adds	r7, r3, #6
1000fca4:	719a      	strb	r2, [r3, #6]
1000fca6:	4b28      	ldr	r3, [pc, #160]	; (1000fd48 <gapm_get_dev_config_cmd_handler+0xc4>)
1000fca8:	0a09      	lsrs	r1, r1, #8
1000fcaa:	250d      	movs	r5, #13
1000fcac:	2606      	movs	r6, #6
1000fcae:	7159      	strb	r1, [r3, #5]
1000fcb0:	4661      	mov	r1, ip
1000fcb2:	701e      	strb	r6, [r3, #0]
1000fcb4:	705d      	strb	r5, [r3, #1]
1000fcb6:	709d      	strb	r5, [r3, #2]
1000fcb8:	70da      	strb	r2, [r3, #3]
1000fcba:	711c      	strb	r4, [r3, #4]
1000fcbc:	2901      	cmp	r1, #1
1000fcbe:	d13e      	bne.n	1000fd3e <gapm_get_dev_config_cmd_handler+0xba>
1000fcc0:	21d0      	movs	r1, #208	; 0xd0
1000fcc2:	4c22      	ldr	r4, [pc, #136]	; (1000fd4c <gapm_get_dev_config_cmd_handler+0xc8>)
1000fcc4:	0109      	lsls	r1, r1, #4
1000fcc6:	8061      	strh	r1, [r4, #2]
1000fcc8:	4921      	ldr	r1, [pc, #132]	; (1000fd50 <gapm_get_dev_config_cmd_handler+0xcc>)
1000fcca:	71da      	strb	r2, [r3, #7]
1000fccc:	8021      	strh	r1, [r4, #0]
1000fcce:	4661      	mov	r1, ip
1000fcd0:	721e      	strb	r6, [r3, #8]
1000fcd2:	7199      	strb	r1, [r3, #6]
1000fcd4:	1c18      	adds	r0, r3, #0
1000fcd6:	2109      	movs	r1, #9
1000fcd8:	4b1e      	ldr	r3, [pc, #120]	; (1000fd54 <gapm_get_dev_config_cmd_handler+0xd0>)
1000fcda:	80a5      	strh	r5, [r4, #4]
1000fcdc:	4798      	blx	r3
1000fcde:	1c38      	adds	r0, r7, #0
1000fce0:	4b1d      	ldr	r3, [pc, #116]	; (1000fd58 <gapm_get_dev_config_cmd_handler+0xd4>)
1000fce2:	4798      	blx	r3
1000fce4:	783b      	ldrb	r3, [r7, #0]
1000fce6:	20e2      	movs	r0, #226	; 0xe2
1000fce8:	9301      	str	r3, [sp, #4]
1000fcea:	2b00      	cmp	r3, #0
1000fcec:	d127      	bne.n	1000fd3e <gapm_get_dev_config_cmd_handler+0xba>
1000fcee:	8821      	ldrh	r1, [r4, #0]
1000fcf0:	4a1a      	ldr	r2, [pc, #104]	; (1000fd5c <gapm_get_dev_config_cmd_handler+0xd8>)
1000fcf2:	68a7      	ldr	r7, [r4, #8]
1000fcf4:	3b01      	subs	r3, #1
1000fcf6:	4291      	cmp	r1, r2
1000fcf8:	d001      	beq.n	1000fcfe <gapm_get_dev_config_cmd_handler+0x7a>
1000fcfa:	8023      	strh	r3, [r4, #0]
1000fcfc:	e01a      	b.n	1000fd34 <gapm_get_dev_config_cmd_handler+0xb0>
1000fcfe:	8063      	strh	r3, [r4, #2]
1000fd00:	9b00      	ldr	r3, [sp, #0]
1000fd02:	1c39      	adds	r1, r7, #0
1000fd04:	1c58      	adds	r0, r3, #1
1000fd06:	1c32      	adds	r2, r6, #0
1000fd08:	4b15      	ldr	r3, [pc, #84]	; (1000fd60 <gapm_get_dev_config_cmd_handler+0xdc>)
1000fd0a:	4798      	blx	r3
1000fd0c:	79bb      	ldrb	r3, [r7, #6]
1000fd0e:	9a00      	ldr	r2, [sp, #0]
1000fd10:	7013      	strb	r3, [r2, #0]
1000fd12:	23d0      	movs	r3, #208	; 0xd0
1000fd14:	011b      	lsls	r3, r3, #4
1000fd16:	8023      	strh	r3, [r4, #0]
1000fd18:	ab02      	add	r3, sp, #8
1000fd1a:	80a5      	strh	r5, [r4, #4]
1000fd1c:	1ddd      	adds	r5, r3, #7
1000fd1e:	466b      	mov	r3, sp
1000fd20:	791b      	ldrb	r3, [r3, #4]
1000fd22:	1c28      	adds	r0, r5, #0
1000fd24:	702b      	strb	r3, [r5, #0]
1000fd26:	4b0c      	ldr	r3, [pc, #48]	; (1000fd58 <gapm_get_dev_config_cmd_handler+0xd4>)
1000fd28:	4798      	blx	r3
1000fd2a:	782b      	ldrb	r3, [r5, #0]
1000fd2c:	20d0      	movs	r0, #208	; 0xd0
1000fd2e:	2b00      	cmp	r3, #0
1000fd30:	d105      	bne.n	1000fd3e <gapm_get_dev_config_cmd_handler+0xba>
1000fd32:	68a7      	ldr	r7, [r4, #8]
1000fd34:	783b      	ldrb	r3, [r7, #0]
1000fd36:	7878      	ldrb	r0, [r7, #1]
1000fd38:	2b06      	cmp	r3, #6
1000fd3a:	d000      	beq.n	1000fd3e <gapm_get_dev_config_cmd_handler+0xba>
1000fd3c:	20e2      	movs	r0, #226	; 0xe2
1000fd3e:	b005      	add	sp, #20
1000fd40:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fd42:	46c0      	nop			; (mov r8, r8)
1000fd44:	1001d088 	.word	0x1001d088
1000fd48:	1001d3f8 	.word	0x1001d3f8
1000fd4c:	1001d07c 	.word	0x1001d07c
1000fd50:	00000d08 	.word	0x00000d08
1000fd54:	1000ef35 	.word	0x1000ef35
1000fd58:	1000ef99 	.word	0x1000ef99
1000fd5c:	0000ffff 	.word	0x0000ffff
1000fd60:	10017d8f 	.word	0x10017d8f

1000fd64 <gapm_cancel_cmd_handler>:
1000fd64:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000fd66:	4916      	ldr	r1, [pc, #88]	; (1000fdc0 <gapm_cancel_cmd_handler+0x5c>)
1000fd68:	4816      	ldr	r0, [pc, #88]	; (1000fdc4 <gapm_cancel_cmd_handler+0x60>)
1000fd6a:	880c      	ldrh	r4, [r1, #0]
1000fd6c:	8809      	ldrh	r1, [r1, #0]
1000fd6e:	466b      	mov	r3, sp
1000fd70:	0a09      	lsrs	r1, r1, #8
1000fd72:	7141      	strb	r1, [r0, #5]
1000fd74:	2102      	movs	r1, #2
1000fd76:	2203      	movs	r2, #3
1000fd78:	7201      	strb	r1, [r0, #8]
1000fd7a:	21d0      	movs	r1, #208	; 0xd0
1000fd7c:	1ddd      	adds	r5, r3, #7
1000fd7e:	2300      	movs	r3, #0
1000fd80:	7104      	strb	r4, [r0, #4]
1000fd82:	4c11      	ldr	r4, [pc, #68]	; (1000fdc8 <gapm_cancel_cmd_handler+0x64>)
1000fd84:	7002      	strb	r2, [r0, #0]
1000fd86:	0109      	lsls	r1, r1, #4
1000fd88:	320a      	adds	r2, #10
1000fd8a:	702b      	strb	r3, [r5, #0]
1000fd8c:	7042      	strb	r2, [r0, #1]
1000fd8e:	7082      	strb	r2, [r0, #2]
1000fd90:	70c3      	strb	r3, [r0, #3]
1000fd92:	8021      	strh	r1, [r4, #0]
1000fd94:	80a2      	strh	r2, [r4, #4]
1000fd96:	71c3      	strb	r3, [r0, #7]
1000fd98:	3a0c      	subs	r2, #12
1000fd9a:	2109      	movs	r1, #9
1000fd9c:	4b0b      	ldr	r3, [pc, #44]	; (1000fdcc <gapm_cancel_cmd_handler+0x68>)
1000fd9e:	7182      	strb	r2, [r0, #6]
1000fda0:	4798      	blx	r3
1000fda2:	1c28      	adds	r0, r5, #0
1000fda4:	4b0a      	ldr	r3, [pc, #40]	; (1000fdd0 <gapm_cancel_cmd_handler+0x6c>)
1000fda6:	4798      	blx	r3
1000fda8:	7828      	ldrb	r0, [r5, #0]
1000fdaa:	2800      	cmp	r0, #0
1000fdac:	d001      	beq.n	1000fdb2 <gapm_cancel_cmd_handler+0x4e>
1000fdae:	20e2      	movs	r0, #226	; 0xe2
1000fdb0:	e004      	b.n	1000fdbc <gapm_cancel_cmd_handler+0x58>
1000fdb2:	68a3      	ldr	r3, [r4, #8]
1000fdb4:	785b      	ldrb	r3, [r3, #1]
1000fdb6:	2b44      	cmp	r3, #68	; 0x44
1000fdb8:	d000      	beq.n	1000fdbc <gapm_cancel_cmd_handler+0x58>
1000fdba:	1c18      	adds	r0, r3, #0
1000fdbc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000fdbe:	46c0      	nop			; (mov r8, r8)
1000fdc0:	1001d088 	.word	0x1001d088
1000fdc4:	1001d3f8 	.word	0x1001d3f8
1000fdc8:	1001d07c 	.word	0x1001d07c
1000fdcc:	1000ef35 	.word	0x1000ef35
1000fdd0:	1000ef99 	.word	0x1000ef99

1000fdd4 <gapm_dev_bdaddr_ind_handler>:
1000fdd4:	b538      	push	{r3, r4, r5, lr}
1000fdd6:	1c05      	adds	r5, r0, #0
1000fdd8:	1c0c      	adds	r4, r1, #0
1000fdda:	1c48      	adds	r0, r1, #1
1000fddc:	2206      	movs	r2, #6
1000fdde:	1c29      	adds	r1, r5, #0
1000fde0:	4b02      	ldr	r3, [pc, #8]	; (1000fdec <gapm_dev_bdaddr_ind_handler+0x18>)
1000fde2:	4798      	blx	r3
1000fde4:	79ab      	ldrb	r3, [r5, #6]
1000fde6:	2000      	movs	r0, #0
1000fde8:	7023      	strb	r3, [r4, #0]
1000fdea:	bd38      	pop	{r3, r4, r5, pc}
1000fdec:	10017d8f 	.word	0x10017d8f

1000fdf0 <gapm_cmp_evt>:
1000fdf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fdf2:	7803      	ldrb	r3, [r0, #0]
1000fdf4:	7845      	ldrb	r5, [r0, #1]
1000fdf6:	3b0c      	subs	r3, #12
1000fdf8:	1e18      	subs	r0, r3, #0
1000fdfa:	280b      	cmp	r0, #11
1000fdfc:	d900      	bls.n	1000fe00 <gapm_cmp_evt+0x10>
1000fdfe:	e08d      	b.n	1000ff1c <gapm_cmp_evt+0x12c>
1000fe00:	1c0c      	adds	r4, r1, #0
1000fe02:	f004 fe2d 	bl	10014a60 <__gnu_thumb1_case_uqi>
1000fe06:	1952      	.short	0x1952
1000fe08:	068b1919 	.word	0x068b1919
1000fe0c:	8b595906 	.word	0x8b595906
1000fe10:	0d8b      	.short	0x0d8b
1000fe12:	2300      	movs	r3, #0
1000fe14:	2d45      	cmp	r5, #69	; 0x45
1000fe16:	d000      	beq.n	1000fe1a <gapm_cmp_evt+0x2a>
1000fe18:	1c2b      	adds	r3, r5, #0
1000fe1a:	7023      	strb	r3, [r4, #0]
1000fe1c:	2002      	movs	r0, #2
1000fe1e:	e07e      	b.n	1000ff1e <gapm_cmp_evt+0x12e>
1000fe20:	203b      	movs	r0, #59	; 0x3b
1000fe22:	2d00      	cmp	r5, #0
1000fe24:	d100      	bne.n	1000fe28 <gapm_cmp_evt+0x38>
1000fe26:	e07a      	b.n	1000ff1e <gapm_cmp_evt+0x12e>
1000fe28:	700d      	strb	r5, [r1, #0]
1000fe2a:	1c48      	adds	r0, r1, #1
1000fe2c:	2210      	movs	r2, #16
1000fe2e:	2100      	movs	r1, #0
1000fe30:	4b3b      	ldr	r3, [pc, #236]	; (1000ff20 <gapm_cmp_evt+0x130>)
1000fe32:	4798      	blx	r3
1000fe34:	200f      	movs	r0, #15
1000fe36:	e072      	b.n	1000ff1e <gapm_cmp_evt+0x12e>
1000fe38:	2d00      	cmp	r5, #0
1000fe3a:	d134      	bne.n	1000fea6 <gapm_cmp_evt+0xb6>
1000fe3c:	4b39      	ldr	r3, [pc, #228]	; (1000ff24 <gapm_cmp_evt+0x134>)
1000fe3e:	4798      	blx	r3
1000fe40:	1e43      	subs	r3, r0, #1
1000fe42:	b2db      	uxtb	r3, r3
1000fe44:	1c28      	adds	r0, r5, #0
1000fe46:	2b06      	cmp	r3, #6
1000fe48:	d869      	bhi.n	1000ff1e <gapm_cmp_evt+0x12e>
1000fe4a:	466b      	mov	r3, sp
1000fe4c:	4e36      	ldr	r6, [pc, #216]	; (1000ff28 <gapm_cmp_evt+0x138>)
1000fe4e:	1dd9      	adds	r1, r3, #7
1000fe50:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000fe52:	4b36      	ldr	r3, [pc, #216]	; (1000ff2c <gapm_cmp_evt+0x13c>)
1000fe54:	4798      	blx	r3
1000fe56:	2312      	movs	r3, #18
1000fe58:	4358      	muls	r0, r3
1000fe5a:	4935      	ldr	r1, [pc, #212]	; (1000ff30 <gapm_cmp_evt+0x140>)
1000fe5c:	1809      	adds	r1, r1, r0
1000fe5e:	1c0b      	adds	r3, r1, #0
1000fe60:	894a      	ldrh	r2, [r1, #10]
1000fe62:	3308      	adds	r3, #8
1000fe64:	8122      	strh	r2, [r4, #8]
1000fe66:	784f      	ldrb	r7, [r1, #1]
1000fe68:	72a5      	strb	r5, [r4, #10]
1000fe6a:	7027      	strb	r7, [r4, #0]
1000fe6c:	898a      	ldrh	r2, [r1, #12]
1000fe6e:	1c60      	adds	r0, r4, #1
1000fe70:	81a2      	strh	r2, [r4, #12]
1000fe72:	88db      	ldrh	r3, [r3, #6]
1000fe74:	3102      	adds	r1, #2
1000fe76:	81e3      	strh	r3, [r4, #14]
1000fe78:	89cb      	ldrh	r3, [r1, #14]
1000fe7a:	2206      	movs	r2, #6
1000fe7c:	8223      	strh	r3, [r4, #16]
1000fe7e:	4b2d      	ldr	r3, [pc, #180]	; (1000ff34 <gapm_cmp_evt+0x144>)
1000fe80:	4798      	blx	r3
1000fe82:	2f00      	cmp	r7, #0
1000fe84:	d00a      	beq.n	1000fe9c <gapm_cmp_evt+0xac>
1000fe86:	79a3      	ldrb	r3, [r4, #6]
1000fe88:	223f      	movs	r2, #63	; 0x3f
1000fe8a:	1c19      	adds	r1, r3, #0
1000fe8c:	3501      	adds	r5, #1
1000fe8e:	4391      	bics	r1, r2
1000fe90:	29c0      	cmp	r1, #192	; 0xc0
1000fe92:	d003      	beq.n	1000fe9c <gapm_cmp_evt+0xac>
1000fe94:	065b      	lsls	r3, r3, #25
1000fe96:	0fdb      	lsrs	r3, r3, #31
1000fe98:	3502      	adds	r5, #2
1000fe9a:	1aed      	subs	r5, r5, r3
1000fe9c:	2301      	movs	r3, #1
1000fe9e:	425b      	negs	r3, r3
1000fea0:	7025      	strb	r5, [r4, #0]
1000fea2:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000fea4:	e038      	b.n	1000ff18 <gapm_cmp_evt+0x128>
1000fea6:	700d      	strb	r5, [r1, #0]
1000fea8:	e004      	b.n	1000feb4 <gapm_cmp_evt+0xc4>
1000feaa:	2300      	movs	r3, #0
1000feac:	2d45      	cmp	r5, #69	; 0x45
1000feae:	d000      	beq.n	1000feb2 <gapm_cmp_evt+0xc2>
1000feb0:	1c2b      	adds	r3, r5, #0
1000feb2:	7023      	strb	r3, [r4, #0]
1000feb4:	2003      	movs	r0, #3
1000feb6:	e032      	b.n	1000ff1e <gapm_cmp_evt+0x12e>
1000feb8:	4e1b      	ldr	r6, [pc, #108]	; (1000ff28 <gapm_cmp_evt+0x138>)
1000feba:	2100      	movs	r1, #0
1000febc:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000febe:	4b1b      	ldr	r3, [pc, #108]	; (1000ff2c <gapm_cmp_evt+0x13c>)
1000fec0:	4798      	blx	r3
1000fec2:	2807      	cmp	r0, #7
1000fec4:	d818      	bhi.n	1000fef8 <gapm_cmp_evt+0x108>
1000fec6:	2301      	movs	r3, #1
1000fec8:	425b      	negs	r3, r3
1000feca:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000fecc:	3313      	adds	r3, #19
1000fece:	4358      	muls	r0, r3
1000fed0:	4917      	ldr	r1, [pc, #92]	; (1000ff30 <gapm_cmp_evt+0x140>)
1000fed2:	1809      	adds	r1, r1, r0
1000fed4:	1c0b      	adds	r3, r1, #0
1000fed6:	894a      	ldrh	r2, [r1, #10]
1000fed8:	3308      	adds	r3, #8
1000feda:	8122      	strh	r2, [r4, #8]
1000fedc:	784a      	ldrb	r2, [r1, #1]
1000fede:	72a5      	strb	r5, [r4, #10]
1000fee0:	7022      	strb	r2, [r4, #0]
1000fee2:	898a      	ldrh	r2, [r1, #12]
1000fee4:	1c60      	adds	r0, r4, #1
1000fee6:	81a2      	strh	r2, [r4, #12]
1000fee8:	88db      	ldrh	r3, [r3, #6]
1000feea:	3102      	adds	r1, #2
1000feec:	81e3      	strh	r3, [r4, #14]
1000feee:	89cb      	ldrh	r3, [r1, #14]
1000fef0:	2206      	movs	r2, #6
1000fef2:	8223      	strh	r3, [r4, #16]
1000fef4:	4b0f      	ldr	r3, [pc, #60]	; (1000ff34 <gapm_cmp_evt+0x144>)
1000fef6:	4798      	blx	r3
1000fef8:	2200      	movs	r2, #0
1000fefa:	7823      	ldrb	r3, [r4, #0]
1000fefc:	4293      	cmp	r3, r2
1000fefe:	d00a      	beq.n	1000ff16 <gapm_cmp_evt+0x126>
1000ff00:	79a3      	ldrb	r3, [r4, #6]
1000ff02:	323f      	adds	r2, #63	; 0x3f
1000ff04:	1c19      	adds	r1, r3, #0
1000ff06:	4391      	bics	r1, r2
1000ff08:	3a3e      	subs	r2, #62	; 0x3e
1000ff0a:	29c0      	cmp	r1, #192	; 0xc0
1000ff0c:	d003      	beq.n	1000ff16 <gapm_cmp_evt+0x126>
1000ff0e:	065b      	lsls	r3, r3, #25
1000ff10:	0fdb      	lsrs	r3, r3, #31
1000ff12:	3202      	adds	r2, #2
1000ff14:	1ad2      	subs	r2, r2, r3
1000ff16:	7022      	strb	r2, [r4, #0]
1000ff18:	2005      	movs	r0, #5
1000ff1a:	e000      	b.n	1000ff1e <gapm_cmp_evt+0x12e>
1000ff1c:	2000      	movs	r0, #0
1000ff1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000ff20:	10017dcb 	.word	0x10017dcb
1000ff24:	1000f141 	.word	0x1000f141
1000ff28:	1001d11a 	.word	0x1001d11a
1000ff2c:	1000f105 	.word	0x1000f105
1000ff30:	1001d08a 	.word	0x1001d08a
1000ff34:	10017d8f 	.word	0x10017d8f

1000ff38 <gapm_adv_report_evt_handler>:
1000ff38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ff3a:	7843      	ldrb	r3, [r0, #1]
1000ff3c:	1c05      	adds	r5, r0, #0
1000ff3e:	9301      	str	r3, [sp, #4]
1000ff40:	466b      	mov	r3, sp
1000ff42:	1c0c      	adds	r4, r1, #0
1000ff44:	791b      	ldrb	r3, [r3, #4]
1000ff46:	7806      	ldrb	r6, [r0, #0]
1000ff48:	2206      	movs	r2, #6
1000ff4a:	704b      	strb	r3, [r1, #1]
1000ff4c:	1c88      	adds	r0, r1, #2
1000ff4e:	4f1b      	ldr	r7, [pc, #108]	; (1000ffbc <gapm_adv_report_evt_handler+0x84>)
1000ff50:	1ca9      	adds	r1, r5, #2
1000ff52:	47b8      	blx	r7
1000ff54:	1c20      	adds	r0, r4, #0
1000ff56:	1c29      	adds	r1, r5, #0
1000ff58:	7a2a      	ldrb	r2, [r5, #8]
1000ff5a:	3008      	adds	r0, #8
1000ff5c:	77c2      	strb	r2, [r0, #31]
1000ff5e:	3109      	adds	r1, #9
1000ff60:	3528      	adds	r5, #40	; 0x28
1000ff62:	47b8      	blx	r7
1000ff64:	782b      	ldrb	r3, [r5, #0]
1000ff66:	b25a      	sxtb	r2, r3
1000ff68:	2a00      	cmp	r2, #0
1000ff6a:	da01      	bge.n	1000ff70 <gapm_adv_report_evt_handler+0x38>
1000ff6c:	3301      	adds	r3, #1
1000ff6e:	b2db      	uxtb	r3, r3
1000ff70:	1c22      	adds	r2, r4, #0
1000ff72:	3228      	adds	r2, #40	; 0x28
1000ff74:	7013      	strb	r3, [r2, #0]
1000ff76:	2200      	movs	r2, #0
1000ff78:	9b01      	ldr	r3, [sp, #4]
1000ff7a:	4293      	cmp	r3, r2
1000ff7c:	d00a      	beq.n	1000ff94 <gapm_adv_report_evt_handler+0x5c>
1000ff7e:	79e3      	ldrb	r3, [r4, #7]
1000ff80:	323f      	adds	r2, #63	; 0x3f
1000ff82:	1c19      	adds	r1, r3, #0
1000ff84:	4391      	bics	r1, r2
1000ff86:	3a3e      	subs	r2, #62	; 0x3e
1000ff88:	29c0      	cmp	r1, #192	; 0xc0
1000ff8a:	d003      	beq.n	1000ff94 <gapm_adv_report_evt_handler+0x5c>
1000ff8c:	065b      	lsls	r3, r3, #25
1000ff8e:	0fdb      	lsrs	r3, r3, #31
1000ff90:	3202      	adds	r2, #2
1000ff92:	1ad2      	subs	r2, r2, r3
1000ff94:	7062      	strb	r2, [r4, #1]
1000ff96:	2e04      	cmp	r6, #4
1000ff98:	d80f      	bhi.n	1000ffba <gapm_adv_report_evt_handler+0x82>
1000ff9a:	1c30      	adds	r0, r6, #0
1000ff9c:	f004 fd60 	bl	10014a60 <__gnu_thumb1_case_uqi>
1000ffa0:	09070503 	.word	0x09070503
1000ffa4:	0b          	.byte	0x0b
1000ffa5:	00          	.byte	0x00
1000ffa6:	2300      	movs	r3, #0
1000ffa8:	e006      	b.n	1000ffb8 <gapm_adv_report_evt_handler+0x80>
1000ffaa:	2301      	movs	r3, #1
1000ffac:	e004      	b.n	1000ffb8 <gapm_adv_report_evt_handler+0x80>
1000ffae:	2302      	movs	r3, #2
1000ffb0:	e002      	b.n	1000ffb8 <gapm_adv_report_evt_handler+0x80>
1000ffb2:	2303      	movs	r3, #3
1000ffb4:	e000      	b.n	1000ffb8 <gapm_adv_report_evt_handler+0x80>
1000ffb6:	2305      	movs	r3, #5
1000ffb8:	7023      	strb	r3, [r4, #0]
1000ffba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000ffbc:	10017d8f 	.word	0x10017d8f

1000ffc0 <gapm_resolv_addr_cmd_handler>:
1000ffc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ffc2:	2314      	movs	r3, #20
1000ffc4:	4c12      	ldr	r4, [pc, #72]	; (10010010 <gapm_resolv_addr_cmd_handler+0x50>)
1000ffc6:	1c17      	adds	r7, r2, #0
1000ffc8:	7023      	strb	r3, [r4, #0]
1000ffca:	3b07      	subs	r3, #7
1000ffcc:	7063      	strb	r3, [r4, #1]
1000ffce:	70a3      	strb	r3, [r4, #2]
1000ffd0:	2300      	movs	r3, #0
1000ffd2:	70e3      	strb	r3, [r4, #3]
1000ffd4:	4b0f      	ldr	r3, [pc, #60]	; (10010014 <gapm_resolv_addr_cmd_handler+0x54>)
1000ffd6:	1c05      	adds	r5, r0, #0
1000ffd8:	881a      	ldrh	r2, [r3, #0]
1000ffda:	881b      	ldrh	r3, [r3, #0]
1000ffdc:	4e0e      	ldr	r6, [pc, #56]	; (10010018 <gapm_resolv_addr_cmd_handler+0x58>)
1000ffde:	0a1b      	lsrs	r3, r3, #8
1000ffe0:	7163      	strb	r3, [r4, #5]
1000ffe2:	2317      	movs	r3, #23
1000ffe4:	012d      	lsls	r5, r5, #4
1000ffe6:	7122      	strb	r2, [r4, #4]
1000ffe8:	7260      	strb	r0, [r4, #9]
1000ffea:	2206      	movs	r2, #6
1000ffec:	480b      	ldr	r0, [pc, #44]	; (1001001c <gapm_resolv_addr_cmd_handler+0x5c>)
1000ffee:	7223      	strb	r3, [r4, #8]
1000fff0:	47b0      	blx	r6
1000fff2:	1c39      	adds	r1, r7, #0
1000fff4:	1c2a      	adds	r2, r5, #0
1000fff6:	480a      	ldr	r0, [pc, #40]	; (10010020 <gapm_resolv_addr_cmd_handler+0x60>)
1000fff8:	47b0      	blx	r6
1000fffa:	1c29      	adds	r1, r5, #0
1000fffc:	3110      	adds	r1, #16
1000fffe:	1c0b      	adds	r3, r1, #0
10010000:	3b08      	subs	r3, #8
10010002:	71a3      	strb	r3, [r4, #6]
10010004:	121b      	asrs	r3, r3, #8
10010006:	71e3      	strb	r3, [r4, #7]
10010008:	1c20      	adds	r0, r4, #0
1001000a:	4b06      	ldr	r3, [pc, #24]	; (10010024 <gapm_resolv_addr_cmd_handler+0x64>)
1001000c:	4798      	blx	r3
1001000e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010010:	1001d3f8 	.word	0x1001d3f8
10010014:	1001d088 	.word	0x1001d088
10010018:	10017d8f 	.word	0x10017d8f
1001001c:	1001d402 	.word	0x1001d402
10010020:	1001d408 	.word	0x1001d408
10010024:	1000ef35 	.word	0x1000ef35

10010028 <gapm_addr_solved_ind_handler>:
10010028:	b570      	push	{r4, r5, r6, lr}
1001002a:	1c04      	adds	r4, r0, #0
1001002c:	1c08      	adds	r0, r1, #0
1001002e:	1c0d      	adds	r5, r1, #0
10010030:	4e05      	ldr	r6, [pc, #20]	; (10010048 <gapm_addr_solved_ind_handler+0x20>)
10010032:	1c21      	adds	r1, r4, #0
10010034:	2206      	movs	r2, #6
10010036:	3011      	adds	r0, #17
10010038:	47b0      	blx	r6
1001003a:	1c68      	adds	r0, r5, #1
1001003c:	1da1      	adds	r1, r4, #6
1001003e:	2210      	movs	r2, #16
10010040:	47b0      	blx	r6
10010042:	2300      	movs	r3, #0
10010044:	702b      	strb	r3, [r5, #0]
10010046:	bd70      	pop	{r4, r5, r6, pc}
10010048:	10017d8f 	.word	0x10017d8f

1001004c <gapm_profile_added_ind_handler>:
1001004c:	b510      	push	{r4, lr}
1001004e:	7843      	ldrb	r3, [r0, #1]
10010050:	7902      	ldrb	r2, [r0, #4]
10010052:	7944      	ldrb	r4, [r0, #5]
10010054:	7800      	ldrb	r0, [r0, #0]
10010056:	021b      	lsls	r3, r3, #8
10010058:	4303      	orrs	r3, r0
1001005a:	2b1b      	cmp	r3, #27
1001005c:	d104      	bne.n	10010068 <gapm_profile_added_ind_handler+0x1c>
1001005e:	2300      	movs	r3, #0
10010060:	700b      	strb	r3, [r1, #0]
10010062:	0223      	lsls	r3, r4, #8
10010064:	4313      	orrs	r3, r2
10010066:	804b      	strh	r3, [r1, #2]
10010068:	203b      	movs	r0, #59	; 0x3b
1001006a:	bd10      	pop	{r4, pc}

1001006c <gattc_read_req_ind_parser>:
1001006c:	7843      	ldrb	r3, [r0, #1]
1001006e:	7802      	ldrb	r2, [r0, #0]
10010070:	021b      	lsls	r3, r3, #8
10010072:	4313      	orrs	r3, r2
10010074:	804b      	strh	r3, [r1, #2]
10010076:	4770      	bx	lr

10010078 <gattc_write_req_ind_parser>:
10010078:	b508      	push	{r3, lr}
1001007a:	1c13      	adds	r3, r2, #0
1001007c:	0a00      	lsrs	r0, r0, #8
1001007e:	8010      	strh	r0, [r2, #0]
10010080:	784a      	ldrb	r2, [r1, #1]
10010082:	7808      	ldrb	r0, [r1, #0]
10010084:	0212      	lsls	r2, r2, #8
10010086:	4302      	orrs	r2, r0
10010088:	805a      	strh	r2, [r3, #2]
1001008a:	78ca      	ldrb	r2, [r1, #3]
1001008c:	7888      	ldrb	r0, [r1, #2]
1001008e:	0212      	lsls	r2, r2, #8
10010090:	4302      	orrs	r2, r0
10010092:	809a      	strh	r2, [r3, #4]
10010094:	794a      	ldrb	r2, [r1, #5]
10010096:	7908      	ldrb	r0, [r1, #4]
10010098:	0212      	lsls	r2, r2, #8
1001009a:	4302      	orrs	r2, r0
1001009c:	80da      	strh	r2, [r3, #6]
1001009e:	3308      	adds	r3, #8
100100a0:	1c18      	adds	r0, r3, #0
100100a2:	3106      	adds	r1, #6
100100a4:	4b01      	ldr	r3, [pc, #4]	; (100100ac <gattc_write_req_ind_parser+0x34>)
100100a6:	4798      	blx	r3
100100a8:	bd08      	pop	{r3, pc}
100100aa:	46c0      	nop			; (mov r8, r8)
100100ac:	10017d8f 	.word	0x10017d8f

100100b0 <gattc_att_info_req_parser>:
100100b0:	7843      	ldrb	r3, [r0, #1]
100100b2:	7802      	ldrb	r2, [r0, #0]
100100b4:	021b      	lsls	r3, r3, #8
100100b6:	4313      	orrs	r3, r2
100100b8:	800b      	strh	r3, [r1, #0]
100100ba:	4770      	bx	lr

100100bc <gattc_read_cfm>:
100100bc:	b538      	push	{r3, r4, r5, lr}
100100be:	2514      	movs	r5, #20
100100c0:	1c1c      	adds	r4, r3, #0
100100c2:	4b14      	ldr	r3, [pc, #80]	; (10010114 <gattc_read_cfm+0x58>)
100100c4:	70d9      	strb	r1, [r3, #3]
100100c6:	4914      	ldr	r1, [pc, #80]	; (10010118 <gattc_read_cfm+0x5c>)
100100c8:	701d      	strb	r5, [r3, #0]
100100ca:	3d08      	subs	r5, #8
100100cc:	705d      	strb	r5, [r3, #1]
100100ce:	709d      	strb	r5, [r3, #2]
100100d0:	880d      	ldrh	r5, [r1, #0]
100100d2:	8809      	ldrh	r1, [r1, #0]
100100d4:	7218      	strb	r0, [r3, #8]
100100d6:	0a09      	lsrs	r1, r1, #8
100100d8:	7159      	strb	r1, [r3, #5]
100100da:	0a00      	lsrs	r0, r0, #8
100100dc:	0a21      	lsrs	r1, r4, #8
100100de:	711d      	strb	r5, [r3, #4]
100100e0:	7258      	strb	r0, [r3, #9]
100100e2:	729c      	strb	r4, [r3, #10]
100100e4:	72d9      	strb	r1, [r3, #11]
100100e6:	731a      	strb	r2, [r3, #12]
100100e8:	1c1d      	adds	r5, r3, #0
100100ea:	2c00      	cmp	r4, #0
100100ec:	d007      	beq.n	100100fe <gattc_read_cfm+0x42>
100100ee:	9904      	ldr	r1, [sp, #16]
100100f0:	1c22      	adds	r2, r4, #0
100100f2:	480a      	ldr	r0, [pc, #40]	; (1001011c <gattc_read_cfm+0x60>)
100100f4:	4b0a      	ldr	r3, [pc, #40]	; (10010120 <gattc_read_cfm+0x64>)
100100f6:	340d      	adds	r4, #13
100100f8:	4798      	blx	r3
100100fa:	b2a1      	uxth	r1, r4
100100fc:	e001      	b.n	10010102 <gattc_read_cfm+0x46>
100100fe:	210e      	movs	r1, #14
10010100:	735c      	strb	r4, [r3, #13]
10010102:	1c0b      	adds	r3, r1, #0
10010104:	3b08      	subs	r3, #8
10010106:	71ab      	strb	r3, [r5, #6]
10010108:	121b      	asrs	r3, r3, #8
1001010a:	71eb      	strb	r3, [r5, #7]
1001010c:	1c28      	adds	r0, r5, #0
1001010e:	4b05      	ldr	r3, [pc, #20]	; (10010124 <gattc_read_cfm+0x68>)
10010110:	4798      	blx	r3
10010112:	bd38      	pop	{r3, r4, r5, pc}
10010114:	1001d3f8 	.word	0x1001d3f8
10010118:	1001d088 	.word	0x1001d088
1001011c:	1001d405 	.word	0x1001d405
10010120:	10017d8f 	.word	0x10017d8f
10010124:	1000ef35 	.word	0x1000ef35

10010128 <gattc_write_cfm>:
10010128:	4b0d      	ldr	r3, [pc, #52]	; (10010160 <gattc_write_cfm+0x38>)
1001012a:	b510      	push	{r4, lr}
1001012c:	729a      	strb	r2, [r3, #10]
1001012e:	2203      	movs	r2, #3
10010130:	2416      	movs	r4, #22
10010132:	719a      	strb	r2, [r3, #6]
10010134:	2200      	movs	r2, #0
10010136:	70d9      	strb	r1, [r3, #3]
10010138:	490a      	ldr	r1, [pc, #40]	; (10010164 <gattc_write_cfm+0x3c>)
1001013a:	701c      	strb	r4, [r3, #0]
1001013c:	3c0a      	subs	r4, #10
1001013e:	705c      	strb	r4, [r3, #1]
10010140:	709c      	strb	r4, [r3, #2]
10010142:	880c      	ldrh	r4, [r1, #0]
10010144:	8809      	ldrh	r1, [r1, #0]
10010146:	7218      	strb	r0, [r3, #8]
10010148:	0a09      	lsrs	r1, r1, #8
1001014a:	0a00      	lsrs	r0, r0, #8
1001014c:	711c      	strb	r4, [r3, #4]
1001014e:	7159      	strb	r1, [r3, #5]
10010150:	7258      	strb	r0, [r3, #9]
10010152:	71da      	strb	r2, [r3, #7]
10010154:	1c18      	adds	r0, r3, #0
10010156:	210b      	movs	r1, #11
10010158:	4b03      	ldr	r3, [pc, #12]	; (10010168 <gattc_write_cfm+0x40>)
1001015a:	4798      	blx	r3
1001015c:	bd10      	pop	{r4, pc}
1001015e:	46c0      	nop			; (mov r8, r8)
10010160:	1001d3f8 	.word	0x1001d3f8
10010164:	1001d088 	.word	0x1001d088
10010168:	1000ef35 	.word	0x1000ef35

1001016c <gattc_att_info_cfm>:
1001016c:	b538      	push	{r3, r4, r5, lr}
1001016e:	4c0e      	ldr	r4, [pc, #56]	; (100101a8 <gattc_att_info_cfm+0x3c>)
10010170:	2518      	movs	r5, #24
10010172:	7323      	strb	r3, [r4, #12]
10010174:	2305      	movs	r3, #5
10010176:	71a3      	strb	r3, [r4, #6]
10010178:	2300      	movs	r3, #0
1001017a:	70e1      	strb	r1, [r4, #3]
1001017c:	490b      	ldr	r1, [pc, #44]	; (100101ac <gattc_att_info_cfm+0x40>)
1001017e:	7025      	strb	r5, [r4, #0]
10010180:	3d0c      	subs	r5, #12
10010182:	7065      	strb	r5, [r4, #1]
10010184:	70a5      	strb	r5, [r4, #2]
10010186:	880d      	ldrh	r5, [r1, #0]
10010188:	8809      	ldrh	r1, [r1, #0]
1001018a:	7220      	strb	r0, [r4, #8]
1001018c:	0a09      	lsrs	r1, r1, #8
1001018e:	0a00      	lsrs	r0, r0, #8
10010190:	7161      	strb	r1, [r4, #5]
10010192:	7260      	strb	r0, [r4, #9]
10010194:	72a2      	strb	r2, [r4, #10]
10010196:	71e3      	strb	r3, [r4, #7]
10010198:	0a12      	lsrs	r2, r2, #8
1001019a:	1c20      	adds	r0, r4, #0
1001019c:	210d      	movs	r1, #13
1001019e:	4b04      	ldr	r3, [pc, #16]	; (100101b0 <gattc_att_info_cfm+0x44>)
100101a0:	7125      	strb	r5, [r4, #4]
100101a2:	72e2      	strb	r2, [r4, #11]
100101a4:	4798      	blx	r3
100101a6:	bd38      	pop	{r3, r4, r5, pc}
100101a8:	1001d3f8 	.word	0x1001d3f8
100101ac:	1001d088 	.word	0x1001d088
100101b0:	1000ef35 	.word	0x1000ef35

100101b4 <gattc_event_cfm_handler>:
100101b4:	220e      	movs	r2, #14
100101b6:	b508      	push	{r3, lr}
100101b8:	4b0b      	ldr	r3, [pc, #44]	; (100101e8 <gattc_event_cfm_handler+0x34>)
100101ba:	701a      	strb	r2, [r3, #0]
100101bc:	3a02      	subs	r2, #2
100101be:	705a      	strb	r2, [r3, #1]
100101c0:	709a      	strb	r2, [r3, #2]
100101c2:	4a0a      	ldr	r2, [pc, #40]	; (100101ec <gattc_event_cfm_handler+0x38>)
100101c4:	70d8      	strb	r0, [r3, #3]
100101c6:	8810      	ldrh	r0, [r2, #0]
100101c8:	8812      	ldrh	r2, [r2, #0]
100101ca:	7219      	strb	r1, [r3, #8]
100101cc:	0a12      	lsrs	r2, r2, #8
100101ce:	715a      	strb	r2, [r3, #5]
100101d0:	2202      	movs	r2, #2
100101d2:	719a      	strb	r2, [r3, #6]
100101d4:	2200      	movs	r2, #0
100101d6:	0a09      	lsrs	r1, r1, #8
100101d8:	7118      	strb	r0, [r3, #4]
100101da:	7259      	strb	r1, [r3, #9]
100101dc:	71da      	strb	r2, [r3, #7]
100101de:	1c18      	adds	r0, r3, #0
100101e0:	210a      	movs	r1, #10
100101e2:	4b03      	ldr	r3, [pc, #12]	; (100101f0 <gattc_event_cfm_handler+0x3c>)
100101e4:	4798      	blx	r3
100101e6:	bd08      	pop	{r3, pc}
100101e8:	1001d3f8 	.word	0x1001d3f8
100101ec:	1001d088 	.word	0x1001d088
100101f0:	1000ef35 	.word	0x1000ef35

100101f4 <gattc_disc_svc_ind_parser>:
100101f4:	b570      	push	{r4, r5, r6, lr}
100101f6:	1c15      	adds	r5, r2, #0
100101f8:	0a00      	lsrs	r0, r0, #8
100101fa:	8010      	strh	r0, [r2, #0]
100101fc:	784b      	ldrb	r3, [r1, #1]
100101fe:	780a      	ldrb	r2, [r1, #0]
10010200:	021b      	lsls	r3, r3, #8
10010202:	4313      	orrs	r3, r2
10010204:	806b      	strh	r3, [r5, #2]
10010206:	78cb      	ldrb	r3, [r1, #3]
10010208:	788a      	ldrb	r2, [r1, #2]
1001020a:	021b      	lsls	r3, r3, #8
1001020c:	4313      	orrs	r3, r2
1001020e:	80ab      	strh	r3, [r5, #4]
10010210:	790e      	ldrb	r6, [r1, #4]
10010212:	4b05      	ldr	r3, [pc, #20]	; (10010228 <gattc_disc_svc_ind_parser+0x34>)
10010214:	1c30      	adds	r0, r6, #0
10010216:	1c0c      	adds	r4, r1, #0
10010218:	4798      	blx	r3
1001021a:	1c32      	adds	r2, r6, #0
1001021c:	71a8      	strb	r0, [r5, #6]
1001021e:	1d61      	adds	r1, r4, #5
10010220:	1de8      	adds	r0, r5, #7
10010222:	4b02      	ldr	r3, [pc, #8]	; (1001022c <gattc_disc_svc_ind_parser+0x38>)
10010224:	4798      	blx	r3
10010226:	bd70      	pop	{r4, r5, r6, pc}
10010228:	1000e8ed 	.word	0x1000e8ed
1001022c:	10017d8f 	.word	0x10017d8f

10010230 <gattc_disc_svc_incl_ind_parser>:
10010230:	b570      	push	{r4, r5, r6, lr}
10010232:	1c15      	adds	r5, r2, #0
10010234:	0a00      	lsrs	r0, r0, #8
10010236:	8010      	strh	r0, [r2, #0]
10010238:	784b      	ldrb	r3, [r1, #1]
1001023a:	780a      	ldrb	r2, [r1, #0]
1001023c:	021b      	lsls	r3, r3, #8
1001023e:	4313      	orrs	r3, r2
10010240:	806b      	strh	r3, [r5, #2]
10010242:	78cb      	ldrb	r3, [r1, #3]
10010244:	788a      	ldrb	r2, [r1, #2]
10010246:	021b      	lsls	r3, r3, #8
10010248:	4313      	orrs	r3, r2
1001024a:	80ab      	strh	r3, [r5, #4]
1001024c:	794b      	ldrb	r3, [r1, #5]
1001024e:	790a      	ldrb	r2, [r1, #4]
10010250:	021b      	lsls	r3, r3, #8
10010252:	4313      	orrs	r3, r2
10010254:	80eb      	strh	r3, [r5, #6]
10010256:	798e      	ldrb	r6, [r1, #6]
10010258:	4b05      	ldr	r3, [pc, #20]	; (10010270 <gattc_disc_svc_incl_ind_parser+0x40>)
1001025a:	1c30      	adds	r0, r6, #0
1001025c:	1c0c      	adds	r4, r1, #0
1001025e:	4798      	blx	r3
10010260:	7228      	strb	r0, [r5, #8]
10010262:	1c28      	adds	r0, r5, #0
10010264:	1c32      	adds	r2, r6, #0
10010266:	1de1      	adds	r1, r4, #7
10010268:	4b02      	ldr	r3, [pc, #8]	; (10010274 <gattc_disc_svc_incl_ind_parser+0x44>)
1001026a:	3009      	adds	r0, #9
1001026c:	4798      	blx	r3
1001026e:	bd70      	pop	{r4, r5, r6, pc}
10010270:	1000e8ed 	.word	0x1000e8ed
10010274:	10017d8f 	.word	0x10017d8f

10010278 <gattc_disc_char_ind_parser>:
10010278:	b570      	push	{r4, r5, r6, lr}
1001027a:	1c15      	adds	r5, r2, #0
1001027c:	0a00      	lsrs	r0, r0, #8
1001027e:	8010      	strh	r0, [r2, #0]
10010280:	784b      	ldrb	r3, [r1, #1]
10010282:	780a      	ldrb	r2, [r1, #0]
10010284:	021b      	lsls	r3, r3, #8
10010286:	4313      	orrs	r3, r2
10010288:	806b      	strh	r3, [r5, #2]
1001028a:	78cb      	ldrb	r3, [r1, #3]
1001028c:	788a      	ldrb	r2, [r1, #2]
1001028e:	021b      	lsls	r3, r3, #8
10010290:	4313      	orrs	r3, r2
10010292:	80ab      	strh	r3, [r5, #4]
10010294:	790b      	ldrb	r3, [r1, #4]
10010296:	1c0c      	adds	r4, r1, #0
10010298:	71ab      	strb	r3, [r5, #6]
1001029a:	794e      	ldrb	r6, [r1, #5]
1001029c:	4b05      	ldr	r3, [pc, #20]	; (100102b4 <gattc_disc_char_ind_parser+0x3c>)
1001029e:	1c30      	adds	r0, r6, #0
100102a0:	4798      	blx	r3
100102a2:	71e8      	strb	r0, [r5, #7]
100102a4:	1c28      	adds	r0, r5, #0
100102a6:	1c32      	adds	r2, r6, #0
100102a8:	1da1      	adds	r1, r4, #6
100102aa:	4b03      	ldr	r3, [pc, #12]	; (100102b8 <gattc_disc_char_ind_parser+0x40>)
100102ac:	3008      	adds	r0, #8
100102ae:	4798      	blx	r3
100102b0:	bd70      	pop	{r4, r5, r6, pc}
100102b2:	46c0      	nop			; (mov r8, r8)
100102b4:	1000e8ed 	.word	0x1000e8ed
100102b8:	10017d8f 	.word	0x10017d8f

100102bc <gattc_disc_char_desc_ind_parser>:
100102bc:	b570      	push	{r4, r5, r6, lr}
100102be:	1c15      	adds	r5, r2, #0
100102c0:	0a00      	lsrs	r0, r0, #8
100102c2:	8010      	strh	r0, [r2, #0]
100102c4:	784b      	ldrb	r3, [r1, #1]
100102c6:	780a      	ldrb	r2, [r1, #0]
100102c8:	021b      	lsls	r3, r3, #8
100102ca:	4313      	orrs	r3, r2
100102cc:	806b      	strh	r3, [r5, #2]
100102ce:	788e      	ldrb	r6, [r1, #2]
100102d0:	4b05      	ldr	r3, [pc, #20]	; (100102e8 <gattc_disc_char_desc_ind_parser+0x2c>)
100102d2:	1c30      	adds	r0, r6, #0
100102d4:	1c0c      	adds	r4, r1, #0
100102d6:	4798      	blx	r3
100102d8:	1c32      	adds	r2, r6, #0
100102da:	7128      	strb	r0, [r5, #4]
100102dc:	1ce1      	adds	r1, r4, #3
100102de:	1d68      	adds	r0, r5, #5
100102e0:	4b02      	ldr	r3, [pc, #8]	; (100102ec <gattc_disc_char_desc_ind_parser+0x30>)
100102e2:	4798      	blx	r3
100102e4:	bd70      	pop	{r4, r5, r6, pc}
100102e6:	46c0      	nop			; (mov r8, r8)
100102e8:	1000e8ed 	.word	0x1000e8ed
100102ec:	10017d8f 	.word	0x10017d8f

100102f0 <gattc_event_ind_and_notification_parser>:
100102f0:	b510      	push	{r4, lr}
100102f2:	780c      	ldrb	r4, [r1, #0]
100102f4:	1c13      	adds	r3, r2, #0
100102f6:	2c12      	cmp	r4, #18
100102f8:	d10e      	bne.n	10010318 <gattc_event_ind_and_notification_parser+0x28>
100102fa:	0a00      	lsrs	r0, r0, #8
100102fc:	8010      	strh	r0, [r2, #0]
100102fe:	788a      	ldrb	r2, [r1, #2]
10010300:	709a      	strb	r2, [r3, #2]
10010302:	7948      	ldrb	r0, [r1, #5]
10010304:	790c      	ldrb	r4, [r1, #4]
10010306:	0200      	lsls	r0, r0, #8
10010308:	4320      	orrs	r0, r4
1001030a:	8098      	strh	r0, [r3, #4]
1001030c:	3106      	adds	r1, #6
1001030e:	1d98      	adds	r0, r3, #6
10010310:	4b0b      	ldr	r3, [pc, #44]	; (10010340 <gattc_event_ind_and_notification_parser+0x50>)
10010312:	4798      	blx	r3
10010314:	221b      	movs	r2, #27
10010316:	e010      	b.n	1001033a <gattc_event_ind_and_notification_parser+0x4a>
10010318:	2200      	movs	r2, #0
1001031a:	2c13      	cmp	r4, #19
1001031c:	d10d      	bne.n	1001033a <gattc_event_ind_and_notification_parser+0x4a>
1001031e:	0a00      	lsrs	r0, r0, #8
10010320:	8018      	strh	r0, [r3, #0]
10010322:	788a      	ldrb	r2, [r1, #2]
10010324:	709a      	strb	r2, [r3, #2]
10010326:	7908      	ldrb	r0, [r1, #4]
10010328:	78cc      	ldrb	r4, [r1, #3]
1001032a:	0200      	lsls	r0, r0, #8
1001032c:	4320      	orrs	r0, r4
1001032e:	8098      	strh	r0, [r3, #4]
10010330:	3106      	adds	r1, #6
10010332:	1d98      	adds	r0, r3, #6
10010334:	4b02      	ldr	r3, [pc, #8]	; (10010340 <gattc_event_ind_and_notification_parser+0x50>)
10010336:	4798      	blx	r3
10010338:	221c      	movs	r2, #28
1001033a:	1c10      	adds	r0, r2, #0
1001033c:	bd10      	pop	{r4, pc}
1001033e:	46c0      	nop			; (mov r8, r8)
10010340:	10017d8f 	.word	0x10017d8f

10010344 <gattc_complete_evt_handler>:
10010344:	b500      	push	{lr}
10010346:	0a00      	lsrs	r0, r0, #8
10010348:	8010      	strh	r0, [r2, #0]
1001034a:	7808      	ldrb	r0, [r1, #0]
1001034c:	7090      	strb	r0, [r2, #2]
1001034e:	784b      	ldrb	r3, [r1, #1]
10010350:	3801      	subs	r0, #1
10010352:	70d3      	strb	r3, [r2, #3]
10010354:	2813      	cmp	r0, #19
10010356:	d82c      	bhi.n	100103b2 <gattc_complete_evt_handler+0x6e>
10010358:	f004 fb82 	bl	10014a60 <__gnu_thumb1_case_uqi>
1001035c:	0a0a0a0c 	.word	0x0a0a0a0c
10010360:	210a0a0a 	.word	0x210a0a0a
10010364:	111f2121 	.word	0x111f2121
10010368:	2b111111 	.word	0x2b111111
1001036c:	2919132b 	.word	0x2919132b
10010370:	2017      	movs	r0, #23
10010372:	e01f      	b.n	100103b4 <gattc_complete_evt_handler+0x70>
10010374:	2024      	movs	r0, #36	; 0x24
10010376:	2b00      	cmp	r3, #0
10010378:	d11c      	bne.n	100103b4 <gattc_complete_evt_handler+0x70>
1001037a:	3017      	adds	r0, #23
1001037c:	e01a      	b.n	100103b4 <gattc_complete_evt_handler+0x70>
1001037e:	2025      	movs	r0, #37	; 0x25
10010380:	e018      	b.n	100103b4 <gattc_complete_evt_handler+0x70>
10010382:	4a0d      	ldr	r2, [pc, #52]	; (100103b8 <gattc_complete_evt_handler+0x74>)
10010384:	201d      	movs	r0, #29
10010386:	6813      	ldr	r3, [r2, #0]
10010388:	3b01      	subs	r3, #1
1001038a:	6013      	str	r3, [r2, #0]
1001038c:	e012      	b.n	100103b4 <gattc_complete_evt_handler+0x70>
1001038e:	4a0a      	ldr	r2, [pc, #40]	; (100103b8 <gattc_complete_evt_handler+0x74>)
10010390:	201e      	movs	r0, #30
10010392:	6813      	ldr	r3, [r2, #0]
10010394:	3b01      	subs	r3, #1
10010396:	6013      	str	r3, [r2, #0]
10010398:	e00c      	b.n	100103b4 <gattc_complete_evt_handler+0x70>
1001039a:	2019      	movs	r0, #25
1001039c:	e00a      	b.n	100103b4 <gattc_complete_evt_handler+0x70>
1001039e:	203b      	movs	r0, #59	; 0x3b
100103a0:	2b00      	cmp	r3, #0
100103a2:	d007      	beq.n	100103b4 <gattc_complete_evt_handler+0x70>
100103a4:	2182      	movs	r1, #130	; 0x82
100103a6:	0089      	lsls	r1, r1, #2
100103a8:	5453      	strb	r3, [r2, r1]
100103aa:	3823      	subs	r0, #35	; 0x23
100103ac:	e002      	b.n	100103b4 <gattc_complete_evt_handler+0x70>
100103ae:	2021      	movs	r0, #33	; 0x21
100103b0:	e000      	b.n	100103b4 <gattc_complete_evt_handler+0x70>
100103b2:	2000      	movs	r0, #0
100103b4:	bd00      	pop	{pc}
100103b6:	46c0      	nop			; (mov r8, r8)
100103b8:	1001c0b8 	.word	0x1001c0b8

100103bc <gattc_event_mtu_changed_ind_parser>:
100103bc:	0a00      	lsrs	r0, r0, #8
100103be:	8010      	strh	r0, [r2, #0]
100103c0:	784b      	ldrb	r3, [r1, #1]
100103c2:	7809      	ldrb	r1, [r1, #0]
100103c4:	021b      	lsls	r3, r3, #8
100103c6:	430b      	orrs	r3, r1
100103c8:	8053      	strh	r3, [r2, #2]
100103ca:	4770      	bx	lr

100103cc <gattc_read_ind_parser>:
100103cc:	0a00      	lsrs	r0, r0, #8
100103ce:	b508      	push	{r3, lr}
100103d0:	8010      	strh	r0, [r2, #0]
100103d2:	1c13      	adds	r3, r2, #0
100103d4:	2282      	movs	r2, #130	; 0x82
100103d6:	2000      	movs	r0, #0
100103d8:	0092      	lsls	r2, r2, #2
100103da:	5498      	strb	r0, [r3, r2]
100103dc:	784a      	ldrb	r2, [r1, #1]
100103de:	7808      	ldrb	r0, [r1, #0]
100103e0:	0212      	lsls	r2, r2, #8
100103e2:	4302      	orrs	r2, r0
100103e4:	805a      	strh	r2, [r3, #2]
100103e6:	78ca      	ldrb	r2, [r1, #3]
100103e8:	7888      	ldrb	r0, [r1, #2]
100103ea:	0212      	lsls	r2, r2, #8
100103ec:	4302      	orrs	r2, r0
100103ee:	80da      	strh	r2, [r3, #6]
100103f0:	794a      	ldrb	r2, [r1, #5]
100103f2:	7908      	ldrb	r0, [r1, #4]
100103f4:	0212      	lsls	r2, r2, #8
100103f6:	4302      	orrs	r2, r0
100103f8:	809a      	strh	r2, [r3, #4]
100103fa:	3308      	adds	r3, #8
100103fc:	1c18      	adds	r0, r3, #0
100103fe:	3106      	adds	r1, #6
10010400:	4b01      	ldr	r3, [pc, #4]	; (10010408 <gattc_read_ind_parser+0x3c>)
10010402:	4798      	blx	r3
10010404:	bd08      	pop	{r3, pc}
10010406:	46c0      	nop			; (mov r8, r8)
10010408:	10017d8f 	.word	0x10017d8f

1001040c <gattc_svc_changed_cfg_ind_parser>:
1001040c:	0a00      	lsrs	r0, r0, #8
1001040e:	8010      	strh	r0, [r2, #0]
10010410:	784b      	ldrb	r3, [r1, #1]
10010412:	7809      	ldrb	r1, [r1, #0]
10010414:	021b      	lsls	r3, r3, #8
10010416:	430b      	orrs	r3, r1
10010418:	8053      	strh	r3, [r2, #2]
1001041a:	4770      	bx	lr

1001041c <init_gattc_task_module>:
1001041c:	2300      	movs	r3, #0
1001041e:	4a02      	ldr	r2, [pc, #8]	; (10010428 <init_gattc_task_module+0xc>)
10010420:	8013      	strh	r3, [r2, #0]
10010422:	4a02      	ldr	r2, [pc, #8]	; (1001042c <init_gattc_task_module+0x10>)
10010424:	8013      	strh	r3, [r2, #0]
10010426:	4770      	bx	lr
10010428:	1001c0b2 	.word	0x1001c0b2
1001042c:	1001c0b4 	.word	0x1001c0b4

10010430 <gattm_att_set_value_req_handler>:
10010430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010432:	466b      	mov	r3, sp
10010434:	1dde      	adds	r6, r3, #7
10010436:	2300      	movs	r3, #0
10010438:	1c0d      	adds	r5, r1, #0
1001043a:	210c      	movs	r1, #12
1001043c:	270b      	movs	r7, #11
1001043e:	4c17      	ldr	r4, [pc, #92]	; (1001049c <gattm_att_set_value_req_handler+0x6c>)
10010440:	7033      	strb	r3, [r6, #0]
10010442:	70e3      	strb	r3, [r4, #3]
10010444:	4b16      	ldr	r3, [pc, #88]	; (100104a0 <gattm_att_set_value_req_handler+0x70>)
10010446:	7021      	strb	r1, [r4, #0]
10010448:	8819      	ldrh	r1, [r3, #0]
1001044a:	881b      	ldrh	r3, [r3, #0]
1001044c:	7220      	strb	r0, [r4, #8]
1001044e:	0a1b      	lsrs	r3, r3, #8
10010450:	7163      	strb	r3, [r4, #5]
10010452:	0a00      	lsrs	r0, r0, #8
10010454:	0a2b      	lsrs	r3, r5, #8
10010456:	7121      	strb	r1, [r4, #4]
10010458:	7260      	strb	r0, [r4, #9]
1001045a:	1c11      	adds	r1, r2, #0
1001045c:	72a5      	strb	r5, [r4, #10]
1001045e:	1c2a      	adds	r2, r5, #0
10010460:	72e3      	strb	r3, [r4, #11]
10010462:	350c      	adds	r5, #12
10010464:	4b0f      	ldr	r3, [pc, #60]	; (100104a4 <gattm_att_set_value_req_handler+0x74>)
10010466:	4810      	ldr	r0, [pc, #64]	; (100104a8 <gattm_att_set_value_req_handler+0x78>)
10010468:	7067      	strb	r7, [r4, #1]
1001046a:	70a7      	strb	r7, [r4, #2]
1001046c:	4798      	blx	r3
1001046e:	b2a9      	uxth	r1, r5
10010470:	4b0e      	ldr	r3, [pc, #56]	; (100104ac <gattm_att_set_value_req_handler+0x7c>)
10010472:	4d0f      	ldr	r5, [pc, #60]	; (100104b0 <gattm_att_set_value_req_handler+0x80>)
10010474:	1c20      	adds	r0, r4, #0
10010476:	802b      	strh	r3, [r5, #0]
10010478:	1c0b      	adds	r3, r1, #0
1001047a:	3b08      	subs	r3, #8
1001047c:	71a3      	strb	r3, [r4, #6]
1001047e:	121b      	asrs	r3, r3, #8
10010480:	71e3      	strb	r3, [r4, #7]
10010482:	4b0c      	ldr	r3, [pc, #48]	; (100104b4 <gattm_att_set_value_req_handler+0x84>)
10010484:	80af      	strh	r7, [r5, #4]
10010486:	4798      	blx	r3
10010488:	1c30      	adds	r0, r6, #0
1001048a:	4b0b      	ldr	r3, [pc, #44]	; (100104b8 <gattm_att_set_value_req_handler+0x88>)
1001048c:	4798      	blx	r3
1001048e:	7833      	ldrb	r3, [r6, #0]
10010490:	20e2      	movs	r0, #226	; 0xe2
10010492:	2b00      	cmp	r3, #0
10010494:	d101      	bne.n	1001049a <gattm_att_set_value_req_handler+0x6a>
10010496:	68ab      	ldr	r3, [r5, #8]
10010498:	7898      	ldrb	r0, [r3, #2]
1001049a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1001049c:	1001d3f8 	.word	0x1001d3f8
100104a0:	1001d088 	.word	0x1001d088
100104a4:	10017d8f 	.word	0x10017d8f
100104a8:	1001d404 	.word	0x1001d404
100104ac:	00000b0d 	.word	0x00000b0d
100104b0:	1001d07c 	.word	0x1001d07c
100104b4:	1000ef35 	.word	0x1000ef35
100104b8:	1000ef99 	.word	0x1000ef99

100104bc <gattm_att_get_value_req_handler>:
100104bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100104be:	b085      	sub	sp, #20
100104c0:	9201      	str	r2, [sp, #4]
100104c2:	220a      	movs	r2, #10
100104c4:	1c04      	adds	r4, r0, #0
100104c6:	481d      	ldr	r0, [pc, #116]	; (1001053c <gattm_att_get_value_req_handler+0x80>)
100104c8:	ab02      	add	r3, sp, #8
100104ca:	1dde      	adds	r6, r3, #7
100104cc:	7002      	strb	r2, [r0, #0]
100104ce:	2300      	movs	r3, #0
100104d0:	220b      	movs	r2, #11
100104d2:	4d1b      	ldr	r5, [pc, #108]	; (10010540 <gattm_att_get_value_req_handler+0x84>)
100104d4:	1c0f      	adds	r7, r1, #0
100104d6:	8829      	ldrh	r1, [r5, #0]
100104d8:	882d      	ldrh	r5, [r5, #0]
100104da:	7101      	strb	r1, [r0, #4]
100104dc:	0a2d      	lsrs	r5, r5, #8
100104de:	7145      	strb	r5, [r0, #5]
100104e0:	0a25      	lsrs	r5, r4, #8
100104e2:	7245      	strb	r5, [r0, #9]
100104e4:	4917      	ldr	r1, [pc, #92]	; (10010544 <gattm_att_get_value_req_handler+0x88>)
100104e6:	4d18      	ldr	r5, [pc, #96]	; (10010548 <gattm_att_get_value_req_handler+0x8c>)
100104e8:	7033      	strb	r3, [r6, #0]
100104ea:	7042      	strb	r2, [r0, #1]
100104ec:	7082      	strb	r2, [r0, #2]
100104ee:	70c3      	strb	r3, [r0, #3]
100104f0:	8029      	strh	r1, [r5, #0]
100104f2:	80aa      	strh	r2, [r5, #4]
100104f4:	71c3      	strb	r3, [r0, #7]
100104f6:	3a09      	subs	r2, #9
100104f8:	210a      	movs	r1, #10
100104fa:	4b14      	ldr	r3, [pc, #80]	; (1001054c <gattm_att_get_value_req_handler+0x90>)
100104fc:	7182      	strb	r2, [r0, #6]
100104fe:	7204      	strb	r4, [r0, #8]
10010500:	4798      	blx	r3
10010502:	1c30      	adds	r0, r6, #0
10010504:	4b12      	ldr	r3, [pc, #72]	; (10010550 <gattm_att_get_value_req_handler+0x94>)
10010506:	4798      	blx	r3
10010508:	7833      	ldrb	r3, [r6, #0]
1001050a:	20e2      	movs	r0, #226	; 0xe2
1001050c:	2b00      	cmp	r3, #0
1001050e:	d112      	bne.n	10010536 <gattm_att_get_value_req_handler+0x7a>
10010510:	68a9      	ldr	r1, [r5, #8]
10010512:	9801      	ldr	r0, [sp, #4]
10010514:	784d      	ldrb	r5, [r1, #1]
10010516:	780b      	ldrb	r3, [r1, #0]
10010518:	78ca      	ldrb	r2, [r1, #3]
1001051a:	022d      	lsls	r5, r5, #8
1001051c:	431d      	orrs	r5, r3
1001051e:	788b      	ldrb	r3, [r1, #2]
10010520:	0212      	lsls	r2, r2, #8
10010522:	431a      	orrs	r2, r3
10010524:	803a      	strh	r2, [r7, #0]
10010526:	790e      	ldrb	r6, [r1, #4]
10010528:	4b0a      	ldr	r3, [pc, #40]	; (10010554 <gattm_att_get_value_req_handler+0x98>)
1001052a:	3105      	adds	r1, #5
1001052c:	4798      	blx	r3
1001052e:	20e2      	movs	r0, #226	; 0xe2
10010530:	42ac      	cmp	r4, r5
10010532:	d100      	bne.n	10010536 <gattm_att_get_value_req_handler+0x7a>
10010534:	1c30      	adds	r0, r6, #0
10010536:	b005      	add	sp, #20
10010538:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001053a:	46c0      	nop			; (mov r8, r8)
1001053c:	1001d3f8 	.word	0x1001d3f8
10010540:	1001d088 	.word	0x1001d088
10010544:	00000b0b 	.word	0x00000b0b
10010548:	1001d07c 	.word	0x1001d07c
1001054c:	1000ef35 	.word	0x1000ef35
10010550:	1000ef99 	.word	0x1000ef99
10010554:	10017d8f 	.word	0x10017d8f

10010558 <htpt_enable_rsp_handler>:
10010558:	780b      	ldrb	r3, [r1, #0]
1001055a:	7013      	strb	r3, [r2, #0]
1001055c:	784b      	ldrb	r3, [r1, #1]
1001055e:	7053      	strb	r3, [r2, #1]
10010560:	4770      	bx	lr

10010562 <htpt_temp_send_rsp_handler>:
10010562:	780b      	ldrb	r3, [r1, #0]
10010564:	7013      	strb	r3, [r2, #0]
10010566:	4770      	bx	lr

10010568 <htpt_meas_intv_upd_rsp_handler>:
10010568:	780b      	ldrb	r3, [r1, #0]
1001056a:	7013      	strb	r3, [r2, #0]
1001056c:	4770      	bx	lr

1001056e <htpt_meas_intv_chg_req_ind_handler>:
1001056e:	78cb      	ldrb	r3, [r1, #3]
10010570:	7889      	ldrb	r1, [r1, #2]
10010572:	021b      	lsls	r3, r3, #8
10010574:	430b      	orrs	r3, r1
10010576:	8013      	strh	r3, [r2, #0]
10010578:	4770      	bx	lr

1001057a <htpt_cfg_indntf_ind_handler>:
1001057a:	780b      	ldrb	r3, [r1, #0]
1001057c:	7013      	strb	r3, [r2, #0]
1001057e:	784b      	ldrb	r3, [r1, #1]
10010580:	7053      	strb	r3, [r2, #1]
10010582:	4770      	bx	lr

10010584 <atan2f>:
10010584:	b510      	push	{r4, lr}
10010586:	f000 f853 	bl	10010630 <__ieee754_atan2f>
1001058a:	bd10      	pop	{r4, pc}

1001058c <sqrtf>:
1001058c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001058e:	2600      	movs	r6, #0
10010590:	b08d      	sub	sp, #52	; 0x34
10010592:	1c04      	adds	r4, r0, #0
10010594:	f000 f8de 	bl	10010754 <__ieee754_sqrtf>
10010598:	4b23      	ldr	r3, [pc, #140]	; (10010628 <sqrtf+0x9c>)
1001059a:	1c05      	adds	r5, r0, #0
1001059c:	579e      	ldrsb	r6, [r3, r6]
1001059e:	1c73      	adds	r3, r6, #1
100105a0:	d00b      	beq.n	100105ba <sqrtf+0x2e>
100105a2:	1c21      	adds	r1, r4, #0
100105a4:	1c20      	adds	r0, r4, #0
100105a6:	f005 fb37 	bl	10015c18 <__aeabi_fcmpun>
100105aa:	1e07      	subs	r7, r0, #0
100105ac:	d105      	bne.n	100105ba <sqrtf+0x2e>
100105ae:	2100      	movs	r1, #0
100105b0:	1c20      	adds	r0, r4, #0
100105b2:	f004 fc25 	bl	10014e00 <__aeabi_fcmplt>
100105b6:	2800      	cmp	r0, #0
100105b8:	d102      	bne.n	100105c0 <sqrtf+0x34>
100105ba:	1c28      	adds	r0, r5, #0
100105bc:	b00d      	add	sp, #52	; 0x34
100105be:	bdf0      	pop	{r4, r5, r6, r7, pc}
100105c0:	2301      	movs	r3, #1
100105c2:	9302      	str	r3, [sp, #8]
100105c4:	4b19      	ldr	r3, [pc, #100]	; (1001062c <sqrtf+0xa0>)
100105c6:	1c20      	adds	r0, r4, #0
100105c8:	9303      	str	r3, [sp, #12]
100105ca:	970a      	str	r7, [sp, #40]	; 0x28
100105cc:	f007 f9b2 	bl	10017934 <__aeabi_f2d>
100105d0:	2200      	movs	r2, #0
100105d2:	9006      	str	r0, [sp, #24]
100105d4:	9107      	str	r1, [sp, #28]
100105d6:	9004      	str	r0, [sp, #16]
100105d8:	9105      	str	r1, [sp, #20]
100105da:	2300      	movs	r3, #0
100105dc:	2e00      	cmp	r6, #0
100105de:	d014      	beq.n	1001060a <sqrtf+0x7e>
100105e0:	0010      	movs	r0, r2
100105e2:	0019      	movs	r1, r3
100105e4:	f005 ff04 	bl	100163f0 <__aeabi_ddiv>
100105e8:	9008      	str	r0, [sp, #32]
100105ea:	9109      	str	r1, [sp, #36]	; 0x24
100105ec:	2e02      	cmp	r6, #2
100105ee:	d10e      	bne.n	1001060e <sqrtf+0x82>
100105f0:	f007 fb88 	bl	10017d04 <__errno>
100105f4:	2321      	movs	r3, #33	; 0x21
100105f6:	6003      	str	r3, [r0, #0]
100105f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100105fa:	9301      	str	r3, [sp, #4]
100105fc:	2b00      	cmp	r3, #0
100105fe:	d10c      	bne.n	1001061a <sqrtf+0x8e>
10010600:	9808      	ldr	r0, [sp, #32]
10010602:	9909      	ldr	r1, [sp, #36]	; 0x24
10010604:	f007 f9ea 	bl	100179dc <__aeabi_d2f>
10010608:	e7d8      	b.n	100105bc <sqrtf+0x30>
1001060a:	9208      	str	r2, [sp, #32]
1001060c:	9309      	str	r3, [sp, #36]	; 0x24
1001060e:	a802      	add	r0, sp, #8
10010610:	f000 f8fc 	bl	1001080c <matherr>
10010614:	2800      	cmp	r0, #0
10010616:	d1ef      	bne.n	100105f8 <sqrtf+0x6c>
10010618:	e7ea      	b.n	100105f0 <sqrtf+0x64>
1001061a:	f007 fb73 	bl	10017d04 <__errno>
1001061e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10010620:	9301      	str	r3, [sp, #4]
10010622:	6003      	str	r3, [r0, #0]
10010624:	e7ec      	b.n	10010600 <sqrtf+0x74>
10010626:	46c0      	nop			; (mov r8, r8)
10010628:	1001a4f4 	.word	0x1001a4f4
1001062c:	10019e90 	.word	0x10019e90

10010630 <__ieee754_atan2f>:
10010630:	b5f0      	push	{r4, r5, r6, r7, lr}
10010632:	004b      	lsls	r3, r1, #1
10010634:	4647      	mov	r7, r8
10010636:	1c0c      	adds	r4, r1, #0
10010638:	21ff      	movs	r1, #255	; 0xff
1001063a:	b480      	push	{r7}
1001063c:	085b      	lsrs	r3, r3, #1
1001063e:	05c9      	lsls	r1, r1, #23
10010640:	428b      	cmp	r3, r1
10010642:	dc15      	bgt.n	10010670 <__ieee754_atan2f+0x40>
10010644:	0042      	lsls	r2, r0, #1
10010646:	4680      	mov	r8, r0
10010648:	0852      	lsrs	r2, r2, #1
1001064a:	428a      	cmp	r2, r1
1001064c:	dc10      	bgt.n	10010670 <__ieee754_atan2f+0x40>
1001064e:	25fe      	movs	r5, #254	; 0xfe
10010650:	05ad      	lsls	r5, r5, #22
10010652:	42ac      	cmp	r4, r5
10010654:	d03e      	beq.n	100106d4 <__ieee754_atan2f+0xa4>
10010656:	2702      	movs	r7, #2
10010658:	17a5      	asrs	r5, r4, #30
1001065a:	403d      	ands	r5, r7
1001065c:	0fc7      	lsrs	r7, r0, #31
1001065e:	433d      	orrs	r5, r7
10010660:	2a00      	cmp	r2, #0
10010662:	d10c      	bne.n	1001067e <__ieee754_atan2f+0x4e>
10010664:	2d02      	cmp	r5, #2
10010666:	d031      	beq.n	100106cc <__ieee754_atan2f+0x9c>
10010668:	2d03      	cmp	r5, #3
1001066a:	d105      	bne.n	10010678 <__ieee754_atan2f+0x48>
1001066c:	4830      	ldr	r0, [pc, #192]	; (10010730 <__ieee754_atan2f+0x100>)
1001066e:	e003      	b.n	10010678 <__ieee754_atan2f+0x48>
10010670:	1c01      	adds	r1, r0, #0
10010672:	1c20      	adds	r0, r4, #0
10010674:	f004 fcf6 	bl	10015064 <__aeabi_fadd>
10010678:	bc04      	pop	{r2}
1001067a:	4690      	mov	r8, r2
1001067c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001067e:	2b00      	cmp	r3, #0
10010680:	d01d      	beq.n	100106be <__ieee754_atan2f+0x8e>
10010682:	428b      	cmp	r3, r1
10010684:	d029      	beq.n	100106da <__ieee754_atan2f+0xaa>
10010686:	428a      	cmp	r2, r1
10010688:	d019      	beq.n	100106be <__ieee754_atan2f+0x8e>
1001068a:	1ad3      	subs	r3, r2, r3
1001068c:	15db      	asrs	r3, r3, #23
1001068e:	2b3c      	cmp	r3, #60	; 0x3c
10010690:	dc1a      	bgt.n	100106c8 <__ieee754_atan2f+0x98>
10010692:	2c00      	cmp	r4, #0
10010694:	db3a      	blt.n	1001070c <__ieee754_atan2f+0xdc>
10010696:	1c21      	adds	r1, r4, #0
10010698:	f004 fe5a 	bl	10015350 <__aeabi_fdiv>
1001069c:	f000 f9da 	bl	10010a54 <fabsf>
100106a0:	f000 f8bc 	bl	1001081c <atanf>
100106a4:	2d01      	cmp	r5, #1
100106a6:	d02c      	beq.n	10010702 <__ieee754_atan2f+0xd2>
100106a8:	2d02      	cmp	r5, #2
100106aa:	d022      	beq.n	100106f2 <__ieee754_atan2f+0xc2>
100106ac:	2d00      	cmp	r5, #0
100106ae:	d0e3      	beq.n	10010678 <__ieee754_atan2f+0x48>
100106b0:	4920      	ldr	r1, [pc, #128]	; (10010734 <__ieee754_atan2f+0x104>)
100106b2:	f004 fcd7 	bl	10015064 <__aeabi_fadd>
100106b6:	4920      	ldr	r1, [pc, #128]	; (10010738 <__ieee754_atan2f+0x108>)
100106b8:	f005 f928 	bl	1001590c <__aeabi_fsub>
100106bc:	e7dc      	b.n	10010678 <__ieee754_atan2f+0x48>
100106be:	4643      	mov	r3, r8
100106c0:	2b00      	cmp	r3, #0
100106c2:	db05      	blt.n	100106d0 <__ieee754_atan2f+0xa0>
100106c4:	481d      	ldr	r0, [pc, #116]	; (1001073c <__ieee754_atan2f+0x10c>)
100106c6:	e7d7      	b.n	10010678 <__ieee754_atan2f+0x48>
100106c8:	481c      	ldr	r0, [pc, #112]	; (1001073c <__ieee754_atan2f+0x10c>)
100106ca:	e7eb      	b.n	100106a4 <__ieee754_atan2f+0x74>
100106cc:	481a      	ldr	r0, [pc, #104]	; (10010738 <__ieee754_atan2f+0x108>)
100106ce:	e7d3      	b.n	10010678 <__ieee754_atan2f+0x48>
100106d0:	481b      	ldr	r0, [pc, #108]	; (10010740 <__ieee754_atan2f+0x110>)
100106d2:	e7d1      	b.n	10010678 <__ieee754_atan2f+0x48>
100106d4:	f000 f8a2 	bl	1001081c <atanf>
100106d8:	e7ce      	b.n	10010678 <__ieee754_atan2f+0x48>
100106da:	429a      	cmp	r2, r3
100106dc:	d01a      	beq.n	10010714 <__ieee754_atan2f+0xe4>
100106de:	2d02      	cmp	r5, #2
100106e0:	d0f4      	beq.n	100106cc <__ieee754_atan2f+0x9c>
100106e2:	2d03      	cmp	r5, #3
100106e4:	d0c2      	beq.n	1001066c <__ieee754_atan2f+0x3c>
100106e6:	2000      	movs	r0, #0
100106e8:	2d01      	cmp	r5, #1
100106ea:	d1c5      	bne.n	10010678 <__ieee754_atan2f+0x48>
100106ec:	2080      	movs	r0, #128	; 0x80
100106ee:	0600      	lsls	r0, r0, #24
100106f0:	e7c2      	b.n	10010678 <__ieee754_atan2f+0x48>
100106f2:	4910      	ldr	r1, [pc, #64]	; (10010734 <__ieee754_atan2f+0x104>)
100106f4:	f004 fcb6 	bl	10015064 <__aeabi_fadd>
100106f8:	1c01      	adds	r1, r0, #0
100106fa:	480f      	ldr	r0, [pc, #60]	; (10010738 <__ieee754_atan2f+0x108>)
100106fc:	f005 f906 	bl	1001590c <__aeabi_fsub>
10010700:	e7ba      	b.n	10010678 <__ieee754_atan2f+0x48>
10010702:	2380      	movs	r3, #128	; 0x80
10010704:	061b      	lsls	r3, r3, #24
10010706:	469c      	mov	ip, r3
10010708:	4460      	add	r0, ip
1001070a:	e7b5      	b.n	10010678 <__ieee754_atan2f+0x48>
1001070c:	333c      	adds	r3, #60	; 0x3c
1001070e:	dac2      	bge.n	10010696 <__ieee754_atan2f+0x66>
10010710:	2000      	movs	r0, #0
10010712:	e7c7      	b.n	100106a4 <__ieee754_atan2f+0x74>
10010714:	2d02      	cmp	r5, #2
10010716:	d005      	beq.n	10010724 <__ieee754_atan2f+0xf4>
10010718:	2d03      	cmp	r5, #3
1001071a:	d007      	beq.n	1001072c <__ieee754_atan2f+0xfc>
1001071c:	2d01      	cmp	r5, #1
1001071e:	d003      	beq.n	10010728 <__ieee754_atan2f+0xf8>
10010720:	4808      	ldr	r0, [pc, #32]	; (10010744 <__ieee754_atan2f+0x114>)
10010722:	e7a9      	b.n	10010678 <__ieee754_atan2f+0x48>
10010724:	4808      	ldr	r0, [pc, #32]	; (10010748 <__ieee754_atan2f+0x118>)
10010726:	e7a7      	b.n	10010678 <__ieee754_atan2f+0x48>
10010728:	4808      	ldr	r0, [pc, #32]	; (1001074c <__ieee754_atan2f+0x11c>)
1001072a:	e7a5      	b.n	10010678 <__ieee754_atan2f+0x48>
1001072c:	4808      	ldr	r0, [pc, #32]	; (10010750 <__ieee754_atan2f+0x120>)
1001072e:	e7a3      	b.n	10010678 <__ieee754_atan2f+0x48>
10010730:	c0490fdb 	.word	0xc0490fdb
10010734:	33bbbd2e 	.word	0x33bbbd2e
10010738:	40490fdb 	.word	0x40490fdb
1001073c:	3fc90fdb 	.word	0x3fc90fdb
10010740:	bfc90fdb 	.word	0xbfc90fdb
10010744:	3f490fdb 	.word	0x3f490fdb
10010748:	4016cbe4 	.word	0x4016cbe4
1001074c:	bf490fdb 	.word	0xbf490fdb
10010750:	c016cbe4 	.word	0xc016cbe4

10010754 <__ieee754_sqrtf>:
10010754:	492b      	ldr	r1, [pc, #172]	; (10010804 <__ieee754_sqrtf+0xb0>)
10010756:	0042      	lsls	r2, r0, #1
10010758:	b570      	push	{r4, r5, r6, lr}
1001075a:	0003      	movs	r3, r0
1001075c:	1c04      	adds	r4, r0, #0
1001075e:	0852      	lsrs	r2, r2, #1
10010760:	428a      	cmp	r2, r1
10010762:	d83a      	bhi.n	100107da <__ieee754_sqrtf+0x86>
10010764:	2a00      	cmp	r2, #0
10010766:	d037      	beq.n	100107d8 <__ieee754_sqrtf+0x84>
10010768:	2800      	cmp	r0, #0
1001076a:	db3f      	blt.n	100107ec <__ieee754_sqrtf+0x98>
1001076c:	4926      	ldr	r1, [pc, #152]	; (10010808 <__ieee754_sqrtf+0xb4>)
1001076e:	15c0      	asrs	r0, r0, #23
10010770:	428a      	cmp	r2, r1
10010772:	d80b      	bhi.n	1001078c <__ieee754_sqrtf+0x38>
10010774:	3101      	adds	r1, #1
10010776:	4221      	tst	r1, r4
10010778:	d13f      	bne.n	100107fa <__ieee754_sqrtf+0xa6>
1001077a:	2200      	movs	r2, #0
1001077c:	000c      	movs	r4, r1
1001077e:	e000      	b.n	10010782 <__ieee754_sqrtf+0x2e>
10010780:	000a      	movs	r2, r1
10010782:	005b      	lsls	r3, r3, #1
10010784:	1c51      	adds	r1, r2, #1
10010786:	4223      	tst	r3, r4
10010788:	d0fa      	beq.n	10010780 <__ieee754_sqrtf+0x2c>
1001078a:	1a80      	subs	r0, r0, r2
1001078c:	2280      	movs	r2, #128	; 0x80
1001078e:	025b      	lsls	r3, r3, #9
10010790:	0a5b      	lsrs	r3, r3, #9
10010792:	0412      	lsls	r2, r2, #16
10010794:	387f      	subs	r0, #127	; 0x7f
10010796:	4313      	orrs	r3, r2
10010798:	07c2      	lsls	r2, r0, #31
1001079a:	d425      	bmi.n	100107e8 <__ieee754_sqrtf+0x94>
1001079c:	2280      	movs	r2, #128	; 0x80
1001079e:	2119      	movs	r1, #25
100107a0:	2500      	movs	r5, #0
100107a2:	2600      	movs	r6, #0
100107a4:	1040      	asrs	r0, r0, #1
100107a6:	005b      	lsls	r3, r3, #1
100107a8:	0452      	lsls	r2, r2, #17
100107aa:	18b4      	adds	r4, r6, r2
100107ac:	429c      	cmp	r4, r3
100107ae:	dc02      	bgt.n	100107b6 <__ieee754_sqrtf+0x62>
100107b0:	18a6      	adds	r6, r4, r2
100107b2:	1b1b      	subs	r3, r3, r4
100107b4:	18ad      	adds	r5, r5, r2
100107b6:	3901      	subs	r1, #1
100107b8:	005b      	lsls	r3, r3, #1
100107ba:	0852      	lsrs	r2, r2, #1
100107bc:	2900      	cmp	r1, #0
100107be:	d1f4      	bne.n	100107aa <__ieee754_sqrtf+0x56>
100107c0:	2b00      	cmp	r3, #0
100107c2:	d002      	beq.n	100107ca <__ieee754_sqrtf+0x76>
100107c4:	2301      	movs	r3, #1
100107c6:	402b      	ands	r3, r5
100107c8:	18ed      	adds	r5, r5, r3
100107ca:	23fc      	movs	r3, #252	; 0xfc
100107cc:	059b      	lsls	r3, r3, #22
100107ce:	469c      	mov	ip, r3
100107d0:	106d      	asrs	r5, r5, #1
100107d2:	4465      	add	r5, ip
100107d4:	05c0      	lsls	r0, r0, #23
100107d6:	1940      	adds	r0, r0, r5
100107d8:	bd70      	pop	{r4, r5, r6, pc}
100107da:	1c01      	adds	r1, r0, #0
100107dc:	f004 ff82 	bl	100156e4 <__aeabi_fmul>
100107e0:	1c21      	adds	r1, r4, #0
100107e2:	f004 fc3f 	bl	10015064 <__aeabi_fadd>
100107e6:	e7f7      	b.n	100107d8 <__ieee754_sqrtf+0x84>
100107e8:	005b      	lsls	r3, r3, #1
100107ea:	e7d7      	b.n	1001079c <__ieee754_sqrtf+0x48>
100107ec:	1c01      	adds	r1, r0, #0
100107ee:	f005 f88d 	bl	1001590c <__aeabi_fsub>
100107f2:	1c01      	adds	r1, r0, #0
100107f4:	f004 fdac 	bl	10015350 <__aeabi_fdiv>
100107f8:	e7ee      	b.n	100107d8 <__ieee754_sqrtf+0x84>
100107fa:	2201      	movs	r2, #1
100107fc:	4252      	negs	r2, r2
100107fe:	1a80      	subs	r0, r0, r2
10010800:	e7c4      	b.n	1001078c <__ieee754_sqrtf+0x38>
10010802:	46c0      	nop			; (mov r8, r8)
10010804:	7f7fffff 	.word	0x7f7fffff
10010808:	007fffff 	.word	0x007fffff

1001080c <matherr>:
1001080c:	2000      	movs	r0, #0
1001080e:	4770      	bx	lr

10010810 <nan>:
10010810:	2000      	movs	r0, #0
10010812:	4901      	ldr	r1, [pc, #4]	; (10010818 <nan+0x8>)
10010814:	4770      	bx	lr
10010816:	46c0      	nop			; (mov r8, r8)
10010818:	7ff80000 	.word	0x7ff80000

1001081c <atanf>:
1001081c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001081e:	4647      	mov	r7, r8
10010820:	4b75      	ldr	r3, [pc, #468]	; (100109f8 <atanf+0x1dc>)
10010822:	0044      	lsls	r4, r0, #1
10010824:	b480      	push	{r7}
10010826:	1c05      	adds	r5, r0, #0
10010828:	0007      	movs	r7, r0
1001082a:	0864      	lsrs	r4, r4, #1
1001082c:	429c      	cmp	r4, r3
1001082e:	dd0b      	ble.n	10010848 <atanf+0x2c>
10010830:	23ff      	movs	r3, #255	; 0xff
10010832:	05db      	lsls	r3, r3, #23
10010834:	429c      	cmp	r4, r3
10010836:	dd00      	ble.n	1001083a <atanf+0x1e>
10010838:	e072      	b.n	10010920 <atanf+0x104>
1001083a:	2800      	cmp	r0, #0
1001083c:	dc00      	bgt.n	10010840 <atanf+0x24>
1001083e:	e09d      	b.n	1001097c <atanf+0x160>
10010840:	486e      	ldr	r0, [pc, #440]	; (100109fc <atanf+0x1e0>)
10010842:	bc04      	pop	{r2}
10010844:	4690      	mov	r8, r2
10010846:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010848:	4b6d      	ldr	r3, [pc, #436]	; (10010a00 <atanf+0x1e4>)
1001084a:	429c      	cmp	r4, r3
1001084c:	dc79      	bgt.n	10010942 <atanf+0x126>
1001084e:	4b6d      	ldr	r3, [pc, #436]	; (10010a04 <atanf+0x1e8>)
10010850:	429c      	cmp	r4, r3
10010852:	dd69      	ble.n	10010928 <atanf+0x10c>
10010854:	2601      	movs	r6, #1
10010856:	4276      	negs	r6, r6
10010858:	1c29      	adds	r1, r5, #0
1001085a:	1c28      	adds	r0, r5, #0
1001085c:	f004 ff42 	bl	100156e4 <__aeabi_fmul>
10010860:	1c01      	adds	r1, r0, #0
10010862:	4680      	mov	r8, r0
10010864:	f004 ff3e 	bl	100156e4 <__aeabi_fmul>
10010868:	4967      	ldr	r1, [pc, #412]	; (10010a08 <atanf+0x1ec>)
1001086a:	1c04      	adds	r4, r0, #0
1001086c:	f004 ff3a 	bl	100156e4 <__aeabi_fmul>
10010870:	4966      	ldr	r1, [pc, #408]	; (10010a0c <atanf+0x1f0>)
10010872:	f004 fbf7 	bl	10015064 <__aeabi_fadd>
10010876:	1c21      	adds	r1, r4, #0
10010878:	f004 ff34 	bl	100156e4 <__aeabi_fmul>
1001087c:	4964      	ldr	r1, [pc, #400]	; (10010a10 <atanf+0x1f4>)
1001087e:	f004 fbf1 	bl	10015064 <__aeabi_fadd>
10010882:	1c21      	adds	r1, r4, #0
10010884:	f004 ff2e 	bl	100156e4 <__aeabi_fmul>
10010888:	4962      	ldr	r1, [pc, #392]	; (10010a14 <atanf+0x1f8>)
1001088a:	f004 fbeb 	bl	10015064 <__aeabi_fadd>
1001088e:	1c21      	adds	r1, r4, #0
10010890:	f004 ff28 	bl	100156e4 <__aeabi_fmul>
10010894:	4960      	ldr	r1, [pc, #384]	; (10010a18 <atanf+0x1fc>)
10010896:	f004 fbe5 	bl	10015064 <__aeabi_fadd>
1001089a:	1c21      	adds	r1, r4, #0
1001089c:	f004 ff22 	bl	100156e4 <__aeabi_fmul>
100108a0:	495e      	ldr	r1, [pc, #376]	; (10010a1c <atanf+0x200>)
100108a2:	f004 fbdf 	bl	10015064 <__aeabi_fadd>
100108a6:	4641      	mov	r1, r8
100108a8:	f004 ff1c 	bl	100156e4 <__aeabi_fmul>
100108ac:	495c      	ldr	r1, [pc, #368]	; (10010a20 <atanf+0x204>)
100108ae:	4680      	mov	r8, r0
100108b0:	1c20      	adds	r0, r4, #0
100108b2:	f004 ff17 	bl	100156e4 <__aeabi_fmul>
100108b6:	495b      	ldr	r1, [pc, #364]	; (10010a24 <atanf+0x208>)
100108b8:	f005 f828 	bl	1001590c <__aeabi_fsub>
100108bc:	1c21      	adds	r1, r4, #0
100108be:	f004 ff11 	bl	100156e4 <__aeabi_fmul>
100108c2:	4959      	ldr	r1, [pc, #356]	; (10010a28 <atanf+0x20c>)
100108c4:	f005 f822 	bl	1001590c <__aeabi_fsub>
100108c8:	1c21      	adds	r1, r4, #0
100108ca:	f004 ff0b 	bl	100156e4 <__aeabi_fmul>
100108ce:	4957      	ldr	r1, [pc, #348]	; (10010a2c <atanf+0x210>)
100108d0:	f005 f81c 	bl	1001590c <__aeabi_fsub>
100108d4:	1c21      	adds	r1, r4, #0
100108d6:	f004 ff05 	bl	100156e4 <__aeabi_fmul>
100108da:	4955      	ldr	r1, [pc, #340]	; (10010a30 <atanf+0x214>)
100108dc:	f005 f816 	bl	1001590c <__aeabi_fsub>
100108e0:	1c21      	adds	r1, r4, #0
100108e2:	f004 feff 	bl	100156e4 <__aeabi_fmul>
100108e6:	1c01      	adds	r1, r0, #0
100108e8:	1c73      	adds	r3, r6, #1
100108ea:	d049      	beq.n	10010980 <atanf+0x164>
100108ec:	4640      	mov	r0, r8
100108ee:	f004 fbb9 	bl	10015064 <__aeabi_fadd>
100108f2:	1c29      	adds	r1, r5, #0
100108f4:	f004 fef6 	bl	100156e4 <__aeabi_fmul>
100108f8:	4b4e      	ldr	r3, [pc, #312]	; (10010a34 <atanf+0x218>)
100108fa:	00b6      	lsls	r6, r6, #2
100108fc:	58f1      	ldr	r1, [r6, r3]
100108fe:	f005 f805 	bl	1001590c <__aeabi_fsub>
10010902:	1c29      	adds	r1, r5, #0
10010904:	f005 f802 	bl	1001590c <__aeabi_fsub>
10010908:	4b4b      	ldr	r3, [pc, #300]	; (10010a38 <atanf+0x21c>)
1001090a:	1c01      	adds	r1, r0, #0
1001090c:	58f0      	ldr	r0, [r6, r3]
1001090e:	f004 fffd 	bl	1001590c <__aeabi_fsub>
10010912:	2f00      	cmp	r7, #0
10010914:	da95      	bge.n	10010842 <atanf+0x26>
10010916:	2380      	movs	r3, #128	; 0x80
10010918:	061b      	lsls	r3, r3, #24
1001091a:	469c      	mov	ip, r3
1001091c:	4460      	add	r0, ip
1001091e:	e790      	b.n	10010842 <atanf+0x26>
10010920:	1c01      	adds	r1, r0, #0
10010922:	f004 fb9f 	bl	10015064 <__aeabi_fadd>
10010926:	e78c      	b.n	10010842 <atanf+0x26>
10010928:	4944      	ldr	r1, [pc, #272]	; (10010a3c <atanf+0x220>)
1001092a:	f004 fb9b 	bl	10015064 <__aeabi_fadd>
1001092e:	21fe      	movs	r1, #254	; 0xfe
10010930:	0589      	lsls	r1, r1, #22
10010932:	f004 fa79 	bl	10014e28 <__aeabi_fcmpgt>
10010936:	0003      	movs	r3, r0
10010938:	1c28      	adds	r0, r5, #0
1001093a:	2b00      	cmp	r3, #0
1001093c:	d000      	beq.n	10010940 <atanf+0x124>
1001093e:	e780      	b.n	10010842 <atanf+0x26>
10010940:	e788      	b.n	10010854 <atanf+0x38>
10010942:	f000 f887 	bl	10010a54 <fabsf>
10010946:	4b3e      	ldr	r3, [pc, #248]	; (10010a40 <atanf+0x224>)
10010948:	1c05      	adds	r5, r0, #0
1001094a:	429c      	cmp	r4, r3
1001094c:	dc23      	bgt.n	10010996 <atanf+0x17a>
1001094e:	4b3d      	ldr	r3, [pc, #244]	; (10010a44 <atanf+0x228>)
10010950:	429c      	cmp	r4, r3
10010952:	dc3f      	bgt.n	100109d4 <atanf+0x1b8>
10010954:	1c01      	adds	r1, r0, #0
10010956:	f004 fb85 	bl	10015064 <__aeabi_fadd>
1001095a:	21fe      	movs	r1, #254	; 0xfe
1001095c:	0589      	lsls	r1, r1, #22
1001095e:	f004 ffd5 	bl	1001590c <__aeabi_fsub>
10010962:	2180      	movs	r1, #128	; 0x80
10010964:	1c04      	adds	r4, r0, #0
10010966:	05c9      	lsls	r1, r1, #23
10010968:	1c28      	adds	r0, r5, #0
1001096a:	f004 fb7b 	bl	10015064 <__aeabi_fadd>
1001096e:	1c01      	adds	r1, r0, #0
10010970:	1c20      	adds	r0, r4, #0
10010972:	f004 fced 	bl	10015350 <__aeabi_fdiv>
10010976:	2600      	movs	r6, #0
10010978:	1c05      	adds	r5, r0, #0
1001097a:	e76d      	b.n	10010858 <atanf+0x3c>
1001097c:	4832      	ldr	r0, [pc, #200]	; (10010a48 <atanf+0x22c>)
1001097e:	e760      	b.n	10010842 <atanf+0x26>
10010980:	4640      	mov	r0, r8
10010982:	f004 fb6f 	bl	10015064 <__aeabi_fadd>
10010986:	1c29      	adds	r1, r5, #0
10010988:	f004 feac 	bl	100156e4 <__aeabi_fmul>
1001098c:	1c01      	adds	r1, r0, #0
1001098e:	1c28      	adds	r0, r5, #0
10010990:	f004 ffbc 	bl	1001590c <__aeabi_fsub>
10010994:	e755      	b.n	10010842 <atanf+0x26>
10010996:	4b2d      	ldr	r3, [pc, #180]	; (10010a4c <atanf+0x230>)
10010998:	429c      	cmp	r4, r3
1001099a:	dc14      	bgt.n	100109c6 <atanf+0x1aa>
1001099c:	21ff      	movs	r1, #255	; 0xff
1001099e:	0589      	lsls	r1, r1, #22
100109a0:	f004 ffb4 	bl	1001590c <__aeabi_fsub>
100109a4:	21ff      	movs	r1, #255	; 0xff
100109a6:	1c04      	adds	r4, r0, #0
100109a8:	0589      	lsls	r1, r1, #22
100109aa:	1c28      	adds	r0, r5, #0
100109ac:	f004 fe9a 	bl	100156e4 <__aeabi_fmul>
100109b0:	21fe      	movs	r1, #254	; 0xfe
100109b2:	0589      	lsls	r1, r1, #22
100109b4:	f004 fb56 	bl	10015064 <__aeabi_fadd>
100109b8:	1c01      	adds	r1, r0, #0
100109ba:	1c20      	adds	r0, r4, #0
100109bc:	f004 fcc8 	bl	10015350 <__aeabi_fdiv>
100109c0:	2602      	movs	r6, #2
100109c2:	1c05      	adds	r5, r0, #0
100109c4:	e748      	b.n	10010858 <atanf+0x3c>
100109c6:	1c01      	adds	r1, r0, #0
100109c8:	4821      	ldr	r0, [pc, #132]	; (10010a50 <atanf+0x234>)
100109ca:	f004 fcc1 	bl	10015350 <__aeabi_fdiv>
100109ce:	2603      	movs	r6, #3
100109d0:	1c05      	adds	r5, r0, #0
100109d2:	e741      	b.n	10010858 <atanf+0x3c>
100109d4:	21fe      	movs	r1, #254	; 0xfe
100109d6:	0589      	lsls	r1, r1, #22
100109d8:	f004 ff98 	bl	1001590c <__aeabi_fsub>
100109dc:	21fe      	movs	r1, #254	; 0xfe
100109de:	1c04      	adds	r4, r0, #0
100109e0:	0589      	lsls	r1, r1, #22
100109e2:	1c28      	adds	r0, r5, #0
100109e4:	f004 fb3e 	bl	10015064 <__aeabi_fadd>
100109e8:	1c01      	adds	r1, r0, #0
100109ea:	1c20      	adds	r0, r4, #0
100109ec:	f004 fcb0 	bl	10015350 <__aeabi_fdiv>
100109f0:	2601      	movs	r6, #1
100109f2:	1c05      	adds	r5, r0, #0
100109f4:	e730      	b.n	10010858 <atanf+0x3c>
100109f6:	46c0      	nop			; (mov r8, r8)
100109f8:	507fffff 	.word	0x507fffff
100109fc:	3fc90fdb 	.word	0x3fc90fdb
10010a00:	3edfffff 	.word	0x3edfffff
10010a04:	30ffffff 	.word	0x30ffffff
10010a08:	3c8569d7 	.word	0x3c8569d7
10010a0c:	3d4bda59 	.word	0x3d4bda59
10010a10:	3d886b35 	.word	0x3d886b35
10010a14:	3dba2e6e 	.word	0x3dba2e6e
10010a18:	3e124925 	.word	0x3e124925
10010a1c:	3eaaaaab 	.word	0x3eaaaaab
10010a20:	bd15a221 	.word	0xbd15a221
10010a24:	3d6ef16b 	.word	0x3d6ef16b
10010a28:	3d9d8795 	.word	0x3d9d8795
10010a2c:	3de38e38 	.word	0x3de38e38
10010a30:	3e4ccccd 	.word	0x3e4ccccd
10010a34:	10019e98 	.word	0x10019e98
10010a38:	10019ea8 	.word	0x10019ea8
10010a3c:	7149f2ca 	.word	0x7149f2ca
10010a40:	3f97ffff 	.word	0x3f97ffff
10010a44:	3f2fffff 	.word	0x3f2fffff
10010a48:	bfc90fdb 	.word	0xbfc90fdb
10010a4c:	401bffff 	.word	0x401bffff
10010a50:	bf800000 	.word	0xbf800000

10010a54 <fabsf>:
10010a54:	0040      	lsls	r0, r0, #1
10010a56:	0840      	lsrs	r0, r0, #1
10010a58:	4770      	bx	lr
10010a5a:	46c0      	nop			; (mov r8, r8)

10010a5c <inv_fast_nomot_parameter.part.3>:
10010a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
10010a5e:	2318      	movs	r3, #24
10010a60:	4644      	mov	r4, r8
10010a62:	4680      	mov	r8, r0
10010a64:	4443      	add	r3, r8
10010a66:	465f      	mov	r7, fp
10010a68:	469b      	mov	fp, r3
10010a6a:	2300      	movs	r3, #0
10010a6c:	4656      	mov	r6, sl
10010a6e:	464d      	mov	r5, r9
10010a70:	469a      	mov	sl, r3
10010a72:	4699      	mov	r9, r3
10010a74:	b4f0      	push	{r4, r5, r6, r7}
10010a76:	b08b      	sub	sp, #44	; 0x2c
10010a78:	4643      	mov	r3, r8
10010a7a:	681e      	ldr	r6, [r3, #0]
10010a7c:	685f      	ldr	r7, [r3, #4]
10010a7e:	69dc      	ldr	r4, [r3, #28]
10010a80:	699b      	ldr	r3, [r3, #24]
10010a82:	1c32      	adds	r2, r6, #0
10010a84:	1c25      	adds	r5, r4, #0
10010a86:	1c30      	adds	r0, r6, #0
10010a88:	1c1c      	adds	r4, r3, #0
10010a8a:	1c39      	adds	r1, r7, #0
10010a8c:	1c3b      	adds	r3, r7, #0
10010a8e:	f004 fa03 	bl	10014e98 <__aeabi_lmul>
10010a92:	1c22      	adds	r2, r4, #0
10010a94:	9002      	str	r0, [sp, #8]
10010a96:	9103      	str	r1, [sp, #12]
10010a98:	1c2b      	adds	r3, r5, #0
10010a9a:	1c20      	adds	r0, r4, #0
10010a9c:	1c29      	adds	r1, r5, #0
10010a9e:	9408      	str	r4, [sp, #32]
10010aa0:	9509      	str	r5, [sp, #36]	; 0x24
10010aa2:	f004 f9f9 	bl	10014e98 <__aeabi_lmul>
10010aa6:	1c04      	adds	r4, r0, #0
10010aa8:	1c0d      	adds	r5, r1, #0
10010aaa:	0f83      	lsrs	r3, r0, #30
10010aac:	0089      	lsls	r1, r1, #2
10010aae:	4319      	orrs	r1, r3
10010ab0:	9105      	str	r1, [sp, #20]
10010ab2:	0081      	lsls	r1, r0, #2
10010ab4:	9104      	str	r1, [sp, #16]
10010ab6:	9904      	ldr	r1, [sp, #16]
10010ab8:	9a05      	ldr	r2, [sp, #20]
10010aba:	1a64      	subs	r4, r4, r1
10010abc:	4195      	sbcs	r5, r2
10010abe:	4641      	mov	r1, r8
10010ac0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
10010ac2:	6c89      	ldr	r1, [r1, #72]	; 0x48
10010ac4:	1864      	adds	r4, r4, r1
10010ac6:	4155      	adcs	r5, r2
10010ac8:	9802      	ldr	r0, [sp, #8]
10010aca:	9903      	ldr	r1, [sp, #12]
10010acc:	1c02      	adds	r2, r0, #0
10010ace:	1c0b      	adds	r3, r1, #0
10010ad0:	1812      	adds	r2, r2, r0
10010ad2:	414b      	adcs	r3, r1
10010ad4:	1c30      	adds	r0, r6, #0
10010ad6:	1c39      	adds	r1, r7, #0
10010ad8:	f004 f9de 	bl	10014e98 <__aeabi_lmul>
10010adc:	1c02      	adds	r2, r0, #0
10010ade:	1c0b      	adds	r3, r1, #0
10010ae0:	1c30      	adds	r0, r6, #0
10010ae2:	1c39      	adds	r1, r7, #0
10010ae4:	f004 f9d8 	bl	10014e98 <__aeabi_lmul>
10010ae8:	9a08      	ldr	r2, [sp, #32]
10010aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
10010aec:	1824      	adds	r4, r4, r0
10010aee:	414d      	adcs	r5, r1
10010af0:	9802      	ldr	r0, [sp, #8]
10010af2:	9903      	ldr	r1, [sp, #12]
10010af4:	1a12      	subs	r2, r2, r0
10010af6:	418b      	sbcs	r3, r1
10010af8:	1c10      	adds	r0, r2, #0
10010afa:	1c19      	adds	r1, r3, #0
10010afc:	1880      	adds	r0, r0, r2
10010afe:	4159      	adcs	r1, r3
10010b00:	1812      	adds	r2, r2, r0
10010b02:	414b      	adcs	r3, r1
10010b04:	9802      	ldr	r0, [sp, #8]
10010b06:	9903      	ldr	r1, [sp, #12]
10010b08:	1812      	adds	r2, r2, r0
10010b0a:	414b      	adcs	r3, r1
10010b0c:	1c30      	adds	r0, r6, #0
10010b0e:	1c39      	adds	r1, r7, #0
10010b10:	f004 f9c2 	bl	10014e98 <__aeabi_lmul>
10010b14:	4643      	mov	r3, r8
10010b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
10010b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10010b1a:	1a80      	subs	r0, r0, r2
10010b1c:	4199      	sbcs	r1, r3
10010b1e:	2204      	movs	r2, #4
10010b20:	4252      	negs	r2, r2
10010b22:	17d3      	asrs	r3, r2, #31
10010b24:	f004 f9b8 	bl	10014e98 <__aeabi_lmul>
10010b28:	1c02      	adds	r2, r0, #0
10010b2a:	1c0b      	adds	r3, r1, #0
10010b2c:	1c30      	adds	r0, r6, #0
10010b2e:	1c39      	adds	r1, r7, #0
10010b30:	f004 f9b2 	bl	10014e98 <__aeabi_lmul>
10010b34:	1824      	adds	r4, r4, r0
10010b36:	414d      	adcs	r5, r1
10010b38:	17eb      	asrs	r3, r5, #31
10010b3a:	9306      	str	r3, [sp, #24]
10010b3c:	9307      	str	r3, [sp, #28]
10010b3e:	9906      	ldr	r1, [sp, #24]
10010b40:	9a07      	ldr	r2, [sp, #28]
10010b42:	1c0b      	adds	r3, r1, #0
10010b44:	4063      	eors	r3, r4
10010b46:	9300      	str	r3, [sp, #0]
10010b48:	1c13      	adds	r3, r2, #0
10010b4a:	406b      	eors	r3, r5
10010b4c:	9301      	str	r3, [sp, #4]
10010b4e:	9b00      	ldr	r3, [sp, #0]
10010b50:	9c01      	ldr	r4, [sp, #4]
10010b52:	1a5b      	subs	r3, r3, r1
10010b54:	4194      	sbcs	r4, r2
10010b56:	9300      	str	r3, [sp, #0]
10010b58:	9401      	str	r4, [sp, #4]
10010b5a:	454c      	cmp	r4, r9
10010b5c:	dc28      	bgt.n	10010bb0 <inv_fast_nomot_parameter.part.3+0x154>
10010b5e:	9b01      	ldr	r3, [sp, #4]
10010b60:	454b      	cmp	r3, r9
10010b62:	d022      	beq.n	10010baa <inv_fast_nomot_parameter.part.3+0x14e>
10010b64:	2308      	movs	r3, #8
10010b66:	469c      	mov	ip, r3
10010b68:	44e0      	add	r8, ip
10010b6a:	45d8      	cmp	r8, fp
10010b6c:	d000      	beq.n	10010b70 <inv_fast_nomot_parameter.part.3+0x114>
10010b6e:	e783      	b.n	10010a78 <inv_fast_nomot_parameter.part.3+0x1c>
10010b70:	4649      	mov	r1, r9
10010b72:	4650      	mov	r0, sl
10010b74:	f004 fa28 	bl	10014fc8 <__aeabi_l2f>
10010b78:	4b13      	ldr	r3, [pc, #76]	; (10010bc8 <inv_fast_nomot_parameter.part.3+0x16c>)
10010b7a:	6b99      	ldr	r1, [r3, #56]	; 0x38
10010b7c:	f004 fbe8 	bl	10015350 <__aeabi_fdiv>
10010b80:	f004 f9ec 	bl	10014f5c <__aeabi_f2lz>
10010b84:	2383      	movs	r3, #131	; 0x83
10010b86:	4a11      	ldr	r2, [pc, #68]	; (10010bcc <inv_fast_nomot_parameter.part.3+0x170>)
10010b88:	009b      	lsls	r3, r3, #2
10010b8a:	58d3      	ldr	r3, [r2, r3]
10010b8c:	2220      	movs	r2, #32
10010b8e:	009b      	lsls	r3, r3, #2
10010b90:	4252      	negs	r2, r2
10010b92:	189a      	adds	r2, r3, r2
10010b94:	d411      	bmi.n	10010bba <inv_fast_nomot_parameter.part.3+0x15e>
10010b96:	1c08      	adds	r0, r1, #0
10010b98:	4110      	asrs	r0, r2
10010b9a:	4119      	asrs	r1, r3
10010b9c:	b00b      	add	sp, #44	; 0x2c
10010b9e:	bc3c      	pop	{r2, r3, r4, r5}
10010ba0:	4690      	mov	r8, r2
10010ba2:	4699      	mov	r9, r3
10010ba4:	46a2      	mov	sl, r4
10010ba6:	46ab      	mov	fp, r5
10010ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010baa:	9b00      	ldr	r3, [sp, #0]
10010bac:	4553      	cmp	r3, sl
10010bae:	d9d9      	bls.n	10010b64 <inv_fast_nomot_parameter.part.3+0x108>
10010bb0:	9b00      	ldr	r3, [sp, #0]
10010bb2:	9c01      	ldr	r4, [sp, #4]
10010bb4:	469a      	mov	sl, r3
10010bb6:	46a1      	mov	r9, r4
10010bb8:	e7d4      	b.n	10010b64 <inv_fast_nomot_parameter.part.3+0x108>
10010bba:	2220      	movs	r2, #32
10010bbc:	1c0c      	adds	r4, r1, #0
10010bbe:	1ad2      	subs	r2, r2, r3
10010bc0:	4094      	lsls	r4, r2
10010bc2:	40d8      	lsrs	r0, r3
10010bc4:	4320      	orrs	r0, r4
10010bc6:	e7e8      	b.n	10010b9a <inv_fast_nomot_parameter.part.3+0x13e>
10010bc8:	1001c0c0 	.word	0x1001c0c0
10010bcc:	1001d5f8 	.word	0x1001d5f8

10010bd0 <inv_init_maxmin>:
10010bd0:	07c3      	lsls	r3, r0, #31
10010bd2:	d50a      	bpl.n	10010bea <inv_init_maxmin+0x1a>
10010bd4:	22c0      	movs	r2, #192	; 0xc0
10010bd6:	4b19      	ldr	r3, [pc, #100]	; (10010c3c <inv_init_maxmin+0x6c>)
10010bd8:	0612      	lsls	r2, r2, #24
10010bda:	669a      	str	r2, [r3, #104]	; 0x68
10010bdc:	66da      	str	r2, [r3, #108]	; 0x6c
10010bde:	671a      	str	r2, [r3, #112]	; 0x70
10010be0:	2280      	movs	r2, #128	; 0x80
10010be2:	05d2      	lsls	r2, r2, #23
10010be4:	675a      	str	r2, [r3, #116]	; 0x74
10010be6:	679a      	str	r2, [r3, #120]	; 0x78
10010be8:	67da      	str	r2, [r3, #124]	; 0x7c
10010bea:	0783      	lsls	r3, r0, #30
10010bec:	d511      	bpl.n	10010c12 <inv_init_maxmin+0x42>
10010bee:	22c0      	movs	r2, #192	; 0xc0
10010bf0:	2180      	movs	r1, #128	; 0x80
10010bf2:	4b12      	ldr	r3, [pc, #72]	; (10010c3c <inv_init_maxmin+0x6c>)
10010bf4:	0612      	lsls	r2, r2, #24
10010bf6:	0049      	lsls	r1, r1, #1
10010bf8:	505a      	str	r2, [r3, r1]
10010bfa:	3104      	adds	r1, #4
10010bfc:	505a      	str	r2, [r3, r1]
10010bfe:	3104      	adds	r1, #4
10010c00:	505a      	str	r2, [r3, r1]
10010c02:	2280      	movs	r2, #128	; 0x80
10010c04:	3104      	adds	r1, #4
10010c06:	05d2      	lsls	r2, r2, #23
10010c08:	505a      	str	r2, [r3, r1]
10010c0a:	3104      	adds	r1, #4
10010c0c:	505a      	str	r2, [r3, r1]
10010c0e:	3104      	adds	r1, #4
10010c10:	505a      	str	r2, [r3, r1]
10010c12:	0743      	lsls	r3, r0, #29
10010c14:	d511      	bpl.n	10010c3a <inv_init_maxmin+0x6a>
10010c16:	22c0      	movs	r2, #192	; 0xc0
10010c18:	21cc      	movs	r1, #204	; 0xcc
10010c1a:	4b08      	ldr	r3, [pc, #32]	; (10010c3c <inv_init_maxmin+0x6c>)
10010c1c:	0612      	lsls	r2, r2, #24
10010c1e:	0049      	lsls	r1, r1, #1
10010c20:	505a      	str	r2, [r3, r1]
10010c22:	3104      	adds	r1, #4
10010c24:	505a      	str	r2, [r3, r1]
10010c26:	3104      	adds	r1, #4
10010c28:	505a      	str	r2, [r3, r1]
10010c2a:	2280      	movs	r2, #128	; 0x80
10010c2c:	3104      	adds	r1, #4
10010c2e:	05d2      	lsls	r2, r2, #23
10010c30:	505a      	str	r2, [r3, r1]
10010c32:	3104      	adds	r1, #4
10010c34:	505a      	str	r2, [r3, r1]
10010c36:	3104      	adds	r1, #4
10010c38:	505a      	str	r2, [r3, r1]
10010c3a:	4770      	bx	lr
10010c3c:	1001d5f8 	.word	0x1001d5f8

10010c40 <inv_reset_packet>:
10010c40:	b510      	push	{r4, lr}
10010c42:	4c08      	ldr	r4, [pc, #32]	; (10010c64 <inv_reset_packet+0x24>)
10010c44:	2100      	movs	r1, #0
10010c46:	1c20      	adds	r0, r4, #0
10010c48:	2298      	movs	r2, #152	; 0x98
10010c4a:	f007 f8be 	bl	10017dca <memset>
10010c4e:	1c20      	adds	r0, r4, #0
10010c50:	3031      	adds	r0, #49	; 0x31
10010c52:	2100      	movs	r1, #0
10010c54:	2298      	movs	r2, #152	; 0x98
10010c56:	30ff      	adds	r0, #255	; 0xff
10010c58:	f007 f8b7 	bl	10017dca <memset>
10010c5c:	2005      	movs	r0, #5
10010c5e:	f7ff ffb7 	bl	10010bd0 <inv_init_maxmin>
10010c62:	bd10      	pop	{r4, pc}
10010c64:	1001d600 	.word	0x1001d600

10010c68 <inv_start_fast_nomot>:
10010c68:	2298      	movs	r2, #152	; 0x98
10010c6a:	b510      	push	{r4, lr}
10010c6c:	4c0c      	ldr	r4, [pc, #48]	; (10010ca0 <inv_start_fast_nomot+0x38>)
10010c6e:	2100      	movs	r1, #0
10010c70:	0092      	lsls	r2, r2, #2
10010c72:	1c20      	adds	r0, r4, #0
10010c74:	f007 f8a9 	bl	10017dca <memset>
10010c78:	2007      	movs	r0, #7
10010c7a:	f7ff ffa9 	bl	10010bd0 <inv_init_maxmin>
10010c7e:	22f2      	movs	r2, #242	; 0xf2
10010c80:	2301      	movs	r3, #1
10010c82:	0052      	lsls	r2, r2, #1
10010c84:	50a3      	str	r3, [r4, r2]
10010c86:	3204      	adds	r2, #4
10010c88:	54a3      	strb	r3, [r4, r2]
10010c8a:	2001      	movs	r0, #1
10010c8c:	2103      	movs	r1, #3
10010c8e:	2200      	movs	r2, #0
10010c90:	f7f9 f85a 	bl	10009d48 <inv_set_message>
10010c94:	2164      	movs	r1, #100	; 0x64
10010c96:	2207      	movs	r2, #7
10010c98:	4802      	ldr	r0, [pc, #8]	; (10010ca4 <inv_start_fast_nomot+0x3c>)
10010c9a:	f7f8 ff29 	bl	10009af0 <inv_register_data_cb>
10010c9e:	bd10      	pop	{r4, pc}
10010ca0:	1001d5f8 	.word	0x1001d5f8
10010ca4:	100113c1 	.word	0x100113c1

10010ca8 <inv_fast_nomot_parameter>:
10010ca8:	6f81      	ldr	r1, [r0, #120]	; 0x78
10010caa:	b508      	push	{r3, lr}
10010cac:	2200      	movs	r2, #0
10010cae:	2300      	movs	r3, #0
10010cb0:	2900      	cmp	r1, #0
10010cb2:	d003      	beq.n	10010cbc <inv_fast_nomot_parameter+0x14>
10010cb4:	f7ff fed2 	bl	10010a5c <inv_fast_nomot_parameter.part.3>
10010cb8:	1c02      	adds	r2, r0, #0
10010cba:	1c0b      	adds	r3, r1, #0
10010cbc:	1c10      	adds	r0, r2, #0
10010cbe:	1c19      	adds	r1, r3, #0
10010cc0:	bd08      	pop	{r3, pc}
10010cc2:	46c0      	nop			; (mov r8, r8)

10010cc4 <inv_fast_nomot_parameter_3rd>:
10010cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
10010cc6:	465f      	mov	r7, fp
10010cc8:	4656      	mov	r6, sl
10010cca:	464d      	mov	r5, r9
10010ccc:	4644      	mov	r4, r8
10010cce:	b4f0      	push	{r4, r5, r6, r7}
10010cd0:	6f83      	ldr	r3, [r0, #120]	; 0x78
10010cd2:	b085      	sub	sp, #20
10010cd4:	2b00      	cmp	r3, #0
10010cd6:	d063      	beq.n	10010da0 <inv_fast_nomot_parameter_3rd+0xdc>
10010cd8:	4680      	mov	r8, r0
10010cda:	2318      	movs	r3, #24
10010cdc:	4443      	add	r3, r8
10010cde:	469b      	mov	fp, r3
10010ce0:	2300      	movs	r3, #0
10010ce2:	469a      	mov	sl, r3
10010ce4:	4699      	mov	r9, r3
10010ce6:	4643      	mov	r3, r8
10010ce8:	681c      	ldr	r4, [r3, #0]
10010cea:	685d      	ldr	r5, [r3, #4]
10010cec:	1c22      	adds	r2, r4, #0
10010cee:	1c20      	adds	r0, r4, #0
10010cf0:	1c2b      	adds	r3, r5, #0
10010cf2:	1c29      	adds	r1, r5, #0
10010cf4:	f004 f8d0 	bl	10014e98 <__aeabi_lmul>
10010cf8:	4643      	mov	r3, r8
10010cfa:	9002      	str	r0, [sp, #8]
10010cfc:	9103      	str	r1, [sp, #12]
10010cfe:	6998      	ldr	r0, [r3, #24]
10010d00:	69d9      	ldr	r1, [r3, #28]
10010d02:	9a02      	ldr	r2, [sp, #8]
10010d04:	9b03      	ldr	r3, [sp, #12]
10010d06:	1a80      	subs	r0, r0, r2
10010d08:	4199      	sbcs	r1, r3
10010d0a:	1c02      	adds	r2, r0, #0
10010d0c:	1c0b      	adds	r3, r1, #0
10010d0e:	1812      	adds	r2, r2, r0
10010d10:	414b      	adcs	r3, r1
10010d12:	1880      	adds	r0, r0, r2
10010d14:	4159      	adcs	r1, r3
10010d16:	9a02      	ldr	r2, [sp, #8]
10010d18:	9b03      	ldr	r3, [sp, #12]
10010d1a:	1880      	adds	r0, r0, r2
10010d1c:	4159      	adcs	r1, r3
10010d1e:	1c22      	adds	r2, r4, #0
10010d20:	1c2b      	adds	r3, r5, #0
10010d22:	f004 f8b9 	bl	10014e98 <__aeabi_lmul>
10010d26:	4643      	mov	r3, r8
10010d28:	6b5c      	ldr	r4, [r3, #52]	; 0x34
10010d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10010d2c:	1ac0      	subs	r0, r0, r3
10010d2e:	41a1      	sbcs	r1, r4
10010d30:	17cb      	asrs	r3, r1, #31
10010d32:	9300      	str	r3, [sp, #0]
10010d34:	9301      	str	r3, [sp, #4]
10010d36:	9b00      	ldr	r3, [sp, #0]
10010d38:	9c01      	ldr	r4, [sp, #4]
10010d3a:	1c1a      	adds	r2, r3, #0
10010d3c:	4042      	eors	r2, r0
10010d3e:	1c16      	adds	r6, r2, #0
10010d40:	1c22      	adds	r2, r4, #0
10010d42:	404a      	eors	r2, r1
10010d44:	1c17      	adds	r7, r2, #0
10010d46:	1af6      	subs	r6, r6, r3
10010d48:	41a7      	sbcs	r7, r4
10010d4a:	454f      	cmp	r7, r9
10010d4c:	dc25      	bgt.n	10010d9a <inv_fast_nomot_parameter_3rd+0xd6>
10010d4e:	d022      	beq.n	10010d96 <inv_fast_nomot_parameter_3rd+0xd2>
10010d50:	2308      	movs	r3, #8
10010d52:	469c      	mov	ip, r3
10010d54:	44e0      	add	r8, ip
10010d56:	45d8      	cmp	r8, fp
10010d58:	d1c5      	bne.n	10010ce6 <inv_fast_nomot_parameter_3rd+0x22>
10010d5a:	4649      	mov	r1, r9
10010d5c:	4650      	mov	r0, sl
10010d5e:	f004 f933 	bl	10014fc8 <__aeabi_l2f>
10010d62:	4b14      	ldr	r3, [pc, #80]	; (10010db4 <inv_fast_nomot_parameter_3rd+0xf0>)
10010d64:	6b99      	ldr	r1, [r3, #56]	; 0x38
10010d66:	f004 faf3 	bl	10015350 <__aeabi_fdiv>
10010d6a:	f004 f8f7 	bl	10014f5c <__aeabi_f2lz>
10010d6e:	2383      	movs	r3, #131	; 0x83
10010d70:	4a11      	ldr	r2, [pc, #68]	; (10010db8 <inv_fast_nomot_parameter_3rd+0xf4>)
10010d72:	009b      	lsls	r3, r3, #2
10010d74:	58d3      	ldr	r3, [r2, r3]
10010d76:	005a      	lsls	r2, r3, #1
10010d78:	18d2      	adds	r2, r2, r3
10010d7a:	2320      	movs	r3, #32
10010d7c:	425b      	negs	r3, r3
10010d7e:	18d3      	adds	r3, r2, r3
10010d80:	d411      	bmi.n	10010da6 <inv_fast_nomot_parameter_3rd+0xe2>
10010d82:	1c08      	adds	r0, r1, #0
10010d84:	4118      	asrs	r0, r3
10010d86:	4111      	asrs	r1, r2
10010d88:	b005      	add	sp, #20
10010d8a:	bc3c      	pop	{r2, r3, r4, r5}
10010d8c:	4690      	mov	r8, r2
10010d8e:	4699      	mov	r9, r3
10010d90:	46a2      	mov	sl, r4
10010d92:	46ab      	mov	fp, r5
10010d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010d96:	4556      	cmp	r6, sl
10010d98:	d9da      	bls.n	10010d50 <inv_fast_nomot_parameter_3rd+0x8c>
10010d9a:	46b2      	mov	sl, r6
10010d9c:	46b9      	mov	r9, r7
10010d9e:	e7d7      	b.n	10010d50 <inv_fast_nomot_parameter_3rd+0x8c>
10010da0:	2000      	movs	r0, #0
10010da2:	2100      	movs	r1, #0
10010da4:	e7f0      	b.n	10010d88 <inv_fast_nomot_parameter_3rd+0xc4>
10010da6:	2320      	movs	r3, #32
10010da8:	1c0c      	adds	r4, r1, #0
10010daa:	1a9b      	subs	r3, r3, r2
10010dac:	409c      	lsls	r4, r3
10010dae:	40d0      	lsrs	r0, r2
10010db0:	4320      	orrs	r0, r4
10010db2:	e7e8      	b.n	10010d86 <inv_fast_nomot_parameter_3rd+0xc2>
10010db4:	1001c0c0 	.word	0x1001c0c0
10010db8:	1001d5f8 	.word	0x1001d5f8

10010dbc <inv_fast_nomot_set_gyro_bias>:
10010dbc:	2384      	movs	r3, #132	; 0x84
10010dbe:	b5f0      	push	{r4, r5, r6, r7, lr}
10010dc0:	4d2e      	ldr	r5, [pc, #184]	; (10010e7c <inv_fast_nomot_set_gyro_bias+0xc0>)
10010dc2:	1c06      	adds	r6, r0, #0
10010dc4:	2100      	movs	r1, #0
10010dc6:	1c28      	adds	r0, r5, #0
10010dc8:	009b      	lsls	r3, r3, #2
10010dca:	b085      	sub	sp, #20
10010dcc:	58ef      	ldr	r7, [r5, r3]
10010dce:	ac01      	add	r4, sp, #4
10010dd0:	1c0b      	adds	r3, r1, #0
10010dd2:	6882      	ldr	r2, [r0, #8]
10010dd4:	3384      	adds	r3, #132	; 0x84
10010dd6:	40ba      	lsls	r2, r7
10010dd8:	58eb      	ldr	r3, [r5, r3]
10010dda:	3008      	adds	r0, #8
10010ddc:	041b      	lsls	r3, r3, #16
10010dde:	189b      	adds	r3, r3, r2
10010de0:	5063      	str	r3, [r4, r1]
10010de2:	3104      	adds	r1, #4
10010de4:	290c      	cmp	r1, #12
10010de6:	d1f3      	bne.n	10010dd0 <inv_fast_nomot_set_gyro_bias+0x14>
10010de8:	4f25      	ldr	r7, [pc, #148]	; (10010e80 <inv_fast_nomot_set_gyro_bias+0xc4>)
10010dea:	2298      	movs	r2, #152	; 0x98
10010dec:	1c38      	adds	r0, r7, #0
10010dee:	2100      	movs	r1, #0
10010df0:	f006 ffeb 	bl	10017dca <memset>
10010df4:	2001      	movs	r0, #1
10010df6:	f7ff feeb 	bl	10010bd0 <inv_init_maxmin>
10010dfa:	23f4      	movs	r3, #244	; 0xf4
10010dfc:	3f08      	subs	r7, #8
10010dfe:	005b      	lsls	r3, r3, #1
10010e00:	5cfa      	ldrb	r2, [r7, r3]
10010e02:	2a04      	cmp	r2, #4
10010e04:	d02f      	beq.n	10010e66 <inv_fast_nomot_set_gyro_bias+0xaa>
10010e06:	4f1f      	ldr	r7, [pc, #124]	; (10010e84 <inv_fast_nomot_set_gyro_bias+0xc8>)
10010e08:	9b01      	ldr	r3, [sp, #4]
10010e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10010e0c:	1a98      	subs	r0, r3, r2
10010e0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
10010e10:	6863      	ldr	r3, [r4, #4]
10010e12:	1a9b      	subs	r3, r3, r2
10010e14:	17da      	asrs	r2, r3, #31
10010e16:	189b      	adds	r3, r3, r2
10010e18:	4053      	eors	r3, r2
10010e1a:	17c2      	asrs	r2, r0, #31
10010e1c:	1880      	adds	r0, r0, r2
10010e1e:	4050      	eors	r0, r2
10010e20:	4298      	cmp	r0, r3
10010e22:	da00      	bge.n	10010e26 <inv_fast_nomot_set_gyro_bias+0x6a>
10010e24:	1c18      	adds	r0, r3, #0
10010e26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10010e28:	68a3      	ldr	r3, [r4, #8]
10010e2a:	1a9b      	subs	r3, r3, r2
10010e2c:	17da      	asrs	r2, r3, #31
10010e2e:	189b      	adds	r3, r3, r2
10010e30:	4053      	eors	r3, r2
10010e32:	4298      	cmp	r0, r3
10010e34:	da00      	bge.n	10010e38 <inv_fast_nomot_set_gyro_bias+0x7c>
10010e36:	1c18      	adds	r0, r3, #0
10010e38:	6a71      	ldr	r1, [r6, #36]	; 0x24
10010e3a:	f7f8 ffa7 	bl	10009d8c <inv_q30_mult>
10010e3e:	2386      	movs	r3, #134	; 0x86
10010e40:	009b      	lsls	r3, r3, #2
10010e42:	58eb      	ldr	r3, [r5, r3]
10010e44:	4298      	cmp	r0, r3
10010e46:	da06      	bge.n	10010e56 <inv_fast_nomot_set_gyro_bias+0x9a>
10010e48:	1c20      	adds	r0, r4, #0
10010e4a:	2103      	movs	r1, #3
10010e4c:	f7f8 fde2 	bl	10009a14 <inv_set_gyro_bias>
10010e50:	2002      	movs	r0, #2
10010e52:	f7f9 fc97 	bl	1000a784 <inv_set_motion_state>
10010e56:	9b01      	ldr	r3, [sp, #4]
10010e58:	627b      	str	r3, [r7, #36]	; 0x24
10010e5a:	6863      	ldr	r3, [r4, #4]
10010e5c:	62bb      	str	r3, [r7, #40]	; 0x28
10010e5e:	68a3      	ldr	r3, [r4, #8]
10010e60:	62fb      	str	r3, [r7, #44]	; 0x2c
10010e62:	b005      	add	sp, #20
10010e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010e66:	2286      	movs	r2, #134	; 0x86
10010e68:	0092      	lsls	r2, r2, #2
10010e6a:	58b9      	ldr	r1, [r7, r2]
10010e6c:	22a0      	movs	r2, #160	; 0xa0
10010e6e:	0392      	lsls	r2, r2, #14
10010e70:	4291      	cmp	r1, r2
10010e72:	ddc8      	ble.n	10010e06 <inv_fast_nomot_set_gyro_bias+0x4a>
10010e74:	2205      	movs	r2, #5
10010e76:	54fa      	strb	r2, [r7, r3]
10010e78:	e7c5      	b.n	10010e06 <inv_fast_nomot_set_gyro_bias+0x4a>
10010e7a:	46c0      	nop			; (mov r8, r8)
10010e7c:	1001d5f8 	.word	0x1001d5f8
10010e80:	1001d600 	.word	0x1001d600
10010e84:	1001c0c0 	.word	0x1001c0c0

10010e88 <inv_set_fast_nomot_compass_threshold>:
10010e88:	4b01      	ldr	r3, [pc, #4]	; (10010e90 <inv_set_fast_nomot_compass_threshold+0x8>)
10010e8a:	6098      	str	r0, [r3, #8]
10010e8c:	60d9      	str	r1, [r3, #12]
10010e8e:	4770      	bx	lr
10010e90:	1001c0c0 	.word	0x1001c0c0

10010e94 <int_set_fast_nomot_gyro_threshold>:
10010e94:	4b01      	ldr	r3, [pc, #4]	; (10010e9c <int_set_fast_nomot_gyro_threshold+0x8>)
10010e96:	6198      	str	r0, [r3, #24]
10010e98:	61d9      	str	r1, [r3, #28]
10010e9a:	4770      	bx	lr
10010e9c:	1001c0c0 	.word	0x1001c0c0

10010ea0 <inv_set_fast_nomot_accel_threshold>:
10010ea0:	4b01      	ldr	r3, [pc, #4]	; (10010ea8 <inv_set_fast_nomot_accel_threshold+0x8>)
10010ea2:	6118      	str	r0, [r3, #16]
10010ea4:	6159      	str	r1, [r3, #20]
10010ea6:	4770      	bx	lr
10010ea8:	1001c0c0 	.word	0x1001c0c0

10010eac <inv_get_fast_nomot_compass_param>:
10010eac:	22f0      	movs	r2, #240	; 0xf0
10010eae:	4b05      	ldr	r3, [pc, #20]	; (10010ec4 <inv_get_fast_nomot_compass_param+0x18>)
10010eb0:	0052      	lsls	r2, r2, #1
10010eb2:	589a      	ldr	r2, [r3, r2]
10010eb4:	33d1      	adds	r3, #209	; 0xd1
10010eb6:	33ff      	adds	r3, #255	; 0xff
10010eb8:	6002      	str	r2, [r0, #0]
10010eba:	681a      	ldr	r2, [r3, #0]
10010ebc:	685b      	ldr	r3, [r3, #4]
10010ebe:	600a      	str	r2, [r1, #0]
10010ec0:	604b      	str	r3, [r1, #4]
10010ec2:	4770      	bx	lr
10010ec4:	1001d5f8 	.word	0x1001d5f8

10010ec8 <inv_get_fast_nomot_accel_param>:
10010ec8:	22f0      	movs	r2, #240	; 0xf0
10010eca:	4b05      	ldr	r3, [pc, #20]	; (10010ee0 <inv_get_fast_nomot_accel_param+0x18>)
10010ecc:	0052      	lsls	r2, r2, #1
10010ece:	589a      	ldr	r2, [r3, r2]
10010ed0:	33d9      	adds	r3, #217	; 0xd9
10010ed2:	33ff      	adds	r3, #255	; 0xff
10010ed4:	6002      	str	r2, [r0, #0]
10010ed6:	681a      	ldr	r2, [r3, #0]
10010ed8:	685b      	ldr	r3, [r3, #4]
10010eda:	600a      	str	r2, [r1, #0]
10010edc:	604b      	str	r3, [r1, #4]
10010ede:	4770      	bx	lr
10010ee0:	1001d5f8 	.word	0x1001d5f8

10010ee4 <inv_fast_nomot_store_data>:
10010ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
10010ee6:	4656      	mov	r6, sl
10010ee8:	465f      	mov	r7, fp
10010eea:	464d      	mov	r5, r9
10010eec:	4644      	mov	r4, r8
10010eee:	b4f0      	push	{r4, r5, r6, r7}
10010ef0:	6f8b      	ldr	r3, [r1, #120]	; 0x78
10010ef2:	b083      	sub	sp, #12
10010ef4:	468b      	mov	fp, r1
10010ef6:	9300      	str	r3, [sp, #0]
10010ef8:	2360      	movs	r3, #96	; 0x60
10010efa:	445b      	add	r3, fp
10010efc:	4698      	mov	r8, r3
10010efe:	2318      	movs	r3, #24
10010f00:	4682      	mov	sl, r0
10010f02:	4645      	mov	r5, r8
10010f04:	465e      	mov	r6, fp
10010f06:	445b      	add	r3, fp
10010f08:	9301      	str	r3, [sp, #4]
10010f0a:	9b00      	ldr	r3, [sp, #0]
10010f0c:	2b00      	cmp	r3, #0
10010f0e:	d038      	beq.n	10010f82 <inv_fast_nomot_store_data+0x9e>
10010f10:	4653      	mov	r3, sl
10010f12:	2200      	movs	r2, #0
10010f14:	5e9b      	ldrsh	r3, [r3, r2]
10010f16:	69ea      	ldr	r2, [r5, #28]
10010f18:	1a9b      	subs	r3, r3, r2
10010f1a:	17da      	asrs	r2, r3, #31
10010f1c:	4699      	mov	r9, r3
10010f1e:	4690      	mov	r8, r2
10010f20:	682a      	ldr	r2, [r5, #0]
10010f22:	429a      	cmp	r2, r3
10010f24:	da00      	bge.n	10010f28 <inv_fast_nomot_store_data+0x44>
10010f26:	602b      	str	r3, [r5, #0]
10010f28:	68ea      	ldr	r2, [r5, #12]
10010f2a:	429a      	cmp	r2, r3
10010f2c:	dd00      	ble.n	10010f30 <inv_fast_nomot_store_data+0x4c>
10010f2e:	60eb      	str	r3, [r5, #12]
10010f30:	1c37      	adds	r7, r6, #0
10010f32:	1c34      	adds	r4, r6, #0
10010f34:	2001      	movs	r0, #1
10010f36:	2100      	movs	r1, #0
10010f38:	3760      	adds	r7, #96	; 0x60
10010f3a:	464a      	mov	r2, r9
10010f3c:	4643      	mov	r3, r8
10010f3e:	f003 ffab 	bl	10014e98 <__aeabi_lmul>
10010f42:	6822      	ldr	r2, [r4, #0]
10010f44:	6863      	ldr	r3, [r4, #4]
10010f46:	1812      	adds	r2, r2, r0
10010f48:	414b      	adcs	r3, r1
10010f4a:	6022      	str	r2, [r4, #0]
10010f4c:	6063      	str	r3, [r4, #4]
10010f4e:	3418      	adds	r4, #24
10010f50:	42a7      	cmp	r7, r4
10010f52:	d1f2      	bne.n	10010f3a <inv_fast_nomot_store_data+0x56>
10010f54:	2302      	movs	r3, #2
10010f56:	469c      	mov	ip, r3
10010f58:	9b01      	ldr	r3, [sp, #4]
10010f5a:	3608      	adds	r6, #8
10010f5c:	3504      	adds	r5, #4
10010f5e:	44e2      	add	sl, ip
10010f60:	429e      	cmp	r6, r3
10010f62:	d1d2      	bne.n	10010f0a <inv_fast_nomot_store_data+0x26>
10010f64:	465a      	mov	r2, fp
10010f66:	9b00      	ldr	r3, [sp, #0]
10010f68:	4659      	mov	r1, fp
10010f6a:	3301      	adds	r3, #1
10010f6c:	6793      	str	r3, [r2, #120]	; 0x78
10010f6e:	2201      	movs	r2, #1
10010f70:	2390      	movs	r3, #144	; 0x90
10010f72:	50ca      	str	r2, [r1, r3]
10010f74:	b003      	add	sp, #12
10010f76:	bc3c      	pop	{r2, r3, r4, r5}
10010f78:	4690      	mov	r8, r2
10010f7a:	4699      	mov	r9, r3
10010f7c:	46a2      	mov	sl, r4
10010f7e:	46ab      	mov	fp, r5
10010f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010f82:	4653      	mov	r3, sl
10010f84:	2200      	movs	r2, #0
10010f86:	5e9b      	ldrsh	r3, [r3, r2]
10010f88:	61eb      	str	r3, [r5, #28]
10010f8a:	2300      	movs	r3, #0
10010f8c:	4699      	mov	r9, r3
10010f8e:	4698      	mov	r8, r3
10010f90:	e7c6      	b.n	10010f20 <inv_fast_nomot_store_data+0x3c>
10010f92:	46c0      	nop			; (mov r8, r8)

10010f94 <inv_fast_nomot_store_data_compass>:
10010f94:	6803      	ldr	r3, [r0, #0]
10010f96:	b570      	push	{r4, r5, r6, lr}
10010f98:	66d3      	str	r3, [r2, #108]	; 0x6c
10010f9a:	6843      	ldr	r3, [r0, #4]
10010f9c:	6f94      	ldr	r4, [r2, #120]	; 0x78
10010f9e:	6713      	str	r3, [r2, #112]	; 0x70
10010fa0:	6883      	ldr	r3, [r0, #8]
10010fa2:	6753      	str	r3, [r2, #116]	; 0x74
10010fa4:	2388      	movs	r3, #136	; 0x88
10010fa6:	50d1      	str	r1, [r2, r3]
10010fa8:	2c00      	cmp	r4, #0
10010faa:	d011      	beq.n	10010fd0 <inv_fast_nomot_store_data_compass+0x3c>
10010fac:	1c11      	adds	r1, r2, #0
10010fae:	1c15      	adds	r5, r2, #0
10010fb0:	3160      	adds	r1, #96	; 0x60
10010fb2:	356c      	adds	r5, #108	; 0x6c
10010fb4:	69ce      	ldr	r6, [r1, #28]
10010fb6:	6803      	ldr	r3, [r0, #0]
10010fb8:	1b9b      	subs	r3, r3, r6
10010fba:	17de      	asrs	r6, r3, #31
10010fbc:	199b      	adds	r3, r3, r6
10010fbe:	4073      	eors	r3, r6
10010fc0:	680e      	ldr	r6, [r1, #0]
10010fc2:	42b3      	cmp	r3, r6
10010fc4:	dd00      	ble.n	10010fc8 <inv_fast_nomot_store_data_compass+0x34>
10010fc6:	600b      	str	r3, [r1, #0]
10010fc8:	3104      	adds	r1, #4
10010fca:	3004      	adds	r0, #4
10010fcc:	42a9      	cmp	r1, r5
10010fce:	d1f1      	bne.n	10010fb4 <inv_fast_nomot_store_data_compass+0x20>
10010fd0:	2101      	movs	r1, #1
10010fd2:	2390      	movs	r3, #144	; 0x90
10010fd4:	3401      	adds	r4, #1
10010fd6:	6794      	str	r4, [r2, #120]	; 0x78
10010fd8:	50d1      	str	r1, [r2, r3]
10010fda:	bd70      	pop	{r4, r5, r6, pc}

10010fdc <inv_fast_nomot_reset_data_compass>:
10010fdc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
10010fde:	2280      	movs	r2, #128	; 0x80
10010fe0:	67c3      	str	r3, [r0, #124]	; 0x7c
10010fe2:	2300      	movs	r3, #0
10010fe4:	6f01      	ldr	r1, [r0, #112]	; 0x70
10010fe6:	6603      	str	r3, [r0, #96]	; 0x60
10010fe8:	5081      	str	r1, [r0, r2]
10010fea:	6f41      	ldr	r1, [r0, #116]	; 0x74
10010fec:	3204      	adds	r2, #4
10010fee:	6643      	str	r3, [r0, #100]	; 0x64
10010ff0:	5081      	str	r1, [r0, r2]
10010ff2:	6683      	str	r3, [r0, #104]	; 0x68
10010ff4:	3204      	adds	r2, #4
10010ff6:	5881      	ldr	r1, [r0, r2]
10010ff8:	3204      	adds	r2, #4
10010ffa:	5081      	str	r1, [r0, r2]
10010ffc:	3204      	adds	r2, #4
10010ffe:	6783      	str	r3, [r0, #120]	; 0x78
10011000:	5083      	str	r3, [r0, r2]
10011002:	4770      	bx	lr

10011004 <inv_fast_nomot_get_time_elaps>:
10011004:	228c      	movs	r2, #140	; 0x8c
10011006:	2388      	movs	r3, #136	; 0x88
10011008:	58c3      	ldr	r3, [r0, r3]
1001100a:	5880      	ldr	r0, [r0, r2]
1001100c:	1a18      	subs	r0, r3, r0
1001100e:	4770      	bx	lr

10011010 <inv_fast_nomot_parameter_compass>:
10011010:	6e02      	ldr	r2, [r0, #96]	; 0x60
10011012:	6e43      	ldr	r3, [r0, #100]	; 0x64
10011014:	4293      	cmp	r3, r2
10011016:	da00      	bge.n	1001101a <inv_fast_nomot_parameter_compass+0xa>
10011018:	1c13      	adds	r3, r2, #0
1001101a:	6e82      	ldr	r2, [r0, #104]	; 0x68
1001101c:	1e18      	subs	r0, r3, #0
1001101e:	4290      	cmp	r0, r2
10011020:	da00      	bge.n	10011024 <inv_fast_nomot_parameter_compass+0x14>
10011022:	1c10      	adds	r0, r2, #0
10011024:	4770      	bx	lr
10011026:	46c0      	nop			; (mov r8, r8)

10011028 <inv_get_right_shift_by_rounding>:
10011028:	b5f0      	push	{r4, r5, r6, r7, lr}
1001102a:	4647      	mov	r7, r8
1001102c:	b480      	push	{r7}
1001102e:	2701      	movs	r7, #1
10011030:	1e53      	subs	r3, r2, #1
10011032:	409f      	lsls	r7, r3
10011034:	2320      	movs	r3, #32
10011036:	2620      	movs	r6, #32
10011038:	425b      	negs	r3, r3
1001103a:	1ab6      	subs	r6, r6, r2
1001103c:	46b8      	mov	r8, r7
1001103e:	18d3      	adds	r3, r2, r3
10011040:	d434      	bmi.n	100110ac <inv_get_right_shift_by_rounding+0x84>
10011042:	1c0f      	adds	r7, r1, #0
10011044:	411f      	asrs	r7, r3
10011046:	1c3c      	adds	r4, r7, #0
10011048:	1c0b      	adds	r3, r1, #0
1001104a:	4113      	asrs	r3, r2
1001104c:	1c1d      	adds	r5, r3, #0
1001104e:	2320      	movs	r3, #32
10011050:	425b      	negs	r3, r3
10011052:	18f2      	adds	r2, r6, r3
10011054:	d422      	bmi.n	1001109c <inv_get_right_shift_by_rounding+0x74>
10011056:	1c03      	adds	r3, r0, #0
10011058:	4093      	lsls	r3, r2
1001105a:	40b0      	lsls	r0, r6
1001105c:	2a00      	cmp	r2, #0
1001105e:	db16      	blt.n	1001108e <inv_get_right_shift_by_rounding+0x66>
10011060:	4113      	asrs	r3, r2
10011062:	1c19      	adds	r1, r3, #0
10011064:	4588      	cmp	r8, r1
10011066:	db0d      	blt.n	10011084 <inv_get_right_shift_by_rounding+0x5c>
10011068:	4643      	mov	r3, r8
1001106a:	425f      	negs	r7, r3
1001106c:	42b9      	cmp	r1, r7
1001106e:	da04      	bge.n	1001107a <inv_get_right_shift_by_rounding+0x52>
10011070:	2201      	movs	r2, #1
10011072:	4252      	negs	r2, r2
10011074:	17d3      	asrs	r3, r2, #31
10011076:	18a4      	adds	r4, r4, r2
10011078:	415d      	adcs	r5, r3
1001107a:	1c29      	adds	r1, r5, #0
1001107c:	1c20      	adds	r0, r4, #0
1001107e:	bc04      	pop	{r2}
10011080:	4690      	mov	r8, r2
10011082:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011084:	2201      	movs	r2, #1
10011086:	2300      	movs	r3, #0
10011088:	18a4      	adds	r4, r4, r2
1001108a:	415d      	adcs	r5, r3
1001108c:	e7f5      	b.n	1001107a <inv_get_right_shift_by_rounding+0x52>
1001108e:	2120      	movs	r1, #32
10011090:	1b89      	subs	r1, r1, r6
10011092:	408b      	lsls	r3, r1
10011094:	1c01      	adds	r1, r0, #0
10011096:	40f1      	lsrs	r1, r6
10011098:	4319      	orrs	r1, r3
1001109a:	e7e3      	b.n	10011064 <inv_get_right_shift_by_rounding+0x3c>
1001109c:	2320      	movs	r3, #32
1001109e:	1c07      	adds	r7, r0, #0
100110a0:	1b9b      	subs	r3, r3, r6
100110a2:	40df      	lsrs	r7, r3
100110a4:	1c0b      	adds	r3, r1, #0
100110a6:	40b3      	lsls	r3, r6
100110a8:	433b      	orrs	r3, r7
100110aa:	e7d6      	b.n	1001105a <inv_get_right_shift_by_rounding+0x32>
100110ac:	1c03      	adds	r3, r0, #0
100110ae:	40d3      	lsrs	r3, r2
100110b0:	1c1c      	adds	r4, r3, #0
100110b2:	1c0b      	adds	r3, r1, #0
100110b4:	40b3      	lsls	r3, r6
100110b6:	431c      	orrs	r4, r3
100110b8:	e7c6      	b.n	10011048 <inv_get_right_shift_by_rounding+0x20>
100110ba:	46c0      	nop			; (mov r8, r8)

100110bc <inv_reset_min_max_gyro_accel_statistics>:
100110bc:	2300      	movs	r3, #0
100110be:	4a09      	ldr	r2, [pc, #36]	; (100110e4 <inv_reset_min_max_gyro_accel_statistics+0x28>)
100110c0:	6013      	str	r3, [r2, #0]
100110c2:	6053      	str	r3, [r2, #4]
100110c4:	6093      	str	r3, [r2, #8]
100110c6:	60d3      	str	r3, [r2, #12]
100110c8:	6213      	str	r3, [r2, #32]
100110ca:	6253      	str	r3, [r2, #36]	; 0x24
100110cc:	6293      	str	r3, [r2, #40]	; 0x28
100110ce:	62d3      	str	r3, [r2, #44]	; 0x2c
100110d0:	6113      	str	r3, [r2, #16]
100110d2:	6153      	str	r3, [r2, #20]
100110d4:	6193      	str	r3, [r2, #24]
100110d6:	61d3      	str	r3, [r2, #28]
100110d8:	6313      	str	r3, [r2, #48]	; 0x30
100110da:	6353      	str	r3, [r2, #52]	; 0x34
100110dc:	6393      	str	r3, [r2, #56]	; 0x38
100110de:	63d3      	str	r3, [r2, #60]	; 0x3c
100110e0:	4770      	bx	lr
100110e2:	46c0      	nop			; (mov r8, r8)
100110e4:	1001d818 	.word	0x1001d818

100110e8 <inv_record_max_moment_in_no_motion_gyro>:
100110e8:	2392      	movs	r3, #146	; 0x92
100110ea:	4a0d      	ldr	r2, [pc, #52]	; (10011120 <inv_record_max_moment_in_no_motion_gyro+0x38>)
100110ec:	009b      	lsls	r3, r3, #2
100110ee:	58d3      	ldr	r3, [r2, r3]
100110f0:	b530      	push	{r4, r5, lr}
100110f2:	2b00      	cmp	r3, #0
100110f4:	d005      	beq.n	10011102 <inv_record_max_moment_in_no_motion_gyro+0x1a>
100110f6:	2490      	movs	r4, #144	; 0x90
100110f8:	00a4      	lsls	r4, r4, #2
100110fa:	1915      	adds	r5, r2, r4
100110fc:	686c      	ldr	r4, [r5, #4]
100110fe:	428c      	cmp	r4, r1
10011100:	da08      	bge.n	10011114 <inv_record_max_moment_in_no_motion_gyro+0x2c>
10011102:	2490      	movs	r4, #144	; 0x90
10011104:	00a4      	lsls	r4, r4, #2
10011106:	1914      	adds	r4, r2, r4
10011108:	c403      	stmia	r4!, {r0, r1}
1001110a:	2192      	movs	r1, #146	; 0x92
1001110c:	3301      	adds	r3, #1
1001110e:	0089      	lsls	r1, r1, #2
10011110:	5053      	str	r3, [r2, r1]
10011112:	bd30      	pop	{r4, r5, pc}
10011114:	428c      	cmp	r4, r1
10011116:	d1f8      	bne.n	1001110a <inv_record_max_moment_in_no_motion_gyro+0x22>
10011118:	682c      	ldr	r4, [r5, #0]
1001111a:	4284      	cmp	r4, r0
1001111c:	d3f1      	bcc.n	10011102 <inv_record_max_moment_in_no_motion_gyro+0x1a>
1001111e:	e7f4      	b.n	1001110a <inv_record_max_moment_in_no_motion_gyro+0x22>
10011120:	1001d5f8 	.word	0x1001d5f8

10011124 <inv_record_max_moment_in_no_motion_accel>:
10011124:	2396      	movs	r3, #150	; 0x96
10011126:	4a0d      	ldr	r2, [pc, #52]	; (1001115c <inv_record_max_moment_in_no_motion_accel+0x38>)
10011128:	009b      	lsls	r3, r3, #2
1001112a:	58d3      	ldr	r3, [r2, r3]
1001112c:	b530      	push	{r4, r5, lr}
1001112e:	2b00      	cmp	r3, #0
10011130:	d005      	beq.n	1001113e <inv_record_max_moment_in_no_motion_accel+0x1a>
10011132:	2494      	movs	r4, #148	; 0x94
10011134:	00a4      	lsls	r4, r4, #2
10011136:	1915      	adds	r5, r2, r4
10011138:	686c      	ldr	r4, [r5, #4]
1001113a:	428c      	cmp	r4, r1
1001113c:	da08      	bge.n	10011150 <inv_record_max_moment_in_no_motion_accel+0x2c>
1001113e:	2494      	movs	r4, #148	; 0x94
10011140:	00a4      	lsls	r4, r4, #2
10011142:	1914      	adds	r4, r2, r4
10011144:	c403      	stmia	r4!, {r0, r1}
10011146:	2196      	movs	r1, #150	; 0x96
10011148:	3301      	adds	r3, #1
1001114a:	0089      	lsls	r1, r1, #2
1001114c:	5053      	str	r3, [r2, r1]
1001114e:	bd30      	pop	{r4, r5, pc}
10011150:	428c      	cmp	r4, r1
10011152:	d1f8      	bne.n	10011146 <inv_record_max_moment_in_no_motion_accel+0x22>
10011154:	682c      	ldr	r4, [r5, #0]
10011156:	4284      	cmp	r4, r0
10011158:	d3f1      	bcc.n	1001113e <inv_record_max_moment_in_no_motion_accel+0x1a>
1001115a:	e7f4      	b.n	10011146 <inv_record_max_moment_in_no_motion_accel+0x22>
1001115c:	1001d5f8 	.word	0x1001d5f8

10011160 <inv_record_min_moment_in_motion_gyro>:
10011160:	238a      	movs	r3, #138	; 0x8a
10011162:	4a0d      	ldr	r2, [pc, #52]	; (10011198 <inv_record_min_moment_in_motion_gyro+0x38>)
10011164:	009b      	lsls	r3, r3, #2
10011166:	58d3      	ldr	r3, [r2, r3]
10011168:	b530      	push	{r4, r5, lr}
1001116a:	2b00      	cmp	r3, #0
1001116c:	d005      	beq.n	1001117a <inv_record_min_moment_in_motion_gyro+0x1a>
1001116e:	2488      	movs	r4, #136	; 0x88
10011170:	00a4      	lsls	r4, r4, #2
10011172:	1915      	adds	r5, r2, r4
10011174:	686c      	ldr	r4, [r5, #4]
10011176:	428c      	cmp	r4, r1
10011178:	dd08      	ble.n	1001118c <inv_record_min_moment_in_motion_gyro+0x2c>
1001117a:	2488      	movs	r4, #136	; 0x88
1001117c:	00a4      	lsls	r4, r4, #2
1001117e:	1914      	adds	r4, r2, r4
10011180:	c403      	stmia	r4!, {r0, r1}
10011182:	218a      	movs	r1, #138	; 0x8a
10011184:	3301      	adds	r3, #1
10011186:	0089      	lsls	r1, r1, #2
10011188:	5053      	str	r3, [r2, r1]
1001118a:	bd30      	pop	{r4, r5, pc}
1001118c:	428c      	cmp	r4, r1
1001118e:	d1f8      	bne.n	10011182 <inv_record_min_moment_in_motion_gyro+0x22>
10011190:	682c      	ldr	r4, [r5, #0]
10011192:	4284      	cmp	r4, r0
10011194:	d8f1      	bhi.n	1001117a <inv_record_min_moment_in_motion_gyro+0x1a>
10011196:	e7f4      	b.n	10011182 <inv_record_min_moment_in_motion_gyro+0x22>
10011198:	1001d5f8 	.word	0x1001d5f8

1001119c <inv_record_min_moment_in_motion_accel>:
1001119c:	238e      	movs	r3, #142	; 0x8e
1001119e:	4a0d      	ldr	r2, [pc, #52]	; (100111d4 <inv_record_min_moment_in_motion_accel+0x38>)
100111a0:	009b      	lsls	r3, r3, #2
100111a2:	58d3      	ldr	r3, [r2, r3]
100111a4:	b530      	push	{r4, r5, lr}
100111a6:	2b00      	cmp	r3, #0
100111a8:	d005      	beq.n	100111b6 <inv_record_min_moment_in_motion_accel+0x1a>
100111aa:	248c      	movs	r4, #140	; 0x8c
100111ac:	00a4      	lsls	r4, r4, #2
100111ae:	1915      	adds	r5, r2, r4
100111b0:	686c      	ldr	r4, [r5, #4]
100111b2:	428c      	cmp	r4, r1
100111b4:	dd08      	ble.n	100111c8 <inv_record_min_moment_in_motion_accel+0x2c>
100111b6:	248c      	movs	r4, #140	; 0x8c
100111b8:	00a4      	lsls	r4, r4, #2
100111ba:	1914      	adds	r4, r2, r4
100111bc:	c403      	stmia	r4!, {r0, r1}
100111be:	218e      	movs	r1, #142	; 0x8e
100111c0:	3301      	adds	r3, #1
100111c2:	0089      	lsls	r1, r1, #2
100111c4:	5053      	str	r3, [r2, r1]
100111c6:	bd30      	pop	{r4, r5, pc}
100111c8:	428c      	cmp	r4, r1
100111ca:	d1f8      	bne.n	100111be <inv_record_min_moment_in_motion_accel+0x22>
100111cc:	682c      	ldr	r4, [r5, #0]
100111ce:	4284      	cmp	r4, r0
100111d0:	d8f1      	bhi.n	100111b6 <inv_record_min_moment_in_motion_accel+0x1a>
100111d2:	e7f4      	b.n	100111be <inv_record_min_moment_in_motion_accel+0x22>
100111d4:	1001d5f8 	.word	0x1001d5f8

100111d8 <inv_detect_motion_by_gyro_accel>:
100111d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100111da:	4c4f      	ldr	r4, [pc, #316]	; (10011318 <inv_detect_motion_by_gyro_accel+0x140>)
100111dc:	1c05      	adds	r5, r0, #0
100111de:	6ea3      	ldr	r3, [r4, #104]	; 0x68
100111e0:	6f62      	ldr	r2, [r4, #116]	; 0x74
100111e2:	4e4e      	ldr	r6, [pc, #312]	; (1001131c <inv_detect_motion_by_gyro_accel+0x144>)
100111e4:	1a9a      	subs	r2, r3, r2
100111e6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
100111e8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
100111ea:	1c31      	adds	r1, r6, #0
100111ec:	1a1b      	subs	r3, r3, r0
100111ee:	4293      	cmp	r3, r2
100111f0:	da00      	bge.n	100111f4 <inv_detect_motion_by_gyro_accel+0x1c>
100111f2:	1c13      	adds	r3, r2, #0
100111f4:	6f22      	ldr	r2, [r4, #112]	; 0x70
100111f6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
100111f8:	1a12      	subs	r2, r2, r0
100111fa:	4293      	cmp	r3, r2
100111fc:	da00      	bge.n	10011200 <inv_detect_motion_by_gyro_accel+0x28>
100111fe:	1c13      	adds	r3, r2, #0
10011200:	6bca      	ldr	r2, [r1, #60]	; 0x3c
10011202:	429a      	cmp	r2, r3
10011204:	db4b      	blt.n	1001129e <inv_detect_motion_by_gyro_accel+0xc6>
10011206:	2380      	movs	r3, #128	; 0x80
10011208:	6b2a      	ldr	r2, [r5, #48]	; 0x30
1001120a:	005b      	lsls	r3, r3, #1
1001120c:	2002      	movs	r0, #2
1001120e:	421a      	tst	r2, r3
10011210:	d100      	bne.n	10011214 <inv_detect_motion_by_gyro_accel+0x3c>
10011212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011214:	2280      	movs	r2, #128	; 0x80
10011216:	6821      	ldr	r1, [r4, #0]
10011218:	58a2      	ldr	r2, [r4, r2]
1001121a:	428a      	cmp	r2, r1
1001121c:	dbf9      	blt.n	10011212 <inv_detect_motion_by_gyro_accel+0x3a>
1001121e:	6f6d      	ldr	r5, [r5, #116]	; 0x74
10011220:	421d      	tst	r5, r3
10011222:	d040      	beq.n	100112a6 <inv_detect_motion_by_gyro_accel+0xce>
10011224:	33b0      	adds	r3, #176	; 0xb0
10011226:	58e3      	ldr	r3, [r4, r3]
10011228:	4299      	cmp	r1, r3
1001122a:	dcf2      	bgt.n	10011212 <inv_detect_motion_by_gyro_accel+0x3a>
1001122c:	2b00      	cmp	r3, #0
1001122e:	d166      	bne.n	100112fe <inv_detect_motion_by_gyro_accel+0x126>
10011230:	2000      	movs	r0, #0
10011232:	2100      	movs	r1, #0
10011234:	1c23      	adds	r3, r4, #0
10011236:	33d9      	adds	r3, #217	; 0xd9
10011238:	33ff      	adds	r3, #255	; 0xff
1001123a:	c303      	stmia	r3!, {r0, r1}
1001123c:	6973      	ldr	r3, [r6, #20]
1001123e:	428b      	cmp	r3, r1
10011240:	db03      	blt.n	1001124a <inv_detect_motion_by_gyro_accel+0x72>
10011242:	d166      	bne.n	10011312 <inv_detect_motion_by_gyro_accel+0x13a>
10011244:	6933      	ldr	r3, [r6, #16]
10011246:	4283      	cmp	r3, r0
10011248:	d263      	bcs.n	10011312 <inv_detect_motion_by_gyro_accel+0x13a>
1001124a:	238e      	movs	r3, #142	; 0x8e
1001124c:	228c      	movs	r2, #140	; 0x8c
1001124e:	009b      	lsls	r3, r3, #2
10011250:	58e3      	ldr	r3, [r4, r3]
10011252:	0092      	lsls	r2, r2, #2
10011254:	2b00      	cmp	r3, #0
10011256:	d009      	beq.n	1001126c <inv_detect_motion_by_gyro_accel+0x94>
10011258:	18a5      	adds	r5, r4, r2
1001125a:	686a      	ldr	r2, [r5, #4]
1001125c:	428a      	cmp	r2, r1
1001125e:	dc03      	bgt.n	10011268 <inv_detect_motion_by_gyro_accel+0x90>
10011260:	d106      	bne.n	10011270 <inv_detect_motion_by_gyro_accel+0x98>
10011262:	682a      	ldr	r2, [r5, #0]
10011264:	4282      	cmp	r2, r0
10011266:	d903      	bls.n	10011270 <inv_detect_motion_by_gyro_accel+0x98>
10011268:	228c      	movs	r2, #140	; 0x8c
1001126a:	0092      	lsls	r2, r2, #2
1001126c:	18a2      	adds	r2, r4, r2
1001126e:	c203      	stmia	r2!, {r0, r1}
10011270:	228e      	movs	r2, #142	; 0x8e
10011272:	2500      	movs	r5, #0
10011274:	3301      	adds	r3, #1
10011276:	0092      	lsls	r2, r2, #2
10011278:	50a3      	str	r3, [r4, r2]
1001127a:	4f29      	ldr	r7, [pc, #164]	; (10011320 <inv_detect_motion_by_gyro_accel+0x148>)
1001127c:	2298      	movs	r2, #152	; 0x98
1001127e:	1c38      	adds	r0, r7, #0
10011280:	2100      	movs	r1, #0
10011282:	f006 fda2 	bl	10017dca <memset>
10011286:	2004      	movs	r0, #4
10011288:	f7ff fca2 	bl	10010bd0 <inv_init_maxmin>
1001128c:	2380      	movs	r3, #128	; 0x80
1001128e:	3f39      	subs	r7, #57	; 0x39
10011290:	3fff      	subs	r7, #255	; 0xff
10011292:	58fa      	ldr	r2, [r7, r3]
10011294:	2a00      	cmp	r2, #0
10011296:	d109      	bne.n	100112ac <inv_detect_motion_by_gyro_accel+0xd4>
10011298:	2000      	movs	r0, #0
1001129a:	2100      	movs	r1, #0
1001129c:	e009      	b.n	100112b2 <inv_detect_motion_by_gyro_accel+0xda>
1001129e:	f7ff fccf 	bl	10010c40 <inv_reset_packet>
100112a2:	2000      	movs	r0, #0
100112a4:	e7b5      	b.n	10011212 <inv_detect_motion_by_gyro_accel+0x3a>
100112a6:	2501      	movs	r5, #1
100112a8:	2a00      	cmp	r2, #0
100112aa:	d0f5      	beq.n	10011298 <inv_detect_motion_by_gyro_accel+0xc0>
100112ac:	481d      	ldr	r0, [pc, #116]	; (10011324 <inv_detect_motion_by_gyro_accel+0x14c>)
100112ae:	f7ff fbd5 	bl	10010a5c <inv_fast_nomot_parameter.part.3>
100112b2:	1c23      	adds	r3, r4, #0
100112b4:	33f1      	adds	r3, #241	; 0xf1
100112b6:	33ff      	adds	r3, #255	; 0xff
100112b8:	c303      	stmia	r3!, {r0, r1}
100112ba:	69f3      	ldr	r3, [r6, #28]
100112bc:	428b      	cmp	r3, r1
100112be:	db05      	blt.n	100112cc <inv_detect_motion_by_gyro_accel+0xf4>
100112c0:	d001      	beq.n	100112c6 <inv_detect_motion_by_gyro_accel+0xee>
100112c2:	1c28      	adds	r0, r5, #0
100112c4:	e7a5      	b.n	10011212 <inv_detect_motion_by_gyro_accel+0x3a>
100112c6:	69b3      	ldr	r3, [r6, #24]
100112c8:	4283      	cmp	r3, r0
100112ca:	d2fa      	bcs.n	100112c2 <inv_detect_motion_by_gyro_accel+0xea>
100112cc:	238a      	movs	r3, #138	; 0x8a
100112ce:	2288      	movs	r2, #136	; 0x88
100112d0:	009b      	lsls	r3, r3, #2
100112d2:	58e3      	ldr	r3, [r4, r3]
100112d4:	0092      	lsls	r2, r2, #2
100112d6:	2b00      	cmp	r3, #0
100112d8:	d009      	beq.n	100112ee <inv_detect_motion_by_gyro_accel+0x116>
100112da:	18a5      	adds	r5, r4, r2
100112dc:	686a      	ldr	r2, [r5, #4]
100112de:	428a      	cmp	r2, r1
100112e0:	dc03      	bgt.n	100112ea <inv_detect_motion_by_gyro_accel+0x112>
100112e2:	d106      	bne.n	100112f2 <inv_detect_motion_by_gyro_accel+0x11a>
100112e4:	682a      	ldr	r2, [r5, #0]
100112e6:	4282      	cmp	r2, r0
100112e8:	d903      	bls.n	100112f2 <inv_detect_motion_by_gyro_accel+0x11a>
100112ea:	2288      	movs	r2, #136	; 0x88
100112ec:	0092      	lsls	r2, r2, #2
100112ee:	18a2      	adds	r2, r4, r2
100112f0:	c203      	stmia	r2!, {r0, r1}
100112f2:	228a      	movs	r2, #138	; 0x8a
100112f4:	3301      	adds	r3, #1
100112f6:	0092      	lsls	r2, r2, #2
100112f8:	50a3      	str	r3, [r4, r2]
100112fa:	2000      	movs	r0, #0
100112fc:	e789      	b.n	10011212 <inv_detect_motion_by_gyro_accel+0x3a>
100112fe:	1c20      	adds	r0, r4, #0
10011300:	3039      	adds	r0, #57	; 0x39
10011302:	30ff      	adds	r0, #255	; 0xff
10011304:	f7ff fbaa 	bl	10010a5c <inv_fast_nomot_parameter.part.3>
10011308:	030b      	lsls	r3, r1, #12
1001130a:	0d00      	lsrs	r0, r0, #20
1001130c:	4318      	orrs	r0, r3
1001130e:	1509      	asrs	r1, r1, #20
10011310:	e790      	b.n	10011234 <inv_detect_motion_by_gyro_accel+0x5c>
10011312:	2501      	movs	r5, #1
10011314:	e7b1      	b.n	1001127a <inv_detect_motion_by_gyro_accel+0xa2>
10011316:	46c0      	nop			; (mov r8, r8)
10011318:	1001d5f8 	.word	0x1001d5f8
1001131c:	1001c0c0 	.word	0x1001c0c0
10011320:	1001d730 	.word	0x1001d730
10011324:	1001d600 	.word	0x1001d600

10011328 <inv_sensor_data_preprocess>:
10011328:	23c0      	movs	r3, #192	; 0xc0
1001132a:	b510      	push	{r4, lr}
1001132c:	6b02      	ldr	r2, [r0, #48]	; 0x30
1001132e:	b084      	sub	sp, #16
10011330:	1c04      	adds	r4, r0, #0
10011332:	4013      	ands	r3, r2
10011334:	2bc0      	cmp	r3, #192	; 0xc0
10011336:	d038      	beq.n	100113aa <inv_sensor_data_preprocess+0x82>
10011338:	23c0      	movs	r3, #192	; 0xc0
1001133a:	6f62      	ldr	r2, [r4, #116]	; 0x74
1001133c:	4013      	ands	r3, r2
1001133e:	2bc0      	cmp	r3, #192	; 0xc0
10011340:	d02d      	beq.n	1001139e <inv_sensor_data_preprocess+0x76>
10011342:	21c0      	movs	r1, #192	; 0xc0
10011344:	23b8      	movs	r3, #184	; 0xb8
10011346:	1c0a      	adds	r2, r1, #0
10011348:	58e3      	ldr	r3, [r4, r3]
1001134a:	401a      	ands	r2, r3
1001134c:	2ac0      	cmp	r2, #192	; 0xc0
1001134e:	d017      	beq.n	10011380 <inv_sensor_data_preprocess+0x58>
10011350:	2260      	movs	r2, #96	; 0x60
10011352:	4013      	ands	r3, r2
10011354:	2b60      	cmp	r3, #96	; 0x60
10011356:	d001      	beq.n	1001135c <inv_sensor_data_preprocess+0x34>
10011358:	b004      	add	sp, #16
1001135a:	bd10      	pop	{r4, pc}
1001135c:	3340      	adds	r3, #64	; 0x40
1001135e:	58e3      	ldr	r3, [r4, r3]
10011360:	5861      	ldr	r1, [r4, r1]
10011362:	139b      	asrs	r3, r3, #14
10011364:	9301      	str	r3, [sp, #4]
10011366:	23a4      	movs	r3, #164	; 0xa4
10011368:	58e3      	ldr	r3, [r4, r3]
1001136a:	a801      	add	r0, sp, #4
1001136c:	139b      	asrs	r3, r3, #14
1001136e:	9302      	str	r3, [sp, #8]
10011370:	23a8      	movs	r3, #168	; 0xa8
10011372:	58e3      	ldr	r3, [r4, r3]
10011374:	4a0f      	ldr	r2, [pc, #60]	; (100113b4 <inv_sensor_data_preprocess+0x8c>)
10011376:	139b      	asrs	r3, r3, #14
10011378:	9303      	str	r3, [sp, #12]
1001137a:	f7ff fe0b 	bl	10010f94 <inv_fast_nomot_store_data_compass>
1001137e:	e7eb      	b.n	10011358 <inv_sensor_data_preprocess+0x30>
10011380:	238c      	movs	r3, #140	; 0x8c
10011382:	5ee3      	ldrsh	r3, [r4, r3]
10011384:	a801      	add	r0, sp, #4
10011386:	9301      	str	r3, [sp, #4]
10011388:	238e      	movs	r3, #142	; 0x8e
1001138a:	5ee3      	ldrsh	r3, [r4, r3]
1001138c:	9302      	str	r3, [sp, #8]
1001138e:	2390      	movs	r3, #144	; 0x90
10011390:	5ee3      	ldrsh	r3, [r4, r3]
10011392:	58a1      	ldr	r1, [r4, r2]
10011394:	4a07      	ldr	r2, [pc, #28]	; (100113b4 <inv_sensor_data_preprocess+0x8c>)
10011396:	9303      	str	r3, [sp, #12]
10011398:	f7ff fdfc 	bl	10010f94 <inv_fast_nomot_store_data_compass>
1001139c:	e7dc      	b.n	10011358 <inv_sensor_data_preprocess+0x30>
1001139e:	1c20      	adds	r0, r4, #0
100113a0:	4905      	ldr	r1, [pc, #20]	; (100113b8 <inv_sensor_data_preprocess+0x90>)
100113a2:	3048      	adds	r0, #72	; 0x48
100113a4:	f7ff fd9e 	bl	10010ee4 <inv_fast_nomot_store_data>
100113a8:	e7cb      	b.n	10011342 <inv_sensor_data_preprocess+0x1a>
100113aa:	3004      	adds	r0, #4
100113ac:	4903      	ldr	r1, [pc, #12]	; (100113bc <inv_sensor_data_preprocess+0x94>)
100113ae:	f7ff fd99 	bl	10010ee4 <inv_fast_nomot_store_data>
100113b2:	e7c1      	b.n	10011338 <inv_sensor_data_preprocess+0x10>
100113b4:	1001d698 	.word	0x1001d698
100113b8:	1001d730 	.word	0x1001d730
100113bc:	1001d600 	.word	0x1001d600

100113c0 <inv_generate_fast_nomot>:
100113c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100113c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
100113c4:	05da      	lsls	r2, r3, #23
100113c6:	d400      	bmi.n	100113ca <inv_generate_fast_nomot+0xa>
100113c8:	e0a0      	b.n	1001150c <inv_generate_fast_nomot+0x14c>
100113ca:	2150      	movs	r1, #80	; 0x50
100113cc:	6f42      	ldr	r2, [r0, #116]	; 0x74
100113ce:	1c05      	adds	r5, r0, #0
100113d0:	400a      	ands	r2, r1
100113d2:	2a40      	cmp	r2, #64	; 0x40
100113d4:	d100      	bne.n	100113d8 <inv_generate_fast_nomot+0x18>
100113d6:	e09b      	b.n	10011510 <inv_generate_fast_nomot+0x150>
100113d8:	22b8      	movs	r2, #184	; 0xb8
100113da:	5882      	ldr	r2, [r0, r2]
100113dc:	400a      	ands	r2, r1
100113de:	2a40      	cmp	r2, #64	; 0x40
100113e0:	d100      	bne.n	100113e4 <inv_generate_fast_nomot+0x24>
100113e2:	e095      	b.n	10011510 <inv_generate_fast_nomot+0x150>
100113e4:	400b      	ands	r3, r1
100113e6:	2b40      	cmp	r3, #64	; 0x40
100113e8:	d100      	bne.n	100113ec <inv_generate_fast_nomot+0x2c>
100113ea:	e091      	b.n	10011510 <inv_generate_fast_nomot+0x150>
100113ec:	4cc9      	ldr	r4, [pc, #804]	; (10011714 <inv_generate_fast_nomot+0x354>)
100113ee:	2282      	movs	r2, #130	; 0x82
100113f0:	0092      	lsls	r2, r2, #2
100113f2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
100113f4:	58a1      	ldr	r1, [r4, r2]
100113f6:	4299      	cmp	r1, r3
100113f8:	d01b      	beq.n	10011432 <inv_generate_fast_nomot+0x72>
100113fa:	50a3      	str	r3, [r4, r2]
100113fc:	4ec6      	ldr	r6, [pc, #792]	; (10011718 <inv_generate_fast_nomot+0x358>)
100113fe:	2b09      	cmp	r3, #9
10011400:	dc00      	bgt.n	10011404 <inv_generate_fast_nomot+0x44>
10011402:	e18d      	b.n	10011720 <inv_generate_fast_nomot+0x360>
10011404:	6b33      	ldr	r3, [r6, #48]	; 0x30
10011406:	6b71      	ldr	r1, [r6, #52]	; 0x34
10011408:	6023      	str	r3, [r4, #0]
1001140a:	2383      	movs	r3, #131	; 0x83
1001140c:	1c08      	adds	r0, r1, #0
1001140e:	009b      	lsls	r3, r3, #2
10011410:	6bb2      	ldr	r2, [r6, #56]	; 0x38
10011412:	50e1      	str	r1, [r4, r3]
10011414:	3308      	adds	r3, #8
10011416:	50e2      	str	r2, [r4, r3]
10011418:	2210      	movs	r2, #16
1001141a:	1a52      	subs	r2, r2, r1
1001141c:	2184      	movs	r1, #132	; 0x84
1001141e:	2319      	movs	r3, #25
10011420:	0089      	lsls	r1, r1, #2
10011422:	5062      	str	r2, [r4, r1]
10011424:	2180      	movs	r1, #128	; 0x80
10011426:	2286      	movs	r2, #134	; 0x86
10011428:	4083      	lsls	r3, r0
1001142a:	01c9      	lsls	r1, r1, #7
1001142c:	0092      	lsls	r2, r2, #2
1001142e:	50a1      	str	r1, [r4, r2]
10011430:	63f3      	str	r3, [r6, #60]	; 0x3c
10011432:	1c28      	adds	r0, r5, #0
10011434:	f7ff ff78 	bl	10011328 <inv_sensor_data_preprocess>
10011438:	23f4      	movs	r3, #244	; 0xf4
1001143a:	005b      	lsls	r3, r3, #1
1001143c:	5ce3      	ldrb	r3, [r4, r3]
1001143e:	2b06      	cmp	r3, #6
10011440:	d864      	bhi.n	1001150c <inv_generate_fast_nomot+0x14c>
10011442:	4ab6      	ldr	r2, [pc, #728]	; (1001171c <inv_generate_fast_nomot+0x35c>)
10011444:	009b      	lsls	r3, r3, #2
10011446:	58d3      	ldr	r3, [r2, r3]
10011448:	469f      	mov	pc, r3
1001144a:	23b8      	movs	r3, #184	; 0xb8
1001144c:	58ea      	ldr	r2, [r5, r3]
1001144e:	3348      	adds	r3, #72	; 0x48
10011450:	421a      	tst	r2, r3
10011452:	d01b      	beq.n	1001148c <inv_generate_fast_nomot+0xcc>
10011454:	58e2      	ldr	r2, [r4, r3]
10011456:	3304      	adds	r3, #4
10011458:	58e3      	ldr	r3, [r4, r3]
1001145a:	4293      	cmp	r3, r2
1001145c:	da00      	bge.n	10011460 <inv_generate_fast_nomot+0xa0>
1001145e:	1c13      	adds	r3, r2, #0
10011460:	2284      	movs	r2, #132	; 0x84
10011462:	0052      	lsls	r2, r2, #1
10011464:	58a2      	ldr	r2, [r4, r2]
10011466:	4293      	cmp	r3, r2
10011468:	da00      	bge.n	1001146c <inv_generate_fast_nomot+0xac>
1001146a:	1c13      	adds	r3, r2, #0
1001146c:	1c21      	adds	r1, r4, #0
1001146e:	48aa      	ldr	r0, [pc, #680]	; (10011718 <inv_generate_fast_nomot+0x358>)
10011470:	31d1      	adds	r1, #209	; 0xd1
10011472:	31ff      	adds	r1, #255	; 0xff
10011474:	17da      	asrs	r2, r3, #31
10011476:	600b      	str	r3, [r1, #0]
10011478:	604a      	str	r2, [r1, #4]
1001147a:	68c1      	ldr	r1, [r0, #12]
1001147c:	4291      	cmp	r1, r2
1001147e:	da00      	bge.n	10011482 <inv_generate_fast_nomot+0xc2>
10011480:	e143      	b.n	1001170a <inv_generate_fast_nomot+0x34a>
10011482:	d103      	bne.n	1001148c <inv_generate_fast_nomot+0xcc>
10011484:	6882      	ldr	r2, [r0, #8]
10011486:	429a      	cmp	r2, r3
10011488:	d200      	bcs.n	1001148c <inv_generate_fast_nomot+0xcc>
1001148a:	e13e      	b.n	1001170a <inv_generate_fast_nomot+0x34a>
1001148c:	1c28      	adds	r0, r5, #0
1001148e:	f7ff fea3 	bl	100111d8 <inv_detect_motion_by_gyro_accel>
10011492:	2800      	cmp	r0, #0
10011494:	d100      	bne.n	10011498 <inv_generate_fast_nomot+0xd8>
10011496:	e138      	b.n	1001170a <inv_generate_fast_nomot+0x34a>
10011498:	2801      	cmp	r0, #1
1001149a:	d137      	bne.n	1001150c <inv_generate_fast_nomot+0x14c>
1001149c:	1c28      	adds	r0, r5, #0
1001149e:	f7ff fc8d 	bl	10010dbc <inv_fast_nomot_set_gyro_bias>
100114a2:	1c23      	adds	r3, r4, #0
100114a4:	33d9      	adds	r3, #217	; 0xd9
100114a6:	33ff      	adds	r3, #255	; 0xff
100114a8:	cb06      	ldmia	r3!, {r1, r2}
100114aa:	2396      	movs	r3, #150	; 0x96
100114ac:	2094      	movs	r0, #148	; 0x94
100114ae:	009b      	lsls	r3, r3, #2
100114b0:	58e3      	ldr	r3, [r4, r3]
100114b2:	0080      	lsls	r0, r0, #2
100114b4:	1820      	adds	r0, r4, r0
100114b6:	2b00      	cmp	r3, #0
100114b8:	d009      	beq.n	100114ce <inv_generate_fast_nomot+0x10e>
100114ba:	6845      	ldr	r5, [r0, #4]
100114bc:	4295      	cmp	r5, r2
100114be:	db03      	blt.n	100114c8 <inv_generate_fast_nomot+0x108>
100114c0:	d106      	bne.n	100114d0 <inv_generate_fast_nomot+0x110>
100114c2:	6800      	ldr	r0, [r0, #0]
100114c4:	4288      	cmp	r0, r1
100114c6:	d203      	bcs.n	100114d0 <inv_generate_fast_nomot+0x110>
100114c8:	2094      	movs	r0, #148	; 0x94
100114ca:	0080      	lsls	r0, r0, #2
100114cc:	1820      	adds	r0, r4, r0
100114ce:	c006      	stmia	r0!, {r1, r2}
100114d0:	2296      	movs	r2, #150	; 0x96
100114d2:	3301      	adds	r3, #1
100114d4:	0092      	lsls	r2, r2, #2
100114d6:	50a3      	str	r3, [r4, r2]
100114d8:	1c23      	adds	r3, r4, #0
100114da:	33f1      	adds	r3, #241	; 0xf1
100114dc:	33ff      	adds	r3, #255	; 0xff
100114de:	cb06      	ldmia	r3!, {r1, r2}
100114e0:	2392      	movs	r3, #146	; 0x92
100114e2:	2090      	movs	r0, #144	; 0x90
100114e4:	009b      	lsls	r3, r3, #2
100114e6:	58e3      	ldr	r3, [r4, r3]
100114e8:	0080      	lsls	r0, r0, #2
100114ea:	1820      	adds	r0, r4, r0
100114ec:	2b00      	cmp	r3, #0
100114ee:	d100      	bne.n	100114f2 <inv_generate_fast_nomot+0x132>
100114f0:	e09b      	b.n	1001162a <inv_generate_fast_nomot+0x26a>
100114f2:	6845      	ldr	r5, [r0, #4]
100114f4:	4295      	cmp	r5, r2
100114f6:	da00      	bge.n	100114fa <inv_generate_fast_nomot+0x13a>
100114f8:	e094      	b.n	10011624 <inv_generate_fast_nomot+0x264>
100114fa:	d103      	bne.n	10011504 <inv_generate_fast_nomot+0x144>
100114fc:	6800      	ldr	r0, [r0, #0]
100114fe:	4288      	cmp	r0, r1
10011500:	d200      	bcs.n	10011504 <inv_generate_fast_nomot+0x144>
10011502:	e08f      	b.n	10011624 <inv_generate_fast_nomot+0x264>
10011504:	2292      	movs	r2, #146	; 0x92
10011506:	3301      	adds	r3, #1
10011508:	0092      	lsls	r2, r2, #2
1001150a:	50a3      	str	r3, [r4, r2]
1001150c:	2000      	movs	r0, #0
1001150e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011510:	f7ff fb96 	bl	10010c40 <inv_reset_packet>
10011514:	22f0      	movs	r2, #240	; 0xf0
10011516:	2300      	movs	r3, #0
10011518:	4c7e      	ldr	r4, [pc, #504]	; (10011714 <inv_generate_fast_nomot+0x354>)
1001151a:	0052      	lsls	r2, r2, #1
1001151c:	50a3      	str	r3, [r4, r2]
1001151e:	3208      	adds	r2, #8
10011520:	54a3      	strb	r3, [r4, r2]
10011522:	e764      	b.n	100113ee <inv_generate_fast_nomot+0x2e>
10011524:	23f4      	movs	r3, #244	; 0xf4
10011526:	2206      	movs	r2, #6
10011528:	005b      	lsls	r3, r3, #1
1001152a:	2001      	movs	r0, #1
1001152c:	54e2      	strb	r2, [r4, r3]
1001152e:	f7f9 f929 	bl	1000a784 <inv_set_motion_state>
10011532:	f7ff fb85 	bl	10010c40 <inv_reset_packet>
10011536:	2386      	movs	r3, #134	; 0x86
10011538:	005b      	lsls	r3, r3, #1
1001153a:	58e2      	ldr	r2, [r4, r3]
1001153c:	3310      	adds	r3, #16
1001153e:	50e2      	str	r2, [r4, r3]
10011540:	2280      	movs	r2, #128	; 0x80
10011542:	2300      	movs	r3, #0
10011544:	0052      	lsls	r2, r2, #1
10011546:	50a3      	str	r3, [r4, r2]
10011548:	3210      	adds	r2, #16
1001154a:	58a1      	ldr	r1, [r4, r2]
1001154c:	3210      	adds	r2, #16
1001154e:	50a1      	str	r1, [r4, r2]
10011550:	3a1c      	subs	r2, #28
10011552:	50a3      	str	r3, [r4, r2]
10011554:	3210      	adds	r2, #16
10011556:	58a1      	ldr	r1, [r4, r2]
10011558:	3210      	adds	r2, #16
1001155a:	50a1      	str	r1, [r4, r2]
1001155c:	3a1c      	subs	r2, #28
1001155e:	50a3      	str	r3, [r4, r2]
10011560:	3220      	adds	r2, #32
10011562:	58a1      	ldr	r1, [r4, r2]
10011564:	3204      	adds	r2, #4
10011566:	50a1      	str	r1, [r4, r2]
10011568:	3a14      	subs	r2, #20
1001156a:	50a3      	str	r3, [r4, r2]
1001156c:	3218      	adds	r2, #24
1001156e:	50a3      	str	r3, [r4, r2]
10011570:	e7cc      	b.n	1001150c <inv_generate_fast_nomot+0x14c>
10011572:	1c28      	adds	r0, r5, #0
10011574:	f7ff fe30 	bl	100111d8 <inv_detect_motion_by_gyro_accel>
10011578:	2800      	cmp	r0, #0
1001157a:	d100      	bne.n	1001157e <inv_generate_fast_nomot+0x1be>
1001157c:	e0c5      	b.n	1001170a <inv_generate_fast_nomot+0x34a>
1001157e:	2801      	cmp	r0, #1
10011580:	d1c4      	bne.n	1001150c <inv_generate_fast_nomot+0x14c>
10011582:	23b8      	movs	r3, #184	; 0xb8
10011584:	58ea      	ldr	r2, [r5, r3]
10011586:	3348      	adds	r3, #72	; 0x48
10011588:	421a      	tst	r2, r3
1001158a:	d100      	bne.n	1001158e <inv_generate_fast_nomot+0x1ce>
1001158c:	e0f1      	b.n	10011772 <inv_generate_fast_nomot+0x3b2>
1001158e:	58e2      	ldr	r2, [r4, r3]
10011590:	3304      	adds	r3, #4
10011592:	58e3      	ldr	r3, [r4, r3]
10011594:	4293      	cmp	r3, r2
10011596:	da00      	bge.n	1001159a <inv_generate_fast_nomot+0x1da>
10011598:	1c13      	adds	r3, r2, #0
1001159a:	2284      	movs	r2, #132	; 0x84
1001159c:	0052      	lsls	r2, r2, #1
1001159e:	58a2      	ldr	r2, [r4, r2]
100115a0:	4293      	cmp	r3, r2
100115a2:	da00      	bge.n	100115a6 <inv_generate_fast_nomot+0x1e6>
100115a4:	1c13      	adds	r3, r2, #0
100115a6:	1c21      	adds	r1, r4, #0
100115a8:	4e5b      	ldr	r6, [pc, #364]	; (10011718 <inv_generate_fast_nomot+0x358>)
100115aa:	31d1      	adds	r1, #209	; 0xd1
100115ac:	31ff      	adds	r1, #255	; 0xff
100115ae:	17da      	asrs	r2, r3, #31
100115b0:	600b      	str	r3, [r1, #0]
100115b2:	604a      	str	r2, [r1, #4]
100115b4:	68f1      	ldr	r1, [r6, #12]
100115b6:	4291      	cmp	r1, r2
100115b8:	db05      	blt.n	100115c6 <inv_generate_fast_nomot+0x206>
100115ba:	d000      	beq.n	100115be <inv_generate_fast_nomot+0x1fe>
100115bc:	e0ce      	b.n	1001175c <inv_generate_fast_nomot+0x39c>
100115be:	68b2      	ldr	r2, [r6, #8]
100115c0:	429a      	cmp	r2, r3
100115c2:	d300      	bcc.n	100115c6 <inv_generate_fast_nomot+0x206>
100115c4:	e0ca      	b.n	1001175c <inv_generate_fast_nomot+0x39c>
100115c6:	23f4      	movs	r3, #244	; 0xf4
100115c8:	2205      	movs	r2, #5
100115ca:	005b      	lsls	r3, r3, #1
100115cc:	54e2      	strb	r2, [r4, r3]
100115ce:	1c23      	adds	r3, r4, #0
100115d0:	33d9      	adds	r3, #217	; 0xd9
100115d2:	33ff      	adds	r3, #255	; 0xff
100115d4:	cb06      	ldmia	r3!, {r1, r2}
100115d6:	2396      	movs	r3, #150	; 0x96
100115d8:	2094      	movs	r0, #148	; 0x94
100115da:	009b      	lsls	r3, r3, #2
100115dc:	58e3      	ldr	r3, [r4, r3]
100115de:	0080      	lsls	r0, r0, #2
100115e0:	2b00      	cmp	r3, #0
100115e2:	d009      	beq.n	100115f8 <inv_generate_fast_nomot+0x238>
100115e4:	1825      	adds	r5, r4, r0
100115e6:	6868      	ldr	r0, [r5, #4]
100115e8:	4290      	cmp	r0, r2
100115ea:	db03      	blt.n	100115f4 <inv_generate_fast_nomot+0x234>
100115ec:	d106      	bne.n	100115fc <inv_generate_fast_nomot+0x23c>
100115ee:	6828      	ldr	r0, [r5, #0]
100115f0:	4288      	cmp	r0, r1
100115f2:	d203      	bcs.n	100115fc <inv_generate_fast_nomot+0x23c>
100115f4:	2094      	movs	r0, #148	; 0x94
100115f6:	0080      	lsls	r0, r0, #2
100115f8:	1820      	adds	r0, r4, r0
100115fa:	c006      	stmia	r0!, {r1, r2}
100115fc:	2296      	movs	r2, #150	; 0x96
100115fe:	3301      	adds	r3, #1
10011600:	0092      	lsls	r2, r2, #2
10011602:	50a3      	str	r3, [r4, r2]
10011604:	1c23      	adds	r3, r4, #0
10011606:	33f1      	adds	r3, #241	; 0xf1
10011608:	33ff      	adds	r3, #255	; 0xff
1001160a:	cb06      	ldmia	r3!, {r1, r2}
1001160c:	2392      	movs	r3, #146	; 0x92
1001160e:	2090      	movs	r0, #144	; 0x90
10011610:	009b      	lsls	r3, r3, #2
10011612:	58e3      	ldr	r3, [r4, r3]
10011614:	0080      	lsls	r0, r0, #2
10011616:	2b00      	cmp	r3, #0
10011618:	d006      	beq.n	10011628 <inv_generate_fast_nomot+0x268>
1001161a:	1825      	adds	r5, r4, r0
1001161c:	6868      	ldr	r0, [r5, #4]
1001161e:	4290      	cmp	r0, r2
10011620:	db00      	blt.n	10011624 <inv_generate_fast_nomot+0x264>
10011622:	e0ae      	b.n	10011782 <inv_generate_fast_nomot+0x3c2>
10011624:	2090      	movs	r0, #144	; 0x90
10011626:	0080      	lsls	r0, r0, #2
10011628:	1820      	adds	r0, r4, r0
1001162a:	c006      	stmia	r0!, {r1, r2}
1001162c:	e76a      	b.n	10011504 <inv_generate_fast_nomot+0x144>
1001162e:	23f4      	movs	r3, #244	; 0xf4
10011630:	2203      	movs	r2, #3
10011632:	005b      	lsls	r3, r3, #1
10011634:	1c28      	adds	r0, r5, #0
10011636:	54e2      	strb	r2, [r4, r3]
10011638:	f7ff fbc0 	bl	10010dbc <inv_fast_nomot_set_gyro_bias>
1001163c:	f7ff fb00 	bl	10010c40 <inv_reset_packet>
10011640:	e764      	b.n	1001150c <inv_generate_fast_nomot+0x14c>
10011642:	2398      	movs	r3, #152	; 0x98
10011644:	58e3      	ldr	r3, [r4, r3]
10011646:	2b01      	cmp	r3, #1
10011648:	d000      	beq.n	1001164c <inv_generate_fast_nomot+0x28c>
1001164a:	e75f      	b.n	1001150c <inv_generate_fast_nomot+0x14c>
1001164c:	1c28      	adds	r0, r5, #0
1001164e:	f7ff fdc3 	bl	100111d8 <inv_detect_motion_by_gyro_accel>
10011652:	2800      	cmp	r0, #0
10011654:	d17b      	bne.n	1001174e <inv_generate_fast_nomot+0x38e>
10011656:	23f4      	movs	r3, #244	; 0xf4
10011658:	2205      	movs	r2, #5
1001165a:	005b      	lsls	r3, r3, #1
1001165c:	54e2      	strb	r2, [r4, r3]
1001165e:	2386      	movs	r3, #134	; 0x86
10011660:	005b      	lsls	r3, r3, #1
10011662:	58e2      	ldr	r2, [r4, r3]
10011664:	3310      	adds	r3, #16
10011666:	50e2      	str	r2, [r4, r3]
10011668:	2280      	movs	r2, #128	; 0x80
1001166a:	2300      	movs	r3, #0
1001166c:	0052      	lsls	r2, r2, #1
1001166e:	50a3      	str	r3, [r4, r2]
10011670:	3210      	adds	r2, #16
10011672:	58a1      	ldr	r1, [r4, r2]
10011674:	3210      	adds	r2, #16
10011676:	50a1      	str	r1, [r4, r2]
10011678:	3a1c      	subs	r2, #28
1001167a:	50a3      	str	r3, [r4, r2]
1001167c:	3210      	adds	r2, #16
1001167e:	58a1      	ldr	r1, [r4, r2]
10011680:	3210      	adds	r2, #16
10011682:	50a1      	str	r1, [r4, r2]
10011684:	3a1c      	subs	r2, #28
10011686:	50a3      	str	r3, [r4, r2]
10011688:	3220      	adds	r2, #32
1001168a:	58a1      	ldr	r1, [r4, r2]
1001168c:	3204      	adds	r2, #4
1001168e:	50a1      	str	r1, [r4, r2]
10011690:	3a14      	subs	r2, #20
10011692:	50a3      	str	r3, [r4, r2]
10011694:	3218      	adds	r2, #24
10011696:	50a3      	str	r3, [r4, r2]
10011698:	f7ff fd10 	bl	100110bc <inv_reset_min_max_gyro_accel_statistics>
1001169c:	e736      	b.n	1001150c <inv_generate_fast_nomot+0x14c>
1001169e:	22f0      	movs	r2, #240	; 0xf0
100116a0:	0052      	lsls	r2, r2, #1
100116a2:	58a3      	ldr	r3, [r4, r2]
100116a4:	1c59      	adds	r1, r3, #1
100116a6:	50a1      	str	r1, [r4, r2]
100116a8:	2b09      	cmp	r3, #9
100116aa:	dc00      	bgt.n	100116ae <inv_generate_fast_nomot+0x2ee>
100116ac:	e72e      	b.n	1001150c <inv_generate_fast_nomot+0x14c>
100116ae:	f7ff fac7 	bl	10010c40 <inv_reset_packet>
100116b2:	23f4      	movs	r3, #244	; 0xf4
100116b4:	2201      	movs	r2, #1
100116b6:	005b      	lsls	r3, r3, #1
100116b8:	54e2      	strb	r2, [r4, r3]
100116ba:	e727      	b.n	1001150c <inv_generate_fast_nomot+0x14c>
100116bc:	1c28      	adds	r0, r5, #0
100116be:	f7ff fd8b 	bl	100111d8 <inv_detect_motion_by_gyro_accel>
100116c2:	1e05      	subs	r5, r0, #0
100116c4:	2d01      	cmp	r5, #1
100116c6:	d03d      	beq.n	10011744 <inv_generate_fast_nomot+0x384>
100116c8:	2800      	cmp	r0, #0
100116ca:	d000      	beq.n	100116ce <inv_generate_fast_nomot+0x30e>
100116cc:	e71e      	b.n	1001150c <inv_generate_fast_nomot+0x14c>
100116ce:	f7ff fab7 	bl	10010c40 <inv_reset_packet>
100116d2:	2386      	movs	r3, #134	; 0x86
100116d4:	005b      	lsls	r3, r3, #1
100116d6:	58e2      	ldr	r2, [r4, r3]
100116d8:	3310      	adds	r3, #16
100116da:	50e2      	str	r2, [r4, r3]
100116dc:	3b1c      	subs	r3, #28
100116de:	50e5      	str	r5, [r4, r3]
100116e0:	3310      	adds	r3, #16
100116e2:	58e2      	ldr	r2, [r4, r3]
100116e4:	3310      	adds	r3, #16
100116e6:	50e2      	str	r2, [r4, r3]
100116e8:	3b1c      	subs	r3, #28
100116ea:	50e5      	str	r5, [r4, r3]
100116ec:	3310      	adds	r3, #16
100116ee:	58e2      	ldr	r2, [r4, r3]
100116f0:	3310      	adds	r3, #16
100116f2:	50e2      	str	r2, [r4, r3]
100116f4:	3b1c      	subs	r3, #28
100116f6:	50e5      	str	r5, [r4, r3]
100116f8:	3320      	adds	r3, #32
100116fa:	58e2      	ldr	r2, [r4, r3]
100116fc:	3304      	adds	r3, #4
100116fe:	50e2      	str	r2, [r4, r3]
10011700:	3b14      	subs	r3, #20
10011702:	50e5      	str	r5, [r4, r3]
10011704:	3318      	adds	r3, #24
10011706:	50e5      	str	r5, [r4, r3]
10011708:	e700      	b.n	1001150c <inv_generate_fast_nomot+0x14c>
1001170a:	23f4      	movs	r3, #244	; 0xf4
1001170c:	2205      	movs	r2, #5
1001170e:	005b      	lsls	r3, r3, #1
10011710:	54e2      	strb	r2, [r4, r3]
10011712:	e6fb      	b.n	1001150c <inv_generate_fast_nomot+0x14c>
10011714:	1001d5f8 	.word	0x1001d5f8
10011718:	1001c0c0 	.word	0x1001c0c0
1001171c:	10019eb8 	.word	0x10019eb8
10011720:	2783      	movs	r7, #131	; 0x83
10011722:	6b33      	ldr	r3, [r6, #48]	; 0x30
10011724:	00bf      	lsls	r7, r7, #2
10011726:	0058      	lsls	r0, r3, #1
10011728:	6b73      	ldr	r3, [r6, #52]	; 0x34
1001172a:	6020      	str	r0, [r4, #0]
1001172c:	3301      	adds	r3, #1
1001172e:	51e3      	str	r3, [r4, r7]
10011730:	f004 faac 	bl	10015c8c <__aeabi_i2f>
10011734:	f7fe ff2a 	bl	1001058c <sqrtf>
10011738:	2385      	movs	r3, #133	; 0x85
1001173a:	009b      	lsls	r3, r3, #2
1001173c:	50e0      	str	r0, [r4, r3]
1001173e:	59e1      	ldr	r1, [r4, r7]
10011740:	6b70      	ldr	r0, [r6, #52]	; 0x34
10011742:	e669      	b.n	10011418 <inv_generate_fast_nomot+0x58>
10011744:	23f4      	movs	r3, #244	; 0xf4
10011746:	2202      	movs	r2, #2
10011748:	005b      	lsls	r3, r3, #1
1001174a:	54e2      	strb	r2, [r4, r3]
1001174c:	e6de      	b.n	1001150c <inv_generate_fast_nomot+0x14c>
1001174e:	2801      	cmp	r0, #1
10011750:	d185      	bne.n	1001165e <inv_generate_fast_nomot+0x29e>
10011752:	23f4      	movs	r3, #244	; 0xf4
10011754:	2202      	movs	r2, #2
10011756:	005b      	lsls	r3, r3, #1
10011758:	54e2      	strb	r2, [r4, r3]
1001175a:	e780      	b.n	1001165e <inv_generate_fast_nomot+0x29e>
1001175c:	2394      	movs	r3, #148	; 0x94
1001175e:	2296      	movs	r2, #150	; 0x96
10011760:	005b      	lsls	r3, r3, #1
10011762:	0052      	lsls	r2, r2, #1
10011764:	58a2      	ldr	r2, [r4, r2]
10011766:	58e3      	ldr	r3, [r4, r3]
10011768:	1a9b      	subs	r3, r3, r2
1001176a:	6a32      	ldr	r2, [r6, #32]
1001176c:	4293      	cmp	r3, r2
1001176e:	d200      	bcs.n	10011772 <inv_generate_fast_nomot+0x3b2>
10011770:	e72d      	b.n	100115ce <inv_generate_fast_nomot+0x20e>
10011772:	23f4      	movs	r3, #244	; 0xf4
10011774:	2204      	movs	r2, #4
10011776:	005b      	lsls	r3, r3, #1
10011778:	1c28      	adds	r0, r5, #0
1001177a:	54e2      	strb	r2, [r4, r3]
1001177c:	f7ff fb1e 	bl	10010dbc <inv_fast_nomot_set_gyro_bias>
10011780:	e725      	b.n	100115ce <inv_generate_fast_nomot+0x20e>
10011782:	4290      	cmp	r0, r2
10011784:	d000      	beq.n	10011788 <inv_generate_fast_nomot+0x3c8>
10011786:	e6bd      	b.n	10011504 <inv_generate_fast_nomot+0x144>
10011788:	6828      	ldr	r0, [r5, #0]
1001178a:	4288      	cmp	r0, r1
1001178c:	d200      	bcs.n	10011790 <inv_generate_fast_nomot+0x3d0>
1001178e:	e749      	b.n	10011624 <inv_generate_fast_nomot+0x264>
10011790:	e6b8      	b.n	10011504 <inv_generate_fast_nomot+0x144>
10011792:	46c0      	nop			; (mov r8, r8)

10011794 <inv_set_default_number_of_samples>:
10011794:	2300      	movs	r3, #0
10011796:	b510      	push	{r4, lr}
10011798:	1040      	asrs	r0, r0, #1
1001179a:	d10f      	bne.n	100117bc <inv_set_default_number_of_samples+0x28>
1001179c:	2001      	movs	r0, #1
1001179e:	3301      	adds	r3, #1
100117a0:	4098      	lsls	r0, r3
100117a2:	4c08      	ldr	r4, [pc, #32]	; (100117c4 <inv_set_default_number_of_samples+0x30>)
100117a4:	6363      	str	r3, [r4, #52]	; 0x34
100117a6:	6320      	str	r0, [r4, #48]	; 0x30
100117a8:	f004 fa70 	bl	10015c8c <__aeabi_i2f>
100117ac:	f7fe feee 	bl	1001058c <sqrtf>
100117b0:	2319      	movs	r3, #25
100117b2:	6b62      	ldr	r2, [r4, #52]	; 0x34
100117b4:	63a0      	str	r0, [r4, #56]	; 0x38
100117b6:	4093      	lsls	r3, r2
100117b8:	63e3      	str	r3, [r4, #60]	; 0x3c
100117ba:	bd10      	pop	{r4, pc}
100117bc:	3301      	adds	r3, #1
100117be:	2800      	cmp	r0, #0
100117c0:	dcea      	bgt.n	10011798 <inv_set_default_number_of_samples+0x4>
100117c2:	e7eb      	b.n	1001179c <inv_set_default_number_of_samples+0x8>
100117c4:	1001c0c0 	.word	0x1001c0c0

100117c8 <inv_init_fast_nomot>:
100117c8:	2298      	movs	r2, #152	; 0x98
100117ca:	b538      	push	{r3, r4, r5, lr}
100117cc:	4d15      	ldr	r5, [pc, #84]	; (10011824 <inv_init_fast_nomot+0x5c>)
100117ce:	2100      	movs	r1, #0
100117d0:	1c28      	adds	r0, r5, #0
100117d2:	0092      	lsls	r2, r2, #2
100117d4:	f006 faf9 	bl	10017dca <memset>
100117d8:	4c13      	ldr	r4, [pc, #76]	; (10011828 <inv_init_fast_nomot+0x60>)
100117da:	2100      	movs	r1, #0
100117dc:	2240      	movs	r2, #64	; 0x40
100117de:	1c20      	adds	r0, r4, #0
100117e0:	f006 faf3 	bl	10017dca <memset>
100117e4:	2007      	movs	r0, #7
100117e6:	f7ff f9f3 	bl	10010bd0 <inv_init_maxmin>
100117ea:	2300      	movs	r3, #0
100117ec:	4a0f      	ldr	r2, [pc, #60]	; (1001182c <inv_init_fast_nomot+0x64>)
100117ee:	2019      	movs	r0, #25
100117f0:	61a2      	str	r2, [r4, #24]
100117f2:	61e3      	str	r3, [r4, #28]
100117f4:	2214      	movs	r2, #20
100117f6:	2300      	movs	r3, #0
100117f8:	60a2      	str	r2, [r4, #8]
100117fa:	60e3      	str	r3, [r4, #12]
100117fc:	2296      	movs	r2, #150	; 0x96
100117fe:	2300      	movs	r3, #0
10011800:	0092      	lsls	r2, r2, #2
10011802:	6122      	str	r2, [r4, #16]
10011804:	6163      	str	r3, [r4, #20]
10011806:	4b0a      	ldr	r3, [pc, #40]	; (10011830 <inv_init_fast_nomot+0x68>)
10011808:	2201      	movs	r2, #1
1001180a:	6223      	str	r3, [r4, #32]
1001180c:	23f2      	movs	r3, #242	; 0xf2
1001180e:	005b      	lsls	r3, r3, #1
10011810:	50ea      	str	r2, [r5, r3]
10011812:	f7ff ffbf 	bl	10011794 <inv_set_default_number_of_samples>
10011816:	2382      	movs	r3, #130	; 0x82
10011818:	2200      	movs	r2, #0
1001181a:	009b      	lsls	r3, r3, #2
1001181c:	50ea      	str	r2, [r5, r3]
1001181e:	2000      	movs	r0, #0
10011820:	bd38      	pop	{r3, r4, r5, pc}
10011822:	46c0      	nop			; (mov r8, r8)
10011824:	1001d5f8 	.word	0x1001d5f8
10011828:	1001c0c0 	.word	0x1001c0c0
1001182c:	000005dc 	.word	0x000005dc
10011830:	2faf0800 	.word	0x2faf0800

10011834 <inv_stop_fast_nomot>:
10011834:	b508      	push	{r3, lr}
10011836:	2001      	movs	r0, #1
10011838:	f7f8 ffa4 	bl	1000a784 <inv_set_motion_state>
1001183c:	4801      	ldr	r0, [pc, #4]	; (10011844 <inv_stop_fast_nomot+0x10>)
1001183e:	f7f8 f9d5 	bl	10009bec <inv_unregister_data_cb>
10011842:	bd08      	pop	{r3, pc}
10011844:	100113c1 	.word	0x100113c1

10011848 <inv_enable_fast_nomot>:
10011848:	b508      	push	{r3, lr}
1001184a:	f7ff ffbd 	bl	100117c8 <inv_init_fast_nomot>
1001184e:	2800      	cmp	r0, #0
10011850:	d102      	bne.n	10011858 <inv_enable_fast_nomot+0x10>
10011852:	4802      	ldr	r0, [pc, #8]	; (1001185c <inv_enable_fast_nomot+0x14>)
10011854:	f7f9 f898 	bl	1000a988 <inv_register_mpl_start_notification>
10011858:	bd08      	pop	{r3, pc}
1001185a:	46c0      	nop			; (mov r8, r8)
1001185c:	10010c69 	.word	0x10010c69

10011860 <inv_disable_fast_nomot>:
10011860:	b508      	push	{r3, lr}
10011862:	f7ff ffe7 	bl	10011834 <inv_stop_fast_nomot>
10011866:	4802      	ldr	r0, [pc, #8]	; (10011870 <inv_disable_fast_nomot+0x10>)
10011868:	f7f9 f85e 	bl	1000a928 <inv_unregister_mpl_start_notification>
1001186c:	bd08      	pop	{r3, pc}
1001186e:	46c0      	nop			; (mov r8, r8)
10011870:	10010c69 	.word	0x10010c69

10011874 <inv_get_fnm_gyro_no_motion_param>:
10011874:	4b02      	ldr	r3, [pc, #8]	; (10011880 <inv_get_fnm_gyro_no_motion_param+0xc>)
10011876:	33f1      	adds	r3, #241	; 0xf1
10011878:	33ff      	adds	r3, #255	; 0xff
1001187a:	6818      	ldr	r0, [r3, #0]
1001187c:	6859      	ldr	r1, [r3, #4]
1001187e:	4770      	bx	lr
10011880:	1001d5f8 	.word	0x1001d5f8

10011884 <inv_fnm_debug_print>:
10011884:	4770      	bx	lr
10011886:	46c0      	nop			; (mov r8, r8)

10011888 <inv_start_9x_sensor_fusion>:
10011888:	2196      	movs	r1, #150	; 0x96
1001188a:	b508      	push	{r3, lr}
1001188c:	4802      	ldr	r0, [pc, #8]	; (10011898 <inv_start_9x_sensor_fusion+0x10>)
1001188e:	0089      	lsls	r1, r1, #2
10011890:	2204      	movs	r2, #4
10011892:	f7f8 f92d 	bl	10009af0 <inv_register_data_cb>
10011896:	bd08      	pop	{r3, pc}
10011898:	10011e71 	.word	0x10011e71

1001189c <inv_filter_correction_angle>:
1001189c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001189e:	4657      	mov	r7, sl
100118a0:	464e      	mov	r6, r9
100118a2:	4645      	mov	r5, r8
100118a4:	b4e0      	push	{r5, r6, r7}
100118a6:	1c1f      	adds	r7, r3, #0
100118a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
100118aa:	1c0e      	adds	r6, r1, #0
100118ac:	4690      	mov	r8, r2
100118ae:	2b00      	cmp	r3, #0
100118b0:	da00      	bge.n	100118b4 <inv_filter_correction_angle+0x18>
100118b2:	e0b7      	b.n	10011a24 <inv_filter_correction_angle+0x188>
100118b4:	23bc      	movs	r3, #188	; 0xbc
100118b6:	58c3      	ldr	r3, [r0, r3]
100118b8:	3b03      	subs	r3, #3
100118ba:	425a      	negs	r2, r3
100118bc:	415a      	adcs	r2, r3
100118be:	4691      	mov	r9, r2
100118c0:	4c67      	ldr	r4, [pc, #412]	; (10011a60 <inv_filter_correction_angle+0x1c4>)
100118c2:	2224      	movs	r2, #36	; 0x24
100118c4:	1d21      	adds	r1, r4, #4
100118c6:	1c20      	adds	r0, r4, #0
100118c8:	1c25      	adds	r5, r4, #0
100118ca:	f006 fa69 	bl	10017da0 <memmove>
100118ce:	2000      	movs	r0, #0
100118d0:	6266      	str	r6, [r4, #36]	; 0x24
100118d2:	3528      	adds	r5, #40	; 0x28
100118d4:	cc02      	ldmia	r4!, {r1}
100118d6:	f003 fbc5 	bl	10015064 <__aeabi_fadd>
100118da:	42ac      	cmp	r4, r5
100118dc:	d1fa      	bne.n	100118d4 <inv_filter_correction_angle+0x38>
100118de:	4961      	ldr	r1, [pc, #388]	; (10011a64 <inv_filter_correction_angle+0x1c8>)
100118e0:	f003 fd36 	bl	10015350 <__aeabi_fdiv>
100118e4:	23e4      	movs	r3, #228	; 0xe4
100118e6:	4c60      	ldr	r4, [pc, #384]	; (10011a68 <inv_filter_correction_angle+0x1cc>)
100118e8:	4682      	mov	sl, r0
100118ea:	50e0      	str	r0, [r4, r3]
100118ec:	4643      	mov	r3, r8
100118ee:	2b31      	cmp	r3, #49	; 0x31
100118f0:	dd18      	ble.n	10011924 <inv_filter_correction_angle+0x88>
100118f2:	238e      	movs	r3, #142	; 0x8e
100118f4:	22c8      	movs	r2, #200	; 0xc8
100118f6:	005b      	lsls	r3, r3, #1
100118f8:	50e2      	str	r2, [r4, r3]
100118fa:	1c38      	adds	r0, r7, #0
100118fc:	f004 f9c6 	bl	10015c8c <__aeabi_i2f>
10011900:	4b5a      	ldr	r3, [pc, #360]	; (10011a6c <inv_filter_correction_angle+0x1d0>)
10011902:	1c05      	adds	r5, r0, #0
10011904:	1c30      	adds	r0, r6, #0
10011906:	4598      	cmp	r8, r3
10011908:	dc00      	bgt.n	1001190c <inv_filter_correction_angle+0x70>
1001190a:	e07a      	b.n	10011a02 <inv_filter_correction_angle+0x166>
1001190c:	4958      	ldr	r1, [pc, #352]	; (10011a70 <inv_filter_correction_angle+0x1d4>)
1001190e:	f003 fd1f 	bl	10015350 <__aeabi_fdiv>
10011912:	1c01      	adds	r1, r0, #0
10011914:	1c28      	adds	r0, r5, #0
10011916:	f003 fee5 	bl	100156e4 <__aeabi_fmul>
1001191a:	4956      	ldr	r1, [pc, #344]	; (10011a74 <inv_filter_correction_angle+0x1d8>)
1001191c:	f003 fd18 	bl	10015350 <__aeabi_fdiv>
10011920:	1c05      	adds	r5, r0, #0
10011922:	e023      	b.n	1001196c <inv_filter_correction_angle+0xd0>
10011924:	1c38      	adds	r0, r7, #0
10011926:	4954      	ldr	r1, [pc, #336]	; (10011a78 <inv_filter_correction_angle+0x1dc>)
10011928:	f003 f92e 	bl	10014b88 <__aeabi_idiv>
1001192c:	258e      	movs	r5, #142	; 0x8e
1001192e:	0083      	lsls	r3, r0, #2
10011930:	006d      	lsls	r5, r5, #1
10011932:	1818      	adds	r0, r3, r0
10011934:	5963      	ldr	r3, [r4, r5]
10011936:	4698      	mov	r8, r3
10011938:	4480      	add	r8, r0
1001193a:	4643      	mov	r3, r8
1001193c:	5163      	str	r3, [r4, r5]
1001193e:	2b00      	cmp	r3, #0
10011940:	da00      	bge.n	10011944 <inv_filter_correction_angle+0xa8>
10011942:	e072      	b.n	10011a2a <inv_filter_correction_angle+0x18e>
10011944:	494d      	ldr	r1, [pc, #308]	; (10011a7c <inv_filter_correction_angle+0x1e0>)
10011946:	1c30      	adds	r0, r6, #0
10011948:	f003 fd02 	bl	10015350 <__aeabi_fdiv>
1001194c:	1c05      	adds	r5, r0, #0
1001194e:	1c38      	adds	r0, r7, #0
10011950:	f004 f99c 	bl	10015c8c <__aeabi_i2f>
10011954:	1c01      	adds	r1, r0, #0
10011956:	1c28      	adds	r0, r5, #0
10011958:	f003 fec4 	bl	100156e4 <__aeabi_fmul>
1001195c:	4945      	ldr	r1, [pc, #276]	; (10011a74 <inv_filter_correction_angle+0x1d8>)
1001195e:	f003 fcf7 	bl	10015350 <__aeabi_fdiv>
10011962:	4643      	mov	r3, r8
10011964:	1c05      	adds	r5, r0, #0
10011966:	2b00      	cmp	r3, #0
10011968:	d100      	bne.n	1001196c <inv_filter_correction_angle+0xd0>
1001196a:	e070      	b.n	10011a4e <inv_filter_correction_angle+0x1b2>
1001196c:	2390      	movs	r3, #144	; 0x90
1001196e:	005b      	lsls	r3, r3, #1
10011970:	58e3      	ldr	r3, [r4, r3]
10011972:	2b00      	cmp	r3, #0
10011974:	d000      	beq.n	10011978 <inv_filter_correction_angle+0xdc>
10011976:	1c35      	adds	r5, r6, #0
10011978:	4b41      	ldr	r3, [pc, #260]	; (10011a80 <inv_filter_correction_angle+0x1e4>)
1001197a:	429f      	cmp	r7, r3
1001197c:	d050      	beq.n	10011a20 <inv_filter_correction_angle+0x184>
1001197e:	1c28      	adds	r0, r5, #0
10011980:	2100      	movs	r1, #0
10011982:	f003 fa37 	bl	10014df4 <__aeabi_fcmpeq>
10011986:	23e8      	movs	r3, #232	; 0xe8
10011988:	2800      	cmp	r0, #0
1001198a:	d045      	beq.n	10011a18 <inv_filter_correction_angle+0x17c>
1001198c:	58e0      	ldr	r0, [r4, r3]
1001198e:	4651      	mov	r1, sl
10011990:	f003 ffbc 	bl	1001590c <__aeabi_fsub>
10011994:	0040      	lsls	r0, r0, #1
10011996:	0840      	lsrs	r0, r0, #1
10011998:	f005 ffcc 	bl	10017934 <__aeabi_f2d>
1001199c:	4a39      	ldr	r2, [pc, #228]	; (10011a84 <inv_filter_correction_angle+0x1e8>)
1001199e:	4b3a      	ldr	r3, [pc, #232]	; (10011a88 <inv_filter_correction_angle+0x1ec>)
100119a0:	f003 fa08 	bl	10014db4 <__aeabi_dcmpgt>
100119a4:	2800      	cmp	r0, #0
100119a6:	d026      	beq.n	100119f6 <inv_filter_correction_angle+0x15a>
100119a8:	23b8      	movs	r3, #184	; 0xb8
100119aa:	2100      	movs	r1, #0
100119ac:	58e0      	ldr	r0, [r4, r3]
100119ae:	f003 fa21 	bl	10014df4 <__aeabi_fcmpeq>
100119b2:	2800      	cmp	r0, #0
100119b4:	d01f      	beq.n	100119f6 <inv_filter_correction_angle+0x15a>
100119b6:	464b      	mov	r3, r9
100119b8:	2b01      	cmp	r3, #1
100119ba:	d11c      	bne.n	100119f6 <inv_filter_correction_angle+0x15a>
100119bc:	22c8      	movs	r2, #200	; 0xc8
100119be:	331c      	adds	r3, #28
100119c0:	33ff      	adds	r3, #255	; 0xff
100119c2:	50e2      	str	r2, [r4, r3]
100119c4:	1c30      	adds	r0, r6, #0
100119c6:	f005 ffb5 	bl	10017934 <__aeabi_f2d>
100119ca:	2200      	movs	r2, #0
100119cc:	4b2f      	ldr	r3, [pc, #188]	; (10011a8c <inv_filter_correction_angle+0x1f0>)
100119ce:	f004 fd0f 	bl	100163f0 <__aeabi_ddiv>
100119d2:	1c04      	adds	r4, r0, #0
100119d4:	1c38      	adds	r0, r7, #0
100119d6:	1c0d      	adds	r5, r1, #0
100119d8:	f005 ff32 	bl	10017840 <__aeabi_i2d>
100119dc:	1c02      	adds	r2, r0, #0
100119de:	1c0b      	adds	r3, r1, #0
100119e0:	1c20      	adds	r0, r4, #0
100119e2:	1c29      	adds	r1, r5, #0
100119e4:	f005 f928 	bl	10016c38 <__aeabi_dmul>
100119e8:	2200      	movs	r2, #0
100119ea:	4b29      	ldr	r3, [pc, #164]	; (10011a90 <inv_filter_correction_angle+0x1f4>)
100119ec:	f004 fd00 	bl	100163f0 <__aeabi_ddiv>
100119f0:	f005 fff4 	bl	100179dc <__aeabi_d2f>
100119f4:	1c05      	adds	r5, r0, #0
100119f6:	1c28      	adds	r0, r5, #0
100119f8:	bc1c      	pop	{r2, r3, r4}
100119fa:	4690      	mov	r8, r2
100119fc:	4699      	mov	r9, r3
100119fe:	46a2      	mov	sl, r4
10011a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011a02:	4924      	ldr	r1, [pc, #144]	; (10011a94 <inv_filter_correction_angle+0x1f8>)
10011a04:	f003 fca4 	bl	10015350 <__aeabi_fdiv>
10011a08:	1c29      	adds	r1, r5, #0
10011a0a:	f003 fe6b 	bl	100156e4 <__aeabi_fmul>
10011a0e:	4919      	ldr	r1, [pc, #100]	; (10011a74 <inv_filter_correction_angle+0x1d8>)
10011a10:	f003 fc9e 	bl	10015350 <__aeabi_fdiv>
10011a14:	1c05      	adds	r5, r0, #0
10011a16:	e7a9      	b.n	1001196c <inv_filter_correction_angle+0xd0>
10011a18:	4652      	mov	r2, sl
10011a1a:	4650      	mov	r0, sl
10011a1c:	50e2      	str	r2, [r4, r3]
10011a1e:	e7b6      	b.n	1001198e <inv_filter_correction_angle+0xf2>
10011a20:	1c35      	adds	r5, r6, #0
10011a22:	e7ac      	b.n	1001197e <inv_filter_correction_angle+0xe2>
10011a24:	2300      	movs	r3, #0
10011a26:	4699      	mov	r9, r3
10011a28:	e74a      	b.n	100118c0 <inv_filter_correction_angle+0x24>
10011a2a:	2300      	movs	r3, #0
10011a2c:	4913      	ldr	r1, [pc, #76]	; (10011a7c <inv_filter_correction_angle+0x1e0>)
10011a2e:	5163      	str	r3, [r4, r5]
10011a30:	1c30      	adds	r0, r6, #0
10011a32:	f003 fc8d 	bl	10015350 <__aeabi_fdiv>
10011a36:	1c05      	adds	r5, r0, #0
10011a38:	1c38      	adds	r0, r7, #0
10011a3a:	f004 f927 	bl	10015c8c <__aeabi_i2f>
10011a3e:	1c01      	adds	r1, r0, #0
10011a40:	1c28      	adds	r0, r5, #0
10011a42:	f003 fe4f 	bl	100156e4 <__aeabi_fmul>
10011a46:	490b      	ldr	r1, [pc, #44]	; (10011a74 <inv_filter_correction_angle+0x1d8>)
10011a48:	f003 fc82 	bl	10015350 <__aeabi_fdiv>
10011a4c:	1c05      	adds	r5, r0, #0
10011a4e:	2394      	movs	r3, #148	; 0x94
10011a50:	005b      	lsls	r3, r3, #1
10011a52:	58e3      	ldr	r3, [r4, r3]
10011a54:	2b01      	cmp	r3, #1
10011a56:	d000      	beq.n	10011a5a <inv_filter_correction_angle+0x1be>
10011a58:	e788      	b.n	1001196c <inv_filter_correction_angle+0xd0>
10011a5a:	2500      	movs	r5, #0
10011a5c:	e786      	b.n	1001196c <inv_filter_correction_angle+0xd0>
10011a5e:	46c0      	nop			; (mov r8, r8)
10011a60:	1001d914 	.word	0x1001d914
10011a64:	41200000 	.word	0x41200000
10011a68:	1001d858 	.word	0x1001d858
10011a6c:	000003e7 	.word	0x000003e7
10011a70:	42480000 	.word	0x42480000
10011a74:	459c4000 	.word	0x459c4000
10011a78:	ffffec78 	.word	0xffffec78
10011a7c:	43c80000 	.word	0x43c80000
10011a80:	000f4240 	.word	0x000f4240
10011a84:	cac08312 	.word	0xcac08312
10011a88:	3fb645a1 	.word	0x3fb645a1
10011a8c:	40790000 	.word	0x40790000
10011a90:	40b38800 	.word	0x40b38800
10011a94:	43480000 	.word	0x43480000

10011a98 <inv_perform_9x_fusion>:
10011a98:	b5f0      	push	{r4, r5, r6, r7, lr}
10011a9a:	465f      	mov	r7, fp
10011a9c:	4656      	mov	r6, sl
10011a9e:	464d      	mov	r5, r9
10011aa0:	4644      	mov	r4, r8
10011aa2:	2300      	movs	r3, #0
10011aa4:	b4f0      	push	{r4, r5, r6, r7}
10011aa6:	b0ab      	sub	sp, #172	; 0xac
10011aa8:	9303      	str	r3, [sp, #12]
10011aaa:	9304      	str	r3, [sp, #16]
10011aac:	9305      	str	r3, [sp, #20]
10011aae:	4fd3      	ldr	r7, [pc, #844]	; (10011dfc <inv_perform_9x_fusion+0x364>)
10011ab0:	3321      	adds	r3, #33	; 0x21
10011ab2:	33ff      	adds	r3, #255	; 0xff
10011ab4:	58fa      	ldr	r2, [r7, r3]
10011ab6:	2a03      	cmp	r2, #3
10011ab8:	d100      	bne.n	10011abc <inv_perform_9x_fusion+0x24>
10011aba:	e19b      	b.n	10011df4 <inv_perform_9x_fusion+0x35c>
10011abc:	2400      	movs	r4, #0
10011abe:	9001      	str	r0, [sp, #4]
10011ac0:	1c23      	adds	r3, r4, #0
10011ac2:	33a8      	adds	r3, #168	; 0xa8
10011ac4:	58f8      	ldr	r0, [r7, r3]
10011ac6:	f004 f8e1 	bl	10015c8c <__aeabi_i2f>
10011aca:	21c2      	movs	r1, #194	; 0xc2
10011acc:	0589      	lsls	r1, r1, #22
10011ace:	f003 fe09 	bl	100156e4 <__aeabi_fmul>
10011ad2:	221c      	movs	r2, #28
10011ad4:	ab02      	add	r3, sp, #8
10011ad6:	189b      	adds	r3, r3, r2
10011ad8:	5118      	str	r0, [r3, r4]
10011ada:	3404      	adds	r4, #4
10011adc:	2c10      	cmp	r4, #16
10011ade:	d1ef      	bne.n	10011ac0 <inv_perform_9x_fusion+0x28>
10011ae0:	ab1d      	add	r3, sp, #116	; 0x74
10011ae2:	1c18      	adds	r0, r3, #0
10011ae4:	ac06      	add	r4, sp, #24
10011ae6:	469b      	mov	fp, r3
10011ae8:	f7f8 fec4 	bl	1000a874 <inv_get_6axis_quaternion>
10011aec:	1c20      	adds	r0, r4, #0
10011aee:	f7f8 fe75 	bl	1000a7dc <inv_get_gravity>
10011af2:	1c39      	adds	r1, r7, #0
10011af4:	223c      	movs	r2, #60	; 0x3c
10011af6:	310c      	adds	r1, #12
10011af8:	1c38      	adds	r0, r7, #0
10011afa:	f006 f951 	bl	10017da0 <memmove>
10011afe:	1c38      	adds	r0, r7, #0
10011b00:	1c39      	adds	r1, r7, #0
10011b02:	2250      	movs	r2, #80	; 0x50
10011b04:	3158      	adds	r1, #88	; 0x58
10011b06:	3048      	adds	r0, #72	; 0x48
10011b08:	f006 f94a 	bl	10017da0 <memmove>
10011b0c:	1c3b      	adds	r3, r7, #0
10011b0e:	333c      	adds	r3, #60	; 0x3c
10011b10:	cc07      	ldmia	r4!, {r0, r1, r2}
10011b12:	c307      	stmia	r3!, {r0, r1, r2}
10011b14:	1c3b      	adds	r3, r7, #0
10011b16:	465a      	mov	r2, fp
10011b18:	3398      	adds	r3, #152	; 0x98
10011b1a:	ca13      	ldmia	r2!, {r0, r1, r4}
10011b1c:	c313      	stmia	r3!, {r0, r1, r4}
10011b1e:	6812      	ldr	r2, [r2, #0]
10011b20:	601a      	str	r2, [r3, #0]
10011b22:	2392      	movs	r3, #146	; 0x92
10011b24:	005b      	lsls	r3, r3, #1
10011b26:	58f9      	ldr	r1, [r7, r3]
10011b28:	1c4a      	adds	r2, r1, #1
10011b2a:	50fa      	str	r2, [r7, r3]
10011b2c:	2a06      	cmp	r2, #6
10011b2e:	dc00      	bgt.n	10011b32 <inv_perform_9x_fusion+0x9a>
10011b30:	e123      	b.n	10011d7a <inv_perform_9x_fusion+0x2e2>
10011b32:	2206      	movs	r2, #6
10011b34:	2500      	movs	r5, #0
10011b36:	50fa      	str	r2, [r7, r3]
10011b38:	9b01      	ldr	r3, [sp, #4]
10011b3a:	006c      	lsls	r4, r5, #1
10011b3c:	33a0      	adds	r3, #160	; 0xa0
10011b3e:	9300      	str	r3, [sp, #0]
10011b40:	4baf      	ldr	r3, [pc, #700]	; (10011e00 <inv_perform_9x_fusion+0x368>)
10011b42:	012e      	lsls	r6, r5, #4
10011b44:	469a      	mov	sl, r3
10011b46:	ab21      	add	r3, sp, #132	; 0x84
10011b48:	4699      	mov	r9, r3
10011b4a:	1964      	adds	r4, r4, r5
10011b4c:	3648      	adds	r6, #72	; 0x48
10011b4e:	00a4      	lsls	r4, r4, #2
10011b50:	19be      	adds	r6, r7, r6
10011b52:	193c      	adds	r4, r7, r4
10011b54:	48ab      	ldr	r0, [pc, #684]	; (10011e04 <inv_perform_9x_fusion+0x36c>)
10011b56:	1c31      	adds	r1, r6, #0
10011b58:	464a      	mov	r2, r9
10011b5a:	f7f8 f923 	bl	10009da4 <inv_q_mult>
10011b5e:	1c21      	adds	r1, r4, #0
10011b60:	9800      	ldr	r0, [sp, #0]
10011b62:	464a      	mov	r2, r9
10011b64:	f7f8 f9e6 	bl	10009f34 <inv_compass_angle>
10011b68:	4653      	mov	r3, sl
10011b6a:	4680      	mov	r8, r0
10011b6c:	0059      	lsls	r1, r3, #1
10011b6e:	0040      	lsls	r0, r0, #1
10011b70:	0840      	lsrs	r0, r0, #1
10011b72:	0849      	lsrs	r1, r1, #1
10011b74:	f003 f944 	bl	10014e00 <__aeabi_fcmplt>
10011b78:	2800      	cmp	r0, #0
10011b7a:	d000      	beq.n	10011b7e <inv_perform_9x_fusion+0xe6>
10011b7c:	46c2      	mov	sl, r8
10011b7e:	3501      	adds	r5, #1
10011b80:	3610      	adds	r6, #16
10011b82:	340c      	adds	r4, #12
10011b84:	2d06      	cmp	r5, #6
10011b86:	d1e5      	bne.n	10011b54 <inv_perform_9x_fusion+0xbc>
10011b88:	9801      	ldr	r0, [sp, #4]
10011b8a:	3018      	adds	r0, #24
10011b8c:	f7f8 f8e6 	bl	10009d5c <inv_get_gyro_sum_of_sqr>
10011b90:	2398      	movs	r3, #152	; 0x98
10011b92:	005b      	lsls	r3, r3, #1
10011b94:	58fb      	ldr	r3, [r7, r3]
10011b96:	499c      	ldr	r1, [pc, #624]	; (10011e08 <inv_perform_9x_fusion+0x370>)
10011b98:	0982      	lsrs	r2, r0, #6
10011b9a:	428b      	cmp	r3, r1
10011b9c:	dd00      	ble.n	10011ba0 <inv_perform_9x_fusion+0x108>
10011b9e:	1c0b      	adds	r3, r1, #0
10011ba0:	4651      	mov	r1, sl
10011ba2:	9801      	ldr	r0, [sp, #4]
10011ba4:	f7ff fe7a 	bl	1001189c <inv_filter_correction_angle>
10011ba8:	23ec      	movs	r3, #236	; 0xec
10011baa:	58f9      	ldr	r1, [r7, r3]
10011bac:	f003 fd9a 	bl	100156e4 <__aeabi_fmul>
10011bb0:	23b8      	movs	r3, #184	; 0xb8
10011bb2:	1c3c      	adds	r4, r7, #0
10011bb4:	50f8      	str	r0, [r7, r3]
10011bb6:	a819      	add	r0, sp, #100	; 0x64
10011bb8:	f7f8 fe5c 	bl	1000a874 <inv_get_6axis_quaternion>
10011bbc:	34fc      	adds	r4, #252	; 0xfc
10011bbe:	a819      	add	r0, sp, #100	; 0x64
10011bc0:	4649      	mov	r1, r9
10011bc2:	f7f8 fc33 	bl	1000a42c <inv_quaternion_to_rotation>
10011bc6:	1c20      	adds	r0, r4, #0
10011bc8:	a919      	add	r1, sp, #100	; 0x64
10011bca:	465a      	mov	r2, fp
10011bcc:	f7f8 f8ea 	bl	10009da4 <inv_q_mult>
10011bd0:	a819      	add	r0, sp, #100	; 0x64
10011bd2:	1c21      	adds	r1, r4, #0
10011bd4:	f7f8 fa66 	bl	1000a0a4 <inv_q_invert>
10011bd8:	2300      	movs	r3, #0
10011bda:	469a      	mov	sl, r3
10011bdc:	4653      	mov	r3, sl
10011bde:	005b      	lsls	r3, r3, #1
10011be0:	4453      	add	r3, sl
10011be2:	444b      	add	r3, r9
10011be4:	4698      	mov	r8, r3
10011be6:	2600      	movs	r6, #0
10011be8:	2400      	movs	r4, #0
10011bea:	2500      	movs	r5, #0
10011bec:	4643      	mov	r3, r8
10011bee:	599b      	ldr	r3, [r3, r6]
10011bf0:	4640      	mov	r0, r8
10011bf2:	17d9      	asrs	r1, r3, #31
10011bf4:	465b      	mov	r3, fp
10011bf6:	199b      	adds	r3, r3, r6
10011bf8:	685a      	ldr	r2, [r3, #4]
10011bfa:	5980      	ldr	r0, [r0, r6]
10011bfc:	17d3      	asrs	r3, r2, #31
10011bfe:	f003 f94b 	bl	10014e98 <__aeabi_lmul>
10011c02:	3604      	adds	r6, #4
10011c04:	1824      	adds	r4, r4, r0
10011c06:	414d      	adcs	r5, r1
10011c08:	2e0c      	cmp	r6, #12
10011c0a:	d1ef      	bne.n	10011bec <inv_perform_9x_fusion+0x154>
10011c0c:	4652      	mov	r2, sl
10011c0e:	00ab      	lsls	r3, r5, #2
10011c10:	0fa4      	lsrs	r4, r4, #30
10011c12:	431c      	orrs	r4, r3
10011c14:	ab03      	add	r3, sp, #12
10011c16:	509c      	str	r4, [r3, r2]
10011c18:	2304      	movs	r3, #4
10011c1a:	469c      	mov	ip, r3
10011c1c:	44e2      	add	sl, ip
10011c1e:	4653      	mov	r3, sl
10011c20:	2b0c      	cmp	r3, #12
10011c22:	d1db      	bne.n	10011bdc <inv_perform_9x_fusion+0x144>
10011c24:	2390      	movs	r3, #144	; 0x90
10011c26:	005b      	lsls	r3, r3, #1
10011c28:	58fb      	ldr	r3, [r7, r3]
10011c2a:	2b00      	cmp	r3, #0
10011c2c:	d000      	beq.n	10011c30 <inv_perform_9x_fusion+0x198>
10011c2e:	e0ae      	b.n	10011d8e <inv_perform_9x_fusion+0x2f6>
10011c30:	9c05      	ldr	r4, [sp, #20]
10011c32:	4260      	negs	r0, r4
10011c34:	f004 f82a 	bl	10015c8c <__aeabi_i2f>
10011c38:	21c2      	movs	r1, #194	; 0xc2
10011c3a:	0589      	lsls	r1, r1, #22
10011c3c:	f003 fd52 	bl	100156e4 <__aeabi_fmul>
10011c40:	1c06      	adds	r6, r0, #0
10011c42:	f001 fdc5 	bl	100137d0 <cosf>
10011c46:	1c05      	adds	r5, r0, #0
10011c48:	1c30      	adds	r0, r6, #0
10011c4a:	f001 fdff 	bl	1001384c <sinf>
10011c4e:	1c06      	adds	r6, r0, #0
10011c50:	1c20      	adds	r0, r4, #0
10011c52:	f004 f81b 	bl	10015c8c <__aeabi_i2f>
10011c56:	496d      	ldr	r1, [pc, #436]	; (10011e0c <inv_perform_9x_fusion+0x374>)
10011c58:	f003 fb7a 	bl	10015350 <__aeabi_fdiv>
10011c5c:	4680      	mov	r8, r0
10011c5e:	2398      	movs	r3, #152	; 0x98
10011c60:	9511      	str	r5, [sp, #68]	; 0x44
10011c62:	2500      	movs	r5, #0
10011c64:	005b      	lsls	r3, r3, #1
10011c66:	ac11      	add	r4, sp, #68	; 0x44
10011c68:	58f8      	ldr	r0, [r7, r3]
10011c6a:	4969      	ldr	r1, [pc, #420]	; (10011e10 <inv_perform_9x_fusion+0x378>)
10011c6c:	6065      	str	r5, [r4, #4]
10011c6e:	60a5      	str	r5, [r4, #8]
10011c70:	60e6      	str	r6, [r4, #12]
10011c72:	f002 ff89 	bl	10014b88 <__aeabi_idiv>
10011c76:	f004 f809 	bl	10015c8c <__aeabi_i2f>
10011c7a:	1c06      	adds	r6, r0, #0
10011c7c:	1c31      	adds	r1, r6, #0
10011c7e:	4640      	mov	r0, r8
10011c80:	f003 fb66 	bl	10015350 <__aeabi_fdiv>
10011c84:	21fc      	movs	r1, #252	; 0xfc
10011c86:	0589      	lsls	r1, r1, #22
10011c88:	f003 fd2c 	bl	100156e4 <__aeabi_fmul>
10011c8c:	f003 ffdc 	bl	10015c48 <__aeabi_f2iz>
10011c90:	0040      	lsls	r0, r0, #1
10011c92:	f003 fffb 	bl	10015c8c <__aeabi_i2f>
10011c96:	495d      	ldr	r1, [pc, #372]	; (10011e0c <inv_perform_9x_fusion+0x374>)
10011c98:	f003 fd24 	bl	100156e4 <__aeabi_fmul>
10011c9c:	1c01      	adds	r1, r0, #0
10011c9e:	1c30      	adds	r0, r6, #0
10011ca0:	f003 fd20 	bl	100156e4 <__aeabi_fmul>
10011ca4:	f003 ffd0 	bl	10015c48 <__aeabi_f2iz>
10011ca8:	f003 fff0 	bl	10015c8c <__aeabi_i2f>
10011cac:	21c2      	movs	r1, #194	; 0xc2
10011cae:	0589      	lsls	r1, r1, #22
10011cb0:	f003 fd18 	bl	100156e4 <__aeabi_fmul>
10011cb4:	1c06      	adds	r6, r0, #0
10011cb6:	f001 fd8b 	bl	100137d0 <cosf>
10011cba:	9015      	str	r0, [sp, #84]	; 0x54
10011cbc:	1c30      	adds	r0, r6, #0
10011cbe:	9516      	str	r5, [sp, #88]	; 0x58
10011cc0:	9517      	str	r5, [sp, #92]	; 0x5c
10011cc2:	f001 fdc3 	bl	1001384c <sinf>
10011cc6:	1c21      	adds	r1, r4, #0
10011cc8:	9018      	str	r0, [sp, #96]	; 0x60
10011cca:	aa0d      	add	r2, sp, #52	; 0x34
10011ccc:	a809      	add	r0, sp, #36	; 0x24
10011cce:	f7f8 fa1d 	bl	1000a10c <inv_q_multf>
10011cd2:	1c22      	adds	r2, r4, #0
10011cd4:	a80d      	add	r0, sp, #52	; 0x34
10011cd6:	a915      	add	r1, sp, #84	; 0x54
10011cd8:	f7f8 fa18 	bl	1000a10c <inv_q_multf>
10011cdc:	23bc      	movs	r3, #188	; 0xbc
10011cde:	9a01      	ldr	r2, [sp, #4]
10011ce0:	2500      	movs	r5, #0
10011ce2:	58d3      	ldr	r3, [r2, r3]
10011ce4:	4698      	mov	r8, r3
10011ce6:	2b00      	cmp	r3, #0
10011ce8:	dd16      	ble.n	10011d18 <inv_perform_9x_fusion+0x280>
10011cea:	221c      	movs	r2, #28
10011cec:	219d      	movs	r1, #157	; 0x9d
10011cee:	ab02      	add	r3, sp, #8
10011cf0:	189b      	adds	r3, r3, r2
10011cf2:	5962      	ldr	r2, [r4, r5]
10011cf4:	1c2e      	adds	r6, r5, #0
10011cf6:	515a      	str	r2, [r3, r5]
10011cf8:	1c10      	adds	r0, r2, #0
10011cfa:	05c9      	lsls	r1, r1, #23
10011cfc:	f003 fcf2 	bl	100156e4 <__aeabi_fmul>
10011d00:	f003 ffa2 	bl	10015c48 <__aeabi_f2iz>
10011d04:	36a8      	adds	r6, #168	; 0xa8
10011d06:	19be      	adds	r6, r7, r6
10011d08:	3504      	adds	r5, #4
10011d0a:	6030      	str	r0, [r6, #0]
10011d0c:	2d10      	cmp	r5, #16
10011d0e:	d1ec      	bne.n	10011cea <inv_perform_9x_fusion+0x252>
10011d10:	4643      	mov	r3, r8
10011d12:	2b03      	cmp	r3, #3
10011d14:	d100      	bne.n	10011d18 <inv_perform_9x_fusion+0x280>
10011d16:	e07d      	b.n	10011e14 <inv_perform_9x_fusion+0x37c>
10011d18:	23a8      	movs	r3, #168	; 0xa8
10011d1a:	58f8      	ldr	r0, [r7, r3]
10011d1c:	4698      	mov	r8, r3
10011d1e:	f003 ffb5 	bl	10015c8c <__aeabi_i2f>
10011d22:	21c2      	movs	r1, #194	; 0xc2
10011d24:	0589      	lsls	r1, r1, #22
10011d26:	f003 fcdd 	bl	100156e4 <__aeabi_fmul>
10011d2a:	26ac      	movs	r6, #172	; 0xac
10011d2c:	900d      	str	r0, [sp, #52]	; 0x34
10011d2e:	59b8      	ldr	r0, [r7, r6]
10011d30:	f003 ffac 	bl	10015c8c <__aeabi_i2f>
10011d34:	21c2      	movs	r1, #194	; 0xc2
10011d36:	0589      	lsls	r1, r1, #22
10011d38:	f003 fcd4 	bl	100156e4 <__aeabi_fmul>
10011d3c:	25b0      	movs	r5, #176	; 0xb0
10011d3e:	900e      	str	r0, [sp, #56]	; 0x38
10011d40:	5978      	ldr	r0, [r7, r5]
10011d42:	f003 ffa3 	bl	10015c8c <__aeabi_i2f>
10011d46:	21c2      	movs	r1, #194	; 0xc2
10011d48:	0589      	lsls	r1, r1, #22
10011d4a:	f003 fccb 	bl	100156e4 <__aeabi_fmul>
10011d4e:	24b4      	movs	r4, #180	; 0xb4
10011d50:	900f      	str	r0, [sp, #60]	; 0x3c
10011d52:	5938      	ldr	r0, [r7, r4]
10011d54:	f003 ff9a 	bl	10015c8c <__aeabi_i2f>
10011d58:	21c2      	movs	r1, #194	; 0xc2
10011d5a:	0589      	lsls	r1, r1, #22
10011d5c:	f003 fcc2 	bl	100156e4 <__aeabi_fmul>
10011d60:	2390      	movs	r3, #144	; 0x90
10011d62:	005b      	lsls	r3, r3, #1
10011d64:	58fb      	ldr	r3, [r7, r3]
10011d66:	9010      	str	r0, [sp, #64]	; 0x40
10011d68:	2b00      	cmp	r3, #0
10011d6a:	d116      	bne.n	10011d9a <inv_perform_9x_fusion+0x302>
10011d6c:	b02b      	add	sp, #172	; 0xac
10011d6e:	bc3c      	pop	{r2, r3, r4, r5}
10011d70:	4690      	mov	r8, r2
10011d72:	4699      	mov	r9, r3
10011d74:	46a2      	mov	sl, r4
10011d76:	46ab      	mov	fp, r5
10011d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011d7a:	2505      	movs	r5, #5
10011d7c:	1a6d      	subs	r5, r5, r1
10011d7e:	2d05      	cmp	r5, #5
10011d80:	dc00      	bgt.n	10011d84 <inv_perform_9x_fusion+0x2ec>
10011d82:	e6d9      	b.n	10011b38 <inv_perform_9x_fusion+0xa0>
10011d84:	4b1e      	ldr	r3, [pc, #120]	; (10011e00 <inv_perform_9x_fusion+0x368>)
10011d86:	469a      	mov	sl, r3
10011d88:	ab21      	add	r3, sp, #132	; 0x84
10011d8a:	4699      	mov	r9, r3
10011d8c:	e6fc      	b.n	10011b88 <inv_perform_9x_fusion+0xf0>
10011d8e:	2300      	movs	r3, #0
10011d90:	25fe      	movs	r5, #254	; 0xfe
10011d92:	4698      	mov	r8, r3
10011d94:	1c1e      	adds	r6, r3, #0
10011d96:	05ad      	lsls	r5, r5, #22
10011d98:	e761      	b.n	10011c5e <inv_perform_9x_fusion+0x1c6>
10011d9a:	23b8      	movs	r3, #184	; 0xb8
10011d9c:	21fc      	movs	r1, #252	; 0xfc
10011d9e:	58f8      	ldr	r0, [r7, r3]
10011da0:	0589      	lsls	r1, r1, #22
10011da2:	f003 fc9f 	bl	100156e4 <__aeabi_fmul>
10011da6:	4681      	mov	r9, r0
10011da8:	f001 fd12 	bl	100137d0 <cosf>
10011dac:	219d      	movs	r1, #157	; 0x9d
10011dae:	05c9      	lsls	r1, r1, #23
10011db0:	f003 fc98 	bl	100156e4 <__aeabi_fmul>
10011db4:	f003 ff48 	bl	10015c48 <__aeabi_f2iz>
10011db8:	4643      	mov	r3, r8
10011dba:	50f8      	str	r0, [r7, r3]
10011dbc:	2300      	movs	r3, #0
10011dbe:	4648      	mov	r0, r9
10011dc0:	51bb      	str	r3, [r7, r6]
10011dc2:	517b      	str	r3, [r7, r5]
10011dc4:	f001 fd42 	bl	1001384c <sinf>
10011dc8:	219d      	movs	r1, #157	; 0x9d
10011dca:	05c9      	lsls	r1, r1, #23
10011dcc:	f003 fc8a 	bl	100156e4 <__aeabi_fmul>
10011dd0:	f003 ff3a 	bl	10015c48 <__aeabi_f2iz>
10011dd4:	5138      	str	r0, [r7, r4]
10011dd6:	23c0      	movs	r3, #192	; 0xc0
10011dd8:	1c38      	adds	r0, r7, #0
10011dda:	9a01      	ldr	r2, [sp, #4]
10011ddc:	30a8      	adds	r0, #168	; 0xa8
10011dde:	58d1      	ldr	r1, [r2, r3]
10011de0:	f7f8 fc9e 	bl	1000a720 <inv_set_compass_correction>
10011de4:	2290      	movs	r2, #144	; 0x90
10011de6:	0052      	lsls	r2, r2, #1
10011de8:	58bb      	ldr	r3, [r7, r2]
10011dea:	2b00      	cmp	r3, #0
10011dec:	d0be      	beq.n	10011d6c <inv_perform_9x_fusion+0x2d4>
10011dee:	3b01      	subs	r3, #1
10011df0:	50bb      	str	r3, [r7, r2]
10011df2:	e7bb      	b.n	10011d6c <inv_perform_9x_fusion+0x2d4>
10011df4:	3a01      	subs	r2, #1
10011df6:	50fa      	str	r2, [r7, r3]
10011df8:	e7b8      	b.n	10011d6c <inv_perform_9x_fusion+0x2d4>
10011dfa:	46c0      	nop			; (mov r8, r8)
10011dfc:	1001d858 	.word	0x1001d858
10011e00:	49742400 	.word	0x49742400
10011e04:	1001d900 	.word	0x1001d900
10011e08:	000f4240 	.word	0x000f4240
10011e0c:	473702e1 	.word	0x473702e1
10011e10:	00001388 	.word	0x00001388
10011e14:	f000 ff28 	bl	10012c68 <inv_get_magnetic_disturbance_state>
10011e18:	2800      	cmp	r0, #0
10011e1a:	d000      	beq.n	10011e1e <inv_perform_9x_fusion+0x386>
10011e1c:	e77c      	b.n	10011d18 <inv_perform_9x_fusion+0x280>
10011e1e:	23b8      	movs	r3, #184	; 0xb8
10011e20:	21fc      	movs	r1, #252	; 0xfc
10011e22:	58f8      	ldr	r0, [r7, r3]
10011e24:	0589      	lsls	r1, r1, #22
10011e26:	f003 fc5d 	bl	100156e4 <__aeabi_fmul>
10011e2a:	1c05      	adds	r5, r0, #0
10011e2c:	f001 fcd0 	bl	100137d0 <cosf>
10011e30:	2300      	movs	r3, #0
10011e32:	9015      	str	r0, [sp, #84]	; 0x54
10011e34:	1c28      	adds	r0, r5, #0
10011e36:	9316      	str	r3, [sp, #88]	; 0x58
10011e38:	9317      	str	r3, [sp, #92]	; 0x5c
10011e3a:	f001 fd07 	bl	1001384c <sinf>
10011e3e:	a915      	add	r1, sp, #84	; 0x54
10011e40:	9018      	str	r0, [sp, #96]	; 0x60
10011e42:	1c22      	adds	r2, r4, #0
10011e44:	a809      	add	r0, sp, #36	; 0x24
10011e46:	f7f8 f961 	bl	1000a10c <inv_q_multf>
10011e4a:	1c20      	adds	r0, r4, #0
10011e4c:	f7f8 f9f6 	bl	1000a23c <inv_q_normalizef>
10011e50:	2500      	movs	r5, #0
10011e52:	219d      	movs	r1, #157	; 0x9d
10011e54:	1c2e      	adds	r6, r5, #0
10011e56:	5960      	ldr	r0, [r4, r5]
10011e58:	05c9      	lsls	r1, r1, #23
10011e5a:	f003 fc43 	bl	100156e4 <__aeabi_fmul>
10011e5e:	f003 fef3 	bl	10015c48 <__aeabi_f2iz>
10011e62:	36a8      	adds	r6, #168	; 0xa8
10011e64:	19be      	adds	r6, r7, r6
10011e66:	3504      	adds	r5, #4
10011e68:	6030      	str	r0, [r6, #0]
10011e6a:	2d10      	cmp	r5, #16
10011e6c:	d1f1      	bne.n	10011e52 <inv_perform_9x_fusion+0x3ba>
10011e6e:	e7b2      	b.n	10011dd6 <inv_perform_9x_fusion+0x33e>

10011e70 <inv_process_9x_sensor_fusion_cb>:
10011e70:	23b8      	movs	r3, #184	; 0xb8
10011e72:	58c2      	ldr	r2, [r0, r3]
10011e74:	3ba8      	subs	r3, #168	; 0xa8
10011e76:	b570      	push	{r4, r5, r6, lr}
10011e78:	4013      	ands	r3, r2
10011e7a:	4d24      	ldr	r5, [pc, #144]	; (10011f0c <inv_process_9x_sensor_fusion_cb+0x9c>)
10011e7c:	d105      	bne.n	10011e8a <inv_process_9x_sensor_fusion_cb+0x1a>
10011e7e:	2290      	movs	r2, #144	; 0x90
10011e80:	2103      	movs	r1, #3
10011e82:	0052      	lsls	r2, r2, #1
10011e84:	50a9      	str	r1, [r5, r2]
10011e86:	3204      	adds	r2, #4
10011e88:	50ab      	str	r3, [r5, r2]
10011e8a:	2390      	movs	r3, #144	; 0x90
10011e8c:	005b      	lsls	r3, r3, #1
10011e8e:	58c2      	ldr	r2, [r0, r3]
10011e90:	3b20      	subs	r3, #32
10011e92:	421a      	tst	r2, r3
10011e94:	d105      	bne.n	10011ea2 <inv_process_9x_sensor_fusion_cb+0x32>
10011e96:	6b02      	ldr	r2, [r0, #48]	; 0x30
10011e98:	421a      	tst	r2, r3
10011e9a:	d02b      	beq.n	10011ef4 <inv_process_9x_sensor_fusion_cb+0x84>
10011e9c:	6f42      	ldr	r2, [r0, #116]	; 0x74
10011e9e:	421a      	tst	r2, r3
10011ea0:	d028      	beq.n	10011ef4 <inv_process_9x_sensor_fusion_cb+0x84>
10011ea2:	239a      	movs	r3, #154	; 0x9a
10011ea4:	005b      	lsls	r3, r3, #1
10011ea6:	58eb      	ldr	r3, [r5, r3]
10011ea8:	1c04      	adds	r4, r0, #0
10011eaa:	2b00      	cmp	r3, #0
10011eac:	d010      	beq.n	10011ed0 <inv_process_9x_sensor_fusion_cb+0x60>
10011eae:	22c4      	movs	r2, #196	; 0xc4
10011eb0:	23c0      	movs	r3, #192	; 0xc0
10011eb2:	21fa      	movs	r1, #250	; 0xfa
10011eb4:	58c3      	ldr	r3, [r0, r3]
10011eb6:	5880      	ldr	r0, [r0, r2]
10011eb8:	0089      	lsls	r1, r1, #2
10011eba:	1a18      	subs	r0, r3, r0
10011ebc:	f002 fdda 	bl	10014a74 <__aeabi_uidiv>
10011ec0:	2398      	movs	r3, #152	; 0x98
10011ec2:	005b      	lsls	r3, r3, #1
10011ec4:	50e8      	str	r0, [r5, r3]
10011ec6:	1c20      	adds	r0, r4, #0
10011ec8:	f7ff fde6 	bl	10011a98 <inv_perform_9x_fusion>
10011ecc:	2000      	movs	r0, #0
10011ece:	bd70      	pop	{r4, r5, r6, pc}
10011ed0:	22b0      	movs	r2, #176	; 0xb0
10011ed2:	490f      	ldr	r1, [pc, #60]	; (10011f10 <inv_process_9x_sensor_fusion_cb+0xa0>)
10011ed4:	5882      	ldr	r2, [r0, r2]
10011ed6:	428a      	cmp	r2, r1
10011ed8:	dc14      	bgt.n	10011f04 <inv_process_9x_sensor_fusion_cb+0x94>
10011eda:	2096      	movs	r0, #150	; 0x96
10011edc:	0040      	lsls	r0, r0, #1
10011ede:	582e      	ldr	r6, [r5, r0]
10011ee0:	46b4      	mov	ip, r6
10011ee2:	4462      	add	r2, ip
10011ee4:	502a      	str	r2, [r5, r0]
10011ee6:	428a      	cmp	r2, r1
10011ee8:	ddf0      	ble.n	10011ecc <inv_process_9x_sensor_fusion_cb+0x5c>
10011eea:	2198      	movs	r1, #152	; 0x98
10011eec:	0049      	lsls	r1, r1, #1
10011eee:	506a      	str	r2, [r5, r1]
10011ef0:	502b      	str	r3, [r5, r0]
10011ef2:	e7e8      	b.n	10011ec6 <inv_process_9x_sensor_fusion_cb+0x56>
10011ef4:	2390      	movs	r3, #144	; 0x90
10011ef6:	2203      	movs	r2, #3
10011ef8:	005b      	lsls	r3, r3, #1
10011efa:	50ea      	str	r2, [r5, r3]
10011efc:	2200      	movs	r2, #0
10011efe:	3304      	adds	r3, #4
10011f00:	50ea      	str	r2, [r5, r3]
10011f02:	e7e3      	b.n	10011ecc <inv_process_9x_sensor_fusion_cb+0x5c>
10011f04:	2398      	movs	r3, #152	; 0x98
10011f06:	005b      	lsls	r3, r3, #1
10011f08:	50ea      	str	r2, [r5, r3]
10011f0a:	e7dc      	b.n	10011ec6 <inv_process_9x_sensor_fusion_cb+0x56>
10011f0c:	1001d858 	.word	0x1001d858
10011f10:	00004e1f 	.word	0x00004e1f

10011f14 <inv_init_9x_fusion>:
10011f14:	229c      	movs	r2, #156	; 0x9c
10011f16:	b510      	push	{r4, lr}
10011f18:	4c0d      	ldr	r4, [pc, #52]	; (10011f50 <inv_init_9x_fusion+0x3c>)
10011f1a:	2100      	movs	r1, #0
10011f1c:	1c20      	adds	r0, r4, #0
10011f1e:	0052      	lsls	r2, r2, #1
10011f20:	f005 ff53 	bl	10017dca <memset>
10011f24:	2380      	movs	r3, #128	; 0x80
10011f26:	22fc      	movs	r2, #252	; 0xfc
10011f28:	1c20      	adds	r0, r4, #0
10011f2a:	05db      	lsls	r3, r3, #23
10011f2c:	50a3      	str	r3, [r4, r2]
10011f2e:	30a8      	adds	r0, #168	; 0xa8
10011f30:	3a54      	subs	r2, #84	; 0x54
10011f32:	2100      	movs	r1, #0
10011f34:	50a3      	str	r3, [r4, r2]
10011f36:	f7f8 fbf3 	bl	1000a720 <inv_set_compass_correction>
10011f3a:	22fa      	movs	r2, #250	; 0xfa
10011f3c:	238e      	movs	r3, #142	; 0x8e
10011f3e:	0092      	lsls	r2, r2, #2
10011f40:	005b      	lsls	r3, r3, #1
10011f42:	50e2      	str	r2, [r4, r3]
10011f44:	22fe      	movs	r2, #254	; 0xfe
10011f46:	3b30      	subs	r3, #48	; 0x30
10011f48:	0592      	lsls	r2, r2, #22
10011f4a:	50e2      	str	r2, [r4, r3]
10011f4c:	bd10      	pop	{r4, pc}
10011f4e:	46c0      	nop			; (mov r8, r8)
10011f50:	1001d858 	.word	0x1001d858

10011f54 <inv_9x_fusion_set_mag_fb>:
10011f54:	23ec      	movs	r3, #236	; 0xec
10011f56:	4a02      	ldr	r2, [pc, #8]	; (10011f60 <inv_9x_fusion_set_mag_fb+0xc>)
10011f58:	50d0      	str	r0, [r2, r3]
10011f5a:	2000      	movs	r0, #0
10011f5c:	4770      	bx	lr
10011f5e:	46c0      	nop			; (mov r8, r8)
10011f60:	1001d858 	.word	0x1001d858

10011f64 <inv_9x_fusion_enable_jitter_reduction>:
10011f64:	2394      	movs	r3, #148	; 0x94
10011f66:	4a02      	ldr	r2, [pc, #8]	; (10011f70 <inv_9x_fusion_enable_jitter_reduction+0xc>)
10011f68:	005b      	lsls	r3, r3, #1
10011f6a:	50d0      	str	r0, [r2, r3]
10011f6c:	2000      	movs	r0, #0
10011f6e:	4770      	bx	lr
10011f70:	1001d858 	.word	0x1001d858

10011f74 <inv_9x_fusion_use_timestamps>:
10011f74:	239a      	movs	r3, #154	; 0x9a
10011f76:	4a02      	ldr	r2, [pc, #8]	; (10011f80 <inv_9x_fusion_use_timestamps+0xc>)
10011f78:	005b      	lsls	r3, r3, #1
10011f7a:	50d0      	str	r0, [r2, r3]
10011f7c:	2000      	movs	r0, #0
10011f7e:	4770      	bx	lr
10011f80:	1001d858 	.word	0x1001d858

10011f84 <inv_stop_9x_sensor_fusion>:
10011f84:	b508      	push	{r3, lr}
10011f86:	4802      	ldr	r0, [pc, #8]	; (10011f90 <inv_stop_9x_sensor_fusion+0xc>)
10011f88:	f7f7 fe30 	bl	10009bec <inv_unregister_data_cb>
10011f8c:	bd08      	pop	{r3, pc}
10011f8e:	46c0      	nop			; (mov r8, r8)
10011f90:	10011e71 	.word	0x10011e71

10011f94 <inv_enable_9x_sensor_fusion>:
10011f94:	b508      	push	{r3, lr}
10011f96:	f7ff ffbd 	bl	10011f14 <inv_init_9x_fusion>
10011f9a:	2194      	movs	r1, #148	; 0x94
10011f9c:	2200      	movs	r2, #0
10011f9e:	4b04      	ldr	r3, [pc, #16]	; (10011fb0 <inv_enable_9x_sensor_fusion+0x1c>)
10011fa0:	0049      	lsls	r1, r1, #1
10011fa2:	505a      	str	r2, [r3, r1]
10011fa4:	4803      	ldr	r0, [pc, #12]	; (10011fb4 <inv_enable_9x_sensor_fusion+0x20>)
10011fa6:	310c      	adds	r1, #12
10011fa8:	505a      	str	r2, [r3, r1]
10011faa:	f7f8 fced 	bl	1000a988 <inv_register_mpl_start_notification>
10011fae:	bd08      	pop	{r3, pc}
10011fb0:	1001d858 	.word	0x1001d858
10011fb4:	10011889 	.word	0x10011889

10011fb8 <inv_disable_9x_sensor_fusion>:
10011fb8:	b508      	push	{r3, lr}
10011fba:	4802      	ldr	r0, [pc, #8]	; (10011fc4 <inv_disable_9x_sensor_fusion+0xc>)
10011fbc:	f7f8 fcb4 	bl	1000a928 <inv_unregister_mpl_start_notification>
10011fc0:	bd08      	pop	{r3, pc}
10011fc2:	46c0      	nop			; (mov r8, r8)
10011fc4:	10011889 	.word	0x10011889

10011fc8 <inv_start_gyro_tc>:
10011fc8:	b508      	push	{r3, lr}
10011fca:	4803      	ldr	r0, [pc, #12]	; (10011fd8 <inv_start_gyro_tc+0x10>)
10011fcc:	2196      	movs	r1, #150	; 0x96
10011fce:	2208      	movs	r2, #8
10011fd0:	f7f7 fd8e 	bl	10009af0 <inv_register_data_cb>
10011fd4:	bd08      	pop	{r3, pc}
10011fd6:	46c0      	nop			; (mov r8, r8)
10011fd8:	10011fdd 	.word	0x10011fdd

10011fdc <inv_gtc_data_cb>:
10011fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
10011fde:	4644      	mov	r4, r8
10011fe0:	465f      	mov	r7, fp
10011fe2:	4656      	mov	r6, sl
10011fe4:	464d      	mov	r5, r9
10011fe6:	b4f0      	push	{r4, r5, r6, r7}
10011fe8:	b0b9      	sub	sp, #228	; 0xe4
10011fea:	1c04      	adds	r4, r0, #0
10011fec:	a927      	add	r1, sp, #156	; 0x9c
10011fee:	a829      	add	r0, sp, #164	; 0xa4
10011ff0:	f7f7 fd68 	bl	10009ac4 <inv_get_gyro_bias>
10011ff4:	a828      	add	r0, sp, #160	; 0xa0
10011ff6:	f7f8 fbbd 	bl	1000a774 <inv_get_motion_state>
10011ffa:	2802      	cmp	r0, #2
10011ffc:	d012      	beq.n	10012024 <inv_gtc_data_cb+0x48>
10011ffe:	23e4      	movs	r3, #228	; 0xe4
10012000:	4db4      	ldr	r5, [pc, #720]	; (100122d4 <inv_gtc_data_cb+0x2f8>)
10012002:	58e4      	ldr	r4, [r4, r3]
10012004:	33cc      	adds	r3, #204	; 0xcc
10012006:	5ceb      	ldrb	r3, [r5, r3]
10012008:	9a27      	ldr	r2, [sp, #156]	; 0x9c
1001200a:	2b00      	cmp	r3, #0
1001200c:	d002      	beq.n	10012014 <inv_gtc_data_cb+0x38>
1001200e:	1aa4      	subs	r4, r4, r2
10012010:	d000      	beq.n	10012014 <inv_gtc_data_cb+0x38>
10012012:	e128      	b.n	10012266 <inv_gtc_data_cb+0x28a>
10012014:	2000      	movs	r0, #0
10012016:	b039      	add	sp, #228	; 0xe4
10012018:	bc3c      	pop	{r2, r3, r4, r5}
1001201a:	4690      	mov	r8, r2
1001201c:	4699      	mov	r9, r3
1001201e:	46a2      	mov	sl, r4
10012020:	46ab      	mov	fp, r5
10012022:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012024:	6b63      	ldr	r3, [r4, #52]	; 0x34
10012026:	2b03      	cmp	r3, #3
10012028:	d1f4      	bne.n	10012014 <inv_gtc_data_cb+0x38>
1001202a:	f7f7 fd3d 	bl	10009aa8 <inv_get_gyro_bias_tc_set>
1001202e:	2800      	cmp	r0, #0
10012030:	d0f0      	beq.n	10012014 <inv_gtc_data_cb+0x38>
10012032:	4ba8      	ldr	r3, [pc, #672]	; (100122d4 <inv_gtc_data_cb+0x2f8>)
10012034:	9e27      	ldr	r6, [sp, #156]	; 0x9c
10012036:	4698      	mov	r8, r3
10012038:	23da      	movs	r3, #218	; 0xda
1001203a:	4642      	mov	r2, r8
1001203c:	005b      	lsls	r3, r3, #1
1001203e:	58d0      	ldr	r0, [r2, r3]
10012040:	3304      	adds	r3, #4
10012042:	58d3      	ldr	r3, [r2, r3]
10012044:	1a34      	subs	r4, r6, r0
10012046:	2105      	movs	r1, #5
10012048:	1a18      	subs	r0, r3, r0
1001204a:	f002 fd9d 	bl	10014b88 <__aeabi_idiv>
1001204e:	1c01      	adds	r1, r0, #0
10012050:	1c20      	adds	r0, r4, #0
10012052:	f002 fd99 	bl	10014b88 <__aeabi_idiv>
10012056:	b2c3      	uxtb	r3, r0
10012058:	2b04      	cmp	r3, #4
1001205a:	d8db      	bhi.n	10012014 <inv_gtc_data_cb+0x38>
1001205c:	24ff      	movs	r4, #255	; 0xff
1001205e:	2554      	movs	r5, #84	; 0x54
10012060:	4643      	mov	r3, r8
10012062:	4004      	ands	r4, r0
10012064:	4365      	muls	r5, r4
10012066:	195f      	adds	r7, r3, r5
10012068:	1c3a      	adds	r2, r7, #0
1001206a:	3250      	adds	r2, #80	; 0x50
1001206c:	7813      	ldrb	r3, [r2, #0]
1001206e:	2b05      	cmp	r3, #5
10012070:	d100      	bne.n	10012074 <inv_gtc_data_cb+0x98>
10012072:	e1d3      	b.n	1001241c <inv_gtc_data_cb+0x440>
10012074:	1c59      	adds	r1, r3, #1
10012076:	7011      	strb	r1, [r2, #0]
10012078:	0062      	lsls	r2, r4, #1
1001207a:	1914      	adds	r4, r2, r4
1001207c:	00e2      	lsls	r2, r4, #3
1001207e:	1b14      	subs	r4, r2, r4
10012080:	18e3      	adds	r3, r4, r3
10012082:	1c1a      	adds	r2, r3, #0
10012084:	4641      	mov	r1, r8
10012086:	320e      	adds	r2, #14
10012088:	0092      	lsls	r2, r2, #2
1001208a:	4442      	add	r2, r8
1001208c:	9829      	ldr	r0, [sp, #164]	; 0xa4
1001208e:	6056      	str	r6, [r2, #4]
10012090:	009a      	lsls	r2, r3, #2
10012092:	5088      	str	r0, [r1, r2]
10012094:	1d1a      	adds	r2, r3, #4
10012096:	992a      	ldr	r1, [sp, #168]	; 0xa8
10012098:	0092      	lsls	r2, r2, #2
1001209a:	4442      	add	r2, r8
1001209c:	6051      	str	r1, [r2, #4]
1001209e:	4642      	mov	r2, r8
100120a0:	330a      	adds	r3, #10
100120a2:	992b      	ldr	r1, [sp, #172]	; 0xac
100120a4:	009b      	lsls	r3, r3, #2
100120a6:	50d1      	str	r1, [r2, r3]
100120a8:	2300      	movs	r3, #0
100120aa:	932c      	str	r3, [sp, #176]	; 0xb0
100120ac:	932d      	str	r3, [sp, #180]	; 0xb4
100120ae:	932e      	str	r3, [sp, #184]	; 0xb8
100120b0:	932f      	str	r3, [sp, #188]	; 0xbc
100120b2:	9330      	str	r3, [sp, #192]	; 0xc0
100120b4:	9331      	str	r3, [sp, #196]	; 0xc4
100120b6:	9332      	str	r3, [sp, #200]	; 0xc8
100120b8:	9333      	str	r3, [sp, #204]	; 0xcc
100120ba:	9334      	str	r3, [sp, #208]	; 0xd0
100120bc:	9335      	str	r3, [sp, #212]	; 0xd4
100120be:	9336      	str	r3, [sp, #216]	; 0xd8
100120c0:	9337      	str	r3, [sp, #220]	; 0xdc
100120c2:	33c1      	adds	r3, #193	; 0xc1
100120c4:	33ff      	adds	r3, #255	; 0xff
100120c6:	5cd3      	ldrb	r3, [r2, r3]
100120c8:	2b01      	cmp	r3, #1
100120ca:	d1a3      	bne.n	10012014 <inv_gtc_data_cb+0x38>
100120cc:	33b8      	adds	r3, #184	; 0xb8
100120ce:	33ff      	adds	r3, #255	; 0xff
100120d0:	58d3      	ldr	r3, [r2, r3]
100120d2:	921a      	str	r2, [sp, #104]	; 0x68
100120d4:	469a      	mov	sl, r3
100120d6:	23da      	movs	r3, #218	; 0xda
100120d8:	005b      	lsls	r3, r3, #1
100120da:	58d3      	ldr	r3, [r2, r3]
100120dc:	931c      	str	r3, [sp, #112]	; 0x70
100120de:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
100120e0:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
100120e2:	9312      	str	r3, [sp, #72]	; 0x48
100120e4:	9413      	str	r4, [sp, #76]	; 0x4c
100120e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
100120e8:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
100120ea:	9310      	str	r3, [sp, #64]	; 0x40
100120ec:	9411      	str	r4, [sp, #68]	; 0x44
100120ee:	9b30      	ldr	r3, [sp, #192]	; 0xc0
100120f0:	9c31      	ldr	r4, [sp, #196]	; 0xc4
100120f2:	930e      	str	r3, [sp, #56]	; 0x38
100120f4:	940f      	str	r4, [sp, #60]	; 0x3c
100120f6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
100120f8:	9c33      	ldr	r4, [sp, #204]	; 0xcc
100120fa:	9314      	str	r3, [sp, #80]	; 0x50
100120fc:	9415      	str	r4, [sp, #84]	; 0x54
100120fe:	9b34      	ldr	r3, [sp, #208]	; 0xd0
10012100:	9c35      	ldr	r4, [sp, #212]	; 0xd4
10012102:	930c      	str	r3, [sp, #48]	; 0x30
10012104:	940d      	str	r4, [sp, #52]	; 0x34
10012106:	9b36      	ldr	r3, [sp, #216]	; 0xd8
10012108:	9c37      	ldr	r4, [sp, #220]	; 0xdc
1001210a:	930a      	str	r3, [sp, #40]	; 0x28
1001210c:	940b      	str	r4, [sp, #44]	; 0x2c
1001210e:	2300      	movs	r3, #0
10012110:	2400      	movs	r4, #0
10012112:	469b      	mov	fp, r3
10012114:	2300      	movs	r3, #0
10012116:	9316      	str	r3, [sp, #88]	; 0x58
10012118:	9417      	str	r4, [sp, #92]	; 0x5c
1001211a:	9324      	str	r3, [sp, #144]	; 0x90
1001211c:	9318      	str	r3, [sp, #96]	; 0x60
1001211e:	4653      	mov	r3, sl
10012120:	9319      	str	r3, [sp, #100]	; 0x64
10012122:	9b1a      	ldr	r3, [sp, #104]	; 0x68
10012124:	3350      	adds	r3, #80	; 0x50
10012126:	781b      	ldrb	r3, [r3, #0]
10012128:	931d      	str	r3, [sp, #116]	; 0x74
1001212a:	2b00      	cmp	r3, #0
1001212c:	d100      	bne.n	10012130 <inv_gtc_data_cb+0x154>
1001212e:	e0df      	b.n	100122f0 <inv_gtc_data_cb+0x314>
10012130:	445b      	add	r3, fp
10012132:	009b      	lsls	r3, r3, #2
10012134:	4443      	add	r3, r8
10012136:	4699      	mov	r9, r3
10012138:	465b      	mov	r3, fp
1001213a:	9325      	str	r3, [sp, #148]	; 0x94
1001213c:	464b      	mov	r3, r9
1001213e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
10012140:	931b      	str	r3, [sp, #108]	; 0x6c
10012142:	46aa      	mov	sl, r5
10012144:	e00b      	b.n	1001215e <inv_gtc_data_cb+0x182>
10012146:	9b1c      	ldr	r3, [sp, #112]	; 0x70
10012148:	454b      	cmp	r3, r9
1001214a:	da01      	bge.n	10012150 <inv_gtc_data_cb+0x174>
1001214c:	464b      	mov	r3, r9
1001214e:	931c      	str	r3, [sp, #112]	; 0x70
10012150:	2304      	movs	r3, #4
10012152:	469c      	mov	ip, r3
10012154:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
10012156:	44e2      	add	sl, ip
10012158:	459a      	cmp	sl, r3
1001215a:	d100      	bne.n	1001215e <inv_gtc_data_cb+0x182>
1001215c:	e0bc      	b.n	100122d8 <inv_gtc_data_cb+0x2fc>
1001215e:	4653      	mov	r3, sl
10012160:	681b      	ldr	r3, [r3, #0]
10012162:	9304      	str	r3, [sp, #16]
10012164:	4653      	mov	r3, sl
10012166:	681b      	ldr	r3, [r3, #0]
10012168:	17db      	asrs	r3, r3, #31
1001216a:	9305      	str	r3, [sp, #20]
1001216c:	9804      	ldr	r0, [sp, #16]
1001216e:	9905      	ldr	r1, [sp, #20]
10012170:	9a12      	ldr	r2, [sp, #72]	; 0x48
10012172:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10012174:	1812      	adds	r2, r2, r0
10012176:	414b      	adcs	r3, r1
10012178:	9212      	str	r2, [sp, #72]	; 0x48
1001217a:	9313      	str	r3, [sp, #76]	; 0x4c
1001217c:	4653      	mov	r3, sl
1001217e:	695b      	ldr	r3, [r3, #20]
10012180:	9306      	str	r3, [sp, #24]
10012182:	4653      	mov	r3, sl
10012184:	695b      	ldr	r3, [r3, #20]
10012186:	17db      	asrs	r3, r3, #31
10012188:	9307      	str	r3, [sp, #28]
1001218a:	9806      	ldr	r0, [sp, #24]
1001218c:	9907      	ldr	r1, [sp, #28]
1001218e:	9a10      	ldr	r2, [sp, #64]	; 0x40
10012190:	9b11      	ldr	r3, [sp, #68]	; 0x44
10012192:	1812      	adds	r2, r2, r0
10012194:	414b      	adcs	r3, r1
10012196:	9210      	str	r2, [sp, #64]	; 0x40
10012198:	9311      	str	r3, [sp, #68]	; 0x44
1001219a:	4653      	mov	r3, sl
1001219c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1001219e:	9308      	str	r3, [sp, #32]
100121a0:	4653      	mov	r3, sl
100121a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100121a4:	17db      	asrs	r3, r3, #31
100121a6:	9309      	str	r3, [sp, #36]	; 0x24
100121a8:	9808      	ldr	r0, [sp, #32]
100121aa:	9909      	ldr	r1, [sp, #36]	; 0x24
100121ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
100121ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100121b0:	1812      	adds	r2, r2, r0
100121b2:	414b      	adcs	r3, r1
100121b4:	9804      	ldr	r0, [sp, #16]
100121b6:	9905      	ldr	r1, [sp, #20]
100121b8:	920e      	str	r2, [sp, #56]	; 0x38
100121ba:	930f      	str	r3, [sp, #60]	; 0x3c
100121bc:	4653      	mov	r3, sl
100121be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100121c0:	4699      	mov	r9, r3
100121c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
100121c4:	464a      	mov	r2, r9
100121c6:	444b      	add	r3, r9
100121c8:	9318      	str	r3, [sp, #96]	; 0x60
100121ca:	464b      	mov	r3, r9
100121cc:	17db      	asrs	r3, r3, #31
100121ce:	469b      	mov	fp, r3
100121d0:	f002 fe62 	bl	10014e98 <__aeabi_lmul>
100121d4:	040b      	lsls	r3, r1, #16
100121d6:	0c02      	lsrs	r2, r0, #16
100121d8:	431a      	orrs	r2, r3
100121da:	140b      	asrs	r3, r1, #16
100121dc:	9200      	str	r2, [sp, #0]
100121de:	9301      	str	r3, [sp, #4]
100121e0:	9800      	ldr	r0, [sp, #0]
100121e2:	9901      	ldr	r1, [sp, #4]
100121e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
100121e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
100121e8:	1812      	adds	r2, r2, r0
100121ea:	414b      	adcs	r3, r1
100121ec:	9806      	ldr	r0, [sp, #24]
100121ee:	9907      	ldr	r1, [sp, #28]
100121f0:	9214      	str	r2, [sp, #80]	; 0x50
100121f2:	9315      	str	r3, [sp, #84]	; 0x54
100121f4:	464a      	mov	r2, r9
100121f6:	465b      	mov	r3, fp
100121f8:	f002 fe4e 	bl	10014e98 <__aeabi_lmul>
100121fc:	040b      	lsls	r3, r1, #16
100121fe:	0c02      	lsrs	r2, r0, #16
10012200:	431a      	orrs	r2, r3
10012202:	140b      	asrs	r3, r1, #16
10012204:	9202      	str	r2, [sp, #8]
10012206:	9303      	str	r3, [sp, #12]
10012208:	9802      	ldr	r0, [sp, #8]
1001220a:	9903      	ldr	r1, [sp, #12]
1001220c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1001220e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10012210:	1812      	adds	r2, r2, r0
10012212:	414b      	adcs	r3, r1
10012214:	9808      	ldr	r0, [sp, #32]
10012216:	9909      	ldr	r1, [sp, #36]	; 0x24
10012218:	920c      	str	r2, [sp, #48]	; 0x30
1001221a:	930d      	str	r3, [sp, #52]	; 0x34
1001221c:	464a      	mov	r2, r9
1001221e:	465b      	mov	r3, fp
10012220:	f002 fe3a 	bl	10014e98 <__aeabi_lmul>
10012224:	040b      	lsls	r3, r1, #16
10012226:	0c06      	lsrs	r6, r0, #16
10012228:	431e      	orrs	r6, r3
1001222a:	140f      	asrs	r7, r1, #16
1001222c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1001222e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10012230:	1992      	adds	r2, r2, r6
10012232:	417b      	adcs	r3, r7
10012234:	4648      	mov	r0, r9
10012236:	920a      	str	r2, [sp, #40]	; 0x28
10012238:	930b      	str	r3, [sp, #44]	; 0x2c
1001223a:	4659      	mov	r1, fp
1001223c:	464a      	mov	r2, r9
1001223e:	465b      	mov	r3, fp
10012240:	f002 fe2a 	bl	10014e98 <__aeabi_lmul>
10012244:	040b      	lsls	r3, r1, #16
10012246:	0c04      	lsrs	r4, r0, #16
10012248:	431c      	orrs	r4, r3
1001224a:	140d      	asrs	r5, r1, #16
1001224c:	9a16      	ldr	r2, [sp, #88]	; 0x58
1001224e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
10012250:	1912      	adds	r2, r2, r4
10012252:	416b      	adcs	r3, r5
10012254:	9216      	str	r2, [sp, #88]	; 0x58
10012256:	9317      	str	r3, [sp, #92]	; 0x5c
10012258:	9b19      	ldr	r3, [sp, #100]	; 0x64
1001225a:	4599      	cmp	r9, r3
1001225c:	db00      	blt.n	10012260 <inv_gtc_data_cb+0x284>
1001225e:	e772      	b.n	10012146 <inv_gtc_data_cb+0x16a>
10012260:	464b      	mov	r3, r9
10012262:	9319      	str	r3, [sp, #100]	; 0x64
10012264:	e774      	b.n	10012150 <inv_gtc_data_cb+0x174>
10012266:	23d2      	movs	r3, #210	; 0xd2
10012268:	005b      	lsls	r3, r3, #1
1001226a:	58ea      	ldr	r2, [r5, r3]
1001226c:	17e6      	asrs	r6, r4, #31
1001226e:	17d3      	asrs	r3, r2, #31
10012270:	1c20      	adds	r0, r4, #0
10012272:	1c31      	adds	r1, r6, #0
10012274:	f002 fe10 	bl	10014e98 <__aeabi_lmul>
10012278:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1001227a:	0409      	lsls	r1, r1, #16
1001227c:	469c      	mov	ip, r3
1001227e:	9300      	str	r3, [sp, #0]
10012280:	23d4      	movs	r3, #212	; 0xd4
10012282:	0c00      	lsrs	r0, r0, #16
10012284:	005b      	lsls	r3, r3, #1
10012286:	58ea      	ldr	r2, [r5, r3]
10012288:	4308      	orrs	r0, r1
1001228a:	4460      	add	r0, ip
1001228c:	9029      	str	r0, [sp, #164]	; 0xa4
1001228e:	17d3      	asrs	r3, r2, #31
10012290:	1c20      	adds	r0, r4, #0
10012292:	1c31      	adds	r1, r6, #0
10012294:	f002 fe00 	bl	10014e98 <__aeabi_lmul>
10012298:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
1001229a:	0409      	lsls	r1, r1, #16
1001229c:	469c      	mov	ip, r3
1001229e:	9300      	str	r3, [sp, #0]
100122a0:	23d6      	movs	r3, #214	; 0xd6
100122a2:	0c00      	lsrs	r0, r0, #16
100122a4:	005b      	lsls	r3, r3, #1
100122a6:	58ea      	ldr	r2, [r5, r3]
100122a8:	4308      	orrs	r0, r1
100122aa:	4460      	add	r0, ip
100122ac:	902a      	str	r0, [sp, #168]	; 0xa8
100122ae:	17d3      	asrs	r3, r2, #31
100122b0:	1c20      	adds	r0, r4, #0
100122b2:	1c31      	adds	r1, r6, #0
100122b4:	f002 fdf0 	bl	10014e98 <__aeabi_lmul>
100122b8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
100122ba:	0409      	lsls	r1, r1, #16
100122bc:	469c      	mov	ip, r3
100122be:	0c00      	lsrs	r0, r0, #16
100122c0:	4308      	orrs	r0, r1
100122c2:	4460      	add	r0, ip
100122c4:	902b      	str	r0, [sp, #172]	; 0xac
100122c6:	2103      	movs	r1, #3
100122c8:	a829      	add	r0, sp, #164	; 0xa4
100122ca:	9300      	str	r3, [sp, #0]
100122cc:	f7f7 fba2 	bl	10009a14 <inv_set_gyro_bias>
100122d0:	e6a0      	b.n	10012014 <inv_gtc_data_cb+0x38>
100122d2:	46c0      	nop			; (mov r8, r8)
100122d4:	1001c100 	.word	0x1001c100
100122d8:	9a24      	ldr	r2, [sp, #144]	; 0x90
100122da:	9b25      	ldr	r3, [sp, #148]	; 0x94
100122dc:	4694      	mov	ip, r2
100122de:	469b      	mov	fp, r3
100122e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
100122e2:	9620      	str	r6, [sp, #128]	; 0x80
100122e4:	9721      	str	r7, [sp, #132]	; 0x84
100122e6:	4463      	add	r3, ip
100122e8:	9422      	str	r4, [sp, #136]	; 0x88
100122ea:	9523      	str	r5, [sp, #140]	; 0x8c
100122ec:	b2db      	uxtb	r3, r3
100122ee:	9324      	str	r3, [sp, #144]	; 0x90
100122f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
100122f2:	3354      	adds	r3, #84	; 0x54
100122f4:	931a      	str	r3, [sp, #104]	; 0x68
100122f6:	2315      	movs	r3, #21
100122f8:	469c      	mov	ip, r3
100122fa:	44e3      	add	fp, ip
100122fc:	465b      	mov	r3, fp
100122fe:	2b69      	cmp	r3, #105	; 0x69
10012300:	d000      	beq.n	10012304 <inv_gtc_data_cb+0x328>
10012302:	e70e      	b.n	10012122 <inv_gtc_data_cb+0x146>
10012304:	9b18      	ldr	r3, [sp, #96]	; 0x60
10012306:	4641      	mov	r1, r8
10012308:	4699      	mov	r9, r3
1001230a:	9b19      	ldr	r3, [sp, #100]	; 0x64
1001230c:	469a      	mov	sl, r3
1001230e:	9b12      	ldr	r3, [sp, #72]	; 0x48
10012310:	9c13      	ldr	r4, [sp, #76]	; 0x4c
10012312:	4652      	mov	r2, sl
10012314:	932c      	str	r3, [sp, #176]	; 0xb0
10012316:	942d      	str	r4, [sp, #180]	; 0xb4
10012318:	9b10      	ldr	r3, [sp, #64]	; 0x40
1001231a:	9c11      	ldr	r4, [sp, #68]	; 0x44
1001231c:	932e      	str	r3, [sp, #184]	; 0xb8
1001231e:	942f      	str	r4, [sp, #188]	; 0xbc
10012320:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10012322:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
10012324:	9330      	str	r3, [sp, #192]	; 0xc0
10012326:	9431      	str	r4, [sp, #196]	; 0xc4
10012328:	9b14      	ldr	r3, [sp, #80]	; 0x50
1001232a:	9c15      	ldr	r4, [sp, #84]	; 0x54
1001232c:	9332      	str	r3, [sp, #200]	; 0xc8
1001232e:	9433      	str	r4, [sp, #204]	; 0xcc
10012330:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10012332:	9c0d      	ldr	r4, [sp, #52]	; 0x34
10012334:	9334      	str	r3, [sp, #208]	; 0xd0
10012336:	9435      	str	r4, [sp, #212]	; 0xd4
10012338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1001233a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
1001233c:	9336      	str	r3, [sp, #216]	; 0xd8
1001233e:	9437      	str	r4, [sp, #220]	; 0xdc
10012340:	9b1c      	ldr	r3, [sp, #112]	; 0x70
10012342:	1a9b      	subs	r3, r3, r2
10012344:	22de      	movs	r2, #222	; 0xde
10012346:	0052      	lsls	r2, r2, #1
10012348:	588a      	ldr	r2, [r1, r2]
1001234a:	4293      	cmp	r3, r2
1001234c:	da00      	bge.n	10012350 <inv_gtc_data_cb+0x374>
1001234e:	e661      	b.n	10012014 <inv_gtc_data_cb+0x38>
10012350:	9816      	ldr	r0, [sp, #88]	; 0x58
10012352:	9917      	ldr	r1, [sp, #92]	; 0x5c
10012354:	464b      	mov	r3, r9
10012356:	17db      	asrs	r3, r3, #31
10012358:	1c1e      	adds	r6, r3, #0
1001235a:	9304      	str	r3, [sp, #16]
1001235c:	9a24      	ldr	r2, [sp, #144]	; 0x90
1001235e:	2300      	movs	r3, #0
10012360:	f002 fd9a 	bl	10014e98 <__aeabi_lmul>
10012364:	1c04      	adds	r4, r0, #0
10012366:	1c0d      	adds	r5, r1, #0
10012368:	1c33      	adds	r3, r6, #0
1001236a:	1c31      	adds	r1, r6, #0
1001236c:	4648      	mov	r0, r9
1001236e:	464a      	mov	r2, r9
10012370:	9400      	str	r4, [sp, #0]
10012372:	9501      	str	r5, [sp, #4]
10012374:	f002 fd90 	bl	10014e98 <__aeabi_lmul>
10012378:	040b      	lsls	r3, r1, #16
1001237a:	0c06      	lsrs	r6, r0, #16
1001237c:	431e      	orrs	r6, r3
1001237e:	23d2      	movs	r3, #210	; 0xd2
10012380:	005b      	lsls	r3, r3, #1
10012382:	4443      	add	r3, r8
10012384:	469b      	mov	fp, r3
10012386:	2300      	movs	r3, #0
10012388:	469a      	mov	sl, r3
1001238a:	1c23      	adds	r3, r4, #0
1001238c:	1c2c      	adds	r4, r5, #0
1001238e:	140f      	asrs	r7, r1, #16
10012390:	1b9b      	subs	r3, r3, r6
10012392:	41bc      	sbcs	r4, r7
10012394:	9602      	str	r6, [sp, #8]
10012396:	9703      	str	r7, [sp, #12]
10012398:	9306      	str	r3, [sp, #24]
1001239a:	9407      	str	r4, [sp, #28]
1001239c:	ab32      	add	r3, sp, #200	; 0xc8
1001239e:	4453      	add	r3, sl
100123a0:	6818      	ldr	r0, [r3, #0]
100123a2:	6859      	ldr	r1, [r3, #4]
100123a4:	ab2c      	add	r3, sp, #176	; 0xb0
100123a6:	4453      	add	r3, sl
100123a8:	681e      	ldr	r6, [r3, #0]
100123aa:	685f      	ldr	r7, [r3, #4]
100123ac:	9a02      	ldr	r2, [sp, #8]
100123ae:	9b00      	ldr	r3, [sp, #0]
100123b0:	4293      	cmp	r3, r2
100123b2:	d02e      	beq.n	10012412 <inv_gtc_data_cb+0x436>
100123b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
100123b6:	2300      	movs	r3, #0
100123b8:	f002 fd6e 	bl	10014e98 <__aeabi_lmul>
100123bc:	464a      	mov	r2, r9
100123be:	1c04      	adds	r4, r0, #0
100123c0:	1c0d      	adds	r5, r1, #0
100123c2:	9b04      	ldr	r3, [sp, #16]
100123c4:	1c30      	adds	r0, r6, #0
100123c6:	1c39      	adds	r1, r7, #0
100123c8:	f002 fd66 	bl	10014e98 <__aeabi_lmul>
100123cc:	040b      	lsls	r3, r1, #16
100123ce:	0c02      	lsrs	r2, r0, #16
100123d0:	431a      	orrs	r2, r3
100123d2:	140b      	asrs	r3, r1, #16
100123d4:	921e      	str	r2, [sp, #120]	; 0x78
100123d6:	931f      	str	r3, [sp, #124]	; 0x7c
100123d8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
100123da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
100123dc:	1aa4      	subs	r4, r4, r2
100123de:	419d      	sbcs	r5, r3
100123e0:	0c23      	lsrs	r3, r4, #16
100123e2:	0429      	lsls	r1, r5, #16
100123e4:	4319      	orrs	r1, r3
100123e6:	0420      	lsls	r0, r4, #16
100123e8:	9a06      	ldr	r2, [sp, #24]
100123ea:	9b07      	ldr	r3, [sp, #28]
100123ec:	f002 fd30 	bl	10014e50 <__aeabi_ldivmod>
100123f0:	465b      	mov	r3, fp
100123f2:	6018      	str	r0, [r3, #0]
100123f4:	2308      	movs	r3, #8
100123f6:	469c      	mov	ip, r3
100123f8:	3b04      	subs	r3, #4
100123fa:	44e2      	add	sl, ip
100123fc:	469c      	mov	ip, r3
100123fe:	4653      	mov	r3, sl
10012400:	44e3      	add	fp, ip
10012402:	2b18      	cmp	r3, #24
10012404:	d1ca      	bne.n	1001239c <inv_gtc_data_cb+0x3c0>
10012406:	2201      	movs	r2, #1
10012408:	4641      	mov	r1, r8
1001240a:	3399      	adds	r3, #153	; 0x99
1001240c:	33ff      	adds	r3, #255	; 0xff
1001240e:	54ca      	strb	r2, [r1, r3]
10012410:	e600      	b.n	10012014 <inv_gtc_data_cb+0x38>
10012412:	9b01      	ldr	r3, [sp, #4]
10012414:	9a03      	ldr	r2, [sp, #12]
10012416:	4293      	cmp	r3, r2
10012418:	d1cc      	bne.n	100123b4 <inv_gtc_data_cb+0x3d8>
1001241a:	e7eb      	b.n	100123f4 <inv_gtc_data_cb+0x418>
1001241c:	4643      	mov	r3, r8
1001241e:	1958      	adds	r0, r3, r5
10012420:	1959      	adds	r1, r3, r5
10012422:	3140      	adds	r1, #64	; 0x40
10012424:	2210      	movs	r2, #16
10012426:	303c      	adds	r0, #60	; 0x3c
10012428:	f005 fcba 	bl	10017da0 <memmove>
1001242c:	1d29      	adds	r1, r5, #4
1001242e:	4441      	add	r1, r8
10012430:	2210      	movs	r2, #16
10012432:	1c38      	adds	r0, r7, #0
10012434:	f005 fcb4 	bl	10017da0 <memmove>
10012438:	4643      	mov	r3, r8
1001243a:	1958      	adds	r0, r3, r5
1001243c:	1959      	adds	r1, r3, r5
1001243e:	3118      	adds	r1, #24
10012440:	2210      	movs	r2, #16
10012442:	3014      	adds	r0, #20
10012444:	f005 fcac 	bl	10017da0 <memmove>
10012448:	1c28      	adds	r0, r5, #0
1001244a:	1c29      	adds	r1, r5, #0
1001244c:	3028      	adds	r0, #40	; 0x28
1001244e:	312c      	adds	r1, #44	; 0x2c
10012450:	4440      	add	r0, r8
10012452:	4441      	add	r1, r8
10012454:	2210      	movs	r2, #16
10012456:	f005 fca3 	bl	10017da0 <memmove>
1001245a:	2304      	movs	r3, #4
1001245c:	e60c      	b.n	10012078 <inv_gtc_data_cb+0x9c>
1001245e:	46c0      	nop			; (mov r8, r8)

10012460 <inv_gtc_store>:
10012460:	b5f0      	push	{r4, r5, r6, r7, lr}
10012462:	4a09      	ldr	r2, [pc, #36]	; (10012488 <inv_gtc_store+0x28>)
10012464:	b085      	sub	sp, #20
10012466:	1c13      	adds	r3, r2, #0
10012468:	466c      	mov	r4, sp
1001246a:	33a5      	adds	r3, #165	; 0xa5
1001246c:	33ff      	adds	r3, #255	; 0xff
1001246e:	cbe0      	ldmia	r3!, {r5, r6, r7}
10012470:	c4e0      	stmia	r4!, {r5, r6, r7}
10012472:	23d8      	movs	r3, #216	; 0xd8
10012474:	4669      	mov	r1, sp
10012476:	005b      	lsls	r3, r3, #1
10012478:	5cd3      	ldrb	r3, [r2, r3]
1001247a:	2210      	movs	r2, #16
1001247c:	730b      	strb	r3, [r1, #12]
1001247e:	f005 fc86 	bl	10017d8e <memcpy>
10012482:	2000      	movs	r0, #0
10012484:	b005      	add	sp, #20
10012486:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012488:	1001c100 	.word	0x1001c100

1001248c <inv_gtc_load>:
1001248c:	b570      	push	{r4, r5, r6, lr}
1001248e:	b084      	sub	sp, #16
10012490:	1c01      	adds	r1, r0, #0
10012492:	2210      	movs	r2, #16
10012494:	4668      	mov	r0, sp
10012496:	f005 fc7a 	bl	10017d8e <memcpy>
1001249a:	4a07      	ldr	r2, [pc, #28]	; (100124b8 <inv_gtc_load+0x2c>)
1001249c:	4669      	mov	r1, sp
1001249e:	1c13      	adds	r3, r2, #0
100124a0:	33a5      	adds	r3, #165	; 0xa5
100124a2:	466c      	mov	r4, sp
100124a4:	33ff      	adds	r3, #255	; 0xff
100124a6:	c961      	ldmia	r1!, {r0, r5, r6}
100124a8:	c361      	stmia	r3!, {r0, r5, r6}
100124aa:	23d8      	movs	r3, #216	; 0xd8
100124ac:	2000      	movs	r0, #0
100124ae:	7b21      	ldrb	r1, [r4, #12]
100124b0:	005b      	lsls	r3, r3, #1
100124b2:	54d1      	strb	r1, [r2, r3]
100124b4:	b004      	add	sp, #16
100124b6:	bd70      	pop	{r4, r5, r6, pc}
100124b8:	1001c100 	.word	0x1001c100

100124bc <inv_init_gyro_ts>:
100124bc:	22e2      	movs	r2, #226	; 0xe2
100124be:	b510      	push	{r4, lr}
100124c0:	4c0b      	ldr	r4, [pc, #44]	; (100124f0 <inv_init_gyro_ts+0x34>)
100124c2:	2100      	movs	r1, #0
100124c4:	1c20      	adds	r0, r4, #0
100124c6:	0052      	lsls	r2, r2, #1
100124c8:	f005 fc7f 	bl	10017dca <memset>
100124cc:	23da      	movs	r3, #218	; 0xda
100124ce:	4a09      	ldr	r2, [pc, #36]	; (100124f4 <inv_init_gyro_ts+0x38>)
100124d0:	005b      	lsls	r3, r3, #1
100124d2:	50e2      	str	r2, [r4, r3]
100124d4:	22aa      	movs	r2, #170	; 0xaa
100124d6:	3304      	adds	r3, #4
100124d8:	03d2      	lsls	r2, r2, #15
100124da:	50e2      	str	r2, [r4, r3]
100124dc:	22a0      	movs	r2, #160	; 0xa0
100124de:	3304      	adds	r3, #4
100124e0:	02d2      	lsls	r2, r2, #11
100124e2:	50e2      	str	r2, [r4, r3]
100124e4:	2201      	movs	r2, #1
100124e6:	3304      	adds	r3, #4
100124e8:	2000      	movs	r0, #0
100124ea:	54e2      	strb	r2, [r4, r3]
100124ec:	bd10      	pop	{r4, pc}
100124ee:	46c0      	nop			; (mov r8, r8)
100124f0:	1001c100 	.word	0x1001c100
100124f4:	ffd80000 	.word	0xffd80000

100124f8 <inv_set_gtc_max_temp>:
100124f8:	23dc      	movs	r3, #220	; 0xdc
100124fa:	4a02      	ldr	r2, [pc, #8]	; (10012504 <inv_set_gtc_max_temp+0xc>)
100124fc:	005b      	lsls	r3, r3, #1
100124fe:	50d0      	str	r0, [r2, r3]
10012500:	2000      	movs	r0, #0
10012502:	4770      	bx	lr
10012504:	1001c100 	.word	0x1001c100

10012508 <inv_set_gtc_min_temp>:
10012508:	23da      	movs	r3, #218	; 0xda
1001250a:	4a02      	ldr	r2, [pc, #8]	; (10012514 <inv_set_gtc_min_temp+0xc>)
1001250c:	005b      	lsls	r3, r3, #1
1001250e:	50d0      	str	r0, [r2, r3]
10012510:	2000      	movs	r0, #0
10012512:	4770      	bx	lr
10012514:	1001c100 	.word	0x1001c100

10012518 <inv_set_gtc_min_diff>:
10012518:	23de      	movs	r3, #222	; 0xde
1001251a:	4a02      	ldr	r2, [pc, #8]	; (10012524 <inv_set_gtc_min_diff+0xc>)
1001251c:	005b      	lsls	r3, r3, #1
1001251e:	50d0      	str	r0, [r2, r3]
10012520:	2000      	movs	r0, #0
10012522:	4770      	bx	lr
10012524:	1001c100 	.word	0x1001c100

10012528 <inv_get_gyro_ts>:
10012528:	2800      	cmp	r0, #0
1001252a:	d00e      	beq.n	1001254a <inv_get_gyro_ts+0x22>
1001252c:	22d2      	movs	r2, #210	; 0xd2
1001252e:	4b08      	ldr	r3, [pc, #32]	; (10012550 <inv_get_gyro_ts+0x28>)
10012530:	0052      	lsls	r2, r2, #1
10012532:	589a      	ldr	r2, [r3, r2]
10012534:	6002      	str	r2, [r0, #0]
10012536:	22d4      	movs	r2, #212	; 0xd4
10012538:	0052      	lsls	r2, r2, #1
1001253a:	589a      	ldr	r2, [r3, r2]
1001253c:	6042      	str	r2, [r0, #4]
1001253e:	22d6      	movs	r2, #214	; 0xd6
10012540:	0052      	lsls	r2, r2, #1
10012542:	589b      	ldr	r3, [r3, r2]
10012544:	6083      	str	r3, [r0, #8]
10012546:	2000      	movs	r0, #0
10012548:	4770      	bx	lr
1001254a:	2016      	movs	r0, #22
1001254c:	e7fc      	b.n	10012548 <inv_get_gyro_ts+0x20>
1001254e:	46c0      	nop			; (mov r8, r8)
10012550:	1001c100 	.word	0x1001c100

10012554 <inv_set_gyro_ts>:
10012554:	2024      	movs	r0, #36	; 0x24
10012556:	4770      	bx	lr

10012558 <inv_set_gtc_order>:
10012558:	2324      	movs	r3, #36	; 0x24
1001255a:	2800      	cmp	r0, #0
1001255c:	d101      	bne.n	10012562 <inv_set_gtc_order+0xa>
1001255e:	1c18      	adds	r0, r3, #0
10012560:	4770      	bx	lr
10012562:	339d      	adds	r3, #157	; 0x9d
10012564:	4a02      	ldr	r2, [pc, #8]	; (10012570 <inv_set_gtc_order+0x18>)
10012566:	33ff      	adds	r3, #255	; 0xff
10012568:	54d0      	strb	r0, [r2, r3]
1001256a:	2300      	movs	r3, #0
1001256c:	e7f7      	b.n	1001255e <inv_set_gtc_order+0x6>
1001256e:	46c0      	nop			; (mov r8, r8)
10012570:	1001c100 	.word	0x1001c100

10012574 <inv_print_gtc_data>:
10012574:	2000      	movs	r0, #0
10012576:	4770      	bx	lr

10012578 <inv_stop_gyro_tc>:
10012578:	b508      	push	{r3, lr}
1001257a:	4802      	ldr	r0, [pc, #8]	; (10012584 <inv_stop_gyro_tc+0xc>)
1001257c:	f7f7 fb36 	bl	10009bec <inv_unregister_data_cb>
10012580:	bd08      	pop	{r3, pc}
10012582:	46c0      	nop			; (mov r8, r8)
10012584:	10011fdd 	.word	0x10011fdd

10012588 <inv_enable_gyro_tc>:
10012588:	b508      	push	{r3, lr}
1001258a:	f7ff ff97 	bl	100124bc <inv_init_gyro_ts>
1001258e:	239a      	movs	r3, #154	; 0x9a
10012590:	480a      	ldr	r0, [pc, #40]	; (100125bc <inv_enable_gyro_tc+0x34>)
10012592:	490b      	ldr	r1, [pc, #44]	; (100125c0 <inv_enable_gyro_tc+0x38>)
10012594:	2210      	movs	r2, #16
10012596:	005b      	lsls	r3, r3, #1
10012598:	f7f8 fa30 	bl	1000a9fc <inv_register_load_store>
1001259c:	2800      	cmp	r0, #0
1001259e:	d001      	beq.n	100125a4 <inv_enable_gyro_tc+0x1c>
100125a0:	2001      	movs	r0, #1
100125a2:	bd08      	pop	{r3, pc}
100125a4:	4807      	ldr	r0, [pc, #28]	; (100125c4 <inv_enable_gyro_tc+0x3c>)
100125a6:	f7f8 f9ef 	bl	1000a988 <inv_register_mpl_start_notification>
100125aa:	2800      	cmp	r0, #0
100125ac:	d1f8      	bne.n	100125a0 <inv_enable_gyro_tc+0x18>
100125ae:	23b2      	movs	r3, #178	; 0xb2
100125b0:	2101      	movs	r1, #1
100125b2:	4a05      	ldr	r2, [pc, #20]	; (100125c8 <inv_enable_gyro_tc+0x40>)
100125b4:	33ff      	adds	r3, #255	; 0xff
100125b6:	54d1      	strb	r1, [r2, r3]
100125b8:	e7f3      	b.n	100125a2 <inv_enable_gyro_tc+0x1a>
100125ba:	46c0      	nop			; (mov r8, r8)
100125bc:	1001248d 	.word	0x1001248d
100125c0:	10012461 	.word	0x10012461
100125c4:	10011fc9 	.word	0x10011fc9
100125c8:	1001c100 	.word	0x1001c100

100125cc <inv_disable_gyro_tc>:
100125cc:	b538      	push	{r3, r4, r5, lr}
100125ce:	24b2      	movs	r4, #178	; 0xb2
100125d0:	4d09      	ldr	r5, [pc, #36]	; (100125f8 <inv_disable_gyro_tc+0x2c>)
100125d2:	34ff      	adds	r4, #255	; 0xff
100125d4:	5d2b      	ldrb	r3, [r5, r4]
100125d6:	2000      	movs	r0, #0
100125d8:	2b00      	cmp	r3, #0
100125da:	d100      	bne.n	100125de <inv_disable_gyro_tc+0x12>
100125dc:	bd38      	pop	{r3, r4, r5, pc}
100125de:	4807      	ldr	r0, [pc, #28]	; (100125fc <inv_disable_gyro_tc+0x30>)
100125e0:	f7f7 fb04 	bl	10009bec <inv_unregister_data_cb>
100125e4:	4806      	ldr	r0, [pc, #24]	; (10012600 <inv_disable_gyro_tc+0x34>)
100125e6:	f7f8 f99f 	bl	1000a928 <inv_unregister_mpl_start_notification>
100125ea:	1c03      	adds	r3, r0, #0
100125ec:	2001      	movs	r0, #1
100125ee:	2b00      	cmp	r3, #0
100125f0:	d1f4      	bne.n	100125dc <inv_disable_gyro_tc+0x10>
100125f2:	552b      	strb	r3, [r5, r4]
100125f4:	2000      	movs	r0, #0
100125f6:	e7f1      	b.n	100125dc <inv_disable_gyro_tc+0x10>
100125f8:	1001c100 	.word	0x1001c100
100125fc:	10011fdd 	.word	0x10011fdd
10012600:	10011fc9 	.word	0x10011fc9

10012604 <inv_start_magnetic_disturbance>:
10012604:	2196      	movs	r1, #150	; 0x96
10012606:	b508      	push	{r3, lr}
10012608:	4802      	ldr	r0, [pc, #8]	; (10012614 <inv_start_magnetic_disturbance+0x10>)
1001260a:	0049      	lsls	r1, r1, #1
1001260c:	2204      	movs	r2, #4
1001260e:	f7f7 fa6f 	bl	10009af0 <inv_register_data_cb>
10012612:	bd08      	pop	{r3, pc}
10012614:	10012c31 	.word	0x10012c31

10012618 <inv_set_magnetic_disturbance>:
10012618:	2800      	cmp	r0, #0
1001261a:	dd05      	ble.n	10012628 <inv_set_magnetic_disturbance+0x10>
1001261c:	2284      	movs	r2, #132	; 0x84
1001261e:	2101      	movs	r1, #1
10012620:	4b02      	ldr	r3, [pc, #8]	; (1001262c <inv_set_magnetic_disturbance+0x14>)
10012622:	5099      	str	r1, [r3, r2]
10012624:	3a04      	subs	r2, #4
10012626:	5098      	str	r0, [r3, r2]
10012628:	2000      	movs	r0, #0
1001262a:	4770      	bx	lr
1001262c:	1001c2c4 	.word	0x1001c2c4

10012630 <inv_init_magnetic_disturbance>:
10012630:	b510      	push	{r4, lr}
10012632:	4c0c      	ldr	r4, [pc, #48]	; (10012664 <inv_init_magnetic_disturbance+0x34>)
10012634:	2100      	movs	r1, #0
10012636:	1c20      	adds	r0, r4, #0
10012638:	22b8      	movs	r2, #184	; 0xb8
1001263a:	f005 fbc6 	bl	10017dca <memset>
1001263e:	4b0a      	ldr	r3, [pc, #40]	; (10012668 <inv_init_magnetic_disturbance+0x38>)
10012640:	4a0a      	ldr	r2, [pc, #40]	; (1001266c <inv_init_magnetic_disturbance+0x3c>)
10012642:	60e3      	str	r3, [r4, #12]
10012644:	4b0a      	ldr	r3, [pc, #40]	; (10012670 <inv_init_magnetic_disturbance+0x40>)
10012646:	2000      	movs	r0, #0
10012648:	60a3      	str	r3, [r4, #8]
1001264a:	4b0a      	ldr	r3, [pc, #40]	; (10012674 <inv_init_magnetic_disturbance+0x44>)
1001264c:	6023      	str	r3, [r4, #0]
1001264e:	4b0a      	ldr	r3, [pc, #40]	; (10012678 <inv_init_magnetic_disturbance+0x48>)
10012650:	6063      	str	r3, [r4, #4]
10012652:	2380      	movs	r3, #128	; 0x80
10012654:	05db      	lsls	r3, r3, #23
10012656:	6663      	str	r3, [r4, #100]	; 0x64
10012658:	23fa      	movs	r3, #250	; 0xfa
1001265a:	00db      	lsls	r3, r3, #3
1001265c:	67e3      	str	r3, [r4, #124]	; 0x7c
1001265e:	239c      	movs	r3, #156	; 0x9c
10012660:	50e2      	str	r2, [r4, r3]
10012662:	bd10      	pop	{r4, pc}
10012664:	1001c2c4 	.word	0x1001c2c4
10012668:	42b40000 	.word	0x42b40000
1001266c:	3e2e147b 	.word	0x3e2e147b
10012670:	c2b40000 	.word	0xc2b40000
10012674:	42700000 	.word	0x42700000
10012678:	41f00000 	.word	0x41f00000

1001267c <inv_stop_magnetic_disturbance>:
1001267c:	b508      	push	{r3, lr}
1001267e:	4802      	ldr	r0, [pc, #8]	; (10012688 <inv_stop_magnetic_disturbance+0xc>)
10012680:	f7f7 fab4 	bl	10009bec <inv_unregister_data_cb>
10012684:	bd08      	pop	{r3, pc}
10012686:	46c0      	nop			; (mov r8, r8)
10012688:	10012c31 	.word	0x10012c31

1001268c <inv_enable_magnetic_disturbance>:
1001268c:	b508      	push	{r3, lr}
1001268e:	f7ff ffcf 	bl	10012630 <inv_init_magnetic_disturbance>
10012692:	2800      	cmp	r0, #0
10012694:	d108      	bne.n	100126a8 <inv_enable_magnetic_disturbance+0x1c>
10012696:	228c      	movs	r2, #140	; 0x8c
10012698:	2101      	movs	r1, #1
1001269a:	4b04      	ldr	r3, [pc, #16]	; (100126ac <inv_enable_magnetic_disturbance+0x20>)
1001269c:	5098      	str	r0, [r3, r2]
1001269e:	3a04      	subs	r2, #4
100126a0:	4803      	ldr	r0, [pc, #12]	; (100126b0 <inv_enable_magnetic_disturbance+0x24>)
100126a2:	5099      	str	r1, [r3, r2]
100126a4:	f7f8 f970 	bl	1000a988 <inv_register_mpl_start_notification>
100126a8:	bd08      	pop	{r3, pc}
100126aa:	46c0      	nop			; (mov r8, r8)
100126ac:	1001c2c4 	.word	0x1001c2c4
100126b0:	10012605 	.word	0x10012605

100126b4 <inv_disable_magnetic_disturbance>:
100126b4:	b510      	push	{r4, lr}
100126b6:	4c04      	ldr	r4, [pc, #16]	; (100126c8 <inv_disable_magnetic_disturbance+0x14>)
100126b8:	1c20      	adds	r0, r4, #0
100126ba:	f7f7 fa97 	bl	10009bec <inv_unregister_data_cb>
100126be:	1c20      	adds	r0, r4, #0
100126c0:	f7f7 fa94 	bl	10009bec <inv_unregister_data_cb>
100126c4:	bd10      	pop	{r4, pc}
100126c6:	46c0      	nop			; (mov r8, r8)
100126c8:	10012c31 	.word	0x10012c31

100126cc <inv_disable_dip_tracking>:
100126cc:	2100      	movs	r1, #0
100126ce:	238c      	movs	r3, #140	; 0x8c
100126d0:	4a01      	ldr	r2, [pc, #4]	; (100126d8 <inv_disable_dip_tracking+0xc>)
100126d2:	2000      	movs	r0, #0
100126d4:	50d1      	str	r1, [r2, r3]
100126d6:	4770      	bx	lr
100126d8:	1001c2c4 	.word	0x1001c2c4

100126dc <inv_enable_dip_tracking>:
100126dc:	2101      	movs	r1, #1
100126de:	238c      	movs	r3, #140	; 0x8c
100126e0:	4a01      	ldr	r2, [pc, #4]	; (100126e8 <inv_enable_dip_tracking+0xc>)
100126e2:	2000      	movs	r0, #0
100126e4:	50d1      	str	r1, [r2, r3]
100126e6:	4770      	bx	lr
100126e8:	1001c2c4 	.word	0x1001c2c4

100126ec <inv_track_dip_angle>:
100126ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100126ee:	2800      	cmp	r0, #0
100126f0:	d00b      	beq.n	1001270a <inv_track_dip_angle+0x1e>
100126f2:	2801      	cmp	r0, #1
100126f4:	d019      	beq.n	1001272a <inv_track_dip_angle+0x3e>
100126f6:	2101      	movs	r1, #1
100126f8:	2298      	movs	r2, #152	; 0x98
100126fa:	4b20      	ldr	r3, [pc, #128]	; (1001277c <inv_track_dip_angle+0x90>)
100126fc:	5099      	str	r1, [r3, r2]
100126fe:	2200      	movs	r2, #0
10012700:	318b      	adds	r1, #139	; 0x8b
10012702:	505a      	str	r2, [r3, r1]
10012704:	3104      	adds	r1, #4
10012706:	505a      	str	r2, [r3, r1]
10012708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001270a:	22a0      	movs	r2, #160	; 0xa0
1001270c:	4b1b      	ldr	r3, [pc, #108]	; (1001277c <inv_track_dip_angle+0x90>)
1001270e:	5099      	str	r1, [r3, r2]
10012710:	3204      	adds	r2, #4
10012712:	5099      	str	r1, [r3, r2]
10012714:	2100      	movs	r1, #0
10012716:	3204      	adds	r2, #4
10012718:	5099      	str	r1, [r3, r2]
1001271a:	2101      	movs	r1, #1
1001271c:	3a14      	subs	r2, #20
1001271e:	5098      	str	r0, [r3, r2]
10012720:	3a04      	subs	r2, #4
10012722:	5099      	str	r1, [r3, r2]
10012724:	3208      	adds	r2, #8
10012726:	5098      	str	r0, [r3, r2]
10012728:	e7ee      	b.n	10012708 <inv_track_dip_angle+0x1c>
1001272a:	23a0      	movs	r3, #160	; 0xa0
1001272c:	4d13      	ldr	r5, [pc, #76]	; (1001277c <inv_track_dip_angle+0x90>)
1001272e:	1c08      	adds	r0, r1, #0
10012730:	1c0c      	adds	r4, r1, #0
10012732:	58e9      	ldr	r1, [r5, r3]
10012734:	f003 f8ea 	bl	1001590c <__aeabi_fsub>
10012738:	239c      	movs	r3, #156	; 0x9c
1001273a:	0040      	lsls	r0, r0, #1
1001273c:	0840      	lsrs	r0, r0, #1
1001273e:	58e9      	ldr	r1, [r5, r3]
10012740:	f002 fb5e 	bl	10014e00 <__aeabi_fcmplt>
10012744:	2800      	cmp	r0, #0
10012746:	d014      	beq.n	10012772 <inv_track_dip_angle+0x86>
10012748:	2394      	movs	r3, #148	; 0x94
1001274a:	27a4      	movs	r7, #164	; 0xa4
1001274c:	58ea      	ldr	r2, [r5, r3]
1001274e:	59e9      	ldr	r1, [r5, r7]
10012750:	1c56      	adds	r6, r2, #1
10012752:	50ee      	str	r6, [r5, r3]
10012754:	1c20      	adds	r0, r4, #0
10012756:	f002 fc85 	bl	10015064 <__aeabi_fadd>
1001275a:	51e8      	str	r0, [r5, r7]
1001275c:	2e31      	cmp	r6, #49	; 0x31
1001275e:	ddd3      	ble.n	10012708 <inv_track_dip_angle+0x1c>
10012760:	2390      	movs	r3, #144	; 0x90
10012762:	2202      	movs	r2, #2
10012764:	4906      	ldr	r1, [pc, #24]	; (10012780 <inv_track_dip_angle+0x94>)
10012766:	50ea      	str	r2, [r5, r3]
10012768:	f002 fdf2 	bl	10015350 <__aeabi_fdiv>
1001276c:	23a8      	movs	r3, #168	; 0xa8
1001276e:	50e8      	str	r0, [r5, r3]
10012770:	e7ca      	b.n	10012708 <inv_track_dip_angle+0x1c>
10012772:	2390      	movs	r3, #144	; 0x90
10012774:	50e8      	str	r0, [r5, r3]
10012776:	3304      	adds	r3, #4
10012778:	50e8      	str	r0, [r5, r3]
1001277a:	e7c5      	b.n	10012708 <inv_track_dip_angle+0x1c>
1001277c:	1001c2c4 	.word	0x1001c2c4
10012780:	42480000 	.word	0x42480000

10012784 <ComputeAngleVelocity>:
10012784:	b5f0      	push	{r4, r5, r6, r7, lr}
10012786:	464f      	mov	r7, r9
10012788:	4646      	mov	r6, r8
1001278a:	1c04      	adds	r4, r0, #0
1001278c:	1c0d      	adds	r5, r1, #0
1001278e:	b4c0      	push	{r6, r7}
10012790:	b08f      	sub	sp, #60	; 0x3c
10012792:	a905      	add	r1, sp, #20
10012794:	4691      	mov	r9, r2
10012796:	f7f7 fe49 	bl	1000a42c <inv_quaternion_to_rotation>
1001279a:	1c28      	adds	r0, r5, #0
1001279c:	1c21      	adds	r1, r4, #0
1001279e:	aa01      	add	r2, sp, #4
100127a0:	f7f7 fb00 	bl	10009da4 <inv_q_mult>
100127a4:	1c20      	adds	r0, r4, #0
100127a6:	1c29      	adds	r1, r5, #0
100127a8:	f7f7 fc7c 	bl	1000a0a4 <inv_q_invert>
100127ac:	2300      	movs	r3, #0
100127ae:	4698      	mov	r8, r3
100127b0:	4643      	mov	r3, r8
100127b2:	005d      	lsls	r5, r3, #1
100127b4:	ab05      	add	r3, sp, #20
100127b6:	469c      	mov	ip, r3
100127b8:	2400      	movs	r4, #0
100127ba:	2600      	movs	r6, #0
100127bc:	2700      	movs	r7, #0
100127be:	4445      	add	r5, r8
100127c0:	4465      	add	r5, ip
100127c2:	592b      	ldr	r3, [r5, r4]
100127c4:	5928      	ldr	r0, [r5, r4]
100127c6:	17d9      	asrs	r1, r3, #31
100127c8:	ab01      	add	r3, sp, #4
100127ca:	191b      	adds	r3, r3, r4
100127cc:	685a      	ldr	r2, [r3, #4]
100127ce:	3404      	adds	r4, #4
100127d0:	17d3      	asrs	r3, r2, #31
100127d2:	f002 fb61 	bl	10014e98 <__aeabi_lmul>
100127d6:	1836      	adds	r6, r6, r0
100127d8:	414f      	adcs	r7, r1
100127da:	2c0c      	cmp	r4, #12
100127dc:	d1f1      	bne.n	100127c2 <ComputeAngleVelocity+0x3e>
100127de:	00bb      	lsls	r3, r7, #2
100127e0:	0fb6      	lsrs	r6, r6, #30
100127e2:	431e      	orrs	r6, r3
100127e4:	4642      	mov	r2, r8
100127e6:	464b      	mov	r3, r9
100127e8:	509e      	str	r6, [r3, r2]
100127ea:	2304      	movs	r3, #4
100127ec:	469c      	mov	ip, r3
100127ee:	44e0      	add	r8, ip
100127f0:	4643      	mov	r3, r8
100127f2:	2b0c      	cmp	r3, #12
100127f4:	d1dc      	bne.n	100127b0 <ComputeAngleVelocity+0x2c>
100127f6:	b00f      	add	sp, #60	; 0x3c
100127f8:	bc0c      	pop	{r2, r3}
100127fa:	4690      	mov	r8, r2
100127fc:	4699      	mov	r9, r3
100127fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

10012800 <Mag3ofNormalizedLong>:
10012800:	b570      	push	{r4, r5, r6, lr}
10012802:	1c04      	adds	r4, r0, #0
10012804:	6800      	ldr	r0, [r0, #0]
10012806:	f003 fa41 	bl	10015c8c <__aeabi_i2f>
1001280a:	1c06      	adds	r6, r0, #0
1001280c:	6860      	ldr	r0, [r4, #4]
1001280e:	f003 fa3d 	bl	10015c8c <__aeabi_i2f>
10012812:	1c05      	adds	r5, r0, #0
10012814:	68a0      	ldr	r0, [r4, #8]
10012816:	f003 fa39 	bl	10015c8c <__aeabi_i2f>
1001281a:	1c31      	adds	r1, r6, #0
1001281c:	1c04      	adds	r4, r0, #0
1001281e:	1c30      	adds	r0, r6, #0
10012820:	f002 ff60 	bl	100156e4 <__aeabi_fmul>
10012824:	1c29      	adds	r1, r5, #0
10012826:	1c06      	adds	r6, r0, #0
10012828:	1c28      	adds	r0, r5, #0
1001282a:	f002 ff5b 	bl	100156e4 <__aeabi_fmul>
1001282e:	1c01      	adds	r1, r0, #0
10012830:	1c30      	adds	r0, r6, #0
10012832:	f002 fc17 	bl	10015064 <__aeabi_fadd>
10012836:	1c21      	adds	r1, r4, #0
10012838:	1c05      	adds	r5, r0, #0
1001283a:	1c20      	adds	r0, r4, #0
1001283c:	f002 ff52 	bl	100156e4 <__aeabi_fmul>
10012840:	1c01      	adds	r1, r0, #0
10012842:	1c28      	adds	r0, r5, #0
10012844:	f002 fc0e 	bl	10015064 <__aeabi_fadd>
10012848:	f7fd fea0 	bl	1001058c <sqrtf>
1001284c:	21de      	movs	r1, #222	; 0xde
1001284e:	0589      	lsls	r1, r1, #22
10012850:	f002 ff48 	bl	100156e4 <__aeabi_fmul>
10012854:	bd70      	pop	{r4, r5, r6, pc}
10012856:	46c0      	nop			; (mov r8, r8)

10012858 <MagDisturbSetDisturbance>:
10012858:	b570      	push	{r4, r5, r6, lr}
1001285a:	4c1d      	ldr	r4, [pc, #116]	; (100128d0 <MagDisturbSetDisturbance+0x78>)
1001285c:	1c05      	adds	r5, r0, #0
1001285e:	1c0e      	adds	r6, r1, #0
10012860:	6820      	ldr	r0, [r4, #0]
10012862:	1c29      	adds	r1, r5, #0
10012864:	f002 facc 	bl	10014e00 <__aeabi_fcmplt>
10012868:	2800      	cmp	r0, #0
1001286a:	d105      	bne.n	10012878 <MagDisturbSetDisturbance+0x20>
1001286c:	1c28      	adds	r0, r5, #0
1001286e:	6861      	ldr	r1, [r4, #4]
10012870:	f002 fac6 	bl	10014e00 <__aeabi_fcmplt>
10012874:	2800      	cmp	r0, #0
10012876:	d00f      	beq.n	10012898 <MagDisturbSetDisturbance+0x40>
10012878:	6f63      	ldr	r3, [r4, #116]	; 0x74
1001287a:	2b00      	cmp	r3, #0
1001287c:	d011      	beq.n	100128a2 <MagDisturbSetDisturbance+0x4a>
1001287e:	2301      	movs	r3, #1
10012880:	6763      	str	r3, [r4, #116]	; 0x74
10012882:	2300      	movs	r3, #0
10012884:	67a3      	str	r3, [r4, #120]	; 0x78
10012886:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
10012888:	429a      	cmp	r2, r3
1001288a:	dc04      	bgt.n	10012896 <MagDisturbSetDisturbance+0x3e>
1001288c:	6f63      	ldr	r3, [r4, #116]	; 0x74
1001288e:	2b01      	cmp	r3, #1
10012890:	d00d      	beq.n	100128ae <MagDisturbSetDisturbance+0x56>
10012892:	2300      	movs	r3, #0
10012894:	6763      	str	r3, [r4, #116]	; 0x74
10012896:	bd70      	pop	{r4, r5, r6, pc}
10012898:	6923      	ldr	r3, [r4, #16]
1001289a:	2b01      	cmp	r3, #1
1001289c:	d00a      	beq.n	100128b4 <MagDisturbSetDisturbance+0x5c>
1001289e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
100128a0:	e7f1      	b.n	10012886 <MagDisturbSetDisturbance+0x2e>
100128a2:	1c20      	adds	r0, r4, #0
100128a4:	6da1      	ldr	r1, [r4, #88]	; 0x58
100128a6:	3018      	adds	r0, #24
100128a8:	f7f7 ff3a 	bl	1000a720 <inv_set_compass_correction>
100128ac:	e7e7      	b.n	1001287e <MagDisturbSetDisturbance+0x26>
100128ae:	2300      	movs	r3, #0
100128b0:	65e3      	str	r3, [r4, #92]	; 0x5c
100128b2:	e7ee      	b.n	10012892 <MagDisturbSetDisturbance+0x3a>
100128b4:	68e0      	ldr	r0, [r4, #12]
100128b6:	1c31      	adds	r1, r6, #0
100128b8:	f002 faa2 	bl	10014e00 <__aeabi_fcmplt>
100128bc:	2800      	cmp	r0, #0
100128be:	d1db      	bne.n	10012878 <MagDisturbSetDisturbance+0x20>
100128c0:	1c30      	adds	r0, r6, #0
100128c2:	68a1      	ldr	r1, [r4, #8]
100128c4:	f002 fa9c 	bl	10014e00 <__aeabi_fcmplt>
100128c8:	2800      	cmp	r0, #0
100128ca:	d1d5      	bne.n	10012878 <MagDisturbSetDisturbance+0x20>
100128cc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
100128ce:	e7da      	b.n	10012886 <MagDisturbSetDisturbance+0x2e>
100128d0:	1001c2c4 	.word	0x1001c2c4

100128d4 <MagDisturbCheckSettling>:
100128d4:	b538      	push	{r3, r4, r5, lr}
100128d6:	1c05      	adds	r5, r0, #0
100128d8:	1c0c      	adds	r4, r1, #0
100128da:	f7f7 ff45 	bl	1000a768 <inv_get_acc_state>
100128de:	2800      	cmp	r0, #0
100128e0:	d105      	bne.n	100128ee <MagDisturbCheckSettling+0x1a>
100128e2:	1c28      	adds	r0, r5, #0
100128e4:	490d      	ldr	r1, [pc, #52]	; (1001291c <MagDisturbCheckSettling+0x48>)
100128e6:	f002 fa9f 	bl	10014e28 <__aeabi_fcmpgt>
100128ea:	2800      	cmp	r0, #0
100128ec:	d010      	beq.n	10012910 <MagDisturbCheckSettling+0x3c>
100128ee:	2200      	movs	r2, #0
100128f0:	4b0b      	ldr	r3, [pc, #44]	; (10012920 <MagDisturbCheckSettling+0x4c>)
100128f2:	611a      	str	r2, [r3, #16]
100128f4:	615a      	str	r2, [r3, #20]
100128f6:	695a      	ldr	r2, [r3, #20]
100128f8:	18a1      	adds	r1, r4, r2
100128fa:	22fa      	movs	r2, #250	; 0xfa
100128fc:	6159      	str	r1, [r3, #20]
100128fe:	0052      	lsls	r2, r2, #1
10012900:	4291      	cmp	r1, r2
10012902:	dd04      	ble.n	1001290e <MagDisturbCheckSettling+0x3a>
10012904:	3af4      	subs	r2, #244	; 0xf4
10012906:	3aff      	subs	r2, #255	; 0xff
10012908:	611a      	str	r2, [r3, #16]
1001290a:	2200      	movs	r2, #0
1001290c:	615a      	str	r2, [r3, #20]
1001290e:	bd38      	pop	{r3, r4, r5, pc}
10012910:	4b03      	ldr	r3, [pc, #12]	; (10012920 <MagDisturbCheckSettling+0x4c>)
10012912:	691a      	ldr	r2, [r3, #16]
10012914:	2a00      	cmp	r2, #0
10012916:	d1fa      	bne.n	1001290e <MagDisturbCheckSettling+0x3a>
10012918:	e7ed      	b.n	100128f6 <MagDisturbCheckSettling+0x22>
1001291a:	46c0      	nop			; (mov r8, r8)
1001291c:	461c4000 	.word	0x461c4000
10012920:	1001c2c4 	.word	0x1001c2c4

10012924 <inv_check_magnetic_disturbance>:
10012924:	b5f0      	push	{r4, r5, r6, r7, lr}
10012926:	465f      	mov	r7, fp
10012928:	4644      	mov	r4, r8
1001292a:	4656      	mov	r6, sl
1001292c:	464d      	mov	r5, r9
1001292e:	b4f0      	push	{r4, r5, r6, r7}
10012930:	2400      	movs	r4, #0
10012932:	2788      	movs	r7, #136	; 0x88
10012934:	b08d      	sub	sp, #52	; 0x34
10012936:	9406      	str	r4, [sp, #24]
10012938:	9407      	str	r4, [sp, #28]
1001293a:	9408      	str	r4, [sp, #32]
1001293c:	4cb5      	ldr	r4, [pc, #724]	; (10012c14 <inv_check_magnetic_disturbance+0x2f0>)
1001293e:	59e7      	ldr	r7, [r4, r7]
10012940:	2f00      	cmp	r7, #0
10012942:	d107      	bne.n	10012954 <inv_check_magnetic_disturbance+0x30>
10012944:	2000      	movs	r0, #0
10012946:	b00d      	add	sp, #52	; 0x34
10012948:	bc3c      	pop	{r2, r3, r4, r5}
1001294a:	4690      	mov	r8, r2
1001294c:	4699      	mov	r9, r3
1001294e:	46a2      	mov	sl, r4
10012950:	46ab      	mov	fp, r5
10012952:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012954:	4699      	mov	r9, r3
10012956:	4690      	mov	r8, r2
10012958:	9101      	str	r1, [sp, #4]
1001295a:	1c05      	adds	r5, r0, #0
1001295c:	f7f7 f812 	bl	10009984 <inv_get_gyro_on>
10012960:	2800      	cmp	r0, #0
10012962:	d000      	beq.n	10012966 <inv_check_magnetic_disturbance+0x42>
10012964:	e120      	b.n	10012ba8 <inv_check_magnetic_disturbance+0x284>
10012966:	2780      	movs	r7, #128	; 0x80
10012968:	59e3      	ldr	r3, [r4, r7]
1001296a:	2b00      	cmp	r3, #0
1001296c:	dd0f      	ble.n	1001298e <inv_check_magnetic_disturbance+0x6a>
1001296e:	2201      	movs	r2, #1
10012970:	2384      	movs	r3, #132	; 0x84
10012972:	50e2      	str	r2, [r4, r3]
10012974:	f7f7 f806 	bl	10009984 <inv_get_gyro_on>
10012978:	2800      	cmp	r0, #0
1001297a:	d000      	beq.n	1001297e <inv_check_magnetic_disturbance+0x5a>
1001297c:	e0a9      	b.n	10012ad2 <inv_check_magnetic_disturbance+0x1ae>
1001297e:	59e3      	ldr	r3, [r4, r7]
10012980:	1b5b      	subs	r3, r3, r5
10012982:	51e3      	str	r3, [r4, r7]
10012984:	2b00      	cmp	r3, #0
10012986:	dc02      	bgt.n	1001298e <inv_check_magnetic_disturbance+0x6a>
10012988:	2200      	movs	r2, #0
1001298a:	2384      	movs	r3, #132	; 0x84
1001298c:	50e2      	str	r2, [r4, r3]
1001298e:	f7f7 ffa7 	bl	1000a8e0 <inv_got_compass_bias>
10012992:	2800      	cmp	r0, #0
10012994:	d0d6      	beq.n	10012944 <inv_check_magnetic_disturbance+0x20>
10012996:	2600      	movs	r6, #0
10012998:	2700      	movs	r7, #0
1001299a:	4643      	mov	r3, r8
1001299c:	59d8      	ldr	r0, [r3, r7]
1001299e:	f003 f975 	bl	10015c8c <__aeabi_i2f>
100129a2:	21de      	movs	r1, #222	; 0xde
100129a4:	0589      	lsls	r1, r1, #22
100129a6:	f002 fe9d 	bl	100156e4 <__aeabi_fmul>
100129aa:	464b      	mov	r3, r9
100129ac:	4683      	mov	fp, r0
100129ae:	59d8      	ldr	r0, [r3, r7]
100129b0:	f003 f96c 	bl	10015c8c <__aeabi_i2f>
100129b4:	1c01      	adds	r1, r0, #0
100129b6:	4658      	mov	r0, fp
100129b8:	f002 fe94 	bl	100156e4 <__aeabi_fmul>
100129bc:	21de      	movs	r1, #222	; 0xde
100129be:	0589      	lsls	r1, r1, #22
100129c0:	f002 fe90 	bl	100156e4 <__aeabi_fmul>
100129c4:	1c01      	adds	r1, r0, #0
100129c6:	1c30      	adds	r0, r6, #0
100129c8:	f002 fb4c 	bl	10015064 <__aeabi_fadd>
100129cc:	3704      	adds	r7, #4
100129ce:	1c06      	adds	r6, r0, #0
100129d0:	2f0c      	cmp	r7, #12
100129d2:	d1e2      	bne.n	1001299a <inv_check_magnetic_disturbance+0x76>
100129d4:	4640      	mov	r0, r8
100129d6:	f7ff ff13 	bl	10012800 <Mag3ofNormalizedLong>
100129da:	9000      	str	r0, [sp, #0]
100129dc:	9900      	ldr	r1, [sp, #0]
100129de:	1c30      	adds	r0, r6, #0
100129e0:	f002 fcb6 	bl	10015350 <__aeabi_fdiv>
100129e4:	21fe      	movs	r1, #254	; 0xfe
100129e6:	0589      	lsls	r1, r1, #22
100129e8:	1c06      	adds	r6, r0, #0
100129ea:	f002 fa1d 	bl	10014e28 <__aeabi_fcmpgt>
100129ee:	2800      	cmp	r0, #0
100129f0:	d067      	beq.n	10012ac2 <inv_check_magnetic_disturbance+0x19e>
100129f2:	26fe      	movs	r6, #254	; 0xfe
100129f4:	05b6      	lsls	r6, r6, #22
100129f6:	1c30      	adds	r0, r6, #0
100129f8:	f000 ff66 	bl	100138c8 <acosf>
100129fc:	238c      	movs	r3, #140	; 0x8c
100129fe:	58e3      	ldr	r3, [r4, r3]
10012a00:	4680      	mov	r8, r0
10012a02:	2b00      	cmp	r3, #0
10012a04:	d00c      	beq.n	10012a20 <inv_check_magnetic_disturbance+0xfc>
10012a06:	9800      	ldr	r0, [sp, #0]
10012a08:	6821      	ldr	r1, [r4, #0]
10012a0a:	f002 f9f9 	bl	10014e00 <__aeabi_fcmplt>
10012a0e:	2800      	cmp	r0, #0
10012a10:	d006      	beq.n	10012a20 <inv_check_magnetic_disturbance+0xfc>
10012a12:	9800      	ldr	r0, [sp, #0]
10012a14:	6861      	ldr	r1, [r4, #4]
10012a16:	f002 fa07 	bl	10014e28 <__aeabi_fcmpgt>
10012a1a:	2800      	cmp	r0, #0
10012a1c:	d000      	beq.n	10012a20 <inv_check_magnetic_disturbance+0xfc>
10012a1e:	e0c7      	b.n	10012bb0 <inv_check_magnetic_disturbance+0x28c>
10012a20:	ae09      	add	r6, sp, #36	; 0x24
10012a22:	1c30      	adds	r0, r6, #0
10012a24:	f7f7 fece 	bl	1000a7c4 <inv_get_local_field>
10012a28:	1c21      	adds	r1, r4, #0
10012a2a:	1c30      	adds	r0, r6, #0
10012a2c:	31ac      	adds	r1, #172	; 0xac
10012a2e:	220c      	movs	r2, #12
10012a30:	f005 f99e 	bl	10017d70 <memcmp>
10012a34:	2800      	cmp	r0, #0
10012a36:	d157      	bne.n	10012ae8 <inv_check_magnetic_disturbance+0x1c4>
10012a38:	2398      	movs	r3, #152	; 0x98
10012a3a:	58e3      	ldr	r3, [r4, r3]
10012a3c:	2b01      	cmp	r3, #1
10012a3e:	d053      	beq.n	10012ae8 <inv_check_magnetic_disturbance+0x1c4>
10012a40:	6de3      	ldr	r3, [r4, #92]	; 0x5c
10012a42:	2b00      	cmp	r3, #0
10012a44:	d10e      	bne.n	10012a64 <inv_check_magnetic_disturbance+0x140>
10012a46:	2301      	movs	r3, #1
10012a48:	65e3      	str	r3, [r4, #92]	; 0x5c
10012a4a:	3357      	adds	r3, #87	; 0x57
10012a4c:	469a      	mov	sl, r3
10012a4e:	2600      	movs	r6, #0
10012a50:	44a2      	add	sl, r4
10012a52:	1c30      	adds	r0, r6, #0
10012a54:	3018      	adds	r0, #24
10012a56:	1820      	adds	r0, r4, r0
10012a58:	4651      	mov	r1, sl
10012a5a:	3610      	adds	r6, #16
10012a5c:	f7f7 fe74 	bl	1000a748 <inv_get_compass_correction>
10012a60:	2e40      	cmp	r6, #64	; 0x40
10012a62:	d1f6      	bne.n	10012a52 <inv_check_magnetic_disturbance+0x12e>
10012a64:	1c26      	adds	r6, r4, #0
10012a66:	9f01      	ldr	r7, [sp, #4]
10012a68:	3664      	adds	r6, #100	; 0x64
10012a6a:	aa03      	add	r2, sp, #12
10012a6c:	1c38      	adds	r0, r7, #0
10012a6e:	1c31      	adds	r1, r6, #0
10012a70:	f7ff fe88 	bl	10012784 <ComputeAngleVelocity>
10012a74:	1c31      	adds	r1, r6, #0
10012a76:	1c38      	adds	r0, r7, #0
10012a78:	f7f7 fb14 	bl	1000a0a4 <inv_q_invert>
10012a7c:	a806      	add	r0, sp, #24
10012a7e:	f7f7 f96d 	bl	10009d5c <inv_get_gyro_sum_of_sqr>
10012a82:	f003 f94b 	bl	10015d1c <__aeabi_ui2f>
10012a86:	21f2      	movs	r1, #242	; 0xf2
10012a88:	0589      	lsls	r1, r1, #22
10012a8a:	f002 fe2b 	bl	100156e4 <__aeabi_fmul>
10012a8e:	1c29      	adds	r1, r5, #0
10012a90:	f7ff ff20 	bl	100128d4 <MagDisturbCheckSettling>
10012a94:	9800      	ldr	r0, [sp, #0]
10012a96:	4641      	mov	r1, r8
10012a98:	f7ff fede 	bl	10012858 <MagDisturbSetDisturbance>
10012a9c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
10012a9e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
10012aa0:	4293      	cmp	r3, r2
10012aa2:	da01      	bge.n	10012aa8 <inv_check_magnetic_disturbance+0x184>
10012aa4:	18eb      	adds	r3, r5, r3
10012aa6:	67a3      	str	r3, [r4, #120]	; 0x78
10012aa8:	6f60      	ldr	r0, [r4, #116]	; 0x74
10012aaa:	2800      	cmp	r0, #0
10012aac:	d000      	beq.n	10012ab0 <inv_check_magnetic_disturbance+0x18c>
10012aae:	e74a      	b.n	10012946 <inv_check_magnetic_disturbance+0x22>
10012ab0:	6e23      	ldr	r3, [r4, #96]	; 0x60
10012ab2:	469c      	mov	ip, r3
10012ab4:	23fa      	movs	r3, #250	; 0xfa
10012ab6:	4465      	add	r5, ip
10012ab8:	009b      	lsls	r3, r3, #2
10012aba:	429d      	cmp	r5, r3
10012abc:	dc7e      	bgt.n	10012bbc <inv_check_magnetic_disturbance+0x298>
10012abe:	6625      	str	r5, [r4, #96]	; 0x60
10012ac0:	e741      	b.n	10012946 <inv_check_magnetic_disturbance+0x22>
10012ac2:	1c30      	adds	r0, r6, #0
10012ac4:	4954      	ldr	r1, [pc, #336]	; (10012c18 <inv_check_magnetic_disturbance+0x2f4>)
10012ac6:	f002 f99b 	bl	10014e00 <__aeabi_fcmplt>
10012aca:	2800      	cmp	r0, #0
10012acc:	d093      	beq.n	100129f6 <inv_check_magnetic_disturbance+0xd2>
10012ace:	4e52      	ldr	r6, [pc, #328]	; (10012c18 <inv_check_magnetic_disturbance+0x2f4>)
10012ad0:	e791      	b.n	100129f6 <inv_check_magnetic_disturbance+0xd2>
10012ad2:	a806      	add	r0, sp, #24
10012ad4:	f7f7 f942 	bl	10009d5c <inv_get_gyro_sum_of_sqr>
10012ad8:	2390      	movs	r3, #144	; 0x90
10012ada:	33ff      	adds	r3, #255	; 0xff
10012adc:	0980      	lsrs	r0, r0, #6
10012ade:	4298      	cmp	r0, r3
10012ae0:	d900      	bls.n	10012ae4 <inv_check_magnetic_disturbance+0x1c0>
10012ae2:	e74c      	b.n	1001297e <inv_check_magnetic_disturbance+0x5a>
10012ae4:	59e3      	ldr	r3, [r4, r7]
10012ae6:	e74d      	b.n	10012984 <inv_check_magnetic_disturbance+0x60>
10012ae8:	1c23      	adds	r3, r4, #0
10012aea:	1c32      	adds	r2, r6, #0
10012aec:	33ac      	adds	r3, #172	; 0xac
10012aee:	ca83      	ldmia	r2!, {r0, r1, r7}
10012af0:	c383      	stmia	r3!, {r0, r1, r7}
10012af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012af4:	2b00      	cmp	r3, #0
10012af6:	d113      	bne.n	10012b20 <inv_check_magnetic_disturbance+0x1fc>
10012af8:	6873      	ldr	r3, [r6, #4]
10012afa:	2b00      	cmp	r3, #0
10012afc:	d110      	bne.n	10012b20 <inv_check_magnetic_disturbance+0x1fc>
10012afe:	68b3      	ldr	r3, [r6, #8]
10012b00:	4699      	mov	r9, r3
10012b02:	2b00      	cmp	r3, #0
10012b04:	d10c      	bne.n	10012b20 <inv_check_magnetic_disturbance+0x1fc>
10012b06:	2698      	movs	r6, #152	; 0x98
10012b08:	4b44      	ldr	r3, [pc, #272]	; (10012c1c <inv_check_magnetic_disturbance+0x2f8>)
10012b0a:	6023      	str	r3, [r4, #0]
10012b0c:	4b44      	ldr	r3, [pc, #272]	; (10012c20 <inv_check_magnetic_disturbance+0x2fc>)
10012b0e:	6063      	str	r3, [r4, #4]
10012b10:	59a3      	ldr	r3, [r4, r6]
10012b12:	2b01      	cmp	r3, #1
10012b14:	d06b      	beq.n	10012bee <inv_check_magnetic_disturbance+0x2ca>
10012b16:	4b43      	ldr	r3, [pc, #268]	; (10012c24 <inv_check_magnetic_disturbance+0x300>)
10012b18:	60a3      	str	r3, [r4, #8]
10012b1a:	4b43      	ldr	r3, [pc, #268]	; (10012c28 <inv_check_magnetic_disturbance+0x304>)
10012b1c:	60e3      	str	r3, [r4, #12]
10012b1e:	e78f      	b.n	10012a40 <inv_check_magnetic_disturbance+0x11c>
10012b20:	1c30      	adds	r0, r6, #0
10012b22:	f7ff fe6d 	bl	10012800 <Mag3ofNormalizedLong>
10012b26:	2100      	movs	r1, #0
10012b28:	4681      	mov	r9, r0
10012b2a:	f002 f963 	bl	10014df4 <__aeabi_fcmpeq>
10012b2e:	2800      	cmp	r0, #0
10012b30:	d186      	bne.n	10012a40 <inv_check_magnetic_disturbance+0x11c>
10012b32:	4648      	mov	r0, r9
10012b34:	493d      	ldr	r1, [pc, #244]	; (10012c2c <inv_check_magnetic_disturbance+0x308>)
10012b36:	f002 fee9 	bl	1001590c <__aeabi_fsub>
10012b3a:	1c01      	adds	r1, r0, #0
10012b3c:	f002 fdd2 	bl	100156e4 <__aeabi_fmul>
10012b40:	f7fd fd24 	bl	1001058c <sqrtf>
10012b44:	4939      	ldr	r1, [pc, #228]	; (10012c2c <inv_check_magnetic_disturbance+0x308>)
10012b46:	6060      	str	r0, [r4, #4]
10012b48:	4648      	mov	r0, r9
10012b4a:	f002 fa8b 	bl	10015064 <__aeabi_fadd>
10012b4e:	1c01      	adds	r1, r0, #0
10012b50:	f002 fdc8 	bl	100156e4 <__aeabi_fmul>
10012b54:	f7fd fd1a 	bl	1001058c <sqrtf>
10012b58:	6020      	str	r0, [r4, #0]
10012b5a:	68b0      	ldr	r0, [r6, #8]
10012b5c:	f003 f896 	bl	10015c8c <__aeabi_i2f>
10012b60:	21de      	movs	r1, #222	; 0xde
10012b62:	0589      	lsls	r1, r1, #22
10012b64:	f002 fdbe 	bl	100156e4 <__aeabi_fmul>
10012b68:	4649      	mov	r1, r9
10012b6a:	f002 fbf1 	bl	10015350 <__aeabi_fdiv>
10012b6e:	21fe      	movs	r1, #254	; 0xfe
10012b70:	0589      	lsls	r1, r1, #22
10012b72:	4681      	mov	r9, r0
10012b74:	f002 f958 	bl	10014e28 <__aeabi_fcmpgt>
10012b78:	2800      	cmp	r0, #0
10012b7a:	d02f      	beq.n	10012bdc <inv_check_magnetic_disturbance+0x2b8>
10012b7c:	23fe      	movs	r3, #254	; 0xfe
10012b7e:	059b      	lsls	r3, r3, #22
10012b80:	4699      	mov	r9, r3
10012b82:	269c      	movs	r6, #156	; 0x9c
10012b84:	4648      	mov	r0, r9
10012b86:	f000 fe9f 	bl	100138c8 <acosf>
10012b8a:	59a1      	ldr	r1, [r4, r6]
10012b8c:	f002 febe 	bl	1001590c <__aeabi_fsub>
10012b90:	60a0      	str	r0, [r4, #8]
10012b92:	4648      	mov	r0, r9
10012b94:	f000 fe98 	bl	100138c8 <acosf>
10012b98:	59a1      	ldr	r1, [r4, r6]
10012b9a:	f002 fa63 	bl	10015064 <__aeabi_fadd>
10012b9e:	2200      	movs	r2, #0
10012ba0:	238c      	movs	r3, #140	; 0x8c
10012ba2:	60e0      	str	r0, [r4, #12]
10012ba4:	50e2      	str	r2, [r4, r3]
10012ba6:	e74b      	b.n	10012a40 <inv_check_magnetic_disturbance+0x11c>
10012ba8:	a806      	add	r0, sp, #24
10012baa:	f7f7 f86b 	bl	10009c84 <inv_get_gyro>
10012bae:	e6da      	b.n	10012966 <inv_check_magnetic_disturbance+0x42>
10012bb0:	2390      	movs	r3, #144	; 0x90
10012bb2:	4641      	mov	r1, r8
10012bb4:	58e0      	ldr	r0, [r4, r3]
10012bb6:	f7ff fd99 	bl	100126ec <inv_track_dip_angle>
10012bba:	e731      	b.n	10012a20 <inv_check_magnetic_disturbance+0xfc>
10012bbc:	6620      	str	r0, [r4, #96]	; 0x60
10012bbe:	1c21      	adds	r1, r4, #0
10012bc0:	1c20      	adds	r0, r4, #0
10012bc2:	3128      	adds	r1, #40	; 0x28
10012bc4:	2230      	movs	r2, #48	; 0x30
10012bc6:	3018      	adds	r0, #24
10012bc8:	f005 f8ea 	bl	10017da0 <memmove>
10012bcc:	1c20      	adds	r0, r4, #0
10012bce:	1c21      	adds	r1, r4, #0
10012bd0:	3048      	adds	r0, #72	; 0x48
10012bd2:	3158      	adds	r1, #88	; 0x58
10012bd4:	f7f7 fdb8 	bl	1000a748 <inv_get_compass_correction>
10012bd8:	6f60      	ldr	r0, [r4, #116]	; 0x74
10012bda:	e6b4      	b.n	10012946 <inv_check_magnetic_disturbance+0x22>
10012bdc:	4648      	mov	r0, r9
10012bde:	490e      	ldr	r1, [pc, #56]	; (10012c18 <inv_check_magnetic_disturbance+0x2f4>)
10012be0:	f002 f90e 	bl	10014e00 <__aeabi_fcmplt>
10012be4:	2800      	cmp	r0, #0
10012be6:	d0cc      	beq.n	10012b82 <inv_check_magnetic_disturbance+0x25e>
10012be8:	4b0b      	ldr	r3, [pc, #44]	; (10012c18 <inv_check_magnetic_disturbance+0x2f4>)
10012bea:	4699      	mov	r9, r3
10012bec:	e7c9      	b.n	10012b82 <inv_check_magnetic_disturbance+0x25e>
10012bee:	33a7      	adds	r3, #167	; 0xa7
10012bf0:	58e3      	ldr	r3, [r4, r3]
10012bf2:	469b      	mov	fp, r3
10012bf4:	239c      	movs	r3, #156	; 0x9c
10012bf6:	58e3      	ldr	r3, [r4, r3]
10012bf8:	4658      	mov	r0, fp
10012bfa:	1c19      	adds	r1, r3, #0
10012bfc:	469a      	mov	sl, r3
10012bfe:	f002 fe85 	bl	1001590c <__aeabi_fsub>
10012c02:	4651      	mov	r1, sl
10012c04:	60a0      	str	r0, [r4, #8]
10012c06:	4658      	mov	r0, fp
10012c08:	f002 fa2c 	bl	10015064 <__aeabi_fadd>
10012c0c:	464b      	mov	r3, r9
10012c0e:	60e0      	str	r0, [r4, #12]
10012c10:	51a3      	str	r3, [r4, r6]
10012c12:	e715      	b.n	10012a40 <inv_check_magnetic_disturbance+0x11c>
10012c14:	1001c2c4 	.word	0x1001c2c4
10012c18:	bf800000 	.word	0xbf800000
10012c1c:	42700000 	.word	0x42700000
10012c20:	41f00000 	.word	0x41f00000
10012c24:	c2b40000 	.word	0xc2b40000
10012c28:	42b40000 	.word	0x42b40000
10012c2c:	41200000 	.word	0x41200000

10012c30 <inv_magnetic_disturbance_process>:
10012c30:	b570      	push	{r4, r5, r6, lr}
10012c32:	b088      	sub	sp, #32
10012c34:	1c04      	adds	r4, r0, #0
10012c36:	a801      	add	r0, sp, #4
10012c38:	f7f7 fdd0 	bl	1000a7dc <inv_get_gravity>
10012c3c:	22c4      	movs	r2, #196	; 0xc4
10012c3e:	23c0      	movs	r3, #192	; 0xc0
10012c40:	58a5      	ldr	r5, [r4, r2]
10012c42:	58e3      	ldr	r3, [r4, r3]
10012c44:	a804      	add	r0, sp, #16
10012c46:	1b5d      	subs	r5, r3, r5
10012c48:	f7f7 fe14 	bl	1000a874 <inv_get_6axis_quaternion>
10012c4c:	1c22      	adds	r2, r4, #0
10012c4e:	1c06      	adds	r6, r0, #0
10012c50:	32a0      	adds	r2, #160	; 0xa0
10012c52:	a904      	add	r1, sp, #16
10012c54:	ab01      	add	r3, sp, #4
10012c56:	1c28      	adds	r0, r5, #0
10012c58:	f7ff fe64 	bl	10012924 <inv_check_magnetic_disturbance>
10012c5c:	f7f6 fed2 	bl	10009a04 <inv_set_compass_disturbance>
10012c60:	1c30      	adds	r0, r6, #0
10012c62:	b008      	add	sp, #32
10012c64:	bd70      	pop	{r4, r5, r6, pc}
10012c66:	46c0      	nop			; (mov r8, r8)

10012c68 <inv_get_magnetic_disturbance_state>:
10012c68:	4b01      	ldr	r3, [pc, #4]	; (10012c70 <inv_get_magnetic_disturbance_state+0x8>)
10012c6a:	6f58      	ldr	r0, [r3, #116]	; 0x74
10012c6c:	4770      	bx	lr
10012c6e:	46c0      	nop			; (mov r8, r8)
10012c70:	1001c2c4 	.word	0x1001c2c4

10012c74 <inv_normalize_quat>:
10012c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012c76:	464f      	mov	r7, r9
10012c78:	4646      	mov	r6, r8
10012c7a:	1c04      	adds	r4, r0, #0
10012c7c:	b4c0      	push	{r6, r7}
10012c7e:	6800      	ldr	r0, [r0, #0]
10012c80:	1c0d      	adds	r5, r1, #0
10012c82:	f003 f803 	bl	10015c8c <__aeabi_i2f>
10012c86:	4681      	mov	r9, r0
10012c88:	6860      	ldr	r0, [r4, #4]
10012c8a:	f002 ffff 	bl	10015c8c <__aeabi_i2f>
10012c8e:	4680      	mov	r8, r0
10012c90:	68a0      	ldr	r0, [r4, #8]
10012c92:	f002 fffb 	bl	10015c8c <__aeabi_i2f>
10012c96:	1c07      	adds	r7, r0, #0
10012c98:	68e0      	ldr	r0, [r4, #12]
10012c9a:	f002 fff7 	bl	10015c8c <__aeabi_i2f>
10012c9e:	4649      	mov	r1, r9
10012ca0:	1c06      	adds	r6, r0, #0
10012ca2:	4648      	mov	r0, r9
10012ca4:	f002 fd1e 	bl	100156e4 <__aeabi_fmul>
10012ca8:	4641      	mov	r1, r8
10012caa:	4681      	mov	r9, r0
10012cac:	4640      	mov	r0, r8
10012cae:	f002 fd19 	bl	100156e4 <__aeabi_fmul>
10012cb2:	1c01      	adds	r1, r0, #0
10012cb4:	4648      	mov	r0, r9
10012cb6:	f002 f9d5 	bl	10015064 <__aeabi_fadd>
10012cba:	1c39      	adds	r1, r7, #0
10012cbc:	4680      	mov	r8, r0
10012cbe:	1c38      	adds	r0, r7, #0
10012cc0:	f002 fd10 	bl	100156e4 <__aeabi_fmul>
10012cc4:	1c01      	adds	r1, r0, #0
10012cc6:	4640      	mov	r0, r8
10012cc8:	f002 f9cc 	bl	10015064 <__aeabi_fadd>
10012ccc:	1c31      	adds	r1, r6, #0
10012cce:	1c07      	adds	r7, r0, #0
10012cd0:	1c30      	adds	r0, r6, #0
10012cd2:	f002 fd07 	bl	100156e4 <__aeabi_fmul>
10012cd6:	1c01      	adds	r1, r0, #0
10012cd8:	1c38      	adds	r0, r7, #0
10012cda:	f002 f9c3 	bl	10015064 <__aeabi_fadd>
10012cde:	2100      	movs	r1, #0
10012ce0:	1c06      	adds	r6, r0, #0
10012ce2:	f002 f897 	bl	10014e14 <__aeabi_fcmple>
10012ce6:	2800      	cmp	r0, #0
10012ce8:	d134      	bne.n	10012d54 <inv_normalize_quat+0xe0>
10012cea:	1c30      	adds	r0, r6, #0
10012cec:	f7fd fc4e 	bl	1001058c <sqrtf>
10012cf0:	1c01      	adds	r1, r0, #0
10012cf2:	20fe      	movs	r0, #254	; 0xfe
10012cf4:	0580      	lsls	r0, r0, #22
10012cf6:	f002 fb2b 	bl	10015350 <__aeabi_fdiv>
10012cfa:	219d      	movs	r1, #157	; 0x9d
10012cfc:	05c9      	lsls	r1, r1, #23
10012cfe:	f002 fcf1 	bl	100156e4 <__aeabi_fmul>
10012d02:	1c06      	adds	r6, r0, #0
10012d04:	6820      	ldr	r0, [r4, #0]
10012d06:	f002 ffc1 	bl	10015c8c <__aeabi_i2f>
10012d0a:	1c31      	adds	r1, r6, #0
10012d0c:	f002 fcea 	bl	100156e4 <__aeabi_fmul>
10012d10:	f002 ff9a 	bl	10015c48 <__aeabi_f2iz>
10012d14:	6028      	str	r0, [r5, #0]
10012d16:	6860      	ldr	r0, [r4, #4]
10012d18:	f002 ffb8 	bl	10015c8c <__aeabi_i2f>
10012d1c:	1c31      	adds	r1, r6, #0
10012d1e:	f002 fce1 	bl	100156e4 <__aeabi_fmul>
10012d22:	f002 ff91 	bl	10015c48 <__aeabi_f2iz>
10012d26:	6068      	str	r0, [r5, #4]
10012d28:	68a0      	ldr	r0, [r4, #8]
10012d2a:	f002 ffaf 	bl	10015c8c <__aeabi_i2f>
10012d2e:	1c31      	adds	r1, r6, #0
10012d30:	f002 fcd8 	bl	100156e4 <__aeabi_fmul>
10012d34:	f002 ff88 	bl	10015c48 <__aeabi_f2iz>
10012d38:	60a8      	str	r0, [r5, #8]
10012d3a:	68e0      	ldr	r0, [r4, #12]
10012d3c:	f002 ffa6 	bl	10015c8c <__aeabi_i2f>
10012d40:	1c31      	adds	r1, r6, #0
10012d42:	f002 fccf 	bl	100156e4 <__aeabi_fmul>
10012d46:	f002 ff7f 	bl	10015c48 <__aeabi_f2iz>
10012d4a:	60e8      	str	r0, [r5, #12]
10012d4c:	bc0c      	pop	{r2, r3}
10012d4e:	4690      	mov	r8, r2
10012d50:	4699      	mov	r9, r3
10012d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012d54:	2380      	movs	r3, #128	; 0x80
10012d56:	05db      	lsls	r3, r3, #23
10012d58:	602b      	str	r3, [r5, #0]
10012d5a:	2300      	movs	r3, #0
10012d5c:	606b      	str	r3, [r5, #4]
10012d5e:	60ab      	str	r3, [r5, #8]
10012d60:	60eb      	str	r3, [r5, #12]
10012d62:	e7f3      	b.n	10012d4c <inv_normalize_quat+0xd8>

10012d64 <inv_start_quaternion>:
10012d64:	b508      	push	{r3, lr}
10012d66:	4b08      	ldr	r3, [pc, #32]	; (10012d88 <inv_start_quaternion+0x24>)
10012d68:	4908      	ldr	r1, [pc, #32]	; (10012d8c <inv_start_quaternion+0x28>)
10012d6a:	6818      	ldr	r0, [r3, #0]
10012d6c:	2208      	movs	r2, #8
10012d6e:	f004 ffff 	bl	10017d70 <memcmp>
10012d72:	1c03      	adds	r3, r0, #0
10012d74:	2032      	movs	r0, #50	; 0x32
10012d76:	2b00      	cmp	r3, #0
10012d78:	d000      	beq.n	10012d7c <inv_start_quaternion+0x18>
10012d7a:	bd08      	pop	{r3, pc}
10012d7c:	21c8      	movs	r1, #200	; 0xc8
10012d7e:	2213      	movs	r2, #19
10012d80:	4803      	ldr	r0, [pc, #12]	; (10012d90 <inv_start_quaternion+0x2c>)
10012d82:	f7f6 feb5 	bl	10009af0 <inv_register_data_cb>
10012d86:	e7f8      	b.n	10012d7a <inv_start_quaternion+0x16>
10012d88:	1001a4e8 	.word	0x1001a4e8
10012d8c:	10019e6c 	.word	0x10019e6c
10012d90:	10013705 	.word	0x10013705

10012d94 <inv_generate_gyro_quaternion.part.1>:
10012d94:	b570      	push	{r4, r5, r6, lr}
10012d96:	6986      	ldr	r6, [r0, #24]
10012d98:	b08a      	sub	sp, #40	; 0x28
10012d9a:	17f3      	asrs	r3, r6, #31
10012d9c:	18f2      	adds	r2, r6, r3
10012d9e:	405a      	eors	r2, r3
10012da0:	4b42      	ldr	r3, [pc, #264]	; (10012eac <inv_generate_gyro_quaternion.part.1+0x118>)
10012da2:	429a      	cmp	r2, r3
10012da4:	dc5b      	bgt.n	10012e5e <inv_generate_gyro_quaternion.part.1+0xca>
10012da6:	69c2      	ldr	r2, [r0, #28]
10012da8:	17d1      	asrs	r1, r2, #31
10012daa:	1852      	adds	r2, r2, r1
10012dac:	404a      	eors	r2, r1
10012dae:	429a      	cmp	r2, r3
10012db0:	dd5e      	ble.n	10012e70 <inv_generate_gyro_quaternion.part.1+0xdc>
10012db2:	23c8      	movs	r3, #200	; 0xc8
10012db4:	03db      	lsls	r3, r3, #15
10012db6:	429a      	cmp	r2, r3
10012db8:	dc00      	bgt.n	10012dbc <inv_generate_gyro_quaternion.part.1+0x28>
10012dba:	e074      	b.n	10012ea6 <inv_generate_gyro_quaternion.part.1+0x112>
10012dbc:	2303      	movs	r3, #3
10012dbe:	4c3c      	ldr	r4, [pc, #240]	; (10012eb0 <inv_generate_gyro_quaternion.part.1+0x11c>)
10012dc0:	1c05      	adds	r5, r0, #0
10012dc2:	63a3      	str	r3, [r4, #56]	; 0x38
10012dc4:	6a80      	ldr	r0, [r0, #40]	; 0x28
10012dc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
10012dc8:	4283      	cmp	r3, r0
10012dca:	d066      	beq.n	10012e9a <inv_generate_gyro_quaternion.part.1+0x106>
10012dcc:	6360      	str	r0, [r4, #52]	; 0x34
10012dce:	f002 ff5d 	bl	10015c8c <__aeabi_i2f>
10012dd2:	4938      	ldr	r1, [pc, #224]	; (10012eb4 <inv_generate_gyro_quaternion.part.1+0x120>)
10012dd4:	f002 fabc 	bl	10015350 <__aeabi_fdiv>
10012dd8:	219c      	movs	r1, #156	; 0x9c
10012dda:	05c9      	lsls	r1, r1, #23
10012ddc:	f002 fc82 	bl	100156e4 <__aeabi_fmul>
10012de0:	f004 fda8 	bl	10017934 <__aeabi_f2d>
10012de4:	4a34      	ldr	r2, [pc, #208]	; (10012eb8 <inv_generate_gyro_quaternion.part.1+0x124>)
10012de6:	4b35      	ldr	r3, [pc, #212]	; (10012ebc <inv_generate_gyro_quaternion.part.1+0x128>)
10012de8:	f003 ff26 	bl	10016c38 <__aeabi_dmul>
10012dec:	2200      	movs	r2, #0
10012dee:	4b34      	ldr	r3, [pc, #208]	; (10012ec0 <inv_generate_gyro_quaternion.part.1+0x12c>)
10012df0:	f003 ff22 	bl	10016c38 <__aeabi_dmul>
10012df4:	2200      	movs	r2, #0
10012df6:	4b33      	ldr	r3, [pc, #204]	; (10012ec4 <inv_generate_gyro_quaternion.part.1+0x130>)
10012df8:	f003 fafa 	bl	100163f0 <__aeabi_ddiv>
10012dfc:	f004 fcea 	bl	100177d4 <__aeabi_d2iz>
10012e00:	1c01      	adds	r1, r0, #0
10012e02:	6320      	str	r0, [r4, #48]	; 0x30
10012e04:	2300      	movs	r3, #0
10012e06:	1c30      	adds	r0, r6, #0
10012e08:	9302      	str	r3, [sp, #8]
10012e0a:	f7f6 ffbf 	bl	10009d8c <inv_q30_mult>
10012e0e:	6b21      	ldr	r1, [r4, #48]	; 0x30
10012e10:	9003      	str	r0, [sp, #12]
10012e12:	69e8      	ldr	r0, [r5, #28]
10012e14:	f7f6 ffba 	bl	10009d8c <inv_q30_mult>
10012e18:	6b21      	ldr	r1, [r4, #48]	; 0x30
10012e1a:	9004      	str	r0, [sp, #16]
10012e1c:	6a28      	ldr	r0, [r5, #32]
10012e1e:	f7f6 ffb5 	bl	10009d8c <inv_q30_mult>
10012e22:	a902      	add	r1, sp, #8
10012e24:	9005      	str	r0, [sp, #20]
10012e26:	aa06      	add	r2, sp, #24
10012e28:	1c20      	adds	r0, r4, #0
10012e2a:	f7f6 ffbb 	bl	10009da4 <inv_q_mult>
10012e2e:	9b06      	ldr	r3, [sp, #24]
10012e30:	1c20      	adds	r0, r4, #0
10012e32:	019b      	lsls	r3, r3, #6
10012e34:	9306      	str	r3, [sp, #24]
10012e36:	9b07      	ldr	r3, [sp, #28]
10012e38:	a906      	add	r1, sp, #24
10012e3a:	019b      	lsls	r3, r3, #6
10012e3c:	9307      	str	r3, [sp, #28]
10012e3e:	9b08      	ldr	r3, [sp, #32]
10012e40:	1c22      	adds	r2, r4, #0
10012e42:	019b      	lsls	r3, r3, #6
10012e44:	9308      	str	r3, [sp, #32]
10012e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012e48:	9301      	str	r3, [sp, #4]
10012e4a:	019b      	lsls	r3, r3, #6
10012e4c:	9309      	str	r3, [sp, #36]	; 0x24
10012e4e:	f7f7 f911 	bl	1000a074 <inv_q_add>
10012e52:	1c20      	adds	r0, r4, #0
10012e54:	1c21      	adds	r1, r4, #0
10012e56:	f7ff ff0d 	bl	10012c74 <inv_normalize_quat>
10012e5a:	b00a      	add	sp, #40	; 0x28
10012e5c:	bd70      	pop	{r4, r5, r6, pc}
10012e5e:	23c8      	movs	r3, #200	; 0xc8
10012e60:	03db      	lsls	r3, r3, #15
10012e62:	429a      	cmp	r2, r3
10012e64:	dcaa      	bgt.n	10012dbc <inv_generate_gyro_quaternion.part.1+0x28>
10012e66:	69c3      	ldr	r3, [r0, #28]
10012e68:	17d9      	asrs	r1, r3, #31
10012e6a:	185a      	adds	r2, r3, r1
10012e6c:	404a      	eors	r2, r1
10012e6e:	e7a0      	b.n	10012db2 <inv_generate_gyro_quaternion.part.1+0x1e>
10012e70:	6a02      	ldr	r2, [r0, #32]
10012e72:	17d4      	asrs	r4, r2, #31
10012e74:	1911      	adds	r1, r2, r4
10012e76:	4061      	eors	r1, r4
10012e78:	4299      	cmp	r1, r3
10012e7a:	dd10      	ble.n	10012e9e <inv_generate_gyro_quaternion.part.1+0x10a>
10012e7c:	17d3      	asrs	r3, r2, #31
10012e7e:	18d2      	adds	r2, r2, r3
10012e80:	405a      	eors	r2, r3
10012e82:	23c8      	movs	r3, #200	; 0xc8
10012e84:	03db      	lsls	r3, r3, #15
10012e86:	429a      	cmp	r2, r3
10012e88:	dc98      	bgt.n	10012dbc <inv_generate_gyro_quaternion.part.1+0x28>
10012e8a:	2302      	movs	r3, #2
10012e8c:	4c08      	ldr	r4, [pc, #32]	; (10012eb0 <inv_generate_gyro_quaternion.part.1+0x11c>)
10012e8e:	1c05      	adds	r5, r0, #0
10012e90:	63a3      	str	r3, [r4, #56]	; 0x38
10012e92:	6a80      	ldr	r0, [r0, #40]	; 0x28
10012e94:	6b63      	ldr	r3, [r4, #52]	; 0x34
10012e96:	4283      	cmp	r3, r0
10012e98:	d198      	bne.n	10012dcc <inv_generate_gyro_quaternion.part.1+0x38>
10012e9a:	6b21      	ldr	r1, [r4, #48]	; 0x30
10012e9c:	e7b2      	b.n	10012e04 <inv_generate_gyro_quaternion.part.1+0x70>
10012e9e:	2200      	movs	r2, #0
10012ea0:	4b03      	ldr	r3, [pc, #12]	; (10012eb0 <inv_generate_gyro_quaternion.part.1+0x11c>)
10012ea2:	639a      	str	r2, [r3, #56]	; 0x38
10012ea4:	e7d9      	b.n	10012e5a <inv_generate_gyro_quaternion.part.1+0xc6>
10012ea6:	6a02      	ldr	r2, [r0, #32]
10012ea8:	e7e8      	b.n	10012e7c <inv_generate_gyro_quaternion.part.1+0xe8>
10012eaa:	46c0      	nop			; (mov r8, r8)
10012eac:	0000ffff 	.word	0x0000ffff
10012eb0:	1001c37c 	.word	0x1001c37c
10012eb4:	49742400 	.word	0x49742400
10012eb8:	54442d18 	.word	0x54442d18
10012ebc:	400921fb 	.word	0x400921fb
10012ec0:	40700000 	.word	0x40700000
10012ec4:	40668000 	.word	0x40668000

10012ec8 <inv_generate_gyro_quaternion>:
10012ec8:	b508      	push	{r3, lr}
10012eca:	6b03      	ldr	r3, [r0, #48]	; 0x30
10012ecc:	065b      	lsls	r3, r3, #25
10012ece:	d501      	bpl.n	10012ed4 <inv_generate_gyro_quaternion+0xc>
10012ed0:	f7ff ff60 	bl	10012d94 <inv_generate_gyro_quaternion.part.1>
10012ed4:	bd08      	pop	{r3, pc}
10012ed6:	46c0      	nop			; (mov r8, r8)

10012ed8 <inv_set_quaternion>:
10012ed8:	b530      	push	{r4, r5, lr}
10012eda:	4c0a      	ldr	r4, [pc, #40]	; (10012f04 <inv_set_quaternion+0x2c>)
10012edc:	b085      	sub	sp, #20
10012ede:	1c05      	adds	r5, r0, #0
10012ee0:	4669      	mov	r1, sp
10012ee2:	1c20      	adds	r0, r4, #0
10012ee4:	f7f7 f8de 	bl	1000a0a4 <inv_q_invert>
10012ee8:	1c22      	adds	r2, r4, #0
10012eea:	1c28      	adds	r0, r5, #0
10012eec:	4669      	mov	r1, sp
10012eee:	3220      	adds	r2, #32
10012ef0:	f7f6 ff58 	bl	10009da4 <inv_q_mult>
10012ef4:	1c20      	adds	r0, r4, #0
10012ef6:	1c29      	adds	r1, r5, #0
10012ef8:	2210      	movs	r2, #16
10012efa:	3010      	adds	r0, #16
10012efc:	f004 ff47 	bl	10017d8e <memcpy>
10012f00:	b005      	add	sp, #20
10012f02:	bd30      	pop	{r4, r5, pc}
10012f04:	1001c37c 	.word	0x1001c37c

10012f08 <inv_generate_accel_gyro_quaternion>:
10012f08:	b5f0      	push	{r4, r5, r6, r7, lr}
10012f0a:	4644      	mov	r4, r8
10012f0c:	465f      	mov	r7, fp
10012f0e:	4656      	mov	r6, sl
10012f10:	464d      	mov	r5, r9
10012f12:	2250      	movs	r2, #80	; 0x50
10012f14:	b4f0      	push	{r4, r5, r6, r7}
10012f16:	6f43      	ldr	r3, [r0, #116]	; 0x74
10012f18:	b09f      	sub	sp, #124	; 0x7c
10012f1a:	1c04      	adds	r4, r0, #0
10012f1c:	4013      	ands	r3, r2
10012f1e:	2b40      	cmp	r3, #64	; 0x40
10012f20:	d100      	bne.n	10012f24 <inv_generate_accel_gyro_quaternion+0x1c>
10012f22:	e2c1      	b.n	100134a8 <inv_generate_accel_gyro_quaternion+0x5a0>
10012f24:	2690      	movs	r6, #144	; 0x90
10012f26:	0076      	lsls	r6, r6, #1
10012f28:	5983      	ldr	r3, [r0, r6]
10012f2a:	4dc2      	ldr	r5, [pc, #776]	; (10013234 <inv_generate_accel_gyro_quaternion+0x32c>)
10012f2c:	401a      	ands	r2, r3
10012f2e:	2a40      	cmp	r2, #64	; 0x40
10012f30:	d100      	bne.n	10012f34 <inv_generate_accel_gyro_quaternion+0x2c>
10012f32:	e389      	b.n	10013648 <inv_generate_accel_gyro_quaternion+0x740>
10012f34:	05da      	lsls	r2, r3, #23
10012f36:	d500      	bpl.n	10012f3a <inv_generate_accel_gyro_quaternion+0x32>
10012f38:	e18c      	b.n	10013254 <inv_generate_accel_gyro_quaternion+0x34c>
10012f3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
10012f3c:	065b      	lsls	r3, r3, #25
10012f3e:	d500      	bpl.n	10012f42 <inv_generate_accel_gyro_quaternion+0x3a>
10012f40:	e268      	b.n	10013414 <inv_generate_accel_gyro_quaternion+0x50c>
10012f42:	1c2f      	adds	r7, r5, #0
10012f44:	1c28      	adds	r0, r5, #0
10012f46:	3710      	adds	r7, #16
10012f48:	3020      	adds	r0, #32
10012f4a:	1c29      	adds	r1, r5, #0
10012f4c:	1c3a      	adds	r2, r7, #0
10012f4e:	f7f6 ff29 	bl	10009da4 <inv_q_mult>
10012f52:	6f63      	ldr	r3, [r4, #116]	; 0x74
10012f54:	065b      	lsls	r3, r3, #25
10012f56:	d572      	bpl.n	1001303e <inv_generate_accel_gyro_quaternion+0x136>
10012f58:	2390      	movs	r3, #144	; 0x90
10012f5a:	005b      	lsls	r3, r3, #1
10012f5c:	58e3      	ldr	r3, [r4, r3]
10012f5e:	6b22      	ldr	r2, [r4, #48]	; 0x30
10012f60:	4313      	orrs	r3, r2
10012f62:	05db      	lsls	r3, r3, #23
10012f64:	d400      	bmi.n	10012f68 <inv_generate_accel_gyro_quaternion+0x60>
10012f66:	e072      	b.n	1001304e <inv_generate_accel_gyro_quaternion+0x146>
10012f68:	1c21      	adds	r1, r4, #0
10012f6a:	ae12      	add	r6, sp, #72	; 0x48
10012f6c:	1c38      	adds	r0, r7, #0
10012f6e:	315c      	adds	r1, #92	; 0x5c
10012f70:	1c32      	adds	r2, r6, #0
10012f72:	f7f7 f8a3 	bl	1000a0bc <inv_q_rotate>
10012f76:	6e22      	ldr	r2, [r4, #96]	; 0x60
10012f78:	6e67      	ldr	r7, [r4, #100]	; 0x64
10012f7a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
10012f7c:	4690      	mov	r8, r2
10012f7e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
10012f80:	17d2      	asrs	r2, r2, #31
10012f82:	17db      	asrs	r3, r3, #31
10012f84:	4692      	mov	sl, r2
10012f86:	17fa      	asrs	r2, r7, #31
10012f88:	4691      	mov	r9, r2
10012f8a:	1c19      	adds	r1, r3, #0
10012f8c:	1c02      	adds	r2, r0, #0
10012f8e:	f001 ff83 	bl	10014e98 <__aeabi_lmul>
10012f92:	4642      	mov	r2, r8
10012f94:	9000      	str	r0, [sp, #0]
10012f96:	9101      	str	r1, [sp, #4]
10012f98:	4653      	mov	r3, sl
10012f9a:	4640      	mov	r0, r8
10012f9c:	4651      	mov	r1, sl
10012f9e:	f001 ff7b 	bl	10014e98 <__aeabi_lmul>
10012fa2:	9a00      	ldr	r2, [sp, #0]
10012fa4:	9b01      	ldr	r3, [sp, #4]
10012fa6:	1812      	adds	r2, r2, r0
10012fa8:	414b      	adcs	r3, r1
10012faa:	1c38      	adds	r0, r7, #0
10012fac:	9200      	str	r2, [sp, #0]
10012fae:	9301      	str	r3, [sp, #4]
10012fb0:	4649      	mov	r1, r9
10012fb2:	1c3a      	adds	r2, r7, #0
10012fb4:	464b      	mov	r3, r9
10012fb6:	f001 ff6f 	bl	10014e98 <__aeabi_lmul>
10012fba:	9a00      	ldr	r2, [sp, #0]
10012fbc:	9b01      	ldr	r3, [sp, #4]
10012fbe:	1880      	adds	r0, r0, r2
10012fc0:	4159      	adcs	r1, r3
10012fc2:	2902      	cmp	r1, #2
10012fc4:	dd00      	ble.n	10012fc8 <inv_generate_accel_gyro_quaternion+0xc0>
10012fc6:	e22d      	b.n	10013424 <inv_generate_accel_gyro_quaternion+0x51c>
10012fc8:	d100      	bne.n	10012fcc <inv_generate_accel_gyro_quaternion+0xc4>
10012fca:	e227      	b.n	1001341c <inv_generate_accel_gyro_quaternion+0x514>
10012fcc:	6baf      	ldr	r7, [r5, #56]	; 0x38
10012fce:	2f04      	cmp	r7, #4
10012fd0:	d100      	bne.n	10012fd4 <inv_generate_accel_gyro_quaternion+0xcc>
10012fd2:	e25a      	b.n	1001348a <inv_generate_accel_gyro_quaternion+0x582>
10012fd4:	1ebb      	subs	r3, r7, #2
10012fd6:	2b01      	cmp	r3, #1
10012fd8:	d800      	bhi.n	10012fdc <inv_generate_accel_gyro_quaternion+0xd4>
10012fda:	e258      	b.n	1001348e <inv_generate_accel_gyro_quaternion+0x586>
10012fdc:	2001      	movs	r0, #1
10012fde:	2f01      	cmp	r7, #1
10012fe0:	d100      	bne.n	10012fe4 <inv_generate_accel_gyro_quaternion+0xdc>
10012fe2:	e36a      	b.n	100136ba <inv_generate_accel_gyro_quaternion+0x7b2>
10012fe4:	0084      	lsls	r4, r0, #2
10012fe6:	4894      	ldr	r0, [pc, #592]	; (10013238 <inv_generate_accel_gyro_quaternion+0x330>)
10012fe8:	4344      	muls	r4, r0
10012fea:	2700      	movs	r7, #0
10012fec:	6870      	ldr	r0, [r6, #4]
10012fee:	1c21      	adds	r1, r4, #0
10012ff0:	0280      	lsls	r0, r0, #10
10012ff2:	9716      	str	r7, [sp, #88]	; 0x58
10012ff4:	f7f6 feca 	bl	10009d8c <inv_q30_mult>
10012ff8:	9b12      	ldr	r3, [sp, #72]	; 0x48
10012ffa:	9017      	str	r0, [sp, #92]	; 0x5c
10012ffc:	4258      	negs	r0, r3
10012ffe:	1c21      	adds	r1, r4, #0
10013000:	0280      	lsls	r0, r0, #10
10013002:	1c2c      	adds	r4, r5, #0
10013004:	f7f6 fec2 	bl	10009d8c <inv_q30_mult>
10013008:	3410      	adds	r4, #16
1001300a:	9018      	str	r0, [sp, #96]	; 0x60
1001300c:	1c21      	adds	r1, r4, #0
1001300e:	a816      	add	r0, sp, #88	; 0x58
10013010:	aa1a      	add	r2, sp, #104	; 0x68
10013012:	9719      	str	r7, [sp, #100]	; 0x64
10013014:	f7f6 fec6 	bl	10009da4 <inv_q_mult>
10013018:	1c22      	adds	r2, r4, #0
1001301a:	1c20      	adds	r0, r4, #0
1001301c:	a91a      	add	r1, sp, #104	; 0x68
1001301e:	f7f7 f829 	bl	1000a074 <inv_q_add>
10013022:	1c20      	adds	r0, r4, #0
10013024:	1c21      	adds	r1, r4, #0
10013026:	f7ff fe25 	bl	10012c74 <inv_normalize_quat>
1001302a:	1c28      	adds	r0, r5, #0
1001302c:	a902      	add	r1, sp, #8
1001302e:	f7f7 f839 	bl	1000a0a4 <inv_q_invert>
10013032:	1c2a      	adds	r2, r5, #0
10013034:	1c20      	adds	r0, r4, #0
10013036:	3220      	adds	r2, #32
10013038:	a902      	add	r1, sp, #8
1001303a:	f7f6 feb3 	bl	10009da4 <inv_q_mult>
1001303e:	2000      	movs	r0, #0
10013040:	b01f      	add	sp, #124	; 0x7c
10013042:	bc3c      	pop	{r2, r3, r4, r5}
10013044:	4690      	mov	r8, r2
10013046:	4699      	mov	r9, r3
10013048:	46a2      	mov	sl, r4
1001304a:	46ab      	mov	fp, r5
1001304c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001304e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
10013050:	6de0      	ldr	r0, [r4, #92]	; 0x5c
10013052:	4698      	mov	r8, r3
10013054:	f002 fe1a 	bl	10015c8c <__aeabi_i2f>
10013058:	4681      	mov	r9, r0
1001305a:	6e20      	ldr	r0, [r4, #96]	; 0x60
1001305c:	f002 fe16 	bl	10015c8c <__aeabi_i2f>
10013060:	1c07      	adds	r7, r0, #0
10013062:	6e60      	ldr	r0, [r4, #100]	; 0x64
10013064:	f002 fe12 	bl	10015c8c <__aeabi_i2f>
10013068:	4649      	mov	r1, r9
1001306a:	1c06      	adds	r6, r0, #0
1001306c:	4648      	mov	r0, r9
1001306e:	f002 fb39 	bl	100156e4 <__aeabi_fmul>
10013072:	1c39      	adds	r1, r7, #0
10013074:	4681      	mov	r9, r0
10013076:	1c38      	adds	r0, r7, #0
10013078:	f002 fb34 	bl	100156e4 <__aeabi_fmul>
1001307c:	1c01      	adds	r1, r0, #0
1001307e:	4648      	mov	r0, r9
10013080:	f001 fff0 	bl	10015064 <__aeabi_fadd>
10013084:	1c31      	adds	r1, r6, #0
10013086:	1c07      	adds	r7, r0, #0
10013088:	1c30      	adds	r0, r6, #0
1001308a:	f002 fb2b 	bl	100156e4 <__aeabi_fmul>
1001308e:	1c01      	adds	r1, r0, #0
10013090:	1c38      	adds	r0, r7, #0
10013092:	f001 ffe7 	bl	10015064 <__aeabi_fadd>
10013096:	f7fd fa79 	bl	1001058c <sqrtf>
1001309a:	218d      	movs	r1, #141	; 0x8d
1001309c:	1c06      	adds	r6, r0, #0
1001309e:	0040      	lsls	r0, r0, #1
100130a0:	0840      	lsrs	r0, r0, #1
100130a2:	05c9      	lsls	r1, r1, #23
100130a4:	f001 fec0 	bl	10014e28 <__aeabi_fcmpgt>
100130a8:	2800      	cmp	r0, #0
100130aa:	d100      	bne.n	100130ae <inv_generate_accel_gyro_quaternion+0x1a6>
100130ac:	e0b5      	b.n	1001321a <inv_generate_accel_gyro_quaternion+0x312>
100130ae:	6928      	ldr	r0, [r5, #16]
100130b0:	f002 fdec 	bl	10015c8c <__aeabi_i2f>
100130b4:	21c2      	movs	r1, #194	; 0xc2
100130b6:	0589      	lsls	r1, r1, #22
100130b8:	f002 fb14 	bl	100156e4 <__aeabi_fmul>
100130bc:	901a      	str	r0, [sp, #104]	; 0x68
100130be:	6968      	ldr	r0, [r5, #20]
100130c0:	f002 fde4 	bl	10015c8c <__aeabi_i2f>
100130c4:	21c2      	movs	r1, #194	; 0xc2
100130c6:	0589      	lsls	r1, r1, #22
100130c8:	f002 fb0c 	bl	100156e4 <__aeabi_fmul>
100130cc:	af1a      	add	r7, sp, #104	; 0x68
100130ce:	6078      	str	r0, [r7, #4]
100130d0:	69a8      	ldr	r0, [r5, #24]
100130d2:	f002 fddb 	bl	10015c8c <__aeabi_i2f>
100130d6:	21c2      	movs	r1, #194	; 0xc2
100130d8:	0589      	lsls	r1, r1, #22
100130da:	f002 fb03 	bl	100156e4 <__aeabi_fmul>
100130de:	60b8      	str	r0, [r7, #8]
100130e0:	69e8      	ldr	r0, [r5, #28]
100130e2:	f002 fdd3 	bl	10015c8c <__aeabi_i2f>
100130e6:	21c2      	movs	r1, #194	; 0xc2
100130e8:	0589      	lsls	r1, r1, #22
100130ea:	f002 fafb 	bl	100156e4 <__aeabi_fmul>
100130ee:	2300      	movs	r3, #0
100130f0:	60f8      	str	r0, [r7, #12]
100130f2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
100130f4:	9316      	str	r3, [sp, #88]	; 0x58
100130f6:	f002 fdc9 	bl	10015c8c <__aeabi_i2f>
100130fa:	1c31      	adds	r1, r6, #0
100130fc:	f002 f928 	bl	10015350 <__aeabi_fdiv>
10013100:	9017      	str	r0, [sp, #92]	; 0x5c
10013102:	6e20      	ldr	r0, [r4, #96]	; 0x60
10013104:	f002 fdc2 	bl	10015c8c <__aeabi_i2f>
10013108:	1c31      	adds	r1, r6, #0
1001310a:	f002 f921 	bl	10015350 <__aeabi_fdiv>
1001310e:	9018      	str	r0, [sp, #96]	; 0x60
10013110:	6e60      	ldr	r0, [r4, #100]	; 0x64
10013112:	f002 fdbb 	bl	10015c8c <__aeabi_i2f>
10013116:	1c31      	adds	r1, r6, #0
10013118:	f002 f91a 	bl	10015350 <__aeabi_fdiv>
1001311c:	aa06      	add	r2, sp, #24
1001311e:	9019      	str	r0, [sp, #100]	; 0x64
10013120:	a916      	add	r1, sp, #88	; 0x58
10013122:	1c38      	adds	r0, r7, #0
10013124:	f7f6 fff2 	bl	1000a10c <inv_q_multf>
10013128:	1c38      	adds	r0, r7, #0
1001312a:	a90e      	add	r1, sp, #56	; 0x38
1001312c:	f7f7 f96e 	bl	1000a40c <inv_q_invertf>
10013130:	aa0a      	add	r2, sp, #40	; 0x28
10013132:	a806      	add	r0, sp, #24
10013134:	a90e      	add	r1, sp, #56	; 0x38
10013136:	f7f6 ffe9 	bl	1000a10c <inv_q_multf>
1001313a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1001313c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
1001313e:	1c31      	adds	r1, r6, #0
10013140:	1c30      	adds	r0, r6, #0
10013142:	f002 facf 	bl	100156e4 <__aeabi_fmul>
10013146:	1c21      	adds	r1, r4, #0
10013148:	4681      	mov	r9, r0
1001314a:	1c20      	adds	r0, r4, #0
1001314c:	f002 faca 	bl	100156e4 <__aeabi_fmul>
10013150:	1c01      	adds	r1, r0, #0
10013152:	4648      	mov	r0, r9
10013154:	f001 ff86 	bl	10015064 <__aeabi_fadd>
10013158:	4938      	ldr	r1, [pc, #224]	; (1001323c <inv_generate_accel_gyro_quaternion+0x334>)
1001315a:	4681      	mov	r9, r0
1001315c:	f001 fe50 	bl	10014e00 <__aeabi_fcmplt>
10013160:	2800      	cmp	r0, #0
10013162:	d110      	bne.n	10013186 <inv_generate_accel_gyro_quaternion+0x27e>
10013164:	4648      	mov	r0, r9
10013166:	4936      	ldr	r1, [pc, #216]	; (10013240 <inv_generate_accel_gyro_quaternion+0x338>)
10013168:	f001 fe4a 	bl	10014e00 <__aeabi_fcmplt>
1001316c:	2800      	cmp	r0, #0
1001316e:	d000      	beq.n	10013172 <inv_generate_accel_gyro_quaternion+0x26a>
10013170:	e2b5      	b.n	100136de <inv_generate_accel_gyro_quaternion+0x7d6>
10013172:	4648      	mov	r0, r9
10013174:	4933      	ldr	r1, [pc, #204]	; (10013244 <inv_generate_accel_gyro_quaternion+0x33c>)
10013176:	f001 fe43 	bl	10014e00 <__aeabi_fcmplt>
1001317a:	2800      	cmp	r0, #0
1001317c:	d000      	beq.n	10013180 <inv_generate_accel_gyro_quaternion+0x278>
1001317e:	e28d      	b.n	1001369c <inv_generate_accel_gyro_quaternion+0x794>
10013180:	4b31      	ldr	r3, [pc, #196]	; (10013248 <inv_generate_accel_gyro_quaternion+0x340>)
10013182:	4699      	mov	r9, r3
10013184:	e001      	b.n	1001318a <inv_generate_accel_gyro_quaternion+0x282>
10013186:	4b31      	ldr	r3, [pc, #196]	; (1001324c <inv_generate_accel_gyro_quaternion+0x344>)
10013188:	4699      	mov	r9, r3
1001318a:	4640      	mov	r0, r8
1001318c:	f002 fd7e 	bl	10015c8c <__aeabi_i2f>
10013190:	492f      	ldr	r1, [pc, #188]	; (10013250 <inv_generate_accel_gyro_quaternion+0x348>)
10013192:	f002 f8dd 	bl	10015350 <__aeabi_fdiv>
10013196:	4649      	mov	r1, r9
10013198:	f002 faa4 	bl	100156e4 <__aeabi_fmul>
1001319c:	4681      	mov	r9, r0
1001319e:	2300      	movs	r3, #0
100131a0:	4649      	mov	r1, r9
100131a2:	1c30      	adds	r0, r6, #0
100131a4:	4698      	mov	r8, r3
100131a6:	9312      	str	r3, [sp, #72]	; 0x48
100131a8:	f002 fa9c 	bl	100156e4 <__aeabi_fmul>
100131ac:	2380      	movs	r3, #128	; 0x80
100131ae:	061b      	lsls	r3, r3, #24
100131b0:	18e1      	adds	r1, r4, r3
100131b2:	9013      	str	r0, [sp, #76]	; 0x4c
100131b4:	4648      	mov	r0, r9
100131b6:	f002 fa95 	bl	100156e4 <__aeabi_fmul>
100131ba:	4643      	mov	r3, r8
100131bc:	9014      	str	r0, [sp, #80]	; 0x50
100131be:	1c39      	adds	r1, r7, #0
100131c0:	a812      	add	r0, sp, #72	; 0x48
100131c2:	aa0a      	add	r2, sp, #40	; 0x28
100131c4:	9315      	str	r3, [sp, #84]	; 0x54
100131c6:	f7f6 ffa1 	bl	1000a10c <inv_q_multf>
100131ca:	a80a      	add	r0, sp, #40	; 0x28
100131cc:	1c02      	adds	r2, r0, #0
100131ce:	1c39      	adds	r1, r7, #0
100131d0:	f7f7 f81c 	bl	1000a20c <inv_q_addf>
100131d4:	a80a      	add	r0, sp, #40	; 0x28
100131d6:	f7f7 f8c3 	bl	1000a360 <inv_q_norm4>
100131da:	219d      	movs	r1, #157	; 0x9d
100131dc:	980a      	ldr	r0, [sp, #40]	; 0x28
100131de:	05c9      	lsls	r1, r1, #23
100131e0:	f002 fa80 	bl	100156e4 <__aeabi_fmul>
100131e4:	f002 fd30 	bl	10015c48 <__aeabi_f2iz>
100131e8:	219d      	movs	r1, #157	; 0x9d
100131ea:	6128      	str	r0, [r5, #16]
100131ec:	05c9      	lsls	r1, r1, #23
100131ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
100131f0:	f002 fa78 	bl	100156e4 <__aeabi_fmul>
100131f4:	f002 fd28 	bl	10015c48 <__aeabi_f2iz>
100131f8:	219d      	movs	r1, #157	; 0x9d
100131fa:	6168      	str	r0, [r5, #20]
100131fc:	05c9      	lsls	r1, r1, #23
100131fe:	980c      	ldr	r0, [sp, #48]	; 0x30
10013200:	f002 fa70 	bl	100156e4 <__aeabi_fmul>
10013204:	f002 fd20 	bl	10015c48 <__aeabi_f2iz>
10013208:	219d      	movs	r1, #157	; 0x9d
1001320a:	61a8      	str	r0, [r5, #24]
1001320c:	05c9      	lsls	r1, r1, #23
1001320e:	980d      	ldr	r0, [sp, #52]	; 0x34
10013210:	f002 fa68 	bl	100156e4 <__aeabi_fmul>
10013214:	f002 fd18 	bl	10015c48 <__aeabi_f2iz>
10013218:	61e8      	str	r0, [r5, #28]
1001321a:	1c28      	adds	r0, r5, #0
1001321c:	a902      	add	r1, sp, #8
1001321e:	f7f6 ff41 	bl	1000a0a4 <inv_q_invert>
10013222:	1c28      	adds	r0, r5, #0
10013224:	1c2a      	adds	r2, r5, #0
10013226:	3010      	adds	r0, #16
10013228:	3220      	adds	r2, #32
1001322a:	a902      	add	r1, sp, #8
1001322c:	f7f6 fdba 	bl	10009da4 <inv_q_mult>
10013230:	e705      	b.n	1001303e <inv_generate_accel_gyro_quaternion+0x136>
10013232:	46c0      	nop			; (mov r8, r8)
10013234:	1001c37c 	.word	0x1001c37c
10013238:	00c49ba6 	.word	0x00c49ba6
1001323c:	3951b717 	.word	0x3951b717
10013240:	3c23d70a 	.word	0x3c23d70a
10013244:	3e4ccccd 	.word	0x3e4ccccd
10013248:	3ecccccd 	.word	0x3ecccccd
1001324c:	3bc49ba6 	.word	0x3bc49ba6
10013250:	47cd1400 	.word	0x47cd1400
10013254:	065a      	lsls	r2, r3, #25
10013256:	d400      	bmi.n	1001325a <inv_generate_accel_gyro_quaternion+0x352>
10013258:	e673      	b.n	10012f42 <inv_generate_accel_gyro_quaternion+0x3a>
1001325a:	2288      	movs	r2, #136	; 0x88
1001325c:	0052      	lsls	r2, r2, #1
1001325e:	58a1      	ldr	r1, [r4, r2]
10013260:	682a      	ldr	r2, [r5, #0]
10013262:	1a89      	subs	r1, r1, r2
10013264:	2296      	movs	r2, #150	; 0x96
10013266:	0052      	lsls	r2, r2, #1
10013268:	58a0      	ldr	r0, [r4, r2]
1001326a:	4aef      	ldr	r2, [pc, #956]	; (10013628 <inv_generate_accel_gyro_quaternion+0x720>)
1001326c:	4342      	muls	r2, r0
1001326e:	4291      	cmp	r1, r2
10013270:	dc00      	bgt.n	10013274 <inv_generate_accel_gyro_quaternion+0x36c>
10013272:	e1f4      	b.n	1001365e <inv_generate_accel_gyro_quaternion+0x756>
10013274:	2203      	movs	r2, #3
10013276:	63aa      	str	r2, [r5, #56]	; 0x38
10013278:	059b      	lsls	r3, r3, #22
1001327a:	d500      	bpl.n	1001327e <inv_generate_accel_gyro_quaternion+0x376>
1001327c:	e1f2      	b.n	10013664 <inv_generate_accel_gyro_quaternion+0x75c>
1001327e:	ae12      	add	r6, sp, #72	; 0x48
10013280:	1c30      	adds	r0, r6, #0
10013282:	2100      	movs	r1, #0
10013284:	f7f6 fc1e 	bl	10009ac4 <inv_get_gyro_bias>
10013288:	1c29      	adds	r1, r5, #0
1001328a:	1c30      	adds	r0, r6, #0
1001328c:	313c      	adds	r1, #60	; 0x3c
1001328e:	220c      	movs	r2, #12
10013290:	f004 fd6e 	bl	10017d70 <memcmp>
10013294:	2800      	cmp	r0, #0
10013296:	d107      	bne.n	100132a8 <inv_generate_accel_gyro_quaternion+0x3a0>
10013298:	2394      	movs	r3, #148	; 0x94
1001329a:	005b      	lsls	r3, r3, #1
1001329c:	58e3      	ldr	r3, [r4, r3]
1001329e:	6daa      	ldr	r2, [r5, #88]	; 0x58
100132a0:	af1a      	add	r7, sp, #104	; 0x68
100132a2:	4293      	cmp	r3, r2
100132a4:	d100      	bne.n	100132a8 <inv_generate_accel_gyro_quaternion+0x3a0>
100132a6:	e096      	b.n	100133d6 <inv_generate_accel_gyro_quaternion+0x4ce>
100132a8:	af1a      	add	r7, sp, #104	; 0x68
100132aa:	1c32      	adds	r2, r6, #0
100132ac:	1c3b      	adds	r3, r7, #0
100132ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
100132b0:	8820      	ldrh	r0, [r4, #0]
100132b2:	f7f7 f99b 	bl	1000a5ec <inv_convert_to_body_with_scale>
100132b6:	981a      	ldr	r0, [sp, #104]	; 0x68
100132b8:	f002 fce8 	bl	10015c8c <__aeabi_i2f>
100132bc:	4682      	mov	sl, r0
100132be:	6878      	ldr	r0, [r7, #4]
100132c0:	f002 fce4 	bl	10015c8c <__aeabi_i2f>
100132c4:	4681      	mov	r9, r0
100132c6:	68b8      	ldr	r0, [r7, #8]
100132c8:	f002 fce0 	bl	10015c8c <__aeabi_i2f>
100132cc:	4651      	mov	r1, sl
100132ce:	4680      	mov	r8, r0
100132d0:	4650      	mov	r0, sl
100132d2:	f002 fa07 	bl	100156e4 <__aeabi_fmul>
100132d6:	4649      	mov	r1, r9
100132d8:	4682      	mov	sl, r0
100132da:	4648      	mov	r0, r9
100132dc:	f002 fa02 	bl	100156e4 <__aeabi_fmul>
100132e0:	1c01      	adds	r1, r0, #0
100132e2:	4650      	mov	r0, sl
100132e4:	f001 febe 	bl	10015064 <__aeabi_fadd>
100132e8:	4641      	mov	r1, r8
100132ea:	4681      	mov	r9, r0
100132ec:	4640      	mov	r0, r8
100132ee:	f002 f9f9 	bl	100156e4 <__aeabi_fmul>
100132f2:	1c01      	adds	r1, r0, #0
100132f4:	4648      	mov	r0, r9
100132f6:	f001 feb5 	bl	10015064 <__aeabi_fadd>
100132fa:	f7fd f947 	bl	1001058c <sqrtf>
100132fe:	2394      	movs	r3, #148	; 0x94
10013300:	005b      	lsls	r3, r3, #1
10013302:	58e3      	ldr	r3, [r4, r3]
10013304:	49c9      	ldr	r1, [pc, #804]	; (1001362c <inv_generate_accel_gyro_quaternion+0x724>)
10013306:	4699      	mov	r9, r3
10013308:	4680      	mov	r8, r0
1001330a:	f002 f9eb 	bl	100156e4 <__aeabi_fmul>
1001330e:	49c8      	ldr	r1, [pc, #800]	; (10013630 <inv_generate_accel_gyro_quaternion+0x728>)
10013310:	f002 f81e 	bl	10015350 <__aeabi_fdiv>
10013314:	21de      	movs	r1, #222	; 0xde
10013316:	0589      	lsls	r1, r1, #22
10013318:	f002 f9e4 	bl	100156e4 <__aeabi_fmul>
1001331c:	4682      	mov	sl, r0
1001331e:	4648      	mov	r0, r9
10013320:	f002 fcb4 	bl	10015c8c <__aeabi_i2f>
10013324:	1c01      	adds	r1, r0, #0
10013326:	4650      	mov	r0, sl
10013328:	f002 f9dc 	bl	100156e4 <__aeabi_fmul>
1001332c:	49c1      	ldr	r1, [pc, #772]	; (10013634 <inv_generate_accel_gyro_quaternion+0x72c>)
1001332e:	f002 f80f 	bl	10015350 <__aeabi_fdiv>
10013332:	21fc      	movs	r1, #252	; 0xfc
10013334:	0589      	lsls	r1, r1, #22
10013336:	f002 f9d5 	bl	100156e4 <__aeabi_fmul>
1001333a:	4682      	mov	sl, r0
1001333c:	f000 fa48 	bl	100137d0 <cosf>
10013340:	4683      	mov	fp, r0
10013342:	4650      	mov	r0, sl
10013344:	f000 fa82 	bl	1001384c <sinf>
10013348:	2180      	movs	r1, #128	; 0x80
1001334a:	4682      	mov	sl, r0
1001334c:	05c9      	lsls	r1, r1, #23
1001334e:	4640      	mov	r0, r8
10013350:	f001 fd56 	bl	10014e00 <__aeabi_fcmplt>
10013354:	2800      	cmp	r0, #0
10013356:	d000      	beq.n	1001335a <inv_generate_accel_gyro_quaternion+0x452>
10013358:	e18b      	b.n	10013672 <inv_generate_accel_gyro_quaternion+0x76a>
1001335a:	219d      	movs	r1, #157	; 0x9d
1001335c:	4658      	mov	r0, fp
1001335e:	05c9      	lsls	r1, r1, #23
10013360:	f002 f9c0 	bl	100156e4 <__aeabi_fmul>
10013364:	f002 fc70 	bl	10015c48 <__aeabi_f2iz>
10013368:	2380      	movs	r3, #128	; 0x80
1001336a:	219d      	movs	r1, #157	; 0x9d
1001336c:	061b      	lsls	r3, r3, #24
1001336e:	4453      	add	r3, sl
10013370:	05c9      	lsls	r1, r1, #23
10013372:	64a8      	str	r0, [r5, #72]	; 0x48
10013374:	1c18      	adds	r0, r3, #0
10013376:	f002 f9b5 	bl	100156e4 <__aeabi_fmul>
1001337a:	4682      	mov	sl, r0
1001337c:	981a      	ldr	r0, [sp, #104]	; 0x68
1001337e:	f002 fc85 	bl	10015c8c <__aeabi_i2f>
10013382:	1c01      	adds	r1, r0, #0
10013384:	4650      	mov	r0, sl
10013386:	f002 f9ad 	bl	100156e4 <__aeabi_fmul>
1001338a:	4641      	mov	r1, r8
1001338c:	f001 ffe0 	bl	10015350 <__aeabi_fdiv>
10013390:	f002 fc5a 	bl	10015c48 <__aeabi_f2iz>
10013394:	64e8      	str	r0, [r5, #76]	; 0x4c
10013396:	6878      	ldr	r0, [r7, #4]
10013398:	f002 fc78 	bl	10015c8c <__aeabi_i2f>
1001339c:	1c01      	adds	r1, r0, #0
1001339e:	4650      	mov	r0, sl
100133a0:	f002 f9a0 	bl	100156e4 <__aeabi_fmul>
100133a4:	4641      	mov	r1, r8
100133a6:	f001 ffd3 	bl	10015350 <__aeabi_fdiv>
100133aa:	f002 fc4d 	bl	10015c48 <__aeabi_f2iz>
100133ae:	6528      	str	r0, [r5, #80]	; 0x50
100133b0:	68b8      	ldr	r0, [r7, #8]
100133b2:	f002 fc6b 	bl	10015c8c <__aeabi_i2f>
100133b6:	1c01      	adds	r1, r0, #0
100133b8:	4650      	mov	r0, sl
100133ba:	f002 f993 	bl	100156e4 <__aeabi_fmul>
100133be:	4641      	mov	r1, r8
100133c0:	f001 ffc6 	bl	10015350 <__aeabi_fdiv>
100133c4:	f002 fc40 	bl	10015c48 <__aeabi_f2iz>
100133c8:	6568      	str	r0, [r5, #84]	; 0x54
100133ca:	1c2b      	adds	r3, r5, #0
100133cc:	333c      	adds	r3, #60	; 0x3c
100133ce:	ce07      	ldmia	r6!, {r0, r1, r2}
100133d0:	c307      	stmia	r3!, {r0, r1, r2}
100133d2:	464b      	mov	r3, r9
100133d4:	65ab      	str	r3, [r5, #88]	; 0x58
100133d6:	1c26      	adds	r6, r4, #0
100133d8:	1c29      	adds	r1, r5, #0
100133da:	3611      	adds	r6, #17
100133dc:	36ff      	adds	r6, #255	; 0xff
100133de:	1c30      	adds	r0, r6, #0
100133e0:	1c3a      	adds	r2, r7, #0
100133e2:	3148      	adds	r1, #72	; 0x48
100133e4:	f7f6 fcde 	bl	10009da4 <inv_q_mult>
100133e8:	235c      	movs	r3, #92	; 0x5c
100133ea:	4698      	mov	r8, r3
100133ec:	44a8      	add	r8, r5
100133ee:	aa16      	add	r2, sp, #88	; 0x58
100133f0:	4640      	mov	r0, r8
100133f2:	1c39      	adds	r1, r7, #0
100133f4:	f7f6 fcd6 	bl	10009da4 <inv_q_mult>
100133f8:	1c30      	adds	r0, r6, #0
100133fa:	4641      	mov	r1, r8
100133fc:	f7f6 fe52 	bl	1000a0a4 <inv_q_invert>
10013400:	1c28      	adds	r0, r5, #0
10013402:	a916      	add	r1, sp, #88	; 0x58
10013404:	1c3a      	adds	r2, r7, #0
10013406:	f7f6 fccd 	bl	10009da4 <inv_q_mult>
1001340a:	1c38      	adds	r0, r7, #0
1001340c:	1c29      	adds	r1, r5, #0
1001340e:	f7ff fc31 	bl	10012c74 <inv_normalize_quat>
10013412:	e596      	b.n	10012f42 <inv_generate_accel_gyro_quaternion+0x3a>
10013414:	1c20      	adds	r0, r4, #0
10013416:	f7ff fcbd 	bl	10012d94 <inv_generate_gyro_quaternion.part.1>
1001341a:	e592      	b.n	10012f42 <inv_generate_accel_gyro_quaternion+0x3a>
1001341c:	4b86      	ldr	r3, [pc, #536]	; (10013638 <inv_generate_accel_gyro_quaternion+0x730>)
1001341e:	4298      	cmp	r0, r3
10013420:	d800      	bhi.n	10013424 <inv_generate_accel_gyro_quaternion+0x51c>
10013422:	e5d3      	b.n	10012fcc <inv_generate_accel_gyro_quaternion+0xc4>
10013424:	a80e      	add	r0, sp, #56	; 0x38
10013426:	f7f7 fa67 	bl	1000a8f8 <inv_get_linear_accel>
1001342a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1001342c:	9f10      	ldr	r7, [sp, #64]	; 0x40
1001342e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10013430:	4690      	mov	r8, r2
10013432:	980e      	ldr	r0, [sp, #56]	; 0x38
10013434:	17d2      	asrs	r2, r2, #31
10013436:	17db      	asrs	r3, r3, #31
10013438:	4692      	mov	sl, r2
1001343a:	17fa      	asrs	r2, r7, #31
1001343c:	4691      	mov	r9, r2
1001343e:	1c19      	adds	r1, r3, #0
10013440:	1c02      	adds	r2, r0, #0
10013442:	f001 fd29 	bl	10014e98 <__aeabi_lmul>
10013446:	4642      	mov	r2, r8
10013448:	9000      	str	r0, [sp, #0]
1001344a:	9101      	str	r1, [sp, #4]
1001344c:	4653      	mov	r3, sl
1001344e:	4640      	mov	r0, r8
10013450:	4651      	mov	r1, sl
10013452:	f001 fd21 	bl	10014e98 <__aeabi_lmul>
10013456:	9a00      	ldr	r2, [sp, #0]
10013458:	9b01      	ldr	r3, [sp, #4]
1001345a:	1812      	adds	r2, r2, r0
1001345c:	414b      	adcs	r3, r1
1001345e:	1c38      	adds	r0, r7, #0
10013460:	9200      	str	r2, [sp, #0]
10013462:	9301      	str	r3, [sp, #4]
10013464:	4649      	mov	r1, r9
10013466:	1c3a      	adds	r2, r7, #0
10013468:	464b      	mov	r3, r9
1001346a:	f001 fd15 	bl	10014e98 <__aeabi_lmul>
1001346e:	9a00      	ldr	r2, [sp, #0]
10013470:	9b01      	ldr	r3, [sp, #4]
10013472:	1880      	adds	r0, r0, r2
10013474:	4159      	adcs	r1, r3
10013476:	2902      	cmp	r1, #2
10013478:	dc05      	bgt.n	10013486 <inv_generate_accel_gyro_quaternion+0x57e>
1001347a:	d000      	beq.n	1001347e <inv_generate_accel_gyro_quaternion+0x576>
1001347c:	e5a6      	b.n	10012fcc <inv_generate_accel_gyro_quaternion+0xc4>
1001347e:	4b6e      	ldr	r3, [pc, #440]	; (10013638 <inv_generate_accel_gyro_quaternion+0x730>)
10013480:	4298      	cmp	r0, r3
10013482:	d800      	bhi.n	10013486 <inv_generate_accel_gyro_quaternion+0x57e>
10013484:	e5a2      	b.n	10012fcc <inv_generate_accel_gyro_quaternion+0xc4>
10013486:	2304      	movs	r3, #4
10013488:	63ab      	str	r3, [r5, #56]	; 0x38
1001348a:	2400      	movs	r4, #0
1001348c:	e5ad      	b.n	10012fea <inv_generate_accel_gyro_quaternion+0xe2>
1001348e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
10013490:	496a      	ldr	r1, [pc, #424]	; (1001363c <inv_generate_accel_gyro_quaternion+0x734>)
10013492:	f001 fb79 	bl	10014b88 <__aeabi_idiv>
10013496:	2800      	cmp	r0, #0
10013498:	dc00      	bgt.n	1001349c <inv_generate_accel_gyro_quaternion+0x594>
1001349a:	e103      	b.n	100136a4 <inv_generate_accel_gyro_quaternion+0x79c>
1001349c:	2f03      	cmp	r7, #3
1001349e:	d000      	beq.n	100134a2 <inv_generate_accel_gyro_quaternion+0x59a>
100134a0:	e5a0      	b.n	10012fe4 <inv_generate_accel_gyro_quaternion+0xdc>
100134a2:	4c67      	ldr	r4, [pc, #412]	; (10013640 <inv_generate_accel_gyro_quaternion+0x738>)
100134a4:	4344      	muls	r4, r0
100134a6:	e5a0      	b.n	10012fea <inv_generate_accel_gyro_quaternion+0xe2>
100134a8:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
100134aa:	f002 fbef 	bl	10015c8c <__aeabi_i2f>
100134ae:	1c07      	adds	r7, r0, #0
100134b0:	6e20      	ldr	r0, [r4, #96]	; 0x60
100134b2:	f002 fbeb 	bl	10015c8c <__aeabi_i2f>
100134b6:	1c06      	adds	r6, r0, #0
100134b8:	6e60      	ldr	r0, [r4, #100]	; 0x64
100134ba:	f002 fbe7 	bl	10015c8c <__aeabi_i2f>
100134be:	1c39      	adds	r1, r7, #0
100134c0:	1c05      	adds	r5, r0, #0
100134c2:	1c38      	adds	r0, r7, #0
100134c4:	f002 f90e 	bl	100156e4 <__aeabi_fmul>
100134c8:	1c31      	adds	r1, r6, #0
100134ca:	1c07      	adds	r7, r0, #0
100134cc:	1c30      	adds	r0, r6, #0
100134ce:	f002 f909 	bl	100156e4 <__aeabi_fmul>
100134d2:	1c01      	adds	r1, r0, #0
100134d4:	1c38      	adds	r0, r7, #0
100134d6:	f001 fdc5 	bl	10015064 <__aeabi_fadd>
100134da:	1c29      	adds	r1, r5, #0
100134dc:	1c06      	adds	r6, r0, #0
100134de:	1c28      	adds	r0, r5, #0
100134e0:	f002 f900 	bl	100156e4 <__aeabi_fmul>
100134e4:	1c01      	adds	r1, r0, #0
100134e6:	1c30      	adds	r0, r6, #0
100134e8:	f001 fdbc 	bl	10015064 <__aeabi_fadd>
100134ec:	f7fd f84e 	bl	1001058c <sqrtf>
100134f0:	21fe      	movs	r1, #254	; 0xfe
100134f2:	0589      	lsls	r1, r1, #22
100134f4:	1c05      	adds	r5, r0, #0
100134f6:	f001 fc8d 	bl	10014e14 <__aeabi_fcmple>
100134fa:	2800      	cmp	r0, #0
100134fc:	d000      	beq.n	10013500 <inv_generate_accel_gyro_quaternion+0x5f8>
100134fe:	e0d3      	b.n	100136a8 <inv_generate_accel_gyro_quaternion+0x7a0>
10013500:	6e60      	ldr	r0, [r4, #100]	; 0x64
10013502:	f002 fbc3 	bl	10015c8c <__aeabi_i2f>
10013506:	1c29      	adds	r1, r5, #0
10013508:	f001 ff22 	bl	10015350 <__aeabi_fdiv>
1001350c:	1c05      	adds	r5, r0, #0
1001350e:	20fe      	movs	r0, #254	; 0xfe
10013510:	1c29      	adds	r1, r5, #0
10013512:	0580      	lsls	r0, r0, #22
10013514:	f002 f9fa 	bl	1001590c <__aeabi_fsub>
10013518:	2100      	movs	r1, #0
1001351a:	1c06      	adds	r6, r0, #0
1001351c:	f001 fc84 	bl	10014e28 <__aeabi_fcmpgt>
10013520:	2800      	cmp	r0, #0
10013522:	d100      	bne.n	10013526 <inv_generate_accel_gyro_quaternion+0x61e>
10013524:	e0de      	b.n	100136e4 <inv_generate_accel_gyro_quaternion+0x7dc>
10013526:	21fc      	movs	r1, #252	; 0xfc
10013528:	1c30      	adds	r0, r6, #0
1001352a:	0589      	lsls	r1, r1, #22
1001352c:	f002 f8da 	bl	100156e4 <__aeabi_fmul>
10013530:	f7fd f82c 	bl	1001058c <sqrtf>
10013534:	21fe      	movs	r1, #254	; 0xfe
10013536:	1c06      	adds	r6, r0, #0
10013538:	0589      	lsls	r1, r1, #22
1001353a:	1c28      	adds	r0, r5, #0
1001353c:	f001 fd92 	bl	10015064 <__aeabi_fadd>
10013540:	2100      	movs	r1, #0
10013542:	1c05      	adds	r5, r0, #0
10013544:	f001 fc70 	bl	10014e28 <__aeabi_fcmpgt>
10013548:	2800      	cmp	r0, #0
1001354a:	d100      	bne.n	1001354e <inv_generate_accel_gyro_quaternion+0x646>
1001354c:	e0cc      	b.n	100136e8 <inv_generate_accel_gyro_quaternion+0x7e0>
1001354e:	21fc      	movs	r1, #252	; 0xfc
10013550:	1c28      	adds	r0, r5, #0
10013552:	0589      	lsls	r1, r1, #22
10013554:	f002 f8c6 	bl	100156e4 <__aeabi_fmul>
10013558:	f7fd f818 	bl	1001058c <sqrtf>
1001355c:	4681      	mov	r9, r0
1001355e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
10013560:	f002 fb94 	bl	10015c8c <__aeabi_i2f>
10013564:	1c07      	adds	r7, r0, #0
10013566:	6e20      	ldr	r0, [r4, #96]	; 0x60
10013568:	f002 fb90 	bl	10015c8c <__aeabi_i2f>
1001356c:	1c39      	adds	r1, r7, #0
1001356e:	1c05      	adds	r5, r0, #0
10013570:	1c38      	adds	r0, r7, #0
10013572:	f002 f8b7 	bl	100156e4 <__aeabi_fmul>
10013576:	1c29      	adds	r1, r5, #0
10013578:	1c07      	adds	r7, r0, #0
1001357a:	1c28      	adds	r0, r5, #0
1001357c:	f002 f8b2 	bl	100156e4 <__aeabi_fmul>
10013580:	1c01      	adds	r1, r0, #0
10013582:	1c38      	adds	r0, r7, #0
10013584:	f001 fd6e 	bl	10015064 <__aeabi_fadd>
10013588:	f7fd f800 	bl	1001058c <sqrtf>
1001358c:	21fe      	movs	r1, #254	; 0xfe
1001358e:	0589      	lsls	r1, r1, #22
10013590:	1c07      	adds	r7, r0, #0
10013592:	f001 fc3f 	bl	10014e14 <__aeabi_fcmple>
10013596:	4680      	mov	r8, r0
10013598:	2800      	cmp	r0, #0
1001359a:	d000      	beq.n	1001359e <inv_generate_accel_gyro_quaternion+0x696>
1001359c:	e084      	b.n	100136a8 <inv_generate_accel_gyro_quaternion+0x7a0>
1001359e:	219d      	movs	r1, #157	; 0x9d
100135a0:	4648      	mov	r0, r9
100135a2:	05c9      	lsls	r1, r1, #23
100135a4:	f002 f89e 	bl	100156e4 <__aeabi_fmul>
100135a8:	f002 fb4e 	bl	10015c48 <__aeabi_f2iz>
100135ac:	4d25      	ldr	r5, [pc, #148]	; (10013644 <inv_generate_accel_gyro_quaternion+0x73c>)
100135ae:	6128      	str	r0, [r5, #16]
100135b0:	6e20      	ldr	r0, [r4, #96]	; 0x60
100135b2:	f002 fb6b 	bl	10015c8c <__aeabi_i2f>
100135b6:	1c39      	adds	r1, r7, #0
100135b8:	f001 feca 	bl	10015350 <__aeabi_fdiv>
100135bc:	1c01      	adds	r1, r0, #0
100135be:	1c30      	adds	r0, r6, #0
100135c0:	f002 f890 	bl	100156e4 <__aeabi_fmul>
100135c4:	219d      	movs	r1, #157	; 0x9d
100135c6:	05c9      	lsls	r1, r1, #23
100135c8:	f002 f88c 	bl	100156e4 <__aeabi_fmul>
100135cc:	f002 fb3c 	bl	10015c48 <__aeabi_f2iz>
100135d0:	2380      	movs	r3, #128	; 0x80
100135d2:	061b      	lsls	r3, r3, #24
100135d4:	469c      	mov	ip, r3
100135d6:	6168      	str	r0, [r5, #20]
100135d8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
100135da:	4466      	add	r6, ip
100135dc:	f002 fb56 	bl	10015c8c <__aeabi_i2f>
100135e0:	1c39      	adds	r1, r7, #0
100135e2:	f001 feb5 	bl	10015350 <__aeabi_fdiv>
100135e6:	1c01      	adds	r1, r0, #0
100135e8:	1c30      	adds	r0, r6, #0
100135ea:	f002 f87b 	bl	100156e4 <__aeabi_fmul>
100135ee:	219d      	movs	r1, #157	; 0x9d
100135f0:	05c9      	lsls	r1, r1, #23
100135f2:	f002 f877 	bl	100156e4 <__aeabi_fmul>
100135f6:	f002 fb27 	bl	10015c48 <__aeabi_f2iz>
100135fa:	4643      	mov	r3, r8
100135fc:	61a8      	str	r0, [r5, #24]
100135fe:	61eb      	str	r3, [r5, #28]
10013600:	2390      	movs	r3, #144	; 0x90
10013602:	005b      	lsls	r3, r3, #1
10013604:	58e3      	ldr	r3, [r4, r3]
10013606:	05db      	lsls	r3, r3, #23
10013608:	d461      	bmi.n	100136ce <inv_generate_accel_gyro_quaternion+0x7c6>
1001360a:	1c28      	adds	r0, r5, #0
1001360c:	a902      	add	r1, sp, #8
1001360e:	f7f6 fd49 	bl	1000a0a4 <inv_q_invert>
10013612:	1c28      	adds	r0, r5, #0
10013614:	1c2a      	adds	r2, r5, #0
10013616:	3010      	adds	r0, #16
10013618:	3220      	adds	r2, #32
1001361a:	a902      	add	r1, sp, #8
1001361c:	f7f6 fbc2 	bl	10009da4 <inv_q_mult>
10013620:	2390      	movs	r3, #144	; 0x90
10013622:	005b      	lsls	r3, r3, #1
10013624:	58e3      	ldr	r3, [r4, r3]
10013626:	e485      	b.n	10012f34 <inv_generate_accel_gyro_quaternion+0x2c>
10013628:	001c9871 	.word	0x001c9871
1001362c:	40490fdb 	.word	0x40490fdb
10013630:	43340000 	.word	0x43340000
10013634:	49742400 	.word	0x49742400
10013638:	3fffffff 	.word	0x3fffffff
1001363c:	00001388 	.word	0x00001388
10013640:	00c49ba6 	.word	0x00c49ba6
10013644:	1001c37c 	.word	0x1001c37c
10013648:	1c29      	adds	r1, r5, #0
1001364a:	3011      	adds	r0, #17
1001364c:	315c      	adds	r1, #92	; 0x5c
1001364e:	30ff      	adds	r0, #255	; 0xff
10013650:	f7f6 fd28 	bl	1000a0a4 <inv_q_invert>
10013654:	6f63      	ldr	r3, [r4, #116]	; 0x74
10013656:	05db      	lsls	r3, r3, #23
10013658:	d413      	bmi.n	10013682 <inv_generate_accel_gyro_quaternion+0x77a>
1001365a:	59a3      	ldr	r3, [r4, r6]
1001365c:	e46a      	b.n	10012f34 <inv_generate_accel_gyro_quaternion+0x2c>
1001365e:	2202      	movs	r2, #2
10013660:	63aa      	str	r2, [r5, #56]	; 0x38
10013662:	e609      	b.n	10013278 <inv_generate_accel_gyro_quaternion+0x370>
10013664:	1c20      	adds	r0, r4, #0
10013666:	3011      	adds	r0, #17
10013668:	30ff      	adds	r0, #255	; 0xff
1001366a:	1c29      	adds	r1, r5, #0
1001366c:	f7ff fb02 	bl	10012c74 <inv_normalize_quat>
10013670:	e467      	b.n	10012f42 <inv_generate_accel_gyro_quaternion+0x3a>
10013672:	2380      	movs	r3, #128	; 0x80
10013674:	05db      	lsls	r3, r3, #23
10013676:	64ab      	str	r3, [r5, #72]	; 0x48
10013678:	2300      	movs	r3, #0
1001367a:	64eb      	str	r3, [r5, #76]	; 0x4c
1001367c:	652b      	str	r3, [r5, #80]	; 0x50
1001367e:	656b      	str	r3, [r5, #84]	; 0x54
10013680:	e6a3      	b.n	100133ca <inv_generate_accel_gyro_quaternion+0x4c2>
10013682:	1c28      	adds	r0, r5, #0
10013684:	a902      	add	r1, sp, #8
10013686:	f7f6 fd0d 	bl	1000a0a4 <inv_q_invert>
1001368a:	1c28      	adds	r0, r5, #0
1001368c:	1c2a      	adds	r2, r5, #0
1001368e:	3010      	adds	r0, #16
10013690:	3220      	adds	r2, #32
10013692:	a902      	add	r1, sp, #8
10013694:	f7f6 fb86 	bl	10009da4 <inv_q_mult>
10013698:	59a3      	ldr	r3, [r4, r6]
1001369a:	e44b      	b.n	10012f34 <inv_generate_accel_gyro_quaternion+0x2c>
1001369c:	23fa      	movs	r3, #250	; 0xfa
1001369e:	059b      	lsls	r3, r3, #22
100136a0:	4699      	mov	r9, r3
100136a2:	e572      	b.n	1001318a <inv_generate_accel_gyro_quaternion+0x282>
100136a4:	2001      	movs	r0, #1
100136a6:	e6f9      	b.n	1001349c <inv_generate_accel_gyro_quaternion+0x594>
100136a8:	2380      	movs	r3, #128	; 0x80
100136aa:	4d11      	ldr	r5, [pc, #68]	; (100136f0 <inv_generate_accel_gyro_quaternion+0x7e8>)
100136ac:	05db      	lsls	r3, r3, #23
100136ae:	612b      	str	r3, [r5, #16]
100136b0:	2300      	movs	r3, #0
100136b2:	616b      	str	r3, [r5, #20]
100136b4:	61ab      	str	r3, [r5, #24]
100136b6:	61eb      	str	r3, [r5, #28]
100136b8:	e7a2      	b.n	10013600 <inv_generate_accel_gyro_quaternion+0x6f8>
100136ba:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
100136bc:	490d      	ldr	r1, [pc, #52]	; (100136f4 <inv_generate_accel_gyro_quaternion+0x7ec>)
100136be:	f001 fa63 	bl	10014b88 <__aeabi_idiv>
100136c2:	2800      	cmp	r0, #0
100136c4:	dd12      	ble.n	100136ec <inv_generate_accel_gyro_quaternion+0x7e4>
100136c6:	4c0c      	ldr	r4, [pc, #48]	; (100136f8 <inv_generate_accel_gyro_quaternion+0x7f0>)
100136c8:	00c0      	lsls	r0, r0, #3
100136ca:	4344      	muls	r4, r0
100136cc:	e48d      	b.n	10012fea <inv_generate_accel_gyro_quaternion+0xe2>
100136ce:	1c20      	adds	r0, r4, #0
100136d0:	1c29      	adds	r1, r5, #0
100136d2:	3011      	adds	r0, #17
100136d4:	315c      	adds	r1, #92	; 0x5c
100136d6:	30ff      	adds	r0, #255	; 0xff
100136d8:	f7f6 fce4 	bl	1000a0a4 <inv_q_invert>
100136dc:	e795      	b.n	1001360a <inv_generate_accel_gyro_quaternion+0x702>
100136de:	4b07      	ldr	r3, [pc, #28]	; (100136fc <inv_generate_accel_gyro_quaternion+0x7f4>)
100136e0:	4699      	mov	r9, r3
100136e2:	e552      	b.n	1001318a <inv_generate_accel_gyro_quaternion+0x282>
100136e4:	2000      	movs	r0, #0
100136e6:	e723      	b.n	10013530 <inv_generate_accel_gyro_quaternion+0x628>
100136e8:	2000      	movs	r0, #0
100136ea:	e735      	b.n	10013558 <inv_generate_accel_gyro_quaternion+0x650>
100136ec:	4c04      	ldr	r4, [pc, #16]	; (10013700 <inv_generate_accel_gyro_quaternion+0x7f8>)
100136ee:	e47c      	b.n	10012fea <inv_generate_accel_gyro_quaternion+0xe2>
100136f0:	1001c37c 	.word	0x1001c37c
100136f4:	00001388 	.word	0x00001388
100136f8:	00c49ba6 	.word	0x00c49ba6
100136fc:	3d75c28f 	.word	0x3d75c28f
10013700:	0624dd30 	.word	0x0624dd30

10013704 <inv_generate_quaternion>:
10013704:	2280      	movs	r2, #128	; 0x80
10013706:	b538      	push	{r3, r4, r5, lr}
10013708:	6b03      	ldr	r3, [r0, #48]	; 0x30
1001370a:	0052      	lsls	r2, r2, #1
1001370c:	4213      	tst	r3, r2
1001370e:	d102      	bne.n	10013716 <inv_generate_quaternion+0x12>
10013710:	6f43      	ldr	r3, [r0, #116]	; 0x74
10013712:	4213      	tst	r3, r2
10013714:	d012      	beq.n	1001373c <inv_generate_quaternion+0x38>
10013716:	2390      	movs	r3, #144	; 0x90
10013718:	22c0      	movs	r2, #192	; 0xc0
1001371a:	005b      	lsls	r3, r3, #1
1001371c:	58c3      	ldr	r3, [r0, r3]
1001371e:	0092      	lsls	r2, r2, #2
10013720:	1c04      	adds	r4, r0, #0
10013722:	4013      	ands	r3, r2
10013724:	4293      	cmp	r3, r2
10013726:	d014      	beq.n	10013752 <inv_generate_quaternion+0x4e>
10013728:	f7ff fbee 	bl	10012f08 <inv_generate_accel_gyro_quaternion>
1001372c:	4d0e      	ldr	r5, [pc, #56]	; (10013768 <inv_generate_quaternion+0x64>)
1001372e:	1c28      	adds	r0, r5, #0
10013730:	6ba1      	ldr	r1, [r4, #56]	; 0x38
10013732:	3010      	adds	r0, #16
10013734:	f7f6 ffe0 	bl	1000a6f8 <inv_store_gaming_quaternion>
10013738:	2000      	movs	r0, #0
1001373a:	bd38      	pop	{r3, r4, r5, pc}
1001373c:	2390      	movs	r3, #144	; 0x90
1001373e:	005b      	lsls	r3, r3, #1
10013740:	58c3      	ldr	r3, [r0, r3]
10013742:	4213      	tst	r3, r2
10013744:	d0f8      	beq.n	10013738 <inv_generate_quaternion+0x34>
10013746:	22c0      	movs	r2, #192	; 0xc0
10013748:	0092      	lsls	r2, r2, #2
1001374a:	1c04      	adds	r4, r0, #0
1001374c:	4013      	ands	r3, r2
1001374e:	4293      	cmp	r3, r2
10013750:	d1ea      	bne.n	10013728 <inv_generate_quaternion+0x24>
10013752:	4d05      	ldr	r5, [pc, #20]	; (10013768 <inv_generate_quaternion+0x64>)
10013754:	1c21      	adds	r1, r4, #0
10013756:	1c28      	adds	r0, r5, #0
10013758:	3111      	adds	r1, #17
1001375a:	31ff      	adds	r1, #255	; 0xff
1001375c:	2210      	movs	r2, #16
1001375e:	3010      	adds	r0, #16
10013760:	f004 fb15 	bl	10017d8e <memcpy>
10013764:	e7e3      	b.n	1001372e <inv_generate_quaternion+0x2a>
10013766:	46c0      	nop			; (mov r8, r8)
10013768:	1001c37c 	.word	0x1001c37c

1001376c <inv_stop_quaternion>:
1001376c:	b508      	push	{r3, lr}
1001376e:	4802      	ldr	r0, [pc, #8]	; (10013778 <inv_stop_quaternion+0xc>)
10013770:	f7f6 fa3c 	bl	10009bec <inv_unregister_data_cb>
10013774:	bd08      	pop	{r3, pc}
10013776:	46c0      	nop			; (mov r8, r8)
10013778:	10013705 	.word	0x10013705

1001377c <inv_init_quaternion>:
1001377c:	b510      	push	{r4, lr}
1001377e:	4c07      	ldr	r4, [pc, #28]	; (1001379c <inv_init_quaternion+0x20>)
10013780:	2100      	movs	r1, #0
10013782:	1c20      	adds	r0, r4, #0
10013784:	226c      	movs	r2, #108	; 0x6c
10013786:	f004 fb20 	bl	10017dca <memset>
1001378a:	2380      	movs	r3, #128	; 0x80
1001378c:	05db      	lsls	r3, r3, #23
1001378e:	2000      	movs	r0, #0
10013790:	6123      	str	r3, [r4, #16]
10013792:	6023      	str	r3, [r4, #0]
10013794:	6223      	str	r3, [r4, #32]
10013796:	63e3      	str	r3, [r4, #60]	; 0x3c
10013798:	65e3      	str	r3, [r4, #92]	; 0x5c
1001379a:	bd10      	pop	{r4, pc}
1001379c:	1001c37c 	.word	0x1001c37c

100137a0 <inv_enable_quaternion>:
100137a0:	b508      	push	{r3, lr}
100137a2:	f7ff ffeb 	bl	1001377c <inv_init_quaternion>
100137a6:	2800      	cmp	r0, #0
100137a8:	d102      	bne.n	100137b0 <inv_enable_quaternion+0x10>
100137aa:	4802      	ldr	r0, [pc, #8]	; (100137b4 <inv_enable_quaternion+0x14>)
100137ac:	f7f7 f8ec 	bl	1000a988 <inv_register_mpl_start_notification>
100137b0:	bd08      	pop	{r3, pc}
100137b2:	46c0      	nop			; (mov r8, r8)
100137b4:	10012d65 	.word	0x10012d65

100137b8 <inv_disable_quaternion>:
100137b8:	b508      	push	{r3, lr}
100137ba:	4803      	ldr	r0, [pc, #12]	; (100137c8 <inv_disable_quaternion+0x10>)
100137bc:	f7f6 fa16 	bl	10009bec <inv_unregister_data_cb>
100137c0:	4802      	ldr	r0, [pc, #8]	; (100137cc <inv_disable_quaternion+0x14>)
100137c2:	f7f7 f8b1 	bl	1000a928 <inv_unregister_mpl_start_notification>
100137c6:	bd08      	pop	{r3, pc}
100137c8:	10013705 	.word	0x10013705
100137cc:	10012d65 	.word	0x10012d65

100137d0 <cosf>:
100137d0:	b500      	push	{lr}
100137d2:	4a1c      	ldr	r2, [pc, #112]	; (10013844 <cosf+0x74>)
100137d4:	0043      	lsls	r3, r0, #1
100137d6:	b083      	sub	sp, #12
100137d8:	085b      	lsrs	r3, r3, #1
100137da:	4293      	cmp	r3, r2
100137dc:	dd18      	ble.n	10013810 <cosf+0x40>
100137de:	4a1a      	ldr	r2, [pc, #104]	; (10013848 <cosf+0x78>)
100137e0:	4293      	cmp	r3, r2
100137e2:	dd04      	ble.n	100137ee <cosf+0x1e>
100137e4:	1c01      	adds	r1, r0, #0
100137e6:	f002 f891 	bl	1001590c <__aeabi_fsub>
100137ea:	b003      	add	sp, #12
100137ec:	bd00      	pop	{pc}
100137ee:	4669      	mov	r1, sp
100137f0:	f000 fa22 	bl	10013c38 <__ieee754_rem_pio2f>
100137f4:	2303      	movs	r3, #3
100137f6:	9901      	ldr	r1, [sp, #4]
100137f8:	4018      	ands	r0, r3
100137fa:	2801      	cmp	r0, #1
100137fc:	d014      	beq.n	10013828 <cosf+0x58>
100137fe:	2802      	cmp	r0, #2
10013800:	d00a      	beq.n	10013818 <cosf+0x48>
10013802:	2800      	cmp	r0, #0
10013804:	d019      	beq.n	1001383a <cosf+0x6a>
10013806:	9800      	ldr	r0, [sp, #0]
10013808:	2201      	movs	r2, #1
1001380a:	f000 fff9 	bl	10014800 <__kernel_sinf>
1001380e:	e7ec      	b.n	100137ea <cosf+0x1a>
10013810:	2100      	movs	r1, #0
10013812:	f000 fb99 	bl	10013f48 <__kernel_cosf>
10013816:	e7e8      	b.n	100137ea <cosf+0x1a>
10013818:	9800      	ldr	r0, [sp, #0]
1001381a:	f000 fb95 	bl	10013f48 <__kernel_cosf>
1001381e:	2380      	movs	r3, #128	; 0x80
10013820:	061b      	lsls	r3, r3, #24
10013822:	469c      	mov	ip, r3
10013824:	4460      	add	r0, ip
10013826:	e7e0      	b.n	100137ea <cosf+0x1a>
10013828:	2201      	movs	r2, #1
1001382a:	9800      	ldr	r0, [sp, #0]
1001382c:	f000 ffe8 	bl	10014800 <__kernel_sinf>
10013830:	2380      	movs	r3, #128	; 0x80
10013832:	061b      	lsls	r3, r3, #24
10013834:	469c      	mov	ip, r3
10013836:	4460      	add	r0, ip
10013838:	e7d7      	b.n	100137ea <cosf+0x1a>
1001383a:	9800      	ldr	r0, [sp, #0]
1001383c:	f000 fb84 	bl	10013f48 <__kernel_cosf>
10013840:	e7d3      	b.n	100137ea <cosf+0x1a>
10013842:	46c0      	nop			; (mov r8, r8)
10013844:	3f490fd8 	.word	0x3f490fd8
10013848:	7f7fffff 	.word	0x7f7fffff

1001384c <sinf>:
1001384c:	b500      	push	{lr}
1001384e:	4a1c      	ldr	r2, [pc, #112]	; (100138c0 <sinf+0x74>)
10013850:	0043      	lsls	r3, r0, #1
10013852:	b083      	sub	sp, #12
10013854:	085b      	lsrs	r3, r3, #1
10013856:	4293      	cmp	r3, r2
10013858:	dd1b      	ble.n	10013892 <sinf+0x46>
1001385a:	4a1a      	ldr	r2, [pc, #104]	; (100138c4 <sinf+0x78>)
1001385c:	4293      	cmp	r3, r2
1001385e:	dd04      	ble.n	1001386a <sinf+0x1e>
10013860:	1c01      	adds	r1, r0, #0
10013862:	f002 f853 	bl	1001590c <__aeabi_fsub>
10013866:	b003      	add	sp, #12
10013868:	bd00      	pop	{pc}
1001386a:	4669      	mov	r1, sp
1001386c:	f000 f9e4 	bl	10013c38 <__ieee754_rem_pio2f>
10013870:	2303      	movs	r3, #3
10013872:	9901      	ldr	r1, [sp, #4]
10013874:	4018      	ands	r0, r3
10013876:	2801      	cmp	r0, #1
10013878:	d019      	beq.n	100138ae <sinf+0x62>
1001387a:	2802      	cmp	r0, #2
1001387c:	d00e      	beq.n	1001389c <sinf+0x50>
1001387e:	2800      	cmp	r0, #0
10013880:	d019      	beq.n	100138b6 <sinf+0x6a>
10013882:	9800      	ldr	r0, [sp, #0]
10013884:	f000 fb60 	bl	10013f48 <__kernel_cosf>
10013888:	2380      	movs	r3, #128	; 0x80
1001388a:	061b      	lsls	r3, r3, #24
1001388c:	469c      	mov	ip, r3
1001388e:	4460      	add	r0, ip
10013890:	e7e9      	b.n	10013866 <sinf+0x1a>
10013892:	2200      	movs	r2, #0
10013894:	2100      	movs	r1, #0
10013896:	f000 ffb3 	bl	10014800 <__kernel_sinf>
1001389a:	e7e4      	b.n	10013866 <sinf+0x1a>
1001389c:	9800      	ldr	r0, [sp, #0]
1001389e:	2201      	movs	r2, #1
100138a0:	f000 ffae 	bl	10014800 <__kernel_sinf>
100138a4:	2380      	movs	r3, #128	; 0x80
100138a6:	061b      	lsls	r3, r3, #24
100138a8:	469c      	mov	ip, r3
100138aa:	4460      	add	r0, ip
100138ac:	e7db      	b.n	10013866 <sinf+0x1a>
100138ae:	9800      	ldr	r0, [sp, #0]
100138b0:	f000 fb4a 	bl	10013f48 <__kernel_cosf>
100138b4:	e7d7      	b.n	10013866 <sinf+0x1a>
100138b6:	9800      	ldr	r0, [sp, #0]
100138b8:	2201      	movs	r2, #1
100138ba:	f000 ffa1 	bl	10014800 <__kernel_sinf>
100138be:	e7d2      	b.n	10013866 <sinf+0x1a>
100138c0:	3f490fd8 	.word	0x3f490fd8
100138c4:	7f7fffff 	.word	0x7f7fffff

100138c8 <acosf>:
100138c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100138ca:	b08d      	sub	sp, #52	; 0x34
100138cc:	1c04      	adds	r4, r0, #0
100138ce:	f000 f84f 	bl	10013970 <__ieee754_acosf>
100138d2:	2300      	movs	r3, #0
100138d4:	4e23      	ldr	r6, [pc, #140]	; (10013964 <acosf+0x9c>)
100138d6:	1c05      	adds	r5, r0, #0
100138d8:	56f3      	ldrsb	r3, [r6, r3]
100138da:	3301      	adds	r3, #1
100138dc:	d031      	beq.n	10013942 <acosf+0x7a>
100138de:	1c21      	adds	r1, r4, #0
100138e0:	1c20      	adds	r0, r4, #0
100138e2:	f002 f999 	bl	10015c18 <__aeabi_fcmpun>
100138e6:	1e07      	subs	r7, r0, #0
100138e8:	d12b      	bne.n	10013942 <acosf+0x7a>
100138ea:	1c20      	adds	r0, r4, #0
100138ec:	f7fd f8b2 	bl	10010a54 <fabsf>
100138f0:	21fe      	movs	r1, #254	; 0xfe
100138f2:	0589      	lsls	r1, r1, #22
100138f4:	f001 fa98 	bl	10014e28 <__aeabi_fcmpgt>
100138f8:	2800      	cmp	r0, #0
100138fa:	d022      	beq.n	10013942 <acosf+0x7a>
100138fc:	2301      	movs	r3, #1
100138fe:	9302      	str	r3, [sp, #8]
10013900:	4b19      	ldr	r3, [pc, #100]	; (10013968 <acosf+0xa0>)
10013902:	1c20      	adds	r0, r4, #0
10013904:	9303      	str	r3, [sp, #12]
10013906:	970a      	str	r7, [sp, #40]	; 0x28
10013908:	f004 f814 	bl	10017934 <__aeabi_f2d>
1001390c:	9006      	str	r0, [sp, #24]
1001390e:	9107      	str	r1, [sp, #28]
10013910:	9004      	str	r0, [sp, #16]
10013912:	9105      	str	r1, [sp, #20]
10013914:	4815      	ldr	r0, [pc, #84]	; (1001396c <acosf+0xa4>)
10013916:	f7fc ff7b 	bl	10010810 <nan>
1001391a:	2300      	movs	r3, #0
1001391c:	56f3      	ldrsb	r3, [r6, r3]
1001391e:	9008      	str	r0, [sp, #32]
10013920:	9109      	str	r1, [sp, #36]	; 0x24
10013922:	2b02      	cmp	r3, #2
10013924:	d010      	beq.n	10013948 <acosf+0x80>
10013926:	a802      	add	r0, sp, #8
10013928:	f7fc ff70 	bl	1001080c <matherr>
1001392c:	2800      	cmp	r0, #0
1001392e:	d00b      	beq.n	10013948 <acosf+0x80>
10013930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10013932:	9301      	str	r3, [sp, #4]
10013934:	2b00      	cmp	r3, #0
10013936:	d10f      	bne.n	10013958 <acosf+0x90>
10013938:	9808      	ldr	r0, [sp, #32]
1001393a:	9909      	ldr	r1, [sp, #36]	; 0x24
1001393c:	f004 f84e 	bl	100179dc <__aeabi_d2f>
10013940:	e000      	b.n	10013944 <acosf+0x7c>
10013942:	1c28      	adds	r0, r5, #0
10013944:	b00d      	add	sp, #52	; 0x34
10013946:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013948:	f004 f9dc 	bl	10017d04 <__errno>
1001394c:	2321      	movs	r3, #33	; 0x21
1001394e:	6003      	str	r3, [r0, #0]
10013950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10013952:	9301      	str	r3, [sp, #4]
10013954:	2b00      	cmp	r3, #0
10013956:	d0ef      	beq.n	10013938 <acosf+0x70>
10013958:	f004 f9d4 	bl	10017d04 <__errno>
1001395c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1001395e:	9301      	str	r3, [sp, #4]
10013960:	6003      	str	r3, [r0, #0]
10013962:	e7e9      	b.n	10013938 <acosf+0x70>
10013964:	1001a4f4 	.word	0x1001a4f4
10013968:	10019ed4 	.word	0x10019ed4
1001396c:	10019324 	.word	0x10019324

10013970 <__ieee754_acosf>:
10013970:	22fe      	movs	r2, #254	; 0xfe
10013972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013974:	0043      	lsls	r3, r0, #1
10013976:	1c04      	adds	r4, r0, #0
10013978:	085b      	lsrs	r3, r3, #1
1001397a:	0592      	lsls	r2, r2, #22
1001397c:	4293      	cmp	r3, r2
1001397e:	d011      	beq.n	100139a4 <__ieee754_acosf+0x34>
10013980:	dc09      	bgt.n	10013996 <__ieee754_acosf+0x26>
10013982:	4a9d      	ldr	r2, [pc, #628]	; (10013bf8 <__ieee754_acosf+0x288>)
10013984:	4293      	cmp	r3, r2
10013986:	dc12      	bgt.n	100139ae <__ieee754_acosf+0x3e>
10013988:	228c      	movs	r2, #140	; 0x8c
1001398a:	0592      	lsls	r2, r2, #22
1001398c:	4293      	cmp	r3, r2
1001398e:	dd00      	ble.n	10013992 <__ieee754_acosf+0x22>
10013990:	e080      	b.n	10013a94 <__ieee754_acosf+0x124>
10013992:	489a      	ldr	r0, [pc, #616]	; (10013bfc <__ieee754_acosf+0x28c>)
10013994:	e005      	b.n	100139a2 <__ieee754_acosf+0x32>
10013996:	1c01      	adds	r1, r0, #0
10013998:	f001 ffb8 	bl	1001590c <__aeabi_fsub>
1001399c:	1c01      	adds	r1, r0, #0
1001399e:	f001 fcd7 	bl	10015350 <__aeabi_fdiv>
100139a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100139a4:	2000      	movs	r0, #0
100139a6:	2c00      	cmp	r4, #0
100139a8:	dcfb      	bgt.n	100139a2 <__ieee754_acosf+0x32>
100139aa:	4895      	ldr	r0, [pc, #596]	; (10013c00 <__ieee754_acosf+0x290>)
100139ac:	e7f9      	b.n	100139a2 <__ieee754_acosf+0x32>
100139ae:	2800      	cmp	r0, #0
100139b0:	da00      	bge.n	100139b4 <__ieee754_acosf+0x44>
100139b2:	e0c3      	b.n	10013b3c <__ieee754_acosf+0x1cc>
100139b4:	1c01      	adds	r1, r0, #0
100139b6:	20fe      	movs	r0, #254	; 0xfe
100139b8:	0580      	lsls	r0, r0, #22
100139ba:	f001 ffa7 	bl	1001590c <__aeabi_fsub>
100139be:	21fc      	movs	r1, #252	; 0xfc
100139c0:	0589      	lsls	r1, r1, #22
100139c2:	f001 fe8f 	bl	100156e4 <__aeabi_fmul>
100139c6:	1c04      	adds	r4, r0, #0
100139c8:	f7fc fec4 	bl	10010754 <__ieee754_sqrtf>
100139cc:	498d      	ldr	r1, [pc, #564]	; (10013c04 <__ieee754_acosf+0x294>)
100139ce:	1c06      	adds	r6, r0, #0
100139d0:	0b05      	lsrs	r5, r0, #12
100139d2:	1c20      	adds	r0, r4, #0
100139d4:	f001 fe86 	bl	100156e4 <__aeabi_fmul>
100139d8:	498b      	ldr	r1, [pc, #556]	; (10013c08 <__ieee754_acosf+0x298>)
100139da:	f001 fb43 	bl	10015064 <__aeabi_fadd>
100139de:	1c21      	adds	r1, r4, #0
100139e0:	f001 fe80 	bl	100156e4 <__aeabi_fmul>
100139e4:	4989      	ldr	r1, [pc, #548]	; (10013c0c <__ieee754_acosf+0x29c>)
100139e6:	f001 ff91 	bl	1001590c <__aeabi_fsub>
100139ea:	1c21      	adds	r1, r4, #0
100139ec:	f001 fe7a 	bl	100156e4 <__aeabi_fmul>
100139f0:	4987      	ldr	r1, [pc, #540]	; (10013c10 <__ieee754_acosf+0x2a0>)
100139f2:	f001 fb37 	bl	10015064 <__aeabi_fadd>
100139f6:	1c21      	adds	r1, r4, #0
100139f8:	f001 fe74 	bl	100156e4 <__aeabi_fmul>
100139fc:	4985      	ldr	r1, [pc, #532]	; (10013c14 <__ieee754_acosf+0x2a4>)
100139fe:	f001 ff85 	bl	1001590c <__aeabi_fsub>
10013a02:	1c21      	adds	r1, r4, #0
10013a04:	f001 fe6e 	bl	100156e4 <__aeabi_fmul>
10013a08:	4983      	ldr	r1, [pc, #524]	; (10013c18 <__ieee754_acosf+0x2a8>)
10013a0a:	f001 fb2b 	bl	10015064 <__aeabi_fadd>
10013a0e:	1c21      	adds	r1, r4, #0
10013a10:	f001 fe68 	bl	100156e4 <__aeabi_fmul>
10013a14:	4981      	ldr	r1, [pc, #516]	; (10013c1c <__ieee754_acosf+0x2ac>)
10013a16:	1c07      	adds	r7, r0, #0
10013a18:	1c20      	adds	r0, r4, #0
10013a1a:	f001 fe63 	bl	100156e4 <__aeabi_fmul>
10013a1e:	4980      	ldr	r1, [pc, #512]	; (10013c20 <__ieee754_acosf+0x2b0>)
10013a20:	f001 ff74 	bl	1001590c <__aeabi_fsub>
10013a24:	1c21      	adds	r1, r4, #0
10013a26:	f001 fe5d 	bl	100156e4 <__aeabi_fmul>
10013a2a:	497e      	ldr	r1, [pc, #504]	; (10013c24 <__ieee754_acosf+0x2b4>)
10013a2c:	f001 fb1a 	bl	10015064 <__aeabi_fadd>
10013a30:	1c21      	adds	r1, r4, #0
10013a32:	f001 fe57 	bl	100156e4 <__aeabi_fmul>
10013a36:	497c      	ldr	r1, [pc, #496]	; (10013c28 <__ieee754_acosf+0x2b8>)
10013a38:	f001 ff68 	bl	1001590c <__aeabi_fsub>
10013a3c:	1c21      	adds	r1, r4, #0
10013a3e:	f001 fe51 	bl	100156e4 <__aeabi_fmul>
10013a42:	21fe      	movs	r1, #254	; 0xfe
10013a44:	0589      	lsls	r1, r1, #22
10013a46:	f001 fb0d 	bl	10015064 <__aeabi_fadd>
10013a4a:	1c01      	adds	r1, r0, #0
10013a4c:	1c38      	adds	r0, r7, #0
10013a4e:	f001 fc7f 	bl	10015350 <__aeabi_fdiv>
10013a52:	1c31      	adds	r1, r6, #0
10013a54:	f001 fe46 	bl	100156e4 <__aeabi_fmul>
10013a58:	032d      	lsls	r5, r5, #12
10013a5a:	1c07      	adds	r7, r0, #0
10013a5c:	1c29      	adds	r1, r5, #0
10013a5e:	1c28      	adds	r0, r5, #0
10013a60:	f001 fe40 	bl	100156e4 <__aeabi_fmul>
10013a64:	1c01      	adds	r1, r0, #0
10013a66:	1c20      	adds	r0, r4, #0
10013a68:	f001 ff50 	bl	1001590c <__aeabi_fsub>
10013a6c:	1c29      	adds	r1, r5, #0
10013a6e:	1c04      	adds	r4, r0, #0
10013a70:	1c30      	adds	r0, r6, #0
10013a72:	f001 faf7 	bl	10015064 <__aeabi_fadd>
10013a76:	1c01      	adds	r1, r0, #0
10013a78:	1c20      	adds	r0, r4, #0
10013a7a:	f001 fc69 	bl	10015350 <__aeabi_fdiv>
10013a7e:	1c01      	adds	r1, r0, #0
10013a80:	1c38      	adds	r0, r7, #0
10013a82:	f001 faef 	bl	10015064 <__aeabi_fadd>
10013a86:	1c29      	adds	r1, r5, #0
10013a88:	f001 faec 	bl	10015064 <__aeabi_fadd>
10013a8c:	1c01      	adds	r1, r0, #0
10013a8e:	f001 fae9 	bl	10015064 <__aeabi_fadd>
10013a92:	e786      	b.n	100139a2 <__ieee754_acosf+0x32>
10013a94:	1c01      	adds	r1, r0, #0
10013a96:	f001 fe25 	bl	100156e4 <__aeabi_fmul>
10013a9a:	495a      	ldr	r1, [pc, #360]	; (10013c04 <__ieee754_acosf+0x294>)
10013a9c:	1c05      	adds	r5, r0, #0
10013a9e:	f001 fe21 	bl	100156e4 <__aeabi_fmul>
10013aa2:	4959      	ldr	r1, [pc, #356]	; (10013c08 <__ieee754_acosf+0x298>)
10013aa4:	f001 fade 	bl	10015064 <__aeabi_fadd>
10013aa8:	1c29      	adds	r1, r5, #0
10013aaa:	f001 fe1b 	bl	100156e4 <__aeabi_fmul>
10013aae:	4957      	ldr	r1, [pc, #348]	; (10013c0c <__ieee754_acosf+0x29c>)
10013ab0:	f001 ff2c 	bl	1001590c <__aeabi_fsub>
10013ab4:	1c29      	adds	r1, r5, #0
10013ab6:	f001 fe15 	bl	100156e4 <__aeabi_fmul>
10013aba:	4955      	ldr	r1, [pc, #340]	; (10013c10 <__ieee754_acosf+0x2a0>)
10013abc:	f001 fad2 	bl	10015064 <__aeabi_fadd>
10013ac0:	1c29      	adds	r1, r5, #0
10013ac2:	f001 fe0f 	bl	100156e4 <__aeabi_fmul>
10013ac6:	4953      	ldr	r1, [pc, #332]	; (10013c14 <__ieee754_acosf+0x2a4>)
10013ac8:	f001 ff20 	bl	1001590c <__aeabi_fsub>
10013acc:	1c29      	adds	r1, r5, #0
10013ace:	f001 fe09 	bl	100156e4 <__aeabi_fmul>
10013ad2:	4951      	ldr	r1, [pc, #324]	; (10013c18 <__ieee754_acosf+0x2a8>)
10013ad4:	f001 fac6 	bl	10015064 <__aeabi_fadd>
10013ad8:	1c29      	adds	r1, r5, #0
10013ada:	f001 fe03 	bl	100156e4 <__aeabi_fmul>
10013ade:	494f      	ldr	r1, [pc, #316]	; (10013c1c <__ieee754_acosf+0x2ac>)
10013ae0:	1c06      	adds	r6, r0, #0
10013ae2:	1c28      	adds	r0, r5, #0
10013ae4:	f001 fdfe 	bl	100156e4 <__aeabi_fmul>
10013ae8:	494d      	ldr	r1, [pc, #308]	; (10013c20 <__ieee754_acosf+0x2b0>)
10013aea:	f001 ff0f 	bl	1001590c <__aeabi_fsub>
10013aee:	1c29      	adds	r1, r5, #0
10013af0:	f001 fdf8 	bl	100156e4 <__aeabi_fmul>
10013af4:	494b      	ldr	r1, [pc, #300]	; (10013c24 <__ieee754_acosf+0x2b4>)
10013af6:	f001 fab5 	bl	10015064 <__aeabi_fadd>
10013afa:	1c29      	adds	r1, r5, #0
10013afc:	f001 fdf2 	bl	100156e4 <__aeabi_fmul>
10013b00:	4949      	ldr	r1, [pc, #292]	; (10013c28 <__ieee754_acosf+0x2b8>)
10013b02:	f001 ff03 	bl	1001590c <__aeabi_fsub>
10013b06:	1c29      	adds	r1, r5, #0
10013b08:	f001 fdec 	bl	100156e4 <__aeabi_fmul>
10013b0c:	21fe      	movs	r1, #254	; 0xfe
10013b0e:	0589      	lsls	r1, r1, #22
10013b10:	f001 faa8 	bl	10015064 <__aeabi_fadd>
10013b14:	1c01      	adds	r1, r0, #0
10013b16:	1c30      	adds	r0, r6, #0
10013b18:	f001 fc1a 	bl	10015350 <__aeabi_fdiv>
10013b1c:	1c21      	adds	r1, r4, #0
10013b1e:	f001 fde1 	bl	100156e4 <__aeabi_fmul>
10013b22:	1c01      	adds	r1, r0, #0
10013b24:	4841      	ldr	r0, [pc, #260]	; (10013c2c <__ieee754_acosf+0x2bc>)
10013b26:	f001 fef1 	bl	1001590c <__aeabi_fsub>
10013b2a:	1c01      	adds	r1, r0, #0
10013b2c:	1c20      	adds	r0, r4, #0
10013b2e:	f001 feed 	bl	1001590c <__aeabi_fsub>
10013b32:	1c01      	adds	r1, r0, #0
10013b34:	483e      	ldr	r0, [pc, #248]	; (10013c30 <__ieee754_acosf+0x2c0>)
10013b36:	f001 fee9 	bl	1001590c <__aeabi_fsub>
10013b3a:	e732      	b.n	100139a2 <__ieee754_acosf+0x32>
10013b3c:	21fe      	movs	r1, #254	; 0xfe
10013b3e:	0589      	lsls	r1, r1, #22
10013b40:	f001 fa90 	bl	10015064 <__aeabi_fadd>
10013b44:	21fc      	movs	r1, #252	; 0xfc
10013b46:	0589      	lsls	r1, r1, #22
10013b48:	f001 fdcc 	bl	100156e4 <__aeabi_fmul>
10013b4c:	492d      	ldr	r1, [pc, #180]	; (10013c04 <__ieee754_acosf+0x294>)
10013b4e:	1c04      	adds	r4, r0, #0
10013b50:	f001 fdc8 	bl	100156e4 <__aeabi_fmul>
10013b54:	492c      	ldr	r1, [pc, #176]	; (10013c08 <__ieee754_acosf+0x298>)
10013b56:	f001 fa85 	bl	10015064 <__aeabi_fadd>
10013b5a:	1c21      	adds	r1, r4, #0
10013b5c:	f001 fdc2 	bl	100156e4 <__aeabi_fmul>
10013b60:	492a      	ldr	r1, [pc, #168]	; (10013c0c <__ieee754_acosf+0x29c>)
10013b62:	f001 fed3 	bl	1001590c <__aeabi_fsub>
10013b66:	1c21      	adds	r1, r4, #0
10013b68:	f001 fdbc 	bl	100156e4 <__aeabi_fmul>
10013b6c:	4928      	ldr	r1, [pc, #160]	; (10013c10 <__ieee754_acosf+0x2a0>)
10013b6e:	f001 fa79 	bl	10015064 <__aeabi_fadd>
10013b72:	1c21      	adds	r1, r4, #0
10013b74:	f001 fdb6 	bl	100156e4 <__aeabi_fmul>
10013b78:	4926      	ldr	r1, [pc, #152]	; (10013c14 <__ieee754_acosf+0x2a4>)
10013b7a:	f001 fec7 	bl	1001590c <__aeabi_fsub>
10013b7e:	1c21      	adds	r1, r4, #0
10013b80:	f001 fdb0 	bl	100156e4 <__aeabi_fmul>
10013b84:	4924      	ldr	r1, [pc, #144]	; (10013c18 <__ieee754_acosf+0x2a8>)
10013b86:	f001 fa6d 	bl	10015064 <__aeabi_fadd>
10013b8a:	1c21      	adds	r1, r4, #0
10013b8c:	f001 fdaa 	bl	100156e4 <__aeabi_fmul>
10013b90:	1c06      	adds	r6, r0, #0
10013b92:	1c20      	adds	r0, r4, #0
10013b94:	f7fc fdde 	bl	10010754 <__ieee754_sqrtf>
10013b98:	4920      	ldr	r1, [pc, #128]	; (10013c1c <__ieee754_acosf+0x2ac>)
10013b9a:	1c05      	adds	r5, r0, #0
10013b9c:	1c20      	adds	r0, r4, #0
10013b9e:	f001 fda1 	bl	100156e4 <__aeabi_fmul>
10013ba2:	491f      	ldr	r1, [pc, #124]	; (10013c20 <__ieee754_acosf+0x2b0>)
10013ba4:	f001 feb2 	bl	1001590c <__aeabi_fsub>
10013ba8:	1c21      	adds	r1, r4, #0
10013baa:	f001 fd9b 	bl	100156e4 <__aeabi_fmul>
10013bae:	491d      	ldr	r1, [pc, #116]	; (10013c24 <__ieee754_acosf+0x2b4>)
10013bb0:	f001 fa58 	bl	10015064 <__aeabi_fadd>
10013bb4:	1c21      	adds	r1, r4, #0
10013bb6:	f001 fd95 	bl	100156e4 <__aeabi_fmul>
10013bba:	491b      	ldr	r1, [pc, #108]	; (10013c28 <__ieee754_acosf+0x2b8>)
10013bbc:	f001 fea6 	bl	1001590c <__aeabi_fsub>
10013bc0:	1c21      	adds	r1, r4, #0
10013bc2:	f001 fd8f 	bl	100156e4 <__aeabi_fmul>
10013bc6:	21fe      	movs	r1, #254	; 0xfe
10013bc8:	0589      	lsls	r1, r1, #22
10013bca:	f001 fa4b 	bl	10015064 <__aeabi_fadd>
10013bce:	1c01      	adds	r1, r0, #0
10013bd0:	1c30      	adds	r0, r6, #0
10013bd2:	f001 fbbd 	bl	10015350 <__aeabi_fdiv>
10013bd6:	1c29      	adds	r1, r5, #0
10013bd8:	f001 fd84 	bl	100156e4 <__aeabi_fmul>
10013bdc:	4913      	ldr	r1, [pc, #76]	; (10013c2c <__ieee754_acosf+0x2bc>)
10013bde:	f001 fe95 	bl	1001590c <__aeabi_fsub>
10013be2:	1c29      	adds	r1, r5, #0
10013be4:	f001 fa3e 	bl	10015064 <__aeabi_fadd>
10013be8:	1c01      	adds	r1, r0, #0
10013bea:	f001 fa3b 	bl	10015064 <__aeabi_fadd>
10013bee:	1c01      	adds	r1, r0, #0
10013bf0:	4810      	ldr	r0, [pc, #64]	; (10013c34 <__ieee754_acosf+0x2c4>)
10013bf2:	f001 fe8b 	bl	1001590c <__aeabi_fsub>
10013bf6:	e6d4      	b.n	100139a2 <__ieee754_acosf+0x32>
10013bf8:	3effffff 	.word	0x3effffff
10013bfc:	3fc90fdb 	.word	0x3fc90fdb
10013c00:	40490fdb 	.word	0x40490fdb
10013c04:	3811ef08 	.word	0x3811ef08
10013c08:	3a4f7f04 	.word	0x3a4f7f04
10013c0c:	3d241146 	.word	0x3d241146
10013c10:	3e4e0aa8 	.word	0x3e4e0aa8
10013c14:	3ea6b090 	.word	0x3ea6b090
10013c18:	3e2aaaab 	.word	0x3e2aaaab
10013c1c:	3d9dc62e 	.word	0x3d9dc62e
10013c20:	3f303361 	.word	0x3f303361
10013c24:	4001572d 	.word	0x4001572d
10013c28:	4019d139 	.word	0x4019d139
10013c2c:	33a22168 	.word	0x33a22168
10013c30:	3fc90fda 	.word	0x3fc90fda
10013c34:	40490fda 	.word	0x40490fda

10013c38 <__ieee754_rem_pio2f>:
10013c38:	b5f0      	push	{r4, r5, r6, r7, lr}
10013c3a:	465f      	mov	r7, fp
10013c3c:	4656      	mov	r6, sl
10013c3e:	4644      	mov	r4, r8
10013c40:	464d      	mov	r5, r9
10013c42:	b4f0      	push	{r4, r5, r6, r7}
10013c44:	0043      	lsls	r3, r0, #1
10013c46:	085f      	lsrs	r7, r3, #1
10013c48:	4bb1      	ldr	r3, [pc, #708]	; (10013f10 <__ieee754_rem_pio2f+0x2d8>)
10013c4a:	b089      	sub	sp, #36	; 0x24
10013c4c:	000c      	movs	r4, r1
10013c4e:	0006      	movs	r6, r0
10013c50:	429f      	cmp	r7, r3
10013c52:	dd6f      	ble.n	10013d34 <__ieee754_rem_pio2f+0xfc>
10013c54:	4baf      	ldr	r3, [pc, #700]	; (10013f14 <__ieee754_rem_pio2f+0x2dc>)
10013c56:	429f      	cmp	r7, r3
10013c58:	dc1b      	bgt.n	10013c92 <__ieee754_rem_pio2f+0x5a>
10013c5a:	49af      	ldr	r1, [pc, #700]	; (10013f18 <__ieee754_rem_pio2f+0x2e0>)
10013c5c:	2800      	cmp	r0, #0
10013c5e:	dc00      	bgt.n	10013c62 <__ieee754_rem_pio2f+0x2a>
10013c60:	e10b      	b.n	10013e7a <__ieee754_rem_pio2f+0x242>
10013c62:	f001 fe53 	bl	1001590c <__aeabi_fsub>
10013c66:	230f      	movs	r3, #15
10013c68:	003a      	movs	r2, r7
10013c6a:	439a      	bics	r2, r3
10013c6c:	4bab      	ldr	r3, [pc, #684]	; (10013f1c <__ieee754_rem_pio2f+0x2e4>)
10013c6e:	1c05      	adds	r5, r0, #0
10013c70:	429a      	cmp	r2, r3
10013c72:	d100      	bne.n	10013c76 <__ieee754_rem_pio2f+0x3e>
10013c74:	e070      	b.n	10013d58 <__ieee754_rem_pio2f+0x120>
10013c76:	49aa      	ldr	r1, [pc, #680]	; (10013f20 <__ieee754_rem_pio2f+0x2e8>)
10013c78:	f001 fe48 	bl	1001590c <__aeabi_fsub>
10013c7c:	1c01      	adds	r1, r0, #0
10013c7e:	6020      	str	r0, [r4, #0]
10013c80:	1c28      	adds	r0, r5, #0
10013c82:	f001 fe43 	bl	1001590c <__aeabi_fsub>
10013c86:	49a6      	ldr	r1, [pc, #664]	; (10013f20 <__ieee754_rem_pio2f+0x2e8>)
10013c88:	f001 fe40 	bl	1001590c <__aeabi_fsub>
10013c8c:	6060      	str	r0, [r4, #4]
10013c8e:	2001      	movs	r0, #1
10013c90:	e054      	b.n	10013d3c <__ieee754_rem_pio2f+0x104>
10013c92:	4ba4      	ldr	r3, [pc, #656]	; (10013f24 <__ieee754_rem_pio2f+0x2ec>)
10013c94:	429f      	cmp	r7, r3
10013c96:	dc00      	bgt.n	10013c9a <__ieee754_rem_pio2f+0x62>
10013c98:	e070      	b.n	10013d7c <__ieee754_rem_pio2f+0x144>
10013c9a:	4ba3      	ldr	r3, [pc, #652]	; (10013f28 <__ieee754_rem_pio2f+0x2f0>)
10013c9c:	429f      	cmp	r7, r3
10013c9e:	dc54      	bgt.n	10013d4a <__ieee754_rem_pio2f+0x112>
10013ca0:	2286      	movs	r2, #134	; 0x86
10013ca2:	4252      	negs	r2, r2
10013ca4:	4691      	mov	r9, r2
10013ca6:	15fb      	asrs	r3, r7, #23
10013ca8:	4499      	add	r9, r3
10013caa:	464b      	mov	r3, r9
10013cac:	05dd      	lsls	r5, r3, #23
10013cae:	1b7d      	subs	r5, r7, r5
10013cb0:	1c28      	adds	r0, r5, #0
10013cb2:	f001 ffc9 	bl	10015c48 <__aeabi_f2iz>
10013cb6:	f001 ffe9 	bl	10015c8c <__aeabi_i2f>
10013cba:	1c01      	adds	r1, r0, #0
10013cbc:	9005      	str	r0, [sp, #20]
10013cbe:	1c28      	adds	r0, r5, #0
10013cc0:	f001 fe24 	bl	1001590c <__aeabi_fsub>
10013cc4:	2187      	movs	r1, #135	; 0x87
10013cc6:	05c9      	lsls	r1, r1, #23
10013cc8:	f001 fd0c 	bl	100156e4 <__aeabi_fmul>
10013ccc:	4680      	mov	r8, r0
10013cce:	f001 ffbb 	bl	10015c48 <__aeabi_f2iz>
10013cd2:	f001 ffdb 	bl	10015c8c <__aeabi_i2f>
10013cd6:	1c01      	adds	r1, r0, #0
10013cd8:	9006      	str	r0, [sp, #24]
10013cda:	1c05      	adds	r5, r0, #0
10013cdc:	4640      	mov	r0, r8
10013cde:	f001 fe15 	bl	1001590c <__aeabi_fsub>
10013ce2:	2187      	movs	r1, #135	; 0x87
10013ce4:	05c9      	lsls	r1, r1, #23
10013ce6:	f001 fcfd 	bl	100156e4 <__aeabi_fmul>
10013cea:	2100      	movs	r1, #0
10013cec:	9007      	str	r0, [sp, #28]
10013cee:	f001 f881 	bl	10014df4 <__aeabi_fcmpeq>
10013cf2:	2800      	cmp	r0, #0
10013cf4:	d100      	bne.n	10013cf8 <__ieee754_rem_pio2f+0xc0>
10013cf6:	e0d8      	b.n	10013eaa <__ieee754_rem_pio2f+0x272>
10013cf8:	2100      	movs	r1, #0
10013cfa:	1c28      	adds	r0, r5, #0
10013cfc:	f001 f87a 	bl	10014df4 <__aeabi_fcmpeq>
10013d00:	2202      	movs	r2, #2
10013d02:	1e43      	subs	r3, r0, #1
10013d04:	4198      	sbcs	r0, r3
10013d06:	1a13      	subs	r3, r2, r0
10013d08:	4a88      	ldr	r2, [pc, #544]	; (10013f2c <__ieee754_rem_pio2f+0x2f4>)
10013d0a:	0021      	movs	r1, r4
10013d0c:	9201      	str	r2, [sp, #4]
10013d0e:	2202      	movs	r2, #2
10013d10:	a805      	add	r0, sp, #20
10013d12:	9200      	str	r2, [sp, #0]
10013d14:	464a      	mov	r2, r9
10013d16:	f000 f9e1 	bl	100140dc <__kernel_rem_pio2f>
10013d1a:	2e00      	cmp	r6, #0
10013d1c:	da0e      	bge.n	10013d3c <__ieee754_rem_pio2f+0x104>
10013d1e:	2280      	movs	r2, #128	; 0x80
10013d20:	0612      	lsls	r2, r2, #24
10013d22:	4694      	mov	ip, r2
10013d24:	6823      	ldr	r3, [r4, #0]
10013d26:	4240      	negs	r0, r0
10013d28:	4463      	add	r3, ip
10013d2a:	6023      	str	r3, [r4, #0]
10013d2c:	6863      	ldr	r3, [r4, #4]
10013d2e:	4463      	add	r3, ip
10013d30:	6063      	str	r3, [r4, #4]
10013d32:	e003      	b.n	10013d3c <__ieee754_rem_pio2f+0x104>
10013d34:	2300      	movs	r3, #0
10013d36:	6008      	str	r0, [r1, #0]
10013d38:	2000      	movs	r0, #0
10013d3a:	604b      	str	r3, [r1, #4]
10013d3c:	b009      	add	sp, #36	; 0x24
10013d3e:	bc3c      	pop	{r2, r3, r4, r5}
10013d40:	4690      	mov	r8, r2
10013d42:	4699      	mov	r9, r3
10013d44:	46a2      	mov	sl, r4
10013d46:	46ab      	mov	fp, r5
10013d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013d4a:	1c01      	adds	r1, r0, #0
10013d4c:	f001 fdde 	bl	1001590c <__aeabi_fsub>
10013d50:	6060      	str	r0, [r4, #4]
10013d52:	6020      	str	r0, [r4, #0]
10013d54:	2000      	movs	r0, #0
10013d56:	e7f1      	b.n	10013d3c <__ieee754_rem_pio2f+0x104>
10013d58:	4975      	ldr	r1, [pc, #468]	; (10013f30 <__ieee754_rem_pio2f+0x2f8>)
10013d5a:	f001 fdd7 	bl	1001590c <__aeabi_fsub>
10013d5e:	4975      	ldr	r1, [pc, #468]	; (10013f34 <__ieee754_rem_pio2f+0x2fc>)
10013d60:	1c05      	adds	r5, r0, #0
10013d62:	f001 fdd3 	bl	1001590c <__aeabi_fsub>
10013d66:	1c01      	adds	r1, r0, #0
10013d68:	6020      	str	r0, [r4, #0]
10013d6a:	1c28      	adds	r0, r5, #0
10013d6c:	f001 fdce 	bl	1001590c <__aeabi_fsub>
10013d70:	4970      	ldr	r1, [pc, #448]	; (10013f34 <__ieee754_rem_pio2f+0x2fc>)
10013d72:	f001 fdcb 	bl	1001590c <__aeabi_fsub>
10013d76:	6060      	str	r0, [r4, #4]
10013d78:	2001      	movs	r0, #1
10013d7a:	e7df      	b.n	10013d3c <__ieee754_rem_pio2f+0x104>
10013d7c:	f7fc fe6a 	bl	10010a54 <fabsf>
10013d80:	496d      	ldr	r1, [pc, #436]	; (10013f38 <__ieee754_rem_pio2f+0x300>)
10013d82:	4680      	mov	r8, r0
10013d84:	f001 fcae 	bl	100156e4 <__aeabi_fmul>
10013d88:	21fc      	movs	r1, #252	; 0xfc
10013d8a:	0589      	lsls	r1, r1, #22
10013d8c:	f001 f96a 	bl	10015064 <__aeabi_fadd>
10013d90:	f001 ff5a 	bl	10015c48 <__aeabi_f2iz>
10013d94:	0005      	movs	r5, r0
10013d96:	f001 ff79 	bl	10015c8c <__aeabi_i2f>
10013d9a:	495f      	ldr	r1, [pc, #380]	; (10013f18 <__ieee754_rem_pio2f+0x2e0>)
10013d9c:	4681      	mov	r9, r0
10013d9e:	f001 fca1 	bl	100156e4 <__aeabi_fmul>
10013da2:	1c01      	adds	r1, r0, #0
10013da4:	4640      	mov	r0, r8
10013da6:	f001 fdb1 	bl	1001590c <__aeabi_fsub>
10013daa:	495d      	ldr	r1, [pc, #372]	; (10013f20 <__ieee754_rem_pio2f+0x2e8>)
10013dac:	4680      	mov	r8, r0
10013dae:	4648      	mov	r0, r9
10013db0:	f001 fc98 	bl	100156e4 <__aeabi_fmul>
10013db4:	4682      	mov	sl, r0
10013db6:	2d1f      	cmp	r5, #31
10013db8:	dc26      	bgt.n	10013e08 <__ieee754_rem_pio2f+0x1d0>
10013dba:	23ff      	movs	r3, #255	; 0xff
10013dbc:	003a      	movs	r2, r7
10013dbe:	495f      	ldr	r1, [pc, #380]	; (10013f3c <__ieee754_rem_pio2f+0x304>)
10013dc0:	439a      	bics	r2, r3
10013dc2:	1e6b      	subs	r3, r5, #1
10013dc4:	009b      	lsls	r3, r3, #2
10013dc6:	585b      	ldr	r3, [r3, r1]
10013dc8:	429a      	cmp	r2, r3
10013dca:	d01d      	beq.n	10013e08 <__ieee754_rem_pio2f+0x1d0>
10013dcc:	4651      	mov	r1, sl
10013dce:	4640      	mov	r0, r8
10013dd0:	f001 fd9c 	bl	1001590c <__aeabi_fsub>
10013dd4:	4683      	mov	fp, r0
10013dd6:	465b      	mov	r3, fp
10013dd8:	6023      	str	r3, [r4, #0]
10013dda:	4659      	mov	r1, fp
10013ddc:	4640      	mov	r0, r8
10013dde:	f001 fd95 	bl	1001590c <__aeabi_fsub>
10013de2:	4651      	mov	r1, sl
10013de4:	f001 fd92 	bl	1001590c <__aeabi_fsub>
10013de8:	1c03      	adds	r3, r0, #0
10013dea:	6060      	str	r0, [r4, #4]
10013dec:	0028      	movs	r0, r5
10013dee:	2e00      	cmp	r6, #0
10013df0:	daa4      	bge.n	10013d3c <__ieee754_rem_pio2f+0x104>
10013df2:	2280      	movs	r2, #128	; 0x80
10013df4:	0612      	lsls	r2, r2, #24
10013df6:	445a      	add	r2, fp
10013df8:	6022      	str	r2, [r4, #0]
10013dfa:	2280      	movs	r2, #128	; 0x80
10013dfc:	0612      	lsls	r2, r2, #24
10013dfe:	4694      	mov	ip, r2
10013e00:	4463      	add	r3, ip
10013e02:	6063      	str	r3, [r4, #4]
10013e04:	4268      	negs	r0, r5
10013e06:	e799      	b.n	10013d3c <__ieee754_rem_pio2f+0x104>
10013e08:	4651      	mov	r1, sl
10013e0a:	4640      	mov	r0, r8
10013e0c:	f001 fd7e 	bl	1001590c <__aeabi_fsub>
10013e10:	15fb      	asrs	r3, r7, #23
10013e12:	21ff      	movs	r1, #255	; 0xff
10013e14:	001a      	movs	r2, r3
10013e16:	9302      	str	r3, [sp, #8]
10013e18:	0dc3      	lsrs	r3, r0, #23
10013e1a:	400b      	ands	r3, r1
10013e1c:	4683      	mov	fp, r0
10013e1e:	1ad3      	subs	r3, r2, r3
10013e20:	2b08      	cmp	r3, #8
10013e22:	ddd8      	ble.n	10013dd6 <__ieee754_rem_pio2f+0x19e>
10013e24:	4942      	ldr	r1, [pc, #264]	; (10013f30 <__ieee754_rem_pio2f+0x2f8>)
10013e26:	4648      	mov	r0, r9
10013e28:	f001 fc5c 	bl	100156e4 <__aeabi_fmul>
10013e2c:	1c07      	adds	r7, r0, #0
10013e2e:	1c01      	adds	r1, r0, #0
10013e30:	4640      	mov	r0, r8
10013e32:	f001 fd6b 	bl	1001590c <__aeabi_fsub>
10013e36:	4683      	mov	fp, r0
10013e38:	1c01      	adds	r1, r0, #0
10013e3a:	9003      	str	r0, [sp, #12]
10013e3c:	4640      	mov	r0, r8
10013e3e:	f001 fd65 	bl	1001590c <__aeabi_fsub>
10013e42:	1c39      	adds	r1, r7, #0
10013e44:	f001 fd62 	bl	1001590c <__aeabi_fsub>
10013e48:	493a      	ldr	r1, [pc, #232]	; (10013f34 <__ieee754_rem_pio2f+0x2fc>)
10013e4a:	1c07      	adds	r7, r0, #0
10013e4c:	4648      	mov	r0, r9
10013e4e:	f001 fc49 	bl	100156e4 <__aeabi_fmul>
10013e52:	1c39      	adds	r1, r7, #0
10013e54:	f001 fd5a 	bl	1001590c <__aeabi_fsub>
10013e58:	1c01      	adds	r1, r0, #0
10013e5a:	4682      	mov	sl, r0
10013e5c:	4658      	mov	r0, fp
10013e5e:	f001 fd55 	bl	1001590c <__aeabi_fsub>
10013e62:	22ff      	movs	r2, #255	; 0xff
10013e64:	0dc3      	lsrs	r3, r0, #23
10013e66:	4013      	ands	r3, r2
10013e68:	9a02      	ldr	r2, [sp, #8]
10013e6a:	465f      	mov	r7, fp
10013e6c:	1ad3      	subs	r3, r2, r3
10013e6e:	4683      	mov	fp, r0
10013e70:	2b19      	cmp	r3, #25
10013e72:	dc2f      	bgt.n	10013ed4 <__ieee754_rem_pio2f+0x29c>
10013e74:	6020      	str	r0, [r4, #0]
10013e76:	46b8      	mov	r8, r7
10013e78:	e7af      	b.n	10013dda <__ieee754_rem_pio2f+0x1a2>
10013e7a:	f001 f8f3 	bl	10015064 <__aeabi_fadd>
10013e7e:	230f      	movs	r3, #15
10013e80:	003a      	movs	r2, r7
10013e82:	439a      	bics	r2, r3
10013e84:	4b25      	ldr	r3, [pc, #148]	; (10013f1c <__ieee754_rem_pio2f+0x2e4>)
10013e86:	1c05      	adds	r5, r0, #0
10013e88:	429a      	cmp	r2, r3
10013e8a:	d010      	beq.n	10013eae <__ieee754_rem_pio2f+0x276>
10013e8c:	4924      	ldr	r1, [pc, #144]	; (10013f20 <__ieee754_rem_pio2f+0x2e8>)
10013e8e:	f001 f8e9 	bl	10015064 <__aeabi_fadd>
10013e92:	1c01      	adds	r1, r0, #0
10013e94:	6020      	str	r0, [r4, #0]
10013e96:	1c28      	adds	r0, r5, #0
10013e98:	f001 fd38 	bl	1001590c <__aeabi_fsub>
10013e9c:	4920      	ldr	r1, [pc, #128]	; (10013f20 <__ieee754_rem_pio2f+0x2e8>)
10013e9e:	f001 f8e1 	bl	10015064 <__aeabi_fadd>
10013ea2:	6060      	str	r0, [r4, #4]
10013ea4:	2001      	movs	r0, #1
10013ea6:	4240      	negs	r0, r0
10013ea8:	e748      	b.n	10013d3c <__ieee754_rem_pio2f+0x104>
10013eaa:	2303      	movs	r3, #3
10013eac:	e72c      	b.n	10013d08 <__ieee754_rem_pio2f+0xd0>
10013eae:	4920      	ldr	r1, [pc, #128]	; (10013f30 <__ieee754_rem_pio2f+0x2f8>)
10013eb0:	f001 f8d8 	bl	10015064 <__aeabi_fadd>
10013eb4:	491f      	ldr	r1, [pc, #124]	; (10013f34 <__ieee754_rem_pio2f+0x2fc>)
10013eb6:	1c05      	adds	r5, r0, #0
10013eb8:	f001 f8d4 	bl	10015064 <__aeabi_fadd>
10013ebc:	1c01      	adds	r1, r0, #0
10013ebe:	6020      	str	r0, [r4, #0]
10013ec0:	1c28      	adds	r0, r5, #0
10013ec2:	f001 fd23 	bl	1001590c <__aeabi_fsub>
10013ec6:	491b      	ldr	r1, [pc, #108]	; (10013f34 <__ieee754_rem_pio2f+0x2fc>)
10013ec8:	f001 f8cc 	bl	10015064 <__aeabi_fadd>
10013ecc:	6060      	str	r0, [r4, #4]
10013ece:	2001      	movs	r0, #1
10013ed0:	4240      	negs	r0, r0
10013ed2:	e733      	b.n	10013d3c <__ieee754_rem_pio2f+0x104>
10013ed4:	491a      	ldr	r1, [pc, #104]	; (10013f40 <__ieee754_rem_pio2f+0x308>)
10013ed6:	4648      	mov	r0, r9
10013ed8:	f001 fc04 	bl	100156e4 <__aeabi_fmul>
10013edc:	9b03      	ldr	r3, [sp, #12]
10013ede:	1c07      	adds	r7, r0, #0
10013ee0:	1c01      	adds	r1, r0, #0
10013ee2:	1c18      	adds	r0, r3, #0
10013ee4:	469a      	mov	sl, r3
10013ee6:	f001 fd11 	bl	1001590c <__aeabi_fsub>
10013eea:	1c01      	adds	r1, r0, #0
10013eec:	4680      	mov	r8, r0
10013eee:	4650      	mov	r0, sl
10013ef0:	f001 fd0c 	bl	1001590c <__aeabi_fsub>
10013ef4:	1c39      	adds	r1, r7, #0
10013ef6:	f001 fd09 	bl	1001590c <__aeabi_fsub>
10013efa:	4912      	ldr	r1, [pc, #72]	; (10013f44 <__ieee754_rem_pio2f+0x30c>)
10013efc:	1c07      	adds	r7, r0, #0
10013efe:	4648      	mov	r0, r9
10013f00:	f001 fbf0 	bl	100156e4 <__aeabi_fmul>
10013f04:	1c39      	adds	r1, r7, #0
10013f06:	f001 fd01 	bl	1001590c <__aeabi_fsub>
10013f0a:	4682      	mov	sl, r0
10013f0c:	e75e      	b.n	10013dcc <__ieee754_rem_pio2f+0x194>
10013f0e:	46c0      	nop			; (mov r8, r8)
10013f10:	3f490fd8 	.word	0x3f490fd8
10013f14:	4016cbe3 	.word	0x4016cbe3
10013f18:	3fc90f80 	.word	0x3fc90f80
10013f1c:	3fc90fd0 	.word	0x3fc90fd0
10013f20:	37354443 	.word	0x37354443
10013f24:	43490f80 	.word	0x43490f80
10013f28:	7f7fffff 	.word	0x7f7fffff
10013f2c:	10019f5c 	.word	0x10019f5c
10013f30:	37354400 	.word	0x37354400
10013f34:	2e85a308 	.word	0x2e85a308
10013f38:	3f22f984 	.word	0x3f22f984
10013f3c:	10019edc 	.word	0x10019edc
10013f40:	2e85a300 	.word	0x2e85a300
10013f44:	248d3132 	.word	0x248d3132

10013f48 <__kernel_cosf>:
10013f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013f4a:	464f      	mov	r7, r9
10013f4c:	4646      	mov	r6, r8
10013f4e:	4b58      	ldr	r3, [pc, #352]	; (100140b0 <__kernel_cosf+0x168>)
10013f50:	0045      	lsls	r5, r0, #1
10013f52:	b4c0      	push	{r6, r7}
10013f54:	086d      	lsrs	r5, r5, #1
10013f56:	1c06      	adds	r6, r0, #0
10013f58:	1c0f      	adds	r7, r1, #0
10013f5a:	429d      	cmp	r5, r3
10013f5c:	dc48      	bgt.n	10013ff0 <__kernel_cosf+0xa8>
10013f5e:	f001 fe73 	bl	10015c48 <__aeabi_f2iz>
10013f62:	2800      	cmp	r0, #0
10013f64:	d100      	bne.n	10013f68 <__kernel_cosf+0x20>
10013f66:	e09f      	b.n	100140a8 <__kernel_cosf+0x160>
10013f68:	1c31      	adds	r1, r6, #0
10013f6a:	1c30      	adds	r0, r6, #0
10013f6c:	f001 fbba 	bl	100156e4 <__aeabi_fmul>
10013f70:	4950      	ldr	r1, [pc, #320]	; (100140b4 <__kernel_cosf+0x16c>)
10013f72:	1c04      	adds	r4, r0, #0
10013f74:	f001 fbb6 	bl	100156e4 <__aeabi_fmul>
10013f78:	494f      	ldr	r1, [pc, #316]	; (100140b8 <__kernel_cosf+0x170>)
10013f7a:	f001 f873 	bl	10015064 <__aeabi_fadd>
10013f7e:	1c21      	adds	r1, r4, #0
10013f80:	f001 fbb0 	bl	100156e4 <__aeabi_fmul>
10013f84:	494d      	ldr	r1, [pc, #308]	; (100140bc <__kernel_cosf+0x174>)
10013f86:	f001 fcc1 	bl	1001590c <__aeabi_fsub>
10013f8a:	1c21      	adds	r1, r4, #0
10013f8c:	f001 fbaa 	bl	100156e4 <__aeabi_fmul>
10013f90:	494b      	ldr	r1, [pc, #300]	; (100140c0 <__kernel_cosf+0x178>)
10013f92:	f001 f867 	bl	10015064 <__aeabi_fadd>
10013f96:	1c21      	adds	r1, r4, #0
10013f98:	f001 fba4 	bl	100156e4 <__aeabi_fmul>
10013f9c:	4949      	ldr	r1, [pc, #292]	; (100140c4 <__kernel_cosf+0x17c>)
10013f9e:	f001 fcb5 	bl	1001590c <__aeabi_fsub>
10013fa2:	1c21      	adds	r1, r4, #0
10013fa4:	f001 fb9e 	bl	100156e4 <__aeabi_fmul>
10013fa8:	4947      	ldr	r1, [pc, #284]	; (100140c8 <__kernel_cosf+0x180>)
10013faa:	f001 f85b 	bl	10015064 <__aeabi_fadd>
10013fae:	1c21      	adds	r1, r4, #0
10013fb0:	f001 fb98 	bl	100156e4 <__aeabi_fmul>
10013fb4:	4680      	mov	r8, r0
10013fb6:	21fc      	movs	r1, #252	; 0xfc
10013fb8:	1c20      	adds	r0, r4, #0
10013fba:	0589      	lsls	r1, r1, #22
10013fbc:	f001 fb92 	bl	100156e4 <__aeabi_fmul>
10013fc0:	4641      	mov	r1, r8
10013fc2:	1c05      	adds	r5, r0, #0
10013fc4:	1c20      	adds	r0, r4, #0
10013fc6:	f001 fb8d 	bl	100156e4 <__aeabi_fmul>
10013fca:	1c39      	adds	r1, r7, #0
10013fcc:	1c04      	adds	r4, r0, #0
10013fce:	1c30      	adds	r0, r6, #0
10013fd0:	f001 fb88 	bl	100156e4 <__aeabi_fmul>
10013fd4:	1c01      	adds	r1, r0, #0
10013fd6:	1c20      	adds	r0, r4, #0
10013fd8:	f001 fc98 	bl	1001590c <__aeabi_fsub>
10013fdc:	1c01      	adds	r1, r0, #0
10013fde:	1c28      	adds	r0, r5, #0
10013fe0:	f001 fc94 	bl	1001590c <__aeabi_fsub>
10013fe4:	1c01      	adds	r1, r0, #0
10013fe6:	20fe      	movs	r0, #254	; 0xfe
10013fe8:	0580      	lsls	r0, r0, #22
10013fea:	f001 fc8f 	bl	1001590c <__aeabi_fsub>
10013fee:	e053      	b.n	10014098 <__kernel_cosf+0x150>
10013ff0:	1c01      	adds	r1, r0, #0
10013ff2:	f001 fb77 	bl	100156e4 <__aeabi_fmul>
10013ff6:	492f      	ldr	r1, [pc, #188]	; (100140b4 <__kernel_cosf+0x16c>)
10013ff8:	1c04      	adds	r4, r0, #0
10013ffa:	f001 fb73 	bl	100156e4 <__aeabi_fmul>
10013ffe:	492e      	ldr	r1, [pc, #184]	; (100140b8 <__kernel_cosf+0x170>)
10014000:	f001 f830 	bl	10015064 <__aeabi_fadd>
10014004:	1c21      	adds	r1, r4, #0
10014006:	f001 fb6d 	bl	100156e4 <__aeabi_fmul>
1001400a:	492c      	ldr	r1, [pc, #176]	; (100140bc <__kernel_cosf+0x174>)
1001400c:	f001 fc7e 	bl	1001590c <__aeabi_fsub>
10014010:	1c21      	adds	r1, r4, #0
10014012:	f001 fb67 	bl	100156e4 <__aeabi_fmul>
10014016:	492a      	ldr	r1, [pc, #168]	; (100140c0 <__kernel_cosf+0x178>)
10014018:	f001 f824 	bl	10015064 <__aeabi_fadd>
1001401c:	1c21      	adds	r1, r4, #0
1001401e:	f001 fb61 	bl	100156e4 <__aeabi_fmul>
10014022:	4928      	ldr	r1, [pc, #160]	; (100140c4 <__kernel_cosf+0x17c>)
10014024:	f001 fc72 	bl	1001590c <__aeabi_fsub>
10014028:	1c21      	adds	r1, r4, #0
1001402a:	f001 fb5b 	bl	100156e4 <__aeabi_fmul>
1001402e:	4926      	ldr	r1, [pc, #152]	; (100140c8 <__kernel_cosf+0x180>)
10014030:	f001 f818 	bl	10015064 <__aeabi_fadd>
10014034:	1c21      	adds	r1, r4, #0
10014036:	f001 fb55 	bl	100156e4 <__aeabi_fmul>
1001403a:	4b24      	ldr	r3, [pc, #144]	; (100140cc <__kernel_cosf+0x184>)
1001403c:	4680      	mov	r8, r0
1001403e:	429d      	cmp	r5, r3
10014040:	ddb9      	ble.n	10013fb6 <__kernel_cosf+0x6e>
10014042:	4b23      	ldr	r3, [pc, #140]	; (100140d0 <__kernel_cosf+0x188>)
10014044:	429d      	cmp	r5, r3
10014046:	dc2b      	bgt.n	100140a0 <__kernel_cosf+0x158>
10014048:	23ff      	movs	r3, #255	; 0xff
1001404a:	061b      	lsls	r3, r3, #24
1001404c:	469c      	mov	ip, r3
1001404e:	20fe      	movs	r0, #254	; 0xfe
10014050:	4465      	add	r5, ip
10014052:	1c29      	adds	r1, r5, #0
10014054:	0580      	lsls	r0, r0, #22
10014056:	f001 fc59 	bl	1001590c <__aeabi_fsub>
1001405a:	4681      	mov	r9, r0
1001405c:	21fc      	movs	r1, #252	; 0xfc
1001405e:	1c20      	adds	r0, r4, #0
10014060:	0589      	lsls	r1, r1, #22
10014062:	f001 fb3f 	bl	100156e4 <__aeabi_fmul>
10014066:	1c29      	adds	r1, r5, #0
10014068:	f001 fc50 	bl	1001590c <__aeabi_fsub>
1001406c:	4641      	mov	r1, r8
1001406e:	1c05      	adds	r5, r0, #0
10014070:	1c20      	adds	r0, r4, #0
10014072:	f001 fb37 	bl	100156e4 <__aeabi_fmul>
10014076:	1c39      	adds	r1, r7, #0
10014078:	1c04      	adds	r4, r0, #0
1001407a:	1c30      	adds	r0, r6, #0
1001407c:	f001 fb32 	bl	100156e4 <__aeabi_fmul>
10014080:	1c01      	adds	r1, r0, #0
10014082:	1c20      	adds	r0, r4, #0
10014084:	f001 fc42 	bl	1001590c <__aeabi_fsub>
10014088:	1c01      	adds	r1, r0, #0
1001408a:	1c28      	adds	r0, r5, #0
1001408c:	f001 fc3e 	bl	1001590c <__aeabi_fsub>
10014090:	1c01      	adds	r1, r0, #0
10014092:	4648      	mov	r0, r9
10014094:	f001 fc3a 	bl	1001590c <__aeabi_fsub>
10014098:	bc0c      	pop	{r2, r3}
1001409a:	4690      	mov	r8, r2
1001409c:	4699      	mov	r9, r3
1001409e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100140a0:	4b0c      	ldr	r3, [pc, #48]	; (100140d4 <__kernel_cosf+0x18c>)
100140a2:	4d0d      	ldr	r5, [pc, #52]	; (100140d8 <__kernel_cosf+0x190>)
100140a4:	4699      	mov	r9, r3
100140a6:	e7d9      	b.n	1001405c <__kernel_cosf+0x114>
100140a8:	20fe      	movs	r0, #254	; 0xfe
100140aa:	0580      	lsls	r0, r0, #22
100140ac:	e7f4      	b.n	10014098 <__kernel_cosf+0x150>
100140ae:	46c0      	nop			; (mov r8, r8)
100140b0:	31ffffff 	.word	0x31ffffff
100140b4:	ad47d74e 	.word	0xad47d74e
100140b8:	310f74f6 	.word	0x310f74f6
100140bc:	3493f27c 	.word	0x3493f27c
100140c0:	37d00d01 	.word	0x37d00d01
100140c4:	3ab60b61 	.word	0x3ab60b61
100140c8:	3d2aaaab 	.word	0x3d2aaaab
100140cc:	3e999999 	.word	0x3e999999
100140d0:	3f480000 	.word	0x3f480000
100140d4:	3f380000 	.word	0x3f380000
100140d8:	3e900000 	.word	0x3e900000

100140dc <__kernel_rem_pio2f>:
100140dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100140de:	465f      	mov	r7, fp
100140e0:	4656      	mov	r6, sl
100140e2:	464d      	mov	r5, r9
100140e4:	4644      	mov	r4, r8
100140e6:	b4f0      	push	{r4, r5, r6, r7}
100140e8:	b0dd      	sub	sp, #372	; 0x174
100140ea:	469b      	mov	fp, r3
100140ec:	9b66      	ldr	r3, [sp, #408]	; 0x198
100140ee:	9106      	str	r1, [sp, #24]
100140f0:	0099      	lsls	r1, r3, #2
100140f2:	4bca      	ldr	r3, [pc, #808]	; (1001441c <__kernel_rem_pio2f+0x340>)
100140f4:	9000      	str	r0, [sp, #0]
100140f6:	58cb      	ldr	r3, [r1, r3]
100140f8:	2007      	movs	r0, #7
100140fa:	001c      	movs	r4, r3
100140fc:	9305      	str	r3, [sp, #20]
100140fe:	2301      	movs	r3, #1
10014100:	425b      	negs	r3, r3
10014102:	445b      	add	r3, fp
10014104:	4699      	mov	r9, r3
10014106:	1ed3      	subs	r3, r2, #3
10014108:	17d9      	asrs	r1, r3, #31
1001410a:	4001      	ands	r1, r0
1001410c:	18cb      	adds	r3, r1, r3
1001410e:	10db      	asrs	r3, r3, #3
10014110:	0019      	movs	r1, r3
10014112:	43db      	mvns	r3, r3
10014114:	17db      	asrs	r3, r3, #31
10014116:	4019      	ands	r1, r3
10014118:	000b      	movs	r3, r1
1001411a:	3301      	adds	r3, #1
1001411c:	930a      	str	r3, [sp, #40]	; 0x28
1001411e:	00db      	lsls	r3, r3, #3
10014120:	1ad3      	subs	r3, r2, r3
10014122:	464a      	mov	r2, r9
10014124:	9108      	str	r1, [sp, #32]
10014126:	9302      	str	r3, [sp, #8]
10014128:	1a8e      	subs	r6, r1, r2
1001412a:	18a7      	adds	r7, r4, r2
1001412c:	d419      	bmi.n	10014162 <__kernel_rem_pio2f+0x86>
1001412e:	9a67      	ldr	r2, [sp, #412]	; 0x19c
10014130:	3701      	adds	r7, #1
10014132:	4690      	mov	r8, r2
10014134:	00b3      	lsls	r3, r6, #2
10014136:	00bf      	lsls	r7, r7, #2
10014138:	4498      	add	r8, r3
1001413a:	2400      	movs	r4, #0
1001413c:	ad20      	add	r5, sp, #128	; 0x80
1001413e:	e008      	b.n	10014152 <__kernel_rem_pio2f+0x76>
10014140:	4643      	mov	r3, r8
10014142:	5918      	ldr	r0, [r3, r4]
10014144:	f001 fda2 	bl	10015c8c <__aeabi_i2f>
10014148:	5128      	str	r0, [r5, r4]
1001414a:	3404      	adds	r4, #4
1001414c:	3601      	adds	r6, #1
1001414e:	42bc      	cmp	r4, r7
10014150:	d007      	beq.n	10014162 <__kernel_rem_pio2f+0x86>
10014152:	2e00      	cmp	r6, #0
10014154:	daf4      	bge.n	10014140 <__kernel_rem_pio2f+0x64>
10014156:	2000      	movs	r0, #0
10014158:	5128      	str	r0, [r5, r4]
1001415a:	3404      	adds	r4, #4
1001415c:	3601      	adds	r6, #1
1001415e:	42bc      	cmp	r4, r7
10014160:	d1f7      	bne.n	10014152 <__kernel_rem_pio2f+0x76>
10014162:	9b05      	ldr	r3, [sp, #20]
10014164:	2b00      	cmp	r3, #0
10014166:	da00      	bge.n	1001416a <__kernel_rem_pio2f+0x8e>
10014168:	e33d      	b.n	100147e6 <__kernel_rem_pio2f+0x70a>
1001416a:	9b05      	ldr	r3, [sp, #20]
1001416c:	3301      	adds	r3, #1
1001416e:	009b      	lsls	r3, r3, #2
10014170:	469a      	mov	sl, r3
10014172:	465b      	mov	r3, fp
10014174:	009b      	lsls	r3, r3, #2
10014176:	469b      	mov	fp, r3
10014178:	9b00      	ldr	r3, [sp, #0]
1001417a:	445b      	add	r3, fp
1001417c:	001f      	movs	r7, r3
1001417e:	2300      	movs	r3, #0
10014180:	4698      	mov	r8, r3
10014182:	ab48      	add	r3, sp, #288	; 0x120
10014184:	9304      	str	r3, [sp, #16]
10014186:	465b      	mov	r3, fp
10014188:	3b04      	subs	r3, #4
1001418a:	9301      	str	r3, [sp, #4]
1001418c:	464b      	mov	r3, r9
1001418e:	2b00      	cmp	r3, #0
10014190:	da00      	bge.n	10014194 <__kernel_rem_pio2f+0xb8>
10014192:	e1b6      	b.n	10014502 <__kernel_rem_pio2f+0x426>
10014194:	9b01      	ldr	r3, [sp, #4]
10014196:	2600      	movs	r6, #0
10014198:	4443      	add	r3, r8
1001419a:	001c      	movs	r4, r3
1001419c:	ab20      	add	r3, sp, #128	; 0x80
1001419e:	469c      	mov	ip, r3
100141a0:	9d00      	ldr	r5, [sp, #0]
100141a2:	4464      	add	r4, ip
100141a4:	6821      	ldr	r1, [r4, #0]
100141a6:	cd01      	ldmia	r5!, {r0}
100141a8:	f001 fa9c 	bl	100156e4 <__aeabi_fmul>
100141ac:	1c01      	adds	r1, r0, #0
100141ae:	1c30      	adds	r0, r6, #0
100141b0:	f000 ff58 	bl	10015064 <__aeabi_fadd>
100141b4:	3c04      	subs	r4, #4
100141b6:	1c06      	adds	r6, r0, #0
100141b8:	42bd      	cmp	r5, r7
100141ba:	d1f3      	bne.n	100141a4 <__kernel_rem_pio2f+0xc8>
100141bc:	4642      	mov	r2, r8
100141be:	9b04      	ldr	r3, [sp, #16]
100141c0:	509e      	str	r6, [r3, r2]
100141c2:	2304      	movs	r3, #4
100141c4:	469c      	mov	ip, r3
100141c6:	44e0      	add	r8, ip
100141c8:	45d0      	cmp	r8, sl
100141ca:	d1df      	bne.n	1001418c <__kernel_rem_pio2f+0xb0>
100141cc:	9a05      	ldr	r2, [sp, #20]
100141ce:	4994      	ldr	r1, [pc, #592]	; (10014420 <__kernel_rem_pio2f+0x344>)
100141d0:	0013      	movs	r3, r2
100141d2:	468c      	mov	ip, r1
100141d4:	4463      	add	r3, ip
100141d6:	009b      	lsls	r3, r3, #2
100141d8:	a80c      	add	r0, sp, #48	; 0x30
100141da:	0019      	movs	r1, r3
100141dc:	4684      	mov	ip, r0
100141de:	4461      	add	r1, ip
100141e0:	9107      	str	r1, [sp, #28]
100141e2:	3304      	adds	r3, #4
100141e4:	9900      	ldr	r1, [sp, #0]
100141e6:	4463      	add	r3, ip
100141e8:	4459      	add	r1, fp
100141ea:	9309      	str	r3, [sp, #36]	; 0x24
100141ec:	464b      	mov	r3, r9
100141ee:	000f      	movs	r7, r1
100141f0:	4693      	mov	fp, r2
100141f2:	9301      	str	r3, [sp, #4]
100141f4:	465b      	mov	r3, fp
100141f6:	009b      	lsls	r3, r3, #2
100141f8:	469a      	mov	sl, r3
100141fa:	4652      	mov	r2, sl
100141fc:	9b04      	ldr	r3, [sp, #16]
100141fe:	589d      	ldr	r5, [r3, r2]
10014200:	465a      	mov	r2, fp
10014202:	2a00      	cmp	r2, #0
10014204:	dd26      	ble.n	10014254 <__kernel_rem_pio2f+0x178>
10014206:	aa0c      	add	r2, sp, #48	; 0x30
10014208:	469c      	mov	ip, r3
1001420a:	46b8      	mov	r8, r7
1001420c:	0017      	movs	r7, r2
1001420e:	4c85      	ldr	r4, [pc, #532]	; (10014424 <__kernel_rem_pio2f+0x348>)
10014210:	445c      	add	r4, fp
10014212:	00a4      	lsls	r4, r4, #2
10014214:	4464      	add	r4, ip
10014216:	21ee      	movs	r1, #238	; 0xee
10014218:	1c28      	adds	r0, r5, #0
1001421a:	0589      	lsls	r1, r1, #22
1001421c:	f001 fa62 	bl	100156e4 <__aeabi_fmul>
10014220:	f001 fd12 	bl	10015c48 <__aeabi_f2iz>
10014224:	f001 fd32 	bl	10015c8c <__aeabi_i2f>
10014228:	2187      	movs	r1, #135	; 0x87
1001422a:	05c9      	lsls	r1, r1, #23
1001422c:	1c06      	adds	r6, r0, #0
1001422e:	f001 fa59 	bl	100156e4 <__aeabi_fmul>
10014232:	1c01      	adds	r1, r0, #0
10014234:	1c28      	adds	r0, r5, #0
10014236:	f001 fb69 	bl	1001590c <__aeabi_fsub>
1001423a:	f001 fd05 	bl	10015c48 <__aeabi_f2iz>
1001423e:	6821      	ldr	r1, [r4, #0]
10014240:	c701      	stmia	r7!, {r0}
10014242:	1c30      	adds	r0, r6, #0
10014244:	f000 ff0e 	bl	10015064 <__aeabi_fadd>
10014248:	3c04      	subs	r4, #4
1001424a:	ab47      	add	r3, sp, #284	; 0x11c
1001424c:	1c05      	adds	r5, r0, #0
1001424e:	429c      	cmp	r4, r3
10014250:	d1e1      	bne.n	10014216 <__kernel_rem_pio2f+0x13a>
10014252:	4647      	mov	r7, r8
10014254:	9b02      	ldr	r3, [sp, #8]
10014256:	1c28      	adds	r0, r5, #0
10014258:	0019      	movs	r1, r3
1001425a:	4698      	mov	r8, r3
1001425c:	f000 fb98 	bl	10014990 <scalbnf>
10014260:	21f8      	movs	r1, #248	; 0xf8
10014262:	0589      	lsls	r1, r1, #22
10014264:	1c04      	adds	r4, r0, #0
10014266:	f001 fa3d 	bl	100156e4 <__aeabi_fmul>
1001426a:	f000 fb43 	bl	100148f4 <floorf>
1001426e:	2182      	movs	r1, #130	; 0x82
10014270:	05c9      	lsls	r1, r1, #23
10014272:	f001 fa37 	bl	100156e4 <__aeabi_fmul>
10014276:	1c01      	adds	r1, r0, #0
10014278:	1c20      	adds	r0, r4, #0
1001427a:	f001 fb47 	bl	1001590c <__aeabi_fsub>
1001427e:	1c04      	adds	r4, r0, #0
10014280:	f001 fce2 	bl	10015c48 <__aeabi_f2iz>
10014284:	0006      	movs	r6, r0
10014286:	f001 fd01 	bl	10015c8c <__aeabi_i2f>
1001428a:	1c01      	adds	r1, r0, #0
1001428c:	1c20      	adds	r0, r4, #0
1001428e:	f001 fb3d 	bl	1001590c <__aeabi_fsub>
10014292:	4644      	mov	r4, r8
10014294:	1c05      	adds	r5, r0, #0
10014296:	2c00      	cmp	r4, #0
10014298:	dc00      	bgt.n	1001429c <__kernel_rem_pio2f+0x1c0>
1001429a:	e112      	b.n	100144c2 <__kernel_rem_pio2f+0x3e6>
1001429c:	465b      	mov	r3, fp
1001429e:	1e5a      	subs	r2, r3, #1
100142a0:	0092      	lsls	r2, r2, #2
100142a2:	ab0c      	add	r3, sp, #48	; 0x30
100142a4:	589b      	ldr	r3, [r3, r2]
100142a6:	2008      	movs	r0, #8
100142a8:	0019      	movs	r1, r3
100142aa:	1b00      	subs	r0, r0, r4
100142ac:	4101      	asrs	r1, r0
100142ae:	1876      	adds	r6, r6, r1
100142b0:	4081      	lsls	r1, r0
100142b2:	1a5b      	subs	r3, r3, r1
100142b4:	a90c      	add	r1, sp, #48	; 0x30
100142b6:	508b      	str	r3, [r1, r2]
100142b8:	2207      	movs	r2, #7
100142ba:	1b12      	subs	r2, r2, r4
100142bc:	4113      	asrs	r3, r2
100142be:	9303      	str	r3, [sp, #12]
100142c0:	9b03      	ldr	r3, [sp, #12]
100142c2:	2b00      	cmp	r3, #0
100142c4:	dd3a      	ble.n	1001433c <__kernel_rem_pio2f+0x260>
100142c6:	465b      	mov	r3, fp
100142c8:	3601      	adds	r6, #1
100142ca:	2b00      	cmp	r3, #0
100142cc:	dc00      	bgt.n	100142d0 <__kernel_rem_pio2f+0x1f4>
100142ce:	e261      	b.n	10014794 <__kernel_rem_pio2f+0x6b8>
100142d0:	2280      	movs	r2, #128	; 0x80
100142d2:	0052      	lsls	r2, r2, #1
100142d4:	46a8      	mov	r8, r5
100142d6:	ab0c      	add	r3, sp, #48	; 0x30
100142d8:	2100      	movs	r1, #0
100142da:	2400      	movs	r4, #0
100142dc:	20ff      	movs	r0, #255	; 0xff
100142de:	4694      	mov	ip, r2
100142e0:	465d      	mov	r5, fp
100142e2:	e009      	b.n	100142f8 <__kernel_rem_pio2f+0x21c>
100142e4:	2a00      	cmp	r2, #0
100142e6:	d003      	beq.n	100142f0 <__kernel_rem_pio2f+0x214>
100142e8:	4664      	mov	r4, ip
100142ea:	1aa2      	subs	r2, r4, r2
100142ec:	2401      	movs	r4, #1
100142ee:	601a      	str	r2, [r3, #0]
100142f0:	3101      	adds	r1, #1
100142f2:	3304      	adds	r3, #4
100142f4:	428d      	cmp	r5, r1
100142f6:	dd09      	ble.n	1001430c <__kernel_rem_pio2f+0x230>
100142f8:	681a      	ldr	r2, [r3, #0]
100142fa:	2c00      	cmp	r4, #0
100142fc:	d0f2      	beq.n	100142e4 <__kernel_rem_pio2f+0x208>
100142fe:	1a82      	subs	r2, r0, r2
10014300:	3101      	adds	r1, #1
10014302:	601a      	str	r2, [r3, #0]
10014304:	2401      	movs	r4, #1
10014306:	3304      	adds	r3, #4
10014308:	428d      	cmp	r5, r1
1001430a:	dcf5      	bgt.n	100142f8 <__kernel_rem_pio2f+0x21c>
1001430c:	46ab      	mov	fp, r5
1001430e:	4645      	mov	r5, r8
10014310:	9b02      	ldr	r3, [sp, #8]
10014312:	2b00      	cmp	r3, #0
10014314:	dd0f      	ble.n	10014336 <__kernel_rem_pio2f+0x25a>
10014316:	2b01      	cmp	r3, #1
10014318:	d100      	bne.n	1001431c <__kernel_rem_pio2f+0x240>
1001431a:	e0dd      	b.n	100144d8 <__kernel_rem_pio2f+0x3fc>
1001431c:	2b02      	cmp	r3, #2
1001431e:	d10a      	bne.n	10014336 <__kernel_rem_pio2f+0x25a>
10014320:	465b      	mov	r3, fp
10014322:	3b01      	subs	r3, #1
10014324:	009b      	lsls	r3, r3, #2
10014326:	aa0c      	add	r2, sp, #48	; 0x30
10014328:	58d2      	ldr	r2, [r2, r3]
1001432a:	920b      	str	r2, [sp, #44]	; 0x2c
1001432c:	223f      	movs	r2, #63	; 0x3f
1001432e:	990b      	ldr	r1, [sp, #44]	; 0x2c
10014330:	400a      	ands	r2, r1
10014332:	a90c      	add	r1, sp, #48	; 0x30
10014334:	50ca      	str	r2, [r1, r3]
10014336:	9b03      	ldr	r3, [sp, #12]
10014338:	2b02      	cmp	r3, #2
1001433a:	d075      	beq.n	10014428 <__kernel_rem_pio2f+0x34c>
1001433c:	2100      	movs	r1, #0
1001433e:	1c28      	adds	r0, r5, #0
10014340:	f000 fd58 	bl	10014df4 <__aeabi_fcmpeq>
10014344:	2800      	cmp	r0, #0
10014346:	d100      	bne.n	1001434a <__kernel_rem_pio2f+0x26e>
10014348:	e088      	b.n	1001445c <__kernel_rem_pio2f+0x380>
1001434a:	465b      	mov	r3, fp
1001434c:	1e59      	subs	r1, r3, #1
1001434e:	9b05      	ldr	r3, [sp, #20]
10014350:	428b      	cmp	r3, r1
10014352:	dc0f      	bgt.n	10014374 <__kernel_rem_pio2f+0x298>
10014354:	aa0c      	add	r2, sp, #48	; 0x30
10014356:	4694      	mov	ip, r2
10014358:	2200      	movs	r2, #0
1001435a:	4b32      	ldr	r3, [pc, #200]	; (10014424 <__kernel_rem_pio2f+0x348>)
1001435c:	9809      	ldr	r0, [sp, #36]	; 0x24
1001435e:	445b      	add	r3, fp
10014360:	009b      	lsls	r3, r3, #2
10014362:	4463      	add	r3, ip
10014364:	681c      	ldr	r4, [r3, #0]
10014366:	3b04      	subs	r3, #4
10014368:	4322      	orrs	r2, r4
1001436a:	4283      	cmp	r3, r0
1001436c:	d1fa      	bne.n	10014364 <__kernel_rem_pio2f+0x288>
1001436e:	2a00      	cmp	r2, #0
10014370:	d000      	beq.n	10014374 <__kernel_rem_pio2f+0x298>
10014372:	e0df      	b.n	10014534 <__kernel_rem_pio2f+0x458>
10014374:	9b05      	ldr	r3, [sp, #20]
10014376:	aa0c      	add	r2, sp, #48	; 0x30
10014378:	3b01      	subs	r3, #1
1001437a:	009b      	lsls	r3, r3, #2
1001437c:	58d3      	ldr	r3, [r2, r3]
1001437e:	2b00      	cmp	r3, #0
10014380:	d000      	beq.n	10014384 <__kernel_rem_pio2f+0x2a8>
10014382:	e205      	b.n	10014790 <__kernel_rem_pio2f+0x6b4>
10014384:	2201      	movs	r2, #1
10014386:	9b07      	ldr	r3, [sp, #28]
10014388:	3b04      	subs	r3, #4
1001438a:	6859      	ldr	r1, [r3, #4]
1001438c:	3201      	adds	r2, #1
1001438e:	2900      	cmp	r1, #0
10014390:	d0fa      	beq.n	10014388 <__kernel_rem_pio2f+0x2ac>
10014392:	465b      	mov	r3, fp
10014394:	445a      	add	r2, fp
10014396:	3301      	adds	r3, #1
10014398:	9203      	str	r2, [sp, #12]
1001439a:	4293      	cmp	r3, r2
1001439c:	dc39      	bgt.n	10014412 <__kernel_rem_pio2f+0x336>
1001439e:	9967      	ldr	r1, [sp, #412]	; 0x19c
100143a0:	9a08      	ldr	r2, [sp, #32]
100143a2:	4689      	mov	r9, r1
100143a4:	9904      	ldr	r1, [sp, #16]
100143a6:	189a      	adds	r2, r3, r2
100143a8:	468a      	mov	sl, r1
100143aa:	0092      	lsls	r2, r2, #2
100143ac:	4491      	add	r9, r2
100143ae:	009a      	lsls	r2, r3, #2
100143b0:	4492      	add	sl, r2
100143b2:	9a01      	ldr	r2, [sp, #4]
100143b4:	4694      	mov	ip, r2
100143b6:	aa20      	add	r2, sp, #128	; 0x80
100143b8:	4690      	mov	r8, r2
100143ba:	9a03      	ldr	r2, [sp, #12]
100143bc:	4463      	add	r3, ip
100143be:	4694      	mov	ip, r2
100143c0:	9a67      	ldr	r2, [sp, #412]	; 0x19c
100143c2:	009b      	lsls	r3, r3, #2
100143c4:	4693      	mov	fp, r2
100143c6:	4498      	add	r8, r3
100143c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100143ca:	4463      	add	r3, ip
100143cc:	009b      	lsls	r3, r3, #2
100143ce:	449b      	add	fp, r3
100143d0:	464b      	mov	r3, r9
100143d2:	6818      	ldr	r0, [r3, #0]
100143d4:	f001 fc5a 	bl	10015c8c <__aeabi_i2f>
100143d8:	4643      	mov	r3, r8
100143da:	6018      	str	r0, [r3, #0]
100143dc:	9b01      	ldr	r3, [sp, #4]
100143de:	2b00      	cmp	r3, #0
100143e0:	db1a      	blt.n	10014418 <__kernel_rem_pio2f+0x33c>
100143e2:	4644      	mov	r4, r8
100143e4:	2600      	movs	r6, #0
100143e6:	9d00      	ldr	r5, [sp, #0]
100143e8:	6821      	ldr	r1, [r4, #0]
100143ea:	cd01      	ldmia	r5!, {r0}
100143ec:	f001 f97a 	bl	100156e4 <__aeabi_fmul>
100143f0:	1c01      	adds	r1, r0, #0
100143f2:	1c30      	adds	r0, r6, #0
100143f4:	f000 fe36 	bl	10015064 <__aeabi_fadd>
100143f8:	3c04      	subs	r4, #4
100143fa:	1c06      	adds	r6, r0, #0
100143fc:	42bd      	cmp	r5, r7
100143fe:	d1f3      	bne.n	100143e8 <__kernel_rem_pio2f+0x30c>
10014400:	4653      	mov	r3, sl
10014402:	c340      	stmia	r3!, {r6}
10014404:	469a      	mov	sl, r3
10014406:	2304      	movs	r3, #4
10014408:	469c      	mov	ip, r3
1001440a:	44e1      	add	r9, ip
1001440c:	44e0      	add	r8, ip
1001440e:	45d9      	cmp	r9, fp
10014410:	d1de      	bne.n	100143d0 <__kernel_rem_pio2f+0x2f4>
10014412:	9b03      	ldr	r3, [sp, #12]
10014414:	469b      	mov	fp, r3
10014416:	e6ed      	b.n	100141f4 <__kernel_rem_pio2f+0x118>
10014418:	2600      	movs	r6, #0
1001441a:	e7f1      	b.n	10014400 <__kernel_rem_pio2f+0x324>
1001441c:	1001a274 	.word	0x1001a274
10014420:	3ffffffe 	.word	0x3ffffffe
10014424:	3fffffff 	.word	0x3fffffff
10014428:	20fe      	movs	r0, #254	; 0xfe
1001442a:	1c29      	adds	r1, r5, #0
1001442c:	0580      	lsls	r0, r0, #22
1001442e:	f001 fa6d 	bl	1001590c <__aeabi_fsub>
10014432:	1c05      	adds	r5, r0, #0
10014434:	2c00      	cmp	r4, #0
10014436:	d100      	bne.n	1001443a <__kernel_rem_pio2f+0x35e>
10014438:	e780      	b.n	1001433c <__kernel_rem_pio2f+0x260>
1001443a:	20fe      	movs	r0, #254	; 0xfe
1001443c:	9902      	ldr	r1, [sp, #8]
1001443e:	0580      	lsls	r0, r0, #22
10014440:	f000 faa6 	bl	10014990 <scalbnf>
10014444:	1c01      	adds	r1, r0, #0
10014446:	1c28      	adds	r0, r5, #0
10014448:	f001 fa60 	bl	1001590c <__aeabi_fsub>
1001444c:	1c05      	adds	r5, r0, #0
1001444e:	2100      	movs	r1, #0
10014450:	1c28      	adds	r0, r5, #0
10014452:	f000 fccf 	bl	10014df4 <__aeabi_fcmpeq>
10014456:	2800      	cmp	r0, #0
10014458:	d000      	beq.n	1001445c <__kernel_rem_pio2f+0x380>
1001445a:	e776      	b.n	1001434a <__kernel_rem_pio2f+0x26e>
1001445c:	9601      	str	r6, [sp, #4]
1001445e:	9e02      	ldr	r6, [sp, #8]
10014460:	1c28      	adds	r0, r5, #0
10014462:	4271      	negs	r1, r6
10014464:	f000 fa94 	bl	10014990 <scalbnf>
10014468:	2187      	movs	r1, #135	; 0x87
1001446a:	05c9      	lsls	r1, r1, #23
1001446c:	1c05      	adds	r5, r0, #0
1001446e:	f000 fce5 	bl	10014e3c <__aeabi_fcmpge>
10014472:	2800      	cmp	r0, #0
10014474:	d100      	bne.n	10014478 <__kernel_rem_pio2f+0x39c>
10014476:	e199      	b.n	100147ac <__kernel_rem_pio2f+0x6d0>
10014478:	21ee      	movs	r1, #238	; 0xee
1001447a:	1c28      	adds	r0, r5, #0
1001447c:	0589      	lsls	r1, r1, #22
1001447e:	f001 f931 	bl	100156e4 <__aeabi_fmul>
10014482:	f001 fbe1 	bl	10015c48 <__aeabi_f2iz>
10014486:	f001 fc01 	bl	10015c8c <__aeabi_i2f>
1001448a:	2187      	movs	r1, #135	; 0x87
1001448c:	05c9      	lsls	r1, r1, #23
1001448e:	1c04      	adds	r4, r0, #0
10014490:	f001 f928 	bl	100156e4 <__aeabi_fmul>
10014494:	1c01      	adds	r1, r0, #0
10014496:	1c28      	adds	r0, r5, #0
10014498:	f001 fa38 	bl	1001590c <__aeabi_fsub>
1001449c:	f001 fbd4 	bl	10015c48 <__aeabi_f2iz>
100144a0:	4652      	mov	r2, sl
100144a2:	ab0c      	add	r3, sp, #48	; 0x30
100144a4:	5098      	str	r0, [r3, r2]
100144a6:	2301      	movs	r3, #1
100144a8:	445b      	add	r3, fp
100144aa:	469a      	mov	sl, r3
100144ac:	0033      	movs	r3, r6
100144ae:	3308      	adds	r3, #8
100144b0:	9302      	str	r3, [sp, #8]
100144b2:	4653      	mov	r3, sl
100144b4:	1c20      	adds	r0, r4, #0
100144b6:	009d      	lsls	r5, r3, #2
100144b8:	f001 fbc6 	bl	10015c48 <__aeabi_f2iz>
100144bc:	ab0c      	add	r3, sp, #48	; 0x30
100144be:	5158      	str	r0, [r3, r5]
100144c0:	e052      	b.n	10014568 <__kernel_rem_pio2f+0x48c>
100144c2:	9b02      	ldr	r3, [sp, #8]
100144c4:	2b00      	cmp	r3, #0
100144c6:	d113      	bne.n	100144f0 <__kernel_rem_pio2f+0x414>
100144c8:	465b      	mov	r3, fp
100144ca:	3b01      	subs	r3, #1
100144cc:	009b      	lsls	r3, r3, #2
100144ce:	aa0c      	add	r2, sp, #48	; 0x30
100144d0:	58d3      	ldr	r3, [r2, r3]
100144d2:	121b      	asrs	r3, r3, #8
100144d4:	9303      	str	r3, [sp, #12]
100144d6:	e6f3      	b.n	100142c0 <__kernel_rem_pio2f+0x1e4>
100144d8:	465b      	mov	r3, fp
100144da:	3b01      	subs	r3, #1
100144dc:	009b      	lsls	r3, r3, #2
100144de:	aa0c      	add	r2, sp, #48	; 0x30
100144e0:	58d2      	ldr	r2, [r2, r3]
100144e2:	920b      	str	r2, [sp, #44]	; 0x2c
100144e4:	227f      	movs	r2, #127	; 0x7f
100144e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
100144e8:	400a      	ands	r2, r1
100144ea:	a90c      	add	r1, sp, #48	; 0x30
100144ec:	50ca      	str	r2, [r1, r3]
100144ee:	e722      	b.n	10014336 <__kernel_rem_pio2f+0x25a>
100144f0:	21fc      	movs	r1, #252	; 0xfc
100144f2:	0589      	lsls	r1, r1, #22
100144f4:	f000 fca2 	bl	10014e3c <__aeabi_fcmpge>
100144f8:	2800      	cmp	r0, #0
100144fa:	d10d      	bne.n	10014518 <__kernel_rem_pio2f+0x43c>
100144fc:	2300      	movs	r3, #0
100144fe:	9303      	str	r3, [sp, #12]
10014500:	e71c      	b.n	1001433c <__kernel_rem_pio2f+0x260>
10014502:	4642      	mov	r2, r8
10014504:	2600      	movs	r6, #0
10014506:	9b04      	ldr	r3, [sp, #16]
10014508:	509e      	str	r6, [r3, r2]
1001450a:	2304      	movs	r3, #4
1001450c:	469c      	mov	ip, r3
1001450e:	44e0      	add	r8, ip
10014510:	45d0      	cmp	r8, sl
10014512:	d000      	beq.n	10014516 <__kernel_rem_pio2f+0x43a>
10014514:	e63a      	b.n	1001418c <__kernel_rem_pio2f+0xb0>
10014516:	e659      	b.n	100141cc <__kernel_rem_pio2f+0xf0>
10014518:	2302      	movs	r3, #2
1001451a:	9303      	str	r3, [sp, #12]
1001451c:	465b      	mov	r3, fp
1001451e:	3601      	adds	r6, #1
10014520:	2b00      	cmp	r3, #0
10014522:	dd00      	ble.n	10014526 <__kernel_rem_pio2f+0x44a>
10014524:	e6d4      	b.n	100142d0 <__kernel_rem_pio2f+0x1f4>
10014526:	20fe      	movs	r0, #254	; 0xfe
10014528:	1c29      	adds	r1, r5, #0
1001452a:	0580      	lsls	r0, r0, #22
1001452c:	f001 f9ee 	bl	1001590c <__aeabi_fsub>
10014530:	1c05      	adds	r5, r0, #0
10014532:	e703      	b.n	1001433c <__kernel_rem_pio2f+0x260>
10014534:	468a      	mov	sl, r1
10014536:	9b02      	ldr	r3, [sp, #8]
10014538:	aa0c      	add	r2, sp, #48	; 0x30
1001453a:	3b08      	subs	r3, #8
1001453c:	0019      	movs	r1, r3
1001453e:	9302      	str	r3, [sp, #8]
10014540:	4653      	mov	r3, sl
10014542:	009b      	lsls	r3, r3, #2
10014544:	58d3      	ldr	r3, [r2, r3]
10014546:	9601      	str	r6, [sp, #4]
10014548:	2b00      	cmp	r3, #0
1001454a:	d10d      	bne.n	10014568 <__kernel_rem_pio2f+0x48c>
1001454c:	4694      	mov	ip, r2
1001454e:	4652      	mov	r2, sl
10014550:	4ba8      	ldr	r3, [pc, #672]	; (100147f4 <__kernel_rem_pio2f+0x718>)
10014552:	4453      	add	r3, sl
10014554:	009b      	lsls	r3, r3, #2
10014556:	4463      	add	r3, ip
10014558:	3b04      	subs	r3, #4
1001455a:	6858      	ldr	r0, [r3, #4]
1001455c:	3a01      	subs	r2, #1
1001455e:	3908      	subs	r1, #8
10014560:	2800      	cmp	r0, #0
10014562:	d0f9      	beq.n	10014558 <__kernel_rem_pio2f+0x47c>
10014564:	4692      	mov	sl, r2
10014566:	9102      	str	r1, [sp, #8]
10014568:	20fe      	movs	r0, #254	; 0xfe
1001456a:	9902      	ldr	r1, [sp, #8]
1001456c:	0580      	lsls	r0, r0, #22
1001456e:	f000 fa0f 	bl	10014990 <scalbnf>
10014572:	4653      	mov	r3, sl
10014574:	1c06      	adds	r6, r0, #0
10014576:	2b00      	cmp	r3, #0
10014578:	da00      	bge.n	1001457c <__kernel_rem_pio2f+0x4a0>
1001457a:	e10d      	b.n	10014798 <__kernel_rem_pio2f+0x6bc>
1001457c:	3301      	adds	r3, #1
1001457e:	009b      	lsls	r3, r3, #2
10014580:	425b      	negs	r3, r3
10014582:	4698      	mov	r8, r3
10014584:	4653      	mov	r3, sl
10014586:	009b      	lsls	r3, r3, #2
10014588:	001a      	movs	r2, r3
1001458a:	001c      	movs	r4, r3
1001458c:	9300      	str	r3, [sp, #0]
1001458e:	ab0c      	add	r3, sp, #48	; 0x30
10014590:	469c      	mov	ip, r3
10014592:	9b04      	ldr	r3, [sp, #16]
10014594:	4464      	add	r4, ip
10014596:	001f      	movs	r7, r3
10014598:	4694      	mov	ip, r2
1001459a:	2500      	movs	r5, #0
1001459c:	4467      	add	r7, ip
1001459e:	5960      	ldr	r0, [r4, r5]
100145a0:	f001 fb74 	bl	10015c8c <__aeabi_i2f>
100145a4:	1c31      	adds	r1, r6, #0
100145a6:	f001 f89d 	bl	100156e4 <__aeabi_fmul>
100145aa:	21ee      	movs	r1, #238	; 0xee
100145ac:	5178      	str	r0, [r7, r5]
100145ae:	0589      	lsls	r1, r1, #22
100145b0:	1c30      	adds	r0, r6, #0
100145b2:	f001 f897 	bl	100156e4 <__aeabi_fmul>
100145b6:	3d04      	subs	r5, #4
100145b8:	1c06      	adds	r6, r0, #0
100145ba:	4545      	cmp	r5, r8
100145bc:	d1ef      	bne.n	1001459e <__kernel_rem_pio2f+0x4c2>
100145be:	2300      	movs	r3, #0
100145c0:	4698      	mov	r8, r3
100145c2:	ab34      	add	r3, sp, #208	; 0xd0
100145c4:	469b      	mov	fp, r3
100145c6:	4b8c      	ldr	r3, [pc, #560]	; (100147f8 <__kernel_rem_pio2f+0x71c>)
100145c8:	4699      	mov	r9, r3
100145ca:	4653      	mov	r3, sl
100145cc:	9302      	str	r3, [sp, #8]
100145ce:	9b05      	ldr	r3, [sp, #20]
100145d0:	469a      	mov	sl, r3
100145d2:	4653      	mov	r3, sl
100145d4:	2600      	movs	r6, #0
100145d6:	2b00      	cmp	r3, #0
100145d8:	db14      	blt.n	10014604 <__kernel_rem_pio2f+0x528>
100145da:	2500      	movs	r5, #0
100145dc:	4887      	ldr	r0, [pc, #540]	; (100147fc <__kernel_rem_pio2f+0x720>)
100145de:	2600      	movs	r6, #0
100145e0:	2400      	movs	r4, #0
100145e2:	e004      	b.n	100145ee <__kernel_rem_pio2f+0x512>
100145e4:	3504      	adds	r5, #4
100145e6:	45a0      	cmp	r8, r4
100145e8:	db0c      	blt.n	10014604 <__kernel_rem_pio2f+0x528>
100145ea:	464b      	mov	r3, r9
100145ec:	58e8      	ldr	r0, [r5, r3]
100145ee:	5979      	ldr	r1, [r7, r5]
100145f0:	f001 f878 	bl	100156e4 <__aeabi_fmul>
100145f4:	1c01      	adds	r1, r0, #0
100145f6:	1c30      	adds	r0, r6, #0
100145f8:	f000 fd34 	bl	10015064 <__aeabi_fadd>
100145fc:	3401      	adds	r4, #1
100145fe:	1c06      	adds	r6, r0, #0
10014600:	45a2      	cmp	sl, r4
10014602:	daef      	bge.n	100145e4 <__kernel_rem_pio2f+0x508>
10014604:	4643      	mov	r3, r8
10014606:	465a      	mov	r2, fp
10014608:	009b      	lsls	r3, r3, #2
1001460a:	50d6      	str	r6, [r2, r3]
1001460c:	2301      	movs	r3, #1
1001460e:	469c      	mov	ip, r3
10014610:	3f04      	subs	r7, #4
10014612:	ab47      	add	r3, sp, #284	; 0x11c
10014614:	44e0      	add	r8, ip
10014616:	42bb      	cmp	r3, r7
10014618:	d1db      	bne.n	100145d2 <__kernel_rem_pio2f+0x4f6>
1001461a:	9b02      	ldr	r3, [sp, #8]
1001461c:	469a      	mov	sl, r3
1001461e:	9b66      	ldr	r3, [sp, #408]	; 0x198
10014620:	2b02      	cmp	r3, #2
10014622:	dc59      	bgt.n	100146d8 <__kernel_rem_pio2f+0x5fc>
10014624:	2b00      	cmp	r3, #0
10014626:	dc1e      	bgt.n	10014666 <__kernel_rem_pio2f+0x58a>
10014628:	d113      	bne.n	10014652 <__kernel_rem_pio2f+0x576>
1001462a:	9b00      	ldr	r3, [sp, #0]
1001462c:	2000      	movs	r0, #0
1001462e:	445b      	add	r3, fp
10014630:	001c      	movs	r4, r3
10014632:	4655      	mov	r5, sl
10014634:	6821      	ldr	r1, [r4, #0]
10014636:	f000 fd15 	bl	10015064 <__aeabi_fadd>
1001463a:	3c04      	subs	r4, #4
1001463c:	3d01      	subs	r5, #1
1001463e:	d2f9      	bcs.n	10014634 <__kernel_rem_pio2f+0x558>
10014640:	9b03      	ldr	r3, [sp, #12]
10014642:	2b00      	cmp	r3, #0
10014644:	d003      	beq.n	1001464e <__kernel_rem_pio2f+0x572>
10014646:	2380      	movs	r3, #128	; 0x80
10014648:	061b      	lsls	r3, r3, #24
1001464a:	469c      	mov	ip, r3
1001464c:	4460      	add	r0, ip
1001464e:	9b06      	ldr	r3, [sp, #24]
10014650:	6018      	str	r0, [r3, #0]
10014652:	2007      	movs	r0, #7
10014654:	9b01      	ldr	r3, [sp, #4]
10014656:	4018      	ands	r0, r3
10014658:	b05d      	add	sp, #372	; 0x174
1001465a:	bc3c      	pop	{r2, r3, r4, r5}
1001465c:	4690      	mov	r8, r2
1001465e:	4699      	mov	r9, r3
10014660:	46a2      	mov	sl, r4
10014662:	46ab      	mov	fp, r5
10014664:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014666:	9b00      	ldr	r3, [sp, #0]
10014668:	2000      	movs	r0, #0
1001466a:	445b      	add	r3, fp
1001466c:	001c      	movs	r4, r3
1001466e:	ad33      	add	r5, sp, #204	; 0xcc
10014670:	6821      	ldr	r1, [r4, #0]
10014672:	3c04      	subs	r4, #4
10014674:	f000 fcf6 	bl	10015064 <__aeabi_fadd>
10014678:	42ac      	cmp	r4, r5
1001467a:	d1f9      	bne.n	10014670 <__kernel_rem_pio2f+0x594>
1001467c:	9b03      	ldr	r3, [sp, #12]
1001467e:	2b00      	cmp	r3, #0
10014680:	d01e      	beq.n	100146c0 <__kernel_rem_pio2f+0x5e4>
10014682:	2380      	movs	r3, #128	; 0x80
10014684:	9a06      	ldr	r2, [sp, #24]
10014686:	061b      	lsls	r3, r3, #24
10014688:	18c3      	adds	r3, r0, r3
1001468a:	6013      	str	r3, [r2, #0]
1001468c:	1c01      	adds	r1, r0, #0
1001468e:	9834      	ldr	r0, [sp, #208]	; 0xd0
10014690:	f001 f93c 	bl	1001590c <__aeabi_fsub>
10014694:	4653      	mov	r3, sl
10014696:	2b00      	cmp	r3, #0
10014698:	dd0b      	ble.n	100146b2 <__kernel_rem_pio2f+0x5d6>
1001469a:	2401      	movs	r4, #1
1001469c:	4656      	mov	r6, sl
1001469e:	ad35      	add	r5, sp, #212	; 0xd4
100146a0:	cd02      	ldmia	r5!, {r1}
100146a2:	3401      	adds	r4, #1
100146a4:	f000 fcde 	bl	10015064 <__aeabi_fadd>
100146a8:	42a6      	cmp	r6, r4
100146aa:	daf9      	bge.n	100146a0 <__kernel_rem_pio2f+0x5c4>
100146ac:	9b03      	ldr	r3, [sp, #12]
100146ae:	2b00      	cmp	r3, #0
100146b0:	d003      	beq.n	100146ba <__kernel_rem_pio2f+0x5de>
100146b2:	2380      	movs	r3, #128	; 0x80
100146b4:	061b      	lsls	r3, r3, #24
100146b6:	469c      	mov	ip, r3
100146b8:	4460      	add	r0, ip
100146ba:	9b06      	ldr	r3, [sp, #24]
100146bc:	6058      	str	r0, [r3, #4]
100146be:	e7c8      	b.n	10014652 <__kernel_rem_pio2f+0x576>
100146c0:	9b06      	ldr	r3, [sp, #24]
100146c2:	1c01      	adds	r1, r0, #0
100146c4:	6018      	str	r0, [r3, #0]
100146c6:	9834      	ldr	r0, [sp, #208]	; 0xd0
100146c8:	f001 f920 	bl	1001590c <__aeabi_fsub>
100146cc:	4652      	mov	r2, sl
100146ce:	2a00      	cmp	r2, #0
100146d0:	dce3      	bgt.n	1001469a <__kernel_rem_pio2f+0x5be>
100146d2:	9b06      	ldr	r3, [sp, #24]
100146d4:	6058      	str	r0, [r3, #4]
100146d6:	e7bc      	b.n	10014652 <__kernel_rem_pio2f+0x576>
100146d8:	9b66      	ldr	r3, [sp, #408]	; 0x198
100146da:	2b03      	cmp	r3, #3
100146dc:	d1b9      	bne.n	10014652 <__kernel_rem_pio2f+0x576>
100146de:	4653      	mov	r3, sl
100146e0:	2b00      	cmp	r3, #0
100146e2:	dd73      	ble.n	100147cc <__kernel_rem_pio2f+0x6f0>
100146e4:	465b      	mov	r3, fp
100146e6:	9a00      	ldr	r2, [sp, #0]
100146e8:	4c42      	ldr	r4, [pc, #264]	; (100147f4 <__kernel_rem_pio2f+0x718>)
100146ea:	589e      	ldr	r6, [r3, r2]
100146ec:	4454      	add	r4, sl
100146ee:	ab33      	add	r3, sp, #204	; 0xcc
100146f0:	4699      	mov	r9, r3
100146f2:	46a0      	mov	r8, r4
100146f4:	00a5      	lsls	r5, r4, #2
100146f6:	445d      	add	r5, fp
100146f8:	682c      	ldr	r4, [r5, #0]
100146fa:	1c31      	adds	r1, r6, #0
100146fc:	1c20      	adds	r0, r4, #0
100146fe:	f000 fcb1 	bl	10015064 <__aeabi_fadd>
10014702:	1c07      	adds	r7, r0, #0
10014704:	1c01      	adds	r1, r0, #0
10014706:	1c20      	adds	r0, r4, #0
10014708:	f001 f900 	bl	1001590c <__aeabi_fsub>
1001470c:	1c31      	adds	r1, r6, #0
1001470e:	f000 fca9 	bl	10015064 <__aeabi_fadd>
10014712:	3d04      	subs	r5, #4
10014714:	60a8      	str	r0, [r5, #8]
10014716:	606f      	str	r7, [r5, #4]
10014718:	1c3e      	adds	r6, r7, #0
1001471a:	45a9      	cmp	r9, r5
1001471c:	d1ec      	bne.n	100146f8 <__kernel_rem_pio2f+0x61c>
1001471e:	4653      	mov	r3, sl
10014720:	4644      	mov	r4, r8
10014722:	2b01      	cmp	r3, #1
10014724:	dd52      	ble.n	100147cc <__kernel_rem_pio2f+0x6f0>
10014726:	465b      	mov	r3, fp
10014728:	00a4      	lsls	r4, r4, #2
1001472a:	46a0      	mov	r8, r4
1001472c:	9a00      	ldr	r2, [sp, #0]
1001472e:	191d      	adds	r5, r3, r4
10014730:	589e      	ldr	r6, [r3, r2]
10014732:	682c      	ldr	r4, [r5, #0]
10014734:	1c30      	adds	r0, r6, #0
10014736:	1c21      	adds	r1, r4, #0
10014738:	f000 fc94 	bl	10015064 <__aeabi_fadd>
1001473c:	1c07      	adds	r7, r0, #0
1001473e:	1c01      	adds	r1, r0, #0
10014740:	1c20      	adds	r0, r4, #0
10014742:	f001 f8e3 	bl	1001590c <__aeabi_fsub>
10014746:	1c31      	adds	r1, r6, #0
10014748:	f000 fc8c 	bl	10015064 <__aeabi_fadd>
1001474c:	3d04      	subs	r5, #4
1001474e:	60a8      	str	r0, [r5, #8]
10014750:	606f      	str	r7, [r5, #4]
10014752:	1c3e      	adds	r6, r7, #0
10014754:	45ab      	cmp	fp, r5
10014756:	d1ec      	bne.n	10014732 <__kernel_rem_pio2f+0x656>
10014758:	4644      	mov	r4, r8
1001475a:	2000      	movs	r0, #0
1001475c:	3404      	adds	r4, #4
1001475e:	445c      	add	r4, fp
10014760:	ad35      	add	r5, sp, #212	; 0xd4
10014762:	6821      	ldr	r1, [r4, #0]
10014764:	3c04      	subs	r4, #4
10014766:	f000 fc7d 	bl	10015064 <__aeabi_fadd>
1001476a:	42a5      	cmp	r5, r4
1001476c:	d1f9      	bne.n	10014762 <__kernel_rem_pio2f+0x686>
1001476e:	9b03      	ldr	r3, [sp, #12]
10014770:	2b00      	cmp	r3, #0
10014772:	d02f      	beq.n	100147d4 <__kernel_rem_pio2f+0x6f8>
10014774:	2280      	movs	r2, #128	; 0x80
10014776:	0612      	lsls	r2, r2, #24
10014778:	4694      	mov	ip, r2
1001477a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
1001477c:	9a06      	ldr	r2, [sp, #24]
1001477e:	4463      	add	r3, ip
10014780:	6013      	str	r3, [r2, #0]
10014782:	465b      	mov	r3, fp
10014784:	685b      	ldr	r3, [r3, #4]
10014786:	4460      	add	r0, ip
10014788:	4463      	add	r3, ip
1001478a:	6053      	str	r3, [r2, #4]
1001478c:	6090      	str	r0, [r2, #8]
1001478e:	e760      	b.n	10014652 <__kernel_rem_pio2f+0x576>
10014790:	2201      	movs	r2, #1
10014792:	e5fe      	b.n	10014392 <__kernel_rem_pio2f+0x2b6>
10014794:	2400      	movs	r4, #0
10014796:	e5bb      	b.n	10014310 <__kernel_rem_pio2f+0x234>
10014798:	9b66      	ldr	r3, [sp, #408]	; 0x198
1001479a:	2b02      	cmp	r3, #2
1001479c:	dc10      	bgt.n	100147c0 <__kernel_rem_pio2f+0x6e4>
1001479e:	2b00      	cmp	r3, #0
100147a0:	dc0c      	bgt.n	100147bc <__kernel_rem_pio2f+0x6e0>
100147a2:	2000      	movs	r0, #0
100147a4:	2b00      	cmp	r3, #0
100147a6:	d100      	bne.n	100147aa <__kernel_rem_pio2f+0x6ce>
100147a8:	e74a      	b.n	10014640 <__kernel_rem_pio2f+0x564>
100147aa:	e752      	b.n	10014652 <__kernel_rem_pio2f+0x576>
100147ac:	1c28      	adds	r0, r5, #0
100147ae:	f001 fa4b 	bl	10015c48 <__aeabi_f2iz>
100147b2:	4652      	mov	r2, sl
100147b4:	ab0c      	add	r3, sp, #48	; 0x30
100147b6:	5098      	str	r0, [r3, r2]
100147b8:	46da      	mov	sl, fp
100147ba:	e6d5      	b.n	10014568 <__kernel_rem_pio2f+0x48c>
100147bc:	2000      	movs	r0, #0
100147be:	e75d      	b.n	1001467c <__kernel_rem_pio2f+0x5a0>
100147c0:	ab34      	add	r3, sp, #208	; 0xd0
100147c2:	469b      	mov	fp, r3
100147c4:	9b66      	ldr	r3, [sp, #408]	; 0x198
100147c6:	2b03      	cmp	r3, #3
100147c8:	d000      	beq.n	100147cc <__kernel_rem_pio2f+0x6f0>
100147ca:	e742      	b.n	10014652 <__kernel_rem_pio2f+0x576>
100147cc:	9b03      	ldr	r3, [sp, #12]
100147ce:	2000      	movs	r0, #0
100147d0:	2b00      	cmp	r3, #0
100147d2:	d1cf      	bne.n	10014774 <__kernel_rem_pio2f+0x698>
100147d4:	9b06      	ldr	r3, [sp, #24]
100147d6:	9a34      	ldr	r2, [sp, #208]	; 0xd0
100147d8:	6098      	str	r0, [r3, #8]
100147da:	601a      	str	r2, [r3, #0]
100147dc:	465a      	mov	r2, fp
100147de:	6852      	ldr	r2, [r2, #4]
100147e0:	9200      	str	r2, [sp, #0]
100147e2:	605a      	str	r2, [r3, #4]
100147e4:	e735      	b.n	10014652 <__kernel_rem_pio2f+0x576>
100147e6:	ab48      	add	r3, sp, #288	; 0x120
100147e8:	9304      	str	r3, [sp, #16]
100147ea:	465b      	mov	r3, fp
100147ec:	009b      	lsls	r3, r3, #2
100147ee:	469b      	mov	fp, r3
100147f0:	e4ec      	b.n	100141cc <__kernel_rem_pio2f+0xf0>
100147f2:	46c0      	nop			; (mov r8, r8)
100147f4:	3fffffff 	.word	0x3fffffff
100147f8:	1001a280 	.word	0x1001a280
100147fc:	3fc90000 	.word	0x3fc90000

10014800 <__kernel_sinf>:
10014800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10014802:	464f      	mov	r7, r9
10014804:	4646      	mov	r6, r8
10014806:	4690      	mov	r8, r2
10014808:	4a33      	ldr	r2, [pc, #204]	; (100148d8 <__kernel_sinf+0xd8>)
1001480a:	0043      	lsls	r3, r0, #1
1001480c:	b4c0      	push	{r6, r7}
1001480e:	1c04      	adds	r4, r0, #0
10014810:	1c0f      	adds	r7, r1, #0
10014812:	085b      	lsrs	r3, r3, #1
10014814:	4293      	cmp	r3, r2
10014816:	dc05      	bgt.n	10014824 <__kernel_sinf+0x24>
10014818:	f001 fa16 	bl	10015c48 <__aeabi_f2iz>
1001481c:	0003      	movs	r3, r0
1001481e:	1c20      	adds	r0, r4, #0
10014820:	2b00      	cmp	r3, #0
10014822:	d047      	beq.n	100148b4 <__kernel_sinf+0xb4>
10014824:	1c21      	adds	r1, r4, #0
10014826:	1c20      	adds	r0, r4, #0
10014828:	f000 ff5c 	bl	100156e4 <__aeabi_fmul>
1001482c:	1c05      	adds	r5, r0, #0
1001482e:	1c01      	adds	r1, r0, #0
10014830:	1c20      	adds	r0, r4, #0
10014832:	f000 ff57 	bl	100156e4 <__aeabi_fmul>
10014836:	4929      	ldr	r1, [pc, #164]	; (100148dc <__kernel_sinf+0xdc>)
10014838:	1c06      	adds	r6, r0, #0
1001483a:	1c28      	adds	r0, r5, #0
1001483c:	f000 ff52 	bl	100156e4 <__aeabi_fmul>
10014840:	4927      	ldr	r1, [pc, #156]	; (100148e0 <__kernel_sinf+0xe0>)
10014842:	f001 f863 	bl	1001590c <__aeabi_fsub>
10014846:	1c29      	adds	r1, r5, #0
10014848:	f000 ff4c 	bl	100156e4 <__aeabi_fmul>
1001484c:	4925      	ldr	r1, [pc, #148]	; (100148e4 <__kernel_sinf+0xe4>)
1001484e:	f000 fc09 	bl	10015064 <__aeabi_fadd>
10014852:	1c29      	adds	r1, r5, #0
10014854:	f000 ff46 	bl	100156e4 <__aeabi_fmul>
10014858:	4923      	ldr	r1, [pc, #140]	; (100148e8 <__kernel_sinf+0xe8>)
1001485a:	f001 f857 	bl	1001590c <__aeabi_fsub>
1001485e:	1c29      	adds	r1, r5, #0
10014860:	f000 ff40 	bl	100156e4 <__aeabi_fmul>
10014864:	4921      	ldr	r1, [pc, #132]	; (100148ec <__kernel_sinf+0xec>)
10014866:	f000 fbfd 	bl	10015064 <__aeabi_fadd>
1001486a:	4643      	mov	r3, r8
1001486c:	4681      	mov	r9, r0
1001486e:	2b00      	cmp	r3, #0
10014870:	d024      	beq.n	100148bc <__kernel_sinf+0xbc>
10014872:	21fc      	movs	r1, #252	; 0xfc
10014874:	1c38      	adds	r0, r7, #0
10014876:	0589      	lsls	r1, r1, #22
10014878:	f000 ff34 	bl	100156e4 <__aeabi_fmul>
1001487c:	4649      	mov	r1, r9
1001487e:	4680      	mov	r8, r0
10014880:	1c30      	adds	r0, r6, #0
10014882:	f000 ff2f 	bl	100156e4 <__aeabi_fmul>
10014886:	1c01      	adds	r1, r0, #0
10014888:	4640      	mov	r0, r8
1001488a:	f001 f83f 	bl	1001590c <__aeabi_fsub>
1001488e:	1c29      	adds	r1, r5, #0
10014890:	f000 ff28 	bl	100156e4 <__aeabi_fmul>
10014894:	1c39      	adds	r1, r7, #0
10014896:	f001 f839 	bl	1001590c <__aeabi_fsub>
1001489a:	4915      	ldr	r1, [pc, #84]	; (100148f0 <__kernel_sinf+0xf0>)
1001489c:	1c05      	adds	r5, r0, #0
1001489e:	1c30      	adds	r0, r6, #0
100148a0:	f000 ff20 	bl	100156e4 <__aeabi_fmul>
100148a4:	1c01      	adds	r1, r0, #0
100148a6:	1c28      	adds	r0, r5, #0
100148a8:	f000 fbdc 	bl	10015064 <__aeabi_fadd>
100148ac:	1c01      	adds	r1, r0, #0
100148ae:	1c20      	adds	r0, r4, #0
100148b0:	f001 f82c 	bl	1001590c <__aeabi_fsub>
100148b4:	bc0c      	pop	{r2, r3}
100148b6:	4690      	mov	r8, r2
100148b8:	4699      	mov	r9, r3
100148ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100148bc:	1c01      	adds	r1, r0, #0
100148be:	1c28      	adds	r0, r5, #0
100148c0:	f000 ff10 	bl	100156e4 <__aeabi_fmul>
100148c4:	490a      	ldr	r1, [pc, #40]	; (100148f0 <__kernel_sinf+0xf0>)
100148c6:	f001 f821 	bl	1001590c <__aeabi_fsub>
100148ca:	1c31      	adds	r1, r6, #0
100148cc:	f000 ff0a 	bl	100156e4 <__aeabi_fmul>
100148d0:	1c21      	adds	r1, r4, #0
100148d2:	f000 fbc7 	bl	10015064 <__aeabi_fadd>
100148d6:	e7ed      	b.n	100148b4 <__kernel_sinf+0xb4>
100148d8:	31ffffff 	.word	0x31ffffff
100148dc:	2f2ec9d3 	.word	0x2f2ec9d3
100148e0:	32d72f34 	.word	0x32d72f34
100148e4:	3638ef1b 	.word	0x3638ef1b
100148e8:	39500d01 	.word	0x39500d01
100148ec:	3c088889 	.word	0x3c088889
100148f0:	3e2aaaab 	.word	0x3e2aaaab

100148f4 <floorf>:
100148f4:	b5f0      	push	{r4, r5, r6, r7, lr}
100148f6:	4647      	mov	r7, r8
100148f8:	0043      	lsls	r3, r0, #1
100148fa:	b480      	push	{r7}
100148fc:	085f      	lsrs	r7, r3, #1
100148fe:	0e1b      	lsrs	r3, r3, #24
10014900:	3b7f      	subs	r3, #127	; 0x7f
10014902:	1c05      	adds	r5, r0, #0
10014904:	1e1c      	subs	r4, r3, #0
10014906:	2c16      	cmp	r4, #22
10014908:	dc18      	bgt.n	1001493c <floorf+0x48>
1001490a:	4680      	mov	r8, r0
1001490c:	2b00      	cmp	r3, #0
1001490e:	db1e      	blt.n	1001494e <floorf+0x5a>
10014910:	4f1b      	ldr	r7, [pc, #108]	; (10014980 <floorf+0x8c>)
10014912:	1c06      	adds	r6, r0, #0
10014914:	411f      	asrs	r7, r3
10014916:	4207      	tst	r7, r0
10014918:	d00c      	beq.n	10014934 <floorf+0x40>
1001491a:	491a      	ldr	r1, [pc, #104]	; (10014984 <floorf+0x90>)
1001491c:	f000 fba2 	bl	10015064 <__aeabi_fadd>
10014920:	2100      	movs	r1, #0
10014922:	f000 fa81 	bl	10014e28 <__aeabi_fcmpgt>
10014926:	2800      	cmp	r0, #0
10014928:	d004      	beq.n	10014934 <floorf+0x40>
1001492a:	2d00      	cmp	r5, #0
1001492c:	db1d      	blt.n	1001496a <floorf+0x76>
1001492e:	4643      	mov	r3, r8
10014930:	43bb      	bics	r3, r7
10014932:	001e      	movs	r6, r3
10014934:	1c30      	adds	r0, r6, #0
10014936:	bc04      	pop	{r2}
10014938:	4690      	mov	r8, r2
1001493a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001493c:	4b12      	ldr	r3, [pc, #72]	; (10014988 <floorf+0x94>)
1001493e:	1c06      	adds	r6, r0, #0
10014940:	429f      	cmp	r7, r3
10014942:	d9f7      	bls.n	10014934 <floorf+0x40>
10014944:	1c01      	adds	r1, r0, #0
10014946:	f000 fb8d 	bl	10015064 <__aeabi_fadd>
1001494a:	1c06      	adds	r6, r0, #0
1001494c:	e7f2      	b.n	10014934 <floorf+0x40>
1001494e:	490d      	ldr	r1, [pc, #52]	; (10014984 <floorf+0x90>)
10014950:	f000 fb88 	bl	10015064 <__aeabi_fadd>
10014954:	2100      	movs	r1, #0
10014956:	f000 fa67 	bl	10014e28 <__aeabi_fcmpgt>
1001495a:	2800      	cmp	r0, #0
1001495c:	d003      	beq.n	10014966 <floorf+0x72>
1001495e:	2d00      	cmp	r5, #0
10014960:	db09      	blt.n	10014976 <floorf+0x82>
10014962:	2600      	movs	r6, #0
10014964:	e7e6      	b.n	10014934 <floorf+0x40>
10014966:	1c2e      	adds	r6, r5, #0
10014968:	e7e4      	b.n	10014934 <floorf+0x40>
1001496a:	2380      	movs	r3, #128	; 0x80
1001496c:	041b      	lsls	r3, r3, #16
1001496e:	4123      	asrs	r3, r4
10014970:	4698      	mov	r8, r3
10014972:	44a8      	add	r8, r5
10014974:	e7db      	b.n	1001492e <floorf+0x3a>
10014976:	2f00      	cmp	r7, #0
10014978:	d0f5      	beq.n	10014966 <floorf+0x72>
1001497a:	4e04      	ldr	r6, [pc, #16]	; (1001498c <floorf+0x98>)
1001497c:	e7da      	b.n	10014934 <floorf+0x40>
1001497e:	46c0      	nop			; (mov r8, r8)
10014980:	007fffff 	.word	0x007fffff
10014984:	7149f2ca 	.word	0x7149f2ca
10014988:	7f7fffff 	.word	0x7f7fffff
1001498c:	bf800000 	.word	0xbf800000

10014990 <scalbnf>:
10014990:	0043      	lsls	r3, r0, #1
10014992:	b570      	push	{r4, r5, r6, lr}
10014994:	000d      	movs	r5, r1
10014996:	1c04      	adds	r4, r0, #0
10014998:	0859      	lsrs	r1, r3, #1
1001499a:	d010      	beq.n	100149be <scalbnf+0x2e>
1001499c:	4e26      	ldr	r6, [pc, #152]	; (10014a38 <scalbnf+0xa8>)
1001499e:	42b1      	cmp	r1, r6
100149a0:	d80e      	bhi.n	100149c0 <scalbnf+0x30>
100149a2:	4826      	ldr	r0, [pc, #152]	; (10014a3c <scalbnf+0xac>)
100149a4:	4281      	cmp	r1, r0
100149a6:	d90f      	bls.n	100149c8 <scalbnf+0x38>
100149a8:	0020      	movs	r0, r4
100149aa:	0e1b      	lsrs	r3, r3, #24
100149ac:	195b      	adds	r3, r3, r5
100149ae:	2bfe      	cmp	r3, #254	; 0xfe
100149b0:	dc29      	bgt.n	10014a06 <scalbnf+0x76>
100149b2:	2b00      	cmp	r3, #0
100149b4:	dd15      	ble.n	100149e2 <scalbnf+0x52>
100149b6:	4922      	ldr	r1, [pc, #136]	; (10014a40 <scalbnf+0xb0>)
100149b8:	05db      	lsls	r3, r3, #23
100149ba:	4008      	ands	r0, r1
100149bc:	4318      	orrs	r0, r3
100149be:	bd70      	pop	{r4, r5, r6, pc}
100149c0:	1c01      	adds	r1, r0, #0
100149c2:	f000 fb4f 	bl	10015064 <__aeabi_fadd>
100149c6:	e7fa      	b.n	100149be <scalbnf+0x2e>
100149c8:	2198      	movs	r1, #152	; 0x98
100149ca:	1c20      	adds	r0, r4, #0
100149cc:	05c9      	lsls	r1, r1, #23
100149ce:	f000 fe89 	bl	100156e4 <__aeabi_fmul>
100149d2:	4b1c      	ldr	r3, [pc, #112]	; (10014a44 <scalbnf+0xb4>)
100149d4:	1c04      	adds	r4, r0, #0
100149d6:	429d      	cmp	r5, r3
100149d8:	db11      	blt.n	100149fe <scalbnf+0x6e>
100149da:	0043      	lsls	r3, r0, #1
100149dc:	0e1b      	lsrs	r3, r3, #24
100149de:	3b19      	subs	r3, #25
100149e0:	e7e4      	b.n	100149ac <scalbnf+0x1c>
100149e2:	001a      	movs	r2, r3
100149e4:	3216      	adds	r2, #22
100149e6:	da16      	bge.n	10014a16 <scalbnf+0x86>
100149e8:	4b17      	ldr	r3, [pc, #92]	; (10014a48 <scalbnf+0xb8>)
100149ea:	1c21      	adds	r1, r4, #0
100149ec:	429d      	cmp	r5, r3
100149ee:	dd1c      	ble.n	10014a2a <scalbnf+0x9a>
100149f0:	4816      	ldr	r0, [pc, #88]	; (10014a4c <scalbnf+0xbc>)
100149f2:	f000 f82f 	bl	10014a54 <copysignf>
100149f6:	4915      	ldr	r1, [pc, #84]	; (10014a4c <scalbnf+0xbc>)
100149f8:	f000 fe74 	bl	100156e4 <__aeabi_fmul>
100149fc:	e7df      	b.n	100149be <scalbnf+0x2e>
100149fe:	4914      	ldr	r1, [pc, #80]	; (10014a50 <scalbnf+0xc0>)
10014a00:	f000 fe70 	bl	100156e4 <__aeabi_fmul>
10014a04:	e7db      	b.n	100149be <scalbnf+0x2e>
10014a06:	1c21      	adds	r1, r4, #0
10014a08:	4810      	ldr	r0, [pc, #64]	; (10014a4c <scalbnf+0xbc>)
10014a0a:	f000 f823 	bl	10014a54 <copysignf>
10014a0e:	490f      	ldr	r1, [pc, #60]	; (10014a4c <scalbnf+0xbc>)
10014a10:	f000 fe68 	bl	100156e4 <__aeabi_fmul>
10014a14:	e7d3      	b.n	100149be <scalbnf+0x2e>
10014a16:	21cc      	movs	r1, #204	; 0xcc
10014a18:	3319      	adds	r3, #25
10014a1a:	05da      	lsls	r2, r3, #23
10014a1c:	4b08      	ldr	r3, [pc, #32]	; (10014a40 <scalbnf+0xb0>)
10014a1e:	0589      	lsls	r1, r1, #22
10014a20:	4018      	ands	r0, r3
10014a22:	4310      	orrs	r0, r2
10014a24:	f000 fe5e 	bl	100156e4 <__aeabi_fmul>
10014a28:	e7c9      	b.n	100149be <scalbnf+0x2e>
10014a2a:	4809      	ldr	r0, [pc, #36]	; (10014a50 <scalbnf+0xc0>)
10014a2c:	f000 f812 	bl	10014a54 <copysignf>
10014a30:	4907      	ldr	r1, [pc, #28]	; (10014a50 <scalbnf+0xc0>)
10014a32:	f000 fe57 	bl	100156e4 <__aeabi_fmul>
10014a36:	e7c2      	b.n	100149be <scalbnf+0x2e>
10014a38:	7f7fffff 	.word	0x7f7fffff
10014a3c:	007fffff 	.word	0x007fffff
10014a40:	807fffff 	.word	0x807fffff
10014a44:	ffff3cb0 	.word	0xffff3cb0
10014a48:	0000c350 	.word	0x0000c350
10014a4c:	7149f2ca 	.word	0x7149f2ca
10014a50:	0da24260 	.word	0x0da24260

10014a54 <copysignf>:
10014a54:	0040      	lsls	r0, r0, #1
10014a56:	0fc9      	lsrs	r1, r1, #31
10014a58:	07c9      	lsls	r1, r1, #31
10014a5a:	0840      	lsrs	r0, r0, #1
10014a5c:	4308      	orrs	r0, r1
10014a5e:	4770      	bx	lr

10014a60 <__gnu_thumb1_case_uqi>:
10014a60:	b402      	push	{r1}
10014a62:	4671      	mov	r1, lr
10014a64:	0849      	lsrs	r1, r1, #1
10014a66:	0049      	lsls	r1, r1, #1
10014a68:	5c09      	ldrb	r1, [r1, r0]
10014a6a:	0049      	lsls	r1, r1, #1
10014a6c:	448e      	add	lr, r1
10014a6e:	bc02      	pop	{r1}
10014a70:	4770      	bx	lr
10014a72:	46c0      	nop			; (mov r8, r8)

10014a74 <__aeabi_uidiv>:
10014a74:	2200      	movs	r2, #0
10014a76:	0843      	lsrs	r3, r0, #1
10014a78:	428b      	cmp	r3, r1
10014a7a:	d374      	bcc.n	10014b66 <__aeabi_uidiv+0xf2>
10014a7c:	0903      	lsrs	r3, r0, #4
10014a7e:	428b      	cmp	r3, r1
10014a80:	d35f      	bcc.n	10014b42 <__aeabi_uidiv+0xce>
10014a82:	0a03      	lsrs	r3, r0, #8
10014a84:	428b      	cmp	r3, r1
10014a86:	d344      	bcc.n	10014b12 <__aeabi_uidiv+0x9e>
10014a88:	0b03      	lsrs	r3, r0, #12
10014a8a:	428b      	cmp	r3, r1
10014a8c:	d328      	bcc.n	10014ae0 <__aeabi_uidiv+0x6c>
10014a8e:	0c03      	lsrs	r3, r0, #16
10014a90:	428b      	cmp	r3, r1
10014a92:	d30d      	bcc.n	10014ab0 <__aeabi_uidiv+0x3c>
10014a94:	22ff      	movs	r2, #255	; 0xff
10014a96:	0209      	lsls	r1, r1, #8
10014a98:	ba12      	rev	r2, r2
10014a9a:	0c03      	lsrs	r3, r0, #16
10014a9c:	428b      	cmp	r3, r1
10014a9e:	d302      	bcc.n	10014aa6 <__aeabi_uidiv+0x32>
10014aa0:	1212      	asrs	r2, r2, #8
10014aa2:	0209      	lsls	r1, r1, #8
10014aa4:	d065      	beq.n	10014b72 <__aeabi_uidiv+0xfe>
10014aa6:	0b03      	lsrs	r3, r0, #12
10014aa8:	428b      	cmp	r3, r1
10014aaa:	d319      	bcc.n	10014ae0 <__aeabi_uidiv+0x6c>
10014aac:	e000      	b.n	10014ab0 <__aeabi_uidiv+0x3c>
10014aae:	0a09      	lsrs	r1, r1, #8
10014ab0:	0bc3      	lsrs	r3, r0, #15
10014ab2:	428b      	cmp	r3, r1
10014ab4:	d301      	bcc.n	10014aba <__aeabi_uidiv+0x46>
10014ab6:	03cb      	lsls	r3, r1, #15
10014ab8:	1ac0      	subs	r0, r0, r3
10014aba:	4152      	adcs	r2, r2
10014abc:	0b83      	lsrs	r3, r0, #14
10014abe:	428b      	cmp	r3, r1
10014ac0:	d301      	bcc.n	10014ac6 <__aeabi_uidiv+0x52>
10014ac2:	038b      	lsls	r3, r1, #14
10014ac4:	1ac0      	subs	r0, r0, r3
10014ac6:	4152      	adcs	r2, r2
10014ac8:	0b43      	lsrs	r3, r0, #13
10014aca:	428b      	cmp	r3, r1
10014acc:	d301      	bcc.n	10014ad2 <__aeabi_uidiv+0x5e>
10014ace:	034b      	lsls	r3, r1, #13
10014ad0:	1ac0      	subs	r0, r0, r3
10014ad2:	4152      	adcs	r2, r2
10014ad4:	0b03      	lsrs	r3, r0, #12
10014ad6:	428b      	cmp	r3, r1
10014ad8:	d301      	bcc.n	10014ade <__aeabi_uidiv+0x6a>
10014ada:	030b      	lsls	r3, r1, #12
10014adc:	1ac0      	subs	r0, r0, r3
10014ade:	4152      	adcs	r2, r2
10014ae0:	0ac3      	lsrs	r3, r0, #11
10014ae2:	428b      	cmp	r3, r1
10014ae4:	d301      	bcc.n	10014aea <__aeabi_uidiv+0x76>
10014ae6:	02cb      	lsls	r3, r1, #11
10014ae8:	1ac0      	subs	r0, r0, r3
10014aea:	4152      	adcs	r2, r2
10014aec:	0a83      	lsrs	r3, r0, #10
10014aee:	428b      	cmp	r3, r1
10014af0:	d301      	bcc.n	10014af6 <__aeabi_uidiv+0x82>
10014af2:	028b      	lsls	r3, r1, #10
10014af4:	1ac0      	subs	r0, r0, r3
10014af6:	4152      	adcs	r2, r2
10014af8:	0a43      	lsrs	r3, r0, #9
10014afa:	428b      	cmp	r3, r1
10014afc:	d301      	bcc.n	10014b02 <__aeabi_uidiv+0x8e>
10014afe:	024b      	lsls	r3, r1, #9
10014b00:	1ac0      	subs	r0, r0, r3
10014b02:	4152      	adcs	r2, r2
10014b04:	0a03      	lsrs	r3, r0, #8
10014b06:	428b      	cmp	r3, r1
10014b08:	d301      	bcc.n	10014b0e <__aeabi_uidiv+0x9a>
10014b0a:	020b      	lsls	r3, r1, #8
10014b0c:	1ac0      	subs	r0, r0, r3
10014b0e:	4152      	adcs	r2, r2
10014b10:	d2cd      	bcs.n	10014aae <__aeabi_uidiv+0x3a>
10014b12:	09c3      	lsrs	r3, r0, #7
10014b14:	428b      	cmp	r3, r1
10014b16:	d301      	bcc.n	10014b1c <__aeabi_uidiv+0xa8>
10014b18:	01cb      	lsls	r3, r1, #7
10014b1a:	1ac0      	subs	r0, r0, r3
10014b1c:	4152      	adcs	r2, r2
10014b1e:	0983      	lsrs	r3, r0, #6
10014b20:	428b      	cmp	r3, r1
10014b22:	d301      	bcc.n	10014b28 <__aeabi_uidiv+0xb4>
10014b24:	018b      	lsls	r3, r1, #6
10014b26:	1ac0      	subs	r0, r0, r3
10014b28:	4152      	adcs	r2, r2
10014b2a:	0943      	lsrs	r3, r0, #5
10014b2c:	428b      	cmp	r3, r1
10014b2e:	d301      	bcc.n	10014b34 <__aeabi_uidiv+0xc0>
10014b30:	014b      	lsls	r3, r1, #5
10014b32:	1ac0      	subs	r0, r0, r3
10014b34:	4152      	adcs	r2, r2
10014b36:	0903      	lsrs	r3, r0, #4
10014b38:	428b      	cmp	r3, r1
10014b3a:	d301      	bcc.n	10014b40 <__aeabi_uidiv+0xcc>
10014b3c:	010b      	lsls	r3, r1, #4
10014b3e:	1ac0      	subs	r0, r0, r3
10014b40:	4152      	adcs	r2, r2
10014b42:	08c3      	lsrs	r3, r0, #3
10014b44:	428b      	cmp	r3, r1
10014b46:	d301      	bcc.n	10014b4c <__aeabi_uidiv+0xd8>
10014b48:	00cb      	lsls	r3, r1, #3
10014b4a:	1ac0      	subs	r0, r0, r3
10014b4c:	4152      	adcs	r2, r2
10014b4e:	0883      	lsrs	r3, r0, #2
10014b50:	428b      	cmp	r3, r1
10014b52:	d301      	bcc.n	10014b58 <__aeabi_uidiv+0xe4>
10014b54:	008b      	lsls	r3, r1, #2
10014b56:	1ac0      	subs	r0, r0, r3
10014b58:	4152      	adcs	r2, r2
10014b5a:	0843      	lsrs	r3, r0, #1
10014b5c:	428b      	cmp	r3, r1
10014b5e:	d301      	bcc.n	10014b64 <__aeabi_uidiv+0xf0>
10014b60:	004b      	lsls	r3, r1, #1
10014b62:	1ac0      	subs	r0, r0, r3
10014b64:	4152      	adcs	r2, r2
10014b66:	1a41      	subs	r1, r0, r1
10014b68:	d200      	bcs.n	10014b6c <__aeabi_uidiv+0xf8>
10014b6a:	4601      	mov	r1, r0
10014b6c:	4152      	adcs	r2, r2
10014b6e:	4610      	mov	r0, r2
10014b70:	4770      	bx	lr
10014b72:	e7ff      	b.n	10014b74 <__aeabi_uidiv+0x100>
10014b74:	b501      	push	{r0, lr}
10014b76:	2000      	movs	r0, #0
10014b78:	f000 f8f0 	bl	10014d5c <__aeabi_idiv0>
10014b7c:	bd02      	pop	{r1, pc}
10014b7e:	46c0      	nop			; (mov r8, r8)

10014b80 <__aeabi_uidivmod>:
10014b80:	2900      	cmp	r1, #0
10014b82:	d0f7      	beq.n	10014b74 <__aeabi_uidiv+0x100>
10014b84:	e776      	b.n	10014a74 <__aeabi_uidiv>
10014b86:	4770      	bx	lr

10014b88 <__aeabi_idiv>:
10014b88:	4603      	mov	r3, r0
10014b8a:	430b      	orrs	r3, r1
10014b8c:	d47f      	bmi.n	10014c8e <__aeabi_idiv+0x106>
10014b8e:	2200      	movs	r2, #0
10014b90:	0843      	lsrs	r3, r0, #1
10014b92:	428b      	cmp	r3, r1
10014b94:	d374      	bcc.n	10014c80 <__aeabi_idiv+0xf8>
10014b96:	0903      	lsrs	r3, r0, #4
10014b98:	428b      	cmp	r3, r1
10014b9a:	d35f      	bcc.n	10014c5c <__aeabi_idiv+0xd4>
10014b9c:	0a03      	lsrs	r3, r0, #8
10014b9e:	428b      	cmp	r3, r1
10014ba0:	d344      	bcc.n	10014c2c <__aeabi_idiv+0xa4>
10014ba2:	0b03      	lsrs	r3, r0, #12
10014ba4:	428b      	cmp	r3, r1
10014ba6:	d328      	bcc.n	10014bfa <__aeabi_idiv+0x72>
10014ba8:	0c03      	lsrs	r3, r0, #16
10014baa:	428b      	cmp	r3, r1
10014bac:	d30d      	bcc.n	10014bca <__aeabi_idiv+0x42>
10014bae:	22ff      	movs	r2, #255	; 0xff
10014bb0:	0209      	lsls	r1, r1, #8
10014bb2:	ba12      	rev	r2, r2
10014bb4:	0c03      	lsrs	r3, r0, #16
10014bb6:	428b      	cmp	r3, r1
10014bb8:	d302      	bcc.n	10014bc0 <__aeabi_idiv+0x38>
10014bba:	1212      	asrs	r2, r2, #8
10014bbc:	0209      	lsls	r1, r1, #8
10014bbe:	d065      	beq.n	10014c8c <__aeabi_idiv+0x104>
10014bc0:	0b03      	lsrs	r3, r0, #12
10014bc2:	428b      	cmp	r3, r1
10014bc4:	d319      	bcc.n	10014bfa <__aeabi_idiv+0x72>
10014bc6:	e000      	b.n	10014bca <__aeabi_idiv+0x42>
10014bc8:	0a09      	lsrs	r1, r1, #8
10014bca:	0bc3      	lsrs	r3, r0, #15
10014bcc:	428b      	cmp	r3, r1
10014bce:	d301      	bcc.n	10014bd4 <__aeabi_idiv+0x4c>
10014bd0:	03cb      	lsls	r3, r1, #15
10014bd2:	1ac0      	subs	r0, r0, r3
10014bd4:	4152      	adcs	r2, r2
10014bd6:	0b83      	lsrs	r3, r0, #14
10014bd8:	428b      	cmp	r3, r1
10014bda:	d301      	bcc.n	10014be0 <__aeabi_idiv+0x58>
10014bdc:	038b      	lsls	r3, r1, #14
10014bde:	1ac0      	subs	r0, r0, r3
10014be0:	4152      	adcs	r2, r2
10014be2:	0b43      	lsrs	r3, r0, #13
10014be4:	428b      	cmp	r3, r1
10014be6:	d301      	bcc.n	10014bec <__aeabi_idiv+0x64>
10014be8:	034b      	lsls	r3, r1, #13
10014bea:	1ac0      	subs	r0, r0, r3
10014bec:	4152      	adcs	r2, r2
10014bee:	0b03      	lsrs	r3, r0, #12
10014bf0:	428b      	cmp	r3, r1
10014bf2:	d301      	bcc.n	10014bf8 <__aeabi_idiv+0x70>
10014bf4:	030b      	lsls	r3, r1, #12
10014bf6:	1ac0      	subs	r0, r0, r3
10014bf8:	4152      	adcs	r2, r2
10014bfa:	0ac3      	lsrs	r3, r0, #11
10014bfc:	428b      	cmp	r3, r1
10014bfe:	d301      	bcc.n	10014c04 <__aeabi_idiv+0x7c>
10014c00:	02cb      	lsls	r3, r1, #11
10014c02:	1ac0      	subs	r0, r0, r3
10014c04:	4152      	adcs	r2, r2
10014c06:	0a83      	lsrs	r3, r0, #10
10014c08:	428b      	cmp	r3, r1
10014c0a:	d301      	bcc.n	10014c10 <__aeabi_idiv+0x88>
10014c0c:	028b      	lsls	r3, r1, #10
10014c0e:	1ac0      	subs	r0, r0, r3
10014c10:	4152      	adcs	r2, r2
10014c12:	0a43      	lsrs	r3, r0, #9
10014c14:	428b      	cmp	r3, r1
10014c16:	d301      	bcc.n	10014c1c <__aeabi_idiv+0x94>
10014c18:	024b      	lsls	r3, r1, #9
10014c1a:	1ac0      	subs	r0, r0, r3
10014c1c:	4152      	adcs	r2, r2
10014c1e:	0a03      	lsrs	r3, r0, #8
10014c20:	428b      	cmp	r3, r1
10014c22:	d301      	bcc.n	10014c28 <__aeabi_idiv+0xa0>
10014c24:	020b      	lsls	r3, r1, #8
10014c26:	1ac0      	subs	r0, r0, r3
10014c28:	4152      	adcs	r2, r2
10014c2a:	d2cd      	bcs.n	10014bc8 <__aeabi_idiv+0x40>
10014c2c:	09c3      	lsrs	r3, r0, #7
10014c2e:	428b      	cmp	r3, r1
10014c30:	d301      	bcc.n	10014c36 <__aeabi_idiv+0xae>
10014c32:	01cb      	lsls	r3, r1, #7
10014c34:	1ac0      	subs	r0, r0, r3
10014c36:	4152      	adcs	r2, r2
10014c38:	0983      	lsrs	r3, r0, #6
10014c3a:	428b      	cmp	r3, r1
10014c3c:	d301      	bcc.n	10014c42 <__aeabi_idiv+0xba>
10014c3e:	018b      	lsls	r3, r1, #6
10014c40:	1ac0      	subs	r0, r0, r3
10014c42:	4152      	adcs	r2, r2
10014c44:	0943      	lsrs	r3, r0, #5
10014c46:	428b      	cmp	r3, r1
10014c48:	d301      	bcc.n	10014c4e <__aeabi_idiv+0xc6>
10014c4a:	014b      	lsls	r3, r1, #5
10014c4c:	1ac0      	subs	r0, r0, r3
10014c4e:	4152      	adcs	r2, r2
10014c50:	0903      	lsrs	r3, r0, #4
10014c52:	428b      	cmp	r3, r1
10014c54:	d301      	bcc.n	10014c5a <__aeabi_idiv+0xd2>
10014c56:	010b      	lsls	r3, r1, #4
10014c58:	1ac0      	subs	r0, r0, r3
10014c5a:	4152      	adcs	r2, r2
10014c5c:	08c3      	lsrs	r3, r0, #3
10014c5e:	428b      	cmp	r3, r1
10014c60:	d301      	bcc.n	10014c66 <__aeabi_idiv+0xde>
10014c62:	00cb      	lsls	r3, r1, #3
10014c64:	1ac0      	subs	r0, r0, r3
10014c66:	4152      	adcs	r2, r2
10014c68:	0883      	lsrs	r3, r0, #2
10014c6a:	428b      	cmp	r3, r1
10014c6c:	d301      	bcc.n	10014c72 <__aeabi_idiv+0xea>
10014c6e:	008b      	lsls	r3, r1, #2
10014c70:	1ac0      	subs	r0, r0, r3
10014c72:	4152      	adcs	r2, r2
10014c74:	0843      	lsrs	r3, r0, #1
10014c76:	428b      	cmp	r3, r1
10014c78:	d301      	bcc.n	10014c7e <__aeabi_idiv+0xf6>
10014c7a:	004b      	lsls	r3, r1, #1
10014c7c:	1ac0      	subs	r0, r0, r3
10014c7e:	4152      	adcs	r2, r2
10014c80:	1a41      	subs	r1, r0, r1
10014c82:	d200      	bcs.n	10014c86 <__aeabi_idiv+0xfe>
10014c84:	4601      	mov	r1, r0
10014c86:	4152      	adcs	r2, r2
10014c88:	4610      	mov	r0, r2
10014c8a:	4770      	bx	lr
10014c8c:	e05d      	b.n	10014d4a <__aeabi_idiv+0x1c2>
10014c8e:	0fca      	lsrs	r2, r1, #31
10014c90:	d000      	beq.n	10014c94 <__aeabi_idiv+0x10c>
10014c92:	4249      	negs	r1, r1
10014c94:	1003      	asrs	r3, r0, #32
10014c96:	d300      	bcc.n	10014c9a <__aeabi_idiv+0x112>
10014c98:	4240      	negs	r0, r0
10014c9a:	4053      	eors	r3, r2
10014c9c:	2200      	movs	r2, #0
10014c9e:	469c      	mov	ip, r3
10014ca0:	0903      	lsrs	r3, r0, #4
10014ca2:	428b      	cmp	r3, r1
10014ca4:	d32d      	bcc.n	10014d02 <__aeabi_idiv+0x17a>
10014ca6:	0a03      	lsrs	r3, r0, #8
10014ca8:	428b      	cmp	r3, r1
10014caa:	d312      	bcc.n	10014cd2 <__aeabi_idiv+0x14a>
10014cac:	22fc      	movs	r2, #252	; 0xfc
10014cae:	0189      	lsls	r1, r1, #6
10014cb0:	ba12      	rev	r2, r2
10014cb2:	0a03      	lsrs	r3, r0, #8
10014cb4:	428b      	cmp	r3, r1
10014cb6:	d30c      	bcc.n	10014cd2 <__aeabi_idiv+0x14a>
10014cb8:	0189      	lsls	r1, r1, #6
10014cba:	1192      	asrs	r2, r2, #6
10014cbc:	428b      	cmp	r3, r1
10014cbe:	d308      	bcc.n	10014cd2 <__aeabi_idiv+0x14a>
10014cc0:	0189      	lsls	r1, r1, #6
10014cc2:	1192      	asrs	r2, r2, #6
10014cc4:	428b      	cmp	r3, r1
10014cc6:	d304      	bcc.n	10014cd2 <__aeabi_idiv+0x14a>
10014cc8:	0189      	lsls	r1, r1, #6
10014cca:	d03a      	beq.n	10014d42 <__aeabi_idiv+0x1ba>
10014ccc:	1192      	asrs	r2, r2, #6
10014cce:	e000      	b.n	10014cd2 <__aeabi_idiv+0x14a>
10014cd0:	0989      	lsrs	r1, r1, #6
10014cd2:	09c3      	lsrs	r3, r0, #7
10014cd4:	428b      	cmp	r3, r1
10014cd6:	d301      	bcc.n	10014cdc <__aeabi_idiv+0x154>
10014cd8:	01cb      	lsls	r3, r1, #7
10014cda:	1ac0      	subs	r0, r0, r3
10014cdc:	4152      	adcs	r2, r2
10014cde:	0983      	lsrs	r3, r0, #6
10014ce0:	428b      	cmp	r3, r1
10014ce2:	d301      	bcc.n	10014ce8 <__aeabi_idiv+0x160>
10014ce4:	018b      	lsls	r3, r1, #6
10014ce6:	1ac0      	subs	r0, r0, r3
10014ce8:	4152      	adcs	r2, r2
10014cea:	0943      	lsrs	r3, r0, #5
10014cec:	428b      	cmp	r3, r1
10014cee:	d301      	bcc.n	10014cf4 <__aeabi_idiv+0x16c>
10014cf0:	014b      	lsls	r3, r1, #5
10014cf2:	1ac0      	subs	r0, r0, r3
10014cf4:	4152      	adcs	r2, r2
10014cf6:	0903      	lsrs	r3, r0, #4
10014cf8:	428b      	cmp	r3, r1
10014cfa:	d301      	bcc.n	10014d00 <__aeabi_idiv+0x178>
10014cfc:	010b      	lsls	r3, r1, #4
10014cfe:	1ac0      	subs	r0, r0, r3
10014d00:	4152      	adcs	r2, r2
10014d02:	08c3      	lsrs	r3, r0, #3
10014d04:	428b      	cmp	r3, r1
10014d06:	d301      	bcc.n	10014d0c <__aeabi_idiv+0x184>
10014d08:	00cb      	lsls	r3, r1, #3
10014d0a:	1ac0      	subs	r0, r0, r3
10014d0c:	4152      	adcs	r2, r2
10014d0e:	0883      	lsrs	r3, r0, #2
10014d10:	428b      	cmp	r3, r1
10014d12:	d301      	bcc.n	10014d18 <__aeabi_idiv+0x190>
10014d14:	008b      	lsls	r3, r1, #2
10014d16:	1ac0      	subs	r0, r0, r3
10014d18:	4152      	adcs	r2, r2
10014d1a:	d2d9      	bcs.n	10014cd0 <__aeabi_idiv+0x148>
10014d1c:	0843      	lsrs	r3, r0, #1
10014d1e:	428b      	cmp	r3, r1
10014d20:	d301      	bcc.n	10014d26 <__aeabi_idiv+0x19e>
10014d22:	004b      	lsls	r3, r1, #1
10014d24:	1ac0      	subs	r0, r0, r3
10014d26:	4152      	adcs	r2, r2
10014d28:	1a41      	subs	r1, r0, r1
10014d2a:	d200      	bcs.n	10014d2e <__aeabi_idiv+0x1a6>
10014d2c:	4601      	mov	r1, r0
10014d2e:	4663      	mov	r3, ip
10014d30:	4152      	adcs	r2, r2
10014d32:	105b      	asrs	r3, r3, #1
10014d34:	4610      	mov	r0, r2
10014d36:	d301      	bcc.n	10014d3c <__aeabi_idiv+0x1b4>
10014d38:	4240      	negs	r0, r0
10014d3a:	2b00      	cmp	r3, #0
10014d3c:	d500      	bpl.n	10014d40 <__aeabi_idiv+0x1b8>
10014d3e:	4249      	negs	r1, r1
10014d40:	4770      	bx	lr
10014d42:	4663      	mov	r3, ip
10014d44:	105b      	asrs	r3, r3, #1
10014d46:	d300      	bcc.n	10014d4a <__aeabi_idiv+0x1c2>
10014d48:	4240      	negs	r0, r0
10014d4a:	b501      	push	{r0, lr}
10014d4c:	2000      	movs	r0, #0
10014d4e:	f000 f805 	bl	10014d5c <__aeabi_idiv0>
10014d52:	bd02      	pop	{r1, pc}

10014d54 <__aeabi_idivmod>:
10014d54:	2900      	cmp	r1, #0
10014d56:	d0f8      	beq.n	10014d4a <__aeabi_idiv+0x1c2>
10014d58:	e716      	b.n	10014b88 <__aeabi_idiv>
10014d5a:	4770      	bx	lr

10014d5c <__aeabi_idiv0>:
10014d5c:	4770      	bx	lr
10014d5e:	46c0      	nop			; (mov r8, r8)

10014d60 <__aeabi_cdrcmple>:
10014d60:	4684      	mov	ip, r0
10014d62:	1c10      	adds	r0, r2, #0
10014d64:	4662      	mov	r2, ip
10014d66:	468c      	mov	ip, r1
10014d68:	1c19      	adds	r1, r3, #0
10014d6a:	4663      	mov	r3, ip
10014d6c:	e000      	b.n	10014d70 <__aeabi_cdcmpeq>
10014d6e:	46c0      	nop			; (mov r8, r8)

10014d70 <__aeabi_cdcmpeq>:
10014d70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10014d72:	f001 fef7 	bl	10016b64 <__ledf2>
10014d76:	2800      	cmp	r0, #0
10014d78:	d401      	bmi.n	10014d7e <__aeabi_cdcmpeq+0xe>
10014d7a:	2100      	movs	r1, #0
10014d7c:	42c8      	cmn	r0, r1
10014d7e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10014d80 <__aeabi_dcmpeq>:
10014d80:	b510      	push	{r4, lr}
10014d82:	f001 fe4b 	bl	10016a1c <__eqdf2>
10014d86:	4240      	negs	r0, r0
10014d88:	3001      	adds	r0, #1
10014d8a:	bd10      	pop	{r4, pc}

10014d8c <__aeabi_dcmplt>:
10014d8c:	b510      	push	{r4, lr}
10014d8e:	f001 fee9 	bl	10016b64 <__ledf2>
10014d92:	2800      	cmp	r0, #0
10014d94:	db01      	blt.n	10014d9a <__aeabi_dcmplt+0xe>
10014d96:	2000      	movs	r0, #0
10014d98:	bd10      	pop	{r4, pc}
10014d9a:	2001      	movs	r0, #1
10014d9c:	bd10      	pop	{r4, pc}
10014d9e:	46c0      	nop			; (mov r8, r8)

10014da0 <__aeabi_dcmple>:
10014da0:	b510      	push	{r4, lr}
10014da2:	f001 fedf 	bl	10016b64 <__ledf2>
10014da6:	2800      	cmp	r0, #0
10014da8:	dd01      	ble.n	10014dae <__aeabi_dcmple+0xe>
10014daa:	2000      	movs	r0, #0
10014dac:	bd10      	pop	{r4, pc}
10014dae:	2001      	movs	r0, #1
10014db0:	bd10      	pop	{r4, pc}
10014db2:	46c0      	nop			; (mov r8, r8)

10014db4 <__aeabi_dcmpgt>:
10014db4:	b510      	push	{r4, lr}
10014db6:	f001 fe71 	bl	10016a9c <__gedf2>
10014dba:	2800      	cmp	r0, #0
10014dbc:	dc01      	bgt.n	10014dc2 <__aeabi_dcmpgt+0xe>
10014dbe:	2000      	movs	r0, #0
10014dc0:	bd10      	pop	{r4, pc}
10014dc2:	2001      	movs	r0, #1
10014dc4:	bd10      	pop	{r4, pc}
10014dc6:	46c0      	nop			; (mov r8, r8)

10014dc8 <__aeabi_dcmpge>:
10014dc8:	b510      	push	{r4, lr}
10014dca:	f001 fe67 	bl	10016a9c <__gedf2>
10014dce:	2800      	cmp	r0, #0
10014dd0:	da01      	bge.n	10014dd6 <__aeabi_dcmpge+0xe>
10014dd2:	2000      	movs	r0, #0
10014dd4:	bd10      	pop	{r4, pc}
10014dd6:	2001      	movs	r0, #1
10014dd8:	bd10      	pop	{r4, pc}
10014dda:	46c0      	nop			; (mov r8, r8)

10014ddc <__aeabi_cfrcmple>:
10014ddc:	4684      	mov	ip, r0
10014dde:	1c08      	adds	r0, r1, #0
10014de0:	4661      	mov	r1, ip
10014de2:	e7ff      	b.n	10014de4 <__aeabi_cfcmpeq>

10014de4 <__aeabi_cfcmpeq>:
10014de4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10014de6:	f000 fc39 	bl	1001565c <__lesf2>
10014dea:	2800      	cmp	r0, #0
10014dec:	d401      	bmi.n	10014df2 <__aeabi_cfcmpeq+0xe>
10014dee:	2100      	movs	r1, #0
10014df0:	42c8      	cmn	r0, r1
10014df2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10014df4 <__aeabi_fcmpeq>:
10014df4:	b510      	push	{r4, lr}
10014df6:	f000 fbc5 	bl	10015584 <__eqsf2>
10014dfa:	4240      	negs	r0, r0
10014dfc:	3001      	adds	r0, #1
10014dfe:	bd10      	pop	{r4, pc}

10014e00 <__aeabi_fcmplt>:
10014e00:	b510      	push	{r4, lr}
10014e02:	f000 fc2b 	bl	1001565c <__lesf2>
10014e06:	2800      	cmp	r0, #0
10014e08:	db01      	blt.n	10014e0e <__aeabi_fcmplt+0xe>
10014e0a:	2000      	movs	r0, #0
10014e0c:	bd10      	pop	{r4, pc}
10014e0e:	2001      	movs	r0, #1
10014e10:	bd10      	pop	{r4, pc}
10014e12:	46c0      	nop			; (mov r8, r8)

10014e14 <__aeabi_fcmple>:
10014e14:	b510      	push	{r4, lr}
10014e16:	f000 fc21 	bl	1001565c <__lesf2>
10014e1a:	2800      	cmp	r0, #0
10014e1c:	dd01      	ble.n	10014e22 <__aeabi_fcmple+0xe>
10014e1e:	2000      	movs	r0, #0
10014e20:	bd10      	pop	{r4, pc}
10014e22:	2001      	movs	r0, #1
10014e24:	bd10      	pop	{r4, pc}
10014e26:	46c0      	nop			; (mov r8, r8)

10014e28 <__aeabi_fcmpgt>:
10014e28:	b510      	push	{r4, lr}
10014e2a:	f000 fbd3 	bl	100155d4 <__gesf2>
10014e2e:	2800      	cmp	r0, #0
10014e30:	dc01      	bgt.n	10014e36 <__aeabi_fcmpgt+0xe>
10014e32:	2000      	movs	r0, #0
10014e34:	bd10      	pop	{r4, pc}
10014e36:	2001      	movs	r0, #1
10014e38:	bd10      	pop	{r4, pc}
10014e3a:	46c0      	nop			; (mov r8, r8)

10014e3c <__aeabi_fcmpge>:
10014e3c:	b510      	push	{r4, lr}
10014e3e:	f000 fbc9 	bl	100155d4 <__gesf2>
10014e42:	2800      	cmp	r0, #0
10014e44:	da01      	bge.n	10014e4a <__aeabi_fcmpge+0xe>
10014e46:	2000      	movs	r0, #0
10014e48:	bd10      	pop	{r4, pc}
10014e4a:	2001      	movs	r0, #1
10014e4c:	bd10      	pop	{r4, pc}
10014e4e:	46c0      	nop			; (mov r8, r8)

10014e50 <__aeabi_ldivmod>:
10014e50:	2b00      	cmp	r3, #0
10014e52:	d115      	bne.n	10014e80 <__aeabi_ldivmod+0x30>
10014e54:	2a00      	cmp	r2, #0
10014e56:	d113      	bne.n	10014e80 <__aeabi_ldivmod+0x30>
10014e58:	2900      	cmp	r1, #0
10014e5a:	db06      	blt.n	10014e6a <__aeabi_ldivmod+0x1a>
10014e5c:	dc01      	bgt.n	10014e62 <__aeabi_ldivmod+0x12>
10014e5e:	2800      	cmp	r0, #0
10014e60:	d006      	beq.n	10014e70 <__aeabi_ldivmod+0x20>
10014e62:	2000      	movs	r0, #0
10014e64:	43c0      	mvns	r0, r0
10014e66:	0841      	lsrs	r1, r0, #1
10014e68:	e002      	b.n	10014e70 <__aeabi_ldivmod+0x20>
10014e6a:	2180      	movs	r1, #128	; 0x80
10014e6c:	0609      	lsls	r1, r1, #24
10014e6e:	2000      	movs	r0, #0
10014e70:	b407      	push	{r0, r1, r2}
10014e72:	4802      	ldr	r0, [pc, #8]	; (10014e7c <__aeabi_ldivmod+0x2c>)
10014e74:	a101      	add	r1, pc, #4	; (adr r1, 10014e7c <__aeabi_ldivmod+0x2c>)
10014e76:	1840      	adds	r0, r0, r1
10014e78:	9002      	str	r0, [sp, #8]
10014e7a:	bd03      	pop	{r0, r1, pc}
10014e7c:	fffffee1 	.word	0xfffffee1
10014e80:	b403      	push	{r0, r1}
10014e82:	4668      	mov	r0, sp
10014e84:	b501      	push	{r0, lr}
10014e86:	9802      	ldr	r0, [sp, #8]
10014e88:	f000 f8d0 	bl	1001502c <__gnu_ldivmod_helper>
10014e8c:	9b01      	ldr	r3, [sp, #4]
10014e8e:	469e      	mov	lr, r3
10014e90:	b002      	add	sp, #8
10014e92:	bc0c      	pop	{r2, r3}
10014e94:	4770      	bx	lr
10014e96:	46c0      	nop			; (mov r8, r8)

10014e98 <__aeabi_lmul>:
10014e98:	b5f0      	push	{r4, r5, r6, r7, lr}
10014e9a:	464f      	mov	r7, r9
10014e9c:	4646      	mov	r6, r8
10014e9e:	b4c0      	push	{r6, r7}
10014ea0:	0416      	lsls	r6, r2, #16
10014ea2:	0c36      	lsrs	r6, r6, #16
10014ea4:	4699      	mov	r9, r3
10014ea6:	0033      	movs	r3, r6
10014ea8:	0405      	lsls	r5, r0, #16
10014eaa:	0c2c      	lsrs	r4, r5, #16
10014eac:	0c07      	lsrs	r7, r0, #16
10014eae:	0c15      	lsrs	r5, r2, #16
10014eb0:	4363      	muls	r3, r4
10014eb2:	437e      	muls	r6, r7
10014eb4:	436f      	muls	r7, r5
10014eb6:	4365      	muls	r5, r4
10014eb8:	0c1c      	lsrs	r4, r3, #16
10014eba:	19ad      	adds	r5, r5, r6
10014ebc:	1964      	adds	r4, r4, r5
10014ebe:	469c      	mov	ip, r3
10014ec0:	42a6      	cmp	r6, r4
10014ec2:	d903      	bls.n	10014ecc <__aeabi_lmul+0x34>
10014ec4:	2380      	movs	r3, #128	; 0x80
10014ec6:	025b      	lsls	r3, r3, #9
10014ec8:	4698      	mov	r8, r3
10014eca:	4447      	add	r7, r8
10014ecc:	4663      	mov	r3, ip
10014ece:	0c25      	lsrs	r5, r4, #16
10014ed0:	19ef      	adds	r7, r5, r7
10014ed2:	041d      	lsls	r5, r3, #16
10014ed4:	464b      	mov	r3, r9
10014ed6:	434a      	muls	r2, r1
10014ed8:	4343      	muls	r3, r0
10014eda:	0c2d      	lsrs	r5, r5, #16
10014edc:	0424      	lsls	r4, r4, #16
10014ede:	1964      	adds	r4, r4, r5
10014ee0:	1899      	adds	r1, r3, r2
10014ee2:	19c9      	adds	r1, r1, r7
10014ee4:	0020      	movs	r0, r4
10014ee6:	bc0c      	pop	{r2, r3}
10014ee8:	4690      	mov	r8, r2
10014eea:	4699      	mov	r9, r3
10014eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014eee:	46c0      	nop			; (mov r8, r8)

10014ef0 <__aeabi_f2uiz>:
10014ef0:	219e      	movs	r1, #158	; 0x9e
10014ef2:	b510      	push	{r4, lr}
10014ef4:	05c9      	lsls	r1, r1, #23
10014ef6:	1c04      	adds	r4, r0, #0
10014ef8:	f7ff ffa0 	bl	10014e3c <__aeabi_fcmpge>
10014efc:	2800      	cmp	r0, #0
10014efe:	d103      	bne.n	10014f08 <__aeabi_f2uiz+0x18>
10014f00:	1c20      	adds	r0, r4, #0
10014f02:	f000 fea1 	bl	10015c48 <__aeabi_f2iz>
10014f06:	bd10      	pop	{r4, pc}
10014f08:	219e      	movs	r1, #158	; 0x9e
10014f0a:	1c20      	adds	r0, r4, #0
10014f0c:	05c9      	lsls	r1, r1, #23
10014f0e:	f000 fcfd 	bl	1001590c <__aeabi_fsub>
10014f12:	f000 fe99 	bl	10015c48 <__aeabi_f2iz>
10014f16:	2380      	movs	r3, #128	; 0x80
10014f18:	061b      	lsls	r3, r3, #24
10014f1a:	469c      	mov	ip, r3
10014f1c:	4460      	add	r0, ip
10014f1e:	e7f2      	b.n	10014f06 <__aeabi_f2uiz+0x16>

10014f20 <__aeabi_d2uiz>:
10014f20:	b570      	push	{r4, r5, r6, lr}
10014f22:	2200      	movs	r2, #0
10014f24:	4b0c      	ldr	r3, [pc, #48]	; (10014f58 <__aeabi_d2uiz+0x38>)
10014f26:	0004      	movs	r4, r0
10014f28:	000d      	movs	r5, r1
10014f2a:	f7ff ff4d 	bl	10014dc8 <__aeabi_dcmpge>
10014f2e:	2800      	cmp	r0, #0
10014f30:	d104      	bne.n	10014f3c <__aeabi_d2uiz+0x1c>
10014f32:	0020      	movs	r0, r4
10014f34:	0029      	movs	r1, r5
10014f36:	f002 fc4d 	bl	100177d4 <__aeabi_d2iz>
10014f3a:	bd70      	pop	{r4, r5, r6, pc}
10014f3c:	4b06      	ldr	r3, [pc, #24]	; (10014f58 <__aeabi_d2uiz+0x38>)
10014f3e:	2200      	movs	r2, #0
10014f40:	0020      	movs	r0, r4
10014f42:	0029      	movs	r1, r5
10014f44:	f002 f8f2 	bl	1001712c <__aeabi_dsub>
10014f48:	f002 fc44 	bl	100177d4 <__aeabi_d2iz>
10014f4c:	2380      	movs	r3, #128	; 0x80
10014f4e:	061b      	lsls	r3, r3, #24
10014f50:	469c      	mov	ip, r3
10014f52:	4460      	add	r0, ip
10014f54:	e7f1      	b.n	10014f3a <__aeabi_d2uiz+0x1a>
10014f56:	46c0      	nop			; (mov r8, r8)
10014f58:	41e00000 	.word	0x41e00000

10014f5c <__aeabi_f2lz>:
10014f5c:	b510      	push	{r4, lr}
10014f5e:	2100      	movs	r1, #0
10014f60:	1c04      	adds	r4, r0, #0
10014f62:	f7ff ff4d 	bl	10014e00 <__aeabi_fcmplt>
10014f66:	2800      	cmp	r0, #0
10014f68:	d103      	bne.n	10014f72 <__aeabi_f2lz+0x16>
10014f6a:	1c20      	adds	r0, r4, #0
10014f6c:	f000 f80c 	bl	10014f88 <__aeabi_f2ulz>
10014f70:	bd10      	pop	{r4, pc}
10014f72:	2380      	movs	r3, #128	; 0x80
10014f74:	061b      	lsls	r3, r3, #24
10014f76:	18e0      	adds	r0, r4, r3
10014f78:	f000 f806 	bl	10014f88 <__aeabi_f2ulz>
10014f7c:	0002      	movs	r2, r0
10014f7e:	000b      	movs	r3, r1
10014f80:	2100      	movs	r1, #0
10014f82:	4250      	negs	r0, r2
10014f84:	4199      	sbcs	r1, r3
10014f86:	e7f3      	b.n	10014f70 <__aeabi_f2lz+0x14>

10014f88 <__aeabi_f2ulz>:
10014f88:	b570      	push	{r4, r5, r6, lr}
10014f8a:	f002 fcd3 	bl	10017934 <__aeabi_f2d>
10014f8e:	2200      	movs	r2, #0
10014f90:	4b0b      	ldr	r3, [pc, #44]	; (10014fc0 <__aeabi_f2ulz+0x38>)
10014f92:	000d      	movs	r5, r1
10014f94:	0004      	movs	r4, r0
10014f96:	f001 fe4f 	bl	10016c38 <__aeabi_dmul>
10014f9a:	f7ff ffc1 	bl	10014f20 <__aeabi_d2uiz>
10014f9e:	0006      	movs	r6, r0
10014fa0:	f002 fc90 	bl	100178c4 <__aeabi_ui2d>
10014fa4:	2200      	movs	r2, #0
10014fa6:	4b07      	ldr	r3, [pc, #28]	; (10014fc4 <__aeabi_f2ulz+0x3c>)
10014fa8:	f001 fe46 	bl	10016c38 <__aeabi_dmul>
10014fac:	0002      	movs	r2, r0
10014fae:	000b      	movs	r3, r1
10014fb0:	0020      	movs	r0, r4
10014fb2:	0029      	movs	r1, r5
10014fb4:	f002 f8ba 	bl	1001712c <__aeabi_dsub>
10014fb8:	f7ff ffb2 	bl	10014f20 <__aeabi_d2uiz>
10014fbc:	0031      	movs	r1, r6
10014fbe:	bd70      	pop	{r4, r5, r6, pc}
10014fc0:	3df00000 	.word	0x3df00000
10014fc4:	41f00000 	.word	0x41f00000

10014fc8 <__aeabi_l2f>:
10014fc8:	b5d0      	push	{r4, r6, r7, lr}
10014fca:	2601      	movs	r6, #1
10014fcc:	0002      	movs	r2, r0
10014fce:	000b      	movs	r3, r1
10014fd0:	4f13      	ldr	r7, [pc, #76]	; (10015020 <__aeabi_l2f+0x58>)
10014fd2:	4276      	negs	r6, r6
10014fd4:	18b6      	adds	r6, r6, r2
10014fd6:	415f      	adcs	r7, r3
10014fd8:	0004      	movs	r4, r0
10014fda:	4812      	ldr	r0, [pc, #72]	; (10015024 <__aeabi_l2f+0x5c>)
10014fdc:	4287      	cmp	r7, r0
10014fde:	d919      	bls.n	10015014 <__aeabi_l2f+0x4c>
10014fe0:	0552      	lsls	r2, r2, #21
10014fe2:	d004      	beq.n	10014fee <__aeabi_l2f+0x26>
10014fe4:	2380      	movs	r3, #128	; 0x80
10014fe6:	0ae4      	lsrs	r4, r4, #11
10014fe8:	02e4      	lsls	r4, r4, #11
10014fea:	011b      	lsls	r3, r3, #4
10014fec:	431c      	orrs	r4, r3
10014fee:	0008      	movs	r0, r1
10014ff0:	f002 fc26 	bl	10017840 <__aeabi_i2d>
10014ff4:	2200      	movs	r2, #0
10014ff6:	4b0c      	ldr	r3, [pc, #48]	; (10015028 <__aeabi_l2f+0x60>)
10014ff8:	f001 fe1e 	bl	10016c38 <__aeabi_dmul>
10014ffc:	0006      	movs	r6, r0
10014ffe:	000f      	movs	r7, r1
10015000:	0020      	movs	r0, r4
10015002:	f002 fc5f 	bl	100178c4 <__aeabi_ui2d>
10015006:	0032      	movs	r2, r6
10015008:	003b      	movs	r3, r7
1001500a:	f000 fec5 	bl	10015d98 <__aeabi_dadd>
1001500e:	f002 fce5 	bl	100179dc <__aeabi_d2f>
10015012:	bdd0      	pop	{r4, r6, r7, pc}
10015014:	4287      	cmp	r7, r0
10015016:	d1ea      	bne.n	10014fee <__aeabi_l2f+0x26>
10015018:	1cb0      	adds	r0, r6, #2
1001501a:	d8e1      	bhi.n	10014fe0 <__aeabi_l2f+0x18>
1001501c:	e7e7      	b.n	10014fee <__aeabi_l2f+0x26>
1001501e:	46c0      	nop			; (mov r8, r8)
10015020:	001fffff 	.word	0x001fffff
10015024:	003fffff 	.word	0x003fffff
10015028:	41f00000 	.word	0x41f00000

1001502c <__gnu_ldivmod_helper>:
1001502c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001502e:	b083      	sub	sp, #12
10015030:	0016      	movs	r6, r2
10015032:	001f      	movs	r7, r3
10015034:	9000      	str	r0, [sp, #0]
10015036:	9101      	str	r1, [sp, #4]
10015038:	f002 fd7a 	bl	10017b30 <__divdi3>
1001503c:	0004      	movs	r4, r0
1001503e:	000d      	movs	r5, r1
10015040:	0002      	movs	r2, r0
10015042:	000b      	movs	r3, r1
10015044:	0030      	movs	r0, r6
10015046:	0039      	movs	r1, r7
10015048:	f7ff ff26 	bl	10014e98 <__aeabi_lmul>
1001504c:	9a00      	ldr	r2, [sp, #0]
1001504e:	9b01      	ldr	r3, [sp, #4]
10015050:	1a12      	subs	r2, r2, r0
10015052:	418b      	sbcs	r3, r1
10015054:	9908      	ldr	r1, [sp, #32]
10015056:	0020      	movs	r0, r4
10015058:	600a      	str	r2, [r1, #0]
1001505a:	604b      	str	r3, [r1, #4]
1001505c:	0029      	movs	r1, r5
1001505e:	b003      	add	sp, #12
10015060:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015062:	46c0      	nop			; (mov r8, r8)

10015064 <__aeabi_fadd>:
10015064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015066:	024a      	lsls	r2, r1, #9
10015068:	0243      	lsls	r3, r0, #9
1001506a:	0044      	lsls	r4, r0, #1
1001506c:	004e      	lsls	r6, r1, #1
1001506e:	0fc5      	lsrs	r5, r0, #31
10015070:	0e24      	lsrs	r4, r4, #24
10015072:	0028      	movs	r0, r5
10015074:	099b      	lsrs	r3, r3, #6
10015076:	0e36      	lsrs	r6, r6, #24
10015078:	0fc9      	lsrs	r1, r1, #31
1001507a:	0992      	lsrs	r2, r2, #6
1001507c:	428d      	cmp	r5, r1
1001507e:	d059      	beq.n	10015134 <__aeabi_fadd+0xd0>
10015080:	1ba0      	subs	r0, r4, r6
10015082:	2800      	cmp	r0, #0
10015084:	dc00      	bgt.n	10015088 <__aeabi_fadd+0x24>
10015086:	e08d      	b.n	100151a4 <__aeabi_fadd+0x140>
10015088:	2e00      	cmp	r6, #0
1001508a:	d11a      	bne.n	100150c2 <__aeabi_fadd+0x5e>
1001508c:	2a00      	cmp	r2, #0
1001508e:	d000      	beq.n	10015092 <__aeabi_fadd+0x2e>
10015090:	e079      	b.n	10015186 <__aeabi_fadd+0x122>
10015092:	075a      	lsls	r2, r3, #29
10015094:	d004      	beq.n	100150a0 <__aeabi_fadd+0x3c>
10015096:	220f      	movs	r2, #15
10015098:	401a      	ands	r2, r3
1001509a:	2a04      	cmp	r2, #4
1001509c:	d000      	beq.n	100150a0 <__aeabi_fadd+0x3c>
1001509e:	3304      	adds	r3, #4
100150a0:	015a      	lsls	r2, r3, #5
100150a2:	d538      	bpl.n	10015116 <__aeabi_fadd+0xb2>
100150a4:	3401      	adds	r4, #1
100150a6:	2cff      	cmp	r4, #255	; 0xff
100150a8:	d100      	bne.n	100150ac <__aeabi_fadd+0x48>
100150aa:	e089      	b.n	100151c0 <__aeabi_fadd+0x15c>
100150ac:	0028      	movs	r0, r5
100150ae:	019b      	lsls	r3, r3, #6
100150b0:	0a5b      	lsrs	r3, r3, #9
100150b2:	b2e4      	uxtb	r4, r4
100150b4:	025b      	lsls	r3, r3, #9
100150b6:	05e4      	lsls	r4, r4, #23
100150b8:	0a5b      	lsrs	r3, r3, #9
100150ba:	4323      	orrs	r3, r4
100150bc:	07c0      	lsls	r0, r0, #31
100150be:	4318      	orrs	r0, r3
100150c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100150c2:	2cff      	cmp	r4, #255	; 0xff
100150c4:	d0e5      	beq.n	10015092 <__aeabi_fadd+0x2e>
100150c6:	2180      	movs	r1, #128	; 0x80
100150c8:	04c9      	lsls	r1, r1, #19
100150ca:	430a      	orrs	r2, r1
100150cc:	281b      	cmp	r0, #27
100150ce:	dd00      	ble.n	100150d2 <__aeabi_fadd+0x6e>
100150d0:	e089      	b.n	100151e6 <__aeabi_fadd+0x182>
100150d2:	0016      	movs	r6, r2
100150d4:	2120      	movs	r1, #32
100150d6:	40c6      	lsrs	r6, r0
100150d8:	1a08      	subs	r0, r1, r0
100150da:	4082      	lsls	r2, r0
100150dc:	1e51      	subs	r1, r2, #1
100150de:	418a      	sbcs	r2, r1
100150e0:	4332      	orrs	r2, r6
100150e2:	1a9b      	subs	r3, r3, r2
100150e4:	015a      	lsls	r2, r3, #5
100150e6:	d514      	bpl.n	10015112 <__aeabi_fadd+0xae>
100150e8:	019b      	lsls	r3, r3, #6
100150ea:	099e      	lsrs	r6, r3, #6
100150ec:	0030      	movs	r0, r6
100150ee:	f002 fd01 	bl	10017af4 <__clzsi2>
100150f2:	3805      	subs	r0, #5
100150f4:	4086      	lsls	r6, r0
100150f6:	4284      	cmp	r4, r0
100150f8:	dc65      	bgt.n	100151c6 <__aeabi_fadd+0x162>
100150fa:	1b04      	subs	r4, r0, r4
100150fc:	0033      	movs	r3, r6
100150fe:	2020      	movs	r0, #32
10015100:	3401      	adds	r4, #1
10015102:	40e3      	lsrs	r3, r4
10015104:	1b04      	subs	r4, r0, r4
10015106:	40a6      	lsls	r6, r4
10015108:	1e72      	subs	r2, r6, #1
1001510a:	4196      	sbcs	r6, r2
1001510c:	2400      	movs	r4, #0
1001510e:	4333      	orrs	r3, r6
10015110:	e7bf      	b.n	10015092 <__aeabi_fadd+0x2e>
10015112:	075a      	lsls	r2, r3, #29
10015114:	d1bf      	bne.n	10015096 <__aeabi_fadd+0x32>
10015116:	08df      	lsrs	r7, r3, #3
10015118:	0028      	movs	r0, r5
1001511a:	2cff      	cmp	r4, #255	; 0xff
1001511c:	d12f      	bne.n	1001517e <__aeabi_fadd+0x11a>
1001511e:	2f00      	cmp	r7, #0
10015120:	d100      	bne.n	10015124 <__aeabi_fadd+0xc0>
10015122:	e087      	b.n	10015234 <__aeabi_fadd+0x1d0>
10015124:	2280      	movs	r2, #128	; 0x80
10015126:	03d2      	lsls	r2, r2, #15
10015128:	0013      	movs	r3, r2
1001512a:	433b      	orrs	r3, r7
1001512c:	025b      	lsls	r3, r3, #9
1001512e:	0a5b      	lsrs	r3, r3, #9
10015130:	24ff      	movs	r4, #255	; 0xff
10015132:	e7bf      	b.n	100150b4 <__aeabi_fadd+0x50>
10015134:	1ba1      	subs	r1, r4, r6
10015136:	2900      	cmp	r1, #0
10015138:	dd49      	ble.n	100151ce <__aeabi_fadd+0x16a>
1001513a:	2e00      	cmp	r6, #0
1001513c:	d029      	beq.n	10015192 <__aeabi_fadd+0x12e>
1001513e:	2cff      	cmp	r4, #255	; 0xff
10015140:	d0a7      	beq.n	10015092 <__aeabi_fadd+0x2e>
10015142:	2680      	movs	r6, #128	; 0x80
10015144:	04f6      	lsls	r6, r6, #19
10015146:	4332      	orrs	r2, r6
10015148:	291b      	cmp	r1, #27
1001514a:	dd00      	ble.n	1001514e <__aeabi_fadd+0xea>
1001514c:	e08d      	b.n	1001526a <__aeabi_fadd+0x206>
1001514e:	0017      	movs	r7, r2
10015150:	2620      	movs	r6, #32
10015152:	40cf      	lsrs	r7, r1
10015154:	1a71      	subs	r1, r6, r1
10015156:	408a      	lsls	r2, r1
10015158:	1e51      	subs	r1, r2, #1
1001515a:	418a      	sbcs	r2, r1
1001515c:	433a      	orrs	r2, r7
1001515e:	189b      	adds	r3, r3, r2
10015160:	015a      	lsls	r2, r3, #5
10015162:	d5d6      	bpl.n	10015112 <__aeabi_fadd+0xae>
10015164:	3401      	adds	r4, #1
10015166:	2cff      	cmp	r4, #255	; 0xff
10015168:	d064      	beq.n	10015234 <__aeabi_fadd+0x1d0>
1001516a:	2201      	movs	r2, #1
1001516c:	4976      	ldr	r1, [pc, #472]	; (10015348 <__aeabi_fadd+0x2e4>)
1001516e:	401a      	ands	r2, r3
10015170:	085b      	lsrs	r3, r3, #1
10015172:	400b      	ands	r3, r1
10015174:	4313      	orrs	r3, r2
10015176:	e78c      	b.n	10015092 <__aeabi_fadd+0x2e>
10015178:	1e03      	subs	r3, r0, #0
1001517a:	d1ca      	bne.n	10015112 <__aeabi_fadd+0xae>
1001517c:	2000      	movs	r0, #0
1001517e:	027b      	lsls	r3, r7, #9
10015180:	0a5b      	lsrs	r3, r3, #9
10015182:	b2e4      	uxtb	r4, r4
10015184:	e796      	b.n	100150b4 <__aeabi_fadd+0x50>
10015186:	3801      	subs	r0, #1
10015188:	2800      	cmp	r0, #0
1001518a:	d0aa      	beq.n	100150e2 <__aeabi_fadd+0x7e>
1001518c:	2cff      	cmp	r4, #255	; 0xff
1001518e:	d19d      	bne.n	100150cc <__aeabi_fadd+0x68>
10015190:	e77f      	b.n	10015092 <__aeabi_fadd+0x2e>
10015192:	2a00      	cmp	r2, #0
10015194:	d100      	bne.n	10015198 <__aeabi_fadd+0x134>
10015196:	e77c      	b.n	10015092 <__aeabi_fadd+0x2e>
10015198:	3901      	subs	r1, #1
1001519a:	2900      	cmp	r1, #0
1001519c:	d0df      	beq.n	1001515e <__aeabi_fadd+0xfa>
1001519e:	2cff      	cmp	r4, #255	; 0xff
100151a0:	d1d2      	bne.n	10015148 <__aeabi_fadd+0xe4>
100151a2:	e776      	b.n	10015092 <__aeabi_fadd+0x2e>
100151a4:	2800      	cmp	r0, #0
100151a6:	d120      	bne.n	100151ea <__aeabi_fadd+0x186>
100151a8:	1c60      	adds	r0, r4, #1
100151aa:	b2c0      	uxtb	r0, r0
100151ac:	2801      	cmp	r0, #1
100151ae:	dd53      	ble.n	10015258 <__aeabi_fadd+0x1f4>
100151b0:	2780      	movs	r7, #128	; 0x80
100151b2:	1a9e      	subs	r6, r3, r2
100151b4:	04ff      	lsls	r7, r7, #19
100151b6:	4037      	ands	r7, r6
100151b8:	d02f      	beq.n	1001521a <__aeabi_fadd+0x1b6>
100151ba:	1ad6      	subs	r6, r2, r3
100151bc:	000d      	movs	r5, r1
100151be:	e795      	b.n	100150ec <__aeabi_fadd+0x88>
100151c0:	0028      	movs	r0, r5
100151c2:	2300      	movs	r3, #0
100151c4:	e776      	b.n	100150b4 <__aeabi_fadd+0x50>
100151c6:	4b61      	ldr	r3, [pc, #388]	; (1001534c <__aeabi_fadd+0x2e8>)
100151c8:	1a24      	subs	r4, r4, r0
100151ca:	4033      	ands	r3, r6
100151cc:	e761      	b.n	10015092 <__aeabi_fadd+0x2e>
100151ce:	2900      	cmp	r1, #0
100151d0:	d14d      	bne.n	1001526e <__aeabi_fadd+0x20a>
100151d2:	1c61      	adds	r1, r4, #1
100151d4:	b2ce      	uxtb	r6, r1
100151d6:	2e01      	cmp	r6, #1
100151d8:	dd2f      	ble.n	1001523a <__aeabi_fadd+0x1d6>
100151da:	29ff      	cmp	r1, #255	; 0xff
100151dc:	d02a      	beq.n	10015234 <__aeabi_fadd+0x1d0>
100151de:	189b      	adds	r3, r3, r2
100151e0:	085b      	lsrs	r3, r3, #1
100151e2:	000c      	movs	r4, r1
100151e4:	e755      	b.n	10015092 <__aeabi_fadd+0x2e>
100151e6:	2201      	movs	r2, #1
100151e8:	e77b      	b.n	100150e2 <__aeabi_fadd+0x7e>
100151ea:	2c00      	cmp	r4, #0
100151ec:	d11b      	bne.n	10015226 <__aeabi_fadd+0x1c2>
100151ee:	2b00      	cmp	r3, #0
100151f0:	d05b      	beq.n	100152aa <__aeabi_fadd+0x246>
100151f2:	43c0      	mvns	r0, r0
100151f4:	2800      	cmp	r0, #0
100151f6:	d00c      	beq.n	10015212 <__aeabi_fadd+0x1ae>
100151f8:	2eff      	cmp	r6, #255	; 0xff
100151fa:	d07e      	beq.n	100152fa <__aeabi_fadd+0x296>
100151fc:	281b      	cmp	r0, #27
100151fe:	dd00      	ble.n	10015202 <__aeabi_fadd+0x19e>
10015200:	e092      	b.n	10015328 <__aeabi_fadd+0x2c4>
10015202:	001d      	movs	r5, r3
10015204:	2420      	movs	r4, #32
10015206:	40c5      	lsrs	r5, r0
10015208:	1a20      	subs	r0, r4, r0
1001520a:	4083      	lsls	r3, r0
1001520c:	1e58      	subs	r0, r3, #1
1001520e:	4183      	sbcs	r3, r0
10015210:	432b      	orrs	r3, r5
10015212:	1ad3      	subs	r3, r2, r3
10015214:	0034      	movs	r4, r6
10015216:	000d      	movs	r5, r1
10015218:	e764      	b.n	100150e4 <__aeabi_fadd+0x80>
1001521a:	2e00      	cmp	r6, #0
1001521c:	d000      	beq.n	10015220 <__aeabi_fadd+0x1bc>
1001521e:	e765      	b.n	100150ec <__aeabi_fadd+0x88>
10015220:	2000      	movs	r0, #0
10015222:	2400      	movs	r4, #0
10015224:	e7ab      	b.n	1001517e <__aeabi_fadd+0x11a>
10015226:	2eff      	cmp	r6, #255	; 0xff
10015228:	d067      	beq.n	100152fa <__aeabi_fadd+0x296>
1001522a:	2480      	movs	r4, #128	; 0x80
1001522c:	04e4      	lsls	r4, r4, #19
1001522e:	4240      	negs	r0, r0
10015230:	4323      	orrs	r3, r4
10015232:	e7e3      	b.n	100151fc <__aeabi_fadd+0x198>
10015234:	24ff      	movs	r4, #255	; 0xff
10015236:	2300      	movs	r3, #0
10015238:	e73c      	b.n	100150b4 <__aeabi_fadd+0x50>
1001523a:	2c00      	cmp	r4, #0
1001523c:	d161      	bne.n	10015302 <__aeabi_fadd+0x29e>
1001523e:	2b00      	cmp	r3, #0
10015240:	d07e      	beq.n	10015340 <__aeabi_fadd+0x2dc>
10015242:	2a00      	cmp	r2, #0
10015244:	d100      	bne.n	10015248 <__aeabi_fadd+0x1e4>
10015246:	e724      	b.n	10015092 <__aeabi_fadd+0x2e>
10015248:	189b      	adds	r3, r3, r2
1001524a:	015a      	lsls	r2, r3, #5
1001524c:	d400      	bmi.n	10015250 <__aeabi_fadd+0x1ec>
1001524e:	e760      	b.n	10015112 <__aeabi_fadd+0xae>
10015250:	4a3e      	ldr	r2, [pc, #248]	; (1001534c <__aeabi_fadd+0x2e8>)
10015252:	000c      	movs	r4, r1
10015254:	4013      	ands	r3, r2
10015256:	e71c      	b.n	10015092 <__aeabi_fadd+0x2e>
10015258:	2c00      	cmp	r4, #0
1001525a:	d11e      	bne.n	1001529a <__aeabi_fadd+0x236>
1001525c:	2b00      	cmp	r3, #0
1001525e:	d12f      	bne.n	100152c0 <__aeabi_fadd+0x25c>
10015260:	2a00      	cmp	r2, #0
10015262:	d066      	beq.n	10015332 <__aeabi_fadd+0x2ce>
10015264:	0013      	movs	r3, r2
10015266:	000d      	movs	r5, r1
10015268:	e713      	b.n	10015092 <__aeabi_fadd+0x2e>
1001526a:	2201      	movs	r2, #1
1001526c:	e777      	b.n	1001515e <__aeabi_fadd+0xfa>
1001526e:	2c00      	cmp	r4, #0
10015270:	d11f      	bne.n	100152b2 <__aeabi_fadd+0x24e>
10015272:	2b00      	cmp	r3, #0
10015274:	d05a      	beq.n	1001532c <__aeabi_fadd+0x2c8>
10015276:	43c9      	mvns	r1, r1
10015278:	2900      	cmp	r1, #0
1001527a:	d00b      	beq.n	10015294 <__aeabi_fadd+0x230>
1001527c:	2eff      	cmp	r6, #255	; 0xff
1001527e:	d050      	beq.n	10015322 <__aeabi_fadd+0x2be>
10015280:	291b      	cmp	r1, #27
10015282:	dc5f      	bgt.n	10015344 <__aeabi_fadd+0x2e0>
10015284:	001f      	movs	r7, r3
10015286:	2420      	movs	r4, #32
10015288:	40cf      	lsrs	r7, r1
1001528a:	1a61      	subs	r1, r4, r1
1001528c:	408b      	lsls	r3, r1
1001528e:	1e59      	subs	r1, r3, #1
10015290:	418b      	sbcs	r3, r1
10015292:	433b      	orrs	r3, r7
10015294:	189b      	adds	r3, r3, r2
10015296:	0034      	movs	r4, r6
10015298:	e762      	b.n	10015160 <__aeabi_fadd+0xfc>
1001529a:	2b00      	cmp	r3, #0
1001529c:	d11c      	bne.n	100152d8 <__aeabi_fadd+0x274>
1001529e:	2a00      	cmp	r2, #0
100152a0:	d04a      	beq.n	10015338 <__aeabi_fadd+0x2d4>
100152a2:	0013      	movs	r3, r2
100152a4:	000d      	movs	r5, r1
100152a6:	24ff      	movs	r4, #255	; 0xff
100152a8:	e6f3      	b.n	10015092 <__aeabi_fadd+0x2e>
100152aa:	0013      	movs	r3, r2
100152ac:	0034      	movs	r4, r6
100152ae:	000d      	movs	r5, r1
100152b0:	e6ef      	b.n	10015092 <__aeabi_fadd+0x2e>
100152b2:	2eff      	cmp	r6, #255	; 0xff
100152b4:	d035      	beq.n	10015322 <__aeabi_fadd+0x2be>
100152b6:	2480      	movs	r4, #128	; 0x80
100152b8:	04e4      	lsls	r4, r4, #19
100152ba:	4249      	negs	r1, r1
100152bc:	4323      	orrs	r3, r4
100152be:	e7df      	b.n	10015280 <__aeabi_fadd+0x21c>
100152c0:	2a00      	cmp	r2, #0
100152c2:	d100      	bne.n	100152c6 <__aeabi_fadd+0x262>
100152c4:	e6e5      	b.n	10015092 <__aeabi_fadd+0x2e>
100152c6:	2780      	movs	r7, #128	; 0x80
100152c8:	1a98      	subs	r0, r3, r2
100152ca:	04ff      	lsls	r7, r7, #19
100152cc:	4007      	ands	r7, r0
100152ce:	d100      	bne.n	100152d2 <__aeabi_fadd+0x26e>
100152d0:	e752      	b.n	10015178 <__aeabi_fadd+0x114>
100152d2:	1ad3      	subs	r3, r2, r3
100152d4:	000d      	movs	r5, r1
100152d6:	e6dc      	b.n	10015092 <__aeabi_fadd+0x2e>
100152d8:	24ff      	movs	r4, #255	; 0xff
100152da:	2a00      	cmp	r2, #0
100152dc:	d100      	bne.n	100152e0 <__aeabi_fadd+0x27c>
100152de:	e6d8      	b.n	10015092 <__aeabi_fadd+0x2e>
100152e0:	2080      	movs	r0, #128	; 0x80
100152e2:	08db      	lsrs	r3, r3, #3
100152e4:	03c0      	lsls	r0, r0, #15
100152e6:	4203      	tst	r3, r0
100152e8:	d004      	beq.n	100152f4 <__aeabi_fadd+0x290>
100152ea:	08d2      	lsrs	r2, r2, #3
100152ec:	4202      	tst	r2, r0
100152ee:	d101      	bne.n	100152f4 <__aeabi_fadd+0x290>
100152f0:	0013      	movs	r3, r2
100152f2:	000d      	movs	r5, r1
100152f4:	00db      	lsls	r3, r3, #3
100152f6:	24ff      	movs	r4, #255	; 0xff
100152f8:	e6cb      	b.n	10015092 <__aeabi_fadd+0x2e>
100152fa:	0013      	movs	r3, r2
100152fc:	24ff      	movs	r4, #255	; 0xff
100152fe:	000d      	movs	r5, r1
10015300:	e6c7      	b.n	10015092 <__aeabi_fadd+0x2e>
10015302:	2b00      	cmp	r3, #0
10015304:	d00d      	beq.n	10015322 <__aeabi_fadd+0x2be>
10015306:	24ff      	movs	r4, #255	; 0xff
10015308:	2a00      	cmp	r2, #0
1001530a:	d100      	bne.n	1001530e <__aeabi_fadd+0x2aa>
1001530c:	e6c1      	b.n	10015092 <__aeabi_fadd+0x2e>
1001530e:	2180      	movs	r1, #128	; 0x80
10015310:	08db      	lsrs	r3, r3, #3
10015312:	03c9      	lsls	r1, r1, #15
10015314:	420b      	tst	r3, r1
10015316:	d0ed      	beq.n	100152f4 <__aeabi_fadd+0x290>
10015318:	08d2      	lsrs	r2, r2, #3
1001531a:	420a      	tst	r2, r1
1001531c:	d1ea      	bne.n	100152f4 <__aeabi_fadd+0x290>
1001531e:	0013      	movs	r3, r2
10015320:	e7e8      	b.n	100152f4 <__aeabi_fadd+0x290>
10015322:	0013      	movs	r3, r2
10015324:	24ff      	movs	r4, #255	; 0xff
10015326:	e6b4      	b.n	10015092 <__aeabi_fadd+0x2e>
10015328:	2301      	movs	r3, #1
1001532a:	e772      	b.n	10015212 <__aeabi_fadd+0x1ae>
1001532c:	0013      	movs	r3, r2
1001532e:	0034      	movs	r4, r6
10015330:	e6af      	b.n	10015092 <__aeabi_fadd+0x2e>
10015332:	2700      	movs	r7, #0
10015334:	2000      	movs	r0, #0
10015336:	e722      	b.n	1001517e <__aeabi_fadd+0x11a>
10015338:	2780      	movs	r7, #128	; 0x80
1001533a:	2000      	movs	r0, #0
1001533c:	03ff      	lsls	r7, r7, #15
1001533e:	e6f1      	b.n	10015124 <__aeabi_fadd+0xc0>
10015340:	0013      	movs	r3, r2
10015342:	e6a6      	b.n	10015092 <__aeabi_fadd+0x2e>
10015344:	2301      	movs	r3, #1
10015346:	e7a5      	b.n	10015294 <__aeabi_fadd+0x230>
10015348:	7dffffff 	.word	0x7dffffff
1001534c:	fbffffff 	.word	0xfbffffff

10015350 <__aeabi_fdiv>:
10015350:	b5f0      	push	{r4, r5, r6, r7, lr}
10015352:	4656      	mov	r6, sl
10015354:	4644      	mov	r4, r8
10015356:	465f      	mov	r7, fp
10015358:	464d      	mov	r5, r9
1001535a:	b4f0      	push	{r4, r5, r6, r7}
1001535c:	0244      	lsls	r4, r0, #9
1001535e:	0046      	lsls	r6, r0, #1
10015360:	0fc7      	lsrs	r7, r0, #31
10015362:	b083      	sub	sp, #12
10015364:	4688      	mov	r8, r1
10015366:	0a65      	lsrs	r5, r4, #9
10015368:	0e36      	lsrs	r6, r6, #24
1001536a:	46ba      	mov	sl, r7
1001536c:	d03d      	beq.n	100153ea <__aeabi_fdiv+0x9a>
1001536e:	2eff      	cmp	r6, #255	; 0xff
10015370:	d022      	beq.n	100153b8 <__aeabi_fdiv+0x68>
10015372:	2300      	movs	r3, #0
10015374:	00ec      	lsls	r4, r5, #3
10015376:	2580      	movs	r5, #128	; 0x80
10015378:	4699      	mov	r9, r3
1001537a:	469b      	mov	fp, r3
1001537c:	04ed      	lsls	r5, r5, #19
1001537e:	4325      	orrs	r5, r4
10015380:	3e7f      	subs	r6, #127	; 0x7f
10015382:	4643      	mov	r3, r8
10015384:	025c      	lsls	r4, r3, #9
10015386:	0058      	lsls	r0, r3, #1
10015388:	0fdb      	lsrs	r3, r3, #31
1001538a:	0a64      	lsrs	r4, r4, #9
1001538c:	0e00      	lsrs	r0, r0, #24
1001538e:	4698      	mov	r8, r3
10015390:	d036      	beq.n	10015400 <__aeabi_fdiv+0xb0>
10015392:	28ff      	cmp	r0, #255	; 0xff
10015394:	d030      	beq.n	100153f8 <__aeabi_fdiv+0xa8>
10015396:	2380      	movs	r3, #128	; 0x80
10015398:	2100      	movs	r1, #0
1001539a:	00e4      	lsls	r4, r4, #3
1001539c:	04db      	lsls	r3, r3, #19
1001539e:	431c      	orrs	r4, r3
100153a0:	387f      	subs	r0, #127	; 0x7f
100153a2:	1a30      	subs	r0, r6, r0
100153a4:	9001      	str	r0, [sp, #4]
100153a6:	4648      	mov	r0, r9
100153a8:	4642      	mov	r2, r8
100153aa:	4308      	orrs	r0, r1
100153ac:	4e72      	ldr	r6, [pc, #456]	; (10015578 <__aeabi_fdiv+0x228>)
100153ae:	0080      	lsls	r0, r0, #2
100153b0:	5830      	ldr	r0, [r6, r0]
100153b2:	407a      	eors	r2, r7
100153b4:	0013      	movs	r3, r2
100153b6:	4687      	mov	pc, r0
100153b8:	2d00      	cmp	r5, #0
100153ba:	d144      	bne.n	10015446 <__aeabi_fdiv+0xf6>
100153bc:	2308      	movs	r3, #8
100153be:	4699      	mov	r9, r3
100153c0:	3b06      	subs	r3, #6
100153c2:	469b      	mov	fp, r3
100153c4:	e7dd      	b.n	10015382 <__aeabi_fdiv+0x32>
100153c6:	2201      	movs	r2, #1
100153c8:	20ff      	movs	r0, #255	; 0xff
100153ca:	2400      	movs	r4, #0
100153cc:	401a      	ands	r2, r3
100153ce:	0264      	lsls	r4, r4, #9
100153d0:	05c3      	lsls	r3, r0, #23
100153d2:	0a64      	lsrs	r4, r4, #9
100153d4:	07d2      	lsls	r2, r2, #31
100153d6:	431c      	orrs	r4, r3
100153d8:	4314      	orrs	r4, r2
100153da:	0020      	movs	r0, r4
100153dc:	b003      	add	sp, #12
100153de:	bc3c      	pop	{r2, r3, r4, r5}
100153e0:	4690      	mov	r8, r2
100153e2:	4699      	mov	r9, r3
100153e4:	46a2      	mov	sl, r4
100153e6:	46ab      	mov	fp, r5
100153e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100153ea:	2d00      	cmp	r5, #0
100153ec:	d120      	bne.n	10015430 <__aeabi_fdiv+0xe0>
100153ee:	2304      	movs	r3, #4
100153f0:	4699      	mov	r9, r3
100153f2:	3b03      	subs	r3, #3
100153f4:	469b      	mov	fp, r3
100153f6:	e7c4      	b.n	10015382 <__aeabi_fdiv+0x32>
100153f8:	2c00      	cmp	r4, #0
100153fa:	d117      	bne.n	1001542c <__aeabi_fdiv+0xdc>
100153fc:	2102      	movs	r1, #2
100153fe:	e002      	b.n	10015406 <__aeabi_fdiv+0xb6>
10015400:	2c00      	cmp	r4, #0
10015402:	d10a      	bne.n	1001541a <__aeabi_fdiv+0xca>
10015404:	2101      	movs	r1, #1
10015406:	1a32      	subs	r2, r6, r0
10015408:	9201      	str	r2, [sp, #4]
1001540a:	464a      	mov	r2, r9
1001540c:	4643      	mov	r3, r8
1001540e:	430a      	orrs	r2, r1
10015410:	485a      	ldr	r0, [pc, #360]	; (1001557c <__aeabi_fdiv+0x22c>)
10015412:	0092      	lsls	r2, r2, #2
10015414:	5882      	ldr	r2, [r0, r2]
10015416:	407b      	eors	r3, r7
10015418:	4697      	mov	pc, r2
1001541a:	0020      	movs	r0, r4
1001541c:	f002 fb6a 	bl	10017af4 <__clzsi2>
10015420:	1f43      	subs	r3, r0, #5
10015422:	3076      	adds	r0, #118	; 0x76
10015424:	409c      	lsls	r4, r3
10015426:	4240      	negs	r0, r0
10015428:	2100      	movs	r1, #0
1001542a:	e7ba      	b.n	100153a2 <__aeabi_fdiv+0x52>
1001542c:	2103      	movs	r1, #3
1001542e:	e7b8      	b.n	100153a2 <__aeabi_fdiv+0x52>
10015430:	0028      	movs	r0, r5
10015432:	f002 fb5f 	bl	10017af4 <__clzsi2>
10015436:	1f43      	subs	r3, r0, #5
10015438:	409d      	lsls	r5, r3
1001543a:	2300      	movs	r3, #0
1001543c:	3076      	adds	r0, #118	; 0x76
1001543e:	4246      	negs	r6, r0
10015440:	4699      	mov	r9, r3
10015442:	469b      	mov	fp, r3
10015444:	e79d      	b.n	10015382 <__aeabi_fdiv+0x32>
10015446:	230c      	movs	r3, #12
10015448:	4699      	mov	r9, r3
1001544a:	3b09      	subs	r3, #9
1001544c:	469b      	mov	fp, r3
1001544e:	e798      	b.n	10015382 <__aeabi_fdiv+0x32>
10015450:	2480      	movs	r4, #128	; 0x80
10015452:	2200      	movs	r2, #0
10015454:	03e4      	lsls	r4, r4, #15
10015456:	20ff      	movs	r0, #255	; 0xff
10015458:	e7b9      	b.n	100153ce <__aeabi_fdiv+0x7e>
1001545a:	2400      	movs	r4, #0
1001545c:	46c2      	mov	sl, r8
1001545e:	468b      	mov	fp, r1
10015460:	465a      	mov	r2, fp
10015462:	4653      	mov	r3, sl
10015464:	2a02      	cmp	r2, #2
10015466:	d0ae      	beq.n	100153c6 <__aeabi_fdiv+0x76>
10015468:	2a03      	cmp	r2, #3
1001546a:	d07d      	beq.n	10015568 <__aeabi_fdiv+0x218>
1001546c:	2a01      	cmp	r2, #1
1001546e:	d131      	bne.n	100154d4 <__aeabi_fdiv+0x184>
10015470:	2201      	movs	r2, #1
10015472:	2000      	movs	r0, #0
10015474:	401a      	ands	r2, r3
10015476:	2400      	movs	r4, #0
10015478:	e7a9      	b.n	100153ce <__aeabi_fdiv+0x7e>
1001547a:	2201      	movs	r2, #1
1001547c:	1a10      	subs	r0, r2, r0
1001547e:	281b      	cmp	r0, #27
10015480:	dd56      	ble.n	10015530 <__aeabi_fdiv+0x1e0>
10015482:	401a      	ands	r2, r3
10015484:	2000      	movs	r0, #0
10015486:	2400      	movs	r4, #0
10015488:	e7a1      	b.n	100153ce <__aeabi_fdiv+0x7e>
1001548a:	2380      	movs	r3, #128	; 0x80
1001548c:	03db      	lsls	r3, r3, #15
1001548e:	421d      	tst	r5, r3
10015490:	d14b      	bne.n	1001552a <__aeabi_fdiv+0x1da>
10015492:	2380      	movs	r3, #128	; 0x80
10015494:	03db      	lsls	r3, r3, #15
10015496:	432b      	orrs	r3, r5
10015498:	025c      	lsls	r4, r3, #9
1001549a:	0a64      	lsrs	r4, r4, #9
1001549c:	003a      	movs	r2, r7
1001549e:	20ff      	movs	r0, #255	; 0xff
100154a0:	e795      	b.n	100153ce <__aeabi_fdiv+0x7e>
100154a2:	016d      	lsls	r5, r5, #5
100154a4:	0160      	lsls	r0, r4, #5
100154a6:	4285      	cmp	r5, r0
100154a8:	d230      	bcs.n	1001550c <__aeabi_fdiv+0x1bc>
100154aa:	9a01      	ldr	r2, [sp, #4]
100154ac:	2400      	movs	r4, #0
100154ae:	3a01      	subs	r2, #1
100154b0:	9201      	str	r2, [sp, #4]
100154b2:	221b      	movs	r2, #27
100154b4:	2701      	movs	r7, #1
100154b6:	0029      	movs	r1, r5
100154b8:	0064      	lsls	r4, r4, #1
100154ba:	006d      	lsls	r5, r5, #1
100154bc:	2900      	cmp	r1, #0
100154be:	db01      	blt.n	100154c4 <__aeabi_fdiv+0x174>
100154c0:	42a8      	cmp	r0, r5
100154c2:	d801      	bhi.n	100154c8 <__aeabi_fdiv+0x178>
100154c4:	1a2d      	subs	r5, r5, r0
100154c6:	433c      	orrs	r4, r7
100154c8:	3a01      	subs	r2, #1
100154ca:	2a00      	cmp	r2, #0
100154cc:	d1f3      	bne.n	100154b6 <__aeabi_fdiv+0x166>
100154ce:	1e6a      	subs	r2, r5, #1
100154d0:	4195      	sbcs	r5, r2
100154d2:	432c      	orrs	r4, r5
100154d4:	9801      	ldr	r0, [sp, #4]
100154d6:	307f      	adds	r0, #127	; 0x7f
100154d8:	2800      	cmp	r0, #0
100154da:	ddce      	ble.n	1001547a <__aeabi_fdiv+0x12a>
100154dc:	0762      	lsls	r2, r4, #29
100154de:	d004      	beq.n	100154ea <__aeabi_fdiv+0x19a>
100154e0:	220f      	movs	r2, #15
100154e2:	4022      	ands	r2, r4
100154e4:	2a04      	cmp	r2, #4
100154e6:	d000      	beq.n	100154ea <__aeabi_fdiv+0x19a>
100154e8:	3404      	adds	r4, #4
100154ea:	0122      	lsls	r2, r4, #4
100154ec:	d503      	bpl.n	100154f6 <__aeabi_fdiv+0x1a6>
100154ee:	4a24      	ldr	r2, [pc, #144]	; (10015580 <__aeabi_fdiv+0x230>)
100154f0:	9801      	ldr	r0, [sp, #4]
100154f2:	4014      	ands	r4, r2
100154f4:	3080      	adds	r0, #128	; 0x80
100154f6:	28fe      	cmp	r0, #254	; 0xfe
100154f8:	dd00      	ble.n	100154fc <__aeabi_fdiv+0x1ac>
100154fa:	e764      	b.n	100153c6 <__aeabi_fdiv+0x76>
100154fc:	2201      	movs	r2, #1
100154fe:	01a4      	lsls	r4, r4, #6
10015500:	0a64      	lsrs	r4, r4, #9
10015502:	b2c0      	uxtb	r0, r0
10015504:	401a      	ands	r2, r3
10015506:	e762      	b.n	100153ce <__aeabi_fdiv+0x7e>
10015508:	002c      	movs	r4, r5
1001550a:	e7a9      	b.n	10015460 <__aeabi_fdiv+0x110>
1001550c:	1a2d      	subs	r5, r5, r0
1001550e:	221a      	movs	r2, #26
10015510:	2401      	movs	r4, #1
10015512:	e7cf      	b.n	100154b4 <__aeabi_fdiv+0x164>
10015514:	026b      	lsls	r3, r5, #9
10015516:	d5bc      	bpl.n	10015492 <__aeabi_fdiv+0x142>
10015518:	2400      	movs	r4, #0
1001551a:	2380      	movs	r3, #128	; 0x80
1001551c:	03db      	lsls	r3, r3, #15
1001551e:	431c      	orrs	r4, r3
10015520:	0264      	lsls	r4, r4, #9
10015522:	0a64      	lsrs	r4, r4, #9
10015524:	4642      	mov	r2, r8
10015526:	20ff      	movs	r0, #255	; 0xff
10015528:	e751      	b.n	100153ce <__aeabi_fdiv+0x7e>
1001552a:	421c      	tst	r4, r3
1001552c:	d1b3      	bne.n	10015496 <__aeabi_fdiv+0x146>
1001552e:	e7f4      	b.n	1001551a <__aeabi_fdiv+0x1ca>
10015530:	0021      	movs	r1, r4
10015532:	2220      	movs	r2, #32
10015534:	40c1      	lsrs	r1, r0
10015536:	1a10      	subs	r0, r2, r0
10015538:	4084      	lsls	r4, r0
1001553a:	1e62      	subs	r2, r4, #1
1001553c:	4194      	sbcs	r4, r2
1001553e:	430c      	orrs	r4, r1
10015540:	0762      	lsls	r2, r4, #29
10015542:	d004      	beq.n	1001554e <__aeabi_fdiv+0x1fe>
10015544:	220f      	movs	r2, #15
10015546:	4022      	ands	r2, r4
10015548:	2a04      	cmp	r2, #4
1001554a:	d000      	beq.n	1001554e <__aeabi_fdiv+0x1fe>
1001554c:	3404      	adds	r4, #4
1001554e:	0162      	lsls	r2, r4, #5
10015550:	d504      	bpl.n	1001555c <__aeabi_fdiv+0x20c>
10015552:	2201      	movs	r2, #1
10015554:	2001      	movs	r0, #1
10015556:	401a      	ands	r2, r3
10015558:	2400      	movs	r4, #0
1001555a:	e738      	b.n	100153ce <__aeabi_fdiv+0x7e>
1001555c:	2201      	movs	r2, #1
1001555e:	01a4      	lsls	r4, r4, #6
10015560:	0a64      	lsrs	r4, r4, #9
10015562:	401a      	ands	r2, r3
10015564:	2000      	movs	r0, #0
10015566:	e732      	b.n	100153ce <__aeabi_fdiv+0x7e>
10015568:	2380      	movs	r3, #128	; 0x80
1001556a:	03db      	lsls	r3, r3, #15
1001556c:	431c      	orrs	r4, r3
1001556e:	0264      	lsls	r4, r4, #9
10015570:	0a64      	lsrs	r4, r4, #9
10015572:	4652      	mov	r2, sl
10015574:	20ff      	movs	r0, #255	; 0xff
10015576:	e72a      	b.n	100153ce <__aeabi_fdiv+0x7e>
10015578:	1001a2ac 	.word	0x1001a2ac
1001557c:	1001a2ec 	.word	0x1001a2ec
10015580:	f7ffffff 	.word	0xf7ffffff

10015584 <__eqsf2>:
10015584:	0243      	lsls	r3, r0, #9
10015586:	b570      	push	{r4, r5, r6, lr}
10015588:	0042      	lsls	r2, r0, #1
1001558a:	004c      	lsls	r4, r1, #1
1001558c:	0a5d      	lsrs	r5, r3, #9
1001558e:	0fc3      	lsrs	r3, r0, #31
10015590:	0248      	lsls	r0, r1, #9
10015592:	0e12      	lsrs	r2, r2, #24
10015594:	0a46      	lsrs	r6, r0, #9
10015596:	0e24      	lsrs	r4, r4, #24
10015598:	0fc9      	lsrs	r1, r1, #31
1001559a:	2aff      	cmp	r2, #255	; 0xff
1001559c:	d00f      	beq.n	100155be <__eqsf2+0x3a>
1001559e:	2cff      	cmp	r4, #255	; 0xff
100155a0:	d011      	beq.n	100155c6 <__eqsf2+0x42>
100155a2:	2001      	movs	r0, #1
100155a4:	42a2      	cmp	r2, r4
100155a6:	d000      	beq.n	100155aa <__eqsf2+0x26>
100155a8:	bd70      	pop	{r4, r5, r6, pc}
100155aa:	42b5      	cmp	r5, r6
100155ac:	d1fc      	bne.n	100155a8 <__eqsf2+0x24>
100155ae:	428b      	cmp	r3, r1
100155b0:	d00d      	beq.n	100155ce <__eqsf2+0x4a>
100155b2:	2a00      	cmp	r2, #0
100155b4:	d1f8      	bne.n	100155a8 <__eqsf2+0x24>
100155b6:	0028      	movs	r0, r5
100155b8:	1e43      	subs	r3, r0, #1
100155ba:	4198      	sbcs	r0, r3
100155bc:	e7f4      	b.n	100155a8 <__eqsf2+0x24>
100155be:	2001      	movs	r0, #1
100155c0:	2d00      	cmp	r5, #0
100155c2:	d1f1      	bne.n	100155a8 <__eqsf2+0x24>
100155c4:	e7eb      	b.n	1001559e <__eqsf2+0x1a>
100155c6:	2001      	movs	r0, #1
100155c8:	2e00      	cmp	r6, #0
100155ca:	d1ed      	bne.n	100155a8 <__eqsf2+0x24>
100155cc:	e7e9      	b.n	100155a2 <__eqsf2+0x1e>
100155ce:	2000      	movs	r0, #0
100155d0:	e7ea      	b.n	100155a8 <__eqsf2+0x24>
100155d2:	46c0      	nop			; (mov r8, r8)

100155d4 <__gesf2>:
100155d4:	0243      	lsls	r3, r0, #9
100155d6:	b5f0      	push	{r4, r5, r6, r7, lr}
100155d8:	0042      	lsls	r2, r0, #1
100155da:	0a5d      	lsrs	r5, r3, #9
100155dc:	0fc3      	lsrs	r3, r0, #31
100155de:	0248      	lsls	r0, r1, #9
100155e0:	0a44      	lsrs	r4, r0, #9
100155e2:	0048      	lsls	r0, r1, #1
100155e4:	0e12      	lsrs	r2, r2, #24
100155e6:	0e00      	lsrs	r0, r0, #24
100155e8:	0fc9      	lsrs	r1, r1, #31
100155ea:	2aff      	cmp	r2, #255	; 0xff
100155ec:	d01f      	beq.n	1001562e <__gesf2+0x5a>
100155ee:	28ff      	cmp	r0, #255	; 0xff
100155f0:	d022      	beq.n	10015638 <__gesf2+0x64>
100155f2:	2a00      	cmp	r2, #0
100155f4:	d109      	bne.n	1001560a <__gesf2+0x36>
100155f6:	426e      	negs	r6, r5
100155f8:	416e      	adcs	r6, r5
100155fa:	2800      	cmp	r0, #0
100155fc:	d10f      	bne.n	1001561e <__gesf2+0x4a>
100155fe:	2c00      	cmp	r4, #0
10015600:	d10d      	bne.n	1001561e <__gesf2+0x4a>
10015602:	2000      	movs	r0, #0
10015604:	2d00      	cmp	r5, #0
10015606:	d009      	beq.n	1001561c <__gesf2+0x48>
10015608:	e005      	b.n	10015616 <__gesf2+0x42>
1001560a:	2800      	cmp	r0, #0
1001560c:	d101      	bne.n	10015612 <__gesf2+0x3e>
1001560e:	2c00      	cmp	r4, #0
10015610:	d001      	beq.n	10015616 <__gesf2+0x42>
10015612:	428b      	cmp	r3, r1
10015614:	d013      	beq.n	1001563e <__gesf2+0x6a>
10015616:	4258      	negs	r0, r3
10015618:	2301      	movs	r3, #1
1001561a:	4318      	orrs	r0, r3
1001561c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001561e:	2e00      	cmp	r6, #0
10015620:	d0f7      	beq.n	10015612 <__gesf2+0x3e>
10015622:	4248      	negs	r0, r1
10015624:	4141      	adcs	r1, r0
10015626:	2001      	movs	r0, #1
10015628:	4249      	negs	r1, r1
1001562a:	4308      	orrs	r0, r1
1001562c:	e7f6      	b.n	1001561c <__gesf2+0x48>
1001562e:	2d00      	cmp	r5, #0
10015630:	d0dd      	beq.n	100155ee <__gesf2+0x1a>
10015632:	2002      	movs	r0, #2
10015634:	4240      	negs	r0, r0
10015636:	e7f1      	b.n	1001561c <__gesf2+0x48>
10015638:	2c00      	cmp	r4, #0
1001563a:	d0da      	beq.n	100155f2 <__gesf2+0x1e>
1001563c:	e7f9      	b.n	10015632 <__gesf2+0x5e>
1001563e:	4282      	cmp	r2, r0
10015640:	dce9      	bgt.n	10015616 <__gesf2+0x42>
10015642:	db04      	blt.n	1001564e <__gesf2+0x7a>
10015644:	42a5      	cmp	r5, r4
10015646:	d8e6      	bhi.n	10015616 <__gesf2+0x42>
10015648:	2000      	movs	r0, #0
1001564a:	42a5      	cmp	r5, r4
1001564c:	d2e6      	bcs.n	1001561c <__gesf2+0x48>
1001564e:	4258      	negs	r0, r3
10015650:	4143      	adcs	r3, r0
10015652:	2001      	movs	r0, #1
10015654:	425b      	negs	r3, r3
10015656:	4318      	orrs	r0, r3
10015658:	e7e0      	b.n	1001561c <__gesf2+0x48>
1001565a:	46c0      	nop			; (mov r8, r8)

1001565c <__lesf2>:
1001565c:	0243      	lsls	r3, r0, #9
1001565e:	b5f0      	push	{r4, r5, r6, r7, lr}
10015660:	0042      	lsls	r2, r0, #1
10015662:	004c      	lsls	r4, r1, #1
10015664:	0a5e      	lsrs	r6, r3, #9
10015666:	0fc3      	lsrs	r3, r0, #31
10015668:	0248      	lsls	r0, r1, #9
1001566a:	0e12      	lsrs	r2, r2, #24
1001566c:	0a45      	lsrs	r5, r0, #9
1001566e:	0e24      	lsrs	r4, r4, #24
10015670:	0fc9      	lsrs	r1, r1, #31
10015672:	2aff      	cmp	r2, #255	; 0xff
10015674:	d017      	beq.n	100156a6 <__lesf2+0x4a>
10015676:	2cff      	cmp	r4, #255	; 0xff
10015678:	d019      	beq.n	100156ae <__lesf2+0x52>
1001567a:	2a00      	cmp	r2, #0
1001567c:	d10b      	bne.n	10015696 <__lesf2+0x3a>
1001567e:	4270      	negs	r0, r6
10015680:	4170      	adcs	r0, r6
10015682:	2c00      	cmp	r4, #0
10015684:	d017      	beq.n	100156b6 <__lesf2+0x5a>
10015686:	2800      	cmp	r0, #0
10015688:	d007      	beq.n	1001569a <__lesf2+0x3e>
1001568a:	4248      	negs	r0, r1
1001568c:	4141      	adcs	r1, r0
1001568e:	2001      	movs	r0, #1
10015690:	4249      	negs	r1, r1
10015692:	4308      	orrs	r0, r1
10015694:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015696:	2c00      	cmp	r4, #0
10015698:	d013      	beq.n	100156c2 <__lesf2+0x66>
1001569a:	428b      	cmp	r3, r1
1001569c:	d014      	beq.n	100156c8 <__lesf2+0x6c>
1001569e:	4258      	negs	r0, r3
100156a0:	2301      	movs	r3, #1
100156a2:	4318      	orrs	r0, r3
100156a4:	e7f6      	b.n	10015694 <__lesf2+0x38>
100156a6:	2002      	movs	r0, #2
100156a8:	2e00      	cmp	r6, #0
100156aa:	d1f3      	bne.n	10015694 <__lesf2+0x38>
100156ac:	e7e3      	b.n	10015676 <__lesf2+0x1a>
100156ae:	2002      	movs	r0, #2
100156b0:	2d00      	cmp	r5, #0
100156b2:	d1ef      	bne.n	10015694 <__lesf2+0x38>
100156b4:	e7e1      	b.n	1001567a <__lesf2+0x1e>
100156b6:	2d00      	cmp	r5, #0
100156b8:	d1e5      	bne.n	10015686 <__lesf2+0x2a>
100156ba:	2000      	movs	r0, #0
100156bc:	2e00      	cmp	r6, #0
100156be:	d0e9      	beq.n	10015694 <__lesf2+0x38>
100156c0:	e7ed      	b.n	1001569e <__lesf2+0x42>
100156c2:	2d00      	cmp	r5, #0
100156c4:	d1e9      	bne.n	1001569a <__lesf2+0x3e>
100156c6:	e7ea      	b.n	1001569e <__lesf2+0x42>
100156c8:	42a2      	cmp	r2, r4
100156ca:	dce8      	bgt.n	1001569e <__lesf2+0x42>
100156cc:	db04      	blt.n	100156d8 <__lesf2+0x7c>
100156ce:	42ae      	cmp	r6, r5
100156d0:	d8e5      	bhi.n	1001569e <__lesf2+0x42>
100156d2:	2000      	movs	r0, #0
100156d4:	42ae      	cmp	r6, r5
100156d6:	d2dd      	bcs.n	10015694 <__lesf2+0x38>
100156d8:	4258      	negs	r0, r3
100156da:	4143      	adcs	r3, r0
100156dc:	2001      	movs	r0, #1
100156de:	425b      	negs	r3, r3
100156e0:	4318      	orrs	r0, r3
100156e2:	e7d7      	b.n	10015694 <__lesf2+0x38>

100156e4 <__aeabi_fmul>:
100156e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100156e6:	4657      	mov	r7, sl
100156e8:	464e      	mov	r6, r9
100156ea:	4645      	mov	r5, r8
100156ec:	0043      	lsls	r3, r0, #1
100156ee:	b4e0      	push	{r5, r6, r7}
100156f0:	0246      	lsls	r6, r0, #9
100156f2:	4688      	mov	r8, r1
100156f4:	0a76      	lsrs	r6, r6, #9
100156f6:	0e1f      	lsrs	r7, r3, #24
100156f8:	0fc4      	lsrs	r4, r0, #31
100156fa:	2f00      	cmp	r7, #0
100156fc:	d047      	beq.n	1001578e <__aeabi_fmul+0xaa>
100156fe:	2fff      	cmp	r7, #255	; 0xff
10015700:	d025      	beq.n	1001574e <__aeabi_fmul+0x6a>
10015702:	2300      	movs	r3, #0
10015704:	2580      	movs	r5, #128	; 0x80
10015706:	469a      	mov	sl, r3
10015708:	4699      	mov	r9, r3
1001570a:	00f6      	lsls	r6, r6, #3
1001570c:	04ed      	lsls	r5, r5, #19
1001570e:	432e      	orrs	r6, r5
10015710:	3f7f      	subs	r7, #127	; 0x7f
10015712:	4643      	mov	r3, r8
10015714:	4642      	mov	r2, r8
10015716:	025d      	lsls	r5, r3, #9
10015718:	0fd2      	lsrs	r2, r2, #31
1001571a:	005b      	lsls	r3, r3, #1
1001571c:	0a6d      	lsrs	r5, r5, #9
1001571e:	0e1b      	lsrs	r3, r3, #24
10015720:	4690      	mov	r8, r2
10015722:	d040      	beq.n	100157a6 <__aeabi_fmul+0xc2>
10015724:	2bff      	cmp	r3, #255	; 0xff
10015726:	d039      	beq.n	1001579c <__aeabi_fmul+0xb8>
10015728:	2280      	movs	r2, #128	; 0x80
1001572a:	2000      	movs	r0, #0
1001572c:	00ed      	lsls	r5, r5, #3
1001572e:	04d2      	lsls	r2, r2, #19
10015730:	4315      	orrs	r5, r2
10015732:	3b7f      	subs	r3, #127	; 0x7f
10015734:	18fb      	adds	r3, r7, r3
10015736:	4642      	mov	r2, r8
10015738:	4657      	mov	r7, sl
1001573a:	1c59      	adds	r1, r3, #1
1001573c:	4062      	eors	r2, r4
1001573e:	468c      	mov	ip, r1
10015740:	4307      	orrs	r7, r0
10015742:	2f0f      	cmp	r7, #15
10015744:	d85c      	bhi.n	10015800 <__aeabi_fmul+0x11c>
10015746:	496f      	ldr	r1, [pc, #444]	; (10015904 <__aeabi_fmul+0x220>)
10015748:	00bf      	lsls	r7, r7, #2
1001574a:	59c9      	ldr	r1, [r1, r7]
1001574c:	468f      	mov	pc, r1
1001574e:	2e00      	cmp	r6, #0
10015750:	d145      	bne.n	100157de <__aeabi_fmul+0xfa>
10015752:	2308      	movs	r3, #8
10015754:	469a      	mov	sl, r3
10015756:	3b06      	subs	r3, #6
10015758:	4699      	mov	r9, r3
1001575a:	e7da      	b.n	10015712 <__aeabi_fmul+0x2e>
1001575c:	4642      	mov	r2, r8
1001575e:	2802      	cmp	r0, #2
10015760:	d02d      	beq.n	100157be <__aeabi_fmul+0xda>
10015762:	2803      	cmp	r0, #3
10015764:	d100      	bne.n	10015768 <__aeabi_fmul+0x84>
10015766:	e0c3      	b.n	100158f0 <__aeabi_fmul+0x20c>
10015768:	2801      	cmp	r0, #1
1001576a:	d000      	beq.n	1001576e <__aeabi_fmul+0x8a>
1001576c:	e0a2      	b.n	100158b4 <__aeabi_fmul+0x1d0>
1001576e:	2500      	movs	r5, #0
10015770:	2600      	movs	r6, #0
10015772:	4002      	ands	r2, r0
10015774:	b2d4      	uxtb	r4, r2
10015776:	0276      	lsls	r6, r6, #9
10015778:	05ed      	lsls	r5, r5, #23
1001577a:	0a76      	lsrs	r6, r6, #9
1001577c:	432e      	orrs	r6, r5
1001577e:	07e4      	lsls	r4, r4, #31
10015780:	4326      	orrs	r6, r4
10015782:	0030      	movs	r0, r6
10015784:	bc1c      	pop	{r2, r3, r4}
10015786:	4690      	mov	r8, r2
10015788:	4699      	mov	r9, r3
1001578a:	46a2      	mov	sl, r4
1001578c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001578e:	2e00      	cmp	r6, #0
10015790:	d11a      	bne.n	100157c8 <__aeabi_fmul+0xe4>
10015792:	2304      	movs	r3, #4
10015794:	469a      	mov	sl, r3
10015796:	3b03      	subs	r3, #3
10015798:	4699      	mov	r9, r3
1001579a:	e7ba      	b.n	10015712 <__aeabi_fmul+0x2e>
1001579c:	002a      	movs	r2, r5
1001579e:	1e51      	subs	r1, r2, #1
100157a0:	418a      	sbcs	r2, r1
100157a2:	1c90      	adds	r0, r2, #2
100157a4:	e7c6      	b.n	10015734 <__aeabi_fmul+0x50>
100157a6:	2001      	movs	r0, #1
100157a8:	2d00      	cmp	r5, #0
100157aa:	d0c3      	beq.n	10015734 <__aeabi_fmul+0x50>
100157ac:	0028      	movs	r0, r5
100157ae:	f002 f9a1 	bl	10017af4 <__clzsi2>
100157b2:	1f43      	subs	r3, r0, #5
100157b4:	3076      	adds	r0, #118	; 0x76
100157b6:	409d      	lsls	r5, r3
100157b8:	4243      	negs	r3, r0
100157ba:	2000      	movs	r0, #0
100157bc:	e7ba      	b.n	10015734 <__aeabi_fmul+0x50>
100157be:	2401      	movs	r4, #1
100157c0:	25ff      	movs	r5, #255	; 0xff
100157c2:	4014      	ands	r4, r2
100157c4:	2600      	movs	r6, #0
100157c6:	e7d6      	b.n	10015776 <__aeabi_fmul+0x92>
100157c8:	0030      	movs	r0, r6
100157ca:	f002 f993 	bl	10017af4 <__clzsi2>
100157ce:	1f43      	subs	r3, r0, #5
100157d0:	409e      	lsls	r6, r3
100157d2:	2300      	movs	r3, #0
100157d4:	3076      	adds	r0, #118	; 0x76
100157d6:	4247      	negs	r7, r0
100157d8:	469a      	mov	sl, r3
100157da:	4699      	mov	r9, r3
100157dc:	e799      	b.n	10015712 <__aeabi_fmul+0x2e>
100157de:	230c      	movs	r3, #12
100157e0:	469a      	mov	sl, r3
100157e2:	3b09      	subs	r3, #9
100157e4:	4699      	mov	r9, r3
100157e6:	e794      	b.n	10015712 <__aeabi_fmul+0x2e>
100157e8:	2680      	movs	r6, #128	; 0x80
100157ea:	2400      	movs	r4, #0
100157ec:	03f6      	lsls	r6, r6, #15
100157ee:	25ff      	movs	r5, #255	; 0xff
100157f0:	e7c1      	b.n	10015776 <__aeabi_fmul+0x92>
100157f2:	0035      	movs	r5, r6
100157f4:	4648      	mov	r0, r9
100157f6:	e7b2      	b.n	1001575e <__aeabi_fmul+0x7a>
100157f8:	0035      	movs	r5, r6
100157fa:	0022      	movs	r2, r4
100157fc:	4648      	mov	r0, r9
100157fe:	e7ae      	b.n	1001575e <__aeabi_fmul+0x7a>
10015800:	0429      	lsls	r1, r5, #16
10015802:	0c09      	lsrs	r1, r1, #16
10015804:	0008      	movs	r0, r1
10015806:	0c37      	lsrs	r7, r6, #16
10015808:	0436      	lsls	r6, r6, #16
1001580a:	0c36      	lsrs	r6, r6, #16
1001580c:	0c2c      	lsrs	r4, r5, #16
1001580e:	4379      	muls	r1, r7
10015810:	4370      	muls	r0, r6
10015812:	4367      	muls	r7, r4
10015814:	4374      	muls	r4, r6
10015816:	0c06      	lsrs	r6, r0, #16
10015818:	1864      	adds	r4, r4, r1
1001581a:	1936      	adds	r6, r6, r4
1001581c:	42b1      	cmp	r1, r6
1001581e:	d903      	bls.n	10015828 <__aeabi_fmul+0x144>
10015820:	2180      	movs	r1, #128	; 0x80
10015822:	0249      	lsls	r1, r1, #9
10015824:	4688      	mov	r8, r1
10015826:	4447      	add	r7, r8
10015828:	0400      	lsls	r0, r0, #16
1001582a:	0c00      	lsrs	r0, r0, #16
1001582c:	0431      	lsls	r1, r6, #16
1001582e:	1809      	adds	r1, r1, r0
10015830:	018d      	lsls	r5, r1, #6
10015832:	1e68      	subs	r0, r5, #1
10015834:	4185      	sbcs	r5, r0
10015836:	0e89      	lsrs	r1, r1, #26
10015838:	4329      	orrs	r1, r5
1001583a:	0c35      	lsrs	r5, r6, #16
1001583c:	19ed      	adds	r5, r5, r7
1001583e:	01ad      	lsls	r5, r5, #6
10015840:	430d      	orrs	r5, r1
10015842:	0129      	lsls	r1, r5, #4
10015844:	d504      	bpl.n	10015850 <__aeabi_fmul+0x16c>
10015846:	2301      	movs	r3, #1
10015848:	0869      	lsrs	r1, r5, #1
1001584a:	401d      	ands	r5, r3
1001584c:	4663      	mov	r3, ip
1001584e:	430d      	orrs	r5, r1
10015850:	0019      	movs	r1, r3
10015852:	317f      	adds	r1, #127	; 0x7f
10015854:	2900      	cmp	r1, #0
10015856:	dd25      	ble.n	100158a4 <__aeabi_fmul+0x1c0>
10015858:	0768      	lsls	r0, r5, #29
1001585a:	d004      	beq.n	10015866 <__aeabi_fmul+0x182>
1001585c:	200f      	movs	r0, #15
1001585e:	4028      	ands	r0, r5
10015860:	2804      	cmp	r0, #4
10015862:	d000      	beq.n	10015866 <__aeabi_fmul+0x182>
10015864:	3504      	adds	r5, #4
10015866:	0128      	lsls	r0, r5, #4
10015868:	d503      	bpl.n	10015872 <__aeabi_fmul+0x18e>
1001586a:	4927      	ldr	r1, [pc, #156]	; (10015908 <__aeabi_fmul+0x224>)
1001586c:	3380      	adds	r3, #128	; 0x80
1001586e:	400d      	ands	r5, r1
10015870:	0019      	movs	r1, r3
10015872:	29fe      	cmp	r1, #254	; 0xfe
10015874:	dca3      	bgt.n	100157be <__aeabi_fmul+0xda>
10015876:	2401      	movs	r4, #1
10015878:	01ad      	lsls	r5, r5, #6
1001587a:	0a6e      	lsrs	r6, r5, #9
1001587c:	4014      	ands	r4, r2
1001587e:	b2cd      	uxtb	r5, r1
10015880:	e779      	b.n	10015776 <__aeabi_fmul+0x92>
10015882:	2080      	movs	r0, #128	; 0x80
10015884:	03c0      	lsls	r0, r0, #15
10015886:	4206      	tst	r6, r0
10015888:	d007      	beq.n	1001589a <__aeabi_fmul+0x1b6>
1001588a:	4205      	tst	r5, r0
1001588c:	d105      	bne.n	1001589a <__aeabi_fmul+0x1b6>
1001588e:	4328      	orrs	r0, r5
10015890:	0246      	lsls	r6, r0, #9
10015892:	0a76      	lsrs	r6, r6, #9
10015894:	4644      	mov	r4, r8
10015896:	25ff      	movs	r5, #255	; 0xff
10015898:	e76d      	b.n	10015776 <__aeabi_fmul+0x92>
1001589a:	4306      	orrs	r6, r0
1001589c:	0276      	lsls	r6, r6, #9
1001589e:	0a76      	lsrs	r6, r6, #9
100158a0:	25ff      	movs	r5, #255	; 0xff
100158a2:	e768      	b.n	10015776 <__aeabi_fmul+0x92>
100158a4:	2401      	movs	r4, #1
100158a6:	1a61      	subs	r1, r4, r1
100158a8:	291b      	cmp	r1, #27
100158aa:	dd05      	ble.n	100158b8 <__aeabi_fmul+0x1d4>
100158ac:	4014      	ands	r4, r2
100158ae:	2500      	movs	r5, #0
100158b0:	2600      	movs	r6, #0
100158b2:	e760      	b.n	10015776 <__aeabi_fmul+0x92>
100158b4:	4663      	mov	r3, ip
100158b6:	e7cb      	b.n	10015850 <__aeabi_fmul+0x16c>
100158b8:	002e      	movs	r6, r5
100158ba:	2320      	movs	r3, #32
100158bc:	40ce      	lsrs	r6, r1
100158be:	1a59      	subs	r1, r3, r1
100158c0:	408d      	lsls	r5, r1
100158c2:	1e6b      	subs	r3, r5, #1
100158c4:	419d      	sbcs	r5, r3
100158c6:	432e      	orrs	r6, r5
100158c8:	0773      	lsls	r3, r6, #29
100158ca:	d004      	beq.n	100158d6 <__aeabi_fmul+0x1f2>
100158cc:	230f      	movs	r3, #15
100158ce:	4033      	ands	r3, r6
100158d0:	2b04      	cmp	r3, #4
100158d2:	d000      	beq.n	100158d6 <__aeabi_fmul+0x1f2>
100158d4:	3604      	adds	r6, #4
100158d6:	0173      	lsls	r3, r6, #5
100158d8:	d504      	bpl.n	100158e4 <__aeabi_fmul+0x200>
100158da:	2401      	movs	r4, #1
100158dc:	2501      	movs	r5, #1
100158de:	4014      	ands	r4, r2
100158e0:	2600      	movs	r6, #0
100158e2:	e748      	b.n	10015776 <__aeabi_fmul+0x92>
100158e4:	2401      	movs	r4, #1
100158e6:	01b6      	lsls	r6, r6, #6
100158e8:	0a76      	lsrs	r6, r6, #9
100158ea:	4014      	ands	r4, r2
100158ec:	2500      	movs	r5, #0
100158ee:	e742      	b.n	10015776 <__aeabi_fmul+0x92>
100158f0:	2680      	movs	r6, #128	; 0x80
100158f2:	2401      	movs	r4, #1
100158f4:	03f6      	lsls	r6, r6, #15
100158f6:	432e      	orrs	r6, r5
100158f8:	0276      	lsls	r6, r6, #9
100158fa:	0a76      	lsrs	r6, r6, #9
100158fc:	4014      	ands	r4, r2
100158fe:	25ff      	movs	r5, #255	; 0xff
10015900:	e739      	b.n	10015776 <__aeabi_fmul+0x92>
10015902:	46c0      	nop			; (mov r8, r8)
10015904:	1001a32c 	.word	0x1001a32c
10015908:	f7ffffff 	.word	0xf7ffffff

1001590c <__aeabi_fsub>:
1001590c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001590e:	024a      	lsls	r2, r1, #9
10015910:	004e      	lsls	r6, r1, #1
10015912:	0243      	lsls	r3, r0, #9
10015914:	0044      	lsls	r4, r0, #1
10015916:	0e24      	lsrs	r4, r4, #24
10015918:	0fc5      	lsrs	r5, r0, #31
1001591a:	099b      	lsrs	r3, r3, #6
1001591c:	0e36      	lsrs	r6, r6, #24
1001591e:	0fc9      	lsrs	r1, r1, #31
10015920:	0992      	lsrs	r2, r2, #6
10015922:	2eff      	cmp	r6, #255	; 0xff
10015924:	d100      	bne.n	10015928 <__aeabi_fsub+0x1c>
10015926:	e083      	b.n	10015a30 <__aeabi_fsub+0x124>
10015928:	2001      	movs	r0, #1
1001592a:	4041      	eors	r1, r0
1001592c:	1ba0      	subs	r0, r4, r6
1001592e:	42a9      	cmp	r1, r5
10015930:	d05c      	beq.n	100159ec <__aeabi_fsub+0xe0>
10015932:	2800      	cmp	r0, #0
10015934:	dc00      	bgt.n	10015938 <__aeabi_fsub+0x2c>
10015936:	e095      	b.n	10015a64 <__aeabi_fsub+0x158>
10015938:	2e00      	cmp	r6, #0
1001593a:	d11c      	bne.n	10015976 <__aeabi_fsub+0x6a>
1001593c:	2a00      	cmp	r2, #0
1001593e:	d000      	beq.n	10015942 <__aeabi_fsub+0x36>
10015940:	e081      	b.n	10015a46 <__aeabi_fsub+0x13a>
10015942:	075a      	lsls	r2, r3, #29
10015944:	d004      	beq.n	10015950 <__aeabi_fsub+0x44>
10015946:	220f      	movs	r2, #15
10015948:	401a      	ands	r2, r3
1001594a:	2a04      	cmp	r2, #4
1001594c:	d000      	beq.n	10015950 <__aeabi_fsub+0x44>
1001594e:	3304      	adds	r3, #4
10015950:	015a      	lsls	r2, r3, #5
10015952:	d53b      	bpl.n	100159cc <__aeabi_fsub+0xc0>
10015954:	3401      	adds	r4, #1
10015956:	2cff      	cmp	r4, #255	; 0xff
10015958:	d100      	bne.n	1001595c <__aeabi_fsub+0x50>
1001595a:	e091      	b.n	10015a80 <__aeabi_fsub+0x174>
1001595c:	2001      	movs	r0, #1
1001595e:	019b      	lsls	r3, r3, #6
10015960:	0a5b      	lsrs	r3, r3, #9
10015962:	b2e4      	uxtb	r4, r4
10015964:	4005      	ands	r5, r0
10015966:	025b      	lsls	r3, r3, #9
10015968:	05e4      	lsls	r4, r4, #23
1001596a:	0a5b      	lsrs	r3, r3, #9
1001596c:	07ed      	lsls	r5, r5, #31
1001596e:	4323      	orrs	r3, r4
10015970:	432b      	orrs	r3, r5
10015972:	0018      	movs	r0, r3
10015974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015976:	2cff      	cmp	r4, #255	; 0xff
10015978:	d0e3      	beq.n	10015942 <__aeabi_fsub+0x36>
1001597a:	2180      	movs	r1, #128	; 0x80
1001597c:	04c9      	lsls	r1, r1, #19
1001597e:	430a      	orrs	r2, r1
10015980:	281b      	cmp	r0, #27
10015982:	dd00      	ble.n	10015986 <__aeabi_fsub+0x7a>
10015984:	e090      	b.n	10015aa8 <__aeabi_fsub+0x19c>
10015986:	0016      	movs	r6, r2
10015988:	2120      	movs	r1, #32
1001598a:	40c6      	lsrs	r6, r0
1001598c:	1a08      	subs	r0, r1, r0
1001598e:	4082      	lsls	r2, r0
10015990:	1e51      	subs	r1, r2, #1
10015992:	418a      	sbcs	r2, r1
10015994:	4332      	orrs	r2, r6
10015996:	1a9b      	subs	r3, r3, r2
10015998:	015a      	lsls	r2, r3, #5
1001599a:	d515      	bpl.n	100159c8 <__aeabi_fsub+0xbc>
1001599c:	019b      	lsls	r3, r3, #6
1001599e:	099e      	lsrs	r6, r3, #6
100159a0:	0030      	movs	r0, r6
100159a2:	f002 f8a7 	bl	10017af4 <__clzsi2>
100159a6:	3805      	subs	r0, #5
100159a8:	4086      	lsls	r6, r0
100159aa:	4284      	cmp	r4, r0
100159ac:	dc6c      	bgt.n	10015a88 <__aeabi_fsub+0x17c>
100159ae:	1b04      	subs	r4, r0, r4
100159b0:	0033      	movs	r3, r6
100159b2:	2020      	movs	r0, #32
100159b4:	3401      	adds	r4, #1
100159b6:	40e3      	lsrs	r3, r4
100159b8:	1b04      	subs	r4, r0, r4
100159ba:	40a6      	lsls	r6, r4
100159bc:	1e72      	subs	r2, r6, #1
100159be:	4196      	sbcs	r6, r2
100159c0:	2400      	movs	r4, #0
100159c2:	4333      	orrs	r3, r6
100159c4:	e7bd      	b.n	10015942 <__aeabi_fsub+0x36>
100159c6:	000d      	movs	r5, r1
100159c8:	075a      	lsls	r2, r3, #29
100159ca:	d1bc      	bne.n	10015946 <__aeabi_fsub+0x3a>
100159cc:	08df      	lsrs	r7, r3, #3
100159ce:	2301      	movs	r3, #1
100159d0:	401d      	ands	r5, r3
100159d2:	2cff      	cmp	r4, #255	; 0xff
100159d4:	d133      	bne.n	10015a3e <__aeabi_fsub+0x132>
100159d6:	2f00      	cmp	r7, #0
100159d8:	d100      	bne.n	100159dc <__aeabi_fsub+0xd0>
100159da:	e090      	b.n	10015afe <__aeabi_fsub+0x1f2>
100159dc:	2280      	movs	r2, #128	; 0x80
100159de:	03d2      	lsls	r2, r2, #15
100159e0:	0013      	movs	r3, r2
100159e2:	433b      	orrs	r3, r7
100159e4:	025b      	lsls	r3, r3, #9
100159e6:	0a5b      	lsrs	r3, r3, #9
100159e8:	24ff      	movs	r4, #255	; 0xff
100159ea:	e7bc      	b.n	10015966 <__aeabi_fsub+0x5a>
100159ec:	2800      	cmp	r0, #0
100159ee:	dd4f      	ble.n	10015a90 <__aeabi_fsub+0x184>
100159f0:	2e00      	cmp	r6, #0
100159f2:	d02e      	beq.n	10015a52 <__aeabi_fsub+0x146>
100159f4:	2cff      	cmp	r4, #255	; 0xff
100159f6:	d0a4      	beq.n	10015942 <__aeabi_fsub+0x36>
100159f8:	2580      	movs	r5, #128	; 0x80
100159fa:	04ed      	lsls	r5, r5, #19
100159fc:	432a      	orrs	r2, r5
100159fe:	281b      	cmp	r0, #27
10015a00:	dd00      	ble.n	10015a04 <__aeabi_fsub+0xf8>
10015a02:	e097      	b.n	10015b34 <__aeabi_fsub+0x228>
10015a04:	0016      	movs	r6, r2
10015a06:	2520      	movs	r5, #32
10015a08:	40c6      	lsrs	r6, r0
10015a0a:	1a28      	subs	r0, r5, r0
10015a0c:	4082      	lsls	r2, r0
10015a0e:	1e50      	subs	r0, r2, #1
10015a10:	4182      	sbcs	r2, r0
10015a12:	4332      	orrs	r2, r6
10015a14:	189b      	adds	r3, r3, r2
10015a16:	015a      	lsls	r2, r3, #5
10015a18:	d5d5      	bpl.n	100159c6 <__aeabi_fsub+0xba>
10015a1a:	3401      	adds	r4, #1
10015a1c:	2cff      	cmp	r4, #255	; 0xff
10015a1e:	d06d      	beq.n	10015afc <__aeabi_fsub+0x1f0>
10015a20:	2201      	movs	r2, #1
10015a22:	487b      	ldr	r0, [pc, #492]	; (10015c10 <__aeabi_fsub+0x304>)
10015a24:	401a      	ands	r2, r3
10015a26:	085b      	lsrs	r3, r3, #1
10015a28:	4003      	ands	r3, r0
10015a2a:	4313      	orrs	r3, r2
10015a2c:	000d      	movs	r5, r1
10015a2e:	e788      	b.n	10015942 <__aeabi_fsub+0x36>
10015a30:	2a00      	cmp	r2, #0
10015a32:	d000      	beq.n	10015a36 <__aeabi_fsub+0x12a>
10015a34:	e77a      	b.n	1001592c <__aeabi_fsub+0x20>
10015a36:	e777      	b.n	10015928 <__aeabi_fsub+0x1c>
10015a38:	1e03      	subs	r3, r0, #0
10015a3a:	d1c5      	bne.n	100159c8 <__aeabi_fsub+0xbc>
10015a3c:	2500      	movs	r5, #0
10015a3e:	027b      	lsls	r3, r7, #9
10015a40:	0a5b      	lsrs	r3, r3, #9
10015a42:	b2e4      	uxtb	r4, r4
10015a44:	e78f      	b.n	10015966 <__aeabi_fsub+0x5a>
10015a46:	3801      	subs	r0, #1
10015a48:	2800      	cmp	r0, #0
10015a4a:	d0a4      	beq.n	10015996 <__aeabi_fsub+0x8a>
10015a4c:	2cff      	cmp	r4, #255	; 0xff
10015a4e:	d197      	bne.n	10015980 <__aeabi_fsub+0x74>
10015a50:	e777      	b.n	10015942 <__aeabi_fsub+0x36>
10015a52:	2a00      	cmp	r2, #0
10015a54:	d100      	bne.n	10015a58 <__aeabi_fsub+0x14c>
10015a56:	e774      	b.n	10015942 <__aeabi_fsub+0x36>
10015a58:	3801      	subs	r0, #1
10015a5a:	2800      	cmp	r0, #0
10015a5c:	d0da      	beq.n	10015a14 <__aeabi_fsub+0x108>
10015a5e:	2cff      	cmp	r4, #255	; 0xff
10015a60:	d1cd      	bne.n	100159fe <__aeabi_fsub+0xf2>
10015a62:	e76e      	b.n	10015942 <__aeabi_fsub+0x36>
10015a64:	2800      	cmp	r0, #0
10015a66:	d121      	bne.n	10015aac <__aeabi_fsub+0x1a0>
10015a68:	1c60      	adds	r0, r4, #1
10015a6a:	b2c0      	uxtb	r0, r0
10015a6c:	2801      	cmp	r0, #1
10015a6e:	dd58      	ble.n	10015b22 <__aeabi_fsub+0x216>
10015a70:	2780      	movs	r7, #128	; 0x80
10015a72:	1a9e      	subs	r6, r3, r2
10015a74:	04ff      	lsls	r7, r7, #19
10015a76:	4037      	ands	r7, r6
10015a78:	d02f      	beq.n	10015ada <__aeabi_fsub+0x1ce>
10015a7a:	1ad6      	subs	r6, r2, r3
10015a7c:	000d      	movs	r5, r1
10015a7e:	e78f      	b.n	100159a0 <__aeabi_fsub+0x94>
10015a80:	2301      	movs	r3, #1
10015a82:	401d      	ands	r5, r3
10015a84:	2300      	movs	r3, #0
10015a86:	e76e      	b.n	10015966 <__aeabi_fsub+0x5a>
10015a88:	4b62      	ldr	r3, [pc, #392]	; (10015c14 <__aeabi_fsub+0x308>)
10015a8a:	1a24      	subs	r4, r4, r0
10015a8c:	4033      	ands	r3, r6
10015a8e:	e758      	b.n	10015942 <__aeabi_fsub+0x36>
10015a90:	2800      	cmp	r0, #0
10015a92:	d151      	bne.n	10015b38 <__aeabi_fsub+0x22c>
10015a94:	1c60      	adds	r0, r4, #1
10015a96:	b2c6      	uxtb	r6, r0
10015a98:	2e01      	cmp	r6, #1
10015a9a:	dd33      	ble.n	10015b04 <__aeabi_fsub+0x1f8>
10015a9c:	28ff      	cmp	r0, #255	; 0xff
10015a9e:	d02d      	beq.n	10015afc <__aeabi_fsub+0x1f0>
10015aa0:	189b      	adds	r3, r3, r2
10015aa2:	085b      	lsrs	r3, r3, #1
10015aa4:	0004      	movs	r4, r0
10015aa6:	e74c      	b.n	10015942 <__aeabi_fsub+0x36>
10015aa8:	2201      	movs	r2, #1
10015aaa:	e774      	b.n	10015996 <__aeabi_fsub+0x8a>
10015aac:	2c00      	cmp	r4, #0
10015aae:	d01a      	beq.n	10015ae6 <__aeabi_fsub+0x1da>
10015ab0:	2eff      	cmp	r6, #255	; 0xff
10015ab2:	d01f      	beq.n	10015af4 <__aeabi_fsub+0x1e8>
10015ab4:	2480      	movs	r4, #128	; 0x80
10015ab6:	04e4      	lsls	r4, r4, #19
10015ab8:	4240      	negs	r0, r0
10015aba:	4323      	orrs	r3, r4
10015abc:	281b      	cmp	r0, #27
10015abe:	dd00      	ble.n	10015ac2 <__aeabi_fsub+0x1b6>
10015ac0:	e096      	b.n	10015bf0 <__aeabi_fsub+0x2e4>
10015ac2:	001d      	movs	r5, r3
10015ac4:	2420      	movs	r4, #32
10015ac6:	40c5      	lsrs	r5, r0
10015ac8:	1a20      	subs	r0, r4, r0
10015aca:	4083      	lsls	r3, r0
10015acc:	1e58      	subs	r0, r3, #1
10015ace:	4183      	sbcs	r3, r0
10015ad0:	432b      	orrs	r3, r5
10015ad2:	1ad3      	subs	r3, r2, r3
10015ad4:	0034      	movs	r4, r6
10015ad6:	000d      	movs	r5, r1
10015ad8:	e75e      	b.n	10015998 <__aeabi_fsub+0x8c>
10015ada:	2e00      	cmp	r6, #0
10015adc:	d000      	beq.n	10015ae0 <__aeabi_fsub+0x1d4>
10015ade:	e75f      	b.n	100159a0 <__aeabi_fsub+0x94>
10015ae0:	2500      	movs	r5, #0
10015ae2:	2400      	movs	r4, #0
10015ae4:	e7ab      	b.n	10015a3e <__aeabi_fsub+0x132>
10015ae6:	2b00      	cmp	r3, #0
10015ae8:	d044      	beq.n	10015b74 <__aeabi_fsub+0x268>
10015aea:	43c0      	mvns	r0, r0
10015aec:	2800      	cmp	r0, #0
10015aee:	d0f0      	beq.n	10015ad2 <__aeabi_fsub+0x1c6>
10015af0:	2eff      	cmp	r6, #255	; 0xff
10015af2:	d1e3      	bne.n	10015abc <__aeabi_fsub+0x1b0>
10015af4:	0013      	movs	r3, r2
10015af6:	24ff      	movs	r4, #255	; 0xff
10015af8:	000d      	movs	r5, r1
10015afa:	e722      	b.n	10015942 <__aeabi_fsub+0x36>
10015afc:	000d      	movs	r5, r1
10015afe:	24ff      	movs	r4, #255	; 0xff
10015b00:	2300      	movs	r3, #0
10015b02:	e730      	b.n	10015966 <__aeabi_fsub+0x5a>
10015b04:	2c00      	cmp	r4, #0
10015b06:	d15d      	bne.n	10015bc4 <__aeabi_fsub+0x2b8>
10015b08:	2b00      	cmp	r3, #0
10015b0a:	d07d      	beq.n	10015c08 <__aeabi_fsub+0x2fc>
10015b0c:	2a00      	cmp	r2, #0
10015b0e:	d100      	bne.n	10015b12 <__aeabi_fsub+0x206>
10015b10:	e717      	b.n	10015942 <__aeabi_fsub+0x36>
10015b12:	189b      	adds	r3, r3, r2
10015b14:	015a      	lsls	r2, r3, #5
10015b16:	d400      	bmi.n	10015b1a <__aeabi_fsub+0x20e>
10015b18:	e756      	b.n	100159c8 <__aeabi_fsub+0xbc>
10015b1a:	4a3e      	ldr	r2, [pc, #248]	; (10015c14 <__aeabi_fsub+0x308>)
10015b1c:	0004      	movs	r4, r0
10015b1e:	4013      	ands	r3, r2
10015b20:	e70f      	b.n	10015942 <__aeabi_fsub+0x36>
10015b22:	2c00      	cmp	r4, #0
10015b24:	d11e      	bne.n	10015b64 <__aeabi_fsub+0x258>
10015b26:	2b00      	cmp	r3, #0
10015b28:	d12f      	bne.n	10015b8a <__aeabi_fsub+0x27e>
10015b2a:	2a00      	cmp	r2, #0
10015b2c:	d065      	beq.n	10015bfa <__aeabi_fsub+0x2ee>
10015b2e:	0013      	movs	r3, r2
10015b30:	000d      	movs	r5, r1
10015b32:	e706      	b.n	10015942 <__aeabi_fsub+0x36>
10015b34:	2201      	movs	r2, #1
10015b36:	e76d      	b.n	10015a14 <__aeabi_fsub+0x108>
10015b38:	2c00      	cmp	r4, #0
10015b3a:	d11f      	bne.n	10015b7c <__aeabi_fsub+0x270>
10015b3c:	2b00      	cmp	r3, #0
10015b3e:	d059      	beq.n	10015bf4 <__aeabi_fsub+0x2e8>
10015b40:	43c0      	mvns	r0, r0
10015b42:	2800      	cmp	r0, #0
10015b44:	d00b      	beq.n	10015b5e <__aeabi_fsub+0x252>
10015b46:	2eff      	cmp	r6, #255	; 0xff
10015b48:	d04f      	beq.n	10015bea <__aeabi_fsub+0x2de>
10015b4a:	281b      	cmp	r0, #27
10015b4c:	dc5e      	bgt.n	10015c0c <__aeabi_fsub+0x300>
10015b4e:	001d      	movs	r5, r3
10015b50:	2420      	movs	r4, #32
10015b52:	40c5      	lsrs	r5, r0
10015b54:	1a20      	subs	r0, r4, r0
10015b56:	4083      	lsls	r3, r0
10015b58:	1e58      	subs	r0, r3, #1
10015b5a:	4183      	sbcs	r3, r0
10015b5c:	432b      	orrs	r3, r5
10015b5e:	189b      	adds	r3, r3, r2
10015b60:	0034      	movs	r4, r6
10015b62:	e758      	b.n	10015a16 <__aeabi_fsub+0x10a>
10015b64:	2b00      	cmp	r3, #0
10015b66:	d11c      	bne.n	10015ba2 <__aeabi_fsub+0x296>
10015b68:	2a00      	cmp	r2, #0
10015b6a:	d049      	beq.n	10015c00 <__aeabi_fsub+0x2f4>
10015b6c:	0013      	movs	r3, r2
10015b6e:	000d      	movs	r5, r1
10015b70:	24ff      	movs	r4, #255	; 0xff
10015b72:	e6e6      	b.n	10015942 <__aeabi_fsub+0x36>
10015b74:	0013      	movs	r3, r2
10015b76:	0034      	movs	r4, r6
10015b78:	000d      	movs	r5, r1
10015b7a:	e6e2      	b.n	10015942 <__aeabi_fsub+0x36>
10015b7c:	2eff      	cmp	r6, #255	; 0xff
10015b7e:	d034      	beq.n	10015bea <__aeabi_fsub+0x2de>
10015b80:	2480      	movs	r4, #128	; 0x80
10015b82:	04e4      	lsls	r4, r4, #19
10015b84:	4240      	negs	r0, r0
10015b86:	4323      	orrs	r3, r4
10015b88:	e7df      	b.n	10015b4a <__aeabi_fsub+0x23e>
10015b8a:	2a00      	cmp	r2, #0
10015b8c:	d100      	bne.n	10015b90 <__aeabi_fsub+0x284>
10015b8e:	e6d8      	b.n	10015942 <__aeabi_fsub+0x36>
10015b90:	2780      	movs	r7, #128	; 0x80
10015b92:	1a98      	subs	r0, r3, r2
10015b94:	04ff      	lsls	r7, r7, #19
10015b96:	4007      	ands	r7, r0
10015b98:	d100      	bne.n	10015b9c <__aeabi_fsub+0x290>
10015b9a:	e74d      	b.n	10015a38 <__aeabi_fsub+0x12c>
10015b9c:	1ad3      	subs	r3, r2, r3
10015b9e:	000d      	movs	r5, r1
10015ba0:	e6cf      	b.n	10015942 <__aeabi_fsub+0x36>
10015ba2:	24ff      	movs	r4, #255	; 0xff
10015ba4:	2a00      	cmp	r2, #0
10015ba6:	d100      	bne.n	10015baa <__aeabi_fsub+0x29e>
10015ba8:	e6cb      	b.n	10015942 <__aeabi_fsub+0x36>
10015baa:	2080      	movs	r0, #128	; 0x80
10015bac:	08db      	lsrs	r3, r3, #3
10015bae:	03c0      	lsls	r0, r0, #15
10015bb0:	4203      	tst	r3, r0
10015bb2:	d004      	beq.n	10015bbe <__aeabi_fsub+0x2b2>
10015bb4:	08d2      	lsrs	r2, r2, #3
10015bb6:	4202      	tst	r2, r0
10015bb8:	d101      	bne.n	10015bbe <__aeabi_fsub+0x2b2>
10015bba:	0013      	movs	r3, r2
10015bbc:	000d      	movs	r5, r1
10015bbe:	00db      	lsls	r3, r3, #3
10015bc0:	24ff      	movs	r4, #255	; 0xff
10015bc2:	e6be      	b.n	10015942 <__aeabi_fsub+0x36>
10015bc4:	2b00      	cmp	r3, #0
10015bc6:	d010      	beq.n	10015bea <__aeabi_fsub+0x2de>
10015bc8:	24ff      	movs	r4, #255	; 0xff
10015bca:	2a00      	cmp	r2, #0
10015bcc:	d100      	bne.n	10015bd0 <__aeabi_fsub+0x2c4>
10015bce:	e6b8      	b.n	10015942 <__aeabi_fsub+0x36>
10015bd0:	2080      	movs	r0, #128	; 0x80
10015bd2:	08db      	lsrs	r3, r3, #3
10015bd4:	03c0      	lsls	r0, r0, #15
10015bd6:	4203      	tst	r3, r0
10015bd8:	d003      	beq.n	10015be2 <__aeabi_fsub+0x2d6>
10015bda:	08d2      	lsrs	r2, r2, #3
10015bdc:	4202      	tst	r2, r0
10015bde:	d100      	bne.n	10015be2 <__aeabi_fsub+0x2d6>
10015be0:	0013      	movs	r3, r2
10015be2:	00db      	lsls	r3, r3, #3
10015be4:	000d      	movs	r5, r1
10015be6:	24ff      	movs	r4, #255	; 0xff
10015be8:	e6ab      	b.n	10015942 <__aeabi_fsub+0x36>
10015bea:	0013      	movs	r3, r2
10015bec:	24ff      	movs	r4, #255	; 0xff
10015bee:	e6a8      	b.n	10015942 <__aeabi_fsub+0x36>
10015bf0:	2301      	movs	r3, #1
10015bf2:	e76e      	b.n	10015ad2 <__aeabi_fsub+0x1c6>
10015bf4:	0013      	movs	r3, r2
10015bf6:	0034      	movs	r4, r6
10015bf8:	e6a3      	b.n	10015942 <__aeabi_fsub+0x36>
10015bfa:	2700      	movs	r7, #0
10015bfc:	2500      	movs	r5, #0
10015bfe:	e71e      	b.n	10015a3e <__aeabi_fsub+0x132>
10015c00:	2780      	movs	r7, #128	; 0x80
10015c02:	2500      	movs	r5, #0
10015c04:	03ff      	lsls	r7, r7, #15
10015c06:	e6e9      	b.n	100159dc <__aeabi_fsub+0xd0>
10015c08:	0013      	movs	r3, r2
10015c0a:	e69a      	b.n	10015942 <__aeabi_fsub+0x36>
10015c0c:	2301      	movs	r3, #1
10015c0e:	e7a6      	b.n	10015b5e <__aeabi_fsub+0x252>
10015c10:	7dffffff 	.word	0x7dffffff
10015c14:	fbffffff 	.word	0xfbffffff

10015c18 <__aeabi_fcmpun>:
10015c18:	0243      	lsls	r3, r0, #9
10015c1a:	0a5a      	lsrs	r2, r3, #9
10015c1c:	0040      	lsls	r0, r0, #1
10015c1e:	024b      	lsls	r3, r1, #9
10015c20:	0049      	lsls	r1, r1, #1
10015c22:	0e00      	lsrs	r0, r0, #24
10015c24:	0a5b      	lsrs	r3, r3, #9
10015c26:	0e09      	lsrs	r1, r1, #24
10015c28:	28ff      	cmp	r0, #255	; 0xff
10015c2a:	d003      	beq.n	10015c34 <__aeabi_fcmpun+0x1c>
10015c2c:	2000      	movs	r0, #0
10015c2e:	29ff      	cmp	r1, #255	; 0xff
10015c30:	d006      	beq.n	10015c40 <__aeabi_fcmpun+0x28>
10015c32:	4770      	bx	lr
10015c34:	38fe      	subs	r0, #254	; 0xfe
10015c36:	2a00      	cmp	r2, #0
10015c38:	d1fb      	bne.n	10015c32 <__aeabi_fcmpun+0x1a>
10015c3a:	2000      	movs	r0, #0
10015c3c:	29ff      	cmp	r1, #255	; 0xff
10015c3e:	d1f8      	bne.n	10015c32 <__aeabi_fcmpun+0x1a>
10015c40:	0018      	movs	r0, r3
10015c42:	1e43      	subs	r3, r0, #1
10015c44:	4198      	sbcs	r0, r3
10015c46:	e7f4      	b.n	10015c32 <__aeabi_fcmpun+0x1a>

10015c48 <__aeabi_f2iz>:
10015c48:	0243      	lsls	r3, r0, #9
10015c4a:	0a59      	lsrs	r1, r3, #9
10015c4c:	0043      	lsls	r3, r0, #1
10015c4e:	0fc2      	lsrs	r2, r0, #31
10015c50:	0e1b      	lsrs	r3, r3, #24
10015c52:	2000      	movs	r0, #0
10015c54:	2b7e      	cmp	r3, #126	; 0x7e
10015c56:	dd0e      	ble.n	10015c76 <__aeabi_f2iz+0x2e>
10015c58:	2b9d      	cmp	r3, #157	; 0x9d
10015c5a:	dc0d      	bgt.n	10015c78 <__aeabi_f2iz+0x30>
10015c5c:	2080      	movs	r0, #128	; 0x80
10015c5e:	0400      	lsls	r0, r0, #16
10015c60:	4301      	orrs	r1, r0
10015c62:	2b95      	cmp	r3, #149	; 0x95
10015c64:	dc0b      	bgt.n	10015c7e <__aeabi_f2iz+0x36>
10015c66:	2096      	movs	r0, #150	; 0x96
10015c68:	1ac3      	subs	r3, r0, r3
10015c6a:	40d9      	lsrs	r1, r3
10015c6c:	000b      	movs	r3, r1
10015c6e:	4258      	negs	r0, r3
10015c70:	2a00      	cmp	r2, #0
10015c72:	d100      	bne.n	10015c76 <__aeabi_f2iz+0x2e>
10015c74:	0018      	movs	r0, r3
10015c76:	4770      	bx	lr
10015c78:	4b03      	ldr	r3, [pc, #12]	; (10015c88 <__aeabi_f2iz+0x40>)
10015c7a:	18d0      	adds	r0, r2, r3
10015c7c:	e7fb      	b.n	10015c76 <__aeabi_f2iz+0x2e>
10015c7e:	3b96      	subs	r3, #150	; 0x96
10015c80:	4099      	lsls	r1, r3
10015c82:	000b      	movs	r3, r1
10015c84:	e7f3      	b.n	10015c6e <__aeabi_f2iz+0x26>
10015c86:	46c0      	nop			; (mov r8, r8)
10015c88:	7fffffff 	.word	0x7fffffff

10015c8c <__aeabi_i2f>:
10015c8c:	b570      	push	{r4, r5, r6, lr}
10015c8e:	2800      	cmp	r0, #0
10015c90:	d030      	beq.n	10015cf4 <__aeabi_i2f+0x68>
10015c92:	17c3      	asrs	r3, r0, #31
10015c94:	18c5      	adds	r5, r0, r3
10015c96:	405d      	eors	r5, r3
10015c98:	0fc4      	lsrs	r4, r0, #31
10015c9a:	0028      	movs	r0, r5
10015c9c:	f001 ff2a 	bl	10017af4 <__clzsi2>
10015ca0:	239e      	movs	r3, #158	; 0x9e
10015ca2:	1a1b      	subs	r3, r3, r0
10015ca4:	2b96      	cmp	r3, #150	; 0x96
10015ca6:	dc0d      	bgt.n	10015cc4 <__aeabi_i2f+0x38>
10015ca8:	2296      	movs	r2, #150	; 0x96
10015caa:	1ad2      	subs	r2, r2, r3
10015cac:	4095      	lsls	r5, r2
10015cae:	026a      	lsls	r2, r5, #9
10015cb0:	0a52      	lsrs	r2, r2, #9
10015cb2:	b2d8      	uxtb	r0, r3
10015cb4:	0252      	lsls	r2, r2, #9
10015cb6:	05c0      	lsls	r0, r0, #23
10015cb8:	0a52      	lsrs	r2, r2, #9
10015cba:	07e4      	lsls	r4, r4, #31
10015cbc:	4302      	orrs	r2, r0
10015cbe:	4322      	orrs	r2, r4
10015cc0:	0010      	movs	r0, r2
10015cc2:	bd70      	pop	{r4, r5, r6, pc}
10015cc4:	2b99      	cmp	r3, #153	; 0x99
10015cc6:	dc19      	bgt.n	10015cfc <__aeabi_i2f+0x70>
10015cc8:	2299      	movs	r2, #153	; 0x99
10015cca:	1ad2      	subs	r2, r2, r3
10015ccc:	4095      	lsls	r5, r2
10015cce:	4a12      	ldr	r2, [pc, #72]	; (10015d18 <__aeabi_i2f+0x8c>)
10015cd0:	402a      	ands	r2, r5
10015cd2:	0769      	lsls	r1, r5, #29
10015cd4:	d004      	beq.n	10015ce0 <__aeabi_i2f+0x54>
10015cd6:	210f      	movs	r1, #15
10015cd8:	400d      	ands	r5, r1
10015cda:	2d04      	cmp	r5, #4
10015cdc:	d000      	beq.n	10015ce0 <__aeabi_i2f+0x54>
10015cde:	3204      	adds	r2, #4
10015ce0:	0151      	lsls	r1, r2, #5
10015ce2:	d503      	bpl.n	10015cec <__aeabi_i2f+0x60>
10015ce4:	4b0c      	ldr	r3, [pc, #48]	; (10015d18 <__aeabi_i2f+0x8c>)
10015ce6:	401a      	ands	r2, r3
10015ce8:	239f      	movs	r3, #159	; 0x9f
10015cea:	1a1b      	subs	r3, r3, r0
10015cec:	0192      	lsls	r2, r2, #6
10015cee:	0a52      	lsrs	r2, r2, #9
10015cf0:	b2d8      	uxtb	r0, r3
10015cf2:	e7df      	b.n	10015cb4 <__aeabi_i2f+0x28>
10015cf4:	2400      	movs	r4, #0
10015cf6:	2000      	movs	r0, #0
10015cf8:	2200      	movs	r2, #0
10015cfa:	e7db      	b.n	10015cb4 <__aeabi_i2f+0x28>
10015cfc:	2205      	movs	r2, #5
10015cfe:	002e      	movs	r6, r5
10015d00:	1a12      	subs	r2, r2, r0
10015d02:	21b9      	movs	r1, #185	; 0xb9
10015d04:	40d6      	lsrs	r6, r2
10015d06:	002a      	movs	r2, r5
10015d08:	1ac9      	subs	r1, r1, r3
10015d0a:	408a      	lsls	r2, r1
10015d0c:	1e55      	subs	r5, r2, #1
10015d0e:	41aa      	sbcs	r2, r5
10015d10:	0035      	movs	r5, r6
10015d12:	4315      	orrs	r5, r2
10015d14:	e7db      	b.n	10015cce <__aeabi_i2f+0x42>
10015d16:	46c0      	nop			; (mov r8, r8)
10015d18:	fbffffff 	.word	0xfbffffff

10015d1c <__aeabi_ui2f>:
10015d1c:	b570      	push	{r4, r5, r6, lr}
10015d1e:	1e04      	subs	r4, r0, #0
10015d20:	d028      	beq.n	10015d74 <__aeabi_ui2f+0x58>
10015d22:	f001 fee7 	bl	10017af4 <__clzsi2>
10015d26:	239e      	movs	r3, #158	; 0x9e
10015d28:	1a1b      	subs	r3, r3, r0
10015d2a:	2b96      	cmp	r3, #150	; 0x96
10015d2c:	dc0a      	bgt.n	10015d44 <__aeabi_ui2f+0x28>
10015d2e:	2296      	movs	r2, #150	; 0x96
10015d30:	1ad2      	subs	r2, r2, r3
10015d32:	4094      	lsls	r4, r2
10015d34:	0262      	lsls	r2, r4, #9
10015d36:	0a52      	lsrs	r2, r2, #9
10015d38:	b2d8      	uxtb	r0, r3
10015d3a:	0252      	lsls	r2, r2, #9
10015d3c:	0a52      	lsrs	r2, r2, #9
10015d3e:	05c0      	lsls	r0, r0, #23
10015d40:	4310      	orrs	r0, r2
10015d42:	bd70      	pop	{r4, r5, r6, pc}
10015d44:	2b99      	cmp	r3, #153	; 0x99
10015d46:	dc18      	bgt.n	10015d7a <__aeabi_ui2f+0x5e>
10015d48:	2299      	movs	r2, #153	; 0x99
10015d4a:	1ad2      	subs	r2, r2, r3
10015d4c:	4094      	lsls	r4, r2
10015d4e:	4a11      	ldr	r2, [pc, #68]	; (10015d94 <__aeabi_ui2f+0x78>)
10015d50:	4022      	ands	r2, r4
10015d52:	0761      	lsls	r1, r4, #29
10015d54:	d004      	beq.n	10015d60 <__aeabi_ui2f+0x44>
10015d56:	210f      	movs	r1, #15
10015d58:	400c      	ands	r4, r1
10015d5a:	2c04      	cmp	r4, #4
10015d5c:	d000      	beq.n	10015d60 <__aeabi_ui2f+0x44>
10015d5e:	3204      	adds	r2, #4
10015d60:	0151      	lsls	r1, r2, #5
10015d62:	d503      	bpl.n	10015d6c <__aeabi_ui2f+0x50>
10015d64:	4b0b      	ldr	r3, [pc, #44]	; (10015d94 <__aeabi_ui2f+0x78>)
10015d66:	401a      	ands	r2, r3
10015d68:	239f      	movs	r3, #159	; 0x9f
10015d6a:	1a1b      	subs	r3, r3, r0
10015d6c:	0192      	lsls	r2, r2, #6
10015d6e:	0a52      	lsrs	r2, r2, #9
10015d70:	b2d8      	uxtb	r0, r3
10015d72:	e7e2      	b.n	10015d3a <__aeabi_ui2f+0x1e>
10015d74:	2000      	movs	r0, #0
10015d76:	2200      	movs	r2, #0
10015d78:	e7df      	b.n	10015d3a <__aeabi_ui2f+0x1e>
10015d7a:	2205      	movs	r2, #5
10015d7c:	0025      	movs	r5, r4
10015d7e:	1a12      	subs	r2, r2, r0
10015d80:	21b9      	movs	r1, #185	; 0xb9
10015d82:	40d5      	lsrs	r5, r2
10015d84:	0022      	movs	r2, r4
10015d86:	1ac9      	subs	r1, r1, r3
10015d88:	408a      	lsls	r2, r1
10015d8a:	1e54      	subs	r4, r2, #1
10015d8c:	41a2      	sbcs	r2, r4
10015d8e:	002c      	movs	r4, r5
10015d90:	4314      	orrs	r4, r2
10015d92:	e7dc      	b.n	10015d4e <__aeabi_ui2f+0x32>
10015d94:	fbffffff 	.word	0xfbffffff

10015d98 <__aeabi_dadd>:
10015d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015d9a:	4656      	mov	r6, sl
10015d9c:	465f      	mov	r7, fp
10015d9e:	464d      	mov	r5, r9
10015da0:	4644      	mov	r4, r8
10015da2:	b4f0      	push	{r4, r5, r6, r7}
10015da4:	000f      	movs	r7, r1
10015da6:	0ffd      	lsrs	r5, r7, #31
10015da8:	46aa      	mov	sl, r5
10015daa:	0309      	lsls	r1, r1, #12
10015dac:	007c      	lsls	r4, r7, #1
10015dae:	002e      	movs	r6, r5
10015db0:	005f      	lsls	r7, r3, #1
10015db2:	0f45      	lsrs	r5, r0, #29
10015db4:	0a49      	lsrs	r1, r1, #9
10015db6:	0d7f      	lsrs	r7, r7, #21
10015db8:	4329      	orrs	r1, r5
10015dba:	00c5      	lsls	r5, r0, #3
10015dbc:	0318      	lsls	r0, r3, #12
10015dbe:	46bc      	mov	ip, r7
10015dc0:	0a40      	lsrs	r0, r0, #9
10015dc2:	0f57      	lsrs	r7, r2, #29
10015dc4:	0d64      	lsrs	r4, r4, #21
10015dc6:	0fdb      	lsrs	r3, r3, #31
10015dc8:	4338      	orrs	r0, r7
10015dca:	00d2      	lsls	r2, r2, #3
10015dcc:	459a      	cmp	sl, r3
10015dce:	d100      	bne.n	10015dd2 <__aeabi_dadd+0x3a>
10015dd0:	e0aa      	b.n	10015f28 <__aeabi_dadd+0x190>
10015dd2:	4666      	mov	r6, ip
10015dd4:	1ba6      	subs	r6, r4, r6
10015dd6:	2e00      	cmp	r6, #0
10015dd8:	dc00      	bgt.n	10015ddc <__aeabi_dadd+0x44>
10015dda:	e0ff      	b.n	10015fdc <__aeabi_dadd+0x244>
10015ddc:	4663      	mov	r3, ip
10015dde:	2b00      	cmp	r3, #0
10015de0:	d139      	bne.n	10015e56 <__aeabi_dadd+0xbe>
10015de2:	0003      	movs	r3, r0
10015de4:	4313      	orrs	r3, r2
10015de6:	d000      	beq.n	10015dea <__aeabi_dadd+0x52>
10015de8:	e0d9      	b.n	10015f9e <__aeabi_dadd+0x206>
10015dea:	076b      	lsls	r3, r5, #29
10015dec:	d009      	beq.n	10015e02 <__aeabi_dadd+0x6a>
10015dee:	230f      	movs	r3, #15
10015df0:	402b      	ands	r3, r5
10015df2:	2b04      	cmp	r3, #4
10015df4:	d005      	beq.n	10015e02 <__aeabi_dadd+0x6a>
10015df6:	1d2b      	adds	r3, r5, #4
10015df8:	42ab      	cmp	r3, r5
10015dfa:	41ad      	sbcs	r5, r5
10015dfc:	426d      	negs	r5, r5
10015dfe:	1949      	adds	r1, r1, r5
10015e00:	001d      	movs	r5, r3
10015e02:	020b      	lsls	r3, r1, #8
10015e04:	d400      	bmi.n	10015e08 <__aeabi_dadd+0x70>
10015e06:	e082      	b.n	10015f0e <__aeabi_dadd+0x176>
10015e08:	4bca      	ldr	r3, [pc, #808]	; (10016134 <__aeabi_dadd+0x39c>)
10015e0a:	3401      	adds	r4, #1
10015e0c:	429c      	cmp	r4, r3
10015e0e:	d100      	bne.n	10015e12 <__aeabi_dadd+0x7a>
10015e10:	e0fe      	b.n	10016010 <__aeabi_dadd+0x278>
10015e12:	000a      	movs	r2, r1
10015e14:	4656      	mov	r6, sl
10015e16:	4bc8      	ldr	r3, [pc, #800]	; (10016138 <__aeabi_dadd+0x3a0>)
10015e18:	08ed      	lsrs	r5, r5, #3
10015e1a:	401a      	ands	r2, r3
10015e1c:	0750      	lsls	r0, r2, #29
10015e1e:	0564      	lsls	r4, r4, #21
10015e20:	0252      	lsls	r2, r2, #9
10015e22:	4305      	orrs	r5, r0
10015e24:	0b12      	lsrs	r2, r2, #12
10015e26:	0d64      	lsrs	r4, r4, #21
10015e28:	2100      	movs	r1, #0
10015e2a:	0312      	lsls	r2, r2, #12
10015e2c:	0d0b      	lsrs	r3, r1, #20
10015e2e:	051b      	lsls	r3, r3, #20
10015e30:	0564      	lsls	r4, r4, #21
10015e32:	0b12      	lsrs	r2, r2, #12
10015e34:	431a      	orrs	r2, r3
10015e36:	0863      	lsrs	r3, r4, #1
10015e38:	4cc0      	ldr	r4, [pc, #768]	; (1001613c <__aeabi_dadd+0x3a4>)
10015e3a:	07f6      	lsls	r6, r6, #31
10015e3c:	4014      	ands	r4, r2
10015e3e:	431c      	orrs	r4, r3
10015e40:	0064      	lsls	r4, r4, #1
10015e42:	0864      	lsrs	r4, r4, #1
10015e44:	4334      	orrs	r4, r6
10015e46:	0028      	movs	r0, r5
10015e48:	0021      	movs	r1, r4
10015e4a:	bc3c      	pop	{r2, r3, r4, r5}
10015e4c:	4690      	mov	r8, r2
10015e4e:	4699      	mov	r9, r3
10015e50:	46a2      	mov	sl, r4
10015e52:	46ab      	mov	fp, r5
10015e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015e56:	4bb7      	ldr	r3, [pc, #732]	; (10016134 <__aeabi_dadd+0x39c>)
10015e58:	429c      	cmp	r4, r3
10015e5a:	d0c6      	beq.n	10015dea <__aeabi_dadd+0x52>
10015e5c:	2380      	movs	r3, #128	; 0x80
10015e5e:	041b      	lsls	r3, r3, #16
10015e60:	4318      	orrs	r0, r3
10015e62:	2e38      	cmp	r6, #56	; 0x38
10015e64:	dd00      	ble.n	10015e68 <__aeabi_dadd+0xd0>
10015e66:	e0eb      	b.n	10016040 <__aeabi_dadd+0x2a8>
10015e68:	2e1f      	cmp	r6, #31
10015e6a:	dd00      	ble.n	10015e6e <__aeabi_dadd+0xd6>
10015e6c:	e11e      	b.n	100160ac <__aeabi_dadd+0x314>
10015e6e:	2320      	movs	r3, #32
10015e70:	1b9b      	subs	r3, r3, r6
10015e72:	469c      	mov	ip, r3
10015e74:	0003      	movs	r3, r0
10015e76:	4667      	mov	r7, ip
10015e78:	40bb      	lsls	r3, r7
10015e7a:	4698      	mov	r8, r3
10015e7c:	0013      	movs	r3, r2
10015e7e:	4647      	mov	r7, r8
10015e80:	40f3      	lsrs	r3, r6
10015e82:	433b      	orrs	r3, r7
10015e84:	4667      	mov	r7, ip
10015e86:	40ba      	lsls	r2, r7
10015e88:	1e57      	subs	r7, r2, #1
10015e8a:	41ba      	sbcs	r2, r7
10015e8c:	4313      	orrs	r3, r2
10015e8e:	0002      	movs	r2, r0
10015e90:	40f2      	lsrs	r2, r6
10015e92:	1aeb      	subs	r3, r5, r3
10015e94:	429d      	cmp	r5, r3
10015e96:	41b6      	sbcs	r6, r6
10015e98:	001d      	movs	r5, r3
10015e9a:	1a8a      	subs	r2, r1, r2
10015e9c:	4276      	negs	r6, r6
10015e9e:	1b91      	subs	r1, r2, r6
10015ea0:	020b      	lsls	r3, r1, #8
10015ea2:	d531      	bpl.n	10015f08 <__aeabi_dadd+0x170>
10015ea4:	024a      	lsls	r2, r1, #9
10015ea6:	0a56      	lsrs	r6, r2, #9
10015ea8:	2e00      	cmp	r6, #0
10015eaa:	d100      	bne.n	10015eae <__aeabi_dadd+0x116>
10015eac:	e0b4      	b.n	10016018 <__aeabi_dadd+0x280>
10015eae:	0030      	movs	r0, r6
10015eb0:	f001 fe20 	bl	10017af4 <__clzsi2>
10015eb4:	0003      	movs	r3, r0
10015eb6:	3b08      	subs	r3, #8
10015eb8:	2b1f      	cmp	r3, #31
10015eba:	dd00      	ble.n	10015ebe <__aeabi_dadd+0x126>
10015ebc:	e0b5      	b.n	1001602a <__aeabi_dadd+0x292>
10015ebe:	2220      	movs	r2, #32
10015ec0:	0029      	movs	r1, r5
10015ec2:	1ad2      	subs	r2, r2, r3
10015ec4:	40d1      	lsrs	r1, r2
10015ec6:	409e      	lsls	r6, r3
10015ec8:	000a      	movs	r2, r1
10015eca:	409d      	lsls	r5, r3
10015ecc:	4332      	orrs	r2, r6
10015ece:	429c      	cmp	r4, r3
10015ed0:	dd00      	ble.n	10015ed4 <__aeabi_dadd+0x13c>
10015ed2:	e0b1      	b.n	10016038 <__aeabi_dadd+0x2a0>
10015ed4:	1b1c      	subs	r4, r3, r4
10015ed6:	1c63      	adds	r3, r4, #1
10015ed8:	2b1f      	cmp	r3, #31
10015eda:	dd00      	ble.n	10015ede <__aeabi_dadd+0x146>
10015edc:	e0d5      	b.n	1001608a <__aeabi_dadd+0x2f2>
10015ede:	2120      	movs	r1, #32
10015ee0:	0014      	movs	r4, r2
10015ee2:	0028      	movs	r0, r5
10015ee4:	1ac9      	subs	r1, r1, r3
10015ee6:	408c      	lsls	r4, r1
10015ee8:	40d8      	lsrs	r0, r3
10015eea:	408d      	lsls	r5, r1
10015eec:	4304      	orrs	r4, r0
10015eee:	40da      	lsrs	r2, r3
10015ef0:	1e68      	subs	r0, r5, #1
10015ef2:	4185      	sbcs	r5, r0
10015ef4:	0011      	movs	r1, r2
10015ef6:	4325      	orrs	r5, r4
10015ef8:	2400      	movs	r4, #0
10015efa:	e776      	b.n	10015dea <__aeabi_dadd+0x52>
10015efc:	4641      	mov	r1, r8
10015efe:	4331      	orrs	r1, r6
10015f00:	d100      	bne.n	10015f04 <__aeabi_dadd+0x16c>
10015f02:	e234      	b.n	1001636e <__aeabi_dadd+0x5d6>
10015f04:	0031      	movs	r1, r6
10015f06:	4645      	mov	r5, r8
10015f08:	076b      	lsls	r3, r5, #29
10015f0a:	d000      	beq.n	10015f0e <__aeabi_dadd+0x176>
10015f0c:	e76f      	b.n	10015dee <__aeabi_dadd+0x56>
10015f0e:	4656      	mov	r6, sl
10015f10:	0748      	lsls	r0, r1, #29
10015f12:	08ed      	lsrs	r5, r5, #3
10015f14:	08c9      	lsrs	r1, r1, #3
10015f16:	4305      	orrs	r5, r0
10015f18:	4b86      	ldr	r3, [pc, #536]	; (10016134 <__aeabi_dadd+0x39c>)
10015f1a:	429c      	cmp	r4, r3
10015f1c:	d035      	beq.n	10015f8a <__aeabi_dadd+0x1f2>
10015f1e:	030a      	lsls	r2, r1, #12
10015f20:	0564      	lsls	r4, r4, #21
10015f22:	0b12      	lsrs	r2, r2, #12
10015f24:	0d64      	lsrs	r4, r4, #21
10015f26:	e77f      	b.n	10015e28 <__aeabi_dadd+0x90>
10015f28:	4663      	mov	r3, ip
10015f2a:	1ae3      	subs	r3, r4, r3
10015f2c:	469b      	mov	fp, r3
10015f2e:	2b00      	cmp	r3, #0
10015f30:	dc00      	bgt.n	10015f34 <__aeabi_dadd+0x19c>
10015f32:	e08b      	b.n	1001604c <__aeabi_dadd+0x2b4>
10015f34:	4667      	mov	r7, ip
10015f36:	2f00      	cmp	r7, #0
10015f38:	d03c      	beq.n	10015fb4 <__aeabi_dadd+0x21c>
10015f3a:	4f7e      	ldr	r7, [pc, #504]	; (10016134 <__aeabi_dadd+0x39c>)
10015f3c:	42bc      	cmp	r4, r7
10015f3e:	d100      	bne.n	10015f42 <__aeabi_dadd+0x1aa>
10015f40:	e753      	b.n	10015dea <__aeabi_dadd+0x52>
10015f42:	2780      	movs	r7, #128	; 0x80
10015f44:	043f      	lsls	r7, r7, #16
10015f46:	4338      	orrs	r0, r7
10015f48:	465b      	mov	r3, fp
10015f4a:	2b38      	cmp	r3, #56	; 0x38
10015f4c:	dc00      	bgt.n	10015f50 <__aeabi_dadd+0x1b8>
10015f4e:	e0f7      	b.n	10016140 <__aeabi_dadd+0x3a8>
10015f50:	4302      	orrs	r2, r0
10015f52:	1e50      	subs	r0, r2, #1
10015f54:	4182      	sbcs	r2, r0
10015f56:	2000      	movs	r0, #0
10015f58:	b2d2      	uxtb	r2, r2
10015f5a:	1953      	adds	r3, r2, r5
10015f5c:	1842      	adds	r2, r0, r1
10015f5e:	42ab      	cmp	r3, r5
10015f60:	4189      	sbcs	r1, r1
10015f62:	001d      	movs	r5, r3
10015f64:	4249      	negs	r1, r1
10015f66:	1889      	adds	r1, r1, r2
10015f68:	020b      	lsls	r3, r1, #8
10015f6a:	d5cd      	bpl.n	10015f08 <__aeabi_dadd+0x170>
10015f6c:	4b71      	ldr	r3, [pc, #452]	; (10016134 <__aeabi_dadd+0x39c>)
10015f6e:	3401      	adds	r4, #1
10015f70:	429c      	cmp	r4, r3
10015f72:	d100      	bne.n	10015f76 <__aeabi_dadd+0x1de>
10015f74:	e13d      	b.n	100161f2 <__aeabi_dadd+0x45a>
10015f76:	2001      	movs	r0, #1
10015f78:	4a6f      	ldr	r2, [pc, #444]	; (10016138 <__aeabi_dadd+0x3a0>)
10015f7a:	086b      	lsrs	r3, r5, #1
10015f7c:	400a      	ands	r2, r1
10015f7e:	4028      	ands	r0, r5
10015f80:	4318      	orrs	r0, r3
10015f82:	07d5      	lsls	r5, r2, #31
10015f84:	4305      	orrs	r5, r0
10015f86:	0851      	lsrs	r1, r2, #1
10015f88:	e72f      	b.n	10015dea <__aeabi_dadd+0x52>
10015f8a:	002b      	movs	r3, r5
10015f8c:	430b      	orrs	r3, r1
10015f8e:	d100      	bne.n	10015f92 <__aeabi_dadd+0x1fa>
10015f90:	e1cb      	b.n	1001632a <__aeabi_dadd+0x592>
10015f92:	2380      	movs	r3, #128	; 0x80
10015f94:	031b      	lsls	r3, r3, #12
10015f96:	430b      	orrs	r3, r1
10015f98:	031a      	lsls	r2, r3, #12
10015f9a:	0b12      	lsrs	r2, r2, #12
10015f9c:	e744      	b.n	10015e28 <__aeabi_dadd+0x90>
10015f9e:	3e01      	subs	r6, #1
10015fa0:	2e00      	cmp	r6, #0
10015fa2:	d16d      	bne.n	10016080 <__aeabi_dadd+0x2e8>
10015fa4:	1aae      	subs	r6, r5, r2
10015fa6:	42b5      	cmp	r5, r6
10015fa8:	419b      	sbcs	r3, r3
10015faa:	1a09      	subs	r1, r1, r0
10015fac:	425b      	negs	r3, r3
10015fae:	1ac9      	subs	r1, r1, r3
10015fb0:	0035      	movs	r5, r6
10015fb2:	e775      	b.n	10015ea0 <__aeabi_dadd+0x108>
10015fb4:	0007      	movs	r7, r0
10015fb6:	4317      	orrs	r7, r2
10015fb8:	d100      	bne.n	10015fbc <__aeabi_dadd+0x224>
10015fba:	e716      	b.n	10015dea <__aeabi_dadd+0x52>
10015fbc:	2301      	movs	r3, #1
10015fbe:	425b      	negs	r3, r3
10015fc0:	469c      	mov	ip, r3
10015fc2:	44e3      	add	fp, ip
10015fc4:	465b      	mov	r3, fp
10015fc6:	2b00      	cmp	r3, #0
10015fc8:	d000      	beq.n	10015fcc <__aeabi_dadd+0x234>
10015fca:	e0e0      	b.n	1001618e <__aeabi_dadd+0x3f6>
10015fcc:	18aa      	adds	r2, r5, r2
10015fce:	42aa      	cmp	r2, r5
10015fd0:	419b      	sbcs	r3, r3
10015fd2:	1809      	adds	r1, r1, r0
10015fd4:	425b      	negs	r3, r3
10015fd6:	1859      	adds	r1, r3, r1
10015fd8:	0015      	movs	r5, r2
10015fda:	e7c5      	b.n	10015f68 <__aeabi_dadd+0x1d0>
10015fdc:	2e00      	cmp	r6, #0
10015fde:	d175      	bne.n	100160cc <__aeabi_dadd+0x334>
10015fe0:	1c66      	adds	r6, r4, #1
10015fe2:	0576      	lsls	r6, r6, #21
10015fe4:	0d76      	lsrs	r6, r6, #21
10015fe6:	2e01      	cmp	r6, #1
10015fe8:	dc00      	bgt.n	10015fec <__aeabi_dadd+0x254>
10015fea:	e0f3      	b.n	100161d4 <__aeabi_dadd+0x43c>
10015fec:	1aae      	subs	r6, r5, r2
10015fee:	46b0      	mov	r8, r6
10015ff0:	4545      	cmp	r5, r8
10015ff2:	41bf      	sbcs	r7, r7
10015ff4:	1a0e      	subs	r6, r1, r0
10015ff6:	427f      	negs	r7, r7
10015ff8:	1bf6      	subs	r6, r6, r7
10015ffa:	0237      	lsls	r7, r6, #8
10015ffc:	d400      	bmi.n	10016000 <__aeabi_dadd+0x268>
10015ffe:	e08f      	b.n	10016120 <__aeabi_dadd+0x388>
10016000:	1b55      	subs	r5, r2, r5
10016002:	42aa      	cmp	r2, r5
10016004:	41b6      	sbcs	r6, r6
10016006:	1a41      	subs	r1, r0, r1
10016008:	4276      	negs	r6, r6
1001600a:	1b8e      	subs	r6, r1, r6
1001600c:	469a      	mov	sl, r3
1001600e:	e74b      	b.n	10015ea8 <__aeabi_dadd+0x110>
10016010:	4656      	mov	r6, sl
10016012:	2200      	movs	r2, #0
10016014:	2500      	movs	r5, #0
10016016:	e707      	b.n	10015e28 <__aeabi_dadd+0x90>
10016018:	0028      	movs	r0, r5
1001601a:	f001 fd6b 	bl	10017af4 <__clzsi2>
1001601e:	3020      	adds	r0, #32
10016020:	0003      	movs	r3, r0
10016022:	3b08      	subs	r3, #8
10016024:	2b1f      	cmp	r3, #31
10016026:	dc00      	bgt.n	1001602a <__aeabi_dadd+0x292>
10016028:	e749      	b.n	10015ebe <__aeabi_dadd+0x126>
1001602a:	002a      	movs	r2, r5
1001602c:	3828      	subs	r0, #40	; 0x28
1001602e:	4082      	lsls	r2, r0
10016030:	2500      	movs	r5, #0
10016032:	429c      	cmp	r4, r3
10016034:	dc00      	bgt.n	10016038 <__aeabi_dadd+0x2a0>
10016036:	e74d      	b.n	10015ed4 <__aeabi_dadd+0x13c>
10016038:	493f      	ldr	r1, [pc, #252]	; (10016138 <__aeabi_dadd+0x3a0>)
1001603a:	1ae4      	subs	r4, r4, r3
1001603c:	4011      	ands	r1, r2
1001603e:	e6d4      	b.n	10015dea <__aeabi_dadd+0x52>
10016040:	4302      	orrs	r2, r0
10016042:	1e50      	subs	r0, r2, #1
10016044:	4182      	sbcs	r2, r0
10016046:	b2d3      	uxtb	r3, r2
10016048:	2200      	movs	r2, #0
1001604a:	e722      	b.n	10015e92 <__aeabi_dadd+0xfa>
1001604c:	2b00      	cmp	r3, #0
1001604e:	d000      	beq.n	10016052 <__aeabi_dadd+0x2ba>
10016050:	e0f3      	b.n	1001623a <__aeabi_dadd+0x4a2>
10016052:	1c63      	adds	r3, r4, #1
10016054:	469c      	mov	ip, r3
10016056:	055b      	lsls	r3, r3, #21
10016058:	0d5b      	lsrs	r3, r3, #21
1001605a:	2b01      	cmp	r3, #1
1001605c:	dc00      	bgt.n	10016060 <__aeabi_dadd+0x2c8>
1001605e:	e09f      	b.n	100161a0 <__aeabi_dadd+0x408>
10016060:	4b34      	ldr	r3, [pc, #208]	; (10016134 <__aeabi_dadd+0x39c>)
10016062:	459c      	cmp	ip, r3
10016064:	d100      	bne.n	10016068 <__aeabi_dadd+0x2d0>
10016066:	e0c3      	b.n	100161f0 <__aeabi_dadd+0x458>
10016068:	18aa      	adds	r2, r5, r2
1001606a:	1809      	adds	r1, r1, r0
1001606c:	42aa      	cmp	r2, r5
1001606e:	4180      	sbcs	r0, r0
10016070:	4240      	negs	r0, r0
10016072:	1841      	adds	r1, r0, r1
10016074:	07cd      	lsls	r5, r1, #31
10016076:	0852      	lsrs	r2, r2, #1
10016078:	4315      	orrs	r5, r2
1001607a:	0849      	lsrs	r1, r1, #1
1001607c:	4664      	mov	r4, ip
1001607e:	e6b4      	b.n	10015dea <__aeabi_dadd+0x52>
10016080:	4b2c      	ldr	r3, [pc, #176]	; (10016134 <__aeabi_dadd+0x39c>)
10016082:	429c      	cmp	r4, r3
10016084:	d000      	beq.n	10016088 <__aeabi_dadd+0x2f0>
10016086:	e6ec      	b.n	10015e62 <__aeabi_dadd+0xca>
10016088:	e6af      	b.n	10015dea <__aeabi_dadd+0x52>
1001608a:	0011      	movs	r1, r2
1001608c:	3c1f      	subs	r4, #31
1001608e:	40e1      	lsrs	r1, r4
10016090:	000c      	movs	r4, r1
10016092:	2b20      	cmp	r3, #32
10016094:	d100      	bne.n	10016098 <__aeabi_dadd+0x300>
10016096:	e07f      	b.n	10016198 <__aeabi_dadd+0x400>
10016098:	2140      	movs	r1, #64	; 0x40
1001609a:	1acb      	subs	r3, r1, r3
1001609c:	409a      	lsls	r2, r3
1001609e:	4315      	orrs	r5, r2
100160a0:	1e6a      	subs	r2, r5, #1
100160a2:	4195      	sbcs	r5, r2
100160a4:	2100      	movs	r1, #0
100160a6:	4325      	orrs	r5, r4
100160a8:	2400      	movs	r4, #0
100160aa:	e72d      	b.n	10015f08 <__aeabi_dadd+0x170>
100160ac:	0033      	movs	r3, r6
100160ae:	0007      	movs	r7, r0
100160b0:	3b20      	subs	r3, #32
100160b2:	40df      	lsrs	r7, r3
100160b4:	003b      	movs	r3, r7
100160b6:	2e20      	cmp	r6, #32
100160b8:	d070      	beq.n	1001619c <__aeabi_dadd+0x404>
100160ba:	2740      	movs	r7, #64	; 0x40
100160bc:	1bbe      	subs	r6, r7, r6
100160be:	40b0      	lsls	r0, r6
100160c0:	4302      	orrs	r2, r0
100160c2:	1e50      	subs	r0, r2, #1
100160c4:	4182      	sbcs	r2, r0
100160c6:	4313      	orrs	r3, r2
100160c8:	2200      	movs	r2, #0
100160ca:	e6e2      	b.n	10015e92 <__aeabi_dadd+0xfa>
100160cc:	2c00      	cmp	r4, #0
100160ce:	d04f      	beq.n	10016170 <__aeabi_dadd+0x3d8>
100160d0:	4c18      	ldr	r4, [pc, #96]	; (10016134 <__aeabi_dadd+0x39c>)
100160d2:	45a4      	cmp	ip, r4
100160d4:	d100      	bne.n	100160d8 <__aeabi_dadd+0x340>
100160d6:	e0ab      	b.n	10016230 <__aeabi_dadd+0x498>
100160d8:	2480      	movs	r4, #128	; 0x80
100160da:	0424      	lsls	r4, r4, #16
100160dc:	4276      	negs	r6, r6
100160de:	4321      	orrs	r1, r4
100160e0:	2e38      	cmp	r6, #56	; 0x38
100160e2:	dd00      	ble.n	100160e6 <__aeabi_dadd+0x34e>
100160e4:	e0df      	b.n	100162a6 <__aeabi_dadd+0x50e>
100160e6:	2e1f      	cmp	r6, #31
100160e8:	dd00      	ble.n	100160ec <__aeabi_dadd+0x354>
100160ea:	e143      	b.n	10016374 <__aeabi_dadd+0x5dc>
100160ec:	2720      	movs	r7, #32
100160ee:	1bbc      	subs	r4, r7, r6
100160f0:	46a1      	mov	r9, r4
100160f2:	000c      	movs	r4, r1
100160f4:	464f      	mov	r7, r9
100160f6:	40bc      	lsls	r4, r7
100160f8:	46a0      	mov	r8, r4
100160fa:	002c      	movs	r4, r5
100160fc:	4647      	mov	r7, r8
100160fe:	40f4      	lsrs	r4, r6
10016100:	433c      	orrs	r4, r7
10016102:	464f      	mov	r7, r9
10016104:	40bd      	lsls	r5, r7
10016106:	1e6f      	subs	r7, r5, #1
10016108:	41bd      	sbcs	r5, r7
1001610a:	40f1      	lsrs	r1, r6
1001610c:	432c      	orrs	r4, r5
1001610e:	1b15      	subs	r5, r2, r4
10016110:	42aa      	cmp	r2, r5
10016112:	4192      	sbcs	r2, r2
10016114:	1a41      	subs	r1, r0, r1
10016116:	4252      	negs	r2, r2
10016118:	1a89      	subs	r1, r1, r2
1001611a:	4664      	mov	r4, ip
1001611c:	469a      	mov	sl, r3
1001611e:	e6bf      	b.n	10015ea0 <__aeabi_dadd+0x108>
10016120:	4641      	mov	r1, r8
10016122:	4645      	mov	r5, r8
10016124:	4331      	orrs	r1, r6
10016126:	d000      	beq.n	1001612a <__aeabi_dadd+0x392>
10016128:	e6be      	b.n	10015ea8 <__aeabi_dadd+0x110>
1001612a:	2600      	movs	r6, #0
1001612c:	2400      	movs	r4, #0
1001612e:	2500      	movs	r5, #0
10016130:	e6f2      	b.n	10015f18 <__aeabi_dadd+0x180>
10016132:	46c0      	nop			; (mov r8, r8)
10016134:	000007ff 	.word	0x000007ff
10016138:	ff7fffff 	.word	0xff7fffff
1001613c:	800fffff 	.word	0x800fffff
10016140:	2b1f      	cmp	r3, #31
10016142:	dc59      	bgt.n	100161f8 <__aeabi_dadd+0x460>
10016144:	2720      	movs	r7, #32
10016146:	1aff      	subs	r7, r7, r3
10016148:	46bc      	mov	ip, r7
1001614a:	0007      	movs	r7, r0
1001614c:	4663      	mov	r3, ip
1001614e:	409f      	lsls	r7, r3
10016150:	465b      	mov	r3, fp
10016152:	46b9      	mov	r9, r7
10016154:	0017      	movs	r7, r2
10016156:	40df      	lsrs	r7, r3
10016158:	46b8      	mov	r8, r7
1001615a:	464f      	mov	r7, r9
1001615c:	4643      	mov	r3, r8
1001615e:	431f      	orrs	r7, r3
10016160:	4663      	mov	r3, ip
10016162:	409a      	lsls	r2, r3
10016164:	1e53      	subs	r3, r2, #1
10016166:	419a      	sbcs	r2, r3
10016168:	465b      	mov	r3, fp
1001616a:	433a      	orrs	r2, r7
1001616c:	40d8      	lsrs	r0, r3
1001616e:	e6f4      	b.n	10015f5a <__aeabi_dadd+0x1c2>
10016170:	000c      	movs	r4, r1
10016172:	432c      	orrs	r4, r5
10016174:	d05c      	beq.n	10016230 <__aeabi_dadd+0x498>
10016176:	43f6      	mvns	r6, r6
10016178:	2e00      	cmp	r6, #0
1001617a:	d155      	bne.n	10016228 <__aeabi_dadd+0x490>
1001617c:	1b55      	subs	r5, r2, r5
1001617e:	42aa      	cmp	r2, r5
10016180:	41a4      	sbcs	r4, r4
10016182:	1a41      	subs	r1, r0, r1
10016184:	4264      	negs	r4, r4
10016186:	1b09      	subs	r1, r1, r4
10016188:	469a      	mov	sl, r3
1001618a:	4664      	mov	r4, ip
1001618c:	e688      	b.n	10015ea0 <__aeabi_dadd+0x108>
1001618e:	4f96      	ldr	r7, [pc, #600]	; (100163e8 <__aeabi_dadd+0x650>)
10016190:	42bc      	cmp	r4, r7
10016192:	d000      	beq.n	10016196 <__aeabi_dadd+0x3fe>
10016194:	e6d8      	b.n	10015f48 <__aeabi_dadd+0x1b0>
10016196:	e628      	b.n	10015dea <__aeabi_dadd+0x52>
10016198:	2200      	movs	r2, #0
1001619a:	e780      	b.n	1001609e <__aeabi_dadd+0x306>
1001619c:	2000      	movs	r0, #0
1001619e:	e78f      	b.n	100160c0 <__aeabi_dadd+0x328>
100161a0:	000b      	movs	r3, r1
100161a2:	432b      	orrs	r3, r5
100161a4:	2c00      	cmp	r4, #0
100161a6:	d000      	beq.n	100161aa <__aeabi_dadd+0x412>
100161a8:	e0c2      	b.n	10016330 <__aeabi_dadd+0x598>
100161aa:	2b00      	cmp	r3, #0
100161ac:	d100      	bne.n	100161b0 <__aeabi_dadd+0x418>
100161ae:	e101      	b.n	100163b4 <__aeabi_dadd+0x61c>
100161b0:	0003      	movs	r3, r0
100161b2:	4313      	orrs	r3, r2
100161b4:	d100      	bne.n	100161b8 <__aeabi_dadd+0x420>
100161b6:	e618      	b.n	10015dea <__aeabi_dadd+0x52>
100161b8:	18ab      	adds	r3, r5, r2
100161ba:	42ab      	cmp	r3, r5
100161bc:	41b6      	sbcs	r6, r6
100161be:	1809      	adds	r1, r1, r0
100161c0:	4276      	negs	r6, r6
100161c2:	1871      	adds	r1, r6, r1
100161c4:	020a      	lsls	r2, r1, #8
100161c6:	d400      	bmi.n	100161ca <__aeabi_dadd+0x432>
100161c8:	e109      	b.n	100163de <__aeabi_dadd+0x646>
100161ca:	4a88      	ldr	r2, [pc, #544]	; (100163ec <__aeabi_dadd+0x654>)
100161cc:	001d      	movs	r5, r3
100161ce:	4011      	ands	r1, r2
100161d0:	4664      	mov	r4, ip
100161d2:	e60a      	b.n	10015dea <__aeabi_dadd+0x52>
100161d4:	2c00      	cmp	r4, #0
100161d6:	d15b      	bne.n	10016290 <__aeabi_dadd+0x4f8>
100161d8:	000e      	movs	r6, r1
100161da:	432e      	orrs	r6, r5
100161dc:	d000      	beq.n	100161e0 <__aeabi_dadd+0x448>
100161de:	e08a      	b.n	100162f6 <__aeabi_dadd+0x55e>
100161e0:	0001      	movs	r1, r0
100161e2:	4311      	orrs	r1, r2
100161e4:	d100      	bne.n	100161e8 <__aeabi_dadd+0x450>
100161e6:	e0c2      	b.n	1001636e <__aeabi_dadd+0x5d6>
100161e8:	0001      	movs	r1, r0
100161ea:	0015      	movs	r5, r2
100161ec:	469a      	mov	sl, r3
100161ee:	e5fc      	b.n	10015dea <__aeabi_dadd+0x52>
100161f0:	4664      	mov	r4, ip
100161f2:	2100      	movs	r1, #0
100161f4:	2500      	movs	r5, #0
100161f6:	e68f      	b.n	10015f18 <__aeabi_dadd+0x180>
100161f8:	2320      	movs	r3, #32
100161fa:	425b      	negs	r3, r3
100161fc:	469c      	mov	ip, r3
100161fe:	44dc      	add	ip, fp
10016200:	4663      	mov	r3, ip
10016202:	0007      	movs	r7, r0
10016204:	40df      	lsrs	r7, r3
10016206:	465b      	mov	r3, fp
10016208:	46bc      	mov	ip, r7
1001620a:	2b20      	cmp	r3, #32
1001620c:	d100      	bne.n	10016210 <__aeabi_dadd+0x478>
1001620e:	e0ac      	b.n	1001636a <__aeabi_dadd+0x5d2>
10016210:	2340      	movs	r3, #64	; 0x40
10016212:	465f      	mov	r7, fp
10016214:	1bdb      	subs	r3, r3, r7
10016216:	4098      	lsls	r0, r3
10016218:	4302      	orrs	r2, r0
1001621a:	1e50      	subs	r0, r2, #1
1001621c:	4182      	sbcs	r2, r0
1001621e:	4663      	mov	r3, ip
10016220:	4313      	orrs	r3, r2
10016222:	001a      	movs	r2, r3
10016224:	2000      	movs	r0, #0
10016226:	e698      	b.n	10015f5a <__aeabi_dadd+0x1c2>
10016228:	4c6f      	ldr	r4, [pc, #444]	; (100163e8 <__aeabi_dadd+0x650>)
1001622a:	45a4      	cmp	ip, r4
1001622c:	d000      	beq.n	10016230 <__aeabi_dadd+0x498>
1001622e:	e757      	b.n	100160e0 <__aeabi_dadd+0x348>
10016230:	0001      	movs	r1, r0
10016232:	0015      	movs	r5, r2
10016234:	4664      	mov	r4, ip
10016236:	469a      	mov	sl, r3
10016238:	e5d7      	b.n	10015dea <__aeabi_dadd+0x52>
1001623a:	2c00      	cmp	r4, #0
1001623c:	d139      	bne.n	100162b2 <__aeabi_dadd+0x51a>
1001623e:	000c      	movs	r4, r1
10016240:	432c      	orrs	r4, r5
10016242:	d06e      	beq.n	10016322 <__aeabi_dadd+0x58a>
10016244:	43db      	mvns	r3, r3
10016246:	2b00      	cmp	r3, #0
10016248:	d01a      	beq.n	10016280 <__aeabi_dadd+0x4e8>
1001624a:	4c67      	ldr	r4, [pc, #412]	; (100163e8 <__aeabi_dadd+0x650>)
1001624c:	45a4      	cmp	ip, r4
1001624e:	d068      	beq.n	10016322 <__aeabi_dadd+0x58a>
10016250:	2b38      	cmp	r3, #56	; 0x38
10016252:	dd00      	ble.n	10016256 <__aeabi_dadd+0x4be>
10016254:	e0a4      	b.n	100163a0 <__aeabi_dadd+0x608>
10016256:	2b1f      	cmp	r3, #31
10016258:	dd00      	ble.n	1001625c <__aeabi_dadd+0x4c4>
1001625a:	e0ae      	b.n	100163ba <__aeabi_dadd+0x622>
1001625c:	2420      	movs	r4, #32
1001625e:	000f      	movs	r7, r1
10016260:	1ae4      	subs	r4, r4, r3
10016262:	40a7      	lsls	r7, r4
10016264:	46b9      	mov	r9, r7
10016266:	002f      	movs	r7, r5
10016268:	40df      	lsrs	r7, r3
1001626a:	46b8      	mov	r8, r7
1001626c:	46a3      	mov	fp, r4
1001626e:	464f      	mov	r7, r9
10016270:	4644      	mov	r4, r8
10016272:	4327      	orrs	r7, r4
10016274:	465c      	mov	r4, fp
10016276:	40a5      	lsls	r5, r4
10016278:	1e6c      	subs	r4, r5, #1
1001627a:	41a5      	sbcs	r5, r4
1001627c:	40d9      	lsrs	r1, r3
1001627e:	433d      	orrs	r5, r7
10016280:	18ad      	adds	r5, r5, r2
10016282:	4295      	cmp	r5, r2
10016284:	419b      	sbcs	r3, r3
10016286:	1809      	adds	r1, r1, r0
10016288:	425b      	negs	r3, r3
1001628a:	1859      	adds	r1, r3, r1
1001628c:	4664      	mov	r4, ip
1001628e:	e66b      	b.n	10015f68 <__aeabi_dadd+0x1d0>
10016290:	000c      	movs	r4, r1
10016292:	432c      	orrs	r4, r5
10016294:	d115      	bne.n	100162c2 <__aeabi_dadd+0x52a>
10016296:	0001      	movs	r1, r0
10016298:	4311      	orrs	r1, r2
1001629a:	d07b      	beq.n	10016394 <__aeabi_dadd+0x5fc>
1001629c:	0001      	movs	r1, r0
1001629e:	0015      	movs	r5, r2
100162a0:	469a      	mov	sl, r3
100162a2:	4c51      	ldr	r4, [pc, #324]	; (100163e8 <__aeabi_dadd+0x650>)
100162a4:	e5a1      	b.n	10015dea <__aeabi_dadd+0x52>
100162a6:	430d      	orrs	r5, r1
100162a8:	1e69      	subs	r1, r5, #1
100162aa:	418d      	sbcs	r5, r1
100162ac:	2100      	movs	r1, #0
100162ae:	b2ec      	uxtb	r4, r5
100162b0:	e72d      	b.n	1001610e <__aeabi_dadd+0x376>
100162b2:	4c4d      	ldr	r4, [pc, #308]	; (100163e8 <__aeabi_dadd+0x650>)
100162b4:	45a4      	cmp	ip, r4
100162b6:	d034      	beq.n	10016322 <__aeabi_dadd+0x58a>
100162b8:	2480      	movs	r4, #128	; 0x80
100162ba:	0424      	lsls	r4, r4, #16
100162bc:	425b      	negs	r3, r3
100162be:	4321      	orrs	r1, r4
100162c0:	e7c6      	b.n	10016250 <__aeabi_dadd+0x4b8>
100162c2:	0004      	movs	r4, r0
100162c4:	4314      	orrs	r4, r2
100162c6:	d04e      	beq.n	10016366 <__aeabi_dadd+0x5ce>
100162c8:	08ed      	lsrs	r5, r5, #3
100162ca:	074c      	lsls	r4, r1, #29
100162cc:	432c      	orrs	r4, r5
100162ce:	2580      	movs	r5, #128	; 0x80
100162d0:	08c9      	lsrs	r1, r1, #3
100162d2:	032d      	lsls	r5, r5, #12
100162d4:	4229      	tst	r1, r5
100162d6:	d008      	beq.n	100162ea <__aeabi_dadd+0x552>
100162d8:	08c6      	lsrs	r6, r0, #3
100162da:	422e      	tst	r6, r5
100162dc:	d105      	bne.n	100162ea <__aeabi_dadd+0x552>
100162de:	08d2      	lsrs	r2, r2, #3
100162e0:	0741      	lsls	r1, r0, #29
100162e2:	4311      	orrs	r1, r2
100162e4:	000c      	movs	r4, r1
100162e6:	469a      	mov	sl, r3
100162e8:	0031      	movs	r1, r6
100162ea:	0f62      	lsrs	r2, r4, #29
100162ec:	00c9      	lsls	r1, r1, #3
100162ee:	00e5      	lsls	r5, r4, #3
100162f0:	4311      	orrs	r1, r2
100162f2:	4c3d      	ldr	r4, [pc, #244]	; (100163e8 <__aeabi_dadd+0x650>)
100162f4:	e579      	b.n	10015dea <__aeabi_dadd+0x52>
100162f6:	0006      	movs	r6, r0
100162f8:	4316      	orrs	r6, r2
100162fa:	d100      	bne.n	100162fe <__aeabi_dadd+0x566>
100162fc:	e575      	b.n	10015dea <__aeabi_dadd+0x52>
100162fe:	1aae      	subs	r6, r5, r2
10016300:	46b0      	mov	r8, r6
10016302:	4545      	cmp	r5, r8
10016304:	41bf      	sbcs	r7, r7
10016306:	1a0e      	subs	r6, r1, r0
10016308:	427f      	negs	r7, r7
1001630a:	1bf6      	subs	r6, r6, r7
1001630c:	0237      	lsls	r7, r6, #8
1001630e:	d400      	bmi.n	10016312 <__aeabi_dadd+0x57a>
10016310:	e5f4      	b.n	10015efc <__aeabi_dadd+0x164>
10016312:	1b55      	subs	r5, r2, r5
10016314:	42aa      	cmp	r2, r5
10016316:	41b6      	sbcs	r6, r6
10016318:	1a41      	subs	r1, r0, r1
1001631a:	4276      	negs	r6, r6
1001631c:	1b89      	subs	r1, r1, r6
1001631e:	469a      	mov	sl, r3
10016320:	e563      	b.n	10015dea <__aeabi_dadd+0x52>
10016322:	0001      	movs	r1, r0
10016324:	0015      	movs	r5, r2
10016326:	4664      	mov	r4, ip
10016328:	e55f      	b.n	10015dea <__aeabi_dadd+0x52>
1001632a:	2200      	movs	r2, #0
1001632c:	2500      	movs	r5, #0
1001632e:	e57b      	b.n	10015e28 <__aeabi_dadd+0x90>
10016330:	2b00      	cmp	r3, #0
10016332:	d03b      	beq.n	100163ac <__aeabi_dadd+0x614>
10016334:	0003      	movs	r3, r0
10016336:	4313      	orrs	r3, r2
10016338:	d015      	beq.n	10016366 <__aeabi_dadd+0x5ce>
1001633a:	08ed      	lsrs	r5, r5, #3
1001633c:	074b      	lsls	r3, r1, #29
1001633e:	432b      	orrs	r3, r5
10016340:	2580      	movs	r5, #128	; 0x80
10016342:	08c9      	lsrs	r1, r1, #3
10016344:	032d      	lsls	r5, r5, #12
10016346:	4229      	tst	r1, r5
10016348:	d007      	beq.n	1001635a <__aeabi_dadd+0x5c2>
1001634a:	08c4      	lsrs	r4, r0, #3
1001634c:	422c      	tst	r4, r5
1001634e:	d104      	bne.n	1001635a <__aeabi_dadd+0x5c2>
10016350:	0741      	lsls	r1, r0, #29
10016352:	000b      	movs	r3, r1
10016354:	0021      	movs	r1, r4
10016356:	08d2      	lsrs	r2, r2, #3
10016358:	4313      	orrs	r3, r2
1001635a:	00c9      	lsls	r1, r1, #3
1001635c:	0f5a      	lsrs	r2, r3, #29
1001635e:	4311      	orrs	r1, r2
10016360:	00dd      	lsls	r5, r3, #3
10016362:	4c21      	ldr	r4, [pc, #132]	; (100163e8 <__aeabi_dadd+0x650>)
10016364:	e541      	b.n	10015dea <__aeabi_dadd+0x52>
10016366:	4c20      	ldr	r4, [pc, #128]	; (100163e8 <__aeabi_dadd+0x650>)
10016368:	e53f      	b.n	10015dea <__aeabi_dadd+0x52>
1001636a:	2000      	movs	r0, #0
1001636c:	e754      	b.n	10016218 <__aeabi_dadd+0x480>
1001636e:	2600      	movs	r6, #0
10016370:	2500      	movs	r5, #0
10016372:	e5d1      	b.n	10015f18 <__aeabi_dadd+0x180>
10016374:	0034      	movs	r4, r6
10016376:	000f      	movs	r7, r1
10016378:	3c20      	subs	r4, #32
1001637a:	40e7      	lsrs	r7, r4
1001637c:	003c      	movs	r4, r7
1001637e:	2e20      	cmp	r6, #32
10016380:	d02b      	beq.n	100163da <__aeabi_dadd+0x642>
10016382:	2740      	movs	r7, #64	; 0x40
10016384:	1bbe      	subs	r6, r7, r6
10016386:	40b1      	lsls	r1, r6
10016388:	430d      	orrs	r5, r1
1001638a:	1e69      	subs	r1, r5, #1
1001638c:	418d      	sbcs	r5, r1
1001638e:	2100      	movs	r1, #0
10016390:	432c      	orrs	r4, r5
10016392:	e6bc      	b.n	1001610e <__aeabi_dadd+0x376>
10016394:	2180      	movs	r1, #128	; 0x80
10016396:	2600      	movs	r6, #0
10016398:	0309      	lsls	r1, r1, #12
1001639a:	4c13      	ldr	r4, [pc, #76]	; (100163e8 <__aeabi_dadd+0x650>)
1001639c:	2500      	movs	r5, #0
1001639e:	e5bb      	b.n	10015f18 <__aeabi_dadd+0x180>
100163a0:	430d      	orrs	r5, r1
100163a2:	1e69      	subs	r1, r5, #1
100163a4:	418d      	sbcs	r5, r1
100163a6:	2100      	movs	r1, #0
100163a8:	b2ed      	uxtb	r5, r5
100163aa:	e769      	b.n	10016280 <__aeabi_dadd+0x4e8>
100163ac:	0001      	movs	r1, r0
100163ae:	0015      	movs	r5, r2
100163b0:	4c0d      	ldr	r4, [pc, #52]	; (100163e8 <__aeabi_dadd+0x650>)
100163b2:	e51a      	b.n	10015dea <__aeabi_dadd+0x52>
100163b4:	0001      	movs	r1, r0
100163b6:	0015      	movs	r5, r2
100163b8:	e517      	b.n	10015dea <__aeabi_dadd+0x52>
100163ba:	001c      	movs	r4, r3
100163bc:	000f      	movs	r7, r1
100163be:	3c20      	subs	r4, #32
100163c0:	40e7      	lsrs	r7, r4
100163c2:	003c      	movs	r4, r7
100163c4:	2b20      	cmp	r3, #32
100163c6:	d00c      	beq.n	100163e2 <__aeabi_dadd+0x64a>
100163c8:	2740      	movs	r7, #64	; 0x40
100163ca:	1afb      	subs	r3, r7, r3
100163cc:	4099      	lsls	r1, r3
100163ce:	430d      	orrs	r5, r1
100163d0:	1e69      	subs	r1, r5, #1
100163d2:	418d      	sbcs	r5, r1
100163d4:	2100      	movs	r1, #0
100163d6:	4325      	orrs	r5, r4
100163d8:	e752      	b.n	10016280 <__aeabi_dadd+0x4e8>
100163da:	2100      	movs	r1, #0
100163dc:	e7d4      	b.n	10016388 <__aeabi_dadd+0x5f0>
100163de:	001d      	movs	r5, r3
100163e0:	e592      	b.n	10015f08 <__aeabi_dadd+0x170>
100163e2:	2100      	movs	r1, #0
100163e4:	e7f3      	b.n	100163ce <__aeabi_dadd+0x636>
100163e6:	46c0      	nop			; (mov r8, r8)
100163e8:	000007ff 	.word	0x000007ff
100163ec:	ff7fffff 	.word	0xff7fffff

100163f0 <__aeabi_ddiv>:
100163f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100163f2:	4656      	mov	r6, sl
100163f4:	464d      	mov	r5, r9
100163f6:	4644      	mov	r4, r8
100163f8:	465f      	mov	r7, fp
100163fa:	b4f0      	push	{r4, r5, r6, r7}
100163fc:	001d      	movs	r5, r3
100163fe:	030e      	lsls	r6, r1, #12
10016400:	004c      	lsls	r4, r1, #1
10016402:	0fcb      	lsrs	r3, r1, #31
10016404:	b087      	sub	sp, #28
10016406:	0007      	movs	r7, r0
10016408:	4692      	mov	sl, r2
1001640a:	4681      	mov	r9, r0
1001640c:	0b36      	lsrs	r6, r6, #12
1001640e:	0d64      	lsrs	r4, r4, #21
10016410:	4698      	mov	r8, r3
10016412:	d06a      	beq.n	100164ea <__aeabi_ddiv+0xfa>
10016414:	4b6d      	ldr	r3, [pc, #436]	; (100165cc <__aeabi_ddiv+0x1dc>)
10016416:	429c      	cmp	r4, r3
10016418:	d035      	beq.n	10016486 <__aeabi_ddiv+0x96>
1001641a:	2280      	movs	r2, #128	; 0x80
1001641c:	0f43      	lsrs	r3, r0, #29
1001641e:	0412      	lsls	r2, r2, #16
10016420:	4313      	orrs	r3, r2
10016422:	00f6      	lsls	r6, r6, #3
10016424:	431e      	orrs	r6, r3
10016426:	00c3      	lsls	r3, r0, #3
10016428:	4699      	mov	r9, r3
1001642a:	4b69      	ldr	r3, [pc, #420]	; (100165d0 <__aeabi_ddiv+0x1e0>)
1001642c:	2700      	movs	r7, #0
1001642e:	469c      	mov	ip, r3
10016430:	2300      	movs	r3, #0
10016432:	4464      	add	r4, ip
10016434:	9302      	str	r3, [sp, #8]
10016436:	032b      	lsls	r3, r5, #12
10016438:	0068      	lsls	r0, r5, #1
1001643a:	0b1b      	lsrs	r3, r3, #12
1001643c:	0fed      	lsrs	r5, r5, #31
1001643e:	4651      	mov	r1, sl
10016440:	469b      	mov	fp, r3
10016442:	0d40      	lsrs	r0, r0, #21
10016444:	9500      	str	r5, [sp, #0]
10016446:	d100      	bne.n	1001644a <__aeabi_ddiv+0x5a>
10016448:	e078      	b.n	1001653c <__aeabi_ddiv+0x14c>
1001644a:	4b60      	ldr	r3, [pc, #384]	; (100165cc <__aeabi_ddiv+0x1dc>)
1001644c:	4298      	cmp	r0, r3
1001644e:	d06c      	beq.n	1001652a <__aeabi_ddiv+0x13a>
10016450:	465b      	mov	r3, fp
10016452:	00da      	lsls	r2, r3, #3
10016454:	0f4b      	lsrs	r3, r1, #29
10016456:	2180      	movs	r1, #128	; 0x80
10016458:	0409      	lsls	r1, r1, #16
1001645a:	430b      	orrs	r3, r1
1001645c:	4313      	orrs	r3, r2
1001645e:	469b      	mov	fp, r3
10016460:	4653      	mov	r3, sl
10016462:	00d9      	lsls	r1, r3, #3
10016464:	4b5a      	ldr	r3, [pc, #360]	; (100165d0 <__aeabi_ddiv+0x1e0>)
10016466:	469c      	mov	ip, r3
10016468:	2300      	movs	r3, #0
1001646a:	4460      	add	r0, ip
1001646c:	4642      	mov	r2, r8
1001646e:	1a20      	subs	r0, r4, r0
10016470:	406a      	eors	r2, r5
10016472:	4692      	mov	sl, r2
10016474:	9001      	str	r0, [sp, #4]
10016476:	431f      	orrs	r7, r3
10016478:	2f0f      	cmp	r7, #15
1001647a:	d900      	bls.n	1001647e <__aeabi_ddiv+0x8e>
1001647c:	e0b0      	b.n	100165e0 <__aeabi_ddiv+0x1f0>
1001647e:	4855      	ldr	r0, [pc, #340]	; (100165d4 <__aeabi_ddiv+0x1e4>)
10016480:	00bf      	lsls	r7, r7, #2
10016482:	59c0      	ldr	r0, [r0, r7]
10016484:	4687      	mov	pc, r0
10016486:	4337      	orrs	r7, r6
10016488:	d000      	beq.n	1001648c <__aeabi_ddiv+0x9c>
1001648a:	e088      	b.n	1001659e <__aeabi_ddiv+0x1ae>
1001648c:	2300      	movs	r3, #0
1001648e:	4699      	mov	r9, r3
10016490:	3302      	adds	r3, #2
10016492:	2708      	movs	r7, #8
10016494:	2600      	movs	r6, #0
10016496:	9302      	str	r3, [sp, #8]
10016498:	e7cd      	b.n	10016436 <__aeabi_ddiv+0x46>
1001649a:	4643      	mov	r3, r8
1001649c:	46b3      	mov	fp, r6
1001649e:	4649      	mov	r1, r9
100164a0:	9300      	str	r3, [sp, #0]
100164a2:	9b02      	ldr	r3, [sp, #8]
100164a4:	9a00      	ldr	r2, [sp, #0]
100164a6:	4692      	mov	sl, r2
100164a8:	2b02      	cmp	r3, #2
100164aa:	d000      	beq.n	100164ae <__aeabi_ddiv+0xbe>
100164ac:	e1bf      	b.n	1001682e <__aeabi_ddiv+0x43e>
100164ae:	2100      	movs	r1, #0
100164b0:	4653      	mov	r3, sl
100164b2:	2201      	movs	r2, #1
100164b4:	2600      	movs	r6, #0
100164b6:	4689      	mov	r9, r1
100164b8:	401a      	ands	r2, r3
100164ba:	4b44      	ldr	r3, [pc, #272]	; (100165cc <__aeabi_ddiv+0x1dc>)
100164bc:	2100      	movs	r1, #0
100164be:	0336      	lsls	r6, r6, #12
100164c0:	0d0c      	lsrs	r4, r1, #20
100164c2:	0524      	lsls	r4, r4, #20
100164c4:	0b36      	lsrs	r6, r6, #12
100164c6:	4326      	orrs	r6, r4
100164c8:	4c43      	ldr	r4, [pc, #268]	; (100165d8 <__aeabi_ddiv+0x1e8>)
100164ca:	051b      	lsls	r3, r3, #20
100164cc:	4026      	ands	r6, r4
100164ce:	431e      	orrs	r6, r3
100164d0:	0076      	lsls	r6, r6, #1
100164d2:	07d2      	lsls	r2, r2, #31
100164d4:	0876      	lsrs	r6, r6, #1
100164d6:	4316      	orrs	r6, r2
100164d8:	4648      	mov	r0, r9
100164da:	0031      	movs	r1, r6
100164dc:	b007      	add	sp, #28
100164de:	bc3c      	pop	{r2, r3, r4, r5}
100164e0:	4690      	mov	r8, r2
100164e2:	4699      	mov	r9, r3
100164e4:	46a2      	mov	sl, r4
100164e6:	46ab      	mov	fp, r5
100164e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100164ea:	0033      	movs	r3, r6
100164ec:	4303      	orrs	r3, r0
100164ee:	d04f      	beq.n	10016590 <__aeabi_ddiv+0x1a0>
100164f0:	2e00      	cmp	r6, #0
100164f2:	d100      	bne.n	100164f6 <__aeabi_ddiv+0x106>
100164f4:	e1bc      	b.n	10016870 <__aeabi_ddiv+0x480>
100164f6:	0030      	movs	r0, r6
100164f8:	f001 fafc 	bl	10017af4 <__clzsi2>
100164fc:	0003      	movs	r3, r0
100164fe:	3b0b      	subs	r3, #11
10016500:	2b1c      	cmp	r3, #28
10016502:	dd00      	ble.n	10016506 <__aeabi_ddiv+0x116>
10016504:	e1ad      	b.n	10016862 <__aeabi_ddiv+0x472>
10016506:	221d      	movs	r2, #29
10016508:	0001      	movs	r1, r0
1001650a:	1ad3      	subs	r3, r2, r3
1001650c:	3908      	subs	r1, #8
1001650e:	003a      	movs	r2, r7
10016510:	408f      	lsls	r7, r1
10016512:	408e      	lsls	r6, r1
10016514:	40da      	lsrs	r2, r3
10016516:	46b9      	mov	r9, r7
10016518:	4316      	orrs	r6, r2
1001651a:	4b30      	ldr	r3, [pc, #192]	; (100165dc <__aeabi_ddiv+0x1ec>)
1001651c:	2700      	movs	r7, #0
1001651e:	469c      	mov	ip, r3
10016520:	2300      	movs	r3, #0
10016522:	4460      	add	r0, ip
10016524:	4244      	negs	r4, r0
10016526:	9302      	str	r3, [sp, #8]
10016528:	e785      	b.n	10016436 <__aeabi_ddiv+0x46>
1001652a:	4653      	mov	r3, sl
1001652c:	465a      	mov	r2, fp
1001652e:	4313      	orrs	r3, r2
10016530:	d12c      	bne.n	1001658c <__aeabi_ddiv+0x19c>
10016532:	2300      	movs	r3, #0
10016534:	2100      	movs	r1, #0
10016536:	469b      	mov	fp, r3
10016538:	3302      	adds	r3, #2
1001653a:	e797      	b.n	1001646c <__aeabi_ddiv+0x7c>
1001653c:	430b      	orrs	r3, r1
1001653e:	d020      	beq.n	10016582 <__aeabi_ddiv+0x192>
10016540:	465b      	mov	r3, fp
10016542:	2b00      	cmp	r3, #0
10016544:	d100      	bne.n	10016548 <__aeabi_ddiv+0x158>
10016546:	e19e      	b.n	10016886 <__aeabi_ddiv+0x496>
10016548:	4658      	mov	r0, fp
1001654a:	f001 fad3 	bl	10017af4 <__clzsi2>
1001654e:	0003      	movs	r3, r0
10016550:	3b0b      	subs	r3, #11
10016552:	2b1c      	cmp	r3, #28
10016554:	dd00      	ble.n	10016558 <__aeabi_ddiv+0x168>
10016556:	e18f      	b.n	10016878 <__aeabi_ddiv+0x488>
10016558:	0002      	movs	r2, r0
1001655a:	4659      	mov	r1, fp
1001655c:	3a08      	subs	r2, #8
1001655e:	4091      	lsls	r1, r2
10016560:	468b      	mov	fp, r1
10016562:	211d      	movs	r1, #29
10016564:	1acb      	subs	r3, r1, r3
10016566:	4651      	mov	r1, sl
10016568:	40d9      	lsrs	r1, r3
1001656a:	000b      	movs	r3, r1
1001656c:	4659      	mov	r1, fp
1001656e:	430b      	orrs	r3, r1
10016570:	4651      	mov	r1, sl
10016572:	469b      	mov	fp, r3
10016574:	4091      	lsls	r1, r2
10016576:	4b19      	ldr	r3, [pc, #100]	; (100165dc <__aeabi_ddiv+0x1ec>)
10016578:	469c      	mov	ip, r3
1001657a:	4460      	add	r0, ip
1001657c:	4240      	negs	r0, r0
1001657e:	2300      	movs	r3, #0
10016580:	e774      	b.n	1001646c <__aeabi_ddiv+0x7c>
10016582:	2300      	movs	r3, #0
10016584:	2100      	movs	r1, #0
10016586:	469b      	mov	fp, r3
10016588:	3301      	adds	r3, #1
1001658a:	e76f      	b.n	1001646c <__aeabi_ddiv+0x7c>
1001658c:	2303      	movs	r3, #3
1001658e:	e76d      	b.n	1001646c <__aeabi_ddiv+0x7c>
10016590:	2300      	movs	r3, #0
10016592:	4699      	mov	r9, r3
10016594:	3301      	adds	r3, #1
10016596:	2704      	movs	r7, #4
10016598:	2600      	movs	r6, #0
1001659a:	9302      	str	r3, [sp, #8]
1001659c:	e74b      	b.n	10016436 <__aeabi_ddiv+0x46>
1001659e:	2303      	movs	r3, #3
100165a0:	270c      	movs	r7, #12
100165a2:	9302      	str	r3, [sp, #8]
100165a4:	e747      	b.n	10016436 <__aeabi_ddiv+0x46>
100165a6:	2201      	movs	r2, #1
100165a8:	1ad5      	subs	r5, r2, r3
100165aa:	2d38      	cmp	r5, #56	; 0x38
100165ac:	dc00      	bgt.n	100165b0 <__aeabi_ddiv+0x1c0>
100165ae:	e1b0      	b.n	10016912 <__aeabi_ddiv+0x522>
100165b0:	4653      	mov	r3, sl
100165b2:	401a      	ands	r2, r3
100165b4:	2100      	movs	r1, #0
100165b6:	2300      	movs	r3, #0
100165b8:	2600      	movs	r6, #0
100165ba:	4689      	mov	r9, r1
100165bc:	e77e      	b.n	100164bc <__aeabi_ddiv+0xcc>
100165be:	2300      	movs	r3, #0
100165c0:	2680      	movs	r6, #128	; 0x80
100165c2:	4699      	mov	r9, r3
100165c4:	2200      	movs	r2, #0
100165c6:	0336      	lsls	r6, r6, #12
100165c8:	4b00      	ldr	r3, [pc, #0]	; (100165cc <__aeabi_ddiv+0x1dc>)
100165ca:	e777      	b.n	100164bc <__aeabi_ddiv+0xcc>
100165cc:	000007ff 	.word	0x000007ff
100165d0:	fffffc01 	.word	0xfffffc01
100165d4:	1001a36c 	.word	0x1001a36c
100165d8:	800fffff 	.word	0x800fffff
100165dc:	000003f3 	.word	0x000003f3
100165e0:	455e      	cmp	r6, fp
100165e2:	d900      	bls.n	100165e6 <__aeabi_ddiv+0x1f6>
100165e4:	e172      	b.n	100168cc <__aeabi_ddiv+0x4dc>
100165e6:	d100      	bne.n	100165ea <__aeabi_ddiv+0x1fa>
100165e8:	e16d      	b.n	100168c6 <__aeabi_ddiv+0x4d6>
100165ea:	9b01      	ldr	r3, [sp, #4]
100165ec:	464d      	mov	r5, r9
100165ee:	3b01      	subs	r3, #1
100165f0:	9301      	str	r3, [sp, #4]
100165f2:	2300      	movs	r3, #0
100165f4:	0034      	movs	r4, r6
100165f6:	9302      	str	r3, [sp, #8]
100165f8:	465b      	mov	r3, fp
100165fa:	021e      	lsls	r6, r3, #8
100165fc:	0e0b      	lsrs	r3, r1, #24
100165fe:	431e      	orrs	r6, r3
10016600:	020b      	lsls	r3, r1, #8
10016602:	9303      	str	r3, [sp, #12]
10016604:	0c33      	lsrs	r3, r6, #16
10016606:	4699      	mov	r9, r3
10016608:	0433      	lsls	r3, r6, #16
1001660a:	0c1b      	lsrs	r3, r3, #16
1001660c:	4649      	mov	r1, r9
1001660e:	0020      	movs	r0, r4
10016610:	9300      	str	r3, [sp, #0]
10016612:	f7fe fa2f 	bl	10014a74 <__aeabi_uidiv>
10016616:	9b00      	ldr	r3, [sp, #0]
10016618:	0037      	movs	r7, r6
1001661a:	4343      	muls	r3, r0
1001661c:	0006      	movs	r6, r0
1001661e:	4649      	mov	r1, r9
10016620:	0020      	movs	r0, r4
10016622:	4698      	mov	r8, r3
10016624:	f7fe faac 	bl	10014b80 <__aeabi_uidivmod>
10016628:	0c2c      	lsrs	r4, r5, #16
1001662a:	0409      	lsls	r1, r1, #16
1001662c:	430c      	orrs	r4, r1
1001662e:	45a0      	cmp	r8, r4
10016630:	d909      	bls.n	10016646 <__aeabi_ddiv+0x256>
10016632:	19e4      	adds	r4, r4, r7
10016634:	1e73      	subs	r3, r6, #1
10016636:	42a7      	cmp	r7, r4
10016638:	d900      	bls.n	1001663c <__aeabi_ddiv+0x24c>
1001663a:	e15c      	b.n	100168f6 <__aeabi_ddiv+0x506>
1001663c:	45a0      	cmp	r8, r4
1001663e:	d800      	bhi.n	10016642 <__aeabi_ddiv+0x252>
10016640:	e159      	b.n	100168f6 <__aeabi_ddiv+0x506>
10016642:	3e02      	subs	r6, #2
10016644:	19e4      	adds	r4, r4, r7
10016646:	4643      	mov	r3, r8
10016648:	1ae4      	subs	r4, r4, r3
1001664a:	4649      	mov	r1, r9
1001664c:	0020      	movs	r0, r4
1001664e:	f7fe fa11 	bl	10014a74 <__aeabi_uidiv>
10016652:	0003      	movs	r3, r0
10016654:	9a00      	ldr	r2, [sp, #0]
10016656:	4680      	mov	r8, r0
10016658:	4353      	muls	r3, r2
1001665a:	4649      	mov	r1, r9
1001665c:	0020      	movs	r0, r4
1001665e:	469b      	mov	fp, r3
10016660:	f7fe fa8e 	bl	10014b80 <__aeabi_uidivmod>
10016664:	042a      	lsls	r2, r5, #16
10016666:	0409      	lsls	r1, r1, #16
10016668:	0c12      	lsrs	r2, r2, #16
1001666a:	430a      	orrs	r2, r1
1001666c:	4593      	cmp	fp, r2
1001666e:	d90d      	bls.n	1001668c <__aeabi_ddiv+0x29c>
10016670:	4643      	mov	r3, r8
10016672:	19d2      	adds	r2, r2, r7
10016674:	3b01      	subs	r3, #1
10016676:	4297      	cmp	r7, r2
10016678:	d900      	bls.n	1001667c <__aeabi_ddiv+0x28c>
1001667a:	e13a      	b.n	100168f2 <__aeabi_ddiv+0x502>
1001667c:	4593      	cmp	fp, r2
1001667e:	d800      	bhi.n	10016682 <__aeabi_ddiv+0x292>
10016680:	e137      	b.n	100168f2 <__aeabi_ddiv+0x502>
10016682:	2302      	movs	r3, #2
10016684:	425b      	negs	r3, r3
10016686:	469c      	mov	ip, r3
10016688:	19d2      	adds	r2, r2, r7
1001668a:	44e0      	add	r8, ip
1001668c:	465b      	mov	r3, fp
1001668e:	1ad2      	subs	r2, r2, r3
10016690:	4643      	mov	r3, r8
10016692:	0436      	lsls	r6, r6, #16
10016694:	4333      	orrs	r3, r6
10016696:	469b      	mov	fp, r3
10016698:	9903      	ldr	r1, [sp, #12]
1001669a:	0c18      	lsrs	r0, r3, #16
1001669c:	0c0b      	lsrs	r3, r1, #16
1001669e:	001d      	movs	r5, r3
100166a0:	9305      	str	r3, [sp, #20]
100166a2:	0409      	lsls	r1, r1, #16
100166a4:	465b      	mov	r3, fp
100166a6:	0c09      	lsrs	r1, r1, #16
100166a8:	000c      	movs	r4, r1
100166aa:	041b      	lsls	r3, r3, #16
100166ac:	0c1b      	lsrs	r3, r3, #16
100166ae:	4344      	muls	r4, r0
100166b0:	9104      	str	r1, [sp, #16]
100166b2:	4359      	muls	r1, r3
100166b4:	436b      	muls	r3, r5
100166b6:	4368      	muls	r0, r5
100166b8:	191b      	adds	r3, r3, r4
100166ba:	0c0d      	lsrs	r5, r1, #16
100166bc:	18eb      	adds	r3, r5, r3
100166be:	429c      	cmp	r4, r3
100166c0:	d903      	bls.n	100166ca <__aeabi_ddiv+0x2da>
100166c2:	2480      	movs	r4, #128	; 0x80
100166c4:	0264      	lsls	r4, r4, #9
100166c6:	46a4      	mov	ip, r4
100166c8:	4460      	add	r0, ip
100166ca:	0c1c      	lsrs	r4, r3, #16
100166cc:	0409      	lsls	r1, r1, #16
100166ce:	041b      	lsls	r3, r3, #16
100166d0:	0c09      	lsrs	r1, r1, #16
100166d2:	1820      	adds	r0, r4, r0
100166d4:	185d      	adds	r5, r3, r1
100166d6:	4282      	cmp	r2, r0
100166d8:	d200      	bcs.n	100166dc <__aeabi_ddiv+0x2ec>
100166da:	e0de      	b.n	1001689a <__aeabi_ddiv+0x4aa>
100166dc:	d100      	bne.n	100166e0 <__aeabi_ddiv+0x2f0>
100166de:	e0d7      	b.n	10016890 <__aeabi_ddiv+0x4a0>
100166e0:	1a16      	subs	r6, r2, r0
100166e2:	9b02      	ldr	r3, [sp, #8]
100166e4:	469c      	mov	ip, r3
100166e6:	1b5d      	subs	r5, r3, r5
100166e8:	45ac      	cmp	ip, r5
100166ea:	419b      	sbcs	r3, r3
100166ec:	425b      	negs	r3, r3
100166ee:	1af6      	subs	r6, r6, r3
100166f0:	42b7      	cmp	r7, r6
100166f2:	d100      	bne.n	100166f6 <__aeabi_ddiv+0x306>
100166f4:	e106      	b.n	10016904 <__aeabi_ddiv+0x514>
100166f6:	4649      	mov	r1, r9
100166f8:	0030      	movs	r0, r6
100166fa:	f7fe f9bb 	bl	10014a74 <__aeabi_uidiv>
100166fe:	9b00      	ldr	r3, [sp, #0]
10016700:	0004      	movs	r4, r0
10016702:	4343      	muls	r3, r0
10016704:	4649      	mov	r1, r9
10016706:	0030      	movs	r0, r6
10016708:	4698      	mov	r8, r3
1001670a:	f7fe fa39 	bl	10014b80 <__aeabi_uidivmod>
1001670e:	0c2e      	lsrs	r6, r5, #16
10016710:	0409      	lsls	r1, r1, #16
10016712:	430e      	orrs	r6, r1
10016714:	45b0      	cmp	r8, r6
10016716:	d909      	bls.n	1001672c <__aeabi_ddiv+0x33c>
10016718:	19f6      	adds	r6, r6, r7
1001671a:	1e63      	subs	r3, r4, #1
1001671c:	42b7      	cmp	r7, r6
1001671e:	d900      	bls.n	10016722 <__aeabi_ddiv+0x332>
10016720:	e0f3      	b.n	1001690a <__aeabi_ddiv+0x51a>
10016722:	45b0      	cmp	r8, r6
10016724:	d800      	bhi.n	10016728 <__aeabi_ddiv+0x338>
10016726:	e0f0      	b.n	1001690a <__aeabi_ddiv+0x51a>
10016728:	3c02      	subs	r4, #2
1001672a:	19f6      	adds	r6, r6, r7
1001672c:	4643      	mov	r3, r8
1001672e:	1af3      	subs	r3, r6, r3
10016730:	4649      	mov	r1, r9
10016732:	0018      	movs	r0, r3
10016734:	9302      	str	r3, [sp, #8]
10016736:	f7fe f99d 	bl	10014a74 <__aeabi_uidiv>
1001673a:	9b00      	ldr	r3, [sp, #0]
1001673c:	0006      	movs	r6, r0
1001673e:	4343      	muls	r3, r0
10016740:	4649      	mov	r1, r9
10016742:	9802      	ldr	r0, [sp, #8]
10016744:	4698      	mov	r8, r3
10016746:	f7fe fa1b 	bl	10014b80 <__aeabi_uidivmod>
1001674a:	042d      	lsls	r5, r5, #16
1001674c:	0409      	lsls	r1, r1, #16
1001674e:	0c2d      	lsrs	r5, r5, #16
10016750:	430d      	orrs	r5, r1
10016752:	45a8      	cmp	r8, r5
10016754:	d909      	bls.n	1001676a <__aeabi_ddiv+0x37a>
10016756:	19ed      	adds	r5, r5, r7
10016758:	1e73      	subs	r3, r6, #1
1001675a:	42af      	cmp	r7, r5
1001675c:	d900      	bls.n	10016760 <__aeabi_ddiv+0x370>
1001675e:	e0d6      	b.n	1001690e <__aeabi_ddiv+0x51e>
10016760:	45a8      	cmp	r8, r5
10016762:	d800      	bhi.n	10016766 <__aeabi_ddiv+0x376>
10016764:	e0d3      	b.n	1001690e <__aeabi_ddiv+0x51e>
10016766:	3e02      	subs	r6, #2
10016768:	19ed      	adds	r5, r5, r7
1001676a:	0424      	lsls	r4, r4, #16
1001676c:	0021      	movs	r1, r4
1001676e:	4643      	mov	r3, r8
10016770:	4331      	orrs	r1, r6
10016772:	9e04      	ldr	r6, [sp, #16]
10016774:	9a05      	ldr	r2, [sp, #20]
10016776:	0030      	movs	r0, r6
10016778:	1aed      	subs	r5, r5, r3
1001677a:	040b      	lsls	r3, r1, #16
1001677c:	0c0c      	lsrs	r4, r1, #16
1001677e:	0c1b      	lsrs	r3, r3, #16
10016780:	4358      	muls	r0, r3
10016782:	4366      	muls	r6, r4
10016784:	4353      	muls	r3, r2
10016786:	4354      	muls	r4, r2
10016788:	199a      	adds	r2, r3, r6
1001678a:	0c03      	lsrs	r3, r0, #16
1001678c:	189b      	adds	r3, r3, r2
1001678e:	429e      	cmp	r6, r3
10016790:	d903      	bls.n	1001679a <__aeabi_ddiv+0x3aa>
10016792:	2280      	movs	r2, #128	; 0x80
10016794:	0252      	lsls	r2, r2, #9
10016796:	4694      	mov	ip, r2
10016798:	4464      	add	r4, ip
1001679a:	0c1a      	lsrs	r2, r3, #16
1001679c:	0400      	lsls	r0, r0, #16
1001679e:	041b      	lsls	r3, r3, #16
100167a0:	0c00      	lsrs	r0, r0, #16
100167a2:	1914      	adds	r4, r2, r4
100167a4:	181b      	adds	r3, r3, r0
100167a6:	42a5      	cmp	r5, r4
100167a8:	d350      	bcc.n	1001684c <__aeabi_ddiv+0x45c>
100167aa:	d04d      	beq.n	10016848 <__aeabi_ddiv+0x458>
100167ac:	2301      	movs	r3, #1
100167ae:	4319      	orrs	r1, r3
100167b0:	4a96      	ldr	r2, [pc, #600]	; (10016a0c <__aeabi_ddiv+0x61c>)
100167b2:	9b01      	ldr	r3, [sp, #4]
100167b4:	4694      	mov	ip, r2
100167b6:	4463      	add	r3, ip
100167b8:	2b00      	cmp	r3, #0
100167ba:	dc00      	bgt.n	100167be <__aeabi_ddiv+0x3ce>
100167bc:	e6f3      	b.n	100165a6 <__aeabi_ddiv+0x1b6>
100167be:	074a      	lsls	r2, r1, #29
100167c0:	d009      	beq.n	100167d6 <__aeabi_ddiv+0x3e6>
100167c2:	220f      	movs	r2, #15
100167c4:	400a      	ands	r2, r1
100167c6:	2a04      	cmp	r2, #4
100167c8:	d005      	beq.n	100167d6 <__aeabi_ddiv+0x3e6>
100167ca:	1d0a      	adds	r2, r1, #4
100167cc:	428a      	cmp	r2, r1
100167ce:	4189      	sbcs	r1, r1
100167d0:	4249      	negs	r1, r1
100167d2:	448b      	add	fp, r1
100167d4:	0011      	movs	r1, r2
100167d6:	465a      	mov	r2, fp
100167d8:	01d2      	lsls	r2, r2, #7
100167da:	d508      	bpl.n	100167ee <__aeabi_ddiv+0x3fe>
100167dc:	465a      	mov	r2, fp
100167de:	4b8c      	ldr	r3, [pc, #560]	; (10016a10 <__aeabi_ddiv+0x620>)
100167e0:	401a      	ands	r2, r3
100167e2:	4693      	mov	fp, r2
100167e4:	2280      	movs	r2, #128	; 0x80
100167e6:	00d2      	lsls	r2, r2, #3
100167e8:	4694      	mov	ip, r2
100167ea:	9b01      	ldr	r3, [sp, #4]
100167ec:	4463      	add	r3, ip
100167ee:	4a89      	ldr	r2, [pc, #548]	; (10016a14 <__aeabi_ddiv+0x624>)
100167f0:	4293      	cmp	r3, r2
100167f2:	dd00      	ble.n	100167f6 <__aeabi_ddiv+0x406>
100167f4:	e65b      	b.n	100164ae <__aeabi_ddiv+0xbe>
100167f6:	465a      	mov	r2, fp
100167f8:	08c9      	lsrs	r1, r1, #3
100167fa:	0750      	lsls	r0, r2, #29
100167fc:	4308      	orrs	r0, r1
100167fe:	0256      	lsls	r6, r2, #9
10016800:	4651      	mov	r1, sl
10016802:	2201      	movs	r2, #1
10016804:	055b      	lsls	r3, r3, #21
10016806:	4681      	mov	r9, r0
10016808:	0b36      	lsrs	r6, r6, #12
1001680a:	0d5b      	lsrs	r3, r3, #21
1001680c:	400a      	ands	r2, r1
1001680e:	e655      	b.n	100164bc <__aeabi_ddiv+0xcc>
10016810:	2380      	movs	r3, #128	; 0x80
10016812:	031b      	lsls	r3, r3, #12
10016814:	421e      	tst	r6, r3
10016816:	d011      	beq.n	1001683c <__aeabi_ddiv+0x44c>
10016818:	465a      	mov	r2, fp
1001681a:	421a      	tst	r2, r3
1001681c:	d10e      	bne.n	1001683c <__aeabi_ddiv+0x44c>
1001681e:	465e      	mov	r6, fp
10016820:	431e      	orrs	r6, r3
10016822:	0336      	lsls	r6, r6, #12
10016824:	0b36      	lsrs	r6, r6, #12
10016826:	002a      	movs	r2, r5
10016828:	4689      	mov	r9, r1
1001682a:	4b7b      	ldr	r3, [pc, #492]	; (10016a18 <__aeabi_ddiv+0x628>)
1001682c:	e646      	b.n	100164bc <__aeabi_ddiv+0xcc>
1001682e:	2b03      	cmp	r3, #3
10016830:	d100      	bne.n	10016834 <__aeabi_ddiv+0x444>
10016832:	e0e1      	b.n	100169f8 <__aeabi_ddiv+0x608>
10016834:	2b01      	cmp	r3, #1
10016836:	d1bb      	bne.n	100167b0 <__aeabi_ddiv+0x3c0>
10016838:	401a      	ands	r2, r3
1001683a:	e6bb      	b.n	100165b4 <__aeabi_ddiv+0x1c4>
1001683c:	431e      	orrs	r6, r3
1001683e:	0336      	lsls	r6, r6, #12
10016840:	0b36      	lsrs	r6, r6, #12
10016842:	4642      	mov	r2, r8
10016844:	4b74      	ldr	r3, [pc, #464]	; (10016a18 <__aeabi_ddiv+0x628>)
10016846:	e639      	b.n	100164bc <__aeabi_ddiv+0xcc>
10016848:	2b00      	cmp	r3, #0
1001684a:	d0b1      	beq.n	100167b0 <__aeabi_ddiv+0x3c0>
1001684c:	197d      	adds	r5, r7, r5
1001684e:	1e4a      	subs	r2, r1, #1
10016850:	42af      	cmp	r7, r5
10016852:	d952      	bls.n	100168fa <__aeabi_ddiv+0x50a>
10016854:	0011      	movs	r1, r2
10016856:	42a5      	cmp	r5, r4
10016858:	d1a8      	bne.n	100167ac <__aeabi_ddiv+0x3bc>
1001685a:	9a03      	ldr	r2, [sp, #12]
1001685c:	429a      	cmp	r2, r3
1001685e:	d1a5      	bne.n	100167ac <__aeabi_ddiv+0x3bc>
10016860:	e7a6      	b.n	100167b0 <__aeabi_ddiv+0x3c0>
10016862:	0003      	movs	r3, r0
10016864:	003e      	movs	r6, r7
10016866:	3b28      	subs	r3, #40	; 0x28
10016868:	409e      	lsls	r6, r3
1001686a:	2300      	movs	r3, #0
1001686c:	4699      	mov	r9, r3
1001686e:	e654      	b.n	1001651a <__aeabi_ddiv+0x12a>
10016870:	f001 f940 	bl	10017af4 <__clzsi2>
10016874:	3020      	adds	r0, #32
10016876:	e641      	b.n	100164fc <__aeabi_ddiv+0x10c>
10016878:	0003      	movs	r3, r0
1001687a:	4652      	mov	r2, sl
1001687c:	3b28      	subs	r3, #40	; 0x28
1001687e:	409a      	lsls	r2, r3
10016880:	2100      	movs	r1, #0
10016882:	4693      	mov	fp, r2
10016884:	e677      	b.n	10016576 <__aeabi_ddiv+0x186>
10016886:	4650      	mov	r0, sl
10016888:	f001 f934 	bl	10017af4 <__clzsi2>
1001688c:	3020      	adds	r0, #32
1001688e:	e65e      	b.n	1001654e <__aeabi_ddiv+0x15e>
10016890:	9b02      	ldr	r3, [sp, #8]
10016892:	2600      	movs	r6, #0
10016894:	42ab      	cmp	r3, r5
10016896:	d300      	bcc.n	1001689a <__aeabi_ddiv+0x4aa>
10016898:	e723      	b.n	100166e2 <__aeabi_ddiv+0x2f2>
1001689a:	9e03      	ldr	r6, [sp, #12]
1001689c:	9902      	ldr	r1, [sp, #8]
1001689e:	46b4      	mov	ip, r6
100168a0:	4461      	add	r1, ip
100168a2:	4688      	mov	r8, r1
100168a4:	45b0      	cmp	r8, r6
100168a6:	41b6      	sbcs	r6, r6
100168a8:	465b      	mov	r3, fp
100168aa:	4276      	negs	r6, r6
100168ac:	19f6      	adds	r6, r6, r7
100168ae:	18b2      	adds	r2, r6, r2
100168b0:	3b01      	subs	r3, #1
100168b2:	9102      	str	r1, [sp, #8]
100168b4:	4297      	cmp	r7, r2
100168b6:	d213      	bcs.n	100168e0 <__aeabi_ddiv+0x4f0>
100168b8:	4290      	cmp	r0, r2
100168ba:	d84f      	bhi.n	1001695c <__aeabi_ddiv+0x56c>
100168bc:	d100      	bne.n	100168c0 <__aeabi_ddiv+0x4d0>
100168be:	e08e      	b.n	100169de <__aeabi_ddiv+0x5ee>
100168c0:	1a16      	subs	r6, r2, r0
100168c2:	469b      	mov	fp, r3
100168c4:	e70d      	b.n	100166e2 <__aeabi_ddiv+0x2f2>
100168c6:	4589      	cmp	r9, r1
100168c8:	d200      	bcs.n	100168cc <__aeabi_ddiv+0x4dc>
100168ca:	e68e      	b.n	100165ea <__aeabi_ddiv+0x1fa>
100168cc:	0874      	lsrs	r4, r6, #1
100168ce:	464b      	mov	r3, r9
100168d0:	07f6      	lsls	r6, r6, #31
100168d2:	0035      	movs	r5, r6
100168d4:	085b      	lsrs	r3, r3, #1
100168d6:	431d      	orrs	r5, r3
100168d8:	464b      	mov	r3, r9
100168da:	07db      	lsls	r3, r3, #31
100168dc:	9302      	str	r3, [sp, #8]
100168de:	e68b      	b.n	100165f8 <__aeabi_ddiv+0x208>
100168e0:	4297      	cmp	r7, r2
100168e2:	d1ed      	bne.n	100168c0 <__aeabi_ddiv+0x4d0>
100168e4:	9903      	ldr	r1, [sp, #12]
100168e6:	9c02      	ldr	r4, [sp, #8]
100168e8:	42a1      	cmp	r1, r4
100168ea:	d9e5      	bls.n	100168b8 <__aeabi_ddiv+0x4c8>
100168ec:	1a3e      	subs	r6, r7, r0
100168ee:	469b      	mov	fp, r3
100168f0:	e6f7      	b.n	100166e2 <__aeabi_ddiv+0x2f2>
100168f2:	4698      	mov	r8, r3
100168f4:	e6ca      	b.n	1001668c <__aeabi_ddiv+0x29c>
100168f6:	001e      	movs	r6, r3
100168f8:	e6a5      	b.n	10016646 <__aeabi_ddiv+0x256>
100168fa:	42ac      	cmp	r4, r5
100168fc:	d83e      	bhi.n	1001697c <__aeabi_ddiv+0x58c>
100168fe:	d074      	beq.n	100169ea <__aeabi_ddiv+0x5fa>
10016900:	0011      	movs	r1, r2
10016902:	e753      	b.n	100167ac <__aeabi_ddiv+0x3bc>
10016904:	2101      	movs	r1, #1
10016906:	4249      	negs	r1, r1
10016908:	e752      	b.n	100167b0 <__aeabi_ddiv+0x3c0>
1001690a:	001c      	movs	r4, r3
1001690c:	e70e      	b.n	1001672c <__aeabi_ddiv+0x33c>
1001690e:	001e      	movs	r6, r3
10016910:	e72b      	b.n	1001676a <__aeabi_ddiv+0x37a>
10016912:	2d1f      	cmp	r5, #31
10016914:	dc3c      	bgt.n	10016990 <__aeabi_ddiv+0x5a0>
10016916:	2320      	movs	r3, #32
10016918:	000a      	movs	r2, r1
1001691a:	4658      	mov	r0, fp
1001691c:	1b5b      	subs	r3, r3, r5
1001691e:	4098      	lsls	r0, r3
10016920:	40ea      	lsrs	r2, r5
10016922:	4099      	lsls	r1, r3
10016924:	4302      	orrs	r2, r0
10016926:	1e48      	subs	r0, r1, #1
10016928:	4181      	sbcs	r1, r0
1001692a:	465e      	mov	r6, fp
1001692c:	4311      	orrs	r1, r2
1001692e:	40ee      	lsrs	r6, r5
10016930:	074b      	lsls	r3, r1, #29
10016932:	d009      	beq.n	10016948 <__aeabi_ddiv+0x558>
10016934:	230f      	movs	r3, #15
10016936:	400b      	ands	r3, r1
10016938:	2b04      	cmp	r3, #4
1001693a:	d005      	beq.n	10016948 <__aeabi_ddiv+0x558>
1001693c:	000b      	movs	r3, r1
1001693e:	1d19      	adds	r1, r3, #4
10016940:	4299      	cmp	r1, r3
10016942:	419b      	sbcs	r3, r3
10016944:	425b      	negs	r3, r3
10016946:	18f6      	adds	r6, r6, r3
10016948:	0233      	lsls	r3, r6, #8
1001694a:	d53c      	bpl.n	100169c6 <__aeabi_ddiv+0x5d6>
1001694c:	4653      	mov	r3, sl
1001694e:	2201      	movs	r2, #1
10016950:	2100      	movs	r1, #0
10016952:	401a      	ands	r2, r3
10016954:	2600      	movs	r6, #0
10016956:	2301      	movs	r3, #1
10016958:	4689      	mov	r9, r1
1001695a:	e5af      	b.n	100164bc <__aeabi_ddiv+0xcc>
1001695c:	2302      	movs	r3, #2
1001695e:	425b      	negs	r3, r3
10016960:	469c      	mov	ip, r3
10016962:	9c03      	ldr	r4, [sp, #12]
10016964:	44e3      	add	fp, ip
10016966:	46a4      	mov	ip, r4
10016968:	9b02      	ldr	r3, [sp, #8]
1001696a:	4463      	add	r3, ip
1001696c:	4698      	mov	r8, r3
1001696e:	45a0      	cmp	r8, r4
10016970:	41b6      	sbcs	r6, r6
10016972:	4276      	negs	r6, r6
10016974:	19f6      	adds	r6, r6, r7
10016976:	9302      	str	r3, [sp, #8]
10016978:	18b2      	adds	r2, r6, r2
1001697a:	e6b1      	b.n	100166e0 <__aeabi_ddiv+0x2f0>
1001697c:	9803      	ldr	r0, [sp, #12]
1001697e:	1e8a      	subs	r2, r1, #2
10016980:	0041      	lsls	r1, r0, #1
10016982:	4281      	cmp	r1, r0
10016984:	41b6      	sbcs	r6, r6
10016986:	4276      	negs	r6, r6
10016988:	19f6      	adds	r6, r6, r7
1001698a:	19ad      	adds	r5, r5, r6
1001698c:	9103      	str	r1, [sp, #12]
1001698e:	e761      	b.n	10016854 <__aeabi_ddiv+0x464>
10016990:	221f      	movs	r2, #31
10016992:	4252      	negs	r2, r2
10016994:	1ad3      	subs	r3, r2, r3
10016996:	465a      	mov	r2, fp
10016998:	40da      	lsrs	r2, r3
1001699a:	0013      	movs	r3, r2
1001699c:	2d20      	cmp	r5, #32
1001699e:	d029      	beq.n	100169f4 <__aeabi_ddiv+0x604>
100169a0:	2240      	movs	r2, #64	; 0x40
100169a2:	4658      	mov	r0, fp
100169a4:	1b55      	subs	r5, r2, r5
100169a6:	40a8      	lsls	r0, r5
100169a8:	4301      	orrs	r1, r0
100169aa:	1e48      	subs	r0, r1, #1
100169ac:	4181      	sbcs	r1, r0
100169ae:	2007      	movs	r0, #7
100169b0:	430b      	orrs	r3, r1
100169b2:	4018      	ands	r0, r3
100169b4:	2600      	movs	r6, #0
100169b6:	2800      	cmp	r0, #0
100169b8:	d009      	beq.n	100169ce <__aeabi_ddiv+0x5de>
100169ba:	220f      	movs	r2, #15
100169bc:	2600      	movs	r6, #0
100169be:	401a      	ands	r2, r3
100169c0:	0019      	movs	r1, r3
100169c2:	2a04      	cmp	r2, #4
100169c4:	d1bb      	bne.n	1001693e <__aeabi_ddiv+0x54e>
100169c6:	000b      	movs	r3, r1
100169c8:	0770      	lsls	r0, r6, #29
100169ca:	0276      	lsls	r6, r6, #9
100169cc:	0b36      	lsrs	r6, r6, #12
100169ce:	08db      	lsrs	r3, r3, #3
100169d0:	4303      	orrs	r3, r0
100169d2:	4699      	mov	r9, r3
100169d4:	2201      	movs	r2, #1
100169d6:	4653      	mov	r3, sl
100169d8:	401a      	ands	r2, r3
100169da:	2300      	movs	r3, #0
100169dc:	e56e      	b.n	100164bc <__aeabi_ddiv+0xcc>
100169de:	9902      	ldr	r1, [sp, #8]
100169e0:	428d      	cmp	r5, r1
100169e2:	d8bb      	bhi.n	1001695c <__aeabi_ddiv+0x56c>
100169e4:	469b      	mov	fp, r3
100169e6:	2600      	movs	r6, #0
100169e8:	e67b      	b.n	100166e2 <__aeabi_ddiv+0x2f2>
100169ea:	9803      	ldr	r0, [sp, #12]
100169ec:	4298      	cmp	r0, r3
100169ee:	d3c5      	bcc.n	1001697c <__aeabi_ddiv+0x58c>
100169f0:	0011      	movs	r1, r2
100169f2:	e732      	b.n	1001685a <__aeabi_ddiv+0x46a>
100169f4:	2000      	movs	r0, #0
100169f6:	e7d7      	b.n	100169a8 <__aeabi_ddiv+0x5b8>
100169f8:	2680      	movs	r6, #128	; 0x80
100169fa:	465b      	mov	r3, fp
100169fc:	0336      	lsls	r6, r6, #12
100169fe:	431e      	orrs	r6, r3
10016a00:	0336      	lsls	r6, r6, #12
10016a02:	0b36      	lsrs	r6, r6, #12
10016a04:	9a00      	ldr	r2, [sp, #0]
10016a06:	4689      	mov	r9, r1
10016a08:	4b03      	ldr	r3, [pc, #12]	; (10016a18 <__aeabi_ddiv+0x628>)
10016a0a:	e557      	b.n	100164bc <__aeabi_ddiv+0xcc>
10016a0c:	000003ff 	.word	0x000003ff
10016a10:	feffffff 	.word	0xfeffffff
10016a14:	000007fe 	.word	0x000007fe
10016a18:	000007ff 	.word	0x000007ff

10016a1c <__eqdf2>:
10016a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
10016a1e:	465f      	mov	r7, fp
10016a20:	4656      	mov	r6, sl
10016a22:	464d      	mov	r5, r9
10016a24:	4644      	mov	r4, r8
10016a26:	b4f0      	push	{r4, r5, r6, r7}
10016a28:	031f      	lsls	r7, r3, #12
10016a2a:	005c      	lsls	r4, r3, #1
10016a2c:	0fdb      	lsrs	r3, r3, #31
10016a2e:	469a      	mov	sl, r3
10016a30:	4b19      	ldr	r3, [pc, #100]	; (10016a98 <__eqdf2+0x7c>)
10016a32:	030e      	lsls	r6, r1, #12
10016a34:	004d      	lsls	r5, r1, #1
10016a36:	0fc9      	lsrs	r1, r1, #31
10016a38:	4680      	mov	r8, r0
10016a3a:	0b36      	lsrs	r6, r6, #12
10016a3c:	0d6d      	lsrs	r5, r5, #21
10016a3e:	468b      	mov	fp, r1
10016a40:	4691      	mov	r9, r2
10016a42:	0b3f      	lsrs	r7, r7, #12
10016a44:	0d64      	lsrs	r4, r4, #21
10016a46:	429d      	cmp	r5, r3
10016a48:	d019      	beq.n	10016a7e <__eqdf2+0x62>
10016a4a:	4b13      	ldr	r3, [pc, #76]	; (10016a98 <__eqdf2+0x7c>)
10016a4c:	429c      	cmp	r4, r3
10016a4e:	d01b      	beq.n	10016a88 <__eqdf2+0x6c>
10016a50:	2301      	movs	r3, #1
10016a52:	42a5      	cmp	r5, r4
10016a54:	d006      	beq.n	10016a64 <__eqdf2+0x48>
10016a56:	0018      	movs	r0, r3
10016a58:	bc3c      	pop	{r2, r3, r4, r5}
10016a5a:	4690      	mov	r8, r2
10016a5c:	4699      	mov	r9, r3
10016a5e:	46a2      	mov	sl, r4
10016a60:	46ab      	mov	fp, r5
10016a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
10016a64:	42be      	cmp	r6, r7
10016a66:	d1f6      	bne.n	10016a56 <__eqdf2+0x3a>
10016a68:	45c8      	cmp	r8, r9
10016a6a:	d1f4      	bne.n	10016a56 <__eqdf2+0x3a>
10016a6c:	45d3      	cmp	fp, sl
10016a6e:	d010      	beq.n	10016a92 <__eqdf2+0x76>
10016a70:	2d00      	cmp	r5, #0
10016a72:	d1f0      	bne.n	10016a56 <__eqdf2+0x3a>
10016a74:	4330      	orrs	r0, r6
10016a76:	0003      	movs	r3, r0
10016a78:	1e5a      	subs	r2, r3, #1
10016a7a:	4193      	sbcs	r3, r2
10016a7c:	e7eb      	b.n	10016a56 <__eqdf2+0x3a>
10016a7e:	0031      	movs	r1, r6
10016a80:	2301      	movs	r3, #1
10016a82:	4301      	orrs	r1, r0
10016a84:	d1e7      	bne.n	10016a56 <__eqdf2+0x3a>
10016a86:	e7e0      	b.n	10016a4a <__eqdf2+0x2e>
10016a88:	433a      	orrs	r2, r7
10016a8a:	2301      	movs	r3, #1
10016a8c:	2a00      	cmp	r2, #0
10016a8e:	d1e2      	bne.n	10016a56 <__eqdf2+0x3a>
10016a90:	e7de      	b.n	10016a50 <__eqdf2+0x34>
10016a92:	2300      	movs	r3, #0
10016a94:	e7df      	b.n	10016a56 <__eqdf2+0x3a>
10016a96:	46c0      	nop			; (mov r8, r8)
10016a98:	000007ff 	.word	0x000007ff

10016a9c <__gedf2>:
10016a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
10016a9e:	465f      	mov	r7, fp
10016aa0:	4644      	mov	r4, r8
10016aa2:	4656      	mov	r6, sl
10016aa4:	464d      	mov	r5, r9
10016aa6:	b4f0      	push	{r4, r5, r6, r7}
10016aa8:	031f      	lsls	r7, r3, #12
10016aaa:	0b3c      	lsrs	r4, r7, #12
10016aac:	4f2c      	ldr	r7, [pc, #176]	; (10016b60 <__gedf2+0xc4>)
10016aae:	030e      	lsls	r6, r1, #12
10016ab0:	004d      	lsls	r5, r1, #1
10016ab2:	46a3      	mov	fp, r4
10016ab4:	005c      	lsls	r4, r3, #1
10016ab6:	4684      	mov	ip, r0
10016ab8:	0b36      	lsrs	r6, r6, #12
10016aba:	0d6d      	lsrs	r5, r5, #21
10016abc:	0fc9      	lsrs	r1, r1, #31
10016abe:	4690      	mov	r8, r2
10016ac0:	0d64      	lsrs	r4, r4, #21
10016ac2:	0fdb      	lsrs	r3, r3, #31
10016ac4:	42bd      	cmp	r5, r7
10016ac6:	d02b      	beq.n	10016b20 <__gedf2+0x84>
10016ac8:	4f25      	ldr	r7, [pc, #148]	; (10016b60 <__gedf2+0xc4>)
10016aca:	42bc      	cmp	r4, r7
10016acc:	d02e      	beq.n	10016b2c <__gedf2+0x90>
10016ace:	2d00      	cmp	r5, #0
10016ad0:	d10e      	bne.n	10016af0 <__gedf2+0x54>
10016ad2:	4330      	orrs	r0, r6
10016ad4:	0007      	movs	r7, r0
10016ad6:	4681      	mov	r9, r0
10016ad8:	4278      	negs	r0, r7
10016ada:	4178      	adcs	r0, r7
10016adc:	2c00      	cmp	r4, #0
10016ade:	d117      	bne.n	10016b10 <__gedf2+0x74>
10016ae0:	465f      	mov	r7, fp
10016ae2:	433a      	orrs	r2, r7
10016ae4:	d114      	bne.n	10016b10 <__gedf2+0x74>
10016ae6:	464b      	mov	r3, r9
10016ae8:	2000      	movs	r0, #0
10016aea:	2b00      	cmp	r3, #0
10016aec:	d00a      	beq.n	10016b04 <__gedf2+0x68>
10016aee:	e006      	b.n	10016afe <__gedf2+0x62>
10016af0:	2c00      	cmp	r4, #0
10016af2:	d102      	bne.n	10016afa <__gedf2+0x5e>
10016af4:	4658      	mov	r0, fp
10016af6:	4302      	orrs	r2, r0
10016af8:	d001      	beq.n	10016afe <__gedf2+0x62>
10016afa:	4299      	cmp	r1, r3
10016afc:	d01a      	beq.n	10016b34 <__gedf2+0x98>
10016afe:	2301      	movs	r3, #1
10016b00:	4248      	negs	r0, r1
10016b02:	4318      	orrs	r0, r3
10016b04:	bc3c      	pop	{r2, r3, r4, r5}
10016b06:	4690      	mov	r8, r2
10016b08:	4699      	mov	r9, r3
10016b0a:	46a2      	mov	sl, r4
10016b0c:	46ab      	mov	fp, r5
10016b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10016b10:	2800      	cmp	r0, #0
10016b12:	d0f2      	beq.n	10016afa <__gedf2+0x5e>
10016b14:	4258      	negs	r0, r3
10016b16:	4158      	adcs	r0, r3
10016b18:	2201      	movs	r2, #1
10016b1a:	4240      	negs	r0, r0
10016b1c:	4310      	orrs	r0, r2
10016b1e:	e7f1      	b.n	10016b04 <__gedf2+0x68>
10016b20:	0037      	movs	r7, r6
10016b22:	4307      	orrs	r7, r0
10016b24:	d0d0      	beq.n	10016ac8 <__gedf2+0x2c>
10016b26:	2002      	movs	r0, #2
10016b28:	4240      	negs	r0, r0
10016b2a:	e7eb      	b.n	10016b04 <__gedf2+0x68>
10016b2c:	465f      	mov	r7, fp
10016b2e:	4317      	orrs	r7, r2
10016b30:	d0cd      	beq.n	10016ace <__gedf2+0x32>
10016b32:	e7f8      	b.n	10016b26 <__gedf2+0x8a>
10016b34:	42a5      	cmp	r5, r4
10016b36:	dce2      	bgt.n	10016afe <__gedf2+0x62>
10016b38:	db05      	blt.n	10016b46 <__gedf2+0xaa>
10016b3a:	455e      	cmp	r6, fp
10016b3c:	d8df      	bhi.n	10016afe <__gedf2+0x62>
10016b3e:	d008      	beq.n	10016b52 <__gedf2+0xb6>
10016b40:	2000      	movs	r0, #0
10016b42:	455e      	cmp	r6, fp
10016b44:	d2de      	bcs.n	10016b04 <__gedf2+0x68>
10016b46:	4248      	negs	r0, r1
10016b48:	4148      	adcs	r0, r1
10016b4a:	2301      	movs	r3, #1
10016b4c:	4240      	negs	r0, r0
10016b4e:	4318      	orrs	r0, r3
10016b50:	e7d8      	b.n	10016b04 <__gedf2+0x68>
10016b52:	45c4      	cmp	ip, r8
10016b54:	d8d3      	bhi.n	10016afe <__gedf2+0x62>
10016b56:	2000      	movs	r0, #0
10016b58:	45c4      	cmp	ip, r8
10016b5a:	d3f4      	bcc.n	10016b46 <__gedf2+0xaa>
10016b5c:	e7d2      	b.n	10016b04 <__gedf2+0x68>
10016b5e:	46c0      	nop			; (mov r8, r8)
10016b60:	000007ff 	.word	0x000007ff

10016b64 <__ledf2>:
10016b64:	b5f0      	push	{r4, r5, r6, r7, lr}
10016b66:	465f      	mov	r7, fp
10016b68:	464d      	mov	r5, r9
10016b6a:	4644      	mov	r4, r8
10016b6c:	4656      	mov	r6, sl
10016b6e:	b4f0      	push	{r4, r5, r6, r7}
10016b70:	031c      	lsls	r4, r3, #12
10016b72:	0b24      	lsrs	r4, r4, #12
10016b74:	46a4      	mov	ip, r4
10016b76:	4c2f      	ldr	r4, [pc, #188]	; (10016c34 <__ledf2+0xd0>)
10016b78:	030f      	lsls	r7, r1, #12
10016b7a:	004d      	lsls	r5, r1, #1
10016b7c:	005e      	lsls	r6, r3, #1
10016b7e:	0fc9      	lsrs	r1, r1, #31
10016b80:	4680      	mov	r8, r0
10016b82:	0b3f      	lsrs	r7, r7, #12
10016b84:	0d6d      	lsrs	r5, r5, #21
10016b86:	468b      	mov	fp, r1
10016b88:	4691      	mov	r9, r2
10016b8a:	0d76      	lsrs	r6, r6, #21
10016b8c:	0fdb      	lsrs	r3, r3, #31
10016b8e:	42a5      	cmp	r5, r4
10016b90:	d020      	beq.n	10016bd4 <__ledf2+0x70>
10016b92:	4c28      	ldr	r4, [pc, #160]	; (10016c34 <__ledf2+0xd0>)
10016b94:	42a6      	cmp	r6, r4
10016b96:	d022      	beq.n	10016bde <__ledf2+0x7a>
10016b98:	2d00      	cmp	r5, #0
10016b9a:	d112      	bne.n	10016bc2 <__ledf2+0x5e>
10016b9c:	4338      	orrs	r0, r7
10016b9e:	4244      	negs	r4, r0
10016ba0:	4144      	adcs	r4, r0
10016ba2:	2e00      	cmp	r6, #0
10016ba4:	d020      	beq.n	10016be8 <__ledf2+0x84>
10016ba6:	2c00      	cmp	r4, #0
10016ba8:	d00d      	beq.n	10016bc6 <__ledf2+0x62>
10016baa:	425c      	negs	r4, r3
10016bac:	4163      	adcs	r3, r4
10016bae:	2401      	movs	r4, #1
10016bb0:	425b      	negs	r3, r3
10016bb2:	431c      	orrs	r4, r3
10016bb4:	0020      	movs	r0, r4
10016bb6:	bc3c      	pop	{r2, r3, r4, r5}
10016bb8:	4690      	mov	r8, r2
10016bba:	4699      	mov	r9, r3
10016bbc:	46a2      	mov	sl, r4
10016bbe:	46ab      	mov	fp, r5
10016bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10016bc2:	2e00      	cmp	r6, #0
10016bc4:	d017      	beq.n	10016bf6 <__ledf2+0x92>
10016bc6:	455b      	cmp	r3, fp
10016bc8:	d019      	beq.n	10016bfe <__ledf2+0x9a>
10016bca:	465b      	mov	r3, fp
10016bcc:	425c      	negs	r4, r3
10016bce:	2301      	movs	r3, #1
10016bd0:	431c      	orrs	r4, r3
10016bd2:	e7ef      	b.n	10016bb4 <__ledf2+0x50>
10016bd4:	0039      	movs	r1, r7
10016bd6:	2402      	movs	r4, #2
10016bd8:	4301      	orrs	r1, r0
10016bda:	d1eb      	bne.n	10016bb4 <__ledf2+0x50>
10016bdc:	e7d9      	b.n	10016b92 <__ledf2+0x2e>
10016bde:	4661      	mov	r1, ip
10016be0:	2402      	movs	r4, #2
10016be2:	4311      	orrs	r1, r2
10016be4:	d1e6      	bne.n	10016bb4 <__ledf2+0x50>
10016be6:	e7d7      	b.n	10016b98 <__ledf2+0x34>
10016be8:	4661      	mov	r1, ip
10016bea:	430a      	orrs	r2, r1
10016bec:	d1db      	bne.n	10016ba6 <__ledf2+0x42>
10016bee:	2400      	movs	r4, #0
10016bf0:	2800      	cmp	r0, #0
10016bf2:	d0df      	beq.n	10016bb4 <__ledf2+0x50>
10016bf4:	e7e9      	b.n	10016bca <__ledf2+0x66>
10016bf6:	4661      	mov	r1, ip
10016bf8:	430a      	orrs	r2, r1
10016bfa:	d1e4      	bne.n	10016bc6 <__ledf2+0x62>
10016bfc:	e7e5      	b.n	10016bca <__ledf2+0x66>
10016bfe:	42b5      	cmp	r5, r6
10016c00:	dd03      	ble.n	10016c0a <__ledf2+0xa6>
10016c02:	2201      	movs	r2, #1
10016c04:	425c      	negs	r4, r3
10016c06:	4314      	orrs	r4, r2
10016c08:	e7d4      	b.n	10016bb4 <__ledf2+0x50>
10016c0a:	42b5      	cmp	r5, r6
10016c0c:	dbcd      	blt.n	10016baa <__ledf2+0x46>
10016c0e:	4567      	cmp	r7, ip
10016c10:	d8db      	bhi.n	10016bca <__ledf2+0x66>
10016c12:	d009      	beq.n	10016c28 <__ledf2+0xc4>
10016c14:	2400      	movs	r4, #0
10016c16:	4567      	cmp	r7, ip
10016c18:	d2cc      	bcs.n	10016bb4 <__ledf2+0x50>
10016c1a:	4659      	mov	r1, fp
10016c1c:	424c      	negs	r4, r1
10016c1e:	4161      	adcs	r1, r4
10016c20:	2401      	movs	r4, #1
10016c22:	4249      	negs	r1, r1
10016c24:	430c      	orrs	r4, r1
10016c26:	e7c5      	b.n	10016bb4 <__ledf2+0x50>
10016c28:	45c8      	cmp	r8, r9
10016c2a:	d8ce      	bhi.n	10016bca <__ledf2+0x66>
10016c2c:	2400      	movs	r4, #0
10016c2e:	45c8      	cmp	r8, r9
10016c30:	d3f3      	bcc.n	10016c1a <__ledf2+0xb6>
10016c32:	e7bf      	b.n	10016bb4 <__ledf2+0x50>
10016c34:	000007ff 	.word	0x000007ff

10016c38 <__aeabi_dmul>:
10016c38:	b5f0      	push	{r4, r5, r6, r7, lr}
10016c3a:	465f      	mov	r7, fp
10016c3c:	4656      	mov	r6, sl
10016c3e:	464d      	mov	r5, r9
10016c40:	4644      	mov	r4, r8
10016c42:	b4f0      	push	{r4, r5, r6, r7}
10016c44:	030d      	lsls	r5, r1, #12
10016c46:	4699      	mov	r9, r3
10016c48:	004e      	lsls	r6, r1, #1
10016c4a:	0b2b      	lsrs	r3, r5, #12
10016c4c:	b087      	sub	sp, #28
10016c4e:	0007      	movs	r7, r0
10016c50:	4692      	mov	sl, r2
10016c52:	4680      	mov	r8, r0
10016c54:	469b      	mov	fp, r3
10016c56:	0d76      	lsrs	r6, r6, #21
10016c58:	0fcc      	lsrs	r4, r1, #31
10016c5a:	2e00      	cmp	r6, #0
10016c5c:	d069      	beq.n	10016d32 <__aeabi_dmul+0xfa>
10016c5e:	4b6d      	ldr	r3, [pc, #436]	; (10016e14 <__aeabi_dmul+0x1dc>)
10016c60:	429e      	cmp	r6, r3
10016c62:	d035      	beq.n	10016cd0 <__aeabi_dmul+0x98>
10016c64:	465b      	mov	r3, fp
10016c66:	2280      	movs	r2, #128	; 0x80
10016c68:	00dd      	lsls	r5, r3, #3
10016c6a:	0412      	lsls	r2, r2, #16
10016c6c:	0f43      	lsrs	r3, r0, #29
10016c6e:	4313      	orrs	r3, r2
10016c70:	432b      	orrs	r3, r5
10016c72:	469b      	mov	fp, r3
10016c74:	00c3      	lsls	r3, r0, #3
10016c76:	4698      	mov	r8, r3
10016c78:	4b67      	ldr	r3, [pc, #412]	; (10016e18 <__aeabi_dmul+0x1e0>)
10016c7a:	2700      	movs	r7, #0
10016c7c:	469c      	mov	ip, r3
10016c7e:	2300      	movs	r3, #0
10016c80:	4466      	add	r6, ip
10016c82:	9301      	str	r3, [sp, #4]
10016c84:	464a      	mov	r2, r9
10016c86:	0315      	lsls	r5, r2, #12
10016c88:	0050      	lsls	r0, r2, #1
10016c8a:	0fd2      	lsrs	r2, r2, #31
10016c8c:	4653      	mov	r3, sl
10016c8e:	0b2d      	lsrs	r5, r5, #12
10016c90:	0d40      	lsrs	r0, r0, #21
10016c92:	4691      	mov	r9, r2
10016c94:	d100      	bne.n	10016c98 <__aeabi_dmul+0x60>
10016c96:	e076      	b.n	10016d86 <__aeabi_dmul+0x14e>
10016c98:	4a5e      	ldr	r2, [pc, #376]	; (10016e14 <__aeabi_dmul+0x1dc>)
10016c9a:	4290      	cmp	r0, r2
10016c9c:	d06c      	beq.n	10016d78 <__aeabi_dmul+0x140>
10016c9e:	2280      	movs	r2, #128	; 0x80
10016ca0:	0f5b      	lsrs	r3, r3, #29
10016ca2:	0412      	lsls	r2, r2, #16
10016ca4:	4313      	orrs	r3, r2
10016ca6:	4a5c      	ldr	r2, [pc, #368]	; (10016e18 <__aeabi_dmul+0x1e0>)
10016ca8:	00ed      	lsls	r5, r5, #3
10016caa:	4694      	mov	ip, r2
10016cac:	431d      	orrs	r5, r3
10016cae:	4653      	mov	r3, sl
10016cb0:	2200      	movs	r2, #0
10016cb2:	00db      	lsls	r3, r3, #3
10016cb4:	4460      	add	r0, ip
10016cb6:	4649      	mov	r1, r9
10016cb8:	1836      	adds	r6, r6, r0
10016cba:	1c70      	adds	r0, r6, #1
10016cbc:	4061      	eors	r1, r4
10016cbe:	9002      	str	r0, [sp, #8]
10016cc0:	4317      	orrs	r7, r2
10016cc2:	2f0f      	cmp	r7, #15
10016cc4:	d900      	bls.n	10016cc8 <__aeabi_dmul+0x90>
10016cc6:	e0af      	b.n	10016e28 <__aeabi_dmul+0x1f0>
10016cc8:	4854      	ldr	r0, [pc, #336]	; (10016e1c <__aeabi_dmul+0x1e4>)
10016cca:	00bf      	lsls	r7, r7, #2
10016ccc:	59c7      	ldr	r7, [r0, r7]
10016cce:	46bf      	mov	pc, r7
10016cd0:	465b      	mov	r3, fp
10016cd2:	431f      	orrs	r7, r3
10016cd4:	d000      	beq.n	10016cd8 <__aeabi_dmul+0xa0>
10016cd6:	e088      	b.n	10016dea <__aeabi_dmul+0x1b2>
10016cd8:	2300      	movs	r3, #0
10016cda:	469b      	mov	fp, r3
10016cdc:	4698      	mov	r8, r3
10016cde:	3302      	adds	r3, #2
10016ce0:	2708      	movs	r7, #8
10016ce2:	9301      	str	r3, [sp, #4]
10016ce4:	e7ce      	b.n	10016c84 <__aeabi_dmul+0x4c>
10016ce6:	4649      	mov	r1, r9
10016ce8:	2a02      	cmp	r2, #2
10016cea:	d06a      	beq.n	10016dc2 <__aeabi_dmul+0x18a>
10016cec:	2a03      	cmp	r2, #3
10016cee:	d100      	bne.n	10016cf2 <__aeabi_dmul+0xba>
10016cf0:	e209      	b.n	10017106 <__aeabi_dmul+0x4ce>
10016cf2:	2a01      	cmp	r2, #1
10016cf4:	d000      	beq.n	10016cf8 <__aeabi_dmul+0xc0>
10016cf6:	e1bb      	b.n	10017070 <__aeabi_dmul+0x438>
10016cf8:	4011      	ands	r1, r2
10016cfa:	2200      	movs	r2, #0
10016cfc:	2300      	movs	r3, #0
10016cfe:	2500      	movs	r5, #0
10016d00:	4690      	mov	r8, r2
10016d02:	b2cc      	uxtb	r4, r1
10016d04:	2100      	movs	r1, #0
10016d06:	032d      	lsls	r5, r5, #12
10016d08:	0d0a      	lsrs	r2, r1, #20
10016d0a:	0512      	lsls	r2, r2, #20
10016d0c:	0b2d      	lsrs	r5, r5, #12
10016d0e:	4315      	orrs	r5, r2
10016d10:	4a43      	ldr	r2, [pc, #268]	; (10016e20 <__aeabi_dmul+0x1e8>)
10016d12:	051b      	lsls	r3, r3, #20
10016d14:	4015      	ands	r5, r2
10016d16:	431d      	orrs	r5, r3
10016d18:	006d      	lsls	r5, r5, #1
10016d1a:	07e4      	lsls	r4, r4, #31
10016d1c:	086d      	lsrs	r5, r5, #1
10016d1e:	4325      	orrs	r5, r4
10016d20:	4640      	mov	r0, r8
10016d22:	0029      	movs	r1, r5
10016d24:	b007      	add	sp, #28
10016d26:	bc3c      	pop	{r2, r3, r4, r5}
10016d28:	4690      	mov	r8, r2
10016d2a:	4699      	mov	r9, r3
10016d2c:	46a2      	mov	sl, r4
10016d2e:	46ab      	mov	fp, r5
10016d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
10016d32:	4303      	orrs	r3, r0
10016d34:	d052      	beq.n	10016ddc <__aeabi_dmul+0x1a4>
10016d36:	465b      	mov	r3, fp
10016d38:	2b00      	cmp	r3, #0
10016d3a:	d100      	bne.n	10016d3e <__aeabi_dmul+0x106>
10016d3c:	e18a      	b.n	10017054 <__aeabi_dmul+0x41c>
10016d3e:	4658      	mov	r0, fp
10016d40:	f000 fed8 	bl	10017af4 <__clzsi2>
10016d44:	0003      	movs	r3, r0
10016d46:	3b0b      	subs	r3, #11
10016d48:	2b1c      	cmp	r3, #28
10016d4a:	dd00      	ble.n	10016d4e <__aeabi_dmul+0x116>
10016d4c:	e17b      	b.n	10017046 <__aeabi_dmul+0x40e>
10016d4e:	221d      	movs	r2, #29
10016d50:	1ad3      	subs	r3, r2, r3
10016d52:	003a      	movs	r2, r7
10016d54:	0001      	movs	r1, r0
10016d56:	465d      	mov	r5, fp
10016d58:	40da      	lsrs	r2, r3
10016d5a:	3908      	subs	r1, #8
10016d5c:	408d      	lsls	r5, r1
10016d5e:	0013      	movs	r3, r2
10016d60:	408f      	lsls	r7, r1
10016d62:	432b      	orrs	r3, r5
10016d64:	469b      	mov	fp, r3
10016d66:	46b8      	mov	r8, r7
10016d68:	4b2e      	ldr	r3, [pc, #184]	; (10016e24 <__aeabi_dmul+0x1ec>)
10016d6a:	2700      	movs	r7, #0
10016d6c:	469c      	mov	ip, r3
10016d6e:	2300      	movs	r3, #0
10016d70:	4460      	add	r0, ip
10016d72:	4246      	negs	r6, r0
10016d74:	9301      	str	r3, [sp, #4]
10016d76:	e785      	b.n	10016c84 <__aeabi_dmul+0x4c>
10016d78:	4652      	mov	r2, sl
10016d7a:	432a      	orrs	r2, r5
10016d7c:	d12c      	bne.n	10016dd8 <__aeabi_dmul+0x1a0>
10016d7e:	2500      	movs	r5, #0
10016d80:	2300      	movs	r3, #0
10016d82:	2202      	movs	r2, #2
10016d84:	e797      	b.n	10016cb6 <__aeabi_dmul+0x7e>
10016d86:	4652      	mov	r2, sl
10016d88:	432a      	orrs	r2, r5
10016d8a:	d021      	beq.n	10016dd0 <__aeabi_dmul+0x198>
10016d8c:	2d00      	cmp	r5, #0
10016d8e:	d100      	bne.n	10016d92 <__aeabi_dmul+0x15a>
10016d90:	e154      	b.n	1001703c <__aeabi_dmul+0x404>
10016d92:	0028      	movs	r0, r5
10016d94:	f000 feae 	bl	10017af4 <__clzsi2>
10016d98:	0003      	movs	r3, r0
10016d9a:	3b0b      	subs	r3, #11
10016d9c:	2b1c      	cmp	r3, #28
10016d9e:	dd00      	ble.n	10016da2 <__aeabi_dmul+0x16a>
10016da0:	e146      	b.n	10017030 <__aeabi_dmul+0x3f8>
10016da2:	211d      	movs	r1, #29
10016da4:	1acb      	subs	r3, r1, r3
10016da6:	4651      	mov	r1, sl
10016da8:	0002      	movs	r2, r0
10016daa:	40d9      	lsrs	r1, r3
10016dac:	4653      	mov	r3, sl
10016dae:	3a08      	subs	r2, #8
10016db0:	4095      	lsls	r5, r2
10016db2:	4093      	lsls	r3, r2
10016db4:	430d      	orrs	r5, r1
10016db6:	4a1b      	ldr	r2, [pc, #108]	; (10016e24 <__aeabi_dmul+0x1ec>)
10016db8:	4694      	mov	ip, r2
10016dba:	4460      	add	r0, ip
10016dbc:	4240      	negs	r0, r0
10016dbe:	2200      	movs	r2, #0
10016dc0:	e779      	b.n	10016cb6 <__aeabi_dmul+0x7e>
10016dc2:	2401      	movs	r4, #1
10016dc4:	2200      	movs	r2, #0
10016dc6:	400c      	ands	r4, r1
10016dc8:	4b12      	ldr	r3, [pc, #72]	; (10016e14 <__aeabi_dmul+0x1dc>)
10016dca:	2500      	movs	r5, #0
10016dcc:	4690      	mov	r8, r2
10016dce:	e799      	b.n	10016d04 <__aeabi_dmul+0xcc>
10016dd0:	2500      	movs	r5, #0
10016dd2:	2300      	movs	r3, #0
10016dd4:	2201      	movs	r2, #1
10016dd6:	e76e      	b.n	10016cb6 <__aeabi_dmul+0x7e>
10016dd8:	2203      	movs	r2, #3
10016dda:	e76c      	b.n	10016cb6 <__aeabi_dmul+0x7e>
10016ddc:	2300      	movs	r3, #0
10016dde:	469b      	mov	fp, r3
10016de0:	4698      	mov	r8, r3
10016de2:	3301      	adds	r3, #1
10016de4:	2704      	movs	r7, #4
10016de6:	9301      	str	r3, [sp, #4]
10016de8:	e74c      	b.n	10016c84 <__aeabi_dmul+0x4c>
10016dea:	2303      	movs	r3, #3
10016dec:	270c      	movs	r7, #12
10016dee:	9301      	str	r3, [sp, #4]
10016df0:	e748      	b.n	10016c84 <__aeabi_dmul+0x4c>
10016df2:	2300      	movs	r3, #0
10016df4:	2580      	movs	r5, #128	; 0x80
10016df6:	4698      	mov	r8, r3
10016df8:	2400      	movs	r4, #0
10016dfa:	032d      	lsls	r5, r5, #12
10016dfc:	4b05      	ldr	r3, [pc, #20]	; (10016e14 <__aeabi_dmul+0x1dc>)
10016dfe:	e781      	b.n	10016d04 <__aeabi_dmul+0xcc>
10016e00:	465d      	mov	r5, fp
10016e02:	4643      	mov	r3, r8
10016e04:	9a01      	ldr	r2, [sp, #4]
10016e06:	e76f      	b.n	10016ce8 <__aeabi_dmul+0xb0>
10016e08:	465d      	mov	r5, fp
10016e0a:	4643      	mov	r3, r8
10016e0c:	0021      	movs	r1, r4
10016e0e:	9a01      	ldr	r2, [sp, #4]
10016e10:	e76a      	b.n	10016ce8 <__aeabi_dmul+0xb0>
10016e12:	46c0      	nop			; (mov r8, r8)
10016e14:	000007ff 	.word	0x000007ff
10016e18:	fffffc01 	.word	0xfffffc01
10016e1c:	1001a3ac 	.word	0x1001a3ac
10016e20:	800fffff 	.word	0x800fffff
10016e24:	000003f3 	.word	0x000003f3
10016e28:	4642      	mov	r2, r8
10016e2a:	0c12      	lsrs	r2, r2, #16
10016e2c:	4691      	mov	r9, r2
10016e2e:	0c1a      	lsrs	r2, r3, #16
10016e30:	4694      	mov	ip, r2
10016e32:	4642      	mov	r2, r8
10016e34:	0417      	lsls	r7, r2, #16
10016e36:	464a      	mov	r2, r9
10016e38:	041b      	lsls	r3, r3, #16
10016e3a:	0c1b      	lsrs	r3, r3, #16
10016e3c:	435a      	muls	r2, r3
10016e3e:	4660      	mov	r0, ip
10016e40:	4690      	mov	r8, r2
10016e42:	464a      	mov	r2, r9
10016e44:	4342      	muls	r2, r0
10016e46:	0010      	movs	r0, r2
10016e48:	9203      	str	r2, [sp, #12]
10016e4a:	4662      	mov	r2, ip
10016e4c:	001c      	movs	r4, r3
10016e4e:	0c3f      	lsrs	r7, r7, #16
10016e50:	437a      	muls	r2, r7
10016e52:	437c      	muls	r4, r7
10016e54:	4442      	add	r2, r8
10016e56:	9201      	str	r2, [sp, #4]
10016e58:	0c22      	lsrs	r2, r4, #16
10016e5a:	4692      	mov	sl, r2
10016e5c:	9a01      	ldr	r2, [sp, #4]
10016e5e:	4452      	add	r2, sl
10016e60:	4590      	cmp	r8, r2
10016e62:	d906      	bls.n	10016e72 <__aeabi_dmul+0x23a>
10016e64:	4682      	mov	sl, r0
10016e66:	2080      	movs	r0, #128	; 0x80
10016e68:	0240      	lsls	r0, r0, #9
10016e6a:	4680      	mov	r8, r0
10016e6c:	44c2      	add	sl, r8
10016e6e:	4650      	mov	r0, sl
10016e70:	9003      	str	r0, [sp, #12]
10016e72:	0c10      	lsrs	r0, r2, #16
10016e74:	9004      	str	r0, [sp, #16]
10016e76:	4648      	mov	r0, r9
10016e78:	0424      	lsls	r4, r4, #16
10016e7a:	0c24      	lsrs	r4, r4, #16
10016e7c:	0412      	lsls	r2, r2, #16
10016e7e:	1912      	adds	r2, r2, r4
10016e80:	9205      	str	r2, [sp, #20]
10016e82:	0c2a      	lsrs	r2, r5, #16
10016e84:	042d      	lsls	r5, r5, #16
10016e86:	0c2d      	lsrs	r5, r5, #16
10016e88:	4368      	muls	r0, r5
10016e8a:	002c      	movs	r4, r5
10016e8c:	4682      	mov	sl, r0
10016e8e:	4648      	mov	r0, r9
10016e90:	437c      	muls	r4, r7
10016e92:	4350      	muls	r0, r2
10016e94:	4681      	mov	r9, r0
10016e96:	0c20      	lsrs	r0, r4, #16
10016e98:	4680      	mov	r8, r0
10016e9a:	4357      	muls	r7, r2
10016e9c:	4457      	add	r7, sl
10016e9e:	4447      	add	r7, r8
10016ea0:	45ba      	cmp	sl, r7
10016ea2:	d903      	bls.n	10016eac <__aeabi_dmul+0x274>
10016ea4:	2080      	movs	r0, #128	; 0x80
10016ea6:	0240      	lsls	r0, r0, #9
10016ea8:	4680      	mov	r8, r0
10016eaa:	44c1      	add	r9, r8
10016eac:	0c38      	lsrs	r0, r7, #16
10016eae:	043f      	lsls	r7, r7, #16
10016eb0:	46b8      	mov	r8, r7
10016eb2:	4448      	add	r0, r9
10016eb4:	0424      	lsls	r4, r4, #16
10016eb6:	0c24      	lsrs	r4, r4, #16
10016eb8:	9001      	str	r0, [sp, #4]
10016eba:	9804      	ldr	r0, [sp, #16]
10016ebc:	44a0      	add	r8, r4
10016ebe:	4440      	add	r0, r8
10016ec0:	9004      	str	r0, [sp, #16]
10016ec2:	4658      	mov	r0, fp
10016ec4:	0c00      	lsrs	r0, r0, #16
10016ec6:	4681      	mov	r9, r0
10016ec8:	4658      	mov	r0, fp
10016eca:	0404      	lsls	r4, r0, #16
10016ecc:	0c20      	lsrs	r0, r4, #16
10016ece:	4682      	mov	sl, r0
10016ed0:	0007      	movs	r7, r0
10016ed2:	4648      	mov	r0, r9
10016ed4:	435f      	muls	r7, r3
10016ed6:	464c      	mov	r4, r9
10016ed8:	4343      	muls	r3, r0
10016eda:	4660      	mov	r0, ip
10016edc:	4360      	muls	r0, r4
10016ede:	4664      	mov	r4, ip
10016ee0:	4683      	mov	fp, r0
10016ee2:	4650      	mov	r0, sl
10016ee4:	4344      	muls	r4, r0
10016ee6:	0c38      	lsrs	r0, r7, #16
10016ee8:	4684      	mov	ip, r0
10016eea:	18e4      	adds	r4, r4, r3
10016eec:	4464      	add	r4, ip
10016eee:	42a3      	cmp	r3, r4
10016ef0:	d903      	bls.n	10016efa <__aeabi_dmul+0x2c2>
10016ef2:	2380      	movs	r3, #128	; 0x80
10016ef4:	025b      	lsls	r3, r3, #9
10016ef6:	469c      	mov	ip, r3
10016ef8:	44e3      	add	fp, ip
10016efa:	4648      	mov	r0, r9
10016efc:	043f      	lsls	r7, r7, #16
10016efe:	0c23      	lsrs	r3, r4, #16
10016f00:	0c3f      	lsrs	r7, r7, #16
10016f02:	0424      	lsls	r4, r4, #16
10016f04:	19e4      	adds	r4, r4, r7
10016f06:	4657      	mov	r7, sl
10016f08:	4368      	muls	r0, r5
10016f0a:	436f      	muls	r7, r5
10016f0c:	4684      	mov	ip, r0
10016f0e:	464d      	mov	r5, r9
10016f10:	4650      	mov	r0, sl
10016f12:	4355      	muls	r5, r2
10016f14:	4342      	muls	r2, r0
10016f16:	0c38      	lsrs	r0, r7, #16
10016f18:	4681      	mov	r9, r0
10016f1a:	4462      	add	r2, ip
10016f1c:	444a      	add	r2, r9
10016f1e:	445b      	add	r3, fp
10016f20:	4594      	cmp	ip, r2
10016f22:	d903      	bls.n	10016f2c <__aeabi_dmul+0x2f4>
10016f24:	2080      	movs	r0, #128	; 0x80
10016f26:	0240      	lsls	r0, r0, #9
10016f28:	4684      	mov	ip, r0
10016f2a:	4465      	add	r5, ip
10016f2c:	9803      	ldr	r0, [sp, #12]
10016f2e:	043f      	lsls	r7, r7, #16
10016f30:	4683      	mov	fp, r0
10016f32:	9804      	ldr	r0, [sp, #16]
10016f34:	0c3f      	lsrs	r7, r7, #16
10016f36:	4684      	mov	ip, r0
10016f38:	44e3      	add	fp, ip
10016f3a:	45c3      	cmp	fp, r8
10016f3c:	4180      	sbcs	r0, r0
10016f3e:	4240      	negs	r0, r0
10016f40:	4682      	mov	sl, r0
10016f42:	0410      	lsls	r0, r2, #16
10016f44:	4684      	mov	ip, r0
10016f46:	9801      	ldr	r0, [sp, #4]
10016f48:	4467      	add	r7, ip
10016f4a:	4684      	mov	ip, r0
10016f4c:	4467      	add	r7, ip
10016f4e:	44a3      	add	fp, r4
10016f50:	46bc      	mov	ip, r7
10016f52:	45a3      	cmp	fp, r4
10016f54:	41a4      	sbcs	r4, r4
10016f56:	4699      	mov	r9, r3
10016f58:	44d4      	add	ip, sl
10016f5a:	4264      	negs	r4, r4
10016f5c:	4287      	cmp	r7, r0
10016f5e:	41bf      	sbcs	r7, r7
10016f60:	45d4      	cmp	ip, sl
10016f62:	4180      	sbcs	r0, r0
10016f64:	44e1      	add	r9, ip
10016f66:	46a0      	mov	r8, r4
10016f68:	4599      	cmp	r9, r3
10016f6a:	419b      	sbcs	r3, r3
10016f6c:	427f      	negs	r7, r7
10016f6e:	4240      	negs	r0, r0
10016f70:	44c8      	add	r8, r9
10016f72:	4307      	orrs	r7, r0
10016f74:	0c12      	lsrs	r2, r2, #16
10016f76:	18ba      	adds	r2, r7, r2
10016f78:	45a0      	cmp	r8, r4
10016f7a:	41a4      	sbcs	r4, r4
10016f7c:	425f      	negs	r7, r3
10016f7e:	003b      	movs	r3, r7
10016f80:	4264      	negs	r4, r4
10016f82:	4323      	orrs	r3, r4
10016f84:	18d7      	adds	r7, r2, r3
10016f86:	4643      	mov	r3, r8
10016f88:	197d      	adds	r5, r7, r5
10016f8a:	0ddb      	lsrs	r3, r3, #23
10016f8c:	026d      	lsls	r5, r5, #9
10016f8e:	431d      	orrs	r5, r3
10016f90:	465b      	mov	r3, fp
10016f92:	025a      	lsls	r2, r3, #9
10016f94:	9b05      	ldr	r3, [sp, #20]
10016f96:	431a      	orrs	r2, r3
10016f98:	1e53      	subs	r3, r2, #1
10016f9a:	419a      	sbcs	r2, r3
10016f9c:	465b      	mov	r3, fp
10016f9e:	0ddb      	lsrs	r3, r3, #23
10016fa0:	431a      	orrs	r2, r3
10016fa2:	4643      	mov	r3, r8
10016fa4:	025b      	lsls	r3, r3, #9
10016fa6:	4313      	orrs	r3, r2
10016fa8:	01ea      	lsls	r2, r5, #7
10016faa:	d507      	bpl.n	10016fbc <__aeabi_dmul+0x384>
10016fac:	2201      	movs	r2, #1
10016fae:	085c      	lsrs	r4, r3, #1
10016fb0:	4013      	ands	r3, r2
10016fb2:	4323      	orrs	r3, r4
10016fb4:	07ea      	lsls	r2, r5, #31
10016fb6:	9e02      	ldr	r6, [sp, #8]
10016fb8:	4313      	orrs	r3, r2
10016fba:	086d      	lsrs	r5, r5, #1
10016fbc:	4a57      	ldr	r2, [pc, #348]	; (1001711c <__aeabi_dmul+0x4e4>)
10016fbe:	18b2      	adds	r2, r6, r2
10016fc0:	2a00      	cmp	r2, #0
10016fc2:	dd4b      	ble.n	1001705c <__aeabi_dmul+0x424>
10016fc4:	0758      	lsls	r0, r3, #29
10016fc6:	d009      	beq.n	10016fdc <__aeabi_dmul+0x3a4>
10016fc8:	200f      	movs	r0, #15
10016fca:	4018      	ands	r0, r3
10016fcc:	2804      	cmp	r0, #4
10016fce:	d005      	beq.n	10016fdc <__aeabi_dmul+0x3a4>
10016fd0:	1d18      	adds	r0, r3, #4
10016fd2:	4298      	cmp	r0, r3
10016fd4:	419b      	sbcs	r3, r3
10016fd6:	425b      	negs	r3, r3
10016fd8:	18ed      	adds	r5, r5, r3
10016fda:	0003      	movs	r3, r0
10016fdc:	01e8      	lsls	r0, r5, #7
10016fde:	d504      	bpl.n	10016fea <__aeabi_dmul+0x3b2>
10016fe0:	4a4f      	ldr	r2, [pc, #316]	; (10017120 <__aeabi_dmul+0x4e8>)
10016fe2:	4015      	ands	r5, r2
10016fe4:	2280      	movs	r2, #128	; 0x80
10016fe6:	00d2      	lsls	r2, r2, #3
10016fe8:	18b2      	adds	r2, r6, r2
10016fea:	484e      	ldr	r0, [pc, #312]	; (10017124 <__aeabi_dmul+0x4ec>)
10016fec:	4282      	cmp	r2, r0
10016fee:	dd00      	ble.n	10016ff2 <__aeabi_dmul+0x3ba>
10016ff0:	e6e7      	b.n	10016dc2 <__aeabi_dmul+0x18a>
10016ff2:	2401      	movs	r4, #1
10016ff4:	08db      	lsrs	r3, r3, #3
10016ff6:	0768      	lsls	r0, r5, #29
10016ff8:	4318      	orrs	r0, r3
10016ffa:	026d      	lsls	r5, r5, #9
10016ffc:	0553      	lsls	r3, r2, #21
10016ffe:	4680      	mov	r8, r0
10017000:	0b2d      	lsrs	r5, r5, #12
10017002:	0d5b      	lsrs	r3, r3, #21
10017004:	400c      	ands	r4, r1
10017006:	e67d      	b.n	10016d04 <__aeabi_dmul+0xcc>
10017008:	2280      	movs	r2, #128	; 0x80
1001700a:	4659      	mov	r1, fp
1001700c:	0312      	lsls	r2, r2, #12
1001700e:	4211      	tst	r1, r2
10017010:	d008      	beq.n	10017024 <__aeabi_dmul+0x3ec>
10017012:	4215      	tst	r5, r2
10017014:	d106      	bne.n	10017024 <__aeabi_dmul+0x3ec>
10017016:	4315      	orrs	r5, r2
10017018:	032d      	lsls	r5, r5, #12
1001701a:	4698      	mov	r8, r3
1001701c:	0b2d      	lsrs	r5, r5, #12
1001701e:	464c      	mov	r4, r9
10017020:	4b41      	ldr	r3, [pc, #260]	; (10017128 <__aeabi_dmul+0x4f0>)
10017022:	e66f      	b.n	10016d04 <__aeabi_dmul+0xcc>
10017024:	465d      	mov	r5, fp
10017026:	4315      	orrs	r5, r2
10017028:	032d      	lsls	r5, r5, #12
1001702a:	0b2d      	lsrs	r5, r5, #12
1001702c:	4b3e      	ldr	r3, [pc, #248]	; (10017128 <__aeabi_dmul+0x4f0>)
1001702e:	e669      	b.n	10016d04 <__aeabi_dmul+0xcc>
10017030:	0003      	movs	r3, r0
10017032:	4655      	mov	r5, sl
10017034:	3b28      	subs	r3, #40	; 0x28
10017036:	409d      	lsls	r5, r3
10017038:	2300      	movs	r3, #0
1001703a:	e6bc      	b.n	10016db6 <__aeabi_dmul+0x17e>
1001703c:	4650      	mov	r0, sl
1001703e:	f000 fd59 	bl	10017af4 <__clzsi2>
10017042:	3020      	adds	r0, #32
10017044:	e6a8      	b.n	10016d98 <__aeabi_dmul+0x160>
10017046:	0003      	movs	r3, r0
10017048:	3b28      	subs	r3, #40	; 0x28
1001704a:	409f      	lsls	r7, r3
1001704c:	2300      	movs	r3, #0
1001704e:	46bb      	mov	fp, r7
10017050:	4698      	mov	r8, r3
10017052:	e689      	b.n	10016d68 <__aeabi_dmul+0x130>
10017054:	f000 fd4e 	bl	10017af4 <__clzsi2>
10017058:	3020      	adds	r0, #32
1001705a:	e673      	b.n	10016d44 <__aeabi_dmul+0x10c>
1001705c:	2401      	movs	r4, #1
1001705e:	1aa6      	subs	r6, r4, r2
10017060:	2e38      	cmp	r6, #56	; 0x38
10017062:	dd07      	ble.n	10017074 <__aeabi_dmul+0x43c>
10017064:	2200      	movs	r2, #0
10017066:	400c      	ands	r4, r1
10017068:	2300      	movs	r3, #0
1001706a:	2500      	movs	r5, #0
1001706c:	4690      	mov	r8, r2
1001706e:	e649      	b.n	10016d04 <__aeabi_dmul+0xcc>
10017070:	9e02      	ldr	r6, [sp, #8]
10017072:	e7a3      	b.n	10016fbc <__aeabi_dmul+0x384>
10017074:	2e1f      	cmp	r6, #31
10017076:	dc20      	bgt.n	100170ba <__aeabi_dmul+0x482>
10017078:	2220      	movs	r2, #32
1001707a:	002c      	movs	r4, r5
1001707c:	0018      	movs	r0, r3
1001707e:	1b92      	subs	r2, r2, r6
10017080:	40f0      	lsrs	r0, r6
10017082:	4094      	lsls	r4, r2
10017084:	4093      	lsls	r3, r2
10017086:	4304      	orrs	r4, r0
10017088:	1e58      	subs	r0, r3, #1
1001708a:	4183      	sbcs	r3, r0
1001708c:	431c      	orrs	r4, r3
1001708e:	40f5      	lsrs	r5, r6
10017090:	0763      	lsls	r3, r4, #29
10017092:	d009      	beq.n	100170a8 <__aeabi_dmul+0x470>
10017094:	230f      	movs	r3, #15
10017096:	4023      	ands	r3, r4
10017098:	2b04      	cmp	r3, #4
1001709a:	d005      	beq.n	100170a8 <__aeabi_dmul+0x470>
1001709c:	0023      	movs	r3, r4
1001709e:	1d1c      	adds	r4, r3, #4
100170a0:	429c      	cmp	r4, r3
100170a2:	4192      	sbcs	r2, r2
100170a4:	4252      	negs	r2, r2
100170a6:	18ad      	adds	r5, r5, r2
100170a8:	022b      	lsls	r3, r5, #8
100170aa:	d51f      	bpl.n	100170ec <__aeabi_dmul+0x4b4>
100170ac:	2401      	movs	r4, #1
100170ae:	2200      	movs	r2, #0
100170b0:	400c      	ands	r4, r1
100170b2:	2301      	movs	r3, #1
100170b4:	2500      	movs	r5, #0
100170b6:	4690      	mov	r8, r2
100170b8:	e624      	b.n	10016d04 <__aeabi_dmul+0xcc>
100170ba:	201f      	movs	r0, #31
100170bc:	002c      	movs	r4, r5
100170be:	4240      	negs	r0, r0
100170c0:	1a82      	subs	r2, r0, r2
100170c2:	40d4      	lsrs	r4, r2
100170c4:	2e20      	cmp	r6, #32
100170c6:	d01c      	beq.n	10017102 <__aeabi_dmul+0x4ca>
100170c8:	2240      	movs	r2, #64	; 0x40
100170ca:	1b96      	subs	r6, r2, r6
100170cc:	40b5      	lsls	r5, r6
100170ce:	432b      	orrs	r3, r5
100170d0:	1e58      	subs	r0, r3, #1
100170d2:	4183      	sbcs	r3, r0
100170d4:	2007      	movs	r0, #7
100170d6:	4323      	orrs	r3, r4
100170d8:	4018      	ands	r0, r3
100170da:	2500      	movs	r5, #0
100170dc:	2800      	cmp	r0, #0
100170de:	d009      	beq.n	100170f4 <__aeabi_dmul+0x4bc>
100170e0:	220f      	movs	r2, #15
100170e2:	2500      	movs	r5, #0
100170e4:	401a      	ands	r2, r3
100170e6:	001c      	movs	r4, r3
100170e8:	2a04      	cmp	r2, #4
100170ea:	d1d8      	bne.n	1001709e <__aeabi_dmul+0x466>
100170ec:	0023      	movs	r3, r4
100170ee:	0768      	lsls	r0, r5, #29
100170f0:	026d      	lsls	r5, r5, #9
100170f2:	0b2d      	lsrs	r5, r5, #12
100170f4:	2401      	movs	r4, #1
100170f6:	08db      	lsrs	r3, r3, #3
100170f8:	4303      	orrs	r3, r0
100170fa:	4698      	mov	r8, r3
100170fc:	400c      	ands	r4, r1
100170fe:	2300      	movs	r3, #0
10017100:	e600      	b.n	10016d04 <__aeabi_dmul+0xcc>
10017102:	2500      	movs	r5, #0
10017104:	e7e3      	b.n	100170ce <__aeabi_dmul+0x496>
10017106:	2280      	movs	r2, #128	; 0x80
10017108:	2401      	movs	r4, #1
1001710a:	0312      	lsls	r2, r2, #12
1001710c:	4315      	orrs	r5, r2
1001710e:	032d      	lsls	r5, r5, #12
10017110:	4698      	mov	r8, r3
10017112:	0b2d      	lsrs	r5, r5, #12
10017114:	400c      	ands	r4, r1
10017116:	4b04      	ldr	r3, [pc, #16]	; (10017128 <__aeabi_dmul+0x4f0>)
10017118:	e5f4      	b.n	10016d04 <__aeabi_dmul+0xcc>
1001711a:	46c0      	nop			; (mov r8, r8)
1001711c:	000003ff 	.word	0x000003ff
10017120:	feffffff 	.word	0xfeffffff
10017124:	000007fe 	.word	0x000007fe
10017128:	000007ff 	.word	0x000007ff

1001712c <__aeabi_dsub>:
1001712c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001712e:	4657      	mov	r7, sl
10017130:	464e      	mov	r6, r9
10017132:	4645      	mov	r5, r8
10017134:	b4e0      	push	{r5, r6, r7}
10017136:	000e      	movs	r6, r1
10017138:	0011      	movs	r1, r2
1001713a:	0ff2      	lsrs	r2, r6, #31
1001713c:	4692      	mov	sl, r2
1001713e:	00c5      	lsls	r5, r0, #3
10017140:	0f42      	lsrs	r2, r0, #29
10017142:	0318      	lsls	r0, r3, #12
10017144:	0337      	lsls	r7, r6, #12
10017146:	0074      	lsls	r4, r6, #1
10017148:	0a40      	lsrs	r0, r0, #9
1001714a:	0f4e      	lsrs	r6, r1, #29
1001714c:	0a7f      	lsrs	r7, r7, #9
1001714e:	4330      	orrs	r0, r6
10017150:	4ecf      	ldr	r6, [pc, #828]	; (10017490 <__aeabi_dsub+0x364>)
10017152:	4317      	orrs	r7, r2
10017154:	005a      	lsls	r2, r3, #1
10017156:	0d64      	lsrs	r4, r4, #21
10017158:	0d52      	lsrs	r2, r2, #21
1001715a:	0fdb      	lsrs	r3, r3, #31
1001715c:	00c9      	lsls	r1, r1, #3
1001715e:	42b2      	cmp	r2, r6
10017160:	d100      	bne.n	10017164 <__aeabi_dsub+0x38>
10017162:	e0e5      	b.n	10017330 <__aeabi_dsub+0x204>
10017164:	2601      	movs	r6, #1
10017166:	4073      	eors	r3, r6
10017168:	1aa6      	subs	r6, r4, r2
1001716a:	46b4      	mov	ip, r6
1001716c:	4553      	cmp	r3, sl
1001716e:	d100      	bne.n	10017172 <__aeabi_dsub+0x46>
10017170:	e0af      	b.n	100172d2 <__aeabi_dsub+0x1a6>
10017172:	2e00      	cmp	r6, #0
10017174:	dc00      	bgt.n	10017178 <__aeabi_dsub+0x4c>
10017176:	e10d      	b.n	10017394 <__aeabi_dsub+0x268>
10017178:	2a00      	cmp	r2, #0
1001717a:	d13a      	bne.n	100171f2 <__aeabi_dsub+0xc6>
1001717c:	0003      	movs	r3, r0
1001717e:	430b      	orrs	r3, r1
10017180:	d000      	beq.n	10017184 <__aeabi_dsub+0x58>
10017182:	e0e4      	b.n	1001734e <__aeabi_dsub+0x222>
10017184:	076b      	lsls	r3, r5, #29
10017186:	d009      	beq.n	1001719c <__aeabi_dsub+0x70>
10017188:	230f      	movs	r3, #15
1001718a:	402b      	ands	r3, r5
1001718c:	2b04      	cmp	r3, #4
1001718e:	d005      	beq.n	1001719c <__aeabi_dsub+0x70>
10017190:	1d2b      	adds	r3, r5, #4
10017192:	42ab      	cmp	r3, r5
10017194:	41ad      	sbcs	r5, r5
10017196:	426d      	negs	r5, r5
10017198:	197f      	adds	r7, r7, r5
1001719a:	001d      	movs	r5, r3
1001719c:	023b      	lsls	r3, r7, #8
1001719e:	d400      	bmi.n	100171a2 <__aeabi_dsub+0x76>
100171a0:	e088      	b.n	100172b4 <__aeabi_dsub+0x188>
100171a2:	4bbb      	ldr	r3, [pc, #748]	; (10017490 <__aeabi_dsub+0x364>)
100171a4:	3401      	adds	r4, #1
100171a6:	429c      	cmp	r4, r3
100171a8:	d100      	bne.n	100171ac <__aeabi_dsub+0x80>
100171aa:	e110      	b.n	100173ce <__aeabi_dsub+0x2a2>
100171ac:	003a      	movs	r2, r7
100171ae:	4bb9      	ldr	r3, [pc, #740]	; (10017494 <__aeabi_dsub+0x368>)
100171b0:	4651      	mov	r1, sl
100171b2:	401a      	ands	r2, r3
100171b4:	2301      	movs	r3, #1
100171b6:	0750      	lsls	r0, r2, #29
100171b8:	08ed      	lsrs	r5, r5, #3
100171ba:	0252      	lsls	r2, r2, #9
100171bc:	0564      	lsls	r4, r4, #21
100171be:	4305      	orrs	r5, r0
100171c0:	0b12      	lsrs	r2, r2, #12
100171c2:	0d64      	lsrs	r4, r4, #21
100171c4:	400b      	ands	r3, r1
100171c6:	2100      	movs	r1, #0
100171c8:	0028      	movs	r0, r5
100171ca:	0312      	lsls	r2, r2, #12
100171cc:	0d0d      	lsrs	r5, r1, #20
100171ce:	0b12      	lsrs	r2, r2, #12
100171d0:	0564      	lsls	r4, r4, #21
100171d2:	052d      	lsls	r5, r5, #20
100171d4:	4315      	orrs	r5, r2
100171d6:	0862      	lsrs	r2, r4, #1
100171d8:	4caf      	ldr	r4, [pc, #700]	; (10017498 <__aeabi_dsub+0x36c>)
100171da:	07db      	lsls	r3, r3, #31
100171dc:	402c      	ands	r4, r5
100171de:	4314      	orrs	r4, r2
100171e0:	0064      	lsls	r4, r4, #1
100171e2:	0864      	lsrs	r4, r4, #1
100171e4:	431c      	orrs	r4, r3
100171e6:	0021      	movs	r1, r4
100171e8:	bc1c      	pop	{r2, r3, r4}
100171ea:	4690      	mov	r8, r2
100171ec:	4699      	mov	r9, r3
100171ee:	46a2      	mov	sl, r4
100171f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100171f2:	4ba7      	ldr	r3, [pc, #668]	; (10017490 <__aeabi_dsub+0x364>)
100171f4:	429c      	cmp	r4, r3
100171f6:	d0c5      	beq.n	10017184 <__aeabi_dsub+0x58>
100171f8:	2380      	movs	r3, #128	; 0x80
100171fa:	041b      	lsls	r3, r3, #16
100171fc:	4318      	orrs	r0, r3
100171fe:	4663      	mov	r3, ip
10017200:	2b38      	cmp	r3, #56	; 0x38
10017202:	dd00      	ble.n	10017206 <__aeabi_dsub+0xda>
10017204:	e0fd      	b.n	10017402 <__aeabi_dsub+0x2d6>
10017206:	2b1f      	cmp	r3, #31
10017208:	dd00      	ble.n	1001720c <__aeabi_dsub+0xe0>
1001720a:	e130      	b.n	1001746e <__aeabi_dsub+0x342>
1001720c:	4662      	mov	r2, ip
1001720e:	2320      	movs	r3, #32
10017210:	1a9b      	subs	r3, r3, r2
10017212:	0002      	movs	r2, r0
10017214:	409a      	lsls	r2, r3
10017216:	4666      	mov	r6, ip
10017218:	4690      	mov	r8, r2
1001721a:	000a      	movs	r2, r1
1001721c:	4099      	lsls	r1, r3
1001721e:	40f2      	lsrs	r2, r6
10017220:	4646      	mov	r6, r8
10017222:	1e4b      	subs	r3, r1, #1
10017224:	4199      	sbcs	r1, r3
10017226:	4332      	orrs	r2, r6
10017228:	4311      	orrs	r1, r2
1001722a:	4663      	mov	r3, ip
1001722c:	0002      	movs	r2, r0
1001722e:	40da      	lsrs	r2, r3
10017230:	1a69      	subs	r1, r5, r1
10017232:	428d      	cmp	r5, r1
10017234:	419b      	sbcs	r3, r3
10017236:	000d      	movs	r5, r1
10017238:	1aba      	subs	r2, r7, r2
1001723a:	425b      	negs	r3, r3
1001723c:	1ad7      	subs	r7, r2, r3
1001723e:	023b      	lsls	r3, r7, #8
10017240:	d535      	bpl.n	100172ae <__aeabi_dsub+0x182>
10017242:	027a      	lsls	r2, r7, #9
10017244:	0a53      	lsrs	r3, r2, #9
10017246:	4698      	mov	r8, r3
10017248:	4643      	mov	r3, r8
1001724a:	2b00      	cmp	r3, #0
1001724c:	d100      	bne.n	10017250 <__aeabi_dsub+0x124>
1001724e:	e0c4      	b.n	100173da <__aeabi_dsub+0x2ae>
10017250:	4640      	mov	r0, r8
10017252:	f000 fc4f 	bl	10017af4 <__clzsi2>
10017256:	0003      	movs	r3, r0
10017258:	3b08      	subs	r3, #8
1001725a:	2b1f      	cmp	r3, #31
1001725c:	dd00      	ble.n	10017260 <__aeabi_dsub+0x134>
1001725e:	e0c5      	b.n	100173ec <__aeabi_dsub+0x2c0>
10017260:	2220      	movs	r2, #32
10017262:	0029      	movs	r1, r5
10017264:	1ad2      	subs	r2, r2, r3
10017266:	4647      	mov	r7, r8
10017268:	40d1      	lsrs	r1, r2
1001726a:	409f      	lsls	r7, r3
1001726c:	000a      	movs	r2, r1
1001726e:	409d      	lsls	r5, r3
10017270:	433a      	orrs	r2, r7
10017272:	429c      	cmp	r4, r3
10017274:	dd00      	ble.n	10017278 <__aeabi_dsub+0x14c>
10017276:	e0c0      	b.n	100173fa <__aeabi_dsub+0x2ce>
10017278:	1b1c      	subs	r4, r3, r4
1001727a:	1c63      	adds	r3, r4, #1
1001727c:	2b1f      	cmp	r3, #31
1001727e:	dd00      	ble.n	10017282 <__aeabi_dsub+0x156>
10017280:	e0e4      	b.n	1001744c <__aeabi_dsub+0x320>
10017282:	2120      	movs	r1, #32
10017284:	0014      	movs	r4, r2
10017286:	0028      	movs	r0, r5
10017288:	1ac9      	subs	r1, r1, r3
1001728a:	40d8      	lsrs	r0, r3
1001728c:	408c      	lsls	r4, r1
1001728e:	408d      	lsls	r5, r1
10017290:	4304      	orrs	r4, r0
10017292:	40da      	lsrs	r2, r3
10017294:	1e68      	subs	r0, r5, #1
10017296:	4185      	sbcs	r5, r0
10017298:	0017      	movs	r7, r2
1001729a:	4325      	orrs	r5, r4
1001729c:	2400      	movs	r4, #0
1001729e:	e771      	b.n	10017184 <__aeabi_dsub+0x58>
100172a0:	4642      	mov	r2, r8
100172a2:	4663      	mov	r3, ip
100172a4:	431a      	orrs	r2, r3
100172a6:	d100      	bne.n	100172aa <__aeabi_dsub+0x17e>
100172a8:	e24c      	b.n	10017744 <__aeabi_dsub+0x618>
100172aa:	4667      	mov	r7, ip
100172ac:	4645      	mov	r5, r8
100172ae:	076b      	lsls	r3, r5, #29
100172b0:	d000      	beq.n	100172b4 <__aeabi_dsub+0x188>
100172b2:	e769      	b.n	10017188 <__aeabi_dsub+0x5c>
100172b4:	2301      	movs	r3, #1
100172b6:	4651      	mov	r1, sl
100172b8:	0778      	lsls	r0, r7, #29
100172ba:	08ed      	lsrs	r5, r5, #3
100172bc:	08fa      	lsrs	r2, r7, #3
100172be:	400b      	ands	r3, r1
100172c0:	4305      	orrs	r5, r0
100172c2:	4973      	ldr	r1, [pc, #460]	; (10017490 <__aeabi_dsub+0x364>)
100172c4:	428c      	cmp	r4, r1
100172c6:	d038      	beq.n	1001733a <__aeabi_dsub+0x20e>
100172c8:	0312      	lsls	r2, r2, #12
100172ca:	0564      	lsls	r4, r4, #21
100172cc:	0b12      	lsrs	r2, r2, #12
100172ce:	0d64      	lsrs	r4, r4, #21
100172d0:	e779      	b.n	100171c6 <__aeabi_dsub+0x9a>
100172d2:	2e00      	cmp	r6, #0
100172d4:	dc00      	bgt.n	100172d8 <__aeabi_dsub+0x1ac>
100172d6:	e09a      	b.n	1001740e <__aeabi_dsub+0x2e2>
100172d8:	2a00      	cmp	r2, #0
100172da:	d047      	beq.n	1001736c <__aeabi_dsub+0x240>
100172dc:	4a6c      	ldr	r2, [pc, #432]	; (10017490 <__aeabi_dsub+0x364>)
100172de:	4294      	cmp	r4, r2
100172e0:	d100      	bne.n	100172e4 <__aeabi_dsub+0x1b8>
100172e2:	e74f      	b.n	10017184 <__aeabi_dsub+0x58>
100172e4:	2280      	movs	r2, #128	; 0x80
100172e6:	0412      	lsls	r2, r2, #16
100172e8:	4310      	orrs	r0, r2
100172ea:	4662      	mov	r2, ip
100172ec:	2a38      	cmp	r2, #56	; 0x38
100172ee:	dc00      	bgt.n	100172f2 <__aeabi_dsub+0x1c6>
100172f0:	e108      	b.n	10017504 <__aeabi_dsub+0x3d8>
100172f2:	4301      	orrs	r1, r0
100172f4:	1e48      	subs	r0, r1, #1
100172f6:	4181      	sbcs	r1, r0
100172f8:	2200      	movs	r2, #0
100172fa:	b2c9      	uxtb	r1, r1
100172fc:	1949      	adds	r1, r1, r5
100172fe:	19d2      	adds	r2, r2, r7
10017300:	42a9      	cmp	r1, r5
10017302:	41bf      	sbcs	r7, r7
10017304:	000d      	movs	r5, r1
10017306:	427f      	negs	r7, r7
10017308:	18bf      	adds	r7, r7, r2
1001730a:	023a      	lsls	r2, r7, #8
1001730c:	d400      	bmi.n	10017310 <__aeabi_dsub+0x1e4>
1001730e:	e142      	b.n	10017596 <__aeabi_dsub+0x46a>
10017310:	4a5f      	ldr	r2, [pc, #380]	; (10017490 <__aeabi_dsub+0x364>)
10017312:	3401      	adds	r4, #1
10017314:	4294      	cmp	r4, r2
10017316:	d100      	bne.n	1001731a <__aeabi_dsub+0x1ee>
10017318:	e14e      	b.n	100175b8 <__aeabi_dsub+0x48c>
1001731a:	2001      	movs	r0, #1
1001731c:	4a5d      	ldr	r2, [pc, #372]	; (10017494 <__aeabi_dsub+0x368>)
1001731e:	0869      	lsrs	r1, r5, #1
10017320:	403a      	ands	r2, r7
10017322:	4028      	ands	r0, r5
10017324:	4308      	orrs	r0, r1
10017326:	07d5      	lsls	r5, r2, #31
10017328:	4305      	orrs	r5, r0
1001732a:	0857      	lsrs	r7, r2, #1
1001732c:	469a      	mov	sl, r3
1001732e:	e729      	b.n	10017184 <__aeabi_dsub+0x58>
10017330:	0006      	movs	r6, r0
10017332:	430e      	orrs	r6, r1
10017334:	d000      	beq.n	10017338 <__aeabi_dsub+0x20c>
10017336:	e717      	b.n	10017168 <__aeabi_dsub+0x3c>
10017338:	e714      	b.n	10017164 <__aeabi_dsub+0x38>
1001733a:	0029      	movs	r1, r5
1001733c:	4311      	orrs	r1, r2
1001733e:	d100      	bne.n	10017342 <__aeabi_dsub+0x216>
10017340:	e1f9      	b.n	10017736 <__aeabi_dsub+0x60a>
10017342:	2180      	movs	r1, #128	; 0x80
10017344:	0309      	lsls	r1, r1, #12
10017346:	430a      	orrs	r2, r1
10017348:	0312      	lsls	r2, r2, #12
1001734a:	0b12      	lsrs	r2, r2, #12
1001734c:	e73b      	b.n	100171c6 <__aeabi_dsub+0x9a>
1001734e:	2301      	movs	r3, #1
10017350:	425b      	negs	r3, r3
10017352:	4698      	mov	r8, r3
10017354:	44c4      	add	ip, r8
10017356:	4663      	mov	r3, ip
10017358:	2b00      	cmp	r3, #0
1001735a:	d172      	bne.n	10017442 <__aeabi_dsub+0x316>
1001735c:	1a69      	subs	r1, r5, r1
1001735e:	428d      	cmp	r5, r1
10017360:	419b      	sbcs	r3, r3
10017362:	1a3f      	subs	r7, r7, r0
10017364:	425b      	negs	r3, r3
10017366:	1aff      	subs	r7, r7, r3
10017368:	000d      	movs	r5, r1
1001736a:	e768      	b.n	1001723e <__aeabi_dsub+0x112>
1001736c:	0002      	movs	r2, r0
1001736e:	430a      	orrs	r2, r1
10017370:	d100      	bne.n	10017374 <__aeabi_dsub+0x248>
10017372:	e707      	b.n	10017184 <__aeabi_dsub+0x58>
10017374:	2201      	movs	r2, #1
10017376:	4252      	negs	r2, r2
10017378:	4690      	mov	r8, r2
1001737a:	44c4      	add	ip, r8
1001737c:	4662      	mov	r2, ip
1001737e:	2a00      	cmp	r2, #0
10017380:	d000      	beq.n	10017384 <__aeabi_dsub+0x258>
10017382:	e0e6      	b.n	10017552 <__aeabi_dsub+0x426>
10017384:	1869      	adds	r1, r5, r1
10017386:	42a9      	cmp	r1, r5
10017388:	41b6      	sbcs	r6, r6
1001738a:	183f      	adds	r7, r7, r0
1001738c:	4276      	negs	r6, r6
1001738e:	19f7      	adds	r7, r6, r7
10017390:	000d      	movs	r5, r1
10017392:	e7ba      	b.n	1001730a <__aeabi_dsub+0x1de>
10017394:	2e00      	cmp	r6, #0
10017396:	d000      	beq.n	1001739a <__aeabi_dsub+0x26e>
10017398:	e080      	b.n	1001749c <__aeabi_dsub+0x370>
1001739a:	1c62      	adds	r2, r4, #1
1001739c:	0552      	lsls	r2, r2, #21
1001739e:	0d52      	lsrs	r2, r2, #21
100173a0:	2a01      	cmp	r2, #1
100173a2:	dc00      	bgt.n	100173a6 <__aeabi_dsub+0x27a>
100173a4:	e0f9      	b.n	1001759a <__aeabi_dsub+0x46e>
100173a6:	1a6a      	subs	r2, r5, r1
100173a8:	4691      	mov	r9, r2
100173aa:	454d      	cmp	r5, r9
100173ac:	41b6      	sbcs	r6, r6
100173ae:	1a3a      	subs	r2, r7, r0
100173b0:	4276      	negs	r6, r6
100173b2:	1b92      	subs	r2, r2, r6
100173b4:	4690      	mov	r8, r2
100173b6:	0212      	lsls	r2, r2, #8
100173b8:	d400      	bmi.n	100173bc <__aeabi_dsub+0x290>
100173ba:	e099      	b.n	100174f0 <__aeabi_dsub+0x3c4>
100173bc:	1b4d      	subs	r5, r1, r5
100173be:	42a9      	cmp	r1, r5
100173c0:	4189      	sbcs	r1, r1
100173c2:	1bc7      	subs	r7, r0, r7
100173c4:	4249      	negs	r1, r1
100173c6:	1a7a      	subs	r2, r7, r1
100173c8:	4690      	mov	r8, r2
100173ca:	469a      	mov	sl, r3
100173cc:	e73c      	b.n	10017248 <__aeabi_dsub+0x11c>
100173ce:	4652      	mov	r2, sl
100173d0:	2301      	movs	r3, #1
100173d2:	2500      	movs	r5, #0
100173d4:	4013      	ands	r3, r2
100173d6:	2200      	movs	r2, #0
100173d8:	e6f5      	b.n	100171c6 <__aeabi_dsub+0x9a>
100173da:	0028      	movs	r0, r5
100173dc:	f000 fb8a 	bl	10017af4 <__clzsi2>
100173e0:	3020      	adds	r0, #32
100173e2:	0003      	movs	r3, r0
100173e4:	3b08      	subs	r3, #8
100173e6:	2b1f      	cmp	r3, #31
100173e8:	dc00      	bgt.n	100173ec <__aeabi_dsub+0x2c0>
100173ea:	e739      	b.n	10017260 <__aeabi_dsub+0x134>
100173ec:	002a      	movs	r2, r5
100173ee:	3828      	subs	r0, #40	; 0x28
100173f0:	4082      	lsls	r2, r0
100173f2:	2500      	movs	r5, #0
100173f4:	429c      	cmp	r4, r3
100173f6:	dc00      	bgt.n	100173fa <__aeabi_dsub+0x2ce>
100173f8:	e73e      	b.n	10017278 <__aeabi_dsub+0x14c>
100173fa:	4f26      	ldr	r7, [pc, #152]	; (10017494 <__aeabi_dsub+0x368>)
100173fc:	1ae4      	subs	r4, r4, r3
100173fe:	4017      	ands	r7, r2
10017400:	e6c0      	b.n	10017184 <__aeabi_dsub+0x58>
10017402:	4301      	orrs	r1, r0
10017404:	1e48      	subs	r0, r1, #1
10017406:	4181      	sbcs	r1, r0
10017408:	2200      	movs	r2, #0
1001740a:	b2c9      	uxtb	r1, r1
1001740c:	e710      	b.n	10017230 <__aeabi_dsub+0x104>
1001740e:	2e00      	cmp	r6, #0
10017410:	d000      	beq.n	10017414 <__aeabi_dsub+0x2e8>
10017412:	e0f1      	b.n	100175f8 <__aeabi_dsub+0x4cc>
10017414:	1c62      	adds	r2, r4, #1
10017416:	4694      	mov	ip, r2
10017418:	0552      	lsls	r2, r2, #21
1001741a:	0d52      	lsrs	r2, r2, #21
1001741c:	2a01      	cmp	r2, #1
1001741e:	dc00      	bgt.n	10017422 <__aeabi_dsub+0x2f6>
10017420:	e0a0      	b.n	10017564 <__aeabi_dsub+0x438>
10017422:	4a1b      	ldr	r2, [pc, #108]	; (10017490 <__aeabi_dsub+0x364>)
10017424:	4594      	cmp	ip, r2
10017426:	d100      	bne.n	1001742a <__aeabi_dsub+0x2fe>
10017428:	e0c5      	b.n	100175b6 <__aeabi_dsub+0x48a>
1001742a:	1869      	adds	r1, r5, r1
1001742c:	42a9      	cmp	r1, r5
1001742e:	4192      	sbcs	r2, r2
10017430:	183f      	adds	r7, r7, r0
10017432:	4252      	negs	r2, r2
10017434:	19d2      	adds	r2, r2, r7
10017436:	0849      	lsrs	r1, r1, #1
10017438:	07d5      	lsls	r5, r2, #31
1001743a:	430d      	orrs	r5, r1
1001743c:	0857      	lsrs	r7, r2, #1
1001743e:	4664      	mov	r4, ip
10017440:	e6a0      	b.n	10017184 <__aeabi_dsub+0x58>
10017442:	4b13      	ldr	r3, [pc, #76]	; (10017490 <__aeabi_dsub+0x364>)
10017444:	429c      	cmp	r4, r3
10017446:	d000      	beq.n	1001744a <__aeabi_dsub+0x31e>
10017448:	e6d9      	b.n	100171fe <__aeabi_dsub+0xd2>
1001744a:	e69b      	b.n	10017184 <__aeabi_dsub+0x58>
1001744c:	0011      	movs	r1, r2
1001744e:	3c1f      	subs	r4, #31
10017450:	40e1      	lsrs	r1, r4
10017452:	000c      	movs	r4, r1
10017454:	2b20      	cmp	r3, #32
10017456:	d100      	bne.n	1001745a <__aeabi_dsub+0x32e>
10017458:	e080      	b.n	1001755c <__aeabi_dsub+0x430>
1001745a:	2140      	movs	r1, #64	; 0x40
1001745c:	1acb      	subs	r3, r1, r3
1001745e:	409a      	lsls	r2, r3
10017460:	4315      	orrs	r5, r2
10017462:	1e6a      	subs	r2, r5, #1
10017464:	4195      	sbcs	r5, r2
10017466:	2700      	movs	r7, #0
10017468:	4325      	orrs	r5, r4
1001746a:	2400      	movs	r4, #0
1001746c:	e71f      	b.n	100172ae <__aeabi_dsub+0x182>
1001746e:	4663      	mov	r3, ip
10017470:	0002      	movs	r2, r0
10017472:	3b20      	subs	r3, #32
10017474:	40da      	lsrs	r2, r3
10017476:	4663      	mov	r3, ip
10017478:	2b20      	cmp	r3, #32
1001747a:	d071      	beq.n	10017560 <__aeabi_dsub+0x434>
1001747c:	2340      	movs	r3, #64	; 0x40
1001747e:	4666      	mov	r6, ip
10017480:	1b9b      	subs	r3, r3, r6
10017482:	4098      	lsls	r0, r3
10017484:	4301      	orrs	r1, r0
10017486:	1e48      	subs	r0, r1, #1
10017488:	4181      	sbcs	r1, r0
1001748a:	4311      	orrs	r1, r2
1001748c:	2200      	movs	r2, #0
1001748e:	e6cf      	b.n	10017230 <__aeabi_dsub+0x104>
10017490:	000007ff 	.word	0x000007ff
10017494:	ff7fffff 	.word	0xff7fffff
10017498:	800fffff 	.word	0x800fffff
1001749c:	2c00      	cmp	r4, #0
1001749e:	d048      	beq.n	10017532 <__aeabi_dsub+0x406>
100174a0:	4cca      	ldr	r4, [pc, #808]	; (100177cc <__aeabi_dsub+0x6a0>)
100174a2:	42a2      	cmp	r2, r4
100174a4:	d100      	bne.n	100174a8 <__aeabi_dsub+0x37c>
100174a6:	e0a2      	b.n	100175ee <__aeabi_dsub+0x4c2>
100174a8:	4274      	negs	r4, r6
100174aa:	46a1      	mov	r9, r4
100174ac:	2480      	movs	r4, #128	; 0x80
100174ae:	0424      	lsls	r4, r4, #16
100174b0:	4327      	orrs	r7, r4
100174b2:	464c      	mov	r4, r9
100174b4:	2c38      	cmp	r4, #56	; 0x38
100174b6:	dd00      	ble.n	100174ba <__aeabi_dsub+0x38e>
100174b8:	e0db      	b.n	10017672 <__aeabi_dsub+0x546>
100174ba:	2c1f      	cmp	r4, #31
100174bc:	dd00      	ble.n	100174c0 <__aeabi_dsub+0x394>
100174be:	e144      	b.n	1001774a <__aeabi_dsub+0x61e>
100174c0:	464e      	mov	r6, r9
100174c2:	2420      	movs	r4, #32
100174c4:	1ba4      	subs	r4, r4, r6
100174c6:	003e      	movs	r6, r7
100174c8:	40a6      	lsls	r6, r4
100174ca:	46a2      	mov	sl, r4
100174cc:	46b0      	mov	r8, r6
100174ce:	464c      	mov	r4, r9
100174d0:	002e      	movs	r6, r5
100174d2:	40e6      	lsrs	r6, r4
100174d4:	46b4      	mov	ip, r6
100174d6:	4646      	mov	r6, r8
100174d8:	4664      	mov	r4, ip
100174da:	4326      	orrs	r6, r4
100174dc:	4654      	mov	r4, sl
100174de:	40a5      	lsls	r5, r4
100174e0:	1e6c      	subs	r4, r5, #1
100174e2:	41a5      	sbcs	r5, r4
100174e4:	0034      	movs	r4, r6
100174e6:	432c      	orrs	r4, r5
100174e8:	464d      	mov	r5, r9
100174ea:	40ef      	lsrs	r7, r5
100174ec:	1b0d      	subs	r5, r1, r4
100174ee:	e028      	b.n	10017542 <__aeabi_dsub+0x416>
100174f0:	464a      	mov	r2, r9
100174f2:	4643      	mov	r3, r8
100174f4:	464d      	mov	r5, r9
100174f6:	431a      	orrs	r2, r3
100174f8:	d000      	beq.n	100174fc <__aeabi_dsub+0x3d0>
100174fa:	e6a5      	b.n	10017248 <__aeabi_dsub+0x11c>
100174fc:	2300      	movs	r3, #0
100174fe:	2400      	movs	r4, #0
10017500:	2500      	movs	r5, #0
10017502:	e6de      	b.n	100172c2 <__aeabi_dsub+0x196>
10017504:	2a1f      	cmp	r2, #31
10017506:	dc5a      	bgt.n	100175be <__aeabi_dsub+0x492>
10017508:	4666      	mov	r6, ip
1001750a:	2220      	movs	r2, #32
1001750c:	1b92      	subs	r2, r2, r6
1001750e:	0006      	movs	r6, r0
10017510:	4096      	lsls	r6, r2
10017512:	4691      	mov	r9, r2
10017514:	46b0      	mov	r8, r6
10017516:	4662      	mov	r2, ip
10017518:	000e      	movs	r6, r1
1001751a:	40d6      	lsrs	r6, r2
1001751c:	4642      	mov	r2, r8
1001751e:	4316      	orrs	r6, r2
10017520:	464a      	mov	r2, r9
10017522:	4091      	lsls	r1, r2
10017524:	1e4a      	subs	r2, r1, #1
10017526:	4191      	sbcs	r1, r2
10017528:	0002      	movs	r2, r0
1001752a:	4660      	mov	r0, ip
1001752c:	4331      	orrs	r1, r6
1001752e:	40c2      	lsrs	r2, r0
10017530:	e6e4      	b.n	100172fc <__aeabi_dsub+0x1d0>
10017532:	003c      	movs	r4, r7
10017534:	432c      	orrs	r4, r5
10017536:	d05a      	beq.n	100175ee <__aeabi_dsub+0x4c2>
10017538:	43f4      	mvns	r4, r6
1001753a:	46a1      	mov	r9, r4
1001753c:	2c00      	cmp	r4, #0
1001753e:	d152      	bne.n	100175e6 <__aeabi_dsub+0x4ba>
10017540:	1b4d      	subs	r5, r1, r5
10017542:	42a9      	cmp	r1, r5
10017544:	4189      	sbcs	r1, r1
10017546:	1bc7      	subs	r7, r0, r7
10017548:	4249      	negs	r1, r1
1001754a:	1a7f      	subs	r7, r7, r1
1001754c:	0014      	movs	r4, r2
1001754e:	469a      	mov	sl, r3
10017550:	e675      	b.n	1001723e <__aeabi_dsub+0x112>
10017552:	4a9e      	ldr	r2, [pc, #632]	; (100177cc <__aeabi_dsub+0x6a0>)
10017554:	4294      	cmp	r4, r2
10017556:	d000      	beq.n	1001755a <__aeabi_dsub+0x42e>
10017558:	e6c7      	b.n	100172ea <__aeabi_dsub+0x1be>
1001755a:	e613      	b.n	10017184 <__aeabi_dsub+0x58>
1001755c:	2200      	movs	r2, #0
1001755e:	e77f      	b.n	10017460 <__aeabi_dsub+0x334>
10017560:	2000      	movs	r0, #0
10017562:	e78f      	b.n	10017484 <__aeabi_dsub+0x358>
10017564:	2c00      	cmp	r4, #0
10017566:	d000      	beq.n	1001756a <__aeabi_dsub+0x43e>
10017568:	e0c8      	b.n	100176fc <__aeabi_dsub+0x5d0>
1001756a:	003b      	movs	r3, r7
1001756c:	432b      	orrs	r3, r5
1001756e:	d100      	bne.n	10017572 <__aeabi_dsub+0x446>
10017570:	e10f      	b.n	10017792 <__aeabi_dsub+0x666>
10017572:	0003      	movs	r3, r0
10017574:	430b      	orrs	r3, r1
10017576:	d100      	bne.n	1001757a <__aeabi_dsub+0x44e>
10017578:	e604      	b.n	10017184 <__aeabi_dsub+0x58>
1001757a:	1869      	adds	r1, r5, r1
1001757c:	42a9      	cmp	r1, r5
1001757e:	419b      	sbcs	r3, r3
10017580:	183f      	adds	r7, r7, r0
10017582:	425b      	negs	r3, r3
10017584:	19df      	adds	r7, r3, r7
10017586:	023b      	lsls	r3, r7, #8
10017588:	d400      	bmi.n	1001758c <__aeabi_dsub+0x460>
1001758a:	e11a      	b.n	100177c2 <__aeabi_dsub+0x696>
1001758c:	4b90      	ldr	r3, [pc, #576]	; (100177d0 <__aeabi_dsub+0x6a4>)
1001758e:	000d      	movs	r5, r1
10017590:	401f      	ands	r7, r3
10017592:	4664      	mov	r4, ip
10017594:	e5f6      	b.n	10017184 <__aeabi_dsub+0x58>
10017596:	469a      	mov	sl, r3
10017598:	e689      	b.n	100172ae <__aeabi_dsub+0x182>
1001759a:	003a      	movs	r2, r7
1001759c:	432a      	orrs	r2, r5
1001759e:	2c00      	cmp	r4, #0
100175a0:	d15c      	bne.n	1001765c <__aeabi_dsub+0x530>
100175a2:	2a00      	cmp	r2, #0
100175a4:	d175      	bne.n	10017692 <__aeabi_dsub+0x566>
100175a6:	0002      	movs	r2, r0
100175a8:	430a      	orrs	r2, r1
100175aa:	d100      	bne.n	100175ae <__aeabi_dsub+0x482>
100175ac:	e0ca      	b.n	10017744 <__aeabi_dsub+0x618>
100175ae:	0007      	movs	r7, r0
100175b0:	000d      	movs	r5, r1
100175b2:	469a      	mov	sl, r3
100175b4:	e5e6      	b.n	10017184 <__aeabi_dsub+0x58>
100175b6:	4664      	mov	r4, ip
100175b8:	2200      	movs	r2, #0
100175ba:	2500      	movs	r5, #0
100175bc:	e681      	b.n	100172c2 <__aeabi_dsub+0x196>
100175be:	4662      	mov	r2, ip
100175c0:	0006      	movs	r6, r0
100175c2:	3a20      	subs	r2, #32
100175c4:	40d6      	lsrs	r6, r2
100175c6:	4662      	mov	r2, ip
100175c8:	46b0      	mov	r8, r6
100175ca:	2a20      	cmp	r2, #32
100175cc:	d100      	bne.n	100175d0 <__aeabi_dsub+0x4a4>
100175ce:	e0b7      	b.n	10017740 <__aeabi_dsub+0x614>
100175d0:	2240      	movs	r2, #64	; 0x40
100175d2:	4666      	mov	r6, ip
100175d4:	1b92      	subs	r2, r2, r6
100175d6:	4090      	lsls	r0, r2
100175d8:	4301      	orrs	r1, r0
100175da:	4642      	mov	r2, r8
100175dc:	1e48      	subs	r0, r1, #1
100175de:	4181      	sbcs	r1, r0
100175e0:	4311      	orrs	r1, r2
100175e2:	2200      	movs	r2, #0
100175e4:	e68a      	b.n	100172fc <__aeabi_dsub+0x1d0>
100175e6:	4c79      	ldr	r4, [pc, #484]	; (100177cc <__aeabi_dsub+0x6a0>)
100175e8:	42a2      	cmp	r2, r4
100175ea:	d000      	beq.n	100175ee <__aeabi_dsub+0x4c2>
100175ec:	e761      	b.n	100174b2 <__aeabi_dsub+0x386>
100175ee:	0007      	movs	r7, r0
100175f0:	000d      	movs	r5, r1
100175f2:	0014      	movs	r4, r2
100175f4:	469a      	mov	sl, r3
100175f6:	e5c5      	b.n	10017184 <__aeabi_dsub+0x58>
100175f8:	2c00      	cmp	r4, #0
100175fa:	d141      	bne.n	10017680 <__aeabi_dsub+0x554>
100175fc:	003c      	movs	r4, r7
100175fe:	432c      	orrs	r4, r5
10017600:	d078      	beq.n	100176f4 <__aeabi_dsub+0x5c8>
10017602:	43f4      	mvns	r4, r6
10017604:	46a1      	mov	r9, r4
10017606:	2c00      	cmp	r4, #0
10017608:	d020      	beq.n	1001764c <__aeabi_dsub+0x520>
1001760a:	4c70      	ldr	r4, [pc, #448]	; (100177cc <__aeabi_dsub+0x6a0>)
1001760c:	42a2      	cmp	r2, r4
1001760e:	d071      	beq.n	100176f4 <__aeabi_dsub+0x5c8>
10017610:	464c      	mov	r4, r9
10017612:	2c38      	cmp	r4, #56	; 0x38
10017614:	dd00      	ble.n	10017618 <__aeabi_dsub+0x4ec>
10017616:	e0b2      	b.n	1001777e <__aeabi_dsub+0x652>
10017618:	2c1f      	cmp	r4, #31
1001761a:	dd00      	ble.n	1001761e <__aeabi_dsub+0x4f2>
1001761c:	e0bc      	b.n	10017798 <__aeabi_dsub+0x66c>
1001761e:	2620      	movs	r6, #32
10017620:	1b34      	subs	r4, r6, r4
10017622:	46a2      	mov	sl, r4
10017624:	003c      	movs	r4, r7
10017626:	4656      	mov	r6, sl
10017628:	40b4      	lsls	r4, r6
1001762a:	464e      	mov	r6, r9
1001762c:	46a0      	mov	r8, r4
1001762e:	002c      	movs	r4, r5
10017630:	40f4      	lsrs	r4, r6
10017632:	46a4      	mov	ip, r4
10017634:	4644      	mov	r4, r8
10017636:	4666      	mov	r6, ip
10017638:	4334      	orrs	r4, r6
1001763a:	46a4      	mov	ip, r4
1001763c:	4654      	mov	r4, sl
1001763e:	40a5      	lsls	r5, r4
10017640:	4664      	mov	r4, ip
10017642:	1e6e      	subs	r6, r5, #1
10017644:	41b5      	sbcs	r5, r6
10017646:	4325      	orrs	r5, r4
10017648:	464c      	mov	r4, r9
1001764a:	40e7      	lsrs	r7, r4
1001764c:	186d      	adds	r5, r5, r1
1001764e:	428d      	cmp	r5, r1
10017650:	4189      	sbcs	r1, r1
10017652:	183f      	adds	r7, r7, r0
10017654:	4249      	negs	r1, r1
10017656:	19cf      	adds	r7, r1, r7
10017658:	0014      	movs	r4, r2
1001765a:	e656      	b.n	1001730a <__aeabi_dsub+0x1de>
1001765c:	2a00      	cmp	r2, #0
1001765e:	d12f      	bne.n	100176c0 <__aeabi_dsub+0x594>
10017660:	0002      	movs	r2, r0
10017662:	430a      	orrs	r2, r1
10017664:	d100      	bne.n	10017668 <__aeabi_dsub+0x53c>
10017666:	e084      	b.n	10017772 <__aeabi_dsub+0x646>
10017668:	0007      	movs	r7, r0
1001766a:	000d      	movs	r5, r1
1001766c:	469a      	mov	sl, r3
1001766e:	4c57      	ldr	r4, [pc, #348]	; (100177cc <__aeabi_dsub+0x6a0>)
10017670:	e588      	b.n	10017184 <__aeabi_dsub+0x58>
10017672:	433d      	orrs	r5, r7
10017674:	1e6f      	subs	r7, r5, #1
10017676:	41bd      	sbcs	r5, r7
10017678:	b2ec      	uxtb	r4, r5
1001767a:	2700      	movs	r7, #0
1001767c:	1b0d      	subs	r5, r1, r4
1001767e:	e760      	b.n	10017542 <__aeabi_dsub+0x416>
10017680:	4c52      	ldr	r4, [pc, #328]	; (100177cc <__aeabi_dsub+0x6a0>)
10017682:	42a2      	cmp	r2, r4
10017684:	d036      	beq.n	100176f4 <__aeabi_dsub+0x5c8>
10017686:	4274      	negs	r4, r6
10017688:	2680      	movs	r6, #128	; 0x80
1001768a:	0436      	lsls	r6, r6, #16
1001768c:	46a1      	mov	r9, r4
1001768e:	4337      	orrs	r7, r6
10017690:	e7be      	b.n	10017610 <__aeabi_dsub+0x4e4>
10017692:	0002      	movs	r2, r0
10017694:	430a      	orrs	r2, r1
10017696:	d100      	bne.n	1001769a <__aeabi_dsub+0x56e>
10017698:	e574      	b.n	10017184 <__aeabi_dsub+0x58>
1001769a:	1a6a      	subs	r2, r5, r1
1001769c:	4690      	mov	r8, r2
1001769e:	4545      	cmp	r5, r8
100176a0:	41b6      	sbcs	r6, r6
100176a2:	1a3a      	subs	r2, r7, r0
100176a4:	4276      	negs	r6, r6
100176a6:	1b92      	subs	r2, r2, r6
100176a8:	4694      	mov	ip, r2
100176aa:	0212      	lsls	r2, r2, #8
100176ac:	d400      	bmi.n	100176b0 <__aeabi_dsub+0x584>
100176ae:	e5f7      	b.n	100172a0 <__aeabi_dsub+0x174>
100176b0:	1b4d      	subs	r5, r1, r5
100176b2:	42a9      	cmp	r1, r5
100176b4:	4189      	sbcs	r1, r1
100176b6:	1bc7      	subs	r7, r0, r7
100176b8:	4249      	negs	r1, r1
100176ba:	1a7f      	subs	r7, r7, r1
100176bc:	469a      	mov	sl, r3
100176be:	e561      	b.n	10017184 <__aeabi_dsub+0x58>
100176c0:	0002      	movs	r2, r0
100176c2:	430a      	orrs	r2, r1
100176c4:	d03a      	beq.n	1001773c <__aeabi_dsub+0x610>
100176c6:	08ed      	lsrs	r5, r5, #3
100176c8:	077c      	lsls	r4, r7, #29
100176ca:	432c      	orrs	r4, r5
100176cc:	2580      	movs	r5, #128	; 0x80
100176ce:	08fa      	lsrs	r2, r7, #3
100176d0:	032d      	lsls	r5, r5, #12
100176d2:	422a      	tst	r2, r5
100176d4:	d008      	beq.n	100176e8 <__aeabi_dsub+0x5bc>
100176d6:	08c7      	lsrs	r7, r0, #3
100176d8:	422f      	tst	r7, r5
100176da:	d105      	bne.n	100176e8 <__aeabi_dsub+0x5bc>
100176dc:	0745      	lsls	r5, r0, #29
100176de:	002c      	movs	r4, r5
100176e0:	003a      	movs	r2, r7
100176e2:	469a      	mov	sl, r3
100176e4:	08c9      	lsrs	r1, r1, #3
100176e6:	430c      	orrs	r4, r1
100176e8:	0f67      	lsrs	r7, r4, #29
100176ea:	00d2      	lsls	r2, r2, #3
100176ec:	00e5      	lsls	r5, r4, #3
100176ee:	4317      	orrs	r7, r2
100176f0:	4c36      	ldr	r4, [pc, #216]	; (100177cc <__aeabi_dsub+0x6a0>)
100176f2:	e547      	b.n	10017184 <__aeabi_dsub+0x58>
100176f4:	0007      	movs	r7, r0
100176f6:	000d      	movs	r5, r1
100176f8:	0014      	movs	r4, r2
100176fa:	e543      	b.n	10017184 <__aeabi_dsub+0x58>
100176fc:	003a      	movs	r2, r7
100176fe:	432a      	orrs	r2, r5
10017700:	d043      	beq.n	1001778a <__aeabi_dsub+0x65e>
10017702:	0002      	movs	r2, r0
10017704:	430a      	orrs	r2, r1
10017706:	d019      	beq.n	1001773c <__aeabi_dsub+0x610>
10017708:	08ed      	lsrs	r5, r5, #3
1001770a:	077c      	lsls	r4, r7, #29
1001770c:	432c      	orrs	r4, r5
1001770e:	2580      	movs	r5, #128	; 0x80
10017710:	08fa      	lsrs	r2, r7, #3
10017712:	032d      	lsls	r5, r5, #12
10017714:	422a      	tst	r2, r5
10017716:	d007      	beq.n	10017728 <__aeabi_dsub+0x5fc>
10017718:	08c6      	lsrs	r6, r0, #3
1001771a:	422e      	tst	r6, r5
1001771c:	d104      	bne.n	10017728 <__aeabi_dsub+0x5fc>
1001771e:	0747      	lsls	r7, r0, #29
10017720:	003c      	movs	r4, r7
10017722:	0032      	movs	r2, r6
10017724:	08c9      	lsrs	r1, r1, #3
10017726:	430c      	orrs	r4, r1
10017728:	00d7      	lsls	r7, r2, #3
1001772a:	0f62      	lsrs	r2, r4, #29
1001772c:	00e5      	lsls	r5, r4, #3
1001772e:	4317      	orrs	r7, r2
10017730:	469a      	mov	sl, r3
10017732:	4c26      	ldr	r4, [pc, #152]	; (100177cc <__aeabi_dsub+0x6a0>)
10017734:	e526      	b.n	10017184 <__aeabi_dsub+0x58>
10017736:	2200      	movs	r2, #0
10017738:	2500      	movs	r5, #0
1001773a:	e544      	b.n	100171c6 <__aeabi_dsub+0x9a>
1001773c:	4c23      	ldr	r4, [pc, #140]	; (100177cc <__aeabi_dsub+0x6a0>)
1001773e:	e521      	b.n	10017184 <__aeabi_dsub+0x58>
10017740:	2000      	movs	r0, #0
10017742:	e749      	b.n	100175d8 <__aeabi_dsub+0x4ac>
10017744:	2300      	movs	r3, #0
10017746:	2500      	movs	r5, #0
10017748:	e5bb      	b.n	100172c2 <__aeabi_dsub+0x196>
1001774a:	464c      	mov	r4, r9
1001774c:	003e      	movs	r6, r7
1001774e:	3c20      	subs	r4, #32
10017750:	40e6      	lsrs	r6, r4
10017752:	464c      	mov	r4, r9
10017754:	46b4      	mov	ip, r6
10017756:	2c20      	cmp	r4, #32
10017758:	d031      	beq.n	100177be <__aeabi_dsub+0x692>
1001775a:	2440      	movs	r4, #64	; 0x40
1001775c:	464e      	mov	r6, r9
1001775e:	1ba6      	subs	r6, r4, r6
10017760:	40b7      	lsls	r7, r6
10017762:	433d      	orrs	r5, r7
10017764:	1e6c      	subs	r4, r5, #1
10017766:	41a5      	sbcs	r5, r4
10017768:	4664      	mov	r4, ip
1001776a:	432c      	orrs	r4, r5
1001776c:	2700      	movs	r7, #0
1001776e:	1b0d      	subs	r5, r1, r4
10017770:	e6e7      	b.n	10017542 <__aeabi_dsub+0x416>
10017772:	2280      	movs	r2, #128	; 0x80
10017774:	2300      	movs	r3, #0
10017776:	0312      	lsls	r2, r2, #12
10017778:	4c14      	ldr	r4, [pc, #80]	; (100177cc <__aeabi_dsub+0x6a0>)
1001777a:	2500      	movs	r5, #0
1001777c:	e5a1      	b.n	100172c2 <__aeabi_dsub+0x196>
1001777e:	433d      	orrs	r5, r7
10017780:	1e6f      	subs	r7, r5, #1
10017782:	41bd      	sbcs	r5, r7
10017784:	2700      	movs	r7, #0
10017786:	b2ed      	uxtb	r5, r5
10017788:	e760      	b.n	1001764c <__aeabi_dsub+0x520>
1001778a:	0007      	movs	r7, r0
1001778c:	000d      	movs	r5, r1
1001778e:	4c0f      	ldr	r4, [pc, #60]	; (100177cc <__aeabi_dsub+0x6a0>)
10017790:	e4f8      	b.n	10017184 <__aeabi_dsub+0x58>
10017792:	0007      	movs	r7, r0
10017794:	000d      	movs	r5, r1
10017796:	e4f5      	b.n	10017184 <__aeabi_dsub+0x58>
10017798:	464e      	mov	r6, r9
1001779a:	003c      	movs	r4, r7
1001779c:	3e20      	subs	r6, #32
1001779e:	40f4      	lsrs	r4, r6
100177a0:	46a0      	mov	r8, r4
100177a2:	464c      	mov	r4, r9
100177a4:	2c20      	cmp	r4, #32
100177a6:	d00e      	beq.n	100177c6 <__aeabi_dsub+0x69a>
100177a8:	2440      	movs	r4, #64	; 0x40
100177aa:	464e      	mov	r6, r9
100177ac:	1ba4      	subs	r4, r4, r6
100177ae:	40a7      	lsls	r7, r4
100177b0:	433d      	orrs	r5, r7
100177b2:	1e6f      	subs	r7, r5, #1
100177b4:	41bd      	sbcs	r5, r7
100177b6:	4644      	mov	r4, r8
100177b8:	2700      	movs	r7, #0
100177ba:	4325      	orrs	r5, r4
100177bc:	e746      	b.n	1001764c <__aeabi_dsub+0x520>
100177be:	2700      	movs	r7, #0
100177c0:	e7cf      	b.n	10017762 <__aeabi_dsub+0x636>
100177c2:	000d      	movs	r5, r1
100177c4:	e573      	b.n	100172ae <__aeabi_dsub+0x182>
100177c6:	2700      	movs	r7, #0
100177c8:	e7f2      	b.n	100177b0 <__aeabi_dsub+0x684>
100177ca:	46c0      	nop			; (mov r8, r8)
100177cc:	000007ff 	.word	0x000007ff
100177d0:	ff7fffff 	.word	0xff7fffff

100177d4 <__aeabi_d2iz>:
100177d4:	030b      	lsls	r3, r1, #12
100177d6:	b530      	push	{r4, r5, lr}
100177d8:	4d13      	ldr	r5, [pc, #76]	; (10017828 <__aeabi_d2iz+0x54>)
100177da:	0b1a      	lsrs	r2, r3, #12
100177dc:	004b      	lsls	r3, r1, #1
100177de:	0d5b      	lsrs	r3, r3, #21
100177e0:	0fc9      	lsrs	r1, r1, #31
100177e2:	2400      	movs	r4, #0
100177e4:	42ab      	cmp	r3, r5
100177e6:	dd11      	ble.n	1001780c <__aeabi_d2iz+0x38>
100177e8:	4c10      	ldr	r4, [pc, #64]	; (1001782c <__aeabi_d2iz+0x58>)
100177ea:	42a3      	cmp	r3, r4
100177ec:	dc10      	bgt.n	10017810 <__aeabi_d2iz+0x3c>
100177ee:	2480      	movs	r4, #128	; 0x80
100177f0:	0364      	lsls	r4, r4, #13
100177f2:	4322      	orrs	r2, r4
100177f4:	4c0e      	ldr	r4, [pc, #56]	; (10017830 <__aeabi_d2iz+0x5c>)
100177f6:	1ae4      	subs	r4, r4, r3
100177f8:	2c1f      	cmp	r4, #31
100177fa:	dd0c      	ble.n	10017816 <__aeabi_d2iz+0x42>
100177fc:	480d      	ldr	r0, [pc, #52]	; (10017834 <__aeabi_d2iz+0x60>)
100177fe:	1ac3      	subs	r3, r0, r3
10017800:	40da      	lsrs	r2, r3
10017802:	0013      	movs	r3, r2
10017804:	425c      	negs	r4, r3
10017806:	2900      	cmp	r1, #0
10017808:	d100      	bne.n	1001780c <__aeabi_d2iz+0x38>
1001780a:	001c      	movs	r4, r3
1001780c:	0020      	movs	r0, r4
1001780e:	bd30      	pop	{r4, r5, pc}
10017810:	4b09      	ldr	r3, [pc, #36]	; (10017838 <__aeabi_d2iz+0x64>)
10017812:	18cc      	adds	r4, r1, r3
10017814:	e7fa      	b.n	1001780c <__aeabi_d2iz+0x38>
10017816:	40e0      	lsrs	r0, r4
10017818:	4c08      	ldr	r4, [pc, #32]	; (1001783c <__aeabi_d2iz+0x68>)
1001781a:	46a4      	mov	ip, r4
1001781c:	4463      	add	r3, ip
1001781e:	409a      	lsls	r2, r3
10017820:	0013      	movs	r3, r2
10017822:	4303      	orrs	r3, r0
10017824:	e7ee      	b.n	10017804 <__aeabi_d2iz+0x30>
10017826:	46c0      	nop			; (mov r8, r8)
10017828:	000003fe 	.word	0x000003fe
1001782c:	0000041d 	.word	0x0000041d
10017830:	00000433 	.word	0x00000433
10017834:	00000413 	.word	0x00000413
10017838:	7fffffff 	.word	0x7fffffff
1001783c:	fffffbed 	.word	0xfffffbed

10017840 <__aeabi_i2d>:
10017840:	b570      	push	{r4, r5, r6, lr}
10017842:	2800      	cmp	r0, #0
10017844:	d030      	beq.n	100178a8 <__aeabi_i2d+0x68>
10017846:	17c3      	asrs	r3, r0, #31
10017848:	18c4      	adds	r4, r0, r3
1001784a:	405c      	eors	r4, r3
1001784c:	0fc5      	lsrs	r5, r0, #31
1001784e:	0020      	movs	r0, r4
10017850:	f000 f950 	bl	10017af4 <__clzsi2>
10017854:	4b17      	ldr	r3, [pc, #92]	; (100178b4 <__aeabi_i2d+0x74>)
10017856:	4a18      	ldr	r2, [pc, #96]	; (100178b8 <__aeabi_i2d+0x78>)
10017858:	1a1b      	subs	r3, r3, r0
1001785a:	1ad2      	subs	r2, r2, r3
1001785c:	2a1f      	cmp	r2, #31
1001785e:	dd18      	ble.n	10017892 <__aeabi_i2d+0x52>
10017860:	4a16      	ldr	r2, [pc, #88]	; (100178bc <__aeabi_i2d+0x7c>)
10017862:	1ad2      	subs	r2, r2, r3
10017864:	4094      	lsls	r4, r2
10017866:	2200      	movs	r2, #0
10017868:	0324      	lsls	r4, r4, #12
1001786a:	055b      	lsls	r3, r3, #21
1001786c:	0b24      	lsrs	r4, r4, #12
1001786e:	0d5b      	lsrs	r3, r3, #21
10017870:	2100      	movs	r1, #0
10017872:	0010      	movs	r0, r2
10017874:	0324      	lsls	r4, r4, #12
10017876:	0d0a      	lsrs	r2, r1, #20
10017878:	0512      	lsls	r2, r2, #20
1001787a:	0b24      	lsrs	r4, r4, #12
1001787c:	4314      	orrs	r4, r2
1001787e:	4a10      	ldr	r2, [pc, #64]	; (100178c0 <__aeabi_i2d+0x80>)
10017880:	051b      	lsls	r3, r3, #20
10017882:	4014      	ands	r4, r2
10017884:	431c      	orrs	r4, r3
10017886:	0064      	lsls	r4, r4, #1
10017888:	07ed      	lsls	r5, r5, #31
1001788a:	0864      	lsrs	r4, r4, #1
1001788c:	432c      	orrs	r4, r5
1001788e:	0021      	movs	r1, r4
10017890:	bd70      	pop	{r4, r5, r6, pc}
10017892:	0021      	movs	r1, r4
10017894:	4091      	lsls	r1, r2
10017896:	000a      	movs	r2, r1
10017898:	210b      	movs	r1, #11
1001789a:	1a08      	subs	r0, r1, r0
1001789c:	40c4      	lsrs	r4, r0
1001789e:	055b      	lsls	r3, r3, #21
100178a0:	0324      	lsls	r4, r4, #12
100178a2:	0b24      	lsrs	r4, r4, #12
100178a4:	0d5b      	lsrs	r3, r3, #21
100178a6:	e7e3      	b.n	10017870 <__aeabi_i2d+0x30>
100178a8:	2500      	movs	r5, #0
100178aa:	2300      	movs	r3, #0
100178ac:	2400      	movs	r4, #0
100178ae:	2200      	movs	r2, #0
100178b0:	e7de      	b.n	10017870 <__aeabi_i2d+0x30>
100178b2:	46c0      	nop			; (mov r8, r8)
100178b4:	0000041e 	.word	0x0000041e
100178b8:	00000433 	.word	0x00000433
100178bc:	00000413 	.word	0x00000413
100178c0:	800fffff 	.word	0x800fffff

100178c4 <__aeabi_ui2d>:
100178c4:	b570      	push	{r4, r5, r6, lr}
100178c6:	1e05      	subs	r5, r0, #0
100178c8:	d028      	beq.n	1001791c <__aeabi_ui2d+0x58>
100178ca:	f000 f913 	bl	10017af4 <__clzsi2>
100178ce:	4b15      	ldr	r3, [pc, #84]	; (10017924 <__aeabi_ui2d+0x60>)
100178d0:	4a15      	ldr	r2, [pc, #84]	; (10017928 <__aeabi_ui2d+0x64>)
100178d2:	1a1b      	subs	r3, r3, r0
100178d4:	1ad2      	subs	r2, r2, r3
100178d6:	2a1f      	cmp	r2, #31
100178d8:	dd16      	ble.n	10017908 <__aeabi_ui2d+0x44>
100178da:	002c      	movs	r4, r5
100178dc:	4a13      	ldr	r2, [pc, #76]	; (1001792c <__aeabi_ui2d+0x68>)
100178de:	2500      	movs	r5, #0
100178e0:	1ad2      	subs	r2, r2, r3
100178e2:	4094      	lsls	r4, r2
100178e4:	055a      	lsls	r2, r3, #21
100178e6:	0324      	lsls	r4, r4, #12
100178e8:	0b24      	lsrs	r4, r4, #12
100178ea:	0d52      	lsrs	r2, r2, #21
100178ec:	2100      	movs	r1, #0
100178ee:	0324      	lsls	r4, r4, #12
100178f0:	0d0b      	lsrs	r3, r1, #20
100178f2:	0b24      	lsrs	r4, r4, #12
100178f4:	051b      	lsls	r3, r3, #20
100178f6:	4323      	orrs	r3, r4
100178f8:	4c0d      	ldr	r4, [pc, #52]	; (10017930 <__aeabi_ui2d+0x6c>)
100178fa:	0512      	lsls	r2, r2, #20
100178fc:	4023      	ands	r3, r4
100178fe:	4313      	orrs	r3, r2
10017900:	005b      	lsls	r3, r3, #1
10017902:	0028      	movs	r0, r5
10017904:	0859      	lsrs	r1, r3, #1
10017906:	bd70      	pop	{r4, r5, r6, pc}
10017908:	210b      	movs	r1, #11
1001790a:	002c      	movs	r4, r5
1001790c:	1a08      	subs	r0, r1, r0
1001790e:	40c4      	lsrs	r4, r0
10017910:	4095      	lsls	r5, r2
10017912:	0324      	lsls	r4, r4, #12
10017914:	055a      	lsls	r2, r3, #21
10017916:	0b24      	lsrs	r4, r4, #12
10017918:	0d52      	lsrs	r2, r2, #21
1001791a:	e7e7      	b.n	100178ec <__aeabi_ui2d+0x28>
1001791c:	2200      	movs	r2, #0
1001791e:	2400      	movs	r4, #0
10017920:	e7e4      	b.n	100178ec <__aeabi_ui2d+0x28>
10017922:	46c0      	nop			; (mov r8, r8)
10017924:	0000041e 	.word	0x0000041e
10017928:	00000433 	.word	0x00000433
1001792c:	00000413 	.word	0x00000413
10017930:	800fffff 	.word	0x800fffff

10017934 <__aeabi_f2d>:
10017934:	0042      	lsls	r2, r0, #1
10017936:	0e12      	lsrs	r2, r2, #24
10017938:	1c51      	adds	r1, r2, #1
1001793a:	0243      	lsls	r3, r0, #9
1001793c:	b2c9      	uxtb	r1, r1
1001793e:	b570      	push	{r4, r5, r6, lr}
10017940:	0a5d      	lsrs	r5, r3, #9
10017942:	0fc4      	lsrs	r4, r0, #31
10017944:	2901      	cmp	r1, #1
10017946:	dd15      	ble.n	10017974 <__aeabi_f2d+0x40>
10017948:	21e0      	movs	r1, #224	; 0xe0
1001794a:	0089      	lsls	r1, r1, #2
1001794c:	468c      	mov	ip, r1
1001794e:	076d      	lsls	r5, r5, #29
10017950:	0b1b      	lsrs	r3, r3, #12
10017952:	4462      	add	r2, ip
10017954:	2100      	movs	r1, #0
10017956:	0028      	movs	r0, r5
10017958:	0d0d      	lsrs	r5, r1, #20
1001795a:	052d      	lsls	r5, r5, #20
1001795c:	432b      	orrs	r3, r5
1001795e:	4d1c      	ldr	r5, [pc, #112]	; (100179d0 <__aeabi_f2d+0x9c>)
10017960:	0552      	lsls	r2, r2, #21
10017962:	402b      	ands	r3, r5
10017964:	0852      	lsrs	r2, r2, #1
10017966:	4313      	orrs	r3, r2
10017968:	005b      	lsls	r3, r3, #1
1001796a:	07e4      	lsls	r4, r4, #31
1001796c:	085b      	lsrs	r3, r3, #1
1001796e:	4323      	orrs	r3, r4
10017970:	0019      	movs	r1, r3
10017972:	bd70      	pop	{r4, r5, r6, pc}
10017974:	2a00      	cmp	r2, #0
10017976:	d115      	bne.n	100179a4 <__aeabi_f2d+0x70>
10017978:	2d00      	cmp	r5, #0
1001797a:	d01f      	beq.n	100179bc <__aeabi_f2d+0x88>
1001797c:	0028      	movs	r0, r5
1001797e:	f000 f8b9 	bl	10017af4 <__clzsi2>
10017982:	280a      	cmp	r0, #10
10017984:	dc1d      	bgt.n	100179c2 <__aeabi_f2d+0x8e>
10017986:	230b      	movs	r3, #11
10017988:	002a      	movs	r2, r5
1001798a:	1a1b      	subs	r3, r3, r0
1001798c:	40da      	lsrs	r2, r3
1001798e:	0013      	movs	r3, r2
10017990:	0002      	movs	r2, r0
10017992:	3215      	adds	r2, #21
10017994:	4095      	lsls	r5, r2
10017996:	4a0f      	ldr	r2, [pc, #60]	; (100179d4 <__aeabi_f2d+0xa0>)
10017998:	031b      	lsls	r3, r3, #12
1001799a:	1a12      	subs	r2, r2, r0
1001799c:	0552      	lsls	r2, r2, #21
1001799e:	0b1b      	lsrs	r3, r3, #12
100179a0:	0d52      	lsrs	r2, r2, #21
100179a2:	e7d7      	b.n	10017954 <__aeabi_f2d+0x20>
100179a4:	2d00      	cmp	r5, #0
100179a6:	d006      	beq.n	100179b6 <__aeabi_f2d+0x82>
100179a8:	2280      	movs	r2, #128	; 0x80
100179aa:	0b1b      	lsrs	r3, r3, #12
100179ac:	0312      	lsls	r2, r2, #12
100179ae:	4313      	orrs	r3, r2
100179b0:	076d      	lsls	r5, r5, #29
100179b2:	4a09      	ldr	r2, [pc, #36]	; (100179d8 <__aeabi_f2d+0xa4>)
100179b4:	e7ce      	b.n	10017954 <__aeabi_f2d+0x20>
100179b6:	4a08      	ldr	r2, [pc, #32]	; (100179d8 <__aeabi_f2d+0xa4>)
100179b8:	2300      	movs	r3, #0
100179ba:	e7cb      	b.n	10017954 <__aeabi_f2d+0x20>
100179bc:	2200      	movs	r2, #0
100179be:	2300      	movs	r3, #0
100179c0:	e7c8      	b.n	10017954 <__aeabi_f2d+0x20>
100179c2:	0003      	movs	r3, r0
100179c4:	3b0b      	subs	r3, #11
100179c6:	409d      	lsls	r5, r3
100179c8:	002b      	movs	r3, r5
100179ca:	2500      	movs	r5, #0
100179cc:	e7e3      	b.n	10017996 <__aeabi_f2d+0x62>
100179ce:	46c0      	nop			; (mov r8, r8)
100179d0:	800fffff 	.word	0x800fffff
100179d4:	00000389 	.word	0x00000389
100179d8:	000007ff 	.word	0x000007ff

100179dc <__aeabi_d2f>:
100179dc:	004b      	lsls	r3, r1, #1
100179de:	b570      	push	{r4, r5, r6, lr}
100179e0:	0d5e      	lsrs	r6, r3, #21
100179e2:	030c      	lsls	r4, r1, #12
100179e4:	1c75      	adds	r5, r6, #1
100179e6:	0a64      	lsrs	r4, r4, #9
100179e8:	0f42      	lsrs	r2, r0, #29
100179ea:	056d      	lsls	r5, r5, #21
100179ec:	4322      	orrs	r2, r4
100179ee:	0fc9      	lsrs	r1, r1, #31
100179f0:	00c4      	lsls	r4, r0, #3
100179f2:	0d6d      	lsrs	r5, r5, #21
100179f4:	2d01      	cmp	r5, #1
100179f6:	dd2a      	ble.n	10017a4e <__aeabi_d2f+0x72>
100179f8:	4b3b      	ldr	r3, [pc, #236]	; (10017ae8 <__aeabi_d2f+0x10c>)
100179fa:	18f3      	adds	r3, r6, r3
100179fc:	2bfe      	cmp	r3, #254	; 0xfe
100179fe:	dc1a      	bgt.n	10017a36 <__aeabi_d2f+0x5a>
10017a00:	2b00      	cmp	r3, #0
10017a02:	dd42      	ble.n	10017a8a <__aeabi_d2f+0xae>
10017a04:	0180      	lsls	r0, r0, #6
10017a06:	1e45      	subs	r5, r0, #1
10017a08:	41a8      	sbcs	r0, r5
10017a0a:	00d2      	lsls	r2, r2, #3
10017a0c:	4310      	orrs	r0, r2
10017a0e:	0f62      	lsrs	r2, r4, #29
10017a10:	4302      	orrs	r2, r0
10017a12:	0750      	lsls	r0, r2, #29
10017a14:	d004      	beq.n	10017a20 <__aeabi_d2f+0x44>
10017a16:	200f      	movs	r0, #15
10017a18:	4010      	ands	r0, r2
10017a1a:	2804      	cmp	r0, #4
10017a1c:	d000      	beq.n	10017a20 <__aeabi_d2f+0x44>
10017a1e:	3204      	adds	r2, #4
10017a20:	2080      	movs	r0, #128	; 0x80
10017a22:	04c0      	lsls	r0, r0, #19
10017a24:	4010      	ands	r0, r2
10017a26:	d021      	beq.n	10017a6c <__aeabi_d2f+0x90>
10017a28:	3301      	adds	r3, #1
10017a2a:	2bff      	cmp	r3, #255	; 0xff
10017a2c:	d003      	beq.n	10017a36 <__aeabi_d2f+0x5a>
10017a2e:	0192      	lsls	r2, r2, #6
10017a30:	0a52      	lsrs	r2, r2, #9
10017a32:	b2db      	uxtb	r3, r3
10017a34:	e001      	b.n	10017a3a <__aeabi_d2f+0x5e>
10017a36:	23ff      	movs	r3, #255	; 0xff
10017a38:	2200      	movs	r2, #0
10017a3a:	0252      	lsls	r2, r2, #9
10017a3c:	0a52      	lsrs	r2, r2, #9
10017a3e:	05db      	lsls	r3, r3, #23
10017a40:	4313      	orrs	r3, r2
10017a42:	005b      	lsls	r3, r3, #1
10017a44:	07c9      	lsls	r1, r1, #31
10017a46:	085b      	lsrs	r3, r3, #1
10017a48:	430b      	orrs	r3, r1
10017a4a:	0018      	movs	r0, r3
10017a4c:	bd70      	pop	{r4, r5, r6, pc}
10017a4e:	2e00      	cmp	r6, #0
10017a50:	d007      	beq.n	10017a62 <__aeabi_d2f+0x86>
10017a52:	4314      	orrs	r4, r2
10017a54:	d0ef      	beq.n	10017a36 <__aeabi_d2f+0x5a>
10017a56:	2080      	movs	r0, #128	; 0x80
10017a58:	00d2      	lsls	r2, r2, #3
10017a5a:	0480      	lsls	r0, r0, #18
10017a5c:	4302      	orrs	r2, r0
10017a5e:	23ff      	movs	r3, #255	; 0xff
10017a60:	e7d7      	b.n	10017a12 <__aeabi_d2f+0x36>
10017a62:	4322      	orrs	r2, r4
10017a64:	2300      	movs	r3, #0
10017a66:	2a00      	cmp	r2, #0
10017a68:	d003      	beq.n	10017a72 <__aeabi_d2f+0x96>
10017a6a:	2205      	movs	r2, #5
10017a6c:	08d2      	lsrs	r2, r2, #3
10017a6e:	2bff      	cmp	r3, #255	; 0xff
10017a70:	d003      	beq.n	10017a7a <__aeabi_d2f+0x9e>
10017a72:	0252      	lsls	r2, r2, #9
10017a74:	0a52      	lsrs	r2, r2, #9
10017a76:	b2db      	uxtb	r3, r3
10017a78:	e7df      	b.n	10017a3a <__aeabi_d2f+0x5e>
10017a7a:	2a00      	cmp	r2, #0
10017a7c:	d032      	beq.n	10017ae4 <__aeabi_d2f+0x108>
10017a7e:	2080      	movs	r0, #128	; 0x80
10017a80:	03c0      	lsls	r0, r0, #15
10017a82:	4302      	orrs	r2, r0
10017a84:	0252      	lsls	r2, r2, #9
10017a86:	0a52      	lsrs	r2, r2, #9
10017a88:	e7d7      	b.n	10017a3a <__aeabi_d2f+0x5e>
10017a8a:	0018      	movs	r0, r3
10017a8c:	3017      	adds	r0, #23
10017a8e:	db14      	blt.n	10017aba <__aeabi_d2f+0xde>
10017a90:	2080      	movs	r0, #128	; 0x80
10017a92:	0400      	lsls	r0, r0, #16
10017a94:	4302      	orrs	r2, r0
10017a96:	201e      	movs	r0, #30
10017a98:	1ac0      	subs	r0, r0, r3
10017a9a:	281f      	cmp	r0, #31
10017a9c:	dc0f      	bgt.n	10017abe <__aeabi_d2f+0xe2>
10017a9e:	0025      	movs	r5, r4
10017aa0:	4b12      	ldr	r3, [pc, #72]	; (10017aec <__aeabi_d2f+0x110>)
10017aa2:	18f3      	adds	r3, r6, r3
10017aa4:	409d      	lsls	r5, r3
10017aa6:	1e6e      	subs	r6, r5, #1
10017aa8:	41b5      	sbcs	r5, r6
10017aaa:	409a      	lsls	r2, r3
10017aac:	002b      	movs	r3, r5
10017aae:	4313      	orrs	r3, r2
10017ab0:	0022      	movs	r2, r4
10017ab2:	40c2      	lsrs	r2, r0
10017ab4:	431a      	orrs	r2, r3
10017ab6:	2300      	movs	r3, #0
10017ab8:	e7ab      	b.n	10017a12 <__aeabi_d2f+0x36>
10017aba:	2300      	movs	r3, #0
10017abc:	e7d5      	b.n	10017a6a <__aeabi_d2f+0x8e>
10017abe:	2502      	movs	r5, #2
10017ac0:	426d      	negs	r5, r5
10017ac2:	1aeb      	subs	r3, r5, r3
10017ac4:	0015      	movs	r5, r2
10017ac6:	40dd      	lsrs	r5, r3
10017ac8:	2820      	cmp	r0, #32
10017aca:	d009      	beq.n	10017ae0 <__aeabi_d2f+0x104>
10017acc:	4b08      	ldr	r3, [pc, #32]	; (10017af0 <__aeabi_d2f+0x114>)
10017ace:	18f3      	adds	r3, r6, r3
10017ad0:	409a      	lsls	r2, r3
10017ad2:	4314      	orrs	r4, r2
10017ad4:	1e62      	subs	r2, r4, #1
10017ad6:	4194      	sbcs	r4, r2
10017ad8:	0022      	movs	r2, r4
10017ada:	2300      	movs	r3, #0
10017adc:	432a      	orrs	r2, r5
10017ade:	e798      	b.n	10017a12 <__aeabi_d2f+0x36>
10017ae0:	2200      	movs	r2, #0
10017ae2:	e7f6      	b.n	10017ad2 <__aeabi_d2f+0xf6>
10017ae4:	2200      	movs	r2, #0
10017ae6:	e7a8      	b.n	10017a3a <__aeabi_d2f+0x5e>
10017ae8:	fffffc80 	.word	0xfffffc80
10017aec:	fffffc82 	.word	0xfffffc82
10017af0:	fffffca2 	.word	0xfffffca2

10017af4 <__clzsi2>:
10017af4:	211c      	movs	r1, #28
10017af6:	2301      	movs	r3, #1
10017af8:	041b      	lsls	r3, r3, #16
10017afa:	4298      	cmp	r0, r3
10017afc:	d301      	bcc.n	10017b02 <__clzsi2+0xe>
10017afe:	0c00      	lsrs	r0, r0, #16
10017b00:	3910      	subs	r1, #16
10017b02:	0a1b      	lsrs	r3, r3, #8
10017b04:	4298      	cmp	r0, r3
10017b06:	d301      	bcc.n	10017b0c <__clzsi2+0x18>
10017b08:	0a00      	lsrs	r0, r0, #8
10017b0a:	3908      	subs	r1, #8
10017b0c:	091b      	lsrs	r3, r3, #4
10017b0e:	4298      	cmp	r0, r3
10017b10:	d301      	bcc.n	10017b16 <__clzsi2+0x22>
10017b12:	0900      	lsrs	r0, r0, #4
10017b14:	3904      	subs	r1, #4
10017b16:	a202      	add	r2, pc, #8	; (adr r2, 10017b20 <__clzsi2+0x2c>)
10017b18:	5c10      	ldrb	r0, [r2, r0]
10017b1a:	1840      	adds	r0, r0, r1
10017b1c:	4770      	bx	lr
10017b1e:	46c0      	nop			; (mov r8, r8)
10017b20:	02020304 	.word	0x02020304
10017b24:	01010101 	.word	0x01010101
	...

10017b30 <__divdi3>:
10017b30:	b5f0      	push	{r4, r5, r6, r7, lr}
10017b32:	4644      	mov	r4, r8
10017b34:	465f      	mov	r7, fp
10017b36:	4656      	mov	r6, sl
10017b38:	464d      	mov	r5, r9
10017b3a:	b4f0      	push	{r4, r5, r6, r7}
10017b3c:	001c      	movs	r4, r3
10017b3e:	b083      	sub	sp, #12
10017b40:	2900      	cmp	r1, #0
10017b42:	da00      	bge.n	10017b46 <__divdi3+0x16>
10017b44:	e092      	b.n	10017c6c <__divdi3+0x13c>
10017b46:	000f      	movs	r7, r1
10017b48:	2100      	movs	r1, #0
10017b4a:	0006      	movs	r6, r0
10017b4c:	468a      	mov	sl, r1
10017b4e:	0010      	movs	r0, r2
10017b50:	0019      	movs	r1, r3
10017b52:	2c00      	cmp	r4, #0
10017b54:	da00      	bge.n	10017b58 <__divdi3+0x28>
10017b56:	e080      	b.n	10017c5a <__divdi3+0x12a>
10017b58:	0034      	movs	r4, r6
10017b5a:	003d      	movs	r5, r7
10017b5c:	4681      	mov	r9, r0
10017b5e:	4688      	mov	r8, r1
10017b60:	42b9      	cmp	r1, r7
10017b62:	d869      	bhi.n	10017c38 <__divdi3+0x108>
10017b64:	d066      	beq.n	10017c34 <__divdi3+0x104>
10017b66:	4641      	mov	r1, r8
10017b68:	4648      	mov	r0, r9
10017b6a:	f000 f8bf 	bl	10017cec <__clzdi2>
10017b6e:	4683      	mov	fp, r0
10017b70:	0039      	movs	r1, r7
10017b72:	0030      	movs	r0, r6
10017b74:	f000 f8ba 	bl	10017cec <__clzdi2>
10017b78:	465b      	mov	r3, fp
10017b7a:	1a1b      	subs	r3, r3, r0
10017b7c:	469c      	mov	ip, r3
10017b7e:	3b20      	subs	r3, #32
10017b80:	469b      	mov	fp, r3
10017b82:	d500      	bpl.n	10017b86 <__divdi3+0x56>
10017b84:	e086      	b.n	10017c94 <__divdi3+0x164>
10017b86:	4649      	mov	r1, r9
10017b88:	4658      	mov	r0, fp
10017b8a:	4081      	lsls	r1, r0
10017b8c:	000b      	movs	r3, r1
10017b8e:	4649      	mov	r1, r9
10017b90:	4660      	mov	r0, ip
10017b92:	4081      	lsls	r1, r0
10017b94:	000a      	movs	r2, r1
10017b96:	42bb      	cmp	r3, r7
10017b98:	d900      	bls.n	10017b9c <__divdi3+0x6c>
10017b9a:	e071      	b.n	10017c80 <__divdi3+0x150>
10017b9c:	d06d      	beq.n	10017c7a <__divdi3+0x14a>
10017b9e:	0034      	movs	r4, r6
10017ba0:	003d      	movs	r5, r7
10017ba2:	4659      	mov	r1, fp
10017ba4:	1aa4      	subs	r4, r4, r2
10017ba6:	419d      	sbcs	r5, r3
10017ba8:	2900      	cmp	r1, #0
10017baa:	da00      	bge.n	10017bae <__divdi3+0x7e>
10017bac:	e089      	b.n	10017cc2 <__divdi3+0x192>
10017bae:	2100      	movs	r1, #0
10017bb0:	2000      	movs	r0, #0
10017bb2:	2601      	movs	r6, #1
10017bb4:	9000      	str	r0, [sp, #0]
10017bb6:	9101      	str	r1, [sp, #4]
10017bb8:	4659      	mov	r1, fp
10017bba:	408e      	lsls	r6, r1
10017bbc:	9601      	str	r6, [sp, #4]
10017bbe:	4661      	mov	r1, ip
10017bc0:	2601      	movs	r6, #1
10017bc2:	408e      	lsls	r6, r1
10017bc4:	4661      	mov	r1, ip
10017bc6:	9600      	str	r6, [sp, #0]
10017bc8:	2900      	cmp	r1, #0
10017bca:	d060      	beq.n	10017c8e <__divdi3+0x15e>
10017bcc:	07d9      	lsls	r1, r3, #31
10017bce:	0856      	lsrs	r6, r2, #1
10017bd0:	430e      	orrs	r6, r1
10017bd2:	085f      	lsrs	r7, r3, #1
10017bd4:	4661      	mov	r1, ip
10017bd6:	2201      	movs	r2, #1
10017bd8:	2300      	movs	r3, #0
10017bda:	e00c      	b.n	10017bf6 <__divdi3+0xc6>
10017bdc:	42af      	cmp	r7, r5
10017bde:	d101      	bne.n	10017be4 <__divdi3+0xb4>
10017be0:	42a6      	cmp	r6, r4
10017be2:	d80a      	bhi.n	10017bfa <__divdi3+0xca>
10017be4:	1ba4      	subs	r4, r4, r6
10017be6:	41bd      	sbcs	r5, r7
10017be8:	1924      	adds	r4, r4, r4
10017bea:	416d      	adcs	r5, r5
10017bec:	3901      	subs	r1, #1
10017bee:	18a4      	adds	r4, r4, r2
10017bf0:	415d      	adcs	r5, r3
10017bf2:	2900      	cmp	r1, #0
10017bf4:	d006      	beq.n	10017c04 <__divdi3+0xd4>
10017bf6:	42af      	cmp	r7, r5
10017bf8:	d9f0      	bls.n	10017bdc <__divdi3+0xac>
10017bfa:	3901      	subs	r1, #1
10017bfc:	1924      	adds	r4, r4, r4
10017bfe:	416d      	adcs	r5, r5
10017c00:	2900      	cmp	r1, #0
10017c02:	d1f8      	bne.n	10017bf6 <__divdi3+0xc6>
10017c04:	465b      	mov	r3, fp
10017c06:	9800      	ldr	r0, [sp, #0]
10017c08:	9901      	ldr	r1, [sp, #4]
10017c0a:	1900      	adds	r0, r0, r4
10017c0c:	4169      	adcs	r1, r5
10017c0e:	2b00      	cmp	r3, #0
10017c10:	db4c      	blt.n	10017cac <__divdi3+0x17c>
10017c12:	002e      	movs	r6, r5
10017c14:	40de      	lsrs	r6, r3
10017c16:	4663      	mov	r3, ip
10017c18:	002c      	movs	r4, r5
10017c1a:	40dc      	lsrs	r4, r3
10017c1c:	465b      	mov	r3, fp
10017c1e:	2b00      	cmp	r3, #0
10017c20:	db5a      	blt.n	10017cd8 <__divdi3+0x1a8>
10017c22:	0034      	movs	r4, r6
10017c24:	409c      	lsls	r4, r3
10017c26:	0023      	movs	r3, r4
10017c28:	4664      	mov	r4, ip
10017c2a:	40a6      	lsls	r6, r4
10017c2c:	0032      	movs	r2, r6
10017c2e:	1a80      	subs	r0, r0, r2
10017c30:	4199      	sbcs	r1, r3
10017c32:	e003      	b.n	10017c3c <__divdi3+0x10c>
10017c34:	42b0      	cmp	r0, r6
10017c36:	d996      	bls.n	10017b66 <__divdi3+0x36>
10017c38:	2000      	movs	r0, #0
10017c3a:	2100      	movs	r1, #0
10017c3c:	4653      	mov	r3, sl
10017c3e:	2b00      	cmp	r3, #0
10017c40:	d004      	beq.n	10017c4c <__divdi3+0x11c>
10017c42:	0003      	movs	r3, r0
10017c44:	000c      	movs	r4, r1
10017c46:	2100      	movs	r1, #0
10017c48:	4258      	negs	r0, r3
10017c4a:	41a1      	sbcs	r1, r4
10017c4c:	b003      	add	sp, #12
10017c4e:	bc3c      	pop	{r2, r3, r4, r5}
10017c50:	4690      	mov	r8, r2
10017c52:	4699      	mov	r9, r3
10017c54:	46a2      	mov	sl, r4
10017c56:	46ab      	mov	fp, r5
10017c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
10017c5a:	4653      	mov	r3, sl
10017c5c:	43db      	mvns	r3, r3
10017c5e:	000c      	movs	r4, r1
10017c60:	469a      	mov	sl, r3
10017c62:	0013      	movs	r3, r2
10017c64:	2100      	movs	r1, #0
10017c66:	4258      	negs	r0, r3
10017c68:	41a1      	sbcs	r1, r4
10017c6a:	e775      	b.n	10017b58 <__divdi3+0x28>
10017c6c:	2700      	movs	r7, #0
10017c6e:	4246      	negs	r6, r0
10017c70:	418f      	sbcs	r7, r1
10017c72:	2101      	movs	r1, #1
10017c74:	4249      	negs	r1, r1
10017c76:	468a      	mov	sl, r1
10017c78:	e769      	b.n	10017b4e <__divdi3+0x1e>
10017c7a:	42b1      	cmp	r1, r6
10017c7c:	d800      	bhi.n	10017c80 <__divdi3+0x150>
10017c7e:	e78e      	b.n	10017b9e <__divdi3+0x6e>
10017c80:	2100      	movs	r1, #0
10017c82:	2000      	movs	r0, #0
10017c84:	9000      	str	r0, [sp, #0]
10017c86:	9101      	str	r1, [sp, #4]
10017c88:	4661      	mov	r1, ip
10017c8a:	2900      	cmp	r1, #0
10017c8c:	d19e      	bne.n	10017bcc <__divdi3+0x9c>
10017c8e:	9800      	ldr	r0, [sp, #0]
10017c90:	9901      	ldr	r1, [sp, #4]
10017c92:	e7d3      	b.n	10017c3c <__divdi3+0x10c>
10017c94:	4662      	mov	r2, ip
10017c96:	4640      	mov	r0, r8
10017c98:	2320      	movs	r3, #32
10017c9a:	4649      	mov	r1, r9
10017c9c:	4090      	lsls	r0, r2
10017c9e:	1a9b      	subs	r3, r3, r2
10017ca0:	40d9      	lsrs	r1, r3
10017ca2:	0003      	movs	r3, r0
10017ca4:	9100      	str	r1, [sp, #0]
10017ca6:	9900      	ldr	r1, [sp, #0]
10017ca8:	430b      	orrs	r3, r1
10017caa:	e770      	b.n	10017b8e <__divdi3+0x5e>
10017cac:	4662      	mov	r2, ip
10017cae:	2320      	movs	r3, #32
10017cb0:	1a9b      	subs	r3, r3, r2
10017cb2:	002a      	movs	r2, r5
10017cb4:	409a      	lsls	r2, r3
10017cb6:	0026      	movs	r6, r4
10017cb8:	0013      	movs	r3, r2
10017cba:	4662      	mov	r2, ip
10017cbc:	40d6      	lsrs	r6, r2
10017cbe:	431e      	orrs	r6, r3
10017cc0:	e7a9      	b.n	10017c16 <__divdi3+0xe6>
10017cc2:	4661      	mov	r1, ip
10017cc4:	2620      	movs	r6, #32
10017cc6:	2701      	movs	r7, #1
10017cc8:	1a76      	subs	r6, r6, r1
10017cca:	2000      	movs	r0, #0
10017ccc:	2100      	movs	r1, #0
10017cce:	40f7      	lsrs	r7, r6
10017cd0:	9000      	str	r0, [sp, #0]
10017cd2:	9101      	str	r1, [sp, #4]
10017cd4:	9701      	str	r7, [sp, #4]
10017cd6:	e772      	b.n	10017bbe <__divdi3+0x8e>
10017cd8:	4662      	mov	r2, ip
10017cda:	2320      	movs	r3, #32
10017cdc:	0035      	movs	r5, r6
10017cde:	4094      	lsls	r4, r2
10017ce0:	1a9b      	subs	r3, r3, r2
10017ce2:	40dd      	lsrs	r5, r3
10017ce4:	0023      	movs	r3, r4
10017ce6:	432b      	orrs	r3, r5
10017ce8:	e79e      	b.n	10017c28 <__divdi3+0xf8>
10017cea:	46c0      	nop			; (mov r8, r8)

10017cec <__clzdi2>:
10017cec:	b510      	push	{r4, lr}
10017cee:	2900      	cmp	r1, #0
10017cf0:	d103      	bne.n	10017cfa <__clzdi2+0xe>
10017cf2:	f7ff feff 	bl	10017af4 <__clzsi2>
10017cf6:	3020      	adds	r0, #32
10017cf8:	e002      	b.n	10017d00 <__clzdi2+0x14>
10017cfa:	1c08      	adds	r0, r1, #0
10017cfc:	f7ff fefa 	bl	10017af4 <__clzsi2>
10017d00:	bd10      	pop	{r4, pc}
10017d02:	46c0      	nop			; (mov r8, r8)

10017d04 <__errno>:
10017d04:	4b01      	ldr	r3, [pc, #4]	; (10017d0c <__errno+0x8>)
10017d06:	6818      	ldr	r0, [r3, #0]
10017d08:	4770      	bx	lr
10017d0a:	46c0      	nop			; (mov r8, r8)
10017d0c:	1001a558 	.word	0x1001a558

10017d10 <__libc_init_array>:
10017d10:	4b0e      	ldr	r3, [pc, #56]	; (10017d4c <__libc_init_array+0x3c>)
10017d12:	b570      	push	{r4, r5, r6, lr}
10017d14:	2500      	movs	r5, #0
10017d16:	001e      	movs	r6, r3
10017d18:	4c0d      	ldr	r4, [pc, #52]	; (10017d50 <__libc_init_array+0x40>)
10017d1a:	1ae4      	subs	r4, r4, r3
10017d1c:	10a4      	asrs	r4, r4, #2
10017d1e:	42a5      	cmp	r5, r4
10017d20:	d004      	beq.n	10017d2c <__libc_init_array+0x1c>
10017d22:	00ab      	lsls	r3, r5, #2
10017d24:	58f3      	ldr	r3, [r6, r3]
10017d26:	4798      	blx	r3
10017d28:	3501      	adds	r5, #1
10017d2a:	e7f8      	b.n	10017d1e <__libc_init_array+0xe>
10017d2c:	f002 fbac 	bl	1001a488 <_init>
10017d30:	4b08      	ldr	r3, [pc, #32]	; (10017d54 <__libc_init_array+0x44>)
10017d32:	2500      	movs	r5, #0
10017d34:	001e      	movs	r6, r3
10017d36:	4c08      	ldr	r4, [pc, #32]	; (10017d58 <__libc_init_array+0x48>)
10017d38:	1ae4      	subs	r4, r4, r3
10017d3a:	10a4      	asrs	r4, r4, #2
10017d3c:	42a5      	cmp	r5, r4
10017d3e:	d004      	beq.n	10017d4a <__libc_init_array+0x3a>
10017d40:	00ab      	lsls	r3, r5, #2
10017d42:	58f3      	ldr	r3, [r6, r3]
10017d44:	4798      	blx	r3
10017d46:	3501      	adds	r5, #1
10017d48:	e7f8      	b.n	10017d3c <__libc_init_array+0x2c>
10017d4a:	bd70      	pop	{r4, r5, r6, pc}
10017d4c:	1001a494 	.word	0x1001a494
10017d50:	1001a494 	.word	0x1001a494
10017d54:	1001a494 	.word	0x1001a494
10017d58:	1001a498 	.word	0x1001a498

10017d5c <malloc>:
10017d5c:	b510      	push	{r4, lr}
10017d5e:	4b03      	ldr	r3, [pc, #12]	; (10017d6c <malloc+0x10>)
10017d60:	0001      	movs	r1, r0
10017d62:	6818      	ldr	r0, [r3, #0]
10017d64:	f000 f880 	bl	10017e68 <_malloc_r>
10017d68:	bd10      	pop	{r4, pc}
10017d6a:	46c0      	nop			; (mov r8, r8)
10017d6c:	1001a558 	.word	0x1001a558

10017d70 <memcmp>:
10017d70:	b530      	push	{r4, r5, lr}
10017d72:	2400      	movs	r4, #0
10017d74:	42a2      	cmp	r2, r4
10017d76:	d008      	beq.n	10017d8a <memcmp+0x1a>
10017d78:	5d03      	ldrb	r3, [r0, r4]
10017d7a:	1c65      	adds	r5, r4, #1
10017d7c:	5d0c      	ldrb	r4, [r1, r4]
10017d7e:	42a3      	cmp	r3, r4
10017d80:	d001      	beq.n	10017d86 <memcmp+0x16>
10017d82:	1b18      	subs	r0, r3, r4
10017d84:	e002      	b.n	10017d8c <memcmp+0x1c>
10017d86:	002c      	movs	r4, r5
10017d88:	e7f4      	b.n	10017d74 <memcmp+0x4>
10017d8a:	2000      	movs	r0, #0
10017d8c:	bd30      	pop	{r4, r5, pc}

10017d8e <memcpy>:
10017d8e:	2300      	movs	r3, #0
10017d90:	b510      	push	{r4, lr}
10017d92:	429a      	cmp	r2, r3
10017d94:	d003      	beq.n	10017d9e <memcpy+0x10>
10017d96:	5ccc      	ldrb	r4, [r1, r3]
10017d98:	54c4      	strb	r4, [r0, r3]
10017d9a:	3301      	adds	r3, #1
10017d9c:	e7f9      	b.n	10017d92 <memcpy+0x4>
10017d9e:	bd10      	pop	{r4, pc}

10017da0 <memmove>:
10017da0:	b510      	push	{r4, lr}
10017da2:	4288      	cmp	r0, r1
10017da4:	d902      	bls.n	10017dac <memmove+0xc>
10017da6:	188b      	adds	r3, r1, r2
10017da8:	4298      	cmp	r0, r3
10017daa:	d301      	bcc.n	10017db0 <memmove+0x10>
10017dac:	2300      	movs	r3, #0
10017dae:	e005      	b.n	10017dbc <memmove+0x1c>
10017db0:	1a9b      	subs	r3, r3, r2
10017db2:	3a01      	subs	r2, #1
10017db4:	d308      	bcc.n	10017dc8 <memmove+0x28>
10017db6:	5c99      	ldrb	r1, [r3, r2]
10017db8:	5481      	strb	r1, [r0, r2]
10017dba:	e7fa      	b.n	10017db2 <memmove+0x12>
10017dbc:	4293      	cmp	r3, r2
10017dbe:	d003      	beq.n	10017dc8 <memmove+0x28>
10017dc0:	5ccc      	ldrb	r4, [r1, r3]
10017dc2:	54c4      	strb	r4, [r0, r3]
10017dc4:	3301      	adds	r3, #1
10017dc6:	e7f9      	b.n	10017dbc <memmove+0x1c>
10017dc8:	bd10      	pop	{r4, pc}

10017dca <memset>:
10017dca:	0003      	movs	r3, r0
10017dcc:	1882      	adds	r2, r0, r2
10017dce:	4293      	cmp	r3, r2
10017dd0:	d002      	beq.n	10017dd8 <memset+0xe>
10017dd2:	7019      	strb	r1, [r3, #0]
10017dd4:	3301      	adds	r3, #1
10017dd6:	e7fa      	b.n	10017dce <memset+0x4>
10017dd8:	4770      	bx	lr
	...

10017ddc <_free_r>:
10017ddc:	b530      	push	{r4, r5, lr}
10017dde:	2900      	cmp	r1, #0
10017de0:	d03e      	beq.n	10017e60 <_free_r+0x84>
10017de2:	3904      	subs	r1, #4
10017de4:	680b      	ldr	r3, [r1, #0]
10017de6:	2b00      	cmp	r3, #0
10017de8:	da00      	bge.n	10017dec <_free_r+0x10>
10017dea:	18c9      	adds	r1, r1, r3
10017dec:	4a1d      	ldr	r2, [pc, #116]	; (10017e64 <_free_r+0x88>)
10017dee:	6813      	ldr	r3, [r2, #0]
10017df0:	0014      	movs	r4, r2
10017df2:	2b00      	cmp	r3, #0
10017df4:	d102      	bne.n	10017dfc <_free_r+0x20>
10017df6:	604b      	str	r3, [r1, #4]
10017df8:	6011      	str	r1, [r2, #0]
10017dfa:	e031      	b.n	10017e60 <_free_r+0x84>
10017dfc:	428b      	cmp	r3, r1
10017dfe:	d90d      	bls.n	10017e1c <_free_r+0x40>
10017e00:	680a      	ldr	r2, [r1, #0]
10017e02:	1888      	adds	r0, r1, r2
10017e04:	4283      	cmp	r3, r0
10017e06:	d103      	bne.n	10017e10 <_free_r+0x34>
10017e08:	6818      	ldr	r0, [r3, #0]
10017e0a:	685b      	ldr	r3, [r3, #4]
10017e0c:	1882      	adds	r2, r0, r2
10017e0e:	600a      	str	r2, [r1, #0]
10017e10:	604b      	str	r3, [r1, #4]
10017e12:	6021      	str	r1, [r4, #0]
10017e14:	e024      	b.n	10017e60 <_free_r+0x84>
10017e16:	428a      	cmp	r2, r1
10017e18:	d803      	bhi.n	10017e22 <_free_r+0x46>
10017e1a:	0013      	movs	r3, r2
10017e1c:	685a      	ldr	r2, [r3, #4]
10017e1e:	2a00      	cmp	r2, #0
10017e20:	d1f9      	bne.n	10017e16 <_free_r+0x3a>
10017e22:	681d      	ldr	r5, [r3, #0]
10017e24:	195c      	adds	r4, r3, r5
10017e26:	428c      	cmp	r4, r1
10017e28:	d10b      	bne.n	10017e42 <_free_r+0x66>
10017e2a:	6809      	ldr	r1, [r1, #0]
10017e2c:	1869      	adds	r1, r5, r1
10017e2e:	1858      	adds	r0, r3, r1
10017e30:	6019      	str	r1, [r3, #0]
10017e32:	4282      	cmp	r2, r0
10017e34:	d114      	bne.n	10017e60 <_free_r+0x84>
10017e36:	6810      	ldr	r0, [r2, #0]
10017e38:	6852      	ldr	r2, [r2, #4]
10017e3a:	1841      	adds	r1, r0, r1
10017e3c:	6019      	str	r1, [r3, #0]
10017e3e:	605a      	str	r2, [r3, #4]
10017e40:	e00e      	b.n	10017e60 <_free_r+0x84>
10017e42:	428c      	cmp	r4, r1
10017e44:	d902      	bls.n	10017e4c <_free_r+0x70>
10017e46:	230c      	movs	r3, #12
10017e48:	6003      	str	r3, [r0, #0]
10017e4a:	e009      	b.n	10017e60 <_free_r+0x84>
10017e4c:	6808      	ldr	r0, [r1, #0]
10017e4e:	180c      	adds	r4, r1, r0
10017e50:	42a2      	cmp	r2, r4
10017e52:	d103      	bne.n	10017e5c <_free_r+0x80>
10017e54:	6814      	ldr	r4, [r2, #0]
10017e56:	6852      	ldr	r2, [r2, #4]
10017e58:	1820      	adds	r0, r4, r0
10017e5a:	6008      	str	r0, [r1, #0]
10017e5c:	604a      	str	r2, [r1, #4]
10017e5e:	6059      	str	r1, [r3, #4]
10017e60:	bd30      	pop	{r4, r5, pc}
10017e62:	46c0      	nop			; (mov r8, r8)
10017e64:	1001c3ec 	.word	0x1001c3ec

10017e68 <_malloc_r>:
10017e68:	2303      	movs	r3, #3
10017e6a:	b570      	push	{r4, r5, r6, lr}
10017e6c:	1ccd      	adds	r5, r1, #3
10017e6e:	439d      	bics	r5, r3
10017e70:	3508      	adds	r5, #8
10017e72:	0006      	movs	r6, r0
10017e74:	2d0c      	cmp	r5, #12
10017e76:	d201      	bcs.n	10017e7c <_malloc_r+0x14>
10017e78:	250c      	movs	r5, #12
10017e7a:	e005      	b.n	10017e88 <_malloc_r+0x20>
10017e7c:	2d00      	cmp	r5, #0
10017e7e:	da03      	bge.n	10017e88 <_malloc_r+0x20>
10017e80:	230c      	movs	r3, #12
10017e82:	2000      	movs	r0, #0
10017e84:	6033      	str	r3, [r6, #0]
10017e86:	e040      	b.n	10017f0a <_malloc_r+0xa2>
10017e88:	42a9      	cmp	r1, r5
10017e8a:	d8f9      	bhi.n	10017e80 <_malloc_r+0x18>
10017e8c:	4b1f      	ldr	r3, [pc, #124]	; (10017f0c <_malloc_r+0xa4>)
10017e8e:	681c      	ldr	r4, [r3, #0]
10017e90:	001a      	movs	r2, r3
10017e92:	0021      	movs	r1, r4
10017e94:	2900      	cmp	r1, #0
10017e96:	d013      	beq.n	10017ec0 <_malloc_r+0x58>
10017e98:	680b      	ldr	r3, [r1, #0]
10017e9a:	1b5b      	subs	r3, r3, r5
10017e9c:	d40d      	bmi.n	10017eba <_malloc_r+0x52>
10017e9e:	2b0b      	cmp	r3, #11
10017ea0:	d902      	bls.n	10017ea8 <_malloc_r+0x40>
10017ea2:	600b      	str	r3, [r1, #0]
10017ea4:	18cc      	adds	r4, r1, r3
10017ea6:	e01e      	b.n	10017ee6 <_malloc_r+0x7e>
10017ea8:	428c      	cmp	r4, r1
10017eaa:	d102      	bne.n	10017eb2 <_malloc_r+0x4a>
10017eac:	6863      	ldr	r3, [r4, #4]
10017eae:	6013      	str	r3, [r2, #0]
10017eb0:	e01a      	b.n	10017ee8 <_malloc_r+0x80>
10017eb2:	684b      	ldr	r3, [r1, #4]
10017eb4:	6063      	str	r3, [r4, #4]
10017eb6:	000c      	movs	r4, r1
10017eb8:	e016      	b.n	10017ee8 <_malloc_r+0x80>
10017eba:	000c      	movs	r4, r1
10017ebc:	6849      	ldr	r1, [r1, #4]
10017ebe:	e7e9      	b.n	10017e94 <_malloc_r+0x2c>
10017ec0:	4c13      	ldr	r4, [pc, #76]	; (10017f10 <_malloc_r+0xa8>)
10017ec2:	6823      	ldr	r3, [r4, #0]
10017ec4:	2b00      	cmp	r3, #0
10017ec6:	d103      	bne.n	10017ed0 <_malloc_r+0x68>
10017ec8:	0030      	movs	r0, r6
10017eca:	f000 f8f9 	bl	100180c0 <_sbrk_r>
10017ece:	6020      	str	r0, [r4, #0]
10017ed0:	0029      	movs	r1, r5
10017ed2:	0030      	movs	r0, r6
10017ed4:	f000 f8f4 	bl	100180c0 <_sbrk_r>
10017ed8:	1c43      	adds	r3, r0, #1
10017eda:	d0d1      	beq.n	10017e80 <_malloc_r+0x18>
10017edc:	2303      	movs	r3, #3
10017ede:	1cc4      	adds	r4, r0, #3
10017ee0:	439c      	bics	r4, r3
10017ee2:	42a0      	cmp	r0, r4
10017ee4:	d10a      	bne.n	10017efc <_malloc_r+0x94>
10017ee6:	6025      	str	r5, [r4, #0]
10017ee8:	0020      	movs	r0, r4
10017eea:	2207      	movs	r2, #7
10017eec:	300b      	adds	r0, #11
10017eee:	1d23      	adds	r3, r4, #4
10017ef0:	4390      	bics	r0, r2
10017ef2:	1ac3      	subs	r3, r0, r3
10017ef4:	d009      	beq.n	10017f0a <_malloc_r+0xa2>
10017ef6:	425a      	negs	r2, r3
10017ef8:	50e2      	str	r2, [r4, r3]
10017efa:	e006      	b.n	10017f0a <_malloc_r+0xa2>
10017efc:	1a21      	subs	r1, r4, r0
10017efe:	0030      	movs	r0, r6
10017f00:	f000 f8de 	bl	100180c0 <_sbrk_r>
10017f04:	1c43      	adds	r3, r0, #1
10017f06:	d1ee      	bne.n	10017ee6 <_malloc_r+0x7e>
10017f08:	e7ba      	b.n	10017e80 <_malloc_r+0x18>
10017f0a:	bd70      	pop	{r4, r5, r6, pc}
10017f0c:	1001c3ec 	.word	0x1001c3ec
10017f10:	1001c3e8 	.word	0x1001c3e8

10017f14 <iprintf>:
10017f14:	b40f      	push	{r0, r1, r2, r3}
10017f16:	4b0b      	ldr	r3, [pc, #44]	; (10017f44 <iprintf+0x30>)
10017f18:	b513      	push	{r0, r1, r4, lr}
10017f1a:	681c      	ldr	r4, [r3, #0]
10017f1c:	2c00      	cmp	r4, #0
10017f1e:	d005      	beq.n	10017f2c <iprintf+0x18>
10017f20:	69a3      	ldr	r3, [r4, #24]
10017f22:	2b00      	cmp	r3, #0
10017f24:	d102      	bne.n	10017f2c <iprintf+0x18>
10017f26:	0020      	movs	r0, r4
10017f28:	f000 fb58 	bl	100185dc <__sinit>
10017f2c:	ab05      	add	r3, sp, #20
10017f2e:	9a04      	ldr	r2, [sp, #16]
10017f30:	68a1      	ldr	r1, [r4, #8]
10017f32:	0020      	movs	r0, r4
10017f34:	9301      	str	r3, [sp, #4]
10017f36:	f000 fc71 	bl	1001881c <_vfiprintf_r>
10017f3a:	bc16      	pop	{r1, r2, r4}
10017f3c:	bc08      	pop	{r3}
10017f3e:	b004      	add	sp, #16
10017f40:	4718      	bx	r3
10017f42:	46c0      	nop			; (mov r8, r8)
10017f44:	1001a558 	.word	0x1001a558

10017f48 <putchar>:
10017f48:	4b08      	ldr	r3, [pc, #32]	; (10017f6c <putchar+0x24>)
10017f4a:	b570      	push	{r4, r5, r6, lr}
10017f4c:	681c      	ldr	r4, [r3, #0]
10017f4e:	0005      	movs	r5, r0
10017f50:	2c00      	cmp	r4, #0
10017f52:	d005      	beq.n	10017f60 <putchar+0x18>
10017f54:	69a3      	ldr	r3, [r4, #24]
10017f56:	2b00      	cmp	r3, #0
10017f58:	d102      	bne.n	10017f60 <putchar+0x18>
10017f5a:	0020      	movs	r0, r4
10017f5c:	f000 fb3e 	bl	100185dc <__sinit>
10017f60:	0029      	movs	r1, r5
10017f62:	68a2      	ldr	r2, [r4, #8]
10017f64:	0020      	movs	r0, r4
10017f66:	f000 ff05 	bl	10018d74 <_putc_r>
10017f6a:	bd70      	pop	{r4, r5, r6, pc}
10017f6c:	1001a558 	.word	0x1001a558

10017f70 <_puts_r>:
10017f70:	b570      	push	{r4, r5, r6, lr}
10017f72:	0005      	movs	r5, r0
10017f74:	000e      	movs	r6, r1
10017f76:	2800      	cmp	r0, #0
10017f78:	d004      	beq.n	10017f84 <_puts_r+0x14>
10017f7a:	6983      	ldr	r3, [r0, #24]
10017f7c:	2b00      	cmp	r3, #0
10017f7e:	d101      	bne.n	10017f84 <_puts_r+0x14>
10017f80:	f000 fb2c 	bl	100185dc <__sinit>
10017f84:	69ab      	ldr	r3, [r5, #24]
10017f86:	68ac      	ldr	r4, [r5, #8]
10017f88:	2b00      	cmp	r3, #0
10017f8a:	d102      	bne.n	10017f92 <_puts_r+0x22>
10017f8c:	0028      	movs	r0, r5
10017f8e:	f000 fb25 	bl	100185dc <__sinit>
10017f92:	4b25      	ldr	r3, [pc, #148]	; (10018028 <_puts_r+0xb8>)
10017f94:	429c      	cmp	r4, r3
10017f96:	d101      	bne.n	10017f9c <_puts_r+0x2c>
10017f98:	686c      	ldr	r4, [r5, #4]
10017f9a:	e008      	b.n	10017fae <_puts_r+0x3e>
10017f9c:	4b23      	ldr	r3, [pc, #140]	; (1001802c <_puts_r+0xbc>)
10017f9e:	429c      	cmp	r4, r3
10017fa0:	d101      	bne.n	10017fa6 <_puts_r+0x36>
10017fa2:	68ac      	ldr	r4, [r5, #8]
10017fa4:	e003      	b.n	10017fae <_puts_r+0x3e>
10017fa6:	4b22      	ldr	r3, [pc, #136]	; (10018030 <_puts_r+0xc0>)
10017fa8:	429c      	cmp	r4, r3
10017faa:	d100      	bne.n	10017fae <_puts_r+0x3e>
10017fac:	68ec      	ldr	r4, [r5, #12]
10017fae:	89a3      	ldrh	r3, [r4, #12]
10017fb0:	071b      	lsls	r3, r3, #28
10017fb2:	d502      	bpl.n	10017fba <_puts_r+0x4a>
10017fb4:	6923      	ldr	r3, [r4, #16]
10017fb6:	2b00      	cmp	r3, #0
10017fb8:	d111      	bne.n	10017fde <_puts_r+0x6e>
10017fba:	0021      	movs	r1, r4
10017fbc:	0028      	movs	r0, r5
10017fbe:	f000 f9a3 	bl	10018308 <__swsetup_r>
10017fc2:	2800      	cmp	r0, #0
10017fc4:	d00b      	beq.n	10017fde <_puts_r+0x6e>
10017fc6:	2001      	movs	r0, #1
10017fc8:	4240      	negs	r0, r0
10017fca:	e02b      	b.n	10018024 <_puts_r+0xb4>
10017fcc:	3b01      	subs	r3, #1
10017fce:	3601      	adds	r6, #1
10017fd0:	60a3      	str	r3, [r4, #8]
10017fd2:	2b00      	cmp	r3, #0
10017fd4:	db08      	blt.n	10017fe8 <_puts_r+0x78>
10017fd6:	6823      	ldr	r3, [r4, #0]
10017fd8:	1c5a      	adds	r2, r3, #1
10017fda:	6022      	str	r2, [r4, #0]
10017fdc:	7019      	strb	r1, [r3, #0]
10017fde:	7831      	ldrb	r1, [r6, #0]
10017fe0:	68a3      	ldr	r3, [r4, #8]
10017fe2:	2900      	cmp	r1, #0
10017fe4:	d1f2      	bne.n	10017fcc <_puts_r+0x5c>
10017fe6:	e00b      	b.n	10018000 <_puts_r+0x90>
10017fe8:	69a2      	ldr	r2, [r4, #24]
10017fea:	4293      	cmp	r3, r2
10017fec:	db01      	blt.n	10017ff2 <_puts_r+0x82>
10017fee:	290a      	cmp	r1, #10
10017ff0:	d1f1      	bne.n	10017fd6 <_puts_r+0x66>
10017ff2:	0022      	movs	r2, r4
10017ff4:	0028      	movs	r0, r5
10017ff6:	f000 f92f 	bl	10018258 <__swbuf_r>
10017ffa:	1c43      	adds	r3, r0, #1
10017ffc:	d1ef      	bne.n	10017fde <_puts_r+0x6e>
10017ffe:	e7e2      	b.n	10017fc6 <_puts_r+0x56>
10018000:	3b01      	subs	r3, #1
10018002:	60a3      	str	r3, [r4, #8]
10018004:	2b00      	cmp	r3, #0
10018006:	da08      	bge.n	1001801a <_puts_r+0xaa>
10018008:	0022      	movs	r2, r4
1001800a:	310a      	adds	r1, #10
1001800c:	0028      	movs	r0, r5
1001800e:	f000 f923 	bl	10018258 <__swbuf_r>
10018012:	1c43      	adds	r3, r0, #1
10018014:	d0d7      	beq.n	10017fc6 <_puts_r+0x56>
10018016:	200a      	movs	r0, #10
10018018:	e004      	b.n	10018024 <_puts_r+0xb4>
1001801a:	200a      	movs	r0, #10
1001801c:	6823      	ldr	r3, [r4, #0]
1001801e:	1c5a      	adds	r2, r3, #1
10018020:	6022      	str	r2, [r4, #0]
10018022:	7018      	strb	r0, [r3, #0]
10018024:	bd70      	pop	{r4, r5, r6, pc}
10018026:	46c0      	nop			; (mov r8, r8)
10018028:	1001a3f4 	.word	0x1001a3f4
1001802c:	1001a414 	.word	0x1001a414
10018030:	1001a434 	.word	0x1001a434

10018034 <puts>:
10018034:	b510      	push	{r4, lr}
10018036:	4b03      	ldr	r3, [pc, #12]	; (10018044 <puts+0x10>)
10018038:	0001      	movs	r1, r0
1001803a:	6818      	ldr	r0, [r3, #0]
1001803c:	f7ff ff98 	bl	10017f70 <_puts_r>
10018040:	bd10      	pop	{r4, pc}
10018042:	46c0      	nop			; (mov r8, r8)
10018044:	1001a558 	.word	0x1001a558

10018048 <rand>:
10018048:	4b15      	ldr	r3, [pc, #84]	; (100180a0 <rand+0x58>)
1001804a:	b510      	push	{r4, lr}
1001804c:	681c      	ldr	r4, [r3, #0]
1001804e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10018050:	2b00      	cmp	r3, #0
10018052:	d115      	bne.n	10018080 <rand+0x38>
10018054:	2018      	movs	r0, #24
10018056:	f7ff fe81 	bl	10017d5c <malloc>
1001805a:	4b12      	ldr	r3, [pc, #72]	; (100180a4 <rand+0x5c>)
1001805c:	63a0      	str	r0, [r4, #56]	; 0x38
1001805e:	8003      	strh	r3, [r0, #0]
10018060:	4b11      	ldr	r3, [pc, #68]	; (100180a8 <rand+0x60>)
10018062:	2201      	movs	r2, #1
10018064:	8043      	strh	r3, [r0, #2]
10018066:	4b11      	ldr	r3, [pc, #68]	; (100180ac <rand+0x64>)
10018068:	8083      	strh	r3, [r0, #4]
1001806a:	4b11      	ldr	r3, [pc, #68]	; (100180b0 <rand+0x68>)
1001806c:	80c3      	strh	r3, [r0, #6]
1001806e:	4b11      	ldr	r3, [pc, #68]	; (100180b4 <rand+0x6c>)
10018070:	8103      	strh	r3, [r0, #8]
10018072:	2305      	movs	r3, #5
10018074:	8143      	strh	r3, [r0, #10]
10018076:	3306      	adds	r3, #6
10018078:	8183      	strh	r3, [r0, #12]
1001807a:	2300      	movs	r3, #0
1001807c:	6102      	str	r2, [r0, #16]
1001807e:	6143      	str	r3, [r0, #20]
10018080:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10018082:	4a0d      	ldr	r2, [pc, #52]	; (100180b8 <rand+0x70>)
10018084:	6920      	ldr	r0, [r4, #16]
10018086:	6961      	ldr	r1, [r4, #20]
10018088:	4b0c      	ldr	r3, [pc, #48]	; (100180bc <rand+0x74>)
1001808a:	f7fc ff05 	bl	10014e98 <__aeabi_lmul>
1001808e:	2201      	movs	r2, #1
10018090:	2300      	movs	r3, #0
10018092:	1880      	adds	r0, r0, r2
10018094:	4159      	adcs	r1, r3
10018096:	6120      	str	r0, [r4, #16]
10018098:	6161      	str	r1, [r4, #20]
1001809a:	0048      	lsls	r0, r1, #1
1001809c:	0840      	lsrs	r0, r0, #1
1001809e:	bd10      	pop	{r4, pc}
100180a0:	1001a558 	.word	0x1001a558
100180a4:	0000330e 	.word	0x0000330e
100180a8:	ffffabcd 	.word	0xffffabcd
100180ac:	00001234 	.word	0x00001234
100180b0:	ffffe66d 	.word	0xffffe66d
100180b4:	ffffdeec 	.word	0xffffdeec
100180b8:	4c957f2d 	.word	0x4c957f2d
100180bc:	5851f42d 	.word	0x5851f42d

100180c0 <_sbrk_r>:
100180c0:	2300      	movs	r3, #0
100180c2:	b570      	push	{r4, r5, r6, lr}
100180c4:	4c06      	ldr	r4, [pc, #24]	; (100180e0 <_sbrk_r+0x20>)
100180c6:	0005      	movs	r5, r0
100180c8:	0008      	movs	r0, r1
100180ca:	6023      	str	r3, [r4, #0]
100180cc:	f7f5 fc18 	bl	1000d900 <_sbrk>
100180d0:	1c43      	adds	r3, r0, #1
100180d2:	d103      	bne.n	100180dc <_sbrk_r+0x1c>
100180d4:	6823      	ldr	r3, [r4, #0]
100180d6:	2b00      	cmp	r3, #0
100180d8:	d000      	beq.n	100180dc <_sbrk_r+0x1c>
100180da:	602b      	str	r3, [r5, #0]
100180dc:	bd70      	pop	{r4, r5, r6, pc}
100180de:	46c0      	nop			; (mov r8, r8)
100180e0:	1001d990 	.word	0x1001d990

100180e4 <setbuf>:
100180e4:	424a      	negs	r2, r1
100180e6:	414a      	adcs	r2, r1
100180e8:	2380      	movs	r3, #128	; 0x80
100180ea:	b510      	push	{r4, lr}
100180ec:	0052      	lsls	r2, r2, #1
100180ee:	00db      	lsls	r3, r3, #3
100180f0:	f000 f802 	bl	100180f8 <setvbuf>
100180f4:	bd10      	pop	{r4, pc}
	...

100180f8 <setvbuf>:
100180f8:	b5f0      	push	{r4, r5, r6, r7, lr}
100180fa:	001d      	movs	r5, r3
100180fc:	4b51      	ldr	r3, [pc, #324]	; (10018244 <setvbuf+0x14c>)
100180fe:	b085      	sub	sp, #20
10018100:	681e      	ldr	r6, [r3, #0]
10018102:	0004      	movs	r4, r0
10018104:	000f      	movs	r7, r1
10018106:	9200      	str	r2, [sp, #0]
10018108:	2e00      	cmp	r6, #0
1001810a:	d005      	beq.n	10018118 <setvbuf+0x20>
1001810c:	69b3      	ldr	r3, [r6, #24]
1001810e:	2b00      	cmp	r3, #0
10018110:	d102      	bne.n	10018118 <setvbuf+0x20>
10018112:	0030      	movs	r0, r6
10018114:	f000 fa62 	bl	100185dc <__sinit>
10018118:	4b4b      	ldr	r3, [pc, #300]	; (10018248 <setvbuf+0x150>)
1001811a:	429c      	cmp	r4, r3
1001811c:	d101      	bne.n	10018122 <setvbuf+0x2a>
1001811e:	6874      	ldr	r4, [r6, #4]
10018120:	e008      	b.n	10018134 <setvbuf+0x3c>
10018122:	4b4a      	ldr	r3, [pc, #296]	; (1001824c <setvbuf+0x154>)
10018124:	429c      	cmp	r4, r3
10018126:	d101      	bne.n	1001812c <setvbuf+0x34>
10018128:	68b4      	ldr	r4, [r6, #8]
1001812a:	e003      	b.n	10018134 <setvbuf+0x3c>
1001812c:	4b48      	ldr	r3, [pc, #288]	; (10018250 <setvbuf+0x158>)
1001812e:	429c      	cmp	r4, r3
10018130:	d100      	bne.n	10018134 <setvbuf+0x3c>
10018132:	68f4      	ldr	r4, [r6, #12]
10018134:	9b00      	ldr	r3, [sp, #0]
10018136:	2b02      	cmp	r3, #2
10018138:	d005      	beq.n	10018146 <setvbuf+0x4e>
1001813a:	2b01      	cmp	r3, #1
1001813c:	d900      	bls.n	10018140 <setvbuf+0x48>
1001813e:	e07c      	b.n	1001823a <setvbuf+0x142>
10018140:	2d00      	cmp	r5, #0
10018142:	da00      	bge.n	10018146 <setvbuf+0x4e>
10018144:	e079      	b.n	1001823a <setvbuf+0x142>
10018146:	0021      	movs	r1, r4
10018148:	0030      	movs	r0, r6
1001814a:	f000 f9d9 	bl	10018500 <_fflush_r>
1001814e:	6b61      	ldr	r1, [r4, #52]	; 0x34
10018150:	2900      	cmp	r1, #0
10018152:	d008      	beq.n	10018166 <setvbuf+0x6e>
10018154:	0023      	movs	r3, r4
10018156:	3344      	adds	r3, #68	; 0x44
10018158:	4299      	cmp	r1, r3
1001815a:	d002      	beq.n	10018162 <setvbuf+0x6a>
1001815c:	0030      	movs	r0, r6
1001815e:	f7ff fe3d 	bl	10017ddc <_free_r>
10018162:	2300      	movs	r3, #0
10018164:	6363      	str	r3, [r4, #52]	; 0x34
10018166:	2300      	movs	r3, #0
10018168:	61a3      	str	r3, [r4, #24]
1001816a:	6063      	str	r3, [r4, #4]
1001816c:	89a3      	ldrh	r3, [r4, #12]
1001816e:	061b      	lsls	r3, r3, #24
10018170:	d503      	bpl.n	1001817a <setvbuf+0x82>
10018172:	6921      	ldr	r1, [r4, #16]
10018174:	0030      	movs	r0, r6
10018176:	f7ff fe31 	bl	10017ddc <_free_r>
1001817a:	89a2      	ldrh	r2, [r4, #12]
1001817c:	4b35      	ldr	r3, [pc, #212]	; (10018254 <setvbuf+0x15c>)
1001817e:	4013      	ands	r3, r2
10018180:	81a3      	strh	r3, [r4, #12]
10018182:	9b00      	ldr	r3, [sp, #0]
10018184:	2b02      	cmp	r3, #2
10018186:	d021      	beq.n	100181cc <setvbuf+0xd4>
10018188:	ab03      	add	r3, sp, #12
1001818a:	aa02      	add	r2, sp, #8
1001818c:	0021      	movs	r1, r4
1001818e:	0030      	movs	r0, r6
10018190:	f000 fab8 	bl	10018704 <__swhatbuf_r>
10018194:	89a3      	ldrh	r3, [r4, #12]
10018196:	4318      	orrs	r0, r3
10018198:	81a0      	strh	r0, [r4, #12]
1001819a:	2d00      	cmp	r5, #0
1001819c:	d101      	bne.n	100181a2 <setvbuf+0xaa>
1001819e:	9d02      	ldr	r5, [sp, #8]
100181a0:	e001      	b.n	100181a6 <setvbuf+0xae>
100181a2:	2f00      	cmp	r7, #0
100181a4:	d125      	bne.n	100181f2 <setvbuf+0xfa>
100181a6:	0028      	movs	r0, r5
100181a8:	f7ff fdd8 	bl	10017d5c <malloc>
100181ac:	9501      	str	r5, [sp, #4]
100181ae:	1e07      	subs	r7, r0, #0
100181b0:	d11a      	bne.n	100181e8 <setvbuf+0xf0>
100181b2:	9b02      	ldr	r3, [sp, #8]
100181b4:	9301      	str	r3, [sp, #4]
100181b6:	42ab      	cmp	r3, r5
100181b8:	d102      	bne.n	100181c0 <setvbuf+0xc8>
100181ba:	2001      	movs	r0, #1
100181bc:	4240      	negs	r0, r0
100181be:	e006      	b.n	100181ce <setvbuf+0xd6>
100181c0:	9801      	ldr	r0, [sp, #4]
100181c2:	f7ff fdcb 	bl	10017d5c <malloc>
100181c6:	1e07      	subs	r7, r0, #0
100181c8:	d10e      	bne.n	100181e8 <setvbuf+0xf0>
100181ca:	e7f6      	b.n	100181ba <setvbuf+0xc2>
100181cc:	2000      	movs	r0, #0
100181ce:	2202      	movs	r2, #2
100181d0:	89a3      	ldrh	r3, [r4, #12]
100181d2:	4313      	orrs	r3, r2
100181d4:	81a3      	strh	r3, [r4, #12]
100181d6:	2300      	movs	r3, #0
100181d8:	60a3      	str	r3, [r4, #8]
100181da:	0023      	movs	r3, r4
100181dc:	3347      	adds	r3, #71	; 0x47
100181de:	6023      	str	r3, [r4, #0]
100181e0:	6123      	str	r3, [r4, #16]
100181e2:	2301      	movs	r3, #1
100181e4:	6163      	str	r3, [r4, #20]
100181e6:	e02a      	b.n	1001823e <setvbuf+0x146>
100181e8:	2280      	movs	r2, #128	; 0x80
100181ea:	89a3      	ldrh	r3, [r4, #12]
100181ec:	9d01      	ldr	r5, [sp, #4]
100181ee:	4313      	orrs	r3, r2
100181f0:	81a3      	strh	r3, [r4, #12]
100181f2:	69b3      	ldr	r3, [r6, #24]
100181f4:	2b00      	cmp	r3, #0
100181f6:	d102      	bne.n	100181fe <setvbuf+0x106>
100181f8:	0030      	movs	r0, r6
100181fa:	f000 f9ef 	bl	100185dc <__sinit>
100181fe:	9b00      	ldr	r3, [sp, #0]
10018200:	2b01      	cmp	r3, #1
10018202:	d103      	bne.n	1001820c <setvbuf+0x114>
10018204:	89a3      	ldrh	r3, [r4, #12]
10018206:	9a00      	ldr	r2, [sp, #0]
10018208:	431a      	orrs	r2, r3
1001820a:	81a2      	strh	r2, [r4, #12]
1001820c:	2308      	movs	r3, #8
1001820e:	89a2      	ldrh	r2, [r4, #12]
10018210:	6027      	str	r7, [r4, #0]
10018212:	4013      	ands	r3, r2
10018214:	6127      	str	r7, [r4, #16]
10018216:	6165      	str	r5, [r4, #20]
10018218:	1e18      	subs	r0, r3, #0
1001821a:	d00c      	beq.n	10018236 <setvbuf+0x13e>
1001821c:	2301      	movs	r3, #1
1001821e:	401a      	ands	r2, r3
10018220:	2300      	movs	r3, #0
10018222:	1e10      	subs	r0, r2, #0
10018224:	4298      	cmp	r0, r3
10018226:	d004      	beq.n	10018232 <setvbuf+0x13a>
10018228:	426d      	negs	r5, r5
1001822a:	60a3      	str	r3, [r4, #8]
1001822c:	61a5      	str	r5, [r4, #24]
1001822e:	0018      	movs	r0, r3
10018230:	e005      	b.n	1001823e <setvbuf+0x146>
10018232:	60a5      	str	r5, [r4, #8]
10018234:	e003      	b.n	1001823e <setvbuf+0x146>
10018236:	60a3      	str	r3, [r4, #8]
10018238:	e001      	b.n	1001823e <setvbuf+0x146>
1001823a:	2001      	movs	r0, #1
1001823c:	4240      	negs	r0, r0
1001823e:	b005      	add	sp, #20
10018240:	bdf0      	pop	{r4, r5, r6, r7, pc}
10018242:	46c0      	nop			; (mov r8, r8)
10018244:	1001a558 	.word	0x1001a558
10018248:	1001a3f4 	.word	0x1001a3f4
1001824c:	1001a414 	.word	0x1001a414
10018250:	1001a434 	.word	0x1001a434
10018254:	fffff35c 	.word	0xfffff35c

10018258 <__swbuf_r>:
10018258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001825a:	0005      	movs	r5, r0
1001825c:	000f      	movs	r7, r1
1001825e:	0014      	movs	r4, r2
10018260:	2800      	cmp	r0, #0
10018262:	d004      	beq.n	1001826e <__swbuf_r+0x16>
10018264:	6983      	ldr	r3, [r0, #24]
10018266:	2b00      	cmp	r3, #0
10018268:	d101      	bne.n	1001826e <__swbuf_r+0x16>
1001826a:	f000 f9b7 	bl	100185dc <__sinit>
1001826e:	4b23      	ldr	r3, [pc, #140]	; (100182fc <__swbuf_r+0xa4>)
10018270:	429c      	cmp	r4, r3
10018272:	d101      	bne.n	10018278 <__swbuf_r+0x20>
10018274:	686c      	ldr	r4, [r5, #4]
10018276:	e008      	b.n	1001828a <__swbuf_r+0x32>
10018278:	4b21      	ldr	r3, [pc, #132]	; (10018300 <__swbuf_r+0xa8>)
1001827a:	429c      	cmp	r4, r3
1001827c:	d101      	bne.n	10018282 <__swbuf_r+0x2a>
1001827e:	68ac      	ldr	r4, [r5, #8]
10018280:	e003      	b.n	1001828a <__swbuf_r+0x32>
10018282:	4b20      	ldr	r3, [pc, #128]	; (10018304 <__swbuf_r+0xac>)
10018284:	429c      	cmp	r4, r3
10018286:	d100      	bne.n	1001828a <__swbuf_r+0x32>
10018288:	68ec      	ldr	r4, [r5, #12]
1001828a:	69a3      	ldr	r3, [r4, #24]
1001828c:	60a3      	str	r3, [r4, #8]
1001828e:	89a3      	ldrh	r3, [r4, #12]
10018290:	071b      	lsls	r3, r3, #28
10018292:	d50a      	bpl.n	100182aa <__swbuf_r+0x52>
10018294:	6923      	ldr	r3, [r4, #16]
10018296:	2b00      	cmp	r3, #0
10018298:	d007      	beq.n	100182aa <__swbuf_r+0x52>
1001829a:	6823      	ldr	r3, [r4, #0]
1001829c:	6922      	ldr	r2, [r4, #16]
1001829e:	b2fe      	uxtb	r6, r7
100182a0:	1a98      	subs	r0, r3, r2
100182a2:	6963      	ldr	r3, [r4, #20]
100182a4:	4298      	cmp	r0, r3
100182a6:	db0f      	blt.n	100182c8 <__swbuf_r+0x70>
100182a8:	e008      	b.n	100182bc <__swbuf_r+0x64>
100182aa:	0021      	movs	r1, r4
100182ac:	0028      	movs	r0, r5
100182ae:	f000 f82b 	bl	10018308 <__swsetup_r>
100182b2:	2800      	cmp	r0, #0
100182b4:	d0f1      	beq.n	1001829a <__swbuf_r+0x42>
100182b6:	2001      	movs	r0, #1
100182b8:	4240      	negs	r0, r0
100182ba:	e01d      	b.n	100182f8 <__swbuf_r+0xa0>
100182bc:	0021      	movs	r1, r4
100182be:	0028      	movs	r0, r5
100182c0:	f000 f91e 	bl	10018500 <_fflush_r>
100182c4:	2800      	cmp	r0, #0
100182c6:	d1f6      	bne.n	100182b6 <__swbuf_r+0x5e>
100182c8:	68a3      	ldr	r3, [r4, #8]
100182ca:	3001      	adds	r0, #1
100182cc:	3b01      	subs	r3, #1
100182ce:	60a3      	str	r3, [r4, #8]
100182d0:	6823      	ldr	r3, [r4, #0]
100182d2:	1c5a      	adds	r2, r3, #1
100182d4:	6022      	str	r2, [r4, #0]
100182d6:	701f      	strb	r7, [r3, #0]
100182d8:	6963      	ldr	r3, [r4, #20]
100182da:	4298      	cmp	r0, r3
100182dc:	d005      	beq.n	100182ea <__swbuf_r+0x92>
100182de:	89a3      	ldrh	r3, [r4, #12]
100182e0:	0030      	movs	r0, r6
100182e2:	07db      	lsls	r3, r3, #31
100182e4:	d508      	bpl.n	100182f8 <__swbuf_r+0xa0>
100182e6:	2e0a      	cmp	r6, #10
100182e8:	d106      	bne.n	100182f8 <__swbuf_r+0xa0>
100182ea:	0021      	movs	r1, r4
100182ec:	0028      	movs	r0, r5
100182ee:	f000 f907 	bl	10018500 <_fflush_r>
100182f2:	2800      	cmp	r0, #0
100182f4:	d1df      	bne.n	100182b6 <__swbuf_r+0x5e>
100182f6:	0030      	movs	r0, r6
100182f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100182fa:	46c0      	nop			; (mov r8, r8)
100182fc:	1001a3f4 	.word	0x1001a3f4
10018300:	1001a414 	.word	0x1001a414
10018304:	1001a434 	.word	0x1001a434

10018308 <__swsetup_r>:
10018308:	4b36      	ldr	r3, [pc, #216]	; (100183e4 <__swsetup_r+0xdc>)
1001830a:	b570      	push	{r4, r5, r6, lr}
1001830c:	681d      	ldr	r5, [r3, #0]
1001830e:	0006      	movs	r6, r0
10018310:	000c      	movs	r4, r1
10018312:	2d00      	cmp	r5, #0
10018314:	d005      	beq.n	10018322 <__swsetup_r+0x1a>
10018316:	69ab      	ldr	r3, [r5, #24]
10018318:	2b00      	cmp	r3, #0
1001831a:	d102      	bne.n	10018322 <__swsetup_r+0x1a>
1001831c:	0028      	movs	r0, r5
1001831e:	f000 f95d 	bl	100185dc <__sinit>
10018322:	4b31      	ldr	r3, [pc, #196]	; (100183e8 <__swsetup_r+0xe0>)
10018324:	429c      	cmp	r4, r3
10018326:	d101      	bne.n	1001832c <__swsetup_r+0x24>
10018328:	686c      	ldr	r4, [r5, #4]
1001832a:	e008      	b.n	1001833e <__swsetup_r+0x36>
1001832c:	4b2f      	ldr	r3, [pc, #188]	; (100183ec <__swsetup_r+0xe4>)
1001832e:	429c      	cmp	r4, r3
10018330:	d101      	bne.n	10018336 <__swsetup_r+0x2e>
10018332:	68ac      	ldr	r4, [r5, #8]
10018334:	e003      	b.n	1001833e <__swsetup_r+0x36>
10018336:	4b2e      	ldr	r3, [pc, #184]	; (100183f0 <__swsetup_r+0xe8>)
10018338:	429c      	cmp	r4, r3
1001833a:	d100      	bne.n	1001833e <__swsetup_r+0x36>
1001833c:	68ec      	ldr	r4, [r5, #12]
1001833e:	220c      	movs	r2, #12
10018340:	5ea3      	ldrsh	r3, [r4, r2]
10018342:	b29a      	uxth	r2, r3
10018344:	0711      	lsls	r1, r2, #28
10018346:	d423      	bmi.n	10018390 <__swsetup_r+0x88>
10018348:	06d1      	lsls	r1, r2, #27
1001834a:	d407      	bmi.n	1001835c <__swsetup_r+0x54>
1001834c:	2209      	movs	r2, #9
1001834e:	2001      	movs	r0, #1
10018350:	6032      	str	r2, [r6, #0]
10018352:	3237      	adds	r2, #55	; 0x37
10018354:	4313      	orrs	r3, r2
10018356:	81a3      	strh	r3, [r4, #12]
10018358:	4240      	negs	r0, r0
1001835a:	e042      	b.n	100183e2 <__swsetup_r+0xda>
1001835c:	0753      	lsls	r3, r2, #29
1001835e:	d513      	bpl.n	10018388 <__swsetup_r+0x80>
10018360:	6b61      	ldr	r1, [r4, #52]	; 0x34
10018362:	2900      	cmp	r1, #0
10018364:	d008      	beq.n	10018378 <__swsetup_r+0x70>
10018366:	0023      	movs	r3, r4
10018368:	3344      	adds	r3, #68	; 0x44
1001836a:	4299      	cmp	r1, r3
1001836c:	d002      	beq.n	10018374 <__swsetup_r+0x6c>
1001836e:	0030      	movs	r0, r6
10018370:	f7ff fd34 	bl	10017ddc <_free_r>
10018374:	2300      	movs	r3, #0
10018376:	6363      	str	r3, [r4, #52]	; 0x34
10018378:	2224      	movs	r2, #36	; 0x24
1001837a:	89a3      	ldrh	r3, [r4, #12]
1001837c:	4393      	bics	r3, r2
1001837e:	81a3      	strh	r3, [r4, #12]
10018380:	2300      	movs	r3, #0
10018382:	6063      	str	r3, [r4, #4]
10018384:	6923      	ldr	r3, [r4, #16]
10018386:	6023      	str	r3, [r4, #0]
10018388:	2208      	movs	r2, #8
1001838a:	89a3      	ldrh	r3, [r4, #12]
1001838c:	4313      	orrs	r3, r2
1001838e:	81a3      	strh	r3, [r4, #12]
10018390:	6923      	ldr	r3, [r4, #16]
10018392:	2b00      	cmp	r3, #0
10018394:	d10b      	bne.n	100183ae <__swsetup_r+0xa6>
10018396:	23a0      	movs	r3, #160	; 0xa0
10018398:	89a2      	ldrh	r2, [r4, #12]
1001839a:	009b      	lsls	r3, r3, #2
1001839c:	4013      	ands	r3, r2
1001839e:	2280      	movs	r2, #128	; 0x80
100183a0:	0092      	lsls	r2, r2, #2
100183a2:	4293      	cmp	r3, r2
100183a4:	d003      	beq.n	100183ae <__swsetup_r+0xa6>
100183a6:	0021      	movs	r1, r4
100183a8:	0030      	movs	r0, r6
100183aa:	f000 f9d1 	bl	10018750 <__smakebuf_r>
100183ae:	2301      	movs	r3, #1
100183b0:	89a2      	ldrh	r2, [r4, #12]
100183b2:	4013      	ands	r3, r2
100183b4:	d005      	beq.n	100183c2 <__swsetup_r+0xba>
100183b6:	2300      	movs	r3, #0
100183b8:	60a3      	str	r3, [r4, #8]
100183ba:	6963      	ldr	r3, [r4, #20]
100183bc:	425b      	negs	r3, r3
100183be:	61a3      	str	r3, [r4, #24]
100183c0:	e003      	b.n	100183ca <__swsetup_r+0xc2>
100183c2:	0792      	lsls	r2, r2, #30
100183c4:	d400      	bmi.n	100183c8 <__swsetup_r+0xc0>
100183c6:	6963      	ldr	r3, [r4, #20]
100183c8:	60a3      	str	r3, [r4, #8]
100183ca:	2000      	movs	r0, #0
100183cc:	6923      	ldr	r3, [r4, #16]
100183ce:	4283      	cmp	r3, r0
100183d0:	d107      	bne.n	100183e2 <__swsetup_r+0xda>
100183d2:	220c      	movs	r2, #12
100183d4:	5ea3      	ldrsh	r3, [r4, r2]
100183d6:	061a      	lsls	r2, r3, #24
100183d8:	d503      	bpl.n	100183e2 <__swsetup_r+0xda>
100183da:	2240      	movs	r2, #64	; 0x40
100183dc:	4313      	orrs	r3, r2
100183de:	81a3      	strh	r3, [r4, #12]
100183e0:	3801      	subs	r0, #1
100183e2:	bd70      	pop	{r4, r5, r6, pc}
100183e4:	1001a558 	.word	0x1001a558
100183e8:	1001a3f4 	.word	0x1001a3f4
100183ec:	1001a414 	.word	0x1001a414
100183f0:	1001a434 	.word	0x1001a434

100183f4 <__sflush_r>:
100183f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100183f6:	898a      	ldrh	r2, [r1, #12]
100183f8:	0005      	movs	r5, r0
100183fa:	000c      	movs	r4, r1
100183fc:	0713      	lsls	r3, r2, #28
100183fe:	d45a      	bmi.n	100184b6 <__sflush_r+0xc2>
10018400:	684b      	ldr	r3, [r1, #4]
10018402:	2b00      	cmp	r3, #0
10018404:	dc02      	bgt.n	1001840c <__sflush_r+0x18>
10018406:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10018408:	2b00      	cmp	r3, #0
1001840a:	dd19      	ble.n	10018440 <__sflush_r+0x4c>
1001840c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1001840e:	2f00      	cmp	r7, #0
10018410:	d016      	beq.n	10018440 <__sflush_r+0x4c>
10018412:	2300      	movs	r3, #0
10018414:	682e      	ldr	r6, [r5, #0]
10018416:	602b      	str	r3, [r5, #0]
10018418:	2380      	movs	r3, #128	; 0x80
1001841a:	015b      	lsls	r3, r3, #5
1001841c:	401a      	ands	r2, r3
1001841e:	d001      	beq.n	10018424 <__sflush_r+0x30>
10018420:	6d60      	ldr	r0, [r4, #84]	; 0x54
10018422:	e014      	b.n	1001844e <__sflush_r+0x5a>
10018424:	2301      	movs	r3, #1
10018426:	6a21      	ldr	r1, [r4, #32]
10018428:	0028      	movs	r0, r5
1001842a:	47b8      	blx	r7
1001842c:	1c43      	adds	r3, r0, #1
1001842e:	d10e      	bne.n	1001844e <__sflush_r+0x5a>
10018430:	682b      	ldr	r3, [r5, #0]
10018432:	2b00      	cmp	r3, #0
10018434:	d00b      	beq.n	1001844e <__sflush_r+0x5a>
10018436:	2b1d      	cmp	r3, #29
10018438:	d001      	beq.n	1001843e <__sflush_r+0x4a>
1001843a:	2b16      	cmp	r3, #22
1001843c:	d102      	bne.n	10018444 <__sflush_r+0x50>
1001843e:	602e      	str	r6, [r5, #0]
10018440:	2000      	movs	r0, #0
10018442:	e05a      	b.n	100184fa <__sflush_r+0x106>
10018444:	2240      	movs	r2, #64	; 0x40
10018446:	89a3      	ldrh	r3, [r4, #12]
10018448:	4313      	orrs	r3, r2
1001844a:	81a3      	strh	r3, [r4, #12]
1001844c:	e055      	b.n	100184fa <__sflush_r+0x106>
1001844e:	89a3      	ldrh	r3, [r4, #12]
10018450:	075b      	lsls	r3, r3, #29
10018452:	d506      	bpl.n	10018462 <__sflush_r+0x6e>
10018454:	6863      	ldr	r3, [r4, #4]
10018456:	1ac0      	subs	r0, r0, r3
10018458:	6b63      	ldr	r3, [r4, #52]	; 0x34
1001845a:	2b00      	cmp	r3, #0
1001845c:	d001      	beq.n	10018462 <__sflush_r+0x6e>
1001845e:	6c23      	ldr	r3, [r4, #64]	; 0x40
10018460:	1ac0      	subs	r0, r0, r3
10018462:	2300      	movs	r3, #0
10018464:	0002      	movs	r2, r0
10018466:	6a21      	ldr	r1, [r4, #32]
10018468:	0028      	movs	r0, r5
1001846a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1001846c:	47b8      	blx	r7
1001846e:	89a3      	ldrh	r3, [r4, #12]
10018470:	1c42      	adds	r2, r0, #1
10018472:	d106      	bne.n	10018482 <__sflush_r+0x8e>
10018474:	6829      	ldr	r1, [r5, #0]
10018476:	291d      	cmp	r1, #29
10018478:	d83a      	bhi.n	100184f0 <__sflush_r+0xfc>
1001847a:	4a20      	ldr	r2, [pc, #128]	; (100184fc <__sflush_r+0x108>)
1001847c:	40ca      	lsrs	r2, r1
1001847e:	07d2      	lsls	r2, r2, #31
10018480:	d536      	bpl.n	100184f0 <__sflush_r+0xfc>
10018482:	2200      	movs	r2, #0
10018484:	6062      	str	r2, [r4, #4]
10018486:	6922      	ldr	r2, [r4, #16]
10018488:	6022      	str	r2, [r4, #0]
1001848a:	04db      	lsls	r3, r3, #19
1001848c:	d505      	bpl.n	1001849a <__sflush_r+0xa6>
1001848e:	1c43      	adds	r3, r0, #1
10018490:	d102      	bne.n	10018498 <__sflush_r+0xa4>
10018492:	682b      	ldr	r3, [r5, #0]
10018494:	2b00      	cmp	r3, #0
10018496:	d100      	bne.n	1001849a <__sflush_r+0xa6>
10018498:	6560      	str	r0, [r4, #84]	; 0x54
1001849a:	6b61      	ldr	r1, [r4, #52]	; 0x34
1001849c:	602e      	str	r6, [r5, #0]
1001849e:	2900      	cmp	r1, #0
100184a0:	d0ce      	beq.n	10018440 <__sflush_r+0x4c>
100184a2:	0023      	movs	r3, r4
100184a4:	3344      	adds	r3, #68	; 0x44
100184a6:	4299      	cmp	r1, r3
100184a8:	d002      	beq.n	100184b0 <__sflush_r+0xbc>
100184aa:	0028      	movs	r0, r5
100184ac:	f7ff fc96 	bl	10017ddc <_free_r>
100184b0:	2000      	movs	r0, #0
100184b2:	6360      	str	r0, [r4, #52]	; 0x34
100184b4:	e021      	b.n	100184fa <__sflush_r+0x106>
100184b6:	690f      	ldr	r7, [r1, #16]
100184b8:	2f00      	cmp	r7, #0
100184ba:	d0c1      	beq.n	10018440 <__sflush_r+0x4c>
100184bc:	680b      	ldr	r3, [r1, #0]
100184be:	600f      	str	r7, [r1, #0]
100184c0:	1bdb      	subs	r3, r3, r7
100184c2:	9301      	str	r3, [sp, #4]
100184c4:	2300      	movs	r3, #0
100184c6:	0792      	lsls	r2, r2, #30
100184c8:	d100      	bne.n	100184cc <__sflush_r+0xd8>
100184ca:	694b      	ldr	r3, [r1, #20]
100184cc:	60a3      	str	r3, [r4, #8]
100184ce:	e003      	b.n	100184d8 <__sflush_r+0xe4>
100184d0:	9b01      	ldr	r3, [sp, #4]
100184d2:	183f      	adds	r7, r7, r0
100184d4:	1a1b      	subs	r3, r3, r0
100184d6:	9301      	str	r3, [sp, #4]
100184d8:	9b01      	ldr	r3, [sp, #4]
100184da:	2b00      	cmp	r3, #0
100184dc:	ddb0      	ble.n	10018440 <__sflush_r+0x4c>
100184de:	9b01      	ldr	r3, [sp, #4]
100184e0:	003a      	movs	r2, r7
100184e2:	6a21      	ldr	r1, [r4, #32]
100184e4:	0028      	movs	r0, r5
100184e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
100184e8:	47b0      	blx	r6
100184ea:	2800      	cmp	r0, #0
100184ec:	dcf0      	bgt.n	100184d0 <__sflush_r+0xdc>
100184ee:	89a3      	ldrh	r3, [r4, #12]
100184f0:	2240      	movs	r2, #64	; 0x40
100184f2:	2001      	movs	r0, #1
100184f4:	4313      	orrs	r3, r2
100184f6:	81a3      	strh	r3, [r4, #12]
100184f8:	4240      	negs	r0, r0
100184fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100184fc:	20400001 	.word	0x20400001

10018500 <_fflush_r>:
10018500:	690b      	ldr	r3, [r1, #16]
10018502:	b570      	push	{r4, r5, r6, lr}
10018504:	0005      	movs	r5, r0
10018506:	000c      	movs	r4, r1
10018508:	2b00      	cmp	r3, #0
1001850a:	d101      	bne.n	10018510 <_fflush_r+0x10>
1001850c:	2000      	movs	r0, #0
1001850e:	e01c      	b.n	1001854a <_fflush_r+0x4a>
10018510:	2800      	cmp	r0, #0
10018512:	d004      	beq.n	1001851e <_fflush_r+0x1e>
10018514:	6983      	ldr	r3, [r0, #24]
10018516:	2b00      	cmp	r3, #0
10018518:	d101      	bne.n	1001851e <_fflush_r+0x1e>
1001851a:	f000 f85f 	bl	100185dc <__sinit>
1001851e:	4b0b      	ldr	r3, [pc, #44]	; (1001854c <_fflush_r+0x4c>)
10018520:	429c      	cmp	r4, r3
10018522:	d101      	bne.n	10018528 <_fflush_r+0x28>
10018524:	686c      	ldr	r4, [r5, #4]
10018526:	e008      	b.n	1001853a <_fflush_r+0x3a>
10018528:	4b09      	ldr	r3, [pc, #36]	; (10018550 <_fflush_r+0x50>)
1001852a:	429c      	cmp	r4, r3
1001852c:	d101      	bne.n	10018532 <_fflush_r+0x32>
1001852e:	68ac      	ldr	r4, [r5, #8]
10018530:	e003      	b.n	1001853a <_fflush_r+0x3a>
10018532:	4b08      	ldr	r3, [pc, #32]	; (10018554 <_fflush_r+0x54>)
10018534:	429c      	cmp	r4, r3
10018536:	d100      	bne.n	1001853a <_fflush_r+0x3a>
10018538:	68ec      	ldr	r4, [r5, #12]
1001853a:	220c      	movs	r2, #12
1001853c:	5ea3      	ldrsh	r3, [r4, r2]
1001853e:	2b00      	cmp	r3, #0
10018540:	d0e4      	beq.n	1001850c <_fflush_r+0xc>
10018542:	0021      	movs	r1, r4
10018544:	0028      	movs	r0, r5
10018546:	f7ff ff55 	bl	100183f4 <__sflush_r>
1001854a:	bd70      	pop	{r4, r5, r6, pc}
1001854c:	1001a3f4 	.word	0x1001a3f4
10018550:	1001a414 	.word	0x1001a414
10018554:	1001a434 	.word	0x1001a434

10018558 <_cleanup_r>:
10018558:	b510      	push	{r4, lr}
1001855a:	4902      	ldr	r1, [pc, #8]	; (10018564 <_cleanup_r+0xc>)
1001855c:	f000 f8b0 	bl	100186c0 <_fwalk_reent>
10018560:	bd10      	pop	{r4, pc}
10018562:	46c0      	nop			; (mov r8, r8)
10018564:	10018501 	.word	0x10018501

10018568 <std.isra.0>:
10018568:	2300      	movs	r3, #0
1001856a:	b510      	push	{r4, lr}
1001856c:	0004      	movs	r4, r0
1001856e:	6003      	str	r3, [r0, #0]
10018570:	6043      	str	r3, [r0, #4]
10018572:	6083      	str	r3, [r0, #8]
10018574:	8181      	strh	r1, [r0, #12]
10018576:	6643      	str	r3, [r0, #100]	; 0x64
10018578:	81c2      	strh	r2, [r0, #14]
1001857a:	6103      	str	r3, [r0, #16]
1001857c:	6143      	str	r3, [r0, #20]
1001857e:	6183      	str	r3, [r0, #24]
10018580:	0019      	movs	r1, r3
10018582:	2208      	movs	r2, #8
10018584:	305c      	adds	r0, #92	; 0x5c
10018586:	f7ff fc20 	bl	10017dca <memset>
1001858a:	4b05      	ldr	r3, [pc, #20]	; (100185a0 <std.isra.0+0x38>)
1001858c:	6224      	str	r4, [r4, #32]
1001858e:	6263      	str	r3, [r4, #36]	; 0x24
10018590:	4b04      	ldr	r3, [pc, #16]	; (100185a4 <std.isra.0+0x3c>)
10018592:	62a3      	str	r3, [r4, #40]	; 0x28
10018594:	4b04      	ldr	r3, [pc, #16]	; (100185a8 <std.isra.0+0x40>)
10018596:	62e3      	str	r3, [r4, #44]	; 0x2c
10018598:	4b04      	ldr	r3, [pc, #16]	; (100185ac <std.isra.0+0x44>)
1001859a:	6323      	str	r3, [r4, #48]	; 0x30
1001859c:	bd10      	pop	{r4, pc}
1001859e:	46c0      	nop			; (mov r8, r8)
100185a0:	10018de1 	.word	0x10018de1
100185a4:	10018e09 	.word	0x10018e09
100185a8:	10018e41 	.word	0x10018e41
100185ac:	10018e6d 	.word	0x10018e6d

100185b0 <__sfmoreglue>:
100185b0:	b570      	push	{r4, r5, r6, lr}
100185b2:	2568      	movs	r5, #104	; 0x68
100185b4:	1e4b      	subs	r3, r1, #1
100185b6:	435d      	muls	r5, r3
100185b8:	000e      	movs	r6, r1
100185ba:	0029      	movs	r1, r5
100185bc:	3174      	adds	r1, #116	; 0x74
100185be:	f7ff fc53 	bl	10017e68 <_malloc_r>
100185c2:	1e04      	subs	r4, r0, #0
100185c4:	d008      	beq.n	100185d8 <__sfmoreglue+0x28>
100185c6:	2100      	movs	r1, #0
100185c8:	002a      	movs	r2, r5
100185ca:	6001      	str	r1, [r0, #0]
100185cc:	6046      	str	r6, [r0, #4]
100185ce:	300c      	adds	r0, #12
100185d0:	60a0      	str	r0, [r4, #8]
100185d2:	3268      	adds	r2, #104	; 0x68
100185d4:	f7ff fbf9 	bl	10017dca <memset>
100185d8:	0020      	movs	r0, r4
100185da:	bd70      	pop	{r4, r5, r6, pc}

100185dc <__sinit>:
100185dc:	6983      	ldr	r3, [r0, #24]
100185de:	b513      	push	{r0, r1, r4, lr}
100185e0:	0004      	movs	r4, r0
100185e2:	2b00      	cmp	r3, #0
100185e4:	d128      	bne.n	10018638 <__sinit+0x5c>
100185e6:	6483      	str	r3, [r0, #72]	; 0x48
100185e8:	64c3      	str	r3, [r0, #76]	; 0x4c
100185ea:	6503      	str	r3, [r0, #80]	; 0x50
100185ec:	4b13      	ldr	r3, [pc, #76]	; (1001863c <__sinit+0x60>)
100185ee:	4a14      	ldr	r2, [pc, #80]	; (10018640 <__sinit+0x64>)
100185f0:	681b      	ldr	r3, [r3, #0]
100185f2:	6282      	str	r2, [r0, #40]	; 0x28
100185f4:	9301      	str	r3, [sp, #4]
100185f6:	4298      	cmp	r0, r3
100185f8:	d101      	bne.n	100185fe <__sinit+0x22>
100185fa:	2301      	movs	r3, #1
100185fc:	6183      	str	r3, [r0, #24]
100185fe:	0020      	movs	r0, r4
10018600:	f000 f820 	bl	10018644 <__sfp>
10018604:	6060      	str	r0, [r4, #4]
10018606:	0020      	movs	r0, r4
10018608:	f000 f81c 	bl	10018644 <__sfp>
1001860c:	60a0      	str	r0, [r4, #8]
1001860e:	0020      	movs	r0, r4
10018610:	f000 f818 	bl	10018644 <__sfp>
10018614:	2200      	movs	r2, #0
10018616:	60e0      	str	r0, [r4, #12]
10018618:	2104      	movs	r1, #4
1001861a:	6860      	ldr	r0, [r4, #4]
1001861c:	f7ff ffa4 	bl	10018568 <std.isra.0>
10018620:	2201      	movs	r2, #1
10018622:	2109      	movs	r1, #9
10018624:	68a0      	ldr	r0, [r4, #8]
10018626:	f7ff ff9f 	bl	10018568 <std.isra.0>
1001862a:	2202      	movs	r2, #2
1001862c:	2112      	movs	r1, #18
1001862e:	68e0      	ldr	r0, [r4, #12]
10018630:	f7ff ff9a 	bl	10018568 <std.isra.0>
10018634:	2301      	movs	r3, #1
10018636:	61a3      	str	r3, [r4, #24]
10018638:	bd13      	pop	{r0, r1, r4, pc}
1001863a:	46c0      	nop			; (mov r8, r8)
1001863c:	1001a3f0 	.word	0x1001a3f0
10018640:	10018559 	.word	0x10018559

10018644 <__sfp>:
10018644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10018646:	4b1d      	ldr	r3, [pc, #116]	; (100186bc <__sfp+0x78>)
10018648:	0006      	movs	r6, r0
1001864a:	681d      	ldr	r5, [r3, #0]
1001864c:	69ab      	ldr	r3, [r5, #24]
1001864e:	2b00      	cmp	r3, #0
10018650:	d102      	bne.n	10018658 <__sfp+0x14>
10018652:	0028      	movs	r0, r5
10018654:	f7ff ffc2 	bl	100185dc <__sinit>
10018658:	3548      	adds	r5, #72	; 0x48
1001865a:	68ac      	ldr	r4, [r5, #8]
1001865c:	686b      	ldr	r3, [r5, #4]
1001865e:	3b01      	subs	r3, #1
10018660:	d405      	bmi.n	1001866e <__sfp+0x2a>
10018662:	220c      	movs	r2, #12
10018664:	5ea7      	ldrsh	r7, [r4, r2]
10018666:	2f00      	cmp	r7, #0
10018668:	d010      	beq.n	1001868c <__sfp+0x48>
1001866a:	3468      	adds	r4, #104	; 0x68
1001866c:	e7f7      	b.n	1001865e <__sfp+0x1a>
1001866e:	682b      	ldr	r3, [r5, #0]
10018670:	2b00      	cmp	r3, #0
10018672:	d001      	beq.n	10018678 <__sfp+0x34>
10018674:	682d      	ldr	r5, [r5, #0]
10018676:	e7f0      	b.n	1001865a <__sfp+0x16>
10018678:	2104      	movs	r1, #4
1001867a:	0030      	movs	r0, r6
1001867c:	f7ff ff98 	bl	100185b0 <__sfmoreglue>
10018680:	6028      	str	r0, [r5, #0]
10018682:	2800      	cmp	r0, #0
10018684:	d1f6      	bne.n	10018674 <__sfp+0x30>
10018686:	230c      	movs	r3, #12
10018688:	6033      	str	r3, [r6, #0]
1001868a:	e016      	b.n	100186ba <__sfp+0x76>
1001868c:	2301      	movs	r3, #1
1001868e:	0020      	movs	r0, r4
10018690:	425b      	negs	r3, r3
10018692:	81e3      	strh	r3, [r4, #14]
10018694:	3302      	adds	r3, #2
10018696:	81a3      	strh	r3, [r4, #12]
10018698:	6667      	str	r7, [r4, #100]	; 0x64
1001869a:	6027      	str	r7, [r4, #0]
1001869c:	60a7      	str	r7, [r4, #8]
1001869e:	6067      	str	r7, [r4, #4]
100186a0:	6127      	str	r7, [r4, #16]
100186a2:	6167      	str	r7, [r4, #20]
100186a4:	61a7      	str	r7, [r4, #24]
100186a6:	305c      	adds	r0, #92	; 0x5c
100186a8:	2208      	movs	r2, #8
100186aa:	0039      	movs	r1, r7
100186ac:	f7ff fb8d 	bl	10017dca <memset>
100186b0:	0020      	movs	r0, r4
100186b2:	6367      	str	r7, [r4, #52]	; 0x34
100186b4:	63a7      	str	r7, [r4, #56]	; 0x38
100186b6:	64a7      	str	r7, [r4, #72]	; 0x48
100186b8:	64e7      	str	r7, [r4, #76]	; 0x4c
100186ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100186bc:	1001a3f0 	.word	0x1001a3f0

100186c0 <_fwalk_reent>:
100186c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100186c2:	0004      	movs	r4, r0
100186c4:	0007      	movs	r7, r0
100186c6:	2600      	movs	r6, #0
100186c8:	9101      	str	r1, [sp, #4]
100186ca:	3448      	adds	r4, #72	; 0x48
100186cc:	2c00      	cmp	r4, #0
100186ce:	d016      	beq.n	100186fe <_fwalk_reent+0x3e>
100186d0:	6863      	ldr	r3, [r4, #4]
100186d2:	68a5      	ldr	r5, [r4, #8]
100186d4:	9300      	str	r3, [sp, #0]
100186d6:	9b00      	ldr	r3, [sp, #0]
100186d8:	3b01      	subs	r3, #1
100186da:	9300      	str	r3, [sp, #0]
100186dc:	d40d      	bmi.n	100186fa <_fwalk_reent+0x3a>
100186de:	89ab      	ldrh	r3, [r5, #12]
100186e0:	2b01      	cmp	r3, #1
100186e2:	d908      	bls.n	100186f6 <_fwalk_reent+0x36>
100186e4:	220e      	movs	r2, #14
100186e6:	5eab      	ldrsh	r3, [r5, r2]
100186e8:	3301      	adds	r3, #1
100186ea:	d004      	beq.n	100186f6 <_fwalk_reent+0x36>
100186ec:	0029      	movs	r1, r5
100186ee:	0038      	movs	r0, r7
100186f0:	9b01      	ldr	r3, [sp, #4]
100186f2:	4798      	blx	r3
100186f4:	4306      	orrs	r6, r0
100186f6:	3568      	adds	r5, #104	; 0x68
100186f8:	e7ed      	b.n	100186d6 <_fwalk_reent+0x16>
100186fa:	6824      	ldr	r4, [r4, #0]
100186fc:	e7e6      	b.n	100186cc <_fwalk_reent+0xc>
100186fe:	0030      	movs	r0, r6
10018700:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10018704 <__swhatbuf_r>:
10018704:	b570      	push	{r4, r5, r6, lr}
10018706:	000e      	movs	r6, r1
10018708:	001d      	movs	r5, r3
1001870a:	230e      	movs	r3, #14
1001870c:	5ec9      	ldrsh	r1, [r1, r3]
1001870e:	b090      	sub	sp, #64	; 0x40
10018710:	0014      	movs	r4, r2
10018712:	2900      	cmp	r1, #0
10018714:	da06      	bge.n	10018724 <__swhatbuf_r+0x20>
10018716:	2300      	movs	r3, #0
10018718:	602b      	str	r3, [r5, #0]
1001871a:	89b3      	ldrh	r3, [r6, #12]
1001871c:	061b      	lsls	r3, r3, #24
1001871e:	d50f      	bpl.n	10018740 <__swhatbuf_r+0x3c>
10018720:	2340      	movs	r3, #64	; 0x40
10018722:	e00f      	b.n	10018744 <__swhatbuf_r+0x40>
10018724:	aa01      	add	r2, sp, #4
10018726:	f000 fbcd 	bl	10018ec4 <_fstat_r>
1001872a:	2800      	cmp	r0, #0
1001872c:	dbf3      	blt.n	10018716 <__swhatbuf_r+0x12>
1001872e:	23f0      	movs	r3, #240	; 0xf0
10018730:	9a02      	ldr	r2, [sp, #8]
10018732:	021b      	lsls	r3, r3, #8
10018734:	4013      	ands	r3, r2
10018736:	4a05      	ldr	r2, [pc, #20]	; (1001874c <__swhatbuf_r+0x48>)
10018738:	189b      	adds	r3, r3, r2
1001873a:	425a      	negs	r2, r3
1001873c:	4153      	adcs	r3, r2
1001873e:	602b      	str	r3, [r5, #0]
10018740:	2380      	movs	r3, #128	; 0x80
10018742:	00db      	lsls	r3, r3, #3
10018744:	2000      	movs	r0, #0
10018746:	6023      	str	r3, [r4, #0]
10018748:	b010      	add	sp, #64	; 0x40
1001874a:	bd70      	pop	{r4, r5, r6, pc}
1001874c:	ffffe000 	.word	0xffffe000

10018750 <__smakebuf_r>:
10018750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10018752:	2602      	movs	r6, #2
10018754:	898b      	ldrh	r3, [r1, #12]
10018756:	0005      	movs	r5, r0
10018758:	000c      	movs	r4, r1
1001875a:	4233      	tst	r3, r6
1001875c:	d110      	bne.n	10018780 <__smakebuf_r+0x30>
1001875e:	ab01      	add	r3, sp, #4
10018760:	466a      	mov	r2, sp
10018762:	f7ff ffcf 	bl	10018704 <__swhatbuf_r>
10018766:	9900      	ldr	r1, [sp, #0]
10018768:	0007      	movs	r7, r0
1001876a:	0028      	movs	r0, r5
1001876c:	f7ff fb7c 	bl	10017e68 <_malloc_r>
10018770:	2800      	cmp	r0, #0
10018772:	d10c      	bne.n	1001878e <__smakebuf_r+0x3e>
10018774:	220c      	movs	r2, #12
10018776:	5ea3      	ldrsh	r3, [r4, r2]
10018778:	059a      	lsls	r2, r3, #22
1001877a:	d423      	bmi.n	100187c4 <__smakebuf_r+0x74>
1001877c:	4333      	orrs	r3, r6
1001877e:	81a3      	strh	r3, [r4, #12]
10018780:	0023      	movs	r3, r4
10018782:	3347      	adds	r3, #71	; 0x47
10018784:	6023      	str	r3, [r4, #0]
10018786:	6123      	str	r3, [r4, #16]
10018788:	2301      	movs	r3, #1
1001878a:	6163      	str	r3, [r4, #20]
1001878c:	e01a      	b.n	100187c4 <__smakebuf_r+0x74>
1001878e:	2280      	movs	r2, #128	; 0x80
10018790:	4b0d      	ldr	r3, [pc, #52]	; (100187c8 <__smakebuf_r+0x78>)
10018792:	62ab      	str	r3, [r5, #40]	; 0x28
10018794:	89a3      	ldrh	r3, [r4, #12]
10018796:	6020      	str	r0, [r4, #0]
10018798:	4313      	orrs	r3, r2
1001879a:	81a3      	strh	r3, [r4, #12]
1001879c:	9b00      	ldr	r3, [sp, #0]
1001879e:	6120      	str	r0, [r4, #16]
100187a0:	6163      	str	r3, [r4, #20]
100187a2:	9b01      	ldr	r3, [sp, #4]
100187a4:	2b00      	cmp	r3, #0
100187a6:	d00a      	beq.n	100187be <__smakebuf_r+0x6e>
100187a8:	230e      	movs	r3, #14
100187aa:	5ee1      	ldrsh	r1, [r4, r3]
100187ac:	0028      	movs	r0, r5
100187ae:	f000 fb9b 	bl	10018ee8 <_isatty_r>
100187b2:	2800      	cmp	r0, #0
100187b4:	d003      	beq.n	100187be <__smakebuf_r+0x6e>
100187b6:	2201      	movs	r2, #1
100187b8:	89a3      	ldrh	r3, [r4, #12]
100187ba:	4313      	orrs	r3, r2
100187bc:	81a3      	strh	r3, [r4, #12]
100187be:	89a3      	ldrh	r3, [r4, #12]
100187c0:	431f      	orrs	r7, r3
100187c2:	81a7      	strh	r7, [r4, #12]
100187c4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100187c6:	46c0      	nop			; (mov r8, r8)
100187c8:	10018559 	.word	0x10018559

100187cc <__sfputc_r>:
100187cc:	6893      	ldr	r3, [r2, #8]
100187ce:	b510      	push	{r4, lr}
100187d0:	3b01      	subs	r3, #1
100187d2:	6093      	str	r3, [r2, #8]
100187d4:	2b00      	cmp	r3, #0
100187d6:	da05      	bge.n	100187e4 <__sfputc_r+0x18>
100187d8:	6994      	ldr	r4, [r2, #24]
100187da:	42a3      	cmp	r3, r4
100187dc:	db08      	blt.n	100187f0 <__sfputc_r+0x24>
100187de:	b2cb      	uxtb	r3, r1
100187e0:	2b0a      	cmp	r3, #10
100187e2:	d005      	beq.n	100187f0 <__sfputc_r+0x24>
100187e4:	6813      	ldr	r3, [r2, #0]
100187e6:	1c58      	adds	r0, r3, #1
100187e8:	6010      	str	r0, [r2, #0]
100187ea:	7019      	strb	r1, [r3, #0]
100187ec:	b2c8      	uxtb	r0, r1
100187ee:	e001      	b.n	100187f4 <__sfputc_r+0x28>
100187f0:	f7ff fd32 	bl	10018258 <__swbuf_r>
100187f4:	bd10      	pop	{r4, pc}

100187f6 <__sfputs_r>:
100187f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100187f8:	0006      	movs	r6, r0
100187fa:	000f      	movs	r7, r1
100187fc:	0014      	movs	r4, r2
100187fe:	18d5      	adds	r5, r2, r3
10018800:	42ac      	cmp	r4, r5
10018802:	d008      	beq.n	10018816 <__sfputs_r+0x20>
10018804:	7821      	ldrb	r1, [r4, #0]
10018806:	003a      	movs	r2, r7
10018808:	0030      	movs	r0, r6
1001880a:	f7ff ffdf 	bl	100187cc <__sfputc_r>
1001880e:	3401      	adds	r4, #1
10018810:	1c43      	adds	r3, r0, #1
10018812:	d1f5      	bne.n	10018800 <__sfputs_r+0xa>
10018814:	e000      	b.n	10018818 <__sfputs_r+0x22>
10018816:	2000      	movs	r0, #0
10018818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1001881c <_vfiprintf_r>:
1001881c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001881e:	b09f      	sub	sp, #124	; 0x7c
10018820:	0006      	movs	r6, r0
10018822:	000f      	movs	r7, r1
10018824:	9202      	str	r2, [sp, #8]
10018826:	9305      	str	r3, [sp, #20]
10018828:	2800      	cmp	r0, #0
1001882a:	d004      	beq.n	10018836 <_vfiprintf_r+0x1a>
1001882c:	6983      	ldr	r3, [r0, #24]
1001882e:	2b00      	cmp	r3, #0
10018830:	d101      	bne.n	10018836 <_vfiprintf_r+0x1a>
10018832:	f7ff fed3 	bl	100185dc <__sinit>
10018836:	4b7f      	ldr	r3, [pc, #508]	; (10018a34 <_vfiprintf_r+0x218>)
10018838:	429f      	cmp	r7, r3
1001883a:	d101      	bne.n	10018840 <_vfiprintf_r+0x24>
1001883c:	6877      	ldr	r7, [r6, #4]
1001883e:	e008      	b.n	10018852 <_vfiprintf_r+0x36>
10018840:	4b7d      	ldr	r3, [pc, #500]	; (10018a38 <_vfiprintf_r+0x21c>)
10018842:	429f      	cmp	r7, r3
10018844:	d101      	bne.n	1001884a <_vfiprintf_r+0x2e>
10018846:	68b7      	ldr	r7, [r6, #8]
10018848:	e003      	b.n	10018852 <_vfiprintf_r+0x36>
1001884a:	4b7c      	ldr	r3, [pc, #496]	; (10018a3c <_vfiprintf_r+0x220>)
1001884c:	429f      	cmp	r7, r3
1001884e:	d100      	bne.n	10018852 <_vfiprintf_r+0x36>
10018850:	68f7      	ldr	r7, [r6, #12]
10018852:	89bb      	ldrh	r3, [r7, #12]
10018854:	071b      	lsls	r3, r3, #28
10018856:	d50a      	bpl.n	1001886e <_vfiprintf_r+0x52>
10018858:	693b      	ldr	r3, [r7, #16]
1001885a:	2b00      	cmp	r3, #0
1001885c:	d007      	beq.n	1001886e <_vfiprintf_r+0x52>
1001885e:	2300      	movs	r3, #0
10018860:	ad06      	add	r5, sp, #24
10018862:	616b      	str	r3, [r5, #20]
10018864:	3320      	adds	r3, #32
10018866:	766b      	strb	r3, [r5, #25]
10018868:	3310      	adds	r3, #16
1001886a:	76ab      	strb	r3, [r5, #26]
1001886c:	e03d      	b.n	100188ea <_vfiprintf_r+0xce>
1001886e:	0039      	movs	r1, r7
10018870:	0030      	movs	r0, r6
10018872:	f7ff fd49 	bl	10018308 <__swsetup_r>
10018876:	2800      	cmp	r0, #0
10018878:	d0f1      	beq.n	1001885e <_vfiprintf_r+0x42>
1001887a:	2001      	movs	r0, #1
1001887c:	4240      	negs	r0, r0
1001887e:	e0d6      	b.n	10018a2e <_vfiprintf_r+0x212>
10018880:	9a05      	ldr	r2, [sp, #20]
10018882:	1d11      	adds	r1, r2, #4
10018884:	6812      	ldr	r2, [r2, #0]
10018886:	9105      	str	r1, [sp, #20]
10018888:	2a00      	cmp	r2, #0
1001888a:	da00      	bge.n	1001888e <_vfiprintf_r+0x72>
1001888c:	e07f      	b.n	1001898e <_vfiprintf_r+0x172>
1001888e:	9209      	str	r2, [sp, #36]	; 0x24
10018890:	3401      	adds	r4, #1
10018892:	7823      	ldrb	r3, [r4, #0]
10018894:	2b2e      	cmp	r3, #46	; 0x2e
10018896:	d100      	bne.n	1001889a <_vfiprintf_r+0x7e>
10018898:	e08d      	b.n	100189b6 <_vfiprintf_r+0x19a>
1001889a:	7821      	ldrb	r1, [r4, #0]
1001889c:	2203      	movs	r2, #3
1001889e:	4868      	ldr	r0, [pc, #416]	; (10018a40 <_vfiprintf_r+0x224>)
100188a0:	f000 fb48 	bl	10018f34 <memchr>
100188a4:	2800      	cmp	r0, #0
100188a6:	d007      	beq.n	100188b8 <_vfiprintf_r+0x9c>
100188a8:	4b65      	ldr	r3, [pc, #404]	; (10018a40 <_vfiprintf_r+0x224>)
100188aa:	682a      	ldr	r2, [r5, #0]
100188ac:	1ac0      	subs	r0, r0, r3
100188ae:	2340      	movs	r3, #64	; 0x40
100188b0:	4083      	lsls	r3, r0
100188b2:	4313      	orrs	r3, r2
100188b4:	602b      	str	r3, [r5, #0]
100188b6:	3401      	adds	r4, #1
100188b8:	7821      	ldrb	r1, [r4, #0]
100188ba:	1c63      	adds	r3, r4, #1
100188bc:	2206      	movs	r2, #6
100188be:	4861      	ldr	r0, [pc, #388]	; (10018a44 <_vfiprintf_r+0x228>)
100188c0:	9302      	str	r3, [sp, #8]
100188c2:	7629      	strb	r1, [r5, #24]
100188c4:	f000 fb36 	bl	10018f34 <memchr>
100188c8:	2800      	cmp	r0, #0
100188ca:	d100      	bne.n	100188ce <_vfiprintf_r+0xb2>
100188cc:	e09d      	b.n	10018a0a <_vfiprintf_r+0x1ee>
100188ce:	4b5e      	ldr	r3, [pc, #376]	; (10018a48 <_vfiprintf_r+0x22c>)
100188d0:	2b00      	cmp	r3, #0
100188d2:	d000      	beq.n	100188d6 <_vfiprintf_r+0xba>
100188d4:	e090      	b.n	100189f8 <_vfiprintf_r+0x1dc>
100188d6:	2207      	movs	r2, #7
100188d8:	9b05      	ldr	r3, [sp, #20]
100188da:	3307      	adds	r3, #7
100188dc:	4393      	bics	r3, r2
100188de:	3308      	adds	r3, #8
100188e0:	9305      	str	r3, [sp, #20]
100188e2:	696b      	ldr	r3, [r5, #20]
100188e4:	9a03      	ldr	r2, [sp, #12]
100188e6:	189b      	adds	r3, r3, r2
100188e8:	616b      	str	r3, [r5, #20]
100188ea:	9c02      	ldr	r4, [sp, #8]
100188ec:	7823      	ldrb	r3, [r4, #0]
100188ee:	2b00      	cmp	r3, #0
100188f0:	d104      	bne.n	100188fc <_vfiprintf_r+0xe0>
100188f2:	9b02      	ldr	r3, [sp, #8]
100188f4:	1ae3      	subs	r3, r4, r3
100188f6:	9304      	str	r3, [sp, #16]
100188f8:	d012      	beq.n	10018920 <_vfiprintf_r+0x104>
100188fa:	e003      	b.n	10018904 <_vfiprintf_r+0xe8>
100188fc:	2b25      	cmp	r3, #37	; 0x25
100188fe:	d0f8      	beq.n	100188f2 <_vfiprintf_r+0xd6>
10018900:	3401      	adds	r4, #1
10018902:	e7f3      	b.n	100188ec <_vfiprintf_r+0xd0>
10018904:	9b04      	ldr	r3, [sp, #16]
10018906:	9a02      	ldr	r2, [sp, #8]
10018908:	0039      	movs	r1, r7
1001890a:	0030      	movs	r0, r6
1001890c:	f7ff ff73 	bl	100187f6 <__sfputs_r>
10018910:	1c43      	adds	r3, r0, #1
10018912:	d100      	bne.n	10018916 <_vfiprintf_r+0xfa>
10018914:	e086      	b.n	10018a24 <_vfiprintf_r+0x208>
10018916:	696a      	ldr	r2, [r5, #20]
10018918:	9b04      	ldr	r3, [sp, #16]
1001891a:	4694      	mov	ip, r2
1001891c:	4463      	add	r3, ip
1001891e:	616b      	str	r3, [r5, #20]
10018920:	7823      	ldrb	r3, [r4, #0]
10018922:	2b00      	cmp	r3, #0
10018924:	d07e      	beq.n	10018a24 <_vfiprintf_r+0x208>
10018926:	2201      	movs	r2, #1
10018928:	2300      	movs	r3, #0
1001892a:	4252      	negs	r2, r2
1001892c:	606a      	str	r2, [r5, #4]
1001892e:	a902      	add	r1, sp, #8
10018930:	3254      	adds	r2, #84	; 0x54
10018932:	1852      	adds	r2, r2, r1
10018934:	3401      	adds	r4, #1
10018936:	602b      	str	r3, [r5, #0]
10018938:	60eb      	str	r3, [r5, #12]
1001893a:	60ab      	str	r3, [r5, #8]
1001893c:	7013      	strb	r3, [r2, #0]
1001893e:	65ab      	str	r3, [r5, #88]	; 0x58
10018940:	7821      	ldrb	r1, [r4, #0]
10018942:	2205      	movs	r2, #5
10018944:	4841      	ldr	r0, [pc, #260]	; (10018a4c <_vfiprintf_r+0x230>)
10018946:	f000 faf5 	bl	10018f34 <memchr>
1001894a:	2800      	cmp	r0, #0
1001894c:	d008      	beq.n	10018960 <_vfiprintf_r+0x144>
1001894e:	4b3f      	ldr	r3, [pc, #252]	; (10018a4c <_vfiprintf_r+0x230>)
10018950:	682a      	ldr	r2, [r5, #0]
10018952:	1ac0      	subs	r0, r0, r3
10018954:	2301      	movs	r3, #1
10018956:	4083      	lsls	r3, r0
10018958:	4313      	orrs	r3, r2
1001895a:	602b      	str	r3, [r5, #0]
1001895c:	3401      	adds	r4, #1
1001895e:	e7ef      	b.n	10018940 <_vfiprintf_r+0x124>
10018960:	682b      	ldr	r3, [r5, #0]
10018962:	06da      	lsls	r2, r3, #27
10018964:	d504      	bpl.n	10018970 <_vfiprintf_r+0x154>
10018966:	2253      	movs	r2, #83	; 0x53
10018968:	2120      	movs	r1, #32
1001896a:	a802      	add	r0, sp, #8
1001896c:	1812      	adds	r2, r2, r0
1001896e:	7011      	strb	r1, [r2, #0]
10018970:	071a      	lsls	r2, r3, #28
10018972:	d504      	bpl.n	1001897e <_vfiprintf_r+0x162>
10018974:	2253      	movs	r2, #83	; 0x53
10018976:	212b      	movs	r1, #43	; 0x2b
10018978:	a802      	add	r0, sp, #8
1001897a:	1812      	adds	r2, r2, r0
1001897c:	7011      	strb	r1, [r2, #0]
1001897e:	7822      	ldrb	r2, [r4, #0]
10018980:	2a2a      	cmp	r2, #42	; 0x2a
10018982:	d100      	bne.n	10018986 <_vfiprintf_r+0x16a>
10018984:	e77c      	b.n	10018880 <_vfiprintf_r+0x64>
10018986:	9b09      	ldr	r3, [sp, #36]	; 0x24
10018988:	2000      	movs	r0, #0
1001898a:	210a      	movs	r1, #10
1001898c:	e005      	b.n	1001899a <_vfiprintf_r+0x17e>
1001898e:	4252      	negs	r2, r2
10018990:	60ea      	str	r2, [r5, #12]
10018992:	2202      	movs	r2, #2
10018994:	4313      	orrs	r3, r2
10018996:	602b      	str	r3, [r5, #0]
10018998:	e77a      	b.n	10018890 <_vfiprintf_r+0x74>
1001899a:	7822      	ldrb	r2, [r4, #0]
1001899c:	3a30      	subs	r2, #48	; 0x30
1001899e:	2a09      	cmp	r2, #9
100189a0:	d804      	bhi.n	100189ac <_vfiprintf_r+0x190>
100189a2:	434b      	muls	r3, r1
100189a4:	3401      	adds	r4, #1
100189a6:	189b      	adds	r3, r3, r2
100189a8:	2001      	movs	r0, #1
100189aa:	e7f6      	b.n	1001899a <_vfiprintf_r+0x17e>
100189ac:	2800      	cmp	r0, #0
100189ae:	d100      	bne.n	100189b2 <_vfiprintf_r+0x196>
100189b0:	e76f      	b.n	10018892 <_vfiprintf_r+0x76>
100189b2:	9309      	str	r3, [sp, #36]	; 0x24
100189b4:	e76d      	b.n	10018892 <_vfiprintf_r+0x76>
100189b6:	7863      	ldrb	r3, [r4, #1]
100189b8:	2b2a      	cmp	r3, #42	; 0x2a
100189ba:	d10a      	bne.n	100189d2 <_vfiprintf_r+0x1b6>
100189bc:	9b05      	ldr	r3, [sp, #20]
100189be:	3402      	adds	r4, #2
100189c0:	1d1a      	adds	r2, r3, #4
100189c2:	681b      	ldr	r3, [r3, #0]
100189c4:	9205      	str	r2, [sp, #20]
100189c6:	2b00      	cmp	r3, #0
100189c8:	da01      	bge.n	100189ce <_vfiprintf_r+0x1b2>
100189ca:	2301      	movs	r3, #1
100189cc:	425b      	negs	r3, r3
100189ce:	9307      	str	r3, [sp, #28]
100189d0:	e763      	b.n	1001889a <_vfiprintf_r+0x7e>
100189d2:	2300      	movs	r3, #0
100189d4:	200a      	movs	r0, #10
100189d6:	001a      	movs	r2, r3
100189d8:	3401      	adds	r4, #1
100189da:	606b      	str	r3, [r5, #4]
100189dc:	7821      	ldrb	r1, [r4, #0]
100189de:	3930      	subs	r1, #48	; 0x30
100189e0:	2909      	cmp	r1, #9
100189e2:	d804      	bhi.n	100189ee <_vfiprintf_r+0x1d2>
100189e4:	4342      	muls	r2, r0
100189e6:	3401      	adds	r4, #1
100189e8:	1852      	adds	r2, r2, r1
100189ea:	2301      	movs	r3, #1
100189ec:	e7f6      	b.n	100189dc <_vfiprintf_r+0x1c0>
100189ee:	2b00      	cmp	r3, #0
100189f0:	d100      	bne.n	100189f4 <_vfiprintf_r+0x1d8>
100189f2:	e752      	b.n	1001889a <_vfiprintf_r+0x7e>
100189f4:	9207      	str	r2, [sp, #28]
100189f6:	e750      	b.n	1001889a <_vfiprintf_r+0x7e>
100189f8:	ab05      	add	r3, sp, #20
100189fa:	9300      	str	r3, [sp, #0]
100189fc:	003a      	movs	r2, r7
100189fe:	4b14      	ldr	r3, [pc, #80]	; (10018a50 <_vfiprintf_r+0x234>)
10018a00:	0029      	movs	r1, r5
10018a02:	0030      	movs	r0, r6
10018a04:	e000      	b.n	10018a08 <_vfiprintf_r+0x1ec>
10018a06:	bf00      	nop
10018a08:	e007      	b.n	10018a1a <_vfiprintf_r+0x1fe>
10018a0a:	ab05      	add	r3, sp, #20
10018a0c:	9300      	str	r3, [sp, #0]
10018a0e:	003a      	movs	r2, r7
10018a10:	4b0f      	ldr	r3, [pc, #60]	; (10018a50 <_vfiprintf_r+0x234>)
10018a12:	0029      	movs	r1, r5
10018a14:	0030      	movs	r0, r6
10018a16:	f000 f88b 	bl	10018b30 <_printf_i>
10018a1a:	9003      	str	r0, [sp, #12]
10018a1c:	9b03      	ldr	r3, [sp, #12]
10018a1e:	3301      	adds	r3, #1
10018a20:	d000      	beq.n	10018a24 <_vfiprintf_r+0x208>
10018a22:	e75e      	b.n	100188e2 <_vfiprintf_r+0xc6>
10018a24:	89bb      	ldrh	r3, [r7, #12]
10018a26:	065b      	lsls	r3, r3, #25
10018a28:	d500      	bpl.n	10018a2c <_vfiprintf_r+0x210>
10018a2a:	e726      	b.n	1001887a <_vfiprintf_r+0x5e>
10018a2c:	980b      	ldr	r0, [sp, #44]	; 0x2c
10018a2e:	b01f      	add	sp, #124	; 0x7c
10018a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
10018a32:	46c0      	nop			; (mov r8, r8)
10018a34:	1001a3f4 	.word	0x1001a3f4
10018a38:	1001a414 	.word	0x1001a414
10018a3c:	1001a434 	.word	0x1001a434
10018a40:	1001a45a 	.word	0x1001a45a
10018a44:	1001a45e 	.word	0x1001a45e
10018a48:	00000000 	.word	0x00000000
10018a4c:	1001a454 	.word	0x1001a454
10018a50:	100187f7 	.word	0x100187f7

10018a54 <_printf_common>:
10018a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10018a56:	0017      	movs	r7, r2
10018a58:	9301      	str	r3, [sp, #4]
10018a5a:	688a      	ldr	r2, [r1, #8]
10018a5c:	690b      	ldr	r3, [r1, #16]
10018a5e:	9000      	str	r0, [sp, #0]
10018a60:	000c      	movs	r4, r1
10018a62:	4293      	cmp	r3, r2
10018a64:	da00      	bge.n	10018a68 <_printf_common+0x14>
10018a66:	0013      	movs	r3, r2
10018a68:	0022      	movs	r2, r4
10018a6a:	603b      	str	r3, [r7, #0]
10018a6c:	3243      	adds	r2, #67	; 0x43
10018a6e:	7812      	ldrb	r2, [r2, #0]
10018a70:	2a00      	cmp	r2, #0
10018a72:	d001      	beq.n	10018a78 <_printf_common+0x24>
10018a74:	3301      	adds	r3, #1
10018a76:	603b      	str	r3, [r7, #0]
10018a78:	6823      	ldr	r3, [r4, #0]
10018a7a:	069b      	lsls	r3, r3, #26
10018a7c:	d502      	bpl.n	10018a84 <_printf_common+0x30>
10018a7e:	683b      	ldr	r3, [r7, #0]
10018a80:	3302      	adds	r3, #2
10018a82:	603b      	str	r3, [r7, #0]
10018a84:	2506      	movs	r5, #6
10018a86:	6823      	ldr	r3, [r4, #0]
10018a88:	401d      	ands	r5, r3
10018a8a:	d01e      	beq.n	10018aca <_printf_common+0x76>
10018a8c:	0023      	movs	r3, r4
10018a8e:	3343      	adds	r3, #67	; 0x43
10018a90:	781b      	ldrb	r3, [r3, #0]
10018a92:	1e5a      	subs	r2, r3, #1
10018a94:	4193      	sbcs	r3, r2
10018a96:	6822      	ldr	r2, [r4, #0]
10018a98:	0692      	lsls	r2, r2, #26
10018a9a:	d51c      	bpl.n	10018ad6 <_printf_common+0x82>
10018a9c:	2030      	movs	r0, #48	; 0x30
10018a9e:	18e1      	adds	r1, r4, r3
10018aa0:	3143      	adds	r1, #67	; 0x43
10018aa2:	7008      	strb	r0, [r1, #0]
10018aa4:	0021      	movs	r1, r4
10018aa6:	1c5a      	adds	r2, r3, #1
10018aa8:	3145      	adds	r1, #69	; 0x45
10018aaa:	7809      	ldrb	r1, [r1, #0]
10018aac:	18a2      	adds	r2, r4, r2
10018aae:	3243      	adds	r2, #67	; 0x43
10018ab0:	3302      	adds	r3, #2
10018ab2:	7011      	strb	r1, [r2, #0]
10018ab4:	e00f      	b.n	10018ad6 <_printf_common+0x82>
10018ab6:	0022      	movs	r2, r4
10018ab8:	2301      	movs	r3, #1
10018aba:	3219      	adds	r2, #25
10018abc:	9901      	ldr	r1, [sp, #4]
10018abe:	9800      	ldr	r0, [sp, #0]
10018ac0:	9e08      	ldr	r6, [sp, #32]
10018ac2:	47b0      	blx	r6
10018ac4:	1c43      	adds	r3, r0, #1
10018ac6:	d00e      	beq.n	10018ae6 <_printf_common+0x92>
10018ac8:	3501      	adds	r5, #1
10018aca:	68e3      	ldr	r3, [r4, #12]
10018acc:	683a      	ldr	r2, [r7, #0]
10018ace:	1a9b      	subs	r3, r3, r2
10018ad0:	429d      	cmp	r5, r3
10018ad2:	dbf0      	blt.n	10018ab6 <_printf_common+0x62>
10018ad4:	e7da      	b.n	10018a8c <_printf_common+0x38>
10018ad6:	0022      	movs	r2, r4
10018ad8:	9901      	ldr	r1, [sp, #4]
10018ada:	3243      	adds	r2, #67	; 0x43
10018adc:	9800      	ldr	r0, [sp, #0]
10018ade:	9d08      	ldr	r5, [sp, #32]
10018ae0:	47a8      	blx	r5
10018ae2:	1c43      	adds	r3, r0, #1
10018ae4:	d102      	bne.n	10018aec <_printf_common+0x98>
10018ae6:	2001      	movs	r0, #1
10018ae8:	4240      	negs	r0, r0
10018aea:	e020      	b.n	10018b2e <_printf_common+0xda>
10018aec:	2306      	movs	r3, #6
10018aee:	6820      	ldr	r0, [r4, #0]
10018af0:	68e1      	ldr	r1, [r4, #12]
10018af2:	683a      	ldr	r2, [r7, #0]
10018af4:	4003      	ands	r3, r0
10018af6:	2500      	movs	r5, #0
10018af8:	2b04      	cmp	r3, #4
10018afa:	d103      	bne.n	10018b04 <_printf_common+0xb0>
10018afc:	1a8d      	subs	r5, r1, r2
10018afe:	43eb      	mvns	r3, r5
10018b00:	17db      	asrs	r3, r3, #31
10018b02:	401d      	ands	r5, r3
10018b04:	68a3      	ldr	r3, [r4, #8]
10018b06:	6922      	ldr	r2, [r4, #16]
10018b08:	4293      	cmp	r3, r2
10018b0a:	dd01      	ble.n	10018b10 <_printf_common+0xbc>
10018b0c:	1a9b      	subs	r3, r3, r2
10018b0e:	18ed      	adds	r5, r5, r3
10018b10:	2700      	movs	r7, #0
10018b12:	42bd      	cmp	r5, r7
10018b14:	d00a      	beq.n	10018b2c <_printf_common+0xd8>
10018b16:	0022      	movs	r2, r4
10018b18:	2301      	movs	r3, #1
10018b1a:	321a      	adds	r2, #26
10018b1c:	9901      	ldr	r1, [sp, #4]
10018b1e:	9800      	ldr	r0, [sp, #0]
10018b20:	9e08      	ldr	r6, [sp, #32]
10018b22:	47b0      	blx	r6
10018b24:	1c43      	adds	r3, r0, #1
10018b26:	d0de      	beq.n	10018ae6 <_printf_common+0x92>
10018b28:	3701      	adds	r7, #1
10018b2a:	e7f2      	b.n	10018b12 <_printf_common+0xbe>
10018b2c:	2000      	movs	r0, #0
10018b2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10018b30 <_printf_i>:
10018b30:	b5f0      	push	{r4, r5, r6, r7, lr}
10018b32:	b08b      	sub	sp, #44	; 0x2c
10018b34:	9206      	str	r2, [sp, #24]
10018b36:	000a      	movs	r2, r1
10018b38:	3243      	adds	r2, #67	; 0x43
10018b3a:	9307      	str	r3, [sp, #28]
10018b3c:	9005      	str	r0, [sp, #20]
10018b3e:	9204      	str	r2, [sp, #16]
10018b40:	7e0a      	ldrb	r2, [r1, #24]
10018b42:	000c      	movs	r4, r1
10018b44:	9b10      	ldr	r3, [sp, #64]	; 0x40
10018b46:	2a6e      	cmp	r2, #110	; 0x6e
10018b48:	d100      	bne.n	10018b4c <_printf_i+0x1c>
10018b4a:	e0ab      	b.n	10018ca4 <_printf_i+0x174>
10018b4c:	d811      	bhi.n	10018b72 <_printf_i+0x42>
10018b4e:	2a63      	cmp	r2, #99	; 0x63
10018b50:	d022      	beq.n	10018b98 <_printf_i+0x68>
10018b52:	d809      	bhi.n	10018b68 <_printf_i+0x38>
10018b54:	2a00      	cmp	r2, #0
10018b56:	d100      	bne.n	10018b5a <_printf_i+0x2a>
10018b58:	e0b5      	b.n	10018cc6 <_printf_i+0x196>
10018b5a:	2a58      	cmp	r2, #88	; 0x58
10018b5c:	d000      	beq.n	10018b60 <_printf_i+0x30>
10018b5e:	e0c5      	b.n	10018cec <_printf_i+0x1bc>
10018b60:	3145      	adds	r1, #69	; 0x45
10018b62:	700a      	strb	r2, [r1, #0]
10018b64:	4a81      	ldr	r2, [pc, #516]	; (10018d6c <_printf_i+0x23c>)
10018b66:	e04f      	b.n	10018c08 <_printf_i+0xd8>
10018b68:	2a64      	cmp	r2, #100	; 0x64
10018b6a:	d01d      	beq.n	10018ba8 <_printf_i+0x78>
10018b6c:	2a69      	cmp	r2, #105	; 0x69
10018b6e:	d01b      	beq.n	10018ba8 <_printf_i+0x78>
10018b70:	e0bc      	b.n	10018cec <_printf_i+0x1bc>
10018b72:	2a73      	cmp	r2, #115	; 0x73
10018b74:	d100      	bne.n	10018b78 <_printf_i+0x48>
10018b76:	e0aa      	b.n	10018cce <_printf_i+0x19e>
10018b78:	d809      	bhi.n	10018b8e <_printf_i+0x5e>
10018b7a:	2a6f      	cmp	r2, #111	; 0x6f
10018b7c:	d029      	beq.n	10018bd2 <_printf_i+0xa2>
10018b7e:	2a70      	cmp	r2, #112	; 0x70
10018b80:	d000      	beq.n	10018b84 <_printf_i+0x54>
10018b82:	e0b3      	b.n	10018cec <_printf_i+0x1bc>
10018b84:	2220      	movs	r2, #32
10018b86:	6809      	ldr	r1, [r1, #0]
10018b88:	430a      	orrs	r2, r1
10018b8a:	6022      	str	r2, [r4, #0]
10018b8c:	e037      	b.n	10018bfe <_printf_i+0xce>
10018b8e:	2a75      	cmp	r2, #117	; 0x75
10018b90:	d01f      	beq.n	10018bd2 <_printf_i+0xa2>
10018b92:	2a78      	cmp	r2, #120	; 0x78
10018b94:	d033      	beq.n	10018bfe <_printf_i+0xce>
10018b96:	e0a9      	b.n	10018cec <_printf_i+0x1bc>
10018b98:	000e      	movs	r6, r1
10018b9a:	681a      	ldr	r2, [r3, #0]
10018b9c:	3642      	adds	r6, #66	; 0x42
10018b9e:	1d11      	adds	r1, r2, #4
10018ba0:	6019      	str	r1, [r3, #0]
10018ba2:	6813      	ldr	r3, [r2, #0]
10018ba4:	7033      	strb	r3, [r6, #0]
10018ba6:	e0a4      	b.n	10018cf2 <_printf_i+0x1c2>
10018ba8:	6821      	ldr	r1, [r4, #0]
10018baa:	681a      	ldr	r2, [r3, #0]
10018bac:	0608      	lsls	r0, r1, #24
10018bae:	d406      	bmi.n	10018bbe <_printf_i+0x8e>
10018bb0:	0649      	lsls	r1, r1, #25
10018bb2:	d504      	bpl.n	10018bbe <_printf_i+0x8e>
10018bb4:	1d11      	adds	r1, r2, #4
10018bb6:	6019      	str	r1, [r3, #0]
10018bb8:	2300      	movs	r3, #0
10018bba:	5ed5      	ldrsh	r5, [r2, r3]
10018bbc:	e002      	b.n	10018bc4 <_printf_i+0x94>
10018bbe:	1d11      	adds	r1, r2, #4
10018bc0:	6019      	str	r1, [r3, #0]
10018bc2:	6815      	ldr	r5, [r2, #0]
10018bc4:	2d00      	cmp	r5, #0
10018bc6:	da3b      	bge.n	10018c40 <_printf_i+0x110>
10018bc8:	232d      	movs	r3, #45	; 0x2d
10018bca:	9a04      	ldr	r2, [sp, #16]
10018bcc:	426d      	negs	r5, r5
10018bce:	7013      	strb	r3, [r2, #0]
10018bd0:	e036      	b.n	10018c40 <_printf_i+0x110>
10018bd2:	6821      	ldr	r1, [r4, #0]
10018bd4:	681a      	ldr	r2, [r3, #0]
10018bd6:	0608      	lsls	r0, r1, #24
10018bd8:	d406      	bmi.n	10018be8 <_printf_i+0xb8>
10018bda:	0649      	lsls	r1, r1, #25
10018bdc:	d504      	bpl.n	10018be8 <_printf_i+0xb8>
10018bde:	6815      	ldr	r5, [r2, #0]
10018be0:	1d11      	adds	r1, r2, #4
10018be2:	6019      	str	r1, [r3, #0]
10018be4:	b2ad      	uxth	r5, r5
10018be6:	e002      	b.n	10018bee <_printf_i+0xbe>
10018be8:	1d11      	adds	r1, r2, #4
10018bea:	6019      	str	r1, [r3, #0]
10018bec:	6815      	ldr	r5, [r2, #0]
10018bee:	4b5f      	ldr	r3, [pc, #380]	; (10018d6c <_printf_i+0x23c>)
10018bf0:	7e22      	ldrb	r2, [r4, #24]
10018bf2:	9303      	str	r3, [sp, #12]
10018bf4:	2708      	movs	r7, #8
10018bf6:	2a6f      	cmp	r2, #111	; 0x6f
10018bf8:	d01d      	beq.n	10018c36 <_printf_i+0x106>
10018bfa:	270a      	movs	r7, #10
10018bfc:	e01b      	b.n	10018c36 <_printf_i+0x106>
10018bfe:	0022      	movs	r2, r4
10018c00:	2178      	movs	r1, #120	; 0x78
10018c02:	3245      	adds	r2, #69	; 0x45
10018c04:	7011      	strb	r1, [r2, #0]
10018c06:	4a5a      	ldr	r2, [pc, #360]	; (10018d70 <_printf_i+0x240>)
10018c08:	6819      	ldr	r1, [r3, #0]
10018c0a:	9203      	str	r2, [sp, #12]
10018c0c:	1d08      	adds	r0, r1, #4
10018c0e:	6822      	ldr	r2, [r4, #0]
10018c10:	6018      	str	r0, [r3, #0]
10018c12:	680d      	ldr	r5, [r1, #0]
10018c14:	0610      	lsls	r0, r2, #24
10018c16:	d402      	bmi.n	10018c1e <_printf_i+0xee>
10018c18:	0650      	lsls	r0, r2, #25
10018c1a:	d500      	bpl.n	10018c1e <_printf_i+0xee>
10018c1c:	b2ad      	uxth	r5, r5
10018c1e:	07d3      	lsls	r3, r2, #31
10018c20:	d502      	bpl.n	10018c28 <_printf_i+0xf8>
10018c22:	2320      	movs	r3, #32
10018c24:	431a      	orrs	r2, r3
10018c26:	6022      	str	r2, [r4, #0]
10018c28:	2710      	movs	r7, #16
10018c2a:	2d00      	cmp	r5, #0
10018c2c:	d103      	bne.n	10018c36 <_printf_i+0x106>
10018c2e:	2320      	movs	r3, #32
10018c30:	6822      	ldr	r2, [r4, #0]
10018c32:	439a      	bics	r2, r3
10018c34:	6022      	str	r2, [r4, #0]
10018c36:	0023      	movs	r3, r4
10018c38:	2200      	movs	r2, #0
10018c3a:	3343      	adds	r3, #67	; 0x43
10018c3c:	701a      	strb	r2, [r3, #0]
10018c3e:	e002      	b.n	10018c46 <_printf_i+0x116>
10018c40:	270a      	movs	r7, #10
10018c42:	4b4a      	ldr	r3, [pc, #296]	; (10018d6c <_printf_i+0x23c>)
10018c44:	9303      	str	r3, [sp, #12]
10018c46:	6863      	ldr	r3, [r4, #4]
10018c48:	60a3      	str	r3, [r4, #8]
10018c4a:	2b00      	cmp	r3, #0
10018c4c:	db09      	blt.n	10018c62 <_printf_i+0x132>
10018c4e:	2204      	movs	r2, #4
10018c50:	6821      	ldr	r1, [r4, #0]
10018c52:	4391      	bics	r1, r2
10018c54:	6021      	str	r1, [r4, #0]
10018c56:	2d00      	cmp	r5, #0
10018c58:	d105      	bne.n	10018c66 <_printf_i+0x136>
10018c5a:	9e04      	ldr	r6, [sp, #16]
10018c5c:	2b00      	cmp	r3, #0
10018c5e:	d011      	beq.n	10018c84 <_printf_i+0x154>
10018c60:	e07b      	b.n	10018d5a <_printf_i+0x22a>
10018c62:	2d00      	cmp	r5, #0
10018c64:	d079      	beq.n	10018d5a <_printf_i+0x22a>
10018c66:	9e04      	ldr	r6, [sp, #16]
10018c68:	0028      	movs	r0, r5
10018c6a:	0039      	movs	r1, r7
10018c6c:	f7fb ff88 	bl	10014b80 <__aeabi_uidivmod>
10018c70:	9b03      	ldr	r3, [sp, #12]
10018c72:	3e01      	subs	r6, #1
10018c74:	5c5b      	ldrb	r3, [r3, r1]
10018c76:	0028      	movs	r0, r5
10018c78:	7033      	strb	r3, [r6, #0]
10018c7a:	0039      	movs	r1, r7
10018c7c:	f7fb fefa 	bl	10014a74 <__aeabi_uidiv>
10018c80:	1e05      	subs	r5, r0, #0
10018c82:	d1f1      	bne.n	10018c68 <_printf_i+0x138>
10018c84:	2f08      	cmp	r7, #8
10018c86:	d109      	bne.n	10018c9c <_printf_i+0x16c>
10018c88:	6823      	ldr	r3, [r4, #0]
10018c8a:	07db      	lsls	r3, r3, #31
10018c8c:	d506      	bpl.n	10018c9c <_printf_i+0x16c>
10018c8e:	6863      	ldr	r3, [r4, #4]
10018c90:	6922      	ldr	r2, [r4, #16]
10018c92:	4293      	cmp	r3, r2
10018c94:	dc02      	bgt.n	10018c9c <_printf_i+0x16c>
10018c96:	2330      	movs	r3, #48	; 0x30
10018c98:	3e01      	subs	r6, #1
10018c9a:	7033      	strb	r3, [r6, #0]
10018c9c:	9b04      	ldr	r3, [sp, #16]
10018c9e:	1b9b      	subs	r3, r3, r6
10018ca0:	6123      	str	r3, [r4, #16]
10018ca2:	e02b      	b.n	10018cfc <_printf_i+0x1cc>
10018ca4:	6809      	ldr	r1, [r1, #0]
10018ca6:	681a      	ldr	r2, [r3, #0]
10018ca8:	0608      	lsls	r0, r1, #24
10018caa:	d407      	bmi.n	10018cbc <_printf_i+0x18c>
10018cac:	0649      	lsls	r1, r1, #25
10018cae:	d505      	bpl.n	10018cbc <_printf_i+0x18c>
10018cb0:	1d11      	adds	r1, r2, #4
10018cb2:	6019      	str	r1, [r3, #0]
10018cb4:	6813      	ldr	r3, [r2, #0]
10018cb6:	8aa2      	ldrh	r2, [r4, #20]
10018cb8:	801a      	strh	r2, [r3, #0]
10018cba:	e004      	b.n	10018cc6 <_printf_i+0x196>
10018cbc:	1d11      	adds	r1, r2, #4
10018cbe:	6019      	str	r1, [r3, #0]
10018cc0:	6813      	ldr	r3, [r2, #0]
10018cc2:	6962      	ldr	r2, [r4, #20]
10018cc4:	601a      	str	r2, [r3, #0]
10018cc6:	2300      	movs	r3, #0
10018cc8:	9e04      	ldr	r6, [sp, #16]
10018cca:	6123      	str	r3, [r4, #16]
10018ccc:	e016      	b.n	10018cfc <_printf_i+0x1cc>
10018cce:	681a      	ldr	r2, [r3, #0]
10018cd0:	1d11      	adds	r1, r2, #4
10018cd2:	6019      	str	r1, [r3, #0]
10018cd4:	6816      	ldr	r6, [r2, #0]
10018cd6:	2100      	movs	r1, #0
10018cd8:	6862      	ldr	r2, [r4, #4]
10018cda:	0030      	movs	r0, r6
10018cdc:	f000 f92a 	bl	10018f34 <memchr>
10018ce0:	2800      	cmp	r0, #0
10018ce2:	d001      	beq.n	10018ce8 <_printf_i+0x1b8>
10018ce4:	1b80      	subs	r0, r0, r6
10018ce6:	6060      	str	r0, [r4, #4]
10018ce8:	6863      	ldr	r3, [r4, #4]
10018cea:	e003      	b.n	10018cf4 <_printf_i+0x1c4>
10018cec:	0026      	movs	r6, r4
10018cee:	3642      	adds	r6, #66	; 0x42
10018cf0:	7032      	strb	r2, [r6, #0]
10018cf2:	2301      	movs	r3, #1
10018cf4:	6123      	str	r3, [r4, #16]
10018cf6:	2300      	movs	r3, #0
10018cf8:	9a04      	ldr	r2, [sp, #16]
10018cfa:	7013      	strb	r3, [r2, #0]
10018cfc:	9b07      	ldr	r3, [sp, #28]
10018cfe:	aa09      	add	r2, sp, #36	; 0x24
10018d00:	9300      	str	r3, [sp, #0]
10018d02:	0021      	movs	r1, r4
10018d04:	9b06      	ldr	r3, [sp, #24]
10018d06:	9805      	ldr	r0, [sp, #20]
10018d08:	f7ff fea4 	bl	10018a54 <_printf_common>
10018d0c:	1c43      	adds	r3, r0, #1
10018d0e:	d102      	bne.n	10018d16 <_printf_i+0x1e6>
10018d10:	2001      	movs	r0, #1
10018d12:	4240      	negs	r0, r0
10018d14:	e027      	b.n	10018d66 <_printf_i+0x236>
10018d16:	6923      	ldr	r3, [r4, #16]
10018d18:	0032      	movs	r2, r6
10018d1a:	9906      	ldr	r1, [sp, #24]
10018d1c:	9805      	ldr	r0, [sp, #20]
10018d1e:	9d07      	ldr	r5, [sp, #28]
10018d20:	47a8      	blx	r5
10018d22:	1c43      	adds	r3, r0, #1
10018d24:	d0f4      	beq.n	10018d10 <_printf_i+0x1e0>
10018d26:	6823      	ldr	r3, [r4, #0]
10018d28:	2500      	movs	r5, #0
10018d2a:	079b      	lsls	r3, r3, #30
10018d2c:	d40f      	bmi.n	10018d4e <_printf_i+0x21e>
10018d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10018d30:	68e0      	ldr	r0, [r4, #12]
10018d32:	4298      	cmp	r0, r3
10018d34:	da17      	bge.n	10018d66 <_printf_i+0x236>
10018d36:	0018      	movs	r0, r3
10018d38:	e015      	b.n	10018d66 <_printf_i+0x236>
10018d3a:	0022      	movs	r2, r4
10018d3c:	2301      	movs	r3, #1
10018d3e:	3219      	adds	r2, #25
10018d40:	9906      	ldr	r1, [sp, #24]
10018d42:	9805      	ldr	r0, [sp, #20]
10018d44:	9e07      	ldr	r6, [sp, #28]
10018d46:	47b0      	blx	r6
10018d48:	1c43      	adds	r3, r0, #1
10018d4a:	d0e1      	beq.n	10018d10 <_printf_i+0x1e0>
10018d4c:	3501      	adds	r5, #1
10018d4e:	68e3      	ldr	r3, [r4, #12]
10018d50:	9a09      	ldr	r2, [sp, #36]	; 0x24
10018d52:	1a9b      	subs	r3, r3, r2
10018d54:	429d      	cmp	r5, r3
10018d56:	dbf0      	blt.n	10018d3a <_printf_i+0x20a>
10018d58:	e7e9      	b.n	10018d2e <_printf_i+0x1fe>
10018d5a:	0026      	movs	r6, r4
10018d5c:	9b03      	ldr	r3, [sp, #12]
10018d5e:	3642      	adds	r6, #66	; 0x42
10018d60:	781b      	ldrb	r3, [r3, #0]
10018d62:	7033      	strb	r3, [r6, #0]
10018d64:	e78e      	b.n	10018c84 <_printf_i+0x154>
10018d66:	b00b      	add	sp, #44	; 0x2c
10018d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
10018d6a:	46c0      	nop			; (mov r8, r8)
10018d6c:	1001a465 	.word	0x1001a465
10018d70:	1001a476 	.word	0x1001a476

10018d74 <_putc_r>:
10018d74:	b570      	push	{r4, r5, r6, lr}
10018d76:	0006      	movs	r6, r0
10018d78:	000d      	movs	r5, r1
10018d7a:	0014      	movs	r4, r2
10018d7c:	2800      	cmp	r0, #0
10018d7e:	d004      	beq.n	10018d8a <_putc_r+0x16>
10018d80:	6983      	ldr	r3, [r0, #24]
10018d82:	2b00      	cmp	r3, #0
10018d84:	d101      	bne.n	10018d8a <_putc_r+0x16>
10018d86:	f7ff fc29 	bl	100185dc <__sinit>
10018d8a:	4b12      	ldr	r3, [pc, #72]	; (10018dd4 <_putc_r+0x60>)
10018d8c:	429c      	cmp	r4, r3
10018d8e:	d101      	bne.n	10018d94 <_putc_r+0x20>
10018d90:	6874      	ldr	r4, [r6, #4]
10018d92:	e008      	b.n	10018da6 <_putc_r+0x32>
10018d94:	4b10      	ldr	r3, [pc, #64]	; (10018dd8 <_putc_r+0x64>)
10018d96:	429c      	cmp	r4, r3
10018d98:	d101      	bne.n	10018d9e <_putc_r+0x2a>
10018d9a:	68b4      	ldr	r4, [r6, #8]
10018d9c:	e003      	b.n	10018da6 <_putc_r+0x32>
10018d9e:	4b0f      	ldr	r3, [pc, #60]	; (10018ddc <_putc_r+0x68>)
10018da0:	429c      	cmp	r4, r3
10018da2:	d100      	bne.n	10018da6 <_putc_r+0x32>
10018da4:	68f4      	ldr	r4, [r6, #12]
10018da6:	68a3      	ldr	r3, [r4, #8]
10018da8:	3b01      	subs	r3, #1
10018daa:	60a3      	str	r3, [r4, #8]
10018dac:	2b00      	cmp	r3, #0
10018dae:	da05      	bge.n	10018dbc <_putc_r+0x48>
10018db0:	69a2      	ldr	r2, [r4, #24]
10018db2:	4293      	cmp	r3, r2
10018db4:	db08      	blt.n	10018dc8 <_putc_r+0x54>
10018db6:	b2eb      	uxtb	r3, r5
10018db8:	2b0a      	cmp	r3, #10
10018dba:	d005      	beq.n	10018dc8 <_putc_r+0x54>
10018dbc:	6823      	ldr	r3, [r4, #0]
10018dbe:	b2e8      	uxtb	r0, r5
10018dc0:	1c5a      	adds	r2, r3, #1
10018dc2:	6022      	str	r2, [r4, #0]
10018dc4:	701d      	strb	r5, [r3, #0]
10018dc6:	e004      	b.n	10018dd2 <_putc_r+0x5e>
10018dc8:	0022      	movs	r2, r4
10018dca:	0029      	movs	r1, r5
10018dcc:	0030      	movs	r0, r6
10018dce:	f7ff fa43 	bl	10018258 <__swbuf_r>
10018dd2:	bd70      	pop	{r4, r5, r6, pc}
10018dd4:	1001a3f4 	.word	0x1001a3f4
10018dd8:	1001a414 	.word	0x1001a414
10018ddc:	1001a434 	.word	0x1001a434

10018de0 <__sread>:
10018de0:	b570      	push	{r4, r5, r6, lr}
10018de2:	000c      	movs	r4, r1
10018de4:	250e      	movs	r5, #14
10018de6:	5f49      	ldrsh	r1, [r1, r5]
10018de8:	f000 f8b0 	bl	10018f4c <_read_r>
10018dec:	2800      	cmp	r0, #0
10018dee:	db03      	blt.n	10018df8 <__sread+0x18>
10018df0:	6d63      	ldr	r3, [r4, #84]	; 0x54
10018df2:	181b      	adds	r3, r3, r0
10018df4:	6563      	str	r3, [r4, #84]	; 0x54
10018df6:	e003      	b.n	10018e00 <__sread+0x20>
10018df8:	89a2      	ldrh	r2, [r4, #12]
10018dfa:	4b02      	ldr	r3, [pc, #8]	; (10018e04 <__sread+0x24>)
10018dfc:	4013      	ands	r3, r2
10018dfe:	81a3      	strh	r3, [r4, #12]
10018e00:	bd70      	pop	{r4, r5, r6, pc}
10018e02:	46c0      	nop			; (mov r8, r8)
10018e04:	ffffefff 	.word	0xffffefff

10018e08 <__swrite>:
10018e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10018e0a:	001f      	movs	r7, r3
10018e0c:	898b      	ldrh	r3, [r1, #12]
10018e0e:	0005      	movs	r5, r0
10018e10:	000c      	movs	r4, r1
10018e12:	0016      	movs	r6, r2
10018e14:	05db      	lsls	r3, r3, #23
10018e16:	d505      	bpl.n	10018e24 <__swrite+0x1c>
10018e18:	230e      	movs	r3, #14
10018e1a:	5ec9      	ldrsh	r1, [r1, r3]
10018e1c:	2200      	movs	r2, #0
10018e1e:	2302      	movs	r3, #2
10018e20:	f000 f874 	bl	10018f0c <_lseek_r>
10018e24:	89a2      	ldrh	r2, [r4, #12]
10018e26:	4b05      	ldr	r3, [pc, #20]	; (10018e3c <__swrite+0x34>)
10018e28:	0028      	movs	r0, r5
10018e2a:	4013      	ands	r3, r2
10018e2c:	81a3      	strh	r3, [r4, #12]
10018e2e:	0032      	movs	r2, r6
10018e30:	230e      	movs	r3, #14
10018e32:	5ee1      	ldrsh	r1, [r4, r3]
10018e34:	003b      	movs	r3, r7
10018e36:	f000 f81f 	bl	10018e78 <_write_r>
10018e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10018e3c:	ffffefff 	.word	0xffffefff

10018e40 <__sseek>:
10018e40:	b570      	push	{r4, r5, r6, lr}
10018e42:	000c      	movs	r4, r1
10018e44:	250e      	movs	r5, #14
10018e46:	5f49      	ldrsh	r1, [r1, r5]
10018e48:	f000 f860 	bl	10018f0c <_lseek_r>
10018e4c:	89a3      	ldrh	r3, [r4, #12]
10018e4e:	1c42      	adds	r2, r0, #1
10018e50:	d103      	bne.n	10018e5a <__sseek+0x1a>
10018e52:	4a05      	ldr	r2, [pc, #20]	; (10018e68 <__sseek+0x28>)
10018e54:	4013      	ands	r3, r2
10018e56:	81a3      	strh	r3, [r4, #12]
10018e58:	e004      	b.n	10018e64 <__sseek+0x24>
10018e5a:	2280      	movs	r2, #128	; 0x80
10018e5c:	0152      	lsls	r2, r2, #5
10018e5e:	4313      	orrs	r3, r2
10018e60:	81a3      	strh	r3, [r4, #12]
10018e62:	6560      	str	r0, [r4, #84]	; 0x54
10018e64:	bd70      	pop	{r4, r5, r6, pc}
10018e66:	46c0      	nop			; (mov r8, r8)
10018e68:	ffffefff 	.word	0xffffefff

10018e6c <__sclose>:
10018e6c:	b510      	push	{r4, lr}
10018e6e:	230e      	movs	r3, #14
10018e70:	5ec9      	ldrsh	r1, [r1, r3]
10018e72:	f000 f815 	bl	10018ea0 <_close_r>
10018e76:	bd10      	pop	{r4, pc}

10018e78 <_write_r>:
10018e78:	b570      	push	{r4, r5, r6, lr}
10018e7a:	0005      	movs	r5, r0
10018e7c:	0008      	movs	r0, r1
10018e7e:	0011      	movs	r1, r2
10018e80:	2200      	movs	r2, #0
10018e82:	4c06      	ldr	r4, [pc, #24]	; (10018e9c <_write_r+0x24>)
10018e84:	6022      	str	r2, [r4, #0]
10018e86:	001a      	movs	r2, r3
10018e88:	f7f3 fb46 	bl	1000c518 <_write>
10018e8c:	1c43      	adds	r3, r0, #1
10018e8e:	d103      	bne.n	10018e98 <_write_r+0x20>
10018e90:	6823      	ldr	r3, [r4, #0]
10018e92:	2b00      	cmp	r3, #0
10018e94:	d000      	beq.n	10018e98 <_write_r+0x20>
10018e96:	602b      	str	r3, [r5, #0]
10018e98:	bd70      	pop	{r4, r5, r6, pc}
10018e9a:	46c0      	nop			; (mov r8, r8)
10018e9c:	1001d990 	.word	0x1001d990

10018ea0 <_close_r>:
10018ea0:	2300      	movs	r3, #0
10018ea2:	b570      	push	{r4, r5, r6, lr}
10018ea4:	4c06      	ldr	r4, [pc, #24]	; (10018ec0 <_close_r+0x20>)
10018ea6:	0005      	movs	r5, r0
10018ea8:	0008      	movs	r0, r1
10018eaa:	6023      	str	r3, [r4, #0]
10018eac:	f7f4 fd36 	bl	1000d91c <_close>
10018eb0:	1c43      	adds	r3, r0, #1
10018eb2:	d103      	bne.n	10018ebc <_close_r+0x1c>
10018eb4:	6823      	ldr	r3, [r4, #0]
10018eb6:	2b00      	cmp	r3, #0
10018eb8:	d000      	beq.n	10018ebc <_close_r+0x1c>
10018eba:	602b      	str	r3, [r5, #0]
10018ebc:	bd70      	pop	{r4, r5, r6, pc}
10018ebe:	46c0      	nop			; (mov r8, r8)
10018ec0:	1001d990 	.word	0x1001d990

10018ec4 <_fstat_r>:
10018ec4:	2300      	movs	r3, #0
10018ec6:	b570      	push	{r4, r5, r6, lr}
10018ec8:	4c06      	ldr	r4, [pc, #24]	; (10018ee4 <_fstat_r+0x20>)
10018eca:	0005      	movs	r5, r0
10018ecc:	0008      	movs	r0, r1
10018ece:	0011      	movs	r1, r2
10018ed0:	6023      	str	r3, [r4, #0]
10018ed2:	f7f4 fd27 	bl	1000d924 <_fstat>
10018ed6:	1c43      	adds	r3, r0, #1
10018ed8:	d103      	bne.n	10018ee2 <_fstat_r+0x1e>
10018eda:	6823      	ldr	r3, [r4, #0]
10018edc:	2b00      	cmp	r3, #0
10018ede:	d000      	beq.n	10018ee2 <_fstat_r+0x1e>
10018ee0:	602b      	str	r3, [r5, #0]
10018ee2:	bd70      	pop	{r4, r5, r6, pc}
10018ee4:	1001d990 	.word	0x1001d990

10018ee8 <_isatty_r>:
10018ee8:	2300      	movs	r3, #0
10018eea:	b570      	push	{r4, r5, r6, lr}
10018eec:	4c06      	ldr	r4, [pc, #24]	; (10018f08 <_isatty_r+0x20>)
10018eee:	0005      	movs	r5, r0
10018ef0:	0008      	movs	r0, r1
10018ef2:	6023      	str	r3, [r4, #0]
10018ef4:	f7f4 fd1c 	bl	1000d930 <_isatty>
10018ef8:	1c43      	adds	r3, r0, #1
10018efa:	d103      	bne.n	10018f04 <_isatty_r+0x1c>
10018efc:	6823      	ldr	r3, [r4, #0]
10018efe:	2b00      	cmp	r3, #0
10018f00:	d000      	beq.n	10018f04 <_isatty_r+0x1c>
10018f02:	602b      	str	r3, [r5, #0]
10018f04:	bd70      	pop	{r4, r5, r6, pc}
10018f06:	46c0      	nop			; (mov r8, r8)
10018f08:	1001d990 	.word	0x1001d990

10018f0c <_lseek_r>:
10018f0c:	b570      	push	{r4, r5, r6, lr}
10018f0e:	0005      	movs	r5, r0
10018f10:	0008      	movs	r0, r1
10018f12:	0011      	movs	r1, r2
10018f14:	2200      	movs	r2, #0
10018f16:	4c06      	ldr	r4, [pc, #24]	; (10018f30 <_lseek_r+0x24>)
10018f18:	6022      	str	r2, [r4, #0]
10018f1a:	001a      	movs	r2, r3
10018f1c:	f7f4 fd0a 	bl	1000d934 <_lseek>
10018f20:	1c43      	adds	r3, r0, #1
10018f22:	d103      	bne.n	10018f2c <_lseek_r+0x20>
10018f24:	6823      	ldr	r3, [r4, #0]
10018f26:	2b00      	cmp	r3, #0
10018f28:	d000      	beq.n	10018f2c <_lseek_r+0x20>
10018f2a:	602b      	str	r3, [r5, #0]
10018f2c:	bd70      	pop	{r4, r5, r6, pc}
10018f2e:	46c0      	nop			; (mov r8, r8)
10018f30:	1001d990 	.word	0x1001d990

10018f34 <memchr>:
10018f34:	b2c9      	uxtb	r1, r1
10018f36:	1882      	adds	r2, r0, r2
10018f38:	4290      	cmp	r0, r2
10018f3a:	d004      	beq.n	10018f46 <memchr+0x12>
10018f3c:	7803      	ldrb	r3, [r0, #0]
10018f3e:	428b      	cmp	r3, r1
10018f40:	d002      	beq.n	10018f48 <memchr+0x14>
10018f42:	3001      	adds	r0, #1
10018f44:	e7f8      	b.n	10018f38 <memchr+0x4>
10018f46:	2000      	movs	r0, #0
10018f48:	4770      	bx	lr
	...

10018f4c <_read_r>:
10018f4c:	b570      	push	{r4, r5, r6, lr}
10018f4e:	0005      	movs	r5, r0
10018f50:	0008      	movs	r0, r1
10018f52:	0011      	movs	r1, r2
10018f54:	2200      	movs	r2, #0
10018f56:	4c06      	ldr	r4, [pc, #24]	; (10018f70 <_read_r+0x24>)
10018f58:	6022      	str	r2, [r4, #0]
10018f5a:	001a      	movs	r2, r3
10018f5c:	f7f3 fabc 	bl	1000c4d8 <_read>
10018f60:	1c43      	adds	r3, r0, #1
10018f62:	d103      	bne.n	10018f6c <_read_r+0x20>
10018f64:	6823      	ldr	r3, [r4, #0]
10018f66:	2b00      	cmp	r3, #0
10018f68:	d000      	beq.n	10018f6c <_read_r+0x20>
10018f6a:	602b      	str	r3, [r5, #0]
10018f6c:	bd70      	pop	{r4, r5, r6, pc}
10018f6e:	46c0      	nop			; (mov r8, r8)
10018f70:	1001d990 	.word	0x1001d990

10018f74 <test>:
10018f74:	00000083 00004000 00000200 00c800c8     .....@..........
10018f84:	41a00000 42700000 3f000000 3e666666     ...A..pB...?fff>
10018f94:	3f2ccccd 3f000000 3f000000 0000000a     ..,?...?...?....
10018fa4:	72617453 676e6974 61694220 6f4c2073     Starting Bias Lo
10018fb4:	5220706f 73646165 00000000 706d6153     op Reads....Samp
10018fc4:	3a73656c 0a642520 00000000 65636341     les: %d.....Acce
10018fd4:	666f206c 74657366 74616420 57482061     l offset data HW
10018fe4:	62205453 253d7469 25203a64 66342e37     ST bit=%d: %7.4f
10018ff4:	2e372520 25206634 66342e37 00000a0d      %7.4f %7.4f....
10019004:	6f727947 66666f20 20746573 61746164     Gyro offset data
10019014:	53574820 69622054 64253d74 3725203a      HWST bit=%d: %7
10019024:	2066342e 342e3725 37252066 0d66342e     .4f %7.4f %7.4f.
10019034:	0000000a 78352325 2325203a 0a0d7835     ....%#5x: %#5x..
10019044:	00000000 706d6f43 20737361 20746f6e     ....Compass not 
10019054:	6e756f66 00002e64 72617453 676e6974     found...Starting
10019064:	55504d20 30303536 53574820 000d2154      MPU6500 HWST!..
10019074:	72746552 69766569 4220676e 65736169     Retrieving Biase
10019084:	00000d73 72746552 69766569 4220676e     s...Retrieving B
10019094:	65736169 72452073 20726f72 6f70202d     iases Error - po
100190a4:	62697373 4920656c 65204332 726f7272     ssible I2C error
100190b4:	00000000 72746552 69766569 5320676e     ....Retrieving S
100190c4:	69422054 73657361 00000000 72746552     T Biases....Retr
100190d4:	69766569 5320676e 69422054 73657361     ieving ST Biases
100190e4:	72724520 2d20726f 736f7020 6c626973      Error - possibl
100190f4:	32492065 72652043 00726f72 64616552     e I2C error.Read
10019104:	20676e69 2050544f 69676552 72657473     ing OTP Register
10019114:	72724520 002e726f 65636341 544f206c      Error..Accel OT
10019124:	64253a50 6425202c 6425202c 0000000a     P:%d, %d, %d....
10019134:	45434341 52433a4c 52455449 41204149     ACCEL:CRITERIA A
10019144:	00000000 73616942 6968535f 253d7466     ....Bias_Shift=%
10019154:	66342e37 6942202c 525f7361 253d6765     7.4f, Bias_Reg=%
10019164:	66342e37 6942202c 485f7361 3d545357     7.4f, Bias_HWST=
10019174:	342e3725 000a0d66 2050544f 756c6176     %7.4f...OTP valu
10019184:	25203a65 66342e37 00000a0d 69746172     e: %7.4f....rati
10019194:	37253d6f 2c66342e 72687420 6f687365     o=%7.4f, thresho
100191a4:	253d646c 66342e37 00000a0d 45434341     ld=%7.4f....ACCE
100191b4:	6146204c 41206c69 20736978 6425203d     L Fail Axis = %d
100191c4:	0000000a 45434341 52433a4c 52455449     ....ACCEL:CRITER
100191d4:	42204149 0000000d 206e694d 203a474d     IA B....Min MG: 
100191e4:	342e3725 000a0d66 2078614d 203a474d     %7.4f...Max MG: 
100191f4:	342e3725 000a0d66 73616942 6968735f     %7.4f...Bias_shi
10019204:	253d7466 66342e37 7473202c 2e37253d     ft=%7.4f, st=%7.
10019214:	202c6634 3d676572 342e3725 00000a66     4f, reg=%7.4f...
10019224:	65636341 4146206c 61204c49 3a736978     Accel FAIL axis:
10019234:	3c206425 3232203d 20676d35 3e20726f     %d <= 225mg or >
10019244:	3736203d 0a676d35 00000000 65636341     = 675mg.....Acce
10019254:	52433a6c 52455449 43204149 6962203a     l:CRITERIA C: bi
10019264:	6c207361 20737365 6e616874 2e372520     as less than %7.
10019274:	000a6634 4c494146 203a4445 65636341     4f..FAILED: Acce
10019284:	7861206c 253a7369 203d2064 20646c25     l axis:%d = %ld 
10019294:	3035203e 0a676d30 00000000 65636341     > 500mg.....Acce
100192a4:	6553206c 5420666c 20747365 75736552     l Self Test Resu
100192b4:	3a73746c 0a642520 00000000 6f727947     lts: %d.....Gyro
100192c4:	50544f20 2c64253a 2c642520 0d642520      OTP:%d, %d, %d.
100192d4:	0000000a 4f525947 4952433a 49524554     ....GYRO:CRITERI
100192e4:	00412041 6f727947 69614620 7841206c     A A.Gyro Fail Ax
100192f4:	3d207369 0a642520 00000000 4f525947     is = %d.....GYRO
10019304:	4952433a 49524554 0d422041 00000000     :CRITERIA B.....
10019314:	2078614d 3a535044 2e372520 0a0d6634     Max DPS: %7.4f..
10019324:	00000000 4f525947 49414620 7861204c     ....GYRO FAIL ax
10019334:	253a7369 72672064 65746165 68742072     is:%d greater th
10019344:	36206e61 73706430 0000000a 6f727947     an 60dps....Gyro
10019354:	4952433a 49524554 3a432041 61696220     :CRITERIA C: bia
10019364:	656c2073 74207373 206e6168 342e3725     s less than %7.4
10019374:	00000a66 4c494146 203a4445 6f727947     f...FAILED: Gyro
10019384:	69786120 64253a73 25203d20 3e20646c      axis:%d = %ld >
10019394:	64303220 000a7370 6f727947 6c655320      20dps..Gyro Sel
100193a4:	65542066 52207473 6c757365 203a7374     f Test Results: 
100193b4:	000a6425 706d6f43 20737361 666c6553     %d..Compass Self
100193c4:	73655420 65522074 746c7573 25203a73      Test Results: %
100193d4:	00000a64 74697845 20676e69 54535748     d...Exiting HWST
100193e4:	00000000                                ....

100193e8 <hw>:
100193e8:	04000069 01410080 01000000 00001333     i.....A.....3...

100193f8 <reg>:
100193f8:	0c1a1975 1c1b236a 201f1e1d 3b437472     u...j#..... rtC;
10019408:	3a393841 376c6b69 6d24776f 2625706e     A89:ikl7ow$mnp%&
10019418:	2a292827 67646334 00000049 8db3aab8     '()*4cdgI.......
10019428:	350d98b4 0000005d 006ccd4c 002cc90c     ...5]...L.l...,.
10019438:	00765636 00664626 c4abf2fe dfdff1aa     6Vv.&Ff.........
10019448:	dfdfafbb aaaaaab8 c5c388b0 000000c7     ................
10019458:	f3b9b1d8 b691a38b 00d9b409 f3b9b1da     ................
10019468:	b691a38b 00dab4da 1000b8ea 1000b8ea     ................
10019478:	1000b8ea 1000b8ea 1000b8ea 1000b8ea     ................
10019488:	1000b8ea 1000b8ea 1000b8ea 1000b8ea     ................
10019498:	1000b8ea 1000b8ea 1000b8ea 1000b8ea     ................
100194a8:	1000b8ea 1000b8ea 1000b8ea 1000b8ea     ................
100194b8:	1000b8ea 1000b906 1000b906 1000b906     ................
100194c8:	1000b906 1000b906 1000b906 1000b906     ................
100194d8:	1000b906 1000b906 1000b906 1000b928     ............(...
100194e8:	1000b928 1000b928 1000b928 1000b928     (...(...(...(...
100194f8:	1000b928 1000b928 1000b928 1000b928     (...(...(...(...
10019508:	1000b928 1000b94a 1000b94a 1000b94a     (...J...J...J...
10019518:	1000b94a 1000b94a 1000b94a 1000b958     J...J...J...X...
10019528:	1000b958 1000b958 1000b958 1000b958     X...X...X...X...
10019538:	1000b958 1000b958 1000b958 1000b958     X...X...X...X...
10019548:	1000b966 1000b966 1000b8c4 1000b8c4     f...f...........
10019558:	1000b8de 1000b8c4 34333231 00003635     ........123456..
10019568:	efcdab00 00efcdab b2d60600 f8f005f0     ................
10019578:	00000000                                ....

1001957c <ble_mgr_gatt_server_handle>:
	...
10019594:	1000b2fd 1000b19d 1000aa79 00000000     ........y.......
100195a4:	69766544 64206563 6f637369 63656e6e     Device disconnec
100195b4:	20646574 73616552 303a6e6f 32302578     ted Reason:0x%02
100195c4:	61482078 656c646e 2578303d 00000078     x Handle=0x%x...
100195d4:	72696150 20676e69 6c696166 2e2e6465     Pairing failed..
100195e4:	7369442e 6e6e6f63 69746365 0000676e     .Disconnecting..
100195f4:	63736944 656e6e6f 52207463 65757165     Disconnect Reque
10019604:	46207473 656c6961 00000064 72696150     st Failed...Pair
10019614:	20676e69 636f7270 72756465 6f632065     ing procedure co
10019624:	656c706d 20646574 63637573 66737365     mpleted successf
10019634:	796c6c75 00000000 20454c42 69766544     ully....BLE Devi
10019644:	6e206563 6620746f 646e756f 206f7420     ce not found to 
10019654:	726f7473 68742065 61702065 6e697269     store the pairin
10019664:	6e692067 00006f66 72636e45 69747079     g info..Encrypti
10019674:	4e206e6f 7320746f 74726174 00006465     on Not started..
10019684:	76616c53 65532065 69727563 52207974     Slave Security R
10019694:	2d207165 74754120 746e6568 74616369     eq - Authenticat
100196a4:	206e6f69 6c696146 00006465 72696150     ion Failed..Pair
100196b4:	71655220 74736575 41202d20 65687475      Request - Authe
100196c4:	6369746e 6f697461 6146206e 64656c69     ntication Failed
100196d4:	00000000 65746e45 68742072 61502065     ....Enter the Pa
100196e4:	656b7373 2d362879 69676944 69202974     sskey(6-Digit) i
100196f4:	6554206e 6e696d72 003a6c61 206e6950     n Terminal:.Pin 
10019704:	656d6954 0074756f 63736944 656e6e6f     Timeout.Disconne
10019714:	6e697463 2e2e2067 0000002e 61656c50     cting ......Plea
10019724:	45206573 7265746e 65687420 6c6f6620     se Enter the fol
10019734:	69776f6c 5020676e 2d737361 65646f63     lowing Pass-code
10019744:	206e6f28 6568746f 65442072 65636976     (on other Device
10019754:	00003a29 72696150 79656b2d 70657220     ):..Pair-key rep
10019764:	6620796c 656c6961 00000064 20424f4f     ly failed...OOB 
10019774:	74616546 20657275 20746f4e 70707573     Feature Not supp
10019784:	6574726f 00000064 65746e45 20646572     orted...Entered 
10019794:	73736150 646f632d 00003a65 72696150     Pass-code:..Pair
100197a4:	20676e69 6f666e69 74616d72 206e6f69     ing information 
100197b4:	7020666f 20726565 69766564 69206563     of peer device i
100197c4:	6f6e2073 76612074 616c6961 2e656c62     s not available.
100197d4:	00000000 61656c50 75206573 6961706e     ....Please unpai
100197e4:	68742072 65642065 65636976 6f726620     r the device fro
100197f4:	6570206d 64207265 63697665 6f6d2865     m peer device(mo
10019804:	656c6962 65732029 6e697474 6d207367     bile) settings m
10019814:	20756e65 20646e61 72617473 61702074     enu and start pa
10019824:	6e697269 67612067 006e6961 72636e45     iring again.Encr
10019834:	69747079 52206e6f 65757165 52207473     yption Request R
10019844:	796c7065 69614620 0064656c 6e616353     eply Failed.Scan
10019854:	676e696e 61662020 64656c69 00000000     ning  failed....
10019864:	2055544d 6e616843 46206567 656c6961     MTU Change Faile
10019874:	43202c64 656e6e6f 6f697463 6148206e     d, Connection Ha
10019884:	656c646e 2c64253a 65704f20 69746172     ndle:%d, Operati
10019894:	253a6e6f 00000064 72636e45 69747079     on:%d...Encrypti
100198a4:	66206e6f 656c6961 00000064 72636e45     on failed...Encr
100198b4:	69747079 63206e6f 6c706d6f 64657465     yption completed
100198c4:	63757320 73736563 6c6c7566 00000079      successfully...
100198d4:	20454c42 69766544 6e206563 6620746f     BLE Device not f
100198e4:	646e756f 636e6520 74707972 206e6f69     ound encryption 
100198f4:	6f666e69 00000000 6f666e49 78616d3a     info....Info:max
10019904:	6d756d69 2e6f6e20 7320666f 206e6163     imum no.of scan 
10019914:	69766564 72206563 68636165 2e2e6465     device reached..
10019924:	6f74532e 6e697070 63532067 00006e61     .Stopping Scan..
10019934:	6c696146 74206465 7473206f 7320706f     Failed to stop s
10019944:	6e6e6163 00676e69 74696e49 696c6169     canning.Initiali
10019954:	676e697a 4d415320 00313142 424d4153     zing SAMB11.SAMB
10019964:	49203131 6974696e 7a696c61 6f697461     11 Initializatio
10019974:	6166206e 64656c69 00000000 61656c50     n failed....Plea
10019984:	63206573 6b636568 65687420 776f7020     se check the pow
10019994:	61207265 6320646e 656e6e6f 6f697463     er and connectio
100199a4:	202f206e 64726168 65726177 6e6f6320     n / hardware con
100199b4:	7463656e 0000726f 454d5441 4c422d4c     nector..ATMEL-BL
100199c4:	00000045 69766544 6e206563 20656d61     E...Device name 
100199d4:	20746573 6c696166 00006465 61204442     set failed..BD a
100199e4:	65726464 67207373 66207465 656c6961     ddress get faile
100199f4:	00000064 41204442 65726464 303a7373     d...BD Address:0
10019a04:	32302578 32302558 32302558 32302558     x%02X%02X%02X%02
10019a14:	32302558 32302558 41202c58 65726464     X%02X%02X, Addre
10019a24:	54207373 3a657079 00006425 20746553     ss Type:%d..Set 
10019a34:	20454c42 69766544 63206563 69666e6f     BLE Device confi
10019a44:	61727567 6e6f6974 69616620 0064656c     guration failed.
10019a54:	20746553 20454c42 69766544 41206563     Set BLE Device A
10019a64:	65726464 66207373 656c6961 00000064     ddress failed...
10019a74:	6e616353 676e696e 502e2e2e 7361656c     Scanning...Pleas
10019a84:	61772065 2e2e7469 0000002e 76616c53     e wait......Slav
10019a94:	65732065 69727563 72207974 65757165     e security reque
10019aa4:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10019ab4:	65746365 6f742064 65657020 65642072     ected to peer de
10019ac4:	65636976 74697720 64612068 73657264     vice with addres
10019ad4:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
10019ae4:	78323025 78323025 78323025 00000000     %02x%02x%02x....
10019af4:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
10019b04:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
10019b14:	61522067 6d6f646e 64646120 73736572     g Random address
10019b24:	69616620 2a64656c 0000002a 2078614d      failed**...Max 
10019b34:	626d756e 6f207265 6f632066 63656e6e     number of connec
10019b44:	6e6f6974 61657220 64656863 6425203a     tion reached: %d
10019b54:	3d3d3d20 7369443e 6e6e6f63 69746365      ===>Disconnecti
10019b64:	2e2e676e 0000002e 69766544 43206563     ng......Device C
10019b74:	656e6e6f 6f697463 6146206e 64656c69     onnection Failed
10019b84:	53202d20 75746174 25203a73 00000064      - Status: %d...
10019b94:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
10019ba4:	61642074 73206174 66207465 656c6961     t data set faile
10019bb4:	00000064                                d...

10019bb8 <ble_mgr_gap_handle>:
10019bb8:	1000b301 1000b281 1000b175 00000000     ........u.......
10019bc8:	00000000 1000b5f9 1000aa89 1000aa85     ................
10019bd8:	1000ac25 1000ab25 1000ae09 1000ac3d     %...%.......=...
10019be8:	1000af45 1000b0a1 1000b1cd 1000b805     E...............
	...
10019c04:	00002121 1000d49c 1000d490 1000d484     !!..............
10019c14:	1000d478 1000d46c 1000d460 1000d452     x...l...`...R...
10019c24:	1000d444 1000d436 1000d428 1000d41a     D...6...(.......
10019c34:	1000d40c 1000d3fe 1000d3f0 1000d3e2     ................
10019c44:	1000d3d4 1000d3c6 1000d3b8 1000d3aa     ................
10019c54:	1000d39c 1000d38e 1000d380 1000d372     ............r...
10019c64:	1000d364 1000d356 1000d348 1000d33a     d...V...H...:...
10019c74:	1000d32e 1000d322 1000d316 1000d30a     ...."...........
10019c84:	1000d2fe 1000d2f2 1000d2e6 1000d2da     ................
10019c94:	1000d2cc 1000d2be 1000d2b0 1000d2a2     ................
10019ca4:	1000d294 1000d286 1000d278 1000d26a     ........x...j...
10019cb4:	1000d25c 1000d24e 1000d240 1000d232     \...N...@...2...
10019cc4:	1000d224 1000d216 1000d208 1000d1fa     $...............
10019cd4:	1000d1ee 1000d1e2 1000d4a8 1000d8da     ................
10019ce4:	1000d8d2 1000d8ca 1000d8b2 1000d89c     ................
10019cf4:	1000d81e 1000d806 1000d7ee 1000d7d6     ................
10019d04:	1000d7be 1000d7a6 1000d78e 1000d776     ............v...
10019d14:	1000d75e 1000d8e2 1000d8e2 1000d8e2     ^...............
10019d24:	1000d8e2 1000d8e2 1000d8e2 1000d8e2     ................
10019d34:	1000d8e2 1000d746 1000d72e 1000d716     ....F...........
10019d44:	1000d700 1000d6e8 1000d8e2 1000d8e2     ................
10019d54:	1000d8e2 1000d8e2 1000d8e2 1000d8e2     ................
10019d64:	1000d6d0 1000d6b8 1000d6a0 1000d688     ................
10019d74:	1000d8e2 1000d670 1000d658 1000d8e2     ....p...X.......
10019d84:	1000d8e2 1000d642 1000d62c 1000d616     ....B...,.......
10019d94:	1000d600 1000d8e2 1000d8e2 1000d8e2     ................
10019da4:	1000d8e2 1000d8e2 1000d8e2 1000d8e2     ................
10019db4:	1000d8e2 1000d5f8 1000d5f0 1000d5e8     ................
10019dc4:	1000d5d4 1000d5bc 1000d5a4 1000d58c     ................
10019dd4:	1000d574 1000d55c 1000d544 1000d52e     t...\...D.......
10019de4:	1000d518 1000d500 1000d4e8 4f464946     ............FIFO
10019df4:	6425203a 20642520 202c6425 25206425     : %d %d %d, %d %
10019e04:	64252064 6c25202c 6c252064 6c252064     d %d, %ld %ld %l
10019e14:	6c252064 00000064 20746f4e 68747561     d %ld...Not auth
10019e24:	7a69726f 002e6465 6f727947 6425203a     orized..Gyro: %d
10019e34:	20642520 00006425 706d6554 6c25203a      %d %d..Temp: %l
10019e44:	00000064 65636341 25203a6c 64252064     d...Accel: %d %d
10019e54:	00642520 706d6f43 3a737361 20642520      %d.Compass: %d 
10019e64:	25206425 00000064 4c504d65 312e3520     %d %d...eMPL 5.1
10019e74:	6d744100 43206c65 2e70726f              .Atmel Corp.

10019e80 <CSWTCH.47>:
10019e80:	03010300 03030303 03030303 00020303     ................
10019e90:	74727173 00000066                       sqrtf...

10019e98 <atanlo>:
10019e98:	31ac3769 33222168 33140fb4 33a22168     i7.1h!"3...3h!.3

10019ea8 <atanhi>:
10019ea8:	3eed6338 3f490fda 3f7b985e 3fc90fda     8c.>..I?^.{?...?
10019eb8:	1001169e 10011642 1001162e 10011572     ....B.......r...
10019ec8:	1001144a 10011524 100116bc 736f6361     J...$.......acos
10019ed8:	00000066                                f...

10019edc <npio2_hw>:
10019edc:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
10019eec:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
10019efc:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
10019f0c:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
10019f1c:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
10019f2c:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
10019f3c:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
10019f4c:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

10019f5c <two_over_pi>:
10019f5c:	000000a2 000000f9 00000083 0000006e     ............n...
10019f6c:	0000004e 00000044 00000015 00000029     N...D.......)...
10019f7c:	000000fc 00000027 00000057 000000d1     ....'...W.......
10019f8c:	000000f5 00000034 000000dd 000000c0     ....4...........
10019f9c:	000000db 00000062 00000095 00000099     ....b...........
10019fac:	0000003c 00000043 00000090 00000041     <...C.......A...
10019fbc:	000000fe 00000051 00000063 000000ab     ....Q...c.......
10019fcc:	000000de 000000bb 000000c5 00000061     ............a...
10019fdc:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
10019fec:	00000042 0000004d 000000d2 000000e0     B...M...........
10019ffc:	00000006 00000049 0000002e 000000ea     ....I...........
1001a00c:	00000009 000000d1 00000092 0000001c     ................
1001a01c:	000000fe 0000001d 000000eb 0000001c     ................
1001a02c:	000000b1 00000029 000000a7 0000003e     ....).......>...
1001a03c:	000000e8 00000082 00000035 000000f5     ........5.......
1001a04c:	0000002e 000000bb 00000044 00000084     ........D.......
1001a05c:	000000e9 0000009c 00000070 00000026     ........p...&...
1001a06c:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
1001a07c:	00000039 00000091 000000d6 00000039     9...........9...
1001a08c:	00000083 00000053 00000039 000000f4     ....S...9.......
1001a09c:	0000009c 00000084 0000005f 0000008b     ........_.......
1001a0ac:	000000bd 000000f9 00000028 0000003b     ........(...;...
1001a0bc:	0000001f 000000f8 00000097 000000ff     ................
1001a0cc:	000000de 00000005 00000098 0000000f     ................
1001a0dc:	000000ef 0000002f 00000011 0000008b     ..../...........
1001a0ec:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
1001a0fc:	0000006d 00000036 0000007e 000000cf     m...6...~.......
1001a10c:	00000027 000000cb 00000009 000000b7     '...............
1001a11c:	0000004f 00000046 0000003f 00000066     O...F...?...f...
1001a12c:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
1001a13c:	00000075 00000027 000000ba 000000c7     u...'...........
1001a14c:	000000eb 000000e5 000000f1 0000007b     ............{...
1001a15c:	0000003d 00000007 00000039 000000f7     =.......9.......
1001a16c:	0000008a 00000052 00000092 000000ea     ....R...........
1001a17c:	0000006b 000000fb 0000005f 000000b1     k......._.......
1001a18c:	0000001f 0000008d 0000005d 00000008     ........].......
1001a19c:	00000056 00000003 00000030 00000046     V.......0...F...
1001a1ac:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
1001a1bc:	000000f0 000000cf 000000bc 00000020     ............ ...
1001a1cc:	0000009a 000000f4 00000036 0000001d     ........6.......
1001a1dc:	000000a9 000000e3 00000091 00000061     ............a...
1001a1ec:	0000005e 000000e6 0000001b 00000008     ^...............
1001a1fc:	00000065 00000099 00000085 0000005f     e..........._...
1001a20c:	00000014 000000a0 00000068 00000040     ........h...@...
1001a21c:	0000008d 000000ff 000000d8 00000080     ................
1001a22c:	0000004d 00000073 00000027 00000031     M...s...'...1...
1001a23c:	00000006 00000006 00000015 00000056     ............V...
1001a24c:	000000ca 00000073 000000a8 000000c9     ....s...........
1001a25c:	00000060 000000e2 0000007b 000000c0     `.......{.......
1001a26c:	0000008c 0000006b                       ....k...

1001a274 <init_jk>:
1001a274:	00000004 00000007 00000009              ............

1001a280 <PIo2>:
1001a280:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
1001a290:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
1001a2a0:	1fc40000 1bc60000 17440000 100154a2     ..........D..T..
1001a2b0:	100153c6 10015484 1001545c 10015484     .S...T..\T...T..
1001a2c0:	10015450 10015484 1001545c 100153c6     PT...T..\T...S..
1001a2d0:	100153c6 10015450 1001545c 10015508     .S..PT..\T...U..
1001a2e0:	10015508 10015508 1001548a 100153c6     .U...U...T...S..
1001a2f0:	100153c6 10015470 1001545a 10015470     .S..pT..ZT..pT..
1001a300:	10015450 10015470 1001545a 100153c6     PT..pT..ZT...S..
1001a310:	100153c6 10015450 1001545a 10015508     .S..PT..ZT...U..
1001a320:	10015508 10015508 10015514 10015800     .U...U...U...X..
1001a330:	1001575e 1001575e 1001575c 100157f2     ^W..^W..\W...W..
1001a340:	100157f2 100157e8 1001575c 100157f2     .W...W..\W...W..
1001a350:	100157e8 100157f2 1001575c 100157f8     .W...W..\W...W..
1001a360:	100157f8 100157f8 10015882 100165e0     .W...W...X...e..
1001a370:	100164ae 100165b4 100164a4 100165b4     .d...e...d...e..
1001a380:	100165be 100165b4 100164a4 100164ae     .e...e...d...d..
1001a390:	100164ae 100165be 100164a4 1001649a     .d...e...d...d..
1001a3a0:	1001649a 1001649a 10016810 10016e28     .d...d...h..(n..
1001a3b0:	10016ce8 10016ce8 10016ce6 10016e00     .l...l...l...n..
1001a3c0:	10016e00 10016df2 10016ce6 10016e00     .n...m...l...n..
1001a3d0:	10016df2 10016e00 10016ce6 10016e08     .m...n...l...n..
1001a3e0:	10016e08 10016e08 10017008 00000043     .n...n...p..C...

1001a3f0 <_global_impure_ptr>:
1001a3f0:	1001a4f8                                ....

1001a3f4 <__sf_fake_stdin>:
	...

1001a414 <__sf_fake_stdout>:
	...

1001a434 <__sf_fake_stderr>:
	...
1001a454:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
1001a464:	32313000 36353433 41393837 45444342     .0123456789ABCDE
1001a474:	31300046 35343332 39383736 64636261     F.0123456789abcd
1001a484:	00006665                                ef..

1001a488 <_init>:
1001a488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001a48a:	46c0      	nop			; (mov r8, r8)
1001a48c:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001a48e:	bc08      	pop	{r3}
1001a490:	469e      	mov	lr, r3
1001a492:	4770      	bx	lr

1001a494 <__init_array_start>:
1001a494:	10008095 	.word	0x10008095

1001a498 <_fini>:
1001a498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001a49a:	46c0      	nop			; (mov r8, r8)
1001a49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001a49e:	bc08      	pop	{r3}
1001a4a0:	469e      	mov	lr, r3
1001a4a2:	4770      	bx	lr

1001a4a4 <__fini_array_start>:
1001a4a4:	1000806d 	.word	0x1000806d
